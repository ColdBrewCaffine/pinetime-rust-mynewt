
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000000d9

Program Header:
0x70000001 off    0x00015d70 vaddr 0x00005d70 paddr 0x00005d70 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00005d88 memsz 0x00005d88 flags r-x
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x00005d88 align 2**16
         filesz 0x00000088 memsz 0x0000634c flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              00005d70  00000000  00000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab         00000000  00005d70  00005d70  00020160  2**0  CONTENTS
  2 .ARM.exidx         00000018  00005d70  00005d70  00015d70  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  4 .rtt               00000000  200000d8  200000d8  00020160  2**0  CONTENTS
  5 .data              00000088  200000d8  00005d88  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bssnz             00000000  20000160  20000160  00020160  2**0  CONTENTS
  7 .bss               000062c4  20000160  00005e10  00020160  2**2  ALLOC
  8 .stack_dummy       000001b0  20006428  20006428  00020160  2**3  CONTENTS, READONLY
  9 .ARM.attributes    0000002f  00000000  00000000  00020310  2**0  CONTENTS, READONLY
 10 .comment           0000007f  00000000  00000000  0002033f  2**0  CONTENTS, READONLY
 11 .svc_table         00000004  00000000  00000000  000203be  2**0  CONTENTS, READONLY
 12 .debug_line        000145a6  00000000  00000000  000203c2  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_info        0002ccbe  00000000  00000000  00034968  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev      00007f63  00000000  00000000  00061626  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges     00001558  00000000  00000000  00069590  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_str         00006435  00000000  00000000  0006aae8  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         0000fe44  00000000  00000000  00070f1d  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges      000013c0  00000000  00000000  00080d61  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame       000036fc  00000000  00000000  00082124  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00005d70 l    d  .ARM.extab	00000000 .ARM.extab
00005d70 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000160 l    d  .bssnz	00000000 .bssnz
20000160 l    d  .bss	00000000 .bss
20006428 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000000e0 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
000001ec l     F .text	0000003c errata_16
00000228 l     F .text	0000004c errata_31
00000274 l     F .text	0000003c errata_32
000002b0 l     F .text	0000004c errata_36
000002fc l     F .text	0000003c errata_37
00000338 l     F .text	0000003c errata_57
00000374 l     F .text	0000003c errata_66
000003b0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00005558 l     O .text	00000008 flash_devs
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 spiflash.c
000006c4 l     F .text	00000014 hal_spiflash_sector_info
000006d8 l     F .text	0000002e spiflash_release_power_down_generic
00000706 l     F .text	00000008 spiflash_delay_us
000007a8 l     F .text	00000050 spiflash_wait_ready_till
0000080e l     F .text	0000006a hal_spiflash_read
00000898 l     F .text	000000c8 hal_spiflash_write
00000960 l     F .text	00000078 spiflash_execute_erase
000009d8 l     F .text	0000002c spiflash_erase_cmd
00000a12 l     F .text	00000008 hal_spiflash_erase_sector
00000ae4 l     F .text	00000008 hal_spiflash_erase
00000b58 l     F .text	0000003e hal_spiflash_init
00005590 l     O .text	0000001c spiflash_flash_funcs
20000128 l     O .data	00000010 supported_chips
00005560 l     O .text	00000030 spiflash_characteristics
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000b9c l     F .text	00000028 nrf52k_flash_wait_ready
00000bc4 l     F .text	00000054 nrf52k_flash_erase_sector
00000c18 l     F .text	00000004 nrf52k_flash_init
00000c1c l     F .text	00000028 nrf52k_flash_sector_info
00000c44 l     F .text	000000d0 nrf52k_flash_write
00000d14 l     F .text	0000000e nrf52k_flash_read
000055c4 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 hal_spi.c
00000ddc l     F .text	0000006e nrf52_irqm_handler
00000e64 l     F .text	00000014 hal_spi_stop_transfer
00000e78 l     F .text	0000004a hal_spi_config_slave
00000ec4 l     F .text	000000b8 hal_spi_init_master
00000f7c l     F .text	000000de hal_spi_config_master
000055e0 l     O .text	00000010 nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
000012d0 l     F .text	00000016 nrf52_hal_wdt_default_handler
000012e8 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
00001388 l     F .text	00000044 nrf52_periph_create_timers
000013cc l     F .text	00000028 nrf52_periph_create_spi
000055f0 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 hal_timer.c
00001400 l     F .text	0000000a nrf_read_timer_cntr
0000140c l     F .text	000000f4 nrf_timer_set_ocmp
00001500 l     F .text	0000000a nrf_timer_disable_ocmp
0000150a l     F .text	00000010 nrf_rtc_disable_ocmp
0000151c l     F .text	00000054 hal_timer_read_bsptimer
00001570 l     F .text	00000070 hal_timer_chk_queue
000015e0 l     F .text	0000002c hal_timer_irq_handler
000055f4 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
000018bc l     F .text	00000026 os_dev_initialize
200001a4 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os.c
00000000 l    df *ABS*	00000000 os_eventq.c
00000000 l    df *ABS*	00000000 os_mempool.c
00001968 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00001a94 l     F .text	00000058 os_msys_init_once
200001b8 l     O .bss	00004900 os_msys_1_data
20004ab8 l     O .bss	0000000c os_msys_1_mbuf_pool
20004ac4 l     O .bss	0000001c os_msys_1_mempool
20000138 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
00001b88 l       .text	00000000 SVC_User
00001ba6 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 memcmp.c
00001c82 l       .text	00000000 test1
00001c76 l       .text	00000000 loop1
00001c88 l       .text	00000000 res1
00001ca4 l       .text	00000000 test2
00001cac l       .text	00000000 done
00001c98 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00001cb8 l       .text	00000000 test1
00001cb4 l       .text	00000000 loop1
00001cc6 l       .text	00000000 test2
00001cc2 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 pinetime_boot.c
00001d14 l     F .text	00000050 relocate_vector_table
00000000 l    df *ABS*	00000000 blink.c
00001eb0 l     F .text	00000028 delay_ms
00001ed8 l     F .text	00000050 blink_pattern
20000148 l     O .data	00000004 first_blink.7809
00005804 l     O .text	00000003 backlights
00005808 l     O .text	0000000c fast_pulse
00005814 l     O .text	00000006 faster_pulse
0000581c l     O .text	00000003 fastest_pulse
00005820 l     O .text	00000012 slow_pulse
00005834 l     O .text	00000024 slower_pulse
00000000 l    df *ABS*	00000000 display.c
00001fd8 l     F .text	0000001e hard_reset
00001ff8 l     F .text	00000024 delay_ms
0000201c l     F .text	00000042 transmit_spi
0000205e l     F .text	0000001a write_data
00002078 l     F .text	0000005e write_command
000020d8 l     F .text	0000016c init_display
00002244 l     F .text	00000030 set_orientation
00002274 l     F .text	00000110 set_window
20004ae8 l     O .bss	00000100 flash_buffer
00005858 l     O .text	00000001 COLMOD_PARA.8090
0000585c l     O .text	00000003 FRMCTR1_PARA.8078
00005860 l     O .text	00000003 FRMCTR2_PARA.8079
00005864 l     O .text	00000006 FRMCTR3_PARA.8080
0000586c l     O .text	00000001 INVCTR_PARA.8081
00005870 l     O .text	00000001 MADCTL1_PARA.8088
00005874 l     O .text	00000003 PWCTR1_PARA.8082
00005878 l     O .text	00000001 PWCTR2_PARA.8083
0000587c l     O .text	00000002 PWCTR3_PARA.8084
00005880 l     O .text	00000002 PWCTR4_PARA.8085
00005884 l     O .text	00000002 PWCTR5_PARA.8086
00005888 l     O .text	00000001 VMCTR1_PARA.8087
00000000 l    df *ABS*	00000000 console.c
20004be8 l     O .bss	00000010 avail_queue
20004bfc l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 semihosting_console.c
20004c0c l     O .bss	00000004 semihost_mbuf
2000014c l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 ticks.c
20004c10 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
000025c4 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_boot-sysinit-app.c
00000000 l    df *ABS*	00000000 bootutil_misc.c
00002630 l     F .text	0000000c boot_flag_decode
0000263c l     F .text	00000018 boot_magic_decode
00002654 l     F .text	00000060 boot_find_status
000026b4 l     F .text	0000006a boot_write_trailer
0000271e l     F .text	00000016 boot_write_trailer_flag
000058d4 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 loader.c
00002ae4 l     F .text	00000040 boot_is_header_valid
00002b24 l     F .text	0000001c boot_write_sz
00002b40 l     F .text	0000009c boot_read_image_size
00002bdc l     F .text	00000054 boot_check_header_erased
00002c30 l     F .text	00000048 boot_initialize_area
00002c78 l     F .text	0000003a boot_read_sectors
00002cb4 l     F .text	00000034 boot_image_check
00002ce8 l     F .text	00000098 boot_validate_slot
00002d80 l     F .text	00000038 boot_validated_swap_type
00002db8 l     F .text	00000036 boot_read_image_headers
00002e24 l     F .text	000000b4 boot_swap_image
00002ed8 l     F .text	00000094 boot_complete_partial_swap
00002f6c l     F .text	00000060 boot_perform_update
00002fcc l     F .text	000000f4 boot_prepare_image_for_update
20004c14 l     O .bss	0000006c boot_data
20004c80 l     O .bss	00000400 buf.7201
20005080 l     O .bss	00000600 primary_slot_sectors.7241
20005680 l     O .bss	00000600 scratch_sectors.7243
20005c80 l     O .bss	00000600 secondary_slot_sectors.7242
20006280 l     O .bss	00000100 tmpbuf.7134
00000000 l    df *ABS*	00000000 swap_misc.c
00000000 l    df *ABS*	00000000 swap_scratch.c
00003512 l     F .text	0000002e boot_copy_sz
00003540 l     F .text	000003f2 boot_swap_sectors
00005b30 l     O .text	00000010 boot_status_tables
00000000 l    df *ABS*	00000000 image_validate.c
00003d12 l     F .text	0000007e bootutil_img_hash
00000000 l    df *ABS*	00000000 tlv.c
00000000 l    df *ABS*	00000000 flash_map_extended.c
00000000 l    df *ABS*	00000000 sha256.c
00005c24 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 hal_flash.c
0000437c l     F .text	0000001e hal_flash_check_addr
20006380 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 mynewt.c
00004674 l     F .text	00000004 stdin_read
00004678 l     F .text	00000010 stdout_write
20000154 l     O .data	00000004 _stdin
20000158 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 tinyprintf.c
00004688 l     F .text	000000ec ui2a
00004774 l     F .text	00000020 i2a
00004794 l     F .text	00000030 a2d
000047c4 l     F .text	00000036 a2i
000047fa l     F .text	0000002a putf
00004824 l     F .text	0000011c putchw
00004940 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 flash_map.c
00004c7c l     F .text	0000003c flash_area_find_idx
00004cb8 l     F .text	00000058 flash_map_area_overlaps
00004d10 l     F .text	0000007c flash_map_add_new_dflt_areas
00004d8c l     F .text	00000078 flash_map_read_mfg
2000638c l     O .bss	00000078 mfg_areas.8029
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
00004fb4 l     F .text	00000094 mfg_seek_next_aux
00005048 l     F .text	00000070 mfg_read_mmr
000050b8 l     F .text	00000054 mfg_read_next_mmr
0000510c l     F .text	00000044 mfg_open_flash_area
00005150 l     F .text	00000044 mfg_read_tlv_body
00005208 l     F .text	0000004e mfg_read_mmr_refs
20006404 l     O .bss	00000001 mfg_initialized
20006408 l     O .bss	00000018 mfg_mmrs
20006420 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 nrf52_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
20006428 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
00000144  w    F .text	00000002 TIMER2_IRQHandler
200001b0 g     O .bss	00000008 g_os_mempool_list
00000144  w    F .text	00000002 RTC0_IRQHandler
000027b4 g     F .text	000000c0 boot_read_swap_state
000032e8 g     F .text	00000010 boot_go
200000d8 g       .data	00000000 __data_start__
000055ac g     O .text	00000018 nrf52k_flash_dev
00004c44 g     F .text	00000024 printf
00005d24 g     O .text	00000004 stdout
00000144  w    F .text	00000002 SWI0_EGU0_IRQHandler
00000d86 g     F .text	00000022 hal_gpio_write
00004090 g     F .text	00000128 mbedtls_internal_sha256_process
00000136  w    F .text	00000002 HardFault_Handler
0000161c g     F .text	00000060 hal_timer_init
000051a6 g     F .text	0000001a mfg_seek_next_with_type
00004616 g     F .text	0000000a hal_system_start
00002900 g     F .text	00000054 boot_write_swap_info
000043c2 g     F .text	00000010 hal_flash_align
00000144  w    F .text	00000002 SWI2_EGU2_IRQHandler
00002734 g     F .text	00000020 boot_magic_compatible_check
00001bd6 g     F .text	0000000c SysTick_Handler
00000144  w    F .text	00000002 GPIOTE_IRQHandler
0000160c g     F .text	00000010 nrf52_timer0_irq_handler
00001a12 g     F .text	00000026 os_memblock_put
00000144  w    F .text	00000002 PWM1_IRQHandler
20006384 g     O .bss	00000004 flash_map
00004584 g     F .text	00000030 hal_flash_is_erased
00001bac g     F .text	0000002a PendSV_Handler
00000134  w    F .text	00000002 NMI_Handler
00005d88 g       .ARM.exidx	00000000 __exidx_end
00003fde g     F .text	0000000c mbedtls_sha256_init
00000000 g       .text	00000000 __isr_vector_start
00000174 g     F .text	0000002c hal_system_reset
20000148 g       .data	00000000 __aeabi_unwind_cpp_pr0
00000144  w    F .text	00000002 POWER_CLOCK_IRQHandler
00005d88 g       .ARM.exidx	00000000 __etext
00000144  w    F .text	00000002 RADIO_IRQHandler
00004eda g     F .text	00000026 flash_area_write
20000160 g       .bssnz	00000000 __bssnz_start__
00000a56 g     F .text	0000008e spiflash_erase
00000144  w    F .text	00000002 PDM_IRQHandler
000032f8 g     F .text	0000008c swap_erase_trailer_sectors
00003188 g     F .text	00000160 context_boot_go
00003a48 g     F .text	00000100 boot_slots_compatible
000051c0 g     F .text	0000000a mfg_read_tlv_flash_area
000025b8 g     F .text	0000000c console_get_ticks
00001a38 g     F .text	00000010 os_mempool_module_init
00000144  w    F .text	00000002 TEMP_IRQHandler
00000144  w    F .text	00000002 QDEC_IRQHandler
00000144  w    F .text	00000002 TIMER3_IRQHandler
00001910 g     F .text	0000000a timer_handler
00003c94 g     F .text	0000007e swap_run
000025b4 g     F .text	00000004 semihosting_console_init
00001cb2 g     F .text	0000001a memcpy
00001308 g     F .text	00000080 hal_watchdog_init
00001888 g     F .text	0000000c os_cputime_init
000034d8 g     F .text	0000003a swap_set_image_ok
00005258 g     F .text	00000000 .hidden __aeabi_uldivmod
000045b4 g     F .text	00000062 hal_flash_isempty
00004640 g     F .text	00000034 puts
00000000 g       *ABS*	00000000 _imghdr_size
20004bf8 g     O .bss	00000004 console_is_midline
00001c1e g     F .text	00000014 os_mbuf_free
200000e4 g     O .data	00000004 SystemCoreClock
00000158 g     F .text	0000000c hal_system_init
00000144  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
00004eb4 g     F .text	00000026 flash_area_read
000017ac g     F .text	00000044 __assert_func
00000e4c g     F .text	00000018 nrf52_spi0_irq_handler
000024c0 g     F .text	00000040 console_pkg_init
0000013c  w    F .text	00000002 UsageFault_Handler
00000a3a g     F .text	0000001c spiflash_chip_erase
00000144  w    F .text	00000002 UARTE0_UART0_IRQHandler
000049a4 g     F .text	00000298 tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
20000160 g       .bss	00000000 __bss_start__
00000164 g     F .text	00000010 hal_debugger_connected
00004438 g     F .text	00000074 hal_flash_write
00000144  w    F .text	00000002 TIMER4_IRQHandler
00005288 g     F .text	000002cc .hidden __udivmoddi4
00002766 g     F .text	0000001e boot_status_entries
00002754 g     F .text	00000008 boot_status_sz
20004ae0 g     O .bss	00000004 g_current_task
0000191a g     F .text	0000000c os_arch_save_sr
00003932 g     F .text	00000034 boot_read_image_header
000028c4 g     F .text	00000020 boot_write_magic
000019e0 g     F .text	00000014 os_mempool_init
00000aec g     F .text	0000006c spiflash_identify
0000189e g     F .text	00000016 os_cputime_delay_ticks
00005d70 g       .text	00000000 __exidx_start
00003128 g     F .text	00000008 boot_erase_region
00003b48 g     F .text	0000014c swap_status_source
000051ca g     F .text	0000000a mfg_read_tlv_mmr_ref
00001b4c g     F .text	00000014 os_set_env
00000670 g     F .text	00000014 hal_bsp_flash_dev
000013f4 g     F .text	0000000c nrf52_periph_create
00004f26 g     F .text	0000000a flash_area_align
00002584 g     F .text	00000008 disable_buffer
00002500 g     F .text	00000048 console_printf
000024b6 g     F .text	00000008 console_blocking_mode
00000144  w    F .text	00000002 I2S_IRQHandler
000005da g     F .text	00000002 _init
000044ac g     F .text	000000d8 hal_flash_erase
000027ae g     F .text	00000006 boot_swap_info_off
00002954 g     F .text	00000022 boot_write_swap_size
00002384 g     F .text	00000114 pinetime_boot_display_image
00000144  w    F .text	00000002 SWI4_EGU4_IRQHandler
000030c0 g     F .text	00000068 boot_write_status
00000144  w    F .text	00000002 TIMER0_IRQHandler
00002978 g     F .text	000000d8 boot_swap_type_multi
000000d8 g     F .text	0000005c Reset_Handler
20004c11 g     O .bss	00000001 sysinit_active
00002894 g     F .text	00000030 boot_read_swap_size
000034ba g     F .text	0000001e swap_set_copy_done
00001d64 g     F .text	000000c0 pinetime_boot_init
00001c14 g     F .text	0000000a os_mbuf_pool_init
00001be2 g     F .text	0000001e os_default_irq_asm
00003436 g     F .text	00000084 swap_read_status
000051d4 g     F .text	00000024 mfg_init
00001c56 g     F .text	00000014 os_mutex_init
00000148 g     F .text	00000010 _sbrkInit
20000160 g       .bssnz	00000000 __bssnz_end__
00004f48 g     F .text	00000068 flash_map_init
00004c68 g     F .text	00000014 vprintf
00000144  w    F .text	00000002 TIMER1_IRQHandler
00001f50 g     F .text	00000088 blink_backlight
20000000 g       .bss	00000000 _ram_start
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00003968 g     F .text	000000c4 swap_read_status_bytes
00000d22 g     F .text	0000002c hal_gpio_init_in
00000144  w    F .text	00000002 PWM2_IRQHandler
20000160 g       .data	00000000 __data_end__
0000423e g     F .text	0000013e mbedtls_sha256_finish_ret
00000144  w    F .text	00000002 ECB_IRQHandler
20004ae4 g     O .bss	00000004 g_os_time
00001148 g     F .text	00000068 hal_spi_init
20006424 g       .bss	00000000 __bss_end__
00000144  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00000792 g     F .text	00000016 spiflash_device_ready
00001aec g     F .text	00000010 os_msys_reset
00000144 g     F .text	00000002 Default_Handler
000005cc g     F .text	0000000e _start
000028e4 g     F .text	0000000e boot_write_copy_done
00003a2c g     F .text	0000001a boot_status_internal_off
00001b60 g     F .text	00000006 os_arch_init_task_stack
000058c4 g     O .text	00000010 boot_img_magic
00000d4e g     F .text	00000038 hal_gpio_init_out
00000da8 g     F .text	00000034 hal_gpio_read
20000150 g     O .data	00000004 sysinit_panic_cb
000025e4 g     F .text	00000030 mem_init_mbuf_pool
00002e02 g     F .text	00000022 boot_status_is_reset
000017f0 g     F .text	00000098 os_default_irq
00000a04 g     F .text	0000000e spiflash_sector_erase
00004f30 g     F .text	0000000a flash_area_erased_val
00003384 g     F .text	000000b2 swap_status_init
00001c6a g     F .text	00000048 memcmp
00005554  w    F .text	00000002 .hidden __aeabi_ldiv0
000025cc g     F .text	0000000c sysinit_start
0000167c g     F .text	000000f8 hal_timer_config
00001e24 g     F .text	00000048 setup_watchdog
00003fcc g     F .text	00000012 flash_area_id_from_multi_image_slot
00002dee g     F .text	00000014 boot_status_reset
00003130 g     F .text	00000058 boot_copy_region
00001a48 g     F .text	0000004c os_msys_register
00004e04 g     F .text	00000034 flash_area_open
200000e8 g     O .data	00000040 spiflash_dev
00000144  w    F .text	00000002 SAADC_IRQHandler
00002874 g     F .text	00000020 boot_read_swap_state_by_id
00001ccc g     F .text	00000038 memset
00000000 g       .text	000000d8 __isr_vector
000005e2 g     F .text	0000008e main
000011f8 g     F .text	0000002c hal_spi_set_txrx_cb
0000258c g     F .text	00000028 console_out_nolock
0000070e g     F .text	0000005a spiflash_read_jedec_id
00000144  w    F .text	00000002 CCM_AAR_IRQHandler
00000144  w    F .text	00000002 WDT_IRQHandler
000025d8 g     F .text	0000000c sysinit_end
00004fb0 g     F .text	00000002 modlog_init
00001b66 g     F .text	00000046 SVC_Handler
000043e2 g     F .text	00000054 hal_flash_read
00001774 g     F .text	00000038 hal_timer_read
00004f00 g     F .text	00000026 flash_area_erase
20000160 g     O .bss	00000028 nrf52_hal_spi0
20004c08 g     O .bss	00000001 g_silence_console
00000144  w    F .text	00000002 SWI5_EGU5_IRQHandler
20006388 g     O .bss	00000004 flash_map_entries
00000000 g       .text	00000000 __text
00005194 g     F .text	00000012 mfg_seek_next
00004f3a g     F .text	0000000e flash_area_read_is_empty
00002498 g     F .text	0000001e console_write
00002784 g     F .text	0000002a boot_status_off
0000040c g     F .text	000001c0 SystemInit
00001894 g     F .text	0000000a os_cputime_get32
00000144  w    F .text	00000002 RNG_IRQHandler
000043d2 g     F .text	00000010 hal_flash_erased_val
00003d90 g     F .text	000000ba bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
00000144  w    F .text	00000002 RTC2_IRQHandler
000011b0 g     F .text	00000048 hal_spi_tx_val
00000878 g     F .text	00000020 spiflash_write_enable
20010000 g       .bss	00000000 __StackTop
00001f28 g     F .text	00000028 init_backlight
00002548 g     F .text	0000003c console_flush
00000144  w    F .text	00000002 PWM0_IRQHandler
00000144  w    F .text	00000002 SWI3_EGU3_IRQHandler
0000105c g     F .text	00000038 hal_spi_config
00004e38 g     F .text	0000007c flash_area_to_sectors
00005d28 g     O .text	00000048 sysflash_map_dflt
20000188 g     O .bss	0000001c nrf52_hal_timer0
000000d8 g       .text	00000000 __isr_vector_end
00000144  w    F .text	00000002 RTC1_IRQHandler
00002a50 g     F .text	00000092 boot_set_pending
00001094 g     F .text	0000004c hal_spi_enable
000018b4 g     F .text	00000008 os_cputime_delay_usecs
00000144  w    F .text	00000002 SWI1_EGU1_IRQHandler
000007f8 g     F .text	00000016 spiflash_wait_ready
00004620 g     F .text	0000001e fwrite
00000a2a g     F .text	00000010 spiflash_block_64k_erase
000051f8 g     F .text	00000010 mfg_open
20000140 g     O .data	00000008 g_os_run_list
00000690 g     F .text	00000034 NVIC_Relocate
00002614 g     F .text	0000001c sysinit_app
200001ac g     O .bss	00000004 os_flags
00001926 g     F .text	00000006 os_arch_restore_sr
2000fe50 g       *ABS*	000001b0 __StackLimit
000041b8 g     F .text	00000086 mbedtls_sha256_update_ret
00000144  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00000144  w    F .text	00000002 NFCT_IRQHandler
000003fc g     F .text	00000010 SystemCoreClockUpdate
00001c32 g     F .text	00000024 os_mbuf_free_chain
00001afc g     F .text	00000034 os_msys_init
00001b30 g     F .text	0000000c os_time_get
00001224 g     F .text	000000ac hal_spi_txrx
00005554  w    F .text	00000002 .hidden __aeabi_idiv0
00003e4a g     F .text	000000ca bootutil_tlv_iter_begin
00000b96 g     F .text	00000006 _exit
000001a0 g     F .text	0000004c hal_system_clock_start
0000013a  w    F .text	00000002 BusFault_Handler
00001d04 g     F .text	00000010 strlen
00000768 g     F .text	0000002a spiflash_read_status
000019f4 g     F .text	0000001e os_memblock_put_from_cb
00001956 g     F .text	00000010 os_eventq_init
00001b3c g     F .text	00000010 os_time_advance
0000439a g     F .text	00000028 hal_flash_init
00000144  w    F .text	00000002 MWU_IRQHandler
00000138  w    F .text	00000002 MemoryManagement_Handler
00000144  w    F .text	00000002 COMP_LPCOMP_IRQHandler
000018e4 g     F .text	0000002c os_dev_initialize_all
00001e6c g     F .text	00000044 boot_custom_start
00000684 g     F .text	0000000c hal_bsp_init
0000192c g     F .text	0000002a os_pkg_init
000010e0 g     F .text	00000068 hal_spi_disable
000005dc g     F .text	00000006 flash_device_base
00000a1a g     F .text	00000010 spiflash_block_32k_erase
00004c3c g     F .text	00000008 vfprintf
0000275c g     F .text	0000000a boot_trailer_sz
00003f14 g     F .text	000000b8 bootutil_tlv_iter_next
000028f2 g     F .text	0000000e boot_write_image_ok
00003fec g     F .text	000000a4 mbedtls_sha256_starts_ret



Disassembly of section .text:

00000000 <__isr_vector>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
       0:	20010000 	.word	0x20010000
       4:	000000d9 	.word	0x000000d9
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
       8:	00000135 	.word	0x00000135
       c:	00000137 	.word	0x00000137
	...
    if (nticks == OS_TIMEOUT_NEVER) {
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
      2c:	00001b67 	.word	0x00001b67
	...
      38:	00001bad 	.word	0x00001bad
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
      3c:	00001bd7 	.word	0x00001bd7
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
      40:	00000145 	.word	0x00000145
      44:	00000145 	.word	0x00000145
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
      48:	00000145 	.word	0x00000145
      4c:	00000145 	.word	0x00000145
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      50:	00000145 	.word	0x00000145
      54:	00000145 	.word	0x00000145
      58:	00000145 	.word	0x00000145
      5c:	00000145 	.word	0x00000145
      60:	00000145 	.word	0x00000145
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
                break;
            }
        }
        if (entry) {
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
      64:	00000145 	.word	0x00000145
      68:	00000145 	.word	0x00000145
      6c:	00000145 	.word	0x00000145
      70:	00000145 	.word	0x00000145
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
      74:	00000145 	.word	0x00000145
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      78:	00000145 	.word	0x00000145
      7c:	00000145 	.word	0x00000145
      80:	00000145 	.word	0x00000145
      84:	00000145 	.word	0x00000145
      88:	00000145 	.word	0x00000145
      8c:	00000145 	.word	0x00000145
      90:	00000145 	.word	0x00000145
      94:	00000145 	.word	0x00000145
      98:	00000145 	.word	0x00000145
      9c:	00000145 	.word	0x00000145
      a0:	00000145 	.word	0x00000145
      a4:	00000145 	.word	0x00000145
      a8:	00000145 	.word	0x00000145
      ac:	00000145 	.word	0x00000145
      b0:	00000145 	.word	0x00000145
      b4:	00000145 	.word	0x00000145
	...
      c0:	00000145 	.word	0x00000145
      c4:	00000145 	.word	0x00000145
      c8:	00000145 	.word	0x00000145
      cc:	00000145 	.word	0x00000145
      d0:	00000145 	.word	0x00000145
      d4:	00000145 	.word	0x00000145

000000d8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
      d8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
      dc:	4a0c      	ldr	r2, [pc, #48]	; (110 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
      de:	4b0d      	ldr	r3, [pc, #52]	; (114 <.bss_zero_loop+0x34>)

000000e0 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
      e0:	429a      	cmp	r2, r3
    itt     lt
      e2:	bfbc      	itt	lt
    strlt   r0, [r2], #4
      e4:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
      e8:	e7fa      	blt.n	e0 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
      ea:	490b      	ldr	r1, [pc, #44]	; (118 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
      ec:	4a0b      	ldr	r2, [pc, #44]	; (11c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
      ee:	4b0c      	ldr	r3, [pc, #48]	; (120 <.bss_zero_loop+0x40>)

    subs    r3, r2
      f0:	1a9b      	subs	r3, r3, r2
    ble     .LC0
      f2:	dd03      	ble.n	fc <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
      f4:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
      f6:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
      f8:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
      fa:	dcfb      	bgt.n	f4 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
      fc:	4809      	ldr	r0, [pc, #36]	; (124 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
      fe:	490a      	ldr	r1, [pc, #40]	; (128 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
     100:	f000 f822 	bl	148 <_sbrkInit>

    LDR     R0, =SystemInit
     104:	4809      	ldr	r0, [pc, #36]	; (12c <.bss_zero_loop+0x4c>)
    BLX     R0
     106:	4780      	blx	r0

    BL      hal_system_init
     108:	f000 f826 	bl	158 <hal_system_init>

    LDR     R0, =_start
     10c:	4808      	ldr	r0, [pc, #32]	; (130 <.bss_zero_loop+0x50>)
    BX      R0
     10e:	4700      	bx	r0
    ldr     r2, =__bss_start__
     110:	20000160 	.word	0x20000160
    ldr     r3, =__bss_end__
     114:	20006424 	.word	0x20006424
    ldr    r1, =__etext
     118:	00005d88 	.word	0x00005d88
    ldr    r2, =__data_start__
     11c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
     120:	20000160 	.word	0x20000160
    LDR     R0, =__HeapBase
     124:	20006428 	.word	0x20006428
    LDR     R1, =__HeapLimit
     128:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
     12c:	0000040d 	.word	0x0000040d
    LDR     R0, =_start
     130:	000005cd 	.word	0x000005cd

00000134 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
     134:	e7fe      	b.n	134 <NMI_Handler>

00000136 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
     136:	e7fe      	b.n	136 <HardFault_Handler>

00000138 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
     138:	e7fe      	b.n	138 <MemoryManagement_Handler>

0000013a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
     13a:	e7fe      	b.n	13a <BusFault_Handler>

0000013c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
     13c:	e7fe      	b.n	13c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
     13e:	e7fe      	b.n	13e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
     140:	e7fe      	b.n	140 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
     142:	e7fe      	b.n	142 <UsageFault_Handler+0x6>

00000144 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
     144:	e7fe      	b.n	144 <Default_Handler>
     146:	bf00      	nop

00000148 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
     148:	4b02      	ldr	r3, [pc, #8]	; (154 <_sbrkInit+0xc>)
     14a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
     14c:	6059      	str	r1, [r3, #4]
    brk = base;
     14e:	6098      	str	r0, [r3, #8]
}
     150:	4770      	bx	lr
     152:	bf00      	nop
     154:	200000d8 	.word	0x200000d8

00000158 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
     158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     15c:	2201      	movs	r2, #1
     15e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
     162:	4770      	bx	lr

00000164 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     164:	4b02      	ldr	r3, [pc, #8]	; (170 <hal_debugger_connected+0xc>)
     166:	6818      	ldr	r0, [r3, #0]
}
     168:	f000 0001 	and.w	r0, r0, #1
     16c:	4770      	bx	lr
     16e:	bf00      	nop
     170:	e000edf0 	.word	0xe000edf0

00000174 <hal_system_reset>:
{
     174:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
     176:	f7ff fff5 	bl	164 <hal_debugger_connected>
     17a:	b100      	cbz	r0, 17e <hal_system_reset+0xa>

static inline void
hal_debug_break(void)
{
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
    __BKPT(1);
     17c:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     17e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     182:	4905      	ldr	r1, [pc, #20]	; (198 <hal_system_reset+0x24>)
     184:	68ca      	ldr	r2, [r1, #12]
     186:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     18a:	4b04      	ldr	r3, [pc, #16]	; (19c <hal_system_reset+0x28>)
     18c:	4313      	orrs	r3, r2
     18e:	60cb      	str	r3, [r1, #12]
     190:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     194:	bf00      	nop
     196:	e7fd      	b.n	194 <hal_system_reset+0x20>
     198:	e000ed00 	.word	0xe000ed00
     19c:	05fa0004 	.word	0x05fa0004

000001a0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
     1a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1a4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1a8:	4b0f      	ldr	r3, [pc, #60]	; (1e8 <Stack_Size+0x38>)
     1aa:	4013      	ands	r3, r2
     1ac:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     1b0:	d018      	beq.n	1e4 <Stack_Size+0x34>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     1b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1b6:	2201      	movs	r2, #1
     1b8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1ba:	2100      	movs	r1, #0
     1bc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
     1c0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
     1c4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
     1c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
     1ce:	2b00      	cmp	r3, #0
     1d0:	d0f9      	beq.n	1c6 <Stack_Size+0x16>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
     1d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1d6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1da:	4b03      	ldr	r3, [pc, #12]	; (1e8 <Stack_Size+0x38>)
     1dc:	4013      	ands	r3, r2
     1de:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     1e2:	d1f0      	bne.n	1c6 <Stack_Size+0x16>
                }
            }
        }
    }
#endif
}
     1e4:	4770      	bx	lr
     1e6:	bf00      	nop
     1e8:	00010003 	.word	0x00010003

000001ec <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1ec:	4b0b      	ldr	r3, [pc, #44]	; (21c <errata_16+0x30>)
     1ee:	781b      	ldrb	r3, [r3, #0]
     1f0:	2b06      	cmp	r3, #6
     1f2:	d001      	beq.n	1f8 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     1f4:	2000      	movs	r0, #0
     1f6:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1f8:	4b09      	ldr	r3, [pc, #36]	; (220 <errata_16+0x34>)
     1fa:	681b      	ldr	r3, [r3, #0]
     1fc:	f013 0f0f 	tst.w	r3, #15
     200:	d107      	bne.n	212 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     202:	4b08      	ldr	r3, [pc, #32]	; (224 <errata_16+0x38>)
     204:	681b      	ldr	r3, [r3, #0]
     206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     20a:	2b30      	cmp	r3, #48	; 0x30
     20c:	d003      	beq.n	216 <errata_16+0x2a>
    return false;
     20e:	2000      	movs	r0, #0
     210:	4770      	bx	lr
     212:	2000      	movs	r0, #0
     214:	4770      	bx	lr
            return true;
     216:	2001      	movs	r0, #1
}
     218:	4770      	bx	lr
     21a:	bf00      	nop
     21c:	f0000fe0 	.word	0xf0000fe0
     220:	f0000fe4 	.word	0xf0000fe4
     224:	f0000fe8 	.word	0xf0000fe8

00000228 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     228:	4b0f      	ldr	r3, [pc, #60]	; (268 <errata_31+0x40>)
     22a:	781b      	ldrb	r3, [r3, #0]
     22c:	2b06      	cmp	r3, #6
     22e:	d001      	beq.n	234 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     230:	2000      	movs	r0, #0
     232:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     234:	4b0d      	ldr	r3, [pc, #52]	; (26c <errata_31+0x44>)
     236:	681b      	ldr	r3, [r3, #0]
     238:	f013 0f0f 	tst.w	r3, #15
     23c:	d10b      	bne.n	256 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     23e:	4b0c      	ldr	r3, [pc, #48]	; (270 <errata_31+0x48>)
     240:	681b      	ldr	r3, [r3, #0]
     242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     246:	2b30      	cmp	r3, #48	; 0x30
     248:	d007      	beq.n	25a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     24a:	2b40      	cmp	r3, #64	; 0x40
     24c:	d007      	beq.n	25e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     24e:	2b50      	cmp	r3, #80	; 0x50
     250:	d007      	beq.n	262 <errata_31+0x3a>
    return false;
     252:	2000      	movs	r0, #0
     254:	4770      	bx	lr
     256:	2000      	movs	r0, #0
     258:	4770      	bx	lr
            return true;
     25a:	2001      	movs	r0, #1
     25c:	4770      	bx	lr
            return true;
     25e:	2001      	movs	r0, #1
     260:	4770      	bx	lr
            return true;
     262:	2001      	movs	r0, #1
}
     264:	4770      	bx	lr
     266:	bf00      	nop
     268:	f0000fe0 	.word	0xf0000fe0
     26c:	f0000fe4 	.word	0xf0000fe4
     270:	f0000fe8 	.word	0xf0000fe8

00000274 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     274:	4b0b      	ldr	r3, [pc, #44]	; (2a4 <errata_32+0x30>)
     276:	781b      	ldrb	r3, [r3, #0]
     278:	2b06      	cmp	r3, #6
     27a:	d001      	beq.n	280 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     27c:	2000      	movs	r0, #0
     27e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     280:	4b09      	ldr	r3, [pc, #36]	; (2a8 <errata_32+0x34>)
     282:	681b      	ldr	r3, [r3, #0]
     284:	f013 0f0f 	tst.w	r3, #15
     288:	d107      	bne.n	29a <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     28a:	4b08      	ldr	r3, [pc, #32]	; (2ac <errata_32+0x38>)
     28c:	681b      	ldr	r3, [r3, #0]
     28e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     292:	2b30      	cmp	r3, #48	; 0x30
     294:	d003      	beq.n	29e <errata_32+0x2a>
    return false;
     296:	2000      	movs	r0, #0
     298:	4770      	bx	lr
     29a:	2000      	movs	r0, #0
     29c:	4770      	bx	lr
            return true;
     29e:	2001      	movs	r0, #1
}
     2a0:	4770      	bx	lr
     2a2:	bf00      	nop
     2a4:	f0000fe0 	.word	0xf0000fe0
     2a8:	f0000fe4 	.word	0xf0000fe4
     2ac:	f0000fe8 	.word	0xf0000fe8

000002b0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2b0:	4b0f      	ldr	r3, [pc, #60]	; (2f0 <errata_36+0x40>)
     2b2:	781b      	ldrb	r3, [r3, #0]
     2b4:	2b06      	cmp	r3, #6
     2b6:	d001      	beq.n	2bc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     2b8:	2000      	movs	r0, #0
     2ba:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2bc:	4b0d      	ldr	r3, [pc, #52]	; (2f4 <errata_36+0x44>)
     2be:	681b      	ldr	r3, [r3, #0]
     2c0:	f013 0f0f 	tst.w	r3, #15
     2c4:	d10b      	bne.n	2de <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     2c6:	4b0c      	ldr	r3, [pc, #48]	; (2f8 <errata_36+0x48>)
     2c8:	681b      	ldr	r3, [r3, #0]
     2ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     2ce:	2b30      	cmp	r3, #48	; 0x30
     2d0:	d007      	beq.n	2e2 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     2d2:	2b40      	cmp	r3, #64	; 0x40
     2d4:	d007      	beq.n	2e6 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     2d6:	2b50      	cmp	r3, #80	; 0x50
     2d8:	d007      	beq.n	2ea <errata_36+0x3a>
    return false;
     2da:	2000      	movs	r0, #0
     2dc:	4770      	bx	lr
     2de:	2000      	movs	r0, #0
     2e0:	4770      	bx	lr
            return true;
     2e2:	2001      	movs	r0, #1
     2e4:	4770      	bx	lr
            return true;
     2e6:	2001      	movs	r0, #1
     2e8:	4770      	bx	lr
            return true;
     2ea:	2001      	movs	r0, #1
}
     2ec:	4770      	bx	lr
     2ee:	bf00      	nop
     2f0:	f0000fe0 	.word	0xf0000fe0
     2f4:	f0000fe4 	.word	0xf0000fe4
     2f8:	f0000fe8 	.word	0xf0000fe8

000002fc <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2fc:	4b0b      	ldr	r3, [pc, #44]	; (32c <errata_37+0x30>)
     2fe:	781b      	ldrb	r3, [r3, #0]
     300:	2b06      	cmp	r3, #6
     302:	d001      	beq.n	308 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     304:	2000      	movs	r0, #0
     306:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     308:	4b09      	ldr	r3, [pc, #36]	; (330 <errata_37+0x34>)
     30a:	681b      	ldr	r3, [r3, #0]
     30c:	f013 0f0f 	tst.w	r3, #15
     310:	d107      	bne.n	322 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     312:	4b08      	ldr	r3, [pc, #32]	; (334 <errata_37+0x38>)
     314:	681b      	ldr	r3, [r3, #0]
     316:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     31a:	2b30      	cmp	r3, #48	; 0x30
     31c:	d003      	beq.n	326 <errata_37+0x2a>
    return false;
     31e:	2000      	movs	r0, #0
     320:	4770      	bx	lr
     322:	2000      	movs	r0, #0
     324:	4770      	bx	lr
            return true;
     326:	2001      	movs	r0, #1
}
     328:	4770      	bx	lr
     32a:	bf00      	nop
     32c:	f0000fe0 	.word	0xf0000fe0
     330:	f0000fe4 	.word	0xf0000fe4
     334:	f0000fe8 	.word	0xf0000fe8

00000338 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     338:	4b0b      	ldr	r3, [pc, #44]	; (368 <errata_57+0x30>)
     33a:	781b      	ldrb	r3, [r3, #0]
     33c:	2b06      	cmp	r3, #6
     33e:	d001      	beq.n	344 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     340:	2000      	movs	r0, #0
     342:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     344:	4b09      	ldr	r3, [pc, #36]	; (36c <errata_57+0x34>)
     346:	681b      	ldr	r3, [r3, #0]
     348:	f013 0f0f 	tst.w	r3, #15
     34c:	d107      	bne.n	35e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     34e:	4b08      	ldr	r3, [pc, #32]	; (370 <errata_57+0x38>)
     350:	681b      	ldr	r3, [r3, #0]
     352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     356:	2b30      	cmp	r3, #48	; 0x30
     358:	d003      	beq.n	362 <errata_57+0x2a>
    return false;
     35a:	2000      	movs	r0, #0
     35c:	4770      	bx	lr
     35e:	2000      	movs	r0, #0
     360:	4770      	bx	lr
            return true;
     362:	2001      	movs	r0, #1
}
     364:	4770      	bx	lr
     366:	bf00      	nop
     368:	f0000fe0 	.word	0xf0000fe0
     36c:	f0000fe4 	.word	0xf0000fe4
     370:	f0000fe8 	.word	0xf0000fe8

00000374 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     374:	4b0b      	ldr	r3, [pc, #44]	; (3a4 <errata_66+0x30>)
     376:	781b      	ldrb	r3, [r3, #0]
     378:	2b06      	cmp	r3, #6
     37a:	d001      	beq.n	380 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     37c:	2000      	movs	r0, #0
     37e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     380:	4b09      	ldr	r3, [pc, #36]	; (3a8 <errata_66+0x34>)
     382:	681b      	ldr	r3, [r3, #0]
     384:	f013 0f0f 	tst.w	r3, #15
     388:	d107      	bne.n	39a <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     38a:	4b08      	ldr	r3, [pc, #32]	; (3ac <errata_66+0x38>)
     38c:	681b      	ldr	r3, [r3, #0]
     38e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     392:	2b50      	cmp	r3, #80	; 0x50
     394:	d003      	beq.n	39e <errata_66+0x2a>
    return false;
     396:	2000      	movs	r0, #0
     398:	4770      	bx	lr
     39a:	2000      	movs	r0, #0
     39c:	4770      	bx	lr
            return true;
     39e:	2001      	movs	r0, #1
}
     3a0:	4770      	bx	lr
     3a2:	bf00      	nop
     3a4:	f0000fe0 	.word	0xf0000fe0
     3a8:	f0000fe4 	.word	0xf0000fe4
     3ac:	f0000fe8 	.word	0xf0000fe8

000003b0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     3b0:	4b0f      	ldr	r3, [pc, #60]	; (3f0 <errata_108+0x40>)
     3b2:	781b      	ldrb	r3, [r3, #0]
     3b4:	2b06      	cmp	r3, #6
     3b6:	d001      	beq.n	3bc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     3b8:	2000      	movs	r0, #0
     3ba:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     3bc:	4b0d      	ldr	r3, [pc, #52]	; (3f4 <errata_108+0x44>)
     3be:	681b      	ldr	r3, [r3, #0]
     3c0:	f013 0f0f 	tst.w	r3, #15
     3c4:	d10b      	bne.n	3de <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     3c6:	4b0c      	ldr	r3, [pc, #48]	; (3f8 <errata_108+0x48>)
     3c8:	681b      	ldr	r3, [r3, #0]
     3ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     3ce:	2b30      	cmp	r3, #48	; 0x30
     3d0:	d007      	beq.n	3e2 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     3d2:	2b40      	cmp	r3, #64	; 0x40
     3d4:	d007      	beq.n	3e6 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     3d6:	2b50      	cmp	r3, #80	; 0x50
     3d8:	d007      	beq.n	3ea <errata_108+0x3a>
    return false;
     3da:	2000      	movs	r0, #0
     3dc:	4770      	bx	lr
     3de:	2000      	movs	r0, #0
     3e0:	4770      	bx	lr
            return true;
     3e2:	2001      	movs	r0, #1
     3e4:	4770      	bx	lr
            return true;
     3e6:	2001      	movs	r0, #1
     3e8:	4770      	bx	lr
            return true;
     3ea:	2001      	movs	r0, #1
}
     3ec:	4770      	bx	lr
     3ee:	bf00      	nop
     3f0:	f0000fe0 	.word	0xf0000fe0
     3f4:	f0000fe4 	.word	0xf0000fe4
     3f8:	f0000fe8 	.word	0xf0000fe8

000003fc <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     3fc:	4b01      	ldr	r3, [pc, #4]	; (404 <SystemCoreClockUpdate+0x8>)
     3fe:	4a02      	ldr	r2, [pc, #8]	; (408 <SystemCoreClockUpdate+0xc>)
     400:	601a      	str	r2, [r3, #0]
}
     402:	4770      	bx	lr
     404:	200000e4 	.word	0x200000e4
     408:	03d09000 	.word	0x03d09000

0000040c <SystemInit>:
{
     40c:	b508      	push	{r3, lr}
    if (errata_16()){
     40e:	f7ff feed 	bl	1ec <errata_16>
     412:	b110      	cbz	r0, 41a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     414:	4b60      	ldr	r3, [pc, #384]	; (598 <SystemInit+0x18c>)
     416:	4a61      	ldr	r2, [pc, #388]	; (59c <SystemInit+0x190>)
     418:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     41a:	f7ff ff05 	bl	228 <errata_31>
     41e:	b128      	cbz	r0, 42c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     420:	4b5f      	ldr	r3, [pc, #380]	; (5a0 <SystemInit+0x194>)
     422:	681b      	ldr	r3, [r3, #0]
     424:	f3c3 3342 	ubfx	r3, r3, #13, #3
     428:	4a5e      	ldr	r2, [pc, #376]	; (5a4 <SystemInit+0x198>)
     42a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     42c:	f7ff ff22 	bl	274 <errata_32>
     430:	b120      	cbz	r0, 43c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     432:	4a5d      	ldr	r2, [pc, #372]	; (5a8 <SystemInit+0x19c>)
     434:	68d3      	ldr	r3, [r2, #12]
     436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     43a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     43c:	f7ff ff38 	bl	2b0 <errata_36>
     440:	b140      	cbz	r0, 454 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
     442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     446:	2200      	movs	r2, #0
     448:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     44c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     450:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     454:	f7ff ff52 	bl	2fc <errata_37>
     458:	b110      	cbz	r0, 460 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     45a:	4b54      	ldr	r3, [pc, #336]	; (5ac <SystemInit+0x1a0>)
     45c:	2203      	movs	r2, #3
     45e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     460:	f7ff ff6a 	bl	338 <errata_57>
     464:	b158      	cbz	r0, 47e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     466:	4b52      	ldr	r3, [pc, #328]	; (5b0 <SystemInit+0x1a4>)
     468:	2205      	movs	r2, #5
     46a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     46c:	3378      	adds	r3, #120	; 0x78
     46e:	2201      	movs	r2, #1
     470:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     472:	3b70      	subs	r3, #112	; 0x70
     474:	2200      	movs	r2, #0
     476:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     478:	3b04      	subs	r3, #4
     47a:	223f      	movs	r2, #63	; 0x3f
     47c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
     47e:	f7ff ff79 	bl	374 <errata_66>
     482:	2800      	cmp	r0, #0
     484:	d046      	beq.n	514 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     48a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     48e:	4b49      	ldr	r3, [pc, #292]	; (5b4 <SystemInit+0x1a8>)
     490:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     494:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     498:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     49c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     4a0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     4a4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     4a8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     4ac:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     4b0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     4b4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     4b8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     4bc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     4c0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     4c4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     4c8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     4cc:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     4d0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     4d4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     4d8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     4dc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     4e0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     4e4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     4e8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     4ec:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     4f0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     4f4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     4f8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     4fc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     500:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     504:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     508:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     50c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     510:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     514:	f7ff ff4c 	bl	3b0 <errata_108>
     518:	b128      	cbz	r0, 526 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     51a:	4b27      	ldr	r3, [pc, #156]	; (5b8 <SystemInit+0x1ac>)
     51c:	681b      	ldr	r3, [r3, #0]
     51e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     522:	4a26      	ldr	r2, [pc, #152]	; (5bc <SystemInit+0x1b0>)
     524:	6013      	str	r3, [r2, #0]
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
     526:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     52a:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
     52e:	f013 0f01 	tst.w	r3, #1
     532:	d104      	bne.n	53e <SystemInit+0x132>
    SystemCoreClockUpdate();
     534:	f7ff ff62 	bl	3fc <SystemCoreClockUpdate>
    NVIC_Relocate();
     538:	f000 f8aa 	bl	690 <NVIC_Relocate>
}
     53c:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     53e:	4b20      	ldr	r3, [pc, #128]	; (5c0 <SystemInit+0x1b4>)
     540:	2201      	movs	r2, #1
     542:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     546:	4b1e      	ldr	r3, [pc, #120]	; (5c0 <SystemInit+0x1b4>)
     548:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     54c:	2b00      	cmp	r3, #0
     54e:	d0fa      	beq.n	546 <SystemInit+0x13a>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
     550:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     554:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
     558:	f023 0301 	bic.w	r3, r3, #1
     55c:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     560:	4b17      	ldr	r3, [pc, #92]	; (5c0 <SystemInit+0x1b4>)
     562:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     566:	2b00      	cmp	r3, #0
     568:	d0fa      	beq.n	560 <SystemInit+0x154>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     56a:	4b15      	ldr	r3, [pc, #84]	; (5c0 <SystemInit+0x1b4>)
     56c:	2200      	movs	r2, #0
     56e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     572:	4b13      	ldr	r3, [pc, #76]	; (5c0 <SystemInit+0x1b4>)
     574:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     578:	2b00      	cmp	r3, #0
     57a:	d0fa      	beq.n	572 <SystemInit+0x166>
     57c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     580:	4910      	ldr	r1, [pc, #64]	; (5c4 <SystemInit+0x1b8>)
     582:	68ca      	ldr	r2, [r1, #12]
     584:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     588:	4b0f      	ldr	r3, [pc, #60]	; (5c8 <SystemInit+0x1bc>)
     58a:	4313      	orrs	r3, r2
     58c:	60cb      	str	r3, [r1, #12]
     58e:	f3bf 8f4f 	dsb	sy
    __NOP();
     592:	bf00      	nop
     594:	e7fd      	b.n	592 <SystemInit+0x186>
     596:	bf00      	nop
     598:	4007c074 	.word	0x4007c074
     59c:	baadf00d 	.word	0xbaadf00d
     5a0:	10000244 	.word	0x10000244
     5a4:	4000053c 	.word	0x4000053c
     5a8:	e000edf0 	.word	0xe000edf0
     5ac:	400005a0 	.word	0x400005a0
     5b0:	40005610 	.word	0x40005610
     5b4:	4000c000 	.word	0x4000c000
     5b8:	10000258 	.word	0x10000258
     5bc:	40000ee4 	.word	0x40000ee4
     5c0:	4001e000 	.word	0x4001e000
     5c4:	e000ed00 	.word	0xe000ed00
     5c8:	05fa0004 	.word	0x05fa0004

000005cc <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
     5cc:	b508      	push	{r3, lr}
#if !MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    rc = main(0, NULL);
     5ce:	2100      	movs	r1, #0
     5d0:	4608      	mov	r0, r1
     5d2:	f000 f806 	bl	5e2 <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
     5d6:	f000 fade 	bl	b96 <_exit>

000005da <_init>:
}

void
_init(void)
{
}
     5da:	4770      	bx	lr

000005dc <flash_device_base>:
 * TODO: remove this when mynewt needs to support flash_device_base()
 * for devices with nonzero base addresses.
 */
int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    *ret = 0;
     5dc:	2000      	movs	r0, #0
     5de:	6008      	str	r0, [r1, #0]
    return 0;
}
     5e0:	4770      	bx	lr

000005e2 <main>:

int
main(void)
{
     5e2:	b500      	push	{lr}
     5e4:	b085      	sub	sp, #20
    struct boot_rsp rsp;
    uintptr_t flash_base;
    int rc;

    hal_bsp_init();
     5e6:	f000 f84d 	bl	684 <hal_bsp_init>

#if !MYNEWT_VAL(OS_SCHEDULING) && MYNEWT_VAL(WATCHDOG_INTERVAL)
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
     5ea:	f247 5030 	movw	r0, #30000	; 0x7530
     5ee:	f000 fe8b 	bl	1308 <hal_watchdog_init>
    assert(rc == 0);
     5f2:	b9f8      	cbnz	r0, 634 <main+0x52>
#endif

#if defined(MCUBOOT_SERIAL) || defined(MCUBOOT_HAVE_LOGGING) || \
        MYNEWT_VAL(CRYPTO) || MYNEWT_VAL(HASH)
    /* initialize uart/crypto without os */
    os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
     5f4:	2001      	movs	r0, #1
     5f6:	f001 f975 	bl	18e4 <os_dev_initialize_all>
    os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
     5fa:	2002      	movs	r0, #2
     5fc:	f001 f972 	bl	18e4 <os_dev_initialize_all>
    sysinit();
     600:	f001 ffe4 	bl	25cc <sysinit_start>
     604:	f002 f806 	bl	2614 <sysinit_app>
     608:	f001 ffe6 	bl	25d8 <sysinit_end>
    console_blocking_mode();
     60c:	f001 ff53 	bl	24b6 <console_blocking_mode>
#endif
#else
    flash_map_init();
#endif

    rc = boot_go(&rsp);
     610:	a801      	add	r0, sp, #4
     612:	f002 fe69 	bl	32e8 <boot_go>
    assert(rc == 0);
     616:	b9b8      	cbnz	r0, 648 <main+0x66>

    rc = flash_device_base(rsp.br_flash_dev_id, &flash_base);
     618:	4669      	mov	r1, sp
     61a:	f89d 0008 	ldrb.w	r0, [sp, #8]
     61e:	f7ff ffdd 	bl	5dc <flash_device_base>
    assert(rc == 0);
     622:	b9d8      	cbnz	r0, 65c <main+0x7a>

#if MYNEWT_VAL(BOOT_CUSTOM_START)
    boot_custom_start(flash_base, &rsp);
     624:	a901      	add	r1, sp, #4
     626:	9800      	ldr	r0, [sp, #0]
     628:	f001 fc20 	bl	1e6c <boot_custom_start>
    hal_system_start((void *)(flash_base + rsp.br_image_off +
                              rsp.br_hdr->ih_hdr_size));
#endif

    return 0;
}
     62c:	2000      	movs	r0, #0
     62e:	b005      	add	sp, #20
     630:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
     634:	f7ff fd96 	bl	164 <hal_debugger_connected>
     638:	b100      	cbz	r0, 63c <main+0x5a>
     63a:	be01      	bkpt	0x0001
     63c:	2300      	movs	r3, #0
     63e:	461a      	mov	r2, r3
     640:	4619      	mov	r1, r3
     642:	4618      	mov	r0, r3
     644:	f001 f8b2 	bl	17ac <__assert_func>
    assert(rc == 0);
     648:	f7ff fd8c 	bl	164 <hal_debugger_connected>
     64c:	b100      	cbz	r0, 650 <main+0x6e>
     64e:	be01      	bkpt	0x0001
     650:	2300      	movs	r3, #0
     652:	461a      	mov	r2, r3
     654:	4619      	mov	r1, r3
     656:	4618      	mov	r0, r3
     658:	f001 f8a8 	bl	17ac <__assert_func>
    assert(rc == 0);
     65c:	f7ff fd82 	bl	164 <hal_debugger_connected>
     660:	b100      	cbz	r0, 664 <main+0x82>
     662:	be01      	bkpt	0x0001
     664:	2300      	movs	r3, #0
     666:	461a      	mov	r2, r3
     668:	4619      	mov	r1, r3
     66a:	4618      	mov	r0, r3
     66c:	f001 f89e 	bl	17ac <__assert_func>

00000670 <hal_bsp_flash_dev>:

/// Return the Flash Device for the ID. 0 for Internal Flash ROM, 1 for External SPI Flash
const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id >= ARRAY_SIZE(flash_devs)) {
     670:	2801      	cmp	r0, #1
     672:	d803      	bhi.n	67c <hal_bsp_flash_dev+0xc>
        return NULL;
    }
    return flash_devs[id];
     674:	4b02      	ldr	r3, [pc, #8]	; (680 <hal_bsp_flash_dev+0x10>)
     676:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
     67a:	4770      	bx	lr
        return NULL;
     67c:	2000      	movs	r0, #0
}
     67e:	4770      	bx	lr
     680:	00005558 	.word	0x00005558

00000684 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
     684:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
     686:	f7ff fd8b 	bl	1a0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
     68a:	f000 feb3 	bl	13f4 <nrf52_periph_create>
}
     68e:	bd08      	pop	{r3, pc}

00000690 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
     690:	4a09      	ldr	r2, [pc, #36]	; (6b8 <NVIC_Relocate+0x28>)
     692:	4b0a      	ldr	r3, [pc, #40]	; (6bc <NVIC_Relocate+0x2c>)
     694:	429a      	cmp	r2, r3
     696:	d00a      	beq.n	6ae <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     698:	2300      	movs	r3, #0
     69a:	e006      	b.n	6aa <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
     69c:	4a07      	ldr	r2, [pc, #28]	; (6bc <NVIC_Relocate+0x2c>)
     69e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
     6a2:	4a05      	ldr	r2, [pc, #20]	; (6b8 <NVIC_Relocate+0x28>)
     6a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     6a8:	3301      	adds	r3, #1
     6aa:	2b35      	cmp	r3, #53	; 0x35
     6ac:	ddf6      	ble.n	69c <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
     6ae:	4a02      	ldr	r2, [pc, #8]	; (6b8 <NVIC_Relocate+0x28>)
     6b0:	4b03      	ldr	r3, [pc, #12]	; (6c0 <NVIC_Relocate+0x30>)
     6b2:	609a      	str	r2, [r3, #8]
#endif
}
     6b4:	4770      	bx	lr
     6b6:	bf00      	nop
     6b8:	20000000 	.word	0x20000000
     6bc:	00000000 	.word	0x00000000
     6c0:	e000ed00 	.word	0xe000ed00

000006c4 <hal_spiflash_sector_info>:
}

static int
hal_spiflash_sector_info(const struct hal_flash *hal_flash_dev, int idx,
        uint32_t *address, uint32_t *sz)
{
     6c4:	b410      	push	{r4}
    const struct spiflash_dev *dev = (const struct spiflash_dev *)hal_flash_dev;

    *address = idx * dev->sector_size;
     6c6:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
     6c8:	fb01 f104 	mul.w	r1, r1, r4
     6cc:	6011      	str	r1, [r2, #0]
    *sz = dev->sector_size;
     6ce:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     6d0:	601a      	str	r2, [r3, #0]
    return 0;
}
     6d2:	2000      	movs	r0, #0
     6d4:	bc10      	pop	{r4}
     6d6:	4770      	bx	lr

000006d8 <spiflash_release_power_down_generic>:
{
     6d8:	b530      	push	{r4, r5, lr}
     6da:	b083      	sub	sp, #12
     6dc:	4605      	mov	r5, r0
    uint8_t cmd[1] = { SPIFLASH_RELEASE_POWER_DOWN };
     6de:	ac02      	add	r4, sp, #8
     6e0:	23ab      	movs	r3, #171	; 0xab
     6e2:	f804 3d04 	strb.w	r3, [r4, #-4]!
    hal_gpio_write(dev->ss_pin, 0);
     6e6:	2100      	movs	r1, #0
     6e8:	6a80      	ldr	r0, [r0, #40]	; 0x28
     6ea:	f000 fb4c 	bl	d86 <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     6ee:	2301      	movs	r3, #1
     6f0:	4622      	mov	r2, r4
     6f2:	4621      	mov	r1, r4
     6f4:	6a28      	ldr	r0, [r5, #32]
     6f6:	f000 fd95 	bl	1224 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     6fa:	2101      	movs	r1, #1
     6fc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     6fe:	f000 fb42 	bl	d86 <hal_gpio_write>
}
     702:	b003      	add	sp, #12
     704:	bd30      	pop	{r4, r5, pc}

00000706 <spiflash_delay_us>:
{
     706:	b508      	push	{r3, lr}
    os_cputime_delay_usecs(usecs);
     708:	f001 f8d4 	bl	18b4 <os_cputime_delay_usecs>
}
     70c:	bd08      	pop	{r3, pc}

0000070e <spiflash_read_jedec_id>:
{
     70e:	b5f0      	push	{r4, r5, r6, r7, lr}
     710:	b083      	sub	sp, #12
     712:	4604      	mov	r4, r0
     714:	460f      	mov	r7, r1
     716:	4616      	mov	r6, r2
     718:	461d      	mov	r5, r3
    uint8_t cmd[4] = { SPIFLASH_READ_JEDEC_ID, 0, 0, 0 };
     71a:	239f      	movs	r3, #159	; 0x9f
     71c:	f88d 3004 	strb.w	r3, [sp, #4]
     720:	2100      	movs	r1, #0
     722:	f88d 1005 	strb.w	r1, [sp, #5]
     726:	f88d 1006 	strb.w	r1, [sp, #6]
     72a:	f88d 1007 	strb.w	r1, [sp, #7]
    hal_gpio_write(dev->ss_pin, 0);
     72e:	6a80      	ldr	r0, [r0, #40]	; 0x28
     730:	f000 fb29 	bl	d86 <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     734:	2304      	movs	r3, #4
     736:	eb0d 0203 	add.w	r2, sp, r3
     73a:	4611      	mov	r1, r2
     73c:	6a20      	ldr	r0, [r4, #32]
     73e:	f000 fd71 	bl	1224 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     742:	2101      	movs	r1, #1
     744:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     746:	f000 fb1e 	bl	d86 <hal_gpio_write>
    if (manufacturer) {
     74a:	b117      	cbz	r7, 752 <spiflash_read_jedec_id+0x44>
        *manufacturer = cmd[1];
     74c:	f89d 3005 	ldrb.w	r3, [sp, #5]
     750:	703b      	strb	r3, [r7, #0]
    if (memory_type) {
     752:	b116      	cbz	r6, 75a <spiflash_read_jedec_id+0x4c>
        *memory_type = cmd[2];
     754:	f89d 3006 	ldrb.w	r3, [sp, #6]
     758:	7033      	strb	r3, [r6, #0]
    if (capacity) {
     75a:	b115      	cbz	r5, 762 <spiflash_read_jedec_id+0x54>
        *capacity = cmd[3];
     75c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     760:	702b      	strb	r3, [r5, #0]
}
     762:	2000      	movs	r0, #0
     764:	b003      	add	sp, #12
     766:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000768 <spiflash_read_status>:
{
     768:	b538      	push	{r3, r4, r5, lr}
     76a:	4604      	mov	r4, r0
    hal_gpio_write(dev->ss_pin, 0);
     76c:	2100      	movs	r1, #0
     76e:	6a80      	ldr	r0, [r0, #40]	; 0x28
     770:	f000 fb09 	bl	d86 <hal_gpio_write>
    hal_spi_tx_val(dev->spi_num, cmd);
     774:	2105      	movs	r1, #5
     776:	6a20      	ldr	r0, [r4, #32]
     778:	f000 fd1a 	bl	11b0 <hal_spi_tx_val>
    val = hal_spi_tx_val(dev->spi_num, 0xFF);
     77c:	21ff      	movs	r1, #255	; 0xff
     77e:	6a20      	ldr	r0, [r4, #32]
     780:	f000 fd16 	bl	11b0 <hal_spi_tx_val>
     784:	b2c5      	uxtb	r5, r0
    hal_gpio_write(dev->ss_pin, 1);
     786:	2101      	movs	r1, #1
     788:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     78a:	f000 fafc 	bl	d86 <hal_gpio_write>
}
     78e:	4628      	mov	r0, r5
     790:	bd38      	pop	{r3, r4, r5, pc}

00000792 <spiflash_device_ready>:
{
     792:	b510      	push	{r4, lr}
     794:	4604      	mov	r4, r0
    dev->ready = !(spiflash_read_status(dev) & SPIFLASH_STATUS_BUSY);
     796:	f7ff ffe7 	bl	768 <spiflash_read_status>
     79a:	f080 0001 	eor.w	r0, r0, #1
     79e:	f000 0001 	and.w	r0, r0, #1
     7a2:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
     7a6:	bd10      	pop	{r4, pc}

000007a8 <spiflash_wait_ready_till>:
    if (dev->ready) {
     7a8:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
     7ac:	b9eb      	cbnz	r3, 7ea <spiflash_wait_ready_till+0x42>
{
     7ae:	b570      	push	{r4, r5, r6, lr}
     7b0:	4604      	mov	r4, r0
     7b2:	460e      	mov	r6, r1
     7b4:	4615      	mov	r5, r2
    if (step_us < MYNEWT_VAL(SPIFLASH_READ_STATUS_INTERVAL)) {
     7b6:	2a09      	cmp	r2, #9
     7b8:	d904      	bls.n	7c4 <spiflash_wait_ready_till+0x1c>
    } else if (step_us > 1000000) {
     7ba:	4b0e      	ldr	r3, [pc, #56]	; (7f4 <spiflash_wait_ready_till+0x4c>)
     7bc:	429a      	cmp	r2, r3
     7be:	d902      	bls.n	7c6 <spiflash_wait_ready_till+0x1e>
        step_us = 1000000;
     7c0:	4d0c      	ldr	r5, [pc, #48]	; (7f4 <spiflash_wait_ready_till+0x4c>)
     7c2:	e000      	b.n	7c6 <spiflash_wait_ready_till+0x1e>
        step_us = MYNEWT_VAL(SPIFLASH_READ_STATUS_INTERVAL);
     7c4:	250a      	movs	r5, #10
    limit = os_cputime_get32() + os_cputime_usecs_to_ticks(timeout_us);
     7c6:	f001 f865 	bl	1894 <os_cputime_get32>
     7ca:	4406      	add	r6, r0
        if (spiflash_device_ready(dev)) {
     7cc:	4620      	mov	r0, r4
     7ce:	f7ff ffe0 	bl	792 <spiflash_device_ready>
     7d2:	b960      	cbnz	r0, 7ee <spiflash_wait_ready_till+0x46>
        spiflash_delay_us(step_us);
     7d4:	4628      	mov	r0, r5
     7d6:	f7ff ff96 	bl	706 <spiflash_delay_us>
    } while (CPUTIME_LT(os_cputime_get32(), limit));
     7da:	f001 f85b 	bl	1894 <os_cputime_get32>
     7de:	1b80      	subs	r0, r0, r6
     7e0:	2800      	cmp	r0, #0
     7e2:	dbf3      	blt.n	7cc <spiflash_wait_ready_till+0x24>
    int rc = -1;
     7e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     7e8:	e002      	b.n	7f0 <spiflash_wait_ready_till+0x48>
        return 0;
     7ea:	2000      	movs	r0, #0
}
     7ec:	4770      	bx	lr
            rc = 0;
     7ee:	2000      	movs	r0, #0
}
     7f0:	bd70      	pop	{r4, r5, r6, pc}
     7f2:	bf00      	nop
     7f4:	000f4240 	.word	0x000f4240

000007f8 <spiflash_wait_ready>:
{
     7f8:	b508      	push	{r3, lr}
    return spiflash_wait_ready_till(dev, timeout_ms * 1000, timeout_ms * 10);
     7fa:	eb01 0381 	add.w	r3, r1, r1, lsl #2
     7fe:	005a      	lsls	r2, r3, #1
     800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     804:	fb03 f101 	mul.w	r1, r3, r1
     808:	f7ff ffce 	bl	7a8 <spiflash_wait_ready_till>
}
     80c:	bd08      	pop	{r3, pc}

0000080e <hal_spiflash_read>:
{
     80e:	b570      	push	{r4, r5, r6, lr}
     810:	b082      	sub	sp, #8
     812:	4605      	mov	r5, r0
     814:	4616      	mov	r6, r2
     816:	461c      	mov	r4, r3
    uint8_t cmd[] = { SPIFLASH_READ,
     818:	2303      	movs	r3, #3
     81a:	f88d 3004 	strb.w	r3, [sp, #4]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     81e:	f3c1 4307 	ubfx	r3, r1, #16, #8
    uint8_t cmd[] = { SPIFLASH_READ,
     822:	f88d 3005 	strb.w	r3, [sp, #5]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     826:	f3c1 2307 	ubfx	r3, r1, #8, #8
    uint8_t cmd[] = { SPIFLASH_READ,
     82a:	f88d 3006 	strb.w	r3, [sp, #6]
     82e:	f88d 1007 	strb.w	r1, [sp, #7]
    err = spiflash_wait_ready(dev, 100);
     832:	2164      	movs	r1, #100	; 0x64
     834:	f7ff ffe0 	bl	7f8 <spiflash_wait_ready>
    if (!err) {
     838:	b900      	cbnz	r0, 83c <hal_spiflash_read+0x2e>
        if (len > 0) {
     83a:	b914      	cbnz	r4, 842 <hal_spiflash_read+0x34>
}
     83c:	2000      	movs	r0, #0
     83e:	b002      	add	sp, #8
     840:	bd70      	pop	{r4, r5, r6, pc}
    hal_gpio_write(dev->ss_pin, 0);
     842:	2100      	movs	r1, #0
     844:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     846:	f000 fa9e 	bl	d86 <hal_gpio_write>
            hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     84a:	2304      	movs	r3, #4
     84c:	2200      	movs	r2, #0
     84e:	eb0d 0103 	add.w	r1, sp, r3
     852:	6a28      	ldr	r0, [r5, #32]
     854:	f000 fce6 	bl	1224 <hal_spi_txrx>
            memset(buf, 0xFF, len);
     858:	4622      	mov	r2, r4
     85a:	21ff      	movs	r1, #255	; 0xff
     85c:	4630      	mov	r0, r6
     85e:	f001 fa35 	bl	1ccc <memset>
            hal_spi_txrx(dev->spi_num, buf, buf, len);
     862:	4623      	mov	r3, r4
     864:	4632      	mov	r2, r6
     866:	4631      	mov	r1, r6
     868:	6a28      	ldr	r0, [r5, #32]
     86a:	f000 fcdb 	bl	1224 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     86e:	2101      	movs	r1, #1
     870:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     872:	f000 fa88 	bl	d86 <hal_gpio_write>
     876:	e7e1      	b.n	83c <hal_spiflash_read+0x2e>

00000878 <spiflash_write_enable>:
{
     878:	b510      	push	{r4, lr}
     87a:	4604      	mov	r4, r0
    hal_gpio_write(dev->ss_pin, 0);
     87c:	2100      	movs	r1, #0
     87e:	6a80      	ldr	r0, [r0, #40]	; 0x28
     880:	f000 fa81 	bl	d86 <hal_gpio_write>
    hal_spi_tx_val(dev->spi_num, cmd);
     884:	2106      	movs	r1, #6
     886:	6a20      	ldr	r0, [r4, #32]
     888:	f000 fc92 	bl	11b0 <hal_spi_tx_val>
    hal_gpio_write(dev->ss_pin, 1);
     88c:	2101      	movs	r1, #1
     88e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     890:	f000 fa79 	bl	d86 <hal_gpio_write>
}
     894:	2000      	movs	r0, #0
     896:	bd10      	pop	{r4, pc}

00000898 <hal_spiflash_write>:
{
     898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     89c:	b082      	sub	sp, #8
     89e:	4605      	mov	r5, r0
     8a0:	460e      	mov	r6, r1
     8a2:	4690      	mov	r8, r2
     8a4:	461f      	mov	r7, r3
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
     8a6:	2300      	movs	r3, #0
     8a8:	9301      	str	r3, [sp, #4]
     8aa:	2302      	movs	r3, #2
     8ac:	f88d 3004 	strb.w	r3, [sp, #4]
    if (spiflash_wait_ready(dev, 100) != 0) {
     8b0:	2164      	movs	r1, #100	; 0x64
     8b2:	f7ff ffa1 	bl	7f8 <spiflash_wait_ready>
     8b6:	2800      	cmp	r0, #0
     8b8:	d14a      	bne.n	950 <hal_spiflash_write+0xb8>
     8ba:	4603      	mov	r3, r0
    pp_time_typical = dev->characteristics->tbp1.typical;
     8bc:	6bea      	ldr	r2, [r5, #60]	; 0x3c
     8be:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
    pp_time_maximum = dev->characteristics->tpp.maximum;
     8c2:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
    if (pp_time_maximum < pp_time_typical) {
     8c6:	45d1      	cmp	r9, sl
     8c8:	d840      	bhi.n	94c <hal_spiflash_write+0xb4>
    while (len) {
     8ca:	2f00      	cmp	r7, #0
     8cc:	d042      	beq.n	954 <hal_spiflash_write+0xbc>
        spiflash_write_enable(dev);
     8ce:	4628      	mov	r0, r5
     8d0:	f7ff ffd2 	bl	878 <spiflash_write_enable>
        cmd[1] = (uint8_t)(addr >> 16);
     8d4:	f3c6 4307 	ubfx	r3, r6, #16, #8
     8d8:	f88d 3005 	strb.w	r3, [sp, #5]
        cmd[2] = (uint8_t)(addr >> 8);
     8dc:	f3c6 2307 	ubfx	r3, r6, #8, #8
     8e0:	f88d 3006 	strb.w	r3, [sp, #6]
        cmd[3] = (uint8_t)(addr);
     8e4:	f88d 6007 	strb.w	r6, [sp, #7]
        page_limit = (addr & ~(dev->page_size - 1)) + dev->page_size;
     8e8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     8ea:	425c      	negs	r4, r3
     8ec:	4034      	ands	r4, r6
     8ee:	441c      	add	r4, r3
        to_write = page_limit - addr > len ? len :  page_limit - addr;
     8f0:	1ba4      	subs	r4, r4, r6
     8f2:	42bc      	cmp	r4, r7
     8f4:	bf28      	it	cs
     8f6:	463c      	movcs	r4, r7
    hal_gpio_write(dev->ss_pin, 0);
     8f8:	2100      	movs	r1, #0
     8fa:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     8fc:	f000 fa43 	bl	d86 <hal_gpio_write>
        hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     900:	2304      	movs	r3, #4
     902:	2200      	movs	r2, #0
     904:	eb0d 0103 	add.w	r1, sp, r3
     908:	6a28      	ldr	r0, [r5, #32]
     90a:	f000 fc8b 	bl	1224 <hal_spi_txrx>
        hal_spi_txrx(dev->spi_num, (void *)u8buf, NULL, to_write);
     90e:	4623      	mov	r3, r4
     910:	2200      	movs	r2, #0
     912:	4641      	mov	r1, r8
     914:	6a28      	ldr	r0, [r5, #32]
     916:	f000 fc85 	bl	1224 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     91a:	2101      	movs	r1, #1
     91c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     91e:	f000 fa32 	bl	d86 <hal_gpio_write>
        dev->ready = false;
     922:	2300      	movs	r3, #0
     924:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        spiflash_delay_us(pp_time_typical);
     928:	4648      	mov	r0, r9
     92a:	f7ff feec 	bl	706 <spiflash_delay_us>
        rc = spiflash_wait_ready_till(dev, pp_time_maximum - pp_time_typical,
     92e:	ebaa 0109 	sub.w	r1, sl, r9
     932:	4a0a      	ldr	r2, [pc, #40]	; (95c <hal_spiflash_write+0xc4>)
     934:	fba2 3201 	umull	r3, r2, r2, r1
     938:	08d2      	lsrs	r2, r2, #3
     93a:	4628      	mov	r0, r5
     93c:	f7ff ff34 	bl	7a8 <spiflash_wait_ready_till>
        if (rc) {
     940:	4603      	mov	r3, r0
     942:	b938      	cbnz	r0, 954 <hal_spiflash_write+0xbc>
        addr += to_write;
     944:	4426      	add	r6, r4
        u8buf += to_write;
     946:	44a0      	add	r8, r4
        len -= to_write;
     948:	1b3f      	subs	r7, r7, r4
     94a:	e7be      	b.n	8ca <hal_spiflash_write+0x32>
        pp_time_maximum = pp_time_typical;
     94c:	46ca      	mov	sl, r9
     94e:	e7bc      	b.n	8ca <hal_spiflash_write+0x32>
        rc = -1;
     950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
     954:	4618      	mov	r0, r3
     956:	b002      	add	sp, #8
     958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     95c:	cccccccd 	.word	0xcccccccd

00000960 <spiflash_execute_erase>:
{
     960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     962:	4604      	mov	r4, r0
     964:	460d      	mov	r5, r1
     966:	4617      	mov	r7, r2
     968:	461e      	mov	r6, r3
    if (spiflash_wait_ready(dev, 100) != 0) {
     96a:	2164      	movs	r1, #100	; 0x64
     96c:	f7ff ff44 	bl	7f8 <spiflash_wait_ready>
     970:	bb68      	cbnz	r0, 9ce <spiflash_execute_erase+0x6e>
    spiflash_write_enable(dev);
     972:	4620      	mov	r0, r4
     974:	f7ff ff80 	bl	878 <spiflash_write_enable>
    spiflash_read_status(dev);
     978:	4620      	mov	r0, r4
     97a:	f7ff fef5 	bl	768 <spiflash_read_status>
    hal_gpio_write(dev->ss_pin, 0);
     97e:	2100      	movs	r1, #0
     980:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     982:	f000 fa00 	bl	d86 <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, (void *)buf, NULL, size);
     986:	463b      	mov	r3, r7
     988:	2200      	movs	r2, #0
     98a:	4629      	mov	r1, r5
     98c:	6a20      	ldr	r0, [r4, #32]
     98e:	f000 fc49 	bl	1224 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     992:	2101      	movs	r1, #1
     994:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     996:	f000 f9f6 	bl	d86 <hal_gpio_write>
    dev->ready = false;
     99a:	2300      	movs	r3, #0
     99c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    start_time = os_cputime_get32();
     9a0:	f000 ff78 	bl	1894 <os_cputime_get32>
     9a4:	4605      	mov	r5, r0
    spiflash_delay_us(delay_spec->typical);
     9a6:	6830      	ldr	r0, [r6, #0]
     9a8:	f7ff fead 	bl	706 <spiflash_delay_us>
    wait_time_us = os_cputime_ticks_to_usecs(os_cputime_get32() - start_time);
     9ac:	f000 ff72 	bl	1894 <os_cputime_get32>
     9b0:	1b40      	subs	r0, r0, r5
    if (wait_time_us > delay_spec->maximum) {
     9b2:	6871      	ldr	r1, [r6, #4]
     9b4:	4281      	cmp	r1, r0
     9b6:	d308      	bcc.n	9ca <spiflash_execute_erase+0x6a>
        wait_time_us = delay_spec->maximum - wait_time_us;
     9b8:	1a09      	subs	r1, r1, r0
    rc = spiflash_wait_ready_till(dev, wait_time_us, wait_time_us / 50);
     9ba:	4a06      	ldr	r2, [pc, #24]	; (9d4 <spiflash_execute_erase+0x74>)
     9bc:	fba2 3201 	umull	r3, r2, r2, r1
     9c0:	0912      	lsrs	r2, r2, #4
     9c2:	4620      	mov	r0, r4
     9c4:	f7ff fef0 	bl	7a8 <spiflash_wait_ready_till>
}
     9c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        wait_time_us = 0;
     9ca:	2100      	movs	r1, #0
     9cc:	e7f5      	b.n	9ba <spiflash_execute_erase+0x5a>
        rc = -1;
     9ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
     9d2:	e7f9      	b.n	9c8 <spiflash_execute_erase+0x68>
     9d4:	51eb851f 	.word	0x51eb851f

000009d8 <spiflash_erase_cmd>:

static int
spiflash_erase_cmd(struct spiflash_dev *dev, uint8_t cmd, uint32_t addr,
                   const struct spiflash_time_spec *time_spec)
{
     9d8:	b500      	push	{lr}
     9da:	b083      	sub	sp, #12
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
     9dc:	f88d 1004 	strb.w	r1, [sp, #4]
     9e0:	f3c2 4107 	ubfx	r1, r2, #16, #8
     9e4:	f88d 1005 	strb.w	r1, [sp, #5]
     9e8:	f3c2 2107 	ubfx	r1, r2, #8, #8
     9ec:	f88d 1006 	strb.w	r1, [sp, #6]
     9f0:	f88d 2007 	strb.w	r2, [sp, #7]
                       (uint8_t)addr };
    return spiflash_execute_erase(dev, buf, sizeof(buf), time_spec);
     9f4:	2204      	movs	r2, #4
     9f6:	eb0d 0102 	add.w	r1, sp, r2
     9fa:	f7ff ffb1 	bl	960 <spiflash_execute_erase>

}
     9fe:	b003      	add	sp, #12
     a00:	f85d fb04 	ldr.w	pc, [sp], #4

00000a04 <spiflash_sector_erase>:

int
spiflash_sector_erase(struct spiflash_dev *dev, uint32_t addr)
{
     a04:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_SECTOR_ERASE, addr,
     a06:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     a08:	460a      	mov	r2, r1
     a0a:	2120      	movs	r1, #32
     a0c:	f7ff ffe4 	bl	9d8 <spiflash_erase_cmd>
                              &dev->characteristics->tse);
}
     a10:	bd08      	pop	{r3, pc}

00000a12 <hal_spiflash_erase_sector>:
{
     a12:	b508      	push	{r3, lr}
    return spiflash_sector_erase(dev, addr);
     a14:	f7ff fff6 	bl	a04 <spiflash_sector_erase>
}
     a18:	bd08      	pop	{r3, pc}

00000a1a <spiflash_block_32k_erase>:

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
int
spiflash_block_32k_erase(struct spiflash_dev *dev, uint32_t addr)
{
     a1a:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
                              &dev->characteristics->tbe1);
     a1c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
     a1e:	3308      	adds	r3, #8
     a20:	460a      	mov	r2, r1
     a22:	2152      	movs	r1, #82	; 0x52
     a24:	f7ff ffd8 	bl	9d8 <spiflash_erase_cmd>
}
     a28:	bd08      	pop	{r3, pc}

00000a2a <spiflash_block_64k_erase>:
#endif

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
int
spiflash_block_64k_erase(struct spiflash_dev *dev, uint32_t addr)
{
     a2a:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
                              &dev->characteristics->tbe2);
     a2c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
     a2e:	3310      	adds	r3, #16
     a30:	460a      	mov	r2, r1
     a32:	21d8      	movs	r1, #216	; 0xd8
     a34:	f7ff ffd0 	bl	9d8 <spiflash_erase_cmd>
}
     a38:	bd08      	pop	{r3, pc}

00000a3a <spiflash_chip_erase>:
#endif

int
spiflash_chip_erase(struct spiflash_dev *dev)
{
     a3a:	b500      	push	{lr}
     a3c:	b083      	sub	sp, #12
    uint8_t buf[1] = { SPIFLASH_CHIP_ERASE };
     a3e:	a902      	add	r1, sp, #8
     a40:	2360      	movs	r3, #96	; 0x60
     a42:	f801 3d04 	strb.w	r3, [r1, #-4]!

    return spiflash_execute_erase(dev, buf, sizeof(buf),
                                  &dev->characteristics->tce);
     a46:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_execute_erase(dev, buf, sizeof(buf),
     a48:	3318      	adds	r3, #24
     a4a:	2201      	movs	r2, #1
     a4c:	f7ff ff88 	bl	960 <spiflash_execute_erase>
}
     a50:	b003      	add	sp, #12
     a52:	f85d fb04 	ldr.w	pc, [sp], #4

00000a56 <spiflash_erase>:

int
spiflash_erase(struct spiflash_dev *dev, uint32_t address, uint32_t size)
{
     a56:	b570      	push	{r4, r5, r6, lr}
     a58:	4606      	mov	r6, r0
     a5a:	4615      	mov	r5, r2
    int rc = 0;

    if (address == 0 && size == dev->hal.hf_size) {
     a5c:	460c      	mov	r4, r1
     a5e:	b911      	cbnz	r1, a66 <spiflash_erase+0x10>
     a60:	6883      	ldr	r3, [r0, #8]
     a62:	4293      	cmp	r3, r2
     a64:	d005      	beq.n	a72 <spiflash_erase+0x1c>
        return spiflash_chip_erase(dev);
    }
    address &= ~0xFFFU;
     a66:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
     a6a:	f024 040f 	bic.w	r4, r4, #15
    int rc = 0;
     a6e:	2300      	movs	r3, #0
    while (size) {
     a70:	e01c      	b.n	aac <spiflash_erase+0x56>
        return spiflash_chip_erase(dev);
     a72:	f7ff ffe2 	bl	a3a <spiflash_chip_erase>
     a76:	4603      	mov	r3, r0
     a78:	e010      	b.n	a9c <spiflash_erase+0x46>
#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
            /* 64 KB erase if possible */
            rc = spiflash_block_64k_erase(dev, address);
     a7a:	4621      	mov	r1, r4
     a7c:	4630      	mov	r0, r6
     a7e:	f7ff ffd4 	bl	a2a <spiflash_block_64k_erase>
            if (rc) {
     a82:	4603      	mov	r3, r0
     a84:	b950      	cbnz	r0, a9c <spiflash_erase+0x46>
                goto err;
            }
            address += 0x10000;
     a86:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
            size -= 0x10000;
     a8a:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
            continue;
     a8e:	e00d      	b.n	aac <spiflash_erase+0x56>
        }
#endif
#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
            /* 32 KB erase if possible */
            rc = spiflash_block_32k_erase(dev, address);
     a90:	4621      	mov	r1, r4
     a92:	4630      	mov	r0, r6
     a94:	f7ff ffc1 	bl	a1a <spiflash_block_32k_erase>
            if (rc) {
     a98:	4603      	mov	r3, r0
     a9a:	b108      	cbz	r0, aa0 <spiflash_erase+0x4a>
            size = 0;
        }
    }
err:
    return rc;
}
     a9c:	4618      	mov	r0, r3
     a9e:	bd70      	pop	{r4, r5, r6, pc}
            address += 0x8000;
     aa0:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
            size -= 0x8000;
     aa4:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
            continue;
     aa8:	e000      	b.n	aac <spiflash_erase+0x56>
            size = 0;
     aaa:	2500      	movs	r5, #0
    while (size) {
     aac:	2d00      	cmp	r5, #0
     aae:	d0f5      	beq.n	a9c <spiflash_erase+0x46>
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
     ab0:	b2a3      	uxth	r3, r4
     ab2:	b913      	cbnz	r3, aba <spiflash_erase+0x64>
     ab4:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
     ab8:	d2df      	bcs.n	a7a <spiflash_erase+0x24>
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
     aba:	f3c4 030e 	ubfx	r3, r4, #0, #15
     abe:	b913      	cbnz	r3, ac6 <spiflash_erase+0x70>
     ac0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
     ac4:	d2e4      	bcs.n	a90 <spiflash_erase+0x3a>
        rc = spiflash_sector_erase(dev, address);
     ac6:	4621      	mov	r1, r4
     ac8:	4630      	mov	r0, r6
     aca:	f7ff ff9b 	bl	a04 <spiflash_sector_erase>
        if (rc) {
     ace:	4603      	mov	r3, r0
     ad0:	2800      	cmp	r0, #0
     ad2:	d1e3      	bne.n	a9c <spiflash_erase+0x46>
        address += MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     ad4:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
        if (size > MYNEWT_VAL(SPIFLASH_SECTOR_SIZE)) {
     ad8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
     adc:	d9e5      	bls.n	aaa <spiflash_erase+0x54>
            size -= MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     ade:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
     ae2:	e7e3      	b.n	aac <spiflash_erase+0x56>

00000ae4 <hal_spiflash_erase>:
{
     ae4:	b508      	push	{r3, lr}
    return spiflash_erase(dev, address, size);
     ae6:	f7ff ffb6 	bl	a56 <spiflash_erase>
}
     aea:	bd08      	pop	{r3, pc}

00000aec <spiflash_identify>:

int
spiflash_identify(struct spiflash_dev *dev)
{
     aec:	b570      	push	{r4, r5, r6, lr}
     aee:	b082      	sub	sp, #8
     af0:	4606      	mov	r6, r0
    int i;
    int j;
    uint8_t manufacturer = 0;
     af2:	2300      	movs	r3, #0
     af4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t memory_type = 0;
     af8:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t capacity = 0;
     afc:	ac02      	add	r4, sp, #8
     afe:	f804 3d03 	strb.w	r3, [r4, #-3]!

    spiflash_lock(dev);

    /* Only one chip specified, no need for search*/
    if ((sizeof(supported_chips) / sizeof(supported_chips[0])) == 2) {
        supported_chips[0].fc_release_power_down(dev);
     b02:	4d14      	ldr	r5, [pc, #80]	; (b54 <spiflash_identify+0x68>)
     b04:	686b      	ldr	r3, [r5, #4]
     b06:	4798      	blx	r3
        spiflash_read_jedec_id(dev, &manufacturer, &memory_type, &capacity);
     b08:	4623      	mov	r3, r4
     b0a:	f10d 0206 	add.w	r2, sp, #6
     b0e:	f10d 0107 	add.w	r1, sp, #7
     b12:	4630      	mov	r0, r6
     b14:	f7ff fdfb 	bl	70e <spiflash_read_jedec_id>
        /* If BSP defined SpiFlash manufacturer or memory type does not
         * match SpiFlash is most likely not connected, connected to
         * different pins, or of different type.
         * It is unlikely that flash depended packaged will work correctly.
         */
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
     b18:	782a      	ldrb	r2, [r5, #0]
     b1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
     b1e:	429a      	cmp	r2, r3
     b20:	d10e      	bne.n	b40 <spiflash_identify+0x54>
     b22:	786a      	ldrb	r2, [r5, #1]
     b24:	f89d 3006 	ldrb.w	r3, [sp, #6]
     b28:	429a      	cmp	r2, r3
     b2a:	d109      	bne.n	b40 <spiflash_identify+0x54>
     b2c:	78aa      	ldrb	r2, [r5, #2]
     b2e:	f89d 3005 	ldrb.w	r3, [sp, #5]
     b32:	429a      	cmp	r2, r3
     b34:	d104      	bne.n	b40 <spiflash_identify+0x54>
            memory_type != supported_chips[0].fc_jedec_id.ji_type ||
            capacity != supported_chips[0].fc_jedec_id.ji_capacity) {
            rc = -1;
            goto err;
        }
        dev->flash_chip = &supported_chips[0];
     b36:	4b07      	ldr	r3, [pc, #28]	; (b54 <spiflash_identify+0x68>)
     b38:	63b3      	str	r3, [r6, #56]	; 0x38
    }
err:
    spiflash_unlock(dev);

    return rc;
}
     b3a:	2000      	movs	r0, #0
     b3c:	b002      	add	sp, #8
     b3e:	bd70      	pop	{r4, r5, r6, pc}
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
     b40:	f7ff fb10 	bl	164 <hal_debugger_connected>
     b44:	b100      	cbz	r0, b48 <spiflash_identify+0x5c>
     b46:	be01      	bkpt	0x0001
     b48:	2300      	movs	r3, #0
     b4a:	461a      	mov	r2, r3
     b4c:	4619      	mov	r1, r3
     b4e:	4618      	mov	r0, r3
     b50:	f000 fe2c 	bl	17ac <__assert_func>
     b54:	20000128 	.word	0x20000128

00000b58 <hal_spiflash_init>:

static int
hal_spiflash_init(const struct hal_flash *hal_flash_dev)
{
     b58:	b510      	push	{r4, lr}
     b5a:	4604      	mov	r4, r0
    os_callout_init(&dev->apd_tmo_co, os_eventq_dflt_get(),
                    spiflash_apd_tmo_func, dev);
#endif

#if !MYNEWT_VAL(BUS_DRIVER_PRESENT)
    hal_gpio_init_out(dev->ss_pin, 1);
     b5c:	2101      	movs	r1, #1
     b5e:	6a80      	ldr	r0, [r0, #40]	; 0x28
     b60:	f000 f8f5 	bl	d4e <hal_gpio_init_out>

    (void)hal_spi_disable(dev->spi_num);
     b64:	6a20      	ldr	r0, [r4, #32]
     b66:	f000 fabb 	bl	10e0 <hal_spi_disable>

    rc = hal_spi_config(dev->spi_num, &dev->spi_settings);
     b6a:	f104 0118 	add.w	r1, r4, #24
     b6e:	6a20      	ldr	r0, [r4, #32]
     b70:	f000 fa74 	bl	105c <hal_spi_config>
    if (rc) {
     b74:	4603      	mov	r3, r0
     b76:	b108      	cbz	r0, b7c <hal_spiflash_init+0x24>
    hal_spi_enable(dev->spi_num);
#endif
    rc = spiflash_identify(dev);

    return rc;
}
     b78:	4618      	mov	r0, r3
     b7a:	bd10      	pop	{r4, pc}
    hal_spi_set_txrx_cb(dev->spi_num, NULL, NULL);
     b7c:	2200      	movs	r2, #0
     b7e:	4611      	mov	r1, r2
     b80:	6a20      	ldr	r0, [r4, #32]
     b82:	f000 fb39 	bl	11f8 <hal_spi_set_txrx_cb>
    hal_spi_enable(dev->spi_num);
     b86:	6a20      	ldr	r0, [r4, #32]
     b88:	f000 fa84 	bl	1094 <hal_spi_enable>
    rc = spiflash_identify(dev);
     b8c:	4620      	mov	r0, r4
     b8e:	f7ff ffad 	bl	aec <spiflash_identify>
     b92:	4603      	mov	r3, r0
    return rc;
     b94:	e7f0      	b.n	b78 <hal_spiflash_init+0x20>

00000b96 <_exit>:

void _exit(int status);

void
_exit(int status)
{
     b96:	b508      	push	{r3, lr}
    hal_system_reset();
     b98:	f7ff faec 	bl	174 <hal_system_reset>

00000b9c <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
     b9c:	2300      	movs	r3, #0
     b9e:	4a07      	ldr	r2, [pc, #28]	; (bbc <nrf52k_flash_wait_ready+0x20>)
     ba0:	4293      	cmp	r3, r2
     ba2:	dc06      	bgt.n	bb2 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
     ba4:	4a06      	ldr	r2, [pc, #24]	; (bc0 <nrf52k_flash_wait_ready+0x24>)
     ba6:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
     baa:	2a01      	cmp	r2, #1
     bac:	d004      	beq.n	bb8 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
     bae:	3301      	adds	r3, #1
     bb0:	e7f5      	b.n	b9e <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
     bb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     bb6:	4770      	bx	lr
            return 0;
     bb8:	2000      	movs	r0, #0
}
     bba:	4770      	bx	lr
     bbc:	0001869f 	.word	0x0001869f
     bc0:	4001e000 	.word	0x4001e000

00000bc4 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
     bc4:	b538      	push	{r3, r4, r5, lr}
     bc6:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
     bc8:	f7ff ffe8 	bl	b9c <nrf52k_flash_wait_ready>
     bcc:	b9f0      	cbnz	r0, c0c <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     bce:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     bd2:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
     bd4:	4b0f      	ldr	r3, [pc, #60]	; (c14 <nrf52k_flash_erase_sector+0x50>)
     bd6:	2202      	movs	r2, #2
     bd8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
     bdc:	f7ff ffde 	bl	b9c <nrf52k_flash_wait_ready>
     be0:	b148      	cbz	r0, bf6 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
     be2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
     be6:	4a0b      	ldr	r2, [pc, #44]	; (c14 <nrf52k_flash_erase_sector+0x50>)
     be8:	2100      	movs	r1, #0
     bea:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     bee:	b904      	cbnz	r4, bf2 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
     bf0:	b662      	cpsie	i
    return rc;
}
     bf2:	4618      	mov	r0, r3
     bf4:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
     bf6:	4b07      	ldr	r3, [pc, #28]	; (c14 <nrf52k_flash_erase_sector+0x50>)
     bf8:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
     bfc:	f7ff ffce 	bl	b9c <nrf52k_flash_wait_ready>
     c00:	4603      	mov	r3, r0
     c02:	2800      	cmp	r0, #0
     c04:	d0ef      	beq.n	be6 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
     c06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     c0a:	e7ec      	b.n	be6 <nrf52k_flash_erase_sector+0x22>
        return -1;
     c0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     c10:	e7ef      	b.n	bf2 <nrf52k_flash_erase_sector+0x2e>
     c12:	bf00      	nop
     c14:	4001e000 	.word	0x4001e000

00000c18 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
     c18:	2000      	movs	r0, #0
     c1a:	4770      	bx	lr

00000c1c <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     c1c:	297f      	cmp	r1, #127	; 0x7f
     c1e:	dc06      	bgt.n	c2e <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
     c20:	0309      	lsls	r1, r1, #12
     c22:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
     c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     c28:	601a      	str	r2, [r3, #0]
}
     c2a:	2000      	movs	r0, #0
     c2c:	4770      	bx	lr
{
     c2e:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     c30:	f7ff fa98 	bl	164 <hal_debugger_connected>
     c34:	b100      	cbz	r0, c38 <nrf52k_flash_sector_info+0x1c>
     c36:	be01      	bkpt	0x0001
     c38:	2300      	movs	r3, #0
     c3a:	461a      	mov	r2, r3
     c3c:	4619      	mov	r1, r3
     c3e:	4618      	mov	r0, r3
     c40:	f000 fdb4 	bl	17ac <__assert_func>

00000c44 <nrf52k_flash_write>:
{
     c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c48:	b082      	sub	sp, #8
     c4a:	460d      	mov	r5, r1
     c4c:	4616      	mov	r6, r2
     c4e:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
     c50:	f7ff ffa4 	bl	b9c <nrf52k_flash_wait_ready>
     c54:	2800      	cmp	r0, #0
     c56:	d158      	bne.n	d0a <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c58:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     c5c:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     c5e:	4b2c      	ldr	r3, [pc, #176]	; (d10 <nrf52k_flash_write+0xcc>)
     c60:	2201      	movs	r2, #1
     c62:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
     c66:	f015 0803 	ands.w	r8, r5, #3
     c6a:	d10b      	bne.n	c84 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
     c6c:	2c03      	cmp	r4, #3
     c6e:	d925      	bls.n	cbc <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
     c70:	f7ff ff94 	bl	b9c <nrf52k_flash_wait_ready>
     c74:	2800      	cmp	r0, #0
     c76:	d139      	bne.n	cec <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
     c78:	f856 3b04 	ldr.w	r3, [r6], #4
     c7c:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
     c80:	3c04      	subs	r4, #4
     c82:	e7f3      	b.n	c6c <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
     c84:	f7ff ff8a 	bl	b9c <nrf52k_flash_wait_ready>
     c88:	bb68      	cbnz	r0, ce6 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
     c8a:	f025 0a03 	bic.w	sl, r5, #3
     c8e:	f8da 3000 	ldr.w	r3, [sl]
     c92:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
     c94:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
     c98:	45a1      	cmp	r9, r4
     c9a:	d900      	bls.n	c9e <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
     c9c:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
     c9e:	464a      	mov	r2, r9
     ca0:	4631      	mov	r1, r6
     ca2:	ab01      	add	r3, sp, #4
     ca4:	eb03 0008 	add.w	r0, r3, r8
     ca8:	f001 f803 	bl	1cb2 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
     cac:	9b01      	ldr	r3, [sp, #4]
     cae:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
     cb2:	444d      	add	r5, r9
        num_bytes -= cnt;
     cb4:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
     cb8:	444e      	add	r6, r9
     cba:	e7d7      	b.n	c6c <nrf52k_flash_write+0x28>
    if (num_bytes) {
     cbc:	b164      	cbz	r4, cd8 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
     cbe:	682b      	ldr	r3, [r5, #0]
     cc0:	a802      	add	r0, sp, #8
     cc2:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
     cc6:	4622      	mov	r2, r4
     cc8:	4631      	mov	r1, r6
     cca:	f000 fff2 	bl	1cb2 <memcpy>
        if (nrf52k_flash_wait_ready()) {
     cce:	f7ff ff65 	bl	b9c <nrf52k_flash_wait_ready>
     cd2:	b9b8      	cbnz	r0, d04 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
     cd4:	9b01      	ldr	r3, [sp, #4]
     cd6:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
     cd8:	f7ff ff60 	bl	b9c <nrf52k_flash_wait_ready>
     cdc:	4603      	mov	r3, r0
     cde:	b138      	cbz	r0, cf0 <nrf52k_flash_write+0xac>
        rc = -1;
     ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     ce4:	e004      	b.n	cf0 <nrf52k_flash_write+0xac>
    int rc = -1;
     ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     cea:	e001      	b.n	cf0 <nrf52k_flash_write+0xac>
     cec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
     cf0:	4a07      	ldr	r2, [pc, #28]	; (d10 <nrf52k_flash_write+0xcc>)
     cf2:	2100      	movs	r1, #0
     cf4:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     cf8:	b907      	cbnz	r7, cfc <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
     cfa:	b662      	cpsie	i
}
     cfc:	4618      	mov	r0, r3
     cfe:	b002      	add	sp, #8
     d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
     d04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     d08:	e7f2      	b.n	cf0 <nrf52k_flash_write+0xac>
        return -1;
     d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     d0e:	e7f5      	b.n	cfc <nrf52k_flash_write+0xb8>
     d10:	4001e000 	.word	0x4001e000

00000d14 <nrf52k_flash_read>:
{
     d14:	b508      	push	{r3, lr}
     d16:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
     d18:	461a      	mov	r2, r3
     d1a:	f000 ffca 	bl	1cb2 <memcpy>
}
     d1e:	2000      	movs	r0, #0
     d20:	bd08      	pop	{r3, pc}

00000d22 <hal_gpio_init_in>:
{
    uint32_t conf;
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);

    switch (pull) {
     d22:	2901      	cmp	r1, #1
     d24:	d003      	beq.n	d2e <hal_gpio_init_in+0xc>
     d26:	2902      	cmp	r1, #2
     d28:	d00f      	beq.n	d4a <hal_gpio_init_in+0x28>
    case HAL_GPIO_PULL_DOWN:
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
        break;
    case HAL_GPIO_PULL_NONE:
    default:
        conf = 0;
     d2a:	2100      	movs	r1, #0
        break;
     d2c:	e000      	b.n	d30 <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
     d2e:	210c      	movs	r1, #12
    }

    port = HAL_GPIO_PORT(pin);
    port->PIN_CNF[pin_index] = conf;
     d30:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     d34:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
     d38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
     d3c:	2301      	movs	r3, #1
     d3e:	fa03 f000 	lsl.w	r0, r3, r0
     d42:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c

    return 0;
}
     d46:	2000      	movs	r0, #0
     d48:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
     d4a:	2104      	movs	r1, #4
     d4c:	e7f0      	b.n	d30 <hal_gpio_init_in+0xe>

00000d4e <hal_gpio_init_out>:
{
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);

    port = HAL_GPIO_PORT(pin);
    if (val) {
     d4e:	b999      	cbnz	r1, d78 <hal_gpio_init_out+0x2a>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
     d50:	2301      	movs	r3, #1
     d52:	4083      	lsls	r3, r0
     d54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     d58:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    }
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
     d5c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     d60:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
     d64:	2103      	movs	r1, #3
     d66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);
    port->DIRSET = HAL_GPIO_MASK(pin);
     d6a:	2301      	movs	r3, #1
     d6c:	fa03 f000 	lsl.w	r0, r3, r0
     d70:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518

    return 0;
}
     d74:	2000      	movs	r0, #0
     d76:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
     d78:	2301      	movs	r3, #1
     d7a:	4083      	lsls	r3, r0
     d7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     d80:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
     d84:	e7ea      	b.n	d5c <hal_gpio_init_out+0xe>

00000d86 <hal_gpio_write>:
hal_gpio_write(int pin, int val)
{
    NRF_GPIO_Type *port;

    port = HAL_GPIO_PORT(pin);
    if (val) {
     d86:	b939      	cbnz	r1, d98 <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
     d88:	2301      	movs	r3, #1
     d8a:	fa03 f000 	lsl.w	r0, r3, r0
     d8e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     d92:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    }
}
     d96:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
     d98:	2301      	movs	r3, #1
     d9a:	fa03 f000 	lsl.w	r0, r3, r0
     d9e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     da2:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
     da6:	4770      	bx	lr

00000da8 <hal_gpio_read>:
hal_gpio_read(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->DIR & HAL_GPIO_MASK(pin)) ?
     da8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     dac:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
     db0:	2301      	movs	r3, #1
     db2:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
     db4:	421a      	tst	r2, r3
     db6:	d108      	bne.n	dca <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
     db8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     dbc:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
     dc0:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
     dc4:	f000 0001 	and.w	r0, r0, #1
}
     dc8:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
     dca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     dce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
     dd2:	fa23 f000 	lsr.w	r0, r3, r0
     dd6:	f000 0001 	and.w	r0, r0, #1
     dda:	4770      	bx	lr

00000ddc <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER) || MYNEWT_VAL(SPI_3_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
     ddc:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
     dde:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
     de0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
     de4:	b32b      	cbz	r3, e32 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
     de6:	2300      	movs	r3, #0
     de8:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
     dec:	7843      	ldrb	r3, [r0, #1]
     dee:	b303      	cbz	r3, e32 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
     df0:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
     df4:	88c3      	ldrh	r3, [r0, #6]
     df6:	fa13 f382 	uxtah	r3, r3, r2
     dfa:	b29b      	uxth	r3, r3
     dfc:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
     dfe:	8881      	ldrh	r1, [r0, #4]
     e00:	428b      	cmp	r3, r1
     e02:	d217      	bcs.n	e34 <nrf52_irqm_handler+0x58>
     e04:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
     e06:	6984      	ldr	r4, [r0, #24]
     e08:	4414      	add	r4, r2
     e0a:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
     e0c:	1acb      	subs	r3, r1, r3
     e0e:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
     e10:	2bff      	cmp	r3, #255	; 0xff
     e12:	bf28      	it	cs
     e14:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
     e16:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
     e1a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
     e1e:	69c1      	ldr	r1, [r0, #28]
     e20:	b129      	cbz	r1, e2e <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
     e22:	440a      	add	r2, r1
     e24:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
     e26:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
     e2a:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
     e2e:	2301      	movs	r3, #1
     e30:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
     e32:	bd38      	pop	{r3, r4, r5, pc}
     e34:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
     e36:	6a03      	ldr	r3, [r0, #32]
     e38:	b10b      	cbz	r3, e3e <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
     e3a:	6a40      	ldr	r0, [r0, #36]	; 0x24
     e3c:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
     e3e:	2300      	movs	r3, #0
     e40:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
     e42:	2340      	movs	r3, #64	; 0x40
     e44:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
     e48:	e7f3      	b.n	e32 <nrf52_irqm_handler+0x56>
	...

00000e4c <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
     e4c:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
     e4e:	4b04      	ldr	r3, [pc, #16]	; (e60 <nrf52_spi0_irq_handler+0x14>)
     e50:	781b      	ldrb	r3, [r3, #0]
     e52:	b103      	cbz	r3, e56 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
     e54:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
     e56:	4802      	ldr	r0, [pc, #8]	; (e60 <nrf52_spi0_irq_handler+0x14>)
     e58:	f7ff ffc0 	bl	ddc <nrf52_irqm_handler>
}
     e5c:	e7fa      	b.n	e54 <nrf52_spi0_irq_handler+0x8>
     e5e:	bf00      	nop
     e60:	20000160 	.word	0x20000160

00000e64 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
     e64:	2301      	movs	r3, #1
     e66:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
     e68:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
     e6c:	2b00      	cmp	r3, #0
     e6e:	d0fb      	beq.n	e68 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
     e70:	2300      	movs	r3, #0
     e72:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
     e76:	4770      	bx	lr

00000e78 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
     e78:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
     e7a:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
     e7c:	780b      	ldrb	r3, [r1, #0]
     e7e:	2b03      	cmp	r3, #3
     e80:	d80c      	bhi.n	e9c <hal_spi_config_slave+0x24>
     e82:	e8df f003 	tbb	[pc, r3]
     e86:	0e02      	.short	0x0e02
     e88:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
     e8a:	2300      	movs	r3, #0
    rc = 0;
     e8c:	4618      	mov	r0, r3
     e8e:	e00a      	b.n	ea6 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
     e90:	2304      	movs	r3, #4
    rc = 0;
     e92:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
     e94:	e007      	b.n	ea6 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
     e96:	2306      	movs	r3, #6
    rc = 0;
     e98:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
     e9a:	e004      	b.n	ea6 <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
     e9c:	2300      	movs	r3, #0
            rc = EINVAL;
     e9e:	2016      	movs	r0, #22
            break;
     ea0:	e001      	b.n	ea6 <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
     ea2:	2302      	movs	r3, #2
    rc = 0;
     ea4:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
     ea6:	784c      	ldrb	r4, [r1, #1]
     ea8:	2c01      	cmp	r4, #1
     eaa:	d005      	beq.n	eb8 <hal_spi_config_slave+0x40>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
     eac:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
     eb0:	788b      	ldrb	r3, [r1, #2]
     eb2:	b923      	cbnz	r3, ebe <hal_spi_config_slave+0x46>
            rc = EINVAL;
            break;
    }

    return rc;
}
     eb4:	bc10      	pop	{r4}
     eb6:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
     eb8:	f043 0301 	orr.w	r3, r3, #1
     ebc:	e7f6      	b.n	eac <hal_spi_config_slave+0x34>
            rc = EINVAL;
     ebe:	2016      	movs	r0, #22
    return rc;
     ec0:	e7f8      	b.n	eb4 <hal_spi_config_slave+0x3c>
	...

00000ec4 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
     ec4:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
     ec6:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
     ec8:	2501      	movs	r5, #1
     eca:	409d      	lsls	r5, r3
     ecc:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
     ed0:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
     ed4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     ed8:	2503      	movs	r5, #3
     eda:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
     ede:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
     ee0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     ee4:	2500      	movs	r5, #0
     ee6:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
     eea:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
     eec:	780c      	ldrb	r4, [r1, #0]
     eee:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
     ef2:	784c      	ldrb	r4, [r1, #1]
     ef4:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
     ef8:	7889      	ldrb	r1, [r1, #2]
     efa:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
     efe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     f02:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
     f06:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
     f0a:	4919      	ldr	r1, [pc, #100]	; (f70 <hal_spi_init_master+0xac>)
     f0c:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     f0e:	3310      	adds	r3, #16
     f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
     f14:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
     f18:	42ab      	cmp	r3, r5
     f1a:	db22      	blt.n	f62 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     f1c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
     f20:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
     f24:	22e0      	movs	r2, #224	; 0xe0
     f26:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
     f2a:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
     f2e:	2b00      	cmp	r3, #0
     f30:	db08      	blt.n	f44 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f32:	f003 011f 	and.w	r1, r3, #31
     f36:	095b      	lsrs	r3, r3, #5
     f38:	2201      	movs	r2, #1
     f3a:	408a      	lsls	r2, r1
     f3c:	3360      	adds	r3, #96	; 0x60
     f3e:	490d      	ldr	r1, [pc, #52]	; (f74 <hal_spi_init_master+0xb0>)
     f40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
     f44:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
     f48:	2b00      	cmp	r3, #0
     f4a:	db07      	blt.n	f5c <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f4c:	f003 011f 	and.w	r1, r3, #31
     f50:	095b      	lsrs	r3, r3, #5
     f52:	2201      	movs	r2, #1
     f54:	408a      	lsls	r2, r1
     f56:	4907      	ldr	r1, [pc, #28]	; (f74 <hal_spi_init_master+0xb0>)
     f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
     f5c:	2000      	movs	r0, #0
     f5e:	bc30      	pop	{r4, r5}
     f60:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     f62:	f003 030f 	and.w	r3, r3, #15
     f66:	4a04      	ldr	r2, [pc, #16]	; (f78 <hal_spi_init_master+0xb4>)
     f68:	441a      	add	r2, r3
     f6a:	23e0      	movs	r3, #224	; 0xe0
     f6c:	7613      	strb	r3, [r2, #24]
     f6e:	e7dc      	b.n	f2a <hal_spi_init_master+0x66>
     f70:	e000ed00 	.word	0xe000ed00
     f74:	e000e100 	.word	0xe000e100
     f78:	e000ecfc 	.word	0xe000ecfc

00000f7c <hal_spi_config_master>:
{
     f7c:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
     f7e:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
     f80:	680c      	ldr	r4, [r1, #0]
     f82:	684b      	ldr	r3, [r1, #4]
     f84:	6084      	str	r4, [r0, #8]
     f86:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
     f88:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
     f8c:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
     f90:	7808      	ldrb	r0, [r1, #0]
     f92:	2801      	cmp	r0, #1
     f94:	d916      	bls.n	fc4 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
     f96:	2001      	movs	r0, #1
     f98:	4098      	lsls	r0, r3
     f9a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
     f9e:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
     fa2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     fa6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
     faa:	2403      	movs	r4, #3
     fac:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
     fb0:	788b      	ldrb	r3, [r1, #2]
     fb2:	b973      	cbnz	r3, fd2 <hal_spi_config_master+0x56>
    rc = 0;
     fb4:	2000      	movs	r0, #0
    switch (settings->data_mode) {
     fb6:	780b      	ldrb	r3, [r1, #0]
     fb8:	2b03      	cmp	r3, #3
     fba:	d812      	bhi.n	fe2 <hal_spi_config_master+0x66>
     fbc:	e8df f003 	tbb	[pc, r3]
     fc0:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
     fc4:	2001      	movs	r0, #1
     fc6:	4098      	lsls	r0, r3
     fc8:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
     fcc:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
     fd0:	e7e7      	b.n	fa2 <hal_spi_config_master+0x26>
            rc = EINVAL;
     fd2:	2016      	movs	r0, #22
     fd4:	e7ef      	b.n	fb6 <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
     fd6:	2300      	movs	r3, #0
     fd8:	e007      	b.n	fea <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
     fda:	2304      	movs	r3, #4
            break;
     fdc:	e005      	b.n	fea <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
     fde:	2306      	movs	r3, #6
            break;
     fe0:	e003      	b.n	fea <hal_spi_config_master+0x6e>
            nrf_config = 0;
     fe2:	2300      	movs	r3, #0
            rc = EINVAL;
     fe4:	2016      	movs	r0, #22
            break;
     fe6:	e000      	b.n	fea <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
     fe8:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
     fea:	784c      	ldrb	r4, [r1, #1]
     fec:	2c01      	cmp	r4, #1
     fee:	d010      	beq.n	1012 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
     ff0:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
     ff4:	684b      	ldr	r3, [r1, #4]
     ff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     ffa:	d022      	beq.n	1042 <hal_spi_config_master+0xc6>
     ffc:	d80c      	bhi.n	1018 <hal_spi_config_master+0x9c>
     ffe:	2bfa      	cmp	r3, #250	; 0xfa
    1000:	d028      	beq.n	1054 <hal_spi_config_master+0xd8>
    1002:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    1006:	d019      	beq.n	103c <hal_spi_config_master+0xc0>
    1008:	2b7d      	cmp	r3, #125	; 0x7d
    100a:	d011      	beq.n	1030 <hal_spi_config_master+0xb4>
            frequency = 0;
    100c:	2300      	movs	r3, #0
            rc = EINVAL;
    100e:	2016      	movs	r0, #22
            break;
    1010:	e010      	b.n	1034 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
    1012:	f043 0301 	orr.w	r3, r3, #1
    1016:	e7eb      	b.n	ff0 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
    1018:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
    101c:	d014      	beq.n	1048 <hal_spi_config_master+0xcc>
    101e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
    1022:	d014      	beq.n	104e <hal_spi_config_master+0xd2>
    1024:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    1028:	d1f0      	bne.n	100c <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
    102a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
    102e:	e001      	b.n	1034 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
    1030:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
    1034:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
    1038:	bc10      	pop	{r4}
    103a:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
    103c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
    1040:	e7f8      	b.n	1034 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
    1042:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
    1046:	e7f5      	b.n	1034 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
    1048:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
    104c:	e7f2      	b.n	1034 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
    104e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
    1052:	e7ef      	b.n	1034 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
    1054:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1058:	e7ec      	b.n	1034 <hal_spi_config_master+0xb8>
	...

0000105c <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    105c:	2803      	cmp	r0, #3
    105e:	dc10      	bgt.n	1082 <hal_spi_config+0x26>
{
    1060:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1062:	4b0b      	ldr	r3, [pc, #44]	; (1090 <hal_spi_config+0x34>)
    1064:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1068:	b168      	cbz	r0, 1086 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
    106a:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
    106c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    1070:	b95b      	cbnz	r3, 108a <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    1072:	7803      	ldrb	r3, [r0, #0]
    1074:	b113      	cbz	r3, 107c <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
    1076:	f7ff feff 	bl	e78 <hal_spi_config_slave>
    }

err:
    return (rc);
}
    107a:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
    107c:	f7ff ff7e 	bl	f7c <hal_spi_config_master>
    1080:	e7fb      	b.n	107a <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1082:	2016      	movs	r0, #22
}
    1084:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1086:	2016      	movs	r0, #22
    1088:	e7f7      	b.n	107a <hal_spi_config+0x1e>
        return -1;
    108a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    108e:	e7f4      	b.n	107a <hal_spi_config+0x1e>
    1090:	000055e0 	.word	0x000055e0

00001094 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1094:	2803      	cmp	r0, #3
    1096:	dc1b      	bgt.n	10d0 <hal_spi_enable+0x3c>
    1098:	4b10      	ldr	r3, [pc, #64]	; (10dc <hal_spi_enable+0x48>)
    109a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    109e:	b1cb      	cbz	r3, 10d4 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    10a0:	781a      	ldrb	r2, [r3, #0]
    10a2:	b17a      	cbz	r2, 10c4 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
    10a4:	6a1a      	ldr	r2, [r3, #32]
    10a6:	b1ba      	cbz	r2, 10d8 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
    10a8:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
    10aa:	2000      	movs	r0, #0
    10ac:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
    10b0:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
    10b4:	f240 4202 	movw	r2, #1026	; 0x402
    10b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
    10bc:	2202      	movs	r2, #2
    10be:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    10c2:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
    10c4:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    10c6:	2201      	movs	r2, #1
    10c8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
    10cc:	2000      	movs	r0, #0
    10ce:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    10d0:	2016      	movs	r0, #22
    10d2:	4770      	bx	lr
    10d4:	2016      	movs	r0, #22
    10d6:	4770      	bx	lr
            rc = EINVAL;
    10d8:	2016      	movs	r0, #22

err:
    return rc;
}
    10da:	4770      	bx	lr
    10dc:	000055e0 	.word	0x000055e0

000010e0 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    10e0:	2803      	cmp	r0, #3
    10e2:	dc2a      	bgt.n	113a <hal_spi_disable+0x5a>
{
    10e4:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    10e6:	4b17      	ldr	r3, [pc, #92]	; (1144 <hal_spi_disable+0x64>)
    10e8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    10ec:	b33c      	cbz	r4, 113e <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    10ee:	7823      	ldrb	r3, [r4, #0]
    10f0:	b9ab      	cbnz	r3, 111e <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
    10f2:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    10f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    10f8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
    10fc:	7863      	ldrb	r3, [r4, #1]
    10fe:	b943      	cbnz	r3, 1112 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
    1100:	2300      	movs	r3, #0
    1102:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
    1106:	2000      	movs	r0, #0
    1108:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
    110a:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
    110c:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
    110e:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
    1110:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
    1112:	4628      	mov	r0, r5
    1114:	f7ff fea6 	bl	e64 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
    1118:	2300      	movs	r3, #0
    111a:	7063      	strb	r3, [r4, #1]
    111c:	e7f0      	b.n	1100 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
    111e:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    1120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1124:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
    1128:	2300      	movs	r3, #0
    112a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
    112e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
    1132:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    1136:	70e3      	strb	r3, [r4, #3]
    1138:	e7e5      	b.n	1106 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    113a:	2016      	movs	r0, #22
}
    113c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    113e:	2016      	movs	r0, #22
    return rc;
    1140:	e7e6      	b.n	1110 <hal_spi_disable+0x30>
    1142:	bf00      	nop
    1144:	000055e0 	.word	0x000055e0

00001148 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1148:	2803      	cmp	r0, #3
    114a:	dc21      	bgt.n	1190 <hal_spi_init+0x48>
{
    114c:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    114e:	4b15      	ldr	r3, [pc, #84]	; (11a4 <hal_spi_init+0x5c>)
    1150:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1154:	b1f4      	cbz	r4, 1194 <hal_spi_init+0x4c>
    if (cfg == NULL) {
    1156:	b1f9      	cbz	r1, 1198 <hal_spi_init+0x50>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
    1158:	2a01      	cmp	r2, #1
    115a:	d81f      	bhi.n	119c <hal_spi_init+0x54>
    spi->spi_type = spi_type;
    115c:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
    115e:	b9f8      	cbnz	r0, 11a0 <hal_spi_init+0x58>
    1160:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
    1162:	2303      	movs	r3, #3
    1164:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
    1166:	b94a      	cbnz	r2, 117c <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
    1168:	4b0f      	ldr	r3, [pc, #60]	; (11a8 <hal_spi_init+0x60>)
    116a:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
    116c:	f7ff ffb8 	bl	10e0 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
    1170:	4a0e      	ldr	r2, [pc, #56]	; (11ac <hal_spi_init+0x64>)
    1172:	4629      	mov	r1, r5
    1174:	4620      	mov	r0, r4
    1176:	f7ff fea5 	bl	ec4 <hal_spi_init_master>
    117a:	e010      	b.n	119e <hal_spi_init+0x56>
            assert(0);
    117c:	f7fe fff2 	bl	164 <hal_debugger_connected>
    1180:	b100      	cbz	r0, 1184 <hal_spi_init+0x3c>
    1182:	be01      	bkpt	0x0001
    1184:	2300      	movs	r3, #0
    1186:	461a      	mov	r2, r3
    1188:	4619      	mov	r1, r3
    118a:	4618      	mov	r0, r3
    118c:	f000 fb0e 	bl	17ac <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1190:	2016      	movs	r0, #22
}
    1192:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1194:	2016      	movs	r0, #22
    1196:	e002      	b.n	119e <hal_spi_init+0x56>
    rc = EINVAL;
    1198:	2016      	movs	r0, #22
    119a:	e000      	b.n	119e <hal_spi_init+0x56>
    119c:	2016      	movs	r0, #22
}
    119e:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
    11a0:	2016      	movs	r0, #22
    return (rc);
    11a2:	e7fc      	b.n	119e <hal_spi_init+0x56>
    11a4:	000055e0 	.word	0x000055e0
    11a8:	40003000 	.word	0x40003000
    11ac:	00000e4d 	.word	0x00000e4d

000011b0 <hal_spi_tx_val>:
    int rc;
    uint16_t retval;
    NRF_SPI_Type *spi;
    struct nrf52_hal_spi *hal_spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
    11b0:	2803      	cmp	r0, #3
    11b2:	dc17      	bgt.n	11e4 <hal_spi_tx_val+0x34>
    11b4:	4b0f      	ldr	r3, [pc, #60]	; (11f4 <hal_spi_tx_val+0x44>)
    11b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    11ba:	b1ab      	cbz	r3, 11e8 <hal_spi_tx_val+0x38>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    11bc:	781a      	ldrb	r2, [r3, #0]
    11be:	b9aa      	cbnz	r2, 11ec <hal_spi_tx_val+0x3c>
        spi = (NRF_SPI_Type *)hal_spi->nhs_spi.spim;
    11c0:	691a      	ldr	r2, [r3, #16]
        spi->EVENTS_READY = 0;
    11c2:	2300      	movs	r3, #0
    11c4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        spi->TXD = (uint8_t)val;
    11c8:	b2c9      	uxtb	r1, r1
    11ca:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
        while (!spi->EVENTS_READY) {}
    11ce:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    11d2:	2b00      	cmp	r3, #0
    11d4:	d0fb      	beq.n	11ce <hal_spi_tx_val+0x1e>
        spi->EVENTS_READY = 0;
    11d6:	2300      	movs	r3, #0
    11d8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        retval = (uint16_t)spi->RXD;
    11dc:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    11e0:	b280      	uxth	r0, r0
    11e2:	4770      	bx	lr
    }

    return retval;

err:
    return rc;
    11e4:	2016      	movs	r0, #22
    11e6:	4770      	bx	lr
    11e8:	2016      	movs	r0, #22
    11ea:	4770      	bx	lr
        retval = 0xFFFF;
    11ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    11f0:	4770      	bx	lr
    11f2:	bf00      	nop
    11f4:	000055e0 	.word	0x000055e0

000011f8 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    11f8:	2803      	cmp	r0, #3
    11fa:	dc0a      	bgt.n	1212 <hal_spi_set_txrx_cb+0x1a>
    11fc:	4b08      	ldr	r3, [pc, #32]	; (1220 <hal_spi_set_txrx_cb+0x28>)
    11fe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1202:	b143      	cbz	r3, 1216 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
    1204:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
    1206:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
    120a:	b930      	cbnz	r0, 121a <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
    120c:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
    120e:	625a      	str	r2, [r3, #36]	; 0x24
    1210:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1212:	2016      	movs	r0, #22
    1214:	4770      	bx	lr
    1216:	2016      	movs	r0, #22
    1218:	4770      	bx	lr
        rc = -1;
    121a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
    121e:	4770      	bx	lr
    1220:	000055e0 	.word	0x000055e0

00001224 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
    1224:	2b00      	cmp	r3, #0
    1226:	d046      	beq.n	12b6 <hal_spi_txrx+0x92>
{
    1228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    122a:	460d      	mov	r5, r1
    122c:	4617      	mov	r7, r2
    122e:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
    1230:	2803      	cmp	r0, #3
    1232:	dc42      	bgt.n	12ba <hal_spi_txrx+0x96>
    1234:	4b25      	ldr	r3, [pc, #148]	; (12cc <hal_spi_txrx+0xa8>)
    1236:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    123a:	2b00      	cmp	r3, #0
    123c:	d03f      	beq.n	12be <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    123e:	781a      	ldrb	r2, [r3, #0]
    1240:	2a00      	cmp	r2, #0
    1242:	d13e      	bne.n	12c2 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
    1244:	2900      	cmp	r1, #0
    1246:	d03e      	beq.n	12c6 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
    1248:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
    124a:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
    124e:	2b07      	cmp	r3, #7
    1250:	d004      	beq.n	125c <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
    1252:	b95b      	cbnz	r3, 126c <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    1254:	2301      	movs	r3, #1
    1256:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    125a:	e007      	b.n	126c <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
    125c:	f7ff ff40 	bl	10e0 <hal_spi_disable>
    1260:	e7f8      	b.n	1254 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
    1262:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
    1266:	2300      	movs	r3, #0
    1268:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
    126c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    1270:	2b00      	cmp	r3, #0
    1272:	d1f6      	bne.n	1262 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
    1274:	782b      	ldrb	r3, [r5, #0]
    1276:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
    127a:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
    127c:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
    127e:	2200      	movs	r2, #0
    1280:	e00d      	b.n	129e <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
    1282:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    1286:	2b00      	cmp	r3, #0
    1288:	d0fb      	beq.n	1282 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
    128a:	2300      	movs	r3, #0
    128c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
    1290:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    1294:	b2db      	uxtb	r3, r3
            if (rxbuf) {
    1296:	b10f      	cbz	r7, 129c <hal_spi_txrx+0x78>
                *rxd = rxval;
    1298:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
    129c:	3201      	adds	r2, #1
    129e:	42b2      	cmp	r2, r6
    12a0:	da07      	bge.n	12b2 <hal_spi_txrx+0x8e>
            if (txcnt) {
    12a2:	2900      	cmp	r1, #0
    12a4:	d0ed      	beq.n	1282 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
    12a6:	786b      	ldrb	r3, [r5, #1]
    12a8:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
    12ac:	3901      	subs	r1, #1
                ++txd;
    12ae:	3501      	adds	r5, #1
    12b0:	e7e7      	b.n	1282 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
    12b2:	2000      	movs	r0, #0
    }

err:
    return rc;
}
    12b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
    12b6:	2016      	movs	r0, #22
}
    12b8:	4770      	bx	lr
    return rc;
    12ba:	2016      	movs	r0, #22
    12bc:	e7fa      	b.n	12b4 <hal_spi_txrx+0x90>
    12be:	2016      	movs	r0, #22
    12c0:	e7f8      	b.n	12b4 <hal_spi_txrx+0x90>
    12c2:	2016      	movs	r0, #22
    12c4:	e7f6      	b.n	12b4 <hal_spi_txrx+0x90>
    12c6:	2016      	movs	r0, #22
    12c8:	e7f4      	b.n	12b4 <hal_spi_txrx+0x90>
    12ca:	bf00      	nop
    12cc:	000055e0 	.word	0x000055e0

000012d0 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
    12d0:	b508      	push	{r3, lr}
    assert(0);
    12d2:	f7fe ff47 	bl	164 <hal_debugger_connected>
    12d6:	b100      	cbz	r0, 12da <nrf52_hal_wdt_default_handler+0xa>
    12d8:	be01      	bkpt	0x0001
    12da:	2300      	movs	r3, #0
    12dc:	461a      	mov	r2, r3
    12de:	4619      	mov	r1, r3
    12e0:	4618      	mov	r0, r3
    12e2:	f000 fa63 	bl	17ac <__assert_func>
	...

000012e8 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
    12e8:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
    12ea:	4b06      	ldr	r3, [pc, #24]	; (1304 <nrf52_wdt_irq_handler+0x1c>)
    12ec:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    12f0:	f013 0f01 	tst.w	r3, #1
    12f4:	d100      	bne.n	12f8 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
    12f6:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
    12f8:	4b02      	ldr	r3, [pc, #8]	; (1304 <nrf52_wdt_irq_handler+0x1c>)
    12fa:	2200      	movs	r2, #0
    12fc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
    1300:	f7ff ffe6 	bl	12d0 <nrf52_hal_wdt_default_handler>
    1304:	40010000 	.word	0x40010000

00001308 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
    1308:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
    130a:	4b19      	ldr	r3, [pc, #100]	; (1370 <hal_watchdog_init+0x68>)
    130c:	2201      	movs	r2, #1
    130e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
    1312:	4b18      	ldr	r3, [pc, #96]	; (1374 <hal_watchdog_init+0x6c>)
    1314:	4298      	cmp	r0, r3
    1316:	d821      	bhi.n	135c <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
    1318:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    131c:	0153      	lsls	r3, r2, #5
    131e:	4a16      	ldr	r2, [pc, #88]	; (1378 <hal_watchdog_init+0x70>)
    1320:	fba2 2303 	umull	r2, r3, r2, r3
    1324:	08db      	lsrs	r3, r3, #3
    1326:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    132a:	4b11      	ldr	r3, [pc, #68]	; (1370 <hal_watchdog_init+0x68>)
    132c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
    1330:	4a12      	ldr	r2, [pc, #72]	; (137c <hal_watchdog_init+0x74>)
    1332:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    1334:	4912      	ldr	r1, [pc, #72]	; (1380 <hal_watchdog_init+0x78>)
    1336:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    133a:	4a12      	ldr	r2, [pc, #72]	; (1384 <hal_watchdog_init+0x7c>)
    133c:	21e0      	movs	r1, #224	; 0xe0
    133e:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1342:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    1346:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    134a:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
    134c:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    1350:	f042 0201 	orr.w	r2, r2, #1
    1354:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
    1358:	2000      	movs	r0, #0
    135a:	bd08      	pop	{r3, pc}
        assert(0);
    135c:	f7fe ff02 	bl	164 <hal_debugger_connected>
    1360:	b100      	cbz	r0, 1364 <hal_watchdog_init+0x5c>
    1362:	be01      	bkpt	0x0001
    1364:	2300      	movs	r3, #0
    1366:	461a      	mov	r2, r3
    1368:	4619      	mov	r1, r3
    136a:	4618      	mov	r0, r3
    136c:	f000 fa1e 	bl	17ac <__assert_func>
    1370:	40010000 	.word	0x40010000
    1374:	02aaaaaa 	.word	0x02aaaaaa
    1378:	10624dd3 	.word	0x10624dd3
    137c:	e000ed00 	.word	0xe000ed00
    1380:	000012e9 	.word	0x000012e9
    1384:	e000e100 	.word	0xe000e100

00001388 <nrf52_periph_create_timers>:
static struct temperature_dev os_bsp_temp;
#endif

static void
nrf52_periph_create_timers(void)
{
    1388:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
    138a:	2100      	movs	r1, #0
    138c:	4608      	mov	r0, r1
    138e:	f000 f945 	bl	161c <hal_timer_init>
    assert(rc == 0);
    1392:	b920      	cbnz	r0, 139e <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
    1394:	480c      	ldr	r0, [pc, #48]	; (13c8 <nrf52_periph_create_timers+0x40>)
    1396:	f000 fa77 	bl	1888 <os_cputime_init>
    assert(rc == 0);
    139a:	b950      	cbnz	r0, 13b2 <nrf52_periph_create_timers+0x2a>
#endif
}
    139c:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    139e:	f7fe fee1 	bl	164 <hal_debugger_connected>
    13a2:	b100      	cbz	r0, 13a6 <nrf52_periph_create_timers+0x1e>
    13a4:	be01      	bkpt	0x0001
    13a6:	2300      	movs	r3, #0
    13a8:	461a      	mov	r2, r3
    13aa:	4619      	mov	r1, r3
    13ac:	4618      	mov	r0, r3
    13ae:	f000 f9fd 	bl	17ac <__assert_func>
    assert(rc == 0);
    13b2:	f7fe fed7 	bl	164 <hal_debugger_connected>
    13b6:	b100      	cbz	r0, 13ba <nrf52_periph_create_timers+0x32>
    13b8:	be01      	bkpt	0x0001
    13ba:	2300      	movs	r3, #0
    13bc:	461a      	mov	r2, r3
    13be:	4619      	mov	r1, r3
    13c0:	4618      	mov	r0, r3
    13c2:	f000 f9f3 	bl	17ac <__assert_func>
    13c6:	bf00      	nop
    13c8:	000f4240 	.word	0x000f4240

000013cc <nrf52_periph_create_spi>:
#endif
}

static void
nrf52_periph_create_spi(void)
{
    13cc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
    13ce:	2200      	movs	r2, #0
    13d0:	4907      	ldr	r1, [pc, #28]	; (13f0 <nrf52_periph_create_spi+0x24>)
    13d2:	4610      	mov	r0, r2
    13d4:	f7ff feb8 	bl	1148 <hal_spi_init>
    assert(rc == 0);
    13d8:	b900      	cbnz	r0, 13dc <nrf52_periph_create_spi+0x10>
#else
    rc = hal_spi_init(3, (void *)&os_bsp_spi3m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
#endif
}
    13da:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    13dc:	f7fe fec2 	bl	164 <hal_debugger_connected>
    13e0:	b100      	cbz	r0, 13e4 <nrf52_periph_create_spi+0x18>
    13e2:	be01      	bkpt	0x0001
    13e4:	2300      	movs	r3, #0
    13e6:	461a      	mov	r2, r3
    13e8:	4619      	mov	r1, r3
    13ea:	4618      	mov	r0, r3
    13ec:	f000 f9de 	bl	17ac <__assert_func>
    13f0:	000055f0 	.word	0x000055f0

000013f4 <nrf52_periph_create>:
#endif
}

void
nrf52_periph_create(void)
{
    13f4:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
    13f6:	f7ff ffc7 	bl	1388 <nrf52_periph_create_timers>
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
    13fa:	f7ff ffe7 	bl	13cc <nrf52_periph_create_spi>
    nrf52_periph_create_temp();
}
    13fe:	bd08      	pop	{r3, pc}

00001400 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    1400:	2301      	movs	r3, #1
    1402:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    1404:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
    1408:	4770      	bx	lr
	...

0000140c <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
    140c:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
    140e:	7883      	ldrb	r3, [r0, #2]
    1410:	2b00      	cmp	r3, #0
    1412:	d050      	beq.n	14b6 <nrf_timer_set_ocmp+0xaa>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
    1414:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    1416:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    141a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
    141e:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
    1420:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
    1424:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
    1428:	b11d      	cbz	r5, 1432 <nrf_timer_set_ocmp+0x26>
            temp += (1UL << 24);
    142a:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
    142e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
    1432:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
    1434:	1acb      	subs	r3, r1, r3
         * to be handled differently. TICK event is used to have interrupt on
         * each subsequent tick so we won't miss any and in case we detected
         * mentioned extra tick during calculations, interrupt is triggered
         * immediately. Delta 0 or less means we should always fire immediately.
         */
        if (delta_t < 1) {
    1436:	2b00      	cmp	r3, #0
    1438:	dd17      	ble.n	146a <nrf_timer_set_ocmp+0x5e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        } else if (delta_t < 3) {
    143a:	2b02      	cmp	r3, #2
    143c:	dc27      	bgt.n	148e <nrf_timer_set_ocmp+0x82>
            rtctimer->INTENSET = RTC_INTENSET_TICK_Msk;
    143e:	2301      	movs	r3, #1
    1440:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
            if (rtctimer->COUNTER != cntr) {
    1444:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    1448:	42a3      	cmp	r3, r4
    144a:	d02e      	beq.n	14aa <nrf_timer_set_ocmp+0x9e>
                NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    144c:	7842      	ldrb	r2, [r0, #1]
    144e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1450:	2b00      	cmp	r3, #0
    1452:	db2a      	blt.n	14aa <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1454:	f002 021f 	and.w	r2, r2, #31
    1458:	095b      	lsrs	r3, r3, #5
    145a:	2101      	movs	r1, #1
    145c:	fa01 f202 	lsl.w	r2, r1, r2
    1460:	3340      	adds	r3, #64	; 0x40
    1462:	4926      	ldr	r1, [pc, #152]	; (14fc <nrf_timer_set_ocmp+0xf0>)
    1464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    1468:	e01f      	b.n	14aa <nrf_timer_set_ocmp+0x9e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
    146a:	2301      	movs	r3, #1
    146c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    1470:	7842      	ldrb	r2, [r0, #1]
    1472:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1474:	2b00      	cmp	r3, #0
    1476:	db18      	blt.n	14aa <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1478:	f002 021f 	and.w	r2, r2, #31
    147c:	095b      	lsrs	r3, r3, #5
    147e:	2101      	movs	r1, #1
    1480:	fa01 f202 	lsl.w	r2, r1, r2
    1484:	3340      	adds	r3, #64	; 0x40
    1486:	491d      	ldr	r1, [pc, #116]	; (14fc <nrf_timer_set_ocmp+0xf0>)
    1488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    148c:	e00d      	b.n	14aa <nrf_timer_set_ocmp+0x9e>
            }
        } else {
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
    148e:	2001      	movs	r0, #1
    1490:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308

            if (delta_t < (1UL << 24)) {
    1494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    1498:	d208      	bcs.n	14ac <nrf_timer_set_ocmp+0xa0>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
    149a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    149e:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    14a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    14a6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
    14aa:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
    14ac:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
    14b0:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
    14b4:	e7f5      	b.n	14a2 <nrf_timer_set_ocmp+0x96>
    14b6:	460d      	mov	r5, r1
    14b8:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
    14ba:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    14bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    14c0:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
    14c4:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    14c8:	2200      	movs	r2, #0
    14ca:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    14ce:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
    14d2:	f7ff ff95 	bl	1400 <nrf_read_timer_cntr>
    14d6:	1b40      	subs	r0, r0, r5
    14d8:	2800      	cmp	r0, #0
    14da:	dbe6      	blt.n	14aa <nrf_timer_set_ocmp+0x9e>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    14dc:	7862      	ldrb	r2, [r4, #1]
    14de:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    14e0:	2b00      	cmp	r3, #0
    14e2:	dbe2      	blt.n	14aa <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14e4:	f002 021f 	and.w	r2, r2, #31
    14e8:	095b      	lsrs	r3, r3, #5
    14ea:	2101      	movs	r1, #1
    14ec:	fa01 f202 	lsl.w	r2, r1, r2
    14f0:	3340      	adds	r3, #64	; 0x40
    14f2:	4902      	ldr	r1, [pc, #8]	; (14fc <nrf_timer_set_ocmp+0xf0>)
    14f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    14f8:	e7d7      	b.n	14aa <nrf_timer_set_ocmp+0x9e>
    14fa:	bf00      	nop
    14fc:	e000e100 	.word	0xe000e100

00001500 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    1500:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    1504:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
    1508:	4770      	bx	lr

0000150a <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    150a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    150e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
    1512:	2301      	movs	r3, #1
    1514:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
    1518:	4770      	bx	lr
	...

0000151c <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
    151c:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
    151e:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1520:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    1524:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
    1526:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
    1528:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
    152c:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
    1530:	b1ad      	cbz	r5, 155e <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
    1532:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
    1536:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
    1538:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
    153c:	2500      	movs	r5, #0
    153e:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    1542:	7840      	ldrb	r0, [r0, #1]
    1544:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
    1546:	42aa      	cmp	r2, r5
    1548:	db09      	blt.n	155e <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    154a:	f000 001f 	and.w	r0, r0, #31
    154e:	0952      	lsrs	r2, r2, #5
    1550:	2501      	movs	r5, #1
    1552:	fa05 f000 	lsl.w	r0, r5, r0
    1556:	3240      	adds	r2, #64	; 0x40
    1558:	4d04      	ldr	r5, [pc, #16]	; (156c <hal_timer_read_bsptimer+0x50>)
    155a:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
    155e:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
    1562:	b904      	cbnz	r4, 1566 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
    1564:	b662      	cpsie	i

    return tcntr;
}
    1566:	bc30      	pop	{r4, r5}
    1568:	4770      	bx	lr
    156a:	bf00      	nop
    156c:	e000e100 	.word	0xe000e100

00001570 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
    1570:	b570      	push	{r4, r5, r6, lr}
    1572:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1574:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    1578:	b672      	cpsid	i
    157a:	e012      	b.n	15a2 <hal_timer_chk_queue+0x32>
    __HAL_DISABLE_INTERRUPTS(ctx);
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
        if (bsptimer->tmr_rtc) {
            tcntr = hal_timer_read_bsptimer(bsptimer);
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    157c:	6928      	ldr	r0, [r5, #16]
    157e:	f7ff ff3f 	bl	1400 <nrf_read_timer_cntr>
        }
        if ((int32_t)(tcntr - timer->expiry) >= 0) {
    1582:	68e3      	ldr	r3, [r4, #12]
    1584:	1ac0      	subs	r0, r0, r3
    1586:	2800      	cmp	r0, #0
    1588:	db17      	blt.n	15ba <hal_timer_chk_queue+0x4a>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    158a:	6923      	ldr	r3, [r4, #16]
    158c:	b193      	cbz	r3, 15b4 <hal_timer_chk_queue+0x44>
    158e:	6962      	ldr	r2, [r4, #20]
    1590:	615a      	str	r2, [r3, #20]
    1592:	6963      	ldr	r3, [r4, #20]
    1594:	6922      	ldr	r2, [r4, #16]
    1596:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
    1598:	2300      	movs	r3, #0
    159a:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
    159c:	6863      	ldr	r3, [r4, #4]
    159e:	68a0      	ldr	r0, [r4, #8]
    15a0:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
    15a2:	696c      	ldr	r4, [r5, #20]
    15a4:	b14c      	cbz	r4, 15ba <hal_timer_chk_queue+0x4a>
        if (bsptimer->tmr_rtc) {
    15a6:	78ab      	ldrb	r3, [r5, #2]
    15a8:	2b00      	cmp	r3, #0
    15aa:	d0e7      	beq.n	157c <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
    15ac:	4628      	mov	r0, r5
    15ae:	f7ff ffb5 	bl	151c <hal_timer_read_bsptimer>
    15b2:	e7e6      	b.n	1582 <hal_timer_chk_queue+0x12>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    15b4:	6963      	ldr	r3, [r4, #20]
    15b6:	61ab      	str	r3, [r5, #24]
    15b8:	e7eb      	b.n	1592 <hal_timer_chk_queue+0x22>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
    15ba:	696b      	ldr	r3, [r5, #20]
    if (timer) {
    15bc:	b133      	cbz	r3, 15cc <hal_timer_chk_queue+0x5c>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    15be:	68d9      	ldr	r1, [r3, #12]
    15c0:	4628      	mov	r0, r5
    15c2:	f7ff ff23 	bl	140c <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
    15c6:	b906      	cbnz	r6, 15ca <hal_timer_chk_queue+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
    15c8:	b662      	cpsie	i
}
    15ca:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
    15cc:	78ab      	ldrb	r3, [r5, #2]
    15ce:	b11b      	cbz	r3, 15d8 <hal_timer_chk_queue+0x68>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
    15d0:	6928      	ldr	r0, [r5, #16]
    15d2:	f7ff ff9a 	bl	150a <nrf_rtc_disable_ocmp>
    15d6:	e7f6      	b.n	15c6 <hal_timer_chk_queue+0x56>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
    15d8:	6928      	ldr	r0, [r5, #16]
    15da:	f7ff ff91 	bl	1500 <nrf_timer_disable_ocmp>
    15de:	e7f2      	b.n	15c6 <hal_timer_chk_queue+0x56>

000015e0 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
    15e0:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
    15e2:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    15e4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
    15e8:	b113      	cbz	r3, 15f0 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    15ea:	2300      	movs	r3, #0
    15ec:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
    15f0:	6883      	ldr	r3, [r0, #8]
    15f2:	3301      	adds	r3, #1
    15f4:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
    15f6:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
    15fa:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    15fe:	d100      	bne.n	1602 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
    1600:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
    1602:	f7ff ffb5 	bl	1570 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    1606:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
    160a:	e7f9      	b.n	1600 <hal_timer_irq_handler+0x20>

0000160c <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
    160c:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
    160e:	4802      	ldr	r0, [pc, #8]	; (1618 <nrf52_timer0_irq_handler+0xc>)
    1610:	f7ff ffe6 	bl	15e0 <hal_timer_irq_handler>
}
    1614:	bd08      	pop	{r3, pc}
    1616:	bf00      	nop
    1618:	20000188 	.word	0x20000188

0000161c <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    161c:	2805      	cmp	r0, #5
    161e:	dc1c      	bgt.n	165a <hal_timer_init+0x3e>
    1620:	4b12      	ldr	r3, [pc, #72]	; (166c <hal_timer_init+0x50>)
    1622:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1626:	b1d3      	cbz	r3, 165e <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
    1628:	781a      	ldrb	r2, [r3, #0]
    162a:	b9d2      	cbnz	r2, 1662 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
    162c:	b9d8      	cbnz	r0, 1666 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
    162e:	4a10      	ldr	r2, [pc, #64]	; (1670 <hal_timer_init+0x54>)
    1630:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
    1632:	2208      	movs	r2, #8
    1634:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1636:	4b0f      	ldr	r3, [pc, #60]	; (1674 <hal_timer_init+0x58>)
    1638:	f44f 7280 	mov.w	r2, #256	; 0x100
    163c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1640:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1644:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1648:	22e0      	movs	r2, #224	; 0xe0
    164a:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
    164e:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
    1652:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    1654:	4a08      	ldr	r2, [pc, #32]	; (1678 <hal_timer_init+0x5c>)
    1656:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
    1658:	4770      	bx	lr

err:
    return rc;
    165a:	2016      	movs	r0, #22
    165c:	4770      	bx	lr
    165e:	2016      	movs	r0, #22
    1660:	4770      	bx	lr
    1662:	2016      	movs	r0, #22
    1664:	4770      	bx	lr
    1666:	2016      	movs	r0, #22
}
    1668:	4770      	bx	lr
    166a:	bf00      	nop
    166c:	000055f4 	.word	0x000055f4
    1670:	40008000 	.word	0x40008000
    1674:	e000e100 	.word	0xe000e100
    1678:	0000160d 	.word	0x0000160d

0000167c <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    167c:	2805      	cmp	r0, #5
    167e:	dc65      	bgt.n	174c <hal_timer_config+0xd0>
    1680:	4b39      	ldr	r3, [pc, #228]	; (1768 <hal_timer_config+0xec>)
    1682:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1686:	2800      	cmp	r0, #0
    1688:	d062      	beq.n	1750 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
    168a:	4b38      	ldr	r3, [pc, #224]	; (176c <hal_timer_config+0xf0>)
    168c:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    1690:	7803      	ldrb	r3, [r0, #0]
    1692:	2b00      	cmp	r3, #0
    1694:	d15e      	bne.n	1754 <hal_timer_config+0xd8>
    1696:	2900      	cmp	r1, #0
    1698:	d05e      	beq.n	1758 <hal_timer_config+0xdc>
    169a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    169e:	d85d      	bhi.n	175c <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
    16a0:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    16a2:	2a00      	cmp	r2, #0
    16a4:	d05c      	beq.n	1760 <hal_timer_config+0xe4>
{
    16a6:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
    16a8:	2901      	cmp	r1, #1
    16aa:	d013      	beq.n	16d4 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    16ac:	2301      	movs	r3, #1
    16ae:	2b09      	cmp	r3, #9
    16b0:	d810      	bhi.n	16d4 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
    16b2:	2201      	movs	r2, #1
    16b4:	409a      	lsls	r2, r3
    16b6:	428a      	cmp	r2, r1
    16b8:	d202      	bcs.n	16c0 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    16ba:	3301      	adds	r3, #1
    16bc:	b2db      	uxtb	r3, r3
    16be:	e7f6      	b.n	16ae <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
    16c0:	1e5c      	subs	r4, r3, #1
    16c2:	2501      	movs	r5, #1
    16c4:	fa05 f404 	lsl.w	r4, r5, r4
    16c8:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
    16ca:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
    16cc:	428c      	cmp	r4, r1
    16ce:	d201      	bcs.n	16d4 <hal_timer_config+0x58>
                    prescaler -= 1;
    16d0:	3b01      	subs	r3, #1
    16d2:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
    16d4:	4a25      	ldr	r2, [pc, #148]	; (176c <hal_timer_config+0xf0>)
    16d6:	411a      	asrs	r2, r3
    16d8:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
    16da:	2201      	movs	r2, #1
    16dc:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    16de:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    16e2:	b672      	cpsid	i
    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

#if MYNEWT_VAL_CHOICE(MCU_HFCLK_SOURCE, HFXO)
    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
    16e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    16e8:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
    16ec:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
    16f0:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
    16f4:	d00c      	beq.n	1710 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    16f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    16fa:	2100      	movs	r1, #0
    16fc:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1700:	2101      	movs	r1, #1
    1702:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
    1704:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1708:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
    170c:	2a00      	cmp	r2, #0
    170e:	d0f9      	beq.n	1704 <hal_timer_config+0x88>
                break;
            }
        }
    }
#endif
    hwtimer = bsptimer->tmr_reg;
    1710:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
    1712:	2101      	movs	r1, #1
    1714:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
    1716:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
    1718:	2500      	movs	r5, #0
    171a:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
    171e:	2503      	movs	r5, #3
    1720:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
    1724:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
    1728:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
    172a:	7842      	ldrb	r2, [r0, #1]
    172c:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    172e:	2b00      	cmp	r3, #0
    1730:	db07      	blt.n	1742 <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1732:	f002 021f 	and.w	r2, r2, #31
    1736:	095b      	lsrs	r3, r3, #5
    1738:	fa01 f202 	lsl.w	r2, r1, r2
    173c:	490c      	ldr	r1, [pc, #48]	; (1770 <hal_timer_config+0xf4>)
    173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
    1742:	b97c      	cbnz	r4, 1764 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
    1744:	b662      	cpsie	i

    return 0;
    1746:	2000      	movs	r0, #0

err:
    return rc;
}
    1748:	bc30      	pop	{r4, r5}
    174a:	4770      	bx	lr
    return rc;
    174c:	2016      	movs	r0, #22
    174e:	4770      	bx	lr
    1750:	2016      	movs	r0, #22
    1752:	4770      	bx	lr
    1754:	2016      	movs	r0, #22
    1756:	4770      	bx	lr
    1758:	2016      	movs	r0, #22
    175a:	4770      	bx	lr
    175c:	2016      	movs	r0, #22
    175e:	4770      	bx	lr
    1760:	2016      	movs	r0, #22
}
    1762:	4770      	bx	lr
    return 0;
    1764:	2000      	movs	r0, #0
    1766:	e7ef      	b.n	1748 <hal_timer_config+0xcc>
    1768:	000055f4 	.word	0x000055f4
    176c:	00f42400 	.word	0x00f42400
    1770:	e000e100 	.word	0xe000e100

00001774 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
    1774:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    1776:	2805      	cmp	r0, #5
    1778:	dc0c      	bgt.n	1794 <hal_timer_read+0x20>
    177a:	4b0b      	ldr	r3, [pc, #44]	; (17a8 <hal_timer_read+0x34>)
    177c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1780:	b140      	cbz	r0, 1794 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
    1782:	7883      	ldrb	r3, [r0, #2]
    1784:	b91b      	cbnz	r3, 178e <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    1786:	6900      	ldr	r0, [r0, #16]
    1788:	f7ff fe3a 	bl	1400 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
    178c:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
    178e:	f7ff fec5 	bl	151c <hal_timer_read_bsptimer>
    1792:	e7fb      	b.n	178c <hal_timer_read+0x18>
    assert(0);
    1794:	f7fe fce6 	bl	164 <hal_debugger_connected>
    1798:	b100      	cbz	r0, 179c <hal_timer_read+0x28>
    179a:	be01      	bkpt	0x0001
    179c:	2300      	movs	r3, #0
    179e:	461a      	mov	r2, r3
    17a0:	4619      	mov	r1, r3
    17a2:	4618      	mov	r0, r3
    17a4:	f000 f802 	bl	17ac <__assert_func>
    17a8:	000055f4 	.word	0x000055f4

000017ac <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    17ac:	b508      	push	{r3, lr}
    17ae:	4675      	mov	r5, lr
    17b0:	4604      	mov	r4, r0
    17b2:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    17b4:	f000 f8b1 	bl	191a <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    17b8:	f000 fe7d 	bl	24b6 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    17bc:	b16c      	cbz	r4, 17da <__assert_func+0x2e>
    17be:	4633      	mov	r3, r6
    17c0:	4622      	mov	r2, r4
    17c2:	4629      	mov	r1, r5
    17c4:	4807      	ldr	r0, [pc, #28]	; (17e4 <__assert_func+0x38>)
    17c6:	f000 fe9b 	bl	2500 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    17ca:	4b07      	ldr	r3, [pc, #28]	; (17e8 <__assert_func+0x3c>)
    17cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    17d0:	605a      	str	r2, [r3, #4]
    asm("isb");
    17d2:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    17d6:	f7fe fccd 	bl	174 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    17da:	4629      	mov	r1, r5
    17dc:	4803      	ldr	r0, [pc, #12]	; (17ec <__assert_func+0x40>)
    17de:	f000 fe8f 	bl	2500 <console_printf>
    17e2:	e7f2      	b.n	17ca <__assert_func+0x1e>
    17e4:	0000561c 	.word	0x0000561c
    17e8:	e000ed00 	.word	0xe000ed00
    17ec:	0000560c 	.word	0x0000560c

000017f0 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    17f0:	b500      	push	{lr}
    17f2:	b083      	sub	sp, #12
    17f4:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    17f6:	f000 fe5e 	bl	24b6 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    17fa:	4d1b      	ldr	r5, [pc, #108]	; (1868 <os_default_irq+0x78>)
    17fc:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    17fe:	6822      	ldr	r2, [r4, #0]
    1800:	f3c1 0108 	ubfx	r1, r1, #0, #9
    1804:	4819      	ldr	r0, [pc, #100]	; (186c <os_default_irq+0x7c>)
    1806:	f000 fe7b 	bl	2500 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    180a:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    180c:	6883      	ldr	r3, [r0, #8]
    180e:	6842      	ldr	r2, [r0, #4]
    1810:	6801      	ldr	r1, [r0, #0]
    1812:	68c0      	ldr	r0, [r0, #12]
    1814:	9000      	str	r0, [sp, #0]
    1816:	4816      	ldr	r0, [pc, #88]	; (1870 <os_default_irq+0x80>)
    1818:	f000 fe72 	bl	2500 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    181c:	6923      	ldr	r3, [r4, #16]
    181e:	9300      	str	r3, [sp, #0]
    1820:	68e3      	ldr	r3, [r4, #12]
    1822:	68a2      	ldr	r2, [r4, #8]
    1824:	6861      	ldr	r1, [r4, #4]
    1826:	4813      	ldr	r0, [pc, #76]	; (1874 <os_default_irq+0x84>)
    1828:	f000 fe6a 	bl	2500 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    182c:	6a23      	ldr	r3, [r4, #32]
    182e:	9300      	str	r3, [sp, #0]
    1830:	69e3      	ldr	r3, [r4, #28]
    1832:	69a2      	ldr	r2, [r4, #24]
    1834:	6961      	ldr	r1, [r4, #20]
    1836:	4810      	ldr	r0, [pc, #64]	; (1878 <os_default_irq+0x88>)
    1838:	f000 fe62 	bl	2500 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    183c:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    183e:	6983      	ldr	r3, [r0, #24]
    1840:	6942      	ldr	r2, [r0, #20]
    1842:	6901      	ldr	r1, [r0, #16]
    1844:	69c0      	ldr	r0, [r0, #28]
    1846:	9000      	str	r0, [sp, #0]
    1848:	480c      	ldr	r0, [pc, #48]	; (187c <os_default_irq+0x8c>)
    184a:	f000 fe59 	bl	2500 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    184e:	6869      	ldr	r1, [r5, #4]
    1850:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    1852:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1854:	480a      	ldr	r0, [pc, #40]	; (1880 <os_default_irq+0x90>)
    1856:	f000 fe53 	bl	2500 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    185a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    185c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    185e:	4809      	ldr	r0, [pc, #36]	; (1884 <os_default_irq+0x94>)
    1860:	f000 fe4e 	bl	2500 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    1864:	f7fe fc86 	bl	174 <hal_system_reset>
    1868:	e000ed00 	.word	0xe000ed00
    186c:	00005634 	.word	0x00005634
    1870:	00005668 	.word	0x00005668
    1874:	0000569c 	.word	0x0000569c
    1878:	000056d0 	.word	0x000056d0
    187c:	00005704 	.word	0x00005704
    1880:	00005738 	.word	0x00005738
    1884:	00005760 	.word	0x00005760

00001888 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    1888:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    188a:	4601      	mov	r1, r0
    188c:	2000      	movs	r0, #0
    188e:	f7ff fef5 	bl	167c <hal_timer_config>
    return rc;
}
    1892:	bd08      	pop	{r3, pc}

00001894 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
    1894:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    1896:	2000      	movs	r0, #0
    1898:	f7ff ff6c 	bl	1774 <hal_timer_read>
    return cpu_time;
}
    189c:	bd08      	pop	{r3, pc}

0000189e <os_cputime_delay_ticks>:
{
    189e:	b510      	push	{r4, lr}
    18a0:	4604      	mov	r4, r0
    until = os_cputime_get32() + ticks;
    18a2:	f7ff fff7 	bl	1894 <os_cputime_get32>
    18a6:	4404      	add	r4, r0
    while ((int32_t)(os_cputime_get32() - until) < 0) {
    18a8:	f7ff fff4 	bl	1894 <os_cputime_get32>
    18ac:	1b00      	subs	r0, r0, r4
    18ae:	2800      	cmp	r0, #0
    18b0:	dbfa      	blt.n	18a8 <os_cputime_delay_ticks+0xa>
}
    18b2:	bd10      	pop	{r4, pc}

000018b4 <os_cputime_delay_usecs>:
{
    18b4:	b508      	push	{r3, lr}
    os_cputime_delay_ticks(ticks);
    18b6:	f7ff fff2 	bl	189e <os_cputime_delay_ticks>
}
    18ba:	bd08      	pop	{r3, pc}

000018bc <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    18bc:	b510      	push	{r4, lr}
    18be:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    18c0:	6903      	ldr	r3, [r0, #16]
    18c2:	6941      	ldr	r1, [r0, #20]
    18c4:	4798      	blx	r3
    if (rc != 0) {
    18c6:	4603      	mov	r3, r0
    18c8:	b128      	cbz	r0, 18d6 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    18ca:	7ee2      	ldrb	r2, [r4, #27]
    18cc:	f012 0f08 	tst.w	r2, #8
    18d0:	d105      	bne.n	18de <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    18d2:	2300      	movs	r3, #0
    18d4:	e003      	b.n	18de <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    18d6:	7ee2      	ldrb	r2, [r4, #27]
    18d8:	f042 0201 	orr.w	r2, r2, #1
    18dc:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
    18de:	4618      	mov	r0, r3
    18e0:	bd10      	pop	{r4, pc}
	...

000018e4 <os_dev_initialize_all>:
    return (rc);
}

int
os_dev_initialize_all(uint8_t stage)
{
    18e4:	b538      	push	{r3, r4, r5, lr}
    18e6:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    18e8:	4b08      	ldr	r3, [pc, #32]	; (190c <os_dev_initialize_all+0x28>)
    18ea:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    18ec:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    18ee:	e000      	b.n	18f2 <os_dev_initialize_all+0xe>
    18f0:	6a24      	ldr	r4, [r4, #32]
    18f2:	b144      	cbz	r4, 1906 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    18f4:	7e23      	ldrb	r3, [r4, #24]
    18f6:	42ab      	cmp	r3, r5
    18f8:	d1fa      	bne.n	18f0 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    18fa:	4620      	mov	r0, r4
    18fc:	f7ff ffde 	bl	18bc <os_dev_initialize>
            if (rc) {
    1900:	4602      	mov	r2, r0
    1902:	2800      	cmp	r0, #0
    1904:	d0f4      	beq.n	18f0 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    1906:	4610      	mov	r0, r2
    1908:	bd38      	pop	{r3, r4, r5, pc}
    190a:	bf00      	nop
    190c:	200001a4 	.word	0x200001a4

00001910 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    1910:	b508      	push	{r3, lr}
    os_time_advance(1);
    1912:	2001      	movs	r0, #1
    1914:	f000 f912 	bl	1b3c <os_time_advance>
}
    1918:	bd08      	pop	{r3, pc}

0000191a <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    191a:	f3ef 8010 	mrs	r0, PRIMASK

#if MCU_CRITICAL_BASEPRI
    isr_ctx = __get_BASEPRI();
    __set_BASEPRI((MCU_CRITICAL_BASEPRI) << (8 - __NVIC_PRIO_BITS));
#else
    isr_ctx = __get_PRIMASK() & 1;
    191e:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
    1922:	b672      	cpsid	i
    __disable_irq();
#endif

    return isr_ctx;
}
    1924:	4770      	bx	lr

00001926 <os_arch_restore_sr>:
os_arch_restore_sr(os_sr_t isr_ctx)
{
#if MCU_CRITICAL_BASEPRI
    __set_BASEPRI(isr_ctx);
#else
    if (!isr_ctx) {
    1926:	b900      	cbnz	r0, 192a <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    1928:	b662      	cpsie	i
        __enable_irq();
    }
#endif
}
    192a:	4770      	bx	lr

0000192c <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
    192c:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    192e:	2003      	movs	r0, #3
    1930:	f7ff ffd8 	bl	18e4 <os_dev_initialize_all>
    1934:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    1936:	b920      	cbnz	r0, 1942 <os_pkg_init+0x16>

    os_mempool_module_init();
    1938:	f000 f87e 	bl	1a38 <os_mempool_module_init>
    os_msys_init();
    193c:	f000 f8de 	bl	1afc <os_msys_init>
}
    1940:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    1942:	f7fe fc0f 	bl	164 <hal_debugger_connected>
    1946:	b100      	cbz	r0, 194a <os_pkg_init+0x1e>
    1948:	be01      	bkpt	0x0001
    194a:	2300      	movs	r3, #0
    194c:	461a      	mov	r2, r3
    194e:	4619      	mov	r1, r3
    1950:	4618      	mov	r0, r3
    1952:	f7ff ff2b 	bl	17ac <__assert_func>

00001956 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    1956:	2200      	movs	r2, #0
    1958:	6002      	str	r2, [r0, #0]
    195a:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
    195c:	4603      	mov	r3, r0
    195e:	f843 2f08 	str.w	r2, [r3, #8]!
    1962:	60c3      	str	r3, [r0, #12]
}
    1964:	4770      	bx	lr
	...

00001968 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    1968:	2800      	cmp	r0, #0
    196a:	d031      	beq.n	19d0 <os_mempool_init_internal+0x68>
{
    196c:	b430      	push	{r4, r5}
    196e:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    1970:	2a00      	cmp	r2, #0
    1972:	d02f      	beq.n	19d4 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    1974:	b1bb      	cbz	r3, 19a6 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    1976:	b113      	cbz	r3, 197e <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    1978:	f013 0f03 	tst.w	r3, #3
    197c:	d12c      	bne.n	19d8 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    197e:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    1980:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    1982:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    1984:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1988:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    198a:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    198c:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    198e:	9802      	ldr	r0, [sp, #8]
    1990:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    1992:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    1994:	b199      	cbz	r1, 19be <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    1996:	f012 0f03 	tst.w	r2, #3
    199a:	d002      	beq.n	19a2 <os_mempool_init_internal+0x3a>
    199c:	f022 0203 	bic.w	r2, r2, #3
    19a0:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    19a2:	2001      	movs	r0, #1
    19a4:	e007      	b.n	19b6 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    19a6:	2900      	cmp	r1, #0
    19a8:	d0e5      	beq.n	1976 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    19aa:	2003      	movs	r0, #3
    19ac:	e00e      	b.n	19cc <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    19ae:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    19b0:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    19b2:	3001      	adds	r0, #1
            block_addr += true_block_size;
    19b4:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    19b6:	4281      	cmp	r1, r0
    19b8:	dcf9      	bgt.n	19ae <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    19ba:	2200      	movs	r2, #0
    19bc:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    19be:	2000      	movs	r0, #0
    19c0:	6120      	str	r0, [r4, #16]
    19c2:	4b06      	ldr	r3, [pc, #24]	; (19dc <os_mempool_init_internal+0x74>)
    19c4:	685a      	ldr	r2, [r3, #4]
    19c6:	6014      	str	r4, [r2, #0]
    19c8:	3410      	adds	r4, #16
    19ca:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    19cc:	bc30      	pop	{r4, r5}
    19ce:	4770      	bx	lr
        return OS_INVALID_PARM;
    19d0:	2003      	movs	r0, #3
}
    19d2:	4770      	bx	lr
        return OS_INVALID_PARM;
    19d4:	2003      	movs	r0, #3
    19d6:	e7f9      	b.n	19cc <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    19d8:	2004      	movs	r0, #4
    19da:	e7f7      	b.n	19cc <os_mempool_init_internal+0x64>
    19dc:	200001b0 	.word	0x200001b0

000019e0 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    19e0:	b510      	push	{r4, lr}
    19e2:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    19e4:	2400      	movs	r4, #0
    19e6:	9401      	str	r4, [sp, #4]
    19e8:	9c04      	ldr	r4, [sp, #16]
    19ea:	9400      	str	r4, [sp, #0]
    19ec:	f7ff ffbc 	bl	1968 <os_mempool_init_internal>
}
    19f0:	b002      	add	sp, #8
    19f2:	bd10      	pop	{r4, pc}

000019f4 <os_memblock_put_from_cb>:
    return (void *)block;
}

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    19f4:	b538      	push	{r3, r4, r5, lr}
    19f6:	4604      	mov	r4, r0
    19f8:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    19fa:	f7ff ff8e 	bl	191a <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    19fe:	6963      	ldr	r3, [r4, #20]
    1a00:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    1a02:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    1a04:	88e3      	ldrh	r3, [r4, #6]
    1a06:	3301      	adds	r3, #1
    1a08:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    1a0a:	f7ff ff8c 	bl	1926 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    1a0e:	2000      	movs	r0, #0
    1a10:	bd38      	pop	{r3, r4, r5, pc}

00001a12 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    1a12:	b168      	cbz	r0, 1a30 <os_memblock_put+0x1e>
{
    1a14:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
    1a16:	b169      	cbz	r1, 1a34 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    1a18:	7a83      	ldrb	r3, [r0, #10]
    1a1a:	f013 0f01 	tst.w	r3, #1
    1a1e:	d004      	beq.n	1a2a <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    1a20:	69c3      	ldr	r3, [r0, #28]
    1a22:	b113      	cbz	r3, 1a2a <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    1a24:	6a02      	ldr	r2, [r0, #32]
    1a26:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    1a28:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
    1a2a:	f7ff ffe3 	bl	19f4 <os_memblock_put_from_cb>
    1a2e:	e7fb      	b.n	1a28 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
    1a30:	2003      	movs	r0, #3
}
    1a32:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    1a34:	2003      	movs	r0, #3
    1a36:	e7f7      	b.n	1a28 <os_memblock_put+0x16>

00001a38 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    1a38:	4b02      	ldr	r3, [pc, #8]	; (1a44 <os_mempool_module_init+0xc>)
    1a3a:	2200      	movs	r2, #0
    1a3c:	601a      	str	r2, [r3, #0]
    1a3e:	605b      	str	r3, [r3, #4]
}
    1a40:	4770      	bx	lr
    1a42:	bf00      	nop
    1a44:	200001b0 	.word	0x200001b0

00001a48 <os_msys_register>:
static struct os_sanity_check os_msys_sc;
#endif

int
os_msys_register(struct os_mbuf_pool *new_pool)
{
    1a48:	b430      	push	{r4, r5}
    struct os_mbuf_pool *prev;

    /* We want to have order from smallest to biggest mempool. */
    prev = NULL;
    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1a4a:	4b11      	ldr	r3, [pc, #68]	; (1a90 <os_msys_register+0x48>)
    1a4c:	681d      	ldr	r5, [r3, #0]
    1a4e:	462b      	mov	r3, r5
    prev = NULL;
    1a50:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1a52:	b133      	cbz	r3, 1a62 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    1a54:	8801      	ldrh	r1, [r0, #0]
    1a56:	881a      	ldrh	r2, [r3, #0]
    1a58:	4291      	cmp	r1, r2
    1a5a:	d302      	bcc.n	1a62 <os_msys_register+0x1a>
            break;
        }
        prev = pool;
    1a5c:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1a5e:	689b      	ldr	r3, [r3, #8]
    1a60:	e7f7      	b.n	1a52 <os_msys_register+0xa>
    }

    if (prev) {
    1a62:	b15c      	cbz	r4, 1a7c <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    1a64:	68a3      	ldr	r3, [r4, #8]
    1a66:	6083      	str	r3, [r0, #8]
    1a68:	b11b      	cbz	r3, 1a72 <os_msys_register+0x2a>
    1a6a:	60a0      	str	r0, [r4, #8]
    } else {
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    }

    return (0);
}
    1a6c:	2000      	movs	r0, #0
    1a6e:	bc30      	pop	{r4, r5}
    1a70:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    1a72:	f100 0308 	add.w	r3, r0, #8
    1a76:	4a06      	ldr	r2, [pc, #24]	; (1a90 <os_msys_register+0x48>)
    1a78:	6053      	str	r3, [r2, #4]
    1a7a:	e7f6      	b.n	1a6a <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    1a7c:	6085      	str	r5, [r0, #8]
    1a7e:	b115      	cbz	r5, 1a86 <os_msys_register+0x3e>
    1a80:	4b03      	ldr	r3, [pc, #12]	; (1a90 <os_msys_register+0x48>)
    1a82:	6018      	str	r0, [r3, #0]
    1a84:	e7f2      	b.n	1a6c <os_msys_register+0x24>
    1a86:	f100 0308 	add.w	r3, r0, #8
    1a8a:	4a01      	ldr	r2, [pc, #4]	; (1a90 <os_msys_register+0x48>)
    1a8c:	6053      	str	r3, [r2, #4]
    1a8e:	e7f7      	b.n	1a80 <os_msys_register+0x38>
    1a90:	20000138 	.word	0x20000138

00001a94 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    1a94:	b530      	push	{r4, r5, lr}
    1a96:	b083      	sub	sp, #12
    1a98:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    1a9a:	9d07      	ldr	r5, [sp, #28]
    1a9c:	9501      	str	r5, [sp, #4]
    1a9e:	9d06      	ldr	r5, [sp, #24]
    1aa0:	9500      	str	r5, [sp, #0]
    1aa2:	f000 fd9f 	bl	25e4 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    1aa6:	b928      	cbnz	r0, 1ab4 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
    1aa8:	4620      	mov	r0, r4
    1aaa:	f7ff ffcd 	bl	1a48 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    1aae:	b970      	cbnz	r0, 1ace <os_msys_init_once+0x3a>
}
    1ab0:	b003      	add	sp, #12
    1ab2:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    1ab4:	f7fe fb56 	bl	164 <hal_debugger_connected>
    1ab8:	b100      	cbz	r0, 1abc <os_msys_init_once+0x28>
    1aba:	be01      	bkpt	0x0001
    1abc:	2000      	movs	r0, #0
    1abe:	9000      	str	r0, [sp, #0]
    1ac0:	4b09      	ldr	r3, [pc, #36]	; (1ae8 <os_msys_init_once+0x54>)
    1ac2:	681d      	ldr	r5, [r3, #0]
    1ac4:	4603      	mov	r3, r0
    1ac6:	4602      	mov	r2, r0
    1ac8:	4601      	mov	r1, r0
    1aca:	47a8      	blx	r5
    1acc:	e7ec      	b.n	1aa8 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
    1ace:	f7fe fb49 	bl	164 <hal_debugger_connected>
    1ad2:	b100      	cbz	r0, 1ad6 <os_msys_init_once+0x42>
    1ad4:	be01      	bkpt	0x0001
    1ad6:	2000      	movs	r0, #0
    1ad8:	9000      	str	r0, [sp, #0]
    1ada:	4b03      	ldr	r3, [pc, #12]	; (1ae8 <os_msys_init_once+0x54>)
    1adc:	681c      	ldr	r4, [r3, #0]
    1ade:	4603      	mov	r3, r0
    1ae0:	4602      	mov	r2, r0
    1ae2:	4601      	mov	r1, r0
    1ae4:	47a0      	blx	r4
}
    1ae6:	e7e3      	b.n	1ab0 <os_msys_init_once+0x1c>
    1ae8:	20000150 	.word	0x20000150

00001aec <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    1aec:	4b02      	ldr	r3, [pc, #8]	; (1af8 <os_msys_reset+0xc>)
    1aee:	2200      	movs	r2, #0
    1af0:	601a      	str	r2, [r3, #0]
    1af2:	605b      	str	r3, [r3, #4]
}
    1af4:	4770      	bx	lr
    1af6:	bf00      	nop
    1af8:	20000138 	.word	0x20000138

00001afc <os_msys_init>:

void
os_msys_init(void)
{
    1afc:	b500      	push	{lr}
    1afe:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    1b00:	f7ff fff4 	bl	1aec <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    1b04:	4b06      	ldr	r3, [pc, #24]	; (1b20 <os_msys_init+0x24>)
    1b06:	9301      	str	r3, [sp, #4]
    1b08:	f44f 7392 	mov.w	r3, #292	; 0x124
    1b0c:	9300      	str	r3, [sp, #0]
    1b0e:	2340      	movs	r3, #64	; 0x40
    1b10:	4a04      	ldr	r2, [pc, #16]	; (1b24 <os_msys_init+0x28>)
    1b12:	4905      	ldr	r1, [pc, #20]	; (1b28 <os_msys_init+0x2c>)
    1b14:	4805      	ldr	r0, [pc, #20]	; (1b2c <os_msys_init+0x30>)
    1b16:	f7ff ffbd 	bl	1a94 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    1b1a:	b003      	add	sp, #12
    1b1c:	f85d fb04 	ldr.w	pc, [sp], #4
    1b20:	0000577c 	.word	0x0000577c
    1b24:	20004ab8 	.word	0x20004ab8
    1b28:	20004ac4 	.word	0x20004ac4
    1b2c:	200001b8 	.word	0x200001b8

00001b30 <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
    1b30:	4b01      	ldr	r3, [pc, #4]	; (1b38 <os_time_get+0x8>)
    1b32:	6818      	ldr	r0, [r3, #0]
    1b34:	4770      	bx	lr
    1b36:	bf00      	nop
    1b38:	20004ae4 	.word	0x20004ae4

00001b3c <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
    1b3c:	4a02      	ldr	r2, [pc, #8]	; (1b48 <os_time_advance+0xc>)
    1b3e:	6813      	ldr	r3, [r2, #0]
    1b40:	4418      	add	r0, r3
    1b42:	6010      	str	r0, [r2, #0]
}
    1b44:	4770      	bx	lr
    1b46:	bf00      	nop
    1b48:	20004ae4 	.word	0x20004ae4

00001b4c <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    1b4c:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    1b50:	482b      	ldr	r0, [pc, #172]	; (1c00 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    1b52:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    1b54:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    1b56:	f380 8814 	msr	CONTROL, r0
        ISB
    1b5a:	f3bf 8f6f 	isb	sy
        BX      LR
    1b5e:	4770      	bx	lr

00001b60 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    1b60:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    1b64:	4770      	bx	lr

00001b66 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    1b66:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    1b6a:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    1b6c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    1b70:	b951      	cbnz	r1, 1b88 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    1b72:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1b76:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    1b78:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    1b7e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    1b82:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    1b86:	4770      	bx	lr

00001b88 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1b88:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    1b8a:	4a1e      	ldr	r2, [pc, #120]	; (1c04 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    1b8c:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    1b8e:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    1b90:	d809      	bhi.n	1ba6 <SVC_Done>

        LDR     R4,=SVC_Table-4
    1b92:	4c1d      	ldr	r4, [pc, #116]	; (1c08 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    1b94:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    1b98:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    1b9c:	47a0      	blx	r4

        MRS     R12,PSP
    1b9e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    1ba2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

00001ba6 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    1baa:	4770      	bx	lr

00001bac <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    1bac:	4b17      	ldr	r3, [pc, #92]	; (1c0c <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    1bae:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    1bb0:	4b17      	ldr	r3, [pc, #92]	; (1c10 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    1bb2:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    1bb4:	4291      	cmp	r1, r2
        IT      EQ
    1bb6:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    1bb8:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    1bba:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    1bbe:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    1bc2:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    1bc6:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    1bc8:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    1bcc:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    1bd0:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    1bd4:	4770      	bx	lr

00001bd6 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1bd6:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    1bd8:	f7ff fe9a 	bl	1910 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    1be0:	4770      	bx	lr

00001be2 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    1be2:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    1be6:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    1be8:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    1bec:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    1bf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    1bf4:	4668      	mov	r0, sp
        BL      os_default_irq
    1bf6:	f7ff fdfb 	bl	17f0 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    1bfa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    1bfe:	4770      	bx	lr
        LDR     R0,=os_flags
    1c00:	200001ac 	.word	0x200001ac
        LDR     R2,=SVC_Count
    1c04:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    1c08:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    1c0c:	20000140 	.word	0x20000140
        LDR     R3,=g_current_task      /* Get current task */
    1c10:	20004ae0 	.word	0x20004ae0

00001c14 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
    1c14:	3a10      	subs	r2, #16
    1c16:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    1c18:	6041      	str	r1, [r0, #4]

    return (0);
}
    1c1a:	2000      	movs	r0, #0
    1c1c:	4770      	bx	lr

00001c1e <os_mbuf_free>:
    return om;
}

int
os_mbuf_free(struct os_mbuf *om)
{
    1c1e:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    1c20:	6883      	ldr	r3, [r0, #8]
    1c22:	b123      	cbz	r3, 1c2e <os_mbuf_free+0x10>
    1c24:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    1c26:	6858      	ldr	r0, [r3, #4]
    1c28:	f7ff fef3 	bl	1a12 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    1c2c:	bd08      	pop	{r3, pc}
    rc = 0;
    1c2e:	2000      	movs	r0, #0
    return (rc);
    1c30:	e7fc      	b.n	1c2c <os_mbuf_free+0xe>

00001c32 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
    1c32:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    1c34:	b160      	cbz	r0, 1c50 <os_mbuf_free_chain+0x1e>
{
    1c36:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    1c38:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
    1c3a:	4618      	mov	r0, r3
    1c3c:	f7ff ffef 	bl	1c1e <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
    1c40:	4623      	mov	r3, r4
        if (rc != 0) {
    1c42:	4602      	mov	r2, r0
    1c44:	b910      	cbnz	r0, 1c4c <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
    1c46:	2c00      	cmp	r4, #0
    1c48:	d1f6      	bne.n	1c38 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
    1c4a:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    1c4c:	4610      	mov	r0, r2
    1c4e:	bd10      	pop	{r4, pc}
    rc = 0;
    1c50:	2200      	movs	r2, #0
}
    1c52:	4610      	mov	r0, r2
    1c54:	4770      	bx	lr

00001c56 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    1c56:	4603      	mov	r3, r0
    1c58:	b128      	cbz	r0, 1c66 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    1c5a:	2000      	movs	r0, #0
    1c5c:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    1c5e:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    1c60:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    1c62:	6018      	str	r0, [r3, #0]
    1c64:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    1c66:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    1c68:	4770      	bx	lr

00001c6a <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    1c6a:	b470      	push	{r4, r5, r6}
    1c6c:	f04f 0500 	mov.w	r5, #0
    1c70:	f022 0603 	bic.w	r6, r2, #3
    1c74:	e005      	b.n	1c82 <test1>

00001c76 <loop1>:
    1c76:	5943      	ldr	r3, [r0, r5]
    1c78:	594c      	ldr	r4, [r1, r5]
    1c7a:	42a3      	cmp	r3, r4
    1c7c:	d104      	bne.n	1c88 <res1>
    1c7e:	f105 0504 	add.w	r5, r5, #4

00001c82 <test1>:
    1c82:	42b5      	cmp	r5, r6
    1c84:	d1f7      	bne.n	1c76 <loop1>
    1c86:	e00d      	b.n	1ca4 <test2>

00001c88 <res1>:
    1c88:	ba1b      	rev	r3, r3
    1c8a:	ba24      	rev	r4, r4
    1c8c:	1b1b      	subs	r3, r3, r4
    1c8e:	bf8c      	ite	hi
    1c90:	2301      	movhi	r3, #1
    1c92:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    1c96:	e009      	b.n	1cac <done>

00001c98 <loop2>:
    1c98:	5d43      	ldrb	r3, [r0, r5]
    1c9a:	5d4c      	ldrb	r4, [r1, r5]
    1c9c:	1b1b      	subs	r3, r3, r4
    1c9e:	d105      	bne.n	1cac <done>
    1ca0:	f105 0501 	add.w	r5, r5, #1

00001ca4 <test2>:
    1ca4:	4295      	cmp	r5, r2
    1ca6:	d1f7      	bne.n	1c98 <loop2>
    1ca8:	f04f 0300 	mov.w	r3, #0

00001cac <done>:
    1cac:	4618      	mov	r0, r3
    1cae:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    1cb0:	4770      	bx	lr

00001cb2 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    1cb2:	e001      	b.n	1cb8 <test1>

00001cb4 <loop1>:
    1cb4:	588b      	ldr	r3, [r1, r2]
    1cb6:	5083      	str	r3, [r0, r2]

00001cb8 <test1>:
    1cb8:	3a04      	subs	r2, #4
    1cba:	d5fb      	bpl.n	1cb4 <loop1>
    1cbc:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    1cc0:	e001      	b.n	1cc6 <test2>

00001cc2 <loop2>:
    1cc2:	5c8b      	ldrb	r3, [r1, r2]
    1cc4:	5483      	strb	r3, [r0, r2]

00001cc6 <test2>:
    1cc6:	3a01      	subs	r2, #1
    1cc8:	d5fb      	bpl.n	1cc2 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    1cca:	4770      	bx	lr

00001ccc <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    1ccc:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    1cce:	4605      	mov	r5, r0
    1cd0:	b2c9      	uxtb	r1, r1
    1cd2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    1cd6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    1cda:	18ab      	adds	r3, r5, r2
    1cdc:	2403      	movs	r4, #3
    1cde:	4023      	ands	r3, r4
    1ce0:	1ad3      	subs	r3, r2, r3
    1ce2:	d40b      	bmi.n	1cfc <memset+0x30>
    1ce4:	e001      	b.n	1cea <memset+0x1e>
    1ce6:	3a01      	subs	r2, #1
    1ce8:	54a9      	strb	r1, [r5, r2]
    1cea:	429a      	cmp	r2, r3
    1cec:	d1fb      	bne.n	1ce6 <memset+0x1a>
    1cee:	e000      	b.n	1cf2 <memset+0x26>
    1cf0:	50a9      	str	r1, [r5, r2]
    1cf2:	3a04      	subs	r2, #4
    1cf4:	d5fc      	bpl.n	1cf0 <memset+0x24>
    1cf6:	3204      	adds	r2, #4
    1cf8:	e000      	b.n	1cfc <memset+0x30>
    1cfa:	54a9      	strb	r1, [r5, r2]
    1cfc:	3a01      	subs	r2, #1
    1cfe:	d5fc      	bpl.n	1cfa <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    1d00:	bc30      	pop	{r4, r5}
    1d02:	4770      	bx	lr

00001d04 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    1d04:	4603      	mov	r3, r0
	while (*ss)
    1d06:	e000      	b.n	1d0a <strlen+0x6>
		ss++;
    1d08:	3301      	adds	r3, #1
	while (*ss)
    1d0a:	781a      	ldrb	r2, [r3, #0]
    1d0c:	2a00      	cmp	r2, #0
    1d0e:	d1fb      	bne.n	1d08 <strlen+0x4>
	return ss - s;
}
    1d10:	1a18      	subs	r0, r3, r0
    1d12:	4770      	bx	lr

00001d14 <relocate_vector_table>:
/// Relocate the Arm Vector Table from vector_table to relocated_vector_table.
/// relocated_vector_table must be aligned to 0x100 page boundary.
static void relocate_vector_table(void *vector_table, void *relocated_vector_table) {
    uint32_t *current_location = (uint32_t *) vector_table;
    uint32_t *new_location = (uint32_t *) relocated_vector_table;
    if (new_location == current_location) { return; }  //  No need to relocate
    1d14:	4288      	cmp	r0, r1
    1d16:	d021      	beq.n	1d5c <relocate_vector_table+0x48>
static void relocate_vector_table(void *vector_table, void *relocated_vector_table) {
    1d18:	b538      	push	{r3, r4, r5, lr}
    //  Check whether we need to copy the vectors.
    int vector_diff = 0;  //  Non-zero if a vector is different
    for (int i = 0; i < NVIC_NUM_VECTORS; i++) {
    1d1a:	2300      	movs	r3, #0
    1d1c:	2b35      	cmp	r3, #53	; 0x35
    1d1e:	dc07      	bgt.n	1d30 <relocate_vector_table+0x1c>
        if (new_location[i] != current_location[i]) {
    1d20:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    1d24:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    1d28:	42a5      	cmp	r5, r4
    1d2a:	d103      	bne.n	1d34 <relocate_vector_table+0x20>
    for (int i = 0; i < NVIC_NUM_VECTORS; i++) {
    1d2c:	3301      	adds	r3, #1
    1d2e:	e7f5      	b.n	1d1c <relocate_vector_table+0x8>
    int vector_diff = 0;  //  Non-zero if a vector is different
    1d30:	2300      	movs	r3, #0
    1d32:	e000      	b.n	1d36 <relocate_vector_table+0x22>
            vector_diff = 1;
    1d34:	2301      	movs	r3, #1
    1d36:	460c      	mov	r4, r1
    1d38:	4605      	mov	r5, r0
            break;
        }
    }
    //  If we need to copy the vectors, erase the flash ROM and write the vectors.
    if (vector_diff) {
    1d3a:	b913      	cbnz	r3, 1d42 <relocate_vector_table+0x2e>
            vector_table, //  From the original address
            0x100         //  Assume that we copy an entire page
        );
    }
    //  Point VTOR Register in the System Control Block to the relocated vector table.
    *SCB_VTOR = (uint32_t) relocated_vector_table;
    1d3c:	4b08      	ldr	r3, [pc, #32]	; (1d60 <relocate_vector_table+0x4c>)
    1d3e:	601c      	str	r4, [r3, #0]
}
    1d40:	bd38      	pop	{r3, r4, r5, pc}
        hal_flash_erase(  //  Erase...
    1d42:	f44f 7280 	mov.w	r2, #256	; 0x100
    1d46:	2000      	movs	r0, #0
    1d48:	f002 fbb0 	bl	44ac <hal_flash_erase>
        hal_flash_write(  //  Write...
    1d4c:	f44f 7380 	mov.w	r3, #256	; 0x100
    1d50:	462a      	mov	r2, r5
    1d52:	4621      	mov	r1, r4
    1d54:	2000      	movs	r0, #0
    1d56:	f002 fb6f 	bl	4438 <hal_flash_write>
    1d5a:	e7ef      	b.n	1d3c <relocate_vector_table+0x28>
    1d5c:	4770      	bx	lr
    1d5e:	bf00      	nop
    1d60:	e000ed08 	.word	0xe000ed08

00001d64 <pinetime_boot_init>:
void pinetime_boot_init(void) {
    1d64:	b538      	push	{r3, r4, r5, lr}
    blink_backlight(1, 2);
    1d66:	2102      	movs	r1, #2
    1d68:	2001      	movs	r0, #1
    1d6a:	f000 f8f1 	bl	1f50 <blink_backlight>
    console_printf("Starting Bootloader...\n");
    1d6e:	4828      	ldr	r0, [pc, #160]	; (1e10 <pinetime_boot_init+0xac>)
    1d70:	f000 fbc6 	bl	2500 <console_printf>
    console_flush();
    1d74:	f000 fbe8 	bl	2548 <console_flush>
    hal_gpio_init_in(PUSH_BUTTON_IN, HAL_GPIO_PULL_DOWN);  //  TODO: Doesn't seem to work
    1d78:	2102      	movs	r1, #2
    1d7a:	200d      	movs	r0, #13
    1d7c:	f7fe ffd1 	bl	d22 <hal_gpio_init_in>
    hal_gpio_init_out(PUSH_BUTTON_OUT, 1);
    1d80:	2101      	movs	r1, #1
    1d82:	200f      	movs	r0, #15
    1d84:	f7fe ffe3 	bl	d4e <hal_gpio_init_out>
    hal_gpio_write(PUSH_BUTTON_OUT, 1);  //  Enable the button
    1d88:	2101      	movs	r1, #1
    1d8a:	200f      	movs	r0, #15
    1d8c:	f7fe fffb 	bl	d86 <hal_gpio_write>
    blink_backlight(1, 2);
    1d90:	2102      	movs	r1, #2
    1d92:	2001      	movs	r0, #1
    1d94:	f000 f8dc 	bl	1f50 <blink_backlight>
    pinetime_boot_display_image();
    1d98:	f000 faf4 	bl	2384 <pinetime_boot_display_image>
    console_printf("Check button: %d\n", hal_gpio_read(PUSH_BUTTON_IN));
    1d9c:	200d      	movs	r0, #13
    1d9e:	f7ff f803 	bl	da8 <hal_gpio_read>
    1da2:	4601      	mov	r1, r0
    1da4:	481b      	ldr	r0, [pc, #108]	; (1e14 <pinetime_boot_init+0xb0>)
    1da6:	f000 fbab 	bl	2500 <console_printf>
    console_flush();
    1daa:	f000 fbcd 	bl	2548 <console_flush>
    blink_backlight(1, 2);
    1dae:	2102      	movs	r1, #2
    1db0:	2001      	movs	r0, #1
    1db2:	f000 f8cd 	bl	1f50 <blink_backlight>
    console_printf("Waiting 5 seconds for button...\n");
    1db6:	4818      	ldr	r0, [pc, #96]	; (1e18 <pinetime_boot_init+0xb4>)
    1db8:	f000 fba2 	bl	2500 <console_printf>
    console_flush();
    1dbc:	f000 fbc4 	bl	2548 <console_flush>
    for (int i = 0; i < 64 * 5; i++) {
    1dc0:	2500      	movs	r5, #0
    uint8_t button_samples = 0;
    1dc2:	462c      	mov	r4, r5
    for (int i = 0; i < 64 * 5; i++) {
    1dc4:	e009      	b.n	1dda <pinetime_boot_init+0x76>
        for (int delay = 0; delay < 100000; delay++);
    1dc6:	3301      	adds	r3, #1
    1dc8:	4a14      	ldr	r2, [pc, #80]	; (1e1c <pinetime_boot_init+0xb8>)
    1dca:	4293      	cmp	r3, r2
    1dcc:	ddfb      	ble.n	1dc6 <pinetime_boot_init+0x62>
        button_samples += hal_gpio_read(PUSH_BUTTON_IN);
    1dce:	200d      	movs	r0, #13
    1dd0:	f7fe ffea 	bl	da8 <hal_gpio_read>
    1dd4:	4404      	add	r4, r0
    1dd6:	b2e4      	uxtb	r4, r4
    for (int i = 0; i < 64 * 5; i++) {
    1dd8:	3501      	adds	r5, #1
    1dda:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
    1dde:	da01      	bge.n	1de4 <pinetime_boot_init+0x80>
        for (int delay = 0; delay < 100000; delay++);
    1de0:	2300      	movs	r3, #0
    1de2:	e7f1      	b.n	1dc8 <pinetime_boot_init+0x64>
    blink_backlight(1, 2);
    1de4:	2102      	movs	r1, #2
    1de6:	2001      	movs	r0, #1
    1de8:	f000 f8b2 	bl	1f50 <blink_backlight>
    if (button_samples > 1 /* TODO: this needs to be set higher to avoid accidental rollbacks */) {
    1dec:	2c01      	cmp	r4, #1
    1dee:	d800      	bhi.n	1df2 <pinetime_boot_init+0x8e>
}
    1df0:	bd38      	pop	{r3, r4, r5, pc}
        console_printf("Flashing and resetting...\n");
    1df2:	480b      	ldr	r0, [pc, #44]	; (1e20 <pinetime_boot_init+0xbc>)
    1df4:	f000 fb84 	bl	2500 <console_printf>
        console_flush();
    1df8:	f000 fba6 	bl	2548 <console_flush>
        boot_set_pending(0);
    1dfc:	2000      	movs	r0, #0
    1dfe:	f000 fe27 	bl	2a50 <boot_set_pending>
        blink_backlight(1, 2);
    1e02:	2102      	movs	r1, #2
    1e04:	2001      	movs	r0, #1
    1e06:	f000 f8a3 	bl	1f50 <blink_backlight>
        hal_system_reset();
    1e0a:	f7fe f9b3 	bl	174 <hal_system_reset>
    1e0e:	bf00      	nop
    1e10:	00005798 	.word	0x00005798
    1e14:	000057b0 	.word	0x000057b0
    1e18:	000057c4 	.word	0x000057c4
    1e1c:	0001869f 	.word	0x0001869f
    1e20:	000057e8 	.word	0x000057e8

00001e24 <setup_watchdog>:
  NRF_WDT->CONFIG &= ~(WDT_CONFIG_SLEEP_Msk << WDT_CONFIG_SLEEP_Pos);
    1e24:	4b0f      	ldr	r3, [pc, #60]	; (1e64 <setup_watchdog+0x40>)
    1e26:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1e2a:	f022 0201 	bic.w	r2, r2, #1
    1e2e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
  NRF_WDT->CONFIG |= (WDT_CONFIG_HALT_Run << WDT_CONFIG_SLEEP_Pos);
    1e32:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1e36:	f042 0201 	orr.w	r2, r2, #1
    1e3a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
  NRF_WDT->CONFIG &= ~(WDT_CONFIG_HALT_Msk << WDT_CONFIG_HALT_Pos);
    1e3e:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    1e46:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
  NRF_WDT->CONFIG |= (WDT_CONFIG_HALT_Pause << WDT_CONFIG_HALT_Pos);
    1e4a:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1e4e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
  NRF_WDT->CRV = crv;
    1e52:	4a05      	ldr	r2, [pc, #20]	; (1e68 <setup_watchdog+0x44>)
    1e54:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
  NRF_WDT->RREN = (WDT_RREN_RR0_Enabled << WDT_RREN_RR0_Pos);
    1e58:	2201      	movs	r2, #1
    1e5a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  NRF_WDT->TASKS_START = 1;
    1e5e:	601a      	str	r2, [r3, #0]
}
    1e60:	4770      	bx	lr
    1e62:	bf00      	nop
    1e64:	40010000 	.word	0x40010000
    1e68:	00037fff 	.word	0x00037fff

00001e6c <boot_custom_start>:
) {
    1e6c:	b570      	push	{r4, r5, r6, lr}
    1e6e:	4606      	mov	r6, r0
    1e70:	460d      	mov	r5, r1
    blink_backlight(2, 2);
    1e72:	2102      	movs	r1, #2
    1e74:	4608      	mov	r0, r1
    1e76:	f000 f86b 	bl	1f50 <blink_backlight>
    console_printf("Bootloader done\n");
    1e7a:	480c      	ldr	r0, [pc, #48]	; (1eac <boot_custom_start+0x40>)
    1e7c:	f000 fb40 	bl	2500 <console_printf>
    console_flush();
    1e80:	f000 fb62 	bl	2548 <console_flush>
        rsp->br_image_off +          //  Offset of FLASH_AREA_IMAGE_0 (application image): 0x8000
    1e84:	68ac      	ldr	r4, [r5, #8]
        flash_base +                 //  0
    1e86:	4434      	add	r4, r6
        rsp->br_hdr->ih_hdr_size     //  Size of MCUBoot image header (0x20)
    1e88:	682b      	ldr	r3, [r5, #0]
    1e8a:	891b      	ldrh	r3, [r3, #8]
        rsp->br_image_off +          //  Offset of FLASH_AREA_IMAGE_0 (application image): 0x8000
    1e8c:	441c      	add	r4, r3
    relocate_vector_table(  //  Relocate the vector table...
    1e8e:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1e92:	4620      	mov	r0, r4
    1e94:	f7ff ff3e 	bl	1d14 <relocate_vector_table>
    blink_backlight(3, 4);
    1e98:	2104      	movs	r1, #4
    1e9a:	2003      	movs	r0, #3
    1e9c:	f000 f858 	bl	1f50 <blink_backlight>
    setup_watchdog();
    1ea0:	f7ff ffc0 	bl	1e24 <setup_watchdog>
    hal_system_start(vector_table);
    1ea4:	4620      	mov	r0, r4
    1ea6:	f002 fbb6 	bl	4616 <hal_system_start>
    1eaa:	bf00      	nop
    1eac:	00005784 	.word	0x00005784

00001eb0 <delay_ms>:
        hal_gpio_write(gpio, 1);
    }
}

/// Sleep for the specified number of milliseconds
static void delay_ms(uint32_t ms) {
    1eb0:	b538      	push	{r3, r4, r5, lr}
    1eb2:	4605      	mov	r5, r0
    uint32_t delay_ticks = ms * OS_TICKS_PER_SEC / 1000;
    os_time_delay(delay_ticks);
#else  //  If Task Scheduler is disabled (i.e. MCUBoot)...
    //  os_time_delay() doesn't work in MCUBoot because the scheduler has not started
    uint8_t button_samples = 0;
    for (int i = 0; i < ms; i++) {
    1eb4:	2400      	movs	r4, #0
    1eb6:	e007      	b.n	1ec8 <delay_ms+0x18>
        for (int delay = 0; delay < 100000; delay++) {}
    1eb8:	3301      	adds	r3, #1
    1eba:	4a06      	ldr	r2, [pc, #24]	; (1ed4 <delay_ms+0x24>)
    1ebc:	4293      	cmp	r3, r2
    1ebe:	ddfb      	ble.n	1eb8 <delay_ms+0x8>
        button_samples += hal_gpio_read(PUSH_BUTTON_IN);
    1ec0:	200d      	movs	r0, #13
    1ec2:	f7fe ff71 	bl	da8 <hal_gpio_read>
    for (int i = 0; i < ms; i++) {
    1ec6:	3401      	adds	r4, #1
    1ec8:	42ac      	cmp	r4, r5
    1eca:	d201      	bcs.n	1ed0 <delay_ms+0x20>
        for (int delay = 0; delay < 100000; delay++) {}
    1ecc:	2300      	movs	r3, #0
    1ece:	e7f4      	b.n	1eba <delay_ms+0xa>
    }
#endif  //  MYNEWT_VAL(OS_SCHEDULING)
    1ed0:	bd38      	pop	{r3, r4, r5, pc}
    1ed2:	bf00      	nop
    1ed4:	0001869f 	.word	0x0001869f

00001ed8 <blink_pattern>:
static void blink_pattern(const uint8_t pattern[], int length) {
    1ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1edc:	4680      	mov	r8, r0
    1ede:	460f      	mov	r7, r1
    for (int i = 0; i < length; i++) {
    1ee0:	2600      	movs	r6, #0
    1ee2:	e016      	b.n	1f12 <blink_pattern+0x3a>
                hal_gpio_write(gpio, 0);
    1ee4:	2100      	movs	r1, #0
    1ee6:	f7fe ff4e 	bl	d86 <hal_gpio_write>
        for (int b = 0; b < sizeof(backlights); b++) {
    1eea:	3401      	adds	r4, #1
    1eec:	2c02      	cmp	r4, #2
    1eee:	d807      	bhi.n	1f00 <blink_pattern+0x28>
            uint8_t gpio = backlights[b];
    1ef0:	4b0c      	ldr	r3, [pc, #48]	; (1f24 <blink_pattern+0x4c>)
    1ef2:	5d18      	ldrb	r0, [r3, r4]
            if (b == level) {                
    1ef4:	42a5      	cmp	r5, r4
    1ef6:	d0f5      	beq.n	1ee4 <blink_pattern+0xc>
                hal_gpio_write(gpio, 1);
    1ef8:	2101      	movs	r1, #1
    1efa:	f7fe ff44 	bl	d86 <hal_gpio_write>
    1efe:	e7f4      	b.n	1eea <blink_pattern+0x12>
        delay_ms(10);
    1f00:	200a      	movs	r0, #10
    1f02:	f7ff ffd5 	bl	1eb0 <delay_ms>
        hal_gpio_write(gpio, 1);
    1f06:	2101      	movs	r1, #1
    1f08:	4b06      	ldr	r3, [pc, #24]	; (1f24 <blink_pattern+0x4c>)
    1f0a:	5d58      	ldrb	r0, [r3, r5]
    1f0c:	f7fe ff3b 	bl	d86 <hal_gpio_write>
    for (int i = 0; i < length; i++) {
    1f10:	3601      	adds	r6, #1
    1f12:	42be      	cmp	r6, r7
    1f14:	da03      	bge.n	1f1e <blink_pattern+0x46>
        uint8_t level = pattern[i];
    1f16:	f818 5006 	ldrb.w	r5, [r8, r6]
        for (int b = 0; b < sizeof(backlights); b++) {
    1f1a:	2400      	movs	r4, #0
    1f1c:	e7e6      	b.n	1eec <blink_pattern+0x14>
}
    1f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f22:	bf00      	nop
    1f24:	00005804 	.word	0x00005804

00001f28 <init_backlight>:
void init_backlight(void) {
    1f28:	b510      	push	{r4, lr}
    for (int b = 0; b < sizeof(backlights); b++) {
    1f2a:	2400      	movs	r4, #0
    1f2c:	e003      	b.n	1f36 <init_backlight+0xe>
            hal_gpio_init_out(gpio, 0);
    1f2e:	2100      	movs	r1, #0
    1f30:	f7fe ff0d 	bl	d4e <hal_gpio_init_out>
    for (int b = 0; b < sizeof(backlights); b++) {
    1f34:	3401      	adds	r4, #1
    1f36:	2c02      	cmp	r4, #2
    1f38:	d807      	bhi.n	1f4a <init_backlight+0x22>
        uint8_t gpio = backlights[b];
    1f3a:	4b04      	ldr	r3, [pc, #16]	; (1f4c <init_backlight+0x24>)
    1f3c:	5d18      	ldrb	r0, [r3, r4]
        if (b == 2) {
    1f3e:	2c02      	cmp	r4, #2
    1f40:	d0f5      	beq.n	1f2e <init_backlight+0x6>
            hal_gpio_init_out(gpio, 1);
    1f42:	2101      	movs	r1, #1
    1f44:	f7fe ff03 	bl	d4e <hal_gpio_init_out>
    1f48:	e7f4      	b.n	1f34 <init_backlight+0xc>
}
    1f4a:	bd10      	pop	{r4, pc}
    1f4c:	00005804 	.word	0x00005804

00001f50 <blink_backlight>:
void blink_backlight(int pattern_id, int repetitions) {
    1f50:	b570      	push	{r4, r5, r6, lr}
    1f52:	4605      	mov	r5, r0
    1f54:	460e      	mov	r6, r1
    if (first_blink) {
    1f56:	4b1a      	ldr	r3, [pc, #104]	; (1fc0 <blink_backlight+0x70>)
    1f58:	681b      	ldr	r3, [r3, #0]
    1f5a:	b90b      	cbnz	r3, 1f60 <blink_backlight+0x10>
void blink_backlight(int pattern_id, int repetitions) {
    1f5c:	2400      	movs	r4, #0
    1f5e:	e00a      	b.n	1f76 <blink_backlight+0x26>
        first_blink = 0;
    1f60:	4b17      	ldr	r3, [pc, #92]	; (1fc0 <blink_backlight+0x70>)
    1f62:	2200      	movs	r2, #0
    1f64:	601a      	str	r2, [r3, #0]
        init_backlight();
    1f66:	f7ff ffdf 	bl	1f28 <init_backlight>
    1f6a:	e7f7      	b.n	1f5c <blink_backlight+0xc>
            case 0:  blink_pattern(slower_pulse,  sizeof(slower_pulse));  break;
    1f6c:	2124      	movs	r1, #36	; 0x24
    1f6e:	4815      	ldr	r0, [pc, #84]	; (1fc4 <blink_backlight+0x74>)
    1f70:	f7ff ffb2 	bl	1ed8 <blink_pattern>
    for (int i = 0; i < repetitions; i++) {
    1f74:	3401      	adds	r4, #1
    1f76:	42b4      	cmp	r4, r6
    1f78:	da20      	bge.n	1fbc <blink_backlight+0x6c>
        switch (pattern_id) {
    1f7a:	2d03      	cmp	r5, #3
    1f7c:	d819      	bhi.n	1fb2 <blink_backlight+0x62>
    1f7e:	a301      	add	r3, pc, #4	; (adr r3, 1f84 <blink_backlight+0x34>)
    1f80:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    1f84:	00001f6d 	.word	0x00001f6d
    1f88:	00001f95 	.word	0x00001f95
    1f8c:	00001f9f 	.word	0x00001f9f
    1f90:	00001fa9 	.word	0x00001fa9
            case 1:  blink_pattern(slow_pulse,    sizeof(slow_pulse));    break;
    1f94:	2112      	movs	r1, #18
    1f96:	480c      	ldr	r0, [pc, #48]	; (1fc8 <blink_backlight+0x78>)
    1f98:	f7ff ff9e 	bl	1ed8 <blink_pattern>
    1f9c:	e7ea      	b.n	1f74 <blink_backlight+0x24>
            case 2:  blink_pattern(fast_pulse,    sizeof(fast_pulse));    break;
    1f9e:	210c      	movs	r1, #12
    1fa0:	480a      	ldr	r0, [pc, #40]	; (1fcc <blink_backlight+0x7c>)
    1fa2:	f7ff ff99 	bl	1ed8 <blink_pattern>
    1fa6:	e7e5      	b.n	1f74 <blink_backlight+0x24>
            case 3:  blink_pattern(faster_pulse,  sizeof(faster_pulse));  break;
    1fa8:	2106      	movs	r1, #6
    1faa:	4809      	ldr	r0, [pc, #36]	; (1fd0 <blink_backlight+0x80>)
    1fac:	f7ff ff94 	bl	1ed8 <blink_pattern>
    1fb0:	e7e0      	b.n	1f74 <blink_backlight+0x24>
            default: blink_pattern(fastest_pulse, sizeof(fastest_pulse)); break;
    1fb2:	2103      	movs	r1, #3
    1fb4:	4807      	ldr	r0, [pc, #28]	; (1fd4 <blink_backlight+0x84>)
    1fb6:	f7ff ff8f 	bl	1ed8 <blink_pattern>
    1fba:	e7db      	b.n	1f74 <blink_backlight+0x24>
}
    1fbc:	bd70      	pop	{r4, r5, r6, pc}
    1fbe:	bf00      	nop
    1fc0:	20000148 	.word	0x20000148
    1fc4:	00005834 	.word	0x00005834
    1fc8:	00005820 	.word	0x00005820
    1fcc:	00005808 	.word	0x00005808
    1fd0:	00005814 	.word	0x00005814
    1fd4:	0000581c 	.word	0x0000581c

00001fd8 <hard_reset>:
    delay_ms(200);
    return 0;
}

/// Reset the display controller
static int hard_reset(void) {
    1fd8:	b508      	push	{r3, lr}
    hal_gpio_write(DISPLAY_RST, 1);
    1fda:	2101      	movs	r1, #1
    1fdc:	201a      	movs	r0, #26
    1fde:	f7fe fed2 	bl	d86 <hal_gpio_write>
    hal_gpio_write(DISPLAY_RST, 0);
    1fe2:	2100      	movs	r1, #0
    1fe4:	201a      	movs	r0, #26
    1fe6:	f7fe fece 	bl	d86 <hal_gpio_write>
    hal_gpio_write(DISPLAY_RST, 1);
    1fea:	2101      	movs	r1, #1
    1fec:	201a      	movs	r0, #26
    1fee:	f7fe feca 	bl	d86 <hal_gpio_write>
    return 0;
}
    1ff2:	2000      	movs	r0, #0
    1ff4:	bd08      	pop	{r3, pc}
	...

00001ff8 <delay_ms>:
    hal_gpio_write(DISPLAY_CS, 1);
    return 0;
}

/// Sleep for the specified number of milliseconds
static void delay_ms(uint32_t ms) {
    1ff8:	b510      	push	{r4, lr}
    uint32_t delay_ticks = ms * OS_TICKS_PER_SEC / 1000;
    os_time_delay(delay_ticks);
#else  //  If Task Scheduler is disabled (i.e. MCUBoot)...
    //  os_time_delay() doesn't work in MCUBoot because the scheduler has not started
    uint8_t button_samples = 0;
    for (int i = 0; i < 64; i++) {
    1ffa:	2400      	movs	r4, #0
    1ffc:	e007      	b.n	200e <delay_ms+0x16>
        for (int delay = 0; delay < 100000; delay++) {}
    1ffe:	3301      	adds	r3, #1
    2000:	4a05      	ldr	r2, [pc, #20]	; (2018 <delay_ms+0x20>)
    2002:	4293      	cmp	r3, r2
    2004:	ddfb      	ble.n	1ffe <delay_ms+0x6>
        button_samples += hal_gpio_read(PUSH_BUTTON_IN);
    2006:	200d      	movs	r0, #13
    2008:	f7fe fece 	bl	da8 <hal_gpio_read>
    for (int i = 0; i < 64; i++) {
    200c:	3401      	adds	r4, #1
    200e:	2c3f      	cmp	r4, #63	; 0x3f
    2010:	dc01      	bgt.n	2016 <delay_ms+0x1e>
        for (int delay = 0; delay < 100000; delay++) {}
    2012:	2300      	movs	r3, #0
    2014:	e7f4      	b.n	2000 <delay_ms+0x8>
    }
#endif  //  MYNEWT_VAL(OS_SCHEDULING)
}
    2016:	bd10      	pop	{r4, pc}
    2018:	0001869f 	.word	0x0001869f

0000201c <transmit_spi>:
    if (len == 0) { return 0; }
    201c:	b909      	cbnz	r1, 2022 <transmit_spi+0x6>
}
    201e:	2000      	movs	r0, #0
    2020:	4770      	bx	lr
static int transmit_spi(const uint8_t *data, uint16_t len) {
    2022:	b538      	push	{r3, r4, r5, lr}
    2024:	460d      	mov	r5, r1
    2026:	4604      	mov	r4, r0
    hal_gpio_write(DISPLAY_CS, 0);
    2028:	2100      	movs	r1, #0
    202a:	2019      	movs	r0, #25
    202c:	f7fe feab 	bl	d86 <hal_gpio_write>
    int rc = hal_spi_txrx(DISPLAY_SPI, 
    2030:	462b      	mov	r3, r5
    2032:	2200      	movs	r2, #0
    2034:	4621      	mov	r1, r4
    2036:	4610      	mov	r0, r2
    2038:	f7ff f8f4 	bl	1224 <hal_spi_txrx>
    assert(rc == 0);
    203c:	b928      	cbnz	r0, 204a <transmit_spi+0x2e>
    hal_gpio_write(DISPLAY_CS, 1);
    203e:	2101      	movs	r1, #1
    2040:	2019      	movs	r0, #25
    2042:	f7fe fea0 	bl	d86 <hal_gpio_write>
}
    2046:	2000      	movs	r0, #0
    2048:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    204a:	f7fe f88b 	bl	164 <hal_debugger_connected>
    204e:	b100      	cbz	r0, 2052 <transmit_spi+0x36>
    2050:	be01      	bkpt	0x0001
    2052:	2300      	movs	r3, #0
    2054:	461a      	mov	r2, r3
    2056:	4619      	mov	r1, r3
    2058:	4618      	mov	r0, r3
    205a:	f7ff fba7 	bl	17ac <__assert_func>

0000205e <write_data>:
static int write_data(const uint8_t *data, uint16_t len) {
    205e:	b538      	push	{r3, r4, r5, lr}
    2060:	4604      	mov	r4, r0
    2062:	460d      	mov	r5, r1
    hal_gpio_write(DISPLAY_DC, 1);
    2064:	2101      	movs	r1, #1
    2066:	2012      	movs	r0, #18
    2068:	f7fe fe8d 	bl	d86 <hal_gpio_write>
    transmit_spi(data, len);
    206c:	4629      	mov	r1, r5
    206e:	4620      	mov	r0, r4
    2070:	f7ff ffd4 	bl	201c <transmit_spi>
}
    2074:	2000      	movs	r0, #0
    2076:	bd38      	pop	{r3, r4, r5, pc}

00002078 <write_command>:
static int write_command(uint8_t command, const uint8_t *params, uint16_t len) {
    2078:	b570      	push	{r4, r5, r6, lr}
    207a:	b082      	sub	sp, #8
    207c:	460d      	mov	r5, r1
    207e:	4616      	mov	r6, r2
    2080:	ac02      	add	r4, sp, #8
    2082:	f804 0d01 	strb.w	r0, [r4, #-1]!
    hal_gpio_write(DISPLAY_DC, 0);
    2086:	2100      	movs	r1, #0
    2088:	2012      	movs	r0, #18
    208a:	f7fe fe7c 	bl	d86 <hal_gpio_write>
    int rc = transmit_spi(&command, 1);
    208e:	2101      	movs	r1, #1
    2090:	4620      	mov	r0, r4
    2092:	f7ff ffc3 	bl	201c <transmit_spi>
    assert(rc == 0);
    2096:	b920      	cbnz	r0, 20a2 <write_command+0x2a>
    if (params != NULL && len > 0) {
    2098:	b105      	cbz	r5, 209c <write_command+0x24>
    209a:	b966      	cbnz	r6, 20b6 <write_command+0x3e>
}
    209c:	2000      	movs	r0, #0
    209e:	b002      	add	sp, #8
    20a0:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
    20a2:	f7fe f85f 	bl	164 <hal_debugger_connected>
    20a6:	b100      	cbz	r0, 20aa <write_command+0x32>
    20a8:	be01      	bkpt	0x0001
    20aa:	2300      	movs	r3, #0
    20ac:	461a      	mov	r2, r3
    20ae:	4619      	mov	r1, r3
    20b0:	4618      	mov	r0, r3
    20b2:	f7ff fb7b 	bl	17ac <__assert_func>
        rc = write_data(params, len);
    20b6:	4631      	mov	r1, r6
    20b8:	4628      	mov	r0, r5
    20ba:	f7ff ffd0 	bl	205e <write_data>
        assert(rc == 0);
    20be:	2800      	cmp	r0, #0
    20c0:	d0ec      	beq.n	209c <write_command+0x24>
    20c2:	f7fe f84f 	bl	164 <hal_debugger_connected>
    20c6:	b100      	cbz	r0, 20ca <write_command+0x52>
    20c8:	be01      	bkpt	0x0001
    20ca:	2300      	movs	r3, #0
    20cc:	461a      	mov	r2, r3
    20ce:	4619      	mov	r1, r3
    20d0:	4618      	mov	r0, r3
    20d2:	f7ff fb6b 	bl	17ac <__assert_func>
	...

000020d8 <init_display>:
static int init_display(void) {
    20d8:	b508      	push	{r3, lr}
    rc = hal_gpio_init_out(DISPLAY_RST, 1); assert(rc == 0);
    20da:	2101      	movs	r1, #1
    20dc:	201a      	movs	r0, #26
    20de:	f7fe fe36 	bl	d4e <hal_gpio_init_out>
    20e2:	2800      	cmp	r0, #0
    20e4:	d16e      	bne.n	21c4 <init_display+0xec>
    rc = hal_gpio_init_out(DISPLAY_CS, 1); assert(rc == 0);
    20e6:	2101      	movs	r1, #1
    20e8:	2019      	movs	r0, #25
    20ea:	f7fe fe30 	bl	d4e <hal_gpio_init_out>
    20ee:	2800      	cmp	r0, #0
    20f0:	d172      	bne.n	21d8 <init_display+0x100>
    rc = hal_gpio_init_out(DISPLAY_DC, 0); assert(rc == 0);
    20f2:	2100      	movs	r1, #0
    20f4:	2012      	movs	r0, #18
    20f6:	f7fe fe2a 	bl	d4e <hal_gpio_init_out>
    20fa:	2800      	cmp	r0, #0
    20fc:	d176      	bne.n	21ec <init_display+0x114>
    rc = hal_gpio_init_out(DISPLAY_HIGH, 0); assert(rc == 0);
    20fe:	2100      	movs	r1, #0
    2100:	2017      	movs	r0, #23
    2102:	f7fe fe24 	bl	d4e <hal_gpio_init_out>
    2106:	2800      	cmp	r0, #0
    2108:	d17a      	bne.n	2200 <init_display+0x128>
    hard_reset();
    210a:	f7ff ff65 	bl	1fd8 <hard_reset>
    write_command(SWRESET, NULL, 0);
    210e:	2200      	movs	r2, #0
    2110:	4611      	mov	r1, r2
    2112:	2001      	movs	r0, #1
    2114:	f7ff ffb0 	bl	2078 <write_command>
    delay_ms(200);
    2118:	20c8      	movs	r0, #200	; 0xc8
    211a:	f7ff ff6d 	bl	1ff8 <delay_ms>
    write_command(SLPOUT, NULL, 0);
    211e:	2200      	movs	r2, #0
    2120:	4611      	mov	r1, r2
    2122:	2011      	movs	r0, #17
    2124:	f7ff ffa8 	bl	2078 <write_command>
    delay_ms(200);
    2128:	20c8      	movs	r0, #200	; 0xc8
    212a:	f7ff ff65 	bl	1ff8 <delay_ms>
    write_command(FRMCTR1, FRMCTR1_PARA, sizeof(FRMCTR1_PARA));
    212e:	2203      	movs	r2, #3
    2130:	4938      	ldr	r1, [pc, #224]	; (2214 <init_display+0x13c>)
    2132:	20b1      	movs	r0, #177	; 0xb1
    2134:	f7ff ffa0 	bl	2078 <write_command>
    write_command(FRMCTR2, FRMCTR2_PARA, sizeof(FRMCTR2_PARA));
    2138:	2203      	movs	r2, #3
    213a:	4937      	ldr	r1, [pc, #220]	; (2218 <init_display+0x140>)
    213c:	20b2      	movs	r0, #178	; 0xb2
    213e:	f7ff ff9b 	bl	2078 <write_command>
    write_command(FRMCTR3, FRMCTR3_PARA, sizeof(FRMCTR3_PARA));
    2142:	2206      	movs	r2, #6
    2144:	4935      	ldr	r1, [pc, #212]	; (221c <init_display+0x144>)
    2146:	20b3      	movs	r0, #179	; 0xb3
    2148:	f7ff ff96 	bl	2078 <write_command>
    write_command(INVCTR, INVCTR_PARA, sizeof(INVCTR_PARA));
    214c:	2201      	movs	r2, #1
    214e:	4934      	ldr	r1, [pc, #208]	; (2220 <init_display+0x148>)
    2150:	20b4      	movs	r0, #180	; 0xb4
    2152:	f7ff ff91 	bl	2078 <write_command>
    write_command(PWCTR1, PWCTR1_PARA, sizeof(PWCTR1_PARA));
    2156:	2203      	movs	r2, #3
    2158:	4932      	ldr	r1, [pc, #200]	; (2224 <init_display+0x14c>)
    215a:	20c0      	movs	r0, #192	; 0xc0
    215c:	f7ff ff8c 	bl	2078 <write_command>
    write_command(PWCTR2, PWCTR2_PARA, sizeof(PWCTR2_PARA));
    2160:	2201      	movs	r2, #1
    2162:	4931      	ldr	r1, [pc, #196]	; (2228 <init_display+0x150>)
    2164:	20c1      	movs	r0, #193	; 0xc1
    2166:	f7ff ff87 	bl	2078 <write_command>
    write_command(PWCTR3, PWCTR3_PARA, sizeof(PWCTR3_PARA));
    216a:	2202      	movs	r2, #2
    216c:	492f      	ldr	r1, [pc, #188]	; (222c <init_display+0x154>)
    216e:	20c2      	movs	r0, #194	; 0xc2
    2170:	f7ff ff82 	bl	2078 <write_command>
    write_command(PWCTR4, PWCTR4_PARA, sizeof(PWCTR4_PARA));
    2174:	2202      	movs	r2, #2
    2176:	492e      	ldr	r1, [pc, #184]	; (2230 <init_display+0x158>)
    2178:	20c3      	movs	r0, #195	; 0xc3
    217a:	f7ff ff7d 	bl	2078 <write_command>
    write_command(PWCTR5, PWCTR5_PARA, sizeof(PWCTR5_PARA));
    217e:	2202      	movs	r2, #2
    2180:	492c      	ldr	r1, [pc, #176]	; (2234 <init_display+0x15c>)
    2182:	20c4      	movs	r0, #196	; 0xc4
    2184:	f7ff ff78 	bl	2078 <write_command>
    write_command(VMCTR1, VMCTR1_PARA, sizeof(VMCTR1_PARA));
    2188:	2201      	movs	r2, #1
    218a:	492b      	ldr	r1, [pc, #172]	; (2238 <init_display+0x160>)
    218c:	20c5      	movs	r0, #197	; 0xc5
    218e:	f7ff ff73 	bl	2078 <write_command>
        write_command(INVON, NULL, 0);
    2192:	2200      	movs	r2, #0
    2194:	4611      	mov	r1, r2
    2196:	2021      	movs	r0, #33	; 0x21
    2198:	f7ff ff6e 	bl	2078 <write_command>
        write_command(MADCTL, MADCTL1_PARA, sizeof(MADCTL1_PARA));
    219c:	2201      	movs	r2, #1
    219e:	4927      	ldr	r1, [pc, #156]	; (223c <init_display+0x164>)
    21a0:	2036      	movs	r0, #54	; 0x36
    21a2:	f7ff ff69 	bl	2078 <write_command>
    write_command(COLMOD, COLMOD_PARA, sizeof(COLMOD_PARA));
    21a6:	2201      	movs	r2, #1
    21a8:	4925      	ldr	r1, [pc, #148]	; (2240 <init_display+0x168>)
    21aa:	203a      	movs	r0, #58	; 0x3a
    21ac:	f7ff ff64 	bl	2078 <write_command>
    write_command(DISPON, NULL, 0);
    21b0:	2200      	movs	r2, #0
    21b2:	4611      	mov	r1, r2
    21b4:	2029      	movs	r0, #41	; 0x29
    21b6:	f7ff ff5f 	bl	2078 <write_command>
    delay_ms(200);
    21ba:	20c8      	movs	r0, #200	; 0xc8
    21bc:	f7ff ff1c 	bl	1ff8 <delay_ms>
}
    21c0:	2000      	movs	r0, #0
    21c2:	bd08      	pop	{r3, pc}
    rc = hal_gpio_init_out(DISPLAY_RST, 1); assert(rc == 0);
    21c4:	f7fd ffce 	bl	164 <hal_debugger_connected>
    21c8:	b100      	cbz	r0, 21cc <init_display+0xf4>
    21ca:	be01      	bkpt	0x0001
    21cc:	2300      	movs	r3, #0
    21ce:	461a      	mov	r2, r3
    21d0:	4619      	mov	r1, r3
    21d2:	4618      	mov	r0, r3
    21d4:	f7ff faea 	bl	17ac <__assert_func>
    rc = hal_gpio_init_out(DISPLAY_CS, 1); assert(rc == 0);
    21d8:	f7fd ffc4 	bl	164 <hal_debugger_connected>
    21dc:	b100      	cbz	r0, 21e0 <init_display+0x108>
    21de:	be01      	bkpt	0x0001
    21e0:	2300      	movs	r3, #0
    21e2:	461a      	mov	r2, r3
    21e4:	4619      	mov	r1, r3
    21e6:	4618      	mov	r0, r3
    21e8:	f7ff fae0 	bl	17ac <__assert_func>
    rc = hal_gpio_init_out(DISPLAY_DC, 0); assert(rc == 0);
    21ec:	f7fd ffba 	bl	164 <hal_debugger_connected>
    21f0:	b100      	cbz	r0, 21f4 <init_display+0x11c>
    21f2:	be01      	bkpt	0x0001
    21f4:	2300      	movs	r3, #0
    21f6:	461a      	mov	r2, r3
    21f8:	4619      	mov	r1, r3
    21fa:	4618      	mov	r0, r3
    21fc:	f7ff fad6 	bl	17ac <__assert_func>
    rc = hal_gpio_init_out(DISPLAY_HIGH, 0); assert(rc == 0);
    2200:	f7fd ffb0 	bl	164 <hal_debugger_connected>
    2204:	b100      	cbz	r0, 2208 <init_display+0x130>
    2206:	be01      	bkpt	0x0001
    2208:	2300      	movs	r3, #0
    220a:	461a      	mov	r2, r3
    220c:	4619      	mov	r1, r3
    220e:	4618      	mov	r0, r3
    2210:	f7ff facc 	bl	17ac <__assert_func>
    2214:	0000585c 	.word	0x0000585c
    2218:	00005860 	.word	0x00005860
    221c:	00005864 	.word	0x00005864
    2220:	0000586c 	.word	0x0000586c
    2224:	00005874 	.word	0x00005874
    2228:	00005878 	.word	0x00005878
    222c:	0000587c 	.word	0x0000587c
    2230:	00005880 	.word	0x00005880
    2234:	00005884 	.word	0x00005884
    2238:	00005888 	.word	0x00005888
    223c:	00005870 	.word	0x00005870
    2240:	00005858 	.word	0x00005858

00002244 <set_orientation>:
static int set_orientation(uint8_t orientation) {
    2244:	b500      	push	{lr}
    2246:	b083      	sub	sp, #12
        uint8_t orientation_para[1] = { orientation };
    2248:	a902      	add	r1, sp, #8
    224a:	f801 0d04 	strb.w	r0, [r1, #-4]!
        int rc = write_command(MADCTL, orientation_para, 1);
    224e:	2201      	movs	r2, #1
    2250:	2036      	movs	r0, #54	; 0x36
    2252:	f7ff ff11 	bl	2078 <write_command>
        assert(rc == 0);
    2256:	b918      	cbnz	r0, 2260 <set_orientation+0x1c>
}
    2258:	2000      	movs	r0, #0
    225a:	b003      	add	sp, #12
    225c:	f85d fb04 	ldr.w	pc, [sp], #4
        assert(rc == 0);
    2260:	f7fd ff80 	bl	164 <hal_debugger_connected>
    2264:	b100      	cbz	r0, 2268 <set_orientation+0x24>
    2266:	be01      	bkpt	0x0001
    2268:	2300      	movs	r3, #0
    226a:	461a      	mov	r2, r3
    226c:	4619      	mov	r1, r3
    226e:	4618      	mov	r0, r3
    2270:	f7ff fa9c 	bl	17ac <__assert_func>

00002274 <set_window>:
static int set_window(uint8_t left, uint8_t top, uint8_t right, uint8_t bottom) {
    2274:	b5f0      	push	{r4, r5, r6, r7, lr}
    2276:	b083      	sub	sp, #12
    assert(left < COL_COUNT && right < COL_COUNT && top < ROW_COUNT && bottom < ROW_COUNT);
    2278:	28ef      	cmp	r0, #239	; 0xef
    227a:	d83d      	bhi.n	22f8 <set_window+0x84>
    227c:	4604      	mov	r4, r0
    227e:	460e      	mov	r6, r1
    2280:	4615      	mov	r5, r2
    2282:	461f      	mov	r7, r3
    2284:	2aef      	cmp	r2, #239	; 0xef
    2286:	d837      	bhi.n	22f8 <set_window+0x84>
    2288:	29ef      	cmp	r1, #239	; 0xef
    228a:	d835      	bhi.n	22f8 <set_window+0x84>
    228c:	2bef      	cmp	r3, #239	; 0xef
    228e:	d833      	bhi.n	22f8 <set_window+0x84>
    assert(left <= right);
    2290:	4290      	cmp	r0, r2
    2292:	d83b      	bhi.n	230c <set_window+0x98>
    assert(top <= bottom);
    2294:	4299      	cmp	r1, r3
    2296:	d843      	bhi.n	2320 <set_window+0xac>
    int rc = write_command(CASET, NULL, 0); assert(rc == 0);
    2298:	2200      	movs	r2, #0
    229a:	4611      	mov	r1, r2
    229c:	202a      	movs	r0, #42	; 0x2a
    229e:	f7ff feeb 	bl	2078 <write_command>
    22a2:	2800      	cmp	r0, #0
    22a4:	d146      	bne.n	2334 <set_window+0xc0>
    uint8_t col_para[4] = { 0x00, left, 0x00, right };
    22a6:	2300      	movs	r3, #0
    22a8:	f88d 3004 	strb.w	r3, [sp, #4]
    22ac:	f88d 4005 	strb.w	r4, [sp, #5]
    22b0:	f88d 3006 	strb.w	r3, [sp, #6]
    22b4:	f88d 5007 	strb.w	r5, [sp, #7]
    rc = write_data(col_para, 4); assert(rc == 0);
    22b8:	2104      	movs	r1, #4
    22ba:	eb0d 0001 	add.w	r0, sp, r1
    22be:	f7ff fece 	bl	205e <write_data>
    22c2:	2800      	cmp	r0, #0
    22c4:	d140      	bne.n	2348 <set_window+0xd4>
    rc = write_command(RASET, NULL, 0); assert(rc == 0);
    22c6:	2200      	movs	r2, #0
    22c8:	4611      	mov	r1, r2
    22ca:	202b      	movs	r0, #43	; 0x2b
    22cc:	f7ff fed4 	bl	2078 <write_command>
    22d0:	2800      	cmp	r0, #0
    22d2:	d143      	bne.n	235c <set_window+0xe8>
    uint8_t row_para[4] = { 0x00, top, 0x00, bottom };
    22d4:	2300      	movs	r3, #0
    22d6:	f88d 3000 	strb.w	r3, [sp]
    22da:	f88d 6001 	strb.w	r6, [sp, #1]
    22de:	f88d 3002 	strb.w	r3, [sp, #2]
    22e2:	f88d 7003 	strb.w	r7, [sp, #3]
    rc = write_data(row_para, 4); assert(rc == 0);
    22e6:	2104      	movs	r1, #4
    22e8:	4668      	mov	r0, sp
    22ea:	f7ff feb8 	bl	205e <write_data>
    22ee:	2800      	cmp	r0, #0
    22f0:	d13e      	bne.n	2370 <set_window+0xfc>
}
    22f2:	2000      	movs	r0, #0
    22f4:	b003      	add	sp, #12
    22f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(left < COL_COUNT && right < COL_COUNT && top < ROW_COUNT && bottom < ROW_COUNT);
    22f8:	f7fd ff34 	bl	164 <hal_debugger_connected>
    22fc:	b100      	cbz	r0, 2300 <set_window+0x8c>
    22fe:	be01      	bkpt	0x0001
    2300:	2300      	movs	r3, #0
    2302:	461a      	mov	r2, r3
    2304:	4619      	mov	r1, r3
    2306:	4618      	mov	r0, r3
    2308:	f7ff fa50 	bl	17ac <__assert_func>
    assert(left <= right);
    230c:	f7fd ff2a 	bl	164 <hal_debugger_connected>
    2310:	b100      	cbz	r0, 2314 <set_window+0xa0>
    2312:	be01      	bkpt	0x0001
    2314:	2300      	movs	r3, #0
    2316:	461a      	mov	r2, r3
    2318:	4619      	mov	r1, r3
    231a:	4618      	mov	r0, r3
    231c:	f7ff fa46 	bl	17ac <__assert_func>
    assert(top <= bottom);
    2320:	f7fd ff20 	bl	164 <hal_debugger_connected>
    2324:	b100      	cbz	r0, 2328 <set_window+0xb4>
    2326:	be01      	bkpt	0x0001
    2328:	2300      	movs	r3, #0
    232a:	461a      	mov	r2, r3
    232c:	4619      	mov	r1, r3
    232e:	4618      	mov	r0, r3
    2330:	f7ff fa3c 	bl	17ac <__assert_func>
    int rc = write_command(CASET, NULL, 0); assert(rc == 0);
    2334:	f7fd ff16 	bl	164 <hal_debugger_connected>
    2338:	b100      	cbz	r0, 233c <set_window+0xc8>
    233a:	be01      	bkpt	0x0001
    233c:	2300      	movs	r3, #0
    233e:	461a      	mov	r2, r3
    2340:	4619      	mov	r1, r3
    2342:	4618      	mov	r0, r3
    2344:	f7ff fa32 	bl	17ac <__assert_func>
    rc = write_data(col_para, 4); assert(rc == 0);
    2348:	f7fd ff0c 	bl	164 <hal_debugger_connected>
    234c:	b100      	cbz	r0, 2350 <set_window+0xdc>
    234e:	be01      	bkpt	0x0001
    2350:	2300      	movs	r3, #0
    2352:	461a      	mov	r2, r3
    2354:	4619      	mov	r1, r3
    2356:	4618      	mov	r0, r3
    2358:	f7ff fa28 	bl	17ac <__assert_func>
    rc = write_command(RASET, NULL, 0); assert(rc == 0);
    235c:	f7fd ff02 	bl	164 <hal_debugger_connected>
    2360:	b100      	cbz	r0, 2364 <set_window+0xf0>
    2362:	be01      	bkpt	0x0001
    2364:	2300      	movs	r3, #0
    2366:	461a      	mov	r2, r3
    2368:	4619      	mov	r1, r3
    236a:	4618      	mov	r0, r3
    236c:	f7ff fa1e 	bl	17ac <__assert_func>
    rc = write_data(row_para, 4); assert(rc == 0);
    2370:	f7fd fef8 	bl	164 <hal_debugger_connected>
    2374:	b100      	cbz	r0, 2378 <set_window+0x104>
    2376:	be01      	bkpt	0x0001
    2378:	2300      	movs	r3, #0
    237a:	461a      	mov	r2, r3
    237c:	4619      	mov	r1, r3
    237e:	4618      	mov	r0, r3
    2380:	f7ff fa14 	bl	17ac <__assert_func>

00002384 <pinetime_boot_display_image>:
int pinetime_boot_display_image(void) {
    2384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    console_printf("Displaying image...\n"); console_flush();
    2386:	4841      	ldr	r0, [pc, #260]	; (248c <pinetime_boot_display_image+0x108>)
    2388:	f000 f8ba 	bl	2500 <console_printf>
    238c:	f000 f8dc 	bl	2548 <console_flush>
    int rc = init_display();  assert(rc == 0);
    2390:	f7ff fea2 	bl	20d8 <init_display>
    2394:	b928      	cbnz	r0, 23a2 <pinetime_boot_display_image+0x1e>
    rc = set_orientation(Landscape);  assert(rc == 0);
    2396:	2060      	movs	r0, #96	; 0x60
    2398:	f7ff ff54 	bl	2244 <set_orientation>
    239c:	b958      	cbnz	r0, 23b6 <pinetime_boot_display_image+0x32>
    for (uint8_t row = 0; row < ROW_COUNT; row++) {
    239e:	2600      	movs	r6, #0
    23a0:	e069      	b.n	2476 <pinetime_boot_display_image+0xf2>
    int rc = init_display();  assert(rc == 0);
    23a2:	f7fd fedf 	bl	164 <hal_debugger_connected>
    23a6:	b100      	cbz	r0, 23aa <pinetime_boot_display_image+0x26>
    23a8:	be01      	bkpt	0x0001
    23aa:	2300      	movs	r3, #0
    23ac:	461a      	mov	r2, r3
    23ae:	4619      	mov	r1, r3
    23b0:	4618      	mov	r0, r3
    23b2:	f7ff f9fb 	bl	17ac <__assert_func>
    rc = set_orientation(Landscape);  assert(rc == 0);
    23b6:	f7fd fed5 	bl	164 <hal_debugger_connected>
    23ba:	b100      	cbz	r0, 23be <pinetime_boot_display_image+0x3a>
    23bc:	be01      	bkpt	0x0001
    23be:	2300      	movs	r3, #0
    23c0:	461a      	mov	r2, r3
    23c2:	4619      	mov	r1, r3
    23c4:	4618      	mov	r0, r3
    23c6:	f7ff f9f1 	bl	17ac <__assert_func>
            uint16_t len = (right - left + 1) * BYTES_PER_PIXEL;
    23ca:	1be5      	subs	r5, r4, r7
    23cc:	3501      	adds	r5, #1
    23ce:	006d      	lsls	r5, r5, #1
    23d0:	b2ad      	uxth	r5, r5
            uint32_t offset = ((top * COL_COUNT) + left) * BYTES_PER_PIXEL;
    23d2:	ebc6 1306 	rsb	r3, r6, r6, lsl #4
    23d6:	0119      	lsls	r1, r3, #4
    23d8:	4439      	add	r1, r7
            int rc = hal_flash_read(FLASH_DEVICE, offset, flash_buffer, len); assert(rc == 0);
    23da:	462b      	mov	r3, r5
    23dc:	4a2c      	ldr	r2, [pc, #176]	; (2490 <pinetime_boot_display_image+0x10c>)
    23de:	0049      	lsls	r1, r1, #1
    23e0:	2001      	movs	r0, #1
    23e2:	f001 fffe 	bl	43e2 <hal_flash_read>
    23e6:	b9e0      	cbnz	r0, 2422 <pinetime_boot_display_image+0x9e>
            rc = set_window(left, top, right, bottom); assert(rc == 0);
    23e8:	b2e4      	uxtb	r4, r4
    23ea:	4633      	mov	r3, r6
    23ec:	4622      	mov	r2, r4
    23ee:	4631      	mov	r1, r6
    23f0:	4638      	mov	r0, r7
    23f2:	f7ff ff3f 	bl	2274 <set_window>
    23f6:	b9f0      	cbnz	r0, 2436 <pinetime_boot_display_image+0xb2>
            rc = write_command(RAMWR, NULL, 0); assert(rc == 0);
    23f8:	2200      	movs	r2, #0
    23fa:	4611      	mov	r1, r2
    23fc:	202c      	movs	r0, #44	; 0x2c
    23fe:	f7ff fe3b 	bl	2078 <write_command>
    2402:	bb10      	cbnz	r0, 244a <pinetime_boot_display_image+0xc6>
            rc = write_data(flash_buffer, len); assert(rc == 0);
    2404:	4629      	mov	r1, r5
    2406:	4822      	ldr	r0, [pc, #136]	; (2490 <pinetime_boot_display_image+0x10c>)
    2408:	f7ff fe29 	bl	205e <write_data>
    240c:	bb38      	cbnz	r0, 245e <pinetime_boot_display_image+0xda>
            left = right + 1;
    240e:	3401      	adds	r4, #1
    2410:	b2e7      	uxtb	r7, r4
            if (left >= COL_COUNT) { break; }
    2412:	2fef      	cmp	r7, #239	; 0xef
    2414:	d82d      	bhi.n	2472 <pinetime_boot_display_image+0xee>
            uint16_t right = left + batch_columns - 1;
    2416:	f107 047f 	add.w	r4, r7, #127	; 0x7f
            if (right >= COL_COUNT) { right = COL_COUNT - 1; }
    241a:	2cef      	cmp	r4, #239	; 0xef
    241c:	d9d5      	bls.n	23ca <pinetime_boot_display_image+0x46>
    241e:	24ef      	movs	r4, #239	; 0xef
    2420:	e7d3      	b.n	23ca <pinetime_boot_display_image+0x46>
            int rc = hal_flash_read(FLASH_DEVICE, offset, flash_buffer, len); assert(rc == 0);
    2422:	f7fd fe9f 	bl	164 <hal_debugger_connected>
    2426:	b100      	cbz	r0, 242a <pinetime_boot_display_image+0xa6>
    2428:	be01      	bkpt	0x0001
    242a:	2300      	movs	r3, #0
    242c:	461a      	mov	r2, r3
    242e:	4619      	mov	r1, r3
    2430:	4618      	mov	r0, r3
    2432:	f7ff f9bb 	bl	17ac <__assert_func>
            rc = set_window(left, top, right, bottom); assert(rc == 0);
    2436:	f7fd fe95 	bl	164 <hal_debugger_connected>
    243a:	b100      	cbz	r0, 243e <pinetime_boot_display_image+0xba>
    243c:	be01      	bkpt	0x0001
    243e:	2300      	movs	r3, #0
    2440:	461a      	mov	r2, r3
    2442:	4619      	mov	r1, r3
    2444:	4618      	mov	r0, r3
    2446:	f7ff f9b1 	bl	17ac <__assert_func>
            rc = write_command(RAMWR, NULL, 0); assert(rc == 0);
    244a:	f7fd fe8b 	bl	164 <hal_debugger_connected>
    244e:	b100      	cbz	r0, 2452 <pinetime_boot_display_image+0xce>
    2450:	be01      	bkpt	0x0001
    2452:	2300      	movs	r3, #0
    2454:	461a      	mov	r2, r3
    2456:	4619      	mov	r1, r3
    2458:	4618      	mov	r0, r3
    245a:	f7ff f9a7 	bl	17ac <__assert_func>
            rc = write_data(flash_buffer, len); assert(rc == 0);
    245e:	f7fd fe81 	bl	164 <hal_debugger_connected>
    2462:	b100      	cbz	r0, 2466 <pinetime_boot_display_image+0xe2>
    2464:	be01      	bkpt	0x0001
    2466:	2300      	movs	r3, #0
    2468:	461a      	mov	r2, r3
    246a:	4619      	mov	r1, r3
    246c:	4618      	mov	r0, r3
    246e:	f7ff f99d 	bl	17ac <__assert_func>
    for (uint8_t row = 0; row < ROW_COUNT; row++) {
    2472:	3601      	adds	r6, #1
    2474:	b2f6      	uxtb	r6, r6
    2476:	2eef      	cmp	r6, #239	; 0xef
    2478:	d801      	bhi.n	247e <pinetime_boot_display_image+0xfa>
        uint8_t left = 0;
    247a:	2700      	movs	r7, #0
    247c:	e7c9      	b.n	2412 <pinetime_boot_display_image+0x8e>
    console_printf("Image displayed\n"); console_flush();
    247e:	4805      	ldr	r0, [pc, #20]	; (2494 <pinetime_boot_display_image+0x110>)
    2480:	f000 f83e 	bl	2500 <console_printf>
    2484:	f000 f860 	bl	2548 <console_flush>
}
    2488:	2000      	movs	r0, #0
    248a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    248c:	0000588c 	.word	0x0000588c
    2490:	20004ae8 	.word	0x20004ae8
    2494:	000058a4 	.word	0x000058a4

00002498 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
    2498:	b570      	push	{r4, r5, r6, lr}
    249a:	4606      	mov	r6, r0
    249c:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
    249e:	2400      	movs	r4, #0
    24a0:	42ac      	cmp	r4, r5
    24a2:	da07      	bge.n	24b4 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
    24a4:	5d30      	ldrb	r0, [r6, r4]
    24a6:	f000 f871 	bl	258c <console_out_nolock>
    24aa:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    24ae:	d001      	beq.n	24b4 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
    24b0:	3401      	adds	r4, #1
    24b2:	e7f5      	b.n	24a0 <console_write+0x8>
    }
}
    24b4:	bd70      	pop	{r4, r5, r6, pc}

000024b6 <console_blocking_mode>:

void console_blocking_mode(void) {
    24b6:	b508      	push	{r3, lr}
    disable_buffer();
    24b8:	f000 f864 	bl	2584 <disable_buffer>
}
    24bc:	bd08      	pop	{r3, pc}
	...

000024c0 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
    24c0:	b510      	push	{r4, lr}
    24c2:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    os_eventq_init(&avail_queue);
    24c4:	480b      	ldr	r0, [pc, #44]	; (24f4 <console_pkg_init+0x34>)
    24c6:	f7ff fa46 	bl	1956 <os_eventq_init>
    os_mutex_init(&console_write_lock);
    24ca:	480b      	ldr	r0, [pc, #44]	; (24f8 <console_pkg_init+0x38>)
    24cc:	f7ff fbc3 	bl	1c56 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
    24d0:	f000 f870 	bl	25b4 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
    24d4:	b908      	cbnz	r0, 24da <console_pkg_init+0x1a>
}
    24d6:	b002      	add	sp, #8
    24d8:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    24da:	f7fd fe43 	bl	164 <hal_debugger_connected>
    24de:	b100      	cbz	r0, 24e2 <console_pkg_init+0x22>
    24e0:	be01      	bkpt	0x0001
    24e2:	2000      	movs	r0, #0
    24e4:	9000      	str	r0, [sp, #0]
    24e6:	4b05      	ldr	r3, [pc, #20]	; (24fc <console_pkg_init+0x3c>)
    24e8:	681c      	ldr	r4, [r3, #0]
    24ea:	4603      	mov	r3, r0
    24ec:	4602      	mov	r2, r0
    24ee:	4601      	mov	r1, r0
    24f0:	47a0      	blx	r4
}
    24f2:	e7f0      	b.n	24d6 <console_pkg_init+0x16>
    24f4:	20004be8 	.word	0x20004be8
    24f8:	20004bfc 	.word	0x20004bfc
    24fc:	20000150 	.word	0x20000150

00002500 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
    2500:	b40f      	push	{r0, r1, r2, r3}
    2502:	b510      	push	{r4, lr}
    2504:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
    2506:	f000 f857 	bl	25b8 <console_get_ticks>
    250a:	b160      	cbz	r0, 2526 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
    250c:	4b0c      	ldr	r3, [pc, #48]	; (2540 <console_printf+0x40>)
    250e:	681b      	ldr	r3, [r3, #0]
    2510:	b10b      	cbz	r3, 2516 <console_printf+0x16>
    num_chars = 0;
    2512:	2400      	movs	r4, #0
    2514:	e008      	b.n	2528 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
    2516:	f7ff fb0b 	bl	1b30 <os_time_get>
    251a:	4601      	mov	r1, r0
    251c:	4809      	ldr	r0, [pc, #36]	; (2544 <console_printf+0x44>)
    251e:	f002 fb91 	bl	4c44 <printf>
    2522:	4604      	mov	r4, r0
    2524:	e000      	b.n	2528 <console_printf+0x28>
    num_chars = 0;
    2526:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
    2528:	a905      	add	r1, sp, #20
    252a:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
    252c:	9804      	ldr	r0, [sp, #16]
    252e:	f002 fb9b 	bl	4c68 <vprintf>
    va_end(args);

    return num_chars;
}
    2532:	4420      	add	r0, r4
    2534:	b002      	add	sp, #8
    2536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    253a:	b004      	add	sp, #16
    253c:	4770      	bx	lr
    253e:	bf00      	nop
    2540:	20004bf8 	.word	0x20004bf8
    2544:	000058b8 	.word	0x000058b8

00002548 <console_flush>:
#endif  //  DISABLE_SEMIHOSTING
}

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
    2548:	b508      	push	{r3, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
    254a:	4b0b      	ldr	r3, [pc, #44]	; (2578 <console_flush+0x30>)
    254c:	781b      	ldrb	r3, [r3, #0]
    254e:	b18b      	cbz	r3, 2574 <console_flush+0x2c>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
    2550:	4b0a      	ldr	r3, [pc, #40]	; (257c <console_flush+0x34>)
    2552:	6818      	ldr	r0, [r3, #0]
    2554:	b170      	cbz	r0, 2574 <console_flush+0x2c>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
    2556:	4b0a      	ldr	r3, [pc, #40]	; (2580 <console_flush+0x38>)
    2558:	685b      	ldr	r3, [r3, #4]
    255a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
    255e:	b94b      	cbnz	r3, 2574 <console_flush+0x2c>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
    2560:	4b06      	ldr	r3, [pc, #24]	; (257c <console_flush+0x34>)
    2562:	2200      	movs	r2, #0
    2564:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
    2566:	4603      	mov	r3, r0
    while (m) {  //  For each mbuf in the chain...
    2568:	e000      	b.n	256c <console_flush+0x24>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
    256a:	68db      	ldr	r3, [r3, #12]
    while (m) {  //  For each mbuf in the chain...
    256c:	2b00      	cmp	r3, #0
    256e:	d1fc      	bne.n	256a <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
    2570:	f7ff fb5f 	bl	1c32 <os_mbuf_free_chain>
}
    2574:	bd08      	pop	{r3, pc}
    2576:	bf00      	nop
    2578:	2000014c 	.word	0x2000014c
    257c:	20004c0c 	.word	0x20004c0c
    2580:	e000ed00 	.word	0xe000ed00

00002584 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
    2584:	b508      	push	{r3, lr}
    2586:	f7ff ffdf 	bl	2548 <console_flush>
    258a:	bd08      	pop	{r3, pc}

0000258c <console_out_nolock>:
    console_buffer(&c, 1);  //  Append the char to the output buffer.
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}

int console_out_nolock(int character) {
    char c = (char)character;
    258c:	b2c2      	uxtb	r2, r0
    if (g_silence_console) { return c; }
    258e:	4b07      	ldr	r3, [pc, #28]	; (25ac <console_out_nolock+0x20>)
    2590:	781b      	ldrb	r3, [r3, #0]
    2592:	b92b      	cbnz	r3, 25a0 <console_out_nolock+0x14>
    if ('\n' == c) {
    2594:	2a0a      	cmp	r2, #10
    2596:	d005      	beq.n	25a4 <console_out_nolock+0x18>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
    2598:	4b05      	ldr	r3, [pc, #20]	; (25b0 <console_out_nolock+0x24>)
    259a:	2201      	movs	r2, #1
    259c:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
    return character;
}
    259e:	4770      	bx	lr
    25a0:	4610      	mov	r0, r2
    if (g_silence_console) { return c; }
    25a2:	4770      	bx	lr
        console_is_midline = 0;
    25a4:	4b02      	ldr	r3, [pc, #8]	; (25b0 <console_out_nolock+0x24>)
    25a6:	2200      	movs	r2, #0
    25a8:	601a      	str	r2, [r3, #0]
    25aa:	4770      	bx	lr
    25ac:	20004c08 	.word	0x20004c08
    25b0:	20004bf8 	.word	0x20004bf8

000025b4 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
    25b4:	2000      	movs	r0, #0
    25b6:	4770      	bx	lr

000025b8 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
    25b8:	4b01      	ldr	r3, [pc, #4]	; (25c0 <console_get_ticks+0x8>)
    25ba:	7818      	ldrb	r0, [r3, #0]
    25bc:	4770      	bx	lr
    25be:	bf00      	nop
    25c0:	20004c10 	.word	0x20004c10

000025c4 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    25c4:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    25c6:	f7ff f8f1 	bl	17ac <__assert_func>
	...

000025cc <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
    25cc:	4b01      	ldr	r3, [pc, #4]	; (25d4 <sysinit_start+0x8>)
    25ce:	2201      	movs	r2, #1
    25d0:	701a      	strb	r2, [r3, #0]
}
    25d2:	4770      	bx	lr
    25d4:	20004c11 	.word	0x20004c11

000025d8 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
    25d8:	4b01      	ldr	r3, [pc, #4]	; (25e0 <sysinit_end+0x8>)
    25da:	2200      	movs	r2, #0
    25dc:	701a      	strb	r2, [r3, #0]
}
    25de:	4770      	bx	lr
    25e0:	20004c11 	.word	0x20004c11

000025e4 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
    25e4:	b570      	push	{r4, r5, r6, lr}
    25e6:	b082      	sub	sp, #8
    25e8:	460c      	mov	r4, r1
    25ea:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
    25ec:	b29d      	uxth	r5, r3
    25ee:	9b07      	ldr	r3, [sp, #28]
    25f0:	9300      	str	r3, [sp, #0]
    25f2:	4603      	mov	r3, r0
    25f4:	9a06      	ldr	r2, [sp, #24]
    25f6:	4629      	mov	r1, r5
    25f8:	4620      	mov	r0, r4
    25fa:	f7ff f9f1 	bl	19e0 <os_mempool_init>
    if (rc != 0) {
    25fe:	b108      	cbz	r0, 2604 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    2600:	b002      	add	sp, #8
    2602:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
    2604:	462b      	mov	r3, r5
    2606:	9a06      	ldr	r2, [sp, #24]
    2608:	b292      	uxth	r2, r2
    260a:	4621      	mov	r1, r4
    260c:	4630      	mov	r0, r6
    260e:	f7ff fb01 	bl	1c14 <os_mbuf_pool_init>
    2612:	e7f5      	b.n	2600 <mem_init_mbuf_pool+0x1c>

00002614 <sysinit_app>:
void modlog_init(void);
void pinetime_boot_init(void);

void
sysinit_app(void)
{
    2614:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
    2616:	f7ff f989 	bl	192c <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
    261a:	f002 fc95 	bl	4f48 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
    261e:	f7ff ff4f 	bl	24c0 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
    2622:	f002 fdd7 	bl	51d4 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
    2626:	f002 fcc3 	bl	4fb0 <modlog_init>

    /*** Stage 900 */
    /* 900.0: pinetime_boot_init (libs/pinetime_boot) */
    pinetime_boot_init();
    262a:	f7ff fb9b 	bl	1d64 <pinetime_boot_init>
}
    262e:	bd08      	pop	{r3, pc}

00002630 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
    2630:	2801      	cmp	r0, #1
    2632:	d101      	bne.n	2638 <boot_flag_decode+0x8>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
    2634:	2001      	movs	r0, #1
}
    2636:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    2638:	2002      	movs	r0, #2
    263a:	4770      	bx	lr

0000263c <boot_magic_decode>:
{
    263c:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    263e:	2210      	movs	r2, #16
    2640:	4903      	ldr	r1, [pc, #12]	; (2650 <boot_magic_decode+0x14>)
    2642:	f7ff fb12 	bl	1c6a <memcmp>
    2646:	b908      	cbnz	r0, 264c <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
    2648:	2001      	movs	r0, #1
}
    264a:	bd08      	pop	{r3, pc}
    return BOOT_MAGIC_BAD;
    264c:	2002      	movs	r0, #2
    264e:	e7fc      	b.n	264a <boot_magic_decode+0xe>
    2650:	000058c4 	.word	0x000058c4

00002654 <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
    2654:	b530      	push	{r4, r5, lr}
    2656:	b087      	sub	sp, #28
    2658:	460d      	mov	r5, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
    265a:	4b14      	ldr	r3, [pc, #80]	; (26ac <boot_find_status+0x58>)
    265c:	881b      	ldrh	r3, [r3, #0]
    265e:	f8ad 3004 	strh.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    2662:	2400      	movs	r4, #0
    2664:	e000      	b.n	2668 <boot_find_status+0x14>
    2666:	3401      	adds	r4, #1
    2668:	2c01      	cmp	r4, #1
    266a:	d81a      	bhi.n	26a2 <boot_find_status+0x4e>
        rc = flash_area_open(areas[i], fap);
    266c:	4629      	mov	r1, r5
    266e:	ab06      	add	r3, sp, #24
    2670:	4423      	add	r3, r4
    2672:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    2676:	f002 fbc5 	bl	4e04 <flash_area_open>
        if (rc != 0) {
    267a:	4603      	mov	r3, r0
    267c:	b998      	cbnz	r0, 26a6 <boot_find_status+0x52>
            return rc;
        }

        off = boot_magic_off(*fap);
    267e:	6828      	ldr	r0, [r5, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
    2680:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    2682:	2310      	movs	r3, #16
    2684:	aa02      	add	r2, sp, #8
    2686:	3910      	subs	r1, #16
    2688:	f002 fc14 	bl	4eb4 <flash_area_read>
        if (rc != 0) {
    268c:	4603      	mov	r3, r0
    268e:	b950      	cbnz	r0, 26a6 <boot_find_status+0x52>
            flash_area_close(*fap);
            return rc;
        }

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    2690:	2210      	movs	r2, #16
    2692:	4907      	ldr	r1, [pc, #28]	; (26b0 <boot_find_status+0x5c>)
    2694:	a802      	add	r0, sp, #8
    2696:	f7ff fae8 	bl	1c6a <memcmp>
    269a:	4603      	mov	r3, r0
    269c:	2800      	cmp	r0, #0
    269e:	d1e2      	bne.n	2666 <boot_find_status+0x12>
    26a0:	e001      	b.n	26a6 <boot_find_status+0x52>

        flash_area_close(*fap);
    }

    /* If we got here, no magic was found */
    return -1;
    26a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    26a6:	4618      	mov	r0, r3
    26a8:	b007      	add	sp, #28
    26aa:	bd30      	pop	{r4, r5, pc}
    26ac:	000058c0 	.word	0x000058c0
    26b0:	000058c4 	.word	0x000058c4

000026b4 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
static int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    26b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    26b8:	b083      	sub	sp, #12
    26ba:	4606      	mov	r6, r0
    26bc:	460f      	mov	r7, r1
    26be:	4690      	mov	r8, r2
    26c0:	461c      	mov	r4, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    26c2:	f002 fc30 	bl	4f26 <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    26c6:	2c08      	cmp	r4, #8
    26c8:	d823      	bhi.n	2712 <boot_write_trailer+0x5e>
    26ca:	4605      	mov	r5, r0
    26cc:	2808      	cmp	r0, #8
    26ce:	d823      	bhi.n	2718 <boot_write_trailer+0x64>
        return -1;
    }
    erased_val = flash_area_erased_val(fap);
    26d0:	4630      	mov	r0, r6
    26d2:	f002 fc2d 	bl	4f30 <flash_area_erased_val>
    26d6:	4681      	mov	r9, r0
    if (align < inlen) {
    26d8:	42a5      	cmp	r5, r4
    26da:	d200      	bcs.n	26de <boot_write_trailer+0x2a>
        align = inlen;
    26dc:	4625      	mov	r5, r4
    }
    memcpy(buf, inbuf, inlen);
    26de:	4622      	mov	r2, r4
    26e0:	4641      	mov	r1, r8
    26e2:	4668      	mov	r0, sp
    26e4:	f7ff fae5 	bl	1cb2 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    26e8:	1b2a      	subs	r2, r5, r4
    26ea:	fa5f f189 	uxtb.w	r1, r9
    26ee:	eb0d 0004 	add.w	r0, sp, r4
    26f2:	f7ff faeb 	bl	1ccc <memset>

    rc = flash_area_write(fap, off, buf, align);
    26f6:	462b      	mov	r3, r5
    26f8:	466a      	mov	r2, sp
    26fa:	4639      	mov	r1, r7
    26fc:	4630      	mov	r0, r6
    26fe:	f002 fbec 	bl	4eda <flash_area_write>
    if (rc != 0) {
    2702:	4603      	mov	r3, r0
    2704:	b918      	cbnz	r0, 270e <boot_write_trailer+0x5a>
        return BOOT_EFLASH;
    }

    return 0;
}
    2706:	4618      	mov	r0, r3
    2708:	b003      	add	sp, #12
    270a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BOOT_EFLASH;
    270e:	2301      	movs	r3, #1
    2710:	e7f9      	b.n	2706 <boot_write_trailer+0x52>
        return -1;
    2712:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2716:	e7f6      	b.n	2706 <boot_write_trailer+0x52>
    2718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    271c:	e7f3      	b.n	2706 <boot_write_trailer+0x52>

0000271e <boot_write_trailer_flag>:

static int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
    271e:	b510      	push	{r4, lr}
    2720:	b082      	sub	sp, #8
    const uint8_t buf[1] = { flag_val };
    2722:	ac02      	add	r4, sp, #8
    2724:	f804 2d04 	strb.w	r2, [r4, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
    2728:	2301      	movs	r3, #1
    272a:	4622      	mov	r2, r4
    272c:	f7ff ffc2 	bl	26b4 <boot_write_trailer>
}
    2730:	b002      	add	sp, #8
    2732:	bd10      	pop	{r4, pc}

00002734 <boot_magic_compatible_check>:
    switch (tbl_val) {
    2734:	2804      	cmp	r0, #4
    2736:	d00b      	beq.n	2750 <boot_magic_compatible_check+0x1c>
    2738:	2805      	cmp	r0, #5
    273a:	d104      	bne.n	2746 <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
    273c:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
    2740:	bf18      	it	ne
    2742:	2001      	movne	r0, #1
    2744:	4770      	bx	lr
        return tbl_val == val;
    2746:	4288      	cmp	r0, r1
    2748:	bf14      	ite	ne
    274a:	2000      	movne	r0, #0
    274c:	2001      	moveq	r0, #1
    274e:	4770      	bx	lr
        return 1;
    2750:	2001      	movs	r0, #1
}
    2752:	4770      	bx	lr

00002754 <boot_status_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    2754:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    2758:	01d8      	lsls	r0, r3, #7
}
    275a:	4770      	bx	lr

0000275c <boot_trailer_sz>:
{
    275c:	b508      	push	{r3, lr}
           boot_status_sz(min_write_sz)           +
    275e:	f7ff fff9 	bl	2754 <boot_status_sz>
}
    2762:	3030      	adds	r0, #48	; 0x30
    2764:	bd08      	pop	{r3, pc}

00002766 <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    2766:	780b      	ldrb	r3, [r1, #0]
    2768:	2b03      	cmp	r3, #3
    276a:	d006      	beq.n	277a <boot_status_entries+0x14>
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    276c:	3b01      	subs	r3, #1
    276e:	b2db      	uxtb	r3, r3
    2770:	2b01      	cmp	r3, #1
    2772:	d804      	bhi.n	277e <boot_status_entries+0x18>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    2774:	f44f 70c0 	mov.w	r0, #384	; 0x180
    2778:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT;
    277a:	2003      	movs	r0, #3
    277c:	4770      	bx	lr
    return -1;
    277e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2782:	4770      	bx	lr

00002784 <boot_status_off>:
{
    2784:	b510      	push	{r4, lr}
    2786:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    2788:	f002 fbcd 	bl	4f26 <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    278c:	f7ff ffe6 	bl	275c <boot_trailer_sz>
    assert(off_from_end <= fap->fa_size);
    2790:	68a3      	ldr	r3, [r4, #8]
    2792:	4283      	cmp	r3, r0
    2794:	d301      	bcc.n	279a <boot_status_off+0x16>
}
    2796:	1a18      	subs	r0, r3, r0
    2798:	bd10      	pop	{r4, pc}
    assert(off_from_end <= fap->fa_size);
    279a:	f7fd fce3 	bl	164 <hal_debugger_connected>
    279e:	b100      	cbz	r0, 27a2 <boot_status_off+0x1e>
    27a0:	be01      	bkpt	0x0001
    27a2:	2300      	movs	r3, #0
    27a4:	461a      	mov	r2, r3
    27a6:	4619      	mov	r1, r3
    27a8:	4618      	mov	r0, r3
    27aa:	f7fe ffff 	bl	17ac <__assert_func>

000027ae <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    27ae:	6880      	ldr	r0, [r0, #8]
}
    27b0:	3828      	subs	r0, #40	; 0x28
    27b2:	4770      	bx	lr

000027b4 <boot_read_swap_state>:
{
    27b4:	b530      	push	{r4, r5, lr}
    27b6:	b087      	sub	sp, #28
    27b8:	4604      	mov	r4, r0
    27ba:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    27bc:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    27be:	2310      	movs	r3, #16
    27c0:	aa02      	add	r2, sp, #8
    27c2:	3910      	subs	r1, #16
    27c4:	f002 fbb9 	bl	4f3a <flash_area_read_is_empty>
    if (rc < 0) {
    27c8:	2800      	cmp	r0, #0
    27ca:	db4a      	blt.n	2862 <boot_read_swap_state+0xae>
    if (rc == 1) {
    27cc:	2801      	cmp	r0, #1
    27ce:	d03e      	beq.n	284e <boot_read_swap_state+0x9a>
        state->magic = boot_magic_decode(magic);
    27d0:	a802      	add	r0, sp, #8
    27d2:	f7ff ff33 	bl	263c <boot_magic_decode>
    27d6:	7028      	strb	r0, [r5, #0]
    off = boot_swap_info_off(fap);
    27d8:	4620      	mov	r0, r4
    27da:	f7ff ffe8 	bl	27ae <boot_swap_info_off>
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    27de:	2301      	movs	r3, #1
    27e0:	f10d 0207 	add.w	r2, sp, #7
    27e4:	4601      	mov	r1, r0
    27e6:	4620      	mov	r0, r4
    27e8:	f002 fba7 	bl	4f3a <flash_area_read_is_empty>
    if (rc < 0) {
    27ec:	2800      	cmp	r0, #0
    27ee:	db3b      	blt.n	2868 <boot_read_swap_state+0xb4>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    27f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    27f4:	f003 020f 	and.w	r2, r3, #15
    27f8:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    27fa:	091b      	lsrs	r3, r3, #4
    27fc:	712b      	strb	r3, [r5, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    27fe:	2801      	cmp	r0, #1
    2800:	d001      	beq.n	2806 <boot_read_swap_state+0x52>
    2802:	2a04      	cmp	r2, #4
    2804:	d903      	bls.n	280e <boot_read_swap_state+0x5a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    2806:	2301      	movs	r3, #1
    2808:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    280a:	2300      	movs	r3, #0
    280c:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    280e:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    2810:	2301      	movs	r3, #1
    2812:	1caa      	adds	r2, r5, #2
    2814:	3920      	subs	r1, #32
    2816:	4620      	mov	r0, r4
    2818:	f002 fb8f 	bl	4f3a <flash_area_read_is_empty>
    if (rc < 0) {
    281c:	2800      	cmp	r0, #0
    281e:	db25      	blt.n	286c <boot_read_swap_state+0xb8>
    if (rc == 1) {
    2820:	2801      	cmp	r0, #1
    2822:	d017      	beq.n	2854 <boot_read_swap_state+0xa0>
        state->copy_done = boot_flag_decode(state->copy_done);
    2824:	78a8      	ldrb	r0, [r5, #2]
    2826:	f7ff ff03 	bl	2630 <boot_flag_decode>
    282a:	70a8      	strb	r0, [r5, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
    282c:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    282e:	2301      	movs	r3, #1
    2830:	1cea      	adds	r2, r5, #3
    2832:	3918      	subs	r1, #24
    2834:	4620      	mov	r0, r4
    2836:	f002 fb80 	bl	4f3a <flash_area_read_is_empty>
    if (rc < 0) {
    283a:	2800      	cmp	r0, #0
    283c:	db18      	blt.n	2870 <boot_read_swap_state+0xbc>
    if (rc == 1) {
    283e:	2801      	cmp	r0, #1
    2840:	d00b      	beq.n	285a <boot_read_swap_state+0xa6>
        state->image_ok = boot_flag_decode(state->image_ok);
    2842:	78e8      	ldrb	r0, [r5, #3]
    2844:	f7ff fef4 	bl	2630 <boot_flag_decode>
    2848:	70e8      	strb	r0, [r5, #3]
    return 0;
    284a:	2000      	movs	r0, #0
    284c:	e00a      	b.n	2864 <boot_read_swap_state+0xb0>
        state->magic = BOOT_MAGIC_UNSET;
    284e:	2303      	movs	r3, #3
    2850:	702b      	strb	r3, [r5, #0]
    2852:	e7c1      	b.n	27d8 <boot_read_swap_state+0x24>
        state->copy_done = BOOT_FLAG_UNSET;
    2854:	2303      	movs	r3, #3
    2856:	70ab      	strb	r3, [r5, #2]
    2858:	e7e8      	b.n	282c <boot_read_swap_state+0x78>
        state->image_ok = BOOT_FLAG_UNSET;
    285a:	2303      	movs	r3, #3
    285c:	70eb      	strb	r3, [r5, #3]
    return 0;
    285e:	2000      	movs	r0, #0
    2860:	e000      	b.n	2864 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    2862:	2001      	movs	r0, #1
}
    2864:	b007      	add	sp, #28
    2866:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    2868:	2001      	movs	r0, #1
    286a:	e7fb      	b.n	2864 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    286c:	2001      	movs	r0, #1
    286e:	e7f9      	b.n	2864 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    2870:	2001      	movs	r0, #1
    2872:	e7f7      	b.n	2864 <boot_read_swap_state+0xb0>

00002874 <boot_read_swap_state_by_id>:
{
    2874:	b510      	push	{r4, lr}
    2876:	b082      	sub	sp, #8
    2878:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    287a:	a901      	add	r1, sp, #4
    287c:	b2c0      	uxtb	r0, r0
    287e:	f002 fac1 	bl	4e04 <flash_area_open>
    if (rc != 0) {
    2882:	b110      	cbz	r0, 288a <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
    2884:	2001      	movs	r0, #1
}
    2886:	b002      	add	sp, #8
    2888:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    288a:	4621      	mov	r1, r4
    288c:	9801      	ldr	r0, [sp, #4]
    288e:	f7ff ff91 	bl	27b4 <boot_read_swap_state>
    return rc;
    2892:	e7f8      	b.n	2886 <boot_read_swap_state_by_id+0x12>

00002894 <boot_read_swap_size>:
{
    2894:	b530      	push	{r4, r5, lr}
    2896:	b083      	sub	sp, #12
    2898:	460c      	mov	r4, r1
    rc = boot_find_status(image_index, &fap);
    289a:	a901      	add	r1, sp, #4
    289c:	f7ff feda 	bl	2654 <boot_find_status>
    if (rc == 0) {
    28a0:	4603      	mov	r3, r0
    28a2:	b110      	cbz	r0, 28aa <boot_read_swap_size+0x16>
}
    28a4:	4618      	mov	r0, r3
    28a6:	b003      	add	sp, #12
    28a8:	bd30      	pop	{r4, r5, pc}
        off = boot_swap_size_off(fap);
    28aa:	9d01      	ldr	r5, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    28ac:	4628      	mov	r0, r5
    28ae:	f7ff ff7e 	bl	27ae <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    28b2:	2304      	movs	r3, #4
    28b4:	4622      	mov	r2, r4
    28b6:	f1a0 0108 	sub.w	r1, r0, #8
    28ba:	4628      	mov	r0, r5
    28bc:	f002 fafa 	bl	4eb4 <flash_area_read>
    28c0:	4603      	mov	r3, r0
    return rc;
    28c2:	e7ef      	b.n	28a4 <boot_read_swap_size+0x10>

000028c4 <boot_write_magic>:
{
    28c4:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    28c6:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    28c8:	2310      	movs	r3, #16
    28ca:	4a05      	ldr	r2, [pc, #20]	; (28e0 <boot_write_magic+0x1c>)
    28cc:	3910      	subs	r1, #16
    28ce:	f002 fb04 	bl	4eda <flash_area_write>
    if (rc != 0) {
    28d2:	4603      	mov	r3, r0
    28d4:	b908      	cbnz	r0, 28da <boot_write_magic+0x16>
}
    28d6:	4618      	mov	r0, r3
    28d8:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
    28da:	2301      	movs	r3, #1
    28dc:	e7fb      	b.n	28d6 <boot_write_magic+0x12>
    28de:	bf00      	nop
    28e0:	000058c4 	.word	0x000058c4

000028e4 <boot_write_copy_done>:

int
boot_write_copy_done(const struct flash_area *fap)
{
    28e4:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    28e6:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    28e8:	2201      	movs	r2, #1
    28ea:	3920      	subs	r1, #32
    28ec:	f7ff ff17 	bl	271e <boot_write_trailer_flag>
}
    28f0:	bd08      	pop	{r3, pc}

000028f2 <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
    28f2:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    28f4:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    28f6:	2201      	movs	r2, #1
    28f8:	3918      	subs	r1, #24
    28fa:	f7ff ff10 	bl	271e <boot_write_trailer_flag>
}
    28fe:	bd08      	pop	{r3, pc}

00002900 <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
    2900:	b530      	push	{r4, r5, lr}
    2902:	b083      	sub	sp, #12
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2904:	2a0e      	cmp	r2, #14
    2906:	d811      	bhi.n	292c <boot_write_swap_info+0x2c>
    2908:	4605      	mov	r5, r0
    290a:	290e      	cmp	r1, #14
    290c:	d818      	bhi.n	2940 <boot_write_swap_info+0x40>
    290e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    2912:	ac02      	add	r4, sp, #8
    2914:	f804 1d01 	strb.w	r1, [r4, #-1]!
    off = boot_swap_info_off(fap);
    2918:	f7ff ff49 	bl	27ae <boot_swap_info_off>
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    291c:	2301      	movs	r3, #1
    291e:	4622      	mov	r2, r4
    2920:	4601      	mov	r1, r0
    2922:	4628      	mov	r0, r5
    2924:	f7ff fec6 	bl	26b4 <boot_write_trailer>
}
    2928:	b003      	add	sp, #12
    292a:	bd30      	pop	{r4, r5, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    292c:	f7fd fc1a 	bl	164 <hal_debugger_connected>
    2930:	b100      	cbz	r0, 2934 <boot_write_swap_info+0x34>
    2932:	be01      	bkpt	0x0001
    2934:	2300      	movs	r3, #0
    2936:	461a      	mov	r2, r3
    2938:	4619      	mov	r1, r3
    293a:	4618      	mov	r0, r3
    293c:	f7fe ff36 	bl	17ac <__assert_func>
    2940:	f7fd fc10 	bl	164 <hal_debugger_connected>
    2944:	b100      	cbz	r0, 2948 <boot_write_swap_info+0x48>
    2946:	be01      	bkpt	0x0001
    2948:	2300      	movs	r3, #0
    294a:	461a      	mov	r2, r3
    294c:	4619      	mov	r1, r3
    294e:	4618      	mov	r0, r3
    2950:	f7fe ff2c 	bl	17ac <__assert_func>

00002954 <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    2954:	b530      	push	{r4, r5, lr}
    2956:	b083      	sub	sp, #12
    2958:	4605      	mov	r5, r0
    295a:	ac02      	add	r4, sp, #8
    295c:	f844 1d04 	str.w	r1, [r4, #-4]!
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2960:	f7ff ff25 	bl	27ae <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    2964:	2304      	movs	r3, #4
    2966:	4622      	mov	r2, r4
    2968:	f1a0 0108 	sub.w	r1, r0, #8
    296c:	4628      	mov	r0, r5
    296e:	f7ff fea1 	bl	26b4 <boot_write_trailer>
}
    2972:	b003      	add	sp, #12
    2974:	bd30      	pop	{r4, r5, pc}
	...

00002978 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
    2978:	b530      	push	{r4, r5, lr}
    297a:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    297c:	a902      	add	r1, sp, #8
    297e:	2001      	movs	r0, #1
    2980:	f7ff ff78 	bl	2874 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    2984:	2800      	cmp	r0, #0
    2986:	d150      	bne.n	2a2a <boot_swap_type_multi+0xb2>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2988:	4669      	mov	r1, sp
    298a:	2002      	movs	r0, #2
    298c:	f7ff ff72 	bl	2874 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    2990:	2800      	cmp	r0, #0
    2992:	d14d      	bne.n	2a30 <boot_swap_type_multi+0xb8>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    2994:	2400      	movs	r4, #0
    2996:	e007      	b.n	29a8 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2998:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    299a:	2b04      	cmp	r3, #4
    299c:	d028      	beq.n	29f0 <boot_swap_type_multi+0x78>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    299e:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    29a2:	4293      	cmp	r3, r2
    29a4:	d024      	beq.n	29f0 <boot_swap_type_multi+0x78>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    29a6:	3401      	adds	r4, #1
    29a8:	2c02      	cmp	r4, #2
    29aa:	d839      	bhi.n	2a20 <boot_swap_type_multi+0xa8>
        table = boot_swap_tables + i;
    29ac:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    29b0:	0053      	lsls	r3, r2, #1
    29b2:	4a20      	ldr	r2, [pc, #128]	; (2a34 <boot_swap_type_multi+0xbc>)
    29b4:	18d5      	adds	r5, r2, r3
        if (boot_magic_compatible_check(table->magic_primary_slot,
    29b6:	f89d 1008 	ldrb.w	r1, [sp, #8]
    29ba:	5cd0      	ldrb	r0, [r2, r3]
    29bc:	f7ff feba 	bl	2734 <boot_magic_compatible_check>
    29c0:	2800      	cmp	r0, #0
    29c2:	d0f0      	beq.n	29a6 <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    29c4:	f89d 1000 	ldrb.w	r1, [sp]
    29c8:	7868      	ldrb	r0, [r5, #1]
    29ca:	f7ff feb3 	bl	2734 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    29ce:	2800      	cmp	r0, #0
    29d0:	d0e9      	beq.n	29a6 <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    29d2:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
    29d4:	2b04      	cmp	r3, #4
    29d6:	d003      	beq.n	29e0 <boot_swap_type_multi+0x68>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    29d8:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    29dc:	4293      	cmp	r3, r2
    29de:	d1e2      	bne.n	29a6 <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    29e0:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    29e2:	2b04      	cmp	r3, #4
    29e4:	d0d8      	beq.n	2998 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    29e6:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    29ea:	4293      	cmp	r3, r2
    29ec:	d1db      	bne.n	29a6 <boot_swap_type_multi+0x2e>
    29ee:	e7d3      	b.n	2998 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
    29f0:	796b      	ldrb	r3, [r5, #5]
    29f2:	2b02      	cmp	r3, #2
    29f4:	d007      	beq.n	2a06 <boot_swap_type_multi+0x8e>
    29f6:	2b03      	cmp	r3, #3
    29f8:	d010      	beq.n	2a1c <boot_swap_type_multi+0xa4>
    29fa:	2b04      	cmp	r3, #4
    29fc:	d001      	beq.n	2a02 <boot_swap_type_multi+0x8a>
    29fe:	490e      	ldr	r1, [pc, #56]	; (2a38 <boot_swap_type_multi+0xc0>)
    2a00:	e002      	b.n	2a08 <boot_swap_type_multi+0x90>
    2a02:	490e      	ldr	r1, [pc, #56]	; (2a3c <boot_swap_type_multi+0xc4>)
    2a04:	e000      	b.n	2a08 <boot_swap_type_multi+0x90>
    2a06:	490e      	ldr	r1, [pc, #56]	; (2a40 <boot_swap_type_multi+0xc8>)
    2a08:	480e      	ldr	r0, [pc, #56]	; (2a44 <boot_swap_type_multi+0xcc>)
    2a0a:	f002 f91b 	bl	4c44 <printf>
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    2a0e:	7968      	ldrb	r0, [r5, #5]
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
    2a10:	1e83      	subs	r3, r0, #2
    2a12:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    2a14:	2b02      	cmp	r3, #2
    2a16:	d909      	bls.n	2a2c <boot_swap_type_multi+0xb4>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
    2a18:	20ff      	movs	r0, #255	; 0xff
    2a1a:	e007      	b.n	2a2c <boot_swap_type_multi+0xb4>
            BOOT_LOG_INF("Swap type: %s",
    2a1c:	490a      	ldr	r1, [pc, #40]	; (2a48 <boot_swap_type_multi+0xd0>)
    2a1e:	e7f3      	b.n	2a08 <boot_swap_type_multi+0x90>
            }
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    2a20:	480a      	ldr	r0, [pc, #40]	; (2a4c <boot_swap_type_multi+0xd4>)
    2a22:	f001 fe0d 	bl	4640 <puts>
    return BOOT_SWAP_TYPE_NONE;
    2a26:	2001      	movs	r0, #1
    2a28:	e000      	b.n	2a2c <boot_swap_type_multi+0xb4>
        return BOOT_SWAP_TYPE_PANIC;
    2a2a:	20ff      	movs	r0, #255	; 0xff
}
    2a2c:	b005      	add	sp, #20
    2a2e:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
    2a30:	20ff      	movs	r0, #255	; 0xff
    2a32:	e7fb      	b.n	2a2c <boot_swap_type_multi+0xb4>
    2a34:	000058d4 	.word	0x000058d4
    2a38:	000058f8 	.word	0x000058f8
    2a3c:	0000590c 	.word	0x0000590c
    2a40:	000058f0 	.word	0x000058f0
    2a44:	00005914 	.word	0x00005914
    2a48:	000058e8 	.word	0x000058e8
    2a4c:	0000592c 	.word	0x0000592c

00002a50 <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
    2a50:	b510      	push	{r4, lr}
    2a52:	b084      	sub	sp, #16
    2a54:	4604      	mov	r4, r0
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(0),
    2a56:	a901      	add	r1, sp, #4
    2a58:	2002      	movs	r0, #2
    2a5a:	f7ff ff0b 	bl	2874 <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
    2a5e:	4603      	mov	r3, r0
    2a60:	bba8      	cbnz	r0, 2ace <boot_set_pending+0x7e>
        return rc;
    }

    switch (state_secondary_slot.magic) {
    2a62:	f89d 2004 	ldrb.w	r2, [sp, #4]
    2a66:	2a02      	cmp	r2, #2
    2a68:	d02b      	beq.n	2ac2 <boot_set_pending+0x72>
    2a6a:	2a03      	cmp	r2, #3
    2a6c:	d00b      	beq.n	2a86 <boot_set_pending+0x36>
    2a6e:	2a01      	cmp	r2, #1
    2a70:	d02d      	beq.n	2ace <boot_set_pending+0x7e>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
    2a72:	f7fd fb77 	bl	164 <hal_debugger_connected>
    2a76:	b100      	cbz	r0, 2a7a <boot_set_pending+0x2a>
    2a78:	be01      	bkpt	0x0001
    2a7a:	2300      	movs	r3, #0
    2a7c:	461a      	mov	r2, r3
    2a7e:	4619      	mov	r1, r3
    2a80:	4618      	mov	r0, r3
    2a82:	f7fe fe93 	bl	17ac <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
    2a86:	a903      	add	r1, sp, #12
    2a88:	2002      	movs	r0, #2
    2a8a:	f002 f9bb 	bl	4e04 <flash_area_open>
        if (rc != 0) {
    2a8e:	b148      	cbz	r0, 2aa4 <boot_set_pending+0x54>
            rc = BOOT_EFLASH;
    2a90:	2301      	movs	r3, #1
        if (rc == 0) {
    2a92:	b9e3      	cbnz	r3, 2ace <boot_set_pending+0x7e>
            if (permanent) {
    2a94:	b99c      	cbnz	r4, 2abe <boot_set_pending+0x6e>
                swap_type = BOOT_SWAP_TYPE_TEST;
    2a96:	2102      	movs	r1, #2
            rc = boot_write_swap_info(fap, swap_type, 0);
    2a98:	2200      	movs	r2, #0
    2a9a:	9803      	ldr	r0, [sp, #12]
    2a9c:	f7ff ff30 	bl	2900 <boot_write_swap_info>
    2aa0:	4603      	mov	r3, r0
    2aa2:	e014      	b.n	2ace <boot_set_pending+0x7e>
            rc = boot_write_magic(fap);
    2aa4:	9803      	ldr	r0, [sp, #12]
    2aa6:	f7ff ff0d 	bl	28c4 <boot_write_magic>
        if (rc == 0 && permanent) {
    2aaa:	4603      	mov	r3, r0
    2aac:	2800      	cmp	r0, #0
    2aae:	d1f0      	bne.n	2a92 <boot_set_pending+0x42>
    2ab0:	2c00      	cmp	r4, #0
    2ab2:	d0ee      	beq.n	2a92 <boot_set_pending+0x42>
            rc = boot_write_image_ok(fap);
    2ab4:	9803      	ldr	r0, [sp, #12]
    2ab6:	f7ff ff1c 	bl	28f2 <boot_write_image_ok>
    2aba:	4603      	mov	r3, r0
    2abc:	e7e9      	b.n	2a92 <boot_set_pending+0x42>
                swap_type = BOOT_SWAP_TYPE_PERM;
    2abe:	2103      	movs	r1, #3
    2ac0:	e7ea      	b.n	2a98 <boot_set_pending+0x48>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
    2ac2:	a903      	add	r1, sp, #12
    2ac4:	2002      	movs	r0, #2
    2ac6:	f002 f99d 	bl	4e04 <flash_area_open>
        if (rc != 0) {
    2aca:	b118      	cbz	r0, 2ad4 <boot_set_pending+0x84>
            return BOOT_EFLASH;
    2acc:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
    2ace:	4618      	mov	r0, r3
    2ad0:	b004      	add	sp, #16
    2ad2:	bd10      	pop	{r4, pc}
        flash_area_erase(fap, 0, fap->fa_size);
    2ad4:	9803      	ldr	r0, [sp, #12]
    2ad6:	6882      	ldr	r2, [r0, #8]
    2ad8:	2100      	movs	r1, #0
    2ada:	f002 fa11 	bl	4f00 <flash_area_erase>
        return BOOT_EBADIMAGE;
    2ade:	2303      	movs	r3, #3
    2ae0:	e7f5      	b.n	2ace <boot_set_pending+0x7e>
	...

00002ae4 <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
    2ae4:	6802      	ldr	r2, [r0, #0]
    2ae6:	4b0e      	ldr	r3, [pc, #56]	; (2b20 <boot_is_header_valid+0x3c>)
    2ae8:	429a      	cmp	r2, r3
    2aea:	d001      	beq.n	2af0 <boot_is_header_valid+0xc>
        return false;
    2aec:	2000      	movs	r0, #0
    2aee:	4770      	bx	lr
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    2af0:	68c2      	ldr	r2, [r0, #12]
    2af2:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
    2af4:	43d8      	mvns	r0, r3
    2af6:	4282      	cmp	r2, r0
    2af8:	d80a      	bhi.n	2b10 <boot_is_header_valid+0x2c>
{
    2afa:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
    2afc:	18d4      	adds	r4, r2, r3
        return true;
    2afe:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    2b00:	b110      	cbz	r0, 2b08 <boot_is_header_valid+0x24>
        return false;
    }

    if (size >= fap->fa_size) {
    2b02:	688b      	ldr	r3, [r1, #8]
    2b04:	42a3      	cmp	r3, r4
    2b06:	d901      	bls.n	2b0c <boot_is_header_valid+0x28>
        return false;
    }

    return true;
}
    2b08:	bc10      	pop	{r4}
    2b0a:	4770      	bx	lr
        return false;
    2b0c:	2000      	movs	r0, #0
    2b0e:	e7fb      	b.n	2b08 <boot_is_header_valid+0x24>
        return false;
    2b10:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    2b12:	b110      	cbz	r0, 2b1a <boot_is_header_valid+0x36>
    if (size >= fap->fa_size) {
    2b14:	688b      	ldr	r3, [r1, #8]
    2b16:	42a3      	cmp	r3, r4
    2b18:	d900      	bls.n	2b1c <boot_is_header_valid+0x38>
}
    2b1a:	4770      	bx	lr
        return false;
    2b1c:	2000      	movs	r0, #0
    2b1e:	e7fc      	b.n	2b1a <boot_is_header_valid+0x36>
    2b20:	96f3b83d 	.word	0x96f3b83d

00002b24 <boot_write_sz>:
{
    2b24:	b538      	push	{r3, r4, r5, lr}
    2b26:	4604      	mov	r4, r0
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    2b28:	6a00      	ldr	r0, [r0, #32]
    2b2a:	f002 f9fc 	bl	4f26 <flash_area_align>
    2b2e:	4605      	mov	r5, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    2b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2b32:	f002 f9f8 	bl	4f26 <flash_area_align>
    if (align > elem_sz) {
    2b36:	4285      	cmp	r5, r0
    2b38:	d200      	bcs.n	2b3c <boot_write_sz+0x18>
}
    2b3a:	bd38      	pop	{r3, r4, r5, pc}
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    2b3c:	4628      	mov	r0, r5
    return elem_sz;
    2b3e:	e7fc      	b.n	2b3a <boot_write_sz+0x16>

00002b40 <boot_read_image_size>:
{
    2b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b44:	b082      	sub	sp, #8
    2b46:	4680      	mov	r8, r0
    2b48:	460d      	mov	r5, r1
    2b4a:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2b4c:	2000      	movs	r0, #0
    2b4e:	f001 fa3d 	bl	3fcc <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    2b52:	a901      	add	r1, sp, #4
    2b54:	b2c0      	uxtb	r0, r0
    2b56:	f002 f955 	bl	4e04 <flash_area_open>
    if (rc != 0) {
    2b5a:	b120      	cbz	r0, 2b66 <boot_read_image_size+0x26>
        rc = BOOT_EFLASH;
    2b5c:	2401      	movs	r4, #1
}
    2b5e:	4620      	mov	r0, r4
    2b60:	b002      	add	sp, #8
    2b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    2b66:	232c      	movs	r3, #44	; 0x2c
    2b68:	fb03 8305 	mla	r3, r3, r5, r8
    2b6c:	891e      	ldrh	r6, [r3, #8]
    2b6e:	68db      	ldr	r3, [r3, #12]
    2b70:	441e      	add	r6, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    2b72:	2304      	movs	r3, #4
    2b74:	466a      	mov	r2, sp
    2b76:	4631      	mov	r1, r6
    2b78:	9801      	ldr	r0, [sp, #4]
    2b7a:	f002 f99b 	bl	4eb4 <flash_area_read>
    2b7e:	4604      	mov	r4, r0
    2b80:	bb30      	cbnz	r0, 2bd0 <boot_read_image_size+0x90>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    2b82:	232c      	movs	r3, #44	; 0x2c
    2b84:	fb03 8505 	mla	r5, r3, r5, r8
    2b88:	896d      	ldrh	r5, [r5, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    2b8a:	f8bd 2000 	ldrh.w	r2, [sp]
    2b8e:	f646 1308 	movw	r3, #26888	; 0x6908
    2b92:	429a      	cmp	r2, r3
    2b94:	d00c      	beq.n	2bb0 <boot_read_image_size+0x70>
    } else if (protect_tlv_size != 0) {
    2b96:	b9ed      	cbnz	r5, 2bd4 <boot_read_image_size+0x94>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    2b98:	f8bd 2000 	ldrh.w	r2, [sp]
    2b9c:	f646 1307 	movw	r3, #26887	; 0x6907
    2ba0:	429a      	cmp	r2, r3
    2ba2:	d119      	bne.n	2bd8 <boot_read_image_size+0x98>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    2ba4:	442e      	add	r6, r5
    2ba6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    2baa:	441e      	add	r6, r3
    2bac:	603e      	str	r6, [r7, #0]
    2bae:	e7d6      	b.n	2b5e <boot_read_image_size+0x1e>
        if (protect_tlv_size != info.it_tlv_tot) {
    2bb0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    2bb4:	428d      	cmp	r5, r1
    2bb6:	d001      	beq.n	2bbc <boot_read_image_size+0x7c>
            rc = BOOT_EBADIMAGE;
    2bb8:	2403      	movs	r4, #3
    2bba:	e7d0      	b.n	2b5e <boot_read_image_size+0x1e>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    2bbc:	2304      	movs	r3, #4
    2bbe:	466a      	mov	r2, sp
    2bc0:	4431      	add	r1, r6
    2bc2:	9801      	ldr	r0, [sp, #4]
    2bc4:	f002 f976 	bl	4eb4 <flash_area_read>
    2bc8:	2800      	cmp	r0, #0
    2bca:	d0e5      	beq.n	2b98 <boot_read_image_size+0x58>
            rc = BOOT_EFLASH;
    2bcc:	2401      	movs	r4, #1
    2bce:	e7c6      	b.n	2b5e <boot_read_image_size+0x1e>
        rc = BOOT_EFLASH;
    2bd0:	2401      	movs	r4, #1
    2bd2:	e7c4      	b.n	2b5e <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    2bd4:	2403      	movs	r4, #3
    2bd6:	e7c2      	b.n	2b5e <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    2bd8:	2403      	movs	r4, #3
    return rc;
    2bda:	e7c0      	b.n	2b5e <boot_read_image_size+0x1e>

00002bdc <boot_check_header_erased>:
    return true;
}

static int
boot_check_header_erased(struct boot_loader_state *state, int slot)
{
    2bdc:	b570      	push	{r4, r5, r6, lr}
    2bde:	b082      	sub	sp, #8
    2be0:	4606      	mov	r6, r0
    2be2:	460c      	mov	r4, r1
    struct image_header *hdr;
    uint8_t erased_val;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2be4:	2000      	movs	r0, #0
    2be6:	f001 f9f1 	bl	3fcc <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    2bea:	a901      	add	r1, sp, #4
    2bec:	b2c0      	uxtb	r0, r0
    2bee:	f002 f909 	bl	4e04 <flash_area_open>
    if (rc != 0) {
    2bf2:	b9d0      	cbnz	r0, 2c2a <boot_check_header_erased+0x4e>
    2bf4:	4605      	mov	r5, r0
        return -1;
    }

    erased_val = flash_area_erased_val(fap);
    2bf6:	9801      	ldr	r0, [sp, #4]
    2bf8:	f002 f99a 	bl	4f30 <flash_area_erased_val>
    2bfc:	b2c0      	uxtb	r0, r0
    flash_area_close(fap);

    hdr = boot_img_hdr(state, slot);
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    2bfe:	212c      	movs	r1, #44	; 0x2c
    2c00:	fb01 6104 	mla	r1, r1, r4, r6
    for (i = 0; i < len; i++) {
    2c04:	2300      	movs	r3, #0
    2c06:	2b03      	cmp	r3, #3
    2c08:	d805      	bhi.n	2c16 <boot_check_header_erased+0x3a>
        if (val != p[i]) {
    2c0a:	5cca      	ldrb	r2, [r1, r3]
    2c0c:	4290      	cmp	r0, r2
    2c0e:	d107      	bne.n	2c20 <boot_check_header_erased+0x44>
    for (i = 0; i < len; i++) {
    2c10:	3301      	adds	r3, #1
    2c12:	b2db      	uxtb	r3, r3
    2c14:	e7f7      	b.n	2c06 <boot_check_header_erased+0x2a>
    return true;
    2c16:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    2c18:	b123      	cbz	r3, 2c24 <boot_check_header_erased+0x48>
        return -1;
    }

    return 0;
}
    2c1a:	4628      	mov	r0, r5
    2c1c:	b002      	add	sp, #8
    2c1e:	bd70      	pop	{r4, r5, r6, pc}
            return false;
    2c20:	2300      	movs	r3, #0
    2c22:	e7f9      	b.n	2c18 <boot_check_header_erased+0x3c>
        return -1;
    2c24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2c28:	e7f7      	b.n	2c1a <boot_check_header_erased+0x3e>
        return -1;
    2c2a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2c2e:	e7f4      	b.n	2c1a <boot_check_header_erased+0x3e>

00002c30 <boot_initialize_area>:
{
    2c30:	b510      	push	{r4, lr}
    2c32:	b082      	sub	sp, #8
    2c34:	4604      	mov	r4, r0
    2c36:	4608      	mov	r0, r1
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    2c38:	2380      	movs	r3, #128	; 0x80
    2c3a:	9301      	str	r3, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    2c3c:	2901      	cmp	r1, #1
    2c3e:	d006      	beq.n	2c4e <boot_initialize_area+0x1e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    2c40:	2902      	cmp	r1, #2
    2c42:	d00b      	beq.n	2c5c <boot_initialize_area+0x2c>
    } else if (flash_area == FLASH_AREA_IMAGE_SCRATCH) {
    2c44:	2903      	cmp	r1, #3
    2c46:	d010      	beq.n	2c6a <boot_initialize_area+0x3a>
        return BOOT_EFLASH;
    2c48:	2001      	movs	r0, #1
}
    2c4a:	b002      	add	sp, #8
    2c4c:	bd10      	pop	{r4, pc}
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    2c4e:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2c50:	a901      	add	r1, sp, #4
    2c52:	f002 f8f1 	bl	4e38 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors = (size_t)num_sectors;
    2c56:	9b01      	ldr	r3, [sp, #4]
    2c58:	62a3      	str	r3, [r4, #40]	; 0x28
    2c5a:	e7f6      	b.n	2c4a <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    2c5c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    2c5e:	a901      	add	r1, sp, #4
    2c60:	f002 f8ea 	bl	4e38 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors = (size_t)num_sectors;
    2c64:	9b01      	ldr	r3, [sp, #4]
    2c66:	6563      	str	r3, [r4, #84]	; 0x54
    2c68:	e7ef      	b.n	2c4a <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    2c6a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    2c6c:	a901      	add	r1, sp, #4
    2c6e:	f002 f8e3 	bl	4e38 <flash_area_to_sectors>
        state->scratch.num_sectors = (size_t)num_sectors;
    2c72:	9b01      	ldr	r3, [sp, #4]
    2c74:	6623      	str	r3, [r4, #96]	; 0x60
    2c76:	e7e8      	b.n	2c4a <boot_initialize_area+0x1a>

00002c78 <boot_read_sectors>:
{
    2c78:	b538      	push	{r3, r4, r5, lr}
    2c7a:	4605      	mov	r5, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    2c7c:	2101      	movs	r1, #1
    2c7e:	f7ff ffd7 	bl	2c30 <boot_initialize_area>
    if (rc != 0) {
    2c82:	b110      	cbz	r0, 2c8a <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    2c84:	2401      	movs	r4, #1
}
    2c86:	4620      	mov	r0, r4
    2c88:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    2c8a:	2102      	movs	r1, #2
    2c8c:	4628      	mov	r0, r5
    2c8e:	f7ff ffcf 	bl	2c30 <boot_initialize_area>
    if (rc != 0) {
    2c92:	b108      	cbz	r0, 2c98 <boot_read_sectors+0x20>
        return BOOT_EFLASH;
    2c94:	2401      	movs	r4, #1
    2c96:	e7f6      	b.n	2c86 <boot_read_sectors+0xe>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SCRATCH);
    2c98:	2103      	movs	r1, #3
    2c9a:	4628      	mov	r0, r5
    2c9c:	f7ff ffc8 	bl	2c30 <boot_initialize_area>
    if (rc != 0) {
    2ca0:	4604      	mov	r4, r0
    2ca2:	b108      	cbz	r0, 2ca8 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    2ca4:	2401      	movs	r4, #1
    2ca6:	e7ee      	b.n	2c86 <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    2ca8:	4628      	mov	r0, r5
    2caa:	f7ff ff3b 	bl	2b24 <boot_write_sz>
    2cae:	66a8      	str	r0, [r5, #104]	; 0x68
    return 0;
    2cb0:	e7e9      	b.n	2c86 <boot_read_sectors+0xe>
	...

00002cb4 <boot_image_check>:
{
    2cb4:	b500      	push	{lr}
    2cb6:	b087      	sub	sp, #28
    if (bootutil_img_validate(BOOT_CURR_ENC(state), image_index, hdr, fap, tmpbuf,
    2cb8:	2000      	movs	r0, #0
    2cba:	9004      	str	r0, [sp, #16]
    2cbc:	9003      	str	r0, [sp, #12]
    2cbe:	9002      	str	r0, [sp, #8]
    2cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
    2cc4:	9301      	str	r3, [sp, #4]
    2cc6:	4b07      	ldr	r3, [pc, #28]	; (2ce4 <boot_image_check+0x30>)
    2cc8:	9300      	str	r3, [sp, #0]
    2cca:	4613      	mov	r3, r2
    2ccc:	460a      	mov	r2, r1
    2cce:	4601      	mov	r1, r0
    2cd0:	f001 f85e 	bl	3d90 <bootutil_img_validate>
    2cd4:	4603      	mov	r3, r0
    2cd6:	b918      	cbnz	r0, 2ce0 <boot_image_check+0x2c>
}
    2cd8:	4618      	mov	r0, r3
    2cda:	b007      	add	sp, #28
    2cdc:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EBADIMAGE;
    2ce0:	2303      	movs	r3, #3
    2ce2:	e7f9      	b.n	2cd8 <boot_image_check+0x24>
    2ce4:	20006280 	.word	0x20006280

00002ce8 <boot_validate_slot>:
 *         -1 on any errors
 */
static int
boot_validate_slot(struct boot_loader_state *state, int slot,
                   struct boot_status *bs)
{
    2ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2cec:	b082      	sub	sp, #8
    2cee:	4605      	mov	r5, r0
    2cf0:	460c      	mov	r4, r1
    2cf2:	4617      	mov	r7, r2
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2cf4:	2000      	movs	r0, #0
    2cf6:	f001 f969 	bl	3fcc <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    2cfa:	a901      	add	r1, sp, #4
    2cfc:	b2c0      	uxtb	r0, r0
    2cfe:	f002 f881 	bl	4e04 <flash_area_open>
    if (rc != 0) {
    2d02:	bb60      	cbnz	r0, 2d5e <boot_validate_slot+0x76>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
    2d04:	202c      	movs	r0, #44	; 0x2c
    2d06:	fb00 5604 	mla	r6, r0, r4, r5
        return -1;
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
    2d0a:	4621      	mov	r1, r4
    2d0c:	4628      	mov	r0, r5
    2d0e:	f7ff ff65 	bl	2bdc <boot_check_header_erased>
    2d12:	b338      	cbz	r0, 2d64 <boot_validate_slot+0x7c>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
    2d14:	6933      	ldr	r3, [r6, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
    2d16:	f013 0f10 	tst.w	r3, #16
    2d1a:	d128      	bne.n	2d6e <boot_validate_slot+0x86>
            goto out;
        }
    }
#endif

    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    2d1c:	f8dd 8004 	ldr.w	r8, [sp, #4]
    2d20:	4641      	mov	r1, r8
    2d22:	4630      	mov	r0, r6
    2d24:	f7ff fede 	bl	2ae4 <boot_is_header_valid>
    2d28:	b938      	cbnz	r0, 2d3a <boot_validate_slot+0x52>
        if (slot != BOOT_PRIMARY_SLOT) {
    2d2a:	b984      	cbnz	r4, 2d4e <boot_validate_slot+0x66>
            /* Image in the secondary slot is invalid. Erase the image and
             * continue booting from the primary slot.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
    2d2c:	b9ac      	cbnz	r4, 2d5a <boot_validate_slot+0x72>
    2d2e:	4911      	ldr	r1, [pc, #68]	; (2d74 <boot_validate_slot+0x8c>)
    2d30:	4811      	ldr	r0, [pc, #68]	; (2d78 <boot_validate_slot+0x90>)
    2d32:	f001 ff87 	bl	4c44 <printf>
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        rc = 1;
    2d36:	2301      	movs	r3, #1
        goto out;
    2d38:	e015      	b.n	2d66 <boot_validate_slot+0x7e>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    2d3a:	463b      	mov	r3, r7
    2d3c:	4642      	mov	r2, r8
    2d3e:	4631      	mov	r1, r6
    2d40:	4628      	mov	r0, r5
    2d42:	f7ff ffb7 	bl	2cb4 <boot_image_check>
    2d46:	4603      	mov	r3, r0
    2d48:	2800      	cmp	r0, #0
    2d4a:	d1ee      	bne.n	2d2a <boot_validate_slot+0x42>
    2d4c:	e00b      	b.n	2d66 <boot_validate_slot+0x7e>
            flash_area_erase(fap, 0, fap->fa_size);
    2d4e:	9801      	ldr	r0, [sp, #4]
    2d50:	6882      	ldr	r2, [r0, #8]
    2d52:	2100      	movs	r1, #0
    2d54:	f002 f8d4 	bl	4f00 <flash_area_erase>
    2d58:	e7e8      	b.n	2d2c <boot_validate_slot+0x44>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
    2d5a:	4908      	ldr	r1, [pc, #32]	; (2d7c <boot_validate_slot+0x94>)
    2d5c:	e7e8      	b.n	2d30 <boot_validate_slot+0x48>
        return -1;
    2d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2d62:	e000      	b.n	2d66 <boot_validate_slot+0x7e>
        rc = 1;
    2d64:	2301      	movs	r3, #1
    rc = 0;

out:
    flash_area_close(fap);
    return rc;
}
    2d66:	4618      	mov	r0, r3
    2d68:	b002      	add	sp, #8
    2d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
    2d6e:	2301      	movs	r3, #1
    2d70:	e7f9      	b.n	2d66 <boot_validate_slot+0x7e>
    2d72:	bf00      	nop
    2d74:	000059f4 	.word	0x000059f4
    2d78:	00005a08 	.word	0x00005a08
    2d7c:	000059fc 	.word	0x000059fc

00002d80 <boot_validated_swap_type>:
 * @return                      The type of swap to perform (BOOT_SWAP_TYPE...)
 */
static int
boot_validated_swap_type(struct boot_loader_state *state,
                         struct boot_status *bs)
{
    2d80:	b570      	push	{r4, r5, r6, lr}
    2d82:	4605      	mov	r5, r0
    2d84:	460e      	mov	r6, r1
    int swap_type;
    int rc;

    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    2d86:	2000      	movs	r0, #0
    2d88:	f7ff fdf6 	bl	2978 <boot_swap_type_multi>
    2d8c:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    2d8e:	2802      	cmp	r0, #2
    2d90:	d005      	beq.n	2d9e <boot_validated_swap_type+0x1e>
    2d92:	2804      	cmp	r0, #4
    2d94:	d003      	beq.n	2d9e <boot_validated_swap_type+0x1e>
    2d96:	2803      	cmp	r0, #3
    2d98:	d001      	beq.n	2d9e <boot_validated_swap_type+0x1e>
            swap_type = BOOT_SWAP_TYPE_FAIL;
        }
    }

    return swap_type;
}
    2d9a:	4620      	mov	r0, r4
    2d9c:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs);
    2d9e:	4632      	mov	r2, r6
    2da0:	2101      	movs	r1, #1
    2da2:	4628      	mov	r0, r5
    2da4:	f7ff ffa0 	bl	2ce8 <boot_validate_slot>
        if (rc == 1) {
    2da8:	2801      	cmp	r0, #1
    2daa:	d003      	beq.n	2db4 <boot_validated_swap_type+0x34>
        } else if (rc != 0) {
    2dac:	2800      	cmp	r0, #0
    2dae:	d0f4      	beq.n	2d9a <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    2db0:	2405      	movs	r4, #5
    return swap_type;
    2db2:	e7f2      	b.n	2d9a <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_NONE;
    2db4:	4604      	mov	r4, r0
    2db6:	e7f0      	b.n	2d9a <boot_validated_swap_type+0x1a>

00002db8 <boot_read_image_headers>:
{
    2db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dba:	4605      	mov	r5, r0
    2dbc:	460f      	mov	r7, r1
    2dbe:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    2dc0:	2400      	movs	r4, #0
    2dc2:	2c01      	cmp	r4, #1
    2dc4:	dc10      	bgt.n	2de8 <boot_read_image_headers+0x30>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    2dc6:	4633      	mov	r3, r6
    2dc8:	222c      	movs	r2, #44	; 0x2c
    2dca:	fb02 5204 	mla	r2, r2, r4, r5
    2dce:	4621      	mov	r1, r4
    2dd0:	4628      	mov	r0, r5
    2dd2:	f000 fdae 	bl	3932 <boot_read_image_header>
        if (rc != 0) {
    2dd6:	4603      	mov	r3, r0
    2dd8:	b908      	cbnz	r0, 2dde <boot_read_image_headers+0x26>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    2dda:	3401      	adds	r4, #1
    2ddc:	e7f1      	b.n	2dc2 <boot_read_image_headers+0xa>
            if (i > 0 && !require_all) {
    2dde:	2c00      	cmp	r4, #0
    2de0:	dd03      	ble.n	2dea <boot_read_image_headers+0x32>
    2de2:	b917      	cbnz	r7, 2dea <boot_read_image_headers+0x32>
                return 0;
    2de4:	2300      	movs	r3, #0
    2de6:	e000      	b.n	2dea <boot_read_image_headers+0x32>
    return 0;
    2de8:	2300      	movs	r3, #0
}
    2dea:	4618      	mov	r0, r3
    2dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002dee <boot_status_reset>:
    bs->use_scratch = 0;
    2dee:	2300      	movs	r3, #0
    2df0:	7183      	strb	r3, [r0, #6]
    bs->swap_size = 0;
    2df2:	6083      	str	r3, [r0, #8]
    bs->source = 0;
    2df4:	60c3      	str	r3, [r0, #12]
    bs->op = BOOT_STATUS_OP_MOVE;
    2df6:	2301      	movs	r3, #1
    2df8:	7143      	strb	r3, [r0, #5]
    bs->idx = BOOT_STATUS_IDX_0;
    2dfa:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    2dfc:	7103      	strb	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    2dfe:	71c3      	strb	r3, [r0, #7]
}
    2e00:	4770      	bx	lr

00002e02 <boot_status_is_reset>:
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    2e02:	7943      	ldrb	r3, [r0, #5]
            bs->idx == BOOT_STATUS_IDX_0 &&
    2e04:	2b01      	cmp	r3, #1
    2e06:	d001      	beq.n	2e0c <boot_status_is_reset+0xa>
    2e08:	2000      	movs	r0, #0
    2e0a:	4770      	bx	lr
    2e0c:	6803      	ldr	r3, [r0, #0]
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    2e0e:	2b01      	cmp	r3, #1
    2e10:	d001      	beq.n	2e16 <boot_status_is_reset+0x14>
            bs->idx == BOOT_STATUS_IDX_0 &&
    2e12:	2000      	movs	r0, #0
    2e14:	4770      	bx	lr
            bs->state == BOOT_STATUS_STATE_0);
    2e16:	7903      	ldrb	r3, [r0, #4]
            bs->idx == BOOT_STATUS_IDX_0 &&
    2e18:	2b01      	cmp	r3, #1
    2e1a:	d001      	beq.n	2e20 <boot_status_is_reset+0x1e>
    2e1c:	2000      	movs	r0, #0
    2e1e:	4770      	bx	lr
    2e20:	2001      	movs	r0, #1
}
    2e22:	4770      	bx	lr

00002e24 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
    2e24:	b530      	push	{r4, r5, lr}
    2e26:	b083      	sub	sp, #12
    2e28:	4605      	mov	r5, r0
    2e2a:	460c      	mov	r4, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
    2e2c:	2300      	movs	r3, #0
    2e2e:	9300      	str	r3, [sp, #0]
    2e30:	9301      	str	r3, [sp, #4]
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
    2e32:	4608      	mov	r0, r1
    2e34:	f7ff ffe5 	bl	2e02 <boot_status_is_reset>
    2e38:	2800      	cmp	r0, #0
    2e3a:	d038      	beq.n	2eae <boot_swap_image+0x8a>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    2e3c:	682a      	ldr	r2, [r5, #0]
    2e3e:	4b25      	ldr	r3, [pc, #148]	; (2ed4 <boot_swap_image+0xb0>)
    2e40:	429a      	cmp	r2, r3
    2e42:	d012      	beq.n	2e6a <boot_swap_image+0x46>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    2e44:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    2e46:	4b23      	ldr	r3, [pc, #140]	; (2ed4 <boot_swap_image+0xb0>)
    2e48:	429a      	cmp	r2, r3
    2e4a:	d01f      	beq.n	2e8c <boot_swap_image+0x68>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
    2e4c:	9b01      	ldr	r3, [sp, #4]
    2e4e:	9a00      	ldr	r2, [sp, #0]
    2e50:	4293      	cmp	r3, r2
    2e52:	d900      	bls.n	2e56 <boot_swap_image+0x32>
            copy_size = size;
    2e54:	9300      	str	r3, [sp, #0]
        }

        bs->swap_size = copy_size;
    2e56:	9b00      	ldr	r3, [sp, #0]
    2e58:	60a3      	str	r3, [r4, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
    2e5a:	9a00      	ldr	r2, [sp, #0]
    2e5c:	4621      	mov	r1, r4
    2e5e:	4628      	mov	r0, r5
    2e60:	f000 ff18 	bl	3c94 <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
    2e64:	2000      	movs	r0, #0
    2e66:	b003      	add	sp, #12
    2e68:	bd30      	pop	{r4, r5, pc}
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
    2e6a:	466a      	mov	r2, sp
    2e6c:	2100      	movs	r1, #0
    2e6e:	4628      	mov	r0, r5
    2e70:	f7ff fe66 	bl	2b40 <boot_read_image_size>
            assert(rc == 0);
    2e74:	2800      	cmp	r0, #0
    2e76:	d0e5      	beq.n	2e44 <boot_swap_image+0x20>
    2e78:	f7fd f974 	bl	164 <hal_debugger_connected>
    2e7c:	b100      	cbz	r0, 2e80 <boot_swap_image+0x5c>
    2e7e:	be01      	bkpt	0x0001
    2e80:	2300      	movs	r3, #0
    2e82:	461a      	mov	r2, r3
    2e84:	4619      	mov	r1, r3
    2e86:	4618      	mov	r0, r3
    2e88:	f7fe fc90 	bl	17ac <__assert_func>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
    2e8c:	aa01      	add	r2, sp, #4
    2e8e:	2101      	movs	r1, #1
    2e90:	4628      	mov	r0, r5
    2e92:	f7ff fe55 	bl	2b40 <boot_read_image_size>
            assert(rc == 0);
    2e96:	2800      	cmp	r0, #0
    2e98:	d0d8      	beq.n	2e4c <boot_swap_image+0x28>
    2e9a:	f7fd f963 	bl	164 <hal_debugger_connected>
    2e9e:	b100      	cbz	r0, 2ea2 <boot_swap_image+0x7e>
    2ea0:	be01      	bkpt	0x0001
    2ea2:	2300      	movs	r3, #0
    2ea4:	461a      	mov	r2, r3
    2ea6:	4619      	mov	r1, r3
    2ea8:	4618      	mov	r0, r3
    2eaa:	f7fe fc7f 	bl	17ac <__assert_func>
        rc = boot_read_swap_size(image_index, &bs->swap_size);
    2eae:	f104 0108 	add.w	r1, r4, #8
    2eb2:	2000      	movs	r0, #0
    2eb4:	f7ff fcee 	bl	2894 <boot_read_swap_size>
        assert(rc == 0);
    2eb8:	b910      	cbnz	r0, 2ec0 <boot_swap_image+0x9c>
        copy_size = bs->swap_size;
    2eba:	68a3      	ldr	r3, [r4, #8]
    2ebc:	9300      	str	r3, [sp, #0]
    2ebe:	e7cc      	b.n	2e5a <boot_swap_image+0x36>
        assert(rc == 0);
    2ec0:	f7fd f950 	bl	164 <hal_debugger_connected>
    2ec4:	b100      	cbz	r0, 2ec8 <boot_swap_image+0xa4>
    2ec6:	be01      	bkpt	0x0001
    2ec8:	2300      	movs	r3, #0
    2eca:	461a      	mov	r2, r3
    2ecc:	4619      	mov	r1, r3
    2ece:	4618      	mov	r0, r3
    2ed0:	f7fe fc6c 	bl	17ac <__assert_func>
    2ed4:	96f3b83d 	.word	0x96f3b83d

00002ed8 <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
    2ed8:	b538      	push	{r3, r4, r5, lr}
    2eda:	4605      	mov	r5, r0
    2edc:	460c      	mov	r4, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
    2ede:	f7ff ffa1 	bl	2e24 <boot_swap_image>
    assert(rc == 0);
    2ee2:	b9a8      	cbnz	r0, 2f10 <boot_complete_partial_swap+0x38>
    2ee4:	4602      	mov	r2, r0

    BOOT_SWAP_TYPE(state) = bs->swap_type;
    2ee6:	79e3      	ldrb	r3, [r4, #7]
    2ee8:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
    2eec:	79e3      	ldrb	r3, [r4, #7]
    2eee:	3b03      	subs	r3, #3
    2ef0:	b2db      	uxtb	r3, r3
    2ef2:	2b01      	cmp	r3, #1
    2ef4:	d916      	bls.n	2f24 <boot_complete_partial_swap+0x4c>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
    2ef6:	79e3      	ldrb	r3, [r4, #7]
    2ef8:	2b02      	cmp	r3, #2
    2efa:	d01d      	beq.n	2f38 <boot_complete_partial_swap+0x60>
    2efc:	2b04      	cmp	r3, #4
    2efe:	d01b      	beq.n	2f38 <boot_complete_partial_swap+0x60>
    2f00:	2b03      	cmp	r3, #3
    2f02:	d019      	beq.n	2f38 <boot_complete_partial_swap+0x60>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    2f04:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    2f08:	2bff      	cmp	r3, #255	; 0xff
    2f0a:	d01f      	beq.n	2f4c <boot_complete_partial_swap+0x74>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
    2f0c:	4610      	mov	r0, r2
    2f0e:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    2f10:	f7fd f928 	bl	164 <hal_debugger_connected>
    2f14:	b100      	cbz	r0, 2f18 <boot_complete_partial_swap+0x40>
    2f16:	be01      	bkpt	0x0001
    2f18:	2300      	movs	r3, #0
    2f1a:	461a      	mov	r2, r3
    2f1c:	4619      	mov	r1, r3
    2f1e:	4618      	mov	r0, r3
    2f20:	f7fe fc44 	bl	17ac <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2f24:	2000      	movs	r0, #0
    2f26:	f000 fad7 	bl	34d8 <swap_set_image_ok>
        if (rc != 0) {
    2f2a:	4602      	mov	r2, r0
    2f2c:	2800      	cmp	r0, #0
    2f2e:	d0e2      	beq.n	2ef6 <boot_complete_partial_swap+0x1e>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2f30:	23ff      	movs	r3, #255	; 0xff
    2f32:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    2f36:	e7de      	b.n	2ef6 <boot_complete_partial_swap+0x1e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    2f38:	2000      	movs	r0, #0
    2f3a:	f000 fabe 	bl	34ba <swap_set_copy_done>
        if (rc != 0) {
    2f3e:	4602      	mov	r2, r0
    2f40:	2800      	cmp	r0, #0
    2f42:	d0df      	beq.n	2f04 <boot_complete_partial_swap+0x2c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2f44:	23ff      	movs	r3, #255	; 0xff
    2f46:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    2f4a:	e7db      	b.n	2f04 <boot_complete_partial_swap+0x2c>
        BOOT_LOG_ERR("panic!");
    2f4c:	4806      	ldr	r0, [pc, #24]	; (2f68 <boot_complete_partial_swap+0x90>)
    2f4e:	f001 fb77 	bl	4640 <puts>
        assert(0);
    2f52:	f7fd f907 	bl	164 <hal_debugger_connected>
    2f56:	b100      	cbz	r0, 2f5a <boot_complete_partial_swap+0x82>
    2f58:	be01      	bkpt	0x0001
    2f5a:	2300      	movs	r3, #0
    2f5c:	461a      	mov	r2, r3
    2f5e:	4619      	mov	r1, r3
    2f60:	4618      	mov	r0, r3
    2f62:	f7fe fc23 	bl	17ac <__assert_func>
    2f66:	bf00      	nop
    2f68:	00005944 	.word	0x00005944

00002f6c <boot_perform_update>:
{
    2f6c:	b538      	push	{r3, r4, r5, lr}
    2f6e:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    2f70:	f7ff ff58 	bl	2e24 <boot_swap_image>
    assert(rc == 0);
    2f74:	b9b0      	cbnz	r0, 2fa4 <boot_perform_update+0x38>
    2f76:	4602      	mov	r2, r0
    swap_type = BOOT_SWAP_TYPE(state);
    2f78:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    2f7c:	1ee3      	subs	r3, r4, #3
    2f7e:	b2db      	uxtb	r3, r3
    2f80:	2b01      	cmp	r3, #1
    2f82:	d919      	bls.n	2fb8 <boot_perform_update+0x4c>
    if (BOOT_IS_UPGRADE(swap_type)) {
    2f84:	2c02      	cmp	r4, #2
    2f86:	d003      	beq.n	2f90 <boot_perform_update+0x24>
    2f88:	2c04      	cmp	r4, #4
    2f8a:	d001      	beq.n	2f90 <boot_perform_update+0x24>
    2f8c:	2c03      	cmp	r4, #3
    2f8e:	d107      	bne.n	2fa0 <boot_perform_update+0x34>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    2f90:	2000      	movs	r0, #0
    2f92:	f000 fa92 	bl	34ba <swap_set_copy_done>
        if (rc != 0) {
    2f96:	4602      	mov	r2, r0
    2f98:	b110      	cbz	r0, 2fa0 <boot_perform_update+0x34>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2f9a:	23ff      	movs	r3, #255	; 0xff
    2f9c:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    2fa0:	4610      	mov	r0, r2
    2fa2:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    2fa4:	f7fd f8de 	bl	164 <hal_debugger_connected>
    2fa8:	b100      	cbz	r0, 2fac <boot_perform_update+0x40>
    2faa:	be01      	bkpt	0x0001
    2fac:	2300      	movs	r3, #0
    2fae:	461a      	mov	r2, r3
    2fb0:	4619      	mov	r1, r3
    2fb2:	4618      	mov	r0, r3
    2fb4:	f7fe fbfa 	bl	17ac <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2fb8:	2000      	movs	r0, #0
    2fba:	f000 fa8d 	bl	34d8 <swap_set_image_ok>
        if (rc != 0) {
    2fbe:	4602      	mov	r2, r0
    2fc0:	2800      	cmp	r0, #0
    2fc2:	d0df      	beq.n	2f84 <boot_perform_update+0x18>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    2fc4:	24ff      	movs	r4, #255	; 0xff
    2fc6:	f885 4064 	strb.w	r4, [r5, #100]	; 0x64
    2fca:	e7dd      	b.n	2f88 <boot_perform_update+0x1c>

00002fcc <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
    2fcc:	b538      	push	{r3, r4, r5, lr}
    2fce:	4604      	mov	r4, r0
    2fd0:	460d      	mov	r5, r1
    int rc;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
    2fd2:	f7ff fe51 	bl	2c78 <boot_read_sectors>
    if (rc != 0) {
    2fd6:	b968      	cbnz	r0, 2ff4 <boot_prepare_image_for_update+0x28>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
        return;
    }

    /* Attempt to read an image header from each slot. */
    rc = boot_read_image_headers(state, false, NULL);
    2fd8:	2200      	movs	r2, #0
    2fda:	4611      	mov	r1, r2
    2fdc:	4620      	mov	r0, r4
    2fde:	f7ff feeb 	bl	2db8 <boot_read_image_headers>
    if (rc != 0) {
    2fe2:	b978      	cbnz	r0, 3004 <boot_prepare_image_for_update+0x38>
    }

    /* If the current image's slots aren't compatible, no swap is possible.
     * Just boot into primary slot.
     */
    if (boot_slots_compatible(state)) {
    2fe4:	4620      	mov	r0, r4
    2fe6:	f000 fd2f 	bl	3a48 <boot_slots_compatible>
    2fea:	b998      	cbnz	r0, 3014 <boot_prepare_image_for_update+0x48>
            }
#endif
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2fec:	2301      	movs	r3, #1
    2fee:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2ff2:	e006      	b.n	3002 <boot_prepare_image_for_update+0x36>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
    2ff4:	2180      	movs	r1, #128	; 0x80
    2ff6:	482f      	ldr	r0, [pc, #188]	; (30b4 <boot_prepare_image_for_update+0xe8>)
    2ff8:	f001 fe24 	bl	4c44 <printf>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2ffc:	2301      	movs	r3, #1
    2ffe:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    }
}
    3002:	bd38      	pop	{r3, r4, r5, pc}
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
    3004:	2100      	movs	r1, #0
    3006:	482c      	ldr	r0, [pc, #176]	; (30b8 <boot_prepare_image_for_update+0xec>)
    3008:	f001 fe1c 	bl	4c44 <printf>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    300c:	2301      	movs	r3, #1
    300e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        return;
    3012:	e7f6      	b.n	3002 <boot_prepare_image_for_update+0x36>
        boot_status_reset(bs);
    3014:	4628      	mov	r0, r5
    3016:	f7ff feea 	bl	2dee <boot_status_reset>
        rc = swap_read_status(state, bs);
    301a:	4629      	mov	r1, r5
    301c:	4620      	mov	r0, r4
    301e:	f000 fa0a 	bl	3436 <swap_read_status>
        if (rc != 0) {
    3022:	b980      	cbnz	r0, 3046 <boot_prepare_image_for_update+0x7a>
        if (!boot_status_is_reset(bs)) {
    3024:	4628      	mov	r0, r5
    3026:	f7ff feec 	bl	2e02 <boot_status_is_reset>
    302a:	b1a0      	cbz	r0, 3056 <boot_prepare_image_for_update+0x8a>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    302c:	79eb      	ldrb	r3, [r5, #7]
    302e:	2b01      	cmp	r3, #1
    3030:	d034      	beq.n	309c <boot_prepare_image_for_update+0xd0>
            } else if (boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs) != 0) {
    3032:	462a      	mov	r2, r5
    3034:	2101      	movs	r1, #1
    3036:	4620      	mov	r0, r4
    3038:	f7ff fe56 	bl	2ce8 <boot_validate_slot>
    303c:	b3a8      	cbz	r0, 30aa <boot_prepare_image_for_update+0xde>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    303e:	2305      	movs	r3, #5
    3040:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    3044:	e7dd      	b.n	3002 <boot_prepare_image_for_update+0x36>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
    3046:	2100      	movs	r1, #0
    3048:	481c      	ldr	r0, [pc, #112]	; (30bc <boot_prepare_image_for_update+0xf0>)
    304a:	f001 fdfb 	bl	4c44 <printf>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    304e:	2301      	movs	r3, #1
    3050:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            return;
    3054:	e7d5      	b.n	3002 <boot_prepare_image_for_update+0x36>
            rc = boot_complete_partial_swap(state, bs);
    3056:	4629      	mov	r1, r5
    3058:	4620      	mov	r0, r4
    305a:	f7ff ff3d 	bl	2ed8 <boot_complete_partial_swap>
            assert(rc == 0);
    305e:	b948      	cbnz	r0, 3074 <boot_prepare_image_for_update+0xa8>
            rc = boot_read_image_headers(state, false, bs);
    3060:	462a      	mov	r2, r5
    3062:	2100      	movs	r1, #0
    3064:	4620      	mov	r0, r4
    3066:	f7ff fea7 	bl	2db8 <boot_read_image_headers>
            assert(rc == 0);
    306a:	b968      	cbnz	r0, 3088 <boot_prepare_image_for_update+0xbc>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    306c:	2301      	movs	r3, #1
    306e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    3072:	e7c6      	b.n	3002 <boot_prepare_image_for_update+0x36>
            assert(rc == 0);
    3074:	f7fd f876 	bl	164 <hal_debugger_connected>
    3078:	b100      	cbz	r0, 307c <boot_prepare_image_for_update+0xb0>
    307a:	be01      	bkpt	0x0001
    307c:	2300      	movs	r3, #0
    307e:	461a      	mov	r2, r3
    3080:	4619      	mov	r1, r3
    3082:	4618      	mov	r0, r3
    3084:	f7fe fb92 	bl	17ac <__assert_func>
            assert(rc == 0);
    3088:	f7fd f86c 	bl	164 <hal_debugger_connected>
    308c:	b100      	cbz	r0, 3090 <boot_prepare_image_for_update+0xc4>
    308e:	be01      	bkpt	0x0001
    3090:	2300      	movs	r3, #0
    3092:	461a      	mov	r2, r3
    3094:	4619      	mov	r1, r3
    3096:	4618      	mov	r0, r3
    3098:	f7fe fb88 	bl	17ac <__assert_func>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    309c:	4629      	mov	r1, r5
    309e:	4620      	mov	r0, r4
    30a0:	f7ff fe6e 	bl	2d80 <boot_validated_swap_type>
    30a4:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    30a8:	e7ab      	b.n	3002 <boot_prepare_image_for_update+0x36>
                BOOT_SWAP_TYPE(state) = bs->swap_type;
    30aa:	79eb      	ldrb	r3, [r5, #7]
    30ac:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    30b0:	e7a7      	b.n	3002 <boot_prepare_image_for_update+0x36>
    30b2:	bf00      	nop
    30b4:	00005954 	.word	0x00005954
    30b8:	00005998 	.word	0x00005998
    30bc:	000059c8 	.word	0x000059c8

000030c0 <boot_write_status>:
{
    30c0:	b570      	push	{r4, r5, r6, lr}
    30c2:	b084      	sub	sp, #16
    30c4:	4606      	mov	r6, r0
    30c6:	460c      	mov	r4, r1
    if (bs->use_scratch) {
    30c8:	798b      	ldrb	r3, [r1, #6]
    30ca:	b143      	cbz	r3, 30de <boot_write_status+0x1e>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    30cc:	2003      	movs	r0, #3
    rc = flash_area_open(area_id, &fap);
    30ce:	a903      	add	r1, sp, #12
    30d0:	f001 fe98 	bl	4e04 <flash_area_open>
    if (rc != 0) {
    30d4:	b128      	cbz	r0, 30e2 <boot_write_status+0x22>
        rc = BOOT_EFLASH;
    30d6:	2301      	movs	r3, #1
}
    30d8:	4618      	mov	r0, r3
    30da:	b004      	add	sp, #16
    30dc:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    30de:	2001      	movs	r0, #1
    30e0:	e7f5      	b.n	30ce <boot_write_status+0xe>
    off = boot_status_off(fap) +
    30e2:	9803      	ldr	r0, [sp, #12]
    30e4:	f7ff fb4e 	bl	2784 <boot_status_off>
    30e8:	4605      	mov	r5, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    30ea:	6eb1      	ldr	r1, [r6, #104]	; 0x68
    30ec:	4620      	mov	r0, r4
    30ee:	f000 fc9d 	bl	3a2c <boot_status_internal_off>
    off = boot_status_off(fap) +
    30f2:	4405      	add	r5, r0
    align = flash_area_align(fap);
    30f4:	9803      	ldr	r0, [sp, #12]
    30f6:	f001 ff16 	bl	4f26 <flash_area_align>
    30fa:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    30fc:	9803      	ldr	r0, [sp, #12]
    30fe:	f001 ff17 	bl	4f30 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    3102:	2208      	movs	r2, #8
    3104:	b2c1      	uxtb	r1, r0
    3106:	a801      	add	r0, sp, #4
    3108:	f7fe fde0 	bl	1ccc <memset>
    buf[0] = bs->state;
    310c:	7923      	ldrb	r3, [r4, #4]
    310e:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    3112:	4633      	mov	r3, r6
    3114:	aa01      	add	r2, sp, #4
    3116:	4629      	mov	r1, r5
    3118:	9803      	ldr	r0, [sp, #12]
    311a:	f001 fede 	bl	4eda <flash_area_write>
    if (rc != 0) {
    311e:	4603      	mov	r3, r0
    3120:	2800      	cmp	r0, #0
    3122:	d0d9      	beq.n	30d8 <boot_write_status+0x18>
        rc = BOOT_EFLASH;
    3124:	2301      	movs	r3, #1
    3126:	e7d7      	b.n	30d8 <boot_write_status+0x18>

00003128 <boot_erase_region>:
{
    3128:	b508      	push	{r3, lr}
    return flash_area_erase(fap, off, sz);
    312a:	f001 fee9 	bl	4f00 <flash_area_erase>
}
    312e:	bd08      	pop	{r3, pc}

00003130 <boot_copy_region>:
{
    3130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3134:	4688      	mov	r8, r1
    3136:	4692      	mov	sl, r2
    3138:	461f      	mov	r7, r3
    313a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    313e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bytes_copied = 0;
    3140:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
    3142:	e00f      	b.n	3164 <boot_copy_region+0x34>
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    3144:	4623      	mov	r3, r4
    3146:	4a0f      	ldr	r2, [pc, #60]	; (3184 <boot_copy_region+0x54>)
    3148:	19e9      	adds	r1, r5, r7
    314a:	4640      	mov	r0, r8
    314c:	f001 feb2 	bl	4eb4 <flash_area_read>
        if (rc != 0) {
    3150:	b9a0      	cbnz	r0, 317c <boot_copy_region+0x4c>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
    3152:	4623      	mov	r3, r4
    3154:	4a0b      	ldr	r2, [pc, #44]	; (3184 <boot_copy_region+0x54>)
    3156:	eb05 0109 	add.w	r1, r5, r9
    315a:	4650      	mov	r0, sl
    315c:	f001 febd 	bl	4eda <flash_area_write>
        if (rc != 0) {
    3160:	b970      	cbnz	r0, 3180 <boot_copy_region+0x50>
        bytes_copied += chunk_sz;
    3162:	4425      	add	r5, r4
    while (bytes_copied < sz) {
    3164:	42b5      	cmp	r5, r6
    3166:	d206      	bcs.n	3176 <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
    3168:	1b74      	subs	r4, r6, r5
    316a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    316e:	d9e9      	bls.n	3144 <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
    3170:	f44f 6480 	mov.w	r4, #1024	; 0x400
    3174:	e7e6      	b.n	3144 <boot_copy_region+0x14>
    return 0;
    3176:	2000      	movs	r0, #0
}
    3178:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
    317c:	2001      	movs	r0, #1
    317e:	e7fb      	b.n	3178 <boot_copy_region+0x48>
            return BOOT_EFLASH;
    3180:	2001      	movs	r0, #1
    3182:	e7f9      	b.n	3178 <boot_copy_region+0x48>
    3184:	20004c80 	.word	0x20004c80

00003188 <context_boot_go>:

int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    3188:	b570      	push	{r4, r5, r6, lr}
    318a:	b084      	sub	sp, #16
    318c:	4604      	mov	r4, r0
    318e:	460e      	mov	r6, r1
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
    3190:	226c      	movs	r2, #108	; 0x6c
    3192:	2100      	movs	r1, #0
    3194:	f7fe fd9a 	bl	1ccc <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    3198:	4b4d      	ldr	r3, [pc, #308]	; (32d0 <context_boot_go+0x148>)
    319a:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    319c:	4b4d      	ldr	r3, [pc, #308]	; (32d4 <context_boot_go+0x14c>)
    319e:	6523      	str	r3, [r4, #80]	; 0x50
            secondary_slot_sectors[image_index];
#if MCUBOOT_SWAP_USING_SCRATCH
        state->scratch.sectors = scratch_sectors;
    31a0:	4b4d      	ldr	r3, [pc, #308]	; (32d8 <context_boot_go+0x150>)
    31a2:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    31a4:	2500      	movs	r5, #0
    31a6:	2d01      	cmp	r5, #1
    31a8:	d818      	bhi.n	31dc <context_boot_go+0x54>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    31aa:	4629      	mov	r1, r5
    31ac:	2000      	movs	r0, #0
    31ae:	f000 ff0d 	bl	3fcc <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    31b2:	212c      	movs	r1, #44	; 0x2c
    31b4:	fb01 f105 	mul.w	r1, r1, r5
    31b8:	3120      	adds	r1, #32
    31ba:	4421      	add	r1, r4
    31bc:	b2c0      	uxtb	r0, r0
    31be:	f001 fe21 	bl	4e04 <flash_area_open>
            assert(rc == 0);
    31c2:	b908      	cbnz	r0, 31c8 <context_boot_go+0x40>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    31c4:	3501      	adds	r5, #1
    31c6:	e7ee      	b.n	31a6 <context_boot_go+0x1e>
            assert(rc == 0);
    31c8:	f7fc ffcc 	bl	164 <hal_debugger_connected>
    31cc:	b100      	cbz	r0, 31d0 <context_boot_go+0x48>
    31ce:	be01      	bkpt	0x0001
    31d0:	2300      	movs	r3, #0
    31d2:	461a      	mov	r2, r3
    31d4:	4619      	mov	r1, r3
    31d6:	4618      	mov	r0, r3
    31d8:	f7fe fae8 	bl	17ac <__assert_func>
        }
#if MCUBOOT_SWAP_USING_SCRATCH
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    31dc:	f104 0158 	add.w	r1, r4, #88	; 0x58
    31e0:	2003      	movs	r0, #3
    31e2:	f001 fe0f 	bl	4e04 <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
    31e6:	4605      	mov	r5, r0
    31e8:	b978      	cbnz	r0, 320a <context_boot_go+0x82>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
    31ea:	4669      	mov	r1, sp
    31ec:	4620      	mov	r0, r4
    31ee:	f7ff feed 	bl	2fcc <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    31f2:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
    31f6:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
    31fa:	3b01      	subs	r3, #1
    31fc:	2b04      	cmp	r3, #4
    31fe:	d840      	bhi.n	3282 <context_boot_go+0xfa>
    3200:	e8df f003 	tbb	[pc, r3]
    3204:	0d0d0d13 	.word	0x0d0d0d13
    3208:	35          	.byte	0x35
    3209:	00          	.byte	0x00
        assert(rc == 0);
    320a:	f7fc ffab 	bl	164 <hal_debugger_connected>
    320e:	b100      	cbz	r0, 3212 <context_boot_go+0x8a>
    3210:	be01      	bkpt	0x0001
    3212:	2300      	movs	r3, #0
    3214:	461a      	mov	r2, r3
    3216:	4619      	mov	r1, r3
    3218:	4618      	mov	r0, r3
    321a:	f7fe fac7 	bl	17ac <__assert_func>
            break;

        case BOOT_SWAP_TYPE_TEST:          /* fallthrough */
        case BOOT_SWAP_TYPE_PERM:          /* fallthrough */
        case BOOT_SWAP_TYPE_REVERT:
            rc = boot_perform_update(state, &bs);
    321e:	4669      	mov	r1, sp
    3220:	4620      	mov	r0, r4
    3222:	f7ff fea3 	bl	2f6c <boot_perform_update>
            assert(rc == 0);
    3226:	4605      	mov	r5, r0
    3228:	b9b8      	cbnz	r0, 325a <context_boot_go+0xd2>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    322a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    322e:	2bff      	cmp	r3, #255	; 0xff
    3230:	d02b      	beq.n	328a <context_boot_go+0x102>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    3232:	2b01      	cmp	r3, #1
    3234:	d136      	bne.n	32a4 <context_boot_go+0x11c>
#else
        /* Even if we're not re-validating the primary slot, we could be booting
         * onto an empty flash chip. At least do a basic sanity check that
         * the magic number on the image is OK.
         */
        if (BOOT_IMG(state, BOOT_PRIMARY_SLOT).hdr.ih_magic != IMAGE_MAGIC) {
    3236:	6822      	ldr	r2, [r4, #0]
    3238:	4b28      	ldr	r3, [pc, #160]	; (32dc <context_boot_go+0x154>)
    323a:	429a      	cmp	r2, r3
    323c:	d13b      	bne.n	32b6 <context_boot_go+0x12e>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
    323e:	2300      	movs	r3, #0
    3240:	9300      	str	r3, [sp, #0]
    3242:	9301      	str	r3, [sp, #4]
    3244:	9302      	str	r3, [sp, #8]
    3246:	9303      	str	r3, [sp, #12]

    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    3248:	6a23      	ldr	r3, [r4, #32]
    324a:	785b      	ldrb	r3, [r3, #1]
    324c:	7133      	strb	r3, [r6, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).area->fa_off;
    324e:	6a23      	ldr	r3, [r4, #32]
    3250:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    3252:	60b3      	str	r3, [r6, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    3254:	6034      	str	r4, [r6, #0]
out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    3256:	2300      	movs	r3, #0
    3258:	e035      	b.n	32c6 <context_boot_go+0x13e>
            assert(rc == 0);
    325a:	f7fc ff83 	bl	164 <hal_debugger_connected>
    325e:	b100      	cbz	r0, 3262 <context_boot_go+0xda>
    3260:	be01      	bkpt	0x0001
    3262:	2300      	movs	r3, #0
    3264:	461a      	mov	r2, r3
    3266:	4619      	mov	r1, r3
    3268:	4618      	mov	r0, r3
    326a:	f7fe fa9f 	bl	17ac <__assert_func>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    326e:	2000      	movs	r0, #0
    3270:	f000 f932 	bl	34d8 <swap_set_image_ok>
            if (rc != 0) {
    3274:	4605      	mov	r5, r0
    3276:	2800      	cmp	r0, #0
    3278:	d0d7      	beq.n	322a <context_boot_go+0xa2>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    327a:	23ff      	movs	r3, #255	; 0xff
    327c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    3280:	e7d3      	b.n	322a <context_boot_go+0xa2>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    3282:	23ff      	movs	r3, #255	; 0xff
    3284:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    3288:	e7cf      	b.n	322a <context_boot_go+0xa2>
            BOOT_LOG_ERR("panic!");
    328a:	4815      	ldr	r0, [pc, #84]	; (32e0 <context_boot_go+0x158>)
    328c:	f001 f9d8 	bl	4640 <puts>
            assert(0);
    3290:	f7fc ff68 	bl	164 <hal_debugger_connected>
    3294:	b100      	cbz	r0, 3298 <context_boot_go+0x110>
    3296:	be01      	bkpt	0x0001
    3298:	2300      	movs	r3, #0
    329a:	461a      	mov	r2, r3
    329c:	4619      	mov	r1, r3
    329e:	4618      	mov	r0, r3
    32a0:	f7fe fa84 	bl	17ac <__assert_func>
            rc = boot_read_image_headers(state, false, &bs);
    32a4:	466a      	mov	r2, sp
    32a6:	2100      	movs	r1, #0
    32a8:	4620      	mov	r0, r4
    32aa:	f7ff fd85 	bl	2db8 <boot_read_image_headers>
            if (rc != 0) {
    32ae:	4605      	mov	r5, r0
    32b0:	2800      	cmp	r0, #0
    32b2:	d1d0      	bne.n	3256 <context_boot_go+0xce>
    32b4:	e7bf      	b.n	3236 <context_boot_go+0xae>
            BOOT_LOG_ERR("bad image magic 0x%lx; Image=%u", (unsigned long)
    32b6:	2200      	movs	r2, #0
    32b8:	4621      	mov	r1, r4
    32ba:	480a      	ldr	r0, [pc, #40]	; (32e4 <context_boot_go+0x15c>)
    32bc:	f001 fcc2 	bl	4c44 <printf>
            rc = BOOT_EBADIMAGE;
    32c0:	2503      	movs	r5, #3
            goto out;
    32c2:	e7c8      	b.n	3256 <context_boot_go+0xce>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    32c4:	3301      	adds	r3, #1
    32c6:	2b01      	cmp	r3, #1
    32c8:	d9fc      	bls.n	32c4 <context_boot_go+0x13c>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
        }
    }
    return rc;
}
    32ca:	4628      	mov	r0, r5
    32cc:	b004      	add	sp, #16
    32ce:	bd70      	pop	{r4, r5, r6, pc}
    32d0:	20005080 	.word	0x20005080
    32d4:	20005c80 	.word	0x20005c80
    32d8:	20005680 	.word	0x20005680
    32dc:	96f3b83d 	.word	0x96f3b83d
    32e0:	00005944 	.word	0x00005944
    32e4:	00005a34 	.word	0x00005a34

000032e8 <boot_go>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
    32e8:	b508      	push	{r3, lr}
    return context_boot_go(&boot_data, rsp);
    32ea:	4601      	mov	r1, r0
    32ec:	4801      	ldr	r0, [pc, #4]	; (32f4 <boot_go+0xc>)
    32ee:	f7ff ff4b 	bl	3188 <context_boot_go>
}
    32f2:	bd08      	pop	{r3, pc}
    32f4:	20004c14 	.word	0x20004c14

000032f8 <swap_erase_trailer_sectors>:
#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)

int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    32f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32fc:	4606      	mov	r6, r0
    32fe:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    3300:	2100      	movs	r1, #0
    3302:	4608      	mov	r0, r1
    3304:	f000 fe62 	bl	3fcc <flash_area_id_from_multi_image_slot>
    3308:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    330a:	2101      	movs	r1, #1
    330c:	2000      	movs	r0, #0
    330e:	f000 fe5d 	bl	3fcc <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    3312:	783b      	ldrb	r3, [r7, #0]
    3314:	42a3      	cmp	r3, r4
    3316:	d029      	beq.n	336c <swap_erase_trailer_sectors+0x74>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    3318:	4283      	cmp	r3, r0
    331a:	d001      	beq.n	3320 <swap_erase_trailer_sectors+0x28>
        slot = BOOT_SECONDARY_SLOT;
    } else {
        return BOOT_EFLASH;
    331c:	2301      	movs	r3, #1
    331e:	e022      	b.n	3366 <swap_erase_trailer_sectors+0x6e>
        slot = BOOT_SECONDARY_SLOT;
    3320:	2301      	movs	r3, #1
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    3322:	4698      	mov	r8, r3
    return BOOT_IMG(state, slot).num_sectors;
    3324:	222c      	movs	r2, #44	; 0x2c
    3326:	fb02 6303 	mla	r3, r2, r3, r6
    332a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    332c:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    332e:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    3330:	f7ff fa14 	bl	275c <boot_trailer_sz>
    3334:	4681      	mov	r9, r0
    total_sz = 0;
    3336:	2500      	movs	r5, #0

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    3338:	232c      	movs	r3, #44	; 0x2c
    333a:	fb03 6308 	mla	r3, r3, r8, r6
    333e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3340:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    3344:	008b      	lsls	r3, r1, #2
    3346:	4413      	add	r3, r2
    3348:	f8d3 a008 	ldr.w	sl, [r3, #8]
 */
static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    334c:	6859      	ldr	r1, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    334e:	6853      	ldr	r3, [r2, #4]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    3350:	4652      	mov	r2, sl
    3352:	1ac9      	subs	r1, r1, r3
    3354:	4638      	mov	r0, r7
    3356:	f7ff fee7 	bl	3128 <boot_erase_region>
        assert(rc == 0);
    335a:	4603      	mov	r3, r0
    335c:	b940      	cbnz	r0, 3370 <swap_erase_trailer_sectors+0x78>

        sector--;
    335e:	3c01      	subs	r4, #1
        total_sz += sz;
    3360:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    3362:	45a9      	cmp	r9, r5
    3364:	d8e8      	bhi.n	3338 <swap_erase_trailer_sectors+0x40>

    return rc;
}
    3366:	4618      	mov	r0, r3
    3368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    336c:	2300      	movs	r3, #0
    336e:	e7d8      	b.n	3322 <swap_erase_trailer_sectors+0x2a>
        assert(rc == 0);
    3370:	f7fc fef8 	bl	164 <hal_debugger_connected>
    3374:	b100      	cbz	r0, 3378 <swap_erase_trailer_sectors+0x80>
    3376:	be01      	bkpt	0x0001
    3378:	2300      	movs	r3, #0
    337a:	461a      	mov	r2, r3
    337c:	4619      	mov	r1, r3
    337e:	4618      	mov	r0, r3
    3380:	f7fe fa14 	bl	17ac <__assert_func>

00003384 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    3384:	b530      	push	{r4, r5, lr}
    3386:	b083      	sub	sp, #12
    3388:	460c      	mov	r4, r1
    338a:	4615      	mov	r5, r2

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    338c:	4669      	mov	r1, sp
    338e:	2002      	movs	r0, #2
    3390:	f7ff fa70 	bl	2874 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);
    3394:	b990      	cbnz	r0, 33bc <swap_status_init+0x38>

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    3396:	79e9      	ldrb	r1, [r5, #7]
    3398:	2901      	cmp	r1, #1
    339a:	d119      	bne.n	33d0 <swap_status_init+0x4c>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    339c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    33a0:	2b01      	cmp	r3, #1
    33a2:	d025      	beq.n	33f0 <swap_status_init+0x6c>
        rc = boot_write_image_ok(fap);
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    33a4:	68a9      	ldr	r1, [r5, #8]
    33a6:	4620      	mov	r0, r4
    33a8:	f7ff fad4 	bl	2954 <boot_write_swap_size>
    assert(rc == 0);
    33ac:	bb78      	cbnz	r0, 340e <swap_status_init+0x8a>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    33ae:	4620      	mov	r0, r4
    33b0:	f7ff fa88 	bl	28c4 <boot_write_magic>
    assert(rc == 0);
    33b4:	bba8      	cbnz	r0, 3422 <swap_status_init+0x9e>

    return 0;
}
    33b6:	2000      	movs	r0, #0
    33b8:	b003      	add	sp, #12
    33ba:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
    33bc:	f7fc fed2 	bl	164 <hal_debugger_connected>
    33c0:	b100      	cbz	r0, 33c4 <swap_status_init+0x40>
    33c2:	be01      	bkpt	0x0001
    33c4:	2300      	movs	r3, #0
    33c6:	461a      	mov	r2, r3
    33c8:	4619      	mov	r1, r3
    33ca:	4618      	mov	r0, r3
    33cc:	f7fe f9ee 	bl	17ac <__assert_func>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    33d0:	2200      	movs	r2, #0
    33d2:	4620      	mov	r0, r4
    33d4:	f7ff fa94 	bl	2900 <boot_write_swap_info>
        assert(rc == 0);
    33d8:	2800      	cmp	r0, #0
    33da:	d0df      	beq.n	339c <swap_status_init+0x18>
    33dc:	f7fc fec2 	bl	164 <hal_debugger_connected>
    33e0:	b100      	cbz	r0, 33e4 <swap_status_init+0x60>
    33e2:	be01      	bkpt	0x0001
    33e4:	2300      	movs	r3, #0
    33e6:	461a      	mov	r2, r3
    33e8:	4619      	mov	r1, r3
    33ea:	4618      	mov	r0, r3
    33ec:	f7fe f9de 	bl	17ac <__assert_func>
        rc = boot_write_image_ok(fap);
    33f0:	4620      	mov	r0, r4
    33f2:	f7ff fa7e 	bl	28f2 <boot_write_image_ok>
        assert(rc == 0);
    33f6:	2800      	cmp	r0, #0
    33f8:	d0d4      	beq.n	33a4 <swap_status_init+0x20>
    33fa:	f7fc feb3 	bl	164 <hal_debugger_connected>
    33fe:	b100      	cbz	r0, 3402 <swap_status_init+0x7e>
    3400:	be01      	bkpt	0x0001
    3402:	2300      	movs	r3, #0
    3404:	461a      	mov	r2, r3
    3406:	4619      	mov	r1, r3
    3408:	4618      	mov	r0, r3
    340a:	f7fe f9cf 	bl	17ac <__assert_func>
    assert(rc == 0);
    340e:	f7fc fea9 	bl	164 <hal_debugger_connected>
    3412:	b100      	cbz	r0, 3416 <swap_status_init+0x92>
    3414:	be01      	bkpt	0x0001
    3416:	2300      	movs	r3, #0
    3418:	461a      	mov	r2, r3
    341a:	4619      	mov	r1, r3
    341c:	4618      	mov	r0, r3
    341e:	f7fe f9c5 	bl	17ac <__assert_func>
    assert(rc == 0);
    3422:	f7fc fe9f 	bl	164 <hal_debugger_connected>
    3426:	b100      	cbz	r0, 342a <swap_status_init+0xa6>
    3428:	be01      	bkpt	0x0001
    342a:	2300      	movs	r3, #0
    342c:	461a      	mov	r2, r3
    342e:	4619      	mov	r1, r3
    3430:	4618      	mov	r0, r3
    3432:	f7fe f9bb 	bl	17ac <__assert_func>

00003436 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    3436:	b570      	push	{r4, r5, r6, lr}
    3438:	b082      	sub	sp, #8
    343a:	4606      	mov	r6, r0
    343c:	460d      	mov	r5, r1
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    343e:	f000 fb83 	bl	3b48 <swap_status_source>
    3442:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    3444:	2801      	cmp	r0, #1
    3446:	d00d      	beq.n	3464 <swap_read_status+0x2e>
    3448:	4604      	mov	r4, r0
    344a:	2802      	cmp	r0, #2
    344c:	d013      	beq.n	3476 <swap_read_status+0x40>
    344e:	b178      	cbz	r0, 3470 <swap_read_status+0x3a>
    case BOOT_STATUS_SOURCE_PRIMARY_SLOT:
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
        break;

    default:
        assert(0);
    3450:	f7fc fe88 	bl	164 <hal_debugger_connected>
    3454:	b100      	cbz	r0, 3458 <swap_read_status+0x22>
    3456:	be01      	bkpt	0x0001
    3458:	2300      	movs	r3, #0
    345a:	461a      	mov	r2, r3
    345c:	4619      	mov	r1, r3
    345e:	4618      	mov	r0, r3
    3460:	f7fe f9a4 	bl	17ac <__assert_func>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    3464:	2003      	movs	r0, #3
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    3466:	a901      	add	r1, sp, #4
    3468:	f001 fccc 	bl	4e04 <flash_area_open>
    if (rc != 0) {
    346c:	b128      	cbz	r0, 347a <swap_read_status+0x44>
        return BOOT_EFLASH;
    346e:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    3470:	4620      	mov	r0, r4
    3472:	b002      	add	sp, #8
    3474:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    3476:	2001      	movs	r0, #1
    3478:	e7f5      	b.n	3466 <swap_read_status+0x30>
    rc = swap_read_status_bytes(fap, state, bs);
    347a:	462a      	mov	r2, r5
    347c:	4631      	mov	r1, r6
    347e:	9801      	ldr	r0, [sp, #4]
    3480:	f000 fa72 	bl	3968 <swap_read_status_bytes>
    if (rc == 0) {
    3484:	4604      	mov	r4, r0
    3486:	2800      	cmp	r0, #0
    3488:	d1f2      	bne.n	3470 <swap_read_status+0x3a>
        off = boot_swap_info_off(fap);
    348a:	9801      	ldr	r0, [sp, #4]
    348c:	f7ff f98f 	bl	27ae <boot_swap_info_off>
        rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    3490:	2301      	movs	r3, #1
    3492:	f10d 0203 	add.w	r2, sp, #3
    3496:	4601      	mov	r1, r0
    3498:	9801      	ldr	r0, [sp, #4]
    349a:	f001 fd4e 	bl	4f3a <flash_area_read_is_empty>
        if (rc == 1) {
    349e:	2801      	cmp	r0, #1
    34a0:	d006      	beq.n	34b0 <swap_read_status+0x7a>
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    34a2:	f89d 3003 	ldrb.w	r3, [sp, #3]
    34a6:	f003 030f 	and.w	r3, r3, #15
    34aa:	71eb      	strb	r3, [r5, #7]
    34ac:	4604      	mov	r4, r0
    34ae:	e7df      	b.n	3470 <swap_read_status+0x3a>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    34b0:	2301      	movs	r3, #1
    34b2:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
    34b6:	4620      	mov	r0, r4
    34b8:	e7f3      	b.n	34a2 <swap_read_status+0x6c>

000034ba <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    34ba:	b500      	push	{lr}
    34bc:	b083      	sub	sp, #12
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    34be:	a901      	add	r1, sp, #4
    34c0:	2001      	movs	r0, #1
    34c2:	f001 fc9f 	bl	4e04 <flash_area_open>
            &fap);
    if (rc != 0) {
    34c6:	b118      	cbz	r0, 34d0 <swap_set_copy_done+0x16>
        return BOOT_EFLASH;
    34c8:	2001      	movs	r0, #1
    }

    rc = boot_write_copy_done(fap);
    flash_area_close(fap);
    return rc;
}
    34ca:	b003      	add	sp, #12
    34cc:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_write_copy_done(fap);
    34d0:	9801      	ldr	r0, [sp, #4]
    34d2:	f7ff fa07 	bl	28e4 <boot_write_copy_done>
    return rc;
    34d6:	e7f8      	b.n	34ca <swap_set_copy_done+0x10>

000034d8 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    34d8:	b500      	push	{lr}
    34da:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    34dc:	a903      	add	r1, sp, #12
    34de:	2001      	movs	r0, #1
    34e0:	f001 fc90 	bl	4e04 <flash_area_open>
            &fap);
    if (rc != 0) {
    34e4:	b120      	cbz	r0, 34f0 <swap_set_image_ok+0x18>
        return BOOT_EFLASH;
    34e6:	2301      	movs	r3, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    34e8:	4618      	mov	r0, r3
    34ea:	b005      	add	sp, #20
    34ec:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_read_swap_state(fap, &state);
    34f0:	a901      	add	r1, sp, #4
    34f2:	9803      	ldr	r0, [sp, #12]
    34f4:	f7ff f95e 	bl	27b4 <boot_read_swap_state>
    if (rc != 0) {
    34f8:	4603      	mov	r3, r0
    34fa:	b940      	cbnz	r0, 350e <swap_set_image_ok+0x36>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    34fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    3500:	2a03      	cmp	r2, #3
    3502:	d1f1      	bne.n	34e8 <swap_set_image_ok+0x10>
        rc = boot_write_image_ok(fap);
    3504:	9803      	ldr	r0, [sp, #12]
    3506:	f7ff f9f4 	bl	28f2 <boot_write_image_ok>
    350a:	4603      	mov	r3, r0
    350c:	e7ec      	b.n	34e8 <swap_set_image_ok+0x10>
        rc = BOOT_EFLASH;
    350e:	2301      	movs	r3, #1
    3510:	e7ea      	b.n	34e8 <swap_set_image_ok+0x10>

00003512 <boot_copy_sz>:
 *                                  [first-sector, last-sector] range.
 */
static uint32_t
boot_copy_sz(const struct boot_loader_state *state, int last_sector_idx,
             int *out_first_sector_idx)
{
    3512:	b4f0      	push	{r4, r5, r6, r7}
    3514:	4606      	mov	r6, r0
#if MCUBOOT_SWAP_USING_SCRATCH
#define BOOT_SCRATCH_AREA(state) ((state)->scratch.area)

static inline size_t boot_scratch_area_size(const struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
    3516:	6d83      	ldr	r3, [r0, #88]	; 0x58
    3518:	689f      	ldr	r7, [r3, #8]
    size_t scratch_sz;
    uint32_t new_sz;
    uint32_t sz;
    int i;

    sz = 0;
    351a:	2000      	movs	r0, #0

    scratch_sz = boot_scratch_area_size(state);
    for (i = last_sector_idx; i >= 0; i--) {
    351c:	2900      	cmp	r1, #0
    351e:	db0b      	blt.n	3538 <boot_copy_sz+0x26>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    3520:	6a73      	ldr	r3, [r6, #36]	; 0x24
    3522:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    3526:	00ac      	lsls	r4, r5, #2
    3528:	4423      	add	r3, r4
    352a:	689b      	ldr	r3, [r3, #8]
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    352c:	4403      	add	r3, r0
        /*
         * The secondary slot is not being checked here, because
         * `boot_slots_compatible` already provides assurance that the copy size
         * will be compatible with the primary slot and scratch.
         */
        if (new_sz > scratch_sz) {
    352e:	429f      	cmp	r7, r3
    3530:	d302      	bcc.n	3538 <boot_copy_sz+0x26>
    for (i = last_sector_idx; i >= 0; i--) {
    3532:	3901      	subs	r1, #1
            break;
        }
        sz = new_sz;
    3534:	4618      	mov	r0, r3
    3536:	e7f1      	b.n	351c <boot_copy_sz+0xa>
    }

    /* i currently refers to a sector that doesn't fit or it is -1 because all
     * sectors have been processed.  In both cases, exclude sector i.
     */
    *out_first_sector_idx = i + 1;
    3538:	3101      	adds	r1, #1
    353a:	6011      	str	r1, [r2, #0]
    return sz;
}
    353c:	bcf0      	pop	{r4, r5, r6, r7}
    353e:	4770      	bx	lr

00003540 <boot_swap_sectors>:
 * @return                      0 on success; nonzero on failure.
 */
static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs)
{
    3540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3544:	b088      	sub	sp, #32
    3546:	460f      	mov	r7, r1
    3548:	4615      	mov	r5, r2
    354a:	461c      	mov	r4, r3
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    354c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    354e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    3552:	0083      	lsls	r3, r0, #2
    3554:	4413      	add	r3, r2
    3556:	685e      	ldr	r6, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    3558:	6853      	ldr	r3, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    355a:	1af6      	subs	r6, r6, r3

    /* Calculate offset from start of image area. */
    img_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);

    copy_sz = sz;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    355c:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    355e:	f7ff f8fd 	bl	275c <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    3562:	6aab      	ldr	r3, [r5, #40]	; 0x28
     * copying it, we need to use scratch to write the trailer temporarily.
     *
     * NOTE: `use_scratch` is a temporary flag (never written to flash) which
     * controls if special handling is needed (swapping last sector).
     */
    last_sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    3564:	3b01      	subs	r3, #1
    if ((img_off + sz) >
    3566:	eb07 0c06 	add.w	ip, r7, r6
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    356a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    356c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3570:	009a      	lsls	r2, r3, #2
    3572:	440a      	add	r2, r1
    3574:	6853      	ldr	r3, [r2, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    3576:	684a      	ldr	r2, [r1, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    3578:	1a9b      	subs	r3, r3, r2
    357a:	459c      	cmp	ip, r3
    357c:	d923      	bls.n	35c6 <boot_swap_sectors+0x86>
        boot_img_sector_off(state, BOOT_PRIMARY_SLOT, last_sector)) {
        copy_sz -= trailer_sz;
    357e:	eba7 0800 	sub.w	r8, r7, r0
    }

    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    3582:	6823      	ldr	r3, [r4, #0]
    3584:	2b01      	cmp	r3, #1
    3586:	d020      	beq.n	35ca <boot_swap_sectors+0x8a>
    3588:	2300      	movs	r3, #0
    358a:	71a3      	strb	r3, [r4, #6]

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    358c:	a907      	add	r1, sp, #28
    358e:	2001      	movs	r0, #1
    3590:	f001 fc38 	bl	4e04 <flash_area_open>
            &fap_primary_slot);
    assert (rc == 0);
    3594:	b9f8      	cbnz	r0, 35d6 <boot_swap_sectors+0x96>

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3596:	a906      	add	r1, sp, #24
    3598:	2002      	movs	r0, #2
    359a:	f001 fc33 	bl	4e04 <flash_area_open>
            &fap_secondary_slot);
    assert (rc == 0);
    359e:	bb20      	cbnz	r0, 35ea <boot_swap_sectors+0xaa>

    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    35a0:	a905      	add	r1, sp, #20
    35a2:	2003      	movs	r0, #3
    35a4:	f001 fc2e 	bl	4e04 <flash_area_open>
    assert (rc == 0);
    35a8:	bb48      	cbnz	r0, 35fe <boot_swap_sectors+0xbe>

    if (bs->state == BOOT_STATUS_STATE_0) {
    35aa:	7923      	ldrb	r3, [r4, #4]
    35ac:	2b01      	cmp	r3, #1
    35ae:	d030      	beq.n	3612 <boot_swap_sectors+0xd2>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
    35b0:	7923      	ldrb	r3, [r4, #4]
    35b2:	2b02      	cmp	r3, #2
    35b4:	f000 80ab 	beq.w	370e <boot_swap_sectors+0x1ce>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_2;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_2) {
    35b8:	7923      	ldrb	r3, [r4, #4]
    35ba:	2b03      	cmp	r3, #3
    35bc:	f000 80f3 	beq.w	37a6 <boot_swap_sectors+0x266>
    }

    flash_area_close(fap_primary_slot);
    flash_area_close(fap_secondary_slot);
    flash_area_close(fap_scratch);
}
    35c0:	b008      	add	sp, #32
    35c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    copy_sz = sz;
    35c6:	46b8      	mov	r8, r7
    35c8:	e7db      	b.n	3582 <boot_swap_sectors+0x42>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    35ca:	45b8      	cmp	r8, r7
    35cc:	d001      	beq.n	35d2 <boot_swap_sectors+0x92>
    35ce:	2301      	movs	r3, #1
    35d0:	e7db      	b.n	358a <boot_swap_sectors+0x4a>
    35d2:	2300      	movs	r3, #0
    35d4:	e7d9      	b.n	358a <boot_swap_sectors+0x4a>
    assert (rc == 0);
    35d6:	f7fc fdc5 	bl	164 <hal_debugger_connected>
    35da:	b100      	cbz	r0, 35de <boot_swap_sectors+0x9e>
    35dc:	be01      	bkpt	0x0001
    35de:	2300      	movs	r3, #0
    35e0:	461a      	mov	r2, r3
    35e2:	4619      	mov	r1, r3
    35e4:	4618      	mov	r0, r3
    35e6:	f7fe f8e1 	bl	17ac <__assert_func>
    assert (rc == 0);
    35ea:	f7fc fdbb 	bl	164 <hal_debugger_connected>
    35ee:	b100      	cbz	r0, 35f2 <boot_swap_sectors+0xb2>
    35f0:	be01      	bkpt	0x0001
    35f2:	2300      	movs	r3, #0
    35f4:	461a      	mov	r2, r3
    35f6:	4619      	mov	r1, r3
    35f8:	4618      	mov	r0, r3
    35fa:	f7fe f8d7 	bl	17ac <__assert_func>
    assert (rc == 0);
    35fe:	f7fc fdb1 	bl	164 <hal_debugger_connected>
    3602:	b100      	cbz	r0, 3606 <boot_swap_sectors+0xc6>
    3604:	be01      	bkpt	0x0001
    3606:	2300      	movs	r3, #0
    3608:	461a      	mov	r2, r3
    360a:	4619      	mov	r1, r3
    360c:	4618      	mov	r0, r3
    360e:	f7fe f8cd 	bl	17ac <__assert_func>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    3612:	9805      	ldr	r0, [sp, #20]
    3614:	6882      	ldr	r2, [r0, #8]
    3616:	2100      	movs	r1, #0
    3618:	f7ff fd86 	bl	3128 <boot_erase_region>
        assert(rc == 0);
    361c:	bb00      	cbnz	r0, 3660 <boot_swap_sectors+0x120>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    361e:	6823      	ldr	r3, [r4, #0]
    3620:	2b01      	cmp	r3, #1
    3622:	d027      	beq.n	3674 <boot_swap_sectors+0x134>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
    3624:	f8cd 8004 	str.w	r8, [sp, #4]
    3628:	2300      	movs	r3, #0
    362a:	9300      	str	r3, [sp, #0]
    362c:	4633      	mov	r3, r6
    362e:	9a05      	ldr	r2, [sp, #20]
    3630:	9906      	ldr	r1, [sp, #24]
    3632:	4628      	mov	r0, r5
    3634:	f7ff fd7c 	bl	3130 <boot_copy_region>
        assert(rc == 0);
    3638:	2800      	cmp	r0, #0
    363a:	d15e      	bne.n	36fa <boot_swap_sectors+0x1ba>
        rc = boot_write_status(state, bs);
    363c:	4621      	mov	r1, r4
    363e:	4628      	mov	r0, r5
    3640:	f7ff fd3e 	bl	30c0 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    3644:	2302      	movs	r3, #2
    3646:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    3648:	2800      	cmp	r0, #0
    364a:	d0b1      	beq.n	35b0 <boot_swap_sectors+0x70>
    364c:	f7fc fd8a 	bl	164 <hal_debugger_connected>
    3650:	b100      	cbz	r0, 3654 <boot_swap_sectors+0x114>
    3652:	be01      	bkpt	0x0001
    3654:	2300      	movs	r3, #0
    3656:	461a      	mov	r2, r3
    3658:	4619      	mov	r1, r3
    365a:	4618      	mov	r0, r3
    365c:	f7fe f8a6 	bl	17ac <__assert_func>
        assert(rc == 0);
    3660:	f7fc fd80 	bl	164 <hal_debugger_connected>
    3664:	b100      	cbz	r0, 3668 <boot_swap_sectors+0x128>
    3666:	be01      	bkpt	0x0001
    3668:	2300      	movs	r3, #0
    366a:	461a      	mov	r2, r3
    366c:	4619      	mov	r1, r3
    366e:	4618      	mov	r0, r3
    3670:	f7fe f89c 	bl	17ac <__assert_func>
            rc = swap_status_init(state, fap_scratch, bs);
    3674:	4622      	mov	r2, r4
    3676:	9905      	ldr	r1, [sp, #20]
    3678:	4628      	mov	r0, r5
    367a:	f7ff fe83 	bl	3384 <swap_status_init>
            assert(rc == 0);
    367e:	b9f0      	cbnz	r0, 36be <boot_swap_sectors+0x17e>
            if (!bs->use_scratch) {
    3680:	79a3      	ldrb	r3, [r4, #6]
    3682:	2b00      	cmp	r3, #0
    3684:	d1ce      	bne.n	3624 <boot_swap_sectors+0xe4>
                rc = swap_erase_trailer_sectors(state, fap_primary_slot);
    3686:	9907      	ldr	r1, [sp, #28]
    3688:	4628      	mov	r0, r5
    368a:	f7ff fe35 	bl	32f8 <swap_erase_trailer_sectors>
                assert(rc == 0);
    368e:	bb00      	cbnz	r0, 36d2 <boot_swap_sectors+0x192>
                rc = swap_status_init(state, fap_primary_slot, bs);
    3690:	4622      	mov	r2, r4
    3692:	9907      	ldr	r1, [sp, #28]
    3694:	4628      	mov	r0, r5
    3696:	f7ff fe75 	bl	3384 <swap_status_init>
                assert(rc == 0);
    369a:	bb20      	cbnz	r0, 36e6 <boot_swap_sectors+0x1a6>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    369c:	9805      	ldr	r0, [sp, #20]
    369e:	6882      	ldr	r2, [r0, #8]
    36a0:	2100      	movs	r1, #0
    36a2:	f7ff fd41 	bl	3128 <boot_erase_region>
                assert(rc == 0);
    36a6:	2800      	cmp	r0, #0
    36a8:	d0bc      	beq.n	3624 <boot_swap_sectors+0xe4>
    36aa:	f7fc fd5b 	bl	164 <hal_debugger_connected>
    36ae:	b100      	cbz	r0, 36b2 <boot_swap_sectors+0x172>
    36b0:	be01      	bkpt	0x0001
    36b2:	2300      	movs	r3, #0
    36b4:	461a      	mov	r2, r3
    36b6:	4619      	mov	r1, r3
    36b8:	4618      	mov	r0, r3
    36ba:	f7fe f877 	bl	17ac <__assert_func>
            assert(rc == 0);
    36be:	f7fc fd51 	bl	164 <hal_debugger_connected>
    36c2:	b100      	cbz	r0, 36c6 <boot_swap_sectors+0x186>
    36c4:	be01      	bkpt	0x0001
    36c6:	2300      	movs	r3, #0
    36c8:	461a      	mov	r2, r3
    36ca:	4619      	mov	r1, r3
    36cc:	4618      	mov	r0, r3
    36ce:	f7fe f86d 	bl	17ac <__assert_func>
                assert(rc == 0);
    36d2:	f7fc fd47 	bl	164 <hal_debugger_connected>
    36d6:	b100      	cbz	r0, 36da <boot_swap_sectors+0x19a>
    36d8:	be01      	bkpt	0x0001
    36da:	2300      	movs	r3, #0
    36dc:	461a      	mov	r2, r3
    36de:	4619      	mov	r1, r3
    36e0:	4618      	mov	r0, r3
    36e2:	f7fe f863 	bl	17ac <__assert_func>
                assert(rc == 0);
    36e6:	f7fc fd3d 	bl	164 <hal_debugger_connected>
    36ea:	b100      	cbz	r0, 36ee <boot_swap_sectors+0x1ae>
    36ec:	be01      	bkpt	0x0001
    36ee:	2300      	movs	r3, #0
    36f0:	461a      	mov	r2, r3
    36f2:	4619      	mov	r1, r3
    36f4:	4618      	mov	r0, r3
    36f6:	f7fe f859 	bl	17ac <__assert_func>
        assert(rc == 0);
    36fa:	f7fc fd33 	bl	164 <hal_debugger_connected>
    36fe:	b100      	cbz	r0, 3702 <boot_swap_sectors+0x1c2>
    3700:	be01      	bkpt	0x0001
    3702:	2300      	movs	r3, #0
    3704:	461a      	mov	r2, r3
    3706:	4619      	mov	r1, r3
    3708:	4618      	mov	r0, r3
    370a:	f7fe f84f 	bl	17ac <__assert_func>
        rc = boot_erase_region(fap_secondary_slot, img_off, sz);
    370e:	463a      	mov	r2, r7
    3710:	4631      	mov	r1, r6
    3712:	9806      	ldr	r0, [sp, #24]
    3714:	f7ff fd08 	bl	3128 <boot_erase_region>
        assert(rc == 0);
    3718:	bb08      	cbnz	r0, 375e <boot_swap_sectors+0x21e>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
    371a:	f8cd 8004 	str.w	r8, [sp, #4]
    371e:	9600      	str	r6, [sp, #0]
    3720:	4633      	mov	r3, r6
    3722:	9a06      	ldr	r2, [sp, #24]
    3724:	9907      	ldr	r1, [sp, #28]
    3726:	4628      	mov	r0, r5
    3728:	f7ff fd02 	bl	3130 <boot_copy_region>
        assert(rc == 0);
    372c:	bb08      	cbnz	r0, 3772 <boot_swap_sectors+0x232>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    372e:	6823      	ldr	r3, [r4, #0]
    3730:	2b01      	cmp	r3, #1
    3732:	d101      	bne.n	3738 <boot_swap_sectors+0x1f8>
    3734:	79a3      	ldrb	r3, [r4, #6]
    3736:	b333      	cbz	r3, 3786 <boot_swap_sectors+0x246>
        rc = boot_write_status(state, bs);
    3738:	4621      	mov	r1, r4
    373a:	4628      	mov	r0, r5
    373c:	f7ff fcc0 	bl	30c0 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
    3740:	2303      	movs	r3, #3
    3742:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    3744:	2800      	cmp	r0, #0
    3746:	f43f af37 	beq.w	35b8 <boot_swap_sectors+0x78>
    374a:	f7fc fd0b 	bl	164 <hal_debugger_connected>
    374e:	b100      	cbz	r0, 3752 <boot_swap_sectors+0x212>
    3750:	be01      	bkpt	0x0001
    3752:	2300      	movs	r3, #0
    3754:	461a      	mov	r2, r3
    3756:	4619      	mov	r1, r3
    3758:	4618      	mov	r0, r3
    375a:	f7fe f827 	bl	17ac <__assert_func>
        assert(rc == 0);
    375e:	f7fc fd01 	bl	164 <hal_debugger_connected>
    3762:	b100      	cbz	r0, 3766 <boot_swap_sectors+0x226>
    3764:	be01      	bkpt	0x0001
    3766:	2300      	movs	r3, #0
    3768:	461a      	mov	r2, r3
    376a:	4619      	mov	r1, r3
    376c:	4618      	mov	r0, r3
    376e:	f7fe f81d 	bl	17ac <__assert_func>
        assert(rc == 0);
    3772:	f7fc fcf7 	bl	164 <hal_debugger_connected>
    3776:	b100      	cbz	r0, 377a <boot_swap_sectors+0x23a>
    3778:	be01      	bkpt	0x0001
    377a:	2300      	movs	r3, #0
    377c:	461a      	mov	r2, r3
    377e:	4619      	mov	r1, r3
    3780:	4618      	mov	r0, r3
    3782:	f7fe f813 	bl	17ac <__assert_func>
            rc = swap_erase_trailer_sectors(state, fap_secondary_slot);
    3786:	9906      	ldr	r1, [sp, #24]
    3788:	4628      	mov	r0, r5
    378a:	f7ff fdb5 	bl	32f8 <swap_erase_trailer_sectors>
            assert(rc == 0);
    378e:	2800      	cmp	r0, #0
    3790:	d0d2      	beq.n	3738 <boot_swap_sectors+0x1f8>
    3792:	f7fc fce7 	bl	164 <hal_debugger_connected>
    3796:	b100      	cbz	r0, 379a <boot_swap_sectors+0x25a>
    3798:	be01      	bkpt	0x0001
    379a:	2300      	movs	r3, #0
    379c:	461a      	mov	r2, r3
    379e:	4619      	mov	r1, r3
    37a0:	4618      	mov	r0, r3
    37a2:	f7fe f803 	bl	17ac <__assert_func>
        rc = boot_erase_region(fap_primary_slot, img_off, sz);
    37a6:	463a      	mov	r2, r7
    37a8:	4631      	mov	r1, r6
    37aa:	9807      	ldr	r0, [sp, #28]
    37ac:	f7ff fcbc 	bl	3128 <boot_erase_region>
        assert(rc == 0);
    37b0:	2800      	cmp	r0, #0
    37b2:	d15f      	bne.n	3874 <boot_swap_sectors+0x334>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    37b4:	f8cd 8004 	str.w	r8, [sp, #4]
    37b8:	9600      	str	r6, [sp, #0]
    37ba:	2300      	movs	r3, #0
    37bc:	9a07      	ldr	r2, [sp, #28]
    37be:	9905      	ldr	r1, [sp, #20]
    37c0:	4628      	mov	r0, r5
    37c2:	f7ff fcb5 	bl	3130 <boot_copy_region>
        assert(rc == 0);
    37c6:	2800      	cmp	r0, #0
    37c8:	d15e      	bne.n	3888 <boot_swap_sectors+0x348>
        if (bs->use_scratch) {
    37ca:	79a3      	ldrb	r3, [r4, #6]
    37cc:	2b00      	cmp	r3, #0
    37ce:	d02e      	beq.n	382e <boot_swap_sectors+0x2ee>
            scratch_trailer_off = boot_status_off(fap_scratch);
    37d0:	9805      	ldr	r0, [sp, #20]
    37d2:	f7fe ffd7 	bl	2784 <boot_status_off>
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    37d6:	4446      	add	r6, r8
                        (BOOT_STATUS_STATE_COUNT - 1) * BOOT_WRITE_SZ(state));
    37d8:	6eab      	ldr	r3, [r5, #104]	; 0x68
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    37da:	005b      	lsls	r3, r3, #1
    37dc:	9301      	str	r3, [sp, #4]
    37de:	9600      	str	r6, [sp, #0]
    37e0:	4603      	mov	r3, r0
    37e2:	9a07      	ldr	r2, [sp, #28]
    37e4:	9905      	ldr	r1, [sp, #20]
    37e6:	4628      	mov	r0, r5
    37e8:	f7ff fca2 	bl	3130 <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
    37ec:	2800      	cmp	r0, #0
    37ee:	d155      	bne.n	389c <boot_swap_sectors+0x35c>
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
    37f0:	a903      	add	r1, sp, #12
    37f2:	2003      	movs	r0, #3
    37f4:	f7ff f83e 	bl	2874 <boot_read_swap_state_by_id>
            assert(rc == 0);
    37f8:	2800      	cmp	r0, #0
    37fa:	d159      	bne.n	38b0 <boot_swap_sectors+0x370>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    37fc:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3800:	2b01      	cmp	r3, #1
    3802:	d05f      	beq.n	38c4 <boot_swap_sectors+0x384>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    3804:	f89d 100d 	ldrb.w	r1, [sp, #13]
    3808:	2901      	cmp	r1, #1
    380a:	d005      	beq.n	3818 <boot_swap_sectors+0x2d8>
                rc = boot_write_swap_info(fap_primary_slot,
    380c:	2200      	movs	r2, #0
    380e:	9807      	ldr	r0, [sp, #28]
    3810:	f7ff f876 	bl	2900 <boot_write_swap_info>
                assert(rc == 0);
    3814:	2800      	cmp	r0, #0
    3816:	d164      	bne.n	38e2 <boot_swap_sectors+0x3a2>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    3818:	68a1      	ldr	r1, [r4, #8]
    381a:	9807      	ldr	r0, [sp, #28]
    381c:	f7ff f89a 	bl	2954 <boot_write_swap_size>
            assert(rc == 0);
    3820:	2800      	cmp	r0, #0
    3822:	d168      	bne.n	38f6 <boot_swap_sectors+0x3b6>
            rc = boot_write_magic(fap_primary_slot);
    3824:	9807      	ldr	r0, [sp, #28]
    3826:	f7ff f84d 	bl	28c4 <boot_write_magic>
            assert(rc == 0);
    382a:	2800      	cmp	r0, #0
    382c:	d16d      	bne.n	390a <boot_swap_sectors+0x3ca>
        erase_scratch = bs->use_scratch;
    382e:	79a6      	ldrb	r6, [r4, #6]
        bs->use_scratch = 0;
    3830:	2300      	movs	r3, #0
    3832:	71a3      	strb	r3, [r4, #6]
        rc = boot_write_status(state, bs);
    3834:	4621      	mov	r1, r4
    3836:	4628      	mov	r0, r5
    3838:	f7ff fc42 	bl	30c0 <boot_write_status>
        bs->idx++;
    383c:	6823      	ldr	r3, [r4, #0]
    383e:	3301      	adds	r3, #1
    3840:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    3842:	2301      	movs	r3, #1
    3844:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    3846:	2800      	cmp	r0, #0
    3848:	d169      	bne.n	391e <boot_swap_sectors+0x3de>
        if (erase_scratch) {
    384a:	2e00      	cmp	r6, #0
    384c:	f43f aeb8 	beq.w	35c0 <boot_swap_sectors+0x80>
            rc = boot_erase_region(fap_scratch, 0, sz);
    3850:	463a      	mov	r2, r7
    3852:	2100      	movs	r1, #0
    3854:	9805      	ldr	r0, [sp, #20]
    3856:	f7ff fc67 	bl	3128 <boot_erase_region>
            assert(rc == 0);
    385a:	2800      	cmp	r0, #0
    385c:	f43f aeb0 	beq.w	35c0 <boot_swap_sectors+0x80>
    3860:	f7fc fc80 	bl	164 <hal_debugger_connected>
    3864:	b100      	cbz	r0, 3868 <boot_swap_sectors+0x328>
    3866:	be01      	bkpt	0x0001
    3868:	2300      	movs	r3, #0
    386a:	461a      	mov	r2, r3
    386c:	4619      	mov	r1, r3
    386e:	4618      	mov	r0, r3
    3870:	f7fd ff9c 	bl	17ac <__assert_func>
        assert(rc == 0);
    3874:	f7fc fc76 	bl	164 <hal_debugger_connected>
    3878:	b100      	cbz	r0, 387c <boot_swap_sectors+0x33c>
    387a:	be01      	bkpt	0x0001
    387c:	2300      	movs	r3, #0
    387e:	461a      	mov	r2, r3
    3880:	4619      	mov	r1, r3
    3882:	4618      	mov	r0, r3
    3884:	f7fd ff92 	bl	17ac <__assert_func>
        assert(rc == 0);
    3888:	f7fc fc6c 	bl	164 <hal_debugger_connected>
    388c:	b100      	cbz	r0, 3890 <boot_swap_sectors+0x350>
    388e:	be01      	bkpt	0x0001
    3890:	2300      	movs	r3, #0
    3892:	461a      	mov	r2, r3
    3894:	4619      	mov	r1, r3
    3896:	4618      	mov	r0, r3
    3898:	f7fd ff88 	bl	17ac <__assert_func>
            BOOT_STATUS_ASSERT(rc == 0);
    389c:	f7fc fc62 	bl	164 <hal_debugger_connected>
    38a0:	b100      	cbz	r0, 38a4 <boot_swap_sectors+0x364>
    38a2:	be01      	bkpt	0x0001
    38a4:	2300      	movs	r3, #0
    38a6:	461a      	mov	r2, r3
    38a8:	4619      	mov	r1, r3
    38aa:	4618      	mov	r0, r3
    38ac:	f7fd ff7e 	bl	17ac <__assert_func>
            assert(rc == 0);
    38b0:	f7fc fc58 	bl	164 <hal_debugger_connected>
    38b4:	b100      	cbz	r0, 38b8 <boot_swap_sectors+0x378>
    38b6:	be01      	bkpt	0x0001
    38b8:	2300      	movs	r3, #0
    38ba:	461a      	mov	r2, r3
    38bc:	4619      	mov	r1, r3
    38be:	4618      	mov	r0, r3
    38c0:	f7fd ff74 	bl	17ac <__assert_func>
                rc = boot_write_image_ok(fap_primary_slot);
    38c4:	9807      	ldr	r0, [sp, #28]
    38c6:	f7ff f814 	bl	28f2 <boot_write_image_ok>
                assert(rc == 0);
    38ca:	2800      	cmp	r0, #0
    38cc:	d09a      	beq.n	3804 <boot_swap_sectors+0x2c4>
    38ce:	f7fc fc49 	bl	164 <hal_debugger_connected>
    38d2:	b100      	cbz	r0, 38d6 <boot_swap_sectors+0x396>
    38d4:	be01      	bkpt	0x0001
    38d6:	2300      	movs	r3, #0
    38d8:	461a      	mov	r2, r3
    38da:	4619      	mov	r1, r3
    38dc:	4618      	mov	r0, r3
    38de:	f7fd ff65 	bl	17ac <__assert_func>
                assert(rc == 0);
    38e2:	f7fc fc3f 	bl	164 <hal_debugger_connected>
    38e6:	b100      	cbz	r0, 38ea <boot_swap_sectors+0x3aa>
    38e8:	be01      	bkpt	0x0001
    38ea:	2300      	movs	r3, #0
    38ec:	461a      	mov	r2, r3
    38ee:	4619      	mov	r1, r3
    38f0:	4618      	mov	r0, r3
    38f2:	f7fd ff5b 	bl	17ac <__assert_func>
            assert(rc == 0);
    38f6:	f7fc fc35 	bl	164 <hal_debugger_connected>
    38fa:	b100      	cbz	r0, 38fe <boot_swap_sectors+0x3be>
    38fc:	be01      	bkpt	0x0001
    38fe:	2300      	movs	r3, #0
    3900:	461a      	mov	r2, r3
    3902:	4619      	mov	r1, r3
    3904:	4618      	mov	r0, r3
    3906:	f7fd ff51 	bl	17ac <__assert_func>
            assert(rc == 0);
    390a:	f7fc fc2b 	bl	164 <hal_debugger_connected>
    390e:	b100      	cbz	r0, 3912 <boot_swap_sectors+0x3d2>
    3910:	be01      	bkpt	0x0001
    3912:	2300      	movs	r3, #0
    3914:	461a      	mov	r2, r3
    3916:	4619      	mov	r1, r3
    3918:	4618      	mov	r0, r3
    391a:	f7fd ff47 	bl	17ac <__assert_func>
        BOOT_STATUS_ASSERT(rc == 0);
    391e:	f7fc fc21 	bl	164 <hal_debugger_connected>
    3922:	b100      	cbz	r0, 3926 <boot_swap_sectors+0x3e6>
    3924:	be01      	bkpt	0x0001
    3926:	2300      	movs	r3, #0
    3928:	461a      	mov	r2, r3
    392a:	4619      	mov	r1, r3
    392c:	4618      	mov	r0, r3
    392e:	f7fd ff3d 	bl	17ac <__assert_func>

00003932 <boot_read_image_header>:
{
    3932:	b510      	push	{r4, lr}
    3934:	b082      	sub	sp, #8
    3936:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    3938:	2000      	movs	r0, #0
    393a:	f000 fb47 	bl	3fcc <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    393e:	a901      	add	r1, sp, #4
    3940:	b2c0      	uxtb	r0, r0
    3942:	f001 fa5f 	bl	4e04 <flash_area_open>
    if (rc != 0) {
    3946:	b118      	cbz	r0, 3950 <boot_read_image_header+0x1e>
        rc = BOOT_EFLASH;
    3948:	2301      	movs	r3, #1
}
    394a:	4618      	mov	r0, r3
    394c:	b002      	add	sp, #8
    394e:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    3950:	2320      	movs	r3, #32
    3952:	4622      	mov	r2, r4
    3954:	2100      	movs	r1, #0
    3956:	9801      	ldr	r0, [sp, #4]
    3958:	f001 faac 	bl	4eb4 <flash_area_read>
    if (rc != 0) {
    395c:	4603      	mov	r3, r0
    395e:	2800      	cmp	r0, #0
    3960:	d0f3      	beq.n	394a <boot_read_image_header+0x18>
        rc = BOOT_EFLASH;
    3962:	2301      	movs	r3, #1
    3964:	e7f1      	b.n	394a <boot_read_image_header+0x18>
	...

00003968 <swap_read_status_bytes>:
{
    3968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    396c:	b083      	sub	sp, #12
    396e:	4606      	mov	r6, r0
    3970:	4689      	mov	r9, r1
    3972:	4693      	mov	fp, r2
    off = boot_status_off(fap);
    3974:	f7fe ff06 	bl	2784 <boot_status_off>
    3978:	4680      	mov	r8, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    397a:	4631      	mov	r1, r6
    397c:	2000      	movs	r0, #0
    397e:	f7fe fef2 	bl	2766 <boot_status_entries>
    if (max_entries < 0) {
    3982:	1e07      	subs	r7, r0, #0
    3984:	db46      	blt.n	3a14 <swap_read_status_bytes+0xac>
    for (i = 0; i < max_entries; i++) {
    3986:	2400      	movs	r4, #0
    found_idx = 0;
    3988:	46a2      	mov	sl, r4
    found = 0;
    398a:	4625      	mov	r5, r4
    398c:	e007      	b.n	399e <swap_read_status_bytes+0x36>
            if (found && !found_idx) {
    398e:	b12d      	cbz	r5, 399c <swap_read_status_bytes+0x34>
    3990:	f1ba 0f00 	cmp.w	sl, #0
    3994:	d102      	bne.n	399c <swap_read_status_bytes+0x34>
                found_idx = i;
    3996:	46a2      	mov	sl, r4
    3998:	e000      	b.n	399c <swap_read_status_bytes+0x34>
            found = 1;
    399a:	2501      	movs	r5, #1
    for (i = 0; i < max_entries; i++) {
    399c:	3401      	adds	r4, #1
    399e:	42bc      	cmp	r4, r7
    39a0:	da14      	bge.n	39cc <swap_read_status_bytes+0x64>
        rc = flash_area_read_is_empty(fap, off + i * BOOT_WRITE_SZ(state),
    39a2:	f8d9 1068 	ldr.w	r1, [r9, #104]	; 0x68
    39a6:	2301      	movs	r3, #1
    39a8:	f10d 0207 	add.w	r2, sp, #7
    39ac:	fb01 8104 	mla	r1, r1, r4, r8
    39b0:	4630      	mov	r0, r6
    39b2:	f001 fac2 	bl	4f3a <flash_area_read_is_empty>
        if (rc < 0) {
    39b6:	2800      	cmp	r0, #0
    39b8:	db2e      	blt.n	3a18 <swap_read_status_bytes+0xb0>
        if (rc == 1) {
    39ba:	2801      	cmp	r0, #1
    39bc:	d0e7      	beq.n	398e <swap_read_status_bytes+0x26>
        } else if (!found) {
    39be:	2d00      	cmp	r5, #0
    39c0:	d0eb      	beq.n	399a <swap_read_status_bytes+0x32>
        } else if (found_idx) {
    39c2:	f1ba 0f00 	cmp.w	sl, #0
    39c6:	d0e9      	beq.n	399c <swap_read_status_bytes+0x34>
            invalid = 1;
    39c8:	4629      	mov	r1, r5
    39ca:	e000      	b.n	39ce <swap_read_status_bytes+0x66>
    invalid = 0;
    39cc:	2100      	movs	r1, #0
    if (invalid) {
    39ce:	b9a1      	cbnz	r1, 39fa <swap_read_status_bytes+0x92>
    if (found) {
    39d0:	b31d      	cbz	r5, 3a1a <swap_read_status_bytes+0xb2>
        if (!found_idx) {
    39d2:	f1ba 0f00 	cmp.w	sl, #0
    39d6:	d000      	beq.n	39da <swap_read_status_bytes+0x72>
    39d8:	4654      	mov	r4, sl
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    39da:	4b12      	ldr	r3, [pc, #72]	; (3a24 <swap_read_status_bytes+0xbc>)
    39dc:	fb83 2304 	smull	r2, r3, r3, r4
    39e0:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
    39e4:	1c5a      	adds	r2, r3, #1
    39e6:	f8cb 2000 	str.w	r2, [fp]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    39ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    39ee:	1ae2      	subs	r2, r4, r3
    39f0:	1c53      	adds	r3, r2, #1
    39f2:	f88b 3004 	strb.w	r3, [fp, #4]
    return 0;
    39f6:	460d      	mov	r5, r1
    39f8:	e00f      	b.n	3a1a <swap_read_status_bytes+0xb2>
        BOOT_LOG_ERR("Detected inconsistent status!");
    39fa:	480b      	ldr	r0, [pc, #44]	; (3a28 <swap_read_status_bytes+0xc0>)
    39fc:	f000 fe20 	bl	4640 <puts>
        assert(0);
    3a00:	f7fc fbb0 	bl	164 <hal_debugger_connected>
    3a04:	b100      	cbz	r0, 3a08 <swap_read_status_bytes+0xa0>
    3a06:	be01      	bkpt	0x0001
    3a08:	2300      	movs	r3, #0
    3a0a:	461a      	mov	r2, r3
    3a0c:	4619      	mov	r1, r3
    3a0e:	4618      	mov	r0, r3
    3a10:	f7fd fecc 	bl	17ac <__assert_func>
        return BOOT_EBADARGS;
    3a14:	2507      	movs	r5, #7
    3a16:	e000      	b.n	3a1a <swap_read_status_bytes+0xb2>
            return BOOT_EFLASH;
    3a18:	2501      	movs	r5, #1
}
    3a1a:	4628      	mov	r0, r5
    3a1c:	b003      	add	sp, #12
    3a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3a22:	bf00      	nop
    3a24:	55555556 	.word	0x55555556
    3a28:	00005b40 	.word	0x00005b40

00003a2c <boot_status_internal_off>:
{
    3a2c:	b410      	push	{r4}
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    3a2e:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    3a32:	6803      	ldr	r3, [r0, #0]
    3a34:	3b01      	subs	r3, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    3a36:	7902      	ldrb	r2, [r0, #4]
    3a38:	3a01      	subs	r2, #1
    3a3a:	fb01 f102 	mul.w	r1, r1, r2
}
    3a3e:	fb03 1004 	mla	r0, r3, r4, r1
    3a42:	bc10      	pop	{r4}
    3a44:	4770      	bx	lr
	...

00003a48 <boot_slots_compatible>:
{
    3a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return BOOT_IMG(state, slot).num_sectors;
    3a4c:	6a87      	ldr	r7, [r0, #40]	; 0x28
    3a4e:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    3a52:	2f80      	cmp	r7, #128	; 0x80
    3a54:	d80d      	bhi.n	3a72 <boot_slots_compatible+0x2a>
    3a56:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    3a5a:	d80a      	bhi.n	3a72 <boot_slots_compatible+0x2a>
    3a5c:	6d83      	ldr	r3, [r0, #88]	; 0x58
    3a5e:	f8d3 8008 	ldr.w	r8, [r3, #8]
    smaller = 0;
    3a62:	2500      	movs	r5, #0
    j = sz1 = secondary_slot_sz = 0;
    3a64:	462c      	mov	r4, r5
    i = sz0 = primary_slot_sz = 0;
    3a66:	4629      	mov	r1, r5
    j = sz1 = secondary_slot_sz = 0;
    3a68:	46a9      	mov	r9, r5
    i = sz0 = primary_slot_sz = 0;
    3a6a:	46ae      	mov	lr, r5
    j = sz1 = secondary_slot_sz = 0;
    3a6c:	462a      	mov	r2, r5
    i = sz0 = primary_slot_sz = 0;
    3a6e:	462b      	mov	r3, r5
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    3a70:	e019      	b.n	3aa6 <boot_slots_compatible+0x5e>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
    3a72:	4831      	ldr	r0, [pc, #196]	; (3b38 <boot_slots_compatible+0xf0>)
    3a74:	f000 fde4 	bl	4640 <puts>
        return 0;
    3a78:	2000      	movs	r0, #0
}
    3a7a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    3a7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
    3a80:	eb01 0b41 	add.w	fp, r1, r1, lsl #1
    3a84:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    3a88:	4456      	add	r6, sl
    3a8a:	68b6      	ldr	r6, [r6, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    3a8c:	4433      	add	r3, r6
    3a8e:	6d06      	ldr	r6, [r0, #80]	; 0x50
    3a90:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
    3a94:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    3a98:	4456      	add	r6, sl
    3a9a:	68b6      	ldr	r6, [r6, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    3a9c:	4432      	add	r2, r6
            i++;
    3a9e:	3101      	adds	r1, #1
            j++;
    3aa0:	3401      	adds	r4, #1
        if (sz0 == sz1) {
    3aa2:	4293      	cmp	r3, r2
    3aa4:	d02b      	beq.n	3afe <boot_slots_compatible+0xb6>
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    3aa6:	42b9      	cmp	r1, r7
    3aa8:	d301      	bcc.n	3aae <boot_slots_compatible+0x66>
    3aaa:	4564      	cmp	r4, ip
    3aac:	d236      	bcs.n	3b1c <boot_slots_compatible+0xd4>
        if (sz0 == sz1) {
    3aae:	4293      	cmp	r3, r2
    3ab0:	d0e5      	beq.n	3a7e <boot_slots_compatible+0x36>
        } else if (sz0 < sz1) {
    3ab2:	4293      	cmp	r3, r2
    3ab4:	d211      	bcs.n	3ada <boot_slots_compatible+0x92>
    3ab6:	6a46      	ldr	r6, [r0, #36]	; 0x24
    3ab8:	eb01 0b41 	add.w	fp, r1, r1, lsl #1
    3abc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    3ac0:	4456      	add	r6, sl
    3ac2:	68b6      	ldr	r6, [r6, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    3ac4:	4433      	add	r3, r6
            if (smaller == 2) {
    3ac6:	2d02      	cmp	r5, #2
    3ac8:	d002      	beq.n	3ad0 <boot_slots_compatible+0x88>
            i++;
    3aca:	3101      	adds	r1, #1
            smaller = 1;
    3acc:	2501      	movs	r5, #1
    3ace:	e7e8      	b.n	3aa2 <boot_slots_compatible+0x5a>
                BOOT_LOG_WRN("Cannot upgrade: slots have non-compatible sectors");
    3ad0:	481a      	ldr	r0, [pc, #104]	; (3b3c <boot_slots_compatible+0xf4>)
    3ad2:	f000 fdb5 	bl	4640 <puts>
                return 0;
    3ad6:	2000      	movs	r0, #0
    3ad8:	e7cf      	b.n	3a7a <boot_slots_compatible+0x32>
    3ada:	6d06      	ldr	r6, [r0, #80]	; 0x50
    3adc:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
    3ae0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    3ae4:	4456      	add	r6, sl
    3ae6:	68b6      	ldr	r6, [r6, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    3ae8:	4432      	add	r2, r6
            if (smaller == 1) {
    3aea:	2d01      	cmp	r5, #1
    3aec:	d002      	beq.n	3af4 <boot_slots_compatible+0xac>
            j++;
    3aee:	3401      	adds	r4, #1
            smaller = 2;
    3af0:	2502      	movs	r5, #2
    3af2:	e7d6      	b.n	3aa2 <boot_slots_compatible+0x5a>
                BOOT_LOG_WRN("Cannot upgrade: slots have non-compatible sectors");
    3af4:	4811      	ldr	r0, [pc, #68]	; (3b3c <boot_slots_compatible+0xf4>)
    3af6:	f000 fda3 	bl	4640 <puts>
                return 0;
    3afa:	2000      	movs	r0, #0
    3afc:	e7bd      	b.n	3a7a <boot_slots_compatible+0x32>
            primary_slot_sz += sz0;
    3afe:	449e      	add	lr, r3
            secondary_slot_sz += sz1;
    3b00:	4491      	add	r9, r2
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    3b02:	4543      	cmp	r3, r8
    3b04:	d805      	bhi.n	3b12 <boot_slots_compatible+0xca>
    3b06:	4542      	cmp	r2, r8
    3b08:	d803      	bhi.n	3b12 <boot_slots_compatible+0xca>
            smaller = sz0 = sz1 = 0;
    3b0a:	2500      	movs	r5, #0
    3b0c:	462a      	mov	r2, r5
    3b0e:	462b      	mov	r3, r5
    3b10:	e7c9      	b.n	3aa6 <boot_slots_compatible+0x5e>
                BOOT_LOG_WRN("Cannot upgrade: not all sectors fit inside scratch");
    3b12:	480b      	ldr	r0, [pc, #44]	; (3b40 <boot_slots_compatible+0xf8>)
    3b14:	f000 fd94 	bl	4640 <puts>
                return 0;
    3b18:	2000      	movs	r0, #0
    3b1a:	e7ae      	b.n	3a7a <boot_slots_compatible+0x32>
    if ((i != num_sectors_primary) ||
    3b1c:	42b9      	cmp	r1, r7
    3b1e:	d101      	bne.n	3b24 <boot_slots_compatible+0xdc>
    3b20:	4564      	cmp	r4, ip
    3b22:	d004      	beq.n	3b2e <boot_slots_compatible+0xe6>
        BOOT_LOG_WRN("Cannot upgrade: slots are not compatible");
    3b24:	4807      	ldr	r0, [pc, #28]	; (3b44 <boot_slots_compatible+0xfc>)
    3b26:	f000 fd8b 	bl	4640 <puts>
        return 0;
    3b2a:	2000      	movs	r0, #0
    3b2c:	e7a5      	b.n	3a7a <boot_slots_compatible+0x32>
        (j != num_sectors_secondary) ||
    3b2e:	45ce      	cmp	lr, r9
    3b30:	d1f8      	bne.n	3b24 <boot_slots_compatible+0xdc>
    return 1;
    3b32:	2001      	movs	r0, #1
    3b34:	e7a1      	b.n	3a7a <boot_slots_compatible+0x32>
    3b36:	bf00      	nop
    3b38:	00005a5c 	.word	0x00005a5c
    3b3c:	00005a8c 	.word	0x00005a8c
    3b40:	00005ac4 	.word	0x00005ac4
    3b44:	00005b00 	.word	0x00005b00

00003b48 <swap_status_source>:
{
    3b48:	b530      	push	{r4, r5, lr}
    3b4a:	b087      	sub	sp, #28
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    3b4c:	a902      	add	r1, sp, #8
    3b4e:	2001      	movs	r0, #1
    3b50:	f7fe fe90 	bl	2874 <boot_read_swap_state_by_id>
    assert(rc == 0);
    3b54:	bb68      	cbnz	r0, 3bb2 <swap_status_source+0x6a>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
    3b56:	a904      	add	r1, sp, #16
    3b58:	2003      	movs	r0, #3
    3b5a:	f7fe fe8b 	bl	2874 <boot_read_swap_state_by_id>
    assert(rc == 0);
    3b5e:	4605      	mov	r5, r0
    3b60:	bb88      	cbnz	r0, 3bc6 <swap_status_source+0x7e>
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    3b62:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3b66:	2b01      	cmp	r3, #1
    3b68:	d039      	beq.n	3bde <swap_status_source+0x96>
    3b6a:	2b03      	cmp	r3, #3
    3b6c:	d035      	beq.n	3bda <swap_status_source+0x92>
    3b6e:	4a3c      	ldr	r2, [pc, #240]	; (3c60 <swap_status_source+0x118>)
    3b70:	f89d 3009 	ldrb.w	r3, [sp, #9]
    3b74:	f89d 100a 	ldrb.w	r1, [sp, #10]
    3b78:	f89d 000b 	ldrb.w	r0, [sp, #11]
    3b7c:	9001      	str	r0, [sp, #4]
    3b7e:	9100      	str	r1, [sp, #0]
    3b80:	4938      	ldr	r1, [pc, #224]	; (3c64 <swap_status_source+0x11c>)
    3b82:	4839      	ldr	r0, [pc, #228]	; (3c68 <swap_status_source+0x120>)
    3b84:	f001 f85e 	bl	4c44 <printf>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
    3b88:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3b8c:	2b01      	cmp	r3, #1
    3b8e:	d02a      	beq.n	3be6 <swap_status_source+0x9e>
    3b90:	2b03      	cmp	r3, #3
    3b92:	d026      	beq.n	3be2 <swap_status_source+0x9a>
    3b94:	4a32      	ldr	r2, [pc, #200]	; (3c60 <swap_status_source+0x118>)
    3b96:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3b9a:	f89d 1012 	ldrb.w	r1, [sp, #18]
    3b9e:	f89d 0013 	ldrb.w	r0, [sp, #19]
    3ba2:	9001      	str	r0, [sp, #4]
    3ba4:	9100      	str	r1, [sp, #0]
    3ba6:	4931      	ldr	r1, [pc, #196]	; (3c6c <swap_status_source+0x124>)
    3ba8:	482f      	ldr	r0, [pc, #188]	; (3c68 <swap_status_source+0x120>)
    3baa:	f001 f84b 	bl	4c44 <printf>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    3bae:	2400      	movs	r4, #0
    3bb0:	e025      	b.n	3bfe <swap_status_source+0xb6>
    assert(rc == 0);
    3bb2:	f7fc fad7 	bl	164 <hal_debugger_connected>
    3bb6:	b100      	cbz	r0, 3bba <swap_status_source+0x72>
    3bb8:	be01      	bkpt	0x0001
    3bba:	2300      	movs	r3, #0
    3bbc:	461a      	mov	r2, r3
    3bbe:	4619      	mov	r1, r3
    3bc0:	4618      	mov	r0, r3
    3bc2:	f7fd fdf3 	bl	17ac <__assert_func>
    assert(rc == 0);
    3bc6:	f7fc facd 	bl	164 <hal_debugger_connected>
    3bca:	b100      	cbz	r0, 3bce <swap_status_source+0x86>
    3bcc:	be01      	bkpt	0x0001
    3bce:	2300      	movs	r3, #0
    3bd0:	461a      	mov	r2, r3
    3bd2:	4619      	mov	r1, r3
    3bd4:	4618      	mov	r0, r3
    3bd6:	f7fd fde9 	bl	17ac <__assert_func>
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    3bda:	4a25      	ldr	r2, [pc, #148]	; (3c70 <swap_status_source+0x128>)
    3bdc:	e7c8      	b.n	3b70 <swap_status_source+0x28>
    3bde:	4a25      	ldr	r2, [pc, #148]	; (3c74 <swap_status_source+0x12c>)
    3be0:	e7c6      	b.n	3b70 <swap_status_source+0x28>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
    3be2:	4a23      	ldr	r2, [pc, #140]	; (3c70 <swap_status_source+0x128>)
    3be4:	e7d7      	b.n	3b96 <swap_status_source+0x4e>
    3be6:	4a23      	ldr	r2, [pc, #140]	; (3c74 <swap_status_source+0x12c>)
    3be8:	e7d5      	b.n	3b96 <swap_status_source+0x4e>
            BOOT_LOG_INF("Boot source: %s",
    3bea:	4923      	ldr	r1, [pc, #140]	; (3c78 <swap_status_source+0x130>)
    3bec:	e000      	b.n	3bf0 <swap_status_source+0xa8>
    3bee:	4923      	ldr	r1, [pc, #140]	; (3c7c <swap_status_source+0x134>)
    3bf0:	4823      	ldr	r0, [pc, #140]	; (3c80 <swap_status_source+0x138>)
    3bf2:	f001 f827 	bl	4c44 <printf>
            return source;
    3bf6:	e030      	b.n	3c5a <swap_status_source+0x112>
            BOOT_LOG_INF("Boot source: %s",
    3bf8:	4922      	ldr	r1, [pc, #136]	; (3c84 <swap_status_source+0x13c>)
    3bfa:	e7f9      	b.n	3bf0 <swap_status_source+0xa8>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    3bfc:	3401      	adds	r4, #1
    3bfe:	2c03      	cmp	r4, #3
    3c00:	d828      	bhi.n	3c54 <swap_status_source+0x10c>
        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    3c02:	f89d 1008 	ldrb.w	r1, [sp, #8]
    3c06:	4b20      	ldr	r3, [pc, #128]	; (3c88 <swap_status_source+0x140>)
    3c08:	f813 0024 	ldrb.w	r0, [r3, r4, lsl #2]
    3c0c:	f7fe fd92 	bl	2734 <boot_magic_compatible_check>
    3c10:	2800      	cmp	r0, #0
    3c12:	d0f3      	beq.n	3bfc <swap_status_source+0xb4>
            boot_magic_compatible_check(table->bst_magic_scratch,
    3c14:	4b1c      	ldr	r3, [pc, #112]	; (3c88 <swap_status_source+0x140>)
    3c16:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3c1a:	f89d 1010 	ldrb.w	r1, [sp, #16]
    3c1e:	7858      	ldrb	r0, [r3, #1]
    3c20:	f7fe fd88 	bl	2734 <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
    3c24:	2800      	cmp	r0, #0
    3c26:	d0e9      	beq.n	3bfc <swap_status_source+0xb4>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    3c28:	4b17      	ldr	r3, [pc, #92]	; (3c88 <swap_status_source+0x140>)
    3c2a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3c2e:	789b      	ldrb	r3, [r3, #2]
                          state_scratch.magic) &&
    3c30:	2b04      	cmp	r3, #4
    3c32:	d003      	beq.n	3c3c <swap_status_source+0xf4>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
    3c34:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    3c38:	4293      	cmp	r3, r2
    3c3a:	d1df      	bne.n	3bfc <swap_status_source+0xb4>
            source = table->bst_status_source;
    3c3c:	4b12      	ldr	r3, [pc, #72]	; (3c88 <swap_status_source+0x140>)
    3c3e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    3c42:	78e5      	ldrb	r5, [r4, #3]
            BOOT_LOG_INF("Boot source: %s",
    3c44:	2d00      	cmp	r5, #0
    3c46:	d0d2      	beq.n	3bee <swap_status_source+0xa6>
    3c48:	2d01      	cmp	r5, #1
    3c4a:	d0d5      	beq.n	3bf8 <swap_status_source+0xb0>
    3c4c:	2d02      	cmp	r5, #2
    3c4e:	d0cc      	beq.n	3bea <swap_status_source+0xa2>
    3c50:	490e      	ldr	r1, [pc, #56]	; (3c8c <swap_status_source+0x144>)
    3c52:	e7cd      	b.n	3bf0 <swap_status_source+0xa8>
    BOOT_LOG_INF("Boot source: none");
    3c54:	480e      	ldr	r0, [pc, #56]	; (3c90 <swap_status_source+0x148>)
    3c56:	f000 fcf3 	bl	4640 <puts>
}
    3c5a:	4628      	mov	r0, r5
    3c5c:	b007      	add	sp, #28
    3c5e:	bd30      	pop	{r4, r5, pc}
    3c60:	00005b64 	.word	0x00005b64
    3c64:	00005b98 	.word	0x00005b98
    3c68:	00005ba8 	.word	0x00005ba8
    3c6c:	00005bec 	.word	0x00005bec
    3c70:	00005b70 	.word	0x00005b70
    3c74:	00005b68 	.word	0x00005b68
    3c78:	00005b88 	.word	0x00005b88
    3c7c:	00005b80 	.word	0x00005b80
    3c80:	00005bf4 	.word	0x00005bf4
    3c84:	00005b78 	.word	0x00005b78
    3c88:	00005b30 	.word	0x00005b30
    3c8c:	000058f8 	.word	0x000058f8
    3c90:	00005c0c 	.word	0x00005c0c

00003c94 <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    3c94:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c96:	b083      	sub	sp, #12
    3c98:	4605      	mov	r5, r0
    3c9a:	460e      	mov	r6, r1
    uint32_t swap_idx;
    int last_idx_secondary_slot;
    uint32_t primary_slot_size;
    uint32_t secondary_slot_size;
    primary_slot_size = 0;
    secondary_slot_size = 0;
    3c9c:	2000      	movs	r0, #0
    primary_slot_size = 0;
    3c9e:	4603      	mov	r3, r0
    last_sector_idx = 0;
    3ca0:	4601      	mov	r1, r0
    3ca2:	e000      	b.n	3ca6 <swap_run+0x12>
        if (primary_slot_size >= copy_size &&
                secondary_slot_size >= copy_size &&
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    3ca4:	3101      	adds	r1, #1
        if ((primary_slot_size < copy_size) ||
    3ca6:	4293      	cmp	r3, r2
    3ca8:	d301      	bcc.n	3cae <swap_run+0x1a>
    3caa:	4283      	cmp	r3, r0
    3cac:	d207      	bcs.n	3cbe <swap_run+0x2a>
    3cae:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    3cb0:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    3cb4:	ea4f 078c 	mov.w	r7, ip, lsl #2
    3cb8:	443c      	add	r4, r7
    3cba:	68a4      	ldr	r4, [r4, #8]
           primary_slot_size += boot_img_sector_size(state,
    3cbc:	4423      	add	r3, r4
        if ((secondary_slot_size < copy_size) ||
    3cbe:	4290      	cmp	r0, r2
    3cc0:	d301      	bcc.n	3cc6 <swap_run+0x32>
    3cc2:	4283      	cmp	r3, r0
    3cc4:	d907      	bls.n	3cd6 <swap_run+0x42>
    3cc6:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    3cc8:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    3ccc:	ea4f 078c 	mov.w	r7, ip, lsl #2
    3cd0:	443c      	add	r4, r7
    3cd2:	68a4      	ldr	r4, [r4, #8]
           secondary_slot_size += boot_img_sector_size(state,
    3cd4:	4420      	add	r0, r4
        if (primary_slot_size >= copy_size &&
    3cd6:	4293      	cmp	r3, r2
    3cd8:	d3e4      	bcc.n	3ca4 <swap_run+0x10>
    3cda:	4290      	cmp	r0, r2
    3cdc:	d3e2      	bcc.n	3ca4 <swap_run+0x10>
                secondary_slot_size >= copy_size &&
    3cde:	4283      	cmp	r3, r0
    3ce0:	d1e0      	bne.n	3ca4 <swap_run+0x10>
        last_idx_secondary_slot++;
    }

    swap_idx = 0;
    3ce2:	2400      	movs	r4, #0
    3ce4:	e002      	b.n	3cec <swap_run+0x58>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
    3ce6:	9901      	ldr	r1, [sp, #4]
    3ce8:	3901      	subs	r1, #1
        swap_idx++;
    3cea:	3401      	adds	r4, #1
    while (last_sector_idx >= 0) {
    3cec:	2900      	cmp	r1, #0
    3cee:	db0e      	blt.n	3d0e <swap_run+0x7a>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
    3cf0:	aa01      	add	r2, sp, #4
    3cf2:	4628      	mov	r0, r5
    3cf4:	f7ff fc0d 	bl	3512 <boot_copy_sz>
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    3cf8:	6833      	ldr	r3, [r6, #0]
    3cfa:	3b01      	subs	r3, #1
    3cfc:	42a3      	cmp	r3, r4
    3cfe:	d8f2      	bhi.n	3ce6 <swap_run+0x52>
            boot_swap_sectors(first_sector_idx, sz, state, bs);
    3d00:	4633      	mov	r3, r6
    3d02:	462a      	mov	r2, r5
    3d04:	4601      	mov	r1, r0
    3d06:	9801      	ldr	r0, [sp, #4]
    3d08:	f7ff fc1a 	bl	3540 <boot_swap_sectors>
    3d0c:	e7eb      	b.n	3ce6 <swap_run+0x52>
    }

}
    3d0e:	b003      	add	sp, #12
    3d10:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003d12 <bootutil_img_hash>:
static int
bootutil_img_hash(struct enc_key_data *enc_state, int image_index,
                  struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *hash_result,
                  uint8_t *seed, int seed_len)
{
    3d12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d16:	b09d      	sub	sp, #116	; 0x74
    3d18:	4615      	mov	r5, r2
    3d1a:	4699      	mov	r9, r3
    3d1c:	9f24      	ldr	r7, [sp, #144]	; 0x90
    3d1e:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    3d22:	9c27      	ldr	r4, [sp, #156]	; 0x9c
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    3d24:	a801      	add	r0, sp, #4
    3d26:	f000 f95a 	bl	3fde <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    3d2a:	2100      	movs	r1, #0
    3d2c:	a801      	add	r0, sp, #4
    3d2e:	f000 f95d 	bl	3fec <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
    3d32:	b114      	cbz	r4, 3d3a <bootutil_img_hash+0x28>
    3d34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3d36:	2b00      	cmp	r3, #0
    3d38:	dc06      	bgt.n	3d48 <bootutil_img_hash+0x36>
        bootutil_sha256_update(&sha256_ctx, seed, seed_len);
    }

    /* Hash is computed over image header and image itself. */
    size = hdr_size = hdr->ih_hdr_size;
    3d3a:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    3d3c:	68ee      	ldr	r6, [r5, #12]
    3d3e:	4433      	add	r3, r6
    tlv_off = size;

    /* If protected TLVs are present they are also hashed. */
    size += hdr->ih_protect_tlv_size;
    3d40:	896e      	ldrh	r6, [r5, #10]
    3d42:	441e      	add	r6, r3

    for (off = 0; off < size; off += blk_sz) {
    3d44:	2500      	movs	r5, #0
    3d46:	e013      	b.n	3d70 <bootutil_img_hash+0x5e>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    3d48:	461a      	mov	r2, r3
    3d4a:	4621      	mov	r1, r4
    3d4c:	a801      	add	r0, sp, #4
    3d4e:	f000 fa33 	bl	41b8 <mbedtls_sha256_update_ret>
    3d52:	e7f2      	b.n	3d3a <bootutil_img_hash+0x28>
        if ((off < tlv_off) && ((off + blk_sz) > tlv_off)) {
            /* read only up to the end of the image payload */
            blk_sz = tlv_off - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    3d54:	4623      	mov	r3, r4
    3d56:	463a      	mov	r2, r7
    3d58:	4629      	mov	r1, r5
    3d5a:	4648      	mov	r0, r9
    3d5c:	f001 f8aa 	bl	4eb4 <flash_area_read>
        if (rc) {
    3d60:	4603      	mov	r3, r0
    3d62:	b988      	cbnz	r0, 3d88 <bootutil_img_hash+0x76>
    3d64:	4622      	mov	r2, r4
    3d66:	4639      	mov	r1, r7
    3d68:	a801      	add	r0, sp, #4
    3d6a:	f000 fa25 	bl	41b8 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    3d6e:	4425      	add	r5, r4
    3d70:	42b5      	cmp	r5, r6
    3d72:	d204      	bcs.n	3d7e <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    3d74:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    3d76:	4544      	cmp	r4, r8
    3d78:	d9ec      	bls.n	3d54 <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    3d7a:	4644      	mov	r4, r8
    3d7c:	e7ea      	b.n	3d54 <bootutil_img_hash+0x42>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
    3d7e:	9926      	ldr	r1, [sp, #152]	; 0x98
    3d80:	a801      	add	r0, sp, #4
    3d82:	f000 fa5c 	bl	423e <mbedtls_sha256_finish_ret>
#endif
        bootutil_sha256_update(&sha256_ctx, tmp_buf, blk_sz);
    }
    bootutil_sha256_finish(&sha256_ctx, hash_result);

    return 0;
    3d86:	2300      	movs	r3, #0
}
    3d88:	4618      	mov	r0, r3
    3d8a:	b01d      	add	sp, #116	; 0x74
    3d8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00003d90 <bootutil_img_validate>:
int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    3d90:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d92:	b09f      	sub	sp, #124	; 0x7c
    3d94:	4617      	mov	r7, r2
    3d96:	461e      	mov	r6, r3
    3d98:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    struct image_tlv_iter it;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
    3d9a:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    3d9c:	9404      	str	r4, [sp, #16]
    3d9e:	9c26      	ldr	r4, [sp, #152]	; 0x98
    3da0:	9403      	str	r4, [sp, #12]
    3da2:	ac06      	add	r4, sp, #24
    3da4:	9402      	str	r4, [sp, #8]
    3da6:	9c25      	ldr	r4, [sp, #148]	; 0x94
    3da8:	9401      	str	r4, [sp, #4]
    3daa:	9c24      	ldr	r4, [sp, #144]	; 0x90
    3dac:	9400      	str	r4, [sp, #0]
    3dae:	f7ff ffb0 	bl	3d12 <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
    3db2:	4604      	mov	r4, r0
    3db4:	2800      	cmp	r0, #0
    3db6:	d140      	bne.n	3e3a <bootutil_img_validate+0xaa>
        return rc;
    }

    if (out_hash) {
    3db8:	b155      	cbz	r5, 3dd0 <bootutil_img_validate+0x40>
        memcpy(out_hash, hash, 32);
    3dba:	ac06      	add	r4, sp, #24
    3dbc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3dbe:	6028      	str	r0, [r5, #0]
    3dc0:	6069      	str	r1, [r5, #4]
    3dc2:	60aa      	str	r2, [r5, #8]
    3dc4:	60eb      	str	r3, [r5, #12]
    3dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3dc8:	6128      	str	r0, [r5, #16]
    3dca:	6169      	str	r1, [r5, #20]
    3dcc:	61aa      	str	r2, [r5, #24]
    3dce:	61eb      	str	r3, [r5, #28]
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    3dd0:	2300      	movs	r3, #0
    3dd2:	9300      	str	r3, [sp, #0]
    3dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3dd8:	4632      	mov	r2, r6
    3dda:	4639      	mov	r1, r7
    3ddc:	a816      	add	r0, sp, #88	; 0x58
    3dde:	f000 f834 	bl	3e4a <bootutil_tlv_iter_begin>
    if (rc) {
    3de2:	4604      	mov	r4, r0
    3de4:	bb48      	cbnz	r0, 3e3a <bootutil_img_validate+0xaa>
    int sha256_valid = 0;
    3de6:	4605      	mov	r5, r0
    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    3de8:	ab1c      	add	r3, sp, #112	; 0x70
    3dea:	f10d 0272 	add.w	r2, sp, #114	; 0x72
    3dee:	a91d      	add	r1, sp, #116	; 0x74
    3df0:	a816      	add	r0, sp, #88	; 0x58
    3df2:	f000 f88f 	bl	3f14 <bootutil_tlv_iter_next>
        if (rc < 0) {
    3df6:	2800      	cmp	r0, #0
    3df8:	db1d      	blt.n	3e36 <bootutil_img_validate+0xa6>
            return -1;
        } else if (rc > 0) {
    3dfa:	dc18      	bgt.n	3e2e <bootutil_img_validate+0x9e>
            break;
        }

        if (type == IMAGE_TLV_SHA256) {
    3dfc:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    3e00:	2b10      	cmp	r3, #16
    3e02:	d1f1      	bne.n	3de8 <bootutil_img_validate+0x58>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (len != sizeof(hash)) {
    3e04:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    3e08:	2b20      	cmp	r3, #32
    3e0a:	d119      	bne.n	3e40 <bootutil_img_validate+0xb0>
                return -1;
            }
            rc = flash_area_read(fap, off, buf, sizeof hash);
    3e0c:	aa0e      	add	r2, sp, #56	; 0x38
    3e0e:	991d      	ldr	r1, [sp, #116]	; 0x74
    3e10:	4630      	mov	r0, r6
    3e12:	f001 f84f 	bl	4eb4 <flash_area_read>
            if (rc) {
    3e16:	b9b0      	cbnz	r0, 3e46 <bootutil_img_validate+0xb6>
                return rc;
            }
            if (memcmp(hash, buf, sizeof(hash))) {
    3e18:	2220      	movs	r2, #32
    3e1a:	a90e      	add	r1, sp, #56	; 0x38
    3e1c:	a806      	add	r0, sp, #24
    3e1e:	f7fd ff24 	bl	1c6a <memcmp>
                return -1;
            }

            sha256_valid = 1;
    3e22:	2501      	movs	r5, #1
            if (memcmp(hash, buf, sizeof(hash))) {
    3e24:	2800      	cmp	r0, #0
    3e26:	d0df      	beq.n	3de8 <bootutil_img_validate+0x58>
                return -1;
    3e28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3e2c:	e005      	b.n	3e3a <bootutil_img_validate+0xaa>
            key_id = -1;
#endif
        }
    }

    if (!sha256_valid) {
    3e2e:	b925      	cbnz	r5, 3e3a <bootutil_img_validate+0xaa>
        return -1;
    3e30:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3e34:	e001      	b.n	3e3a <bootutil_img_validate+0xaa>
            return -1;
    3e36:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        return -1;
    }
#endif

    return 0;
}
    3e3a:	4620      	mov	r0, r4
    3e3c:	b01f      	add	sp, #124	; 0x7c
    3e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return -1;
    3e40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3e44:	e7f9      	b.n	3e3a <bootutil_img_validate+0xaa>
                return rc;
    3e46:	4604      	mov	r4, r0
    3e48:	e7f7      	b.n	3e3a <bootutil_img_validate+0xaa>

00003e4a <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    3e4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e4e:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    3e50:	2800      	cmp	r0, #0
    3e52:	d04a      	beq.n	3eea <bootutil_tlv_iter_begin+0xa0>
    3e54:	4605      	mov	r5, r0
    3e56:	2900      	cmp	r1, #0
    3e58:	d04a      	beq.n	3ef0 <bootutil_tlv_iter_begin+0xa6>
    3e5a:	2a00      	cmp	r2, #0
    3e5c:	d04b      	beq.n	3ef6 <bootutil_tlv_iter_begin+0xac>
    3e5e:	4699      	mov	r9, r3
    3e60:	4617      	mov	r7, r2
    3e62:	460c      	mov	r4, r1
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    3e64:	890e      	ldrh	r6, [r1, #8]
    3e66:	68cb      	ldr	r3, [r1, #12]
    3e68:	441e      	add	r6, r3
    if (flash_area_read(fap, off_, &info, sizeof(info))) {
    3e6a:	2304      	movs	r3, #4
    3e6c:	eb0d 0203 	add.w	r2, sp, r3
    3e70:	4631      	mov	r1, r6
    3e72:	4638      	mov	r0, r7
    3e74:	f001 f81e 	bl	4eb4 <flash_area_read>
    3e78:	4680      	mov	r8, r0
    3e7a:	2800      	cmp	r0, #0
    3e7c:	d13e      	bne.n	3efc <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    3e7e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3e82:	f646 1308 	movw	r3, #26888	; 0x6908
    3e86:	429a      	cmp	r2, r3
    3e88:	d01e      	beq.n	3ec8 <bootutil_tlv_iter_begin+0x7e>
        }

        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    3e8a:	8963      	ldrh	r3, [r4, #10]
    3e8c:	2b00      	cmp	r3, #0
    3e8e:	d13b      	bne.n	3f08 <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    3e90:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3e94:	f646 1307 	movw	r3, #26887	; 0x6907
    3e98:	429a      	cmp	r2, r3
    3e9a:	d138      	bne.n	3f0e <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    3e9c:	602c      	str	r4, [r5, #0]
    it->fap = fap;
    3e9e:	606f      	str	r7, [r5, #4]
    it->type = type;
    3ea0:	f8a5 9008 	strh.w	r9, [r5, #8]
    it->prot = prot;
    3ea4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    3ea8:	72ab      	strb	r3, [r5, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    3eaa:	8963      	ldrh	r3, [r4, #10]
    3eac:	4433      	add	r3, r6
    3eae:	60eb      	str	r3, [r5, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    3eb0:	8963      	ldrh	r3, [r4, #10]
    3eb2:	4433      	add	r3, r6
    3eb4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3eb8:	4413      	add	r3, r2
    3eba:	616b      	str	r3, [r5, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    3ebc:	3604      	adds	r6, #4
    3ebe:	612e      	str	r6, [r5, #16]
    return 0;
}
    3ec0:	4640      	mov	r0, r8
    3ec2:	b003      	add	sp, #12
    3ec4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    3ec8:	8963      	ldrh	r3, [r4, #10]
    3eca:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    3ece:	428b      	cmp	r3, r1
    3ed0:	d117      	bne.n	3f02 <bootutil_tlv_iter_begin+0xb8>
        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
    3ed2:	2304      	movs	r3, #4
    3ed4:	eb0d 0203 	add.w	r2, sp, r3
    3ed8:	4431      	add	r1, r6
    3eda:	4638      	mov	r0, r7
    3edc:	f000 ffea 	bl	4eb4 <flash_area_read>
    3ee0:	2800      	cmp	r0, #0
    3ee2:	d0d5      	beq.n	3e90 <bootutil_tlv_iter_begin+0x46>
            return -1;
    3ee4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3ee8:	e7ea      	b.n	3ec0 <bootutil_tlv_iter_begin+0x76>
        return -1;
    3eea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3eee:	e7e7      	b.n	3ec0 <bootutil_tlv_iter_begin+0x76>
    3ef0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3ef4:	e7e4      	b.n	3ec0 <bootutil_tlv_iter_begin+0x76>
    3ef6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3efa:	e7e1      	b.n	3ec0 <bootutil_tlv_iter_begin+0x76>
        return -1;
    3efc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3f00:	e7de      	b.n	3ec0 <bootutil_tlv_iter_begin+0x76>
            return -1;
    3f02:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3f06:	e7db      	b.n	3ec0 <bootutil_tlv_iter_begin+0x76>
        return -1;
    3f08:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3f0c:	e7d8      	b.n	3ec0 <bootutil_tlv_iter_begin+0x76>
        return -1;
    3f0e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3f12:	e7d5      	b.n	3ec0 <bootutil_tlv_iter_begin+0x76>

00003f14 <bootutil_tlv_iter_next>:
                       uint16_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    3f14:	2800      	cmp	r0, #0
    3f16:	d04d      	beq.n	3fb4 <bootutil_tlv_iter_next+0xa0>
{
    3f18:	b5f0      	push	{r4, r5, r6, r7, lr}
    3f1a:	b083      	sub	sp, #12
    3f1c:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    3f1e:	6800      	ldr	r0, [r0, #0]
    3f20:	2800      	cmp	r0, #0
    3f22:	d04b      	beq.n	3fbc <bootutil_tlv_iter_next+0xa8>
    3f24:	461d      	mov	r5, r3
    3f26:	4616      	mov	r6, r2
    3f28:	460f      	mov	r7, r1
    3f2a:	6863      	ldr	r3, [r4, #4]
    3f2c:	bb0b      	cbnz	r3, 3f72 <bootutil_tlv_iter_next+0x5e>
        return -1;
    3f2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3f32:	e03a      	b.n	3faa <bootutil_tlv_iter_next+0x96>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = flash_area_read(it->fap, it->tlv_off, &tlv, sizeof tlv);
    3f34:	2304      	movs	r3, #4
    3f36:	eb0d 0203 	add.w	r2, sp, r3
    3f3a:	6921      	ldr	r1, [r4, #16]
    3f3c:	6860      	ldr	r0, [r4, #4]
    3f3e:	f000 ffb9 	bl	4eb4 <flash_area_read>
        if (rc) {
    3f42:	4601      	mov	r1, r0
    3f44:	2800      	cmp	r0, #0
    3f46:	d13c      	bne.n	3fc2 <bootutil_tlv_iter_next+0xae>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    3f48:	7aa3      	ldrb	r3, [r4, #10]
    3f4a:	b11b      	cbz	r3, 3f54 <bootutil_tlv_iter_next+0x40>
    3f4c:	6922      	ldr	r2, [r4, #16]
    3f4e:	68e3      	ldr	r3, [r4, #12]
    3f50:	429a      	cmp	r2, r3
    3f52:	d239      	bcs.n	3fc8 <bootutil_tlv_iter_next+0xb4>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    3f54:	8923      	ldrh	r3, [r4, #8]
    3f56:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3f5a:	4293      	cmp	r3, r2
    3f5c:	d017      	beq.n	3f8e <bootutil_tlv_iter_next+0x7a>
    3f5e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3f62:	4293      	cmp	r3, r2
    3f64:	d013      	beq.n	3f8e <bootutil_tlv_iter_next+0x7a>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    3f66:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    3f6a:	6923      	ldr	r3, [r4, #16]
    3f6c:	4418      	add	r0, r3
    3f6e:	3004      	adds	r0, #4
    3f70:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    3f72:	6920      	ldr	r0, [r4, #16]
    3f74:	6963      	ldr	r3, [r4, #20]
    3f76:	4298      	cmp	r0, r3
    3f78:	d21a      	bcs.n	3fb0 <bootutil_tlv_iter_next+0x9c>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    3f7a:	6823      	ldr	r3, [r4, #0]
    3f7c:	895b      	ldrh	r3, [r3, #10]
    3f7e:	2b00      	cmp	r3, #0
    3f80:	d0d8      	beq.n	3f34 <bootutil_tlv_iter_next+0x20>
    3f82:	68e3      	ldr	r3, [r4, #12]
    3f84:	4283      	cmp	r3, r0
    3f86:	d1d5      	bne.n	3f34 <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    3f88:	3004      	adds	r0, #4
    3f8a:	6120      	str	r0, [r4, #16]
    3f8c:	e7d2      	b.n	3f34 <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    3f8e:	b115      	cbz	r5, 3f96 <bootutil_tlv_iter_next+0x82>
                *type = tlv.it_type;
    3f90:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    3f94:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    3f96:	6923      	ldr	r3, [r4, #16]
    3f98:	3304      	adds	r3, #4
    3f9a:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    3f9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    3fa0:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    3fa2:	6922      	ldr	r2, [r4, #16]
    3fa4:	4413      	add	r3, r2
    3fa6:	3304      	adds	r3, #4
    3fa8:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    3faa:	4608      	mov	r0, r1
    3fac:	b003      	add	sp, #12
    3fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    3fb0:	2101      	movs	r1, #1
    3fb2:	e7fa      	b.n	3faa <bootutil_tlv_iter_next+0x96>
        return -1;
    3fb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    3fb8:	4608      	mov	r0, r1
    3fba:	4770      	bx	lr
        return -1;
    3fbc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3fc0:	e7f3      	b.n	3faa <bootutil_tlv_iter_next+0x96>
            return -1;
    3fc2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3fc6:	e7f0      	b.n	3faa <bootutil_tlv_iter_next+0x96>
            return 1;
    3fc8:	2101      	movs	r1, #1
    3fca:	e7ee      	b.n	3faa <bootutil_tlv_iter_next+0x96>

00003fcc <flash_area_id_from_multi_image_slot>:
#include <flash_map/flash_map.h>
#include <flash_map_backend/flash_map_backend.h>

int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    3fcc:	b119      	cbz	r1, 3fd6 <flash_area_id_from_multi_image_slot+0xa>
    3fce:	2901      	cmp	r1, #1
    3fd0:	d003      	beq.n	3fda <flash_area_id_from_multi_image_slot+0xe>
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
#if MCUBOOT_SWAP_USING_SCRATCH
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }
    return 255;
    3fd2:	20ff      	movs	r0, #255	; 0xff
    3fd4:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    3fd6:	2001      	movs	r0, #1
    3fd8:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    3fda:	2002      	movs	r0, #2
}
    3fdc:	4770      	bx	lr

00003fde <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    3fde:	b508      	push	{r3, lr}
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    3fe0:	226c      	movs	r2, #108	; 0x6c
    3fe2:	2100      	movs	r1, #0
    3fe4:	f7fd fe72 	bl	1ccc <memset>
}
    3fe8:	bd08      	pop	{r3, pc}
	...

00003fec <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    3fec:	2300      	movs	r3, #0
    3fee:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    3ff0:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    3ff2:	460b      	mov	r3, r1
    3ff4:	b1e1      	cbz	r1, 4030 <mbedtls_sha256_starts_ret+0x44>
        ctx->state[7] = 0x5BE0CD19;
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
    3ff6:	4a19      	ldr	r2, [pc, #100]	; (405c <mbedtls_sha256_starts_ret+0x70>)
    3ff8:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    3ffa:	4a19      	ldr	r2, [pc, #100]	; (4060 <mbedtls_sha256_starts_ret+0x74>)
    3ffc:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    3ffe:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    4002:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    4006:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    400a:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    400c:	4a15      	ldr	r2, [pc, #84]	; (4064 <mbedtls_sha256_starts_ret+0x78>)
    400e:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    4010:	4a15      	ldr	r2, [pc, #84]	; (4068 <mbedtls_sha256_starts_ret+0x7c>)
    4012:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    4014:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    4018:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    401c:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    4020:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    4022:	4a12      	ldr	r2, [pc, #72]	; (406c <mbedtls_sha256_starts_ret+0x80>)
    4024:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    4026:	4a12      	ldr	r2, [pc, #72]	; (4070 <mbedtls_sha256_starts_ret+0x84>)
    4028:	6242      	str	r2, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    402a:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    402c:	2000      	movs	r0, #0
    402e:	4770      	bx	lr
        ctx->state[0] = 0x6A09E667;
    4030:	4a10      	ldr	r2, [pc, #64]	; (4074 <mbedtls_sha256_starts_ret+0x88>)
    4032:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    4034:	4a10      	ldr	r2, [pc, #64]	; (4078 <mbedtls_sha256_starts_ret+0x8c>)
    4036:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    4038:	4a10      	ldr	r2, [pc, #64]	; (407c <mbedtls_sha256_starts_ret+0x90>)
    403a:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    403c:	4a10      	ldr	r2, [pc, #64]	; (4080 <mbedtls_sha256_starts_ret+0x94>)
    403e:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    4040:	4a10      	ldr	r2, [pc, #64]	; (4084 <mbedtls_sha256_starts_ret+0x98>)
    4042:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    4044:	4a10      	ldr	r2, [pc, #64]	; (4088 <mbedtls_sha256_starts_ret+0x9c>)
    4046:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    4048:	4a10      	ldr	r2, [pc, #64]	; (408c <mbedtls_sha256_starts_ret+0xa0>)
    404a:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    404c:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    4050:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    4054:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    4058:	6242      	str	r2, [r0, #36]	; 0x24
    405a:	e7e6      	b.n	402a <mbedtls_sha256_starts_ret+0x3e>
    405c:	c1059ed8 	.word	0xc1059ed8
    4060:	367cd507 	.word	0x367cd507
    4064:	f70e5939 	.word	0xf70e5939
    4068:	ffc00b31 	.word	0xffc00b31
    406c:	64f98fa7 	.word	0x64f98fa7
    4070:	befa4fa4 	.word	0xbefa4fa4
    4074:	6a09e667 	.word	0x6a09e667
    4078:	bb67ae85 	.word	0xbb67ae85
    407c:	3c6ef372 	.word	0x3c6ef372
    4080:	a54ff53a 	.word	0xa54ff53a
    4084:	510e527f 	.word	0x510e527f
    4088:	9b05688c 	.word	0x9b05688c
    408c:	1f83d9ab 	.word	0x1f83d9ab

00004090 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    4090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4094:	b0c8      	sub	sp, #288	; 0x120
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
    4096:	2300      	movs	r3, #0
    4098:	e005      	b.n	40a6 <mbedtls_internal_sha256_process+0x16>
        A[i] = ctx->state[i];
    409a:	1c9a      	adds	r2, r3, #2
    409c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    40a0:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    40a4:	3301      	adds	r3, #1
    40a6:	2b07      	cmp	r3, #7
    40a8:	d9f7      	bls.n	409a <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    40aa:	2200      	movs	r2, #0
    40ac:	e04b      	b.n	4146 <mbedtls_internal_sha256_process+0xb6>
    {
        if( i < 16 )
            GET_UINT32_BE( W[i], data, 4 * i );
    40ae:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
    40b2:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    40b6:	7863      	ldrb	r3, [r4, #1]
    40b8:	041b      	lsls	r3, r3, #16
    40ba:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    40be:	78a5      	ldrb	r5, [r4, #2]
    40c0:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    40c4:	78e4      	ldrb	r4, [r4, #3]
    40c6:	4323      	orrs	r3, r4
    40c8:	ac08      	add	r4, sp, #32
    40ca:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    40ce:	9b07      	ldr	r3, [sp, #28]
    40d0:	9c04      	ldr	r4, [sp, #16]
    40d2:	ea4f 25f4 	mov.w	r5, r4, ror #11
    40d6:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
    40da:	ea85 6574 	eor.w	r5, r5, r4, ror #25
    40de:	442b      	add	r3, r5
    40e0:	9e06      	ldr	r6, [sp, #24]
    40e2:	9f05      	ldr	r7, [sp, #20]
    40e4:	ea86 0507 	eor.w	r5, r6, r7
    40e8:	4025      	ands	r5, r4
    40ea:	4075      	eors	r5, r6
    40ec:	442b      	add	r3, r5
    40ee:	4d31      	ldr	r5, [pc, #196]	; (41b4 <mbedtls_internal_sha256_process+0x124>)
    40f0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    40f4:	442b      	add	r3, r5
    40f6:	ad08      	add	r5, sp, #32
    40f8:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    40fc:	442b      	add	r3, r5
    40fe:	f8dd e000 	ldr.w	lr, [sp]
    4102:	ea4f 3c7e 	mov.w	ip, lr, ror #13
    4106:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
    410a:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
    410e:	f8dd 8004 	ldr.w	r8, [sp, #4]
    4112:	ea0e 0508 	and.w	r5, lr, r8
    4116:	f8dd 9008 	ldr.w	r9, [sp, #8]
    411a:	ea4e 0a08 	orr.w	sl, lr, r8
    411e:	ea09 0a0a 	and.w	sl, r9, sl
    4122:	ea45 050a 	orr.w	r5, r5, sl
    4126:	44ac      	add	ip, r5
    4128:	9d03      	ldr	r5, [sp, #12]
    412a:	441d      	add	r5, r3
    412c:	4463      	add	r3, ip

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
    412e:	9607      	str	r6, [sp, #28]
    4130:	9706      	str	r7, [sp, #24]
    4132:	9405      	str	r4, [sp, #20]
    4134:	9504      	str	r5, [sp, #16]
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    4136:	f8cd 900c 	str.w	r9, [sp, #12]
    413a:	f8cd 8008 	str.w	r8, [sp, #8]
    413e:	f8cd e004 	str.w	lr, [sp, #4]
    4142:	9300      	str	r3, [sp, #0]
    for( i = 0; i < 64; i++ )
    4144:	3201      	adds	r2, #1
    4146:	2a3f      	cmp	r2, #63	; 0x3f
    4148:	d822      	bhi.n	4190 <mbedtls_internal_sha256_process+0x100>
        if( i < 16 )
    414a:	2a0f      	cmp	r2, #15
    414c:	d9af      	bls.n	40ae <mbedtls_internal_sha256_process+0x1e>
            R( i );
    414e:	1e93      	subs	r3, r2, #2
    4150:	ac08      	add	r4, sp, #32
    4152:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    4156:	ea4f 43f5 	mov.w	r3, r5, ror #19
    415a:	ea83 4375 	eor.w	r3, r3, r5, ror #17
    415e:	ea83 2395 	eor.w	r3, r3, r5, lsr #10
    4162:	1fd5      	subs	r5, r2, #7
    4164:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
    4168:	442b      	add	r3, r5
    416a:	f1a2 050f 	sub.w	r5, r2, #15
    416e:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
    4172:	ea4f 45b6 	mov.w	r5, r6, ror #18
    4176:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
    417a:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
    417e:	442b      	add	r3, r5
    4180:	f1a2 0510 	sub.w	r5, r2, #16
    4184:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
    4188:	442b      	add	r3, r5
    418a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    418e:	e79e      	b.n	40ce <mbedtls_internal_sha256_process+0x3e>
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    4190:	2300      	movs	r3, #0
    4192:	e008      	b.n	41a6 <mbedtls_internal_sha256_process+0x116>
        ctx->state[i] += A[i];
    4194:	f85d 4023 	ldr.w	r4, [sp, r3, lsl #2]
    4198:	1c99      	adds	r1, r3, #2
    419a:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    419e:	4422      	add	r2, r4
    41a0:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
    41a4:	3301      	adds	r3, #1
    41a6:	2b07      	cmp	r3, #7
    41a8:	d9f4      	bls.n	4194 <mbedtls_internal_sha256_process+0x104>

    return( 0 );
}
    41aa:	2000      	movs	r0, #0
    41ac:	b048      	add	sp, #288	; 0x120
    41ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    41b2:	bf00      	nop
    41b4:	00005c24 	.word	0x00005c24

000041b8 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    41b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    41bc:	b3da      	cbz	r2, 4236 <mbedtls_sha256_update_ret+0x7e>
    41be:	4606      	mov	r6, r0
    41c0:	460d      	mov	r5, r1
    41c2:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    41c4:	6803      	ldr	r3, [r0, #0]
    41c6:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    41ca:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    41ce:	4413      	add	r3, r2
    41d0:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    41d2:	4293      	cmp	r3, r2
    41d4:	d202      	bcs.n	41dc <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    41d6:	6843      	ldr	r3, [r0, #4]
    41d8:	3301      	adds	r3, #1
    41da:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    41dc:	b10f      	cbz	r7, 41e2 <mbedtls_sha256_update_ret+0x2a>
    41de:	4544      	cmp	r4, r8
    41e0:	d20a      	bcs.n	41f8 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    41e2:	2c3f      	cmp	r4, #63	; 0x3f
    41e4:	d91b      	bls.n	421e <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    41e6:	4629      	mov	r1, r5
    41e8:	4630      	mov	r0, r6
    41ea:	f7ff ff51 	bl	4090 <mbedtls_internal_sha256_process>
    41ee:	4603      	mov	r3, r0
    41f0:	bb10      	cbnz	r0, 4238 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    41f2:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    41f4:	3c40      	subs	r4, #64	; 0x40
    41f6:	e7f4      	b.n	41e2 <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    41f8:	f106 0928 	add.w	r9, r6, #40	; 0x28
    41fc:	4642      	mov	r2, r8
    41fe:	4629      	mov	r1, r5
    4200:	eb09 0007 	add.w	r0, r9, r7
    4204:	f7fd fd55 	bl	1cb2 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    4208:	4649      	mov	r1, r9
    420a:	4630      	mov	r0, r6
    420c:	f7ff ff40 	bl	4090 <mbedtls_internal_sha256_process>
    4210:	4603      	mov	r3, r0
    4212:	b988      	cbnz	r0, 4238 <mbedtls_sha256_update_ret+0x80>
        input += fill;
    4214:	4445      	add	r5, r8
        ilen  -= fill;
    4216:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
    421a:	2700      	movs	r7, #0
    421c:	e7e1      	b.n	41e2 <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    421e:	b90c      	cbnz	r4, 4224 <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    4220:	2300      	movs	r3, #0
    4222:	e009      	b.n	4238 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    4224:	f106 0028 	add.w	r0, r6, #40	; 0x28
    4228:	4622      	mov	r2, r4
    422a:	4629      	mov	r1, r5
    422c:	4438      	add	r0, r7
    422e:	f7fd fd40 	bl	1cb2 <memcpy>
    return( 0 );
    4232:	2300      	movs	r3, #0
    4234:	e000      	b.n	4238 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    4236:	2300      	movs	r3, #0
}
    4238:	4618      	mov	r0, r3
    423a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000423e <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    423e:	b570      	push	{r4, r5, r6, lr}
    4240:	4604      	mov	r4, r0
    4242:	460d      	mov	r5, r1
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    4244:	6803      	ldr	r3, [r0, #0]
    4246:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    424a:	1c58      	adds	r0, r3, #1
    424c:	4423      	add	r3, r4
    424e:	2280      	movs	r2, #128	; 0x80
    4250:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    4254:	2838      	cmp	r0, #56	; 0x38
    4256:	d87b      	bhi.n	4350 <mbedtls_sha256_finish_ret+0x112>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    4258:	f104 0328 	add.w	r3, r4, #40	; 0x28
    425c:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    4260:	2100      	movs	r1, #0
    4262:	4418      	add	r0, r3
    4264:	f7fd fd32 	bl	1ccc <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    4268:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    426a:	6863      	ldr	r3, [r4, #4]
    426c:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    426e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    4272:	00d2      	lsls	r2, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    4274:	0e19      	lsrs	r1, r3, #24
    4276:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    427a:	f3c3 4107 	ubfx	r1, r3, #16, #8
    427e:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    4282:	f3c3 2107 	ubfx	r1, r3, #8, #8
    4286:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    428a:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    428e:	0e13      	lsrs	r3, r2, #24
    4290:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    4294:	f3c2 4307 	ubfx	r3, r2, #16, #8
    4298:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    429c:	f3c2 2307 	ubfx	r3, r2, #8, #8
    42a0:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    42a4:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    42a8:	f104 0128 	add.w	r1, r4, #40	; 0x28
    42ac:	4620      	mov	r0, r4
    42ae:	f7ff feef 	bl	4090 <mbedtls_internal_sha256_process>
    42b2:	4603      	mov	r3, r0
    42b4:	2800      	cmp	r0, #0
    42b6:	d159      	bne.n	436c <mbedtls_sha256_finish_ret+0x12e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    42b8:	7ae2      	ldrb	r2, [r4, #11]
    42ba:	702a      	strb	r2, [r5, #0]
    42bc:	7aa2      	ldrb	r2, [r4, #10]
    42be:	706a      	strb	r2, [r5, #1]
    42c0:	7a62      	ldrb	r2, [r4, #9]
    42c2:	70aa      	strb	r2, [r5, #2]
    42c4:	7a22      	ldrb	r2, [r4, #8]
    42c6:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    42c8:	7be2      	ldrb	r2, [r4, #15]
    42ca:	712a      	strb	r2, [r5, #4]
    42cc:	7ba2      	ldrb	r2, [r4, #14]
    42ce:	716a      	strb	r2, [r5, #5]
    42d0:	7b62      	ldrb	r2, [r4, #13]
    42d2:	71aa      	strb	r2, [r5, #6]
    42d4:	7b22      	ldrb	r2, [r4, #12]
    42d6:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    42d8:	7ce2      	ldrb	r2, [r4, #19]
    42da:	722a      	strb	r2, [r5, #8]
    42dc:	7ca2      	ldrb	r2, [r4, #18]
    42de:	726a      	strb	r2, [r5, #9]
    42e0:	7c62      	ldrb	r2, [r4, #17]
    42e2:	72aa      	strb	r2, [r5, #10]
    42e4:	7c22      	ldrb	r2, [r4, #16]
    42e6:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    42e8:	7de2      	ldrb	r2, [r4, #23]
    42ea:	732a      	strb	r2, [r5, #12]
    42ec:	7da2      	ldrb	r2, [r4, #22]
    42ee:	736a      	strb	r2, [r5, #13]
    42f0:	7d62      	ldrb	r2, [r4, #21]
    42f2:	73aa      	strb	r2, [r5, #14]
    42f4:	7d22      	ldrb	r2, [r4, #20]
    42f6:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    42f8:	7ee2      	ldrb	r2, [r4, #27]
    42fa:	742a      	strb	r2, [r5, #16]
    42fc:	7ea2      	ldrb	r2, [r4, #26]
    42fe:	746a      	strb	r2, [r5, #17]
    4300:	7e62      	ldrb	r2, [r4, #25]
    4302:	74aa      	strb	r2, [r5, #18]
    4304:	7e22      	ldrb	r2, [r4, #24]
    4306:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    4308:	7fe2      	ldrb	r2, [r4, #31]
    430a:	752a      	strb	r2, [r5, #20]
    430c:	7fa2      	ldrb	r2, [r4, #30]
    430e:	756a      	strb	r2, [r5, #21]
    4310:	7f62      	ldrb	r2, [r4, #29]
    4312:	75aa      	strb	r2, [r5, #22]
    4314:	7f22      	ldrb	r2, [r4, #28]
    4316:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    4318:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    431c:	762a      	strb	r2, [r5, #24]
    431e:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    4322:	766a      	strb	r2, [r5, #25]
    4324:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    4328:	76aa      	strb	r2, [r5, #26]
    432a:	f894 2020 	ldrb.w	r2, [r4, #32]
    432e:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    4330:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    4332:	b9da      	cbnz	r2, 436c <mbedtls_sha256_finish_ret+0x12e>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    4334:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    4338:	772b      	strb	r3, [r5, #28]
    433a:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    433e:	776b      	strb	r3, [r5, #29]
    4340:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    4344:	77ab      	strb	r3, [r5, #30]
    4346:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    434a:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    434c:	4613      	mov	r3, r2
    434e:	e00d      	b.n	436c <mbedtls_sha256_finish_ret+0x12e>
        memset( ctx->buffer + used, 0, 64 - used );
    4350:	f104 0628 	add.w	r6, r4, #40	; 0x28
    4354:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    4358:	2100      	movs	r1, #0
    435a:	4430      	add	r0, r6
    435c:	f7fd fcb6 	bl	1ccc <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    4360:	4631      	mov	r1, r6
    4362:	4620      	mov	r0, r4
    4364:	f7ff fe94 	bl	4090 <mbedtls_internal_sha256_process>
    4368:	4603      	mov	r3, r0
    436a:	b108      	cbz	r0, 4370 <mbedtls_sha256_finish_ret+0x132>
}
    436c:	4618      	mov	r0, r3
    436e:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    4370:	2238      	movs	r2, #56	; 0x38
    4372:	2100      	movs	r1, #0
    4374:	4630      	mov	r0, r6
    4376:	f7fd fca9 	bl	1ccc <memset>
    437a:	e775      	b.n	4268 <mbedtls_sha256_finish_ret+0x2a>

0000437c <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    437c:	6843      	ldr	r3, [r0, #4]
    437e:	428b      	cmp	r3, r1
    4380:	d808      	bhi.n	4394 <hal_flash_check_addr+0x18>
    4382:	6882      	ldr	r2, [r0, #8]
    4384:	4413      	add	r3, r2
    4386:	428b      	cmp	r3, r1
    4388:	d301      	bcc.n	438e <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
    438a:	2000      	movs	r0, #0
}
    438c:	4770      	bx	lr
        return SYS_EINVAL;
    438e:	f06f 0001 	mvn.w	r0, #1
    4392:	4770      	bx	lr
    4394:	f06f 0001 	mvn.w	r0, #1
    4398:	4770      	bx	lr

0000439a <hal_flash_init>:
{
    439a:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
    439c:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
    439e:	462c      	mov	r4, r5
    43a0:	e001      	b.n	43a6 <hal_flash_init+0xc>
    43a2:	3401      	adds	r4, #1
    43a4:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
    43a6:	4620      	mov	r0, r4
    43a8:	f7fc f962 	bl	670 <hal_bsp_flash_dev>
        if (!hf) {
    43ac:	b138      	cbz	r0, 43be <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
    43ae:	6802      	ldr	r2, [r0, #0]
    43b0:	6952      	ldr	r2, [r2, #20]
    43b2:	4790      	blx	r2
    43b4:	2800      	cmp	r0, #0
    43b6:	d0f4      	beq.n	43a2 <hal_flash_init+0x8>
            rc = SYS_EIO;
    43b8:	f06f 0504 	mvn.w	r5, #4
    43bc:	e7f1      	b.n	43a2 <hal_flash_init+0x8>
}
    43be:	4628      	mov	r0, r5
    43c0:	bd38      	pop	{r3, r4, r5, pc}

000043c2 <hal_flash_align>:
{
    43c2:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    43c4:	f7fc f954 	bl	670 <hal_bsp_flash_dev>
    if (!hf) {
    43c8:	b108      	cbz	r0, 43ce <hal_flash_align+0xc>
    return hf->hf_align;
    43ca:	7c00      	ldrb	r0, [r0, #16]
}
    43cc:	bd08      	pop	{r3, pc}
        return 1;
    43ce:	2001      	movs	r0, #1
    43d0:	e7fc      	b.n	43cc <hal_flash_align+0xa>

000043d2 <hal_flash_erased_val>:
{
    43d2:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    43d4:	f7fc f94c 	bl	670 <hal_bsp_flash_dev>
    if (!hf) {
    43d8:	b108      	cbz	r0, 43de <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
    43da:	7d00      	ldrb	r0, [r0, #20]
}
    43dc:	bd08      	pop	{r3, pc}
        return 1;
    43de:	2001      	movs	r0, #1
    43e0:	e7fc      	b.n	43dc <hal_flash_erased_val+0xa>

000043e2 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    43e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43e6:	460d      	mov	r5, r1
    43e8:	4690      	mov	r8, r2
    43ea:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    43ec:	f7fc f940 	bl	670 <hal_bsp_flash_dev>
    if (!hf) {
    43f0:	b1c0      	cbz	r0, 4424 <hal_flash_read+0x42>
    43f2:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    43f4:	4629      	mov	r1, r5
    43f6:	f7ff ffc1 	bl	437c <hal_flash_check_addr>
    43fa:	b9b0      	cbnz	r0, 442a <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
    43fc:	19a9      	adds	r1, r5, r6
    43fe:	4620      	mov	r0, r4
    4400:	f7ff ffbc 	bl	437c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    4404:	b9a0      	cbnz	r0, 4430 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    4406:	6823      	ldr	r3, [r4, #0]
    4408:	681f      	ldr	r7, [r3, #0]
    440a:	4633      	mov	r3, r6
    440c:	4642      	mov	r2, r8
    440e:	4629      	mov	r1, r5
    4410:	4620      	mov	r0, r4
    4412:	47b8      	blx	r7
    if (rc != 0) {
    4414:	4603      	mov	r3, r0
    4416:	b910      	cbnz	r0, 441e <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
    4418:	4618      	mov	r0, r3
    441a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
    441e:	f06f 0304 	mvn.w	r3, #4
    4422:	e7f9      	b.n	4418 <hal_flash_read+0x36>
        return SYS_EINVAL;
    4424:	f06f 0301 	mvn.w	r3, #1
    4428:	e7f6      	b.n	4418 <hal_flash_read+0x36>
        return SYS_EINVAL;
    442a:	f06f 0301 	mvn.w	r3, #1
    442e:	e7f3      	b.n	4418 <hal_flash_read+0x36>
    4430:	f06f 0301 	mvn.w	r3, #1
    4434:	e7f0      	b.n	4418 <hal_flash_read+0x36>
	...

00004438 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    4438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    443c:	4605      	mov	r5, r0
    443e:	460e      	mov	r6, r1
    4440:	4690      	mov	r8, r2
    4442:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    4444:	f7fc f914 	bl	670 <hal_bsp_flash_dev>
    if (!hf) {
    4448:	b310      	cbz	r0, 4490 <hal_flash_write+0x58>
    444a:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    444c:	4631      	mov	r1, r6
    444e:	f7ff ff95 	bl	437c <hal_flash_check_addr>
    4452:	bb00      	cbnz	r0, 4496 <hal_flash_write+0x5e>
      hal_flash_check_addr(hf, address + num_bytes)) {
    4454:	19f1      	adds	r1, r6, r7
    4456:	4620      	mov	r0, r4
    4458:	f7ff ff90 	bl	437c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    445c:	b9f0      	cbnz	r0, 449c <hal_flash_write+0x64>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    445e:	08eb      	lsrs	r3, r5, #3
    4460:	4a11      	ldr	r2, [pc, #68]	; (44a8 <hal_flash_write+0x70>)
    4462:	5cd3      	ldrb	r3, [r2, r3]
    4464:	f005 0507 	and.w	r5, r5, #7
    4468:	fa43 f505 	asr.w	r5, r3, r5
    446c:	f015 0f01 	tst.w	r5, #1
    4470:	d117      	bne.n	44a2 <hal_flash_write+0x6a>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
    4472:	6823      	ldr	r3, [r4, #0]
    4474:	685d      	ldr	r5, [r3, #4]
    4476:	463b      	mov	r3, r7
    4478:	4642      	mov	r2, r8
    447a:	4631      	mov	r1, r6
    447c:	4620      	mov	r0, r4
    447e:	47a8      	blx	r5
    if (rc != 0) {
    4480:	4603      	mov	r3, r0
    4482:	b910      	cbnz	r0, 448a <hal_flash_write+0x52>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
    4484:	4618      	mov	r0, r3
    4486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
    448a:	f06f 0304 	mvn.w	r3, #4
    448e:	e7f9      	b.n	4484 <hal_flash_write+0x4c>
        return SYS_EINVAL;
    4490:	f06f 0301 	mvn.w	r3, #1
    4494:	e7f6      	b.n	4484 <hal_flash_write+0x4c>
        return SYS_EINVAL;
    4496:	f06f 0301 	mvn.w	r3, #1
    449a:	e7f3      	b.n	4484 <hal_flash_write+0x4c>
    449c:	f06f 0301 	mvn.w	r3, #1
    44a0:	e7f0      	b.n	4484 <hal_flash_write+0x4c>
        return SYS_EACCES;
    44a2:	f06f 0306 	mvn.w	r3, #6
    44a6:	e7ed      	b.n	4484 <hal_flash_write+0x4c>
    44a8:	20006380 	.word	0x20006380

000044ac <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    44ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    44b0:	b083      	sub	sp, #12
    44b2:	4605      	mov	r5, r0
    44b4:	460e      	mov	r6, r1
    44b6:	4690      	mov	r8, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    44b8:	f7fc f8da 	bl	670 <hal_bsp_flash_dev>
    if (!hf) {
    44bc:	2800      	cmp	r0, #0
    44be:	d050      	beq.n	4562 <hal_flash_erase+0xb6>
    44c0:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    44c2:	4631      	mov	r1, r6
    44c4:	f7ff ff5a 	bl	437c <hal_flash_check_addr>
    44c8:	2800      	cmp	r0, #0
    44ca:	d14d      	bne.n	4568 <hal_flash_erase+0xbc>
      hal_flash_check_addr(hf, address + num_bytes)) {
    44cc:	eb06 0708 	add.w	r7, r6, r8
    44d0:	4639      	mov	r1, r7
    44d2:	4620      	mov	r0, r4
    44d4:	f7ff ff52 	bl	437c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    44d8:	2800      	cmp	r0, #0
    44da:	d148      	bne.n	456e <hal_flash_erase+0xc2>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    44dc:	08eb      	lsrs	r3, r5, #3
    44de:	4a28      	ldr	r2, [pc, #160]	; (4580 <hal_flash_erase+0xd4>)
    44e0:	5cd3      	ldrb	r3, [r2, r3]
    44e2:	f005 0507 	and.w	r5, r5, #7
    44e6:	fa43 f505 	asr.w	r5, r3, r5
    44ea:	f015 0501 	ands.w	r5, r5, #1
    44ee:	d141      	bne.n	4574 <hal_flash_erase+0xc8>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
    44f0:	42b7      	cmp	r7, r6
    44f2:	d942      	bls.n	457a <hal_flash_erase+0xce>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
    44f4:	6823      	ldr	r3, [r4, #0]
    44f6:	699b      	ldr	r3, [r3, #24]
    44f8:	2b00      	cmp	r3, #0
    44fa:	d030      	beq.n	455e <hal_flash_erase+0xb2>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
    44fc:	4642      	mov	r2, r8
    44fe:	4631      	mov	r1, r6
    4500:	4620      	mov	r0, r4
    4502:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
    4504:	4628      	mov	r0, r5
    4506:	b003      	add	sp, #12
    4508:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            assert(rc == 0);
    450c:	f7fb fe2a 	bl	164 <hal_debugger_connected>
    4510:	b100      	cbz	r0, 4514 <hal_flash_erase+0x68>
    4512:	be01      	bkpt	0x0001
    4514:	2300      	movs	r3, #0
    4516:	461a      	mov	r2, r3
    4518:	4619      	mov	r1, r3
    451a:	4618      	mov	r0, r3
    451c:	f7fd f946 	bl	17ac <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    4520:	f108 0801 	add.w	r8, r8, #1
    4524:	68e3      	ldr	r3, [r4, #12]
    4526:	4543      	cmp	r3, r8
    4528:	ddec      	ble.n	4504 <hal_flash_erase+0x58>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    452a:	6823      	ldr	r3, [r4, #0]
    452c:	f8d3 900c 	ldr.w	r9, [r3, #12]
    4530:	466b      	mov	r3, sp
    4532:	aa01      	add	r2, sp, #4
    4534:	4641      	mov	r1, r8
    4536:	4620      	mov	r0, r4
    4538:	47c8      	blx	r9
            assert(rc == 0);
    453a:	2800      	cmp	r0, #0
    453c:	d1e6      	bne.n	450c <hal_flash_erase+0x60>
            end_area = start + size;
    453e:	9901      	ldr	r1, [sp, #4]
    4540:	9b00      	ldr	r3, [sp, #0]
    4542:	440b      	add	r3, r1
            if (address < end_area && end > start) {
    4544:	429e      	cmp	r6, r3
    4546:	d2eb      	bcs.n	4520 <hal_flash_erase+0x74>
    4548:	428f      	cmp	r7, r1
    454a:	d9e9      	bls.n	4520 <hal_flash_erase+0x74>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
    454c:	6823      	ldr	r3, [r4, #0]
    454e:	689b      	ldr	r3, [r3, #8]
    4550:	4620      	mov	r0, r4
    4552:	4798      	blx	r3
    4554:	2800      	cmp	r0, #0
    4556:	d0e3      	beq.n	4520 <hal_flash_erase+0x74>
                    return SYS_EIO;
    4558:	f06f 0504 	mvn.w	r5, #4
    455c:	e7d2      	b.n	4504 <hal_flash_erase+0x58>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    455e:	46a8      	mov	r8, r5
    4560:	e7e0      	b.n	4524 <hal_flash_erase+0x78>
        return SYS_EINVAL;
    4562:	f06f 0501 	mvn.w	r5, #1
    4566:	e7cd      	b.n	4504 <hal_flash_erase+0x58>
        return SYS_EINVAL;
    4568:	f06f 0501 	mvn.w	r5, #1
    456c:	e7ca      	b.n	4504 <hal_flash_erase+0x58>
    456e:	f06f 0501 	mvn.w	r5, #1
    4572:	e7c7      	b.n	4504 <hal_flash_erase+0x58>
        return SYS_EACCES;
    4574:	f06f 0506 	mvn.w	r5, #6
    4578:	e7c4      	b.n	4504 <hal_flash_erase+0x58>
        return SYS_EINVAL;
    457a:	f06f 0501 	mvn.w	r5, #1
    457e:	e7c1      	b.n	4504 <hal_flash_erase+0x58>
    4580:	20006380 	.word	0x20006380

00004584 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
    4584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4586:	4604      	mov	r4, r0
    4588:	4616      	mov	r6, r2
    458a:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    458c:	6807      	ldr	r7, [r0, #0]
    458e:	683f      	ldr	r7, [r7, #0]
    4590:	47b8      	blx	r7
    if (rc != 0) {
    4592:	b960      	cbnz	r0, 45ae <hal_flash_is_erased+0x2a>
    4594:	4607      	mov	r7, r0
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
    4596:	2300      	movs	r3, #0
    4598:	42ab      	cmp	r3, r5
    459a:	d205      	bcs.n	45a8 <hal_flash_is_erased+0x24>
        if (buf[i] != hf->hf_erased_val) {
    459c:	5cf1      	ldrb	r1, [r6, r3]
    459e:	7d22      	ldrb	r2, [r4, #20]
    45a0:	4291      	cmp	r1, r2
    45a2:	d102      	bne.n	45aa <hal_flash_is_erased+0x26>
    for (i = 0; i < num_bytes; i++) {
    45a4:	3301      	adds	r3, #1
    45a6:	e7f7      	b.n	4598 <hal_flash_is_erased+0x14>
            return 0;
        }
    }
    return 1;
    45a8:	2701      	movs	r7, #1
}
    45aa:	4638      	mov	r0, r7
    45ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
    45ae:	f06f 0704 	mvn.w	r7, #4
    45b2:	e7fa      	b.n	45aa <hal_flash_is_erased+0x26>

000045b4 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    45b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    45b8:	460d      	mov	r5, r1
    45ba:	4690      	mov	r8, r2
    45bc:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    45be:	f7fc f857 	bl	670 <hal_bsp_flash_dev>
    if (!hf) {
    45c2:	b1f8      	cbz	r0, 4604 <hal_flash_isempty+0x50>
    45c4:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    45c6:	4629      	mov	r1, r5
    45c8:	f7ff fed8 	bl	437c <hal_flash_check_addr>
    45cc:	b9e8      	cbnz	r0, 460a <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
    45ce:	19a9      	adds	r1, r5, r6
    45d0:	4620      	mov	r0, r4
    45d2:	f7ff fed3 	bl	437c <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    45d6:	b9d8      	cbnz	r0, 4610 <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
    45d8:	6823      	ldr	r3, [r4, #0]
    45da:	691f      	ldr	r7, [r3, #16]
    45dc:	b15f      	cbz	r7, 45f6 <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
    45de:	4633      	mov	r3, r6
    45e0:	4642      	mov	r2, r8
    45e2:	4629      	mov	r1, r5
    45e4:	4620      	mov	r0, r4
    45e6:	47b8      	blx	r7
        if (rc < 0) {
    45e8:	2800      	cmp	r0, #0
    45ea:	db01      	blt.n	45f0 <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
    45ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
    45f0:	f06f 0004 	mvn.w	r0, #4
    45f4:	e7fa      	b.n	45ec <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    45f6:	4633      	mov	r3, r6
    45f8:	4642      	mov	r2, r8
    45fa:	4629      	mov	r1, r5
    45fc:	4620      	mov	r0, r4
    45fe:	f7ff ffc1 	bl	4584 <hal_flash_is_erased>
    4602:	e7f3      	b.n	45ec <hal_flash_isempty+0x38>
        return SYS_EINVAL;
    4604:	f06f 0001 	mvn.w	r0, #1
    4608:	e7f0      	b.n	45ec <hal_flash_isempty+0x38>
        return SYS_EINVAL;
    460a:	f06f 0001 	mvn.w	r0, #1
    460e:	e7ed      	b.n	45ec <hal_flash_isempty+0x38>
    4610:	f06f 0001 	mvn.w	r0, #1
    4614:	e7ea      	b.n	45ec <hal_flash_isempty+0x38>

00004616 <hal_system_start>:
                  /* 1st word is stack pointer */
                  "    msr  msp, %0       \n"
                  /* 2nd word is a reset handler (image entry) */
                  "    bx   %1            \n"
                  : /* no output */
                  : "r" (img_data[0]), "r" (img_data[1]));
    4616:	6803      	ldr	r3, [r0, #0]
    4618:	6842      	ldr	r2, [r0, #4]
    asm volatile (".syntax unified        \n"
    461a:	f383 8808 	msr	MSP, r3
    461e:	4710      	bx	r2

00004620 <fwrite>:
    if (stream->vmt->read == NULL) return 0;
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
    4620:	b538      	push	{r3, r4, r5, lr}
    if (stream->vmt->write == NULL) return 0;
    4622:	681c      	ldr	r4, [r3, #0]
    4624:	6825      	ldr	r5, [r4, #0]
    4626:	b145      	cbz	r5, 463a <fwrite+0x1a>
    4628:	460c      	mov	r4, r1
    462a:	4601      	mov	r1, r0
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    462c:	fb02 f204 	mul.w	r2, r2, r4
    4630:	4618      	mov	r0, r3
    4632:	47a8      	blx	r5
    4634:	fbb0 f0f4 	udiv	r0, r0, r4
}
    4638:	bd38      	pop	{r3, r4, r5, pc}
    if (stream->vmt->write == NULL) return 0;
    463a:	2000      	movs	r0, #0
    463c:	e7fc      	b.n	4638 <fwrite+0x18>
	...

00004640 <puts>:
{
	return fwrite(s, 1, strlen(s), f);
}

__extern_inline int puts(const char *s)
{
    4640:	b538      	push	{r3, r4, r5, lr}
    4642:	4605      	mov	r5, r0
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
    4644:	f7fd fb5e 	bl	1d04 <strlen>
    4648:	4b08      	ldr	r3, [pc, #32]	; (466c <puts+0x2c>)
    464a:	681c      	ldr	r4, [r3, #0]
    464c:	4623      	mov	r3, r4
    464e:	4602      	mov	r2, r0
    4650:	2101      	movs	r1, #1
    4652:	4628      	mov	r0, r5
    4654:	f7ff ffe4 	bl	4620 <fwrite>
    4658:	4605      	mov	r5, r0
    465a:	4623      	mov	r3, r4
    465c:	2201      	movs	r2, #1
    465e:	4611      	mov	r1, r2
    4660:	4803      	ldr	r0, [pc, #12]	; (4670 <puts+0x30>)
    4662:	f7ff ffdd 	bl	4620 <fwrite>
}
    4666:	4428      	add	r0, r5
    4668:	bd38      	pop	{r3, r4, r5, pc}
    466a:	bf00      	nop
    466c:	00005d24 	.word	0x00005d24
    4670:	00005a30 	.word	0x00005a30

00004674 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
    4674:	2000      	movs	r0, #0
    4676:	4770      	bx	lr

00004678 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
    4678:	b510      	push	{r4, lr}
    467a:	4608      	mov	r0, r1
    467c:	4614      	mov	r4, r2
    console_write(bp, n);
    467e:	4611      	mov	r1, r2
    4680:	f7fd ff0a 	bl	2498 <console_write>
    return n;
}
    4684:	4620      	mov	r0, r4
    4686:	bd10      	pop	{r4, pc}

00004688 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
    4688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    468c:	b082      	sub	sp, #8
    468e:	e9cd 0100 	strd	r0, r1, [sp]
    4692:	4690      	mov	r8, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    4694:	f8d2 9004 	ldr.w	r9, [r2, #4]

    if (p->hh == 1) {
    4698:	7893      	ldrb	r3, [r2, #2]
    469a:	f003 0330 	and.w	r3, r3, #48	; 0x30
    469e:	2b10      	cmp	r3, #16
    46a0:	d004      	beq.n	46ac <ui2a+0x24>
        num = (unsigned short int)num;
    } else if (p->hh == 2) {
    46a2:	2b20      	cmp	r3, #32
    46a4:	d009      	beq.n	46ba <ui2a+0x32>
{
    46a6:	2401      	movs	r4, #1
    46a8:	2500      	movs	r5, #0
    46aa:	e013      	b.n	46d4 <ui2a+0x4c>
    46ac:	f8bd 2000 	ldrh.w	r2, [sp]
    46b0:	b293      	uxth	r3, r2
    46b2:	2400      	movs	r4, #0
    46b4:	e9cd 3400 	strd	r3, r4, [sp]
    46b8:	e7f5      	b.n	46a6 <ui2a+0x1e>
    46ba:	e9dd 3400 	ldrd	r3, r4, [sp]
    46be:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    46c2:	2400      	movs	r4, #0
    46c4:	e9cd 3400 	strd	r3, r4, [sp]
    46c8:	e7ed      	b.n	46a6 <ui2a+0x1e>
        num = (unsigned char)num;
    }

    while (num / d >= p->base)
        d *= p->base;
    46ca:	fb06 f305 	mul.w	r3, r6, r5
    46ce:	fba4 4506 	umull	r4, r5, r4, r6
    46d2:	441d      	add	r5, r3
    while (num / d >= p->base)
    46d4:	4622      	mov	r2, r4
    46d6:	462b      	mov	r3, r5
    46d8:	e9dd 0100 	ldrd	r0, r1, [sp]
    46dc:	f000 fdbc 	bl	5258 <__aeabi_uldivmod>
    46e0:	f898 6003 	ldrb.w	r6, [r8, #3]
    46e4:	2700      	movs	r7, #0
    46e6:	42b9      	cmp	r1, r7
    46e8:	bf08      	it	eq
    46ea:	42b0      	cmpeq	r0, r6
    46ec:	d2ed      	bcs.n	46ca <ui2a+0x42>
    int n = 0;
    46ee:	f04f 0a00 	mov.w	sl, #0
    46f2:	e007      	b.n	4704 <ui2a+0x7c>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    46f4:	2330      	movs	r3, #48	; 0x30
    46f6:	441e      	add	r6, r3
    46f8:	f889 6000 	strb.w	r6, [r9]
            ++n;
    46fc:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    4700:	f109 0901 	add.w	r9, r9, #1
    while (d != 0) {
    4704:	ea54 0305 	orrs.w	r3, r4, r5
    4708:	d02e      	beq.n	4768 <ui2a+0xe0>
        unsigned long long  dgt = num / d;
    470a:	4622      	mov	r2, r4
    470c:	462b      	mov	r3, r5
    470e:	e9dd 0100 	ldrd	r0, r1, [sp]
    4712:	f000 fda1 	bl	5258 <__aeabi_uldivmod>
    4716:	4606      	mov	r6, r0
    4718:	460f      	mov	r7, r1
        num %= d;
    471a:	4622      	mov	r2, r4
    471c:	462b      	mov	r3, r5
    471e:	e9dd 0100 	ldrd	r0, r1, [sp]
    4722:	f000 fd99 	bl	5258 <__aeabi_uldivmod>
    4726:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
    472a:	f898 2003 	ldrb.w	r2, [r8, #3]
    472e:	2300      	movs	r3, #0
    4730:	4620      	mov	r0, r4
    4732:	4629      	mov	r1, r5
    4734:	f000 fd90 	bl	5258 <__aeabi_uldivmod>
    4738:	4604      	mov	r4, r0
    473a:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
    473c:	f1ba 0f00 	cmp.w	sl, #0
    4740:	d105      	bne.n	474e <ui2a+0xc6>
    4742:	ea56 0307 	orrs.w	r3, r6, r7
    4746:	d102      	bne.n	474e <ui2a+0xc6>
    4748:	ea54 0305 	orrs.w	r3, r4, r5
    474c:	d1da      	bne.n	4704 <ui2a+0x7c>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    474e:	2f00      	cmp	r7, #0
    4750:	bf08      	it	eq
    4752:	2e0a      	cmpeq	r6, #10
    4754:	d3ce      	bcc.n	46f4 <ui2a+0x6c>
    4756:	f898 3002 	ldrb.w	r3, [r8, #2]
    475a:	f013 0f04 	tst.w	r3, #4
    475e:	d001      	beq.n	4764 <ui2a+0xdc>
    4760:	2337      	movs	r3, #55	; 0x37
    4762:	e7c8      	b.n	46f6 <ui2a+0x6e>
    4764:	2357      	movs	r3, #87	; 0x57
    4766:	e7c6      	b.n	46f6 <ui2a+0x6e>
        }
    }
    *bf = 0;
    4768:	2300      	movs	r3, #0
    476a:	f889 3000 	strb.w	r3, [r9]
}
    476e:	b002      	add	sp, #8
    4770:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00004774 <i2a>:

static void i2a(long long int num, struct param *p)
{
    4774:	b508      	push	{r3, lr}
    if (num < 0) {
    4776:	2800      	cmp	r0, #0
    4778:	f171 0300 	sbcs.w	r3, r1, #0
    477c:	db02      	blt.n	4784 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
    477e:	f7ff ff83 	bl	4688 <ui2a>
}
    4782:	bd08      	pop	{r3, pc}
        num = -num;
    4784:	4240      	negs	r0, r0
    4786:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
    478a:	7893      	ldrb	r3, [r2, #2]
    478c:	f043 0301 	orr.w	r3, r3, #1
    4790:	7093      	strb	r3, [r2, #2]
    4792:	e7f4      	b.n	477e <i2a+0xa>

00004794 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
    4794:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4798:	b2db      	uxtb	r3, r3
    479a:	2b09      	cmp	r3, #9
    479c:	d90b      	bls.n	47b6 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
    479e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    47a2:	b2db      	uxtb	r3, r3
    47a4:	2b05      	cmp	r3, #5
    47a6:	d908      	bls.n	47ba <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
    47a8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    47ac:	b2db      	uxtb	r3, r3
    47ae:	2b05      	cmp	r3, #5
    47b0:	d805      	bhi.n	47be <a2d+0x2a>
        return ch - 'A' + 10;
    47b2:	3837      	subs	r0, #55	; 0x37
    47b4:	4770      	bx	lr
        return ch - '0';
    47b6:	3830      	subs	r0, #48	; 0x30
    47b8:	4770      	bx	lr
        return ch - 'a' + 10;
    47ba:	3857      	subs	r0, #87	; 0x57
    47bc:	4770      	bx	lr
    else
        return -1;
    47be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    47c2:	4770      	bx	lr

000047c4 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
    47c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    47c8:	4605      	mov	r5, r0
    47ca:	4688      	mov	r8, r1
    47cc:	4617      	mov	r7, r2
    47ce:	4699      	mov	r9, r3
    const char *p = *src;
    47d0:	680c      	ldr	r4, [r1, #0]
    int num = 0;
    47d2:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
    47d4:	4628      	mov	r0, r5
    47d6:	f7ff ffdd 	bl	4794 <a2d>
    47da:	2800      	cmp	r0, #0
    47dc:	db06      	blt.n	47ec <a2i+0x28>
        if (digit > base)
    47de:	42b8      	cmp	r0, r7
    47e0:	dc04      	bgt.n	47ec <a2i+0x28>
            break;
        num = num * base + digit;
    47e2:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
    47e6:	7825      	ldrb	r5, [r4, #0]
    47e8:	3401      	adds	r4, #1
    47ea:	e7f3      	b.n	47d4 <a2i+0x10>
    }
    *src = p;
    47ec:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
    47f0:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
    47f4:	4628      	mov	r0, r5
    47f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000047fa <putf>:

static int putf(FILE *putp, char c)
{
    47fa:	b500      	push	{lr}
    47fc:	b083      	sub	sp, #12

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
    47fe:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
    4802:	6803      	ldr	r3, [r0, #0]
    4804:	681b      	ldr	r3, [r3, #0]
    4806:	b14b      	cbz	r3, 481c <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    4808:	2201      	movs	r2, #1
    480a:	f10d 0107 	add.w	r1, sp, #7
    480e:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
    4810:	2801      	cmp	r0, #1
    4812:	d005      	beq.n	4820 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
    4814:	2000      	movs	r0, #0
    else
        return 1;
}
    4816:	b003      	add	sp, #12
    4818:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
    481c:	2000      	movs	r0, #0
    481e:	e7fa      	b.n	4816 <putf+0x1c>
        return 1;
    4820:	2001      	movs	r0, #1
    4822:	e7f8      	b.n	4816 <putf+0x1c>

00004824 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
    4824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4828:	4606      	mov	r6, r0
    482a:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
    482c:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
    482e:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
    4830:	e001      	b.n	4836 <putchw+0x12>
        n--;
    4832:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
    4834:	4613      	mov	r3, r2
    4836:	1c5a      	adds	r2, r3, #1
    4838:	781b      	ldrb	r3, [r3, #0]
    483a:	b10b      	cbz	r3, 4840 <putchw+0x1c>
    483c:	2c00      	cmp	r4, #0
    483e:	dcf8      	bgt.n	4832 <putchw+0xe>
    if (p->sign)
    4840:	78bb      	ldrb	r3, [r7, #2]
    4842:	f013 0f01 	tst.w	r3, #1
    4846:	d000      	beq.n	484a <putchw+0x26>
        n--;
    4848:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
    484a:	887b      	ldrh	r3, [r7, #2]
    484c:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    4850:	b29b      	uxth	r3, r3
    4852:	f241 0202 	movw	r2, #4098	; 0x1002
    4856:	4293      	cmp	r3, r2
    4858:	d01c      	beq.n	4894 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
    485a:	f640 0202 	movw	r2, #2050	; 0x802
    485e:	4293      	cmp	r3, r2
    4860:	d01a      	beq.n	4898 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
    4862:	683b      	ldr	r3, [r7, #0]
    4864:	4d35      	ldr	r5, [pc, #212]	; (493c <putchw+0x118>)
    4866:	401d      	ands	r5, r3
    4868:	b1f5      	cbz	r5, 48a8 <putchw+0x84>
    unsigned written = 0;
    486a:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    486c:	78bb      	ldrb	r3, [r7, #2]
    486e:	f013 0f01 	tst.w	r3, #1
    4872:	d11f      	bne.n	48b4 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
    4874:	887b      	ldrh	r3, [r7, #2]
    4876:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    487a:	b29b      	uxth	r3, r3
    487c:	f241 0202 	movw	r2, #4098	; 0x1002
    4880:	4293      	cmp	r3, r2
    4882:	d01d      	beq.n	48c0 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
    4884:	f640 0202 	movw	r2, #2050	; 0x802
    4888:	4293      	cmp	r3, r2
    488a:	d02a      	beq.n	48e2 <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    488c:	787b      	ldrb	r3, [r7, #1]
    488e:	bba3      	cbnz	r3, 48fa <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    4890:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
    4892:	e03d      	b.n	4910 <putchw+0xec>
        n -= 2;
    4894:	3c02      	subs	r4, #2
    4896:	e7e4      	b.n	4862 <putchw+0x3e>
        n--;
    4898:	3c01      	subs	r4, #1
    489a:	e7e2      	b.n	4862 <putchw+0x3e>
            written += putf(putp, ' ');
    489c:	2120      	movs	r1, #32
    489e:	4630      	mov	r0, r6
    48a0:	f7ff ffab 	bl	47fa <putf>
    48a4:	4405      	add	r5, r0
        while (n-- > 0)
    48a6:	4644      	mov	r4, r8
    48a8:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    48ac:	2c00      	cmp	r4, #0
    48ae:	dcf5      	bgt.n	489c <putchw+0x78>
    48b0:	4644      	mov	r4, r8
    48b2:	e7db      	b.n	486c <putchw+0x48>
        written += putf(putp, '-');
    48b4:	212d      	movs	r1, #45	; 0x2d
    48b6:	4630      	mov	r0, r6
    48b8:	f7ff ff9f 	bl	47fa <putf>
    48bc:	4405      	add	r5, r0
    48be:	e7d9      	b.n	4874 <putchw+0x50>
        written += putf(putp, '0');
    48c0:	2130      	movs	r1, #48	; 0x30
    48c2:	4630      	mov	r0, r6
    48c4:	f7ff ff99 	bl	47fa <putf>
    48c8:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
    48ca:	78bb      	ldrb	r3, [r7, #2]
    48cc:	f013 0f04 	tst.w	r3, #4
    48d0:	d005      	beq.n	48de <putchw+0xba>
    48d2:	2158      	movs	r1, #88	; 0x58
    48d4:	4630      	mov	r0, r6
    48d6:	f7ff ff90 	bl	47fa <putf>
    48da:	4405      	add	r5, r0
    48dc:	e7d6      	b.n	488c <putchw+0x68>
    48de:	2178      	movs	r1, #120	; 0x78
    48e0:	e7f8      	b.n	48d4 <putchw+0xb0>
        written += putf(putp, '0');
    48e2:	2130      	movs	r1, #48	; 0x30
    48e4:	4630      	mov	r0, r6
    48e6:	f7ff ff88 	bl	47fa <putf>
    48ea:	4405      	add	r5, r0
    48ec:	e7ce      	b.n	488c <putchw+0x68>
            written += putf(putp, '0');
    48ee:	2130      	movs	r1, #48	; 0x30
    48f0:	4630      	mov	r0, r6
    48f2:	f7ff ff82 	bl	47fa <putf>
    48f6:	4405      	add	r5, r0
        while (n-- > 0)
    48f8:	4644      	mov	r4, r8
    48fa:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    48fe:	2c00      	cmp	r4, #0
    4900:	dcf5      	bgt.n	48ee <putchw+0xca>
    4902:	4644      	mov	r4, r8
    4904:	e7c4      	b.n	4890 <putchw+0x6c>
        written += putf(putp, ch);
    4906:	4630      	mov	r0, r6
    4908:	f7ff ff77 	bl	47fa <putf>
    490c:	4405      	add	r5, r0
    while ((ch = *bf++))
    490e:	4643      	mov	r3, r8
    4910:	f103 0801 	add.w	r8, r3, #1
    4914:	7819      	ldrb	r1, [r3, #0]
    4916:	2900      	cmp	r1, #0
    4918:	d1f5      	bne.n	4906 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
    491a:	78bb      	ldrb	r3, [r7, #2]
    491c:	f013 0f08 	tst.w	r3, #8
    4920:	d106      	bne.n	4930 <putchw+0x10c>
    4922:	e008      	b.n	4936 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
    4924:	2120      	movs	r1, #32
    4926:	4630      	mov	r0, r6
    4928:	f7ff ff67 	bl	47fa <putf>
    492c:	4405      	add	r5, r0
        while (n-- > 0)
    492e:	463c      	mov	r4, r7
    4930:	1e67      	subs	r7, r4, #1
    4932:	2c00      	cmp	r4, #0
    4934:	dcf6      	bgt.n	4924 <putchw+0x100>
    }
    
    return written;
}
    4936:	4628      	mov	r0, r5
    4938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    493c:	0008ff00 	.word	0x0008ff00

00004940 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
    4940:	b160      	cbz	r0, 495c <intarg+0x1c>
    4942:	2801      	cmp	r0, #1
    4944:	d017      	beq.n	4976 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
    4946:	bb19      	cbnz	r1, 4990 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
    4948:	6813      	ldr	r3, [r2, #0]
    494a:	3307      	adds	r3, #7
    494c:	f023 0307 	bic.w	r3, r3, #7
    4950:	f103 0108 	add.w	r1, r3, #8
    4954:	6011      	str	r1, [r2, #0]
    4956:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
    495a:	4770      	bx	lr
        if (sign) {
    495c:	b129      	cbz	r1, 496a <intarg+0x2a>
            val = va_arg(*va, int);
    495e:	6813      	ldr	r3, [r2, #0]
    4960:	1d19      	adds	r1, r3, #4
    4962:	6011      	str	r1, [r2, #0]
    4964:	6818      	ldr	r0, [r3, #0]
    4966:	17c1      	asrs	r1, r0, #31
    4968:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
    496a:	6813      	ldr	r3, [r2, #0]
    496c:	1d19      	adds	r1, r3, #4
    496e:	6011      	str	r1, [r2, #0]
    4970:	6818      	ldr	r0, [r3, #0]
    4972:	2100      	movs	r1, #0
    4974:	4770      	bx	lr
        if (sign) {
    4976:	b129      	cbz	r1, 4984 <intarg+0x44>
            val = va_arg(*va, long);
    4978:	6813      	ldr	r3, [r2, #0]
    497a:	1d19      	adds	r1, r3, #4
    497c:	6011      	str	r1, [r2, #0]
    497e:	6818      	ldr	r0, [r3, #0]
    4980:	17c1      	asrs	r1, r0, #31
    4982:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
    4984:	6813      	ldr	r3, [r2, #0]
    4986:	1d19      	adds	r1, r3, #4
    4988:	6011      	str	r1, [r2, #0]
    498a:	6818      	ldr	r0, [r3, #0]
    498c:	2100      	movs	r1, #0
    498e:	4770      	bx	lr
            val = va_arg(*va, long long);
    4990:	6813      	ldr	r3, [r2, #0]
    4992:	3307      	adds	r3, #7
    4994:	f023 0307 	bic.w	r3, r3, #7
    4998:	f103 0108 	add.w	r1, r3, #8
    499c:	6011      	str	r1, [r2, #0]
    499e:	e9d3 0100 	ldrd	r0, r1, [r3]
    49a2:	4770      	bx	lr

000049a4 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
    49a4:	b570      	push	{r4, r5, r6, lr}
    49a6:	b08a      	sub	sp, #40	; 0x28
    49a8:	4605      	mov	r5, r0
    49aa:	9101      	str	r1, [sp, #4]
    49ac:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
    49ae:	ab02      	add	r3, sp, #8
    49b0:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
    49b2:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
    49b4:	9b01      	ldr	r3, [sp, #4]
    49b6:	1c5a      	adds	r2, r3, #1
    49b8:	9201      	str	r2, [sp, #4]
    49ba:	7819      	ldrb	r1, [r3, #0]
    49bc:	2900      	cmp	r1, #0
    49be:	f000 813a 	beq.w	4c36 <tfp_format+0x292>
        if (ch != '%') {
    49c2:	2925      	cmp	r1, #37	; 0x25
    49c4:	d004      	beq.n	49d0 <tfp_format+0x2c>
            written += putf(putp, ch);
    49c6:	4628      	mov	r0, r5
    49c8:	f7ff ff17 	bl	47fa <putf>
    49cc:	4404      	add	r4, r0
    49ce:	e7f1      	b.n	49b4 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
    49d0:	2200      	movs	r2, #0
    49d2:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
    49d6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
    49da:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
            p.hh = 0;
    49de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    49e2:	f362 1305 	bfi	r3, r2, #4, #2
    49e6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
    49ea:	9b01      	ldr	r3, [sp, #4]
    49ec:	1c5a      	adds	r2, r3, #1
    49ee:	9201      	str	r2, [sp, #4]
    49f0:	7818      	ldrb	r0, [r3, #0]
    49f2:	b128      	cbz	r0, 4a00 <tfp_format+0x5c>
                switch (ch) {
    49f4:	282d      	cmp	r0, #45	; 0x2d
    49f6:	d052      	beq.n	4a9e <tfp_format+0xfa>
    49f8:	2830      	cmp	r0, #48	; 0x30
    49fa:	d040      	beq.n	4a7e <tfp_format+0xda>
    49fc:	2823      	cmp	r0, #35	; 0x23
    49fe:	d047      	beq.n	4a90 <tfp_format+0xec>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
    4a00:	282a      	cmp	r0, #42	; 0x2a
    4a02:	d056      	beq.n	4ab2 <tfp_format+0x10e>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
    4a04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4a08:	b2db      	uxtb	r3, r3
    4a0a:	2b09      	cmp	r3, #9
    4a0c:	d965      	bls.n	4ada <tfp_format+0x136>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
    4a0e:	286c      	cmp	r0, #108	; 0x6c
    4a10:	d069      	beq.n	4ae6 <tfp_format+0x142>

                if (ch == 'l') {
                    ch = *(fmt++);
                    lng = 2;
                }
            } else if (ch == 'h') {
    4a12:	2868      	cmp	r0, #104	; 0x68
    4a14:	d074      	beq.n	4b00 <tfp_format+0x15c>
            lng = 0;
    4a16:	2300      	movs	r3, #0
                    ch = *(fmt++);
                    p.hh = 2;
                }
            }

            if (ch == 'z') {
    4a18:	287a      	cmp	r0, #122	; 0x7a
    4a1a:	f000 808b 	beq.w	4b34 <tfp_format+0x190>
                ch = *(fmt++);
            }

            switch (ch) {
    4a1e:	2869      	cmp	r0, #105	; 0x69
    4a20:	f000 80a9 	beq.w	4b76 <tfp_format+0x1d2>
    4a24:	f240 808b 	bls.w	4b3e <tfp_format+0x19a>
    4a28:	2873      	cmp	r0, #115	; 0x73
    4a2a:	f000 80f7 	beq.w	4c1c <tfp_format+0x278>
    4a2e:	f200 80b3 	bhi.w	4b98 <tfp_format+0x1f4>
    4a32:	286f      	cmp	r0, #111	; 0x6f
    4a34:	f000 80e1 	beq.w	4bfa <tfp_format+0x256>
    4a38:	2870      	cmp	r0, #112	; 0x70
    4a3a:	d1bb      	bne.n	49b4 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
    4a3c:	9b00      	ldr	r3, [sp, #0]
    4a3e:	1d1a      	adds	r2, r3, #4
    4a40:	9200      	str	r2, [sp, #0]
    4a42:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
    4a44:	2310      	movs	r3, #16
    4a46:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
    4a4a:	aa08      	add	r2, sp, #32
    4a4c:	2100      	movs	r1, #0
    4a4e:	f7ff fe1b 	bl	4688 <ui2a>
                p.width = 2 * sizeof(void*);
    4a52:	2308      	movs	r3, #8
    4a54:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
    4a58:	2301      	movs	r3, #1
    4a5a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
    4a5e:	2130      	movs	r1, #48	; 0x30
    4a60:	4628      	mov	r0, r5
    4a62:	f7ff feca 	bl	47fa <putf>
    4a66:	4404      	add	r4, r0
                written += putf(putp, 'x');
    4a68:	2178      	movs	r1, #120	; 0x78
    4a6a:	4628      	mov	r0, r5
    4a6c:	f7ff fec5 	bl	47fa <putf>
    4a70:	4404      	add	r4, r0
                written += putchw(putp, &p);
    4a72:	a908      	add	r1, sp, #32
    4a74:	4628      	mov	r0, r5
    4a76:	f7ff fed5 	bl	4824 <putchw>
    4a7a:	4404      	add	r4, r0
                break;
    4a7c:	e79a      	b.n	49b4 <tfp_format+0x10>
                    if (!p.left) {
    4a7e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    4a82:	f013 0f08 	tst.w	r3, #8
    4a86:	d1b0      	bne.n	49ea <tfp_format+0x46>
                        p.lz = 1;
    4a88:	2301      	movs	r3, #1
    4a8a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    4a8e:	e7ac      	b.n	49ea <tfp_format+0x46>
                    p.alt = 1;
    4a90:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    4a94:	f043 0302 	orr.w	r3, r3, #2
    4a98:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
    4a9c:	e7a5      	b.n	49ea <tfp_format+0x46>
                    p.left = 1;
    4a9e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    4aa2:	f043 0308 	orr.w	r3, r3, #8
    4aa6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
    4aaa:	2300      	movs	r3, #0
    4aac:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    4ab0:	e79b      	b.n	49ea <tfp_format+0x46>
                i = intarg(0, 1, &va);
    4ab2:	466a      	mov	r2, sp
    4ab4:	2101      	movs	r1, #1
    4ab6:	2000      	movs	r0, #0
    4ab8:	f7ff ff42 	bl	4940 <intarg>
                if (i > UCHAR_MAX) {
    4abc:	28ff      	cmp	r0, #255	; 0xff
    4abe:	dd07      	ble.n	4ad0 <tfp_format+0x12c>
                    p.width = UCHAR_MAX;
    4ac0:	23ff      	movs	r3, #255	; 0xff
    4ac2:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
    4ac6:	9b01      	ldr	r3, [sp, #4]
    4ac8:	1c5a      	adds	r2, r3, #1
    4aca:	9201      	str	r2, [sp, #4]
    4acc:	7818      	ldrb	r0, [r3, #0]
    4ace:	e79e      	b.n	4a0e <tfp_format+0x6a>
                } else if (i > 0) {
    4ad0:	2800      	cmp	r0, #0
    4ad2:	ddf8      	ble.n	4ac6 <tfp_format+0x122>
                    p.width = i;
    4ad4:	f88d 0020 	strb.w	r0, [sp, #32]
    4ad8:	e7f5      	b.n	4ac6 <tfp_format+0x122>
                ch = a2i(ch, &fmt, 10, &(p.width));
    4ada:	ab08      	add	r3, sp, #32
    4adc:	220a      	movs	r2, #10
    4ade:	a901      	add	r1, sp, #4
    4ae0:	f7ff fe70 	bl	47c4 <a2i>
    4ae4:	e793      	b.n	4a0e <tfp_format+0x6a>
                ch = *(fmt++);
    4ae6:	9b01      	ldr	r3, [sp, #4]
    4ae8:	1c5a      	adds	r2, r3, #1
    4aea:	9201      	str	r2, [sp, #4]
    4aec:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
    4aee:	286c      	cmp	r0, #108	; 0x6c
    4af0:	d001      	beq.n	4af6 <tfp_format+0x152>
                lng = 1;
    4af2:	2301      	movs	r3, #1
    4af4:	e790      	b.n	4a18 <tfp_format+0x74>
                    ch = *(fmt++);
    4af6:	1c9a      	adds	r2, r3, #2
    4af8:	9201      	str	r2, [sp, #4]
    4afa:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
    4afc:	2302      	movs	r3, #2
    4afe:	e78b      	b.n	4a18 <tfp_format+0x74>
                ch = *(fmt++);
    4b00:	9b01      	ldr	r3, [sp, #4]
    4b02:	1c5a      	adds	r2, r3, #1
    4b04:	9201      	str	r2, [sp, #4]
    4b06:	7818      	ldrb	r0, [r3, #0]
                p.hh = 1;
    4b08:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    4b0c:	2601      	movs	r6, #1
    4b0e:	f366 1105 	bfi	r1, r6, #4, #2
    4b12:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
                if (ch == 'h') {
    4b16:	2868      	cmp	r0, #104	; 0x68
    4b18:	d001      	beq.n	4b1e <tfp_format+0x17a>
            lng = 0;
    4b1a:	2300      	movs	r3, #0
    4b1c:	e77c      	b.n	4a18 <tfp_format+0x74>
                    ch = *(fmt++);
    4b1e:	4432      	add	r2, r6
    4b20:	9201      	str	r2, [sp, #4]
    4b22:	7858      	ldrb	r0, [r3, #1]
                    p.hh = 2;
    4b24:	b2cb      	uxtb	r3, r1
    4b26:	2202      	movs	r2, #2
    4b28:	f362 1305 	bfi	r3, r2, #4, #2
    4b2c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;
    4b30:	2300      	movs	r3, #0
    4b32:	e771      	b.n	4a18 <tfp_format+0x74>
                ch = *(fmt++);
    4b34:	9a01      	ldr	r2, [sp, #4]
    4b36:	1c51      	adds	r1, r2, #1
    4b38:	9101      	str	r1, [sp, #4]
    4b3a:	7810      	ldrb	r0, [r2, #0]
    4b3c:	e76f      	b.n	4a1e <tfp_format+0x7a>
            switch (ch) {
    4b3e:	2858      	cmp	r0, #88	; 0x58
    4b40:	d040      	beq.n	4bc4 <tfp_format+0x220>
    4b42:	d80a      	bhi.n	4b5a <tfp_format+0x1b6>
    4b44:	2800      	cmp	r0, #0
    4b46:	d076      	beq.n	4c36 <tfp_format+0x292>
    4b48:	2825      	cmp	r0, #37	; 0x25
    4b4a:	f47f af33 	bne.w	49b4 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
    4b4e:	4601      	mov	r1, r0
    4b50:	4628      	mov	r0, r5
    4b52:	f7ff fe52 	bl	47fa <putf>
    4b56:	4404      	add	r4, r0
                break;
    4b58:	e72c      	b.n	49b4 <tfp_format+0x10>
            switch (ch) {
    4b5a:	2863      	cmp	r0, #99	; 0x63
    4b5c:	d108      	bne.n	4b70 <tfp_format+0x1cc>
                written += putf(putp, (char)(va_arg(va, int)));
    4b5e:	9b00      	ldr	r3, [sp, #0]
    4b60:	1d1a      	adds	r2, r3, #4
    4b62:	9200      	str	r2, [sp, #0]
    4b64:	7819      	ldrb	r1, [r3, #0]
    4b66:	4628      	mov	r0, r5
    4b68:	f7ff fe47 	bl	47fa <putf>
    4b6c:	4404      	add	r4, r0
                break;
    4b6e:	e721      	b.n	49b4 <tfp_format+0x10>
            switch (ch) {
    4b70:	2864      	cmp	r0, #100	; 0x64
    4b72:	f47f af1f 	bne.w	49b4 <tfp_format+0x10>
                p.base = 10;
    4b76:	220a      	movs	r2, #10
    4b78:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
    4b7c:	466a      	mov	r2, sp
    4b7e:	2101      	movs	r1, #1
    4b80:	4618      	mov	r0, r3
    4b82:	f7ff fedd 	bl	4940 <intarg>
    4b86:	aa08      	add	r2, sp, #32
    4b88:	f7ff fdf4 	bl	4774 <i2a>
                written += putchw(putp, &p);
    4b8c:	a908      	add	r1, sp, #32
    4b8e:	4628      	mov	r0, r5
    4b90:	f7ff fe48 	bl	4824 <putchw>
    4b94:	4404      	add	r4, r0
                break;
    4b96:	e70d      	b.n	49b4 <tfp_format+0x10>
            switch (ch) {
    4b98:	2875      	cmp	r0, #117	; 0x75
    4b9a:	d110      	bne.n	4bbe <tfp_format+0x21a>
                p.base = 10;
    4b9c:	220a      	movs	r2, #10
    4b9e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    4ba2:	466a      	mov	r2, sp
    4ba4:	2100      	movs	r1, #0
    4ba6:	4618      	mov	r0, r3
    4ba8:	f7ff feca 	bl	4940 <intarg>
    4bac:	aa08      	add	r2, sp, #32
    4bae:	f7ff fd6b 	bl	4688 <ui2a>
                written += putchw(putp, &p);
    4bb2:	a908      	add	r1, sp, #32
    4bb4:	4628      	mov	r0, r5
    4bb6:	f7ff fe35 	bl	4824 <putchw>
    4bba:	4404      	add	r4, r0
                break;
    4bbc:	e6fa      	b.n	49b4 <tfp_format+0x10>
            switch (ch) {
    4bbe:	2878      	cmp	r0, #120	; 0x78
    4bc0:	f47f aef8 	bne.w	49b4 <tfp_format+0x10>
                p.base = 16;
    4bc4:	2210      	movs	r2, #16
    4bc6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
    4bca:	2858      	cmp	r0, #88	; 0x58
    4bcc:	bf14      	ite	ne
    4bce:	2000      	movne	r0, #0
    4bd0:	2001      	moveq	r0, #1
    4bd2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    4bd6:	f360 0282 	bfi	r2, r0, #2, #1
    4bda:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
    4bde:	466a      	mov	r2, sp
    4be0:	2100      	movs	r1, #0
    4be2:	4618      	mov	r0, r3
    4be4:	f7ff feac 	bl	4940 <intarg>
    4be8:	aa08      	add	r2, sp, #32
    4bea:	f7ff fd4d 	bl	4688 <ui2a>
                written += putchw(putp, &p);
    4bee:	a908      	add	r1, sp, #32
    4bf0:	4628      	mov	r0, r5
    4bf2:	f7ff fe17 	bl	4824 <putchw>
    4bf6:	4404      	add	r4, r0
                break;
    4bf8:	e6dc      	b.n	49b4 <tfp_format+0x10>
                p.base = 8;
    4bfa:	2208      	movs	r2, #8
    4bfc:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    4c00:	466a      	mov	r2, sp
    4c02:	2100      	movs	r1, #0
    4c04:	4618      	mov	r0, r3
    4c06:	f7ff fe9b 	bl	4940 <intarg>
    4c0a:	aa08      	add	r2, sp, #32
    4c0c:	f7ff fd3c 	bl	4688 <ui2a>
                written += putchw(putp, &p);
    4c10:	a908      	add	r1, sp, #32
    4c12:	4628      	mov	r0, r5
    4c14:	f7ff fe06 	bl	4824 <putchw>
    4c18:	4404      	add	r4, r0
                break;
    4c1a:	e6cb      	b.n	49b4 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
    4c1c:	9b00      	ldr	r3, [sp, #0]
    4c1e:	1d1a      	adds	r2, r3, #4
    4c20:	9200      	str	r2, [sp, #0]
    4c22:	681b      	ldr	r3, [r3, #0]
    4c24:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
    4c26:	a908      	add	r1, sp, #32
    4c28:	4628      	mov	r0, r5
    4c2a:	f7ff fdfb 	bl	4824 <putchw>
    4c2e:	4404      	add	r4, r0
                p.bf = bf;
    4c30:	ab02      	add	r3, sp, #8
    4c32:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    4c34:	e6be      	b.n	49b4 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
    4c36:	4620      	mov	r0, r4
    4c38:	b00a      	add	sp, #40	; 0x28
    4c3a:	bd70      	pop	{r4, r5, r6, pc}

00004c3c <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    4c3c:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
    4c3e:	f7ff feb1 	bl	49a4 <tfp_format>
}
    4c42:	bd08      	pop	{r3, pc}

00004c44 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
    4c44:	b40f      	push	{r0, r1, r2, r3}
    4c46:	b500      	push	{lr}
    4c48:	b083      	sub	sp, #12
    4c4a:	aa04      	add	r2, sp, #16
    4c4c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
    4c50:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
    4c52:	4b04      	ldr	r3, [pc, #16]	; (4c64 <printf+0x20>)
    4c54:	6818      	ldr	r0, [r3, #0]
    4c56:	f7ff fff1 	bl	4c3c <vfprintf>
    va_end(va);
    return rv;
}
    4c5a:	b003      	add	sp, #12
    4c5c:	f85d eb04 	ldr.w	lr, [sp], #4
    4c60:	b004      	add	sp, #16
    4c62:	4770      	bx	lr
    4c64:	00005d24 	.word	0x00005d24

00004c68 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
    4c68:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
    4c6a:	460a      	mov	r2, r1
    4c6c:	4601      	mov	r1, r0
    4c6e:	4b02      	ldr	r3, [pc, #8]	; (4c78 <vprintf+0x10>)
    4c70:	6818      	ldr	r0, [r3, #0]
    4c72:	f7ff ffe3 	bl	4c3c <vfprintf>
}
    4c76:	bd08      	pop	{r3, pc}
    4c78:	00005d24 	.word	0x00005d24

00004c7c <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
    4c7c:	b410      	push	{r4}
    int i;

    if (flash_map == NULL) {
    4c7e:	4b0c      	ldr	r3, [pc, #48]	; (4cb0 <flash_area_find_idx+0x34>)
    4c80:	681c      	ldr	r4, [r3, #0]
    4c82:	b18c      	cbz	r4, 4ca8 <flash_area_find_idx+0x2c>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
    4c84:	2300      	movs	r3, #0
    4c86:	4a0b      	ldr	r2, [pc, #44]	; (4cb4 <flash_area_find_idx+0x38>)
    4c88:	6812      	ldr	r2, [r2, #0]
    4c8a:	429a      	cmp	r2, r3
    4c8c:	dd07      	ble.n	4c9e <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
    4c8e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    4c92:	008a      	lsls	r2, r1, #2
    4c94:	5ca2      	ldrb	r2, [r4, r2]
    4c96:	4282      	cmp	r2, r0
    4c98:	d003      	beq.n	4ca2 <flash_area_find_idx+0x26>
    for (i = 0; i < flash_map_entries; i++) {
    4c9a:	3301      	adds	r3, #1
    4c9c:	e7f3      	b.n	4c86 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
    4c9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    4ca2:	4618      	mov	r0, r3
    4ca4:	bc10      	pop	{r4}
    4ca6:	4770      	bx	lr
        return -1;
    4ca8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4cac:	e7f9      	b.n	4ca2 <flash_area_find_idx+0x26>
    4cae:	bf00      	nop
    4cb0:	20006384 	.word	0x20006384
    4cb4:	20006388 	.word	0x20006388

00004cb8 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
    4cb8:	2300      	movs	r3, #0
    4cba:	4a13      	ldr	r2, [pc, #76]	; (4d08 <flash_map_area_overlaps+0x50>)
    4cbc:	6812      	ldr	r2, [r2, #0]
    4cbe:	429a      	cmp	r2, r3
    4cc0:	dd1f      	ble.n	4d02 <flash_map_area_overlaps+0x4a>
{
    4cc2:	b430      	push	{r4, r5}
    4cc4:	e004      	b.n	4cd0 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
    4cc6:	3301      	adds	r3, #1
    4cc8:	4a0f      	ldr	r2, [pc, #60]	; (4d08 <flash_map_area_overlaps+0x50>)
    4cca:	6812      	ldr	r2, [r2, #0]
    4ccc:	429a      	cmp	r2, r3
    4cce:	dd15      	ble.n	4cfc <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
    4cd0:	4a0e      	ldr	r2, [pc, #56]	; (4d0c <flash_map_area_overlaps+0x54>)
    4cd2:	6812      	ldr	r2, [r2, #0]
    4cd4:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    4cd8:	00a1      	lsls	r1, r4, #2
    4cda:	440a      	add	r2, r1

        if (area1->fa_device_id == area2->fa_device_id) {
    4cdc:	7844      	ldrb	r4, [r0, #1]
    4cde:	7851      	ldrb	r1, [r2, #1]
    4ce0:	428c      	cmp	r4, r1
    4ce2:	d1f0      	bne.n	4cc6 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
    4ce4:	6845      	ldr	r5, [r0, #4]
    4ce6:	6881      	ldr	r1, [r0, #8]
    4ce8:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
    4cea:	6854      	ldr	r4, [r2, #4]
    4cec:	6892      	ldr	r2, [r2, #8]
    4cee:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
    4cf0:	428c      	cmp	r4, r1
    4cf2:	d2e8      	bcs.n	4cc6 <flash_map_area_overlaps+0xe>
    4cf4:	4295      	cmp	r5, r2
    4cf6:	d2e6      	bcs.n	4cc6 <flash_map_area_overlaps+0xe>
                return true;
    4cf8:	2001      	movs	r0, #1
    4cfa:	e000      	b.n	4cfe <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
    4cfc:	2000      	movs	r0, #0
}
    4cfe:	bc30      	pop	{r4, r5}
    4d00:	4770      	bx	lr
    return false;
    4d02:	2000      	movs	r0, #0
}
    4d04:	4770      	bx	lr
    4d06:	bf00      	nop
    4d08:	20006388 	.word	0x20006388
    4d0c:	20006384 	.word	0x20006384

00004d10 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
    4d10:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
    4d12:	2400      	movs	r4, #0
    4d14:	e00a      	b.n	4d2c <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
    4d16:	f7fb fa25 	bl	164 <hal_debugger_connected>
    4d1a:	b100      	cbz	r0, 4d1e <flash_map_add_new_dflt_areas+0xe>
    4d1c:	be01      	bkpt	0x0001
    4d1e:	2300      	movs	r3, #0
    4d20:	461a      	mov	r2, r3
    4d22:	4619      	mov	r1, r3
    4d24:	4618      	mov	r0, r3
    4d26:	f7fc fd41 	bl	17ac <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
    4d2a:	3401      	adds	r4, #1
    4d2c:	2c05      	cmp	r4, #5
    4d2e:	dc26      	bgt.n	4d7e <flash_map_add_new_dflt_areas+0x6e>
        dflt_area = &sysflash_map_dflt[i];
    4d30:	0063      	lsls	r3, r4, #1
    4d32:	4423      	add	r3, r4
    4d34:	009a      	lsls	r2, r3, #2
    4d36:	4b12      	ldr	r3, [pc, #72]	; (4d80 <flash_map_add_new_dflt_areas+0x70>)
    4d38:	18d6      	adds	r6, r2, r3
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
    4d3a:	5c98      	ldrb	r0, [r3, r2]
    4d3c:	f7ff ff9e 	bl	4c7c <flash_area_find_idx>
    4d40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4d44:	d1f1      	bne.n	4d2a <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
    4d46:	4b0f      	ldr	r3, [pc, #60]	; (4d84 <flash_map_add_new_dflt_areas+0x74>)
    4d48:	681d      	ldr	r5, [r3, #0]
    4d4a:	2d09      	cmp	r5, #9
    4d4c:	dce3      	bgt.n	4d16 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
    4d4e:	4630      	mov	r0, r6
    4d50:	f7ff ffb2 	bl	4cb8 <flash_map_area_overlaps>
    4d54:	2800      	cmp	r0, #0
    4d56:	d1e8      	bne.n	4d2a <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
    4d58:	4b0b      	ldr	r3, [pc, #44]	; (4d88 <flash_map_add_new_dflt_areas+0x78>)
    4d5a:	681b      	ldr	r3, [r3, #0]
    4d5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4d60:	00aa      	lsls	r2, r5, #2
    4d62:	4413      	add	r3, r2

                *dst_area = *dflt_area;
    4d64:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4d68:	0091      	lsls	r1, r2, #2
    4d6a:	4a05      	ldr	r2, [pc, #20]	; (4d80 <flash_map_add_new_dflt_areas+0x70>)
    4d6c:	440a      	add	r2, r1
    4d6e:	ca07      	ldmia	r2, {r0, r1, r2}
    4d70:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                flash_map_entries++;
    4d74:	4a03      	ldr	r2, [pc, #12]	; (4d84 <flash_map_add_new_dflt_areas+0x74>)
    4d76:	6813      	ldr	r3, [r2, #0]
    4d78:	3301      	adds	r3, #1
    4d7a:	6013      	str	r3, [r2, #0]
    4d7c:	e7d5      	b.n	4d2a <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
    4d7e:	bd70      	pop	{r4, r5, r6, pc}
    4d80:	00005d28 	.word	0x00005d28
    4d84:	20006388 	.word	0x20006388
    4d88:	20006384 	.word	0x20006384

00004d8c <flash_map_read_mfg>:
{
    4d8c:	b570      	push	{r4, r5, r6, lr}
    4d8e:	b086      	sub	sp, #24
    4d90:	4605      	mov	r5, r0
    4d92:	460e      	mov	r6, r1
    4d94:	4614      	mov	r4, r2
    *out_num_areas = 0;
    4d96:	2300      	movs	r3, #0
    4d98:	6013      	str	r3, [r2, #0]
    mfg_init();
    4d9a:	f000 fa1b 	bl	51d4 <mfg_init>
    mfg_open(&reader);
    4d9e:	a801      	add	r0, sp, #4
    4da0:	f000 fa2a 	bl	51f8 <mfg_open>
        if (*out_num_areas >= max_areas) {
    4da4:	6823      	ldr	r3, [r4, #0]
    4da6:	42ab      	cmp	r3, r5
    4da8:	da29      	bge.n	4dfe <flash_map_read_mfg+0x72>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
    4daa:	2102      	movs	r1, #2
    4dac:	a801      	add	r0, sp, #4
    4dae:	f000 f9fa 	bl	51a6 <mfg_seek_next_with_type>
    4db2:	4603      	mov	r3, r0
        switch (rc) {
    4db4:	f110 0f0f 	cmn.w	r0, #15
    4db8:	d003      	beq.n	4dc2 <flash_map_read_mfg+0x36>
    4dba:	b120      	cbz	r0, 4dc6 <flash_map_read_mfg+0x3a>
}
    4dbc:	4618      	mov	r0, r3
    4dbe:	b006      	add	sp, #24
    4dc0:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
    4dc2:	2300      	movs	r3, #0
    4dc4:	e7fa      	b.n	4dbc <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
    4dc6:	a903      	add	r1, sp, #12
    4dc8:	a801      	add	r0, sp, #4
    4dca:	f000 f9f9 	bl	51c0 <mfg_read_tlv_flash_area>
        if (rc != 0) {
    4dce:	4603      	mov	r3, r0
    4dd0:	2800      	cmp	r0, #0
    4dd2:	d1f3      	bne.n	4dbc <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
    4dd4:	6823      	ldr	r3, [r4, #0]
    4dd6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4dda:	009a      	lsls	r2, r3, #2
    4ddc:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
    4dde:	f89d 100c 	ldrb.w	r1, [sp, #12]
    4de2:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
    4de4:	f89d 200d 	ldrb.w	r2, [sp, #13]
    4de8:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
    4dea:	f8dd 200e 	ldr.w	r2, [sp, #14]
    4dee:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
    4df0:	f8dd 2012 	ldr.w	r2, [sp, #18]
    4df4:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
    4df6:	6823      	ldr	r3, [r4, #0]
    4df8:	3301      	adds	r3, #1
    4dfa:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
    4dfc:	e7d2      	b.n	4da4 <flash_map_read_mfg+0x18>
            return -1;
    4dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4e02:	e7db      	b.n	4dbc <flash_map_read_mfg+0x30>

00004e04 <flash_area_open>:
{
    4e04:	b538      	push	{r3, r4, r5, lr}
    if (flash_map == NULL) {
    4e06:	4b0b      	ldr	r3, [pc, #44]	; (4e34 <flash_area_open+0x30>)
    4e08:	681c      	ldr	r4, [r3, #0]
    4e0a:	b164      	cbz	r4, 4e26 <flash_area_open+0x22>
    4e0c:	460d      	mov	r5, r1
    idx = flash_area_find_idx(id);
    4e0e:	f7ff ff35 	bl	4c7c <flash_area_find_idx>
    if (idx == -1) {
    4e12:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4e16:	d009      	beq.n	4e2c <flash_area_open+0x28>
    *fap = &flash_map[idx];
    4e18:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4e1c:	0083      	lsls	r3, r0, #2
    4e1e:	441c      	add	r4, r3
    4e20:	602c      	str	r4, [r5, #0]
    return 0;
    4e22:	2000      	movs	r0, #0
}
    4e24:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
    4e26:	f06f 0006 	mvn.w	r0, #6
    4e2a:	e7fb      	b.n	4e24 <flash_area_open+0x20>
        return SYS_ENOENT;
    4e2c:	f06f 0003 	mvn.w	r0, #3
    4e30:	e7f8      	b.n	4e24 <flash_area_open+0x20>
    4e32:	bf00      	nop
    4e34:	20006384 	.word	0x20006384

00004e38 <flash_area_to_sectors>:
{
    4e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e3c:	b084      	sub	sp, #16
    4e3e:	460f      	mov	r7, r1
    4e40:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
    4e42:	fa5f f980 	uxtb.w	r9, r0
    4e46:	a903      	add	r1, sp, #12
    4e48:	4648      	mov	r0, r9
    4e4a:	f7ff ffdb 	bl	4e04 <flash_area_open>
    if (rc != 0) {
    4e4e:	4680      	mov	r8, r0
    4e50:	b118      	cbz	r0, 4e5a <flash_area_to_sectors+0x22>
}
    4e52:	4640      	mov	r0, r8
    4e54:	b004      	add	sp, #16
    4e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
    4e5a:	2300      	movs	r3, #0
    4e5c:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    4e5e:	9b03      	ldr	r3, [sp, #12]
    4e60:	7858      	ldrb	r0, [r3, #1]
    4e62:	f7fb fc05 	bl	670 <hal_bsp_flash_dev>
    4e66:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    4e68:	4644      	mov	r4, r8
    4e6a:	e003      	b.n	4e74 <flash_area_to_sectors+0x3c>
            (*cnt)++;
    4e6c:	683b      	ldr	r3, [r7, #0]
    4e6e:	3301      	adds	r3, #1
    4e70:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    4e72:	3401      	adds	r4, #1
    4e74:	68eb      	ldr	r3, [r5, #12]
    4e76:	42a3      	cmp	r3, r4
    4e78:	ddeb      	ble.n	4e52 <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    4e7a:	682b      	ldr	r3, [r5, #0]
    4e7c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    4e80:	ab01      	add	r3, sp, #4
    4e82:	aa02      	add	r2, sp, #8
    4e84:	4621      	mov	r1, r4
    4e86:	4628      	mov	r0, r5
    4e88:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
    4e8a:	9903      	ldr	r1, [sp, #12]
    4e8c:	684b      	ldr	r3, [r1, #4]
    4e8e:	9a02      	ldr	r2, [sp, #8]
    4e90:	4293      	cmp	r3, r2
    4e92:	d8ee      	bhi.n	4e72 <flash_area_to_sectors+0x3a>
    4e94:	6889      	ldr	r1, [r1, #8]
    4e96:	440b      	add	r3, r1
    4e98:	429a      	cmp	r2, r3
    4e9a:	d2ea      	bcs.n	4e72 <flash_area_to_sectors+0x3a>
            if (ret) {
    4e9c:	2e00      	cmp	r6, #0
    4e9e:	d0e5      	beq.n	4e6c <flash_area_to_sectors+0x34>
                ret->fa_id = id;
    4ea0:	f886 9000 	strb.w	r9, [r6]
                ret->fa_device_id = fa->fa_device_id;
    4ea4:	9b03      	ldr	r3, [sp, #12]
    4ea6:	785b      	ldrb	r3, [r3, #1]
    4ea8:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
    4eaa:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
    4eac:	9b01      	ldr	r3, [sp, #4]
    4eae:	60b3      	str	r3, [r6, #8]
                ret++;
    4eb0:	360c      	adds	r6, #12
    4eb2:	e7db      	b.n	4e6c <flash_area_to_sectors+0x34>

00004eb4 <flash_area_read>:
{
    4eb4:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    4eb6:	6884      	ldr	r4, [r0, #8]
    4eb8:	428c      	cmp	r4, r1
    4eba:	d308      	bcc.n	4ece <flash_area_read+0x1a>
    4ebc:	18cd      	adds	r5, r1, r3
    4ebe:	42ac      	cmp	r4, r5
    4ec0:	d308      	bcc.n	4ed4 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    4ec2:	6844      	ldr	r4, [r0, #4]
    4ec4:	4421      	add	r1, r4
    4ec6:	7840      	ldrb	r0, [r0, #1]
    4ec8:	f7ff fa8b 	bl	43e2 <hal_flash_read>
}
    4ecc:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    4ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4ed2:	e7fb      	b.n	4ecc <flash_area_read+0x18>
    4ed4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4ed8:	e7f8      	b.n	4ecc <flash_area_read+0x18>

00004eda <flash_area_write>:
{
    4eda:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    4edc:	6884      	ldr	r4, [r0, #8]
    4ede:	428c      	cmp	r4, r1
    4ee0:	d308      	bcc.n	4ef4 <flash_area_write+0x1a>
    4ee2:	18cd      	adds	r5, r1, r3
    4ee4:	42ac      	cmp	r4, r5
    4ee6:	d308      	bcc.n	4efa <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    4ee8:	6844      	ldr	r4, [r0, #4]
    4eea:	4421      	add	r1, r4
    4eec:	7840      	ldrb	r0, [r0, #1]
    4eee:	f7ff faa3 	bl	4438 <hal_flash_write>
}
    4ef2:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    4ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4ef8:	e7fb      	b.n	4ef2 <flash_area_write+0x18>
    4efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4efe:	e7f8      	b.n	4ef2 <flash_area_write+0x18>

00004f00 <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
    4f00:	6883      	ldr	r3, [r0, #8]
    4f02:	428b      	cmp	r3, r1
    4f04:	d309      	bcc.n	4f1a <flash_area_erase+0x1a>
{
    4f06:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    4f08:	188c      	adds	r4, r1, r2
    4f0a:	42a3      	cmp	r3, r4
    4f0c:	d308      	bcc.n	4f20 <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    4f0e:	6843      	ldr	r3, [r0, #4]
    4f10:	4419      	add	r1, r3
    4f12:	7840      	ldrb	r0, [r0, #1]
    4f14:	f7ff faca 	bl	44ac <hal_flash_erase>
}
    4f18:	bd10      	pop	{r4, pc}
        return -1;
    4f1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4f1e:	4770      	bx	lr
        return -1;
    4f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4f24:	e7f8      	b.n	4f18 <flash_area_erase+0x18>

00004f26 <flash_area_align>:
{
    4f26:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
    4f28:	7840      	ldrb	r0, [r0, #1]
    4f2a:	f7ff fa4a 	bl	43c2 <hal_flash_align>
}
    4f2e:	bd08      	pop	{r3, pc}

00004f30 <flash_area_erased_val>:
{
    4f30:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
    4f32:	7840      	ldrb	r0, [r0, #1]
    4f34:	f7ff fa4d 	bl	43d2 <hal_flash_erased_val>
}
    4f38:	bd08      	pop	{r3, pc}

00004f3a <flash_area_read_is_empty>:
{
    4f3a:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
    4f3c:	6844      	ldr	r4, [r0, #4]
    4f3e:	4421      	add	r1, r4
    4f40:	7840      	ldrb	r0, [r0, #1]
    4f42:	f7ff fb37 	bl	45b4 <hal_flash_isempty>
}
    4f46:	bd10      	pop	{r4, pc}

00004f48 <flash_map_init>:

void
flash_map_init(void)
{
    4f48:	b510      	push	{r4, lr}
    4f4a:	b084      	sub	sp, #16
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
    4f4c:	f7ff fa25 	bl	439a <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    4f50:	b978      	cbnz	r0, 4f72 <flash_map_init+0x2a>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    4f52:	4b12      	ldr	r3, [pc, #72]	; (4f9c <flash_map_init+0x54>)
    4f54:	4a12      	ldr	r2, [pc, #72]	; (4fa0 <flash_map_init+0x58>)
    4f56:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    4f58:	4b12      	ldr	r3, [pc, #72]	; (4fa4 <flash_map_init+0x5c>)
    4f5a:	2206      	movs	r2, #6
    4f5c:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
    4f5e:	aa03      	add	r2, sp, #12
    4f60:	4911      	ldr	r1, [pc, #68]	; (4fa8 <flash_map_init+0x60>)
    4f62:	200a      	movs	r0, #10
    4f64:	f7ff ff12 	bl	4d8c <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc != 0 || num_areas == 0) {
    4f68:	b908      	cbnz	r0, 4f6e <flash_map_init+0x26>
    4f6a:	9b03      	ldr	r3, [sp, #12]
    4f6c:	b973      	cbnz	r3, 4f8c <flash_map_init+0x44>
    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
}
    4f6e:	b004      	add	sp, #16
    4f70:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    4f72:	f7fb f8f7 	bl	164 <hal_debugger_connected>
    4f76:	b100      	cbz	r0, 4f7a <flash_map_init+0x32>
    4f78:	be01      	bkpt	0x0001
    4f7a:	2000      	movs	r0, #0
    4f7c:	9000      	str	r0, [sp, #0]
    4f7e:	4b0b      	ldr	r3, [pc, #44]	; (4fac <flash_map_init+0x64>)
    4f80:	681c      	ldr	r4, [r3, #0]
    4f82:	4603      	mov	r3, r0
    4f84:	4602      	mov	r2, r0
    4f86:	4601      	mov	r1, r0
    4f88:	47a0      	blx	r4
    4f8a:	e7e2      	b.n	4f52 <flash_map_init+0xa>
    flash_map = mfg_areas;
    4f8c:	4a03      	ldr	r2, [pc, #12]	; (4f9c <flash_map_init+0x54>)
    4f8e:	4906      	ldr	r1, [pc, #24]	; (4fa8 <flash_map_init+0x60>)
    4f90:	6011      	str	r1, [r2, #0]
    flash_map_entries = num_areas;
    4f92:	4a04      	ldr	r2, [pc, #16]	; (4fa4 <flash_map_init+0x5c>)
    4f94:	6013      	str	r3, [r2, #0]
    flash_map_add_new_dflt_areas();
    4f96:	f7ff febb 	bl	4d10 <flash_map_add_new_dflt_areas>
    4f9a:	e7e8      	b.n	4f6e <flash_map_init+0x26>
    4f9c:	20006384 	.word	0x20006384
    4fa0:	00005d28 	.word	0x00005d28
    4fa4:	20006388 	.word	0x20006388
    4fa8:	2000638c 	.word	0x2000638c
    4fac:	20000150 	.word	0x20000150

00004fb0 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
    4fb0:	4770      	bx	lr
	...

00004fb4 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
    4fb4:	b530      	push	{r4, r5, lr}
    4fb6:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
    4fb8:	7885      	ldrb	r5, [r0, #2]
    4fba:	4b21      	ldr	r3, [pc, #132]	; (5040 <mfg_seek_next_aux+0x8c>)
    4fbc:	681b      	ldr	r3, [r3, #0]
    4fbe:	429d      	cmp	r5, r3
    4fc0:	da32      	bge.n	5028 <mfg_seek_next_aux+0x74>
    4fc2:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
    4fc4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    4fc8:	0093      	lsls	r3, r2, #2
    4fca:	a901      	add	r1, sp, #4
    4fcc:	4a1d      	ldr	r2, [pc, #116]	; (5044 <mfg_seek_next_aux+0x90>)
    4fce:	5cd0      	ldrb	r0, [r2, r3]
    4fd0:	f7ff ff18 	bl	4e04 <flash_area_open>
    if (rc != 0) {
    4fd4:	bb58      	cbnz	r0, 502e <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
    4fd6:	6862      	ldr	r2, [r4, #4]
    4fd8:	b9c2      	cbnz	r2, 500c <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
    4fda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4fde:	00aa      	lsls	r2, r5, #2
    4fe0:	4b18      	ldr	r3, [pc, #96]	; (5044 <mfg_seek_next_aux+0x90>)
    4fe2:	4413      	add	r3, r2
    4fe4:	685b      	ldr	r3, [r3, #4]
    4fe6:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
    4fe8:	6861      	ldr	r1, [r4, #4]
    4fea:	9801      	ldr	r0, [sp, #4]
    4fec:	6883      	ldr	r3, [r0, #8]
    4fee:	3b08      	subs	r3, #8
    4ff0:	4299      	cmp	r1, r3
    4ff2:	d310      	bcc.n	5016 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
    4ff4:	78a3      	ldrb	r3, [r4, #2]
    4ff6:	1c59      	adds	r1, r3, #1
    4ff8:	4a11      	ldr	r2, [pc, #68]	; (5040 <mfg_seek_next_aux+0x8c>)
    4ffa:	6812      	ldr	r2, [r2, #0]
    4ffc:	4291      	cmp	r1, r2
    4ffe:	da19      	bge.n	5034 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
    5000:	2200      	movs	r2, #0
    5002:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
    5004:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
    5006:	f06f 0305 	mvn.w	r3, #5
    500a:	e015      	b.n	5038 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    500c:	7863      	ldrb	r3, [r4, #1]
    500e:	4413      	add	r3, r2
    5010:	3302      	adds	r3, #2
    5012:	6063      	str	r3, [r4, #4]
    5014:	e7e8      	b.n	4fe8 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
    5016:	2302      	movs	r3, #2
    5018:	4622      	mov	r2, r4
    501a:	f7ff ff4b 	bl	4eb4 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
    501e:	4603      	mov	r3, r0
    5020:	b150      	cbz	r0, 5038 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
    5022:	f06f 0304 	mvn.w	r3, #4
    5026:	e007      	b.n	5038 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
    5028:	f06f 0301 	mvn.w	r3, #1
    502c:	e004      	b.n	5038 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
    502e:	f06f 0304 	mvn.w	r3, #4
    5032:	e001      	b.n	5038 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
    5034:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
    5038:	4618      	mov	r0, r3
    503a:	b003      	add	sp, #12
    503c:	bd30      	pop	{r4, r5, pc}
    503e:	bf00      	nop
    5040:	20006420 	.word	0x20006420
    5044:	20006408 	.word	0x20006408

00005048 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
    5048:	b530      	push	{r4, r5, lr}
    504a:	b085      	sub	sp, #20
    504c:	4605      	mov	r5, r0
    504e:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
    5050:	a903      	add	r1, sp, #12
    5052:	f7ff fed7 	bl	4e04 <flash_area_open>
    if (rc != 0) {
    5056:	b9e8      	cbnz	r0, 5094 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
    5058:	9803      	ldr	r0, [sp, #12]
    505a:	6881      	ldr	r1, [r0, #8]
    505c:	2308      	movs	r3, #8
    505e:	aa01      	add	r2, sp, #4
    5060:	3908      	subs	r1, #8
    5062:	f7ff ff27 	bl	4eb4 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
    5066:	4601      	mov	r1, r0
    5068:	b9b8      	cbnz	r0, 509a <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
    506a:	9a02      	ldr	r2, [sp, #8]
    506c:	4b11      	ldr	r3, [pc, #68]	; (50b4 <mfg_read_mmr+0x6c>)
    506e:	429a      	cmp	r2, r3
    5070:	d116      	bne.n	50a0 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
    5072:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5076:	2b02      	cmp	r3, #2
    5078:	d115      	bne.n	50a6 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
    507a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    507e:	9b03      	ldr	r3, [sp, #12]
    5080:	689b      	ldr	r3, [r3, #8]
    5082:	429a      	cmp	r2, r3
    5084:	d812      	bhi.n	50ac <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
    5086:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
    5088:	7025      	strb	r5, [r4, #0]
    508a:	6063      	str	r3, [r4, #4]
    508c:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
    508e:	4608      	mov	r0, r1
    5090:	b005      	add	sp, #20
    5092:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
    5094:	f06f 0104 	mvn.w	r1, #4
    5098:	e7f9      	b.n	508e <mfg_read_mmr+0x46>
        return SYS_EIO;
    509a:	f06f 0104 	mvn.w	r1, #4
    509e:	e7f6      	b.n	508e <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    50a0:	f06f 0108 	mvn.w	r1, #8
    50a4:	e7f3      	b.n	508e <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
    50a6:	f06f 010b 	mvn.w	r1, #11
    50aa:	e7f0      	b.n	508e <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    50ac:	f06f 0108 	mvn.w	r1, #8
    50b0:	e7ed      	b.n	508e <mfg_read_mmr+0x46>
    50b2:	bf00      	nop
    50b4:	3bb2a269 	.word	0x3bb2a269

000050b8 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
    50b8:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
    50ba:	2300      	movs	r3, #0
    50bc:	4a11      	ldr	r2, [pc, #68]	; (5104 <mfg_read_next_mmr+0x4c>)
    50be:	6812      	ldr	r2, [r2, #0]
    50c0:	429a      	cmp	r2, r3
    50c2:	dd08      	ble.n	50d6 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
    50c4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    50c8:	008a      	lsls	r2, r1, #2
    50ca:	490f      	ldr	r1, [pc, #60]	; (5108 <mfg_read_next_mmr+0x50>)
    50cc:	5c8a      	ldrb	r2, [r1, r2]
    50ce:	4282      	cmp	r2, r0
    50d0:	d011      	beq.n	50f6 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
    50d2:	3301      	adds	r3, #1
    50d4:	e7f2      	b.n	50bc <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
    50d6:	2a01      	cmp	r2, #1
    50d8:	dc11      	bgt.n	50fe <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
    50da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    50de:	0093      	lsls	r3, r2, #2
    50e0:	4909      	ldr	r1, [pc, #36]	; (5108 <mfg_read_next_mmr+0x50>)
    50e2:	4419      	add	r1, r3
    50e4:	f7ff ffb0 	bl	5048 <mfg_read_mmr>
    if (rc != 0) {
    50e8:	4603      	mov	r3, r0
    50ea:	b930      	cbnz	r0, 50fa <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
    50ec:	4905      	ldr	r1, [pc, #20]	; (5104 <mfg_read_next_mmr+0x4c>)
    50ee:	680a      	ldr	r2, [r1, #0]
    50f0:	3201      	adds	r2, #1
    50f2:	600a      	str	r2, [r1, #0]
    return 0;
    50f4:	e001      	b.n	50fa <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
    50f6:	f06f 030a 	mvn.w	r3, #10
}
    50fa:	4618      	mov	r0, r3
    50fc:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
    50fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5102:	e7fa      	b.n	50fa <mfg_read_next_mmr+0x42>
    5104:	20006420 	.word	0x20006420
    5108:	20006408 	.word	0x20006408

0000510c <mfg_open_flash_area>:
{
    510c:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
    510e:	7883      	ldrb	r3, [r0, #2]
    5110:	4a0d      	ldr	r2, [pc, #52]	; (5148 <mfg_open_flash_area+0x3c>)
    5112:	6812      	ldr	r2, [r2, #0]
    5114:	4293      	cmp	r3, r2
    5116:	da0a      	bge.n	512e <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
    5118:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    511c:	009a      	lsls	r2, r3, #2
    511e:	4b0b      	ldr	r3, [pc, #44]	; (514c <mfg_open_flash_area+0x40>)
    5120:	5c98      	ldrb	r0, [r3, r2]
    5122:	f7ff fe6f 	bl	4e04 <flash_area_open>
    if (rc != 0) {
    5126:	4603      	mov	r3, r0
    5128:	b958      	cbnz	r0, 5142 <mfg_open_flash_area+0x36>
}
    512a:	4618      	mov	r0, r3
    512c:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
    512e:	f7fb f819 	bl	164 <hal_debugger_connected>
    5132:	b100      	cbz	r0, 5136 <mfg_open_flash_area+0x2a>
    5134:	be01      	bkpt	0x0001
    5136:	2300      	movs	r3, #0
    5138:	461a      	mov	r2, r3
    513a:	4619      	mov	r1, r3
    513c:	4618      	mov	r0, r3
    513e:	f7fc fb35 	bl	17ac <__assert_func>
        return SYS_EIO;
    5142:	f06f 0304 	mvn.w	r3, #4
    5146:	e7f0      	b.n	512a <mfg_open_flash_area+0x1e>
    5148:	20006420 	.word	0x20006420
    514c:	20006408 	.word	0x20006408

00005150 <mfg_read_tlv_body>:
{
    5150:	b570      	push	{r4, r5, r6, lr}
    5152:	b082      	sub	sp, #8
    5154:	4606      	mov	r6, r0
    5156:	460c      	mov	r4, r1
    5158:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
    515a:	a901      	add	r1, sp, #4
    515c:	f7ff ffd6 	bl	510c <mfg_open_flash_area>
    if (rc != 0) {
    5160:	4603      	mov	r3, r0
    5162:	b110      	cbz	r0, 516a <mfg_read_tlv_body+0x1a>
}
    5164:	4618      	mov	r0, r3
    5166:	b002      	add	sp, #8
    5168:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
    516a:	462a      	mov	r2, r5
    516c:	2100      	movs	r1, #0
    516e:	4620      	mov	r0, r4
    5170:	f7fc fdac 	bl	1ccc <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
    5174:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
    5176:	6871      	ldr	r1, [r6, #4]
    5178:	42ab      	cmp	r3, r5
    517a:	bfa8      	it	ge
    517c:	462b      	movge	r3, r5
    517e:	4622      	mov	r2, r4
    5180:	3102      	adds	r1, #2
    5182:	9801      	ldr	r0, [sp, #4]
    5184:	f7ff fe96 	bl	4eb4 <flash_area_read>
    if (rc != 0) {
    5188:	4603      	mov	r3, r0
    518a:	2800      	cmp	r0, #0
    518c:	d0ea      	beq.n	5164 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
    518e:	f06f 0304 	mvn.w	r3, #4
    5192:	e7e7      	b.n	5164 <mfg_read_tlv_body+0x14>

00005194 <mfg_seek_next>:
{
    5194:	b510      	push	{r4, lr}
    5196:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
    5198:	4620      	mov	r0, r4
    519a:	f7ff ff0b 	bl	4fb4 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
    519e:	f110 0f06 	cmn.w	r0, #6
    51a2:	d0f9      	beq.n	5198 <mfg_seek_next+0x4>
}
    51a4:	bd10      	pop	{r4, pc}

000051a6 <mfg_seek_next_with_type>:
{
    51a6:	b538      	push	{r3, r4, r5, lr}
    51a8:	4604      	mov	r4, r0
    51aa:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
    51ac:	4620      	mov	r0, r4
    51ae:	f7ff fff1 	bl	5194 <mfg_seek_next>
        if (rc != 0) {
    51b2:	4602      	mov	r2, r0
    51b4:	b910      	cbnz	r0, 51bc <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
    51b6:	7823      	ldrb	r3, [r4, #0]
    51b8:	42ab      	cmp	r3, r5
    51ba:	d1f7      	bne.n	51ac <mfg_seek_next_with_type+0x6>
}
    51bc:	4610      	mov	r0, r2
    51be:	bd38      	pop	{r3, r4, r5, pc}

000051c0 <mfg_read_tlv_flash_area>:
{
    51c0:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
    51c2:	220a      	movs	r2, #10
    51c4:	f7ff ffc4 	bl	5150 <mfg_read_tlv_body>
}
    51c8:	bd08      	pop	{r3, pc}

000051ca <mfg_read_tlv_mmr_ref>:
{
    51ca:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
    51cc:	2201      	movs	r2, #1
    51ce:	f7ff ffbf 	bl	5150 <mfg_read_tlv_body>
}
    51d2:	bd08      	pop	{r3, pc}

000051d4 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
    51d4:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
    51d6:	4b07      	ldr	r3, [pc, #28]	; (51f4 <mfg_init+0x20>)
    51d8:	781b      	ldrb	r3, [r3, #0]
    51da:	b103      	cbz	r3, 51de <mfg_init+0xa>

    return;

err:
    MFG_LOG_ERROR("failed to read MMRs: rc=%d", rc);
}
    51dc:	bd08      	pop	{r3, pc}
    mfg_initialized = true;
    51de:	4b05      	ldr	r3, [pc, #20]	; (51f4 <mfg_init+0x20>)
    51e0:	2201      	movs	r2, #1
    51e2:	701a      	strb	r2, [r3, #0]
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
    51e4:	2000      	movs	r0, #0
    51e6:	f7ff ff67 	bl	50b8 <mfg_read_next_mmr>
    if (rc != 0) {
    51ea:	2800      	cmp	r0, #0
    51ec:	d1f6      	bne.n	51dc <mfg_init+0x8>
    rc = mfg_read_mmr_refs();
    51ee:	f000 f80b 	bl	5208 <mfg_read_mmr_refs>
err:
    51f2:	e7f3      	b.n	51dc <mfg_init+0x8>
    51f4:	20006404 	.word	0x20006404

000051f8 <mfg_open>:
{
    51f8:	b510      	push	{r4, lr}
    51fa:	4604      	mov	r4, r0
    mfg_init();
    51fc:	f7ff ffea 	bl	51d4 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
    5200:	2300      	movs	r3, #0
    5202:	6023      	str	r3, [r4, #0]
    5204:	6063      	str	r3, [r4, #4]
}
    5206:	bd10      	pop	{r4, pc}

00005208 <mfg_read_mmr_refs>:
{
    5208:	b500      	push	{lr}
    520a:	b085      	sub	sp, #20
    mfg_open(&reader);
    520c:	a801      	add	r0, sp, #4
    520e:	f7ff fff3 	bl	51f8 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
    5212:	2104      	movs	r1, #4
    5214:	eb0d 0001 	add.w	r0, sp, r1
    5218:	f7ff ffc5 	bl	51a6 <mfg_seek_next_with_type>
    521c:	4603      	mov	r3, r0
        switch (rc) {
    521e:	f110 0f0f 	cmn.w	r0, #15
    5222:	d004      	beq.n	522e <mfg_read_mmr_refs+0x26>
    5224:	b128      	cbz	r0, 5232 <mfg_read_mmr_refs+0x2a>
}
    5226:	4618      	mov	r0, r3
    5228:	b005      	add	sp, #20
    522a:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
    522e:	2300      	movs	r3, #0
    5230:	e7f9      	b.n	5226 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
    5232:	a903      	add	r1, sp, #12
    5234:	a801      	add	r0, sp, #4
    5236:	f7ff ffc8 	bl	51ca <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
    523a:	4603      	mov	r3, r0
    523c:	2800      	cmp	r0, #0
    523e:	d1f2      	bne.n	5226 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
    5240:	f89d 000c 	ldrb.w	r0, [sp, #12]
    5244:	f7ff ff38 	bl	50b8 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
    5248:	4603      	mov	r3, r0
    524a:	2800      	cmp	r0, #0
    524c:	d0e1      	beq.n	5212 <mfg_read_mmr_refs+0xa>
    524e:	f110 0f0b 	cmn.w	r0, #11
    5252:	d0de      	beq.n	5212 <mfg_read_mmr_refs+0xa>
    5254:	e7e7      	b.n	5226 <mfg_read_mmr_refs+0x1e>
	...

00005258 <__aeabi_uldivmod>:
    5258:	b953      	cbnz	r3, 5270 <__aeabi_uldivmod+0x18>
    525a:	b94a      	cbnz	r2, 5270 <__aeabi_uldivmod+0x18>
    525c:	2900      	cmp	r1, #0
    525e:	bf08      	it	eq
    5260:	2800      	cmpeq	r0, #0
    5262:	bf1c      	itt	ne
    5264:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    5268:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    526c:	f000 b972 	b.w	5554 <__aeabi_idiv0>
    5270:	f1ad 0c08 	sub.w	ip, sp, #8
    5274:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    5278:	f000 f806 	bl	5288 <__udivmoddi4>
    527c:	f8dd e004 	ldr.w	lr, [sp, #4]
    5280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5284:	b004      	add	sp, #16
    5286:	4770      	bx	lr

00005288 <__udivmoddi4>:
    5288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    528c:	9e08      	ldr	r6, [sp, #32]
    528e:	4604      	mov	r4, r0
    5290:	4688      	mov	r8, r1
    5292:	2b00      	cmp	r3, #0
    5294:	d14b      	bne.n	532e <__udivmoddi4+0xa6>
    5296:	428a      	cmp	r2, r1
    5298:	4615      	mov	r5, r2
    529a:	d967      	bls.n	536c <__udivmoddi4+0xe4>
    529c:	fab2 f282 	clz	r2, r2
    52a0:	b14a      	cbz	r2, 52b6 <__udivmoddi4+0x2e>
    52a2:	f1c2 0720 	rsb	r7, r2, #32
    52a6:	fa01 f302 	lsl.w	r3, r1, r2
    52aa:	fa20 f707 	lsr.w	r7, r0, r7
    52ae:	4095      	lsls	r5, r2
    52b0:	ea47 0803 	orr.w	r8, r7, r3
    52b4:	4094      	lsls	r4, r2
    52b6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    52ba:	0c23      	lsrs	r3, r4, #16
    52bc:	fbb8 f7fe 	udiv	r7, r8, lr
    52c0:	fa1f fc85 	uxth.w	ip, r5
    52c4:	fb0e 8817 	mls	r8, lr, r7, r8
    52c8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    52cc:	fb07 f10c 	mul.w	r1, r7, ip
    52d0:	4299      	cmp	r1, r3
    52d2:	d909      	bls.n	52e8 <__udivmoddi4+0x60>
    52d4:	18eb      	adds	r3, r5, r3
    52d6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    52da:	f080 811b 	bcs.w	5514 <__udivmoddi4+0x28c>
    52de:	4299      	cmp	r1, r3
    52e0:	f240 8118 	bls.w	5514 <__udivmoddi4+0x28c>
    52e4:	3f02      	subs	r7, #2
    52e6:	442b      	add	r3, r5
    52e8:	1a5b      	subs	r3, r3, r1
    52ea:	b2a4      	uxth	r4, r4
    52ec:	fbb3 f0fe 	udiv	r0, r3, lr
    52f0:	fb0e 3310 	mls	r3, lr, r0, r3
    52f4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    52f8:	fb00 fc0c 	mul.w	ip, r0, ip
    52fc:	45a4      	cmp	ip, r4
    52fe:	d909      	bls.n	5314 <__udivmoddi4+0x8c>
    5300:	192c      	adds	r4, r5, r4
    5302:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    5306:	f080 8107 	bcs.w	5518 <__udivmoddi4+0x290>
    530a:	45a4      	cmp	ip, r4
    530c:	f240 8104 	bls.w	5518 <__udivmoddi4+0x290>
    5310:	3802      	subs	r0, #2
    5312:	442c      	add	r4, r5
    5314:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    5318:	eba4 040c 	sub.w	r4, r4, ip
    531c:	2700      	movs	r7, #0
    531e:	b11e      	cbz	r6, 5328 <__udivmoddi4+0xa0>
    5320:	40d4      	lsrs	r4, r2
    5322:	2300      	movs	r3, #0
    5324:	e9c6 4300 	strd	r4, r3, [r6]
    5328:	4639      	mov	r1, r7
    532a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    532e:	428b      	cmp	r3, r1
    5330:	d909      	bls.n	5346 <__udivmoddi4+0xbe>
    5332:	2e00      	cmp	r6, #0
    5334:	f000 80eb 	beq.w	550e <__udivmoddi4+0x286>
    5338:	2700      	movs	r7, #0
    533a:	e9c6 0100 	strd	r0, r1, [r6]
    533e:	4638      	mov	r0, r7
    5340:	4639      	mov	r1, r7
    5342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5346:	fab3 f783 	clz	r7, r3
    534a:	2f00      	cmp	r7, #0
    534c:	d147      	bne.n	53de <__udivmoddi4+0x156>
    534e:	428b      	cmp	r3, r1
    5350:	d302      	bcc.n	5358 <__udivmoddi4+0xd0>
    5352:	4282      	cmp	r2, r0
    5354:	f200 80fa 	bhi.w	554c <__udivmoddi4+0x2c4>
    5358:	1a84      	subs	r4, r0, r2
    535a:	eb61 0303 	sbc.w	r3, r1, r3
    535e:	2001      	movs	r0, #1
    5360:	4698      	mov	r8, r3
    5362:	2e00      	cmp	r6, #0
    5364:	d0e0      	beq.n	5328 <__udivmoddi4+0xa0>
    5366:	e9c6 4800 	strd	r4, r8, [r6]
    536a:	e7dd      	b.n	5328 <__udivmoddi4+0xa0>
    536c:	b902      	cbnz	r2, 5370 <__udivmoddi4+0xe8>
    536e:	deff      	udf	#255	; 0xff
    5370:	fab2 f282 	clz	r2, r2
    5374:	2a00      	cmp	r2, #0
    5376:	f040 808f 	bne.w	5498 <__udivmoddi4+0x210>
    537a:	1b49      	subs	r1, r1, r5
    537c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    5380:	fa1f f885 	uxth.w	r8, r5
    5384:	2701      	movs	r7, #1
    5386:	fbb1 fcfe 	udiv	ip, r1, lr
    538a:	0c23      	lsrs	r3, r4, #16
    538c:	fb0e 111c 	mls	r1, lr, ip, r1
    5390:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    5394:	fb08 f10c 	mul.w	r1, r8, ip
    5398:	4299      	cmp	r1, r3
    539a:	d907      	bls.n	53ac <__udivmoddi4+0x124>
    539c:	18eb      	adds	r3, r5, r3
    539e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    53a2:	d202      	bcs.n	53aa <__udivmoddi4+0x122>
    53a4:	4299      	cmp	r1, r3
    53a6:	f200 80cd 	bhi.w	5544 <__udivmoddi4+0x2bc>
    53aa:	4684      	mov	ip, r0
    53ac:	1a59      	subs	r1, r3, r1
    53ae:	b2a3      	uxth	r3, r4
    53b0:	fbb1 f0fe 	udiv	r0, r1, lr
    53b4:	fb0e 1410 	mls	r4, lr, r0, r1
    53b8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    53bc:	fb08 f800 	mul.w	r8, r8, r0
    53c0:	45a0      	cmp	r8, r4
    53c2:	d907      	bls.n	53d4 <__udivmoddi4+0x14c>
    53c4:	192c      	adds	r4, r5, r4
    53c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    53ca:	d202      	bcs.n	53d2 <__udivmoddi4+0x14a>
    53cc:	45a0      	cmp	r8, r4
    53ce:	f200 80b6 	bhi.w	553e <__udivmoddi4+0x2b6>
    53d2:	4618      	mov	r0, r3
    53d4:	eba4 0408 	sub.w	r4, r4, r8
    53d8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    53dc:	e79f      	b.n	531e <__udivmoddi4+0x96>
    53de:	f1c7 0c20 	rsb	ip, r7, #32
    53e2:	40bb      	lsls	r3, r7
    53e4:	fa22 fe0c 	lsr.w	lr, r2, ip
    53e8:	ea4e 0e03 	orr.w	lr, lr, r3
    53ec:	fa01 f407 	lsl.w	r4, r1, r7
    53f0:	fa20 f50c 	lsr.w	r5, r0, ip
    53f4:	fa21 f30c 	lsr.w	r3, r1, ip
    53f8:	ea4f 481e 	mov.w	r8, lr, lsr #16
    53fc:	4325      	orrs	r5, r4
    53fe:	fbb3 f9f8 	udiv	r9, r3, r8
    5402:	0c2c      	lsrs	r4, r5, #16
    5404:	fb08 3319 	mls	r3, r8, r9, r3
    5408:	fa1f fa8e 	uxth.w	sl, lr
    540c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    5410:	fb09 f40a 	mul.w	r4, r9, sl
    5414:	429c      	cmp	r4, r3
    5416:	fa02 f207 	lsl.w	r2, r2, r7
    541a:	fa00 f107 	lsl.w	r1, r0, r7
    541e:	d90b      	bls.n	5438 <__udivmoddi4+0x1b0>
    5420:	eb1e 0303 	adds.w	r3, lr, r3
    5424:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    5428:	f080 8087 	bcs.w	553a <__udivmoddi4+0x2b2>
    542c:	429c      	cmp	r4, r3
    542e:	f240 8084 	bls.w	553a <__udivmoddi4+0x2b2>
    5432:	f1a9 0902 	sub.w	r9, r9, #2
    5436:	4473      	add	r3, lr
    5438:	1b1b      	subs	r3, r3, r4
    543a:	b2ad      	uxth	r5, r5
    543c:	fbb3 f0f8 	udiv	r0, r3, r8
    5440:	fb08 3310 	mls	r3, r8, r0, r3
    5444:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    5448:	fb00 fa0a 	mul.w	sl, r0, sl
    544c:	45a2      	cmp	sl, r4
    544e:	d908      	bls.n	5462 <__udivmoddi4+0x1da>
    5450:	eb1e 0404 	adds.w	r4, lr, r4
    5454:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    5458:	d26b      	bcs.n	5532 <__udivmoddi4+0x2aa>
    545a:	45a2      	cmp	sl, r4
    545c:	d969      	bls.n	5532 <__udivmoddi4+0x2aa>
    545e:	3802      	subs	r0, #2
    5460:	4474      	add	r4, lr
    5462:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    5466:	fba0 8902 	umull	r8, r9, r0, r2
    546a:	eba4 040a 	sub.w	r4, r4, sl
    546e:	454c      	cmp	r4, r9
    5470:	46c2      	mov	sl, r8
    5472:	464b      	mov	r3, r9
    5474:	d354      	bcc.n	5520 <__udivmoddi4+0x298>
    5476:	d051      	beq.n	551c <__udivmoddi4+0x294>
    5478:	2e00      	cmp	r6, #0
    547a:	d069      	beq.n	5550 <__udivmoddi4+0x2c8>
    547c:	ebb1 050a 	subs.w	r5, r1, sl
    5480:	eb64 0403 	sbc.w	r4, r4, r3
    5484:	fa04 fc0c 	lsl.w	ip, r4, ip
    5488:	40fd      	lsrs	r5, r7
    548a:	40fc      	lsrs	r4, r7
    548c:	ea4c 0505 	orr.w	r5, ip, r5
    5490:	e9c6 5400 	strd	r5, r4, [r6]
    5494:	2700      	movs	r7, #0
    5496:	e747      	b.n	5328 <__udivmoddi4+0xa0>
    5498:	f1c2 0320 	rsb	r3, r2, #32
    549c:	fa20 f703 	lsr.w	r7, r0, r3
    54a0:	4095      	lsls	r5, r2
    54a2:	fa01 f002 	lsl.w	r0, r1, r2
    54a6:	fa21 f303 	lsr.w	r3, r1, r3
    54aa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    54ae:	4338      	orrs	r0, r7
    54b0:	0c01      	lsrs	r1, r0, #16
    54b2:	fbb3 f7fe 	udiv	r7, r3, lr
    54b6:	fa1f f885 	uxth.w	r8, r5
    54ba:	fb0e 3317 	mls	r3, lr, r7, r3
    54be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    54c2:	fb07 f308 	mul.w	r3, r7, r8
    54c6:	428b      	cmp	r3, r1
    54c8:	fa04 f402 	lsl.w	r4, r4, r2
    54cc:	d907      	bls.n	54de <__udivmoddi4+0x256>
    54ce:	1869      	adds	r1, r5, r1
    54d0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    54d4:	d22f      	bcs.n	5536 <__udivmoddi4+0x2ae>
    54d6:	428b      	cmp	r3, r1
    54d8:	d92d      	bls.n	5536 <__udivmoddi4+0x2ae>
    54da:	3f02      	subs	r7, #2
    54dc:	4429      	add	r1, r5
    54de:	1acb      	subs	r3, r1, r3
    54e0:	b281      	uxth	r1, r0
    54e2:	fbb3 f0fe 	udiv	r0, r3, lr
    54e6:	fb0e 3310 	mls	r3, lr, r0, r3
    54ea:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    54ee:	fb00 f308 	mul.w	r3, r0, r8
    54f2:	428b      	cmp	r3, r1
    54f4:	d907      	bls.n	5506 <__udivmoddi4+0x27e>
    54f6:	1869      	adds	r1, r5, r1
    54f8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    54fc:	d217      	bcs.n	552e <__udivmoddi4+0x2a6>
    54fe:	428b      	cmp	r3, r1
    5500:	d915      	bls.n	552e <__udivmoddi4+0x2a6>
    5502:	3802      	subs	r0, #2
    5504:	4429      	add	r1, r5
    5506:	1ac9      	subs	r1, r1, r3
    5508:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    550c:	e73b      	b.n	5386 <__udivmoddi4+0xfe>
    550e:	4637      	mov	r7, r6
    5510:	4630      	mov	r0, r6
    5512:	e709      	b.n	5328 <__udivmoddi4+0xa0>
    5514:	4607      	mov	r7, r0
    5516:	e6e7      	b.n	52e8 <__udivmoddi4+0x60>
    5518:	4618      	mov	r0, r3
    551a:	e6fb      	b.n	5314 <__udivmoddi4+0x8c>
    551c:	4541      	cmp	r1, r8
    551e:	d2ab      	bcs.n	5478 <__udivmoddi4+0x1f0>
    5520:	ebb8 0a02 	subs.w	sl, r8, r2
    5524:	eb69 020e 	sbc.w	r2, r9, lr
    5528:	3801      	subs	r0, #1
    552a:	4613      	mov	r3, r2
    552c:	e7a4      	b.n	5478 <__udivmoddi4+0x1f0>
    552e:	4660      	mov	r0, ip
    5530:	e7e9      	b.n	5506 <__udivmoddi4+0x27e>
    5532:	4618      	mov	r0, r3
    5534:	e795      	b.n	5462 <__udivmoddi4+0x1da>
    5536:	4667      	mov	r7, ip
    5538:	e7d1      	b.n	54de <__udivmoddi4+0x256>
    553a:	4681      	mov	r9, r0
    553c:	e77c      	b.n	5438 <__udivmoddi4+0x1b0>
    553e:	3802      	subs	r0, #2
    5540:	442c      	add	r4, r5
    5542:	e747      	b.n	53d4 <__udivmoddi4+0x14c>
    5544:	f1ac 0c02 	sub.w	ip, ip, #2
    5548:	442b      	add	r3, r5
    554a:	e72f      	b.n	53ac <__udivmoddi4+0x124>
    554c:	4638      	mov	r0, r7
    554e:	e708      	b.n	5362 <__udivmoddi4+0xda>
    5550:	4637      	mov	r7, r6
    5552:	e6e9      	b.n	5328 <__udivmoddi4+0xa0>

00005554 <__aeabi_idiv0>:
    5554:	4770      	bx	lr
    5556:	bf00      	nop

00005558 <flash_devs>:
    5558:	55ac 0000 00e8 2000                         .U..... 

00005560 <spiflash_characteristics>:
    5560:	7530 0000 1a80 0006 d4c0 0001 3500 000c     0u...........5..
    5570:	49f0 0002 4240 000f c6c0 002d 9680 0098     .I..@B....-.....
    5580:	02bc 0000 0bb8 0000 0014 0000 0032 0000     ............2...

00005590 <spiflash_flash_funcs>:
    5590:	080f 0000 0899 0000 0a13 0000 06c5 0000     ................
    55a0:	0000 0000 0b59 0000 0ae5 0000               ....Y.......

000055ac <nrf52k_flash_dev>:
    55ac:	55c4 0000 0000 0000 0000 0008 0080 0000     .U..............
    55bc:	0001 0000 00ff 0000                         ........

000055c4 <nrf52k_flash_funcs>:
    55c4:	0d15 0000 0c45 0000 0bc5 0000 0c1d 0000     ....E...........
    55d4:	0000 0000 0c19 0000 0000 0000               ............

000055e0 <nrf52_hal_spis>:
    55e0:	0160 2000 0000 0000 0000 0000 0000 0000     `.. ............

000055f0 <os_bsp_spi0m_cfg>:
    55f0:	0302 0004                                   ....

000055f4 <nrf52_hal_timers>:
    55f4:	0188 2000 0000 0000 0000 0000 0000 0000     ... ............
	...
    560c:	7341 6573 7472 4020 3020 2578 0a78 0000     Assert @ 0x%x...
    561c:	7341 6573 7472 4020 3020 2578 2078 202d     Assert @ 0x%x - 
    562c:	7325 253a 0a64 0000 6e55 6168 646e 656c     %s:%d...Unhandle
    563c:	2064 6e69 6574 7272 7075 2074 2528 646c     d interrupt (%ld
    564c:	2c29 6520 6378 7065 6974 6e6f 7320 2070     ), exception sp 
    565c:	7830 3025 6c38 0a78 0000 0000 7220 3a30     0x%08lx..... r0:
    566c:	7830 3025 6c38 2078 7220 3a31 7830 3025     0x%08lx  r1:0x%0
    567c:	6c38 2078 7220 3a32 7830 3025 6c38 2078     8lx  r2:0x%08lx 
    568c:	7220 3a33 7830 3025 6c38 0a78 0000 0000      r3:0x%08lx.....
    569c:	7220 3a34 7830 3025 6c38 2078 7220 3a35      r4:0x%08lx  r5:
    56ac:	7830 3025 6c38 2078 7220 3a36 7830 3025     0x%08lx  r6:0x%0
    56bc:	6c38 2078 7220 3a37 7830 3025 6c38 0a78     8lx  r7:0x%08lx.
    56cc:	0000 0000 7220 3a38 7830 3025 6c38 2078     .... r8:0x%08lx 
    56dc:	7220 3a39 7830 3025 6c38 2078 3172 3a30      r9:0x%08lx r10:
    56ec:	7830 3025 6c38 2078 3172 3a31 7830 3025     0x%08lx r11:0x%0
    56fc:	6c38 0a78 0000 0000 3172 3a32 7830 3025     8lx.....r12:0x%0
    570c:	6c38 2078 6c20 3a72 7830 3025 6c38 2078     8lx  lr:0x%08lx 
    571c:	7020 3a63 7830 3025 6c38 2078 7370 3a72      pc:0x%08lx psr:
    572c:	7830 3025 6c38 0a78 0000 0000 4349 5253     0x%08lx.....ICSR
    573c:	303a 2578 3830 786c 4820 5346 3a52 7830     :0x%08lx HFSR:0x
    574c:	3025 6c38 2078 4643 5253 303a 2578 3830     %08lx CFSR:0x%08
    575c:	786c 000a 4642 5241 303a 2578 3830 786c     lx..BFAR:0x%08lx
    576c:	4d20 464d 5241 303a 2578 3830 786c 000a      MMFAR:0x%08lx..
    577c:	736d 7379 315f 0000 6f42 746f 6f6c 6461     msys_1..Bootload
    578c:	7265 6420 6e6f 0a65 0000 0000 7453 7261     er done.....Star
    579c:	6974 676e 4220 6f6f 6c74 616f 6564 2e72     ting Bootloader.
    57ac:	2e2e 000a 6843 6365 206b 7562 7474 6e6f     ....Check button
    57bc:	203a 6425 000a 0000 6157 7469 6e69 2067     : %d....Waiting 
    57cc:	2035 6573 6f63 646e 2073 6f66 2072 7562     5 seconds for bu
    57dc:	7474 6e6f 2e2e 0a2e 0000 0000 6c46 7361     tton........Flas
    57ec:	6968 676e 6120 646e 7220 7365 7465 6974     hing and resetti
    57fc:	676e 2e2e 0a2e 0000                         ng......

00005804 <backlights>:
    5804:	160e 0017                                   ....

00005808 <fast_pulse>:
    5808:	0101 0000 0101 0202 0202 0202               ............

00005814 <faster_pulse>:
    5814:	0001 0201 0202 0000                         ........

0000581c <fastest_pulse>:
    581c:	0200 0002                                   ....

00005820 <slow_pulse>:
    5820:	0101 0001 0000 0101 0201 0202 0202 0202     ................
    5830:	0202 0000                                   ....

00005834 <slower_pulse>:
    5834:	0101 0101 0101 0000 0000 0000 0101 0101     ................
    5844:	0101 0202 0202 0202 0202 0202 0202 0202     ................
    5854:	0202 0202                                   ....

00005858 <COLMOD_PARA.8090>:
    5858:	0005 0000                                   ....

0000585c <FRMCTR1_PARA.8078>:
    585c:	2c01 002d                                   .,-.

00005860 <FRMCTR2_PARA.8079>:
    5860:	2c01 002d                                   .,-.

00005864 <FRMCTR3_PARA.8080>:
    5864:	2c01 012d 2d2c 0000                         .,-.,-..

0000586c <INVCTR_PARA.8081>:
    586c:	0007 0000                                   ....

00005870 <MADCTL1_PARA.8088>:
    5870:	0000 0000                                   ....

00005874 <PWCTR1_PARA.8082>:
    5874:	02a2 0084                                   ....

00005878 <PWCTR2_PARA.8083>:
    5878:	00c5 0000                                   ....

0000587c <PWCTR3_PARA.8084>:
    587c:	000a 0000                                   ....

00005880 <PWCTR4_PARA.8085>:
    5880:	2a8a 0000                                   .*..

00005884 <PWCTR5_PARA.8086>:
    5884:	ee8a 0000                                   ....

00005888 <VMCTR1_PARA.8087>:
    5888:	000e 0000 6944 7073 616c 6979 676e 6920     ....Displaying i
    5898:	616d 6567 2e2e 0a2e 0000 0000 6d49 6761     mage........Imag
    58a8:	2065 6964 7073 616c 6579 0a64 0000 0000     e displayed.....
    58b8:	3025 6c36 2075 0000 0103 0000               %06lu ......

000058c4 <boot_img_magic>:
    58c4:	c277 f395 d260 7fef 5235 0f50 b62c 8079     w...`...5RP.,.y.

000058d4 <boot_swap_tables>:
    58d4:	0104 0304 0204 0104 0104 0304 0301 0403     ................
    58e4:	0401 0000 6570 6d72 0000 0000 6574 7473     ....perm....test
    58f4:	0000 0000 5542 3b47 6320 6e61 7427 6820     ....BUG; can't h
    5904:	7061 6570 006e 0000 6572 6576 7472 0000     appen...revert..
    5914:	495b 464e 205d 7753 7061 7420 7079 3a65     [INF] Swap type:
    5924:	2520 0a73 0000 0000 495b 464e 205d 7753      %s.....[INF] Sw
    5934:	7061 7420 7079 3a65 6e20 6e6f 0065 0000     ap type: none...
    5944:	455b 5252 205d 6170 696e 2163 0000 0000     [ERR] panic!....
    5954:	575b 4e52 205d 6146 6c69 6465 7220 6165     [WRN] Failed rea
    5964:	6964 676e 7320 6365 6f74 7372 203b 4f42     ding sectors; BO
    5974:	544f 4d5f 5841 495f 474d 535f 4345 4f54     OT_MAX_IMG_SECTO
    5984:	5352 253d 2064 202d 6f74 206f 6d73 6c61     RS=%d - too smal
    5994:	3f6c 000a 575b 4e52 205d 6146 6c69 6465     l?..[WRN] Failed
    59a4:	7220 6165 6964 676e 6920 616d 6567 6820      reading image h
    59b4:	6165 6564 7372 203b 6d49 6761 3d65 7525     eaders; Image=%u
    59c4:	000a 0000 575b 4e52 205d 6146 6c69 6465     ....[WRN] Failed
    59d4:	7220 6165 6964 676e 6220 6f6f 2074 7473      reading boot st
    59e4:	7461 7375 203b 6d49 6761 3d65 7525 000a     atus; Image=%u..
    59f4:	7270 6d69 7261 0079 6573 6f63 646e 7261     primary.secondar
    5a04:	0079 0000 455b 5252 205d 6d49 6761 2065     y...[ERR] Image 
    5a14:	6e69 7420 6568 2520 2073 6c73 746f 6920     in the %s slot i
    5a24:	2073 6f6e 2074 6176 696c 2164 000a 0000     s not valid!....
    5a34:	455b 5252 205d 6162 2064 6d69 6761 2065     [ERR] bad image 
    5a44:	616d 6967 2063 7830 6c25 3b78 4920 616d     magic 0x%lx; Ima
    5a54:	6567 253d 0a75 0000 575b 4e52 205d 6143     ge=%u...[WRN] Ca
    5a64:	6e6e 746f 7520 6770 6172 6564 203a 6f6d     nnot upgrade: mo
    5a74:	6572 7320 6365 6f74 7372 7420 6168 206e     re sectors than 
    5a84:	6c61 6f6c 6577 0064 575b 4e52 205d 6143     allowed.[WRN] Ca
    5a94:	6e6e 746f 7520 6770 6172 6564 203a 6c73     nnot upgrade: sl
    5aa4:	746f 2073 6168 6576 6e20 6e6f 632d 6d6f     ots have non-com
    5ab4:	6170 6974 6c62 2065 6573 7463 726f 0073     patible sectors.
    5ac4:	575b 4e52 205d 6143 6e6e 746f 7520 6770     [WRN] Cannot upg
    5ad4:	6172 6564 203a 6f6e 2074 6c61 206c 6573     rade: not all se
    5ae4:	7463 726f 2073 6966 2074 6e69 6973 6564     ctors fit inside
    5af4:	7320 7263 7461 6863 0000 0000 575b 4e52      scratch....[WRN
    5b04:	205d 6143 6e6e 746f 7520 6770 6172 6564     ] Cannot upgrade
    5b14:	203a 6c73 746f 2073 7261 2065 6f6e 2074     : slots are not 
    5b24:	6f63 706d 7461 6269 656c 0000               compatible..

00005b30 <boot_status_tables>:
    5b30:	0501 0001 0501 0203 0104 0104 0403 0203     ................
    5b40:	455b 5252 205d 6544 6574 7463 6465 6920     [ERR] Detected i
    5b50:	636e 6e6f 6973 7473 6e65 2074 7473 7461     nconsistent stat
    5b60:	7375 0021 6162 0064 6f67 646f 0000 0000     us!.bad.good....
    5b70:	6e75 6573 0074 0000 6373 6172 6374 0068     unset...scratch.
    5b80:	6f6e 656e 0000 0000 7270 6d69 7261 2079     none....primary 
    5b90:	6c73 746f 0000 0000 7250 6d69 7261 2079     slot....Primary 
    5ba0:	6d69 6761 0065 0000 495b 464e 205d 7325     image...[INF] %s
    5bb0:	203a 616d 6967 3d63 7325 202c 7773 7061     : magic=%s, swap
    5bc0:	745f 7079 3d65 7830 7825 202c 6f63 7970     _type=0x%x, copy
    5bd0:	645f 6e6f 3d65 7830 7825 202c 6d69 6761     _done=0x%x, imag
    5be0:	5f65 6b6f 303d 2578 0a78 0000 6353 6172     e_ok=0x%x...Scra
    5bf0:	6374 0068 495b 464e 205d 6f42 746f 7320     tch.[INF] Boot s
    5c00:	756f 6372 3a65 2520 0a73 0000 495b 464e     ource: %s...[INF
    5c10:	205d 6f42 746f 7320 756f 6372 3a65 6e20     ] Boot source: n
    5c20:	6e6f 0065                                   one.

00005c24 <K>:
    5c24:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
    5c34:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
    5c44:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
    5c54:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
    5c64:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
    5c74:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
    5c84:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
    5c94:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
    5ca4:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
    5cb4:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
    5cc4:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
    5cd4:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
    5ce4:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
    5cf4:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
    5d04:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
    5d14:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

00005d24 <stdout>:
    5d24:	0154 2000                                   T.. 

00005d28 <sysflash_map_dflt>:
	...
    5d30:	6000 0000 0001 0000 8000 0000 4000 0007     .`...........@..
    5d40:	0102 0000 0000 0004 4000 0007 0003 0000     .........@......
    5d50:	c000 0007 1000 0000 0010 0000 6000 0000     .............`..
    5d60:	2000 0000 0111 0000 4000 000b c000 0034     . .......@....4.

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  23944	    136	  25500	  49580	   c1ac	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
