
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000000d9

Program Header:
0x70000001 off    0x00015d18 vaddr 0x00005d18 paddr 0x00005d18 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00005d30 memsz 0x00005d30 flags r-x
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x00005d30 align 2**16
         filesz 0x00000088 memsz 0x0000634c flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              00005d18  00000000  00000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab         00000000  00005d18  00005d18  00020160  2**0  CONTENTS
  2 .ARM.exidx         00000018  00005d18  00005d18  00015d18  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  4 .rtt               00000000  200000d8  200000d8  00020160  2**0  CONTENTS
  5 .data              00000088  200000d8  00005d30  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bssnz             00000000  20000160  20000160  00020160  2**0  CONTENTS
  7 .bss               000062c4  20000160  00005db8  00020160  2**2  ALLOC
  8 .stack_dummy       000001b0  20006428  20006428  00020160  2**3  CONTENTS, READONLY
  9 .ARM.attributes    0000002f  00000000  00000000  00020310  2**0  CONTENTS, READONLY
 10 .comment           0000007f  00000000  00000000  0002033f  2**0  CONTENTS, READONLY
 11 .svc_table         00000004  00000000  00000000  000203be  2**0  CONTENTS, READONLY
 12 .debug_line        00013415  00000000  00000000  000203c2  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_info        0002c215  00000000  00000000  000337d7  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev      00007bd1  00000000  00000000  0005f9ec  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges     00001580  00000000  00000000  000675c0  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_str         0000643b  00000000  00000000  00068b40  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         0000fff2  00000000  00000000  0006ef7b  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges      00001400  00000000  00000000  0007ef6d  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame       000037a0  00000000  00000000  00080370  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00005d18 l    d  .ARM.extab	00000000 .ARM.extab
00005d18 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000160 l    d  .bssnz	00000000 .bssnz
20000160 l    d  .bss	00000000 .bss
20006428 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000000e0 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
000001d4 l     F .text	0000003c errata_16
00000210 l     F .text	0000004c errata_31
0000025c l     F .text	0000003c errata_32
00000298 l     F .text	0000004c errata_36
000002e4 l     F .text	0000003c errata_37
00000320 l     F .text	0000003c errata_57
0000035c l     F .text	0000003c errata_66
00000398 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00005500 l     O .text	00000008 flash_devs
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 spiflash.c
00000694 l     F .text	00000014 hal_spiflash_sector_info
000006a8 l     F .text	0000002e spiflash_release_power_down_generic
000006d6 l     F .text	00000008 spiflash_delay_us
00000778 l     F .text	00000050 spiflash_wait_ready_till
000007de l     F .text	0000006a hal_spiflash_read
00000868 l     F .text	000000c8 hal_spiflash_write
00000930 l     F .text	00000078 spiflash_execute_erase
000009a8 l     F .text	0000002c spiflash_erase_cmd
000009e2 l     F .text	00000008 hal_spiflash_erase_sector
00000ab4 l     F .text	00000008 hal_spiflash_erase
00000b20 l     F .text	0000003e hal_spiflash_init
00005538 l     O .text	0000001c spiflash_flash_funcs
20000128 l     O .data	00000010 supported_chips
00005508 l     O .text	00000030 spiflash_characteristics
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000b64 l     F .text	00000028 nrf52k_flash_wait_ready
00000b8c l     F .text	00000054 nrf52k_flash_erase_sector
00000be0 l     F .text	00000004 nrf52k_flash_init
00000be4 l     F .text	00000020 nrf52k_flash_sector_info
00000c04 l     F .text	000000d0 nrf52k_flash_write
00000cd4 l     F .text	0000000e nrf52k_flash_read
0000556c l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 hal_spi.c
00000d9c l     F .text	0000006e nrf52_irqm_handler
00000e24 l     F .text	00000014 hal_spi_stop_transfer
00000e38 l     F .text	0000004a hal_spi_config_slave
00000e84 l     F .text	000000b8 hal_spi_init_master
00000f3c l     F .text	000000de hal_spi_config_master
00005588 l     O .text	00000010 nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
00001288 l     F .text	0000000e nrf52_hal_wdt_default_handler
00001298 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
00001330 l     F .text	00000034 nrf52_periph_create_timers
00001364 l     F .text	00000020 nrf52_periph_create_spi
00005598 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 hal_timer.c
00001390 l     F .text	0000000a nrf_read_timer_cntr
0000139c l     F .text	000000f4 nrf_timer_set_ocmp
00001490 l     F .text	0000000a nrf_timer_disable_ocmp
0000149a l     F .text	00000010 nrf_rtc_disable_ocmp
000014ac l     F .text	00000054 hal_timer_read_bsptimer
00001500 l     F .text	00000070 hal_timer_chk_queue
00001570 l     F .text	0000002c hal_timer_irq_handler
0000559c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00001844 l     F .text	00000026 os_dev_initialize
200001a4 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os.c
00000000 l    df *ABS*	00000000 os_eventq.c
00000000 l    df *ABS*	00000000 os_mempool.c
000018e8 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
000019fc l     F .text	00000010 os_msys_find_biggest_pool
00001a0c l     F .text	0000002c os_msys_find_pool
00001a84 l     F .text	00000044 os_msys_init_once
200001b8 l     O .bss	00004900 os_msys_1_data
20004ab8 l     O .bss	0000000c os_msys_1_mbuf_pool
20004ac4 l     O .bss	0000001c os_msys_1_mempool
20000138 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
00001b8c l       .text	00000000 SVC_User
00001baa l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 memcmp.c
00001daa l       .text	00000000 test1
00001d9e l       .text	00000000 loop1
00001db0 l       .text	00000000 res1
00001dcc l       .text	00000000 test2
00001dd4 l       .text	00000000 done
00001dc0 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
00001de0 l       .text	00000000 test1
00001ddc l       .text	00000000 loop1
00001dee l       .text	00000000 test2
00001dea l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 pinetime_boot.c
00001e3c l     F .text	00000050 relocate_vector_table
00000000 l    df *ABS*	00000000 blink.c
00001fcc l     F .text	00000028 init_backlight
00001ff4 l     F .text	00000028 delay_ms
0000201c l     F .text	00000050 blink_pattern
20000148 l     O .data	00000004 first_blink.7809
000057ac l     O .text	00000003 backlights
000057b0 l     O .text	0000000c fast_pulse
000057bc l     O .text	00000006 faster_pulse
000057c4 l     O .text	00000003 fastest_pulse
000057c8 l     O .text	00000012 slow_pulse
000057dc l     O .text	00000024 slower_pulse
00000000 l    df *ABS*	00000000 display.c
000020f4 l     F .text	0000001e hard_reset
00002114 l     F .text	00000024 delay_ms
00002138 l     F .text	0000003a transmit_spi
00002172 l     F .text	0000001a write_data
0000218c l     F .text	0000004e write_command
000021dc l     F .text	0000014c init_display
00002328 l     F .text	00000028 set_orientation
00002350 l     F .text	000000d0 set_window
20004ae8 l     O .bss	00000100 flash_buffer
00005800 l     O .text	00000001 COLMOD_PARA.8090
00005804 l     O .text	00000003 FRMCTR1_PARA.8078
00005808 l     O .text	00000003 FRMCTR2_PARA.8079
0000580c l     O .text	00000006 FRMCTR3_PARA.8080
00005814 l     O .text	00000001 INVCTR_PARA.8081
00005818 l     O .text	00000001 MADCTL1_PARA.8088
0000581c l     O .text	00000003 PWCTR1_PARA.8082
00005820 l     O .text	00000001 PWCTR2_PARA.8083
00005824 l     O .text	00000002 PWCTR3_PARA.8084
00005828 l     O .text	00000002 PWCTR4_PARA.8085
0000582c l     O .text	00000002 PWCTR5_PARA.8086
00005830 l     O .text	00000001 VMCTR1_PARA.8087
00000000 l    df *ABS*	00000000 console.c
20004be8 l     O .bss	00000010 avail_queue
20004bfc l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 semihosting_console.c
000025ac l     F .text	00000024 __semihost
000025d0 l     F .text	00000010 debugger_connected
000025e0 l     F .text	0000002e semihost_write
000026b4 l     F .text	0000001c semihosting_console_write_ch
20004c0c l     O .bss	00000004 semihost_mbuf
2000014c l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 ticks.c
20004c10 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
0000271c l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_boot-sysinit-app.c
00000000 l    df *ABS*	00000000 bootutil_misc.c
00002788 l     F .text	0000000c boot_flag_decode
00002794 l     F .text	00000018 boot_magic_decode
000027ac l     F .text	00000060 boot_find_status
0000280c l     F .text	0000006a boot_write_trailer
00002876 l     F .text	00000016 boot_write_trailer_flag
0000587c l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 loader.c
00002c1c l     F .text	00000040 boot_is_header_valid
00002c5c l     F .text	0000001c boot_write_sz
00002c78 l     F .text	0000009c boot_read_image_size
00002d14 l     F .text	00000054 boot_check_header_erased
00002d68 l     F .text	00000048 boot_initialize_area
00002db0 l     F .text	0000003a boot_read_sectors
00002dec l     F .text	00000034 boot_image_check
00002e20 l     F .text	00000098 boot_validate_slot
00002eb8 l     F .text	00000038 boot_validated_swap_type
00002ef0 l     F .text	00000036 boot_read_image_headers
00002f5c l     F .text	0000009c boot_swap_image
00002ff8 l     F .text	00000084 boot_complete_partial_swap
0000307c l     F .text	00000058 boot_perform_update
000030d4 l     F .text	000000e4 boot_prepare_image_for_update
20004c14 l     O .bss	0000006c boot_data
20004c80 l     O .bss	00000400 buf.7201
20005080 l     O .bss	00000600 primary_slot_sectors.7241
20005680 l     O .bss	00000600 scratch_sectors.7243
20005c80 l     O .bss	00000600 secondary_slot_sectors.7242
20006280 l     O .bss	00000100 tmpbuf.7134
00000000 l    df *ABS*	00000000 swap_misc.c
00000000 l    df *ABS*	00000000 swap_scratch.c
000035b2 l     F .text	0000002e boot_copy_sz
000035e0 l     F .text	00000332 boot_swap_sectors
00005ad8 l     O .text	00000010 boot_status_tables
00000000 l    df *ABS*	00000000 image_validate.c
00003cda l     F .text	0000007e bootutil_img_hash
00000000 l    df *ABS*	00000000 tlv.c
00000000 l    df *ABS*	00000000 flash_map_extended.c
00000000 l    df *ABS*	00000000 sha256.c
00005bcc l     O .text	00000100 K
00000000 l    df *ABS*	00000000 hal_flash.c
00004344 l     F .text	0000001e hal_flash_check_addr
20006380 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 mynewt.c
00004634 l     F .text	00000004 stdin_read
00004638 l     F .text	00000010 stdout_write
20000154 l     O .data	00000004 _stdin
20000158 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 tinyprintf.c
00004648 l     F .text	000000ec ui2a
00004734 l     F .text	00000020 i2a
00004754 l     F .text	00000030 a2d
00004784 l     F .text	00000036 a2i
000047ba l     F .text	0000002a putf
000047e4 l     F .text	0000011c putchw
00004900 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 flash_map.c
00004c3c l     F .text	0000003c flash_area_find_idx
00004c78 l     F .text	00000058 flash_map_area_overlaps
00004cd0 l     F .text	00000074 flash_map_add_new_dflt_areas
00004d44 l     F .text	00000078 flash_map_read_mfg
2000638c l     O .bss	00000078 mfg_areas.8029
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
00004f64 l     F .text	00000094 mfg_seek_next_aux
00004ff8 l     F .text	00000070 mfg_read_mmr
00005068 l     F .text	00000054 mfg_read_next_mmr
000050bc l     F .text	0000003c mfg_open_flash_area
000050f8 l     F .text	00000044 mfg_read_tlv_body
000051b0 l     F .text	0000004e mfg_read_mmr_refs
20006404 l     O .bss	00000001 mfg_initialized
20006408 l     O .bss	00000018 mfg_mmrs
20006420 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 nrf52_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00002660 g     F .text	00000054 console_buffer
20006428 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
00000144  w    F .text	00000002 TIMER2_IRQHandler
200001b0 g     O .bss	00000008 g_os_mempool_list
00000144  w    F .text	00000002 RTC0_IRQHandler
00002904 g     F .text	000000c0 boot_read_swap_state
000033c0 g     F .text	00000010 boot_go
200000d8 g       .data	00000000 __data_start__
00005554 g     O .text	00000018 nrf52k_flash_dev
00004c04 g     F .text	00000024 printf
00005ccc g     O .text	00000004 stdout
00000144  w    F .text	00000002 SWI0_EGU0_IRQHandler
00000d46 g     F .text	00000022 hal_gpio_write
00004058 g     F .text	00000128 mbedtls_internal_sha256_process
00001fa0 g     F .text	0000002c HardFault_Handler
000015ac g     F .text	00000060 hal_timer_init
0000514e g     F .text	0000001a mfg_seek_next_with_type
000045d6 g     F .text	0000000a hal_system_start
00002a50 g     F .text	00000044 boot_write_swap_info
0000438a g     F .text	00000010 hal_flash_align
00000144  w    F .text	00000002 SWI2_EGU2_IRQHandler
0000288c g     F .text	00000020 boot_magic_compatible_check
00001bda g     F .text	0000000c SysTick_Handler
00000144  w    F .text	00000002 GPIOTE_IRQHandler
0000159c g     F .text	00000010 nrf52_timer0_irq_handler
000019c4 g     F .text	00000026 os_memblock_put
00000144  w    F .text	00000002 PWM1_IRQHandler
00001ad8 g     F .text	00000028 os_msys_get_pkthdr
20006384 g     O .bss	00000004 flash_map
00004544 g     F .text	00000030 hal_flash_is_erased
00001bb0 g     F .text	0000002a PendSV_Handler
00000134  w    F .text	00000002 NMI_Handler
00005d30 g       .ARM.exidx	00000000 __exidx_end
00003fa6 g     F .text	0000000c mbedtls_sha256_init
00000000 g       .text	00000000 __isr_vector_start
00000164 g     F .text	00000024 hal_system_reset
20000148 g       .data	00000000 __aeabi_unwind_cpp_pr0
00000144  w    F .text	00000002 POWER_CLOCK_IRQHandler
00005d30 g       .ARM.exidx	00000000 __etext
00000144  w    F .text	00000002 RADIO_IRQHandler
00004e92 g     F .text	00000026 flash_area_write
20000160 g       .bssnz	00000000 __bssnz_start__
00000a26 g     F .text	0000008e spiflash_erase
00000144  w    F .text	00000002 PDM_IRQHandler
000033d0 g     F .text	00000084 swap_erase_trailer_sectors
00003280 g     F .text	00000140 context_boot_go
00003a20 g     F .text	00000100 boot_slots_compatible
00005168 g     F .text	0000000a mfg_read_tlv_flash_area
00002710 g     F .text	0000000c console_get_ticks
000019ec g     F .text	00000010 os_mempool_module_init
00000144  w    F .text	00000002 TEMP_IRQHandler
00000144  w    F .text	00000002 QDEC_IRQHandler
00000144  w    F .text	00000002 TIMER3_IRQHandler
00001898 g     F .text	0000000a timer_handler
00003c5c g     F .text	0000007e swap_run
0000270c g     F .text	00000004 semihosting_console_init
00001dda g     F .text	0000001a memcpy
000012b8 g     F .text	00000078 hal_watchdog_init
00001810 g     F .text	0000000c os_cputime_init
00003578 g     F .text	0000003a swap_set_image_ok
00005200 g     F .text	00000000 .hidden __aeabi_uldivmod
00004574 g     F .text	00000062 hal_flash_isempty
00004600 g     F .text	00000034 puts
00000000 g       *ABS*	00000000 _imghdr_size
20004bf8 g     O .bss	00000004 console_is_midline
00001c8a g     F .text	00000014 os_mbuf_free
200000e4 g     O .data	00000004 SystemCoreClock
00000158 g     F .text	0000000c hal_system_init
00000144  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
00004e6c g     F .text	00000026 flash_area_read
00001734 g     F .text	00000044 __assert_func
00000e0c g     F .text	00000018 nrf52_spi0_irq_handler
0000252c g     F .text	00000038 console_pkg_init
0000013c  w    F .text	00000002 UsageFault_Handler
00000a0a g     F .text	0000001c spiflash_chip_erase
00000144  w    F .text	00000002 UARTE0_UART0_IRQHandler
00004964 g     F .text	00000298 tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
20000160 g       .bss	00000000 __bss_start__
00004400 g     F .text	00000074 hal_flash_write
00000144  w    F .text	00000002 TIMER4_IRQHandler
00005230 g     F .text	000002cc .hidden __udivmoddi4
000028be g     F .text	0000001e boot_status_entries
000028ac g     F .text	00000008 boot_status_sz
20004ae0 g     O .bss	00000004 g_current_task
000018a2 g     F .text	0000000c os_arch_save_sr
00003912 g     F .text	00000034 boot_read_image_header
00002a14 g     F .text	00000020 boot_write_magic
00001960 g     F .text	00000014 os_mempool_init
00000abc g     F .text	00000064 spiflash_identify
00001826 g     F .text	00000016 os_cputime_delay_ticks
00005d18 g       .text	00000000 __exidx_start
00003220 g     F .text	00000008 boot_erase_region
00003b20 g     F .text	0000013c swap_status_source
00001cd6 g     F .text	000000a8 os_mbuf_append
00005172 g     F .text	0000000a mfg_read_tlv_mmr_ref
00001b50 g     F .text	00000014 os_set_env
00000640 g     F .text	00000014 hal_bsp_flash_dev
00001384 g     F .text	0000000c nrf52_periph_create
00004ede g     F .text	0000000a flash_area_align
00002658 g     F .text	00000008 disable_buffer
00002564 g     F .text	00000048 console_printf
00002522 g     F .text	00000008 console_blocking_mode
00000144  w    F .text	00000002 I2S_IRQHandler
000005c2 g     F .text	00000002 _init
00004474 g     F .text	000000d0 hal_flash_erase
000028fe g     F .text	00000006 boot_swap_info_off
00002a94 g     F .text	00000022 boot_write_swap_size
00002420 g     F .text	000000e4 pinetime_boot_display_image
00000144  w    F .text	00000002 SWI4_EGU4_IRQHandler
000031b8 g     F .text	00000068 boot_write_status
00000144  w    F .text	00000002 TIMER0_IRQHandler
00002ab8 g     F .text	000000d8 boot_swap_type_multi
000000d8 g     F .text	0000005c Reset_Handler
20004c11 g     O .bss	00000001 sysinit_active
000029e4 g     F .text	00000030 boot_read_swap_size
0000355a g     F .text	0000001e swap_set_copy_done
00001e8c g     F .text	00000098 pinetime_boot_init
00001c18 g     F .text	0000000a os_mbuf_pool_init
00001be6 g     F .text	0000001e os_default_irq_asm
000034de g     F .text	0000007c swap_read_status
0000517c g     F .text	00000024 mfg_init
00001d7e g     F .text	00000014 os_mutex_init
00000148 g     F .text	00000010 _sbrkInit
20000160 g       .bssnz	00000000 __bssnz_end__
00004f00 g     F .text	00000060 flash_map_init
00004c28 g     F .text	00000014 vprintf
00000144  w    F .text	00000002 TIMER1_IRQHandler
0000206c g     F .text	00000088 blink_backlight
20000000 g       .bss	00000000 _ram_start
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00003948 g     F .text	000000bc swap_read_status_bytes
00000ce2 g     F .text	0000002c hal_gpio_init_in
00000144  w    F .text	00000002 PWM2_IRQHandler
20000160 g       .data	00000000 __data_end__
00004206 g     F .text	0000013e mbedtls_sha256_finish_ret
00000144  w    F .text	00000002 ECB_IRQHandler
20004ae4 g     O .bss	00000004 g_os_time
00001108 g     F .text	00000060 hal_spi_init
20006424 g       .bss	00000000 __bss_end__
00001c22 g     F .text	00000032 os_mbuf_get
00000144  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00000762 g     F .text	00000016 spiflash_device_ready
00001ac8 g     F .text	00000010 os_msys_reset
00000144 g     F .text	00000002 Default_Handler
000005b4 g     F .text	0000000e _start
00002a34 g     F .text	0000000e boot_write_copy_done
00003a04 g     F .text	0000001a boot_status_internal_off
00001b64 g     F .text	00000006 os_arch_init_task_stack
0000586c g     O .text	00000010 boot_img_magic
00000d0e g     F .text	00000038 hal_gpio_init_out
00000d68 g     F .text	00000034 hal_gpio_read
20000150 g     O .data	00000004 sysinit_panic_cb
00001974 g     F .text	00000032 os_memblock_get
0000273c g     F .text	00000030 mem_init_mbuf_pool
00002f3a g     F .text	00000022 boot_status_is_reset
00001778 g     F .text	00000098 os_default_irq
000009d4 g     F .text	0000000e spiflash_sector_erase
00004ee8 g     F .text	0000000a flash_area_erased_val
00003454 g     F .text	0000008a swap_status_init
00001d92 g     F .text	00000048 memcmp
000054fc  w    F .text	00000002 .hidden __aeabi_ldiv0
00002724 g     F .text	0000000c sysinit_start
0000160c g     F .text	000000f8 hal_timer_config
00001f24 g     F .text	00000048 setup_watchdog
00003f94 g     F .text	00000012 flash_area_id_from_multi_image_slot
00002f26 g     F .text	00000014 boot_status_reset
00003228 g     F .text	00000058 boot_copy_region
00001a38 g     F .text	0000004c os_msys_register
00004dbc g     F .text	00000034 flash_area_open
200000e8 g     O .data	00000040 spiflash_dev
00000144  w    F .text	00000002 SAADC_IRQHandler
000029c4 g     F .text	00000020 boot_read_swap_state_by_id
00001df4 g     F .text	00000038 memset
00000000 g       .text	000000d8 __isr_vector
000005ca g     F .text	00000076 main
000011b0 g     F .text	0000002c hal_spi_set_txrx_cb
000026d0 g     F .text	0000003c console_out_nolock
000006de g     F .text	0000005a spiflash_read_jedec_id
00000144  w    F .text	00000002 CCM_AAR_IRQHandler
00000144  w    F .text	00000002 WDT_IRQHandler
00002730 g     F .text	0000000c sysinit_end
00004f60 g     F .text	00000002 modlog_init
00001b6a g     F .text	00000046 SVC_Handler
000043aa g     F .text	00000054 hal_flash_read
00001704 g     F .text	00000030 hal_timer_read
00004eb8 g     F .text	00000026 flash_area_erase
20000160 g     O .bss	00000028 nrf52_hal_spi0
00001cc2 g     F .text	00000014 os_mbuf_len
20004c08 g     O .bss	00000001 g_silence_console
00000144  w    F .text	00000002 SWI5_EGU5_IRQHandler
20006388 g     O .bss	00000004 flash_map_entries
00000000 g       .text	00000000 __text
0000513c g     F .text	00000012 mfg_seek_next
00004ef2 g     F .text	0000000e flash_area_read_is_empty
00002504 g     F .text	0000001e console_write
000028dc g     F .text	00000022 boot_status_off
000003f4 g     F .text	000001c0 SystemInit
0000181c g     F .text	0000000a os_cputime_get32
00000144  w    F .text	00000002 RNG_IRQHandler
0000439a g     F .text	00000010 hal_flash_erased_val
00003d58 g     F .text	000000ba bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
00000144  w    F .text	00000002 RTC2_IRQHandler
00001168 g     F .text	00000048 hal_spi_tx_val
00000848 g     F .text	00000020 spiflash_write_enable
20010000 g       .bss	00000000 __StackTop
00002610 g     F .text	00000048 console_flush
00000144  w    F .text	00000002 PWM0_IRQHandler
00000144  w    F .text	00000002 SWI3_EGU3_IRQHandler
0000101c g     F .text	00000038 hal_spi_config
00004df0 g     F .text	0000007c flash_area_to_sectors
00005cd0 g     O .text	00000048 sysflash_map_dflt
20000188 g     O .bss	0000001c nrf52_hal_timer0
000000d8 g       .text	00000000 __isr_vector_end
00000144  w    F .text	00000002 RTC1_IRQHandler
00002b90 g     F .text	0000008a boot_set_pending
00001054 g     F .text	0000004c hal_spi_enable
0000183c g     F .text	00000008 os_cputime_delay_usecs
00000144  w    F .text	00000002 SWI1_EGU1_IRQHandler
000007c8 g     F .text	00000016 spiflash_wait_ready
000045e0 g     F .text	0000001e fwrite
000009fa g     F .text	00000010 spiflash_block_64k_erase
000051a0 g     F .text	00000010 mfg_open
20000140 g     O .data	00000008 g_os_run_list
00000660 g     F .text	00000034 NVIC_Relocate
0000276c g     F .text	0000001c sysinit_app
200001ac g     O .bss	00000004 os_flags
000018ae g     F .text	00000006 os_arch_restore_sr
2000fe50 g       *ABS*	000001b0 __StackLimit
00004180 g     F .text	00000086 mbedtls_sha256_update_ret
00000144  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00000144  w    F .text	00000002 NFCT_IRQHandler
000003e4 g     F .text	00000010 SystemCoreClockUpdate
00001c9e g     F .text	00000024 os_mbuf_free_chain
00001b00 g     F .text	00000034 os_msys_init
00001b34 g     F .text	0000000c os_time_get
000011dc g     F .text	000000ac hal_spi_txrx
00001c54 g     F .text	00000036 os_mbuf_get_pkthdr
000054fc  w    F .text	00000002 .hidden __aeabi_idiv0
00003e12 g     F .text	000000ca bootutil_tlv_iter_begin
00000b5e g     F .text	00000006 _exit
00000188 g     F .text	0000004c hal_system_clock_start
0000013a  w    F .text	00000002 BusFault_Handler
00001e2c g     F .text	00000010 strlen
00000738 g     F .text	0000002a spiflash_read_status
000019a6 g     F .text	0000001e os_memblock_put_from_cb
000018d6 g     F .text	00000010 os_eventq_init
00001b40 g     F .text	00000010 os_time_advance
00004362 g     F .text	00000028 hal_flash_init
00000144  w    F .text	00000002 MWU_IRQHandler
00000138  w    F .text	00000002 MemoryManagement_Handler
00000144  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0000186c g     F .text	0000002c os_dev_initialize_all
00001f6c g     F .text	00000034 boot_custom_start
00000654 g     F .text	0000000c hal_bsp_init
000018b4 g     F .text	00000022 os_pkg_init
000010a0 g     F .text	00000068 hal_spi_disable
000005c4 g     F .text	00000006 flash_device_base
000009ea g     F .text	00000010 spiflash_block_32k_erase
00004bfc g     F .text	00000008 vfprintf
000028b4 g     F .text	0000000a boot_trailer_sz
00003edc g     F .text	000000b8 bootutil_tlv_iter_next
00002a42 g     F .text	0000000e boot_write_image_ok
00003fb4 g     F .text	000000a4 mbedtls_sha256_starts_ret



Disassembly of section .text:

00000000 <__isr_vector>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
       0:	20010000 	.word	0x20010000
       4:	000000d9 	.word	0x000000d9
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
       8:	00000135 	.word	0x00000135
       c:	00001fa1 	.word	0x00001fa1
	...
    if (nticks == OS_TIMEOUT_NEVER) {
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
      2c:	00001b6b 	.word	0x00001b6b
	...
      38:	00001bb1 	.word	0x00001bb1
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
      3c:	00001bdb 	.word	0x00001bdb
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
      40:	00000145 	.word	0x00000145
      44:	00000145 	.word	0x00000145
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
      48:	00000145 	.word	0x00000145
      4c:	00000145 	.word	0x00000145
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      50:	00000145 	.word	0x00000145
      54:	00000145 	.word	0x00000145
      58:	00000145 	.word	0x00000145
      5c:	00000145 	.word	0x00000145
      60:	00000145 	.word	0x00000145
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
                break;
            }
        }
        if (entry) {
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
      64:	00000145 	.word	0x00000145
      68:	00000145 	.word	0x00000145
      6c:	00000145 	.word	0x00000145
      70:	00000145 	.word	0x00000145
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
      74:	00000145 	.word	0x00000145
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      78:	00000145 	.word	0x00000145
      7c:	00000145 	.word	0x00000145
      80:	00000145 	.word	0x00000145
      84:	00000145 	.word	0x00000145
      88:	00000145 	.word	0x00000145
      8c:	00000145 	.word	0x00000145
      90:	00000145 	.word	0x00000145
      94:	00000145 	.word	0x00000145
      98:	00000145 	.word	0x00000145
      9c:	00000145 	.word	0x00000145
      a0:	00000145 	.word	0x00000145
      a4:	00000145 	.word	0x00000145
      a8:	00000145 	.word	0x00000145
      ac:	00000145 	.word	0x00000145
      b0:	00000145 	.word	0x00000145
      b4:	00000145 	.word	0x00000145
	...
      c0:	00000145 	.word	0x00000145
      c4:	00000145 	.word	0x00000145
      c8:	00000145 	.word	0x00000145
      cc:	00000145 	.word	0x00000145
      d0:	00000145 	.word	0x00000145
      d4:	00000145 	.word	0x00000145

000000d8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
      d8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
      dc:	4a0c      	ldr	r2, [pc, #48]	; (110 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
      de:	4b0d      	ldr	r3, [pc, #52]	; (114 <.bss_zero_loop+0x34>)

000000e0 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
      e0:	429a      	cmp	r2, r3
    itt     lt
      e2:	bfbc      	itt	lt
    strlt   r0, [r2], #4
      e4:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
      e8:	e7fa      	blt.n	e0 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
      ea:	490b      	ldr	r1, [pc, #44]	; (118 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
      ec:	4a0b      	ldr	r2, [pc, #44]	; (11c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
      ee:	4b0c      	ldr	r3, [pc, #48]	; (120 <.bss_zero_loop+0x40>)

    subs    r3, r2
      f0:	1a9b      	subs	r3, r3, r2
    ble     .LC0
      f2:	dd03      	ble.n	fc <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
      f4:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
      f6:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
      f8:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
      fa:	dcfb      	bgt.n	f4 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
      fc:	4809      	ldr	r0, [pc, #36]	; (124 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
      fe:	490a      	ldr	r1, [pc, #40]	; (128 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
     100:	f000 f822 	bl	148 <_sbrkInit>

    LDR     R0, =SystemInit
     104:	4809      	ldr	r0, [pc, #36]	; (12c <.bss_zero_loop+0x4c>)
    BLX     R0
     106:	4780      	blx	r0

    BL      hal_system_init
     108:	f000 f826 	bl	158 <hal_system_init>

    LDR     R0, =_start
     10c:	4808      	ldr	r0, [pc, #32]	; (130 <.bss_zero_loop+0x50>)
    BX      R0
     10e:	4700      	bx	r0
    ldr     r2, =__bss_start__
     110:	20000160 	.word	0x20000160
    ldr     r3, =__bss_end__
     114:	20006424 	.word	0x20006424
    ldr    r1, =__etext
     118:	00005d30 	.word	0x00005d30
    ldr    r2, =__data_start__
     11c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
     120:	20000160 	.word	0x20000160
    LDR     R0, =__HeapBase
     124:	20006428 	.word	0x20006428
    LDR     R1, =__HeapLimit
     128:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
     12c:	000003f5 	.word	0x000003f5
    LDR     R0, =_start
     130:	000005b5 	.word	0x000005b5

00000134 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
     134:	e7fe      	b.n	134 <NMI_Handler>


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
     136:	e7fe      	b.n	136 <NMI_Handler+0x2>

00000138 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
     138:	e7fe      	b.n	138 <MemoryManagement_Handler>

0000013a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
     13a:	e7fe      	b.n	13a <BusFault_Handler>

0000013c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
     13c:	e7fe      	b.n	13c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
     13e:	e7fe      	b.n	13e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
     140:	e7fe      	b.n	140 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
     142:	e7fe      	b.n	142 <UsageFault_Handler+0x6>

00000144 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
     144:	e7fe      	b.n	144 <Default_Handler>
     146:	bf00      	nop

00000148 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
     148:	4b02      	ldr	r3, [pc, #8]	; (154 <_sbrkInit+0xc>)
     14a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
     14c:	6059      	str	r1, [r3, #4]
    brk = base;
     14e:	6098      	str	r0, [r3, #8]
}
     150:	4770      	bx	lr
     152:	bf00      	nop
     154:	200000d8 	.word	0x200000d8

00000158 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
     158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     15c:	2201      	movs	r2, #1
     15e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
     162:	4770      	bx	lr

00000164 <hal_system_reset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     164:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     168:	4905      	ldr	r1, [pc, #20]	; (180 <hal_system_reset+0x1c>)
     16a:	68ca      	ldr	r2, [r1, #12]
     16c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     170:	4b04      	ldr	r3, [pc, #16]	; (184 <hal_system_reset+0x20>)
     172:	4313      	orrs	r3, r2
     174:	60cb      	str	r3, [r1, #12]
     176:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     17a:	bf00      	nop
     17c:	e7fd      	b.n	17a <hal_system_reset+0x16>
     17e:	bf00      	nop
     180:	e000ed00 	.word	0xe000ed00
     184:	05fa0004 	.word	0x05fa0004

00000188 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
     188:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     18c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     190:	4b0f      	ldr	r3, [pc, #60]	; (1d0 <Stack_Size+0x20>)
     192:	4013      	ands	r3, r2
     194:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     198:	d018      	beq.n	1cc <Stack_Size+0x1c>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     19a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     19e:	2201      	movs	r2, #1
     1a0:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1a2:	2100      	movs	r1, #0
     1a4:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
     1a8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
     1ac:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
     1ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1b2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
     1b6:	2b00      	cmp	r3, #0
     1b8:	d0f9      	beq.n	1ae <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
     1ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1be:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
     1c2:	4b03      	ldr	r3, [pc, #12]	; (1d0 <Stack_Size+0x20>)
     1c4:	4013      	ands	r3, r2
     1c6:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
     1ca:	d1f0      	bne.n	1ae <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
     1cc:	4770      	bx	lr
     1ce:	bf00      	nop
     1d0:	00010003 	.word	0x00010003

000001d4 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1d4:	4b0b      	ldr	r3, [pc, #44]	; (204 <errata_16+0x30>)
     1d6:	781b      	ldrb	r3, [r3, #0]
     1d8:	2b06      	cmp	r3, #6
     1da:	d001      	beq.n	1e0 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     1dc:	2000      	movs	r0, #0
     1de:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1e0:	4b09      	ldr	r3, [pc, #36]	; (208 <errata_16+0x34>)
     1e2:	681b      	ldr	r3, [r3, #0]
     1e4:	f013 0f0f 	tst.w	r3, #15
     1e8:	d107      	bne.n	1fa <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     1ea:	4b08      	ldr	r3, [pc, #32]	; (20c <errata_16+0x38>)
     1ec:	681b      	ldr	r3, [r3, #0]
     1ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     1f2:	2b30      	cmp	r3, #48	; 0x30
     1f4:	d003      	beq.n	1fe <errata_16+0x2a>
    return false;
     1f6:	2000      	movs	r0, #0
     1f8:	4770      	bx	lr
     1fa:	2000      	movs	r0, #0
     1fc:	4770      	bx	lr
            return true;
     1fe:	2001      	movs	r0, #1
}
     200:	4770      	bx	lr
     202:	bf00      	nop
     204:	f0000fe0 	.word	0xf0000fe0
     208:	f0000fe4 	.word	0xf0000fe4
     20c:	f0000fe8 	.word	0xf0000fe8

00000210 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     210:	4b0f      	ldr	r3, [pc, #60]	; (250 <errata_31+0x40>)
     212:	781b      	ldrb	r3, [r3, #0]
     214:	2b06      	cmp	r3, #6
     216:	d001      	beq.n	21c <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     218:	2000      	movs	r0, #0
     21a:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     21c:	4b0d      	ldr	r3, [pc, #52]	; (254 <errata_31+0x44>)
     21e:	681b      	ldr	r3, [r3, #0]
     220:	f013 0f0f 	tst.w	r3, #15
     224:	d10b      	bne.n	23e <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     226:	4b0c      	ldr	r3, [pc, #48]	; (258 <errata_31+0x48>)
     228:	681b      	ldr	r3, [r3, #0]
     22a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     22e:	2b30      	cmp	r3, #48	; 0x30
     230:	d007      	beq.n	242 <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     232:	2b40      	cmp	r3, #64	; 0x40
     234:	d007      	beq.n	246 <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     236:	2b50      	cmp	r3, #80	; 0x50
     238:	d007      	beq.n	24a <errata_31+0x3a>
    return false;
     23a:	2000      	movs	r0, #0
     23c:	4770      	bx	lr
     23e:	2000      	movs	r0, #0
     240:	4770      	bx	lr
            return true;
     242:	2001      	movs	r0, #1
     244:	4770      	bx	lr
            return true;
     246:	2001      	movs	r0, #1
     248:	4770      	bx	lr
            return true;
     24a:	2001      	movs	r0, #1
}
     24c:	4770      	bx	lr
     24e:	bf00      	nop
     250:	f0000fe0 	.word	0xf0000fe0
     254:	f0000fe4 	.word	0xf0000fe4
     258:	f0000fe8 	.word	0xf0000fe8

0000025c <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     25c:	4b0b      	ldr	r3, [pc, #44]	; (28c <errata_32+0x30>)
     25e:	781b      	ldrb	r3, [r3, #0]
     260:	2b06      	cmp	r3, #6
     262:	d001      	beq.n	268 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     264:	2000      	movs	r0, #0
     266:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     268:	4b09      	ldr	r3, [pc, #36]	; (290 <errata_32+0x34>)
     26a:	681b      	ldr	r3, [r3, #0]
     26c:	f013 0f0f 	tst.w	r3, #15
     270:	d107      	bne.n	282 <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     272:	4b08      	ldr	r3, [pc, #32]	; (294 <errata_32+0x38>)
     274:	681b      	ldr	r3, [r3, #0]
     276:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     27a:	2b30      	cmp	r3, #48	; 0x30
     27c:	d003      	beq.n	286 <errata_32+0x2a>
    return false;
     27e:	2000      	movs	r0, #0
     280:	4770      	bx	lr
     282:	2000      	movs	r0, #0
     284:	4770      	bx	lr
            return true;
     286:	2001      	movs	r0, #1
}
     288:	4770      	bx	lr
     28a:	bf00      	nop
     28c:	f0000fe0 	.word	0xf0000fe0
     290:	f0000fe4 	.word	0xf0000fe4
     294:	f0000fe8 	.word	0xf0000fe8

00000298 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     298:	4b0f      	ldr	r3, [pc, #60]	; (2d8 <errata_36+0x40>)
     29a:	781b      	ldrb	r3, [r3, #0]
     29c:	2b06      	cmp	r3, #6
     29e:	d001      	beq.n	2a4 <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     2a0:	2000      	movs	r0, #0
     2a2:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2a4:	4b0d      	ldr	r3, [pc, #52]	; (2dc <errata_36+0x44>)
     2a6:	681b      	ldr	r3, [r3, #0]
     2a8:	f013 0f0f 	tst.w	r3, #15
     2ac:	d10b      	bne.n	2c6 <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     2ae:	4b0c      	ldr	r3, [pc, #48]	; (2e0 <errata_36+0x48>)
     2b0:	681b      	ldr	r3, [r3, #0]
     2b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     2b6:	2b30      	cmp	r3, #48	; 0x30
     2b8:	d007      	beq.n	2ca <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     2ba:	2b40      	cmp	r3, #64	; 0x40
     2bc:	d007      	beq.n	2ce <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     2be:	2b50      	cmp	r3, #80	; 0x50
     2c0:	d007      	beq.n	2d2 <errata_36+0x3a>
    return false;
     2c2:	2000      	movs	r0, #0
     2c4:	4770      	bx	lr
     2c6:	2000      	movs	r0, #0
     2c8:	4770      	bx	lr
            return true;
     2ca:	2001      	movs	r0, #1
     2cc:	4770      	bx	lr
            return true;
     2ce:	2001      	movs	r0, #1
     2d0:	4770      	bx	lr
            return true;
     2d2:	2001      	movs	r0, #1
}
     2d4:	4770      	bx	lr
     2d6:	bf00      	nop
     2d8:	f0000fe0 	.word	0xf0000fe0
     2dc:	f0000fe4 	.word	0xf0000fe4
     2e0:	f0000fe8 	.word	0xf0000fe8

000002e4 <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2e4:	4b0b      	ldr	r3, [pc, #44]	; (314 <errata_37+0x30>)
     2e6:	781b      	ldrb	r3, [r3, #0]
     2e8:	2b06      	cmp	r3, #6
     2ea:	d001      	beq.n	2f0 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     2ec:	2000      	movs	r0, #0
     2ee:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2f0:	4b09      	ldr	r3, [pc, #36]	; (318 <errata_37+0x34>)
     2f2:	681b      	ldr	r3, [r3, #0]
     2f4:	f013 0f0f 	tst.w	r3, #15
     2f8:	d107      	bne.n	30a <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     2fa:	4b08      	ldr	r3, [pc, #32]	; (31c <errata_37+0x38>)
     2fc:	681b      	ldr	r3, [r3, #0]
     2fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     302:	2b30      	cmp	r3, #48	; 0x30
     304:	d003      	beq.n	30e <errata_37+0x2a>
    return false;
     306:	2000      	movs	r0, #0
     308:	4770      	bx	lr
     30a:	2000      	movs	r0, #0
     30c:	4770      	bx	lr
            return true;
     30e:	2001      	movs	r0, #1
}
     310:	4770      	bx	lr
     312:	bf00      	nop
     314:	f0000fe0 	.word	0xf0000fe0
     318:	f0000fe4 	.word	0xf0000fe4
     31c:	f0000fe8 	.word	0xf0000fe8

00000320 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     320:	4b0b      	ldr	r3, [pc, #44]	; (350 <errata_57+0x30>)
     322:	781b      	ldrb	r3, [r3, #0]
     324:	2b06      	cmp	r3, #6
     326:	d001      	beq.n	32c <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
     328:	2000      	movs	r0, #0
     32a:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     32c:	4b09      	ldr	r3, [pc, #36]	; (354 <errata_57+0x34>)
     32e:	681b      	ldr	r3, [r3, #0]
     330:	f013 0f0f 	tst.w	r3, #15
     334:	d107      	bne.n	346 <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     336:	4b08      	ldr	r3, [pc, #32]	; (358 <errata_57+0x38>)
     338:	681b      	ldr	r3, [r3, #0]
     33a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     33e:	2b30      	cmp	r3, #48	; 0x30
     340:	d003      	beq.n	34a <errata_57+0x2a>
    return false;
     342:	2000      	movs	r0, #0
     344:	4770      	bx	lr
     346:	2000      	movs	r0, #0
     348:	4770      	bx	lr
            return true;
     34a:	2001      	movs	r0, #1
}
     34c:	4770      	bx	lr
     34e:	bf00      	nop
     350:	f0000fe0 	.word	0xf0000fe0
     354:	f0000fe4 	.word	0xf0000fe4
     358:	f0000fe8 	.word	0xf0000fe8

0000035c <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     35c:	4b0b      	ldr	r3, [pc, #44]	; (38c <errata_66+0x30>)
     35e:	781b      	ldrb	r3, [r3, #0]
     360:	2b06      	cmp	r3, #6
     362:	d001      	beq.n	368 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     364:	2000      	movs	r0, #0
     366:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     368:	4b09      	ldr	r3, [pc, #36]	; (390 <errata_66+0x34>)
     36a:	681b      	ldr	r3, [r3, #0]
     36c:	f013 0f0f 	tst.w	r3, #15
     370:	d107      	bne.n	382 <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     372:	4b08      	ldr	r3, [pc, #32]	; (394 <errata_66+0x38>)
     374:	681b      	ldr	r3, [r3, #0]
     376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     37a:	2b50      	cmp	r3, #80	; 0x50
     37c:	d003      	beq.n	386 <errata_66+0x2a>
    return false;
     37e:	2000      	movs	r0, #0
     380:	4770      	bx	lr
     382:	2000      	movs	r0, #0
     384:	4770      	bx	lr
            return true;
     386:	2001      	movs	r0, #1
}
     388:	4770      	bx	lr
     38a:	bf00      	nop
     38c:	f0000fe0 	.word	0xf0000fe0
     390:	f0000fe4 	.word	0xf0000fe4
     394:	f0000fe8 	.word	0xf0000fe8

00000398 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     398:	4b0f      	ldr	r3, [pc, #60]	; (3d8 <errata_108+0x40>)
     39a:	781b      	ldrb	r3, [r3, #0]
     39c:	2b06      	cmp	r3, #6
     39e:	d001      	beq.n	3a4 <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     3a0:	2000      	movs	r0, #0
     3a2:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     3a4:	4b0d      	ldr	r3, [pc, #52]	; (3dc <errata_108+0x44>)
     3a6:	681b      	ldr	r3, [r3, #0]
     3a8:	f013 0f0f 	tst.w	r3, #15
     3ac:	d10b      	bne.n	3c6 <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     3ae:	4b0c      	ldr	r3, [pc, #48]	; (3e0 <errata_108+0x48>)
     3b0:	681b      	ldr	r3, [r3, #0]
     3b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     3b6:	2b30      	cmp	r3, #48	; 0x30
     3b8:	d007      	beq.n	3ca <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     3ba:	2b40      	cmp	r3, #64	; 0x40
     3bc:	d007      	beq.n	3ce <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     3be:	2b50      	cmp	r3, #80	; 0x50
     3c0:	d007      	beq.n	3d2 <errata_108+0x3a>
    return false;
     3c2:	2000      	movs	r0, #0
     3c4:	4770      	bx	lr
     3c6:	2000      	movs	r0, #0
     3c8:	4770      	bx	lr
            return true;
     3ca:	2001      	movs	r0, #1
     3cc:	4770      	bx	lr
            return true;
     3ce:	2001      	movs	r0, #1
     3d0:	4770      	bx	lr
            return true;
     3d2:	2001      	movs	r0, #1
}
     3d4:	4770      	bx	lr
     3d6:	bf00      	nop
     3d8:	f0000fe0 	.word	0xf0000fe0
     3dc:	f0000fe4 	.word	0xf0000fe4
     3e0:	f0000fe8 	.word	0xf0000fe8

000003e4 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     3e4:	4b01      	ldr	r3, [pc, #4]	; (3ec <SystemCoreClockUpdate+0x8>)
     3e6:	4a02      	ldr	r2, [pc, #8]	; (3f0 <SystemCoreClockUpdate+0xc>)
     3e8:	601a      	str	r2, [r3, #0]
}
     3ea:	4770      	bx	lr
     3ec:	200000e4 	.word	0x200000e4
     3f0:	03d09000 	.word	0x03d09000

000003f4 <SystemInit>:
{
     3f4:	b508      	push	{r3, lr}
    if (errata_16()){
     3f6:	f7ff feed 	bl	1d4 <errata_16>
     3fa:	b110      	cbz	r0, 402 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     3fc:	4b60      	ldr	r3, [pc, #384]	; (580 <SystemInit+0x18c>)
     3fe:	4a61      	ldr	r2, [pc, #388]	; (584 <SystemInit+0x190>)
     400:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     402:	f7ff ff05 	bl	210 <errata_31>
     406:	b128      	cbz	r0, 414 <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     408:	4b5f      	ldr	r3, [pc, #380]	; (588 <SystemInit+0x194>)
     40a:	681b      	ldr	r3, [r3, #0]
     40c:	f3c3 3342 	ubfx	r3, r3, #13, #3
     410:	4a5e      	ldr	r2, [pc, #376]	; (58c <SystemInit+0x198>)
     412:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     414:	f7ff ff22 	bl	25c <errata_32>
     418:	b120      	cbz	r0, 424 <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     41a:	4a5d      	ldr	r2, [pc, #372]	; (590 <SystemInit+0x19c>)
     41c:	68d3      	ldr	r3, [r2, #12]
     41e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     422:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     424:	f7ff ff38 	bl	298 <errata_36>
     428:	b140      	cbz	r0, 43c <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
     42a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     42e:	2200      	movs	r2, #0
     430:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     434:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     438:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     43c:	f7ff ff52 	bl	2e4 <errata_37>
     440:	b110      	cbz	r0, 448 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     442:	4b54      	ldr	r3, [pc, #336]	; (594 <SystemInit+0x1a0>)
     444:	2203      	movs	r2, #3
     446:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     448:	f7ff ff6a 	bl	320 <errata_57>
     44c:	b158      	cbz	r0, 466 <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     44e:	4b52      	ldr	r3, [pc, #328]	; (598 <SystemInit+0x1a4>)
     450:	2205      	movs	r2, #5
     452:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     454:	3378      	adds	r3, #120	; 0x78
     456:	2201      	movs	r2, #1
     458:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     45a:	3b70      	subs	r3, #112	; 0x70
     45c:	2200      	movs	r2, #0
     45e:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     460:	3b04      	subs	r3, #4
     462:	223f      	movs	r2, #63	; 0x3f
     464:	601a      	str	r2, [r3, #0]
    if (errata_66()){
     466:	f7ff ff79 	bl	35c <errata_66>
     46a:	2800      	cmp	r0, #0
     46c:	d046      	beq.n	4fc <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     472:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     476:	4b49      	ldr	r3, [pc, #292]	; (59c <SystemInit+0x1a8>)
     478:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     47c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     480:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     484:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     488:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     48c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     490:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     494:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     498:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     49c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     4a0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     4a4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     4a8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     4ac:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     4b0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     4b4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     4b8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     4bc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     4c0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     4c4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     4c8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     4cc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     4d0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     4d4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     4d8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     4dc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     4e0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     4e4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     4e8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     4ec:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     4f0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     4f4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     4f8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     4fc:	f7ff ff4c 	bl	398 <errata_108>
     500:	b128      	cbz	r0, 50e <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     502:	4b27      	ldr	r3, [pc, #156]	; (5a0 <SystemInit+0x1ac>)
     504:	681b      	ldr	r3, [r3, #0]
     506:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     50a:	4a26      	ldr	r2, [pc, #152]	; (5a4 <SystemInit+0x1b0>)
     50c:	6013      	str	r3, [r2, #0]
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
     50e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     512:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
     516:	f013 0f01 	tst.w	r3, #1
     51a:	d104      	bne.n	526 <SystemInit+0x132>
    SystemCoreClockUpdate();
     51c:	f7ff ff62 	bl	3e4 <SystemCoreClockUpdate>
    NVIC_Relocate();
     520:	f000 f89e 	bl	660 <NVIC_Relocate>
}
     524:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     526:	4b20      	ldr	r3, [pc, #128]	; (5a8 <SystemInit+0x1b4>)
     528:	2201      	movs	r2, #1
     52a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     52e:	4b1e      	ldr	r3, [pc, #120]	; (5a8 <SystemInit+0x1b4>)
     530:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     534:	2b00      	cmp	r3, #0
     536:	d0fa      	beq.n	52e <SystemInit+0x13a>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
     538:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     53c:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
     540:	f023 0301 	bic.w	r3, r3, #1
     544:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     548:	4b17      	ldr	r3, [pc, #92]	; (5a8 <SystemInit+0x1b4>)
     54a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     54e:	2b00      	cmp	r3, #0
     550:	d0fa      	beq.n	548 <SystemInit+0x154>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     552:	4b15      	ldr	r3, [pc, #84]	; (5a8 <SystemInit+0x1b4>)
     554:	2200      	movs	r2, #0
     556:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     55a:	4b13      	ldr	r3, [pc, #76]	; (5a8 <SystemInit+0x1b4>)
     55c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
     560:	2b00      	cmp	r3, #0
     562:	d0fa      	beq.n	55a <SystemInit+0x166>
     564:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     568:	4910      	ldr	r1, [pc, #64]	; (5ac <SystemInit+0x1b8>)
     56a:	68ca      	ldr	r2, [r1, #12]
     56c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     570:	4b0f      	ldr	r3, [pc, #60]	; (5b0 <SystemInit+0x1bc>)
     572:	4313      	orrs	r3, r2
     574:	60cb      	str	r3, [r1, #12]
     576:	f3bf 8f4f 	dsb	sy
    __NOP();
     57a:	bf00      	nop
     57c:	e7fd      	b.n	57a <SystemInit+0x186>
     57e:	bf00      	nop
     580:	4007c074 	.word	0x4007c074
     584:	baadf00d 	.word	0xbaadf00d
     588:	10000244 	.word	0x10000244
     58c:	4000053c 	.word	0x4000053c
     590:	e000edf0 	.word	0xe000edf0
     594:	400005a0 	.word	0x400005a0
     598:	40005610 	.word	0x40005610
     59c:	4000c000 	.word	0x4000c000
     5a0:	10000258 	.word	0x10000258
     5a4:	40000ee4 	.word	0x40000ee4
     5a8:	4001e000 	.word	0x4001e000
     5ac:	e000ed00 	.word	0xe000ed00
     5b0:	05fa0004 	.word	0x05fa0004

000005b4 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
     5b4:	b508      	push	{r3, lr}
#if !MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    rc = main(0, NULL);
     5b6:	2100      	movs	r1, #0
     5b8:	4608      	mov	r0, r1
     5ba:	f000 f806 	bl	5ca <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
     5be:	f000 face 	bl	b5e <_exit>

000005c2 <_init>:
}

void
_init(void)
{
}
     5c2:	4770      	bx	lr

000005c4 <flash_device_base>:
 * TODO: remove this when mynewt needs to support flash_device_base()
 * for devices with nonzero base addresses.
 */
int flash_device_base(uint8_t fd_id, uintptr_t *ret)
{
    *ret = 0;
     5c4:	2000      	movs	r0, #0
     5c6:	6008      	str	r0, [r1, #0]
    return 0;
}
     5c8:	4770      	bx	lr

000005ca <main>:

int
main(void)
{
     5ca:	b500      	push	{lr}
     5cc:	b085      	sub	sp, #20
    struct boot_rsp rsp;
    uintptr_t flash_base;
    int rc;

    hal_bsp_init();
     5ce:	f000 f841 	bl	654 <hal_bsp_init>

#if !MYNEWT_VAL(OS_SCHEDULING) && MYNEWT_VAL(WATCHDOG_INTERVAL)
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
     5d2:	f247 5030 	movw	r0, #30000	; 0x7530
     5d6:	f000 fe6f 	bl	12b8 <hal_watchdog_init>
    assert(rc == 0);
     5da:	b9f8      	cbnz	r0, 61c <main+0x52>
#endif

#if defined(MCUBOOT_SERIAL) || defined(MCUBOOT_HAVE_LOGGING) || \
        MYNEWT_VAL(CRYPTO) || MYNEWT_VAL(HASH)
    /* initialize uart/crypto without os */
    os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
     5dc:	2001      	movs	r0, #1
     5de:	f001 f945 	bl	186c <os_dev_initialize_all>
    os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
     5e2:	2002      	movs	r0, #2
     5e4:	f001 f942 	bl	186c <os_dev_initialize_all>
    sysinit();
     5e8:	f002 f89c 	bl	2724 <sysinit_start>
     5ec:	f002 f8be 	bl	276c <sysinit_app>
     5f0:	f002 f89e 	bl	2730 <sysinit_end>
    console_blocking_mode();
     5f4:	f001 ff95 	bl	2522 <console_blocking_mode>
#endif
#else
    flash_map_init();
#endif

    rc = boot_go(&rsp);
     5f8:	a801      	add	r0, sp, #4
     5fa:	f002 fee1 	bl	33c0 <boot_go>
    assert(rc == 0);
     5fe:	b998      	cbnz	r0, 628 <main+0x5e>

    rc = flash_device_base(rsp.br_flash_dev_id, &flash_base);
     600:	4669      	mov	r1, sp
     602:	f89d 0008 	ldrb.w	r0, [sp, #8]
     606:	f7ff ffdd 	bl	5c4 <flash_device_base>
    assert(rc == 0);
     60a:	b998      	cbnz	r0, 634 <main+0x6a>

#if MYNEWT_VAL(BOOT_CUSTOM_START)
    boot_custom_start(flash_base, &rsp);
     60c:	a901      	add	r1, sp, #4
     60e:	9800      	ldr	r0, [sp, #0]
     610:	f001 fcac 	bl	1f6c <boot_custom_start>
    hal_system_start((void *)(flash_base + rsp.br_image_off +
                              rsp.br_hdr->ih_hdr_size));
#endif

    return 0;
}
     614:	2000      	movs	r0, #0
     616:	b005      	add	sp, #20
     618:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
     61c:	2300      	movs	r3, #0
     61e:	461a      	mov	r2, r3
     620:	4619      	mov	r1, r3
     622:	4618      	mov	r0, r3
     624:	f001 f886 	bl	1734 <__assert_func>
    assert(rc == 0);
     628:	2300      	movs	r3, #0
     62a:	461a      	mov	r2, r3
     62c:	4619      	mov	r1, r3
     62e:	4618      	mov	r0, r3
     630:	f001 f880 	bl	1734 <__assert_func>
    assert(rc == 0);
     634:	2300      	movs	r3, #0
     636:	461a      	mov	r2, r3
     638:	4619      	mov	r1, r3
     63a:	4618      	mov	r0, r3
     63c:	f001 f87a 	bl	1734 <__assert_func>

00000640 <hal_bsp_flash_dev>:

/// Return the Flash Device for the ID. 0 for Internal Flash ROM, 1 for External SPI Flash
const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id >= ARRAY_SIZE(flash_devs)) {
     640:	2801      	cmp	r0, #1
     642:	d803      	bhi.n	64c <hal_bsp_flash_dev+0xc>
        return NULL;
    }
    return flash_devs[id];
     644:	4b02      	ldr	r3, [pc, #8]	; (650 <hal_bsp_flash_dev+0x10>)
     646:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
     64a:	4770      	bx	lr
        return NULL;
     64c:	2000      	movs	r0, #0
}
     64e:	4770      	bx	lr
     650:	00005500 	.word	0x00005500

00000654 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
     654:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
     656:	f7ff fd97 	bl	188 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
     65a:	f000 fe93 	bl	1384 <nrf52_periph_create>
}
     65e:	bd08      	pop	{r3, pc}

00000660 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
     660:	4a09      	ldr	r2, [pc, #36]	; (688 <NVIC_Relocate+0x28>)
     662:	4b0a      	ldr	r3, [pc, #40]	; (68c <NVIC_Relocate+0x2c>)
     664:	429a      	cmp	r2, r3
     666:	d00a      	beq.n	67e <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     668:	2300      	movs	r3, #0
     66a:	e006      	b.n	67a <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
     66c:	4a07      	ldr	r2, [pc, #28]	; (68c <NVIC_Relocate+0x2c>)
     66e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
     672:	4a05      	ldr	r2, [pc, #20]	; (688 <NVIC_Relocate+0x28>)
     674:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     678:	3301      	adds	r3, #1
     67a:	2b35      	cmp	r3, #53	; 0x35
     67c:	ddf6      	ble.n	66c <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
     67e:	4a02      	ldr	r2, [pc, #8]	; (688 <NVIC_Relocate+0x28>)
     680:	4b03      	ldr	r3, [pc, #12]	; (690 <NVIC_Relocate+0x30>)
     682:	609a      	str	r2, [r3, #8]
#endif
}
     684:	4770      	bx	lr
     686:	bf00      	nop
     688:	20000000 	.word	0x20000000
     68c:	00000000 	.word	0x00000000
     690:	e000ed00 	.word	0xe000ed00

00000694 <hal_spiflash_sector_info>:
}

static int
hal_spiflash_sector_info(const struct hal_flash *hal_flash_dev, int idx,
        uint32_t *address, uint32_t *sz)
{
     694:	b410      	push	{r4}
    const struct spiflash_dev *dev = (const struct spiflash_dev *)hal_flash_dev;

    *address = idx * dev->sector_size;
     696:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
     698:	fb01 f104 	mul.w	r1, r1, r4
     69c:	6011      	str	r1, [r2, #0]
    *sz = dev->sector_size;
     69e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     6a0:	601a      	str	r2, [r3, #0]
    return 0;
}
     6a2:	2000      	movs	r0, #0
     6a4:	bc10      	pop	{r4}
     6a6:	4770      	bx	lr

000006a8 <spiflash_release_power_down_generic>:
{
     6a8:	b530      	push	{r4, r5, lr}
     6aa:	b083      	sub	sp, #12
     6ac:	4605      	mov	r5, r0
    uint8_t cmd[1] = { SPIFLASH_RELEASE_POWER_DOWN };
     6ae:	ac02      	add	r4, sp, #8
     6b0:	23ab      	movs	r3, #171	; 0xab
     6b2:	f804 3d04 	strb.w	r3, [r4, #-4]!
    hal_gpio_write(dev->ss_pin, 0);
     6b6:	2100      	movs	r1, #0
     6b8:	6a80      	ldr	r0, [r0, #40]	; 0x28
     6ba:	f000 fb44 	bl	d46 <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     6be:	2301      	movs	r3, #1
     6c0:	4622      	mov	r2, r4
     6c2:	4621      	mov	r1, r4
     6c4:	6a28      	ldr	r0, [r5, #32]
     6c6:	f000 fd89 	bl	11dc <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     6ca:	2101      	movs	r1, #1
     6cc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     6ce:	f000 fb3a 	bl	d46 <hal_gpio_write>
}
     6d2:	b003      	add	sp, #12
     6d4:	bd30      	pop	{r4, r5, pc}

000006d6 <spiflash_delay_us>:
{
     6d6:	b508      	push	{r3, lr}
    os_cputime_delay_usecs(usecs);
     6d8:	f001 f8b0 	bl	183c <os_cputime_delay_usecs>
}
     6dc:	bd08      	pop	{r3, pc}

000006de <spiflash_read_jedec_id>:
{
     6de:	b5f0      	push	{r4, r5, r6, r7, lr}
     6e0:	b083      	sub	sp, #12
     6e2:	4604      	mov	r4, r0
     6e4:	460f      	mov	r7, r1
     6e6:	4616      	mov	r6, r2
     6e8:	461d      	mov	r5, r3
    uint8_t cmd[4] = { SPIFLASH_READ_JEDEC_ID, 0, 0, 0 };
     6ea:	239f      	movs	r3, #159	; 0x9f
     6ec:	f88d 3004 	strb.w	r3, [sp, #4]
     6f0:	2100      	movs	r1, #0
     6f2:	f88d 1005 	strb.w	r1, [sp, #5]
     6f6:	f88d 1006 	strb.w	r1, [sp, #6]
     6fa:	f88d 1007 	strb.w	r1, [sp, #7]
    hal_gpio_write(dev->ss_pin, 0);
     6fe:	6a80      	ldr	r0, [r0, #40]	; 0x28
     700:	f000 fb21 	bl	d46 <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     704:	2304      	movs	r3, #4
     706:	eb0d 0203 	add.w	r2, sp, r3
     70a:	4611      	mov	r1, r2
     70c:	6a20      	ldr	r0, [r4, #32]
     70e:	f000 fd65 	bl	11dc <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     712:	2101      	movs	r1, #1
     714:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     716:	f000 fb16 	bl	d46 <hal_gpio_write>
    if (manufacturer) {
     71a:	b117      	cbz	r7, 722 <spiflash_read_jedec_id+0x44>
        *manufacturer = cmd[1];
     71c:	f89d 3005 	ldrb.w	r3, [sp, #5]
     720:	703b      	strb	r3, [r7, #0]
    if (memory_type) {
     722:	b116      	cbz	r6, 72a <spiflash_read_jedec_id+0x4c>
        *memory_type = cmd[2];
     724:	f89d 3006 	ldrb.w	r3, [sp, #6]
     728:	7033      	strb	r3, [r6, #0]
    if (capacity) {
     72a:	b115      	cbz	r5, 732 <spiflash_read_jedec_id+0x54>
        *capacity = cmd[3];
     72c:	f89d 3007 	ldrb.w	r3, [sp, #7]
     730:	702b      	strb	r3, [r5, #0]
}
     732:	2000      	movs	r0, #0
     734:	b003      	add	sp, #12
     736:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000738 <spiflash_read_status>:
{
     738:	b538      	push	{r3, r4, r5, lr}
     73a:	4604      	mov	r4, r0
    hal_gpio_write(dev->ss_pin, 0);
     73c:	2100      	movs	r1, #0
     73e:	6a80      	ldr	r0, [r0, #40]	; 0x28
     740:	f000 fb01 	bl	d46 <hal_gpio_write>
    hal_spi_tx_val(dev->spi_num, cmd);
     744:	2105      	movs	r1, #5
     746:	6a20      	ldr	r0, [r4, #32]
     748:	f000 fd0e 	bl	1168 <hal_spi_tx_val>
    val = hal_spi_tx_val(dev->spi_num, 0xFF);
     74c:	21ff      	movs	r1, #255	; 0xff
     74e:	6a20      	ldr	r0, [r4, #32]
     750:	f000 fd0a 	bl	1168 <hal_spi_tx_val>
     754:	b2c5      	uxtb	r5, r0
    hal_gpio_write(dev->ss_pin, 1);
     756:	2101      	movs	r1, #1
     758:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     75a:	f000 faf4 	bl	d46 <hal_gpio_write>
}
     75e:	4628      	mov	r0, r5
     760:	bd38      	pop	{r3, r4, r5, pc}

00000762 <spiflash_device_ready>:
{
     762:	b510      	push	{r4, lr}
     764:	4604      	mov	r4, r0
    dev->ready = !(spiflash_read_status(dev) & SPIFLASH_STATUS_BUSY);
     766:	f7ff ffe7 	bl	738 <spiflash_read_status>
     76a:	f080 0001 	eor.w	r0, r0, #1
     76e:	f000 0001 	and.w	r0, r0, #1
     772:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
     776:	bd10      	pop	{r4, pc}

00000778 <spiflash_wait_ready_till>:
    if (dev->ready) {
     778:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
     77c:	b9eb      	cbnz	r3, 7ba <spiflash_wait_ready_till+0x42>
{
     77e:	b570      	push	{r4, r5, r6, lr}
     780:	4604      	mov	r4, r0
     782:	460e      	mov	r6, r1
     784:	4615      	mov	r5, r2
    if (step_us < MYNEWT_VAL(SPIFLASH_READ_STATUS_INTERVAL)) {
     786:	2a09      	cmp	r2, #9
     788:	d904      	bls.n	794 <spiflash_wait_ready_till+0x1c>
    } else if (step_us > 1000000) {
     78a:	4b0e      	ldr	r3, [pc, #56]	; (7c4 <spiflash_wait_ready_till+0x4c>)
     78c:	429a      	cmp	r2, r3
     78e:	d902      	bls.n	796 <spiflash_wait_ready_till+0x1e>
        step_us = 1000000;
     790:	4d0c      	ldr	r5, [pc, #48]	; (7c4 <spiflash_wait_ready_till+0x4c>)
     792:	e000      	b.n	796 <spiflash_wait_ready_till+0x1e>
        step_us = MYNEWT_VAL(SPIFLASH_READ_STATUS_INTERVAL);
     794:	250a      	movs	r5, #10
    limit = os_cputime_get32() + os_cputime_usecs_to_ticks(timeout_us);
     796:	f001 f841 	bl	181c <os_cputime_get32>
     79a:	4406      	add	r6, r0
        if (spiflash_device_ready(dev)) {
     79c:	4620      	mov	r0, r4
     79e:	f7ff ffe0 	bl	762 <spiflash_device_ready>
     7a2:	b960      	cbnz	r0, 7be <spiflash_wait_ready_till+0x46>
        spiflash_delay_us(step_us);
     7a4:	4628      	mov	r0, r5
     7a6:	f7ff ff96 	bl	6d6 <spiflash_delay_us>
    } while (CPUTIME_LT(os_cputime_get32(), limit));
     7aa:	f001 f837 	bl	181c <os_cputime_get32>
     7ae:	1b80      	subs	r0, r0, r6
     7b0:	2800      	cmp	r0, #0
     7b2:	dbf3      	blt.n	79c <spiflash_wait_ready_till+0x24>
    int rc = -1;
     7b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     7b8:	e002      	b.n	7c0 <spiflash_wait_ready_till+0x48>
        return 0;
     7ba:	2000      	movs	r0, #0
}
     7bc:	4770      	bx	lr
            rc = 0;
     7be:	2000      	movs	r0, #0
}
     7c0:	bd70      	pop	{r4, r5, r6, pc}
     7c2:	bf00      	nop
     7c4:	000f4240 	.word	0x000f4240

000007c8 <spiflash_wait_ready>:
{
     7c8:	b508      	push	{r3, lr}
    return spiflash_wait_ready_till(dev, timeout_ms * 1000, timeout_ms * 10);
     7ca:	eb01 0381 	add.w	r3, r1, r1, lsl #2
     7ce:	005a      	lsls	r2, r3, #1
     7d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     7d4:	fb03 f101 	mul.w	r1, r3, r1
     7d8:	f7ff ffce 	bl	778 <spiflash_wait_ready_till>
}
     7dc:	bd08      	pop	{r3, pc}

000007de <hal_spiflash_read>:
{
     7de:	b570      	push	{r4, r5, r6, lr}
     7e0:	b082      	sub	sp, #8
     7e2:	4605      	mov	r5, r0
     7e4:	4616      	mov	r6, r2
     7e6:	461c      	mov	r4, r3
    uint8_t cmd[] = { SPIFLASH_READ,
     7e8:	2303      	movs	r3, #3
     7ea:	f88d 3004 	strb.w	r3, [sp, #4]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     7ee:	f3c1 4307 	ubfx	r3, r1, #16, #8
    uint8_t cmd[] = { SPIFLASH_READ,
     7f2:	f88d 3005 	strb.w	r3, [sp, #5]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     7f6:	f3c1 2307 	ubfx	r3, r1, #8, #8
    uint8_t cmd[] = { SPIFLASH_READ,
     7fa:	f88d 3006 	strb.w	r3, [sp, #6]
     7fe:	f88d 1007 	strb.w	r1, [sp, #7]
    err = spiflash_wait_ready(dev, 100);
     802:	2164      	movs	r1, #100	; 0x64
     804:	f7ff ffe0 	bl	7c8 <spiflash_wait_ready>
    if (!err) {
     808:	b900      	cbnz	r0, 80c <hal_spiflash_read+0x2e>
        if (len > 0) {
     80a:	b914      	cbnz	r4, 812 <hal_spiflash_read+0x34>
}
     80c:	2000      	movs	r0, #0
     80e:	b002      	add	sp, #8
     810:	bd70      	pop	{r4, r5, r6, pc}
    hal_gpio_write(dev->ss_pin, 0);
     812:	2100      	movs	r1, #0
     814:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     816:	f000 fa96 	bl	d46 <hal_gpio_write>
            hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     81a:	2304      	movs	r3, #4
     81c:	2200      	movs	r2, #0
     81e:	eb0d 0103 	add.w	r1, sp, r3
     822:	6a28      	ldr	r0, [r5, #32]
     824:	f000 fcda 	bl	11dc <hal_spi_txrx>
            memset(buf, 0xFF, len);
     828:	4622      	mov	r2, r4
     82a:	21ff      	movs	r1, #255	; 0xff
     82c:	4630      	mov	r0, r6
     82e:	f001 fae1 	bl	1df4 <memset>
            hal_spi_txrx(dev->spi_num, buf, buf, len);
     832:	4623      	mov	r3, r4
     834:	4632      	mov	r2, r6
     836:	4631      	mov	r1, r6
     838:	6a28      	ldr	r0, [r5, #32]
     83a:	f000 fccf 	bl	11dc <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     83e:	2101      	movs	r1, #1
     840:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     842:	f000 fa80 	bl	d46 <hal_gpio_write>
     846:	e7e1      	b.n	80c <hal_spiflash_read+0x2e>

00000848 <spiflash_write_enable>:
{
     848:	b510      	push	{r4, lr}
     84a:	4604      	mov	r4, r0
    hal_gpio_write(dev->ss_pin, 0);
     84c:	2100      	movs	r1, #0
     84e:	6a80      	ldr	r0, [r0, #40]	; 0x28
     850:	f000 fa79 	bl	d46 <hal_gpio_write>
    hal_spi_tx_val(dev->spi_num, cmd);
     854:	2106      	movs	r1, #6
     856:	6a20      	ldr	r0, [r4, #32]
     858:	f000 fc86 	bl	1168 <hal_spi_tx_val>
    hal_gpio_write(dev->ss_pin, 1);
     85c:	2101      	movs	r1, #1
     85e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     860:	f000 fa71 	bl	d46 <hal_gpio_write>
}
     864:	2000      	movs	r0, #0
     866:	bd10      	pop	{r4, pc}

00000868 <hal_spiflash_write>:
{
     868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     86c:	b082      	sub	sp, #8
     86e:	4605      	mov	r5, r0
     870:	460e      	mov	r6, r1
     872:	4690      	mov	r8, r2
     874:	461f      	mov	r7, r3
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
     876:	2300      	movs	r3, #0
     878:	9301      	str	r3, [sp, #4]
     87a:	2302      	movs	r3, #2
     87c:	f88d 3004 	strb.w	r3, [sp, #4]
    if (spiflash_wait_ready(dev, 100) != 0) {
     880:	2164      	movs	r1, #100	; 0x64
     882:	f7ff ffa1 	bl	7c8 <spiflash_wait_ready>
     886:	2800      	cmp	r0, #0
     888:	d14a      	bne.n	920 <hal_spiflash_write+0xb8>
     88a:	4603      	mov	r3, r0
    pp_time_typical = dev->characteristics->tbp1.typical;
     88c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
     88e:	f8d2 9028 	ldr.w	r9, [r2, #40]	; 0x28
    pp_time_maximum = dev->characteristics->tpp.maximum;
     892:	f8d2 a024 	ldr.w	sl, [r2, #36]	; 0x24
    if (pp_time_maximum < pp_time_typical) {
     896:	45d1      	cmp	r9, sl
     898:	d840      	bhi.n	91c <hal_spiflash_write+0xb4>
    while (len) {
     89a:	2f00      	cmp	r7, #0
     89c:	d042      	beq.n	924 <hal_spiflash_write+0xbc>
        spiflash_write_enable(dev);
     89e:	4628      	mov	r0, r5
     8a0:	f7ff ffd2 	bl	848 <spiflash_write_enable>
        cmd[1] = (uint8_t)(addr >> 16);
     8a4:	f3c6 4307 	ubfx	r3, r6, #16, #8
     8a8:	f88d 3005 	strb.w	r3, [sp, #5]
        cmd[2] = (uint8_t)(addr >> 8);
     8ac:	f3c6 2307 	ubfx	r3, r6, #8, #8
     8b0:	f88d 3006 	strb.w	r3, [sp, #6]
        cmd[3] = (uint8_t)(addr);
     8b4:	f88d 6007 	strb.w	r6, [sp, #7]
        page_limit = (addr & ~(dev->page_size - 1)) + dev->page_size;
     8b8:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     8ba:	425c      	negs	r4, r3
     8bc:	4034      	ands	r4, r6
     8be:	441c      	add	r4, r3
        to_write = page_limit - addr > len ? len :  page_limit - addr;
     8c0:	1ba4      	subs	r4, r4, r6
     8c2:	42bc      	cmp	r4, r7
     8c4:	bf28      	it	cs
     8c6:	463c      	movcs	r4, r7
    hal_gpio_write(dev->ss_pin, 0);
     8c8:	2100      	movs	r1, #0
     8ca:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     8cc:	f000 fa3b 	bl	d46 <hal_gpio_write>
        hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     8d0:	2304      	movs	r3, #4
     8d2:	2200      	movs	r2, #0
     8d4:	eb0d 0103 	add.w	r1, sp, r3
     8d8:	6a28      	ldr	r0, [r5, #32]
     8da:	f000 fc7f 	bl	11dc <hal_spi_txrx>
        hal_spi_txrx(dev->spi_num, (void *)u8buf, NULL, to_write);
     8de:	4623      	mov	r3, r4
     8e0:	2200      	movs	r2, #0
     8e2:	4641      	mov	r1, r8
     8e4:	6a28      	ldr	r0, [r5, #32]
     8e6:	f000 fc79 	bl	11dc <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     8ea:	2101      	movs	r1, #1
     8ec:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     8ee:	f000 fa2a 	bl	d46 <hal_gpio_write>
        dev->ready = false;
     8f2:	2300      	movs	r3, #0
     8f4:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        spiflash_delay_us(pp_time_typical);
     8f8:	4648      	mov	r0, r9
     8fa:	f7ff feec 	bl	6d6 <spiflash_delay_us>
        rc = spiflash_wait_ready_till(dev, pp_time_maximum - pp_time_typical,
     8fe:	ebaa 0109 	sub.w	r1, sl, r9
     902:	4a0a      	ldr	r2, [pc, #40]	; (92c <hal_spiflash_write+0xc4>)
     904:	fba2 3201 	umull	r3, r2, r2, r1
     908:	08d2      	lsrs	r2, r2, #3
     90a:	4628      	mov	r0, r5
     90c:	f7ff ff34 	bl	778 <spiflash_wait_ready_till>
        if (rc) {
     910:	4603      	mov	r3, r0
     912:	b938      	cbnz	r0, 924 <hal_spiflash_write+0xbc>
        addr += to_write;
     914:	4426      	add	r6, r4
        u8buf += to_write;
     916:	44a0      	add	r8, r4
        len -= to_write;
     918:	1b3f      	subs	r7, r7, r4
     91a:	e7be      	b.n	89a <hal_spiflash_write+0x32>
        pp_time_maximum = pp_time_typical;
     91c:	46ca      	mov	sl, r9
     91e:	e7bc      	b.n	89a <hal_spiflash_write+0x32>
        rc = -1;
     920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
     924:	4618      	mov	r0, r3
     926:	b002      	add	sp, #8
     928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     92c:	cccccccd 	.word	0xcccccccd

00000930 <spiflash_execute_erase>:
{
     930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     932:	4604      	mov	r4, r0
     934:	460d      	mov	r5, r1
     936:	4617      	mov	r7, r2
     938:	461e      	mov	r6, r3
    if (spiflash_wait_ready(dev, 100) != 0) {
     93a:	2164      	movs	r1, #100	; 0x64
     93c:	f7ff ff44 	bl	7c8 <spiflash_wait_ready>
     940:	bb68      	cbnz	r0, 99e <spiflash_execute_erase+0x6e>
    spiflash_write_enable(dev);
     942:	4620      	mov	r0, r4
     944:	f7ff ff80 	bl	848 <spiflash_write_enable>
    spiflash_read_status(dev);
     948:	4620      	mov	r0, r4
     94a:	f7ff fef5 	bl	738 <spiflash_read_status>
    hal_gpio_write(dev->ss_pin, 0);
     94e:	2100      	movs	r1, #0
     950:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     952:	f000 f9f8 	bl	d46 <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, (void *)buf, NULL, size);
     956:	463b      	mov	r3, r7
     958:	2200      	movs	r2, #0
     95a:	4629      	mov	r1, r5
     95c:	6a20      	ldr	r0, [r4, #32]
     95e:	f000 fc3d 	bl	11dc <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
     962:	2101      	movs	r1, #1
     964:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     966:	f000 f9ee 	bl	d46 <hal_gpio_write>
    dev->ready = false;
     96a:	2300      	movs	r3, #0
     96c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    start_time = os_cputime_get32();
     970:	f000 ff54 	bl	181c <os_cputime_get32>
     974:	4605      	mov	r5, r0
    spiflash_delay_us(delay_spec->typical);
     976:	6830      	ldr	r0, [r6, #0]
     978:	f7ff fead 	bl	6d6 <spiflash_delay_us>
    wait_time_us = os_cputime_ticks_to_usecs(os_cputime_get32() - start_time);
     97c:	f000 ff4e 	bl	181c <os_cputime_get32>
     980:	1b40      	subs	r0, r0, r5
    if (wait_time_us > delay_spec->maximum) {
     982:	6871      	ldr	r1, [r6, #4]
     984:	4281      	cmp	r1, r0
     986:	d308      	bcc.n	99a <spiflash_execute_erase+0x6a>
        wait_time_us = delay_spec->maximum - wait_time_us;
     988:	1a09      	subs	r1, r1, r0
    rc = spiflash_wait_ready_till(dev, wait_time_us, wait_time_us / 50);
     98a:	4a06      	ldr	r2, [pc, #24]	; (9a4 <spiflash_execute_erase+0x74>)
     98c:	fba2 3201 	umull	r3, r2, r2, r1
     990:	0912      	lsrs	r2, r2, #4
     992:	4620      	mov	r0, r4
     994:	f7ff fef0 	bl	778 <spiflash_wait_ready_till>
}
     998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        wait_time_us = 0;
     99a:	2100      	movs	r1, #0
     99c:	e7f5      	b.n	98a <spiflash_execute_erase+0x5a>
        rc = -1;
     99e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
     9a2:	e7f9      	b.n	998 <spiflash_execute_erase+0x68>
     9a4:	51eb851f 	.word	0x51eb851f

000009a8 <spiflash_erase_cmd>:

static int
spiflash_erase_cmd(struct spiflash_dev *dev, uint8_t cmd, uint32_t addr,
                   const struct spiflash_time_spec *time_spec)
{
     9a8:	b500      	push	{lr}
     9aa:	b083      	sub	sp, #12
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
     9ac:	f88d 1004 	strb.w	r1, [sp, #4]
     9b0:	f3c2 4107 	ubfx	r1, r2, #16, #8
     9b4:	f88d 1005 	strb.w	r1, [sp, #5]
     9b8:	f3c2 2107 	ubfx	r1, r2, #8, #8
     9bc:	f88d 1006 	strb.w	r1, [sp, #6]
     9c0:	f88d 2007 	strb.w	r2, [sp, #7]
                       (uint8_t)addr };
    return spiflash_execute_erase(dev, buf, sizeof(buf), time_spec);
     9c4:	2204      	movs	r2, #4
     9c6:	eb0d 0102 	add.w	r1, sp, r2
     9ca:	f7ff ffb1 	bl	930 <spiflash_execute_erase>

}
     9ce:	b003      	add	sp, #12
     9d0:	f85d fb04 	ldr.w	pc, [sp], #4

000009d4 <spiflash_sector_erase>:

int
spiflash_sector_erase(struct spiflash_dev *dev, uint32_t addr)
{
     9d4:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_SECTOR_ERASE, addr,
     9d6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     9d8:	460a      	mov	r2, r1
     9da:	2120      	movs	r1, #32
     9dc:	f7ff ffe4 	bl	9a8 <spiflash_erase_cmd>
                              &dev->characteristics->tse);
}
     9e0:	bd08      	pop	{r3, pc}

000009e2 <hal_spiflash_erase_sector>:
{
     9e2:	b508      	push	{r3, lr}
    return spiflash_sector_erase(dev, addr);
     9e4:	f7ff fff6 	bl	9d4 <spiflash_sector_erase>
}
     9e8:	bd08      	pop	{r3, pc}

000009ea <spiflash_block_32k_erase>:

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
int
spiflash_block_32k_erase(struct spiflash_dev *dev, uint32_t addr)
{
     9ea:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
                              &dev->characteristics->tbe1);
     9ec:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
     9ee:	3308      	adds	r3, #8
     9f0:	460a      	mov	r2, r1
     9f2:	2152      	movs	r1, #82	; 0x52
     9f4:	f7ff ffd8 	bl	9a8 <spiflash_erase_cmd>
}
     9f8:	bd08      	pop	{r3, pc}

000009fa <spiflash_block_64k_erase>:
#endif

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
int
spiflash_block_64k_erase(struct spiflash_dev *dev, uint32_t addr)
{
     9fa:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
                              &dev->characteristics->tbe2);
     9fc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
     9fe:	3310      	adds	r3, #16
     a00:	460a      	mov	r2, r1
     a02:	21d8      	movs	r1, #216	; 0xd8
     a04:	f7ff ffd0 	bl	9a8 <spiflash_erase_cmd>
}
     a08:	bd08      	pop	{r3, pc}

00000a0a <spiflash_chip_erase>:
#endif

int
spiflash_chip_erase(struct spiflash_dev *dev)
{
     a0a:	b500      	push	{lr}
     a0c:	b083      	sub	sp, #12
    uint8_t buf[1] = { SPIFLASH_CHIP_ERASE };
     a0e:	a902      	add	r1, sp, #8
     a10:	2360      	movs	r3, #96	; 0x60
     a12:	f801 3d04 	strb.w	r3, [r1, #-4]!

    return spiflash_execute_erase(dev, buf, sizeof(buf),
                                  &dev->characteristics->tce);
     a16:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_execute_erase(dev, buf, sizeof(buf),
     a18:	3318      	adds	r3, #24
     a1a:	2201      	movs	r2, #1
     a1c:	f7ff ff88 	bl	930 <spiflash_execute_erase>
}
     a20:	b003      	add	sp, #12
     a22:	f85d fb04 	ldr.w	pc, [sp], #4

00000a26 <spiflash_erase>:

int
spiflash_erase(struct spiflash_dev *dev, uint32_t address, uint32_t size)
{
     a26:	b570      	push	{r4, r5, r6, lr}
     a28:	4606      	mov	r6, r0
     a2a:	4615      	mov	r5, r2
    int rc = 0;

    if (address == 0 && size == dev->hal.hf_size) {
     a2c:	460c      	mov	r4, r1
     a2e:	b911      	cbnz	r1, a36 <spiflash_erase+0x10>
     a30:	6883      	ldr	r3, [r0, #8]
     a32:	4293      	cmp	r3, r2
     a34:	d005      	beq.n	a42 <spiflash_erase+0x1c>
        return spiflash_chip_erase(dev);
    }
    address &= ~0xFFFU;
     a36:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
     a3a:	f024 040f 	bic.w	r4, r4, #15
    int rc = 0;
     a3e:	2300      	movs	r3, #0
    while (size) {
     a40:	e01c      	b.n	a7c <spiflash_erase+0x56>
        return spiflash_chip_erase(dev);
     a42:	f7ff ffe2 	bl	a0a <spiflash_chip_erase>
     a46:	4603      	mov	r3, r0
     a48:	e010      	b.n	a6c <spiflash_erase+0x46>
#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
            /* 64 KB erase if possible */
            rc = spiflash_block_64k_erase(dev, address);
     a4a:	4621      	mov	r1, r4
     a4c:	4630      	mov	r0, r6
     a4e:	f7ff ffd4 	bl	9fa <spiflash_block_64k_erase>
            if (rc) {
     a52:	4603      	mov	r3, r0
     a54:	b950      	cbnz	r0, a6c <spiflash_erase+0x46>
                goto err;
            }
            address += 0x10000;
     a56:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
            size -= 0x10000;
     a5a:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
            continue;
     a5e:	e00d      	b.n	a7c <spiflash_erase+0x56>
        }
#endif
#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
            /* 32 KB erase if possible */
            rc = spiflash_block_32k_erase(dev, address);
     a60:	4621      	mov	r1, r4
     a62:	4630      	mov	r0, r6
     a64:	f7ff ffc1 	bl	9ea <spiflash_block_32k_erase>
            if (rc) {
     a68:	4603      	mov	r3, r0
     a6a:	b108      	cbz	r0, a70 <spiflash_erase+0x4a>
            size = 0;
        }
    }
err:
    return rc;
}
     a6c:	4618      	mov	r0, r3
     a6e:	bd70      	pop	{r4, r5, r6, pc}
            address += 0x8000;
     a70:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
            size -= 0x8000;
     a74:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
            continue;
     a78:	e000      	b.n	a7c <spiflash_erase+0x56>
            size = 0;
     a7a:	2500      	movs	r5, #0
    while (size) {
     a7c:	2d00      	cmp	r5, #0
     a7e:	d0f5      	beq.n	a6c <spiflash_erase+0x46>
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
     a80:	b2a3      	uxth	r3, r4
     a82:	b913      	cbnz	r3, a8a <spiflash_erase+0x64>
     a84:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
     a88:	d2df      	bcs.n	a4a <spiflash_erase+0x24>
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
     a8a:	f3c4 030e 	ubfx	r3, r4, #0, #15
     a8e:	b913      	cbnz	r3, a96 <spiflash_erase+0x70>
     a90:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
     a94:	d2e4      	bcs.n	a60 <spiflash_erase+0x3a>
        rc = spiflash_sector_erase(dev, address);
     a96:	4621      	mov	r1, r4
     a98:	4630      	mov	r0, r6
     a9a:	f7ff ff9b 	bl	9d4 <spiflash_sector_erase>
        if (rc) {
     a9e:	4603      	mov	r3, r0
     aa0:	2800      	cmp	r0, #0
     aa2:	d1e3      	bne.n	a6c <spiflash_erase+0x46>
        address += MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     aa4:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
        if (size > MYNEWT_VAL(SPIFLASH_SECTOR_SIZE)) {
     aa8:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
     aac:	d9e5      	bls.n	a7a <spiflash_erase+0x54>
            size -= MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     aae:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
     ab2:	e7e3      	b.n	a7c <spiflash_erase+0x56>

00000ab4 <hal_spiflash_erase>:
{
     ab4:	b508      	push	{r3, lr}
    return spiflash_erase(dev, address, size);
     ab6:	f7ff ffb6 	bl	a26 <spiflash_erase>
}
     aba:	bd08      	pop	{r3, pc}

00000abc <spiflash_identify>:

void blink_backlight(int pattern_id, int repetitions);  ////  Defined in blink.c

int
spiflash_identify(struct spiflash_dev *dev)
{
     abc:	b570      	push	{r4, r5, r6, lr}
     abe:	b082      	sub	sp, #8
     ac0:	4606      	mov	r6, r0
    int i;
    int j;
    uint8_t manufacturer = 0;
     ac2:	2300      	movs	r3, #0
     ac4:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t memory_type = 0;
     ac8:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t capacity = 0;
     acc:	ac02      	add	r4, sp, #8
     ace:	f804 3d03 	strb.w	r3, [r4, #-3]!

    spiflash_lock(dev);

    /* Only one chip specified, no need for search*/
    if ((sizeof(supported_chips) / sizeof(supported_chips[0])) == 2) {
        supported_chips[0].fc_release_power_down(dev);
     ad2:	4d12      	ldr	r5, [pc, #72]	; (b1c <spiflash_identify+0x60>)
     ad4:	686b      	ldr	r3, [r5, #4]
     ad6:	4798      	blx	r3
        spiflash_read_jedec_id(dev, &manufacturer, &memory_type, &capacity);
     ad8:	4623      	mov	r3, r4
     ada:	f10d 0206 	add.w	r2, sp, #6
     ade:	f10d 0107 	add.w	r1, sp, #7
     ae2:	4630      	mov	r0, r6
     ae4:	f7ff fdfb 	bl	6de <spiflash_read_jedec_id>

        ////Begin
        if (manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
     ae8:	782a      	ldrb	r2, [r5, #0]
     aea:	f89d 3007 	ldrb.w	r3, [sp, #7]
        /* If BSP defined SpiFlash manufacturer or memory type does not
         * match SpiFlash is most likely not connected, connected to
         * different pins, or of different type.
         * It is unlikely that flash depended packaged will work correctly.
         */
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
     aee:	429a      	cmp	r2, r3
     af0:	d10e      	bne.n	b10 <spiflash_identify+0x54>
     af2:	786a      	ldrb	r2, [r5, #1]
     af4:	f89d 3006 	ldrb.w	r3, [sp, #6]
     af8:	429a      	cmp	r2, r3
     afa:	d109      	bne.n	b10 <spiflash_identify+0x54>
     afc:	78aa      	ldrb	r2, [r5, #2]
     afe:	f89d 3005 	ldrb.w	r3, [sp, #5]
     b02:	429a      	cmp	r2, r3
     b04:	d104      	bne.n	b10 <spiflash_identify+0x54>
            memory_type != supported_chips[0].fc_jedec_id.ji_type ||
            capacity != supported_chips[0].fc_jedec_id.ji_capacity) {
            rc = -1;
            goto err;
        }
        dev->flash_chip = &supported_chips[0];
     b06:	4b05      	ldr	r3, [pc, #20]	; (b1c <spiflash_identify+0x60>)
     b08:	63b3      	str	r3, [r6, #56]	; 0x38
    }
err:
    spiflash_unlock(dev);

    return rc;
}
     b0a:	2000      	movs	r0, #0
     b0c:	b002      	add	sp, #8
     b0e:	bd70      	pop	{r4, r5, r6, pc}
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
     b10:	2300      	movs	r3, #0
     b12:	461a      	mov	r2, r3
     b14:	4619      	mov	r1, r3
     b16:	4618      	mov	r0, r3
     b18:	f000 fe0c 	bl	1734 <__assert_func>
     b1c:	20000128 	.word	0x20000128

00000b20 <hal_spiflash_init>:

static int
hal_spiflash_init(const struct hal_flash *hal_flash_dev)
{
     b20:	b510      	push	{r4, lr}
     b22:	4604      	mov	r4, r0
    os_callout_init(&dev->apd_tmo_co, os_eventq_dflt_get(),
                    spiflash_apd_tmo_func, dev);
#endif

#if !MYNEWT_VAL(BUS_DRIVER_PRESENT)
    hal_gpio_init_out(dev->ss_pin, 1);
     b24:	2101      	movs	r1, #1
     b26:	6a80      	ldr	r0, [r0, #40]	; 0x28
     b28:	f000 f8f1 	bl	d0e <hal_gpio_init_out>

    (void)hal_spi_disable(dev->spi_num);
     b2c:	6a20      	ldr	r0, [r4, #32]
     b2e:	f000 fab7 	bl	10a0 <hal_spi_disable>

    rc = hal_spi_config(dev->spi_num, &dev->spi_settings);
     b32:	f104 0118 	add.w	r1, r4, #24
     b36:	6a20      	ldr	r0, [r4, #32]
     b38:	f000 fa70 	bl	101c <hal_spi_config>
    if (rc) {
     b3c:	4603      	mov	r3, r0
     b3e:	b108      	cbz	r0, b44 <hal_spiflash_init+0x24>
    hal_spi_enable(dev->spi_num);
#endif
    rc = spiflash_identify(dev);

    return rc;
}
     b40:	4618      	mov	r0, r3
     b42:	bd10      	pop	{r4, pc}
    hal_spi_set_txrx_cb(dev->spi_num, NULL, NULL);
     b44:	2200      	movs	r2, #0
     b46:	4611      	mov	r1, r2
     b48:	6a20      	ldr	r0, [r4, #32]
     b4a:	f000 fb31 	bl	11b0 <hal_spi_set_txrx_cb>
    hal_spi_enable(dev->spi_num);
     b4e:	6a20      	ldr	r0, [r4, #32]
     b50:	f000 fa80 	bl	1054 <hal_spi_enable>
    rc = spiflash_identify(dev);
     b54:	4620      	mov	r0, r4
     b56:	f7ff ffb1 	bl	abc <spiflash_identify>
     b5a:	4603      	mov	r3, r0
    return rc;
     b5c:	e7f0      	b.n	b40 <hal_spiflash_init+0x20>

00000b5e <_exit>:

void _exit(int status);

void
_exit(int status)
{
     b5e:	b508      	push	{r3, lr}
    hal_system_reset();
     b60:	f7ff fb00 	bl	164 <hal_system_reset>

00000b64 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
     b64:	2300      	movs	r3, #0
     b66:	4a07      	ldr	r2, [pc, #28]	; (b84 <nrf52k_flash_wait_ready+0x20>)
     b68:	4293      	cmp	r3, r2
     b6a:	dc06      	bgt.n	b7a <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
     b6c:	4a06      	ldr	r2, [pc, #24]	; (b88 <nrf52k_flash_wait_ready+0x24>)
     b6e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
     b72:	2a01      	cmp	r2, #1
     b74:	d004      	beq.n	b80 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
     b76:	3301      	adds	r3, #1
     b78:	e7f5      	b.n	b66 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
     b7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     b7e:	4770      	bx	lr
            return 0;
     b80:	2000      	movs	r0, #0
}
     b82:	4770      	bx	lr
     b84:	0001869f 	.word	0x0001869f
     b88:	4001e000 	.word	0x4001e000

00000b8c <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
     b8c:	b538      	push	{r3, r4, r5, lr}
     b8e:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
     b90:	f7ff ffe8 	bl	b64 <nrf52k_flash_wait_ready>
     b94:	b9f0      	cbnz	r0, bd4 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     b96:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     b9a:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
     b9c:	4b0f      	ldr	r3, [pc, #60]	; (bdc <nrf52k_flash_erase_sector+0x50>)
     b9e:	2202      	movs	r2, #2
     ba0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
     ba4:	f7ff ffde 	bl	b64 <nrf52k_flash_wait_ready>
     ba8:	b148      	cbz	r0, bbe <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
     baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
     bae:	4a0b      	ldr	r2, [pc, #44]	; (bdc <nrf52k_flash_erase_sector+0x50>)
     bb0:	2100      	movs	r1, #0
     bb2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     bb6:	b904      	cbnz	r4, bba <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
     bb8:	b662      	cpsie	i
    return rc;
}
     bba:	4618      	mov	r0, r3
     bbc:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
     bbe:	4b07      	ldr	r3, [pc, #28]	; (bdc <nrf52k_flash_erase_sector+0x50>)
     bc0:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
     bc4:	f7ff ffce 	bl	b64 <nrf52k_flash_wait_ready>
     bc8:	4603      	mov	r3, r0
     bca:	2800      	cmp	r0, #0
     bcc:	d0ef      	beq.n	bae <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
     bce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     bd2:	e7ec      	b.n	bae <nrf52k_flash_erase_sector+0x22>
        return -1;
     bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     bd8:	e7ef      	b.n	bba <nrf52k_flash_erase_sector+0x2e>
     bda:	bf00      	nop
     bdc:	4001e000 	.word	0x4001e000

00000be0 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
     be0:	2000      	movs	r0, #0
     be2:	4770      	bx	lr

00000be4 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     be4:	297f      	cmp	r1, #127	; 0x7f
     be6:	dc06      	bgt.n	bf6 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
     be8:	0309      	lsls	r1, r1, #12
     bea:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
     bec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     bf0:	601a      	str	r2, [r3, #0]
}
     bf2:	2000      	movs	r0, #0
     bf4:	4770      	bx	lr
{
     bf6:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     bf8:	2300      	movs	r3, #0
     bfa:	461a      	mov	r2, r3
     bfc:	4619      	mov	r1, r3
     bfe:	4618      	mov	r0, r3
     c00:	f000 fd98 	bl	1734 <__assert_func>

00000c04 <nrf52k_flash_write>:
{
     c04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     c08:	b082      	sub	sp, #8
     c0a:	460d      	mov	r5, r1
     c0c:	4616      	mov	r6, r2
     c0e:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
     c10:	f7ff ffa8 	bl	b64 <nrf52k_flash_wait_ready>
     c14:	2800      	cmp	r0, #0
     c16:	d158      	bne.n	cca <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     c18:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     c1c:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     c1e:	4b2c      	ldr	r3, [pc, #176]	; (cd0 <nrf52k_flash_write+0xcc>)
     c20:	2201      	movs	r2, #1
     c22:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
     c26:	f015 0803 	ands.w	r8, r5, #3
     c2a:	d10b      	bne.n	c44 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
     c2c:	2c03      	cmp	r4, #3
     c2e:	d925      	bls.n	c7c <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
     c30:	f7ff ff98 	bl	b64 <nrf52k_flash_wait_ready>
     c34:	2800      	cmp	r0, #0
     c36:	d139      	bne.n	cac <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
     c38:	f856 3b04 	ldr.w	r3, [r6], #4
     c3c:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
     c40:	3c04      	subs	r4, #4
     c42:	e7f3      	b.n	c2c <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
     c44:	f7ff ff8e 	bl	b64 <nrf52k_flash_wait_ready>
     c48:	bb68      	cbnz	r0, ca6 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
     c4a:	f025 0a03 	bic.w	sl, r5, #3
     c4e:	f8da 3000 	ldr.w	r3, [sl]
     c52:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
     c54:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
     c58:	45a1      	cmp	r9, r4
     c5a:	d900      	bls.n	c5e <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
     c5c:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
     c5e:	464a      	mov	r2, r9
     c60:	4631      	mov	r1, r6
     c62:	ab01      	add	r3, sp, #4
     c64:	eb03 0008 	add.w	r0, r3, r8
     c68:	f001 f8b7 	bl	1dda <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
     c6c:	9b01      	ldr	r3, [sp, #4]
     c6e:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
     c72:	444d      	add	r5, r9
        num_bytes -= cnt;
     c74:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
     c78:	444e      	add	r6, r9
     c7a:	e7d7      	b.n	c2c <nrf52k_flash_write+0x28>
    if (num_bytes) {
     c7c:	b164      	cbz	r4, c98 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
     c7e:	682b      	ldr	r3, [r5, #0]
     c80:	a802      	add	r0, sp, #8
     c82:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
     c86:	4622      	mov	r2, r4
     c88:	4631      	mov	r1, r6
     c8a:	f001 f8a6 	bl	1dda <memcpy>
        if (nrf52k_flash_wait_ready()) {
     c8e:	f7ff ff69 	bl	b64 <nrf52k_flash_wait_ready>
     c92:	b9b8      	cbnz	r0, cc4 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
     c94:	9b01      	ldr	r3, [sp, #4]
     c96:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
     c98:	f7ff ff64 	bl	b64 <nrf52k_flash_wait_ready>
     c9c:	4603      	mov	r3, r0
     c9e:	b138      	cbz	r0, cb0 <nrf52k_flash_write+0xac>
        rc = -1;
     ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     ca4:	e004      	b.n	cb0 <nrf52k_flash_write+0xac>
    int rc = -1;
     ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     caa:	e001      	b.n	cb0 <nrf52k_flash_write+0xac>
     cac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
     cb0:	4a07      	ldr	r2, [pc, #28]	; (cd0 <nrf52k_flash_write+0xcc>)
     cb2:	2100      	movs	r1, #0
     cb4:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     cb8:	b907      	cbnz	r7, cbc <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
     cba:	b662      	cpsie	i
}
     cbc:	4618      	mov	r0, r3
     cbe:	b002      	add	sp, #8
     cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
     cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     cc8:	e7f2      	b.n	cb0 <nrf52k_flash_write+0xac>
        return -1;
     cca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     cce:	e7f5      	b.n	cbc <nrf52k_flash_write+0xb8>
     cd0:	4001e000 	.word	0x4001e000

00000cd4 <nrf52k_flash_read>:
{
     cd4:	b508      	push	{r3, lr}
     cd6:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
     cd8:	461a      	mov	r2, r3
     cda:	f001 f87e 	bl	1dda <memcpy>
}
     cde:	2000      	movs	r0, #0
     ce0:	bd08      	pop	{r3, pc}

00000ce2 <hal_gpio_init_in>:
{
    uint32_t conf;
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);

    switch (pull) {
     ce2:	2901      	cmp	r1, #1
     ce4:	d003      	beq.n	cee <hal_gpio_init_in+0xc>
     ce6:	2902      	cmp	r1, #2
     ce8:	d00f      	beq.n	d0a <hal_gpio_init_in+0x28>
    case HAL_GPIO_PULL_DOWN:
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
        break;
    case HAL_GPIO_PULL_NONE:
    default:
        conf = 0;
     cea:	2100      	movs	r1, #0
        break;
     cec:	e000      	b.n	cf0 <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
     cee:	210c      	movs	r1, #12
    }

    port = HAL_GPIO_PORT(pin);
    port->PIN_CNF[pin_index] = conf;
     cf0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     cf4:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
     cf8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
     cfc:	2301      	movs	r3, #1
     cfe:	fa03 f000 	lsl.w	r0, r3, r0
     d02:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c

    return 0;
}
     d06:	2000      	movs	r0, #0
     d08:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
     d0a:	2104      	movs	r1, #4
     d0c:	e7f0      	b.n	cf0 <hal_gpio_init_in+0xe>

00000d0e <hal_gpio_init_out>:
{
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);

    port = HAL_GPIO_PORT(pin);
    if (val) {
     d0e:	b999      	cbnz	r1, d38 <hal_gpio_init_out+0x2a>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
     d10:	2301      	movs	r3, #1
     d12:	4083      	lsls	r3, r0
     d14:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     d18:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    }
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
     d1c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     d20:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
     d24:	2103      	movs	r1, #3
     d26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);
    port->DIRSET = HAL_GPIO_MASK(pin);
     d2a:	2301      	movs	r3, #1
     d2c:	fa03 f000 	lsl.w	r0, r3, r0
     d30:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518

    return 0;
}
     d34:	2000      	movs	r0, #0
     d36:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
     d38:	2301      	movs	r3, #1
     d3a:	4083      	lsls	r3, r0
     d3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     d40:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
     d44:	e7ea      	b.n	d1c <hal_gpio_init_out+0xe>

00000d46 <hal_gpio_write>:
hal_gpio_write(int pin, int val)
{
    NRF_GPIO_Type *port;

    port = HAL_GPIO_PORT(pin);
    if (val) {
     d46:	b939      	cbnz	r1, d58 <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
     d48:	2301      	movs	r3, #1
     d4a:	fa03 f000 	lsl.w	r0, r3, r0
     d4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     d52:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    }
}
     d56:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
     d58:	2301      	movs	r3, #1
     d5a:	fa03 f000 	lsl.w	r0, r3, r0
     d5e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     d62:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
     d66:	4770      	bx	lr

00000d68 <hal_gpio_read>:
hal_gpio_read(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->DIR & HAL_GPIO_MASK(pin)) ?
     d68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     d6c:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
     d70:	2301      	movs	r3, #1
     d72:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
     d74:	421a      	tst	r2, r3
     d76:	d108      	bne.n	d8a <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
     d78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     d7c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
     d80:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
     d84:	f000 0001 	and.w	r0, r0, #1
}
     d88:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
     d8a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     d8e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
     d92:	fa23 f000 	lsr.w	r0, r3, r0
     d96:	f000 0001 	and.w	r0, r0, #1
     d9a:	4770      	bx	lr

00000d9c <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER) || MYNEWT_VAL(SPI_3_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
     d9c:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
     d9e:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
     da0:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
     da4:	b32b      	cbz	r3, df2 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
     da6:	2300      	movs	r3, #0
     da8:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
     dac:	7843      	ldrb	r3, [r0, #1]
     dae:	b303      	cbz	r3, df2 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
     db0:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
     db4:	88c3      	ldrh	r3, [r0, #6]
     db6:	fa13 f382 	uxtah	r3, r3, r2
     dba:	b29b      	uxth	r3, r3
     dbc:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
     dbe:	8881      	ldrh	r1, [r0, #4]
     dc0:	428b      	cmp	r3, r1
     dc2:	d217      	bcs.n	df4 <nrf52_irqm_handler+0x58>
     dc4:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
     dc6:	6984      	ldr	r4, [r0, #24]
     dc8:	4414      	add	r4, r2
     dca:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
     dcc:	1acb      	subs	r3, r1, r3
     dce:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
     dd0:	2bff      	cmp	r3, #255	; 0xff
     dd2:	bf28      	it	cs
     dd4:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
     dd6:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
     dda:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
     dde:	69c1      	ldr	r1, [r0, #28]
     de0:	b129      	cbz	r1, dee <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
     de2:	440a      	add	r2, r1
     de4:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
     de6:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
     dea:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
     dee:	2301      	movs	r3, #1
     df0:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
     df2:	bd38      	pop	{r3, r4, r5, pc}
     df4:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
     df6:	6a03      	ldr	r3, [r0, #32]
     df8:	b10b      	cbz	r3, dfe <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
     dfa:	6a40      	ldr	r0, [r0, #36]	; 0x24
     dfc:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
     dfe:	2300      	movs	r3, #0
     e00:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
     e02:	2340      	movs	r3, #64	; 0x40
     e04:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
     e08:	e7f3      	b.n	df2 <nrf52_irqm_handler+0x56>
	...

00000e0c <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
     e0c:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
     e0e:	4b04      	ldr	r3, [pc, #16]	; (e20 <nrf52_spi0_irq_handler+0x14>)
     e10:	781b      	ldrb	r3, [r3, #0]
     e12:	b103      	cbz	r3, e16 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
     e14:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
     e16:	4802      	ldr	r0, [pc, #8]	; (e20 <nrf52_spi0_irq_handler+0x14>)
     e18:	f7ff ffc0 	bl	d9c <nrf52_irqm_handler>
}
     e1c:	e7fa      	b.n	e14 <nrf52_spi0_irq_handler+0x8>
     e1e:	bf00      	nop
     e20:	20000160 	.word	0x20000160

00000e24 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
     e24:	2301      	movs	r3, #1
     e26:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
     e28:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
     e2c:	2b00      	cmp	r3, #0
     e2e:	d0fb      	beq.n	e28 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
     e30:	2300      	movs	r3, #0
     e32:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
     e36:	4770      	bx	lr

00000e38 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
     e38:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
     e3a:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
     e3c:	780b      	ldrb	r3, [r1, #0]
     e3e:	2b03      	cmp	r3, #3
     e40:	d80c      	bhi.n	e5c <hal_spi_config_slave+0x24>
     e42:	e8df f003 	tbb	[pc, r3]
     e46:	0e02      	.short	0x0e02
     e48:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
     e4a:	2300      	movs	r3, #0
    rc = 0;
     e4c:	4618      	mov	r0, r3
     e4e:	e00a      	b.n	e66 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
     e50:	2304      	movs	r3, #4
    rc = 0;
     e52:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
     e54:	e007      	b.n	e66 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
     e56:	2306      	movs	r3, #6
    rc = 0;
     e58:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
     e5a:	e004      	b.n	e66 <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
     e5c:	2300      	movs	r3, #0
            rc = EINVAL;
     e5e:	2016      	movs	r0, #22
            break;
     e60:	e001      	b.n	e66 <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
     e62:	2302      	movs	r3, #2
    rc = 0;
     e64:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
     e66:	784c      	ldrb	r4, [r1, #1]
     e68:	2c01      	cmp	r4, #1
     e6a:	d005      	beq.n	e78 <hal_spi_config_slave+0x40>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
     e6c:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
     e70:	788b      	ldrb	r3, [r1, #2]
     e72:	b923      	cbnz	r3, e7e <hal_spi_config_slave+0x46>
            rc = EINVAL;
            break;
    }

    return rc;
}
     e74:	bc10      	pop	{r4}
     e76:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
     e78:	f043 0301 	orr.w	r3, r3, #1
     e7c:	e7f6      	b.n	e6c <hal_spi_config_slave+0x34>
            rc = EINVAL;
     e7e:	2016      	movs	r0, #22
    return rc;
     e80:	e7f8      	b.n	e74 <hal_spi_config_slave+0x3c>
	...

00000e84 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
     e84:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
     e86:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
     e88:	2501      	movs	r5, #1
     e8a:	409d      	lsls	r5, r3
     e8c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
     e90:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
     e94:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     e98:	2503      	movs	r5, #3
     e9a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
     e9e:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
     ea0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     ea4:	2500      	movs	r5, #0
     ea6:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
     eaa:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
     eac:	780c      	ldrb	r4, [r1, #0]
     eae:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
     eb2:	784c      	ldrb	r4, [r1, #1]
     eb4:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
     eb8:	7889      	ldrb	r1, [r1, #2]
     eba:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
     ebe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     ec2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
     ec6:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
     eca:	4919      	ldr	r1, [pc, #100]	; (f30 <hal_spi_init_master+0xac>)
     ecc:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     ece:	3310      	adds	r3, #16
     ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
     ed4:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
     ed8:	42ab      	cmp	r3, r5
     eda:	db22      	blt.n	f22 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     edc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
     ee0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
     ee4:	22e0      	movs	r2, #224	; 0xe0
     ee6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
     eea:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
     eee:	2b00      	cmp	r3, #0
     ef0:	db08      	blt.n	f04 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ef2:	f003 011f 	and.w	r1, r3, #31
     ef6:	095b      	lsrs	r3, r3, #5
     ef8:	2201      	movs	r2, #1
     efa:	408a      	lsls	r2, r1
     efc:	3360      	adds	r3, #96	; 0x60
     efe:	490d      	ldr	r1, [pc, #52]	; (f34 <hal_spi_init_master+0xb0>)
     f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
     f04:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
     f08:	2b00      	cmp	r3, #0
     f0a:	db07      	blt.n	f1c <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f0c:	f003 011f 	and.w	r1, r3, #31
     f10:	095b      	lsrs	r3, r3, #5
     f12:	2201      	movs	r2, #1
     f14:	408a      	lsls	r2, r1
     f16:	4907      	ldr	r1, [pc, #28]	; (f34 <hal_spi_init_master+0xb0>)
     f18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
     f1c:	2000      	movs	r0, #0
     f1e:	bc30      	pop	{r4, r5}
     f20:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     f22:	f003 030f 	and.w	r3, r3, #15
     f26:	4a04      	ldr	r2, [pc, #16]	; (f38 <hal_spi_init_master+0xb4>)
     f28:	441a      	add	r2, r3
     f2a:	23e0      	movs	r3, #224	; 0xe0
     f2c:	7613      	strb	r3, [r2, #24]
     f2e:	e7dc      	b.n	eea <hal_spi_init_master+0x66>
     f30:	e000ed00 	.word	0xe000ed00
     f34:	e000e100 	.word	0xe000e100
     f38:	e000ecfc 	.word	0xe000ecfc

00000f3c <hal_spi_config_master>:
{
     f3c:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
     f3e:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
     f40:	680c      	ldr	r4, [r1, #0]
     f42:	684b      	ldr	r3, [r1, #4]
     f44:	6084      	str	r4, [r0, #8]
     f46:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
     f48:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
     f4c:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
     f50:	7808      	ldrb	r0, [r1, #0]
     f52:	2801      	cmp	r0, #1
     f54:	d916      	bls.n	f84 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
     f56:	2001      	movs	r0, #1
     f58:	4098      	lsls	r0, r3
     f5a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
     f5e:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
     f62:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     f66:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
     f6a:	2403      	movs	r4, #3
     f6c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
     f70:	788b      	ldrb	r3, [r1, #2]
     f72:	b973      	cbnz	r3, f92 <hal_spi_config_master+0x56>
    rc = 0;
     f74:	2000      	movs	r0, #0
    switch (settings->data_mode) {
     f76:	780b      	ldrb	r3, [r1, #0]
     f78:	2b03      	cmp	r3, #3
     f7a:	d812      	bhi.n	fa2 <hal_spi_config_master+0x66>
     f7c:	e8df f003 	tbb	[pc, r3]
     f80:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
     f84:	2001      	movs	r0, #1
     f86:	4098      	lsls	r0, r3
     f88:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
     f8c:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
     f90:	e7e7      	b.n	f62 <hal_spi_config_master+0x26>
            rc = EINVAL;
     f92:	2016      	movs	r0, #22
     f94:	e7ef      	b.n	f76 <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
     f96:	2300      	movs	r3, #0
     f98:	e007      	b.n	faa <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
     f9a:	2304      	movs	r3, #4
            break;
     f9c:	e005      	b.n	faa <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
     f9e:	2306      	movs	r3, #6
            break;
     fa0:	e003      	b.n	faa <hal_spi_config_master+0x6e>
            nrf_config = 0;
     fa2:	2300      	movs	r3, #0
            rc = EINVAL;
     fa4:	2016      	movs	r0, #22
            break;
     fa6:	e000      	b.n	faa <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
     fa8:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
     faa:	784c      	ldrb	r4, [r1, #1]
     fac:	2c01      	cmp	r4, #1
     fae:	d010      	beq.n	fd2 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
     fb0:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
     fb4:	684b      	ldr	r3, [r1, #4]
     fb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     fba:	d022      	beq.n	1002 <hal_spi_config_master+0xc6>
     fbc:	d80c      	bhi.n	fd8 <hal_spi_config_master+0x9c>
     fbe:	2bfa      	cmp	r3, #250	; 0xfa
     fc0:	d028      	beq.n	1014 <hal_spi_config_master+0xd8>
     fc2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
     fc6:	d019      	beq.n	ffc <hal_spi_config_master+0xc0>
     fc8:	2b7d      	cmp	r3, #125	; 0x7d
     fca:	d011      	beq.n	ff0 <hal_spi_config_master+0xb4>
            frequency = 0;
     fcc:	2300      	movs	r3, #0
            rc = EINVAL;
     fce:	2016      	movs	r0, #22
            break;
     fd0:	e010      	b.n	ff4 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
     fd2:	f043 0301 	orr.w	r3, r3, #1
     fd6:	e7eb      	b.n	fb0 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
     fd8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
     fdc:	d014      	beq.n	1008 <hal_spi_config_master+0xcc>
     fde:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
     fe2:	d014      	beq.n	100e <hal_spi_config_master+0xd2>
     fe4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     fe8:	d1f0      	bne.n	fcc <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
     fea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
     fee:	e001      	b.n	ff4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
     ff0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
     ff4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
     ff8:	bc10      	pop	{r4}
     ffa:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
     ffc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
    1000:	e7f8      	b.n	ff4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
    1002:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
    1006:	e7f5      	b.n	ff4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
    1008:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
    100c:	e7f2      	b.n	ff4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
    100e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
    1012:	e7ef      	b.n	ff4 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
    1014:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1018:	e7ec      	b.n	ff4 <hal_spi_config_master+0xb8>
	...

0000101c <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    101c:	2803      	cmp	r0, #3
    101e:	dc10      	bgt.n	1042 <hal_spi_config+0x26>
{
    1020:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1022:	4b0b      	ldr	r3, [pc, #44]	; (1050 <hal_spi_config+0x34>)
    1024:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1028:	b168      	cbz	r0, 1046 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
    102a:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
    102c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    1030:	b95b      	cbnz	r3, 104a <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    1032:	7803      	ldrb	r3, [r0, #0]
    1034:	b113      	cbz	r3, 103c <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
    1036:	f7ff feff 	bl	e38 <hal_spi_config_slave>
    }

err:
    return (rc);
}
    103a:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
    103c:	f7ff ff7e 	bl	f3c <hal_spi_config_master>
    1040:	e7fb      	b.n	103a <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1042:	2016      	movs	r0, #22
}
    1044:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1046:	2016      	movs	r0, #22
    1048:	e7f7      	b.n	103a <hal_spi_config+0x1e>
        return -1;
    104a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    104e:	e7f4      	b.n	103a <hal_spi_config+0x1e>
    1050:	00005588 	.word	0x00005588

00001054 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1054:	2803      	cmp	r0, #3
    1056:	dc1b      	bgt.n	1090 <hal_spi_enable+0x3c>
    1058:	4b10      	ldr	r3, [pc, #64]	; (109c <hal_spi_enable+0x48>)
    105a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    105e:	b1cb      	cbz	r3, 1094 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    1060:	781a      	ldrb	r2, [r3, #0]
    1062:	b17a      	cbz	r2, 1084 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
    1064:	6a1a      	ldr	r2, [r3, #32]
    1066:	b1ba      	cbz	r2, 1098 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
    1068:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
    106a:	2000      	movs	r0, #0
    106c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
    1070:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
    1074:	f240 4202 	movw	r2, #1026	; 0x402
    1078:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
    107c:	2202      	movs	r2, #2
    107e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    1082:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
    1084:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    1086:	2201      	movs	r2, #1
    1088:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
    108c:	2000      	movs	r0, #0
    108e:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1090:	2016      	movs	r0, #22
    1092:	4770      	bx	lr
    1094:	2016      	movs	r0, #22
    1096:	4770      	bx	lr
            rc = EINVAL;
    1098:	2016      	movs	r0, #22

err:
    return rc;
}
    109a:	4770      	bx	lr
    109c:	00005588 	.word	0x00005588

000010a0 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    10a0:	2803      	cmp	r0, #3
    10a2:	dc2a      	bgt.n	10fa <hal_spi_disable+0x5a>
{
    10a4:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    10a6:	4b17      	ldr	r3, [pc, #92]	; (1104 <hal_spi_disable+0x64>)
    10a8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    10ac:	b33c      	cbz	r4, 10fe <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    10ae:	7823      	ldrb	r3, [r4, #0]
    10b0:	b9ab      	cbnz	r3, 10de <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
    10b2:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    10b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    10b8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
    10bc:	7863      	ldrb	r3, [r4, #1]
    10be:	b943      	cbnz	r3, 10d2 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
    10c0:	2300      	movs	r3, #0
    10c2:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
    10c6:	2000      	movs	r0, #0
    10c8:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
    10ca:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
    10cc:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
    10ce:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
    10d0:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
    10d2:	4628      	mov	r0, r5
    10d4:	f7ff fea6 	bl	e24 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
    10d8:	2300      	movs	r3, #0
    10da:	7063      	strb	r3, [r4, #1]
    10dc:	e7f0      	b.n	10c0 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
    10de:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
    10e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    10e4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
    10e8:	2300      	movs	r3, #0
    10ea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
    10ee:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
    10f2:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    10f6:	70e3      	strb	r3, [r4, #3]
    10f8:	e7e5      	b.n	10c6 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    10fa:	2016      	movs	r0, #22
}
    10fc:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    10fe:	2016      	movs	r0, #22
    return rc;
    1100:	e7e6      	b.n	10d0 <hal_spi_disable+0x30>
    1102:	bf00      	nop
    1104:	00005588 	.word	0x00005588

00001108 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1108:	2803      	cmp	r0, #3
    110a:	dc1d      	bgt.n	1148 <hal_spi_init+0x40>
{
    110c:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    110e:	4b13      	ldr	r3, [pc, #76]	; (115c <hal_spi_init+0x54>)
    1110:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1114:	b1d4      	cbz	r4, 114c <hal_spi_init+0x44>
    if (cfg == NULL) {
    1116:	b1d9      	cbz	r1, 1150 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
    1118:	2a01      	cmp	r2, #1
    111a:	d81b      	bhi.n	1154 <hal_spi_init+0x4c>
    spi->spi_type = spi_type;
    111c:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
    111e:	b9d8      	cbnz	r0, 1158 <hal_spi_init+0x50>
    1120:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
    1122:	2303      	movs	r3, #3
    1124:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
    1126:	b94a      	cbnz	r2, 113c <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
    1128:	4b0d      	ldr	r3, [pc, #52]	; (1160 <hal_spi_init+0x58>)
    112a:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
    112c:	f7ff ffb8 	bl	10a0 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
    1130:	4a0c      	ldr	r2, [pc, #48]	; (1164 <hal_spi_init+0x5c>)
    1132:	4629      	mov	r1, r5
    1134:	4620      	mov	r0, r4
    1136:	f7ff fea5 	bl	e84 <hal_spi_init_master>
    113a:	e00c      	b.n	1156 <hal_spi_init+0x4e>
            assert(0);
    113c:	2300      	movs	r3, #0
    113e:	461a      	mov	r2, r3
    1140:	4619      	mov	r1, r3
    1142:	4618      	mov	r0, r3
    1144:	f000 faf6 	bl	1734 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    1148:	2016      	movs	r0, #22
}
    114a:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    114c:	2016      	movs	r0, #22
    114e:	e002      	b.n	1156 <hal_spi_init+0x4e>
    rc = EINVAL;
    1150:	2016      	movs	r0, #22
    1152:	e000      	b.n	1156 <hal_spi_init+0x4e>
    1154:	2016      	movs	r0, #22
}
    1156:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
    1158:	2016      	movs	r0, #22
    return (rc);
    115a:	e7fc      	b.n	1156 <hal_spi_init+0x4e>
    115c:	00005588 	.word	0x00005588
    1160:	40003000 	.word	0x40003000
    1164:	00000e0d 	.word	0x00000e0d

00001168 <hal_spi_tx_val>:
    int rc;
    uint16_t retval;
    NRF_SPI_Type *spi;
    struct nrf52_hal_spi *hal_spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
    1168:	2803      	cmp	r0, #3
    116a:	dc17      	bgt.n	119c <hal_spi_tx_val+0x34>
    116c:	4b0f      	ldr	r3, [pc, #60]	; (11ac <hal_spi_tx_val+0x44>)
    116e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    1172:	b1ab      	cbz	r3, 11a0 <hal_spi_tx_val+0x38>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    1174:	781a      	ldrb	r2, [r3, #0]
    1176:	b9aa      	cbnz	r2, 11a4 <hal_spi_tx_val+0x3c>
        spi = (NRF_SPI_Type *)hal_spi->nhs_spi.spim;
    1178:	691a      	ldr	r2, [r3, #16]
        spi->EVENTS_READY = 0;
    117a:	2300      	movs	r3, #0
    117c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        spi->TXD = (uint8_t)val;
    1180:	b2c9      	uxtb	r1, r1
    1182:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
        while (!spi->EVENTS_READY) {}
    1186:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
    118a:	2b00      	cmp	r3, #0
    118c:	d0fb      	beq.n	1186 <hal_spi_tx_val+0x1e>
        spi->EVENTS_READY = 0;
    118e:	2300      	movs	r3, #0
    1190:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        retval = (uint16_t)spi->RXD;
    1194:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    1198:	b280      	uxth	r0, r0
    119a:	4770      	bx	lr
    }

    return retval;

err:
    return rc;
    119c:	2016      	movs	r0, #22
    119e:	4770      	bx	lr
    11a0:	2016      	movs	r0, #22
    11a2:	4770      	bx	lr
        retval = 0xFFFF;
    11a4:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
    11a8:	4770      	bx	lr
    11aa:	bf00      	nop
    11ac:	00005588 	.word	0x00005588

000011b0 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    11b0:	2803      	cmp	r0, #3
    11b2:	dc0a      	bgt.n	11ca <hal_spi_set_txrx_cb+0x1a>
    11b4:	4b08      	ldr	r3, [pc, #32]	; (11d8 <hal_spi_set_txrx_cb+0x28>)
    11b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    11ba:	b143      	cbz	r3, 11ce <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
    11bc:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
    11be:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
    11c2:	b930      	cbnz	r0, 11d2 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
    11c4:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
    11c6:	625a      	str	r2, [r3, #36]	; 0x24
    11c8:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
    11ca:	2016      	movs	r0, #22
    11cc:	4770      	bx	lr
    11ce:	2016      	movs	r0, #22
    11d0:	4770      	bx	lr
        rc = -1;
    11d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
    11d6:	4770      	bx	lr
    11d8:	00005588 	.word	0x00005588

000011dc <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
    11dc:	2b00      	cmp	r3, #0
    11de:	d046      	beq.n	126e <hal_spi_txrx+0x92>
{
    11e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    11e2:	460d      	mov	r5, r1
    11e4:	4617      	mov	r7, r2
    11e6:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
    11e8:	2803      	cmp	r0, #3
    11ea:	dc42      	bgt.n	1272 <hal_spi_txrx+0x96>
    11ec:	4b25      	ldr	r3, [pc, #148]	; (1284 <hal_spi_txrx+0xa8>)
    11ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    11f2:	2b00      	cmp	r3, #0
    11f4:	d03f      	beq.n	1276 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
    11f6:	781a      	ldrb	r2, [r3, #0]
    11f8:	2a00      	cmp	r2, #0
    11fa:	d13e      	bne.n	127a <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
    11fc:	2900      	cmp	r1, #0
    11fe:	d03e      	beq.n	127e <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
    1200:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
    1202:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
    1206:	2b07      	cmp	r3, #7
    1208:	d004      	beq.n	1214 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
    120a:	b95b      	cbnz	r3, 1224 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    120c:	2301      	movs	r3, #1
    120e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    1212:	e007      	b.n	1224 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
    1214:	f7ff ff44 	bl	10a0 <hal_spi_disable>
    1218:	e7f8      	b.n	120c <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
    121a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
    121e:	2300      	movs	r3, #0
    1220:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
    1224:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    1228:	2b00      	cmp	r3, #0
    122a:	d1f6      	bne.n	121a <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
    122c:	782b      	ldrb	r3, [r5, #0]
    122e:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
    1232:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
    1234:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
    1236:	2200      	movs	r2, #0
    1238:	e00d      	b.n	1256 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
    123a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    123e:	2b00      	cmp	r3, #0
    1240:	d0fb      	beq.n	123a <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
    1242:	2300      	movs	r3, #0
    1244:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
    1248:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    124c:	b2db      	uxtb	r3, r3
            if (rxbuf) {
    124e:	b10f      	cbz	r7, 1254 <hal_spi_txrx+0x78>
                *rxd = rxval;
    1250:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
    1254:	3201      	adds	r2, #1
    1256:	42b2      	cmp	r2, r6
    1258:	da07      	bge.n	126a <hal_spi_txrx+0x8e>
            if (txcnt) {
    125a:	2900      	cmp	r1, #0
    125c:	d0ed      	beq.n	123a <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
    125e:	786b      	ldrb	r3, [r5, #1]
    1260:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
    1264:	3901      	subs	r1, #1
                ++txd;
    1266:	3501      	adds	r5, #1
    1268:	e7e7      	b.n	123a <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
    126a:	2000      	movs	r0, #0
    }

err:
    return rc;
}
    126c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
    126e:	2016      	movs	r0, #22
}
    1270:	4770      	bx	lr
    return rc;
    1272:	2016      	movs	r0, #22
    1274:	e7fa      	b.n	126c <hal_spi_txrx+0x90>
    1276:	2016      	movs	r0, #22
    1278:	e7f8      	b.n	126c <hal_spi_txrx+0x90>
    127a:	2016      	movs	r0, #22
    127c:	e7f6      	b.n	126c <hal_spi_txrx+0x90>
    127e:	2016      	movs	r0, #22
    1280:	e7f4      	b.n	126c <hal_spi_txrx+0x90>
    1282:	bf00      	nop
    1284:	00005588 	.word	0x00005588

00001288 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
    1288:	b508      	push	{r3, lr}
    assert(0);
    128a:	2300      	movs	r3, #0
    128c:	461a      	mov	r2, r3
    128e:	4619      	mov	r1, r3
    1290:	4618      	mov	r0, r3
    1292:	f000 fa4f 	bl	1734 <__assert_func>
	...

00001298 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
    1298:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
    129a:	4b06      	ldr	r3, [pc, #24]	; (12b4 <nrf52_wdt_irq_handler+0x1c>)
    129c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    12a0:	f013 0f01 	tst.w	r3, #1
    12a4:	d100      	bne.n	12a8 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
    12a6:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
    12a8:	4b02      	ldr	r3, [pc, #8]	; (12b4 <nrf52_wdt_irq_handler+0x1c>)
    12aa:	2200      	movs	r2, #0
    12ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
    12b0:	f7ff ffea 	bl	1288 <nrf52_hal_wdt_default_handler>
    12b4:	40010000 	.word	0x40010000

000012b8 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
    12b8:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
    12ba:	4b17      	ldr	r3, [pc, #92]	; (1318 <hal_watchdog_init+0x60>)
    12bc:	2201      	movs	r2, #1
    12be:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
    12c2:	4b16      	ldr	r3, [pc, #88]	; (131c <hal_watchdog_init+0x64>)
    12c4:	4298      	cmp	r0, r3
    12c6:	d821      	bhi.n	130c <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
    12c8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    12cc:	0153      	lsls	r3, r2, #5
    12ce:	4a14      	ldr	r2, [pc, #80]	; (1320 <hal_watchdog_init+0x68>)
    12d0:	fba2 2303 	umull	r2, r3, r2, r3
    12d4:	08db      	lsrs	r3, r3, #3
    12d6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    12da:	4b0f      	ldr	r3, [pc, #60]	; (1318 <hal_watchdog_init+0x60>)
    12dc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
    12e0:	4a10      	ldr	r2, [pc, #64]	; (1324 <hal_watchdog_init+0x6c>)
    12e2:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    12e4:	4910      	ldr	r1, [pc, #64]	; (1328 <hal_watchdog_init+0x70>)
    12e6:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    12ea:	4a10      	ldr	r2, [pc, #64]	; (132c <hal_watchdog_init+0x74>)
    12ec:	21e0      	movs	r1, #224	; 0xe0
    12ee:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12f2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    12f6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12fa:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
    12fc:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    1300:	f042 0201 	orr.w	r2, r2, #1
    1304:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
    1308:	2000      	movs	r0, #0
    130a:	bd08      	pop	{r3, pc}
        assert(0);
    130c:	2300      	movs	r3, #0
    130e:	461a      	mov	r2, r3
    1310:	4619      	mov	r1, r3
    1312:	4618      	mov	r0, r3
    1314:	f000 fa0e 	bl	1734 <__assert_func>
    1318:	40010000 	.word	0x40010000
    131c:	02aaaaaa 	.word	0x02aaaaaa
    1320:	10624dd3 	.word	0x10624dd3
    1324:	e000ed00 	.word	0xe000ed00
    1328:	00001299 	.word	0x00001299
    132c:	e000e100 	.word	0xe000e100

00001330 <nrf52_periph_create_timers>:
static struct temperature_dev os_bsp_temp;
#endif

static void
nrf52_periph_create_timers(void)
{
    1330:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
    1332:	2100      	movs	r1, #0
    1334:	4608      	mov	r0, r1
    1336:	f000 f939 	bl	15ac <hal_timer_init>
    assert(rc == 0);
    133a:	b920      	cbnz	r0, 1346 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
    133c:	4808      	ldr	r0, [pc, #32]	; (1360 <nrf52_periph_create_timers+0x30>)
    133e:	f000 fa67 	bl	1810 <os_cputime_init>
    assert(rc == 0);
    1342:	b930      	cbnz	r0, 1352 <nrf52_periph_create_timers+0x22>
#endif
}
    1344:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    1346:	2300      	movs	r3, #0
    1348:	461a      	mov	r2, r3
    134a:	4619      	mov	r1, r3
    134c:	4618      	mov	r0, r3
    134e:	f000 f9f1 	bl	1734 <__assert_func>
    assert(rc == 0);
    1352:	2300      	movs	r3, #0
    1354:	461a      	mov	r2, r3
    1356:	4619      	mov	r1, r3
    1358:	4618      	mov	r0, r3
    135a:	f000 f9eb 	bl	1734 <__assert_func>
    135e:	bf00      	nop
    1360:	000f4240 	.word	0x000f4240

00001364 <nrf52_periph_create_spi>:
#endif
}

static void
nrf52_periph_create_spi(void)
{
    1364:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
    1366:	2200      	movs	r2, #0
    1368:	4905      	ldr	r1, [pc, #20]	; (1380 <nrf52_periph_create_spi+0x1c>)
    136a:	4610      	mov	r0, r2
    136c:	f7ff fecc 	bl	1108 <hal_spi_init>
    assert(rc == 0);
    1370:	b900      	cbnz	r0, 1374 <nrf52_periph_create_spi+0x10>
#else
    rc = hal_spi_init(3, (void *)&os_bsp_spi3m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
#endif
}
    1372:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    1374:	2300      	movs	r3, #0
    1376:	461a      	mov	r2, r3
    1378:	4619      	mov	r1, r3
    137a:	4618      	mov	r0, r3
    137c:	f000 f9da 	bl	1734 <__assert_func>
    1380:	00005598 	.word	0x00005598

00001384 <nrf52_periph_create>:
#endif
}

void
nrf52_periph_create(void)
{
    1384:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
    1386:	f7ff ffd3 	bl	1330 <nrf52_periph_create_timers>
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
    138a:	f7ff ffeb 	bl	1364 <nrf52_periph_create_spi>
    nrf52_periph_create_temp();
}
    138e:	bd08      	pop	{r3, pc}

00001390 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    1390:	2301      	movs	r3, #1
    1392:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    1394:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
    1398:	4770      	bx	lr
	...

0000139c <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
    139c:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
    139e:	7883      	ldrb	r3, [r0, #2]
    13a0:	2b00      	cmp	r3, #0
    13a2:	d050      	beq.n	1446 <nrf_timer_set_ocmp+0xaa>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
    13a4:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    13a6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    13aa:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
    13ae:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
    13b0:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
    13b4:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
    13b8:	b11d      	cbz	r5, 13c2 <nrf_timer_set_ocmp+0x26>
            temp += (1UL << 24);
    13ba:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
    13be:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
    13c2:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
    13c4:	1acb      	subs	r3, r1, r3
         * to be handled differently. TICK event is used to have interrupt on
         * each subsequent tick so we won't miss any and in case we detected
         * mentioned extra tick during calculations, interrupt is triggered
         * immediately. Delta 0 or less means we should always fire immediately.
         */
        if (delta_t < 1) {
    13c6:	2b00      	cmp	r3, #0
    13c8:	dd17      	ble.n	13fa <nrf_timer_set_ocmp+0x5e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        } else if (delta_t < 3) {
    13ca:	2b02      	cmp	r3, #2
    13cc:	dc27      	bgt.n	141e <nrf_timer_set_ocmp+0x82>
            rtctimer->INTENSET = RTC_INTENSET_TICK_Msk;
    13ce:	2301      	movs	r3, #1
    13d0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
            if (rtctimer->COUNTER != cntr) {
    13d4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    13d8:	42a3      	cmp	r3, r4
    13da:	d02e      	beq.n	143a <nrf_timer_set_ocmp+0x9e>
                NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    13dc:	7842      	ldrb	r2, [r0, #1]
    13de:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    13e0:	2b00      	cmp	r3, #0
    13e2:	db2a      	blt.n	143a <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13e4:	f002 021f 	and.w	r2, r2, #31
    13e8:	095b      	lsrs	r3, r3, #5
    13ea:	2101      	movs	r1, #1
    13ec:	fa01 f202 	lsl.w	r2, r1, r2
    13f0:	3340      	adds	r3, #64	; 0x40
    13f2:	4926      	ldr	r1, [pc, #152]	; (148c <nrf_timer_set_ocmp+0xf0>)
    13f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    13f8:	e01f      	b.n	143a <nrf_timer_set_ocmp+0x9e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
    13fa:	2301      	movs	r3, #1
    13fc:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    1400:	7842      	ldrb	r2, [r0, #1]
    1402:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1404:	2b00      	cmp	r3, #0
    1406:	db18      	blt.n	143a <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1408:	f002 021f 	and.w	r2, r2, #31
    140c:	095b      	lsrs	r3, r3, #5
    140e:	2101      	movs	r1, #1
    1410:	fa01 f202 	lsl.w	r2, r1, r2
    1414:	3340      	adds	r3, #64	; 0x40
    1416:	491d      	ldr	r1, [pc, #116]	; (148c <nrf_timer_set_ocmp+0xf0>)
    1418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    141c:	e00d      	b.n	143a <nrf_timer_set_ocmp+0x9e>
            }
        } else {
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
    141e:	2001      	movs	r0, #1
    1420:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308

            if (delta_t < (1UL << 24)) {
    1424:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    1428:	d208      	bcs.n	143c <nrf_timer_set_ocmp+0xa0>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
    142a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    142e:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    1432:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    1436:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
    143a:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
    143c:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
    1440:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
    1444:	e7f5      	b.n	1432 <nrf_timer_set_ocmp+0x96>
    1446:	460d      	mov	r5, r1
    1448:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
    144a:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    144c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    1450:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
    1454:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    1458:	2200      	movs	r2, #0
    145a:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    145e:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
    1462:	f7ff ff95 	bl	1390 <nrf_read_timer_cntr>
    1466:	1b40      	subs	r0, r0, r5
    1468:	2800      	cmp	r0, #0
    146a:	dbe6      	blt.n	143a <nrf_timer_set_ocmp+0x9e>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    146c:	7862      	ldrb	r2, [r4, #1]
    146e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    1470:	2b00      	cmp	r3, #0
    1472:	dbe2      	blt.n	143a <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1474:	f002 021f 	and.w	r2, r2, #31
    1478:	095b      	lsrs	r3, r3, #5
    147a:	2101      	movs	r1, #1
    147c:	fa01 f202 	lsl.w	r2, r1, r2
    1480:	3340      	adds	r3, #64	; 0x40
    1482:	4902      	ldr	r1, [pc, #8]	; (148c <nrf_timer_set_ocmp+0xf0>)
    1484:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1488:	e7d7      	b.n	143a <nrf_timer_set_ocmp+0x9e>
    148a:	bf00      	nop
    148c:	e000e100 	.word	0xe000e100

00001490 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    1490:	f44f 2300 	mov.w	r3, #524288	; 0x80000
    1494:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
    1498:	4770      	bx	lr

0000149a <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    149a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    149e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
    14a2:	2301      	movs	r3, #1
    14a4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
    14a8:	4770      	bx	lr
	...

000014ac <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
    14ac:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
    14ae:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    14b0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    14b4:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
    14b6:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
    14b8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
    14bc:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
    14c0:	b1ad      	cbz	r5, 14ee <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
    14c2:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
    14c6:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
    14c8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
    14cc:	2500      	movs	r5, #0
    14ce:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    14d2:	7840      	ldrb	r0, [r0, #1]
    14d4:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
    14d6:	42aa      	cmp	r2, r5
    14d8:	db09      	blt.n	14ee <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    14da:	f000 001f 	and.w	r0, r0, #31
    14de:	0952      	lsrs	r2, r2, #5
    14e0:	2501      	movs	r5, #1
    14e2:	fa05 f000 	lsl.w	r0, r5, r0
    14e6:	3240      	adds	r2, #64	; 0x40
    14e8:	4d04      	ldr	r5, [pc, #16]	; (14fc <hal_timer_read_bsptimer+0x50>)
    14ea:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
    14ee:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
    14f2:	b904      	cbnz	r4, 14f6 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
    14f4:	b662      	cpsie	i

    return tcntr;
}
    14f6:	bc30      	pop	{r4, r5}
    14f8:	4770      	bx	lr
    14fa:	bf00      	nop
    14fc:	e000e100 	.word	0xe000e100

00001500 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
    1500:	b570      	push	{r4, r5, r6, lr}
    1502:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1504:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    1508:	b672      	cpsid	i
    150a:	e012      	b.n	1532 <hal_timer_chk_queue+0x32>
    __HAL_DISABLE_INTERRUPTS(ctx);
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
        if (bsptimer->tmr_rtc) {
            tcntr = hal_timer_read_bsptimer(bsptimer);
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    150c:	6928      	ldr	r0, [r5, #16]
    150e:	f7ff ff3f 	bl	1390 <nrf_read_timer_cntr>
        }
        if ((int32_t)(tcntr - timer->expiry) >= 0) {
    1512:	68e3      	ldr	r3, [r4, #12]
    1514:	1ac0      	subs	r0, r0, r3
    1516:	2800      	cmp	r0, #0
    1518:	db17      	blt.n	154a <hal_timer_chk_queue+0x4a>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    151a:	6923      	ldr	r3, [r4, #16]
    151c:	b193      	cbz	r3, 1544 <hal_timer_chk_queue+0x44>
    151e:	6962      	ldr	r2, [r4, #20]
    1520:	615a      	str	r2, [r3, #20]
    1522:	6963      	ldr	r3, [r4, #20]
    1524:	6922      	ldr	r2, [r4, #16]
    1526:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
    1528:	2300      	movs	r3, #0
    152a:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
    152c:	6863      	ldr	r3, [r4, #4]
    152e:	68a0      	ldr	r0, [r4, #8]
    1530:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
    1532:	696c      	ldr	r4, [r5, #20]
    1534:	b14c      	cbz	r4, 154a <hal_timer_chk_queue+0x4a>
        if (bsptimer->tmr_rtc) {
    1536:	78ab      	ldrb	r3, [r5, #2]
    1538:	2b00      	cmp	r3, #0
    153a:	d0e7      	beq.n	150c <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
    153c:	4628      	mov	r0, r5
    153e:	f7ff ffb5 	bl	14ac <hal_timer_read_bsptimer>
    1542:	e7e6      	b.n	1512 <hal_timer_chk_queue+0x12>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    1544:	6963      	ldr	r3, [r4, #20]
    1546:	61ab      	str	r3, [r5, #24]
    1548:	e7eb      	b.n	1522 <hal_timer_chk_queue+0x22>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
    154a:	696b      	ldr	r3, [r5, #20]
    if (timer) {
    154c:	b133      	cbz	r3, 155c <hal_timer_chk_queue+0x5c>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    154e:	68d9      	ldr	r1, [r3, #12]
    1550:	4628      	mov	r0, r5
    1552:	f7ff ff23 	bl	139c <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
    1556:	b906      	cbnz	r6, 155a <hal_timer_chk_queue+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
    1558:	b662      	cpsie	i
}
    155a:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
    155c:	78ab      	ldrb	r3, [r5, #2]
    155e:	b11b      	cbz	r3, 1568 <hal_timer_chk_queue+0x68>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
    1560:	6928      	ldr	r0, [r5, #16]
    1562:	f7ff ff9a 	bl	149a <nrf_rtc_disable_ocmp>
    1566:	e7f6      	b.n	1556 <hal_timer_chk_queue+0x56>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
    1568:	6928      	ldr	r0, [r5, #16]
    156a:	f7ff ff91 	bl	1490 <nrf_timer_disable_ocmp>
    156e:	e7f2      	b.n	1556 <hal_timer_chk_queue+0x56>

00001570 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
    1570:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
    1572:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    1574:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
    1578:	b113      	cbz	r3, 1580 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    157a:	2300      	movs	r3, #0
    157c:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
    1580:	6883      	ldr	r3, [r0, #8]
    1582:	3301      	adds	r3, #1
    1584:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
    1586:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
    158a:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    158e:	d100      	bne.n	1592 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
    1590:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
    1592:	f7ff ffb5 	bl	1500 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    1596:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
    159a:	e7f9      	b.n	1590 <hal_timer_irq_handler+0x20>

0000159c <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
    159c:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
    159e:	4802      	ldr	r0, [pc, #8]	; (15a8 <nrf52_timer0_irq_handler+0xc>)
    15a0:	f7ff ffe6 	bl	1570 <hal_timer_irq_handler>
}
    15a4:	bd08      	pop	{r3, pc}
    15a6:	bf00      	nop
    15a8:	20000188 	.word	0x20000188

000015ac <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    15ac:	2805      	cmp	r0, #5
    15ae:	dc1c      	bgt.n	15ea <hal_timer_init+0x3e>
    15b0:	4b12      	ldr	r3, [pc, #72]	; (15fc <hal_timer_init+0x50>)
    15b2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    15b6:	b1d3      	cbz	r3, 15ee <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
    15b8:	781a      	ldrb	r2, [r3, #0]
    15ba:	b9d2      	cbnz	r2, 15f2 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
    15bc:	b9d8      	cbnz	r0, 15f6 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
    15be:	4a10      	ldr	r2, [pc, #64]	; (1600 <hal_timer_init+0x54>)
    15c0:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
    15c2:	2208      	movs	r2, #8
    15c4:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    15c6:	4b0f      	ldr	r3, [pc, #60]	; (1604 <hal_timer_init+0x58>)
    15c8:	f44f 7280 	mov.w	r2, #256	; 0x100
    15cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    15d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    15d4:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15d8:	22e0      	movs	r2, #224	; 0xe0
    15da:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
    15de:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
    15e2:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    15e4:	4a08      	ldr	r2, [pc, #32]	; (1608 <hal_timer_init+0x5c>)
    15e6:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
    15e8:	4770      	bx	lr

err:
    return rc;
    15ea:	2016      	movs	r0, #22
    15ec:	4770      	bx	lr
    15ee:	2016      	movs	r0, #22
    15f0:	4770      	bx	lr
    15f2:	2016      	movs	r0, #22
    15f4:	4770      	bx	lr
    15f6:	2016      	movs	r0, #22
}
    15f8:	4770      	bx	lr
    15fa:	bf00      	nop
    15fc:	0000559c 	.word	0x0000559c
    1600:	40008000 	.word	0x40008000
    1604:	e000e100 	.word	0xe000e100
    1608:	0000159d 	.word	0x0000159d

0000160c <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    160c:	2805      	cmp	r0, #5
    160e:	dc65      	bgt.n	16dc <hal_timer_config+0xd0>
    1610:	4b39      	ldr	r3, [pc, #228]	; (16f8 <hal_timer_config+0xec>)
    1612:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1616:	2800      	cmp	r0, #0
    1618:	d062      	beq.n	16e0 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
    161a:	4b38      	ldr	r3, [pc, #224]	; (16fc <hal_timer_config+0xf0>)
    161c:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    1620:	7803      	ldrb	r3, [r0, #0]
    1622:	2b00      	cmp	r3, #0
    1624:	d15e      	bne.n	16e4 <hal_timer_config+0xd8>
    1626:	2900      	cmp	r1, #0
    1628:	d05e      	beq.n	16e8 <hal_timer_config+0xdc>
    162a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    162e:	d85d      	bhi.n	16ec <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
    1630:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    1632:	2a00      	cmp	r2, #0
    1634:	d05c      	beq.n	16f0 <hal_timer_config+0xe4>
{
    1636:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
    1638:	2901      	cmp	r1, #1
    163a:	d013      	beq.n	1664 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    163c:	2301      	movs	r3, #1
    163e:	2b09      	cmp	r3, #9
    1640:	d810      	bhi.n	1664 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
    1642:	2201      	movs	r2, #1
    1644:	409a      	lsls	r2, r3
    1646:	428a      	cmp	r2, r1
    1648:	d202      	bcs.n	1650 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    164a:	3301      	adds	r3, #1
    164c:	b2db      	uxtb	r3, r3
    164e:	e7f6      	b.n	163e <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
    1650:	1e5c      	subs	r4, r3, #1
    1652:	2501      	movs	r5, #1
    1654:	fa05 f404 	lsl.w	r4, r5, r4
    1658:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
    165a:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
    165c:	428c      	cmp	r4, r1
    165e:	d201      	bcs.n	1664 <hal_timer_config+0x58>
                    prescaler -= 1;
    1660:	3b01      	subs	r3, #1
    1662:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
    1664:	4a25      	ldr	r2, [pc, #148]	; (16fc <hal_timer_config+0xf0>)
    1666:	411a      	asrs	r2, r3
    1668:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
    166a:	2201      	movs	r2, #1
    166c:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    166e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    1672:	b672      	cpsid	i
    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

#if MYNEWT_VAL_CHOICE(MCU_HFCLK_SOURCE, HFXO)
    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
    1674:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1678:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
    167c:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
    1680:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
    1684:	d00c      	beq.n	16a0 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1686:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    168a:	2100      	movs	r1, #0
    168c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1690:	2101      	movs	r1, #1
    1692:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
    1694:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1698:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
    169c:	2a00      	cmp	r2, #0
    169e:	d0f9      	beq.n	1694 <hal_timer_config+0x88>
                break;
            }
        }
    }
#endif
    hwtimer = bsptimer->tmr_reg;
    16a0:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
    16a2:	2101      	movs	r1, #1
    16a4:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
    16a6:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
    16a8:	2500      	movs	r5, #0
    16aa:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
    16ae:	2503      	movs	r5, #3
    16b0:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
    16b4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
    16b8:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
    16ba:	7842      	ldrb	r2, [r0, #1]
    16bc:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    16be:	2b00      	cmp	r3, #0
    16c0:	db07      	blt.n	16d2 <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    16c2:	f002 021f 	and.w	r2, r2, #31
    16c6:	095b      	lsrs	r3, r3, #5
    16c8:	fa01 f202 	lsl.w	r2, r1, r2
    16cc:	490c      	ldr	r1, [pc, #48]	; (1700 <hal_timer_config+0xf4>)
    16ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
    16d2:	b97c      	cbnz	r4, 16f4 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
    16d4:	b662      	cpsie	i

    return 0;
    16d6:	2000      	movs	r0, #0

err:
    return rc;
}
    16d8:	bc30      	pop	{r4, r5}
    16da:	4770      	bx	lr
    return rc;
    16dc:	2016      	movs	r0, #22
    16de:	4770      	bx	lr
    16e0:	2016      	movs	r0, #22
    16e2:	4770      	bx	lr
    16e4:	2016      	movs	r0, #22
    16e6:	4770      	bx	lr
    16e8:	2016      	movs	r0, #22
    16ea:	4770      	bx	lr
    16ec:	2016      	movs	r0, #22
    16ee:	4770      	bx	lr
    16f0:	2016      	movs	r0, #22
}
    16f2:	4770      	bx	lr
    return 0;
    16f4:	2000      	movs	r0, #0
    16f6:	e7ef      	b.n	16d8 <hal_timer_config+0xcc>
    16f8:	0000559c 	.word	0x0000559c
    16fc:	00f42400 	.word	0x00f42400
    1700:	e000e100 	.word	0xe000e100

00001704 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
    1704:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    1706:	2805      	cmp	r0, #5
    1708:	dc0c      	bgt.n	1724 <hal_timer_read+0x20>
    170a:	4b09      	ldr	r3, [pc, #36]	; (1730 <hal_timer_read+0x2c>)
    170c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1710:	b140      	cbz	r0, 1724 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
    1712:	7883      	ldrb	r3, [r0, #2]
    1714:	b91b      	cbnz	r3, 171e <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    1716:	6900      	ldr	r0, [r0, #16]
    1718:	f7ff fe3a 	bl	1390 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
    171c:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
    171e:	f7ff fec5 	bl	14ac <hal_timer_read_bsptimer>
    1722:	e7fb      	b.n	171c <hal_timer_read+0x18>
    assert(0);
    1724:	2300      	movs	r3, #0
    1726:	461a      	mov	r2, r3
    1728:	4619      	mov	r1, r3
    172a:	4618      	mov	r0, r3
    172c:	f000 f802 	bl	1734 <__assert_func>
    1730:	0000559c 	.word	0x0000559c

00001734 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    1734:	b508      	push	{r3, lr}
    1736:	4675      	mov	r5, lr
    1738:	4604      	mov	r4, r0
    173a:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    173c:	f000 f8b1 	bl	18a2 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    1740:	f000 feef 	bl	2522 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    1744:	b16c      	cbz	r4, 1762 <__assert_func+0x2e>
    1746:	4633      	mov	r3, r6
    1748:	4622      	mov	r2, r4
    174a:	4629      	mov	r1, r5
    174c:	4807      	ldr	r0, [pc, #28]	; (176c <__assert_func+0x38>)
    174e:	f000 ff09 	bl	2564 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    1752:	4b07      	ldr	r3, [pc, #28]	; (1770 <__assert_func+0x3c>)
    1754:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1758:	605a      	str	r2, [r3, #4]
    asm("isb");
    175a:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    175e:	f7fe fd01 	bl	164 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    1762:	4629      	mov	r1, r5
    1764:	4803      	ldr	r0, [pc, #12]	; (1774 <__assert_func+0x40>)
    1766:	f000 fefd 	bl	2564 <console_printf>
    176a:	e7f2      	b.n	1752 <__assert_func+0x1e>
    176c:	000055c4 	.word	0x000055c4
    1770:	e000ed00 	.word	0xe000ed00
    1774:	000055b4 	.word	0x000055b4

00001778 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    1778:	b500      	push	{lr}
    177a:	b083      	sub	sp, #12
    177c:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    177e:	f000 fed0 	bl	2522 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    1782:	4d1b      	ldr	r5, [pc, #108]	; (17f0 <os_default_irq+0x78>)
    1784:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    1786:	6822      	ldr	r2, [r4, #0]
    1788:	f3c1 0108 	ubfx	r1, r1, #0, #9
    178c:	4819      	ldr	r0, [pc, #100]	; (17f4 <os_default_irq+0x7c>)
    178e:	f000 fee9 	bl	2564 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    1792:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    1794:	6883      	ldr	r3, [r0, #8]
    1796:	6842      	ldr	r2, [r0, #4]
    1798:	6801      	ldr	r1, [r0, #0]
    179a:	68c0      	ldr	r0, [r0, #12]
    179c:	9000      	str	r0, [sp, #0]
    179e:	4816      	ldr	r0, [pc, #88]	; (17f8 <os_default_irq+0x80>)
    17a0:	f000 fee0 	bl	2564 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    17a4:	6923      	ldr	r3, [r4, #16]
    17a6:	9300      	str	r3, [sp, #0]
    17a8:	68e3      	ldr	r3, [r4, #12]
    17aa:	68a2      	ldr	r2, [r4, #8]
    17ac:	6861      	ldr	r1, [r4, #4]
    17ae:	4813      	ldr	r0, [pc, #76]	; (17fc <os_default_irq+0x84>)
    17b0:	f000 fed8 	bl	2564 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    17b4:	6a23      	ldr	r3, [r4, #32]
    17b6:	9300      	str	r3, [sp, #0]
    17b8:	69e3      	ldr	r3, [r4, #28]
    17ba:	69a2      	ldr	r2, [r4, #24]
    17bc:	6961      	ldr	r1, [r4, #20]
    17be:	4810      	ldr	r0, [pc, #64]	; (1800 <os_default_irq+0x88>)
    17c0:	f000 fed0 	bl	2564 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    17c4:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    17c6:	6983      	ldr	r3, [r0, #24]
    17c8:	6942      	ldr	r2, [r0, #20]
    17ca:	6901      	ldr	r1, [r0, #16]
    17cc:	69c0      	ldr	r0, [r0, #28]
    17ce:	9000      	str	r0, [sp, #0]
    17d0:	480c      	ldr	r0, [pc, #48]	; (1804 <os_default_irq+0x8c>)
    17d2:	f000 fec7 	bl	2564 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    17d6:	6869      	ldr	r1, [r5, #4]
    17d8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    17da:	6aab      	ldr	r3, [r5, #40]	; 0x28
    17dc:	480a      	ldr	r0, [pc, #40]	; (1808 <os_default_irq+0x90>)
    17de:	f000 fec1 	bl	2564 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    17e2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    17e4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    17e6:	4809      	ldr	r0, [pc, #36]	; (180c <os_default_irq+0x94>)
    17e8:	f000 febc 	bl	2564 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    17ec:	f7fe fcba 	bl	164 <hal_system_reset>
    17f0:	e000ed00 	.word	0xe000ed00
    17f4:	000055dc 	.word	0x000055dc
    17f8:	00005610 	.word	0x00005610
    17fc:	00005644 	.word	0x00005644
    1800:	00005678 	.word	0x00005678
    1804:	000056ac 	.word	0x000056ac
    1808:	000056e0 	.word	0x000056e0
    180c:	00005708 	.word	0x00005708

00001810 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
    1810:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    1812:	4601      	mov	r1, r0
    1814:	2000      	movs	r0, #0
    1816:	f7ff fef9 	bl	160c <hal_timer_config>
    return rc;
}
    181a:	bd08      	pop	{r3, pc}

0000181c <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
    181c:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    181e:	2000      	movs	r0, #0
    1820:	f7ff ff70 	bl	1704 <hal_timer_read>
    return cpu_time;
}
    1824:	bd08      	pop	{r3, pc}

00001826 <os_cputime_delay_ticks>:
{
    1826:	b510      	push	{r4, lr}
    1828:	4604      	mov	r4, r0
    until = os_cputime_get32() + ticks;
    182a:	f7ff fff7 	bl	181c <os_cputime_get32>
    182e:	4404      	add	r4, r0
    while ((int32_t)(os_cputime_get32() - until) < 0) {
    1830:	f7ff fff4 	bl	181c <os_cputime_get32>
    1834:	1b00      	subs	r0, r0, r4
    1836:	2800      	cmp	r0, #0
    1838:	dbfa      	blt.n	1830 <os_cputime_delay_ticks+0xa>
}
    183a:	bd10      	pop	{r4, pc}

0000183c <os_cputime_delay_usecs>:
{
    183c:	b508      	push	{r3, lr}
    os_cputime_delay_ticks(ticks);
    183e:	f7ff fff2 	bl	1826 <os_cputime_delay_ticks>
}
    1842:	bd08      	pop	{r3, pc}

00001844 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    1844:	b510      	push	{r4, lr}
    1846:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    1848:	6903      	ldr	r3, [r0, #16]
    184a:	6941      	ldr	r1, [r0, #20]
    184c:	4798      	blx	r3
    if (rc != 0) {
    184e:	4603      	mov	r3, r0
    1850:	b128      	cbz	r0, 185e <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    1852:	7ee2      	ldrb	r2, [r4, #27]
    1854:	f012 0f08 	tst.w	r2, #8
    1858:	d105      	bne.n	1866 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    185a:	2300      	movs	r3, #0
    185c:	e003      	b.n	1866 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    185e:	7ee2      	ldrb	r2, [r4, #27]
    1860:	f042 0201 	orr.w	r2, r2, #1
    1864:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
    1866:	4618      	mov	r0, r3
    1868:	bd10      	pop	{r4, pc}
	...

0000186c <os_dev_initialize_all>:
    return (rc);
}

int
os_dev_initialize_all(uint8_t stage)
{
    186c:	b538      	push	{r3, r4, r5, lr}
    186e:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    1870:	4b08      	ldr	r3, [pc, #32]	; (1894 <os_dev_initialize_all+0x28>)
    1872:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    1874:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    1876:	e000      	b.n	187a <os_dev_initialize_all+0xe>
    1878:	6a24      	ldr	r4, [r4, #32]
    187a:	b144      	cbz	r4, 188e <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    187c:	7e23      	ldrb	r3, [r4, #24]
    187e:	42ab      	cmp	r3, r5
    1880:	d1fa      	bne.n	1878 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    1882:	4620      	mov	r0, r4
    1884:	f7ff ffde 	bl	1844 <os_dev_initialize>
            if (rc) {
    1888:	4602      	mov	r2, r0
    188a:	2800      	cmp	r0, #0
    188c:	d0f4      	beq.n	1878 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    188e:	4610      	mov	r0, r2
    1890:	bd38      	pop	{r3, r4, r5, pc}
    1892:	bf00      	nop
    1894:	200001a4 	.word	0x200001a4

00001898 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    1898:	b508      	push	{r3, lr}
    os_time_advance(1);
    189a:	2001      	movs	r0, #1
    189c:	f000 f950 	bl	1b40 <os_time_advance>
}
    18a0:	bd08      	pop	{r3, pc}

000018a2 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    18a2:	f3ef 8010 	mrs	r0, PRIMASK

#if MCU_CRITICAL_BASEPRI
    isr_ctx = __get_BASEPRI();
    __set_BASEPRI((MCU_CRITICAL_BASEPRI) << (8 - __NVIC_PRIO_BITS));
#else
    isr_ctx = __get_PRIMASK() & 1;
    18a6:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
    18aa:	b672      	cpsid	i
    __disable_irq();
#endif

    return isr_ctx;
}
    18ac:	4770      	bx	lr

000018ae <os_arch_restore_sr>:
os_arch_restore_sr(os_sr_t isr_ctx)
{
#if MCU_CRITICAL_BASEPRI
    __set_BASEPRI(isr_ctx);
#else
    if (!isr_ctx) {
    18ae:	b900      	cbnz	r0, 18b2 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    18b0:	b662      	cpsie	i
        __enable_irq();
    }
#endif
}
    18b2:	4770      	bx	lr

000018b4 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
    18b4:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    18b6:	2003      	movs	r0, #3
    18b8:	f7ff ffd8 	bl	186c <os_dev_initialize_all>
    18bc:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    18be:	b920      	cbnz	r0, 18ca <os_pkg_init+0x16>

    os_mempool_module_init();
    18c0:	f000 f894 	bl	19ec <os_mempool_module_init>
    os_msys_init();
    18c4:	f000 f91c 	bl	1b00 <os_msys_init>
}
    18c8:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    18ca:	2300      	movs	r3, #0
    18cc:	461a      	mov	r2, r3
    18ce:	4619      	mov	r1, r3
    18d0:	4618      	mov	r0, r3
    18d2:	f7ff ff2f 	bl	1734 <__assert_func>

000018d6 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    18d6:	2200      	movs	r2, #0
    18d8:	6002      	str	r2, [r0, #0]
    18da:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
    18dc:	4603      	mov	r3, r0
    18de:	f843 2f08 	str.w	r2, [r3, #8]!
    18e2:	60c3      	str	r3, [r0, #12]
}
    18e4:	4770      	bx	lr
	...

000018e8 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    18e8:	2800      	cmp	r0, #0
    18ea:	d031      	beq.n	1950 <os_mempool_init_internal+0x68>
{
    18ec:	b430      	push	{r4, r5}
    18ee:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    18f0:	2a00      	cmp	r2, #0
    18f2:	d02f      	beq.n	1954 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    18f4:	b1bb      	cbz	r3, 1926 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    18f6:	b113      	cbz	r3, 18fe <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    18f8:	f013 0f03 	tst.w	r3, #3
    18fc:	d12c      	bne.n	1958 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    18fe:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    1900:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    1902:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    1904:	f89d 000c 	ldrb.w	r0, [sp, #12]
    1908:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    190a:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    190c:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    190e:	9802      	ldr	r0, [sp, #8]
    1910:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    1912:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    1914:	b199      	cbz	r1, 193e <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    1916:	f012 0f03 	tst.w	r2, #3
    191a:	d002      	beq.n	1922 <os_mempool_init_internal+0x3a>
    191c:	f022 0203 	bic.w	r2, r2, #3
    1920:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    1922:	2001      	movs	r0, #1
    1924:	e007      	b.n	1936 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    1926:	2900      	cmp	r1, #0
    1928:	d0e5      	beq.n	18f6 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    192a:	2003      	movs	r0, #3
    192c:	e00e      	b.n	194c <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    192e:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    1930:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    1932:	3001      	adds	r0, #1
            block_addr += true_block_size;
    1934:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    1936:	4281      	cmp	r1, r0
    1938:	dcf9      	bgt.n	192e <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    193a:	2200      	movs	r2, #0
    193c:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    193e:	2000      	movs	r0, #0
    1940:	6120      	str	r0, [r4, #16]
    1942:	4b06      	ldr	r3, [pc, #24]	; (195c <os_mempool_init_internal+0x74>)
    1944:	685a      	ldr	r2, [r3, #4]
    1946:	6014      	str	r4, [r2, #0]
    1948:	3410      	adds	r4, #16
    194a:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    194c:	bc30      	pop	{r4, r5}
    194e:	4770      	bx	lr
        return OS_INVALID_PARM;
    1950:	2003      	movs	r0, #3
}
    1952:	4770      	bx	lr
        return OS_INVALID_PARM;
    1954:	2003      	movs	r0, #3
    1956:	e7f9      	b.n	194c <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    1958:	2004      	movs	r0, #4
    195a:	e7f7      	b.n	194c <os_mempool_init_internal+0x64>
    195c:	200001b0 	.word	0x200001b0

00001960 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    1960:	b510      	push	{r4, lr}
    1962:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    1964:	2400      	movs	r4, #0
    1966:	9401      	str	r4, [sp, #4]
    1968:	9c04      	ldr	r4, [sp, #16]
    196a:	9400      	str	r4, [sp, #0]
    196c:	f7ff ffbc 	bl	18e8 <os_mempool_init_internal>
}
    1970:	b002      	add	sp, #8
    1972:	bd10      	pop	{r4, pc}

00001974 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
    1974:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    1976:	b1a0      	cbz	r0, 19a2 <os_memblock_get+0x2e>
    1978:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    197a:	f7ff ff92 	bl	18a2 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    197e:	88e3      	ldrh	r3, [r4, #6]
    1980:	b153      	cbz	r3, 1998 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    1982:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    1984:	682a      	ldr	r2, [r5, #0]
    1986:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    1988:	3b01      	subs	r3, #1
    198a:	b29b      	uxth	r3, r3
    198c:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    198e:	8922      	ldrh	r2, [r4, #8]
    1990:	4293      	cmp	r3, r2
    1992:	d202      	bcs.n	199a <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
    1994:	8123      	strh	r3, [r4, #8]
    1996:	e000      	b.n	199a <os_memblock_get+0x26>
    block = NULL;
    1998:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
    199a:	f7ff ff88 	bl	18ae <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    199e:	4628      	mov	r0, r5
    19a0:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    19a2:	2500      	movs	r5, #0
    return (void *)block;
    19a4:	e7fb      	b.n	199e <os_memblock_get+0x2a>

000019a6 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    19a6:	b538      	push	{r3, r4, r5, lr}
    19a8:	4604      	mov	r4, r0
    19aa:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    19ac:	f7ff ff79 	bl	18a2 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    19b0:	6963      	ldr	r3, [r4, #20]
    19b2:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    19b4:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    19b6:	88e3      	ldrh	r3, [r4, #6]
    19b8:	3301      	adds	r3, #1
    19ba:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    19bc:	f7ff ff77 	bl	18ae <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    19c0:	2000      	movs	r0, #0
    19c2:	bd38      	pop	{r3, r4, r5, pc}

000019c4 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    19c4:	b168      	cbz	r0, 19e2 <os_memblock_put+0x1e>
{
    19c6:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
    19c8:	b169      	cbz	r1, 19e6 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    19ca:	7a83      	ldrb	r3, [r0, #10]
    19cc:	f013 0f01 	tst.w	r3, #1
    19d0:	d004      	beq.n	19dc <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    19d2:	69c3      	ldr	r3, [r0, #28]
    19d4:	b113      	cbz	r3, 19dc <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    19d6:	6a02      	ldr	r2, [r0, #32]
    19d8:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    19da:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
    19dc:	f7ff ffe3 	bl	19a6 <os_memblock_put_from_cb>
    19e0:	e7fb      	b.n	19da <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
    19e2:	2003      	movs	r0, #3
}
    19e4:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    19e6:	2003      	movs	r0, #3
    19e8:	e7f7      	b.n	19da <os_memblock_put+0x16>
	...

000019ec <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    19ec:	4b02      	ldr	r3, [pc, #8]	; (19f8 <os_mempool_module_init+0xc>)
    19ee:	2200      	movs	r2, #0
    19f0:	601a      	str	r2, [r3, #0]
    19f2:	605b      	str	r3, [r3, #4]
}
    19f4:	4770      	bx	lr
    19f6:	bf00      	nop
    19f8:	200001b0 	.word	0x200001b0

000019fc <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    19fc:	4b02      	ldr	r3, [pc, #8]	; (1a08 <os_msys_find_biggest_pool+0xc>)
    19fe:	6818      	ldr	r0, [r3, #0]
    1a00:	b108      	cbz	r0, 1a06 <os_msys_find_biggest_pool+0xa>
    1a02:	6858      	ldr	r0, [r3, #4]
    1a04:	3808      	subs	r0, #8
}
    1a06:	4770      	bx	lr
    1a08:	20000138 	.word	0x20000138

00001a0c <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1a0c:	4b09      	ldr	r3, [pc, #36]	; (1a34 <os_msys_find_pool+0x28>)
    1a0e:	6819      	ldr	r1, [r3, #0]
    1a10:	460b      	mov	r3, r1
    1a12:	b123      	cbz	r3, 1a1e <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
    1a14:	881a      	ldrh	r2, [r3, #0]
    1a16:	4282      	cmp	r2, r0
    1a18:	d201      	bcs.n	1a1e <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1a1a:	689b      	ldr	r3, [r3, #8]
    1a1c:	e7f9      	b.n	1a12 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
    1a1e:	b10b      	cbz	r3, 1a24 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
    1a20:	4618      	mov	r0, r3
    1a22:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    1a24:	b119      	cbz	r1, 1a2e <os_msys_find_pool+0x22>
    1a26:	4b03      	ldr	r3, [pc, #12]	; (1a34 <os_msys_find_pool+0x28>)
    1a28:	685b      	ldr	r3, [r3, #4]
    1a2a:	3b08      	subs	r3, #8
    1a2c:	e7f8      	b.n	1a20 <os_msys_find_pool+0x14>
    1a2e:	460b      	mov	r3, r1
    return (pool);
    1a30:	e7f6      	b.n	1a20 <os_msys_find_pool+0x14>
    1a32:	bf00      	nop
    1a34:	20000138 	.word	0x20000138

00001a38 <os_msys_register>:
{
    1a38:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1a3a:	4b11      	ldr	r3, [pc, #68]	; (1a80 <os_msys_register+0x48>)
    1a3c:	681d      	ldr	r5, [r3, #0]
    1a3e:	462b      	mov	r3, r5
    prev = NULL;
    1a40:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1a42:	b133      	cbz	r3, 1a52 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    1a44:	8801      	ldrh	r1, [r0, #0]
    1a46:	881a      	ldrh	r2, [r3, #0]
    1a48:	4291      	cmp	r1, r2
    1a4a:	d302      	bcc.n	1a52 <os_msys_register+0x1a>
        prev = pool;
    1a4c:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1a4e:	689b      	ldr	r3, [r3, #8]
    1a50:	e7f7      	b.n	1a42 <os_msys_register+0xa>
    if (prev) {
    1a52:	b15c      	cbz	r4, 1a6c <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    1a54:	68a3      	ldr	r3, [r4, #8]
    1a56:	6083      	str	r3, [r0, #8]
    1a58:	b11b      	cbz	r3, 1a62 <os_msys_register+0x2a>
    1a5a:	60a0      	str	r0, [r4, #8]
}
    1a5c:	2000      	movs	r0, #0
    1a5e:	bc30      	pop	{r4, r5}
    1a60:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    1a62:	f100 0308 	add.w	r3, r0, #8
    1a66:	4a06      	ldr	r2, [pc, #24]	; (1a80 <os_msys_register+0x48>)
    1a68:	6053      	str	r3, [r2, #4]
    1a6a:	e7f6      	b.n	1a5a <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    1a6c:	6085      	str	r5, [r0, #8]
    1a6e:	b115      	cbz	r5, 1a76 <os_msys_register+0x3e>
    1a70:	4b03      	ldr	r3, [pc, #12]	; (1a80 <os_msys_register+0x48>)
    1a72:	6018      	str	r0, [r3, #0]
    1a74:	e7f2      	b.n	1a5c <os_msys_register+0x24>
    1a76:	f100 0308 	add.w	r3, r0, #8
    1a7a:	4a01      	ldr	r2, [pc, #4]	; (1a80 <os_msys_register+0x48>)
    1a7c:	6053      	str	r3, [r2, #4]
    1a7e:	e7f7      	b.n	1a70 <os_msys_register+0x38>
    1a80:	20000138 	.word	0x20000138

00001a84 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    1a84:	b530      	push	{r4, r5, lr}
    1a86:	b083      	sub	sp, #12
    1a88:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    1a8a:	9d07      	ldr	r5, [sp, #28]
    1a8c:	9501      	str	r5, [sp, #4]
    1a8e:	9d06      	ldr	r5, [sp, #24]
    1a90:	9500      	str	r5, [sp, #0]
    1a92:	f000 fe53 	bl	273c <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    1a96:	b138      	cbz	r0, 1aa8 <os_msys_init_once+0x24>
    1a98:	2000      	movs	r0, #0
    1a9a:	9000      	str	r0, [sp, #0]
    1a9c:	4b09      	ldr	r3, [pc, #36]	; (1ac4 <os_msys_init_once+0x40>)
    1a9e:	681d      	ldr	r5, [r3, #0]
    1aa0:	4603      	mov	r3, r0
    1aa2:	4602      	mov	r2, r0
    1aa4:	4601      	mov	r1, r0
    1aa6:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
    1aa8:	4620      	mov	r0, r4
    1aaa:	f7ff ffc5 	bl	1a38 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    1aae:	b138      	cbz	r0, 1ac0 <os_msys_init_once+0x3c>
    1ab0:	2000      	movs	r0, #0
    1ab2:	9000      	str	r0, [sp, #0]
    1ab4:	4b03      	ldr	r3, [pc, #12]	; (1ac4 <os_msys_init_once+0x40>)
    1ab6:	681c      	ldr	r4, [r3, #0]
    1ab8:	4603      	mov	r3, r0
    1aba:	4602      	mov	r2, r0
    1abc:	4601      	mov	r1, r0
    1abe:	47a0      	blx	r4
}
    1ac0:	b003      	add	sp, #12
    1ac2:	bd30      	pop	{r4, r5, pc}
    1ac4:	20000150 	.word	0x20000150

00001ac8 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    1ac8:	4b02      	ldr	r3, [pc, #8]	; (1ad4 <os_msys_reset+0xc>)
    1aca:	2200      	movs	r2, #0
    1acc:	601a      	str	r2, [r3, #0]
    1ace:	605b      	str	r3, [r3, #4]
}
    1ad0:	4770      	bx	lr
    1ad2:	bf00      	nop
    1ad4:	20000138 	.word	0x20000138

00001ad8 <os_msys_get_pkthdr>:
{
    1ad8:	b510      	push	{r4, lr}
    1ada:	460c      	mov	r4, r1
    if (dsize == 0) {
    1adc:	b930      	cbnz	r0, 1aec <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
    1ade:	f7ff ff8d 	bl	19fc <os_msys_find_biggest_pool>
    if (!pool) {
    1ae2:	b158      	cbz	r0, 1afc <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    1ae4:	b2e1      	uxtb	r1, r4
    1ae6:	f000 f8b5 	bl	1c54 <os_mbuf_get_pkthdr>
}
    1aea:	bd10      	pop	{r4, pc}
    1aec:	f101 0308 	add.w	r3, r1, #8
    1af0:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    1af2:	4403      	add	r3, r0
    1af4:	b298      	uxth	r0, r3
    1af6:	f7ff ff89 	bl	1a0c <os_msys_find_pool>
    1afa:	e7f2      	b.n	1ae2 <os_msys_get_pkthdr+0xa>
    return (NULL);
    1afc:	2000      	movs	r0, #0
    1afe:	e7f4      	b.n	1aea <os_msys_get_pkthdr+0x12>

00001b00 <os_msys_init>:

void
os_msys_init(void)
{
    1b00:	b500      	push	{lr}
    1b02:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    1b04:	f7ff ffe0 	bl	1ac8 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    1b08:	4b06      	ldr	r3, [pc, #24]	; (1b24 <os_msys_init+0x24>)
    1b0a:	9301      	str	r3, [sp, #4]
    1b0c:	f44f 7392 	mov.w	r3, #292	; 0x124
    1b10:	9300      	str	r3, [sp, #0]
    1b12:	2340      	movs	r3, #64	; 0x40
    1b14:	4a04      	ldr	r2, [pc, #16]	; (1b28 <os_msys_init+0x28>)
    1b16:	4905      	ldr	r1, [pc, #20]	; (1b2c <os_msys_init+0x2c>)
    1b18:	4805      	ldr	r0, [pc, #20]	; (1b30 <os_msys_init+0x30>)
    1b1a:	f7ff ffb3 	bl	1a84 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    1b1e:	b003      	add	sp, #12
    1b20:	f85d fb04 	ldr.w	pc, [sp], #4
    1b24:	00005724 	.word	0x00005724
    1b28:	20004ab8 	.word	0x20004ab8
    1b2c:	20004ac4 	.word	0x20004ac4
    1b30:	200001b8 	.word	0x200001b8

00001b34 <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
    1b34:	4b01      	ldr	r3, [pc, #4]	; (1b3c <os_time_get+0x8>)
    1b36:	6818      	ldr	r0, [r3, #0]
    1b38:	4770      	bx	lr
    1b3a:	bf00      	nop
    1b3c:	20004ae4 	.word	0x20004ae4

00001b40 <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
    1b40:	4a02      	ldr	r2, [pc, #8]	; (1b4c <os_time_advance+0xc>)
    1b42:	6813      	ldr	r3, [r2, #0]
    1b44:	4418      	add	r0, r3
    1b46:	6010      	str	r0, [r2, #0]
}
    1b48:	4770      	bx	lr
    1b4a:	bf00      	nop
    1b4c:	20004ae4 	.word	0x20004ae4

00001b50 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    1b50:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    1b54:	482b      	ldr	r0, [pc, #172]	; (1c04 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    1b56:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    1b58:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    1b5a:	f380 8814 	msr	CONTROL, r0
        ISB
    1b5e:	f3bf 8f6f 	isb	sy
        BX      LR
    1b62:	4770      	bx	lr

00001b64 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    1b64:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    1b68:	4770      	bx	lr

00001b6a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    1b6a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    1b6e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    1b70:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    1b74:	b951      	cbnz	r1, 1b8c <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    1b76:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1b7a:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    1b7c:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1b7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    1b82:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    1b86:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    1b8a:	4770      	bx	lr

00001b8c <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1b8c:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    1b8e:	4a1e      	ldr	r2, [pc, #120]	; (1c08 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    1b90:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    1b92:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    1b94:	d809      	bhi.n	1baa <SVC_Done>

        LDR     R4,=SVC_Table-4
    1b96:	4c1d      	ldr	r4, [pc, #116]	; (1c0c <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    1b98:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    1b9c:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    1ba0:	47a0      	blx	r4

        MRS     R12,PSP
    1ba2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    1ba6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

00001baa <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1baa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    1bae:	4770      	bx	lr

00001bb0 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    1bb0:	4b17      	ldr	r3, [pc, #92]	; (1c10 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    1bb2:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    1bb4:	4b17      	ldr	r3, [pc, #92]	; (1c14 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    1bb6:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    1bb8:	4291      	cmp	r1, r2
        IT      EQ
    1bba:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    1bbc:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    1bbe:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    1bc2:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    1bc6:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    1bca:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    1bcc:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    1bd0:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    1bd4:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    1bd8:	4770      	bx	lr

00001bda <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1bda:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    1bdc:	f7ff fe5c 	bl	1898 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    1be4:	4770      	bx	lr

00001be6 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    1be6:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    1bea:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    1bec:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    1bf0:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    1bf4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    1bf8:	4668      	mov	r0, sp
        BL      os_default_irq
    1bfa:	f7ff fdbd 	bl	1778 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    1bfe:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    1c02:	4770      	bx	lr
        LDR     R0,=os_flags
    1c04:	200001ac 	.word	0x200001ac
        LDR     R2,=SVC_Count
    1c08:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    1c0c:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    1c10:	20000140 	.word	0x20000140
        LDR     R3,=g_current_task      /* Get current task */
    1c14:	20004ae0 	.word	0x20004ae0

00001c18 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
    1c18:	3a10      	subs	r2, #16
    1c1a:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    1c1c:	6041      	str	r1, [r0, #4]

    return (0);
}
    1c1e:	2000      	movs	r0, #0
    1c20:	4770      	bx	lr

00001c22 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    1c22:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    1c24:	8803      	ldrh	r3, [r0, #0]
    1c26:	428b      	cmp	r3, r1
    1c28:	d312      	bcc.n	1c50 <os_mbuf_get+0x2e>
    1c2a:	460d      	mov	r5, r1
    1c2c:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    1c2e:	6840      	ldr	r0, [r0, #4]
    1c30:	f7ff fea0 	bl	1974 <os_memblock_get>
    if (!om) {
    1c34:	4603      	mov	r3, r0
    1c36:	b148      	cbz	r0, 1c4c <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    1c38:	2200      	movs	r2, #0
    1c3a:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
    1c3c:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
    1c3e:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
    1c40:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    1c42:	f100 0110 	add.w	r1, r0, #16
    1c46:	4429      	add	r1, r5
    1c48:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
    1c4a:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    1c4c:	4618      	mov	r0, r3
    1c4e:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    1c50:	2300      	movs	r3, #0
    return om;
    1c52:	e7fb      	b.n	1c4c <os_mbuf_get+0x2a>

00001c54 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    1c54:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    1c56:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    1c5a:	8803      	ldrh	r3, [r0, #0]
    1c5c:	42ab      	cmp	r3, r5
    1c5e:	d310      	bcc.n	1c82 <os_mbuf_get_pkthdr+0x2e>
    1c60:	2dff      	cmp	r5, #255	; 0xff
    1c62:	d810      	bhi.n	1c86 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    1c64:	2100      	movs	r1, #0
    1c66:	f7ff ffdc 	bl	1c22 <os_mbuf_get>
    if (om) {
    1c6a:	4603      	mov	r3, r0
    1c6c:	b138      	cbz	r0, 1c7e <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
    1c6e:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
    1c70:	6802      	ldr	r2, [r0, #0]
    1c72:	4415      	add	r5, r2
    1c74:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    1c76:	2200      	movs	r2, #0
    1c78:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
    1c7a:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    1c7c:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    1c7e:	4618      	mov	r0, r3
    1c80:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    1c82:	2300      	movs	r3, #0
    1c84:	e7fb      	b.n	1c7e <os_mbuf_get_pkthdr+0x2a>
    1c86:	2300      	movs	r3, #0
    return om;
    1c88:	e7f9      	b.n	1c7e <os_mbuf_get_pkthdr+0x2a>

00001c8a <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    1c8a:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    1c8c:	6883      	ldr	r3, [r0, #8]
    1c8e:	b123      	cbz	r3, 1c9a <os_mbuf_free+0x10>
    1c90:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    1c92:	6858      	ldr	r0, [r3, #4]
    1c94:	f7ff fe96 	bl	19c4 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    1c98:	bd08      	pop	{r3, pc}
    rc = 0;
    1c9a:	2000      	movs	r0, #0
    return (rc);
    1c9c:	e7fc      	b.n	1c98 <os_mbuf_free+0xe>

00001c9e <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
    1c9e:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    1ca0:	b160      	cbz	r0, 1cbc <os_mbuf_free_chain+0x1e>
{
    1ca2:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    1ca4:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
    1ca6:	4618      	mov	r0, r3
    1ca8:	f7ff ffef 	bl	1c8a <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
    1cac:	4623      	mov	r3, r4
        if (rc != 0) {
    1cae:	4602      	mov	r2, r0
    1cb0:	b910      	cbnz	r0, 1cb8 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
    1cb2:	2c00      	cmp	r4, #0
    1cb4:	d1f6      	bne.n	1ca4 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
    1cb6:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    1cb8:	4610      	mov	r0, r2
    1cba:	bd10      	pop	{r4, pc}
    rc = 0;
    1cbc:	2200      	movs	r2, #0
}
    1cbe:	4610      	mov	r0, r2
    1cc0:	4770      	bx	lr

00001cc2 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
    1cc2:	2300      	movs	r3, #0
    while (om != NULL) {
    1cc4:	e003      	b.n	1cce <os_mbuf_len+0xc>
        len += om->om_len;
    1cc6:	88c2      	ldrh	r2, [r0, #6]
    1cc8:	4413      	add	r3, r2
    1cca:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
    1ccc:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
    1cce:	2800      	cmp	r0, #0
    1cd0:	d1f9      	bne.n	1cc6 <os_mbuf_len+0x4>
    }

    return len;
}
    1cd2:	4618      	mov	r0, r3
    1cd4:	4770      	bx	lr

00001cd6 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    1cd6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    1cda:	2800      	cmp	r0, #0
    1cdc:	d04d      	beq.n	1d7a <os_mbuf_append+0xa4>
    1cde:	460f      	mov	r7, r1
    1ce0:	4691      	mov	r9, r2
    1ce2:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    1ce4:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    1ce8:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    1cea:	e000      	b.n	1cee <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
    1cec:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
    1cee:	68eb      	ldr	r3, [r5, #12]
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	d1fb      	bne.n	1cec <os_mbuf_append+0x16>
    }

    remainder = len;
    1cf4:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
    1cf6:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    1cf8:	f105 0410 	add.w	r4, r5, #16
    1cfc:	881b      	ldrh	r3, [r3, #0]
    1cfe:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    1d00:	6828      	ldr	r0, [r5, #0]
    1d02:	88eb      	ldrh	r3, [r5, #6]
    1d04:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    1d06:	1a24      	subs	r4, r4, r0
    1d08:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    1d0a:	b164      	cbz	r4, 1d26 <os_mbuf_append+0x50>
        if (space > remainder) {
    1d0c:	454c      	cmp	r4, r9
    1d0e:	dd00      	ble.n	1d12 <os_mbuf_append+0x3c>
            space = remainder;
    1d10:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    1d12:	4622      	mov	r2, r4
    1d14:	4639      	mov	r1, r7
    1d16:	f000 f860 	bl	1dda <memcpy>

        last->om_len += space;
    1d1a:	88eb      	ldrh	r3, [r5, #6]
    1d1c:	4423      	add	r3, r4
    1d1e:	80eb      	strh	r3, [r5, #6]
        data += space;
    1d20:	4427      	add	r7, r4
        remainder -= space;
    1d22:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    1d26:	2e00      	cmp	r6, #0
    1d28:	dd16      	ble.n	1d58 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
    1d2a:	2100      	movs	r1, #0
    1d2c:	4640      	mov	r0, r8
    1d2e:	f7ff ff78 	bl	1c22 <os_mbuf_get>
        if (!new) {
    1d32:	4604      	mov	r4, r0
    1d34:	b180      	cbz	r0, 1d58 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
    1d36:	f8b8 2000 	ldrh.w	r2, [r8]
    1d3a:	42b2      	cmp	r2, r6
    1d3c:	bfa8      	it	ge
    1d3e:	4632      	movge	r2, r6
    1d40:	b292      	uxth	r2, r2
    1d42:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    1d44:	4639      	mov	r1, r7
    1d46:	6800      	ldr	r0, [r0, #0]
    1d48:	f000 f847 	bl	1dda <memcpy>
        data += new->om_len;
    1d4c:	88e3      	ldrh	r3, [r4, #6]
    1d4e:	441f      	add	r7, r3
        remainder -= new->om_len;
    1d50:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
    1d52:	60ec      	str	r4, [r5, #12]
        last = new;
    1d54:	4625      	mov	r5, r4
    1d56:	e7e6      	b.n	1d26 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    1d58:	f89a 3005 	ldrb.w	r3, [sl, #5]
    1d5c:	2b07      	cmp	r3, #7
    1d5e:	d907      	bls.n	1d70 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    1d60:	eba9 0906 	sub.w	r9, r9, r6
    1d64:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    1d68:	fa13 f989 	uxtah	r9, r3, r9
    1d6c:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    1d70:	b106      	cbz	r6, 1d74 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
    1d72:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
    1d74:	4630      	mov	r0, r6
    1d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
    1d7a:	2602      	movs	r6, #2
    1d7c:	e7fa      	b.n	1d74 <os_mbuf_append+0x9e>

00001d7e <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    1d7e:	4603      	mov	r3, r0
    1d80:	b128      	cbz	r0, 1d8e <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    1d82:	2000      	movs	r0, #0
    1d84:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    1d86:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    1d88:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    1d8a:	6018      	str	r0, [r3, #0]
    1d8c:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    1d8e:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    1d90:	4770      	bx	lr

00001d92 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    1d92:	b470      	push	{r4, r5, r6}
    1d94:	f04f 0500 	mov.w	r5, #0
    1d98:	f022 0603 	bic.w	r6, r2, #3
    1d9c:	e005      	b.n	1daa <test1>

00001d9e <loop1>:
    1d9e:	5943      	ldr	r3, [r0, r5]
    1da0:	594c      	ldr	r4, [r1, r5]
    1da2:	42a3      	cmp	r3, r4
    1da4:	d104      	bne.n	1db0 <res1>
    1da6:	f105 0504 	add.w	r5, r5, #4

00001daa <test1>:
    1daa:	42b5      	cmp	r5, r6
    1dac:	d1f7      	bne.n	1d9e <loop1>
    1dae:	e00d      	b.n	1dcc <test2>

00001db0 <res1>:
    1db0:	ba1b      	rev	r3, r3
    1db2:	ba24      	rev	r4, r4
    1db4:	1b1b      	subs	r3, r3, r4
    1db6:	bf8c      	ite	hi
    1db8:	2301      	movhi	r3, #1
    1dba:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    1dbe:	e009      	b.n	1dd4 <done>

00001dc0 <loop2>:
    1dc0:	5d43      	ldrb	r3, [r0, r5]
    1dc2:	5d4c      	ldrb	r4, [r1, r5]
    1dc4:	1b1b      	subs	r3, r3, r4
    1dc6:	d105      	bne.n	1dd4 <done>
    1dc8:	f105 0501 	add.w	r5, r5, #1

00001dcc <test2>:
    1dcc:	4295      	cmp	r5, r2
    1dce:	d1f7      	bne.n	1dc0 <loop2>
    1dd0:	f04f 0300 	mov.w	r3, #0

00001dd4 <done>:
    1dd4:	4618      	mov	r0, r3
    1dd6:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    1dd8:	4770      	bx	lr

00001dda <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    1dda:	e001      	b.n	1de0 <test1>

00001ddc <loop1>:
    1ddc:	588b      	ldr	r3, [r1, r2]
    1dde:	5083      	str	r3, [r0, r2]

00001de0 <test1>:
    1de0:	3a04      	subs	r2, #4
    1de2:	d5fb      	bpl.n	1ddc <loop1>
    1de4:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    1de8:	e001      	b.n	1dee <test2>

00001dea <loop2>:
    1dea:	5c8b      	ldrb	r3, [r1, r2]
    1dec:	5483      	strb	r3, [r0, r2]

00001dee <test2>:
    1dee:	3a01      	subs	r2, #1
    1df0:	d5fb      	bpl.n	1dea <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    1df2:	4770      	bx	lr

00001df4 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    1df4:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    1df6:	4605      	mov	r5, r0
    1df8:	b2c9      	uxtb	r1, r1
    1dfa:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    1dfe:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    1e02:	18ab      	adds	r3, r5, r2
    1e04:	2403      	movs	r4, #3
    1e06:	4023      	ands	r3, r4
    1e08:	1ad3      	subs	r3, r2, r3
    1e0a:	d40b      	bmi.n	1e24 <memset+0x30>
    1e0c:	e001      	b.n	1e12 <memset+0x1e>
    1e0e:	3a01      	subs	r2, #1
    1e10:	54a9      	strb	r1, [r5, r2]
    1e12:	429a      	cmp	r2, r3
    1e14:	d1fb      	bne.n	1e0e <memset+0x1a>
    1e16:	e000      	b.n	1e1a <memset+0x26>
    1e18:	50a9      	str	r1, [r5, r2]
    1e1a:	3a04      	subs	r2, #4
    1e1c:	d5fc      	bpl.n	1e18 <memset+0x24>
    1e1e:	3204      	adds	r2, #4
    1e20:	e000      	b.n	1e24 <memset+0x30>
    1e22:	54a9      	strb	r1, [r5, r2]
    1e24:	3a01      	subs	r2, #1
    1e26:	d5fc      	bpl.n	1e22 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    1e28:	bc30      	pop	{r4, r5}
    1e2a:	4770      	bx	lr

00001e2c <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    1e2c:	4603      	mov	r3, r0
	while (*ss)
    1e2e:	e000      	b.n	1e32 <strlen+0x6>
		ss++;
    1e30:	3301      	adds	r3, #1
	while (*ss)
    1e32:	781a      	ldrb	r2, [r3, #0]
    1e34:	2a00      	cmp	r2, #0
    1e36:	d1fb      	bne.n	1e30 <strlen+0x4>
	return ss - s;
}
    1e38:	1a18      	subs	r0, r3, r0
    1e3a:	4770      	bx	lr

00001e3c <relocate_vector_table>:
/// Relocate the Arm Vector Table from vector_table to relocated_vector_table.
/// relocated_vector_table must be aligned to 0x100 page boundary.
static void relocate_vector_table(void *vector_table, void *relocated_vector_table) {
    uint32_t *current_location = (uint32_t *) vector_table;
    uint32_t *new_location = (uint32_t *) relocated_vector_table;
    if (new_location == current_location) { return; }  //  No need to relocate
    1e3c:	4288      	cmp	r0, r1
    1e3e:	d021      	beq.n	1e84 <relocate_vector_table+0x48>
static void relocate_vector_table(void *vector_table, void *relocated_vector_table) {
    1e40:	b538      	push	{r3, r4, r5, lr}
    //  Check whether we need to copy the vectors.
    int vector_diff = 0;  //  Non-zero if a vector is different
    for (int i = 0; i < NVIC_NUM_VECTORS; i++) {
    1e42:	2300      	movs	r3, #0
    1e44:	2b35      	cmp	r3, #53	; 0x35
    1e46:	dc07      	bgt.n	1e58 <relocate_vector_table+0x1c>
        if (new_location[i] != current_location[i]) {
    1e48:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
    1e4c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    1e50:	42a5      	cmp	r5, r4
    1e52:	d103      	bne.n	1e5c <relocate_vector_table+0x20>
    for (int i = 0; i < NVIC_NUM_VECTORS; i++) {
    1e54:	3301      	adds	r3, #1
    1e56:	e7f5      	b.n	1e44 <relocate_vector_table+0x8>
    int vector_diff = 0;  //  Non-zero if a vector is different
    1e58:	2300      	movs	r3, #0
    1e5a:	e000      	b.n	1e5e <relocate_vector_table+0x22>
            vector_diff = 1;
    1e5c:	2301      	movs	r3, #1
    1e5e:	460c      	mov	r4, r1
    1e60:	4605      	mov	r5, r0
            break;
        }
    }
    //  If we need to copy the vectors, erase the flash ROM and write the vectors.
    if (vector_diff) {
    1e62:	b913      	cbnz	r3, 1e6a <relocate_vector_table+0x2e>
            vector_table, //  From the original address
            0x100         //  Assume that we copy an entire page
        );
    }
    //  Point VTOR Register in the System Control Block to the relocated vector table.
    *SCB_VTOR = (uint32_t) relocated_vector_table;
    1e64:	4b08      	ldr	r3, [pc, #32]	; (1e88 <relocate_vector_table+0x4c>)
    1e66:	601c      	str	r4, [r3, #0]
}
    1e68:	bd38      	pop	{r3, r4, r5, pc}
        hal_flash_erase(  //  Erase...
    1e6a:	f44f 7280 	mov.w	r2, #256	; 0x100
    1e6e:	2000      	movs	r0, #0
    1e70:	f002 fb00 	bl	4474 <hal_flash_erase>
        hal_flash_write(  //  Write...
    1e74:	f44f 7380 	mov.w	r3, #256	; 0x100
    1e78:	462a      	mov	r2, r5
    1e7a:	4621      	mov	r1, r4
    1e7c:	2000      	movs	r0, #0
    1e7e:	f002 fabf 	bl	4400 <hal_flash_write>
    1e82:	e7ef      	b.n	1e64 <relocate_vector_table+0x28>
    1e84:	4770      	bx	lr
    1e86:	bf00      	nop
    1e88:	e000ed08 	.word	0xe000ed08

00001e8c <pinetime_boot_init>:
void pinetime_boot_init(void) {
    1e8c:	b538      	push	{r3, r4, r5, lr}
    console_printf("Starting Bootloader...\n");
    1e8e:	4820      	ldr	r0, [pc, #128]	; (1f10 <pinetime_boot_init+0x84>)
    1e90:	f000 fb68 	bl	2564 <console_printf>
    console_flush();
    1e94:	f000 fbbc 	bl	2610 <console_flush>
    hal_gpio_init_in(PUSH_BUTTON_IN, HAL_GPIO_PULL_DOWN);
    1e98:	2102      	movs	r1, #2
    1e9a:	200d      	movs	r0, #13
    1e9c:	f7fe ff21 	bl	ce2 <hal_gpio_init_in>
    hal_gpio_init_out(PUSH_BUTTON_OUT, 1);
    1ea0:	2101      	movs	r1, #1
    1ea2:	200f      	movs	r0, #15
    1ea4:	f7fe ff33 	bl	d0e <hal_gpio_init_out>
    hal_gpio_write(PUSH_BUTTON_OUT, 1);  //  Enable the button
    1ea8:	2101      	movs	r1, #1
    1eaa:	200f      	movs	r0, #15
    1eac:	f7fe ff4b 	bl	d46 <hal_gpio_write>
    pinetime_boot_display_image();
    1eb0:	f000 fab6 	bl	2420 <pinetime_boot_display_image>
    console_printf("Check button: %d\n", hal_gpio_read(PUSH_BUTTON_IN));
    1eb4:	200d      	movs	r0, #13
    1eb6:	f7fe ff57 	bl	d68 <hal_gpio_read>
    1eba:	4601      	mov	r1, r0
    1ebc:	4815      	ldr	r0, [pc, #84]	; (1f14 <pinetime_boot_init+0x88>)
    1ebe:	f000 fb51 	bl	2564 <console_printf>
    console_flush();
    1ec2:	f000 fba5 	bl	2610 <console_flush>
    console_printf("Waiting 5 seconds for button...\n");
    1ec6:	4814      	ldr	r0, [pc, #80]	; (1f18 <pinetime_boot_init+0x8c>)
    1ec8:	f000 fb4c 	bl	2564 <console_printf>
    console_flush();
    1ecc:	f000 fba0 	bl	2610 <console_flush>
    for (int i = 0; i < 64 * 5; i++) {
    1ed0:	2500      	movs	r5, #0
    uint8_t button_samples = 0;
    1ed2:	462c      	mov	r4, r5
    for (int i = 0; i < 64 * 5; i++) {
    1ed4:	e009      	b.n	1eea <pinetime_boot_init+0x5e>
        for (int delay = 0; delay < 100000; delay++);
    1ed6:	3301      	adds	r3, #1
    1ed8:	4a10      	ldr	r2, [pc, #64]	; (1f1c <pinetime_boot_init+0x90>)
    1eda:	4293      	cmp	r3, r2
    1edc:	ddfb      	ble.n	1ed6 <pinetime_boot_init+0x4a>
        button_samples += hal_gpio_read(PUSH_BUTTON_IN);
    1ede:	200d      	movs	r0, #13
    1ee0:	f7fe ff42 	bl	d68 <hal_gpio_read>
    1ee4:	4404      	add	r4, r0
    1ee6:	b2e4      	uxtb	r4, r4
    for (int i = 0; i < 64 * 5; i++) {
    1ee8:	3501      	adds	r5, #1
    1eea:	f5b5 7fa0 	cmp.w	r5, #320	; 0x140
    1eee:	da01      	bge.n	1ef4 <pinetime_boot_init+0x68>
        for (int delay = 0; delay < 100000; delay++);
    1ef0:	2300      	movs	r3, #0
    1ef2:	e7f1      	b.n	1ed8 <pinetime_boot_init+0x4c>
    if (button_samples > 64) {  //  20% of total samples
    1ef4:	2c40      	cmp	r4, #64	; 0x40
    1ef6:	d800      	bhi.n	1efa <pinetime_boot_init+0x6e>
}
    1ef8:	bd38      	pop	{r3, r4, r5, pc}
        console_printf("Flashing and resetting...\n");
    1efa:	4809      	ldr	r0, [pc, #36]	; (1f20 <pinetime_boot_init+0x94>)
    1efc:	f000 fb32 	bl	2564 <console_printf>
        console_flush();
    1f00:	f000 fb86 	bl	2610 <console_flush>
        boot_set_pending(0);
    1f04:	2000      	movs	r0, #0
    1f06:	f000 fe43 	bl	2b90 <boot_set_pending>
        hal_system_reset();
    1f0a:	f7fe f92b 	bl	164 <hal_system_reset>
    1f0e:	bf00      	nop
    1f10:	00005740 	.word	0x00005740
    1f14:	00005758 	.word	0x00005758
    1f18:	0000576c 	.word	0x0000576c
    1f1c:	0001869f 	.word	0x0001869f
    1f20:	00005790 	.word	0x00005790

00001f24 <setup_watchdog>:
  NRF_WDT->CONFIG &= ~(WDT_CONFIG_SLEEP_Msk << WDT_CONFIG_SLEEP_Pos);
    1f24:	4b0f      	ldr	r3, [pc, #60]	; (1f64 <setup_watchdog+0x40>)
    1f26:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1f2a:	f022 0201 	bic.w	r2, r2, #1
    1f2e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
  NRF_WDT->CONFIG |= (WDT_CONFIG_HALT_Run << WDT_CONFIG_SLEEP_Pos);
    1f32:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1f36:	f042 0201 	orr.w	r2, r2, #1
    1f3a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
  NRF_WDT->CONFIG &= ~(WDT_CONFIG_HALT_Msk << WDT_CONFIG_HALT_Pos);
    1f3e:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1f42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    1f46:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
  NRF_WDT->CONFIG |= (WDT_CONFIG_HALT_Pause << WDT_CONFIG_HALT_Pos);
    1f4a:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1f4e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
  NRF_WDT->CRV = crv;
    1f52:	4a05      	ldr	r2, [pc, #20]	; (1f68 <setup_watchdog+0x44>)
    1f54:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
  NRF_WDT->RREN = (WDT_RREN_RR0_Enabled << WDT_RREN_RR0_Pos);
    1f58:	2201      	movs	r2, #1
    1f5a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  NRF_WDT->TASKS_START = 1;
    1f5e:	601a      	str	r2, [r3, #0]
}
    1f60:	4770      	bx	lr
    1f62:	bf00      	nop
    1f64:	40010000 	.word	0x40010000
    1f68:	00037fff 	.word	0x00037fff

00001f6c <boot_custom_start>:
) {
    1f6c:	b570      	push	{r4, r5, r6, lr}
    1f6e:	4606      	mov	r6, r0
    1f70:	460d      	mov	r5, r1
    console_printf("Bootloader done\n");
    1f72:	480a      	ldr	r0, [pc, #40]	; (1f9c <boot_custom_start+0x30>)
    1f74:	f000 faf6 	bl	2564 <console_printf>
    console_flush();
    1f78:	f000 fb4a 	bl	2610 <console_flush>
        rsp->br_image_off +          //  Offset of FLASH_AREA_IMAGE_0 (application image): 0x8000
    1f7c:	68ac      	ldr	r4, [r5, #8]
        flash_base +                 //  0
    1f7e:	4434      	add	r4, r6
        rsp->br_hdr->ih_hdr_size     //  Size of MCUBoot image header (0x20)
    1f80:	682b      	ldr	r3, [r5, #0]
    1f82:	891b      	ldrh	r3, [r3, #8]
        rsp->br_image_off +          //  Offset of FLASH_AREA_IMAGE_0 (application image): 0x8000
    1f84:	441c      	add	r4, r3
    relocate_vector_table(  //  Relocate the vector table...
    1f86:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1f8a:	4620      	mov	r0, r4
    1f8c:	f7ff ff56 	bl	1e3c <relocate_vector_table>
    setup_watchdog();
    1f90:	f7ff ffc8 	bl	1f24 <setup_watchdog>
    hal_system_start(vector_table);
    1f94:	4620      	mov	r0, r4
    1f96:	f002 fb1e 	bl	45d6 <hal_system_start>
    1f9a:	bf00      	nop
    1f9c:	0000572c 	.word	0x0000572c

00001fa0 <HardFault_Handler>:

/// In case of hard fault (e.g. assertion failure), reboot.
/// Assetion failure may be due to SPI Bus corruption, which causes SPI Flash access to fail in spiflash_identify() in repos/apache-mynewt-core/hw/drivers/flash/spiflash/src/spiflash.c
void HardFault_Handler() {
    1fa0:	b508      	push	{r3, lr}
    //  Blink the screen quickly 4 times
    blink_backlight(4, 4);
    1fa2:	2104      	movs	r1, #4
    1fa4:	4608      	mov	r0, r1
    1fa6:	f000 f861 	bl	206c <blink_backlight>
  __ASM volatile ("dsb 0xF":::"memory");
    1faa:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1fae:	4905      	ldr	r1, [pc, #20]	; (1fc4 <HardFault_Handler+0x24>)
    1fb0:	68ca      	ldr	r2, [r1, #12]
    1fb2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1fb6:	4b04      	ldr	r3, [pc, #16]	; (1fc8 <HardFault_Handler+0x28>)
    1fb8:	4313      	orrs	r3, r2
    1fba:	60cb      	str	r3, [r1, #12]
    1fbc:	f3bf 8f4f 	dsb	sy
    __NOP();
    1fc0:	bf00      	nop
    1fc2:	e7fd      	b.n	1fc0 <HardFault_Handler+0x20>
    1fc4:	e000ed00 	.word	0xe000ed00
    1fc8:	05fa0004 	.word	0x05fa0004

00001fcc <init_backlight>:

static void blink_pattern(const uint8_t pattern[], int length);
static void delay_ms(uint32_t ms);

/// Init the backlights
static void init_backlight(void) {
    1fcc:	b510      	push	{r4, lr}
    for (int b = 0; b < sizeof(backlights); b++) {
    1fce:	2400      	movs	r4, #0
    1fd0:	e003      	b.n	1fda <init_backlight+0xe>
        uint8_t gpio = backlights[b];
        //  If High backlight...
        if (b == 2) {
            //  Switch to on
            hal_gpio_init_out(gpio, 0);
    1fd2:	2100      	movs	r1, #0
    1fd4:	f7fe fe9b 	bl	d0e <hal_gpio_init_out>
    for (int b = 0; b < sizeof(backlights); b++) {
    1fd8:	3401      	adds	r4, #1
    1fda:	2c02      	cmp	r4, #2
    1fdc:	d807      	bhi.n	1fee <init_backlight+0x22>
        uint8_t gpio = backlights[b];
    1fde:	4b04      	ldr	r3, [pc, #16]	; (1ff0 <init_backlight+0x24>)
    1fe0:	5d18      	ldrb	r0, [r3, r4]
        if (b == 2) {
    1fe2:	2c02      	cmp	r4, #2
    1fe4:	d0f5      	beq.n	1fd2 <init_backlight+0x6>
        } else {
            //  Switch to off
            hal_gpio_init_out(gpio, 1);
    1fe6:	2101      	movs	r1, #1
    1fe8:	f7fe fe91 	bl	d0e <hal_gpio_init_out>
    1fec:	e7f4      	b.n	1fd8 <init_backlight+0xc>
        }
    }
}
    1fee:	bd10      	pop	{r4, pc}
    1ff0:	000057ac 	.word	0x000057ac

00001ff4 <delay_ms>:
        hal_gpio_write(gpio, 1);
    }
}

/// Sleep for the specified number of milliseconds
static void delay_ms(uint32_t ms) {
    1ff4:	b538      	push	{r3, r4, r5, lr}
    1ff6:	4605      	mov	r5, r0
    //  os_time_delay() doesn't work in MCUBoot because the scheduler has not started
    uint8_t button_samples = 0;
    for (int i = 0; i < ms; i++) {
    1ff8:	2400      	movs	r4, #0
    1ffa:	e007      	b.n	200c <delay_ms+0x18>
        for (int delay = 0; delay < 100000; delay++) {}
    1ffc:	3301      	adds	r3, #1
    1ffe:	4a06      	ldr	r2, [pc, #24]	; (2018 <delay_ms+0x24>)
    2000:	4293      	cmp	r3, r2
    2002:	ddfb      	ble.n	1ffc <delay_ms+0x8>
        button_samples += hal_gpio_read(PUSH_BUTTON_IN);
    2004:	200d      	movs	r0, #13
    2006:	f7fe feaf 	bl	d68 <hal_gpio_read>
    for (int i = 0; i < ms; i++) {
    200a:	3401      	adds	r4, #1
    200c:	42ac      	cmp	r4, r5
    200e:	d201      	bcs.n	2014 <delay_ms+0x20>
        for (int delay = 0; delay < 100000; delay++) {}
    2010:	2300      	movs	r3, #0
    2012:	e7f4      	b.n	1ffe <delay_ms+0xa>
    }
    2014:	bd38      	pop	{r3, r4, r5, pc}
    2016:	bf00      	nop
    2018:	0001869f 	.word	0x0001869f

0000201c <blink_pattern>:
static void blink_pattern(const uint8_t pattern[], int length) {
    201c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2020:	4680      	mov	r8, r0
    2022:	460f      	mov	r7, r1
    for (int i = 0; i < length; i++) {
    2024:	2600      	movs	r6, #0
    2026:	e016      	b.n	2056 <blink_pattern+0x3a>
                hal_gpio_write(gpio, 0);
    2028:	2100      	movs	r1, #0
    202a:	f7fe fe8c 	bl	d46 <hal_gpio_write>
        for (int b = 0; b < sizeof(backlights); b++) {
    202e:	3401      	adds	r4, #1
    2030:	2c02      	cmp	r4, #2
    2032:	d807      	bhi.n	2044 <blink_pattern+0x28>
            uint8_t gpio = backlights[b];
    2034:	4b0c      	ldr	r3, [pc, #48]	; (2068 <blink_pattern+0x4c>)
    2036:	5d18      	ldrb	r0, [r3, r4]
            if (b == level) {                
    2038:	42a5      	cmp	r5, r4
    203a:	d0f5      	beq.n	2028 <blink_pattern+0xc>
                hal_gpio_write(gpio, 1);
    203c:	2101      	movs	r1, #1
    203e:	f7fe fe82 	bl	d46 <hal_gpio_write>
    2042:	e7f4      	b.n	202e <blink_pattern+0x12>
        delay_ms(10);
    2044:	200a      	movs	r0, #10
    2046:	f7ff ffd5 	bl	1ff4 <delay_ms>
        hal_gpio_write(gpio, 1);
    204a:	2101      	movs	r1, #1
    204c:	4b06      	ldr	r3, [pc, #24]	; (2068 <blink_pattern+0x4c>)
    204e:	5d58      	ldrb	r0, [r3, r5]
    2050:	f7fe fe79 	bl	d46 <hal_gpio_write>
    for (int i = 0; i < length; i++) {
    2054:	3601      	adds	r6, #1
    2056:	42be      	cmp	r6, r7
    2058:	da03      	bge.n	2062 <blink_pattern+0x46>
        uint8_t level = pattern[i];
    205a:	f818 5006 	ldrb.w	r5, [r8, r6]
        for (int b = 0; b < sizeof(backlights); b++) {
    205e:	2400      	movs	r4, #0
    2060:	e7e6      	b.n	2030 <blink_pattern+0x14>
}
    2062:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2066:	bf00      	nop
    2068:	000057ac 	.word	0x000057ac

0000206c <blink_backlight>:
void blink_backlight(int pattern_id, int repetitions) {
    206c:	b570      	push	{r4, r5, r6, lr}
    206e:	4605      	mov	r5, r0
    2070:	460e      	mov	r6, r1
    if (first_blink) {
    2072:	4b1a      	ldr	r3, [pc, #104]	; (20dc <blink_backlight+0x70>)
    2074:	681b      	ldr	r3, [r3, #0]
    2076:	b90b      	cbnz	r3, 207c <blink_backlight+0x10>
void blink_backlight(int pattern_id, int repetitions) {
    2078:	2400      	movs	r4, #0
    207a:	e00a      	b.n	2092 <blink_backlight+0x26>
        first_blink = 0;
    207c:	4b17      	ldr	r3, [pc, #92]	; (20dc <blink_backlight+0x70>)
    207e:	2200      	movs	r2, #0
    2080:	601a      	str	r2, [r3, #0]
        init_backlight();
    2082:	f7ff ffa3 	bl	1fcc <init_backlight>
    2086:	e7f7      	b.n	2078 <blink_backlight+0xc>
            case 0:  blink_pattern(slower_pulse,  sizeof(slower_pulse));  break;
    2088:	2124      	movs	r1, #36	; 0x24
    208a:	4815      	ldr	r0, [pc, #84]	; (20e0 <blink_backlight+0x74>)
    208c:	f7ff ffc6 	bl	201c <blink_pattern>
    for (int i = 0; i < repetitions; i++) {
    2090:	3401      	adds	r4, #1
    2092:	42b4      	cmp	r4, r6
    2094:	da20      	bge.n	20d8 <blink_backlight+0x6c>
        switch (pattern_id) {
    2096:	2d03      	cmp	r5, #3
    2098:	d819      	bhi.n	20ce <blink_backlight+0x62>
    209a:	a301      	add	r3, pc, #4	; (adr r3, 20a0 <blink_backlight+0x34>)
    209c:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    20a0:	00002089 	.word	0x00002089
    20a4:	000020b1 	.word	0x000020b1
    20a8:	000020bb 	.word	0x000020bb
    20ac:	000020c5 	.word	0x000020c5
            case 1:  blink_pattern(slow_pulse,    sizeof(slow_pulse));    break;
    20b0:	2112      	movs	r1, #18
    20b2:	480c      	ldr	r0, [pc, #48]	; (20e4 <blink_backlight+0x78>)
    20b4:	f7ff ffb2 	bl	201c <blink_pattern>
    20b8:	e7ea      	b.n	2090 <blink_backlight+0x24>
            case 2:  blink_pattern(fast_pulse,    sizeof(fast_pulse));    break;
    20ba:	210c      	movs	r1, #12
    20bc:	480a      	ldr	r0, [pc, #40]	; (20e8 <blink_backlight+0x7c>)
    20be:	f7ff ffad 	bl	201c <blink_pattern>
    20c2:	e7e5      	b.n	2090 <blink_backlight+0x24>
            case 3:  blink_pattern(faster_pulse,  sizeof(faster_pulse));  break;
    20c4:	2106      	movs	r1, #6
    20c6:	4809      	ldr	r0, [pc, #36]	; (20ec <blink_backlight+0x80>)
    20c8:	f7ff ffa8 	bl	201c <blink_pattern>
    20cc:	e7e0      	b.n	2090 <blink_backlight+0x24>
            default: blink_pattern(fastest_pulse, sizeof(fastest_pulse)); break;
    20ce:	2103      	movs	r1, #3
    20d0:	4807      	ldr	r0, [pc, #28]	; (20f0 <blink_backlight+0x84>)
    20d2:	f7ff ffa3 	bl	201c <blink_pattern>
    20d6:	e7db      	b.n	2090 <blink_backlight+0x24>
}
    20d8:	bd70      	pop	{r4, r5, r6, pc}
    20da:	bf00      	nop
    20dc:	20000148 	.word	0x20000148
    20e0:	000057dc 	.word	0x000057dc
    20e4:	000057c8 	.word	0x000057c8
    20e8:	000057b0 	.word	0x000057b0
    20ec:	000057bc 	.word	0x000057bc
    20f0:	000057c4 	.word	0x000057c4

000020f4 <hard_reset>:
    delay_ms(200);
    return 0;
}

/// Reset the display controller
static int hard_reset(void) {
    20f4:	b508      	push	{r3, lr}
    hal_gpio_write(DISPLAY_RST, 1);
    20f6:	2101      	movs	r1, #1
    20f8:	201a      	movs	r0, #26
    20fa:	f7fe fe24 	bl	d46 <hal_gpio_write>
    hal_gpio_write(DISPLAY_RST, 0);
    20fe:	2100      	movs	r1, #0
    2100:	201a      	movs	r0, #26
    2102:	f7fe fe20 	bl	d46 <hal_gpio_write>
    hal_gpio_write(DISPLAY_RST, 1);
    2106:	2101      	movs	r1, #1
    2108:	201a      	movs	r0, #26
    210a:	f7fe fe1c 	bl	d46 <hal_gpio_write>
    return 0;
}
    210e:	2000      	movs	r0, #0
    2110:	bd08      	pop	{r3, pc}
	...

00002114 <delay_ms>:
    hal_gpio_write(DISPLAY_CS, 1);
    return 0;
}

/// Sleep for the specified number of milliseconds
static void delay_ms(uint32_t ms) {
    2114:	b510      	push	{r4, lr}
    uint32_t delay_ticks = ms * OS_TICKS_PER_SEC / 1000;
    os_time_delay(delay_ticks);
#else  //  If Task Scheduler is disabled (i.e. MCUBoot)...
    //  os_time_delay() doesn't work in MCUBoot because the scheduler has not started
    uint8_t button_samples = 0;
    for (int i = 0; i < 64; i++) {
    2116:	2400      	movs	r4, #0
    2118:	e007      	b.n	212a <delay_ms+0x16>
        for (int delay = 0; delay < 100000; delay++) {}
    211a:	3301      	adds	r3, #1
    211c:	4a05      	ldr	r2, [pc, #20]	; (2134 <delay_ms+0x20>)
    211e:	4293      	cmp	r3, r2
    2120:	ddfb      	ble.n	211a <delay_ms+0x6>
        button_samples += hal_gpio_read(PUSH_BUTTON_IN);
    2122:	200d      	movs	r0, #13
    2124:	f7fe fe20 	bl	d68 <hal_gpio_read>
    for (int i = 0; i < 64; i++) {
    2128:	3401      	adds	r4, #1
    212a:	2c3f      	cmp	r4, #63	; 0x3f
    212c:	dc01      	bgt.n	2132 <delay_ms+0x1e>
        for (int delay = 0; delay < 100000; delay++) {}
    212e:	2300      	movs	r3, #0
    2130:	e7f4      	b.n	211c <delay_ms+0x8>
    }
#endif  //  MYNEWT_VAL(OS_SCHEDULING)
}
    2132:	bd10      	pop	{r4, pc}
    2134:	0001869f 	.word	0x0001869f

00002138 <transmit_spi>:
    if (len == 0) { return 0; }
    2138:	b909      	cbnz	r1, 213e <transmit_spi+0x6>
}
    213a:	2000      	movs	r0, #0
    213c:	4770      	bx	lr
static int transmit_spi(const uint8_t *data, uint16_t len) {
    213e:	b538      	push	{r3, r4, r5, lr}
    2140:	460d      	mov	r5, r1
    2142:	4604      	mov	r4, r0
    hal_gpio_write(DISPLAY_CS, 0);
    2144:	2100      	movs	r1, #0
    2146:	2019      	movs	r0, #25
    2148:	f7fe fdfd 	bl	d46 <hal_gpio_write>
    int rc = hal_spi_txrx(DISPLAY_SPI, 
    214c:	462b      	mov	r3, r5
    214e:	2200      	movs	r2, #0
    2150:	4621      	mov	r1, r4
    2152:	4610      	mov	r0, r2
    2154:	f7ff f842 	bl	11dc <hal_spi_txrx>
    assert(rc == 0);
    2158:	b928      	cbnz	r0, 2166 <transmit_spi+0x2e>
    hal_gpio_write(DISPLAY_CS, 1);
    215a:	2101      	movs	r1, #1
    215c:	2019      	movs	r0, #25
    215e:	f7fe fdf2 	bl	d46 <hal_gpio_write>
}
    2162:	2000      	movs	r0, #0
    2164:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    2166:	2300      	movs	r3, #0
    2168:	461a      	mov	r2, r3
    216a:	4619      	mov	r1, r3
    216c:	4618      	mov	r0, r3
    216e:	f7ff fae1 	bl	1734 <__assert_func>

00002172 <write_data>:
static int write_data(const uint8_t *data, uint16_t len) {
    2172:	b538      	push	{r3, r4, r5, lr}
    2174:	4604      	mov	r4, r0
    2176:	460d      	mov	r5, r1
    hal_gpio_write(DISPLAY_DC, 1);
    2178:	2101      	movs	r1, #1
    217a:	2012      	movs	r0, #18
    217c:	f7fe fde3 	bl	d46 <hal_gpio_write>
    transmit_spi(data, len);
    2180:	4629      	mov	r1, r5
    2182:	4620      	mov	r0, r4
    2184:	f7ff ffd8 	bl	2138 <transmit_spi>
}
    2188:	2000      	movs	r0, #0
    218a:	bd38      	pop	{r3, r4, r5, pc}

0000218c <write_command>:
static int write_command(uint8_t command, const uint8_t *params, uint16_t len) {
    218c:	b570      	push	{r4, r5, r6, lr}
    218e:	b082      	sub	sp, #8
    2190:	460d      	mov	r5, r1
    2192:	4616      	mov	r6, r2
    2194:	ac02      	add	r4, sp, #8
    2196:	f804 0d01 	strb.w	r0, [r4, #-1]!
    hal_gpio_write(DISPLAY_DC, 0);
    219a:	2100      	movs	r1, #0
    219c:	2012      	movs	r0, #18
    219e:	f7fe fdd2 	bl	d46 <hal_gpio_write>
    int rc = transmit_spi(&command, 1);
    21a2:	2101      	movs	r1, #1
    21a4:	4620      	mov	r0, r4
    21a6:	f7ff ffc7 	bl	2138 <transmit_spi>
    assert(rc == 0);
    21aa:	b920      	cbnz	r0, 21b6 <write_command+0x2a>
    if (params != NULL && len > 0) {
    21ac:	b105      	cbz	r5, 21b0 <write_command+0x24>
    21ae:	b946      	cbnz	r6, 21c2 <write_command+0x36>
}
    21b0:	2000      	movs	r0, #0
    21b2:	b002      	add	sp, #8
    21b4:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
    21b6:	2300      	movs	r3, #0
    21b8:	461a      	mov	r2, r3
    21ba:	4619      	mov	r1, r3
    21bc:	4618      	mov	r0, r3
    21be:	f7ff fab9 	bl	1734 <__assert_func>
        rc = write_data(params, len);
    21c2:	4631      	mov	r1, r6
    21c4:	4628      	mov	r0, r5
    21c6:	f7ff ffd4 	bl	2172 <write_data>
        assert(rc == 0);
    21ca:	2800      	cmp	r0, #0
    21cc:	d0f0      	beq.n	21b0 <write_command+0x24>
    21ce:	2300      	movs	r3, #0
    21d0:	461a      	mov	r2, r3
    21d2:	4619      	mov	r1, r3
    21d4:	4618      	mov	r0, r3
    21d6:	f7ff faad 	bl	1734 <__assert_func>
	...

000021dc <init_display>:
static int init_display(void) {
    21dc:	b508      	push	{r3, lr}
    rc = hal_gpio_init_out(DISPLAY_RST, 1); assert(rc == 0);
    21de:	2101      	movs	r1, #1
    21e0:	201a      	movs	r0, #26
    21e2:	f7fe fd94 	bl	d0e <hal_gpio_init_out>
    21e6:	2800      	cmp	r0, #0
    21e8:	d16e      	bne.n	22c8 <init_display+0xec>
    rc = hal_gpio_init_out(DISPLAY_CS, 1); assert(rc == 0);
    21ea:	2101      	movs	r1, #1
    21ec:	2019      	movs	r0, #25
    21ee:	f7fe fd8e 	bl	d0e <hal_gpio_init_out>
    21f2:	2800      	cmp	r0, #0
    21f4:	d16e      	bne.n	22d4 <init_display+0xf8>
    rc = hal_gpio_init_out(DISPLAY_DC, 0); assert(rc == 0);
    21f6:	2100      	movs	r1, #0
    21f8:	2012      	movs	r0, #18
    21fa:	f7fe fd88 	bl	d0e <hal_gpio_init_out>
    21fe:	2800      	cmp	r0, #0
    2200:	d16e      	bne.n	22e0 <init_display+0x104>
    rc = hal_gpio_init_out(DISPLAY_HIGH, 0); assert(rc == 0);
    2202:	2100      	movs	r1, #0
    2204:	2017      	movs	r0, #23
    2206:	f7fe fd82 	bl	d0e <hal_gpio_init_out>
    220a:	2800      	cmp	r0, #0
    220c:	d16e      	bne.n	22ec <init_display+0x110>
    hard_reset();
    220e:	f7ff ff71 	bl	20f4 <hard_reset>
    write_command(SWRESET, NULL, 0);
    2212:	2200      	movs	r2, #0
    2214:	4611      	mov	r1, r2
    2216:	2001      	movs	r0, #1
    2218:	f7ff ffb8 	bl	218c <write_command>
    delay_ms(200);
    221c:	20c8      	movs	r0, #200	; 0xc8
    221e:	f7ff ff79 	bl	2114 <delay_ms>
    write_command(SLPOUT, NULL, 0);
    2222:	2200      	movs	r2, #0
    2224:	4611      	mov	r1, r2
    2226:	2011      	movs	r0, #17
    2228:	f7ff ffb0 	bl	218c <write_command>
    delay_ms(200);
    222c:	20c8      	movs	r0, #200	; 0xc8
    222e:	f7ff ff71 	bl	2114 <delay_ms>
    write_command(FRMCTR1, FRMCTR1_PARA, sizeof(FRMCTR1_PARA));
    2232:	2203      	movs	r2, #3
    2234:	4930      	ldr	r1, [pc, #192]	; (22f8 <init_display+0x11c>)
    2236:	20b1      	movs	r0, #177	; 0xb1
    2238:	f7ff ffa8 	bl	218c <write_command>
    write_command(FRMCTR2, FRMCTR2_PARA, sizeof(FRMCTR2_PARA));
    223c:	2203      	movs	r2, #3
    223e:	492f      	ldr	r1, [pc, #188]	; (22fc <init_display+0x120>)
    2240:	20b2      	movs	r0, #178	; 0xb2
    2242:	f7ff ffa3 	bl	218c <write_command>
    write_command(FRMCTR3, FRMCTR3_PARA, sizeof(FRMCTR3_PARA));
    2246:	2206      	movs	r2, #6
    2248:	492d      	ldr	r1, [pc, #180]	; (2300 <init_display+0x124>)
    224a:	20b3      	movs	r0, #179	; 0xb3
    224c:	f7ff ff9e 	bl	218c <write_command>
    write_command(INVCTR, INVCTR_PARA, sizeof(INVCTR_PARA));
    2250:	2201      	movs	r2, #1
    2252:	492c      	ldr	r1, [pc, #176]	; (2304 <init_display+0x128>)
    2254:	20b4      	movs	r0, #180	; 0xb4
    2256:	f7ff ff99 	bl	218c <write_command>
    write_command(PWCTR1, PWCTR1_PARA, sizeof(PWCTR1_PARA));
    225a:	2203      	movs	r2, #3
    225c:	492a      	ldr	r1, [pc, #168]	; (2308 <init_display+0x12c>)
    225e:	20c0      	movs	r0, #192	; 0xc0
    2260:	f7ff ff94 	bl	218c <write_command>
    write_command(PWCTR2, PWCTR2_PARA, sizeof(PWCTR2_PARA));
    2264:	2201      	movs	r2, #1
    2266:	4929      	ldr	r1, [pc, #164]	; (230c <init_display+0x130>)
    2268:	20c1      	movs	r0, #193	; 0xc1
    226a:	f7ff ff8f 	bl	218c <write_command>
    write_command(PWCTR3, PWCTR3_PARA, sizeof(PWCTR3_PARA));
    226e:	2202      	movs	r2, #2
    2270:	4927      	ldr	r1, [pc, #156]	; (2310 <init_display+0x134>)
    2272:	20c2      	movs	r0, #194	; 0xc2
    2274:	f7ff ff8a 	bl	218c <write_command>
    write_command(PWCTR4, PWCTR4_PARA, sizeof(PWCTR4_PARA));
    2278:	2202      	movs	r2, #2
    227a:	4926      	ldr	r1, [pc, #152]	; (2314 <init_display+0x138>)
    227c:	20c3      	movs	r0, #195	; 0xc3
    227e:	f7ff ff85 	bl	218c <write_command>
    write_command(PWCTR5, PWCTR5_PARA, sizeof(PWCTR5_PARA));
    2282:	2202      	movs	r2, #2
    2284:	4924      	ldr	r1, [pc, #144]	; (2318 <init_display+0x13c>)
    2286:	20c4      	movs	r0, #196	; 0xc4
    2288:	f7ff ff80 	bl	218c <write_command>
    write_command(VMCTR1, VMCTR1_PARA, sizeof(VMCTR1_PARA));
    228c:	2201      	movs	r2, #1
    228e:	4923      	ldr	r1, [pc, #140]	; (231c <init_display+0x140>)
    2290:	20c5      	movs	r0, #197	; 0xc5
    2292:	f7ff ff7b 	bl	218c <write_command>
        write_command(INVON, NULL, 0);
    2296:	2200      	movs	r2, #0
    2298:	4611      	mov	r1, r2
    229a:	2021      	movs	r0, #33	; 0x21
    229c:	f7ff ff76 	bl	218c <write_command>
        write_command(MADCTL, MADCTL1_PARA, sizeof(MADCTL1_PARA));
    22a0:	2201      	movs	r2, #1
    22a2:	491f      	ldr	r1, [pc, #124]	; (2320 <init_display+0x144>)
    22a4:	2036      	movs	r0, #54	; 0x36
    22a6:	f7ff ff71 	bl	218c <write_command>
    write_command(COLMOD, COLMOD_PARA, sizeof(COLMOD_PARA));
    22aa:	2201      	movs	r2, #1
    22ac:	491d      	ldr	r1, [pc, #116]	; (2324 <init_display+0x148>)
    22ae:	203a      	movs	r0, #58	; 0x3a
    22b0:	f7ff ff6c 	bl	218c <write_command>
    write_command(DISPON, NULL, 0);
    22b4:	2200      	movs	r2, #0
    22b6:	4611      	mov	r1, r2
    22b8:	2029      	movs	r0, #41	; 0x29
    22ba:	f7ff ff67 	bl	218c <write_command>
    delay_ms(200);
    22be:	20c8      	movs	r0, #200	; 0xc8
    22c0:	f7ff ff28 	bl	2114 <delay_ms>
}
    22c4:	2000      	movs	r0, #0
    22c6:	bd08      	pop	{r3, pc}
    rc = hal_gpio_init_out(DISPLAY_RST, 1); assert(rc == 0);
    22c8:	2300      	movs	r3, #0
    22ca:	461a      	mov	r2, r3
    22cc:	4619      	mov	r1, r3
    22ce:	4618      	mov	r0, r3
    22d0:	f7ff fa30 	bl	1734 <__assert_func>
    rc = hal_gpio_init_out(DISPLAY_CS, 1); assert(rc == 0);
    22d4:	2300      	movs	r3, #0
    22d6:	461a      	mov	r2, r3
    22d8:	4619      	mov	r1, r3
    22da:	4618      	mov	r0, r3
    22dc:	f7ff fa2a 	bl	1734 <__assert_func>
    rc = hal_gpio_init_out(DISPLAY_DC, 0); assert(rc == 0);
    22e0:	2300      	movs	r3, #0
    22e2:	461a      	mov	r2, r3
    22e4:	4619      	mov	r1, r3
    22e6:	4618      	mov	r0, r3
    22e8:	f7ff fa24 	bl	1734 <__assert_func>
    rc = hal_gpio_init_out(DISPLAY_HIGH, 0); assert(rc == 0);
    22ec:	2300      	movs	r3, #0
    22ee:	461a      	mov	r2, r3
    22f0:	4619      	mov	r1, r3
    22f2:	4618      	mov	r0, r3
    22f4:	f7ff fa1e 	bl	1734 <__assert_func>
    22f8:	00005804 	.word	0x00005804
    22fc:	00005808 	.word	0x00005808
    2300:	0000580c 	.word	0x0000580c
    2304:	00005814 	.word	0x00005814
    2308:	0000581c 	.word	0x0000581c
    230c:	00005820 	.word	0x00005820
    2310:	00005824 	.word	0x00005824
    2314:	00005828 	.word	0x00005828
    2318:	0000582c 	.word	0x0000582c
    231c:	00005830 	.word	0x00005830
    2320:	00005818 	.word	0x00005818
    2324:	00005800 	.word	0x00005800

00002328 <set_orientation>:
static int set_orientation(uint8_t orientation) {
    2328:	b500      	push	{lr}
    232a:	b083      	sub	sp, #12
        uint8_t orientation_para[1] = { orientation };
    232c:	a902      	add	r1, sp, #8
    232e:	f801 0d04 	strb.w	r0, [r1, #-4]!
        int rc = write_command(MADCTL, orientation_para, 1);
    2332:	2201      	movs	r2, #1
    2334:	2036      	movs	r0, #54	; 0x36
    2336:	f7ff ff29 	bl	218c <write_command>
        assert(rc == 0);
    233a:	b918      	cbnz	r0, 2344 <set_orientation+0x1c>
}
    233c:	2000      	movs	r0, #0
    233e:	b003      	add	sp, #12
    2340:	f85d fb04 	ldr.w	pc, [sp], #4
        assert(rc == 0);
    2344:	2300      	movs	r3, #0
    2346:	461a      	mov	r2, r3
    2348:	4619      	mov	r1, r3
    234a:	4618      	mov	r0, r3
    234c:	f7ff f9f2 	bl	1734 <__assert_func>

00002350 <set_window>:
static int set_window(uint8_t left, uint8_t top, uint8_t right, uint8_t bottom) {
    2350:	b5f0      	push	{r4, r5, r6, r7, lr}
    2352:	b083      	sub	sp, #12
    assert(left < COL_COUNT && right < COL_COUNT && top < ROW_COUNT && bottom < ROW_COUNT);
    2354:	28ef      	cmp	r0, #239	; 0xef
    2356:	d839      	bhi.n	23cc <set_window+0x7c>
    2358:	4604      	mov	r4, r0
    235a:	460e      	mov	r6, r1
    235c:	4615      	mov	r5, r2
    235e:	461f      	mov	r7, r3
    2360:	2aef      	cmp	r2, #239	; 0xef
    2362:	d833      	bhi.n	23cc <set_window+0x7c>
    2364:	29ef      	cmp	r1, #239	; 0xef
    2366:	d831      	bhi.n	23cc <set_window+0x7c>
    2368:	2bef      	cmp	r3, #239	; 0xef
    236a:	d82f      	bhi.n	23cc <set_window+0x7c>
    assert(left <= right);
    236c:	4290      	cmp	r0, r2
    236e:	d833      	bhi.n	23d8 <set_window+0x88>
    assert(top <= bottom);
    2370:	4299      	cmp	r1, r3
    2372:	d837      	bhi.n	23e4 <set_window+0x94>
    int rc = write_command(CASET, NULL, 0); assert(rc == 0);
    2374:	2200      	movs	r2, #0
    2376:	4611      	mov	r1, r2
    2378:	202a      	movs	r0, #42	; 0x2a
    237a:	f7ff ff07 	bl	218c <write_command>
    237e:	bbb8      	cbnz	r0, 23f0 <set_window+0xa0>
    uint8_t col_para[4] = { 0x00, left, 0x00, right };
    2380:	2300      	movs	r3, #0
    2382:	f88d 3004 	strb.w	r3, [sp, #4]
    2386:	f88d 4005 	strb.w	r4, [sp, #5]
    238a:	f88d 3006 	strb.w	r3, [sp, #6]
    238e:	f88d 5007 	strb.w	r5, [sp, #7]
    rc = write_data(col_para, 4); assert(rc == 0);
    2392:	2104      	movs	r1, #4
    2394:	eb0d 0001 	add.w	r0, sp, r1
    2398:	f7ff feeb 	bl	2172 <write_data>
    239c:	bb70      	cbnz	r0, 23fc <set_window+0xac>
    rc = write_command(RASET, NULL, 0); assert(rc == 0);
    239e:	2200      	movs	r2, #0
    23a0:	4611      	mov	r1, r2
    23a2:	202b      	movs	r0, #43	; 0x2b
    23a4:	f7ff fef2 	bl	218c <write_command>
    23a8:	bb70      	cbnz	r0, 2408 <set_window+0xb8>
    uint8_t row_para[4] = { 0x00, top, 0x00, bottom };
    23aa:	2300      	movs	r3, #0
    23ac:	f88d 3000 	strb.w	r3, [sp]
    23b0:	f88d 6001 	strb.w	r6, [sp, #1]
    23b4:	f88d 3002 	strb.w	r3, [sp, #2]
    23b8:	f88d 7003 	strb.w	r7, [sp, #3]
    rc = write_data(row_para, 4); assert(rc == 0);
    23bc:	2104      	movs	r1, #4
    23be:	4668      	mov	r0, sp
    23c0:	f7ff fed7 	bl	2172 <write_data>
    23c4:	bb30      	cbnz	r0, 2414 <set_window+0xc4>
}
    23c6:	2000      	movs	r0, #0
    23c8:	b003      	add	sp, #12
    23ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert(left < COL_COUNT && right < COL_COUNT && top < ROW_COUNT && bottom < ROW_COUNT);
    23cc:	2300      	movs	r3, #0
    23ce:	461a      	mov	r2, r3
    23d0:	4619      	mov	r1, r3
    23d2:	4618      	mov	r0, r3
    23d4:	f7ff f9ae 	bl	1734 <__assert_func>
    assert(left <= right);
    23d8:	2300      	movs	r3, #0
    23da:	461a      	mov	r2, r3
    23dc:	4619      	mov	r1, r3
    23de:	4618      	mov	r0, r3
    23e0:	f7ff f9a8 	bl	1734 <__assert_func>
    assert(top <= bottom);
    23e4:	2300      	movs	r3, #0
    23e6:	461a      	mov	r2, r3
    23e8:	4619      	mov	r1, r3
    23ea:	4618      	mov	r0, r3
    23ec:	f7ff f9a2 	bl	1734 <__assert_func>
    int rc = write_command(CASET, NULL, 0); assert(rc == 0);
    23f0:	2300      	movs	r3, #0
    23f2:	461a      	mov	r2, r3
    23f4:	4619      	mov	r1, r3
    23f6:	4618      	mov	r0, r3
    23f8:	f7ff f99c 	bl	1734 <__assert_func>
    rc = write_data(col_para, 4); assert(rc == 0);
    23fc:	2300      	movs	r3, #0
    23fe:	461a      	mov	r2, r3
    2400:	4619      	mov	r1, r3
    2402:	4618      	mov	r0, r3
    2404:	f7ff f996 	bl	1734 <__assert_func>
    rc = write_command(RASET, NULL, 0); assert(rc == 0);
    2408:	2300      	movs	r3, #0
    240a:	461a      	mov	r2, r3
    240c:	4619      	mov	r1, r3
    240e:	4618      	mov	r0, r3
    2410:	f7ff f990 	bl	1734 <__assert_func>
    rc = write_data(row_para, 4); assert(rc == 0);
    2414:	2300      	movs	r3, #0
    2416:	461a      	mov	r2, r3
    2418:	4619      	mov	r1, r3
    241a:	4618      	mov	r0, r3
    241c:	f7ff f98a 	bl	1734 <__assert_func>

00002420 <pinetime_boot_display_image>:
int pinetime_boot_display_image(void) {
    2420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    console_printf("Displaying image...\n"); console_flush();
    2422:	4835      	ldr	r0, [pc, #212]	; (24f8 <pinetime_boot_display_image+0xd8>)
    2424:	f000 f89e 	bl	2564 <console_printf>
    2428:	f000 f8f2 	bl	2610 <console_flush>
    int rc = init_display();  assert(rc == 0);
    242c:	f7ff fed6 	bl	21dc <init_display>
    2430:	b928      	cbnz	r0, 243e <pinetime_boot_display_image+0x1e>
    rc = set_orientation(Landscape);  assert(rc == 0);
    2432:	2060      	movs	r0, #96	; 0x60
    2434:	f7ff ff78 	bl	2328 <set_orientation>
    2438:	b938      	cbnz	r0, 244a <pinetime_boot_display_image+0x2a>
    for (uint8_t row = 0; row < ROW_COUNT; row++) {
    243a:	2600      	movs	r6, #0
    243c:	e051      	b.n	24e2 <pinetime_boot_display_image+0xc2>
    int rc = init_display();  assert(rc == 0);
    243e:	2300      	movs	r3, #0
    2440:	461a      	mov	r2, r3
    2442:	4619      	mov	r1, r3
    2444:	4618      	mov	r0, r3
    2446:	f7ff f975 	bl	1734 <__assert_func>
    rc = set_orientation(Landscape);  assert(rc == 0);
    244a:	2300      	movs	r3, #0
    244c:	461a      	mov	r2, r3
    244e:	4619      	mov	r1, r3
    2450:	4618      	mov	r0, r3
    2452:	f7ff f96f 	bl	1734 <__assert_func>
            uint16_t len = (right - left + 1) * BYTES_PER_PIXEL;
    2456:	1be5      	subs	r5, r4, r7
    2458:	3501      	adds	r5, #1
    245a:	006d      	lsls	r5, r5, #1
    245c:	b2ad      	uxth	r5, r5
            uint32_t offset = ((top * COL_COUNT) + left) * BYTES_PER_PIXEL;
    245e:	ebc6 1306 	rsb	r3, r6, r6, lsl #4
    2462:	0119      	lsls	r1, r3, #4
    2464:	4439      	add	r1, r7
            int rc = hal_flash_read(FLASH_DEVICE, offset, flash_buffer, len); assert(rc == 0);
    2466:	462b      	mov	r3, r5
    2468:	4a24      	ldr	r2, [pc, #144]	; (24fc <pinetime_boot_display_image+0xdc>)
    246a:	0049      	lsls	r1, r1, #1
    246c:	2001      	movs	r0, #1
    246e:	f001 ff9c 	bl	43aa <hal_flash_read>
    2472:	b9e0      	cbnz	r0, 24ae <pinetime_boot_display_image+0x8e>
            rc = set_window(left, top, right, bottom); assert(rc == 0);
    2474:	b2e4      	uxtb	r4, r4
    2476:	4633      	mov	r3, r6
    2478:	4622      	mov	r2, r4
    247a:	4631      	mov	r1, r6
    247c:	4638      	mov	r0, r7
    247e:	f7ff ff67 	bl	2350 <set_window>
    2482:	b9d0      	cbnz	r0, 24ba <pinetime_boot_display_image+0x9a>
            rc = write_command(RAMWR, NULL, 0); assert(rc == 0);
    2484:	2200      	movs	r2, #0
    2486:	4611      	mov	r1, r2
    2488:	202c      	movs	r0, #44	; 0x2c
    248a:	f7ff fe7f 	bl	218c <write_command>
    248e:	b9d0      	cbnz	r0, 24c6 <pinetime_boot_display_image+0xa6>
            rc = write_data(flash_buffer, len); assert(rc == 0);
    2490:	4629      	mov	r1, r5
    2492:	481a      	ldr	r0, [pc, #104]	; (24fc <pinetime_boot_display_image+0xdc>)
    2494:	f7ff fe6d 	bl	2172 <write_data>
    2498:	b9d8      	cbnz	r0, 24d2 <pinetime_boot_display_image+0xb2>
            left = right + 1;
    249a:	3401      	adds	r4, #1
    249c:	b2e7      	uxtb	r7, r4
            if (left >= COL_COUNT) { break; }
    249e:	2fef      	cmp	r7, #239	; 0xef
    24a0:	d81d      	bhi.n	24de <pinetime_boot_display_image+0xbe>
            uint16_t right = left + batch_columns - 1;
    24a2:	f107 047f 	add.w	r4, r7, #127	; 0x7f
            if (right >= COL_COUNT) { right = COL_COUNT - 1; }
    24a6:	2cef      	cmp	r4, #239	; 0xef
    24a8:	d9d5      	bls.n	2456 <pinetime_boot_display_image+0x36>
    24aa:	24ef      	movs	r4, #239	; 0xef
    24ac:	e7d3      	b.n	2456 <pinetime_boot_display_image+0x36>
            int rc = hal_flash_read(FLASH_DEVICE, offset, flash_buffer, len); assert(rc == 0);
    24ae:	2300      	movs	r3, #0
    24b0:	461a      	mov	r2, r3
    24b2:	4619      	mov	r1, r3
    24b4:	4618      	mov	r0, r3
    24b6:	f7ff f93d 	bl	1734 <__assert_func>
            rc = set_window(left, top, right, bottom); assert(rc == 0);
    24ba:	2300      	movs	r3, #0
    24bc:	461a      	mov	r2, r3
    24be:	4619      	mov	r1, r3
    24c0:	4618      	mov	r0, r3
    24c2:	f7ff f937 	bl	1734 <__assert_func>
            rc = write_command(RAMWR, NULL, 0); assert(rc == 0);
    24c6:	2300      	movs	r3, #0
    24c8:	461a      	mov	r2, r3
    24ca:	4619      	mov	r1, r3
    24cc:	4618      	mov	r0, r3
    24ce:	f7ff f931 	bl	1734 <__assert_func>
            rc = write_data(flash_buffer, len); assert(rc == 0);
    24d2:	2300      	movs	r3, #0
    24d4:	461a      	mov	r2, r3
    24d6:	4619      	mov	r1, r3
    24d8:	4618      	mov	r0, r3
    24da:	f7ff f92b 	bl	1734 <__assert_func>
    for (uint8_t row = 0; row < ROW_COUNT; row++) {
    24de:	3601      	adds	r6, #1
    24e0:	b2f6      	uxtb	r6, r6
    24e2:	2eef      	cmp	r6, #239	; 0xef
    24e4:	d801      	bhi.n	24ea <pinetime_boot_display_image+0xca>
        uint8_t left = 0;
    24e6:	2700      	movs	r7, #0
    24e8:	e7d9      	b.n	249e <pinetime_boot_display_image+0x7e>
    console_printf("Image displayed\n"); console_flush();
    24ea:	4805      	ldr	r0, [pc, #20]	; (2500 <pinetime_boot_display_image+0xe0>)
    24ec:	f000 f83a 	bl	2564 <console_printf>
    24f0:	f000 f88e 	bl	2610 <console_flush>
}
    24f4:	2000      	movs	r0, #0
    24f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24f8:	00005834 	.word	0x00005834
    24fc:	20004ae8 	.word	0x20004ae8
    2500:	0000584c 	.word	0x0000584c

00002504 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
    2504:	b570      	push	{r4, r5, r6, lr}
    2506:	4606      	mov	r6, r0
    2508:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
    250a:	2400      	movs	r4, #0
    250c:	42ac      	cmp	r4, r5
    250e:	da07      	bge.n	2520 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
    2510:	5d30      	ldrb	r0, [r6, r4]
    2512:	f000 f8dd 	bl	26d0 <console_out_nolock>
    2516:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    251a:	d001      	beq.n	2520 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
    251c:	3401      	adds	r4, #1
    251e:	e7f5      	b.n	250c <console_write+0x8>
    }
}
    2520:	bd70      	pop	{r4, r5, r6, pc}

00002522 <console_blocking_mode>:

void console_blocking_mode(void) {
    2522:	b508      	push	{r3, lr}
    disable_buffer();
    2524:	f000 f898 	bl	2658 <disable_buffer>
}
    2528:	bd08      	pop	{r3, pc}
	...

0000252c <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
    252c:	b510      	push	{r4, lr}
    252e:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    os_eventq_init(&avail_queue);
    2530:	4809      	ldr	r0, [pc, #36]	; (2558 <console_pkg_init+0x2c>)
    2532:	f7ff f9d0 	bl	18d6 <os_eventq_init>
    os_mutex_init(&console_write_lock);
    2536:	4809      	ldr	r0, [pc, #36]	; (255c <console_pkg_init+0x30>)
    2538:	f7ff fc21 	bl	1d7e <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
    253c:	f000 f8e6 	bl	270c <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
    2540:	b138      	cbz	r0, 2552 <console_pkg_init+0x26>
    2542:	2000      	movs	r0, #0
    2544:	9000      	str	r0, [sp, #0]
    2546:	4b06      	ldr	r3, [pc, #24]	; (2560 <console_pkg_init+0x34>)
    2548:	681c      	ldr	r4, [r3, #0]
    254a:	4603      	mov	r3, r0
    254c:	4602      	mov	r2, r0
    254e:	4601      	mov	r1, r0
    2550:	47a0      	blx	r4
}
    2552:	b002      	add	sp, #8
    2554:	bd10      	pop	{r4, pc}
    2556:	bf00      	nop
    2558:	20004be8 	.word	0x20004be8
    255c:	20004bfc 	.word	0x20004bfc
    2560:	20000150 	.word	0x20000150

00002564 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
    2564:	b40f      	push	{r0, r1, r2, r3}
    2566:	b510      	push	{r4, lr}
    2568:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
    256a:	f000 f8d1 	bl	2710 <console_get_ticks>
    256e:	b160      	cbz	r0, 258a <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
    2570:	4b0c      	ldr	r3, [pc, #48]	; (25a4 <console_printf+0x40>)
    2572:	681b      	ldr	r3, [r3, #0]
    2574:	b10b      	cbz	r3, 257a <console_printf+0x16>
    num_chars = 0;
    2576:	2400      	movs	r4, #0
    2578:	e008      	b.n	258c <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
    257a:	f7ff fadb 	bl	1b34 <os_time_get>
    257e:	4601      	mov	r1, r0
    2580:	4809      	ldr	r0, [pc, #36]	; (25a8 <console_printf+0x44>)
    2582:	f002 fb3f 	bl	4c04 <printf>
    2586:	4604      	mov	r4, r0
    2588:	e000      	b.n	258c <console_printf+0x28>
    num_chars = 0;
    258a:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
    258c:	a905      	add	r1, sp, #20
    258e:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
    2590:	9804      	ldr	r0, [sp, #16]
    2592:	f002 fb49 	bl	4c28 <vprintf>
    va_end(args);

    return num_chars;
}
    2596:	4420      	add	r0, r4
    2598:	b002      	add	sp, #8
    259a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    259e:	b004      	add	sp, #16
    25a0:	4770      	bx	lr
    25a2:	bf00      	nop
    25a4:	20004bf8 	.word	0x20004bf8
    25a8:	00005860 	.word	0x00005860

000025ac <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
    25ac:	4b07      	ldr	r3, [pc, #28]	; (25cc <__semihost+0x20>)
    25ae:	781b      	ldrb	r3, [r3, #0]
    25b0:	b143      	cbz	r3, 25c4 <__semihost+0x18>
static int __semihost(int command, void* message) {
    25b2:	b410      	push	{r4}
    25b4:	4602      	mov	r2, r0
    25b6:	460c      	mov	r4, r1
    __asm( 
    25b8:	4610      	mov	r0, r2
    25ba:	4621      	mov	r1, r4
    25bc:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
    25be:	2000      	movs	r0, #0
}
    25c0:	bc10      	pop	{r4}
    25c2:	4770      	bx	lr
    if (!log_enabled) return -1;
    25c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    25c8:	4770      	bx	lr
    25ca:	bf00      	nop
    25cc:	2000014c 	.word	0x2000014c

000025d0 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    25d0:	4b02      	ldr	r3, [pc, #8]	; (25dc <debugger_connected+0xc>)
    25d2:	6818      	ldr	r0, [r3, #0]
}
    25d4:	f000 0001 	and.w	r0, r0, #1
    25d8:	4770      	bx	lr
    25da:	bf00      	nop
    25dc:	e000edf0 	.word	0xe000edf0

000025e0 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
    25e0:	b570      	push	{r4, r5, r6, lr}
    25e2:	b084      	sub	sp, #16
    25e4:	4606      	mov	r6, r0
    25e6:	460d      	mov	r5, r1
    25e8:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
    25ea:	f7ff fff1 	bl	25d0 <debugger_connected>
    25ee:	4603      	mov	r3, r0
    25f0:	b108      	cbz	r0, 25f6 <semihost_write+0x16>
    if (length == 0) { return 0; }
    25f2:	b91c      	cbnz	r4, 25fc <semihost_write+0x1c>
    25f4:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
    25f6:	4618      	mov	r0, r3
    25f8:	b004      	add	sp, #16
    25fa:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
    25fc:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
    25fe:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
    2600:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
    2602:	a901      	add	r1, sp, #4
    2604:	2005      	movs	r0, #5
    2606:	f7ff ffd1 	bl	25ac <__semihost>
    260a:	4603      	mov	r3, r0
    260c:	e7f3      	b.n	25f6 <semihost_write+0x16>
	...

00002610 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
    2610:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
    2612:	4b0e      	ldr	r3, [pc, #56]	; (264c <console_flush+0x3c>)
    2614:	781b      	ldrb	r3, [r3, #0]
    2616:	b1bb      	cbz	r3, 2648 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
    2618:	4b0d      	ldr	r3, [pc, #52]	; (2650 <console_flush+0x40>)
    261a:	681d      	ldr	r5, [r3, #0]
    261c:	b1a5      	cbz	r5, 2648 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
    261e:	4b0d      	ldr	r3, [pc, #52]	; (2654 <console_flush+0x44>)
    2620:	685b      	ldr	r3, [r3, #4]
    2622:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
    2626:	b97b      	cbnz	r3, 2648 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
    2628:	4b09      	ldr	r3, [pc, #36]	; (2650 <console_flush+0x40>)
    262a:	2200      	movs	r2, #0
    262c:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
    262e:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
    2630:	e005      	b.n	263e <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
    2632:	88e2      	ldrh	r2, [r4, #6]
    2634:	6821      	ldr	r1, [r4, #0]
    2636:	2002      	movs	r0, #2
    2638:	f7ff ffd2 	bl	25e0 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
    263c:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
    263e:	2c00      	cmp	r4, #0
    2640:	d1f7      	bne.n	2632 <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
    2642:	4628      	mov	r0, r5
    2644:	f7ff fb2b 	bl	1c9e <os_mbuf_free_chain>
}
    2648:	bd38      	pop	{r3, r4, r5, pc}
    264a:	bf00      	nop
    264c:	2000014c 	.word	0x2000014c
    2650:	20004c0c 	.word	0x20004c0c
    2654:	e000ed00 	.word	0xe000ed00

00002658 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
    2658:	b508      	push	{r3, lr}
    265a:	f7ff ffd9 	bl	2610 <console_flush>
    265e:	bd08      	pop	{r3, pc}

00002660 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
    2660:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
    2662:	4b12      	ldr	r3, [pc, #72]	; (26ac <console_buffer+0x4c>)
    2664:	781b      	ldrb	r3, [r3, #0]
    2666:	b903      	cbnz	r3, 266a <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
    2668:	bd38      	pop	{r3, r4, r5, pc}
    266a:	460d      	mov	r5, r1
    266c:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
    266e:	f7ff ffaf 	bl	25d0 <debugger_connected>
    2672:	2800      	cmp	r0, #0
    2674:	d0f8      	beq.n	2668 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
    2676:	4b0e      	ldr	r3, [pc, #56]	; (26b0 <console_buffer+0x50>)
    2678:	681b      	ldr	r3, [r3, #0]
    267a:	b173      	cbz	r3, 269a <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    267c:	4b0c      	ldr	r3, [pc, #48]	; (26b0 <console_buffer+0x50>)
    267e:	6818      	ldr	r0, [r3, #0]
    2680:	f7ff fb1f 	bl	1cc2 <os_mbuf_len>
    2684:	4428      	add	r0, r5
    2686:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    268a:	d2ed      	bcs.n	2668 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    268c:	b2aa      	uxth	r2, r5
    268e:	4621      	mov	r1, r4
    2690:	4b07      	ldr	r3, [pc, #28]	; (26b0 <console_buffer+0x50>)
    2692:	6818      	ldr	r0, [r3, #0]
    2694:	f7ff fb1f 	bl	1cd6 <os_mbuf_append>
    2698:	e7e6      	b.n	2668 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
    269a:	2100      	movs	r1, #0
    269c:	b2a8      	uxth	r0, r5
    269e:	f7ff fa1b 	bl	1ad8 <os_msys_get_pkthdr>
    26a2:	4b03      	ldr	r3, [pc, #12]	; (26b0 <console_buffer+0x50>)
    26a4:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
    26a6:	2800      	cmp	r0, #0
    26a8:	d1e8      	bne.n	267c <console_buffer+0x1c>
    26aa:	e7dd      	b.n	2668 <console_buffer+0x8>
    26ac:	2000014c 	.word	0x2000014c
    26b0:	20004c0c 	.word	0x20004c0c

000026b4 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
    26b4:	b500      	push	{lr}
    26b6:	b083      	sub	sp, #12
    26b8:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
    26bc:	280d      	cmp	r0, #13
    26be:	d004      	beq.n	26ca <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
    26c0:	2101      	movs	r1, #1
    26c2:	f10d 0007 	add.w	r0, sp, #7
    26c6:	f7ff ffcb 	bl	2660 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
    26ca:	b003      	add	sp, #12
    26cc:	f85d fb04 	ldr.w	pc, [sp], #4

000026d0 <console_out_nolock>:

int console_out_nolock(int character) {
    26d0:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
    26d2:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
    26d4:	4b0b      	ldr	r3, [pc, #44]	; (2704 <console_out_nolock+0x34>)
    26d6:	781b      	ldrb	r3, [r3, #0]
    26d8:	b953      	cbnz	r3, 26f0 <console_out_nolock+0x20>
    26da:	4604      	mov	r4, r0
    if ('\n' == c) {
    26dc:	2d0a      	cmp	r5, #10
    26de:	d009      	beq.n	26f4 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
    26e0:	4b09      	ldr	r3, [pc, #36]	; (2708 <console_out_nolock+0x38>)
    26e2:	2201      	movs	r2, #1
    26e4:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
    26e6:	4628      	mov	r0, r5
    26e8:	f7ff ffe4 	bl	26b4 <semihosting_console_write_ch>
    return character;
    26ec:	4620      	mov	r0, r4
}
    26ee:	bd38      	pop	{r3, r4, r5, pc}
    26f0:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
    26f2:	e7fc      	b.n	26ee <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
    26f4:	200d      	movs	r0, #13
    26f6:	f7ff ffdd 	bl	26b4 <semihosting_console_write_ch>
        console_is_midline = 0;
    26fa:	4b03      	ldr	r3, [pc, #12]	; (2708 <console_out_nolock+0x38>)
    26fc:	2200      	movs	r2, #0
    26fe:	601a      	str	r2, [r3, #0]
    2700:	e7f1      	b.n	26e6 <console_out_nolock+0x16>
    2702:	bf00      	nop
    2704:	20004c08 	.word	0x20004c08
    2708:	20004bf8 	.word	0x20004bf8

0000270c <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
    270c:	2000      	movs	r0, #0
    270e:	4770      	bx	lr

00002710 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
    2710:	4b01      	ldr	r3, [pc, #4]	; (2718 <console_get_ticks+0x8>)
    2712:	7818      	ldrb	r0, [r3, #0]
    2714:	4770      	bx	lr
    2716:	bf00      	nop
    2718:	20004c10 	.word	0x20004c10

0000271c <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    271c:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    271e:	f7ff f809 	bl	1734 <__assert_func>
	...

00002724 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
    2724:	4b01      	ldr	r3, [pc, #4]	; (272c <sysinit_start+0x8>)
    2726:	2201      	movs	r2, #1
    2728:	701a      	strb	r2, [r3, #0]
}
    272a:	4770      	bx	lr
    272c:	20004c11 	.word	0x20004c11

00002730 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
    2730:	4b01      	ldr	r3, [pc, #4]	; (2738 <sysinit_end+0x8>)
    2732:	2200      	movs	r2, #0
    2734:	701a      	strb	r2, [r3, #0]
}
    2736:	4770      	bx	lr
    2738:	20004c11 	.word	0x20004c11

0000273c <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
    273c:	b570      	push	{r4, r5, r6, lr}
    273e:	b082      	sub	sp, #8
    2740:	460c      	mov	r4, r1
    2742:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
    2744:	b29d      	uxth	r5, r3
    2746:	9b07      	ldr	r3, [sp, #28]
    2748:	9300      	str	r3, [sp, #0]
    274a:	4603      	mov	r3, r0
    274c:	9a06      	ldr	r2, [sp, #24]
    274e:	4629      	mov	r1, r5
    2750:	4620      	mov	r0, r4
    2752:	f7ff f905 	bl	1960 <os_mempool_init>
    if (rc != 0) {
    2756:	b108      	cbz	r0, 275c <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    2758:	b002      	add	sp, #8
    275a:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
    275c:	462b      	mov	r3, r5
    275e:	9a06      	ldr	r2, [sp, #24]
    2760:	b292      	uxth	r2, r2
    2762:	4621      	mov	r1, r4
    2764:	4630      	mov	r0, r6
    2766:	f7ff fa57 	bl	1c18 <os_mbuf_pool_init>
    276a:	e7f5      	b.n	2758 <mem_init_mbuf_pool+0x1c>

0000276c <sysinit_app>:
void modlog_init(void);
void pinetime_boot_init(void);

void
sysinit_app(void)
{
    276c:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
    276e:	f7ff f8a1 	bl	18b4 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
    2772:	f002 fbc5 	bl	4f00 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
    2776:	f7ff fed9 	bl	252c <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
    277a:	f002 fcff 	bl	517c <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
    277e:	f002 fbef 	bl	4f60 <modlog_init>

    /*** Stage 900 */
    /* 900.0: pinetime_boot_init (libs/pinetime_boot) */
    pinetime_boot_init();
    2782:	f7ff fb83 	bl	1e8c <pinetime_boot_init>
}
    2786:	bd08      	pop	{r3, pc}

00002788 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
    2788:	2801      	cmp	r0, #1
    278a:	d101      	bne.n	2790 <boot_flag_decode+0x8>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
    278c:	2001      	movs	r0, #1
}
    278e:	4770      	bx	lr
        return BOOT_FLAG_BAD;
    2790:	2002      	movs	r0, #2
    2792:	4770      	bx	lr

00002794 <boot_magic_decode>:
{
    2794:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    2796:	2210      	movs	r2, #16
    2798:	4903      	ldr	r1, [pc, #12]	; (27a8 <boot_magic_decode+0x14>)
    279a:	f7ff fafa 	bl	1d92 <memcmp>
    279e:	b908      	cbnz	r0, 27a4 <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
    27a0:	2001      	movs	r0, #1
}
    27a2:	bd08      	pop	{r3, pc}
    return BOOT_MAGIC_BAD;
    27a4:	2002      	movs	r0, #2
    27a6:	e7fc      	b.n	27a2 <boot_magic_decode+0xe>
    27a8:	0000586c 	.word	0x0000586c

000027ac <boot_find_status>:
 *
 * @returns 0 on success, -1 on errors
 */
static int
boot_find_status(int image_index, const struct flash_area **fap)
{
    27ac:	b530      	push	{r4, r5, lr}
    27ae:	b087      	sub	sp, #28
    27b0:	460d      	mov	r5, r1
    uint32_t magic[BOOT_MAGIC_ARR_SZ];
    uint32_t off;
    uint8_t areas[2] = {
    27b2:	4b14      	ldr	r3, [pc, #80]	; (2804 <boot_find_status+0x58>)
    27b4:	881b      	ldrh	r3, [r3, #0]
    27b6:	f8ad 3004 	strh.w	r3, [sp, #4]
     * Both "slots" can end up being temporary storage for a swap and it
     * is assumed that if magic is valid then other metadata is too,
     * because magic is always written in the last step.
     */

    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    27ba:	2400      	movs	r4, #0
    27bc:	e000      	b.n	27c0 <boot_find_status+0x14>
    27be:	3401      	adds	r4, #1
    27c0:	2c01      	cmp	r4, #1
    27c2:	d81a      	bhi.n	27fa <boot_find_status+0x4e>
        rc = flash_area_open(areas[i], fap);
    27c4:	4629      	mov	r1, r5
    27c6:	ab06      	add	r3, sp, #24
    27c8:	4423      	add	r3, r4
    27ca:	f813 0c14 	ldrb.w	r0, [r3, #-20]
    27ce:	f002 faf5 	bl	4dbc <flash_area_open>
        if (rc != 0) {
    27d2:	4603      	mov	r3, r0
    27d4:	b998      	cbnz	r0, 27fe <boot_find_status+0x52>
            return rc;
        }

        off = boot_magic_off(*fap);
    27d6:	6828      	ldr	r0, [r5, #0]
    return fap->fa_size - BOOT_MAGIC_SZ;
    27d8:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    27da:	2310      	movs	r3, #16
    27dc:	aa02      	add	r2, sp, #8
    27de:	3910      	subs	r1, #16
    27e0:	f002 fb44 	bl	4e6c <flash_area_read>
        if (rc != 0) {
    27e4:	4603      	mov	r3, r0
    27e6:	b950      	cbnz	r0, 27fe <boot_find_status+0x52>
            flash_area_close(*fap);
            return rc;
        }

        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    27e8:	2210      	movs	r2, #16
    27ea:	4907      	ldr	r1, [pc, #28]	; (2808 <boot_find_status+0x5c>)
    27ec:	a802      	add	r0, sp, #8
    27ee:	f7ff fad0 	bl	1d92 <memcmp>
    27f2:	4603      	mov	r3, r0
    27f4:	2800      	cmp	r0, #0
    27f6:	d1e2      	bne.n	27be <boot_find_status+0x12>
    27f8:	e001      	b.n	27fe <boot_find_status+0x52>

        flash_area_close(*fap);
    }

    /* If we got here, no magic was found */
    return -1;
    27fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    27fe:	4618      	mov	r0, r3
    2800:	b007      	add	sp, #28
    2802:	bd30      	pop	{r4, r5, pc}
    2804:	00005868 	.word	0x00005868
    2808:	0000586c 	.word	0x0000586c

0000280c <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
static int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    280c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2810:	b083      	sub	sp, #12
    2812:	4606      	mov	r6, r0
    2814:	460f      	mov	r7, r1
    2816:	4690      	mov	r8, r2
    2818:	461c      	mov	r4, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    281a:	f002 fb60 	bl	4ede <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    281e:	2c08      	cmp	r4, #8
    2820:	d823      	bhi.n	286a <boot_write_trailer+0x5e>
    2822:	4605      	mov	r5, r0
    2824:	2808      	cmp	r0, #8
    2826:	d823      	bhi.n	2870 <boot_write_trailer+0x64>
        return -1;
    }
    erased_val = flash_area_erased_val(fap);
    2828:	4630      	mov	r0, r6
    282a:	f002 fb5d 	bl	4ee8 <flash_area_erased_val>
    282e:	4681      	mov	r9, r0
    if (align < inlen) {
    2830:	42a5      	cmp	r5, r4
    2832:	d200      	bcs.n	2836 <boot_write_trailer+0x2a>
        align = inlen;
    2834:	4625      	mov	r5, r4
    }
    memcpy(buf, inbuf, inlen);
    2836:	4622      	mov	r2, r4
    2838:	4641      	mov	r1, r8
    283a:	4668      	mov	r0, sp
    283c:	f7ff facd 	bl	1dda <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    2840:	1b2a      	subs	r2, r5, r4
    2842:	fa5f f189 	uxtb.w	r1, r9
    2846:	eb0d 0004 	add.w	r0, sp, r4
    284a:	f7ff fad3 	bl	1df4 <memset>

    rc = flash_area_write(fap, off, buf, align);
    284e:	462b      	mov	r3, r5
    2850:	466a      	mov	r2, sp
    2852:	4639      	mov	r1, r7
    2854:	4630      	mov	r0, r6
    2856:	f002 fb1c 	bl	4e92 <flash_area_write>
    if (rc != 0) {
    285a:	4603      	mov	r3, r0
    285c:	b918      	cbnz	r0, 2866 <boot_write_trailer+0x5a>
        return BOOT_EFLASH;
    }

    return 0;
}
    285e:	4618      	mov	r0, r3
    2860:	b003      	add	sp, #12
    2862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BOOT_EFLASH;
    2866:	2301      	movs	r3, #1
    2868:	e7f9      	b.n	285e <boot_write_trailer+0x52>
        return -1;
    286a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    286e:	e7f6      	b.n	285e <boot_write_trailer+0x52>
    2870:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2874:	e7f3      	b.n	285e <boot_write_trailer+0x52>

00002876 <boot_write_trailer_flag>:

static int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
    2876:	b510      	push	{r4, lr}
    2878:	b082      	sub	sp, #8
    const uint8_t buf[1] = { flag_val };
    287a:	ac02      	add	r4, sp, #8
    287c:	f804 2d04 	strb.w	r2, [r4, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
    2880:	2301      	movs	r3, #1
    2882:	4622      	mov	r2, r4
    2884:	f7ff ffc2 	bl	280c <boot_write_trailer>
}
    2888:	b002      	add	sp, #8
    288a:	bd10      	pop	{r4, pc}

0000288c <boot_magic_compatible_check>:
    switch (tbl_val) {
    288c:	2804      	cmp	r0, #4
    288e:	d00b      	beq.n	28a8 <boot_magic_compatible_check+0x1c>
    2890:	2805      	cmp	r0, #5
    2892:	d104      	bne.n	289e <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
    2894:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
    2898:	bf18      	it	ne
    289a:	2001      	movne	r0, #1
    289c:	4770      	bx	lr
        return tbl_val == val;
    289e:	4288      	cmp	r0, r1
    28a0:	bf14      	ite	ne
    28a2:	2000      	movne	r0, #0
    28a4:	2001      	moveq	r0, #1
    28a6:	4770      	bx	lr
        return 1;
    28a8:	2001      	movs	r0, #1
}
    28aa:	4770      	bx	lr

000028ac <boot_status_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    28ac:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    28b0:	01d8      	lsls	r0, r3, #7
}
    28b2:	4770      	bx	lr

000028b4 <boot_trailer_sz>:
{
    28b4:	b508      	push	{r3, lr}
           boot_status_sz(min_write_sz)           +
    28b6:	f7ff fff9 	bl	28ac <boot_status_sz>
}
    28ba:	3030      	adds	r0, #48	; 0x30
    28bc:	bd08      	pop	{r3, pc}

000028be <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    28be:	780b      	ldrb	r3, [r1, #0]
    28c0:	2b03      	cmp	r3, #3
    28c2:	d006      	beq.n	28d2 <boot_status_entries+0x14>
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    28c4:	3b01      	subs	r3, #1
    28c6:	b2db      	uxtb	r3, r3
    28c8:	2b01      	cmp	r3, #1
    28ca:	d804      	bhi.n	28d6 <boot_status_entries+0x18>
        return BOOT_STATUS_STATE_COUNT * BOOT_STATUS_MAX_ENTRIES;
    28cc:	f44f 70c0 	mov.w	r0, #384	; 0x180
    28d0:	4770      	bx	lr
        return BOOT_STATUS_STATE_COUNT;
    28d2:	2003      	movs	r0, #3
    28d4:	4770      	bx	lr
    return -1;
    28d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    28da:	4770      	bx	lr

000028dc <boot_status_off>:
{
    28dc:	b510      	push	{r4, lr}
    28de:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    28e0:	f002 fafd 	bl	4ede <flash_area_align>
    off_from_end = boot_trailer_sz(elem_sz);
    28e4:	f7ff ffe6 	bl	28b4 <boot_trailer_sz>
    assert(off_from_end <= fap->fa_size);
    28e8:	68a3      	ldr	r3, [r4, #8]
    28ea:	4283      	cmp	r3, r0
    28ec:	d301      	bcc.n	28f2 <boot_status_off+0x16>
}
    28ee:	1a18      	subs	r0, r3, r0
    28f0:	bd10      	pop	{r4, pc}
    assert(off_from_end <= fap->fa_size);
    28f2:	2300      	movs	r3, #0
    28f4:	461a      	mov	r2, r3
    28f6:	4619      	mov	r1, r3
    28f8:	4618      	mov	r0, r3
    28fa:	f7fe ff1b 	bl	1734 <__assert_func>

000028fe <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    28fe:	6880      	ldr	r0, [r0, #8]
}
    2900:	3828      	subs	r0, #40	; 0x28
    2902:	4770      	bx	lr

00002904 <boot_read_swap_state>:
{
    2904:	b530      	push	{r4, r5, lr}
    2906:	b087      	sub	sp, #28
    2908:	4604      	mov	r4, r0
    290a:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    290c:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    290e:	2310      	movs	r3, #16
    2910:	aa02      	add	r2, sp, #8
    2912:	3910      	subs	r1, #16
    2914:	f002 faed 	bl	4ef2 <flash_area_read_is_empty>
    if (rc < 0) {
    2918:	2800      	cmp	r0, #0
    291a:	db4a      	blt.n	29b2 <boot_read_swap_state+0xae>
    if (rc == 1) {
    291c:	2801      	cmp	r0, #1
    291e:	d03e      	beq.n	299e <boot_read_swap_state+0x9a>
        state->magic = boot_magic_decode(magic);
    2920:	a802      	add	r0, sp, #8
    2922:	f7ff ff37 	bl	2794 <boot_magic_decode>
    2926:	7028      	strb	r0, [r5, #0]
    off = boot_swap_info_off(fap);
    2928:	4620      	mov	r0, r4
    292a:	f7ff ffe8 	bl	28fe <boot_swap_info_off>
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    292e:	2301      	movs	r3, #1
    2930:	f10d 0207 	add.w	r2, sp, #7
    2934:	4601      	mov	r1, r0
    2936:	4620      	mov	r0, r4
    2938:	f002 fadb 	bl	4ef2 <flash_area_read_is_empty>
    if (rc < 0) {
    293c:	2800      	cmp	r0, #0
    293e:	db3b      	blt.n	29b8 <boot_read_swap_state+0xb4>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2940:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2944:	f003 020f 	and.w	r2, r3, #15
    2948:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    294a:	091b      	lsrs	r3, r3, #4
    294c:	712b      	strb	r3, [r5, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    294e:	2801      	cmp	r0, #1
    2950:	d001      	beq.n	2956 <boot_read_swap_state+0x52>
    2952:	2a04      	cmp	r2, #4
    2954:	d903      	bls.n	295e <boot_read_swap_state+0x5a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    2956:	2301      	movs	r3, #1
    2958:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
    295a:	2300      	movs	r3, #0
    295c:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    295e:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    2960:	2301      	movs	r3, #1
    2962:	1caa      	adds	r2, r5, #2
    2964:	3920      	subs	r1, #32
    2966:	4620      	mov	r0, r4
    2968:	f002 fac3 	bl	4ef2 <flash_area_read_is_empty>
    if (rc < 0) {
    296c:	2800      	cmp	r0, #0
    296e:	db25      	blt.n	29bc <boot_read_swap_state+0xb8>
    if (rc == 1) {
    2970:	2801      	cmp	r0, #1
    2972:	d017      	beq.n	29a4 <boot_read_swap_state+0xa0>
        state->copy_done = boot_flag_decode(state->copy_done);
    2974:	78a8      	ldrb	r0, [r5, #2]
    2976:	f7ff ff07 	bl	2788 <boot_flag_decode>
    297a:	70a8      	strb	r0, [r5, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
    297c:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    297e:	2301      	movs	r3, #1
    2980:	1cea      	adds	r2, r5, #3
    2982:	3918      	subs	r1, #24
    2984:	4620      	mov	r0, r4
    2986:	f002 fab4 	bl	4ef2 <flash_area_read_is_empty>
    if (rc < 0) {
    298a:	2800      	cmp	r0, #0
    298c:	db18      	blt.n	29c0 <boot_read_swap_state+0xbc>
    if (rc == 1) {
    298e:	2801      	cmp	r0, #1
    2990:	d00b      	beq.n	29aa <boot_read_swap_state+0xa6>
        state->image_ok = boot_flag_decode(state->image_ok);
    2992:	78e8      	ldrb	r0, [r5, #3]
    2994:	f7ff fef8 	bl	2788 <boot_flag_decode>
    2998:	70e8      	strb	r0, [r5, #3]
    return 0;
    299a:	2000      	movs	r0, #0
    299c:	e00a      	b.n	29b4 <boot_read_swap_state+0xb0>
        state->magic = BOOT_MAGIC_UNSET;
    299e:	2303      	movs	r3, #3
    29a0:	702b      	strb	r3, [r5, #0]
    29a2:	e7c1      	b.n	2928 <boot_read_swap_state+0x24>
        state->copy_done = BOOT_FLAG_UNSET;
    29a4:	2303      	movs	r3, #3
    29a6:	70ab      	strb	r3, [r5, #2]
    29a8:	e7e8      	b.n	297c <boot_read_swap_state+0x78>
        state->image_ok = BOOT_FLAG_UNSET;
    29aa:	2303      	movs	r3, #3
    29ac:	70eb      	strb	r3, [r5, #3]
    return 0;
    29ae:	2000      	movs	r0, #0
    29b0:	e000      	b.n	29b4 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    29b2:	2001      	movs	r0, #1
}
    29b4:	b007      	add	sp, #28
    29b6:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
    29b8:	2001      	movs	r0, #1
    29ba:	e7fb      	b.n	29b4 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    29bc:	2001      	movs	r0, #1
    29be:	e7f9      	b.n	29b4 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
    29c0:	2001      	movs	r0, #1
    29c2:	e7f7      	b.n	29b4 <boot_read_swap_state+0xb0>

000029c4 <boot_read_swap_state_by_id>:
{
    29c4:	b510      	push	{r4, lr}
    29c6:	b082      	sub	sp, #8
    29c8:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    29ca:	a901      	add	r1, sp, #4
    29cc:	b2c0      	uxtb	r0, r0
    29ce:	f002 f9f5 	bl	4dbc <flash_area_open>
    if (rc != 0) {
    29d2:	b110      	cbz	r0, 29da <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
    29d4:	2001      	movs	r0, #1
}
    29d6:	b002      	add	sp, #8
    29d8:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
    29da:	4621      	mov	r1, r4
    29dc:	9801      	ldr	r0, [sp, #4]
    29de:	f7ff ff91 	bl	2904 <boot_read_swap_state>
    return rc;
    29e2:	e7f8      	b.n	29d6 <boot_read_swap_state_by_id+0x12>

000029e4 <boot_read_swap_size>:
{
    29e4:	b530      	push	{r4, r5, lr}
    29e6:	b083      	sub	sp, #12
    29e8:	460c      	mov	r4, r1
    rc = boot_find_status(image_index, &fap);
    29ea:	a901      	add	r1, sp, #4
    29ec:	f7ff fede 	bl	27ac <boot_find_status>
    if (rc == 0) {
    29f0:	4603      	mov	r3, r0
    29f2:	b110      	cbz	r0, 29fa <boot_read_swap_size+0x16>
}
    29f4:	4618      	mov	r0, r3
    29f6:	b003      	add	sp, #12
    29f8:	bd30      	pop	{r4, r5, pc}
        off = boot_swap_size_off(fap);
    29fa:	9d01      	ldr	r5, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    29fc:	4628      	mov	r0, r5
    29fe:	f7ff ff7e 	bl	28fe <boot_swap_info_off>
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    2a02:	2304      	movs	r3, #4
    2a04:	4622      	mov	r2, r4
    2a06:	f1a0 0108 	sub.w	r1, r0, #8
    2a0a:	4628      	mov	r0, r5
    2a0c:	f002 fa2e 	bl	4e6c <flash_area_read>
    2a10:	4603      	mov	r3, r0
    return rc;
    2a12:	e7ef      	b.n	29f4 <boot_read_swap_size+0x10>

00002a14 <boot_write_magic>:
{
    2a14:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    2a16:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    2a18:	2310      	movs	r3, #16
    2a1a:	4a05      	ldr	r2, [pc, #20]	; (2a30 <boot_write_magic+0x1c>)
    2a1c:	3910      	subs	r1, #16
    2a1e:	f002 fa38 	bl	4e92 <flash_area_write>
    if (rc != 0) {
    2a22:	4603      	mov	r3, r0
    2a24:	b908      	cbnz	r0, 2a2a <boot_write_magic+0x16>
}
    2a26:	4618      	mov	r0, r3
    2a28:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
    2a2a:	2301      	movs	r3, #1
    2a2c:	e7fb      	b.n	2a26 <boot_write_magic+0x12>
    2a2e:	bf00      	nop
    2a30:	0000586c 	.word	0x0000586c

00002a34 <boot_write_copy_done>:

int
boot_write_copy_done(const struct flash_area *fap)
{
    2a34:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    2a36:	6881      	ldr	r1, [r0, #8]

    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    2a38:	2201      	movs	r2, #1
    2a3a:	3920      	subs	r1, #32
    2a3c:	f7ff ff1b 	bl	2876 <boot_write_trailer_flag>
}
    2a40:	bd08      	pop	{r3, pc}

00002a42 <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
    2a42:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
    2a44:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
    2a46:	2201      	movs	r2, #1
    2a48:	3918      	subs	r1, #24
    2a4a:	f7ff ff14 	bl	2876 <boot_write_trailer_flag>
}
    2a4e:	bd08      	pop	{r3, pc}

00002a50 <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
    2a50:	b530      	push	{r4, r5, lr}
    2a52:	b083      	sub	sp, #12
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2a54:	2a0e      	cmp	r2, #14
    2a56:	d811      	bhi.n	2a7c <boot_write_swap_info+0x2c>
    2a58:	4605      	mov	r5, r0
    2a5a:	290e      	cmp	r1, #14
    2a5c:	d814      	bhi.n	2a88 <boot_write_swap_info+0x38>
    2a5e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    2a62:	ac02      	add	r4, sp, #8
    2a64:	f804 1d01 	strb.w	r1, [r4, #-1]!
    off = boot_swap_info_off(fap);
    2a68:	f7ff ff49 	bl	28fe <boot_swap_info_off>
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    2a6c:	2301      	movs	r3, #1
    2a6e:	4622      	mov	r2, r4
    2a70:	4601      	mov	r1, r0
    2a72:	4628      	mov	r0, r5
    2a74:	f7ff feca 	bl	280c <boot_write_trailer>
}
    2a78:	b003      	add	sp, #12
    2a7a:	bd30      	pop	{r4, r5, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    2a7c:	2300      	movs	r3, #0
    2a7e:	461a      	mov	r2, r3
    2a80:	4619      	mov	r1, r3
    2a82:	4618      	mov	r0, r3
    2a84:	f7fe fe56 	bl	1734 <__assert_func>
    2a88:	2300      	movs	r3, #0
    2a8a:	461a      	mov	r2, r3
    2a8c:	4619      	mov	r1, r3
    2a8e:	4618      	mov	r0, r3
    2a90:	f7fe fe50 	bl	1734 <__assert_func>

00002a94 <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    2a94:	b530      	push	{r4, r5, lr}
    2a96:	b083      	sub	sp, #12
    2a98:	4605      	mov	r5, r0
    2a9a:	ac02      	add	r4, sp, #8
    2a9c:	f844 1d04 	str.w	r1, [r4, #-4]!
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2aa0:	f7ff ff2d 	bl	28fe <boot_swap_info_off>

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    2aa4:	2304      	movs	r3, #4
    2aa6:	4622      	mov	r2, r4
    2aa8:	f1a0 0108 	sub.w	r1, r0, #8
    2aac:	4628      	mov	r0, r5
    2aae:	f7ff fead 	bl	280c <boot_write_trailer>
}
    2ab2:	b003      	add	sp, #12
    2ab4:	bd30      	pop	{r4, r5, pc}
	...

00002ab8 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
    2ab8:	b530      	push	{r4, r5, lr}
    2aba:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2abc:	a902      	add	r1, sp, #8
    2abe:	2001      	movs	r0, #1
    2ac0:	f7ff ff80 	bl	29c4 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    2ac4:	2800      	cmp	r0, #0
    2ac6:	d150      	bne.n	2b6a <boot_swap_type_multi+0xb2>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2ac8:	4669      	mov	r1, sp
    2aca:	2002      	movs	r0, #2
    2acc:	f7ff ff7a 	bl	29c4 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
    2ad0:	2800      	cmp	r0, #0
    2ad2:	d14d      	bne.n	2b70 <boot_swap_type_multi+0xb8>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    2ad4:	2400      	movs	r4, #0
    2ad6:	e007      	b.n	2ae8 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2ad8:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2ada:	2b04      	cmp	r3, #4
    2adc:	d028      	beq.n	2b30 <boot_swap_type_multi+0x78>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    2ade:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2ae2:	4293      	cmp	r3, r2
    2ae4:	d024      	beq.n	2b30 <boot_swap_type_multi+0x78>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    2ae6:	3401      	adds	r4, #1
    2ae8:	2c02      	cmp	r4, #2
    2aea:	d839      	bhi.n	2b60 <boot_swap_type_multi+0xa8>
        table = boot_swap_tables + i;
    2aec:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    2af0:	0053      	lsls	r3, r2, #1
    2af2:	4a20      	ldr	r2, [pc, #128]	; (2b74 <boot_swap_type_multi+0xbc>)
    2af4:	18d5      	adds	r5, r2, r3
        if (boot_magic_compatible_check(table->magic_primary_slot,
    2af6:	f89d 1008 	ldrb.w	r1, [sp, #8]
    2afa:	5cd0      	ldrb	r0, [r2, r3]
    2afc:	f7ff fec6 	bl	288c <boot_magic_compatible_check>
    2b00:	2800      	cmp	r0, #0
    2b02:	d0f0      	beq.n	2ae6 <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
    2b04:	f89d 1000 	ldrb.w	r1, [sp]
    2b08:	7868      	ldrb	r0, [r5, #1]
    2b0a:	f7ff febf 	bl	288c <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    2b0e:	2800      	cmp	r0, #0
    2b10:	d0e9      	beq.n	2ae6 <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2b12:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
    2b14:	2b04      	cmp	r3, #4
    2b16:	d003      	beq.n	2b20 <boot_swap_type_multi+0x68>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    2b18:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2b1c:	4293      	cmp	r3, r2
    2b1e:	d1e2      	bne.n	2ae6 <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2b20:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    2b22:	2b04      	cmp	r3, #4
    2b24:	d0d8      	beq.n	2ad8 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2b26:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2b2a:	4293      	cmp	r3, r2
    2b2c:	d1db      	bne.n	2ae6 <boot_swap_type_multi+0x2e>
    2b2e:	e7d3      	b.n	2ad8 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
    2b30:	796b      	ldrb	r3, [r5, #5]
    2b32:	2b02      	cmp	r3, #2
    2b34:	d007      	beq.n	2b46 <boot_swap_type_multi+0x8e>
    2b36:	2b03      	cmp	r3, #3
    2b38:	d010      	beq.n	2b5c <boot_swap_type_multi+0xa4>
    2b3a:	2b04      	cmp	r3, #4
    2b3c:	d001      	beq.n	2b42 <boot_swap_type_multi+0x8a>
    2b3e:	490e      	ldr	r1, [pc, #56]	; (2b78 <boot_swap_type_multi+0xc0>)
    2b40:	e002      	b.n	2b48 <boot_swap_type_multi+0x90>
    2b42:	490e      	ldr	r1, [pc, #56]	; (2b7c <boot_swap_type_multi+0xc4>)
    2b44:	e000      	b.n	2b48 <boot_swap_type_multi+0x90>
    2b46:	490e      	ldr	r1, [pc, #56]	; (2b80 <boot_swap_type_multi+0xc8>)
    2b48:	480e      	ldr	r0, [pc, #56]	; (2b84 <boot_swap_type_multi+0xcc>)
    2b4a:	f002 f85b 	bl	4c04 <printf>
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    2b4e:	7968      	ldrb	r0, [r5, #5]
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
    2b50:	1e83      	subs	r3, r0, #2
    2b52:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    2b54:	2b02      	cmp	r3, #2
    2b56:	d909      	bls.n	2b6c <boot_swap_type_multi+0xb4>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
    2b58:	20ff      	movs	r0, #255	; 0xff
    2b5a:	e007      	b.n	2b6c <boot_swap_type_multi+0xb4>
            BOOT_LOG_INF("Swap type: %s",
    2b5c:	490a      	ldr	r1, [pc, #40]	; (2b88 <boot_swap_type_multi+0xd0>)
    2b5e:	e7f3      	b.n	2b48 <boot_swap_type_multi+0x90>
            }
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    2b60:	480a      	ldr	r0, [pc, #40]	; (2b8c <boot_swap_type_multi+0xd4>)
    2b62:	f001 fd4d 	bl	4600 <puts>
    return BOOT_SWAP_TYPE_NONE;
    2b66:	2001      	movs	r0, #1
    2b68:	e000      	b.n	2b6c <boot_swap_type_multi+0xb4>
        return BOOT_SWAP_TYPE_PANIC;
    2b6a:	20ff      	movs	r0, #255	; 0xff
}
    2b6c:	b005      	add	sp, #20
    2b6e:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
    2b70:	20ff      	movs	r0, #255	; 0xff
    2b72:	e7fb      	b.n	2b6c <boot_swap_type_multi+0xb4>
    2b74:	0000587c 	.word	0x0000587c
    2b78:	000058a0 	.word	0x000058a0
    2b7c:	000058b4 	.word	0x000058b4
    2b80:	00005898 	.word	0x00005898
    2b84:	000058bc 	.word	0x000058bc
    2b88:	00005890 	.word	0x00005890
    2b8c:	000058d4 	.word	0x000058d4

00002b90 <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
    2b90:	b510      	push	{r4, lr}
    2b92:	b084      	sub	sp, #16
    2b94:	4604      	mov	r4, r0
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(0),
    2b96:	a901      	add	r1, sp, #4
    2b98:	2002      	movs	r0, #2
    2b9a:	f7ff ff13 	bl	29c4 <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
    2b9e:	4603      	mov	r3, r0
    2ba0:	bb88      	cbnz	r0, 2c06 <boot_set_pending+0x76>
        return rc;
    }

    switch (state_secondary_slot.magic) {
    2ba2:	f89d 2004 	ldrb.w	r2, [sp, #4]
    2ba6:	2a02      	cmp	r2, #2
    2ba8:	d027      	beq.n	2bfa <boot_set_pending+0x6a>
    2baa:	2a03      	cmp	r2, #3
    2bac:	d007      	beq.n	2bbe <boot_set_pending+0x2e>
    2bae:	2a01      	cmp	r2, #1
    2bb0:	d029      	beq.n	2c06 <boot_set_pending+0x76>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
    2bb2:	2300      	movs	r3, #0
    2bb4:	461a      	mov	r2, r3
    2bb6:	4619      	mov	r1, r3
    2bb8:	4618      	mov	r0, r3
    2bba:	f7fe fdbb 	bl	1734 <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
    2bbe:	a903      	add	r1, sp, #12
    2bc0:	2002      	movs	r0, #2
    2bc2:	f002 f8fb 	bl	4dbc <flash_area_open>
        if (rc != 0) {
    2bc6:	b148      	cbz	r0, 2bdc <boot_set_pending+0x4c>
            rc = BOOT_EFLASH;
    2bc8:	2301      	movs	r3, #1
        if (rc == 0) {
    2bca:	b9e3      	cbnz	r3, 2c06 <boot_set_pending+0x76>
            if (permanent) {
    2bcc:	b99c      	cbnz	r4, 2bf6 <boot_set_pending+0x66>
                swap_type = BOOT_SWAP_TYPE_TEST;
    2bce:	2102      	movs	r1, #2
            rc = boot_write_swap_info(fap, swap_type, 0);
    2bd0:	2200      	movs	r2, #0
    2bd2:	9803      	ldr	r0, [sp, #12]
    2bd4:	f7ff ff3c 	bl	2a50 <boot_write_swap_info>
    2bd8:	4603      	mov	r3, r0
    2bda:	e014      	b.n	2c06 <boot_set_pending+0x76>
            rc = boot_write_magic(fap);
    2bdc:	9803      	ldr	r0, [sp, #12]
    2bde:	f7ff ff19 	bl	2a14 <boot_write_magic>
        if (rc == 0 && permanent) {
    2be2:	4603      	mov	r3, r0
    2be4:	2800      	cmp	r0, #0
    2be6:	d1f0      	bne.n	2bca <boot_set_pending+0x3a>
    2be8:	2c00      	cmp	r4, #0
    2bea:	d0ee      	beq.n	2bca <boot_set_pending+0x3a>
            rc = boot_write_image_ok(fap);
    2bec:	9803      	ldr	r0, [sp, #12]
    2bee:	f7ff ff28 	bl	2a42 <boot_write_image_ok>
    2bf2:	4603      	mov	r3, r0
    2bf4:	e7e9      	b.n	2bca <boot_set_pending+0x3a>
                swap_type = BOOT_SWAP_TYPE_PERM;
    2bf6:	2103      	movs	r1, #3
    2bf8:	e7ea      	b.n	2bd0 <boot_set_pending+0x40>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
    2bfa:	a903      	add	r1, sp, #12
    2bfc:	2002      	movs	r0, #2
    2bfe:	f002 f8dd 	bl	4dbc <flash_area_open>
        if (rc != 0) {
    2c02:	b118      	cbz	r0, 2c0c <boot_set_pending+0x7c>
            return BOOT_EFLASH;
    2c04:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
    2c06:	4618      	mov	r0, r3
    2c08:	b004      	add	sp, #16
    2c0a:	bd10      	pop	{r4, pc}
        flash_area_erase(fap, 0, fap->fa_size);
    2c0c:	9803      	ldr	r0, [sp, #12]
    2c0e:	6882      	ldr	r2, [r0, #8]
    2c10:	2100      	movs	r1, #0
    2c12:	f002 f951 	bl	4eb8 <flash_area_erase>
        return BOOT_EBADIMAGE;
    2c16:	2303      	movs	r3, #3
    2c18:	e7f5      	b.n	2c06 <boot_set_pending+0x76>
	...

00002c1c <boot_is_header_valid>:
static bool
boot_is_header_valid(const struct image_header *hdr, const struct flash_area *fap)
{
    uint32_t size;

    if (hdr->ih_magic != IMAGE_MAGIC) {
    2c1c:	6802      	ldr	r2, [r0, #0]
    2c1e:	4b0e      	ldr	r3, [pc, #56]	; (2c58 <boot_is_header_valid+0x3c>)
    2c20:	429a      	cmp	r2, r3
    2c22:	d001      	beq.n	2c28 <boot_is_header_valid+0xc>
        return false;
    2c24:	2000      	movs	r0, #0
    2c26:	4770      	bx	lr
    }

    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    2c28:	68c2      	ldr	r2, [r0, #12]
    2c2a:	8903      	ldrh	r3, [r0, #8]
{
    /*
     * "a + b <= UINT32_MAX", subtract 'b' from both sides to avoid
     * the overflow.
     */
    if (a > UINT32_MAX - b) {
    2c2c:	43d8      	mvns	r0, r3
    2c2e:	4282      	cmp	r2, r0
    2c30:	d80a      	bhi.n	2c48 <boot_is_header_valid+0x2c>
{
    2c32:	b410      	push	{r4}
        return false;
    } else {
        *dest = a + b;
    2c34:	18d4      	adds	r4, r2, r3
        return true;
    2c36:	2001      	movs	r0, #1
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    2c38:	b110      	cbz	r0, 2c40 <boot_is_header_valid+0x24>
        return false;
    }

    if (size >= fap->fa_size) {
    2c3a:	688b      	ldr	r3, [r1, #8]
    2c3c:	42a3      	cmp	r3, r4
    2c3e:	d901      	bls.n	2c44 <boot_is_header_valid+0x28>
        return false;
    }

    return true;
}
    2c40:	bc10      	pop	{r4}
    2c42:	4770      	bx	lr
        return false;
    2c44:	2000      	movs	r0, #0
    2c46:	e7fb      	b.n	2c40 <boot_is_header_valid+0x24>
        return false;
    2c48:	2000      	movs	r0, #0
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    2c4a:	b110      	cbz	r0, 2c52 <boot_is_header_valid+0x36>
    if (size >= fap->fa_size) {
    2c4c:	688b      	ldr	r3, [r1, #8]
    2c4e:	42a3      	cmp	r3, r4
    2c50:	d900      	bls.n	2c54 <boot_is_header_valid+0x38>
}
    2c52:	4770      	bx	lr
        return false;
    2c54:	2000      	movs	r0, #0
    2c56:	e7fc      	b.n	2c52 <boot_is_header_valid+0x36>
    2c58:	96f3b83d 	.word	0x96f3b83d

00002c5c <boot_write_sz>:
{
    2c5c:	b538      	push	{r3, r4, r5, lr}
    2c5e:	4604      	mov	r4, r0
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    2c60:	6a00      	ldr	r0, [r0, #32]
    2c62:	f002 f93c 	bl	4ede <flash_area_align>
    2c66:	4605      	mov	r5, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    2c68:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2c6a:	f002 f938 	bl	4ede <flash_area_align>
    if (align > elem_sz) {
    2c6e:	4285      	cmp	r5, r0
    2c70:	d200      	bcs.n	2c74 <boot_write_sz+0x18>
}
    2c72:	bd38      	pop	{r3, r4, r5, pc}
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    2c74:	4628      	mov	r0, r5
    return elem_sz;
    2c76:	e7fc      	b.n	2c72 <boot_write_sz+0x16>

00002c78 <boot_read_image_size>:
{
    2c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c7c:	b082      	sub	sp, #8
    2c7e:	4680      	mov	r8, r0
    2c80:	460d      	mov	r5, r1
    2c82:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2c84:	2000      	movs	r0, #0
    2c86:	f001 f985 	bl	3f94 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    2c8a:	a901      	add	r1, sp, #4
    2c8c:	b2c0      	uxtb	r0, r0
    2c8e:	f002 f895 	bl	4dbc <flash_area_open>
    if (rc != 0) {
    2c92:	b120      	cbz	r0, 2c9e <boot_read_image_size+0x26>
        rc = BOOT_EFLASH;
    2c94:	2401      	movs	r4, #1
}
    2c96:	4620      	mov	r0, r4
    2c98:	b002      	add	sp, #8
    2c9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    2c9e:	232c      	movs	r3, #44	; 0x2c
    2ca0:	fb03 8305 	mla	r3, r3, r5, r8
    2ca4:	891e      	ldrh	r6, [r3, #8]
    2ca6:	68db      	ldr	r3, [r3, #12]
    2ca8:	441e      	add	r6, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    2caa:	2304      	movs	r3, #4
    2cac:	466a      	mov	r2, sp
    2cae:	4631      	mov	r1, r6
    2cb0:	9801      	ldr	r0, [sp, #4]
    2cb2:	f002 f8db 	bl	4e6c <flash_area_read>
    2cb6:	4604      	mov	r4, r0
    2cb8:	bb30      	cbnz	r0, 2d08 <boot_read_image_size+0x90>
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    2cba:	232c      	movs	r3, #44	; 0x2c
    2cbc:	fb03 8505 	mla	r5, r3, r5, r8
    2cc0:	896d      	ldrh	r5, [r5, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    2cc2:	f8bd 2000 	ldrh.w	r2, [sp]
    2cc6:	f646 1308 	movw	r3, #26888	; 0x6908
    2cca:	429a      	cmp	r2, r3
    2ccc:	d00c      	beq.n	2ce8 <boot_read_image_size+0x70>
    } else if (protect_tlv_size != 0) {
    2cce:	b9ed      	cbnz	r5, 2d0c <boot_read_image_size+0x94>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    2cd0:	f8bd 2000 	ldrh.w	r2, [sp]
    2cd4:	f646 1307 	movw	r3, #26887	; 0x6907
    2cd8:	429a      	cmp	r2, r3
    2cda:	d119      	bne.n	2d10 <boot_read_image_size+0x98>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    2cdc:	442e      	add	r6, r5
    2cde:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    2ce2:	441e      	add	r6, r3
    2ce4:	603e      	str	r6, [r7, #0]
    2ce6:	e7d6      	b.n	2c96 <boot_read_image_size+0x1e>
        if (protect_tlv_size != info.it_tlv_tot) {
    2ce8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    2cec:	428d      	cmp	r5, r1
    2cee:	d001      	beq.n	2cf4 <boot_read_image_size+0x7c>
            rc = BOOT_EBADIMAGE;
    2cf0:	2403      	movs	r4, #3
    2cf2:	e7d0      	b.n	2c96 <boot_read_image_size+0x1e>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    2cf4:	2304      	movs	r3, #4
    2cf6:	466a      	mov	r2, sp
    2cf8:	4431      	add	r1, r6
    2cfa:	9801      	ldr	r0, [sp, #4]
    2cfc:	f002 f8b6 	bl	4e6c <flash_area_read>
    2d00:	2800      	cmp	r0, #0
    2d02:	d0e5      	beq.n	2cd0 <boot_read_image_size+0x58>
            rc = BOOT_EFLASH;
    2d04:	2401      	movs	r4, #1
    2d06:	e7c6      	b.n	2c96 <boot_read_image_size+0x1e>
        rc = BOOT_EFLASH;
    2d08:	2401      	movs	r4, #1
    2d0a:	e7c4      	b.n	2c96 <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    2d0c:	2403      	movs	r4, #3
    2d0e:	e7c2      	b.n	2c96 <boot_read_image_size+0x1e>
        rc = BOOT_EBADIMAGE;
    2d10:	2403      	movs	r4, #3
    return rc;
    2d12:	e7c0      	b.n	2c96 <boot_read_image_size+0x1e>

00002d14 <boot_check_header_erased>:
    return true;
}

static int
boot_check_header_erased(struct boot_loader_state *state, int slot)
{
    2d14:	b570      	push	{r4, r5, r6, lr}
    2d16:	b082      	sub	sp, #8
    2d18:	4606      	mov	r6, r0
    2d1a:	460c      	mov	r4, r1
    struct image_header *hdr;
    uint8_t erased_val;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2d1c:	2000      	movs	r0, #0
    2d1e:	f001 f939 	bl	3f94 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    2d22:	a901      	add	r1, sp, #4
    2d24:	b2c0      	uxtb	r0, r0
    2d26:	f002 f849 	bl	4dbc <flash_area_open>
    if (rc != 0) {
    2d2a:	b9d0      	cbnz	r0, 2d62 <boot_check_header_erased+0x4e>
    2d2c:	4605      	mov	r5, r0
        return -1;
    }

    erased_val = flash_area_erased_val(fap);
    2d2e:	9801      	ldr	r0, [sp, #4]
    2d30:	f002 f8da 	bl	4ee8 <flash_area_erased_val>
    2d34:	b2c0      	uxtb	r0, r0
    flash_area_close(fap);

    hdr = boot_img_hdr(state, slot);
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    2d36:	212c      	movs	r1, #44	; 0x2c
    2d38:	fb01 6104 	mla	r1, r1, r4, r6
    for (i = 0; i < len; i++) {
    2d3c:	2300      	movs	r3, #0
    2d3e:	2b03      	cmp	r3, #3
    2d40:	d805      	bhi.n	2d4e <boot_check_header_erased+0x3a>
        if (val != p[i]) {
    2d42:	5cca      	ldrb	r2, [r1, r3]
    2d44:	4290      	cmp	r0, r2
    2d46:	d107      	bne.n	2d58 <boot_check_header_erased+0x44>
    for (i = 0; i < len; i++) {
    2d48:	3301      	adds	r3, #1
    2d4a:	b2db      	uxtb	r3, r3
    2d4c:	e7f7      	b.n	2d3e <boot_check_header_erased+0x2a>
    return true;
    2d4e:	2301      	movs	r3, #1
    if (!boot_data_is_set_to(erased_val, &hdr->ih_magic, sizeof(hdr->ih_magic))) {
    2d50:	b123      	cbz	r3, 2d5c <boot_check_header_erased+0x48>
        return -1;
    }

    return 0;
}
    2d52:	4628      	mov	r0, r5
    2d54:	b002      	add	sp, #8
    2d56:	bd70      	pop	{r4, r5, r6, pc}
            return false;
    2d58:	2300      	movs	r3, #0
    2d5a:	e7f9      	b.n	2d50 <boot_check_header_erased+0x3c>
        return -1;
    2d5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2d60:	e7f7      	b.n	2d52 <boot_check_header_erased+0x3e>
        return -1;
    2d62:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    2d66:	e7f4      	b.n	2d52 <boot_check_header_erased+0x3e>

00002d68 <boot_initialize_area>:
{
    2d68:	b510      	push	{r4, lr}
    2d6a:	b082      	sub	sp, #8
    2d6c:	4604      	mov	r4, r0
    2d6e:	4608      	mov	r0, r1
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    2d70:	2380      	movs	r3, #128	; 0x80
    2d72:	9301      	str	r3, [sp, #4]
    if (flash_area == FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state))) {
    2d74:	2901      	cmp	r1, #1
    2d76:	d006      	beq.n	2d86 <boot_initialize_area+0x1e>
    } else if (flash_area == FLASH_AREA_IMAGE_SECONDARY(BOOT_CURR_IMG(state))) {
    2d78:	2902      	cmp	r1, #2
    2d7a:	d00b      	beq.n	2d94 <boot_initialize_area+0x2c>
    } else if (flash_area == FLASH_AREA_IMAGE_SCRATCH) {
    2d7c:	2903      	cmp	r1, #3
    2d7e:	d010      	beq.n	2da2 <boot_initialize_area+0x3a>
        return BOOT_EFLASH;
    2d80:	2001      	movs	r0, #1
}
    2d82:	b002      	add	sp, #8
    2d84:	bd10      	pop	{r4, pc}
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    2d86:	6a62      	ldr	r2, [r4, #36]	; 0x24
    2d88:	a901      	add	r1, sp, #4
    2d8a:	f002 f831 	bl	4df0 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors = (size_t)num_sectors;
    2d8e:	9b01      	ldr	r3, [sp, #4]
    2d90:	62a3      	str	r3, [r4, #40]	; 0x28
    2d92:	e7f6      	b.n	2d82 <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    2d94:	6d22      	ldr	r2, [r4, #80]	; 0x50
    2d96:	a901      	add	r1, sp, #4
    2d98:	f002 f82a 	bl	4df0 <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors = (size_t)num_sectors;
    2d9c:	9b01      	ldr	r3, [sp, #4]
    2d9e:	6563      	str	r3, [r4, #84]	; 0x54
    2da0:	e7ef      	b.n	2d82 <boot_initialize_area+0x1a>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    2da2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    2da4:	a901      	add	r1, sp, #4
    2da6:	f002 f823 	bl	4df0 <flash_area_to_sectors>
        state->scratch.num_sectors = (size_t)num_sectors;
    2daa:	9b01      	ldr	r3, [sp, #4]
    2dac:	6623      	str	r3, [r4, #96]	; 0x60
    2dae:	e7e8      	b.n	2d82 <boot_initialize_area+0x1a>

00002db0 <boot_read_sectors>:
{
    2db0:	b538      	push	{r3, r4, r5, lr}
    2db2:	4605      	mov	r5, r0
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_PRIMARY(image_index));
    2db4:	2101      	movs	r1, #1
    2db6:	f7ff ffd7 	bl	2d68 <boot_initialize_area>
    if (rc != 0) {
    2dba:	b110      	cbz	r0, 2dc2 <boot_read_sectors+0x12>
        return BOOT_EFLASH;
    2dbc:	2401      	movs	r4, #1
}
    2dbe:	4620      	mov	r0, r4
    2dc0:	bd38      	pop	{r3, r4, r5, pc}
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SECONDARY(image_index));
    2dc2:	2102      	movs	r1, #2
    2dc4:	4628      	mov	r0, r5
    2dc6:	f7ff ffcf 	bl	2d68 <boot_initialize_area>
    if (rc != 0) {
    2dca:	b108      	cbz	r0, 2dd0 <boot_read_sectors+0x20>
        return BOOT_EFLASH;
    2dcc:	2401      	movs	r4, #1
    2dce:	e7f6      	b.n	2dbe <boot_read_sectors+0xe>
    rc = boot_initialize_area(state, FLASH_AREA_IMAGE_SCRATCH);
    2dd0:	2103      	movs	r1, #3
    2dd2:	4628      	mov	r0, r5
    2dd4:	f7ff ffc8 	bl	2d68 <boot_initialize_area>
    if (rc != 0) {
    2dd8:	4604      	mov	r4, r0
    2dda:	b108      	cbz	r0, 2de0 <boot_read_sectors+0x30>
        return BOOT_EFLASH;
    2ddc:	2401      	movs	r4, #1
    2dde:	e7ee      	b.n	2dbe <boot_read_sectors+0xe>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    2de0:	4628      	mov	r0, r5
    2de2:	f7ff ff3b 	bl	2c5c <boot_write_sz>
    2de6:	66a8      	str	r0, [r5, #104]	; 0x68
    return 0;
    2de8:	e7e9      	b.n	2dbe <boot_read_sectors+0xe>
	...

00002dec <boot_image_check>:
{
    2dec:	b500      	push	{lr}
    2dee:	b087      	sub	sp, #28
    if (bootutil_img_validate(BOOT_CURR_ENC(state), image_index, hdr, fap, tmpbuf,
    2df0:	2000      	movs	r0, #0
    2df2:	9004      	str	r0, [sp, #16]
    2df4:	9003      	str	r0, [sp, #12]
    2df6:	9002      	str	r0, [sp, #8]
    2df8:	f44f 7380 	mov.w	r3, #256	; 0x100
    2dfc:	9301      	str	r3, [sp, #4]
    2dfe:	4b07      	ldr	r3, [pc, #28]	; (2e1c <boot_image_check+0x30>)
    2e00:	9300      	str	r3, [sp, #0]
    2e02:	4613      	mov	r3, r2
    2e04:	460a      	mov	r2, r1
    2e06:	4601      	mov	r1, r0
    2e08:	f000 ffa6 	bl	3d58 <bootutil_img_validate>
    2e0c:	4603      	mov	r3, r0
    2e0e:	b918      	cbnz	r0, 2e18 <boot_image_check+0x2c>
}
    2e10:	4618      	mov	r0, r3
    2e12:	b007      	add	sp, #28
    2e14:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EBADIMAGE;
    2e18:	2303      	movs	r3, #3
    2e1a:	e7f9      	b.n	2e10 <boot_image_check+0x24>
    2e1c:	20006280 	.word	0x20006280

00002e20 <boot_validate_slot>:
 *         -1 on any errors
 */
static int
boot_validate_slot(struct boot_loader_state *state, int slot,
                   struct boot_status *bs)
{
    2e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2e24:	b082      	sub	sp, #8
    2e26:	4605      	mov	r5, r0
    2e28:	460c      	mov	r4, r1
    2e2a:	4617      	mov	r7, r2
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2e2c:	2000      	movs	r0, #0
    2e2e:	f001 f8b1 	bl	3f94 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    2e32:	a901      	add	r1, sp, #4
    2e34:	b2c0      	uxtb	r0, r0
    2e36:	f001 ffc1 	bl	4dbc <flash_area_open>
    if (rc != 0) {
    2e3a:	bb60      	cbnz	r0, 2e96 <boot_validate_slot+0x76>
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
    2e3c:	202c      	movs	r0, #44	; 0x2c
    2e3e:	fb00 5604 	mla	r6, r0, r4, r5
        return -1;
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
    2e42:	4621      	mov	r1, r4
    2e44:	4628      	mov	r0, r5
    2e46:	f7ff ff65 	bl	2d14 <boot_check_header_erased>
    2e4a:	b338      	cbz	r0, 2e9c <boot_validate_slot+0x7c>
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
    2e4c:	6933      	ldr	r3, [r6, #16]
    if (boot_check_header_erased(state, slot) == 0 ||
    2e4e:	f013 0f10 	tst.w	r3, #16
    2e52:	d128      	bne.n	2ea6 <boot_validate_slot+0x86>
            goto out;
        }
    }
#endif

    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    2e54:	f8dd 8004 	ldr.w	r8, [sp, #4]
    2e58:	4641      	mov	r1, r8
    2e5a:	4630      	mov	r0, r6
    2e5c:	f7ff fede 	bl	2c1c <boot_is_header_valid>
    2e60:	b938      	cbnz	r0, 2e72 <boot_validate_slot+0x52>
        if (slot != BOOT_PRIMARY_SLOT) {
    2e62:	b984      	cbnz	r4, 2e86 <boot_validate_slot+0x66>
            /* Image in the secondary slot is invalid. Erase the image and
             * continue booting from the primary slot.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
    2e64:	b9ac      	cbnz	r4, 2e92 <boot_validate_slot+0x72>
    2e66:	4911      	ldr	r1, [pc, #68]	; (2eac <boot_validate_slot+0x8c>)
    2e68:	4811      	ldr	r0, [pc, #68]	; (2eb0 <boot_validate_slot+0x90>)
    2e6a:	f001 fecb 	bl	4c04 <printf>
                     (slot == BOOT_PRIMARY_SLOT) ? "primary" : "secondary");
#endif
        rc = 1;
    2e6e:	2301      	movs	r3, #1
        goto out;
    2e70:	e015      	b.n	2e9e <boot_validate_slot+0x7e>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    2e72:	463b      	mov	r3, r7
    2e74:	4642      	mov	r2, r8
    2e76:	4631      	mov	r1, r6
    2e78:	4628      	mov	r0, r5
    2e7a:	f7ff ffb7 	bl	2dec <boot_image_check>
    2e7e:	4603      	mov	r3, r0
    2e80:	2800      	cmp	r0, #0
    2e82:	d1ee      	bne.n	2e62 <boot_validate_slot+0x42>
    2e84:	e00b      	b.n	2e9e <boot_validate_slot+0x7e>
            flash_area_erase(fap, 0, fap->fa_size);
    2e86:	9801      	ldr	r0, [sp, #4]
    2e88:	6882      	ldr	r2, [r0, #8]
    2e8a:	2100      	movs	r1, #0
    2e8c:	f002 f814 	bl	4eb8 <flash_area_erase>
    2e90:	e7e8      	b.n	2e64 <boot_validate_slot+0x44>
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
    2e92:	4908      	ldr	r1, [pc, #32]	; (2eb4 <boot_validate_slot+0x94>)
    2e94:	e7e8      	b.n	2e68 <boot_validate_slot+0x48>
        return -1;
    2e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2e9a:	e000      	b.n	2e9e <boot_validate_slot+0x7e>
        rc = 1;
    2e9c:	2301      	movs	r3, #1
    rc = 0;

out:
    flash_area_close(fap);
    return rc;
}
    2e9e:	4618      	mov	r0, r3
    2ea0:	b002      	add	sp, #8
    2ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
    2ea6:	2301      	movs	r3, #1
    2ea8:	e7f9      	b.n	2e9e <boot_validate_slot+0x7e>
    2eaa:	bf00      	nop
    2eac:	0000599c 	.word	0x0000599c
    2eb0:	000059b0 	.word	0x000059b0
    2eb4:	000059a4 	.word	0x000059a4

00002eb8 <boot_validated_swap_type>:
 * @return                      The type of swap to perform (BOOT_SWAP_TYPE...)
 */
static int
boot_validated_swap_type(struct boot_loader_state *state,
                         struct boot_status *bs)
{
    2eb8:	b570      	push	{r4, r5, r6, lr}
    2eba:	4605      	mov	r5, r0
    2ebc:	460e      	mov	r6, r1
    int swap_type;
    int rc;

    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    2ebe:	2000      	movs	r0, #0
    2ec0:	f7ff fdfa 	bl	2ab8 <boot_swap_type_multi>
    2ec4:	4604      	mov	r4, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    2ec6:	2802      	cmp	r0, #2
    2ec8:	d005      	beq.n	2ed6 <boot_validated_swap_type+0x1e>
    2eca:	2804      	cmp	r0, #4
    2ecc:	d003      	beq.n	2ed6 <boot_validated_swap_type+0x1e>
    2ece:	2803      	cmp	r0, #3
    2ed0:	d001      	beq.n	2ed6 <boot_validated_swap_type+0x1e>
            swap_type = BOOT_SWAP_TYPE_FAIL;
        }
    }

    return swap_type;
}
    2ed2:	4620      	mov	r0, r4
    2ed4:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs);
    2ed6:	4632      	mov	r2, r6
    2ed8:	2101      	movs	r1, #1
    2eda:	4628      	mov	r0, r5
    2edc:	f7ff ffa0 	bl	2e20 <boot_validate_slot>
        if (rc == 1) {
    2ee0:	2801      	cmp	r0, #1
    2ee2:	d003      	beq.n	2eec <boot_validated_swap_type+0x34>
        } else if (rc != 0) {
    2ee4:	2800      	cmp	r0, #0
    2ee6:	d0f4      	beq.n	2ed2 <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    2ee8:	2405      	movs	r4, #5
    return swap_type;
    2eea:	e7f2      	b.n	2ed2 <boot_validated_swap_type+0x1a>
            swap_type = BOOT_SWAP_TYPE_NONE;
    2eec:	4604      	mov	r4, r0
    2eee:	e7f0      	b.n	2ed2 <boot_validated_swap_type+0x1a>

00002ef0 <boot_read_image_headers>:
{
    2ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ef2:	4605      	mov	r5, r0
    2ef4:	460f      	mov	r7, r1
    2ef6:	4616      	mov	r6, r2
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    2ef8:	2400      	movs	r4, #0
    2efa:	2c01      	cmp	r4, #1
    2efc:	dc10      	bgt.n	2f20 <boot_read_image_headers+0x30>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    2efe:	4633      	mov	r3, r6
    2f00:	222c      	movs	r2, #44	; 0x2c
    2f02:	fb02 5204 	mla	r2, r2, r4, r5
    2f06:	4621      	mov	r1, r4
    2f08:	4628      	mov	r0, r5
    2f0a:	f000 fd02 	bl	3912 <boot_read_image_header>
        if (rc != 0) {
    2f0e:	4603      	mov	r3, r0
    2f10:	b908      	cbnz	r0, 2f16 <boot_read_image_headers+0x26>
    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
    2f12:	3401      	adds	r4, #1
    2f14:	e7f1      	b.n	2efa <boot_read_image_headers+0xa>
            if (i > 0 && !require_all) {
    2f16:	2c00      	cmp	r4, #0
    2f18:	dd03      	ble.n	2f22 <boot_read_image_headers+0x32>
    2f1a:	b917      	cbnz	r7, 2f22 <boot_read_image_headers+0x32>
                return 0;
    2f1c:	2300      	movs	r3, #0
    2f1e:	e000      	b.n	2f22 <boot_read_image_headers+0x32>
    return 0;
    2f20:	2300      	movs	r3, #0
}
    2f22:	4618      	mov	r0, r3
    2f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002f26 <boot_status_reset>:
    bs->use_scratch = 0;
    2f26:	2300      	movs	r3, #0
    2f28:	7183      	strb	r3, [r0, #6]
    bs->swap_size = 0;
    2f2a:	6083      	str	r3, [r0, #8]
    bs->source = 0;
    2f2c:	60c3      	str	r3, [r0, #12]
    bs->op = BOOT_STATUS_OP_MOVE;
    2f2e:	2301      	movs	r3, #1
    2f30:	7143      	strb	r3, [r0, #5]
    bs->idx = BOOT_STATUS_IDX_0;
    2f32:	6003      	str	r3, [r0, #0]
    bs->state = BOOT_STATUS_STATE_0;
    2f34:	7103      	strb	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    2f36:	71c3      	strb	r3, [r0, #7]
}
    2f38:	4770      	bx	lr

00002f3a <boot_status_is_reset>:
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    2f3a:	7943      	ldrb	r3, [r0, #5]
            bs->idx == BOOT_STATUS_IDX_0 &&
    2f3c:	2b01      	cmp	r3, #1
    2f3e:	d001      	beq.n	2f44 <boot_status_is_reset+0xa>
    2f40:	2000      	movs	r0, #0
    2f42:	4770      	bx	lr
    2f44:	6803      	ldr	r3, [r0, #0]
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    2f46:	2b01      	cmp	r3, #1
    2f48:	d001      	beq.n	2f4e <boot_status_is_reset+0x14>
            bs->idx == BOOT_STATUS_IDX_0 &&
    2f4a:	2000      	movs	r0, #0
    2f4c:	4770      	bx	lr
            bs->state == BOOT_STATUS_STATE_0);
    2f4e:	7903      	ldrb	r3, [r0, #4]
            bs->idx == BOOT_STATUS_IDX_0 &&
    2f50:	2b01      	cmp	r3, #1
    2f52:	d001      	beq.n	2f58 <boot_status_is_reset+0x1e>
    2f54:	2000      	movs	r0, #0
    2f56:	4770      	bx	lr
    2f58:	2001      	movs	r0, #1
}
    2f5a:	4770      	bx	lr

00002f5c <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
    2f5c:	b530      	push	{r4, r5, lr}
    2f5e:	b083      	sub	sp, #12
    2f60:	4605      	mov	r5, r0
    2f62:	460c      	mov	r4, r1
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
    2f64:	2300      	movs	r3, #0
    2f66:	9300      	str	r3, [sp, #0]
    2f68:	9301      	str	r3, [sp, #4]
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
    2f6a:	4608      	mov	r0, r1
    2f6c:	f7ff ffe5 	bl	2f3a <boot_status_is_reset>
    2f70:	2800      	cmp	r0, #0
    2f72:	d030      	beq.n	2fd6 <boot_swap_image+0x7a>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    2f74:	682a      	ldr	r2, [r5, #0]
    2f76:	4b1f      	ldr	r3, [pc, #124]	; (2ff4 <boot_swap_image+0x98>)
    2f78:	429a      	cmp	r2, r3
    2f7a:	d012      	beq.n	2fa2 <boot_swap_image+0x46>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    2f7c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    2f7e:	4b1d      	ldr	r3, [pc, #116]	; (2ff4 <boot_swap_image+0x98>)
    2f80:	429a      	cmp	r2, r3
    2f82:	d01b      	beq.n	2fbc <boot_swap_image+0x60>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
    2f84:	9b01      	ldr	r3, [sp, #4]
    2f86:	9a00      	ldr	r2, [sp, #0]
    2f88:	4293      	cmp	r3, r2
    2f8a:	d900      	bls.n	2f8e <boot_swap_image+0x32>
            copy_size = size;
    2f8c:	9300      	str	r3, [sp, #0]
        }

        bs->swap_size = copy_size;
    2f8e:	9b00      	ldr	r3, [sp, #0]
    2f90:	60a3      	str	r3, [r4, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
    2f92:	9a00      	ldr	r2, [sp, #0]
    2f94:	4621      	mov	r1, r4
    2f96:	4628      	mov	r0, r5
    2f98:	f000 fe60 	bl	3c5c <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
    2f9c:	2000      	movs	r0, #0
    2f9e:	b003      	add	sp, #12
    2fa0:	bd30      	pop	{r4, r5, pc}
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
    2fa2:	466a      	mov	r2, sp
    2fa4:	2100      	movs	r1, #0
    2fa6:	4628      	mov	r0, r5
    2fa8:	f7ff fe66 	bl	2c78 <boot_read_image_size>
            assert(rc == 0);
    2fac:	2800      	cmp	r0, #0
    2fae:	d0e5      	beq.n	2f7c <boot_swap_image+0x20>
    2fb0:	2300      	movs	r3, #0
    2fb2:	461a      	mov	r2, r3
    2fb4:	4619      	mov	r1, r3
    2fb6:	4618      	mov	r0, r3
    2fb8:	f7fe fbbc 	bl	1734 <__assert_func>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
    2fbc:	aa01      	add	r2, sp, #4
    2fbe:	2101      	movs	r1, #1
    2fc0:	4628      	mov	r0, r5
    2fc2:	f7ff fe59 	bl	2c78 <boot_read_image_size>
            assert(rc == 0);
    2fc6:	2800      	cmp	r0, #0
    2fc8:	d0dc      	beq.n	2f84 <boot_swap_image+0x28>
    2fca:	2300      	movs	r3, #0
    2fcc:	461a      	mov	r2, r3
    2fce:	4619      	mov	r1, r3
    2fd0:	4618      	mov	r0, r3
    2fd2:	f7fe fbaf 	bl	1734 <__assert_func>
        rc = boot_read_swap_size(image_index, &bs->swap_size);
    2fd6:	f104 0108 	add.w	r1, r4, #8
    2fda:	2000      	movs	r0, #0
    2fdc:	f7ff fd02 	bl	29e4 <boot_read_swap_size>
        assert(rc == 0);
    2fe0:	b910      	cbnz	r0, 2fe8 <boot_swap_image+0x8c>
        copy_size = bs->swap_size;
    2fe2:	68a3      	ldr	r3, [r4, #8]
    2fe4:	9300      	str	r3, [sp, #0]
    2fe6:	e7d4      	b.n	2f92 <boot_swap_image+0x36>
        assert(rc == 0);
    2fe8:	2300      	movs	r3, #0
    2fea:	461a      	mov	r2, r3
    2fec:	4619      	mov	r1, r3
    2fee:	4618      	mov	r0, r3
    2ff0:	f7fe fba0 	bl	1734 <__assert_func>
    2ff4:	96f3b83d 	.word	0x96f3b83d

00002ff8 <boot_complete_partial_swap>:
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY)
static int
boot_complete_partial_swap(struct boot_loader_state *state,
        struct boot_status *bs)
{
    2ff8:	b538      	push	{r3, r4, r5, lr}
    2ffa:	4605      	mov	r5, r0
    2ffc:	460c      	mov	r4, r1
    int rc;

    /* Determine the type of swap operation being resumed from the
     * `swap-type` trailer field.
     */
    rc = boot_swap_image(state, bs);
    2ffe:	f7ff ffad 	bl	2f5c <boot_swap_image>
    assert(rc == 0);
    3002:	b9a8      	cbnz	r0, 3030 <boot_complete_partial_swap+0x38>
    3004:	4602      	mov	r2, r0

    BOOT_SWAP_TYPE(state) = bs->swap_type;
    3006:	79e3      	ldrb	r3, [r4, #7]
    3008:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64

    /* The following states need image_ok be explicitly set after the
     * swap was finished to avoid a new revert.
     */
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
    300c:	79e3      	ldrb	r3, [r4, #7]
    300e:	3b03      	subs	r3, #3
    3010:	b2db      	uxtb	r3, r3
    3012:	2b01      	cmp	r3, #1
    3014:	d912      	bls.n	303c <boot_complete_partial_swap+0x44>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_IS_UPGRADE(bs->swap_type)) {
    3016:	79e3      	ldrb	r3, [r4, #7]
    3018:	2b02      	cmp	r3, #2
    301a:	d019      	beq.n	3050 <boot_complete_partial_swap+0x58>
    301c:	2b04      	cmp	r3, #4
    301e:	d017      	beq.n	3050 <boot_complete_partial_swap+0x58>
    3020:	2b03      	cmp	r3, #3
    3022:	d015      	beq.n	3050 <boot_complete_partial_swap+0x58>
        if (rc != 0) {
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }
    }

    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    3024:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
    3028:	2bff      	cmp	r3, #255	; 0xff
    302a:	d01b      	beq.n	3064 <boot_complete_partial_swap+0x6c>
        /* Loop forever... */
        while (1) {}
    }

    return rc;
}
    302c:	4610      	mov	r0, r2
    302e:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    3030:	2300      	movs	r3, #0
    3032:	461a      	mov	r2, r3
    3034:	4619      	mov	r1, r3
    3036:	4618      	mov	r0, r3
    3038:	f7fe fb7c 	bl	1734 <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    303c:	2000      	movs	r0, #0
    303e:	f000 fa9b 	bl	3578 <swap_set_image_ok>
        if (rc != 0) {
    3042:	4602      	mov	r2, r0
    3044:	2800      	cmp	r0, #0
    3046:	d0e6      	beq.n	3016 <boot_complete_partial_swap+0x1e>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    3048:	23ff      	movs	r3, #255	; 0xff
    304a:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    304e:	e7e2      	b.n	3016 <boot_complete_partial_swap+0x1e>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    3050:	2000      	movs	r0, #0
    3052:	f000 fa82 	bl	355a <swap_set_copy_done>
        if (rc != 0) {
    3056:	4602      	mov	r2, r0
    3058:	2800      	cmp	r0, #0
    305a:	d0e3      	beq.n	3024 <boot_complete_partial_swap+0x2c>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    305c:	23ff      	movs	r3, #255	; 0xff
    305e:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
    3062:	e7df      	b.n	3024 <boot_complete_partial_swap+0x2c>
        BOOT_LOG_ERR("panic!");
    3064:	4804      	ldr	r0, [pc, #16]	; (3078 <boot_complete_partial_swap+0x80>)
    3066:	f001 facb 	bl	4600 <puts>
        assert(0);
    306a:	2300      	movs	r3, #0
    306c:	461a      	mov	r2, r3
    306e:	4619      	mov	r1, r3
    3070:	4618      	mov	r0, r3
    3072:	f7fe fb5f 	bl	1734 <__assert_func>
    3076:	bf00      	nop
    3078:	000058ec 	.word	0x000058ec

0000307c <boot_perform_update>:
{
    307c:	b538      	push	{r3, r4, r5, lr}
    307e:	4605      	mov	r5, r0
        rc = boot_swap_image(state, bs);
    3080:	f7ff ff6c 	bl	2f5c <boot_swap_image>
    assert(rc == 0);
    3084:	b9b0      	cbnz	r0, 30b4 <boot_perform_update+0x38>
    3086:	4602      	mov	r2, r0
    swap_type = BOOT_SWAP_TYPE(state);
    3088:	f895 4064 	ldrb.w	r4, [r5, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    308c:	1ee3      	subs	r3, r4, #3
    308e:	b2db      	uxtb	r3, r3
    3090:	2b01      	cmp	r3, #1
    3092:	d915      	bls.n	30c0 <boot_perform_update+0x44>
    if (BOOT_IS_UPGRADE(swap_type)) {
    3094:	2c02      	cmp	r4, #2
    3096:	d003      	beq.n	30a0 <boot_perform_update+0x24>
    3098:	2c04      	cmp	r4, #4
    309a:	d001      	beq.n	30a0 <boot_perform_update+0x24>
    309c:	2c03      	cmp	r4, #3
    309e:	d107      	bne.n	30b0 <boot_perform_update+0x34>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    30a0:	2000      	movs	r0, #0
    30a2:	f000 fa5a 	bl	355a <swap_set_copy_done>
        if (rc != 0) {
    30a6:	4602      	mov	r2, r0
    30a8:	b110      	cbz	r0, 30b0 <boot_perform_update+0x34>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    30aa:	23ff      	movs	r3, #255	; 0xff
    30ac:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
    30b0:	4610      	mov	r0, r2
    30b2:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
    30b4:	2300      	movs	r3, #0
    30b6:	461a      	mov	r2, r3
    30b8:	4619      	mov	r1, r3
    30ba:	4618      	mov	r0, r3
    30bc:	f7fe fb3a 	bl	1734 <__assert_func>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    30c0:	2000      	movs	r0, #0
    30c2:	f000 fa59 	bl	3578 <swap_set_image_ok>
        if (rc != 0) {
    30c6:	4602      	mov	r2, r0
    30c8:	2800      	cmp	r0, #0
    30ca:	d0e3      	beq.n	3094 <boot_perform_update+0x18>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    30cc:	24ff      	movs	r4, #255	; 0xff
    30ce:	f885 4064 	strb.w	r4, [r5, #100]	; 0x64
    30d2:	e7e1      	b.n	3098 <boot_perform_update+0x1c>

000030d4 <boot_prepare_image_for_update>:
 *                              boot status can be written to.
 */
static void
boot_prepare_image_for_update(struct boot_loader_state *state,
                              struct boot_status *bs)
{
    30d4:	b538      	push	{r3, r4, r5, lr}
    30d6:	4604      	mov	r4, r0
    30d8:	460d      	mov	r5, r1
    int rc;

    /* Determine the sector layout of the image slots and scratch area. */
    rc = boot_read_sectors(state);
    30da:	f7ff fe69 	bl	2db0 <boot_read_sectors>
    if (rc != 0) {
    30de:	b968      	cbnz	r0, 30fc <boot_prepare_image_for_update+0x28>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
        return;
    }

    /* Attempt to read an image header from each slot. */
    rc = boot_read_image_headers(state, false, NULL);
    30e0:	2200      	movs	r2, #0
    30e2:	4611      	mov	r1, r2
    30e4:	4620      	mov	r0, r4
    30e6:	f7ff ff03 	bl	2ef0 <boot_read_image_headers>
    if (rc != 0) {
    30ea:	b978      	cbnz	r0, 310c <boot_prepare_image_for_update+0x38>
    }

    /* If the current image's slots aren't compatible, no swap is possible.
     * Just boot into primary slot.
     */
    if (boot_slots_compatible(state)) {
    30ec:	4620      	mov	r0, r4
    30ee:	f000 fc97 	bl	3a20 <boot_slots_compatible>
    30f2:	b998      	cbnz	r0, 311c <boot_prepare_image_for_update+0x48>
            }
#endif
        }
    } else {
        /* In that case if slots are not compatible. */
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    30f4:	2301      	movs	r3, #1
    30f6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    30fa:	e006      	b.n	310a <boot_prepare_image_for_update+0x36>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
    30fc:	2180      	movs	r1, #128	; 0x80
    30fe:	482b      	ldr	r0, [pc, #172]	; (31ac <boot_prepare_image_for_update+0xd8>)
    3100:	f001 fd80 	bl	4c04 <printf>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    3104:	2301      	movs	r3, #1
    3106:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    }
}
    310a:	bd38      	pop	{r3, r4, r5, pc}
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
    310c:	2100      	movs	r1, #0
    310e:	4828      	ldr	r0, [pc, #160]	; (31b0 <boot_prepare_image_for_update+0xdc>)
    3110:	f001 fd78 	bl	4c04 <printf>
        BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    3114:	2301      	movs	r3, #1
    3116:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        return;
    311a:	e7f6      	b.n	310a <boot_prepare_image_for_update+0x36>
        boot_status_reset(bs);
    311c:	4628      	mov	r0, r5
    311e:	f7ff ff02 	bl	2f26 <boot_status_reset>
        rc = swap_read_status(state, bs);
    3122:	4629      	mov	r1, r5
    3124:	4620      	mov	r0, r4
    3126:	f000 f9da 	bl	34de <swap_read_status>
        if (rc != 0) {
    312a:	b980      	cbnz	r0, 314e <boot_prepare_image_for_update+0x7a>
        if (!boot_status_is_reset(bs)) {
    312c:	4628      	mov	r0, r5
    312e:	f7ff ff04 	bl	2f3a <boot_status_is_reset>
    3132:	b1a0      	cbz	r0, 315e <boot_prepare_image_for_update+0x8a>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    3134:	79eb      	ldrb	r3, [r5, #7]
    3136:	2b01      	cmp	r3, #1
    3138:	d02c      	beq.n	3194 <boot_prepare_image_for_update+0xc0>
            } else if (boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs) != 0) {
    313a:	462a      	mov	r2, r5
    313c:	2101      	movs	r1, #1
    313e:	4620      	mov	r0, r4
    3140:	f7ff fe6e 	bl	2e20 <boot_validate_slot>
    3144:	b368      	cbz	r0, 31a2 <boot_prepare_image_for_update+0xce>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    3146:	2305      	movs	r3, #5
    3148:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    314c:	e7dd      	b.n	310a <boot_prepare_image_for_update+0x36>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
    314e:	2100      	movs	r1, #0
    3150:	4818      	ldr	r0, [pc, #96]	; (31b4 <boot_prepare_image_for_update+0xe0>)
    3152:	f001 fd57 	bl	4c04 <printf>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    3156:	2301      	movs	r3, #1
    3158:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            return;
    315c:	e7d5      	b.n	310a <boot_prepare_image_for_update+0x36>
            rc = boot_complete_partial_swap(state, bs);
    315e:	4629      	mov	r1, r5
    3160:	4620      	mov	r0, r4
    3162:	f7ff ff49 	bl	2ff8 <boot_complete_partial_swap>
            assert(rc == 0);
    3166:	b948      	cbnz	r0, 317c <boot_prepare_image_for_update+0xa8>
            rc = boot_read_image_headers(state, false, bs);
    3168:	462a      	mov	r2, r5
    316a:	2100      	movs	r1, #0
    316c:	4620      	mov	r0, r4
    316e:	f7ff febf 	bl	2ef0 <boot_read_image_headers>
            assert(rc == 0);
    3172:	b948      	cbnz	r0, 3188 <boot_prepare_image_for_update+0xb4>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    3174:	2301      	movs	r3, #1
    3176:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    317a:	e7c6      	b.n	310a <boot_prepare_image_for_update+0x36>
            assert(rc == 0);
    317c:	2300      	movs	r3, #0
    317e:	461a      	mov	r2, r3
    3180:	4619      	mov	r1, r3
    3182:	4618      	mov	r0, r3
    3184:	f7fe fad6 	bl	1734 <__assert_func>
            assert(rc == 0);
    3188:	2300      	movs	r3, #0
    318a:	461a      	mov	r2, r3
    318c:	4619      	mov	r1, r3
    318e:	4618      	mov	r0, r3
    3190:	f7fe fad0 	bl	1734 <__assert_func>
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    3194:	4629      	mov	r1, r5
    3196:	4620      	mov	r0, r4
    3198:	f7ff fe8e 	bl	2eb8 <boot_validated_swap_type>
    319c:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64
    31a0:	e7b3      	b.n	310a <boot_prepare_image_for_update+0x36>
                BOOT_SWAP_TYPE(state) = bs->swap_type;
    31a2:	79eb      	ldrb	r3, [r5, #7]
    31a4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    31a8:	e7af      	b.n	310a <boot_prepare_image_for_update+0x36>
    31aa:	bf00      	nop
    31ac:	000058fc 	.word	0x000058fc
    31b0:	00005940 	.word	0x00005940
    31b4:	00005970 	.word	0x00005970

000031b8 <boot_write_status>:
{
    31b8:	b570      	push	{r4, r5, r6, lr}
    31ba:	b084      	sub	sp, #16
    31bc:	4606      	mov	r6, r0
    31be:	460c      	mov	r4, r1
    if (bs->use_scratch) {
    31c0:	798b      	ldrb	r3, [r1, #6]
    31c2:	b143      	cbz	r3, 31d6 <boot_write_status+0x1e>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    31c4:	2003      	movs	r0, #3
    rc = flash_area_open(area_id, &fap);
    31c6:	a903      	add	r1, sp, #12
    31c8:	f001 fdf8 	bl	4dbc <flash_area_open>
    if (rc != 0) {
    31cc:	b128      	cbz	r0, 31da <boot_write_status+0x22>
        rc = BOOT_EFLASH;
    31ce:	2301      	movs	r3, #1
}
    31d0:	4618      	mov	r0, r3
    31d2:	b004      	add	sp, #16
    31d4:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    31d6:	2001      	movs	r0, #1
    31d8:	e7f5      	b.n	31c6 <boot_write_status+0xe>
    off = boot_status_off(fap) +
    31da:	9803      	ldr	r0, [sp, #12]
    31dc:	f7ff fb7e 	bl	28dc <boot_status_off>
    31e0:	4605      	mov	r5, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    31e2:	6eb1      	ldr	r1, [r6, #104]	; 0x68
    31e4:	4620      	mov	r0, r4
    31e6:	f000 fc0d 	bl	3a04 <boot_status_internal_off>
    off = boot_status_off(fap) +
    31ea:	4405      	add	r5, r0
    align = flash_area_align(fap);
    31ec:	9803      	ldr	r0, [sp, #12]
    31ee:	f001 fe76 	bl	4ede <flash_area_align>
    31f2:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    31f4:	9803      	ldr	r0, [sp, #12]
    31f6:	f001 fe77 	bl	4ee8 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    31fa:	2208      	movs	r2, #8
    31fc:	b2c1      	uxtb	r1, r0
    31fe:	a801      	add	r0, sp, #4
    3200:	f7fe fdf8 	bl	1df4 <memset>
    buf[0] = bs->state;
    3204:	7923      	ldrb	r3, [r4, #4]
    3206:	f88d 3004 	strb.w	r3, [sp, #4]
    rc = flash_area_write(fap, off, buf, align);
    320a:	4633      	mov	r3, r6
    320c:	aa01      	add	r2, sp, #4
    320e:	4629      	mov	r1, r5
    3210:	9803      	ldr	r0, [sp, #12]
    3212:	f001 fe3e 	bl	4e92 <flash_area_write>
    if (rc != 0) {
    3216:	4603      	mov	r3, r0
    3218:	2800      	cmp	r0, #0
    321a:	d0d9      	beq.n	31d0 <boot_write_status+0x18>
        rc = BOOT_EFLASH;
    321c:	2301      	movs	r3, #1
    321e:	e7d7      	b.n	31d0 <boot_write_status+0x18>

00003220 <boot_erase_region>:
{
    3220:	b508      	push	{r3, lr}
    return flash_area_erase(fap, off, sz);
    3222:	f001 fe49 	bl	4eb8 <flash_area_erase>
}
    3226:	bd08      	pop	{r3, pc}

00003228 <boot_copy_region>:
{
    3228:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    322c:	4688      	mov	r8, r1
    322e:	4692      	mov	sl, r2
    3230:	461f      	mov	r7, r3
    3232:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    3236:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
    bytes_copied = 0;
    3238:	2500      	movs	r5, #0
    while (bytes_copied < sz) {
    323a:	e00f      	b.n	325c <boot_copy_region+0x34>
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    323c:	4623      	mov	r3, r4
    323e:	4a0f      	ldr	r2, [pc, #60]	; (327c <boot_copy_region+0x54>)
    3240:	19e9      	adds	r1, r5, r7
    3242:	4640      	mov	r0, r8
    3244:	f001 fe12 	bl	4e6c <flash_area_read>
        if (rc != 0) {
    3248:	b9a0      	cbnz	r0, 3274 <boot_copy_region+0x4c>
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
    324a:	4623      	mov	r3, r4
    324c:	4a0b      	ldr	r2, [pc, #44]	; (327c <boot_copy_region+0x54>)
    324e:	eb05 0109 	add.w	r1, r5, r9
    3252:	4650      	mov	r0, sl
    3254:	f001 fe1d 	bl	4e92 <flash_area_write>
        if (rc != 0) {
    3258:	b970      	cbnz	r0, 3278 <boot_copy_region+0x50>
        bytes_copied += chunk_sz;
    325a:	4425      	add	r5, r4
    while (bytes_copied < sz) {
    325c:	42b5      	cmp	r5, r6
    325e:	d206      	bcs.n	326e <boot_copy_region+0x46>
        if (sz - bytes_copied > sizeof buf) {
    3260:	1b74      	subs	r4, r6, r5
    3262:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    3266:	d9e9      	bls.n	323c <boot_copy_region+0x14>
            chunk_sz = sizeof buf;
    3268:	f44f 6480 	mov.w	r4, #1024	; 0x400
    326c:	e7e6      	b.n	323c <boot_copy_region+0x14>
    return 0;
    326e:	2000      	movs	r0, #0
}
    3270:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return BOOT_EFLASH;
    3274:	2001      	movs	r0, #1
    3276:	e7fb      	b.n	3270 <boot_copy_region+0x48>
            return BOOT_EFLASH;
    3278:	2001      	movs	r0, #1
    327a:	e7f9      	b.n	3270 <boot_copy_region+0x48>
    327c:	20004c80 	.word	0x20004c80

00003280 <context_boot_go>:

int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    3280:	b570      	push	{r4, r5, r6, lr}
    3282:	b084      	sub	sp, #16
    3284:	4604      	mov	r4, r0
    3286:	460e      	mov	r6, r1
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
    3288:	226c      	movs	r2, #108	; 0x6c
    328a:	2100      	movs	r1, #0
    328c:	f7fe fdb2 	bl	1df4 <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    3290:	4b45      	ldr	r3, [pc, #276]	; (33a8 <context_boot_go+0x128>)
    3292:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    3294:	4b45      	ldr	r3, [pc, #276]	; (33ac <context_boot_go+0x12c>)
    3296:	6523      	str	r3, [r4, #80]	; 0x50
            secondary_slot_sectors[image_index];
#if MCUBOOT_SWAP_USING_SCRATCH
        state->scratch.sectors = scratch_sectors;
    3298:	4b45      	ldr	r3, [pc, #276]	; (33b0 <context_boot_go+0x130>)
    329a:	65e3      	str	r3, [r4, #92]	; 0x5c
#endif

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    329c:	2500      	movs	r5, #0
    329e:	2d01      	cmp	r5, #1
    32a0:	d814      	bhi.n	32cc <context_boot_go+0x4c>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    32a2:	4629      	mov	r1, r5
    32a4:	2000      	movs	r0, #0
    32a6:	f000 fe75 	bl	3f94 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    32aa:	212c      	movs	r1, #44	; 0x2c
    32ac:	fb01 f105 	mul.w	r1, r1, r5
    32b0:	3120      	adds	r1, #32
    32b2:	4421      	add	r1, r4
    32b4:	b2c0      	uxtb	r0, r0
    32b6:	f001 fd81 	bl	4dbc <flash_area_open>
            assert(rc == 0);
    32ba:	b908      	cbnz	r0, 32c0 <context_boot_go+0x40>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    32bc:	3501      	adds	r5, #1
    32be:	e7ee      	b.n	329e <context_boot_go+0x1e>
            assert(rc == 0);
    32c0:	2300      	movs	r3, #0
    32c2:	461a      	mov	r2, r3
    32c4:	4619      	mov	r1, r3
    32c6:	4618      	mov	r0, r3
    32c8:	f7fe fa34 	bl	1734 <__assert_func>
        }
#if MCUBOOT_SWAP_USING_SCRATCH
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    32cc:	f104 0158 	add.w	r1, r4, #88	; 0x58
    32d0:	2003      	movs	r0, #3
    32d2:	f001 fd73 	bl	4dbc <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
    32d6:	4605      	mov	r5, r0
    32d8:	b978      	cbnz	r0, 32fa <context_boot_go+0x7a>
#endif

        /* Determine swap type and complete swap if it has been aborted. */
        boot_prepare_image_for_update(state, &bs);
    32da:	4669      	mov	r1, sp
    32dc:	4620      	mov	r0, r4
    32de:	f7ff fef9 	bl	30d4 <boot_prepare_image_for_update>

        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    32e2:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        /* Indicate that swap is not aborted */
        boot_status_reset(&bs);
#endif /* (BOOT_IMAGE_NUMBER > 1) */

        /* Set the previously determined swap type */
        bs.swap_type = BOOT_SWAP_TYPE(state);
    32e6:	f88d 3007 	strb.w	r3, [sp, #7]

        switch (BOOT_SWAP_TYPE(state)) {
    32ea:	3b01      	subs	r3, #1
    32ec:	2b04      	cmp	r3, #4
    32ee:	d838      	bhi.n	3362 <context_boot_go+0xe2>
    32f0:	e8df f003 	tbb	[pc, r3]
    32f4:	0909090f 	.word	0x0909090f
    32f8:	2d          	.byte	0x2d
    32f9:	00          	.byte	0x00
        assert(rc == 0);
    32fa:	2300      	movs	r3, #0
    32fc:	461a      	mov	r2, r3
    32fe:	4619      	mov	r1, r3
    3300:	4618      	mov	r0, r3
    3302:	f7fe fa17 	bl	1734 <__assert_func>
            break;

        case BOOT_SWAP_TYPE_TEST:          /* fallthrough */
        case BOOT_SWAP_TYPE_PERM:          /* fallthrough */
        case BOOT_SWAP_TYPE_REVERT:
            rc = boot_perform_update(state, &bs);
    3306:	4669      	mov	r1, sp
    3308:	4620      	mov	r0, r4
    330a:	f7ff feb7 	bl	307c <boot_perform_update>
            assert(rc == 0);
    330e:	4605      	mov	r5, r0
    3310:	b9b8      	cbnz	r0, 3342 <context_boot_go+0xc2>

        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    3312:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    3316:	2bff      	cmp	r3, #255	; 0xff
    3318:	d027      	beq.n	336a <context_boot_go+0xea>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    331a:	2b01      	cmp	r3, #1
    331c:	d12e      	bne.n	337c <context_boot_go+0xfc>
#else
        /* Even if we're not re-validating the primary slot, we could be booting
         * onto an empty flash chip. At least do a basic sanity check that
         * the magic number on the image is OK.
         */
        if (BOOT_IMG(state, BOOT_PRIMARY_SLOT).hdr.ih_magic != IMAGE_MAGIC) {
    331e:	6822      	ldr	r2, [r4, #0]
    3320:	4b24      	ldr	r3, [pc, #144]	; (33b4 <context_boot_go+0x134>)
    3322:	429a      	cmp	r2, r3
    3324:	d133      	bne.n	338e <context_boot_go+0x10e>
    /*
     * Since the boot_status struct stores plaintext encryption keys, reset
     * them here to avoid the possibility of jumping into an image that could
     * easily recover them.
     */
    memset(&bs, 0, sizeof(struct boot_status));
    3326:	2300      	movs	r3, #0
    3328:	9300      	str	r3, [sp, #0]
    332a:	9301      	str	r3, [sp, #4]
    332c:	9302      	str	r3, [sp, #8]
    332e:	9303      	str	r3, [sp, #12]

    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    3330:	6a23      	ldr	r3, [r4, #32]
    3332:	785b      	ldrb	r3, [r3, #1]
    3334:	7133      	strb	r3, [r6, #4]
 * Offset of the slot from the beginning of the flash device.
 */
static inline uint32_t
boot_img_slot_off(struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).area->fa_off;
    3336:	6a23      	ldr	r3, [r4, #32]
    3338:	685b      	ldr	r3, [r3, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    333a:	60b3      	str	r3, [r6, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    333c:	6034      	str	r4, [r6, #0]
out:
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
#if MCUBOOT_SWAP_USING_SCRATCH
        flash_area_close(BOOT_SCRATCH_AREA(state));
#endif
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    333e:	2300      	movs	r3, #0
    3340:	e02d      	b.n	339e <context_boot_go+0x11e>
            assert(rc == 0);
    3342:	2300      	movs	r3, #0
    3344:	461a      	mov	r2, r3
    3346:	4619      	mov	r1, r3
    3348:	4618      	mov	r0, r3
    334a:	f7fe f9f3 	bl	1734 <__assert_func>
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    334e:	2000      	movs	r0, #0
    3350:	f000 f912 	bl	3578 <swap_set_image_ok>
            if (rc != 0) {
    3354:	4605      	mov	r5, r0
    3356:	2800      	cmp	r0, #0
    3358:	d0db      	beq.n	3312 <context_boot_go+0x92>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    335a:	23ff      	movs	r3, #255	; 0xff
    335c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    3360:	e7d7      	b.n	3312 <context_boot_go+0x92>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    3362:	23ff      	movs	r3, #255	; 0xff
    3364:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    3368:	e7d3      	b.n	3312 <context_boot_go+0x92>
            BOOT_LOG_ERR("panic!");
    336a:	4813      	ldr	r0, [pc, #76]	; (33b8 <context_boot_go+0x138>)
    336c:	f001 f948 	bl	4600 <puts>
            assert(0);
    3370:	2300      	movs	r3, #0
    3372:	461a      	mov	r2, r3
    3374:	4619      	mov	r1, r3
    3376:	4618      	mov	r0, r3
    3378:	f7fe f9dc 	bl	1734 <__assert_func>
            rc = boot_read_image_headers(state, false, &bs);
    337c:	466a      	mov	r2, sp
    337e:	2100      	movs	r1, #0
    3380:	4620      	mov	r0, r4
    3382:	f7ff fdb5 	bl	2ef0 <boot_read_image_headers>
            if (rc != 0) {
    3386:	4605      	mov	r5, r0
    3388:	2800      	cmp	r0, #0
    338a:	d1d8      	bne.n	333e <context_boot_go+0xbe>
    338c:	e7c7      	b.n	331e <context_boot_go+0x9e>
            BOOT_LOG_ERR("bad image magic 0x%lx; Image=%u", (unsigned long)
    338e:	2200      	movs	r2, #0
    3390:	4621      	mov	r1, r4
    3392:	480a      	ldr	r0, [pc, #40]	; (33bc <context_boot_go+0x13c>)
    3394:	f001 fc36 	bl	4c04 <printf>
            rc = BOOT_EBADIMAGE;
    3398:	2503      	movs	r5, #3
            goto out;
    339a:	e7d0      	b.n	333e <context_boot_go+0xbe>
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
    339c:	3301      	adds	r3, #1
    339e:	2b01      	cmp	r3, #1
    33a0:	d9fc      	bls.n	339c <context_boot_go+0x11c>
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
        }
    }
    return rc;
}
    33a2:	4628      	mov	r0, r5
    33a4:	b004      	add	sp, #16
    33a6:	bd70      	pop	{r4, r5, r6, pc}
    33a8:	20005080 	.word	0x20005080
    33ac:	20005c80 	.word	0x20005c80
    33b0:	20005680 	.word	0x20005680
    33b4:	96f3b83d 	.word	0x96f3b83d
    33b8:	000058ec 	.word	0x000058ec
    33bc:	000059dc 	.word	0x000059dc

000033c0 <boot_go>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
    33c0:	b508      	push	{r3, lr}
    return context_boot_go(&boot_data, rsp);
    33c2:	4601      	mov	r1, r0
    33c4:	4801      	ldr	r0, [pc, #4]	; (33cc <boot_go+0xc>)
    33c6:	f7ff ff5b 	bl	3280 <context_boot_go>
}
    33ca:	bd08      	pop	{r3, pc}
    33cc:	20004c14 	.word	0x20004c14

000033d0 <swap_erase_trailer_sectors>:
#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)

int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    33d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33d4:	4606      	mov	r6, r0
    33d6:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    33d8:	2100      	movs	r1, #0
    33da:	4608      	mov	r0, r1
    33dc:	f000 fdda 	bl	3f94 <flash_area_id_from_multi_image_slot>
    33e0:	4604      	mov	r4, r0
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    33e2:	2101      	movs	r1, #1
    33e4:	2000      	movs	r0, #0
    33e6:	f000 fdd5 	bl	3f94 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    33ea:	783b      	ldrb	r3, [r7, #0]
    33ec:	42a3      	cmp	r3, r4
    33ee:	d029      	beq.n	3444 <swap_erase_trailer_sectors+0x74>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    33f0:	4283      	cmp	r3, r0
    33f2:	d001      	beq.n	33f8 <swap_erase_trailer_sectors+0x28>
        slot = BOOT_SECONDARY_SLOT;
    } else {
        return BOOT_EFLASH;
    33f4:	2301      	movs	r3, #1
    33f6:	e022      	b.n	343e <swap_erase_trailer_sectors+0x6e>
        slot = BOOT_SECONDARY_SLOT;
    33f8:	2301      	movs	r3, #1
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    33fa:	4698      	mov	r8, r3
    return BOOT_IMG(state, slot).num_sectors;
    33fc:	222c      	movs	r2, #44	; 0x2c
    33fe:	fb02 6303 	mla	r3, r2, r3, r6
    3402:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    3404:	3c01      	subs	r4, #1
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    3406:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    3408:	f7ff fa54 	bl	28b4 <boot_trailer_sz>
    340c:	4681      	mov	r9, r0
    total_sz = 0;
    340e:	2500      	movs	r5, #0

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    3410:	232c      	movs	r3, #44	; 0x2c
    3412:	fb03 6308 	mla	r3, r3, r8, r6
    3416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    3418:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    341c:	008b      	lsls	r3, r1, #2
    341e:	4413      	add	r3, r2
    3420:	f8d3 a008 	ldr.w	sl, [r3, #8]
 */
static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    3424:	6859      	ldr	r1, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    3426:	6853      	ldr	r3, [r2, #4]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    3428:	4652      	mov	r2, sl
    342a:	1ac9      	subs	r1, r1, r3
    342c:	4638      	mov	r0, r7
    342e:	f7ff fef7 	bl	3220 <boot_erase_region>
        assert(rc == 0);
    3432:	4603      	mov	r3, r0
    3434:	b940      	cbnz	r0, 3448 <swap_erase_trailer_sectors+0x78>

        sector--;
    3436:	3c01      	subs	r4, #1
        total_sz += sz;
    3438:	4455      	add	r5, sl
    } while (total_sz < trailer_sz);
    343a:	45a9      	cmp	r9, r5
    343c:	d8e8      	bhi.n	3410 <swap_erase_trailer_sectors+0x40>

    return rc;
}
    343e:	4618      	mov	r0, r3
    3440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        slot = BOOT_PRIMARY_SLOT;
    3444:	2300      	movs	r3, #0
    3446:	e7d8      	b.n	33fa <swap_erase_trailer_sectors+0x2a>
        assert(rc == 0);
    3448:	2300      	movs	r3, #0
    344a:	461a      	mov	r2, r3
    344c:	4619      	mov	r1, r3
    344e:	4618      	mov	r0, r3
    3450:	f7fe f970 	bl	1734 <__assert_func>

00003454 <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    3454:	b530      	push	{r4, r5, lr}
    3456:	b083      	sub	sp, #12
    3458:	460c      	mov	r4, r1
    345a:	4615      	mov	r5, r2

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    345c:	4669      	mov	r1, sp
    345e:	2002      	movs	r0, #2
    3460:	f7ff fab0 	bl	29c4 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);
    3464:	b990      	cbnz	r0, 348c <swap_status_init+0x38>

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    3466:	79e9      	ldrb	r1, [r5, #7]
    3468:	2901      	cmp	r1, #1
    346a:	d115      	bne.n	3498 <swap_status_init+0x44>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
        assert(rc == 0);
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    346c:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3470:	2b01      	cmp	r3, #1
    3472:	d01d      	beq.n	34b0 <swap_status_init+0x5c>
        rc = boot_write_image_ok(fap);
        assert(rc == 0);
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    3474:	68a9      	ldr	r1, [r5, #8]
    3476:	4620      	mov	r0, r4
    3478:	f7ff fb0c 	bl	2a94 <boot_write_swap_size>
    assert(rc == 0);
    347c:	bb18      	cbnz	r0, 34c6 <swap_status_init+0x72>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    347e:	4620      	mov	r0, r4
    3480:	f7ff fac8 	bl	2a14 <boot_write_magic>
    assert(rc == 0);
    3484:	bb28      	cbnz	r0, 34d2 <swap_status_init+0x7e>

    return 0;
}
    3486:	2000      	movs	r0, #0
    3488:	b003      	add	sp, #12
    348a:	bd30      	pop	{r4, r5, pc}
    assert(rc == 0);
    348c:	2300      	movs	r3, #0
    348e:	461a      	mov	r2, r3
    3490:	4619      	mov	r1, r3
    3492:	4618      	mov	r0, r3
    3494:	f7fe f94e 	bl	1734 <__assert_func>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    3498:	2200      	movs	r2, #0
    349a:	4620      	mov	r0, r4
    349c:	f7ff fad8 	bl	2a50 <boot_write_swap_info>
        assert(rc == 0);
    34a0:	2800      	cmp	r0, #0
    34a2:	d0e3      	beq.n	346c <swap_status_init+0x18>
    34a4:	2300      	movs	r3, #0
    34a6:	461a      	mov	r2, r3
    34a8:	4619      	mov	r1, r3
    34aa:	4618      	mov	r0, r3
    34ac:	f7fe f942 	bl	1734 <__assert_func>
        rc = boot_write_image_ok(fap);
    34b0:	4620      	mov	r0, r4
    34b2:	f7ff fac6 	bl	2a42 <boot_write_image_ok>
        assert(rc == 0);
    34b6:	2800      	cmp	r0, #0
    34b8:	d0dc      	beq.n	3474 <swap_status_init+0x20>
    34ba:	2300      	movs	r3, #0
    34bc:	461a      	mov	r2, r3
    34be:	4619      	mov	r1, r3
    34c0:	4618      	mov	r0, r3
    34c2:	f7fe f937 	bl	1734 <__assert_func>
    assert(rc == 0);
    34c6:	2300      	movs	r3, #0
    34c8:	461a      	mov	r2, r3
    34ca:	4619      	mov	r1, r3
    34cc:	4618      	mov	r0, r3
    34ce:	f7fe f931 	bl	1734 <__assert_func>
    assert(rc == 0);
    34d2:	2300      	movs	r3, #0
    34d4:	461a      	mov	r2, r3
    34d6:	4619      	mov	r1, r3
    34d8:	4618      	mov	r0, r3
    34da:	f7fe f92b 	bl	1734 <__assert_func>

000034de <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    34de:	b570      	push	{r4, r5, r6, lr}
    34e0:	b082      	sub	sp, #8
    34e2:	4606      	mov	r6, r0
    34e4:	460d      	mov	r5, r1
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    34e6:	f000 fb1b 	bl	3b20 <swap_status_source>
    34ea:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    34ec:	2801      	cmp	r0, #1
    34ee:	d009      	beq.n	3504 <swap_read_status+0x26>
    34f0:	4604      	mov	r4, r0
    34f2:	2802      	cmp	r0, #2
    34f4:	d00f      	beq.n	3516 <swap_read_status+0x38>
    34f6:	b158      	cbz	r0, 3510 <swap_read_status+0x32>
    case BOOT_STATUS_SOURCE_PRIMARY_SLOT:
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
        break;

    default:
        assert(0);
    34f8:	2300      	movs	r3, #0
    34fa:	461a      	mov	r2, r3
    34fc:	4619      	mov	r1, r3
    34fe:	4618      	mov	r0, r3
    3500:	f7fe f918 	bl	1734 <__assert_func>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    3504:	2003      	movs	r0, #3
        return BOOT_EBADARGS;
    }

    rc = flash_area_open(area_id, &fap);
    3506:	a901      	add	r1, sp, #4
    3508:	f001 fc58 	bl	4dbc <flash_area_open>
    if (rc != 0) {
    350c:	b128      	cbz	r0, 351a <swap_read_status+0x3c>
        return BOOT_EFLASH;
    350e:	2401      	movs	r4, #1
    }

    flash_area_close(fap);

    return rc;
}
    3510:	4620      	mov	r0, r4
    3512:	b002      	add	sp, #8
    3514:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    3516:	2001      	movs	r0, #1
    3518:	e7f5      	b.n	3506 <swap_read_status+0x28>
    rc = swap_read_status_bytes(fap, state, bs);
    351a:	462a      	mov	r2, r5
    351c:	4631      	mov	r1, r6
    351e:	9801      	ldr	r0, [sp, #4]
    3520:	f000 fa12 	bl	3948 <swap_read_status_bytes>
    if (rc == 0) {
    3524:	4604      	mov	r4, r0
    3526:	2800      	cmp	r0, #0
    3528:	d1f2      	bne.n	3510 <swap_read_status+0x32>
        off = boot_swap_info_off(fap);
    352a:	9801      	ldr	r0, [sp, #4]
    352c:	f7ff f9e7 	bl	28fe <boot_swap_info_off>
        rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    3530:	2301      	movs	r3, #1
    3532:	f10d 0203 	add.w	r2, sp, #3
    3536:	4601      	mov	r1, r0
    3538:	9801      	ldr	r0, [sp, #4]
    353a:	f001 fcda 	bl	4ef2 <flash_area_read_is_empty>
        if (rc == 1) {
    353e:	2801      	cmp	r0, #1
    3540:	d006      	beq.n	3550 <swap_read_status+0x72>
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    3542:	f89d 3003 	ldrb.w	r3, [sp, #3]
    3546:	f003 030f 	and.w	r3, r3, #15
    354a:	71eb      	strb	r3, [r5, #7]
    354c:	4604      	mov	r4, r0
    354e:	e7df      	b.n	3510 <swap_read_status+0x32>
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    3550:	2301      	movs	r3, #1
    3552:	f88d 3003 	strb.w	r3, [sp, #3]
            rc = 0;
    3556:	4620      	mov	r0, r4
    3558:	e7f3      	b.n	3542 <swap_read_status+0x64>

0000355a <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    355a:	b500      	push	{lr}
    355c:	b083      	sub	sp, #12
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    355e:	a901      	add	r1, sp, #4
    3560:	2001      	movs	r0, #1
    3562:	f001 fc2b 	bl	4dbc <flash_area_open>
            &fap);
    if (rc != 0) {
    3566:	b118      	cbz	r0, 3570 <swap_set_copy_done+0x16>
        return BOOT_EFLASH;
    3568:	2001      	movs	r0, #1
    }

    rc = boot_write_copy_done(fap);
    flash_area_close(fap);
    return rc;
}
    356a:	b003      	add	sp, #12
    356c:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_write_copy_done(fap);
    3570:	9801      	ldr	r0, [sp, #4]
    3572:	f7ff fa5f 	bl	2a34 <boot_write_copy_done>
    return rc;
    3576:	e7f8      	b.n	356a <swap_set_copy_done+0x10>

00003578 <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    3578:	b500      	push	{lr}
    357a:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    357c:	a903      	add	r1, sp, #12
    357e:	2001      	movs	r0, #1
    3580:	f001 fc1c 	bl	4dbc <flash_area_open>
            &fap);
    if (rc != 0) {
    3584:	b120      	cbz	r0, 3590 <swap_set_image_ok+0x18>
        return BOOT_EFLASH;
    3586:	2301      	movs	r3, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    3588:	4618      	mov	r0, r3
    358a:	b005      	add	sp, #20
    358c:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_read_swap_state(fap, &state);
    3590:	a901      	add	r1, sp, #4
    3592:	9803      	ldr	r0, [sp, #12]
    3594:	f7ff f9b6 	bl	2904 <boot_read_swap_state>
    if (rc != 0) {
    3598:	4603      	mov	r3, r0
    359a:	b940      	cbnz	r0, 35ae <swap_set_image_ok+0x36>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    359c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    35a0:	2a03      	cmp	r2, #3
    35a2:	d1f1      	bne.n	3588 <swap_set_image_ok+0x10>
        rc = boot_write_image_ok(fap);
    35a4:	9803      	ldr	r0, [sp, #12]
    35a6:	f7ff fa4c 	bl	2a42 <boot_write_image_ok>
    35aa:	4603      	mov	r3, r0
    35ac:	e7ec      	b.n	3588 <swap_set_image_ok+0x10>
        rc = BOOT_EFLASH;
    35ae:	2301      	movs	r3, #1
    35b0:	e7ea      	b.n	3588 <swap_set_image_ok+0x10>

000035b2 <boot_copy_sz>:
 *                                  [first-sector, last-sector] range.
 */
static uint32_t
boot_copy_sz(const struct boot_loader_state *state, int last_sector_idx,
             int *out_first_sector_idx)
{
    35b2:	b4f0      	push	{r4, r5, r6, r7}
    35b4:	4606      	mov	r6, r0
#if MCUBOOT_SWAP_USING_SCRATCH
#define BOOT_SCRATCH_AREA(state) ((state)->scratch.area)

static inline size_t boot_scratch_area_size(const struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
    35b6:	6d83      	ldr	r3, [r0, #88]	; 0x58
    35b8:	689f      	ldr	r7, [r3, #8]
    size_t scratch_sz;
    uint32_t new_sz;
    uint32_t sz;
    int i;

    sz = 0;
    35ba:	2000      	movs	r0, #0

    scratch_sz = boot_scratch_area_size(state);
    for (i = last_sector_idx; i >= 0; i--) {
    35bc:	2900      	cmp	r1, #0
    35be:	db0b      	blt.n	35d8 <boot_copy_sz+0x26>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    35c0:	6a73      	ldr	r3, [r6, #36]	; 0x24
    35c2:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    35c6:	00ac      	lsls	r4, r5, #2
    35c8:	4423      	add	r3, r4
    35ca:	689b      	ldr	r3, [r3, #8]
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    35cc:	4403      	add	r3, r0
        /*
         * The secondary slot is not being checked here, because
         * `boot_slots_compatible` already provides assurance that the copy size
         * will be compatible with the primary slot and scratch.
         */
        if (new_sz > scratch_sz) {
    35ce:	429f      	cmp	r7, r3
    35d0:	d302      	bcc.n	35d8 <boot_copy_sz+0x26>
    for (i = last_sector_idx; i >= 0; i--) {
    35d2:	3901      	subs	r1, #1
            break;
        }
        sz = new_sz;
    35d4:	4618      	mov	r0, r3
    35d6:	e7f1      	b.n	35bc <boot_copy_sz+0xa>
    }

    /* i currently refers to a sector that doesn't fit or it is -1 because all
     * sectors have been processed.  In both cases, exclude sector i.
     */
    *out_first_sector_idx = i + 1;
    35d8:	3101      	adds	r1, #1
    35da:	6011      	str	r1, [r2, #0]
    return sz;
}
    35dc:	bcf0      	pop	{r4, r5, r6, r7}
    35de:	4770      	bx	lr

000035e0 <boot_swap_sectors>:
 * @return                      0 on success; nonzero on failure.
 */
static void
boot_swap_sectors(int idx, uint32_t sz, struct boot_loader_state *state,
        struct boot_status *bs)
{
    35e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35e4:	b088      	sub	sp, #32
    35e6:	460f      	mov	r7, r1
    35e8:	4615      	mov	r5, r2
    35ea:	461c      	mov	r4, r3
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    35ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
    35ee:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    35f2:	0083      	lsls	r3, r0, #2
    35f4:	4413      	add	r3, r2
    35f6:	685e      	ldr	r6, [r3, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    35f8:	6853      	ldr	r3, [r2, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    35fa:	1af6      	subs	r6, r6, r3

    /* Calculate offset from start of image area. */
    img_off = boot_img_sector_off(state, BOOT_PRIMARY_SLOT, idx);

    copy_sz = sz;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    35fc:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    35fe:	f7ff f959 	bl	28b4 <boot_trailer_sz>
    return BOOT_IMG(state, slot).num_sectors;
    3602:	6aab      	ldr	r3, [r5, #40]	; 0x28
     * copying it, we need to use scratch to write the trailer temporarily.
     *
     * NOTE: `use_scratch` is a temporary flag (never written to flash) which
     * controls if special handling is needed (swapping last sector).
     */
    last_sector = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT) - 1;
    3604:	3b01      	subs	r3, #1
    if ((img_off + sz) >
    3606:	eb07 0c06 	add.w	ip, r7, r6
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    360a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    360c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    3610:	009a      	lsls	r2, r3, #2
    3612:	440a      	add	r2, r1
    3614:	6853      	ldr	r3, [r2, #4]
           BOOT_IMG(state, slot).sectors[0].fa_off;
    3616:	684a      	ldr	r2, [r1, #4]
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    3618:	1a9b      	subs	r3, r3, r2
    361a:	459c      	cmp	ip, r3
    361c:	d923      	bls.n	3666 <boot_swap_sectors+0x86>
        boot_img_sector_off(state, BOOT_PRIMARY_SLOT, last_sector)) {
        copy_sz -= trailer_sz;
    361e:	eba7 0800 	sub.w	r8, r7, r0
    }

    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    3622:	6823      	ldr	r3, [r4, #0]
    3624:	2b01      	cmp	r3, #1
    3626:	d020      	beq.n	366a <boot_swap_sectors+0x8a>
    3628:	2300      	movs	r3, #0
    362a:	71a3      	strb	r3, [r4, #6]

    image_index = BOOT_CURR_IMG(state);

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    362c:	a907      	add	r1, sp, #28
    362e:	2001      	movs	r0, #1
    3630:	f001 fbc4 	bl	4dbc <flash_area_open>
            &fap_primary_slot);
    assert (rc == 0);
    3634:	b9f8      	cbnz	r0, 3676 <boot_swap_sectors+0x96>

    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3636:	a906      	add	r1, sp, #24
    3638:	2002      	movs	r0, #2
    363a:	f001 fbbf 	bl	4dbc <flash_area_open>
            &fap_secondary_slot);
    assert (rc == 0);
    363e:	bb00      	cbnz	r0, 3682 <boot_swap_sectors+0xa2>

    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    3640:	a905      	add	r1, sp, #20
    3642:	2003      	movs	r0, #3
    3644:	f001 fbba 	bl	4dbc <flash_area_open>
    assert (rc == 0);
    3648:	bb08      	cbnz	r0, 368e <boot_swap_sectors+0xae>

    if (bs->state == BOOT_STATUS_STATE_0) {
    364a:	7923      	ldrb	r3, [r4, #4]
    364c:	2b01      	cmp	r3, #1
    364e:	d024      	beq.n	369a <boot_swap_sectors+0xba>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_1;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_1) {
    3650:	7923      	ldrb	r3, [r4, #4]
    3652:	2b02      	cmp	r3, #2
    3654:	f000 8083 	beq.w	375e <boot_swap_sectors+0x17e>
        rc = boot_write_status(state, bs);
        bs->state = BOOT_STATUS_STATE_2;
        BOOT_STATUS_ASSERT(rc == 0);
    }

    if (bs->state == BOOT_STATUS_STATE_2) {
    3658:	7923      	ldrb	r3, [r4, #4]
    365a:	2b03      	cmp	r3, #3
    365c:	f000 80bb 	beq.w	37d6 <boot_swap_sectors+0x1f6>
    }

    flash_area_close(fap_primary_slot);
    flash_area_close(fap_secondary_slot);
    flash_area_close(fap_scratch);
}
    3660:	b008      	add	sp, #32
    3662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    copy_sz = sz;
    3666:	46b8      	mov	r8, r7
    3668:	e7db      	b.n	3622 <boot_swap_sectors+0x42>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    366a:	45b8      	cmp	r8, r7
    366c:	d001      	beq.n	3672 <boot_swap_sectors+0x92>
    366e:	2301      	movs	r3, #1
    3670:	e7db      	b.n	362a <boot_swap_sectors+0x4a>
    3672:	2300      	movs	r3, #0
    3674:	e7d9      	b.n	362a <boot_swap_sectors+0x4a>
    assert (rc == 0);
    3676:	2300      	movs	r3, #0
    3678:	461a      	mov	r2, r3
    367a:	4619      	mov	r1, r3
    367c:	4618      	mov	r0, r3
    367e:	f7fe f859 	bl	1734 <__assert_func>
    assert (rc == 0);
    3682:	2300      	movs	r3, #0
    3684:	461a      	mov	r2, r3
    3686:	4619      	mov	r1, r3
    3688:	4618      	mov	r0, r3
    368a:	f7fe f853 	bl	1734 <__assert_func>
    assert (rc == 0);
    368e:	2300      	movs	r3, #0
    3690:	461a      	mov	r2, r3
    3692:	4619      	mov	r1, r3
    3694:	4618      	mov	r0, r3
    3696:	f7fe f84d 	bl	1734 <__assert_func>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    369a:	9805      	ldr	r0, [sp, #20]
    369c:	6882      	ldr	r2, [r0, #8]
    369e:	2100      	movs	r1, #0
    36a0:	f7ff fdbe 	bl	3220 <boot_erase_region>
        assert(rc == 0);
    36a4:	b9e0      	cbnz	r0, 36e0 <boot_swap_sectors+0x100>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    36a6:	6823      	ldr	r3, [r4, #0]
    36a8:	2b01      	cmp	r3, #1
    36aa:	d01f      	beq.n	36ec <boot_swap_sectors+0x10c>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
    36ac:	f8cd 8004 	str.w	r8, [sp, #4]
    36b0:	2300      	movs	r3, #0
    36b2:	9300      	str	r3, [sp, #0]
    36b4:	4633      	mov	r3, r6
    36b6:	9a05      	ldr	r2, [sp, #20]
    36b8:	9906      	ldr	r1, [sp, #24]
    36ba:	4628      	mov	r0, r5
    36bc:	f7ff fdb4 	bl	3228 <boot_copy_region>
        assert(rc == 0);
    36c0:	2800      	cmp	r0, #0
    36c2:	d146      	bne.n	3752 <boot_swap_sectors+0x172>
        rc = boot_write_status(state, bs);
    36c4:	4621      	mov	r1, r4
    36c6:	4628      	mov	r0, r5
    36c8:	f7ff fd76 	bl	31b8 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    36cc:	2302      	movs	r3, #2
    36ce:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    36d0:	2800      	cmp	r0, #0
    36d2:	d0bd      	beq.n	3650 <boot_swap_sectors+0x70>
    36d4:	2300      	movs	r3, #0
    36d6:	461a      	mov	r2, r3
    36d8:	4619      	mov	r1, r3
    36da:	4618      	mov	r0, r3
    36dc:	f7fe f82a 	bl	1734 <__assert_func>
        assert(rc == 0);
    36e0:	2300      	movs	r3, #0
    36e2:	461a      	mov	r2, r3
    36e4:	4619      	mov	r1, r3
    36e6:	4618      	mov	r0, r3
    36e8:	f7fe f824 	bl	1734 <__assert_func>
            rc = swap_status_init(state, fap_scratch, bs);
    36ec:	4622      	mov	r2, r4
    36ee:	9905      	ldr	r1, [sp, #20]
    36f0:	4628      	mov	r0, r5
    36f2:	f7ff feaf 	bl	3454 <swap_status_init>
            assert(rc == 0);
    36f6:	b9d0      	cbnz	r0, 372e <boot_swap_sectors+0x14e>
            if (!bs->use_scratch) {
    36f8:	79a3      	ldrb	r3, [r4, #6]
    36fa:	2b00      	cmp	r3, #0
    36fc:	d1d6      	bne.n	36ac <boot_swap_sectors+0xcc>
                rc = swap_erase_trailer_sectors(state, fap_primary_slot);
    36fe:	9907      	ldr	r1, [sp, #28]
    3700:	4628      	mov	r0, r5
    3702:	f7ff fe65 	bl	33d0 <swap_erase_trailer_sectors>
                assert(rc == 0);
    3706:	b9c0      	cbnz	r0, 373a <boot_swap_sectors+0x15a>
                rc = swap_status_init(state, fap_primary_slot, bs);
    3708:	4622      	mov	r2, r4
    370a:	9907      	ldr	r1, [sp, #28]
    370c:	4628      	mov	r0, r5
    370e:	f7ff fea1 	bl	3454 <swap_status_init>
                assert(rc == 0);
    3712:	b9c0      	cbnz	r0, 3746 <boot_swap_sectors+0x166>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    3714:	9805      	ldr	r0, [sp, #20]
    3716:	6882      	ldr	r2, [r0, #8]
    3718:	2100      	movs	r1, #0
    371a:	f7ff fd81 	bl	3220 <boot_erase_region>
                assert(rc == 0);
    371e:	2800      	cmp	r0, #0
    3720:	d0c4      	beq.n	36ac <boot_swap_sectors+0xcc>
    3722:	2300      	movs	r3, #0
    3724:	461a      	mov	r2, r3
    3726:	4619      	mov	r1, r3
    3728:	4618      	mov	r0, r3
    372a:	f7fe f803 	bl	1734 <__assert_func>
            assert(rc == 0);
    372e:	2300      	movs	r3, #0
    3730:	461a      	mov	r2, r3
    3732:	4619      	mov	r1, r3
    3734:	4618      	mov	r0, r3
    3736:	f7fd fffd 	bl	1734 <__assert_func>
                assert(rc == 0);
    373a:	2300      	movs	r3, #0
    373c:	461a      	mov	r2, r3
    373e:	4619      	mov	r1, r3
    3740:	4618      	mov	r0, r3
    3742:	f7fd fff7 	bl	1734 <__assert_func>
                assert(rc == 0);
    3746:	2300      	movs	r3, #0
    3748:	461a      	mov	r2, r3
    374a:	4619      	mov	r1, r3
    374c:	4618      	mov	r0, r3
    374e:	f7fd fff1 	bl	1734 <__assert_func>
        assert(rc == 0);
    3752:	2300      	movs	r3, #0
    3754:	461a      	mov	r2, r3
    3756:	4619      	mov	r1, r3
    3758:	4618      	mov	r0, r3
    375a:	f7fd ffeb 	bl	1734 <__assert_func>
        rc = boot_erase_region(fap_secondary_slot, img_off, sz);
    375e:	463a      	mov	r2, r7
    3760:	4631      	mov	r1, r6
    3762:	9806      	ldr	r0, [sp, #24]
    3764:	f7ff fd5c 	bl	3220 <boot_erase_region>
        assert(rc == 0);
    3768:	b9e8      	cbnz	r0, 37a6 <boot_swap_sectors+0x1c6>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
    376a:	f8cd 8004 	str.w	r8, [sp, #4]
    376e:	9600      	str	r6, [sp, #0]
    3770:	4633      	mov	r3, r6
    3772:	9a06      	ldr	r2, [sp, #24]
    3774:	9907      	ldr	r1, [sp, #28]
    3776:	4628      	mov	r0, r5
    3778:	f7ff fd56 	bl	3228 <boot_copy_region>
        assert(rc == 0);
    377c:	b9c8      	cbnz	r0, 37b2 <boot_swap_sectors+0x1d2>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    377e:	6823      	ldr	r3, [r4, #0]
    3780:	2b01      	cmp	r3, #1
    3782:	d101      	bne.n	3788 <boot_swap_sectors+0x1a8>
    3784:	79a3      	ldrb	r3, [r4, #6]
    3786:	b1d3      	cbz	r3, 37be <boot_swap_sectors+0x1de>
        rc = boot_write_status(state, bs);
    3788:	4621      	mov	r1, r4
    378a:	4628      	mov	r0, r5
    378c:	f7ff fd14 	bl	31b8 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
    3790:	2303      	movs	r3, #3
    3792:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    3794:	2800      	cmp	r0, #0
    3796:	f43f af5f 	beq.w	3658 <boot_swap_sectors+0x78>
    379a:	2300      	movs	r3, #0
    379c:	461a      	mov	r2, r3
    379e:	4619      	mov	r1, r3
    37a0:	4618      	mov	r0, r3
    37a2:	f7fd ffc7 	bl	1734 <__assert_func>
        assert(rc == 0);
    37a6:	2300      	movs	r3, #0
    37a8:	461a      	mov	r2, r3
    37aa:	4619      	mov	r1, r3
    37ac:	4618      	mov	r0, r3
    37ae:	f7fd ffc1 	bl	1734 <__assert_func>
        assert(rc == 0);
    37b2:	2300      	movs	r3, #0
    37b4:	461a      	mov	r2, r3
    37b6:	4619      	mov	r1, r3
    37b8:	4618      	mov	r0, r3
    37ba:	f7fd ffbb 	bl	1734 <__assert_func>
            rc = swap_erase_trailer_sectors(state, fap_secondary_slot);
    37be:	9906      	ldr	r1, [sp, #24]
    37c0:	4628      	mov	r0, r5
    37c2:	f7ff fe05 	bl	33d0 <swap_erase_trailer_sectors>
            assert(rc == 0);
    37c6:	2800      	cmp	r0, #0
    37c8:	d0de      	beq.n	3788 <boot_swap_sectors+0x1a8>
    37ca:	2300      	movs	r3, #0
    37cc:	461a      	mov	r2, r3
    37ce:	4619      	mov	r1, r3
    37d0:	4618      	mov	r0, r3
    37d2:	f7fd ffaf 	bl	1734 <__assert_func>
        rc = boot_erase_region(fap_primary_slot, img_off, sz);
    37d6:	463a      	mov	r2, r7
    37d8:	4631      	mov	r1, r6
    37da:	9807      	ldr	r0, [sp, #28]
    37dc:	f7ff fd20 	bl	3220 <boot_erase_region>
        assert(rc == 0);
    37e0:	2800      	cmp	r0, #0
    37e2:	d15b      	bne.n	389c <boot_swap_sectors+0x2bc>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    37e4:	f8cd 8004 	str.w	r8, [sp, #4]
    37e8:	9600      	str	r6, [sp, #0]
    37ea:	2300      	movs	r3, #0
    37ec:	9a07      	ldr	r2, [sp, #28]
    37ee:	9905      	ldr	r1, [sp, #20]
    37f0:	4628      	mov	r0, r5
    37f2:	f7ff fd19 	bl	3228 <boot_copy_region>
        assert(rc == 0);
    37f6:	2800      	cmp	r0, #0
    37f8:	d156      	bne.n	38a8 <boot_swap_sectors+0x2c8>
        if (bs->use_scratch) {
    37fa:	79a3      	ldrb	r3, [r4, #6]
    37fc:	2b00      	cmp	r3, #0
    37fe:	d02e      	beq.n	385e <boot_swap_sectors+0x27e>
            scratch_trailer_off = boot_status_off(fap_scratch);
    3800:	9805      	ldr	r0, [sp, #20]
    3802:	f7ff f86b 	bl	28dc <boot_status_off>
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    3806:	4446      	add	r6, r8
                        (BOOT_STATUS_STATE_COUNT - 1) * BOOT_WRITE_SZ(state));
    3808:	6eab      	ldr	r3, [r5, #104]	; 0x68
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    380a:	005b      	lsls	r3, r3, #1
    380c:	9301      	str	r3, [sp, #4]
    380e:	9600      	str	r6, [sp, #0]
    3810:	4603      	mov	r3, r0
    3812:	9a07      	ldr	r2, [sp, #28]
    3814:	9905      	ldr	r1, [sp, #20]
    3816:	4628      	mov	r0, r5
    3818:	f7ff fd06 	bl	3228 <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
    381c:	2800      	cmp	r0, #0
    381e:	d149      	bne.n	38b4 <boot_swap_sectors+0x2d4>
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
    3820:	a903      	add	r1, sp, #12
    3822:	2003      	movs	r0, #3
    3824:	f7ff f8ce 	bl	29c4 <boot_read_swap_state_by_id>
            assert(rc == 0);
    3828:	2800      	cmp	r0, #0
    382a:	d149      	bne.n	38c0 <boot_swap_sectors+0x2e0>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    382c:	f89d 300f 	ldrb.w	r3, [sp, #15]
    3830:	2b01      	cmp	r3, #1
    3832:	d04b      	beq.n	38cc <boot_swap_sectors+0x2ec>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    3834:	f89d 100d 	ldrb.w	r1, [sp, #13]
    3838:	2901      	cmp	r1, #1
    383a:	d005      	beq.n	3848 <boot_swap_sectors+0x268>
                rc = boot_write_swap_info(fap_primary_slot,
    383c:	2200      	movs	r2, #0
    383e:	9807      	ldr	r0, [sp, #28]
    3840:	f7ff f906 	bl	2a50 <boot_write_swap_info>
                assert(rc == 0);
    3844:	2800      	cmp	r0, #0
    3846:	d14c      	bne.n	38e2 <boot_swap_sectors+0x302>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    3848:	68a1      	ldr	r1, [r4, #8]
    384a:	9807      	ldr	r0, [sp, #28]
    384c:	f7ff f922 	bl	2a94 <boot_write_swap_size>
            assert(rc == 0);
    3850:	2800      	cmp	r0, #0
    3852:	d14c      	bne.n	38ee <boot_swap_sectors+0x30e>
            rc = boot_write_magic(fap_primary_slot);
    3854:	9807      	ldr	r0, [sp, #28]
    3856:	f7ff f8dd 	bl	2a14 <boot_write_magic>
            assert(rc == 0);
    385a:	2800      	cmp	r0, #0
    385c:	d14d      	bne.n	38fa <boot_swap_sectors+0x31a>
        erase_scratch = bs->use_scratch;
    385e:	79a6      	ldrb	r6, [r4, #6]
        bs->use_scratch = 0;
    3860:	2300      	movs	r3, #0
    3862:	71a3      	strb	r3, [r4, #6]
        rc = boot_write_status(state, bs);
    3864:	4621      	mov	r1, r4
    3866:	4628      	mov	r0, r5
    3868:	f7ff fca6 	bl	31b8 <boot_write_status>
        bs->idx++;
    386c:	6823      	ldr	r3, [r4, #0]
    386e:	3301      	adds	r3, #1
    3870:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    3872:	2301      	movs	r3, #1
    3874:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    3876:	2800      	cmp	r0, #0
    3878:	d145      	bne.n	3906 <boot_swap_sectors+0x326>
        if (erase_scratch) {
    387a:	2e00      	cmp	r6, #0
    387c:	f43f aef0 	beq.w	3660 <boot_swap_sectors+0x80>
            rc = boot_erase_region(fap_scratch, 0, sz);
    3880:	463a      	mov	r2, r7
    3882:	2100      	movs	r1, #0
    3884:	9805      	ldr	r0, [sp, #20]
    3886:	f7ff fccb 	bl	3220 <boot_erase_region>
            assert(rc == 0);
    388a:	2800      	cmp	r0, #0
    388c:	f43f aee8 	beq.w	3660 <boot_swap_sectors+0x80>
    3890:	2300      	movs	r3, #0
    3892:	461a      	mov	r2, r3
    3894:	4619      	mov	r1, r3
    3896:	4618      	mov	r0, r3
    3898:	f7fd ff4c 	bl	1734 <__assert_func>
        assert(rc == 0);
    389c:	2300      	movs	r3, #0
    389e:	461a      	mov	r2, r3
    38a0:	4619      	mov	r1, r3
    38a2:	4618      	mov	r0, r3
    38a4:	f7fd ff46 	bl	1734 <__assert_func>
        assert(rc == 0);
    38a8:	2300      	movs	r3, #0
    38aa:	461a      	mov	r2, r3
    38ac:	4619      	mov	r1, r3
    38ae:	4618      	mov	r0, r3
    38b0:	f7fd ff40 	bl	1734 <__assert_func>
            BOOT_STATUS_ASSERT(rc == 0);
    38b4:	2300      	movs	r3, #0
    38b6:	461a      	mov	r2, r3
    38b8:	4619      	mov	r1, r3
    38ba:	4618      	mov	r0, r3
    38bc:	f7fd ff3a 	bl	1734 <__assert_func>
            assert(rc == 0);
    38c0:	2300      	movs	r3, #0
    38c2:	461a      	mov	r2, r3
    38c4:	4619      	mov	r1, r3
    38c6:	4618      	mov	r0, r3
    38c8:	f7fd ff34 	bl	1734 <__assert_func>
                rc = boot_write_image_ok(fap_primary_slot);
    38cc:	9807      	ldr	r0, [sp, #28]
    38ce:	f7ff f8b8 	bl	2a42 <boot_write_image_ok>
                assert(rc == 0);
    38d2:	2800      	cmp	r0, #0
    38d4:	d0ae      	beq.n	3834 <boot_swap_sectors+0x254>
    38d6:	2300      	movs	r3, #0
    38d8:	461a      	mov	r2, r3
    38da:	4619      	mov	r1, r3
    38dc:	4618      	mov	r0, r3
    38de:	f7fd ff29 	bl	1734 <__assert_func>
                assert(rc == 0);
    38e2:	2300      	movs	r3, #0
    38e4:	461a      	mov	r2, r3
    38e6:	4619      	mov	r1, r3
    38e8:	4618      	mov	r0, r3
    38ea:	f7fd ff23 	bl	1734 <__assert_func>
            assert(rc == 0);
    38ee:	2300      	movs	r3, #0
    38f0:	461a      	mov	r2, r3
    38f2:	4619      	mov	r1, r3
    38f4:	4618      	mov	r0, r3
    38f6:	f7fd ff1d 	bl	1734 <__assert_func>
            assert(rc == 0);
    38fa:	2300      	movs	r3, #0
    38fc:	461a      	mov	r2, r3
    38fe:	4619      	mov	r1, r3
    3900:	4618      	mov	r0, r3
    3902:	f7fd ff17 	bl	1734 <__assert_func>
        BOOT_STATUS_ASSERT(rc == 0);
    3906:	2300      	movs	r3, #0
    3908:	461a      	mov	r2, r3
    390a:	4619      	mov	r1, r3
    390c:	4618      	mov	r0, r3
    390e:	f7fd ff11 	bl	1734 <__assert_func>

00003912 <boot_read_image_header>:
{
    3912:	b510      	push	{r4, lr}
    3914:	b082      	sub	sp, #8
    3916:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    3918:	2000      	movs	r0, #0
    391a:	f000 fb3b 	bl	3f94 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    391e:	a901      	add	r1, sp, #4
    3920:	b2c0      	uxtb	r0, r0
    3922:	f001 fa4b 	bl	4dbc <flash_area_open>
    if (rc != 0) {
    3926:	b118      	cbz	r0, 3930 <boot_read_image_header+0x1e>
        rc = BOOT_EFLASH;
    3928:	2301      	movs	r3, #1
}
    392a:	4618      	mov	r0, r3
    392c:	b002      	add	sp, #8
    392e:	bd10      	pop	{r4, pc}
    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    3930:	2320      	movs	r3, #32
    3932:	4622      	mov	r2, r4
    3934:	2100      	movs	r1, #0
    3936:	9801      	ldr	r0, [sp, #4]
    3938:	f001 fa98 	bl	4e6c <flash_area_read>
    if (rc != 0) {
    393c:	4603      	mov	r3, r0
    393e:	2800      	cmp	r0, #0
    3940:	d0f3      	beq.n	392a <boot_read_image_header+0x18>
        rc = BOOT_EFLASH;
    3942:	2301      	movs	r3, #1
    3944:	e7f1      	b.n	392a <boot_read_image_header+0x18>
	...

00003948 <swap_read_status_bytes>:
{
    3948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    394c:	b083      	sub	sp, #12
    394e:	4606      	mov	r6, r0
    3950:	4689      	mov	r9, r1
    3952:	4693      	mov	fp, r2
    off = boot_status_off(fap);
    3954:	f7fe ffc2 	bl	28dc <boot_status_off>
    3958:	4680      	mov	r8, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    395a:	4631      	mov	r1, r6
    395c:	2000      	movs	r0, #0
    395e:	f7fe ffae 	bl	28be <boot_status_entries>
    if (max_entries < 0) {
    3962:	1e07      	subs	r7, r0, #0
    3964:	db42      	blt.n	39ec <swap_read_status_bytes+0xa4>
    for (i = 0; i < max_entries; i++) {
    3966:	2400      	movs	r4, #0
    found_idx = 0;
    3968:	46a2      	mov	sl, r4
    found = 0;
    396a:	4625      	mov	r5, r4
    396c:	e007      	b.n	397e <swap_read_status_bytes+0x36>
            if (found && !found_idx) {
    396e:	b12d      	cbz	r5, 397c <swap_read_status_bytes+0x34>
    3970:	f1ba 0f00 	cmp.w	sl, #0
    3974:	d102      	bne.n	397c <swap_read_status_bytes+0x34>
                found_idx = i;
    3976:	46a2      	mov	sl, r4
    3978:	e000      	b.n	397c <swap_read_status_bytes+0x34>
            found = 1;
    397a:	2501      	movs	r5, #1
    for (i = 0; i < max_entries; i++) {
    397c:	3401      	adds	r4, #1
    397e:	42bc      	cmp	r4, r7
    3980:	da14      	bge.n	39ac <swap_read_status_bytes+0x64>
        rc = flash_area_read_is_empty(fap, off + i * BOOT_WRITE_SZ(state),
    3982:	f8d9 1068 	ldr.w	r1, [r9, #104]	; 0x68
    3986:	2301      	movs	r3, #1
    3988:	f10d 0207 	add.w	r2, sp, #7
    398c:	fb01 8104 	mla	r1, r1, r4, r8
    3990:	4630      	mov	r0, r6
    3992:	f001 faae 	bl	4ef2 <flash_area_read_is_empty>
        if (rc < 0) {
    3996:	2800      	cmp	r0, #0
    3998:	db2a      	blt.n	39f0 <swap_read_status_bytes+0xa8>
        if (rc == 1) {
    399a:	2801      	cmp	r0, #1
    399c:	d0e7      	beq.n	396e <swap_read_status_bytes+0x26>
        } else if (!found) {
    399e:	2d00      	cmp	r5, #0
    39a0:	d0eb      	beq.n	397a <swap_read_status_bytes+0x32>
        } else if (found_idx) {
    39a2:	f1ba 0f00 	cmp.w	sl, #0
    39a6:	d0e9      	beq.n	397c <swap_read_status_bytes+0x34>
            invalid = 1;
    39a8:	4629      	mov	r1, r5
    39aa:	e000      	b.n	39ae <swap_read_status_bytes+0x66>
    invalid = 0;
    39ac:	2100      	movs	r1, #0
    if (invalid) {
    39ae:	b9a1      	cbnz	r1, 39da <swap_read_status_bytes+0x92>
    if (found) {
    39b0:	b1fd      	cbz	r5, 39f2 <swap_read_status_bytes+0xaa>
        if (!found_idx) {
    39b2:	f1ba 0f00 	cmp.w	sl, #0
    39b6:	d000      	beq.n	39ba <swap_read_status_bytes+0x72>
    39b8:	4654      	mov	r4, sl
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    39ba:	4b10      	ldr	r3, [pc, #64]	; (39fc <swap_read_status_bytes+0xb4>)
    39bc:	fb83 2304 	smull	r2, r3, r3, r4
    39c0:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
    39c4:	1c5a      	adds	r2, r3, #1
    39c6:	f8cb 2000 	str.w	r2, [fp]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    39ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    39ce:	1ae2      	subs	r2, r4, r3
    39d0:	1c53      	adds	r3, r2, #1
    39d2:	f88b 3004 	strb.w	r3, [fp, #4]
    return 0;
    39d6:	460d      	mov	r5, r1
    39d8:	e00b      	b.n	39f2 <swap_read_status_bytes+0xaa>
        BOOT_LOG_ERR("Detected inconsistent status!");
    39da:	4809      	ldr	r0, [pc, #36]	; (3a00 <swap_read_status_bytes+0xb8>)
    39dc:	f000 fe10 	bl	4600 <puts>
        assert(0);
    39e0:	2300      	movs	r3, #0
    39e2:	461a      	mov	r2, r3
    39e4:	4619      	mov	r1, r3
    39e6:	4618      	mov	r0, r3
    39e8:	f7fd fea4 	bl	1734 <__assert_func>
        return BOOT_EBADARGS;
    39ec:	2507      	movs	r5, #7
    39ee:	e000      	b.n	39f2 <swap_read_status_bytes+0xaa>
            return BOOT_EFLASH;
    39f0:	2501      	movs	r5, #1
}
    39f2:	4628      	mov	r0, r5
    39f4:	b003      	add	sp, #12
    39f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39fa:	bf00      	nop
    39fc:	55555556 	.word	0x55555556
    3a00:	00005ae8 	.word	0x00005ae8

00003a04 <boot_status_internal_off>:
{
    3a04:	b410      	push	{r4}
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    3a06:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    3a0a:	6803      	ldr	r3, [r0, #0]
    3a0c:	3b01      	subs	r3, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    3a0e:	7902      	ldrb	r2, [r0, #4]
    3a10:	3a01      	subs	r2, #1
    3a12:	fb01 f102 	mul.w	r1, r1, r2
}
    3a16:	fb03 1004 	mla	r0, r3, r4, r1
    3a1a:	bc10      	pop	{r4}
    3a1c:	4770      	bx	lr
	...

00003a20 <boot_slots_compatible>:
{
    3a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return BOOT_IMG(state, slot).num_sectors;
    3a24:	6a87      	ldr	r7, [r0, #40]	; 0x28
    3a26:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    3a2a:	2f80      	cmp	r7, #128	; 0x80
    3a2c:	d80d      	bhi.n	3a4a <boot_slots_compatible+0x2a>
    3a2e:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
    3a32:	d80a      	bhi.n	3a4a <boot_slots_compatible+0x2a>
    3a34:	6d83      	ldr	r3, [r0, #88]	; 0x58
    3a36:	f8d3 8008 	ldr.w	r8, [r3, #8]
    smaller = 0;
    3a3a:	2500      	movs	r5, #0
    j = sz1 = secondary_slot_sz = 0;
    3a3c:	462c      	mov	r4, r5
    i = sz0 = primary_slot_sz = 0;
    3a3e:	4629      	mov	r1, r5
    j = sz1 = secondary_slot_sz = 0;
    3a40:	46a9      	mov	r9, r5
    i = sz0 = primary_slot_sz = 0;
    3a42:	46ae      	mov	lr, r5
    j = sz1 = secondary_slot_sz = 0;
    3a44:	462a      	mov	r2, r5
    i = sz0 = primary_slot_sz = 0;
    3a46:	462b      	mov	r3, r5
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    3a48:	e019      	b.n	3a7e <boot_slots_compatible+0x5e>
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
    3a4a:	4831      	ldr	r0, [pc, #196]	; (3b10 <boot_slots_compatible+0xf0>)
    3a4c:	f000 fdd8 	bl	4600 <puts>
        return 0;
    3a50:	2000      	movs	r0, #0
}
    3a52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    3a56:	6a46      	ldr	r6, [r0, #36]	; 0x24
    3a58:	eb01 0b41 	add.w	fp, r1, r1, lsl #1
    3a5c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    3a60:	4456      	add	r6, sl
    3a62:	68b6      	ldr	r6, [r6, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    3a64:	4433      	add	r3, r6
    3a66:	6d06      	ldr	r6, [r0, #80]	; 0x50
    3a68:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
    3a6c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    3a70:	4456      	add	r6, sl
    3a72:	68b6      	ldr	r6, [r6, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    3a74:	4432      	add	r2, r6
            i++;
    3a76:	3101      	adds	r1, #1
            j++;
    3a78:	3401      	adds	r4, #1
        if (sz0 == sz1) {
    3a7a:	4293      	cmp	r3, r2
    3a7c:	d02b      	beq.n	3ad6 <boot_slots_compatible+0xb6>
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    3a7e:	42b9      	cmp	r1, r7
    3a80:	d301      	bcc.n	3a86 <boot_slots_compatible+0x66>
    3a82:	4564      	cmp	r4, ip
    3a84:	d236      	bcs.n	3af4 <boot_slots_compatible+0xd4>
        if (sz0 == sz1) {
    3a86:	4293      	cmp	r3, r2
    3a88:	d0e5      	beq.n	3a56 <boot_slots_compatible+0x36>
        } else if (sz0 < sz1) {
    3a8a:	4293      	cmp	r3, r2
    3a8c:	d211      	bcs.n	3ab2 <boot_slots_compatible+0x92>
    3a8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
    3a90:	eb01 0b41 	add.w	fp, r1, r1, lsl #1
    3a94:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    3a98:	4456      	add	r6, sl
    3a9a:	68b6      	ldr	r6, [r6, #8]
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    3a9c:	4433      	add	r3, r6
            if (smaller == 2) {
    3a9e:	2d02      	cmp	r5, #2
    3aa0:	d002      	beq.n	3aa8 <boot_slots_compatible+0x88>
            i++;
    3aa2:	3101      	adds	r1, #1
            smaller = 1;
    3aa4:	2501      	movs	r5, #1
    3aa6:	e7e8      	b.n	3a7a <boot_slots_compatible+0x5a>
                BOOT_LOG_WRN("Cannot upgrade: slots have non-compatible sectors");
    3aa8:	481a      	ldr	r0, [pc, #104]	; (3b14 <boot_slots_compatible+0xf4>)
    3aaa:	f000 fda9 	bl	4600 <puts>
                return 0;
    3aae:	2000      	movs	r0, #0
    3ab0:	e7cf      	b.n	3a52 <boot_slots_compatible+0x32>
    3ab2:	6d06      	ldr	r6, [r0, #80]	; 0x50
    3ab4:	eb04 0b44 	add.w	fp, r4, r4, lsl #1
    3ab8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
    3abc:	4456      	add	r6, sl
    3abe:	68b6      	ldr	r6, [r6, #8]
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    3ac0:	4432      	add	r2, r6
            if (smaller == 1) {
    3ac2:	2d01      	cmp	r5, #1
    3ac4:	d002      	beq.n	3acc <boot_slots_compatible+0xac>
            j++;
    3ac6:	3401      	adds	r4, #1
            smaller = 2;
    3ac8:	2502      	movs	r5, #2
    3aca:	e7d6      	b.n	3a7a <boot_slots_compatible+0x5a>
                BOOT_LOG_WRN("Cannot upgrade: slots have non-compatible sectors");
    3acc:	4811      	ldr	r0, [pc, #68]	; (3b14 <boot_slots_compatible+0xf4>)
    3ace:	f000 fd97 	bl	4600 <puts>
                return 0;
    3ad2:	2000      	movs	r0, #0
    3ad4:	e7bd      	b.n	3a52 <boot_slots_compatible+0x32>
            primary_slot_sz += sz0;
    3ad6:	449e      	add	lr, r3
            secondary_slot_sz += sz1;
    3ad8:	4491      	add	r9, r2
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    3ada:	4543      	cmp	r3, r8
    3adc:	d805      	bhi.n	3aea <boot_slots_compatible+0xca>
    3ade:	4542      	cmp	r2, r8
    3ae0:	d803      	bhi.n	3aea <boot_slots_compatible+0xca>
            smaller = sz0 = sz1 = 0;
    3ae2:	2500      	movs	r5, #0
    3ae4:	462a      	mov	r2, r5
    3ae6:	462b      	mov	r3, r5
    3ae8:	e7c9      	b.n	3a7e <boot_slots_compatible+0x5e>
                BOOT_LOG_WRN("Cannot upgrade: not all sectors fit inside scratch");
    3aea:	480b      	ldr	r0, [pc, #44]	; (3b18 <boot_slots_compatible+0xf8>)
    3aec:	f000 fd88 	bl	4600 <puts>
                return 0;
    3af0:	2000      	movs	r0, #0
    3af2:	e7ae      	b.n	3a52 <boot_slots_compatible+0x32>
    if ((i != num_sectors_primary) ||
    3af4:	42b9      	cmp	r1, r7
    3af6:	d101      	bne.n	3afc <boot_slots_compatible+0xdc>
    3af8:	4564      	cmp	r4, ip
    3afa:	d004      	beq.n	3b06 <boot_slots_compatible+0xe6>
        BOOT_LOG_WRN("Cannot upgrade: slots are not compatible");
    3afc:	4807      	ldr	r0, [pc, #28]	; (3b1c <boot_slots_compatible+0xfc>)
    3afe:	f000 fd7f 	bl	4600 <puts>
        return 0;
    3b02:	2000      	movs	r0, #0
    3b04:	e7a5      	b.n	3a52 <boot_slots_compatible+0x32>
        (j != num_sectors_secondary) ||
    3b06:	45ce      	cmp	lr, r9
    3b08:	d1f8      	bne.n	3afc <boot_slots_compatible+0xdc>
    return 1;
    3b0a:	2001      	movs	r0, #1
    3b0c:	e7a1      	b.n	3a52 <boot_slots_compatible+0x32>
    3b0e:	bf00      	nop
    3b10:	00005a04 	.word	0x00005a04
    3b14:	00005a34 	.word	0x00005a34
    3b18:	00005a6c 	.word	0x00005a6c
    3b1c:	00005aa8 	.word	0x00005aa8

00003b20 <swap_status_source>:
{
    3b20:	b530      	push	{r4, r5, lr}
    3b22:	b087      	sub	sp, #28
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    3b24:	a902      	add	r1, sp, #8
    3b26:	2001      	movs	r0, #1
    3b28:	f7fe ff4c 	bl	29c4 <boot_read_swap_state_by_id>
    assert(rc == 0);
    3b2c:	bb68      	cbnz	r0, 3b8a <swap_status_source+0x6a>
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
    3b2e:	a904      	add	r1, sp, #16
    3b30:	2003      	movs	r0, #3
    3b32:	f7fe ff47 	bl	29c4 <boot_read_swap_state_by_id>
    assert(rc == 0);
    3b36:	4605      	mov	r5, r0
    3b38:	bb68      	cbnz	r0, 3b96 <swap_status_source+0x76>
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    3b3a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    3b3e:	2b01      	cmp	r3, #1
    3b40:	d031      	beq.n	3ba6 <swap_status_source+0x86>
    3b42:	2b03      	cmp	r3, #3
    3b44:	d02d      	beq.n	3ba2 <swap_status_source+0x82>
    3b46:	4a38      	ldr	r2, [pc, #224]	; (3c28 <swap_status_source+0x108>)
    3b48:	f89d 3009 	ldrb.w	r3, [sp, #9]
    3b4c:	f89d 100a 	ldrb.w	r1, [sp, #10]
    3b50:	f89d 000b 	ldrb.w	r0, [sp, #11]
    3b54:	9001      	str	r0, [sp, #4]
    3b56:	9100      	str	r1, [sp, #0]
    3b58:	4934      	ldr	r1, [pc, #208]	; (3c2c <swap_status_source+0x10c>)
    3b5a:	4835      	ldr	r0, [pc, #212]	; (3c30 <swap_status_source+0x110>)
    3b5c:	f001 f852 	bl	4c04 <printf>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
    3b60:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3b64:	2b01      	cmp	r3, #1
    3b66:	d022      	beq.n	3bae <swap_status_source+0x8e>
    3b68:	2b03      	cmp	r3, #3
    3b6a:	d01e      	beq.n	3baa <swap_status_source+0x8a>
    3b6c:	4a2e      	ldr	r2, [pc, #184]	; (3c28 <swap_status_source+0x108>)
    3b6e:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3b72:	f89d 1012 	ldrb.w	r1, [sp, #18]
    3b76:	f89d 0013 	ldrb.w	r0, [sp, #19]
    3b7a:	9001      	str	r0, [sp, #4]
    3b7c:	9100      	str	r1, [sp, #0]
    3b7e:	492d      	ldr	r1, [pc, #180]	; (3c34 <swap_status_source+0x114>)
    3b80:	482b      	ldr	r0, [pc, #172]	; (3c30 <swap_status_source+0x110>)
    3b82:	f001 f83f 	bl	4c04 <printf>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    3b86:	2400      	movs	r4, #0
    3b88:	e01d      	b.n	3bc6 <swap_status_source+0xa6>
    assert(rc == 0);
    3b8a:	2300      	movs	r3, #0
    3b8c:	461a      	mov	r2, r3
    3b8e:	4619      	mov	r1, r3
    3b90:	4618      	mov	r0, r3
    3b92:	f7fd fdcf 	bl	1734 <__assert_func>
    assert(rc == 0);
    3b96:	2300      	movs	r3, #0
    3b98:	461a      	mov	r2, r3
    3b9a:	4619      	mov	r1, r3
    3b9c:	4618      	mov	r0, r3
    3b9e:	f7fd fdc9 	bl	1734 <__assert_func>
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    3ba2:	4a25      	ldr	r2, [pc, #148]	; (3c38 <swap_status_source+0x118>)
    3ba4:	e7d0      	b.n	3b48 <swap_status_source+0x28>
    3ba6:	4a25      	ldr	r2, [pc, #148]	; (3c3c <swap_status_source+0x11c>)
    3ba8:	e7ce      	b.n	3b48 <swap_status_source+0x28>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
    3baa:	4a23      	ldr	r2, [pc, #140]	; (3c38 <swap_status_source+0x118>)
    3bac:	e7df      	b.n	3b6e <swap_status_source+0x4e>
    3bae:	4a23      	ldr	r2, [pc, #140]	; (3c3c <swap_status_source+0x11c>)
    3bb0:	e7dd      	b.n	3b6e <swap_status_source+0x4e>
            BOOT_LOG_INF("Boot source: %s",
    3bb2:	4923      	ldr	r1, [pc, #140]	; (3c40 <swap_status_source+0x120>)
    3bb4:	e000      	b.n	3bb8 <swap_status_source+0x98>
    3bb6:	4923      	ldr	r1, [pc, #140]	; (3c44 <swap_status_source+0x124>)
    3bb8:	4823      	ldr	r0, [pc, #140]	; (3c48 <swap_status_source+0x128>)
    3bba:	f001 f823 	bl	4c04 <printf>
            return source;
    3bbe:	e030      	b.n	3c22 <swap_status_source+0x102>
            BOOT_LOG_INF("Boot source: %s",
    3bc0:	4922      	ldr	r1, [pc, #136]	; (3c4c <swap_status_source+0x12c>)
    3bc2:	e7f9      	b.n	3bb8 <swap_status_source+0x98>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    3bc4:	3401      	adds	r4, #1
    3bc6:	2c03      	cmp	r4, #3
    3bc8:	d828      	bhi.n	3c1c <swap_status_source+0xfc>
        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    3bca:	f89d 1008 	ldrb.w	r1, [sp, #8]
    3bce:	4b20      	ldr	r3, [pc, #128]	; (3c50 <swap_status_source+0x130>)
    3bd0:	f813 0024 	ldrb.w	r0, [r3, r4, lsl #2]
    3bd4:	f7fe fe5a 	bl	288c <boot_magic_compatible_check>
    3bd8:	2800      	cmp	r0, #0
    3bda:	d0f3      	beq.n	3bc4 <swap_status_source+0xa4>
            boot_magic_compatible_check(table->bst_magic_scratch,
    3bdc:	4b1c      	ldr	r3, [pc, #112]	; (3c50 <swap_status_source+0x130>)
    3bde:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3be2:	f89d 1010 	ldrb.w	r1, [sp, #16]
    3be6:	7858      	ldrb	r0, [r3, #1]
    3be8:	f7fe fe50 	bl	288c <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
    3bec:	2800      	cmp	r0, #0
    3bee:	d0e9      	beq.n	3bc4 <swap_status_source+0xa4>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    3bf0:	4b17      	ldr	r3, [pc, #92]	; (3c50 <swap_status_source+0x130>)
    3bf2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    3bf6:	789b      	ldrb	r3, [r3, #2]
                          state_scratch.magic) &&
    3bf8:	2b04      	cmp	r3, #4
    3bfa:	d003      	beq.n	3c04 <swap_status_source+0xe4>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
    3bfc:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    3c00:	4293      	cmp	r3, r2
    3c02:	d1df      	bne.n	3bc4 <swap_status_source+0xa4>
            source = table->bst_status_source;
    3c04:	4b12      	ldr	r3, [pc, #72]	; (3c50 <swap_status_source+0x130>)
    3c06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    3c0a:	78e5      	ldrb	r5, [r4, #3]
            BOOT_LOG_INF("Boot source: %s",
    3c0c:	2d00      	cmp	r5, #0
    3c0e:	d0d2      	beq.n	3bb6 <swap_status_source+0x96>
    3c10:	2d01      	cmp	r5, #1
    3c12:	d0d5      	beq.n	3bc0 <swap_status_source+0xa0>
    3c14:	2d02      	cmp	r5, #2
    3c16:	d0cc      	beq.n	3bb2 <swap_status_source+0x92>
    3c18:	490e      	ldr	r1, [pc, #56]	; (3c54 <swap_status_source+0x134>)
    3c1a:	e7cd      	b.n	3bb8 <swap_status_source+0x98>
    BOOT_LOG_INF("Boot source: none");
    3c1c:	480e      	ldr	r0, [pc, #56]	; (3c58 <swap_status_source+0x138>)
    3c1e:	f000 fcef 	bl	4600 <puts>
}
    3c22:	4628      	mov	r0, r5
    3c24:	b007      	add	sp, #28
    3c26:	bd30      	pop	{r4, r5, pc}
    3c28:	00005b0c 	.word	0x00005b0c
    3c2c:	00005b40 	.word	0x00005b40
    3c30:	00005b50 	.word	0x00005b50
    3c34:	00005b94 	.word	0x00005b94
    3c38:	00005b18 	.word	0x00005b18
    3c3c:	00005b10 	.word	0x00005b10
    3c40:	00005b30 	.word	0x00005b30
    3c44:	00005b28 	.word	0x00005b28
    3c48:	00005b9c 	.word	0x00005b9c
    3c4c:	00005b20 	.word	0x00005b20
    3c50:	00005ad8 	.word	0x00005ad8
    3c54:	000058a0 	.word	0x000058a0
    3c58:	00005bb4 	.word	0x00005bb4

00003c5c <swap_run>:

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    3c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c5e:	b083      	sub	sp, #12
    3c60:	4605      	mov	r5, r0
    3c62:	460e      	mov	r6, r1
    uint32_t swap_idx;
    int last_idx_secondary_slot;
    uint32_t primary_slot_size;
    uint32_t secondary_slot_size;
    primary_slot_size = 0;
    secondary_slot_size = 0;
    3c64:	2000      	movs	r0, #0
    primary_slot_size = 0;
    3c66:	4603      	mov	r3, r0
    last_sector_idx = 0;
    3c68:	4601      	mov	r1, r0
    3c6a:	e000      	b.n	3c6e <swap_run+0x12>
        if (primary_slot_size >= copy_size &&
                secondary_slot_size >= copy_size &&
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    3c6c:	3101      	adds	r1, #1
        if ((primary_slot_size < copy_size) ||
    3c6e:	4293      	cmp	r3, r2
    3c70:	d301      	bcc.n	3c76 <swap_run+0x1a>
    3c72:	4283      	cmp	r3, r0
    3c74:	d207      	bcs.n	3c86 <swap_run+0x2a>
    3c76:	6a6c      	ldr	r4, [r5, #36]	; 0x24
    3c78:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    3c7c:	ea4f 078c 	mov.w	r7, ip, lsl #2
    3c80:	443c      	add	r4, r7
    3c82:	68a4      	ldr	r4, [r4, #8]
           primary_slot_size += boot_img_sector_size(state,
    3c84:	4423      	add	r3, r4
        if ((secondary_slot_size < copy_size) ||
    3c86:	4290      	cmp	r0, r2
    3c88:	d301      	bcc.n	3c8e <swap_run+0x32>
    3c8a:	4283      	cmp	r3, r0
    3c8c:	d907      	bls.n	3c9e <swap_run+0x42>
    3c8e:	6d2c      	ldr	r4, [r5, #80]	; 0x50
    3c90:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    3c94:	ea4f 078c 	mov.w	r7, ip, lsl #2
    3c98:	443c      	add	r4, r7
    3c9a:	68a4      	ldr	r4, [r4, #8]
           secondary_slot_size += boot_img_sector_size(state,
    3c9c:	4420      	add	r0, r4
        if (primary_slot_size >= copy_size &&
    3c9e:	4293      	cmp	r3, r2
    3ca0:	d3e4      	bcc.n	3c6c <swap_run+0x10>
    3ca2:	4290      	cmp	r0, r2
    3ca4:	d3e2      	bcc.n	3c6c <swap_run+0x10>
                secondary_slot_size >= copy_size &&
    3ca6:	4283      	cmp	r3, r0
    3ca8:	d1e0      	bne.n	3c6c <swap_run+0x10>
        last_idx_secondary_slot++;
    }

    swap_idx = 0;
    3caa:	2400      	movs	r4, #0
    3cac:	e002      	b.n	3cb4 <swap_run+0x58>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
    3cae:	9901      	ldr	r1, [sp, #4]
    3cb0:	3901      	subs	r1, #1
        swap_idx++;
    3cb2:	3401      	adds	r4, #1
    while (last_sector_idx >= 0) {
    3cb4:	2900      	cmp	r1, #0
    3cb6:	db0e      	blt.n	3cd6 <swap_run+0x7a>
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
    3cb8:	aa01      	add	r2, sp, #4
    3cba:	4628      	mov	r0, r5
    3cbc:	f7ff fc79 	bl	35b2 <boot_copy_sz>
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    3cc0:	6833      	ldr	r3, [r6, #0]
    3cc2:	3b01      	subs	r3, #1
    3cc4:	42a3      	cmp	r3, r4
    3cc6:	d8f2      	bhi.n	3cae <swap_run+0x52>
            boot_swap_sectors(first_sector_idx, sz, state, bs);
    3cc8:	4633      	mov	r3, r6
    3cca:	462a      	mov	r2, r5
    3ccc:	4601      	mov	r1, r0
    3cce:	9801      	ldr	r0, [sp, #4]
    3cd0:	f7ff fc86 	bl	35e0 <boot_swap_sectors>
    3cd4:	e7eb      	b.n	3cae <swap_run+0x52>
    }

}
    3cd6:	b003      	add	sp, #12
    3cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}

00003cda <bootutil_img_hash>:
static int
bootutil_img_hash(struct enc_key_data *enc_state, int image_index,
                  struct image_header *hdr, const struct flash_area *fap,
                  uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *hash_result,
                  uint8_t *seed, int seed_len)
{
    3cda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3cde:	b09d      	sub	sp, #116	; 0x74
    3ce0:	4615      	mov	r5, r2
    3ce2:	4699      	mov	r9, r3
    3ce4:	9f24      	ldr	r7, [sp, #144]	; 0x90
    3ce6:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
    3cea:	9c27      	ldr	r4, [sp, #156]	; 0x9c
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    3cec:	a801      	add	r0, sp, #4
    3cee:	f000 f95a 	bl	3fa6 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    3cf2:	2100      	movs	r1, #0
    3cf4:	a801      	add	r0, sp, #4
    3cf6:	f000 f95d 	bl	3fb4 <mbedtls_sha256_starts_ret>

    bootutil_sha256_init(&sha256_ctx);

    /* in some cases (split image) the hash is seeded with data from
     * the loader image */
    if (seed && (seed_len > 0)) {
    3cfa:	b114      	cbz	r4, 3d02 <bootutil_img_hash+0x28>
    3cfc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
    3cfe:	2b00      	cmp	r3, #0
    3d00:	dc06      	bgt.n	3d10 <bootutil_img_hash+0x36>
        bootutil_sha256_update(&sha256_ctx, seed, seed_len);
    }

    /* Hash is computed over image header and image itself. */
    size = hdr_size = hdr->ih_hdr_size;
    3d02:	892b      	ldrh	r3, [r5, #8]
    size += hdr->ih_img_size;
    3d04:	68ee      	ldr	r6, [r5, #12]
    3d06:	4433      	add	r3, r6
    tlv_off = size;

    /* If protected TLVs are present they are also hashed. */
    size += hdr->ih_protect_tlv_size;
    3d08:	896e      	ldrh	r6, [r5, #10]
    3d0a:	441e      	add	r6, r3

    for (off = 0; off < size; off += blk_sz) {
    3d0c:	2500      	movs	r5, #0
    3d0e:	e013      	b.n	3d38 <bootutil_img_hash+0x5e>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    3d10:	461a      	mov	r2, r3
    3d12:	4621      	mov	r1, r4
    3d14:	a801      	add	r0, sp, #4
    3d16:	f000 fa33 	bl	4180 <mbedtls_sha256_update_ret>
    3d1a:	e7f2      	b.n	3d02 <bootutil_img_hash+0x28>
        if ((off < tlv_off) && ((off + blk_sz) > tlv_off)) {
            /* read only up to the end of the image payload */
            blk_sz = tlv_off - off;
        }
#endif
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    3d1c:	4623      	mov	r3, r4
    3d1e:	463a      	mov	r2, r7
    3d20:	4629      	mov	r1, r5
    3d22:	4648      	mov	r0, r9
    3d24:	f001 f8a2 	bl	4e6c <flash_area_read>
        if (rc) {
    3d28:	4603      	mov	r3, r0
    3d2a:	b988      	cbnz	r0, 3d50 <bootutil_img_hash+0x76>
    3d2c:	4622      	mov	r2, r4
    3d2e:	4639      	mov	r1, r7
    3d30:	a801      	add	r0, sp, #4
    3d32:	f000 fa25 	bl	4180 <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    3d36:	4425      	add	r5, r4
    3d38:	42b5      	cmp	r5, r6
    3d3a:	d204      	bcs.n	3d46 <bootutil_img_hash+0x6c>
        blk_sz = size - off;
    3d3c:	1b74      	subs	r4, r6, r5
        if (blk_sz > tmp_buf_sz) {
    3d3e:	4544      	cmp	r4, r8
    3d40:	d9ec      	bls.n	3d1c <bootutil_img_hash+0x42>
            blk_sz = tmp_buf_sz;
    3d42:	4644      	mov	r4, r8
    3d44:	e7ea      	b.n	3d1c <bootutil_img_hash+0x42>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
    3d46:	9926      	ldr	r1, [sp, #152]	; 0x98
    3d48:	a801      	add	r0, sp, #4
    3d4a:	f000 fa5c 	bl	4206 <mbedtls_sha256_finish_ret>
#endif
        bootutil_sha256_update(&sha256_ctx, tmp_buf, blk_sz);
    }
    bootutil_sha256_finish(&sha256_ctx, hash_result);

    return 0;
    3d4e:	2300      	movs	r3, #0
}
    3d50:	4618      	mov	r0, r3
    3d52:	b01d      	add	sp, #116	; 0x74
    3d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00003d58 <bootutil_img_validate>:
int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    3d58:	b5f0      	push	{r4, r5, r6, r7, lr}
    3d5a:	b09f      	sub	sp, #124	; 0x7c
    3d5c:	4617      	mov	r7, r2
    3d5e:	461e      	mov	r6, r3
    3d60:	9d28      	ldr	r5, [sp, #160]	; 0xa0
    struct image_tlv_iter it;
    uint8_t buf[SIG_BUF_SIZE];
    uint8_t hash[32];
    int rc;

    rc = bootutil_img_hash(enc_state, image_index, hdr, fap, tmp_buf,
    3d62:	9c27      	ldr	r4, [sp, #156]	; 0x9c
    3d64:	9404      	str	r4, [sp, #16]
    3d66:	9c26      	ldr	r4, [sp, #152]	; 0x98
    3d68:	9403      	str	r4, [sp, #12]
    3d6a:	ac06      	add	r4, sp, #24
    3d6c:	9402      	str	r4, [sp, #8]
    3d6e:	9c25      	ldr	r4, [sp, #148]	; 0x94
    3d70:	9401      	str	r4, [sp, #4]
    3d72:	9c24      	ldr	r4, [sp, #144]	; 0x90
    3d74:	9400      	str	r4, [sp, #0]
    3d76:	f7ff ffb0 	bl	3cda <bootutil_img_hash>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
    3d7a:	4604      	mov	r4, r0
    3d7c:	2800      	cmp	r0, #0
    3d7e:	d140      	bne.n	3e02 <bootutil_img_validate+0xaa>
        return rc;
    }

    if (out_hash) {
    3d80:	b155      	cbz	r5, 3d98 <bootutil_img_validate+0x40>
        memcpy(out_hash, hash, 32);
    3d82:	ac06      	add	r4, sp, #24
    3d84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3d86:	6028      	str	r0, [r5, #0]
    3d88:	6069      	str	r1, [r5, #4]
    3d8a:	60aa      	str	r2, [r5, #8]
    3d8c:	60eb      	str	r3, [r5, #12]
    3d8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3d90:	6128      	str	r0, [r5, #16]
    3d92:	6169      	str	r1, [r5, #20]
    3d94:	61aa      	str	r2, [r5, #24]
    3d96:	61eb      	str	r3, [r5, #28]
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    3d98:	2300      	movs	r3, #0
    3d9a:	9300      	str	r3, [sp, #0]
    3d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3da0:	4632      	mov	r2, r6
    3da2:	4639      	mov	r1, r7
    3da4:	a816      	add	r0, sp, #88	; 0x58
    3da6:	f000 f834 	bl	3e12 <bootutil_tlv_iter_begin>
    if (rc) {
    3daa:	4604      	mov	r4, r0
    3dac:	bb48      	cbnz	r0, 3e02 <bootutil_img_validate+0xaa>
    int sha256_valid = 0;
    3dae:	4605      	mov	r5, r0
    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    3db0:	ab1c      	add	r3, sp, #112	; 0x70
    3db2:	f10d 0272 	add.w	r2, sp, #114	; 0x72
    3db6:	a91d      	add	r1, sp, #116	; 0x74
    3db8:	a816      	add	r0, sp, #88	; 0x58
    3dba:	f000 f88f 	bl	3edc <bootutil_tlv_iter_next>
        if (rc < 0) {
    3dbe:	2800      	cmp	r0, #0
    3dc0:	db1d      	blt.n	3dfe <bootutil_img_validate+0xa6>
            return -1;
        } else if (rc > 0) {
    3dc2:	dc18      	bgt.n	3df6 <bootutil_img_validate+0x9e>
            break;
        }

        if (type == IMAGE_TLV_SHA256) {
    3dc4:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
    3dc8:	2b10      	cmp	r3, #16
    3dca:	d1f1      	bne.n	3db0 <bootutil_img_validate+0x58>
            /*
             * Verify the SHA256 image hash.  This must always be
             * present.
             */
            if (len != sizeof(hash)) {
    3dcc:	f8bd 3072 	ldrh.w	r3, [sp, #114]	; 0x72
    3dd0:	2b20      	cmp	r3, #32
    3dd2:	d119      	bne.n	3e08 <bootutil_img_validate+0xb0>
                return -1;
            }
            rc = flash_area_read(fap, off, buf, sizeof hash);
    3dd4:	aa0e      	add	r2, sp, #56	; 0x38
    3dd6:	991d      	ldr	r1, [sp, #116]	; 0x74
    3dd8:	4630      	mov	r0, r6
    3dda:	f001 f847 	bl	4e6c <flash_area_read>
            if (rc) {
    3dde:	b9b0      	cbnz	r0, 3e0e <bootutil_img_validate+0xb6>
                return rc;
            }
            if (memcmp(hash, buf, sizeof(hash))) {
    3de0:	2220      	movs	r2, #32
    3de2:	a90e      	add	r1, sp, #56	; 0x38
    3de4:	a806      	add	r0, sp, #24
    3de6:	f7fd ffd4 	bl	1d92 <memcmp>
                return -1;
            }

            sha256_valid = 1;
    3dea:	2501      	movs	r5, #1
            if (memcmp(hash, buf, sizeof(hash))) {
    3dec:	2800      	cmp	r0, #0
    3dee:	d0df      	beq.n	3db0 <bootutil_img_validate+0x58>
                return -1;
    3df0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3df4:	e005      	b.n	3e02 <bootutil_img_validate+0xaa>
            key_id = -1;
#endif
        }
    }

    if (!sha256_valid) {
    3df6:	b925      	cbnz	r5, 3e02 <bootutil_img_validate+0xaa>
        return -1;
    3df8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3dfc:	e001      	b.n	3e02 <bootutil_img_validate+0xaa>
            return -1;
    3dfe:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        return -1;
    }
#endif

    return 0;
}
    3e02:	4620      	mov	r0, r4
    3e04:	b01f      	add	sp, #124	; 0x7c
    3e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return -1;
    3e08:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    3e0c:	e7f9      	b.n	3e02 <bootutil_img_validate+0xaa>
                return rc;
    3e0e:	4604      	mov	r4, r0
    3e10:	e7f7      	b.n	3e02 <bootutil_img_validate+0xaa>

00003e12 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    3e12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3e16:	b083      	sub	sp, #12
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    3e18:	2800      	cmp	r0, #0
    3e1a:	d04a      	beq.n	3eb2 <bootutil_tlv_iter_begin+0xa0>
    3e1c:	4605      	mov	r5, r0
    3e1e:	2900      	cmp	r1, #0
    3e20:	d04a      	beq.n	3eb8 <bootutil_tlv_iter_begin+0xa6>
    3e22:	2a00      	cmp	r2, #0
    3e24:	d04b      	beq.n	3ebe <bootutil_tlv_iter_begin+0xac>
    3e26:	4699      	mov	r9, r3
    3e28:	4617      	mov	r7, r2
    3e2a:	460c      	mov	r4, r1
        return -1;
    }

    off_ = BOOT_TLV_OFF(hdr);
    3e2c:	890e      	ldrh	r6, [r1, #8]
    3e2e:	68cb      	ldr	r3, [r1, #12]
    3e30:	441e      	add	r6, r3
    if (flash_area_read(fap, off_, &info, sizeof(info))) {
    3e32:	2304      	movs	r3, #4
    3e34:	eb0d 0203 	add.w	r2, sp, r3
    3e38:	4631      	mov	r1, r6
    3e3a:	4638      	mov	r0, r7
    3e3c:	f001 f816 	bl	4e6c <flash_area_read>
    3e40:	4680      	mov	r8, r0
    3e42:	2800      	cmp	r0, #0
    3e44:	d13e      	bne.n	3ec4 <bootutil_tlv_iter_begin+0xb2>
        return -1;
    }

    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    3e46:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3e4a:	f646 1308 	movw	r3, #26888	; 0x6908
    3e4e:	429a      	cmp	r2, r3
    3e50:	d01e      	beq.n	3e90 <bootutil_tlv_iter_begin+0x7e>
        }

        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
            return -1;
        }
    } else if (hdr->ih_protect_tlv_size != 0) {
    3e52:	8963      	ldrh	r3, [r4, #10]
    3e54:	2b00      	cmp	r3, #0
    3e56:	d13b      	bne.n	3ed0 <bootutil_tlv_iter_begin+0xbe>
        return -1;
    }

    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    3e58:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3e5c:	f646 1307 	movw	r3, #26887	; 0x6907
    3e60:	429a      	cmp	r2, r3
    3e62:	d138      	bne.n	3ed6 <bootutil_tlv_iter_begin+0xc4>
        return -1;
    }

    it->hdr = hdr;
    3e64:	602c      	str	r4, [r5, #0]
    it->fap = fap;
    3e66:	606f      	str	r7, [r5, #4]
    it->type = type;
    3e68:	f8a5 9008 	strh.w	r9, [r5, #8]
    it->prot = prot;
    3e6c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    3e70:	72ab      	strb	r3, [r5, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    3e72:	8963      	ldrh	r3, [r4, #10]
    3e74:	4433      	add	r3, r6
    3e76:	60eb      	str	r3, [r5, #12]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    3e78:	8963      	ldrh	r3, [r4, #10]
    3e7a:	4433      	add	r3, r6
    3e7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3e80:	4413      	add	r3, r2
    3e82:	616b      	str	r3, [r5, #20]
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    3e84:	3604      	adds	r6, #4
    3e86:	612e      	str	r6, [r5, #16]
    return 0;
}
    3e88:	4640      	mov	r0, r8
    3e8a:	b003      	add	sp, #12
    3e8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    3e90:	8963      	ldrh	r3, [r4, #10]
    3e92:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    3e96:	428b      	cmp	r3, r1
    3e98:	d117      	bne.n	3eca <bootutil_tlv_iter_begin+0xb8>
        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
    3e9a:	2304      	movs	r3, #4
    3e9c:	eb0d 0203 	add.w	r2, sp, r3
    3ea0:	4431      	add	r1, r6
    3ea2:	4638      	mov	r0, r7
    3ea4:	f000 ffe2 	bl	4e6c <flash_area_read>
    3ea8:	2800      	cmp	r0, #0
    3eaa:	d0d5      	beq.n	3e58 <bootutil_tlv_iter_begin+0x46>
            return -1;
    3eac:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3eb0:	e7ea      	b.n	3e88 <bootutil_tlv_iter_begin+0x76>
        return -1;
    3eb2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3eb6:	e7e7      	b.n	3e88 <bootutil_tlv_iter_begin+0x76>
    3eb8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3ebc:	e7e4      	b.n	3e88 <bootutil_tlv_iter_begin+0x76>
    3ebe:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3ec2:	e7e1      	b.n	3e88 <bootutil_tlv_iter_begin+0x76>
        return -1;
    3ec4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3ec8:	e7de      	b.n	3e88 <bootutil_tlv_iter_begin+0x76>
            return -1;
    3eca:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3ece:	e7db      	b.n	3e88 <bootutil_tlv_iter_begin+0x76>
        return -1;
    3ed0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3ed4:	e7d8      	b.n	3e88 <bootutil_tlv_iter_begin+0x76>
        return -1;
    3ed6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    3eda:	e7d5      	b.n	3e88 <bootutil_tlv_iter_begin+0x76>

00003edc <bootutil_tlv_iter_next>:
                       uint16_t *type)
{
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    3edc:	2800      	cmp	r0, #0
    3ede:	d04d      	beq.n	3f7c <bootutil_tlv_iter_next+0xa0>
{
    3ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ee2:	b083      	sub	sp, #12
    3ee4:	4604      	mov	r4, r0
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    3ee6:	6800      	ldr	r0, [r0, #0]
    3ee8:	2800      	cmp	r0, #0
    3eea:	d04b      	beq.n	3f84 <bootutil_tlv_iter_next+0xa8>
    3eec:	461d      	mov	r5, r3
    3eee:	4616      	mov	r6, r2
    3ef0:	460f      	mov	r7, r1
    3ef2:	6863      	ldr	r3, [r4, #4]
    3ef4:	bb0b      	cbnz	r3, 3f3a <bootutil_tlv_iter_next+0x5e>
        return -1;
    3ef6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3efa:	e03a      	b.n	3f72 <bootutil_tlv_iter_next+0x96>
    while (it->tlv_off < it->tlv_end) {
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
            it->tlv_off += sizeof(struct image_tlv_info);
        }

        rc = flash_area_read(it->fap, it->tlv_off, &tlv, sizeof tlv);
    3efc:	2304      	movs	r3, #4
    3efe:	eb0d 0203 	add.w	r2, sp, r3
    3f02:	6921      	ldr	r1, [r4, #16]
    3f04:	6860      	ldr	r0, [r4, #4]
    3f06:	f000 ffb1 	bl	4e6c <flash_area_read>
        if (rc) {
    3f0a:	4601      	mov	r1, r0
    3f0c:	2800      	cmp	r0, #0
    3f0e:	d13c      	bne.n	3f8a <bootutil_tlv_iter_next+0xae>
            return -1;
        }

        /* No more TLVs in the protected area */
        if (it->prot && it->tlv_off >= it->prot_end) {
    3f10:	7aa3      	ldrb	r3, [r4, #10]
    3f12:	b11b      	cbz	r3, 3f1c <bootutil_tlv_iter_next+0x40>
    3f14:	6922      	ldr	r2, [r4, #16]
    3f16:	68e3      	ldr	r3, [r4, #12]
    3f18:	429a      	cmp	r2, r3
    3f1a:	d239      	bcs.n	3f90 <bootutil_tlv_iter_next+0xb4>
            return 1;
        }

        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    3f1c:	8923      	ldrh	r3, [r4, #8]
    3f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3f22:	4293      	cmp	r3, r2
    3f24:	d017      	beq.n	3f56 <bootutil_tlv_iter_next+0x7a>
    3f26:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    3f2a:	4293      	cmp	r3, r2
    3f2c:	d013      	beq.n	3f56 <bootutil_tlv_iter_next+0x7a>
            *len = tlv.it_len;
            it->tlv_off += sizeof(tlv) + tlv.it_len;
            return 0;
        }

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    3f2e:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    3f32:	6923      	ldr	r3, [r4, #16]
    3f34:	4418      	add	r0, r3
    3f36:	3004      	adds	r0, #4
    3f38:	6120      	str	r0, [r4, #16]
    while (it->tlv_off < it->tlv_end) {
    3f3a:	6920      	ldr	r0, [r4, #16]
    3f3c:	6963      	ldr	r3, [r4, #20]
    3f3e:	4298      	cmp	r0, r3
    3f40:	d21a      	bcs.n	3f78 <bootutil_tlv_iter_next+0x9c>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    3f42:	6823      	ldr	r3, [r4, #0]
    3f44:	895b      	ldrh	r3, [r3, #10]
    3f46:	2b00      	cmp	r3, #0
    3f48:	d0d8      	beq.n	3efc <bootutil_tlv_iter_next+0x20>
    3f4a:	68e3      	ldr	r3, [r4, #12]
    3f4c:	4283      	cmp	r3, r0
    3f4e:	d1d5      	bne.n	3efc <bootutil_tlv_iter_next+0x20>
            it->tlv_off += sizeof(struct image_tlv_info);
    3f50:	3004      	adds	r0, #4
    3f52:	6120      	str	r0, [r4, #16]
    3f54:	e7d2      	b.n	3efc <bootutil_tlv_iter_next+0x20>
            if (type != NULL) {
    3f56:	b115      	cbz	r5, 3f5e <bootutil_tlv_iter_next+0x82>
                *type = tlv.it_type;
    3f58:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    3f5c:	802b      	strh	r3, [r5, #0]
            *off = it->tlv_off + sizeof(tlv);
    3f5e:	6923      	ldr	r3, [r4, #16]
    3f60:	3304      	adds	r3, #4
    3f62:	603b      	str	r3, [r7, #0]
            *len = tlv.it_len;
    3f64:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    3f68:	8033      	strh	r3, [r6, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    3f6a:	6922      	ldr	r2, [r4, #16]
    3f6c:	4413      	add	r3, r2
    3f6e:	3304      	adds	r3, #4
    3f70:	6123      	str	r3, [r4, #16]
    }

    return 1;
}
    3f72:	4608      	mov	r0, r1
    3f74:	b003      	add	sp, #12
    3f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return 1;
    3f78:	2101      	movs	r1, #1
    3f7a:	e7fa      	b.n	3f72 <bootutil_tlv_iter_next+0x96>
        return -1;
    3f7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
    3f80:	4608      	mov	r0, r1
    3f82:	4770      	bx	lr
        return -1;
    3f84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3f88:	e7f3      	b.n	3f72 <bootutil_tlv_iter_next+0x96>
            return -1;
    3f8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    3f8e:	e7f0      	b.n	3f72 <bootutil_tlv_iter_next+0x96>
            return 1;
    3f90:	2101      	movs	r1, #1
    3f92:	e7ee      	b.n	3f72 <bootutil_tlv_iter_next+0x96>

00003f94 <flash_area_id_from_multi_image_slot>:
#include <flash_map/flash_map.h>
#include <flash_map_backend/flash_map_backend.h>

int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    3f94:	b119      	cbz	r1, 3f9e <flash_area_id_from_multi_image_slot+0xa>
    3f96:	2901      	cmp	r1, #1
    3f98:	d003      	beq.n	3fa2 <flash_area_id_from_multi_image_slot+0xe>
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
#if MCUBOOT_SWAP_USING_SCRATCH
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }
    return 255;
    3f9a:	20ff      	movs	r0, #255	; 0xff
    3f9c:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    3f9e:	2001      	movs	r0, #1
    3fa0:	4770      	bx	lr
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
    3fa2:	2002      	movs	r0, #2
}
    3fa4:	4770      	bx	lr

00003fa6 <mbedtls_sha256_init>:
    (b)[(i) + 3] = (unsigned char) ( (n)       );       \
} while( 0 )
#endif

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    3fa6:	b508      	push	{r3, lr}
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    3fa8:	226c      	movs	r2, #108	; 0x6c
    3faa:	2100      	movs	r1, #0
    3fac:	f7fd ff22 	bl	1df4 <memset>
}
    3fb0:	bd08      	pop	{r3, pc}
	...

00003fb4 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    3fb4:	2300      	movs	r3, #0
    3fb6:	6003      	str	r3, [r0, #0]
    ctx->total[1] = 0;
    3fb8:	6043      	str	r3, [r0, #4]

    if( is224 == 0 )
    3fba:	460b      	mov	r3, r1
    3fbc:	b1e1      	cbz	r1, 3ff8 <mbedtls_sha256_starts_ret+0x44>
        ctx->state[7] = 0x5BE0CD19;
    }
    else
    {
        /* SHA-224 */
        ctx->state[0] = 0xC1059ED8;
    3fbe:	4a19      	ldr	r2, [pc, #100]	; (4024 <mbedtls_sha256_starts_ret+0x70>)
    3fc0:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0x367CD507;
    3fc2:	4a19      	ldr	r2, [pc, #100]	; (4028 <mbedtls_sha256_starts_ret+0x74>)
    3fc4:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3070DD17;
    3fc6:	f102 4279 	add.w	r2, r2, #4177526784	; 0xf9000000
    3fca:	f502 0274 	add.w	r2, r2, #15990784	; 0xf40000
    3fce:	f502 6201 	add.w	r2, r2, #2064	; 0x810
    3fd2:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xF70E5939;
    3fd4:	4a15      	ldr	r2, [pc, #84]	; (402c <mbedtls_sha256_starts_ret+0x78>)
    3fd6:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0xFFC00B31;
    3fd8:	4a15      	ldr	r2, [pc, #84]	; (4030 <mbedtls_sha256_starts_ret+0x7c>)
    3fda:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x68581511;
    3fdc:	f102 42d1 	add.w	r2, r2, #1753219072	; 0x68800000
    3fe0:	f502 12c0 	add.w	r2, r2, #1572864	; 0x180000
    3fe4:	f502 621e 	add.w	r2, r2, #2528	; 0x9e0
    3fe8:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    3fea:	4a12      	ldr	r2, [pc, #72]	; (4034 <mbedtls_sha256_starts_ret+0x80>)
    3fec:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    3fee:	4a12      	ldr	r2, [pc, #72]	; (4038 <mbedtls_sha256_starts_ret+0x84>)
    3ff0:	6242      	str	r2, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    3ff2:	6683      	str	r3, [r0, #104]	; 0x68

    return( 0 );
}
    3ff4:	2000      	movs	r0, #0
    3ff6:	4770      	bx	lr
        ctx->state[0] = 0x6A09E667;
    3ff8:	4a10      	ldr	r2, [pc, #64]	; (403c <mbedtls_sha256_starts_ret+0x88>)
    3ffa:	6082      	str	r2, [r0, #8]
        ctx->state[1] = 0xBB67AE85;
    3ffc:	4a10      	ldr	r2, [pc, #64]	; (4040 <mbedtls_sha256_starts_ret+0x8c>)
    3ffe:	60c2      	str	r2, [r0, #12]
        ctx->state[2] = 0x3C6EF372;
    4000:	4a10      	ldr	r2, [pc, #64]	; (4044 <mbedtls_sha256_starts_ret+0x90>)
    4002:	6102      	str	r2, [r0, #16]
        ctx->state[3] = 0xA54FF53A;
    4004:	4a10      	ldr	r2, [pc, #64]	; (4048 <mbedtls_sha256_starts_ret+0x94>)
    4006:	6142      	str	r2, [r0, #20]
        ctx->state[4] = 0x510E527F;
    4008:	4a10      	ldr	r2, [pc, #64]	; (404c <mbedtls_sha256_starts_ret+0x98>)
    400a:	6182      	str	r2, [r0, #24]
        ctx->state[5] = 0x9B05688C;
    400c:	4a10      	ldr	r2, [pc, #64]	; (4050 <mbedtls_sha256_starts_ret+0x9c>)
    400e:	61c2      	str	r2, [r0, #28]
        ctx->state[6] = 0x1F83D9AB;
    4010:	4a10      	ldr	r2, [pc, #64]	; (4054 <mbedtls_sha256_starts_ret+0xa0>)
    4012:	6202      	str	r2, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    4014:	f102 5274 	add.w	r2, r2, #1023410176	; 0x3d000000
    4018:	f5a2 0223 	sub.w	r2, r2, #10682368	; 0xa30000
    401c:	f6a2 4292 	subw	r2, r2, #3218	; 0xc92
    4020:	6242      	str	r2, [r0, #36]	; 0x24
    4022:	e7e6      	b.n	3ff2 <mbedtls_sha256_starts_ret+0x3e>
    4024:	c1059ed8 	.word	0xc1059ed8
    4028:	367cd507 	.word	0x367cd507
    402c:	f70e5939 	.word	0xf70e5939
    4030:	ffc00b31 	.word	0xffc00b31
    4034:	64f98fa7 	.word	0x64f98fa7
    4038:	befa4fa4 	.word	0xbefa4fa4
    403c:	6a09e667 	.word	0x6a09e667
    4040:	bb67ae85 	.word	0xbb67ae85
    4044:	3c6ef372 	.word	0x3c6ef372
    4048:	a54ff53a 	.word	0xa54ff53a
    404c:	510e527f 	.word	0x510e527f
    4050:	9b05688c 	.word	0x9b05688c
    4054:	1f83d9ab 	.word	0x1f83d9ab

00004058 <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    4058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    405c:	b0c8      	sub	sp, #288	; 0x120
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
    405e:	2300      	movs	r3, #0
    4060:	e005      	b.n	406e <mbedtls_internal_sha256_process+0x16>
        A[i] = ctx->state[i];
    4062:	1c9a      	adds	r2, r3, #2
    4064:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4068:	f84d 2023 	str.w	r2, [sp, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    406c:	3301      	adds	r3, #1
    406e:	2b07      	cmp	r3, #7
    4070:	d9f7      	bls.n	4062 <mbedtls_internal_sha256_process+0xa>

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    4072:	2200      	movs	r2, #0
    4074:	e04b      	b.n	410e <mbedtls_internal_sha256_process+0xb6>
    {
        if( i < 16 )
            GET_UINT32_BE( W[i], data, 4 * i );
    4076:	f811 5022 	ldrb.w	r5, [r1, r2, lsl #2]
    407a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
    407e:	7863      	ldrb	r3, [r4, #1]
    4080:	041b      	lsls	r3, r3, #16
    4082:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    4086:	78a5      	ldrb	r5, [r4, #2]
    4088:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    408c:	78e4      	ldrb	r4, [r4, #3]
    408e:	4323      	orrs	r3, r4
    4090:	ac08      	add	r4, sp, #32
    4092:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        else
            R( i );

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    4096:	9b07      	ldr	r3, [sp, #28]
    4098:	9c04      	ldr	r4, [sp, #16]
    409a:	ea4f 25f4 	mov.w	r5, r4, ror #11
    409e:	ea85 15b4 	eor.w	r5, r5, r4, ror #6
    40a2:	ea85 6574 	eor.w	r5, r5, r4, ror #25
    40a6:	442b      	add	r3, r5
    40a8:	9e06      	ldr	r6, [sp, #24]
    40aa:	9f05      	ldr	r7, [sp, #20]
    40ac:	ea86 0507 	eor.w	r5, r6, r7
    40b0:	4025      	ands	r5, r4
    40b2:	4075      	eors	r5, r6
    40b4:	442b      	add	r3, r5
    40b6:	4d31      	ldr	r5, [pc, #196]	; (417c <mbedtls_internal_sha256_process+0x124>)
    40b8:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    40bc:	442b      	add	r3, r5
    40be:	ad08      	add	r5, sp, #32
    40c0:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
    40c4:	442b      	add	r3, r5
    40c6:	f8dd e000 	ldr.w	lr, [sp]
    40ca:	ea4f 3c7e 	mov.w	ip, lr, ror #13
    40ce:	ea8c 0cbe 	eor.w	ip, ip, lr, ror #2
    40d2:	ea8c 5cbe 	eor.w	ip, ip, lr, ror #22
    40d6:	f8dd 8004 	ldr.w	r8, [sp, #4]
    40da:	ea0e 0508 	and.w	r5, lr, r8
    40de:	f8dd 9008 	ldr.w	r9, [sp, #8]
    40e2:	ea4e 0a08 	orr.w	sl, lr, r8
    40e6:	ea09 0a0a 	and.w	sl, r9, sl
    40ea:	ea45 050a 	orr.w	r5, r5, sl
    40ee:	44ac      	add	ip, r5
    40f0:	9d03      	ldr	r5, [sp, #12]
    40f2:	441d      	add	r5, r3
    40f4:	4463      	add	r3, ip

        temp1 = A[7]; A[7] = A[6]; A[6] = A[5]; A[5] = A[4]; A[4] = A[3];
    40f6:	9607      	str	r6, [sp, #28]
    40f8:	9706      	str	r7, [sp, #24]
    40fa:	9405      	str	r4, [sp, #20]
    40fc:	9504      	str	r5, [sp, #16]
        A[3] = A[2]; A[2] = A[1]; A[1] = A[0]; A[0] = temp1;
    40fe:	f8cd 900c 	str.w	r9, [sp, #12]
    4102:	f8cd 8008 	str.w	r8, [sp, #8]
    4106:	f8cd e004 	str.w	lr, [sp, #4]
    410a:	9300      	str	r3, [sp, #0]
    for( i = 0; i < 64; i++ )
    410c:	3201      	adds	r2, #1
    410e:	2a3f      	cmp	r2, #63	; 0x3f
    4110:	d822      	bhi.n	4158 <mbedtls_internal_sha256_process+0x100>
        if( i < 16 )
    4112:	2a0f      	cmp	r2, #15
    4114:	d9af      	bls.n	4076 <mbedtls_internal_sha256_process+0x1e>
            R( i );
    4116:	1e93      	subs	r3, r2, #2
    4118:	ac08      	add	r4, sp, #32
    411a:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    411e:	ea4f 43f5 	mov.w	r3, r5, ror #19
    4122:	ea83 4375 	eor.w	r3, r3, r5, ror #17
    4126:	ea83 2395 	eor.w	r3, r3, r5, lsr #10
    412a:	1fd5      	subs	r5, r2, #7
    412c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
    4130:	442b      	add	r3, r5
    4132:	f1a2 050f 	sub.w	r5, r2, #15
    4136:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
    413a:	ea4f 45b6 	mov.w	r5, r6, ror #18
    413e:	ea85 15f6 	eor.w	r5, r5, r6, ror #7
    4142:	ea85 05d6 	eor.w	r5, r5, r6, lsr #3
    4146:	442b      	add	r3, r5
    4148:	f1a2 0510 	sub.w	r5, r2, #16
    414c:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
    4150:	442b      	add	r3, r5
    4152:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
    4156:	e79e      	b.n	4096 <mbedtls_internal_sha256_process+0x3e>
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    4158:	2300      	movs	r3, #0
    415a:	e008      	b.n	416e <mbedtls_internal_sha256_process+0x116>
        ctx->state[i] += A[i];
    415c:	f85d 4023 	ldr.w	r4, [sp, r3, lsl #2]
    4160:	1c99      	adds	r1, r3, #2
    4162:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    4166:	4422      	add	r2, r4
    4168:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
    for( i = 0; i < 8; i++ )
    416c:	3301      	adds	r3, #1
    416e:	2b07      	cmp	r3, #7
    4170:	d9f4      	bls.n	415c <mbedtls_internal_sha256_process+0x104>

    return( 0 );
}
    4172:	2000      	movs	r0, #0
    4174:	b048      	add	sp, #288	; 0x120
    4176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    417a:	bf00      	nop
    417c:	00005bcc 	.word	0x00005bcc

00004180 <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    4180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    4184:	b3da      	cbz	r2, 41fe <mbedtls_sha256_update_ret+0x7e>
    4186:	4606      	mov	r6, r0
    4188:	460d      	mov	r5, r1
    418a:	4614      	mov	r4, r2
        return( 0 );

    left = ctx->total[0] & 0x3F;
    418c:	6803      	ldr	r3, [r0, #0]
    418e:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    fill = 64 - left;
    4192:	f1c7 0840 	rsb	r8, r7, #64	; 0x40

    ctx->total[0] += (uint32_t) ilen;
    4196:	4413      	add	r3, r2
    4198:	6003      	str	r3, [r0, #0]
    ctx->total[0] &= 0xFFFFFFFF;

    if( ctx->total[0] < (uint32_t) ilen )
    419a:	4293      	cmp	r3, r2
    419c:	d202      	bcs.n	41a4 <mbedtls_sha256_update_ret+0x24>
        ctx->total[1]++;
    419e:	6843      	ldr	r3, [r0, #4]
    41a0:	3301      	adds	r3, #1
    41a2:	6043      	str	r3, [r0, #4]

    if( left && ilen >= fill )
    41a4:	b10f      	cbz	r7, 41aa <mbedtls_sha256_update_ret+0x2a>
    41a6:	4544      	cmp	r4, r8
    41a8:	d20a      	bcs.n	41c0 <mbedtls_sha256_update_ret+0x40>
        input += fill;
        ilen  -= fill;
        left = 0;
    }

    while( ilen >= 64 )
    41aa:	2c3f      	cmp	r4, #63	; 0x3f
    41ac:	d91b      	bls.n	41e6 <mbedtls_sha256_update_ret+0x66>
    {
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    41ae:	4629      	mov	r1, r5
    41b0:	4630      	mov	r0, r6
    41b2:	f7ff ff51 	bl	4058 <mbedtls_internal_sha256_process>
    41b6:	4603      	mov	r3, r0
    41b8:	bb10      	cbnz	r0, 4200 <mbedtls_sha256_update_ret+0x80>
            return( ret );

        input += 64;
    41ba:	3540      	adds	r5, #64	; 0x40
        ilen  -= 64;
    41bc:	3c40      	subs	r4, #64	; 0x40
    41be:	e7f4      	b.n	41aa <mbedtls_sha256_update_ret+0x2a>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    41c0:	f106 0928 	add.w	r9, r6, #40	; 0x28
    41c4:	4642      	mov	r2, r8
    41c6:	4629      	mov	r1, r5
    41c8:	eb09 0007 	add.w	r0, r9, r7
    41cc:	f7fd fe05 	bl	1dda <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    41d0:	4649      	mov	r1, r9
    41d2:	4630      	mov	r0, r6
    41d4:	f7ff ff40 	bl	4058 <mbedtls_internal_sha256_process>
    41d8:	4603      	mov	r3, r0
    41da:	b988      	cbnz	r0, 4200 <mbedtls_sha256_update_ret+0x80>
        input += fill;
    41dc:	4445      	add	r5, r8
        ilen  -= fill;
    41de:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
    41e2:	2700      	movs	r7, #0
    41e4:	e7e1      	b.n	41aa <mbedtls_sha256_update_ret+0x2a>
    }

    if( ilen > 0 )
    41e6:	b90c      	cbnz	r4, 41ec <mbedtls_sha256_update_ret+0x6c>
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    41e8:	2300      	movs	r3, #0
    41ea:	e009      	b.n	4200 <mbedtls_sha256_update_ret+0x80>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    41ec:	f106 0028 	add.w	r0, r6, #40	; 0x28
    41f0:	4622      	mov	r2, r4
    41f2:	4629      	mov	r1, r5
    41f4:	4438      	add	r0, r7
    41f6:	f7fd fdf0 	bl	1dda <memcpy>
    return( 0 );
    41fa:	2300      	movs	r3, #0
    41fc:	e000      	b.n	4200 <mbedtls_sha256_update_ret+0x80>
        return( 0 );
    41fe:	2300      	movs	r3, #0
}
    4200:	4618      	mov	r0, r3
    4202:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00004206 <mbedtls_sha256_finish_ret>:
/*
 * SHA-256 final digest
 */
int mbedtls_sha256_finish_ret( mbedtls_sha256_context *ctx,
                               unsigned char output[32] )
{
    4206:	b570      	push	{r4, r5, r6, lr}
    4208:	4604      	mov	r4, r0
    420a:	460d      	mov	r5, r1
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    420c:	6803      	ldr	r3, [r0, #0]
    420e:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    4212:	1c58      	adds	r0, r3, #1
    4214:	4423      	add	r3, r4
    4216:	2280      	movs	r2, #128	; 0x80
    4218:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    if( used <= 56 )
    421c:	2838      	cmp	r0, #56	; 0x38
    421e:	d87b      	bhi.n	4318 <mbedtls_sha256_finish_ret+0x112>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    4220:	f104 0328 	add.w	r3, r4, #40	; 0x28
    4224:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
    4228:	2100      	movs	r1, #0
    422a:	4418      	add	r0, r3
    422c:	f7fd fde2 	bl	1df4 <memset>
    }

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
    4230:	6822      	ldr	r2, [r4, #0]
         | ( ctx->total[1] <<  3 );
    4232:	6863      	ldr	r3, [r4, #4]
    4234:	00db      	lsls	r3, r3, #3
    high = ( ctx->total[0] >> 29 )
    4236:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    low  = ( ctx->total[0] <<  3 );
    423a:	00d2      	lsls	r2, r2, #3

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    423c:	0e19      	lsrs	r1, r3, #24
    423e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    4242:	f3c3 4107 	ubfx	r1, r3, #16, #8
    4246:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    424a:	f3c3 2107 	ubfx	r1, r3, #8, #8
    424e:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    4252:	f884 3063 	strb.w	r3, [r4, #99]	; 0x63
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    4256:	0e13      	lsrs	r3, r2, #24
    4258:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    425c:	f3c2 4307 	ubfx	r3, r2, #16, #8
    4260:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
    4264:	f3c2 2307 	ubfx	r3, r2, #8, #8
    4268:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66
    426c:	f884 2067 	strb.w	r2, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    4270:	f104 0128 	add.w	r1, r4, #40	; 0x28
    4274:	4620      	mov	r0, r4
    4276:	f7ff feef 	bl	4058 <mbedtls_internal_sha256_process>
    427a:	4603      	mov	r3, r0
    427c:	2800      	cmp	r0, #0
    427e:	d159      	bne.n	4334 <mbedtls_sha256_finish_ret+0x12e>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    4280:	7ae2      	ldrb	r2, [r4, #11]
    4282:	702a      	strb	r2, [r5, #0]
    4284:	7aa2      	ldrb	r2, [r4, #10]
    4286:	706a      	strb	r2, [r5, #1]
    4288:	7a62      	ldrb	r2, [r4, #9]
    428a:	70aa      	strb	r2, [r5, #2]
    428c:	7a22      	ldrb	r2, [r4, #8]
    428e:	70ea      	strb	r2, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    4290:	7be2      	ldrb	r2, [r4, #15]
    4292:	712a      	strb	r2, [r5, #4]
    4294:	7ba2      	ldrb	r2, [r4, #14]
    4296:	716a      	strb	r2, [r5, #5]
    4298:	7b62      	ldrb	r2, [r4, #13]
    429a:	71aa      	strb	r2, [r5, #6]
    429c:	7b22      	ldrb	r2, [r4, #12]
    429e:	71ea      	strb	r2, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    42a0:	7ce2      	ldrb	r2, [r4, #19]
    42a2:	722a      	strb	r2, [r5, #8]
    42a4:	7ca2      	ldrb	r2, [r4, #18]
    42a6:	726a      	strb	r2, [r5, #9]
    42a8:	7c62      	ldrb	r2, [r4, #17]
    42aa:	72aa      	strb	r2, [r5, #10]
    42ac:	7c22      	ldrb	r2, [r4, #16]
    42ae:	72ea      	strb	r2, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    42b0:	7de2      	ldrb	r2, [r4, #23]
    42b2:	732a      	strb	r2, [r5, #12]
    42b4:	7da2      	ldrb	r2, [r4, #22]
    42b6:	736a      	strb	r2, [r5, #13]
    42b8:	7d62      	ldrb	r2, [r4, #21]
    42ba:	73aa      	strb	r2, [r5, #14]
    42bc:	7d22      	ldrb	r2, [r4, #20]
    42be:	73ea      	strb	r2, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    42c0:	7ee2      	ldrb	r2, [r4, #27]
    42c2:	742a      	strb	r2, [r5, #16]
    42c4:	7ea2      	ldrb	r2, [r4, #26]
    42c6:	746a      	strb	r2, [r5, #17]
    42c8:	7e62      	ldrb	r2, [r4, #25]
    42ca:	74aa      	strb	r2, [r5, #18]
    42cc:	7e22      	ldrb	r2, [r4, #24]
    42ce:	74ea      	strb	r2, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    42d0:	7fe2      	ldrb	r2, [r4, #31]
    42d2:	752a      	strb	r2, [r5, #20]
    42d4:	7fa2      	ldrb	r2, [r4, #30]
    42d6:	756a      	strb	r2, [r5, #21]
    42d8:	7f62      	ldrb	r2, [r4, #29]
    42da:	75aa      	strb	r2, [r5, #22]
    42dc:	7f22      	ldrb	r2, [r4, #28]
    42de:	75ea      	strb	r2, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    42e0:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
    42e4:	762a      	strb	r2, [r5, #24]
    42e6:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
    42ea:	766a      	strb	r2, [r5, #25]
    42ec:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    42f0:	76aa      	strb	r2, [r5, #26]
    42f2:	f894 2020 	ldrb.w	r2, [r4, #32]
    42f6:	76ea      	strb	r2, [r5, #27]

    if( ctx->is224 == 0 )
    42f8:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    42fa:	b9da      	cbnz	r2, 4334 <mbedtls_sha256_finish_ret+0x12e>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    42fc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    4300:	772b      	strb	r3, [r5, #28]
    4302:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
    4306:	776b      	strb	r3, [r5, #29]
    4308:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    430c:	77ab      	strb	r3, [r5, #30]
    430e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
    4312:	77eb      	strb	r3, [r5, #31]

    return( 0 );
    4314:	4613      	mov	r3, r2
    4316:	e00d      	b.n	4334 <mbedtls_sha256_finish_ret+0x12e>
        memset( ctx->buffer + used, 0, 64 - used );
    4318:	f104 0628 	add.w	r6, r4, #40	; 0x28
    431c:	f1c0 0240 	rsb	r2, r0, #64	; 0x40
    4320:	2100      	movs	r1, #0
    4322:	4430      	add	r0, r6
    4324:	f7fd fd66 	bl	1df4 <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    4328:	4631      	mov	r1, r6
    432a:	4620      	mov	r0, r4
    432c:	f7ff fe94 	bl	4058 <mbedtls_internal_sha256_process>
    4330:	4603      	mov	r3, r0
    4332:	b108      	cbz	r0, 4338 <mbedtls_sha256_finish_ret+0x132>
}
    4334:	4618      	mov	r0, r3
    4336:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer, 0, 56 );
    4338:	2238      	movs	r2, #56	; 0x38
    433a:	2100      	movs	r1, #0
    433c:	4630      	mov	r0, r6
    433e:	f7fd fd59 	bl	1df4 <memset>
    4342:	e775      	b.n	4230 <mbedtls_sha256_finish_ret+0x2a>

00004344 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    4344:	6843      	ldr	r3, [r0, #4]
    4346:	428b      	cmp	r3, r1
    4348:	d808      	bhi.n	435c <hal_flash_check_addr+0x18>
    434a:	6882      	ldr	r2, [r0, #8]
    434c:	4413      	add	r3, r2
    434e:	428b      	cmp	r3, r1
    4350:	d301      	bcc.n	4356 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
    4352:	2000      	movs	r0, #0
}
    4354:	4770      	bx	lr
        return SYS_EINVAL;
    4356:	f06f 0001 	mvn.w	r0, #1
    435a:	4770      	bx	lr
    435c:	f06f 0001 	mvn.w	r0, #1
    4360:	4770      	bx	lr

00004362 <hal_flash_init>:
{
    4362:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
    4364:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
    4366:	462c      	mov	r4, r5
    4368:	e001      	b.n	436e <hal_flash_init+0xc>
    436a:	3401      	adds	r4, #1
    436c:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
    436e:	4620      	mov	r0, r4
    4370:	f7fc f966 	bl	640 <hal_bsp_flash_dev>
        if (!hf) {
    4374:	b138      	cbz	r0, 4386 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
    4376:	6802      	ldr	r2, [r0, #0]
    4378:	6952      	ldr	r2, [r2, #20]
    437a:	4790      	blx	r2
    437c:	2800      	cmp	r0, #0
    437e:	d0f4      	beq.n	436a <hal_flash_init+0x8>
            rc = SYS_EIO;
    4380:	f06f 0504 	mvn.w	r5, #4
    4384:	e7f1      	b.n	436a <hal_flash_init+0x8>
}
    4386:	4628      	mov	r0, r5
    4388:	bd38      	pop	{r3, r4, r5, pc}

0000438a <hal_flash_align>:
{
    438a:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    438c:	f7fc f958 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    4390:	b108      	cbz	r0, 4396 <hal_flash_align+0xc>
    return hf->hf_align;
    4392:	7c00      	ldrb	r0, [r0, #16]
}
    4394:	bd08      	pop	{r3, pc}
        return 1;
    4396:	2001      	movs	r0, #1
    4398:	e7fc      	b.n	4394 <hal_flash_align+0xa>

0000439a <hal_flash_erased_val>:
{
    439a:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    439c:	f7fc f950 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    43a0:	b108      	cbz	r0, 43a6 <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
    43a2:	7d00      	ldrb	r0, [r0, #20]
}
    43a4:	bd08      	pop	{r3, pc}
        return 1;
    43a6:	2001      	movs	r0, #1
    43a8:	e7fc      	b.n	43a4 <hal_flash_erased_val+0xa>

000043aa <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    43aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43ae:	460d      	mov	r5, r1
    43b0:	4690      	mov	r8, r2
    43b2:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    43b4:	f7fc f944 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    43b8:	b1c0      	cbz	r0, 43ec <hal_flash_read+0x42>
    43ba:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    43bc:	4629      	mov	r1, r5
    43be:	f7ff ffc1 	bl	4344 <hal_flash_check_addr>
    43c2:	b9b0      	cbnz	r0, 43f2 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
    43c4:	19a9      	adds	r1, r5, r6
    43c6:	4620      	mov	r0, r4
    43c8:	f7ff ffbc 	bl	4344 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    43cc:	b9a0      	cbnz	r0, 43f8 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    43ce:	6823      	ldr	r3, [r4, #0]
    43d0:	681f      	ldr	r7, [r3, #0]
    43d2:	4633      	mov	r3, r6
    43d4:	4642      	mov	r2, r8
    43d6:	4629      	mov	r1, r5
    43d8:	4620      	mov	r0, r4
    43da:	47b8      	blx	r7
    if (rc != 0) {
    43dc:	4603      	mov	r3, r0
    43de:	b910      	cbnz	r0, 43e6 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
    43e0:	4618      	mov	r0, r3
    43e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
    43e6:	f06f 0304 	mvn.w	r3, #4
    43ea:	e7f9      	b.n	43e0 <hal_flash_read+0x36>
        return SYS_EINVAL;
    43ec:	f06f 0301 	mvn.w	r3, #1
    43f0:	e7f6      	b.n	43e0 <hal_flash_read+0x36>
        return SYS_EINVAL;
    43f2:	f06f 0301 	mvn.w	r3, #1
    43f6:	e7f3      	b.n	43e0 <hal_flash_read+0x36>
    43f8:	f06f 0301 	mvn.w	r3, #1
    43fc:	e7f0      	b.n	43e0 <hal_flash_read+0x36>
	...

00004400 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    4400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4404:	4605      	mov	r5, r0
    4406:	460e      	mov	r6, r1
    4408:	4690      	mov	r8, r2
    440a:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    440c:	f7fc f918 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    4410:	b310      	cbz	r0, 4458 <hal_flash_write+0x58>
    4412:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    4414:	4631      	mov	r1, r6
    4416:	f7ff ff95 	bl	4344 <hal_flash_check_addr>
    441a:	bb00      	cbnz	r0, 445e <hal_flash_write+0x5e>
      hal_flash_check_addr(hf, address + num_bytes)) {
    441c:	19f1      	adds	r1, r6, r7
    441e:	4620      	mov	r0, r4
    4420:	f7ff ff90 	bl	4344 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    4424:	b9f0      	cbnz	r0, 4464 <hal_flash_write+0x64>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    4426:	08eb      	lsrs	r3, r5, #3
    4428:	4a11      	ldr	r2, [pc, #68]	; (4470 <hal_flash_write+0x70>)
    442a:	5cd3      	ldrb	r3, [r2, r3]
    442c:	f005 0507 	and.w	r5, r5, #7
    4430:	fa43 f505 	asr.w	r5, r3, r5
    4434:	f015 0f01 	tst.w	r5, #1
    4438:	d117      	bne.n	446a <hal_flash_write+0x6a>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
    443a:	6823      	ldr	r3, [r4, #0]
    443c:	685d      	ldr	r5, [r3, #4]
    443e:	463b      	mov	r3, r7
    4440:	4642      	mov	r2, r8
    4442:	4631      	mov	r1, r6
    4444:	4620      	mov	r0, r4
    4446:	47a8      	blx	r5
    if (rc != 0) {
    4448:	4603      	mov	r3, r0
    444a:	b910      	cbnz	r0, 4452 <hal_flash_write+0x52>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
    444c:	4618      	mov	r0, r3
    444e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
    4452:	f06f 0304 	mvn.w	r3, #4
    4456:	e7f9      	b.n	444c <hal_flash_write+0x4c>
        return SYS_EINVAL;
    4458:	f06f 0301 	mvn.w	r3, #1
    445c:	e7f6      	b.n	444c <hal_flash_write+0x4c>
        return SYS_EINVAL;
    445e:	f06f 0301 	mvn.w	r3, #1
    4462:	e7f3      	b.n	444c <hal_flash_write+0x4c>
    4464:	f06f 0301 	mvn.w	r3, #1
    4468:	e7f0      	b.n	444c <hal_flash_write+0x4c>
        return SYS_EACCES;
    446a:	f06f 0306 	mvn.w	r3, #6
    446e:	e7ed      	b.n	444c <hal_flash_write+0x4c>
    4470:	20006380 	.word	0x20006380

00004474 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    4474:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4478:	b083      	sub	sp, #12
    447a:	4605      	mov	r5, r0
    447c:	460e      	mov	r6, r1
    447e:	4690      	mov	r8, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    4480:	f7fc f8de 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    4484:	2800      	cmp	r0, #0
    4486:	d04b      	beq.n	4520 <hal_flash_erase+0xac>
    4488:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    448a:	4631      	mov	r1, r6
    448c:	f7ff ff5a 	bl	4344 <hal_flash_check_addr>
    4490:	2800      	cmp	r0, #0
    4492:	d148      	bne.n	4526 <hal_flash_erase+0xb2>
      hal_flash_check_addr(hf, address + num_bytes)) {
    4494:	eb06 0708 	add.w	r7, r6, r8
    4498:	4639      	mov	r1, r7
    449a:	4620      	mov	r0, r4
    449c:	f7ff ff52 	bl	4344 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    44a0:	2800      	cmp	r0, #0
    44a2:	d143      	bne.n	452c <hal_flash_erase+0xb8>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    44a4:	08eb      	lsrs	r3, r5, #3
    44a6:	4a26      	ldr	r2, [pc, #152]	; (4540 <hal_flash_erase+0xcc>)
    44a8:	5cd3      	ldrb	r3, [r2, r3]
    44aa:	f005 0507 	and.w	r5, r5, #7
    44ae:	fa43 f505 	asr.w	r5, r3, r5
    44b2:	f015 0501 	ands.w	r5, r5, #1
    44b6:	d13c      	bne.n	4532 <hal_flash_erase+0xbe>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
    44b8:	42b7      	cmp	r7, r6
    44ba:	d93d      	bls.n	4538 <hal_flash_erase+0xc4>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
    44bc:	6823      	ldr	r3, [r4, #0]
    44be:	699b      	ldr	r3, [r3, #24]
    44c0:	b363      	cbz	r3, 451c <hal_flash_erase+0xa8>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
    44c2:	4642      	mov	r2, r8
    44c4:	4631      	mov	r1, r6
    44c6:	4620      	mov	r0, r4
    44c8:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
    44ca:	4628      	mov	r0, r5
    44cc:	b003      	add	sp, #12
    44ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            assert(rc == 0);
    44d2:	2300      	movs	r3, #0
    44d4:	461a      	mov	r2, r3
    44d6:	4619      	mov	r1, r3
    44d8:	4618      	mov	r0, r3
    44da:	f7fd f92b 	bl	1734 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    44de:	f108 0801 	add.w	r8, r8, #1
    44e2:	68e3      	ldr	r3, [r4, #12]
    44e4:	4543      	cmp	r3, r8
    44e6:	ddf0      	ble.n	44ca <hal_flash_erase+0x56>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    44e8:	6823      	ldr	r3, [r4, #0]
    44ea:	f8d3 900c 	ldr.w	r9, [r3, #12]
    44ee:	466b      	mov	r3, sp
    44f0:	aa01      	add	r2, sp, #4
    44f2:	4641      	mov	r1, r8
    44f4:	4620      	mov	r0, r4
    44f6:	47c8      	blx	r9
            assert(rc == 0);
    44f8:	2800      	cmp	r0, #0
    44fa:	d1ea      	bne.n	44d2 <hal_flash_erase+0x5e>
            end_area = start + size;
    44fc:	9901      	ldr	r1, [sp, #4]
    44fe:	9b00      	ldr	r3, [sp, #0]
    4500:	440b      	add	r3, r1
            if (address < end_area && end > start) {
    4502:	429e      	cmp	r6, r3
    4504:	d2eb      	bcs.n	44de <hal_flash_erase+0x6a>
    4506:	428f      	cmp	r7, r1
    4508:	d9e9      	bls.n	44de <hal_flash_erase+0x6a>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
    450a:	6823      	ldr	r3, [r4, #0]
    450c:	689b      	ldr	r3, [r3, #8]
    450e:	4620      	mov	r0, r4
    4510:	4798      	blx	r3
    4512:	2800      	cmp	r0, #0
    4514:	d0e3      	beq.n	44de <hal_flash_erase+0x6a>
                    return SYS_EIO;
    4516:	f06f 0504 	mvn.w	r5, #4
    451a:	e7d6      	b.n	44ca <hal_flash_erase+0x56>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    451c:	46a8      	mov	r8, r5
    451e:	e7e0      	b.n	44e2 <hal_flash_erase+0x6e>
        return SYS_EINVAL;
    4520:	f06f 0501 	mvn.w	r5, #1
    4524:	e7d1      	b.n	44ca <hal_flash_erase+0x56>
        return SYS_EINVAL;
    4526:	f06f 0501 	mvn.w	r5, #1
    452a:	e7ce      	b.n	44ca <hal_flash_erase+0x56>
    452c:	f06f 0501 	mvn.w	r5, #1
    4530:	e7cb      	b.n	44ca <hal_flash_erase+0x56>
        return SYS_EACCES;
    4532:	f06f 0506 	mvn.w	r5, #6
    4536:	e7c8      	b.n	44ca <hal_flash_erase+0x56>
        return SYS_EINVAL;
    4538:	f06f 0501 	mvn.w	r5, #1
    453c:	e7c5      	b.n	44ca <hal_flash_erase+0x56>
    453e:	bf00      	nop
    4540:	20006380 	.word	0x20006380

00004544 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
    4544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4546:	4604      	mov	r4, r0
    4548:	4616      	mov	r6, r2
    454a:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    454c:	6807      	ldr	r7, [r0, #0]
    454e:	683f      	ldr	r7, [r7, #0]
    4550:	47b8      	blx	r7
    if (rc != 0) {
    4552:	b960      	cbnz	r0, 456e <hal_flash_is_erased+0x2a>
    4554:	4607      	mov	r7, r0
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
    4556:	2300      	movs	r3, #0
    4558:	42ab      	cmp	r3, r5
    455a:	d205      	bcs.n	4568 <hal_flash_is_erased+0x24>
        if (buf[i] != hf->hf_erased_val) {
    455c:	5cf1      	ldrb	r1, [r6, r3]
    455e:	7d22      	ldrb	r2, [r4, #20]
    4560:	4291      	cmp	r1, r2
    4562:	d102      	bne.n	456a <hal_flash_is_erased+0x26>
    for (i = 0; i < num_bytes; i++) {
    4564:	3301      	adds	r3, #1
    4566:	e7f7      	b.n	4558 <hal_flash_is_erased+0x14>
            return 0;
        }
    }
    return 1;
    4568:	2701      	movs	r7, #1
}
    456a:	4638      	mov	r0, r7
    456c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
    456e:	f06f 0704 	mvn.w	r7, #4
    4572:	e7fa      	b.n	456a <hal_flash_is_erased+0x26>

00004574 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    4574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4578:	460d      	mov	r5, r1
    457a:	4690      	mov	r8, r2
    457c:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    457e:	f7fc f85f 	bl	640 <hal_bsp_flash_dev>
    if (!hf) {
    4582:	b1f8      	cbz	r0, 45c4 <hal_flash_isempty+0x50>
    4584:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    4586:	4629      	mov	r1, r5
    4588:	f7ff fedc 	bl	4344 <hal_flash_check_addr>
    458c:	b9e8      	cbnz	r0, 45ca <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
    458e:	19a9      	adds	r1, r5, r6
    4590:	4620      	mov	r0, r4
    4592:	f7ff fed7 	bl	4344 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    4596:	b9d8      	cbnz	r0, 45d0 <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
    4598:	6823      	ldr	r3, [r4, #0]
    459a:	691f      	ldr	r7, [r3, #16]
    459c:	b15f      	cbz	r7, 45b6 <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
    459e:	4633      	mov	r3, r6
    45a0:	4642      	mov	r2, r8
    45a2:	4629      	mov	r1, r5
    45a4:	4620      	mov	r0, r4
    45a6:	47b8      	blx	r7
        if (rc < 0) {
    45a8:	2800      	cmp	r0, #0
    45aa:	db01      	blt.n	45b0 <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
    45ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
    45b0:	f06f 0004 	mvn.w	r0, #4
    45b4:	e7fa      	b.n	45ac <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    45b6:	4633      	mov	r3, r6
    45b8:	4642      	mov	r2, r8
    45ba:	4629      	mov	r1, r5
    45bc:	4620      	mov	r0, r4
    45be:	f7ff ffc1 	bl	4544 <hal_flash_is_erased>
    45c2:	e7f3      	b.n	45ac <hal_flash_isempty+0x38>
        return SYS_EINVAL;
    45c4:	f06f 0001 	mvn.w	r0, #1
    45c8:	e7f0      	b.n	45ac <hal_flash_isempty+0x38>
        return SYS_EINVAL;
    45ca:	f06f 0001 	mvn.w	r0, #1
    45ce:	e7ed      	b.n	45ac <hal_flash_isempty+0x38>
    45d0:	f06f 0001 	mvn.w	r0, #1
    45d4:	e7ea      	b.n	45ac <hal_flash_isempty+0x38>

000045d6 <hal_system_start>:
                  /* 1st word is stack pointer */
                  "    msr  msp, %0       \n"
                  /* 2nd word is a reset handler (image entry) */
                  "    bx   %1            \n"
                  : /* no output */
                  : "r" (img_data[0]), "r" (img_data[1]));
    45d6:	6803      	ldr	r3, [r0, #0]
    45d8:	6842      	ldr	r2, [r0, #4]
    asm volatile (".syntax unified        \n"
    45da:	f383 8808 	msr	MSP, r3
    45de:	4710      	bx	r2

000045e0 <fwrite>:
    if (stream->vmt->read == NULL) return 0;
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
    45e0:	b538      	push	{r3, r4, r5, lr}
    if (stream->vmt->write == NULL) return 0;
    45e2:	681c      	ldr	r4, [r3, #0]
    45e4:	6825      	ldr	r5, [r4, #0]
    45e6:	b145      	cbz	r5, 45fa <fwrite+0x1a>
    45e8:	460c      	mov	r4, r1
    45ea:	4601      	mov	r1, r0
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    45ec:	fb02 f204 	mul.w	r2, r2, r4
    45f0:	4618      	mov	r0, r3
    45f2:	47a8      	blx	r5
    45f4:	fbb0 f0f4 	udiv	r0, r0, r4
}
    45f8:	bd38      	pop	{r3, r4, r5, pc}
    if (stream->vmt->write == NULL) return 0;
    45fa:	2000      	movs	r0, #0
    45fc:	e7fc      	b.n	45f8 <fwrite+0x18>
	...

00004600 <puts>:
{
	return fwrite(s, 1, strlen(s), f);
}

__extern_inline int puts(const char *s)
{
    4600:	b538      	push	{r3, r4, r5, lr}
    4602:	4605      	mov	r5, r0
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
    4604:	f7fd fc12 	bl	1e2c <strlen>
    4608:	4b08      	ldr	r3, [pc, #32]	; (462c <puts+0x2c>)
    460a:	681c      	ldr	r4, [r3, #0]
    460c:	4623      	mov	r3, r4
    460e:	4602      	mov	r2, r0
    4610:	2101      	movs	r1, #1
    4612:	4628      	mov	r0, r5
    4614:	f7ff ffe4 	bl	45e0 <fwrite>
    4618:	4605      	mov	r5, r0
    461a:	4623      	mov	r3, r4
    461c:	2201      	movs	r2, #1
    461e:	4611      	mov	r1, r2
    4620:	4803      	ldr	r0, [pc, #12]	; (4630 <puts+0x30>)
    4622:	f7ff ffdd 	bl	45e0 <fwrite>
}
    4626:	4428      	add	r0, r5
    4628:	bd38      	pop	{r3, r4, r5, pc}
    462a:	bf00      	nop
    462c:	00005ccc 	.word	0x00005ccc
    4630:	000059d8 	.word	0x000059d8

00004634 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
    4634:	2000      	movs	r0, #0
    4636:	4770      	bx	lr

00004638 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
    4638:	b510      	push	{r4, lr}
    463a:	4608      	mov	r0, r1
    463c:	4614      	mov	r4, r2
    console_write(bp, n);
    463e:	4611      	mov	r1, r2
    4640:	f7fd ff60 	bl	2504 <console_write>
    return n;
}
    4644:	4620      	mov	r0, r4
    4646:	bd10      	pop	{r4, pc}

00004648 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
    4648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    464c:	b082      	sub	sp, #8
    464e:	e9cd 0100 	strd	r0, r1, [sp]
    4652:	4690      	mov	r8, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    4654:	f8d2 9004 	ldr.w	r9, [r2, #4]

    if (p->hh == 1) {
    4658:	7893      	ldrb	r3, [r2, #2]
    465a:	f003 0330 	and.w	r3, r3, #48	; 0x30
    465e:	2b10      	cmp	r3, #16
    4660:	d004      	beq.n	466c <ui2a+0x24>
        num = (unsigned short int)num;
    } else if (p->hh == 2) {
    4662:	2b20      	cmp	r3, #32
    4664:	d009      	beq.n	467a <ui2a+0x32>
{
    4666:	2401      	movs	r4, #1
    4668:	2500      	movs	r5, #0
    466a:	e013      	b.n	4694 <ui2a+0x4c>
    466c:	f8bd 2000 	ldrh.w	r2, [sp]
    4670:	b293      	uxth	r3, r2
    4672:	2400      	movs	r4, #0
    4674:	e9cd 3400 	strd	r3, r4, [sp]
    4678:	e7f5      	b.n	4666 <ui2a+0x1e>
    467a:	e9dd 3400 	ldrd	r3, r4, [sp]
    467e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    4682:	2400      	movs	r4, #0
    4684:	e9cd 3400 	strd	r3, r4, [sp]
    4688:	e7ed      	b.n	4666 <ui2a+0x1e>
        num = (unsigned char)num;
    }

    while (num / d >= p->base)
        d *= p->base;
    468a:	fb06 f305 	mul.w	r3, r6, r5
    468e:	fba4 4506 	umull	r4, r5, r4, r6
    4692:	441d      	add	r5, r3
    while (num / d >= p->base)
    4694:	4622      	mov	r2, r4
    4696:	462b      	mov	r3, r5
    4698:	e9dd 0100 	ldrd	r0, r1, [sp]
    469c:	f000 fdb0 	bl	5200 <__aeabi_uldivmod>
    46a0:	f898 6003 	ldrb.w	r6, [r8, #3]
    46a4:	2700      	movs	r7, #0
    46a6:	42b9      	cmp	r1, r7
    46a8:	bf08      	it	eq
    46aa:	42b0      	cmpeq	r0, r6
    46ac:	d2ed      	bcs.n	468a <ui2a+0x42>
    int n = 0;
    46ae:	f04f 0a00 	mov.w	sl, #0
    46b2:	e007      	b.n	46c4 <ui2a+0x7c>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    46b4:	2330      	movs	r3, #48	; 0x30
    46b6:	441e      	add	r6, r3
    46b8:	f889 6000 	strb.w	r6, [r9]
            ++n;
    46bc:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    46c0:	f109 0901 	add.w	r9, r9, #1
    while (d != 0) {
    46c4:	ea54 0305 	orrs.w	r3, r4, r5
    46c8:	d02e      	beq.n	4728 <ui2a+0xe0>
        unsigned long long  dgt = num / d;
    46ca:	4622      	mov	r2, r4
    46cc:	462b      	mov	r3, r5
    46ce:	e9dd 0100 	ldrd	r0, r1, [sp]
    46d2:	f000 fd95 	bl	5200 <__aeabi_uldivmod>
    46d6:	4606      	mov	r6, r0
    46d8:	460f      	mov	r7, r1
        num %= d;
    46da:	4622      	mov	r2, r4
    46dc:	462b      	mov	r3, r5
    46de:	e9dd 0100 	ldrd	r0, r1, [sp]
    46e2:	f000 fd8d 	bl	5200 <__aeabi_uldivmod>
    46e6:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
    46ea:	f898 2003 	ldrb.w	r2, [r8, #3]
    46ee:	2300      	movs	r3, #0
    46f0:	4620      	mov	r0, r4
    46f2:	4629      	mov	r1, r5
    46f4:	f000 fd84 	bl	5200 <__aeabi_uldivmod>
    46f8:	4604      	mov	r4, r0
    46fa:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
    46fc:	f1ba 0f00 	cmp.w	sl, #0
    4700:	d105      	bne.n	470e <ui2a+0xc6>
    4702:	ea56 0307 	orrs.w	r3, r6, r7
    4706:	d102      	bne.n	470e <ui2a+0xc6>
    4708:	ea54 0305 	orrs.w	r3, r4, r5
    470c:	d1da      	bne.n	46c4 <ui2a+0x7c>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    470e:	2f00      	cmp	r7, #0
    4710:	bf08      	it	eq
    4712:	2e0a      	cmpeq	r6, #10
    4714:	d3ce      	bcc.n	46b4 <ui2a+0x6c>
    4716:	f898 3002 	ldrb.w	r3, [r8, #2]
    471a:	f013 0f04 	tst.w	r3, #4
    471e:	d001      	beq.n	4724 <ui2a+0xdc>
    4720:	2337      	movs	r3, #55	; 0x37
    4722:	e7c8      	b.n	46b6 <ui2a+0x6e>
    4724:	2357      	movs	r3, #87	; 0x57
    4726:	e7c6      	b.n	46b6 <ui2a+0x6e>
        }
    }
    *bf = 0;
    4728:	2300      	movs	r3, #0
    472a:	f889 3000 	strb.w	r3, [r9]
}
    472e:	b002      	add	sp, #8
    4730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00004734 <i2a>:

static void i2a(long long int num, struct param *p)
{
    4734:	b508      	push	{r3, lr}
    if (num < 0) {
    4736:	2800      	cmp	r0, #0
    4738:	f171 0300 	sbcs.w	r3, r1, #0
    473c:	db02      	blt.n	4744 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
    473e:	f7ff ff83 	bl	4648 <ui2a>
}
    4742:	bd08      	pop	{r3, pc}
        num = -num;
    4744:	4240      	negs	r0, r0
    4746:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
    474a:	7893      	ldrb	r3, [r2, #2]
    474c:	f043 0301 	orr.w	r3, r3, #1
    4750:	7093      	strb	r3, [r2, #2]
    4752:	e7f4      	b.n	473e <i2a+0xa>

00004754 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
    4754:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4758:	b2db      	uxtb	r3, r3
    475a:	2b09      	cmp	r3, #9
    475c:	d90b      	bls.n	4776 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
    475e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    4762:	b2db      	uxtb	r3, r3
    4764:	2b05      	cmp	r3, #5
    4766:	d908      	bls.n	477a <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
    4768:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    476c:	b2db      	uxtb	r3, r3
    476e:	2b05      	cmp	r3, #5
    4770:	d805      	bhi.n	477e <a2d+0x2a>
        return ch - 'A' + 10;
    4772:	3837      	subs	r0, #55	; 0x37
    4774:	4770      	bx	lr
        return ch - '0';
    4776:	3830      	subs	r0, #48	; 0x30
    4778:	4770      	bx	lr
        return ch - 'a' + 10;
    477a:	3857      	subs	r0, #87	; 0x57
    477c:	4770      	bx	lr
    else
        return -1;
    477e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4782:	4770      	bx	lr

00004784 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
    4784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4788:	4605      	mov	r5, r0
    478a:	4688      	mov	r8, r1
    478c:	4617      	mov	r7, r2
    478e:	4699      	mov	r9, r3
    const char *p = *src;
    4790:	680c      	ldr	r4, [r1, #0]
    int num = 0;
    4792:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
    4794:	4628      	mov	r0, r5
    4796:	f7ff ffdd 	bl	4754 <a2d>
    479a:	2800      	cmp	r0, #0
    479c:	db06      	blt.n	47ac <a2i+0x28>
        if (digit > base)
    479e:	42b8      	cmp	r0, r7
    47a0:	dc04      	bgt.n	47ac <a2i+0x28>
            break;
        num = num * base + digit;
    47a2:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
    47a6:	7825      	ldrb	r5, [r4, #0]
    47a8:	3401      	adds	r4, #1
    47aa:	e7f3      	b.n	4794 <a2i+0x10>
    }
    *src = p;
    47ac:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
    47b0:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
    47b4:	4628      	mov	r0, r5
    47b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000047ba <putf>:

static int putf(FILE *putp, char c)
{
    47ba:	b500      	push	{lr}
    47bc:	b083      	sub	sp, #12

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
    47be:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
    47c2:	6803      	ldr	r3, [r0, #0]
    47c4:	681b      	ldr	r3, [r3, #0]
    47c6:	b14b      	cbz	r3, 47dc <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    47c8:	2201      	movs	r2, #1
    47ca:	f10d 0107 	add.w	r1, sp, #7
    47ce:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
    47d0:	2801      	cmp	r0, #1
    47d2:	d005      	beq.n	47e0 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
    47d4:	2000      	movs	r0, #0
    else
        return 1;
}
    47d6:	b003      	add	sp, #12
    47d8:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
    47dc:	2000      	movs	r0, #0
    47de:	e7fa      	b.n	47d6 <putf+0x1c>
        return 1;
    47e0:	2001      	movs	r0, #1
    47e2:	e7f8      	b.n	47d6 <putf+0x1c>

000047e4 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
    47e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    47e8:	4606      	mov	r6, r0
    47ea:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
    47ec:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
    47ee:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
    47f0:	e001      	b.n	47f6 <putchw+0x12>
        n--;
    47f2:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
    47f4:	4613      	mov	r3, r2
    47f6:	1c5a      	adds	r2, r3, #1
    47f8:	781b      	ldrb	r3, [r3, #0]
    47fa:	b10b      	cbz	r3, 4800 <putchw+0x1c>
    47fc:	2c00      	cmp	r4, #0
    47fe:	dcf8      	bgt.n	47f2 <putchw+0xe>
    if (p->sign)
    4800:	78bb      	ldrb	r3, [r7, #2]
    4802:	f013 0f01 	tst.w	r3, #1
    4806:	d000      	beq.n	480a <putchw+0x26>
        n--;
    4808:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
    480a:	887b      	ldrh	r3, [r7, #2]
    480c:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    4810:	b29b      	uxth	r3, r3
    4812:	f241 0202 	movw	r2, #4098	; 0x1002
    4816:	4293      	cmp	r3, r2
    4818:	d01c      	beq.n	4854 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
    481a:	f640 0202 	movw	r2, #2050	; 0x802
    481e:	4293      	cmp	r3, r2
    4820:	d01a      	beq.n	4858 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
    4822:	683b      	ldr	r3, [r7, #0]
    4824:	4d35      	ldr	r5, [pc, #212]	; (48fc <putchw+0x118>)
    4826:	401d      	ands	r5, r3
    4828:	b1f5      	cbz	r5, 4868 <putchw+0x84>
    unsigned written = 0;
    482a:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    482c:	78bb      	ldrb	r3, [r7, #2]
    482e:	f013 0f01 	tst.w	r3, #1
    4832:	d11f      	bne.n	4874 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
    4834:	887b      	ldrh	r3, [r7, #2]
    4836:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    483a:	b29b      	uxth	r3, r3
    483c:	f241 0202 	movw	r2, #4098	; 0x1002
    4840:	4293      	cmp	r3, r2
    4842:	d01d      	beq.n	4880 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
    4844:	f640 0202 	movw	r2, #2050	; 0x802
    4848:	4293      	cmp	r3, r2
    484a:	d02a      	beq.n	48a2 <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    484c:	787b      	ldrb	r3, [r7, #1]
    484e:	bba3      	cbnz	r3, 48ba <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    4850:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
    4852:	e03d      	b.n	48d0 <putchw+0xec>
        n -= 2;
    4854:	3c02      	subs	r4, #2
    4856:	e7e4      	b.n	4822 <putchw+0x3e>
        n--;
    4858:	3c01      	subs	r4, #1
    485a:	e7e2      	b.n	4822 <putchw+0x3e>
            written += putf(putp, ' ');
    485c:	2120      	movs	r1, #32
    485e:	4630      	mov	r0, r6
    4860:	f7ff ffab 	bl	47ba <putf>
    4864:	4405      	add	r5, r0
        while (n-- > 0)
    4866:	4644      	mov	r4, r8
    4868:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    486c:	2c00      	cmp	r4, #0
    486e:	dcf5      	bgt.n	485c <putchw+0x78>
    4870:	4644      	mov	r4, r8
    4872:	e7db      	b.n	482c <putchw+0x48>
        written += putf(putp, '-');
    4874:	212d      	movs	r1, #45	; 0x2d
    4876:	4630      	mov	r0, r6
    4878:	f7ff ff9f 	bl	47ba <putf>
    487c:	4405      	add	r5, r0
    487e:	e7d9      	b.n	4834 <putchw+0x50>
        written += putf(putp, '0');
    4880:	2130      	movs	r1, #48	; 0x30
    4882:	4630      	mov	r0, r6
    4884:	f7ff ff99 	bl	47ba <putf>
    4888:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
    488a:	78bb      	ldrb	r3, [r7, #2]
    488c:	f013 0f04 	tst.w	r3, #4
    4890:	d005      	beq.n	489e <putchw+0xba>
    4892:	2158      	movs	r1, #88	; 0x58
    4894:	4630      	mov	r0, r6
    4896:	f7ff ff90 	bl	47ba <putf>
    489a:	4405      	add	r5, r0
    489c:	e7d6      	b.n	484c <putchw+0x68>
    489e:	2178      	movs	r1, #120	; 0x78
    48a0:	e7f8      	b.n	4894 <putchw+0xb0>
        written += putf(putp, '0');
    48a2:	2130      	movs	r1, #48	; 0x30
    48a4:	4630      	mov	r0, r6
    48a6:	f7ff ff88 	bl	47ba <putf>
    48aa:	4405      	add	r5, r0
    48ac:	e7ce      	b.n	484c <putchw+0x68>
            written += putf(putp, '0');
    48ae:	2130      	movs	r1, #48	; 0x30
    48b0:	4630      	mov	r0, r6
    48b2:	f7ff ff82 	bl	47ba <putf>
    48b6:	4405      	add	r5, r0
        while (n-- > 0)
    48b8:	4644      	mov	r4, r8
    48ba:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    48be:	2c00      	cmp	r4, #0
    48c0:	dcf5      	bgt.n	48ae <putchw+0xca>
    48c2:	4644      	mov	r4, r8
    48c4:	e7c4      	b.n	4850 <putchw+0x6c>
        written += putf(putp, ch);
    48c6:	4630      	mov	r0, r6
    48c8:	f7ff ff77 	bl	47ba <putf>
    48cc:	4405      	add	r5, r0
    while ((ch = *bf++))
    48ce:	4643      	mov	r3, r8
    48d0:	f103 0801 	add.w	r8, r3, #1
    48d4:	7819      	ldrb	r1, [r3, #0]
    48d6:	2900      	cmp	r1, #0
    48d8:	d1f5      	bne.n	48c6 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
    48da:	78bb      	ldrb	r3, [r7, #2]
    48dc:	f013 0f08 	tst.w	r3, #8
    48e0:	d106      	bne.n	48f0 <putchw+0x10c>
    48e2:	e008      	b.n	48f6 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
    48e4:	2120      	movs	r1, #32
    48e6:	4630      	mov	r0, r6
    48e8:	f7ff ff67 	bl	47ba <putf>
    48ec:	4405      	add	r5, r0
        while (n-- > 0)
    48ee:	463c      	mov	r4, r7
    48f0:	1e67      	subs	r7, r4, #1
    48f2:	2c00      	cmp	r4, #0
    48f4:	dcf6      	bgt.n	48e4 <putchw+0x100>
    }
    
    return written;
}
    48f6:	4628      	mov	r0, r5
    48f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    48fc:	0008ff00 	.word	0x0008ff00

00004900 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
    4900:	b160      	cbz	r0, 491c <intarg+0x1c>
    4902:	2801      	cmp	r0, #1
    4904:	d017      	beq.n	4936 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
    4906:	bb19      	cbnz	r1, 4950 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
    4908:	6813      	ldr	r3, [r2, #0]
    490a:	3307      	adds	r3, #7
    490c:	f023 0307 	bic.w	r3, r3, #7
    4910:	f103 0108 	add.w	r1, r3, #8
    4914:	6011      	str	r1, [r2, #0]
    4916:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
    491a:	4770      	bx	lr
        if (sign) {
    491c:	b129      	cbz	r1, 492a <intarg+0x2a>
            val = va_arg(*va, int);
    491e:	6813      	ldr	r3, [r2, #0]
    4920:	1d19      	adds	r1, r3, #4
    4922:	6011      	str	r1, [r2, #0]
    4924:	6818      	ldr	r0, [r3, #0]
    4926:	17c1      	asrs	r1, r0, #31
    4928:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
    492a:	6813      	ldr	r3, [r2, #0]
    492c:	1d19      	adds	r1, r3, #4
    492e:	6011      	str	r1, [r2, #0]
    4930:	6818      	ldr	r0, [r3, #0]
    4932:	2100      	movs	r1, #0
    4934:	4770      	bx	lr
        if (sign) {
    4936:	b129      	cbz	r1, 4944 <intarg+0x44>
            val = va_arg(*va, long);
    4938:	6813      	ldr	r3, [r2, #0]
    493a:	1d19      	adds	r1, r3, #4
    493c:	6011      	str	r1, [r2, #0]
    493e:	6818      	ldr	r0, [r3, #0]
    4940:	17c1      	asrs	r1, r0, #31
    4942:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
    4944:	6813      	ldr	r3, [r2, #0]
    4946:	1d19      	adds	r1, r3, #4
    4948:	6011      	str	r1, [r2, #0]
    494a:	6818      	ldr	r0, [r3, #0]
    494c:	2100      	movs	r1, #0
    494e:	4770      	bx	lr
            val = va_arg(*va, long long);
    4950:	6813      	ldr	r3, [r2, #0]
    4952:	3307      	adds	r3, #7
    4954:	f023 0307 	bic.w	r3, r3, #7
    4958:	f103 0108 	add.w	r1, r3, #8
    495c:	6011      	str	r1, [r2, #0]
    495e:	e9d3 0100 	ldrd	r0, r1, [r3]
    4962:	4770      	bx	lr

00004964 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
    4964:	b570      	push	{r4, r5, r6, lr}
    4966:	b08a      	sub	sp, #40	; 0x28
    4968:	4605      	mov	r5, r0
    496a:	9101      	str	r1, [sp, #4]
    496c:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
    496e:	ab02      	add	r3, sp, #8
    4970:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
    4972:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
    4974:	9b01      	ldr	r3, [sp, #4]
    4976:	1c5a      	adds	r2, r3, #1
    4978:	9201      	str	r2, [sp, #4]
    497a:	7819      	ldrb	r1, [r3, #0]
    497c:	2900      	cmp	r1, #0
    497e:	f000 813a 	beq.w	4bf6 <tfp_format+0x292>
        if (ch != '%') {
    4982:	2925      	cmp	r1, #37	; 0x25
    4984:	d004      	beq.n	4990 <tfp_format+0x2c>
            written += putf(putp, ch);
    4986:	4628      	mov	r0, r5
    4988:	f7ff ff17 	bl	47ba <putf>
    498c:	4404      	add	r4, r0
    498e:	e7f1      	b.n	4974 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
    4990:	2200      	movs	r2, #0
    4992:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
    4996:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
    499a:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
            p.hh = 0;
    499e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    49a2:	f362 1305 	bfi	r3, r2, #4, #2
    49a6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
    49aa:	9b01      	ldr	r3, [sp, #4]
    49ac:	1c5a      	adds	r2, r3, #1
    49ae:	9201      	str	r2, [sp, #4]
    49b0:	7818      	ldrb	r0, [r3, #0]
    49b2:	b128      	cbz	r0, 49c0 <tfp_format+0x5c>
                switch (ch) {
    49b4:	282d      	cmp	r0, #45	; 0x2d
    49b6:	d052      	beq.n	4a5e <tfp_format+0xfa>
    49b8:	2830      	cmp	r0, #48	; 0x30
    49ba:	d040      	beq.n	4a3e <tfp_format+0xda>
    49bc:	2823      	cmp	r0, #35	; 0x23
    49be:	d047      	beq.n	4a50 <tfp_format+0xec>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
    49c0:	282a      	cmp	r0, #42	; 0x2a
    49c2:	d056      	beq.n	4a72 <tfp_format+0x10e>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
    49c4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    49c8:	b2db      	uxtb	r3, r3
    49ca:	2b09      	cmp	r3, #9
    49cc:	d965      	bls.n	4a9a <tfp_format+0x136>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
    49ce:	286c      	cmp	r0, #108	; 0x6c
    49d0:	d069      	beq.n	4aa6 <tfp_format+0x142>

                if (ch == 'l') {
                    ch = *(fmt++);
                    lng = 2;
                }
            } else if (ch == 'h') {
    49d2:	2868      	cmp	r0, #104	; 0x68
    49d4:	d074      	beq.n	4ac0 <tfp_format+0x15c>
            lng = 0;
    49d6:	2300      	movs	r3, #0
                    ch = *(fmt++);
                    p.hh = 2;
                }
            }

            if (ch == 'z') {
    49d8:	287a      	cmp	r0, #122	; 0x7a
    49da:	f000 808b 	beq.w	4af4 <tfp_format+0x190>
                ch = *(fmt++);
            }

            switch (ch) {
    49de:	2869      	cmp	r0, #105	; 0x69
    49e0:	f000 80a9 	beq.w	4b36 <tfp_format+0x1d2>
    49e4:	f240 808b 	bls.w	4afe <tfp_format+0x19a>
    49e8:	2873      	cmp	r0, #115	; 0x73
    49ea:	f000 80f7 	beq.w	4bdc <tfp_format+0x278>
    49ee:	f200 80b3 	bhi.w	4b58 <tfp_format+0x1f4>
    49f2:	286f      	cmp	r0, #111	; 0x6f
    49f4:	f000 80e1 	beq.w	4bba <tfp_format+0x256>
    49f8:	2870      	cmp	r0, #112	; 0x70
    49fa:	d1bb      	bne.n	4974 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
    49fc:	9b00      	ldr	r3, [sp, #0]
    49fe:	1d1a      	adds	r2, r3, #4
    4a00:	9200      	str	r2, [sp, #0]
    4a02:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
    4a04:	2310      	movs	r3, #16
    4a06:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
    4a0a:	aa08      	add	r2, sp, #32
    4a0c:	2100      	movs	r1, #0
    4a0e:	f7ff fe1b 	bl	4648 <ui2a>
                p.width = 2 * sizeof(void*);
    4a12:	2308      	movs	r3, #8
    4a14:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
    4a18:	2301      	movs	r3, #1
    4a1a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
    4a1e:	2130      	movs	r1, #48	; 0x30
    4a20:	4628      	mov	r0, r5
    4a22:	f7ff feca 	bl	47ba <putf>
    4a26:	4404      	add	r4, r0
                written += putf(putp, 'x');
    4a28:	2178      	movs	r1, #120	; 0x78
    4a2a:	4628      	mov	r0, r5
    4a2c:	f7ff fec5 	bl	47ba <putf>
    4a30:	4404      	add	r4, r0
                written += putchw(putp, &p);
    4a32:	a908      	add	r1, sp, #32
    4a34:	4628      	mov	r0, r5
    4a36:	f7ff fed5 	bl	47e4 <putchw>
    4a3a:	4404      	add	r4, r0
                break;
    4a3c:	e79a      	b.n	4974 <tfp_format+0x10>
                    if (!p.left) {
    4a3e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    4a42:	f013 0f08 	tst.w	r3, #8
    4a46:	d1b0      	bne.n	49aa <tfp_format+0x46>
                        p.lz = 1;
    4a48:	2301      	movs	r3, #1
    4a4a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    4a4e:	e7ac      	b.n	49aa <tfp_format+0x46>
                    p.alt = 1;
    4a50:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    4a54:	f043 0302 	orr.w	r3, r3, #2
    4a58:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
    4a5c:	e7a5      	b.n	49aa <tfp_format+0x46>
                    p.left = 1;
    4a5e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    4a62:	f043 0308 	orr.w	r3, r3, #8
    4a66:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
    4a6a:	2300      	movs	r3, #0
    4a6c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    4a70:	e79b      	b.n	49aa <tfp_format+0x46>
                i = intarg(0, 1, &va);
    4a72:	466a      	mov	r2, sp
    4a74:	2101      	movs	r1, #1
    4a76:	2000      	movs	r0, #0
    4a78:	f7ff ff42 	bl	4900 <intarg>
                if (i > UCHAR_MAX) {
    4a7c:	28ff      	cmp	r0, #255	; 0xff
    4a7e:	dd07      	ble.n	4a90 <tfp_format+0x12c>
                    p.width = UCHAR_MAX;
    4a80:	23ff      	movs	r3, #255	; 0xff
    4a82:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
    4a86:	9b01      	ldr	r3, [sp, #4]
    4a88:	1c5a      	adds	r2, r3, #1
    4a8a:	9201      	str	r2, [sp, #4]
    4a8c:	7818      	ldrb	r0, [r3, #0]
    4a8e:	e79e      	b.n	49ce <tfp_format+0x6a>
                } else if (i > 0) {
    4a90:	2800      	cmp	r0, #0
    4a92:	ddf8      	ble.n	4a86 <tfp_format+0x122>
                    p.width = i;
    4a94:	f88d 0020 	strb.w	r0, [sp, #32]
    4a98:	e7f5      	b.n	4a86 <tfp_format+0x122>
                ch = a2i(ch, &fmt, 10, &(p.width));
    4a9a:	ab08      	add	r3, sp, #32
    4a9c:	220a      	movs	r2, #10
    4a9e:	a901      	add	r1, sp, #4
    4aa0:	f7ff fe70 	bl	4784 <a2i>
    4aa4:	e793      	b.n	49ce <tfp_format+0x6a>
                ch = *(fmt++);
    4aa6:	9b01      	ldr	r3, [sp, #4]
    4aa8:	1c5a      	adds	r2, r3, #1
    4aaa:	9201      	str	r2, [sp, #4]
    4aac:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
    4aae:	286c      	cmp	r0, #108	; 0x6c
    4ab0:	d001      	beq.n	4ab6 <tfp_format+0x152>
                lng = 1;
    4ab2:	2301      	movs	r3, #1
    4ab4:	e790      	b.n	49d8 <tfp_format+0x74>
                    ch = *(fmt++);
    4ab6:	1c9a      	adds	r2, r3, #2
    4ab8:	9201      	str	r2, [sp, #4]
    4aba:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
    4abc:	2302      	movs	r3, #2
    4abe:	e78b      	b.n	49d8 <tfp_format+0x74>
                ch = *(fmt++);
    4ac0:	9b01      	ldr	r3, [sp, #4]
    4ac2:	1c5a      	adds	r2, r3, #1
    4ac4:	9201      	str	r2, [sp, #4]
    4ac6:	7818      	ldrb	r0, [r3, #0]
                p.hh = 1;
    4ac8:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    4acc:	2601      	movs	r6, #1
    4ace:	f366 1105 	bfi	r1, r6, #4, #2
    4ad2:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
                if (ch == 'h') {
    4ad6:	2868      	cmp	r0, #104	; 0x68
    4ad8:	d001      	beq.n	4ade <tfp_format+0x17a>
            lng = 0;
    4ada:	2300      	movs	r3, #0
    4adc:	e77c      	b.n	49d8 <tfp_format+0x74>
                    ch = *(fmt++);
    4ade:	4432      	add	r2, r6
    4ae0:	9201      	str	r2, [sp, #4]
    4ae2:	7858      	ldrb	r0, [r3, #1]
                    p.hh = 2;
    4ae4:	b2cb      	uxtb	r3, r1
    4ae6:	2202      	movs	r2, #2
    4ae8:	f362 1305 	bfi	r3, r2, #4, #2
    4aec:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;
    4af0:	2300      	movs	r3, #0
    4af2:	e771      	b.n	49d8 <tfp_format+0x74>
                ch = *(fmt++);
    4af4:	9a01      	ldr	r2, [sp, #4]
    4af6:	1c51      	adds	r1, r2, #1
    4af8:	9101      	str	r1, [sp, #4]
    4afa:	7810      	ldrb	r0, [r2, #0]
    4afc:	e76f      	b.n	49de <tfp_format+0x7a>
            switch (ch) {
    4afe:	2858      	cmp	r0, #88	; 0x58
    4b00:	d040      	beq.n	4b84 <tfp_format+0x220>
    4b02:	d80a      	bhi.n	4b1a <tfp_format+0x1b6>
    4b04:	2800      	cmp	r0, #0
    4b06:	d076      	beq.n	4bf6 <tfp_format+0x292>
    4b08:	2825      	cmp	r0, #37	; 0x25
    4b0a:	f47f af33 	bne.w	4974 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
    4b0e:	4601      	mov	r1, r0
    4b10:	4628      	mov	r0, r5
    4b12:	f7ff fe52 	bl	47ba <putf>
    4b16:	4404      	add	r4, r0
                break;
    4b18:	e72c      	b.n	4974 <tfp_format+0x10>
            switch (ch) {
    4b1a:	2863      	cmp	r0, #99	; 0x63
    4b1c:	d108      	bne.n	4b30 <tfp_format+0x1cc>
                written += putf(putp, (char)(va_arg(va, int)));
    4b1e:	9b00      	ldr	r3, [sp, #0]
    4b20:	1d1a      	adds	r2, r3, #4
    4b22:	9200      	str	r2, [sp, #0]
    4b24:	7819      	ldrb	r1, [r3, #0]
    4b26:	4628      	mov	r0, r5
    4b28:	f7ff fe47 	bl	47ba <putf>
    4b2c:	4404      	add	r4, r0
                break;
    4b2e:	e721      	b.n	4974 <tfp_format+0x10>
            switch (ch) {
    4b30:	2864      	cmp	r0, #100	; 0x64
    4b32:	f47f af1f 	bne.w	4974 <tfp_format+0x10>
                p.base = 10;
    4b36:	220a      	movs	r2, #10
    4b38:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
    4b3c:	466a      	mov	r2, sp
    4b3e:	2101      	movs	r1, #1
    4b40:	4618      	mov	r0, r3
    4b42:	f7ff fedd 	bl	4900 <intarg>
    4b46:	aa08      	add	r2, sp, #32
    4b48:	f7ff fdf4 	bl	4734 <i2a>
                written += putchw(putp, &p);
    4b4c:	a908      	add	r1, sp, #32
    4b4e:	4628      	mov	r0, r5
    4b50:	f7ff fe48 	bl	47e4 <putchw>
    4b54:	4404      	add	r4, r0
                break;
    4b56:	e70d      	b.n	4974 <tfp_format+0x10>
            switch (ch) {
    4b58:	2875      	cmp	r0, #117	; 0x75
    4b5a:	d110      	bne.n	4b7e <tfp_format+0x21a>
                p.base = 10;
    4b5c:	220a      	movs	r2, #10
    4b5e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    4b62:	466a      	mov	r2, sp
    4b64:	2100      	movs	r1, #0
    4b66:	4618      	mov	r0, r3
    4b68:	f7ff feca 	bl	4900 <intarg>
    4b6c:	aa08      	add	r2, sp, #32
    4b6e:	f7ff fd6b 	bl	4648 <ui2a>
                written += putchw(putp, &p);
    4b72:	a908      	add	r1, sp, #32
    4b74:	4628      	mov	r0, r5
    4b76:	f7ff fe35 	bl	47e4 <putchw>
    4b7a:	4404      	add	r4, r0
                break;
    4b7c:	e6fa      	b.n	4974 <tfp_format+0x10>
            switch (ch) {
    4b7e:	2878      	cmp	r0, #120	; 0x78
    4b80:	f47f aef8 	bne.w	4974 <tfp_format+0x10>
                p.base = 16;
    4b84:	2210      	movs	r2, #16
    4b86:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
    4b8a:	2858      	cmp	r0, #88	; 0x58
    4b8c:	bf14      	ite	ne
    4b8e:	2000      	movne	r0, #0
    4b90:	2001      	moveq	r0, #1
    4b92:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    4b96:	f360 0282 	bfi	r2, r0, #2, #1
    4b9a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
    4b9e:	466a      	mov	r2, sp
    4ba0:	2100      	movs	r1, #0
    4ba2:	4618      	mov	r0, r3
    4ba4:	f7ff feac 	bl	4900 <intarg>
    4ba8:	aa08      	add	r2, sp, #32
    4baa:	f7ff fd4d 	bl	4648 <ui2a>
                written += putchw(putp, &p);
    4bae:	a908      	add	r1, sp, #32
    4bb0:	4628      	mov	r0, r5
    4bb2:	f7ff fe17 	bl	47e4 <putchw>
    4bb6:	4404      	add	r4, r0
                break;
    4bb8:	e6dc      	b.n	4974 <tfp_format+0x10>
                p.base = 8;
    4bba:	2208      	movs	r2, #8
    4bbc:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    4bc0:	466a      	mov	r2, sp
    4bc2:	2100      	movs	r1, #0
    4bc4:	4618      	mov	r0, r3
    4bc6:	f7ff fe9b 	bl	4900 <intarg>
    4bca:	aa08      	add	r2, sp, #32
    4bcc:	f7ff fd3c 	bl	4648 <ui2a>
                written += putchw(putp, &p);
    4bd0:	a908      	add	r1, sp, #32
    4bd2:	4628      	mov	r0, r5
    4bd4:	f7ff fe06 	bl	47e4 <putchw>
    4bd8:	4404      	add	r4, r0
                break;
    4bda:	e6cb      	b.n	4974 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
    4bdc:	9b00      	ldr	r3, [sp, #0]
    4bde:	1d1a      	adds	r2, r3, #4
    4be0:	9200      	str	r2, [sp, #0]
    4be2:	681b      	ldr	r3, [r3, #0]
    4be4:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
    4be6:	a908      	add	r1, sp, #32
    4be8:	4628      	mov	r0, r5
    4bea:	f7ff fdfb 	bl	47e4 <putchw>
    4bee:	4404      	add	r4, r0
                p.bf = bf;
    4bf0:	ab02      	add	r3, sp, #8
    4bf2:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    4bf4:	e6be      	b.n	4974 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
    4bf6:	4620      	mov	r0, r4
    4bf8:	b00a      	add	sp, #40	; 0x28
    4bfa:	bd70      	pop	{r4, r5, r6, pc}

00004bfc <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    4bfc:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
    4bfe:	f7ff feb1 	bl	4964 <tfp_format>
}
    4c02:	bd08      	pop	{r3, pc}

00004c04 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
    4c04:	b40f      	push	{r0, r1, r2, r3}
    4c06:	b500      	push	{lr}
    4c08:	b083      	sub	sp, #12
    4c0a:	aa04      	add	r2, sp, #16
    4c0c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
    4c10:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
    4c12:	4b04      	ldr	r3, [pc, #16]	; (4c24 <printf+0x20>)
    4c14:	6818      	ldr	r0, [r3, #0]
    4c16:	f7ff fff1 	bl	4bfc <vfprintf>
    va_end(va);
    return rv;
}
    4c1a:	b003      	add	sp, #12
    4c1c:	f85d eb04 	ldr.w	lr, [sp], #4
    4c20:	b004      	add	sp, #16
    4c22:	4770      	bx	lr
    4c24:	00005ccc 	.word	0x00005ccc

00004c28 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
    4c28:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
    4c2a:	460a      	mov	r2, r1
    4c2c:	4601      	mov	r1, r0
    4c2e:	4b02      	ldr	r3, [pc, #8]	; (4c38 <vprintf+0x10>)
    4c30:	6818      	ldr	r0, [r3, #0]
    4c32:	f7ff ffe3 	bl	4bfc <vfprintf>
}
    4c36:	bd08      	pop	{r3, pc}
    4c38:	00005ccc 	.word	0x00005ccc

00004c3c <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
    4c3c:	b410      	push	{r4}
    int i;

    if (flash_map == NULL) {
    4c3e:	4b0c      	ldr	r3, [pc, #48]	; (4c70 <flash_area_find_idx+0x34>)
    4c40:	681c      	ldr	r4, [r3, #0]
    4c42:	b18c      	cbz	r4, 4c68 <flash_area_find_idx+0x2c>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
    4c44:	2300      	movs	r3, #0
    4c46:	4a0b      	ldr	r2, [pc, #44]	; (4c74 <flash_area_find_idx+0x38>)
    4c48:	6812      	ldr	r2, [r2, #0]
    4c4a:	429a      	cmp	r2, r3
    4c4c:	dd07      	ble.n	4c5e <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
    4c4e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    4c52:	008a      	lsls	r2, r1, #2
    4c54:	5ca2      	ldrb	r2, [r4, r2]
    4c56:	4282      	cmp	r2, r0
    4c58:	d003      	beq.n	4c62 <flash_area_find_idx+0x26>
    for (i = 0; i < flash_map_entries; i++) {
    4c5a:	3301      	adds	r3, #1
    4c5c:	e7f3      	b.n	4c46 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
    4c5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    4c62:	4618      	mov	r0, r3
    4c64:	bc10      	pop	{r4}
    4c66:	4770      	bx	lr
        return -1;
    4c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4c6c:	e7f9      	b.n	4c62 <flash_area_find_idx+0x26>
    4c6e:	bf00      	nop
    4c70:	20006384 	.word	0x20006384
    4c74:	20006388 	.word	0x20006388

00004c78 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
    4c78:	2300      	movs	r3, #0
    4c7a:	4a13      	ldr	r2, [pc, #76]	; (4cc8 <flash_map_area_overlaps+0x50>)
    4c7c:	6812      	ldr	r2, [r2, #0]
    4c7e:	429a      	cmp	r2, r3
    4c80:	dd1f      	ble.n	4cc2 <flash_map_area_overlaps+0x4a>
{
    4c82:	b430      	push	{r4, r5}
    4c84:	e004      	b.n	4c90 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
    4c86:	3301      	adds	r3, #1
    4c88:	4a0f      	ldr	r2, [pc, #60]	; (4cc8 <flash_map_area_overlaps+0x50>)
    4c8a:	6812      	ldr	r2, [r2, #0]
    4c8c:	429a      	cmp	r2, r3
    4c8e:	dd15      	ble.n	4cbc <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
    4c90:	4a0e      	ldr	r2, [pc, #56]	; (4ccc <flash_map_area_overlaps+0x54>)
    4c92:	6812      	ldr	r2, [r2, #0]
    4c94:	eb03 0443 	add.w	r4, r3, r3, lsl #1
    4c98:	00a1      	lsls	r1, r4, #2
    4c9a:	440a      	add	r2, r1

        if (area1->fa_device_id == area2->fa_device_id) {
    4c9c:	7844      	ldrb	r4, [r0, #1]
    4c9e:	7851      	ldrb	r1, [r2, #1]
    4ca0:	428c      	cmp	r4, r1
    4ca2:	d1f0      	bne.n	4c86 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
    4ca4:	6845      	ldr	r5, [r0, #4]
    4ca6:	6881      	ldr	r1, [r0, #8]
    4ca8:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
    4caa:	6854      	ldr	r4, [r2, #4]
    4cac:	6892      	ldr	r2, [r2, #8]
    4cae:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
    4cb0:	428c      	cmp	r4, r1
    4cb2:	d2e8      	bcs.n	4c86 <flash_map_area_overlaps+0xe>
    4cb4:	4295      	cmp	r5, r2
    4cb6:	d2e6      	bcs.n	4c86 <flash_map_area_overlaps+0xe>
                return true;
    4cb8:	2001      	movs	r0, #1
    4cba:	e000      	b.n	4cbe <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
    4cbc:	2000      	movs	r0, #0
}
    4cbe:	bc30      	pop	{r4, r5}
    4cc0:	4770      	bx	lr
    return false;
    4cc2:	2000      	movs	r0, #0
}
    4cc4:	4770      	bx	lr
    4cc6:	bf00      	nop
    4cc8:	20006388 	.word	0x20006388
    4ccc:	20006384 	.word	0x20006384

00004cd0 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
    4cd0:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
    4cd2:	2400      	movs	r4, #0
    4cd4:	e006      	b.n	4ce4 <flash_map_add_new_dflt_areas+0x14>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
    4cd6:	2300      	movs	r3, #0
    4cd8:	461a      	mov	r2, r3
    4cda:	4619      	mov	r1, r3
    4cdc:	4618      	mov	r0, r3
    4cde:	f7fc fd29 	bl	1734 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
    4ce2:	3401      	adds	r4, #1
    4ce4:	2c05      	cmp	r4, #5
    4ce6:	dc26      	bgt.n	4d36 <flash_map_add_new_dflt_areas+0x66>
        dflt_area = &sysflash_map_dflt[i];
    4ce8:	0063      	lsls	r3, r4, #1
    4cea:	4423      	add	r3, r4
    4cec:	009a      	lsls	r2, r3, #2
    4cee:	4b12      	ldr	r3, [pc, #72]	; (4d38 <flash_map_add_new_dflt_areas+0x68>)
    4cf0:	18d6      	adds	r6, r2, r3
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
    4cf2:	5c98      	ldrb	r0, [r3, r2]
    4cf4:	f7ff ffa2 	bl	4c3c <flash_area_find_idx>
    4cf8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4cfc:	d1f1      	bne.n	4ce2 <flash_map_add_new_dflt_areas+0x12>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
    4cfe:	4b0f      	ldr	r3, [pc, #60]	; (4d3c <flash_map_add_new_dflt_areas+0x6c>)
    4d00:	681d      	ldr	r5, [r3, #0]
    4d02:	2d09      	cmp	r5, #9
    4d04:	dce7      	bgt.n	4cd6 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
    4d06:	4630      	mov	r0, r6
    4d08:	f7ff ffb6 	bl	4c78 <flash_map_area_overlaps>
    4d0c:	2800      	cmp	r0, #0
    4d0e:	d1e8      	bne.n	4ce2 <flash_map_add_new_dflt_areas+0x12>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
    4d10:	4b0b      	ldr	r3, [pc, #44]	; (4d40 <flash_map_add_new_dflt_areas+0x70>)
    4d12:	681b      	ldr	r3, [r3, #0]
    4d14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4d18:	00aa      	lsls	r2, r5, #2
    4d1a:	4413      	add	r3, r2

                *dst_area = *dflt_area;
    4d1c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4d20:	0091      	lsls	r1, r2, #2
    4d22:	4a05      	ldr	r2, [pc, #20]	; (4d38 <flash_map_add_new_dflt_areas+0x68>)
    4d24:	440a      	add	r2, r1
    4d26:	ca07      	ldmia	r2, {r0, r1, r2}
    4d28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                flash_map_entries++;
    4d2c:	4a03      	ldr	r2, [pc, #12]	; (4d3c <flash_map_add_new_dflt_areas+0x6c>)
    4d2e:	6813      	ldr	r3, [r2, #0]
    4d30:	3301      	adds	r3, #1
    4d32:	6013      	str	r3, [r2, #0]
    4d34:	e7d5      	b.n	4ce2 <flash_map_add_new_dflt_areas+0x12>
            }
        }
    }
}
    4d36:	bd70      	pop	{r4, r5, r6, pc}
    4d38:	00005cd0 	.word	0x00005cd0
    4d3c:	20006388 	.word	0x20006388
    4d40:	20006384 	.word	0x20006384

00004d44 <flash_map_read_mfg>:
{
    4d44:	b570      	push	{r4, r5, r6, lr}
    4d46:	b086      	sub	sp, #24
    4d48:	4605      	mov	r5, r0
    4d4a:	460e      	mov	r6, r1
    4d4c:	4614      	mov	r4, r2
    *out_num_areas = 0;
    4d4e:	2300      	movs	r3, #0
    4d50:	6013      	str	r3, [r2, #0]
    mfg_init();
    4d52:	f000 fa13 	bl	517c <mfg_init>
    mfg_open(&reader);
    4d56:	a801      	add	r0, sp, #4
    4d58:	f000 fa22 	bl	51a0 <mfg_open>
        if (*out_num_areas >= max_areas) {
    4d5c:	6823      	ldr	r3, [r4, #0]
    4d5e:	42ab      	cmp	r3, r5
    4d60:	da29      	bge.n	4db6 <flash_map_read_mfg+0x72>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
    4d62:	2102      	movs	r1, #2
    4d64:	a801      	add	r0, sp, #4
    4d66:	f000 f9f2 	bl	514e <mfg_seek_next_with_type>
    4d6a:	4603      	mov	r3, r0
        switch (rc) {
    4d6c:	f110 0f0f 	cmn.w	r0, #15
    4d70:	d003      	beq.n	4d7a <flash_map_read_mfg+0x36>
    4d72:	b120      	cbz	r0, 4d7e <flash_map_read_mfg+0x3a>
}
    4d74:	4618      	mov	r0, r3
    4d76:	b006      	add	sp, #24
    4d78:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
    4d7a:	2300      	movs	r3, #0
    4d7c:	e7fa      	b.n	4d74 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
    4d7e:	a903      	add	r1, sp, #12
    4d80:	a801      	add	r0, sp, #4
    4d82:	f000 f9f1 	bl	5168 <mfg_read_tlv_flash_area>
        if (rc != 0) {
    4d86:	4603      	mov	r3, r0
    4d88:	2800      	cmp	r0, #0
    4d8a:	d1f3      	bne.n	4d74 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
    4d8c:	6823      	ldr	r3, [r4, #0]
    4d8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    4d92:	009a      	lsls	r2, r3, #2
    4d94:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
    4d96:	f89d 100c 	ldrb.w	r1, [sp, #12]
    4d9a:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
    4d9c:	f89d 200d 	ldrb.w	r2, [sp, #13]
    4da0:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
    4da2:	f8dd 200e 	ldr.w	r2, [sp, #14]
    4da6:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
    4da8:	f8dd 2012 	ldr.w	r2, [sp, #18]
    4dac:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
    4dae:	6823      	ldr	r3, [r4, #0]
    4db0:	3301      	adds	r3, #1
    4db2:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
    4db4:	e7d2      	b.n	4d5c <flash_map_read_mfg+0x18>
            return -1;
    4db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4dba:	e7db      	b.n	4d74 <flash_map_read_mfg+0x30>

00004dbc <flash_area_open>:
{
    4dbc:	b538      	push	{r3, r4, r5, lr}
    if (flash_map == NULL) {
    4dbe:	4b0b      	ldr	r3, [pc, #44]	; (4dec <flash_area_open+0x30>)
    4dc0:	681c      	ldr	r4, [r3, #0]
    4dc2:	b164      	cbz	r4, 4dde <flash_area_open+0x22>
    4dc4:	460d      	mov	r5, r1
    idx = flash_area_find_idx(id);
    4dc6:	f7ff ff39 	bl	4c3c <flash_area_find_idx>
    if (idx == -1) {
    4dca:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4dce:	d009      	beq.n	4de4 <flash_area_open+0x28>
    *fap = &flash_map[idx];
    4dd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    4dd4:	0083      	lsls	r3, r0, #2
    4dd6:	441c      	add	r4, r3
    4dd8:	602c      	str	r4, [r5, #0]
    return 0;
    4dda:	2000      	movs	r0, #0
}
    4ddc:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
    4dde:	f06f 0006 	mvn.w	r0, #6
    4de2:	e7fb      	b.n	4ddc <flash_area_open+0x20>
        return SYS_ENOENT;
    4de4:	f06f 0003 	mvn.w	r0, #3
    4de8:	e7f8      	b.n	4ddc <flash_area_open+0x20>
    4dea:	bf00      	nop
    4dec:	20006384 	.word	0x20006384

00004df0 <flash_area_to_sectors>:
{
    4df0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4df4:	b084      	sub	sp, #16
    4df6:	460f      	mov	r7, r1
    4df8:	4616      	mov	r6, r2
    rc = flash_area_open(id, &fa);
    4dfa:	fa5f f980 	uxtb.w	r9, r0
    4dfe:	a903      	add	r1, sp, #12
    4e00:	4648      	mov	r0, r9
    4e02:	f7ff ffdb 	bl	4dbc <flash_area_open>
    if (rc != 0) {
    4e06:	4680      	mov	r8, r0
    4e08:	b118      	cbz	r0, 4e12 <flash_area_to_sectors+0x22>
}
    4e0a:	4640      	mov	r0, r8
    4e0c:	b004      	add	sp, #16
    4e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    *cnt = 0;
    4e12:	2300      	movs	r3, #0
    4e14:	603b      	str	r3, [r7, #0]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    4e16:	9b03      	ldr	r3, [sp, #12]
    4e18:	7858      	ldrb	r0, [r3, #1]
    4e1a:	f7fb fc11 	bl	640 <hal_bsp_flash_dev>
    4e1e:	4605      	mov	r5, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    4e20:	4644      	mov	r4, r8
    4e22:	e003      	b.n	4e2c <flash_area_to_sectors+0x3c>
            (*cnt)++;
    4e24:	683b      	ldr	r3, [r7, #0]
    4e26:	3301      	adds	r3, #1
    4e28:	603b      	str	r3, [r7, #0]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    4e2a:	3401      	adds	r4, #1
    4e2c:	68eb      	ldr	r3, [r5, #12]
    4e2e:	42a3      	cmp	r3, r4
    4e30:	ddeb      	ble.n	4e0a <flash_area_to_sectors+0x1a>
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    4e32:	682b      	ldr	r3, [r5, #0]
    4e34:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    4e38:	ab01      	add	r3, sp, #4
    4e3a:	aa02      	add	r2, sp, #8
    4e3c:	4621      	mov	r1, r4
    4e3e:	4628      	mov	r0, r5
    4e40:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
    4e42:	9903      	ldr	r1, [sp, #12]
    4e44:	684b      	ldr	r3, [r1, #4]
    4e46:	9a02      	ldr	r2, [sp, #8]
    4e48:	4293      	cmp	r3, r2
    4e4a:	d8ee      	bhi.n	4e2a <flash_area_to_sectors+0x3a>
    4e4c:	6889      	ldr	r1, [r1, #8]
    4e4e:	440b      	add	r3, r1
    4e50:	429a      	cmp	r2, r3
    4e52:	d2ea      	bcs.n	4e2a <flash_area_to_sectors+0x3a>
            if (ret) {
    4e54:	2e00      	cmp	r6, #0
    4e56:	d0e5      	beq.n	4e24 <flash_area_to_sectors+0x34>
                ret->fa_id = id;
    4e58:	f886 9000 	strb.w	r9, [r6]
                ret->fa_device_id = fa->fa_device_id;
    4e5c:	9b03      	ldr	r3, [sp, #12]
    4e5e:	785b      	ldrb	r3, [r3, #1]
    4e60:	7073      	strb	r3, [r6, #1]
                ret->fa_off = start;
    4e62:	6072      	str	r2, [r6, #4]
                ret->fa_size = size;
    4e64:	9b01      	ldr	r3, [sp, #4]
    4e66:	60b3      	str	r3, [r6, #8]
                ret++;
    4e68:	360c      	adds	r6, #12
    4e6a:	e7db      	b.n	4e24 <flash_area_to_sectors+0x34>

00004e6c <flash_area_read>:
{
    4e6c:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    4e6e:	6884      	ldr	r4, [r0, #8]
    4e70:	428c      	cmp	r4, r1
    4e72:	d308      	bcc.n	4e86 <flash_area_read+0x1a>
    4e74:	18cd      	adds	r5, r1, r3
    4e76:	42ac      	cmp	r4, r5
    4e78:	d308      	bcc.n	4e8c <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    4e7a:	6844      	ldr	r4, [r0, #4]
    4e7c:	4421      	add	r1, r4
    4e7e:	7840      	ldrb	r0, [r0, #1]
    4e80:	f7ff fa93 	bl	43aa <hal_flash_read>
}
    4e84:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    4e86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4e8a:	e7fb      	b.n	4e84 <flash_area_read+0x18>
    4e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4e90:	e7f8      	b.n	4e84 <flash_area_read+0x18>

00004e92 <flash_area_write>:
{
    4e92:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    4e94:	6884      	ldr	r4, [r0, #8]
    4e96:	428c      	cmp	r4, r1
    4e98:	d308      	bcc.n	4eac <flash_area_write+0x1a>
    4e9a:	18cd      	adds	r5, r1, r3
    4e9c:	42ac      	cmp	r4, r5
    4e9e:	d308      	bcc.n	4eb2 <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    4ea0:	6844      	ldr	r4, [r0, #4]
    4ea2:	4421      	add	r1, r4
    4ea4:	7840      	ldrb	r0, [r0, #1]
    4ea6:	f7ff faab 	bl	4400 <hal_flash_write>
}
    4eaa:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
    4eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4eb0:	e7fb      	b.n	4eaa <flash_area_write+0x18>
    4eb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4eb6:	e7f8      	b.n	4eaa <flash_area_write+0x18>

00004eb8 <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
    4eb8:	6883      	ldr	r3, [r0, #8]
    4eba:	428b      	cmp	r3, r1
    4ebc:	d309      	bcc.n	4ed2 <flash_area_erase+0x1a>
{
    4ebe:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    4ec0:	188c      	adds	r4, r1, r2
    4ec2:	42a3      	cmp	r3, r4
    4ec4:	d308      	bcc.n	4ed8 <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    4ec6:	6843      	ldr	r3, [r0, #4]
    4ec8:	4419      	add	r1, r3
    4eca:	7840      	ldrb	r0, [r0, #1]
    4ecc:	f7ff fad2 	bl	4474 <hal_flash_erase>
}
    4ed0:	bd10      	pop	{r4, pc}
        return -1;
    4ed2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    4ed6:	4770      	bx	lr
        return -1;
    4ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    4edc:	e7f8      	b.n	4ed0 <flash_area_erase+0x18>

00004ede <flash_area_align>:
{
    4ede:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
    4ee0:	7840      	ldrb	r0, [r0, #1]
    4ee2:	f7ff fa52 	bl	438a <hal_flash_align>
}
    4ee6:	bd08      	pop	{r3, pc}

00004ee8 <flash_area_erased_val>:
{
    4ee8:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
    4eea:	7840      	ldrb	r0, [r0, #1]
    4eec:	f7ff fa55 	bl	439a <hal_flash_erased_val>
}
    4ef0:	bd08      	pop	{r3, pc}

00004ef2 <flash_area_read_is_empty>:
{
    4ef2:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
    4ef4:	6844      	ldr	r4, [r0, #4]
    4ef6:	4421      	add	r1, r4
    4ef8:	7840      	ldrb	r0, [r0, #1]
    4efa:	f7ff fb3b 	bl	4574 <hal_flash_isempty>
}
    4efe:	bd10      	pop	{r4, pc}

00004f00 <flash_map_init>:

void
flash_map_init(void)
{
    4f00:	b510      	push	{r4, lr}
    4f02:	b084      	sub	sp, #16
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
    4f04:	f7ff fa2d 	bl	4362 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    4f08:	b138      	cbz	r0, 4f1a <flash_map_init+0x1a>
    4f0a:	2000      	movs	r0, #0
    4f0c:	9000      	str	r0, [sp, #0]
    4f0e:	4b0f      	ldr	r3, [pc, #60]	; (4f4c <flash_map_init+0x4c>)
    4f10:	681c      	ldr	r4, [r3, #0]
    4f12:	4603      	mov	r3, r0
    4f14:	4602      	mov	r2, r0
    4f16:	4601      	mov	r1, r0
    4f18:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    4f1a:	4b0d      	ldr	r3, [pc, #52]	; (4f50 <flash_map_init+0x50>)
    4f1c:	4a0d      	ldr	r2, [pc, #52]	; (4f54 <flash_map_init+0x54>)
    4f1e:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    4f20:	4b0d      	ldr	r3, [pc, #52]	; (4f58 <flash_map_init+0x58>)
    4f22:	2206      	movs	r2, #6
    4f24:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
    4f26:	aa03      	add	r2, sp, #12
    4f28:	490c      	ldr	r1, [pc, #48]	; (4f5c <flash_map_init+0x5c>)
    4f2a:	200a      	movs	r0, #10
    4f2c:	f7ff ff0a 	bl	4d44 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc != 0 || num_areas == 0) {
    4f30:	b908      	cbnz	r0, 4f36 <flash_map_init+0x36>
    4f32:	9b03      	ldr	r3, [sp, #12]
    4f34:	b90b      	cbnz	r3, 4f3a <flash_map_init+0x3a>
    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
}
    4f36:	b004      	add	sp, #16
    4f38:	bd10      	pop	{r4, pc}
    flash_map = mfg_areas;
    4f3a:	4a05      	ldr	r2, [pc, #20]	; (4f50 <flash_map_init+0x50>)
    4f3c:	4907      	ldr	r1, [pc, #28]	; (4f5c <flash_map_init+0x5c>)
    4f3e:	6011      	str	r1, [r2, #0]
    flash_map_entries = num_areas;
    4f40:	4a05      	ldr	r2, [pc, #20]	; (4f58 <flash_map_init+0x58>)
    4f42:	6013      	str	r3, [r2, #0]
    flash_map_add_new_dflt_areas();
    4f44:	f7ff fec4 	bl	4cd0 <flash_map_add_new_dflt_areas>
    4f48:	e7f5      	b.n	4f36 <flash_map_init+0x36>
    4f4a:	bf00      	nop
    4f4c:	20000150 	.word	0x20000150
    4f50:	20006384 	.word	0x20006384
    4f54:	00005cd0 	.word	0x00005cd0
    4f58:	20006388 	.word	0x20006388
    4f5c:	2000638c 	.word	0x2000638c

00004f60 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
    4f60:	4770      	bx	lr
	...

00004f64 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
    4f64:	b530      	push	{r4, r5, lr}
    4f66:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
    4f68:	7885      	ldrb	r5, [r0, #2]
    4f6a:	4b21      	ldr	r3, [pc, #132]	; (4ff0 <mfg_seek_next_aux+0x8c>)
    4f6c:	681b      	ldr	r3, [r3, #0]
    4f6e:	429d      	cmp	r5, r3
    4f70:	da32      	bge.n	4fd8 <mfg_seek_next_aux+0x74>
    4f72:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
    4f74:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    4f78:	0093      	lsls	r3, r2, #2
    4f7a:	a901      	add	r1, sp, #4
    4f7c:	4a1d      	ldr	r2, [pc, #116]	; (4ff4 <mfg_seek_next_aux+0x90>)
    4f7e:	5cd0      	ldrb	r0, [r2, r3]
    4f80:	f7ff ff1c 	bl	4dbc <flash_area_open>
    if (rc != 0) {
    4f84:	bb58      	cbnz	r0, 4fde <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
    4f86:	6862      	ldr	r2, [r4, #4]
    4f88:	b9c2      	cbnz	r2, 4fbc <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
    4f8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    4f8e:	00aa      	lsls	r2, r5, #2
    4f90:	4b18      	ldr	r3, [pc, #96]	; (4ff4 <mfg_seek_next_aux+0x90>)
    4f92:	4413      	add	r3, r2
    4f94:	685b      	ldr	r3, [r3, #4]
    4f96:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
    4f98:	6861      	ldr	r1, [r4, #4]
    4f9a:	9801      	ldr	r0, [sp, #4]
    4f9c:	6883      	ldr	r3, [r0, #8]
    4f9e:	3b08      	subs	r3, #8
    4fa0:	4299      	cmp	r1, r3
    4fa2:	d310      	bcc.n	4fc6 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
    4fa4:	78a3      	ldrb	r3, [r4, #2]
    4fa6:	1c59      	adds	r1, r3, #1
    4fa8:	4a11      	ldr	r2, [pc, #68]	; (4ff0 <mfg_seek_next_aux+0x8c>)
    4faa:	6812      	ldr	r2, [r2, #0]
    4fac:	4291      	cmp	r1, r2
    4fae:	da19      	bge.n	4fe4 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
    4fb0:	2200      	movs	r2, #0
    4fb2:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
    4fb4:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
    4fb6:	f06f 0305 	mvn.w	r3, #5
    4fba:	e015      	b.n	4fe8 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    4fbc:	7863      	ldrb	r3, [r4, #1]
    4fbe:	4413      	add	r3, r2
    4fc0:	3302      	adds	r3, #2
    4fc2:	6063      	str	r3, [r4, #4]
    4fc4:	e7e8      	b.n	4f98 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
    4fc6:	2302      	movs	r3, #2
    4fc8:	4622      	mov	r2, r4
    4fca:	f7ff ff4f 	bl	4e6c <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
    4fce:	4603      	mov	r3, r0
    4fd0:	b150      	cbz	r0, 4fe8 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
    4fd2:	f06f 0304 	mvn.w	r3, #4
    4fd6:	e007      	b.n	4fe8 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
    4fd8:	f06f 0301 	mvn.w	r3, #1
    4fdc:	e004      	b.n	4fe8 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
    4fde:	f06f 0304 	mvn.w	r3, #4
    4fe2:	e001      	b.n	4fe8 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
    4fe4:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
    4fe8:	4618      	mov	r0, r3
    4fea:	b003      	add	sp, #12
    4fec:	bd30      	pop	{r4, r5, pc}
    4fee:	bf00      	nop
    4ff0:	20006420 	.word	0x20006420
    4ff4:	20006408 	.word	0x20006408

00004ff8 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
    4ff8:	b530      	push	{r4, r5, lr}
    4ffa:	b085      	sub	sp, #20
    4ffc:	4605      	mov	r5, r0
    4ffe:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
    5000:	a903      	add	r1, sp, #12
    5002:	f7ff fedb 	bl	4dbc <flash_area_open>
    if (rc != 0) {
    5006:	b9e8      	cbnz	r0, 5044 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
    5008:	9803      	ldr	r0, [sp, #12]
    500a:	6881      	ldr	r1, [r0, #8]
    500c:	2308      	movs	r3, #8
    500e:	aa01      	add	r2, sp, #4
    5010:	3908      	subs	r1, #8
    5012:	f7ff ff2b 	bl	4e6c <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
    5016:	4601      	mov	r1, r0
    5018:	b9b8      	cbnz	r0, 504a <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
    501a:	9a02      	ldr	r2, [sp, #8]
    501c:	4b11      	ldr	r3, [pc, #68]	; (5064 <mfg_read_mmr+0x6c>)
    501e:	429a      	cmp	r2, r3
    5020:	d116      	bne.n	5050 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
    5022:	f89d 3006 	ldrb.w	r3, [sp, #6]
    5026:	2b02      	cmp	r3, #2
    5028:	d115      	bne.n	5056 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
    502a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    502e:	9b03      	ldr	r3, [sp, #12]
    5030:	689b      	ldr	r3, [r3, #8]
    5032:	429a      	cmp	r2, r3
    5034:	d812      	bhi.n	505c <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
    5036:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
    5038:	7025      	strb	r5, [r4, #0]
    503a:	6063      	str	r3, [r4, #4]
    503c:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
    503e:	4608      	mov	r0, r1
    5040:	b005      	add	sp, #20
    5042:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
    5044:	f06f 0104 	mvn.w	r1, #4
    5048:	e7f9      	b.n	503e <mfg_read_mmr+0x46>
        return SYS_EIO;
    504a:	f06f 0104 	mvn.w	r1, #4
    504e:	e7f6      	b.n	503e <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    5050:	f06f 0108 	mvn.w	r1, #8
    5054:	e7f3      	b.n	503e <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
    5056:	f06f 010b 	mvn.w	r1, #11
    505a:	e7f0      	b.n	503e <mfg_read_mmr+0x46>
        return SYS_ENODEV;
    505c:	f06f 0108 	mvn.w	r1, #8
    5060:	e7ed      	b.n	503e <mfg_read_mmr+0x46>
    5062:	bf00      	nop
    5064:	3bb2a269 	.word	0x3bb2a269

00005068 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
    5068:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
    506a:	2300      	movs	r3, #0
    506c:	4a11      	ldr	r2, [pc, #68]	; (50b4 <mfg_read_next_mmr+0x4c>)
    506e:	6812      	ldr	r2, [r2, #0]
    5070:	429a      	cmp	r2, r3
    5072:	dd08      	ble.n	5086 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
    5074:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    5078:	008a      	lsls	r2, r1, #2
    507a:	490f      	ldr	r1, [pc, #60]	; (50b8 <mfg_read_next_mmr+0x50>)
    507c:	5c8a      	ldrb	r2, [r1, r2]
    507e:	4282      	cmp	r2, r0
    5080:	d011      	beq.n	50a6 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
    5082:	3301      	adds	r3, #1
    5084:	e7f2      	b.n	506c <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
    5086:	2a01      	cmp	r2, #1
    5088:	dc11      	bgt.n	50ae <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
    508a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    508e:	0093      	lsls	r3, r2, #2
    5090:	4909      	ldr	r1, [pc, #36]	; (50b8 <mfg_read_next_mmr+0x50>)
    5092:	4419      	add	r1, r3
    5094:	f7ff ffb0 	bl	4ff8 <mfg_read_mmr>
    if (rc != 0) {
    5098:	4603      	mov	r3, r0
    509a:	b930      	cbnz	r0, 50aa <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
    509c:	4905      	ldr	r1, [pc, #20]	; (50b4 <mfg_read_next_mmr+0x4c>)
    509e:	680a      	ldr	r2, [r1, #0]
    50a0:	3201      	adds	r2, #1
    50a2:	600a      	str	r2, [r1, #0]
    return 0;
    50a4:	e001      	b.n	50aa <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
    50a6:	f06f 030a 	mvn.w	r3, #10
}
    50aa:	4618      	mov	r0, r3
    50ac:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
    50ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    50b2:	e7fa      	b.n	50aa <mfg_read_next_mmr+0x42>
    50b4:	20006420 	.word	0x20006420
    50b8:	20006408 	.word	0x20006408

000050bc <mfg_open_flash_area>:
{
    50bc:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
    50be:	7883      	ldrb	r3, [r0, #2]
    50c0:	4a0b      	ldr	r2, [pc, #44]	; (50f0 <mfg_open_flash_area+0x34>)
    50c2:	6812      	ldr	r2, [r2, #0]
    50c4:	4293      	cmp	r3, r2
    50c6:	da0a      	bge.n	50de <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
    50c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    50cc:	009a      	lsls	r2, r3, #2
    50ce:	4b09      	ldr	r3, [pc, #36]	; (50f4 <mfg_open_flash_area+0x38>)
    50d0:	5c98      	ldrb	r0, [r3, r2]
    50d2:	f7ff fe73 	bl	4dbc <flash_area_open>
    if (rc != 0) {
    50d6:	4603      	mov	r3, r0
    50d8:	b938      	cbnz	r0, 50ea <mfg_open_flash_area+0x2e>
}
    50da:	4618      	mov	r0, r3
    50dc:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
    50de:	2300      	movs	r3, #0
    50e0:	461a      	mov	r2, r3
    50e2:	4619      	mov	r1, r3
    50e4:	4618      	mov	r0, r3
    50e6:	f7fc fb25 	bl	1734 <__assert_func>
        return SYS_EIO;
    50ea:	f06f 0304 	mvn.w	r3, #4
    50ee:	e7f4      	b.n	50da <mfg_open_flash_area+0x1e>
    50f0:	20006420 	.word	0x20006420
    50f4:	20006408 	.word	0x20006408

000050f8 <mfg_read_tlv_body>:
{
    50f8:	b570      	push	{r4, r5, r6, lr}
    50fa:	b082      	sub	sp, #8
    50fc:	4606      	mov	r6, r0
    50fe:	460c      	mov	r4, r1
    5100:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
    5102:	a901      	add	r1, sp, #4
    5104:	f7ff ffda 	bl	50bc <mfg_open_flash_area>
    if (rc != 0) {
    5108:	4603      	mov	r3, r0
    510a:	b110      	cbz	r0, 5112 <mfg_read_tlv_body+0x1a>
}
    510c:	4618      	mov	r0, r3
    510e:	b002      	add	sp, #8
    5110:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
    5112:	462a      	mov	r2, r5
    5114:	2100      	movs	r1, #0
    5116:	4620      	mov	r0, r4
    5118:	f7fc fe6c 	bl	1df4 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
    511c:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
    511e:	6871      	ldr	r1, [r6, #4]
    5120:	42ab      	cmp	r3, r5
    5122:	bfa8      	it	ge
    5124:	462b      	movge	r3, r5
    5126:	4622      	mov	r2, r4
    5128:	3102      	adds	r1, #2
    512a:	9801      	ldr	r0, [sp, #4]
    512c:	f7ff fe9e 	bl	4e6c <flash_area_read>
    if (rc != 0) {
    5130:	4603      	mov	r3, r0
    5132:	2800      	cmp	r0, #0
    5134:	d0ea      	beq.n	510c <mfg_read_tlv_body+0x14>
        return SYS_EIO;
    5136:	f06f 0304 	mvn.w	r3, #4
    513a:	e7e7      	b.n	510c <mfg_read_tlv_body+0x14>

0000513c <mfg_seek_next>:
{
    513c:	b510      	push	{r4, lr}
    513e:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
    5140:	4620      	mov	r0, r4
    5142:	f7ff ff0f 	bl	4f64 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
    5146:	f110 0f06 	cmn.w	r0, #6
    514a:	d0f9      	beq.n	5140 <mfg_seek_next+0x4>
}
    514c:	bd10      	pop	{r4, pc}

0000514e <mfg_seek_next_with_type>:
{
    514e:	b538      	push	{r3, r4, r5, lr}
    5150:	4604      	mov	r4, r0
    5152:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
    5154:	4620      	mov	r0, r4
    5156:	f7ff fff1 	bl	513c <mfg_seek_next>
        if (rc != 0) {
    515a:	4602      	mov	r2, r0
    515c:	b910      	cbnz	r0, 5164 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
    515e:	7823      	ldrb	r3, [r4, #0]
    5160:	42ab      	cmp	r3, r5
    5162:	d1f7      	bne.n	5154 <mfg_seek_next_with_type+0x6>
}
    5164:	4610      	mov	r0, r2
    5166:	bd38      	pop	{r3, r4, r5, pc}

00005168 <mfg_read_tlv_flash_area>:
{
    5168:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
    516a:	220a      	movs	r2, #10
    516c:	f7ff ffc4 	bl	50f8 <mfg_read_tlv_body>
}
    5170:	bd08      	pop	{r3, pc}

00005172 <mfg_read_tlv_mmr_ref>:
{
    5172:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
    5174:	2201      	movs	r2, #1
    5176:	f7ff ffbf 	bl	50f8 <mfg_read_tlv_body>
}
    517a:	bd08      	pop	{r3, pc}

0000517c <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
    517c:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
    517e:	4b07      	ldr	r3, [pc, #28]	; (519c <mfg_init+0x20>)
    5180:	781b      	ldrb	r3, [r3, #0]
    5182:	b103      	cbz	r3, 5186 <mfg_init+0xa>

    return;

err:
    MFG_LOG_ERROR("failed to read MMRs: rc=%d", rc);
}
    5184:	bd08      	pop	{r3, pc}
    mfg_initialized = true;
    5186:	4b05      	ldr	r3, [pc, #20]	; (519c <mfg_init+0x20>)
    5188:	2201      	movs	r2, #1
    518a:	701a      	strb	r2, [r3, #0]
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
    518c:	2000      	movs	r0, #0
    518e:	f7ff ff6b 	bl	5068 <mfg_read_next_mmr>
    if (rc != 0) {
    5192:	2800      	cmp	r0, #0
    5194:	d1f6      	bne.n	5184 <mfg_init+0x8>
    rc = mfg_read_mmr_refs();
    5196:	f000 f80b 	bl	51b0 <mfg_read_mmr_refs>
err:
    519a:	e7f3      	b.n	5184 <mfg_init+0x8>
    519c:	20006404 	.word	0x20006404

000051a0 <mfg_open>:
{
    51a0:	b510      	push	{r4, lr}
    51a2:	4604      	mov	r4, r0
    mfg_init();
    51a4:	f7ff ffea 	bl	517c <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
    51a8:	2300      	movs	r3, #0
    51aa:	6023      	str	r3, [r4, #0]
    51ac:	6063      	str	r3, [r4, #4]
}
    51ae:	bd10      	pop	{r4, pc}

000051b0 <mfg_read_mmr_refs>:
{
    51b0:	b500      	push	{lr}
    51b2:	b085      	sub	sp, #20
    mfg_open(&reader);
    51b4:	a801      	add	r0, sp, #4
    51b6:	f7ff fff3 	bl	51a0 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
    51ba:	2104      	movs	r1, #4
    51bc:	eb0d 0001 	add.w	r0, sp, r1
    51c0:	f7ff ffc5 	bl	514e <mfg_seek_next_with_type>
    51c4:	4603      	mov	r3, r0
        switch (rc) {
    51c6:	f110 0f0f 	cmn.w	r0, #15
    51ca:	d004      	beq.n	51d6 <mfg_read_mmr_refs+0x26>
    51cc:	b128      	cbz	r0, 51da <mfg_read_mmr_refs+0x2a>
}
    51ce:	4618      	mov	r0, r3
    51d0:	b005      	add	sp, #20
    51d2:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
    51d6:	2300      	movs	r3, #0
    51d8:	e7f9      	b.n	51ce <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
    51da:	a903      	add	r1, sp, #12
    51dc:	a801      	add	r0, sp, #4
    51de:	f7ff ffc8 	bl	5172 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
    51e2:	4603      	mov	r3, r0
    51e4:	2800      	cmp	r0, #0
    51e6:	d1f2      	bne.n	51ce <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
    51e8:	f89d 000c 	ldrb.w	r0, [sp, #12]
    51ec:	f7ff ff3c 	bl	5068 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
    51f0:	4603      	mov	r3, r0
    51f2:	2800      	cmp	r0, #0
    51f4:	d0e1      	beq.n	51ba <mfg_read_mmr_refs+0xa>
    51f6:	f110 0f0b 	cmn.w	r0, #11
    51fa:	d0de      	beq.n	51ba <mfg_read_mmr_refs+0xa>
    51fc:	e7e7      	b.n	51ce <mfg_read_mmr_refs+0x1e>
	...

00005200 <__aeabi_uldivmod>:
    5200:	b953      	cbnz	r3, 5218 <__aeabi_uldivmod+0x18>
    5202:	b94a      	cbnz	r2, 5218 <__aeabi_uldivmod+0x18>
    5204:	2900      	cmp	r1, #0
    5206:	bf08      	it	eq
    5208:	2800      	cmpeq	r0, #0
    520a:	bf1c      	itt	ne
    520c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    5210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    5214:	f000 b972 	b.w	54fc <__aeabi_idiv0>
    5218:	f1ad 0c08 	sub.w	ip, sp, #8
    521c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    5220:	f000 f806 	bl	5230 <__udivmoddi4>
    5224:	f8dd e004 	ldr.w	lr, [sp, #4]
    5228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    522c:	b004      	add	sp, #16
    522e:	4770      	bx	lr

00005230 <__udivmoddi4>:
    5230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5234:	9e08      	ldr	r6, [sp, #32]
    5236:	4604      	mov	r4, r0
    5238:	4688      	mov	r8, r1
    523a:	2b00      	cmp	r3, #0
    523c:	d14b      	bne.n	52d6 <__udivmoddi4+0xa6>
    523e:	428a      	cmp	r2, r1
    5240:	4615      	mov	r5, r2
    5242:	d967      	bls.n	5314 <__udivmoddi4+0xe4>
    5244:	fab2 f282 	clz	r2, r2
    5248:	b14a      	cbz	r2, 525e <__udivmoddi4+0x2e>
    524a:	f1c2 0720 	rsb	r7, r2, #32
    524e:	fa01 f302 	lsl.w	r3, r1, r2
    5252:	fa20 f707 	lsr.w	r7, r0, r7
    5256:	4095      	lsls	r5, r2
    5258:	ea47 0803 	orr.w	r8, r7, r3
    525c:	4094      	lsls	r4, r2
    525e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    5262:	0c23      	lsrs	r3, r4, #16
    5264:	fbb8 f7fe 	udiv	r7, r8, lr
    5268:	fa1f fc85 	uxth.w	ip, r5
    526c:	fb0e 8817 	mls	r8, lr, r7, r8
    5270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    5274:	fb07 f10c 	mul.w	r1, r7, ip
    5278:	4299      	cmp	r1, r3
    527a:	d909      	bls.n	5290 <__udivmoddi4+0x60>
    527c:	18eb      	adds	r3, r5, r3
    527e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    5282:	f080 811b 	bcs.w	54bc <__udivmoddi4+0x28c>
    5286:	4299      	cmp	r1, r3
    5288:	f240 8118 	bls.w	54bc <__udivmoddi4+0x28c>
    528c:	3f02      	subs	r7, #2
    528e:	442b      	add	r3, r5
    5290:	1a5b      	subs	r3, r3, r1
    5292:	b2a4      	uxth	r4, r4
    5294:	fbb3 f0fe 	udiv	r0, r3, lr
    5298:	fb0e 3310 	mls	r3, lr, r0, r3
    529c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    52a0:	fb00 fc0c 	mul.w	ip, r0, ip
    52a4:	45a4      	cmp	ip, r4
    52a6:	d909      	bls.n	52bc <__udivmoddi4+0x8c>
    52a8:	192c      	adds	r4, r5, r4
    52aa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    52ae:	f080 8107 	bcs.w	54c0 <__udivmoddi4+0x290>
    52b2:	45a4      	cmp	ip, r4
    52b4:	f240 8104 	bls.w	54c0 <__udivmoddi4+0x290>
    52b8:	3802      	subs	r0, #2
    52ba:	442c      	add	r4, r5
    52bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    52c0:	eba4 040c 	sub.w	r4, r4, ip
    52c4:	2700      	movs	r7, #0
    52c6:	b11e      	cbz	r6, 52d0 <__udivmoddi4+0xa0>
    52c8:	40d4      	lsrs	r4, r2
    52ca:	2300      	movs	r3, #0
    52cc:	e9c6 4300 	strd	r4, r3, [r6]
    52d0:	4639      	mov	r1, r7
    52d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    52d6:	428b      	cmp	r3, r1
    52d8:	d909      	bls.n	52ee <__udivmoddi4+0xbe>
    52da:	2e00      	cmp	r6, #0
    52dc:	f000 80eb 	beq.w	54b6 <__udivmoddi4+0x286>
    52e0:	2700      	movs	r7, #0
    52e2:	e9c6 0100 	strd	r0, r1, [r6]
    52e6:	4638      	mov	r0, r7
    52e8:	4639      	mov	r1, r7
    52ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    52ee:	fab3 f783 	clz	r7, r3
    52f2:	2f00      	cmp	r7, #0
    52f4:	d147      	bne.n	5386 <__udivmoddi4+0x156>
    52f6:	428b      	cmp	r3, r1
    52f8:	d302      	bcc.n	5300 <__udivmoddi4+0xd0>
    52fa:	4282      	cmp	r2, r0
    52fc:	f200 80fa 	bhi.w	54f4 <__udivmoddi4+0x2c4>
    5300:	1a84      	subs	r4, r0, r2
    5302:	eb61 0303 	sbc.w	r3, r1, r3
    5306:	2001      	movs	r0, #1
    5308:	4698      	mov	r8, r3
    530a:	2e00      	cmp	r6, #0
    530c:	d0e0      	beq.n	52d0 <__udivmoddi4+0xa0>
    530e:	e9c6 4800 	strd	r4, r8, [r6]
    5312:	e7dd      	b.n	52d0 <__udivmoddi4+0xa0>
    5314:	b902      	cbnz	r2, 5318 <__udivmoddi4+0xe8>
    5316:	deff      	udf	#255	; 0xff
    5318:	fab2 f282 	clz	r2, r2
    531c:	2a00      	cmp	r2, #0
    531e:	f040 808f 	bne.w	5440 <__udivmoddi4+0x210>
    5322:	1b49      	subs	r1, r1, r5
    5324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    5328:	fa1f f885 	uxth.w	r8, r5
    532c:	2701      	movs	r7, #1
    532e:	fbb1 fcfe 	udiv	ip, r1, lr
    5332:	0c23      	lsrs	r3, r4, #16
    5334:	fb0e 111c 	mls	r1, lr, ip, r1
    5338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    533c:	fb08 f10c 	mul.w	r1, r8, ip
    5340:	4299      	cmp	r1, r3
    5342:	d907      	bls.n	5354 <__udivmoddi4+0x124>
    5344:	18eb      	adds	r3, r5, r3
    5346:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    534a:	d202      	bcs.n	5352 <__udivmoddi4+0x122>
    534c:	4299      	cmp	r1, r3
    534e:	f200 80cd 	bhi.w	54ec <__udivmoddi4+0x2bc>
    5352:	4684      	mov	ip, r0
    5354:	1a59      	subs	r1, r3, r1
    5356:	b2a3      	uxth	r3, r4
    5358:	fbb1 f0fe 	udiv	r0, r1, lr
    535c:	fb0e 1410 	mls	r4, lr, r0, r1
    5360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    5364:	fb08 f800 	mul.w	r8, r8, r0
    5368:	45a0      	cmp	r8, r4
    536a:	d907      	bls.n	537c <__udivmoddi4+0x14c>
    536c:	192c      	adds	r4, r5, r4
    536e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    5372:	d202      	bcs.n	537a <__udivmoddi4+0x14a>
    5374:	45a0      	cmp	r8, r4
    5376:	f200 80b6 	bhi.w	54e6 <__udivmoddi4+0x2b6>
    537a:	4618      	mov	r0, r3
    537c:	eba4 0408 	sub.w	r4, r4, r8
    5380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    5384:	e79f      	b.n	52c6 <__udivmoddi4+0x96>
    5386:	f1c7 0c20 	rsb	ip, r7, #32
    538a:	40bb      	lsls	r3, r7
    538c:	fa22 fe0c 	lsr.w	lr, r2, ip
    5390:	ea4e 0e03 	orr.w	lr, lr, r3
    5394:	fa01 f407 	lsl.w	r4, r1, r7
    5398:	fa20 f50c 	lsr.w	r5, r0, ip
    539c:	fa21 f30c 	lsr.w	r3, r1, ip
    53a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
    53a4:	4325      	orrs	r5, r4
    53a6:	fbb3 f9f8 	udiv	r9, r3, r8
    53aa:	0c2c      	lsrs	r4, r5, #16
    53ac:	fb08 3319 	mls	r3, r8, r9, r3
    53b0:	fa1f fa8e 	uxth.w	sl, lr
    53b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    53b8:	fb09 f40a 	mul.w	r4, r9, sl
    53bc:	429c      	cmp	r4, r3
    53be:	fa02 f207 	lsl.w	r2, r2, r7
    53c2:	fa00 f107 	lsl.w	r1, r0, r7
    53c6:	d90b      	bls.n	53e0 <__udivmoddi4+0x1b0>
    53c8:	eb1e 0303 	adds.w	r3, lr, r3
    53cc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    53d0:	f080 8087 	bcs.w	54e2 <__udivmoddi4+0x2b2>
    53d4:	429c      	cmp	r4, r3
    53d6:	f240 8084 	bls.w	54e2 <__udivmoddi4+0x2b2>
    53da:	f1a9 0902 	sub.w	r9, r9, #2
    53de:	4473      	add	r3, lr
    53e0:	1b1b      	subs	r3, r3, r4
    53e2:	b2ad      	uxth	r5, r5
    53e4:	fbb3 f0f8 	udiv	r0, r3, r8
    53e8:	fb08 3310 	mls	r3, r8, r0, r3
    53ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    53f0:	fb00 fa0a 	mul.w	sl, r0, sl
    53f4:	45a2      	cmp	sl, r4
    53f6:	d908      	bls.n	540a <__udivmoddi4+0x1da>
    53f8:	eb1e 0404 	adds.w	r4, lr, r4
    53fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    5400:	d26b      	bcs.n	54da <__udivmoddi4+0x2aa>
    5402:	45a2      	cmp	sl, r4
    5404:	d969      	bls.n	54da <__udivmoddi4+0x2aa>
    5406:	3802      	subs	r0, #2
    5408:	4474      	add	r4, lr
    540a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    540e:	fba0 8902 	umull	r8, r9, r0, r2
    5412:	eba4 040a 	sub.w	r4, r4, sl
    5416:	454c      	cmp	r4, r9
    5418:	46c2      	mov	sl, r8
    541a:	464b      	mov	r3, r9
    541c:	d354      	bcc.n	54c8 <__udivmoddi4+0x298>
    541e:	d051      	beq.n	54c4 <__udivmoddi4+0x294>
    5420:	2e00      	cmp	r6, #0
    5422:	d069      	beq.n	54f8 <__udivmoddi4+0x2c8>
    5424:	ebb1 050a 	subs.w	r5, r1, sl
    5428:	eb64 0403 	sbc.w	r4, r4, r3
    542c:	fa04 fc0c 	lsl.w	ip, r4, ip
    5430:	40fd      	lsrs	r5, r7
    5432:	40fc      	lsrs	r4, r7
    5434:	ea4c 0505 	orr.w	r5, ip, r5
    5438:	e9c6 5400 	strd	r5, r4, [r6]
    543c:	2700      	movs	r7, #0
    543e:	e747      	b.n	52d0 <__udivmoddi4+0xa0>
    5440:	f1c2 0320 	rsb	r3, r2, #32
    5444:	fa20 f703 	lsr.w	r7, r0, r3
    5448:	4095      	lsls	r5, r2
    544a:	fa01 f002 	lsl.w	r0, r1, r2
    544e:	fa21 f303 	lsr.w	r3, r1, r3
    5452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    5456:	4338      	orrs	r0, r7
    5458:	0c01      	lsrs	r1, r0, #16
    545a:	fbb3 f7fe 	udiv	r7, r3, lr
    545e:	fa1f f885 	uxth.w	r8, r5
    5462:	fb0e 3317 	mls	r3, lr, r7, r3
    5466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    546a:	fb07 f308 	mul.w	r3, r7, r8
    546e:	428b      	cmp	r3, r1
    5470:	fa04 f402 	lsl.w	r4, r4, r2
    5474:	d907      	bls.n	5486 <__udivmoddi4+0x256>
    5476:	1869      	adds	r1, r5, r1
    5478:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    547c:	d22f      	bcs.n	54de <__udivmoddi4+0x2ae>
    547e:	428b      	cmp	r3, r1
    5480:	d92d      	bls.n	54de <__udivmoddi4+0x2ae>
    5482:	3f02      	subs	r7, #2
    5484:	4429      	add	r1, r5
    5486:	1acb      	subs	r3, r1, r3
    5488:	b281      	uxth	r1, r0
    548a:	fbb3 f0fe 	udiv	r0, r3, lr
    548e:	fb0e 3310 	mls	r3, lr, r0, r3
    5492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    5496:	fb00 f308 	mul.w	r3, r0, r8
    549a:	428b      	cmp	r3, r1
    549c:	d907      	bls.n	54ae <__udivmoddi4+0x27e>
    549e:	1869      	adds	r1, r5, r1
    54a0:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    54a4:	d217      	bcs.n	54d6 <__udivmoddi4+0x2a6>
    54a6:	428b      	cmp	r3, r1
    54a8:	d915      	bls.n	54d6 <__udivmoddi4+0x2a6>
    54aa:	3802      	subs	r0, #2
    54ac:	4429      	add	r1, r5
    54ae:	1ac9      	subs	r1, r1, r3
    54b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    54b4:	e73b      	b.n	532e <__udivmoddi4+0xfe>
    54b6:	4637      	mov	r7, r6
    54b8:	4630      	mov	r0, r6
    54ba:	e709      	b.n	52d0 <__udivmoddi4+0xa0>
    54bc:	4607      	mov	r7, r0
    54be:	e6e7      	b.n	5290 <__udivmoddi4+0x60>
    54c0:	4618      	mov	r0, r3
    54c2:	e6fb      	b.n	52bc <__udivmoddi4+0x8c>
    54c4:	4541      	cmp	r1, r8
    54c6:	d2ab      	bcs.n	5420 <__udivmoddi4+0x1f0>
    54c8:	ebb8 0a02 	subs.w	sl, r8, r2
    54cc:	eb69 020e 	sbc.w	r2, r9, lr
    54d0:	3801      	subs	r0, #1
    54d2:	4613      	mov	r3, r2
    54d4:	e7a4      	b.n	5420 <__udivmoddi4+0x1f0>
    54d6:	4660      	mov	r0, ip
    54d8:	e7e9      	b.n	54ae <__udivmoddi4+0x27e>
    54da:	4618      	mov	r0, r3
    54dc:	e795      	b.n	540a <__udivmoddi4+0x1da>
    54de:	4667      	mov	r7, ip
    54e0:	e7d1      	b.n	5486 <__udivmoddi4+0x256>
    54e2:	4681      	mov	r9, r0
    54e4:	e77c      	b.n	53e0 <__udivmoddi4+0x1b0>
    54e6:	3802      	subs	r0, #2
    54e8:	442c      	add	r4, r5
    54ea:	e747      	b.n	537c <__udivmoddi4+0x14c>
    54ec:	f1ac 0c02 	sub.w	ip, ip, #2
    54f0:	442b      	add	r3, r5
    54f2:	e72f      	b.n	5354 <__udivmoddi4+0x124>
    54f4:	4638      	mov	r0, r7
    54f6:	e708      	b.n	530a <__udivmoddi4+0xda>
    54f8:	4637      	mov	r7, r6
    54fa:	e6e9      	b.n	52d0 <__udivmoddi4+0xa0>

000054fc <__aeabi_idiv0>:
    54fc:	4770      	bx	lr
    54fe:	bf00      	nop

00005500 <flash_devs>:
    5500:	5554 0000 00e8 2000                         TU..... 

00005508 <spiflash_characteristics>:
    5508:	7530 0000 1a80 0006 d4c0 0001 3500 000c     0u...........5..
    5518:	49f0 0002 4240 000f c6c0 002d 9680 0098     .I..@B....-.....
    5528:	02bc 0000 0bb8 0000 0014 0000 0032 0000     ............2...

00005538 <spiflash_flash_funcs>:
    5538:	07df 0000 0869 0000 09e3 0000 0695 0000     ....i...........
    5548:	0000 0000 0b21 0000 0ab5 0000               ....!.......

00005554 <nrf52k_flash_dev>:
    5554:	556c 0000 0000 0000 0000 0008 0080 0000     lU..............
    5564:	0001 0000 00ff 0000                         ........

0000556c <nrf52k_flash_funcs>:
    556c:	0cd5 0000 0c05 0000 0b8d 0000 0be5 0000     ................
    557c:	0000 0000 0be1 0000 0000 0000               ............

00005588 <nrf52_hal_spis>:
    5588:	0160 2000 0000 0000 0000 0000 0000 0000     `.. ............

00005598 <os_bsp_spi0m_cfg>:
    5598:	0302 0004                                   ....

0000559c <nrf52_hal_timers>:
    559c:	0188 2000 0000 0000 0000 0000 0000 0000     ... ............
	...
    55b4:	7341 6573 7472 4020 3020 2578 0a78 0000     Assert @ 0x%x...
    55c4:	7341 6573 7472 4020 3020 2578 2078 202d     Assert @ 0x%x - 
    55d4:	7325 253a 0a64 0000 6e55 6168 646e 656c     %s:%d...Unhandle
    55e4:	2064 6e69 6574 7272 7075 2074 2528 646c     d interrupt (%ld
    55f4:	2c29 6520 6378 7065 6974 6e6f 7320 2070     ), exception sp 
    5604:	7830 3025 6c38 0a78 0000 0000 7220 3a30     0x%08lx..... r0:
    5614:	7830 3025 6c38 2078 7220 3a31 7830 3025     0x%08lx  r1:0x%0
    5624:	6c38 2078 7220 3a32 7830 3025 6c38 2078     8lx  r2:0x%08lx 
    5634:	7220 3a33 7830 3025 6c38 0a78 0000 0000      r3:0x%08lx.....
    5644:	7220 3a34 7830 3025 6c38 2078 7220 3a35      r4:0x%08lx  r5:
    5654:	7830 3025 6c38 2078 7220 3a36 7830 3025     0x%08lx  r6:0x%0
    5664:	6c38 2078 7220 3a37 7830 3025 6c38 0a78     8lx  r7:0x%08lx.
    5674:	0000 0000 7220 3a38 7830 3025 6c38 2078     .... r8:0x%08lx 
    5684:	7220 3a39 7830 3025 6c38 2078 3172 3a30      r9:0x%08lx r10:
    5694:	7830 3025 6c38 2078 3172 3a31 7830 3025     0x%08lx r11:0x%0
    56a4:	6c38 0a78 0000 0000 3172 3a32 7830 3025     8lx.....r12:0x%0
    56b4:	6c38 2078 6c20 3a72 7830 3025 6c38 2078     8lx  lr:0x%08lx 
    56c4:	7020 3a63 7830 3025 6c38 2078 7370 3a72      pc:0x%08lx psr:
    56d4:	7830 3025 6c38 0a78 0000 0000 4349 5253     0x%08lx.....ICSR
    56e4:	303a 2578 3830 786c 4820 5346 3a52 7830     :0x%08lx HFSR:0x
    56f4:	3025 6c38 2078 4643 5253 303a 2578 3830     %08lx CFSR:0x%08
    5704:	786c 000a 4642 5241 303a 2578 3830 786c     lx..BFAR:0x%08lx
    5714:	4d20 464d 5241 303a 2578 3830 786c 000a      MMFAR:0x%08lx..
    5724:	736d 7379 315f 0000 6f42 746f 6f6c 6461     msys_1..Bootload
    5734:	7265 6420 6e6f 0a65 0000 0000 7453 7261     er done.....Star
    5744:	6974 676e 4220 6f6f 6c74 616f 6564 2e72     ting Bootloader.
    5754:	2e2e 000a 6843 6365 206b 7562 7474 6e6f     ....Check button
    5764:	203a 6425 000a 0000 6157 7469 6e69 2067     : %d....Waiting 
    5774:	2035 6573 6f63 646e 2073 6f66 2072 7562     5 seconds for bu
    5784:	7474 6e6f 2e2e 0a2e 0000 0000 6c46 7361     tton........Flas
    5794:	6968 676e 6120 646e 7220 7365 7465 6974     hing and resetti
    57a4:	676e 2e2e 0a2e 0000                         ng......

000057ac <backlights>:
    57ac:	160e 0017                                   ....

000057b0 <fast_pulse>:
    57b0:	0101 0000 0101 0202 0202 0202               ............

000057bc <faster_pulse>:
    57bc:	0001 0201 0202 0000                         ........

000057c4 <fastest_pulse>:
    57c4:	0200 0002                                   ....

000057c8 <slow_pulse>:
    57c8:	0101 0001 0000 0101 0201 0202 0202 0202     ................
    57d8:	0202 0000                                   ....

000057dc <slower_pulse>:
    57dc:	0101 0101 0101 0000 0000 0000 0101 0101     ................
    57ec:	0101 0202 0202 0202 0202 0202 0202 0202     ................
    57fc:	0202 0202                                   ....

00005800 <COLMOD_PARA.8090>:
    5800:	0005 0000                                   ....

00005804 <FRMCTR1_PARA.8078>:
    5804:	2c01 002d                                   .,-.

00005808 <FRMCTR2_PARA.8079>:
    5808:	2c01 002d                                   .,-.

0000580c <FRMCTR3_PARA.8080>:
    580c:	2c01 012d 2d2c 0000                         .,-.,-..

00005814 <INVCTR_PARA.8081>:
    5814:	0007 0000                                   ....

00005818 <MADCTL1_PARA.8088>:
    5818:	0000 0000                                   ....

0000581c <PWCTR1_PARA.8082>:
    581c:	02a2 0084                                   ....

00005820 <PWCTR2_PARA.8083>:
    5820:	00c5 0000                                   ....

00005824 <PWCTR3_PARA.8084>:
    5824:	000a 0000                                   ....

00005828 <PWCTR4_PARA.8085>:
    5828:	2a8a 0000                                   .*..

0000582c <PWCTR5_PARA.8086>:
    582c:	ee8a 0000                                   ....

00005830 <VMCTR1_PARA.8087>:
    5830:	000e 0000 6944 7073 616c 6979 676e 6920     ....Displaying i
    5840:	616d 6567 2e2e 0a2e 0000 0000 6d49 6761     mage........Imag
    5850:	2065 6964 7073 616c 6579 0a64 0000 0000     e displayed.....
    5860:	3025 6c36 2075 0000 0103 0000               %06lu ......

0000586c <boot_img_magic>:
    586c:	c277 f395 d260 7fef 5235 0f50 b62c 8079     w...`...5RP.,.y.

0000587c <boot_swap_tables>:
    587c:	0104 0304 0204 0104 0104 0304 0301 0403     ................
    588c:	0401 0000 6570 6d72 0000 0000 6574 7473     ....perm....test
    589c:	0000 0000 5542 3b47 6320 6e61 7427 6820     ....BUG; can't h
    58ac:	7061 6570 006e 0000 6572 6576 7472 0000     appen...revert..
    58bc:	495b 464e 205d 7753 7061 7420 7079 3a65     [INF] Swap type:
    58cc:	2520 0a73 0000 0000 495b 464e 205d 7753      %s.....[INF] Sw
    58dc:	7061 7420 7079 3a65 6e20 6e6f 0065 0000     ap type: none...
    58ec:	455b 5252 205d 6170 696e 2163 0000 0000     [ERR] panic!....
    58fc:	575b 4e52 205d 6146 6c69 6465 7220 6165     [WRN] Failed rea
    590c:	6964 676e 7320 6365 6f74 7372 203b 4f42     ding sectors; BO
    591c:	544f 4d5f 5841 495f 474d 535f 4345 4f54     OT_MAX_IMG_SECTO
    592c:	5352 253d 2064 202d 6f74 206f 6d73 6c61     RS=%d - too smal
    593c:	3f6c 000a 575b 4e52 205d 6146 6c69 6465     l?..[WRN] Failed
    594c:	7220 6165 6964 676e 6920 616d 6567 6820      reading image h
    595c:	6165 6564 7372 203b 6d49 6761 3d65 7525     eaders; Image=%u
    596c:	000a 0000 575b 4e52 205d 6146 6c69 6465     ....[WRN] Failed
    597c:	7220 6165 6964 676e 6220 6f6f 2074 7473      reading boot st
    598c:	7461 7375 203b 6d49 6761 3d65 7525 000a     atus; Image=%u..
    599c:	7270 6d69 7261 0079 6573 6f63 646e 7261     primary.secondar
    59ac:	0079 0000 455b 5252 205d 6d49 6761 2065     y...[ERR] Image 
    59bc:	6e69 7420 6568 2520 2073 6c73 746f 6920     in the %s slot i
    59cc:	2073 6f6e 2074 6176 696c 2164 000a 0000     s not valid!....
    59dc:	455b 5252 205d 6162 2064 6d69 6761 2065     [ERR] bad image 
    59ec:	616d 6967 2063 7830 6c25 3b78 4920 616d     magic 0x%lx; Ima
    59fc:	6567 253d 0a75 0000 575b 4e52 205d 6143     ge=%u...[WRN] Ca
    5a0c:	6e6e 746f 7520 6770 6172 6564 203a 6f6d     nnot upgrade: mo
    5a1c:	6572 7320 6365 6f74 7372 7420 6168 206e     re sectors than 
    5a2c:	6c61 6f6c 6577 0064 575b 4e52 205d 6143     allowed.[WRN] Ca
    5a3c:	6e6e 746f 7520 6770 6172 6564 203a 6c73     nnot upgrade: sl
    5a4c:	746f 2073 6168 6576 6e20 6e6f 632d 6d6f     ots have non-com
    5a5c:	6170 6974 6c62 2065 6573 7463 726f 0073     patible sectors.
    5a6c:	575b 4e52 205d 6143 6e6e 746f 7520 6770     [WRN] Cannot upg
    5a7c:	6172 6564 203a 6f6e 2074 6c61 206c 6573     rade: not all se
    5a8c:	7463 726f 2073 6966 2074 6e69 6973 6564     ctors fit inside
    5a9c:	7320 7263 7461 6863 0000 0000 575b 4e52      scratch....[WRN
    5aac:	205d 6143 6e6e 746f 7520 6770 6172 6564     ] Cannot upgrade
    5abc:	203a 6c73 746f 2073 7261 2065 6f6e 2074     : slots are not 
    5acc:	6f63 706d 7461 6269 656c 0000               compatible..

00005ad8 <boot_status_tables>:
    5ad8:	0501 0001 0501 0203 0104 0104 0403 0203     ................
    5ae8:	455b 5252 205d 6544 6574 7463 6465 6920     [ERR] Detected i
    5af8:	636e 6e6f 6973 7473 6e65 2074 7473 7461     nconsistent stat
    5b08:	7375 0021 6162 0064 6f67 646f 0000 0000     us!.bad.good....
    5b18:	6e75 6573 0074 0000 6373 6172 6374 0068     unset...scratch.
    5b28:	6f6e 656e 0000 0000 7270 6d69 7261 2079     none....primary 
    5b38:	6c73 746f 0000 0000 7250 6d69 7261 2079     slot....Primary 
    5b48:	6d69 6761 0065 0000 495b 464e 205d 7325     image...[INF] %s
    5b58:	203a 616d 6967 3d63 7325 202c 7773 7061     : magic=%s, swap
    5b68:	745f 7079 3d65 7830 7825 202c 6f63 7970     _type=0x%x, copy
    5b78:	645f 6e6f 3d65 7830 7825 202c 6d69 6761     _done=0x%x, imag
    5b88:	5f65 6b6f 303d 2578 0a78 0000 6353 6172     e_ok=0x%x...Scra
    5b98:	6374 0068 495b 464e 205d 6f42 746f 7320     tch.[INF] Boot s
    5ba8:	756f 6372 3a65 2520 0a73 0000 495b 464e     ource: %s...[INF
    5bb8:	205d 6f42 746f 7320 756f 6372 3a65 6e20     ] Boot source: n
    5bc8:	6e6f 0065                                   one.

00005bcc <K>:
    5bcc:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
    5bdc:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
    5bec:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
    5bfc:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
    5c0c:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
    5c1c:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
    5c2c:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
    5c3c:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
    5c4c:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
    5c5c:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
    5c6c:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
    5c7c:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
    5c8c:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
    5c9c:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
    5cac:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
    5cbc:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

00005ccc <stdout>:
    5ccc:	0154 2000                                   T.. 

00005cd0 <sysflash_map_dflt>:
	...
    5cd8:	7000 0000 0001 0000 8000 0000 4000 0007     .p...........@..
    5ce8:	0102 0000 0000 0004 4000 0007 0003 0000     .........@......
    5cf8:	c000 0007 1000 0000 0010 0000 7000 0000     .............p..
    5d08:	1000 0000 0111 0000 4000 000b c000 0034     .........@....4.

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  23856	    136	  25500	  49492	   c154	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
