
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000000d9

Program Header:
0x70000001 off    0x00014ecc vaddr 0x00004ecc paddr 0x00004ecc align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00004ee4 memsz 0x00004ee4 flags r-x
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x00004ee4 align 2**16
         filesz 0x00000088 memsz 0x0000634c flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
private flags = 5000200: [Version5 EABI] [soft-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .text              00004ecc  00000000  00000000  00010000  2**2  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.extab         00000000  00004ecc  00004ecc  00020160  2**0  CONTENTS
  2 .ARM.exidx         00000018  00004ecc  00004ecc  00014ecc  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  4 .rtt               00000000  200000d8  200000d8  00020160  2**0  CONTENTS
  5 .data              00000088  200000d8  00004ee4  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  6 .bssnz             00000000  20000160  20000160  00020160  2**0  CONTENTS
  7 .bss               000062c4  20000160  00004f6c  00020160  2**2  ALLOC
  8 .stack_dummy       000001b0  20006428  20006428  00020160  2**3  CONTENTS, READONLY
  9 .ARM.attributes    0000002f  00000000  00000000  00020310  2**0  CONTENTS, READONLY
 10 .comment           0000007f  00000000  00000000  0002033f  2**0  CONTENTS, READONLY
 11 .svc_table         00000004  00000000  00000000  000203be  2**0  CONTENTS, READONLY
 12 .debug_line        00013959  00000000  00000000  000203c2  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_info        0002c745  00000000  00000000  00033d1b  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev      00008e16  00000000  00000000  00060460  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges     00001360  00000000  00000000  00069278  2**3  CONTENTS, READONLY, DEBUGGING
 16 .debug_str         00006448  00000000  00000000  0006a5d8  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc         0000ed69  00000000  00000000  00070a20  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges      00001848  00000000  00000000  0007f789  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_frame       00002f48  00000000  00000000  00080fd4  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00004ecc l    d  .ARM.extab	00000000 .ARM.extab
00004ecc l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000160 l    d  .bssnz	00000000 .bssnz
20000160 l    d  .bss	00000000 .bss
20006428 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
000000e0 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
000001e0 l     F .text	00000034 errata_16
000001e0 l     F .text	00000034 errata_57
000001e0 l     F .text	00000034 errata_37
000001e0 l     F .text	00000034 errata_32
00000214 l     F .text	00000040 errata_31
00000214 l     F .text	00000040 errata_108
00000214 l     F .text	00000040 errata_36
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00004734 l     O .text	00000008 flash_devs
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 spiflash.c
000004f0 l     F .text	0000000c hal_spiflash_sector_info
000004fc l     F .text	00000006 spiflash_cs_activate.isra.4
00000502 l     F .text	00000006 spiflash_cs_deactivate.isra.5
00000508 l     F .text	00000028 spiflash_release_power_down_generic
000005bc l     F .text	00000040 spiflash_wait_ready_till.part.6
00000614 l     F .text	00000060 hal_spiflash_read
00000690 l     F .text	000000c0 hal_spiflash_write
00000750 l     F .text	0000007a spiflash_execute_erase
000007ca l     F .text	00000026 spiflash_erase_cmd
000007fa l     F .text	00000004 hal_spiflash_erase_sector
000008a8 l     F .text	00000004 hal_spiflash_erase
00000914 l     F .text	0000003a hal_spiflash_init
0000476c l     O .text	0000001c spiflash_flash_funcs
20000128 l     O .data	00000010 supported_chips
0000473c l     O .text	00000030 spiflash_characteristics
00000000 l    df *ABS*	00000000 hal_common.c
00000000 l    df *ABS*	00000000 hal_flash.c
00000954 l     F .text	00000024 nrf52k_flash_wait_ready
00000978 l     F .text	0000004c nrf52k_flash_erase_sector
000009c4 l     F .text	00000004 nrf52k_flash_init
000009c8 l     F .text	000000c8 nrf52k_flash_write
00000a90 l     F .text	0000000e nrf52k_flash_read
00000a9e l     F .text	00000028 nrf52k_flash_sector_info
000047a0 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 hal_spi.c
000047bc l     O .text	00000004 CSWTCH.27
000047c0 l     O .text	00000010 nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
00000f68 l     F .text	0000002c nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
000047d0 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 hal_timer.c
0000104c l     F .text	00000020 __NVIC_SetPendingIRQ
0000106c l     F .text	00000038 hal_timer_read_bsptimer
000010a4 l     F .text	0000009c nrf_timer_set_ocmp
000047d4 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
0000145c l     F .text	00000020 os_dev_initialize
200001a4 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 os.c
00000000 l    df *ABS*	00000000 os_eventq.c
00000000 l    df *ABS*	00000000 os_mempool.c
000014fc l     F .text	00000068 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00001604 l     F .text	00000024 os_msys_find_pool
200001b8 l     O .bss	00004900 os_msys_1_data
20004ab8 l     O .bss	0000000c os_msys_1_mbuf_pool
20004ac4 l     O .bss	0000001c os_msys_1_mempool
20000138 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
00001770 l       .text	00000000 SVC_User
0000178e l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 os_mbuf.c
000017fc l     F .text	00000016 _os_mbuf_trailingspace
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 memcmp.c
00001974 l       .text	00000000 test1
00001968 l       .text	00000000 loop1
0000197a l       .text	00000000 res1
00001996 l       .text	00000000 test2
0000199e l       .text	00000000 done
0000198a l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
000019aa l       .text	00000000 test1
000019a6 l       .text	00000000 loop1
000019b8 l       .text	00000000 test2
000019b4 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 blink.c
00001a04 l     F .text	0000004c blink_pattern
20000148 l     O .data	00000004 first_blink.7809
00004952 l     O .text	00000003 backlights
00004955 l     O .text	0000000c fast_pulse
00004961 l     O .text	00000006 faster_pulse
00004967 l     O .text	00000003 fastest_pulse
0000496a l     O .text	00000012 slow_pulse
0000497c l     O .text	00000024 slower_pulse
00000000 l    df *ABS*	00000000 pinetime_boot.c
00000000 l    df *ABS*	00000000 display.c
00001c54 l     F .text	00000010 delay_ms.isra.0
00001c64 l     F .text	00000016 transmit_spi.part.1
00001c64 l     F .text	00000016 write_command.part.2
00001c7a l     F .text	0000002e transmit_spi
00001ca8 l     F .text	0000004c write_command
20004ae8 l     O .bss	00000100 flash_buffer
00004a17 l     O .text	00000001 COLMOD_PARA.8090
00004a18 l     O .text	00000003 FRMCTR1_PARA.8078
00004a1b l     O .text	00000003 FRMCTR2_PARA.8079
00004a1e l     O .text	00000006 FRMCTR3_PARA.8080
00004a24 l     O .text	00000001 INVCTR_PARA.8081
00004a25 l     O .text	00000001 MADCTL1_PARA.8088
00004a26 l     O .text	00000003 PWCTR1_PARA.8082
00004a29 l     O .text	00000001 PWCTR2_PARA.8083
00004a2a l     O .text	00000002 PWCTR3_PARA.8084
00004a2c l     O .text	00000002 PWCTR4_PARA.8085
00004a2e l     O .text	00000002 PWCTR5_PARA.8086
00004a30 l     O .text	00000001 VMCTR1_PARA.8087
00000000 l    df *ABS*	00000000 console.c
20004be8 l     O .bss	00000010 avail_queue
20004bfc l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 semihosting_console.c
20004c0c l     O .bss	00000004 semihost_mbuf
2000014c l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 ticks.c
20004c10 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
000020f4 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_boot-sysinit-app.c
00000000 l    df *ABS*	00000000 bootutil_misc.c
00002164 l     F .text	0000005c boot_write_trailer
00004a70 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 loader.c
00002566 l     F .text	0000008a boot_read_image_size
000025f0 l     F .text	00000030 boot_read_image_headers
00002620 l     F .text	000000c0 boot_validate_slot.isra.3.constprop.5
000026e0 l     F .text	00000066 boot_read_sectors
00002774 l     F .text	00000084 boot_swap_image
20004c14 l     O .bss	0000006c boot_data
20004c80 l     O .bss	00000400 buf.7201
20005080 l     O .bss	00000600 primary_slot_sectors.7241
20005680 l     O .bss	00000600 scratch_sectors.7243
20005c80 l     O .bss	00000600 secondary_slot_sectors.7242
20006280 l     O .bss	00000100 tmpbuf.7134
00000000 l    df *ABS*	00000000 swap_misc.c
00000000 l    df *ABS*	00000000 swap_scratch.c
00004ca6 l     O .text	00000010 boot_status_tables
00000000 l    df *ABS*	00000000 image_validate.c
00000000 l    df *ABS*	00000000 tlv.c
00000000 l    df *ABS*	00000000 flash_map_extended.c
00000000 l    df *ABS*	00000000 sha256.c
00004d80 l     O .text	00000100 K
00000000 l    df *ABS*	00000000 hal_flash.c
00003810 l     F .text	0000001c hal_flash_check_addr
20006380 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_system_start.c
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 mynewt.c
00003ab4 l     F .text	00000004 stdin_read
00003ab8 l     F .text	00000010 stdout_write
20000154 l     O .data	00000004 _stdin
20000158 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 tinyprintf.c
00003ac8 l     F .text	000000d2 ui2a
00003b9a l     F .text	00000022 putf
00003bbc l     F .text	0000011c putchw
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 flash_map.c
00003fa8 l     F .text	00000034 flash_area_find_idx
2000638c l     O .bss	00000078 mfg_areas.8029
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
00004228 l     F .text	000000a4 mfg_read_next_mmr
000042cc l     F .text	0000006c mfg_read_tlv_body
20006404 l     O .bss	00000001 mfg_initialized
20006408 l     O .bss	00000018 mfg_mmrs
20006420 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 nrf52_boot-sysflash.c
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00002058 g     F .text	00000050 console_buffer
20006428 g       .bss	00000000 __HeapBase
00000000 g       .svc_table	00000000 SVC_Count
00000144  w    F .text	00000002 TIMER2_IRQHandler
200001b0 g     O .bss	00000008 g_os_mempool_list
00000144  w    F .text	00000002 RTC0_IRQHandler
00002234 g     F .text	000000c4 boot_read_swap_state
00002ae0 g     F .text	0000000c boot_go
200000d8 g       .data	00000000 __data_start__
00004788 g     O .text	00000018 nrf52k_flash_dev
00003f74 g     F .text	00000024 printf
00004e80 g     O .text	00000004 stdout
00000144  w    F .text	00000002 SWI0_EGU0_IRQHandler
00000b16 g     F .text	00000018 hal_gpio_write
0000353c g     F .text	00000130 mbedtls_internal_sha256_process
00000136  w    F .text	00000002 HardFault_Handler
000011ec g     F .text	00000058 hal_timer_init
000043b8 g     F .text	00000016 mfg_seek_next_with_type
00003a5a g     F .text	0000000a hal_system_start
000023c0 g     F .text	00000038 boot_write_swap_info
00003850 g     F .text	00000010 hal_flash_align
00000144  w    F .text	00000002 SWI2_EGU2_IRQHandler
000021c0 g     F .text	0000001e boot_magic_compatible_check
000017be g     F .text	0000000c SysTick_Handler
00000144  w    F .text	00000002 GPIOTE_IRQHandler
00001140 g     F .text	000000ac nrf52_timer0_irq_handler
000015c6 g     F .text	0000002c os_memblock_put
00000144  w    F .text	00000002 PWM1_IRQHandler
00001678 g     F .text	00000030 os_msys_get_pkthdr
20006384 g     O .bss	00000004 flash_map
000039d8 g     F .text	0000002e hal_flash_is_erased
00001794 g     F .text	0000002a PendSV_Handler
00000134  w    F .text	00000002 NMI_Handler
00004ee4 g       .ARM.exidx	00000000 __exidx_end
00003490 g     F .text	00000008 mbedtls_sha256_init
00000000 g       .text	00000000 __isr_vector_start
00000164 g     F .text	00000030 hal_system_reset
20000148 g       .data	00000000 __aeabi_unwind_cpp_pr0
00000144  w    F .text	00000002 POWER_CLOCK_IRQHandler
00004ee4 g       .ARM.exidx	00000000 __etext
00000144  w    F .text	00000002 RADIO_IRQHandler
000040a8 g     F .text	00000024 flash_area_write
20000160 g       .bssnz	00000000 __bssnz_start__
00000830 g     F .text	00000078 spiflash_erase
00000144  w    F .text	00000002 PDM_IRQHandler
00002aec g     F .text	00000082 swap_erase_trailer_sectors
00002d8c g     F .text	000000c8 boot_slots_compatible
000028b4 g     F .text	0000022c context_boot_go
000043ce g     F .text	00000006 mfg_read_tlv_flash_area
000020e8 g     F .text	0000000c console_get_ticks
000015f4 g     F .text	00000010 os_mempool_module_init
00000144  w    F .text	00000002 TEMP_IRQHandler
00000144  w    F .text	00000002 QDEC_IRQHandler
00000144  w    F .text	00000002 TIMER3_IRQHandler
000014a4 g     F .text	00000006 timer_handler
00002f88 g     F .text	000002c4 swap_run
000020e4 g     F .text	00000004 semihosting_console_init
000019a4 g     F .text	0000001a memcpy
00000f94 g     F .text	00000078 hal_watchdog_init
00001434 g     F .text	00000008 os_cputime_init
00002c6e g     F .text	00000030 swap_set_image_ok
00004434 g     F .text	00000000 .hidden __aeabi_uldivmod
00003a06 g     F .text	00000054 hal_flash_isempty
00003a80 g     F .text	00000034 puts
00000000 g       *ABS*	00000000 _imghdr_size
20004bf8 g     O .bss	00000004 console_is_midline
00001874 g     F .text	00000010 os_mbuf_free
200000e4 g     O .data	00000004 SystemCoreClock
00000158 g     F .text	0000000c hal_system_init
00000144  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
00004084 g     F .text	00000024 flash_area_read
00001358 g     F .text	00000044 __assert_func
00000b50 g     F .text	00000074 nrf52_spi0_irq_handler
00001f74 g     F .text	0000003c console_pkg_init
0000013c  w    F .text	00000002 UsageFault_Handler
00000816 g     F .text	0000001a spiflash_chip_erase
00000144  w    F .text	00000002 UARTE0_UART0_IRQHandler
00003cd8 g     F .text	00000296 tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
20000160 g       .bss	00000000 __bss_start__
00000194 g     F .text	00000010 hal_debugger_connected
000038b4 g     F .text	00000064 hal_flash_write
00000144  w    F .text	00000002 TIMER4_IRQHandler
00004464 g     F .text	000002cc .hidden __udivmoddi4
000021e8 g     F .text	00000016 boot_status_entries
20004ae0 g     O .bss	00000004 g_current_task
000014aa g     F .text	0000000c os_arch_save_sr
00002c9e g     F .text	0000002e boot_read_image_header
00002374 g     F .text	0000001c boot_write_magic
00001564 g     F .text	00000012 os_mempool_init
000008ac g     F .text	00000068 spiflash_identify
00001442 g     F .text	00000016 os_cputime_delay_ticks
00004ecc g       .text	00000000 __exidx_start
0000285c g     F .text	00000004 boot_erase_region
00002e54 g     F .text	00000134 swap_status_source
000018b0 g     F .text	00000098 os_mbuf_append
000043d4 g     F .text	00000006 mfg_read_tlv_mmr_ref
00001734 g     F .text	00000014 os_set_env
0000049c g     F .text	00000014 hal_bsp_flash_dev
0000100c g     F .text	00000040 nrf52_periph_create
000040f0 g     F .text	00000006 flash_area_align
00002054 g     F .text	00000004 disable_buffer
00001fb0 g     F .text	00000040 console_printf
00001f70 g     F .text	00000004 console_blocking_mode
00000144  w    F .text	00000002 I2S_IRQHandler
00000442 g     F .text	00000002 _init
00003918 g     F .text	000000c0 hal_flash_erase
0000222c g     F .text	00000006 boot_swap_info_off
000023f8 g     F .text	00000018 boot_write_swap_size
00001cf4 g     F .text	00000260 pinetime_boot_display_image
00000144  w    F .text	00000002 SWI4_EGU4_IRQHandler
000027f8 g     F .text	00000064 boot_write_status
00000144  w    F .text	00000002 TIMER0_IRQHandler
00002410 g     F .text	000000c8 boot_swap_type_multi
000000d8 g     F .text	0000005c Reset_Handler
20004c11 g     O .bss	00000001 sysinit_active
00002318 g     F .text	0000005c boot_read_swap_size
00002c52 g     F .text	0000001c swap_set_copy_done
00001ad8 g     F .text	000000ac pinetime_boot_init
00001812 g     F .text	0000000a os_mbuf_pool_init
000017ca g     F .text	0000001e os_default_irq_asm
00002bd0 g     F .text	00000082 swap_read_status
000043dc g     F .text	00000048 mfg_init
00001948 g     F .text	00000014 os_mutex_init
00000148 g     F .text	00000010 _sbrkInit
20000160 g       .bssnz	00000000 __bssnz_end__
00004110 g     F .text	00000114 flash_map_init
00003f98 g     F .text	00000010 vprintf
00000144  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
00001a50 g     F .text	00000088 blink_backlight
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00002ccc g     F .text	000000a8 swap_read_status_bytes
00000ac6 g     F .text	0000002a hal_gpio_init_in
00000144  w    F .text	00000002 PWM2_IRQHandler
20000160 g       .data	00000000 __data_end__
000036e6 g     F .text	0000012a mbedtls_sha256_finish_ret
00000144  w    F .text	00000002 ECB_IRQHandler
20004ae4 g     O .bss	00000004 g_os_time
00000d84 g     F .text	000000ec hal_spi_init
20006424 g       .bss	00000000 __bss_end__
0000181c g     F .text	0000002a os_mbuf_get
00000144  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
000005a8 g     F .text	00000014 spiflash_device_ready
00001668 g     F .text	00000010 os_msys_reset
00000144 g     F .text	00000002 Default_Handler
00000434 g     F .text	0000000e _start
00002390 g     F .text	00000018 boot_write_copy_done
00002d74 g     F .text	00000016 boot_status_internal_off
00001748 g     F .text	00000006 os_arch_init_task_stack
00004a60 g     O .text	00000010 boot_img_magic
00000af0 g     F .text	00000026 hal_gpio_init_out
00000b2e g     F .text	00000022 hal_gpio_read
20000150 g     O .data	00000004 sysinit_panic_cb
00001576 g     F .text	00000032 os_memblock_get
00002114 g     F .text	00000032 mem_init_mbuf_pool
00002758 g     F .text	0000001a boot_status_is_reset
0000139c g     F .text	00000098 os_default_irq
000007f0 g     F .text	0000000a spiflash_sector_erase
000040f6 g     F .text	0000000a flash_area_erased_val
00002b6e g     F .text	00000062 swap_status_init
0000195c g     F .text	00000048 memcmp
00004730  w    F .text	00000002 .hidden __aeabi_ldiv0
000020fc g     F .text	0000000c sysinit_start
00001244 g     F .text	000000d4 hal_timer_config
00001b84 g     F .text	00000048 setup_watchdog
00003480 g     F .text	00000010 flash_area_id_from_multi_image_slot
00002746 g     F .text	00000012 boot_status_reset
00002860 g     F .text	00000054 boot_copy_region
00001628 g     F .text	00000040 os_msys_register
00003fdc g     F .text	00000030 flash_area_open
200000e8 g     O .data	00000040 spiflash_dev
00000144  w    F .text	00000002 SAADC_IRQHandler
000022f8 g     F .text	0000001e boot_read_swap_state_by_id
000019be g     F .text	00000036 memset
00000000 g       .text	000000d8 __isr_vector
00000444 g     F .text	00000058 main
00000eb0 g     F .text	00000028 hal_spi_set_txrx_cb
000020a8 g     F .text	0000003c console_out_nolock
00000530 g     F .text	00000052 spiflash_read_jedec_id
00000144  w    F .text	00000002 CCM_AAR_IRQHandler
00000144  w    F .text	00000002 WDT_IRQHandler
00002108 g     F .text	0000000c sysinit_end
00004224 g     F .text	00000002 modlog_init
0000174e g     F .text	00000046 SVC_Handler
00003870 g     F .text	00000044 hal_flash_read
00001318 g     F .text	00000040 hal_timer_read
000040cc g     F .text	00000024 flash_area_erase
20000160 g     O .bss	00000028 nrf52_hal_spi0
0000189e g     F .text	00000012 os_mbuf_len
20004c08 g     O .bss	00000001 g_silence_console
00000144  w    F .text	00000002 SWI5_EGU5_IRQHandler
20006388 g     O .bss	00000004 flash_map_entries
00000000 g       .text	00000000 __text
00004338 g     F .text	00000080 mfg_seek_next
00004100 g     F .text	0000000e flash_area_read_is_empty
00001f54 g     F .text	0000001c console_write
000021fe g     F .text	0000002e boot_status_off
00000254 g     F .text	000001e0 SystemInit
0000143c g     F .text	00000006 os_cputime_get32
00000144  w    F .text	00000002 RNG_IRQHandler
00003860 g     F .text	00000010 hal_flash_erased_val
0000324c g     F .text	00000104 bootutil_img_validate
00000000 g       .svc_table	00000000 SVC_Table
00000144  w    F .text	00000002 RTC2_IRQHandler
00000e70 g     F .text	00000040 hal_spi_tx_val
00000674 g     F .text	0000001c spiflash_write_enable
20010000 g       .bss	00000000 __StackTop
00001ff0 g     F .text	00000064 console_flush
00000144  w    F .text	00000002 PWM0_IRQHandler
00000144  w    F .text	00000002 SWI3_EGU3_IRQHandler
00000bc4 g     F .text	00000124 hal_spi_config
0000400c g     F .text	00000078 flash_area_to_sectors
00004e84 g     O .text	00000048 sysflash_map_dflt
20000188 g     O .bss	0000001c nrf52_hal_timer0
000000d8 g       .text	00000000 __isr_vector_end
00000144  w    F .text	00000002 RTC1_IRQHandler
000024d8 g     F .text	0000008e boot_set_pending
00000ce8 g     F .text	00000040 hal_spi_enable
00001458 g     F .text	00000004 os_cputime_delay_usecs
00000144  w    F .text	00000002 SWI1_EGU1_IRQHandler
000005fc g     F .text	00000018 spiflash_wait_ready
00003a64 g     F .text	0000001c fwrite
0000080a g     F .text	0000000c spiflash_block_64k_erase
00004424 g     F .text	00000010 mfg_open
20000140 g     O .data	00000008 g_os_run_list
000004c8 g     F .text	00000028 NVIC_Relocate
00002146 g     F .text	0000001e sysinit_app
200001ac g     O .bss	00000004 os_flags
000014b6 g     F .text	00000006 os_arch_restore_sr
2000fe50 g       *ABS*	000001b0 __StackLimit
0000366c g     F .text	0000007a mbedtls_sha256_update_ret
00000144  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00000144  w    F .text	00000002 NFCT_IRQHandler
00001884 g     F .text	0000001a os_mbuf_free_chain
000016a8 g     F .text	00000070 os_msys_init
00001718 g     F .text	0000000c os_time_get
00000ed8 g     F .text	00000090 hal_spi_txrx
00001846 g     F .text	0000002e os_mbuf_get_pkthdr
00004730  w    F .text	00000002 .hidden __aeabi_idiv0
00003350 g     F .text	00000098 bootutil_tlv_iter_begin
0000094e g     F .text	00000006 _exit
000001a4 g     F .text	0000003c hal_system_clock_start
0000013a  w    F .text	00000002 BusFault_Handler
000019f4 g     F .text	00000010 strlen
00000582 g     F .text	00000026 spiflash_read_status
000015a8 g     F .text	0000001e os_memblock_put_from_cb
000014ea g     F .text	00000010 os_eventq_init
00001724 g     F .text	00000010 os_time_advance
0000382c g     F .text	00000024 hal_flash_init
00000144  w    F .text	00000002 MWU_IRQHandler
00000138  w    F .text	00000002 MemoryManagement_Handler
00000144  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0000147c g     F .text	00000028 os_dev_initialize_all
00001bcc g     F .text	00000088 boot_custom_start
000004b0 g     F .text	00000016 hal_bsp_init
000014bc g     F .text	0000002e os_pkg_init
00000d28 g     F .text	0000005c hal_spi_disable
000007fe g     F .text	0000000c spiflash_block_32k_erase
00003f6e g     F .text	00000004 vfprintf
000021de g     F .text	0000000a boot_trailer_sz
000033e8 g     F .text	00000098 bootutil_tlv_iter_next
000023a8 g     F .text	00000018 boot_write_image_ok
00003498 g     F .text	000000a4 mbedtls_sha256_starts_ret



Disassembly of section .text:

00000000 <__isr_vector>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
       0:	20010000 	.word	0x20010000
       4:	000000d9 	.word	0x000000d9
       8:	00000135 	.word	0x00000135
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
       c:	00000137 	.word	0x00000137
	...
    t->t_state = OS_TASK_SLEEP;
    t->t_next_wakeup = os_time_get() + nticks;
    if (nticks == OS_TIMEOUT_NEVER) {
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
      2c:	0000174f 	.word	0x0000174f
	...
            }
        }
        if (entry) {
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
        } else {
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
      38:	00001795 	.word	0x00001795
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
      3c:	000017bf 	.word	0x000017bf
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
      40:	00000145 	.word	0x00000145
      44:	00000145 	.word	0x00000145
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
      48:	00000145 	.word	0x00000145
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
      4c:	00000145 	.word	0x00000145
      50:	00000145 	.word	0x00000145
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
      54:	00000145 	.word	0x00000145
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
      58:	00000145 	.word	0x00000145
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
      5c:	00000145 	.word	0x00000145
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
      60:	00000145 	.word	0x00000145
      64:	00000145 	.word	0x00000145
      68:	00000145 	.word	0x00000145
    return (0);
      6c:	00000145 	.word	0x00000145
      70:	00000145 	.word	0x00000145
      74:	00000145 	.word	0x00000145
      78:	00000145 	.word	0x00000145
      7c:	00000145 	.word	0x00000145
      80:	00000145 	.word	0x00000145
      84:	00000145 	.word	0x00000145
      88:	00000145 	.word	0x00000145
      8c:	00000145 	.word	0x00000145
      90:	00000145 	.word	0x00000145
      94:	00000145 	.word	0x00000145
      98:	00000145 	.word	0x00000145
      9c:	00000145 	.word	0x00000145
      a0:	00000145 	.word	0x00000145
      a4:	00000145 	.word	0x00000145
      a8:	00000145 	.word	0x00000145
      ac:	00000145 	.word	0x00000145
      b0:	00000145 	.word	0x00000145
      b4:	00000145 	.word	0x00000145
	...
      c0:	00000145 	.word	0x00000145
      c4:	00000145 	.word	0x00000145
      c8:	00000145 	.word	0x00000145
      cc:	00000145 	.word	0x00000145
      d0:	00000145 	.word	0x00000145
      d4:	00000145 	.word	0x00000145

000000d8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
      d8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
      dc:	4a0c      	ldr	r2, [pc, #48]	; (110 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
      de:	4b0d      	ldr	r3, [pc, #52]	; (114 <.bss_zero_loop+0x34>)

000000e0 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
      e0:	429a      	cmp	r2, r3
    itt     lt
      e2:	bfbc      	itt	lt
    strlt   r0, [r2], #4
      e4:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
      e8:	e7fa      	blt.n	e0 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
      ea:	490b      	ldr	r1, [pc, #44]	; (118 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
      ec:	4a0b      	ldr	r2, [pc, #44]	; (11c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
      ee:	4b0c      	ldr	r3, [pc, #48]	; (120 <.bss_zero_loop+0x40>)

    subs    r3, r2
      f0:	1a9b      	subs	r3, r3, r2
    ble     .LC0
      f2:	dd03      	ble.n	fc <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
      f4:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
      f6:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
      f8:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
      fa:	dcfb      	bgt.n	f4 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
      fc:	4809      	ldr	r0, [pc, #36]	; (124 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
      fe:	490a      	ldr	r1, [pc, #40]	; (128 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
     100:	f000 f822 	bl	148 <_sbrkInit>

    LDR     R0, =SystemInit
     104:	4809      	ldr	r0, [pc, #36]	; (12c <.bss_zero_loop+0x4c>)
    BLX     R0
     106:	4780      	blx	r0

    BL      hal_system_init
     108:	f000 f826 	bl	158 <hal_system_init>

    LDR     R0, =_start
     10c:	4808      	ldr	r0, [pc, #32]	; (130 <.bss_zero_loop+0x50>)
    BX      R0
     10e:	4700      	bx	r0
    ldr     r2, =__bss_start__
     110:	20000160 	.word	0x20000160
    ldr     r3, =__bss_end__
     114:	20006424 	.word	0x20006424
    ldr    r1, =__etext
     118:	00004ee4 	.word	0x00004ee4
    ldr    r2, =__data_start__
     11c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
     120:	20000160 	.word	0x20000160
    LDR     R0, =__HeapBase
     124:	20006428 	.word	0x20006428
    LDR     R1, =__HeapLimit
     128:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
     12c:	00000255 	.word	0x00000255
    LDR     R0, =_start
     130:	00000435 	.word	0x00000435

00000134 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
     134:	e7fe      	b.n	134 <NMI_Handler>

00000136 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
     136:	e7fe      	b.n	136 <HardFault_Handler>

00000138 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
     138:	e7fe      	b.n	138 <MemoryManagement_Handler>

0000013a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
     13a:	e7fe      	b.n	13a <BusFault_Handler>

0000013c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
     13c:	e7fe      	b.n	13c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
     13e:	e7fe      	b.n	13e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
     140:	e7fe      	b.n	140 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
     142:	e7fe      	b.n	142 <UsageFault_Handler+0x6>

00000144 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
     144:	e7fe      	b.n	144 <Default_Handler>
     146:	bf00      	nop

00000148 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
     148:	4b02      	ldr	r3, [pc, #8]	; (154 <_sbrkInit+0xc>)
    sbrkLimit = limit;
     14a:	e9c3 0100 	strd	r0, r1, [r3]
    brk = base;
     14e:	6098      	str	r0, [r3, #8]
}
     150:	4770      	bx	lr
     152:	bf00      	nop
     154:	200000d8 	.word	0x200000d8

00000158 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
     158:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     15c:	2201      	movs	r2, #1
     15e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
     162:	4770      	bx	lr

00000164 <hal_system_reset>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     164:	4b08      	ldr	r3, [pc, #32]	; (188 <hal_system_reset+0x24>)
     166:	681b      	ldr	r3, [r3, #0]
        HAL_DEBUG_BREAK();
     168:	07db      	lsls	r3, r3, #31
     16a:	d500      	bpl.n	16e <hal_system_reset+0xa>

static inline void
hal_debug_break(void)
{
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
    __BKPT(1);
     16c:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     16e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     172:	4906      	ldr	r1, [pc, #24]	; (18c <hal_system_reset+0x28>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     174:	4b06      	ldr	r3, [pc, #24]	; (190 <hal_system_reset+0x2c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     176:	68ca      	ldr	r2, [r1, #12]
     178:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     17c:	4313      	orrs	r3, r2
     17e:	60cb      	str	r3, [r1, #12]
     180:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
     184:	bf00      	nop
     186:	e7fd      	b.n	184 <hal_system_reset+0x20>
     188:	e000edf0 	.word	0xe000edf0
     18c:	e000ed00 	.word	0xe000ed00
     190:	05fa0004 	.word	0x05fa0004

00000194 <hal_debugger_connected>:
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
     194:	4b02      	ldr	r3, [pc, #8]	; (1a0 <hal_debugger_connected+0xc>)
     196:	6818      	ldr	r0, [r3, #0]
}
     198:	f000 0001 	and.w	r0, r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop
     1a0:	e000edf0 	.word	0xe000edf0

000001a4 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
     1a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     1a8:	4a0c      	ldr	r2, [pc, #48]	; (1dc <Stack_Size+0x2c>)
     1aa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
     1ae:	4011      	ands	r1, r2
     1b0:	f1b1 1f01 	cmp.w	r1, #65537	; 0x10001
     1b4:	d011      	beq.n	1da <Stack_Size+0x2a>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     1b6:	2101      	movs	r1, #1
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1b8:	2000      	movs	r0, #0
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
     1ba:	60d9      	str	r1, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
     1bc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
     1c0:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
     1c4:	6099      	str	r1, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
     1c6:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
     1ca:	2900      	cmp	r1, #0
     1cc:	d0fb      	beq.n	1c6 <Stack_Size+0x16>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
     1ce:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
     1d2:	4011      	ands	r1, r2
     1d4:	f1b1 1f01 	cmp.w	r1, #65537	; 0x10001
     1d8:	d1f5      	bne.n	1c6 <Stack_Size+0x16>
                }
            }
        }
    }
#endif
}
     1da:	4770      	bx	lr
     1dc:	00010003 	.word	0x00010003

000001e0 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     1e0:	4b09      	ldr	r3, [pc, #36]	; (208 <errata_16+0x28>)
     1e2:	781b      	ldrb	r3, [r3, #0]
     1e4:	2b06      	cmp	r3, #6
     1e6:	d10c      	bne.n	202 <errata_16+0x22>
     1e8:	4b08      	ldr	r3, [pc, #32]	; (20c <errata_16+0x2c>)
     1ea:	681b      	ldr	r3, [r3, #0]
     1ec:	071a      	lsls	r2, r3, #28
     1ee:	d108      	bne.n	202 <errata_16+0x22>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     1f0:	4b07      	ldr	r3, [pc, #28]	; (210 <errata_16+0x30>)
     1f2:	6818      	ldr	r0, [r3, #0]
     1f4:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
     1f8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
     1fc:	4258      	negs	r0, r3
     1fe:	4158      	adcs	r0, r3
     200:	4770      	bx	lr
            return true;
        }
    }

    return false;
     202:	2000      	movs	r0, #0
}
     204:	4770      	bx	lr
     206:	bf00      	nop
     208:	f0000fe0 	.word	0xf0000fe0
     20c:	f0000fe4 	.word	0xf0000fe4
     210:	f0000fe8 	.word	0xf0000fe8

00000214 <errata_108>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     214:	4b0c      	ldr	r3, [pc, #48]	; (248 <errata_108+0x34>)
     216:	781b      	ldrb	r3, [r3, #0]
     218:	2b06      	cmp	r3, #6
     21a:	d110      	bne.n	23e <errata_108+0x2a>
     21c:	4b0b      	ldr	r3, [pc, #44]	; (24c <errata_108+0x38>)
     21e:	681b      	ldr	r3, [r3, #0]
     220:	071a      	lsls	r2, r3, #28
     222:	d10c      	bne.n	23e <errata_108+0x2a>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
     224:	4b0a      	ldr	r3, [pc, #40]	; (250 <errata_108+0x3c>)
     226:	6818      	ldr	r0, [r3, #0]
     228:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
     22c:	2b30      	cmp	r3, #48	; 0x30
     22e:	d008      	beq.n	242 <errata_108+0x2e>
            return true;
        }
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
     230:	f000 00e0 	and.w	r0, r0, #224	; 0xe0
     234:	f1a0 0340 	sub.w	r3, r0, #64	; 0x40
     238:	4258      	negs	r0, r3
     23a:	4158      	adcs	r0, r3
     23c:	4770      	bx	lr
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
     23e:	2000      	movs	r0, #0
     240:	4770      	bx	lr
            return true;
     242:	2001      	movs	r0, #1
}
     244:	4770      	bx	lr
     246:	bf00      	nop
     248:	f0000fe0 	.word	0xf0000fe0
     24c:	f0000fe4 	.word	0xf0000fe4
     250:	f0000fe8 	.word	0xf0000fe8

00000254 <SystemInit>:
{
     254:	b508      	push	{r3, lr}
    if (errata_16()){
     256:	f7ff ffc3 	bl	1e0 <errata_16>
     25a:	b110      	cbz	r0, 262 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
     25c:	4b63      	ldr	r3, [pc, #396]	; (3ec <SystemInit+0x198>)
     25e:	4a64      	ldr	r2, [pc, #400]	; (3f0 <SystemInit+0x19c>)
     260:	601a      	str	r2, [r3, #0]
    if (errata_31()){
     262:	f7ff ffd7 	bl	214 <errata_108>
     266:	b128      	cbz	r0, 274 <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
     268:	4b62      	ldr	r3, [pc, #392]	; (3f4 <SystemInit+0x1a0>)
     26a:	4a63      	ldr	r2, [pc, #396]	; (3f8 <SystemInit+0x1a4>)
     26c:	681b      	ldr	r3, [r3, #0]
     26e:	f3c3 3342 	ubfx	r3, r3, #13, #3
     272:	6013      	str	r3, [r2, #0]
    if (errata_32()){
     274:	f7ff ffb4 	bl	1e0 <errata_16>
     278:	b120      	cbz	r0, 284 <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
     27a:	4a60      	ldr	r2, [pc, #384]	; (3fc <SystemInit+0x1a8>)
     27c:	68d3      	ldr	r3, [r2, #12]
     27e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
     282:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
     284:	f7ff ffc6 	bl	214 <errata_108>
     288:	b140      	cbz	r0, 29c <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
     28a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     28e:	2200      	movs	r2, #0
     290:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
     294:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
     298:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
     29c:	f7ff ffa0 	bl	1e0 <errata_16>
     2a0:	b110      	cbz	r0, 2a8 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
     2a2:	4b57      	ldr	r3, [pc, #348]	; (400 <SystemInit+0x1ac>)
     2a4:	2203      	movs	r2, #3
     2a6:	601a      	str	r2, [r3, #0]
    if (errata_57()){
     2a8:	f7ff ff9a 	bl	1e0 <errata_16>
     2ac:	b140      	cbz	r0, 2c0 <SystemInit+0x6c>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
     2ae:	4b55      	ldr	r3, [pc, #340]	; (404 <SystemInit+0x1b0>)
     2b0:	2205      	movs	r2, #5
     2b2:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
     2b4:	2201      	movs	r2, #1
     2b6:	679a      	str	r2, [r3, #120]	; 0x78
        *(volatile uint32_t *)0x40005618 = 0x00000000;
     2b8:	2200      	movs	r2, #0
     2ba:	609a      	str	r2, [r3, #8]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
     2bc:	223f      	movs	r2, #63	; 0x3f
     2be:	605a      	str	r2, [r3, #4]
    return false;
}

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
     2c0:	4b51      	ldr	r3, [pc, #324]	; (408 <SystemInit+0x1b4>)
     2c2:	781b      	ldrb	r3, [r3, #0]
     2c4:	2b06      	cmp	r3, #6
     2c6:	d150      	bne.n	36a <SystemInit+0x116>
     2c8:	4b50      	ldr	r3, [pc, #320]	; (40c <SystemInit+0x1b8>)
     2ca:	681b      	ldr	r3, [r3, #0]
     2cc:	071a      	lsls	r2, r3, #28
     2ce:	d14c      	bne.n	36a <SystemInit+0x116>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
     2d0:	4b4f      	ldr	r3, [pc, #316]	; (410 <SystemInit+0x1bc>)
     2d2:	681b      	ldr	r3, [r3, #0]
     2d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
     2d8:	2b50      	cmp	r3, #80	; 0x50
     2da:	d146      	bne.n	36a <SystemInit+0x116>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
     2dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
     2e0:	4b4c      	ldr	r3, [pc, #304]	; (414 <SystemInit+0x1c0>)
     2e2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
     2e6:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
     2ea:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
     2ee:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
     2f2:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
     2f6:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
     2fa:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
     2fe:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
     302:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
     306:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
     30a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
     30e:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
     312:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
     316:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
     31a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
     31e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
     322:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
     326:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
     32a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
     32e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
     332:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
     336:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
     33a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
     33e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
     342:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
     346:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
     34a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
     34e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
     352:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
     356:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
     35a:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
     35e:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
     362:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
     366:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
     36a:	f7ff ff53 	bl	214 <errata_108>
     36e:	b128      	cbz	r0, 37c <SystemInit+0x128>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
     370:	4b29      	ldr	r3, [pc, #164]	; (418 <SystemInit+0x1c4>)
     372:	4a2a      	ldr	r2, [pc, #168]	; (41c <SystemInit+0x1c8>)
     374:	681b      	ldr	r3, [r3, #0]
     376:	f003 034f 	and.w	r3, r3, #79	; 0x4f
     37a:	6013      	str	r3, [r2, #0]
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
     37c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
     380:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
     384:	07db      	lsls	r3, r3, #31
     386:	d529      	bpl.n	3dc <SystemInit+0x188>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
     388:	4b25      	ldr	r3, [pc, #148]	; (420 <SystemInit+0x1cc>)
     38a:	2201      	movs	r2, #1
     38c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     390:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
     394:	2a00      	cmp	r2, #0
     396:	d0fb      	beq.n	390 <SystemInit+0x13c>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
     398:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
     39c:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
     3a0:	f023 0301 	bic.w	r3, r3, #1
     3a4:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     3a8:	4b1d      	ldr	r3, [pc, #116]	; (420 <SystemInit+0x1cc>)
     3aa:	461a      	mov	r2, r3
     3ac:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
     3b0:	2900      	cmp	r1, #0
     3b2:	d0fb      	beq.n	3ac <SystemInit+0x158>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
     3b4:	2100      	movs	r1, #0
     3b6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
     3ba:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
     3be:	2b00      	cmp	r3, #0
     3c0:	d0fb      	beq.n	3ba <SystemInit+0x166>
     3c2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     3c6:	4917      	ldr	r1, [pc, #92]	; (424 <SystemInit+0x1d0>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     3c8:	4b17      	ldr	r3, [pc, #92]	; (428 <SystemInit+0x1d4>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
     3ca:	68ca      	ldr	r2, [r1, #12]
     3cc:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
     3d0:	4313      	orrs	r3, r2
     3d2:	60cb      	str	r3, [r1, #12]
     3d4:	f3bf 8f4f 	dsb	sy
    __NOP();
     3d8:	bf00      	nop
     3da:	e7fd      	b.n	3d8 <SystemInit+0x184>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
     3dc:	4b13      	ldr	r3, [pc, #76]	; (42c <SystemInit+0x1d8>)
     3de:	4a14      	ldr	r2, [pc, #80]	; (430 <SystemInit+0x1dc>)
     3e0:	601a      	str	r2, [r3, #0]
}
     3e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    NVIC_Relocate();
     3e6:	f000 b86f 	b.w	4c8 <NVIC_Relocate>
     3ea:	bf00      	nop
     3ec:	4007c074 	.word	0x4007c074
     3f0:	baadf00d 	.word	0xbaadf00d
     3f4:	10000244 	.word	0x10000244
     3f8:	4000053c 	.word	0x4000053c
     3fc:	e000edf0 	.word	0xe000edf0
     400:	400005a0 	.word	0x400005a0
     404:	40005610 	.word	0x40005610
     408:	f0000fe0 	.word	0xf0000fe0
     40c:	f0000fe4 	.word	0xf0000fe4
     410:	f0000fe8 	.word	0xf0000fe8
     414:	4000c000 	.word	0x4000c000
     418:	10000258 	.word	0x10000258
     41c:	40000ee4 	.word	0x40000ee4
     420:	4001e000 	.word	0x4001e000
     424:	e000ed00 	.word	0xe000ed00
     428:	05fa0004 	.word	0x05fa0004
     42c:	200000e4 	.word	0x200000e4
     430:	03d09000 	.word	0x03d09000

00000434 <_start>:
void _start(void)
{
#if !MYNEWT_VAL(OS_SCHEDULING)
    int rc;

    rc = main(0, NULL);
     434:	2100      	movs	r1, #0
{
     436:	b508      	push	{r3, lr}
    rc = main(0, NULL);
     438:	4608      	mov	r0, r1
     43a:	f000 f803 	bl	444 <main>
#define EXIT_SUCCESS	0
#define EXIT_FAILURE	1
__extern void _exit(int s);
__extern_inline void exit(int err)
{
	_exit(err);
     43e:	f000 fa86 	bl	94e <_exit>

00000442 <_init>:
}

void
_init(void)
{
}
     442:	4770      	bx	lr

00000444 <main>:
    return 0;
}

int
main(void)
{
     444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    struct boot_rsp rsp;
    uintptr_t flash_base;
    int rc;

    hal_bsp_init();
     446:	f000 f833 	bl	4b0 <hal_bsp_init>

#if !MYNEWT_VAL(OS_SCHEDULING) && MYNEWT_VAL(WATCHDOG_INTERVAL)
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
     44a:	f247 5030 	movw	r0, #30000	; 0x7530
     44e:	f000 fda1 	bl	f94 <hal_watchdog_init>
    assert(rc == 0);
     452:	b148      	cbz	r0, 468 <main+0x24>
     454:	f7ff fe9e 	bl	194 <hal_debugger_connected>
     458:	b100      	cbz	r0, 45c <main+0x18>
     45a:	be01      	bkpt	0x0001
     45c:	2300      	movs	r3, #0
     45e:	461a      	mov	r2, r3
     460:	4619      	mov	r1, r3
     462:	4618      	mov	r0, r3
     464:	f000 ff78 	bl	1358 <__assert_func>
#endif

#if defined(MCUBOOT_SERIAL) || defined(MCUBOOT_HAVE_LOGGING) || \
        MYNEWT_VAL(CRYPTO) || MYNEWT_VAL(HASH)
    /* initialize uart/crypto without os */
    os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
     468:	2001      	movs	r0, #1
     46a:	f001 f807 	bl	147c <os_dev_initialize_all>
    os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
     46e:	2002      	movs	r0, #2
     470:	f001 f804 	bl	147c <os_dev_initialize_all>
    sysinit();
     474:	f001 fe42 	bl	20fc <sysinit_start>
     478:	f001 fe65 	bl	2146 <sysinit_app>
     47c:	f001 fe44 	bl	2108 <sysinit_end>
    console_blocking_mode();
     480:	f001 fd76 	bl	1f70 <console_blocking_mode>
#endif
#else
    flash_map_init();
#endif

    rc = boot_go(&rsp);
     484:	a801      	add	r0, sp, #4
     486:	f002 fb2b 	bl	2ae0 <boot_go>
    assert(rc == 0);
     48a:	4604      	mov	r4, r0
     48c:	2800      	cmp	r0, #0
     48e:	d1e1      	bne.n	454 <main+0x10>

    rc = flash_device_base(rsp.br_flash_dev_id, &flash_base);
    assert(rc == 0);

#if MYNEWT_VAL(BOOT_CUSTOM_START)
    boot_custom_start(flash_base, &rsp);
     490:	a901      	add	r1, sp, #4
     492:	f001 fb9b 	bl	1bcc <boot_custom_start>
    hal_system_start((void *)(flash_base + rsp.br_image_off +
                              rsp.br_hdr->ih_hdr_size));
#endif

    return 0;
}
     496:	4620      	mov	r0, r4
     498:	b004      	add	sp, #16
     49a:	bd10      	pop	{r4, pc}

0000049c <hal_bsp_flash_dev>:

/// Return the Flash Device for the ID. 0 for Internal Flash ROM, 1 for External SPI Flash
const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id >= ARRAY_SIZE(flash_devs)) {
     49c:	2801      	cmp	r0, #1
        return NULL;
    }
    return flash_devs[id];
     49e:	bf9a      	itte	ls
     4a0:	4b02      	ldrls	r3, [pc, #8]	; (4ac <hal_bsp_flash_dev+0x10>)
     4a2:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
        return NULL;
     4a6:	2000      	movhi	r0, #0
}
     4a8:	4770      	bx	lr
     4aa:	bf00      	nop
     4ac:	00004734 	.word	0x00004734

000004b0 <hal_bsp_init>:

void blink_backlight(int pattern_id, int repetitions);  ////  Defined in blink.c

void
hal_bsp_init(void)
{
     4b0:	b508      	push	{r3, lr}
    blink_backlight(4, 4);////
     4b2:	2104      	movs	r1, #4
     4b4:	4608      	mov	r0, r1
     4b6:	f001 facb 	bl	1a50 <blink_backlight>
    /* Make sure system clocks have started */
    hal_system_clock_start();
     4ba:	f7ff fe73 	bl	1a4 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
}
     4be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf52_periph_create();
     4c2:	f000 bda3 	b.w	100c <nrf52_periph_create>
	...

000004c8 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
     4c8:	4b06      	ldr	r3, [pc, #24]	; (4e4 <NVIC_Relocate+0x1c>)
     4ca:	4907      	ldr	r1, [pc, #28]	; (4e8 <NVIC_Relocate+0x20>)
     4cc:	428b      	cmp	r3, r1
     4ce:	d005      	beq.n	4dc <NVIC_Relocate+0x14>
     4d0:	2200      	movs	r2, #0
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
            new_location[i] = current_location[i];
     4d2:	5888      	ldr	r0, [r1, r2]
     4d4:	5098      	str	r0, [r3, r2]
     4d6:	3204      	adds	r2, #4
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
     4d8:	2ad8      	cmp	r2, #216	; 0xd8
     4da:	d1fa      	bne.n	4d2 <NVIC_Relocate+0xa>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
     4dc:	4a03      	ldr	r2, [pc, #12]	; (4ec <NVIC_Relocate+0x24>)
     4de:	6093      	str	r3, [r2, #8]
#endif
}
     4e0:	4770      	bx	lr
     4e2:	bf00      	nop
     4e4:	20000000 	.word	0x20000000
     4e8:	00000000 	.word	0x00000000
     4ec:	e000ed00 	.word	0xe000ed00

000004f0 <hal_spiflash_sector_info>:
hal_spiflash_sector_info(const struct hal_flash *hal_flash_dev, int idx,
        uint32_t *address, uint32_t *sz)
{
    const struct spiflash_dev *dev = (const struct spiflash_dev *)hal_flash_dev;

    *address = idx * dev->sector_size;
     4f0:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
     4f2:	4341      	muls	r1, r0
     4f4:	6011      	str	r1, [r2, #0]
    *sz = dev->sector_size;
     4f6:	6018      	str	r0, [r3, #0]
    return 0;
}
     4f8:	2000      	movs	r0, #0
     4fa:	4770      	bx	lr

000004fc <spiflash_cs_activate.isra.4>:
    hal_gpio_write(dev->ss_pin, 0);
     4fc:	2100      	movs	r1, #0
     4fe:	f000 bb0a 	b.w	b16 <hal_gpio_write>

00000502 <spiflash_cs_deactivate.isra.5>:
    hal_gpio_write(dev->ss_pin, 1);
     502:	2101      	movs	r1, #1
     504:	f000 bb07 	b.w	b16 <hal_gpio_write>

00000508 <spiflash_release_power_down_generic>:
{
     508:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t cmd[1] = { SPIFLASH_RELEASE_POWER_DOWN };
     50a:	ad02      	add	r5, sp, #8
     50c:	23ab      	movs	r3, #171	; 0xab
     50e:	f805 3d04 	strb.w	r3, [r5, #-4]!
{
     512:	4604      	mov	r4, r0
    spiflash_cs_activate(dev);
     514:	6a80      	ldr	r0, [r0, #40]	; 0x28
     516:	f7ff fff1 	bl	4fc <spiflash_cs_activate.isra.4>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     51a:	2301      	movs	r3, #1
     51c:	462a      	mov	r2, r5
     51e:	4629      	mov	r1, r5
     520:	6a20      	ldr	r0, [r4, #32]
     522:	f000 fcd9 	bl	ed8 <hal_spi_txrx>
    spiflash_cs_deactivate(dev);
     526:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     528:	f7ff ffeb 	bl	502 <spiflash_cs_deactivate.isra.5>
}
     52c:	b003      	add	sp, #12
     52e:	bd30      	pop	{r4, r5, pc}

00000530 <spiflash_read_jedec_id>:
{
     530:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint8_t cmd[4] = { SPIFLASH_READ_JEDEC_ID, 0, 0, 0 };
     534:	ad02      	add	r5, sp, #8
{
     536:	461e      	mov	r6, r3
    uint8_t cmd[4] = { SPIFLASH_READ_JEDEC_ID, 0, 0, 0 };
     538:	239f      	movs	r3, #159	; 0x9f
     53a:	f845 3d04 	str.w	r3, [r5, #-4]!
{
     53e:	4604      	mov	r4, r0
    spiflash_cs_activate(dev);
     540:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
     542:	4688      	mov	r8, r1
     544:	4617      	mov	r7, r2
    spiflash_cs_activate(dev);
     546:	f7ff ffd9 	bl	4fc <spiflash_cs_activate.isra.4>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
     54a:	2304      	movs	r3, #4
     54c:	462a      	mov	r2, r5
     54e:	4629      	mov	r1, r5
     550:	6a20      	ldr	r0, [r4, #32]
     552:	f000 fcc1 	bl	ed8 <hal_spi_txrx>
    spiflash_cs_deactivate(dev);
     556:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     558:	f7ff ffd3 	bl	502 <spiflash_cs_deactivate.isra.5>
    if (manufacturer) {
     55c:	f1b8 0f00 	cmp.w	r8, #0
     560:	d003      	beq.n	56a <spiflash_read_jedec_id+0x3a>
        *manufacturer = cmd[1];
     562:	f89d 3005 	ldrb.w	r3, [sp, #5]
     566:	f888 3000 	strb.w	r3, [r8]
    if (memory_type) {
     56a:	b117      	cbz	r7, 572 <spiflash_read_jedec_id+0x42>
        *memory_type = cmd[2];
     56c:	f89d 3006 	ldrb.w	r3, [sp, #6]
     570:	703b      	strb	r3, [r7, #0]
    if (capacity) {
     572:	b116      	cbz	r6, 57a <spiflash_read_jedec_id+0x4a>
        *capacity = cmd[3];
     574:	f89d 3007 	ldrb.w	r3, [sp, #7]
     578:	7033      	strb	r3, [r6, #0]
}
     57a:	2000      	movs	r0, #0
     57c:	b002      	add	sp, #8
     57e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00000582 <spiflash_read_status>:
{
     582:	b538      	push	{r3, r4, r5, lr}
     584:	4604      	mov	r4, r0
    spiflash_cs_activate(dev);
     586:	6a80      	ldr	r0, [r0, #40]	; 0x28
     588:	f7ff ffb8 	bl	4fc <spiflash_cs_activate.isra.4>
    hal_spi_tx_val(dev->spi_num, cmd);
     58c:	2105      	movs	r1, #5
     58e:	6a20      	ldr	r0, [r4, #32]
     590:	f000 fc6e 	bl	e70 <hal_spi_tx_val>
    val = hal_spi_tx_val(dev->spi_num, 0xFF);
     594:	21ff      	movs	r1, #255	; 0xff
     596:	6a20      	ldr	r0, [r4, #32]
     598:	f000 fc6a 	bl	e70 <hal_spi_tx_val>
     59c:	4605      	mov	r5, r0
    spiflash_cs_deactivate(dev);
     59e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     5a0:	f7ff ffaf 	bl	502 <spiflash_cs_deactivate.isra.5>
}
     5a4:	b2e8      	uxtb	r0, r5
     5a6:	bd38      	pop	{r3, r4, r5, pc}

000005a8 <spiflash_device_ready>:
{
     5a8:	b510      	push	{r4, lr}
     5aa:	4604      	mov	r4, r0
    dev->ready = !(spiflash_read_status(dev) & SPIFLASH_STATUS_BUSY);
     5ac:	f7ff ffe9 	bl	582 <spiflash_read_status>
     5b0:	43c0      	mvns	r0, r0
     5b2:	f000 0001 	and.w	r0, r0, #1
     5b6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
     5ba:	bd10      	pop	{r4, pc}

000005bc <spiflash_wait_ready_till.part.6>:
spiflash_wait_ready_till(struct spiflash_dev *dev, uint32_t timeout_us,
     5bc:	b570      	push	{r4, r5, r6, lr}
     5be:	4c0e      	ldr	r4, [pc, #56]	; (5f8 <spiflash_wait_ready_till.part.6+0x3c>)
     5c0:	4294      	cmp	r4, r2
     5c2:	bf28      	it	cs
     5c4:	4614      	movcs	r4, r2
     5c6:	2c0a      	cmp	r4, #10
     5c8:	460d      	mov	r5, r1
     5ca:	4606      	mov	r6, r0
     5cc:	bf38      	it	cc
     5ce:	240a      	movcc	r4, #10
    limit = os_cputime_get32() + os_cputime_usecs_to_ticks(timeout_us);
     5d0:	f000 ff34 	bl	143c <os_cputime_get32>
     5d4:	4405      	add	r5, r0
        if (spiflash_device_ready(dev)) {
     5d6:	4630      	mov	r0, r6
     5d8:	f7ff ffe6 	bl	5a8 <spiflash_device_ready>
     5dc:	b950      	cbnz	r0, 5f4 <spiflash_wait_ready_till.part.6+0x38>
    os_cputime_delay_usecs(usecs);
     5de:	4620      	mov	r0, r4
     5e0:	f000 ff3a 	bl	1458 <os_cputime_delay_usecs>
    } while (CPUTIME_LT(os_cputime_get32(), limit));
     5e4:	f000 ff2a 	bl	143c <os_cputime_get32>
     5e8:	1b40      	subs	r0, r0, r5
     5ea:	2800      	cmp	r0, #0
     5ec:	dbf3      	blt.n	5d6 <spiflash_wait_ready_till.part.6+0x1a>
    int rc = -1;
     5ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
     5f2:	bd70      	pop	{r4, r5, r6, pc}
            rc = 0;
     5f4:	2000      	movs	r0, #0
     5f6:	e7fc      	b.n	5f2 <spiflash_wait_ready_till.part.6+0x36>
     5f8:	000f4240 	.word	0x000f4240

000005fc <spiflash_wait_ready>:
    if (dev->ready) {
     5fc:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
     600:	b933      	cbnz	r3, 610 <spiflash_wait_ready+0x14>
     602:	220a      	movs	r2, #10
     604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
     608:	434a      	muls	r2, r1
     60a:	4359      	muls	r1, r3
     60c:	f7ff bfd6 	b.w	5bc <spiflash_wait_ready_till.part.6>
}
     610:	2000      	movs	r0, #0
     612:	4770      	bx	lr

00000614 <hal_spiflash_read>:
{
     614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
     616:	461d      	mov	r5, r3
    uint8_t cmd[] = { SPIFLASH_READ,
     618:	2303      	movs	r3, #3
     61a:	f88d 3004 	strb.w	r3, [sp, #4]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     61e:	0c0b      	lsrs	r3, r1, #16
     620:	f88d 3005 	strb.w	r3, [sp, #5]
     624:	f88d 1007 	strb.w	r1, [sp, #7]
     628:	0a0b      	lsrs	r3, r1, #8
    err = spiflash_wait_ready(dev, 100);
     62a:	2164      	movs	r1, #100	; 0x64
{
     62c:	4604      	mov	r4, r0
     62e:	4616      	mov	r6, r2
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
     630:	f88d 3006 	strb.w	r3, [sp, #6]
    err = spiflash_wait_ready(dev, 100);
     634:	f7ff ffe2 	bl	5fc <spiflash_wait_ready>
    if (!err) {
     638:	4607      	mov	r7, r0
     63a:	b9c0      	cbnz	r0, 66e <hal_spiflash_read+0x5a>
        if (len > 0) {
     63c:	b1bd      	cbz	r5, 66e <hal_spiflash_read+0x5a>
            spiflash_cs_activate(dev);
     63e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     640:	f7ff ff5c 	bl	4fc <spiflash_cs_activate.isra.4>
            hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     644:	2304      	movs	r3, #4
     646:	eb0d 0103 	add.w	r1, sp, r3
     64a:	463a      	mov	r2, r7
     64c:	6a20      	ldr	r0, [r4, #32]
     64e:	f000 fc43 	bl	ed8 <hal_spi_txrx>
            memset(buf, 0xFF, len);
     652:	462a      	mov	r2, r5
     654:	21ff      	movs	r1, #255	; 0xff
     656:	4630      	mov	r0, r6
     658:	f001 f9b1 	bl	19be <memset>
            hal_spi_txrx(dev->spi_num, buf, buf, len);
     65c:	462b      	mov	r3, r5
     65e:	4632      	mov	r2, r6
     660:	4631      	mov	r1, r6
     662:	6a20      	ldr	r0, [r4, #32]
     664:	f000 fc38 	bl	ed8 <hal_spi_txrx>
            spiflash_cs_deactivate(dev);
     668:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     66a:	f7ff ff4a 	bl	502 <spiflash_cs_deactivate.isra.5>
}
     66e:	2000      	movs	r0, #0
     670:	b003      	add	sp, #12
     672:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000674 <spiflash_write_enable>:
{
     674:	b510      	push	{r4, lr}
     676:	4604      	mov	r4, r0
    spiflash_cs_activate(dev);
     678:	6a80      	ldr	r0, [r0, #40]	; 0x28
     67a:	f7ff ff3f 	bl	4fc <spiflash_cs_activate.isra.4>
    hal_spi_tx_val(dev->spi_num, cmd);
     67e:	2106      	movs	r1, #6
     680:	6a20      	ldr	r0, [r4, #32]
     682:	f000 fbf5 	bl	e70 <hal_spi_tx_val>
    spiflash_cs_deactivate(dev);
     686:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     688:	f7ff ff3b 	bl	502 <spiflash_cs_deactivate.isra.5>
}
     68c:	2000      	movs	r0, #0
     68e:	bd10      	pop	{r4, pc}

00000690 <hal_spiflash_write>:
{
     690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     694:	b085      	sub	sp, #20
     696:	461f      	mov	r7, r3
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
     698:	2300      	movs	r3, #0
     69a:	9303      	str	r3, [sp, #12]
{
     69c:	460e      	mov	r6, r1
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
     69e:	2302      	movs	r3, #2
    if (spiflash_wait_ready(dev, 100) != 0) {
     6a0:	2164      	movs	r1, #100	; 0x64
{
     6a2:	4605      	mov	r5, r0
     6a4:	4693      	mov	fp, r2
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
     6a6:	f88d 300c 	strb.w	r3, [sp, #12]
    if (spiflash_wait_ready(dev, 100) != 0) {
     6aa:	f7ff ffa7 	bl	5fc <spiflash_wait_ready>
     6ae:	2800      	cmp	r0, #0
     6b0:	d14b      	bne.n	74a <hal_spiflash_write+0xba>
    pp_time_typical = dev->characteristics->tbp1.typical;
     6b2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    pp_time_maximum = dev->characteristics->tpp.maximum;
     6b4:	e9d3 3a09 	ldrd	r3, sl, [r3, #36]	; 0x24
        hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     6b8:	4681      	mov	r9, r0
        rc = spiflash_wait_ready_till(dev, pp_time_maximum - pp_time_typical,
     6ba:	459a      	cmp	sl, r3
     6bc:	bf2c      	ite	cs
     6be:	ebca 080a 	rsbcs	r8, sl, sl
     6c2:	ebca 0803 	rsbcc	r8, sl, r3
     6c6:	230a      	movs	r3, #10
     6c8:	fbb8 f3f3 	udiv	r3, r8, r3
     6cc:	9301      	str	r3, [sp, #4]
    while (len) {
     6ce:	b90f      	cbnz	r7, 6d4 <hal_spiflash_write+0x44>
err:
     6d0:	4638      	mov	r0, r7
     6d2:	e037      	b.n	744 <hal_spiflash_write+0xb4>
        spiflash_write_enable(dev);
     6d4:	4628      	mov	r0, r5
     6d6:	f7ff ffcd 	bl	674 <spiflash_write_enable>
        cmd[1] = (uint8_t)(addr >> 16);
     6da:	0c33      	lsrs	r3, r6, #16
     6dc:	f88d 300d 	strb.w	r3, [sp, #13]
        cmd[2] = (uint8_t)(addr >> 8);
     6e0:	0a33      	lsrs	r3, r6, #8
     6e2:	f88d 300e 	strb.w	r3, [sp, #14]
        page_limit = (addr & ~(dev->page_size - 1)) + dev->page_size;
     6e6:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
        spiflash_cs_activate(dev);
     6e8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
        cmd[3] = (uint8_t)(addr);
     6ea:	f88d 600f 	strb.w	r6, [sp, #15]
        page_limit = (addr & ~(dev->page_size - 1)) + dev->page_size;
     6ee:	425c      	negs	r4, r3
     6f0:	4034      	ands	r4, r6
        to_write = page_limit - addr > len ? len :  page_limit - addr;
     6f2:	1ba4      	subs	r4, r4, r6
     6f4:	441c      	add	r4, r3
     6f6:	42bc      	cmp	r4, r7
     6f8:	bf28      	it	cs
     6fa:	463c      	movcs	r4, r7
        spiflash_cs_activate(dev);
     6fc:	f7ff fefe 	bl	4fc <spiflash_cs_activate.isra.4>
        hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
     700:	2304      	movs	r3, #4
     702:	2200      	movs	r2, #0
     704:	a903      	add	r1, sp, #12
     706:	6a28      	ldr	r0, [r5, #32]
     708:	f000 fbe6 	bl	ed8 <hal_spi_txrx>
        hal_spi_txrx(dev->spi_num, (void *)u8buf, NULL, to_write);
     70c:	4623      	mov	r3, r4
     70e:	2200      	movs	r2, #0
     710:	4659      	mov	r1, fp
     712:	6a28      	ldr	r0, [r5, #32]
     714:	f000 fbe0 	bl	ed8 <hal_spi_txrx>
        spiflash_cs_deactivate(dev);
     718:	6aa8      	ldr	r0, [r5, #40]	; 0x28
     71a:	f7ff fef2 	bl	502 <spiflash_cs_deactivate.isra.5>
        dev->ready = false;
     71e:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
    os_cputime_delay_usecs(usecs);
     722:	4650      	mov	r0, sl
     724:	f000 fe98 	bl	1458 <os_cputime_delay_usecs>
    if (dev->ready) {
     728:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
     72c:	b11b      	cbz	r3, 736 <hal_spiflash_write+0xa6>
        addr += to_write;
     72e:	4426      	add	r6, r4
        u8buf += to_write;
     730:	44a3      	add	fp, r4
        len -= to_write;
     732:	1b3f      	subs	r7, r7, r4
     734:	e7cb      	b.n	6ce <hal_spiflash_write+0x3e>
     736:	9a01      	ldr	r2, [sp, #4]
     738:	4641      	mov	r1, r8
     73a:	4628      	mov	r0, r5
     73c:	f7ff ff3e 	bl	5bc <spiflash_wait_ready_till.part.6>
        if (rc) {
     740:	2800      	cmp	r0, #0
     742:	d0f4      	beq.n	72e <hal_spiflash_write+0x9e>
}
     744:	b005      	add	sp, #20
     746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = -1;
     74a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
     74e:	e7f9      	b.n	744 <hal_spiflash_write+0xb4>

00000750 <spiflash_execute_erase>:
{
     750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     754:	460e      	mov	r6, r1
    if (spiflash_wait_ready(dev, 100) != 0) {
     756:	2164      	movs	r1, #100	; 0x64
{
     758:	4604      	mov	r4, r0
     75a:	4690      	mov	r8, r2
     75c:	461f      	mov	r7, r3
    if (spiflash_wait_ready(dev, 100) != 0) {
     75e:	f7ff ff4d 	bl	5fc <spiflash_wait_ready>
     762:	4605      	mov	r5, r0
     764:	bb60      	cbnz	r0, 7c0 <spiflash_execute_erase+0x70>
    spiflash_write_enable(dev);
     766:	4620      	mov	r0, r4
     768:	f7ff ff84 	bl	674 <spiflash_write_enable>
    spiflash_read_status(dev);
     76c:	4620      	mov	r0, r4
     76e:	f7ff ff08 	bl	582 <spiflash_read_status>
    spiflash_cs_activate(dev);
     772:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     774:	f7ff fec2 	bl	4fc <spiflash_cs_activate.isra.4>
    hal_spi_txrx(dev->spi_num, (void *)buf, NULL, size);
     778:	4631      	mov	r1, r6
     77a:	4643      	mov	r3, r8
     77c:	462a      	mov	r2, r5
     77e:	6a20      	ldr	r0, [r4, #32]
     780:	f000 fbaa 	bl	ed8 <hal_spi_txrx>
    spiflash_cs_deactivate(dev);
     784:	6aa0      	ldr	r0, [r4, #40]	; 0x28
     786:	f7ff febc 	bl	502 <spiflash_cs_deactivate.isra.5>
    dev->ready = false;
     78a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    start_time = os_cputime_get32();
     78e:	f000 fe55 	bl	143c <os_cputime_get32>
     792:	4606      	mov	r6, r0
    os_cputime_delay_usecs(usecs);
     794:	6838      	ldr	r0, [r7, #0]
     796:	f000 fe5f 	bl	1458 <os_cputime_delay_usecs>
    wait_time_us = os_cputime_ticks_to_usecs(os_cputime_get32() - start_time);
     79a:	f000 fe4f 	bl	143c <os_cputime_get32>
    if (wait_time_us > delay_spec->maximum) {
     79e:	6879      	ldr	r1, [r7, #4]
    if (dev->ready) {
     7a0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    wait_time_us = os_cputime_ticks_to_usecs(os_cputime_get32() - start_time);
     7a4:	1b80      	subs	r0, r0, r6
    if (wait_time_us > delay_spec->maximum) {
     7a6:	4281      	cmp	r1, r0
        wait_time_us = delay_spec->maximum - wait_time_us;
     7a8:	bf2c      	ite	cs
     7aa:	1a09      	subcs	r1, r1, r0
        wait_time_us = 0;
     7ac:	4629      	movcc	r1, r5
    if (dev->ready) {
     7ae:	b94b      	cbnz	r3, 7c4 <spiflash_execute_erase+0x74>
     7b0:	2232      	movs	r2, #50	; 0x32
     7b2:	4620      	mov	r0, r4
     7b4:	fbb1 f2f2 	udiv	r2, r1, r2
}
     7b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     7bc:	f7ff befe 	b.w	5bc <spiflash_wait_ready_till.part.6>
        rc = -1;
     7c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
}
     7c4:	4628      	mov	r0, r5
     7c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000007ca <spiflash_erase_cmd>:

static int
spiflash_erase_cmd(struct spiflash_dev *dev, uint8_t cmd, uint32_t addr,
                   const struct spiflash_time_spec *time_spec)
{
     7ca:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
     7cc:	f88d 1004 	strb.w	r1, [sp, #4]
     7d0:	0c11      	lsrs	r1, r2, #16
     7d2:	f88d 1005 	strb.w	r1, [sp, #5]
                       (uint8_t)addr };
     7d6:	f88d 2007 	strb.w	r2, [sp, #7]
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
     7da:	0a11      	lsrs	r1, r2, #8
    return spiflash_execute_erase(dev, buf, sizeof(buf), time_spec);
     7dc:	2204      	movs	r2, #4
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
     7de:	f88d 1006 	strb.w	r1, [sp, #6]
    return spiflash_execute_erase(dev, buf, sizeof(buf), time_spec);
     7e2:	eb0d 0102 	add.w	r1, sp, r2
     7e6:	f7ff ffb3 	bl	750 <spiflash_execute_erase>

}
     7ea:	b003      	add	sp, #12
     7ec:	f85d fb04 	ldr.w	pc, [sp], #4

000007f0 <spiflash_sector_erase>:

int
spiflash_sector_erase(struct spiflash_dev *dev, uint32_t addr)
{
    return spiflash_erase_cmd(dev, SPIFLASH_SECTOR_ERASE, addr,
     7f0:	460a      	mov	r2, r1
     7f2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     7f4:	2120      	movs	r1, #32
     7f6:	f7ff bfe8 	b.w	7ca <spiflash_erase_cmd>

000007fa <hal_spiflash_erase_sector>:
    return spiflash_sector_erase(dev, addr);
     7fa:	f7ff bff9 	b.w	7f0 <spiflash_sector_erase>

000007fe <spiflash_block_32k_erase>:

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
int
spiflash_block_32k_erase(struct spiflash_dev *dev, uint32_t addr)
{
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
     7fe:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     800:	460a      	mov	r2, r1
     802:	3308      	adds	r3, #8
     804:	2152      	movs	r1, #82	; 0x52
     806:	f7ff bfe0 	b.w	7ca <spiflash_erase_cmd>

0000080a <spiflash_block_64k_erase>:

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
int
spiflash_block_64k_erase(struct spiflash_dev *dev, uint32_t addr)
{
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
     80a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     80c:	460a      	mov	r2, r1
     80e:	3310      	adds	r3, #16
     810:	21d8      	movs	r1, #216	; 0xd8
     812:	f7ff bfda 	b.w	7ca <spiflash_erase_cmd>

00000816 <spiflash_chip_erase>:
}
#endif

int
spiflash_chip_erase(struct spiflash_dev *dev)
{
     816:	b507      	push	{r0, r1, r2, lr}
    uint8_t buf[1] = { SPIFLASH_CHIP_ERASE };
     818:	a902      	add	r1, sp, #8
     81a:	2360      	movs	r3, #96	; 0x60
     81c:	f801 3d04 	strb.w	r3, [r1, #-4]!

    return spiflash_execute_erase(dev, buf, sizeof(buf),
     820:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     822:	2201      	movs	r2, #1
     824:	3318      	adds	r3, #24
     826:	f7ff ff93 	bl	750 <spiflash_execute_erase>
                                  &dev->characteristics->tce);
}
     82a:	b003      	add	sp, #12
     82c:	f85d fb04 	ldr.w	pc, [sp], #4

00000830 <spiflash_erase>:

int
spiflash_erase(struct spiflash_dev *dev, uint32_t address, uint32_t size)
{
     830:	b570      	push	{r4, r5, r6, lr}
     832:	4606      	mov	r6, r0
     834:	4615      	mov	r5, r2
    int rc = 0;

    if (address == 0 && size == dev->hal.hf_size) {
     836:	b931      	cbnz	r1, 846 <spiflash_erase+0x16>
     838:	6883      	ldr	r3, [r0, #8]
     83a:	4293      	cmp	r3, r2
     83c:	d103      	bne.n	846 <spiflash_erase+0x16>
            size = 0;
        }
    }
err:
    return rc;
}
     83e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return spiflash_chip_erase(dev);
     842:	f7ff bfe8 	b.w	816 <spiflash_chip_erase>
    address &= ~0xFFFU;
     846:	f421 647f 	bic.w	r4, r1, #4080	; 0xff0
     84a:	f024 040f 	bic.w	r4, r4, #15
    while (size) {
     84e:	b325      	cbz	r5, 89a <spiflash_erase+0x6a>
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
     850:	b2a3      	uxth	r3, r4
     852:	b963      	cbnz	r3, 86e <spiflash_erase+0x3e>
     854:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
     858:	d309      	bcc.n	86e <spiflash_erase+0x3e>
            rc = spiflash_block_64k_erase(dev, address);
     85a:	4621      	mov	r1, r4
     85c:	4630      	mov	r0, r6
     85e:	f7ff ffd4 	bl	80a <spiflash_block_64k_erase>
            if (rc) {
     862:	b9d8      	cbnz	r0, 89c <spiflash_erase+0x6c>
            address += 0x10000;
     864:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
            size -= 0x10000;
     868:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
            continue;
     86c:	e7ef      	b.n	84e <spiflash_erase+0x1e>
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
     86e:	f3c4 030e 	ubfx	r3, r4, #0, #15
            rc = spiflash_block_32k_erase(dev, address);
     872:	4621      	mov	r1, r4
     874:	4630      	mov	r0, r6
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
     876:	b953      	cbnz	r3, 88e <spiflash_erase+0x5e>
     878:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
     87c:	d307      	bcc.n	88e <spiflash_erase+0x5e>
            rc = spiflash_block_32k_erase(dev, address);
     87e:	f7ff ffbe 	bl	7fe <spiflash_block_32k_erase>
            if (rc) {
     882:	b958      	cbnz	r0, 89c <spiflash_erase+0x6c>
            address += 0x8000;
     884:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
            size -= 0x8000;
     888:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
            continue;
     88c:	e7df      	b.n	84e <spiflash_erase+0x1e>
        rc = spiflash_sector_erase(dev, address);
     88e:	f7ff ffaf 	bl	7f0 <spiflash_sector_erase>
        if (rc) {
     892:	b918      	cbnz	r0, 89c <spiflash_erase+0x6c>
        if (size > MYNEWT_VAL(SPIFLASH_SECTOR_SIZE)) {
     894:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
     898:	d801      	bhi.n	89e <spiflash_erase+0x6e>
{
     89a:	2000      	movs	r0, #0
}
     89c:	bd70      	pop	{r4, r5, r6, pc}
        address += MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     89e:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
            size -= MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
     8a2:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
     8a6:	e7d2      	b.n	84e <spiflash_erase+0x1e>

000008a8 <hal_spiflash_erase>:
    return spiflash_erase(dev, address, size);
     8a8:	f7ff bfc2 	b.w	830 <spiflash_erase>

000008ac <spiflash_identify>:

int
spiflash_identify(struct spiflash_dev *dev)
{
     8ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    int i;
    int j;
    uint8_t manufacturer = 0;
    uint8_t memory_type = 0;
    uint8_t capacity = 0;
     8ae:	ae02      	add	r6, sp, #8
    uint8_t manufacturer = 0;
     8b0:	2500      	movs	r5, #0

    spiflash_lock(dev);

    /* Only one chip specified, no need for search*/
    if ((sizeof(supported_chips) / sizeof(supported_chips[0])) == 2) {
        supported_chips[0].fc_release_power_down(dev);
     8b2:	4c17      	ldr	r4, [pc, #92]	; (910 <spiflash_identify+0x64>)
    uint8_t capacity = 0;
     8b4:	f806 5d01 	strb.w	r5, [r6, #-1]!
{
     8b8:	4607      	mov	r7, r0
        supported_chips[0].fc_release_power_down(dev);
     8ba:	6863      	ldr	r3, [r4, #4]
    uint8_t manufacturer = 0;
     8bc:	f88d 5005 	strb.w	r5, [sp, #5]
    uint8_t memory_type = 0;
     8c0:	f88d 5006 	strb.w	r5, [sp, #6]
        supported_chips[0].fc_release_power_down(dev);
     8c4:	4798      	blx	r3
        spiflash_read_jedec_id(dev, &manufacturer, &memory_type, &capacity);
     8c6:	4633      	mov	r3, r6
     8c8:	f10d 0206 	add.w	r2, sp, #6
     8cc:	f10d 0105 	add.w	r1, sp, #5
     8d0:	4638      	mov	r0, r7
     8d2:	f7ff fe2d 	bl	530 <spiflash_read_jedec_id>
        /* If BSP defined SpiFlash manufacturer or memory type does not
         * match SpiFlash is most likely not connected, connected to
         * different pins, or of different type.
         * It is unlikely that flash depended packaged will work correctly.
         */
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
     8d6:	7822      	ldrb	r2, [r4, #0]
     8d8:	f89d 3005 	ldrb.w	r3, [sp, #5]
     8dc:	429a      	cmp	r2, r3
     8de:	d109      	bne.n	8f4 <spiflash_identify+0x48>
     8e0:	7862      	ldrb	r2, [r4, #1]
     8e2:	f89d 3006 	ldrb.w	r3, [sp, #6]
     8e6:	429a      	cmp	r2, r3
     8e8:	d104      	bne.n	8f4 <spiflash_identify+0x48>
     8ea:	78a2      	ldrb	r2, [r4, #2]
     8ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
     8f0:	429a      	cmp	r2, r3
     8f2:	d009      	beq.n	908 <spiflash_identify+0x5c>
     8f4:	f7ff fc4e 	bl	194 <hal_debugger_connected>
     8f8:	b100      	cbz	r0, 8fc <spiflash_identify+0x50>
     8fa:	be01      	bkpt	0x0001
     8fc:	2300      	movs	r3, #0
     8fe:	461a      	mov	r2, r3
     900:	4619      	mov	r1, r3
     902:	4618      	mov	r0, r3
     904:	f000 fd28 	bl	1358 <__assert_func>
    }
err:
    spiflash_unlock(dev);

    return rc;
}
     908:	4628      	mov	r0, r5
        dev->flash_chip = &supported_chips[0];
     90a:	63bc      	str	r4, [r7, #56]	; 0x38
}
     90c:	b003      	add	sp, #12
     90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     910:	20000128 	.word	0x20000128

00000914 <hal_spiflash_init>:

static int
hal_spiflash_init(const struct hal_flash *hal_flash_dev)
{
     914:	b510      	push	{r4, lr}
     916:	4604      	mov	r4, r0
    os_callout_init(&dev->apd_tmo_co, os_eventq_dflt_get(),
                    spiflash_apd_tmo_func, dev);
#endif

#if !MYNEWT_VAL(BUS_DRIVER_PRESENT)
    hal_gpio_init_out(dev->ss_pin, 1);
     918:	2101      	movs	r1, #1
     91a:	6a80      	ldr	r0, [r0, #40]	; 0x28
     91c:	f000 f8e8 	bl	af0 <hal_gpio_init_out>

    (void)hal_spi_disable(dev->spi_num);
     920:	6a20      	ldr	r0, [r4, #32]
     922:	f000 fa01 	bl	d28 <hal_spi_disable>

    rc = hal_spi_config(dev->spi_num, &dev->spi_settings);
     926:	f104 0118 	add.w	r1, r4, #24
     92a:	6a20      	ldr	r0, [r4, #32]
     92c:	f000 f94a 	bl	bc4 <hal_spi_config>
    if (rc) {
     930:	4602      	mov	r2, r0
     932:	b958      	cbnz	r0, 94c <hal_spiflash_init+0x38>
        return (rc);
    }

    hal_spi_set_txrx_cb(dev->spi_num, NULL, NULL);
     934:	4601      	mov	r1, r0
     936:	6a20      	ldr	r0, [r4, #32]
     938:	f000 faba 	bl	eb0 <hal_spi_set_txrx_cb>
    hal_spi_enable(dev->spi_num);
     93c:	6a20      	ldr	r0, [r4, #32]
     93e:	f000 f9d3 	bl	ce8 <hal_spi_enable>
#endif
    rc = spiflash_identify(dev);
     942:	4620      	mov	r0, r4

    return rc;
}
     944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    rc = spiflash_identify(dev);
     948:	f7ff bfb0 	b.w	8ac <spiflash_identify>
}
     94c:	bd10      	pop	{r4, pc}

0000094e <_exit>:

void _exit(int status);

void
_exit(int status)
{
     94e:	b508      	push	{r3, lr}
    hal_system_reset();
     950:	f7ff fc08 	bl	164 <hal_system_reset>

00000954 <nrf52k_flash_wait_ready>:

#define NRF52K_FLASH_READY() (NRF_NVMC->READY == NVMC_READY_READY_Ready)

static int
nrf52k_flash_wait_ready(void)
{
     954:	4b06      	ldr	r3, [pc, #24]	; (970 <nrf52k_flash_wait_ready+0x1c>)
    int i;

    for (i = 0; i < 100000; i++) {
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
     956:	4a07      	ldr	r2, [pc, #28]	; (974 <nrf52k_flash_wait_ready+0x20>)
     958:	f8d2 1400 	ldr.w	r1, [r2, #1024]	; 0x400
     95c:	2901      	cmp	r1, #1
     95e:	d004      	beq.n	96a <nrf52k_flash_wait_ready+0x16>
    for (i = 0; i < 100000; i++) {
     960:	3b01      	subs	r3, #1
     962:	d1f9      	bne.n	958 <nrf52k_flash_wait_ready+0x4>
            return 0;
        }
    }
    return -1;
     964:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     968:	4770      	bx	lr
            return 0;
     96a:	2000      	movs	r0, #0
}
     96c:	4770      	bx	lr
     96e:	bf00      	nop
     970:	000186a0 	.word	0x000186a0
     974:	4001e000 	.word	0x4001e000

00000978 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
     978:	b570      	push	{r4, r5, r6, lr}
     97a:	460e      	mov	r6, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
     97c:	f7ff ffea 	bl	954 <nrf52k_flash_wait_ready>
     980:	b9d0      	cbnz	r0, 9b8 <nrf52k_flash_erase_sector+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     982:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     986:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
     988:	4c0d      	ldr	r4, [pc, #52]	; (9c0 <nrf52k_flash_erase_sector+0x48>)
     98a:	2302      	movs	r3, #2
     98c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
     990:	f7ff ffe0 	bl	954 <nrf52k_flash_wait_ready>
     994:	b968      	cbnz	r0, 9b2 <nrf52k_flash_erase_sector+0x3a>
        goto out;
    }

    NRF_NVMC->ERASEPAGE = sector_address;
     996:	f8c4 6508 	str.w	r6, [r4, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
     99a:	f7ff ffdb 	bl	954 <nrf52k_flash_wait_ready>
     99e:	3000      	adds	r0, #0
     9a0:	bf18      	it	ne
     9a2:	2001      	movne	r0, #1
     9a4:	4240      	negs	r0, r0
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
     9a6:	2300      	movs	r3, #0
     9a8:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     9ac:	b905      	cbnz	r5, 9b0 <nrf52k_flash_erase_sector+0x38>
  __ASM volatile ("cpsie i" : : : "memory");
     9ae:	b662      	cpsie	i
    return rc;
}
     9b0:	bd70      	pop	{r4, r5, r6, pc}
    int rc = -1;
     9b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     9b6:	e7f6      	b.n	9a6 <nrf52k_flash_erase_sector+0x2e>
        return -1;
     9b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     9bc:	e7f8      	b.n	9b0 <nrf52k_flash_erase_sector+0x38>
     9be:	bf00      	nop
     9c0:	4001e000 	.word	0x4001e000

000009c4 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
     9c4:	2000      	movs	r0, #0
     9c6:	4770      	bx	lr

000009c8 <nrf52k_flash_write>:
{
     9c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
     9cc:	460e      	mov	r6, r1
     9ce:	4614      	mov	r4, r2
     9d0:	461d      	mov	r5, r3
    if (nrf52k_flash_wait_ready()) {
     9d2:	f7ff ffbf 	bl	954 <nrf52k_flash_wait_ready>
     9d6:	2800      	cmp	r0, #0
     9d8:	d154      	bne.n	a84 <nrf52k_flash_write+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     9da:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
     9de:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     9e0:	4b2a      	ldr	r3, [pc, #168]	; (a8c <nrf52k_flash_write+0xc4>)
     9e2:	2201      	movs	r2, #1
    if (tmp) {
     9e4:	f016 0a03 	ands.w	sl, r6, #3
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
     9e8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
     9ec:	d026      	beq.n	a3c <nrf52k_flash_write+0x74>
        if (nrf52k_flash_wait_ready()) {
     9ee:	f7ff ffb1 	bl	954 <nrf52k_flash_wait_ready>
     9f2:	b160      	cbz	r0, a0e <nrf52k_flash_write+0x46>
    int rc = -1;
     9f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
     9f8:	4b24      	ldr	r3, [pc, #144]	; (a8c <nrf52k_flash_write+0xc4>)
     9fa:	2200      	movs	r2, #0
     9fc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
     a00:	f1b8 0f00 	cmp.w	r8, #0
     a04:	d100      	bne.n	a08 <nrf52k_flash_write+0x40>
  __ASM volatile ("cpsie i" : : : "memory");
     a06:	b662      	cpsie	i
}
     a08:	b002      	add	sp, #8
     a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        val = *(uint32_t *)(address & ~0x3);
     a0e:	f026 0903 	bic.w	r9, r6, #3
     a12:	a802      	add	r0, sp, #8
        cnt = 4 - tmp;
     a14:	f1ca 0704 	rsb	r7, sl, #4
        val = *(uint32_t *)(address & ~0x3);
     a18:	f8d9 3000 	ldr.w	r3, [r9]
     a1c:	f840 3d04 	str.w	r3, [r0, #-4]!
     a20:	42af      	cmp	r7, r5
     a22:	bf28      	it	cs
     a24:	462f      	movcs	r7, r5
        memcpy((uint8_t *)&val + tmp, src, cnt);
     a26:	4621      	mov	r1, r4
     a28:	463a      	mov	r2, r7
     a2a:	4450      	add	r0, sl
     a2c:	f000 ffba 	bl	19a4 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
     a30:	9b01      	ldr	r3, [sp, #4]
     a32:	f8c9 3000 	str.w	r3, [r9]
        address += cnt;
     a36:	443e      	add	r6, r7
        num_bytes -= cnt;
     a38:	1bed      	subs	r5, r5, r7
        src += cnt;
     a3a:	443c      	add	r4, r7
     a3c:	1b36      	subs	r6, r6, r4
     a3e:	e007      	b.n	a50 <nrf52k_flash_write+0x88>
        if (nrf52k_flash_wait_ready()) {
     a40:	f7ff ff88 	bl	954 <nrf52k_flash_wait_ready>
     a44:	2800      	cmp	r0, #0
     a46:	d1d5      	bne.n	9f4 <nrf52k_flash_write+0x2c>
        *(uint32_t *)address = *(uint32_t *)src;
     a48:	f854 3b04 	ldr.w	r3, [r4], #4
     a4c:	603b      	str	r3, [r7, #0]
        num_bytes -= sizeof(uint32_t);
     a4e:	3d04      	subs	r5, #4
    while (num_bytes >= sizeof(uint32_t)) {
     a50:	2d03      	cmp	r5, #3
     a52:	eb04 0706 	add.w	r7, r4, r6
     a56:	d8f3      	bhi.n	a40 <nrf52k_flash_write+0x78>
    if (num_bytes) {
     a58:	b16d      	cbz	r5, a76 <nrf52k_flash_write+0xae>
        val = *(uint32_t *)address;
     a5a:	a802      	add	r0, sp, #8
     a5c:	683b      	ldr	r3, [r7, #0]
     a5e:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
     a62:	462a      	mov	r2, r5
     a64:	4621      	mov	r1, r4
     a66:	f000 ff9d 	bl	19a4 <memcpy>
        if (nrf52k_flash_wait_ready()) {
     a6a:	f7ff ff73 	bl	954 <nrf52k_flash_wait_ready>
     a6e:	2800      	cmp	r0, #0
     a70:	d1c0      	bne.n	9f4 <nrf52k_flash_write+0x2c>
        *(uint32_t *)address = val;
     a72:	9b01      	ldr	r3, [sp, #4]
     a74:	603b      	str	r3, [r7, #0]
    if (nrf52k_flash_wait_ready()) {
     a76:	f7ff ff6d 	bl	954 <nrf52k_flash_wait_ready>
     a7a:	3000      	adds	r0, #0
     a7c:	bf18      	it	ne
     a7e:	2001      	movne	r0, #1
     a80:	4240      	negs	r0, r0
out:
     a82:	e7b9      	b.n	9f8 <nrf52k_flash_write+0x30>
        return -1;
     a84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     a88:	e7be      	b.n	a08 <nrf52k_flash_write+0x40>
     a8a:	bf00      	nop
     a8c:	4001e000 	.word	0x4001e000

00000a90 <nrf52k_flash_read>:
{
     a90:	b508      	push	{r3, lr}
     a92:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
     a94:	461a      	mov	r2, r3
     a96:	f000 ff85 	bl	19a4 <memcpy>
}
     a9a:	2000      	movs	r0, #0
     a9c:	bd08      	pop	{r3, pc}

00000a9e <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     a9e:	297f      	cmp	r1, #127	; 0x7f
{
     aa0:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
     aa2:	dd09      	ble.n	ab8 <nrf52k_flash_sector_info+0x1a>
     aa4:	f7ff fb76 	bl	194 <hal_debugger_connected>
     aa8:	b100      	cbz	r0, aac <nrf52k_flash_sector_info+0xe>
     aaa:	be01      	bkpt	0x0001
     aac:	2300      	movs	r3, #0
     aae:	461a      	mov	r2, r3
     ab0:	4619      	mov	r1, r3
     ab2:	4618      	mov	r0, r3
     ab4:	f000 fc50 	bl	1358 <__assert_func>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
     ab8:	0309      	lsls	r1, r1, #12
     aba:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
     abc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     ac0:	601a      	str	r2, [r3, #0]
}
     ac2:	2000      	movs	r0, #0
     ac4:	bd08      	pop	{r3, pc}

00000ac6 <hal_gpio_init_in>:
{
    uint32_t conf;
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);

    switch (pull) {
     ac6:	2901      	cmp	r1, #1
     ac8:	d010      	beq.n	aec <hal_gpio_init_in+0x26>
     aca:	2902      	cmp	r1, #2
    case HAL_GPIO_PULL_DOWN:
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
        break;
    case HAL_GPIO_PULL_NONE:
    default:
        conf = 0;
     acc:	bf0c      	ite	eq
     ace:	2304      	moveq	r3, #4
     ad0:	2300      	movne	r3, #0
        break;
    }

    port = HAL_GPIO_PORT(pin);
    port->PIN_CNF[pin_index] = conf;
     ad2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     ad6:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
     ada:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
     ade:	2301      	movs	r3, #1
     ae0:	fa03 f000 	lsl.w	r0, r3, r0
     ae4:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c

    return 0;
}
     ae8:	2000      	movs	r0, #0
     aea:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
     aec:	230c      	movs	r3, #12
     aee:	e7f0      	b.n	ad2 <hal_gpio_init_in+0xc>

00000af0 <hal_gpio_init_out>:
 *
 * @return int  0: no error; -1 otherwise.
 */
int
hal_gpio_init_out(int pin, int val)
{
     af0:	2301      	movs	r3, #1
     af2:	4083      	lsls	r3, r0
     af4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);

    port = HAL_GPIO_PORT(pin);
    if (val) {
     af8:	b151      	cbz	r1, b10 <hal_gpio_init_out+0x20>
        port->OUTSET = HAL_GPIO_MASK(pin);
     afa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
    }
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
     afe:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
     b02:	2103      	movs	r1, #3
     b04:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
        (GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);
    port->DIRSET = HAL_GPIO_MASK(pin);
     b08:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518

    return 0;
}
     b0c:	2000      	movs	r0, #0
     b0e:	4770      	bx	lr
        port->OUTCLR = HAL_GPIO_MASK(pin);
     b10:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
     b14:	e7f3      	b.n	afe <hal_gpio_init_out+0xe>

00000b16 <hal_gpio_write>:
 * @param pin Pin to set
 * @param val Value to set pin (0:low 1:high)
 */
void
hal_gpio_write(int pin, int val)
{
     b16:	2301      	movs	r3, #1
     b18:	fa03 f000 	lsl.w	r0, r3, r0
     b1c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    NRF_GPIO_Type *port;

    port = HAL_GPIO_PORT(pin);
    if (val) {
     b20:	b111      	cbz	r1, b28 <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
     b22:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
     b26:	4770      	bx	lr
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
     b28:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    }
}
     b2c:	4770      	bx	lr

00000b2e <hal_gpio_read>:
hal_gpio_read(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->DIR & HAL_GPIO_MASK(pin)) ?
     b2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     b32:	2201      	movs	r2, #1
     b34:	f8d3 1514 	ldr.w	r1, [r3, #1300]	; 0x514
     b38:	4082      	lsls	r2, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
     b3a:	420a      	tst	r2, r1
     b3c:	bf14      	ite	ne
     b3e:	f8d3 3504 	ldrne.w	r3, [r3, #1284]	; 0x504
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
     b42:	f8d3 3510 	ldreq.w	r3, [r3, #1296]	; 0x510
     b46:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
     b4a:	f000 0001 	and.w	r0, r0, #1
}
     b4e:	4770      	bx	lr

00000b50 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
     b50:	b538      	push	{r3, r4, r5, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
     b52:	4b1b      	ldr	r3, [pc, #108]	; (bc0 <nrf52_spi0_irq_handler+0x70>)
     b54:	781a      	ldrb	r2, [r3, #0]
     b56:	461d      	mov	r5, r3
     b58:	bb3a      	cbnz	r2, baa <nrf52_spi0_irq_handler+0x5a>
    spim = spi->nhs_spi.spim;
     b5a:	691c      	ldr	r4, [r3, #16]
    if (spim->EVENTS_END) {
     b5c:	f8d4 1118 	ldr.w	r1, [r4, #280]	; 0x118
     b60:	b319      	cbz	r1, baa <nrf52_spi0_irq_handler+0x5a>
        spim->EVENTS_END = 0;
     b62:	f8c4 2118 	str.w	r2, [r4, #280]	; 0x118
        if (spi->spi_xfr_flag == 0) {
     b66:	785a      	ldrb	r2, [r3, #1]
     b68:	b1fa      	cbz	r2, baa <nrf52_spi0_irq_handler+0x5a>
        spi->nhs_bytes_txd += xfr_bytes;
     b6a:	88d9      	ldrh	r1, [r3, #6]
        xfr_bytes = spim->TXD.AMOUNT;
     b6c:	f8d4 054c 	ldr.w	r0, [r4, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
     b70:	4401      	add	r1, r0
     b72:	b28a      	uxth	r2, r1
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
     b74:	8899      	ldrh	r1, [r3, #4]
        spi->nhs_bytes_txd += xfr_bytes;
     b76:	80da      	strh	r2, [r3, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
     b78:	428a      	cmp	r2, r1
     b7a:	d217      	bcs.n	bac <nrf52_spi0_irq_handler+0x5c>
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
     b7c:	1a89      	subs	r1, r1, r2
     b7e:	b289      	uxth	r1, r1
            spi->nhs_txbuf += xfr_bytes;
     b80:	699d      	ldr	r5, [r3, #24]
            if (spi->nhs_rxbuf) {
     b82:	69da      	ldr	r2, [r3, #28]
     b84:	b280      	uxth	r0, r0
            spim->TXD.MAXCNT = len;
     b86:	29ff      	cmp	r1, #255	; 0xff
            spi->nhs_txbuf += xfr_bytes;
     b88:	4405      	add	r5, r0
            spim->TXD.MAXCNT = len;
     b8a:	bf28      	it	cs
     b8c:	21ff      	movcs	r1, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
     b8e:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
            spi->nhs_txbuf += xfr_bytes;
     b92:	619d      	str	r5, [r3, #24]
            spim->TXD.MAXCNT = len;
     b94:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
            if (spi->nhs_rxbuf) {
     b98:	b12a      	cbz	r2, ba6 <nrf52_spi0_irq_handler+0x56>
                spi->nhs_rxbuf += xfr_bytes;
     b9a:	4402      	add	r2, r0
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
     b9c:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
                spi->nhs_rxbuf += xfr_bytes;
     ba0:	61da      	str	r2, [r3, #28]
                spim->RXD.MAXCNT = len;
     ba2:	f8c4 1538 	str.w	r1, [r4, #1336]	; 0x538
            spim->TASKS_START = 1;
     ba6:	2301      	movs	r3, #1
     ba8:	6123      	str	r3, [r4, #16]
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
     baa:	bd38      	pop	{r3, r4, r5, pc}
            if (spi->txrx_cb_func) {
     bac:	6a1b      	ldr	r3, [r3, #32]
     bae:	b10b      	cbz	r3, bb4 <nrf52_spi0_irq_handler+0x64>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
     bb0:	6a68      	ldr	r0, [r5, #36]	; 0x24
     bb2:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
     bb4:	2300      	movs	r3, #0
     bb6:	706b      	strb	r3, [r5, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
     bb8:	2340      	movs	r3, #64	; 0x40
     bba:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
     bbe:	e7f4      	b.n	baa <nrf52_spi0_irq_handler+0x5a>
     bc0:	20000160 	.word	0x20000160

00000bc4 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     bc4:	2803      	cmp	r0, #3
{
     bc6:	b530      	push	{r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     bc8:	f300 8085 	bgt.w	cd6 <hal_spi_config+0x112>
     bcc:	4b44      	ldr	r3, [pc, #272]	; (ce0 <hal_spi_config+0x11c>)
     bce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     bd2:	2b00      	cmp	r3, #0
     bd4:	d07f      	beq.n	cd6 <hal_spi_config+0x112>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
     bd6:	691c      	ldr	r4, [r3, #16]
    if (spim->ENABLE != 0) {
     bd8:	f8d4 0500 	ldr.w	r0, [r4, #1280]	; 0x500
     bdc:	2800      	cmp	r0, #0
     bde:	d17c      	bne.n	cda <hal_spi_config+0x116>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     be0:	781a      	ldrb	r2, [r3, #0]
     be2:	2a00      	cmp	r2, #0
     be4:	d164      	bne.n	cb0 <hal_spi_config+0xec>
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
     be6:	680a      	ldr	r2, [r1, #0]
     be8:	609a      	str	r2, [r3, #8]
     bea:	684a      	ldr	r2, [r1, #4]
     bec:	60da      	str	r2, [r3, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
     bee:	f8d4 3508 	ldr.w	r3, [r4, #1288]	; 0x508
    if (settings->data_mode <= HAL_SPI_MODE1) {
     bf2:	780d      	ldrb	r5, [r1, #0]
     bf4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
     bf8:	f003 031f 	and.w	r3, r3, #31
     bfc:	2201      	movs	r2, #1
        port->OUTCLR = (1UL << pin);
     bfe:	409a      	lsls	r2, r3
    if (settings->data_mode <= HAL_SPI_MODE1) {
     c00:	2d01      	cmp	r5, #1
        port->OUTCLR = (1UL << pin);
     c02:	bf94      	ite	ls
     c04:	f8c0 250c 	strls.w	r2, [r0, #1292]	; 0x50c
        port->OUTSET = (1UL << pin);
     c08:	f8c0 2508 	strhi.w	r2, [r0, #1288]	; 0x508
    port->PIN_CNF[pin] =
     c0c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
     c10:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
     c14:	2003      	movs	r0, #3
     c16:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
    switch (settings->word_size) {
     c1a:	788b      	ldrb	r3, [r1, #2]
     c1c:	2b00      	cmp	r3, #0
            rc = EINVAL;
     c1e:	bf0c      	ite	eq
     c20:	2000      	moveq	r0, #0
     c22:	2016      	movne	r0, #22
    switch (settings->data_mode) {
     c24:	2d03      	cmp	r5, #3
     c26:	d81e      	bhi.n	c66 <hal_spi_config+0xa2>
     c28:	e8df f005 	tbb	[pc, r5]
     c2c:	1b190220 	.word	0x1b190220
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
     c30:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
     c32:	784a      	ldrb	r2, [r1, #1]
     c34:	2a01      	cmp	r2, #1
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
     c36:	bf08      	it	eq
     c38:	f043 0301 	orreq.w	r3, r3, #1
    spim->CONFIG = nrf_config;
     c3c:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
    switch (settings->baudrate) {
     c40:	684b      	ldr	r3, [r1, #4]
     c42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     c46:	d027      	beq.n	c98 <hal_spi_config+0xd4>
     c48:	d812      	bhi.n	c70 <hal_spi_config+0xac>
     c4a:	2bfa      	cmp	r3, #250	; 0xfa
     c4c:	d01c      	beq.n	c88 <hal_spi_config+0xc4>
     c4e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
     c52:	d01e      	beq.n	c92 <hal_spi_config+0xce>
     c54:	2b7d      	cmp	r3, #125	; 0x7d
     c56:	d128      	bne.n	caa <hal_spi_config+0xe6>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
     c58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
     c5c:	e016      	b.n	c8c <hal_spi_config+0xc8>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
     c5e:	2304      	movs	r3, #4
     c60:	e7e7      	b.n	c32 <hal_spi_config+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
     c62:	2306      	movs	r3, #6
     c64:	e7e5      	b.n	c32 <hal_spi_config+0x6e>
            nrf_config = 0;
     c66:	2300      	movs	r3, #0
            rc = EINVAL;
     c68:	2016      	movs	r0, #22
     c6a:	e7e2      	b.n	c32 <hal_spi_config+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
     c6c:	2300      	movs	r3, #0
     c6e:	e7e0      	b.n	c32 <hal_spi_config+0x6e>
    switch (settings->baudrate) {
     c70:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
     c74:	d013      	beq.n	c9e <hal_spi_config+0xda>
     c76:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
     c7a:	d013      	beq.n	ca4 <hal_spi_config+0xe0>
     c7c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     c80:	d113      	bne.n	caa <hal_spi_config+0xe6>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
     c82:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
     c86:	e001      	b.n	c8c <hal_spi_config+0xc8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
     c88:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    spim->FREQUENCY = frequency;
     c8c:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
        rc = hal_spi_config_slave(spi, settings);
    }

err:
    return (rc);
}
     c90:	bd30      	pop	{r4, r5, pc}
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
     c92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     c96:	e7f9      	b.n	c8c <hal_spi_config+0xc8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
     c98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     c9c:	e7f6      	b.n	c8c <hal_spi_config+0xc8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
     c9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
     ca2:	e7f3      	b.n	c8c <hal_spi_config+0xc8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
     ca4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
     ca8:	e7f0      	b.n	c8c <hal_spi_config+0xc8>
            frequency = 0;
     caa:	2300      	movs	r3, #0
            rc = EINVAL;
     cac:	2016      	movs	r0, #22
     cae:	e7ed      	b.n	c8c <hal_spi_config+0xc8>
        rc = hal_spi_config_slave(spi, settings);
     cb0:	780b      	ldrb	r3, [r1, #0]
     cb2:	784d      	ldrb	r5, [r1, #1]
     cb4:	788a      	ldrb	r2, [r1, #2]
     cb6:	2b03      	cmp	r3, #3
     cb8:	bf99      	ittee	ls
     cba:	490a      	ldrls	r1, [pc, #40]	; (ce4 <hal_spi_config+0x120>)
     cbc:	5ccb      	ldrbls	r3, [r1, r3]
     cbe:	4603      	movhi	r3, r0
     cc0:	2016      	movhi	r0, #22
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
     cc2:	2d01      	cmp	r5, #1
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
     cc4:	bf08      	it	eq
     cc6:	f043 0301 	orreq.w	r3, r3, #1
    switch (settings->word_size) {
     cca:	2a00      	cmp	r2, #0
    spis->CONFIG = nrf_config;
     ccc:	f8c4 3554 	str.w	r3, [r4, #1364]	; 0x554
            rc = EINVAL;
     cd0:	bf18      	it	ne
     cd2:	2016      	movne	r0, #22
     cd4:	e7dc      	b.n	c90 <hal_spi_config+0xcc>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     cd6:	2016      	movs	r0, #22
     cd8:	e7da      	b.n	c90 <hal_spi_config+0xcc>
        return -1;
     cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
     cde:	e7d7      	b.n	c90 <hal_spi_config+0xcc>
     ce0:	000047c0 	.word	0x000047c0
     ce4:	000047bc 	.word	0x000047bc

00000ce8 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     ce8:	2803      	cmp	r0, #3
     cea:	dc18      	bgt.n	d1e <hal_spi_enable+0x36>
     cec:	4b0d      	ldr	r3, [pc, #52]	; (d24 <hal_spi_enable+0x3c>)
     cee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     cf2:	b1a3      	cbz	r3, d1e <hal_spi_enable+0x36>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     cf4:	7818      	ldrb	r0, [r3, #0]
     cf6:	b920      	cbnz	r0, d02 <hal_spi_enable+0x1a>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
     cf8:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
     cfa:	2201      	movs	r2, #1

        spis = spi->nhs_spi.spis;
        spis->EVENTS_END = 0;
        spis->EVENTS_ACQUIRED = 0;
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
     cfc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     d00:	4770      	bx	lr
        if (spi->txrx_cb_func == NULL) {
     d02:	6a1a      	ldr	r2, [r3, #32]
     d04:	b15a      	cbz	r2, d1e <hal_spi_enable+0x36>
        spis = spi->nhs_spi.spis;
     d06:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
     d08:	2000      	movs	r0, #0
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
     d0a:	f240 4202 	movw	r2, #1026	; 0x402
        spis->EVENTS_END = 0;
     d0e:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
     d12:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
     d16:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
     d1a:	2202      	movs	r2, #2
     d1c:	e7ee      	b.n	cfc <hal_spi_enable+0x14>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     d1e:	2016      	movs	r0, #22
    }
    rc = 0;

err:
    return rc;
}
     d20:	4770      	bx	lr
     d22:	bf00      	nop
     d24:	000047c0 	.word	0x000047c0

00000d28 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     d28:	2803      	cmp	r0, #3
     d2a:	dc27      	bgt.n	d7c <hal_spi_disable+0x54>
     d2c:	4b14      	ldr	r3, [pc, #80]	; (d80 <hal_spi_disable+0x58>)
     d2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     d32:	b31b      	cbz	r3, d7c <hal_spi_disable+0x54>
     d34:	691a      	ldr	r2, [r3, #16]

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     d36:	7818      	ldrb	r0, [r3, #0]
     d38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
        spim = spi->nhs_spi.spim;
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
     d3c:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     d40:	b998      	cbnz	r0, d6a <hal_spi_disable+0x42>

        if (spi->spi_xfr_flag) {
     d42:	7859      	ldrb	r1, [r3, #1]
     d44:	b149      	cbz	r1, d5a <hal_spi_disable+0x32>
    spim->TASKS_STOP = 1;
     d46:	2101      	movs	r1, #1
     d48:	6151      	str	r1, [r2, #20]
    while (!spim->EVENTS_STOPPED) {}
     d4a:	f8d2 1104 	ldr.w	r1, [r2, #260]	; 0x104
     d4e:	2900      	cmp	r1, #0
     d50:	d0fb      	beq.n	d4a <hal_spi_disable+0x22>
    spim->EVENTS_STOPPED = 0;
     d52:	2100      	movs	r1, #0
     d54:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
     d58:	7059      	strb	r1, [r3, #1]
        }
        spim->ENABLE = 0;
     d5a:	2100      	movs	r1, #0
     d5c:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
     d60:	2000      	movs	r0, #0
    spi->nhs_rxbuf = NULL;
     d62:	e9c3 0006 	strd	r0, r0, [r3, #24]
    spi->nhs_buflen = 0;
     d66:	6058      	str	r0, [r3, #4]
     d68:	4770      	bx	lr
        spis->EVENTS_END = 0;
     d6a:	2100      	movs	r1, #0
     d6c:	f8c2 1104 	str.w	r1, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
     d70:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
        spis->ENABLE = 0;
     d74:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
     d78:	70d9      	strb	r1, [r3, #3]
     d7a:	e7f1      	b.n	d60 <hal_spi_disable+0x38>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     d7c:	2016      	movs	r0, #22

    rc = 0;

err:
    return rc;
}
     d7e:	4770      	bx	lr
     d80:	000047c0 	.word	0x000047c0

00000d84 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     d84:	2803      	cmp	r0, #3
{
     d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     d88:	4604      	mov	r4, r0
     d8a:	460e      	mov	r6, r1
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     d8c:	dc63      	bgt.n	e56 <hal_spi_init+0xd2>
     d8e:	4b33      	ldr	r3, [pc, #204]	; (e5c <hal_spi_init+0xd8>)
     d90:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     d94:	2b00      	cmp	r3, #0
     d96:	d05e      	beq.n	e56 <hal_spi_init+0xd2>
    if (cfg == NULL) {
     d98:	2900      	cmp	r1, #0
     d9a:	d05c      	beq.n	e56 <hal_spi_init+0xd2>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
     d9c:	2a01      	cmp	r2, #1
     d9e:	d85a      	bhi.n	e56 <hal_spi_init+0xd2>
    spi->spi_type = spi_type;
     da0:	701a      	strb	r2, [r3, #0]
    if (spi_num == 0) {
     da2:	2800      	cmp	r0, #0
     da4:	d157      	bne.n	e56 <hal_spi_init+0xd2>
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
     da6:	4d2e      	ldr	r5, [pc, #184]	; (e60 <hal_spi_init+0xdc>)
     da8:	2703      	movs	r7, #3
     daa:	752f      	strb	r7, [r5, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
     dac:	2a00      	cmp	r2, #0
     dae:	d148      	bne.n	e42 <hal_spi_init+0xbe>
            spi->nhs_spi.spim = NRF_SPIM0;
     db0:	4b2c      	ldr	r3, [pc, #176]	; (e64 <hal_spi_init+0xe0>)
     db2:	612b      	str	r3, [r5, #16]
    hal_spi_disable(spi_num);
     db4:	f7ff ffb8 	bl	d28 <hal_spi_disable>
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
     db8:	7871      	ldrb	r1, [r6, #1]
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
     dba:	78b0      	ldrb	r0, [r6, #2]
     dbc:	f896 c000 	ldrb.w	ip, [r6]
    port->OUTCLR = (1UL << pin);
     dc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
     dc4:	2201      	movs	r2, #1
     dc6:	fa02 f601 	lsl.w	r6, r2, r1
     dca:	f8c3 650c 	str.w	r6, [r3, #1292]	; 0x50c
    port->PIN_CNF[pin] =
     dce:	f501 76e0 	add.w	r6, r1, #448	; 0x1c0
     dd2:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
    port->PIN_CNF[pin] =
     dd6:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
     dda:	f843 4026 	str.w	r4, [r3, r6, lsl #2]
    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
     dde:	692b      	ldr	r3, [r5, #16]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     de0:	4e21      	ldr	r6, [pc, #132]	; (e68 <hal_spi_init+0xe4>)
    spim->PSEL.SCK = cfg->sck_pin;
     de2:	f8c3 c508 	str.w	ip, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
     de6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
     dea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    spim->PSEL.MISO = cfg->miso_pin;
     dee:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
     df2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
     df6:	f995 3014 	ldrsb.w	r3, [r5, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
     dfa:	491c      	ldr	r1, [pc, #112]	; (e6c <hal_spi_init+0xe8>)
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     dfc:	f103 0510 	add.w	r5, r3, #16
  uint32_t vectors = (uint32_t )SCB->VTOR;
     e00:	6888      	ldr	r0, [r1, #8]
  if ((int32_t)(IRQn) >= 0)
     e02:	2b00      	cmp	r3, #0
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     e04:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
  if ((int32_t)(IRQn) >= 0)
     e08:	db14      	blt.n	e34 <hal_spi_init+0xb0>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     e0a:	f103 4160 	add.w	r1, r3, #3758096384	; 0xe0000000
     e0e:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
     e12:	20e0      	movs	r0, #224	; 0xe0
     e14:	f881 0300 	strb.w	r0, [r1, #768]	; 0x300
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e18:	f003 011f 	and.w	r1, r3, #31
     e1c:	095b      	lsrs	r3, r3, #5
     e1e:	009b      	lsls	r3, r3, #2
     e20:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
     e24:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
     e28:	408a      	lsls	r2, r1
     e2a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e2e:	601a      	str	r2, [r3, #0]
}
     e30:	4620      	mov	r0, r4
     e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     e34:	f003 030f 	and.w	r3, r3, #15
     e38:	3b04      	subs	r3, #4
     e3a:	440b      	add	r3, r1
     e3c:	22e0      	movs	r2, #224	; 0xe0
     e3e:	761a      	strb	r2, [r3, #24]
     e40:	e7f6      	b.n	e30 <hal_spi_init+0xac>
            assert(0);
     e42:	f7ff f9a7 	bl	194 <hal_debugger_connected>
     e46:	b100      	cbz	r0, e4a <hal_spi_init+0xc6>
     e48:	be01      	bkpt	0x0001
     e4a:	2300      	movs	r3, #0
     e4c:	461a      	mov	r2, r3
     e4e:	4619      	mov	r1, r3
     e50:	4618      	mov	r0, r3
     e52:	f000 fa81 	bl	1358 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     e56:	2416      	movs	r4, #22
     e58:	e7ea      	b.n	e30 <hal_spi_init+0xac>
     e5a:	bf00      	nop
     e5c:	000047c0 	.word	0x000047c0
     e60:	20000160 	.word	0x20000160
     e64:	40003000 	.word	0x40003000
     e68:	00000b51 	.word	0x00000b51
     e6c:	e000ed00 	.word	0xe000ed00

00000e70 <hal_spi_tx_val>:
    int rc;
    uint16_t retval;
    NRF_SPI_Type *spi;
    struct nrf52_hal_spi *hal_spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
     e70:	2803      	cmp	r0, #3
     e72:	dc16      	bgt.n	ea2 <hal_spi_tx_val+0x32>
     e74:	4b0d      	ldr	r3, [pc, #52]	; (eac <hal_spi_tx_val+0x3c>)
     e76:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     e7a:	b193      	cbz	r3, ea2 <hal_spi_tx_val+0x32>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     e7c:	781a      	ldrb	r2, [r3, #0]
     e7e:	b992      	cbnz	r2, ea6 <hal_spi_tx_val+0x36>
        spi = (NRF_SPI_Type *)hal_spi->nhs_spi.spim;
     e80:	691b      	ldr	r3, [r3, #16]
        spi->EVENTS_READY = 0;
        spi->TXD = (uint8_t)val;
     e82:	b2c9      	uxtb	r1, r1
        spi->EVENTS_READY = 0;
     e84:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        spi->TXD = (uint8_t)val;
     e88:	f8c3 151c 	str.w	r1, [r3, #1308]	; 0x51c
        while (!spi->EVENTS_READY) {}
     e8c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
     e90:	2a00      	cmp	r2, #0
     e92:	d0fb      	beq.n	e8c <hal_spi_tx_val+0x1c>
        spi->EVENTS_READY = 0;
     e94:	2200      	movs	r2, #0
     e96:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        retval = (uint16_t)spi->RXD;
     e9a:	f8d3 0518 	ldr.w	r0, [r3, #1304]	; 0x518
     e9e:	b280      	uxth	r0, r0
     ea0:	4770      	bx	lr
    }

    return retval;

err:
    return rc;
     ea2:	2016      	movs	r0, #22
     ea4:	4770      	bx	lr
        retval = 0xFFFF;
     ea6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
     eaa:	4770      	bx	lr
     eac:	000047c0 	.word	0x000047c0

00000eb0 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     eb0:	2803      	cmp	r0, #3
     eb2:	dc0a      	bgt.n	eca <hal_spi_set_txrx_cb+0x1a>
     eb4:	4b07      	ldr	r3, [pc, #28]	; (ed4 <hal_spi_set_txrx_cb+0x24>)
     eb6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     eba:	b133      	cbz	r3, eca <hal_spi_set_txrx_cb+0x1a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
     ebc:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
     ebe:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
     ec2:	b920      	cbnz	r0, ece <hal_spi_set_txrx_cb+0x1e>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
        spi->txrx_cb_arg = arg;
     ec4:	e9c3 1208 	strd	r1, r2, [r3, #32]
     ec8:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
     eca:	2016      	movs	r0, #22
     ecc:	4770      	bx	lr
        rc = -1;
     ece:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
     ed2:	4770      	bx	lr
     ed4:	000047c0 	.word	0x000047c0

00000ed8 <hal_spi_txrx>:
 *
 * @return int 0 on success, non-zero error code on failure.
 */
int
hal_spi_txrx(int spi_num, void *txbuf, void *rxbuf, int len)
{
     ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     eda:	460d      	mov	r5, r1
     edc:	4617      	mov	r7, r2
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
     ede:	461e      	mov	r6, r3
     ee0:	2b00      	cmp	r3, #0
     ee2:	d03d      	beq.n	f60 <hal_spi_txrx+0x88>
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
     ee4:	2803      	cmp	r0, #3
     ee6:	dc3b      	bgt.n	f60 <hal_spi_txrx+0x88>
     ee8:	4b1e      	ldr	r3, [pc, #120]	; (f64 <hal_spi_txrx+0x8c>)
     eea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
     eee:	b3bb      	cbz	r3, f60 <hal_spi_txrx+0x88>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
     ef0:	781a      	ldrb	r2, [r3, #0]
     ef2:	bbaa      	cbnz	r2, f60 <hal_spi_txrx+0x88>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
     ef4:	b3a1      	cbz	r1, f60 <hal_spi_txrx+0x88>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
     ef6:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
     ef8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
     efc:	2b07      	cmp	r3, #7
     efe:	d105      	bne.n	f0c <hal_spi_txrx+0x34>
            hal_spi_disable(spi_num);
     f00:	f7ff ff12 	bl	d28 <hal_spi_disable>
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
     f04:	2301      	movs	r3, #1
     f06:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
     f0a:	e001      	b.n	f10 <hal_spi_txrx+0x38>
        if (enabled == 0) {
     f0c:	2b00      	cmp	r3, #0
     f0e:	d0f9      	beq.n	f04 <hal_spi_txrx+0x2c>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
            spi->EVENTS_READY = 0;
     f10:	2300      	movs	r3, #0
        while (spi->EVENTS_READY) {
     f12:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
     f16:	b948      	cbnz	r0, f2c <hal_spi_txrx+0x54>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
     f18:	782b      	ldrb	r3, [r5, #0]
     f1a:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
        rxd = (uint8_t *)rxbuf;
     f1e:	4639      	mov	r1, r7
        txcnt = len - 1;
     f20:	1e73      	subs	r3, r6, #1
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
            spi->EVENTS_READY = 0;
     f22:	4602      	mov	r2, r0
        for (i = 0; i < len; ++i) {
     f24:	4286      	cmp	r6, r0
     f26:	dc06      	bgt.n	f36 <hal_spi_txrx+0x5e>
            if (rxbuf) {
                *rxd = rxval;
                ++rxd;
            }
        }
        return 0;
     f28:	2000      	movs	r0, #0
    }

err:
    return rc;
}
     f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rxval = (uint8_t)spi->RXD;
     f2c:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
     f30:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
     f34:	e7ed      	b.n	f12 <hal_spi_txrx+0x3a>
            if (txcnt) {
     f36:	b12b      	cbz	r3, f44 <hal_spi_txrx+0x6c>
                spi->TXD = *txd;
     f38:	f895 c001 	ldrb.w	ip, [r5, #1]
     f3c:	f8c4 c51c 	str.w	ip, [r4, #1308]	; 0x51c
                --txcnt;
     f40:	3b01      	subs	r3, #1
                ++txd;
     f42:	3501      	adds	r5, #1
            while (!spi->EVENTS_READY) {}
     f44:	f8d4 c108 	ldr.w	ip, [r4, #264]	; 0x108
     f48:	f1bc 0f00 	cmp.w	ip, #0
     f4c:	d0fa      	beq.n	f44 <hal_spi_txrx+0x6c>
            spi->EVENTS_READY = 0;
     f4e:	f8c4 2108 	str.w	r2, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
     f52:	f8d4 c518 	ldr.w	ip, [r4, #1304]	; 0x518
            if (rxbuf) {
     f56:	b10f      	cbz	r7, f5c <hal_spi_txrx+0x84>
            rxval = (uint8_t)spi->RXD;
     f58:	f801 cb01 	strb.w	ip, [r1], #1
        for (i = 0; i < len; ++i) {
     f5c:	3001      	adds	r0, #1
     f5e:	e7e1      	b.n	f24 <hal_spi_txrx+0x4c>
    return rc;
     f60:	2016      	movs	r0, #22
     f62:	e7e2      	b.n	f2a <hal_spi_txrx+0x52>
     f64:	000047c0 	.word	0x000047c0

00000f68 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
     f68:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
     f6a:	4b09      	ldr	r3, [pc, #36]	; (f90 <nrf52_wdt_irq_handler+0x28>)
     f6c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
     f70:	07d2      	lsls	r2, r2, #31
     f72:	d50c      	bpl.n	f8e <nrf52_wdt_irq_handler+0x26>
        NRF_WDT->EVENTS_TIMEOUT = 0;
     f74:	2200      	movs	r2, #0
     f76:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    assert(0);
     f7a:	f7ff f90b 	bl	194 <hal_debugger_connected>
     f7e:	b100      	cbz	r0, f82 <nrf52_wdt_irq_handler+0x1a>
     f80:	be01      	bkpt	0x0001
     f82:	2300      	movs	r3, #0
     f84:	461a      	mov	r2, r3
     f86:	4619      	mov	r1, r3
     f88:	4618      	mov	r0, r3
     f8a:	f000 f9e5 	bl	1358 <__assert_func>
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
     f8e:	bd08      	pop	{r3, pc}
     f90:	40010000 	.word	0x40010000

00000f94 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
     f94:	4a18      	ldr	r2, [pc, #96]	; (ff8 <hal_watchdog_init+0x64>)
{
     f96:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
     f98:	2301      	movs	r3, #1
     f9a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
     f9e:	4b17      	ldr	r3, [pc, #92]	; (ffc <hal_watchdog_init+0x68>)
     fa0:	4298      	cmp	r0, r3
     fa2:	d909      	bls.n	fb8 <hal_watchdog_init+0x24>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
     fa4:	f7ff f8f6 	bl	194 <hal_debugger_connected>
     fa8:	b100      	cbz	r0, fac <hal_watchdog_init+0x18>
     faa:	be01      	bkpt	0x0001
     fac:	2300      	movs	r3, #0
     fae:	461a      	mov	r2, r3
     fb0:	4619      	mov	r1, r3
     fb2:	4618      	mov	r0, r3
     fb4:	f000 f9d0 	bl	1358 <__assert_func>
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
     fb8:	2360      	movs	r3, #96	; 0x60
     fba:	4343      	muls	r3, r0
     fbc:	217d      	movs	r1, #125	; 0x7d
     fbe:	fbb3 f3f1 	udiv	r3, r3, r1
     fc2:	eb03 1040 	add.w	r0, r3, r0, lsl #5
  uint32_t vectors = (uint32_t )SCB->VTOR;
     fc6:	4b0e      	ldr	r3, [pc, #56]	; (1000 <hal_watchdog_init+0x6c>)
     fc8:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
     fcc:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
     fce:	490d      	ldr	r1, [pc, #52]	; (1004 <hal_watchdog_init+0x70>)
     fd0:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     fd4:	4b0c      	ldr	r3, [pc, #48]	; (1008 <hal_watchdog_init+0x74>)
     fd6:	21e0      	movs	r1, #224	; 0xe0
     fd8:	f883 1310 	strb.w	r1, [r3, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fdc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
     fe0:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     fe4:	6019      	str	r1, [r3, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
     fe6:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
     fea:	f043 0301 	orr.w	r3, r3, #1
     fee:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508

    return (0);
}
     ff2:	2000      	movs	r0, #0
     ff4:	bd08      	pop	{r3, pc}
     ff6:	bf00      	nop
     ff8:	40010000 	.word	0x40010000
     ffc:	02aaaaaa 	.word	0x02aaaaaa
    1000:	e000ed00 	.word	0xe000ed00
    1004:	00000f69 	.word	0x00000f69
    1008:	e000e100 	.word	0xe000e100

0000100c <nrf52_periph_create>:
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
    100c:	2100      	movs	r1, #0
#endif
}

void
nrf52_periph_create(void)
{
    100e:	b508      	push	{r3, lr}
    rc = hal_timer_init(0, NULL);
    1010:	4608      	mov	r0, r1
    1012:	f000 f8eb 	bl	11ec <hal_timer_init>
    assert(rc == 0);
    1016:	b148      	cbz	r0, 102c <nrf52_periph_create+0x20>
    1018:	f7ff f8bc 	bl	194 <hal_debugger_connected>
    101c:	b100      	cbz	r0, 1020 <nrf52_periph_create+0x14>
    101e:	be01      	bkpt	0x0001
    1020:	2300      	movs	r3, #0
    1022:	461a      	mov	r2, r3
    1024:	4619      	mov	r1, r3
    1026:	4618      	mov	r0, r3
    1028:	f000 f996 	bl	1358 <__assert_func>
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
    102c:	4805      	ldr	r0, [pc, #20]	; (1044 <nrf52_periph_create+0x38>)
    102e:	f000 fa01 	bl	1434 <os_cputime_init>
    assert(rc == 0);
    1032:	4602      	mov	r2, r0
    1034:	2800      	cmp	r0, #0
    1036:	d1ef      	bne.n	1018 <nrf52_periph_create+0xc>
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
    1038:	4903      	ldr	r1, [pc, #12]	; (1048 <nrf52_periph_create+0x3c>)
    103a:	f7ff fea3 	bl	d84 <hal_spi_init>
    assert(rc == 0);
    103e:	2800      	cmp	r0, #0
    1040:	d1ea      	bne.n	1018 <nrf52_periph_create+0xc>
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
    nrf52_periph_create_spi();
    nrf52_periph_create_temp();
}
    1042:	bd08      	pop	{r3, pc}
    1044:	000f4240 	.word	0x000f4240
    1048:	000047d0 	.word	0x000047d0

0000104c <__NVIC_SetPendingIRQ>:
  if ((int32_t)(IRQn) >= 0)
    104c:	2800      	cmp	r0, #0
    104e:	db09      	blt.n	1064 <__NVIC_SetPendingIRQ+0x18>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1050:	0943      	lsrs	r3, r0, #5
    1052:	2201      	movs	r2, #1
    1054:	f000 001f 	and.w	r0, r0, #31
    1058:	fa02 f000 	lsl.w	r0, r2, r0
    105c:	3340      	adds	r3, #64	; 0x40
    105e:	4a02      	ldr	r2, [pc, #8]	; (1068 <__NVIC_SetPendingIRQ+0x1c>)
    1060:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1064:	4770      	bx	lr
    1066:	bf00      	nop
    1068:	e000e100 	.word	0xe000e100

0000106c <hal_timer_read_bsptimer>:
    rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
}

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
    106c:	b538      	push	{r3, r4, r5, lr}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
    106e:	6903      	ldr	r3, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1070:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    1074:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
    low32 = rtctimer->COUNTER;
    1076:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
    107a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    tcntr = bsptimer->tmr_cntr;
    107e:	6844      	ldr	r4, [r0, #4]
    if (rtctimer->EVENTS_OVRFLW) {
    1080:	b15a      	cbz	r2, 109a <hal_timer_read_bsptimer+0x2e>
        tcntr += (1UL << 24);
    1082:	f104 7480 	add.w	r4, r4, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
        low32 = rtctimer->COUNTER;
        rtctimer->EVENTS_OVRFLW = 0;
    1086:	2200      	movs	r2, #0
        bsptimer->tmr_cntr = tcntr;
    1088:	6044      	str	r4, [r0, #4]
        low32 = rtctimer->COUNTER;
    108a:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
    108e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    1092:	f990 0001 	ldrsb.w	r0, [r0, #1]
    1096:	f7ff ffd9 	bl	104c <__NVIC_SetPendingIRQ>
    }
    tcntr |= low32;
    109a:	ea41 0004 	orr.w	r0, r1, r4
    __HAL_ENABLE_INTERRUPTS(ctx);
    109e:	b905      	cbnz	r5, 10a2 <hal_timer_read_bsptimer+0x36>
  __ASM volatile ("cpsie i" : : : "memory");
    10a0:	b662      	cpsie	i

    return tcntr;
}
    10a2:	bd38      	pop	{r3, r4, r5, pc}

000010a4 <nrf_timer_set_ocmp>:
{
    10a4:	b430      	push	{r4, r5}
    if (bsptimer->tmr_rtc) {
    10a6:	7884      	ldrb	r4, [r0, #2]
    10a8:	6903      	ldr	r3, [r0, #16]
    10aa:	b3bc      	cbz	r4, 111c <nrf_timer_set_ocmp+0x78>
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    10ac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    10b0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        cntr = rtctimer->COUNTER;
    10b4:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
    10b8:	f8d3 5104 	ldr.w	r5, [r3, #260]	; 0x104
        temp = bsptimer->tmr_cntr;
    10bc:	6842      	ldr	r2, [r0, #4]
        if (rtctimer->EVENTS_OVRFLW) {
    10be:	b11d      	cbz	r5, 10c8 <nrf_timer_set_ocmp+0x24>
            cntr = rtctimer->COUNTER;
    10c0:	f8d3 4504 	ldr.w	r4, [r3, #1284]	; 0x504
            temp += (1UL << 24);
    10c4:	f102 7280 	add.w	r2, r2, #16777216	; 0x1000000
        temp |= cntr;
    10c8:	4322      	orrs	r2, r4
        delta_t = (int32_t)(expiry - temp);
    10ca:	1a8a      	subs	r2, r1, r2
        if (delta_t < 1) {
    10cc:	2a00      	cmp	r2, #0
    10ce:	f04f 0501 	mov.w	r5, #1
    10d2:	dc06      	bgt.n	10e2 <nrf_timer_set_ocmp+0x3e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
    10d4:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    10d8:	f990 0001 	ldrsb.w	r0, [r0, #1]
}
    10dc:	bc30      	pop	{r4, r5}
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
    10de:	f7ff bfb5 	b.w	104c <__NVIC_SetPendingIRQ>
        } else if (delta_t < 3) {
    10e2:	2a02      	cmp	r2, #2
    10e4:	dc07      	bgt.n	10f6 <nrf_timer_set_ocmp+0x52>
            rtctimer->INTENSET = RTC_INTENSET_TICK_Msk;
    10e6:	f8c3 5304 	str.w	r5, [r3, #772]	; 0x304
            if (rtctimer->COUNTER != cntr) {
    10ea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    10ee:	429c      	cmp	r4, r3
    10f0:	d1f2      	bne.n	10d8 <nrf_timer_set_ocmp+0x34>
}
    10f2:	bc30      	pop	{r4, r5}
    10f4:	4770      	bx	lr
            if (delta_t < (1UL << 24)) {
    10f6:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
    10fa:	bf34      	ite	cc
    10fc:	f021 417f 	biccc.w	r1, r1, #4278190080	; 0xff000000
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
    1100:	f504 0400 	addcs.w	r4, r4, #8388608	; 0x800000
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    1104:	f44f 2280 	mov.w	r2, #262144	; 0x40000
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
    1108:	f8c3 5308 	str.w	r5, [r3, #776]	; 0x308
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
    110c:	bf34      	ite	cc
    110e:	f8c3 1548 	strcc.w	r1, [r3, #1352]	; 0x548
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
    1112:	f8c3 4548 	strcs.w	r4, [r3, #1352]	; 0x548
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    1116:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    111a:	e7ea      	b.n	10f2 <nrf_timer_set_ocmp+0x4e>
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    111c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    1120:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
    1124:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    1128:	f8c3 414c 	str.w	r4, [r3, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    112c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    1130:	2201      	movs	r2, #1
    1132:	649a      	str	r2, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    1134:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
    1138:	1a59      	subs	r1, r3, r1
    113a:	2900      	cmp	r1, #0
    113c:	dacc      	bge.n	10d8 <nrf_timer_set_ocmp+0x34>
    113e:	e7d8      	b.n	10f2 <nrf_timer_set_ocmp+0x4e>

00001140 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
    1140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    hwtimer = bsptimer->tmr_reg;
    1144:	4c28      	ldr	r4, [pc, #160]	; (11e8 <nrf52_timer0_irq_handler+0xa8>)
    1146:	6926      	ldr	r6, [r4, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    1148:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
    if (compare) {
    114c:	b113      	cbz	r3, 1154 <nrf52_timer0_irq_handler+0x14>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
    114e:	2300      	movs	r3, #0
    1150:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
    ++bsptimer->timer_isrs;
    1154:	68a3      	ldr	r3, [r4, #8]
    1156:	3301      	adds	r3, #1
    1158:	60a3      	str	r3, [r4, #8]
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
    115a:	f8d6 3308 	ldr.w	r3, [r6, #776]	; 0x308
    115e:	031b      	lsls	r3, r3, #12
    1160:	d53c      	bpl.n	11dc <nrf52_timer0_irq_handler+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    1162:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    1166:	b672      	cpsid	i
            tcntr = hal_timer_read_bsptimer(bsptimer);
    1168:	f8df 907c 	ldr.w	r9, [pc, #124]	; 11e8 <nrf52_timer0_irq_handler+0xa8>
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    116c:	f04f 0801 	mov.w	r8, #1
            timer->link.tqe_prev = NULL;
    1170:	f04f 0a00 	mov.w	sl, #0
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
    1174:	6965      	ldr	r5, [r4, #20]
    1176:	b145      	cbz	r5, 118a <nrf52_timer0_irq_handler+0x4a>
        if (bsptimer->tmr_rtc) {
    1178:	78a3      	ldrb	r3, [r4, #2]
    117a:	b19b      	cbz	r3, 11a4 <nrf52_timer0_irq_handler+0x64>
            tcntr = hal_timer_read_bsptimer(bsptimer);
    117c:	4648      	mov	r0, r9
    117e:	f7ff ff75 	bl	106c <hal_timer_read_bsptimer>
        if ((int32_t)(tcntr - timer->expiry) >= 0) {
    1182:	68eb      	ldr	r3, [r5, #12]
    1184:	1ac0      	subs	r0, r0, r3
    1186:	2800      	cmp	r0, #0
    1188:	da12      	bge.n	11b0 <nrf52_timer0_irq_handler+0x70>
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
    118a:	6963      	ldr	r3, [r4, #20]
    if (timer) {
    118c:	b9f3      	cbnz	r3, 11cc <nrf52_timer0_irq_handler+0x8c>
        if (bsptimer->tmr_rtc) {
    118e:	78a2      	ldrb	r2, [r4, #2]
    1190:	6923      	ldr	r3, [r4, #16]
    1192:	b32a      	cbz	r2, 11e0 <nrf52_timer0_irq_handler+0xa0>
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
    1194:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    1198:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
    119c:	2201      	movs	r2, #1
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    119e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    11a2:	e017      	b.n	11d4 <nrf52_timer0_irq_handler+0x94>
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    11a4:	6923      	ldr	r3, [r4, #16]
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    11a6:	f8c3 8048 	str.w	r8, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    11aa:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
    11ae:	e7e8      	b.n	1182 <nrf52_timer0_irq_handler+0x42>
    11b0:	e9d5 3204 	ldrd	r3, r2, [r5, #16]
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    11b4:	b143      	cbz	r3, 11c8 <nrf52_timer0_irq_handler+0x88>
    11b6:	615a      	str	r2, [r3, #20]
    11b8:	696a      	ldr	r2, [r5, #20]
    11ba:	6013      	str	r3, [r2, #0]
            timer->cb_func(timer->cb_arg);
    11bc:	e9d5 3001 	ldrd	r3, r0, [r5, #4]
            timer->link.tqe_prev = NULL;
    11c0:	f8c5 a014 	str.w	sl, [r5, #20]
            timer->cb_func(timer->cb_arg);
    11c4:	4798      	blx	r3
    11c6:	e7d5      	b.n	1174 <nrf52_timer0_irq_handler+0x34>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
    11c8:	61a2      	str	r2, [r4, #24]
    11ca:	e7f5      	b.n	11b8 <nrf52_timer0_irq_handler+0x78>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
    11cc:	68d9      	ldr	r1, [r3, #12]
    11ce:	4806      	ldr	r0, [pc, #24]	; (11e8 <nrf52_timer0_irq_handler+0xa8>)
    11d0:	f7ff ff68 	bl	10a4 <nrf_timer_set_ocmp>
    __HAL_ENABLE_INTERRUPTS(ctx);
    11d4:	b907      	cbnz	r7, 11d8 <nrf52_timer0_irq_handler+0x98>
  __ASM volatile ("cpsie i" : : : "memory");
    11d6:	b662      	cpsie	i
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    11d8:	f8d6 314c 	ldr.w	r3, [r6, #332]	; 0x14c
    hal_timer_irq_handler(&nrf52_hal_timer0);
}
    11dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
    11e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
    11e4:	e7db      	b.n	119e <nrf52_timer0_irq_handler+0x5e>
    11e6:	bf00      	nop
    11e8:	20000188 	.word	0x20000188

000011ec <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    11ec:	2805      	cmp	r0, #5
    11ee:	dc1d      	bgt.n	122c <hal_timer_init+0x40>
    11f0:	4b0f      	ldr	r3, [pc, #60]	; (1230 <hal_timer_init+0x44>)
    11f2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    11f6:	b1cb      	cbz	r3, 122c <hal_timer_init+0x40>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
    11f8:	781b      	ldrb	r3, [r3, #0]
    11fa:	b9bb      	cbnz	r3, 122c <hal_timer_init+0x40>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
    11fc:	b9b0      	cbnz	r0, 122c <hal_timer_init+0x40>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
    11fe:	4b0d      	ldr	r3, [pc, #52]	; (1234 <hal_timer_init+0x48>)
    1200:	4a0d      	ldr	r2, [pc, #52]	; (1238 <hal_timer_init+0x4c>)
    1202:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
    1204:	2208      	movs	r2, #8
    1206:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1208:	4b0c      	ldr	r3, [pc, #48]	; (123c <hal_timer_init+0x50>)
    120a:	f44f 7280 	mov.w	r2, #256	; 0x100
    120e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
    1212:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1216:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    121a:	22e0      	movs	r2, #224	; 0xe0
    121c:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
    1220:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    1224:	4a06      	ldr	r2, [pc, #24]	; (1240 <hal_timer_init+0x54>)
  uint32_t vectors = (uint32_t )SCB->VTOR;
    1226:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    1228:	661a      	str	r2, [r3, #96]	; 0x60
    122a:	4770      	bx	lr
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;

err:
    return rc;
    122c:	2016      	movs	r0, #22
}
    122e:	4770      	bx	lr
    1230:	000047d4 	.word	0x000047d4
    1234:	20000188 	.word	0x20000188
    1238:	40008000 	.word	0x40008000
    123c:	e000e100 	.word	0xe000e100
    1240:	00001141 	.word	0x00001141

00001244 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    1244:	2805      	cmp	r0, #5
{
    1246:	b530      	push	{r4, r5, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    1248:	dc5c      	bgt.n	1304 <hal_timer_config+0xc0>
    124a:	4b30      	ldr	r3, [pc, #192]	; (130c <hal_timer_config+0xc8>)
    124c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    1250:	2c00      	cmp	r4, #0
    1252:	d057      	beq.n	1304 <hal_timer_config+0xc0>
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    1254:	7822      	ldrb	r2, [r4, #0]
    1256:	2a00      	cmp	r2, #0
    1258:	d154      	bne.n	1304 <hal_timer_config+0xc0>
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
    125a:	4b2d      	ldr	r3, [pc, #180]	; (1310 <hal_timer_config+0xcc>)
    125c:	fbb3 f1f1 	udiv	r1, r3, r1
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
    1260:	1e4b      	subs	r3, r1, #1
    1262:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1266:	d24d      	bcs.n	1304 <hal_timer_config+0xc0>
    1268:	6923      	ldr	r3, [r4, #16]
    126a:	2b00      	cmp	r3, #0
    126c:	d04a      	beq.n	1304 <hal_timer_config+0xc0>
        (bsptimer->tmr_reg == NULL)) {
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
    126e:	2901      	cmp	r1, #1
    1270:	d00f      	beq.n	1292 <hal_timer_config+0x4e>
    1272:	2301      	movs	r3, #1
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
            if (div <= (1 << prescaler)) {
    1274:	4618      	mov	r0, r3
    1276:	fa00 f503 	lsl.w	r5, r0, r3
    127a:	428d      	cmp	r5, r1
    127c:	b2da      	uxtb	r2, r3
    127e:	d33c      	bcc.n	12fa <hal_timer_config+0xb6>
                min_delta = div - (1 << (prescaler - 1));
    1280:	3b01      	subs	r3, #1
    1282:	fa00 f303 	lsl.w	r3, r0, r3
    1286:	1acb      	subs	r3, r1, r3
                max_delta = (1 << prescaler) - div;
    1288:	1a69      	subs	r1, r5, r1
                if (min_delta < max_delta) {
    128a:	428b      	cmp	r3, r1
    128c:	d201      	bcs.n	1292 <hal_timer_config+0x4e>
                    prescaler -= 1;
    128e:	3a01      	subs	r2, #1
    1290:	b2d2      	uxtb	r2, r2
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
    1292:	4b1f      	ldr	r3, [pc, #124]	; (1310 <hal_timer_config+0xcc>)
    bsptimer->tmr_enabled = 1;
    1294:	2501      	movs	r5, #1
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
    1296:	4113      	asrs	r3, r2
    1298:	60e3      	str	r3, [r4, #12]
    bsptimer->tmr_enabled = 1;
    129a:	7025      	strb	r5, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    129c:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    12a0:	b672      	cpsid	i
    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

#if MYNEWT_VAL_CHOICE(MCU_HFCLK_SOURCE, HFXO)
    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
    12a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    12a6:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    12aa:	f001 1101 	and.w	r1, r1, #65537	; 0x10001
    12ae:	f1b1 1f01 	cmp.w	r1, #65537	; 0x10001
    12b2:	d007      	beq.n	12c4 <hal_timer_config+0x80>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    12b4:	2100      	movs	r1, #0
    12b6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
    12ba:	601d      	str	r5, [r3, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
    12bc:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
    12c0:	2900      	cmp	r1, #0
    12c2:	d0fb      	beq.n	12bc <hal_timer_config+0x78>
                break;
            }
        }
    }
#endif
    hwtimer = bsptimer->tmr_reg;
    12c4:	6921      	ldr	r1, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
    12c6:	2301      	movs	r3, #1
    hwtimer->TASKS_CLEAR = 1;

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
    12c8:	2500      	movs	r5, #0
    hwtimer->TASKS_STOP = 1;
    12ca:	604b      	str	r3, [r1, #4]
    hwtimer->TASKS_CLEAR = 1;
    12cc:	60cb      	str	r3, [r1, #12]
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
    12ce:	f8c1 5504 	str.w	r5, [r1, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
    12d2:	2503      	movs	r5, #3
    12d4:	f8c1 5508 	str.w	r5, [r1, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
    12d8:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
    12dc:	600b      	str	r3, [r1, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
    12de:	7861      	ldrb	r1, [r4, #1]
    12e0:	b24a      	sxtb	r2, r1
  if ((int32_t)(IRQn) >= 0)
    12e2:	2a00      	cmp	r2, #0
    12e4:	db06      	blt.n	12f4 <hal_timer_config+0xb0>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    12e6:	f001 011f 	and.w	r1, r1, #31
    12ea:	408b      	lsls	r3, r1
    12ec:	0952      	lsrs	r2, r2, #5
    12ee:	4909      	ldr	r1, [pc, #36]	; (1314 <hal_timer_config+0xd0>)
    12f0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
    12f4:	b940      	cbnz	r0, 1308 <hal_timer_config+0xc4>
  __ASM volatile ("cpsie i" : : : "memory");
    12f6:	b662      	cpsie	i

    return 0;

err:
    return rc;
}
    12f8:	bd30      	pop	{r4, r5, pc}
    12fa:	3301      	adds	r3, #1
        for (prescaler = 1; prescaler < 10; ++prescaler) {
    12fc:	2b0a      	cmp	r3, #10
    12fe:	d1ba      	bne.n	1276 <hal_timer_config+0x32>
    1300:	461a      	mov	r2, r3
    1302:	e7c6      	b.n	1292 <hal_timer_config+0x4e>
    return rc;
    1304:	2016      	movs	r0, #22
    1306:	e7f7      	b.n	12f8 <hal_timer_config+0xb4>
    return 0;
    1308:	2000      	movs	r0, #0
    130a:	e7f5      	b.n	12f8 <hal_timer_config+0xb4>
    130c:	000047d4 	.word	0x000047d4
    1310:	00f42400 	.word	0x00f42400
    1314:	e000e100 	.word	0xe000e100

00001318 <hal_timer_read>:
{
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    1318:	2805      	cmp	r0, #5
{
    131a:	b508      	push	{r3, lr}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
    131c:	dc09      	bgt.n	1332 <hal_timer_read+0x1a>
    131e:	4b0d      	ldr	r3, [pc, #52]	; (1354 <hal_timer_read+0x3c>)
    1320:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1324:	b128      	cbz	r0, 1332 <hal_timer_read+0x1a>
    if (bsptimer->tmr_rtc) {
    1326:	7883      	ldrb	r3, [r0, #2]
    1328:	b16b      	cbz	r3, 1346 <hal_timer_read+0x2e>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
    132a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        tcntr = hal_timer_read_bsptimer(bsptimer);
    132e:	f7ff be9d 	b.w	106c <hal_timer_read_bsptimer>
    assert(0);
    1332:	f7fe ff2f 	bl	194 <hal_debugger_connected>
    1336:	b100      	cbz	r0, 133a <hal_timer_read+0x22>
    1338:	be01      	bkpt	0x0001
    133a:	2300      	movs	r3, #0
    133c:	461a      	mov	r2, r3
    133e:	4619      	mov	r1, r3
    1340:	4618      	mov	r0, r3
    1342:	f000 f809 	bl	1358 <__assert_func>
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
    1346:	6903      	ldr	r3, [r0, #16]
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
    1348:	2201      	movs	r2, #1
    134a:	649a      	str	r2, [r3, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
    134c:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    1350:	bd08      	pop	{r3, pc}
    1352:	bf00      	nop
    1354:	000047d4 	.word	0x000047d4

00001358 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    1358:	b508      	push	{r3, lr}
    135a:	4605      	mov	r5, r0
    135c:	4674      	mov	r4, lr
    135e:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    1360:	f000 f8a3 	bl	14aa <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    1364:	f000 fe04 	bl	1f70 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    1368:	b95d      	cbnz	r5, 1382 <__assert_func+0x2a>
    136a:	4621      	mov	r1, r4
    136c:	4808      	ldr	r0, [pc, #32]	; (1390 <__assert_func+0x38>)
    136e:	f000 fe1f 	bl	1fb0 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    1372:	4b08      	ldr	r3, [pc, #32]	; (1394 <__assert_func+0x3c>)
    1374:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1378:	605a      	str	r2, [r3, #4]
    asm("isb");
    137a:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    137e:	f7fe fef1 	bl	164 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    1382:	4633      	mov	r3, r6
    1384:	462a      	mov	r2, r5
    1386:	4621      	mov	r1, r4
    1388:	4803      	ldr	r0, [pc, #12]	; (1398 <__assert_func+0x40>)
    138a:	f000 fe11 	bl	1fb0 <console_printf>
    138e:	e7f0      	b.n	1372 <__assert_func+0x1a>
    1390:	000047ec 	.word	0x000047ec
    1394:	e000ed00 	.word	0xe000ed00
    1398:	000047fb 	.word	0x000047fb

0000139c <os_default_irq>:
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    139c:	4d1d      	ldr	r5, [pc, #116]	; (1414 <os_default_irq+0x78>)
{
    139e:	b507      	push	{r0, r1, r2, lr}
    13a0:	4604      	mov	r4, r0
    console_blocking_mode();
    13a2:	f000 fde5 	bl	1f70 <console_blocking_mode>
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    13a6:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    13a8:	6822      	ldr	r2, [r4, #0]
    13aa:	481b      	ldr	r0, [pc, #108]	; (1418 <os_default_irq+0x7c>)
    13ac:	f3c1 0108 	ubfx	r1, r1, #0, #9
    13b0:	f000 fdfe 	bl	1fb0 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    13b4:	6821      	ldr	r1, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    13b6:	4819      	ldr	r0, [pc, #100]	; (141c <os_default_irq+0x80>)
    13b8:	68cb      	ldr	r3, [r1, #12]
    13ba:	9300      	str	r3, [sp, #0]
    13bc:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    13c0:	6809      	ldr	r1, [r1, #0]
    13c2:	f000 fdf5 	bl	1fb0 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    13c6:	6923      	ldr	r3, [r4, #16]
    13c8:	9300      	str	r3, [sp, #0]
    13ca:	6861      	ldr	r1, [r4, #4]
    13cc:	4814      	ldr	r0, [pc, #80]	; (1420 <os_default_irq+0x84>)
    13ce:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    13d2:	f000 fded 	bl	1fb0 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    13d6:	6a23      	ldr	r3, [r4, #32]
    13d8:	9300      	str	r3, [sp, #0]
    13da:	6961      	ldr	r1, [r4, #20]
    13dc:	4811      	ldr	r0, [pc, #68]	; (1424 <os_default_irq+0x88>)
    13de:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
    13e2:	f000 fde5 	bl	1fb0 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    13e6:	6821      	ldr	r1, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    13e8:	480f      	ldr	r0, [pc, #60]	; (1428 <os_default_irq+0x8c>)
    13ea:	69cb      	ldr	r3, [r1, #28]
    13ec:	9300      	str	r3, [sp, #0]
    13ee:	e9d1 2305 	ldrd	r2, r3, [r1, #20]
    13f2:	6909      	ldr	r1, [r1, #16]
    13f4:	f000 fddc 	bl	1fb0 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    13f8:	6869      	ldr	r1, [r5, #4]
    13fa:	480c      	ldr	r0, [pc, #48]	; (142c <os_default_irq+0x90>)
    13fc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    13fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
    1400:	f000 fdd6 	bl	1fb0 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    1404:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    1406:	480a      	ldr	r0, [pc, #40]	; (1430 <os_default_irq+0x94>)
    1408:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    140a:	f000 fdd1 	bl	1fb0 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    140e:	f7fe fea9 	bl	164 <hal_system_reset>
    1412:	bf00      	nop
    1414:	e000ed00 	.word	0xe000ed00
    1418:	00004812 	.word	0x00004812
    141c:	00004843 	.word	0x00004843
    1420:	00004874 	.word	0x00004874
    1424:	000048a5 	.word	0x000048a5
    1428:	000048d6 	.word	0x000048d6
    142c:	00004907 	.word	0x00004907
    1430:	0000492f 	.word	0x0000492f

00001434 <os_cputime_init>:

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
    1434:	4601      	mov	r1, r0
    1436:	2000      	movs	r0, #0
    1438:	f7ff bf04 	b.w	1244 <hal_timer_config>

0000143c <os_cputime_get32>:
uint32_t
os_cputime_get32(void)
{
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
    143c:	2000      	movs	r0, #0
    143e:	f7ff bf6b 	b.w	1318 <hal_timer_read>

00001442 <os_cputime_delay_ticks>:
{
    1442:	b510      	push	{r4, lr}
    1444:	4604      	mov	r4, r0
    until = os_cputime_get32() + ticks;
    1446:	f7ff fff9 	bl	143c <os_cputime_get32>
    144a:	4404      	add	r4, r0
    while ((int32_t)(os_cputime_get32() - until) < 0) {
    144c:	f7ff fff6 	bl	143c <os_cputime_get32>
    1450:	1b00      	subs	r0, r0, r4
    1452:	2800      	cmp	r0, #0
    1454:	dbfa      	blt.n	144c <os_cputime_delay_ticks+0xa>
}
    1456:	bd10      	pop	{r4, pc}

00001458 <os_cputime_delay_usecs>:
    os_cputime_delay_ticks(ticks);
    1458:	f7ff bff3 	b.w	1442 <os_cputime_delay_ticks>

0000145c <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    145c:	b510      	push	{r4, lr}
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    145e:	e9d0 3104 	ldrd	r3, r1, [r0, #16]
{
    1462:	4604      	mov	r4, r0
    rc = dev->od_init(dev, dev->od_init_arg);
    1464:	4798      	blx	r3
    1466:	7ee3      	ldrb	r3, [r4, #27]
    if (rc != 0) {
    1468:	b120      	cbz	r0, 1474 <os_dev_initialize+0x18>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    146a:	f013 0f08 	tst.w	r3, #8
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    146e:	bf08      	it	eq
    1470:	2000      	moveq	r0, #0
err:
    return rc;
}
    1472:	bd10      	pop	{r4, pc}
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    1474:	f043 0301 	orr.w	r3, r3, #1
    1478:	76e3      	strb	r3, [r4, #27]
    147a:	e7fa      	b.n	1472 <os_dev_initialize+0x16>

0000147c <os_dev_initialize_all>:
    return (rc);
}

int
os_dev_initialize_all(uint8_t stage)
{
    147c:	b538      	push	{r3, r4, r5, lr}
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    147e:	4b08      	ldr	r3, [pc, #32]	; (14a0 <os_dev_initialize_all+0x24>)
    1480:	681c      	ldr	r4, [r3, #0]
{
    1482:	4605      	mov	r5, r0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    1484:	b90c      	cbnz	r4, 148a <os_dev_initialize_all+0xe>
    1486:	4620      	mov	r0, r4
                break;
            }
        }
    }

    return (rc);
    1488:	e009      	b.n	149e <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    148a:	7e23      	ldrb	r3, [r4, #24]
    148c:	42ab      	cmp	r3, r5
    148e:	d001      	beq.n	1494 <os_dev_initialize_all+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    1490:	6a24      	ldr	r4, [r4, #32]
    1492:	e7f7      	b.n	1484 <os_dev_initialize_all+0x8>
            rc = os_dev_initialize(dev);
    1494:	4620      	mov	r0, r4
    1496:	f7ff ffe1 	bl	145c <os_dev_initialize>
            if (rc) {
    149a:	2800      	cmp	r0, #0
    149c:	d0f8      	beq.n	1490 <os_dev_initialize_all+0x14>
}
    149e:	bd38      	pop	{r3, r4, r5, pc}
    14a0:	200001a4 	.word	0x200001a4

000014a4 <timer_handler>:
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
    os_time_advance(1);
    14a4:	2001      	movs	r0, #1
    14a6:	f000 b93d 	b.w	1724 <os_time_advance>

000014aa <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    14aa:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    14ae:	b672      	cpsid	i
    isr_ctx = __get_PRIMASK() & 1;
    __disable_irq();
#endif

    return isr_ctx;
}
    14b0:	f000 0001 	and.w	r0, r0, #1
    14b4:	4770      	bx	lr

000014b6 <os_arch_restore_sr>:
os_arch_restore_sr(os_sr_t isr_ctx)
{
#if MCU_CRITICAL_BASEPRI
    __set_BASEPRI(isr_ctx);
#else
    if (!isr_ctx) {
    14b6:	b900      	cbnz	r0, 14ba <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    14b8:	b662      	cpsie	i
        __enable_irq();
    }
#endif
}
    14ba:	4770      	bx	lr

000014bc <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
    14bc:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    14be:	2003      	movs	r0, #3
    14c0:	f7ff ffdc 	bl	147c <os_dev_initialize_all>
    assert(err == OS_OK);
    14c4:	f010 0fff 	tst.w	r0, #255	; 0xff
    14c8:	d009      	beq.n	14de <os_pkg_init+0x22>
    14ca:	f7fe fe63 	bl	194 <hal_debugger_connected>
    14ce:	b100      	cbz	r0, 14d2 <os_pkg_init+0x16>
    14d0:	be01      	bkpt	0x0001
    14d2:	2300      	movs	r3, #0
    14d4:	461a      	mov	r2, r3
    14d6:	4619      	mov	r1, r3
    14d8:	4618      	mov	r0, r3
    14da:	f7ff ff3d 	bl	1358 <__assert_func>

    os_mempool_module_init();
    14de:	f000 f889 	bl	15f4 <os_mempool_module_init>
    os_msys_init();
}
    14e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    os_msys_init();
    14e6:	f000 b8df 	b.w	16a8 <os_msys_init>

000014ea <os_eventq_init>:

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    STAILQ_INIT(&evq->evq_list);
    14ea:	4603      	mov	r3, r0
    memset(evq, 0, sizeof(*evq));
    14ec:	2200      	movs	r2, #0
    14ee:	6002      	str	r2, [r0, #0]
    14f0:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
    14f2:	f843 2f08 	str.w	r2, [r3, #8]!
    14f6:	60c3      	str	r3, [r0, #12]
}
    14f8:	4770      	bx	lr
	...

000014fc <os_mempool_init_internal>:

static os_error_t
os_mempool_init_internal(struct os_mempool *mp, uint16_t blocks,
                         uint32_t block_size, void *membuf, char *name,
                         uint8_t flags)
{
    14fc:	b570      	push	{r4, r5, r6, lr}
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    14fe:	b110      	cbz	r0, 1506 <os_mempool_init_internal+0xa>
    1500:	b10a      	cbz	r2, 1506 <os_mempool_init_internal+0xa>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    1502:	b913      	cbnz	r3, 150a <os_mempool_init_internal+0xe>
    1504:	b119      	cbz	r1, 150e <os_mempool_init_internal+0x12>
        return OS_INVALID_PARM;
    1506:	2003      	movs	r0, #3
    1508:	e022      	b.n	1550 <os_mempool_init_internal+0x54>

    if (membuf != NULL) {
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    150a:	079d      	lsls	r5, r3, #30
    150c:	d126      	bne.n	155c <os_mempool_init_internal+0x60>

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    mp->mp_num_free = blocks;
    mp->mp_min_free = blocks;
    mp->mp_flags = flags;
    150e:	f89d 4014 	ldrb.w	r4, [sp, #20]
    1512:	7284      	strb	r4, [r0, #10]
    mp->mp_num_blocks = blocks;
    mp->mp_membuf_addr = (uint32_t)membuf;
    mp->name = name;
    1514:	9c04      	ldr	r4, [sp, #16]
    mp->mp_block_size = block_size;
    1516:	6002      	str	r2, [r0, #0]
    mp->mp_num_free = blocks;
    1518:	80c1      	strh	r1, [r0, #6]
    mp->mp_min_free = blocks;
    151a:	8101      	strh	r1, [r0, #8]
    mp->mp_num_blocks = blocks;
    151c:	8081      	strh	r1, [r0, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    151e:	60c3      	str	r3, [r0, #12]
    SLIST_FIRST(mp) = membuf;
    1520:	e9c0 3405 	strd	r3, r4, [r0, #20]

    if (blocks > 0) {
    1524:	b161      	cbz	r1, 1540 <os_mempool_init_internal+0x44>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    1526:	0794      	lsls	r4, r2, #30
    1528:	bf1c      	itt	ne
    152a:	f022 0203 	bicne.w	r2, r2, #3
    152e:	3204      	addne	r2, #4
{
    1530:	461d      	mov	r5, r3

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    1532:	2401      	movs	r4, #1
    1534:	428c      	cmp	r4, r1
    1536:	db0c      	blt.n	1552 <os_mempool_init_internal+0x56>
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    1538:	3901      	subs	r1, #1
    153a:	434a      	muls	r2, r1
    153c:	2100      	movs	r1, #0
    153e:	5099      	str	r1, [r3, r2]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    1540:	4a07      	ldr	r2, [pc, #28]	; (1560 <os_mempool_init_internal+0x64>)
    1542:	6851      	ldr	r1, [r2, #4]
    1544:	2300      	movs	r3, #0
    1546:	6103      	str	r3, [r0, #16]
    1548:	6008      	str	r0, [r1, #0]
    154a:	3010      	adds	r0, #16
    154c:	6050      	str	r0, [r2, #4]
    154e:	4618      	mov	r0, r3

    return OS_OK;
}
    1550:	bd70      	pop	{r4, r5, r6, pc}
            block_addr += true_block_size;
    1552:	18ae      	adds	r6, r5, r2
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    1554:	602e      	str	r6, [r5, #0]
        for (i = 1; i < blocks; i++) {
    1556:	3401      	adds	r4, #1
            block_addr += true_block_size;
    1558:	4635      	mov	r5, r6
    155a:	e7eb      	b.n	1534 <os_mempool_init_internal+0x38>
            return OS_MEM_NOT_ALIGNED;
    155c:	2004      	movs	r0, #4
    155e:	e7f7      	b.n	1550 <os_mempool_init_internal+0x54>
    1560:	200001b0 	.word	0x200001b0

00001564 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    1564:	b513      	push	{r0, r1, r4, lr}
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    1566:	2400      	movs	r4, #0
    1568:	9401      	str	r4, [sp, #4]
    156a:	9c04      	ldr	r4, [sp, #16]
    156c:	9400      	str	r4, [sp, #0]
    156e:	f7ff ffc5 	bl	14fc <os_mempool_init_internal>
}
    1572:	b002      	add	sp, #8
    1574:	bd10      	pop	{r4, pc}

00001576 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
    1576:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    1578:	4604      	mov	r4, r0
    157a:	b198      	cbz	r0, 15a4 <os_memblock_get+0x2e>
        OS_ENTER_CRITICAL(sr);
    157c:	f7ff ff95 	bl	14aa <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    1580:	88e3      	ldrh	r3, [r4, #6]
    1582:	b16b      	cbz	r3, 15a0 <os_memblock_get+0x2a>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    1584:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    1586:	682a      	ldr	r2, [r5, #0]
    1588:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    158a:	3b01      	subs	r3, #1
            if (mp->mp_min_free > mp->mp_num_free) {
    158c:	8922      	ldrh	r2, [r4, #8]
            mp->mp_num_free--;
    158e:	b29b      	uxth	r3, r3
            if (mp->mp_min_free > mp->mp_num_free) {
    1590:	429a      	cmp	r2, r3
            mp->mp_num_free--;
    1592:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    1594:	d900      	bls.n	1598 <os_memblock_get+0x22>
                mp->mp_min_free = mp->mp_num_free;
    1596:	8123      	strh	r3, [r4, #8]
            }
        }
        OS_EXIT_CRITICAL(sr);
    1598:	f7ff ff8d 	bl	14b6 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    159c:	4628      	mov	r0, r5
    159e:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    15a0:	461d      	mov	r5, r3
    15a2:	e7f9      	b.n	1598 <os_memblock_get+0x22>
    15a4:	4605      	mov	r5, r0
    return (void *)block;
    15a6:	e7f9      	b.n	159c <os_memblock_get+0x26>

000015a8 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    15a8:	b538      	push	{r3, r4, r5, lr}
    15aa:	4604      	mov	r4, r0
    15ac:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    15ae:	f7ff ff7c 	bl	14aa <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    15b2:	6963      	ldr	r3, [r4, #20]
    15b4:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    15b6:	88e3      	ldrh	r3, [r4, #6]
    SLIST_FIRST(mp) = block;
    15b8:	6165      	str	r5, [r4, #20]
    mp->mp_num_free++;
    15ba:	3301      	adds	r3, #1
    15bc:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    15be:	f7ff ff7a 	bl	14b6 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    15c2:	2000      	movs	r0, #0
    15c4:	bd38      	pop	{r3, r4, r5, pc}

000015c6 <os_memblock_put>:

os_error_t
os_memblock_put(struct os_mempool *mp, void *block_addr)
{
    15c6:	b410      	push	{r4}
    15c8:	460a      	mov	r2, r1

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    15ca:	4603      	mov	r3, r0
    15cc:	b170      	cbz	r0, 15ec <os_memblock_put+0x26>
    15ce:	b169      	cbz	r1, 15ec <os_memblock_put+0x26>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    15d0:	7a84      	ldrb	r4, [r0, #10]
    15d2:	07e4      	lsls	r4, r4, #31
    15d4:	d505      	bpl.n	15e2 <os_memblock_put+0x1c>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    15d6:	69c4      	ldr	r4, [r0, #28]
    15d8:	b11c      	cbz	r4, 15e2 <os_memblock_put+0x1c>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    15da:	4623      	mov	r3, r4
    15dc:	6a02      	ldr	r2, [r0, #32]
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    15de:	bc10      	pop	{r4}
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    15e0:	4718      	bx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);
    15e2:	4611      	mov	r1, r2
    15e4:	4618      	mov	r0, r3
}
    15e6:	bc10      	pop	{r4}
    ret = os_memblock_put_from_cb(mp, block_addr);
    15e8:	f7ff bfde 	b.w	15a8 <os_memblock_put_from_cb>
}
    15ec:	2003      	movs	r0, #3
    15ee:	bc10      	pop	{r4}
    15f0:	4770      	bx	lr
	...

000015f4 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    15f4:	4b02      	ldr	r3, [pc, #8]	; (1600 <os_mempool_module_init+0xc>)
    15f6:	2200      	movs	r2, #0
    15f8:	e9c3 2300 	strd	r2, r3, [r3]
}
    15fc:	4770      	bx	lr
    15fe:	bf00      	nop
    1600:	200001b0 	.word	0x200001b0

00001604 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1604:	4a07      	ldr	r2, [pc, #28]	; (1624 <os_msys_find_pool+0x20>)
{
    1606:	b510      	push	{r4, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1608:	6811      	ldr	r1, [r2, #0]
    160a:	460b      	mov	r3, r1
    160c:	b923      	cbnz	r3, 1618 <os_msys_find_pool+0x14>
            break;
        }
    }

    if (!pool) {
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    160e:	b109      	cbz	r1, 1614 <os_msys_find_pool+0x10>
    1610:	6853      	ldr	r3, [r2, #4]
    1612:	3b08      	subs	r3, #8
    }

    return (pool);
}
    1614:	4618      	mov	r0, r3
    1616:	bd10      	pop	{r4, pc}
        if (dsize <= pool->omp_databuf_len) {
    1618:	881c      	ldrh	r4, [r3, #0]
    161a:	4284      	cmp	r4, r0
    161c:	d2fa      	bcs.n	1614 <os_msys_find_pool+0x10>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    161e:	689b      	ldr	r3, [r3, #8]
    1620:	e7f4      	b.n	160c <os_msys_find_pool+0x8>
    1622:	bf00      	nop
    1624:	20000138 	.word	0x20000138

00001628 <os_msys_register>:
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1628:	4b0e      	ldr	r3, [pc, #56]	; (1664 <os_msys_register+0x3c>)
{
    162a:	b570      	push	{r4, r5, r6, lr}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    162c:	681c      	ldr	r4, [r3, #0]
    prev = NULL;
    162e:	2100      	movs	r1, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    1630:	4622      	mov	r2, r4
    1632:	b11a      	cbz	r2, 163c <os_msys_register+0x14>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    1634:	8806      	ldrh	r6, [r0, #0]
    1636:	8815      	ldrh	r5, [r2, #0]
    1638:	42ae      	cmp	r6, r5
    163a:	d207      	bcs.n	164c <os_msys_register+0x24>
    if (prev) {
    163c:	b949      	cbnz	r1, 1652 <os_msys_register+0x2a>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    163e:	6084      	str	r4, [r0, #8]
    1640:	b914      	cbnz	r4, 1648 <os_msys_register+0x20>
    1642:	f100 0208 	add.w	r2, r0, #8
    1646:	605a      	str	r2, [r3, #4]
    1648:	6018      	str	r0, [r3, #0]
    164a:	e009      	b.n	1660 <os_msys_register+0x38>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    164c:	4611      	mov	r1, r2
    164e:	6892      	ldr	r2, [r2, #8]
    1650:	e7ef      	b.n	1632 <os_msys_register+0xa>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    1652:	688a      	ldr	r2, [r1, #8]
    1654:	6082      	str	r2, [r0, #8]
    1656:	b912      	cbnz	r2, 165e <os_msys_register+0x36>
    1658:	f100 0208 	add.w	r2, r0, #8
    165c:	605a      	str	r2, [r3, #4]
    165e:	6088      	str	r0, [r1, #8]
}
    1660:	2000      	movs	r0, #0
    1662:	bd70      	pop	{r4, r5, r6, pc}
    1664:	20000138 	.word	0x20000138

00001668 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    1668:	4b02      	ldr	r3, [pc, #8]	; (1674 <os_msys_reset+0xc>)
    166a:	2200      	movs	r2, #0
    166c:	e9c3 2300 	strd	r2, r3, [r3]
}
    1670:	4770      	bx	lr
    1672:	bf00      	nop
    1674:	20000138 	.word	0x20000138

00001678 <os_msys_get_pkthdr>:
    return (NULL);
}

struct os_mbuf *
os_msys_get_pkthdr(uint16_t dsize, uint16_t user_hdr_len)
{
    1678:	b510      	push	{r4, lr}
    167a:	460c      	mov	r4, r1
    total_pkthdr_len =  user_hdr_len + sizeof(struct os_mbuf_pkthdr);

    /* If dsize = 0 that means user has no idea how big block size is needed,
     * therefore lets find for him the biggest one
     */
    if (dsize == 0) {
    167c:	b950      	cbnz	r0, 1694 <os_msys_get_pkthdr+0x1c>
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    167e:	4b09      	ldr	r3, [pc, #36]	; (16a4 <os_msys_get_pkthdr+0x2c>)
    1680:	681a      	ldr	r2, [r3, #0]
    1682:	b16a      	cbz	r2, 16a0 <os_msys_get_pkthdr+0x28>
    1684:	6858      	ldr	r0, [r3, #4]
    1686:	3808      	subs	r0, #8
        pool = os_msys_find_biggest_pool();
    } else {
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    }

    if (!pool) {
    1688:	b150      	cbz	r0, 16a0 <os_msys_get_pkthdr+0x28>
        goto err;
    }

    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    168a:	b2e1      	uxtb	r1, r4
    return (m);
err:
    return (NULL);
}
    168c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    1690:	f000 b8d9 	b.w	1846 <os_mbuf_get_pkthdr>
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    1694:	3008      	adds	r0, #8
    1696:	4408      	add	r0, r1
    1698:	b280      	uxth	r0, r0
    169a:	f7ff ffb3 	bl	1604 <os_msys_find_pool>
    169e:	e7f3      	b.n	1688 <os_msys_get_pkthdr+0x10>
}
    16a0:	2000      	movs	r0, #0
    16a2:	bd10      	pop	{r4, pc}
    16a4:	20000138 	.word	0x20000138

000016a8 <os_msys_init>:
    SYSINIT_PANIC_ASSERT(rc == 0);
}

void
os_msys_init(void)
{
    16a8:	b513      	push	{r0, r1, r4, lr}
    int rc;

    os_msys_reset();
    16aa:	f7ff ffdd 	bl	1668 <os_msys_reset>
    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    16ae:	4b15      	ldr	r3, [pc, #84]	; (1704 <os_msys_init+0x5c>)
    16b0:	9301      	str	r3, [sp, #4]
    16b2:	f44f 7392 	mov.w	r3, #292	; 0x124
    16b6:	9300      	str	r3, [sp, #0]
    16b8:	4a13      	ldr	r2, [pc, #76]	; (1708 <os_msys_init+0x60>)
    16ba:	4914      	ldr	r1, [pc, #80]	; (170c <os_msys_init+0x64>)
    16bc:	4814      	ldr	r0, [pc, #80]	; (1710 <os_msys_init+0x68>)
    16be:	2340      	movs	r3, #64	; 0x40
    16c0:	f000 fd28 	bl	2114 <mem_init_mbuf_pool>
    SYSINIT_PANIC_ASSERT(rc == 0);
    16c4:	b158      	cbz	r0, 16de <os_msys_init+0x36>
    16c6:	f7fe fd65 	bl	194 <hal_debugger_connected>
    16ca:	b100      	cbz	r0, 16ce <os_msys_init+0x26>
    16cc:	be01      	bkpt	0x0001
    16ce:	2300      	movs	r3, #0
    16d0:	4a10      	ldr	r2, [pc, #64]	; (1714 <os_msys_init+0x6c>)
    16d2:	9300      	str	r3, [sp, #0]
    16d4:	6814      	ldr	r4, [r2, #0]
    16d6:	4619      	mov	r1, r3
    16d8:	461a      	mov	r2, r3
    16da:	4618      	mov	r0, r3
    16dc:	47a0      	blx	r4
    rc = os_msys_register(mbuf_pool);
    16de:	480a      	ldr	r0, [pc, #40]	; (1708 <os_msys_init+0x60>)
    16e0:	f7ff ffa2 	bl	1628 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    16e4:	b158      	cbz	r0, 16fe <os_msys_init+0x56>
    16e6:	f7fe fd55 	bl	194 <hal_debugger_connected>
    16ea:	b100      	cbz	r0, 16ee <os_msys_init+0x46>
    16ec:	be01      	bkpt	0x0001
    16ee:	2300      	movs	r3, #0
    16f0:	4a08      	ldr	r2, [pc, #32]	; (1714 <os_msys_init+0x6c>)
    16f2:	9300      	str	r3, [sp, #0]
    16f4:	6814      	ldr	r4, [r2, #0]
    16f6:	4619      	mov	r1, r3
    16f8:	461a      	mov	r2, r3
    16fa:	4618      	mov	r0, r3
    16fc:	47a0      	blx	r4
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    16fe:	b002      	add	sp, #8
    1700:	bd10      	pop	{r4, pc}
    1702:	bf00      	nop
    1704:	0000494b 	.word	0x0000494b
    1708:	20004ab8 	.word	0x20004ab8
    170c:	20004ac4 	.word	0x20004ac4
    1710:	200001b8 	.word	0x200001b8
    1714:	20000150 	.word	0x20000150

00001718 <os_time_get>:

os_time_t
os_time_get(void)
{
    return (g_os_time);
}
    1718:	4b01      	ldr	r3, [pc, #4]	; (1720 <os_time_get+0x8>)
    171a:	6818      	ldr	r0, [r3, #0]
    171c:	4770      	bx	lr
    171e:	bf00      	nop
    1720:	20004ae4 	.word	0x20004ae4

00001724 <os_time_advance>:
#else

void
os_time_advance(int ticks)
{
    g_os_time += ticks;
    1724:	4a02      	ldr	r2, [pc, #8]	; (1730 <os_time_advance+0xc>)
    1726:	6813      	ldr	r3, [r2, #0]
    1728:	4418      	add	r0, r3
    172a:	6010      	str	r0, [r2, #0]
}
    172c:	4770      	bx	lr
    172e:	bf00      	nop
    1730:	20004ae4 	.word	0x20004ae4

00001734 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    1734:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    1738:	482b      	ldr	r0, [pc, #172]	; (17e8 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    173a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    173c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    173e:	f380 8814 	msr	CONTROL, r0
        ISB
    1742:	f3bf 8f6f 	isb	sy
        BX      LR
    1746:	4770      	bx	lr

00001748 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    1748:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    174c:	4770      	bx	lr

0000174e <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    174e:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    1752:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    1754:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    1758:	b951      	cbnz	r1, 1770 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    175a:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    175e:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    1760:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    1762:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    1766:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    176a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    176e:	4770      	bx	lr

00001770 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    1770:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    1772:	4a1e      	ldr	r2, [pc, #120]	; (17ec <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    1774:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    1776:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    1778:	d809      	bhi.n	178e <SVC_Done>

        LDR     R4,=SVC_Table-4
    177a:	4c1d      	ldr	r4, [pc, #116]	; (17f0 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    177c:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    1780:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    1784:	47a0      	blx	r4

        MRS     R12,PSP
    1786:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    178a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000178e <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    178e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    1792:	4770      	bx	lr

00001794 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    1794:	4b17      	ldr	r3, [pc, #92]	; (17f4 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    1796:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    1798:	4b17      	ldr	r3, [pc, #92]	; (17f8 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    179a:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    179c:	4291      	cmp	r1, r2
        IT      EQ
    179e:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    17a0:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    17a2:	f3ef 8c09 	mrs	ip, PSP
        TST     LR,#0x10                /* is it extended frame? */
        IT      EQ
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
    17a6:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    17aa:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    17ae:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    17b0:	f8d2 c000 	ldr.w	ip, [r2]
        ITTE    EQ
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
    17b4:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#endif
        MSR     PSP,R12                 /* Write PSP */
    17b8:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    17bc:	4770      	bx	lr

000017be <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    17be:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    17c0:	f7ff fe70 	bl	14a4 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    17c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    17c8:	4770      	bx	lr

000017ca <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    17ca:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    17ce:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    17d0:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    17d4:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    17d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    17dc:	4668      	mov	r0, sp
        BL      os_default_irq
    17de:	f7ff fddd 	bl	139c <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    17e2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    17e6:	4770      	bx	lr
        LDR     R0,=os_flags
    17e8:	200001ac 	.word	0x200001ac
        LDR     R2,=SVC_Count
    17ec:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    17f0:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    17f4:	20000140 	.word	0x20000140
        LDR     R3,=g_current_task      /* Get current task */
    17f8:	20004ae0 	.word	0x20004ae0

000017fc <_os_mbuf_trailingspace>:
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    17fc:	6882      	ldr	r2, [r0, #8]
    17fe:	8812      	ldrh	r2, [r2, #0]
    1800:	f100 0310 	add.w	r3, r0, #16
    1804:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    1806:	88c2      	ldrh	r2, [r0, #6]
    1808:	6800      	ldr	r0, [r0, #0]
    180a:	4410      	add	r0, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    180c:	1a18      	subs	r0, r3, r0
}
    180e:	b280      	uxth	r0, r0
    1810:	4770      	bx	lr

00001812 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
    1812:	3a10      	subs	r2, #16
    1814:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    1816:	6041      	str	r1, [r0, #4]

    return (0);
}
    1818:	2000      	movs	r0, #0
    181a:	4770      	bx	lr

0000181c <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    181c:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    181e:	8803      	ldrh	r3, [r0, #0]
    1820:	428b      	cmp	r3, r1
{
    1822:	4604      	mov	r4, r0
    1824:	460d      	mov	r5, r1
    if (leadingspace > omp->omp_databuf_len) {
    1826:	d30c      	bcc.n	1842 <os_mbuf_get+0x26>
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    1828:	6840      	ldr	r0, [r0, #4]
    182a:	f7ff fea4 	bl	1576 <os_memblock_get>
    if (!om) {
    182e:	b138      	cbz	r0, 1840 <os_mbuf_get+0x24>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    1830:	2300      	movs	r3, #0
    1832:	60c3      	str	r3, [r0, #12]
    om->om_flags = 0;
    1834:	6043      	str	r3, [r0, #4]
    om->om_pkthdr_len = 0;
    om->om_len = 0;
    om->om_data = (&om->om_databuf[0] + leadingspace);
    1836:	f100 0310 	add.w	r3, r0, #16
    183a:	442b      	add	r3, r5
    183c:	6003      	str	r3, [r0, #0]
    om->om_omp = omp;
    183e:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    1840:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    1842:	2000      	movs	r0, #0
    return om;
    1844:	e7fc      	b.n	1840 <os_mbuf_get+0x24>

00001846 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    1846:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    1848:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    184c:	8803      	ldrh	r3, [r0, #0]
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    184e:	b2ac      	uxth	r4, r5
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    1850:	42a3      	cmp	r3, r4
    1852:	d30d      	bcc.n	1870 <os_mbuf_get_pkthdr+0x2a>
    1854:	2cff      	cmp	r4, #255	; 0xff
    1856:	d80b      	bhi.n	1870 <os_mbuf_get_pkthdr+0x2a>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    1858:	2100      	movs	r1, #0
    185a:	f7ff ffdf 	bl	181c <os_mbuf_get>
    if (om) {
    185e:	b130      	cbz	r0, 186e <os_mbuf_get_pkthdr+0x28>
        om->om_pkthdr_len = pkthdr_len;
        om->om_data += pkthdr_len;
    1860:	6803      	ldr	r3, [r0, #0]
        om->om_pkthdr_len = pkthdr_len;
    1862:	7145      	strb	r5, [r0, #5]
        om->om_data += pkthdr_len;
    1864:	4423      	add	r3, r4
    1866:	6003      	str	r3, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    1868:	2300      	movs	r3, #0
        pkthdr->omp_flags = 0;
    186a:	e9c0 3304 	strd	r3, r3, [r0, #16]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    186e:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    1870:	2000      	movs	r0, #0
    return om;
    1872:	e7fc      	b.n	186e <os_mbuf_get_pkthdr+0x28>

00001874 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    1874:	4601      	mov	r1, r0
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    1876:	6880      	ldr	r0, [r0, #8]
{
    1878:	b508      	push	{r3, lr}
    if (om->om_omp != NULL) {
    187a:	b110      	cbz	r0, 1882 <os_mbuf_free+0xe>
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    187c:	6840      	ldr	r0, [r0, #4]
    187e:	f7ff fea2 	bl	15c6 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    1882:	bd08      	pop	{r3, pc}

00001884 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
    1884:	b510      	push	{r4, lr}
    1886:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    1888:	b90b      	cbnz	r3, 188e <os_mbuf_free_chain+0xa>
        }

        om = next;
    }

    rc = 0;
    188a:	4618      	mov	r0, r3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
    188c:	e006      	b.n	189c <os_mbuf_free_chain+0x18>
        rc = os_mbuf_free(om);
    188e:	4618      	mov	r0, r3
        next = SLIST_NEXT(om, om_next);
    1890:	68dc      	ldr	r4, [r3, #12]
        rc = os_mbuf_free(om);
    1892:	f7ff ffef 	bl	1874 <os_mbuf_free>
        om = next;
    1896:	4623      	mov	r3, r4
        if (rc != 0) {
    1898:	2800      	cmp	r0, #0
    189a:	d0f5      	beq.n	1888 <os_mbuf_free_chain+0x4>
}
    189c:	bd10      	pop	{r4, pc}

0000189e <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
    189e:	2300      	movs	r3, #0
    while (om != NULL) {
    18a0:	b908      	cbnz	r0, 18a6 <os_mbuf_len+0x8>
        len += om->om_len;
        om = SLIST_NEXT(om, om_next);
    }

    return len;
}
    18a2:	4618      	mov	r0, r3
    18a4:	4770      	bx	lr
        len += om->om_len;
    18a6:	88c2      	ldrh	r2, [r0, #6]
        om = SLIST_NEXT(om, om_next);
    18a8:	68c0      	ldr	r0, [r0, #12]
        len += om->om_len;
    18aa:	4413      	add	r3, r2
    18ac:	b29b      	uxth	r3, r3
    18ae:	e7f7      	b.n	18a0 <os_mbuf_len+0x2>

000018b0 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    18b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    18b4:	4688      	mov	r8, r1
    18b6:	4616      	mov	r6, r2
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    18b8:	4607      	mov	r7, r0
    18ba:	2800      	cmp	r0, #0
    18bc:	d042      	beq.n	1944 <os_mbuf_append+0x94>
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    18be:	f8d0 a008 	ldr.w	sl, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    while (SLIST_NEXT(last, om_next) != NULL) {
    18c2:	4605      	mov	r5, r0
    18c4:	68eb      	ldr	r3, [r5, #12]
    18c6:	bb23      	cbnz	r3, 1912 <os_mbuf_append+0x62>
        last = SLIST_NEXT(last, om_next);
    }

    remainder = len;
    space = OS_MBUF_TRAILINGSPACE(last);
    18c8:	4628      	mov	r0, r5
    remainder = len;
    18ca:	4634      	mov	r4, r6
    space = OS_MBUF_TRAILINGSPACE(last);
    18cc:	f7ff ff96 	bl	17fc <_os_mbuf_trailingspace>

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    18d0:	b178      	cbz	r0, 18f2 <os_mbuf_append+0x42>
    18d2:	42b0      	cmp	r0, r6
    18d4:	bfa8      	it	ge
    18d6:	4630      	movge	r0, r6
    18d8:	4604      	mov	r4, r0
        if (space > remainder) {
            space = remainder;
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    18da:	682b      	ldr	r3, [r5, #0]
    18dc:	88e8      	ldrh	r0, [r5, #6]
    18de:	4622      	mov	r2, r4
    18e0:	4641      	mov	r1, r8
    18e2:	4418      	add	r0, r3
    18e4:	f000 f85e 	bl	19a4 <memcpy>

        last->om_len += space;
    18e8:	88eb      	ldrh	r3, [r5, #6]
    18ea:	4423      	add	r3, r4
        data += space;
    18ec:	44a0      	add	r8, r4
        last->om_len += space;
    18ee:	80eb      	strh	r3, [r5, #6]
        remainder -= space;
    18f0:	1b34      	subs	r4, r6, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    18f2:	2c00      	cmp	r4, #0
    18f4:	dd05      	ble.n	1902 <os_mbuf_append+0x52>
        new = os_mbuf_get(omp, 0);
    18f6:	2100      	movs	r1, #0
    18f8:	4650      	mov	r0, sl
    18fa:	f7ff ff8f 	bl	181c <os_mbuf_get>
        if (!new) {
    18fe:	4681      	mov	r9, r0
    1900:	b948      	cbnz	r0, 1916 <os_mbuf_append+0x66>
        SLIST_NEXT(last, om_next) = new;
        last = new;
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    1902:	797b      	ldrb	r3, [r7, #5]
    1904:	2b07      	cmp	r3, #7
    1906:	d818      	bhi.n	193a <os_mbuf_append+0x8a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    }

    if (remainder != 0) {
    1908:	1c20      	adds	r0, r4, #0
    190a:	bf18      	it	ne
    190c:	2001      	movne	r0, #1


    return (0);
err:
    return (rc);
}
    190e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1912:	461d      	mov	r5, r3
    1914:	e7d6      	b.n	18c4 <os_mbuf_append+0x14>
        new->om_len = min(omp->omp_databuf_len, remainder);
    1916:	f8ba 2000 	ldrh.w	r2, [sl]
    191a:	42a2      	cmp	r2, r4
    191c:	bfa8      	it	ge
    191e:	4622      	movge	r2, r4
    1920:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    1922:	4641      	mov	r1, r8
    1924:	6800      	ldr	r0, [r0, #0]
    1926:	f000 f83d 	bl	19a4 <memcpy>
        data += new->om_len;
    192a:	f8b9 3006 	ldrh.w	r3, [r9, #6]
        SLIST_NEXT(last, om_next) = new;
    192e:	f8c5 900c 	str.w	r9, [r5, #12]
        data += new->om_len;
    1932:	4498      	add	r8, r3
        remainder -= new->om_len;
    1934:	1ae4      	subs	r4, r4, r3
        SLIST_NEXT(last, om_next) = new;
    1936:	464d      	mov	r5, r9
    1938:	e7db      	b.n	18f2 <os_mbuf_append+0x42>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    193a:	8a3b      	ldrh	r3, [r7, #16]
    193c:	441e      	add	r6, r3
    193e:	1b36      	subs	r6, r6, r4
    1940:	823e      	strh	r6, [r7, #16]
    1942:	e7e1      	b.n	1908 <os_mbuf_append+0x58>
        rc = OS_EINVAL;
    1944:	2002      	movs	r0, #2
    1946:	e7e2      	b.n	190e <os_mbuf_append+0x5e>

00001948 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    1948:	b130      	cbz	r0, 1958 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    194a:	2300      	movs	r3, #0
    194c:	7143      	strb	r3, [r0, #5]
    mu->mu_level = 0;
    194e:	80c3      	strh	r3, [r0, #6]
    mu->mu_owner = NULL;
    1950:	6083      	str	r3, [r0, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    1952:	6003      	str	r3, [r0, #0]

    ret = OS_OK;
    1954:	4618      	mov	r0, r3
    1956:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    1958:	2003      	movs	r0, #3

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    195a:	4770      	bx	lr

0000195c <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    195c:	b470      	push	{r4, r5, r6}
    195e:	f04f 0500 	mov.w	r5, #0
    1962:	f022 0603 	bic.w	r6, r2, #3
    1966:	e005      	b.n	1974 <test1>

00001968 <loop1>:
    1968:	5943      	ldr	r3, [r0, r5]
    196a:	594c      	ldr	r4, [r1, r5]
    196c:	42a3      	cmp	r3, r4
    196e:	d104      	bne.n	197a <res1>
    1970:	f105 0504 	add.w	r5, r5, #4

00001974 <test1>:
    1974:	42b5      	cmp	r5, r6
    1976:	d1f7      	bne.n	1968 <loop1>
    1978:	e00d      	b.n	1996 <test2>

0000197a <res1>:
    197a:	ba1b      	rev	r3, r3
    197c:	ba24      	rev	r4, r4
    197e:	1b1b      	subs	r3, r3, r4
    1980:	bf8c      	ite	hi
    1982:	2301      	movhi	r3, #1
    1984:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    1988:	e009      	b.n	199e <done>

0000198a <loop2>:
    198a:	5d43      	ldrb	r3, [r0, r5]
    198c:	5d4c      	ldrb	r4, [r1, r5]
    198e:	1b1b      	subs	r3, r3, r4
    1990:	d105      	bne.n	199e <done>
    1992:	f105 0501 	add.w	r5, r5, #1

00001996 <test2>:
    1996:	4295      	cmp	r5, r2
    1998:	d1f7      	bne.n	198a <loop2>
    199a:	f04f 0300 	mov.w	r3, #0

0000199e <done>:
    199e:	4618      	mov	r0, r3
    19a0:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    19a2:	4770      	bx	lr

000019a4 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    19a4:	e001      	b.n	19aa <test1>

000019a6 <loop1>:
    19a6:	588b      	ldr	r3, [r1, r2]
    19a8:	5083      	str	r3, [r0, r2]

000019aa <test1>:
    19aa:	3a04      	subs	r2, #4
    19ac:	d5fb      	bpl.n	19a6 <loop1>
    19ae:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    19b2:	e001      	b.n	19b8 <test2>

000019b4 <loop2>:
    19b4:	5c8b      	ldrb	r3, [r1, r2]
    19b6:	5483      	strb	r3, [r0, r2]

000019b8 <test2>:
    19b8:	3a01      	subs	r2, #1
    19ba:	d5fb      	bpl.n	19b4 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    19bc:	4770      	bx	lr

000019be <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    19be:	b530      	push	{r4, r5, lr}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    19c0:	4605      	mov	r5, r0
    19c2:	b2c9      	uxtb	r1, r1
    19c4:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    19c8:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    19cc:	18ab      	adds	r3, r5, r2
    19ce:	2403      	movs	r4, #3
    19d0:	4023      	ands	r3, r4
    19d2:	1ad3      	subs	r3, r2, r3
    19d4:	d40b      	bmi.n	19ee <memset+0x30>
    19d6:	e001      	b.n	19dc <memset+0x1e>
    19d8:	3a01      	subs	r2, #1
    19da:	54a9      	strb	r1, [r5, r2]
    19dc:	429a      	cmp	r2, r3
    19de:	d1fb      	bne.n	19d8 <memset+0x1a>
    19e0:	e000      	b.n	19e4 <memset+0x26>
    19e2:	50a9      	str	r1, [r5, r2]
    19e4:	3a04      	subs	r2, #4
    19e6:	d5fc      	bpl.n	19e2 <memset+0x24>
    19e8:	3204      	adds	r2, #4
    19ea:	e000      	b.n	19ee <memset+0x30>
    19ec:	54a9      	strb	r1, [r5, r2]
    19ee:	3a01      	subs	r2, #1
    19f0:	d5fc      	bpl.n	19ec <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    19f2:	bd30      	pop	{r4, r5, pc}

000019f4 <strlen>:
 */

#include <string.h>

size_t strlen(const char *s)
{
    19f4:	4603      	mov	r3, r0
	const char *ss = s;
	while (*ss)
    19f6:	781a      	ldrb	r2, [r3, #0]
    19f8:	1c59      	adds	r1, r3, #1
    19fa:	b90a      	cbnz	r2, 1a00 <strlen+0xc>
		ss++;
	return ss - s;
}
    19fc:	1a18      	subs	r0, r3, r0
    19fe:	4770      	bx	lr
    1a00:	460b      	mov	r3, r1
    1a02:	e7f8      	b.n	19f6 <strlen+0x2>

00001a04 <blink_pattern>:
        }
    }
}

/// Blink backlight according to the pattern: 0=Low, 1=Mid, 2=High
static void blink_pattern(const uint8_t pattern[], int length) {
    1a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (int i = 0; i < length; i++) {
        //  Switch on the Low, Mid or High backlight. Backlight is active when low
        uint8_t level = pattern[i];
        for (int b = 0; b < sizeof(backlights); b++) {
            uint8_t gpio = backlights[b];
    1a08:	4f10      	ldr	r7, [pc, #64]	; (1a4c <blink_pattern+0x48>)
    1a0a:	4605      	mov	r5, r0
    1a0c:	eb00 0801 	add.w	r8, r0, r1
        uint8_t level = pattern[i];
    1a10:	f815 6b01 	ldrb.w	r6, [r5], #1
        for (int b = 0; b < sizeof(backlights); b++) {
    1a14:	2400      	movs	r4, #0
    1a16:	2c03      	cmp	r4, #3
    1a18:	d10a      	bne.n	1a30 <blink_pattern+0x2c>
    1a1a:	240b      	movs	r4, #11

/// Sleep for the specified number of milliseconds
static void delay_ms(uint32_t ms) {
    //  os_time_delay() doesn't work in MCUBoot because the scheduler has not started
    uint8_t button_samples = 0;
    for (int i = 0; i < ms; i++) {
    1a1c:	3c01      	subs	r4, #1
    1a1e:	d110      	bne.n	1a42 <blink_pattern+0x3e>
        hal_gpio_write(gpio, 1);
    1a20:	2101      	movs	r1, #1
    1a22:	5db8      	ldrb	r0, [r7, r6]
    1a24:	f7ff f877 	bl	b16 <hal_gpio_write>
    for (int i = 0; i < length; i++) {
    1a28:	45a8      	cmp	r8, r5
    1a2a:	d1f1      	bne.n	1a10 <blink_pattern+0xc>
}
    1a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (b == level) {                
    1a30:	42b4      	cmp	r4, r6
    1a32:	5de0      	ldrb	r0, [r4, r7]
                hal_gpio_write(gpio, 0);
    1a34:	bf0c      	ite	eq
    1a36:	2100      	moveq	r1, #0
                hal_gpio_write(gpio, 1);
    1a38:	2101      	movne	r1, #1
    1a3a:	f7ff f86c 	bl	b16 <hal_gpio_write>
        for (int b = 0; b < sizeof(backlights); b++) {
    1a3e:	3401      	adds	r4, #1
    1a40:	e7e9      	b.n	1a16 <blink_pattern+0x12>
        for (int delay = 0; delay < 100000; delay++) {}
        button_samples += hal_gpio_read(PUSH_BUTTON_IN);
    1a42:	200d      	movs	r0, #13
    1a44:	f7ff f873 	bl	b2e <hal_gpio_read>
    1a48:	e7e8      	b.n	1a1c <blink_pattern+0x18>
    1a4a:	bf00      	nop
    1a4c:	00004952 	.word	0x00004952

00001a50 <blink_backlight>:
void blink_backlight(int pattern_id, int repetitions) {
    1a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (first_blink) {
    1a54:	4b1a      	ldr	r3, [pc, #104]	; (1ac0 <blink_backlight+0x70>)
    1a56:	681a      	ldr	r2, [r3, #0]
void blink_backlight(int pattern_id, int repetitions) {
    1a58:	4605      	mov	r5, r0
    1a5a:	460e      	mov	r6, r1
    if (first_blink) {
    1a5c:	b16a      	cbz	r2, 1a7a <blink_backlight+0x2a>
        first_blink = 0;
    1a5e:	2400      	movs	r4, #0
            hal_gpio_init_out(gpio, 1);
    1a60:	2101      	movs	r1, #1
    1a62:	200e      	movs	r0, #14
        first_blink = 0;
    1a64:	601c      	str	r4, [r3, #0]
            hal_gpio_init_out(gpio, 1);
    1a66:	f7ff f843 	bl	af0 <hal_gpio_init_out>
    1a6a:	2101      	movs	r1, #1
    1a6c:	2016      	movs	r0, #22
    1a6e:	f7ff f83f 	bl	af0 <hal_gpio_init_out>
            hal_gpio_init_out(gpio, 0);
    1a72:	4621      	mov	r1, r4
    1a74:	2017      	movs	r0, #23
    1a76:	f7ff f83b 	bl	af0 <hal_gpio_init_out>
            default: blink_pattern(fastest_pulse, sizeof(fastest_pulse)); break;
    1a7a:	4f12      	ldr	r7, [pc, #72]	; (1ac4 <blink_backlight+0x74>)
            case 3:  blink_pattern(faster_pulse,  sizeof(faster_pulse));  break;
    1a7c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1ad0 <blink_backlight+0x80>
            case 2:  blink_pattern(fast_pulse,    sizeof(fast_pulse));    break;
    1a80:	f8df 9050 	ldr.w	r9, [pc, #80]	; 1ad4 <blink_backlight+0x84>
void blink_backlight(int pattern_id, int repetitions) {
    1a84:	2400      	movs	r4, #0
    for (int i = 0; i < repetitions; i++) {
    1a86:	42b4      	cmp	r4, r6
    1a88:	db01      	blt.n	1a8e <blink_backlight+0x3e>
}
    1a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        switch (pattern_id) {
    1a8e:	2d03      	cmp	r5, #3
    1a90:	d812      	bhi.n	1ab8 <blink_backlight+0x68>
    1a92:	e8df f005 	tbb	[pc, r5]
    1a96:	0802      	.short	0x0802
    1a98:	0e0b      	.short	0x0e0b
            case 0:  blink_pattern(slower_pulse,  sizeof(slower_pulse));  break;
    1a9a:	480b      	ldr	r0, [pc, #44]	; (1ac8 <blink_backlight+0x78>)
    1a9c:	2124      	movs	r1, #36	; 0x24
            default: blink_pattern(fastest_pulse, sizeof(fastest_pulse)); break;
    1a9e:	f7ff ffb1 	bl	1a04 <blink_pattern>
    for (int i = 0; i < repetitions; i++) {
    1aa2:	3401      	adds	r4, #1
    1aa4:	e7ef      	b.n	1a86 <blink_backlight+0x36>
            case 1:  blink_pattern(slow_pulse,    sizeof(slow_pulse));    break;
    1aa6:	2112      	movs	r1, #18
    1aa8:	4808      	ldr	r0, [pc, #32]	; (1acc <blink_backlight+0x7c>)
    1aaa:	e7f8      	b.n	1a9e <blink_backlight+0x4e>
            case 2:  blink_pattern(fast_pulse,    sizeof(fast_pulse));    break;
    1aac:	210c      	movs	r1, #12
    1aae:	4648      	mov	r0, r9
    1ab0:	e7f5      	b.n	1a9e <blink_backlight+0x4e>
            case 3:  blink_pattern(faster_pulse,  sizeof(faster_pulse));  break;
    1ab2:	2106      	movs	r1, #6
    1ab4:	4640      	mov	r0, r8
    1ab6:	e7f2      	b.n	1a9e <blink_backlight+0x4e>
            default: blink_pattern(fastest_pulse, sizeof(fastest_pulse)); break;
    1ab8:	2103      	movs	r1, #3
    1aba:	4638      	mov	r0, r7
    1abc:	e7ef      	b.n	1a9e <blink_backlight+0x4e>
    1abe:	bf00      	nop
    1ac0:	20000148 	.word	0x20000148
    1ac4:	00004967 	.word	0x00004967
    1ac8:	0000497c 	.word	0x0000497c
    1acc:	0000496a 	.word	0x0000496a
    1ad0:	00004961 	.word	0x00004961
    1ad4:	00004955 	.word	0x00004955

00001ad8 <pinetime_boot_init>:
void blink_backlight(int pattern_id, int repetitions);  //  Defined in blink.c
static void relocate_vector_table(void *vector_table, void *relocated_vector_table);

/// Init the display and render the boot graphic. Called by sysinit() during startup, defined in pkg.yml.
void pinetime_boot_init(void) {
    blink_backlight(1, 1);
    1ad8:	2101      	movs	r1, #1
void pinetime_boot_init(void) {
    1ada:	b538      	push	{r3, r4, r5, lr}
    blink_backlight(1, 1);
    1adc:	4608      	mov	r0, r1
    1ade:	f7ff ffb7 	bl	1a50 <blink_backlight>
    console_printf("Starting Bootloader...\n");
    1ae2:	4824      	ldr	r0, [pc, #144]	; (1b74 <pinetime_boot_init+0x9c>)
    1ae4:	f000 fa64 	bl	1fb0 <console_printf>
    console_flush();
    1ae8:	f000 fa82 	bl	1ff0 <console_flush>

    //  Init the push button. The button on the side of the PineTime is disabled by default. To enable it, drive the button out pin (P0.15) high.
    //  While enabled, the button in pin (P0.13) will be high when the button is pressed, and low when it is not pressed. 
    hal_gpio_init_in(PUSH_BUTTON_IN, HAL_GPIO_PULL_DOWN);  //  TODO: Doesn't seem to work
    1aec:	2102      	movs	r1, #2
    1aee:	200d      	movs	r0, #13
    1af0:	f7fe ffe9 	bl	ac6 <hal_gpio_init_in>
    hal_gpio_init_out(PUSH_BUTTON_OUT, 1);
    1af4:	2101      	movs	r1, #1
    1af6:	200f      	movs	r0, #15
    1af8:	f7fe fffa 	bl	af0 <hal_gpio_init_out>
    hal_gpio_write(PUSH_BUTTON_OUT, 1);  //  Enable the button
    1afc:	2101      	movs	r1, #1
    1afe:	200f      	movs	r0, #15
    1b00:	f7ff f809 	bl	b16 <hal_gpio_write>
    blink_backlight(1, 1);
    1b04:	2101      	movs	r1, #1
    1b06:	4608      	mov	r0, r1
    1b08:	f7ff ffa2 	bl	1a50 <blink_backlight>

    //  Display the image.
    pinetime_boot_display_image();
    1b0c:	f000 f8f2 	bl	1cf4 <pinetime_boot_display_image>
    console_printf("Check button: %d\n", hal_gpio_read(PUSH_BUTTON_IN));
    1b10:	200d      	movs	r0, #13
    1b12:	f7ff f80c 	bl	b2e <hal_gpio_read>
    1b16:	4601      	mov	r1, r0
    1b18:	4817      	ldr	r0, [pc, #92]	; (1b78 <pinetime_boot_init+0xa0>)
    1b1a:	f000 fa49 	bl	1fb0 <console_printf>
    console_flush();
    1b1e:	f000 fa67 	bl	1ff0 <console_flush>
    blink_backlight(1, 1);
    1b22:	2101      	movs	r1, #1
    1b24:	4608      	mov	r0, r1
    1b26:	f7ff ff93 	bl	1a50 <blink_backlight>

    uint8_t button_samples = 0;
    //  Wait 5 seconds for button press.
    console_printf("Waiting 5 seconds for button...\n");
    1b2a:	4814      	ldr	r0, [pc, #80]	; (1b7c <pinetime_boot_init+0xa4>)
    1b2c:	f000 fa40 	bl	1fb0 <console_printf>
    console_flush();
    1b30:	f000 fa5e 	bl	1ff0 <console_flush>
    1b34:	f44f 75a0 	mov.w	r5, #320	; 0x140
    uint8_t button_samples = 0;
    1b38:	2400      	movs	r4, #0

    for (int i = 0; i < 64 * 5; i++) {
        for (int delay = 0; delay < 100000; delay++);
        button_samples += hal_gpio_read(PUSH_BUTTON_IN);
    1b3a:	200d      	movs	r0, #13
    1b3c:	f7fe fff7 	bl	b2e <hal_gpio_read>
    for (int i = 0; i < 64 * 5; i++) {
    1b40:	3d01      	subs	r5, #1
        button_samples += hal_gpio_read(PUSH_BUTTON_IN);
    1b42:	4404      	add	r4, r0
    1b44:	b2e4      	uxtb	r4, r4
    for (int i = 0; i < 64 * 5; i++) {
    1b46:	d1f8      	bne.n	1b3a <pinetime_boot_init+0x62>
    }
    blink_backlight(1, 2);
    1b48:	2102      	movs	r1, #2
    1b4a:	2001      	movs	r0, #1
    1b4c:	f7ff ff80 	bl	1a50 <blink_backlight>

    if (button_samples > 1 /* TODO: this needs to be set higher to avoid accidental rollbacks */) {
    1b50:	2c01      	cmp	r4, #1
    1b52:	d90d      	bls.n	1b70 <pinetime_boot_init+0x98>
        console_printf("Flashing and resetting...\n");
    1b54:	480a      	ldr	r0, [pc, #40]	; (1b80 <pinetime_boot_init+0xa8>)
    1b56:	f000 fa2b 	bl	1fb0 <console_printf>
        console_flush();
    1b5a:	f000 fa49 	bl	1ff0 <console_flush>

        boot_set_pending(0);
    1b5e:	4628      	mov	r0, r5
    1b60:	f000 fcba 	bl	24d8 <boot_set_pending>
        blink_backlight(1, 2);
    1b64:	2102      	movs	r1, #2
    1b66:	2001      	movs	r0, #1
    1b68:	f7ff ff72 	bl	1a50 <blink_backlight>

        hal_system_reset();
    1b6c:	f7fe fafa 	bl	164 <hal_system_reset>
        return;
    }
}
    1b70:	bd38      	pop	{r3, r4, r5, pc}
    1b72:	bf00      	nop
    1b74:	000049b1 	.word	0x000049b1
    1b78:	000049c9 	.word	0x000049c9
    1b7c:	000049db 	.word	0x000049db
    1b80:	000049fc 	.word	0x000049fc

00001b84 <setup_watchdog>:

void setup_watchdog() {
  NRF_WDT->CONFIG &= ~(WDT_CONFIG_SLEEP_Msk << WDT_CONFIG_SLEEP_Pos);
    1b84:	4b0f      	ldr	r3, [pc, #60]	; (1bc4 <setup_watchdog+0x40>)
    1b86:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1b8a:	f022 0201 	bic.w	r2, r2, #1
    1b8e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
  NRF_WDT->CONFIG |= (WDT_CONFIG_HALT_Run << WDT_CONFIG_SLEEP_Pos);
    1b92:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1b96:	f042 0201 	orr.w	r2, r2, #1
    1b9a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

  NRF_WDT->CONFIG &= ~(WDT_CONFIG_HALT_Msk << WDT_CONFIG_HALT_Pos);
    1b9e:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    1ba6:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
  NRF_WDT->CONFIG |= (WDT_CONFIG_HALT_Pause << WDT_CONFIG_HALT_Pos);
    1baa:	f8d3 250c 	ldr.w	r2, [r3, #1292]	; 0x50c
    1bae:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

  /* timeout (s) = (CRV + 1) / 32768 */
  const int timeoutSeconds = 7; // 7 seconds
  uint32_t crv = (((timeoutSeconds*1000u) << 15u) / 1000) - 1;
  NRF_WDT->CRV = crv;
    1bb2:	4a05      	ldr	r2, [pc, #20]	; (1bc8 <setup_watchdog+0x44>)
    1bb4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

  /* Enable reload requests */
  NRF_WDT->RREN = (WDT_RREN_RR0_Enabled << WDT_RREN_RR0_Pos);
    1bb8:	2201      	movs	r2, #1
    1bba:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
  
  /* Start */
  NRF_WDT->TASKS_START = 1;
    1bbe:	601a      	str	r2, [r3, #0]
}
    1bc0:	4770      	bx	lr
    1bc2:	bf00      	nop
    1bc4:	40010000 	.word	0x40010000
    1bc8:	00037fff 	.word	0x00037fff

00001bcc <boot_custom_start>:

/// Called by MCUBoot when it has completed its work.
void boot_custom_start(
    uintptr_t flash_base,
    struct boot_rsp *rsp
) {
    1bcc:	b538      	push	{r3, r4, r5, lr}
    1bce:	460d      	mov	r5, r1
    blink_backlight(2, 2);
    1bd0:	2102      	movs	r1, #2
) {
    1bd2:	4604      	mov	r4, r0
    blink_backlight(2, 2);
    1bd4:	4608      	mov	r0, r1
    1bd6:	f7ff ff3b 	bl	1a50 <blink_backlight>
    console_printf("Bootloader done\n");
    1bda:	481c      	ldr	r0, [pc, #112]	; (1c4c <boot_custom_start+0x80>)
    1bdc:	f000 f9e8 	bl	1fb0 <console_printf>
    console_flush();
    1be0:	f000 fa06 	bl	1ff0 <console_flush>

    //  vector_table points to the Arm Vector Table for the appplication...
    //  First word contains initial MSP value (estack = end of RAM)
    //  Second word contains address of entry point (Reset_Handler)
    void *vector_table = (void *) (  //  Copied from MCUBoot main()
        flash_base +                 //  0
    1be4:	68ab      	ldr	r3, [r5, #8]
    1be6:	441c      	add	r4, r3
        rsp->br_image_off +          //  Offset of FLASH_AREA_IMAGE_0 (application image): 0x8000
        rsp->br_hdr->ih_hdr_size     //  Size of MCUBoot image header (0x20)
    1be8:	682b      	ldr	r3, [r5, #0]
    1bea:	891b      	ldrh	r3, [r3, #8]
        rsp->br_image_off +          //  Offset of FLASH_AREA_IMAGE_0 (application image): 0x8000
    1bec:	441c      	add	r4, r3
/// Relocate the Arm Vector Table from vector_table to relocated_vector_table.
/// relocated_vector_table must be aligned to 0x100 page boundary.
static void relocate_vector_table(void *vector_table, void *relocated_vector_table) {
    uint32_t *current_location = (uint32_t *) vector_table;
    uint32_t *new_location = (uint32_t *) relocated_vector_table;
    if (new_location == current_location) { return; }  //  No need to relocate
    1bee:	f5b4 4ffe 	cmp.w	r4, #32512	; 0x7f00
    1bf2:	d011      	beq.n	1c18 <boot_custom_start+0x4c>
    1bf4:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
    //  Check whether we need to copy the vectors.
    int vector_diff = 0;  //  Non-zero if a vector is different
    for (int i = 0; i < NVIC_NUM_VECTORS; i++) {
    1bf8:	f647 71d8 	movw	r1, #32728	; 0x7fd8
        if (new_location[i] != current_location[i]) {
    1bfc:	18e2      	adds	r2, r4, r3
    1bfe:	f5a2 42fe 	sub.w	r2, r2, #32512	; 0x7f00
    1c02:	6818      	ldr	r0, [r3, #0]
    1c04:	6812      	ldr	r2, [r2, #0]
    1c06:	4290      	cmp	r0, r2
    1c08:	d10f      	bne.n	1c2a <boot_custom_start+0x5e>
    1c0a:	3304      	adds	r3, #4
    for (int i = 0; i < NVIC_NUM_VECTORS; i++) {
    1c0c:	428b      	cmp	r3, r1
    1c0e:	d1f5      	bne.n	1bfc <boot_custom_start+0x30>
            vector_table, //  From the original address
            0x100         //  Assume that we copy an entire page
        );
    }
    //  Point VTOR Register in the System Control Block to the relocated vector table.
    *SCB_VTOR = (uint32_t) relocated_vector_table;
    1c10:	4b0f      	ldr	r3, [pc, #60]	; (1c50 <boot_custom_start+0x84>)
    1c12:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
    1c16:	601a      	str	r2, [r3, #0]
    blink_backlight(3, 4);
    1c18:	2003      	movs	r0, #3
    1c1a:	2104      	movs	r1, #4
    1c1c:	f7ff ff18 	bl	1a50 <blink_backlight>
    setup_watchdog();
    1c20:	f7ff ffb0 	bl	1b84 <setup_watchdog>
    hal_system_start(vector_table);
    1c24:	4620      	mov	r0, r4
    1c26:	f001 ff18 	bl	3a5a <hal_system_start>
        hal_flash_erase(  //  Erase...
    1c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
    1c2e:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1c32:	2000      	movs	r0, #0
    1c34:	f001 fe70 	bl	3918 <hal_flash_erase>
        hal_flash_write(  //  Write...
    1c38:	f44f 7380 	mov.w	r3, #256	; 0x100
    1c3c:	4622      	mov	r2, r4
    1c3e:	f44f 41fe 	mov.w	r1, #32512	; 0x7f00
    1c42:	2000      	movs	r0, #0
    1c44:	f001 fe36 	bl	38b4 <hal_flash_write>
    1c48:	e7e2      	b.n	1c10 <boot_custom_start+0x44>
    1c4a:	bf00      	nop
    1c4c:	000049a0 	.word	0x000049a0
    1c50:	e000ed08 	.word	0xe000ed08

00001c54 <delay_ms.isra.0>:
    hal_gpio_write(DISPLAY_CS, 1);
    return 0;
}

/// Sleep for the specified number of milliseconds
static void delay_ms(uint32_t ms) {
    1c54:	b510      	push	{r4, lr}
    1c56:	2440      	movs	r4, #64	; 0x40
#else  //  If Task Scheduler is disabled (i.e. MCUBoot)...
    //  os_time_delay() doesn't work in MCUBoot because the scheduler has not started
    uint8_t button_samples = 0;
    for (int i = 0; i < 64; i++) {
        for (int delay = 0; delay < 100000; delay++) {}
        button_samples += hal_gpio_read(PUSH_BUTTON_IN);
    1c58:	200d      	movs	r0, #13
    1c5a:	f7fe ff68 	bl	b2e <hal_gpio_read>
    for (int i = 0; i < 64; i++) {
    1c5e:	3c01      	subs	r4, #1
    1c60:	d1fa      	bne.n	1c58 <delay_ms.isra.0+0x4>
    }
#endif  //  MYNEWT_VAL(OS_SCHEDULING)
}
    1c62:	bd10      	pop	{r4, pc}

00001c64 <transmit_spi.part.1>:
static int transmit_spi(const uint8_t *data, uint16_t len) {
    1c64:	b508      	push	{r3, lr}
    assert(rc == 0);
    1c66:	f7fe fa95 	bl	194 <hal_debugger_connected>
    1c6a:	b100      	cbz	r0, 1c6e <transmit_spi.part.1+0xa>
    1c6c:	be01      	bkpt	0x0001
    1c6e:	2300      	movs	r3, #0
    1c70:	461a      	mov	r2, r3
    1c72:	4619      	mov	r1, r3
    1c74:	4618      	mov	r0, r3
    1c76:	f7ff fb6f 	bl	1358 <__assert_func>

00001c7a <transmit_spi>:
static int transmit_spi(const uint8_t *data, uint16_t len) {
    1c7a:	b538      	push	{r3, r4, r5, lr}
    1c7c:	4605      	mov	r5, r0
    if (len == 0) { return 0; }
    1c7e:	460c      	mov	r4, r1
    1c80:	b181      	cbz	r1, 1ca4 <transmit_spi+0x2a>
    hal_gpio_write(DISPLAY_CS, 0);
    1c82:	2100      	movs	r1, #0
    1c84:	2019      	movs	r0, #25
    1c86:	f7fe ff46 	bl	b16 <hal_gpio_write>
    int rc = hal_spi_txrx(DISPLAY_SPI, 
    1c8a:	2200      	movs	r2, #0
    1c8c:	4623      	mov	r3, r4
    1c8e:	4629      	mov	r1, r5
    1c90:	4610      	mov	r0, r2
    1c92:	f7ff f921 	bl	ed8 <hal_spi_txrx>
    assert(rc == 0);
    1c96:	b108      	cbz	r0, 1c9c <transmit_spi+0x22>
    1c98:	f7ff ffe4 	bl	1c64 <transmit_spi.part.1>
    hal_gpio_write(DISPLAY_CS, 1);
    1c9c:	2101      	movs	r1, #1
    1c9e:	2019      	movs	r0, #25
    1ca0:	f7fe ff39 	bl	b16 <hal_gpio_write>
}
    1ca4:	2000      	movs	r0, #0
    1ca6:	bd38      	pop	{r3, r4, r5, pc}

00001ca8 <write_command>:
static int write_command(uint8_t command, const uint8_t *params, uint16_t len) {
    1ca8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1caa:	ac02      	add	r4, sp, #8
    1cac:	460d      	mov	r5, r1
    1cae:	f804 0d01 	strb.w	r0, [r4, #-1]!
    hal_gpio_write(DISPLAY_DC, 0);
    1cb2:	2100      	movs	r1, #0
    1cb4:	2012      	movs	r0, #18
static int write_command(uint8_t command, const uint8_t *params, uint16_t len) {
    1cb6:	4616      	mov	r6, r2
    hal_gpio_write(DISPLAY_DC, 0);
    1cb8:	f7fe ff2d 	bl	b16 <hal_gpio_write>
    int rc = transmit_spi(&command, 1);
    1cbc:	2101      	movs	r1, #1
    1cbe:	4620      	mov	r0, r4
    1cc0:	f7ff ffdb 	bl	1c7a <transmit_spi>
    assert(rc == 0);
    1cc4:	b148      	cbz	r0, 1cda <write_command+0x32>
    1cc6:	f7fe fa65 	bl	194 <hal_debugger_connected>
    1cca:	b100      	cbz	r0, 1cce <write_command+0x26>
    1ccc:	be01      	bkpt	0x0001
    1cce:	2300      	movs	r3, #0
    1cd0:	461a      	mov	r2, r3
    1cd2:	4619      	mov	r1, r3
    1cd4:	4618      	mov	r0, r3
    1cd6:	f7ff fb3f 	bl	1358 <__assert_func>
    if (params != NULL && len > 0) {
    1cda:	b145      	cbz	r5, 1cee <write_command+0x46>
    1cdc:	b13e      	cbz	r6, 1cee <write_command+0x46>
    hal_gpio_write(DISPLAY_DC, 1);
    1cde:	2101      	movs	r1, #1
    1ce0:	2012      	movs	r0, #18
    1ce2:	f7fe ff18 	bl	b16 <hal_gpio_write>
    transmit_spi(data, len);
    1ce6:	4631      	mov	r1, r6
    1ce8:	4628      	mov	r0, r5
    1cea:	f7ff ffc6 	bl	1c7a <transmit_spi>
}
    1cee:	2000      	movs	r0, #0
    1cf0:	b002      	add	sp, #8
    1cf2:	bd70      	pop	{r4, r5, r6, pc}

00001cf4 <pinetime_boot_display_image>:
int pinetime_boot_display_image(void) {
    1cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    console_printf("Displaying image...\n"); console_flush();
    1cf8:	4887      	ldr	r0, [pc, #540]	; (1f18 <pinetime_boot_display_image+0x224>)
int pinetime_boot_display_image(void) {
    1cfa:	b085      	sub	sp, #20
    console_printf("Displaying image...\n"); console_flush();
    1cfc:	f000 f958 	bl	1fb0 <console_printf>
    1d00:	f000 f976 	bl	1ff0 <console_flush>
    rc = hal_gpio_init_out(DISPLAY_RST, 1); assert(rc == 0);
    1d04:	2101      	movs	r1, #1
    1d06:	201a      	movs	r0, #26
    1d08:	f7fe fef2 	bl	af0 <hal_gpio_init_out>
    1d0c:	b148      	cbz	r0, 1d22 <pinetime_boot_display_image+0x2e>
    1d0e:	f7fe fa41 	bl	194 <hal_debugger_connected>
    1d12:	b100      	cbz	r0, 1d16 <pinetime_boot_display_image+0x22>
    1d14:	be01      	bkpt	0x0001
    1d16:	2300      	movs	r3, #0
    1d18:	461a      	mov	r2, r3
    1d1a:	4619      	mov	r1, r3
    1d1c:	4618      	mov	r0, r3
    1d1e:	f7ff fb1b 	bl	1358 <__assert_func>
    rc = hal_gpio_init_out(DISPLAY_CS, 1); assert(rc == 0);
    1d22:	2101      	movs	r1, #1
    1d24:	2019      	movs	r0, #25
    1d26:	f7fe fee3 	bl	af0 <hal_gpio_init_out>
    1d2a:	4601      	mov	r1, r0
    1d2c:	2800      	cmp	r0, #0
    1d2e:	d1ee      	bne.n	1d0e <pinetime_boot_display_image+0x1a>
    rc = hal_gpio_init_out(DISPLAY_DC, 0); assert(rc == 0);
    1d30:	2012      	movs	r0, #18
    1d32:	f7fe fedd 	bl	af0 <hal_gpio_init_out>
    1d36:	4601      	mov	r1, r0
    1d38:	2800      	cmp	r0, #0
    1d3a:	d1e8      	bne.n	1d0e <pinetime_boot_display_image+0x1a>
    rc = hal_gpio_init_out(DISPLAY_HIGH, 0); assert(rc == 0);
    1d3c:	2017      	movs	r0, #23
    1d3e:	f7fe fed7 	bl	af0 <hal_gpio_init_out>
    1d42:	4604      	mov	r4, r0
    1d44:	2800      	cmp	r0, #0
    1d46:	d1e2      	bne.n	1d0e <pinetime_boot_display_image+0x1a>
    hal_gpio_write(DISPLAY_RST, 1);
    1d48:	2101      	movs	r1, #1
    1d4a:	201a      	movs	r0, #26
    1d4c:	f7fe fee3 	bl	b16 <hal_gpio_write>
    hal_gpio_write(DISPLAY_RST, 0);
    1d50:	4621      	mov	r1, r4
    1d52:	201a      	movs	r0, #26
    1d54:	f7fe fedf 	bl	b16 <hal_gpio_write>
    hal_gpio_write(DISPLAY_RST, 1);
    1d58:	2101      	movs	r1, #1
    1d5a:	201a      	movs	r0, #26
    1d5c:	f7fe fedb 	bl	b16 <hal_gpio_write>
    write_command(SWRESET, NULL, 0);
    1d60:	4622      	mov	r2, r4
    1d62:	4621      	mov	r1, r4
    1d64:	2001      	movs	r0, #1
    1d66:	f7ff ff9f 	bl	1ca8 <write_command>
    delay_ms(200);
    1d6a:	f7ff ff73 	bl	1c54 <delay_ms.isra.0>
    write_command(SLPOUT, NULL, 0);
    1d6e:	4622      	mov	r2, r4
    1d70:	4621      	mov	r1, r4
    1d72:	2011      	movs	r0, #17
    1d74:	f7ff ff98 	bl	1ca8 <write_command>
    delay_ms(200);
    1d78:	f7ff ff6c 	bl	1c54 <delay_ms.isra.0>
    write_command(FRMCTR1, FRMCTR1_PARA, sizeof(FRMCTR1_PARA));
    1d7c:	2203      	movs	r2, #3
    1d7e:	4967      	ldr	r1, [pc, #412]	; (1f1c <pinetime_boot_display_image+0x228>)
    1d80:	20b1      	movs	r0, #177	; 0xb1
    1d82:	f7ff ff91 	bl	1ca8 <write_command>
    write_command(FRMCTR2, FRMCTR2_PARA, sizeof(FRMCTR2_PARA));
    1d86:	2203      	movs	r2, #3
    1d88:	4965      	ldr	r1, [pc, #404]	; (1f20 <pinetime_boot_display_image+0x22c>)
    1d8a:	20b2      	movs	r0, #178	; 0xb2
    1d8c:	f7ff ff8c 	bl	1ca8 <write_command>
    write_command(FRMCTR3, FRMCTR3_PARA, sizeof(FRMCTR3_PARA));
    1d90:	2206      	movs	r2, #6
    1d92:	4964      	ldr	r1, [pc, #400]	; (1f24 <pinetime_boot_display_image+0x230>)
    1d94:	20b3      	movs	r0, #179	; 0xb3
    1d96:	f7ff ff87 	bl	1ca8 <write_command>
    write_command(INVCTR, INVCTR_PARA, sizeof(INVCTR_PARA));
    1d9a:	2201      	movs	r2, #1
    1d9c:	4962      	ldr	r1, [pc, #392]	; (1f28 <pinetime_boot_display_image+0x234>)
    1d9e:	20b4      	movs	r0, #180	; 0xb4
    1da0:	f7ff ff82 	bl	1ca8 <write_command>
    write_command(PWCTR1, PWCTR1_PARA, sizeof(PWCTR1_PARA));
    1da4:	2203      	movs	r2, #3
    1da6:	4961      	ldr	r1, [pc, #388]	; (1f2c <pinetime_boot_display_image+0x238>)
    1da8:	20c0      	movs	r0, #192	; 0xc0
    1daa:	f7ff ff7d 	bl	1ca8 <write_command>
    write_command(PWCTR2, PWCTR2_PARA, sizeof(PWCTR2_PARA));
    1dae:	2201      	movs	r2, #1
    1db0:	495f      	ldr	r1, [pc, #380]	; (1f30 <pinetime_boot_display_image+0x23c>)
    1db2:	20c1      	movs	r0, #193	; 0xc1
    1db4:	f7ff ff78 	bl	1ca8 <write_command>
    write_command(PWCTR3, PWCTR3_PARA, sizeof(PWCTR3_PARA));
    1db8:	2202      	movs	r2, #2
    1dba:	495e      	ldr	r1, [pc, #376]	; (1f34 <pinetime_boot_display_image+0x240>)
    1dbc:	20c2      	movs	r0, #194	; 0xc2
    1dbe:	f7ff ff73 	bl	1ca8 <write_command>
    write_command(PWCTR4, PWCTR4_PARA, sizeof(PWCTR4_PARA));
    1dc2:	2202      	movs	r2, #2
    1dc4:	495c      	ldr	r1, [pc, #368]	; (1f38 <pinetime_boot_display_image+0x244>)
    1dc6:	20c3      	movs	r0, #195	; 0xc3
    1dc8:	f7ff ff6e 	bl	1ca8 <write_command>
    write_command(PWCTR5, PWCTR5_PARA, sizeof(PWCTR5_PARA));
    1dcc:	2202      	movs	r2, #2
    1dce:	495b      	ldr	r1, [pc, #364]	; (1f3c <pinetime_boot_display_image+0x248>)
    1dd0:	20c4      	movs	r0, #196	; 0xc4
    1dd2:	f7ff ff69 	bl	1ca8 <write_command>
    write_command(VMCTR1, VMCTR1_PARA, sizeof(VMCTR1_PARA));
    1dd6:	2201      	movs	r2, #1
    1dd8:	4959      	ldr	r1, [pc, #356]	; (1f40 <pinetime_boot_display_image+0x24c>)
    1dda:	20c5      	movs	r0, #197	; 0xc5
    1ddc:	f7ff ff64 	bl	1ca8 <write_command>
        write_command(INVON, NULL, 0);
    1de0:	4622      	mov	r2, r4
    1de2:	4621      	mov	r1, r4
    1de4:	2021      	movs	r0, #33	; 0x21
    1de6:	f7ff ff5f 	bl	1ca8 <write_command>
        write_command(MADCTL, MADCTL1_PARA, sizeof(MADCTL1_PARA));
    1dea:	2201      	movs	r2, #1
    1dec:	4955      	ldr	r1, [pc, #340]	; (1f44 <pinetime_boot_display_image+0x250>)
    1dee:	2036      	movs	r0, #54	; 0x36
    1df0:	f7ff ff5a 	bl	1ca8 <write_command>
    write_command(COLMOD, COLMOD_PARA, sizeof(COLMOD_PARA));
    1df4:	2201      	movs	r2, #1
    1df6:	4954      	ldr	r1, [pc, #336]	; (1f48 <pinetime_boot_display_image+0x254>)
    1df8:	203a      	movs	r0, #58	; 0x3a
    1dfa:	f7ff ff55 	bl	1ca8 <write_command>
        uint8_t orientation_para[1] = { orientation };
    1dfe:	f10d 0810 	add.w	r8, sp, #16
    write_command(DISPON, NULL, 0);
    1e02:	4622      	mov	r2, r4
    1e04:	4621      	mov	r1, r4
    1e06:	2029      	movs	r0, #41	; 0x29
    1e08:	f7ff ff4e 	bl	1ca8 <write_command>
    delay_ms(200);
    1e0c:	f7ff ff22 	bl	1c54 <delay_ms.isra.0>
        uint8_t orientation_para[1] = { orientation };
    1e10:	2360      	movs	r3, #96	; 0x60
    1e12:	f808 3d04 	strb.w	r3, [r8, #-4]!
        int rc = write_command(MADCTL, orientation_para, 1);
    1e16:	2201      	movs	r2, #1
    1e18:	4641      	mov	r1, r8
    1e1a:	2036      	movs	r0, #54	; 0x36
    1e1c:	f7ff ff44 	bl	1ca8 <write_command>
        assert(rc == 0);
    1e20:	2800      	cmp	r0, #0
    1e22:	f47f af74 	bne.w	1d0e <pinetime_boot_display_image+0x1a>
    1e26:	4605      	mov	r5, r0
    1e28:	23f0      	movs	r3, #240	; 0xf0
    1e2a:	436b      	muls	r3, r5
    1e2c:	fa5f fa85 	uxtb.w	sl, r5
    1e30:	9301      	str	r3, [sp, #4]
    1e32:	f04f 0b02 	mov.w	fp, #2
        uint8_t left = 0;
    1e36:	2700      	movs	r7, #0
    1e38:	e001      	b.n	1e3e <pinetime_boot_display_image+0x14a>
    1e3a:	f04f 0b01 	mov.w	fp, #1
    1e3e:	f107 047f 	add.w	r4, r7, #127	; 0x7f
    1e42:	2cef      	cmp	r4, #239	; 0xef
    1e44:	bf28      	it	cs
    1e46:	24ef      	movcs	r4, #239	; 0xef
            uint16_t len = (right - left + 1) * BYTES_PER_PIXEL;
    1e48:	1be6      	subs	r6, r4, r7
            uint32_t offset = ((top * COL_COUNT) + left) * BYTES_PER_PIXEL;
    1e4a:	9b01      	ldr	r3, [sp, #4]
            int rc = hal_flash_read(FLASH_DEVICE, offset, flash_buffer, len); assert(rc == 0);
    1e4c:	4a3f      	ldr	r2, [pc, #252]	; (1f4c <pinetime_boot_display_image+0x258>)
            uint16_t len = (right - left + 1) * BYTES_PER_PIXEL;
    1e4e:	3601      	adds	r6, #1
    1e50:	0076      	lsls	r6, r6, #1
            uint32_t offset = ((top * COL_COUNT) + left) * BYTES_PER_PIXEL;
    1e52:	18f9      	adds	r1, r7, r3
            uint16_t len = (right - left + 1) * BYTES_PER_PIXEL;
    1e54:	b2b6      	uxth	r6, r6
            int rc = hal_flash_read(FLASH_DEVICE, offset, flash_buffer, len); assert(rc == 0);
    1e56:	4633      	mov	r3, r6
    1e58:	0049      	lsls	r1, r1, #1
    1e5a:	2001      	movs	r0, #1
    1e5c:	f001 fd08 	bl	3870 <hal_flash_read>
    1e60:	4602      	mov	r2, r0
    1e62:	2800      	cmp	r0, #0
    1e64:	f47f af53 	bne.w	1d0e <pinetime_boot_display_image+0x1a>
            rc = set_window(left, top, right, bottom); assert(rc == 0);
    1e68:	b2e4      	uxtb	r4, r4
    assert(left <= right);
    1e6a:	42bc      	cmp	r4, r7
    1e6c:	f4ff af4f 	bcc.w	1d0e <pinetime_boot_display_image+0x1a>
    int rc = write_command(CASET, NULL, 0); assert(rc == 0);
    1e70:	4601      	mov	r1, r0
    1e72:	202a      	movs	r0, #42	; 0x2a
    1e74:	f7ff ff18 	bl	1ca8 <write_command>
    1e78:	4681      	mov	r9, r0
    1e7a:	2800      	cmp	r0, #0
    1e7c:	f47f af47 	bne.w	1d0e <pinetime_boot_display_image+0x1a>
    uint8_t col_para[4] = { 0x00, left, 0x00, right };
    1e80:	f88d 0008 	strb.w	r0, [sp, #8]
    1e84:	f88d 000a 	strb.w	r0, [sp, #10]
    hal_gpio_write(DISPLAY_DC, 1);
    1e88:	2101      	movs	r1, #1
    1e8a:	2012      	movs	r0, #18
    uint8_t col_para[4] = { 0x00, left, 0x00, right };
    1e8c:	f88d 7009 	strb.w	r7, [sp, #9]
    1e90:	f88d 400b 	strb.w	r4, [sp, #11]
    hal_gpio_write(DISPLAY_DC, 1);
    1e94:	f7fe fe3f 	bl	b16 <hal_gpio_write>
    transmit_spi(data, len);
    1e98:	2104      	movs	r1, #4
    1e9a:	a802      	add	r0, sp, #8
    1e9c:	f7ff feed 	bl	1c7a <transmit_spi>
    rc = write_command(RASET, NULL, 0); assert(rc == 0);
    1ea0:	464a      	mov	r2, r9
    1ea2:	4649      	mov	r1, r9
    1ea4:	202b      	movs	r0, #43	; 0x2b
    1ea6:	f7ff feff 	bl	1ca8 <write_command>
    1eaa:	4607      	mov	r7, r0
    1eac:	2800      	cmp	r0, #0
    1eae:	f47f af2e 	bne.w	1d0e <pinetime_boot_display_image+0x1a>
    uint8_t row_para[4] = { 0x00, top, 0x00, bottom };
    1eb2:	f88d 000c 	strb.w	r0, [sp, #12]
    1eb6:	f88d 000e 	strb.w	r0, [sp, #14]
    hal_gpio_write(DISPLAY_DC, 1);
    1eba:	2101      	movs	r1, #1
    1ebc:	2012      	movs	r0, #18
    uint8_t row_para[4] = { 0x00, top, 0x00, bottom };
    1ebe:	f88d a00d 	strb.w	sl, [sp, #13]
    1ec2:	f88d a00f 	strb.w	sl, [sp, #15]
    hal_gpio_write(DISPLAY_DC, 1);
    1ec6:	f7fe fe26 	bl	b16 <hal_gpio_write>
    transmit_spi(data, len);
    1eca:	2104      	movs	r1, #4
    1ecc:	4640      	mov	r0, r8
    1ece:	f7ff fed4 	bl	1c7a <transmit_spi>
            rc = write_command(RAMWR, NULL, 0); assert(rc == 0);
    1ed2:	463a      	mov	r2, r7
    1ed4:	4639      	mov	r1, r7
    1ed6:	202c      	movs	r0, #44	; 0x2c
    1ed8:	f7ff fee6 	bl	1ca8 <write_command>
    1edc:	4681      	mov	r9, r0
    1ede:	2800      	cmp	r0, #0
    1ee0:	f47f af15 	bne.w	1d0e <pinetime_boot_display_image+0x1a>
    hal_gpio_write(DISPLAY_DC, 1);
    1ee4:	2101      	movs	r1, #1
    1ee6:	2012      	movs	r0, #18
    1ee8:	f7fe fe15 	bl	b16 <hal_gpio_write>
    transmit_spi(data, len);
    1eec:	4631      	mov	r1, r6
    1eee:	4817      	ldr	r0, [pc, #92]	; (1f4c <pinetime_boot_display_image+0x258>)
    1ef0:	f7ff fec3 	bl	1c7a <transmit_spi>
            left = right + 1;
    1ef4:	3401      	adds	r4, #1
            if (left >= COL_COUNT) { break; }
    1ef6:	f1bb 0f01 	cmp.w	fp, #1
            left = right + 1;
    1efa:	b2e7      	uxtb	r7, r4
            if (left >= COL_COUNT) { break; }
    1efc:	d19d      	bne.n	1e3a <pinetime_boot_display_image+0x146>
    1efe:	3501      	adds	r5, #1
    for (uint8_t row = 0; row < ROW_COUNT; row++) {
    1f00:	2df0      	cmp	r5, #240	; 0xf0
    1f02:	d191      	bne.n	1e28 <pinetime_boot_display_image+0x134>
    console_printf("Image displayed\n"); console_flush();
    1f04:	4812      	ldr	r0, [pc, #72]	; (1f50 <pinetime_boot_display_image+0x25c>)
    1f06:	f000 f853 	bl	1fb0 <console_printf>
    1f0a:	f000 f871 	bl	1ff0 <console_flush>
}
    1f0e:	4648      	mov	r0, r9
    1f10:	b005      	add	sp, #20
    1f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f16:	bf00      	nop
    1f18:	00004a31 	.word	0x00004a31
    1f1c:	00004a18 	.word	0x00004a18
    1f20:	00004a1b 	.word	0x00004a1b
    1f24:	00004a1e 	.word	0x00004a1e
    1f28:	00004a24 	.word	0x00004a24
    1f2c:	00004a26 	.word	0x00004a26
    1f30:	00004a29 	.word	0x00004a29
    1f34:	00004a2a 	.word	0x00004a2a
    1f38:	00004a2c 	.word	0x00004a2c
    1f3c:	00004a2e 	.word	0x00004a2e
    1f40:	00004a30 	.word	0x00004a30
    1f44:	00004a25 	.word	0x00004a25
    1f48:	00004a17 	.word	0x00004a17
    1f4c:	20004ae8 	.word	0x20004ae8
    1f50:	00004a46 	.word	0x00004a46

00001f54 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
    1f54:	b570      	push	{r4, r5, r6, lr}
    1f56:	4605      	mov	r5, r0
    1f58:	460e      	mov	r6, r1
    int i;
    for (i = 0; i < cnt; i++) {
    1f5a:	4604      	mov	r4, r0
    1f5c:	1b63      	subs	r3, r4, r5
    1f5e:	429e      	cmp	r6, r3
    1f60:	dd05      	ble.n	1f6e <console_write+0x1a>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
    1f62:	f814 0b01 	ldrb.w	r0, [r4], #1
    1f66:	f000 f89f 	bl	20a8 <console_out_nolock>
    1f6a:	3001      	adds	r0, #1
    1f6c:	d1f6      	bne.n	1f5c <console_write+0x8>
    }
}
    1f6e:	bd70      	pop	{r4, r5, r6, pc}

00001f70 <console_blocking_mode>:

void console_blocking_mode(void) {
    disable_buffer();
    1f70:	f000 b870 	b.w	2054 <disable_buffer>

00001f74 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
    1f74:	b513      	push	{r0, r1, r4, lr}
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    os_eventq_init(&avail_queue);
    1f76:	480b      	ldr	r0, [pc, #44]	; (1fa4 <console_pkg_init+0x30>)
    1f78:	f7ff fab7 	bl	14ea <os_eventq_init>
    os_mutex_init(&console_write_lock);
    1f7c:	480a      	ldr	r0, [pc, #40]	; (1fa8 <console_pkg_init+0x34>)
    1f7e:	f7ff fce3 	bl	1948 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
    1f82:	f000 f8af 	bl	20e4 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
    1f86:	b158      	cbz	r0, 1fa0 <console_pkg_init+0x2c>
    1f88:	f7fe f904 	bl	194 <hal_debugger_connected>
    1f8c:	b100      	cbz	r0, 1f90 <console_pkg_init+0x1c>
    1f8e:	be01      	bkpt	0x0001
    1f90:	2300      	movs	r3, #0
    1f92:	4a06      	ldr	r2, [pc, #24]	; (1fac <console_pkg_init+0x38>)
    1f94:	9300      	str	r3, [sp, #0]
    1f96:	6814      	ldr	r4, [r2, #0]
    1f98:	4619      	mov	r1, r3
    1f9a:	461a      	mov	r2, r3
    1f9c:	4618      	mov	r0, r3
    1f9e:	47a0      	blx	r4
}
    1fa0:	b002      	add	sp, #8
    1fa2:	bd10      	pop	{r4, pc}
    1fa4:	20004be8 	.word	0x20004be8
    1fa8:	20004bfc 	.word	0x20004bfc
    1fac:	20000150 	.word	0x20000150

00001fb0 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
    1fb0:	b40f      	push	{r0, r1, r2, r3}
    1fb2:	b513      	push	{r0, r1, r4, lr}
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
    1fb4:	f000 f898 	bl	20e8 <console_get_ticks>
    1fb8:	b140      	cbz	r0, 1fcc <console_printf+0x1c>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
    1fba:	4b0b      	ldr	r3, [pc, #44]	; (1fe8 <console_printf+0x38>)
    1fbc:	681b      	ldr	r3, [r3, #0]
    1fbe:	b98b      	cbnz	r3, 1fe4 <console_printf+0x34>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
    1fc0:	f7ff fbaa 	bl	1718 <os_time_get>
    1fc4:	4601      	mov	r1, r0
    1fc6:	4809      	ldr	r0, [pc, #36]	; (1fec <console_printf+0x3c>)
    1fc8:	f001 ffd4 	bl	3f74 <printf>
    num_chars = 0;
    1fcc:	4604      	mov	r4, r0
        }
    }

    va_start(args, fmt);
    1fce:	a905      	add	r1, sp, #20
    num_chars += vprintf(fmt, args);
    1fd0:	9804      	ldr	r0, [sp, #16]
    va_start(args, fmt);
    1fd2:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
    1fd4:	f001 ffe0 	bl	3f98 <vprintf>
    va_end(args);

    return num_chars;
}
    1fd8:	4420      	add	r0, r4
    1fda:	b002      	add	sp, #8
    1fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1fe0:	b004      	add	sp, #16
    1fe2:	4770      	bx	lr
    num_chars = 0;
    1fe4:	2400      	movs	r4, #0
    1fe6:	e7f2      	b.n	1fce <console_printf+0x1e>
    1fe8:	20004bf8 	.word	0x20004bf8
    1fec:	00004a57 	.word	0x00004a57

00001ff0 <console_flush>:
#endif  //  DISABLE_SEMIHOSTING
}

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
    1ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
    1ff2:	4c14      	ldr	r4, [pc, #80]	; (2044 <console_flush+0x54>)
    1ff4:	7822      	ldrb	r2, [r4, #0]
void console_flush(void) {
    1ff6:	b085      	sub	sp, #20
    if (!log_enabled) { return; }       //  Skip if log not enabled.
    1ff8:	b312      	cbz	r2, 2040 <console_flush+0x50>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
    1ffa:	4913      	ldr	r1, [pc, #76]	; (2048 <console_flush+0x58>)
    1ffc:	680a      	ldr	r2, [r1, #0]
    1ffe:	b1fa      	cbz	r2, 2040 <console_flush+0x50>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
    2000:	4b12      	ldr	r3, [pc, #72]	; (204c <console_flush+0x5c>)
    2002:	685b      	ldr	r3, [r3, #4]
    2004:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
    2008:	b9d3      	cbnz	r3, 2040 <console_flush+0x50>
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    200a:	4d11      	ldr	r5, [pc, #68]	; (2050 <console_flush+0x60>)

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
    200c:	600b      	str	r3, [r1, #0]
    args[0] = (uint32_t)fh;
    200e:	2602      	movs	r6, #2
    semihost_mbuf = NULL;
    2010:	4613      	mov	r3, r2
    __asm( 
    2012:	2705      	movs	r7, #5
    2014:	f10d 0c04 	add.w	ip, sp, #4
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    2018:	6829      	ldr	r1, [r5, #0]
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
    201a:	07c9      	lsls	r1, r1, #31
    201c:	d50a      	bpl.n	2034 <console_flush+0x44>

    struct os_mbuf *m = old;
    while (m) {  //  For each mbuf in the chain...
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
    201e:	88d9      	ldrh	r1, [r3, #6]
    if (length == 0) { return 0; }
    2020:	b141      	cbz	r1, 2034 <console_flush+0x44>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
    2022:	6818      	ldr	r0, [r3, #0]
    args[2] = (uint32_t)length;
    2024:	9103      	str	r1, [sp, #12]
    if (!log_enabled) return -1;
    2026:	7821      	ldrb	r1, [r4, #0]
    args[1] = (uint32_t)buffer;
    2028:	e9cd 6001 	strd	r6, r0, [sp, #4]
    if (!log_enabled) return -1;
    202c:	b111      	cbz	r1, 2034 <console_flush+0x44>
    __asm( 
    202e:	4638      	mov	r0, r7
    2030:	4661      	mov	r1, ip
    2032:	beab      	bkpt	0x00ab
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
    2034:	68db      	ldr	r3, [r3, #12]
    while (m) {  //  For each mbuf in the chain...
    2036:	2b00      	cmp	r3, #0
    2038:	d1ee      	bne.n	2018 <console_flush+0x28>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
    203a:	4610      	mov	r0, r2
    203c:	f7ff fc22 	bl	1884 <os_mbuf_free_chain>
}
    2040:	b005      	add	sp, #20
    2042:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2044:	2000014c 	.word	0x2000014c
    2048:	20004c0c 	.word	0x20004c0c
    204c:	e000ed00 	.word	0xe000ed00
    2050:	e000edf0 	.word	0xe000edf0

00002054 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
    2054:	f7ff bfcc 	b.w	1ff0 <console_flush>

00002058 <console_buffer>:
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
    2058:	4b10      	ldr	r3, [pc, #64]	; (209c <console_buffer+0x44>)
    205a:	781b      	ldrb	r3, [r3, #0]
void console_buffer(const char *buffer, unsigned int length) {
    205c:	b570      	push	{r4, r5, r6, lr}
    205e:	4606      	mov	r6, r0
    2060:	460d      	mov	r5, r1
    if (!log_enabled) { return; }           //  Skip if log not enabled.
    2062:	b1d3      	cbz	r3, 209a <console_buffer+0x42>
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    2064:	4b0e      	ldr	r3, [pc, #56]	; (20a0 <console_buffer+0x48>)
    2066:	681b      	ldr	r3, [r3, #0]
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
    2068:	07db      	lsls	r3, r3, #31
    206a:	d516      	bpl.n	209a <console_buffer+0x42>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
    206c:	4c0d      	ldr	r4, [pc, #52]	; (20a4 <console_buffer+0x4c>)
    206e:	6821      	ldr	r1, [r4, #0]
    2070:	b169      	cbz	r1, 208e <console_buffer+0x36>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
    }
    //  Limit the buffer size.  Quit if too big.
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    2072:	6820      	ldr	r0, [r4, #0]
    2074:	f7ff fc13 	bl	189e <os_mbuf_len>
    2078:	4428      	add	r0, r5
    207a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    207e:	d20c      	bcs.n	209a <console_buffer+0x42>
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    2080:	b2aa      	uxth	r2, r5
    2082:	4631      	mov	r1, r6
    2084:	6820      	ldr	r0, [r4, #0]
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
    2086:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    208a:	f7ff bc11 	b.w	18b0 <os_mbuf_append>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
    208e:	b2a8      	uxth	r0, r5
    2090:	f7ff faf2 	bl	1678 <os_msys_get_pkthdr>
    2094:	6020      	str	r0, [r4, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
    2096:	2800      	cmp	r0, #0
    2098:	d1eb      	bne.n	2072 <console_buffer+0x1a>
}
    209a:	bd70      	pop	{r4, r5, r6, pc}
    209c:	2000014c 	.word	0x2000014c
    20a0:	e000edf0 	.word	0xe000edf0
    20a4:	20004c0c 	.word	0x20004c0c

000020a8 <console_out_nolock>:
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}

int console_out_nolock(int character) {
    char c = (char)character;
    if (g_silence_console) { return c; }
    20a8:	4b0c      	ldr	r3, [pc, #48]	; (20dc <console_out_nolock+0x34>)
int console_out_nolock(int character) {
    20aa:	b513      	push	{r0, r1, r4, lr}
    if (g_silence_console) { return c; }
    20ac:	7819      	ldrb	r1, [r3, #0]
int console_out_nolock(int character) {
    20ae:	4604      	mov	r4, r0
    20b0:	b2c3      	uxtb	r3, r0
    if (g_silence_console) { return c; }
    20b2:	b119      	cbz	r1, 20bc <console_out_nolock+0x14>
    20b4:	461c      	mov	r4, r3
    } else {
        console_is_midline = 1;
    }
    semihosting_console_write_ch(c);
    return character;
}
    20b6:	4620      	mov	r0, r4
    20b8:	b002      	add	sp, #8
    20ba:	bd10      	pop	{r4, pc}
    if ('\n' == c) {
    20bc:	2b0a      	cmp	r3, #10
    20be:	4a08      	ldr	r2, [pc, #32]	; (20e0 <console_out_nolock+0x38>)
    20c0:	f88d 3007 	strb.w	r3, [sp, #7]
        console_is_midline = 1;
    20c4:	bf18      	it	ne
    20c6:	2101      	movne	r1, #1
    if (c == '\r') { return; }  //  Don't display \r.
    20c8:	2b0d      	cmp	r3, #13
        console_is_midline = 1;
    20ca:	6011      	str	r1, [r2, #0]
    if (c == '\r') { return; }  //  Don't display \r.
    20cc:	d0f3      	beq.n	20b6 <console_out_nolock+0xe>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
    20ce:	2101      	movs	r1, #1
    20d0:	f10d 0007 	add.w	r0, sp, #7
    20d4:	f7ff ffc0 	bl	2058 <console_buffer>
    20d8:	e7ed      	b.n	20b6 <console_out_nolock+0xe>
    20da:	bf00      	nop
    20dc:	20004c08 	.word	0x20004c08
    20e0:	20004bf8 	.word	0x20004bf8

000020e4 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
    20e4:	2000      	movs	r0, #0
    20e6:	4770      	bx	lr

000020e8 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
    20e8:	4b01      	ldr	r3, [pc, #4]	; (20f0 <console_get_ticks+0x8>)
    20ea:	7818      	ldrb	r0, [r3, #0]
    20ec:	4770      	bx	lr
    20ee:	bf00      	nop
    20f0:	20004c10 	.word	0x20004c10

000020f4 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    20f4:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    20f6:	f7ff f92f 	bl	1358 <__assert_func>
	...

000020fc <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
    20fc:	4b01      	ldr	r3, [pc, #4]	; (2104 <sysinit_start+0x8>)
    20fe:	2201      	movs	r2, #1
    2100:	701a      	strb	r2, [r3, #0]
}
    2102:	4770      	bx	lr
    2104:	20004c11 	.word	0x20004c11

00002108 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
    2108:	4b01      	ldr	r3, [pc, #4]	; (2110 <sysinit_end+0x8>)
    210a:	2200      	movs	r2, #0
    210c:	701a      	strb	r2, [r3, #0]
}
    210e:	4770      	bx	lr
    2110:	20004c11 	.word	0x20004c11

00002114 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
    2114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2116:	9d08      	ldr	r5, [sp, #32]
    2118:	460c      	mov	r4, r1
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
    211a:	b29e      	uxth	r6, r3
    211c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    211e:	9300      	str	r3, [sp, #0]
{
    2120:	4617      	mov	r7, r2
    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
    2122:	4603      	mov	r3, r0
    2124:	462a      	mov	r2, r5
    2126:	4631      	mov	r1, r6
    2128:	4620      	mov	r0, r4
    212a:	f7ff fa1b 	bl	1564 <os_mempool_init>
    if (rc != 0) {
    212e:	b940      	cbnz	r0, 2142 <mem_init_mbuf_pool+0x2e>
        return rc;
    }

    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
    2130:	4633      	mov	r3, r6
    2132:	b2aa      	uxth	r2, r5
    2134:	4621      	mov	r1, r4
    2136:	4638      	mov	r0, r7
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    2138:	b003      	add	sp, #12
    213a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
    213e:	f7ff bb68 	b.w	1812 <os_mbuf_pool_init>
}
    2142:	b003      	add	sp, #12
    2144:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002146 <sysinit_app>:
void modlog_init(void);
void pinetime_boot_init(void);

void
sysinit_app(void)
{
    2146:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
    2148:	f7ff f9b8 	bl	14bc <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
    214c:	f001 ffe0 	bl	4110 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
    2150:	f7ff ff10 	bl	1f74 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
    2154:	f002 f942 	bl	43dc <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
    2158:	f002 f864 	bl	4224 <modlog_init>

    /*** Stage 900 */
    /* 900.0: pinetime_boot_init (libs/pinetime_boot) */
    pinetime_boot_init();
}
    215c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pinetime_boot_init();
    2160:	f7ff bcba 	b.w	1ad8 <pinetime_boot_init>

00002164 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
static int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
    2164:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    2168:	4606      	mov	r6, r0
    216a:	460f      	mov	r7, r1
    216c:	4691      	mov	r9, r2
    216e:	461d      	mov	r5, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
    2170:	f001 ffbe 	bl	40f0 <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    2174:	2808      	cmp	r0, #8
    align = flash_area_align(fap);
    2176:	4604      	mov	r4, r0
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
    2178:	d81f      	bhi.n	21ba <boot_write_trailer+0x56>
        return -1;
    }
    erased_val = flash_area_erased_val(fap);
    217a:	4630      	mov	r0, r6
    217c:	f001 ffbb 	bl	40f6 <flash_area_erased_val>
    2180:	42ac      	cmp	r4, r5
    2182:	bf38      	it	cc
    2184:	462c      	movcc	r4, r5
    2186:	4680      	mov	r8, r0
    2188:	b2e4      	uxtb	r4, r4
    if (align < inlen) {
        align = inlen;
    }
    memcpy(buf, inbuf, inlen);
    218a:	462a      	mov	r2, r5
    218c:	4649      	mov	r1, r9
    218e:	4668      	mov	r0, sp
    2190:	f7ff fc08 	bl	19a4 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
    2194:	1b62      	subs	r2, r4, r5
    2196:	fa5f f188 	uxtb.w	r1, r8
    219a:	eb0d 0005 	add.w	r0, sp, r5
    219e:	f7ff fc0e 	bl	19be <memset>

    rc = flash_area_write(fap, off, buf, align);
    21a2:	4623      	mov	r3, r4
    21a4:	466a      	mov	r2, sp
    21a6:	4639      	mov	r1, r7
    21a8:	4630      	mov	r0, r6
    21aa:	f001 ff7d 	bl	40a8 <flash_area_write>
    if (rc != 0) {
    21ae:	3000      	adds	r0, #0
    21b0:	bf18      	it	ne
    21b2:	2001      	movne	r0, #1
        return BOOT_EFLASH;
    }

    return 0;
}
    21b4:	b003      	add	sp, #12
    21b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return -1;
    21ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    21be:	e7f9      	b.n	21b4 <boot_write_trailer+0x50>

000021c0 <boot_magic_compatible_check>:
    switch (tbl_val) {
    21c0:	2804      	cmp	r0, #4
    21c2:	d00a      	beq.n	21da <boot_magic_compatible_check+0x1a>
    21c4:	2805      	cmp	r0, #5
    21c6:	d104      	bne.n	21d2 <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
    21c8:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
    21cc:	bf18      	it	ne
    21ce:	2001      	movne	r0, #1
    21d0:	4770      	bx	lr
        return tbl_val == val;
    21d2:	1a43      	subs	r3, r0, r1
    21d4:	4258      	negs	r0, r3
    21d6:	4158      	adcs	r0, r3
    21d8:	4770      	bx	lr
        return 1;
    21da:	2001      	movs	r0, #1
}
    21dc:	4770      	bx	lr

000021de <boot_trailer_sz>:
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    21de:	f44f 73c0 	mov.w	r3, #384	; 0x180
    21e2:	4358      	muls	r0, r3
}
    21e4:	3030      	adds	r0, #48	; 0x30
    21e6:	4770      	bx	lr

000021e8 <boot_status_entries>:
    if (fap->fa_id == FLASH_AREA_IMAGE_SCRATCH) {
    21e8:	7808      	ldrb	r0, [r1, #0]
    21ea:	2803      	cmp	r0, #3
    21ec:	d006      	beq.n	21fc <boot_status_entries+0x14>
    if (fap->fa_id == FLASH_AREA_IMAGE_PRIMARY(image_index) ||
    21ee:	3801      	subs	r0, #1
    return -1;
    21f0:	2801      	cmp	r0, #1
    21f2:	bf94      	ite	ls
    21f4:	f44f 70c0 	movls.w	r0, #384	; 0x180
    21f8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
    21fc:	4770      	bx	lr

000021fe <boot_status_off>:
{
    21fe:	b510      	push	{r4, lr}
    2200:	4604      	mov	r4, r0
    elem_sz = flash_area_align(fap);
    2202:	f001 ff75 	bl	40f0 <flash_area_align>
           BOOT_STATUS_MAX_ENTRIES * BOOT_STATUS_STATE_COUNT * min_write_sz;
    2206:	f44f 73c0 	mov.w	r3, #384	; 0x180
    220a:	4358      	muls	r0, r3
    assert(off_from_end <= fap->fa_size);
    220c:	68a3      	ldr	r3, [r4, #8]
           BOOT_MAX_ALIGN * 4                     +
    220e:	3030      	adds	r0, #48	; 0x30
    assert(off_from_end <= fap->fa_size);
    2210:	4283      	cmp	r3, r0
    2212:	d209      	bcs.n	2228 <boot_status_off+0x2a>
    2214:	f7fd ffbe 	bl	194 <hal_debugger_connected>
    2218:	b100      	cbz	r0, 221c <boot_status_off+0x1e>
    221a:	be01      	bkpt	0x0001
    221c:	2300      	movs	r3, #0
    221e:	461a      	mov	r2, r3
    2220:	4619      	mov	r1, r3
    2222:	4618      	mov	r0, r3
    2224:	f7ff f898 	bl	1358 <__assert_func>
}
    2228:	1a18      	subs	r0, r3, r0
    222a:	bd10      	pop	{r4, pc}

0000222c <boot_swap_info_off>:
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    222c:	6880      	ldr	r0, [r0, #8]
}
    222e:	3828      	subs	r0, #40	; 0x28
    2230:	4770      	bx	lr
	...

00002234 <boot_read_swap_state>:
{
    2234:	b530      	push	{r4, r5, lr}
    2236:	460c      	mov	r4, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
    2238:	6881      	ldr	r1, [r0, #8]
{
    223a:	b087      	sub	sp, #28
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    223c:	2310      	movs	r3, #16
    223e:	aa02      	add	r2, sp, #8
    2240:	3910      	subs	r1, #16
{
    2242:	4605      	mov	r5, r0
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
    2244:	f001 ff5c 	bl	4100 <flash_area_read_is_empty>
    if (rc < 0) {
    2248:	2800      	cmp	r0, #0
    224a:	db0d      	blt.n	2268 <boot_read_swap_state+0x34>
    if (rc == 1) {
    224c:	2801      	cmp	r0, #1
    224e:	d10d      	bne.n	226c <boot_read_swap_state+0x38>
        state->magic = BOOT_MAGIC_UNSET;
    2250:	2303      	movs	r3, #3
        state->magic = boot_magic_decode(magic);
    2252:	7023      	strb	r3, [r4, #0]
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    2254:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    2256:	2301      	movs	r3, #1
    2258:	f10d 0207 	add.w	r2, sp, #7
    225c:	3928      	subs	r1, #40	; 0x28
    225e:	4628      	mov	r0, r5
    2260:	f001 ff4e 	bl	4100 <flash_area_read_is_empty>
    if (rc < 0) {
    2264:	2800      	cmp	r0, #0
    2266:	da0b      	bge.n	2280 <boot_read_swap_state+0x4c>
        return BOOT_EFLASH;
    2268:	2001      	movs	r0, #1
    226a:	e034      	b.n	22d6 <boot_read_swap_state+0xa2>
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    226c:	2210      	movs	r2, #16
    226e:	4921      	ldr	r1, [pc, #132]	; (22f4 <boot_read_swap_state+0xc0>)
    2270:	a802      	add	r0, sp, #8
    2272:	f7ff fb73 	bl	195c <memcmp>
    return BOOT_MAGIC_BAD;
    2276:	2800      	cmp	r0, #0
    2278:	bf0c      	ite	eq
    227a:	2301      	moveq	r3, #1
    227c:	2302      	movne	r3, #2
    227e:	e7e8      	b.n	2252 <boot_read_swap_state+0x1e>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2280:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    2284:	2801      	cmp	r0, #1
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2286:	f003 020f 	and.w	r2, r3, #15
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    228a:	ea4f 1313 	mov.w	r3, r3, lsr #4
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    228e:	7062      	strb	r2, [r4, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
    2290:	7123      	strb	r3, [r4, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
    2292:	d001      	beq.n	2298 <boot_read_swap_state+0x64>
    2294:	2a04      	cmp	r2, #4
    2296:	d903      	bls.n	22a0 <boot_read_swap_state+0x6c>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
    2298:	2301      	movs	r3, #1
    229a:	7063      	strb	r3, [r4, #1]
        state->image_num = 0;
    229c:	2300      	movs	r3, #0
    229e:	7123      	strb	r3, [r4, #4]
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    22a0:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
    22a2:	2301      	movs	r3, #1
    22a4:	1ca2      	adds	r2, r4, #2
    22a6:	3920      	subs	r1, #32
    22a8:	4628      	mov	r0, r5
    22aa:	f001 ff29 	bl	4100 <flash_area_read_is_empty>
    if (rc < 0) {
    22ae:	2800      	cmp	r0, #0
    22b0:	dbda      	blt.n	2268 <boot_read_swap_state+0x34>
    if (rc == 1) {
    22b2:	2801      	cmp	r0, #1
    22b4:	d111      	bne.n	22da <boot_read_swap_state+0xa6>
        state->copy_done = BOOT_FLAG_UNSET;
    22b6:	2303      	movs	r3, #3
        state->copy_done = boot_flag_decode(state->copy_done);
    22b8:	70a3      	strb	r3, [r4, #2]
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    22ba:	68a9      	ldr	r1, [r5, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
    22bc:	2301      	movs	r3, #1
    22be:	1ce2      	adds	r2, r4, #3
    22c0:	3918      	subs	r1, #24
    22c2:	4628      	mov	r0, r5
    22c4:	f001 ff1c 	bl	4100 <flash_area_read_is_empty>
    if (rc < 0) {
    22c8:	2800      	cmp	r0, #0
    22ca:	dbcd      	blt.n	2268 <boot_read_swap_state+0x34>
    if (rc == 1) {
    22cc:	2801      	cmp	r0, #1
    22ce:	d10a      	bne.n	22e6 <boot_read_swap_state+0xb2>
        state->image_ok = BOOT_FLAG_UNSET;
    22d0:	2303      	movs	r3, #3
        state->image_ok = boot_flag_decode(state->image_ok);
    22d2:	70e3      	strb	r3, [r4, #3]
    return 0;
    22d4:	2000      	movs	r0, #0
}
    22d6:	b007      	add	sp, #28
    22d8:	bd30      	pop	{r4, r5, pc}
    if (flag != BOOT_FLAG_SET) {
    22da:	78a3      	ldrb	r3, [r4, #2]
    return BOOT_FLAG_SET;
    22dc:	2b01      	cmp	r3, #1
    22de:	bf14      	ite	ne
    22e0:	2302      	movne	r3, #2
    22e2:	2301      	moveq	r3, #1
    22e4:	e7e8      	b.n	22b8 <boot_read_swap_state+0x84>
    if (flag != BOOT_FLAG_SET) {
    22e6:	78e3      	ldrb	r3, [r4, #3]
    return BOOT_FLAG_SET;
    22e8:	2b01      	cmp	r3, #1
    22ea:	bf14      	ite	ne
    22ec:	2302      	movne	r3, #2
    22ee:	2301      	moveq	r3, #1
    22f0:	e7ef      	b.n	22d2 <boot_read_swap_state+0x9e>
    22f2:	bf00      	nop
    22f4:	00004a60 	.word	0x00004a60

000022f8 <boot_read_swap_state_by_id>:
{
    22f8:	b513      	push	{r0, r1, r4, lr}
    22fa:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
    22fc:	b2c0      	uxtb	r0, r0
    22fe:	a901      	add	r1, sp, #4
    2300:	f001 fe6c 	bl	3fdc <flash_area_open>
    if (rc != 0) {
    2304:	b928      	cbnz	r0, 2312 <boot_read_swap_state_by_id+0x1a>
    rc = boot_read_swap_state(fap, state);
    2306:	4621      	mov	r1, r4
    2308:	9801      	ldr	r0, [sp, #4]
    230a:	f7ff ff93 	bl	2234 <boot_read_swap_state>
}
    230e:	b002      	add	sp, #8
    2310:	bd10      	pop	{r4, pc}
        return BOOT_EFLASH;
    2312:	2001      	movs	r0, #1
    2314:	e7fb      	b.n	230e <boot_read_swap_state_by_id+0x16>
	...

00002318 <boot_read_swap_size>:
{
    2318:	b570      	push	{r4, r5, r6, lr}
    231a:	b086      	sub	sp, #24
    uint8_t areas[2] = {
    231c:	f240 1303 	movw	r3, #259	; 0x103
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    2320:	4e13      	ldr	r6, [pc, #76]	; (2370 <boot_read_swap_size+0x58>)
    uint8_t areas[2] = {
    2322:	f8ad 3000 	strh.w	r3, [sp]
{
    2326:	460d      	mov	r5, r1
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    2328:	2400      	movs	r4, #0
        rc = flash_area_open(areas[i], fap);
    232a:	a901      	add	r1, sp, #4
    232c:	f81d 0004 	ldrb.w	r0, [sp, r4]
    2330:	f001 fe54 	bl	3fdc <flash_area_open>
        if (rc != 0) {
    2334:	b980      	cbnz	r0, 2358 <boot_read_swap_size+0x40>
        off = boot_magic_off(*fap);
    2336:	9801      	ldr	r0, [sp, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
    2338:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(*fap, off, magic, BOOT_MAGIC_SZ);
    233a:	2310      	movs	r3, #16
    233c:	aa02      	add	r2, sp, #8
    233e:	3910      	subs	r1, #16
    2340:	f001 fea0 	bl	4084 <flash_area_read>
        if (rc != 0) {
    2344:	b940      	cbnz	r0, 2358 <boot_read_swap_size+0x40>
        if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
    2346:	2210      	movs	r2, #16
    2348:	4631      	mov	r1, r6
    234a:	a802      	add	r0, sp, #8
    234c:	f7ff fb06 	bl	195c <memcmp>
    2350:	b130      	cbz	r0, 2360 <boot_read_swap_size+0x48>
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    2352:	b11c      	cbz	r4, 235c <boot_read_swap_size+0x44>
    return -1;
    2354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2358:	b006      	add	sp, #24
    235a:	bd70      	pop	{r4, r5, r6, pc}
    for (i = 0; i < sizeof(areas) / sizeof(areas[0]); i++) {
    235c:	2401      	movs	r4, #1
    235e:	e7e4      	b.n	232a <boot_read_swap_size+0x12>
        off = boot_swap_size_off(fap);
    2360:	9801      	ldr	r0, [sp, #4]
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2362:	6881      	ldr	r1, [r0, #8]
        rc = flash_area_read(fap, off, swap_size, sizeof *swap_size);
    2364:	2304      	movs	r3, #4
    2366:	462a      	mov	r2, r5
    2368:	3930      	subs	r1, #48	; 0x30
    236a:	f001 fe8b 	bl	4084 <flash_area_read>
    236e:	e7f3      	b.n	2358 <boot_read_swap_size+0x40>
    2370:	00004a60 	.word	0x00004a60

00002374 <boot_write_magic>:
    return fap->fa_size - BOOT_MAGIC_SZ;
    2374:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    2376:	4a05      	ldr	r2, [pc, #20]	; (238c <boot_write_magic+0x18>)
{
    2378:	b508      	push	{r3, lr}
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
    237a:	3910      	subs	r1, #16
    237c:	2310      	movs	r3, #16
    237e:	f001 fe93 	bl	40a8 <flash_area_write>
}
    2382:	3000      	adds	r0, #0
    2384:	bf18      	it	ne
    2386:	2001      	movne	r0, #1
    2388:	bd08      	pop	{r3, pc}
    238a:	bf00      	nop
    238c:	00004a60 	.word	0x00004a60

00002390 <boot_write_copy_done>:
    return boot_write_trailer(fap, off, buf, 1);
}

int
boot_write_copy_done(const struct flash_area *fap)
{
    2390:	b507      	push	{r0, r1, r2, lr}
    return boot_image_ok_off(fap) - BOOT_MAX_ALIGN;
    2392:	6881      	ldr	r1, [r0, #8]
    const uint8_t buf[1] = { flag_val };
    2394:	aa02      	add	r2, sp, #8
    2396:	2301      	movs	r3, #1
    2398:	f802 3d04 	strb.w	r3, [r2, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
    239c:	3920      	subs	r1, #32
    239e:	f7ff fee1 	bl	2164 <boot_write_trailer>
    off = boot_copy_done_off(fap);
    BOOT_LOG_DBG("writing copy_done; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
}
    23a2:	b003      	add	sp, #12
    23a4:	f85d fb04 	ldr.w	pc, [sp], #4

000023a8 <boot_write_image_ok>:

int
boot_write_image_ok(const struct flash_area *fap)
{
    23a8:	b507      	push	{r0, r1, r2, lr}
    return boot_magic_off(fap) - BOOT_MAX_ALIGN;
    23aa:	6881      	ldr	r1, [r0, #8]
    const uint8_t buf[1] = { flag_val };
    23ac:	aa02      	add	r2, sp, #8
    23ae:	2301      	movs	r3, #1
    23b0:	f802 3d04 	strb.w	r3, [r2, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
    23b4:	3918      	subs	r1, #24
    23b6:	f7ff fed5 	bl	2164 <boot_write_trailer>
    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
}
    23ba:	b003      	add	sp, #12
    23bc:	f85d fb04 	ldr.w	pc, [sp], #4

000023c0 <boot_write_swap_info>:
                     uint8_t image_num)
{
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    23c0:	2a0e      	cmp	r2, #14
{
    23c2:	b507      	push	{r0, r1, r2, lr}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    23c4:	d909      	bls.n	23da <boot_write_swap_info+0x1a>
    23c6:	f7fd fee5 	bl	194 <hal_debugger_connected>
    23ca:	b100      	cbz	r0, 23ce <boot_write_swap_info+0xe>
    23cc:	be01      	bkpt	0x0001
    23ce:	2300      	movs	r3, #0
    23d0:	461a      	mov	r2, r3
    23d2:	4619      	mov	r1, r3
    23d4:	4618      	mov	r0, r3
    23d6:	f7fe ffbf 	bl	1358 <__assert_func>
    23da:	290e      	cmp	r1, #14
    23dc:	d8f3      	bhi.n	23c6 <boot_write_swap_info+0x6>
    23de:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    23e2:	aa02      	add	r2, sp, #8
    off = boot_swap_info_off(fap);
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    23e4:	2301      	movs	r3, #1
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
    23e6:	f802 1d01 	strb.w	r1, [r2, #-1]!
    return boot_copy_done_off(fap) - BOOT_MAX_ALIGN;
    23ea:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
    23ec:	3928      	subs	r1, #40	; 0x28
    23ee:	f7ff feb9 	bl	2164 <boot_write_trailer>
}
    23f2:	b003      	add	sp, #12
    23f4:	f85d fb04 	ldr.w	pc, [sp], #4

000023f8 <boot_write_swap_size>:

int
boot_write_swap_size(const struct flash_area *fap, uint32_t swap_size)
{
    23f8:	b507      	push	{r0, r1, r2, lr}
    23fa:	aa02      	add	r2, sp, #8

    off = boot_swap_size_off(fap);
    BOOT_LOG_DBG("writing swap_size; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)fap->fa_off + off);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    23fc:	2304      	movs	r3, #4
{
    23fe:	f842 1d04 	str.w	r1, [r2, #-4]!
    return boot_swap_info_off(fap) - BOOT_MAX_ALIGN;
    2402:	6881      	ldr	r1, [r0, #8]
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_size, 4);
    2404:	3930      	subs	r1, #48	; 0x30
    2406:	f7ff fead 	bl	2164 <boot_write_trailer>
}
    240a:	b003      	add	sp, #12
    240c:	f85d fb04 	ldr.w	pc, [sp], #4

00002410 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
    2410:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2414:	2001      	movs	r0, #1
    2416:	4669      	mov	r1, sp
    2418:	f7ff ff6e 	bl	22f8 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
    241c:	b118      	cbz	r0, 2426 <boot_swap_type_multi+0x16>
        return BOOT_SWAP_TYPE_PANIC;
    241e:	20ff      	movs	r0, #255	; 0xff
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
}
    2420:	b004      	add	sp, #16
    2422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2426:	a902      	add	r1, sp, #8
    2428:	2002      	movs	r0, #2
    242a:	f7ff ff65 	bl	22f8 <boot_read_swap_state_by_id>
    if (rc) {
    242e:	2800      	cmp	r0, #0
    2430:	d1f5      	bne.n	241e <boot_swap_type_multi+0xe>
        if (boot_magic_compatible_check(table->magic_primary_slot,
    2432:	f89d 6000 	ldrb.w	r6, [sp]
            boot_magic_compatible_check(table->magic_secondary_slot,
    2436:	f89d 7008 	ldrb.w	r7, [sp, #8]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    243a:	f89d 8003 	ldrb.w	r8, [sp, #3]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    243e:	f89d 900b 	ldrb.w	r9, [sp, #11]
                table->copy_done_primary_slot == primary_slot.copy_done)) {
    2442:	f89d a002 	ldrb.w	sl, [sp, #2]
    2446:	4d1d      	ldr	r5, [pc, #116]	; (24bc <boot_swap_type_multi+0xac>)
    2448:	4602      	mov	r2, r0
        if (boot_magic_compatible_check(table->magic_primary_slot,
    244a:	4631      	mov	r1, r6
    244c:	5ca8      	ldrb	r0, [r5, r2]
    244e:	18ac      	adds	r4, r5, r2
    2450:	f7ff feb6 	bl	21c0 <boot_magic_compatible_check>
    2454:	b1f8      	cbz	r0, 2496 <boot_swap_type_multi+0x86>
            boot_magic_compatible_check(table->magic_secondary_slot,
    2456:	4639      	mov	r1, r7
    2458:	7860      	ldrb	r0, [r4, #1]
    245a:	f7ff feb1 	bl	21c0 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
    245e:	b1d0      	cbz	r0, 2496 <boot_swap_type_multi+0x86>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2460:	78a3      	ldrb	r3, [r4, #2]
                                        secondary_slot.magic) &&
    2462:	2b04      	cmp	r3, #4
    2464:	d001      	beq.n	246a <boot_swap_type_multi+0x5a>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
    2466:	4543      	cmp	r3, r8
    2468:	d115      	bne.n	2496 <boot_swap_type_multi+0x86>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    246a:	78e3      	ldrb	r3, [r4, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
    246c:	2b04      	cmp	r3, #4
    246e:	d001      	beq.n	2474 <boot_swap_type_multi+0x64>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
    2470:	454b      	cmp	r3, r9
    2472:	d110      	bne.n	2496 <boot_swap_type_multi+0x86>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2474:	7923      	ldrb	r3, [r4, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
    2476:	2b04      	cmp	r3, #4
    2478:	d10b      	bne.n	2492 <boot_swap_type_multi+0x82>
            BOOT_LOG_INF("Swap type: %s",
    247a:	7963      	ldrb	r3, [r4, #5]
    247c:	2b02      	cmp	r3, #2
    247e:	d112      	bne.n	24a6 <boot_swap_type_multi+0x96>
    2480:	490f      	ldr	r1, [pc, #60]	; (24c0 <boot_swap_type_multi+0xb0>)
    2482:	4810      	ldr	r0, [pc, #64]	; (24c4 <boot_swap_type_multi+0xb4>)
    2484:	f001 fd76 	bl	3f74 <printf>
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
    2488:	7960      	ldrb	r0, [r4, #5]
    248a:	1e83      	subs	r3, r0, #2
    248c:	2b02      	cmp	r3, #2
    248e:	d9c7      	bls.n	2420 <boot_swap_type_multi+0x10>
    2490:	e7c5      	b.n	241e <boot_swap_type_multi+0xe>
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
    2492:	4553      	cmp	r3, sl
    2494:	d0f1      	beq.n	247a <boot_swap_type_multi+0x6a>
    2496:	3206      	adds	r2, #6
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
    2498:	2a12      	cmp	r2, #18
    249a:	d1d6      	bne.n	244a <boot_swap_type_multi+0x3a>
    BOOT_LOG_INF("Swap type: none");
    249c:	480a      	ldr	r0, [pc, #40]	; (24c8 <boot_swap_type_multi+0xb8>)
    249e:	f001 faef 	bl	3a80 <puts>
    return BOOT_SWAP_TYPE_NONE;
    24a2:	2001      	movs	r0, #1
    24a4:	e7bc      	b.n	2420 <boot_swap_type_multi+0x10>
            BOOT_LOG_INF("Swap type: %s",
    24a6:	2b03      	cmp	r3, #3
    24a8:	d005      	beq.n	24b6 <boot_swap_type_multi+0xa6>
    24aa:	4908      	ldr	r1, [pc, #32]	; (24cc <boot_swap_type_multi+0xbc>)
    24ac:	4a08      	ldr	r2, [pc, #32]	; (24d0 <boot_swap_type_multi+0xc0>)
    24ae:	2b04      	cmp	r3, #4
    24b0:	bf18      	it	ne
    24b2:	4611      	movne	r1, r2
    24b4:	e7e5      	b.n	2482 <boot_swap_type_multi+0x72>
    24b6:	4907      	ldr	r1, [pc, #28]	; (24d4 <boot_swap_type_multi+0xc4>)
    24b8:	e7e3      	b.n	2482 <boot_swap_type_multi+0x72>
    24ba:	bf00      	nop
    24bc:	00004a70 	.word	0x00004a70
    24c0:	00004a87 	.word	0x00004a87
    24c4:	00004aa5 	.word	0x00004aa5
    24c8:	00004aba 	.word	0x00004aba
    24cc:	00004a9e 	.word	0x00004a9e
    24d0:	00004a8c 	.word	0x00004a8c
    24d4:	00004a82 	.word	0x00004a82

000024d8 <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
    24d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    24da:	4606      	mov	r6, r0
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(0),
    24dc:	a902      	add	r1, sp, #8
    24de:	2002      	movs	r0, #2
    24e0:	f7ff ff0a 	bl	22f8 <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
    24e4:	4604      	mov	r4, r0
    24e6:	b938      	cbnz	r0, 24f8 <boot_set_pending+0x20>
        return rc;
    }

    switch (state_secondary_slot.magic) {
    24e8:	f89d 5008 	ldrb.w	r5, [sp, #8]
    24ec:	2d02      	cmp	r5, #2
    24ee:	d023      	beq.n	2538 <boot_set_pending+0x60>
    24f0:	2d03      	cmp	r5, #3
    24f2:	d004      	beq.n	24fe <boot_set_pending+0x26>
    24f4:	2d01      	cmp	r5, #1
    24f6:	d12c      	bne.n	2552 <boot_set_pending+0x7a>

    default:
        assert(0);
        return BOOT_EBADIMAGE;
    }
}
    24f8:	4620      	mov	r0, r4
    24fa:	b004      	add	sp, #16
    24fc:	bd70      	pop	{r4, r5, r6, pc}
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
    24fe:	a901      	add	r1, sp, #4
    2500:	2002      	movs	r0, #2
    2502:	f001 fd6b 	bl	3fdc <flash_area_open>
        if (rc != 0) {
    2506:	b108      	cbz	r0, 250c <boot_set_pending+0x34>
            rc = BOOT_EFLASH;
    2508:	2401      	movs	r4, #1
    250a:	e7f5      	b.n	24f8 <boot_set_pending+0x20>
            rc = boot_write_magic(fap);
    250c:	9801      	ldr	r0, [sp, #4]
    250e:	f7ff ff31 	bl	2374 <boot_write_magic>
        if (rc == 0 && permanent) {
    2512:	4604      	mov	r4, r0
    2514:	2800      	cmp	r0, #0
    2516:	d1ef      	bne.n	24f8 <boot_set_pending+0x20>
    2518:	b166      	cbz	r6, 2534 <boot_set_pending+0x5c>
            rc = boot_write_image_ok(fap);
    251a:	9801      	ldr	r0, [sp, #4]
    251c:	f7ff ff44 	bl	23a8 <boot_write_image_ok>
        if (rc == 0) {
    2520:	4604      	mov	r4, r0
    2522:	2800      	cmp	r0, #0
    2524:	d1e8      	bne.n	24f8 <boot_set_pending+0x20>
                swap_type = BOOT_SWAP_TYPE_PERM;
    2526:	4629      	mov	r1, r5
            rc = boot_write_swap_info(fap, swap_type, 0);
    2528:	2200      	movs	r2, #0
    252a:	9801      	ldr	r0, [sp, #4]
    252c:	f7ff ff48 	bl	23c0 <boot_write_swap_info>
    2530:	4604      	mov	r4, r0
    2532:	e7e1      	b.n	24f8 <boot_set_pending+0x20>
                swap_type = BOOT_SWAP_TYPE_TEST;
    2534:	2102      	movs	r1, #2
    2536:	e7f7      	b.n	2528 <boot_set_pending+0x50>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
    2538:	a901      	add	r1, sp, #4
    253a:	4628      	mov	r0, r5
    253c:	f001 fd4e 	bl	3fdc <flash_area_open>
        if (rc != 0) {
    2540:	2800      	cmp	r0, #0
    2542:	d1e1      	bne.n	2508 <boot_set_pending+0x30>
        flash_area_erase(fap, 0, fap->fa_size);
    2544:	9801      	ldr	r0, [sp, #4]
    2546:	4621      	mov	r1, r4
    2548:	6882      	ldr	r2, [r0, #8]
    254a:	f001 fdbf 	bl	40cc <flash_area_erase>
        return BOOT_EBADIMAGE;
    254e:	2403      	movs	r4, #3
    2550:	e7d2      	b.n	24f8 <boot_set_pending+0x20>
        assert(0);
    2552:	f7fd fe1f 	bl	194 <hal_debugger_connected>
    2556:	b100      	cbz	r0, 255a <boot_set_pending+0x82>
    2558:	be01      	bkpt	0x0001
    255a:	2300      	movs	r3, #0
    255c:	461a      	mov	r2, r3
    255e:	4619      	mov	r1, r3
    2560:	4618      	mov	r0, r3
    2562:	f7fe fef9 	bl	1358 <__assert_func>

00002566 <boot_read_image_size>:
 * the TLVs.
 */
#if !defined(MCUBOOT_OVERWRITE_ONLY) || defined(MCUBOOT_OVERWRITE_ONLY_FAST)
static int
boot_read_image_size(struct boot_loader_state *state, int slot, uint32_t *size)
{
    2566:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    2568:	4604      	mov	r4, r0

#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    256a:	2000      	movs	r0, #0
{
    256c:	460d      	mov	r5, r1
    256e:	4617      	mov	r7, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2570:	f000 ff86 	bl	3480 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    2574:	4669      	mov	r1, sp
    2576:	b2c0      	uxtb	r0, r0
    2578:	f001 fd30 	bl	3fdc <flash_area_open>
    if (rc != 0) {
    257c:	b118      	cbz	r0, 2586 <boot_read_image_size+0x20>
        rc = BOOT_EFLASH;
    257e:	2601      	movs	r6, #1
    rc = 0;

done:
    flash_area_close(fap);
    return rc;
}
    2580:	4630      	mov	r0, r6
    2582:	b003      	add	sp, #12
    2584:	bdf0      	pop	{r4, r5, r6, r7, pc}
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    2586:	232c      	movs	r3, #44	; 0x2c
    2588:	fb03 4505 	mla	r5, r3, r5, r4
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    258c:	9800      	ldr	r0, [sp, #0]
    off = BOOT_TLV_OFF(boot_img_hdr(state, slot));
    258e:	8929      	ldrh	r1, [r5, #8]
    2590:	68eb      	ldr	r3, [r5, #12]
    2592:	18cc      	adds	r4, r1, r3
    if (flash_area_read(fap, off, &info, sizeof(info))) {
    2594:	2304      	movs	r3, #4
    2596:	eb0d 0203 	add.w	r2, sp, r3
    259a:	4621      	mov	r1, r4
    259c:	f001 fd72 	bl	4084 <flash_area_read>
    25a0:	4606      	mov	r6, r0
    25a2:	2800      	cmp	r0, #0
    25a4:	d1eb      	bne.n	257e <boot_read_image_size+0x18>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    25a6:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    protect_tlv_size = boot_img_hdr(state, slot)->ih_protect_tlv_size;
    25aa:	896d      	ldrh	r5, [r5, #10]
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    25ac:	f646 1308 	movw	r3, #26888	; 0x6908
    25b0:	429a      	cmp	r2, r3
    25b2:	d11a      	bne.n	25ea <boot_read_image_size+0x84>
        if (protect_tlv_size != info.it_tlv_tot) {
    25b4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    25b8:	42ab      	cmp	r3, r5
    25ba:	d001      	beq.n	25c0 <boot_read_image_size+0x5a>
            rc = BOOT_EBADIMAGE;
    25bc:	2603      	movs	r6, #3
    25be:	e7df      	b.n	2580 <boot_read_image_size+0x1a>
        if (flash_area_read(fap, off + info.it_tlv_tot, &info, sizeof(info))) {
    25c0:	2304      	movs	r3, #4
    25c2:	eb0d 0203 	add.w	r2, sp, r3
    25c6:	1961      	adds	r1, r4, r5
    25c8:	9800      	ldr	r0, [sp, #0]
    25ca:	f001 fd5b 	bl	4084 <flash_area_read>
    25ce:	2800      	cmp	r0, #0
    25d0:	d1d5      	bne.n	257e <boot_read_image_size+0x18>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    25d2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    25d6:	f646 1307 	movw	r3, #26887	; 0x6907
    25da:	429a      	cmp	r2, r3
    25dc:	d1ee      	bne.n	25bc <boot_read_image_size+0x56>
    *size = off + protect_tlv_size + info.it_tlv_tot;
    25de:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    25e2:	4429      	add	r1, r5
    25e4:	4421      	add	r1, r4
    25e6:	6039      	str	r1, [r7, #0]
    return rc;
    25e8:	e7ca      	b.n	2580 <boot_read_image_size+0x1a>
    } else if (protect_tlv_size != 0) {
    25ea:	2d00      	cmp	r5, #0
    25ec:	d0f1      	beq.n	25d2 <boot_read_image_size+0x6c>
    25ee:	e7e5      	b.n	25bc <boot_read_image_size+0x56>

000025f0 <boot_read_image_headers>:
#endif /* !MCUBOOT_OVERWRITE_ONLY */

static int
boot_read_image_headers(struct boot_loader_state *state, bool require_all,
        struct boot_status *bs)
{
    25f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;
    int i;

    for (i = 0; i < BOOT_NUM_SLOTS; i++) {
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    25f2:	4613      	mov	r3, r2
{
    25f4:	460f      	mov	r7, r1
    25f6:	4616      	mov	r6, r2
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    25f8:	2100      	movs	r1, #0
    25fa:	4602      	mov	r2, r0
{
    25fc:	4605      	mov	r5, r0
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    25fe:	f000 fb4e 	bl	2c9e <boot_read_image_header>
        if (rc != 0) {
    2602:	4604      	mov	r4, r0
    2604:	b950      	cbnz	r0, 261c <boot_read_image_headers+0x2c>
        rc = boot_read_image_header(state, i, boot_img_hdr(state, i), bs);
    2606:	4633      	mov	r3, r6
    2608:	f105 022c 	add.w	r2, r5, #44	; 0x2c
    260c:	2101      	movs	r1, #1
    260e:	4628      	mov	r0, r5
    2610:	f000 fb45 	bl	2c9e <boot_read_image_header>
        if (rc != 0) {
    2614:	b110      	cbz	r0, 261c <boot_read_image_headers+0x2c>
             * if at least the first slot's header was read successfully,
             * then the boot loader can attempt a boot.
             *
             * Failure to read any headers is a fatal error.
             */
            if (i > 0 && !require_all) {
    2616:	2f00      	cmp	r7, #0
    2618:	bf18      	it	ne
    261a:	4604      	movne	r4, r0
            }
        }
    }

    return 0;
}
    261c:	4620      	mov	r0, r4
    261e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002620 <boot_validate_slot.isra.3.constprop.5>:
 *         0 if image was successfully validated
 *         1 if no bootloable image was found
 *         -1 on any errors
 */
static int
boot_validate_slot(struct boot_loader_state *state, int slot,
    2620:	b530      	push	{r4, r5, lr}
    const struct flash_area *fap;
    struct image_header *hdr;
    int area_id;
    int rc;

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2622:	2101      	movs	r1, #1
boot_validate_slot(struct boot_loader_state *state, int slot,
    2624:	b089      	sub	sp, #36	; 0x24
    2626:	4604      	mov	r4, r0
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2628:	2000      	movs	r0, #0
    262a:	f000 ff29 	bl	3480 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    262e:	a906      	add	r1, sp, #24
    2630:	b2c0      	uxtb	r0, r0
    2632:	f001 fcd3 	bl	3fdc <flash_area_open>
    if (rc != 0) {
    2636:	2800      	cmp	r0, #0
    2638:	d146      	bne.n	26c8 <boot_validate_slot.isra.3.constprop.5+0xa8>
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    263a:	2101      	movs	r1, #1
    263c:	f000 ff20 	bl	3480 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    2640:	a907      	add	r1, sp, #28
    2642:	b2c0      	uxtb	r0, r0
     ((swap_type) == BOOT_SWAP_TYPE_PERM))

static inline struct image_header*
boot_img_hdr(struct boot_loader_state *state, size_t slot)
{
    return &BOOT_IMG(state, slot).hdr;
    2644:	f104 052c 	add.w	r5, r4, #44	; 0x2c
    2648:	f001 fcc8 	bl	3fdc <flash_area_open>
    if (rc != 0) {
    264c:	b128      	cbz	r0, 265a <boot_validate_slot.isra.3.constprop.5+0x3a>
        return -1;
    }

    hdr = boot_img_hdr(state, slot);
    if (boot_check_header_erased(state, slot) == 0 ||
        (hdr->ih_flags & IMAGE_F_NON_BOOTABLE)) {
    264e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    if (boot_check_header_erased(state, slot) == 0 ||
    2650:	f011 0110 	ands.w	r1, r1, #16
    2654:	d010      	beq.n	2678 <boot_validate_slot.isra.3.constprop.5+0x58>
        /* No bootable image in slot; continue booting from the primary slot. */
        rc = 1;
    2656:	2001      	movs	r0, #1
    2658:	e034      	b.n	26c4 <boot_validate_slot.isra.3.constprop.5+0xa4>
    erased_val = flash_area_erased_val(fap);
    265a:	9807      	ldr	r0, [sp, #28]
    265c:	f001 fd4b 	bl	40f6 <flash_area_erased_val>
    2660:	f104 032b 	add.w	r3, r4, #43	; 0x2b
    2664:	b2c0      	uxtb	r0, r0
    2666:	f104 022f 	add.w	r2, r4, #47	; 0x2f
    for (i = 0; i < len; i++) {
    266a:	4293      	cmp	r3, r2
    266c:	d0f3      	beq.n	2656 <boot_validate_slot.isra.3.constprop.5+0x36>
        if (val != p[i]) {
    266e:	f813 1f01 	ldrb.w	r1, [r3, #1]!
    2672:	4281      	cmp	r1, r0
    2674:	d0f9      	beq.n	266a <boot_validate_slot.isra.3.constprop.5+0x4a>
    2676:	e7ea      	b.n	264e <boot_validate_slot.isra.3.constprop.5+0x2e>
    if (hdr->ih_magic != IMAGE_MAGIC) {
    2678:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    267a:	4b15      	ldr	r3, [pc, #84]	; (26d0 <boot_validate_slot.isra.3.constprop.5+0xb0>)
    267c:	429a      	cmp	r2, r3
    267e:	d009      	beq.n	2694 <boot_validate_slot.isra.3.constprop.5+0x74>
    }
#endif

    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
        if (slot != BOOT_PRIMARY_SLOT) {
            flash_area_erase(fap, 0, fap->fa_size);
    2680:	9806      	ldr	r0, [sp, #24]
    2682:	2100      	movs	r1, #0
    2684:	6882      	ldr	r2, [r0, #8]
    2686:	f001 fd21 	bl	40cc <flash_area_erase>
            /* Image in the secondary slot is invalid. Erase the image and
             * continue booting from the primary slot.
             */
        }
#if !defined(__BOOTSIM__)
        BOOT_LOG_ERR("Image in the %s slot is not valid!",
    268a:	4912      	ldr	r1, [pc, #72]	; (26d4 <boot_validate_slot.isra.3.constprop.5+0xb4>)
    268c:	4812      	ldr	r0, [pc, #72]	; (26d8 <boot_validate_slot.isra.3.constprop.5+0xb8>)
    268e:	f001 fc71 	bl	3f74 <printf>
    2692:	e7e0      	b.n	2656 <boot_validate_slot.isra.3.constprop.5+0x36>
    if (!boot_u32_safe_add(&size, hdr->ih_img_size, hdr->ih_hdr_size)) {
    2694:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
    2696:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    if (a > UINT32_MAX - b) {
    2698:	43c3      	mvns	r3, r0
    269a:	429a      	cmp	r2, r3
    269c:	d8f0      	bhi.n	2680 <boot_validate_slot.isra.3.constprop.5+0x60>
    if (!boot_is_header_valid(hdr, fap) || boot_image_check(state, hdr, fap, bs)) {
    269e:	9b06      	ldr	r3, [sp, #24]
        *dest = a + b;
    26a0:	4402      	add	r2, r0
    if (size >= fap->fa_size) {
    26a2:	6898      	ldr	r0, [r3, #8]
    26a4:	4290      	cmp	r0, r2
    26a6:	d9eb      	bls.n	2680 <boot_validate_slot.isra.3.constprop.5+0x60>
    if (bootutil_img_validate(BOOT_CURR_ENC(state), image_index, hdr, fap, tmpbuf,
    26a8:	f44f 7280 	mov.w	r2, #256	; 0x100
    26ac:	9201      	str	r2, [sp, #4]
    26ae:	4a0b      	ldr	r2, [pc, #44]	; (26dc <boot_validate_slot.isra.3.constprop.5+0xbc>)
    26b0:	9200      	str	r2, [sp, #0]
    26b2:	e9cd 1103 	strd	r1, r1, [sp, #12]
    26b6:	9102      	str	r1, [sp, #8]
    26b8:	462a      	mov	r2, r5
    26ba:	4608      	mov	r0, r1
    26bc:	f000 fdc6 	bl	324c <bootutil_img_validate>
    26c0:	2800      	cmp	r0, #0
    26c2:	d1dd      	bne.n	2680 <boot_validate_slot.isra.3.constprop.5+0x60>
    rc = 0;

out:
    flash_area_close(fap);
    return rc;
}
    26c4:	b009      	add	sp, #36	; 0x24
    26c6:	bd30      	pop	{r4, r5, pc}
        return -1;
    26c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    26cc:	e7fa      	b.n	26c4 <boot_validate_slot.isra.3.constprop.5+0xa4>
    26ce:	bf00      	nop
    26d0:	96f3b83d 	.word	0x96f3b83d
    26d4:	00004ad0 	.word	0x00004ad0
    26d8:	00004ada 	.word	0x00004ada
    26dc:	20006280 	.word	0x20006280

000026e0 <boot_read_sectors>:
{
    26e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    26e2:	ad02      	add	r5, sp, #8
    26e4:	2680      	movs	r6, #128	; 0x80
    26e6:	f845 6d04 	str.w	r6, [r5, #-4]!
{
    26ea:	4604      	mov	r4, r0
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    26ec:	6a42      	ldr	r2, [r0, #36]	; 0x24
    26ee:	4629      	mov	r1, r5
    26f0:	2001      	movs	r0, #1
    26f2:	f001 fc8b 	bl	400c <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_PRIMARY_SLOT).num_sectors = (size_t)num_sectors;
    26f6:	9b01      	ldr	r3, [sp, #4]
    26f8:	62a3      	str	r3, [r4, #40]	; 0x28
    if (rc != 0) {
    26fa:	b118      	cbz	r0, 2704 <boot_read_sectors+0x24>
        return BOOT_EFLASH;
    26fc:	2501      	movs	r5, #1
}
    26fe:	4628      	mov	r0, r5
    2700:	b002      	add	sp, #8
    2702:	bd70      	pop	{r4, r5, r6, pc}
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    2704:	6d22      	ldr	r2, [r4, #80]	; 0x50
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    2706:	9601      	str	r6, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    2708:	4629      	mov	r1, r5
    270a:	2002      	movs	r0, #2
    270c:	f001 fc7e 	bl	400c <flash_area_to_sectors>
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).num_sectors = (size_t)num_sectors;
    2710:	9b01      	ldr	r3, [sp, #4]
    2712:	6563      	str	r3, [r4, #84]	; 0x54
    if (rc != 0) {
    2714:	2800      	cmp	r0, #0
    2716:	d1f1      	bne.n	26fc <boot_read_sectors+0x1c>
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    2718:	4629      	mov	r1, r5
    271a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
    int num_sectors = BOOT_MAX_IMG_SECTORS;
    271c:	9601      	str	r6, [sp, #4]
        rc = flash_area_to_sectors(flash_area, &num_sectors,
    271e:	2003      	movs	r0, #3
    2720:	f001 fc74 	bl	400c <flash_area_to_sectors>
        state->scratch.num_sectors = (size_t)num_sectors;
    2724:	9b01      	ldr	r3, [sp, #4]
    2726:	6623      	str	r3, [r4, #96]	; 0x60
    if (rc != 0) {
    2728:	4605      	mov	r5, r0
    272a:	2800      	cmp	r0, #0
    272c:	d1e6      	bne.n	26fc <boot_read_sectors+0x1c>
    elem_sz = flash_area_align(BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT));
    272e:	6a20      	ldr	r0, [r4, #32]
    2730:	f001 fcde 	bl	40f0 <flash_area_align>
    2734:	4606      	mov	r6, r0
    align = flash_area_align(BOOT_SCRATCH_AREA(state));
    2736:	6da0      	ldr	r0, [r4, #88]	; 0x58
    2738:	f001 fcda 	bl	40f0 <flash_area_align>
    BOOT_WRITE_SZ(state) = boot_write_sz(state);
    273c:	42b0      	cmp	r0, r6
    273e:	bf2c      	ite	cs
    2740:	66a0      	strcs	r0, [r4, #104]	; 0x68
    2742:	66a6      	strcc	r6, [r4, #104]	; 0x68
    2744:	e7db      	b.n	26fe <boot_read_sectors+0x1e>

00002746 <boot_status_reset>:
    bs->idx = BOOT_STATUS_IDX_0;
    2746:	2301      	movs	r3, #1
    2748:	6003      	str	r3, [r0, #0]
    274a:	f103 2301 	add.w	r3, r3, #16777472	; 0x1000100
    274e:	6043      	str	r3, [r0, #4]
    bs->swap_type = BOOT_SWAP_TYPE_NONE;
    2750:	2300      	movs	r3, #0
    bs->swap_size = 0;
    2752:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    2756:	4770      	bx	lr

00002758 <boot_status_is_reset>:
            bs->idx == BOOT_STATUS_IDX_0 &&
    2758:	7943      	ldrb	r3, [r0, #5]
    275a:	2b01      	cmp	r3, #1
    275c:	d107      	bne.n	276e <boot_status_is_reset+0x16>
    return (bs->op == BOOT_STATUS_OP_MOVE &&
    275e:	6803      	ldr	r3, [r0, #0]
    2760:	2b01      	cmp	r3, #1
    2762:	d104      	bne.n	276e <boot_status_is_reset+0x16>
            bs->idx == BOOT_STATUS_IDX_0 &&
    2764:	7900      	ldrb	r0, [r0, #4]
    2766:	1e43      	subs	r3, r0, #1
    2768:	4258      	negs	r0, r3
    276a:	4158      	adcs	r0, r3
    276c:	4770      	bx	lr
    276e:	2000      	movs	r0, #0
}
    2770:	4770      	bx	lr
	...

00002774 <boot_swap_image>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
boot_swap_image(struct boot_loader_state *state, struct boot_status *bs)
{
    2774:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2776:	460d      	mov	r5, r1
    2778:	4604      	mov	r4, r0
    uint8_t image_index;
    int rc;

    /* FIXME: just do this if asked by user? */

    size = copy_size = 0;
    277a:	2100      	movs	r1, #0
    image_index = BOOT_CURR_IMG(state);

    if (boot_status_is_reset(bs)) {
    277c:	4628      	mov	r0, r5
    size = copy_size = 0;
    277e:	e9cd 1100 	strd	r1, r1, [sp]
    if (boot_status_is_reset(bs)) {
    2782:	f7ff ffe9 	bl	2758 <boot_status_is_reset>
    2786:	b358      	cbz	r0, 27e0 <boot_swap_image+0x6c>
        /*
         * No swap ever happened, so need to find the largest image which
         * will be used to determine the amount of sectors to swap.
         */
        hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    2788:	4e1a      	ldr	r6, [pc, #104]	; (27f4 <boot_swap_image+0x80>)
    278a:	6822      	ldr	r2, [r4, #0]
    278c:	42b2      	cmp	r2, r6
    278e:	d10e      	bne.n	27ae <boot_swap_image+0x3a>
            rc = boot_read_image_size(state, BOOT_PRIMARY_SLOT, &copy_size);
    2790:	aa01      	add	r2, sp, #4
    2792:	4620      	mov	r0, r4
    2794:	f7ff fee7 	bl	2566 <boot_read_image_size>
            assert(rc == 0);
    2798:	b148      	cbz	r0, 27ae <boot_swap_image+0x3a>
    279a:	f7fd fcfb 	bl	194 <hal_debugger_connected>
    279e:	b100      	cbz	r0, 27a2 <boot_swap_image+0x2e>
    27a0:	be01      	bkpt	0x0001
    27a2:	2300      	movs	r3, #0
    27a4:	461a      	mov	r2, r3
    27a6:	4619      	mov	r1, r3
    27a8:	4618      	mov	r0, r3
    27aa:	f7fe fdd5 	bl	1358 <__assert_func>
            memset(bs->enckey[0], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        hdr = boot_img_hdr(state, BOOT_SECONDARY_SLOT);
        if (hdr->ih_magic == IMAGE_MAGIC) {
    27ae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    27b0:	42b3      	cmp	r3, r6
    27b2:	d106      	bne.n	27c2 <boot_swap_image+0x4e>
            rc = boot_read_image_size(state, BOOT_SECONDARY_SLOT, &size);
    27b4:	466a      	mov	r2, sp
    27b6:	2101      	movs	r1, #1
    27b8:	4620      	mov	r0, r4
    27ba:	f7ff fed4 	bl	2566 <boot_read_image_size>
            assert(rc == 0);
    27be:	2800      	cmp	r0, #0
    27c0:	d1eb      	bne.n	279a <boot_swap_image+0x26>
        } else {
            memset(bs->enckey[1], 0xff, BOOT_ENC_KEY_SIZE);
        }
#endif

        if (size > copy_size) {
    27c2:	e9dd 3200 	ldrd	r3, r2, [sp]
    27c6:	4293      	cmp	r3, r2
            copy_size = size;
    27c8:	bf88      	it	hi
    27ca:	9301      	strhi	r3, [sp, #4]
        }

        bs->swap_size = copy_size;
    27cc:	9b01      	ldr	r3, [sp, #4]
    27ce:	60ab      	str	r3, [r5, #8]
            }
        }
#endif
    }

    swap_run(state, bs, copy_size);
    27d0:	4620      	mov	r0, r4
    27d2:	9a01      	ldr	r2, [sp, #4]
    27d4:	4629      	mov	r1, r5
    27d6:	f000 fbd7 	bl	2f88 <swap_run>
                     boot_status_fails);
    }
#endif

    return 0;
}
    27da:	2000      	movs	r0, #0
    27dc:	b002      	add	sp, #8
    27de:	bd70      	pop	{r4, r5, r6, pc}
        rc = boot_read_swap_size(image_index, &bs->swap_size);
    27e0:	f105 0108 	add.w	r1, r5, #8
    27e4:	f7ff fd98 	bl	2318 <boot_read_swap_size>
        assert(rc == 0);
    27e8:	2800      	cmp	r0, #0
    27ea:	d1d6      	bne.n	279a <boot_swap_image+0x26>
        copy_size = bs->swap_size;
    27ec:	68ab      	ldr	r3, [r5, #8]
    27ee:	9301      	str	r3, [sp, #4]
    27f0:	e7ee      	b.n	27d0 <boot_swap_image+0x5c>
    27f2:	bf00      	nop
    27f4:	96f3b83d 	.word	0x96f3b83d

000027f8 <boot_write_status>:
{
    27f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (bs->use_scratch) {
    27fa:	798b      	ldrb	r3, [r1, #6]
    27fc:	2b00      	cmp	r3, #0
{
    27fe:	4606      	mov	r6, r0
    2800:	460d      	mov	r5, r1
    rc = flash_area_open(area_id, &fap);
    2802:	bf14      	ite	ne
    2804:	2003      	movne	r0, #3
    2806:	2001      	moveq	r0, #1
    2808:	a901      	add	r1, sp, #4
    280a:	f001 fbe7 	bl	3fdc <flash_area_open>
    if (rc != 0) {
    280e:	bb18      	cbnz	r0, 2858 <boot_write_status+0x60>
    off = boot_status_off(fap) +
    2810:	9801      	ldr	r0, [sp, #4]
    2812:	f7ff fcf4 	bl	21fe <boot_status_off>
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    2816:	6eb1      	ldr	r1, [r6, #104]	; 0x68
    off = boot_status_off(fap) +
    2818:	4604      	mov	r4, r0
          boot_status_internal_off(bs, BOOT_WRITE_SZ(state));
    281a:	4628      	mov	r0, r5
    281c:	f000 faaa 	bl	2d74 <boot_status_internal_off>
    off = boot_status_off(fap) +
    2820:	4404      	add	r4, r0
    align = flash_area_align(fap);
    2822:	9801      	ldr	r0, [sp, #4]
    2824:	f001 fc64 	bl	40f0 <flash_area_align>
    2828:	4606      	mov	r6, r0
    erased_val = flash_area_erased_val(fap);
    282a:	9801      	ldr	r0, [sp, #4]
    282c:	f001 fc63 	bl	40f6 <flash_area_erased_val>
    memset(buf, erased_val, BOOT_MAX_ALIGN);
    2830:	2208      	movs	r2, #8
    2832:	b2c1      	uxtb	r1, r0
    2834:	eb0d 0002 	add.w	r0, sp, r2
    2838:	f7ff f8c1 	bl	19be <memset>
    buf[0] = bs->state;
    283c:	792b      	ldrb	r3, [r5, #4]
    283e:	f88d 3008 	strb.w	r3, [sp, #8]
    rc = flash_area_write(fap, off, buf, align);
    2842:	aa02      	add	r2, sp, #8
    2844:	4633      	mov	r3, r6
    2846:	4621      	mov	r1, r4
    2848:	9801      	ldr	r0, [sp, #4]
    284a:	f001 fc2d 	bl	40a8 <flash_area_write>
    if (rc != 0) {
    284e:	3000      	adds	r0, #0
    2850:	bf18      	it	ne
    2852:	2001      	movne	r0, #1
}
    2854:	b004      	add	sp, #16
    2856:	bd70      	pop	{r4, r5, r6, pc}
        rc = BOOT_EFLASH;
    2858:	2001      	movs	r0, #1
    return rc;
    285a:	e7fb      	b.n	2854 <boot_write_status+0x5c>

0000285c <boot_erase_region>:
    return flash_area_erase(fap, off, sz);
    285c:	f001 bc36 	b.w	40cc <flash_area_erase>

00002860 <boot_copy_region>:
{
    2860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2864:	9e09      	ldr	r6, [sp, #36]	; 0x24
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    2866:	4f12      	ldr	r7, [pc, #72]	; (28b0 <boot_copy_region+0x50>)
{
    2868:	4688      	mov	r8, r1
    286a:	4691      	mov	r9, r2
    286c:	469a      	mov	sl, r3
    bytes_copied = 0;
    286e:	2400      	movs	r4, #0
    while (bytes_copied < sz) {
    2870:	42b4      	cmp	r4, r6
    2872:	d301      	bcc.n	2878 <boot_copy_region+0x18>
    return 0;
    2874:	2000      	movs	r0, #0
    2876:	e00e      	b.n	2896 <boot_copy_region+0x36>
        if (sz - bytes_copied > sizeof buf) {
    2878:	1b35      	subs	r5, r6, r4
    287a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    287e:	bf28      	it	cs
    2880:	f44f 6580 	movcs.w	r5, #1024	; 0x400
        rc = flash_area_read(fap_src, off_src + bytes_copied, buf, chunk_sz);
    2884:	462b      	mov	r3, r5
    2886:	4a0a      	ldr	r2, [pc, #40]	; (28b0 <boot_copy_region+0x50>)
    2888:	eb04 010a 	add.w	r1, r4, sl
    288c:	4640      	mov	r0, r8
    288e:	f001 fbf9 	bl	4084 <flash_area_read>
        if (rc != 0) {
    2892:	b110      	cbz	r0, 289a <boot_copy_region+0x3a>
            return BOOT_EFLASH;
    2894:	2001      	movs	r0, #1
}
    2896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = flash_area_write(fap_dst, off_dst + bytes_copied, buf, chunk_sz);
    289a:	9908      	ldr	r1, [sp, #32]
    289c:	462b      	mov	r3, r5
    289e:	463a      	mov	r2, r7
    28a0:	1861      	adds	r1, r4, r1
    28a2:	4648      	mov	r0, r9
    28a4:	f001 fc00 	bl	40a8 <flash_area_write>
        if (rc != 0) {
    28a8:	2800      	cmp	r0, #0
    28aa:	d1f3      	bne.n	2894 <boot_copy_region+0x34>
        bytes_copied += chunk_sz;
    28ac:	442c      	add	r4, r5
    28ae:	e7df      	b.n	2870 <boot_copy_region+0x10>
    28b0:	20004c80 	.word	0x20004c80

000028b4 <context_boot_go>:
    }
}

int
context_boot_go(struct boot_loader_state *state, struct boot_rsp *rsp)
{
    28b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    TARGET_STATIC boot_sector_t secondary_slot_sectors[BOOT_IMAGE_NUMBER][BOOT_MAX_IMG_SECTORS];
#if MCUBOOT_SWAP_USING_SCRATCH
    TARGET_STATIC boot_sector_t scratch_sectors[BOOT_MAX_IMG_SECTORS];
#endif

    memset(state, 0, sizeof(struct boot_loader_state));
    28b6:	226c      	movs	r2, #108	; 0x6c
{
    28b8:	4604      	mov	r4, r0
    28ba:	b085      	sub	sp, #20
    28bc:	460f      	mov	r7, r1
    memset(state, 0, sizeof(struct boot_loader_state));
    28be:	2100      	movs	r1, #0
    28c0:	f7ff f87d 	bl	19be <memset>
        boot_enc_zeroize(BOOT_CURR_ENC(state));
#endif

        image_index = BOOT_CURR_IMG(state);

        BOOT_IMG(state, BOOT_PRIMARY_SLOT).sectors =
    28c4:	4b7d      	ldr	r3, [pc, #500]	; (2abc <context_boot_go+0x208>)
    28c6:	6263      	str	r3, [r4, #36]	; 0x24
            primary_slot_sectors[image_index];
        BOOT_IMG(state, BOOT_SECONDARY_SLOT).sectors =
    28c8:	4b7d      	ldr	r3, [pc, #500]	; (2ac0 <context_boot_go+0x20c>)
    28ca:	6523      	str	r3, [r4, #80]	; 0x50

        /* Open primary and secondary image areas for the duration
         * of this call.
         */
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    28cc:	2100      	movs	r1, #0
        state->scratch.sectors = scratch_sectors;
    28ce:	4b7d      	ldr	r3, [pc, #500]	; (2ac4 <context_boot_go+0x210>)
    28d0:	65e3      	str	r3, [r4, #92]	; 0x5c
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    28d2:	4608      	mov	r0, r1
    28d4:	f000 fdd4 	bl	3480 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    28d8:	f104 0120 	add.w	r1, r4, #32
    28dc:	b2c0      	uxtb	r0, r0
    28de:	f001 fb7d 	bl	3fdc <flash_area_open>
            assert(rc == 0);
    28e2:	b978      	cbnz	r0, 2904 <context_boot_go+0x50>
            fa_id = flash_area_id_from_multi_image_slot(image_index, slot);
    28e4:	2101      	movs	r1, #1
    28e6:	f000 fdcb 	bl	3480 <flash_area_id_from_multi_image_slot>
            rc = flash_area_open(fa_id, &BOOT_IMG_AREA(state, slot));
    28ea:	f104 014c 	add.w	r1, r4, #76	; 0x4c
    28ee:	b2c0      	uxtb	r0, r0
    28f0:	f001 fb74 	bl	3fdc <flash_area_open>
            assert(rc == 0);
    28f4:	b930      	cbnz	r0, 2904 <context_boot_go+0x50>
        }
#if MCUBOOT_SWAP_USING_SCRATCH
        rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH,
    28f6:	f104 0158 	add.w	r1, r4, #88	; 0x58
    28fa:	2003      	movs	r0, #3
    28fc:	f001 fb6e 	bl	3fdc <flash_area_open>
                             &BOOT_SCRATCH_AREA(state));
        assert(rc == 0);
    2900:	4605      	mov	r5, r0
    2902:	b148      	cbz	r0, 2918 <context_boot_go+0x64>
            assert(rc == 0);
    2904:	f7fd fc46 	bl	194 <hal_debugger_connected>
    2908:	b100      	cbz	r0, 290c <context_boot_go+0x58>
    290a:	be01      	bkpt	0x0001
    290c:	2300      	movs	r3, #0
    290e:	461a      	mov	r2, r3
    2910:	4619      	mov	r1, r3
    2912:	4618      	mov	r0, r3
    2914:	f7fe fd20 	bl	1358 <__assert_func>
    rc = boot_read_sectors(state);
    2918:	4620      	mov	r0, r4
    291a:	f7ff fee1 	bl	26e0 <boot_read_sectors>
    if (rc != 0) {
    291e:	b138      	cbz	r0, 2930 <context_boot_go+0x7c>
        BOOT_LOG_WRN("Failed reading sectors; BOOT_MAX_IMG_SECTORS=%d"
    2920:	4869      	ldr	r0, [pc, #420]	; (2ac8 <context_boot_go+0x214>)
    2922:	2180      	movs	r1, #128	; 0x80
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
    2924:	f001 fb26 	bl	3f74 <printf>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_NONE;
    2928:	2301      	movs	r3, #1
                BOOT_SWAP_TYPE(state) = bs->swap_type;
    292a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    292e:	e063      	b.n	29f8 <context_boot_go+0x144>
    rc = boot_read_image_headers(state, false, NULL);
    2930:	462a      	mov	r2, r5
    2932:	4629      	mov	r1, r5
    2934:	4620      	mov	r0, r4
    2936:	f7ff fe5b 	bl	25f0 <boot_read_image_headers>
    if (rc != 0) {
    293a:	b110      	cbz	r0, 2942 <context_boot_go+0x8e>
        BOOT_LOG_WRN("Failed reading image headers; Image=%u",
    293c:	4629      	mov	r1, r5
    293e:	4863      	ldr	r0, [pc, #396]	; (2acc <context_boot_go+0x218>)
    2940:	e7f0      	b.n	2924 <context_boot_go+0x70>
    if (boot_slots_compatible(state)) {
    2942:	4620      	mov	r0, r4
    2944:	f000 fa22 	bl	2d8c <boot_slots_compatible>
    2948:	2800      	cmp	r0, #0
    294a:	d0ed      	beq.n	2928 <context_boot_go+0x74>
        boot_status_reset(bs);
    294c:	4668      	mov	r0, sp
    294e:	f7ff fefa 	bl	2746 <boot_status_reset>
        rc = swap_read_status(state, bs);
    2952:	4669      	mov	r1, sp
    2954:	4620      	mov	r0, r4
    2956:	f000 f93b 	bl	2bd0 <swap_read_status>
        if (rc != 0) {
    295a:	b110      	cbz	r0, 2962 <context_boot_go+0xae>
            BOOT_LOG_WRN("Failed reading boot status; Image=%u",
    295c:	4629      	mov	r1, r5
    295e:	485c      	ldr	r0, [pc, #368]	; (2ad0 <context_boot_go+0x21c>)
    2960:	e7e0      	b.n	2924 <context_boot_go+0x70>
        if (!boot_status_is_reset(bs)) {
    2962:	4668      	mov	r0, sp
    2964:	f7ff fef8 	bl	2758 <boot_status_is_reset>
    2968:	bb88      	cbnz	r0, 29ce <context_boot_go+0x11a>
    rc = boot_swap_image(state, bs);
    296a:	4669      	mov	r1, sp
    296c:	4620      	mov	r0, r4
    296e:	f7ff ff01 	bl	2774 <boot_swap_image>
    assert(rc == 0);
    2972:	2800      	cmp	r0, #0
    2974:	d1c6      	bne.n	2904 <context_boot_go+0x50>
    BOOT_SWAP_TYPE(state) = bs->swap_type;
    2976:	f89d 3007 	ldrb.w	r3, [sp, #7]
    297a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    if (bs->swap_type == BOOT_SWAP_TYPE_REVERT ||
    297e:	3b03      	subs	r3, #3
    2980:	2b01      	cmp	r3, #1
    2982:	d806      	bhi.n	2992 <context_boot_go+0xde>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2984:	2000      	movs	r0, #0
    2986:	f000 f972 	bl	2c6e <swap_set_image_ok>
        if (rc != 0) {
    298a:	b110      	cbz	r0, 2992 <context_boot_go+0xde>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    298c:	23ff      	movs	r3, #255	; 0xff
    298e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    if (BOOT_IS_UPGRADE(bs->swap_type)) {
    2992:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2996:	3b02      	subs	r3, #2
    2998:	2b02      	cmp	r3, #2
    299a:	d806      	bhi.n	29aa <context_boot_go+0xf6>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    299c:	2000      	movs	r0, #0
    299e:	f000 f958 	bl	2c52 <swap_set_copy_done>
        if (rc != 0) {
    29a2:	b110      	cbz	r0, 29aa <context_boot_go+0xf6>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    29a4:	23ff      	movs	r3, #255	; 0xff
    29a6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    29aa:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    29ae:	2bff      	cmp	r3, #255	; 0xff
    29b0:	d103      	bne.n	29ba <context_boot_go+0x106>
        default:
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
        }

        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
            BOOT_LOG_ERR("panic!");
    29b2:	4848      	ldr	r0, [pc, #288]	; (2ad4 <context_boot_go+0x220>)
    29b4:	f001 f864 	bl	3a80 <puts>
    29b8:	e7a4      	b.n	2904 <context_boot_go+0x50>
            assert(rc == 0);
    29ba:	2800      	cmp	r0, #0
    29bc:	d1a2      	bne.n	2904 <context_boot_go+0x50>
            rc = boot_read_image_headers(state, false, bs);
    29be:	4601      	mov	r1, r0
    29c0:	466a      	mov	r2, sp
    29c2:	4620      	mov	r0, r4
    29c4:	f7ff fe14 	bl	25f0 <boot_read_image_headers>
            assert(rc == 0);
    29c8:	2800      	cmp	r0, #0
    29ca:	d0ad      	beq.n	2928 <context_boot_go+0x74>
    29cc:	e79a      	b.n	2904 <context_boot_go+0x50>
            if (bs->swap_type == BOOT_SWAP_TYPE_NONE) {
    29ce:	f89d 3007 	ldrb.w	r3, [sp, #7]
    29d2:	2b01      	cmp	r3, #1
    29d4:	d11e      	bne.n	2a14 <context_boot_go+0x160>
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    29d6:	4628      	mov	r0, r5
    29d8:	f7ff fd1a 	bl	2410 <boot_swap_type_multi>
    if (BOOT_IS_UPGRADE(swap_type)) {
    29dc:	1e83      	subs	r3, r0, #2
    29de:	2b02      	cmp	r3, #2
    swap_type = boot_swap_type_multi(BOOT_CURR_IMG(state));
    29e0:	4606      	mov	r6, r0
    if (BOOT_IS_UPGRADE(swap_type)) {
    29e2:	d807      	bhi.n	29f4 <context_boot_go+0x140>
        rc = boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs);
    29e4:	4620      	mov	r0, r4
    29e6:	f7ff fe1b 	bl	2620 <boot_validate_slot.isra.3.constprop.5>
        if (rc == 1) {
    29ea:	2801      	cmp	r0, #1
    29ec:	d010      	beq.n	2a10 <context_boot_go+0x15c>
            swap_type = BOOT_SWAP_TYPE_FAIL;
    29ee:	2800      	cmp	r0, #0
    29f0:	bf18      	it	ne
    29f2:	2605      	movne	r6, #5
                BOOT_SWAP_TYPE(state) = boot_validated_swap_type(state, bs);
    29f4:	f884 6064 	strb.w	r6, [r4, #100]	; 0x64
        if (BOOT_IS_UPGRADE(BOOT_SWAP_TYPE(state))) {
    29f8:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
        bs.swap_type = BOOT_SWAP_TYPE(state);
    29fc:	f88d 3007 	strb.w	r3, [sp, #7]
        switch (BOOT_SWAP_TYPE(state)) {
    2a00:	3b01      	subs	r3, #1
    2a02:	2b04      	cmp	r3, #4
    2a04:	d84a      	bhi.n	2a9c <context_boot_go+0x1e8>
    2a06:	e8df f003 	tbb	[pc, r3]
    2a0a:	0e29      	.short	0x0e29
    2a0c:	0e0e      	.short	0x0e0e
    2a0e:	43          	.byte	0x43
    2a0f:	00          	.byte	0x00
            swap_type = BOOT_SWAP_TYPE_NONE;
    2a10:	4606      	mov	r6, r0
    2a12:	e7ef      	b.n	29f4 <context_boot_go+0x140>
            } else if (boot_validate_slot(state, BOOT_SECONDARY_SLOT, bs) != 0) {
    2a14:	4620      	mov	r0, r4
    2a16:	f7ff fe03 	bl	2620 <boot_validate_slot.isra.3.constprop.5>
    2a1a:	b108      	cbz	r0, 2a20 <context_boot_go+0x16c>
                BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_FAIL;
    2a1c:	2305      	movs	r3, #5
    2a1e:	e784      	b.n	292a <context_boot_go+0x76>
                BOOT_SWAP_TYPE(state) = bs->swap_type;
    2a20:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2a24:	e781      	b.n	292a <context_boot_go+0x76>
        rc = boot_swap_image(state, bs);
    2a26:	4669      	mov	r1, sp
    2a28:	4620      	mov	r0, r4
    2a2a:	f7ff fea3 	bl	2774 <boot_swap_image>
    assert(rc == 0);
    2a2e:	4605      	mov	r5, r0
    2a30:	2800      	cmp	r0, #0
    2a32:	f47f af67 	bne.w	2904 <context_boot_go+0x50>
    swap_type = BOOT_SWAP_TYPE(state);
    2a36:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    if (swap_type == BOOT_SWAP_TYPE_REVERT ||
    2a3a:	1eda      	subs	r2, r3, #3
    2a3c:	2a01      	cmp	r2, #1
    2a3e:	d806      	bhi.n	2a4e <context_boot_go+0x19a>
        rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2a40:	f000 f915 	bl	2c6e <swap_set_image_ok>
        if (rc != 0) {
    2a44:	b128      	cbz	r0, 2a52 <context_boot_go+0x19e>
            BOOT_SWAP_TYPE(state) = swap_type = BOOT_SWAP_TYPE_PANIC;
    2a46:	23ff      	movs	r3, #255	; 0xff
    2a48:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2a4c:	e75a      	b.n	2904 <context_boot_go+0x50>
    if (BOOT_IS_UPGRADE(swap_type)) {
    2a4e:	2b02      	cmp	r3, #2
    2a50:	d104      	bne.n	2a5c <context_boot_go+0x1a8>
        rc = swap_set_copy_done(BOOT_CURR_IMG(state));
    2a52:	2000      	movs	r0, #0
    2a54:	f000 f8fd 	bl	2c52 <swap_set_copy_done>
        if (rc != 0) {
    2a58:	2800      	cmp	r0, #0
    2a5a:	d1f4      	bne.n	2a46 <context_boot_go+0x192>
        if (BOOT_SWAP_TYPE(state) == BOOT_SWAP_TYPE_PANIC) {
    2a5c:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
    2a60:	2bff      	cmp	r3, #255	; 0xff
    2a62:	d0a6      	beq.n	29b2 <context_boot_go+0xfe>
    /* Iterate over all the images. At this point all required update operations
     * have finished. By the end of the loop each image in the primary slot will
     * have been re-validated.
     */
    IMAGES_ITER(BOOT_CURR_IMG(state)) {
        if (BOOT_SWAP_TYPE(state) != BOOT_SWAP_TYPE_NONE) {
    2a64:	2b01      	cmp	r3, #1
    2a66:	d006      	beq.n	2a76 <context_boot_go+0x1c2>
            /* Attempt to read an image header from each slot. Ensure that image
             * headers in slots are aligned with headers in boot_data.
             */
            rc = boot_read_image_headers(state, false, &bs);
    2a68:	466a      	mov	r2, sp
    2a6a:	2100      	movs	r1, #0
    2a6c:	4620      	mov	r0, r4
    2a6e:	f7ff fdbf 	bl	25f0 <boot_read_image_headers>
            if (rc != 0) {
    2a72:	4605      	mov	r5, r0
    2a74:	b948      	cbnz	r0, 2a8a <context_boot_go+0x1d6>
#else
        /* Even if we're not re-validating the primary slot, we could be booting
         * onto an empty flash chip. At least do a basic sanity check that
         * the magic number on the image is OK.
         */
        if (BOOT_IMG(state, BOOT_PRIMARY_SLOT).hdr.ih_magic != IMAGE_MAGIC) {
    2a76:	6822      	ldr	r2, [r4, #0]
    2a78:	4b17      	ldr	r3, [pc, #92]	; (2ad8 <context_boot_go+0x224>)
    2a7a:	429a      	cmp	r2, r3
    2a7c:	d012      	beq.n	2aa4 <context_boot_go+0x1f0>
            BOOT_LOG_ERR("bad image magic 0x%lx; Image=%u", (unsigned long)
    2a7e:	2200      	movs	r2, #0
    2a80:	4621      	mov	r1, r4
    2a82:	4816      	ldr	r0, [pc, #88]	; (2adc <context_boot_go+0x228>)
    2a84:	f001 fa76 	bl	3f74 <printf>
                         &boot_img_hdr(state,BOOT_PRIMARY_SLOT)->ih_magic,
                         BOOT_CURR_IMG(state));
            rc = BOOT_EBADIMAGE;
    2a88:	2503      	movs	r5, #3
        for (slot = 0; slot < BOOT_NUM_SLOTS; slot++) {
            flash_area_close(BOOT_IMG_AREA(state, BOOT_NUM_SLOTS - 1 - slot));
        }
    }
    return rc;
}
    2a8a:	4628      	mov	r0, r5
    2a8c:	b005      	add	sp, #20
    2a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            rc = swap_set_image_ok(BOOT_CURR_IMG(state));
    2a90:	2000      	movs	r0, #0
    2a92:	f000 f8ec 	bl	2c6e <swap_set_image_ok>
            if (rc != 0) {
    2a96:	4605      	mov	r5, r0
    2a98:	2800      	cmp	r0, #0
    2a9a:	d0df      	beq.n	2a5c <context_boot_go+0x1a8>
            BOOT_SWAP_TYPE(state) = BOOT_SWAP_TYPE_PANIC;
    2a9c:	23ff      	movs	r3, #255	; 0xff
    2a9e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    2aa2:	e7db      	b.n	2a5c <context_boot_go+0x1a8>
    memset(&bs, 0, sizeof(struct boot_status));
    2aa4:	2210      	movs	r2, #16
    2aa6:	2100      	movs	r1, #0
    2aa8:	4668      	mov	r0, sp
    2aaa:	f7fe ff88 	bl	19be <memset>
    rsp->br_flash_dev_id = BOOT_IMG_AREA(state, BOOT_PRIMARY_SLOT)->fa_device_id;
    2aae:	6a23      	ldr	r3, [r4, #32]
    2ab0:	785a      	ldrb	r2, [r3, #1]
    2ab2:	713a      	strb	r2, [r7, #4]
    rsp->br_image_off = boot_img_slot_off(state, BOOT_PRIMARY_SLOT);
    2ab4:	685b      	ldr	r3, [r3, #4]
    2ab6:	60bb      	str	r3, [r7, #8]
    rsp->br_hdr = boot_img_hdr(state, BOOT_PRIMARY_SLOT);
    2ab8:	603c      	str	r4, [r7, #0]
    return rc;
    2aba:	e7e6      	b.n	2a8a <context_boot_go+0x1d6>
    2abc:	20005080 	.word	0x20005080
    2ac0:	20005c80 	.word	0x20005c80
    2ac4:	20005680 	.word	0x20005680
    2ac8:	00004b04 	.word	0x00004b04
    2acc:	00004b48 	.word	0x00004b48
    2ad0:	00004b76 	.word	0x00004b76
    2ad4:	00004ba2 	.word	0x00004ba2
    2ad8:	96f3b83d 	.word	0x96f3b83d
    2adc:	00004baf 	.word	0x00004baf

00002ae0 <boot_go>:
 * @return                      0 on success; nonzero on failure.
 */
int
boot_go(struct boot_rsp *rsp)
{
    return context_boot_go(&boot_data, rsp);
    2ae0:	4601      	mov	r1, r0
    2ae2:	4801      	ldr	r0, [pc, #4]	; (2ae8 <boot_go+0x8>)
    2ae4:	f7ff bee6 	b.w	28b4 <context_boot_go>
    2ae8:	20004c14 	.word	0x20004c14

00002aec <swap_erase_trailer_sectors>:
#if defined(MCUBOOT_SWAP_USING_SCRATCH) || defined(MCUBOOT_SWAP_USING_MOVE)

int
swap_erase_trailer_sectors(const struct boot_loader_state *state,
                           const struct flash_area *fap)
{
    2aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2af0:	460f      	mov	r7, r1
    int rc;

    BOOT_LOG_DBG("erasing trailer; fa_id=%d", fap->fa_id);

    image_index = BOOT_CURR_IMG(state);
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    2af2:	2100      	movs	r1, #0
{
    2af4:	4606      	mov	r6, r0
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    2af6:	4608      	mov	r0, r1
    2af8:	f000 fcc2 	bl	3480 <flash_area_id_from_multi_image_slot>
            BOOT_PRIMARY_SLOT);
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    2afc:	2101      	movs	r1, #1
    fa_id_primary = flash_area_id_from_multi_image_slot(image_index,
    2afe:	4604      	mov	r4, r0
    fa_id_secondary = flash_area_id_from_multi_image_slot(image_index,
    2b00:	2000      	movs	r0, #0
    2b02:	f000 fcbd 	bl	3480 <flash_area_id_from_multi_image_slot>
            BOOT_SECONDARY_SLOT);

    if (fap->fa_id == fa_id_primary) {
    2b06:	783b      	ldrb	r3, [r7, #0]
    2b08:	42a3      	cmp	r3, r4
    2b0a:	d025      	beq.n	2b58 <swap_erase_trailer_sectors+0x6c>
        slot = BOOT_PRIMARY_SLOT;
    } else if (fap->fa_id == fa_id_secondary) {
    2b0c:	4283      	cmp	r3, r0
    2b0e:	d12c      	bne.n	2b6a <swap_erase_trailer_sectors+0x7e>
        slot = BOOT_SECONDARY_SLOT;
    2b10:	2501      	movs	r5, #1
}

static inline size_t
boot_img_num_sectors(const struct boot_loader_state *state, size_t slot)
{
    return BOOT_IMG(state, slot).num_sectors;
    2b12:	232c      	movs	r3, #44	; 0x2c
    2b14:	fb03 6505 	mla	r5, r3, r5, r6
        return BOOT_EFLASH;
    }

    /* delete starting from last sector and moving to beginning */
    sector = boot_img_num_sectors(state, slot) - 1;
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    2b18:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    2b1a:	f8d5 9028 	ldr.w	r9, [r5, #40]	; 0x28
    2b1e:	f7ff fb5e 	bl	21de <boot_trailer_sz>
    2b22:	240c      	movs	r4, #12
    2b24:	fb04 f409 	mul.w	r4, r4, r9
    2b28:	4680      	mov	r8, r0
    2b2a:	3c0c      	subs	r4, #12
    total_sz = 0;
    2b2c:	2600      	movs	r6, #0

static inline size_t
boot_img_sector_size(const struct boot_loader_state *state,
                     size_t slot, size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    2b2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2b30:	191a      	adds	r2, r3, r4
 */
static inline uint32_t
boot_img_sector_off(const struct boot_loader_state *state, size_t slot,
                    size_t sector)
{
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    2b32:	e9d2 1901 	ldrd	r1, r9, [r2, #4]
    2b36:	685b      	ldr	r3, [r3, #4]
    do {
        sz = boot_img_sector_size(state, slot, sector);
        off = boot_img_sector_off(state, slot, sector);
        rc = boot_erase_region(fap, off, sz);
    2b38:	464a      	mov	r2, r9
    2b3a:	1ac9      	subs	r1, r1, r3
    2b3c:	4638      	mov	r0, r7
    2b3e:	f7ff fe8d 	bl	285c <boot_erase_region>
        assert(rc == 0);
    2b42:	b158      	cbz	r0, 2b5c <swap_erase_trailer_sectors+0x70>
    2b44:	f7fd fb26 	bl	194 <hal_debugger_connected>
    2b48:	b100      	cbz	r0, 2b4c <swap_erase_trailer_sectors+0x60>
    2b4a:	be01      	bkpt	0x0001
    2b4c:	2300      	movs	r3, #0
    2b4e:	461a      	mov	r2, r3
    2b50:	4619      	mov	r1, r3
    2b52:	4618      	mov	r0, r3
    2b54:	f7fe fc00 	bl	1358 <__assert_func>
        slot = BOOT_PRIMARY_SLOT;
    2b58:	2500      	movs	r5, #0
    2b5a:	e7da      	b.n	2b12 <swap_erase_trailer_sectors+0x26>

        sector--;
        total_sz += sz;
    2b5c:	444e      	add	r6, r9
    } while (total_sz < trailer_sz);
    2b5e:	45b0      	cmp	r8, r6
    2b60:	f1a4 040c 	sub.w	r4, r4, #12
    2b64:	d8e3      	bhi.n	2b2e <swap_erase_trailer_sectors+0x42>

    return rc;
}
    2b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return BOOT_EFLASH;
    2b6a:	2001      	movs	r0, #1
    2b6c:	e7fb      	b.n	2b66 <swap_erase_trailer_sectors+0x7a>

00002b6e <swap_status_init>:

int
swap_status_init(const struct boot_loader_state *state,
                 const struct flash_area *fap,
                 const struct boot_status *bs)
{
    2b6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2b70:	460c      	mov	r4, r1

    image_index = BOOT_CURR_IMG(state);

    BOOT_LOG_DBG("initializing status; fa_id=%d", fap->fa_id);

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2b72:	2002      	movs	r0, #2
    2b74:	4669      	mov	r1, sp
{
    2b76:	4615      	mov	r5, r2
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
    2b78:	f7ff fbbe 	bl	22f8 <boot_read_swap_state_by_id>
            &swap_state);
    assert(rc == 0);
    2b7c:	4602      	mov	r2, r0
    2b7e:	b148      	cbz	r0, 2b94 <swap_status_init+0x26>
    2b80:	f7fd fb08 	bl	194 <hal_debugger_connected>
    2b84:	b100      	cbz	r0, 2b88 <swap_status_init+0x1a>
    2b86:	be01      	bkpt	0x0001
    2b88:	2300      	movs	r3, #0
    2b8a:	461a      	mov	r2, r3
    2b8c:	4619      	mov	r1, r3
    2b8e:	4618      	mov	r0, r3
    2b90:	f7fe fbe2 	bl	1358 <__assert_func>

    if (bs->swap_type != BOOT_SWAP_TYPE_NONE) {
    2b94:	79e9      	ldrb	r1, [r5, #7]
    2b96:	2901      	cmp	r1, #1
    2b98:	d004      	beq.n	2ba4 <swap_status_init+0x36>
        rc = boot_write_swap_info(fap, bs->swap_type, image_index);
    2b9a:	4620      	mov	r0, r4
    2b9c:	f7ff fc10 	bl	23c0 <boot_write_swap_info>
        assert(rc == 0);
    2ba0:	2800      	cmp	r0, #0
    2ba2:	d1ed      	bne.n	2b80 <swap_status_init+0x12>
    }

    if (swap_state.image_ok == BOOT_FLAG_SET) {
    2ba4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    2ba8:	2b01      	cmp	r3, #1
    2baa:	d104      	bne.n	2bb6 <swap_status_init+0x48>
        rc = boot_write_image_ok(fap);
    2bac:	4620      	mov	r0, r4
    2bae:	f7ff fbfb 	bl	23a8 <boot_write_image_ok>
        assert(rc == 0);
    2bb2:	2800      	cmp	r0, #0
    2bb4:	d1e4      	bne.n	2b80 <swap_status_init+0x12>
    }

    rc = boot_write_swap_size(fap, bs->swap_size);
    2bb6:	68a9      	ldr	r1, [r5, #8]
    2bb8:	4620      	mov	r0, r4
    2bba:	f7ff fc1d 	bl	23f8 <boot_write_swap_size>
    assert(rc == 0);
    2bbe:	2800      	cmp	r0, #0
    2bc0:	d1de      	bne.n	2b80 <swap_status_init+0x12>

    rc = boot_write_enc_key(fap, 1, bs);
    assert(rc == 0);
#endif

    rc = boot_write_magic(fap);
    2bc2:	4620      	mov	r0, r4
    2bc4:	f7ff fbd6 	bl	2374 <boot_write_magic>
    assert(rc == 0);
    2bc8:	2800      	cmp	r0, #0
    2bca:	d1d9      	bne.n	2b80 <swap_status_init+0x12>

    return 0;
}
    2bcc:	b003      	add	sp, #12
    2bce:	bd30      	pop	{r4, r5, pc}

00002bd0 <swap_read_status>:

int
swap_read_status(struct boot_loader_state *state, struct boot_status *bs)
{
    2bd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    2bd2:	460d      	mov	r5, r1
    2bd4:	4606      	mov	r6, r0
    uint32_t off;
    uint8_t swap_info;
    int area_id;
    int rc;

    bs->source = swap_status_source(state);
    2bd6:	f000 f93d 	bl	2e54 <swap_status_source>
    switch (bs->source) {
    2bda:	2801      	cmp	r0, #1
    bs->source = swap_status_source(state);
    2bdc:	4604      	mov	r4, r0
    2bde:	60e8      	str	r0, [r5, #12]
    switch (bs->source) {
    2be0:	d033      	beq.n	2c4a <swap_read_status+0x7a>
    2be2:	2802      	cmp	r0, #2
    2be4:	d003      	beq.n	2bee <swap_read_status+0x1e>
    2be6:	bb30      	cbnz	r0, 2c36 <swap_read_status+0x66>
    }

    flash_area_close(fap);

    return rc;
}
    2be8:	4620      	mov	r0, r4
    2bea:	b002      	add	sp, #8
    2bec:	bd70      	pop	{r4, r5, r6, pc}
        area_id = FLASH_AREA_IMAGE_PRIMARY(BOOT_CURR_IMG(state));
    2bee:	2001      	movs	r0, #1
    rc = flash_area_open(area_id, &fap);
    2bf0:	a901      	add	r1, sp, #4
    2bf2:	f001 f9f3 	bl	3fdc <flash_area_open>
    if (rc != 0) {
    2bf6:	bb50      	cbnz	r0, 2c4e <swap_read_status+0x7e>
    rc = swap_read_status_bytes(fap, state, bs);
    2bf8:	462a      	mov	r2, r5
    2bfa:	4631      	mov	r1, r6
    2bfc:	9801      	ldr	r0, [sp, #4]
    2bfe:	f000 f865 	bl	2ccc <swap_read_status_bytes>
    if (rc == 0) {
    2c02:	4604      	mov	r4, r0
    2c04:	2800      	cmp	r0, #0
    2c06:	d1ef      	bne.n	2be8 <swap_read_status+0x18>
        off = boot_swap_info_off(fap);
    2c08:	9801      	ldr	r0, [sp, #4]
    2c0a:	f7ff fb0f 	bl	222c <boot_swap_info_off>
        rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
    2c0e:	2301      	movs	r3, #1
    2c10:	4601      	mov	r1, r0
    2c12:	f10d 0203 	add.w	r2, sp, #3
    2c16:	9801      	ldr	r0, [sp, #4]
    2c18:	f001 fa72 	bl	4100 <flash_area_read_is_empty>
        if (rc == 1) {
    2c1c:	2801      	cmp	r0, #1
            BOOT_SET_SWAP_INFO(swap_info, 0, BOOT_SWAP_TYPE_NONE);
    2c1e:	bf08      	it	eq
    2c20:	f88d 0003 	strbeq.w	r0, [sp, #3]
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2c24:	f89d 3003 	ldrb.w	r3, [sp, #3]
            rc = 0;
    2c28:	bf08      	it	eq
    2c2a:	4620      	moveq	r0, r4
        bs->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
    2c2c:	f003 030f 	and.w	r3, r3, #15
    2c30:	71eb      	strb	r3, [r5, #7]
    2c32:	4604      	mov	r4, r0
    2c34:	e7d8      	b.n	2be8 <swap_read_status+0x18>
        assert(0);
    2c36:	f7fd faad 	bl	194 <hal_debugger_connected>
    2c3a:	b100      	cbz	r0, 2c3e <swap_read_status+0x6e>
    2c3c:	be01      	bkpt	0x0001
    2c3e:	2300      	movs	r3, #0
    2c40:	461a      	mov	r2, r3
    2c42:	4619      	mov	r1, r3
    2c44:	4618      	mov	r0, r3
    2c46:	f7fe fb87 	bl	1358 <__assert_func>
        area_id = FLASH_AREA_IMAGE_SCRATCH;
    2c4a:	2003      	movs	r0, #3
    2c4c:	e7d0      	b.n	2bf0 <swap_read_status+0x20>
        return BOOT_EFLASH;
    2c4e:	2401      	movs	r4, #1
    2c50:	e7ca      	b.n	2be8 <swap_read_status+0x18>

00002c52 <swap_set_copy_done>:

int
swap_set_copy_done(uint8_t image_index)
{
    2c52:	b507      	push	{r0, r1, r2, lr}
    const struct flash_area *fap;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2c54:	2001      	movs	r0, #1
    2c56:	a901      	add	r1, sp, #4
    2c58:	f001 f9c0 	bl	3fdc <flash_area_open>
            &fap);
    if (rc != 0) {
    2c5c:	b928      	cbnz	r0, 2c6a <swap_set_copy_done+0x18>
        return BOOT_EFLASH;
    }

    rc = boot_write_copy_done(fap);
    2c5e:	9801      	ldr	r0, [sp, #4]
    2c60:	f7ff fb96 	bl	2390 <boot_write_copy_done>
    flash_area_close(fap);
    return rc;
}
    2c64:	b003      	add	sp, #12
    2c66:	f85d fb04 	ldr.w	pc, [sp], #4
        return BOOT_EFLASH;
    2c6a:	2001      	movs	r0, #1
    2c6c:	e7fa      	b.n	2c64 <swap_set_copy_done+0x12>

00002c6e <swap_set_image_ok>:

int
swap_set_image_ok(uint8_t image_index)
{
    2c6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const struct flash_area *fap;
    struct boot_swap_state state;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2c70:	2001      	movs	r0, #1
    2c72:	a901      	add	r1, sp, #4
    2c74:	f001 f9b2 	bl	3fdc <flash_area_open>
            &fap);
    if (rc != 0) {
    2c78:	b118      	cbz	r0, 2c82 <swap_set_image_ok+0x14>
        return BOOT_EFLASH;
    2c7a:	2001      	movs	r0, #1
    }

out:
    flash_area_close(fap);
    return rc;
}
    2c7c:	b005      	add	sp, #20
    2c7e:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = boot_read_swap_state(fap, &state);
    2c82:	a902      	add	r1, sp, #8
    2c84:	9801      	ldr	r0, [sp, #4]
    2c86:	f7ff fad5 	bl	2234 <boot_read_swap_state>
    if (rc != 0) {
    2c8a:	2800      	cmp	r0, #0
    2c8c:	d1f5      	bne.n	2c7a <swap_set_image_ok+0xc>
    if (state.image_ok == BOOT_FLAG_UNSET) {
    2c8e:	f89d 300b 	ldrb.w	r3, [sp, #11]
    2c92:	2b03      	cmp	r3, #3
    2c94:	d1f2      	bne.n	2c7c <swap_set_image_ok+0xe>
        rc = boot_write_image_ok(fap);
    2c96:	9801      	ldr	r0, [sp, #4]
    2c98:	f7ff fb86 	bl	23a8 <boot_write_image_ok>
    2c9c:	e7ee      	b.n	2c7c <swap_set_image_ok+0xe>

00002c9e <boot_read_image_header>:
#endif

int
boot_read_image_header(struct boot_loader_state *state, int slot,
                       struct image_header *out_hdr, struct boot_status *bs)
{
    2c9e:	b513      	push	{r0, r1, r4, lr}

#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2ca0:	2000      	movs	r0, #0
{
    2ca2:	4614      	mov	r4, r2
    area_id = flash_area_id_from_multi_image_slot(BOOT_CURR_IMG(state), slot);
    2ca4:	f000 fbec 	bl	3480 <flash_area_id_from_multi_image_slot>
    rc = flash_area_open(area_id, &fap);
    2ca8:	a901      	add	r1, sp, #4
    2caa:	b2c0      	uxtb	r0, r0
    2cac:	f001 f996 	bl	3fdc <flash_area_open>
    if (rc != 0) {
    2cb0:	4601      	mov	r1, r0
    2cb2:	b948      	cbnz	r0, 2cc8 <boot_read_image_header+0x2a>
        rc = BOOT_EFLASH;
        goto done;
    }

    rc = flash_area_read(fap, 0, out_hdr, sizeof *out_hdr);
    2cb4:	2320      	movs	r3, #32
    2cb6:	4622      	mov	r2, r4
    2cb8:	9801      	ldr	r0, [sp, #4]
    2cba:	f001 f9e3 	bl	4084 <flash_area_read>
    if (rc != 0) {
    2cbe:	3000      	adds	r0, #0
    2cc0:	bf18      	it	ne
    2cc2:	2001      	movne	r0, #1
    rc = 0;

done:
    flash_area_close(fap);
    return rc;
}
    2cc4:	b002      	add	sp, #8
    2cc6:	bd10      	pop	{r4, pc}
        rc = BOOT_EFLASH;
    2cc8:	2001      	movs	r0, #1
    return rc;
    2cca:	e7fb      	b.n	2cc4 <boot_read_image_header+0x26>

00002ccc <swap_read_status_bytes>:
 * operation.
 */
int
swap_read_status_bytes(const struct flash_area *fap,
        struct boot_loader_state *state, struct boot_status *bs)
{
    2ccc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cd0:	4680      	mov	r8, r0
    2cd2:	468b      	mov	fp, r1
    2cd4:	4616      	mov	r6, r2
    int found_idx;
    int invalid;
    int rc;
    int i;

    off = boot_status_off(fap);
    2cd6:	f7ff fa92 	bl	21fe <boot_status_off>
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    2cda:	4641      	mov	r1, r8
    off = boot_status_off(fap);
    2cdc:	4682      	mov	sl, r0
    max_entries = boot_status_entries(BOOT_CURR_IMG(state), fap);
    2cde:	2000      	movs	r0, #0
    2ce0:	f7ff fa82 	bl	21e8 <boot_status_entries>
    if (max_entries < 0) {
    2ce4:	f1b0 0900 	subs.w	r9, r0, #0
    2ce8:	db3d      	blt.n	2d66 <swap_read_status_bytes+0x9a>
    }

    found = 0;
    found_idx = 0;
    invalid = 0;
    for (i = 0; i < max_entries; i++) {
    2cea:	2700      	movs	r7, #0
    found_idx = 0;
    2cec:	463c      	mov	r4, r7
    found = 0;
    2cee:	463d      	mov	r5, r7
    for (i = 0; i < max_entries; i++) {
    2cf0:	454f      	cmp	r7, r9
    2cf2:	d112      	bne.n	2d1a <swap_read_status_bytes+0x4e>
         */
        assert(0);
#endif
    }

    if (found) {
    2cf4:	b16d      	cbz	r5, 2d12 <swap_read_status_bytes+0x46>
        if (!found_idx) {
    2cf6:	2c00      	cmp	r4, #0
    2cf8:	bf08      	it	eq
    2cfa:	463c      	moveq	r4, r7
            found_idx = i;
        }
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    2cfc:	2303      	movs	r3, #3
    2cfe:	fb94 f3f3 	sdiv	r3, r4, r3
    2d02:	1c5a      	adds	r2, r3, #1
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    2d04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    2d08:	1ae3      	subs	r3, r4, r3
    2d0a:	3301      	adds	r3, #1
        bs->idx = (found_idx / BOOT_STATUS_STATE_COUNT) + 1;
    2d0c:	6032      	str	r2, [r6, #0]
        bs->state = (found_idx % BOOT_STATUS_STATE_COUNT) + 1;
    2d0e:	7133      	strb	r3, [r6, #4]
    }

    return 0;
    2d10:	2500      	movs	r5, #0
}
    2d12:	4628      	mov	r0, r5
    2d14:	b003      	add	sp, #12
    2d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = flash_area_read_is_empty(fap, off + i * BOOT_WRITE_SZ(state),
    2d1a:	f8db 1068 	ldr.w	r1, [fp, #104]	; 0x68
    2d1e:	2301      	movs	r3, #1
    2d20:	f10d 0207 	add.w	r2, sp, #7
    2d24:	fb01 a107 	mla	r1, r1, r7, sl
    2d28:	4640      	mov	r0, r8
    2d2a:	f001 f9e9 	bl	4100 <flash_area_read_is_empty>
        if (rc < 0) {
    2d2e:	2800      	cmp	r0, #0
    2d30:	db1b      	blt.n	2d6a <swap_read_status_bytes+0x9e>
        if (rc == 1) {
    2d32:	2801      	cmp	r0, #1
    2d34:	d105      	bne.n	2d42 <swap_read_status_bytes+0x76>
            if (found && !found_idx) {
    2d36:	b115      	cbz	r5, 2d3e <swap_read_status_bytes+0x72>
    2d38:	2c00      	cmp	r4, #0
    2d3a:	bf08      	it	eq
    2d3c:	463c      	moveq	r4, r7
    for (i = 0; i < max_entries; i++) {
    2d3e:	3701      	adds	r7, #1
    2d40:	e7d6      	b.n	2cf0 <swap_read_status_bytes+0x24>
        } else if (!found) {
    2d42:	b175      	cbz	r5, 2d62 <swap_read_status_bytes+0x96>
        } else if (found_idx) {
    2d44:	2c00      	cmp	r4, #0
    2d46:	d0fa      	beq.n	2d3e <swap_read_status_bytes+0x72>
        BOOT_LOG_ERR("Detected inconsistent status!");
    2d48:	4809      	ldr	r0, [pc, #36]	; (2d70 <swap_read_status_bytes+0xa4>)
    2d4a:	f000 fe99 	bl	3a80 <puts>
        assert(0);
    2d4e:	f7fd fa21 	bl	194 <hal_debugger_connected>
    2d52:	b100      	cbz	r0, 2d56 <swap_read_status_bytes+0x8a>
    2d54:	be01      	bkpt	0x0001
    2d56:	2300      	movs	r3, #0
    2d58:	461a      	mov	r2, r3
    2d5a:	4619      	mov	r1, r3
    2d5c:	4618      	mov	r0, r3
    2d5e:	f7fe fafb 	bl	1358 <__assert_func>
            found = 1;
    2d62:	2501      	movs	r5, #1
    2d64:	e7eb      	b.n	2d3e <swap_read_status_bytes+0x72>
        return BOOT_EBADARGS;
    2d66:	2507      	movs	r5, #7
    2d68:	e7d3      	b.n	2d12 <swap_read_status_bytes+0x46>
            return BOOT_EFLASH;
    2d6a:	2501      	movs	r5, #1
    2d6c:	e7d1      	b.n	2d12 <swap_read_status_bytes+0x46>
    2d6e:	bf00      	nop
    2d70:	00004cb6 	.word	0x00004cb6

00002d74 <boot_status_internal_off>:

uint32_t
boot_status_internal_off(const struct boot_status *bs, int elem_sz)
{
    2d74:	b510      	push	{r4, lr}
    int idx_sz;

    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;

    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    2d76:	7902      	ldrb	r2, [r0, #4]
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    2d78:	6803      	ldr	r3, [r0, #0]
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    2d7a:	3a01      	subs	r2, #1
    idx_sz = elem_sz * BOOT_STATUS_STATE_COUNT;
    2d7c:	eb01 0441 	add.w	r4, r1, r1, lsl #1
    return (bs->idx - BOOT_STATUS_IDX_0) * idx_sz +
    2d80:	3b01      	subs	r3, #1
           (bs->state - BOOT_STATUS_STATE_0) * elem_sz;
    2d82:	4351      	muls	r1, r2
}
    2d84:	fb04 1003 	mla	r0, r4, r3, r1
    2d88:	bd10      	pop	{r4, pc}
	...

00002d8c <boot_slots_compatible>:
 * area, and have sizes that are a multiple of each other (powers of two
 * presumably!).
 */
int
boot_slots_compatible(struct boot_loader_state *state)
{
    2d8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    return BOOT_IMG(state, slot).num_sectors;
    2d90:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
    size_t i, j;
    int8_t smaller;

    num_sectors_primary = boot_img_num_sectors(state, BOOT_PRIMARY_SLOT);
    num_sectors_secondary = boot_img_num_sectors(state, BOOT_SECONDARY_SLOT);
    if ((num_sectors_primary > BOOT_MAX_IMG_SECTORS) ||
    2d94:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
    2d98:	d804      	bhi.n	2da4 <boot_slots_compatible+0x18>
    2d9a:	f8d0 e054 	ldr.w	lr, [r0, #84]	; 0x54
    2d9e:	f1be 0f80 	cmp.w	lr, #128	; 0x80
    2da2:	d905      	bls.n	2db0 <boot_slots_compatible+0x24>
        (num_sectors_secondary > BOOT_MAX_IMG_SECTORS)) {
        BOOT_LOG_WRN("Cannot upgrade: more sectors than allowed");
    2da4:	4827      	ldr	r0, [pc, #156]	; (2e44 <boot_slots_compatible+0xb8>)
    }

    if ((i != num_sectors_primary) ||
        (j != num_sectors_secondary) ||
        (primary_slot_sz != secondary_slot_sz)) {
        BOOT_LOG_WRN("Cannot upgrade: slots are not compatible");
    2da6:	f000 fe6b 	bl	3a80 <puts>
        return 0;
    2daa:	2000      	movs	r0, #0
    }

    return 1;
}
    2dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#if MCUBOOT_SWAP_USING_SCRATCH
#define BOOT_SCRATCH_AREA(state) ((state)->scratch.area)

static inline size_t boot_scratch_area_size(const struct boot_loader_state *state)
{
    return BOOT_SCRATCH_AREA(state)->fa_size;
    2db0:	6d83      	ldr	r3, [r0, #88]	; 0x58
    2db2:	f8d3 a008 	ldr.w	sl, [r3, #8]
    smaller = 0;
    2db6:	2300      	movs	r3, #0
    j = sz1 = secondary_slot_sz = 0;
    2db8:	4619      	mov	r1, r3
    i = sz0 = primary_slot_sz = 0;
    2dba:	461c      	mov	r4, r3
    j = sz1 = secondary_slot_sz = 0;
    2dbc:	4699      	mov	r9, r3
    i = sz0 = primary_slot_sz = 0;
    2dbe:	469c      	mov	ip, r3
    j = sz1 = secondary_slot_sz = 0;
    2dc0:	461d      	mov	r5, r3
    i = sz0 = primary_slot_sz = 0;
    2dc2:	461a      	mov	r2, r3
    2dc4:	260c      	movs	r6, #12
    while (i < num_sectors_primary || j < num_sectors_secondary) {
    2dc6:	4544      	cmp	r4, r8
    2dc8:	d309      	bcc.n	2dde <boot_slots_compatible+0x52>
    2dca:	4571      	cmp	r1, lr
    2dcc:	d307      	bcc.n	2dde <boot_slots_compatible+0x52>
    if ((i != num_sectors_primary) ||
    2dce:	4544      	cmp	r4, r8
    2dd0:	d103      	bne.n	2dda <boot_slots_compatible+0x4e>
    2dd2:	4571      	cmp	r1, lr
    2dd4:	d101      	bne.n	2dda <boot_slots_compatible+0x4e>
        (j != num_sectors_secondary) ||
    2dd6:	45cc      	cmp	ip, r9
    2dd8:	d032      	beq.n	2e40 <boot_slots_compatible+0xb4>
        BOOT_LOG_WRN("Cannot upgrade: slots are not compatible");
    2dda:	481b      	ldr	r0, [pc, #108]	; (2e48 <boot_slots_compatible+0xbc>)
    2ddc:	e7e3      	b.n	2da6 <boot_slots_compatible+0x1a>
        if (sz0 == sz1) {
    2dde:	42aa      	cmp	r2, r5
    2de0:	d113      	bne.n	2e0a <boot_slots_compatible+0x7e>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    2de2:	6a47      	ldr	r7, [r0, #36]	; 0x24
    2de4:	fb06 7704 	mla	r7, r6, r4, r7
            i++;
    2de8:	3401      	adds	r4, #1
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    2dea:	68bf      	ldr	r7, [r7, #8]
    2dec:	443a      	add	r2, r7
    2dee:	6d07      	ldr	r7, [r0, #80]	; 0x50
    2df0:	fb06 7701 	mla	r7, r6, r1, r7
            j++;
    2df4:	3101      	adds	r1, #1
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    2df6:	68bf      	ldr	r7, [r7, #8]
    2df8:	443d      	add	r5, r7
        if (sz0 == sz1) {
    2dfa:	42aa      	cmp	r2, r5
    2dfc:	d1e3      	bne.n	2dc6 <boot_slots_compatible+0x3a>
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    2dfe:	4552      	cmp	r2, sl
            primary_slot_sz += sz0;
    2e00:	4494      	add	ip, r2
            secondary_slot_sz += sz1;
    2e02:	4491      	add	r9, r2
            if (sz0 > scratch_sz || sz1 > scratch_sz) {
    2e04:	d918      	bls.n	2e38 <boot_slots_compatible+0xac>
                BOOT_LOG_WRN("Cannot upgrade: not all sectors fit inside scratch");
    2e06:	4811      	ldr	r0, [pc, #68]	; (2e4c <boot_slots_compatible+0xc0>)
    2e08:	e7cd      	b.n	2da6 <boot_slots_compatible+0x1a>
        } else if (sz0 < sz1) {
    2e0a:	d20b      	bcs.n	2e24 <boot_slots_compatible+0x98>
    2e0c:	6a47      	ldr	r7, [r0, #36]	; 0x24
    2e0e:	fb06 7704 	mla	r7, r6, r4, r7
            if (smaller == 2) {
    2e12:	2b02      	cmp	r3, #2
            sz0 += boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    2e14:	68bf      	ldr	r7, [r7, #8]
    2e16:	443a      	add	r2, r7
            if (smaller == 2) {
    2e18:	d101      	bne.n	2e1e <boot_slots_compatible+0x92>
                BOOT_LOG_WRN("Cannot upgrade: slots have non-compatible sectors");
    2e1a:	480d      	ldr	r0, [pc, #52]	; (2e50 <boot_slots_compatible+0xc4>)
    2e1c:	e7c3      	b.n	2da6 <boot_slots_compatible+0x1a>
            i++;
    2e1e:	3401      	adds	r4, #1
            smaller = 1;
    2e20:	2301      	movs	r3, #1
    2e22:	e7ea      	b.n	2dfa <boot_slots_compatible+0x6e>
    2e24:	6d07      	ldr	r7, [r0, #80]	; 0x50
    2e26:	fb06 7701 	mla	r7, r6, r1, r7
            if (smaller == 1) {
    2e2a:	2b01      	cmp	r3, #1
            sz1 += boot_img_sector_size(state, BOOT_SECONDARY_SLOT, j);
    2e2c:	68bf      	ldr	r7, [r7, #8]
    2e2e:	443d      	add	r5, r7
            if (smaller == 1) {
    2e30:	d0f3      	beq.n	2e1a <boot_slots_compatible+0x8e>
            j++;
    2e32:	3101      	adds	r1, #1
            smaller = 2;
    2e34:	2302      	movs	r3, #2
    2e36:	e7e0      	b.n	2dfa <boot_slots_compatible+0x6e>
            smaller = sz0 = sz1 = 0;
    2e38:	2300      	movs	r3, #0
    2e3a:	461d      	mov	r5, r3
    2e3c:	461a      	mov	r2, r3
    2e3e:	e7c2      	b.n	2dc6 <boot_slots_compatible+0x3a>
    return 1;
    2e40:	2001      	movs	r0, #1
    2e42:	e7b3      	b.n	2dac <boot_slots_compatible+0x20>
    2e44:	00004bd6 	.word	0x00004bd6
    2e48:	00004c77 	.word	0x00004c77
    2e4c:	00004c3e 	.word	0x00004c3e
    2e50:	00004c06 	.word	0x00004c06

00002e54 <swap_status_source>:
 * @return      A BOOT_STATUS_SOURCE_[...] code indicating where status should
 *              be read from.
 */
int
swap_status_source(struct boot_loader_state *state)
{
    2e54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2e58:	b087      	sub	sp, #28
#if (BOOT_IMAGE_NUMBER == 1)
    (void)state;
#endif

    image_index = BOOT_CURR_IMG(state);
    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
    2e5a:	a904      	add	r1, sp, #16
    2e5c:	2001      	movs	r0, #1
    2e5e:	f7ff fa4b 	bl	22f8 <boot_read_swap_state_by_id>
            &state_primary_slot);
    assert(rc == 0);
    2e62:	b148      	cbz	r0, 2e78 <swap_status_source+0x24>
    2e64:	f7fd f996 	bl	194 <hal_debugger_connected>
    2e68:	b100      	cbz	r0, 2e6c <swap_status_source+0x18>
    2e6a:	be01      	bkpt	0x0001
    2e6c:	2300      	movs	r3, #0
    2e6e:	461a      	mov	r2, r3
    2e70:	4619      	mov	r1, r3
    2e72:	4618      	mov	r0, r3
    2e74:	f7fe fa70 	bl	1358 <__assert_func>

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH, &state_scratch);
    2e78:	a902      	add	r1, sp, #8
    2e7a:	2003      	movs	r0, #3
    2e7c:	f7ff fa3c 	bl	22f8 <boot_read_swap_state_by_id>
    assert(rc == 0);
    2e80:	4605      	mov	r5, r0
    2e82:	2800      	cmp	r0, #0
    2e84:	d1ee      	bne.n	2e64 <swap_status_source+0x10>

    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    2e86:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2e8a:	2b01      	cmp	r3, #1
    2e8c:	d053      	beq.n	2f36 <swap_status_source+0xe2>
    2e8e:	4a31      	ldr	r2, [pc, #196]	; (2f54 <swap_status_source+0x100>)
    2e90:	4931      	ldr	r1, [pc, #196]	; (2f58 <swap_status_source+0x104>)
    2e92:	2b03      	cmp	r3, #3
    2e94:	bf18      	it	ne
    2e96:	460a      	movne	r2, r1
    2e98:	f89d 1013 	ldrb.w	r1, [sp, #19]
    2e9c:	9101      	str	r1, [sp, #4]
    2e9e:	f89d 1012 	ldrb.w	r1, [sp, #18]
    2ea2:	f89d 3011 	ldrb.w	r3, [sp, #17]
    2ea6:	9100      	str	r1, [sp, #0]
    2ea8:	482c      	ldr	r0, [pc, #176]	; (2f5c <swap_status_source+0x108>)
    2eaa:	492d      	ldr	r1, [pc, #180]	; (2f60 <swap_status_source+0x10c>)
    2eac:	f001 f862 	bl	3f74 <printf>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
    2eb0:	f89d 3008 	ldrb.w	r3, [sp, #8]
    2eb4:	2b01      	cmp	r3, #1
    2eb6:	d040      	beq.n	2f3a <swap_status_source+0xe6>
    2eb8:	4a26      	ldr	r2, [pc, #152]	; (2f54 <swap_status_source+0x100>)
    2eba:	4927      	ldr	r1, [pc, #156]	; (2f58 <swap_status_source+0x104>)
    2ebc:	2b03      	cmp	r3, #3
    2ebe:	bf18      	it	ne
    2ec0:	460a      	movne	r2, r1
    2ec2:	f89d 100b 	ldrb.w	r1, [sp, #11]
    2ec6:	9101      	str	r1, [sp, #4]
    2ec8:	f89d 100a 	ldrb.w	r1, [sp, #10]
    2ecc:	9100      	str	r1, [sp, #0]
    2ece:	f89d 3009 	ldrb.w	r3, [sp, #9]
    2ed2:	4924      	ldr	r1, [pc, #144]	; (2f64 <swap_status_source+0x110>)
    2ed4:	4821      	ldr	r0, [pc, #132]	; (2f5c <swap_status_source+0x108>)

    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
        table = &boot_status_tables[i];

        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    2ed6:	4e24      	ldr	r6, [pc, #144]	; (2f68 <swap_status_source+0x114>)
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
    2ed8:	f001 f84c 	bl	3f74 <printf>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    2edc:	2400      	movs	r4, #0
    2ede:	4637      	mov	r7, r6
        if (boot_magic_compatible_check(table->bst_magic_primary_slot,
    2ee0:	f89d 1010 	ldrb.w	r1, [sp, #16]
    2ee4:	f816 0024 	ldrb.w	r0, [r6, r4, lsl #2]
    2ee8:	ea4f 0884 	mov.w	r8, r4, lsl #2
    2eec:	f7ff f968 	bl	21c0 <boot_magic_compatible_check>
    2ef0:	b348      	cbz	r0, 2f46 <swap_status_source+0xf2>
    2ef2:	eb06 0908 	add.w	r9, r6, r8
                          state_primary_slot.magic) &&
            boot_magic_compatible_check(table->bst_magic_scratch,
    2ef6:	f89d 1008 	ldrb.w	r1, [sp, #8]
    2efa:	f899 0001 	ldrb.w	r0, [r9, #1]
    2efe:	f7ff f95f 	bl	21c0 <boot_magic_compatible_check>
                          state_primary_slot.magic) &&
    2f02:	b300      	cbz	r0, 2f46 <swap_status_source+0xf2>
                          state_scratch.magic) &&
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    2f04:	f899 3002 	ldrb.w	r3, [r9, #2]
                          state_scratch.magic) &&
    2f08:	2b04      	cmp	r3, #4
    2f0a:	d003      	beq.n	2f14 <swap_status_source+0xc0>
            (table->bst_copy_done_primary_slot == BOOT_FLAG_ANY ||
    2f0c:	f89d 2012 	ldrb.w	r2, [sp, #18]
    2f10:	429a      	cmp	r2, r3
    2f12:	d118      	bne.n	2f46 <swap_status_source+0xf2>
             table->bst_copy_done_primary_slot == state_primary_slot.copy_done))
        {
            source = table->bst_status_source;
    2f14:	4447      	add	r7, r8
    2f16:	78fd      	ldrb	r5, [r7, #3]
                state_scratch.image_num != BOOT_CURR_IMG(state)) {
                source = BOOT_STATUS_SOURCE_NONE;
            }
#endif

            BOOT_LOG_INF("Boot source: %s",
    2f18:	b18d      	cbz	r5, 2f3e <swap_status_source+0xea>
    2f1a:	2d01      	cmp	r5, #1
    2f1c:	d011      	beq.n	2f42 <swap_status_source+0xee>
    2f1e:	4913      	ldr	r1, [pc, #76]	; (2f6c <swap_status_source+0x118>)
    2f20:	4b13      	ldr	r3, [pc, #76]	; (2f70 <swap_status_source+0x11c>)
    2f22:	2d02      	cmp	r5, #2
    2f24:	bf18      	it	ne
    2f26:	4619      	movne	r1, r3
    2f28:	4812      	ldr	r0, [pc, #72]	; (2f74 <swap_status_source+0x120>)
    2f2a:	f001 f823 	bl	3f74 <printf>
        }
    }

    BOOT_LOG_INF("Boot source: none");
    return BOOT_STATUS_SOURCE_NONE;
}
    2f2e:	4628      	mov	r0, r5
    2f30:	b007      	add	sp, #28
    2f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    BOOT_LOG_SWAP_STATE("Primary image", &state_primary_slot);
    2f36:	4a10      	ldr	r2, [pc, #64]	; (2f78 <swap_status_source+0x124>)
    2f38:	e7ae      	b.n	2e98 <swap_status_source+0x44>
    BOOT_LOG_SWAP_STATE("Scratch", &state_scratch);
    2f3a:	4a0f      	ldr	r2, [pc, #60]	; (2f78 <swap_status_source+0x124>)
    2f3c:	e7c1      	b.n	2ec2 <swap_status_source+0x6e>
            BOOT_LOG_INF("Boot source: %s",
    2f3e:	490f      	ldr	r1, [pc, #60]	; (2f7c <swap_status_source+0x128>)
    2f40:	e7f2      	b.n	2f28 <swap_status_source+0xd4>
    2f42:	490f      	ldr	r1, [pc, #60]	; (2f80 <swap_status_source+0x12c>)
    2f44:	e7f0      	b.n	2f28 <swap_status_source+0xd4>
    for (i = 0; i < BOOT_STATUS_TABLES_COUNT; i++) {
    2f46:	3401      	adds	r4, #1
    2f48:	2c04      	cmp	r4, #4
    2f4a:	d1c9      	bne.n	2ee0 <swap_status_source+0x8c>
    BOOT_LOG_INF("Boot source: none");
    2f4c:	480d      	ldr	r0, [pc, #52]	; (2f84 <swap_status_source+0x130>)
    2f4e:	f000 fd97 	bl	3a80 <puts>
    return BOOT_STATUS_SOURCE_NONE;
    2f52:	e7ec      	b.n	2f2e <swap_status_source+0xda>
    2f54:	00004ce3 	.word	0x00004ce3
    2f58:	00004cda 	.word	0x00004cda
    2f5c:	00004d04 	.word	0x00004d04
    2f60:	00004cf6 	.word	0x00004cf6
    2f64:	00004d47 	.word	0x00004d47
    2f68:	00004ca6 	.word	0x00004ca6
    2f6c:	00004ce9 	.word	0x00004ce9
    2f70:	00004a8c 	.word	0x00004a8c
    2f74:	00004d4f 	.word	0x00004d4f
    2f78:	00004cde 	.word	0x00004cde
    2f7c:	00004d79 	.word	0x00004d79
    2f80:	00004c6f 	.word	0x00004c6f
    2f84:	00004d66 	.word	0x00004d66

00002f88 <swap_run>:
}

void
swap_run(struct boot_loader_state *state, struct boot_status *bs,
         uint32_t copy_size)
{
    2f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t swap_idx;
    int last_idx_secondary_slot;
    uint32_t primary_slot_size;
    uint32_t secondary_slot_size;
    primary_slot_size = 0;
    secondary_slot_size = 0;
    2f8c:	2300      	movs	r3, #0
{
    2f8e:	4605      	mov	r5, r0
    2f90:	200c      	movs	r0, #12
    2f92:	460c      	mov	r4, r1
    2f94:	b08b      	sub	sp, #44	; 0x2c
    primary_slot_size = 0;
    2f96:	4619      	mov	r1, r3
    last_sector_idx = 0;
    2f98:	461e      	mov	r6, r3
    2f9a:	4684      	mov	ip, r0
     * find what is the last sector in the primary slot that needs swapping.
     * Since we already know that both slots are compatible, the secondary
     * slot's last sector is not really required after this check is finished.
     */
    while (1) {
        if ((primary_slot_size < copy_size) ||
    2f9c:	4291      	cmp	r1, r2
    2f9e:	d302      	bcc.n	2fa6 <swap_run+0x1e>
    2fa0:	4299      	cmp	r1, r3
    2fa2:	f080 8148 	bcs.w	3236 <swap_run+0x2ae>
    2fa6:	6a6f      	ldr	r7, [r5, #36]	; 0x24
    2fa8:	fb00 7706 	mla	r7, r0, r6, r7
            (primary_slot_size < secondary_slot_size)) {
           primary_slot_size += boot_img_sector_size(state,
                                                     BOOT_PRIMARY_SLOT,
                                                     last_sector_idx);
        }
        if ((secondary_slot_size < copy_size) ||
    2fac:	4293      	cmp	r3, r2
           primary_slot_size += boot_img_sector_size(state,
    2fae:	68bf      	ldr	r7, [r7, #8]
    2fb0:	4439      	add	r1, r7
        if ((secondary_slot_size < copy_size) ||
    2fb2:	d302      	bcc.n	2fba <swap_run+0x32>
    2fb4:	428b      	cmp	r3, r1
    2fb6:	f080 813c 	bcs.w	3232 <swap_run+0x2aa>
    2fba:	6d2f      	ldr	r7, [r5, #80]	; 0x50
    2fbc:	fb0c 7706 	mla	r7, ip, r6, r7
            (secondary_slot_size < primary_slot_size)) {
           secondary_slot_size += boot_img_sector_size(state,
                                                       BOOT_SECONDARY_SLOT,
                                                       last_idx_secondary_slot);
        }
        if (primary_slot_size >= copy_size &&
    2fc0:	428a      	cmp	r2, r1
           secondary_slot_size += boot_img_sector_size(state,
    2fc2:	68bf      	ldr	r7, [r7, #8]
    2fc4:	443b      	add	r3, r7
        if (primary_slot_size >= copy_size &&
    2fc6:	d803      	bhi.n	2fd0 <swap_run+0x48>
    2fc8:	429a      	cmp	r2, r3
    2fca:	d801      	bhi.n	2fd0 <swap_run+0x48>
                secondary_slot_size >= copy_size &&
    2fcc:	4299      	cmp	r1, r3
    2fce:	d001      	beq.n	2fd4 <swap_run+0x4c>
                primary_slot_size == secondary_slot_size) {
            break;
        }
        last_sector_idx++;
    2fd0:	3601      	adds	r6, #1
        if ((primary_slot_size < copy_size) ||
    2fd2:	e7e3      	b.n	2f9c <swap_run+0x14>
        last_idx_secondary_slot++;
    }

    swap_idx = 0;
    2fd4:	f04f 0b00 	mov.w	fp, #0
    2fd8:	f04f 0a0c 	mov.w	sl, #12
    2fdc:	6dab      	ldr	r3, [r5, #88]	; 0x58
    2fde:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2fe0:	6899      	ldr	r1, [r3, #8]
    sz = 0;
    2fe2:	f04f 0900 	mov.w	r9, #0
    2fe6:	fb0a 2306 	mla	r3, sl, r6, r2
        new_sz = sz + boot_img_sector_size(state, BOOT_PRIMARY_SLOT, i);
    2fea:	689b      	ldr	r3, [r3, #8]
    2fec:	444b      	add	r3, r9
        if (new_sz > scratch_sz) {
    2fee:	4299      	cmp	r1, r3
    2ff0:	d303      	bcc.n	2ffa <swap_run+0x72>
    for (i = last_sector_idx; i >= 0; i--) {
    2ff2:	3e01      	subs	r6, #1
    2ff4:	1c70      	adds	r0, r6, #1
    2ff6:	4699      	mov	r9, r3
    2ff8:	d1f5      	bne.n	2fe6 <swap_run+0x5e>
    while (last_sector_idx >= 0) {
        sz = boot_copy_sz(state, last_sector_idx, &first_sector_idx);
        if (swap_idx >= (bs->idx - BOOT_STATUS_IDX_0)) {
    2ffa:	6823      	ldr	r3, [r4, #0]
    2ffc:	3b01      	subs	r3, #1
    2ffe:	455b      	cmp	r3, fp
    3000:	f200 810f 	bhi.w	3222 <swap_run+0x29a>
    return BOOT_IMG(state, slot).sectors[sector].fa_off -
    3004:	fb06 a30a 	mla	r3, r6, sl, sl
    3008:	4413      	add	r3, r2
    trailer_sz = boot_trailer_sz(BOOT_WRITE_SZ(state));
    300a:	6ea8      	ldr	r0, [r5, #104]	; 0x68
    300c:	685f      	ldr	r7, [r3, #4]
    300e:	6853      	ldr	r3, [r2, #4]
    3010:	eba7 0803 	sub.w	r8, r7, r3
    3014:	f7ff f8e3 	bl	21de <boot_trailer_sz>
    3018:	6aab      	ldr	r3, [r5, #40]	; 0x28
    301a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    301c:	3b01      	subs	r3, #1
    301e:	fb0a 1303 	mla	r3, sl, r3, r1
    3022:	6849      	ldr	r1, [r1, #4]
    3024:	685b      	ldr	r3, [r3, #4]
    if ((img_off + sz) >
    3026:	eb08 0209 	add.w	r2, r8, r9
    302a:	1a5b      	subs	r3, r3, r1
    302c:	429a      	cmp	r2, r3
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    302e:	6823      	ldr	r3, [r4, #0]
        copy_sz -= trailer_sz;
    3030:	bf8c      	ite	hi
    3032:	eba9 0700 	subhi.w	r7, r9, r0
    if ((img_off + sz) >
    3036:	464f      	movls	r7, r9
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    3038:	2b01      	cmp	r3, #1
    303a:	d113      	bne.n	3064 <swap_run+0xdc>
    303c:	ebb7 0309 	subs.w	r3, r7, r9
    3040:	bf18      	it	ne
    3042:	2301      	movne	r3, #1
    3044:	71a3      	strb	r3, [r4, #6]
    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(image_index),
    3046:	a905      	add	r1, sp, #20
    3048:	2001      	movs	r0, #1
    304a:	f000 ffc7 	bl	3fdc <flash_area_open>
    assert (rc == 0);
    304e:	b158      	cbz	r0, 3068 <swap_run+0xe0>
    3050:	f7fd f8a0 	bl	194 <hal_debugger_connected>
    3054:	b100      	cbz	r0, 3058 <swap_run+0xd0>
    3056:	be01      	bkpt	0x0001
    3058:	2300      	movs	r3, #0
    305a:	461a      	mov	r2, r3
    305c:	4619      	mov	r1, r3
    305e:	4618      	mov	r0, r3
    3060:	f7fe f97a 	bl	1358 <__assert_func>
    bs->use_scratch = (bs->idx == BOOT_STATUS_IDX_0 && copy_sz != sz);
    3064:	2300      	movs	r3, #0
    3066:	e7ed      	b.n	3044 <swap_run+0xbc>
    rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(image_index),
    3068:	a906      	add	r1, sp, #24
    306a:	2002      	movs	r0, #2
    306c:	f000 ffb6 	bl	3fdc <flash_area_open>
    assert (rc == 0);
    3070:	2800      	cmp	r0, #0
    3072:	d1ed      	bne.n	3050 <swap_run+0xc8>
    rc = flash_area_open(FLASH_AREA_IMAGE_SCRATCH, &fap_scratch);
    3074:	a907      	add	r1, sp, #28
    3076:	2003      	movs	r0, #3
    3078:	f000 ffb0 	bl	3fdc <flash_area_open>
    assert (rc == 0);
    307c:	4601      	mov	r1, r0
    307e:	2800      	cmp	r0, #0
    3080:	d1e6      	bne.n	3050 <swap_run+0xc8>
    if (bs->state == BOOT_STATUS_STATE_0) {
    3082:	7923      	ldrb	r3, [r4, #4]
    3084:	2b01      	cmp	r3, #1
    3086:	d138      	bne.n	30fa <swap_run+0x172>
        rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    3088:	9807      	ldr	r0, [sp, #28]
    308a:	6882      	ldr	r2, [r0, #8]
    308c:	f7ff fbe6 	bl	285c <boot_erase_region>
        assert(rc == 0);
    3090:	2800      	cmp	r0, #0
    3092:	d1dd      	bne.n	3050 <swap_run+0xc8>
        if (bs->idx == BOOT_STATUS_IDX_0) {
    3094:	6823      	ldr	r3, [r4, #0]
    3096:	2b01      	cmp	r3, #1
    3098:	d11c      	bne.n	30d4 <swap_run+0x14c>
            rc = swap_status_init(state, fap_scratch, bs);
    309a:	4622      	mov	r2, r4
    309c:	9907      	ldr	r1, [sp, #28]
    309e:	4628      	mov	r0, r5
    30a0:	f7ff fd65 	bl	2b6e <swap_status_init>
            assert(rc == 0);
    30a4:	2800      	cmp	r0, #0
    30a6:	d1d3      	bne.n	3050 <swap_run+0xc8>
            if (!bs->use_scratch) {
    30a8:	79a3      	ldrb	r3, [r4, #6]
    30aa:	b99b      	cbnz	r3, 30d4 <swap_run+0x14c>
                rc = swap_erase_trailer_sectors(state, fap_primary_slot);
    30ac:	9905      	ldr	r1, [sp, #20]
    30ae:	4628      	mov	r0, r5
    30b0:	f7ff fd1c 	bl	2aec <swap_erase_trailer_sectors>
                assert(rc == 0);
    30b4:	2800      	cmp	r0, #0
    30b6:	d1cb      	bne.n	3050 <swap_run+0xc8>
                rc = swap_status_init(state, fap_primary_slot, bs);
    30b8:	4622      	mov	r2, r4
    30ba:	9905      	ldr	r1, [sp, #20]
    30bc:	4628      	mov	r0, r5
    30be:	f7ff fd56 	bl	2b6e <swap_status_init>
                assert(rc == 0);
    30c2:	2800      	cmp	r0, #0
    30c4:	d1c4      	bne.n	3050 <swap_run+0xc8>
                rc = boot_erase_region(fap_scratch, 0, fap_scratch->fa_size);
    30c6:	9807      	ldr	r0, [sp, #28]
    30c8:	2100      	movs	r1, #0
    30ca:	6882      	ldr	r2, [r0, #8]
    30cc:	f7ff fbc6 	bl	285c <boot_erase_region>
                assert(rc == 0);
    30d0:	2800      	cmp	r0, #0
    30d2:	d1bd      	bne.n	3050 <swap_run+0xc8>
        rc = boot_copy_region(state, fap_secondary_slot, fap_scratch,
    30d4:	2300      	movs	r3, #0
    30d6:	9300      	str	r3, [sp, #0]
    30d8:	9701      	str	r7, [sp, #4]
    30da:	4643      	mov	r3, r8
    30dc:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
    30e0:	4628      	mov	r0, r5
    30e2:	f7ff fbbd 	bl	2860 <boot_copy_region>
        assert(rc == 0);
    30e6:	2800      	cmp	r0, #0
    30e8:	d1b2      	bne.n	3050 <swap_run+0xc8>
        rc = boot_write_status(state, bs);
    30ea:	4621      	mov	r1, r4
    30ec:	4628      	mov	r0, r5
    30ee:	f7ff fb83 	bl	27f8 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_1;
    30f2:	2302      	movs	r3, #2
    30f4:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    30f6:	2800      	cmp	r0, #0
    30f8:	d1aa      	bne.n	3050 <swap_run+0xc8>
    if (bs->state == BOOT_STATUS_STATE_1) {
    30fa:	7923      	ldrb	r3, [r4, #4]
    30fc:	2b02      	cmp	r3, #2
    30fe:	d123      	bne.n	3148 <swap_run+0x1c0>
        rc = boot_erase_region(fap_secondary_slot, img_off, sz);
    3100:	464a      	mov	r2, r9
    3102:	4641      	mov	r1, r8
    3104:	9806      	ldr	r0, [sp, #24]
    3106:	f7ff fba9 	bl	285c <boot_erase_region>
        assert(rc == 0);
    310a:	2800      	cmp	r0, #0
    310c:	d1a0      	bne.n	3050 <swap_run+0xc8>
        rc = boot_copy_region(state, fap_primary_slot, fap_secondary_slot,
    310e:	e9cd 8700 	strd	r8, r7, [sp]
    3112:	4643      	mov	r3, r8
    3114:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
    3118:	4628      	mov	r0, r5
    311a:	f7ff fba1 	bl	2860 <boot_copy_region>
        assert(rc == 0);
    311e:	2800      	cmp	r0, #0
    3120:	d196      	bne.n	3050 <swap_run+0xc8>
        if (bs->idx == BOOT_STATUS_IDX_0 && !bs->use_scratch) {
    3122:	6823      	ldr	r3, [r4, #0]
    3124:	2b01      	cmp	r3, #1
    3126:	d107      	bne.n	3138 <swap_run+0x1b0>
    3128:	79a3      	ldrb	r3, [r4, #6]
    312a:	b92b      	cbnz	r3, 3138 <swap_run+0x1b0>
            rc = swap_erase_trailer_sectors(state, fap_secondary_slot);
    312c:	9906      	ldr	r1, [sp, #24]
    312e:	4628      	mov	r0, r5
    3130:	f7ff fcdc 	bl	2aec <swap_erase_trailer_sectors>
            assert(rc == 0);
    3134:	2800      	cmp	r0, #0
    3136:	d18b      	bne.n	3050 <swap_run+0xc8>
        rc = boot_write_status(state, bs);
    3138:	4621      	mov	r1, r4
    313a:	4628      	mov	r0, r5
    313c:	f7ff fb5c 	bl	27f8 <boot_write_status>
        bs->state = BOOT_STATUS_STATE_2;
    3140:	2303      	movs	r3, #3
    3142:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    3144:	2800      	cmp	r0, #0
    3146:	d183      	bne.n	3050 <swap_run+0xc8>
    if (bs->state == BOOT_STATUS_STATE_2) {
    3148:	7923      	ldrb	r3, [r4, #4]
    314a:	9303      	str	r3, [sp, #12]
    314c:	2b03      	cmp	r3, #3
    314e:	d168      	bne.n	3222 <swap_run+0x29a>
        rc = boot_erase_region(fap_primary_slot, img_off, sz);
    3150:	464a      	mov	r2, r9
    3152:	4641      	mov	r1, r8
    3154:	9805      	ldr	r0, [sp, #20]
    3156:	f7ff fb81 	bl	285c <boot_erase_region>
        assert(rc == 0);
    315a:	4603      	mov	r3, r0
    315c:	2800      	cmp	r0, #0
    315e:	f47f af77 	bne.w	3050 <swap_run+0xc8>
        rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    3162:	e9cd 8700 	strd	r8, r7, [sp]
    3166:	9a05      	ldr	r2, [sp, #20]
    3168:	9907      	ldr	r1, [sp, #28]
    316a:	4628      	mov	r0, r5
    316c:	f7ff fb78 	bl	2860 <boot_copy_region>
        assert(rc == 0);
    3170:	2800      	cmp	r0, #0
    3172:	f47f af6d 	bne.w	3050 <swap_run+0xc8>
        if (bs->use_scratch) {
    3176:	79a3      	ldrb	r3, [r4, #6]
    3178:	2b00      	cmp	r3, #0
    317a:	d039      	beq.n	31f0 <swap_run+0x268>
            scratch_trailer_off = boot_status_off(fap_scratch);
    317c:	9807      	ldr	r0, [sp, #28]
    317e:	f7ff f83e 	bl	21fe <boot_status_off>
            rc = boot_copy_region(state, fap_scratch, fap_primary_slot,
    3182:	6eab      	ldr	r3, [r5, #104]	; 0x68
    3184:	9a05      	ldr	r2, [sp, #20]
    3186:	9907      	ldr	r1, [sp, #28]
    3188:	005b      	lsls	r3, r3, #1
    318a:	4447      	add	r7, r8
    318c:	9301      	str	r3, [sp, #4]
    318e:	9700      	str	r7, [sp, #0]
    3190:	4603      	mov	r3, r0
    3192:	4628      	mov	r0, r5
    3194:	f7ff fb64 	bl	2860 <boot_copy_region>
            BOOT_STATUS_ASSERT(rc == 0);
    3198:	2800      	cmp	r0, #0
    319a:	f47f af59 	bne.w	3050 <swap_run+0xc8>
            rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SCRATCH,
    319e:	a908      	add	r1, sp, #32
    31a0:	9803      	ldr	r0, [sp, #12]
    31a2:	f7ff f8a9 	bl	22f8 <boot_read_swap_state_by_id>
            assert(rc == 0);
    31a6:	2800      	cmp	r0, #0
    31a8:	f47f af52 	bne.w	3050 <swap_run+0xc8>
            if (swap_state.image_ok == BOOT_FLAG_SET) {
    31ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    31b0:	2b01      	cmp	r3, #1
    31b2:	d105      	bne.n	31c0 <swap_run+0x238>
                rc = boot_write_image_ok(fap_primary_slot);
    31b4:	9805      	ldr	r0, [sp, #20]
    31b6:	f7ff f8f7 	bl	23a8 <boot_write_image_ok>
                assert(rc == 0);
    31ba:	2800      	cmp	r0, #0
    31bc:	f47f af48 	bne.w	3050 <swap_run+0xc8>
            if (swap_state.swap_type != BOOT_SWAP_TYPE_NONE) {
    31c0:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    31c4:	2901      	cmp	r1, #1
    31c6:	d006      	beq.n	31d6 <swap_run+0x24e>
                rc = boot_write_swap_info(fap_primary_slot,
    31c8:	2200      	movs	r2, #0
    31ca:	9805      	ldr	r0, [sp, #20]
    31cc:	f7ff f8f8 	bl	23c0 <boot_write_swap_info>
                assert(rc == 0);
    31d0:	2800      	cmp	r0, #0
    31d2:	f47f af3d 	bne.w	3050 <swap_run+0xc8>
            rc = boot_write_swap_size(fap_primary_slot, bs->swap_size);
    31d6:	68a1      	ldr	r1, [r4, #8]
    31d8:	9805      	ldr	r0, [sp, #20]
    31da:	f7ff f90d 	bl	23f8 <boot_write_swap_size>
            assert(rc == 0);
    31de:	2800      	cmp	r0, #0
    31e0:	f47f af36 	bne.w	3050 <swap_run+0xc8>
            rc = boot_write_magic(fap_primary_slot);
    31e4:	9805      	ldr	r0, [sp, #20]
    31e6:	f7ff f8c5 	bl	2374 <boot_write_magic>
            assert(rc == 0);
    31ea:	2800      	cmp	r0, #0
    31ec:	f47f af30 	bne.w	3050 <swap_run+0xc8>
        bs->use_scratch = 0;
    31f0:	f04f 0300 	mov.w	r3, #0
        erase_scratch = bs->use_scratch;
    31f4:	79a7      	ldrb	r7, [r4, #6]
        bs->use_scratch = 0;
    31f6:	71a3      	strb	r3, [r4, #6]
        rc = boot_write_status(state, bs);
    31f8:	4621      	mov	r1, r4
    31fa:	4628      	mov	r0, r5
    31fc:	f7ff fafc 	bl	27f8 <boot_write_status>
        bs->idx++;
    3200:	6823      	ldr	r3, [r4, #0]
    3202:	3301      	adds	r3, #1
    3204:	6023      	str	r3, [r4, #0]
        bs->state = BOOT_STATUS_STATE_0;
    3206:	2301      	movs	r3, #1
    3208:	7123      	strb	r3, [r4, #4]
        BOOT_STATUS_ASSERT(rc == 0);
    320a:	4601      	mov	r1, r0
    320c:	2800      	cmp	r0, #0
    320e:	f47f af1f 	bne.w	3050 <swap_run+0xc8>
        if (erase_scratch) {
    3212:	b137      	cbz	r7, 3222 <swap_run+0x29a>
            rc = boot_erase_region(fap_scratch, 0, sz);
    3214:	464a      	mov	r2, r9
    3216:	9807      	ldr	r0, [sp, #28]
    3218:	f7ff fb20 	bl	285c <boot_erase_region>
            assert(rc == 0);
    321c:	2800      	cmp	r0, #0
    321e:	f47f af17 	bne.w	3050 <swap_run+0xc8>
    while (last_sector_idx >= 0) {
    3222:	1c73      	adds	r3, r6, #1
            boot_swap_sectors(first_sector_idx, sz, state, bs);
        }

        last_sector_idx = first_sector_idx - 1;
        swap_idx++;
    3224:	f10b 0b01 	add.w	fp, fp, #1
    while (last_sector_idx >= 0) {
    3228:	f47f aed8 	bne.w	2fdc <swap_run+0x54>
    }

}
    322c:	b00b      	add	sp, #44	; 0x2c
    322e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (primary_slot_size >= copy_size &&
    3232:	428a      	cmp	r2, r1
    3234:	e6c9      	b.n	2fca <swap_run+0x42>
        if ((secondary_slot_size < copy_size) ||
    3236:	4293      	cmp	r3, r2
    3238:	d205      	bcs.n	3246 <swap_run+0x2be>
    return BOOT_IMG(state, slot).sectors[sector].fa_size;
    323a:	6d2f      	ldr	r7, [r5, #80]	; 0x50
    323c:	fb00 7706 	mla	r7, r0, r6, r7
           secondary_slot_size += boot_img_sector_size(state,
    3240:	68bf      	ldr	r7, [r7, #8]
    3242:	443b      	add	r3, r7
    3244:	e6c0      	b.n	2fc8 <swap_run+0x40>
        if ((secondary_slot_size < copy_size) ||
    3246:	4299      	cmp	r1, r3
    3248:	d8f7      	bhi.n	323a <swap_run+0x2b2>
    324a:	e6bf      	b.n	2fcc <swap_run+0x44>

0000324c <bootutil_img_validate>:
int
bootutil_img_validate(struct enc_key_data *enc_state, int image_index,
                      struct image_header *hdr, const struct flash_area *fap,
                      uint8_t *tmp_buf, uint32_t tmp_buf_sz, uint8_t *seed,
                      int seed_len, uint8_t *out_hash)
{
    324c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3250:	b0af      	sub	sp, #188	; 0xbc
    3252:	e9dd 473a 	ldrd	r4, r7, [sp, #232]	; 0xe8
#ifdef MCUBOOT_USE_MBED_TLS
typedef mbedtls_sha256_context bootutil_sha256_context;

static inline void bootutil_sha256_init(bootutil_sha256_context *ctx)
{
    mbedtls_sha256_init(ctx);
    3256:	ad13      	add	r5, sp, #76	; 0x4c
    3258:	4628      	mov	r0, r5
    325a:	4692      	mov	sl, r2
    325c:	469b      	mov	fp, r3
    325e:	9e3c      	ldr	r6, [sp, #240]	; 0xf0
    3260:	f000 f916 	bl	3490 <mbedtls_sha256_init>
    (void)mbedtls_sha256_starts_ret(ctx, 0);
    3264:	2100      	movs	r1, #0
    3266:	4628      	mov	r0, r5
    3268:	f000 f916 	bl	3498 <mbedtls_sha256_starts_ret>
    if (seed && (seed_len > 0)) {
    326c:	b134      	cbz	r4, 327c <bootutil_img_validate+0x30>
    326e:	2f00      	cmp	r7, #0
    3270:	dd04      	ble.n	327c <bootutil_img_validate+0x30>

static inline void bootutil_sha256_update(bootutil_sha256_context *ctx,
                                          const void *data,
                                          uint32_t data_len)
{
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    3272:	463a      	mov	r2, r7
    3274:	4621      	mov	r1, r4
    3276:	4628      	mov	r0, r5
    3278:	f000 f9f8 	bl	366c <mbedtls_sha256_update_ret>
    size += hdr->ih_protect_tlv_size;
    327c:	f8ba 300a 	ldrh.w	r3, [sl, #10]
    size = hdr_size = hdr->ih_hdr_size;
    3280:	f8ba 7008 	ldrh.w	r7, [sl, #8]
    3284:	441f      	add	r7, r3
    size += hdr->ih_protect_tlv_size;
    3286:	f8da 300c 	ldr.w	r3, [sl, #12]
    for (off = 0; off < size; off += blk_sz) {
    328a:	f04f 0800 	mov.w	r8, #0
    size += hdr->ih_protect_tlv_size;
    328e:	441f      	add	r7, r3
    for (off = 0; off < size; off += blk_sz) {
    3290:	4547      	cmp	r7, r8
    3292:	d828      	bhi.n	32e6 <bootutil_img_validate+0x9a>
}

static inline void bootutil_sha256_finish(bootutil_sha256_context *ctx,
                                          uint8_t *output)
{
    (void)mbedtls_sha256_finish_ret(ctx, output);
    3294:	a90b      	add	r1, sp, #44	; 0x2c
    3296:	4628      	mov	r0, r5
    3298:	f000 fa25 	bl	36e6 <mbedtls_sha256_finish_ret>
            tmp_buf_sz, hash, seed, seed_len);
    if (rc) {
        return rc;
    }

    if (out_hash) {
    329c:	b14e      	cbz	r6, 32b2 <bootutil_img_validate+0x66>
        memcpy(out_hash, hash, 32);
    329e:	aa0b      	add	r2, sp, #44	; 0x2c
    32a0:	4613      	mov	r3, r2
    32a2:	cb03      	ldmia	r3!, {r0, r1}
    32a4:	42ab      	cmp	r3, r5
    32a6:	6030      	str	r0, [r6, #0]
    32a8:	6071      	str	r1, [r6, #4]
    32aa:	461a      	mov	r2, r3
    32ac:	f106 0608 	add.w	r6, r6, #8
    32b0:	d1f6      	bne.n	32a0 <bootutil_img_validate+0x54>
    }

    rc = bootutil_tlv_iter_begin(&it, hdr, fap, IMAGE_TLV_ANY, false);
    32b2:	2300      	movs	r3, #0
    32b4:	9300      	str	r3, [sp, #0]
    32b6:	465a      	mov	r2, fp
    32b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    32bc:	4651      	mov	r1, sl
    32be:	a805      	add	r0, sp, #20
    32c0:	f000 f846 	bl	3350 <bootutil_tlv_iter_begin>
    if (rc) {
    32c4:	4604      	mov	r4, r0
    32c6:	b950      	cbnz	r0, 32de <bootutil_img_validate+0x92>
    /*
     * Traverse through all of the TLVs, performing any checks we know
     * and are able to do.
     */
    while (true) {
        rc = bootutil_tlv_iter_next(&it, &off, &len, &type);
    32c8:	f10d 030e 	add.w	r3, sp, #14
    32cc:	aa03      	add	r2, sp, #12
    32ce:	a904      	add	r1, sp, #16
    32d0:	a805      	add	r0, sp, #20
    32d2:	f000 f889 	bl	33e8 <bootutil_tlv_iter_next>
        if (rc < 0) {
    32d6:	2800      	cmp	r0, #0
    32d8:	da1b      	bge.n	3312 <bootutil_img_validate+0xc6>
            return -1;
    32da:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
        return -1;
    }
#endif

    return 0;
}
    32de:	4620      	mov	r0, r4
    32e0:	b02f      	add	sp, #188	; 0xbc
    32e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    32e6:	9b39      	ldr	r3, [sp, #228]	; 0xe4
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    32e8:	9a38      	ldr	r2, [sp, #224]	; 0xe0
        blk_sz = size - off;
    32ea:	eba7 0908 	sub.w	r9, r7, r8
    32ee:	4599      	cmp	r9, r3
    32f0:	bf28      	it	cs
    32f2:	4699      	movcs	r9, r3
        rc = flash_area_read(fap, off, tmp_buf, blk_sz);
    32f4:	464b      	mov	r3, r9
    32f6:	4641      	mov	r1, r8
    32f8:	4658      	mov	r0, fp
    32fa:	f000 fec3 	bl	4084 <flash_area_read>
        if (rc) {
    32fe:	4604      	mov	r4, r0
    3300:	2800      	cmp	r0, #0
    3302:	d1ec      	bne.n	32de <bootutil_img_validate+0x92>
    (void)mbedtls_sha256_update_ret(ctx, data, data_len);
    3304:	464a      	mov	r2, r9
    3306:	9938      	ldr	r1, [sp, #224]	; 0xe0
    3308:	4628      	mov	r0, r5
    330a:	f000 f9af 	bl	366c <mbedtls_sha256_update_ret>
    for (off = 0; off < size; off += blk_sz) {
    330e:	44c8      	add	r8, r9
    3310:	e7be      	b.n	3290 <bootutil_img_validate+0x44>
        } else if (rc > 0) {
    3312:	d119      	bne.n	3348 <bootutil_img_validate+0xfc>
        if (type == IMAGE_TLV_SHA256) {
    3314:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    3318:	2b10      	cmp	r3, #16
    331a:	d1d5      	bne.n	32c8 <bootutil_img_validate+0x7c>
            if (len != sizeof(hash)) {
    331c:	f8bd 600c 	ldrh.w	r6, [sp, #12]
    3320:	2e20      	cmp	r6, #32
    3322:	d1da      	bne.n	32da <bootutil_img_validate+0x8e>
            rc = flash_area_read(fap, off, buf, sizeof hash);
    3324:	4633      	mov	r3, r6
    3326:	462a      	mov	r2, r5
    3328:	9904      	ldr	r1, [sp, #16]
    332a:	4658      	mov	r0, fp
    332c:	f000 feaa 	bl	4084 <flash_area_read>
            if (rc) {
    3330:	4604      	mov	r4, r0
    3332:	2800      	cmp	r0, #0
    3334:	d1d3      	bne.n	32de <bootutil_img_validate+0x92>
            if (memcmp(hash, buf, sizeof(hash))) {
    3336:	4632      	mov	r2, r6
    3338:	4629      	mov	r1, r5
    333a:	a80b      	add	r0, sp, #44	; 0x2c
    333c:	f7fe fb0e 	bl	195c <memcmp>
            sha256_valid = 1;
    3340:	2401      	movs	r4, #1
            if (memcmp(hash, buf, sizeof(hash))) {
    3342:	2800      	cmp	r0, #0
    3344:	d0c0      	beq.n	32c8 <bootutil_img_validate+0x7c>
    3346:	e7c8      	b.n	32da <bootutil_img_validate+0x8e>
    if (!sha256_valid) {
    3348:	f084 0401 	eor.w	r4, r4, #1
    334c:	4264      	negs	r4, r4
    334e:	e7c6      	b.n	32de <bootutil_img_validate+0x92>

00003350 <bootutil_tlv_iter_begin>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_begin(struct image_tlv_iter *it, const struct image_header *hdr,
                        const struct flash_area *fap, uint16_t type, bool prot)
{
    3350:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    3354:	460e      	mov	r6, r1
    3356:	4617      	mov	r7, r2
    3358:	4699      	mov	r9, r3
    uint32_t off_;
    struct image_tlv_info info;

    if (it == NULL || hdr == NULL || fap == NULL) {
    335a:	4604      	mov	r4, r0
    335c:	b928      	cbnz	r0, 336a <bootutil_tlv_iter_begin+0x1a>
        return -1;
    335e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    // position on first TLV
    it->tlv_off = off_ + sizeof(info);
    return 0;
}
    3362:	4640      	mov	r0, r8
    3364:	b003      	add	sp, #12
    3366:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (it == NULL || hdr == NULL || fap == NULL) {
    336a:	2900      	cmp	r1, #0
    336c:	d0f7      	beq.n	335e <bootutil_tlv_iter_begin+0xe>
    336e:	2a00      	cmp	r2, #0
    3370:	d0f5      	beq.n	335e <bootutil_tlv_iter_begin+0xe>
    off_ = BOOT_TLV_OFF(hdr);
    3372:	68cb      	ldr	r3, [r1, #12]
    3374:	890d      	ldrh	r5, [r1, #8]
    3376:	441d      	add	r5, r3
    if (flash_area_read(fap, off_, &info, sizeof(info))) {
    3378:	2304      	movs	r3, #4
    337a:	eb0d 0203 	add.w	r2, sp, r3
    337e:	4629      	mov	r1, r5
    3380:	4638      	mov	r0, r7
    3382:	f000 fe7f 	bl	4084 <flash_area_read>
    3386:	4680      	mov	r8, r0
    3388:	2800      	cmp	r0, #0
    338a:	d1e8      	bne.n	335e <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic == IMAGE_TLV_PROT_INFO_MAGIC) {
    338c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    3390:	8973      	ldrh	r3, [r6, #10]
    3392:	f646 1208 	movw	r2, #26888	; 0x6908
    3396:	4291      	cmp	r1, r2
    3398:	d123      	bne.n	33e2 <bootutil_tlv_iter_begin+0x92>
        if (hdr->ih_protect_tlv_size != info.it_tlv_tot) {
    339a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
    339e:	4299      	cmp	r1, r3
    33a0:	d1dd      	bne.n	335e <bootutil_tlv_iter_begin+0xe>
        if (flash_area_read(fap, off_ + info.it_tlv_tot, &info, sizeof(info))) {
    33a2:	2304      	movs	r3, #4
    33a4:	eb0d 0203 	add.w	r2, sp, r3
    33a8:	4429      	add	r1, r5
    33aa:	4638      	mov	r0, r7
    33ac:	f000 fe6a 	bl	4084 <flash_area_read>
    33b0:	2800      	cmp	r0, #0
    33b2:	d1d4      	bne.n	335e <bootutil_tlv_iter_begin+0xe>
    if (info.it_magic != IMAGE_TLV_INFO_MAGIC) {
    33b4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
    33b8:	f646 1307 	movw	r3, #26887	; 0x6907
    33bc:	429a      	cmp	r2, r3
    33be:	d1ce      	bne.n	335e <bootutil_tlv_iter_begin+0xe>
    it->prot = prot;
    33c0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    33c4:	72a3      	strb	r3, [r4, #10]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    33c6:	8973      	ldrh	r3, [r6, #10]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    33c8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    it->type = type;
    33cc:	f8a4 9008 	strh.w	r9, [r4, #8]
    it->prot_end = off_ + it->hdr->ih_protect_tlv_size;
    33d0:	442b      	add	r3, r5
    33d2:	60e3      	str	r3, [r4, #12]
    it->tlv_off = off_ + sizeof(info);
    33d4:	3504      	adds	r5, #4
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    33d6:	4413      	add	r3, r2
    it->fap = fap;
    33d8:	e9c4 6700 	strd	r6, r7, [r4]
    it->tlv_end = off_ + it->hdr->ih_protect_tlv_size + info.it_tlv_tot;
    33dc:	6163      	str	r3, [r4, #20]
    it->tlv_off = off_ + sizeof(info);
    33de:	6125      	str	r5, [r4, #16]
    return 0;
    33e0:	e7bf      	b.n	3362 <bootutil_tlv_iter_begin+0x12>
    } else if (hdr->ih_protect_tlv_size != 0) {
    33e2:	2b00      	cmp	r3, #0
    33e4:	d0e6      	beq.n	33b4 <bootutil_tlv_iter_begin+0x64>
    33e6:	e7ba      	b.n	335e <bootutil_tlv_iter_begin+0xe>

000033e8 <bootutil_tlv_iter_next>:
 *          -1 on errors
 */
int
bootutil_tlv_iter_next(struct image_tlv_iter *it, uint32_t *off, uint16_t *len,
                       uint16_t *type)
{
    33e8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    33ec:	460e      	mov	r6, r1
    33ee:	4617      	mov	r7, r2
    33f0:	461d      	mov	r5, r3
    struct image_tlv tlv;
    int rc;

    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    33f2:	4604      	mov	r4, r0
    33f4:	b920      	cbnz	r0, 3400 <bootutil_tlv_iter_next+0x18>
        return -1;
    33f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

        it->tlv_off += sizeof(tlv) + tlv.it_len;
    }

    return 1;
}
    33fa:	b002      	add	sp, #8
    33fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (it == NULL || it->hdr == NULL || it->fap == NULL) {
    3400:	6803      	ldr	r3, [r0, #0]
    3402:	2b00      	cmp	r3, #0
    3404:	d0f7      	beq.n	33f6 <bootutil_tlv_iter_next+0xe>
    3406:	6843      	ldr	r3, [r0, #4]
    3408:	2b00      	cmp	r3, #0
    340a:	d0f4      	beq.n	33f6 <bootutil_tlv_iter_next+0xe>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    340c:	f64f 78ff 	movw	r8, #65535	; 0xffff
    while (it->tlv_off < it->tlv_end) {
    3410:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    3414:	429a      	cmp	r2, r3
    3416:	d216      	bcs.n	3446 <bootutil_tlv_iter_next+0x5e>
        if (it->hdr->ih_protect_tlv_size > 0 && it->tlv_off == it->prot_end) {
    3418:	6823      	ldr	r3, [r4, #0]
    341a:	895b      	ldrh	r3, [r3, #10]
    341c:	b123      	cbz	r3, 3428 <bootutil_tlv_iter_next+0x40>
    341e:	68e3      	ldr	r3, [r4, #12]
    3420:	4293      	cmp	r3, r2
            it->tlv_off += sizeof(struct image_tlv_info);
    3422:	bf04      	itt	eq
    3424:	3304      	addeq	r3, #4
    3426:	6123      	streq	r3, [r4, #16]
        rc = flash_area_read(it->fap, it->tlv_off, &tlv, sizeof tlv);
    3428:	2304      	movs	r3, #4
    342a:	eb0d 0203 	add.w	r2, sp, r3
    342e:	6921      	ldr	r1, [r4, #16]
    3430:	6860      	ldr	r0, [r4, #4]
    3432:	f000 fe27 	bl	4084 <flash_area_read>
        if (rc) {
    3436:	2800      	cmp	r0, #0
    3438:	d1dd      	bne.n	33f6 <bootutil_tlv_iter_next+0xe>
        if (it->prot && it->tlv_off >= it->prot_end) {
    343a:	7aa2      	ldrb	r2, [r4, #10]
    343c:	6923      	ldr	r3, [r4, #16]
    343e:	b122      	cbz	r2, 344a <bootutil_tlv_iter_next+0x62>
    3440:	68e2      	ldr	r2, [r4, #12]
    3442:	429a      	cmp	r2, r3
    3444:	d801      	bhi.n	344a <bootutil_tlv_iter_next+0x62>
            return 1;
    3446:	2001      	movs	r0, #1
    3448:	e7d7      	b.n	33fa <bootutil_tlv_iter_next+0x12>
        if (it->type == IMAGE_TLV_ANY || tlv.it_type == it->type) {
    344a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
    344e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3452:	45c4      	cmp	ip, r8
    3454:	f102 0104 	add.w	r1, r2, #4
    3458:	d003      	beq.n	3462 <bootutil_tlv_iter_next+0x7a>
    345a:	f8bd e004 	ldrh.w	lr, [sp, #4]
    345e:	45e6      	cmp	lr, ip
    3460:	d10b      	bne.n	347a <bootutil_tlv_iter_next+0x92>
            if (type != NULL) {
    3462:	b11d      	cbz	r5, 346c <bootutil_tlv_iter_next+0x84>
                *type = tlv.it_type;
    3464:	f8bd c004 	ldrh.w	ip, [sp, #4]
    3468:	f8a5 c000 	strh.w	ip, [r5]
            *off = it->tlv_off + sizeof(tlv);
    346c:	3304      	adds	r3, #4
    346e:	6033      	str	r3, [r6, #0]
            *len = tlv.it_len;
    3470:	803a      	strh	r2, [r7, #0]
            it->tlv_off += sizeof(tlv) + tlv.it_len;
    3472:	6922      	ldr	r2, [r4, #16]
    3474:	440a      	add	r2, r1
    3476:	6122      	str	r2, [r4, #16]
            return 0;
    3478:	e7bf      	b.n	33fa <bootutil_tlv_iter_next+0x12>
        it->tlv_off += sizeof(tlv) + tlv.it_len;
    347a:	440b      	add	r3, r1
    347c:	6123      	str	r3, [r4, #16]
    347e:	e7c7      	b.n	3410 <bootutil_tlv_iter_next+0x28>

00003480 <flash_area_id_from_multi_image_slot>:
#include <flash_map/flash_map.h>
#include <flash_map_backend/flash_map_backend.h>

int flash_area_id_from_multi_image_slot(int image_index, int slot)
{
    switch (slot) {
    3480:	b121      	cbz	r1, 348c <flash_area_id_from_multi_image_slot+0xc>
    3482:	2901      	cmp	r1, #1
    case 1: return FLASH_AREA_IMAGE_SECONDARY(image_index);
#if MCUBOOT_SWAP_USING_SCRATCH
    case 2: return FLASH_AREA_IMAGE_SCRATCH;
#endif
    }
    return 255;
    3484:	bf0c      	ite	eq
    3486:	2002      	moveq	r0, #2
    3488:	20ff      	movne	r0, #255	; 0xff
    348a:	4770      	bx	lr
    case 0: return FLASH_AREA_IMAGE_PRIMARY(image_index);
    348c:	2001      	movs	r0, #1
}
    348e:	4770      	bx	lr

00003490 <mbedtls_sha256_init>:

void mbedtls_sha256_init( mbedtls_sha256_context *ctx )
{
    SHA256_VALIDATE( ctx != NULL );

    memset( ctx, 0, sizeof( mbedtls_sha256_context ) );
    3490:	226c      	movs	r2, #108	; 0x6c
    3492:	2100      	movs	r1, #0
    3494:	f7fe ba93 	b.w	19be <memset>

00003498 <mbedtls_sha256_starts_ret>:
int mbedtls_sha256_starts_ret( mbedtls_sha256_context *ctx, int is224 )
{
    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( is224 == 0 || is224 == 1 );

    ctx->total[0] = 0;
    3498:	2300      	movs	r3, #0
    ctx->total[1] = 0;
    349a:	e9c0 3300 	strd	r3, r3, [r0]

    if( is224 == 0 )
    349e:	b9c1      	cbnz	r1, 34d2 <mbedtls_sha256_starts_ret+0x3a>
    {
        /* SHA-256 */
        ctx->state[0] = 0x6A09E667;
        ctx->state[1] = 0xBB67AE85;
    34a0:	4a19      	ldr	r2, [pc, #100]	; (3508 <mbedtls_sha256_starts_ret+0x70>)
    34a2:	4b1a      	ldr	r3, [pc, #104]	; (350c <mbedtls_sha256_starts_ret+0x74>)
        ctx->state[2] = 0x3C6EF372;
        ctx->state[3] = 0xA54FF53A;
    34a4:	f8df c08c 	ldr.w	ip, [pc, #140]	; 3534 <mbedtls_sha256_starts_ret+0x9c>
        ctx->state[1] = 0xBB67AE85;
    34a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[3] = 0xA54FF53A;
    34ac:	4b18      	ldr	r3, [pc, #96]	; (3510 <mbedtls_sha256_starts_ret+0x78>)
        ctx->state[4] = 0x510E527F;
        ctx->state[5] = 0x9B05688C;
    34ae:	4a19      	ldr	r2, [pc, #100]	; (3514 <mbedtls_sha256_starts_ret+0x7c>)
        ctx->state[3] = 0xA54FF53A;
    34b0:	e9c0 c304 	strd	ip, r3, [r0, #16]
        ctx->state[5] = 0x9B05688C;
    34b4:	4b18      	ldr	r3, [pc, #96]	; (3518 <mbedtls_sha256_starts_ret+0x80>)
    34b6:	e9c0 2306 	strd	r2, r3, [r0, #24]
        ctx->state[6] = 0x1F83D9AB;
    34ba:	4b18      	ldr	r3, [pc, #96]	; (351c <mbedtls_sha256_starts_ret+0x84>)
    34bc:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0x5BE0CD19;
    34be:	f103 5374 	add.w	r3, r3, #1023410176	; 0x3d000000
    34c2:	f5a3 0323 	sub.w	r3, r3, #10682368	; 0xa30000
    34c6:	f6a3 4392 	subw	r3, r3, #3218	; 0xc92
        ctx->state[2] = 0x3070DD17;
        ctx->state[3] = 0xF70E5939;
        ctx->state[4] = 0xFFC00B31;
        ctx->state[5] = 0x68581511;
        ctx->state[6] = 0x64F98FA7;
        ctx->state[7] = 0xBEFA4FA4;
    34ca:	6243      	str	r3, [r0, #36]	; 0x24
    }

    ctx->is224 = is224;
    34cc:	6681      	str	r1, [r0, #104]	; 0x68

    return( 0 );
}
    34ce:	2000      	movs	r0, #0
    34d0:	4770      	bx	lr
        ctx->state[1] = 0x367CD507;
    34d2:	4b13      	ldr	r3, [pc, #76]	; (3520 <mbedtls_sha256_starts_ret+0x88>)
    34d4:	4a13      	ldr	r2, [pc, #76]	; (3524 <mbedtls_sha256_starts_ret+0x8c>)
        ctx->state[4] = 0xFFC00B31;
    34d6:	f8df c060 	ldr.w	ip, [pc, #96]	; 3538 <mbedtls_sha256_starts_ret+0xa0>
        ctx->state[1] = 0x367CD507;
    34da:	e9c0 2302 	strd	r2, r3, [r0, #8]
        ctx->state[2] = 0x3070DD17;
    34de:	f103 4379 	add.w	r3, r3, #4177526784	; 0xf9000000
    34e2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
    34e6:	f503 6301 	add.w	r3, r3, #2064	; 0x810
    34ea:	6103      	str	r3, [r0, #16]
        ctx->state[4] = 0xFFC00B31;
    34ec:	4b0e      	ldr	r3, [pc, #56]	; (3528 <mbedtls_sha256_starts_ret+0x90>)
    34ee:	e9c0 c305 	strd	ip, r3, [r0, #20]
        ctx->state[5] = 0x68581511;
    34f2:	f103 43d1 	add.w	r3, r3, #1753219072	; 0x68800000
    34f6:	f503 13c0 	add.w	r3, r3, #1572864	; 0x180000
    34fa:	f503 631e 	add.w	r3, r3, #2528	; 0x9e0
    34fe:	61c3      	str	r3, [r0, #28]
        ctx->state[6] = 0x64F98FA7;
    3500:	4b0a      	ldr	r3, [pc, #40]	; (352c <mbedtls_sha256_starts_ret+0x94>)
    3502:	6203      	str	r3, [r0, #32]
        ctx->state[7] = 0xBEFA4FA4;
    3504:	4b0a      	ldr	r3, [pc, #40]	; (3530 <mbedtls_sha256_starts_ret+0x98>)
    3506:	e7e0      	b.n	34ca <mbedtls_sha256_starts_ret+0x32>
    3508:	6a09e667 	.word	0x6a09e667
    350c:	bb67ae85 	.word	0xbb67ae85
    3510:	a54ff53a 	.word	0xa54ff53a
    3514:	510e527f 	.word	0x510e527f
    3518:	9b05688c 	.word	0x9b05688c
    351c:	1f83d9ab 	.word	0x1f83d9ab
    3520:	367cd507 	.word	0x367cd507
    3524:	c1059ed8 	.word	0xc1059ed8
    3528:	ffc00b31 	.word	0xffc00b31
    352c:	64f98fa7 	.word	0x64f98fa7
    3530:	befa4fa4 	.word	0xbefa4fa4
    3534:	3c6ef372 	.word	0x3c6ef372
    3538:	f70e5939 	.word	0xf70e5939

0000353c <mbedtls_internal_sha256_process>:
        (d) += temp1; (h) = temp1 + temp2;              \
    } while( 0 )

int mbedtls_internal_sha256_process( mbedtls_sha256_context *ctx,
                                const unsigned char data[64] )
{
    353c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3540:	b0cb      	sub	sp, #300	; 0x12c
    3542:	f100 0308 	add.w	r3, r0, #8
    3546:	9300      	str	r3, [sp, #0]
    3548:	461a      	mov	r2, r3
    354a:	9101      	str	r1, [sp, #4]
    unsigned int i;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( (const unsigned char *)data != NULL );

    for( i = 0; i < 8; i++ )
    354c:	2300      	movs	r3, #0
        A[i] = ctx->state[i];
    354e:	a802      	add	r0, sp, #8
    3550:	f852 1b04 	ldr.w	r1, [r2], #4
    3554:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    for( i = 0; i < 8; i++ )
    3558:	3301      	adds	r3, #1
    355a:	2b08      	cmp	r3, #8
    355c:	d1f7      	bne.n	354e <mbedtls_internal_sha256_process+0x12>
    355e:	e9dd 8707 	ldrd	r8, r7, [sp, #28]
    3562:	e9dd 3602 	ldrd	r3, r6, [sp, #8]
    3566:	e9dd eb04 	ldrd	lr, fp, [sp, #16]
    356a:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    356e:	9906      	ldr	r1, [sp, #24]
    3570:	aa09      	add	r2, sp, #36	; 0x24

#if defined(MBEDTLS_SHA256_SMALLER)
    for( i = 0; i < 64; i++ )
    3572:	2400      	movs	r4, #0
    {
        if( i < 16 )
    3574:	2c0f      	cmp	r4, #15
    3576:	d85e      	bhi.n	3636 <mbedtls_internal_sha256_process+0xfa>
    3578:	9d01      	ldr	r5, [sp, #4]
    357a:	eb05 0c84 	add.w	ip, r5, r4, lsl #2
            GET_UINT32_BE( W[i], data, 4 * i );
    357e:	f815 a024 	ldrb.w	sl, [r5, r4, lsl #2]
    3582:	f89c 5003 	ldrb.w	r5, [ip, #3]
    3586:	ea45 650a 	orr.w	r5, r5, sl, lsl #24
    358a:	f89c a001 	ldrb.w	sl, [ip, #1]
    358e:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
    3592:	f89c a002 	ldrb.w	sl, [ip, #2]
    3596:	ea45 250a 	orr.w	r5, r5, sl, lsl #8
        else
            R( i );
    359a:	6055      	str	r5, [r2, #4]

        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    359c:	ea4f 2cf1 	mov.w	ip, r1, ror #11
    35a0:	ea88 0507 	eor.w	r5, r8, r7
    35a4:	ea8c 1cb1 	eor.w	ip, ip, r1, ror #6
    35a8:	400d      	ands	r5, r1
    35aa:	ea8c 6a71 	eor.w	sl, ip, r1, ror #25
    35ae:	407d      	eors	r5, r7
    35b0:	eb0a 0c05 	add.w	ip, sl, r5
    35b4:	4d2c      	ldr	r5, [pc, #176]	; (3668 <mbedtls_internal_sha256_process+0x12c>)
    35b6:	f855 5024 	ldr.w	r5, [r5, r4, lsl #2]
    35ba:	4465      	add	r5, ip
    35bc:	f852 cf04 	ldr.w	ip, [r2, #4]!
    35c0:	4465      	add	r5, ip
    35c2:	44a9      	add	r9, r5
    35c4:	ea46 0a03 	orr.w	sl, r6, r3
    35c8:	ea4f 3573 	mov.w	r5, r3, ror #13
    35cc:	eb09 0c0b 	add.w	ip, r9, fp
    35d0:	ea85 05b3 	eor.w	r5, r5, r3, ror #2
    35d4:	ea06 0b03 	and.w	fp, r6, r3
    35d8:	ea0a 0a0e 	and.w	sl, sl, lr
    35dc:	ea4a 0a0b 	orr.w	sl, sl, fp
    35e0:	ea85 55b3 	eor.w	r5, r5, r3, ror #22
    for( i = 0; i < 64; i++ )
    35e4:	3401      	adds	r4, #1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    35e6:	4455      	add	r5, sl
    for( i = 0; i < 64; i++ )
    35e8:	2c40      	cmp	r4, #64	; 0x40
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    35ea:	444d      	add	r5, r9
    35ec:	46f3      	mov	fp, lr
    35ee:	46b9      	mov	r9, r7
    for( i = 0; i < 64; i++ )
    35f0:	d11a      	bne.n	3628 <mbedtls_internal_sha256_process+0xec>
    35f2:	e9cd 1807 	strd	r1, r8, [sp, #28]
    35f6:	e9cd 6e04 	strd	r6, lr, [sp, #16]
    35fa:	e9cd 5302 	strd	r5, r3, [sp, #8]
    35fe:	9709      	str	r7, [sp, #36]	; 0x24
    3600:	f8cd c018 	str.w	ip, [sp, #24]
        P( A[2], A[3], A[4], A[5], A[6], A[7], A[0], A[1], R(i+6), K[i+6] );
        P( A[1], A[2], A[3], A[4], A[5], A[6], A[7], A[0], R(i+7), K[i+7] );
    }
#endif /* MBEDTLS_SHA256_SMALLER */

    for( i = 0; i < 8; i++ )
    3604:	2300      	movs	r3, #0
        ctx->state[i] += A[i];
    3606:	9a00      	ldr	r2, [sp, #0]
    3608:	6811      	ldr	r1, [r2, #0]
    360a:	aa02      	add	r2, sp, #8
    360c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3610:	440a      	add	r2, r1
    3612:	9900      	ldr	r1, [sp, #0]
    for( i = 0; i < 8; i++ )
    3614:	3301      	adds	r3, #1
        ctx->state[i] += A[i];
    3616:	f841 2b04 	str.w	r2, [r1], #4
    for( i = 0; i < 8; i++ )
    361a:	2b08      	cmp	r3, #8
        ctx->state[i] += A[i];
    361c:	9100      	str	r1, [sp, #0]
    for( i = 0; i < 8; i++ )
    361e:	d1f2      	bne.n	3606 <mbedtls_internal_sha256_process+0xca>

    return( 0 );
}
    3620:	2000      	movs	r0, #0
    3622:	b04b      	add	sp, #300	; 0x12c
    3624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3628:	46b6      	mov	lr, r6
    362a:	4647      	mov	r7, r8
    362c:	461e      	mov	r6, r3
    362e:	4688      	mov	r8, r1
        P( A[0], A[1], A[2], A[3], A[4], A[5], A[6], A[7], W[i], K[i] );
    3630:	462b      	mov	r3, r5
    3632:	4661      	mov	r1, ip
    3634:	e79e      	b.n	3574 <mbedtls_internal_sha256_process+0x38>
            R( i );
    3636:	f852 5c04 	ldr.w	r5, [r2, #-4]
    363a:	f852 ac38 	ldr.w	sl, [r2, #-56]
    363e:	f852 0c18 	ldr.w	r0, [r2, #-24]
    3642:	ea4f 4cf5 	mov.w	ip, r5, ror #19
    3646:	ea8c 4c75 	eor.w	ip, ip, r5, ror #17
    364a:	ea8c 2c95 	eor.w	ip, ip, r5, lsr #10
    364e:	f852 5c3c 	ldr.w	r5, [r2, #-60]
    3652:	4428      	add	r0, r5
    3654:	ea4f 45ba 	mov.w	r5, sl, ror #18
    3658:	ea85 15fa 	eor.w	r5, r5, sl, ror #7
    365c:	4484      	add	ip, r0
    365e:	ea85 0ada 	eor.w	sl, r5, sl, lsr #3
    3662:	eb0c 050a 	add.w	r5, ip, sl
    3666:	e798      	b.n	359a <mbedtls_internal_sha256_process+0x5e>
    3668:	00004d80 	.word	0x00004d80

0000366c <mbedtls_sha256_update_ret>:
 * SHA-256 process buffer
 */
int mbedtls_sha256_update_ret( mbedtls_sha256_context *ctx,
                               const unsigned char *input,
                               size_t ilen )
{
    366c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3670:	4605      	mov	r5, r0
    3672:	460e      	mov	r6, r1
    uint32_t left;

    SHA256_VALIDATE_RET( ctx != NULL );
    SHA256_VALIDATE_RET( ilen == 0 || input != NULL );

    if( ilen == 0 )
    3674:	4614      	mov	r4, r2
    3676:	b912      	cbnz	r2, 367e <mbedtls_sha256_update_ret+0x12>
    }

    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );

    return( 0 );
    3678:	2000      	movs	r0, #0
}
    367a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    left = ctx->total[0] & 0x3F;
    367e:	6803      	ldr	r3, [r0, #0]
    3680:	f003 073f 	and.w	r7, r3, #63	; 0x3f
    3684:	18d3      	adds	r3, r2, r3
    ctx->total[0] += (uint32_t) ilen;
    3686:	6003      	str	r3, [r0, #0]
        ctx->total[1]++;
    3688:	bf22      	ittt	cs
    368a:	6843      	ldrcs	r3, [r0, #4]
    368c:	3301      	addcs	r3, #1
    368e:	6043      	strcs	r3, [r0, #4]
    if( left && ilen >= fill )
    3690:	b1a7      	cbz	r7, 36bc <mbedtls_sha256_update_ret+0x50>
    fill = 64 - left;
    3692:	f1c7 0840 	rsb	r8, r7, #64	; 0x40
    if( left && ilen >= fill )
    3696:	4542      	cmp	r2, r8
    3698:	d310      	bcc.n	36bc <mbedtls_sha256_update_ret+0x50>
        memcpy( (void *) (ctx->buffer + left), input, fill );
    369a:	f100 0928 	add.w	r9, r0, #40	; 0x28
    369e:	4642      	mov	r2, r8
    36a0:	eb09 0007 	add.w	r0, r9, r7
    36a4:	f7fe f97e 	bl	19a4 <memcpy>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    36a8:	4649      	mov	r1, r9
    36aa:	4628      	mov	r0, r5
    36ac:	f7ff ff46 	bl	353c <mbedtls_internal_sha256_process>
    36b0:	2800      	cmp	r0, #0
    36b2:	d1e2      	bne.n	367a <mbedtls_sha256_update_ret+0xe>
        input += fill;
    36b4:	4446      	add	r6, r8
        ilen  -= fill;
    36b6:	eba4 0408 	sub.w	r4, r4, r8
        left = 0;
    36ba:	4607      	mov	r7, r0
    36bc:	4426      	add	r6, r4
    36be:	e005      	b.n	36cc <mbedtls_sha256_update_ret+0x60>
        if( ( ret = mbedtls_internal_sha256_process( ctx, input ) ) != 0 )
    36c0:	4628      	mov	r0, r5
    36c2:	f7ff ff3b 	bl	353c <mbedtls_internal_sha256_process>
    36c6:	2800      	cmp	r0, #0
    36c8:	d1d7      	bne.n	367a <mbedtls_sha256_update_ret+0xe>
        ilen  -= 64;
    36ca:	3c40      	subs	r4, #64	; 0x40
    while( ilen >= 64 )
    36cc:	2c3f      	cmp	r4, #63	; 0x3f
    36ce:	eba6 0104 	sub.w	r1, r6, r4
    36d2:	d8f5      	bhi.n	36c0 <mbedtls_sha256_update_ret+0x54>
    if( ilen > 0 )
    36d4:	2c00      	cmp	r4, #0
    36d6:	d0cf      	beq.n	3678 <mbedtls_sha256_update_ret+0xc>
        memcpy( (void *) (ctx->buffer + left), input, ilen );
    36d8:	f105 0028 	add.w	r0, r5, #40	; 0x28
    36dc:	4622      	mov	r2, r4
    36de:	4438      	add	r0, r7
    36e0:	f7fe f960 	bl	19a4 <memcpy>
    36e4:	e7c8      	b.n	3678 <mbedtls_sha256_update_ret+0xc>

000036e6 <mbedtls_sha256_finish_ret>:
    SHA256_VALIDATE_RET( (unsigned char *)output != NULL );

    /*
     * Add padding: 0x80 then 0x00 until 8 bytes remain for the length
     */
    used = ctx->total[0] & 0x3F;
    36e6:	6803      	ldr	r3, [r0, #0]
    36e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f

    ctx->buffer[used++] = 0x80;
    36ec:	1c5a      	adds	r2, r3, #1
    36ee:	4403      	add	r3, r0
{
    36f0:	b570      	push	{r4, r5, r6, lr}

    if( used <= 56 )
    36f2:	2a38      	cmp	r2, #56	; 0x38
{
    36f4:	460d      	mov	r5, r1
    36f6:	f100 0628 	add.w	r6, r0, #40	; 0x28
    ctx->buffer[used++] = 0x80;
    36fa:	f04f 0180 	mov.w	r1, #128	; 0x80
{
    36fe:	4604      	mov	r4, r0
    ctx->buffer[used++] = 0x80;
    3700:	f883 1028 	strb.w	r1, [r3, #40]	; 0x28
    3704:	eb06 0002 	add.w	r0, r6, r2
    if( used <= 56 )
    3708:	d873      	bhi.n	37f2 <mbedtls_sha256_finish_ret+0x10c>
    {
        /* Enough room for padding + length in current block */
        memset( ctx->buffer + used, 0, 56 - used );
    370a:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
    370e:	2100      	movs	r1, #0
        memset( ctx->buffer + used, 0, 64 - used );

        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
            return( ret );

        memset( ctx->buffer, 0, 56 );
    3710:	f7fe f955 	bl	19be <memset>

    /*
     * Add message length
     */
    high = ( ctx->total[0] >> 29 )
         | ( ctx->total[1] <<  3 );
    3714:	e9d4 3100 	ldrd	r3, r1, [r4]
    high = ( ctx->total[0] >> 29 )
    3718:	0f5a      	lsrs	r2, r3, #29
    371a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
    low  = ( ctx->total[0] <<  3 );

    PUT_UINT32_BE( high, ctx->buffer, 56 );
    371e:	0e11      	lsrs	r1, r2, #24
    low  = ( ctx->total[0] <<  3 );
    3720:	00db      	lsls	r3, r3, #3
    PUT_UINT32_BE( high, ctx->buffer, 56 );
    3722:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    3726:	0c11      	lsrs	r1, r2, #16
    3728:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
    372c:	f884 2063 	strb.w	r2, [r4, #99]	; 0x63
    3730:	0a11      	lsrs	r1, r2, #8
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    3732:	0e1a      	lsrs	r2, r3, #24
    3734:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
    3738:	0c1a      	lsrs	r2, r3, #16
    373a:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
    373e:	0a1a      	lsrs	r2, r3, #8
    PUT_UINT32_BE( high, ctx->buffer, 56 );
    3740:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
    PUT_UINT32_BE( low,  ctx->buffer, 60 );
    3744:	f884 2066 	strb.w	r2, [r4, #102]	; 0x66
    3748:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67

    if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    374c:	4631      	mov	r1, r6
    374e:	4620      	mov	r0, r4
    3750:	f7ff fef4 	bl	353c <mbedtls_internal_sha256_process>
    3754:	2800      	cmp	r0, #0
    3756:	d14b      	bne.n	37f0 <mbedtls_sha256_finish_ret+0x10a>
        return( ret );

    /*
     * Output final state
     */
    PUT_UINT32_BE( ctx->state[0], output,  0 );
    3758:	7ae3      	ldrb	r3, [r4, #11]
    375a:	702b      	strb	r3, [r5, #0]
    375c:	8963      	ldrh	r3, [r4, #10]
    375e:	706b      	strb	r3, [r5, #1]
    3760:	68a3      	ldr	r3, [r4, #8]
    3762:	0a1b      	lsrs	r3, r3, #8
    3764:	70ab      	strb	r3, [r5, #2]
    3766:	68a3      	ldr	r3, [r4, #8]
    3768:	70eb      	strb	r3, [r5, #3]
    PUT_UINT32_BE( ctx->state[1], output,  4 );
    376a:	7be3      	ldrb	r3, [r4, #15]
    376c:	712b      	strb	r3, [r5, #4]
    376e:	89e3      	ldrh	r3, [r4, #14]
    3770:	716b      	strb	r3, [r5, #5]
    3772:	68e3      	ldr	r3, [r4, #12]
    3774:	0a1b      	lsrs	r3, r3, #8
    3776:	71ab      	strb	r3, [r5, #6]
    3778:	68e3      	ldr	r3, [r4, #12]
    377a:	71eb      	strb	r3, [r5, #7]
    PUT_UINT32_BE( ctx->state[2], output,  8 );
    377c:	7ce3      	ldrb	r3, [r4, #19]
    377e:	722b      	strb	r3, [r5, #8]
    3780:	8a63      	ldrh	r3, [r4, #18]
    3782:	726b      	strb	r3, [r5, #9]
    3784:	6923      	ldr	r3, [r4, #16]
    3786:	0a1b      	lsrs	r3, r3, #8
    3788:	72ab      	strb	r3, [r5, #10]
    378a:	6923      	ldr	r3, [r4, #16]
    378c:	72eb      	strb	r3, [r5, #11]
    PUT_UINT32_BE( ctx->state[3], output, 12 );
    378e:	7de3      	ldrb	r3, [r4, #23]
    3790:	732b      	strb	r3, [r5, #12]
    3792:	8ae3      	ldrh	r3, [r4, #22]
    3794:	736b      	strb	r3, [r5, #13]
    3796:	6963      	ldr	r3, [r4, #20]
    3798:	0a1b      	lsrs	r3, r3, #8
    379a:	73ab      	strb	r3, [r5, #14]
    379c:	6963      	ldr	r3, [r4, #20]
    379e:	73eb      	strb	r3, [r5, #15]
    PUT_UINT32_BE( ctx->state[4], output, 16 );
    37a0:	7ee3      	ldrb	r3, [r4, #27]
    37a2:	742b      	strb	r3, [r5, #16]
    37a4:	8b63      	ldrh	r3, [r4, #26]
    37a6:	746b      	strb	r3, [r5, #17]
    37a8:	69a3      	ldr	r3, [r4, #24]
    37aa:	0a1b      	lsrs	r3, r3, #8
    37ac:	74ab      	strb	r3, [r5, #18]
    37ae:	69a3      	ldr	r3, [r4, #24]
    37b0:	74eb      	strb	r3, [r5, #19]
    PUT_UINT32_BE( ctx->state[5], output, 20 );
    37b2:	7fe3      	ldrb	r3, [r4, #31]
    37b4:	752b      	strb	r3, [r5, #20]
    37b6:	8be3      	ldrh	r3, [r4, #30]
    37b8:	756b      	strb	r3, [r5, #21]
    37ba:	69e3      	ldr	r3, [r4, #28]
    37bc:	0a1b      	lsrs	r3, r3, #8
    37be:	75ab      	strb	r3, [r5, #22]
    37c0:	69e3      	ldr	r3, [r4, #28]
    37c2:	75eb      	strb	r3, [r5, #23]
    PUT_UINT32_BE( ctx->state[6], output, 24 );
    37c4:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
    37c8:	762b      	strb	r3, [r5, #24]
    37ca:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    37cc:	766b      	strb	r3, [r5, #25]
    37ce:	6a23      	ldr	r3, [r4, #32]
    37d0:	0a1b      	lsrs	r3, r3, #8
    37d2:	76ab      	strb	r3, [r5, #26]
    37d4:	6a23      	ldr	r3, [r4, #32]
    37d6:	76eb      	strb	r3, [r5, #27]

    if( ctx->is224 == 0 )
    37d8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    37da:	b94b      	cbnz	r3, 37f0 <mbedtls_sha256_finish_ret+0x10a>
        PUT_UINT32_BE( ctx->state[7], output, 28 );
    37dc:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    37e0:	772b      	strb	r3, [r5, #28]
    37e2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    37e4:	776b      	strb	r3, [r5, #29]
    37e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    37e8:	0a1b      	lsrs	r3, r3, #8
    37ea:	77ab      	strb	r3, [r5, #30]
    37ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    37ee:	77eb      	strb	r3, [r5, #31]

    return( 0 );
}
    37f0:	bd70      	pop	{r4, r5, r6, pc}
        memset( ctx->buffer + used, 0, 64 - used );
    37f2:	2100      	movs	r1, #0
    37f4:	f1c2 0240 	rsb	r2, r2, #64	; 0x40
    37f8:	f7fe f8e1 	bl	19be <memset>
        if( ( ret = mbedtls_internal_sha256_process( ctx, ctx->buffer ) ) != 0 )
    37fc:	4631      	mov	r1, r6
    37fe:	4620      	mov	r0, r4
    3800:	f7ff fe9c 	bl	353c <mbedtls_internal_sha256_process>
    3804:	2800      	cmp	r0, #0
    3806:	d1f3      	bne.n	37f0 <mbedtls_sha256_finish_ret+0x10a>
        memset( ctx->buffer, 0, 56 );
    3808:	4601      	mov	r1, r0
    380a:	2238      	movs	r2, #56	; 0x38
    380c:	4630      	mov	r0, r6
    380e:	e77f      	b.n	3710 <mbedtls_sha256_finish_ret+0x2a>

00003810 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
    3810:	6843      	ldr	r3, [r0, #4]
    3812:	428b      	cmp	r3, r1
    3814:	d807      	bhi.n	3826 <hal_flash_check_addr+0x16>
    3816:	6882      	ldr	r2, [r0, #8]
    3818:	4413      	add	r3, r2
    381a:	428b      	cmp	r3, r1
        return SYS_EINVAL;
    }
    return 0;
    381c:	bf34      	ite	cc
    381e:	f06f 0001 	mvncc.w	r0, #1
    3822:	2000      	movcs	r0, #0
    3824:	4770      	bx	lr
        return SYS_EINVAL;
    3826:	f06f 0001 	mvn.w	r0, #1
}
    382a:	4770      	bx	lr

0000382c <hal_flash_init>:
{
    382c:	b538      	push	{r3, r4, r5, lr}
    382e:	2400      	movs	r4, #0
    int rc = 0;
    3830:	4625      	mov	r5, r4
        hf = hal_bsp_flash_dev(i);
    3832:	b2e0      	uxtb	r0, r4
    3834:	f7fc fe32 	bl	49c <hal_bsp_flash_dev>
        if (!hf) {
    3838:	b140      	cbz	r0, 384c <hal_flash_init+0x20>
        if (hf->hf_itf->hff_init(hf)) {
    383a:	6803      	ldr	r3, [r0, #0]
    383c:	695b      	ldr	r3, [r3, #20]
    383e:	4798      	blx	r3
            rc = SYS_EIO;
    3840:	2800      	cmp	r0, #0
    3842:	bf18      	it	ne
    3844:	f06f 0504 	mvnne.w	r5, #4
    3848:	3401      	adds	r4, #1
        hf = hal_bsp_flash_dev(i);
    384a:	e7f2      	b.n	3832 <hal_flash_init+0x6>
}
    384c:	4628      	mov	r0, r5
    384e:	bd38      	pop	{r3, r4, r5, pc}

00003850 <hal_flash_align>:
{
    3850:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    3852:	f7fc fe23 	bl	49c <hal_bsp_flash_dev>
    if (!hf) {
    3856:	b108      	cbz	r0, 385c <hal_flash_align+0xc>
    return hf->hf_align;
    3858:	7c00      	ldrb	r0, [r0, #16]
}
    385a:	bd08      	pop	{r3, pc}
        return 1;
    385c:	2001      	movs	r0, #1
    385e:	e7fc      	b.n	385a <hal_flash_align+0xa>

00003860 <hal_flash_erased_val>:
{
    3860:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
    3862:	f7fc fe1b 	bl	49c <hal_bsp_flash_dev>
    if (!hf) {
    3866:	b108      	cbz	r0, 386c <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
    3868:	7d00      	ldrb	r0, [r0, #20]
}
    386a:	bd08      	pop	{r3, pc}
        return 1;
    386c:	2001      	movs	r0, #1
    386e:	e7fc      	b.n	386a <hal_flash_erased_val+0xa>

00003870 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    3870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3874:	460d      	mov	r5, r1
    3876:	4690      	mov	r8, r2
    3878:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    387a:	f7fc fe0f 	bl	49c <hal_bsp_flash_dev>
    if (!hf) {
    387e:	4604      	mov	r4, r0
    3880:	b1a8      	cbz	r0, 38ae <hal_flash_read+0x3e>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3882:	4629      	mov	r1, r5
    3884:	f7ff ffc4 	bl	3810 <hal_flash_check_addr>
    3888:	b988      	cbnz	r0, 38ae <hal_flash_read+0x3e>
      hal_flash_check_addr(hf, address + num_bytes)) {
    388a:	19a9      	adds	r1, r5, r6
    388c:	4620      	mov	r0, r4
    388e:	f7ff ffbf 	bl	3810 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3892:	b960      	cbnz	r0, 38ae <hal_flash_read+0x3e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    3894:	6823      	ldr	r3, [r4, #0]
    3896:	4642      	mov	r2, r8
    3898:	681f      	ldr	r7, [r3, #0]
    389a:	4629      	mov	r1, r5
    389c:	4633      	mov	r3, r6
    389e:	4620      	mov	r0, r4
    38a0:	47b8      	blx	r7
    if (rc != 0) {
    38a2:	2800      	cmp	r0, #0
        return SYS_EIO;
    38a4:	bf18      	it	ne
    38a6:	f06f 0004 	mvnne.w	r0, #4
    }

    return 0;
}
    38aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    38ae:	f06f 0001 	mvn.w	r0, #1
    38b2:	e7fa      	b.n	38aa <hal_flash_read+0x3a>

000038b4 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
    38b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38b8:	4604      	mov	r4, r0
    38ba:	460e      	mov	r6, r1
    38bc:	4690      	mov	r8, r2
    38be:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    38c0:	f7fc fdec 	bl	49c <hal_bsp_flash_dev>
    if (!hf) {
    38c4:	4605      	mov	r5, r0
    38c6:	b1f0      	cbz	r0, 3906 <hal_flash_write+0x52>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    38c8:	4631      	mov	r1, r6
    38ca:	f7ff ffa1 	bl	3810 <hal_flash_check_addr>
    38ce:	b9d0      	cbnz	r0, 3906 <hal_flash_write+0x52>
      hal_flash_check_addr(hf, address + num_bytes)) {
    38d0:	19f1      	adds	r1, r6, r7
    38d2:	4628      	mov	r0, r5
    38d4:	f7ff ff9c 	bl	3810 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    38d8:	b9a8      	cbnz	r0, 3906 <hal_flash_write+0x52>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    38da:	08e3      	lsrs	r3, r4, #3
    38dc:	4a0d      	ldr	r2, [pc, #52]	; (3914 <hal_flash_write+0x60>)
    38de:	5cd3      	ldrb	r3, [r2, r3]
    38e0:	f004 0407 	and.w	r4, r4, #7
    38e4:	fa43 f404 	asr.w	r4, r3, r4
    38e8:	07e3      	lsls	r3, r4, #31
    38ea:	d40f      	bmi.n	390c <hal_flash_write+0x58>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
    38ec:	682b      	ldr	r3, [r5, #0]
    38ee:	4642      	mov	r2, r8
    38f0:	685c      	ldr	r4, [r3, #4]
    38f2:	4631      	mov	r1, r6
    38f4:	463b      	mov	r3, r7
    38f6:	4628      	mov	r0, r5
    38f8:	47a0      	blx	r4
    if (rc != 0) {
    38fa:	2800      	cmp	r0, #0
        return SYS_EIO;
    38fc:	bf18      	it	ne
    38fe:	f06f 0004 	mvnne.w	r0, #4
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
    3902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EINVAL;
    3906:	f06f 0001 	mvn.w	r0, #1
    390a:	e7fa      	b.n	3902 <hal_flash_write+0x4e>
        return SYS_EACCES;
    390c:	f06f 0006 	mvn.w	r0, #6
    3910:	e7f7      	b.n	3902 <hal_flash_write+0x4e>
    3912:	bf00      	nop
    3914:	20006380 	.word	0x20006380

00003918 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
    3918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    391c:	4605      	mov	r5, r0
    391e:	460f      	mov	r7, r1
    3920:	4691      	mov	r9, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
    3922:	f7fc fdbb 	bl	49c <hal_bsp_flash_dev>
    if (!hf) {
    3926:	4606      	mov	r6, r0
    3928:	2800      	cmp	r0, #0
    392a:	d04f      	beq.n	39cc <hal_flash_erase+0xb4>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    392c:	4639      	mov	r1, r7
    392e:	f7ff ff6f 	bl	3810 <hal_flash_check_addr>
    3932:	2800      	cmp	r0, #0
    3934:	d14a      	bne.n	39cc <hal_flash_erase+0xb4>
      hal_flash_check_addr(hf, address + num_bytes)) {
    3936:	eb07 0809 	add.w	r8, r7, r9
    393a:	4641      	mov	r1, r8
    393c:	4630      	mov	r0, r6
    393e:	f7ff ff67 	bl	3810 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3942:	2800      	cmp	r0, #0
    3944:	d142      	bne.n	39cc <hal_flash_erase+0xb4>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
    3946:	08eb      	lsrs	r3, r5, #3
    3948:	4a22      	ldr	r2, [pc, #136]	; (39d4 <hal_flash_erase+0xbc>)
    394a:	5cd4      	ldrb	r4, [r2, r3]
    394c:	f005 0507 	and.w	r5, r5, #7
    3950:	412c      	asrs	r4, r5
    3952:	f014 0401 	ands.w	r4, r4, #1
    3956:	d136      	bne.n	39c6 <hal_flash_erase+0xae>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
    3958:	45b8      	cmp	r8, r7
    395a:	d937      	bls.n	39cc <hal_flash_erase+0xb4>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
    395c:	6833      	ldr	r3, [r6, #0]
    395e:	699b      	ldr	r3, [r3, #24]
    3960:	b37b      	cbz	r3, 39c2 <hal_flash_erase+0xaa>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
    3962:	464a      	mov	r2, r9
    3964:	4639      	mov	r1, r7
    3966:	4630      	mov	r0, r6
    3968:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
    396a:	4620      	mov	r0, r4
    396c:	b003      	add	sp, #12
    396e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            end_area = start + size;
    3972:	e9dd 1300 	ldrd	r1, r3, [sp]
    3976:	440b      	add	r3, r1
            if (address < end_area && end > start) {
    3978:	429f      	cmp	r7, r3
    397a:	d317      	bcc.n	39ac <hal_flash_erase+0x94>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    397c:	3501      	adds	r5, #1
    397e:	68f3      	ldr	r3, [r6, #12]
    3980:	42ab      	cmp	r3, r5
    3982:	ddf2      	ble.n	396a <hal_flash_erase+0x52>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    3984:	6833      	ldr	r3, [r6, #0]
    3986:	466a      	mov	r2, sp
    3988:	f8d3 900c 	ldr.w	r9, [r3, #12]
    398c:	4629      	mov	r1, r5
    398e:	ab01      	add	r3, sp, #4
    3990:	4630      	mov	r0, r6
    3992:	47c8      	blx	r9
            assert(rc == 0);
    3994:	2800      	cmp	r0, #0
    3996:	d0ec      	beq.n	3972 <hal_flash_erase+0x5a>
    3998:	f7fc fbfc 	bl	194 <hal_debugger_connected>
    399c:	b100      	cbz	r0, 39a0 <hal_flash_erase+0x88>
    399e:	be01      	bkpt	0x0001
    39a0:	2300      	movs	r3, #0
    39a2:	461a      	mov	r2, r3
    39a4:	4619      	mov	r1, r3
    39a6:	4618      	mov	r0, r3
    39a8:	f7fd fcd6 	bl	1358 <__assert_func>
            if (address < end_area && end > start) {
    39ac:	4588      	cmp	r8, r1
    39ae:	d9e5      	bls.n	397c <hal_flash_erase+0x64>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
    39b0:	6833      	ldr	r3, [r6, #0]
    39b2:	4630      	mov	r0, r6
    39b4:	689b      	ldr	r3, [r3, #8]
    39b6:	4798      	blx	r3
    39b8:	2800      	cmp	r0, #0
    39ba:	d0df      	beq.n	397c <hal_flash_erase+0x64>
                    return SYS_EIO;
    39bc:	f06f 0404 	mvn.w	r4, #4
    39c0:	e7d3      	b.n	396a <hal_flash_erase+0x52>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
    39c2:	4625      	mov	r5, r4
    39c4:	e7db      	b.n	397e <hal_flash_erase+0x66>
        return SYS_EACCES;
    39c6:	f06f 0406 	mvn.w	r4, #6
    39ca:	e7ce      	b.n	396a <hal_flash_erase+0x52>
        return SYS_EINVAL;
    39cc:	f06f 0401 	mvn.w	r4, #1
    39d0:	e7cb      	b.n	396a <hal_flash_erase+0x52>
    39d2:	bf00      	nop
    39d4:	20006380 	.word	0x20006380

000039d8 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
    39d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    39da:	6807      	ldr	r7, [r0, #0]
    39dc:	683f      	ldr	r7, [r7, #0]
{
    39de:	4606      	mov	r6, r0
    39e0:	4614      	mov	r4, r2
    39e2:	461d      	mov	r5, r3
    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
    39e4:	47b8      	blx	r7
    if (rc != 0) {
    39e6:	b958      	cbnz	r0, 3a00 <hal_flash_is_erased+0x28>
    39e8:	4622      	mov	r2, r4
    39ea:	4425      	add	r5, r4
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
    39ec:	4295      	cmp	r5, r2
    39ee:	d101      	bne.n	39f4 <hal_flash_is_erased+0x1c>
        if (buf[i] != hf->hf_erased_val) {
            return 0;
        }
    }
    return 1;
    39f0:	2001      	movs	r0, #1
    39f2:	e004      	b.n	39fe <hal_flash_is_erased+0x26>
        if (buf[i] != hf->hf_erased_val) {
    39f4:	f812 3b01 	ldrb.w	r3, [r2], #1
    39f8:	7d31      	ldrb	r1, [r6, #20]
    39fa:	4299      	cmp	r1, r3
    39fc:	d0f6      	beq.n	39ec <hal_flash_is_erased+0x14>
}
    39fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
    3a00:	f06f 0004 	mvn.w	r0, #4
    3a04:	e7fb      	b.n	39fe <hal_flash_is_erased+0x26>

00003a06 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
    3a06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3a0a:	460d      	mov	r5, r1
    3a0c:	4617      	mov	r7, r2
    3a0e:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
    3a10:	f7fc fd44 	bl	49c <hal_bsp_flash_dev>
    if (!hf) {
    3a14:	4604      	mov	r4, r0
    3a16:	b1e8      	cbz	r0, 3a54 <hal_flash_isempty+0x4e>
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
    3a18:	4629      	mov	r1, r5
    3a1a:	f7ff fef9 	bl	3810 <hal_flash_check_addr>
    3a1e:	b9c8      	cbnz	r0, 3a54 <hal_flash_isempty+0x4e>
      hal_flash_check_addr(hf, address + num_bytes)) {
    3a20:	19a9      	adds	r1, r5, r6
    3a22:	4620      	mov	r0, r4
    3a24:	f7ff fef4 	bl	3810 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
    3a28:	b9a0      	cbnz	r0, 3a54 <hal_flash_isempty+0x4e>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
    3a2a:	6823      	ldr	r3, [r4, #0]
    3a2c:	f8d3 8010 	ldr.w	r8, [r3, #16]
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
    3a30:	463a      	mov	r2, r7
    3a32:	4633      	mov	r3, r6
    3a34:	4629      	mov	r1, r5
    3a36:	4620      	mov	r0, r4
    if (hf->hf_itf->hff_is_empty) {
    3a38:	f1b8 0f00 	cmp.w	r8, #0
    3a3c:	d006      	beq.n	3a4c <hal_flash_isempty+0x46>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
    3a3e:	47c0      	blx	r8
        if (rc < 0) {
    3a40:	2800      	cmp	r0, #0
            return SYS_EIO;
    3a42:	bfb8      	it	lt
    3a44:	f06f 0004 	mvnlt.w	r0, #4
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
    3a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    3a50:	f7ff bfc2 	b.w	39d8 <hal_flash_is_erased>
        return SYS_EINVAL;
    3a54:	f06f 0001 	mvn.w	r0, #1
    3a58:	e7f6      	b.n	3a48 <hal_flash_isempty+0x42>

00003a5a <hal_system_start>:
void __attribute__((naked))
hal_system_start(void *img_start)
{
    uint32_t *img_data = img_start;

    asm volatile (".syntax unified        \n"
    3a5a:	e9d0 3200 	ldrd	r3, r2, [r0]
    3a5e:	f383 8808 	msr	MSP, r3
    3a62:	4710      	bx	r2

00003a64 <fwrite>:
    if (stream->vmt->read == NULL) return 0;
    return stream->vmt->read(stream, (char*)buf, size*nmemb) / size;
}

__extern_inline size_t fwrite(const void *buf, size_t size, size_t nmemb, FILE *stream)
{
    3a64:	b538      	push	{r3, r4, r5, lr}
    3a66:	460d      	mov	r5, r1
    if (stream->vmt->write == NULL) return 0;
    3a68:	6819      	ldr	r1, [r3, #0]
    3a6a:	680c      	ldr	r4, [r1, #0]
    3a6c:	b134      	cbz	r4, 3a7c <fwrite+0x18>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    3a6e:	4601      	mov	r1, r0
    3a70:	436a      	muls	r2, r5
    3a72:	4618      	mov	r0, r3
    3a74:	47a0      	blx	r4
    3a76:	fbb0 f0f5 	udiv	r0, r0, r5
}
    3a7a:	bd38      	pop	{r3, r4, r5, pc}
    if (stream->vmt->write == NULL) return 0;
    3a7c:	4620      	mov	r0, r4
    3a7e:	e7fc      	b.n	3a7a <fwrite+0x16>

00003a80 <puts>:
{
	return fwrite(s, 1, strlen(s), f);
}

__extern_inline int puts(const char *s)
{
    3a80:	b538      	push	{r3, r4, r5, lr}
    3a82:	4605      	mov	r5, r0
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
    3a84:	f7fd ffb6 	bl	19f4 <strlen>
    3a88:	4b08      	ldr	r3, [pc, #32]	; (3aac <puts+0x2c>)
    3a8a:	681c      	ldr	r4, [r3, #0]
    3a8c:	4602      	mov	r2, r0
    3a8e:	4623      	mov	r3, r4
    3a90:	2101      	movs	r1, #1
    3a92:	4628      	mov	r0, r5
    3a94:	f7ff ffe6 	bl	3a64 <fwrite>
    3a98:	2201      	movs	r2, #1
    3a9a:	4605      	mov	r5, r0
    3a9c:	4623      	mov	r3, r4
    3a9e:	4611      	mov	r1, r2
    3aa0:	4803      	ldr	r0, [pc, #12]	; (3ab0 <puts+0x30>)
    3aa2:	f7ff ffdf 	bl	3a64 <fwrite>
}
    3aa6:	4428      	add	r0, r5
    3aa8:	bd38      	pop	{r3, r4, r5, pc}
    3aaa:	bf00      	nop
    3aac:	00004e80 	.word	0x00004e80
    3ab0:	00004b02 	.word	0x00004b02

00003ab4 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
    3ab4:	2000      	movs	r0, #0
    3ab6:	4770      	bx	lr

00003ab8 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
    3ab8:	b510      	push	{r4, lr}
    3aba:	4608      	mov	r0, r1
    3abc:	4614      	mov	r4, r2
    console_write(bp, n);
    3abe:	4611      	mov	r1, r2
    3ac0:	f7fe fa48 	bl	1f54 <console_write>
    return n;
}
    3ac4:	4620      	mov	r0, r4
    3ac6:	bd10      	pop	{r4, pc}

00003ac8 <ui2a>:
{
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;

    if (p->hh == 1) {
    3ac8:	7893      	ldrb	r3, [r2, #2]
    3aca:	f003 0330 	and.w	r3, r3, #48	; 0x30
    3ace:	2b10      	cmp	r3, #16
{
    3ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ad4:	4606      	mov	r6, r0
    3ad6:	460f      	mov	r7, r1
    3ad8:	4692      	mov	sl, r2
    char *bf = p->bf;
    3ada:	f8d2 b004 	ldr.w	fp, [r2, #4]
    if (p->hh == 1) {
    3ade:	d108      	bne.n	3af2 <ui2a+0x2a>
    3ae0:	b286      	uxth	r6, r0
    3ae2:	2700      	movs	r7, #0
        num = (unsigned short int)num;
    } else if (p->hh == 2) {
        num = (unsigned char)num;
    }

    while (num / d >= p->base)
    3ae4:	f89a 8003 	ldrb.w	r8, [sl, #3]
    3ae8:	f04f 0900 	mov.w	r9, #0
    3aec:	2401      	movs	r4, #1
    3aee:	2500      	movs	r5, #0
    3af0:	e00b      	b.n	3b0a <ui2a+0x42>
    } else if (p->hh == 2) {
    3af2:	2b20      	cmp	r3, #32
    3af4:	d1f6      	bne.n	3ae4 <ui2a+0x1c>
    3af6:	f000 06ff 	and.w	r6, r0, #255	; 0xff
    3afa:	e7f2      	b.n	3ae2 <ui2a+0x1a>
        d *= p->base;
    3afc:	fb04 f309 	mul.w	r3, r4, r9
    3b00:	fb08 3305 	mla	r3, r8, r5, r3
    3b04:	fba4 4508 	umull	r4, r5, r4, r8
    3b08:	441d      	add	r5, r3
    while (num / d >= p->base)
    3b0a:	4622      	mov	r2, r4
    3b0c:	462b      	mov	r3, r5
    3b0e:	4630      	mov	r0, r6
    3b10:	4639      	mov	r1, r7
    3b12:	f000 fc8f 	bl	4434 <__aeabi_uldivmod>
    3b16:	4549      	cmp	r1, r9
    3b18:	bf08      	it	eq
    3b1a:	4540      	cmpeq	r0, r8
    3b1c:	d2ee      	bcs.n	3afc <ui2a+0x34>
    int n = 0;
    3b1e:	2300      	movs	r3, #0
    3b20:	9301      	str	r3, [sp, #4]
    while (d != 0) {
    3b22:	ea54 0305 	orrs.w	r3, r4, r5
    3b26:	d105      	bne.n	3b34 <ui2a+0x6c>
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
            ++n;
        }
    }
    *bf = 0;
    3b28:	2300      	movs	r3, #0
    3b2a:	f88b 3000 	strb.w	r3, [fp]
}
    3b2e:	b003      	add	sp, #12
    3b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b34:	4622      	mov	r2, r4
    3b36:	462b      	mov	r3, r5
    3b38:	4630      	mov	r0, r6
    3b3a:	4639      	mov	r1, r7
    3b3c:	f000 fc7a 	bl	4434 <__aeabi_uldivmod>
    3b40:	4680      	mov	r8, r0
    3b42:	4689      	mov	r9, r1
        d /= p->base;
    3b44:	4620      	mov	r0, r4
    3b46:	4629      	mov	r1, r5
    3b48:	4616      	mov	r6, r2
    3b4a:	461f      	mov	r7, r3
    3b4c:	f89a 2003 	ldrb.w	r2, [sl, #3]
    3b50:	2300      	movs	r3, #0
    3b52:	f000 fc6f 	bl	4434 <__aeabi_uldivmod>
        if (n || dgt > 0 || d == 0) {
    3b56:	9b01      	ldr	r3, [sp, #4]
        d /= p->base;
    3b58:	4604      	mov	r4, r0
    3b5a:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
    3b5c:	b93b      	cbnz	r3, 3b6e <ui2a+0xa6>
    3b5e:	ea58 0309 	orrs.w	r3, r8, r9
    3b62:	d104      	bne.n	3b6e <ui2a+0xa6>
    3b64:	ea54 0305 	orrs.w	r3, r4, r5
    3b68:	d1db      	bne.n	3b22 <ui2a+0x5a>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    3b6a:	2330      	movs	r3, #48	; 0x30
    3b6c:	e00c      	b.n	3b88 <ui2a+0xc0>
    3b6e:	f1b9 0f00 	cmp.w	r9, #0
    3b72:	bf08      	it	eq
    3b74:	f1b8 0f0a 	cmpeq.w	r8, #10
    3b78:	d3f7      	bcc.n	3b6a <ui2a+0xa2>
    3b7a:	f89a 3002 	ldrb.w	r3, [sl, #2]
    3b7e:	f013 0f04 	tst.w	r3, #4
    3b82:	bf14      	ite	ne
    3b84:	2337      	movne	r3, #55	; 0x37
    3b86:	2357      	moveq	r3, #87	; 0x57
    3b88:	4498      	add	r8, r3
            ++n;
    3b8a:	9b01      	ldr	r3, [sp, #4]
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    3b8c:	f88b 8000 	strb.w	r8, [fp]
            ++n;
    3b90:	3301      	adds	r3, #1
    3b92:	9301      	str	r3, [sp, #4]
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    3b94:	f10b 0b01 	add.w	fp, fp, #1
    3b98:	e7c3      	b.n	3b22 <ui2a+0x5a>

00003b9a <putf>:
    *nump = num;
    return ch;
}

static int putf(FILE *putp, char c)
{
    3b9a:	b507      	push	{r0, r1, r2, lr}
    if (stream->vmt->write == NULL) return 0;
    3b9c:	6803      	ldr	r3, [r0, #0]

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
    3b9e:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
    3ba2:	681b      	ldr	r3, [r3, #0]
    3ba4:	b91b      	cbnz	r3, 3bae <putf+0x14>
    if (fputc(c, putp) == EOF)
        return 0;
    3ba6:	2000      	movs	r0, #0
    else
        return 1;
}
    3ba8:	b003      	add	sp, #12
    3baa:	f85d fb04 	ldr.w	pc, [sp], #4
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    3bae:	2201      	movs	r2, #1
    3bb0:	f10d 0107 	add.w	r1, sp, #7
    3bb4:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
    3bb6:	2801      	cmp	r0, #1
    3bb8:	d1f5      	bne.n	3ba6 <putf+0xc>
    3bba:	e7f5      	b.n	3ba8 <putf+0xe>

00003bbc <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
    3bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unsigned written = 0;
    char ch;
    int n = p->width;
    char *bf = p->bf;
    3bc0:	684b      	ldr	r3, [r1, #4]
    int n = p->width;
    3bc2:	780c      	ldrb	r4, [r1, #0]
{
    3bc4:	4607      	mov	r7, r0
    3bc6:	460e      	mov	r6, r1

    /* Number of filling characters */
    while (*bf++ && n > 0)
    3bc8:	f813 2b01 	ldrb.w	r2, [r3], #1
    3bcc:	b10a      	cbz	r2, 3bd2 <putchw+0x16>
    3bce:	2c00      	cmp	r4, #0
    3bd0:	d152      	bne.n	3c78 <putchw+0xbc>
        n--;
    if (p->sign)
    3bd2:	78b3      	ldrb	r3, [r6, #2]
    3bd4:	07d9      	lsls	r1, r3, #31
        n--;
    if (p->alt && p->base == 16)
    3bd6:	8873      	ldrh	r3, [r6, #2]
    3bd8:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    3bdc:	b29b      	uxth	r3, r3
    3bde:	f241 0202 	movw	r2, #4098	; 0x1002
        n--;
    3be2:	bf48      	it	mi
    3be4:	f104 34ff 	addmi.w	r4, r4, #4294967295	; 0xffffffff
    if (p->alt && p->base == 16)
    3be8:	4293      	cmp	r3, r2
    3bea:	d147      	bne.n	3c7c <putchw+0xc0>
        n -= 2;
    3bec:	3c02      	subs	r4, #2
    else if (p->alt && p->base == 8)
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
    3bee:	6833      	ldr	r3, [r6, #0]
    3bf0:	4d38      	ldr	r5, [pc, #224]	; (3cd4 <putchw+0x118>)
    3bf2:	401d      	ands	r5, r3
    3bf4:	2d00      	cmp	r5, #0
    3bf6:	d150      	bne.n	3c9a <putchw+0xde>
    3bf8:	46a0      	mov	r8, r4
        while (n-- > 0)
    3bfa:	f1b8 0f00 	cmp.w	r8, #0
    3bfe:	dc44      	bgt.n	3c8a <putchw+0xce>
    3c00:	1e63      	subs	r3, r4, #1
    3c02:	2c00      	cmp	r4, #0
    3c04:	bfac      	ite	ge
    3c06:	1b1c      	subge	r4, r3, r4
    3c08:	461c      	movlt	r4, r3
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    3c0a:	78b3      	ldrb	r3, [r6, #2]
    3c0c:	07da      	lsls	r2, r3, #31
    3c0e:	d504      	bpl.n	3c1a <putchw+0x5e>
        written += putf(putp, '-');
    3c10:	212d      	movs	r1, #45	; 0x2d
    3c12:	4638      	mov	r0, r7
    3c14:	f7ff ffc1 	bl	3b9a <putf>
    3c18:	4405      	add	r5, r0

    /* Alternate */
    if (p->alt && p->base == 16) {
    3c1a:	8873      	ldrh	r3, [r6, #2]
    3c1c:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    3c20:	b29b      	uxth	r3, r3
    3c22:	f241 0202 	movw	r2, #4098	; 0x1002
    3c26:	4293      	cmp	r3, r2
    3c28:	d139      	bne.n	3c9e <putchw+0xe2>
        written += putf(putp, '0');
    3c2a:	2130      	movs	r1, #48	; 0x30
    3c2c:	4638      	mov	r0, r7
    3c2e:	f7ff ffb4 	bl	3b9a <putf>
        written += putf(putp, (p->uc ? 'X' : 'x'));
    3c32:	78b3      	ldrb	r3, [r6, #2]
    3c34:	f013 0f04 	tst.w	r3, #4
        written += putf(putp, '0');
    3c38:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
    3c3a:	bf14      	ite	ne
    3c3c:	2158      	movne	r1, #88	; 0x58
    3c3e:	2178      	moveq	r1, #120	; 0x78
    } else if (p->alt && p->base == 8) {
        written += putf(putp, '0');
    3c40:	4638      	mov	r0, r7
    3c42:	f7ff ffaa 	bl	3b9a <putf>
    3c46:	4405      	add	r5, r0
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    3c48:	7873      	ldrb	r3, [r6, #1]
    3c4a:	b143      	cbz	r3, 3c5e <putchw+0xa2>
    3c4c:	46a0      	mov	r8, r4
        while (n-- > 0)
    3c4e:	f1b8 0f00 	cmp.w	r8, #0
    3c52:	dc2a      	bgt.n	3caa <putchw+0xee>
    3c54:	1e63      	subs	r3, r4, #1
    3c56:	2c00      	cmp	r4, #0
    3c58:	bfac      	ite	ge
    3c5a:	1b1c      	subge	r4, r3, r4
    3c5c:	461c      	movlt	r4, r3
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    3c5e:	f8d6 8004 	ldr.w	r8, [r6, #4]
    while ((ch = *bf++))
    3c62:	f818 1b01 	ldrb.w	r1, [r8], #1
    3c66:	bb41      	cbnz	r1, 3cba <putchw+0xfe>
        written += putf(putp, ch);

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
    3c68:	78b3      	ldrb	r3, [r6, #2]
    3c6a:	071b      	lsls	r3, r3, #28
    3c6c:	d501      	bpl.n	3c72 <putchw+0xb6>
        while (n-- > 0)
    3c6e:	2c00      	cmp	r4, #0
    3c70:	dc28      	bgt.n	3cc4 <putchw+0x108>
            written += putf(putp, ' ');
    }
    
    return written;
}
    3c72:	4628      	mov	r0, r5
    3c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        n--;
    3c78:	3c01      	subs	r4, #1
    3c7a:	e7a5      	b.n	3bc8 <putchw+0xc>
    else if (p->alt && p->base == 8)
    3c7c:	f640 0202 	movw	r2, #2050	; 0x802
    3c80:	4293      	cmp	r3, r2
        n--;
    3c82:	bf08      	it	eq
    3c84:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
    3c88:	e7b1      	b.n	3bee <putchw+0x32>
            written += putf(putp, ' ');
    3c8a:	2120      	movs	r1, #32
    3c8c:	4638      	mov	r0, r7
    3c8e:	f7ff ff84 	bl	3b9a <putf>
    3c92:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3c96:	4405      	add	r5, r0
    3c98:	e7af      	b.n	3bfa <putchw+0x3e>
    unsigned written = 0;
    3c9a:	2500      	movs	r5, #0
    3c9c:	e7b5      	b.n	3c0a <putchw+0x4e>
    } else if (p->alt && p->base == 8) {
    3c9e:	f640 0202 	movw	r2, #2050	; 0x802
    3ca2:	4293      	cmp	r3, r2
    3ca4:	d1d0      	bne.n	3c48 <putchw+0x8c>
        written += putf(putp, '0');
    3ca6:	2130      	movs	r1, #48	; 0x30
    3ca8:	e7ca      	b.n	3c40 <putchw+0x84>
            written += putf(putp, '0');
    3caa:	2130      	movs	r1, #48	; 0x30
    3cac:	4638      	mov	r0, r7
    3cae:	f7ff ff74 	bl	3b9a <putf>
    3cb2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3cb6:	4405      	add	r5, r0
    3cb8:	e7c9      	b.n	3c4e <putchw+0x92>
        written += putf(putp, ch);
    3cba:	4638      	mov	r0, r7
    3cbc:	f7ff ff6d 	bl	3b9a <putf>
    3cc0:	4405      	add	r5, r0
    3cc2:	e7ce      	b.n	3c62 <putchw+0xa6>
            written += putf(putp, ' ');
    3cc4:	2120      	movs	r1, #32
    3cc6:	4638      	mov	r0, r7
    3cc8:	f7ff ff67 	bl	3b9a <putf>
    3ccc:	3c01      	subs	r4, #1
    3cce:	4405      	add	r5, r0
    3cd0:	e7cd      	b.n	3c6e <putchw+0xb2>
    3cd2:	bf00      	nop
    3cd4:	0008ff00 	.word	0x0008ff00

00003cd8 <tfp_format>:

    return val;
}

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
    3cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3cdc:	b089      	sub	sp, #36	; 0x24
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
    3cde:	ad02      	add	r5, sp, #8
    size_t written = 0;
    3ce0:	2600      	movs	r6, #0
{
    3ce2:	4607      	mov	r7, r0
    3ce4:	4614      	mov	r4, r2
    p.bf = bf;
    3ce6:	9501      	str	r5, [sp, #4]
    while ((ch = *(fmt++))) {
        if (ch != '%') {
            written += putf(putp, ch);
        } else {
            /* Init parameter struct */
            p.lz = 0;
    3ce8:	46b0      	mov	r8, r6
    while ((ch = *(fmt++))) {
    3cea:	f101 0901 	add.w	r9, r1, #1
    3cee:	7809      	ldrb	r1, [r1, #0]
    3cf0:	b919      	cbnz	r1, 3cfa <tfp_format+0x22>
        }
    }
 abort:;
 
 return written;
}
    3cf2:	4630      	mov	r0, r6
    3cf4:	b009      	add	sp, #36	; 0x24
    3cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ch != '%') {
    3cfa:	2925      	cmp	r1, #37	; 0x25
    3cfc:	d003      	beq.n	3d06 <tfp_format+0x2e>
                written += putf(putp, ch);
    3cfe:	4638      	mov	r0, r7
    3d00:	f7ff ff4b 	bl	3b9a <putf>
    3d04:	e118      	b.n	3f38 <tfp_format+0x260>
            p.alt = 0;
    3d06:	f89d 3002 	ldrb.w	r3, [sp, #2]
            p.lz = 0;
    3d0a:	f88d 8001 	strb.w	r8, [sp, #1]
            p.hh = 0;
    3d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    3d12:	f368 1305 	bfi	r3, r8, #4, #2
    3d16:	f88d 3002 	strb.w	r3, [sp, #2]
            while ((ch = *(fmt++))) {
    3d1a:	2300      	movs	r3, #0
            p.width = 0;
    3d1c:	f88d 8000 	strb.w	r8, [sp]
    while ((ch = *(fmt++))) {
    3d20:	4648      	mov	r0, r9
            while ((ch = *(fmt++))) {
    3d22:	461a      	mov	r2, r3
    3d24:	f819 1b01 	ldrb.w	r1, [r9], #1
    3d28:	b949      	cbnz	r1, 3d3e <tfp_format+0x66>
    3d2a:	b10b      	cbz	r3, 3d30 <tfp_format+0x58>
    3d2c:	f88d 2001 	strb.w	r2, [sp, #1]
            } else if (ch >= '0' && ch <= '9') {
    3d30:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    3d34:	2b09      	cmp	r3, #9
    3d36:	d835      	bhi.n	3da4 <tfp_format+0xcc>
    int num = 0;
    3d38:	2200      	movs	r2, #0
        num = num * base + digit;
    3d3a:	200a      	movs	r0, #10
    3d3c:	e057      	b.n	3dee <tfp_format+0x116>
                switch (ch) {
    3d3e:	292d      	cmp	r1, #45	; 0x2d
    3d40:	d010      	beq.n	3d64 <tfp_format+0x8c>
    3d42:	2930      	cmp	r1, #48	; 0x30
    3d44:	d008      	beq.n	3d58 <tfp_format+0x80>
    3d46:	2923      	cmp	r1, #35	; 0x23
    3d48:	d118      	bne.n	3d7c <tfp_format+0xa4>
                    p.alt = 1;
    3d4a:	f89d 1002 	ldrb.w	r1, [sp, #2]
    3d4e:	f041 0102 	orr.w	r1, r1, #2
    3d52:	f88d 1002 	strb.w	r1, [sp, #2]
                    continue;
    3d56:	e003      	b.n	3d60 <tfp_format+0x88>
                    if (!p.left) {
    3d58:	f89d 1002 	ldrb.w	r1, [sp, #2]
    3d5c:	0709      	lsls	r1, r1, #28
    3d5e:	d50a      	bpl.n	3d76 <tfp_format+0x9e>
                    p.lz = 0;
    3d60:	4648      	mov	r0, r9
    3d62:	e7df      	b.n	3d24 <tfp_format+0x4c>
                    p.left = 1;
    3d64:	f89d 3002 	ldrb.w	r3, [sp, #2]
    3d68:	f043 0308 	orr.w	r3, r3, #8
    3d6c:	f88d 3002 	strb.w	r3, [sp, #2]
                    p.lz = 0;
    3d70:	2200      	movs	r2, #0
                    continue;
    3d72:	2301      	movs	r3, #1
    3d74:	e7f4      	b.n	3d60 <tfp_format+0x88>
    3d76:	2301      	movs	r3, #1
                        p.lz = 1;
    3d78:	461a      	mov	r2, r3
    3d7a:	e7f1      	b.n	3d60 <tfp_format+0x88>
    3d7c:	b10b      	cbz	r3, 3d82 <tfp_format+0xaa>
    3d7e:	f88d 2001 	strb.w	r2, [sp, #1]
            if (ch == '*') {
    3d82:	292a      	cmp	r1, #42	; 0x2a
    3d84:	d1d4      	bne.n	3d30 <tfp_format+0x58>
            val = va_arg(*va, int);
    3d86:	6823      	ldr	r3, [r4, #0]
                if (i > UCHAR_MAX) {
    3d88:	2bff      	cmp	r3, #255	; 0xff
            val = va_arg(*va, int);
    3d8a:	f104 0204 	add.w	r2, r4, #4
                if (i > UCHAR_MAX) {
    3d8e:	dd03      	ble.n	3d98 <tfp_format+0xc0>
                    p.width = UCHAR_MAX;
    3d90:	23ff      	movs	r3, #255	; 0xff
                    p.width = i;
    3d92:	f88d 3000 	strb.w	r3, [sp]
    3d96:	e001      	b.n	3d9c <tfp_format+0xc4>
                } else if (i > 0) {
    3d98:	2b00      	cmp	r3, #0
    3d9a:	dcfa      	bgt.n	3d92 <tfp_format+0xba>
                ch = *(fmt++);
    3d9c:	7841      	ldrb	r1, [r0, #1]
    3d9e:	f100 0902 	add.w	r9, r0, #2
            val = va_arg(*va, int);
    3da2:	4614      	mov	r4, r2
            if (ch == 'l') {
    3da4:	296c      	cmp	r1, #108	; 0x6c
    3da6:	d13b      	bne.n	3e20 <tfp_format+0x148>
                ch = *(fmt++);
    3da8:	f899 1000 	ldrb.w	r1, [r9]
                if (ch == 'l') {
    3dac:	296c      	cmp	r1, #108	; 0x6c
                    ch = *(fmt++);
    3dae:	bf0d      	iteet	eq
    3db0:	f899 1001 	ldrbeq.w	r1, [r9, #1]
                ch = *(fmt++);
    3db4:	f109 0901 	addne.w	r9, r9, #1
                lng = 1;
    3db8:	2301      	movne	r3, #1
                    ch = *(fmt++);
    3dba:	f109 0902 	addeq.w	r9, r9, #2
                    lng = 2;
    3dbe:	bf08      	it	eq
    3dc0:	2302      	moveq	r3, #2
            if (ch == 'z') {
    3dc2:	297a      	cmp	r1, #122	; 0x7a
                ch = *(fmt++);
    3dc4:	bf04      	itt	eq
    3dc6:	f899 1000 	ldrbeq.w	r1, [r9]
    3dca:	f109 0901 	addeq.w	r9, r9, #1
            switch (ch) {
    3dce:	2969      	cmp	r1, #105	; 0x69
    3dd0:	d044      	beq.n	3e5c <tfp_format+0x184>
    3dd2:	d852      	bhi.n	3e7a <tfp_format+0x1a2>
    3dd4:	2958      	cmp	r1, #88	; 0x58
    3dd6:	d07c      	beq.n	3ed2 <tfp_format+0x1fa>
    3dd8:	d83c      	bhi.n	3e54 <tfp_format+0x17c>
    3dda:	2900      	cmp	r1, #0
    3ddc:	d089      	beq.n	3cf2 <tfp_format+0x1a>
    3dde:	2925      	cmp	r1, #37	; 0x25
    3de0:	d08d      	beq.n	3cfe <tfp_format+0x26>
                v = va_arg(va, void *);
    3de2:	4649      	mov	r1, r9
    3de4:	e781      	b.n	3cea <tfp_format+0x12>
        ch = *p++;
    3de6:	f819 1b01 	ldrb.w	r1, [r9], #1
        num = num * base + digit;
    3dea:	fb00 3202 	mla	r2, r0, r2, r3
    if (ch >= '0' && ch <= '9')
    3dee:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
    3df2:	fa5f fc83 	uxtb.w	ip, r3
    3df6:	f1bc 0f09 	cmp.w	ip, #9
    3dfa:	d9f4      	bls.n	3de6 <tfp_format+0x10e>
    else if (ch >= 'a' && ch <= 'f')
    3dfc:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
    3e00:	2b05      	cmp	r3, #5
    3e02:	d806      	bhi.n	3e12 <tfp_format+0x13a>
        return ch - 'a' + 10;
    3e04:	f1a1 0357 	sub.w	r3, r1, #87	; 0x57
        if (digit > base)
    3e08:	2b0a      	cmp	r3, #10
    3e0a:	ddec      	ble.n	3de6 <tfp_format+0x10e>
    *nump = num;
    3e0c:	f88d 2000 	strb.w	r2, [sp]
    3e10:	e7c8      	b.n	3da4 <tfp_format+0xcc>
    else if (ch >= 'A' && ch <= 'F')
    3e12:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
    3e16:	2b05      	cmp	r3, #5
    3e18:	d8f8      	bhi.n	3e0c <tfp_format+0x134>
        return ch - 'A' + 10;
    3e1a:	f1a1 0337 	sub.w	r3, r1, #55	; 0x37
    3e1e:	e7f3      	b.n	3e08 <tfp_format+0x130>
            } else if (ch == 'h') {
    3e20:	2968      	cmp	r1, #104	; 0x68
    3e22:	d115      	bne.n	3e50 <tfp_format+0x178>
                p.hh = 1;
    3e24:	f89d 3002 	ldrb.w	r3, [sp, #2]
                ch = *(fmt++);
    3e28:	f899 1000 	ldrb.w	r1, [r9]
                p.hh = 1;
    3e2c:	2201      	movs	r2, #1
    3e2e:	f362 1305 	bfi	r3, r2, #4, #2
                if (ch == 'h') {
    3e32:	2968      	cmp	r1, #104	; 0x68
                p.hh = 1;
    3e34:	f88d 3002 	strb.w	r3, [sp, #2]
                    p.hh = 2;
    3e38:	bf01      	itttt	eq
    3e3a:	f89d 3002 	ldrbeq.w	r3, [sp, #2]
                    ch = *(fmt++);
    3e3e:	f899 1001 	ldrbeq.w	r1, [r9, #1]
                    p.hh = 2;
    3e42:	2202      	moveq	r2, #2
    3e44:	f362 1305 	bfieq	r3, r2, #4, #2
    3e48:	bf08      	it	eq
    3e4a:	f88d 3002 	strbeq.w	r3, [sp, #2]
                    ch = *(fmt++);
    3e4e:	4491      	add	r9, r2
            lng = 0;
    3e50:	2300      	movs	r3, #0
    3e52:	e7b6      	b.n	3dc2 <tfp_format+0xea>
            switch (ch) {
    3e54:	2963      	cmp	r1, #99	; 0x63
    3e56:	d077      	beq.n	3f48 <tfp_format+0x270>
    3e58:	2964      	cmp	r1, #100	; 0x64
    3e5a:	d1c2      	bne.n	3de2 <tfp_format+0x10a>
                p.base = 10;
    3e5c:	220a      	movs	r2, #10
    3e5e:	f88d 2003 	strb.w	r2, [sp, #3]
    switch (lng) {
    3e62:	2b00      	cmp	r3, #0
    3e64:	d051      	beq.n	3f0a <tfp_format+0x232>
    3e66:	2b01      	cmp	r3, #1
    3e68:	d04f      	beq.n	3f0a <tfp_format+0x232>
            val = va_arg(*va, long long);
    3e6a:	3407      	adds	r4, #7
    3e6c:	f024 0307 	bic.w	r3, r4, #7
    3e70:	f103 0408 	add.w	r4, r3, #8
    3e74:	e9d3 0100 	ldrd	r0, r1, [r3]
    3e78:	e04a      	b.n	3f10 <tfp_format+0x238>
            switch (ch) {
    3e7a:	2973      	cmp	r1, #115	; 0x73
    3e7c:	d06c      	beq.n	3f58 <tfp_format+0x280>
    3e7e:	d824      	bhi.n	3eca <tfp_format+0x1f2>
    3e80:	296f      	cmp	r1, #111	; 0x6f
    3e82:	d05b      	beq.n	3f3c <tfp_format+0x264>
    3e84:	2970      	cmp	r1, #112	; 0x70
    3e86:	d1ac      	bne.n	3de2 <tfp_format+0x10a>
                ui2a((uintptr_t)v, &p);
    3e88:	466a      	mov	r2, sp
                v = va_arg(va, void *);
    3e8a:	6820      	ldr	r0, [r4, #0]
                p.base = 16;
    3e8c:	2310      	movs	r3, #16
                ui2a((uintptr_t)v, &p);
    3e8e:	2100      	movs	r1, #0
                p.base = 16;
    3e90:	f88d 3003 	strb.w	r3, [sp, #3]
                ui2a((uintptr_t)v, &p);
    3e94:	f7ff fe18 	bl	3ac8 <ui2a>
                p.width = 2 * sizeof(void*);
    3e98:	f44f 7384 	mov.w	r3, #264	; 0x108
                written += putf(putp, '0');
    3e9c:	2130      	movs	r1, #48	; 0x30
    3e9e:	4638      	mov	r0, r7
                p.width = 2 * sizeof(void*);
    3ea0:	f8ad 3000 	strh.w	r3, [sp]
                written += putf(putp, '0');
    3ea4:	f7ff fe79 	bl	3b9a <putf>
                written += putf(putp, 'x');
    3ea8:	2178      	movs	r1, #120	; 0x78
                written += putf(putp, '0');
    3eaa:	4683      	mov	fp, r0
                written += putf(putp, 'x');
    3eac:	4638      	mov	r0, r7
    3eae:	f7ff fe74 	bl	3b9a <putf>
                v = va_arg(va, void *);
    3eb2:	f104 0a04 	add.w	sl, r4, #4
                written += putchw(putp, &p);
    3eb6:	4669      	mov	r1, sp
                written += putf(putp, 'x');
    3eb8:	4604      	mov	r4, r0
                written += putchw(putp, &p);
    3eba:	4638      	mov	r0, r7
    3ebc:	f7ff fe7e 	bl	3bbc <putchw>
    3ec0:	4406      	add	r6, r0
    3ec2:	445e      	add	r6, fp
    3ec4:	4426      	add	r6, r4
                p.bf = va_arg(va, char *);
    3ec6:	4654      	mov	r4, sl
                break;
    3ec8:	e78b      	b.n	3de2 <tfp_format+0x10a>
            switch (ch) {
    3eca:	2975      	cmp	r1, #117	; 0x75
    3ecc:	d019      	beq.n	3f02 <tfp_format+0x22a>
    3ece:	2978      	cmp	r1, #120	; 0x78
    3ed0:	d187      	bne.n	3de2 <tfp_format+0x10a>
                p.base = 16;
    3ed2:	2210      	movs	r2, #16
    3ed4:	f88d 2003 	strb.w	r2, [sp, #3]
                p.uc = (ch == 'X');
    3ed8:	f1a1 0258 	sub.w	r2, r1, #88	; 0x58
    3edc:	4251      	negs	r1, r2
    3ede:	4151      	adcs	r1, r2
    3ee0:	f89d 2002 	ldrb.w	r2, [sp, #2]
    3ee4:	f361 0282 	bfi	r2, r1, #2, #1
    3ee8:	f88d 2002 	strb.w	r2, [sp, #2]
    switch (lng) {
    3eec:	b343      	cbz	r3, 3f40 <tfp_format+0x268>
    3eee:	2b01      	cmp	r3, #1
    3ef0:	d026      	beq.n	3f40 <tfp_format+0x268>
            val = va_arg(*va, unsigned long long);
    3ef2:	3407      	adds	r4, #7
    3ef4:	f024 0307 	bic.w	r3, r4, #7
    3ef8:	f103 0408 	add.w	r4, r3, #8
    3efc:	e9d3 0100 	ldrd	r0, r1, [r3]
    3f00:	e013      	b.n	3f2a <tfp_format+0x252>
                p.base = 10;
    3f02:	220a      	movs	r2, #10
                p.base = 8;
    3f04:	f88d 2003 	strb.w	r2, [sp, #3]
    3f08:	e7f0      	b.n	3eec <tfp_format+0x214>
            val = va_arg(*va, long);
    3f0a:	6820      	ldr	r0, [r4, #0]
    3f0c:	3404      	adds	r4, #4
    3f0e:	17c1      	asrs	r1, r0, #31
    if (num < 0) {
    3f10:	2800      	cmp	r0, #0
    3f12:	f171 0300 	sbcs.w	r3, r1, #0
    3f16:	da08      	bge.n	3f2a <tfp_format+0x252>
        p->sign = 1;
    3f18:	f89d 3002 	ldrb.w	r3, [sp, #2]
        num = -num;
    3f1c:	4240      	negs	r0, r0
        p->sign = 1;
    3f1e:	f043 0301 	orr.w	r3, r3, #1
        num = -num;
    3f22:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
    3f26:	f88d 3002 	strb.w	r3, [sp, #2]
                ui2a(intarg(lng, 0, &va), &p);
    3f2a:	466a      	mov	r2, sp
    3f2c:	f7ff fdcc 	bl	3ac8 <ui2a>
                written += putchw(putp, &p);
    3f30:	4669      	mov	r1, sp
    3f32:	4638      	mov	r0, r7
    3f34:	f7ff fe42 	bl	3bbc <putchw>
                written += putf(putp, ch);
    3f38:	4406      	add	r6, r0
                break;
    3f3a:	e752      	b.n	3de2 <tfp_format+0x10a>
                p.base = 8;
    3f3c:	2208      	movs	r2, #8
    3f3e:	e7e1      	b.n	3f04 <tfp_format+0x22c>
            val = va_arg(*va, unsigned long);
    3f40:	6820      	ldr	r0, [r4, #0]
    3f42:	2100      	movs	r1, #0
    3f44:	3404      	adds	r4, #4
    3f46:	e7f0      	b.n	3f2a <tfp_format+0x252>
                written += putf(putp, (char)(va_arg(va, int)));
    3f48:	7821      	ldrb	r1, [r4, #0]
    3f4a:	4638      	mov	r0, r7
    3f4c:	f7ff fe25 	bl	3b9a <putf>
    3f50:	f104 0a04 	add.w	sl, r4, #4
    3f54:	4406      	add	r6, r0
    3f56:	e7b6      	b.n	3ec6 <tfp_format+0x1ee>
                p.bf = va_arg(va, char *);
    3f58:	6823      	ldr	r3, [r4, #0]
    3f5a:	9301      	str	r3, [sp, #4]
                written += putchw(putp, &p);
    3f5c:	4669      	mov	r1, sp
    3f5e:	4638      	mov	r0, r7
    3f60:	f7ff fe2c 	bl	3bbc <putchw>
                p.bf = va_arg(va, char *);
    3f64:	f104 0a04 	add.w	sl, r4, #4
                written += putchw(putp, &p);
    3f68:	4406      	add	r6, r0
                p.bf = bf;
    3f6a:	9501      	str	r5, [sp, #4]
    3f6c:	e7ab      	b.n	3ec6 <tfp_format+0x1ee>

00003f6e <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    return tfp_format(f, fmt, va);
    3f6e:	f7ff beb3 	b.w	3cd8 <tfp_format>
	...

00003f74 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
    3f74:	b40f      	push	{r0, r1, r2, r3}
    3f76:	b507      	push	{r0, r1, r2, lr}
    return tfp_format(f, fmt, va);
    3f78:	4b06      	ldr	r3, [pc, #24]	; (3f94 <printf+0x20>)
{
    3f7a:	aa04      	add	r2, sp, #16
    return tfp_format(f, fmt, va);
    3f7c:	6818      	ldr	r0, [r3, #0]
{
    3f7e:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
    3f82:	9201      	str	r2, [sp, #4]
    return tfp_format(f, fmt, va);
    3f84:	f7ff fea8 	bl	3cd8 <tfp_format>
    int rv = vfprintf(stdout, fmt, va);
    va_end(va);
    return rv;
}
    3f88:	b003      	add	sp, #12
    3f8a:	f85d eb04 	ldr.w	lr, [sp], #4
    3f8e:	b004      	add	sp, #16
    3f90:	4770      	bx	lr
    3f92:	bf00      	nop
    3f94:	00004e80 	.word	0x00004e80

00003f98 <vprintf>:
#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
	return vfprintf(stdout, format, ap);
    3f98:	4b02      	ldr	r3, [pc, #8]	; (3fa4 <vprintf+0xc>)
    3f9a:	460a      	mov	r2, r1
    3f9c:	4601      	mov	r1, r0
    3f9e:	6818      	ldr	r0, [r3, #0]
    3fa0:	f7ff bfe5 	b.w	3f6e <vfprintf>
    3fa4:	00004e80 	.word	0x00004e80

00003fa8 <flash_area_find_idx>:
static int
flash_area_find_idx(uint8_t id)
{
    int i;

    if (flash_map == NULL) {
    3fa8:	4b0a      	ldr	r3, [pc, #40]	; (3fd4 <flash_area_find_idx+0x2c>)
    3faa:	681a      	ldr	r2, [r3, #0]
{
    3fac:	b530      	push	{r4, r5, lr}
    if (flash_map == NULL) {
    3fae:	b12a      	cbz	r2, 3fbc <flash_area_find_idx+0x14>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
    3fb0:	4b09      	ldr	r3, [pc, #36]	; (3fd8 <flash_area_find_idx+0x30>)
        if (flash_map[i].fa_id == id) {
    3fb2:	240c      	movs	r4, #12
    for (i = 0; i < flash_map_entries; i++) {
    3fb4:	6819      	ldr	r1, [r3, #0]
    3fb6:	2300      	movs	r3, #0
    3fb8:	4299      	cmp	r1, r3
    3fba:	dc03      	bgt.n	3fc4 <flash_area_find_idx+0x1c>
        return -1;
    3fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
            return i;
        }
    }

    return -1;
}
    3fc0:	4618      	mov	r0, r3
    3fc2:	bd30      	pop	{r4, r5, pc}
        if (flash_map[i].fa_id == id) {
    3fc4:	fb04 f503 	mul.w	r5, r4, r3
    3fc8:	5d55      	ldrb	r5, [r2, r5]
    3fca:	4285      	cmp	r5, r0
    3fcc:	d0f8      	beq.n	3fc0 <flash_area_find_idx+0x18>
    for (i = 0; i < flash_map_entries; i++) {
    3fce:	3301      	adds	r3, #1
    3fd0:	e7f2      	b.n	3fb8 <flash_area_find_idx+0x10>
    3fd2:	bf00      	nop
    3fd4:	20006384 	.word	0x20006384
    3fd8:	20006388 	.word	0x20006388

00003fdc <flash_area_open>:

int
flash_area_open(uint8_t id, const struct flash_area **fap)
{
    3fdc:	b538      	push	{r3, r4, r5, lr}
    int idx;

    if (flash_map == NULL) {
    3fde:	4b0a      	ldr	r3, [pc, #40]	; (4008 <flash_area_open+0x2c>)
    3fe0:	681c      	ldr	r4, [r3, #0]
{
    3fe2:	460d      	mov	r5, r1
    if (flash_map == NULL) {
    3fe4:	b14c      	cbz	r4, 3ffa <flash_area_open+0x1e>
        return SYS_EACCES;
    }

    idx = flash_area_find_idx(id);
    3fe6:	f7ff ffdf 	bl	3fa8 <flash_area_find_idx>
    if (idx == -1) {
    3fea:	1c43      	adds	r3, r0, #1
    3fec:	d008      	beq.n	4000 <flash_area_open+0x24>
        return SYS_ENOENT;
    }

    *fap = &flash_map[idx];
    3fee:	230c      	movs	r3, #12
    3ff0:	fb03 4000 	mla	r0, r3, r0, r4
    3ff4:	6028      	str	r0, [r5, #0]

    return 0;
    3ff6:	2000      	movs	r0, #0
}
    3ff8:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
    3ffa:	f06f 0006 	mvn.w	r0, #6
    3ffe:	e7fb      	b.n	3ff8 <flash_area_open+0x1c>
        return SYS_ENOENT;
    4000:	f06f 0003 	mvn.w	r0, #3
    4004:	e7f8      	b.n	3ff8 <flash_area_open+0x1c>
    4006:	bf00      	nop
    4008:	20006384 	.word	0x20006384

0000400c <flash_area_to_sectors>:

int
flash_area_to_sectors(int id, int *cnt, struct flash_area *ret)
{
    400c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t start;
    uint32_t size;
    int rc;
    int i;

    rc = flash_area_open(id, &fa);
    4010:	fa5f f980 	uxtb.w	r9, r0
{
    4014:	4688      	mov	r8, r1
    rc = flash_area_open(id, &fa);
    4016:	4648      	mov	r0, r9
    4018:	a901      	add	r1, sp, #4
{
    401a:	4614      	mov	r4, r2
    rc = flash_area_open(id, &fa);
    401c:	f7ff ffde 	bl	3fdc <flash_area_open>
    if (rc != 0) {
    4020:	4605      	mov	r5, r0
    4022:	b950      	cbnz	r0, 403a <flash_area_to_sectors+0x2e>
        return rc;
    }

    *cnt = 0;

    hf = hal_bsp_flash_dev(fa->fa_device_id);
    4024:	9b01      	ldr	r3, [sp, #4]
    *cnt = 0;
    4026:	f8c8 0000 	str.w	r0, [r8]
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    402a:	7858      	ldrb	r0, [r3, #1]
    402c:	f7fc fa36 	bl	49c <hal_bsp_flash_dev>
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    4030:	462e      	mov	r6, r5
    hf = hal_bsp_flash_dev(fa->fa_device_id);
    4032:	4607      	mov	r7, r0
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    4034:	68fb      	ldr	r3, [r7, #12]
    4036:	42b3      	cmp	r3, r6
    4038:	dc03      	bgt.n	4042 <flash_area_to_sectors+0x36>
            (*cnt)++;
        }
    }
    flash_area_close(fa);
    return 0;
}
    403a:	4628      	mov	r0, r5
    403c:	b004      	add	sp, #16
    403e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hf->hf_itf->hff_sector_info(hf, i, &start, &size);
    4042:	683b      	ldr	r3, [r7, #0]
    4044:	aa02      	add	r2, sp, #8
    4046:	f8d3 a00c 	ldr.w	sl, [r3, #12]
    404a:	4631      	mov	r1, r6
    404c:	ab03      	add	r3, sp, #12
    404e:	4638      	mov	r0, r7
    4050:	47d0      	blx	sl
        if (start >= fa->fa_off && start < fa->fa_off + fa->fa_size) {
    4052:	9901      	ldr	r1, [sp, #4]
    4054:	9a02      	ldr	r2, [sp, #8]
    4056:	684b      	ldr	r3, [r1, #4]
    4058:	4293      	cmp	r3, r2
    405a:	d811      	bhi.n	4080 <flash_area_to_sectors+0x74>
    405c:	6888      	ldr	r0, [r1, #8]
    405e:	4403      	add	r3, r0
    4060:	429a      	cmp	r2, r3
    4062:	d20d      	bcs.n	4080 <flash_area_to_sectors+0x74>
            if (ret) {
    4064:	b13c      	cbz	r4, 4076 <flash_area_to_sectors+0x6a>
                ret->fa_id = id;
    4066:	f884 9000 	strb.w	r9, [r4]
                ret->fa_device_id = fa->fa_device_id;
    406a:	784b      	ldrb	r3, [r1, #1]
    406c:	7063      	strb	r3, [r4, #1]
                ret->fa_size = size;
    406e:	9b03      	ldr	r3, [sp, #12]
                ret->fa_off = start;
    4070:	6062      	str	r2, [r4, #4]
                ret->fa_size = size;
    4072:	60a3      	str	r3, [r4, #8]
                ret++;
    4074:	340c      	adds	r4, #12
            (*cnt)++;
    4076:	f8d8 3000 	ldr.w	r3, [r8]
    407a:	3301      	adds	r3, #1
    407c:	f8c8 3000 	str.w	r3, [r8]
    for (i = 0; i < hf->hf_sector_cnt; i++) {
    4080:	3601      	adds	r6, #1
    4082:	e7d7      	b.n	4034 <flash_area_to_sectors+0x28>

00004084 <flash_area_read>:
}

int
flash_area_read(const struct flash_area *fa, uint32_t off, void *dst,
    uint32_t len)
{
    4084:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    4086:	6885      	ldr	r5, [r0, #8]
    4088:	428d      	cmp	r5, r1
{
    408a:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
    408c:	d308      	bcc.n	40a0 <flash_area_read+0x1c>
    408e:	440c      	add	r4, r1
    4090:	42a5      	cmp	r5, r4
    4092:	d305      	bcc.n	40a0 <flash_area_read+0x1c>
        return -1;
    }
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    4094:	6844      	ldr	r4, [r0, #4]
    4096:	7840      	ldrb	r0, [r0, #1]
    4098:	4421      	add	r1, r4
}
    409a:	bc30      	pop	{r4, r5}
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
    409c:	f7ff bbe8 	b.w	3870 <hal_flash_read>
}
    40a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    40a4:	bc30      	pop	{r4, r5}
    40a6:	4770      	bx	lr

000040a8 <flash_area_write>:

int
flash_area_write(const struct flash_area *fa, uint32_t off, const void *src,
    uint32_t len)
{
    40a8:	b430      	push	{r4, r5}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    40aa:	6885      	ldr	r5, [r0, #8]
    40ac:	428d      	cmp	r5, r1
{
    40ae:	461c      	mov	r4, r3
    if (off > fa->fa_size || off + len > fa->fa_size) {
    40b0:	d308      	bcc.n	40c4 <flash_area_write+0x1c>
    40b2:	440c      	add	r4, r1
    40b4:	42a5      	cmp	r5, r4
    40b6:	d305      	bcc.n	40c4 <flash_area_write+0x1c>
        return -1;
    }
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    40b8:	6844      	ldr	r4, [r0, #4]
    40ba:	7840      	ldrb	r0, [r0, #1]
    40bc:	4421      	add	r1, r4
                           (void *)src, len);
}
    40be:	bc30      	pop	{r4, r5}
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
    40c0:	f7ff bbf8 	b.w	38b4 <hal_flash_write>
}
    40c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    40c8:	bc30      	pop	{r4, r5}
    40ca:	4770      	bx	lr

000040cc <flash_area_erase>:

int
flash_area_erase(const struct flash_area *fa, uint32_t off, uint32_t len)
{
    40cc:	b410      	push	{r4}
    if (off > fa->fa_size || off + len > fa->fa_size) {
    40ce:	6884      	ldr	r4, [r0, #8]
    40d0:	428c      	cmp	r4, r1
{
    40d2:	4613      	mov	r3, r2
    if (off > fa->fa_size || off + len > fa->fa_size) {
    40d4:	d308      	bcc.n	40e8 <flash_area_erase+0x1c>
    40d6:	440b      	add	r3, r1
    40d8:	429c      	cmp	r4, r3
    40da:	d305      	bcc.n	40e8 <flash_area_erase+0x1c>
        return -1;
    }
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    40dc:	6843      	ldr	r3, [r0, #4]
}
    40de:	bc10      	pop	{r4}
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
    40e0:	7840      	ldrb	r0, [r0, #1]
    40e2:	4419      	add	r1, r3
    40e4:	f7ff bc18 	b.w	3918 <hal_flash_erase>
}
    40e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    40ec:	bc10      	pop	{r4}
    40ee:	4770      	bx	lr

000040f0 <flash_area_align>:

uint8_t
flash_area_align(const struct flash_area *fa)
{
    return hal_flash_align(fa->fa_device_id);
    40f0:	7840      	ldrb	r0, [r0, #1]
    40f2:	f7ff bbad 	b.w	3850 <hal_flash_align>

000040f6 <flash_area_erased_val>:
}

uint32_t
flash_area_erased_val(const struct flash_area *fa)
{
    40f6:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
    40f8:	7840      	ldrb	r0, [r0, #1]
    40fa:	f7ff fbb1 	bl	3860 <hal_flash_erased_val>
}
    40fe:	bd08      	pop	{r3, pc}

00004100 <flash_area_read_is_empty>:
}

int
flash_area_read_is_empty(const struct flash_area *fa, uint32_t off, void *dst,
                         uint32_t len)
{
    4100:	b410      	push	{r4}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
    4102:	6844      	ldr	r4, [r0, #4]
    4104:	7840      	ldrb	r0, [r0, #1]
    4106:	4421      	add	r1, r4
}
    4108:	bc10      	pop	{r4}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
    410a:	f7ff bc7c 	b.w	3a06 <hal_flash_isempty>
	...

00004110 <flash_map_init>:
    }
}

void
flash_map_init(void)
{
    4110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4114:	b089      	sub	sp, #36	; 0x24
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    rc = hal_flash_init();
    4116:	f7ff fb89 	bl	382c <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    411a:	b158      	cbz	r0, 4134 <flash_map_init+0x24>
    411c:	f7fc f83a 	bl	194 <hal_debugger_connected>
    4120:	b100      	cbz	r0, 4124 <flash_map_init+0x14>
    4122:	be01      	bkpt	0x0001
    4124:	2300      	movs	r3, #0
    4126:	4a3a      	ldr	r2, [pc, #232]	; (4210 <flash_map_init+0x100>)
    4128:	9300      	str	r3, [sp, #0]
    412a:	6814      	ldr	r4, [r2, #0]
    412c:	4619      	mov	r1, r3
    412e:	461a      	mov	r2, r3
    4130:	4618      	mov	r0, r3
    4132:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
    4134:	4f37      	ldr	r7, [pc, #220]	; (4214 <flash_map_init+0x104>)
    4136:	4b38      	ldr	r3, [pc, #224]	; (4218 <flash_map_init+0x108>)
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    4138:	4d38      	ldr	r5, [pc, #224]	; (421c <flash_map_init+0x10c>)
    flash_map = sysflash_map_dflt;
    413a:	603b      	str	r3, [r7, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
    413c:	2306      	movs	r3, #6
    413e:	602b      	str	r3, [r5, #0]
    mfg_init();
    4140:	f000 f94c 	bl	43dc <mfg_init>
    mfg_open(&reader);
    4144:	a803      	add	r0, sp, #12
    4146:	f000 f96d 	bl	4424 <mfg_open>
        fap->fa_id = meta_flash_area.area_id;
    414a:	4e35      	ldr	r6, [pc, #212]	; (4220 <flash_map_init+0x110>)
    *out_num_areas = 0;
    414c:	2400      	movs	r4, #0
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
    414e:	2102      	movs	r1, #2
    4150:	a803      	add	r0, sp, #12
    4152:	f000 f931 	bl	43b8 <mfg_seek_next_with_type>
        switch (rc) {
    4156:	f110 0f0f 	cmn.w	r0, #15
    415a:	d01a      	beq.n	4192 <flash_map_init+0x82>
    415c:	b9b0      	cbnz	r0, 418c <flash_map_init+0x7c>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
    415e:	a905      	add	r1, sp, #20
    4160:	a803      	add	r0, sp, #12
    4162:	f000 f934 	bl	43ce <mfg_read_tlv_flash_area>
        if (rc != 0) {
    4166:	b988      	cbnz	r0, 418c <flash_map_init+0x7c>
    4168:	230c      	movs	r3, #12
    416a:	4363      	muls	r3, r4
        fap->fa_id = meta_flash_area.area_id;
    416c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    4170:	559a      	strb	r2, [r3, r6]
    4172:	4433      	add	r3, r6
        fap->fa_device_id = meta_flash_area.device_id;
    4174:	f89d 2015 	ldrb.w	r2, [sp, #21]
    4178:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
    417a:	f8dd 2016 	ldr.w	r2, [sp, #22]
    417e:	605a      	str	r2, [r3, #4]
        (*out_num_areas)++;
    4180:	3401      	adds	r4, #1
        fap->fa_size = meta_flash_area.size;
    4182:	f8dd 201a 	ldr.w	r2, [sp, #26]
    4186:	609a      	str	r2, [r3, #8]
        if (*out_num_areas >= max_areas) {
    4188:	2c0a      	cmp	r4, #10
    418a:	d1e0      	bne.n	414e <flash_map_init+0x3e>
    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
}
    418c:	b009      	add	sp, #36	; 0x24
    418e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (rc != 0 || num_areas == 0) {
    4192:	2c00      	cmp	r4, #0
    4194:	d0fa      	beq.n	418c <flash_map_init+0x7c>
    flash_map_entries = num_areas;
    4196:	602c      	str	r4, [r5, #0]
    4198:	4c1f      	ldr	r4, [pc, #124]	; (4218 <flash_map_init+0x108>)
    flash_map = mfg_areas;
    419a:	4e21      	ldr	r6, [pc, #132]	; (4220 <flash_map_init+0x110>)
    419c:	603e      	str	r6, [r7, #0]
    419e:	f104 0848 	add.w	r8, r4, #72	; 0x48
                *dst_area = *dflt_area;
    41a2:	270c      	movs	r7, #12
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
    41a4:	7820      	ldrb	r0, [r4, #0]
    41a6:	f7ff feff 	bl	3fa8 <flash_area_find_idx>
    41aa:	3001      	adds	r0, #1
    41ac:	d10f      	bne.n	41ce <flash_map_init+0xbe>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
    41ae:	682b      	ldr	r3, [r5, #0]
    41b0:	2b09      	cmp	r3, #9
    41b2:	dc10      	bgt.n	41d6 <flash_map_init+0xc6>
    41b4:	4a1a      	ldr	r2, [pc, #104]	; (4220 <flash_map_init+0x110>)
    for (i = 0; i < flash_map_entries; i++) {
    41b6:	f04f 0c00 	mov.w	ip, #0
    41ba:	4563      	cmp	r3, ip
    41bc:	dc15      	bgt.n	41ea <flash_map_init+0xda>
                *dst_area = *dflt_area;
    41be:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    41c2:	fb07 6c03 	mla	ip, r7, r3, r6
    41c6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
                flash_map_entries++;
    41ca:	3301      	adds	r3, #1
    41cc:	602b      	str	r3, [r5, #0]
    41ce:	340c      	adds	r4, #12
    for (i = 0; i < num_dflt_entries; i++) {
    41d0:	45a0      	cmp	r8, r4
    41d2:	d1e7      	bne.n	41a4 <flash_map_init+0x94>
    41d4:	e7da      	b.n	418c <flash_map_init+0x7c>
                DEBUG_PANIC();
    41d6:	f7fb ffdd 	bl	194 <hal_debugger_connected>
    41da:	b100      	cbz	r0, 41de <flash_map_init+0xce>
    41dc:	be01      	bkpt	0x0001
    41de:	2300      	movs	r3, #0
    41e0:	461a      	mov	r2, r3
    41e2:	4619      	mov	r1, r3
    41e4:	4618      	mov	r0, r3
    41e6:	f7fd f8b7 	bl	1358 <__assert_func>
        if (area1->fa_device_id == area2->fa_device_id) {
    41ea:	7860      	ldrb	r0, [r4, #1]
    41ec:	7851      	ldrb	r1, [r2, #1]
    41ee:	4288      	cmp	r0, r1
    41f0:	d10a      	bne.n	4208 <flash_map_init+0xf8>
            end1 = area1->fa_off + area1->fa_size;
    41f2:	f8d4 e004 	ldr.w	lr, [r4, #4]
    41f6:	68a0      	ldr	r0, [r4, #8]
            end2 = area2->fa_off + area2->fa_size;
    41f8:	e9d2 1901 	ldrd	r1, r9, [r2, #4]
            end1 = area1->fa_off + area1->fa_size;
    41fc:	4470      	add	r0, lr
            if (end1 > area2->fa_off && area1->fa_off < end2) {
    41fe:	4288      	cmp	r0, r1
    4200:	d902      	bls.n	4208 <flash_map_init+0xf8>
            end2 = area2->fa_off + area2->fa_size;
    4202:	4449      	add	r1, r9
            if (end1 > area2->fa_off && area1->fa_off < end2) {
    4204:	458e      	cmp	lr, r1
    4206:	d3e2      	bcc.n	41ce <flash_map_init+0xbe>
    for (i = 0; i < flash_map_entries; i++) {
    4208:	f10c 0c01 	add.w	ip, ip, #1
    420c:	320c      	adds	r2, #12
    420e:	e7d4      	b.n	41ba <flash_map_init+0xaa>
    4210:	20000150 	.word	0x20000150
    4214:	20006384 	.word	0x20006384
    4218:	00004e84 	.word	0x00004e84
    421c:	20006388 	.word	0x20006388
    4220:	2000638c 	.word	0x2000638c

00004224 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
    4224:	4770      	bx	lr
	...

00004228 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
    4228:	b5f0      	push	{r4, r5, r6, r7, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
    422a:	4c25      	ldr	r4, [pc, #148]	; (42c0 <mfg_read_next_mmr+0x98>)
        if (mfg_mmrs[i].area_id == area_id) {
    422c:	4a25      	ldr	r2, [pc, #148]	; (42c4 <mfg_read_next_mmr+0x9c>)
    for (i = 0; i < mfg_num_mmrs; i++) {
    422e:	6826      	ldr	r6, [r4, #0]
{
    4230:	b085      	sub	sp, #20
    4232:	4605      	mov	r5, r0
    for (i = 0; i < mfg_num_mmrs; i++) {
    4234:	2300      	movs	r3, #0
        if (mfg_mmrs[i].area_id == area_id) {
    4236:	210c      	movs	r1, #12
    for (i = 0; i < mfg_num_mmrs; i++) {
    4238:	429e      	cmp	r6, r3
    423a:	dc0a      	bgt.n	4252 <mfg_read_next_mmr+0x2a>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
    423c:	2e02      	cmp	r6, #2
    423e:	d03c      	beq.n	42ba <mfg_read_next_mmr+0x92>
    rc = flash_area_open(area_id, &fap);
    4240:	a901      	add	r1, sp, #4
    4242:	4628      	mov	r0, r5
    4244:	f7ff feca 	bl	3fdc <flash_area_open>
    if (rc != 0) {
    4248:	b150      	cbz	r0, 4260 <mfg_read_next_mmr+0x38>
        return SYS_EIO;
    424a:	f06f 0004 	mvn.w	r0, #4
        return rc;
    }

    mfg_num_mmrs++;
    return 0;
}
    424e:	b005      	add	sp, #20
    4250:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (mfg_mmrs[i].area_id == area_id) {
    4252:	fb01 f003 	mul.w	r0, r1, r3
    4256:	5c80      	ldrb	r0, [r0, r2]
    4258:	42a8      	cmp	r0, r5
    425a:	d02b      	beq.n	42b4 <mfg_read_next_mmr+0x8c>
    for (i = 0; i < mfg_num_mmrs; i++) {
    425c:	3301      	adds	r3, #1
    425e:	e7eb      	b.n	4238 <mfg_read_next_mmr+0x10>
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
    4260:	9801      	ldr	r0, [sp, #4]
    4262:	6881      	ldr	r1, [r0, #8]
    4264:	2308      	movs	r3, #8
    4266:	eb0d 0203 	add.w	r2, sp, r3
    426a:	3908      	subs	r1, #8
    426c:	f7ff ff0a 	bl	4084 <flash_area_read>
    if (rc != 0) {
    4270:	2800      	cmp	r0, #0
    4272:	d1ea      	bne.n	424a <mfg_read_next_mmr+0x22>
    if (ftr.magic != MFG_META_MAGIC) {
    4274:	4b14      	ldr	r3, [pc, #80]	; (42c8 <mfg_read_next_mmr+0xa0>)
    4276:	9a03      	ldr	r2, [sp, #12]
    4278:	429a      	cmp	r2, r3
    427a:	d115      	bne.n	42a8 <mfg_read_next_mmr+0x80>
    if (ftr.version != MFG_META_VERSION) {
    427c:	f89d 300a 	ldrb.w	r3, [sp, #10]
    4280:	2b02      	cmp	r3, #2
    4282:	d114      	bne.n	42ae <mfg_read_next_mmr+0x86>
    if (ftr.size > fap->fa_size) {
    4284:	9b01      	ldr	r3, [sp, #4]
    4286:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    428a:	689b      	ldr	r3, [r3, #8]
    428c:	4299      	cmp	r1, r3
    428e:	d80b      	bhi.n	42a8 <mfg_read_next_mmr+0x80>
    *out_mmr = (struct mfg_mmr) {
    4290:	4f0c      	ldr	r7, [pc, #48]	; (42c4 <mfg_read_next_mmr+0x9c>)
    4292:	220c      	movs	r2, #12
    4294:	4372      	muls	r2, r6
        .offset = fap->fa_size - ftr.size,
    4296:	1a5b      	subs	r3, r3, r1
    *out_mmr = (struct mfg_mmr) {
    4298:	18be      	adds	r6, r7, r2
    429a:	e9c6 3101 	strd	r3, r1, [r6, #4]
    mfg_num_mmrs++;
    429e:	6823      	ldr	r3, [r4, #0]
    *out_mmr = (struct mfg_mmr) {
    42a0:	54bd      	strb	r5, [r7, r2]
    mfg_num_mmrs++;
    42a2:	3301      	adds	r3, #1
    42a4:	6023      	str	r3, [r4, #0]
    42a6:	e7d2      	b.n	424e <mfg_read_next_mmr+0x26>
        return SYS_ENODEV;
    42a8:	f06f 0008 	mvn.w	r0, #8
    42ac:	e7cf      	b.n	424e <mfg_read_next_mmr+0x26>
        return SYS_ENOTSUP;
    42ae:	f06f 000b 	mvn.w	r0, #11
    42b2:	e7cc      	b.n	424e <mfg_read_next_mmr+0x26>
            return SYS_EALREADY;
    42b4:	f06f 000a 	mvn.w	r0, #10
    42b8:	e7c9      	b.n	424e <mfg_read_next_mmr+0x26>
        return SYS_ENOMEM;
    42ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42be:	e7c6      	b.n	424e <mfg_read_next_mmr+0x26>
    42c0:	20006420 	.word	0x20006420
    42c4:	20006408 	.word	0x20006408
    42c8:	3bb2a269 	.word	0x3bb2a269

000042cc <mfg_read_tlv_body>:
{
    42cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
    42ce:	4b18      	ldr	r3, [pc, #96]	; (4330 <mfg_read_tlv_body+0x64>)
{
    42d0:	4616      	mov	r6, r2
    assert(reader->mmr_idx < mfg_num_mmrs);
    42d2:	681b      	ldr	r3, [r3, #0]
    42d4:	7882      	ldrb	r2, [r0, #2]
    42d6:	429a      	cmp	r2, r3
{
    42d8:	4604      	mov	r4, r0
    42da:	460d      	mov	r5, r1
    assert(reader->mmr_idx < mfg_num_mmrs);
    42dc:	db09      	blt.n	42f2 <mfg_read_tlv_body+0x26>
    42de:	f7fb ff59 	bl	194 <hal_debugger_connected>
    42e2:	b100      	cbz	r0, 42e6 <mfg_read_tlv_body+0x1a>
    42e4:	be01      	bkpt	0x0001
    42e6:	2300      	movs	r3, #0
    42e8:	461a      	mov	r2, r3
    42ea:	4619      	mov	r1, r3
    42ec:	4618      	mov	r0, r3
    42ee:	f7fd f833 	bl	1358 <__assert_func>
    rc = flash_area_open(mmr->area_id, fap);
    42f2:	230c      	movs	r3, #12
    42f4:	4353      	muls	r3, r2
    42f6:	4a0f      	ldr	r2, [pc, #60]	; (4334 <mfg_read_tlv_body+0x68>)
    42f8:	a901      	add	r1, sp, #4
    42fa:	5cd0      	ldrb	r0, [r2, r3]
    42fc:	f7ff fe6e 	bl	3fdc <flash_area_open>
    if (rc != 0) {
    4300:	4601      	mov	r1, r0
    4302:	b118      	cbz	r0, 430c <mfg_read_tlv_body+0x40>
        return SYS_EIO;
    4304:	f06f 0004 	mvn.w	r0, #4
}
    4308:	b002      	add	sp, #8
    430a:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
    430c:	4632      	mov	r2, r6
    430e:	4628      	mov	r0, r5
    4310:	f7fd fb55 	bl	19be <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
    4314:	7863      	ldrb	r3, [r4, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
    4316:	6861      	ldr	r1, [r4, #4]
    4318:	9801      	ldr	r0, [sp, #4]
    431a:	42b3      	cmp	r3, r6
    431c:	bfa8      	it	ge
    431e:	4633      	movge	r3, r6
    4320:	462a      	mov	r2, r5
    4322:	3102      	adds	r1, #2
    4324:	f7ff feae 	bl	4084 <flash_area_read>
    if (rc != 0) {
    4328:	2800      	cmp	r0, #0
    432a:	d0ed      	beq.n	4308 <mfg_read_tlv_body+0x3c>
    432c:	e7ea      	b.n	4304 <mfg_read_tlv_body+0x38>
    432e:	bf00      	nop
    4330:	20006420 	.word	0x20006420
    4334:	20006408 	.word	0x20006408

00004338 <mfg_seek_next>:
{
    4338:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if (reader->mmr_idx >= mfg_num_mmrs) {
    433c:	4d1c      	ldr	r5, [pc, #112]	; (43b0 <mfg_seek_next+0x78>)
    rc = flash_area_open(mmr->area_id, &fap);
    433e:	4e1d      	ldr	r6, [pc, #116]	; (43b4 <mfg_seek_next+0x7c>)
{
    4340:	4604      	mov	r4, r0
    4342:	462f      	mov	r7, r5
    if (reader->mmr_idx >= mfg_num_mmrs) {
    4344:	78a2      	ldrb	r2, [r4, #2]
    4346:	682b      	ldr	r3, [r5, #0]
    4348:	429a      	cmp	r2, r3
    434a:	db04      	blt.n	4356 <mfg_seek_next+0x1e>
        return SYS_EINVAL;
    434c:	f06f 0001 	mvn.w	r0, #1
}
    4350:	b002      	add	sp, #8
    4352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = flash_area_open(mmr->area_id, &fap);
    4356:	230c      	movs	r3, #12
    4358:	4353      	muls	r3, r2
    435a:	a901      	add	r1, sp, #4
    435c:	5cf0      	ldrb	r0, [r6, r3]
    435e:	eb06 0803 	add.w	r8, r6, r3
    4362:	f7ff fe3b 	bl	3fdc <flash_area_open>
    if (rc != 0) {
    4366:	b9e8      	cbnz	r0, 43a4 <mfg_seek_next+0x6c>
    if (reader->offset == 0) {
    4368:	6863      	ldr	r3, [r4, #4]
    436a:	b98b      	cbnz	r3, 4390 <mfg_seek_next+0x58>
        reader->offset = mmr->offset;
    436c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
    4370:	9801      	ldr	r0, [sp, #4]
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    4372:	6063      	str	r3, [r4, #4]
    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
    4374:	6883      	ldr	r3, [r0, #8]
    4376:	6861      	ldr	r1, [r4, #4]
    4378:	3b08      	subs	r3, #8
    437a:	4299      	cmp	r1, r3
    437c:	d30c      	bcc.n	4398 <mfg_seek_next+0x60>
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
    437e:	78a3      	ldrb	r3, [r4, #2]
    4380:	683a      	ldr	r2, [r7, #0]
    4382:	3301      	adds	r3, #1
    4384:	4293      	cmp	r3, r2
    4386:	da10      	bge.n	43aa <mfg_seek_next+0x72>
            reader->offset = 0;
    4388:	2200      	movs	r2, #0
    438a:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
    438c:	70a3      	strb	r3, [r4, #2]
    438e:	e7d9      	b.n	4344 <mfg_seek_next+0xc>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    4390:	7862      	ldrb	r2, [r4, #1]
    4392:	3302      	adds	r3, #2
    4394:	4413      	add	r3, r2
    4396:	e7eb      	b.n	4370 <mfg_seek_next+0x38>
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
    4398:	2302      	movs	r3, #2
    439a:	4622      	mov	r2, r4
    439c:	f7ff fe72 	bl	4084 <flash_area_read>
    if (rc != 0) {
    43a0:	2800      	cmp	r0, #0
    43a2:	d0d5      	beq.n	4350 <mfg_seek_next+0x18>
        rc = SYS_EIO;
    43a4:	f06f 0004 	mvn.w	r0, #4
    43a8:	e7d2      	b.n	4350 <mfg_seek_next+0x18>
            rc = SYS_EDONE;
    43aa:	f06f 000e 	mvn.w	r0, #14
    43ae:	e7cf      	b.n	4350 <mfg_seek_next+0x18>
    43b0:	20006420 	.word	0x20006420
    43b4:	20006408 	.word	0x20006408

000043b8 <mfg_seek_next_with_type>:
{
    43b8:	b538      	push	{r3, r4, r5, lr}
    43ba:	4604      	mov	r4, r0
    43bc:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
    43be:	4620      	mov	r0, r4
    43c0:	f7ff ffba 	bl	4338 <mfg_seek_next>
        if (rc != 0) {
    43c4:	b910      	cbnz	r0, 43cc <mfg_seek_next_with_type+0x14>
        if (reader->cur_tlv.type == type) {
    43c6:	7823      	ldrb	r3, [r4, #0]
    43c8:	42ab      	cmp	r3, r5
    43ca:	d1f8      	bne.n	43be <mfg_seek_next_with_type+0x6>
}
    43cc:	bd38      	pop	{r3, r4, r5, pc}

000043ce <mfg_read_tlv_flash_area>:
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
    43ce:	220a      	movs	r2, #10
    43d0:	f7ff bf7c 	b.w	42cc <mfg_read_tlv_body>

000043d4 <mfg_read_tlv_mmr_ref>:
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
    43d4:	2201      	movs	r2, #1
    43d6:	f7ff bf79 	b.w	42cc <mfg_read_tlv_body>
	...

000043dc <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
    43dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    int rc;

    if (mfg_initialized) {
    43de:	4b10      	ldr	r3, [pc, #64]	; (4420 <mfg_init+0x44>)
    43e0:	7818      	ldrb	r0, [r3, #0]
    43e2:	b9c8      	cbnz	r0, 4418 <mfg_init+0x3c>
        return;
    }
    mfg_initialized = true;
    43e4:	2201      	movs	r2, #1
    43e6:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
    43e8:	f7ff ff1e 	bl	4228 <mfg_read_next_mmr>
    if (rc != 0) {
    43ec:	b9a0      	cbnz	r0, 4418 <mfg_init+0x3c>
    mfg_open(&reader);
    43ee:	a802      	add	r0, sp, #8
    43f0:	f000 f818 	bl	4424 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
    43f4:	2104      	movs	r1, #4
    43f6:	a802      	add	r0, sp, #8
    43f8:	f7ff ffde 	bl	43b8 <mfg_seek_next_with_type>
        switch (rc) {
    43fc:	b960      	cbnz	r0, 4418 <mfg_init+0x3c>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
    43fe:	a901      	add	r1, sp, #4
    4400:	a802      	add	r0, sp, #8
    4402:	f7ff ffe7 	bl	43d4 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
    4406:	b938      	cbnz	r0, 4418 <mfg_init+0x3c>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
    4408:	f89d 0004 	ldrb.w	r0, [sp, #4]
    440c:	f7ff ff0c 	bl	4228 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
    4410:	2800      	cmp	r0, #0
    4412:	d0ef      	beq.n	43f4 <mfg_init+0x18>
    4414:	300b      	adds	r0, #11
    4416:	d0ed      	beq.n	43f4 <mfg_init+0x18>

    return;

err:
    MFG_LOG_ERROR("failed to read MMRs: rc=%d", rc);
}
    4418:	b005      	add	sp, #20
    441a:	f85d fb04 	ldr.w	pc, [sp], #4
    441e:	bf00      	nop
    4420:	20006404 	.word	0x20006404

00004424 <mfg_open>:
{
    4424:	b510      	push	{r4, lr}
    4426:	4604      	mov	r4, r0
    mfg_init();
    4428:	f7ff ffd8 	bl	43dc <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
    442c:	2300      	movs	r3, #0
    442e:	e9c4 3300 	strd	r3, r3, [r4]
}
    4432:	bd10      	pop	{r4, pc}

00004434 <__aeabi_uldivmod>:
    4434:	b953      	cbnz	r3, 444c <__aeabi_uldivmod+0x18>
    4436:	b94a      	cbnz	r2, 444c <__aeabi_uldivmod+0x18>
    4438:	2900      	cmp	r1, #0
    443a:	bf08      	it	eq
    443c:	2800      	cmpeq	r0, #0
    443e:	bf1c      	itt	ne
    4440:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    4444:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    4448:	f000 b972 	b.w	4730 <__aeabi_idiv0>
    444c:	f1ad 0c08 	sub.w	ip, sp, #8
    4450:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    4454:	f000 f806 	bl	4464 <__udivmoddi4>
    4458:	f8dd e004 	ldr.w	lr, [sp, #4]
    445c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4460:	b004      	add	sp, #16
    4462:	4770      	bx	lr

00004464 <__udivmoddi4>:
    4464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4468:	9e08      	ldr	r6, [sp, #32]
    446a:	4604      	mov	r4, r0
    446c:	4688      	mov	r8, r1
    446e:	2b00      	cmp	r3, #0
    4470:	d14b      	bne.n	450a <__udivmoddi4+0xa6>
    4472:	428a      	cmp	r2, r1
    4474:	4615      	mov	r5, r2
    4476:	d967      	bls.n	4548 <__udivmoddi4+0xe4>
    4478:	fab2 f282 	clz	r2, r2
    447c:	b14a      	cbz	r2, 4492 <__udivmoddi4+0x2e>
    447e:	f1c2 0720 	rsb	r7, r2, #32
    4482:	fa01 f302 	lsl.w	r3, r1, r2
    4486:	fa20 f707 	lsr.w	r7, r0, r7
    448a:	4095      	lsls	r5, r2
    448c:	ea47 0803 	orr.w	r8, r7, r3
    4490:	4094      	lsls	r4, r2
    4492:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4496:	0c23      	lsrs	r3, r4, #16
    4498:	fbb8 f7fe 	udiv	r7, r8, lr
    449c:	fa1f fc85 	uxth.w	ip, r5
    44a0:	fb0e 8817 	mls	r8, lr, r7, r8
    44a4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    44a8:	fb07 f10c 	mul.w	r1, r7, ip
    44ac:	4299      	cmp	r1, r3
    44ae:	d909      	bls.n	44c4 <__udivmoddi4+0x60>
    44b0:	18eb      	adds	r3, r5, r3
    44b2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    44b6:	f080 811b 	bcs.w	46f0 <__udivmoddi4+0x28c>
    44ba:	4299      	cmp	r1, r3
    44bc:	f240 8118 	bls.w	46f0 <__udivmoddi4+0x28c>
    44c0:	3f02      	subs	r7, #2
    44c2:	442b      	add	r3, r5
    44c4:	1a5b      	subs	r3, r3, r1
    44c6:	b2a4      	uxth	r4, r4
    44c8:	fbb3 f0fe 	udiv	r0, r3, lr
    44cc:	fb0e 3310 	mls	r3, lr, r0, r3
    44d0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    44d4:	fb00 fc0c 	mul.w	ip, r0, ip
    44d8:	45a4      	cmp	ip, r4
    44da:	d909      	bls.n	44f0 <__udivmoddi4+0x8c>
    44dc:	192c      	adds	r4, r5, r4
    44de:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    44e2:	f080 8107 	bcs.w	46f4 <__udivmoddi4+0x290>
    44e6:	45a4      	cmp	ip, r4
    44e8:	f240 8104 	bls.w	46f4 <__udivmoddi4+0x290>
    44ec:	3802      	subs	r0, #2
    44ee:	442c      	add	r4, r5
    44f0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    44f4:	eba4 040c 	sub.w	r4, r4, ip
    44f8:	2700      	movs	r7, #0
    44fa:	b11e      	cbz	r6, 4504 <__udivmoddi4+0xa0>
    44fc:	40d4      	lsrs	r4, r2
    44fe:	2300      	movs	r3, #0
    4500:	e9c6 4300 	strd	r4, r3, [r6]
    4504:	4639      	mov	r1, r7
    4506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    450a:	428b      	cmp	r3, r1
    450c:	d909      	bls.n	4522 <__udivmoddi4+0xbe>
    450e:	2e00      	cmp	r6, #0
    4510:	f000 80eb 	beq.w	46ea <__udivmoddi4+0x286>
    4514:	2700      	movs	r7, #0
    4516:	e9c6 0100 	strd	r0, r1, [r6]
    451a:	4638      	mov	r0, r7
    451c:	4639      	mov	r1, r7
    451e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4522:	fab3 f783 	clz	r7, r3
    4526:	2f00      	cmp	r7, #0
    4528:	d147      	bne.n	45ba <__udivmoddi4+0x156>
    452a:	428b      	cmp	r3, r1
    452c:	d302      	bcc.n	4534 <__udivmoddi4+0xd0>
    452e:	4282      	cmp	r2, r0
    4530:	f200 80fa 	bhi.w	4728 <__udivmoddi4+0x2c4>
    4534:	1a84      	subs	r4, r0, r2
    4536:	eb61 0303 	sbc.w	r3, r1, r3
    453a:	2001      	movs	r0, #1
    453c:	4698      	mov	r8, r3
    453e:	2e00      	cmp	r6, #0
    4540:	d0e0      	beq.n	4504 <__udivmoddi4+0xa0>
    4542:	e9c6 4800 	strd	r4, r8, [r6]
    4546:	e7dd      	b.n	4504 <__udivmoddi4+0xa0>
    4548:	b902      	cbnz	r2, 454c <__udivmoddi4+0xe8>
    454a:	deff      	udf	#255	; 0xff
    454c:	fab2 f282 	clz	r2, r2
    4550:	2a00      	cmp	r2, #0
    4552:	f040 808f 	bne.w	4674 <__udivmoddi4+0x210>
    4556:	1b49      	subs	r1, r1, r5
    4558:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    455c:	fa1f f885 	uxth.w	r8, r5
    4560:	2701      	movs	r7, #1
    4562:	fbb1 fcfe 	udiv	ip, r1, lr
    4566:	0c23      	lsrs	r3, r4, #16
    4568:	fb0e 111c 	mls	r1, lr, ip, r1
    456c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4570:	fb08 f10c 	mul.w	r1, r8, ip
    4574:	4299      	cmp	r1, r3
    4576:	d907      	bls.n	4588 <__udivmoddi4+0x124>
    4578:	18eb      	adds	r3, r5, r3
    457a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    457e:	d202      	bcs.n	4586 <__udivmoddi4+0x122>
    4580:	4299      	cmp	r1, r3
    4582:	f200 80cd 	bhi.w	4720 <__udivmoddi4+0x2bc>
    4586:	4684      	mov	ip, r0
    4588:	1a59      	subs	r1, r3, r1
    458a:	b2a3      	uxth	r3, r4
    458c:	fbb1 f0fe 	udiv	r0, r1, lr
    4590:	fb0e 1410 	mls	r4, lr, r0, r1
    4594:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    4598:	fb08 f800 	mul.w	r8, r8, r0
    459c:	45a0      	cmp	r8, r4
    459e:	d907      	bls.n	45b0 <__udivmoddi4+0x14c>
    45a0:	192c      	adds	r4, r5, r4
    45a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    45a6:	d202      	bcs.n	45ae <__udivmoddi4+0x14a>
    45a8:	45a0      	cmp	r8, r4
    45aa:	f200 80b6 	bhi.w	471a <__udivmoddi4+0x2b6>
    45ae:	4618      	mov	r0, r3
    45b0:	eba4 0408 	sub.w	r4, r4, r8
    45b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    45b8:	e79f      	b.n	44fa <__udivmoddi4+0x96>
    45ba:	f1c7 0c20 	rsb	ip, r7, #32
    45be:	40bb      	lsls	r3, r7
    45c0:	fa22 fe0c 	lsr.w	lr, r2, ip
    45c4:	ea4e 0e03 	orr.w	lr, lr, r3
    45c8:	fa01 f407 	lsl.w	r4, r1, r7
    45cc:	fa20 f50c 	lsr.w	r5, r0, ip
    45d0:	fa21 f30c 	lsr.w	r3, r1, ip
    45d4:	ea4f 481e 	mov.w	r8, lr, lsr #16
    45d8:	4325      	orrs	r5, r4
    45da:	fbb3 f9f8 	udiv	r9, r3, r8
    45de:	0c2c      	lsrs	r4, r5, #16
    45e0:	fb08 3319 	mls	r3, r8, r9, r3
    45e4:	fa1f fa8e 	uxth.w	sl, lr
    45e8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    45ec:	fb09 f40a 	mul.w	r4, r9, sl
    45f0:	429c      	cmp	r4, r3
    45f2:	fa02 f207 	lsl.w	r2, r2, r7
    45f6:	fa00 f107 	lsl.w	r1, r0, r7
    45fa:	d90b      	bls.n	4614 <__udivmoddi4+0x1b0>
    45fc:	eb1e 0303 	adds.w	r3, lr, r3
    4600:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    4604:	f080 8087 	bcs.w	4716 <__udivmoddi4+0x2b2>
    4608:	429c      	cmp	r4, r3
    460a:	f240 8084 	bls.w	4716 <__udivmoddi4+0x2b2>
    460e:	f1a9 0902 	sub.w	r9, r9, #2
    4612:	4473      	add	r3, lr
    4614:	1b1b      	subs	r3, r3, r4
    4616:	b2ad      	uxth	r5, r5
    4618:	fbb3 f0f8 	udiv	r0, r3, r8
    461c:	fb08 3310 	mls	r3, r8, r0, r3
    4620:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    4624:	fb00 fa0a 	mul.w	sl, r0, sl
    4628:	45a2      	cmp	sl, r4
    462a:	d908      	bls.n	463e <__udivmoddi4+0x1da>
    462c:	eb1e 0404 	adds.w	r4, lr, r4
    4630:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4634:	d26b      	bcs.n	470e <__udivmoddi4+0x2aa>
    4636:	45a2      	cmp	sl, r4
    4638:	d969      	bls.n	470e <__udivmoddi4+0x2aa>
    463a:	3802      	subs	r0, #2
    463c:	4474      	add	r4, lr
    463e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    4642:	fba0 8902 	umull	r8, r9, r0, r2
    4646:	eba4 040a 	sub.w	r4, r4, sl
    464a:	454c      	cmp	r4, r9
    464c:	46c2      	mov	sl, r8
    464e:	464b      	mov	r3, r9
    4650:	d354      	bcc.n	46fc <__udivmoddi4+0x298>
    4652:	d051      	beq.n	46f8 <__udivmoddi4+0x294>
    4654:	2e00      	cmp	r6, #0
    4656:	d069      	beq.n	472c <__udivmoddi4+0x2c8>
    4658:	ebb1 050a 	subs.w	r5, r1, sl
    465c:	eb64 0403 	sbc.w	r4, r4, r3
    4660:	fa04 fc0c 	lsl.w	ip, r4, ip
    4664:	40fd      	lsrs	r5, r7
    4666:	40fc      	lsrs	r4, r7
    4668:	ea4c 0505 	orr.w	r5, ip, r5
    466c:	e9c6 5400 	strd	r5, r4, [r6]
    4670:	2700      	movs	r7, #0
    4672:	e747      	b.n	4504 <__udivmoddi4+0xa0>
    4674:	f1c2 0320 	rsb	r3, r2, #32
    4678:	fa20 f703 	lsr.w	r7, r0, r3
    467c:	4095      	lsls	r5, r2
    467e:	fa01 f002 	lsl.w	r0, r1, r2
    4682:	fa21 f303 	lsr.w	r3, r1, r3
    4686:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    468a:	4338      	orrs	r0, r7
    468c:	0c01      	lsrs	r1, r0, #16
    468e:	fbb3 f7fe 	udiv	r7, r3, lr
    4692:	fa1f f885 	uxth.w	r8, r5
    4696:	fb0e 3317 	mls	r3, lr, r7, r3
    469a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    469e:	fb07 f308 	mul.w	r3, r7, r8
    46a2:	428b      	cmp	r3, r1
    46a4:	fa04 f402 	lsl.w	r4, r4, r2
    46a8:	d907      	bls.n	46ba <__udivmoddi4+0x256>
    46aa:	1869      	adds	r1, r5, r1
    46ac:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    46b0:	d22f      	bcs.n	4712 <__udivmoddi4+0x2ae>
    46b2:	428b      	cmp	r3, r1
    46b4:	d92d      	bls.n	4712 <__udivmoddi4+0x2ae>
    46b6:	3f02      	subs	r7, #2
    46b8:	4429      	add	r1, r5
    46ba:	1acb      	subs	r3, r1, r3
    46bc:	b281      	uxth	r1, r0
    46be:	fbb3 f0fe 	udiv	r0, r3, lr
    46c2:	fb0e 3310 	mls	r3, lr, r0, r3
    46c6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    46ca:	fb00 f308 	mul.w	r3, r0, r8
    46ce:	428b      	cmp	r3, r1
    46d0:	d907      	bls.n	46e2 <__udivmoddi4+0x27e>
    46d2:	1869      	adds	r1, r5, r1
    46d4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    46d8:	d217      	bcs.n	470a <__udivmoddi4+0x2a6>
    46da:	428b      	cmp	r3, r1
    46dc:	d915      	bls.n	470a <__udivmoddi4+0x2a6>
    46de:	3802      	subs	r0, #2
    46e0:	4429      	add	r1, r5
    46e2:	1ac9      	subs	r1, r1, r3
    46e4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    46e8:	e73b      	b.n	4562 <__udivmoddi4+0xfe>
    46ea:	4637      	mov	r7, r6
    46ec:	4630      	mov	r0, r6
    46ee:	e709      	b.n	4504 <__udivmoddi4+0xa0>
    46f0:	4607      	mov	r7, r0
    46f2:	e6e7      	b.n	44c4 <__udivmoddi4+0x60>
    46f4:	4618      	mov	r0, r3
    46f6:	e6fb      	b.n	44f0 <__udivmoddi4+0x8c>
    46f8:	4541      	cmp	r1, r8
    46fa:	d2ab      	bcs.n	4654 <__udivmoddi4+0x1f0>
    46fc:	ebb8 0a02 	subs.w	sl, r8, r2
    4700:	eb69 020e 	sbc.w	r2, r9, lr
    4704:	3801      	subs	r0, #1
    4706:	4613      	mov	r3, r2
    4708:	e7a4      	b.n	4654 <__udivmoddi4+0x1f0>
    470a:	4660      	mov	r0, ip
    470c:	e7e9      	b.n	46e2 <__udivmoddi4+0x27e>
    470e:	4618      	mov	r0, r3
    4710:	e795      	b.n	463e <__udivmoddi4+0x1da>
    4712:	4667      	mov	r7, ip
    4714:	e7d1      	b.n	46ba <__udivmoddi4+0x256>
    4716:	4681      	mov	r9, r0
    4718:	e77c      	b.n	4614 <__udivmoddi4+0x1b0>
    471a:	3802      	subs	r0, #2
    471c:	442c      	add	r4, r5
    471e:	e747      	b.n	45b0 <__udivmoddi4+0x14c>
    4720:	f1ac 0c02 	sub.w	ip, ip, #2
    4724:	442b      	add	r3, r5
    4726:	e72f      	b.n	4588 <__udivmoddi4+0x124>
    4728:	4638      	mov	r0, r7
    472a:	e708      	b.n	453e <__udivmoddi4+0xda>
    472c:	4637      	mov	r7, r6
    472e:	e6e9      	b.n	4504 <__udivmoddi4+0xa0>

00004730 <__aeabi_idiv0>:
    4730:	4770      	bx	lr
    4732:	bf00      	nop

00004734 <flash_devs>:
    4734:	4788 0000 00e8 2000                         .G..... 

0000473c <spiflash_characteristics>:
    473c:	7530 0000 1a80 0006 d4c0 0001 3500 000c     0u...........5..
    474c:	49f0 0002 4240 000f c6c0 002d 9680 0098     .I..@B....-.....
    475c:	02bc 0000 0bb8 0000 0014 0000 0032 0000     ............2...

0000476c <spiflash_flash_funcs>:
    476c:	0615 0000 0691 0000 07fb 0000 04f1 0000     ................
    477c:	0000 0000 0915 0000 08a9 0000               ............

00004788 <nrf52k_flash_dev>:
    4788:	47a0 0000 0000 0000 0000 0008 0080 0000     .G..............
    4798:	0001 0000 00ff 0000                         ........

000047a0 <nrf52k_flash_funcs>:
    47a0:	0a91 0000 09c9 0000 0979 0000 0a9f 0000     ........y.......
    47b0:	0000 0000 09c5 0000 0000 0000               ............

000047bc <CSWTCH.27>:
    47bc:	0200 0604                                   ....

000047c0 <nrf52_hal_spis>:
    47c0:	0160 2000 0000 0000 0000 0000 0000 0000     `.. ............

000047d0 <os_bsp_spi0m_cfg>:
    47d0:	0302 0004                                   ....

000047d4 <nrf52_hal_timers>:
    47d4:	0188 2000 0000 0000 0000 0000 0000 0000     ... ............
	...
    47ec:	7341 6573 7472 4020 3020 2578 0a78 4100     Assert @ 0x%x..A
    47fc:	7373 7265 2074 2040 7830 7825 2d20 2520     ssert @ 0x%x - %
    480c:	3a73 6425 000a 6e55 6168 646e 656c 2064     s:%d..Unhandled 
    481c:	6e69 6574 7272 7075 2074 2528 646c 2c29     interrupt (%ld),
    482c:	6520 6378 7065 6974 6e6f 7320 2070 7830      exception sp 0x
    483c:	3025 6c38 0a78 2000 3072 303a 2578 3830     %08lx.. r0:0x%08
    484c:	786c 2020 3172 303a 2578 3830 786c 2020     lx  r1:0x%08lx  
    485c:	3272 303a 2578 3830 786c 2020 3372 303a     r2:0x%08lx  r3:0
    486c:	2578 3830 786c 000a 7220 3a34 7830 3025     x%08lx.. r4:0x%0
    487c:	6c38 2078 7220 3a35 7830 3025 6c38 2078     8lx  r5:0x%08lx 
    488c:	7220 3a36 7830 3025 6c38 2078 7220 3a37      r6:0x%08lx  r7:
    489c:	7830 3025 6c38 0a78 2000 3872 303a 2578     0x%08lx.. r8:0x%
    48ac:	3830 786c 2020 3972 303a 2578 3830 786c     08lx  r9:0x%08lx
    48bc:	7220 3031 303a 2578 3830 786c 7220 3131      r10:0x%08lx r11
    48cc:	303a 2578 3830 786c 000a 3172 3a32 7830     :0x%08lx..r12:0x
    48dc:	3025 6c38 2078 6c20 3a72 7830 3025 6c38     %08lx  lr:0x%08l
    48ec:	2078 7020 3a63 7830 3025 6c38 2078 7370     x  pc:0x%08lx ps
    48fc:	3a72 7830 3025 6c38 0a78 4900 5343 3a52     r:0x%08lx..ICSR:
    490c:	7830 3025 6c38 2078 4648 5253 303a 2578     0x%08lx HFSR:0x%
    491c:	3830 786c 4320 5346 3a52 7830 3025 6c38     08lx CFSR:0x%08l
    492c:	0a78 4200 4146 3a52 7830 3025 6c38 2078     x..BFAR:0x%08lx 
    493c:	4d4d 4146 3a52 7830 3025 6c38 0a78 6d00     MMFAR:0x%08lx..m
    494c:	7973 5f73 0031                              sys_1.

00004952 <backlights>:
    4952:	160e                                         ...

00004955 <fast_pulse>:
    4955:	0101 0000 0101 0202 0202 0202               ............

00004961 <faster_pulse>:
    4961:	0001 0201 0202                              ......

00004967 <fastest_pulse>:
    4967:	0200                                         ...

0000496a <slow_pulse>:
    496a:	0101 0001 0000 0101 0201 0202 0202 0202     ................
    497a:	0202                                        ..

0000497c <slower_pulse>:
    497c:	0101 0101 0101 0000 0000 0000 0101 0101     ................
    498c:	0101 0202 0202 0202 0202 0202 0202 0202     ................
    499c:	0202 0202 6f42 746f 6f6c 6461 7265 6420     ....Bootloader d
    49ac:	6e6f 0a65 5300 6174 7472 6e69 2067 6f42     one..Starting Bo
    49bc:	746f 6f6c 6461 7265 2e2e 0a2e 4300 6568     otloader.....Che
    49cc:	6b63 6220 7475 6f74 3a6e 2520 0a64 5700     ck button: %d..W
    49dc:	6961 6974 676e 3520 7320 6365 6e6f 7364     aiting 5 seconds
    49ec:	6620 726f 6220 7475 6f74 2e6e 2e2e 000a      for button.....
    49fc:	6c46 7361 6968 676e 6120 646e 7220 7365     Flashing and res
    4a0c:	7465 6974 676e 2e2e 0a2e                     etting.....

00004a17 <COLMOD_PARA.8090>:
    4a17:	                                             .

00004a18 <FRMCTR1_PARA.8078>:
    4a18:	2c01                                         .,-

00004a1b <FRMCTR2_PARA.8079>:
    4a1b:	2c01                                         .,-

00004a1e <FRMCTR3_PARA.8080>:
    4a1e:	2c01 012d 2d2c                              .,-.,-

00004a24 <INVCTR_PARA.8081>:
    4a24:	                                             .

00004a25 <MADCTL1_PARA.8088>:
	...

00004a26 <PWCTR1_PARA.8082>:
    4a26:	02a2                                         ...

00004a29 <PWCTR2_PARA.8083>:
    4a29:	                                             .

00004a2a <PWCTR3_PARA.8084>:
    4a2a:	000a                                        ..

00004a2c <PWCTR4_PARA.8085>:
    4a2c:	2a8a                                        .*

00004a2e <PWCTR5_PARA.8086>:
    4a2e:	ee8a                                        ..

00004a30 <VMCTR1_PARA.8087>:
    4a30:	440e 7369 6c70 7961 6e69 2067 6d69 6761     .Displaying imag
    4a40:	2e65 2e2e 000a 6d49 6761 2065 6964 7073     e.....Image disp
    4a50:	616c 6579 0a64 2500 3630 756c 0020 0000     layed..%06lu ...

00004a60 <boot_img_magic>:
    4a60:	c277 f395 d260 7fef 5235 0f50 b62c 8079     w...`...5RP.,.y.

00004a70 <boot_swap_tables>:
    4a70:	0104 0304 0204 0104 0104 0304 0301 0403     ................
    4a80:	0401 6570 6d72 7400 7365 0074 5542 3b47     ..perm.test.BUG;
    4a90:	6320 6e61 7427 6820 7061 6570 006e 6572      can't happen.re
    4aa0:	6576 7472 5b00 4e49 5d46 5320 6177 2070     vert.[INF] Swap 
    4ab0:	7974 6570 203a 7325 000a 495b 464e 205d     type: %s..[INF] 
    4ac0:	7753 7061 7420 7079 3a65 6e20 6e6f 0065     Swap type: none.
    4ad0:	6573 6f63 646e 7261 0079 455b 5252 205d     secondary.[ERR] 
    4ae0:	6d49 6761 2065 6e69 7420 6568 2520 2073     Image in the %s 
    4af0:	6c73 746f 6920 2073 6f6e 2074 6176 696c     slot is not vali
    4b00:	2164 000a 575b 4e52 205d 6146 6c69 6465     d!..[WRN] Failed
    4b10:	7220 6165 6964 676e 7320 6365 6f74 7372      reading sectors
    4b20:	203b 4f42 544f 4d5f 5841 495f 474d 535f     ; BOOT_MAX_IMG_S
    4b30:	4345 4f54 5352 253d 2064 202d 6f74 206f     ECTORS=%d - too 
    4b40:	6d73 6c61 3f6c 000a 575b 4e52 205d 6146     small?..[WRN] Fa
    4b50:	6c69 6465 7220 6165 6964 676e 6920 616d     iled reading ima
    4b60:	6567 6820 6165 6564 7372 203b 6d49 6761     ge headers; Imag
    4b70:	3d65 7525 000a 575b 4e52 205d 6146 6c69     e=%u..[WRN] Fail
    4b80:	6465 7220 6165 6964 676e 6220 6f6f 2074     ed reading boot 
    4b90:	7473 7461 7375 203b 6d49 6761 3d65 7525     status; Image=%u
    4ba0:	000a 455b 5252 205d 6170 696e 2163 5b00     ..[ERR] panic!.[
    4bb0:	5245 5d52 6220 6461 6920 616d 6567 6d20     ERR] bad image m
    4bc0:	6761 6369 3020 2578 786c 203b 6d49 6761     agic 0x%lx; Imag
    4bd0:	3d65 7525 000a 575b 4e52 205d 6143 6e6e     e=%u..[WRN] Cann
    4be0:	746f 7520 6770 6172 6564 203a 6f6d 6572     ot upgrade: more
    4bf0:	7320 6365 6f74 7372 7420 6168 206e 6c61      sectors than al
    4c00:	6f6c 6577 0064 575b 4e52 205d 6143 6e6e     lowed.[WRN] Cann
    4c10:	746f 7520 6770 6172 6564 203a 6c73 746f     ot upgrade: slot
    4c20:	2073 6168 6576 6e20 6e6f 632d 6d6f 6170     s have non-compa
    4c30:	6974 6c62 2065 6573 7463 726f 0073 575b     tible sectors.[W
    4c40:	4e52 205d 6143 6e6e 746f 7520 6770 6172     RN] Cannot upgra
    4c50:	6564 203a 6f6e 2074 6c61 206c 6573 7463     de: not all sect
    4c60:	726f 2073 6966 2074 6e69 6973 6564 7320     ors fit inside s
    4c70:	7263 7461 6863 5b00 5257 5d4e 4320 6e61     cratch.[WRN] Can
    4c80:	6f6e 2074 7075 7267 6461 3a65 7320 6f6c     not upgrade: slo
    4c90:	7374 6120 6572 6e20 746f 6320 6d6f 6170     ts are not compa
    4ca0:	6974 6c62 0065                              tible.

00004ca6 <boot_status_tables>:
    4ca6:	0501 0001 0501 0203 0104 0104 0403 0203     ................
    4cb6:	455b 5252 205d 6544 6574 7463 6465 6920     [ERR] Detected i
    4cc6:	636e 6e6f 6973 7473 6e65 2074 7473 7461     nconsistent stat
    4cd6:	7375 0021 6162 0064 6f67 646f 7500 736e     us!.bad.good.uns
    4ce6:	7465 7000 6972 616d 7972 7320 6f6c 0074     et.primary slot.
    4cf6:	7250 6d69 7261 2079 6d69 6761 0065 495b     Primary image.[I
    4d06:	464e 205d 7325 203a 616d 6967 3d63 7325     NF] %s: magic=%s
    4d16:	202c 7773 7061 745f 7079 3d65 7830 7825     , swap_type=0x%x
    4d26:	202c 6f63 7970 645f 6e6f 3d65 7830 7825     , copy_done=0x%x
    4d36:	202c 6d69 6761 5f65 6b6f 303d 2578 0a78     , image_ok=0x%x.
    4d46:	5300 7263 7461 6863 5b00 4e49 5d46 4220     .Scratch.[INF] B
    4d56:	6f6f 2074 6f73 7275 6563 203a 7325 000a     oot source: %s..
    4d66:	495b 464e 205d 6f42 746f 7320 756f 6372     [INF] Boot sourc
    4d76:	3a65 6e20 6e6f 0065 0000                    e: none...

00004d80 <K>:
    4d80:	2f98 428a 4491 7137 fbcf b5c0 dba5 e9b5     ./.B.D7q........
    4d90:	c25b 3956 11f1 59f1 82a4 923f 5ed5 ab1c     [.V9...Y..?..^..
    4da0:	aa98 d807 5b01 1283 85be 2431 7dc3 550c     .....[....1$.}.U
    4db0:	5d74 72be b1fe 80de 06a7 9bdc f174 c19b     t].r........t...
    4dc0:	69c1 e49b 4786 efbe 9dc6 0fc1 a1cc 240c     .i...G.........$
    4dd0:	2c6f 2de9 84aa 4a74 a9dc 5cb0 88da 76f9     o,.-..tJ...\...v
    4de0:	5152 983e c66d a831 27c8 b003 7fc7 bf59     RQ>.m.1..'....Y.
    4df0:	0bf3 c6e0 9147 d5a7 6351 06ca 2967 1429     ....G...Qc..g)).
    4e00:	0a85 27b7 2138 2e1b 6dfc 4d2c 0d13 5338     ...'8!...m,M..8S
    4e10:	7354 650a 0abb 766a c92e 81c2 2c85 9272     Ts.e..jv.....,r.
    4e20:	e8a1 a2bf 664b a81a 8b70 c24b 51a3 c76c     ....Kf..p.K..Ql.
    4e30:	e819 d192 0624 d699 3585 f40e a070 106a     ....$....5..p.j.
    4e40:	c116 19a4 6c08 1e37 774c 2748 bcb5 34b0     .....l7.LwH'...4
    4e50:	0cb3 391c aa4a 4ed8 ca4f 5b9c 6ff3 682e     ...9J..NO..[.o.h
    4e60:	82ee 748f 636f 78a5 7814 84c8 0208 8cc7     ...toc.x.x......
    4e70:	fffa 90be 6ceb a450 a3f7 bef9 78f2 c671     .....lP......xq.

00004e80 <stdout>:
    4e80:	0154 2000                                   T.. 

00004e84 <sysflash_map_dflt>:
	...
    4e8c:	6000 0000 0001 0000 8000 0000 4000 0007     .`...........@..
    4e9c:	0102 0000 0000 0004 4000 0007 0003 0000     .........@......
    4eac:	c000 0007 1000 0000 0010 0000 6000 0000     .............`..
    4ebc:	2000 0000 0111 0000 4000 000b c000 0034     . .......@....4.

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  20196	    136	  25500	  45832	   b308	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_boot/app/boot/mynewt/mynewt.elf
