
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00029a64 vaddr 0x00029a64 paddr 0x00029a64 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00029a7c memsz 0x00029a7c flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x00029a7c align 2**16
         filesz 0x000003e0 memsz 0x00000404 flags rw-
    LOAD off    0x000304e0 vaddr 0x200004e0 paddr 0x00029e5c align 2**16
         filesz 0x00000000 memsz 0x00009008 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              00021a44  00008020  00008020  00008020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00029a64  00029a64  000304b8  2**0  CONTENTS
  3 .ARM.exidx         00000018  00029a64  00029a64  00029a64  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  000304b8  2**0  CONTENTS
  6 .data              000003e0  200000d8  00029a7c  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000024  200004b8  00029e5c  000304b8  2**2  ALLOC
  8 .bss               00009008  200004e0  00029e5c  000304e0  2**3  ALLOC
  9 .stack_dummy       000001b0  200094e8  200094e8  000304b8  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  00030668  2**0  CONTENTS, READONLY
 11 .comment           000000fe  00000000  00000000  000306a3  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000307a1  2**0  CONTENTS, READONLY
 13 .debug_line        00051308  00000000  00000000  000307a5  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        000fd27c  00000000  00000000  00081aad  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0001e6ca  00000000  00000000  0017ed29  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005cb8  00000000  00000000  0019d3f8  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         00025766  00000000  00000000  001a30b0  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00050b56  00000000  00000000  001c8816  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00005f38  00000000  00000000  0021936c  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       000101bc  00000000  00000000  0021f2a4  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_pubnames    0000148a  00000000  00000000  0022f460  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubtypes    00005687  00000000  00000000  002308ea  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00029a64 l    d  .ARM.extab	00000000 .ARM.extab
00029a64 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
200004b8 l    d  .bssnz	00000000 .bssnz
200004e0 l    d  .bss	00000000 .bss
200094e8 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
00008248 l     F .text	0000003c errata_16
00008284 l     F .text	0000004c errata_31
000082d0 l     F .text	0000003c errata_32
0000830c l     F .text	0000004c errata_36
00008358 l     F .text	0000003c errata_37
00008394 l     F .text	0000003c errata_57
000083d0 l     F .text	0000003c errata_66
0000840c l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 41zlgfyhb9r73787
00006bb9 l       .debug_str	00000000 
000079a5 l       .debug_str	00000000 
000079b3 l       .debug_str	00000000 
00007a11 l       .debug_str	00000000 
00007a23 l       .debug_str	00000000 
00007a2f l       .debug_str	00000000 
00007a63 l       .debug_str	00000000 
0000872a l       .debug_str	00000000 
00007aab l       .debug_str	00000000 
00007ace l       .debug_str	00000000 
00007b16 l       .debug_str	00000000 
00007b1a l       .debug_str	00000000 
00007b44 l       .debug_str	00000000 
00007b49 l       .debug_str	00000000 
00007b4f l       .debug_str	00000000 
000096d5 l       .debug_str	00000000 
00008760 l       .debug_str	00000000 
00007b5d l       .debug_str	00000000 
00007b8d l       .debug_str	00000000 
00007bb8 l       .debug_str	00000000 
00007bf4 l       .debug_str	00000000 
00007c33 l       .debug_str	00000000 
00007c3a l       .debug_str	00000000 
00007c7a l       .debug_str	00000000 
00007ca1 l       .debug_str	00000000 
00007cd2 l       .debug_str	00000000 
00007cd8 l       .debug_str	00000000 
00007d19 l       .debug_str	00000000 
00007d2e l       .debug_str	00000000 
00007d60 l       .debug_str	00000000 
00008973 l       .debug_str	00000000 
00007d94 l       .debug_str	00000000 
00008907 l       .debug_str	00000000 
00007dc5 l       .debug_str	00000000 
0000bbbc l       .debug_str	00000000 
00007dec l       .debug_str	00000000 
00007e4a l       .debug_str	00000000 
0000a861 l       .debug_str	00000000 
00007e7f l       .debug_str	00000000 
000131cc l       .debug_str	00000000 
00007eb9 l       .debug_str	00000000 
00007ee6 l       .debug_str	00000000 
00007f17 l       .debug_str	00000000 
00007f21 l       .debug_str	00000000 
00007f51 l       .debug_str	00000000 
00007fb5 l       .debug_str	00000000 
00007ffb l       .debug_str	00000000 
0000803b l       .debug_str	00000000 
00018637 l       .debug_str	00000000 
0000806a l       .debug_str	00000000 
000080b4 l       .debug_str	00000000 
000080bd l       .debug_str	00000000 
000080f5 l       .debug_str	00000000 
00008108 l       .debug_str	00000000 
00008150 l       .debug_str	00000000 
0000815b l       .debug_str	00000000 
00009d57 l       .debug_str	00000000 
00008191 l       .debug_str	00000000 
000097f8 l       .debug_str	00000000 
000081c2 l       .debug_str	00000000 
0001c411 l       .debug_str	00000000 
000081f3 l       .debug_str	00000000 
00008239 l       .debug_str	00000000 
0000a859 l       .debug_str	00000000 
00008241 l       .debug_str	00000000 
00008281 l       .debug_str	00000000 
000082c8 l       .debug_str	00000000 
000082f8 l       .debug_str	00000000 
0000830a l       .debug_str	00000000 
00008368 l       .debug_str	00000000 
0000837b l       .debug_str	00000000 
000083b7 l       .debug_str	00000000 
000083c5 l       .debug_str	00000000 
0000840c l       .debug_str	00000000 
00008448 l       .debug_str	00000000 
00008451 l       .debug_str	00000000 
0000847c l       .debug_str	00000000 
00008485 l       .debug_str	00000000 
00014d1a l       .debug_str	00000000 
000084dc l       .debug_str	00000000 
000084fd l       .debug_str	00000000 
00009ac4 l       .debug_str	00000000 
0001935a l       .debug_str	00000000 
0000c80f l       .debug_str	00000000 
0000e3b2 l       .debug_str	00000000 
0000c80e l       .debug_str	00000000 
0002394d l       .debug_str	00000000 
00008501 l       .debug_str	00000000 
00007f1c l       .debug_str	00000000 
000139fa l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000851e l       .debug_str	00000000 
00008524 l       .debug_str	00000000 
00008532 l       .debug_str	00000000 
0000853c l       .debug_str	00000000 
00008544 l       .debug_str	00000000 
00008550 l       .debug_str	00000000 
0000855b l       .debug_str	00000000 
0001e785 l       .debug_str	00000000 
00008575 l       .debug_str	00000000 
00013a2c l       .debug_str	00000000 
00013b83 l       .debug_str	00000000 
00024e83 l       .debug_str	00000000 
00008582 l       .debug_str	00000000 
0001d473 l       .debug_str	00000000 
00008587 l       .debug_str	00000000 
0000858e l       .debug_str	00000000 
0000859a l       .debug_str	00000000 
0001bf9c l       .debug_str	00000000 
00014b20 l       .debug_str	00000000 
000085a2 l       .debug_str	00000000 
000085a5 l       .debug_str	00000000 
000085ab l       .debug_str	00000000 
000085b3 l       .debug_str	00000000 
000085b9 l       .debug_str	00000000 
000085de l       .debug_str	00000000 
000085c4 l       .debug_str	00000000 
000085e7 l       .debug_str	00000000 
00008606 l       .debug_str	00000000 
000093fa l       .debug_str	00000000 
0000863b l       .debug_str	00000000 
0000862d l       .debug_str	00000000 
00008642 l       .debug_str	00000000 
0000864c l       .debug_str	00000000 
000086c0 l       .debug_str	00000000 
000086ae l       .debug_str	00000000 
000086cb l       .debug_str	00000000 
000086e4 l       .debug_str	00000000 
000086fa l       .debug_str	00000000 
00008718 l       .debug_str	00000000 
0000871c l       .debug_str	00000000 
00008733 l       .debug_str	00000000 
0000874b l       .debug_str	00000000 
00008754 l       .debug_str	00000000 
00008767 l       .debug_str	00000000 
0000876d l       .debug_str	00000000 
00008778 l       .debug_str	00000000 
0000877d l       .debug_str	00000000 
00000b70 l       .debug_str	00000000 
00000bb1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bc8 l       .debug_str	00000000 
00000c0c l       .debug_str	00000000 
00000bd0 l       .debug_str	00000000 
00000bcf l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0001a1f7 l       .debug_str	00000000 
00002c16 l       .debug_str	00000000 
00000bd4 l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
0001eb49 l       .debug_str	00000000 
00000bf0 l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00000bfc l       .debug_str	00000000 
00000c05 l       .debug_str	00000000 
0001c01f l       .debug_str	00000000 
00000c0f l       .debug_str	00000000 
00000c15 l       .debug_str	00000000 
00000c1b l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c28 l       .debug_str	00000000 
00000e25 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c48 l       .debug_str	00000000 
000142b6 l       .debug_str	00000000 
000011d8 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00000c50 l       .debug_str	00000000 
000002a6 l       .debug_str	00000000 
00000f94 l       .debug_str	00000000 
00000c53 l       .debug_str	00000000 
00000c5b l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00000c89 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca7 l       .debug_str	00000000 
00000cb1 l       .debug_str	00000000 
00000cbc l       .debug_str	00000000 
00000cc7 l       .debug_str	00000000 
00000cd4 l       .debug_str	00000000 
00000ce0 l       .debug_str	00000000 
00000ced l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d26 l       .debug_str	00000000 
00000d38 l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d62 l       .debug_str	00000000 
000084f1 l       .debug_str	00000000 
0000818f l       .debug_str	00000000 
00000d78 l       .debug_str	00000000 
00000df1 l       .debug_str	00000000 
00010772 l       .debug_str	00000000 
00009872 l       .debug_str	00000000 
00000d7c l       .debug_str	00000000 
00000d81 l       .debug_str	00000000 
00000d86 l       .debug_str	00000000 
00000d96 l       .debug_str	00000000 
00000daf l       .debug_str	00000000 
00000d9a l       .debug_str	00000000 
00000dbb l       .debug_str	00000000 
0000b3fa l       .debug_str	00000000 
00000e19 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
0001d101 l       .debug_str	00000000 
000011bb l       .debug_str	00000000 
00000e39 l       .debug_str	00000000 
0001c0f3 l       .debug_str	00000000 
00000e40 l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e54 l       .debug_str	00000000 
00000e58 l       .debug_str	00000000 
00000e63 l       .debug_str	00000000 
00000e7e l       .debug_str	00000000 
00000e6e l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000edf l       .debug_str	00000000 
00000ee4 l       .debug_str	00000000 
00000f46 l       .debug_str	00000000 
00000f51 l       .debug_str	00000000 
00000f98 l       .debug_str	00000000 
00000fe7 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000102e l       .debug_str	00000000 
00001073 l       .debug_str	00000000 
0000107c l       .debug_str	00000000 
0000108c l       .debug_str	00000000 
00001094 l       .debug_str	00000000 
000010e9 l       .debug_str	00000000 
00001146 l       .debug_str	00000000 
00001152 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001167 l       .debug_str	00000000 
00001173 l       .debug_str	00000000 
0000117c l       .debug_str	00000000 
00001184 l       .debug_str	00000000 
0000097d l       .debug_str	00000000 
0000118c l       .debug_str	00000000 
000011ba l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
0000e1e4 l       .debug_str	00000000 
000011c1 l       .debug_str	00000000 
000011c9 l       .debug_str	00000000 
00000b3b l       .debug_str	00000000 
000011d3 l       .debug_str	00000000 
000011dc l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
000109d6 l       .debug_str	00000000 
00000a7c l       .debug_str	00000000 
00000a4a l       .debug_str	00000000 
00013b60 l       .debug_str	00000000 
000117ad l       .debug_str	00000000 
00000a05 l       .debug_str	00000000 
000008b9 l       .debug_str	00000000 
0000088b l       .debug_str	00000000 
00008ccf l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001214 l       .debug_str	00000000 
0001135d l       .debug_str	00000000 
0001e166 l       .debug_str	00000000 
0000090f l       .debug_str	00000000 
00000a9e l       .debug_str	00000000 
000009ee l       .debug_str	00000000 
000008ca l       .debug_str	00000000 
00001249 l       .debug_str	00000000 
00001272 l       .debug_str	00000000 
000012d0 l       .debug_str	00000000 
000009ce l       .debug_str	00000000 
00000afe l       .debug_str	00000000 
00000acc l       .debug_str	00000000 
00001336 l       .debug_str	00000000 
00001262 l       .debug_str	00000000 
00000b2d l       .debug_str	00000000 
00000880 l       .debug_str	00000000 
00000a85 l       .debug_str	00000000 
00000b06 l       .debug_str	00000000 
00001354 l       .debug_str	00000000 
00000a62 l       .debug_str	00000000 
0000097e l       .debug_str	00000000 
000008f7 l       .debug_str	00000000 
0000136a l       .debug_str	00000000 
00001390 l       .debug_str	00000000 
00000892 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00001388 l       .debug_str	00000000 
0000136f l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00018636 l       .debug_str	00000000 
000013d3 l       .debug_str	00000000 
000013db l       .debug_str	00000000 
000013e4 l       .debug_str	00000000 
0000280d l       .debug_str	00000000 
000013ed l       .debug_str	00000000 
0001dba5 l       .debug_str	00000000 
000013f5 l       .debug_str	00000000 
00001401 l       .debug_str	00000000 
0000140c l       .debug_str	00000000 
00001414 l       .debug_str	00000000 
0000141c l       .debug_str	00000000 
00001518 l       .debug_str	00000000 
0000161c l       .debug_str	00000000 
0000162a l       .debug_str	00000000 
00001635 l       .debug_str	00000000 
0000163f l       .debug_str	00000000 
00001676 l       .debug_str	00000000 
00001653 l       .debug_str	00000000 
00001681 l       .debug_str	00000000 
000016fc l       .debug_str	00000000 
0000177f l       .debug_str	00000000 
0000178d l       .debug_str	00000000 
000017ec l       .debug_str	00000000 
00001853 l       .debug_str	00000000 
00001869 l       .debug_str	00000000 
00001879 l       .debug_str	00000000 
0001b743 l       .debug_str	00000000 
0000336a l       .debug_str	00000000 
00001888 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
00001892 l       .debug_str	00000000 
00001898 l       .debug_str	00000000 
0000189e l       .debug_str	00000000 
000164bf l       .debug_str	00000000 
00016a06 l       .debug_str	00000000 
000018aa l       .debug_str	00000000 
000018b2 l       .debug_str	00000000 
000018b8 l       .debug_str	00000000 
000018fe l       .debug_str	00000000 
000018db l       .debug_str	00000000 
0000190e l       .debug_str	00000000 
0000194e l       .debug_str	00000000 
0001b2e2 l       .debug_str	00000000 
00001996 l       .debug_str	00000000 
0000199c l       .debug_str	00000000 
000019a2 l       .debug_str	00000000 
000019cb l       .debug_str	00000000 
000019a8 l       .debug_str	00000000 
000019dd l       .debug_str	00000000 
00001a1f l       .debug_str	00000000 
0001b1cb l       .debug_str	00000000 
00001a69 l       .debug_str	00000000 
00001a6f l       .debug_str	00000000 
00001a75 l       .debug_str	00000000 
00001a9e l       .debug_str	00000000 
00001a7b l       .debug_str	00000000 
00001ab0 l       .debug_str	00000000 
00001af2 l       .debug_str	00000000 
0001a65a l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b42 l       .debug_str	00000000 
00001b48 l       .debug_str	00000000 
00001b4e l       .debug_str	00000000 
00001b77 l       .debug_str	00000000 
00001b54 l       .debug_str	00000000 
00001b88 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
00001c12 l       .debug_str	00000000 
00001c17 l       .debug_str	00000000 
0001b519 l       .debug_str	00000000 
00001c1c l       .debug_str	00000000 
00001c22 l       .debug_str	00000000 
00001c28 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c2e l       .debug_str	00000000 
00001c62 l       .debug_str	00000000 
00001ca3 l       .debug_str	00000000 
0001a712 l       .debug_str	00000000 
00001cec l       .debug_str	00000000 
00001d18 l       .debug_str	00000000 
00001cf5 l       .debug_str	00000000 
00001d29 l       .debug_str	00000000 
00001d6a l       .debug_str	00000000 
00001db3 l       .debug_str	00000000 
0001b6db l       .debug_str	00000000 
00001db8 l       .debug_str	00000000 
00001dc1 l       .debug_str	00000000 
00001dc8 l       .debug_str	00000000 
00001df3 l       .debug_str	00000000 
00001dd0 l       .debug_str	00000000 
00001e05 l       .debug_str	00000000 
00001e47 l       .debug_str	00000000 
0001b3b5 l       .debug_str	00000000 
00001e91 l       .debug_str	00000000 
00001e97 l       .debug_str	00000000 
00001e9d l       .debug_str	00000000 
00001ea3 l       .debug_str	00000000 
00001ea9 l       .debug_str	00000000 
00001eb1 l       .debug_str	00000000 
00001ebf l       .debug_str	00000000 
00001ece l       .debug_str	00000000 
00001edf l       .debug_str	00000000 
00001eea l       .debug_str	00000000 
00001ef5 l       .debug_str	00000000 
00001f00 l       .debug_str	00000000 
00001f07 l       .debug_str	00000000 
00001f4d l       .debug_str	00000000 
00001f2a l       .debug_str	00000000 
00001f5f l       .debug_str	00000000 
00001fa1 l       .debug_str	00000000 
0001a829 l       .debug_str	00000000 
00001feb l       .debug_str	00000000 
00002018 l       .debug_str	00000000 
00001ff5 l       .debug_str	00000000 
0000202a l       .debug_str	00000000 
0000206c l       .debug_str	00000000 
000020b6 l       .debug_str	00000000 
000020bb l       .debug_str	00000000 
000020e8 l       .debug_str	00000000 
000020c5 l       .debug_str	00000000 
000020fa l       .debug_str	00000000 
0000213c l       .debug_str	00000000 
00002186 l       .debug_str	00000000 
00008779 l       .debug_str	00000000 
00002205 l       .debug_str	00000000 
0000219a l       .debug_str	00000000 
000021aa l       .debug_str	00000000 
000021b3 l       .debug_str	00000000 
000021be l       .debug_str	00000000 
000021cd l       .debug_str	00000000 
000021e2 l       .debug_str	00000000 
00002213 l       .debug_str	00000000 
000022b0 l       .debug_str	00000000 
00002355 l       .debug_str	00000000 
00002360 l       .debug_str	00000000 
00002369 l       .debug_str	00000000 
000023ad l       .debug_str	00000000 
0000238a l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002443 l       .debug_str	00000000 
000024ce l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
00002536 l       .debug_str	00000000 
0000258a l       .debug_str	00000000 
000025a7 l       .debug_str	00000000 
000025bb l       .debug_str	00000000 
00002607 l       .debug_str	00000000 
0000265b l       .debug_str	00000000 
00002671 l       .debug_str	00000000 
00002685 l       .debug_str	00000000 
000026cc l       .debug_str	00000000 
0000271b l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
00002724 l       .debug_str	00000000 
00002755 l       .debug_str	00000000 
0000275b l       .debug_str	00000000 
00002763 l       .debug_str	00000000 
0000276a l       .debug_str	00000000 
00002772 l       .debug_str	00000000 
0000277d l       .debug_str	00000000 
00002785 l       .debug_str	00000000 
00002794 l       .debug_str	00000000 
00002798 l       .debug_str	00000000 
000027a3 l       .debug_str	00000000 
000027af l       .debug_str	00000000 
000027ba l       .debug_str	00000000 
00016680 l       .debug_str	00000000 
000027cb l       .debug_str	00000000 
000027d3 l       .debug_str	00000000 
000027da l       .debug_str	00000000 
000027e4 l       .debug_str	00000000 
000027ec l       .debug_str	00000000 
000027f4 l       .debug_str	00000000 
00002816 l       .debug_str	00000000 
00002821 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002835 l       .debug_str	00000000 
0000283e l       .debug_str	00000000 
0000db24 l       .debug_str	00000000 
00002849 l       .debug_str	00000000 
00002854 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
0000286f l       .debug_str	00000000 
0001a79a l       .debug_str	00000000 
0000613c l       .debug_str	00000000 
00002879 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028f1 l       .debug_str	00000000 
000028f8 l       .debug_str	00000000 
00002900 l       .debug_str	00000000 
00006155 l       .debug_str	00000000 
00002917 l       .debug_str	00000000 
00002927 l       .debug_str	00000000 
0000295a l       .debug_str	00000000 
0000296f l       .debug_str	00000000 
00002978 l       .debug_str	00000000 
000029d5 l       .debug_str	00000000 
00002a3a l       .debug_str	00000000 
00002a44 l       .debug_str	00000000 
00002a54 l       .debug_str	00000000 
00002a69 l       .debug_str	00000000 
00002a71 l       .debug_str	00000000 
00002ad5 l       .debug_str	00000000 
00002b41 l       .debug_str	00000000 
00002b48 l       .debug_str	00000000 
00002b50 l       .debug_str	00000000 
00002b91 l       .debug_str	00000000 
00002b6e l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb6 l       .debug_str	00000000 
00002bc9 l       .debug_str	00000000 
0001668f l       .debug_str	00000000 
00002bde l       .debug_str	00000000 
00002bf3 l       .debug_str	00000000 
00002c1d l       .debug_str	00000000 
00002c99 l       .debug_str	00000000 
00002d1d l       .debug_str	00000000 
00002d24 l       .debug_str	00000000 
00002d2c l       .debug_str	00000000 
0000294a l       .debug_str	00000000 
00002d4a l       .debug_str	00000000 
00002d5f l       .debug_str	00000000 
00002d9a l       .debug_str	00000000 
00002dac l       .debug_str	00000000 
0001dadb l       .debug_str	00000000 
00002de8 l       .debug_str	00000000 
00002df5 l       .debug_str	00000000 
00002e02 l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
00002e1a l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002e6a l       .debug_str	00000000 
00002e78 l       .debug_str	00000000 
0001eac4 l       .debug_str	00000000 
00016bc2 l       .debug_str	00000000 
00002e81 l       .debug_str	00000000 
00002ee3 l       .debug_str	00000000 
00024e3b l       .debug_str	00000000 
00002f6e l       .debug_str	00000000 
00002f4d l       .debug_str	00000000 
00002f82 l       .debug_str	00000000 
00002f8d l       .debug_str	00000000 
000109ae l       .debug_str	00000000 
00002f93 l       .debug_str	00000000 
00002f9f l       .debug_str	00000000 
00002fe4 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
00019e68 l       .debug_str	00000000 
00003037 l       .debug_str	00000000 
00003044 l       .debug_str	00000000 
00003048 l       .debug_str	00000000 
00003052 l       .debug_str	00000000 
0000305d l       .debug_str	00000000 
00003067 l       .debug_str	00000000 
00003070 l       .debug_str	00000000 
00003081 l       .debug_str	00000000 
000030b2 l       .debug_str	00000000 
000030be l       .debug_str	00000000 
00018970 l       .debug_str	00000000 
0000bad8 l       .debug_str	00000000 
0001e08e l       .debug_str	00000000 
0000feb6 l       .debug_str	00000000 
000030c7 l       .debug_str	00000000 
000030cd l       .debug_str	00000000 
000030d4 l       .debug_str	00000000 
000030e2 l       .debug_str	00000000 
0000af4e l       .debug_str	00000000 
000030f0 l       .debug_str	00000000 
000030f8 l       .debug_str	00000000 
0000efd6 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
0000311c l       .debug_str	00000000 
0001810a l       .debug_str	00000000 
00003124 l       .debug_str	00000000 
00003128 l       .debug_str	00000000 
0000312e l       .debug_str	00000000 
000243eb l       .debug_str	00000000 
00003132 l       .debug_str	00000000 
0001a22f l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003162 l       .debug_str	00000000 
000031b0 l       .debug_str	00000000 
0000321b l       .debug_str	00000000 
000093b2 l       .debug_str	00000000 
0001a1ad l       .debug_str	00000000 
00003285 l       .debug_str	00000000 
000002ee l       .debug_str	00000000 
000032e7 l       .debug_str	00000000 
0000332c l       .debug_str	00000000 
0000335c l       .debug_str	00000000 
00003369 l       .debug_str	00000000 
00003371 l       .debug_str	00000000 
00003381 l       .debug_str	00000000 
000033c6 l       .debug_str	00000000 
00003434 l       .debug_str	00000000 
000034cb l       .debug_str	00000000 
0000358b l       .debug_str	00000000 
00003674 l       .debug_str	00000000 
00003786 l       .debug_str	00000000 
000038c1 l       .debug_str	00000000 
00003a25 l       .debug_str	00000000 
00003bb2 l       .debug_str	00000000 
00003d68 l       .debug_str	00000000 
00003f47 l       .debug_str	00000000 
0000414f l       .debug_str	00000000 
00004380 l       .debug_str	00000000 
00004383 l       .debug_str	00000000 
000043d7 l       .debug_str	00000000 
00004452 l       .debug_str	00000000 
000044f4 l       .debug_str	00000000 
000045bd l       .debug_str	00000000 
000046ad l       .debug_str	00000000 
000047c4 l       .debug_str	00000000 
00004902 l       .debug_str	00000000 
00004a67 l       .debug_str	00000000 
00004bf3 l       .debug_str	00000000 
00004da6 l       .debug_str	00000000 
00004f80 l       .debug_str	00000000 
00005181 l       .debug_str	00000000 
000053a9 l       .debug_str	00000000 
000055f2 l       .debug_str	00000000 
00005858 l       .debug_str	00000000 
00005abd l       .debug_str	00000000 
00005d1a l       .debug_str	00000000 
00005f5a l       .debug_str	00000000 
00005f8b l       .debug_str	00000000 
00005f93 l       .debug_str	00000000 
00005f9c l       .debug_str	00000000 
00005fb1 l       .debug_str	00000000 
00005fbc l       .debug_str	00000000 
00005fc3 l       .debug_str	00000000 
00005fee l       .debug_str	00000000 
00005fff l       .debug_str	00000000 
00006034 l       .debug_str	00000000 
00006043 l       .debug_str	00000000 
0000089d l       .debug_str	00000000 
0000604b l       .debug_str	00000000 
00006053 l       .debug_str	00000000 
0000605d l       .debug_str	00000000 
00006066 l       .debug_str	00000000 
000060a1 l       .debug_str	00000000 
00006088 l       .debug_str	00000000 
00000b23 l       .debug_str	00000000 
00006083 l       .debug_str	00000000 
000060b0 l       .debug_str	00000000 
000060c8 l       .debug_str	00000000 
000060ce l       .debug_str	00000000 
000060d8 l       .debug_str	00000000 
0000610b l       .debug_str	00000000 
0000611b l       .debug_str	00000000 
00006125 l       .debug_str	00000000 
0000612e l       .debug_str	00000000 
00006137 l       .debug_str	00000000 
0000615e l       .debug_str	00000000 
00007ac4 l       .debug_str	00000000 
00006176 l       .debug_str	00000000 
000061aa l       .debug_str	00000000 
000061b3 l       .debug_str	00000000 
000061df l       .debug_str	00000000 
000061ee l       .debug_str	00000000 
00006221 l       .debug_str	00000000 
0000622e l       .debug_str	00000000 
0000623a l       .debug_str	00000000 
0000626b l       .debug_str	00000000 
00007f1d l       .debug_str	00000000 
00020c59 l       .debug_str	00000000 
00006f90 l       .debug_str	00000000 
00006272 l       .debug_str	00000000 
00006277 l       .debug_str	00000000 
0000627d l       .debug_str	00000000 
00006284 l       .debug_str	00000000 
0000628c l       .debug_str	00000000 
00023d15 l       .debug_str	00000000 
00006296 l       .debug_str	00000000 
000062a5 l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00006307 l       .debug_str	00000000 
00006354 l       .debug_str	00000000 
000063ab l       .debug_str	00000000 
000063f7 l       .debug_str	00000000 
00006400 l       .debug_str	00000000 
0000640b l       .debug_str	00000000 
0000641c l       .debug_str	00000000 
00006422 l       .debug_str	00000000 
00006427 l       .debug_str	00000000 
0000645a l       .debug_str	00000000 
0000645e l       .debug_str	00000000 
0000646d l       .debug_str	00000000 
00006477 l       .debug_str	00000000 
00006488 l       .debug_str	00000000 
00006491 l       .debug_str	00000000 
0000649c l       .debug_str	00000000 
000064a3 l       .debug_str	00000000 
000064b0 l       .debug_str	00000000 
000064b7 l       .debug_str	00000000 
000064bf l       .debug_str	00000000 
000064c9 l       .debug_str	00000000 
000064d7 l       .debug_str	00000000 
000064dd l       .debug_str	00000000 
000064eb l       .debug_str	00000000 
000064f7 l       .debug_str	00000000 
00006507 l       .debug_str	00000000 
00006510 l       .debug_str	00000000 
00006518 l       .debug_str	00000000 
00006523 l       .debug_str	00000000 
00006531 l       .debug_str	00000000 
00006536 l       .debug_str	00000000 
0000653b l       .debug_str	00000000 
00006544 l       .debug_str	00000000 
0001650d l       .debug_str	00000000 
00006552 l       .debug_str	00000000 
0000655a l       .debug_str	00000000 
00006567 l       .debug_str	00000000 
0000656d l       .debug_str	00000000 
00006571 l       .debug_str	00000000 
00006575 l       .debug_str	00000000 
0000657e l       .debug_str	00000000 
0000657b l       .debug_str	00000000 
00006585 l       .debug_str	00000000 
0000658a l       .debug_str	00000000 
00006594 l       .debug_str	00000000 
0000659d l       .debug_str	00000000 
000065a7 l       .debug_str	00000000 
000065af l       .debug_str	00000000 
000065b7 l       .debug_str	00000000 
0000660f l       .debug_str	00000000 
00009cc1 l       .debug_str	00000000 
0000665c l       .debug_str	00000000 
0000665f l       .debug_str	00000000 
00006664 l       .debug_str	00000000 
0000666a l       .debug_str	00000000 
00006672 l       .debug_str	00000000 
0000667b l       .debug_str	00000000 
000066d8 l       .debug_str	00000000 
00008989 l       .debug_str	00000000 
0000672a l       .debug_str	00000000 
00006736 l       .debug_str	00000000 
0000676e l       .debug_str	00000000 
0000677a l       .debug_str	00000000 
000067b2 l       .debug_str	00000000 
0000680f l       .debug_str	00000000 
00006861 l       .debug_str	00000000 
00006899 l       .debug_str	00000000 
000068d1 l       .debug_str	00000000 
00006926 l       .debug_str	00000000 
00006970 l       .debug_str	00000000 
00006977 l       .debug_str	00000000 
00008785 l       .debug_str	00000000 
0001b100 l       .debug_str	00000000 
0001b11b l       .debug_str	00000000 
0001b136 l       .debug_str	00000000 
0000697f l       .debug_str	00000000 
00006985 l       .debug_str	00000000 
000069dc l       .debug_str	00000000 
00009596 l       .debug_str	00000000 
00006a28 l       .debug_str	00000000 
00006a2f l       .debug_str	00000000 
00006a37 l       .debug_str	00000000 
00006a3f l       .debug_str	00000000 
00006a47 l       .debug_str	00000000 
00006a4e l       .debug_str	00000000 
00006a55 l       .debug_str	00000000 
00006aaa l       .debug_str	00000000 
00006af4 l       .debug_str	00000000 
00017770 l       .debug_str	00000000 
00006b08 l       .debug_str	00000000 
00006b13 l       .debug_str	00000000 
00006b21 l       .debug_str	00000000 
00006b58 l       .debug_str	00000000 
00006b65 l       .debug_str	00000000 
00019fd5 l       .debug_str	00000000 
00006b71 l       .debug_str	00000000 
00006b76 l       .debug_str	00000000 
00006bad l       .debug_str	00000000 
00006bbf l       .debug_str	00000000 
00006bf6 l       .debug_str	00000000 
00006c01 l       .debug_str	00000000 
0000199a l       .debug_str	00000000 
000019a0 l       .debug_str	00000000 
0001780d l       .debug_str	00000000 
00006c09 l       .debug_str	00000000 
00006c10 l       .debug_str	00000000 
0001e204 l       .debug_str	00000000 
00006c19 l       .debug_str	00000000 
000092ad l       .debug_str	00000000 
00006c23 l       .debug_str	00000000 
00006c2d l       .debug_str	00000000 
00006c3c l       .debug_str	00000000 
00006c72 l       .debug_str	00000000 
00006c76 l       .debug_str	00000000 
00006ca4 l       .debug_str	00000000 
00006cb0 l       .debug_str	00000000 
00006ce7 l       .debug_str	00000000 
0001dac4 l       .debug_str	00000000 
00006cf0 l       .debug_str	00000000 
00006cf8 l       .debug_str	00000000 
00006d0c l       .debug_str	00000000 
00006d3f l       .debug_str	00000000 
00006d4a l       .debug_str	00000000 
00006d80 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e23 l       .debug_str	00000000 
00006e76 l       .debug_str	00000000 
000127a6 l       .debug_str	00000000 
00008596 l       .debug_str	00000000 
00006ebe l       .debug_str	00000000 
00006ec7 l       .debug_str	00000000 
00006f08 l       .debug_str	00000000 
00006f11 l       .debug_str	00000000 
00008595 l       .debug_str	00000000 
0002517a l       .debug_str	00000000 
0000883d l       .debug_str	00000000 
00006f16 l       .debug_str	00000000 
00006f29 l       .debug_str	00000000 
000086f0 l       .debug_str	00000000 
00006f5a l       .debug_str	00000000 
00006f8c l       .debug_str	00000000 
00006f93 l       .debug_str	00000000 
00006f9d l       .debug_str	00000000 
00008741 l       .debug_str	00000000 
00006fa3 l       .debug_str	00000000 
00006fe6 l       .debug_str	00000000 
00022e9b l       .debug_str	00000000 
00006ffb l       .debug_str	00000000 
00007002 l       .debug_str	00000000 
0000703f l       .debug_str	00000000 
0000704e l       .debug_str	00000000 
0000708b l       .debug_str	00000000 
0000709a l       .debug_str	00000000 
000070a0 l       .debug_str	00000000 
000070e9 l       .debug_str	00000000 
000070f4 l       .debug_str	00000000 
0000713b l       .debug_str	00000000 
00007144 l       .debug_str	00000000 
000185ce l       .debug_str	00000000 
00007182 l       .debug_str	00000000 
000071c8 l       .debug_str	00000000 
000071d5 l       .debug_str	00000000 
000071df l       .debug_str	00000000 
00007234 l       .debug_str	00000000 
0000723f l       .debug_str	00000000 
00007291 l       .debug_str	00000000 
00007299 l       .debug_str	00000000 
0000730d l       .debug_str	00000000 
00007316 l       .debug_str	00000000 
00007348 l       .debug_str	00000000 
0000736f l       .debug_str	00000000 
0001096e l       .debug_str	00000000 
000073d9 l       .debug_str	00000000 
0001eac6 l       .debug_str	00000000 
000023b9 l       .debug_str	00000000 
00007449 l       .debug_str	00000000 
00007452 l       .debug_str	00000000 
0000745b l       .debug_str	00000000 
0000749a l       .debug_str	00000000 
000074b6 l       .debug_str	00000000 
000074be l       .debug_str	00000000 
0000750f l       .debug_str	00000000 
00007514 l       .debug_str	00000000 
00007556 l       .debug_str	00000000 
00007569 l       .debug_str	00000000 
0000759b l       .debug_str	00000000 
000075ab l       .debug_str	00000000 
000075d9 l       .debug_str	00000000 
000075e5 l       .debug_str	00000000 
0000761a l       .debug_str	00000000 
0000762d l       .debug_str	00000000 
00007677 l       .debug_str	00000000 
00007688 l       .debug_str	00000000 
0002217b l       .debug_str	00000000 
0000771e l       .debug_str	00000000 
0000775a l       .debug_str	00000000 
00007780 l       .debug_str	00000000 
000077bf l       .debug_str	00000000 
000077cf l       .debug_str	00000000 
0000783a l       .debug_str	00000000 
0000786e l       .debug_str	00000000 
0000856b l       .debug_str	00000000 
00007880 l       .debug_str	00000000 
000078b3 l       .debug_str	00000000 
000109eb l       .debug_str	00000000 
000078bb l       .debug_str	00000000 
00007950 l       .debug_str	00000000 
0001c91c l       .debug_str	00000000 
0000795c l       .debug_str	00000000 
00009126 l     F .text	00000028 _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17hc90ab95f8fe9867cE
0000914e l     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17h78f536f6529d6acdE
000087e8 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17hed9a745734db4e1eE
00008f0e l     F .text	00000012 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hfa4813af48620bbbE
00008ea8 l     F .text	00000014 _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h7fbf59b3963cac8fE
0000917c l     F .text	00000026 _ZN4core3any6TypeId2of17h678dcf5e90be79cdE
000087fc l     F .text	000006ac _ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E
000087e6 l     F .text	00000002 _ZN4core3ptr13drop_in_place17h00770497a4e91b46E
0000900a l     F .text	00000008 _ZN4core3ptr13drop_in_place17h6ae1af1416118836E
00008652 l     F .text	00000008 _ZN4core3ptr13drop_in_place17hbc0c1fc2aa8b6ff3E
0000865a l     F .text	0000001e _ZN4core3str21_$LT$impl$u20$str$GT$3len17he841da45b9c69883E
00008678 l     F .text	0000000a _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h022c0f523ccad626E
00008f24 l     F .text	00000010 _ZN4core5panic8Location4file17hfc9aa9a4958c9c3aE
00008f34 l     F .text	00000004 _ZN4core5panic8Location4line17h81a396f742303977E
00008f24 l     F .text	00000010 _ZN4core5panic9PanicInfo7payload17h692e6fef9ccf48e9E
00008f20 l     F .text	00000004 _ZN4core5panic9PanicInfo8location17h6e90b1f5ec8cea30E
00008f38 l     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha89a753dca6cd9f4E
000090fa l     F .text	0000002c _ZN4core6option15Option$LT$T$GT$6unwrap17h2738ac118120fc1fE
00008ebc l     F .text	00000052 _ZN4core6option18expect_none_failed17h6759d4401d28ac1fE
00008ebc l     F .text	00000052 _ZN4core6result13unwrap_failed17hf61210966f5a0bdbE
00008682 l     F .text	0000003c _ZN4core6result19Result$LT$T$C$E$GT$6expect17h56061f5b534d43a3E
00008fc0 l     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8475276e04d22ec4E
00008792 l     F .text	0000002e _ZN4core9panicking5panic17h692a68e116a8c946E
000087c0 l     F .text	00000026 _ZN4core9panicking9panic_fmt17h1abf46b1849e1e64E
000090e8 l     F .text	00000012 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h0816bf0a0366a198E
000091a2 l     F .text	00000024 _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17hea2831b1242142eeE
0000875a l     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h331d487878438b91E
000086fa l     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h77ed9d6357c846ceE
00008742 l     F .text	0000000a _ZN6mynewt3sys7console5flush17h8491f76cc7401f62E
000086be l     F .text	0000003c _ZN6mynewt3sys7console5print17h7763e54cd0d26396E
00008704 l     F .text	0000002e _ZN6mynewt3sys7console6buffer17h35108561f938a421E
00008732 l     F .text	00000010 _ZN6mynewt3sys7console8printint17hbf799f23e9896db3E
00008766 l     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h315affb69d21582dE
00008778 l     F .text	0000001a _ZN6mynewt6kernel2os15eventq_dflt_get17hee2ec5f38871c7e2E
0000874c l     F .text	0000000e _ZN6mynewt7sysinit17h1b1620554f4add73E
00009012 l     F .text	000000d6 rust_begin_unwind
00000000 l    df *ABS*	00000000 semihosting_console.c
200004e0 l     O .bss	00000004 semihost_mbuf
200000e8 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
200004e4 l     O .bss	00000010 avail_queue
200004f8 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20000505 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
0000935c l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 ble_main.c
0000937c l     F .text	00000014 bleprph_on_reset
00009390 l     F .text	000000dc bleprph_advertise
00009510 l     F .text	000001b8 bleprph_gap_event
0000946c l     F .text	00000024 bleprph_on_sync
00009490 l     F .text	00000080 bleprph_print_conn_desc
20000508 l     O .bss	00000019 ver_str.11833
00000000 l    df *ABS*	00000000 ble_misc.c
00000000 l    df *ABS*	00000000 ble_gatt_svr.c
0000976e l     F .text	00000026 gatt_svr_chr_write
00009794 l     F .text	000000bc gatt_svr_chr_access_sec_test
20000521 l     O .bss	00000001 gatt_svr_sec_test_static_val
200000f0 l     O .data	00000048 __compound_literal.0
00028a68 l     O .text	00000011 gatt_svr_chr_sec_test_rand_uuid
00028a7c l     O .text	00000011 gatt_svr_chr_sec_test_static_uuid
00028a90 l     O .text	00000011 gatt_svr_svc_sec_test_uuid
00028aa4 l     O .text	00000020 gatt_svr_svcs
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_watchdog.c
000098f4 l     F .text	00000016 nrf52_hal_wdt_default_handler
0000990c l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00009b30 l     F .text	0000001e os_main
20000680 l     O .bss	00002000 g_os_main_stack
20000578 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
00009e90 l     F .text	00000060 os_dev_add
00009ef0 l     F .text	00000026 os_dev_initialize
00009f16 l     F .text	00000020 os_dev_init
200026dc l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
200026e4 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0000aa60 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0000abe8 l     F .text	00000010 os_msys_find_biggest_pool
0000abf8 l     F .text	0000002c os_msys_find_pool
0000ac70 l     F .text	00000058 os_msys_init_once
200026fc l     O .bss	00004900 os_msys_1_data
20006ffc l     O .bss	0000000c os_msys_1_mbuf_pool
20007008 l     O .bss	0000001c os_msys_1_mempool
20000138 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0000af08 l     F .text	00000020 os_sanity_check_list_lock
0000af28 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
0000b2a0 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0000b408 l     F .text	0000004c os_deltatime
0000b454 l     F .text	00000064 os_time_tick
20007048 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
0000b592 l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000b790 l       .text	00000000 SVC_User
0000b7ae l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 memcmp.c
0000b860 l       .text	00000000 test1
0000b854 l       .text	00000000 loop1
0000b866 l       .text	00000000 res1
0000b882 l       .text	00000000 test2
0000b88a l       .text	00000000 done
0000b876 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0000b896 l       .text	00000000 test1
0000b892 l       .text	00000000 loop1
0000b8a4 l       .text	00000000 test2
0000b8a0 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0000b988 l     F .text	000000ec ui2a
0000ba74 l     F .text	00000020 i2a
0000ba94 l     F .text	00000030 a2d
0000bac4 l     F .text	00000036 a2i
0000bafa l     F .text	0000002a putf
0000bb24 l     F .text	0000011c putchw
0000bc40 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0000c074 l     F .text	00000004 stdin_read
0000c078 l     F .text	00000010 stdout_write
20000150 l     O .data	00000004 _stdin
20000154 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 compiler_builtins.28t0v07i-cgu.10
00000b70 l       .debug_str	00000000 
0000bbc4 l       .debug_str	00000000 
0000bc18 l       .debug_str	00000000 
0000bc61 l       .debug_str	00000000 
0000bc73 l       .debug_str	00000000 
0000feb6 l       .debug_str	00000000 
0000bd1e l       .debug_str	00000000 
00000c48 l       .debug_str	00000000 
000127a6 l       .debug_str	00000000 
000074b6 l       .debug_str	00000000 
00006ebe l       .debug_str	00000000 
0000bc77 l       .debug_str	00000000 
0000bcc8 l       .debug_str	00000000 
0000bd4d l       .debug_str	00000000 
0000bd6e l       .debug_str	00000000 
0000bcd4 l       .debug_str	00000000 
0000bce5 l       .debug_str	00000000 
0000bcf6 l       .debug_str	00000000 
0000bd06 l       .debug_str	00000000 
0000bd16 l       .debug_str	00000000 
0000bd25 l       .debug_str	00000000 
0000bd35 l       .debug_str	00000000 
0000bd45 l       .debug_str	00000000 
0000bd55 l       .debug_str	00000000 
0000bd66 l       .debug_str	00000000 
0000bd75 l       .debug_str	00000000 
0000bd85 l       .debug_str	00000000 
0000bd95 l       .debug_str	00000000 
0000bda4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 compiler_builtins.28t0v07i-cgu.98
00000b70 l       .debug_str	00000000 
0000bbc4 l       .debug_str	00000000 
0000bc18 l       .debug_str	00000000 
0000bc61 l       .debug_str	00000000 
000000e1 l       .debug_str	00000000 
0000bdb4 l       .debug_str	00000000 
0000bdb9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 compiler_builtins.28t0v07i-cgu.120
00000b70 l       .debug_str	00000000 
0000bbc4 l       .debug_str	00000000 
0000bc18 l       .debug_str	00000000 
0000bc61 l       .debug_str	00000000 
000000e1 l       .debug_str	00000000 
0000bdb4 l       .debug_str	00000000 
00000c48 l       .debug_str	00000000 
0001c91c l       .debug_str	00000000 
00006ebe l       .debug_str	00000000 
0000bdc6 l       .debug_str	00000000 
0000be0d l       .debug_str	00000000 
0000be1b l       .debug_str	00000000 
0000be61 l       .debug_str	00000000 
0000be6e l       .debug_str	00000000 
0000beb3 l       .debug_str	00000000 
0000bebf l       .debug_str	00000000 
0000bf1a l       .debug_str	00000000 
0000bf27 l       .debug_str	00000000 
0000bf6b l       .debug_str	00000000 
0000bf76 l       .debug_str	00000000 
0000bfbf l       .debug_str	00000000 
0000bfcf l       .debug_str	00000000 
0000c017 l       .debug_str	00000000 
0000c026 l       .debug_str	00000000 
0000c06b l       .debug_str	00000000 
0000c077 l       .debug_str	00000000 
0000c0d2 l       .debug_str	00000000 
0000c0df l       .debug_str	00000000 
0000c125 l       .debug_str	00000000 
0000c16c l       .debug_str	00000000 
0000c1b1 l       .debug_str	00000000 
0000c20c l       .debug_str	00000000 
0000c255 l       .debug_str	00000000 
0000c29d l       .debug_str	00000000 
0000c2e2 l       .debug_str	00000000 
0000c33d l       .debug_str	00000000 
0000c384 l       .debug_str	00000000 
0000c3c2 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
0000c40a l       .debug_str	00000000 
0000c414 l       .debug_str	00000000 
0000c456 l       .debug_str	00000000 
0000c463 l       .debug_str	00000000 
0000c4a1 l       .debug_str	00000000 
0000c4ab l       .debug_str	00000000 
0000c4e9 l       .debug_str	00000000 
0000c4f3 l       .debug_str	00000000 
0000c531 l       .debug_str	00000000 
0000c53b l       .debug_str	00000000 
0000c579 l       .debug_str	00000000 
0000c583 l       .debug_str	00000000 
0000bdb9 l       .debug_str	00000000 
0000c5c5 l       .debug_str	00000000 
0000c607 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 imgmgr.c
0000c548 l     F .text	0000005c imgr_erase_state
2000015c l     O .data	0000000c imgr_mgmt_group
00028c5c l     O .text	00000038 imgr_mgmt_handlers
00000000 l    df *ABS*	00000000 imgmgr_util.c
00000000 l    df *ABS*	00000000 mgmt.c
0000c60c l     F .text	00000054 mgmt_find_group
20007088 l     O .bss	00000004 evt_cb
2000708c l     O .bss	00000004 mgmt_group_list
20007090 l     O .bss	00000004 mgmt_group_list_end
00000000 l    df *ABS*	00000000 ble_gap.c
0000c7ac l     F .text	0000002a ble_gap_call_event_cb
0000c7d8 l     F .text	0000002c ble_gap_is_preempted
0000c804 l     F .text	00000010 ble_gap_has_client
0000c814 l     F .text	00000012 ble_gap_update_to_l2cap
0000c828 l     F .text	00000018 ble_gap_adv_active_instance
0000c840 l     F .text	00000014 ble_gap_accept_master_conn
0000c854 l     F .text	00000030 ble_gap_accept_slave_conn
0000c884 l     F .text	00000028 ble_gap_adv_type
0000c8ac l     F .text	00000032 ble_gap_adv_dflt_itvls
0000c8e0 l     F .text	00000028 ble_gap_update_entry_find
0000c908 l     F .text	00000046 ble_gap_validate_conn_params
0000c950 l     F .text	00000020 ble_gap_event_listener_call
0000c970 l     F .text	00000034 ble_gap_extract_conn_cb
0000c9a4 l     F .text	00000028 ble_gap_call_conn_event_cb
0000c9cc l     F .text	00000094 ble_gap_fill_conn_desc
0000ca60 l     F .text	00000016 ble_gap_conn_to_snapshot
0000ca76 l     F .text	00000028 ble_gap_find_snapshot
0000ca9e l     F .text	0000001e ble_gap_rd_rem_sup_feat_tx
0000cabc l     F .text	0000001a ble_gap_conn_cancel_tx
0000cad6 l     F .text	00000024 ble_gap_adv_enable_tx
0000cafa l     F .text	00000094 ble_gap_adv_params_tx
0000cb8e l     F .text	00000042 ble_gap_tx_param_pos_reply
0000cbd0 l     F .text	00000022 ble_gap_tx_param_neg_reply
0000cbf2 l     F .text	00000042 ble_gap_update_tx
0000cc34 l     F .text	00000030 ble_gap_update_entry_remove
0000cc64 l     F .text	00000020 ble_gap_slave_reset_state
0000cc84 l     F .text	0000002c ble_gap_slave_extract_cb
0000ccb0 l     F .text	00000038 ble_gap_adv_finished
0000cce8 l     F .text	00000024 ble_gap_master_reset_state
0000cd0c l     F .text	00000030 ble_gap_master_extract_state
0000cd3c l     F .text	00000032 ble_gap_master_connect_failure
0000cd70 l     F .text	00000018 ble_gap_master_failed
0000cd88 l     F .text	00000040 ble_gap_master_connect_cancelled
0000cdc8 l     F .text	00000014 ble_gap_update_entry_free
0000cddc l     F .text	00000038 ble_gap_master_ticks_until_exp
0000ce14 l     F .text	0000003c ble_gap_update_next_exp
0000ce50 l     F .text	0000003a ble_gap_update_timer
0000ce8c l     F .text	00000038 ble_gap_slave_ticks_until_exp
0000cec4 l     F .text	0000002c ble_gap_slave_timer
0000cef0 l     F .text	00000020 ble_gap_slave_set_timer
0000cf10 l     F .text	0000004c ble_gap_master_timer
0000cf5c l     F .text	00000084 ble_gap_adv_validate
0000cfe0 l     F .text	00000024 ble_gap_update_entry_alloc
0000d3ec l     F .text	00000022 ble_gap_adv_stop_no_lock
0000d438 l     F .text	00000028 ble_gap_conn_cancel_no_lock
0000d4cc l     F .text	0000003e ble_gap_update_notify
0000d6d4 l     F .text	0000002c ble_gap_update_l2cap_cb
0000d700 l     F .text	00000026 ble_gap_update_failed
20007094 l     O .bss	00000004 ble_gap_event_listener_list
20007098 l     O .bss	00000004 ble_gap_update_entries
2000709c l     O .bss	00000018 ble_gap_update_entry_mem
200070b4 l     O .bss	0000001c ble_gap_update_entry_pool
200004b8 l     O .bssnz	00000014 ble_gap_master
200004cc l     O .bssnz	00000010 ble_gap_slave
200070d0 l     O .bss	0000000c preempt_done_mutex
200070dc l     O .bss	00000008 slaves.13545
00000000 l    df *ABS*	00000000 ble_gattc.c
0000dd20 l     F .text	0000000c ble_gattc_err_dispatch_get
0000dd2c l     F .text	0000000c ble_gattc_resume_dispatch_get
0000dd38 l     F .text	0000000c ble_gattc_tmo_dispatch_get
0000dd44 l     F .text	00000024 ble_gattc_proc_matches_conn_op
0000dd68 l     F .text	0000001e ble_gattc_proc_matches_expired
0000dd86 l     F .text	00000008 ble_gattc_proc_matches_stalled
0000dd8e l     F .text	00000014 ble_gattc_proc_timeout
0000dda4 l     F .text	0000001c ble_gattc_error
0000ddc0 l     F .text	0000002c ble_gattc_mtu_cb
0000ddec l     F .text	0000000e ble_gattc_mtu_tmo
0000ddfa l     F .text	0000000a ble_gattc_mtu_err
0000de04 l     F .text	0000002c ble_gattc_disc_all_svcs_cb
0000de30 l     F .text	0000000e ble_gattc_disc_all_svcs_tmo
0000de3e l     F .text	00000016 ble_gattc_disc_all_svcs_err
0000de54 l     F .text	0000002c ble_gattc_disc_svc_uuid_cb
0000de80 l     F .text	0000000e ble_gattc_disc_svc_uuid_tmo
0000de8e l     F .text	00000014 ble_gattc_disc_svc_uuid_err
0000dea2 l     F .text	0000002c ble_gattc_find_inc_svcs_cb
0000dece l     F .text	0000000e ble_gattc_find_inc_svcs_tmo
0000dedc l     F .text	00000018 ble_gattc_find_inc_svcs_err
0000def4 l     F .text	0000002c ble_gattc_disc_all_chrs_cb
0000df20 l     F .text	0000000e ble_gattc_disc_all_chrs_tmo
0000df2e l     F .text	00000014 ble_gattc_disc_all_chrs_err
0000df42 l     F .text	0000002c ble_gattc_disc_chr_uuid_cb
0000df6e l     F .text	0000000e ble_gattc_disc_chr_uuid_tmo
0000df7c l     F .text	00000014 ble_gattc_disc_chr_uuid_err
0000df90 l     F .text	00000034 ble_gattc_disc_all_dscs_cb
0000dfc4 l     F .text	0000000e ble_gattc_disc_all_dscs_tmo
0000dfd2 l     F .text	00000014 ble_gattc_disc_all_dscs_err
0000dfe6 l     F .text	0000002c ble_gattc_read_cb
0000e012 l     F .text	0000000e ble_gattc_read_tmo
0000e020 l     F .text	0000000a ble_gattc_read_err
0000e02a l     F .text	0000002c ble_gattc_read_uuid_cb
0000e056 l     F .text	0000000e ble_gattc_read_uuid_tmo
0000e064 l     F .text	0000000a ble_gattc_read_uuid_err
0000e06e l     F .text	0000002c ble_gattc_read_long_cb
0000e09a l     F .text	0000000e ble_gattc_read_long_tmo
0000e0a8 l     F .text	0000000a ble_gattc_read_long_err
0000e0b2 l     F .text	00000042 ble_gattc_read_mult_cb
0000e0f4 l     F .text	0000000e ble_gattc_read_mult_tmo
0000e102 l     F .text	0000000a ble_gattc_read_mult_err
0000e10c l     F .text	00000026 ble_gattc_write_long_cb
0000e132 l     F .text	0000000c ble_gattc_write_long_tmo
0000e13e l     F .text	00000030 ble_gattc_write_reliable_cb
0000e16e l     F .text	0000000c ble_gattc_write_reliable_tmo
0000e17c l     F .text	0000002c ble_gattc_proc_set_resume_timer
0000e1a8 l     F .text	00000014 ble_gattc_process_resume_status
0000e1bc l     F .text	00000010 ble_gattc_proc_set_exp_timer
0000e1cc l     F .text	00000024 ble_gattc_ticks_until_resume
0000e1f0 l     F .text	00000078 ble_gattc_extract
0000e268 l     F .text	0000002c ble_gattc_extract_expired
0000e294 l     F .text	00000014 ble_gattc_extract_stalled
0000e2a8 l     F .text	00000020 ble_gattc_extract_by_conn_op
0000e2c8 l     F .text	00000014 ble_gattc_extract_first_by_conn_op
0000e2dc l     F .text	00000020 ble_gattc_proc_insert
0000e2fc l     F .text	00000010 ble_gattc_indicate_tmo
0000e30c l     F .text	00000038 ble_gattc_write_cb
0000e344 l     F .text	0000000c ble_gattc_write_tmo
0000e350 l     F .text	00000008 ble_gattc_write_err
0000e358 l     F .text	00000044 ble_gattc_proc_free
0000e39c l     F .text	0000003e ble_gattc_fail_procs
0000e3da l     F .text	00000020 ble_gattc_write_reliable_err
0000e3fa l     F .text	0000002a ble_gattc_write_long_err
0000e424 l     F .text	00000084 ble_gattc_write_reliable_tx
0000e4a8 l     F .text	00000024 ble_gattc_write_reliable_resume
0000e4cc l     F .text	0000006e ble_gattc_write_long_tx
0000e53a l     F .text	00000024 ble_gattc_write_long_resume
0000e55e l     F .text	0000001a ble_gattc_read_long_tx
0000e578 l     F .text	00000026 ble_gattc_read_long_resume
0000e59e l     F .text	00000012 ble_gattc_disc_all_dscs_tx
0000e5b0 l     F .text	00000026 ble_gattc_disc_all_dscs_resume
0000e5d8 l     F .text	00000028 ble_gattc_disc_chr_uuid_tx
0000e600 l     F .text	00000026 ble_gattc_disc_chr_uuid_resume
0000e628 l     F .text	00000028 ble_gattc_disc_all_chrs_tx
0000e650 l     F .text	00000026 ble_gattc_disc_all_chrs_resume
0000e678 l     F .text	00000030 ble_gattc_find_inc_svcs_tx
0000e6a8 l     F .text	00000026 ble_gattc_find_inc_svcs_resume
0000e6ce l     F .text	0000003a ble_gattc_disc_svc_uuid_tx
0000e708 l     F .text	00000026 ble_gattc_disc_svc_uuid_resume
0000e730 l     F .text	00000028 ble_gattc_disc_all_svcs_tx
0000e758 l     F .text	00000026 ble_gattc_disc_all_svcs_resume
0000e77e l     F .text	00000026 ble_gattc_process_status
0000e7a4 l     F .text	00000040 ble_gattc_resume_procs
0000e7e4 l     F .text	0000001c ble_gattc_proc_alloc
0000e800 l     F .text	00000028 ble_gattc_indicate_err
0000e828 l     F .text	00000024 ble_gattc_indicate_rx_rsp
200070e4 l     O .bss	000000e0 ble_gattc_proc_mem
200071c4 l     O .bss	0000001c ble_gattc_proc_pool
200071e0 l     O .bss	00000008 ble_gattc_procs
200071e8 l     O .bss	00000004 ble_gattc_resume_at
200071ec l     O .bss	00000004 error.13279
00028ccc l     O .text	0000003c ble_gattc_err_dispatch
00028d1c l     O .text	0000003c ble_gattc_resume_dispatch
00028d58 l     O .text	0000003c ble_gattc_tmo_dispatch
00000000 l    df *ABS*	00000000 ble_gatts.c
0000ea54 l     F .text	0000001a ble_gatts_chr_clt_cfg_allowed
0000ea6e l     F .text	00000056 ble_gatts_att_flags_from_chr_flags
0000eac4 l     F .text	00000056 ble_gatts_chr_properties
0000eb1a l     F .text	00000014 ble_gatts_chr_is_sane
0000eb2e l     F .text	0000000c ble_gatts_chr_op
0000eb3c l     F .text	0000002c ble_gatts_find_svc_entry_idx
0000eb68 l     F .text	0000003c ble_gatts_svc_incs_satisfied
0000eba4 l     F .text	0000000c ble_gatts_dsc_op
0000ebb0 l     F .text	00000014 ble_gatts_dsc_is_sane
0000ebc4 l     F .text	00000024 ble_gatts_clt_cfg_find_idx
0000ebe8 l     F .text	00000018 ble_gatts_clt_cfg_find
0000ec00 l     F .text	00000024 ble_gatts_svc_type_to_uuid
0000ec24 l     F .text	0000001a ble_gatts_svc_is_sane
0000ec40 l     F .text	0000000c ble_gatts_clt_cfg_size
0000ec4c l     F .text	00000034 ble_gatts_schedule_update
0000ec80 l     F .text	000000e2 ble_gatts_count_resources
0000ed62 l     F .text	000000dc ble_gatts_clt_cfg_access_locked
0000ee3e l     F .text	00000032 ble_gatts_subscribe_event
0000ef04 l     F .text	00000028 ble_gatts_register_inc
0000f246 l     F .text	0000004c ble_gatts_inc_access
0000ef2c l     F .text	00000024 ble_gatts_register_clt_cfg_dsc
0000ef50 l     F .text	00000058 ble_gatts_register_dsc
0000f364 l     F .text	00000034 ble_gatts_dsc_access
0000efa8 l     F .text	000000fc ble_gatts_register_chr
0000f1f8 l     F .text	0000004e ble_gatts_chr_def_access
0000f330 l     F .text	00000034 ble_gatts_chr_val_access
0000f0a4 l     F .text	000000b8 ble_gatts_register_svc
0000f1d0 l     F .text	00000028 ble_gatts_svc_access
0000f15c l     F .text	00000074 ble_gatts_register_round
0000f292 l     F .text	0000009e ble_gatts_val_access
0000f398 l     F .text	0000002e ble_gatts_mutable
0000f3c8 l     F .text	00000024 ble_gatts_free_mem
0000f3ec l     F .text	0000001c ble_gatts_free_svc_defs
0000f408 l     F .text	0000006c ble_gatts_tx_notifications_one_chr
200071f0 l     O .bss	00000004 ble_gatts_clt_cfg_mem
200071f4 l     O .bss	0000001c ble_gatts_clt_cfg_pool
20007210 l     O .bss	00000004 ble_gatts_clt_cfgs
20007214 l     O .bss	00000004 ble_gatts_num_cfgable_chrs
20007218 l     O .bss	00000004 ble_gatts_num_svc_defs
2000721c l     O .bss	00000002 ble_gatts_num_svc_entries
20007220 l     O .bss	00000004 ble_gatts_svc_defs
20007224 l     O .bss	00000004 ble_gatts_svc_entries
20000168 l     O .data	00000004 __compound_literal.0
2000016c l     O .data	00000004 __compound_literal.1
20000170 l     O .data	00000004 __compound_literal.2
20000174 l     O .data	00000004 __compound_literal.3
20000178 l     O .data	00000004 __compound_literal.4
00000000 l    df *ABS*	00000000 ble_hs.c
0000fa54 l     F .text	0000004a ble_hs_wakeup_tx_conn
0000faa0 l     F .text	00000018 ble_hs_event_rx_hci_ev
0000fab8 l     F .text	0000001c ble_hs_clear_rx_queue
0000fad4 l     F .text	00000030 ble_hs_rx_data
0000fb04 l     F .text	00000008 ble_hs_event_tx_notify
0000fb18 l     F .text	00000014 ble_hs_sched_start_stage2
0000fb2c l     F .text	00000008 ble_hs_event_start_stage1
0000fbb4 l     F .text	00000008 ble_hs_event_rx_data
0000fc0c l     F .text	00000020 ble_hs_timer_reset
0000fc2c l     F .text	00000030 ble_hs_timer_sched
0000fc5c l     F .text	00000044 ble_hs_sync
0000fca0 l     F .text	00000044 ble_hs_reset
0000fce4 l     F .text	00000008 ble_hs_event_reset
0000fcec l     F .text	00000054 ble_hs_timer_exp
0000fe34 l     F .text	0000001e ble_hs_event_start_stage2
2000722c l     O .bss	00000010 ble_hs_ev_reset
2000723c l     O .bss	00000010 ble_hs_ev_start_stage1
2000724c l     O .bss	00000010 ble_hs_ev_start_stage2
2000725c l     O .bss	00000010 ble_hs_ev_tx_notifications
2000726c l     O .bss	00000004 ble_hs_evq
2000728c l     O .bss	000000a0 ble_hs_hci_os_event_buf
20007334 l     O .bss	0000000c ble_hs_mutex
20007340 l     O .bss	00000004 ble_hs_parent_task
20007344 l     O .bss	00000004 ble_hs_reset_reason
20007348 l     O .bss	00000018 ble_hs_rx_q
20007364 l     O .bss	00000020 ble_hs_timer
00000000 l    df *ABS*	00000000 ble_hs_adv.c
00010080 l     F .text	00000068 ble_hs_adv_set_hdr
000100e8 l     F .text	0000004e ble_hs_adv_set_flat_mbuf
00010136 l     F .text	0000005e ble_hs_adv_set_array_uuid16
00010194 l     F .text	00000062 ble_hs_adv_set_array_uuid128
000101f6 l     F .text	0000006a ble_hs_adv_set_array_uuid32
00010260 l     F .text	00000066 ble_hs_adv_set_array16
000102c6 l     F .text	000002d0 adv_set_fields
00000000 l    df *ABS*	00000000 ble_hs_atomic.c
00000000 l    df *ABS*	00000000 ble_hs_conn.c
20007384 l     O .bss	00000064 ble_hs_conn_elem_mem
200073e8 l     O .bss	00000006 ble_hs_conn_null_addr
200073f0 l     O .bss	0000001c ble_hs_conn_pool
2000740c l     O .bss	00000004 ble_hs_conns
00000000 l    df *ABS*	00000000 ble_hs_flow.c
00000000 l    df *ABS*	00000000 ble_hs_hci.c
00010a1c l     F .text	0000004a ble_hs_hci_rx_cmd_complete
00010a66 l     F .text	00000024 ble_hs_hci_rx_cmd_status
00010a8c l     F .text	0000000c ble_hs_hci_max_acl_payload_sz
00010a98 l     F .text	00000014 ble_hs_hci_lock
00010aac l     F .text	00000024 ble_hs_hci_wait_for_ack
00010ad0 l     F .text	0000007c ble_hs_hci_process_ack
00010b4c l     F .text	00000010 ble_hs_hci_unlock
00010b5c l     F .text	00000024 ble_hs_hci_rx_ack
00010b80 l     F .text	00000024 ble_hs_hci_frag_alloc
00010ba4 l     F .text	0000004c ble_hs_hci_acl_hdr_prepend
20007410 l     O .bss	00000004 ble_hs_hci_ack
20007416 l     O .bss	00000002 ble_hs_hci_buf_sz
20007418 l     O .bss	0000011c ble_hs_hci_frag_data
20007534 l     O .bss	0000000c ble_hs_hci_frag_mbuf_pool
20007540 l     O .bss	0000001c ble_hs_hci_frag_mempool
2000755c l     O .bss	0000000c ble_hs_hci_mutex
20007568 l     O .bss	00000008 ble_hs_hci_sem
20007570 l     O .bss	00000004 ble_hs_hci_sup_feat
20007574 l     O .bss	00000001 ble_hs_hci_version
00000000 l    df *ABS*	00000000 ble_hs_hci_cmd.c
00010e14 l     F .text	00000018 ble_hs_hci_cmd_transport
00010e2c l     F .text	0000002a ble_hs_hci_cmd_send
00000000 l    df *ABS*	00000000 ble_hs_hci_evt.c
00010e90 l     F .text	00000024 ble_hs_hci_evt_dispatch_find
00010eb4 l     F .text	00000014 ble_hs_hci_evt_le_dispatch_find
00010ec8 l     F .text	00000026 ble_hs_hci_evt_le_meta
00010eee l     F .text	0000004e ble_hs_hci_evt_le_adv_rpt_first_pass
00010f3c l     F .text	00000004 ble_hs_hci_evt_le_ext_adv_rpt
00010f40 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_estab
00010f44 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_rpt
00010f48 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_lost
00010f4c l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_transfer
00010f50 l     F .text	00000004 ble_hs_hci_evt_le_scan_timeout
00010f54 l     F .text	00000004 ble_hs_hci_evt_le_adv_set_terminated
00010f58 l     F .text	00000004 ble_hs_hci_evt_le_scan_req_rcvd
00010f5c l     F .text	00000014 ble_hs_hci_evt_hw_error
00010f70 l     F .text	00000014 ble_hs_hci_evt_enc_key_refresh
00010f84 l     F .text	00000014 ble_hs_hci_evt_encrypt_change
00010f98 l     F .text	00000032 ble_hs_hci_evt_disconn_complete
00010fca l     F .text	00000062 ble_hs_hci_evt_num_completed_pkts
0001102c l     F .text	00000014 ble_hs_hci_evt_le_phy_update_complete
00011040 l     F .text	0000007e ble_hs_hci_evt_le_dir_adv_rpt
000110be l     F .text	0000007e ble_hs_hci_evt_le_adv_rpt
0001113c l     F .text	00000086 ble_hs_hci_evt_le_enh_conn_complete
000111c2 l     F .text	00000066 ble_hs_hci_evt_le_conn_complete
00011228 l     F .text	00000014 ble_hs_hci_evt_le_conn_parm_req
0001123c l     F .text	00000014 ble_hs_hci_evt_le_lt_key_req
00011250 l     F .text	00000014 ble_hs_hci_evt_le_rd_rem_used_feat_complete
00011264 l     F .text	00000014 ble_hs_hci_evt_le_conn_upd_complete
00028de8 l     O .text	00000030 ble_hs_hci_evt_dispatch
00028e18 l     O .text	00000064 ble_hs_hci_evt_le_dispatch
00000000 l    df *ABS*	00000000 ble_hs_hci_util.c
00000000 l    df *ABS*	00000000 ble_hs_id.c
000114fc l     F .text	00000042 ble_hs_id_addr_type_usable
20007578 l     O .bss	00000006 ble_hs_id_pub
20007580 l     O .bss	00000006 ble_hs_id_rnd
00028e7c l     O .text	00000002 priv_addr_types.12672
00028e80 l     O .text	00000002 pub_addr_types.12671
00000000 l    df *ABS*	00000000 ble_hs_log.c
00000000 l    df *ABS*	00000000 ble_hs_mbuf.c
00011620 l     F .text	0000002a ble_hs_mbuf_gen_pkt
00000000 l    df *ABS*	00000000 ble_hs_misc.c
000116ba l     F .text	00000020 ble_hs_misc_restore_one_irk
00000000 l    df *ABS*	00000000 ble_hs_mqueue.c
00000000 l    df *ABS*	00000000 ble_hs_pvcy.c
000117dc l     F .text	0000002e ble_hs_pvcy_set_addr_timeout
0001180a l     F .text	0000001a ble_hs_pvcy_clear_entries
00011824 l     F .text	0000001e ble_hs_pvcy_set_resolve_enabled
000118e8 l     F .text	0000008c ble_hs_pvcy_add_entry_hci
20007590 l     O .bss	00000010 ble_hs_pvcy_irk
200075a0 l     O .bss	00000001 ble_hs_pvcy_started
00000000 l    df *ABS*	00000000 ble_hs_startup.c
00011a18 l     F .text	0000001a ble_hs_startup_reset_tx
00011a32 l     F .text	00000030 ble_hs_startup_le_read_buf_sz_tx
00011a62 l     F .text	00000030 ble_hs_startup_read_buf_sz_tx
00011a92 l     F .text	0000002a ble_hs_startup_read_local_ver_tx
00011ac0 l     F .text	00000058 ble_hs_startup_set_evmask_tx
00011b18 l     F .text	00000048 ble_hs_startup_le_set_evmask_tx
00011b60 l     F .text	0000005e ble_hs_startup_read_buf_sz
00011bbe l     F .text	00000028 ble_hs_startup_le_read_sup_f_tx
00011be6 l     F .text	00000028 ble_hs_startup_read_bd_addr
00000000 l    df *ABS*	00000000 ble_hs_stop.c
00011c64 l     F .text	00000048 ble_hs_stop_done
00011cac l     F .text	0000000a ble_hs_stop_terminate_timeout_cb
200075a4 l     O .bss	0000000c ble_hs_stop_gap_listener
200075b0 l     O .bss	00000004 ble_hs_stop_listeners
200075b4 l     O .bss	00000020 ble_hs_stop_terminate_tmo
00000000 l    df *ABS*	00000000 ble_l2cap.c
00011cd4 l     F .text	00000012 ble_l2cap_get_mtu
00011ce6 l     F .text	00000020 ble_l2cap_append_rx
00011dd2 l     F .text	0000004c ble_l2cap_rx_payload
200075d4 l     O .bss	00000054 ble_l2cap_chan_mem
00000000 l    df *ABS*	00000000 ble_l2cap_sig.c
00011f50 l     F .text	0000001c ble_l2cap_sig_next_id
00011f6c l     F .text	00000014 ble_l2cap_sig_dispatch_get
00011f80 l     F .text	0000002e ble_l2cap_sig_proc_matches
00011fae l     F .text	00000004 ble_l2cap_sig_rx_noop
00011fb2 l     F .text	0000000e ble_l2cap_sig_update_call_cb
00011fc0 l     F .text	00000024 ble_l2cap_sig_proc_insert
00011fe4 l     F .text	00000060 ble_l2cap_sig_proc_extract
00012044 l     F .text	00000020 ble_l2cap_sig_proc_alloc
00012064 l     F .text	00000014 ble_l2cap_sig_proc_set_timer
00012078 l     F .text	0000005c ble_l2cap_sig_extract_expired
000120d4 l     F .text	00000014 ble_l2cap_sig_proc_free
000120e8 l     F .text	00000018 ble_l2cap_sig_process_status
00012100 l     F .text	00000014 ble_l2cap_sig_rx_reject
00012114 l     F .text	0000004a ble_l2cap_sig_update_rsp_rx
0001215e l     F .text	00000078 ble_l2cap_sig_rx
000121d6 l     F .text	0000009c ble_l2cap_sig_update_req_rx
20007644 l     O .bss	00000001 ble_l2cap_sig_cur_id
20007648 l     O .bss	00000014 ble_l2cap_sig_proc_mem
2000765c l     O .bss	0000001c ble_l2cap_sig_proc_pool
20007678 l     O .bss	00000008 ble_l2cap_sig_procs
00028ea8 l     O .text	0000006c ble_l2cap_sig_dispatch
00000000 l    df *ABS*	00000000 ble_l2cap_sig_cmd.c
00000000 l    df *ABS*	00000000 ble_sm.c
000124b0 l     F .text	00000014 ble_sm_dispatch_get
000124c4 l     F .text	00000028 ble_sm_proc_remove
000124ec l     F .text	0000003a ble_sm_proc_matches
00012528 l     F .text	00000018 ble_sm_insert
00012540 l     F .text	0000000c ble_sm_rx_noop
0001254c l     F .text	00000028 ble_sm_build_authreq
00012574 l     F .text	00000022 ble_sm_key_dist
00012596 l     F .text	00000004 ble_sm_chk_store_overflow_by_type
0001259a l     F .text	0000001e ble_sm_chk_store_overflow
000125b8 l     F .text	00000010 ble_sm_state_after_pair
000125c8 l     F .text	00000024 ble_sm_pair_base_fill
000125ec l     F .text	00000020 ble_sm_pair_req_fill
0001260c l     F .text	00000028 ble_sm_pair_rsp_fill
00012634 l     F .text	00000004 ble_sm_verify_auth_requirements
00012638 l     F .text	0000000a ble_sm_gen_ediv
00012642 l     F .text	0000000c ble_sm_gen_master_id_rand
0001264e l     F .text	0000000c ble_sm_gen_csrk
0001265a l     F .text	00000014 ble_sm_io_action
0001266e l     F .text	000000b2 ble_sm_pair_cfg
00012720 l     F .text	00000026 ble_sm_gen_ltk
00012748 l     F .text	0000003c ble_sm_exec
00012784 l     F .text	00000032 ble_sm_sec_req_exec
000127b6 l     F .text	00000022 ble_sm_pair_fail_tx
000127d8 l     F .text	000000e6 ble_sm_fill_store_value
000128be l     F .text	00000048 ble_sm_update_sec_state
00012906 l     F .text	00000032 ble_sm_key_exch_success
00012938 l     F .text	0000027a ble_sm_key_exch_exec
00012bb2 l     F .text	0000001e ble_sm_key_rxed
00012bd0 l     F .text	00000040 ble_sm_start_encrypt_tx
00012c10 l     F .text	0000000e ble_sm_enc_restore_exec
00012c1e l     F .text	00000044 ble_sm_enc_start_exec
00012c62 l     F .text	0000004a ble_sm_ltk_req_reply_tx
00012cac l     F .text	00000024 ble_sm_ltk_start_exec
00012cd0 l     F .text	00000030 ble_sm_ltk_req_neg_reply_tx
00012d00 l     F .text	0000004e ble_sm_ltk_restore_exec
00012d4e l     F .text	00000012 ble_sm_random_exec
00012d60 l     F .text	00000012 ble_sm_confirm_exec
00012d72 l     F .text	00000014 ble_sm_proc_set_timer
00012d88 l     F .text	00000070 ble_sm_extract_expired
00012df8 l     F .text	000000e6 ble_sm_persist_keys
00012ee0 l     F .text	00000014 ble_sm_proc_free
00012ef4 l     F .text	00000020 ble_sm_proc_alloc
00012f14 l     F .text	00000044 ble_sm_retrieve_ltk
00012f58 l     F .text	0000002a ble_sm_fail_rx
00012f82 l     F .text	00000054 ble_sm_read_bond
00012fd6 l     F .text	0000007c ble_sm_chk_repeat_pairing
00013114 l     F .text	00000080 ble_sm_sign_info_rx
00013194 l     F .text	0000007a ble_sm_id_addr_info_rx
0001320e l     F .text	00000080 ble_sm_id_info_rx
0001328e l     F .text	0000007a ble_sm_master_id_rx
00013308 l     F .text	00000086 ble_sm_enc_info_rx
0001338e l     F .text	0000013a ble_sm_pair_req_rx
0001351c l     F .text	000000ae ble_sm_confirm_rx
000135ca l     F .text	000000c0 ble_sm_pair_rsp_rx
0001376e l     F .text	00000102 ble_sm_enc_event_rx
00013870 l     F .text	0000006c ble_sm_rx
000139fe l     F .text	000000a4 ble_sm_pair_exec
00013ab2 l     F .text	0000006c ble_sm_random_rx
00013c84 l     F .text	000000ec ble_sm_sec_req_rx
20007680 l     O .bss	00000100 ble_sm_proc_mem
20007780 l     O .bss	0000001c ble_sm_proc_pool
2000779c l     O .bss	00000008 ble_sm_procs
00028f2c l     O .text	0000003c ble_sm_dispatch
00028f7c l     O .text	0000002c ble_sm_state_dispatch
00000000 l    df *ABS*	00000000 ble_sm_cmd.c
00000000 l    df *ABS*	00000000 ble_sm_lgcy.c
00013e48 l     F .text	0000003e ble_sm_gen_stk
00028fa8 l     O .text	00000019 ble_sm_lgcy_init_ioa
00028fc4 l     O .text	00000019 ble_sm_lgcy_resp_ioa
00000000 l    df *ABS*	00000000 ble_store.c
000140e4 l     F .text	00000018 ble_store_status
000141a8 l     F .text	00000008 ble_store_persist_sec
00000000 l    df *ABS*	00000000 ble_store_util.c
0001430a l     F .text	0000005c ble_store_util_iter_unique_peer
00000000 l    df *ABS*	00000000 ble_uuid.c
00028fe0 l     O .text	00000010 ble_uuid_base
00000000 l    df *ABS*	00000000 ble_att.c
00014688 l     F .text	00000028 ble_att_rx_dispatch_entry_find
000146b0 l     F .text	00000032 ble_att_rx_handle_unknown_request
000146e2 l     F .text	0000007c ble_att_rx
200077a4 l     O .bss	00000002 ble_att_preferred_mtu_val
00029048 l     O .text	000000d8 ble_att_rx_dispatch
00000000 l    df *ABS*	00000000 ble_att_clt.c
00000000 l    df *ABS*	00000000 ble_att_cmd.c
00000000 l    df *ABS*	00000000 ble_att_svr.c
00014a08 l     F .text	00000010 ble_att_svr_next_id
00014a18 l     F .text	00000026 ble_att_svr_prep_find_prev
00014a3e l     F .text	0000005e ble_att_svr_prep_validate
00014a9c l     F .text	00000020 ble_att_svr_entry_alloc
00014abc l     F .text	0000001a ble_att_svr_get_sec_state
00014ad6 l     F .text	00000116 ble_att_svr_check_perms
00014bec l     F .text	0000005e ble_att_svr_read
00014c4a l     F .text	00000062 ble_att_svr_write
00014cac l     F .text	00000018 ble_att_svr_pullup_req_base
00014cc4 l     F .text	00000068 ble_att_svr_build_mtu_rsp
00014d2c l     F .text	00000024 ble_att_svr_pkt
00014d50 l     F .text	00000032 ble_att_svr_build_write_rsp
00014d82 l     F .text	00000032 ble_att_svr_build_indicate_rsp
00014db4 l     F .text	000000b0 ble_att_svr_fill_info
00014e64 l     F .text	00000060 ble_att_svr_build_find_info_rsp
00014ec4 l     F .text	00000048 ble_att_svr_read_group_type_entry_write
00014f0c l     F .text	00000024 ble_att_svr_is_valid_find_group_type
00014f30 l     F .text	00000054 ble_att_svr_is_valid_group_end
00014f84 l     F .text	00000016 ble_att_svr_is_valid_read_group_type
00014f9a l     F .text	0000005c ble_att_svr_read_flat
00014ff6 l     F .text	0000005c ble_att_svr_fill_type_value_entry
00015054 l     F .text	000000e8 ble_att_svr_fill_type_value
0001513c l     F .text	00000062 ble_att_svr_build_find_type_value_rsp
0001519e l     F .text	0000003a ble_att_svr_service_uuid
000151d8 l     F .text	00000184 ble_att_svr_build_read_group_type_rsp
0001535c l     F .text	0000001c ble_att_svr_prep_free
00015378 l     F .text	0000003c ble_att_svr_prep_alloc
000153b4 l     F .text	0000007c ble_att_svr_insert_prep_entry
00015430 l     F .text	00000048 ble_att_svr_prep_extract
00015478 l     F .text	00000014 ble_att_svr_free_start_mem
00015500 l     F .text	00000034 ble_att_svr_write_handle
00015534 l     F .text	00000064 ble_att_svr_prep_write
000155cc l     F .text	00000136 ble_att_svr_build_read_type_rsp
0001574c l     F .text	000000a6 ble_att_svr_build_read_mult_rsp
00015822 l     F .text	00000098 ble_att_svr_tx_rsp
200077a8 l     O .bss	00000004 ble_att_svr_entry_mem
200077ac l     O .bss	0000001c ble_att_svr_entry_pool
200077c8 l     O .bss	00000008 ble_att_svr_hidden_list
200077d0 l     O .bss	00000002 ble_att_svr_id
200077d4 l     O .bss	00000008 ble_att_svr_list
200077dc l     O .bss	00000300 ble_att_svr_prep_entry_mem
20007adc l     O .bss	0000001c ble_att_svr_prep_entry_pool
00000000 l    df *ABS*	00000000 ble_sm_alg.c
00016044 l     F .text	0000001c ble_sm_alg_xor_128
00016060 l     F .text	00000048 ble_sm_alg_encrypt
00000000 l    df *ABS*	00000000 ble_svc_dis.c
000161e0 l     F .text	00000064 ble_svc_dis_access
200001a4 l     O .data	00000004 __compound_literal.0
200001a8 l     O .data	00000004 __compound_literal.1
200001ac l     O .data	00000004 __compound_literal.2
200001b0 l     O .data	00000048 __compound_literal.3
00029154 l     O .text	00000020 ble_svc_dis_defs
00000000 l    df *ABS*	00000000 ble_svc_gap.c
000162c4 l     F .text	00000016 ble_svc_gap_device_name_write_access
000162da l     F .text	00000016 ble_svc_gap_appearance_write_access
000162f0 l     F .text	00000028 ble_svc_gap_device_name_read_access
00016318 l     F .text	0000002c ble_svc_gap_appearance_read_access
00016344 l     F .text	00000098 ble_svc_gap_access
20007af8 l     O .bss	00000002 ble_svc_gap_appearance
20000214 l     O .data	00000004 __compound_literal.0
20000218 l     O .data	00000004 __compound_literal.1
2000021c l     O .data	00000004 __compound_literal.2
20000220 l     O .data	00000048 __compound_literal.3
20000268 l     O .data	00000020 ble_svc_gap_name
0002918c l     O .text	00000020 ble_svc_gap_defs
00000000 l    df *ABS*	00000000 addr.c
00016480 l     F .text	00000012 ble_hs_util_load_rand_addr
00016492 l     F .text	00000032 ble_hs_util_ensure_rand_addr
00000000 l    df *ABS*	00000000 ble_hci_ram.c
20007afc l     O .bss	00000104 ble_hci_ram_cmd_buf
20007c00 l     O .bss	0000001c ble_hci_ram_cmd_pool
20007c1c l     O .bss	00000090 ble_hci_ram_evt_hi_buf
20007cac l     O .bss	0000001c ble_hci_ram_evt_hi_pool
20007cc8 l     O .bss	00000240 ble_hci_ram_evt_lo_buf
20007f08 l     O .bss	0000001c ble_hci_ram_evt_lo_pool
20007f24 l     O .bss	00000004 ble_hci_ram_rx_acl_hs_arg
20007f28 l     O .bss	00000004 ble_hci_ram_rx_acl_hs_cb
20007f2c l     O .bss	00000004 ble_hci_ram_rx_acl_ll_arg
20007f30 l     O .bss	00000004 ble_hci_ram_rx_acl_ll_cb
20007f34 l     O .bss	00000004 ble_hci_ram_rx_cmd_hs_arg
20007f38 l     O .bss	00000004 ble_hci_ram_rx_cmd_hs_cb
20007f3c l     O .bss	00000004 ble_hci_ram_rx_cmd_ll_arg
20007f40 l     O .bss	00000004 ble_hci_ram_rx_cmd_ll_cb
00000000 l    df *ABS*	00000000 config_store.c
000167cc l     F .text	0000003c conf_dup_check_cb
00016808 l     F .text	0000001c conf_load_cb
20007f48 l     O .bss	00000001 conf_loaded
20007f49 l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 config.c
0001690c l     F .text	0000002a conf_set_cb
00016936 l     F .text	00000020 conf_commit_cb
00016956 l     F .text	00000008 conf_ev_fn_load
20007f54 l     O .bss	0000000c conf_mtx
20000288 l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 flash_map.c
00016cc8 l     F .text	0000003c flash_area_find_idx
00016d04 l     F .text	00000058 flash_map_area_overlaps
00016d5c l     F .text	0000007c flash_map_add_new_dflt_areas
00016dd8 l     F .text	00000078 flash_map_read_mfg
20007f68 l     O .bss	00000078 mfg_areas.9303
00000000 l    df *ABS*	00000000 mfg.c
00016fec l     F .text	00000094 mfg_seek_next_aux
00017080 l     F .text	00000070 mfg_read_mmr
000170f0 l     F .text	00000054 mfg_read_next_mmr
00017144 l     F .text	00000044 mfg_open_flash_area
00017188 l     F .text	00000044 mfg_read_tlv_body
0001725c l     F .text	0000004e mfg_read_mmr_refs
20007fe0 l     O .bss	00000001 mfg_initialized
20007fe4 l     O .bss	00000018 mfg_mmrs
20007ffc l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 bootutil_misc.c
000173b2 l     F .text	0000000c boot_flag_decode
000173c0 l     F .text	00000018 boot_magic_decode
000173d8 l     F .text	0000006a boot_write_trailer
00017442 l     F .text	00000016 boot_write_trailer_flag
00029260 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 split.c
20008004 l     O .bss	00000001 split_app_active
20008005 l     O .bss	00000001 split_mode_cur
20000298 l     O .data	00000024 split_scfg
00029274 l     O .text	00000020 __compound_literal.0
00000000 l    df *ABS*	00000000 img_mgmt.c
000177fc l     F .text	0000003e img_mgmt_find_tlvs
0001783c l     F .text	00000040 img_mgmt_erase
0001787c l     F .text	0000004c img_mgmt_upload_good_rsp
000179e0 l     F .text	00000036 img_mgmt_upload_log
00017a90 l     F .text	0000020c img_mgmt_upload
2000803c l     O .bss	00000004 img_mgmt_upload_arg
20008040 l     O .bss	00000004 img_mgmt_upload_cb
200002bc l     O .data	0000000c img_mgmt_group
000292a4 l     O .text	00000030 img_mgmt_handlers
00000000 l    df *ABS*	00000000 img_mgmt_state.c
00000000 l    df *ABS*	00000000 img_mgmt_util.c
00000000 l    df *ABS*	00000000 mynewt_img_mgmt.c
0001808e l     F .text	00000040 img_mgmt_vercmp
000180ce l     F .text	00000046 img_mgmt_find_best_area_id
00000000 l    df *ABS*	00000000 mynewt_img_mgmt_log.c
000184b0 l     F .text	00000004 img_mgmt_log_gen
00000000 l    df *ABS*	00000000 os_mgmt.c
00018504 l     F .text	0000000a os_mgmt_reset
00018510 l     F .text	00000144 os_mgmt_taskstat_encode_one
00018654 l     F .text	0000006c os_mgmt_taskstat_read
000186c0 l     F .text	00000074 os_mgmt_echo
200002c8 l     O .data	0000000c os_mgmt_group
0002937c l     O .text	00000030 os_mgmt_group_handlers
00000000 l    df *ABS*	00000000 mynewt_os_mgmt.c
0001874c l     F .text	0000001c mynewt_os_mgmt_task_at
00018768 l     F .text	00000014 mynewt_os_mgmt_stack_usage
0001877c l     F .text	0000000a mynewt_os_mgmt_reset_tmo
20008044 l     O .bss	00000020 mynewt_os_mgmt_reset_callout
00000000 l    df *ABS*	00000000 aes_encrypt.c
00029434 l     O .text	00000100 sbox
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 base64.c
00019000 l     F .text	00000020 pos
00019020 l     F .text	00000048 token_decode
00029534 l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 cborencoder.c
0001922e l     F .text	00000096 create_container
000192c4 l     F .text	00000076 encode_string
00000000 l    df *ABS*	00000000 cborparser.c
00019516 l     F .text	00000024 is_fixed_type
0001953a l     F .text	00000004 iterate_noop
0001953e l     F .text	00000144 preparse_value
00019682 l     F .text	0000004c preparse_next_value
000196ce l     F .text	000000aa extract_length
00019778 l     F .text	00000178 iterate_string_chunks
000198f0 l     F .text	000000f0 advance_internal
00019c68 l     F .text	00000084 advance_recursive
00000000 l    df *ABS*	00000000 hal_bsp.c
00029578 l     O .text	00000008 flash_devs
00000000 l    df *ABS*	00000000 spiflash.c
00019d4c l     F .text	00000016 hal_spiflash_sector_info
00019d62 l     F .text	0000002e spiflash_release_power_down_generic
00019d90 l     F .text	00000030 spiflash_delay_us
00019e94 l     F .text	00000070 spiflash_wait_ready_till
00019f1a l     F .text	00000080 hal_spiflash_read
00019fd0 l     F .text	000000e0 hal_spiflash_write
0001a0b0 l     F .text	0000009c spiflash_execute_erase
0001a14c l     F .text	0000002c spiflash_erase_cmd
0001a186 l     F .text	00000008 hal_spiflash_erase_sector
0001a258 l     F .text	00000008 hal_spiflash_erase
0001a2e4 l     F .text	0000003e hal_spiflash_init
000295b0 l     O .text	0000001c spiflash_flash_funcs
20000320 l     O .data	00000010 supported_chips
00029580 l     O .text	00000030 spiflash_characteristics
00000000 l    df *ABS*	00000000 hal_flash.c
0001a322 l     F .text	0000001e hal_flash_check_addr
20008064 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_flash.c
0001a5ec l     F .text	00000028 nrf52k_flash_wait_ready
0001a614 l     F .text	00000054 nrf52k_flash_erase_sector
0001a668 l     F .text	00000004 nrf52k_flash_init
0001a66c l     F .text	00000028 nrf52k_flash_sector_info
0001a694 l     F .text	000000d0 nrf52k_flash_write
0001a764 l     F .text	0000000e nrf52k_flash_read
000295e4 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001a7cc l     F .text	000000f4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_spi.c
0001aa18 l     F .text	0000006e nrf52_irqm_handler
0001aaa0 l     F .text	00000014 hal_spi_stop_transfer
0001aab4 l     F .text	0000004c hal_spi_config_slave
0001ab00 l     F .text	000000b8 hal_spi_init_master
0001abb8 l     F .text	000000e0 hal_spi_config_master
00029600 l     O .text	00000010 nrf52_hal_spis
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001af0c l     F .text	00000040 nrf52_periph_create_timers
0001af4c l     F .text	00000028 nrf52_periph_create_i2c
0001af74 l     F .text	00000028 nrf52_periph_create_spi
00029610 l     O .text	0000000c hal_i2c1_cfg
0002961c l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 hal_i2c.c
0001afac l     F .text	0000007a hal_i2c_delay_us
0001b028 l     F .text	00000024 hal_i2c_resolve
0001b04c l     F .text	00000012 read_gpio_inbuffer
0001b05e l     F .text	000000a2 hal_i2c_clear_bus
00029620 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_timer.c
0001b1a0 l     F .text	0000000a nrf_read_timer_cntr
0001b1ac l     F .text	000000f4 nrf_timer_set_ocmp
0001b2a0 l     F .text	0000000a nrf_timer_disable_ocmp
0001b2aa l     F .text	00000010 nrf_rtc_disable_ocmp
0001b2bc l     F .text	00000054 hal_timer_read_bsptimer
0001b310 l     F .text	00000070 hal_timer_chk_queue
0001b380 l     F .text	00000040 hal_rtc_timer_irq_handler
00029628 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001b700 l     F .text	00000028 sensor_mgr_remove
0001b728 l     F .text	00000060 sensor_mgr_insert
0001b788 l     F .text	0000000a sensor_type_traits_empty
0001b794 l     F .text	0000000c sensor_mgr_evq_set
0001b7ce l     F .text	0000005c sensor_read_data_func
0001b82c l     F .text	00000048 sensor_base_ts_update_event
0001b874 l     F .text	00000050 sensor_up_timestamp
0001b8fc l     F .text	000000a8 sensor_mgr_init
0001bb70 l     F .text	0000007c sensor_mgr_wakeup_event
0001b9ce l     F .text	00000032 sensor_update_nextrun
0001ba00 l     F .text	0000001e sensor_calc_nextrun_delta
0001ba20 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001baf8 l     F .text	0000004a sensor_mgr_poll_bytype
0001bb42 l     F .text	0000002e sensor_poll_per_type_trait
20008104 l     O .bss	00000078 sensor_notify_evt_area
2000817c l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 endian.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_cputime_pwr2.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 malloc.c
0001bedc l     F .text	00000004 malloc_lock_nop
0001bee0 l     F .text	00000002 malloc_unlock_nop
0001bee2 l     F .text	00000048 __malloc_from_block
0001bf2c l     F .text	00000068 __free_block
20000334 l     O .data	00000018 __malloc_head
2000034c l     O .data	00000004 malloc_lock
20000350 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoll.c
00000000 l    df *ABS*	00000000 strtoull.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 lvgl.c
00000000 l    df *ABS*	00000000 popcountsi2.c
00000000 l    df *ABS*	00000000 sensor_coap.c
200081b8 l     O .bss	00000008 oc_sem
200081c0 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
200081c4 l     O .bss	0000000c hw_id
200081d0 l     O .bss	00000004 hw_id_len
200081d8 l     O .bss	00000008 sensor_node_address
200081e0 l     O .bss	00000037 sensor_node_names_buf
20000354 l     O .data	00000014 sensor_node_names
00029664 l     O .text	0000000c COLLECTOR_NODE_HW_ID
00029670 l     O .text	0000003c SENSOR_NODE_HW_IDS
00029708 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001c4fc l     F .text	00000060 config_device
20008218 l     O .bss	00000014 adc_1_itf_temp_stub
20008230 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001c5c8 l     F .text	00000004 temp_stub_close
0001c5cc l     F .text	0000001c temp_stub_sensor_get_config
0001c5e8 l     F .text	00000036 temp_stub_open
0001c6dc l     F .text	00000084 temp_stub_sensor_read
0002974c l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 smp.c
0001c790 l     F .text	0000000c smp_free_buf
0001c79c l     F .text	00000010 smp_init_writer
0001c7ac l     F .text	00000012 smp_init_reader
0001c7be l     F .text	0000002c smp_write_at
0001c7ea l     F .text	00000010 smp_reset_buf
0001c7fa l     F .text	00000008 smp_trim_front
0001c802 l     F .text	00000030 smp_alloc_rsp
0001c832 l     F .text	00000024 smp_rsp_frag_alloc
0001c89c l     F .text	0000004c smp_process_packet
0001c8e8 l     F .text	0000000a smp_event_data_in
00000000 l    df *ABS*	00000000 smp_ble.c
0001c980 l     F .text	00000028 smp_ble_out
0001c9a8 l     F .text	00000040 smp_ble_event_data_in
0001c9e8 l     F .text	00000094 gatt_svr_chr_access_smp
20000368 l     O .data	00000030 __compound_literal.0
000297a8 l     O .text	00000011 gatt_svr_chr_smp
000297bc l     O .text	00000011 gatt_svr_svc_smp
000297d0 l     O .text	00000020 gatt_svr_svcs
00000000 l    df *ABS*	00000000 oc_buffer.c
0001cb14 l     F .text	00000030 oc_buffer_tx
0001cb44 l     F .text	0000002c oc_buffer_rx
20008344 l     O .bss	00000018 oc_inq
2000835c l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
20008374 l     O .bss	000000d8 oc_client_cb_area
2000844c l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
20008468 l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 tcp4_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000848c l     O .bss	0000001c oc_rep_objects
200084a8 l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 ble_ll.c
0001cca4 l     F .text	00000020 ble_ll_flush_pkt_queue
0001cd14 l     F .text	0000001c ble_ll_hw_err_timer_cb
0001cd30 l     F .text	0000000a ble_ll_event_comp_pkts
0001cd3a l     F .text	00000008 ble_ll_event_dbuf_overflow
0001cd44 l     F .text	0000006c ble_ll_tx_pkt_in
0001cdb0 l     F .text	00000008 ble_ll_event_tx_pkt
0001cdb8 l     F .text	00000084 ble_ll_rx_pkt_in
0001ce3c l     F .text	00000008 ble_ll_event_rx_pkt
0001ce44 l     F .text	00000020 ble_ll_seed_prng
20008580 l     O .bss	00000180 g_ble_ll_stack
00029810 l     O .text	00000008 g_ble_ll_pdu_header_tx_time
00000000 l    df *ABS*	00000000 ble_ll_adv.c
0001d4e4 l     F .text	0000001a ble_ll_adv_first_chan
0001d4fe l     F .text	0000001a ble_ll_adv_final_chan
0001d518 l     F .text	00000016 ble_ll_adv_flags_set
0001d52e l     F .text	00000018 ble_ll_adv_flags_clear
0001d546 l     F .text	0000007c ble_ll_adv_rpa_update
0001d5c2 l     F .text	00000016 ble_ll_adv_active_chanset_clear
0001d5d8 l     F .text	00000030 ble_ll_adv_tx_done
0001d608 l     F .text	0000004c ble_ll_adv_sm_find_configured
0001d654 l     F .text	00000034 ble_ll_adv_active_chanset_set_pri
0001d688 l     F .text	0000002c ble_ll_adv_scheduled
0001d6b4 l     F .text	00000054 ble_ll_adv_set_sched
0001d820 l     F .text	000000d4 ble_ll_adv_tx_start_cb
0001d708 l     F .text	00000118 ble_ll_adv_sm_start
0001d8f4 l     F .text	000000aa ble_ll_adv_legacy_pdu_make
0001d99e l     F .text	0000005a ble_ll_adv_scan_rsp_legacy_pdu_make
0001d9f8 l     F .text	00000024 ble_ll_adv_drop_event
0001da1c l     F .text	00000052 ble_ll_adv_update_adv_scan_rsp_data
0001da70 l     F .text	00000070 ble_ll_adv_sm_stop
0001dae0 l     F .text	0000002e ble_ll_adv_set_enable
0001db0e l     F .text	00000068 ble_ll_adv_update_data_mbuf
0001db76 l     F .text	000000b0 ble_ll_adv_set_scan_rsp_data
0001dc26 l     F .text	000000ca ble_ll_adv_set_adv_data
0001dcf0 l     F .text	0000004c ble_ll_adv_already_connected
0001dd3c l     F .text	00000148 ble_ll_adv_rx_req
0001de84 l     F .text	000000fc ble_ll_adv_conn_req_rxd
0001df80 l     F .text	00000026 ble_ll_adv_sm_stop_timeout
0001dfa8 l     F .text	00000064 ble_ll_adv_reschedule_event
0001e00c l     F .text	00000034 ble_ll_adv_sm_init
0001e178 l     F .text	0000000a ble_ll_adv_event_done
0001e064 l     F .text	00000104 ble_ll_adv_done
0001e168 l     F .text	00000010 ble_ll_adv_make_done
00000000 l    df *ABS*	00000000 ble_ll_conn.c
0001e544 l     F .text	0000001a ble_ll_conn_is_empty_pdu
0001e55e l     F .text	0000004c ble_ll_conn_calc_dci_csa1
0001e5ac l     F .text	00000018 ble_ll_conn_halt
0001e5c4 l     F .text	00000014 ble_ll_conn_current_sm_over
0001e5d8 l     F .text	00000010 ble_ll_conn_rxend_unencrypt
0001e5e8 l     F .text	00000010 ble_ll_conn_txend_encrypt
0001e5f8 l     F .text	00000008 ble_ll_conn_wait_txend
0001e600 l     F .text	0000000a ble_ll_conn_connect_ind_txend_to_init
0001e60a l     F .text	0000000a ble_ll_conn_connect_ind_txend_to_standby
0001e614 l     F .text	00000028 ble_ll_init_get_conn_comp_ev
0001e63c l     F .text	00000032 ble_ll_conn_start_rx_encrypt
0001e66e l     F .text	00000010 ble_ll_conn_start_rx_unencrypt
0001e67e l     F .text	00000018 ble_ll_conn_continue_rx_encrypt
0001e696 l     F .text	00000020 ble_ll_conn_adjust_pyld_len
0001e6b6 l     F .text	00000030 ble_ll_update_max_tx_octets_phy_mode
0001e6e8 l     F .text	00000040 ble_ll_conn_get_next_sched_time
0001e728 l     F .text	00000414 ble_ll_conn_tx_pdu
0001eb3c l     F .text	00000128 ble_ll_conn_event_start_cb
0001ec64 l     F .text	00000070 ble_ll_conn_master_common_init
0001ecd4 l     F .text	00000036 ble_ll_conn_calc_itvl_ticks
0001ed0a l     F .text	0000006e ble_ll_conn_can_send_next_pdu
0001ed78 l     F .text	0000006c ble_ll_conn_chk_csm_flags
0001ede4 l     F .text	000000a0 ble_ll_conn_connect_ind_tx_pducb
0001ee84 l     F .text	00000108 ble_ll_conn_is_peer_adv
0001ef8c l     F .text	000000c0 ble_ll_conn_connect_ind_prepare
0001f0d4 l     F .text	00000268 ble_ll_conn_next_event
0001f33c l     F .text	00000110 ble_ll_conn_created
0001f44c l     F .text	00000016 ble_ll_conn_set_csa
0001f7a0 l     F .text	0000012c ble_ll_conn_event_end
00000000 l    df *ABS*	00000000 ble_ll_conn_hci.c
00020578 l     F .text	0000002e ble_ll_conn_hci_chk_scan_params
000205a8 l     F .text	00000028 ble_ll_init_alloc_conn_comp_ev
00020626 l     F .text	00000066 ble_ll_conn_process_conn_params
000207ec l     F .text	00000034 ble_ll_conn_hci_cancel_conn_complete_event
200089b8 l     O .bss	00000004 g_ble_ll_last_num_comp_pkt_evt
00000000 l    df *ABS*	00000000 ble_ll_ctrl.c
000210ec l     F .text	00000038 ble_ll_ctrl_enc_allowed_pdu
00021124 l     F .text	00000020 ble_ll_ctrl_rx_start_enc_req
00021144 l     F .text	0000001a ble_ll_ctrl_rx_pause_enc_req
0002115e l     F .text	00000020 ble_ll_ctrl_rx_pause_enc_rsp
0002117e l     F .text	0000000c ble_ll_ctrl_proc_rsp_timer_cb
0002118c l     F .text	00000028 ble_ll_ctrl_start_rsp_timer
000211b4 l     F .text	00000114 ble_ll_ctrl_conn_upd_make
000212c8 l     F .text	00000026 ble_ll_ctrl_version_ind_make
000212ee l     F .text	00000028 ble_ll_ctrl_datalen_upd_make
00021316 l     F .text	000000cc ble_ll_ctrl_conn_param_pdu_make
000213e4 l     F .text	00000044 ble_ll_ctrl_chanmap_req_make
00021428 l     F .text	0000002e ble_ll_ctrl_update_features
00021456 l     F .text	00000052 ble_ll_ctrl_rx_feature_req
000214a8 l     F .text	0000004c ble_ll_ctrl_enc_req_make
000214f4 l     F .text	000000e0 ble_ll_ctrl_proc_init
000215d4 l     F .text	00000088 ble_ll_ctrl_rx_conn_update
0002165c l     F .text	0000004c ble_ll_ctrl_rx_chanmap_req
000216a8 l     F .text	00000066 ble_ll_ctrl_len_proc
0002170e l     F .text	0000007e ble_ll_ctrl_rx_enc_req
0002179e l     F .text	0000003c ble_ll_ctrl_rx_enc_rsp
00021892 l     F .text	00000164 ble_ll_ctrl_conn_param_pdu_proc
000219f6 l     F .text	00000034 ble_ll_ctrl_rx_conn_param_rsp
00021bb2 l     F .text	000000cc ble_ll_ctrl_proc_unk_rsp
00021c7e l     F .text	00000038 ble_ll_ctrl_rx_feature_rsp
00021cb6 l     F .text	00000060 ble_ll_ctrl_rx_version_ind
00021d16 l     F .text	0000004c ble_ll_ctrl_rx_start_enc_rsp
00021d62 l     F .text	0000000a ble_ll_ctrl_rx_ping_rsp
00021d6c l     F .text	00000068 ble_ll_ctrl_rx_conn_param_req
00021dd4 l     F .text	0000007c ble_ll_ctrl_rx_reject_ind
00000000 l    df *ABS*	00000000 ble_ll_hci.c
000222e6 l     F .text	00000004 ble_ll_hci_get_num_cmd_pkts
000222ea l     F .text	00000020 ble_ll_hci_rd_local_version
0002230a l     F .text	0000001c ble_ll_hci_rd_local_supp_feat
00022328 l     F .text	00000018 ble_ll_hci_rd_bd_addr
00022340 l     F .text	0000001c ble_ll_hci_set_le_event_mask
0002235c l     F .text	00000018 ble_ll_hci_le_read_bufsize
00022374 l     F .text	00000018 ble_ll_hci_le_rd_sugg_data_len
0002238c l     F .text	00000020 ble_ll_hci_le_rd_max_data_len
000223ac l     F .text	0000004a ble_ll_hci_le_cmd_send_cmd_status
000223f8 l     F .text	0000001c ble_ll_read_rf_path_compensation
00022414 l     F .text	0000001c ble_ll_hci_cb_set_event_mask
00022430 l     F .text	0000001c ble_ll_hci_cb_set_event_mask2
0002244c l     F .text	00000010 ble_ll_hci_disconnect
0002245c l     F .text	00000022 ble_ll_hci_link_ctrl_cmd_proc
0002247e l     F .text	0000004a ble_ll_hci_ctlr_bb_cmd_proc
000224c8 l     F .text	0000004c ble_ll_hci_rd_local_supp_cmd
00022514 l     F .text	0000005a ble_ll_hci_info_params_cmd_proc
0002256e l     F .text	00000014 ble_ll_hci_status_params_cmd_proc
00022582 l     F .text	00000016 ble_ll_hci_le_read_local_features
00022598 l     F .text	00000042 ble_ll_hci_le_encrypt
000225da l     F .text	00000012 ble_ll_hci_le_rand
000225ec l     F .text	00000016 ble_ll_hci_le_read_supp_states
00022604 l     F .text	00000058 ble_ll_hci_le_wr_sugg_data_len
0002265c l     F .text	00000020 ble_ll_read_tx_power
0002267c l     F .text	00000064 ble_ll_write_rf_path_compensation
000226e0 l     F .text	000002b6 ble_ll_hci_le_cmd_proc
000229be l     F .text	000000f8 ble_ll_hci_cmd_proc
200089bc l     O .bss	00000010 g_ble_ll_hci_cmd_ev
200089d0 l     O .bss	00000008 g_ble_ll_hci_event_mask
200089d8 l     O .bss	00000008 g_ble_ll_hci_event_mask2
200089e0 l     O .bss	00000008 g_ble_ll_hci_le_event_mask
200089e8 l     O .bss	00000002 rx_path_pwr_compensation
200089ea l     O .bss	00000002 tx_path_pwr_compensation
00000000 l    df *ABS*	00000000 ble_ll_hci_ev.c
00000000 l    df *ABS*	00000000 ble_ll_rand.c
00000000 l    df *ABS*	00000000 ble_ll_resolv.c
0002300c l     F .text	00000018 ble_ll_resolv_irk_nonzero
00023024 l     F .text	0000002c ble_ll_is_controller_busy
00023050 l     F .text	00000020 ble_ll_resolv_list_chg_allowed
00023070 l     F .text	00000040 ble_ll_is_on_resolv_list
000230b0 l     F .text	00000078 ble_ll_resolv_gen_priv_addr
00023128 l     F .text	00000064 ble_ll_resolv_rpa_timer_cb
00000000 l    df *ABS*	00000000 ble_ll_rfmgmt.c
000236d0 l     F .text	00000034 ble_ll_rfmgmt_disable
00023704 l     F .text	0000004c ble_ll_rfmgmt_release_ev
00023750 l     F .text	0000003c ble_ll_rfmgmt_enable
0002378c l     F .text	00000014 ble_ll_rfmgmt_timer_exp
000237a0 l     F .text	00000084 ble_ll_rfmgmt_timer_reschedule
20008b18 l     O .bss	00000044 g_ble_ll_rfmgmt_data
00000000 l    df *ABS*	00000000 ble_ll_scan.c
00023958 l     F .text	0000000c ble_ll_get_chan_to_scan
00023964 l     F .text	0000000e ble_ll_scan_get_next_adv_prim_chan
00023972 l     F .text	0000002a ble_ll_scan_move_window_to
0002399c l     F .text	00000030 ble_ll_scan_is_inside_window
000239cc l     F .text	00000056 ble_ll_scan_get_addr_data_from_legacy
00023a22 l     F .text	000000a6 ble_ll_scan_req_backoff
00023ac8 l     F .text	00000074 ble_ll_scan_have_rxd_scan_rsp
00023b3c l     F .text	00000060 ble_ll_scan_dup_update_legacy
00023b9c l     F .text	0000012c ble_ll_scan_rx_filter
00023cc8 l     F .text	000000b0 ble_ll_scan_rx_isr_on_legacy
00023d78 l     F .text	00000028 ble_ll_scan_req_tx_pdu_cb
00023da0 l     F .text	0000002e ble_ll_scan_refresh_nrpa
00023dd0 l     F .text	00000070 ble_ll_scan_req_pdu_prepare
00023e40 l     F .text	0000007c ble_ll_scan_send_scan_req
00023ec8 l     F .text	00000118 ble_ll_scan_start
00023fe0 l     F .text	00000058 ble_ll_scan_rx_pkt_in_restore_addr_data
00024038 l     F .text	000000f8 ble_ll_scan_dup_check_legacy
00024130 l     F .text	0000005e ble_ll_hci_send_dir_adv_report
0002418e l     F .text	00000084 ble_ll_hci_send_adv_report
00024212 l     F .text	000000c4 ble_ll_scan_send_adv_report
000242d8 l     F .text	0000008c ble_ll_scan_rx_pkt_in_on_legacy
00024364 l     F .text	00000098 ble_ll_scan_sm_start
000243fc l     F .text	00000084 ble_ll_scan_common_init
00024480 l     F .text	000000d0 ble_ll_scan_event_proc
00024824 l     F .text	00000024 ble_ll_scan_interrupted_event_cb
000245ec l     F .text	00000128 ble_ll_scan_set_enable
20008b5c l     O .bss	00000001 g_ble_ll_scan_num_rsp_advs
20008b60 l     O .bss	00000014 g_ble_ll_scan_params
20008bc4 l     O .bss	00000088 g_ble_ll_scan_sm
20008c4c l     O .bss	00000008 g_scan_dup_list
20008c54 l     O .bss	00000080 g_scan_dup_mem
20008cd4 l     O .bss	0000001c g_scan_dup_pool
00000000 l    df *ABS*	00000000 ble_ll_sched.c
00024b80 l     F .text	00000030 ble_ll_sched_is_overlap
00024bb0 l     F .text	00000024 ble_ll_sched_insert_if_empty
00024bd4 l     F .text	0000003c ble_ll_sched_conn_overlap
00024c10 l     F .text	00000024 ble_ll_sched_overlaps_current
00024c34 l     F .text	00000072 ble_ll_sched_execute_item
00024ca8 l     F .text	00000048 ble_ll_sched_run
00000000 l    df *ABS*	00000000 ble_ll_utils.c
00029884 l     O .text	00000010 g_ble_sca_ppm_tbl
00000000 l    df *ABS*	00000000 ble_ll_whitelist.c
00025608 l     F .text	0000001c ble_ll_whitelist_chg_allowed
00025624 l     F .text	0000003c ble_ll_whitelist_search
00000000 l    df *ABS*	00000000 ble_hw.c
00025754 l     F .text	00000040 ble_rng_isr
20008d54 l     O .bss	00000001 g_ble_hw_whitelist_mask
00000000 l    df *ABS*	00000000 ble_phy.c
00025abc l     F .text	00000018 ble_phy_apply_errata_102_106_107
00025ad4 l     F .text	00000020 nrf_wait_disabled
00025af4 l     F .text	000000ac ble_phy_set_start_time
00025ba0 l     F .text	00000004 ble_phy_get_ccm_datarate
00025ba4 l     F .text	00000100 ble_phy_rx_xcvr_setup
00025ca4 l     F .text	00000030 ble_phy_set_access_addr
00025cd4 l     F .text	0000001c ble_phy_stop_usec_timer
00025cf0 l     F .text	0000003c ble_phy_disable_irq_and_ppi
00025d2c l     F .text	00000058 ble_phy_set_start_now
00025e98 l     F .text	000000d8 ble_phy_tx_end_isr
00026460 l     F .text	0000008c ble_phy_isr
00026210 l     F .text	0000012c ble_phy_rx_start_isr
0002633c l     F .text	00000124 ble_phy_rx_end_isr
20008dd4 l     O .bss	00000104 g_ble_phy_enc_buf
20008ed8 l     O .bss	00000104 g_ble_phy_rx_buf
20008fdc l     O .bss	00000104 g_ble_phy_tx_buf
00029894 l     O .text	00000028 g_ble_phy_chan_freq
000298bc l     O .text	00000004 g_ble_phy_t_rxaddrdelay
000298c0 l     O .text	00000004 g_ble_phy_t_rxenddelay
000298c4 l     O .text	00000004 g_ble_phy_t_txdelay
000298c8 l     O .text	00000004 g_ble_phy_t_txenddelay
00000000 l    df *ABS*	00000000 ble_svc_ans.c
00026750 l     F .text	0000007c ble_svc_ans_new_alert_notify
000267cc l     F .text	0000002c ble_svc_ans_unr_alert_notify
000267f8 l     F .text	00000026 ble_svc_ans_chr_write
00026820 l     F .text	00000208 ble_svc_ans_access
20009210 l     O .bss	00000002 ble_svc_ans_alert_not_ctrl_pt
20009212 l     O .bss	00000002 ble_svc_ans_conn_handle
20009214 l     O .bss	00000001 ble_svc_ans_new_alert_cat
20009218 l     O .bss	00000008 ble_svc_ans_new_alert_cnt
20009220 l     O .bss	00000014 ble_svc_ans_new_alert_val
20009234 l     O .bss	00000002 ble_svc_ans_new_alert_val_handle
20009236 l     O .bss	00000002 ble_svc_ans_new_alert_val_len
20009238 l     O .bss	00000001 ble_svc_ans_unr_alert_cat
2000923c l     O .bss	00000008 ble_svc_ans_unr_alert_cnt
20009244 l     O .bss	00000002 ble_svc_ans_unr_alert_stat
20009246 l     O .bss	00000002 ble_svc_ans_unr_alert_val_handle
20000398 l     O .data	00000004 __compound_literal.0
2000039c l     O .data	00000004 __compound_literal.1
200003a0 l     O .data	00000004 __compound_literal.2
200003a4 l     O .data	00000004 __compound_literal.3
200003a8 l     O .data	00000004 __compound_literal.4
200003ac l     O .data	00000004 __compound_literal.5
200003b0 l     O .data	00000090 __compound_literal.6
000298cc l     O .text	00000020 ble_svc_ans_defs
00000000 l    df *ABS*	00000000 ble_svc_gatt.c
00026aac l     F .text	00000068 ble_svc_gatt_access
20009248 l     O .bss	00000002 ble_svc_gatt_changed_val_handle
2000924a l     O .bss	00000002 ble_svc_gatt_end_handle
2000924c l     O .bss	00000002 ble_svc_gatt_start_handle
20000440 l     O .data	00000004 __compound_literal.0
20000444 l     O .data	00000004 __compound_literal.1
20000448 l     O .data	00000030 __compound_literal.2
000298ec l     O .text	00000020 ble_svc_gatt_defs
00000000 l    df *ABS*	00000000 ble_store_config.c
00026b88 l     F .text	00000094 ble_store_config_find_sec
00026c1c l     F .text	00000038 ble_store_config_read_peer_sec
00026c54 l     F .text	00000038 ble_store_config_read_our_sec
00026c8c l     F .text	00000084 ble_store_config_find_cccd
00026d10 l     F .text	00000028 ble_store_config_read_cccd
00026d38 l     F .text	0000002e ble_store_config_print_key_sec
00026da6 l     F .text	00000046 ble_store_config_print_value_sec
00026dec l     F .text	00000058 ble_store_config_write_peer_sec
00026e44 l     F .text	00000058 ble_store_config_write_our_sec
00026e9c l     F .text	0000004c ble_store_config_write_cccd
00026f12 l     F .text	00000022 ble_store_config_delete_obj
00026f34 l     F .text	00000024 ble_store_config_delete_sec
00026f58 l     F .text	00000024 ble_store_config_delete_peer_sec
00026f7c l     F .text	00000024 ble_store_config_delete_our_sec
00026fa0 l     F .text	00000034 ble_store_config_delete_cccd
00000000 l    df *ABS*	00000000 ble_store_config_conf.c
00027060 l     F .text	0000002c ble_store_config_serialize_arr
0002708c l     F .text	0000002c ble_store_config_persist_sec_set
000270b8 l     F .text	00000078 ble_store_config_conf_export
00027130 l     F .text	0000001c ble_store_config_deserialize_arr
0002714c l     F .text	00000080 ble_store_config_conf_set
20000478 l     O .data	00000020 ble_store_config_conf_handler
00000000 l    df *ABS*	00000000 smp.c
00027274 l     F .text	00000016 smp_align4
0002728a l     F .text	0000000a smp_rsp_op
00027294 l     F .text	0000002a smp_init_rsp_hdr
000272be l     F .text	0000001a smp_read_hdr
000272d8 l     F .text	00000074 smp_handle_single_payload
0002734c l     F .text	00000012 smp_write_hdr
0002735e l     F .text	0000005e smp_handle_single_req
000273bc l     F .text	0000007c smp_build_err_rsp
00027438 l     F .text	0000004c smp_on_err
00000000 l    df *ABS*	00000000 config_init.c
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 log_reboot.c
000275bc l     F .text	00000004 log_reboot_init_console
000275c0 l     F .text	00000048 reboot_conf_export
00027608 l     F .text	00000054 reboot_conf_get
0002765c l     F .text	00000054 reboot_conf_set
0002773c l     F .text	00000264 log_reboot_write
200094c0 l     O .bss	00000001 log_reboot_written
200094c4 l     O .bss	00000020 str_reason.9974
00000000 l    df *ABS*	00000000 scfg.c
00027a54 l     F .text	00000014 scfg_find_setting_by_val
00027a68 l     F .text	00000054 scfg_setting_id
00027abc l     F .text	00000040 scfg_handler_export
00027afc l     F .text	0000001c scfg_find_setting_by_name
00027b18 l     F .text	0000002a scfg_handler_get
00027b42 l     F .text	0000003e scfg_handler_set
00000000 l    df *ABS*	00000000 mcumgr_util.c
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 cborattr.c
00027d06 l     F .text	00000084 valid_attr_type
00027d8a l     F .text	0000005e cbor_target_address
0002801c l     F .text	000003be cbor_internal_read_object
00000000 l    df *ABS*	00000000 cbor_buf_writer.c
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
0002842e l     F .text	0000001e cbor_mbuf_reader_cpy
0002844c l     F .text	0000001c cbor_mbuf_reader_get8
00028468 l     F .text	00000018 cbor_mbuf_reader_cmp
00028480 l     F .text	0000001e cbor_mbuf_reader_get64
0002849e l     F .text	0000001a cbor_mbuf_reader_get32
000284b8 l     F .text	00000020 cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 nrf52_clock.c
200094e4 l     O .bss	00000001 nrf52_clock_hfxo_refcnt
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 os_error.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 ble_ll_supp_cmd.c
00000000 l    df *ABS*	00000000 ble_hs_cfg.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000199e0 g     F .text	00000090 _cbor_value_decode_int64_internal
0000a958 g     F .text	00000058 os_mbuf_trim_front
200093d0 g     O .bss	000000f0 ble_store_config_peer_secs
00020e52 g     F .text	00000054 ble_ll_conn_hci_rd_chan_map
000148d0 g     F .text	00000004 ble_att_clt_tx_read_group_type
00027be0 g     F .text	000000a0 scfg_register
00018488 g     F .text	00000028 img_mgmt_module_init
000107d4 g     F .text	0000001c ble_hs_conn_find_by_idx
0000920c g     F .text	00000002 console_buffer
00028564 g     F .text	00000044 nrf52_clock_hfxo_request
000112a0 g     F .text	000000a0 ble_hs_hci_evt_acl_process
0001e184 g     F .text	0000002c ble_ll_adv_rpa_timeout
00028554 g     F .text	00000010 cbor_mbuf_writer_init
00018114 g     F .text	000001a4 img_mgmt_impl_upload_inspect
00011590 g     F .text	00000048 ble_hs_id_infer_auto
20008cf0 g     O .bss	00000001 g_ble_ll_sched_offset_ticks
000148d4 g     F .text	00000004 ble_att_clt_rx_read_group_type
0000b6c4 g     F .text	00000030 os_arch_start
00016f3e g     F .text	00000024 flash_area_id_from_image_slot
200094e8 g       .bss	00000000 __HeapBase
2000703c g     O .bss	00000008 g_os_task_list
00009aac g     F .text	00000084 os_idle_task
000148c4 g     F .text	00000004 ble_att_clt_tx_read_blob
0001c110 g     F .text	00000010 strcpy
00020258 g     F .text	00000044 ble_ll_conn_set_global_chanmap
20007080 g     O .bss	00000006 __rand48_seed
00000000 g       .svc_table	00000000 SVC_Count
00008164  w    F .text	00000002 TIMER2_IRQHandler
0000c05c g     F .text	00000018 fmemopen_w
00017f98 g     F .text	0000009c img_mgmt_state_write
000172da g     F .text	00000048 mem_split_frag
000134e8 g     F .text	00000034 ble_sm_proc_can_advance
0000976c g     F .text	00000002 print_addr
0000a4c8 g     F .text	0000005a os_mbuf_copydata
200026f4 g     O .bss	00000008 g_os_mempool_list
00009d20 g     F .text	0000001a os_callout_init
00009d3c g     F .text	0000003c os_callout_stop
0000da4a g     F .text	0000004a ble_gap_notify_rx_event
00008164  w    F .text	00000002 RTC0_IRQHandler
00025344 g     F .text	00000078 ble_ll_sched_adv_resched_pdu
0001e3fc g     F .text	00000040 ble_ll_adv_rx_isr_start
000265e8 g     F .text	00000100 ble_phy_tx
0001747e g     F .text	000000c0 boot_read_swap_state
00026b14 g     F .text	00000074 ble_svc_gatt_init
00021a8e g     F .text	0000004e ble_ll_ctrl_proc_start
0001bf94 g     F .text	00000050 add_malloc_block
20008d14 g     O .bss	00000040 g_ble_ll_whitelist
0002495c g     F .text	00000014 ble_ll_scan_rx_pkt_in
0000e9aa g     F .text	0000002c ble_gattc_rx_err
00010a14 g     F .text	00000002 ble_hs_flow_connection_broken
0000c708 g     F .text	00000028 mgmt_write_rsp_status
00020ed4 g     F .text	00000072 ble_ll_conn_hci_set_data_len
000235ac g     F .text	0000002c ble_ll_resolv_set_local_rpa
0001d2b4 g     F .text	00000068 ble_ll_reset
0000a06a g     F .text	00000070 os_eventq_put
00011418 g     F .text	0000001c ble_hs_id_set_pub
00023208 g     F .text	0000012c ble_ll_resolv_list_add
200000d8 g       .data	00000000 __data_start__
0001424e g     F .text	0000001e ble_store_key_from_value_cccd
0000a7d4 g     F .text	00000062 os_mbuf_extend
0001c164 g     F .text	00000020 strtok_r
000295cc g     O .text	00000018 nrf52k_flash_dev
00012368 g     F .text	0000003c ble_l2cap_sig_timer
20007270 g     O .bss	0000001c ble_hs_hci_ev_pool
00028414 g     F .text	00000014 cbor_buf_writer_init
0000bf44 g     F .text	00000024 printf
0001ba90 g     F .text	00000068 sensor_read
00028c54 g     O .text	00000004 stdout
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
0001a7aa g     F .text	00000022 hal_gpio_write
00014296 g     F .text	00000074 ble_store_iterate
20007628 g     O .bss	0000001c ble_l2cap_chan_pool
00021002 g     F .text	0000004c ble_ll_conn_hci_le_ltk_neg_reply
0000b634 g     F .text	0000008c os_arch_os_init
000279a0 g     F .text	00000044 log_reboot
00008156  w    F .text	00000002 HardFault_Handler
00015a30 g     F .text	000000a8 ble_att_svr_rx_read_type
0001b3d0 g     F .text	00000068 hal_timer_init
000171de g     F .text	0000001a mfg_seek_next_with_type
0000f840 g     F .text	00000080 ble_gatts_bonding_established
00015c10 g     F .text	000000c2 ble_att_svr_rx_read_group_type
0000ea20 g     F .text	00000034 ble_gattc_init
0001bd52 g     F .text	00000008 os_cputime_timer_stop
000193ae g     F .text	00000094 cbor_encode_int
00026554 g     F .text	00000040 ble_phy_rx_set_start_time
0001758e g     F .text	00000054 boot_write_swap_info
0000b6f4 g     F .text	0000005c os_arch_os_start
20000330 g     O .data	00000004 hal_twi_i2c1
0000d030 g     F .text	00000010 ble_gap_master_in_progress
00016544 g     F .text	0000002c ble_hci_trans_hs_cmd_tx
000105a6 g     F .text	0000002a ble_hs_atomic_conn_delete
00009850 g     F .text	0000004e gatt_svr_register_cb
00015ffc g     F .text	00000048 ble_att_svr_init
0001a368 g     F .text	00000010 hal_flash_align
00027cf0 g     F .text	00000014 __wrap_coap_receive
0000fa40 g     F .text	00000014 ble_gatts_init
0001d280 g     F .text	0000000c ble_ll_state_get
000134c8 g     F .text	00000020 ble_sm_ioact_state
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00017458 g     F .text	00000020 boot_magic_compatible_check
00017cb0 g     F .text	00000018 img_mgmt_my_version
00024854 g     F .text	00000088 ble_ll_scan_rx_isr_end
0001b100 g     F .text	000000a0 hal_i2c_init
00014228 g     F .text	0000000e ble_store_read_cccd
0000e9d6 g     F .text	00000024 ble_gattc_rx_mtu
0000b7fa g     F .text	0000000c SysTick_Handler
000123d8 g     F .text	00000034 ble_l2cap_sig_tx
00022ce6 g     F .text	00000044 ble_ll_hci_ev_conn_update
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00022f24 g     F .text	0000007c ble_ll_rand_data_get
0001594e g     F .text	0000006a ble_att_svr_rx_find_info
00014168 g     F .text	00000040 ble_store_write
0001cc40 g     F .text	00000030 oc_init
00015bd4 g     F .text	0000003c ble_att_svr_rx_read_mult
00012310 g     F .text	00000020 ble_l2cap_sig_create_chan
00025974 g     F .text	00000048 ble_hw_rng_init
0001d0b4 g     F .text	00000028 ble_ll_rx_pdu_in
000283dc g     F .text	0000000c cbor_read_object
00028530 g     F .text	00000022 cbor_mbuf_writer
0000abb2 g     F .text	00000026 os_memblock_put
00008164  w    F .text	00000002 PWM1_IRQHandler
0000acf6 g     F .text	00000028 os_msys_get_pkthdr
20007f60 g     O .bss	00000004 flash_map
0000b8aa g     F .text	00000038 memmove
00023464 g     F .text	00000054 ble_ll_resolv_set_rpa_tmo
000148c0 g     F .text	00000004 ble_att_clt_rx_read
0001a528 g     F .text	00000030 hal_flash_is_erased
0000fb88 g     F .text	00000008 ble_hs_lock
00023430 g     F .text	00000034 ble_ll_resolv_local_addr_rd
00014150 g     F .text	00000018 ble_store_overflow_event
0000b7b4 g     F .text	00000046 PendSV_Handler
0000bfa2 g     F .text	0000001c snprintf
0000aaec g     F .text	00000036 os_mempool_clear
00011dbe g     F .text	00000014 ble_l2cap_remove_rx
00008154  w    F .text	00000002 NMI_Handler
0000f4e8 g     F .text	0000005c ble_gatts_connection_broken
0001c2ec g     F .text	00000014 pinetime_lvgl_mynewt_init
00029a7c g       .ARM.exidx	00000000 __exidx_end
00025a14 g     F .text	0000000c ble_hw_resolv_list_clear
000098a0 g     F .text	00000020 gatt_svr_init
00008020 g       .text	00000000 __isr_vector_start
00024848 g     F .text	0000000a ble_ll_scan_interrupted
000271e8 g     F .text	0000001c ble_store_config_persist_peer_secs
00020d48 g     F .text	00000098 ble_ll_conn_hci_disconnect_cmd
0000c02c g     F .text	0000002e memfile_write
0000b5a0 g     F .text	00000014 os_arch_ctx_sw
00024ad4 g     F .text	00000008 ble_ll_scan_get_pdu_data
00019442 g     F .text	0000005e cbor_encode_simple_value
000081d0 g     F .text	0000002c hal_system_reset
00028624 g     F .text	00000042 os_error_to_sys
00023680 g     F .text	00000034 ble_ll_resolv_init
00009b5c g     F .text	00000088 os_init_idle_task
00013b1e g     F .text	0000003a ble_sm_timer
20000150 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000b09c g     F .text	0000000c os_sched_set_current_task
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001f624 g     F .text	00000074 ble_ll_conn_update_eff_data_len
00011d54 g     F .text	0000002c ble_l2cap_parse_hdr
00029a7c g       .ARM.exidx	00000000 __etext
0000d068 g     F .text	0000002a ble_gap_rx_l2cap_update_req
00029818 g     O .text	00000023 g_ble_ll_ctrl_pkt_lengths
0001cfe8 g     F .text	00000054 ble_ll_set_random_addr
000118a8 g     F .text	0000003e ble_hs_pvcy_set_mode
0000e9a0 g     F .text	0000000a ble_gattc_indicate
0001f476 g     F .text	00000002 ble_ll_conn_init_wfr_timer_exp
0000fe5c g     F .text	00000224 ble_hs_init
00025a90 g     F .text	00000004 ble_hw_resolv_list_size
0000d7c0 g     F .text	000000e0 ble_gap_update_params
0002090c g     F .text	0000002a ble_ll_auth_pyld_tmo_event_send
0000acd8 g     F .text	0000001e os_msys_get
00008164  w    F .text	00000002 RADIO_IRQHandler
00016eaa g     F .text	00000026 flash_area_write
000106c0 g     F .text	00000048 ble_hs_conn_free
0001e200 g     F .text	00000104 ble_ll_adv_set_adv_params
0000a836 g     F .text	0000010a os_mbuf_pullup
0000e84c g     F .text	00000056 ble_gattc_timer
0002096c g     F .text	00000150 ble_ll_conn_create
0000ad68 g     F .text	000000c0 os_mutex_release
0000c6b6 g     F .text	0000000e mgmt_streamer_init_writer
00011696 g     F .text	00000024 ble_hs_mbuf_pullup_base
0000e9fa g     F .text	0000001a ble_gattc_rx_indicate_rsp
0000af54 g     F .text	00000024 os_sanity_check_register
20008cfc g     O .bss	00000018 g_ble_ll_sched_timer
200004b8 g       .bssnz	00000000 __bssnz_start__
0001a1ca g     F .text	0000008e spiflash_erase
20007f44 g     O .bss	00000004 conf_load_srcs
0001e4d8 g     F .text	00000030 ble_ll_adv_reset
0000b50c g     F .text	00000026 os_time_delay
0000da94 g     F .text	00000044 ble_gap_notify_tx_event
0001767c g     F .text	0000000a boot_swap_type
20008da0 g     O .bss	00000034 g_ble_phy_data
000166f4 g     F .text	00000004 ble_hci_trans_reset
0000a706 g     F .text	00000088 os_mbuf_copyinto
000107f0 g     F .text	0000000e ble_hs_conn_exists
00021a42 g     F .text	0000004c ble_ll_ctrl_terminate_start
00008164  w    F .text	00000002 PDM_IRQHandler
0000d206 g     F .text	0000002a ble_gap_adv_set_fields
000171f8 g     F .text	0000000a mfg_read_tlv_flash_area
00009350 g     F .text	0000000c console_get_ticks
000139ee g     F .text	00000010 ble_sm_our_pair_rand
00026140 g     F .text	0000004e ble_phy_txpower_round
20008310 g     O .bss	00000034 g_smp_ble_transport
0001e508 g     F .text	00000020 ble_ll_adv_enabled
00019a70 g     F .text	00000020 cbor_parser_init
00010db4 g     F .text	0000000c ble_hs_hci_set_hci_version
0000a640 g     F .text	000000c6 os_mbuf_prepend
0001d0dc g     F .text	00000034 ble_ll_acl_data_in
2000017c g     O .data	00000028 ble_hs_cfg
00015d7e g     F .text	00000016 ble_att_svr_prep_clear
0001441e g     F .text	00000034 ble_store_util_status_rr
0001b6fc g     F .text	00000002 sensor_dev_create
0002593c g     F .text	00000038 ble_hw_encrypt_block
20008a40 g     O .bss	000000d8 g_ble_ll_resolv_list
00013900 g     F .text	000000ee ble_sm_ltk_req_rx
0000abd8 g     F .text	00000010 os_mempool_module_init
0001c8f4 g     F .text	0000000c mgmt_evq_set
0001cf10 g     F .text	0000001c ble_ll_addr_subtype
00008164  w    F .text	00000002 TEMP_IRQHandler
0000b5c6 g     F .text	0000000a os_arch_in_critical
0001458c g     F .text	0000000e ble_uuid_u16
00008164  w    F .text	00000002 QDEC_IRQHandler
0001f478 g     F .text	00000028 ble_ll_conn_auth_pyld_timer_start
0001c37c g     F .text	00000080 get_hardware_id
0001c62c g     F .text	0000007c temp_stub_init
00008164  w    F .text	00000002 TIMER3_IRQHandler
000108e0 g     F .text	00000084 ble_hs_conn_find_by_addr
0000c79c g     F .text	00000010 mgmt_evt
000259f0 g     F .text	00000024 ble_hw_rng_stop
0001cf44 g     F .text	0000007c ble_ll_is_valid_random_addr
0001fdec g     F .text	00000146 ble_ll_conn_rx_data_pdu
0001f4ba g     F .text	00000064 ble_ll_conn_master_init
0000b594 g     F .text	0000000a timer_handler
00009fa4 g     F .text	00000020 os_dev_lookup
0000b0a8 g     F .text	00000090 os_sched_sleep
00010a16 g     F .text	00000002 ble_hs_flow_track_data_mbuf
0000927c g     F .text	00000004 semihosting_console_init
0001fa2c g     F .text	00000028 ble_ll_init_rx_isr_start
0000c682 g     F .text	00000010 mgmt_streamer_reset_buf
0000b890 g     F .text	0000001a memcpy
000257c4 g     F .text	0000003c ble_hw_get_static_addr
0000fb0c g     F .text	0000000c ble_hs_evq_get
00024b34 g     F .text	0000004c ble_ll_scan_init
0000c730 g     F .text	00000010 mgmt_err_from_cbor
000107cc g     F .text	00000008 ble_hs_conn_find_assert
0001e490 g     F .text	0000002e ble_ll_adv_get_local_rpa
000169ec g     F .text	00000034 conf_parse_name
000234b8 g     F .text	00000038 ble_ll_resolve_set_priv_mode
0000992c g     F .text	00000080 hal_watchdog_init
000231b4 g     F .text	00000014 ble_ll_resolv_list_read_size
00017d92 g     F .text	0000004a img_mgmt_state_set_pending
000233cc g     F .text	00000030 ble_ll_resolv_enable_cmd
0001882c g     F .text	000000bc tc_aes128_set_encrypt_key
00016824 g     F .text	00000054 conf_load
00025e10 g     F .text	00000088 ble_phy_wfr_enable
00018422 g     F .text	0000002e img_mgmt_impl_erase_image_data
0000f474 g     F .text	00000074 ble_gatts_register_svcs
00020c98 g     F .text	00000066 ble_ll_conn_hci_param_nrr
00024ab8 g     F .text	00000008 ble_ll_scan_get_local_rpa
0001bd02 g     F .text	0000000c os_cputime_init
20007f50 g     O .bss	00000004 conf_handlers
0001b5e0 g     F .text	0000002c hal_timer_set_cb
00015e46 g     F .text	000000b4 ble_att_svr_rx_exec_write
0000d460 g     F .text	00000046 ble_gap_terminate_with_conn
00011434 g     F .text	00000078 ble_hs_id_set_rnd
00021adc g     F .text	00000030 ble_ll_ctrl_initiate_dle
0000c098 g     F .text	00000016 .hidden __aeabi_uldivmod
0001776c g     F .text	00000048 split_app_init
0001a558 g     F .text	00000062 hal_flash_isempty
0001492c g     F .text	00000040 ble_att_clt_tx_indicate
00000020 g       *ABS*	00000000 _imghdr_size
0000b060 g     F .text	00000030 os_sched_ctx_sw_hook
200004f4 g     O .bss	00000004 console_is_midline
0000a2b0 g     F .text	00000014 os_mbuf_free
0000db46 g     F .text	00000038 ble_gap_mtu_event
00014976 g     F .text	00000026 ble_att_cmd_prepare
200000e4 g     O .data	00000004 SystemCoreClock
00026594 g     F .text	00000024 ble_phy_restart_rx
200080d0 g     O .bss	00000034 sensor_mgr
000081b4 g     F .text	0000000c hal_system_init
00013e20 g     F .text	00000028 ble_sm_tx
00011d30 g     F .text	0000001c ble_l2cap_chan_free
000194a0 g     F .text	00000010 cbor_encode_byte_string
0001cc74 g     F .text	00000002 oc_register_ip6
20008b74 g     O .bss	00000050 g_ble_ll_scan_rsp_advs
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0000d9f8 g     F .text	00000026 ble_gap_identity_event
0000b5d0 g     F .text	0000004c os_arch_task_stack_init
00020936 g     F .text	00000034 ble_ll_disconn_comp_event_send
0001459a g     F .text	0000003e ble_uuid_init_from_att_buf
0001bfe4 g     F .text	0000006c malloc
00015718 g     F .text	00000034 ble_att_svr_read_handle
00016e84 g     F .text	00000026 flash_area_read
000184b4 g     F .text	00000014 img_mgmt_impl_log_upload_start
000099d0 g     F .text	00000044 __assert_func
000231c8 g     F .text	00000040 ble_ll_resolv_list_find
0000f754 g     F .text	000000c4 ble_gatts_rx_indicate_ack
0001aa88 g     F .text	00000018 nrf52_spi0_irq_handler
0000c4e8 g     F .text	00000018 imgr_my_version
0001476c g     F .text	00000002 ble_att_inc_tx_stat
000183ba g     F .text	00000036 img_mgmt_impl_read
0000b1fc g     F .text	00000048 os_sched_wakeup_ticks
000092a8 g     F .text	00000060 console_pkg_init
0000c5a4 g     F .text	0000002c imgmgr_module_init
0001f928 g     F .text	00000104 ble_ll_init_rx_pkt_in
0000815c  w    F .text	00000002 UsageFault_Handler
0001f09c g     F .text	0000001c ble_ll_conn_sm_get
0001c184 g     F .text	0000000c strtoll
0000bf68 g     F .text	0000003a vsnprintf
0001c418 g     F .text	0000001a is_standalone_node
200026d4 g     O .bss	00000008 g_callout_list
00011974 g     F .text	00000020 ble_hs_pvcy_add_entry
000145d8 g     F .text	0000002c ble_uuid_init_from_att_mbuf
00024a2c g     F .text	00000020 ble_ll_scan_can_chg_whitelist
000259bc g     F .text	00000034 ble_hw_rng_start
00010da8 g     F .text	0000000c ble_hs_hci_set_le_supported_feat
0000f818 g     F .text	00000028 ble_gatts_tx_notifications
00024714 g     F .text	00000058 ble_ll_scan_rx_isr_start
0001ceca g     F .text	00000016 ble_ll_chk_txrx_time
0001a1ae g     F .text	0000001c spiflash_chip_erase
200087fc g     O .bss	00000016 g_ble_ll_conn_params
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
00018744 g     F .text	00000008 os_mgmt_module_init
00017e00 g     F .text	00000198 img_mgmt_state_read
0000bca4 g     F .text	00000298 tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
200004e0 g       .bss	00000000 __bss_start__
0000fb90 g     F .text	00000008 ble_hs_unlock
000081c0 g     F .text	00000010 hal_debugger_connected
0001465c g     F .text	00000006 ble_uuid_length
000148e4 g     F .text	00000004 ble_att_clt_tx_exec_write
0001a3dc g     F .text	00000074 hal_flash_write
000148a8 g     F .text	00000004 ble_att_clt_rx_find_info
00008164  w    F .text	00000002 TIMER4_IRQHandler
0000e90e g     F .text	00000092 ble_gattc_indicate_custom
00025794 g     F .text	00000030 ble_hw_get_public_addr
0002476c g     F .text	00000058 ble_ll_scan_adv_decode_addr
0000dad8 g     F .text	0000006e ble_gap_subscribe_event
0000c0ae g     F .text	00000004 .hidden __udivmoddi4
00013e88 g     F .text	000000a4 ble_sm_lgcy_io_action
00022b38 g     F .text	0000007c ble_ll_hci_is_event_enabled
0001c434 g     F .text	000000c8 sensor_network_init
000260a4 g     F .text	00000054 ble_phy_encrypt_enable
00019c2c g     F .text	0000003c _cbor_value_copy_string
00027204 g     F .text	0000003c ble_store_config_persist_cccds
00026134 g     F .text	0000000c ble_phy_set_txend_cb
00025a20 g     F .text	00000038 ble_hw_resolv_list_add
00022fa0 g     F .text	0000002c ble_ll_rand_prand_get
00011340 g     F .text	0000000e ble_hs_hci_util_handle_pb_bc_join
00026700 g     F .text	00000010 ble_phy_xcvr_state_get
0001080c g     F .text	000000d4 ble_hs_conn_addrs
20007034 g     O .bss	00000004 g_current_task
0000af78 g     F .text	00000084 os_sanity_run
000261ac g     F .text	0000000c ble_phy_set_rx_pwr_compensation
0001fd4c g     F .text	0000003c ble_ll_conn_timeout
200087e0 g     O .bss	00000004 g_ble_ll_cur_adv_sm
000194ec g     F .text	0000002a cbor_encoder_close_container
0000b5b4 g     F .text	0000000c os_arch_save_sr
00011740 g     F .text	00000010 ble_hs_misc_peer_addr_type_to_id
0000f8c0 g     F .text	000000e6 ble_gatts_bonding_restored
0002318c g     F .text	00000028 ble_ll_resolv_list_clr
00017560 g     F .text	00000020 boot_write_magic
0000aad8 g     F .text	00000014 os_mempool_init
00027590 g     F .text	00000028 config_pkg_init
00017d4e g     F .text	00000026 img_mgmt_state_any_pending
0001a260 g     F .text	00000084 spiflash_identify
0000b534 g     F .text	00000038 os_gettimeofday
20007044 g     O .bss	00000001 g_task_id
00016a20 g     F .text	00000016 conf_parse_and_lookup
00020ea6 g     F .text	0000002e ble_ll_conn_hci_set_chan_class
0001bd64 g     F .text	00000016 os_cputime_delay_ticks
20007360 g     O .bss	00000001 ble_hs_sync_state
000178c8 g     F .text	00000118 img_mgmt_read_info
0000d0f8 g     F .text	000000d0 ble_gap_adv_start
000148ec g     F .text	00000040 ble_att_clt_tx_notify
000169cc g     F .text	00000020 conf_handler_lookup
0001d324 g     F .text	00000070 ble_ll_pdu_max_tx_octets_get
0000c692 g     F .text	00000016 mgmt_streamer_write_at
00010d98 g     F .text	00000010 ble_hs_hci_acl_tx
20008a0c g     O .bss	0000000c g_ble_ll_rnum_data
00018734 g     F .text	00000010 os_mgmt_register_group
00015ad8 g     F .text	0000007c ble_att_svr_rx_read
0001bc38 g     F .text	00000016 get_le32
0001fa54 g     F .text	000002f6 ble_ll_init_rx_isr_end
00021816 g     F .text	0000001e ble_ll_ctrl_is_start_enc_rsp
00029a64 g       .text	00000000 __exidx_start
0001c19c g     F .text	0000011a strntoumax
0000d410 g     F .text	00000014 ble_gap_disc_active
0000affc g     F .text	00000010 os_sanity_init
200087f0 g     O .bss	00000004 g_ble_ll_conn_cur_sm
0002978c g     O .text	0000001c g_smp_cbor_cfg
0000a2e8 g     F .text	000000a8 os_mbuf_append
00017202 g     F .text	0000000a mfg_read_tlv_mmr_ref
000148bc g     F .text	00000004 ble_att_clt_tx_read
0000b754 g     F .text	00000014 os_set_env
000148e0 g     F .text	00000004 ble_att_clt_rx_prep_write
00019d2c g     F .text	00000014 hal_bsp_flash_dev
0001af9c g     F .text	00000010 nrf52_periph_create
0001189c g     F .text	0000000c ble_hs_pvcy_our_irk
00028c4c g     O .text	00000008 MemFile_methods
20007028 g     O .bss	0000000c g_os_sanity_check_mu
0000fb98 g     F .text	0000001c ble_hs_process_rx_data_queue
000160a8 g     F .text	00000050 ble_sm_alg_s1
20007588 g     O .bss	00000006 ble_hs_misc_null_addr
00016ef6 g     F .text	0000000a flash_area_align
20008cf4 g     O .bss	00000008 g_ble_ll_sched_q
0000b3a8 g     F .text	00000060 os_task_info_get
00008178 g     F .text	0000003c _sbrk
000260f8 g     F .text	00000010 ble_phy_encrypt_set_pkt_cntr
00019d18 g     F .text	00000014 cbor_value_calculate_string_length
00014242 g     F .text	0000000c ble_store_delete_cccd
00009204 g     F .text	00000008 disable_buffer
0001a8c0 g     F .text	000000b0 os_tick_idle
0001f698 g     F .text	00000108 ble_ll_conn_end
00009308 g     F .text	00000048 console_printf
00011842 g     F .text	00000032 ble_hs_pvcy_remove_entry
00009234 g     F .text	0000001e console_dump
000255d0 g     F .text	00000038 ble_ll_utils_calc_window_widening
0001c3fc g     F .text	0000001c is_collector_node
0000929e g     F .text	00000008 console_blocking_mode
00016878 g     F .text	00000018 conf_ensure_loaded
00019a90 g     F .text	0000014a cbor_value_enter_container
00008164  w    F .text	00000002 I2S_IRQHandler
0000d230 g     F .text	0000000a ble_gap_adv_active
00008650 g     F .text	00000002 _init
0001e34a g     F .text	00000020 ble_ll_hci_set_adv_data
000149bc g     F .text	0000004a ble_att_tx
0000f9f0 g     F .text	00000050 ble_gatts_count_cfg
0001a450 g     F .text	000000d8 hal_flash_erase
00025800 g     F .text	00000018 ble_hw_whitelist_clear
00017478 g     F .text	00000006 boot_swap_info_off
0001e310 g     F .text	0000001a ble_ll_hci_adv_set_enable
0001153e g     F .text	00000032 ble_hs_id_copy_addr
0001e3b8 g     F .text	00000044 ble_ll_adv_rx_pkt_in
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
0000e8f8 g     F .text	0000000a ble_gattc_notify
00027bc4 g     F .text	0000001a scfg_save_val
0000dc80 g     F .text	00000038 ble_gap_event_listener_unregister
00011e1e g     F .text	000000b8 ble_l2cap_rx
0001c900 g     F .text	00000026 smp_rx_req
0001a970 g     F .text	000000a8 os_tick_init
00025d88 g     F .text	00000088 ble_phy_rxpdu_copy
00025004 g     F .text	00000100 ble_ll_sched_slave_new
0000da1e g     F .text	0000002c ble_gap_repeat_pairing_event
0001b8c4 g     F .text	0000001c sensor_mgr_lock
00026d66 g     F .text	00000040 ble_store_config_read
0001164a g     F .text	0000000a ble_hs_mbuf_acl_pkt
000148e8 g     F .text	00000004 ble_att_clt_rx_exec_write
00017a7c g     F .text	00000014 img_mgmt_dfu_pending
000165f4 g     F .text	0000005c ble_hci_trans_buf_alloc
00013052 g     F .text	0000000a ble_sm_gen_pair_rand
00008164  w    F .text	00000002 TIMER0_IRQHandler
00009be4 g     F .text	000000d0 os_init
000175e4 g     F .text	00000098 boot_swap_type_multi
0000f544 g     F .text	00000148 ble_gatts_start
000080f8 g     F .text	0000005c Reset_Handler
00024ab0 g     F .text	00000008 ble_ll_scan_get_peer_rpa
00010bf0 g     F .text	00000020 ble_hs_hci_set_buf_sz
0001bd98 g     F .text	00000016 os_cputime_ticks_to_usecs
0001cbc8 g     F .text	0000000c oc_evq_set
0001cac8 g     F .text	0000004c smp_ble_pkg_init
20007414 g     O .bss	00000002 ble_hs_hci_avail_pkts
0001ff34 g     F .text	00000248 ble_ll_conn_rx_isr_end
00018fcc g     F .text	00000018 _copy
00013bde g     F .text	000000a6 ble_sm_enc_initiate
20000506 g     O .bss	00000001 sysinit_active
0002591c g     F .text	00000014 ble_hw_whitelist_disable
00025104 g     F .text	000000cc ble_ll_sched_adv_new
00025930 g     F .text	0000000c ble_hw_whitelist_match
00020de0 g     F .text	00000042 ble_ll_conn_hci_rd_rem_ver_cmd
0000f6fc g     F .text	00000056 ble_gatts_send_next_indicate
000177b4 g     F .text	0000000c split_app_active_get
0001bbec g     F .text	00000008 put_le16
0000d8ec g     F .text	0000002a ble_gap_unpair_oldest_peer
20007330 g     O .bss	00000002 ble_hs_max_services
000217f6 g     F .text	00000020 ble_ll_ctrl_enc_allowed_pdu_tx
0000a23e g     F .text	0000000a os_mbuf_pool_init
00015598 g     F .text	00000034 ble_att_svr_find_by_uuid
000194c0 g     F .text	0000000a cbor_encoder_create_array
0000b806 g     F .text	0000001e os_default_irq_asm
0000b244 g     F .text	0000000c os_sched_next_task
0000d50a g     F .text	00000086 ble_gap_conn_broken
0000b00c g     F .text	00000054 os_sched_insert
00009d78 g     F .text	00000080 os_callout_reset
0001720c g     F .text	00000040 mfg_init
000147b2 g     F .text	0000002c ble_att_mtu
000285a8 g     F .text	00000044 nrf52_clock_hfxo_release
0000a040 g     F .text	00000010 os_dev_reset
00014818 g     F .text	00000028 ble_att_clt_rx_error
00024550 g     F .text	0000001c ble_ll_scan_halt
00012330 g     F .text	00000038 ble_l2cap_sig_conn_broken
00024e94 g     F .text	00000170 ble_ll_sched_master_new
000285ec g     F .text	00000004 hal_bsp_hw_id_len
00010964 g     F .text	0000007c ble_hs_conn_timer
00011730 g     F .text	00000010 ble_hs_misc_own_addr_type_to_id
0000fda8 g     F .text	0000000c ble_hs_hw_error
00011278 g     F .text	00000028 ble_hs_hci_evt_process
0000ad54 g     F .text	00000014 os_mutex_init
000182b8 g     F .text	00000046 img_mgmt_impl_erase_slot
00008168 g     F .text	00000010 _sbrkInit
00023924 g     F .text	00000034 ble_ll_rfmgmt_enable_now
0000f6ac g     F .text	00000050 ble_gatts_conn_init
0000c660 g     F .text	00000010 mgmt_streamer_alloc_rsp
0001499c g     F .text	00000020 ble_att_cmd_get
200004dc g       .bssnz	00000000 __bssnz_end__
0001d03c g     F .text	00000028 ble_ll_is_our_devaddr
00016f64 g     F .text	00000088 flash_map_init
00025698 g     F .text	00000010 ble_ll_whitelist_match
00016244 g     F .text	0000000c ble_svc_dis_firmware_revision_set
0000bfc0 g     F .text	00000014 vprintf
00014030 g     F .text	000000b2 ble_sm_lgcy_random_rx
0001c300 g     F .text	00000034 .hidden __popcountsi2
00009b50 g     F .text	0000000c os_started
00008164  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
000144a4 g     F .text	0000003c ble_uuid_cmp
20000498 g     O .data	00000020 reboot_conf_handler
200082f0 g     O .bss	00000004 g_smp_evq
000169a0 g     F .text	00000010 conf_unlock
000138f0 g     F .text	00000010 ble_sm_enc_key_refresh_rx
00010dcc g     F .text	00000048 ble_hs_hci_init
0000b1c0 g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00022bb4 g     F .text	0000003c ble_ll_hci_cmd_rx
0000fb40 g     F .text	00000024 ble_hs_is_parent_task
00017cc8 g     F .text	00000010 img_mgmt_register_group
00022e7c g     F .text	00000030 ble_ll_hci_ev_hw_err
0002568c g     F .text	0000000c ble_ll_whitelist_read_size
000233fc g     F .text	00000034 ble_ll_resolv_peer_addr_rd
00027b80 g     F .text	00000044 scfg_save_setting
00017a16 g     F .text	0000003c img_mgmt_find_by_hash
00019cec g     F .text	0000002c cbor_value_advance
0000a474 g     F .text	00000054 os_mbuf_appendfrom
00008164  w    F .text	00000002 PWM2_IRQHandler
0000fd88 g     F .text	00000020 ble_hs_sched_reset
00021b7c g     F .text	00000036 ble_ll_ctrl_proc_stop
0000c5d0 g     F .text	0000003c imgr_ver_str
000159b8 g     F .text	00000078 ble_att_svr_rx_find_type_value
0002360c g     F .text	00000068 ble_ll_resolv_rpa
20008758 g     O .bss	00000006 g_random_addr
0001c364 g     F .text	00000018 is_sensor_node
200004b8 g       .data	00000000 __data_end__
000283e8 g     F .text	0000002c cbor_buf_writer
000113de g     F .text	00000038 ble_hs_hci_util_data_hdr_strip
0000e8a2 g     F .text	00000056 ble_gattc_notify_custom
00008164  w    F .text	00000002 ECB_IRQHandler
00025454 g     F .text	00000010 ble_ll_sched_stop
0001c96c g     F .text	00000014 smp_ble_get_mtu
00014604 g     F .text	00000058 ble_uuid_flat
0002068c g     F .text	00000160 ble_ll_conn_comp_event_send
200092d8 g     O .bss	00000004 ble_store_config_num_peer_secs
00013dcc g     F .text	00000020 ble_sm_create_chan
00013d98 g     F .text	00000034 ble_sm_init
00026714 g     F .text	00000020 ble_phy_resolv_list_enable
00022bfc g     F .text	00000058 ble_ll_hci_init
000158ba g     F .text	00000094 ble_att_svr_rx_mtu
0001d110 g     F .text	0000004c ble_ll_rx_start
000154dc g     F .text	0000000c ble_att_svr_prev_handle
000265b8 g     F .text	00000030 ble_phy_tx_set_start_time
000140fc g     F .text	0000002c ble_store_read
20007078 g     O .bss	00000004 g_os_time
0001476e g     F .text	0000000a ble_att_set_peer_mtu
0001ad84 g     F .text	00000068 hal_spi_init
0002385c g     F .text	00000038 ble_ll_rfmgmt_reset
000147e0 g     F .text	00000028 ble_att_create_chan
000099bc g     F .text	00000014 hal_watchdog_tickle
0000c670 g     F .text	00000012 mgmt_streamer_trim_front
200094e8 g       .bss	00000000 __bss_end__
0001f464 g     F .text	00000010 ble_ll_conn_wfr_timer_exp
0001cb70 g     F .text	00000028 oc_buffer_init
0000a248 g     F .text	00000032 os_mbuf_get
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00011750 g     F .text	00000014 ble_hs_misc_restore_irks
000143b8 g     F .text	00000066 ble_store_util_delete_peer
00025900 g     F .text	0000001c ble_hw_whitelist_enable
000276b0 g     F .text	0000008c log_reboot_reason_str
0000d042 g     F .text	00000026 ble_gap_rx_rd_rem_sup_feat_complete
00014798 g     F .text	0000001a ble_att_truncate_to_mtu
00013aa2 g     F .text	00000010 ble_sm_peer_pair_rand
0000c0b2 g     F .text	00000436 .hidden _ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE
0001d394 g     F .text	00000150 ble_ll_init
0001065e g     F .text	00000034 ble_hs_conn_chan_insert
2000732c g     O .bss	00000002 ble_hs_max_attrs
20009250 g     O .bss	00000080 ble_store_config_cccds
00019e7e g     F .text	00000016 spiflash_device_ready
00025a58 g     F .text	00000038 ble_hw_resolv_list_rmv
0000acc8 g     F .text	00000010 os_msys_reset
00008164 g     F .text	00000002 Default_Handler
0000863c g     F .text	00000014 _start
00015fa4 g     F .text	00000058 ble_att_svr_start
00025880 g     F .text	00000080 ble_hw_whitelist_rmv
0000920e g     F .text	00000014 console_printhex
0001e32a g     F .text	00000020 ble_ll_hci_set_scan_rsp_data
0001cef8 g     F .text	00000018 ble_ll_addr_is_id
00018786 g     F .text	0000004a os_mgmt_impl_task_info
00026a28 g     F .text	00000084 ble_svc_ans_init
00017ddc g     F .text	00000024 img_mgmt_state_confirm
200087e8 g     O .bss	00000004 g_ble_ll_conn_comp_ev
00019068 g     F .text	0000008c base64_encode
0000b768 g     F .text	00000006 os_arch_init_task_stack
0000a390 g     F .text	000000c0 os_mbuf_dup
200092d4 g     O .bss	00000004 ble_store_config_num_our_secs
00021876 g     F .text	0000001c ble_ll_ctrl_conn_param_reply
0000a15c g     F .text	00000022 os_eventq_run
00020bec g     F .text	000000ac ble_ll_conn_hci_param_rr
0001bd88 g     F .text	00000010 os_cputime_usecs_to_ticks
0001bcc4 g     F .text	00000022 swap_in_place
0001698c g     F .text	00000014 conf_lock
0000ab22 g     F .text	00000040 os_memblock_from
00029250 g     O .text	00000010 boot_img_magic
0001c6a8 g     F .text	00000034 temp_stub_get_raw_temperature
20008750 g     O .bss	00000006 g_dev_addr
00025540 g     F .text	00000052 ble_ll_utils_remapped_channel
000177d8 g     F .text	00000024 split_write_split
0000c770 g     F .text	00000016 mgmt_ntoh_hdr
0001d28c g     F .text	00000010 ble_ll_event_send
00024a4c g     F .text	00000058 ble_ll_scan_initiator_start
20007f4c g     O .bss	00000004 conf_save_dst
20009104 g     O .bss	0000010c g_nrf_encrypt_scratchpad
0002548c g     F .text	000000b4 ble_ll_utils_calc_access_addr
00013b58 g     F .text	00000086 ble_sm_pair_initiate
0001241a g     F .text	00000040 ble_l2cap_sig_cmd_get
00014368 g     F .text	00000030 ble_store_util_bonded_peers
000251d0 g     F .text	00000174 ble_ll_sched_adv_reschedule
00017c9c g     F .text	00000014 img_mgmt_dfu_confirmed
20000524 g     O .bss	00000050 g_idle_task
0001a772 g     F .text	00000038 hal_gpio_init_out
200000ec g     O .data	00000004 sysinit_panic_cb
00025592 g     F .text	0000003e ble_ll_utils_calc_num_used_chans
0001b60c g     F .text	0000008c hal_timer_start_at
0001d274 g     F .text	0000000c ble_ll_state_set
00011764 g     F .text	00000014 ble_mqueue_init
0000c6a8 g     F .text	0000000e mgmt_streamer_init_reader
20007024 g     O .bss	00000004 g_os_sanity_check_list
00016570 g     F .text	0000002c ble_hci_trans_ll_evt_tx
0001079c g     F .text	00000018 ble_hs_conn_find
000114ac g     F .text	00000050 ble_hs_id_addr
0001c120 g     F .text	00000024 strncpy
0001b9a4 g     F .text	00000008 sensor_pkg_init
00014128 g     F .text	00000028 ble_store_delete
0000ab62 g     F .text	00000032 os_memblock_get
0000b138 g     F .text	00000088 os_sched_wakeup
00027000 g     F .text	00000060 ble_store_config_init
000248dc g     F .text	00000080 ble_ll_scan_wfr_timer_exp
0000a1da g     F .text	00000026 os_mqueue_get
0001bdae g     F .text	00000010 os_sem_init
0000fb34 g     F .text	0000000c ble_hs_evq_set
0000db80 g     F .text	00000024 ble_gap_preempt_no_lock
000163e4 g     F .text	00000028 ble_svc_gap_device_name_set
0001c07c g     F .text	00000060 realloc
000172aa g     F .text	00000030 mem_init_mbuf_pool
00010800 g     F .text	0000000c ble_hs_conn_first
00026204 g     F .text	0000000c ble_phy_disable
00009a14 g     F .text	00000098 os_default_irq
0001a178 g     F .text	0000000e spiflash_sector_erase
0001c940 g     F .text	0000002c smp_pkg_init
20008d9c g     O .bss	00000001 g_nrf_num_irks
00016f00 g     F .text	0000000a flash_area_erased_val
00020e22 g     F .text	00000030 ble_ll_conn_hci_rd_rssi
20007228 g     O .bss	00000001 ble_hs_enabled_state
0001f078 g     F .text	00000024 ble_ll_conn_find_active_conn
0000d0d2 g     F .text	00000026 ble_gap_timer
00010ce0 g     F .text	000000b8 ble_hs_hci_acl_tx_now
00013d70 g     F .text	00000026 ble_sm_connection_broken
20007038 g     O .bss	00000004 g_os_last_ctx_sw_time
200087f4 g     O .bss	00000008 g_ble_ll_conn_free_list
0001bdc0 g     F .text	00000064 os_sem_release
00025430 g     F .text	00000024 ble_ll_sched_next_time
00017d74 g     F .text	0000001e img_mgmt_slot_in_use
0001d29c g     F .text	0000000a ble_ll_read_supp_states
0000b848 g     F .text	00000048 memcmp
0000b61c g     F .text	00000018 os_arch_init
0000c6d4 g     F .text	0000001c mgmt_register_group
00026190 g     F .text	0000001c ble_phy_txpwr_set
0001bc4e g     F .text	00000076 get_le64
00016c74 g     F .text	00000054 conf_commit
00009364 g     F .text	0000000c sysinit_start
0001b438 g     F .text	00000170 hal_timer_config
00009fc4 g     F .text	00000044 os_dev_open
00026ee8 g     F .text	0000002a ble_store_config_write
0000b95c g     F .text	0000002c strncat
0002029c g     F .text	000001d0 ble_ll_conn_slave_start
0001e43c g     F .text	00000028 ble_ll_adv_can_chg_whitelist
0000d9ae g     F .text	0000004a ble_gap_enc_event
000177c0 g     F .text	00000018 split_mode_set
0001f04c g     F .text	00000012 ble_ll_conn_is_lru
0000a9b0 g     F .text	000000ae os_mbuf_pack_chains
0001ca7c g     F .text	0000004c smp_ble_gatt_svr_init
00010c34 g     F .text	0000007c ble_hs_hci_cmd_tx
0000b91c g     F .text	00000014 srand48
000256a8 g     F .text	00000060 ble_ll_whitelist_add
0001f4a0 g     F .text	0000001a ble_ll_conn_auth_pyld_timer_cb
0001be24 g     F .text	000000b8 os_sem_pend
000099ac g     F .text	00000010 hal_watchdog_enable
000184c8 g     F .text	00000014 img_mgmt_impl_log_upload_done
0001e464 g     F .text	0000002c ble_ll_adv_send_conn_comp_ev
00011c0e g     F .text	00000054 ble_hs_startup_go
0000fdb4 g     F .text	00000080 ble_hs_start
0001e1cc g     F .text	00000034 ble_ll_adv_halt
0001bd4a g     F .text	00000008 os_cputime_timer_start
0001e040 g     F .text	00000024 ble_ll_adv_chk_rpa_timeout
000217da g     F .text	0000001c ble_ll_ctrl_enc_allowed_pdu_rx
00026108 g     F .text	0000002c ble_phy_encrypt_disable
00020f46 g     F .text	00000060 ble_ll_conn_hci_le_start_encrypt
0001c334 g     F .text	00000030 init_sensor_coap
0000a200 g     F .text	0000003e os_mqueue_put
0000fd40 g     F .text	0000000a ble_hs_timer_resched
00022ab6 g     F .text	00000028 ble_ll_hci_send_noop
0000ac24 g     F .text	0000004c os_msys_register
00024ac0 g     F .text	00000014 ble_ll_scan_set_peer_rpa
20000678 g     O .bss	00000004 g_os_idle_ctr
00016e50 g     F .text	00000034 flash_area_open
00021080 g     F .text	0000006c ble_ll_conn_hci_wr_auth_pyld_tmo
000190f4 g     F .text	0000011c base64_decoder_go
0001c190 g     F .text	0000000c strtoull
0000a5c6 g     F .text	0000007a os_mbuf_cmpf
200002d4 g     O .data	0000004c spiflash_dev
00008164  w    F .text	00000002 SAADC_IRQHandler
0001753e g     F .text	00000020 boot_read_swap_state_by_id
0002178c g     F .text	00000012 ble_ll_calc_session_key
000165c8 g     F .text	0000002c ble_hci_trans_ll_acl_tx
000144e0 g     F .text	000000ac ble_uuid_to_str
0000ee70 g     F .text	00000092 ble_gatts_clt_cfg_access
00017a68 g     F .text	00000014 img_mgmt_dfu_started
000266f4 g     F .text	0000000c ble_phy_rx_started
0000b8e2 g     F .text	00000038 memset
00008020 g       .text	000000d8 __isr_vector
20008008 g     O .bss	00000030 g_img_mgmt_state
00015cd2 g     F .text	0000006c ble_att_svr_rx_write
00008f48 g     F .text	00000078 main
0001ae34 g     F .text	0000002c hal_spi_set_txrx_cb
00015f38 g     F .text	0000006c ble_att_svr_rx_indicate
00020fa6 g     F .text	0000005c ble_ll_conn_hci_le_ltk_reply
00014398 g     F .text	00000020 ble_store_util_delete_all
00025464 g     F .text	00000028 ble_ll_sched_init
00022fe8 g     F .text	00000024 ble_ll_rand_init
200082f8 g     O .bss	00000018 g_smp_ble_mq
00009254 g     F .text	00000028 console_out_nolock
00022d9c g     F .text	00000050 ble_ll_hci_ev_ltk_req
00019344 g     F .text	0000006a cbor_encode_uint
00023ebc g     F .text	0000000a ble_ll_scan_timer_cb
00019dc0 g     F .text	00000080 spiflash_read_jedec_id
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 WDT_IRQHandler
0001ccc4 g     F .text	00000050 ble_ll_task
00011db2 g     F .text	0000000c ble_l2cap_get_conn_handle
0000c088 g     F .text	00000010 rust_sysinit
000205d0 g     F .text	00000056 ble_ll_conn_hci_chk_conn_params
20008700 g     O .bss	00000050 g_ble_ll_task
0001cbd4 g     F .text	00000020 oc_send_buffer
00022e3a g     F .text	00000042 ble_ll_hci_ev_rd_rem_ver
00009370 g     F .text	0000000c sysinit_end
0000d4a6 g     F .text	00000026 ble_gap_terminate
000275ba g     F .text	00000002 modlog_init
0000b76e g     F .text	00000046 SVC_Handler
0000dcb8 g     F .text	00000068 ble_gap_init
00022ae0 g     F .text	00000058 ble_ll_hci_is_le_event_enabled
00013fc8 g     F .text	00000068 ble_sm_lgcy_random_exec
0000d424 g     F .text	00000014 ble_gap_conn_active
00022eac g     F .text	00000026 ble_ll_hci_ev_databuf_overflow
00027240 g     F .text	00000034 ble_store_config_conf_init
00022996 g     F .text	00000004 ble_ll_hci_adv_mode_ext
0000a060 g     F .text	0000000a os_eventq_inited
00023334 g     F .text	00000098 ble_ll_resolv_list_rmv
00022c9c g     F .text	0000004a ble_ll_hci_ev_rem_conn_parm_req
000187d0 g     F .text	0000005c os_mgmt_impl_reset
0000c740 g     F .text	00000030 mgmt_ctxt_init
2000846c g     O .bss	00000020 oc_transports
00020abc g     F .text	00000060 ble_ll_conn_hci_read_rem_features
0001a388 g     F .text	00000054 hal_flash_read
000115d8 g     F .text	00000018 ble_hs_id_reset
0000a1c0 g     F .text	00000008 os_eventq_dflt_get
00028e84 g     O .text	00000010 ble_hs_pvcy_default_irk
0001b5a8 g     F .text	00000038 hal_timer_read
2000809c g     O .bss	0000001c nrf52_hal_timer5
0001cc70 g     F .text	00000002 oc_register_gatt
0000a0da g     F .text	00000082 os_eventq_get
00016ed0 g     F .text	00000026 flash_area_erase
20008074 g     O .bss	00000028 nrf52_hal_spi0
0000b56c g     F .text	00000026 os_time_ms_to_ticks
20000504 g     O .bss	00000001 g_silence_console
00024aa4 g     F .text	0000000c ble_ll_scan_enabled
00009e54 g     F .text	0000003c os_callout_wakeup_ticks
0000d040 g     F .text	00000002 ble_gap_rx_adv_report
00011d80 g     F .text	00000032 ble_l2cap_prepend_hdr
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
0001b9ac g     F .text	00000018 sensor_lock
0001e528 g     F .text	0000001c ble_ll_adv_init
000166f8 g     F .text	000000d4 ble_hci_ram_init
0001165e g     F .text	0000000a ble_hs_mbuf_att_pkt
20007f64 g     O .bss	00000004 flash_map_entries
0000a522 g     F .text	000000a4 os_mbuf_adj
00024adc g     F .text	00000010 ble_ll_scan_whitelist_enabled
0000d5e8 g     F .text	00000036 ble_gap_reset_state
0000c786 g     F .text	00000016 mgmt_hton_hdr
200094c2 g     O .bss	00000002 reboot_cnt
000169b0 g     F .text	0000001c conf_register
00008020 g       .imghdr	00000000 __text
20008038 g     O .bss	00000004 img_mgmt_dfu_callbacks_fn
000171cc g     F .text	00000012 mfg_seek_next
0002456c g     F .text	00000080 ble_ll_scan_sm_stop
0000fe52 g     F .text	00000008 ble_hs_tx_data
0000b930 g     F .text	0000001c strcmp
00016f30 g     F .text	0000000e flash_area_read_is_empty
000138dc g     F .text	00000014 ble_sm_enc_change_rx
0000b090 g     F .text	0000000c os_sched_get_current_task
000194cc g     F .text	00000020 cbor_encoder_create_map
00009280 g     F .text	0000001e console_write
0001e4c4 g     F .text	00000014 ble_ll_adv_wfr_timer_exp
20008a18 g     O .bss	00000028 g_ble_ll_resolv_data
0000d97c g     F .text	00000032 ble_gap_passkey_event
00011d4c g     F .text	00000008 ble_l2cap_is_mtu_req_sent
0000b838 g     F .text	00000010 lrand48
000285f0 g     F .text	00000034 hal_bsp_hw_id
00025f70 g     F .text	00000134 ble_phy_init
000148b4 g     F .text	00000004 ble_att_clt_tx_read_type
00008468 g     F .text	000001d4 SystemInit
0001bd5a g     F .text	0000000a os_cputime_get32
0001cf2c g     F .text	00000016 ble_ll_is_valid_public_addr
00014452 g     F .text	00000052 ble_uuid_init_from_buf
00008164  w    F .text	00000002 RNG_IRQHandler
0001368a g     F .text	000000e4 ble_sm_process_result
000115f0 g     F .text	00000024 ble_hs_log_mbuf
0000a17e g     F .text	00000040 os_eventq_remove
00025708 g     F .text	0000003c ble_ll_whitelist_rmv
200084d8 g     O .bss	000000a8 g_ble_ll_data
00027d04 g     F .text	00000002 _fini
00026710 g     F .text	00000004 ble_phy_max_data_pdu_pyld
000107b4 g     F .text	00000018 ble_hs_conn_insert
00016890 g     F .text	00000068 conf_save_one
00012272 g     F .text	0000009c ble_l2cap_sig_update
00016a36 g     F .text	0000015e conf_value_from_str
0001640c g     F .text	00000074 ble_svc_gap_init
000148d8 g     F .text	00000004 ble_att_clt_rx_write
0001bbf4 g     F .text	00000014 put_le32
00017a54 g     F .text	00000014 img_mgmt_dfu_stopped
0001b8f0 g     F .text	0000000c sensor_mgr_evq_get
00024cf0 g     F .text	000001a4 ble_ll_sched_conn_reschedule
0000f9a8 g     F .text	00000048 ble_gatts_add_svcs
00018450 g     F .text	00000038 img_mgmt_impl_swap_type
0001c0dc g     F .text	00000020 sprintf
0001d242 g     F .text	00000030 ble_ll_tx_mbuf_pducb
200087ec g     O .bss	00000004 g_ble_ll_conn_create_sm
00010e58 g     F .text	00000038 ble_hs_hci_cmd_send_buf
0001496c g     F .text	0000000a ble_att_clt_rx_indicate
000148ac g     F .text	00000004 ble_att_clt_tx_find_type_value
000148c8 g     F .text	00000004 ble_att_clt_rx_read_blob
0000b250 g     F .text	00000022 os_sched
000148b0 g     F .text	00000004 ble_att_clt_rx_find_type_value
00010648 g     F .text	00000016 ble_hs_conn_chan_find_by_scid
0001cbf4 g     F .text	0000004c oc_send_multicast_message
200001f8 g     O .data	0000001c ble_svc_dis_data
0001a378 g     F .text	00000010 hal_flash_erased_val
00026748 g     F .text	00000008 ble_phy_rfclk_disable
000148b8 g     F .text	00000004 ble_att_clt_rx_read_type
000184dc g     F .text	00000014 img_mgmt_impl_log_pending
00011668 g     F .text	0000002e ble_hs_mbuf_to_flat
00020222 g     F .text	00000034 ble_ll_conn_tx_pkt_in
200092d0 g     O .bss	00000004 ble_store_config_num_cccds
20008760 g     O .bss	00000080 g_ble_ll_adv_sm
0000ae28 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
00011654 g     F .text	0000000a ble_hs_mbuf_l2cap_pkt
00008164  w    F .text	00000002 RTC2_IRQHandler
00023584 g     F .text	00000028 ble_ll_resolv_set_peer_rpa
0001adec g     F .text	00000048 hal_spi_tx_val
000130d4 g     F .text	00000040 ble_sm_proc_find
00023674 g     F .text	0000000c ble_ll_resolv_enabled
00019f9a g     F .text	00000034 spiflash_write_enable
20010000 g       .bss	00000000 __StackTop
00014778 g     F .text	00000020 ble_att_chan_mtu
000194b0 g     F .text	00000010 cbor_encode_text_string
0001134e g     F .text	00000028 ble_hs_hci_util_read_adv_tx_pwr
0001b9c4 g     F .text	0000000a sensor_unlock
00027de8 g     F .text	00000234 cbor_read_array
20008d5c g     O .bss	00000040 g_nrf_irk_list
00022dec g     F .text	0000004e ble_ll_hci_ev_rd_rem_used_feat
000275b8 g     F .text	00000002 config_pkg_init_stage2
0000a1c8 g     F .text	00000012 os_mqueue_init
00018fec g     F .text	00000012 _double_byte
000141be g     F .text	0000000c ble_store_write_our_sec
0002221a g     F .text	000000cc ble_ll_ctrl_tx_done
0001170a g     F .text	00000026 ble_hs_misc_conn_chan_find_reqd
000091c8 g     F .text	0000003c console_flush
00008164  w    F .text	00000002 PWM0_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00021a2a g     F .text	00000018 ble_ll_ctrl_is_terminate_ind
0001ac98 g     F .text	00000038 hal_spi_config
0001c144 g     F .text	00000020 strsep
00022c54 g     F .text	00000048 ble_ll_hci_ev_datalen_chg
00017cd8 g     F .text	00000076 img_mgmt_state_flags
00015efa g     F .text	0000003e ble_att_svr_rx_notify
00014808 g     F .text	00000010 ble_att_init
00015702 g     F .text	00000016 ble_att_svr_ticks_until_tmo
00011570 g     F .text	00000020 ble_hs_id_use_addr
0001d078 g     F .text	0000003c ble_ll_wfr_timer_exp
00010618 g     F .text	00000030 ble_hs_conn_can_alloc
000105d0 g     F .text	0000002c ble_hs_atomic_conn_flags
000163dc g     F .text	00000008 ble_svc_gap_device_name
0001179e g     F .text	0000003e ble_mqueue_put
000113b8 g     F .text	00000026 ble_hs_hci_util_set_random_addr
00019210 g     F .text	0000001e base64_decode
0000d1c8 g     F .text	0000003e ble_gap_adv_set_data
00023894 g     F .text	00000028 ble_ll_rfmgmt_scan_changed
00025818 g     F .text	00000068 ble_hw_whitelist_add
00010a18 g     F .text	00000004 ble_hs_flow_startup
000123a4 g     F .text	00000034 ble_l2cap_sig_init
20008198 g     O .bss	00000020 st_up_osco
0001fd88 g     F .text	00000064 ble_ll_conn_rx_isr_start
00009df8 g     F .text	0000005c os_callout_tick
000109e0 g     F .text	00000034 ble_hs_conn_init
00029208 g     O .text	00000048 sysflash_map_dflt
0000dba4 g     F .text	00000018 ble_gap_preempt
000080f8 g       .text	00000000 __isr_vector_end
00009cb4 g     F .text	00000022 os_start
0001cfc0 g     F .text	00000028 ble_ll_is_valid_own_addr_type
00012490 g     F .text	0000001e ble_l2cap_sig_reject_invalid_cid_tx
000221cc g     F .text	0000004e ble_ll_ctrl_reject_ind_send
0001cee0 g     F .text	00000018 ble_ll_is_rpa
0001bce6 g     F .text	0000001c swap_buf
0000d726 g     F .text	00000098 ble_gap_rx_param_req
00021834 g     F .text	00000042 ble_ll_ctrl_start_enc_send
0001d2a8 g     F .text	0000000c ble_ll_read_supp_features
0001f520 g     F .text	00000104 ble_ll_conn_sm_new
0001e36c g     F .text	0000004c ble_ll_adv_rx_isr_end
00020d00 g     F .text	00000048 ble_ll_conn_create_cancel
00020b1c g     F .text	000000d0 ble_ll_conn_hci_update
00022ed4 g     F .text	00000050 ble_ll_rand_sample
000141ca g     F .text	0000000e ble_store_read_peer_sec
00008164  w    F .text	00000002 RTC1_IRQHandler
00018fe4 g     F .text	00000008 _set
00017686 g     F .text	00000092 boot_set_pending
0001acd0 g     F .text	0000004c hal_spi_enable
0000b2b8 g     F .text	0000000a os_task_stacktop_get
00011376 g     F .text	00000042 ble_hs_hci_util_rand
0001bd7a g     F .text	0000000c os_cputime_delay_usecs
0001d31c g     F .text	00000006 ble_ll_pdu_tx_time_get
0001bd0e g     F .text	0000003c os_cputime_timer_init
0001240c g     F .text	0000000e ble_l2cap_sig_hdr_parse
000157f2 g     F .text	00000030 ble_att_svr_tx_error_rsp
0001f0b8 g     F .text	0000001c ble_ll_conn_calc_dci
0001ba44 g     F .text	0000002e sensor_mgr_register
0000c6c4 g     F .text	00000010 mgmt_streamer_free_buf
000168f8 g     F .text	00000014 conf_store_init
0002574c g     F .text	00000008 ble_ll_whitelist_disable
0001d064 g     F .text	00000014 ble_ll_get_our_devaddr
000182fe g     F .text	00000088 img_mgmt_impl_write_pending
00011994 g     F .text	00000084 ble_hs_pvcy_set_our_irk
00024970 g     F .text	0000009c ble_ll_scan_set_scan_params
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
000266e8 g     F .text	0000000c ble_phy_access_addr_get
0000d620 g     F .text	000000b4 ble_gap_rx_update_complete
0000a78e g     F .text	00000046 os_mbuf_concat
000141d8 g     F .text	00000050 ble_store_write_peer_sec
000247c4 g     F .text	00000060 ble_ll_scan_chk_resume
0001c928 g     F .text	00000018 smp_transport_init
00019f04 g     F .text	00000016 spiflash_wait_ready
0001a19e g     F .text	00000010 spiflash_block_64k_erase
0001c55c g     F .text	0000006c temp_stub_create
00013f2c g     F .text	0000009c ble_sm_lgcy_confirm_exec
0001724c g     F .text	00000010 mfg_open
20000140 g     O .data	00000008 g_os_run_list
00023824 g     F .text	00000038 ble_ll_rfmgmt_init
00027484 g     F .text	0000010a smp_process_request_packet
000098c0 g     F .text	00000034 NVIC_Relocate
0000fb78 g     F .text	00000010 ble_hs_unlock_nested
0001cc72 g     F .text	00000002 oc_register_ip4
0001933a g     F .text	0000000a cbor_encoder_init
00017322 g     F .text	00000090 sysinit_app
0001b8e0 g     F .text	00000010 sensor_mgr_unlock
00011d08 g     F .text	00000028 ble_l2cap_chan_alloc
000148a4 g     F .text	00000004 ble_att_clt_tx_find_info
2000707c g     O .bss	00000004 os_flags
00028428 g     F .text	00000006 cbor_buf_writer_buffer_size
00018386 g     F .text	00000034 img_mgmt_impl_write_confirmed
0001cb98 g     F .text	00000030 oc_ri_mem_init
0000b5c0 g     F .text	00000006 os_arch_restore_sr
20008068 g     O .bss	0000000c g_hal_os_tick
00011f14 g     F .text	0000003c ble_l2cap_init
0001c858 g     F .text	00000044 smp_tx_rsp
00024aec g     F .text	00000048 ble_ll_scan_reset
0001ce64 g     F .text	00000056 ble_ll_rxpdu_alloc
0002299a g     F .text	00000024 ble_ll_hci_event_send
000279e4 g     F .text	00000070 log_reboot_pkg_init
0001e4be g     F .text	00000004 ble_ll_adv_get_peer_rpa
000164c4 g     F .text	0000002e ble_hs_util_ensure_addr
2000fe50 g       *ABS*	000001b0 __StackLimit
00016f0a g     F .text	00000026 flash_area_is_empty
200026d0 g     O .bss	00000004 g_os_started
000264ec g     F .text	00000068 ble_phy_rx
0000a008 g     F .text	00000036 os_dev_close
0000d23c g     F .text	000001b0 ble_gap_rx_conn_complete
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00024a0c g     F .text	00000020 ble_ll_hci_scan_set_enable
00016650 g     F .text	000000a4 ble_hci_trans_buf_free
00011ed6 g     F .text	0000003e ble_l2cap_tx
000164f4 g     F .text	00000028 ble_hci_trans_cfg_hs
00008164  w    F .text	00000002 NFCT_IRQHandler
00022bf0 g     F .text	0000000a ble_ll_hci_acl_rx
20008d58 g     O .bss	00000004 g_ble_rng_isr_cb
20008818 g     O .bss	000001a0 g_ble_ll_conn_sm
00019bda g     F .text	00000050 cbor_value_leave_container
0000d916 g     F .text	00000066 ble_gap_unpair_oldest_except
0001cc7c g     F .text	00000028 oc_rep_init
0001bc08 g     F .text	00000026 put_le64
000271cc g     F .text	0000001c ble_store_config_persist_our_secs
0001ceba g     F .text	00000010 ble_ll_chk_txrx_octets
00014236 g     F .text	0000000c ble_store_write_cccd
000183f0 g     F .text	00000032 img_mgmt_impl_write_image_data
00008458 g     F .text	00000010 SystemCoreClockUpdate
000188e8 g     F .text	000006e4 tc_aes_encrypt
200090e0 g     O .bss	00000021 g_nrf_ccm_data
0000a2c4 g     F .text	00000024 os_mbuf_free_chain
00026fd4 g     F .text	0000002a ble_store_config_delete
00018034 g     F .text	0000005a img_mgmt_ver_str
0001c61e g     F .text	0000000e temp_stub_default_cfg
0000fbbc g     F .text	0000003a ble_hs_wakeup_tx
0001f474 g     F .text	00000002 ble_ll_conn_reset_pending_aux_conn_rsp
0000ad20 g     F .text	00000034 os_msys_init
0001077c g     F .text	00000020 ble_hs_conn_remove
000154e8 g     F .text	00000018 ble_att_svr_find_by_handle
0000a450 g     F .text	00000024 os_mbuf_off
0001d15c g     F .text	000000e6 ble_ll_rx_end
00010c10 g     F .text	00000024 ble_hs_hci_add_avail_pkts
000096c8 g     F .text	000000a4 start_ble
0000b4b8 g     F .text	0000000c os_time_get
0001651c g     F .text	00000028 ble_hci_trans_cfg_ll
0001ae60 g     F .text	000000ac hal_spi_txrx
00009224 g     F .text	00000010 console_printint
000141b0 g     F .text	0000000e ble_store_read_our_sec
00015d94 g     F .text	000000b2 ble_att_svr_rx_prep_write
0001b698 g     F .text	00000064 hal_timer_stop
200080b8 g     O .bss	00000018 sensor_base_ts
000234f0 g     F .text	0000000c ble_ll_resolv_get_rpa_tmo
0001b7a0 g     F .text	0000002e sensor_mgr_match_bytype
000234fc g     F .text	00000086 ble_ll_resolv_get_priv_addr
000238f0 g     F .text	00000034 ble_ll_rfmgmt_release
000148dc g     F .text	00000004 ble_att_clt_tx_prep_write
0000a27a g     F .text	00000036 os_mbuf_get_pkthdr
200092e0 g     O .bss	000000f0 ble_store_config_our_secs
00016b94 g     F .text	000000ac conf_str_from_value
00026740 g     F .text	00000008 ble_phy_rfclk_enable
000284d8 g     F .text	00000058 cbor_mbuf_reader_init
00015b54 g     F .text	00000080 ble_att_svr_rx_read_blob
2000732e g     O .bss	00000002 ble_hs_max_client_configs
0000f68c g     F .text	00000020 ble_gatts_conn_can_alloc
00027c80 g     F .text	00000070 ull_to_s
00016250 g     F .text	00000074 ble_svc_dis_init
00016c40 g     F .text	00000034 conf_set_value
00025744 g     F .text	00000008 ble_ll_whitelist_enable
0000fb64 g     F .text	00000014 ble_hs_lock_nested
00010596 g     F .text	00000010 ble_hs_adv_set_fields
00029854 g     O .text	0000002d g_ble_ll_supp_cmds
0000b2c4 g     F .text	000000e4 os_task_init
000081fc g     F .text	0000004c hal_system_clock_start
0001426c g     F .text	0000002a ble_store_key_from_value_sec
0000815a  w    F .text	00000002 BusFault_Handler
00011cb8 g     F .text	0000001c ble_hs_stop_init
0001305c g     F .text	00000078 ble_sm_ia_ra
0000fd4c g     F .text	0000003c ble_hs_enqueue_hci_event
00022d2a g     F .text	00000072 ble_ll_hci_ev_encrypt_chg
0000b94c g     F .text	00000010 strlen
00009f38 g     F .text	00000040 os_dev_create
00019e40 g     F .text	0000003e spiflash_read_status
00010692 g     F .text	0000002c ble_hs_conn_delete_chan
0000ab94 g     F .text	0000001e os_memblock_put_from_cb
00026734 g     F .text	0000000c ble_phy_resolv_list_disable
200089ec g     O .bss	00000020 g_ble_ll_rnum_buf
0000a050 g     F .text	00000010 os_eventq_init
000148cc g     F .text	00000004 ble_att_clt_rx_read_mult
0000b4c4 g     F .text	00000048 os_time_advance
0002104e g     F .text	00000032 ble_ll_conn_hci_rd_auth_pyld_tmo
0001f060 g     F .text	00000018 ble_ll_conn_get_ce_end_time
0000b274 g     F .text	0000002c os_sched_resort
20008000 g     O .bss	00000004 boot_current_slot
00014662 g     F .text	00000024 ble_uuid_to_mbuf
0000d004 g     F .text	0000002a ble_gap_conn_find
0000a940 g     F .text	00000018 os_mbuf_prepend_pullup
0001475e g     F .text	0000000e ble_att_conn_chan_find
0001a340 g     F .text	00000028 hal_flash_init
0001bc2e g     F .text	0000000a get_le16
0001f8cc g     F .text	00000030 ble_ll_conn_connect_ind_send
0001c0fc g     F .text	00000014 strchr
00008164  w    F .text	00000002 MWU_IRQHandler
0000d092 g     F .text	00000040 ble_gap_rx_phy_update_complete
0002046c g     F .text	000000b8 ble_ll_conn_module_reset
0000c6f0 g     F .text	00000016 mgmt_find_handler
000160f8 g     F .text	000000e6 ble_sm_alg_c1
00008158  w    F .text	00000002 MemoryManagement_Handler
0000dbbc g     F .text	000000c4 ble_gap_preempt_done
0001e304 g     F .text	0000000c ble_ll_adv_read_txpwr
00013dec g     F .text	00000034 ble_sm_cmd_get
00014840 g     F .text	00000064 ble_att_clt_rx_mtu
00010dc0 g     F .text	0000000c ble_hs_hci_get_hci_version
0001659c g     F .text	0000002c ble_hci_trans_hs_acl_tx
0000fbf8 g     F .text	00000014 ble_hs_is_enabled
0001b3c0 g     F .text	00000010 nrf52_timer5_irq_handler
0002017c g     F .text	000000a6 ble_ll_conn_enqueue_pkt
0001e1b0 g     F .text	0000001c ble_ll_adv_event_rmvd_from_sched
00011614 g     F .text	0000000c ble_hs_log_flat_buf
00017718 g     F .text	00000054 boot_set_confirmed
00021b0c g     F .text	00000070 ble_ll_ctrl_chk_proc_start
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0001ba72 g     F .text	0000001e sensor_init
0001245a g     F .text	00000036 ble_l2cap_sig_reject_tx
00025a94 g     F .text	00000028 ble_hw_resolv_list_match
0001a5ba g     F .text	00000032 hal_flash_isempty_no_buf
00015d3e g     F .text	00000040 ble_att_svr_rx_write_no_rsp
0001cc7a g     F .text	00000002 oc_register_tcp4
0001548c g     F .text	00000050 ble_att_svr_register
00009f78 g     F .text	0000002c os_dev_initialize_all
00011778 g     F .text	00000026 ble_mqueue_get
000238bc g     F .text	00000034 ble_ll_rfmgmt_sched_changed
00020524 g     F .text	00000054 ble_ll_conn_module_init
0000d8a0 g     F .text	0000004c ble_gap_unpair
000253bc g     F .text	00000074 ble_ll_sched_rmv_elem
000116da g     F .text	00000030 ble_hs_misc_conn_chan_find
0000e902 g     F .text	0000000c ble_gatts_indicate_fail_notconn
000105fc g     F .text	0000001c ble_hs_atomic_first_conn_handle
0000c500 g     F .text	00000046 imgmgr_find_best_area_id
00025d84 g     F .text	00000004 ble_phy_get_cur_phy
20000148 g     O .data	00000008 g_os_sleep_list
0000bfd4 g     F .text	00000058 jrand48
00011874 g     F .text	00000028 ble_hs_pvcy_ensure_started
00021e50 g     F .text	0000037c ble_ll_ctrl_rx_pdu
00019d40 g     F .text	0000000c hal_bsp_init
0000ea14 g     F .text	0000000c ble_gattc_connection_broken
00009cd8 g     F .text	00000048 os_pkg_init
000261b8 g     F .text	0000004c ble_phy_setchan
200087e4 g     O .bss	00000004 g_ble_ll_conn_active_list
00020820 g     F .text	000000ec ble_ll_conn_num_comp_pkts_event_send
0001ad1c g     F .text	00000068 hal_spi_disable
000184f0 g     F .text	00000014 img_mgmt_impl_log_confirm
00022fcc g     F .text	0000001c ble_ll_rand_start
0000d590 g     F .text	00000058 ble_gap_rx_disconn_complete
00016960 g     F .text	0000002c conf_init
0000af44 g     F .text	00000010 os_sanity_check_init
000236b4 g     F .text	0000001c ble_ll_resolv_list_reset
00025660 g     F .text	0000002c ble_ll_whitelist_clear
00010708 g     F .text	00000074 ble_hs_conn_alloc
00010cb0 g     F .text	00000030 ble_hs_hci_rx_evt
0001a18e g     F .text	00000010 spiflash_block_32k_erase
0001f8fc g     F .text	0000002c ble_ll_conn_event_halt
200082f4 g     O .bss	00000002 g_ble_smp_attr_handle
0000bf3c g     F .text	00000008 vfprintf
0001c2b6 g     F .text	00000034 strpbrk
0001cc78 g     F .text	00000002 oc_register_serial
000235d8 g     F .text	00000034 ble_ll_resolv_gen_rpa
20002680 g     O .bss	00000050 g_os_main_task
0001c050 g     F .text	0000002c free
00017580 g     F .text	0000000e boot_write_image_ok
0001cc76 g     F .text	00000002 oc_register_lora
0001c760 g     F .text	00000030 temp_stub_config



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0000b76f 	.word	0x0000b76f
	...
    8058:	0000b7b5 	.word	0x0000b7b5
    805c:	0000b7fb 	.word	0x0000b7fb
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f844 	bl	81b4 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	200004e0 	.word	0x200004e0
    ldr     r3, =__bss_end__
    8134:	200094e8 	.word	0x200094e8
    ldr    r1, =__etext
    8138:	00029a7c 	.word	0x00029a7c
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	200004b8 	.word	0x200004b8
    LDR     R0, =__HeapBase
    8144:	200094e8 	.word	0x200094e8
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	00008469 	.word	0x00008469
    LDR     R0, =_start
    8150:	0000863d 	.word	0x0000863d

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <_sbrk>:
void *
_sbrk(int incr)
{
    void *prev_brk;

    if (incr < 0) {
    8178:	1e03      	subs	r3, r0, #0
    817a:	db09      	blt.n	8190 <_sbrk+0x18>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (sbrkLimit - brk >= incr) {
    817c:	4a0c      	ldr	r2, [pc, #48]	; (81b0 <_sbrk+0x38>)
    817e:	6890      	ldr	r0, [r2, #8]
    8180:	6852      	ldr	r2, [r2, #4]
    8182:	1a12      	subs	r2, r2, r0
    8184:	429a      	cmp	r2, r3
    8186:	db0f      	blt.n	81a8 <_sbrk+0x30>
            prev_brk = brk;
            brk += incr;
    8188:	4403      	add	r3, r0
    818a:	4a09      	ldr	r2, [pc, #36]	; (81b0 <_sbrk+0x38>)
    818c:	6093      	str	r3, [r2, #8]
    818e:	4770      	bx	lr
        if (brk - incr < sbrkBase) {
    8190:	4a07      	ldr	r2, [pc, #28]	; (81b0 <_sbrk+0x38>)
    8192:	6890      	ldr	r0, [r2, #8]
    8194:	4403      	add	r3, r0
    8196:	6812      	ldr	r2, [r2, #0]
    8198:	4293      	cmp	r3, r2
    819a:	d302      	bcc.n	81a2 <_sbrk+0x2a>
            brk -= incr;
    819c:	4a04      	ldr	r2, [pc, #16]	; (81b0 <_sbrk+0x38>)
    819e:	6093      	str	r3, [r2, #8]
    81a0:	4770      	bx	lr
            prev_brk = (void *)-1;
    81a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    81a6:	4770      	bx	lr
        } else {
            prev_brk = (void *)-1;
    81a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }

    return prev_brk;
}
    81ac:	4770      	bx	lr
    81ae:	bf00      	nop
    81b0:	200000d8 	.word	0x200000d8

000081b4 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    81b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81b8:	2201      	movs	r2, #1
    81ba:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    81be:	4770      	bx	lr

000081c0 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    81c0:	4b02      	ldr	r3, [pc, #8]	; (81cc <hal_debugger_connected+0xc>)
    81c2:	6818      	ldr	r0, [r3, #0]
}
    81c4:	f000 0001 	and.w	r0, r0, #1
    81c8:	4770      	bx	lr
    81ca:	bf00      	nop
    81cc:	e000edf0 	.word	0xe000edf0

000081d0 <hal_system_reset>:
{
    81d0:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
    81d2:	f7ff fff5 	bl	81c0 <hal_debugger_connected>
    81d6:	b100      	cbz	r0, 81da <hal_system_reset+0xa>

static inline void
hal_debug_break(void)
{
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
    __BKPT(1);
    81d8:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    81da:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81de:	4905      	ldr	r1, [pc, #20]	; (81f4 <hal_system_reset+0x24>)
    81e0:	68ca      	ldr	r2, [r1, #12]
    81e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81e6:	4b04      	ldr	r3, [pc, #16]	; (81f8 <hal_system_reset+0x28>)
    81e8:	4313      	orrs	r3, r2
    81ea:	60cb      	str	r3, [r1, #12]
    81ec:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81f0:	bf00      	nop
    81f2:	e7fd      	b.n	81f0 <hal_system_reset+0x20>
    81f4:	e000ed00 	.word	0xe000ed00
    81f8:	05fa0004 	.word	0x05fa0004

000081fc <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8200:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8204:	4b0f      	ldr	r3, [pc, #60]	; (8244 <hal_system_clock_start+0x48>)
    8206:	4013      	ands	r3, r2
    8208:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    820c:	d018      	beq.n	8240 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    820e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8212:	2201      	movs	r2, #1
    8214:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    8216:	2100      	movs	r1, #0
    8218:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    821c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    8220:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    8222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8226:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    822a:	2b00      	cmp	r3, #0
    822c:	d0f9      	beq.n	8222 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    822e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8232:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8236:	4b03      	ldr	r3, [pc, #12]	; (8244 <hal_system_clock_start+0x48>)
    8238:	4013      	ands	r3, r2
    823a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    823e:	d1f0      	bne.n	8222 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8240:	4770      	bx	lr
    8242:	bf00      	nop
    8244:	00010003 	.word	0x00010003

00008248 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0b      	ldr	r3, [pc, #44]	; (8278 <errata_16+0x30>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b09      	ldr	r3, [pc, #36]	; (827c <errata_16+0x34>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d107      	bne.n	826e <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b08      	ldr	r3, [pc, #32]	; (8280 <errata_16+0x38>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d003      	beq.n	8272 <errata_16+0x2a>
    return false;
    826a:	2000      	movs	r0, #0
    826c:	4770      	bx	lr
    826e:	2000      	movs	r0, #0
    8270:	4770      	bx	lr
            return true;
    8272:	2001      	movs	r0, #1
}
    8274:	4770      	bx	lr
    8276:	bf00      	nop
    8278:	f0000fe0 	.word	0xf0000fe0
    827c:	f0000fe4 	.word	0xf0000fe4
    8280:	f0000fe8 	.word	0xf0000fe8

00008284 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8284:	4b0f      	ldr	r3, [pc, #60]	; (82c4 <errata_31+0x40>)
    8286:	781b      	ldrb	r3, [r3, #0]
    8288:	2b06      	cmp	r3, #6
    828a:	d001      	beq.n	8290 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    828c:	2000      	movs	r0, #0
    828e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8290:	4b0d      	ldr	r3, [pc, #52]	; (82c8 <errata_31+0x44>)
    8292:	681b      	ldr	r3, [r3, #0]
    8294:	f013 0f0f 	tst.w	r3, #15
    8298:	d10b      	bne.n	82b2 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    829a:	4b0c      	ldr	r3, [pc, #48]	; (82cc <errata_31+0x48>)
    829c:	681b      	ldr	r3, [r3, #0]
    829e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82a2:	2b30      	cmp	r3, #48	; 0x30
    82a4:	d007      	beq.n	82b6 <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82a6:	2b40      	cmp	r3, #64	; 0x40
    82a8:	d007      	beq.n	82ba <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82aa:	2b50      	cmp	r3, #80	; 0x50
    82ac:	d007      	beq.n	82be <errata_31+0x3a>
    return false;
    82ae:	2000      	movs	r0, #0
    82b0:	4770      	bx	lr
    82b2:	2000      	movs	r0, #0
    82b4:	4770      	bx	lr
            return true;
    82b6:	2001      	movs	r0, #1
    82b8:	4770      	bx	lr
            return true;
    82ba:	2001      	movs	r0, #1
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0b      	ldr	r3, [pc, #44]	; (8300 <errata_32+0x30>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b09      	ldr	r3, [pc, #36]	; (8304 <errata_32+0x34>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d107      	bne.n	82f6 <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b08      	ldr	r3, [pc, #32]	; (8308 <errata_32+0x38>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d003      	beq.n	82fa <errata_32+0x2a>
    return false;
    82f2:	2000      	movs	r0, #0
    82f4:	4770      	bx	lr
    82f6:	2000      	movs	r0, #0
    82f8:	4770      	bx	lr
            return true;
    82fa:	2001      	movs	r0, #1
}
    82fc:	4770      	bx	lr
    82fe:	bf00      	nop
    8300:	f0000fe0 	.word	0xf0000fe0
    8304:	f0000fe4 	.word	0xf0000fe4
    8308:	f0000fe8 	.word	0xf0000fe8

0000830c <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    830c:	4b0f      	ldr	r3, [pc, #60]	; (834c <errata_36+0x40>)
    830e:	781b      	ldrb	r3, [r3, #0]
    8310:	2b06      	cmp	r3, #6
    8312:	d001      	beq.n	8318 <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8314:	2000      	movs	r0, #0
    8316:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8318:	4b0d      	ldr	r3, [pc, #52]	; (8350 <errata_36+0x44>)
    831a:	681b      	ldr	r3, [r3, #0]
    831c:	f013 0f0f 	tst.w	r3, #15
    8320:	d10b      	bne.n	833a <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8322:	4b0c      	ldr	r3, [pc, #48]	; (8354 <errata_36+0x48>)
    8324:	681b      	ldr	r3, [r3, #0]
    8326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    832a:	2b30      	cmp	r3, #48	; 0x30
    832c:	d007      	beq.n	833e <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    832e:	2b40      	cmp	r3, #64	; 0x40
    8330:	d007      	beq.n	8342 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8332:	2b50      	cmp	r3, #80	; 0x50
    8334:	d007      	beq.n	8346 <errata_36+0x3a>
    return false;
    8336:	2000      	movs	r0, #0
    8338:	4770      	bx	lr
    833a:	2000      	movs	r0, #0
    833c:	4770      	bx	lr
            return true;
    833e:	2001      	movs	r0, #1
    8340:	4770      	bx	lr
            return true;
    8342:	2001      	movs	r0, #1
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_37+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_37+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_37+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_37+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_57+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_57+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_57+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b30      	cmp	r3, #48	; 0x30
    83b4:	d003      	beq.n	83be <errata_57+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0b      	ldr	r3, [pc, #44]	; (8400 <errata_66+0x30>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b09      	ldr	r3, [pc, #36]	; (8404 <errata_66+0x34>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d107      	bne.n	83f6 <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83e6:	4b08      	ldr	r3, [pc, #32]	; (8408 <errata_66+0x38>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b50      	cmp	r3, #80	; 0x50
    83f0:	d003      	beq.n	83fa <errata_66+0x2a>
    return false;
    83f2:	2000      	movs	r0, #0
    83f4:	4770      	bx	lr
    83f6:	2000      	movs	r0, #0
    83f8:	4770      	bx	lr
            return true;
    83fa:	2001      	movs	r0, #1
}
    83fc:	4770      	bx	lr
    83fe:	bf00      	nop
    8400:	f0000fe0 	.word	0xf0000fe0
    8404:	f0000fe4 	.word	0xf0000fe4
    8408:	f0000fe8 	.word	0xf0000fe8

0000840c <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    840c:	4b0f      	ldr	r3, [pc, #60]	; (844c <errata_108+0x40>)
    840e:	781b      	ldrb	r3, [r3, #0]
    8410:	2b06      	cmp	r3, #6
    8412:	d001      	beq.n	8418 <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8414:	2000      	movs	r0, #0
    8416:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8418:	4b0d      	ldr	r3, [pc, #52]	; (8450 <errata_108+0x44>)
    841a:	681b      	ldr	r3, [r3, #0]
    841c:	f013 0f0f 	tst.w	r3, #15
    8420:	d10b      	bne.n	843a <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8422:	4b0c      	ldr	r3, [pc, #48]	; (8454 <errata_108+0x48>)
    8424:	681b      	ldr	r3, [r3, #0]
    8426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    842a:	2b30      	cmp	r3, #48	; 0x30
    842c:	d007      	beq.n	843e <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    842e:	2b40      	cmp	r3, #64	; 0x40
    8430:	d007      	beq.n	8442 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8432:	2b50      	cmp	r3, #80	; 0x50
    8434:	d007      	beq.n	8446 <errata_108+0x3a>
    return false;
    8436:	2000      	movs	r0, #0
    8438:	4770      	bx	lr
    843a:	2000      	movs	r0, #0
    843c:	4770      	bx	lr
            return true;
    843e:	2001      	movs	r0, #1
    8440:	4770      	bx	lr
            return true;
    8442:	2001      	movs	r0, #1
    8444:	4770      	bx	lr
            return true;
    8446:	2001      	movs	r0, #1
}
    8448:	4770      	bx	lr
    844a:	bf00      	nop
    844c:	f0000fe0 	.word	0xf0000fe0
    8450:	f0000fe4 	.word	0xf0000fe4
    8454:	f0000fe8 	.word	0xf0000fe8

00008458 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8458:	4b01      	ldr	r3, [pc, #4]	; (8460 <SystemCoreClockUpdate+0x8>)
    845a:	4a02      	ldr	r2, [pc, #8]	; (8464 <SystemCoreClockUpdate+0xc>)
    845c:	601a      	str	r2, [r3, #0]
}
    845e:	4770      	bx	lr
    8460:	200000e4 	.word	0x200000e4
    8464:	03d09000 	.word	0x03d09000

00008468 <SystemInit>:
{
    8468:	b508      	push	{r3, lr}
    if (errata_16()){
    846a:	f7ff feed 	bl	8248 <errata_16>
    846e:	b110      	cbz	r0, 8476 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8470:	4b65      	ldr	r3, [pc, #404]	; (8608 <SystemInit+0x1a0>)
    8472:	4a66      	ldr	r2, [pc, #408]	; (860c <SystemInit+0x1a4>)
    8474:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    8476:	f7ff ff05 	bl	8284 <errata_31>
    847a:	b128      	cbz	r0, 8488 <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    847c:	4b64      	ldr	r3, [pc, #400]	; (8610 <SystemInit+0x1a8>)
    847e:	681b      	ldr	r3, [r3, #0]
    8480:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8484:	4a63      	ldr	r2, [pc, #396]	; (8614 <SystemInit+0x1ac>)
    8486:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    8488:	f7ff ff22 	bl	82d0 <errata_32>
    848c:	b120      	cbz	r0, 8498 <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    848e:	4a62      	ldr	r2, [pc, #392]	; (8618 <SystemInit+0x1b0>)
    8490:	68d3      	ldr	r3, [r2, #12]
    8492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    8496:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    8498:	f7ff ff38 	bl	830c <errata_36>
    849c:	b140      	cbz	r0, 84b0 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    849e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    84a2:	2200      	movs	r2, #0
    84a4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    84a8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    84ac:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    84b0:	f7ff ff52 	bl	8358 <errata_37>
    84b4:	b110      	cbz	r0, 84bc <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    84b6:	4b59      	ldr	r3, [pc, #356]	; (861c <SystemInit+0x1b4>)
    84b8:	2203      	movs	r2, #3
    84ba:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    84bc:	f7ff ff6a 	bl	8394 <errata_57>
    84c0:	b158      	cbz	r0, 84da <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    84c2:	4b57      	ldr	r3, [pc, #348]	; (8620 <SystemInit+0x1b8>)
    84c4:	2205      	movs	r2, #5
    84c6:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    84c8:	3378      	adds	r3, #120	; 0x78
    84ca:	2201      	movs	r2, #1
    84cc:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    84ce:	3b70      	subs	r3, #112	; 0x70
    84d0:	2200      	movs	r2, #0
    84d2:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    84d4:	3b04      	subs	r3, #4
    84d6:	223f      	movs	r2, #63	; 0x3f
    84d8:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    84da:	f7ff ff79 	bl	83d0 <errata_66>
    84de:	2800      	cmp	r0, #0
    84e0:	d046      	beq.n	8570 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84e6:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ea:	4b4e      	ldr	r3, [pc, #312]	; (8624 <SystemInit+0x1bc>)
    84ec:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84f0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84f4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84f8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84fc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8500:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8504:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    8508:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    850c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8510:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8514:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    8518:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    851c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8520:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8524:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    8528:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    852c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8530:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8534:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    8538:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    853c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8540:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8544:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    8548:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    854c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8550:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8554:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    8558:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    855c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8560:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8564:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    8568:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    856c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8570:	f7ff ff4c 	bl	840c <errata_108>
    8574:	b128      	cbz	r0, 8582 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    8576:	4b2c      	ldr	r3, [pc, #176]	; (8628 <SystemInit+0x1c0>)
    8578:	681b      	ldr	r3, [r3, #0]
    857a:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    857e:	4a2b      	ldr	r2, [pc, #172]	; (862c <SystemInit+0x1c4>)
    8580:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8582:	4a2b      	ldr	r2, [pc, #172]	; (8630 <SystemInit+0x1c8>)
    8584:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    8588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    858c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8590:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8594:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    8598:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    859c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    85a0:	f013 0f01 	tst.w	r3, #1
    85a4:	d104      	bne.n	85b0 <SystemInit+0x148>
    SystemCoreClockUpdate();
    85a6:	f7ff ff57 	bl	8458 <SystemCoreClockUpdate>
    NVIC_Relocate();
    85aa:	f001 f989 	bl	98c0 <NVIC_Relocate>
}
    85ae:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    85b0:	4b20      	ldr	r3, [pc, #128]	; (8634 <SystemInit+0x1cc>)
    85b2:	2201      	movs	r2, #1
    85b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85b8:	4b1e      	ldr	r3, [pc, #120]	; (8634 <SystemInit+0x1cc>)
    85ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85be:	2b00      	cmp	r3, #0
    85c0:	d0fa      	beq.n	85b8 <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    85c2:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    85c6:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    85ca:	f023 0301 	bic.w	r3, r3, #1
    85ce:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85d2:	4b18      	ldr	r3, [pc, #96]	; (8634 <SystemInit+0x1cc>)
    85d4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85d8:	2b00      	cmp	r3, #0
    85da:	d0fa      	beq.n	85d2 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85dc:	4b15      	ldr	r3, [pc, #84]	; (8634 <SystemInit+0x1cc>)
    85de:	2200      	movs	r2, #0
    85e0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85e4:	4b13      	ldr	r3, [pc, #76]	; (8634 <SystemInit+0x1cc>)
    85e6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ea:	2b00      	cmp	r3, #0
    85ec:	d0fa      	beq.n	85e4 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85ee:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85f2:	490f      	ldr	r1, [pc, #60]	; (8630 <SystemInit+0x1c8>)
    85f4:	68ca      	ldr	r2, [r1, #12]
    85f6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85fa:	4b0f      	ldr	r3, [pc, #60]	; (8638 <SystemInit+0x1d0>)
    85fc:	4313      	orrs	r3, r2
    85fe:	60cb      	str	r3, [r1, #12]
    8600:	f3bf 8f4f 	dsb	sy
    __NOP();
    8604:	bf00      	nop
    8606:	e7fd      	b.n	8604 <SystemInit+0x19c>
    8608:	4007c074 	.word	0x4007c074
    860c:	baadf00d 	.word	0xbaadf00d
    8610:	10000244 	.word	0x10000244
    8614:	4000053c 	.word	0x4000053c
    8618:	e000edf0 	.word	0xe000edf0
    861c:	400005a0 	.word	0x400005a0
    8620:	40005610 	.word	0x40005610
    8624:	4000c000 	.word	0x4000c000
    8628:	10000258 	.word	0x10000258
    862c:	40000ee4 	.word	0x40000ee4
    8630:	e000ed00 	.word	0xe000ed00
    8634:	4001e000 	.word	0x4001e000
    8638:	05fa0004 	.word	0x05fa0004

0000863c <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    863c:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    863e:	4803      	ldr	r0, [pc, #12]	; (864c <_start+0x10>)
    8640:	f001 fad0 	bl	9be4 <os_init>
    os_start();
    8644:	f001 fb36 	bl	9cb4 <os_start>
#endif
}
    8648:	bd08      	pop	{r3, pc}
    864a:	bf00      	nop
    864c:	00008f49 	.word	0x00008f49

00008650 <_init>:

void
_init(void)
{
}
    8650:	4770      	bx	lr

00008652 <_ZN4core3ptr13drop_in_place17hbc0c1fc2aa8b6ff3E>:
/// i.e., you do not usually have to worry about such issues unless you call `drop_in_place`
/// manually.
#[stable(feature = "drop_in_place", since = "1.8.0")]
#[lang = "drop_in_place"]
#[allow(unconditional_recursion)]
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    8652:	b082      	sub	sp, #8
    8654:	9001      	str	r0, [sp, #4]
    8656:	b002      	add	sp, #8
    8658:	4770      	bx	lr

0000865a <_ZN4core3str21_$LT$impl$u20$str$GT$3len17he841da45b9c69883E>:
    /// assert_eq!("ƒoo".chars().count(), 3);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_str_len", since = "1.32.0")]
    #[inline]
    pub const fn len(&self) -> usize {
    865a:	b580      	push	{r7, lr}
    865c:	466f      	mov	r7, sp
    865e:	b086      	sub	sp, #24
    8660:	9000      	str	r0, [sp, #0]
    8662:	9101      	str	r1, [sp, #4]
    8664:	9004      	str	r0, [sp, #16]
    8666:	9105      	str	r1, [sp, #20]
        union Slices<'a> {
            str: &'a str,
            slice: &'a [u8],
        }
        // SAFETY: const sound because we transmute two types with the same layout
        unsafe { Slices { str: self }.slice }
    8668:	9002      	str	r0, [sp, #8]
    866a:	9103      	str	r1, [sp, #12]
    866c:	9802      	ldr	r0, [sp, #8]
    866e:	9903      	ldr	r1, [sp, #12]
        self.as_bytes().len()
    8670:	f000 fc62 	bl	8f38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha89a753dca6cd9f4E>
    }
    8674:	b006      	add	sp, #24
    8676:	bd80      	pop	{r7, pc}

00008678 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h022c0f523ccad626E>:
    /// let ptr = s.as_ptr();
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "rustc_str_as_ptr", since = "1.32.0")]
    #[inline]
    pub const fn as_ptr(&self) -> *const u8 {
    8678:	b082      	sub	sp, #8
    867a:	9000      	str	r0, [sp, #0]
    867c:	9101      	str	r1, [sp, #4]
        self as *const str as *const u8
    }
    867e:	b002      	add	sp, #8
    8680:	4770      	bx	lr

00008682 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h56061f5b534d43a3E>:
    /// x.expect("Testing expect"); // panics with `Testing expect: emergency failure`
    /// ```
    #[inline]
    #[track_caller]
    #[stable(feature = "result_expect", since = "1.4.0")]
    pub fn expect(self, msg: &str) -> T {
    8682:	b580      	push	{r7, lr}
    8684:	466f      	mov	r7, sp
    8686:	b08a      	sub	sp, #40	; 0x28
    8688:	9005      	str	r0, [sp, #20]
    868a:	9108      	str	r1, [sp, #32]
    868c:	9209      	str	r2, [sp, #36]	; 0x24
        match self {
            Ok(t) => t,
    868e:	9805      	ldr	r0, [sp, #20]
    8690:	2801      	cmp	r0, #1
    8692:	9304      	str	r3, [sp, #16]
    8694:	9203      	str	r2, [sp, #12]
    8696:	9102      	str	r1, [sp, #8]
    8698:	d00f      	beq.n	86ba <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h56061f5b534d43a3E+0x38>
    869a:	e7ff      	b.n	869c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h56061f5b534d43a3E+0x1a>
            Err(e) => unwrap_failed(msg, &e),
    869c:	9805      	ldr	r0, [sp, #20]
    869e:	9006      	str	r0, [sp, #24]
    86a0:	4668      	mov	r0, sp
    86a2:	9904      	ldr	r1, [sp, #16]
    86a4:	6001      	str	r1, [r0, #0]
    86a6:	f248 6368 	movw	r3, #34408	; 0x8668
    86aa:	f2c0 0302 	movt	r3, #2
    86ae:	aa06      	add	r2, sp, #24
    86b0:	9802      	ldr	r0, [sp, #8]
    86b2:	9903      	ldr	r1, [sp, #12]
    86b4:	f000 fc02 	bl	8ebc <_ZN4core6option18expect_none_failed17h6759d4401d28ac1fE>
    86b8:	defe      	udf	#254	; 0xfe
        }
    }
    86ba:	b00a      	add	sp, #40	; 0x28
    86bc:	bd80      	pop	{r7, pc}

000086be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    86be:	b580      	push	{r7, lr}
    86c0:	466f      	mov	r7, sp
    86c2:	b08a      	sub	sp, #40	; 0x28
    86c4:	9004      	str	r0, [sp, #16]
    86c6:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    86c8:	9003      	str	r0, [sp, #12]
    86ca:	9102      	str	r1, [sp, #8]
    86cc:	f7ff ffd4 	bl	8678 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h022c0f523ccad626E>
    86d0:	9006      	str	r0, [sp, #24]
    let len = msg.len() as u32;
    86d2:	9903      	ldr	r1, [sp, #12]
    86d4:	9001      	str	r0, [sp, #4]
    86d6:	4608      	mov	r0, r1
    86d8:	9902      	ldr	r1, [sp, #8]
    86da:	f7ff ffbe 	bl	865a <_ZN4core3str21_$LT$impl$u20$str$GT$3len17he841da45b9c69883E>
    86de:	9007      	str	r0, [sp, #28]
    86e0:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    86e2:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    86e4:	9000      	str	r0, [sp, #0]
    86e6:	4608      	mov	r0, r1
    86e8:	f000 f807 	bl	86fa <_ZN6mynewt3sys7console20get_dispatch_address17h77ed9d6357c846ceE>
    86ec:	9009      	str	r0, [sp, #36]	; 0x24
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    86ee:	9801      	ldr	r0, [sp, #4]
    86f0:	9900      	ldr	r1, [sp, #0]
    86f2:	f000 fd8b 	bl	920c <console_buffer>
}
    86f6:	b00a      	add	sp, #40	; 0x28
    86f8:	bd80      	pop	{r7, pc}

000086fa <_ZN6mynewt3sys7console20get_dispatch_address17h77ed9d6357c846ceE>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    86fa:	b081      	sub	sp, #4
    86fc:	9000      	str	r0, [sp, #0]
    86fe:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    8700:	b001      	add	sp, #4
    8702:	4770      	bx	lr

00008704 <_ZN6mynewt3sys7console6buffer17h35108561f938a421E>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    8704:	b580      	push	{r7, lr}
    8706:	466f      	mov	r7, sp
    8708:	b086      	sub	sp, #24
    870a:	9004      	str	r0, [sp, #16]
    870c:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    870e:	9003      	str	r0, [sp, #12]
    8710:	9102      	str	r1, [sp, #8]
    8712:	f7ff ffb1 	bl	8678 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h022c0f523ccad626E>
    8716:	9903      	ldr	r1, [sp, #12]
    8718:	9001      	str	r0, [sp, #4]
    871a:	4608      	mov	r0, r1
    871c:	9902      	ldr	r1, [sp, #8]
    871e:	f7ff ff9c 	bl	865a <_ZN4core3str21_$LT$impl$u20$str$GT$3len17he841da45b9c69883E>
    8722:	9901      	ldr	r1, [sp, #4]
    8724:	9000      	str	r0, [sp, #0]
    8726:	4608      	mov	r0, r1
    8728:	9900      	ldr	r1, [sp, #0]
    872a:	f000 fd6f 	bl	920c <console_buffer>
}
    872e:	b006      	add	sp, #24
    8730:	bd80      	pop	{r7, pc}

00008732 <_ZN6mynewt3sys7console8printint17hbf799f23e9896db3E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    8732:	b580      	push	{r7, lr}
    8734:	466f      	mov	r7, sp
    8736:	b082      	sub	sp, #8
    8738:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    873a:	f000 fd73 	bl	9224 <console_printint>
}
    873e:	b002      	add	sp, #8
    8740:	bd80      	pop	{r7, pc}

00008742 <_ZN6mynewt3sys7console5flush17h8491f76cc7401f62E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    8742:	b580      	push	{r7, lr}
    8744:	466f      	mov	r7, sp
    unsafe { console_flush(); }
    8746:	f000 fd3f 	bl	91c8 <console_flush>
}
    874a:	bd80      	pop	{r7, pc}

0000874c <_ZN6mynewt7sysinit17h1b1620554f4add73E>:
pub use hal::{ Delay, GPIO, SPI, I2C };  //  Export `hal` types GPIO, SPI and I2C

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    874c:	b580      	push	{r7, lr}
    874e:	466f      	mov	r7, sp
    unsafe { rust_sysinit(); }
    8750:	f003 fc9a 	bl	c088 <rust_sysinit>
    sys::console::flush();
    8754:	f7ff fff5 	bl	8742 <_ZN6mynewt3sys7console5flush17h8491f76cc7401f62E>
}
    8758:	bd80      	pop	{r7, pc}

0000875a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h331d487878438b91E>:
        }
    }

    /// Implement formatted output for MynewtError
    impl core::fmt::Debug for MynewtError {
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    875a:	b082      	sub	sp, #8
    875c:	9000      	str	r0, [sp, #0]
    875e:	9101      	str	r1, [sp, #4]
    8760:	2000      	movs	r0, #0
            //  TODO
            Ok(())
        }
    8762:	b002      	add	sp, #8
    8764:	4770      	bx	lr

00008766 <_ZN6mynewt6kernel2os10eventq_run17h315affb69d21582dE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8766:	b580      	push	{r7, lr}
    8768:	466f      	mov	r7, sp
    876a:	b082      	sub	sp, #8
    876c:	9001      	str	r0, [sp, #4]
    876e:	f001 fcf5 	bl	a15c <os_eventq_run>
    8772:	2001      	movs	r0, #1
    8774:	b002      	add	sp, #8
    8776:	bd80      	pop	{r7, pc}

00008778 <_ZN6mynewt6kernel2os15eventq_dflt_get17hee2ec5f38871c7e2E>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8778:	b580      	push	{r7, lr}
    877a:	466f      	mov	r7, sp
    877c:	b082      	sub	sp, #8
    877e:	9000      	str	r0, [sp, #0]
    8780:	f001 fd1e 	bl	a1c0 <os_eventq_dflt_get>
    8784:	9001      	str	r0, [sp, #4]
    8786:	9900      	ldr	r1, [sp, #0]
    8788:	6048      	str	r0, [r1, #4]
    878a:	2000      	movs	r0, #0
    878c:	6008      	str	r0, [r1, #0]
    878e:	b002      	add	sp, #8
    8790:	bd80      	pop	{r7, pc}

00008792 <_ZN4core9panicking5panic17h692a68e116a8c946E>:
    8792:	b580      	push	{r7, lr}
    8794:	466f      	mov	r7, sp
    8796:	b088      	sub	sp, #32
    8798:	9006      	str	r0, [sp, #24]
    879a:	9107      	str	r1, [sp, #28]
    879c:	a806      	add	r0, sp, #24
    879e:	9000      	str	r0, [sp, #0]
    87a0:	2001      	movs	r0, #1
    87a2:	9001      	str	r0, [sp, #4]
    87a4:	2000      	movs	r0, #0
    87a6:	9002      	str	r0, [sp, #8]
    87a8:	9003      	str	r0, [sp, #12]
    87aa:	f248 6178 	movw	r1, #34424	; 0x8678
    87ae:	f2c0 0102 	movt	r1, #2
    87b2:	9104      	str	r1, [sp, #16]
    87b4:	9005      	str	r0, [sp, #20]
    87b6:	4668      	mov	r0, sp
    87b8:	4611      	mov	r1, r2
    87ba:	f000 f801 	bl	87c0 <_ZN4core9panicking9panic_fmt17h1abf46b1849e1e64E>
    87be:	defe      	udf	#254	; 0xfe

000087c0 <_ZN4core9panicking9panic_fmt17h1abf46b1849e1e64E>:
    87c0:	b580      	push	{r7, lr}
    87c2:	466f      	mov	r7, sp
    87c4:	b084      	sub	sp, #16
    87c6:	f248 6278 	movw	r2, #34424	; 0x8678
    87ca:	f2c0 0202 	movt	r2, #2
    87ce:	9200      	str	r2, [sp, #0]
    87d0:	f248 6278 	movw	r2, #34424	; 0x8678
    87d4:	f2c0 0202 	movt	r2, #2
    87d8:	9201      	str	r2, [sp, #4]
    87da:	9002      	str	r0, [sp, #8]
    87dc:	9103      	str	r1, [sp, #12]
    87de:	4668      	mov	r0, sp
    87e0:	f000 fc17 	bl	9012 <rust_begin_unwind>
    87e4:	defe      	udf	#254	; 0xfe

000087e6 <_ZN4core3ptr13drop_in_place17h00770497a4e91b46E>:
    87e6:	4770      	bx	lr

000087e8 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17hed9a745734db4e1eE>:
    87e8:	f646 7073 	movw	r0, #28531	; 0x6f73
    87ec:	f2ce 50c7 	movt	r0, #58823	; 0xe5c7
    87f0:	f24b 313d 	movw	r1, #45885	; 0xb33d
    87f4:	f2ca 711d 	movt	r1, #42781	; 0xa71d
    87f8:	4770      	bx	lr
	...

000087fc <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E>:
    87fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    87fe:	af03      	add	r7, sp, #12
    8800:	f84d 8d04 	str.w	r8, [sp, #-4]!
    8804:	b0e4      	sub	sp, #400	; 0x190
    8806:	6883      	ldr	r3, [r0, #8]
    8808:	f8d0 c010 	ldr.w	ip, [r0, #16]
    880c:	f1a3 0e01 	sub.w	lr, r3, #1
    8810:	fabe fe8e 	clz	lr, lr
    8814:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
    8818:	f1ac 0c01 	sub.w	ip, ip, #1
    881c:	fabc fc8c 	clz	ip, ip
    8820:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    8824:	2b01      	cmp	r3, #1
    8826:	9263      	str	r2, [sp, #396]	; 0x18c
    8828:	9162      	str	r1, [sp, #392]	; 0x188
    882a:	9061      	str	r0, [sp, #388]	; 0x184
    882c:	f8cd e180 	str.w	lr, [sp, #384]	; 0x180
    8830:	f8cd c17c 	str.w	ip, [sp, #380]	; 0x17c
    8834:	d005      	beq.n	8842 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x46>
    8836:	e7ff      	b.n	8838 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3c>
    8838:	985f      	ldr	r0, [sp, #380]	; 0x17c
    883a:	07c1      	lsls	r1, r0, #31
    883c:	2900      	cmp	r1, #0
    883e:	d11e      	bne.n	887e <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x82>
    8840:	e008      	b.n	8854 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x58>
    8842:	985f      	ldr	r0, [sp, #380]	; 0x17c
    8844:	07c1      	lsls	r1, r0, #31
    8846:	2900      	cmp	r1, #0
    8848:	9963      	ldr	r1, [sp, #396]	; 0x18c
    884a:	9a62      	ldr	r2, [sp, #392]	; 0x188
    884c:	915e      	str	r1, [sp, #376]	; 0x178
    884e:	925d      	str	r2, [sp, #372]	; 0x174
    8850:	d115      	bne.n	887e <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x82>
    8852:	e14c      	b.n	8aee <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2f2>
    8854:	9861      	ldr	r0, [sp, #388]	; 0x184
    8856:	6980      	ldr	r0, [r0, #24]
    8858:	9961      	ldr	r1, [sp, #388]	; 0x184
    885a:	69ca      	ldr	r2, [r1, #28]
    885c:	68d2      	ldr	r2, [r2, #12]
    885e:	9962      	ldr	r1, [sp, #392]	; 0x188
    8860:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    8862:	925c      	str	r2, [sp, #368]	; 0x170
    8864:	461a      	mov	r2, r3
    8866:	f8dd c170 	ldr.w	ip, [sp, #368]	; 0x170
    886a:	47e0      	blx	ip
    886c:	905b      	str	r0, [sp, #364]	; 0x16c
    886e:	e7ff      	b.n	8870 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x74>
    8870:	985b      	ldr	r0, [sp, #364]	; 0x16c
    8872:	f000 0001 	and.w	r0, r0, #1
    8876:	b064      	add	sp, #400	; 0x190
    8878:	f85d 8b04 	ldr.w	r8, [sp], #4
    887c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    887e:	9862      	ldr	r0, [sp, #392]	; 0x188
    8880:	9962      	ldr	r1, [sp, #392]	; 0x188
    8882:	9a63      	ldr	r2, [sp, #396]	; 0x18c
    8884:	188b      	adds	r3, r1, r2
    8886:	f04f 0c00 	mov.w	ip, #0
    888a:	2a00      	cmp	r2, #0
    888c:	905a      	str	r0, [sp, #360]	; 0x168
    888e:	9359      	str	r3, [sp, #356]	; 0x164
    8890:	9158      	str	r1, [sp, #352]	; 0x160
    8892:	f8cd c15c 	str.w	ip, [sp, #348]	; 0x15c
    8896:	f000 810e 	beq.w	8ab6 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2ba>
    889a:	e7ff      	b.n	889c <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0xa0>
    889c:	9862      	ldr	r0, [sp, #392]	; 0x188
    889e:	9961      	ldr	r1, [sp, #388]	; 0x184
    88a0:	694a      	ldr	r2, [r1, #20]
    88a2:	2300      	movs	r3, #0
    88a4:	f8dd c168 	ldr.w	ip, [sp, #360]	; 0x168
    88a8:	9356      	str	r3, [sp, #344]	; 0x158
    88aa:	f8cd c154 	str.w	ip, [sp, #340]	; 0x154
    88ae:	9054      	str	r0, [sp, #336]	; 0x150
    88b0:	9253      	str	r2, [sp, #332]	; 0x14c
    88b2:	e019      	b.n	88e8 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0xec>
    88b4:	9852      	ldr	r0, [sp, #328]	; 0x148
    88b6:	9951      	ldr	r1, [sp, #324]	; 0x144
    88b8:	1a42      	subs	r2, r0, r1
    88ba:	9b50      	ldr	r3, [sp, #320]	; 0x140
    88bc:	441a      	add	r2, r3
    88be:	f8dd c13c 	ldr.w	ip, [sp, #316]	; 0x13c
    88c2:	f1ac 0e01 	sub.w	lr, ip, #1
    88c6:	9c59      	ldr	r4, [sp, #356]	; 0x164
    88c8:	9d50      	ldr	r5, [sp, #320]	; 0x140
    88ca:	42ac      	cmp	r4, r5
    88cc:	9e62      	ldr	r6, [sp, #392]	; 0x188
    88ce:	f8dd 818c 	ldr.w	r8, [sp, #396]	; 0x18c
    88d2:	9256      	str	r2, [sp, #344]	; 0x158
    88d4:	9355      	str	r3, [sp, #340]	; 0x154
    88d6:	9554      	str	r5, [sp, #336]	; 0x150
    88d8:	f8cd e14c 	str.w	lr, [sp, #332]	; 0x14c
    88dc:	9658      	str	r6, [sp, #352]	; 0x160
    88de:	f8cd 815c 	str.w	r8, [sp, #348]	; 0x15c
    88e2:	f000 80e8 	beq.w	8ab6 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2ba>
    88e6:	e7ff      	b.n	88e8 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0xec>
    88e8:	9853      	ldr	r0, [sp, #332]	; 0x14c
    88ea:	9954      	ldr	r1, [sp, #336]	; 0x150
    88ec:	9a55      	ldr	r2, [sp, #340]	; 0x154
    88ee:	9b56      	ldr	r3, [sp, #344]	; 0x158
    88f0:	4694      	mov	ip, r2
    88f2:	f91c eb01 	ldrsb.w	lr, [ip], #1
    88f6:	4664      	mov	r4, ip
    88f8:	fa5f f58e 	uxtb.w	r5, lr
    88fc:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
    8900:	904f      	str	r0, [sp, #316]	; 0x13c
    8902:	9151      	str	r1, [sp, #324]	; 0x144
    8904:	924e      	str	r2, [sp, #312]	; 0x138
    8906:	9352      	str	r3, [sp, #328]	; 0x148
    8908:	f8cd c134 	str.w	ip, [sp, #308]	; 0x134
    890c:	944c      	str	r4, [sp, #304]	; 0x130
    890e:	954b      	str	r5, [sp, #300]	; 0x12c
    8910:	dc33      	bgt.n	897a <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x17e>
    8912:	e7ff      	b.n	8914 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x118>
    8914:	984b      	ldr	r0, [sp, #300]	; 0x12c
    8916:	f000 011f 	and.w	r1, r0, #31
    891a:	2200      	movs	r2, #0
    891c:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    891e:	f8dd c164 	ldr.w	ip, [sp, #356]	; 0x164
    8922:	4563      	cmp	r3, ip
    8924:	f8dd e134 	ldr.w	lr, [sp, #308]	; 0x134
    8928:	914a      	str	r1, [sp, #296]	; 0x128
    892a:	f8cd e124 	str.w	lr, [sp, #292]	; 0x124
    892e:	f8cd c120 	str.w	ip, [sp, #288]	; 0x120
    8932:	9247      	str	r2, [sp, #284]	; 0x11c
    8934:	d00d      	beq.n	8952 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x156>
    8936:	e7ff      	b.n	8938 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x13c>
    8938:	984e      	ldr	r0, [sp, #312]	; 0x138
    893a:	1c81      	adds	r1, r0, #2
    893c:	460a      	mov	r2, r1
    893e:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    8940:	f893 c000 	ldrb.w	ip, [r3]
    8944:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    8948:	9149      	str	r1, [sp, #292]	; 0x124
    894a:	9248      	str	r2, [sp, #288]	; 0x120
    894c:	f8cd c11c 	str.w	ip, [sp, #284]	; 0x11c
    8950:	e7ff      	b.n	8952 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x156>
    8952:	9847      	ldr	r0, [sp, #284]	; 0x11c
    8954:	9948      	ldr	r1, [sp, #288]	; 0x120
    8956:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8958:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    895a:	ea40 1c83 	orr.w	ip, r0, r3, lsl #6
    895e:	f8dd e12c 	ldr.w	lr, [sp, #300]	; 0x12c
    8962:	fa5f f48e 	uxtb.w	r4, lr
    8966:	2cdf      	cmp	r4, #223	; 0xdf
    8968:	4614      	mov	r4, r2
    896a:	9046      	str	r0, [sp, #280]	; 0x118
    896c:	9145      	str	r1, [sp, #276]	; 0x114
    896e:	9244      	str	r2, [sp, #272]	; 0x110
    8970:	9443      	str	r4, [sp, #268]	; 0x10c
    8972:	f8cd c108 	str.w	ip, [sp, #264]	; 0x108
    8976:	d806      	bhi.n	8986 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x18a>
    8978:	e05a      	b.n	8a30 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x234>
    897a:	984b      	ldr	r0, [sp, #300]	; 0x12c
    897c:	b2c1      	uxtb	r1, r0
    897e:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    8980:	9243      	str	r2, [sp, #268]	; 0x10c
    8982:	9142      	str	r1, [sp, #264]	; 0x108
    8984:	e054      	b.n	8a30 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x234>
    8986:	2000      	movs	r0, #0
    8988:	9945      	ldr	r1, [sp, #276]	; 0x114
    898a:	9a59      	ldr	r2, [sp, #356]	; 0x164
    898c:	4291      	cmp	r1, r2
    898e:	9b44      	ldr	r3, [sp, #272]	; 0x110
    8990:	9341      	str	r3, [sp, #260]	; 0x104
    8992:	9240      	str	r2, [sp, #256]	; 0x100
    8994:	903f      	str	r0, [sp, #252]	; 0xfc
    8996:	d00a      	beq.n	89ae <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x1b2>
    8998:	e7ff      	b.n	899a <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x19e>
    899a:	9845      	ldr	r0, [sp, #276]	; 0x114
    899c:	f810 1b01 	ldrb.w	r1, [r0], #1
    89a0:	4602      	mov	r2, r0
    89a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    89a6:	9041      	str	r0, [sp, #260]	; 0x104
    89a8:	9240      	str	r2, [sp, #256]	; 0x100
    89aa:	913f      	str	r1, [sp, #252]	; 0xfc
    89ac:	e7ff      	b.n	89ae <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x1b2>
    89ae:	983f      	ldr	r0, [sp, #252]	; 0xfc
    89b0:	9940      	ldr	r1, [sp, #256]	; 0x100
    89b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
    89b4:	9b46      	ldr	r3, [sp, #280]	; 0x118
    89b6:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
    89ba:	4684      	mov	ip, r0
    89bc:	f8dd e128 	ldr.w	lr, [sp, #296]	; 0x128
    89c0:	ea40 300e 	orr.w	r0, r0, lr, lsl #12
    89c4:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
    89c6:	b2e5      	uxtb	r5, r4
    89c8:	2df0      	cmp	r5, #240	; 0xf0
    89ca:	4615      	mov	r5, r2
    89cc:	913e      	str	r1, [sp, #248]	; 0xf8
    89ce:	923d      	str	r2, [sp, #244]	; 0xf4
    89d0:	f8cd c0f0 	str.w	ip, [sp, #240]	; 0xf0
    89d4:	9543      	str	r5, [sp, #268]	; 0x10c
    89d6:	9042      	str	r0, [sp, #264]	; 0x108
    89d8:	d32a      	bcc.n	8a30 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x234>
    89da:	e7ff      	b.n	89dc <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x1e0>
    89dc:	2000      	movs	r0, #0
    89de:	993e      	ldr	r1, [sp, #248]	; 0xf8
    89e0:	9a59      	ldr	r2, [sp, #356]	; 0x164
    89e2:	4291      	cmp	r1, r2
    89e4:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    89e6:	933b      	str	r3, [sp, #236]	; 0xec
    89e8:	903a      	str	r0, [sp, #232]	; 0xe8
    89ea:	d008      	beq.n	89fe <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x202>
    89ec:	e7ff      	b.n	89ee <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x1f2>
    89ee:	983e      	ldr	r0, [sp, #248]	; 0xf8
    89f0:	f810 1b01 	ldrb.w	r1, [r0], #1
    89f4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    89f8:	903b      	str	r0, [sp, #236]	; 0xec
    89fa:	913a      	str	r1, [sp, #232]	; 0xe8
    89fc:	e7ff      	b.n	89fe <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x202>
    89fe:	983a      	ldr	r0, [sp, #232]	; 0xe8
    8a00:	993b      	ldr	r1, [sp, #236]	; 0xec
    8a02:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
    8a06:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8a08:	ea02 4283 	and.w	r2, r2, r3, lsl #18
    8a0c:	f8dd c0f0 	ldr.w	ip, [sp, #240]	; 0xf0
    8a10:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
    8a14:	4310      	orrs	r0, r2
    8a16:	4602      	mov	r2, r0
    8a18:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
    8a1c:	9862      	ldr	r0, [sp, #392]	; 0x188
    8a1e:	f8dd e18c 	ldr.w	lr, [sp, #396]	; 0x18c
    8a22:	9143      	str	r1, [sp, #268]	; 0x10c
    8a24:	9242      	str	r2, [sp, #264]	; 0x108
    8a26:	9058      	str	r0, [sp, #352]	; 0x160
    8a28:	f8cd e15c 	str.w	lr, [sp, #348]	; 0x15c
    8a2c:	d043      	beq.n	8ab6 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2ba>
    8a2e:	e7ff      	b.n	8a30 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x234>
    8a30:	9842      	ldr	r0, [sp, #264]	; 0x108
    8a32:	9943      	ldr	r1, [sp, #268]	; 0x10c
    8a34:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    8a36:	2a00      	cmp	r2, #0
    8a38:	9039      	str	r0, [sp, #228]	; 0xe4
    8a3a:	9150      	str	r1, [sp, #320]	; 0x140
    8a3c:	f47f af3a 	bne.w	88b4 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0xb8>
    8a40:	e7ff      	b.n	8a42 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x246>
    8a42:	9839      	ldr	r0, [sp, #228]	; 0xe4
    8a44:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
    8a48:	9962      	ldr	r1, [sp, #392]	; 0x188
    8a4a:	9a63      	ldr	r2, [sp, #396]	; 0x18c
    8a4c:	9158      	str	r1, [sp, #352]	; 0x160
    8a4e:	9257      	str	r2, [sp, #348]	; 0x15c
    8a50:	d031      	beq.n	8ab6 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2ba>
    8a52:	e7ff      	b.n	8a54 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x258>
    8a54:	9852      	ldr	r0, [sp, #328]	; 0x148
    8a56:	2800      	cmp	r0, #0
    8a58:	d01a      	beq.n	8a90 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x294>
    8a5a:	e7ff      	b.n	8a5c <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x260>
    8a5c:	9852      	ldr	r0, [sp, #328]	; 0x148
    8a5e:	9963      	ldr	r1, [sp, #396]	; 0x18c
    8a60:	4288      	cmp	r0, r1
    8a62:	d015      	beq.n	8a90 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x294>
    8a64:	e7ff      	b.n	8a66 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x26a>
    8a66:	2000      	movs	r0, #0
    8a68:	4601      	mov	r1, r0
    8a6a:	9a52      	ldr	r2, [sp, #328]	; 0x148
    8a6c:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    8a6e:	429a      	cmp	r2, r3
    8a70:	9038      	str	r0, [sp, #224]	; 0xe0
    8a72:	9137      	str	r1, [sp, #220]	; 0xdc
    8a74:	d211      	bcs.n	8a9a <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x29e>
    8a76:	e7ff      	b.n	8a78 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x27c>
    8a78:	9862      	ldr	r0, [sp, #392]	; 0x188
    8a7a:	9952      	ldr	r1, [sp, #328]	; 0x148
    8a7c:	5642      	ldrsb	r2, [r0, r1]
    8a7e:	2300      	movs	r3, #0
    8a80:	469c      	mov	ip, r3
    8a82:	f112 0f40 	cmn.w	r2, #64	; 0x40
    8a86:	9338      	str	r3, [sp, #224]	; 0xe0
    8a88:	f8cd c0dc 	str.w	ip, [sp, #220]	; 0xdc
    8a8c:	db05      	blt.n	8a9a <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x29e>
    8a8e:	e7ff      	b.n	8a90 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x294>
    8a90:	985a      	ldr	r0, [sp, #360]	; 0x168
    8a92:	9952      	ldr	r1, [sp, #328]	; 0x148
    8a94:	9038      	str	r0, [sp, #224]	; 0xe0
    8a96:	9137      	str	r1, [sp, #220]	; 0xdc
    8a98:	e7ff      	b.n	8a9a <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x29e>
    8a9a:	9837      	ldr	r0, [sp, #220]	; 0xdc
    8a9c:	9938      	ldr	r1, [sp, #224]	; 0xe0
    8a9e:	2900      	cmp	r1, #0
    8aa0:	460a      	mov	r2, r1
    8aa2:	9b62      	ldr	r3, [sp, #392]	; 0x188
    8aa4:	bf08      	it	eq
    8aa6:	461a      	moveq	r2, r3
    8aa8:	2900      	cmp	r1, #0
    8aaa:	9963      	ldr	r1, [sp, #396]	; 0x18c
    8aac:	bf08      	it	eq
    8aae:	4608      	moveq	r0, r1
    8ab0:	9258      	str	r2, [sp, #352]	; 0x160
    8ab2:	9057      	str	r0, [sp, #348]	; 0x15c
    8ab4:	e7ff      	b.n	8ab6 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2ba>
    8ab6:	9857      	ldr	r0, [sp, #348]	; 0x15c
    8ab8:	9958      	ldr	r1, [sp, #352]	; 0x160
    8aba:	9a60      	ldr	r2, [sp, #384]	; 0x180
    8abc:	07d3      	lsls	r3, r2, #31
    8abe:	2b00      	cmp	r3, #0
    8ac0:	4603      	mov	r3, r0
    8ac2:	468c      	mov	ip, r1
    8ac4:	9036      	str	r0, [sp, #216]	; 0xd8
    8ac6:	9135      	str	r1, [sp, #212]	; 0xd4
    8ac8:	935e      	str	r3, [sp, #376]	; 0x178
    8aca:	f8cd c174 	str.w	ip, [sp, #372]	; 0x174
    8ace:	d10e      	bne.n	8aee <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2f2>
    8ad0:	e7ff      	b.n	8ad2 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2d6>
    8ad2:	9861      	ldr	r0, [sp, #388]	; 0x184
    8ad4:	6980      	ldr	r0, [r0, #24]
    8ad6:	9961      	ldr	r1, [sp, #388]	; 0x184
    8ad8:	69ca      	ldr	r2, [r1, #28]
    8ada:	68d2      	ldr	r2, [r2, #12]
    8adc:	9935      	ldr	r1, [sp, #212]	; 0xd4
    8ade:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    8ae0:	9234      	str	r2, [sp, #208]	; 0xd0
    8ae2:	461a      	mov	r2, r3
    8ae4:	f8dd c0d0 	ldr.w	ip, [sp, #208]	; 0xd0
    8ae8:	47e0      	blx	ip
    8aea:	905b      	str	r0, [sp, #364]	; 0x16c
    8aec:	e6c0      	b.n	8870 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x74>
    8aee:	985d      	ldr	r0, [sp, #372]	; 0x174
    8af0:	995e      	ldr	r1, [sp, #376]	; 0x178
    8af2:	9a61      	ldr	r2, [sp, #388]	; 0x184
    8af4:	f102 030c 	add.w	r3, r2, #12
    8af8:	4684      	mov	ip, r0
    8afa:	fab1 fe81 	clz	lr, r1
    8afe:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
    8b02:	2400      	movs	r4, #0
    8b04:	2900      	cmp	r1, #0
    8b06:	9033      	str	r0, [sp, #204]	; 0xcc
    8b08:	9132      	str	r1, [sp, #200]	; 0xc8
    8b0a:	9331      	str	r3, [sp, #196]	; 0xc4
    8b0c:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
    8b10:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
    8b14:	942e      	str	r4, [sp, #184]	; 0xb8
    8b16:	d06c      	beq.n	8bf2 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3f6>
    8b18:	e7ff      	b.n	8b1a <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x31e>
    8b1a:	9832      	ldr	r0, [sp, #200]	; 0xc8
    8b1c:	1e41      	subs	r1, r0, #1
    8b1e:	f000 0203 	and.w	r2, r0, #3
    8b22:	2300      	movs	r3, #0
    8b24:	2903      	cmp	r1, #3
    8b26:	f8dd c0c0 	ldr.w	ip, [sp, #192]	; 0xc0
    8b2a:	922d      	str	r2, [sp, #180]	; 0xb4
    8b2c:	912c      	str	r1, [sp, #176]	; 0xb0
    8b2e:	932b      	str	r3, [sp, #172]	; 0xac
    8b30:	f8cd c0a8 	str.w	ip, [sp, #168]	; 0xa8
    8b34:	d342      	bcc.n	8bbc <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3c0>
    8b36:	e7ff      	b.n	8b38 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x33c>
    8b38:	9832      	ldr	r0, [sp, #200]	; 0xc8
    8b3a:	992d      	ldr	r1, [sp, #180]	; 0xb4
    8b3c:	1a42      	subs	r2, r0, r1
    8b3e:	2300      	movs	r3, #0
    8b40:	f8dd c0c0 	ldr.w	ip, [sp, #192]	; 0xc0
    8b44:	9329      	str	r3, [sp, #164]	; 0xa4
    8b46:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
    8b4a:	9227      	str	r2, [sp, #156]	; 0x9c
    8b4c:	e7ff      	b.n	8b4e <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x352>
    8b4e:	9827      	ldr	r0, [sp, #156]	; 0x9c
    8b50:	9928      	ldr	r1, [sp, #160]	; 0xa0
    8b52:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    8b54:	780b      	ldrb	r3, [r1, #0]
    8b56:	f891 c001 	ldrb.w	ip, [r1, #1]
    8b5a:	f891 e002 	ldrb.w	lr, [r1, #2]
    8b5e:	78cc      	ldrb	r4, [r1, #3]
    8b60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8b64:	1c55      	adds	r5, r2, #1
    8b66:	2b80      	cmp	r3, #128	; 0x80
    8b68:	bf08      	it	eq
    8b6a:	462a      	moveq	r2, r5
    8b6c:	f00c 03c0 	and.w	r3, ip, #192	; 0xc0
    8b70:	f102 0c01 	add.w	ip, r2, #1
    8b74:	2b80      	cmp	r3, #128	; 0x80
    8b76:	bf08      	it	eq
    8b78:	4662      	moveq	r2, ip
    8b7a:	f00e 03c0 	and.w	r3, lr, #192	; 0xc0
    8b7e:	f102 0c01 	add.w	ip, r2, #1
    8b82:	2b80      	cmp	r3, #128	; 0x80
    8b84:	bf08      	it	eq
    8b86:	4662      	moveq	r2, ip
    8b88:	f101 0104 	add.w	r1, r1, #4
    8b8c:	f004 03c0 	and.w	r3, r4, #192	; 0xc0
    8b90:	f102 0c01 	add.w	ip, r2, #1
    8b94:	2b80      	cmp	r3, #128	; 0x80
    8b96:	bf08      	it	eq
    8b98:	4662      	moveq	r2, ip
    8b9a:	f1a0 0004 	sub.w	r0, r0, #4
    8b9e:	4603      	mov	r3, r0
    8ba0:	2800      	cmp	r0, #0
    8ba2:	4610      	mov	r0, r2
    8ba4:	468c      	mov	ip, r1
    8ba6:	4696      	mov	lr, r2
    8ba8:	9327      	str	r3, [sp, #156]	; 0x9c
    8baa:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
    8bae:	9029      	str	r0, [sp, #164]	; 0xa4
    8bb0:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
    8bb4:	922b      	str	r2, [sp, #172]	; 0xac
    8bb6:	912a      	str	r1, [sp, #168]	; 0xa8
    8bb8:	d1c9      	bne.n	8b4e <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x352>
    8bba:	e7ff      	b.n	8bbc <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3c0>
    8bbc:	982a      	ldr	r0, [sp, #168]	; 0xa8
    8bbe:	992b      	ldr	r1, [sp, #172]	; 0xac
    8bc0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    8bc2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    8bc4:	2b00      	cmp	r3, #0
    8bc6:	9026      	str	r0, [sp, #152]	; 0x98
    8bc8:	9125      	str	r1, [sp, #148]	; 0x94
    8bca:	922e      	str	r2, [sp, #184]	; 0xb8
    8bcc:	d011      	beq.n	8bf2 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3f6>
    8bce:	e7ff      	b.n	8bd0 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3d4>
    8bd0:	9826      	ldr	r0, [sp, #152]	; 0x98
    8bd2:	7801      	ldrb	r1, [r0, #0]
    8bd4:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8bd8:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8bda:	1c53      	adds	r3, r2, #1
    8bdc:	2980      	cmp	r1, #128	; 0x80
    8bde:	bf08      	it	eq
    8be0:	461a      	moveq	r2, r3
    8be2:	992d      	ldr	r1, [sp, #180]	; 0xb4
    8be4:	2901      	cmp	r1, #1
    8be6:	4613      	mov	r3, r2
    8be8:	9224      	str	r2, [sp, #144]	; 0x90
    8bea:	932e      	str	r3, [sp, #184]	; 0xb8
    8bec:	f040 8140 	bne.w	8e70 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x674>
    8bf0:	e7ff      	b.n	8bf2 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3f6>
    8bf2:	982e      	ldr	r0, [sp, #184]	; 0xb8
    8bf4:	9932      	ldr	r1, [sp, #200]	; 0xc8
    8bf6:	1a08      	subs	r0, r1, r0
    8bf8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    8bfa:	6813      	ldr	r3, [r2, #0]
    8bfc:	4298      	cmp	r0, r3
    8bfe:	9323      	str	r3, [sp, #140]	; 0x8c
    8c00:	d30e      	bcc.n	8c20 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x424>
    8c02:	e7ff      	b.n	8c04 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x408>
    8c04:	9861      	ldr	r0, [sp, #388]	; 0x184
    8c06:	6980      	ldr	r0, [r0, #24]
    8c08:	9961      	ldr	r1, [sp, #388]	; 0x184
    8c0a:	69ca      	ldr	r2, [r1, #28]
    8c0c:	68d2      	ldr	r2, [r2, #12]
    8c0e:	9933      	ldr	r1, [sp, #204]	; 0xcc
    8c10:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    8c12:	9222      	str	r2, [sp, #136]	; 0x88
    8c14:	461a      	mov	r2, r3
    8c16:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
    8c1a:	47e0      	blx	ip
    8c1c:	905b      	str	r0, [sp, #364]	; 0x16c
    8c1e:	e627      	b.n	8870 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x74>
    8c20:	2000      	movs	r0, #0
    8c22:	992f      	ldr	r1, [sp, #188]	; 0xbc
    8c24:	07ca      	lsls	r2, r1, #31
    8c26:	2a00      	cmp	r2, #0
    8c28:	9021      	str	r0, [sp, #132]	; 0x84
    8c2a:	d16c      	bne.n	8d06 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x50a>
    8c2c:	e7ff      	b.n	8c2e <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x432>
    8c2e:	9832      	ldr	r0, [sp, #200]	; 0xc8
    8c30:	1e41      	subs	r1, r0, #1
    8c32:	f000 0203 	and.w	r2, r0, #3
    8c36:	2300      	movs	r3, #0
    8c38:	2903      	cmp	r1, #3
    8c3a:	f8dd c0c0 	ldr.w	ip, [sp, #192]	; 0xc0
    8c3e:	9220      	str	r2, [sp, #128]	; 0x80
    8c40:	911f      	str	r1, [sp, #124]	; 0x7c
    8c42:	931e      	str	r3, [sp, #120]	; 0x78
    8c44:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
    8c48:	d342      	bcc.n	8cd0 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x4d4>
    8c4a:	e7ff      	b.n	8c4c <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x450>
    8c4c:	9832      	ldr	r0, [sp, #200]	; 0xc8
    8c4e:	9920      	ldr	r1, [sp, #128]	; 0x80
    8c50:	1a42      	subs	r2, r0, r1
    8c52:	2300      	movs	r3, #0
    8c54:	f8dd c0c0 	ldr.w	ip, [sp, #192]	; 0xc0
    8c58:	931c      	str	r3, [sp, #112]	; 0x70
    8c5a:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
    8c5e:	921a      	str	r2, [sp, #104]	; 0x68
    8c60:	e7ff      	b.n	8c62 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x466>
    8c62:	981a      	ldr	r0, [sp, #104]	; 0x68
    8c64:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8c66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    8c68:	780b      	ldrb	r3, [r1, #0]
    8c6a:	f891 c001 	ldrb.w	ip, [r1, #1]
    8c6e:	f891 e002 	ldrb.w	lr, [r1, #2]
    8c72:	78cc      	ldrb	r4, [r1, #3]
    8c74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8c78:	1c55      	adds	r5, r2, #1
    8c7a:	2b80      	cmp	r3, #128	; 0x80
    8c7c:	bf08      	it	eq
    8c7e:	462a      	moveq	r2, r5
    8c80:	f00c 03c0 	and.w	r3, ip, #192	; 0xc0
    8c84:	f102 0c01 	add.w	ip, r2, #1
    8c88:	2b80      	cmp	r3, #128	; 0x80
    8c8a:	bf08      	it	eq
    8c8c:	4662      	moveq	r2, ip
    8c8e:	f00e 03c0 	and.w	r3, lr, #192	; 0xc0
    8c92:	f102 0c01 	add.w	ip, r2, #1
    8c96:	2b80      	cmp	r3, #128	; 0x80
    8c98:	bf08      	it	eq
    8c9a:	4662      	moveq	r2, ip
    8c9c:	f101 0104 	add.w	r1, r1, #4
    8ca0:	f004 03c0 	and.w	r3, r4, #192	; 0xc0
    8ca4:	f102 0c01 	add.w	ip, r2, #1
    8ca8:	2b80      	cmp	r3, #128	; 0x80
    8caa:	bf08      	it	eq
    8cac:	4662      	moveq	r2, ip
    8cae:	f1a0 0004 	sub.w	r0, r0, #4
    8cb2:	4603      	mov	r3, r0
    8cb4:	2800      	cmp	r0, #0
    8cb6:	4610      	mov	r0, r2
    8cb8:	468c      	mov	ip, r1
    8cba:	4696      	mov	lr, r2
    8cbc:	931a      	str	r3, [sp, #104]	; 0x68
    8cbe:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
    8cc2:	901c      	str	r0, [sp, #112]	; 0x70
    8cc4:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    8cc8:	921e      	str	r2, [sp, #120]	; 0x78
    8cca:	911d      	str	r1, [sp, #116]	; 0x74
    8ccc:	d1c9      	bne.n	8c62 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x466>
    8cce:	e7ff      	b.n	8cd0 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x4d4>
    8cd0:	981d      	ldr	r0, [sp, #116]	; 0x74
    8cd2:	991e      	ldr	r1, [sp, #120]	; 0x78
    8cd4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8cd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8cd8:	2b00      	cmp	r3, #0
    8cda:	9019      	str	r0, [sp, #100]	; 0x64
    8cdc:	9118      	str	r1, [sp, #96]	; 0x60
    8cde:	9221      	str	r2, [sp, #132]	; 0x84
    8ce0:	d011      	beq.n	8d06 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x50a>
    8ce2:	e7ff      	b.n	8ce4 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x4e8>
    8ce4:	9819      	ldr	r0, [sp, #100]	; 0x64
    8ce6:	7801      	ldrb	r1, [r0, #0]
    8ce8:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8cec:	9a18      	ldr	r2, [sp, #96]	; 0x60
    8cee:	1c53      	adds	r3, r2, #1
    8cf0:	2980      	cmp	r1, #128	; 0x80
    8cf2:	bf08      	it	eq
    8cf4:	461a      	moveq	r2, r3
    8cf6:	9920      	ldr	r1, [sp, #128]	; 0x80
    8cf8:	2901      	cmp	r1, #1
    8cfa:	4613      	mov	r3, r2
    8cfc:	9217      	str	r2, [sp, #92]	; 0x5c
    8cfe:	9321      	str	r3, [sp, #132]	; 0x84
    8d00:	f040 809a 	bne.w	8e38 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x63c>
    8d04:	e7ff      	b.n	8d06 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x50a>
    8d06:	9821      	ldr	r0, [sp, #132]	; 0x84
    8d08:	9932      	ldr	r1, [sp, #200]	; 0xc8
    8d0a:	1a40      	subs	r0, r0, r1
    8d0c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    8d0e:	4410      	add	r0, r2
    8d10:	9b61      	ldr	r3, [sp, #388]	; 0x184
    8d12:	f893 c020 	ldrb.w	ip, [r3, #32]
    8d16:	f04f 0e00 	mov.w	lr, #0
    8d1a:	f10c 0402 	add.w	r4, ip, #2
    8d1e:	f1bc 0f03 	cmp.w	ip, #3
    8d22:	bf08      	it	eq
    8d24:	2402      	moveq	r4, #2
    8d26:	f004 0c03 	and.w	ip, r4, #3
    8d2a:	9016      	str	r0, [sp, #88]	; 0x58
    8d2c:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
    8d30:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
    8d34:	9914      	ldr	r1, [sp, #80]	; 0x50
    8d36:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8d38:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8d3a:	9213      	str	r2, [sp, #76]	; 0x4c
    8d3c:	9312      	str	r3, [sp, #72]	; 0x48
    8d3e:	e8df f001 	tbb	[pc, r1]
    8d42:	0a02      	.short	0x0a02
    8d44:	0a0f      	.short	0x0a0f
    8d46:	9816      	ldr	r0, [sp, #88]	; 0x58
    8d48:	0841      	lsrs	r1, r0, #1
    8d4a:	1c42      	adds	r2, r0, #1
    8d4c:	0852      	lsrs	r2, r2, #1
    8d4e:	9213      	str	r2, [sp, #76]	; 0x4c
    8d50:	9112      	str	r1, [sp, #72]	; 0x48
    8d52:	e005      	b.n	8d60 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x564>
    8d54:	defe      	udf	#254	; 0xfe
    8d56:	2000      	movs	r0, #0
    8d58:	9916      	ldr	r1, [sp, #88]	; 0x58
    8d5a:	9013      	str	r0, [sp, #76]	; 0x4c
    8d5c:	9112      	str	r1, [sp, #72]	; 0x48
    8d5e:	e7ff      	b.n	8d60 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x564>
    8d60:	9812      	ldr	r0, [sp, #72]	; 0x48
    8d62:	9913      	ldr	r1, [sp, #76]	; 0x4c
    8d64:	9a61      	ldr	r2, [sp, #388]	; 0x184
    8d66:	f102 0318 	add.w	r3, r2, #24
    8d6a:	f102 0c1c 	add.w	ip, r2, #28
    8d6e:	46e6      	mov	lr, ip
    8d70:	1d14      	adds	r4, r2, #4
    8d72:	2500      	movs	r5, #0
    8d74:	9011      	str	r0, [sp, #68]	; 0x44
    8d76:	9110      	str	r1, [sp, #64]	; 0x40
    8d78:	930f      	str	r3, [sp, #60]	; 0x3c
    8d7a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    8d7e:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8d82:	940c      	str	r4, [sp, #48]	; 0x30
    8d84:	950b      	str	r5, [sp, #44]	; 0x2c
    8d86:	e7ff      	b.n	8d88 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x58c>
    8d88:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8d8a:	9911      	ldr	r1, [sp, #68]	; 0x44
    8d8c:	4288      	cmp	r0, r1
    8d8e:	900a      	str	r0, [sp, #40]	; 0x28
    8d90:	d018      	beq.n	8dc4 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x5c8>
    8d92:	e7ff      	b.n	8d94 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x598>
    8d94:	980a      	ldr	r0, [sp, #40]	; 0x28
    8d96:	1c41      	adds	r1, r0, #1
    8d98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8d9a:	6810      	ldr	r0, [r2, #0]
    8d9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8d9e:	f8d3 c000 	ldr.w	ip, [r3]
    8da2:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    8da6:	f8de 4000 	ldr.w	r4, [lr]
    8daa:	f8dc c010 	ldr.w	ip, [ip, #16]
    8dae:	9109      	str	r1, [sp, #36]	; 0x24
    8db0:	4621      	mov	r1, r4
    8db2:	47e0      	blx	ip
    8db4:	2101      	movs	r1, #1
    8db6:	2800      	cmp	r0, #0
    8db8:	9809      	ldr	r0, [sp, #36]	; 0x24
    8dba:	915b      	str	r1, [sp, #364]	; 0x16c
    8dbc:	900b      	str	r0, [sp, #44]	; 0x2c
    8dbe:	f47f ad57 	bne.w	8870 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x74>
    8dc2:	e7e1      	b.n	8d88 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x58c>
    8dc4:	980c      	ldr	r0, [sp, #48]	; 0x30
    8dc6:	6801      	ldr	r1, [r0, #0]
    8dc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8dca:	6810      	ldr	r0, [r2, #0]
    8dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8dce:	f8d3 c000 	ldr.w	ip, [r3]
    8dd2:	f8dc c00c 	ldr.w	ip, [ip, #12]
    8dd6:	f8dd e0cc 	ldr.w	lr, [sp, #204]	; 0xcc
    8dda:	9108      	str	r1, [sp, #32]
    8ddc:	4671      	mov	r1, lr
    8dde:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    8de0:	47e0      	blx	ip
    8de2:	2101      	movs	r1, #1
    8de4:	2800      	cmp	r0, #0
    8de6:	915b      	str	r1, [sp, #364]	; 0x16c
    8de8:	f47f ad42 	bne.w	8870 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x74>
    8dec:	e7ff      	b.n	8dee <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x5f2>
    8dee:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8df0:	6800      	ldr	r0, [r0, #0]
    8df2:	990e      	ldr	r1, [sp, #56]	; 0x38
    8df4:	680a      	ldr	r2, [r1, #0]
    8df6:	3210      	adds	r2, #16
    8df8:	2300      	movs	r3, #0
    8dfa:	9007      	str	r0, [sp, #28]
    8dfc:	9206      	str	r2, [sp, #24]
    8dfe:	9305      	str	r3, [sp, #20]
    8e00:	e7ff      	b.n	8e02 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x606>
    8e02:	9805      	ldr	r0, [sp, #20]
    8e04:	2100      	movs	r1, #0
    8e06:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8e08:	4290      	cmp	r0, r2
    8e0a:	9004      	str	r0, [sp, #16]
    8e0c:	915b      	str	r1, [sp, #364]	; 0x16c
    8e0e:	f43f ad2f 	beq.w	8870 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x74>
    8e12:	e7ff      	b.n	8e14 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x618>
    8e14:	9804      	ldr	r0, [sp, #16]
    8e16:	1c41      	adds	r1, r0, #1
    8e18:	9a06      	ldr	r2, [sp, #24]
    8e1a:	6813      	ldr	r3, [r2, #0]
    8e1c:	9807      	ldr	r0, [sp, #28]
    8e1e:	f8dd c020 	ldr.w	ip, [sp, #32]
    8e22:	9103      	str	r1, [sp, #12]
    8e24:	4661      	mov	r1, ip
    8e26:	4798      	blx	r3
    8e28:	2101      	movs	r1, #1
    8e2a:	2800      	cmp	r0, #0
    8e2c:	9803      	ldr	r0, [sp, #12]
    8e2e:	915b      	str	r1, [sp, #364]	; 0x16c
    8e30:	9005      	str	r0, [sp, #20]
    8e32:	f47f ad1d 	bne.w	8870 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x74>
    8e36:	e7e4      	b.n	8e02 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x606>
    8e38:	9819      	ldr	r0, [sp, #100]	; 0x64
    8e3a:	7841      	ldrb	r1, [r0, #1]
    8e3c:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8e40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    8e42:	1c53      	adds	r3, r2, #1
    8e44:	2980      	cmp	r1, #128	; 0x80
    8e46:	bf08      	it	eq
    8e48:	461a      	moveq	r2, r3
    8e4a:	9920      	ldr	r1, [sp, #128]	; 0x80
    8e4c:	2902      	cmp	r1, #2
    8e4e:	4613      	mov	r3, r2
    8e50:	9202      	str	r2, [sp, #8]
    8e52:	9321      	str	r3, [sp, #132]	; 0x84
    8e54:	f43f af57 	beq.w	8d06 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x50a>
    8e58:	e7ff      	b.n	8e5a <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x65e>
    8e5a:	9819      	ldr	r0, [sp, #100]	; 0x64
    8e5c:	7881      	ldrb	r1, [r0, #2]
    8e5e:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8e62:	9a02      	ldr	r2, [sp, #8]
    8e64:	1c53      	adds	r3, r2, #1
    8e66:	2980      	cmp	r1, #128	; 0x80
    8e68:	bf08      	it	eq
    8e6a:	461a      	moveq	r2, r3
    8e6c:	9221      	str	r2, [sp, #132]	; 0x84
    8e6e:	e74a      	b.n	8d06 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x50a>
    8e70:	9826      	ldr	r0, [sp, #152]	; 0x98
    8e72:	7841      	ldrb	r1, [r0, #1]
    8e74:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8e78:	9a24      	ldr	r2, [sp, #144]	; 0x90
    8e7a:	1c53      	adds	r3, r2, #1
    8e7c:	2980      	cmp	r1, #128	; 0x80
    8e7e:	bf08      	it	eq
    8e80:	461a      	moveq	r2, r3
    8e82:	992d      	ldr	r1, [sp, #180]	; 0xb4
    8e84:	2902      	cmp	r1, #2
    8e86:	4613      	mov	r3, r2
    8e88:	9201      	str	r2, [sp, #4]
    8e8a:	932e      	str	r3, [sp, #184]	; 0xb8
    8e8c:	f43f aeb1 	beq.w	8bf2 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3f6>
    8e90:	e7ff      	b.n	8e92 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x696>
    8e92:	9826      	ldr	r0, [sp, #152]	; 0x98
    8e94:	7881      	ldrb	r1, [r0, #2]
    8e96:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8e9a:	9a01      	ldr	r2, [sp, #4]
    8e9c:	1c53      	adds	r3, r2, #1
    8e9e:	2980      	cmp	r1, #128	; 0x80
    8ea0:	bf08      	it	eq
    8ea2:	461a      	moveq	r2, r3
    8ea4:	922e      	str	r2, [sp, #184]	; 0xb8
    8ea6:	e6a4      	b.n	8bf2 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3f6>

00008ea8 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h7fbf59b3963cac8fE>:
    8ea8:	b081      	sub	sp, #4
    8eaa:	6802      	ldr	r2, [r0, #0]
    8eac:	6840      	ldr	r0, [r0, #4]
    8eae:	9000      	str	r0, [sp, #0]
    8eb0:	4608      	mov	r0, r1
    8eb2:	4611      	mov	r1, r2
    8eb4:	9a00      	ldr	r2, [sp, #0]
    8eb6:	b001      	add	sp, #4
    8eb8:	f7ff bca0 	b.w	87fc <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E>

00008ebc <_ZN4core6option18expect_none_failed17h6759d4401d28ac1fE>:
    8ebc:	b580      	push	{r7, lr}
    8ebe:	466f      	mov	r7, sp
    8ec0:	b08e      	sub	sp, #56	; 0x38
    8ec2:	f8d7 c008 	ldr.w	ip, [r7, #8]
    8ec6:	9000      	str	r0, [sp, #0]
    8ec8:	9101      	str	r1, [sp, #4]
    8eca:	9202      	str	r2, [sp, #8]
    8ecc:	9303      	str	r3, [sp, #12]
    8ece:	4668      	mov	r0, sp
    8ed0:	900a      	str	r0, [sp, #40]	; 0x28
    8ed2:	f648 60a9 	movw	r0, #36521	; 0x8ea9
    8ed6:	f2c0 0000 	movt	r0, #0
    8eda:	900b      	str	r0, [sp, #44]	; 0x2c
    8edc:	a802      	add	r0, sp, #8
    8ede:	900c      	str	r0, [sp, #48]	; 0x30
    8ee0:	f648 700f 	movw	r0, #36623	; 0x8f0f
    8ee4:	f2c0 0000 	movt	r0, #0
    8ee8:	900d      	str	r0, [sp, #52]	; 0x34
    8eea:	f248 6088 	movw	r0, #34440	; 0x8688
    8eee:	f2c0 0002 	movt	r0, #2
    8ef2:	9004      	str	r0, [sp, #16]
    8ef4:	2002      	movs	r0, #2
    8ef6:	9005      	str	r0, [sp, #20]
    8ef8:	2100      	movs	r1, #0
    8efa:	9106      	str	r1, [sp, #24]
    8efc:	9107      	str	r1, [sp, #28]
    8efe:	a90a      	add	r1, sp, #40	; 0x28
    8f00:	9108      	str	r1, [sp, #32]
    8f02:	9009      	str	r0, [sp, #36]	; 0x24
    8f04:	a804      	add	r0, sp, #16
    8f06:	4661      	mov	r1, ip
    8f08:	f7ff fc5a 	bl	87c0 <_ZN4core9panicking9panic_fmt17h1abf46b1849e1e64E>
    8f0c:	defe      	udf	#254	; 0xfe

00008f0e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hfa4813af48620bbbE>:
    8f0e:	b081      	sub	sp, #4
    8f10:	6802      	ldr	r2, [r0, #0]
    8f12:	6840      	ldr	r0, [r0, #4]
    8f14:	68c0      	ldr	r0, [r0, #12]
    8f16:	9000      	str	r0, [sp, #0]
    8f18:	4610      	mov	r0, r2
    8f1a:	9a00      	ldr	r2, [sp, #0]
    8f1c:	b001      	add	sp, #4
    8f1e:	4710      	bx	r2

00008f20 <_ZN4core5panic9PanicInfo8location17h6e90b1f5ec8cea30E>:
    8f20:	68c0      	ldr	r0, [r0, #12]
    8f22:	4770      	bx	lr

00008f24 <_ZN4core5panic8Location4file17hfc9aa9a4958c9c3aE>:
    8f24:	b081      	sub	sp, #4
    8f26:	6801      	ldr	r1, [r0, #0]
    8f28:	6840      	ldr	r0, [r0, #4]
    8f2a:	9000      	str	r0, [sp, #0]
    8f2c:	4608      	mov	r0, r1
    8f2e:	9900      	ldr	r1, [sp, #0]
    8f30:	b001      	add	sp, #4
    8f32:	4770      	bx	lr

00008f34 <_ZN4core5panic8Location4line17h81a396f742303977E>:
    8f34:	6880      	ldr	r0, [r0, #8]
    8f36:	4770      	bx	lr

00008f38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha89a753dca6cd9f4E>:
    #[rustc_const_stable(feature = "const_slice_len", since = "1.32.0")]
    #[inline]
    // SAFETY: const sound because we transmute out the length field as a usize (which it must be)
    #[allow(unused_attributes)]
    #[allow_internal_unstable(const_fn_union)]
    pub const fn len(&self) -> usize {
    8f38:	b084      	sub	sp, #16
    8f3a:	9002      	str	r0, [sp, #8]
    8f3c:	9103      	str	r1, [sp, #12]
        unsafe { crate::ptr::Repr { rust: self }.raw.len }
    8f3e:	9000      	str	r0, [sp, #0]
    8f40:	9101      	str	r1, [sp, #4]
    8f42:	9801      	ldr	r0, [sp, #4]
    }
    8f44:	b004      	add	sp, #16
    8f46:	4770      	bx	lr

00008f48 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8f48:	b580      	push	{r7, lr}
    8f4a:	466f      	mov	r7, sp
    8f4c:	b086      	sub	sp, #24
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8f4e:	f7ff fbfd 	bl	874c <_ZN6mynewt7sysinit17h1b1620554f4add73E>
    assert!(rc == 0, "FLASH fail");
    */

    //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
    extern { fn hal_watchdog_tickle(); }
    unsafe { hal_watchdog_tickle() };
    8f52:	f000 fd33 	bl	99bc <hal_watchdog_tickle>
    }
    */
    
    //  Start Bluetooth LE, including over-the-air firmware upgrade.  TODO: Create a safe wrapper for starting Bluetooth LE.
    extern { fn start_ble() -> i32; }
    let rc = unsafe { start_ble() };
    8f56:	f000 fbb7 	bl	96c8 <start_ble>
    8f5a:	9005      	str	r0, [sp, #20]
    assert!(rc == 0, "BLE fail");
    8f5c:	2800      	cmp	r0, #0
    8f5e:	d00c      	beq.n	8f7a <main+0x32>
    8f60:	e7ff      	b.n	8f62 <main+0x1a>
    8f62:	f248 609a 	movw	r0, #34458	; 0x869a
    8f66:	f2c0 0002 	movt	r0, #2
    8f6a:	f248 62b4 	movw	r2, #34484	; 0x86b4
    8f6e:	f2c0 0202 	movt	r2, #2
    8f72:	2108      	movs	r1, #8
    8f74:	f7ff fc0d 	bl	8792 <_ZN4core9panicking5panic17h692a68e116a8c946E>
    8f78:	defe      	udf	#254	; 0xfe
    8f7a:	a803      	add	r0, sp, #12
    //      .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8f7c:	9002      	str	r0, [sp, #8]
    8f7e:	f7ff fbfb 	bl	8778 <_ZN6mynewt6kernel2os15eventq_dflt_get17hee2ec5f38871c7e2E>
    8f82:	f248 61a2 	movw	r1, #34466	; 0x86a2
    8f86:	f2c0 0102 	movt	r1, #2
    8f8a:	f248 63c4 	movw	r3, #34500	; 0x86c4
    8f8e:	f2c0 0302 	movt	r3, #2
    8f92:	2008      	movs	r0, #8
    8f94:	9a02      	ldr	r2, [sp, #8]
    8f96:	9001      	str	r0, [sp, #4]
    8f98:	4610      	mov	r0, r2
    8f9a:	9a01      	ldr	r2, [sp, #4]
    8f9c:	f000 f810 	bl	8fc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8475276e04d22ec4E>
        os::eventq_run(               //  Processing events...
    8fa0:	f7ff fbe1 	bl	8766 <_ZN6mynewt6kernel2os10eventq_run17h315affb69d21582dE>
    8fa4:	f248 61aa 	movw	r1, #34474	; 0x86aa
    8fa8:	f2c0 0102 	movt	r1, #2
    8fac:	f248 63d4 	movw	r3, #34516	; 0x86d4
    8fb0:	f2c0 0302 	movt	r3, #2
    8fb4:	9a01      	ldr	r2, [sp, #4]
    8fb6:	f7ff fb64 	bl	8682 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h56061f5b534d43a3E>
                .expect("GET fail")
        ).expect("RUN fail");
        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
    8fba:	f000 fcff 	bl	99bc <hal_watchdog_tickle>
    loop {                            //  Loop forever...
    8fbe:	e7dc      	b.n	8f7a <main+0x32>

00008fc0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8475276e04d22ec4E>:
    pub fn expect(self, msg: &str) -> T {
    8fc0:	b580      	push	{r7, lr}
    8fc2:	466f      	mov	r7, sp
    8fc4:	b08a      	sub	sp, #40	; 0x28
    8fc6:	9107      	str	r1, [sp, #28]
    8fc8:	9208      	str	r2, [sp, #32]
            Ok(t) => t,
    8fca:	f8d0 c000 	ldr.w	ip, [r0]
    8fce:	f1bc 0f00 	cmp.w	ip, #0
    8fd2:	9305      	str	r3, [sp, #20]
    8fd4:	9204      	str	r2, [sp, #16]
    8fd6:	9103      	str	r1, [sp, #12]
    8fd8:	9002      	str	r0, [sp, #8]
    8fda:	d010      	beq.n	8ffe <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8475276e04d22ec4E+0x3e>
    8fdc:	e7ff      	b.n	8fde <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8475276e04d22ec4E+0x1e>
            Err(e) => unwrap_failed(msg, &e),
    8fde:	9802      	ldr	r0, [sp, #8]
    8fe0:	6841      	ldr	r1, [r0, #4]
    8fe2:	9106      	str	r1, [sp, #24]
    8fe4:	4669      	mov	r1, sp
    8fe6:	9a05      	ldr	r2, [sp, #20]
    8fe8:	600a      	str	r2, [r1, #0]
    8fea:	f248 63f8 	movw	r3, #34552	; 0x86f8
    8fee:	f2c0 0302 	movt	r3, #2
    8ff2:	aa06      	add	r2, sp, #24
    8ff4:	9803      	ldr	r0, [sp, #12]
    8ff6:	9904      	ldr	r1, [sp, #16]
    8ff8:	f7ff ff60 	bl	8ebc <_ZN4core6option18expect_none_failed17h6759d4401d28ac1fE>
    8ffc:	defe      	udf	#254	; 0xfe
            Ok(t) => t,
    8ffe:	9802      	ldr	r0, [sp, #8]
    9000:	6841      	ldr	r1, [r0, #4]
    9002:	9109      	str	r1, [sp, #36]	; 0x24
    }
    9004:	4608      	mov	r0, r1
    9006:	b00a      	add	sp, #40	; 0x28
    9008:	bd80      	pop	{r7, pc}

0000900a <_ZN4core3ptr13drop_in_place17h6ae1af1416118836E>:
    900a:	b082      	sub	sp, #8
    900c:	9001      	str	r0, [sp, #4]
    900e:	b002      	add	sp, #8
    9010:	4770      	bx	lr

00009012 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    9012:	b580      	push	{r7, lr}
    9014:	466f      	mov	r7, sp
    9016:	b08a      	sub	sp, #40	; 0x28
    9018:	9007      	str	r0, [sp, #28]
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    901a:	f248 7108 	movw	r1, #34568	; 0x8708
    901e:	f2c0 0102 	movt	r1, #2
    9022:	2206      	movs	r2, #6
    9024:	9003      	str	r0, [sp, #12]
    9026:	4608      	mov	r0, r1
    9028:	4611      	mov	r1, r2
    902a:	f7ff fb48 	bl	86be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>
    if let Some(location) = info.location() {
    902e:	9803      	ldr	r0, [sp, #12]
    9030:	f7ff ff76 	bl	8f20 <_ZN4core5panic9PanicInfo8location17h6e90b1f5ec8cea30E>
    9034:	9004      	str	r0, [sp, #16]
    9036:	9804      	ldr	r0, [sp, #16]
    9038:	2800      	cmp	r0, #0
    903a:	d10a      	bne.n	9052 <rust_begin_unwind+0x40>
    903c:	e7ff      	b.n	903e <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    903e:	f248 700e 	movw	r0, #34574	; 0x870e
    9042:	f2c0 0002 	movt	r0, #2
    9046:	2107      	movs	r1, #7
    9048:	f7ff fb39 	bl	86be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>
    904c:	f7ff fb79 	bl	8742 <_ZN6mynewt3sys7console5flush17h8491f76cc7401f62E>
    if let Some(location) = info.location() {
    9050:	e02c      	b.n	90ac <rust_begin_unwind+0x9a>
    9052:	9804      	ldr	r0, [sp, #16]
    9054:	9008      	str	r0, [sp, #32]
        let file = location.file();
    9056:	9002      	str	r0, [sp, #8]
    9058:	f7ff ff64 	bl	8f24 <_ZN4core5panic8Location4file17hfc9aa9a4958c9c3aE>
    905c:	9106      	str	r1, [sp, #24]
    905e:	9005      	str	r0, [sp, #20]
        let line = location.line();
    9060:	9802      	ldr	r0, [sp, #8]
    9062:	f7ff ff67 	bl	8f34 <_ZN4core5panic8Location4line17h81a396f742303977E>
    9066:	9009      	str	r0, [sp, #36]	; 0x24
        console::print("at ");       console::buffer(&file);
    9068:	f248 7115 	movw	r1, #34581	; 0x8715
    906c:	f2c0 0102 	movt	r1, #2
    9070:	2203      	movs	r2, #3
    9072:	9001      	str	r0, [sp, #4]
    9074:	4608      	mov	r0, r1
    9076:	4611      	mov	r1, r2
    9078:	f7ff fb21 	bl	86be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>
    907c:	9805      	ldr	r0, [sp, #20]
    907e:	9906      	ldr	r1, [sp, #24]
    9080:	f7ff fb40 	bl	8704 <_ZN6mynewt3sys7console6buffer17h35108561f938a421E>
        console::print(" line ");    console::printint(line as i32);
    9084:	f248 7018 	movw	r0, #34584	; 0x8718
    9088:	f2c0 0002 	movt	r0, #2
    908c:	2106      	movs	r1, #6
    908e:	f7ff fb16 	bl	86be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>
    9092:	9801      	ldr	r0, [sp, #4]
    9094:	f7ff fb4d 	bl	8732 <_ZN6mynewt3sys7console8printint17hbf799f23e9896db3E>
        console::print("\n");        console::flush();
    9098:	f248 701e 	movw	r0, #34590	; 0x871e
    909c:	f2c0 0002 	movt	r0, #2
    90a0:	2101      	movs	r1, #1
    90a2:	f7ff fb0c 	bl	86be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>
    90a6:	f7ff fb4c 	bl	8742 <_ZN6mynewt3sys7console5flush17h8491f76cc7401f62E>
    if let Some(location) = info.location() {
    90aa:	e7ff      	b.n	90ac <rust_begin_unwind+0x9a>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { llvm_asm!("bkpt" :::: "volatile") },
    90ac:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    90ae:	9803      	ldr	r0, [sp, #12]
    90b0:	f7ff ff38 	bl	8f24 <_ZN4core5panic8Location4file17hfc9aa9a4958c9c3aE>
    90b4:	f000 f818 	bl	90e8 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h0816bf0a0366a198E>
    90b8:	f248 7120 	movw	r1, #34592	; 0x8720
    90bc:	f2c0 0102 	movt	r1, #2
    90c0:	f000 f81b 	bl	90fa <_ZN4core6option15Option$LT$T$GT$6unwrap17h2738ac118120fc1fE>
    90c4:	6801      	ldr	r1, [r0, #0]
    90c6:	6840      	ldr	r0, [r0, #4]
    90c8:	9000      	str	r0, [sp, #0]
    90ca:	4608      	mov	r0, r1
    90cc:	9900      	ldr	r1, [sp, #0]
    90ce:	f7ff faf6 	bl	86be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>
    console::print("\n");  console::flush();
    90d2:	f248 701e 	movw	r0, #34590	; 0x871e
    90d6:	f2c0 0002 	movt	r0, #2
    90da:	2101      	movs	r1, #1
    90dc:	f7ff faef 	bl	86be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>
    90e0:	f7ff fb2f 	bl	8742 <_ZN6mynewt3sys7console5flush17h8491f76cc7401f62E>
    //  Loop forever so that device won't restart.
    loop {}
    90e4:	e7ff      	b.n	90e6 <rust_begin_unwind+0xd4>
    90e6:	e7fe      	b.n	90e6 <rust_begin_unwind+0xd4>

000090e8 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h0816bf0a0366a198E>:
    /// print_if_string(&0);
    /// print_if_string(&"cookie monster".to_string());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn downcast_ref<T: Any>(&self) -> Option<&T> {
    90e8:	b580      	push	{r7, lr}
    90ea:	466f      	mov	r7, sp
    90ec:	b082      	sub	sp, #8
    90ee:	9000      	str	r0, [sp, #0]
    90f0:	9101      	str	r1, [sp, #4]
        Any::downcast_ref::<T>(self)
    90f2:	f000 f818 	bl	9126 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17hc90ab95f8fe9867cE>
    }
    90f6:	b002      	add	sp, #8
    90f8:	bd80      	pop	{r7, pc}

000090fa <_ZN4core6option15Option$LT$T$GT$6unwrap17h2738ac118120fc1fE>:
    /// assert_eq!(x.unwrap(), "air"); // fails
    /// ```
    #[inline]
    #[track_caller]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn unwrap(self) -> T {
    90fa:	b580      	push	{r7, lr}
    90fc:	466f      	mov	r7, sp
    90fe:	b084      	sub	sp, #16
    9100:	9002      	str	r0, [sp, #8]
        match self {
            Some(val) => val,
    9102:	9802      	ldr	r0, [sp, #8]
    9104:	2800      	cmp	r0, #0
    9106:	9101      	str	r1, [sp, #4]
    9108:	d109      	bne.n	911e <_ZN4core6option15Option$LT$T$GT$6unwrap17h2738ac118120fc1fE+0x24>
    910a:	e7ff      	b.n	910c <_ZN4core6option15Option$LT$T$GT$6unwrap17h2738ac118120fc1fE+0x12>
macro_rules! panic {
    () => (
        $crate::panic!("explicit panic")
    );
    ($msg:literal) => (
        $crate::panicking::panic($msg)
    910c:	f248 7030 	movw	r0, #34608	; 0x8730
    9110:	f2c0 0002 	movt	r0, #2
    9114:	212b      	movs	r1, #43	; 0x2b
    9116:	9a01      	ldr	r2, [sp, #4]
    9118:	f7ff fb3b 	bl	8792 <_ZN4core9panicking5panic17h692a68e116a8c946E>
    911c:	defe      	udf	#254	; 0xfe
    911e:	9802      	ldr	r0, [sp, #8]
    9120:	9003      	str	r0, [sp, #12]
            None => panic!("called `Option::unwrap()` on a `None` value"),
        }
    }
    9122:	b004      	add	sp, #16
    9124:	bd80      	pop	{r7, pc}

00009126 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17hc90ab95f8fe9867cE>:
    pub fn downcast_ref<T: Any>(&self) -> Option<&T> {
    9126:	b580      	push	{r7, lr}
    9128:	466f      	mov	r7, sp
    912a:	b084      	sub	sp, #16
    912c:	9002      	str	r0, [sp, #8]
    912e:	9103      	str	r1, [sp, #12]
        if self.is::<T>() {
    9130:	9000      	str	r0, [sp, #0]
    9132:	f000 f80c 	bl	914e <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17h78f536f6529d6acdE>
    9136:	2800      	cmp	r0, #0
    9138:	d103      	bne.n	9142 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17hc90ab95f8fe9867cE+0x1c>
    913a:	e7ff      	b.n	913c <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17hc90ab95f8fe9867cE+0x16>
    913c:	2000      	movs	r0, #0
            None
    913e:	9001      	str	r0, [sp, #4]
        if self.is::<T>() {
    9140:	e002      	b.n	9148 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17hc90ab95f8fe9867cE+0x22>
            unsafe { Some(&*(self as *const dyn Any as *const T)) }
    9142:	9800      	ldr	r0, [sp, #0]
    9144:	9001      	str	r0, [sp, #4]
        if self.is::<T>() {
    9146:	e7ff      	b.n	9148 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17hc90ab95f8fe9867cE+0x22>
    }
    9148:	9801      	ldr	r0, [sp, #4]
    914a:	b004      	add	sp, #16
    914c:	bd80      	pop	{r7, pc}

0000914e <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17h78f536f6529d6acdE>:
    pub fn is<T: Any>(&self) -> bool {
    914e:	b580      	push	{r7, lr}
    9150:	466f      	mov	r7, sp
    9152:	b088      	sub	sp, #32
    9154:	9006      	str	r0, [sp, #24]
    9156:	9107      	str	r1, [sp, #28]
        let t = TypeId::of::<T>();
    9158:	9101      	str	r1, [sp, #4]
    915a:	9000      	str	r0, [sp, #0]
    915c:	f000 f80e 	bl	917c <_ZN4core3any6TypeId2of17h678dcf5e90be79cdE>
    9160:	9103      	str	r1, [sp, #12]
    9162:	9002      	str	r0, [sp, #8]
        let concrete = self.type_id();
    9164:	9801      	ldr	r0, [sp, #4]
    9166:	68c1      	ldr	r1, [r0, #12]
    9168:	9800      	ldr	r0, [sp, #0]
    916a:	4788      	blx	r1
    916c:	9105      	str	r1, [sp, #20]
    916e:	9004      	str	r0, [sp, #16]
    9170:	a802      	add	r0, sp, #8
    9172:	a904      	add	r1, sp, #16
        t == concrete
    9174:	f000 f815 	bl	91a2 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17hea2831b1242142eeE>
    }
    9178:	b008      	add	sp, #32
    917a:	bd80      	pop	{r7, pc}

0000917c <_ZN4core3any6TypeId2of17h678dcf5e90be79cdE>:
    /// assert_eq!(is_string(&0), false);
    /// assert_eq!(is_string(&"cookie monster".to_string()), true);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_unstable(feature = "const_type_id", issue = "41875")]
    pub const fn of<T: ?Sized + 'static>() -> TypeId {
    917c:	b084      	sub	sp, #16
    917e:	f64a 101e 	movw	r0, #43294	; 0xa91e
    9182:	f6c7 60f2 	movt	r0, #32498	; 0x7ef2
        TypeId { t: intrinsics::type_id::<T>() }
    9186:	9003      	str	r0, [sp, #12]
    9188:	f64b 40f4 	movw	r0, #48372	; 0xbcf4
    918c:	f6ce 40c7 	movt	r0, #60615	; 0xecc7
    9190:	9002      	str	r0, [sp, #8]
    9192:	9802      	ldr	r0, [sp, #8]
    9194:	9903      	ldr	r1, [sp, #12]
    9196:	9101      	str	r1, [sp, #4]
    9198:	9000      	str	r0, [sp, #0]
    }
    919a:	9800      	ldr	r0, [sp, #0]
    919c:	9901      	ldr	r1, [sp, #4]
    919e:	b004      	add	sp, #16
    91a0:	4770      	bx	lr

000091a2 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17hea2831b1242142eeE>:
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]
    91a2:	b084      	sub	sp, #16
    91a4:	9000      	str	r0, [sp, #0]
    91a6:	9101      	str	r1, [sp, #4]
    t: u64,
    91a8:	9102      	str	r1, [sp, #8]
    91aa:	9003      	str	r0, [sp, #12]
    91ac:	6802      	ldr	r2, [r0, #0]
    91ae:	6840      	ldr	r0, [r0, #4]
    91b0:	680b      	ldr	r3, [r1, #0]
    91b2:	6849      	ldr	r1, [r1, #4]
    91b4:	4048      	eors	r0, r1
    91b6:	ea82 0103 	eor.w	r1, r2, r3
    91ba:	4308      	orrs	r0, r1
    91bc:	fab0 f080 	clz	r0, r0
    91c0:	0940      	lsrs	r0, r0, #5
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]
    91c2:	b004      	add	sp, #16
    91c4:	4770      	bx	lr
	...

000091c8 <console_flush>:
#endif  //  DISABLE_SEMIHOSTING
}

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
    91c8:	b508      	push	{r3, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
    91ca:	4b0b      	ldr	r3, [pc, #44]	; (91f8 <console_flush+0x30>)
    91cc:	781b      	ldrb	r3, [r3, #0]
    91ce:	b18b      	cbz	r3, 91f4 <console_flush+0x2c>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
    91d0:	4b0a      	ldr	r3, [pc, #40]	; (91fc <console_flush+0x34>)
    91d2:	6818      	ldr	r0, [r3, #0]
    91d4:	b170      	cbz	r0, 91f4 <console_flush+0x2c>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
    91d6:	4b0a      	ldr	r3, [pc, #40]	; (9200 <console_flush+0x38>)
    91d8:	685b      	ldr	r3, [r3, #4]
    91da:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
    91de:	b94b      	cbnz	r3, 91f4 <console_flush+0x2c>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
    91e0:	4b06      	ldr	r3, [pc, #24]	; (91fc <console_flush+0x34>)
    91e2:	2200      	movs	r2, #0
    91e4:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
    91e6:	4603      	mov	r3, r0
    while (m) {  //  For each mbuf in the chain...
    91e8:	e000      	b.n	91ec <console_flush+0x24>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
    91ea:	68db      	ldr	r3, [r3, #12]
    while (m) {  //  For each mbuf in the chain...
    91ec:	2b00      	cmp	r3, #0
    91ee:	d1fc      	bne.n	91ea <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
    91f0:	f001 f868 	bl	a2c4 <os_mbuf_free_chain>
}
    91f4:	bd08      	pop	{r3, pc}
    91f6:	bf00      	nop
    91f8:	200000e8 	.word	0x200000e8
    91fc:	200004e0 	.word	0x200004e0
    9200:	e000ed00 	.word	0xe000ed00

00009204 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
    9204:	b508      	push	{r3, lr}
    9206:	f7ff ffdf 	bl	91c8 <console_flush>
    920a:	bd08      	pop	{r3, pc}

0000920c <console_buffer>:
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
    920c:	4770      	bx	lr

0000920e <console_printhex>:
    #define MAX_BYTE_LENGTH 2
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
    920e:	2310      	movs	r3, #16
    int length = 0;
    9210:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
    9212:	e000      	b.n	9216 <console_printhex+0x8>
    9214:	091b      	lsrs	r3, r3, #4
    9216:	b11b      	cbz	r3, 9220 <console_printhex+0x12>
        char digit = '0' + (char)(v / divisor);
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
    9218:	2a02      	cmp	r2, #2
    921a:	dcfb      	bgt.n	9214 <console_printhex+0x6>
                buffer[length++] = digit;
    921c:	3201      	adds	r2, #1
    921e:	e7f9      	b.n	9214 <console_printhex+0x6>
    }
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
    console_buffer(buffer, strlen(buffer));
}
    9220:	4770      	bx	lr
	...

00009224 <console_printint>:

void console_printint(int i) {
    9224:	b508      	push	{r3, lr}
    //  Write an int i the output buffer.
    console_printf("%d", i);
    9226:	4601      	mov	r1, r0
    9228:	4801      	ldr	r0, [pc, #4]	; (9230 <console_printint+0xc>)
    922a:	f000 f86d 	bl	9308 <console_printf>
}
    922e:	bd08      	pop	{r3, pc}
    9230:	000299c4 	.word	0x000299c4

00009234 <console_dump>:
    console_printf("%s%d.%06d", neg ? "-" : "", i, d);   //  Combine the sign, integer and decimal parts
}

void console_dump(const uint8_t *buffer, unsigned int len) {
	//  Append "length" number of bytes from "buffer" to the output buffer in hex format.
    if (buffer == NULL || len == 0) { return; }
    9234:	b160      	cbz	r0, 9250 <console_dump+0x1c>
void console_dump(const uint8_t *buffer, unsigned int len) {
    9236:	b570      	push	{r4, r5, r6, lr}
    9238:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
    923a:	b141      	cbz	r1, 924e <console_dump+0x1a>
    923c:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
    923e:	2400      	movs	r4, #0
    9240:	e003      	b.n	924a <console_dump+0x16>
    9242:	5d30      	ldrb	r0, [r6, r4]
    9244:	f7ff ffe3 	bl	920e <console_printhex>
    9248:	3401      	adds	r4, #1
    924a:	42ac      	cmp	r4, r5
    924c:	d3f9      	bcc.n	9242 <console_dump+0xe>
}
    924e:	bd70      	pop	{r4, r5, r6, pc}
    9250:	4770      	bx	lr
	...

00009254 <console_out_nolock>:
    console_buffer(&c, 1);  //  Append the char to the output buffer.
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}

int console_out_nolock(int character) {
    char c = (char)character;
    9254:	b2c2      	uxtb	r2, r0
    if (g_silence_console) { return c; }
    9256:	4b07      	ldr	r3, [pc, #28]	; (9274 <console_out_nolock+0x20>)
    9258:	781b      	ldrb	r3, [r3, #0]
    925a:	b92b      	cbnz	r3, 9268 <console_out_nolock+0x14>
    if ('\n' == c) {
    925c:	2a0a      	cmp	r2, #10
    925e:	d005      	beq.n	926c <console_out_nolock+0x18>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
    9260:	4b05      	ldr	r3, [pc, #20]	; (9278 <console_out_nolock+0x24>)
    9262:	2201      	movs	r2, #1
    9264:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
    return character;
}
    9266:	4770      	bx	lr
    9268:	4610      	mov	r0, r2
    if (g_silence_console) { return c; }
    926a:	4770      	bx	lr
        console_is_midline = 0;
    926c:	4b02      	ldr	r3, [pc, #8]	; (9278 <console_out_nolock+0x24>)
    926e:	2200      	movs	r2, #0
    9270:	601a      	str	r2, [r3, #0]
    9272:	4770      	bx	lr
    9274:	20000504 	.word	0x20000504
    9278:	200004f4 	.word	0x200004f4

0000927c <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
    927c:	2000      	movs	r0, #0
    927e:	4770      	bx	lr

00009280 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
    9280:	b570      	push	{r4, r5, r6, lr}
    9282:	4606      	mov	r6, r0
    9284:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
    9286:	2400      	movs	r4, #0
    9288:	42ac      	cmp	r4, r5
    928a:	da07      	bge.n	929c <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
    928c:	5d30      	ldrb	r0, [r6, r4]
    928e:	f7ff ffe1 	bl	9254 <console_out_nolock>
    9292:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    9296:	d001      	beq.n	929c <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
    9298:	3401      	adds	r4, #1
    929a:	e7f5      	b.n	9288 <console_write+0x8>
    }
}
    929c:	bd70      	pop	{r4, r5, r6, pc}

0000929e <console_blocking_mode>:

void console_blocking_mode(void) {
    929e:	b508      	push	{r3, lr}
    disable_buffer();
    92a0:	f7ff ffb0 	bl	9204 <disable_buffer>
}
    92a4:	bd08      	pop	{r3, pc}
	...

000092a8 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
    92a8:	b510      	push	{r4, lr}
    92aa:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    92ac:	4b12      	ldr	r3, [pc, #72]	; (92f8 <console_pkg_init+0x50>)
    92ae:	781b      	ldrb	r3, [r3, #0]
    92b0:	b153      	cbz	r3, 92c8 <console_pkg_init+0x20>

    os_eventq_init(&avail_queue);
    92b2:	4812      	ldr	r0, [pc, #72]	; (92fc <console_pkg_init+0x54>)
    92b4:	f000 fecc 	bl	a050 <os_eventq_init>
    os_mutex_init(&console_write_lock);
    92b8:	4811      	ldr	r0, [pc, #68]	; (9300 <console_pkg_init+0x58>)
    92ba:	f001 fd4b 	bl	ad54 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
    92be:	f7ff ffdd 	bl	927c <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
    92c2:	b958      	cbnz	r0, 92dc <console_pkg_init+0x34>
}
    92c4:	b002      	add	sp, #8
    92c6:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    92c8:	f7fe ff7a 	bl	81c0 <hal_debugger_connected>
    92cc:	b100      	cbz	r0, 92d0 <console_pkg_init+0x28>
    92ce:	be01      	bkpt	0x0001
    92d0:	2300      	movs	r3, #0
    92d2:	461a      	mov	r2, r3
    92d4:	4619      	mov	r1, r3
    92d6:	4618      	mov	r0, r3
    92d8:	f000 fb7a 	bl	99d0 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
    92dc:	f7fe ff70 	bl	81c0 <hal_debugger_connected>
    92e0:	b100      	cbz	r0, 92e4 <console_pkg_init+0x3c>
    92e2:	be01      	bkpt	0x0001
    92e4:	2000      	movs	r0, #0
    92e6:	9000      	str	r0, [sp, #0]
    92e8:	4b06      	ldr	r3, [pc, #24]	; (9304 <console_pkg_init+0x5c>)
    92ea:	681c      	ldr	r4, [r3, #0]
    92ec:	4603      	mov	r3, r0
    92ee:	4602      	mov	r2, r0
    92f0:	4601      	mov	r1, r0
    92f2:	47a0      	blx	r4
}
    92f4:	e7e6      	b.n	92c4 <console_pkg_init+0x1c>
    92f6:	bf00      	nop
    92f8:	20000506 	.word	0x20000506
    92fc:	200004e4 	.word	0x200004e4
    9300:	200004f8 	.word	0x200004f8
    9304:	200000ec 	.word	0x200000ec

00009308 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
    9308:	b40f      	push	{r0, r1, r2, r3}
    930a:	b510      	push	{r4, lr}
    930c:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
    930e:	f000 f81f 	bl	9350 <console_get_ticks>
    9312:	b160      	cbz	r0, 932e <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
    9314:	4b0c      	ldr	r3, [pc, #48]	; (9348 <console_printf+0x40>)
    9316:	681b      	ldr	r3, [r3, #0]
    9318:	b10b      	cbz	r3, 931e <console_printf+0x16>
    num_chars = 0;
    931a:	2400      	movs	r4, #0
    931c:	e008      	b.n	9330 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
    931e:	f002 f8cb 	bl	b4b8 <os_time_get>
    9322:	4601      	mov	r1, r0
    9324:	4809      	ldr	r0, [pc, #36]	; (934c <console_printf+0x44>)
    9326:	f002 fe0d 	bl	bf44 <printf>
    932a:	4604      	mov	r4, r0
    932c:	e000      	b.n	9330 <console_printf+0x28>
    num_chars = 0;
    932e:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
    9330:	a905      	add	r1, sp, #20
    9332:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
    9334:	9804      	ldr	r0, [sp, #16]
    9336:	f002 fe43 	bl	bfc0 <vprintf>
    va_end(args);

    return num_chars;
}
    933a:	4420      	add	r0, r4
    933c:	b002      	add	sp, #8
    933e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9342:	b004      	add	sp, #16
    9344:	4770      	bx	lr
    9346:	bf00      	nop
    9348:	200004f4 	.word	0x200004f4
    934c:	0002875c 	.word	0x0002875c

00009350 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
    9350:	4b01      	ldr	r3, [pc, #4]	; (9358 <console_get_ticks+0x8>)
    9352:	7818      	ldrb	r0, [r3, #0]
    9354:	4770      	bx	lr
    9356:	bf00      	nop
    9358:	20000505 	.word	0x20000505

0000935c <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    935c:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    935e:	f000 fb37 	bl	99d0 <__assert_func>
	...

00009364 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
    9364:	4b01      	ldr	r3, [pc, #4]	; (936c <sysinit_start+0x8>)
    9366:	2201      	movs	r2, #1
    9368:	701a      	strb	r2, [r3, #0]
}
    936a:	4770      	bx	lr
    936c:	20000506 	.word	0x20000506

00009370 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
    9370:	4b01      	ldr	r3, [pc, #4]	; (9378 <sysinit_end+0x8>)
    9372:	2200      	movs	r2, #0
    9374:	701a      	strb	r2, [r3, #0]
}
    9376:	4770      	bx	lr
    9378:	20000506 	.word	0x20000506

0000937c <bleprph_on_reset>:
    return 0;
}

static void
bleprph_on_reset(int reason)
{
    937c:	b508      	push	{r3, lr}
    MODLOG_DFLT_ERROR("Resetting state; reason=%d\n", reason);
    937e:	4601      	mov	r1, r0
    9380:	4802      	ldr	r0, [pc, #8]	; (938c <bleprph_on_reset+0x10>)
    9382:	f7ff ffc1 	bl	9308 <console_printf>
    MODLOG_DFLT_FLUSH();
    9386:	f7ff ff1f 	bl	91c8 <console_flush>
}
    938a:	bd08      	pop	{r3, pc}
    938c:	0002891c 	.word	0x0002891c

00009390 <bleprph_advertise>:
{
    9390:	b500      	push	{lr}
    9392:	b09f      	sub	sp, #124	; 0x7c
    rc = ble_hs_id_infer_auto(0, &own_addr_type);
    9394:	f10d 0173 	add.w	r1, sp, #115	; 0x73
    9398:	2000      	movs	r0, #0
    939a:	f008 f8f9 	bl	11590 <ble_hs_id_infer_auto>
    if (rc != 0) {
    939e:	b140      	cbz	r0, 93b2 <bleprph_advertise+0x22>
    93a0:	4601      	mov	r1, r0
        MODLOG_DFLT_ERROR("error determining address type; rc=%d\n", rc);
    93a2:	482d      	ldr	r0, [pc, #180]	; (9458 <bleprph_advertise+0xc8>)
    93a4:	f7ff ffb0 	bl	9308 <console_printf>
        MODLOG_DFLT_FLUSH();
    93a8:	f7ff ff0e 	bl	91c8 <console_flush>
}
    93ac:	b01f      	add	sp, #124	; 0x7c
    93ae:	f85d fb04 	ldr.w	pc, [sp], #4
    memset(&fields, 0, sizeof fields);
    93b2:	2260      	movs	r2, #96	; 0x60
    93b4:	2100      	movs	r1, #0
    93b6:	a802      	add	r0, sp, #8
    93b8:	f002 fa93 	bl	b8e2 <memset>
    fields.flags = BLE_HS_ADV_F_DISC_GEN |
    93bc:	2306      	movs	r3, #6
    93be:	f88d 3008 	strb.w	r3, [sp, #8]
    fields.tx_pwr_lvl_is_present = 1;
    93c2:	2301      	movs	r3, #1
    93c4:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    fields.tx_pwr_lvl = BLE_HS_ADV_TX_PWR_LVL_AUTO;
    93c8:	2380      	movs	r3, #128	; 0x80
    93ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    name = ble_svc_gap_device_name();
    93ce:	f00d f805 	bl	163dc <ble_svc_gap_device_name>
    fields.name = (uint8_t *)name;
    93d2:	9009      	str	r0, [sp, #36]	; 0x24
    fields.name_len = strlen(name);
    93d4:	f002 faba 	bl	b94c <strlen>
    93d8:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    fields.name_is_complete = 1;
    93dc:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    93e0:	f043 0301 	orr.w	r3, r3, #1
    93e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    fields.uuids16 = (ble_uuid16_t[]){
    93e8:	4b1c      	ldr	r3, [pc, #112]	; (945c <bleprph_advertise+0xcc>)
    93ea:	681a      	ldr	r2, [r3, #0]
    93ec:	ab1e      	add	r3, sp, #120	; 0x78
    93ee:	f843 2d04 	str.w	r2, [r3, #-4]!
    93f2:	9303      	str	r3, [sp, #12]
    fields.num_uuids16 = 1;
    93f4:	2301      	movs	r3, #1
    93f6:	f88d 3010 	strb.w	r3, [sp, #16]
    fields.uuids16_is_complete = 1;
    93fa:	f89d 3011 	ldrb.w	r3, [sp, #17]
    93fe:	f043 0301 	orr.w	r3, r3, #1
    9402:	f88d 3011 	strb.w	r3, [sp, #17]
    rc = ble_gap_adv_set_fields(&fields);
    9406:	a802      	add	r0, sp, #8
    9408:	f003 fefd 	bl	d206 <ble_gap_adv_set_fields>
    if (rc != 0) {
    940c:	4601      	mov	r1, r0
    940e:	b128      	cbz	r0, 941c <bleprph_advertise+0x8c>
        MODLOG_DFLT_ERROR("error setting advertisement data; rc=%d\n", rc);
    9410:	4813      	ldr	r0, [pc, #76]	; (9460 <bleprph_advertise+0xd0>)
    9412:	f7ff ff79 	bl	9308 <console_printf>
        MODLOG_DFLT_FLUSH();
    9416:	f7ff fed7 	bl	91c8 <console_flush>
        return;
    941a:	e7c7      	b.n	93ac <bleprph_advertise+0x1c>
    memset(&adv_params, 0, sizeof adv_params);
    941c:	2100      	movs	r1, #0
    941e:	f8cd 106a 	str.w	r1, [sp, #106]	; 0x6a
    9422:	f8cd 106e 	str.w	r1, [sp, #110]	; 0x6e
    adv_params.conn_mode = BLE_GAP_CONN_MODE_UND;
    9426:	2302      	movs	r3, #2
    9428:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    adv_params.disc_mode = BLE_GAP_DISC_MODE_GEN;
    942c:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    rc = ble_gap_adv_start(own_addr_type, NULL, BLE_HS_FOREVER,
    9430:	f89d 0073 	ldrb.w	r0, [sp, #115]	; 0x73
    9434:	9101      	str	r1, [sp, #4]
    9436:	4b0b      	ldr	r3, [pc, #44]	; (9464 <bleprph_advertise+0xd4>)
    9438:	9300      	str	r3, [sp, #0]
    943a:	ab1a      	add	r3, sp, #104	; 0x68
    943c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    9440:	f003 fe5a 	bl	d0f8 <ble_gap_adv_start>
    if (rc != 0) {
    9444:	4601      	mov	r1, r0
    9446:	2800      	cmp	r0, #0
    9448:	d0b0      	beq.n	93ac <bleprph_advertise+0x1c>
        MODLOG_DFLT_ERROR("error enabling advertisement; rc=%d\n", rc);
    944a:	4807      	ldr	r0, [pc, #28]	; (9468 <bleprph_advertise+0xd8>)
    944c:	f7ff ff5c 	bl	9308 <console_printf>
        MODLOG_DFLT_FLUSH();
    9450:	f7ff feba 	bl	91c8 <console_flush>
        return;
    9454:	e7aa      	b.n	93ac <bleprph_advertise+0x1c>
    9456:	bf00      	nop
    9458:	00028768 	.word	0x00028768
    945c:	00028764 	.word	0x00028764
    9460:	00028790 	.word	0x00028790
    9464:	00009511 	.word	0x00009511
    9468:	000287bc 	.word	0x000287bc

0000946c <bleprph_on_sync>:

static void
bleprph_on_sync(void)
{
    946c:	b508      	push	{r3, lr}
    int rc;

    /* Make sure we have proper identity address set (public preferred) */
    rc = ble_hs_util_ensure_addr(0);
    946e:	2000      	movs	r0, #0
    9470:	f00d f828 	bl	164c4 <ble_hs_util_ensure_addr>
    assert(rc == 0);
    9474:	b910      	cbnz	r0, 947c <bleprph_on_sync+0x10>

    /* Begin advertising. */
    bleprph_advertise();
    9476:	f7ff ff8b 	bl	9390 <bleprph_advertise>
}
    947a:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    947c:	f7fe fea0 	bl	81c0 <hal_debugger_connected>
    9480:	b100      	cbz	r0, 9484 <bleprph_on_sync+0x18>
    9482:	be01      	bkpt	0x0001
    9484:	2300      	movs	r3, #0
    9486:	461a      	mov	r2, r3
    9488:	4619      	mov	r1, r3
    948a:	4618      	mov	r0, r3
    948c:	f000 faa0 	bl	99d0 <__assert_func>

00009490 <bleprph_print_conn_desc>:
{
    9490:	b530      	push	{r4, r5, lr}
    9492:	b085      	sub	sp, #20
    9494:	4604      	mov	r4, r0
    MODLOG_DFLT_INFO("handle=%d our_ota_addr_type=%d our_ota_addr=",
    9496:	7c82      	ldrb	r2, [r0, #18]
    9498:	8c01      	ldrh	r1, [r0, #32]
    949a:	4818      	ldr	r0, [pc, #96]	; (94fc <bleprph_print_conn_desc+0x6c>)
    949c:	f7ff ff34 	bl	9308 <console_printf>
    print_addr(desc->our_ota_addr.val);
    94a0:	f104 0013 	add.w	r0, r4, #19
    94a4:	f000 f962 	bl	976c <print_addr>
    MODLOG_DFLT_INFO(" our_id_addr_type=%d our_id_addr=",
    94a8:	7921      	ldrb	r1, [r4, #4]
    94aa:	4815      	ldr	r0, [pc, #84]	; (9500 <bleprph_print_conn_desc+0x70>)
    94ac:	f7ff ff2c 	bl	9308 <console_printf>
    print_addr(desc->our_id_addr.val);
    94b0:	1d60      	adds	r0, r4, #5
    94b2:	f000 f95b 	bl	976c <print_addr>
    MODLOG_DFLT_INFO(" peer_ota_addr_type=%d peer_ota_addr=",
    94b6:	7e61      	ldrb	r1, [r4, #25]
    94b8:	4812      	ldr	r0, [pc, #72]	; (9504 <bleprph_print_conn_desc+0x74>)
    94ba:	f7ff ff25 	bl	9308 <console_printf>
    print_addr(desc->peer_ota_addr.val);
    94be:	f104 001a 	add.w	r0, r4, #26
    94c2:	f000 f953 	bl	976c <print_addr>
    MODLOG_DFLT_INFO(" peer_id_addr_type=%d peer_id_addr=",
    94c6:	7ae1      	ldrb	r1, [r4, #11]
    94c8:	480f      	ldr	r0, [pc, #60]	; (9508 <bleprph_print_conn_desc+0x78>)
    94ca:	f7ff ff1d 	bl	9308 <console_printf>
    print_addr(desc->peer_id_addr.val);
    94ce:	f104 000c 	add.w	r0, r4, #12
    94d2:	f000 f94b 	bl	976c <print_addr>
                desc->conn_itvl, desc->conn_latency,
    94d6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    94d8:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
                desc->supervision_timeout,
    94da:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
                desc->sec_state.encrypted,
    94dc:	7820      	ldrb	r0, [r4, #0]
    94de:	f000 0401 	and.w	r4, r0, #1
                desc->sec_state.authenticated,
    94e2:	f3c0 0540 	ubfx	r5, r0, #1, #1
                desc->sec_state.bonded);
    94e6:	f3c0 0080 	ubfx	r0, r0, #2, #1
    MODLOG_DFLT_INFO(" conn_itvl=%d conn_latency=%d supervision_timeout=%d "
    94ea:	9002      	str	r0, [sp, #8]
    94ec:	9501      	str	r5, [sp, #4]
    94ee:	9400      	str	r4, [sp, #0]
    94f0:	4806      	ldr	r0, [pc, #24]	; (950c <bleprph_print_conn_desc+0x7c>)
    94f2:	f7ff ff09 	bl	9308 <console_printf>
}
    94f6:	b005      	add	sp, #20
    94f8:	bd30      	pop	{r4, r5, pc}
    94fa:	bf00      	nop
    94fc:	00028938 	.word	0x00028938
    9500:	00028968 	.word	0x00028968
    9504:	0002898c 	.word	0x0002898c
    9508:	000289b4 	.word	0x000289b4
    950c:	000289d8 	.word	0x000289d8

00009510 <bleprph_gap_event>:
{
    9510:	b570      	push	{r4, r5, r6, lr}
    9512:	b090      	sub	sp, #64	; 0x40
    9514:	4604      	mov	r4, r0
    switch (event->type) {
    9516:	7803      	ldrb	r3, [r0, #0]
    9518:	2b11      	cmp	r3, #17
    951a:	f200 80bf 	bhi.w	969c <bleprph_gap_event+0x18c>
    951e:	e8df f003 	tbb	[pc, r3]
    9522:	2e09      	.short	0x2e09
    9524:	bdbd41bd 	.word	0xbdbd41bd
    9528:	5ebdbdbd 	.word	0x5ebdbdbd
    952c:	bdbdbd68 	.word	0xbdbdbd68
    9530:	a6bd9c85 	.word	0xa6bd9c85
                    event->connect.status == 0 ? "established" : "failed",
    9534:	6842      	ldr	r2, [r0, #4]
        MODLOG_DFLT_INFO("connection %s; status=%d ",
    9536:	b9b2      	cbnz	r2, 9566 <bleprph_gap_event+0x56>
    9538:	4959      	ldr	r1, [pc, #356]	; (96a0 <bleprph_gap_event+0x190>)
    953a:	485a      	ldr	r0, [pc, #360]	; (96a4 <bleprph_gap_event+0x194>)
    953c:	f7ff fee4 	bl	9308 <console_printf>
        if (event->connect.status == 0) {
    9540:	6863      	ldr	r3, [r4, #4]
    9542:	b93b      	cbnz	r3, 9554 <bleprph_gap_event+0x44>
            rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
    9544:	a905      	add	r1, sp, #20
    9546:	8920      	ldrh	r0, [r4, #8]
    9548:	f003 fd5c 	bl	d004 <ble_gap_conn_find>
            assert(rc == 0);
    954c:	b968      	cbnz	r0, 956a <bleprph_gap_event+0x5a>
            bleprph_print_conn_desc(&desc);
    954e:	a805      	add	r0, sp, #20
    9550:	f7ff ff9e 	bl	9490 <bleprph_print_conn_desc>
        MODLOG_DFLT_INFO("\n");
    9554:	4854      	ldr	r0, [pc, #336]	; (96a8 <bleprph_gap_event+0x198>)
    9556:	f7ff fed7 	bl	9308 <console_printf>
        if (event->connect.status != 0) {
    955a:	6864      	ldr	r4, [r4, #4]
    955c:	b1fc      	cbz	r4, 959e <bleprph_gap_event+0x8e>
            bleprph_advertise();
    955e:	f7ff ff17 	bl	9390 <bleprph_advertise>
        return 0;
    9562:	2400      	movs	r4, #0
    9564:	e01b      	b.n	959e <bleprph_gap_event+0x8e>
        MODLOG_DFLT_INFO("connection %s; status=%d ",
    9566:	4951      	ldr	r1, [pc, #324]	; (96ac <bleprph_gap_event+0x19c>)
    9568:	e7e7      	b.n	953a <bleprph_gap_event+0x2a>
            assert(rc == 0);
    956a:	f7fe fe29 	bl	81c0 <hal_debugger_connected>
    956e:	b100      	cbz	r0, 9572 <bleprph_gap_event+0x62>
    9570:	be01      	bkpt	0x0001
    9572:	2300      	movs	r3, #0
    9574:	461a      	mov	r2, r3
    9576:	4619      	mov	r1, r3
    9578:	4618      	mov	r0, r3
    957a:	f000 fa29 	bl	99d0 <__assert_func>
        MODLOG_DFLT_INFO("disconnect; reason=%d ", event->disconnect.reason);
    957e:	6841      	ldr	r1, [r0, #4]
    9580:	484b      	ldr	r0, [pc, #300]	; (96b0 <bleprph_gap_event+0x1a0>)
    9582:	f7ff fec1 	bl	9308 <console_printf>
        bleprph_print_conn_desc(&event->disconnect.conn);
    9586:	f104 0008 	add.w	r0, r4, #8
    958a:	f7ff ff81 	bl	9490 <bleprph_print_conn_desc>
        MODLOG_DFLT_INFO("\n");
    958e:	4846      	ldr	r0, [pc, #280]	; (96a8 <bleprph_gap_event+0x198>)
    9590:	f7ff feba 	bl	9308 <console_printf>
        bleprph_advertise();
    9594:	f7ff fefc 	bl	9390 <bleprph_advertise>
        MODLOG_DFLT_FLUSH();
    9598:	f7ff fe16 	bl	91c8 <console_flush>
        return 0;
    959c:	2400      	movs	r4, #0
}
    959e:	4620      	mov	r0, r4
    95a0:	b010      	add	sp, #64	; 0x40
    95a2:	bd70      	pop	{r4, r5, r6, pc}
        MODLOG_DFLT_INFO("connection updated; status=%d ",
    95a4:	6841      	ldr	r1, [r0, #4]
    95a6:	4843      	ldr	r0, [pc, #268]	; (96b4 <bleprph_gap_event+0x1a4>)
    95a8:	f7ff feae 	bl	9308 <console_printf>
        rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
    95ac:	a905      	add	r1, sp, #20
    95ae:	8920      	ldrh	r0, [r4, #8]
    95b0:	f003 fd28 	bl	d004 <ble_gap_conn_find>
        assert(rc == 0);
    95b4:	4604      	mov	r4, r0
    95b6:	b940      	cbnz	r0, 95ca <bleprph_gap_event+0xba>
        bleprph_print_conn_desc(&desc);
    95b8:	a805      	add	r0, sp, #20
    95ba:	f7ff ff69 	bl	9490 <bleprph_print_conn_desc>
        MODLOG_DFLT_INFO("\n");
    95be:	483a      	ldr	r0, [pc, #232]	; (96a8 <bleprph_gap_event+0x198>)
    95c0:	f7ff fea2 	bl	9308 <console_printf>
        MODLOG_DFLT_FLUSH();
    95c4:	f7ff fe00 	bl	91c8 <console_flush>
        return 0;
    95c8:	e7e9      	b.n	959e <bleprph_gap_event+0x8e>
        assert(rc == 0);
    95ca:	f7fe fdf9 	bl	81c0 <hal_debugger_connected>
    95ce:	b100      	cbz	r0, 95d2 <bleprph_gap_event+0xc2>
    95d0:	be01      	bkpt	0x0001
    95d2:	2300      	movs	r3, #0
    95d4:	461a      	mov	r2, r3
    95d6:	4619      	mov	r1, r3
    95d8:	4618      	mov	r0, r3
    95da:	f000 f9f9 	bl	99d0 <__assert_func>
        MODLOG_DFLT_INFO("advertise complete; reason=%d",
    95de:	6841      	ldr	r1, [r0, #4]
    95e0:	4835      	ldr	r0, [pc, #212]	; (96b8 <bleprph_gap_event+0x1a8>)
    95e2:	f7ff fe91 	bl	9308 <console_printf>
        bleprph_advertise();
    95e6:	f7ff fed3 	bl	9390 <bleprph_advertise>
        MODLOG_DFLT_FLUSH();
    95ea:	f7ff fded 	bl	91c8 <console_flush>
        return 0;
    95ee:	2400      	movs	r4, #0
    95f0:	e7d5      	b.n	959e <bleprph_gap_event+0x8e>
        MODLOG_DFLT_INFO("encryption change event; status=%d ",
    95f2:	6841      	ldr	r1, [r0, #4]
    95f4:	4831      	ldr	r0, [pc, #196]	; (96bc <bleprph_gap_event+0x1ac>)
    95f6:	f7ff fe87 	bl	9308 <console_printf>
        rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
    95fa:	a905      	add	r1, sp, #20
    95fc:	8920      	ldrh	r0, [r4, #8]
    95fe:	f003 fd01 	bl	d004 <ble_gap_conn_find>
        assert(rc == 0);
    9602:	4604      	mov	r4, r0
    9604:	b940      	cbnz	r0, 9618 <bleprph_gap_event+0x108>
        bleprph_print_conn_desc(&desc);
    9606:	a805      	add	r0, sp, #20
    9608:	f7ff ff42 	bl	9490 <bleprph_print_conn_desc>
        MODLOG_DFLT_INFO("\n");
    960c:	4826      	ldr	r0, [pc, #152]	; (96a8 <bleprph_gap_event+0x198>)
    960e:	f7ff fe7b 	bl	9308 <console_printf>
        MODLOG_DFLT_FLUSH();
    9612:	f7ff fdd9 	bl	91c8 <console_flush>
        return 0;
    9616:	e7c2      	b.n	959e <bleprph_gap_event+0x8e>
        assert(rc == 0);
    9618:	f7fe fdd2 	bl	81c0 <hal_debugger_connected>
    961c:	b100      	cbz	r0, 9620 <bleprph_gap_event+0x110>
    961e:	be01      	bkpt	0x0001
    9620:	2300      	movs	r3, #0
    9622:	461a      	mov	r2, r3
    9624:	4619      	mov	r1, r3
    9626:	4618      	mov	r0, r3
    9628:	f000 f9d2 	bl	99d0 <__assert_func>
                    event->subscribe.conn_handle,
    962c:	8881      	ldrh	r1, [r0, #4]
                    event->subscribe.attr_handle,
    962e:	88c2      	ldrh	r2, [r0, #6]
                    event->subscribe.reason,
    9630:	7a03      	ldrb	r3, [r0, #8]
                    event->subscribe.prev_notify,
    9632:	7a40      	ldrb	r0, [r0, #9]
    9634:	f000 0401 	and.w	r4, r0, #1
                    event->subscribe.cur_notify,
    9638:	f3c0 0540 	ubfx	r5, r0, #1, #1
                    event->subscribe.prev_indicate,
    963c:	f3c0 0680 	ubfx	r6, r0, #2, #1
                    event->subscribe.cur_indicate);
    9640:	f3c0 00c0 	ubfx	r0, r0, #3, #1
        MODLOG_DFLT_INFO("subscribe event; conn_handle=%d attr_handle=%d "
    9644:	9003      	str	r0, [sp, #12]
    9646:	9602      	str	r6, [sp, #8]
    9648:	9501      	str	r5, [sp, #4]
    964a:	9400      	str	r4, [sp, #0]
    964c:	481c      	ldr	r0, [pc, #112]	; (96c0 <bleprph_gap_event+0x1b0>)
    964e:	f7ff fe5b 	bl	9308 <console_printf>
        MODLOG_DFLT_FLUSH();
    9652:	f7ff fdb9 	bl	91c8 <console_flush>
        return 0;
    9656:	2400      	movs	r4, #0
    9658:	e7a1      	b.n	959e <bleprph_gap_event+0x8e>
        MODLOG_DFLT_INFO("mtu update event; conn_handle=%d cid=%d mtu=%d\n",
    965a:	8903      	ldrh	r3, [r0, #8]
    965c:	88c2      	ldrh	r2, [r0, #6]
    965e:	8881      	ldrh	r1, [r0, #4]
    9660:	4818      	ldr	r0, [pc, #96]	; (96c4 <bleprph_gap_event+0x1b4>)
    9662:	f7ff fe51 	bl	9308 <console_printf>
        MODLOG_DFLT_FLUSH();
    9666:	f7ff fdaf 	bl	91c8 <console_flush>
        return 0;
    966a:	2400      	movs	r4, #0
    966c:	e797      	b.n	959e <bleprph_gap_event+0x8e>
        rc = ble_gap_conn_find(event->repeat_pairing.conn_handle, &desc);
    966e:	a905      	add	r1, sp, #20
    9670:	8880      	ldrh	r0, [r0, #4]
    9672:	f003 fcc7 	bl	d004 <ble_gap_conn_find>
        assert(rc == 0);
    9676:	b938      	cbnz	r0, 9688 <bleprph_gap_event+0x178>
        ble_store_util_delete_peer(&desc.peer_id_addr);
    9678:	f10d 001f 	add.w	r0, sp, #31
    967c:	f00a fe9c 	bl	143b8 <ble_store_util_delete_peer>
        MODLOG_DFLT_FLUSH();
    9680:	f7ff fda2 	bl	91c8 <console_flush>
        return BLE_GAP_REPEAT_PAIRING_RETRY;
    9684:	2401      	movs	r4, #1
    9686:	e78a      	b.n	959e <bleprph_gap_event+0x8e>
        assert(rc == 0);
    9688:	f7fe fd9a 	bl	81c0 <hal_debugger_connected>
    968c:	b100      	cbz	r0, 9690 <bleprph_gap_event+0x180>
    968e:	be01      	bkpt	0x0001
    9690:	2300      	movs	r3, #0
    9692:	461a      	mov	r2, r3
    9694:	4619      	mov	r1, r3
    9696:	4618      	mov	r0, r3
    9698:	f000 f99a 	bl	99d0 <__assert_func>
    return 0;
    969c:	2400      	movs	r4, #0
    969e:	e77e      	b.n	959e <bleprph_gap_event+0x8e>
    96a0:	000287e4 	.word	0x000287e4
    96a4:	000287f8 	.word	0x000287f8
    96a8:	00029a60 	.word	0x00029a60
    96ac:	000287f0 	.word	0x000287f0
    96b0:	00028814 	.word	0x00028814
    96b4:	0002882c 	.word	0x0002882c
    96b8:	0002884c 	.word	0x0002884c
    96bc:	0002886c 	.word	0x0002886c
    96c0:	00028890 	.word	0x00028890
    96c4:	000288ec 	.word	0x000288ec

000096c8 <start_ble>:
 *
 * @return int 0
 */
int
start_ble(void)
{
    96c8:	b510      	push	{r4, lr}
    96ca:	b082      	sub	sp, #8
    MODLOG_DFLT_INFO("Starting BLE...\n");
    96cc:	481e      	ldr	r0, [pc, #120]	; (9748 <start_ble+0x80>)
    96ce:	f7ff fe1b 	bl	9308 <console_printf>
    MODLOG_DFLT_FLUSH();
    96d2:	f7ff fd79 	bl	91c8 <console_flush>
    static char ver_str[IMGMGR_NMGR_MAX_VER];
#endif
    int rc;

    /* Initialize the NimBLE host configuration. */
    ble_hs_cfg.reset_cb = bleprph_on_reset;
    96d6:	4b1d      	ldr	r3, [pc, #116]	; (974c <start_ble+0x84>)
    96d8:	4a1d      	ldr	r2, [pc, #116]	; (9750 <start_ble+0x88>)
    96da:	60da      	str	r2, [r3, #12]
    ble_hs_cfg.sync_cb = bleprph_on_sync;
    96dc:	4a1d      	ldr	r2, [pc, #116]	; (9754 <start_ble+0x8c>)
    96de:	611a      	str	r2, [r3, #16]
    ble_hs_cfg.gatts_register_cb = gatt_svr_register_cb;
    96e0:	4a1d      	ldr	r2, [pc, #116]	; (9758 <start_ble+0x90>)
    96e2:	601a      	str	r2, [r3, #0]
    ble_hs_cfg.store_status_cb = ble_store_util_status_rr;
    96e4:	4a1d      	ldr	r2, [pc, #116]	; (975c <start_ble+0x94>)
    96e6:	621a      	str	r2, [r3, #32]

    rc = gatt_svr_init();
    96e8:	f000 f8da 	bl	98a0 <gatt_svr_init>
    assert(rc == 0);
    96ec:	b9c0      	cbnz	r0, 9720 <start_ble+0x58>

    /* Set the default device name. */
    rc = ble_svc_gap_device_name_set("pinetime");
    96ee:	481c      	ldr	r0, [pc, #112]	; (9760 <start_ble+0x98>)
    96f0:	f00c fe78 	bl	163e4 <ble_svc_gap_device_name_set>
    assert(rc == 0);
    96f4:	b9f0      	cbnz	r0, 9734 <start_ble+0x6c>

#if MYNEWT_VAL(BLE_SVC_DIS_FIRMWARE_REVISION_READ_PERM) >= 0
    /* Set firmware version in DIS */
    imgr_my_version(&ver);
    96f6:	4668      	mov	r0, sp
    96f8:	f002 fef6 	bl	c4e8 <imgr_my_version>
    imgr_ver_str(&ver, ver_str);
    96fc:	4c19      	ldr	r4, [pc, #100]	; (9764 <start_ble+0x9c>)
    96fe:	4621      	mov	r1, r4
    9700:	4668      	mov	r0, sp
    9702:	f002 ff65 	bl	c5d0 <imgr_ver_str>
    ble_svc_dis_firmware_revision_set(ver_str);
    9706:	4620      	mov	r0, r4
    9708:	f00c fd9c 	bl	16244 <ble_svc_dis_firmware_revision_set>

#if MYNEWT_VAL(BLEPRPH_LE_PHY_SUPPORT)
    phy_init();
#endif

    conf_load();
    970c:	f00d f88a 	bl	16824 <conf_load>
        if (rc == 0) {
            hal_system_start(entry);
        }
    }
#endif
    MODLOG_DFLT_INFO("BLE started\n");
    9710:	4815      	ldr	r0, [pc, #84]	; (9768 <start_ble+0xa0>)
    9712:	f7ff fdf9 	bl	9308 <console_printf>
    MODLOG_DFLT_FLUSH();
    9716:	f7ff fd57 	bl	91c8 <console_flush>
    return 0;
}
    971a:	2000      	movs	r0, #0
    971c:	b002      	add	sp, #8
    971e:	bd10      	pop	{r4, pc}
    assert(rc == 0);
    9720:	f7fe fd4e 	bl	81c0 <hal_debugger_connected>
    9724:	b100      	cbz	r0, 9728 <start_ble+0x60>
    9726:	be01      	bkpt	0x0001
    9728:	2300      	movs	r3, #0
    972a:	461a      	mov	r2, r3
    972c:	4619      	mov	r1, r3
    972e:	4618      	mov	r0, r3
    9730:	f000 f94e 	bl	99d0 <__assert_func>
    assert(rc == 0);
    9734:	f7fe fd44 	bl	81c0 <hal_debugger_connected>
    9738:	b100      	cbz	r0, 973c <start_ble+0x74>
    973a:	be01      	bkpt	0x0001
    973c:	2300      	movs	r3, #0
    973e:	461a      	mov	r2, r3
    9740:	4619      	mov	r1, r3
    9742:	4618      	mov	r0, r3
    9744:	f000 f944 	bl	99d0 <__assert_func>
    9748:	00028a38 	.word	0x00028a38
    974c:	2000017c 	.word	0x2000017c
    9750:	0000937d 	.word	0x0000937d
    9754:	0000946d 	.word	0x0000946d
    9758:	00009851 	.word	0x00009851
    975c:	0001441f 	.word	0x0001441f
    9760:	00028a4c 	.word	0x00028a4c
    9764:	20000508 	.word	0x20000508
    9768:	00028a58 	.word	0x00028a58

0000976c <print_addr>:
    const uint8_t *u8p;

    u8p = addr;
    MODLOG_DFLT(INFO, "%02x:%02x:%02x:%02x:%02x:%02x",
                u8p[5], u8p[4], u8p[3], u8p[2], u8p[1], u8p[0]);
}
    976c:	4770      	bx	lr

0000976e <gatt_svr_chr_write>:
};

static int
gatt_svr_chr_write(struct os_mbuf *om, uint16_t min_len, uint16_t max_len,
                   void *dst, uint16_t *len)
{
    976e:	b510      	push	{r4, lr}
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
    9770:	8a04      	ldrh	r4, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
    9772:	428c      	cmp	r4, r1
    9774:	d309      	bcc.n	978a <gatt_svr_chr_write+0x1c>
    9776:	4294      	cmp	r4, r2
    9778:	d809      	bhi.n	978e <gatt_svr_chr_write+0x20>
    977a:	4619      	mov	r1, r3
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
    977c:	9b02      	ldr	r3, [sp, #8]
    977e:	f007 ff73 	bl	11668 <ble_hs_mbuf_to_flat>
    if (rc != 0) {
    9782:	4603      	mov	r3, r0
    9784:	b120      	cbz	r0, 9790 <gatt_svr_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
    9786:	230e      	movs	r3, #14
    9788:	e002      	b.n	9790 <gatt_svr_chr_write+0x22>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    978a:	230d      	movs	r3, #13
    978c:	e000      	b.n	9790 <gatt_svr_chr_write+0x22>
    978e:	230d      	movs	r3, #13
    }

    return 0;
}
    9790:	4618      	mov	r0, r3
    9792:	bd10      	pop	{r4, pc}

00009794 <gatt_svr_chr_access_sec_test>:

static int
gatt_svr_chr_access_sec_test(uint16_t conn_handle, uint16_t attr_handle,
                             struct ble_gatt_access_ctxt *ctxt,
                             void *arg)
{
    9794:	b530      	push	{r4, r5, lr}
    9796:	b085      	sub	sp, #20
    9798:	4614      	mov	r4, r2
    const ble_uuid_t *uuid;
    int rand_num;
    int rc;

    uuid = ctxt->chr->uuid;
    979a:	6893      	ldr	r3, [r2, #8]
    979c:	681d      	ldr	r5, [r3, #0]

    /* Determine which characteristic is being accessed by examining its
     * 128-bit UUID.
     */

    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_rand_uuid.u) == 0) {
    979e:	4929      	ldr	r1, [pc, #164]	; (9844 <gatt_svr_chr_access_sec_test+0xb0>)
    97a0:	4628      	mov	r0, r5
    97a2:	f00a fe7f 	bl	144a4 <ble_uuid_cmp>
    97a6:	b9d8      	cbnz	r0, 97e0 <gatt_svr_chr_access_sec_test+0x4c>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
    97a8:	7823      	ldrb	r3, [r4, #0]
    97aa:	b96b      	cbnz	r3, 97c8 <gatt_svr_chr_access_sec_test+0x34>
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
    97ac:	f002 f844 	bl	b838 <lrand48>

        /* Respond with a 32-bit random number. */
        rand_num = rand();
    97b0:	a904      	add	r1, sp, #16
    97b2:	f841 0d04 	str.w	r0, [r1, #-4]!
        rc = os_mbuf_append(ctxt->om, &rand_num, sizeof rand_num);
    97b6:	2204      	movs	r2, #4
    97b8:	6860      	ldr	r0, [r4, #4]
    97ba:	f000 fd95 	bl	a2e8 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    97be:	4603      	mov	r3, r0
    97c0:	b960      	cbnz	r0, 97dc <gatt_svr_chr_access_sec_test+0x48>
    /* Unknown characteristic; the nimble stack should not have called this
     * function.
     */
    assert(0);
    return BLE_ATT_ERR_UNLIKELY;
}
    97c2:	4618      	mov	r0, r3
    97c4:	b005      	add	sp, #20
    97c6:	bd30      	pop	{r4, r5, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
    97c8:	f7fe fcfa 	bl	81c0 <hal_debugger_connected>
    97cc:	b100      	cbz	r0, 97d0 <gatt_svr_chr_access_sec_test+0x3c>
    97ce:	be01      	bkpt	0x0001
    97d0:	2300      	movs	r3, #0
    97d2:	461a      	mov	r2, r3
    97d4:	4619      	mov	r1, r3
    97d6:	4618      	mov	r0, r3
    97d8:	f000 f8fa 	bl	99d0 <__assert_func>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    97dc:	2311      	movs	r3, #17
    97de:	e7f0      	b.n	97c2 <gatt_svr_chr_access_sec_test+0x2e>
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_uuid.u) == 0) {
    97e0:	4919      	ldr	r1, [pc, #100]	; (9848 <gatt_svr_chr_access_sec_test+0xb4>)
    97e2:	4628      	mov	r0, r5
    97e4:	f00a fe5e 	bl	144a4 <ble_uuid_cmp>
    97e8:	bb08      	cbnz	r0, 982e <gatt_svr_chr_access_sec_test+0x9a>
        switch (ctxt->op) {
    97ea:	7823      	ldrb	r3, [r4, #0]
    97ec:	b15b      	cbz	r3, 9806 <gatt_svr_chr_access_sec_test+0x72>
    97ee:	2b01      	cmp	r3, #1
    97f0:	d113      	bne.n	981a <gatt_svr_chr_access_sec_test+0x86>
            rc = gatt_svr_chr_write(ctxt->om,
    97f2:	6860      	ldr	r0, [r4, #4]
    97f4:	2300      	movs	r3, #0
    97f6:	9300      	str	r3, [sp, #0]
    97f8:	4b14      	ldr	r3, [pc, #80]	; (984c <gatt_svr_chr_access_sec_test+0xb8>)
    97fa:	2201      	movs	r2, #1
    97fc:	4611      	mov	r1, r2
    97fe:	f7ff ffb6 	bl	976e <gatt_svr_chr_write>
    9802:	4603      	mov	r3, r0
            return rc;
    9804:	e7dd      	b.n	97c2 <gatt_svr_chr_access_sec_test+0x2e>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_sec_test_static_val,
    9806:	2201      	movs	r2, #1
    9808:	4910      	ldr	r1, [pc, #64]	; (984c <gatt_svr_chr_access_sec_test+0xb8>)
    980a:	6860      	ldr	r0, [r4, #4]
    980c:	f000 fd6c 	bl	a2e8 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    9810:	4603      	mov	r3, r0
    9812:	2800      	cmp	r0, #0
    9814:	d0d5      	beq.n	97c2 <gatt_svr_chr_access_sec_test+0x2e>
    9816:	2311      	movs	r3, #17
    9818:	e7d3      	b.n	97c2 <gatt_svr_chr_access_sec_test+0x2e>
            assert(0);
    981a:	f7fe fcd1 	bl	81c0 <hal_debugger_connected>
    981e:	b100      	cbz	r0, 9822 <gatt_svr_chr_access_sec_test+0x8e>
    9820:	be01      	bkpt	0x0001
    9822:	2300      	movs	r3, #0
    9824:	461a      	mov	r2, r3
    9826:	4619      	mov	r1, r3
    9828:	4618      	mov	r0, r3
    982a:	f000 f8d1 	bl	99d0 <__assert_func>
    assert(0);
    982e:	f7fe fcc7 	bl	81c0 <hal_debugger_connected>
    9832:	b100      	cbz	r0, 9836 <gatt_svr_chr_access_sec_test+0xa2>
    9834:	be01      	bkpt	0x0001
    9836:	2300      	movs	r3, #0
    9838:	461a      	mov	r2, r3
    983a:	4619      	mov	r1, r3
    983c:	4618      	mov	r0, r3
    983e:	f000 f8c7 	bl	99d0 <__assert_func>
    9842:	bf00      	nop
    9844:	00028a68 	.word	0x00028a68
    9848:	00028a7c 	.word	0x00028a7c
    984c:	20000521 	.word	0x20000521

00009850 <gatt_svr_register_cb>:

void
gatt_svr_register_cb(struct ble_gatt_register_ctxt *ctxt, void *arg)
{
    9850:	b500      	push	{lr}
    9852:	b08b      	sub	sp, #44	; 0x2c
    char buf[BLE_UUID_STR_LEN];

    switch (ctxt->op) {
    9854:	7803      	ldrb	r3, [r0, #0]
    9856:	2b02      	cmp	r3, #2
    9858:	d015      	beq.n	9886 <gatt_svr_register_cb+0x36>
    985a:	2b03      	cmp	r3, #3
    985c:	d019      	beq.n	9892 <gatt_svr_register_cb+0x42>
    985e:	2b01      	cmp	r3, #1
    9860:	d009      	beq.n	9876 <gatt_svr_register_cb+0x26>
                    ble_uuid_to_str(ctxt->dsc.dsc_def->uuid, buf),
                    ctxt->dsc.handle);
        break;

    default:
        assert(0);
    9862:	f7fe fcad 	bl	81c0 <hal_debugger_connected>
    9866:	b100      	cbz	r0, 986a <gatt_svr_register_cb+0x1a>
    9868:	be01      	bkpt	0x0001
    986a:	2300      	movs	r3, #0
    986c:	461a      	mov	r2, r3
    986e:	4619      	mov	r1, r3
    9870:	4618      	mov	r0, r3
    9872:	f000 f8ad 	bl	99d0 <__assert_func>
        MODLOG_DFLT(DEBUG, "registered service %s with handle=%d\n",
    9876:	6883      	ldr	r3, [r0, #8]
    9878:	4669      	mov	r1, sp
    987a:	6858      	ldr	r0, [r3, #4]
    987c:	f00a fe30 	bl	144e0 <ble_uuid_to_str>
        break;
    }
}
    9880:	b00b      	add	sp, #44	; 0x2c
    9882:	f85d fb04 	ldr.w	pc, [sp], #4
        MODLOG_DFLT(DEBUG, "registering characteristic %s with "
    9886:	6883      	ldr	r3, [r0, #8]
    9888:	4669      	mov	r1, sp
    988a:	6818      	ldr	r0, [r3, #0]
    988c:	f00a fe28 	bl	144e0 <ble_uuid_to_str>
        break;
    9890:	e7f6      	b.n	9880 <gatt_svr_register_cb+0x30>
        MODLOG_DFLT(DEBUG, "registering descriptor %s with handle=%d\n",
    9892:	6883      	ldr	r3, [r0, #8]
    9894:	4669      	mov	r1, sp
    9896:	6818      	ldr	r0, [r3, #0]
    9898:	f00a fe22 	bl	144e0 <ble_uuid_to_str>
        break;
    989c:	e7f0      	b.n	9880 <gatt_svr_register_cb+0x30>
	...

000098a0 <gatt_svr_init>:

int
gatt_svr_init(void)
{
    98a0:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
    98a2:	4806      	ldr	r0, [pc, #24]	; (98bc <gatt_svr_init+0x1c>)
    98a4:	f006 f8a4 	bl	f9f0 <ble_gatts_count_cfg>
    if (rc != 0) {
    98a8:	4603      	mov	r3, r0
    98aa:	b108      	cbz	r0, 98b0 <gatt_svr_init+0x10>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    98ac:	4618      	mov	r0, r3
    98ae:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
    98b0:	4802      	ldr	r0, [pc, #8]	; (98bc <gatt_svr_init+0x1c>)
    98b2:	f006 f879 	bl	f9a8 <ble_gatts_add_svcs>
    98b6:	4603      	mov	r3, r0
    98b8:	e7f8      	b.n	98ac <gatt_svr_init+0xc>
    98ba:	bf00      	nop
    98bc:	00028aa4 	.word	0x00028aa4

000098c0 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    98c0:	4a09      	ldr	r2, [pc, #36]	; (98e8 <NVIC_Relocate+0x28>)
    98c2:	4b0a      	ldr	r3, [pc, #40]	; (98ec <NVIC_Relocate+0x2c>)
    98c4:	429a      	cmp	r2, r3
    98c6:	d00a      	beq.n	98de <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    98c8:	2300      	movs	r3, #0
    98ca:	e006      	b.n	98da <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
    98cc:	4a07      	ldr	r2, [pc, #28]	; (98ec <NVIC_Relocate+0x2c>)
    98ce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    98d2:	4a05      	ldr	r2, [pc, #20]	; (98e8 <NVIC_Relocate+0x28>)
    98d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    98d8:	3301      	adds	r3, #1
    98da:	2b35      	cmp	r3, #53	; 0x35
    98dc:	ddf6      	ble.n	98cc <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    98de:	4a02      	ldr	r2, [pc, #8]	; (98e8 <NVIC_Relocate+0x28>)
    98e0:	4b03      	ldr	r3, [pc, #12]	; (98f0 <NVIC_Relocate+0x30>)
    98e2:	609a      	str	r2, [r3, #8]
#endif
}
    98e4:	4770      	bx	lr
    98e6:	bf00      	nop
    98e8:	20000000 	.word	0x20000000
    98ec:	00008020 	.word	0x00008020
    98f0:	e000ed00 	.word	0xe000ed00

000098f4 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
    98f4:	b508      	push	{r3, lr}
    assert(0);
    98f6:	f7fe fc63 	bl	81c0 <hal_debugger_connected>
    98fa:	b100      	cbz	r0, 98fe <nrf52_hal_wdt_default_handler+0xa>
    98fc:	be01      	bkpt	0x0001
    98fe:	2300      	movs	r3, #0
    9900:	461a      	mov	r2, r3
    9902:	4619      	mov	r1, r3
    9904:	4618      	mov	r0, r3
    9906:	f000 f863 	bl	99d0 <__assert_func>
	...

0000990c <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
    990c:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
    990e:	4b06      	ldr	r3, [pc, #24]	; (9928 <nrf52_wdt_irq_handler+0x1c>)
    9910:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
    9914:	f013 0f01 	tst.w	r3, #1
    9918:	d100      	bne.n	991c <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
    991a:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
    991c:	4b02      	ldr	r3, [pc, #8]	; (9928 <nrf52_wdt_irq_handler+0x1c>)
    991e:	2200      	movs	r2, #0
    9920:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
    9924:	f7ff ffe6 	bl	98f4 <nrf52_hal_wdt_default_handler>
    9928:	40010000 	.word	0x40010000

0000992c <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
    992c:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
    992e:	4b19      	ldr	r3, [pc, #100]	; (9994 <hal_watchdog_init+0x68>)
    9930:	2201      	movs	r2, #1
    9932:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
    9936:	4b18      	ldr	r3, [pc, #96]	; (9998 <hal_watchdog_init+0x6c>)
    9938:	4298      	cmp	r0, r3
    993a:	d821      	bhi.n	9980 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
    993c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    9940:	0153      	lsls	r3, r2, #5
    9942:	4a16      	ldr	r2, [pc, #88]	; (999c <hal_watchdog_init+0x70>)
    9944:	fba2 2303 	umull	r2, r3, r2, r3
    9948:	08db      	lsrs	r3, r3, #3
    994a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
    994e:	4b11      	ldr	r3, [pc, #68]	; (9994 <hal_watchdog_init+0x68>)
    9950:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
    9954:	4a12      	ldr	r2, [pc, #72]	; (99a0 <hal_watchdog_init+0x74>)
    9956:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    9958:	4912      	ldr	r1, [pc, #72]	; (99a4 <hal_watchdog_init+0x78>)
    995a:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    995e:	4a12      	ldr	r2, [pc, #72]	; (99a8 <hal_watchdog_init+0x7c>)
    9960:	21e0      	movs	r1, #224	; 0xe0
    9962:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9966:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    996a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    996e:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
    9970:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
    9974:	f042 0201 	orr.w	r2, r2, #1
    9978:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
    997c:	2000      	movs	r0, #0
    997e:	bd08      	pop	{r3, pc}
        assert(0);
    9980:	f7fe fc1e 	bl	81c0 <hal_debugger_connected>
    9984:	b100      	cbz	r0, 9988 <hal_watchdog_init+0x5c>
    9986:	be01      	bkpt	0x0001
    9988:	2300      	movs	r3, #0
    998a:	461a      	mov	r2, r3
    998c:	4619      	mov	r1, r3
    998e:	4618      	mov	r0, r3
    9990:	f000 f81e 	bl	99d0 <__assert_func>
    9994:	40010000 	.word	0x40010000
    9998:	02aaaaaa 	.word	0x02aaaaaa
    999c:	10624dd3 	.word	0x10624dd3
    99a0:	e000ed00 	.word	0xe000ed00
    99a4:	0000990d 	.word	0x0000990d
    99a8:	e000e100 	.word	0xe000e100

000099ac <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
    99ac:	4b02      	ldr	r3, [pc, #8]	; (99b8 <hal_watchdog_enable+0xc>)
    99ae:	2201      	movs	r2, #1
    99b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
    99b4:	601a      	str	r2, [r3, #0]
}
    99b6:	4770      	bx	lr
    99b8:	40010000 	.word	0x40010000

000099bc <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
    99bc:	4b02      	ldr	r3, [pc, #8]	; (99c8 <hal_watchdog_tickle+0xc>)
    99be:	4a03      	ldr	r2, [pc, #12]	; (99cc <hal_watchdog_tickle+0x10>)
    99c0:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
    99c4:	4770      	bx	lr
    99c6:	bf00      	nop
    99c8:	40010000 	.word	0x40010000
    99cc:	6e524635 	.word	0x6e524635

000099d0 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    99d0:	b508      	push	{r3, lr}
    99d2:	4675      	mov	r5, lr
    99d4:	4604      	mov	r4, r0
    99d6:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    99d8:	f001 fdec 	bl	b5b4 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    99dc:	f7ff fc5f 	bl	929e <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    99e0:	b16c      	cbz	r4, 99fe <__assert_func+0x2e>
    99e2:	4633      	mov	r3, r6
    99e4:	4622      	mov	r2, r4
    99e6:	4629      	mov	r1, r5
    99e8:	4807      	ldr	r0, [pc, #28]	; (9a08 <__assert_func+0x38>)
    99ea:	f7ff fc8d 	bl	9308 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    99ee:	4b07      	ldr	r3, [pc, #28]	; (9a0c <__assert_func+0x3c>)
    99f0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    99f4:	605a      	str	r2, [r3, #4]
    asm("isb");
    99f6:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    99fa:	f7fe fbe9 	bl	81d0 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    99fe:	4629      	mov	r1, r5
    9a00:	4803      	ldr	r0, [pc, #12]	; (9a10 <__assert_func+0x40>)
    9a02:	f7ff fc81 	bl	9308 <console_printf>
    9a06:	e7f2      	b.n	99ee <__assert_func+0x1e>
    9a08:	00028ad4 	.word	0x00028ad4
    9a0c:	e000ed00 	.word	0xe000ed00
    9a10:	00028ac4 	.word	0x00028ac4

00009a14 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    9a14:	b500      	push	{lr}
    9a16:	b083      	sub	sp, #12
    9a18:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    9a1a:	f7ff fc40 	bl	929e <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    9a1e:	4d1b      	ldr	r5, [pc, #108]	; (9a8c <os_default_irq+0x78>)
    9a20:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    9a22:	6822      	ldr	r2, [r4, #0]
    9a24:	f3c1 0108 	ubfx	r1, r1, #0, #9
    9a28:	4819      	ldr	r0, [pc, #100]	; (9a90 <os_default_irq+0x7c>)
    9a2a:	f7ff fc6d 	bl	9308 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    9a2e:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    9a30:	6883      	ldr	r3, [r0, #8]
    9a32:	6842      	ldr	r2, [r0, #4]
    9a34:	6801      	ldr	r1, [r0, #0]
    9a36:	68c0      	ldr	r0, [r0, #12]
    9a38:	9000      	str	r0, [sp, #0]
    9a3a:	4816      	ldr	r0, [pc, #88]	; (9a94 <os_default_irq+0x80>)
    9a3c:	f7ff fc64 	bl	9308 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    9a40:	6923      	ldr	r3, [r4, #16]
    9a42:	9300      	str	r3, [sp, #0]
    9a44:	68e3      	ldr	r3, [r4, #12]
    9a46:	68a2      	ldr	r2, [r4, #8]
    9a48:	6861      	ldr	r1, [r4, #4]
    9a4a:	4813      	ldr	r0, [pc, #76]	; (9a98 <os_default_irq+0x84>)
    9a4c:	f7ff fc5c 	bl	9308 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    9a50:	6a23      	ldr	r3, [r4, #32]
    9a52:	9300      	str	r3, [sp, #0]
    9a54:	69e3      	ldr	r3, [r4, #28]
    9a56:	69a2      	ldr	r2, [r4, #24]
    9a58:	6961      	ldr	r1, [r4, #20]
    9a5a:	4810      	ldr	r0, [pc, #64]	; (9a9c <os_default_irq+0x88>)
    9a5c:	f7ff fc54 	bl	9308 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    9a60:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    9a62:	6983      	ldr	r3, [r0, #24]
    9a64:	6942      	ldr	r2, [r0, #20]
    9a66:	6901      	ldr	r1, [r0, #16]
    9a68:	69c0      	ldr	r0, [r0, #28]
    9a6a:	9000      	str	r0, [sp, #0]
    9a6c:	480c      	ldr	r0, [pc, #48]	; (9aa0 <os_default_irq+0x8c>)
    9a6e:	f7ff fc4b 	bl	9308 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    9a72:	6869      	ldr	r1, [r5, #4]
    9a74:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    9a76:	6aab      	ldr	r3, [r5, #40]	; 0x28
    9a78:	480a      	ldr	r0, [pc, #40]	; (9aa4 <os_default_irq+0x90>)
    9a7a:	f7ff fc45 	bl	9308 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    9a7e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    9a80:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    9a82:	4809      	ldr	r0, [pc, #36]	; (9aa8 <os_default_irq+0x94>)
    9a84:	f7ff fc40 	bl	9308 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    9a88:	f7fe fba2 	bl	81d0 <hal_system_reset>
    9a8c:	e000ed00 	.word	0xe000ed00
    9a90:	00028aec 	.word	0x00028aec
    9a94:	00028b20 	.word	0x00028b20
    9a98:	00028b54 	.word	0x00028b54
    9a9c:	00028b88 	.word	0x00028b88
    9aa0:	00028bbc 	.word	0x00028bbc
    9aa4:	00028bf0 	.word	0x00028bf0
    9aa8:	00028c18 	.word	0x00028c18

00009aac <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    9aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
    9aae:	f7ff ff85 	bl	99bc <hal_watchdog_tickle>
    sanity_last = 0;
    9ab2:	2500      	movs	r5, #0
    9ab4:	e00e      	b.n	9ad4 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
    9ab6:	f001 fa5f 	bl	af78 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    9aba:	f7ff ff7f 	bl	99bc <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
    9abe:	4625      	mov	r5, r4
    9ac0:	e014      	b.n	9aec <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
    9ac2:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
    9ac6:	e025      	b.n	9b14 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
    9ac8:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    9aca:	f010 fef9 	bl	1a8c0 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    9ace:	4638      	mov	r0, r7
    9ad0:	f001 fd76 	bl	b5c0 <os_arch_restore_sr>
        ++g_os_idle_ctr;
    9ad4:	4a15      	ldr	r2, [pc, #84]	; (9b2c <os_idle_task+0x80>)
    9ad6:	6813      	ldr	r3, [r2, #0]
    9ad8:	3301      	adds	r3, #1
    9ada:	6013      	str	r3, [r2, #0]
        now = os_time_get();
    9adc:	f001 fcec 	bl	b4b8 <os_time_get>
    9ae0:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
    9ae2:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
    9ae6:	1ac3      	subs	r3, r0, r3
    9ae8:	2b00      	cmp	r3, #0
    9aea:	dae4      	bge.n	9ab6 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
    9aec:	f001 fd62 	bl	b5b4 <os_arch_save_sr>
    9af0:	4607      	mov	r7, r0
        now = os_time_get();
    9af2:	f001 fce1 	bl	b4b8 <os_time_get>
    9af6:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
    9af8:	f001 fb80 	bl	b1fc <os_sched_wakeup_ticks>
    9afc:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    9afe:	4630      	mov	r0, r6
    9b00:	f000 f9a8 	bl	9e54 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
    9b04:	42a0      	cmp	r0, r4
    9b06:	bf28      	it	cs
    9b08:	4620      	movcs	r0, r4
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
    9b0a:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
    9b0e:	1b9b      	subs	r3, r3, r6
        if ((int)sanity_to_next <= 0) {
    9b10:	2b00      	cmp	r3, #0
    9b12:	ddd6      	ble.n	9ac2 <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
    9b14:	4298      	cmp	r0, r3
    9b16:	bf28      	it	cs
    9b18:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
    9b1a:	280b      	cmp	r0, #11
    9b1c:	d9d4      	bls.n	9ac8 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
    9b1e:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    9b22:	d9d2      	bls.n	9aca <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
    9b24:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
    9b28:	e7cf      	b.n	9aca <os_idle_task+0x1e>
    9b2a:	bf00      	nop
    9b2c:	20000678 	.word	0x20000678

00009b30 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
    9b30:	b508      	push	{r3, lr}
    9b32:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    9b34:	2100      	movs	r1, #0
    9b36:	4608      	mov	r0, r1
    9b38:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    9b3a:	f7fe fb41 	bl	81c0 <hal_debugger_connected>
    9b3e:	b100      	cbz	r0, 9b42 <os_main+0x12>
    9b40:	be01      	bkpt	0x0001
    9b42:	2300      	movs	r3, #0
    9b44:	461a      	mov	r2, r3
    9b46:	4619      	mov	r1, r3
    9b48:	4618      	mov	r0, r3
    9b4a:	f7ff ff41 	bl	99d0 <__assert_func>
	...

00009b50 <os_started>:
}
    9b50:	4b01      	ldr	r3, [pc, #4]	; (9b58 <os_started+0x8>)
    9b52:	6818      	ldr	r0, [r3, #0]
    9b54:	4770      	bx	lr
    9b56:	bf00      	nop
    9b58:	200026d0 	.word	0x200026d0

00009b5c <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    9b5c:	b500      	push	{lr}
    9b5e:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    9b60:	2340      	movs	r3, #64	; 0x40
    9b62:	9303      	str	r3, [sp, #12]
    9b64:	4b1b      	ldr	r3, [pc, #108]	; (9bd4 <os_init_idle_task+0x78>)
    9b66:	9302      	str	r3, [sp, #8]
    9b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9b6c:	9301      	str	r3, [sp, #4]
    9b6e:	23ff      	movs	r3, #255	; 0xff
    9b70:	9300      	str	r3, [sp, #0]
    9b72:	2300      	movs	r3, #0
    9b74:	4a18      	ldr	r2, [pc, #96]	; (9bd8 <os_init_idle_task+0x7c>)
    9b76:	4919      	ldr	r1, [pc, #100]	; (9bdc <os_init_idle_task+0x80>)
    9b78:	4819      	ldr	r0, [pc, #100]	; (9be0 <os_init_idle_task+0x84>)
    9b7a:	f001 fba3 	bl	b2c4 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    9b7e:	b950      	cbnz	r0, 9b96 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
    9b80:	f001 fa3c 	bl	affc <os_sanity_init>
    assert(rc == 0);
    9b84:	b988      	cbnz	r0, 9baa <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    9b86:	f247 5030 	movw	r0, #30000	; 0x7530
    9b8a:	f7ff fecf 	bl	992c <hal_watchdog_init>
    assert(rc == 0);
    9b8e:	b9b0      	cbnz	r0, 9bbe <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
    9b90:	b005      	add	sp, #20
    9b92:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    9b96:	f7fe fb13 	bl	81c0 <hal_debugger_connected>
    9b9a:	b100      	cbz	r0, 9b9e <os_init_idle_task+0x42>
    9b9c:	be01      	bkpt	0x0001
    9b9e:	2300      	movs	r3, #0
    9ba0:	461a      	mov	r2, r3
    9ba2:	4619      	mov	r1, r3
    9ba4:	4618      	mov	r0, r3
    9ba6:	f7ff ff13 	bl	99d0 <__assert_func>
    assert(rc == 0);
    9baa:	f7fe fb09 	bl	81c0 <hal_debugger_connected>
    9bae:	b100      	cbz	r0, 9bb2 <os_init_idle_task+0x56>
    9bb0:	be01      	bkpt	0x0001
    9bb2:	2300      	movs	r3, #0
    9bb4:	461a      	mov	r2, r3
    9bb6:	4619      	mov	r1, r3
    9bb8:	4618      	mov	r0, r3
    9bba:	f7ff ff09 	bl	99d0 <__assert_func>
    assert(rc == 0);
    9bbe:	f7fe faff 	bl	81c0 <hal_debugger_connected>
    9bc2:	b100      	cbz	r0, 9bc6 <os_init_idle_task+0x6a>
    9bc4:	be01      	bkpt	0x0001
    9bc6:	2300      	movs	r3, #0
    9bc8:	461a      	mov	r2, r3
    9bca:	4619      	mov	r1, r3
    9bcc:	4618      	mov	r0, r3
    9bce:	f7ff feff 	bl	99d0 <__assert_func>
    9bd2:	bf00      	nop
    9bd4:	20000578 	.word	0x20000578
    9bd8:	00009aad 	.word	0x00009aad
    9bdc:	00028c3c 	.word	0x00028c3c
    9be0:	20000524 	.word	0x20000524

00009be4 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    9be4:	b510      	push	{r4, lr}
    9be6:	b084      	sub	sp, #16
    9be8:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
    9bea:	4b2c      	ldr	r3, [pc, #176]	; (9c9c <os_init+0xb8>)
    9bec:	2200      	movs	r2, #0
    9bee:	601a      	str	r2, [r3, #0]
    9bf0:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
    9bf2:	4b2b      	ldr	r3, [pc, #172]	; (9ca0 <os_init+0xbc>)
    9bf4:	601a      	str	r2, [r3, #0]
    9bf6:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
    9bf8:	f000 fae2 	bl	a1c0 <os_eventq_dflt_get>
    9bfc:	f000 fa28 	bl	a050 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    9c00:	f000 fa1e 	bl	a040 <os_dev_reset>

    err = os_arch_os_init();
    9c04:	f001 fd16 	bl	b634 <os_arch_os_init>
    assert(err == OS_OK);
    9c08:	bb00      	cbnz	r0, 9c4c <os_init+0x68>

    if (main_fn) {
    9c0a:	b18c      	cbz	r4, 9c30 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    9c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
    9c10:	9303      	str	r3, [sp, #12]
    9c12:	4b24      	ldr	r3, [pc, #144]	; (9ca4 <os_init+0xc0>)
    9c14:	9302      	str	r3, [sp, #8]
    9c16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9c1a:	9301      	str	r3, [sp, #4]
    9c1c:	237f      	movs	r3, #127	; 0x7f
    9c1e:	9300      	str	r3, [sp, #0]
    9c20:	4623      	mov	r3, r4
    9c22:	4a21      	ldr	r2, [pc, #132]	; (9ca8 <os_init+0xc4>)
    9c24:	4921      	ldr	r1, [pc, #132]	; (9cac <os_init+0xc8>)
    9c26:	4822      	ldr	r0, [pc, #136]	; (9cb0 <os_init+0xcc>)
    9c28:	f001 fb4c 	bl	b2c4 <os_task_init>
    9c2c:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    9c2e:	b9b8      	cbnz	r0, 9c60 <os_init+0x7c>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    9c30:	f010 f886 	bl	19d40 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    9c34:	2001      	movs	r0, #1
    9c36:	f000 f99f 	bl	9f78 <os_dev_initialize_all>
    9c3a:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    9c3c:	b9d0      	cbnz	r0, 9c74 <os_init+0x90>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    9c3e:	2002      	movs	r0, #2
    9c40:	f000 f99a 	bl	9f78 <os_dev_initialize_all>
    9c44:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    9c46:	b9f8      	cbnz	r0, 9c88 <os_init+0xa4>
}
    9c48:	b004      	add	sp, #16
    9c4a:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
    9c4c:	f7fe fab8 	bl	81c0 <hal_debugger_connected>
    9c50:	b100      	cbz	r0, 9c54 <os_init+0x70>
    9c52:	be01      	bkpt	0x0001
    9c54:	2300      	movs	r3, #0
    9c56:	461a      	mov	r2, r3
    9c58:	4619      	mov	r1, r3
    9c5a:	4618      	mov	r0, r3
    9c5c:	f7ff feb8 	bl	99d0 <__assert_func>
        assert(err == 0);
    9c60:	f7fe faae 	bl	81c0 <hal_debugger_connected>
    9c64:	b100      	cbz	r0, 9c68 <os_init+0x84>
    9c66:	be01      	bkpt	0x0001
    9c68:	2300      	movs	r3, #0
    9c6a:	461a      	mov	r2, r3
    9c6c:	4619      	mov	r1, r3
    9c6e:	4618      	mov	r0, r3
    9c70:	f7ff feae 	bl	99d0 <__assert_func>
    assert(err == OS_OK);
    9c74:	f7fe faa4 	bl	81c0 <hal_debugger_connected>
    9c78:	b100      	cbz	r0, 9c7c <os_init+0x98>
    9c7a:	be01      	bkpt	0x0001
    9c7c:	2300      	movs	r3, #0
    9c7e:	461a      	mov	r2, r3
    9c80:	4619      	mov	r1, r3
    9c82:	4618      	mov	r0, r3
    9c84:	f7ff fea4 	bl	99d0 <__assert_func>
    assert(err == OS_OK);
    9c88:	f7fe fa9a 	bl	81c0 <hal_debugger_connected>
    9c8c:	b100      	cbz	r0, 9c90 <os_init+0xac>
    9c8e:	be01      	bkpt	0x0001
    9c90:	2300      	movs	r3, #0
    9c92:	461a      	mov	r2, r3
    9c94:	4619      	mov	r1, r3
    9c96:	4618      	mov	r0, r3
    9c98:	f7ff fe9a 	bl	99d0 <__assert_func>
    9c9c:	200026d4 	.word	0x200026d4
    9ca0:	2000703c 	.word	0x2000703c
    9ca4:	20000680 	.word	0x20000680
    9ca8:	00009b31 	.word	0x00009b31
    9cac:	00028c34 	.word	0x00028c34
    9cb0:	20002680 	.word	0x20002680

00009cb4 <os_start>:

void
os_start(void)
{
    9cb4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    9cb6:	f7ff fe79 	bl	99ac <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
    9cba:	f001 fd1b 	bl	b6f4 <os_arch_os_start>
    assert(err == OS_OK);
    9cbe:	b900      	cbnz	r0, 9cc2 <os_start+0xe>
#else
    assert(0);
#endif
}
    9cc0:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    9cc2:	f7fe fa7d 	bl	81c0 <hal_debugger_connected>
    9cc6:	b100      	cbz	r0, 9cca <os_start+0x16>
    9cc8:	be01      	bkpt	0x0001
    9cca:	2300      	movs	r3, #0
    9ccc:	461a      	mov	r2, r3
    9cce:	4619      	mov	r1, r3
    9cd0:	4618      	mov	r0, r3
    9cd2:	f7ff fe7d 	bl	99d0 <__assert_func>
	...

00009cd8 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
    9cd8:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    9cda:	4b10      	ldr	r3, [pc, #64]	; (9d1c <os_pkg_init+0x44>)
    9cdc:	781b      	ldrb	r3, [r3, #0]
    9cde:	b14b      	cbz	r3, 9cf4 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    9ce0:	2003      	movs	r0, #3
    9ce2:	f000 f949 	bl	9f78 <os_dev_initialize_all>
    9ce6:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    9ce8:	b970      	cbnz	r0, 9d08 <os_pkg_init+0x30>

    os_mempool_module_init();
    9cea:	f000 ff75 	bl	abd8 <os_mempool_module_init>
    os_msys_init();
    9cee:	f001 f817 	bl	ad20 <os_msys_init>
}
    9cf2:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    9cf4:	f7fe fa64 	bl	81c0 <hal_debugger_connected>
    9cf8:	b100      	cbz	r0, 9cfc <os_pkg_init+0x24>
    9cfa:	be01      	bkpt	0x0001
    9cfc:	2300      	movs	r3, #0
    9cfe:	461a      	mov	r2, r3
    9d00:	4619      	mov	r1, r3
    9d02:	4618      	mov	r0, r3
    9d04:	f7ff fe64 	bl	99d0 <__assert_func>
    assert(err == OS_OK);
    9d08:	f7fe fa5a 	bl	81c0 <hal_debugger_connected>
    9d0c:	b100      	cbz	r0, 9d10 <os_pkg_init+0x38>
    9d0e:	be01      	bkpt	0x0001
    9d10:	2300      	movs	r3, #0
    9d12:	461a      	mov	r2, r3
    9d14:	4619      	mov	r1, r3
    9d16:	4618      	mov	r0, r3
    9d18:	f7ff fe5a 	bl	99d0 <__assert_func>
    9d1c:	20000506 	.word	0x20000506

00009d20 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
    9d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d22:	4604      	mov	r4, r0
    9d24:	460d      	mov	r5, r1
    9d26:	4617      	mov	r7, r2
    9d28:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
    9d2a:	2220      	movs	r2, #32
    9d2c:	2100      	movs	r1, #0
    9d2e:	f001 fdd8 	bl	b8e2 <memset>
    c->c_ev.ev_cb = ev_cb;
    9d32:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
    9d34:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
    9d36:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
    9d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009d3c <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
    9d3c:	b538      	push	{r3, r4, r5, lr}
    9d3e:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
    9d40:	f001 fc38 	bl	b5b4 <os_arch_save_sr>
    9d44:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
    9d46:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
    9d48:	b13b      	cbz	r3, 9d5a <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    9d4a:	69a2      	ldr	r2, [r4, #24]
    9d4c:	b172      	cbz	r2, 9d6c <os_callout_stop+0x30>
    9d4e:	61d3      	str	r3, [r2, #28]
    9d50:	69e3      	ldr	r3, [r4, #28]
    9d52:	69a2      	ldr	r2, [r4, #24]
    9d54:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
    9d56:	2300      	movs	r3, #0
    9d58:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
    9d5a:	6920      	ldr	r0, [r4, #16]
    9d5c:	b110      	cbz	r0, 9d64 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
    9d5e:	4621      	mov	r1, r4
    9d60:	f000 fa0d 	bl	a17e <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
    9d64:	4628      	mov	r0, r5
    9d66:	f001 fc2b 	bl	b5c0 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
    9d6a:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    9d6c:	4a01      	ldr	r2, [pc, #4]	; (9d74 <os_callout_stop+0x38>)
    9d6e:	6053      	str	r3, [r2, #4]
    9d70:	e7ee      	b.n	9d50 <os_callout_stop+0x14>
    9d72:	bf00      	nop
    9d74:	200026d4 	.word	0x200026d4

00009d78 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
    9d78:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
    9d7a:	6903      	ldr	r3, [r0, #16]
    9d7c:	b1c3      	cbz	r3, 9db0 <os_callout_reset+0x38>
    9d7e:	4605      	mov	r5, r0
    9d80:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
    9d82:	2900      	cmp	r1, #0
    9d84:	db34      	blt.n	9df0 <os_callout_reset+0x78>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
    9d86:	f001 fc15 	bl	b5b4 <os_arch_save_sr>
    9d8a:	4606      	mov	r6, r0

    os_callout_stop(c);
    9d8c:	4628      	mov	r0, r5
    9d8e:	f7ff ffd5 	bl	9d3c <os_callout_stop>

    if (ticks == 0) {
    9d92:	b904      	cbnz	r4, 9d96 <os_callout_reset+0x1e>
        ticks = 1;
    9d94:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
    9d96:	f001 fb8f 	bl	b4b8 <os_time_get>
    9d9a:	4420      	add	r0, r4
    9d9c:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    9d9e:	4b15      	ldr	r3, [pc, #84]	; (9df4 <os_callout_reset+0x7c>)
    9da0:	681b      	ldr	r3, [r3, #0]
    9da2:	b17b      	cbz	r3, 9dc4 <os_callout_reset+0x4c>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
    9da4:	695a      	ldr	r2, [r3, #20]
    9da6:	1a82      	subs	r2, r0, r2
    9da8:	2a00      	cmp	r2, #0
    9daa:	db0b      	blt.n	9dc4 <os_callout_reset+0x4c>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    9dac:	699b      	ldr	r3, [r3, #24]
    9dae:	e7f8      	b.n	9da2 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
    9db0:	f7fe fa06 	bl	81c0 <hal_debugger_connected>
    9db4:	b100      	cbz	r0, 9db8 <os_callout_reset+0x40>
    9db6:	be01      	bkpt	0x0001
    9db8:	2300      	movs	r3, #0
    9dba:	461a      	mov	r2, r3
    9dbc:	4619      	mov	r1, r3
    9dbe:	4618      	mov	r0, r3
    9dc0:	f7ff fe06 	bl	99d0 <__assert_func>
            break;
        }
    }

    if (entry) {
    9dc4:	b15b      	cbz	r3, 9dde <os_callout_reset+0x66>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    9dc6:	69da      	ldr	r2, [r3, #28]
    9dc8:	61ea      	str	r2, [r5, #28]
    9dca:	61ab      	str	r3, [r5, #24]
    9dcc:	69da      	ldr	r2, [r3, #28]
    9dce:	6015      	str	r5, [r2, #0]
    9dd0:	3518      	adds	r5, #24
    9dd2:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
    9dd4:	4630      	mov	r0, r6
    9dd6:	f001 fbf3 	bl	b5c0 <os_arch_restore_sr>

    ret = OS_OK;
    9dda:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
    9ddc:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    9dde:	2300      	movs	r3, #0
    9de0:	61ab      	str	r3, [r5, #24]
    9de2:	4b04      	ldr	r3, [pc, #16]	; (9df4 <os_callout_reset+0x7c>)
    9de4:	685a      	ldr	r2, [r3, #4]
    9de6:	61ea      	str	r2, [r5, #28]
    9de8:	6015      	str	r5, [r2, #0]
    9dea:	3518      	adds	r5, #24
    9dec:	605d      	str	r5, [r3, #4]
    9dee:	e7f1      	b.n	9dd4 <os_callout_reset+0x5c>
        ret = OS_EINVAL;
    9df0:	2002      	movs	r0, #2
    return ret;
    9df2:	e7f3      	b.n	9ddc <os_callout_reset+0x64>
    9df4:	200026d4 	.word	0x200026d4

00009df8 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    9df8:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    9dfa:	f001 fb5d 	bl	b4b8 <os_time_get>
    9dfe:	4605      	mov	r5, r0
    9e00:	e00f      	b.n	9e22 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    9e02:	69e2      	ldr	r2, [r4, #28]
    9e04:	4b12      	ldr	r3, [pc, #72]	; (9e50 <os_callout_tick+0x58>)
    9e06:	605a      	str	r2, [r3, #4]
    9e08:	69e3      	ldr	r3, [r4, #28]
    9e0a:	69a2      	ldr	r2, [r4, #24]
    9e0c:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
    9e0e:	2300      	movs	r3, #0
    9e10:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    9e12:	f001 fbd5 	bl	b5c0 <os_arch_restore_sr>

        if (c) {
    9e16:	b1d4      	cbz	r4, 9e4e <os_callout_tick+0x56>
            if (c->c_evq) {
    9e18:	6920      	ldr	r0, [r4, #16]
    9e1a:	b9a0      	cbnz	r0, 9e46 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    9e1c:	6863      	ldr	r3, [r4, #4]
    9e1e:	4620      	mov	r0, r4
    9e20:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
    9e22:	f001 fbc7 	bl	b5b4 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    9e26:	4b0a      	ldr	r3, [pc, #40]	; (9e50 <os_callout_tick+0x58>)
    9e28:	681c      	ldr	r4, [r3, #0]
        if (c) {
    9e2a:	2c00      	cmp	r4, #0
    9e2c:	d0f1      	beq.n	9e12 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    9e2e:	6963      	ldr	r3, [r4, #20]
    9e30:	1aeb      	subs	r3, r5, r3
    9e32:	2b00      	cmp	r3, #0
    9e34:	db05      	blt.n	9e42 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    9e36:	69a3      	ldr	r3, [r4, #24]
    9e38:	2b00      	cmp	r3, #0
    9e3a:	d0e2      	beq.n	9e02 <os_callout_tick+0xa>
    9e3c:	69e2      	ldr	r2, [r4, #28]
    9e3e:	61da      	str	r2, [r3, #28]
    9e40:	e7e2      	b.n	9e08 <os_callout_tick+0x10>
                c = NULL;
    9e42:	2400      	movs	r4, #0
    9e44:	e7e5      	b.n	9e12 <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
    9e46:	4621      	mov	r1, r4
    9e48:	f000 f90f 	bl	a06a <os_eventq_put>
    9e4c:	e7e9      	b.n	9e22 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    9e4e:	bd38      	pop	{r3, r4, r5, pc}
    9e50:	200026d4 	.word	0x200026d4

00009e54 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    9e54:	b510      	push	{r4, lr}
    9e56:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    9e58:	f001 fbb5 	bl	b5c6 <os_arch_in_critical>
    9e5c:	b130      	cbz	r0, 9e6c <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
    9e5e:	4b0b      	ldr	r3, [pc, #44]	; (9e8c <os_callout_wakeup_ticks+0x38>)
    9e60:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    9e62:	b17b      	cbz	r3, 9e84 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    9e64:	6958      	ldr	r0, [r3, #20]
    9e66:	1b00      	subs	r0, r0, r4
    9e68:	d40a      	bmi.n	9e80 <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    9e6a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    9e6c:	f7fe f9a8 	bl	81c0 <hal_debugger_connected>
    9e70:	b100      	cbz	r0, 9e74 <os_callout_wakeup_ticks+0x20>
    9e72:	be01      	bkpt	0x0001
    9e74:	2300      	movs	r3, #0
    9e76:	461a      	mov	r2, r3
    9e78:	4619      	mov	r1, r3
    9e7a:	4618      	mov	r0, r3
    9e7c:	f7ff fda8 	bl	99d0 <__assert_func>
            rt = 0;     /* callout time is in the past */
    9e80:	2000      	movs	r0, #0
    9e82:	e7f2      	b.n	9e6a <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
    9e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    9e88:	e7ef      	b.n	9e6a <os_callout_wakeup_ticks+0x16>
    9e8a:	bf00      	nop
    9e8c:	200026d4 	.word	0x200026d4

00009e90 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    9e90:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    9e92:	4b16      	ldr	r3, [pc, #88]	; (9eec <os_dev_add+0x5c>)
    9e94:	681d      	ldr	r5, [r3, #0]
    9e96:	b115      	cbz	r5, 9e9e <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    9e98:	462b      	mov	r3, r5
    prev_dev = NULL;
    9e9a:	2400      	movs	r4, #0
    9e9c:	e008      	b.n	9eb0 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    9e9e:	4603      	mov	r3, r0
    9ea0:	f843 5f20 	str.w	r5, [r3, #32]!
    9ea4:	4a11      	ldr	r2, [pc, #68]	; (9eec <os_dev_add+0x5c>)
    9ea6:	6053      	str	r3, [r2, #4]
    9ea8:	6010      	str	r0, [r2, #0]
        return (0);
    9eaa:	e012      	b.n	9ed2 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    9eac:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    9eae:	6a1b      	ldr	r3, [r3, #32]
    9eb0:	b153      	cbz	r3, 9ec8 <os_dev_add+0x38>
        if (dev == cur_dev) {
    9eb2:	4283      	cmp	r3, r0
    9eb4:	d00d      	beq.n	9ed2 <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
    9eb6:	7e01      	ldrb	r1, [r0, #24]
    9eb8:	7e1a      	ldrb	r2, [r3, #24]
    9eba:	4291      	cmp	r1, r2
    9ebc:	d304      	bcc.n	9ec8 <os_dev_add+0x38>
    9ebe:	d1f5      	bne.n	9eac <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
    9ec0:	7e41      	ldrb	r1, [r0, #25]
    9ec2:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
    9ec4:	4291      	cmp	r1, r2
    9ec6:	d2f1      	bcs.n	9eac <os_dev_add+0x1c>
    }

    if (prev_dev) {
    9ec8:	b15c      	cbz	r4, 9ee2 <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    9eca:	6a23      	ldr	r3, [r4, #32]
    9ecc:	6203      	str	r3, [r0, #32]
    9ece:	b11b      	cbz	r3, 9ed8 <os_dev_add+0x48>
    9ed0:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    9ed2:	2000      	movs	r0, #0
    9ed4:	bc30      	pop	{r4, r5}
    9ed6:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    9ed8:	f100 0320 	add.w	r3, r0, #32
    9edc:	4a03      	ldr	r2, [pc, #12]	; (9eec <os_dev_add+0x5c>)
    9ede:	6053      	str	r3, [r2, #4]
    9ee0:	e7f6      	b.n	9ed0 <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    9ee2:	6205      	str	r5, [r0, #32]
    9ee4:	4b01      	ldr	r3, [pc, #4]	; (9eec <os_dev_add+0x5c>)
    9ee6:	6018      	str	r0, [r3, #0]
    9ee8:	e7f3      	b.n	9ed2 <os_dev_add+0x42>
    9eea:	bf00      	nop
    9eec:	200026dc 	.word	0x200026dc

00009ef0 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    9ef0:	b510      	push	{r4, lr}
    9ef2:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    9ef4:	6903      	ldr	r3, [r0, #16]
    9ef6:	6941      	ldr	r1, [r0, #20]
    9ef8:	4798      	blx	r3
    if (rc != 0) {
    9efa:	4603      	mov	r3, r0
    9efc:	b128      	cbz	r0, 9f0a <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    9efe:	7ee2      	ldrb	r2, [r4, #27]
    9f00:	f012 0f08 	tst.w	r2, #8
    9f04:	d105      	bne.n	9f12 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    9f06:	2300      	movs	r3, #0
    9f08:	e003      	b.n	9f12 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    9f0a:	7ee2      	ldrb	r2, [r4, #27]
    9f0c:	f042 0201 	orr.w	r2, r2, #1
    9f10:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
    9f12:	4618      	mov	r0, r3
    9f14:	bd10      	pop	{r4, pc}

00009f16 <os_dev_init>:
    dev->od_name = name;
    9f16:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    9f18:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    9f1a:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    9f1c:	2300      	movs	r3, #0
    9f1e:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
    9f20:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
    9f22:	9a00      	ldr	r2, [sp, #0]
    9f24:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
    9f26:	9a01      	ldr	r2, [sp, #4]
    9f28:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    9f2a:	6003      	str	r3, [r0, #0]
    9f2c:	6043      	str	r3, [r0, #4]
    9f2e:	6083      	str	r3, [r0, #8]
    9f30:	60c3      	str	r3, [r0, #12]
}
    9f32:	4618      	mov	r0, r3
    9f34:	4770      	bx	lr
	...

00009f38 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    9f38:	b530      	push	{r4, r5, lr}
    9f3a:	b083      	sub	sp, #12
    9f3c:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    9f3e:	9c07      	ldr	r4, [sp, #28]
    9f40:	9401      	str	r4, [sp, #4]
    9f42:	9c06      	ldr	r4, [sp, #24]
    9f44:	9400      	str	r4, [sp, #0]
    9f46:	f7ff ffe6 	bl	9f16 <os_dev_init>
    if (rc != 0) {
    9f4a:	4603      	mov	r3, r0
    9f4c:	b110      	cbz	r0, 9f54 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    9f4e:	4618      	mov	r0, r3
    9f50:	b003      	add	sp, #12
    9f52:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    9f54:	4628      	mov	r0, r5
    9f56:	f7ff ff9b 	bl	9e90 <os_dev_add>
    if (rc != 0) {
    9f5a:	4603      	mov	r3, r0
    9f5c:	2800      	cmp	r0, #0
    9f5e:	d1f6      	bne.n	9f4e <os_dev_create+0x16>
    if (g_os_started) {
    9f60:	4a04      	ldr	r2, [pc, #16]	; (9f74 <os_dev_create+0x3c>)
    9f62:	6812      	ldr	r2, [r2, #0]
    9f64:	2a00      	cmp	r2, #0
    9f66:	d0f2      	beq.n	9f4e <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
    9f68:	4628      	mov	r0, r5
    9f6a:	f7ff ffc1 	bl	9ef0 <os_dev_initialize>
    9f6e:	4603      	mov	r3, r0
    return (rc);
    9f70:	e7ed      	b.n	9f4e <os_dev_create+0x16>
    9f72:	bf00      	nop
    9f74:	200026d0 	.word	0x200026d0

00009f78 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    9f78:	b538      	push	{r3, r4, r5, lr}
    9f7a:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9f7c:	4b08      	ldr	r3, [pc, #32]	; (9fa0 <os_dev_initialize_all+0x28>)
    9f7e:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    9f80:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9f82:	e000      	b.n	9f86 <os_dev_initialize_all+0xe>
    9f84:	6a24      	ldr	r4, [r4, #32]
    9f86:	b144      	cbz	r4, 9f9a <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    9f88:	7e23      	ldrb	r3, [r4, #24]
    9f8a:	42ab      	cmp	r3, r5
    9f8c:	d1fa      	bne.n	9f84 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    9f8e:	4620      	mov	r0, r4
    9f90:	f7ff ffae 	bl	9ef0 <os_dev_initialize>
            if (rc) {
    9f94:	4602      	mov	r2, r0
    9f96:	2800      	cmp	r0, #0
    9f98:	d0f4      	beq.n	9f84 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    9f9a:	4610      	mov	r0, r2
    9f9c:	bd38      	pop	{r3, r4, r5, pc}
    9f9e:	bf00      	nop
    9fa0:	200026dc 	.word	0x200026dc

00009fa4 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
    9fa4:	b538      	push	{r3, r4, r5, lr}
    9fa6:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9fa8:	4b05      	ldr	r3, [pc, #20]	; (9fc0 <os_dev_lookup+0x1c>)
    9faa:	681c      	ldr	r4, [r3, #0]
    9fac:	b134      	cbz	r4, 9fbc <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
    9fae:	4629      	mov	r1, r5
    9fb0:	69e0      	ldr	r0, [r4, #28]
    9fb2:	f001 fcbd 	bl	b930 <strcmp>
    9fb6:	b108      	cbz	r0, 9fbc <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9fb8:	6a24      	ldr	r4, [r4, #32]
    9fba:	e7f7      	b.n	9fac <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
    9fbc:	4620      	mov	r0, r4
    9fbe:	bd38      	pop	{r3, r4, r5, pc}
    9fc0:	200026dc 	.word	0x200026dc

00009fc4 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
    9fc4:	b570      	push	{r4, r5, r6, lr}
    9fc6:	460d      	mov	r5, r1
    9fc8:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
    9fca:	f7ff ffeb 	bl	9fa4 <os_dev_lookup>
    if (dev == NULL) {
    9fce:	4604      	mov	r4, r0
    9fd0:	b1a0      	cbz	r0, 9ffc <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
    9fd2:	7ec3      	ldrb	r3, [r0, #27]
    9fd4:	f013 0f01 	tst.w	r3, #1
    9fd8:	d012      	beq.n	a000 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
    9fda:	6803      	ldr	r3, [r0, #0]
    9fdc:	b11b      	cbz	r3, 9fe6 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
    9fde:	4632      	mov	r2, r6
    9fe0:	4629      	mov	r1, r5
    9fe2:	4798      	blx	r3
        if (rc != 0) {
    9fe4:	b970      	cbnz	r0, a004 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
    9fe6:	f001 fae5 	bl	b5b4 <os_arch_save_sr>
    ++dev->od_open_ref;
    9fea:	7ea3      	ldrb	r3, [r4, #26]
    9fec:	3301      	adds	r3, #1
    9fee:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
    9ff0:	7ee3      	ldrb	r3, [r4, #27]
    9ff2:	f043 0302 	orr.w	r3, r3, #2
    9ff6:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
    9ff8:	f001 fae2 	bl	b5c0 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
    9ffc:	4620      	mov	r0, r4
    9ffe:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
    a000:	2400      	movs	r4, #0
    a002:	e7fb      	b.n	9ffc <os_dev_open+0x38>
    return (NULL);
    a004:	2400      	movs	r4, #0
    a006:	e7f9      	b.n	9ffc <os_dev_open+0x38>

0000a008 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
    a008:	b1b0      	cbz	r0, a038 <os_dev_close+0x30>
{
    a00a:	b510      	push	{r4, lr}
    a00c:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
    a00e:	68c3      	ldr	r3, [r0, #12]
    a010:	b113      	cbz	r3, a018 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
    a012:	4798      	blx	r3
        if (rc != 0) {
    a014:	4603      	mov	r3, r0
    a016:	b968      	cbnz	r0, a034 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
    a018:	f001 facc 	bl	b5b4 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
    a01c:	7ea3      	ldrb	r3, [r4, #26]
    a01e:	3b01      	subs	r3, #1
    a020:	b2db      	uxtb	r3, r3
    a022:	76a3      	strb	r3, [r4, #26]
    a024:	b91b      	cbnz	r3, a02e <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
    a026:	7ee3      	ldrb	r3, [r4, #27]
    a028:	f023 0306 	bic.w	r3, r3, #6
    a02c:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
    a02e:	f001 fac7 	bl	b5c0 <os_arch_restore_sr>

    return (0);
    a032:	2300      	movs	r3, #0
err:
    return (rc);
}
    a034:	4618      	mov	r0, r3
    a036:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
    a038:	2302      	movs	r3, #2
}
    a03a:	4618      	mov	r0, r3
    a03c:	4770      	bx	lr
	...

0000a040 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    a040:	4b02      	ldr	r3, [pc, #8]	; (a04c <os_dev_reset+0xc>)
    a042:	2200      	movs	r2, #0
    a044:	601a      	str	r2, [r3, #0]
    a046:	605b      	str	r3, [r3, #4]
}
    a048:	4770      	bx	lr
    a04a:	bf00      	nop
    a04c:	200026dc 	.word	0x200026dc

0000a050 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    a050:	2200      	movs	r2, #0
    a052:	6002      	str	r2, [r0, #0]
    a054:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
    a056:	4603      	mov	r3, r0
    a058:	f843 2f08 	str.w	r2, [r3, #8]!
    a05c:	60c3      	str	r3, [r0, #12]
}
    a05e:	4770      	bx	lr

0000a060 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    a060:	68c0      	ldr	r0, [r0, #12]
}
    a062:	3000      	adds	r0, #0
    a064:	bf18      	it	ne
    a066:	2001      	movne	r0, #1
    a068:	4770      	bx	lr

0000a06a <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    a06a:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    a06c:	b1f0      	cbz	r0, a0ac <os_eventq_put+0x42>
    a06e:	460c      	mov	r4, r1
    a070:	4605      	mov	r5, r0
    a072:	f7ff fff5 	bl	a060 <os_eventq_inited>
    a076:	b1c8      	cbz	r0, a0ac <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    a078:	f001 fa9c 	bl	b5b4 <os_arch_save_sr>
    a07c:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    a07e:	7823      	ldrb	r3, [r4, #0]
    a080:	b9f3      	cbnz	r3, a0c0 <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
    a082:	2301      	movs	r3, #1
    a084:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    a086:	2300      	movs	r3, #0
    a088:	60e3      	str	r3, [r4, #12]
    a08a:	68eb      	ldr	r3, [r5, #12]
    a08c:	601c      	str	r4, [r3, #0]
    a08e:	340c      	adds	r4, #12
    a090:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
    a092:	6868      	ldr	r0, [r5, #4]
    a094:	b1d8      	cbz	r0, a0ce <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    a096:	7b03      	ldrb	r3, [r0, #12]
    a098:	2b02      	cmp	r3, #2
    a09a:	d014      	beq.n	a0c6 <os_eventq_put+0x5c>
    resched = 0;
    a09c:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
    a09e:	2300      	movs	r3, #0
    a0a0:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
    a0a2:	4630      	mov	r0, r6
    a0a4:	f001 fa8c 	bl	b5c0 <os_arch_restore_sr>

    if (resched) {
    a0a8:	b99c      	cbnz	r4, a0d2 <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    a0aa:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
    a0ac:	f7fe f888 	bl	81c0 <hal_debugger_connected>
    a0b0:	b100      	cbz	r0, a0b4 <os_eventq_put+0x4a>
    a0b2:	be01      	bkpt	0x0001
    a0b4:	2300      	movs	r3, #0
    a0b6:	461a      	mov	r2, r3
    a0b8:	4619      	mov	r1, r3
    a0ba:	4618      	mov	r0, r3
    a0bc:	f7ff fc88 	bl	99d0 <__assert_func>
        OS_EXIT_CRITICAL(sr);
    a0c0:	f001 fa7e 	bl	b5c0 <os_arch_restore_sr>
    a0c4:	e7f1      	b.n	a0aa <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
    a0c6:	f001 f837 	bl	b138 <os_sched_wakeup>
            resched = 1;
    a0ca:	2401      	movs	r4, #1
    a0cc:	e7e7      	b.n	a09e <os_eventq_put+0x34>
    resched = 0;
    a0ce:	2400      	movs	r4, #0
    a0d0:	e7e7      	b.n	a0a2 <os_eventq_put+0x38>
        os_sched(NULL);
    a0d2:	2000      	movs	r0, #0
    a0d4:	f001 f8bc 	bl	b250 <os_sched>
    a0d8:	e7e7      	b.n	a0aa <os_eventq_put+0x40>

0000a0da <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
    a0da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a0dc:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
    a0de:	f000 ffd7 	bl	b090 <os_sched_get_current_task>
    a0e2:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
    a0e4:	682b      	ldr	r3, [r5, #0]
    a0e6:	4283      	cmp	r3, r0
    a0e8:	d001      	beq.n	a0ee <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
    a0ea:	b9db      	cbnz	r3, a124 <os_eventq_get+0x4a>
            evq->evq_owner = t;
    a0ec:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
    a0ee:	f001 fa61 	bl	b5b4 <os_arch_save_sr>
    a0f2:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
    a0f4:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
    a0f6:	b9fe      	cbnz	r6, a138 <os_eventq_get+0x5e>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
    a0f8:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    a0fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a0fe:	4620      	mov	r0, r4
    a100:	f000 ffd2 	bl	b0a8 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
    a104:	7b63      	ldrb	r3, [r4, #13]
    a106:	f043 0308 	orr.w	r3, r3, #8
    a10a:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
    a10c:	4638      	mov	r0, r7
    a10e:	f001 fa57 	bl	b5c0 <os_arch_restore_sr>

        os_sched(NULL);
    a112:	2000      	movs	r0, #0
    a114:	f001 f89c 	bl	b250 <os_sched>

        OS_ENTER_CRITICAL(sr);
    a118:	f001 fa4c 	bl	b5b4 <os_arch_save_sr>
    a11c:	4607      	mov	r7, r0
        evq->evq_task = NULL;
    a11e:	2300      	movs	r3, #0
    a120:	606b      	str	r3, [r5, #4]
        goto pull_one;
    a122:	e7e7      	b.n	a0f4 <os_eventq_get+0x1a>
            assert(0);
    a124:	f7fe f84c 	bl	81c0 <hal_debugger_connected>
    a128:	b100      	cbz	r0, a12c <os_eventq_get+0x52>
    a12a:	be01      	bkpt	0x0001
    a12c:	2300      	movs	r3, #0
    a12e:	461a      	mov	r2, r3
    a130:	4619      	mov	r1, r3
    a132:	4618      	mov	r0, r3
    a134:	f7ff fc4c 	bl	99d0 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    a138:	68f3      	ldr	r3, [r6, #12]
    a13a:	60ab      	str	r3, [r5, #8]
    a13c:	b153      	cbz	r3, a154 <os_eventq_get+0x7a>
        ev->ev_queued = 0;
    a13e:	2300      	movs	r3, #0
    a140:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    a142:	7b63      	ldrb	r3, [r4, #13]
    a144:	f023 0308 	bic.w	r3, r3, #8
    a148:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
    a14a:	4638      	mov	r0, r7
    a14c:	f001 fa38 	bl	b5c0 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
    a150:	4630      	mov	r0, r6
    a152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    a154:	f105 0308 	add.w	r3, r5, #8
    a158:	60eb      	str	r3, [r5, #12]
    a15a:	e7f0      	b.n	a13e <os_eventq_get+0x64>

0000a15c <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
    a15c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
    a15e:	f7ff ffbc 	bl	a0da <os_eventq_get>
    assert(ev->ev_cb != NULL);
    a162:	6843      	ldr	r3, [r0, #4]
    a164:	b10b      	cbz	r3, a16a <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
    a166:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
    a168:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
    a16a:	f7fe f829 	bl	81c0 <hal_debugger_connected>
    a16e:	b100      	cbz	r0, a172 <os_eventq_run+0x16>
    a170:	be01      	bkpt	0x0001
    a172:	2300      	movs	r3, #0
    a174:	461a      	mov	r2, r3
    a176:	4619      	mov	r1, r3
    a178:	4618      	mov	r0, r3
    a17a:	f7ff fc29 	bl	99d0 <__assert_func>

0000a17e <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
    a17e:	b538      	push	{r3, r4, r5, lr}
    a180:	4605      	mov	r5, r0
    a182:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    a184:	f001 fa16 	bl	b5b4 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
    a188:	7823      	ldrb	r3, [r4, #0]
    a18a:	b183      	cbz	r3, a1ae <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    a18c:	68aa      	ldr	r2, [r5, #8]
    a18e:	42a2      	cmp	r2, r4
    a190:	d107      	bne.n	a1a2 <os_eventq_remove+0x24>
    a192:	68d3      	ldr	r3, [r2, #12]
    a194:	60ab      	str	r3, [r5, #8]
    a196:	b953      	cbnz	r3, a1ae <os_eventq_remove+0x30>
    a198:	f105 0308 	add.w	r3, r5, #8
    a19c:	60eb      	str	r3, [r5, #12]
    a19e:	e006      	b.n	a1ae <os_eventq_remove+0x30>
    a1a0:	461a      	mov	r2, r3
    a1a2:	68d3      	ldr	r3, [r2, #12]
    a1a4:	42a3      	cmp	r3, r4
    a1a6:	d1fb      	bne.n	a1a0 <os_eventq_remove+0x22>
    a1a8:	68db      	ldr	r3, [r3, #12]
    a1aa:	60d3      	str	r3, [r2, #12]
    a1ac:	b123      	cbz	r3, a1b8 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
    a1ae:	2300      	movs	r3, #0
    a1b0:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
    a1b2:	f001 fa05 	bl	b5c0 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
    a1b6:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    a1b8:	320c      	adds	r2, #12
    a1ba:	60ea      	str	r2, [r5, #12]
    a1bc:	e7f7      	b.n	a1ae <os_eventq_remove+0x30>
	...

0000a1c0 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    a1c0:	4800      	ldr	r0, [pc, #0]	; (a1c4 <os_eventq_dflt_get+0x4>)
    a1c2:	4770      	bx	lr
    a1c4:	200026e4 	.word	0x200026e4

0000a1c8 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
    a1c8:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
    a1ca:	2000      	movs	r0, #0
    a1cc:	6018      	str	r0, [r3, #0]
    a1ce:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
    a1d0:	6098      	str	r0, [r3, #8]
    a1d2:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
    a1d4:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
    a1d6:	611a      	str	r2, [r3, #16]

    return (0);
}
    a1d8:	4770      	bx	lr

0000a1da <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
    a1da:	b538      	push	{r3, r4, r5, lr}
    a1dc:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    a1de:	f001 f9e9 	bl	b5b4 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
    a1e2:	682c      	ldr	r4, [r5, #0]
    if (mp) {
    a1e4:	b114      	cbz	r4, a1ec <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a1e6:	6863      	ldr	r3, [r4, #4]
    a1e8:	602b      	str	r3, [r5, #0]
    a1ea:	b12b      	cbz	r3, a1f8 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
    a1ec:	f001 f9e8 	bl	b5c0 <os_arch_restore_sr>

    if (mp) {
    a1f0:	b124      	cbz	r4, a1fc <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
    a1f2:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
    a1f6:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a1f8:	606d      	str	r5, [r5, #4]
    a1fa:	e7f7      	b.n	a1ec <os_mqueue_get+0x12>
        m = NULL;
    a1fc:	2000      	movs	r0, #0
    return (m);
    a1fe:	e7fa      	b.n	a1f6 <os_mqueue_get+0x1c>

0000a200 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
    a200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
    a202:	7953      	ldrb	r3, [r2, #5]
    a204:	2b07      	cmp	r3, #7
    a206:	d916      	bls.n	a236 <os_mqueue_put+0x36>
    a208:	4614      	mov	r4, r2
    a20a:	460e      	mov	r6, r1
    a20c:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
    a20e:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
    a212:	f001 f9cf 	bl	b5b4 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
    a216:	2300      	movs	r3, #0
    a218:	f844 3f14 	str.w	r3, [r4, #20]!
    a21c:	686b      	ldr	r3, [r5, #4]
    a21e:	601f      	str	r7, [r3, #0]
    a220:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
    a222:	f001 f9cd 	bl	b5c0 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
    a226:	b146      	cbz	r6, a23a <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
    a228:	f105 0108 	add.w	r1, r5, #8
    a22c:	4630      	mov	r0, r6
    a22e:	f7ff ff1c 	bl	a06a <os_eventq_put>
    }

    return (0);
    a232:	2000      	movs	r0, #0
    a234:	e000      	b.n	a238 <os_mqueue_put+0x38>
err:
    return (rc);
    a236:	2002      	movs	r0, #2
}
    a238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
    a23a:	2000      	movs	r0, #0
    a23c:	e7fc      	b.n	a238 <os_mqueue_put+0x38>

0000a23e <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
    a23e:	3a10      	subs	r2, #16
    a240:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    a242:	6041      	str	r1, [r0, #4]

    return (0);
}
    a244:	2000      	movs	r0, #0
    a246:	4770      	bx	lr

0000a248 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    a248:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    a24a:	8803      	ldrh	r3, [r0, #0]
    a24c:	428b      	cmp	r3, r1
    a24e:	d312      	bcc.n	a276 <os_mbuf_get+0x2e>
    a250:	460d      	mov	r5, r1
    a252:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    a254:	6840      	ldr	r0, [r0, #4]
    a256:	f000 fc84 	bl	ab62 <os_memblock_get>
    if (!om) {
    a25a:	4603      	mov	r3, r0
    a25c:	b148      	cbz	r0, a272 <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    a25e:	2200      	movs	r2, #0
    a260:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
    a262:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
    a264:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
    a266:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    a268:	f100 0110 	add.w	r1, r0, #16
    a26c:	4429      	add	r1, r5
    a26e:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
    a270:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    a272:	4618      	mov	r0, r3
    a274:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a276:	2300      	movs	r3, #0
    return om;
    a278:	e7fb      	b.n	a272 <os_mbuf_get+0x2a>

0000a27a <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    a27a:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    a27c:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    a280:	8803      	ldrh	r3, [r0, #0]
    a282:	42ab      	cmp	r3, r5
    a284:	d310      	bcc.n	a2a8 <os_mbuf_get_pkthdr+0x2e>
    a286:	2dff      	cmp	r5, #255	; 0xff
    a288:	d810      	bhi.n	a2ac <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    a28a:	2100      	movs	r1, #0
    a28c:	f7ff ffdc 	bl	a248 <os_mbuf_get>
    if (om) {
    a290:	4603      	mov	r3, r0
    a292:	b138      	cbz	r0, a2a4 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
    a294:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
    a296:	6802      	ldr	r2, [r0, #0]
    a298:	4415      	add	r5, r2
    a29a:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    a29c:	2200      	movs	r2, #0
    a29e:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
    a2a0:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    a2a2:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    a2a4:	4618      	mov	r0, r3
    a2a6:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a2a8:	2300      	movs	r3, #0
    a2aa:	e7fb      	b.n	a2a4 <os_mbuf_get_pkthdr+0x2a>
    a2ac:	2300      	movs	r3, #0
    return om;
    a2ae:	e7f9      	b.n	a2a4 <os_mbuf_get_pkthdr+0x2a>

0000a2b0 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    a2b0:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    a2b2:	6883      	ldr	r3, [r0, #8]
    a2b4:	b123      	cbz	r3, a2c0 <os_mbuf_free+0x10>
    a2b6:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    a2b8:	6858      	ldr	r0, [r3, #4]
    a2ba:	f000 fc7a 	bl	abb2 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    a2be:	bd08      	pop	{r3, pc}
    rc = 0;
    a2c0:	2000      	movs	r0, #0
    return (rc);
    a2c2:	e7fc      	b.n	a2be <os_mbuf_free+0xe>

0000a2c4 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
    a2c4:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    a2c6:	b160      	cbz	r0, a2e2 <os_mbuf_free_chain+0x1e>
{
    a2c8:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    a2ca:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
    a2cc:	4618      	mov	r0, r3
    a2ce:	f7ff ffef 	bl	a2b0 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
    a2d2:	4623      	mov	r3, r4
        if (rc != 0) {
    a2d4:	4602      	mov	r2, r0
    a2d6:	b910      	cbnz	r0, a2de <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
    a2d8:	2c00      	cmp	r4, #0
    a2da:	d1f6      	bne.n	a2ca <os_mbuf_free_chain+0x6>
    }

    rc = 0;
    a2dc:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    a2de:	4610      	mov	r0, r2
    a2e0:	bd10      	pop	{r4, pc}
    rc = 0;
    a2e2:	2200      	movs	r2, #0
}
    a2e4:	4610      	mov	r0, r2
    a2e6:	4770      	bx	lr

0000a2e8 <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    a2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    a2ec:	2800      	cmp	r0, #0
    a2ee:	d04d      	beq.n	a38c <os_mbuf_append+0xa4>
    a2f0:	460f      	mov	r7, r1
    a2f2:	4691      	mov	r9, r2
    a2f4:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    a2f6:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    a2fa:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    a2fc:	e000      	b.n	a300 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
    a2fe:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
    a300:	68eb      	ldr	r3, [r5, #12]
    a302:	2b00      	cmp	r3, #0
    a304:	d1fb      	bne.n	a2fe <os_mbuf_append+0x16>
    }

    remainder = len;
    a306:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
    a308:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a30a:	f105 0410 	add.w	r4, r5, #16
    a30e:	881b      	ldrh	r3, [r3, #0]
    a310:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    a312:	6828      	ldr	r0, [r5, #0]
    a314:	88eb      	ldrh	r3, [r5, #6]
    a316:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a318:	1a24      	subs	r4, r4, r0
    a31a:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    a31c:	b164      	cbz	r4, a338 <os_mbuf_append+0x50>
        if (space > remainder) {
    a31e:	454c      	cmp	r4, r9
    a320:	dd00      	ble.n	a324 <os_mbuf_append+0x3c>
            space = remainder;
    a322:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    a324:	4622      	mov	r2, r4
    a326:	4639      	mov	r1, r7
    a328:	f001 fab2 	bl	b890 <memcpy>

        last->om_len += space;
    a32c:	88eb      	ldrh	r3, [r5, #6]
    a32e:	4423      	add	r3, r4
    a330:	80eb      	strh	r3, [r5, #6]
        data += space;
    a332:	4427      	add	r7, r4
        remainder -= space;
    a334:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    a338:	2e00      	cmp	r6, #0
    a33a:	dd16      	ble.n	a36a <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
    a33c:	2100      	movs	r1, #0
    a33e:	4640      	mov	r0, r8
    a340:	f7ff ff82 	bl	a248 <os_mbuf_get>
        if (!new) {
    a344:	4604      	mov	r4, r0
    a346:	b180      	cbz	r0, a36a <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
    a348:	f8b8 2000 	ldrh.w	r2, [r8]
    a34c:	42b2      	cmp	r2, r6
    a34e:	bfa8      	it	ge
    a350:	4632      	movge	r2, r6
    a352:	b292      	uxth	r2, r2
    a354:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    a356:	4639      	mov	r1, r7
    a358:	6800      	ldr	r0, [r0, #0]
    a35a:	f001 fa99 	bl	b890 <memcpy>
        data += new->om_len;
    a35e:	88e3      	ldrh	r3, [r4, #6]
    a360:	441f      	add	r7, r3
        remainder -= new->om_len;
    a362:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
    a364:	60ec      	str	r4, [r5, #12]
        last = new;
    a366:	4625      	mov	r5, r4
    a368:	e7e6      	b.n	a338 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    a36a:	f89a 3005 	ldrb.w	r3, [sl, #5]
    a36e:	2b07      	cmp	r3, #7
    a370:	d907      	bls.n	a382 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    a372:	eba9 0906 	sub.w	r9, r9, r6
    a376:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    a37a:	fa13 f989 	uxtah	r9, r3, r9
    a37e:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    a382:	b106      	cbz	r6, a386 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
    a384:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
    a386:	4630      	mov	r0, r6
    a388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
    a38c:	2602      	movs	r6, #2
    a38e:	e7fa      	b.n	a386 <os_mbuf_append+0x9e>

0000a390 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
    a390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a394:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
    a396:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
    a39a:	2700      	movs	r7, #0
    head = NULL;
    a39c:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
    a39e:	e017      	b.n	a3d0 <os_mbuf_dup+0x40>
    startoff = 0;
    a3a0:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a3a2:	4623      	mov	r3, r4
    a3a4:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    a3a8:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a3aa:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
    a3ac:	b299      	uxth	r1, r3
    a3ae:	4640      	mov	r0, r8
    a3b0:	f7ff ff4a 	bl	a248 <os_mbuf_get>
    a3b4:	4605      	mov	r5, r0
    a3b6:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
    a3b8:	b188      	cbz	r0, a3de <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
    a3ba:	7923      	ldrb	r3, [r4, #4]
    a3bc:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
    a3be:	88e3      	ldrh	r3, [r4, #6]
    a3c0:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
    a3c2:	88e2      	ldrh	r2, [r4, #6]
    a3c4:	6821      	ldr	r1, [r4, #0]
    a3c6:	6828      	ldr	r0, [r5, #0]
    a3c8:	f001 fa62 	bl	b890 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
    a3cc:	68e4      	ldr	r4, [r4, #12]
    a3ce:	462f      	mov	r7, r5
    a3d0:	b14c      	cbz	r4, a3e6 <os_mbuf_dup+0x56>
        if (head) {
    a3d2:	b15e      	cbz	r6, a3ec <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
    a3d4:	7963      	ldrb	r3, [r4, #5]
    a3d6:	2b07      	cmp	r3, #7
    a3d8:	d9e2      	bls.n	a3a0 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
    a3da:	b299      	uxth	r1, r3
    a3dc:	e7e1      	b.n	a3a2 <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
    a3de:	4630      	mov	r0, r6
    a3e0:	f7ff ff70 	bl	a2c4 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
    a3e4:	462e      	mov	r6, r5
}
    a3e6:	4630      	mov	r0, r6
    a3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
    a3ec:	7963      	ldrb	r3, [r4, #5]
    a3ee:	2b07      	cmp	r3, #7
    a3f0:	d911      	bls.n	a416 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
    a3f2:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a3f4:	4623      	mov	r3, r4
    a3f6:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    a3fa:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a3fc:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
    a3fe:	b299      	uxth	r1, r3
    a400:	4640      	mov	r0, r8
    a402:	f7ff ff21 	bl	a248 <os_mbuf_get>
            if (!head) {
    a406:	4606      	mov	r6, r0
    a408:	2800      	cmp	r0, #0
    a40a:	d0ec      	beq.n	a3e6 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
    a40c:	7963      	ldrb	r3, [r4, #5]
    a40e:	2b07      	cmp	r3, #7
    a410:	d803      	bhi.n	a41a <os_mbuf_dup+0x8a>
            copy = head;
    a412:	4605      	mov	r5, r0
    a414:	e7d1      	b.n	a3ba <os_mbuf_dup+0x2a>
    startoff = 0;
    a416:	2100      	movs	r1, #0
    a418:	e7ec      	b.n	a3f4 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
    a41a:	88c3      	ldrh	r3, [r0, #6]
    a41c:	b973      	cbnz	r3, a43c <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
    a41e:	f100 0510 	add.w	r5, r0, #16
    a422:	7962      	ldrb	r2, [r4, #5]
    a424:	f104 0110 	add.w	r1, r4, #16
    a428:	4628      	mov	r0, r5
    a42a:	f001 fa31 	bl	b890 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
    a42e:	7963      	ldrb	r3, [r4, #5]
    a430:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
    a432:	7963      	ldrb	r3, [r4, #5]
    a434:	441d      	add	r5, r3
    a436:	6035      	str	r5, [r6, #0]
            copy = head;
    a438:	4635      	mov	r5, r6
    a43a:	e7be      	b.n	a3ba <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
    a43c:	f7fd fec0 	bl	81c0 <hal_debugger_connected>
    a440:	b100      	cbz	r0, a444 <os_mbuf_dup+0xb4>
    a442:	be01      	bkpt	0x0001
    a444:	2300      	movs	r3, #0
    a446:	461a      	mov	r2, r3
    a448:	4619      	mov	r1, r3
    a44a:	4618      	mov	r0, r3
    a44c:	f7ff fac0 	bl	99d0 <__assert_func>

0000a450 <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    a450:	b178      	cbz	r0, a472 <os_mbuf_off+0x22>
{
    a452:	b410      	push	{r4}
    a454:	e002      	b.n	a45c <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
    a456:	1ac9      	subs	r1, r1, r3
        cur = next;
    a458:	4620      	mov	r0, r4
        if (cur == NULL) {
    a45a:	b13c      	cbz	r4, a46c <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
    a45c:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
    a45e:	88c3      	ldrh	r3, [r0, #6]
    a460:	428b      	cmp	r3, r1
    a462:	dc02      	bgt.n	a46a <os_mbuf_off+0x1a>
    a464:	d1f7      	bne.n	a456 <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
    a466:	2c00      	cmp	r4, #0
    a468:	d1f5      	bne.n	a456 <os_mbuf_off+0x6>
            *out_off = off;
    a46a:	8011      	strh	r1, [r2, #0]
    }
}
    a46c:	f85d 4b04 	ldr.w	r4, [sp], #4
    a470:	4770      	bx	lr
    a472:	4770      	bx	lr

0000a474 <os_mbuf_appendfrom>:
{
    a474:	b5f0      	push	{r4, r5, r6, r7, lr}
    a476:	b083      	sub	sp, #12
    a478:	4607      	mov	r7, r0
    a47a:	4608      	mov	r0, r1
    a47c:	4611      	mov	r1, r2
    a47e:	461e      	mov	r6, r3
    src_cur_om = os_mbuf_off(src, src_off, &src_cur_off);
    a480:	f10d 0206 	add.w	r2, sp, #6
    a484:	f7ff ffe4 	bl	a450 <os_mbuf_off>
    a488:	4605      	mov	r5, r0
    while (len > 0) {
    a48a:	b1be      	cbz	r6, a4bc <os_mbuf_appendfrom+0x48>
        if (src_cur_om == NULL) {
    a48c:	b1d5      	cbz	r5, a4c4 <os_mbuf_appendfrom+0x50>
        chunk_sz = min(len, src_cur_om->om_len - src_cur_off);
    a48e:	88ec      	ldrh	r4, [r5, #6]
    a490:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a494:	1ae4      	subs	r4, r4, r3
    a496:	42b4      	cmp	r4, r6
    a498:	bfa8      	it	ge
    a49a:	4634      	movge	r4, r6
    a49c:	b2a4      	uxth	r4, r4
        rc = os_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
    a49e:	6829      	ldr	r1, [r5, #0]
    a4a0:	4622      	mov	r2, r4
    a4a2:	4419      	add	r1, r3
    a4a4:	4638      	mov	r0, r7
    a4a6:	f7ff ff1f 	bl	a2e8 <os_mbuf_append>
        if (rc != 0) {
    a4aa:	4603      	mov	r3, r0
    a4ac:	b938      	cbnz	r0, a4be <os_mbuf_appendfrom+0x4a>
        len -= chunk_sz;
    a4ae:	1b34      	subs	r4, r6, r4
    a4b0:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
    a4b2:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
    a4b4:	2300      	movs	r3, #0
    a4b6:	f8ad 3006 	strh.w	r3, [sp, #6]
    a4ba:	e7e6      	b.n	a48a <os_mbuf_appendfrom+0x16>
    return 0;
    a4bc:	2300      	movs	r3, #0
}
    a4be:	4618      	mov	r0, r3
    a4c0:	b003      	add	sp, #12
    a4c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return OS_EINVAL;
    a4c4:	2302      	movs	r3, #2
    a4c6:	e7fa      	b.n	a4be <os_mbuf_appendfrom+0x4a>

0000a4c8 <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
    a4c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4ca:	4604      	mov	r4, r0
    a4cc:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
    a4ce:	4616      	mov	r6, r2
    a4d0:	b312      	cbz	r2, a518 <os_mbuf_copydata+0x50>
        return 0;
    }

    udst = dst;

    while (off > 0) {
    a4d2:	2900      	cmp	r1, #0
    a4d4:	dd06      	ble.n	a4e4 <os_mbuf_copydata+0x1c>
        if (!m) {
    a4d6:	b30c      	cbz	r4, a51c <os_mbuf_copydata+0x54>
            return (-1);
        }

        if (off < m->om_len)
    a4d8:	88e3      	ldrh	r3, [r4, #6]
    a4da:	428b      	cmp	r3, r1
    a4dc:	dc02      	bgt.n	a4e4 <os_mbuf_copydata+0x1c>
            break;
        off -= m->om_len;
    a4de:	1ac9      	subs	r1, r1, r3
        m = SLIST_NEXT(m, om_next);
    a4e0:	68e4      	ldr	r4, [r4, #12]
    a4e2:	e7f6      	b.n	a4d2 <os_mbuf_copydata+0xa>
    }
    while (len > 0 && m != NULL) {
    a4e4:	2e00      	cmp	r6, #0
    a4e6:	dd10      	ble.n	a50a <os_mbuf_copydata+0x42>
    a4e8:	b17c      	cbz	r4, a50a <os_mbuf_copydata+0x42>
        count = min(m->om_len - off, len);
    a4ea:	88e5      	ldrh	r5, [r4, #6]
    a4ec:	1a6d      	subs	r5, r5, r1
    a4ee:	42b5      	cmp	r5, r6
    a4f0:	bfa8      	it	ge
    a4f2:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
    a4f4:	6823      	ldr	r3, [r4, #0]
    a4f6:	462a      	mov	r2, r5
    a4f8:	4419      	add	r1, r3
    a4fa:	4638      	mov	r0, r7
    a4fc:	f001 f9c8 	bl	b890 <memcpy>
        len -= count;
    a500:	1b76      	subs	r6, r6, r5
        udst += count;
    a502:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
    a504:	68e4      	ldr	r4, [r4, #12]
        off = 0;
    a506:	2100      	movs	r1, #0
    a508:	e7ec      	b.n	a4e4 <os_mbuf_copydata+0x1c>
    }

    return (len > 0 ? -1 : 0);
    a50a:	2e00      	cmp	r6, #0
    a50c:	dc01      	bgt.n	a512 <os_mbuf_copydata+0x4a>
    a50e:	2000      	movs	r0, #0
    a510:	e003      	b.n	a51a <os_mbuf_copydata+0x52>
    a512:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a516:	e000      	b.n	a51a <os_mbuf_copydata+0x52>
        return 0;
    a518:	4610      	mov	r0, r2
}
    a51a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return (-1);
    a51c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a520:	e7fb      	b.n	a51a <os_mbuf_copydata+0x52>

0000a522 <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    a522:	2800      	cmp	r0, #0
    a524:	d04e      	beq.n	a5c4 <os_mbuf_adj+0xa2>
{
    a526:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a528:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
    a52a:	2900      	cmp	r1, #0
    a52c:	db1c      	blt.n	a568 <os_mbuf_adj+0x46>
    if ((m = mp) == NULL)
    a52e:	4603      	mov	r3, r0
    int len = req_len;
    a530:	460a      	mov	r2, r1
    a532:	e005      	b.n	a540 <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
    a534:	1a80      	subs	r0, r0, r2
    a536:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
    a538:	6818      	ldr	r0, [r3, #0]
    a53a:	4402      	add	r2, r0
    a53c:	601a      	str	r2, [r3, #0]
                len = 0;
    a53e:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
    a540:	b14b      	cbz	r3, a556 <os_mbuf_adj+0x34>
    a542:	2a00      	cmp	r2, #0
    a544:	dd07      	ble.n	a556 <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
    a546:	88d8      	ldrh	r0, [r3, #6]
    a548:	4290      	cmp	r0, r2
    a54a:	dcf3      	bgt.n	a534 <os_mbuf_adj+0x12>
                len -= m->om_len;
    a54c:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
    a54e:	2000      	movs	r0, #0
    a550:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
    a552:	68db      	ldr	r3, [r3, #12]
    a554:	e7f4      	b.n	a540 <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
    a556:	7963      	ldrb	r3, [r4, #5]
    a558:	2b07      	cmp	r3, #7
    a55a:	d904      	bls.n	a566 <os_mbuf_adj+0x44>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    a55c:	1a52      	subs	r2, r2, r1
    a55e:	8a21      	ldrh	r1, [r4, #16]
    a560:	fa11 f282 	uxtah	r2, r1, r2
    a564:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    a566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        len = -len;
    a568:	424f      	negs	r7, r1
        count = 0;
    a56a:	2200      	movs	r2, #0
    a56c:	e000      	b.n	a570 <os_mbuf_adj+0x4e>
            m = SLIST_NEXT(m, om_next);
    a56e:	4628      	mov	r0, r5
            count += m->om_len;
    a570:	88c3      	ldrh	r3, [r0, #6]
    a572:	441a      	add	r2, r3
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    a574:	68c5      	ldr	r5, [r0, #12]
    a576:	2d00      	cmp	r5, #0
    a578:	d1f9      	bne.n	a56e <os_mbuf_adj+0x4c>
        if (m->om_len >= len) {
    a57a:	42bb      	cmp	r3, r7
    a57c:	db09      	blt.n	a592 <os_mbuf_adj+0x70>
            m->om_len -= len;
    a57e:	b2bf      	uxth	r7, r7
    a580:	1bdb      	subs	r3, r3, r7
    a582:	80c3      	strh	r3, [r0, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
    a584:	7963      	ldrb	r3, [r4, #5]
    a586:	2b07      	cmp	r3, #7
    a588:	d9ed      	bls.n	a566 <os_mbuf_adj+0x44>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    a58a:	8a23      	ldrh	r3, [r4, #16]
    a58c:	1bdf      	subs	r7, r3, r7
    a58e:	8227      	strh	r7, [r4, #16]
    a590:	e7e9      	b.n	a566 <os_mbuf_adj+0x44>
        if (count < 0)
    a592:	188a      	adds	r2, r1, r2
    a594:	d40b      	bmi.n	a5ae <os_mbuf_adj+0x8c>
        if (OS_MBUF_IS_PKTHDR(m))
    a596:	7963      	ldrb	r3, [r4, #5]
    a598:	2b07      	cmp	r3, #7
    a59a:	d900      	bls.n	a59e <os_mbuf_adj+0x7c>
            OS_MBUF_PKTHDR(m)->omp_len = count;
    a59c:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
    a59e:	2c00      	cmp	r4, #0
    a5a0:	d0e1      	beq.n	a566 <os_mbuf_adj+0x44>
            if (m->om_len >= count) {
    a5a2:	88e3      	ldrh	r3, [r4, #6]
    a5a4:	4293      	cmp	r3, r2
    a5a6:	da04      	bge.n	a5b2 <os_mbuf_adj+0x90>
            count -= m->om_len;
    a5a8:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    a5aa:	68e4      	ldr	r4, [r4, #12]
    a5ac:	e7f7      	b.n	a59e <os_mbuf_adj+0x7c>
            count = 0;
    a5ae:	2200      	movs	r2, #0
    a5b0:	e7f1      	b.n	a596 <os_mbuf_adj+0x74>
                m->om_len = count;
    a5b2:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    a5b4:	68e0      	ldr	r0, [r4, #12]
    a5b6:	2800      	cmp	r0, #0
    a5b8:	d0d5      	beq.n	a566 <os_mbuf_adj+0x44>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
    a5ba:	f7ff fe83 	bl	a2c4 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    a5be:	2300      	movs	r3, #0
    a5c0:	60e3      	str	r3, [r4, #12]
    a5c2:	e7d0      	b.n	a566 <os_mbuf_adj+0x44>
    a5c4:	4770      	bx	lr

0000a5c6 <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
    a5c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a5ca:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
    a5cc:	1e1e      	subs	r6, r3, #0
    a5ce:	dd2d      	ble.n	a62c <os_mbuf_cmpf+0x66>
    a5d0:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
    a5d2:	f10d 0206 	add.w	r2, sp, #6
    a5d6:	f7ff ff3b 	bl	a450 <os_mbuf_off>
    a5da:	4604      	mov	r4, r0
    data_off = 0;
    a5dc:	f04f 0800 	mov.w	r8, #0
    a5e0:	e009      	b.n	a5f6 <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
    a5e2:	4445      	add	r5, r8
    a5e4:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
    a5e8:	45b0      	cmp	r8, r6
    a5ea:	d027      	beq.n	a63c <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
    a5ec:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
    a5ee:	2300      	movs	r3, #0
    a5f0:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
    a5f4:	b1bc      	cbz	r4, a626 <os_mbuf_cmpf+0x60>
        if (om == NULL) {
    a5f6:	b1f4      	cbz	r4, a636 <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
    a5f8:	eba6 0208 	sub.w	r2, r6, r8
    a5fc:	88e3      	ldrh	r3, [r4, #6]
    a5fe:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a602:	1a1b      	subs	r3, r3, r0
    a604:	429a      	cmp	r2, r3
    a606:	bfa8      	it	ge
    a608:	461a      	movge	r2, r3
    a60a:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
    a60c:	2d00      	cmp	r5, #0
    a60e:	d0e8      	beq.n	a5e2 <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
    a610:	6823      	ldr	r3, [r4, #0]
    a612:	462a      	mov	r2, r5
    a614:	eb07 0108 	add.w	r1, r7, r8
    a618:	4418      	add	r0, r3
    a61a:	f001 f915 	bl	b848 <memcmp>
            if (rc != 0) {
    a61e:	4603      	mov	r3, r0
    a620:	2800      	cmp	r0, #0
    a622:	d0de      	beq.n	a5e2 <os_mbuf_cmpf+0x1c>
    a624:	e003      	b.n	a62e <os_mbuf_cmpf+0x68>
            return INT_MAX;
    a626:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    a62a:	e000      	b.n	a62e <os_mbuf_cmpf+0x68>
        return 0;
    a62c:	2300      	movs	r3, #0
        }
    }
}
    a62e:	4618      	mov	r0, r3
    a630:	b002      	add	sp, #8
    a632:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
    a636:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    a63a:	e7f8      	b.n	a62e <os_mbuf_cmpf+0x68>
            return 0;
    a63c:	2300      	movs	r3, #0
    a63e:	e7f6      	b.n	a62e <os_mbuf_cmpf+0x68>

0000a640 <os_mbuf_prepend>:
    }
}

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
    a640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a642:	4604      	mov	r4, r0
    a644:	460e      	mov	r6, r1
    a646:	e019      	b.n	a67c <os_mbuf_prepend+0x3c>
    a648:	2000      	movs	r0, #0
    a64a:	e01b      	b.n	a684 <os_mbuf_prepend+0x44>
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
    a64c:	2100      	movs	r1, #0
    a64e:	68a0      	ldr	r0, [r4, #8]
    a650:	f7ff fdfa 	bl	a248 <os_mbuf_get>
    a654:	4605      	mov	r5, r0
        }
        if (p == NULL) {
    a656:	2d00      	cmp	r5, #0
    a658:	d033      	beq.n	a6c2 <os_mbuf_prepend+0x82>
            os_mbuf_free_chain(om);
            om = NULL;
            break;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
    a65a:	7963      	ldrb	r3, [r4, #5]
    a65c:	2b07      	cmp	r3, #7
    a65e:	d836      	bhi.n	a6ce <os_mbuf_prepend+0x8e>
    omp = om->om_omp;
    a660:	68aa      	ldr	r2, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a662:	f105 0310 	add.w	r3, r5, #16
    a666:	8812      	ldrh	r2, [r2, #0]
    a668:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    a66a:	6829      	ldr	r1, [r5, #0]
    a66c:	88ea      	ldrh	r2, [r5, #6]
    a66e:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a670:	1a9b      	subs	r3, r3, r2
        }

        /* Move the new head's data pointer to the end so that data can be
         * prepended.
         */
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
    a672:	fa11 f383 	uxtah	r3, r1, r3
    a676:	602b      	str	r3, [r5, #0]

        SLIST_NEXT(p, om_next) = om;
    a678:	60ec      	str	r4, [r5, #12]
        om = p;
    a67a:	462c      	mov	r4, r5
    if (OS_MBUF_IS_PKTHDR(om)) {
    a67c:	7961      	ldrb	r1, [r4, #5]
    a67e:	2907      	cmp	r1, #7
    a680:	d9e2      	bls.n	a648 <os_mbuf_prepend+0x8>
        startoff = om->om_pkthdr_len;
    a682:	b288      	uxth	r0, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a684:	4623      	mov	r3, r4
    a686:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    a68a:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a68c:	1ad3      	subs	r3, r2, r3
    a68e:	b29b      	uxth	r3, r3
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
    a690:	429e      	cmp	r6, r3
    a692:	da00      	bge.n	a696 <os_mbuf_prepend+0x56>
    a694:	4633      	mov	r3, r6
        om->om_data -= leading;
    a696:	1ad2      	subs	r2, r2, r3
    a698:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
    a69a:	b298      	uxth	r0, r3
    a69c:	88e2      	ldrh	r2, [r4, #6]
    a69e:	4402      	add	r2, r0
    a6a0:	80e2      	strh	r2, [r4, #6]
        if (OS_MBUF_IS_PKTHDR(om)) {
    a6a2:	2907      	cmp	r1, #7
    a6a4:	d902      	bls.n	a6ac <os_mbuf_prepend+0x6c>
            OS_MBUF_PKTHDR(om)->omp_len += leading;
    a6a6:	8a22      	ldrh	r2, [r4, #16]
    a6a8:	4410      	add	r0, r2
    a6aa:	8220      	strh	r0, [r4, #16]
        if (len == 0) {
    a6ac:	1af6      	subs	r6, r6, r3
    a6ae:	d00c      	beq.n	a6ca <os_mbuf_prepend+0x8a>
        if (OS_MBUF_IS_PKTHDR(om)) {
    a6b0:	2907      	cmp	r1, #7
    a6b2:	d9cb      	bls.n	a64c <os_mbuf_prepend+0xc>
            p = os_mbuf_get_pkthdr(om->om_omp,
    a6b4:	3908      	subs	r1, #8
    a6b6:	b2c9      	uxtb	r1, r1
    a6b8:	68a0      	ldr	r0, [r4, #8]
    a6ba:	f7ff fdde 	bl	a27a <os_mbuf_get_pkthdr>
    a6be:	4605      	mov	r5, r0
    a6c0:	e7c9      	b.n	a656 <os_mbuf_prepend+0x16>
            os_mbuf_free_chain(om);
    a6c2:	4620      	mov	r0, r4
    a6c4:	f7ff fdfe 	bl	a2c4 <os_mbuf_free_chain>
            om = NULL;
    a6c8:	462c      	mov	r4, r5
    }

    return om;
}
    a6ca:	4620      	mov	r0, r4
    a6cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(new_buf->om_len == 0);
    a6ce:	88eb      	ldrh	r3, [r5, #6]
    a6d0:	b97b      	cbnz	r3, a6f2 <os_mbuf_prepend+0xb2>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
    a6d2:	f105 0710 	add.w	r7, r5, #16
    a6d6:	7962      	ldrb	r2, [r4, #5]
    a6d8:	f104 0110 	add.w	r1, r4, #16
    a6dc:	4638      	mov	r0, r7
    a6de:	f001 f8d7 	bl	b890 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
    a6e2:	7963      	ldrb	r3, [r4, #5]
    a6e4:	716b      	strb	r3, [r5, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
    a6e6:	7963      	ldrb	r3, [r4, #5]
    a6e8:	441f      	add	r7, r3
    a6ea:	602f      	str	r7, [r5, #0]
            om->om_pkthdr_len = 0;
    a6ec:	2300      	movs	r3, #0
    a6ee:	7163      	strb	r3, [r4, #5]
    a6f0:	e7b6      	b.n	a660 <os_mbuf_prepend+0x20>
    assert(new_buf->om_len == 0);
    a6f2:	f7fd fd65 	bl	81c0 <hal_debugger_connected>
    a6f6:	b100      	cbz	r0, a6fa <os_mbuf_prepend+0xba>
    a6f8:	be01      	bkpt	0x0001
    a6fa:	2300      	movs	r3, #0
    a6fc:	461a      	mov	r2, r3
    a6fe:	4619      	mov	r1, r3
    a700:	4618      	mov	r0, r3
    a702:	f7ff f965 	bl	99d0 <__assert_func>

0000a706 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
    a706:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a70a:	b083      	sub	sp, #12
    a70c:	4681      	mov	r9, r0
    a70e:	4688      	mov	r8, r1
    a710:	4617      	mov	r7, r2
    a712:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
    a714:	f10d 0206 	add.w	r2, sp, #6
    a718:	f7ff fe9a 	bl	a450 <os_mbuf_off>
    if (cur == NULL) {
    a71c:	4605      	mov	r5, r0
    a71e:	b948      	cbnz	r0, a734 <os_mbuf_copyinto+0x2e>
        return -1;
    a720:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    a724:	e02d      	b.n	a782 <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
    a726:	b366      	cbz	r6, a782 <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
    a728:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
    a72a:	b1ab      	cbz	r3, a758 <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
    a72c:	2200      	movs	r2, #0
    a72e:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
    a732:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
    a734:	88ec      	ldrh	r4, [r5, #6]
    a736:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a73a:	1ae4      	subs	r4, r4, r3
    a73c:	42b4      	cmp	r4, r6
    a73e:	bfa8      	it	ge
    a740:	4634      	movge	r4, r6
        if (copylen > 0) {
    a742:	2c00      	cmp	r4, #0
    a744:	ddef      	ble.n	a726 <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
    a746:	6828      	ldr	r0, [r5, #0]
    a748:	4622      	mov	r2, r4
    a74a:	4639      	mov	r1, r7
    a74c:	4418      	add	r0, r3
    a74e:	f001 f89f 	bl	b890 <memcpy>
            sptr += copylen;
    a752:	4427      	add	r7, r4
            len -= copylen;
    a754:	1b36      	subs	r6, r6, r4
    a756:	e7e6      	b.n	a726 <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
    a758:	b2b2      	uxth	r2, r6
    a75a:	4639      	mov	r1, r7
    a75c:	4628      	mov	r0, r5
    a75e:	f7ff fdc3 	bl	a2e8 <os_mbuf_append>
    if (rc != 0) {
    a762:	b968      	cbnz	r0, a780 <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
    a764:	f899 2005 	ldrb.w	r2, [r9, #5]
    a768:	2a07      	cmp	r2, #7
    a76a:	d90e      	bls.n	a78a <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    a76c:	4446      	add	r6, r8
    a76e:	f8b9 8010 	ldrh.w	r8, [r9, #16]
    a772:	4546      	cmp	r6, r8
    a774:	bfb8      	it	lt
    a776:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
    a778:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
    a77c:	4606      	mov	r6, r0
    a77e:	e000      	b.n	a782 <os_mbuf_copyinto+0x7c>
        return rc;
    a780:	4606      	mov	r6, r0
}
    a782:	4630      	mov	r0, r6
    a784:	b003      	add	sp, #12
    a786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    a78a:	4606      	mov	r6, r0
    a78c:	e7f9      	b.n	a782 <os_mbuf_copyinto+0x7c>

0000a78e <os_mbuf_concat>:
{
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
    a78e:	4602      	mov	r2, r0
    a790:	e000      	b.n	a794 <os_mbuf_concat+0x6>
        next = SLIST_NEXT(cur, om_next);
        if (next == NULL) {
            break;
        }

        cur = next;
    a792:	461a      	mov	r2, r3
        next = SLIST_NEXT(cur, om_next);
    a794:	68d3      	ldr	r3, [r2, #12]
        if (next == NULL) {
    a796:	2b00      	cmp	r3, #0
    a798:	d1fb      	bne.n	a792 <os_mbuf_concat+0x4>
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
    a79a:	60d1      	str	r1, [r2, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
    a79c:	7943      	ldrb	r3, [r0, #5]
    a79e:	2b07      	cmp	r3, #7
    a7a0:	d915      	bls.n	a7ce <os_mbuf_concat+0x40>
        if (OS_MBUF_IS_PKTHDR(second)) {
    a7a2:	794b      	ldrb	r3, [r1, #5]
    a7a4:	2b07      	cmp	r3, #7
    a7a6:	d80e      	bhi.n	a7c6 <os_mbuf_concat+0x38>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
        } else {
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
    a7a8:	460b      	mov	r3, r1
    a7aa:	b181      	cbz	r1, a7ce <os_mbuf_concat+0x40>
{
    a7ac:	b410      	push	{r4}
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
    a7ae:	88da      	ldrh	r2, [r3, #6]
    a7b0:	8a04      	ldrh	r4, [r0, #16]
    a7b2:	4422      	add	r2, r4
    a7b4:	8202      	strh	r2, [r0, #16]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
    a7b6:	68db      	ldr	r3, [r3, #12]
    a7b8:	2b00      	cmp	r3, #0
    a7ba:	d1f8      	bne.n	a7ae <os_mbuf_concat+0x20>
            }
        }
    }

    second->om_pkthdr_len = 0;
    a7bc:	2300      	movs	r3, #0
    a7be:	714b      	strb	r3, [r1, #5]
}
    a7c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    a7c4:	4770      	bx	lr
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
    a7c6:	8a0b      	ldrh	r3, [r1, #16]
    a7c8:	8a02      	ldrh	r2, [r0, #16]
    a7ca:	4413      	add	r3, r2
    a7cc:	8203      	strh	r3, [r0, #16]
    second->om_pkthdr_len = 0;
    a7ce:	2300      	movs	r3, #0
    a7d0:	714b      	strb	r3, [r1, #5]
    a7d2:	4770      	bx	lr

0000a7d4 <os_mbuf_extend>:

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
    a7d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
    a7d6:	6887      	ldr	r7, [r0, #8]
    a7d8:	883b      	ldrh	r3, [r7, #0]
    a7da:	428b      	cmp	r3, r1
    a7dc:	d327      	bcc.n	a82e <os_mbuf_extend+0x5a>
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
    a7de:	4604      	mov	r4, r0
    a7e0:	e000      	b.n	a7e4 <os_mbuf_extend+0x10>
    while (SLIST_NEXT(last, om_next) != NULL) {
        last = SLIST_NEXT(last, om_next);
    a7e2:	461c      	mov	r4, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
    a7e4:	68e3      	ldr	r3, [r4, #12]
    a7e6:	2b00      	cmp	r3, #0
    a7e8:	d1fb      	bne.n	a7e2 <os_mbuf_extend+0xe>
    a7ea:	460d      	mov	r5, r1
    a7ec:	4606      	mov	r6, r0
    omp = om->om_omp;
    a7ee:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a7f0:	f104 0310 	add.w	r3, r4, #16
    a7f4:	8812      	ldrh	r2, [r2, #0]
    a7f6:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    a7f8:	6822      	ldr	r2, [r4, #0]
    a7fa:	88e1      	ldrh	r1, [r4, #6]
    a7fc:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a7fe:	1a9b      	subs	r3, r3, r2
    a800:	b29b      	uxth	r3, r3
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
    a802:	429d      	cmp	r5, r3
    a804:	d80b      	bhi.n	a81e <os_mbuf_extend+0x4a>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
    a806:	6820      	ldr	r0, [r4, #0]
    a808:	88e3      	ldrh	r3, [r4, #6]
    a80a:	4418      	add	r0, r3
    last->om_len += len;
    a80c:	442b      	add	r3, r5
    a80e:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
    a810:	7973      	ldrb	r3, [r6, #5]
    a812:	2b07      	cmp	r3, #7
    a814:	d902      	bls.n	a81c <os_mbuf_extend+0x48>
        OS_MBUF_PKTHDR(om)->omp_len += len;
    a816:	8a31      	ldrh	r1, [r6, #16]
    a818:	440d      	add	r5, r1
    a81a:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
    a81c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        newm = os_mbuf_get(om->om_omp, 0);
    a81e:	2100      	movs	r1, #0
    a820:	4638      	mov	r0, r7
    a822:	f7ff fd11 	bl	a248 <os_mbuf_get>
        if (newm == NULL) {
    a826:	b120      	cbz	r0, a832 <os_mbuf_extend+0x5e>
        SLIST_NEXT(last, om_next) = newm;
    a828:	60e0      	str	r0, [r4, #12]
        last = newm;
    a82a:	4604      	mov	r4, r0
    a82c:	e7eb      	b.n	a806 <os_mbuf_extend+0x32>
        return NULL;
    a82e:	2000      	movs	r0, #0
    a830:	e7f4      	b.n	a81c <os_mbuf_extend+0x48>
            return NULL;
    a832:	2000      	movs	r0, #0
    a834:	e7f2      	b.n	a81c <os_mbuf_extend+0x48>

0000a836 <os_mbuf_pullup>:


struct os_mbuf *
os_mbuf_pullup(struct os_mbuf *om, uint16_t len)
{
    a836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a83a:	4604      	mov	r4, r0
    struct os_mbuf *next;
    struct os_mbuf *om2;
    int count;
    int space;

    omp = om->om_omp;
    a83c:	6880      	ldr	r0, [r0, #8]
    /*
     * If first mbuf has no cluster, and has room for len bytes
     * without shifting current data, pullup into it,
     * otherwise allocate a new mbuf to prepend to the chain.
     */
    if (om->om_len >= len) {
    a83e:	88e2      	ldrh	r2, [r4, #6]
    a840:	428a      	cmp	r2, r1
    a842:	d279      	bcs.n	a938 <os_mbuf_pullup+0x102>
    a844:	460d      	mov	r5, r1
    a846:	f104 0310 	add.w	r3, r4, #16
    a84a:	8806      	ldrh	r6, [r0, #0]
    a84c:	4433      	add	r3, r6
      (om->om_data + om->om_len);
    a84e:	6821      	ldr	r1, [r4, #0]
    a850:	4411      	add	r1, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a852:	1a5b      	subs	r3, r3, r1
        return (om);
    }
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
    a854:	fa12 f383 	uxtah	r3, r2, r3
    a858:	4629      	mov	r1, r5
    a85a:	42ab      	cmp	r3, r5
    a85c:	db12      	blt.n	a884 <os_mbuf_pullup+0x4e>
        SLIST_NEXT(om, om_next)) {
    a85e:	68e3      	ldr	r3, [r4, #12]
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
    a860:	b183      	cbz	r3, a884 <os_mbuf_pullup+0x4e>
        om2 = om;
        om = SLIST_NEXT(om, om_next);
        len -= om2->om_len;
    a862:	1aad      	subs	r5, r5, r2
    a864:	b2ad      	uxth	r5, r5
        om2 = om;
    a866:	4627      	mov	r7, r4
        om = SLIST_NEXT(om, om_next);
    a868:	461c      	mov	r4, r3
    omp = om->om_omp;
    a86a:	68bb      	ldr	r3, [r7, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a86c:	f107 0810 	add.w	r8, r7, #16
    a870:	881b      	ldrh	r3, [r3, #0]
    a872:	4498      	add	r8, r3
      (om->om_data + om->om_len);
    a874:	683b      	ldr	r3, [r7, #0]
    a876:	88fa      	ldrh	r2, [r7, #6]
    a878:	4413      	add	r3, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a87a:	eba8 0803 	sub.w	r8, r8, r3
    a87e:	fa1f f888 	uxth.w	r8, r8
    a882:	e02d      	b.n	a8e0 <os_mbuf_pullup+0xaa>
    } else {
        if (len > omp->omp_databuf_len - om->om_pkthdr_len) {
    a884:	7963      	ldrb	r3, [r4, #5]
    a886:	1af6      	subs	r6, r6, r3
    a888:	42b1      	cmp	r1, r6
    a88a:	dc50      	bgt.n	a92e <os_mbuf_pullup+0xf8>
            goto bad;
        }

        om2 = os_mbuf_get(omp, 0);
    a88c:	2100      	movs	r1, #0
    a88e:	f7ff fcdb 	bl	a248 <os_mbuf_get>
        if (om2 == NULL) {
    a892:	4607      	mov	r7, r0
    a894:	2800      	cmp	r0, #0
    a896:	d04a      	beq.n	a92e <os_mbuf_pullup+0xf8>
            goto bad;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
    a898:	7963      	ldrb	r3, [r4, #5]
    a89a:	2b07      	cmp	r3, #7
    a89c:	d9e5      	bls.n	a86a <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
    a89e:	88c3      	ldrh	r3, [r0, #6]
    a8a0:	b96b      	cbnz	r3, a8be <os_mbuf_pullup+0x88>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
    a8a2:	f100 0610 	add.w	r6, r0, #16
    a8a6:	7962      	ldrb	r2, [r4, #5]
    a8a8:	f104 0110 	add.w	r1, r4, #16
    a8ac:	4630      	mov	r0, r6
    a8ae:	f000 ffef 	bl	b890 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
    a8b2:	7963      	ldrb	r3, [r4, #5]
    a8b4:	717b      	strb	r3, [r7, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
    a8b6:	7963      	ldrb	r3, [r4, #5]
    a8b8:	441e      	add	r6, r3
    a8ba:	603e      	str	r6, [r7, #0]
    a8bc:	e7d5      	b.n	a86a <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
    a8be:	f7fd fc7f 	bl	81c0 <hal_debugger_connected>
    a8c2:	b100      	cbz	r0, a8c6 <os_mbuf_pullup+0x90>
    a8c4:	be01      	bkpt	0x0001
    a8c6:	2300      	movs	r3, #0
    a8c8:	461a      	mov	r2, r3
    a8ca:	4619      	mov	r1, r3
    a8cc:	4618      	mov	r0, r3
    a8ce:	f7ff f87f 	bl	99d0 <__assert_func>
        om->om_len -= count;
        space -= count;
        if (om->om_len) {
            om->om_data += count;
        } else {
            next = SLIST_NEXT(om, om_next);
    a8d2:	68e6      	ldr	r6, [r4, #12]
            os_mbuf_free(om);
    a8d4:	4620      	mov	r0, r4
    a8d6:	f7ff fceb 	bl	a2b0 <os_mbuf_free>
            om = next;
    a8da:	4634      	mov	r4, r6
        }
    } while (len > 0 && om);
    a8dc:	b30d      	cbz	r5, a922 <os_mbuf_pullup+0xec>
    a8de:	b304      	cbz	r4, a922 <os_mbuf_pullup+0xec>
        count = min(min(len, space), om->om_len);
    a8e0:	88e6      	ldrh	r6, [r4, #6]
    a8e2:	462b      	mov	r3, r5
    a8e4:	4545      	cmp	r5, r8
    a8e6:	bfa8      	it	ge
    a8e8:	4643      	movge	r3, r8
    a8ea:	429e      	cmp	r6, r3
    a8ec:	bfa8      	it	ge
    a8ee:	461e      	movge	r6, r3
        memcpy(om2->om_data + om2->om_len, om->om_data, count);
    a8f0:	6838      	ldr	r0, [r7, #0]
    a8f2:	88fb      	ldrh	r3, [r7, #6]
    a8f4:	4632      	mov	r2, r6
    a8f6:	6821      	ldr	r1, [r4, #0]
    a8f8:	4418      	add	r0, r3
    a8fa:	f000 ffc9 	bl	b890 <memcpy>
        len -= count;
    a8fe:	b2b2      	uxth	r2, r6
    a900:	1aad      	subs	r5, r5, r2
    a902:	b2ad      	uxth	r5, r5
        om2->om_len += count;
    a904:	88fb      	ldrh	r3, [r7, #6]
    a906:	4413      	add	r3, r2
    a908:	80fb      	strh	r3, [r7, #6]
        om->om_len -= count;
    a90a:	88e3      	ldrh	r3, [r4, #6]
    a90c:	1a9b      	subs	r3, r3, r2
    a90e:	b29b      	uxth	r3, r3
    a910:	80e3      	strh	r3, [r4, #6]
        space -= count;
    a912:	eba8 0806 	sub.w	r8, r8, r6
        if (om->om_len) {
    a916:	2b00      	cmp	r3, #0
    a918:	d0db      	beq.n	a8d2 <os_mbuf_pullup+0x9c>
            om->om_data += count;
    a91a:	6823      	ldr	r3, [r4, #0]
    a91c:	441e      	add	r6, r3
    a91e:	6026      	str	r6, [r4, #0]
    a920:	e7dc      	b.n	a8dc <os_mbuf_pullup+0xa6>
    if (len > 0) {
    a922:	b90d      	cbnz	r5, a928 <os_mbuf_pullup+0xf2>
        os_mbuf_free(om2);
        goto bad;
    }
    SLIST_NEXT(om2, om_next) = om;
    a924:	60fc      	str	r4, [r7, #12]
    return (om2);
    a926:	e008      	b.n	a93a <os_mbuf_pullup+0x104>
        os_mbuf_free(om2);
    a928:	4638      	mov	r0, r7
    a92a:	f7ff fcc1 	bl	a2b0 <os_mbuf_free>
bad:
    os_mbuf_free_chain(om);
    a92e:	4620      	mov	r0, r4
    a930:	f7ff fcc8 	bl	a2c4 <os_mbuf_free_chain>
    return (NULL);
    a934:	2700      	movs	r7, #0
    a936:	e000      	b.n	a93a <os_mbuf_pullup+0x104>
        return (om);
    a938:	4627      	mov	r7, r4
}
    a93a:	4638      	mov	r0, r7
    a93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a940 <os_mbuf_prepend_pullup>:
{
    a940:	b510      	push	{r4, lr}
    a942:	460c      	mov	r4, r1
    om = os_mbuf_prepend(om, len);
    a944:	f7ff fe7c 	bl	a640 <os_mbuf_prepend>
    if (om == NULL) {
    a948:	4603      	mov	r3, r0
    a94a:	b118      	cbz	r0, a954 <os_mbuf_prepend_pullup+0x14>
    om = os_mbuf_pullup(om, len);
    a94c:	4621      	mov	r1, r4
    a94e:	f7ff ff72 	bl	a836 <os_mbuf_pullup>
    a952:	4603      	mov	r3, r0
}
    a954:	4618      	mov	r0, r3
    a956:	bd10      	pop	{r4, pc}

0000a958 <os_mbuf_trim_front>:

struct os_mbuf *
os_mbuf_trim_front(struct os_mbuf *om)
{
    a958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a95a:	4606      	mov	r6, r0
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
    a95c:	88c7      	ldrh	r7, [r0, #6]
    a95e:	b9d7      	cbnz	r7, a996 <os_mbuf_trim_front+0x3e>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
    a960:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
    a962:	e005      	b.n	a970 <os_mbuf_trim_front+0x18>
        next = SLIST_NEXT(cur, om_next);
    a964:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
    a966:	60f5      	str	r5, [r6, #12]
        os_mbuf_free(cur);
    a968:	4620      	mov	r0, r4
    a96a:	f7ff fca1 	bl	a2b0 <os_mbuf_free>

        cur = next;
    a96e:	462c      	mov	r4, r5
    while (cur != NULL && cur->om_len == 0) {
    a970:	b114      	cbz	r4, a978 <os_mbuf_trim_front+0x20>
    a972:	88e3      	ldrh	r3, [r4, #6]
    a974:	2b00      	cmp	r3, #0
    a976:	d0f5      	beq.n	a964 <os_mbuf_trim_front+0xc>
    }

    if (cur == NULL) {
    a978:	b16c      	cbz	r4, a996 <os_mbuf_trim_front+0x3e>
    if (OS_MBUF_IS_PKTHDR(om)) {
    a97a:	7963      	ldrb	r3, [r4, #5]
    a97c:	2b07      	cmp	r3, #7
    a97e:	d900      	bls.n	a982 <os_mbuf_trim_front+0x2a>
        startoff = om->om_pkthdr_len;
    a980:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a982:	4620      	mov	r0, r4
    a984:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    a988:	4407      	add	r7, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a98a:	1bdf      	subs	r7, r3, r7
    a98c:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (OS_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
    a98e:	7973      	ldrb	r3, [r6, #5]
    a990:	b29a      	uxth	r2, r3
    a992:	42ba      	cmp	r2, r7
    a994:	d901      	bls.n	a99a <os_mbuf_trim_front+0x42>
        os_mbuf_free(om);
        om = cur;
    }

    return om;
}
    a996:	4630      	mov	r0, r6
    a998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
    a99a:	7163      	strb	r3, [r4, #5]
        memcpy(OS_MBUF_PKTHDR(cur), OS_MBUF_PKTHDR(om), om->om_pkthdr_len);
    a99c:	7972      	ldrb	r2, [r6, #5]
    a99e:	f106 0110 	add.w	r1, r6, #16
    a9a2:	f000 ff75 	bl	b890 <memcpy>
        os_mbuf_free(om);
    a9a6:	4630      	mov	r0, r6
    a9a8:	f7ff fc82 	bl	a2b0 <os_mbuf_free>
        om = cur;
    a9ac:	4626      	mov	r6, r4
    a9ae:	e7f2      	b.n	a996 <os_mbuf_trim_front+0x3e>

0000a9b0 <os_mbuf_pack_chains>:
    return 0;
}

struct os_mbuf *
os_mbuf_pack_chains(struct os_mbuf *m1, struct os_mbuf *m2)
{
    a9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t *dptr;
    struct os_mbuf *cur;
    struct os_mbuf *next;

    /* If m1 is NULL, return NULL */
    if (m1 == NULL) {
    a9b4:	4681      	mov	r9, r0
    a9b6:	2800      	cmp	r0, #0
    a9b8:	d04e      	beq.n	aa58 <os_mbuf_pack_chains+0xa8>

    /*
     * Concatenate the two chains to start. This will discard packet header in
     * m2 and adjust packet length in m1 if m1 has a packet header.
     */
    if (m2 != NULL) {
    a9ba:	b109      	cbz	r1, a9c0 <os_mbuf_pack_chains+0x10>
        os_mbuf_concat(m1, m2);
    a9bc:	f7ff fee7 	bl	a78e <os_mbuf_concat>
{
    a9c0:	464d      	mov	r5, r9
    a9c2:	e006      	b.n	a9d2 <os_mbuf_pack_chains+0x22>
    startoff = 0;
    a9c4:	2300      	movs	r3, #0
    a9c6:	e008      	b.n	a9da <os_mbuf_pack_chains+0x2a>

    cur = m1;
    while (1) {
        /* If there is leading space in the mbuf, move data up */
        if (OS_MBUF_LEADINGSPACE(cur)) {
            dptr = &cur->om_databuf[0];
    a9c8:	4634      	mov	r4, r6
    a9ca:	e010      	b.n	a9ee <os_mbuf_pack_chains+0x3e>
        if (next == NULL) {
            break;
        }

        /* Move cur to next as we filled up current */
        cur = next;
    a9cc:	4625      	mov	r5, r4
        if (next == NULL) {
    a9ce:	2c00      	cmp	r4, #0
    a9d0:	d042      	beq.n	aa58 <os_mbuf_pack_chains+0xa8>
    if (OS_MBUF_IS_PKTHDR(om)) {
    a9d2:	796a      	ldrb	r2, [r5, #5]
    a9d4:	2a07      	cmp	r2, #7
    a9d6:	d9f5      	bls.n	a9c4 <os_mbuf_pack_chains+0x14>
        startoff = om->om_pkthdr_len;
    a9d8:	b293      	uxth	r3, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a9da:	462e      	mov	r6, r5
    a9dc:	f856 1b10 	ldr.w	r1, [r6], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    a9e0:	4433      	add	r3, r6
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a9e2:	1acb      	subs	r3, r1, r3
    a9e4:	b29b      	uxth	r3, r3
        if (OS_MBUF_LEADINGSPACE(cur)) {
    a9e6:	b13b      	cbz	r3, a9f8 <os_mbuf_pack_chains+0x48>
            if (OS_MBUF_IS_PKTHDR(cur)) {
    a9e8:	2a07      	cmp	r2, #7
    a9ea:	d9ed      	bls.n	a9c8 <os_mbuf_pack_chains+0x18>
                dptr += cur->om_pkthdr_len;
    a9ec:	18b4      	adds	r4, r6, r2
            memmove(dptr, cur->om_data, cur->om_len);
    a9ee:	88ea      	ldrh	r2, [r5, #6]
    a9f0:	4620      	mov	r0, r4
    a9f2:	f000 ff5a 	bl	b8aa <memmove>
            cur->om_data = dptr;
    a9f6:	602c      	str	r4, [r5, #0]
        dptr = cur->om_data + cur->om_len;
    a9f8:	682b      	ldr	r3, [r5, #0]
    a9fa:	f8b5 8006 	ldrh.w	r8, [r5, #6]
    a9fe:	4498      	add	r8, r3
        next = SLIST_NEXT(cur, om_next);
    aa00:	68ec      	ldr	r4, [r5, #12]
    omp = om->om_omp;
    aa02:	68ab      	ldr	r3, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    aa04:	881f      	ldrh	r7, [r3, #0]
    aa06:	4437      	add	r7, r6
    aa08:	eba7 0708 	sub.w	r7, r7, r8
    aa0c:	b2bf      	uxth	r7, r7
        while (rem_len && next) {
    aa0e:	2f00      	cmp	r7, #0
    aa10:	d0dc      	beq.n	a9cc <os_mbuf_pack_chains+0x1c>
    aa12:	2c00      	cmp	r4, #0
    aa14:	d0da      	beq.n	a9cc <os_mbuf_pack_chains+0x1c>
            copylen = min(rem_len, next->om_len);
    aa16:	88e6      	ldrh	r6, [r4, #6]
    aa18:	42be      	cmp	r6, r7
    aa1a:	bf28      	it	cs
    aa1c:	463e      	movcs	r6, r7
            memcpy(dptr, next->om_data, copylen);
    aa1e:	4632      	mov	r2, r6
    aa20:	6821      	ldr	r1, [r4, #0]
    aa22:	4640      	mov	r0, r8
    aa24:	f000 ff34 	bl	b890 <memcpy>
            cur->om_len += copylen;
    aa28:	88eb      	ldrh	r3, [r5, #6]
    aa2a:	4433      	add	r3, r6
    aa2c:	80eb      	strh	r3, [r5, #6]
            dptr += copylen;
    aa2e:	44b0      	add	r8, r6
            rem_len -= copylen;
    aa30:	1bbf      	subs	r7, r7, r6
    aa32:	b2bf      	uxth	r7, r7
            next->om_data += copylen;
    aa34:	6823      	ldr	r3, [r4, #0]
    aa36:	4433      	add	r3, r6
    aa38:	6023      	str	r3, [r4, #0]
            next->om_len -= copylen;
    aa3a:	88e3      	ldrh	r3, [r4, #6]
    aa3c:	1b9e      	subs	r6, r3, r6
    aa3e:	80e6      	strh	r6, [r4, #6]
            while (next->om_len == 0) {
    aa40:	88e3      	ldrh	r3, [r4, #6]
    aa42:	2b00      	cmp	r3, #0
    aa44:	d1e3      	bne.n	aa0e <os_mbuf_pack_chains+0x5e>
                SLIST_NEXT(cur, om_next) = SLIST_NEXT(next, om_next);
    aa46:	68e3      	ldr	r3, [r4, #12]
    aa48:	60eb      	str	r3, [r5, #12]
                os_mbuf_free(next);
    aa4a:	4620      	mov	r0, r4
    aa4c:	f7ff fc30 	bl	a2b0 <os_mbuf_free>
                next = SLIST_NEXT(cur, om_next);
    aa50:	68ec      	ldr	r4, [r5, #12]
                if (next == NULL) {
    aa52:	2c00      	cmp	r4, #0
    aa54:	d1f4      	bne.n	aa40 <os_mbuf_pack_chains+0x90>
    aa56:	e7da      	b.n	aa0e <os_mbuf_pack_chains+0x5e>
    }

    return m1;
}
    aa58:	4648      	mov	r0, r9
    aa5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000aa60 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    aa60:	2800      	cmp	r0, #0
    aa62:	d031      	beq.n	aac8 <os_mempool_init_internal+0x68>
{
    aa64:	b430      	push	{r4, r5}
    aa66:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    aa68:	2a00      	cmp	r2, #0
    aa6a:	d02f      	beq.n	aacc <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    aa6c:	b1bb      	cbz	r3, aa9e <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    aa6e:	b113      	cbz	r3, aa76 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    aa70:	f013 0f03 	tst.w	r3, #3
    aa74:	d12c      	bne.n	aad0 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    aa76:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    aa78:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    aa7a:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    aa7c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    aa80:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    aa82:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    aa84:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    aa86:	9802      	ldr	r0, [sp, #8]
    aa88:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    aa8a:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    aa8c:	b199      	cbz	r1, aab6 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    aa8e:	f012 0f03 	tst.w	r2, #3
    aa92:	d002      	beq.n	aa9a <os_mempool_init_internal+0x3a>
    aa94:	f022 0203 	bic.w	r2, r2, #3
    aa98:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    aa9a:	2001      	movs	r0, #1
    aa9c:	e007      	b.n	aaae <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    aa9e:	2900      	cmp	r1, #0
    aaa0:	d0e5      	beq.n	aa6e <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    aaa2:	2003      	movs	r0, #3
    aaa4:	e00e      	b.n	aac4 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    aaa6:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    aaa8:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    aaaa:	3001      	adds	r0, #1
            block_addr += true_block_size;
    aaac:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    aaae:	4281      	cmp	r1, r0
    aab0:	dcf9      	bgt.n	aaa6 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    aab2:	2200      	movs	r2, #0
    aab4:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    aab6:	2000      	movs	r0, #0
    aab8:	6120      	str	r0, [r4, #16]
    aaba:	4b06      	ldr	r3, [pc, #24]	; (aad4 <os_mempool_init_internal+0x74>)
    aabc:	685a      	ldr	r2, [r3, #4]
    aabe:	6014      	str	r4, [r2, #0]
    aac0:	3410      	adds	r4, #16
    aac2:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    aac4:	bc30      	pop	{r4, r5}
    aac6:	4770      	bx	lr
        return OS_INVALID_PARM;
    aac8:	2003      	movs	r0, #3
}
    aaca:	4770      	bx	lr
        return OS_INVALID_PARM;
    aacc:	2003      	movs	r0, #3
    aace:	e7f9      	b.n	aac4 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    aad0:	2004      	movs	r0, #4
    aad2:	e7f7      	b.n	aac4 <os_mempool_init_internal+0x64>
    aad4:	200026f4 	.word	0x200026f4

0000aad8 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    aad8:	b510      	push	{r4, lr}
    aada:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    aadc:	2400      	movs	r4, #0
    aade:	9401      	str	r4, [sp, #4]
    aae0:	9c04      	ldr	r4, [sp, #16]
    aae2:	9400      	str	r4, [sp, #0]
    aae4:	f7ff ffbc 	bl	aa60 <os_mempool_init_internal>
}
    aae8:	b002      	add	sp, #8
    aaea:	bd10      	pop	{r4, pc}

0000aaec <os_mempool_clear>:
    struct os_memblock *block_ptr;
    int true_block_size;
    uint8_t *block_addr;
    uint16_t blocks;

    if (!mp) {
    aaec:	4601      	mov	r1, r0
    aaee:	b1b0      	cbz	r0, ab1e <os_mempool_clear+0x32>
        return OS_INVALID_PARM;
    }

    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    aaf0:	6800      	ldr	r0, [r0, #0]
    aaf2:	f010 0f03 	tst.w	r0, #3
    aaf6:	d002      	beq.n	aafe <os_mempool_clear+0x12>
    aaf8:	f020 0003 	bic.w	r0, r0, #3
    aafc:	3004      	adds	r0, #4

    /* cleanup the memory pool structure */
    mp->mp_num_free = mp->mp_num_blocks;
    aafe:	888b      	ldrh	r3, [r1, #4]
    ab00:	80cb      	strh	r3, [r1, #6]
    mp->mp_min_free = mp->mp_num_blocks;
    ab02:	810b      	strh	r3, [r1, #8]
    os_mempool_poison(mp, (void *)mp->mp_membuf_addr);
    os_mempool_guard(mp, (void *)mp->mp_membuf_addr);
    SLIST_FIRST(mp) = (void *)mp->mp_membuf_addr;
    ab04:	68ca      	ldr	r2, [r1, #12]
    ab06:	614a      	str	r2, [r1, #20]
    /* Chain the memory blocks to the free list */
    block_addr = (uint8_t *)mp->mp_membuf_addr;
    block_ptr = (struct os_memblock *)block_addr;
    blocks = mp->mp_num_blocks;

    while (blocks > 1) {
    ab08:	e004      	b.n	ab14 <os_mempool_clear+0x28>
        block_addr += true_block_size;
    ab0a:	1811      	adds	r1, r2, r0
        os_mempool_poison(mp, block_addr);
        os_mempool_guard(mp, block_addr);
        SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    ab0c:	6011      	str	r1, [r2, #0]
        block_ptr = (struct os_memblock *)block_addr;
        --blocks;
    ab0e:	3b01      	subs	r3, #1
    ab10:	b29b      	uxth	r3, r3
        block_ptr = (struct os_memblock *)block_addr;
    ab12:	460a      	mov	r2, r1
    while (blocks > 1) {
    ab14:	2b01      	cmp	r3, #1
    ab16:	d8f8      	bhi.n	ab0a <os_mempool_clear+0x1e>
    }

    /* Last one in the list should be NULL */
    SLIST_NEXT(block_ptr, mb_next) = NULL;
    ab18:	2000      	movs	r0, #0
    ab1a:	6010      	str	r0, [r2, #0]

    return OS_OK;
    ab1c:	4770      	bx	lr
        return OS_INVALID_PARM;
    ab1e:	2003      	movs	r0, #3
}
    ab20:	4770      	bx	lr

0000ab22 <os_memblock_from>:
    return true;
}

int
os_memblock_from(const struct os_mempool *mp, const void *block_addr)
{
    ab22:	b410      	push	{r4}

    static_assert(sizeof block_addr == sizeof baddr32,
                  "Pointer to void must be 32-bits.");

    baddr32 = (uint32_t)block_addr;
    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    ab24:	6803      	ldr	r3, [r0, #0]
    ab26:	f013 0f03 	tst.w	r3, #3
    ab2a:	d002      	beq.n	ab32 <os_memblock_from+0x10>
    ab2c:	f023 0303 	bic.w	r3, r3, #3
    ab30:	3304      	adds	r3, #4
    end = mp->mp_membuf_addr + (mp->mp_num_blocks * true_block_size);
    ab32:	68c4      	ldr	r4, [r0, #12]
    ab34:	8882      	ldrh	r2, [r0, #4]
    ab36:	fb03 4202 	mla	r2, r3, r2, r4

    /* Check that the block is in the memory buffer range. */
    if ((baddr32 < mp->mp_membuf_addr) || (baddr32 >= end)) {
    ab3a:	428c      	cmp	r4, r1
    ab3c:	d80b      	bhi.n	ab56 <os_memblock_from+0x34>
    ab3e:	4291      	cmp	r1, r2
    ab40:	d20d      	bcs.n	ab5e <os_memblock_from+0x3c>
        return 0;
    }

    /* All freed blocks should be on true block size boundaries! */
    if (((baddr32 - mp->mp_membuf_addr) % true_block_size) != 0) {
    ab42:	1b09      	subs	r1, r1, r4
    ab44:	fbb1 f2f3 	udiv	r2, r1, r3
    ab48:	fb03 1112 	mls	r1, r3, r2, r1
    ab4c:	b909      	cbnz	r1, ab52 <os_memblock_from+0x30>
        return 0;
    }

    return 1;
    ab4e:	2001      	movs	r0, #1
    ab50:	e002      	b.n	ab58 <os_memblock_from+0x36>
        return 0;
    ab52:	2000      	movs	r0, #0
    ab54:	e000      	b.n	ab58 <os_memblock_from+0x36>
        return 0;
    ab56:	2000      	movs	r0, #0
}
    ab58:	f85d 4b04 	ldr.w	r4, [sp], #4
    ab5c:	4770      	bx	lr
        return 0;
    ab5e:	2000      	movs	r0, #0
    ab60:	e7fa      	b.n	ab58 <os_memblock_from+0x36>

0000ab62 <os_memblock_get>:

void *
os_memblock_get(struct os_mempool *mp)
{
    ab62:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    ab64:	b1a0      	cbz	r0, ab90 <os_memblock_get+0x2e>
    ab66:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    ab68:	f000 fd24 	bl	b5b4 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    ab6c:	88e3      	ldrh	r3, [r4, #6]
    ab6e:	b153      	cbz	r3, ab86 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    ab70:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    ab72:	682a      	ldr	r2, [r5, #0]
    ab74:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    ab76:	3b01      	subs	r3, #1
    ab78:	b29b      	uxth	r3, r3
    ab7a:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    ab7c:	8922      	ldrh	r2, [r4, #8]
    ab7e:	4293      	cmp	r3, r2
    ab80:	d202      	bcs.n	ab88 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
    ab82:	8123      	strh	r3, [r4, #8]
    ab84:	e000      	b.n	ab88 <os_memblock_get+0x26>
    block = NULL;
    ab86:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
    ab88:	f000 fd1a 	bl	b5c0 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    ab8c:	4628      	mov	r0, r5
    ab8e:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    ab90:	2500      	movs	r5, #0
    return (void *)block;
    ab92:	e7fb      	b.n	ab8c <os_memblock_get+0x2a>

0000ab94 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    ab94:	b538      	push	{r3, r4, r5, lr}
    ab96:	4604      	mov	r4, r0
    ab98:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    ab9a:	f000 fd0b 	bl	b5b4 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    ab9e:	6963      	ldr	r3, [r4, #20]
    aba0:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    aba2:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    aba4:	88e3      	ldrh	r3, [r4, #6]
    aba6:	3301      	adds	r3, #1
    aba8:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    abaa:	f000 fd09 	bl	b5c0 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    abae:	2000      	movs	r0, #0
    abb0:	bd38      	pop	{r3, r4, r5, pc}

0000abb2 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    abb2:	b168      	cbz	r0, abd0 <os_memblock_put+0x1e>
{
    abb4:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
    abb6:	b169      	cbz	r1, abd4 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    abb8:	7a83      	ldrb	r3, [r0, #10]
    abba:	f013 0f01 	tst.w	r3, #1
    abbe:	d004      	beq.n	abca <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    abc0:	69c3      	ldr	r3, [r0, #28]
    abc2:	b113      	cbz	r3, abca <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    abc4:	6a02      	ldr	r2, [r0, #32]
    abc6:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    abc8:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
    abca:	f7ff ffe3 	bl	ab94 <os_memblock_put_from_cb>
    abce:	e7fb      	b.n	abc8 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
    abd0:	2003      	movs	r0, #3
}
    abd2:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    abd4:	2003      	movs	r0, #3
    abd6:	e7f7      	b.n	abc8 <os_memblock_put+0x16>

0000abd8 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    abd8:	4b02      	ldr	r3, [pc, #8]	; (abe4 <os_mempool_module_init+0xc>)
    abda:	2200      	movs	r2, #0
    abdc:	601a      	str	r2, [r3, #0]
    abde:	605b      	str	r3, [r3, #4]
}
    abe0:	4770      	bx	lr
    abe2:	bf00      	nop
    abe4:	200026f4 	.word	0x200026f4

0000abe8 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    abe8:	4b02      	ldr	r3, [pc, #8]	; (abf4 <os_msys_find_biggest_pool+0xc>)
    abea:	6818      	ldr	r0, [r3, #0]
    abec:	b108      	cbz	r0, abf2 <os_msys_find_biggest_pool+0xa>
    abee:	6858      	ldr	r0, [r3, #4]
    abf0:	3808      	subs	r0, #8
}
    abf2:	4770      	bx	lr
    abf4:	20000138 	.word	0x20000138

0000abf8 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    abf8:	4b09      	ldr	r3, [pc, #36]	; (ac20 <os_msys_find_pool+0x28>)
    abfa:	6819      	ldr	r1, [r3, #0]
    abfc:	460b      	mov	r3, r1
    abfe:	b123      	cbz	r3, ac0a <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
    ac00:	881a      	ldrh	r2, [r3, #0]
    ac02:	4282      	cmp	r2, r0
    ac04:	d201      	bcs.n	ac0a <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    ac06:	689b      	ldr	r3, [r3, #8]
    ac08:	e7f9      	b.n	abfe <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
    ac0a:	b10b      	cbz	r3, ac10 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
    ac0c:	4618      	mov	r0, r3
    ac0e:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    ac10:	b119      	cbz	r1, ac1a <os_msys_find_pool+0x22>
    ac12:	4b03      	ldr	r3, [pc, #12]	; (ac20 <os_msys_find_pool+0x28>)
    ac14:	685b      	ldr	r3, [r3, #4]
    ac16:	3b08      	subs	r3, #8
    ac18:	e7f8      	b.n	ac0c <os_msys_find_pool+0x14>
    ac1a:	460b      	mov	r3, r1
    return (pool);
    ac1c:	e7f6      	b.n	ac0c <os_msys_find_pool+0x14>
    ac1e:	bf00      	nop
    ac20:	20000138 	.word	0x20000138

0000ac24 <os_msys_register>:
{
    ac24:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    ac26:	4b11      	ldr	r3, [pc, #68]	; (ac6c <os_msys_register+0x48>)
    ac28:	681d      	ldr	r5, [r3, #0]
    ac2a:	462b      	mov	r3, r5
    prev = NULL;
    ac2c:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    ac2e:	b133      	cbz	r3, ac3e <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    ac30:	8801      	ldrh	r1, [r0, #0]
    ac32:	881a      	ldrh	r2, [r3, #0]
    ac34:	4291      	cmp	r1, r2
    ac36:	d302      	bcc.n	ac3e <os_msys_register+0x1a>
        prev = pool;
    ac38:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    ac3a:	689b      	ldr	r3, [r3, #8]
    ac3c:	e7f7      	b.n	ac2e <os_msys_register+0xa>
    if (prev) {
    ac3e:	b15c      	cbz	r4, ac58 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    ac40:	68a3      	ldr	r3, [r4, #8]
    ac42:	6083      	str	r3, [r0, #8]
    ac44:	b11b      	cbz	r3, ac4e <os_msys_register+0x2a>
    ac46:	60a0      	str	r0, [r4, #8]
}
    ac48:	2000      	movs	r0, #0
    ac4a:	bc30      	pop	{r4, r5}
    ac4c:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    ac4e:	f100 0308 	add.w	r3, r0, #8
    ac52:	4a06      	ldr	r2, [pc, #24]	; (ac6c <os_msys_register+0x48>)
    ac54:	6053      	str	r3, [r2, #4]
    ac56:	e7f6      	b.n	ac46 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    ac58:	6085      	str	r5, [r0, #8]
    ac5a:	b115      	cbz	r5, ac62 <os_msys_register+0x3e>
    ac5c:	4b03      	ldr	r3, [pc, #12]	; (ac6c <os_msys_register+0x48>)
    ac5e:	6018      	str	r0, [r3, #0]
    ac60:	e7f2      	b.n	ac48 <os_msys_register+0x24>
    ac62:	f100 0308 	add.w	r3, r0, #8
    ac66:	4a01      	ldr	r2, [pc, #4]	; (ac6c <os_msys_register+0x48>)
    ac68:	6053      	str	r3, [r2, #4]
    ac6a:	e7f7      	b.n	ac5c <os_msys_register+0x38>
    ac6c:	20000138 	.word	0x20000138

0000ac70 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    ac70:	b530      	push	{r4, r5, lr}
    ac72:	b083      	sub	sp, #12
    ac74:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    ac76:	9d07      	ldr	r5, [sp, #28]
    ac78:	9501      	str	r5, [sp, #4]
    ac7a:	9d06      	ldr	r5, [sp, #24]
    ac7c:	9500      	str	r5, [sp, #0]
    ac7e:	f00c fb14 	bl	172aa <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    ac82:	b928      	cbnz	r0, ac90 <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
    ac84:	4620      	mov	r0, r4
    ac86:	f7ff ffcd 	bl	ac24 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ac8a:	b970      	cbnz	r0, acaa <os_msys_init_once+0x3a>
}
    ac8c:	b003      	add	sp, #12
    ac8e:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    ac90:	f7fd fa96 	bl	81c0 <hal_debugger_connected>
    ac94:	b100      	cbz	r0, ac98 <os_msys_init_once+0x28>
    ac96:	be01      	bkpt	0x0001
    ac98:	2000      	movs	r0, #0
    ac9a:	9000      	str	r0, [sp, #0]
    ac9c:	4b09      	ldr	r3, [pc, #36]	; (acc4 <os_msys_init_once+0x54>)
    ac9e:	681d      	ldr	r5, [r3, #0]
    aca0:	4603      	mov	r3, r0
    aca2:	4602      	mov	r2, r0
    aca4:	4601      	mov	r1, r0
    aca6:	47a8      	blx	r5
    aca8:	e7ec      	b.n	ac84 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
    acaa:	f7fd fa89 	bl	81c0 <hal_debugger_connected>
    acae:	b100      	cbz	r0, acb2 <os_msys_init_once+0x42>
    acb0:	be01      	bkpt	0x0001
    acb2:	2000      	movs	r0, #0
    acb4:	9000      	str	r0, [sp, #0]
    acb6:	4b03      	ldr	r3, [pc, #12]	; (acc4 <os_msys_init_once+0x54>)
    acb8:	681c      	ldr	r4, [r3, #0]
    acba:	4603      	mov	r3, r0
    acbc:	4602      	mov	r2, r0
    acbe:	4601      	mov	r1, r0
    acc0:	47a0      	blx	r4
}
    acc2:	e7e3      	b.n	ac8c <os_msys_init_once+0x1c>
    acc4:	200000ec 	.word	0x200000ec

0000acc8 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    acc8:	4b02      	ldr	r3, [pc, #8]	; (acd4 <os_msys_reset+0xc>)
    acca:	2200      	movs	r2, #0
    accc:	601a      	str	r2, [r3, #0]
    acce:	605b      	str	r3, [r3, #4]
}
    acd0:	4770      	bx	lr
    acd2:	bf00      	nop
    acd4:	20000138 	.word	0x20000138

0000acd8 <os_msys_get>:
{
    acd8:	b510      	push	{r4, lr}
    acda:	460c      	mov	r4, r1
    if (dsize == 0) {
    acdc:	b930      	cbnz	r0, acec <os_msys_get+0x14>
        pool = os_msys_find_biggest_pool();
    acde:	f7ff ff83 	bl	abe8 <os_msys_find_biggest_pool>
    if (!pool) {
    ace2:	b130      	cbz	r0, acf2 <os_msys_get+0x1a>
    m = os_mbuf_get(pool, leadingspace);
    ace4:	4621      	mov	r1, r4
    ace6:	f7ff faaf 	bl	a248 <os_mbuf_get>
}
    acea:	bd10      	pop	{r4, pc}
        pool = os_msys_find_pool(dsize);
    acec:	f7ff ff84 	bl	abf8 <os_msys_find_pool>
    acf0:	e7f7      	b.n	ace2 <os_msys_get+0xa>
    return (NULL);
    acf2:	2000      	movs	r0, #0
    acf4:	e7f9      	b.n	acea <os_msys_get+0x12>

0000acf6 <os_msys_get_pkthdr>:
{
    acf6:	b510      	push	{r4, lr}
    acf8:	460c      	mov	r4, r1
    if (dsize == 0) {
    acfa:	b930      	cbnz	r0, ad0a <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
    acfc:	f7ff ff74 	bl	abe8 <os_msys_find_biggest_pool>
    if (!pool) {
    ad00:	b158      	cbz	r0, ad1a <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    ad02:	b2e1      	uxtb	r1, r4
    ad04:	f7ff fab9 	bl	a27a <os_mbuf_get_pkthdr>
}
    ad08:	bd10      	pop	{r4, pc}
    ad0a:	f101 0308 	add.w	r3, r1, #8
    ad0e:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    ad10:	4403      	add	r3, r0
    ad12:	b298      	uxth	r0, r3
    ad14:	f7ff ff70 	bl	abf8 <os_msys_find_pool>
    ad18:	e7f2      	b.n	ad00 <os_msys_get_pkthdr+0xa>
    return (NULL);
    ad1a:	2000      	movs	r0, #0
    ad1c:	e7f4      	b.n	ad08 <os_msys_get_pkthdr+0x12>
	...

0000ad20 <os_msys_init>:

void
os_msys_init(void)
{
    ad20:	b500      	push	{lr}
    ad22:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    ad24:	f7ff ffd0 	bl	acc8 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    ad28:	4b06      	ldr	r3, [pc, #24]	; (ad44 <os_msys_init+0x24>)
    ad2a:	9301      	str	r3, [sp, #4]
    ad2c:	f44f 7392 	mov.w	r3, #292	; 0x124
    ad30:	9300      	str	r3, [sp, #0]
    ad32:	2340      	movs	r3, #64	; 0x40
    ad34:	4a04      	ldr	r2, [pc, #16]	; (ad48 <os_msys_init+0x28>)
    ad36:	4905      	ldr	r1, [pc, #20]	; (ad4c <os_msys_init+0x2c>)
    ad38:	4805      	ldr	r0, [pc, #20]	; (ad50 <os_msys_init+0x30>)
    ad3a:	f7ff ff99 	bl	ac70 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    ad3e:	b003      	add	sp, #12
    ad40:	f85d fb04 	ldr.w	pc, [sp], #4
    ad44:	00028c44 	.word	0x00028c44
    ad48:	20006ffc 	.word	0x20006ffc
    ad4c:	20007008 	.word	0x20007008
    ad50:	200026fc 	.word	0x200026fc

0000ad54 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    ad54:	4603      	mov	r3, r0
    ad56:	b128      	cbz	r0, ad64 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    ad58:	2000      	movs	r0, #0
    ad5a:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    ad5c:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    ad5e:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    ad60:	6018      	str	r0, [r3, #0]
    ad62:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    ad64:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    ad66:	4770      	bx	lr

0000ad68 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    ad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    ad6a:	4b2e      	ldr	r3, [pc, #184]	; (ae24 <os_mutex_release+0xbc>)
    ad6c:	681b      	ldr	r3, [r3, #0]
    ad6e:	2b00      	cmp	r3, #0
    ad70:	d052      	beq.n	ae18 <os_mutex_release+0xb0>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    ad72:	2800      	cmp	r0, #0
    ad74:	d052      	beq.n	ae1c <os_mutex_release+0xb4>
    ad76:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    ad78:	f000 f98a 	bl	b090 <os_sched_get_current_task>
    ad7c:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    ad7e:	88e3      	ldrh	r3, [r4, #6]
    ad80:	2b00      	cmp	r3, #0
    ad82:	d04d      	beq.n	ae20 <os_mutex_release+0xb8>
    ad84:	68a2      	ldr	r2, [r4, #8]
    ad86:	4282      	cmp	r2, r0
    ad88:	d001      	beq.n	ad8e <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
    ad8a:	2005      	movs	r0, #5
    ad8c:	e045      	b.n	ae1a <os_mutex_release+0xb2>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    ad8e:	2b01      	cmp	r3, #1
    ad90:	d003      	beq.n	ad9a <os_mutex_release+0x32>
        --mu->mu_level;
    ad92:	3b01      	subs	r3, #1
    ad94:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    ad96:	2000      	movs	r0, #0
        goto done;
    ad98:	e03f      	b.n	ae1a <os_mutex_release+0xb2>
    }

    OS_ENTER_CRITICAL(sr);
    ad9a:	f000 fc0b 	bl	b5b4 <os_arch_save_sr>
    ad9e:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
    ada0:	88e3      	ldrh	r3, [r4, #6]
    ada2:	3b01      	subs	r3, #1
    ada4:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
    ada6:	7aea      	ldrb	r2, [r5, #11]
    ada8:	7963      	ldrb	r3, [r4, #5]
    adaa:	429a      	cmp	r2, r3
    adac:	d11e      	bne.n	adec <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
    adae:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    adb0:	b146      	cbz	r6, adc4 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
    adb2:	69f3      	ldr	r3, [r6, #28]
    adb4:	b1fb      	cbz	r3, adf6 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
    adb6:	4630      	mov	r0, r6
    adb8:	f000 f9be 	bl	b138 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
    adbc:	2301      	movs	r3, #1
    adbe:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    adc0:	7af3      	ldrb	r3, [r6, #11]
    adc2:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
    adc4:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    adc6:	b116      	cbz	r6, adce <os_mutex_release+0x66>
        rdy->t_lockcnt++;
    adc8:	7bb3      	ldrb	r3, [r6, #14]
    adca:	3301      	adds	r3, #1
    adcc:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
    adce:	7bab      	ldrb	r3, [r5, #14]
    add0:	3b01      	subs	r3, #1
    add2:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
    add4:	f000 fa36 	bl	b244 <os_sched_next_task>
    add8:	4604      	mov	r4, r0
    if (rdy != current) {
    adda:	4285      	cmp	r5, r0
    addc:	d015      	beq.n	ae0a <os_mutex_release+0xa2>
        resched = 1;
    adde:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
    ade0:	4638      	mov	r0, r7
    ade2:	f000 fbed 	bl	b5c0 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    ade6:	b995      	cbnz	r5, ae0e <os_mutex_release+0xa6>
        os_sched(rdy);
    }

    ret = OS_OK;
    ade8:	2000      	movs	r0, #0
    adea:	e016      	b.n	ae1a <os_mutex_release+0xb2>
        current->t_prio = mu->mu_prio;
    adec:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    adee:	4628      	mov	r0, r5
    adf0:	f000 fa40 	bl	b274 <os_sched_resort>
    adf4:	e7db      	b.n	adae <os_mutex_release+0x46>
        assert(rdy->t_obj);
    adf6:	f7fd f9e3 	bl	81c0 <hal_debugger_connected>
    adfa:	b100      	cbz	r0, adfe <os_mutex_release+0x96>
    adfc:	be01      	bkpt	0x0001
    adfe:	2300      	movs	r3, #0
    ae00:	461a      	mov	r2, r3
    ae02:	4619      	mov	r1, r3
    ae04:	4618      	mov	r0, r3
    ae06:	f7fe fde3 	bl	99d0 <__assert_func>
    resched = 0;
    ae0a:	2500      	movs	r5, #0
    ae0c:	e7e8      	b.n	ade0 <os_mutex_release+0x78>
        os_sched(rdy);
    ae0e:	4620      	mov	r0, r4
    ae10:	f000 fa1e 	bl	b250 <os_sched>
    ret = OS_OK;
    ae14:	2000      	movs	r0, #0
    ae16:	e000      	b.n	ae1a <os_mutex_release+0xb2>
        ret = OS_NOT_STARTED;
    ae18:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    ae1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    ae1c:	2003      	movs	r0, #3
    ae1e:	e7fc      	b.n	ae1a <os_mutex_release+0xb2>
        ret = OS_BAD_MUTEX;
    ae20:	2005      	movs	r0, #5
    ae22:	e7fa      	b.n	ae1a <os_mutex_release+0xb2>
    ae24:	200026d0 	.word	0x200026d0

0000ae28 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    ae28:	4b36      	ldr	r3, [pc, #216]	; (af04 <os_mutex_pend+0xdc>)
    ae2a:	681b      	ldr	r3, [r3, #0]
    ae2c:	2b00      	cmp	r3, #0
    ae2e:	d065      	beq.n	aefc <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    ae30:	2800      	cmp	r0, #0
    ae32:	d065      	beq.n	af00 <os_mutex_pend+0xd8>
{
    ae34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ae38:	460f      	mov	r7, r1
    ae3a:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    ae3c:	f000 fbba 	bl	b5b4 <os_arch_save_sr>
    ae40:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    ae42:	f000 f925 	bl	b090 <os_sched_get_current_task>
    ae46:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
    ae48:	88e3      	ldrh	r3, [r4, #6]
    ae4a:	b19b      	cbz	r3, ae74 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
    ae4c:	68a2      	ldr	r2, [r4, #8]
    ae4e:	4282      	cmp	r2, r0
    ae50:	d01e      	beq.n	ae90 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
    ae52:	b327      	cbz	r7, ae9e <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
    ae54:	7ad1      	ldrb	r1, [r2, #11]
    ae56:	7ac3      	ldrb	r3, [r0, #11]
    ae58:	4299      	cmp	r1, r3
    ae5a:	d825      	bhi.n	aea8 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
    ae5c:	6821      	ldr	r1, [r4, #0]
    ae5e:	b369      	cbz	r1, aebc <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ae60:	460b      	mov	r3, r1
    last = NULL;
    ae62:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ae64:	b32b      	cbz	r3, aeb2 <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
    ae66:	7ae8      	ldrb	r0, [r5, #11]
    ae68:	7ada      	ldrb	r2, [r3, #11]
    ae6a:	4290      	cmp	r0, r2
    ae6c:	d321      	bcc.n	aeb2 <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
    ae6e:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ae70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ae72:	e7f7      	b.n	ae64 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
    ae74:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
    ae76:	7ac3      	ldrb	r3, [r0, #11]
    ae78:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
    ae7a:	7b83      	ldrb	r3, [r0, #14]
    ae7c:	3301      	adds	r3, #1
    ae7e:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    ae80:	2301      	movs	r3, #1
    ae82:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
    ae84:	4640      	mov	r0, r8
    ae86:	f000 fb9b 	bl	b5c0 <os_arch_restore_sr>
        ret = OS_OK;
    ae8a:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    ae8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
    ae90:	3301      	adds	r3, #1
    ae92:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
    ae94:	4640      	mov	r0, r8
    ae96:	f000 fb93 	bl	b5c0 <os_arch_restore_sr>
        ret = OS_OK;
    ae9a:	2000      	movs	r0, #0
        goto done;
    ae9c:	e7f6      	b.n	ae8c <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
    ae9e:	4640      	mov	r0, r8
    aea0:	f000 fb8e 	bl	b5c0 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    aea4:	2006      	movs	r0, #6
        goto done;
    aea6:	e7f1      	b.n	ae8c <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
    aea8:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
    aeaa:	68a0      	ldr	r0, [r4, #8]
    aeac:	f000 f9e2 	bl	b274 <os_sched_resort>
    aeb0:	e7d4      	b.n	ae5c <os_mutex_pend+0x34>
    if (last) {
    aeb2:	b11e      	cbz	r6, aebc <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    aeb4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
    aeb6:	64eb      	str	r3, [r5, #76]	; 0x4c
    aeb8:	64f5      	str	r5, [r6, #76]	; 0x4c
    aeba:	e001      	b.n	aec0 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    aebc:	64e9      	str	r1, [r5, #76]	; 0x4c
    aebe:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
    aec0:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    aec2:	7b6b      	ldrb	r3, [r5, #13]
    aec4:	f043 0304 	orr.w	r3, r3, #4
    aec8:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
    aeca:	4639      	mov	r1, r7
    aecc:	4628      	mov	r0, r5
    aece:	f000 f8eb 	bl	b0a8 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    aed2:	4640      	mov	r0, r8
    aed4:	f000 fb74 	bl	b5c0 <os_arch_restore_sr>
    os_sched(NULL);
    aed8:	2000      	movs	r0, #0
    aeda:	f000 f9b9 	bl	b250 <os_sched>
    OS_ENTER_CRITICAL(sr);
    aede:	f000 fb69 	bl	b5b4 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    aee2:	7b6b      	ldrb	r3, [r5, #13]
    aee4:	f023 0304 	bic.w	r3, r3, #4
    aee8:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
    aeea:	f000 fb69 	bl	b5c0 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
    aeee:	68a3      	ldr	r3, [r4, #8]
    aef0:	42ab      	cmp	r3, r5
    aef2:	d001      	beq.n	aef8 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
    aef4:	2006      	movs	r0, #6
    aef6:	e7c9      	b.n	ae8c <os_mutex_pend+0x64>
        ret = OS_OK;
    aef8:	2000      	movs	r0, #0
    aefa:	e7c7      	b.n	ae8c <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
    aefc:	2009      	movs	r0, #9
    aefe:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    af00:	2003      	movs	r0, #3
}
    af02:	4770      	bx	lr
    af04:	200026d0 	.word	0x200026d0

0000af08 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    af08:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    af0a:	4b05      	ldr	r3, [pc, #20]	; (af20 <os_sanity_check_list_lock+0x18>)
    af0c:	6818      	ldr	r0, [r3, #0]
    af0e:	b900      	cbnz	r0, af12 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
    af10:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    af12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    af16:	4803      	ldr	r0, [pc, #12]	; (af24 <os_sanity_check_list_lock+0x1c>)
    af18:	f7ff ff86 	bl	ae28 <os_mutex_pend>
err:
    af1c:	e7f8      	b.n	af10 <os_sanity_check_list_lock+0x8>
    af1e:	bf00      	nop
    af20:	200026d0 	.word	0x200026d0
    af24:	20007028 	.word	0x20007028

0000af28 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    af28:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    af2a:	4b04      	ldr	r3, [pc, #16]	; (af3c <os_sanity_check_list_unlock+0x14>)
    af2c:	6818      	ldr	r0, [r3, #0]
    af2e:	b900      	cbnz	r0, af32 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
    af30:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
    af32:	4803      	ldr	r0, [pc, #12]	; (af40 <os_sanity_check_list_unlock+0x18>)
    af34:	f7ff ff18 	bl	ad68 <os_mutex_release>
err:
    af38:	e7fa      	b.n	af30 <os_sanity_check_list_unlock+0x8>
    af3a:	bf00      	nop
    af3c:	200026d0 	.word	0x200026d0
    af40:	20007028 	.word	0x20007028

0000af44 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
    af44:	2300      	movs	r3, #0
    af46:	6003      	str	r3, [r0, #0]
    af48:	6043      	str	r3, [r0, #4]
    af4a:	6083      	str	r3, [r0, #8]
    af4c:	60c3      	str	r3, [r0, #12]
    af4e:	6103      	str	r3, [r0, #16]
}
    af50:	4618      	mov	r0, r3
    af52:	4770      	bx	lr

0000af54 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    af54:	b510      	push	{r4, lr}
    af56:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    af58:	f7ff ffd6 	bl	af08 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    af5c:	4603      	mov	r3, r0
    af5e:	b108      	cbz	r0, af64 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
    af60:	4618      	mov	r0, r3
    af62:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    af64:	4b03      	ldr	r3, [pc, #12]	; (af74 <os_sanity_check_register+0x20>)
    af66:	681a      	ldr	r2, [r3, #0]
    af68:	6122      	str	r2, [r4, #16]
    af6a:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
    af6c:	f7ff ffdc 	bl	af28 <os_sanity_check_list_unlock>
    af70:	4603      	mov	r3, r0
err:
    af72:	e7f5      	b.n	af60 <os_sanity_check_register+0xc>
    af74:	20007024 	.word	0x20007024

0000af78 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    af78:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    af7a:	f7ff ffc5 	bl	af08 <os_sanity_check_list_lock>
    if (rc != 0) {
    af7e:	b910      	cbnz	r0, af86 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    af80:	4b1d      	ldr	r3, [pc, #116]	; (aff8 <os_sanity_run+0x80>)
    af82:	681c      	ldr	r4, [r3, #0]
    af84:	e012      	b.n	afac <os_sanity_run+0x34>
        assert(0);
    af86:	f7fd f91b 	bl	81c0 <hal_debugger_connected>
    af8a:	b100      	cbz	r0, af8e <os_sanity_run+0x16>
    af8c:	be01      	bkpt	0x0001
    af8e:	2300      	movs	r3, #0
    af90:	461a      	mov	r2, r3
    af92:	4619      	mov	r1, r3
    af94:	4618      	mov	r0, r3
    af96:	f7fe fd1b 	bl	99d0 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
    af9a:	f000 fa8d 	bl	b4b8 <os_time_get>
    af9e:	6823      	ldr	r3, [r4, #0]
    afa0:	6862      	ldr	r2, [r4, #4]
    afa2:	4413      	add	r3, r2
    afa4:	1ac3      	subs	r3, r0, r3
    afa6:	2b00      	cmp	r3, #0
    afa8:	dc0d      	bgt.n	afc6 <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    afaa:	6924      	ldr	r4, [r4, #16]
    afac:	b1ac      	cbz	r4, afda <os_sanity_run+0x62>
        if (sc->sc_func) {
    afae:	68a3      	ldr	r3, [r4, #8]
    afb0:	2b00      	cmp	r3, #0
    afb2:	d0f2      	beq.n	af9a <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
    afb4:	68e1      	ldr	r1, [r4, #12]
    afb6:	4620      	mov	r0, r4
    afb8:	4798      	blx	r3
            if (rc == OS_OK) {
    afba:	2800      	cmp	r0, #0
    afbc:	d1ed      	bne.n	af9a <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
    afbe:	f000 fa7b 	bl	b4b8 <os_time_get>
    afc2:	6020      	str	r0, [r4, #0]
                continue;
    afc4:	e7f1      	b.n	afaa <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
    afc6:	f7fd f8fb 	bl	81c0 <hal_debugger_connected>
    afca:	b100      	cbz	r0, afce <os_sanity_run+0x56>
    afcc:	be01      	bkpt	0x0001
    afce:	2300      	movs	r3, #0
    afd0:	461a      	mov	r2, r3
    afd2:	4619      	mov	r1, r3
    afd4:	4618      	mov	r0, r3
    afd6:	f7fe fcfb 	bl	99d0 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
    afda:	f7ff ffa5 	bl	af28 <os_sanity_check_list_unlock>
    if (rc != 0) {
    afde:	b900      	cbnz	r0, afe2 <os_sanity_run+0x6a>
        assert(0);
    }
}
    afe0:	bd10      	pop	{r4, pc}
        assert(0);
    afe2:	f7fd f8ed 	bl	81c0 <hal_debugger_connected>
    afe6:	b100      	cbz	r0, afea <os_sanity_run+0x72>
    afe8:	be01      	bkpt	0x0001
    afea:	2300      	movs	r3, #0
    afec:	461a      	mov	r2, r3
    afee:	4619      	mov	r1, r3
    aff0:	4618      	mov	r0, r3
    aff2:	f7fe fced 	bl	99d0 <__assert_func>
    aff6:	bf00      	nop
    aff8:	20007024 	.word	0x20007024

0000affc <os_sanity_init>:

int
os_sanity_init(void)
{
    affc:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    affe:	4802      	ldr	r0, [pc, #8]	; (b008 <os_sanity_init+0xc>)
    b000:	f7ff fea8 	bl	ad54 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    b004:	bd08      	pop	{r3, pc}
    b006:	bf00      	nop
    b008:	20007028 	.word	0x20007028

0000b00c <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    b00c:	7b03      	ldrb	r3, [r0, #12]
    b00e:	2b01      	cmp	r3, #1
    b010:	d001      	beq.n	b016 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    b012:	2002      	movs	r0, #2
}
    b014:	4770      	bx	lr
{
    b016:	b510      	push	{r4, lr}
    b018:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    b01a:	f000 facb 	bl	b5b4 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    b01e:	4b0f      	ldr	r3, [pc, #60]	; (b05c <os_sched_insert+0x50>)
    b020:	681b      	ldr	r3, [r3, #0]
    b022:	b12b      	cbz	r3, b030 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
    b024:	7ae1      	ldrb	r1, [r4, #11]
    b026:	7ada      	ldrb	r2, [r3, #11]
    b028:	4291      	cmp	r1, r2
    b02a:	d301      	bcc.n	b030 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    b02c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b02e:	e7f8      	b.n	b022 <os_sched_insert+0x16>
    if (entry) {
    b030:	b153      	cbz	r3, b048 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    b032:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b034:	64a2      	str	r2, [r4, #72]	; 0x48
    b036:	6463      	str	r3, [r4, #68]	; 0x44
    b038:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b03a:	6014      	str	r4, [r2, #0]
    b03c:	3444      	adds	r4, #68	; 0x44
    b03e:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    b040:	f000 fabe 	bl	b5c0 <os_arch_restore_sr>
    return (0);
    b044:	2000      	movs	r0, #0
}
    b046:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    b048:	2300      	movs	r3, #0
    b04a:	6463      	str	r3, [r4, #68]	; 0x44
    b04c:	4b03      	ldr	r3, [pc, #12]	; (b05c <os_sched_insert+0x50>)
    b04e:	685a      	ldr	r2, [r3, #4]
    b050:	64a2      	str	r2, [r4, #72]	; 0x48
    b052:	6014      	str	r4, [r2, #0]
    b054:	3444      	adds	r4, #68	; 0x44
    b056:	605c      	str	r4, [r3, #4]
    b058:	e7f2      	b.n	b040 <os_sched_insert+0x34>
    b05a:	bf00      	nop
    b05c:	20000140 	.word	0x20000140

0000b060 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
    b060:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    b062:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    b064:	3301      	adds	r3, #1
    b066:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
    b068:	4b06      	ldr	r3, [pc, #24]	; (b084 <os_sched_ctx_sw_hook+0x24>)
    b06a:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
    b06c:	4b06      	ldr	r3, [pc, #24]	; (b088 <os_sched_ctx_sw_hook+0x28>)
    b06e:	681c      	ldr	r4, [r3, #0]
    b070:	4906      	ldr	r1, [pc, #24]	; (b08c <os_sched_ctx_sw_hook+0x2c>)
    b072:	680b      	ldr	r3, [r1, #0]
    b074:	1ac2      	subs	r2, r0, r3
    b076:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b078:	4413      	add	r3, r2
    b07a:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
    b07c:	6008      	str	r0, [r1, #0]
}
    b07e:	f85d 4b04 	ldr.w	r4, [sp], #4
    b082:	4770      	bx	lr
    b084:	20007078 	.word	0x20007078
    b088:	20007034 	.word	0x20007034
    b08c:	20007038 	.word	0x20007038

0000b090 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    b090:	4b01      	ldr	r3, [pc, #4]	; (b098 <os_sched_get_current_task+0x8>)
    b092:	6818      	ldr	r0, [r3, #0]
    b094:	4770      	bx	lr
    b096:	bf00      	nop
    b098:	20007034 	.word	0x20007034

0000b09c <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    b09c:	4b01      	ldr	r3, [pc, #4]	; (b0a4 <os_sched_set_current_task+0x8>)
    b09e:	6018      	str	r0, [r3, #0]
}
    b0a0:	4770      	bx	lr
    b0a2:	bf00      	nop
    b0a4:	20007034 	.word	0x20007034

0000b0a8 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
    b0a8:	b538      	push	{r3, r4, r5, lr}
    b0aa:	4604      	mov	r4, r0
    b0ac:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    b0ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
    b0b0:	b1d3      	cbz	r3, b0e8 <os_sched_sleep+0x40>
    b0b2:	6c82      	ldr	r2, [r0, #72]	; 0x48
    b0b4:	649a      	str	r2, [r3, #72]	; 0x48
    b0b6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    b0b8:	6c62      	ldr	r2, [r4, #68]	; 0x44
    b0ba:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
    b0bc:	2302      	movs	r3, #2
    b0be:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    b0c0:	f000 f9fa 	bl	b4b8 <os_time_get>
    b0c4:	4428      	add	r0, r5
    b0c6:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
    b0c8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    b0cc:	d010      	beq.n	b0f0 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    b0ce:	4b18      	ldr	r3, [pc, #96]	; (b130 <os_sched_sleep+0x88>)
    b0d0:	681b      	ldr	r3, [r3, #0]
    b0d2:	b1d3      	cbz	r3, b10a <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    b0d4:	7b5a      	ldrb	r2, [r3, #13]
    b0d6:	f012 0f01 	tst.w	r2, #1
    b0da:	d116      	bne.n	b10a <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    b0dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    b0de:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    b0e0:	2a00      	cmp	r2, #0
    b0e2:	dc12      	bgt.n	b10a <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    b0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b0e6:	e7f4      	b.n	b0d2 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    b0e8:	6c82      	ldr	r2, [r0, #72]	; 0x48
    b0ea:	4b12      	ldr	r3, [pc, #72]	; (b134 <os_sched_sleep+0x8c>)
    b0ec:	605a      	str	r2, [r3, #4]
    b0ee:	e7e2      	b.n	b0b6 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    b0f0:	7b63      	ldrb	r3, [r4, #13]
    b0f2:	f043 0301 	orr.w	r3, r3, #1
    b0f6:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    b0f8:	2300      	movs	r3, #0
    b0fa:	6463      	str	r3, [r4, #68]	; 0x44
    b0fc:	4b0c      	ldr	r3, [pc, #48]	; (b130 <os_sched_sleep+0x88>)
    b0fe:	685a      	ldr	r2, [r3, #4]
    b100:	64a2      	str	r2, [r4, #72]	; 0x48
    b102:	6014      	str	r4, [r2, #0]
    b104:	3444      	adds	r4, #68	; 0x44
    b106:	605c      	str	r4, [r3, #4]
    b108:	e007      	b.n	b11a <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
    b10a:	b143      	cbz	r3, b11e <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    b10c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b10e:	64a2      	str	r2, [r4, #72]	; 0x48
    b110:	6463      	str	r3, [r4, #68]	; 0x44
    b112:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b114:	6014      	str	r4, [r2, #0]
    b116:	3444      	adds	r4, #68	; 0x44
    b118:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
    b11a:	2000      	movs	r0, #0
    b11c:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    b11e:	2300      	movs	r3, #0
    b120:	6463      	str	r3, [r4, #68]	; 0x44
    b122:	4b03      	ldr	r3, [pc, #12]	; (b130 <os_sched_sleep+0x88>)
    b124:	685a      	ldr	r2, [r3, #4]
    b126:	64a2      	str	r2, [r4, #72]	; 0x48
    b128:	6014      	str	r4, [r2, #0]
    b12a:	3444      	adds	r4, #68	; 0x44
    b12c:	605c      	str	r4, [r3, #4]
    b12e:	e7f4      	b.n	b11a <os_sched_sleep+0x72>
    b130:	20000148 	.word	0x20000148
    b134:	20000140 	.word	0x20000140

0000b138 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
    b138:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
    b13a:	7b03      	ldrb	r3, [r0, #12]
    b13c:	2b02      	cmp	r3, #2
    b13e:	d108      	bne.n	b152 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
    b140:	69c3      	ldr	r3, [r0, #28]
    b142:	b31b      	cbz	r3, b18c <os_sched_wakeup+0x54>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    b144:	681a      	ldr	r2, [r3, #0]
    b146:	b172      	cbz	r2, b166 <os_sched_wakeup+0x2e>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    b148:	4282      	cmp	r2, r0
    b14a:	d117      	bne.n	b17c <os_sched_wakeup+0x44>
    b14c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    b14e:	601a      	str	r2, [r3, #0]
    b150:	e019      	b.n	b186 <os_sched_wakeup+0x4e>
    assert(t->t_state == OS_TASK_SLEEP);
    b152:	f7fd f835 	bl	81c0 <hal_debugger_connected>
    b156:	b100      	cbz	r0, b15a <os_sched_wakeup+0x22>
    b158:	be01      	bkpt	0x0001
    b15a:	2300      	movs	r3, #0
    b15c:	461a      	mov	r2, r3
    b15e:	4619      	mov	r1, r3
    b160:	4618      	mov	r0, r3
    b162:	f7fe fc35 	bl	99d0 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    b166:	f7fd f82b 	bl	81c0 <hal_debugger_connected>
    b16a:	b100      	cbz	r0, b16e <os_sched_wakeup+0x36>
    b16c:	be01      	bkpt	0x0001
    b16e:	2300      	movs	r3, #0
    b170:	461a      	mov	r2, r3
    b172:	4619      	mov	r1, r3
    b174:	4618      	mov	r0, r3
    b176:	f7fe fc2b 	bl	99d0 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    b17a:	461a      	mov	r2, r3
    b17c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    b17e:	4283      	cmp	r3, r0
    b180:	d1fb      	bne.n	b17a <os_sched_wakeup+0x42>
    b182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b184:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
    b186:	2300      	movs	r3, #0
    b188:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    b18a:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
    b18c:	2301      	movs	r3, #1
    b18e:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    b190:	2300      	movs	r3, #0
    b192:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    b194:	7b43      	ldrb	r3, [r0, #13]
    b196:	f023 0301 	bic.w	r3, r3, #1
    b19a:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    b19c:	6c43      	ldr	r3, [r0, #68]	; 0x44
    b19e:	b143      	cbz	r3, b1b2 <os_sched_wakeup+0x7a>
    b1a0:	6c82      	ldr	r2, [r0, #72]	; 0x48
    b1a2:	649a      	str	r2, [r3, #72]	; 0x48
    b1a4:	6c83      	ldr	r3, [r0, #72]	; 0x48
    b1a6:	6c42      	ldr	r2, [r0, #68]	; 0x44
    b1a8:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
    b1aa:	f7ff ff2f 	bl	b00c <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
    b1ae:	2000      	movs	r0, #0
    b1b0:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    b1b2:	6c82      	ldr	r2, [r0, #72]	; 0x48
    b1b4:	4b01      	ldr	r3, [pc, #4]	; (b1bc <os_sched_wakeup+0x84>)
    b1b6:	605a      	str	r2, [r3, #4]
    b1b8:	e7f4      	b.n	b1a4 <os_sched_wakeup+0x6c>
    b1ba:	bf00      	nop
    b1bc:	20000148 	.word	0x20000148

0000b1c0 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
    b1c0:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
    b1c2:	f000 f979 	bl	b4b8 <os_time_get>
    b1c6:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    b1c8:	f000 f9f4 	bl	b5b4 <os_arch_save_sr>
    b1cc:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
    b1ce:	4b0a      	ldr	r3, [pc, #40]	; (b1f8 <os_sched_os_timer_exp+0x38>)
    b1d0:	6818      	ldr	r0, [r3, #0]
    while (t) {
    b1d2:	b160      	cbz	r0, b1ee <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    b1d4:	7b43      	ldrb	r3, [r0, #13]
    b1d6:	f013 0f01 	tst.w	r3, #1
    b1da:	d108      	bne.n	b1ee <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
    b1dc:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    b1de:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b1e0:	1aeb      	subs	r3, r5, r3
    b1e2:	2b00      	cmp	r3, #0
    b1e4:	db03      	blt.n	b1ee <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
    b1e6:	f7ff ffa7 	bl	b138 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
    b1ea:	4620      	mov	r0, r4
    b1ec:	e7f1      	b.n	b1d2 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
    b1ee:	4630      	mov	r0, r6
    b1f0:	f000 f9e6 	bl	b5c0 <os_arch_restore_sr>
}
    b1f4:	bd70      	pop	{r4, r5, r6, pc}
    b1f6:	bf00      	nop
    b1f8:	20000148 	.word	0x20000148

0000b1fc <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
    b1fc:	b510      	push	{r4, lr}
    b1fe:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
    b200:	f000 f9e1 	bl	b5c6 <os_arch_in_critical>
    b204:	b150      	cbz	r0, b21c <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
    b206:	4b0e      	ldr	r3, [pc, #56]	; (b240 <os_sched_wakeup_ticks+0x44>)
    b208:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    b20a:	b19b      	cbz	r3, b234 <os_sched_wakeup_ticks+0x38>
    b20c:	7b5a      	ldrb	r2, [r3, #13]
    b20e:	f012 0f01 	tst.w	r2, #1
    b212:	d112      	bne.n	b23a <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    b214:	6b58      	ldr	r0, [r3, #52]	; 0x34
    b216:	1b00      	subs	r0, r0, r4
    b218:	d40a      	bmi.n	b230 <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
    b21a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    b21c:	f7fc ffd0 	bl	81c0 <hal_debugger_connected>
    b220:	b100      	cbz	r0, b224 <os_sched_wakeup_ticks+0x28>
    b222:	be01      	bkpt	0x0001
    b224:	2300      	movs	r3, #0
    b226:	461a      	mov	r2, r3
    b228:	4619      	mov	r1, r3
    b22a:	4618      	mov	r0, r3
    b22c:	f7fe fbd0 	bl	99d0 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
    b230:	2000      	movs	r0, #0
    b232:	e7f2      	b.n	b21a <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
    b234:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b238:	e7ef      	b.n	b21a <os_sched_wakeup_ticks+0x1e>
    b23a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    b23e:	e7ec      	b.n	b21a <os_sched_wakeup_ticks+0x1e>
    b240:	20000148 	.word	0x20000148

0000b244 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
    b244:	4b01      	ldr	r3, [pc, #4]	; (b24c <os_sched_next_task+0x8>)
    b246:	6818      	ldr	r0, [r3, #0]
    b248:	4770      	bx	lr
    b24a:	bf00      	nop
    b24c:	20000140 	.word	0x20000140

0000b250 <os_sched>:
{
    b250:	b538      	push	{r3, r4, r5, lr}
    b252:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    b254:	f000 f9ae 	bl	b5b4 <os_arch_save_sr>
    b258:	4605      	mov	r5, r0
    if (!next_t) {
    b25a:	b134      	cbz	r4, b26a <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
    b25c:	4620      	mov	r0, r4
    b25e:	f000 f99f 	bl	b5a0 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    b262:	4628      	mov	r0, r5
    b264:	f000 f9ac 	bl	b5c0 <os_arch_restore_sr>
}
    b268:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
    b26a:	f7ff ffeb 	bl	b244 <os_sched_next_task>
    b26e:	4604      	mov	r4, r0
    b270:	e7f4      	b.n	b25c <os_sched+0xc>
	...

0000b274 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    b274:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
    b276:	7b03      	ldrb	r3, [r0, #12]
    b278:	2b01      	cmp	r3, #1
    b27a:	d000      	beq.n	b27e <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
    b27c:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    b27e:	6c43      	ldr	r3, [r0, #68]	; 0x44
    b280:	b13b      	cbz	r3, b292 <os_sched_resort+0x1e>
    b282:	6c82      	ldr	r2, [r0, #72]	; 0x48
    b284:	649a      	str	r2, [r3, #72]	; 0x48
    b286:	6c83      	ldr	r3, [r0, #72]	; 0x48
    b288:	6c42      	ldr	r2, [r0, #68]	; 0x44
    b28a:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
    b28c:	f7ff febe 	bl	b00c <os_sched_insert>
}
    b290:	e7f4      	b.n	b27c <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    b292:	6c82      	ldr	r2, [r0, #72]	; 0x48
    b294:	4b01      	ldr	r3, [pc, #4]	; (b29c <os_sched_resort+0x28>)
    b296:	605a      	str	r2, [r3, #4]
    b298:	e7f5      	b.n	b286 <os_sched_resort+0x12>
    b29a:	bf00      	nop
    b29c:	20000140 	.word	0x20000140

0000b2a0 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
    b2a0:	2300      	movs	r3, #0
    b2a2:	e003      	b.n	b2ac <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
    b2a4:	4a03      	ldr	r2, [pc, #12]	; (b2b4 <_clear_stack+0x14>)
    b2a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
    b2aa:	3301      	adds	r3, #1
    b2ac:	428b      	cmp	r3, r1
    b2ae:	dbf9      	blt.n	b2a4 <_clear_stack+0x4>
    }
}
    b2b0:	4770      	bx	lr
    b2b2:	bf00      	nop
    b2b4:	deadbeef 	.word	0xdeadbeef

0000b2b8 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
    b2b8:	6843      	ldr	r3, [r0, #4]
    b2ba:	8900      	ldrh	r0, [r0, #8]
}
    b2bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b2c0:	4770      	bx	lr
	...

0000b2c4 <os_task_init>:
{
    b2c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b2c8:	4604      	mov	r4, r0
    b2ca:	460e      	mov	r6, r1
    b2cc:	4690      	mov	r8, r2
    b2ce:	461d      	mov	r5, r3
    b2d0:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
    b2d4:	2250      	movs	r2, #80	; 0x50
    b2d6:	2100      	movs	r1, #0
    b2d8:	f000 fb03 	bl	b8e2 <memset>
    t->t_func = func;
    b2dc:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
    b2e0:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
    b2e2:	f000 f967 	bl	b5b4 <os_arch_save_sr>
    rc = g_task_id;
    b2e6:	4b2e      	ldr	r3, [pc, #184]	; (b3a0 <os_task_init+0xdc>)
    b2e8:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
    b2ea:	1c6a      	adds	r2, r5, #1
    b2ec:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    b2ee:	f000 f967 	bl	b5c0 <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
    b2f2:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
    b2f4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b2f8:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
    b2fa:	2301      	movs	r3, #1
    b2fc:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    b2fe:	6126      	str	r6, [r4, #16]
    t->t_next_wakeup = 0;
    b300:	2300      	movs	r3, #0
    b302:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
    b304:	f104 0620 	add.w	r6, r4, #32
    b308:	4630      	mov	r0, r6
    b30a:	f7ff fe1b 	bl	af44 <os_sanity_check_init>
    if (rc != OS_OK) {
    b30e:	4605      	mov	r5, r0
    b310:	2800      	cmp	r0, #0
    b312:	d138      	bne.n	b386 <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
    b314:	9b07      	ldr	r3, [sp, #28]
    b316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b31a:	d005      	beq.n	b328 <os_task_init+0x64>
        sc->sc_checkin_itvl = sanity_itvl;
    b31c:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
    b31e:	4630      	mov	r0, r6
    b320:	f7ff fe18 	bl	af54 <os_sanity_check_register>
        if (rc != OS_OK) {
    b324:	4605      	mov	r5, r0
    b326:	bb70      	cbnz	r0, b386 <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
    b328:	4639      	mov	r1, r7
    b32a:	9808      	ldr	r0, [sp, #32]
    b32c:	f7ff ffb8 	bl	b2a0 <_clear_stack>
    t->t_stackbottom = stack_bottom;
    b330:	9b08      	ldr	r3, [sp, #32]
    b332:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
    b334:	8127      	strh	r7, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
    b336:	4620      	mov	r0, r4
    b338:	f7ff ffbe 	bl	b2b8 <os_task_stacktop_get>
    b33c:	463a      	mov	r2, r7
    b33e:	4601      	mov	r1, r0
    b340:	4620      	mov	r0, r4
    b342:	f000 f945 	bl	b5d0 <os_arch_task_stack_init>
    b346:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    b348:	4b16      	ldr	r3, [pc, #88]	; (b3a4 <os_task_init+0xe0>)
    b34a:	681b      	ldr	r3, [r3, #0]
    b34c:	b17b      	cbz	r3, b36e <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
    b34e:	7ae1      	ldrb	r1, [r4, #11]
    b350:	7ada      	ldrb	r2, [r3, #11]
    b352:	4291      	cmp	r1, r2
    b354:	d001      	beq.n	b35a <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    b356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b358:	e7f8      	b.n	b34c <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
    b35a:	f7fc ff31 	bl	81c0 <hal_debugger_connected>
    b35e:	b100      	cbz	r0, b362 <os_task_init+0x9e>
    b360:	be01      	bkpt	0x0001
    b362:	2300      	movs	r3, #0
    b364:	461a      	mov	r2, r3
    b366:	4619      	mov	r1, r3
    b368:	4618      	mov	r0, r3
    b36a:	f7fe fb31 	bl	99d0 <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    b36e:	6423      	str	r3, [r4, #64]	; 0x40
    b370:	4b0c      	ldr	r3, [pc, #48]	; (b3a4 <os_task_init+0xe0>)
    b372:	685a      	ldr	r2, [r3, #4]
    b374:	6014      	str	r4, [r2, #0]
    b376:	f104 0240 	add.w	r2, r4, #64	; 0x40
    b37a:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
    b37c:	4620      	mov	r0, r4
    b37e:	f7ff fe45 	bl	b00c <os_sched_insert>
    b382:	4605      	mov	r5, r0
    if (rc != OS_OK) {
    b384:	b110      	cbz	r0, b38c <os_task_init+0xc8>
}
    b386:	4628      	mov	r0, r5
    b388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
    b38c:	f7fe fbe0 	bl	9b50 <os_started>
    b390:	b908      	cbnz	r0, b396 <os_task_init+0xd2>
    return (0);
    b392:	4605      	mov	r5, r0
    b394:	e7f7      	b.n	b386 <os_task_init+0xc2>
        os_sched(NULL);
    b396:	2000      	movs	r0, #0
    b398:	f7ff ff5a 	bl	b250 <os_sched>
    b39c:	e7f3      	b.n	b386 <os_task_init+0xc2>
    b39e:	bf00      	nop
    b3a0:	20007044 	.word	0x20007044
    b3a4:	2000703c 	.word	0x2000703c

0000b3a8 <os_task_info_get>:
    return rc;
}

void
os_task_info_get(const struct os_task *task, struct os_task_info *oti)
{
    b3a8:	b538      	push	{r3, r4, r5, lr}
    b3aa:	4604      	mov	r4, r0
    os_stack_t *bottom;
    os_stack_t *top;

    oti->oti_prio = task->t_prio;
    b3ac:	7ac3      	ldrb	r3, [r0, #11]
    b3ae:	700b      	strb	r3, [r1, #0]
    oti->oti_taskid = task->t_taskid;
    b3b0:	7a83      	ldrb	r3, [r0, #10]
    b3b2:	704b      	strb	r3, [r1, #1]
    oti->oti_state = task->t_state;
    b3b4:	7b03      	ldrb	r3, [r0, #12]
    b3b6:	708b      	strb	r3, [r1, #2]

    bottom = task->t_stackbottom;
    b3b8:	6843      	ldr	r3, [r0, #4]
    top = bottom + task->t_stacksize;
    b3ba:	8902      	ldrh	r2, [r0, #8]
    b3bc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    while (bottom < top) {
    b3c0:	4293      	cmp	r3, r2
    b3c2:	d205      	bcs.n	b3d0 <os_task_info_get+0x28>
        if (*bottom != OS_STACK_PATTERN) {
    b3c4:	681d      	ldr	r5, [r3, #0]
    b3c6:	480f      	ldr	r0, [pc, #60]	; (b404 <os_task_info_get+0x5c>)
    b3c8:	4285      	cmp	r5, r0
    b3ca:	d101      	bne.n	b3d0 <os_task_info_get+0x28>
            break;
        }
        ++bottom;
    b3cc:	3304      	adds	r3, #4
    b3ce:	e7f7      	b.n	b3c0 <os_task_info_get+0x18>
    }

    oti->oti_stkusage = (uint16_t) (top - bottom);
    b3d0:	1ad3      	subs	r3, r2, r3
    b3d2:	f3c3 038f 	ubfx	r3, r3, #2, #16
    b3d6:	808b      	strh	r3, [r1, #4]
    oti->oti_stksize = task->t_stacksize;
    b3d8:	8923      	ldrh	r3, [r4, #8]
    b3da:	80cb      	strh	r3, [r1, #6]
    oti->oti_cswcnt = task->t_ctx_sw_cnt;
    b3dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b3de:	608b      	str	r3, [r1, #8]
    oti->oti_runtime = task->t_run_time;
    b3e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b3e2:	60cb      	str	r3, [r1, #12]
    oti->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
    b3e4:	6a23      	ldr	r3, [r4, #32]
    b3e6:	610b      	str	r3, [r1, #16]
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
    b3e8:	6a23      	ldr	r3, [r4, #32]
                            task->t_sanity_check.sc_checkin_itvl;
    b3ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
    b3ec:	4413      	add	r3, r2
    b3ee:	614b      	str	r3, [r1, #20]
    oti->oti_name[0] = '\0';
    b3f0:	4608      	mov	r0, r1
    b3f2:	2300      	movs	r3, #0
    b3f4:	f800 3f18 	strb.w	r3, [r0, #24]!
    strncat(oti->oti_name, task->t_name, sizeof(oti->oti_name) - 1);
    b3f8:	221f      	movs	r2, #31
    b3fa:	6921      	ldr	r1, [r4, #16]
    b3fc:	f000 faae 	bl	b95c <strncat>
}
    b400:	bd38      	pop	{r3, r4, r5, pc}
    b402:	bf00      	nop
    b404:	deadbeef 	.word	0xdeadbeef

0000b408 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    b408:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    b40c:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    b40e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
    b412:	e9d1 4500 	ldrd	r4, r5, [r1]
    b416:	eb14 0b03 	adds.w	fp, r4, r3
    b41a:	f145 0c00 	adc.w	ip, r5, #0
    b41e:	e9c2 bc00 	strd	fp, ip, [r2]
    b422:	688b      	ldr	r3, [r1, #8]
    b424:	f641 6184 	movw	r1, #7812	; 0x1e84
    b428:	fb01 3000 	mla	r0, r1, r0, r3
    b42c:	6090      	str	r0, [r2, #8]
    b42e:	4b08      	ldr	r3, [pc, #32]	; (b450 <os_deltatime+0x48>)
    b430:	4298      	cmp	r0, r3
    b432:	dd0a      	ble.n	b44a <os_deltatime+0x42>
    b434:	f11b 0401 	adds.w	r4, fp, #1
    b438:	f14c 0500 	adc.w	r5, ip, #0
    b43c:	e9c2 4500 	strd	r4, r5, [r2]
    b440:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
    b444:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
    b448:	6090      	str	r0, [r2, #8]
}
    b44a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
    b44e:	4770      	bx	lr
    b450:	000f423f 	.word	0x000f423f

0000b454 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
    b454:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
    b456:	1e04      	subs	r4, r0, #0
    b458:	db0d      	blt.n	b476 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
    b45a:	f000 f8ab 	bl	b5b4 <os_arch_save_sr>
    b45e:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
    b460:	4a13      	ldr	r2, [pc, #76]	; (b4b0 <os_time_tick+0x5c>)
    b462:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
    b464:	18e0      	adds	r0, r4, r3
    b466:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
    b468:	ea90 0f03 	teq	r0, r3
    b46c:	d40d      	bmi.n	b48a <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
    b46e:	4628      	mov	r0, r5
    b470:	f000 f8a6 	bl	b5c0 <os_arch_restore_sr>
}
    b474:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
    b476:	f7fc fea3 	bl	81c0 <hal_debugger_connected>
    b47a:	b100      	cbz	r0, b47e <os_time_tick+0x2a>
    b47c:	be01      	bkpt	0x0001
    b47e:	2300      	movs	r3, #0
    b480:	461a      	mov	r2, r3
    b482:	4619      	mov	r1, r3
    b484:	4618      	mov	r0, r3
    b486:	f7fe faa3 	bl	99d0 <__assert_func>
        delta = g_os_time - basetod.ostime;
    b48a:	4e0a      	ldr	r6, [pc, #40]	; (b4b4 <os_time_tick+0x60>)
    b48c:	4631      	mov	r1, r6
    b48e:	f851 4b08 	ldr.w	r4, [r1], #8
    b492:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    b494:	460a      	mov	r2, r1
    b496:	4620      	mov	r0, r4
    b498:	f7ff ffb6 	bl	b408 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    b49c:	f106 0118 	add.w	r1, r6, #24
    b4a0:	460a      	mov	r2, r1
    b4a2:	4620      	mov	r0, r4
    b4a4:	f7ff ffb0 	bl	b408 <os_deltatime>
        basetod.ostime = g_os_time;
    b4a8:	4b01      	ldr	r3, [pc, #4]	; (b4b0 <os_time_tick+0x5c>)
    b4aa:	681b      	ldr	r3, [r3, #0]
    b4ac:	6033      	str	r3, [r6, #0]
    b4ae:	e7de      	b.n	b46e <os_time_tick+0x1a>
    b4b0:	20007078 	.word	0x20007078
    b4b4:	20007048 	.word	0x20007048

0000b4b8 <os_time_get>:
}
    b4b8:	4b01      	ldr	r3, [pc, #4]	; (b4c0 <os_time_get+0x8>)
    b4ba:	6818      	ldr	r0, [r3, #0]
    b4bc:	4770      	bx	lr
    b4be:	bf00      	nop
    b4c0:	20007078 	.word	0x20007078

0000b4c4 <os_time_advance>:

void
os_time_advance(int ticks)
{
    b4c4:	b510      	push	{r4, lr}
    assert(ticks >= 0);
    b4c6:	1e04      	subs	r4, r0, #0
    b4c8:	db09      	blt.n	b4de <os_time_advance+0x1a>

    if (ticks > 0) {
    b4ca:	2c00      	cmp	r4, #0
    b4cc:	dd06      	ble.n	b4dc <os_time_advance+0x18>
        if (!os_started()) {
    b4ce:	f7fe fb3f 	bl	9b50 <os_started>
    b4d2:	b970      	cbnz	r0, b4f2 <os_time_advance+0x2e>
            g_os_time += ticks;
    b4d4:	4a0c      	ldr	r2, [pc, #48]	; (b508 <os_time_advance+0x44>)
    b4d6:	6813      	ldr	r3, [r2, #0]
    b4d8:	441c      	add	r4, r3
    b4da:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
    b4dc:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
    b4de:	f7fc fe6f 	bl	81c0 <hal_debugger_connected>
    b4e2:	b100      	cbz	r0, b4e6 <os_time_advance+0x22>
    b4e4:	be01      	bkpt	0x0001
    b4e6:	2300      	movs	r3, #0
    b4e8:	461a      	mov	r2, r3
    b4ea:	4619      	mov	r1, r3
    b4ec:	4618      	mov	r0, r3
    b4ee:	f7fe fa6f 	bl	99d0 <__assert_func>
            os_time_tick(ticks);
    b4f2:	4620      	mov	r0, r4
    b4f4:	f7ff ffae 	bl	b454 <os_time_tick>
            os_callout_tick();
    b4f8:	f7fe fc7e 	bl	9df8 <os_callout_tick>
            os_sched_os_timer_exp();
    b4fc:	f7ff fe60 	bl	b1c0 <os_sched_os_timer_exp>
            os_sched(NULL);
    b500:	2000      	movs	r0, #0
    b502:	f7ff fea5 	bl	b250 <os_sched>
}
    b506:	e7e9      	b.n	b4dc <os_time_advance+0x18>
    b508:	20007078 	.word	0x20007078

0000b50c <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
    b50c:	b900      	cbnz	r0, b510 <os_time_delay+0x4>
    b50e:	4770      	bx	lr
{
    b510:	b538      	push	{r3, r4, r5, lr}
    b512:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    b514:	f000 f84e 	bl	b5b4 <os_arch_save_sr>
    b518:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    b51a:	f7ff fdb9 	bl	b090 <os_sched_get_current_task>
    b51e:	4621      	mov	r1, r4
    b520:	f7ff fdc2 	bl	b0a8 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    b524:	4628      	mov	r0, r5
    b526:	f000 f84b 	bl	b5c0 <os_arch_restore_sr>
        os_sched(NULL);
    b52a:	2000      	movs	r0, #0
    b52c:	f7ff fe90 	bl	b250 <os_sched>
    }
}
    b530:	bd38      	pop	{r3, r4, r5, pc}
	...

0000b534 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
    b534:	b570      	push	{r4, r5, r6, lr}
    b536:	4605      	mov	r5, r0
    b538:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
    b53a:	f000 f83b 	bl	b5b4 <os_arch_save_sr>
    b53e:	4606      	mov	r6, r0
    if (tv != NULL) {
    b540:	b145      	cbz	r5, b554 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
    b542:	f7ff ffb9 	bl	b4b8 <os_time_get>
    b546:	4908      	ldr	r1, [pc, #32]	; (b568 <os_gettimeofday+0x34>)
    b548:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
    b54c:	462a      	mov	r2, r5
    b54e:	1ac0      	subs	r0, r0, r3
    b550:	f7ff ff5a 	bl	b408 <os_deltatime>
    }

    if (tz != NULL) {
    b554:	b114      	cbz	r4, b55c <os_gettimeofday+0x28>
        *tz = basetod.timezone;
    b556:	4b04      	ldr	r3, [pc, #16]	; (b568 <os_gettimeofday+0x34>)
    b558:	6a98      	ldr	r0, [r3, #40]	; 0x28
    b55a:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
    b55c:	4630      	mov	r0, r6
    b55e:	f000 f82f 	bl	b5c0 <os_arch_restore_sr>

    return (0);
}
    b562:	2000      	movs	r0, #0
    b564:	bd70      	pop	{r4, r5, r6, pc}
    b566:	bf00      	nop
    b568:	20007048 	.word	0x20007048

0000b56c <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    b56c:	b538      	push	{r3, r4, r5, lr}
    b56e:	4604      	mov	r4, r0
    b570:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
    b572:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b576:	2300      	movs	r3, #0
    b578:	01c0      	lsls	r0, r0, #7
    b57a:	0e61      	lsrs	r1, r4, #25
    b57c:	f000 fd8c 	bl	c098 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
    b580:	2901      	cmp	r1, #1
    b582:	bf08      	it	eq
    b584:	2800      	cmpeq	r0, #0
    b586:	d202      	bcs.n	b58e <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    b588:	6028      	str	r0, [r5, #0]
    return 0;
    b58a:	2000      	movs	r0, #0
}
    b58c:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
    b58e:	2002      	movs	r0, #2
    b590:	e7fc      	b.n	b58c <os_time_ms_to_ticks+0x20>

0000b592 <os_arch_task_return_handler>:
    return ret;
}

static void
os_arch_task_return_handler(void)
{
    b592:	e7fe      	b.n	b592 <os_arch_task_return_handler>

0000b594 <timer_handler>:
{
    b594:	b508      	push	{r3, lr}
    os_time_advance(1);
    b596:	2001      	movs	r0, #1
    b598:	f7ff ff94 	bl	b4c4 <os_time_advance>
}
    b59c:	bd08      	pop	{r3, pc}
	...

0000b5a0 <os_arch_ctx_sw>:
{
    b5a0:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    b5a2:	f7ff fd5d 	bl	b060 <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    b5a6:	4b02      	ldr	r3, [pc, #8]	; (b5b0 <os_arch_ctx_sw+0x10>)
    b5a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b5ac:	605a      	str	r2, [r3, #4]
}
    b5ae:	bd08      	pop	{r3, pc}
    b5b0:	e000ed00 	.word	0xe000ed00

0000b5b4 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b5b4:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
    b5b8:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
    b5bc:	b672      	cpsid	i
}
    b5be:	4770      	bx	lr

0000b5c0 <os_arch_restore_sr>:
    if (!isr_ctx) {
    b5c0:	b900      	cbnz	r0, b5c4 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    b5c2:	b662      	cpsie	i
}
    b5c4:	4770      	bx	lr

0000b5c6 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b5c6:	f3ef 8010 	mrs	r0, PRIMASK
}
    b5ca:	f000 0001 	and.w	r0, r0, #1
    b5ce:	4770      	bx	lr

0000b5d0 <os_arch_task_stack_init>:
    while (1);
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    b5d0:	b570      	push	{r4, r5, r6, lr}
    b5d2:	4606      	mov	r6, r0
    b5d4:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    b5d6:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
    b5da:	2309      	movs	r3, #9
    b5dc:	e003      	b.n	b5e6 <os_arch_task_stack_init+0x16>
        s[i] = 0;
    b5de:	2200      	movs	r2, #0
    b5e0:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
    b5e4:	3301      	adds	r3, #1
    b5e6:	2b0c      	cmp	r3, #12
    b5e8:	ddf9      	ble.n	b5de <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    b5ea:	4620      	mov	r0, r4
    b5ec:	f000 f8bc 	bl	b768 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    b5f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    b5f4:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
    b5f8:	6973      	ldr	r3, [r6, #20]
    b5fa:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    b5fe:	69b3      	ldr	r3, [r6, #24]
    b600:	f845 3c20 	str.w	r3, [r5, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
    b604:	4b04      	ldr	r3, [pc, #16]	; (b618 <os_arch_task_stack_init+0x48>)
    b606:	f845 3c0c 	str.w	r3, [r5, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
    b60a:	f06f 0302 	mvn.w	r3, #2
    b60e:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
    b612:	4620      	mov	r0, r4
    b614:	bd70      	pop	{r4, r5, r6, pc}
    b616:	bf00      	nop
    b618:	0000b593 	.word	0x0000b593

0000b61c <os_arch_init>:

void
os_arch_init(void)
{
    b61c:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    b61e:	4a04      	ldr	r2, [pc, #16]	; (b630 <os_arch_init+0x14>)
    b620:	6953      	ldr	r3, [r2, #20]
    b622:	f043 0310 	orr.w	r3, r3, #16
    b626:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    b628:	f7fe fa98 	bl	9b5c <os_init_idle_task>
}
    b62c:	bd08      	pop	{r3, pc}
    b62e:	bf00      	nop
    b630:	e000ed00 	.word	0xe000ed00

0000b634 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    b634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b636:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    b63a:	b90c      	cbnz	r4, b640 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    b63c:	2400      	movs	r4, #0
    b63e:	e009      	b.n	b654 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
    b640:	2007      	movs	r0, #7
    b642:	e02e      	b.n	b6a2 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
    b644:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
    b648:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
    b64c:	26ff      	movs	r6, #255	; 0xff
    b64e:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    b652:	3401      	adds	r4, #1
    b654:	2cef      	cmp	r4, #239	; 0xef
    b656:	d9f5      	bls.n	b644 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    b658:	f06f 040d 	mvn.w	r4, #13
    b65c:	e007      	b.n	b66e <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
    b65e:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
    b660:	4e12      	ldr	r6, [pc, #72]	; (b6ac <os_arch_os_init+0x78>)
    b662:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    b664:	3510      	adds	r5, #16
    b666:	4f12      	ldr	r7, [pc, #72]	; (b6b0 <os_arch_os_init+0x7c>)
    b668:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
    b66c:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    b66e:	2c25      	cmp	r4, #37	; 0x25
    b670:	ddf5      	ble.n	b65e <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    b672:	4c0e      	ldr	r4, [pc, #56]	; (b6ac <os_arch_os_init+0x78>)
    b674:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    b676:	4e0f      	ldr	r6, [pc, #60]	; (b6b4 <os_arch_os_init+0x80>)
    b678:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    b67a:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    b67c:	4e0e      	ldr	r6, [pc, #56]	; (b6b8 <os_arch_os_init+0x84>)
    b67e:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    b680:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    b682:	4e0e      	ldr	r6, [pc, #56]	; (b6bc <os_arch_os_init+0x88>)
    b684:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b686:	25e0      	movs	r5, #224	; 0xe0
    b688:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    b68c:	2520      	movs	r5, #32
    b68e:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    b690:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    b694:	f014 0f01 	tst.w	r4, #1
    b698:	d004      	beq.n	b6a4 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
    b69a:	f8df c024 	ldr.w	ip, [pc, #36]	; b6c0 <os_arch_os_init+0x8c>
    b69e:	df00      	svc	0
        err = OS_OK;
    b6a0:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    b6a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
    b6a4:	f7ff ffba 	bl	b61c <os_arch_init>
        err = OS_OK;
    b6a8:	2000      	movs	r0, #0
    b6aa:	e7fa      	b.n	b6a2 <os_arch_os_init+0x6e>
    b6ac:	e000ed00 	.word	0xe000ed00
    b6b0:	0000b807 	.word	0x0000b807
    b6b4:	0000b76f 	.word	0x0000b76f
    b6b8:	0000b7b5 	.word	0x0000b7b5
    b6bc:	0000b7fb 	.word	0x0000b7fb
    b6c0:	0000b61d 	.word	0x0000b61d

0000b6c4 <os_arch_start>:

uint32_t
os_arch_start(void)
{
    b6c4:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    b6c6:	f7ff fdbd 	bl	b244 <os_sched_next_task>
    b6ca:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    b6cc:	f7ff fce6 	bl	b09c <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    b6d0:	6823      	ldr	r3, [r4, #0]
    b6d2:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    b6d4:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    b6d8:	2106      	movs	r1, #6
    b6da:	2080      	movs	r0, #128	; 0x80
    b6dc:	f00f f948 	bl	1a970 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    b6e0:	4b03      	ldr	r3, [pc, #12]	; (b6f0 <os_arch_start+0x2c>)
    b6e2:	2201      	movs	r2, #1
    b6e4:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
    b6e6:	4620      	mov	r0, r4
    b6e8:	f7ff ff5a 	bl	b5a0 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    b6ec:	69a0      	ldr	r0, [r4, #24]
    b6ee:	bd10      	pop	{r4, pc}
    b6f0:	200026d0 	.word	0x200026d0

0000b6f4 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
    b6f4:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    b6f6:	4814      	ldr	r0, [pc, #80]	; (b748 <os_arch_os_start+0x54>)
    b6f8:	6800      	ldr	r0, [r0, #0]
    b6fa:	3804      	subs	r0, #4
    b6fc:	f000 f82a 	bl	b754 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b700:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    b704:	b9d4      	cbnz	r4, b73c <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    b706:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    b70a:	f004 0403 	and.w	r4, r4, #3
    b70e:	2c03      	cmp	r4, #3
    b710:	d808      	bhi.n	b724 <os_arch_os_start+0x30>
    b712:	e8df f004 	tbb	[pc, r4]
    b716:	1515      	.short	0x1515
    b718:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    b71a:	4c0c      	ldr	r4, [pc, #48]	; (b74c <os_arch_os_start+0x58>)
    b71c:	6824      	ldr	r4, [r4, #0]
    b71e:	f014 0f01 	tst.w	r4, #1
    b722:	d10f      	bne.n	b744 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
    b724:	f8df c028 	ldr.w	ip, [pc, #40]	; b750 <os_arch_os_start+0x5c>
    b728:	df00      	svc	0
    b72a:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
    b72c:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    b72e:	4c07      	ldr	r4, [pc, #28]	; (b74c <os_arch_os_start+0x58>)
    b730:	6824      	ldr	r4, [r4, #0]
    b732:	f014 0f01 	tst.w	r4, #1
    b736:	d1f5      	bne.n	b724 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
    b738:	2008      	movs	r0, #8
    b73a:	e7f7      	b.n	b72c <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
    b73c:	2007      	movs	r0, #7
    b73e:	e7f5      	b.n	b72c <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
    b740:	2008      	movs	r0, #8
    b742:	e7f3      	b.n	b72c <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
    b744:	2008      	movs	r0, #8
    b746:	e7f1      	b.n	b72c <os_arch_os_start+0x38>
    b748:	20000524 	.word	0x20000524
    b74c:	2000707c 	.word	0x2000707c
    b750:	0000b6c5 	.word	0x0000b6c5

0000b754 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    b754:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    b758:	4832      	ldr	r0, [pc, #200]	; (b824 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    b75a:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    b75c:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    b75e:	f380 8814 	msr	CONTROL, r0
        ISB
    b762:	f3bf 8f6f 	isb	sy
        BX      LR
    b766:	4770      	bx	lr

0000b768 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    b768:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    b76c:	4770      	bx	lr

0000b76e <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    b76e:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    b772:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    b774:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    b778:	b951      	cbnz	r1, b790 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    b77a:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    b77e:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    b780:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    b782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    b786:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    b78a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    b78e:	4770      	bx	lr

0000b790 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    b790:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    b792:	4a25      	ldr	r2, [pc, #148]	; (b828 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    b794:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    b796:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    b798:	d809      	bhi.n	b7ae <SVC_Done>

        LDR     R4,=SVC_Table-4
    b79a:	4c24      	ldr	r4, [pc, #144]	; (b82c <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    b79c:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    b7a0:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    b7a4:	47a0      	blx	r4

        MRS     R12,PSP
    b7a6:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    b7aa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000b7ae <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    b7ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    b7b2:	4770      	bx	lr

0000b7b4 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    b7b4:	4b1e      	ldr	r3, [pc, #120]	; (b830 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    b7b6:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    b7b8:	4b1e      	ldr	r3, [pc, #120]	; (b834 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    b7ba:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    b7bc:	4291      	cmp	r1, r2
        IT      EQ
    b7be:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    b7c0:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    b7c2:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
    b7c6:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
    b7ca:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
    b7cc:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
    b7d0:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    b7d4:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    b7d8:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    b7da:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
    b7de:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
    b7e2:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
    b7e6:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
    b7e8:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
    b7ec:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
    b7f0:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
    b7f4:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    b7f8:	4770      	bx	lr

0000b7fa <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    b7fa:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    b7fc:	f7ff feca 	bl	b594 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    b800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    b804:	4770      	bx	lr

0000b806 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    b806:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    b80a:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    b80c:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    b810:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    b814:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    b818:	4668      	mov	r0, sp
        BL      os_default_irq
    b81a:	f7fe f8fb 	bl	9a14 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    b81e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    b822:	4770      	bx	lr
        LDR     R0,=os_flags
    b824:	2000707c 	.word	0x2000707c
        LDR     R2,=SVC_Count
    b828:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    b82c:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    b830:	20000140 	.word	0x20000140
        LDR     R3,=g_current_task      /* Get current task */
    b834:	20007034 	.word	0x20007034

0000b838 <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
    b838:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
    b83a:	4802      	ldr	r0, [pc, #8]	; (b844 <lrand48+0xc>)
    b83c:	f000 fbca 	bl	bfd4 <jrand48>
}
    b840:	0840      	lsrs	r0, r0, #1
    b842:	bd08      	pop	{r3, pc}
    b844:	20007080 	.word	0x20007080

0000b848 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    b848:	b470      	push	{r4, r5, r6}
    b84a:	f04f 0500 	mov.w	r5, #0
    b84e:	f022 0603 	bic.w	r6, r2, #3
    b852:	e005      	b.n	b860 <test1>

0000b854 <loop1>:
    b854:	5943      	ldr	r3, [r0, r5]
    b856:	594c      	ldr	r4, [r1, r5]
    b858:	42a3      	cmp	r3, r4
    b85a:	d104      	bne.n	b866 <res1>
    b85c:	f105 0504 	add.w	r5, r5, #4

0000b860 <test1>:
    b860:	42b5      	cmp	r5, r6
    b862:	d1f7      	bne.n	b854 <loop1>
    b864:	e00d      	b.n	b882 <test2>

0000b866 <res1>:
    b866:	ba1b      	rev	r3, r3
    b868:	ba24      	rev	r4, r4
    b86a:	1b1b      	subs	r3, r3, r4
    b86c:	bf8c      	ite	hi
    b86e:	2301      	movhi	r3, #1
    b870:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    b874:	e009      	b.n	b88a <done>

0000b876 <loop2>:
    b876:	5d43      	ldrb	r3, [r0, r5]
    b878:	5d4c      	ldrb	r4, [r1, r5]
    b87a:	1b1b      	subs	r3, r3, r4
    b87c:	d105      	bne.n	b88a <done>
    b87e:	f105 0501 	add.w	r5, r5, #1

0000b882 <test2>:
    b882:	4295      	cmp	r5, r2
    b884:	d1f7      	bne.n	b876 <loop2>
    b886:	f04f 0300 	mov.w	r3, #0

0000b88a <done>:
    b88a:	4618      	mov	r0, r3
    b88c:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    b88e:	4770      	bx	lr

0000b890 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    b890:	e001      	b.n	b896 <test1>

0000b892 <loop1>:
    b892:	588b      	ldr	r3, [r1, r2]
    b894:	5083      	str	r3, [r0, r2]

0000b896 <test1>:
    b896:	3a04      	subs	r2, #4
    b898:	d5fb      	bpl.n	b892 <loop1>
    b89a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    b89e:	e001      	b.n	b8a4 <test2>

0000b8a0 <loop2>:
    b8a0:	5c8b      	ldrb	r3, [r1, r2]
    b8a2:	5483      	strb	r3, [r0, r2]

0000b8a4 <test2>:
    b8a4:	3a01      	subs	r2, #1
    b8a6:	d5fb      	bpl.n	b8a0 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    b8a8:	4770      	bx	lr

0000b8aa <memmove>:
 */

#include <string.h>

void *memmove(void *dst, const void *src, size_t n)
{
    b8aa:	b410      	push	{r4}
		q += (n - 1);
		asm volatile("std; rep; movsb; cld"
			     : "+c" (n), "+S"(p), "+D"(q));
	}
#else
	if (q < p) {
    b8ac:	4281      	cmp	r1, r0
    b8ae:	d80d      	bhi.n	b8cc <memmove+0x22>
		while (n--) {
			*q++ = *p++;
		}
	} else {
		p += n;
    b8b0:	4411      	add	r1, r2
		q += n;
    b8b2:	1883      	adds	r3, r0, r2
		while (n--) {
    b8b4:	e011      	b.n	b8da <memmove+0x30>
			*q++ = *p++;
    b8b6:	780a      	ldrb	r2, [r1, #0]
    b8b8:	701a      	strb	r2, [r3, #0]
    b8ba:	3301      	adds	r3, #1
    b8bc:	3101      	adds	r1, #1
		while (n--) {
    b8be:	4622      	mov	r2, r4
    b8c0:	1e54      	subs	r4, r2, #1
    b8c2:	2a00      	cmp	r2, #0
    b8c4:	d1f7      	bne.n	b8b6 <memmove+0xc>
		}
	}
#endif

	return dst;
}
    b8c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    b8ca:	4770      	bx	lr
	char *q = dst;
    b8cc:	4603      	mov	r3, r0
    b8ce:	e7f7      	b.n	b8c0 <memmove+0x16>
			*--q = *--p;
    b8d0:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    b8d4:	f803 2d01 	strb.w	r2, [r3, #-1]!
		while (n--) {
    b8d8:	4622      	mov	r2, r4
    b8da:	1e54      	subs	r4, r2, #1
    b8dc:	2a00      	cmp	r2, #0
    b8de:	d1f7      	bne.n	b8d0 <memmove+0x26>
    b8e0:	e7f1      	b.n	b8c6 <memmove+0x1c>

0000b8e2 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    b8e2:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    b8e4:	4605      	mov	r5, r0
    b8e6:	b2c9      	uxtb	r1, r1
    b8e8:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b8ec:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    b8f0:	18ab      	adds	r3, r5, r2
    b8f2:	2403      	movs	r4, #3
    b8f4:	4023      	ands	r3, r4
    b8f6:	1ad3      	subs	r3, r2, r3
    b8f8:	d40b      	bmi.n	b912 <memset+0x30>
    b8fa:	e001      	b.n	b900 <memset+0x1e>
    b8fc:	3a01      	subs	r2, #1
    b8fe:	54a9      	strb	r1, [r5, r2]
    b900:	429a      	cmp	r2, r3
    b902:	d1fb      	bne.n	b8fc <memset+0x1a>
    b904:	e000      	b.n	b908 <memset+0x26>
    b906:	50a9      	str	r1, [r5, r2]
    b908:	3a04      	subs	r2, #4
    b90a:	d5fc      	bpl.n	b906 <memset+0x24>
    b90c:	3204      	adds	r2, #4
    b90e:	e000      	b.n	b912 <memset+0x30>
    b910:	54a9      	strb	r1, [r5, r2]
    b912:	3a01      	subs	r2, #1
    b914:	d5fc      	bpl.n	b910 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    b916:	bc30      	pop	{r4, r5}
    b918:	4770      	bx	lr
	...

0000b91c <srand48>:

unsigned short __rand48_seed[3];	/* Common with mrand48.c, lrand48.c */

void srand48(long seedval)
{
	__rand48_seed[0] = 0x330e;
    b91c:	4b03      	ldr	r3, [pc, #12]	; (b92c <srand48+0x10>)
    b91e:	f243 320e 	movw	r2, #13070	; 0x330e
    b922:	801a      	strh	r2, [r3, #0]
	__rand48_seed[1] = (unsigned short)seedval;
    b924:	8058      	strh	r0, [r3, #2]
	__rand48_seed[2] = (unsigned short)((uint32_t) seedval >> 16);
    b926:	0c00      	lsrs	r0, r0, #16
    b928:	8098      	strh	r0, [r3, #4]
}
    b92a:	4770      	bx	lr
    b92c:	20007080 	.word	0x20007080

0000b930 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
    b930:	b430      	push	{r4, r5}
    b932:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
    b934:	1c55      	adds	r5, r2, #1
    b936:	7813      	ldrb	r3, [r2, #0]
    b938:	1c4c      	adds	r4, r1, #1
    b93a:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
    b93c:	1a18      	subs	r0, r3, r0
    b93e:	d103      	bne.n	b948 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
    b940:	462a      	mov	r2, r5
    b942:	4621      	mov	r1, r4
		if (d || !ch)
    b944:	2b00      	cmp	r3, #0
    b946:	d1f5      	bne.n	b934 <strcmp+0x4>
			break;
	}

	return d;
}
    b948:	bc30      	pop	{r4, r5}
    b94a:	4770      	bx	lr

0000b94c <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    b94c:	4603      	mov	r3, r0
	while (*ss)
    b94e:	e000      	b.n	b952 <strlen+0x6>
		ss++;
    b950:	3301      	adds	r3, #1
	while (*ss)
    b952:	781a      	ldrb	r2, [r3, #0]
    b954:	2a00      	cmp	r2, #0
    b956:	d1fb      	bne.n	b950 <strlen+0x4>
	return ss - s;
}
    b958:	1a18      	subs	r0, r3, r0
    b95a:	4770      	bx	lr

0000b95c <strncat>:
 */

#include <string.h>

char *strncat(char *dst, const char *src, size_t n)
{
    b95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b95e:	4607      	mov	r7, r0
    b960:	460d      	mov	r5, r1
    b962:	4614      	mov	r4, r2
	char *q = strchr(dst, '\0');
    b964:	f7ff fff2 	bl	b94c <strlen>
    b968:	4438      	add	r0, r7
	const char *p = src;
	char ch;

	while (n--) {
    b96a:	1e62      	subs	r2, r4, #1
    b96c:	b144      	cbz	r4, b980 <strncat+0x24>
		*q++ = ch = *p++;
    b96e:	1c6e      	adds	r6, r5, #1
    b970:	782b      	ldrb	r3, [r5, #0]
    b972:	1c41      	adds	r1, r0, #1
    b974:	7003      	strb	r3, [r0, #0]
	while (n--) {
    b976:	4614      	mov	r4, r2
		if (!ch)
    b978:	b123      	cbz	r3, b984 <strncat+0x28>
		*q++ = ch = *p++;
    b97a:	4635      	mov	r5, r6
    b97c:	4608      	mov	r0, r1
    b97e:	e7f4      	b.n	b96a <strncat+0xe>
			return dst;
	}
	*q = '\0';
    b980:	2300      	movs	r3, #0
    b982:	7003      	strb	r3, [r0, #0]

	return dst;
}
    b984:	4638      	mov	r0, r7
    b986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b988 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
    b988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b98c:	b082      	sub	sp, #8
    b98e:	e9cd 0100 	strd	r0, r1, [sp]
    b992:	4690      	mov	r8, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    b994:	f8d2 9004 	ldr.w	r9, [r2, #4]

    if (p->hh == 1) {
    b998:	7893      	ldrb	r3, [r2, #2]
    b99a:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b99e:	2b10      	cmp	r3, #16
    b9a0:	d004      	beq.n	b9ac <ui2a+0x24>
        num = (unsigned short int)num;
    } else if (p->hh == 2) {
    b9a2:	2b20      	cmp	r3, #32
    b9a4:	d009      	beq.n	b9ba <ui2a+0x32>
{
    b9a6:	2401      	movs	r4, #1
    b9a8:	2500      	movs	r5, #0
    b9aa:	e013      	b.n	b9d4 <ui2a+0x4c>
    b9ac:	f8bd 2000 	ldrh.w	r2, [sp]
    b9b0:	b293      	uxth	r3, r2
    b9b2:	2400      	movs	r4, #0
    b9b4:	e9cd 3400 	strd	r3, r4, [sp]
    b9b8:	e7f5      	b.n	b9a6 <ui2a+0x1e>
    b9ba:	e9dd 3400 	ldrd	r3, r4, [sp]
    b9be:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    b9c2:	2400      	movs	r4, #0
    b9c4:	e9cd 3400 	strd	r3, r4, [sp]
    b9c8:	e7ed      	b.n	b9a6 <ui2a+0x1e>
        num = (unsigned char)num;
    }

    while (num / d >= p->base)
        d *= p->base;
    b9ca:	fb06 f305 	mul.w	r3, r6, r5
    b9ce:	fba4 4506 	umull	r4, r5, r4, r6
    b9d2:	441d      	add	r5, r3
    while (num / d >= p->base)
    b9d4:	4622      	mov	r2, r4
    b9d6:	462b      	mov	r3, r5
    b9d8:	e9dd 0100 	ldrd	r0, r1, [sp]
    b9dc:	f000 fb5c 	bl	c098 <__aeabi_uldivmod>
    b9e0:	f898 6003 	ldrb.w	r6, [r8, #3]
    b9e4:	2700      	movs	r7, #0
    b9e6:	42b9      	cmp	r1, r7
    b9e8:	bf08      	it	eq
    b9ea:	42b0      	cmpeq	r0, r6
    b9ec:	d2ed      	bcs.n	b9ca <ui2a+0x42>
    int n = 0;
    b9ee:	f04f 0a00 	mov.w	sl, #0
    b9f2:	e007      	b.n	ba04 <ui2a+0x7c>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    b9f4:	2330      	movs	r3, #48	; 0x30
    b9f6:	441e      	add	r6, r3
    b9f8:	f889 6000 	strb.w	r6, [r9]
            ++n;
    b9fc:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    ba00:	f109 0901 	add.w	r9, r9, #1
    while (d != 0) {
    ba04:	ea54 0305 	orrs.w	r3, r4, r5
    ba08:	d02e      	beq.n	ba68 <ui2a+0xe0>
        unsigned long long  dgt = num / d;
    ba0a:	4622      	mov	r2, r4
    ba0c:	462b      	mov	r3, r5
    ba0e:	e9dd 0100 	ldrd	r0, r1, [sp]
    ba12:	f000 fb41 	bl	c098 <__aeabi_uldivmod>
    ba16:	4606      	mov	r6, r0
    ba18:	460f      	mov	r7, r1
        num %= d;
    ba1a:	4622      	mov	r2, r4
    ba1c:	462b      	mov	r3, r5
    ba1e:	e9dd 0100 	ldrd	r0, r1, [sp]
    ba22:	f000 fb39 	bl	c098 <__aeabi_uldivmod>
    ba26:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
    ba2a:	f898 2003 	ldrb.w	r2, [r8, #3]
    ba2e:	2300      	movs	r3, #0
    ba30:	4620      	mov	r0, r4
    ba32:	4629      	mov	r1, r5
    ba34:	f000 fb30 	bl	c098 <__aeabi_uldivmod>
    ba38:	4604      	mov	r4, r0
    ba3a:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
    ba3c:	f1ba 0f00 	cmp.w	sl, #0
    ba40:	d105      	bne.n	ba4e <ui2a+0xc6>
    ba42:	ea56 0307 	orrs.w	r3, r6, r7
    ba46:	d102      	bne.n	ba4e <ui2a+0xc6>
    ba48:	ea54 0305 	orrs.w	r3, r4, r5
    ba4c:	d1da      	bne.n	ba04 <ui2a+0x7c>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    ba4e:	2f00      	cmp	r7, #0
    ba50:	bf08      	it	eq
    ba52:	2e0a      	cmpeq	r6, #10
    ba54:	d3ce      	bcc.n	b9f4 <ui2a+0x6c>
    ba56:	f898 3002 	ldrb.w	r3, [r8, #2]
    ba5a:	f013 0f04 	tst.w	r3, #4
    ba5e:	d001      	beq.n	ba64 <ui2a+0xdc>
    ba60:	2337      	movs	r3, #55	; 0x37
    ba62:	e7c8      	b.n	b9f6 <ui2a+0x6e>
    ba64:	2357      	movs	r3, #87	; 0x57
    ba66:	e7c6      	b.n	b9f6 <ui2a+0x6e>
        }
    }
    *bf = 0;
    ba68:	2300      	movs	r3, #0
    ba6a:	f889 3000 	strb.w	r3, [r9]
}
    ba6e:	b002      	add	sp, #8
    ba70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ba74 <i2a>:

static void i2a(long long int num, struct param *p)
{
    ba74:	b508      	push	{r3, lr}
    if (num < 0) {
    ba76:	2800      	cmp	r0, #0
    ba78:	f171 0300 	sbcs.w	r3, r1, #0
    ba7c:	db02      	blt.n	ba84 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
    ba7e:	f7ff ff83 	bl	b988 <ui2a>
}
    ba82:	bd08      	pop	{r3, pc}
        num = -num;
    ba84:	4240      	negs	r0, r0
    ba86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
    ba8a:	7893      	ldrb	r3, [r2, #2]
    ba8c:	f043 0301 	orr.w	r3, r3, #1
    ba90:	7093      	strb	r3, [r2, #2]
    ba92:	e7f4      	b.n	ba7e <i2a+0xa>

0000ba94 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
    ba94:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    ba98:	b2db      	uxtb	r3, r3
    ba9a:	2b09      	cmp	r3, #9
    ba9c:	d90b      	bls.n	bab6 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
    ba9e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    baa2:	b2db      	uxtb	r3, r3
    baa4:	2b05      	cmp	r3, #5
    baa6:	d908      	bls.n	baba <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
    baa8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    baac:	b2db      	uxtb	r3, r3
    baae:	2b05      	cmp	r3, #5
    bab0:	d805      	bhi.n	babe <a2d+0x2a>
        return ch - 'A' + 10;
    bab2:	3837      	subs	r0, #55	; 0x37
    bab4:	4770      	bx	lr
        return ch - '0';
    bab6:	3830      	subs	r0, #48	; 0x30
    bab8:	4770      	bx	lr
        return ch - 'a' + 10;
    baba:	3857      	subs	r0, #87	; 0x57
    babc:	4770      	bx	lr
    else
        return -1;
    babe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    bac2:	4770      	bx	lr

0000bac4 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
    bac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bac8:	4605      	mov	r5, r0
    baca:	4688      	mov	r8, r1
    bacc:	4617      	mov	r7, r2
    bace:	4699      	mov	r9, r3
    const char *p = *src;
    bad0:	680c      	ldr	r4, [r1, #0]
    int num = 0;
    bad2:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
    bad4:	4628      	mov	r0, r5
    bad6:	f7ff ffdd 	bl	ba94 <a2d>
    bada:	2800      	cmp	r0, #0
    badc:	db06      	blt.n	baec <a2i+0x28>
        if (digit > base)
    bade:	42b8      	cmp	r0, r7
    bae0:	dc04      	bgt.n	baec <a2i+0x28>
            break;
        num = num * base + digit;
    bae2:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
    bae6:	7825      	ldrb	r5, [r4, #0]
    bae8:	3401      	adds	r4, #1
    baea:	e7f3      	b.n	bad4 <a2i+0x10>
    }
    *src = p;
    baec:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
    baf0:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
    baf4:	4628      	mov	r0, r5
    baf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000bafa <putf>:

static int putf(FILE *putp, char c)
{
    bafa:	b500      	push	{lr}
    bafc:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
    bafe:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
    bb02:	6803      	ldr	r3, [r0, #0]
    bb04:	681b      	ldr	r3, [r3, #0]
    bb06:	b14b      	cbz	r3, bb1c <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    bb08:	2201      	movs	r2, #1
    bb0a:	f10d 0107 	add.w	r1, sp, #7
    bb0e:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
    bb10:	2801      	cmp	r0, #1
    bb12:	d005      	beq.n	bb20 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
    bb14:	2000      	movs	r0, #0
    else
        return 1;
}
    bb16:	b003      	add	sp, #12
    bb18:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
    bb1c:	2000      	movs	r0, #0
    bb1e:	e7fa      	b.n	bb16 <putf+0x1c>
        return 1;
    bb20:	2001      	movs	r0, #1
    bb22:	e7f8      	b.n	bb16 <putf+0x1c>

0000bb24 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
    bb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb28:	4606      	mov	r6, r0
    bb2a:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
    bb2c:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
    bb2e:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
    bb30:	e001      	b.n	bb36 <putchw+0x12>
        n--;
    bb32:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
    bb34:	4613      	mov	r3, r2
    bb36:	1c5a      	adds	r2, r3, #1
    bb38:	781b      	ldrb	r3, [r3, #0]
    bb3a:	b10b      	cbz	r3, bb40 <putchw+0x1c>
    bb3c:	2c00      	cmp	r4, #0
    bb3e:	dcf8      	bgt.n	bb32 <putchw+0xe>
    if (p->sign)
    bb40:	78bb      	ldrb	r3, [r7, #2]
    bb42:	f013 0f01 	tst.w	r3, #1
    bb46:	d000      	beq.n	bb4a <putchw+0x26>
        n--;
    bb48:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
    bb4a:	887b      	ldrh	r3, [r7, #2]
    bb4c:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    bb50:	b29b      	uxth	r3, r3
    bb52:	f241 0202 	movw	r2, #4098	; 0x1002
    bb56:	4293      	cmp	r3, r2
    bb58:	d01c      	beq.n	bb94 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
    bb5a:	f640 0202 	movw	r2, #2050	; 0x802
    bb5e:	4293      	cmp	r3, r2
    bb60:	d01a      	beq.n	bb98 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
    bb62:	683b      	ldr	r3, [r7, #0]
    bb64:	4d35      	ldr	r5, [pc, #212]	; (bc3c <putchw+0x118>)
    bb66:	401d      	ands	r5, r3
    bb68:	b1f5      	cbz	r5, bba8 <putchw+0x84>
    unsigned written = 0;
    bb6a:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    bb6c:	78bb      	ldrb	r3, [r7, #2]
    bb6e:	f013 0f01 	tst.w	r3, #1
    bb72:	d11f      	bne.n	bbb4 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
    bb74:	887b      	ldrh	r3, [r7, #2]
    bb76:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    bb7a:	b29b      	uxth	r3, r3
    bb7c:	f241 0202 	movw	r2, #4098	; 0x1002
    bb80:	4293      	cmp	r3, r2
    bb82:	d01d      	beq.n	bbc0 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
    bb84:	f640 0202 	movw	r2, #2050	; 0x802
    bb88:	4293      	cmp	r3, r2
    bb8a:	d02a      	beq.n	bbe2 <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    bb8c:	787b      	ldrb	r3, [r7, #1]
    bb8e:	bba3      	cbnz	r3, bbfa <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    bb90:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
    bb92:	e03d      	b.n	bc10 <putchw+0xec>
        n -= 2;
    bb94:	3c02      	subs	r4, #2
    bb96:	e7e4      	b.n	bb62 <putchw+0x3e>
        n--;
    bb98:	3c01      	subs	r4, #1
    bb9a:	e7e2      	b.n	bb62 <putchw+0x3e>
            written += putf(putp, ' ');
    bb9c:	2120      	movs	r1, #32
    bb9e:	4630      	mov	r0, r6
    bba0:	f7ff ffab 	bl	bafa <putf>
    bba4:	4405      	add	r5, r0
        while (n-- > 0)
    bba6:	4644      	mov	r4, r8
    bba8:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    bbac:	2c00      	cmp	r4, #0
    bbae:	dcf5      	bgt.n	bb9c <putchw+0x78>
    bbb0:	4644      	mov	r4, r8
    bbb2:	e7db      	b.n	bb6c <putchw+0x48>
        written += putf(putp, '-');
    bbb4:	212d      	movs	r1, #45	; 0x2d
    bbb6:	4630      	mov	r0, r6
    bbb8:	f7ff ff9f 	bl	bafa <putf>
    bbbc:	4405      	add	r5, r0
    bbbe:	e7d9      	b.n	bb74 <putchw+0x50>
        written += putf(putp, '0');
    bbc0:	2130      	movs	r1, #48	; 0x30
    bbc2:	4630      	mov	r0, r6
    bbc4:	f7ff ff99 	bl	bafa <putf>
    bbc8:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
    bbca:	78bb      	ldrb	r3, [r7, #2]
    bbcc:	f013 0f04 	tst.w	r3, #4
    bbd0:	d005      	beq.n	bbde <putchw+0xba>
    bbd2:	2158      	movs	r1, #88	; 0x58
    bbd4:	4630      	mov	r0, r6
    bbd6:	f7ff ff90 	bl	bafa <putf>
    bbda:	4405      	add	r5, r0
    bbdc:	e7d6      	b.n	bb8c <putchw+0x68>
    bbde:	2178      	movs	r1, #120	; 0x78
    bbe0:	e7f8      	b.n	bbd4 <putchw+0xb0>
        written += putf(putp, '0');
    bbe2:	2130      	movs	r1, #48	; 0x30
    bbe4:	4630      	mov	r0, r6
    bbe6:	f7ff ff88 	bl	bafa <putf>
    bbea:	4405      	add	r5, r0
    bbec:	e7ce      	b.n	bb8c <putchw+0x68>
            written += putf(putp, '0');
    bbee:	2130      	movs	r1, #48	; 0x30
    bbf0:	4630      	mov	r0, r6
    bbf2:	f7ff ff82 	bl	bafa <putf>
    bbf6:	4405      	add	r5, r0
        while (n-- > 0)
    bbf8:	4644      	mov	r4, r8
    bbfa:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    bbfe:	2c00      	cmp	r4, #0
    bc00:	dcf5      	bgt.n	bbee <putchw+0xca>
    bc02:	4644      	mov	r4, r8
    bc04:	e7c4      	b.n	bb90 <putchw+0x6c>
        written += putf(putp, ch);
    bc06:	4630      	mov	r0, r6
    bc08:	f7ff ff77 	bl	bafa <putf>
    bc0c:	4405      	add	r5, r0
    while ((ch = *bf++))
    bc0e:	4643      	mov	r3, r8
    bc10:	f103 0801 	add.w	r8, r3, #1
    bc14:	7819      	ldrb	r1, [r3, #0]
    bc16:	2900      	cmp	r1, #0
    bc18:	d1f5      	bne.n	bc06 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
    bc1a:	78bb      	ldrb	r3, [r7, #2]
    bc1c:	f013 0f08 	tst.w	r3, #8
    bc20:	d106      	bne.n	bc30 <putchw+0x10c>
    bc22:	e008      	b.n	bc36 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
    bc24:	2120      	movs	r1, #32
    bc26:	4630      	mov	r0, r6
    bc28:	f7ff ff67 	bl	bafa <putf>
    bc2c:	4405      	add	r5, r0
        while (n-- > 0)
    bc2e:	463c      	mov	r4, r7
    bc30:	1e67      	subs	r7, r4, #1
    bc32:	2c00      	cmp	r4, #0
    bc34:	dcf6      	bgt.n	bc24 <putchw+0x100>
    }
    
    return written;
}
    bc36:	4628      	mov	r0, r5
    bc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bc3c:	0008ff00 	.word	0x0008ff00

0000bc40 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
    bc40:	b160      	cbz	r0, bc5c <intarg+0x1c>
    bc42:	2801      	cmp	r0, #1
    bc44:	d017      	beq.n	bc76 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
    bc46:	bb19      	cbnz	r1, bc90 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
    bc48:	6813      	ldr	r3, [r2, #0]
    bc4a:	3307      	adds	r3, #7
    bc4c:	f023 0307 	bic.w	r3, r3, #7
    bc50:	f103 0108 	add.w	r1, r3, #8
    bc54:	6011      	str	r1, [r2, #0]
    bc56:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
    bc5a:	4770      	bx	lr
        if (sign) {
    bc5c:	b129      	cbz	r1, bc6a <intarg+0x2a>
            val = va_arg(*va, int);
    bc5e:	6813      	ldr	r3, [r2, #0]
    bc60:	1d19      	adds	r1, r3, #4
    bc62:	6011      	str	r1, [r2, #0]
    bc64:	6818      	ldr	r0, [r3, #0]
    bc66:	17c1      	asrs	r1, r0, #31
    bc68:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
    bc6a:	6813      	ldr	r3, [r2, #0]
    bc6c:	1d19      	adds	r1, r3, #4
    bc6e:	6011      	str	r1, [r2, #0]
    bc70:	6818      	ldr	r0, [r3, #0]
    bc72:	2100      	movs	r1, #0
    bc74:	4770      	bx	lr
        if (sign) {
    bc76:	b129      	cbz	r1, bc84 <intarg+0x44>
            val = va_arg(*va, long);
    bc78:	6813      	ldr	r3, [r2, #0]
    bc7a:	1d19      	adds	r1, r3, #4
    bc7c:	6011      	str	r1, [r2, #0]
    bc7e:	6818      	ldr	r0, [r3, #0]
    bc80:	17c1      	asrs	r1, r0, #31
    bc82:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
    bc84:	6813      	ldr	r3, [r2, #0]
    bc86:	1d19      	adds	r1, r3, #4
    bc88:	6011      	str	r1, [r2, #0]
    bc8a:	6818      	ldr	r0, [r3, #0]
    bc8c:	2100      	movs	r1, #0
    bc8e:	4770      	bx	lr
            val = va_arg(*va, long long);
    bc90:	6813      	ldr	r3, [r2, #0]
    bc92:	3307      	adds	r3, #7
    bc94:	f023 0307 	bic.w	r3, r3, #7
    bc98:	f103 0108 	add.w	r1, r3, #8
    bc9c:	6011      	str	r1, [r2, #0]
    bc9e:	e9d3 0100 	ldrd	r0, r1, [r3]
    bca2:	4770      	bx	lr

0000bca4 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
    bca4:	b570      	push	{r4, r5, r6, lr}
    bca6:	b08a      	sub	sp, #40	; 0x28
    bca8:	4605      	mov	r5, r0
    bcaa:	9101      	str	r1, [sp, #4]
    bcac:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
    bcae:	ab02      	add	r3, sp, #8
    bcb0:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
    bcb2:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
    bcb4:	9b01      	ldr	r3, [sp, #4]
    bcb6:	1c5a      	adds	r2, r3, #1
    bcb8:	9201      	str	r2, [sp, #4]
    bcba:	7819      	ldrb	r1, [r3, #0]
    bcbc:	2900      	cmp	r1, #0
    bcbe:	f000 813a 	beq.w	bf36 <tfp_format+0x292>
        if (ch != '%') {
    bcc2:	2925      	cmp	r1, #37	; 0x25
    bcc4:	d004      	beq.n	bcd0 <tfp_format+0x2c>
            written += putf(putp, ch);
    bcc6:	4628      	mov	r0, r5
    bcc8:	f7ff ff17 	bl	bafa <putf>
    bccc:	4404      	add	r4, r0
    bcce:	e7f1      	b.n	bcb4 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
    bcd0:	2200      	movs	r2, #0
    bcd2:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
    bcd6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
    bcda:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
            p.hh = 0;
    bcde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    bce2:	f362 1305 	bfi	r3, r2, #4, #2
    bce6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
    bcea:	9b01      	ldr	r3, [sp, #4]
    bcec:	1c5a      	adds	r2, r3, #1
    bcee:	9201      	str	r2, [sp, #4]
    bcf0:	7818      	ldrb	r0, [r3, #0]
    bcf2:	b128      	cbz	r0, bd00 <tfp_format+0x5c>
                switch (ch) {
    bcf4:	282d      	cmp	r0, #45	; 0x2d
    bcf6:	d052      	beq.n	bd9e <tfp_format+0xfa>
    bcf8:	2830      	cmp	r0, #48	; 0x30
    bcfa:	d040      	beq.n	bd7e <tfp_format+0xda>
    bcfc:	2823      	cmp	r0, #35	; 0x23
    bcfe:	d047      	beq.n	bd90 <tfp_format+0xec>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
    bd00:	282a      	cmp	r0, #42	; 0x2a
    bd02:	d056      	beq.n	bdb2 <tfp_format+0x10e>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
    bd04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    bd08:	b2db      	uxtb	r3, r3
    bd0a:	2b09      	cmp	r3, #9
    bd0c:	d965      	bls.n	bdda <tfp_format+0x136>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
    bd0e:	286c      	cmp	r0, #108	; 0x6c
    bd10:	d069      	beq.n	bde6 <tfp_format+0x142>

                if (ch == 'l') {
                    ch = *(fmt++);
                    lng = 2;
                }
            } else if (ch == 'h') {
    bd12:	2868      	cmp	r0, #104	; 0x68
    bd14:	d074      	beq.n	be00 <tfp_format+0x15c>
            lng = 0;
    bd16:	2300      	movs	r3, #0
                    ch = *(fmt++);
                    p.hh = 2;
                }
            }

            if (ch == 'z') {
    bd18:	287a      	cmp	r0, #122	; 0x7a
    bd1a:	f000 808b 	beq.w	be34 <tfp_format+0x190>
                ch = *(fmt++);
            }

            switch (ch) {
    bd1e:	2869      	cmp	r0, #105	; 0x69
    bd20:	f000 80a9 	beq.w	be76 <tfp_format+0x1d2>
    bd24:	f240 808b 	bls.w	be3e <tfp_format+0x19a>
    bd28:	2873      	cmp	r0, #115	; 0x73
    bd2a:	f000 80f7 	beq.w	bf1c <tfp_format+0x278>
    bd2e:	f200 80b3 	bhi.w	be98 <tfp_format+0x1f4>
    bd32:	286f      	cmp	r0, #111	; 0x6f
    bd34:	f000 80e1 	beq.w	befa <tfp_format+0x256>
    bd38:	2870      	cmp	r0, #112	; 0x70
    bd3a:	d1bb      	bne.n	bcb4 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
    bd3c:	9b00      	ldr	r3, [sp, #0]
    bd3e:	1d1a      	adds	r2, r3, #4
    bd40:	9200      	str	r2, [sp, #0]
    bd42:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
    bd44:	2310      	movs	r3, #16
    bd46:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
    bd4a:	aa08      	add	r2, sp, #32
    bd4c:	2100      	movs	r1, #0
    bd4e:	f7ff fe1b 	bl	b988 <ui2a>
                p.width = 2 * sizeof(void*);
    bd52:	2308      	movs	r3, #8
    bd54:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
    bd58:	2301      	movs	r3, #1
    bd5a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
    bd5e:	2130      	movs	r1, #48	; 0x30
    bd60:	4628      	mov	r0, r5
    bd62:	f7ff feca 	bl	bafa <putf>
    bd66:	4404      	add	r4, r0
                written += putf(putp, 'x');
    bd68:	2178      	movs	r1, #120	; 0x78
    bd6a:	4628      	mov	r0, r5
    bd6c:	f7ff fec5 	bl	bafa <putf>
    bd70:	4404      	add	r4, r0
                written += putchw(putp, &p);
    bd72:	a908      	add	r1, sp, #32
    bd74:	4628      	mov	r0, r5
    bd76:	f7ff fed5 	bl	bb24 <putchw>
    bd7a:	4404      	add	r4, r0
                break;
    bd7c:	e79a      	b.n	bcb4 <tfp_format+0x10>
                    if (!p.left) {
    bd7e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    bd82:	f013 0f08 	tst.w	r3, #8
    bd86:	d1b0      	bne.n	bcea <tfp_format+0x46>
                        p.lz = 1;
    bd88:	2301      	movs	r3, #1
    bd8a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    bd8e:	e7ac      	b.n	bcea <tfp_format+0x46>
                    p.alt = 1;
    bd90:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    bd94:	f043 0302 	orr.w	r3, r3, #2
    bd98:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
    bd9c:	e7a5      	b.n	bcea <tfp_format+0x46>
                    p.left = 1;
    bd9e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    bda2:	f043 0308 	orr.w	r3, r3, #8
    bda6:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
    bdaa:	2300      	movs	r3, #0
    bdac:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    bdb0:	e79b      	b.n	bcea <tfp_format+0x46>
                i = intarg(0, 1, &va);
    bdb2:	466a      	mov	r2, sp
    bdb4:	2101      	movs	r1, #1
    bdb6:	2000      	movs	r0, #0
    bdb8:	f7ff ff42 	bl	bc40 <intarg>
                if (i > UCHAR_MAX) {
    bdbc:	28ff      	cmp	r0, #255	; 0xff
    bdbe:	dd07      	ble.n	bdd0 <tfp_format+0x12c>
                    p.width = UCHAR_MAX;
    bdc0:	23ff      	movs	r3, #255	; 0xff
    bdc2:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
    bdc6:	9b01      	ldr	r3, [sp, #4]
    bdc8:	1c5a      	adds	r2, r3, #1
    bdca:	9201      	str	r2, [sp, #4]
    bdcc:	7818      	ldrb	r0, [r3, #0]
    bdce:	e79e      	b.n	bd0e <tfp_format+0x6a>
                } else if (i > 0) {
    bdd0:	2800      	cmp	r0, #0
    bdd2:	ddf8      	ble.n	bdc6 <tfp_format+0x122>
                    p.width = i;
    bdd4:	f88d 0020 	strb.w	r0, [sp, #32]
    bdd8:	e7f5      	b.n	bdc6 <tfp_format+0x122>
                ch = a2i(ch, &fmt, 10, &(p.width));
    bdda:	ab08      	add	r3, sp, #32
    bddc:	220a      	movs	r2, #10
    bdde:	a901      	add	r1, sp, #4
    bde0:	f7ff fe70 	bl	bac4 <a2i>
    bde4:	e793      	b.n	bd0e <tfp_format+0x6a>
                ch = *(fmt++);
    bde6:	9b01      	ldr	r3, [sp, #4]
    bde8:	1c5a      	adds	r2, r3, #1
    bdea:	9201      	str	r2, [sp, #4]
    bdec:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
    bdee:	286c      	cmp	r0, #108	; 0x6c
    bdf0:	d001      	beq.n	bdf6 <tfp_format+0x152>
                lng = 1;
    bdf2:	2301      	movs	r3, #1
    bdf4:	e790      	b.n	bd18 <tfp_format+0x74>
                    ch = *(fmt++);
    bdf6:	1c9a      	adds	r2, r3, #2
    bdf8:	9201      	str	r2, [sp, #4]
    bdfa:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
    bdfc:	2302      	movs	r3, #2
    bdfe:	e78b      	b.n	bd18 <tfp_format+0x74>
                ch = *(fmt++);
    be00:	9b01      	ldr	r3, [sp, #4]
    be02:	1c5a      	adds	r2, r3, #1
    be04:	9201      	str	r2, [sp, #4]
    be06:	7818      	ldrb	r0, [r3, #0]
                p.hh = 1;
    be08:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    be0c:	2601      	movs	r6, #1
    be0e:	f366 1105 	bfi	r1, r6, #4, #2
    be12:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
                if (ch == 'h') {
    be16:	2868      	cmp	r0, #104	; 0x68
    be18:	d001      	beq.n	be1e <tfp_format+0x17a>
            lng = 0;
    be1a:	2300      	movs	r3, #0
    be1c:	e77c      	b.n	bd18 <tfp_format+0x74>
                    ch = *(fmt++);
    be1e:	4432      	add	r2, r6
    be20:	9201      	str	r2, [sp, #4]
    be22:	7858      	ldrb	r0, [r3, #1]
                    p.hh = 2;
    be24:	b2cb      	uxtb	r3, r1
    be26:	2202      	movs	r2, #2
    be28:	f362 1305 	bfi	r3, r2, #4, #2
    be2c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;
    be30:	2300      	movs	r3, #0
    be32:	e771      	b.n	bd18 <tfp_format+0x74>
                ch = *(fmt++);
    be34:	9a01      	ldr	r2, [sp, #4]
    be36:	1c51      	adds	r1, r2, #1
    be38:	9101      	str	r1, [sp, #4]
    be3a:	7810      	ldrb	r0, [r2, #0]
    be3c:	e76f      	b.n	bd1e <tfp_format+0x7a>
            switch (ch) {
    be3e:	2858      	cmp	r0, #88	; 0x58
    be40:	d040      	beq.n	bec4 <tfp_format+0x220>
    be42:	d80a      	bhi.n	be5a <tfp_format+0x1b6>
    be44:	2800      	cmp	r0, #0
    be46:	d076      	beq.n	bf36 <tfp_format+0x292>
    be48:	2825      	cmp	r0, #37	; 0x25
    be4a:	f47f af33 	bne.w	bcb4 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
    be4e:	4601      	mov	r1, r0
    be50:	4628      	mov	r0, r5
    be52:	f7ff fe52 	bl	bafa <putf>
    be56:	4404      	add	r4, r0
                break;
    be58:	e72c      	b.n	bcb4 <tfp_format+0x10>
            switch (ch) {
    be5a:	2863      	cmp	r0, #99	; 0x63
    be5c:	d108      	bne.n	be70 <tfp_format+0x1cc>
                written += putf(putp, (char)(va_arg(va, int)));
    be5e:	9b00      	ldr	r3, [sp, #0]
    be60:	1d1a      	adds	r2, r3, #4
    be62:	9200      	str	r2, [sp, #0]
    be64:	7819      	ldrb	r1, [r3, #0]
    be66:	4628      	mov	r0, r5
    be68:	f7ff fe47 	bl	bafa <putf>
    be6c:	4404      	add	r4, r0
                break;
    be6e:	e721      	b.n	bcb4 <tfp_format+0x10>
            switch (ch) {
    be70:	2864      	cmp	r0, #100	; 0x64
    be72:	f47f af1f 	bne.w	bcb4 <tfp_format+0x10>
                p.base = 10;
    be76:	220a      	movs	r2, #10
    be78:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
    be7c:	466a      	mov	r2, sp
    be7e:	2101      	movs	r1, #1
    be80:	4618      	mov	r0, r3
    be82:	f7ff fedd 	bl	bc40 <intarg>
    be86:	aa08      	add	r2, sp, #32
    be88:	f7ff fdf4 	bl	ba74 <i2a>
                written += putchw(putp, &p);
    be8c:	a908      	add	r1, sp, #32
    be8e:	4628      	mov	r0, r5
    be90:	f7ff fe48 	bl	bb24 <putchw>
    be94:	4404      	add	r4, r0
                break;
    be96:	e70d      	b.n	bcb4 <tfp_format+0x10>
            switch (ch) {
    be98:	2875      	cmp	r0, #117	; 0x75
    be9a:	d110      	bne.n	bebe <tfp_format+0x21a>
                p.base = 10;
    be9c:	220a      	movs	r2, #10
    be9e:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    bea2:	466a      	mov	r2, sp
    bea4:	2100      	movs	r1, #0
    bea6:	4618      	mov	r0, r3
    bea8:	f7ff feca 	bl	bc40 <intarg>
    beac:	aa08      	add	r2, sp, #32
    beae:	f7ff fd6b 	bl	b988 <ui2a>
                written += putchw(putp, &p);
    beb2:	a908      	add	r1, sp, #32
    beb4:	4628      	mov	r0, r5
    beb6:	f7ff fe35 	bl	bb24 <putchw>
    beba:	4404      	add	r4, r0
                break;
    bebc:	e6fa      	b.n	bcb4 <tfp_format+0x10>
            switch (ch) {
    bebe:	2878      	cmp	r0, #120	; 0x78
    bec0:	f47f aef8 	bne.w	bcb4 <tfp_format+0x10>
                p.base = 16;
    bec4:	2210      	movs	r2, #16
    bec6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
    beca:	2858      	cmp	r0, #88	; 0x58
    becc:	bf14      	ite	ne
    bece:	2000      	movne	r0, #0
    bed0:	2001      	moveq	r0, #1
    bed2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    bed6:	f360 0282 	bfi	r2, r0, #2, #1
    beda:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
    bede:	466a      	mov	r2, sp
    bee0:	2100      	movs	r1, #0
    bee2:	4618      	mov	r0, r3
    bee4:	f7ff feac 	bl	bc40 <intarg>
    bee8:	aa08      	add	r2, sp, #32
    beea:	f7ff fd4d 	bl	b988 <ui2a>
                written += putchw(putp, &p);
    beee:	a908      	add	r1, sp, #32
    bef0:	4628      	mov	r0, r5
    bef2:	f7ff fe17 	bl	bb24 <putchw>
    bef6:	4404      	add	r4, r0
                break;
    bef8:	e6dc      	b.n	bcb4 <tfp_format+0x10>
                p.base = 8;
    befa:	2208      	movs	r2, #8
    befc:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    bf00:	466a      	mov	r2, sp
    bf02:	2100      	movs	r1, #0
    bf04:	4618      	mov	r0, r3
    bf06:	f7ff fe9b 	bl	bc40 <intarg>
    bf0a:	aa08      	add	r2, sp, #32
    bf0c:	f7ff fd3c 	bl	b988 <ui2a>
                written += putchw(putp, &p);
    bf10:	a908      	add	r1, sp, #32
    bf12:	4628      	mov	r0, r5
    bf14:	f7ff fe06 	bl	bb24 <putchw>
    bf18:	4404      	add	r4, r0
                break;
    bf1a:	e6cb      	b.n	bcb4 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
    bf1c:	9b00      	ldr	r3, [sp, #0]
    bf1e:	1d1a      	adds	r2, r3, #4
    bf20:	9200      	str	r2, [sp, #0]
    bf22:	681b      	ldr	r3, [r3, #0]
    bf24:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
    bf26:	a908      	add	r1, sp, #32
    bf28:	4628      	mov	r0, r5
    bf2a:	f7ff fdfb 	bl	bb24 <putchw>
    bf2e:	4404      	add	r4, r0
                p.bf = bf;
    bf30:	ab02      	add	r3, sp, #8
    bf32:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    bf34:	e6be      	b.n	bcb4 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
    bf36:	4620      	mov	r0, r4
    bf38:	b00a      	add	sp, #40	; 0x28
    bf3a:	bd70      	pop	{r4, r5, r6, pc}

0000bf3c <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    bf3c:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
    bf3e:	f7ff feb1 	bl	bca4 <tfp_format>
}
    bf42:	bd08      	pop	{r3, pc}

0000bf44 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
    bf44:	b40f      	push	{r0, r1, r2, r3}
    bf46:	b500      	push	{lr}
    bf48:	b083      	sub	sp, #12
    bf4a:	aa04      	add	r2, sp, #16
    bf4c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
    bf50:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
    bf52:	4b04      	ldr	r3, [pc, #16]	; (bf64 <printf+0x20>)
    bf54:	6818      	ldr	r0, [r3, #0]
    bf56:	f7ff fff1 	bl	bf3c <vfprintf>
    va_end(va);
    return rv;
}
    bf5a:	b003      	add	sp, #12
    bf5c:	f85d eb04 	ldr.w	lr, [sp], #4
    bf60:	b004      	add	sp, #16
    bf62:	4770      	bx	lr
    bf64:	00028c54 	.word	0x00028c54

0000bf68 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
    bf68:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf6a:	b085      	sub	sp, #20
    bf6c:	4605      	mov	r5, r0
    bf6e:	460c      	mov	r4, r1
    bf70:	4616      	mov	r6, r2
    bf72:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
    bf74:	460a      	mov	r2, r1
    bf76:	4601      	mov	r1, r0
    bf78:	4668      	mov	r0, sp
    bf7a:	f000 f86f 	bl	c05c <fmemopen_w>
    tfp_format(f, fmt, va);
    bf7e:	463a      	mov	r2, r7
    bf80:	4631      	mov	r1, r6
    bf82:	f7ff fe8f 	bl	bca4 <tfp_format>
    if (size > 0) {
    bf86:	b12c      	cbz	r4, bf94 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
    bf88:	9b02      	ldr	r3, [sp, #8]
    bf8a:	42a3      	cmp	r3, r4
    bf8c:	d305      	bcc.n	bf9a <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
    bf8e:	3c01      	subs	r4, #1
    bf90:	2300      	movs	r3, #0
    bf92:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
    bf94:	9802      	ldr	r0, [sp, #8]
    bf96:	b005      	add	sp, #20
    bf98:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
    bf9a:	9b01      	ldr	r3, [sp, #4]
    bf9c:	2200      	movs	r2, #0
    bf9e:	701a      	strb	r2, [r3, #0]
    bfa0:	e7f8      	b.n	bf94 <vsnprintf+0x2c>

0000bfa2 <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
    bfa2:	b40c      	push	{r2, r3}
    bfa4:	b500      	push	{lr}
    bfa6:	b083      	sub	sp, #12
    bfa8:	ab04      	add	r3, sp, #16
    bfaa:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
    bfae:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
    bfb0:	f7ff ffda 	bl	bf68 <vsnprintf>
    va_end(va);
    return rv;
}
    bfb4:	b003      	add	sp, #12
    bfb6:	f85d eb04 	ldr.w	lr, [sp], #4
    bfba:	b002      	add	sp, #8
    bfbc:	4770      	bx	lr
	...

0000bfc0 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
    bfc0:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
    bfc2:	460a      	mov	r2, r1
    bfc4:	4601      	mov	r1, r0
    bfc6:	4b02      	ldr	r3, [pc, #8]	; (bfd0 <vprintf+0x10>)
    bfc8:	6818      	ldr	r0, [r3, #0]
    bfca:	f7ff ffb7 	bl	bf3c <vfprintf>
}
    bfce:	bd08      	pop	{r3, pc}
    bfd0:	00028c54 	.word	0x00028c54

0000bfd4 <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
    bfd4:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
    bfd8:	4601      	mov	r1, r0
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
    bfda:	f8b0 b000 	ldrh.w	fp, [r0]
    bfde:	f04f 0c00 	mov.w	ip, #0
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
    bfe2:	8846      	ldrh	r6, [r0, #2]
    bfe4:	0c35      	lsrs	r5, r6, #16
    bfe6:	0434      	lsls	r4, r6, #16
	x = (uint64_t) (uint16_t) xsubi[0] +
    bfe8:	eb1b 0204 	adds.w	r2, fp, r4
    bfec:	eb4c 0305 	adc.w	r3, ip, r5
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
    bff0:	2400      	movs	r4, #0
    bff2:	8885      	ldrh	r5, [r0, #4]
	x = (uint64_t) (uint16_t) xsubi[0] +
    bff4:	1916      	adds	r6, r2, r4
    bff6:	eb43 0705 	adc.w	r7, r3, r5

	x = (0x5deece66dULL * x) + 0xb;
    bffa:	4c0b      	ldr	r4, [pc, #44]	; (c028 <jrand48+0x54>)
    bffc:	2005      	movs	r0, #5
    bffe:	fb00 f006 	mul.w	r0, r0, r6
    c002:	fb04 0007 	mla	r0, r4, r7, r0
    c006:	fba6 2304 	umull	r2, r3, r6, r4
    c00a:	4403      	add	r3, r0
    c00c:	f112 040b 	adds.w	r4, r2, #11
    c010:	f143 0500 	adc.w	r5, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
    c014:	800c      	strh	r4, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
    c016:	0c20      	lsrs	r0, r4, #16
    c018:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    c01c:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
    c01e:	808d      	strh	r5, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
    c020:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
    c024:	4770      	bx	lr
    c026:	bf00      	nop
    c028:	deece66d 	.word	0xdeece66d

0000c02c <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
    c02c:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
    c02e:	2500      	movs	r5, #0
    
    while (n--)
    c030:	e000      	b.n	c034 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
    c032:	4622      	mov	r2, r4
    while (n--)
    c034:	1e54      	subs	r4, r2, #1
    c036:	b16a      	cbz	r2, c054 <memfile_write+0x28>
        f->bytes_written++;
    c038:	6883      	ldr	r3, [r0, #8]
    c03a:	3301      	adds	r3, #1
    c03c:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
    c03e:	68c2      	ldr	r2, [r0, #12]
    c040:	4293      	cmp	r3, r2
    c042:	d8f6      	bhi.n	c032 <memfile_write+0x6>
            *f->buffer++ = *bp++;
    c044:	6843      	ldr	r3, [r0, #4]
    c046:	1c5a      	adds	r2, r3, #1
    c048:	6042      	str	r2, [r0, #4]
    c04a:	780a      	ldrb	r2, [r1, #0]
    c04c:	701a      	strb	r2, [r3, #0]
            i++;
    c04e:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
    c050:	3101      	adds	r1, #1
    c052:	e7ee      	b.n	c032 <memfile_write+0x6>
        }
    }
    
    return i;
}
    c054:	4628      	mov	r0, r5
    c056:	bc30      	pop	{r4, r5}
    c058:	4770      	bx	lr
	...

0000c05c <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
    c05c:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
    c05e:	4c04      	ldr	r4, [pc, #16]	; (c070 <fmemopen_w+0x14>)
    c060:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
    c062:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
    c064:	2100      	movs	r1, #0
    c066:	6081      	str	r1, [r0, #8]
    storage->size = size;
    c068:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
    c06a:	f85d 4b04 	ldr.w	r4, [sp], #4
    c06e:	4770      	bx	lr
    c070:	00028c4c 	.word	0x00028c4c

0000c074 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
    c074:	2000      	movs	r0, #0
    c076:	4770      	bx	lr

0000c078 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
    c078:	b510      	push	{r4, lr}
    c07a:	4608      	mov	r0, r1
    c07c:	4614      	mov	r4, r2
    console_write(bp, n);
    c07e:	4611      	mov	r1, r2
    c080:	f7fd f8fe 	bl	9280 <console_write>
    return n;
}
    c084:	4620      	mov	r0, r4
    c086:	bd10      	pop	{r4, pc}

0000c088 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
    c088:	b508      	push	{r3, lr}
    sysinit();
    c08a:	f7fd f96b 	bl	9364 <sysinit_start>
    c08e:	f00b f948 	bl	17322 <sysinit_app>
    c092:	f7fd f96d 	bl	9370 <sysinit_end>
}
    c096:	bd08      	pop	{r3, pc}

0000c098 <__aeabi_uldivmod>:
    c098:	b510      	push	{r4, lr}
    c09a:	b084      	sub	sp, #16
    c09c:	ac02      	add	r4, sp, #8
    c09e:	9400      	str	r4, [sp, #0]
    c0a0:	f000 f805 	bl	c0ae <__udivmoddi4>
    c0a4:	9a02      	ldr	r2, [sp, #8]
    c0a6:	9b03      	ldr	r3, [sp, #12]
    c0a8:	b004      	add	sp, #16
    c0aa:	bd10      	pop	{r4, pc}
    c0ac:	defe      	udf	#254	; 0xfe

0000c0ae <__udivmoddi4>:
    c0ae:	f000 b800 	b.w	c0b2 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE>

0000c0b2 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE>:
    c0b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    c0b4:	af03      	add	r7, sp, #12
    c0b6:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
    c0ba:	b087      	sub	sp, #28
    c0bc:	f8d7 b008 	ldr.w	fp, [r7, #8]
    c0c0:	b159      	cbz	r1, c0da <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x28>
    c0c2:	b1e2      	cbz	r2, c0fe <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x4c>
    c0c4:	2b00      	cmp	r3, #0
    c0c6:	d048      	beq.n	c15a <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0xa8>
    c0c8:	fab1 f681 	clz	r6, r1
    c0cc:	fab3 f583 	clz	r5, r3
    c0d0:	1bae      	subs	r6, r5, r6
    c0d2:	2e1f      	cmp	r6, #31
    c0d4:	f200 809c 	bhi.w	c210 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x15e>
    c0d8:	e0a5      	b.n	c226 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x174>
    c0da:	2b00      	cmp	r3, #0
    c0dc:	f040 8098 	bne.w	c210 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x15e>
    c0e0:	f1bb 0f00 	cmp.w	fp, #0
    c0e4:	f000 819f 	beq.w	c426 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x374>
    c0e8:	2a00      	cmp	r2, #0
    c0ea:	f000 81fb 	beq.w	c4e4 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x432>
    c0ee:	fbb0 f1f2 	udiv	r1, r0, r2
    c0f2:	2300      	movs	r3, #0
    c0f4:	fb01 0112 	mls	r1, r1, r2, r0
    c0f8:	e9cb 1300 	strd	r1, r3, [fp]
    c0fc:	e195      	b.n	c42a <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x378>
    c0fe:	2b00      	cmp	r3, #0
    c100:	f000 81f0 	beq.w	c4e4 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x432>
    c104:	2800      	cmp	r0, #0
    c106:	d060      	beq.n	c1ca <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x118>
    c108:	f04f 3655 	mov.w	r6, #1431655765	; 0x55555555
    c10c:	f04f 3533 	mov.w	r5, #858993459	; 0x33333333
    c110:	ea06 0653 	and.w	r6, r6, r3, lsr #1
    c114:	1b9e      	subs	r6, r3, r6
    c116:	ea05 0596 	and.w	r5, r5, r6, lsr #2
    c11a:	f026 36cc 	bic.w	r6, r6, #3435973836	; 0xcccccccc
    c11e:	442e      	add	r6, r5
    c120:	f04f 3501 	mov.w	r5, #16843009	; 0x1010101
    c124:	eb06 1616 	add.w	r6, r6, r6, lsr #4
    c128:	f026 36f0 	bic.w	r6, r6, #4042322160	; 0xf0f0f0f0
    c12c:	436e      	muls	r6, r5
    c12e:	2501      	movs	r5, #1
    c130:	ebb5 6f16 	cmp.w	r5, r6, lsr #24
    c134:	d165      	bne.n	c202 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x150>
    c136:	f1bb 0f00 	cmp.w	fp, #0
    c13a:	bf1e      	ittt	ne
    c13c:	1e5a      	subne	r2, r3, #1
    c13e:	400a      	andne	r2, r1
    c140:	e9cb 0200 	strdne	r0, r2, [fp]
    c144:	fa93 f0a3 	rbit	r0, r3
    c148:	fab0 f080 	clz	r0, r0
    c14c:	fa21 f000 	lsr.w	r0, r1, r0
    c150:	2100      	movs	r1, #0
    c152:	b007      	add	sp, #28
    c154:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    c158:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c15a:	f04f 3655 	mov.w	r6, #1431655765	; 0x55555555
    c15e:	f04f 3533 	mov.w	r5, #858993459	; 0x33333333
    c162:	ea06 0652 	and.w	r6, r6, r2, lsr #1
    c166:	1b96      	subs	r6, r2, r6
    c168:	ea05 0596 	and.w	r5, r5, r6, lsr #2
    c16c:	f026 36cc 	bic.w	r6, r6, #3435973836	; 0xcccccccc
    c170:	442e      	add	r6, r5
    c172:	f04f 3501 	mov.w	r5, #16843009	; 0x1010101
    c176:	eb06 1616 	add.w	r6, r6, r6, lsr #4
    c17a:	f026 36f0 	bic.w	r6, r6, #4042322160	; 0xf0f0f0f0
    c17e:	436e      	muls	r6, r5
    c180:	2501      	movs	r5, #1
    c182:	ebb5 6f16 	cmp.w	r5, r6, lsr #24
    c186:	d131      	bne.n	c1ec <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x13a>
    c188:	f1bb 0f00 	cmp.w	fp, #0
    c18c:	bf1f      	itttt	ne
    c18e:	2300      	movne	r3, #0
    c190:	1e56      	subne	r6, r2, #1
    c192:	4006      	andne	r6, r0
    c194:	e9cb 6300 	strdne	r6, r3, [fp]
    c198:	2a01      	cmp	r2, #1
    c19a:	d012      	beq.n	c1c2 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x110>
    c19c:	fa92 f2a2 	rbit	r2, r2
    c1a0:	fab2 f282 	clz	r2, r2
    c1a4:	f1c2 0320 	rsb	r3, r2, #32
    c1a8:	40d0      	lsrs	r0, r2
    c1aa:	fa01 f303 	lsl.w	r3, r1, r3
    c1ae:	4318      	orrs	r0, r3
    c1b0:	f1b2 0320 	subs.w	r3, r2, #32
    c1b4:	bf58      	it	pl
    c1b6:	fa21 f003 	lsrpl.w	r0, r1, r3
    c1ba:	fa21 f102 	lsr.w	r1, r1, r2
    c1be:	bf58      	it	pl
    c1c0:	2100      	movpl	r1, #0
    c1c2:	b007      	add	sp, #28
    c1c4:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    c1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1ca:	f1bb 0f00 	cmp.w	fp, #0
    c1ce:	bf1f      	itttt	ne
    c1d0:	fbb1 f0f3 	udivne	r0, r1, r3
    c1d4:	fb00 1013 	mlsne	r0, r0, r3, r1
    c1d8:	2200      	movne	r2, #0
    c1da:	e9cb 2000 	strdne	r2, r0, [fp]
    c1de:	fbb1 f0f3 	udiv	r0, r1, r3
    c1e2:	2100      	movs	r1, #0
    c1e4:	b007      	add	sp, #28
    c1e6:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    c1ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c1ec:	fab1 f681 	clz	r6, r1
    c1f0:	fab2 f582 	clz	r5, r2
    c1f4:	1bae      	subs	r6, r5, r6
    c1f6:	f06f 0520 	mvn.w	r5, #32
    c1fa:	1bad      	subs	r5, r5, r6
    c1fc:	f106 0c21 	add.w	ip, r6, #33	; 0x21
    c200:	e015      	b.n	c22e <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x17c>
    c202:	fab1 f681 	clz	r6, r1
    c206:	fab3 f583 	clz	r5, r3
    c20a:	1bae      	subs	r6, r5, r6
    c20c:	2e1e      	cmp	r6, #30
    c20e:	d90a      	bls.n	c226 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x174>
    c210:	f1bb 0f00 	cmp.w	fp, #0
    c214:	bf18      	it	ne
    c216:	e9cb 0100 	strdne	r0, r1, [fp]
    c21a:	2000      	movs	r0, #0
    c21c:	2100      	movs	r1, #0
    c21e:	b007      	add	sp, #28
    c220:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    c224:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c226:	f1c6 053f 	rsb	r5, r6, #63	; 0x3f
    c22a:	f106 0c01 	add.w	ip, r6, #1
    c22e:	f005 043f 	and.w	r4, r5, #63	; 0x3f
    c232:	f1c4 0620 	rsb	r6, r4, #32
    c236:	f1b4 0820 	subs.w	r8, r4, #32
    c23a:	fa01 f504 	lsl.w	r5, r1, r4
    c23e:	fa20 f606 	lsr.w	r6, r0, r6
    c242:	ea46 0e05 	orr.w	lr, r6, r5
    c246:	f00c 063f 	and.w	r6, ip, #63	; 0x3f
    c24a:	bf58      	it	pl
    c24c:	fa00 fe08 	lslpl.w	lr, r0, r8
    c250:	f1c6 0520 	rsb	r5, r6, #32
    c254:	f1b6 0a20 	subs.w	sl, r6, #32
    c258:	fa01 f905 	lsl.w	r9, r1, r5
    c25c:	fa20 f506 	lsr.w	r5, r0, r6
    c260:	ea49 0905 	orr.w	r9, r9, r5
    c264:	fa00 f504 	lsl.w	r5, r0, r4
    c268:	bf58      	it	pl
    c26a:	fa21 f90a 	lsrpl.w	r9, r1, sl
    c26e:	f1b8 0f00 	cmp.w	r8, #0
    c272:	bf58      	it	pl
    c274:	2500      	movpl	r5, #0
    c276:	fa21 f606 	lsr.w	r6, r1, r6
    c27a:	f1ba 0f00 	cmp.w	sl, #0
    c27e:	bf58      	it	pl
    c280:	2600      	movpl	r6, #0
    c282:	f1bc 0f00 	cmp.w	ip, #0
    c286:	d00c      	beq.n	c2a2 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x1f0>
    c288:	f00c 0103 	and.w	r1, ip, #3
    c28c:	f1ac 0001 	sub.w	r0, ip, #1
    c290:	2803      	cmp	r0, #3
    c292:	e9cd 3201 	strd	r3, r2, [sp, #4]
    c296:	9100      	str	r1, [sp, #0]
    c298:	d207      	bcs.n	c2aa <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x1f8>
    c29a:	2400      	movs	r4, #0
    c29c:	2200      	movs	r2, #0
    c29e:	46f2      	mov	sl, lr
    c2a0:	e08c      	b.n	c3bc <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x30a>
    c2a2:	2400      	movs	r4, #0
    c2a4:	2200      	movs	r2, #0
    c2a6:	46f2      	mov	sl, lr
    c2a8:	e10c      	b.n	c4c4 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x412>
    c2aa:	e9dd 3801 	ldrd	r3, r8, [sp, #4]
    c2ae:	eba1 000c 	sub.w	r0, r1, ip
    c2b2:	2100      	movs	r1, #0
    c2b4:	2200      	movs	r2, #0
    c2b6:	46f2      	mov	sl, lr
    c2b8:	e9cd 5004 	strd	r5, r0, [sp, #16]
    c2bc:	ea4f 75da 	mov.w	r5, sl, lsr #31
    c2c0:	ea45 0549 	orr.w	r5, r5, r9, lsl #1
    c2c4:	0076      	lsls	r6, r6, #1
    c2c6:	ea46 76d9 	orr.w	r6, r6, r9, lsr #31
    c2ca:	9206      	str	r2, [sp, #24]
    c2cc:	43e8      	mvns	r0, r5
    c2ce:	460a      	mov	r2, r1
    c2d0:	eb10 0008 	adds.w	r0, r0, r8
    c2d4:	ea6f 0406 	mvn.w	r4, r6
    c2d8:	eb44 0c03 	adc.w	ip, r4, r3
    c2dc:	ea08 70ec 	and.w	r0, r8, ip, asr #31
    c2e0:	ea03 74ec 	and.w	r4, r3, ip, asr #31
    c2e4:	1a28      	subs	r0, r5, r0
    c2e6:	f3ca 7580 	ubfx	r5, sl, #30, #1
    c2ea:	eb66 0404 	sbc.w	r4, r6, r4
    c2ee:	0064      	lsls	r4, r4, #1
    c2f0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
    c2f4:	ea45 0040 	orr.w	r0, r5, r0, lsl #1
    c2f8:	43c5      	mvns	r5, r0
    c2fa:	eb15 0508 	adds.w	r5, r5, r8
    c2fe:	ea6f 0504 	mvn.w	r5, r4
    c302:	eb45 0e03 	adc.w	lr, r5, r3
    c306:	ea08 75ee 	and.w	r5, r8, lr, asr #31
    c30a:	1b40      	subs	r0, r0, r5
    c30c:	ea03 75ee 	and.w	r5, r3, lr, asr #31
    c310:	41ac      	sbcs	r4, r5
    c312:	f3ca 7540 	ubfx	r5, sl, #29, #1
    c316:	0064      	lsls	r4, r4, #1
    c318:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
    c31c:	ea45 0040 	orr.w	r0, r5, r0, lsl #1
    c320:	43c5      	mvns	r5, r0
    c322:	eb15 0508 	adds.w	r5, r5, r8
    c326:	ea6f 0504 	mvn.w	r5, r4
    c32a:	eb45 0b03 	adc.w	fp, r5, r3
    c32e:	ea08 75eb 	and.w	r5, r8, fp, asr #31
    c332:	1b40      	subs	r0, r0, r5
    c334:	ea03 75eb 	and.w	r5, r3, fp, asr #31
    c338:	41ac      	sbcs	r4, r5
    c33a:	f3ca 7500 	ubfx	r5, sl, #28, #1
    c33e:	0064      	lsls	r4, r4, #1
    c340:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
    c344:	ea45 0040 	orr.w	r0, r5, r0, lsl #1
    c348:	43c5      	mvns	r5, r0
    c34a:	eb15 0508 	adds.w	r5, r5, r8
    c34e:	ea6f 0504 	mvn.w	r5, r4
    c352:	415d      	adcs	r5, r3
    c354:	ea08 71e5 	and.w	r1, r8, r5, asr #31
    c358:	ea03 76e5 	and.w	r6, r3, r5, asr #31
    c35c:	1a40      	subs	r0, r0, r1
    c35e:	9003      	str	r0, [sp, #12]
    c360:	f04f 0001 	mov.w	r0, #1
    c364:	eb64 0906 	sbc.w	r9, r4, r6
    c368:	ea00 74e5 	and.w	r4, r0, r5, asr #31
    c36c:	9806      	ldr	r0, [sp, #24]
    c36e:	9d04      	ldr	r5, [sp, #16]
    c370:	ea4f 018a 	mov.w	r1, sl, lsl #2
    c374:	2602      	movs	r6, #2
    c376:	0040      	lsls	r0, r0, #1
    c378:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    c37c:	ea41 7195 	orr.w	r1, r1, r5, lsr #30
    c380:	4308      	orrs	r0, r1
    c382:	00a9      	lsls	r1, r5, #2
    c384:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    c388:	ea4f 75ee 	mov.w	r5, lr, asr #31
    c38c:	ebb1 71ec 	subs.w	r1, r1, ip, asr #31
    c390:	ea06 0545 	and.w	r5, r6, r5, lsl #1
    c394:	eb60 70ec 	sbc.w	r0, r0, ip, asr #31
    c398:	464e      	mov	r6, r9
    c39a:	f8dd 900c 	ldr.w	r9, [sp, #12]
    c39e:	2200      	movs	r2, #0
    c3a0:	0080      	lsls	r0, r0, #2
    c3a2:	ea40 7091 	orr.w	r0, r0, r1, lsr #30
    c3a6:	ea45 0181 	orr.w	r1, r5, r1, lsl #2
    c3aa:	ebb1 75eb 	subs.w	r5, r1, fp, asr #31
    c3ae:	4621      	mov	r1, r4
    c3b0:	eb60 7aeb 	sbc.w	sl, r0, fp, asr #31
    c3b4:	9805      	ldr	r0, [sp, #20]
    c3b6:	3004      	adds	r0, #4
    c3b8:	f47f af7e 	bne.w	c2b8 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x206>
    c3bc:	f8dd c000 	ldr.w	ip, [sp]
    c3c0:	f8d7 b008 	ldr.w	fp, [r7, #8]
    c3c4:	f1bc 0f00 	cmp.w	ip, #0
    c3c8:	d07c      	beq.n	c4c4 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x412>
    c3ca:	ea4f 71da 	mov.w	r1, sl, lsr #31
    c3ce:	0070      	lsls	r0, r6, #1
    c3d0:	ea41 0149 	orr.w	r1, r1, r9, lsl #1
    c3d4:	ea40 76d9 	orr.w	r6, r0, r9, lsr #31
    c3d8:	f8dd 8008 	ldr.w	r8, [sp, #8]
    c3dc:	46ae      	mov	lr, r5
    c3de:	43cd      	mvns	r5, r1
    c3e0:	9b01      	ldr	r3, [sp, #4]
    c3e2:	43f0      	mvns	r0, r6
    c3e4:	eb15 0508 	adds.w	r5, r5, r8
    c3e8:	4158      	adcs	r0, r3
    c3ea:	9206      	str	r2, [sp, #24]
    c3ec:	ea08 75e0 	and.w	r5, r8, r0, asr #31
    c3f0:	ea03 72e0 	and.w	r2, r3, r0, asr #31
    c3f4:	ebb1 0905 	subs.w	r9, r1, r5
    c3f8:	f04f 0101 	mov.w	r1, #1
    c3fc:	ea01 70e0 	and.w	r0, r1, r0, asr #31
    c400:	4196      	sbcs	r6, r2
    c402:	9005      	str	r0, [sp, #20]
    c404:	ea4f 004a 	mov.w	r0, sl, lsl #1
    c408:	9a06      	ldr	r2, [sp, #24]
    c40a:	ea40 70de 	orr.w	r0, r0, lr, lsr #31
    c40e:	ea44 014e 	orr.w	r1, r4, lr, lsl #1
    c412:	f1bc 0f01 	cmp.w	ip, #1
    c416:	ea40 0e02 	orr.w	lr, r0, r2
    c41a:	d10d      	bne.n	c438 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x386>
    c41c:	9c05      	ldr	r4, [sp, #20]
    c41e:	2200      	movs	r2, #0
    c420:	460d      	mov	r5, r1
    c422:	46f2      	mov	sl, lr
    c424:	e04e      	b.n	c4c4 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x412>
    c426:	2a00      	cmp	r2, #0
    c428:	d05c      	beq.n	c4e4 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x432>
    c42a:	fbb0 f0f2 	udiv	r0, r0, r2
    c42e:	2100      	movs	r1, #0
    c430:	b007      	add	sp, #28
    c432:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    c436:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c438:	0074      	lsls	r4, r6, #1
    c43a:	f3ca 7680 	ubfx	r6, sl, #30, #1
    c43e:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    c442:	ea44 74d9 	orr.w	r4, r4, r9, lsr #31
    c446:	4662      	mov	r2, ip
    c448:	43f5      	mvns	r5, r6
    c44a:	43e0      	mvns	r0, r4
    c44c:	eb15 0508 	adds.w	r5, r5, r8
    c450:	eb40 0503 	adc.w	r5, r0, r3
    c454:	ea08 70e5 	and.w	r0, r8, r5, asr #31
    c458:	ea03 7ce5 	and.w	ip, r3, r5, asr #31
    c45c:	ebb6 0900 	subs.w	r9, r6, r0
    c460:	f04f 0001 	mov.w	r0, #1
    c464:	eb64 060c 	sbc.w	r6, r4, ip
    c468:	ea00 74e5 	and.w	r4, r0, r5, asr #31
    c46c:	9805      	ldr	r0, [sp, #20]
    c46e:	2a02      	cmp	r2, #2
    c470:	ea40 0541 	orr.w	r5, r0, r1, lsl #1
    c474:	ea4f 004e 	mov.w	r0, lr, lsl #1
    c478:	ea40 7cd1 	orr.w	ip, r0, r1, lsr #31
    c47c:	d102      	bne.n	c484 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x3d2>
    c47e:	46e2      	mov	sl, ip
    c480:	2200      	movs	r2, #0
    c482:	e01f      	b.n	c4c4 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x412>
    c484:	46ae      	mov	lr, r5
    c486:	f3ca 7540 	ubfx	r5, sl, #29, #1
    c48a:	0071      	lsls	r1, r6, #1
    c48c:	ea45 0549 	orr.w	r5, r5, r9, lsl #1
    c490:	ea41 71d9 	orr.w	r1, r1, r9, lsr #31
    c494:	43ee      	mvns	r6, r5
    c496:	43c8      	mvns	r0, r1
    c498:	eb16 0608 	adds.w	r6, r6, r8
    c49c:	4158      	adcs	r0, r3
    c49e:	ea08 72e0 	and.w	r2, r8, r0, asr #31
    c4a2:	ea03 73e0 	and.w	r3, r3, r0, asr #31
    c4a6:	ebb5 0902 	subs.w	r9, r5, r2
    c4aa:	ea4f 024c 	mov.w	r2, ip, lsl #1
    c4ae:	eb61 0603 	sbc.w	r6, r1, r3
    c4b2:	2101      	movs	r1, #1
    c4b4:	ea01 70e0 	and.w	r0, r1, r0, asr #31
    c4b8:	ea44 054e 	orr.w	r5, r4, lr, lsl #1
    c4bc:	ea42 7ade 	orr.w	sl, r2, lr, lsr #31
    c4c0:	2200      	movs	r2, #0
    c4c2:	4604      	mov	r4, r0
    c4c4:	ea4f 014a 	mov.w	r1, sl, lsl #1
    c4c8:	f1bb 0f00 	cmp.w	fp, #0
    c4cc:	ea41 71d5 	orr.w	r1, r1, r5, lsr #31
    c4d0:	bf18      	it	ne
    c4d2:	e9cb 9600 	strdne	r9, r6, [fp]
    c4d6:	ea44 0045 	orr.w	r0, r4, r5, lsl #1
    c4da:	4311      	orrs	r1, r2
    c4dc:	b007      	add	sp, #28
    c4de:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    c4e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c4e4:	defe      	udf	#254	; 0xfe
    c4e6:	defe      	udf	#254	; 0xfe

0000c4e8 <imgr_my_version>:
    return 0;
}

int
imgr_my_version(struct image_version *ver)
{
    c4e8:	b508      	push	{r3, lr}
    return img_mgmt_read_info(boot_current_slot, ver, NULL, NULL);
    c4ea:	2300      	movs	r3, #0
    c4ec:	461a      	mov	r2, r3
    c4ee:	4601      	mov	r1, r0
    c4f0:	4802      	ldr	r0, [pc, #8]	; (c4fc <imgr_my_version+0x14>)
    c4f2:	6800      	ldr	r0, [r0, #0]
    c4f4:	f00b f9e8 	bl	178c8 <img_mgmt_read_info>
}
    c4f8:	bd08      	pop	{r3, pc}
    c4fa:	bf00      	nop
    c4fc:	20008000 	.word	0x20008000

0000c500 <imgmgr_find_best_area_id>:
    return -1;
}

int
imgmgr_find_best_area_id(void)
{
    c500:	b530      	push	{r4, r5, lr}
    c502:	b083      	sub	sp, #12
    struct image_version ver;
    int best = -1;
    int i;
    int rc;

    for (i = 0; i < 2; i++) {
    c504:	2400      	movs	r4, #0
    int best = -1;
    c506:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
    c50a:	e000      	b.n	c50e <imgmgr_find_best_area_id+0xe>
    c50c:	3401      	adds	r4, #1
    c50e:	2c01      	cmp	r4, #1
    c510:	dc10      	bgt.n	c534 <imgmgr_find_best_area_id+0x34>
        rc = img_mgmt_read_info(i, &ver, NULL, NULL);
    c512:	2300      	movs	r3, #0
    c514:	461a      	mov	r2, r3
    c516:	4669      	mov	r1, sp
    c518:	4620      	mov	r0, r4
    c51a:	f00b f9d5 	bl	178c8 <img_mgmt_read_info>
        if (rc < 0) {
    c51e:	2800      	cmp	r0, #0
    c520:	dbf4      	blt.n	c50c <imgmgr_find_best_area_id+0xc>
            continue;
        }
        if (rc == 0) {
    c522:	b930      	cbnz	r0, c532 <imgmgr_find_best_area_id+0x32>
            /* Image in slot is ok. */
            if (img_mgmt_slot_in_use(i)) {
    c524:	4620      	mov	r0, r4
    c526:	f00b fc25 	bl	17d74 <img_mgmt_slot_in_use>
    c52a:	2800      	cmp	r0, #0
    c52c:	d1ee      	bne.n	c50c <imgmgr_find_best_area_id+0xc>
            } else {
                /*
                 * Not active slot, but image is ok. Use it if there are
                 * no better candidates.
                 */
                best = i;
    c52e:	4625      	mov	r5, r4
    c530:	e7ec      	b.n	c50c <imgmgr_find_best_area_id+0xc>
            }
            continue;
        }
        best = i;
    c532:	4625      	mov	r5, r4
        break;
    }
    if (best >= 0) {
    c534:	2d00      	cmp	r5, #0
    c536:	db03      	blt.n	c540 <imgmgr_find_best_area_id+0x40>
        best = flash_area_id_from_image_slot(best);
    c538:	4628      	mov	r0, r5
    c53a:	f00a fd00 	bl	16f3e <flash_area_id_from_image_slot>
    c53e:	4605      	mov	r5, r0
    }
    return best;
}
    c540:	4628      	mov	r0, r5
    c542:	b003      	add	sp, #12
    c544:	bd30      	pop	{r4, r5, pc}
	...

0000c548 <imgr_erase_state>:

static int
imgr_erase_state(struct mgmt_ctxt *ctxt)
{
    c548:	b570      	push	{r4, r5, r6, lr}
    c54a:	b082      	sub	sp, #8
    c54c:	4605      	mov	r5, r0
    const struct flash_area *fa;
    int area_id;
    int rc;
    CborError g_err = CborNoError;

    area_id = imgmgr_find_best_area_id();
    c54e:	f7ff ffd7 	bl	c500 <imgmgr_find_best_area_id>
    if (area_id >= 0) {
    c552:	2800      	cmp	r0, #0
    c554:	db1b      	blt.n	c58e <imgr_erase_state+0x46>
        rc = flash_area_open(area_id, &fa);
    c556:	a901      	add	r1, sp, #4
    c558:	b2c0      	uxtb	r0, r0
    c55a:	f00a fc79 	bl	16e50 <flash_area_open>
        if (rc) {
    c55e:	b9d0      	cbnz	r0, c596 <imgr_erase_state+0x4e>
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
                                      img_mgmt_err_str_flash_open_failed);
        }

        rc = flash_area_erase(fa, 0, sizeof(struct image_header));
    c560:	2220      	movs	r2, #32
    c562:	2100      	movs	r1, #0
    c564:	9801      	ldr	r0, [sp, #4]
    c566:	f00a fcb3 	bl	16ed0 <flash_area_erase>
        if (rc) {
    c56a:	4604      	mov	r4, r0
    c56c:	b9a8      	cbnz	r0, c59a <imgr_erase_state+0x52>
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
    c56e:	2202      	movs	r2, #2
    c570:	490b      	ldr	r1, [pc, #44]	; (c5a0 <imgr_erase_state+0x58>)
    c572:	4628      	mov	r0, r5
    c574:	f00c ff9c 	bl	194b0 <cbor_encode_text_string>
    c578:	4606      	mov	r6, r0
    } else {
        return img_mgmt_error_rsp(ctxt, MGMT_ERR_ENOMEM, img_mgmt_err_str_no_slot);
    }

    g_err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    g_err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
    c57a:	2200      	movs	r2, #0
    c57c:	2300      	movs	r3, #0
    c57e:	4628      	mov	r0, r5
    c580:	f00c ff15 	bl	193ae <cbor_encode_int>

    if (g_err) {
    c584:	ea50 0306 	orrs.w	r3, r0, r6
    c588:	d002      	beq.n	c590 <imgr_erase_state+0x48>
        return MGMT_ERR_ENOMEM;
    c58a:	2402      	movs	r4, #2
    c58c:	e000      	b.n	c590 <imgr_erase_state+0x48>
        return img_mgmt_error_rsp(ctxt, MGMT_ERR_ENOMEM, img_mgmt_err_str_no_slot);
    c58e:	2402      	movs	r4, #2
    }

    return 0;
}
    c590:	4620      	mov	r0, r4
    c592:	b002      	add	sp, #8
    c594:	bd70      	pop	{r4, r5, r6, pc}
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
    c596:	2403      	movs	r4, #3
    c598:	e7fa      	b.n	c590 <imgr_erase_state+0x48>
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
    c59a:	2403      	movs	r4, #3
    c59c:	e7f8      	b.n	c590 <imgr_erase_state+0x48>
    c59e:	bf00      	nop
    c5a0:	00028c58 	.word	0x00028c58

0000c5a4 <imgmgr_module_init>:

void
imgmgr_module_init(void)
{
    c5a4:	b508      	push	{r3, lr}
    int rc;
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    c5a6:	4b08      	ldr	r3, [pc, #32]	; (c5c8 <imgmgr_module_init+0x24>)
    c5a8:	781b      	ldrb	r3, [r3, #0]
    c5aa:	b11b      	cbz	r3, c5b4 <imgmgr_module_init+0x10>

    mgmt_register_group(&imgr_mgmt_group);
    c5ac:	4807      	ldr	r0, [pc, #28]	; (c5cc <imgmgr_module_init+0x28>)
    c5ae:	f000 f891 	bl	c6d4 <mgmt_register_group>
    rc = imgr_cli_register();
    SYSINIT_PANIC_ASSERT(rc == 0);
#else
    (void) rc;
#endif
}
    c5b2:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    c5b4:	f7fb fe04 	bl	81c0 <hal_debugger_connected>
    c5b8:	b100      	cbz	r0, c5bc <imgmgr_module_init+0x18>
    c5ba:	be01      	bkpt	0x0001
    c5bc:	2300      	movs	r3, #0
    c5be:	461a      	mov	r2, r3
    c5c0:	4619      	mov	r1, r3
    c5c2:	4618      	mov	r0, r3
    c5c4:	f7fd fa04 	bl	99d0 <__assert_func>
    c5c8:	20000506 	.word	0x20000506
    c5cc:	2000015c 	.word	0x2000015c

0000c5d0 <imgr_ver_str>:
    return 0;
}

int
imgr_ver_str(struct image_version *ver, char *dst)
{
    c5d0:	b510      	push	{r4, lr}
    c5d2:	b082      	sub	sp, #8
    c5d4:	460c      	mov	r4, r1
    if (ver->iv_build_num) {
    c5d6:	6841      	ldr	r1, [r0, #4]
    c5d8:	b949      	cbnz	r1, c5ee <imgr_ver_str+0x1e>
        return sprintf(dst, "%u.%u.%u.%lu",
          ver->iv_major, ver->iv_minor, ver->iv_revision,
          (unsigned long)ver->iv_build_num);
    } else {
        return sprintf(dst, "%u.%u.%u",
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    c5da:	7802      	ldrb	r2, [r0, #0]
    c5dc:	7843      	ldrb	r3, [r0, #1]
    c5de:	8841      	ldrh	r1, [r0, #2]
        return sprintf(dst, "%u.%u.%u",
    c5e0:	9100      	str	r1, [sp, #0]
    c5e2:	4908      	ldr	r1, [pc, #32]	; (c604 <imgr_ver_str+0x34>)
    c5e4:	4620      	mov	r0, r4
    c5e6:	f00f fd79 	bl	1c0dc <sprintf>
    }
}
    c5ea:	b002      	add	sp, #8
    c5ec:	bd10      	pop	{r4, pc}
          ver->iv_major, ver->iv_minor, ver->iv_revision,
    c5ee:	7802      	ldrb	r2, [r0, #0]
    c5f0:	7843      	ldrb	r3, [r0, #1]
    c5f2:	8840      	ldrh	r0, [r0, #2]
        return sprintf(dst, "%u.%u.%u.%lu",
    c5f4:	9101      	str	r1, [sp, #4]
    c5f6:	9000      	str	r0, [sp, #0]
    c5f8:	4903      	ldr	r1, [pc, #12]	; (c608 <imgr_ver_str+0x38>)
    c5fa:	4620      	mov	r0, r4
    c5fc:	f00f fd6e 	bl	1c0dc <sprintf>
    c600:	e7f3      	b.n	c5ea <imgr_ver_str+0x1a>
    c602:	bf00      	nop
    c604:	00028ca4 	.word	0x00028ca4
    c608:	00028c94 	.word	0x00028c94

0000c60c <mgmt_find_group>:
     * Find the group with the specified group id, if one exists
     * check the handler for the command id and make sure
     * that is not NULL. If that is not set, look for the group
     * with a command id that is set
     */
    for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
    c60c:	4b13      	ldr	r3, [pc, #76]	; (c65c <mgmt_find_group+0x50>)
    c60e:	681b      	ldr	r3, [r3, #0]
    c610:	b30b      	cbz	r3, c656 <mgmt_find_group+0x4a>
        if (group->mg_group_id == group_id) {
    c612:	895a      	ldrh	r2, [r3, #10]
    c614:	4282      	cmp	r2, r0
    c616:	d018      	beq.n	c64a <mgmt_find_group+0x3e>
    for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
    c618:	681b      	ldr	r3, [r3, #0]
    c61a:	e7f9      	b.n	c610 <mgmt_find_group+0x4>
    c61c:	681b      	ldr	r3, [r3, #0]
    c61e:	b173      	cbz	r3, c63e <mgmt_find_group+0x32>
        if (group->mg_group_id == group_id) {
    c620:	895a      	ldrh	r2, [r3, #10]
    c622:	4282      	cmp	r2, r0
    c624:	d1fa      	bne.n	c61c <mgmt_find_group+0x10>
            if (command_id >= group->mg_handlers_count) {
    c626:	891a      	ldrh	r2, [r3, #8]
    c628:	428a      	cmp	r2, r1
    c62a:	d90c      	bls.n	c646 <mgmt_find_group+0x3a>
                return NULL;
            }

            if (!group->mg_handlers[command_id].mh_read &&
    c62c:	685a      	ldr	r2, [r3, #4]
    c62e:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
    c632:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    c636:	b912      	cbnz	r2, c63e <mgmt_find_group+0x32>
                !group->mg_handlers[command_id].mh_write) {
    c638:	6862      	ldr	r2, [r4, #4]
            if (!group->mg_handlers[command_id].mh_read &&
    c63a:	2a00      	cmp	r2, #0
    c63c:	d0ee      	beq.n	c61c <mgmt_find_group+0x10>
            break;
        }
    }

    return group;
}
    c63e:	4618      	mov	r0, r3
    c640:	f85d 4b04 	ldr.w	r4, [sp], #4
    c644:	4770      	bx	lr
                return NULL;
    c646:	2300      	movs	r3, #0
    c648:	e7f9      	b.n	c63e <mgmt_find_group+0x32>
            if (command_id >= group->mg_handlers_count) {
    c64a:	891a      	ldrh	r2, [r3, #8]
    c64c:	428a      	cmp	r2, r1
    c64e:	d901      	bls.n	c654 <mgmt_find_group+0x48>
{
    c650:	b410      	push	{r4}
    c652:	e7eb      	b.n	c62c <mgmt_find_group+0x20>
                return NULL;
    c654:	2300      	movs	r3, #0
}
    c656:	4618      	mov	r0, r3
    c658:	4770      	bx	lr
    c65a:	bf00      	nop
    c65c:	2000708c 	.word	0x2000708c

0000c660 <mgmt_streamer_alloc_rsp>:
{
    c660:	b508      	push	{r3, lr}
    c662:	4603      	mov	r3, r0
    c664:	4608      	mov	r0, r1
    return streamer->cfg->alloc_rsp(req, streamer->cb_arg);
    c666:	681a      	ldr	r2, [r3, #0]
    c668:	6812      	ldr	r2, [r2, #0]
    c66a:	6859      	ldr	r1, [r3, #4]
    c66c:	4790      	blx	r2
}
    c66e:	bd08      	pop	{r3, pc}

0000c670 <mgmt_streamer_trim_front>:
{
    c670:	b510      	push	{r4, lr}
    c672:	4603      	mov	r3, r0
    c674:	4608      	mov	r0, r1
    c676:	4611      	mov	r1, r2
    streamer->cfg->trim_front(buf, len, streamer->cb_arg);
    c678:	681a      	ldr	r2, [r3, #0]
    c67a:	6854      	ldr	r4, [r2, #4]
    c67c:	685a      	ldr	r2, [r3, #4]
    c67e:	47a0      	blx	r4
}
    c680:	bd10      	pop	{r4, pc}

0000c682 <mgmt_streamer_reset_buf>:
{
    c682:	b508      	push	{r3, lr}
    c684:	4603      	mov	r3, r0
    c686:	4608      	mov	r0, r1
    streamer->cfg->reset_buf(buf, streamer->cb_arg);
    c688:	681a      	ldr	r2, [r3, #0]
    c68a:	6892      	ldr	r2, [r2, #8]
    c68c:	6859      	ldr	r1, [r3, #4]
    c68e:	4790      	blx	r2
}
    c690:	bd08      	pop	{r3, pc}

0000c692 <mgmt_streamer_write_at>:
{
    c692:	b530      	push	{r4, r5, lr}
    c694:	b083      	sub	sp, #12
    return streamer->cfg->write_at(streamer->writer, offset, data, len,
    c696:	6804      	ldr	r4, [r0, #0]
    c698:	68e4      	ldr	r4, [r4, #12]
    c69a:	68c5      	ldr	r5, [r0, #12]
    c69c:	6840      	ldr	r0, [r0, #4]
    c69e:	9000      	str	r0, [sp, #0]
    c6a0:	4628      	mov	r0, r5
    c6a2:	47a0      	blx	r4
}
    c6a4:	b003      	add	sp, #12
    c6a6:	bd30      	pop	{r4, r5, pc}

0000c6a8 <mgmt_streamer_init_reader>:
{
    c6a8:	b508      	push	{r3, lr}
    return streamer->cfg->init_reader(streamer->reader, buf, streamer->cb_arg);
    c6aa:	6803      	ldr	r3, [r0, #0]
    c6ac:	691b      	ldr	r3, [r3, #16]
    c6ae:	6842      	ldr	r2, [r0, #4]
    c6b0:	6880      	ldr	r0, [r0, #8]
    c6b2:	4798      	blx	r3
}
    c6b4:	bd08      	pop	{r3, pc}

0000c6b6 <mgmt_streamer_init_writer>:
{
    c6b6:	b508      	push	{r3, lr}
    return streamer->cfg->init_writer(streamer->writer, buf, streamer->cb_arg);
    c6b8:	6803      	ldr	r3, [r0, #0]
    c6ba:	695b      	ldr	r3, [r3, #20]
    c6bc:	6842      	ldr	r2, [r0, #4]
    c6be:	68c0      	ldr	r0, [r0, #12]
    c6c0:	4798      	blx	r3
}
    c6c2:	bd08      	pop	{r3, pc}

0000c6c4 <mgmt_streamer_free_buf>:
{
    c6c4:	b508      	push	{r3, lr}
    c6c6:	4603      	mov	r3, r0
    c6c8:	4608      	mov	r0, r1
    streamer->cfg->free_buf(buf, streamer->cb_arg);
    c6ca:	681a      	ldr	r2, [r3, #0]
    c6cc:	6992      	ldr	r2, [r2, #24]
    c6ce:	6859      	ldr	r1, [r3, #4]
    c6d0:	4790      	blx	r2
}
    c6d2:	bd08      	pop	{r3, pc}

0000c6d4 <mgmt_register_group>:

void
mgmt_register_group(struct mgmt_group *group)
{
    if (mgmt_group_list_end == NULL) {
    c6d4:	4b04      	ldr	r3, [pc, #16]	; (c6e8 <mgmt_register_group+0x14>)
    c6d6:	681b      	ldr	r3, [r3, #0]
    c6d8:	b11b      	cbz	r3, c6e2 <mgmt_register_group+0xe>
        mgmt_group_list = group;
    } else {
        mgmt_group_list_end->mg_next = group;
    c6da:	6018      	str	r0, [r3, #0]
    }
    mgmt_group_list_end = group;
    c6dc:	4b02      	ldr	r3, [pc, #8]	; (c6e8 <mgmt_register_group+0x14>)
    c6de:	6018      	str	r0, [r3, #0]
}
    c6e0:	4770      	bx	lr
        mgmt_group_list = group;
    c6e2:	4b02      	ldr	r3, [pc, #8]	; (c6ec <mgmt_register_group+0x18>)
    c6e4:	6018      	str	r0, [r3, #0]
    c6e6:	e7f9      	b.n	c6dc <mgmt_register_group+0x8>
    c6e8:	20007090 	.word	0x20007090
    c6ec:	2000708c 	.word	0x2000708c

0000c6f0 <mgmt_find_handler>:

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t command_id)
{
    c6f0:	b510      	push	{r4, lr}
    c6f2:	460c      	mov	r4, r1
    const struct mgmt_group *group;

    group = mgmt_find_group(group_id, command_id);
    c6f4:	f7ff ff8a 	bl	c60c <mgmt_find_group>
    if (!group) {
    c6f8:	b118      	cbz	r0, c702 <mgmt_find_handler+0x12>
        return NULL;
    }

    return &group->mg_handlers[command_id];
    c6fa:	6840      	ldr	r0, [r0, #4]
    c6fc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
}
    c700:	bd10      	pop	{r4, pc}
        return NULL;
    c702:	2000      	movs	r0, #0
    c704:	e7fc      	b.n	c700 <mgmt_find_handler+0x10>
	...

0000c708 <mgmt_write_rsp_status>:

int
mgmt_write_rsp_status(struct mgmt_ctxt *ctxt, int errcode)
{
    c708:	b538      	push	{r3, r4, r5, lr}
    c70a:	4604      	mov	r4, r0
    c70c:	460d      	mov	r5, r1
    c70e:	2202      	movs	r2, #2
    c710:	4906      	ldr	r1, [pc, #24]	; (c72c <mgmt_write_rsp_status+0x24>)
    c712:	f00c fecd 	bl	194b0 <cbor_encode_text_string>
    int rc;

    rc = cbor_encode_text_stringz(&ctxt->encoder, "rc");
    if (rc != 0) {
    c716:	4603      	mov	r3, r0
    c718:	b108      	cbz	r0, c71e <mgmt_write_rsp_status+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    c71a:	4618      	mov	r0, r3
    c71c:	bd38      	pop	{r3, r4, r5, pc}
    rc = cbor_encode_int(&ctxt->encoder, errcode);
    c71e:	462a      	mov	r2, r5
    c720:	17eb      	asrs	r3, r5, #31
    c722:	4620      	mov	r0, r4
    c724:	f00c fe43 	bl	193ae <cbor_encode_int>
    c728:	4603      	mov	r3, r0
    c72a:	e7f6      	b.n	c71a <mgmt_write_rsp_status+0x12>
    c72c:	00028c58 	.word	0x00028c58

0000c730 <mgmt_err_from_cbor>:

int
mgmt_err_from_cbor(int cbor_status)
{
    switch (cbor_status) {
    c730:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    c734:	d002      	beq.n	c73c <mgmt_err_from_cbor+0xc>
    c736:	b110      	cbz	r0, c73e <mgmt_err_from_cbor+0xe>
        case CborNoError:           return MGMT_ERR_EOK;
        case CborErrorOutOfMemory:  return MGMT_ERR_ENOMEM;
        default:                    return MGMT_ERR_EUNKNOWN;
    c738:	2001      	movs	r0, #1
    c73a:	4770      	bx	lr
        case CborErrorOutOfMemory:  return MGMT_ERR_ENOMEM;
    c73c:	2002      	movs	r0, #2
    }
}
    c73e:	4770      	bx	lr

0000c740 <mgmt_ctxt_init>:

int
mgmt_ctxt_init(struct mgmt_ctxt *ctxt, struct mgmt_streamer *streamer)
{
    c740:	b570      	push	{r4, r5, r6, lr}
    c742:	4604      	mov	r4, r0
    c744:	460e      	mov	r6, r1
    int rc;

    rc = cbor_parser_init(streamer->reader, 0, &ctxt->parser, &ctxt->it);
    c746:	f100 031c 	add.w	r3, r0, #28
    c74a:	f100 0210 	add.w	r2, r0, #16
    c74e:	2100      	movs	r1, #0
    c750:	68b0      	ldr	r0, [r6, #8]
    c752:	f00d f98d 	bl	19a70 <cbor_parser_init>
    if (rc != CborNoError) {
    c756:	4605      	mov	r5, r0
    c758:	b120      	cbz	r0, c764 <mgmt_ctxt_init+0x24>
        return mgmt_err_from_cbor(rc);
    c75a:	f7ff ffe9 	bl	c730 <mgmt_err_from_cbor>
    c75e:	4605      	mov	r5, r0
    }

    cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);

    return 0;
}
    c760:	4628      	mov	r0, r5
    c762:	bd70      	pop	{r4, r5, r6, pc}
    cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);
    c764:	2200      	movs	r2, #0
    c766:	68f1      	ldr	r1, [r6, #12]
    c768:	4620      	mov	r0, r4
    c76a:	f00c fde6 	bl	1933a <cbor_encoder_init>
    return 0;
    c76e:	e7f7      	b.n	c760 <mgmt_ctxt_init+0x20>

0000c770 <mgmt_ntoh_hdr>:

void
mgmt_ntoh_hdr(struct mgmt_hdr *hdr)
{
    hdr->nh_len = ntohs(hdr->nh_len);
    c770:	8842      	ldrh	r2, [r0, #2]
    c772:	0213      	lsls	r3, r2, #8
    c774:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    c778:	8043      	strh	r3, [r0, #2]
    hdr->nh_group = ntohs(hdr->nh_group);
    c77a:	8882      	ldrh	r2, [r0, #4]
    c77c:	0213      	lsls	r3, r2, #8
    c77e:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    c782:	8083      	strh	r3, [r0, #4]
}
    c784:	4770      	bx	lr

0000c786 <mgmt_hton_hdr>:

void
mgmt_hton_hdr(struct mgmt_hdr *hdr)
{
    hdr->nh_len = htons(hdr->nh_len);
    c786:	8842      	ldrh	r2, [r0, #2]
    c788:	0213      	lsls	r3, r2, #8
    c78a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    c78e:	8043      	strh	r3, [r0, #2]
    hdr->nh_group = htons(hdr->nh_group);
    c790:	8882      	ldrh	r2, [r0, #4]
    c792:	0213      	lsls	r3, r2, #8
    c794:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    c798:	8083      	strh	r3, [r0, #4]
}
    c79a:	4770      	bx	lr

0000c79c <mgmt_evt>:
    evt_cb = cb;
}

void
mgmt_evt(uint8_t opcode, uint16_t group, uint8_t id, void *arg)
{
    c79c:	b510      	push	{r4, lr}
    if (evt_cb) {
    c79e:	4c02      	ldr	r4, [pc, #8]	; (c7a8 <mgmt_evt+0xc>)
    c7a0:	6824      	ldr	r4, [r4, #0]
    c7a2:	b104      	cbz	r4, c7a6 <mgmt_evt+0xa>
        evt_cb(opcode, group, id, arg);
    c7a4:	47a0      	blx	r4
    }
}
    c7a6:	bd10      	pop	{r4, pc}
    c7a8:	20007088 	.word	0x20007088

0000c7ac <ble_gap_call_event_cb>:
ble_gap_event_listener_call(struct ble_gap_event *event);

static int
ble_gap_call_event_cb(struct ble_gap_event *event,
                      ble_gap_event_fn *cb, void *cb_arg)
{
    c7ac:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (cb != NULL) {
    c7ae:	b119      	cbz	r1, c7b8 <ble_gap_call_event_cb+0xc>
    c7b0:	460b      	mov	r3, r1
    c7b2:	4611      	mov	r1, r2
        rc = cb(event, cb_arg);
    c7b4:	4798      	blx	r3
        }
        rc = 0;
    }

    return rc;
}
    c7b6:	bd08      	pop	{r3, pc}
        if (event->type == BLE_GAP_EVENT_CONN_UPDATE_REQ) {
    c7b8:	7803      	ldrb	r3, [r0, #0]
    c7ba:	2b04      	cmp	r3, #4
    c7bc:	d001      	beq.n	c7c2 <ble_gap_call_event_cb+0x16>
        rc = 0;
    c7be:	2000      	movs	r0, #0
    return rc;
    c7c0:	e7f9      	b.n	c7b6 <ble_gap_call_event_cb+0xa>
                *event->conn_update_req.peer_params;
    c7c2:	6842      	ldr	r2, [r0, #4]
            *event->conn_update_req.self_params =
    c7c4:	6883      	ldr	r3, [r0, #8]
    c7c6:	6810      	ldr	r0, [r2, #0]
    c7c8:	6851      	ldr	r1, [r2, #4]
    c7ca:	6892      	ldr	r2, [r2, #8]
    c7cc:	6018      	str	r0, [r3, #0]
    c7ce:	6059      	str	r1, [r3, #4]
    c7d0:	609a      	str	r2, [r3, #8]
        rc = 0;
    c7d2:	2000      	movs	r0, #0
    c7d4:	e7ef      	b.n	c7b6 <ble_gap_call_event_cb+0xa>
	...

0000c7d8 <ble_gap_is_preempted>:
{
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    if (ble_gap_master.preempted_op != BLE_GAP_OP_NULL) {
    c7d8:	4b09      	ldr	r3, [pc, #36]	; (c800 <ble_gap_is_preempted+0x28>)
    c7da:	7c1b      	ldrb	r3, [r3, #16]
    c7dc:	b963      	cbnz	r3, c7f8 <ble_gap_is_preempted+0x20>
        return true;
    }

    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
    c7de:	2b00      	cmp	r3, #0
    c7e0:	dd01      	ble.n	c7e6 <ble_gap_is_preempted+0xe>
        if (ble_gap_slave[i].preempted) {
            return true;
        }
    }

    return false;
    c7e2:	2000      	movs	r0, #0
    c7e4:	4770      	bx	lr
        if (ble_gap_slave[i].preempted) {
    c7e6:	4a06      	ldr	r2, [pc, #24]	; (c800 <ble_gap_is_preempted+0x28>)
    c7e8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    c7ec:	7d52      	ldrb	r2, [r2, #21]
    c7ee:	f012 0f04 	tst.w	r2, #4
    c7f2:	d103      	bne.n	c7fc <ble_gap_is_preempted+0x24>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
    c7f4:	3301      	adds	r3, #1
    c7f6:	e7f2      	b.n	c7de <ble_gap_is_preempted+0x6>
        return true;
    c7f8:	2001      	movs	r0, #1
    c7fa:	4770      	bx	lr
            return true;
    c7fc:	2001      	movs	r0, #1
}
    c7fe:	4770      	bx	lr
    c800:	200004b8 	.word	0x200004b8

0000c804 <ble_gap_has_client>:

#if NIMBLE_BLE_CONNECT
static bool
ble_gap_has_client(struct ble_gap_master_state *out_state)
{
    if (!out_state) {
    c804:	b120      	cbz	r0, c810 <ble_gap_has_client+0xc>
        return 0;
    }

    return out_state->cb;
    c806:	6880      	ldr	r0, [r0, #8]
    c808:	3000      	adds	r0, #0
    c80a:	bf18      	it	ne
    c80c:	2001      	movne	r0, #1
    c80e:	4770      	bx	lr
        return 0;
    c810:	2000      	movs	r0, #0
}
    c812:	4770      	bx	lr

0000c814 <ble_gap_update_to_l2cap>:
#if NIMBLE_BLE_CONNECT
static void
ble_gap_update_to_l2cap(const struct ble_gap_upd_params *params,
                        struct ble_l2cap_sig_update_params *l2cap_params)
{
    l2cap_params->itvl_min = params->itvl_min;
    c814:	8803      	ldrh	r3, [r0, #0]
    c816:	800b      	strh	r3, [r1, #0]
    l2cap_params->itvl_max = params->itvl_max;
    c818:	8843      	ldrh	r3, [r0, #2]
    c81a:	804b      	strh	r3, [r1, #2]
    l2cap_params->slave_latency = params->latency;
    c81c:	8883      	ldrh	r3, [r0, #4]
    c81e:	808b      	strh	r3, [r1, #4]
    l2cap_params->timeout_multiplier = params->supervision_timeout;
    c820:	88c3      	ldrh	r3, [r0, #6]
    c822:	80cb      	strh	r3, [r1, #6]
}
    c824:	4770      	bx	lr
	...

0000c828 <ble_gap_adv_active_instance>:

static int
ble_gap_adv_active_instance(uint8_t instance)
{
    /* Assume read is atomic; mutex not necessary. */
    return ble_gap_slave[instance].op == BLE_GAP_OP_S_ADV;
    c828:	4b04      	ldr	r3, [pc, #16]	; (c83c <ble_gap_adv_active_instance+0x14>)
    c82a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    c82e:	7d00      	ldrb	r0, [r0, #20]
}
    c830:	2801      	cmp	r0, #1
    c832:	bf14      	ite	ne
    c834:	2000      	movne	r0, #0
    c836:	2001      	moveq	r0, #1
    c838:	4770      	bx	lr
    c83a:	bf00      	nop
    c83c:	200004b8 	.word	0x200004b8

0000c840 <ble_gap_accept_master_conn>:
static int
ble_gap_accept_master_conn(void)
{
    int rc;

    switch (ble_gap_master.op) {
    c840:	4b03      	ldr	r3, [pc, #12]	; (c850 <ble_gap_accept_master_conn+0x10>)
    c842:	781b      	ldrb	r3, [r3, #0]
    c844:	2b02      	cmp	r3, #2
    c846:	d001      	beq.n	c84c <ble_gap_accept_master_conn+0xc>
    case BLE_GAP_OP_NULL:
    case BLE_GAP_OP_M_DISC:
        rc = BLE_HS_ENOENT;
    c848:	2005      	movs	r0, #5
    c84a:	4770      	bx	lr
        break;

    case BLE_GAP_OP_M_CONN:
        rc = 0;
    c84c:	2000      	movs	r0, #0
    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_mst);
    }

    return rc;
}
    c84e:	4770      	bx	lr
    c850:	200004b8 	.word	0x200004b8

0000c854 <ble_gap_accept_slave_conn>:
static int
ble_gap_accept_slave_conn(uint8_t instance)
{
    int rc;

    if (instance >= BLE_ADV_INSTANCES) {
    c854:	b968      	cbnz	r0, c872 <ble_gap_accept_slave_conn+0x1e>
{
    c856:	b510      	push	{r4, lr}
    c858:	4604      	mov	r4, r0
       rc = BLE_HS_ENOENT;
    } else if (!ble_gap_adv_active_instance(instance)) {
    c85a:	f7ff ffe5 	bl	c828 <ble_gap_adv_active_instance>
    c85e:	b150      	cbz	r0, c876 <ble_gap_accept_slave_conn+0x22>
        rc = BLE_HS_ENOENT;
    } else {
        if (ble_gap_slave[instance].connectable) {
    c860:	4b07      	ldr	r3, [pc, #28]	; (c880 <ble_gap_accept_slave_conn+0x2c>)
    c862:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    c866:	7d63      	ldrb	r3, [r4, #21]
    c868:	f013 0f08 	tst.w	r3, #8
    c86c:	d005      	beq.n	c87a <ble_gap_accept_slave_conn+0x26>
            rc = 0;
    c86e:	2000      	movs	r0, #0
    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_slv);
    }

    return rc;
}
    c870:	bd10      	pop	{r4, pc}
       rc = BLE_HS_ENOENT;
    c872:	2005      	movs	r0, #5
}
    c874:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
    c876:	2005      	movs	r0, #5
    c878:	e7fa      	b.n	c870 <ble_gap_accept_slave_conn+0x1c>
            rc = BLE_HS_ENOENT;
    c87a:	2005      	movs	r0, #5
    return rc;
    c87c:	e7f8      	b.n	c870 <ble_gap_accept_slave_conn+0x1c>
    c87e:	bf00      	nop
    c880:	200004b8 	.word	0x200004b8

0000c884 <ble_gap_adv_type>:
 *****************************************************************************/
#if NIMBLE_BLE_ADVERTISE && !MYNEWT_VAL(BLE_EXT_ADV)
static int
ble_gap_adv_type(const struct ble_gap_adv_params *adv_params)
{
    switch (adv_params->conn_mode) {
    c884:	7803      	ldrb	r3, [r0, #0]
    c886:	b11b      	cbz	r3, c890 <ble_gap_adv_type+0xc>
    c888:	2b01      	cmp	r3, #1
    c88a:	d005      	beq.n	c898 <ble_gap_adv_type+0x14>
        } else {
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
        }

    case BLE_GAP_CONN_MODE_UND:
        return BLE_HCI_ADV_TYPE_ADV_IND;
    c88c:	2000      	movs	r0, #0
    c88e:	4770      	bx	lr
        if (adv_params->disc_mode == BLE_GAP_DISC_MODE_NON) {
    c890:	7843      	ldrb	r3, [r0, #1]
    c892:	b93b      	cbnz	r3, c8a4 <ble_gap_adv_type+0x20>
            return BLE_HCI_ADV_TYPE_ADV_NONCONN_IND;
    c894:	2003      	movs	r0, #3
    c896:	4770      	bx	lr

    case BLE_GAP_CONN_MODE_DIR:
        if (adv_params->high_duty_cycle) {
    c898:	7a03      	ldrb	r3, [r0, #8]
    c89a:	f013 0f01 	tst.w	r3, #1
    c89e:	d003      	beq.n	c8a8 <ble_gap_adv_type+0x24>
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_HD;
    c8a0:	2001      	movs	r0, #1
    c8a2:	4770      	bx	lr
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
    c8a4:	2002      	movs	r0, #2
    c8a6:	4770      	bx	lr
        } else {
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_LD;
    c8a8:	2004      	movs	r0, #4

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HCI_ADV_TYPE_ADV_IND;
    }
}
    c8aa:	4770      	bx	lr

0000c8ac <ble_gap_adv_dflt_itvls>:

static void
ble_gap_adv_dflt_itvls(uint8_t conn_mode,
                       uint16_t *out_itvl_min, uint16_t *out_itvl_max)
{
    switch (conn_mode) {
    c8ac:	2801      	cmp	r0, #1
    c8ae:	d011      	beq.n	c8d4 <ble_gap_adv_dflt_itvls+0x28>
    c8b0:	b130      	cbz	r0, c8c0 <ble_gap_adv_dflt_itvls+0x14>
    c8b2:	2802      	cmp	r0, #2
    c8b4:	d009      	beq.n	c8ca <ble_gap_adv_dflt_itvls+0x1e>
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
    c8b6:	2330      	movs	r3, #48	; 0x30
    c8b8:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
    c8ba:	2360      	movs	r3, #96	; 0x60
    c8bc:	8013      	strh	r3, [r2, #0]
        break;
    }
}
    c8be:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL2_MIN;
    c8c0:	23a0      	movs	r3, #160	; 0xa0
    c8c2:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL2_MAX;
    c8c4:	23f0      	movs	r3, #240	; 0xf0
    c8c6:	8013      	strh	r3, [r2, #0]
        break;
    c8c8:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
    c8ca:	2330      	movs	r3, #48	; 0x30
    c8cc:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
    c8ce:	2360      	movs	r3, #96	; 0x60
    c8d0:	8013      	strh	r3, [r2, #0]
        break;
    c8d2:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
    c8d4:	2330      	movs	r3, #48	; 0x30
    c8d6:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
    c8d8:	2360      	movs	r3, #96	; 0x60
    c8da:	8013      	strh	r3, [r2, #0]
        break;
    c8dc:	4770      	bx	lr
	...

0000c8e0 <ble_gap_update_entry_find>:
}

static struct ble_gap_update_entry *
ble_gap_update_entry_find(uint16_t conn_handle,
                          struct ble_gap_update_entry **out_prev)
{
    c8e0:	b410      	push	{r4}
    struct ble_gap_update_entry *prev;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    prev = NULL;
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
    c8e2:	4b08      	ldr	r3, [pc, #32]	; (c904 <ble_gap_update_entry_find+0x24>)
    c8e4:	681b      	ldr	r3, [r3, #0]
    prev = NULL;
    c8e6:	2400      	movs	r4, #0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
    c8e8:	b12b      	cbz	r3, c8f6 <ble_gap_update_entry_find+0x16>
        if (entry->conn_handle == conn_handle) {
    c8ea:	8a9a      	ldrh	r2, [r3, #20]
    c8ec:	4282      	cmp	r2, r0
    c8ee:	d002      	beq.n	c8f6 <ble_gap_update_entry_find+0x16>
            break;
        }

        prev = entry;
    c8f0:	461c      	mov	r4, r3
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
    c8f2:	681b      	ldr	r3, [r3, #0]
    c8f4:	e7f8      	b.n	c8e8 <ble_gap_update_entry_find+0x8>
    }

    if (out_prev != NULL) {
    c8f6:	b101      	cbz	r1, c8fa <ble_gap_update_entry_find+0x1a>
        *out_prev = prev;
    c8f8:	600c      	str	r4, [r1, #0]
    }

    return entry;
}
    c8fa:	4618      	mov	r0, r3
    c8fc:	f85d 4b04 	ldr.w	r4, [sp], #4
    c900:	4770      	bx	lr
    c902:	bf00      	nop
    c904:	20007098 	.word	0x20007098

0000c908 <ble_gap_validate_conn_params>:
static bool
ble_gap_validate_conn_params(const struct ble_gap_upd_params *params)
{

    /* Requirements from Bluetooth spec. v4.2 [Vol 2, Part E], 7.8.18 */
    if (params->itvl_min > params->itvl_max) {
    c908:	8802      	ldrh	r2, [r0, #0]
    c90a:	8843      	ldrh	r3, [r0, #2]
    c90c:	429a      	cmp	r2, r3
    c90e:	d816      	bhi.n	c93e <ble_gap_validate_conn_params+0x36>
        return false;
    }

    if (params->itvl_min < 0x0006 || params->itvl_max > 0x0C80) {
    c910:	2a05      	cmp	r2, #5
    c912:	d916      	bls.n	c942 <ble_gap_validate_conn_params+0x3a>
    c914:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    c918:	d815      	bhi.n	c946 <ble_gap_validate_conn_params+0x3e>
        return false;
    }

    if (params->latency > 0x01F3) {
    c91a:	8882      	ldrh	r2, [r0, #4]
    c91c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    c920:	d213      	bcs.n	c94a <ble_gap_validate_conn_params+0x42>
    /* According to specification mentioned above we should make sure that:
     * supervision_timeout_ms > (1 + latency) * 2 * max_interval_ms
     *    =>
     * supervision_timeout * 10 ms > (1 + latency) * 2 * itvl_max * 1.25ms
     */
    if (params->supervision_timeout <=
    c922:	88c1      	ldrh	r1, [r0, #6]
                   (((1 + params->latency) * params->itvl_max) / 4)) {
    c924:	fb02 3303 	mla	r3, r2, r3, r3
    c928:	2b00      	cmp	r3, #0
    c92a:	db04      	blt.n	c936 <ble_gap_validate_conn_params+0x2e>
    if (params->supervision_timeout <=
    c92c:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
    c930:	dd03      	ble.n	c93a <ble_gap_validate_conn_params+0x32>
        return false;
    }

    return true;
    c932:	2001      	movs	r0, #1
}
    c934:	4770      	bx	lr
                   (((1 + params->latency) * params->itvl_max) / 4)) {
    c936:	3303      	adds	r3, #3
    c938:	e7f8      	b.n	c92c <ble_gap_validate_conn_params+0x24>
        return false;
    c93a:	2000      	movs	r0, #0
    c93c:	4770      	bx	lr
        return false;
    c93e:	2000      	movs	r0, #0
    c940:	4770      	bx	lr
        return false;
    c942:	2000      	movs	r0, #0
    c944:	4770      	bx	lr
    c946:	2000      	movs	r0, #0
    c948:	4770      	bx	lr
        return false;
    c94a:	2000      	movs	r0, #0
    c94c:	4770      	bx	lr
	...

0000c950 <ble_gap_event_listener_call>:
    return rc;
}

static int
ble_gap_event_listener_call(struct ble_gap_event *event)
{
    c950:	b538      	push	{r3, r4, r5, lr}
    c952:	4605      	mov	r5, r0
    struct ble_gap_event_listener *evl = NULL;

    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
    c954:	4b05      	ldr	r3, [pc, #20]	; (c96c <ble_gap_event_listener_call+0x1c>)
    c956:	681c      	ldr	r4, [r3, #0]
    c958:	e004      	b.n	c964 <ble_gap_event_listener_call+0x14>
        evl->fn(event, evl->arg);
    c95a:	6823      	ldr	r3, [r4, #0]
    c95c:	6861      	ldr	r1, [r4, #4]
    c95e:	4628      	mov	r0, r5
    c960:	4798      	blx	r3
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
    c962:	68a4      	ldr	r4, [r4, #8]
    c964:	2c00      	cmp	r4, #0
    c966:	d1f8      	bne.n	c95a <ble_gap_event_listener_call+0xa>
    }

    return 0;
}
    c968:	2000      	movs	r0, #0
    c96a:	bd38      	pop	{r3, r4, r5, pc}
    c96c:	20007094 	.word	0x20007094

0000c970 <ble_gap_extract_conn_cb>:
{
    c970:	b570      	push	{r4, r5, r6, lr}
    c972:	4604      	mov	r4, r0
    c974:	460e      	mov	r6, r1
    c976:	4615      	mov	r5, r2
    ble_hs_lock();
    c978:	f003 f906 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    c97c:	4620      	mov	r0, r4
    c97e:	f003 ff0d 	bl	1079c <ble_hs_conn_find>
    if (conn != NULL) {
    c982:	4604      	mov	r4, r0
    c984:	b140      	cbz	r0, c998 <ble_gap_extract_conn_cb+0x28>
        *out_cb = conn->bhc_cb;
    c986:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    c988:	6033      	str	r3, [r6, #0]
        *out_cb_arg = conn->bhc_cb_arg;
    c98a:	6e03      	ldr	r3, [r0, #96]	; 0x60
    c98c:	602b      	str	r3, [r5, #0]
    ble_hs_unlock();
    c98e:	f003 f8ff 	bl	fb90 <ble_hs_unlock>
    if (conn == NULL) {
    c992:	b12c      	cbz	r4, c9a0 <ble_gap_extract_conn_cb+0x30>
        return 0;
    c994:	2000      	movs	r0, #0
}
    c996:	bd70      	pop	{r4, r5, r6, pc}
        *out_cb = NULL;
    c998:	2300      	movs	r3, #0
    c99a:	6033      	str	r3, [r6, #0]
        *out_cb_arg = NULL;
    c99c:	602b      	str	r3, [r5, #0]
    c99e:	e7f6      	b.n	c98e <ble_gap_extract_conn_cb+0x1e>
        return BLE_HS_ENOTCONN;
    c9a0:	2007      	movs	r0, #7
    c9a2:	e7f8      	b.n	c996 <ble_gap_extract_conn_cb+0x26>

0000c9a4 <ble_gap_call_conn_event_cb>:
{
    c9a4:	b510      	push	{r4, lr}
    c9a6:	b082      	sub	sp, #8
    c9a8:	4604      	mov	r4, r0
    c9aa:	4608      	mov	r0, r1
    rc = ble_gap_extract_conn_cb(conn_handle, &cb, &cb_arg);
    c9ac:	466a      	mov	r2, sp
    c9ae:	a901      	add	r1, sp, #4
    c9b0:	f7ff ffde 	bl	c970 <ble_gap_extract_conn_cb>
    if (rc != 0) {
    c9b4:	4603      	mov	r3, r0
    c9b6:	b110      	cbz	r0, c9be <ble_gap_call_conn_event_cb+0x1a>
}
    c9b8:	4618      	mov	r0, r3
    c9ba:	b002      	add	sp, #8
    c9bc:	bd10      	pop	{r4, pc}
    rc = ble_gap_call_event_cb(event, cb, cb_arg);
    c9be:	9a00      	ldr	r2, [sp, #0]
    c9c0:	9901      	ldr	r1, [sp, #4]
    c9c2:	4620      	mov	r0, r4
    c9c4:	f7ff fef2 	bl	c7ac <ble_gap_call_event_cb>
    c9c8:	4603      	mov	r3, r0
    c9ca:	e7f5      	b.n	c9b8 <ble_gap_call_conn_event_cb+0x14>

0000c9cc <ble_gap_fill_conn_desc>:
{
    c9cc:	b570      	push	{r4, r5, r6, lr}
    c9ce:	b088      	sub	sp, #32
    c9d0:	4605      	mov	r5, r0
    c9d2:	460c      	mov	r4, r1
    ble_hs_conn_addrs(conn, &addrs);
    c9d4:	ae01      	add	r6, sp, #4
    c9d6:	4631      	mov	r1, r6
    c9d8:	f003 ff18 	bl	1080c <ble_hs_conn_addrs>
    desc->our_id_addr = addrs.our_id_addr;
    c9dc:	e896 0003 	ldmia.w	r6, {r0, r1}
    c9e0:	6060      	str	r0, [r4, #4]
    c9e2:	f104 0308 	add.w	r3, r4, #8
    c9e6:	f823 1b02 	strh.w	r1, [r3], #2
    c9ea:	0c09      	lsrs	r1, r1, #16
    c9ec:	7019      	strb	r1, [r3, #0]
    desc->peer_id_addr = addrs.peer_id_addr;
    c9ee:	ab08      	add	r3, sp, #32
    c9f0:	f853 1d15 	ldr.w	r1, [r3, #-21]!
    c9f4:	f8c4 100b 	str.w	r1, [r4, #11]
    c9f8:	8899      	ldrh	r1, [r3, #4]
    c9fa:	799b      	ldrb	r3, [r3, #6]
    c9fc:	f8a4 100f 	strh.w	r1, [r4, #15]
    ca00:	7463      	strb	r3, [r4, #17]
    desc->our_ota_addr = addrs.our_ota_addr;
    ca02:	ab08      	add	r3, sp, #32
    ca04:	f853 1d0e 	ldr.w	r1, [r3, #-14]!
    ca08:	f8c4 1012 	str.w	r1, [r4, #18]
    ca0c:	8899      	ldrh	r1, [r3, #4]
    ca0e:	799b      	ldrb	r3, [r3, #6]
    ca10:	82e1      	strh	r1, [r4, #22]
    ca12:	7623      	strb	r3, [r4, #24]
    desc->peer_ota_addr = addrs.peer_ota_addr;
    ca14:	ab08      	add	r3, sp, #32
    ca16:	f853 1d07 	ldr.w	r1, [r3, #-7]!
    ca1a:	f8c4 1019 	str.w	r1, [r4, #25]
    ca1e:	8899      	ldrh	r1, [r3, #4]
    ca20:	799b      	ldrb	r3, [r3, #6]
    ca22:	f8a4 101d 	strh.w	r1, [r4, #29]
    ca26:	77e3      	strb	r3, [r4, #31]
    desc->conn_handle = conn->bhc_handle;
    ca28:	88ab      	ldrh	r3, [r5, #4]
    ca2a:	8423      	strh	r3, [r4, #32]
    desc->conn_itvl = conn->bhc_itvl;
    ca2c:	8bab      	ldrh	r3, [r5, #28]
    ca2e:	8463      	strh	r3, [r4, #34]	; 0x22
    desc->conn_latency = conn->bhc_latency;
    ca30:	8beb      	ldrh	r3, [r5, #30]
    ca32:	84a3      	strh	r3, [r4, #36]	; 0x24
    desc->supervision_timeout = conn->bhc_supervision_timeout;
    ca34:	8c2b      	ldrh	r3, [r5, #32]
    ca36:	84e3      	strh	r3, [r4, #38]	; 0x26
    desc->master_clock_accuracy = conn->bhc_master_clock_accuracy;
    ca38:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
    ca3c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    desc->sec_state = conn->bhc_sec_state;
    ca40:	6dab      	ldr	r3, [r5, #88]	; 0x58
    ca42:	6023      	str	r3, [r4, #0]
    if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
    ca44:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    ca48:	f013 0f01 	tst.w	r3, #1
    ca4c:	d104      	bne.n	ca58 <ble_gap_fill_conn_desc+0x8c>
        desc->role = BLE_GAP_ROLE_SLAVE;
    ca4e:	2301      	movs	r3, #1
    ca50:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
    ca54:	b008      	add	sp, #32
    ca56:	bd70      	pop	{r4, r5, r6, pc}
        desc->role = BLE_GAP_ROLE_MASTER;
    ca58:	2300      	movs	r3, #0
    ca5a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    ca5e:	e7f9      	b.n	ca54 <ble_gap_fill_conn_desc+0x88>

0000ca60 <ble_gap_conn_to_snapshot>:
{
    ca60:	b538      	push	{r3, r4, r5, lr}
    ca62:	4605      	mov	r5, r0
    ca64:	460c      	mov	r4, r1
    ble_gap_fill_conn_desc(conn, snap->desc);
    ca66:	6809      	ldr	r1, [r1, #0]
    ca68:	f7ff ffb0 	bl	c9cc <ble_gap_fill_conn_desc>
    snap->cb = conn->bhc_cb;
    ca6c:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    ca6e:	6063      	str	r3, [r4, #4]
    snap->cb_arg = conn->bhc_cb_arg;
    ca70:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    ca72:	60a3      	str	r3, [r4, #8]
}
    ca74:	bd38      	pop	{r3, r4, r5, pc}

0000ca76 <ble_gap_find_snapshot>:
{
    ca76:	b538      	push	{r3, r4, r5, lr}
    ca78:	4604      	mov	r4, r0
    ca7a:	460d      	mov	r5, r1
    ble_hs_lock();
    ca7c:	f003 f884 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
    ca80:	4620      	mov	r0, r4
    ca82:	f003 fe8b 	bl	1079c <ble_hs_conn_find>
    if (conn != NULL) {
    ca86:	4604      	mov	r4, r0
    ca88:	b110      	cbz	r0, ca90 <ble_gap_find_snapshot+0x1a>
        ble_gap_conn_to_snapshot(conn, snap);
    ca8a:	4629      	mov	r1, r5
    ca8c:	f7ff ffe8 	bl	ca60 <ble_gap_conn_to_snapshot>
    ble_hs_unlock();
    ca90:	f003 f87e 	bl	fb90 <ble_hs_unlock>
    if (conn == NULL) {
    ca94:	b10c      	cbz	r4, ca9a <ble_gap_find_snapshot+0x24>
        return 0;
    ca96:	2000      	movs	r0, #0
}
    ca98:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
    ca9a:	2007      	movs	r0, #7
    ca9c:	e7fc      	b.n	ca98 <ble_gap_find_snapshot+0x22>

0000ca9e <ble_gap_rd_rem_sup_feat_tx>:
{
    ca9e:	b500      	push	{lr}
    caa0:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(handle);
    caa2:	a904      	add	r1, sp, #16
    caa4:	f821 0d04 	strh.w	r0, [r1, #-4]!
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
    caa8:	2300      	movs	r3, #0
    caaa:	9300      	str	r3, [sp, #0]
    caac:	2202      	movs	r2, #2
    caae:	f242 0016 	movw	r0, #8214	; 0x2016
    cab2:	f004 f8bf 	bl	10c34 <ble_hs_hci_cmd_tx>
}
    cab6:	b005      	add	sp, #20
    cab8:	f85d fb04 	ldr.w	pc, [sp], #4

0000cabc <ble_gap_conn_cancel_tx>:
{
    cabc:	b500      	push	{lr}
    cabe:	b083      	sub	sp, #12
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
    cac0:	2100      	movs	r1, #0
    cac2:	9100      	str	r1, [sp, #0]
    cac4:	460b      	mov	r3, r1
    cac6:	460a      	mov	r2, r1
    cac8:	f242 000e 	movw	r0, #8206	; 0x200e
    cacc:	f004 f8b2 	bl	10c34 <ble_hs_hci_cmd_tx>
}
    cad0:	b003      	add	sp, #12
    cad2:	f85d fb04 	ldr.w	pc, [sp], #4

0000cad6 <ble_gap_adv_enable_tx>:
{
    cad6:	b500      	push	{lr}
    cad8:	b085      	sub	sp, #20
    cmd.enable = !!enable;
    cada:	3000      	adds	r0, #0
    cadc:	bf18      	it	ne
    cade:	2001      	movne	r0, #1
    cae0:	a904      	add	r1, sp, #16
    cae2:	f801 0d04 	strb.w	r0, [r1, #-4]!
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
    cae6:	2300      	movs	r3, #0
    cae8:	9300      	str	r3, [sp, #0]
    caea:	2201      	movs	r2, #1
    caec:	f242 000a 	movw	r0, #8202	; 0x200a
    caf0:	f004 f8a0 	bl	10c34 <ble_hs_hci_cmd_tx>
}
    caf4:	b005      	add	sp, #20
    caf6:	f85d fb04 	ldr.w	pc, [sp], #4

0000cafa <ble_gap_adv_params_tx>:
{
    cafa:	b570      	push	{r4, r5, r6, lr}
    cafc:	b08a      	sub	sp, #40	; 0x28
    cafe:	4606      	mov	r6, r0
    cb00:	460c      	mov	r4, r1
    cb02:	4615      	mov	r5, r2
    const ble_addr_t *peer_any = BLE_ADDR_ANY;
    cb04:	2300      	movs	r3, #0
    cb06:	9308      	str	r3, [sp, #32]
    cb08:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    if ((adv_params->itvl_min == 0) && (adv_params->itvl_max == 0)) {
    cb0c:	8853      	ldrh	r3, [r2, #2]
    cb0e:	b90b      	cbnz	r3, cb14 <ble_gap_adv_params_tx+0x1a>
    cb10:	8892      	ldrh	r2, [r2, #4]
    cb12:	b33a      	cbz	r2, cb64 <ble_gap_adv_params_tx+0x6a>
        cmd.min_interval = htole16(adv_params->itvl_min);
    cb14:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(adv_params->itvl_max);
    cb18:	88ab      	ldrh	r3, [r5, #4]
    cb1a:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.type = ble_gap_adv_type(adv_params);
    cb1e:	4628      	mov	r0, r5
    cb20:	f7ff feb0 	bl	c884 <ble_gap_adv_type>
    cb24:	f88d 0014 	strb.w	r0, [sp, #20]
    cmd.own_addr_type = own_addr_type;
    cb28:	f88d 6015 	strb.w	r6, [sp, #21]
    if (peer_addr == NULL) {
    cb2c:	b34c      	cbz	r4, cb82 <ble_gap_adv_params_tx+0x88>
    cmd.peer_addr_type = peer_addr->type;
    cb2e:	7823      	ldrb	r3, [r4, #0]
    cb30:	f88d 3016 	strb.w	r3, [sp, #22]
    memcpy(&cmd.peer_addr, peer_addr->val, sizeof(cmd.peer_addr));
    cb34:	f854 3f01 	ldr.w	r3, [r4, #1]!
    cb38:	f8cd 3017 	str.w	r3, [sp, #23]
    cb3c:	88a3      	ldrh	r3, [r4, #4]
    cb3e:	f8ad 301b 	strh.w	r3, [sp, #27]
    if (adv_params->channel_map == 0) {
    cb42:	79ab      	ldrb	r3, [r5, #6]
    cb44:	b1fb      	cbz	r3, cb86 <ble_gap_adv_params_tx+0x8c>
        cmd.chan_map = adv_params->channel_map;
    cb46:	f88d 301d 	strb.w	r3, [sp, #29]
    cmd.filter_policy = adv_params->filter_policy;
    cb4a:	79eb      	ldrb	r3, [r5, #7]
    cb4c:	f88d 301e 	strb.w	r3, [sp, #30]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
    cb50:	2300      	movs	r3, #0
    cb52:	9300      	str	r3, [sp, #0]
    cb54:	220f      	movs	r2, #15
    cb56:	a904      	add	r1, sp, #16
    cb58:	f242 0006 	movw	r0, #8198	; 0x2006
    cb5c:	f004 f86a 	bl	10c34 <ble_hs_hci_cmd_tx>
}
    cb60:	b00a      	add	sp, #40	; 0x28
    cb62:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_adv_dflt_itvls(adv_params->conn_mode, &min, &max);
    cb64:	aa03      	add	r2, sp, #12
    cb66:	f10d 010e 	add.w	r1, sp, #14
    cb6a:	7828      	ldrb	r0, [r5, #0]
    cb6c:	f7ff fe9e 	bl	c8ac <ble_gap_adv_dflt_itvls>
        cmd.min_interval = htole16(min);
    cb70:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    cb74:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(max);
    cb78:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    cb7c:	f8ad 3012 	strh.w	r3, [sp, #18]
    cb80:	e7cd      	b.n	cb1e <ble_gap_adv_params_tx+0x24>
        peer_addr = peer_any;
    cb82:	ac08      	add	r4, sp, #32
    cb84:	e7d3      	b.n	cb2e <ble_gap_adv_params_tx+0x34>
        cmd.chan_map = BLE_GAP_ADV_DFLT_CHANNEL_MAP;
    cb86:	2307      	movs	r3, #7
    cb88:	f88d 301d 	strb.w	r3, [sp, #29]
    cb8c:	e7dd      	b.n	cb4a <ble_gap_adv_params_tx+0x50>

0000cb8e <ble_gap_tx_param_pos_reply>:
{
    cb8e:	b500      	push	{lr}
    cb90:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
    cb92:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
    cb96:	880b      	ldrh	r3, [r1, #0]
    cb98:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
    cb9c:	884b      	ldrh	r3, [r1, #2]
    cb9e:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
    cba2:	888b      	ldrh	r3, [r1, #4]
    cba4:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
    cba8:	88cb      	ldrh	r3, [r1, #6]
    cbaa:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce = htole16(params->min_ce_len);
    cbae:	890b      	ldrh	r3, [r1, #8]
    cbb0:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce = htole16(params->max_ce_len);
    cbb4:	894b      	ldrh	r3, [r1, #10]
    cbb6:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
    cbba:	2300      	movs	r3, #0
    cbbc:	9300      	str	r3, [sp, #0]
    cbbe:	220e      	movs	r2, #14
    cbc0:	a902      	add	r1, sp, #8
    cbc2:	f242 0020 	movw	r0, #8224	; 0x2020
    cbc6:	f004 f835 	bl	10c34 <ble_hs_hci_cmd_tx>
}
    cbca:	b007      	add	sp, #28
    cbcc:	f85d fb04 	ldr.w	pc, [sp], #4

0000cbd0 <ble_gap_tx_param_neg_reply>:
{
    cbd0:	b500      	push	{lr}
    cbd2:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(conn_handle);
    cbd4:	f8ad 000c 	strh.w	r0, [sp, #12]
    cmd.reason = reject_reason;
    cbd8:	f88d 100e 	strb.w	r1, [sp, #14]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
    cbdc:	2300      	movs	r3, #0
    cbde:	9300      	str	r3, [sp, #0]
    cbe0:	2203      	movs	r2, #3
    cbe2:	a903      	add	r1, sp, #12
    cbe4:	f242 0021 	movw	r0, #8225	; 0x2021
    cbe8:	f004 f824 	bl	10c34 <ble_hs_hci_cmd_tx>
}
    cbec:	b005      	add	sp, #20
    cbee:	f85d fb04 	ldr.w	pc, [sp], #4

0000cbf2 <ble_gap_update_tx>:
{
    cbf2:	b500      	push	{lr}
    cbf4:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
    cbf6:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
    cbfa:	880b      	ldrh	r3, [r1, #0]
    cbfc:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
    cc00:	884b      	ldrh	r3, [r1, #2]
    cc02:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
    cc06:	888b      	ldrh	r3, [r1, #4]
    cc08:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
    cc0c:	88cb      	ldrh	r3, [r1, #6]
    cc0e:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce_len = htole16(params->min_ce_len);
    cc12:	890b      	ldrh	r3, [r1, #8]
    cc14:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce_len = htole16(params->max_ce_len);
    cc18:	894b      	ldrh	r3, [r1, #10]
    cc1a:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
    cc1e:	2300      	movs	r3, #0
    cc20:	9300      	str	r3, [sp, #0]
    cc22:	220e      	movs	r2, #14
    cc24:	a902      	add	r1, sp, #8
    cc26:	f242 0013 	movw	r0, #8211	; 0x2013
    cc2a:	f004 f803 	bl	10c34 <ble_hs_hci_cmd_tx>
}
    cc2e:	b007      	add	sp, #28
    cc30:	f85d fb04 	ldr.w	pc, [sp], #4

0000cc34 <ble_gap_update_entry_remove>:
{
    cc34:	b510      	push	{r4, lr}
    cc36:	b082      	sub	sp, #8
    entry = ble_gap_update_entry_find(conn_handle, &prev);
    cc38:	a901      	add	r1, sp, #4
    cc3a:	f7ff fe51 	bl	c8e0 <ble_gap_update_entry_find>
    if (entry != NULL) {
    cc3e:	4604      	mov	r4, r0
    cc40:	b128      	cbz	r0, cc4e <ble_gap_update_entry_remove+0x1a>
        if (prev == NULL) {
    cc42:	9b01      	ldr	r3, [sp, #4]
    cc44:	b133      	cbz	r3, cc54 <ble_gap_update_entry_remove+0x20>
            SLIST_NEXT(prev, next) = SLIST_NEXT(entry, next);
    cc46:	6802      	ldr	r2, [r0, #0]
    cc48:	601a      	str	r2, [r3, #0]
        ble_hs_timer_resched();
    cc4a:	f003 f879 	bl	fd40 <ble_hs_timer_resched>
}
    cc4e:	4620      	mov	r0, r4
    cc50:	b002      	add	sp, #8
    cc52:	bd10      	pop	{r4, pc}
            SLIST_REMOVE_HEAD(&ble_gap_update_entries, next);
    cc54:	4b02      	ldr	r3, [pc, #8]	; (cc60 <ble_gap_update_entry_remove+0x2c>)
    cc56:	681a      	ldr	r2, [r3, #0]
    cc58:	6812      	ldr	r2, [r2, #0]
    cc5a:	601a      	str	r2, [r3, #0]
    cc5c:	e7f5      	b.n	cc4a <ble_gap_update_entry_remove+0x16>
    cc5e:	bf00      	nop
    cc60:	20007098 	.word	0x20007098

0000cc64 <ble_gap_slave_reset_state>:
{
    cc64:	b508      	push	{r3, lr}
    ble_gap_slave[instance].op = BLE_GAP_OP_NULL;
    cc66:	4b06      	ldr	r3, [pc, #24]	; (cc80 <ble_gap_slave_reset_state+0x1c>)
    cc68:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    cc6c:	2100      	movs	r1, #0
    cc6e:	7501      	strb	r1, [r0, #20]
    ble_gap_slave[instance].exp_set = 0;
    cc70:	7d42      	ldrb	r2, [r0, #21]
    cc72:	f361 1204 	bfi	r2, r1, #4, #1
    cc76:	7542      	strb	r2, [r0, #21]
    ble_hs_timer_resched();
    cc78:	f003 f862 	bl	fd40 <ble_hs_timer_resched>
}
    cc7c:	bd08      	pop	{r3, pc}
    cc7e:	bf00      	nop
    cc80:	200004b8 	.word	0x200004b8

0000cc84 <ble_gap_slave_extract_cb>:
{
    cc84:	b570      	push	{r4, r5, r6, lr}
    cc86:	4604      	mov	r4, r0
    cc88:	460e      	mov	r6, r1
    cc8a:	4615      	mov	r5, r2
    ble_hs_lock();
    cc8c:	f002 ff7c 	bl	fb88 <ble_hs_lock>
    *out_cb = ble_gap_slave[instance].cb;
    cc90:	4b06      	ldr	r3, [pc, #24]	; (ccac <ble_gap_slave_extract_cb+0x28>)
    cc92:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    cc96:	69da      	ldr	r2, [r3, #28]
    cc98:	6032      	str	r2, [r6, #0]
    *out_cb_arg = ble_gap_slave[instance].cb_arg;
    cc9a:	6a1b      	ldr	r3, [r3, #32]
    cc9c:	602b      	str	r3, [r5, #0]
    ble_gap_slave_reset_state(instance);
    cc9e:	4620      	mov	r0, r4
    cca0:	f7ff ffe0 	bl	cc64 <ble_gap_slave_reset_state>
    ble_hs_unlock();
    cca4:	f002 ff74 	bl	fb90 <ble_hs_unlock>
}
    cca8:	bd70      	pop	{r4, r5, r6, pc}
    ccaa:	bf00      	nop
    ccac:	200004b8 	.word	0x200004b8

0000ccb0 <ble_gap_adv_finished>:
{
    ccb0:	b530      	push	{r4, r5, lr}
    ccb2:	b091      	sub	sp, #68	; 0x44
    ccb4:	4604      	mov	r4, r0
    ccb6:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
    ccb8:	2234      	movs	r2, #52	; 0x34
    ccba:	2100      	movs	r1, #0
    ccbc:	a803      	add	r0, sp, #12
    ccbe:	f7fe fe10 	bl	b8e2 <memset>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
    ccc2:	2309      	movs	r3, #9
    ccc4:	f88d 300c 	strb.w	r3, [sp, #12]
    event.adv_complete.reason = reason;
    ccc8:	9504      	str	r5, [sp, #16]
    ble_gap_event_listener_call(&event);
    ccca:	a803      	add	r0, sp, #12
    cccc:	f7ff fe40 	bl	c950 <ble_gap_event_listener_call>
    ble_gap_slave_extract_cb(instance, &cb, &cb_arg);
    ccd0:	aa01      	add	r2, sp, #4
    ccd2:	a902      	add	r1, sp, #8
    ccd4:	4620      	mov	r0, r4
    ccd6:	f7ff ffd5 	bl	cc84 <ble_gap_slave_extract_cb>
    if (cb != NULL) {
    ccda:	9b02      	ldr	r3, [sp, #8]
    ccdc:	b113      	cbz	r3, cce4 <ble_gap_adv_finished+0x34>
        cb(&event, cb_arg);
    ccde:	9901      	ldr	r1, [sp, #4]
    cce0:	a803      	add	r0, sp, #12
    cce2:	4798      	blx	r3
}
    cce4:	b011      	add	sp, #68	; 0x44
    cce6:	bd30      	pop	{r4, r5, pc}

0000cce8 <ble_gap_master_reset_state>:
{
    cce8:	b508      	push	{r3, lr}
    ble_gap_master.op = BLE_GAP_OP_NULL;
    ccea:	4b07      	ldr	r3, [pc, #28]	; (cd08 <ble_gap_master_reset_state+0x20>)
    ccec:	2200      	movs	r2, #0
    ccee:	701a      	strb	r2, [r3, #0]
    ble_gap_master.exp_set = 0;
    ccf0:	7859      	ldrb	r1, [r3, #1]
    ccf2:	f362 0100 	bfi	r1, r2, #0, #1
    ccf6:	7059      	strb	r1, [r3, #1]
    ble_gap_master.conn.cancel = 0;
    ccf8:	7c59      	ldrb	r1, [r3, #17]
    ccfa:	f362 01c3 	bfi	r1, r2, #3, #1
    ccfe:	7459      	strb	r1, [r3, #17]
    ble_hs_timer_resched();
    cd00:	f003 f81e 	bl	fd40 <ble_hs_timer_resched>
}
    cd04:	bd08      	pop	{r3, pc}
    cd06:	bf00      	nop
    cd08:	200004b8 	.word	0x200004b8

0000cd0c <ble_gap_master_extract_state>:
{
    cd0c:	b570      	push	{r4, r5, r6, lr}
    cd0e:	4604      	mov	r4, r0
    cd10:	460e      	mov	r6, r1
    ble_hs_lock();
    cd12:	f002 ff39 	bl	fb88 <ble_hs_lock>
    *out_state = ble_gap_master;
    cd16:	4d08      	ldr	r5, [pc, #32]	; (cd38 <ble_gap_master_extract_state+0x2c>)
    cd18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cd1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cd1c:	682b      	ldr	r3, [r5, #0]
    cd1e:	6023      	str	r3, [r4, #0]
    if (reset_state) {
    cd20:	b916      	cbnz	r6, cd28 <ble_gap_master_extract_state+0x1c>
    ble_hs_unlock();
    cd22:	f002 ff35 	bl	fb90 <ble_hs_unlock>
}
    cd26:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_master_reset_state();
    cd28:	f7ff ffde 	bl	cce8 <ble_gap_master_reset_state>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
    cd2c:	f1a5 0310 	sub.w	r3, r5, #16
    cd30:	2200      	movs	r2, #0
    cd32:	741a      	strb	r2, [r3, #16]
    cd34:	e7f5      	b.n	cd22 <ble_gap_master_extract_state+0x16>
    cd36:	bf00      	nop
    cd38:	200004b8 	.word	0x200004b8

0000cd3c <ble_gap_master_connect_failure>:
{
    cd3c:	b510      	push	{r4, lr}
    cd3e:	b092      	sub	sp, #72	; 0x48
    cd40:	4604      	mov	r4, r0
    ble_gap_master_extract_state(&state, 1);
    cd42:	2101      	movs	r1, #1
    cd44:	a80d      	add	r0, sp, #52	; 0x34
    cd46:	f7ff ffe1 	bl	cd0c <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
    cd4a:	a80d      	add	r0, sp, #52	; 0x34
    cd4c:	f7ff fd5a 	bl	c804 <ble_gap_has_client>
    cd50:	b910      	cbnz	r0, cd58 <ble_gap_master_connect_failure+0x1c>
        rc = 0;
    cd52:	2000      	movs	r0, #0
}
    cd54:	b012      	add	sp, #72	; 0x48
    cd56:	bd10      	pop	{r4, pc}
        memset(&event, 0, sizeof event);
    cd58:	2234      	movs	r2, #52	; 0x34
    cd5a:	2100      	movs	r1, #0
    cd5c:	4668      	mov	r0, sp
    cd5e:	f7fe fdc0 	bl	b8e2 <memset>
        event.connect.status = status;
    cd62:	9401      	str	r4, [sp, #4]
        rc = state.cb(&event, state.cb_arg);
    cd64:	9910      	ldr	r1, [sp, #64]	; 0x40
    cd66:	4668      	mov	r0, sp
    cd68:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cd6a:	4798      	blx	r3
    cd6c:	e7f2      	b.n	cd54 <ble_gap_master_connect_failure+0x18>
	...

0000cd70 <ble_gap_master_failed>:
{
    cd70:	b508      	push	{r3, lr}
    switch (ble_gap_master.op) {
    cd72:	4b04      	ldr	r3, [pc, #16]	; (cd84 <ble_gap_master_failed+0x14>)
    cd74:	781b      	ldrb	r3, [r3, #0]
    cd76:	2b02      	cmp	r3, #2
    cd78:	d000      	beq.n	cd7c <ble_gap_master_failed+0xc>
}
    cd7a:	bd08      	pop	{r3, pc}
        ble_gap_master_connect_failure(status);
    cd7c:	f7ff ffde 	bl	cd3c <ble_gap_master_connect_failure>
}
    cd80:	e7fb      	b.n	cd7a <ble_gap_master_failed+0xa>
    cd82:	bf00      	nop
    cd84:	200004b8 	.word	0x200004b8

0000cd88 <ble_gap_master_connect_cancelled>:
{
    cd88:	b510      	push	{r4, lr}
    cd8a:	b092      	sub	sp, #72	; 0x48
    ble_gap_master_extract_state(&state, 1);
    cd8c:	2101      	movs	r1, #1
    cd8e:	a80d      	add	r0, sp, #52	; 0x34
    cd90:	f7ff ffbc 	bl	cd0c <ble_gap_master_extract_state>
    if (state.cb != NULL) {
    cd94:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    cd96:	b194      	cbz	r4, cdbe <ble_gap_master_connect_cancelled+0x36>
        memset(&event, 0, sizeof event);
    cd98:	2234      	movs	r2, #52	; 0x34
    cd9a:	2100      	movs	r1, #0
    cd9c:	4668      	mov	r0, sp
    cd9e:	f7fe fda0 	bl	b8e2 <memset>
        event.connect.conn_handle = BLE_HS_CONN_HANDLE_NONE;
    cda2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    cda6:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (state.conn.cancel) {
    cdaa:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    cdae:	f013 0f08 	tst.w	r3, #8
    cdb2:	d006      	beq.n	cdc2 <ble_gap_master_connect_cancelled+0x3a>
            event.connect.status = BLE_HS_EAPP;
    cdb4:	2309      	movs	r3, #9
    cdb6:	9301      	str	r3, [sp, #4]
        state.cb(&event, state.cb_arg);
    cdb8:	9910      	ldr	r1, [sp, #64]	; 0x40
    cdba:	4668      	mov	r0, sp
    cdbc:	47a0      	blx	r4
}
    cdbe:	b012      	add	sp, #72	; 0x48
    cdc0:	bd10      	pop	{r4, pc}
            event.connect.status = BLE_HS_ETIMEOUT;
    cdc2:	230d      	movs	r3, #13
    cdc4:	9301      	str	r3, [sp, #4]
    cdc6:	e7f7      	b.n	cdb8 <ble_gap_master_connect_cancelled+0x30>

0000cdc8 <ble_gap_update_entry_free>:
    if (entry != NULL) {
    cdc8:	b128      	cbz	r0, cdd6 <ble_gap_update_entry_free+0xe>
{
    cdca:	b508      	push	{r3, lr}
    cdcc:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_gap_update_entry_pool, entry);
    cdce:	4802      	ldr	r0, [pc, #8]	; (cdd8 <ble_gap_update_entry_free+0x10>)
    cdd0:	f7fd feef 	bl	abb2 <os_memblock_put>
}
    cdd4:	bd08      	pop	{r3, pc}
    cdd6:	4770      	bx	lr
    cdd8:	200070b4 	.word	0x200070b4

0000cddc <ble_gap_master_ticks_until_exp>:
    if (ble_gap_master.op == BLE_GAP_OP_NULL || !ble_gap_master.exp_set) {
    cddc:	4b0c      	ldr	r3, [pc, #48]	; (ce10 <ble_gap_master_ticks_until_exp+0x34>)
    cdde:	781b      	ldrb	r3, [r3, #0]
    cde0:	b16b      	cbz	r3, cdfe <ble_gap_master_ticks_until_exp+0x22>
    cde2:	4b0b      	ldr	r3, [pc, #44]	; (ce10 <ble_gap_master_ticks_until_exp+0x34>)
    cde4:	785b      	ldrb	r3, [r3, #1]
    cde6:	f013 0f01 	tst.w	r3, #1
    cdea:	d00b      	beq.n	ce04 <ble_gap_master_ticks_until_exp+0x28>
{
    cdec:	b510      	push	{r4, lr}
    ticks = ble_gap_master.exp_os_ticks - ble_npl_time_get();
    cdee:	4b08      	ldr	r3, [pc, #32]	; (ce10 <ble_gap_master_ticks_until_exp+0x34>)
    cdf0:	685c      	ldr	r4, [r3, #4]
}

static inline uint32_t
ble_npl_time_get(void)
{
    return os_time_get();
    cdf2:	f7fe fb61 	bl	b4b8 <os_time_get>
    cdf6:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
    cdf8:	2800      	cmp	r0, #0
    cdfa:	dd06      	ble.n	ce0a <ble_gap_master_ticks_until_exp+0x2e>
}
    cdfc:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
    cdfe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ce02:	4770      	bx	lr
    ce04:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
    ce08:	4770      	bx	lr
    return 0;
    ce0a:	2000      	movs	r0, #0
    ce0c:	e7f6      	b.n	cdfc <ble_gap_master_ticks_until_exp+0x20>
    ce0e:	bf00      	nop
    ce10:	200004b8 	.word	0x200004b8

0000ce14 <ble_gap_update_next_exp>:
{
    ce14:	b538      	push	{r3, r4, r5, lr}
    ce16:	4605      	mov	r5, r0
    ce18:	f7fe fb4e 	bl	b4b8 <os_time_get>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
    ce1c:	4b0b      	ldr	r3, [pc, #44]	; (ce4c <ble_gap_update_next_exp+0x38>)
    ce1e:	681a      	ldr	r2, [r3, #0]
    best_ticks = BLE_HS_FOREVER;
    ce20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    conn_handle = BLE_HS_CONN_HANDLE_NONE;
    ce24:	f64f 74ff 	movw	r4, #65535	; 0xffff
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
    ce28:	e002      	b.n	ce30 <ble_gap_update_next_exp+0x1c>
            ticks = 0;
    ce2a:	2300      	movs	r3, #0
    ce2c:	e005      	b.n	ce3a <ble_gap_update_next_exp+0x26>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
    ce2e:	6812      	ldr	r2, [r2, #0]
    ce30:	b142      	cbz	r2, ce44 <ble_gap_update_next_exp+0x30>
        ticks = entry->exp_os_ticks - now;
    ce32:	6913      	ldr	r3, [r2, #16]
    ce34:	1a1b      	subs	r3, r3, r0
        if (ticks <= 0) {
    ce36:	2b00      	cmp	r3, #0
    ce38:	ddf7      	ble.n	ce2a <ble_gap_update_next_exp+0x16>
        if (ticks < best_ticks) {
    ce3a:	4299      	cmp	r1, r3
    ce3c:	ddf7      	ble.n	ce2e <ble_gap_update_next_exp+0x1a>
            conn_handle = entry->conn_handle;
    ce3e:	8a94      	ldrh	r4, [r2, #20]
            best_ticks = ticks;
    ce40:	4619      	mov	r1, r3
    ce42:	e7f4      	b.n	ce2e <ble_gap_update_next_exp+0x1a>
    if (out_ticks_from_now != NULL) {
    ce44:	b105      	cbz	r5, ce48 <ble_gap_update_next_exp+0x34>
        *out_ticks_from_now = best_ticks;
    ce46:	6029      	str	r1, [r5, #0]
}
    ce48:	4620      	mov	r0, r4
    ce4a:	bd38      	pop	{r3, r4, r5, pc}
    ce4c:	20007098 	.word	0x20007098

0000ce50 <ble_gap_update_timer>:
{
    ce50:	b510      	push	{r4, lr}
    ce52:	b082      	sub	sp, #8
    ce54:	e003      	b.n	ce5e <ble_gap_update_timer+0xe>
        ble_hs_unlock();
    ce56:	f002 fe9b 	bl	fb90 <ble_hs_unlock>
            entry = NULL;
    ce5a:	2400      	movs	r4, #0
    } while (entry != NULL);
    ce5c:	b194      	cbz	r4, ce84 <ble_gap_update_timer+0x34>
        ble_hs_lock();
    ce5e:	f002 fe93 	bl	fb88 <ble_hs_lock>
        conn_handle = ble_gap_update_next_exp(&ticks_until_exp);
    ce62:	a801      	add	r0, sp, #4
    ce64:	f7ff ffd6 	bl	ce14 <ble_gap_update_next_exp>
        if (ticks_until_exp == 0) {
    ce68:	9b01      	ldr	r3, [sp, #4]
    ce6a:	2b00      	cmp	r3, #0
    ce6c:	d1f3      	bne.n	ce56 <ble_gap_update_timer+0x6>
            entry = ble_gap_update_entry_remove(conn_handle);
    ce6e:	f7ff fee1 	bl	cc34 <ble_gap_update_entry_remove>
    ce72:	4604      	mov	r4, r0
        ble_hs_unlock();
    ce74:	f002 fe8c 	bl	fb90 <ble_hs_unlock>
        if (entry != NULL) {
    ce78:	2c00      	cmp	r4, #0
    ce7a:	d0ef      	beq.n	ce5c <ble_gap_update_timer+0xc>
            ble_gap_update_entry_free(entry);
    ce7c:	4620      	mov	r0, r4
    ce7e:	f7ff ffa3 	bl	cdc8 <ble_gap_update_entry_free>
    ce82:	e7eb      	b.n	ce5c <ble_gap_update_timer+0xc>
}
    ce84:	9801      	ldr	r0, [sp, #4]
    ce86:	b002      	add	sp, #8
    ce88:	bd10      	pop	{r4, pc}
	...

0000ce8c <ble_gap_slave_ticks_until_exp>:
    if (ble_gap_slave[0].op == BLE_GAP_OP_NULL || !ble_gap_slave[0].exp_set) {
    ce8c:	4b0c      	ldr	r3, [pc, #48]	; (cec0 <ble_gap_slave_ticks_until_exp+0x34>)
    ce8e:	7d1b      	ldrb	r3, [r3, #20]
    ce90:	b16b      	cbz	r3, ceae <ble_gap_slave_ticks_until_exp+0x22>
    ce92:	4b0b      	ldr	r3, [pc, #44]	; (cec0 <ble_gap_slave_ticks_until_exp+0x34>)
    ce94:	7d5b      	ldrb	r3, [r3, #21]
    ce96:	f013 0f10 	tst.w	r3, #16
    ce9a:	d00b      	beq.n	ceb4 <ble_gap_slave_ticks_until_exp+0x28>
{
    ce9c:	b510      	push	{r4, lr}
    ticks = ble_gap_slave[0].exp_os_ticks - ble_npl_time_get();
    ce9e:	4b08      	ldr	r3, [pc, #32]	; (cec0 <ble_gap_slave_ticks_until_exp+0x34>)
    cea0:	699c      	ldr	r4, [r3, #24]
    cea2:	f7fe fb09 	bl	b4b8 <os_time_get>
    cea6:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
    cea8:	2800      	cmp	r0, #0
    ceaa:	dd06      	ble.n	ceba <ble_gap_slave_ticks_until_exp+0x2e>
}
    ceac:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
    ceae:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ceb2:	4770      	bx	lr
    ceb4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
    ceb8:	4770      	bx	lr
    return 0;
    ceba:	2000      	movs	r0, #0
    cebc:	e7f6      	b.n	ceac <ble_gap_slave_ticks_until_exp+0x20>
    cebe:	bf00      	nop
    cec0:	200004b8 	.word	0x200004b8

0000cec4 <ble_gap_slave_timer>:
{
    cec4:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_slave_ticks_until_exp();
    cec6:	f7ff ffe1 	bl	ce8c <ble_gap_slave_ticks_until_exp>
    if (ticks_until_exp != 0) {
    ceca:	b100      	cbz	r0, cece <ble_gap_slave_timer+0xa>
}
    cecc:	bd08      	pop	{r3, pc}
    rc = ble_gap_adv_enable_tx(0);
    cece:	2000      	movs	r0, #0
    ced0:	f7ff fe01 	bl	cad6 <ble_gap_adv_enable_tx>
    if (rc != 0) {
    ced4:	b108      	cbz	r0, ceda <ble_gap_slave_timer+0x16>
        return 100;
    ced6:	2064      	movs	r0, #100	; 0x64
    ced8:	e7f8      	b.n	cecc <ble_gap_slave_timer+0x8>
    ble_gap_slave_reset_state(0);
    ceda:	f7ff fec3 	bl	cc64 <ble_gap_slave_reset_state>
    ble_gap_adv_finished(0, BLE_HS_ETIMEOUT, 0, 0);
    cede:	2300      	movs	r3, #0
    cee0:	461a      	mov	r2, r3
    cee2:	210d      	movs	r1, #13
    cee4:	4618      	mov	r0, r3
    cee6:	f7ff fee3 	bl	ccb0 <ble_gap_adv_finished>
    return BLE_HS_FOREVER;
    ceea:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ceee:	e7ed      	b.n	cecc <ble_gap_slave_timer+0x8>

0000cef0 <ble_gap_slave_set_timer>:
{
    cef0:	b510      	push	{r4, lr}
    cef2:	4604      	mov	r4, r0
    cef4:	f7fe fae0 	bl	b4b8 <os_time_get>
    ble_gap_slave[0].exp_os_ticks = ble_npl_time_get() + ticks_from_now;
    cef8:	4420      	add	r0, r4
    cefa:	4b04      	ldr	r3, [pc, #16]	; (cf0c <ble_gap_slave_set_timer+0x1c>)
    cefc:	6198      	str	r0, [r3, #24]
    ble_gap_slave[0].exp_set = 1;
    cefe:	7d5a      	ldrb	r2, [r3, #21]
    cf00:	f042 0210 	orr.w	r2, r2, #16
    cf04:	755a      	strb	r2, [r3, #21]
    ble_hs_timer_resched();
    cf06:	f002 ff1b 	bl	fd40 <ble_hs_timer_resched>
}
    cf0a:	bd10      	pop	{r4, pc}
    cf0c:	200004b8 	.word	0x200004b8

0000cf10 <ble_gap_master_timer>:
{
    cf10:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_master_ticks_until_exp();
    cf12:	f7ff ff63 	bl	cddc <ble_gap_master_ticks_until_exp>
    if (ticks_until_exp != 0) {
    cf16:	b9e0      	cbnz	r0, cf52 <ble_gap_master_timer+0x42>
    switch (ble_gap_master.op) {
    cf18:	4b0f      	ldr	r3, [pc, #60]	; (cf58 <ble_gap_master_timer+0x48>)
    cf1a:	781b      	ldrb	r3, [r3, #0]
    cf1c:	2b01      	cmp	r3, #1
    cf1e:	d00c      	beq.n	cf3a <ble_gap_master_timer+0x2a>
    cf20:	2b02      	cmp	r3, #2
    cf22:	d114      	bne.n	cf4e <ble_gap_master_timer+0x3e>
        rc = ble_gap_conn_cancel_tx();
    cf24:	f7ff fdca 	bl	cabc <ble_gap_conn_cancel_tx>
        if (rc != 0) {
    cf28:	b9a0      	cbnz	r0, cf54 <ble_gap_master_timer+0x44>
            ble_gap_master.exp_set = 0;
    cf2a:	4b0b      	ldr	r3, [pc, #44]	; (cf58 <ble_gap_master_timer+0x48>)
    cf2c:	785a      	ldrb	r2, [r3, #1]
    cf2e:	f36f 0200 	bfc	r2, #0, #1
    cf32:	705a      	strb	r2, [r3, #1]
    return BLE_HS_FOREVER;
    cf34:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
    cf38:	e00b      	b.n	cf52 <ble_gap_master_timer+0x42>
        assert(0);
    cf3a:	f7fb f941 	bl	81c0 <hal_debugger_connected>
    cf3e:	b100      	cbz	r0, cf42 <ble_gap_master_timer+0x32>
    cf40:	be01      	bkpt	0x0001
    cf42:	2300      	movs	r3, #0
    cf44:	461a      	mov	r2, r3
    cf46:	4619      	mov	r1, r3
    cf48:	4618      	mov	r0, r3
    cf4a:	f7fc fd41 	bl	99d0 <__assert_func>
    return BLE_HS_FOREVER;
    cf4e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
    cf52:	bd08      	pop	{r3, pc}
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
    cf54:	200c      	movs	r0, #12
    cf56:	e7fc      	b.n	cf52 <ble_gap_master_timer+0x42>
    cf58:	200004b8 	.word	0x200004b8

0000cf5c <ble_gap_adv_validate>:
    if (adv_params == NULL) {
    cf5c:	b37a      	cbz	r2, cfbe <ble_gap_adv_validate+0x62>
{
    cf5e:	b508      	push	{r3, lr}
    cf60:	4613      	mov	r3, r2
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
    cf62:	2803      	cmp	r0, #3
    cf64:	d82d      	bhi.n	cfc2 <ble_gap_adv_validate+0x66>
    if (adv_params->disc_mode >= BLE_GAP_DISC_MODE_MAX) {
    cf66:	7852      	ldrb	r2, [r2, #1]
    cf68:	2a02      	cmp	r2, #2
    cf6a:	d82c      	bhi.n	cfc6 <ble_gap_adv_validate+0x6a>
    if (ble_gap_slave[0].op != BLE_GAP_OP_NULL) {
    cf6c:	4a1b      	ldr	r2, [pc, #108]	; (cfdc <ble_gap_adv_validate+0x80>)
    cf6e:	7d12      	ldrb	r2, [r2, #20]
    cf70:	bb5a      	cbnz	r2, cfca <ble_gap_adv_validate+0x6e>
    switch (adv_params->conn_mode) {
    cf72:	781a      	ldrb	r2, [r3, #0]
    cf74:	2a01      	cmp	r2, #1
    cf76:	d017      	beq.n	cfa8 <ble_gap_adv_validate+0x4c>
    cf78:	b11a      	cbz	r2, cf82 <ble_gap_adv_validate+0x26>
    cf7a:	2a02      	cmp	r2, #2
    cf7c:	d009      	beq.n	cf92 <ble_gap_adv_validate+0x36>
        return BLE_HS_EINVAL;
    cf7e:	2003      	movs	r0, #3
    cf80:	e020      	b.n	cfc4 <ble_gap_adv_validate+0x68>
        if (adv_params->high_duty_cycle) {
    cf82:	7a1b      	ldrb	r3, [r3, #8]
    cf84:	f013 0f01 	tst.w	r3, #1
    cf88:	d101      	bne.n	cf8e <ble_gap_adv_validate+0x32>
    return 0;
    cf8a:	2000      	movs	r0, #0
    cf8c:	e01a      	b.n	cfc4 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
    cf8e:	2003      	movs	r0, #3
    cf90:	e018      	b.n	cfc4 <ble_gap_adv_validate+0x68>
        if (adv_params->high_duty_cycle) {
    cf92:	7a1b      	ldrb	r3, [r3, #8]
    cf94:	f013 0f01 	tst.w	r3, #1
    cf98:	d119      	bne.n	cfce <ble_gap_adv_validate+0x72>
        if (!ble_hs_conn_can_alloc()) {
    cf9a:	f003 fb3d 	bl	10618 <ble_hs_conn_can_alloc>
    cf9e:	b108      	cbz	r0, cfa4 <ble_gap_adv_validate+0x48>
    return 0;
    cfa0:	2000      	movs	r0, #0
    cfa2:	e00f      	b.n	cfc4 <ble_gap_adv_validate+0x68>
            return BLE_HS_ENOMEM;
    cfa4:	2006      	movs	r0, #6
    cfa6:	e00d      	b.n	cfc4 <ble_gap_adv_validate+0x68>
        if (peer_addr == NULL) {
    cfa8:	b199      	cbz	r1, cfd2 <ble_gap_adv_validate+0x76>
        if (peer_addr->type != BLE_ADDR_PUBLIC &&
    cfaa:	780b      	ldrb	r3, [r1, #0]
    cfac:	2b03      	cmp	r3, #3
    cfae:	d812      	bhi.n	cfd6 <ble_gap_adv_validate+0x7a>
        if (!ble_hs_conn_can_alloc()) {
    cfb0:	f003 fb32 	bl	10618 <ble_hs_conn_can_alloc>
    cfb4:	b108      	cbz	r0, cfba <ble_gap_adv_validate+0x5e>
    return 0;
    cfb6:	2000      	movs	r0, #0
    cfb8:	e004      	b.n	cfc4 <ble_gap_adv_validate+0x68>
            return BLE_HS_ENOMEM;
    cfba:	2006      	movs	r0, #6
    cfbc:	e002      	b.n	cfc4 <ble_gap_adv_validate+0x68>
        return BLE_HS_EINVAL;
    cfbe:	2003      	movs	r0, #3
}
    cfc0:	4770      	bx	lr
        return BLE_HS_EINVAL;
    cfc2:	2003      	movs	r0, #3
}
    cfc4:	bd08      	pop	{r3, pc}
        return BLE_HS_EINVAL;
    cfc6:	2003      	movs	r0, #3
    cfc8:	e7fc      	b.n	cfc4 <ble_gap_adv_validate+0x68>
        return BLE_HS_EALREADY;
    cfca:	2002      	movs	r0, #2
    cfcc:	e7fa      	b.n	cfc4 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
    cfce:	2003      	movs	r0, #3
    cfd0:	e7f8      	b.n	cfc4 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
    cfd2:	2003      	movs	r0, #3
    cfd4:	e7f6      	b.n	cfc4 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
    cfd6:	2003      	movs	r0, #3
    cfd8:	e7f4      	b.n	cfc4 <ble_gap_adv_validate+0x68>
    cfda:	bf00      	nop
    cfdc:	200004b8 	.word	0x200004b8

0000cfe0 <ble_gap_update_entry_alloc>:
{
    cfe0:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_gap_update_entry_pool);
    cfe2:	4807      	ldr	r0, [pc, #28]	; (d000 <ble_gap_update_entry_alloc+0x20>)
    cfe4:	f7fd fdbd 	bl	ab62 <os_memblock_get>
    if (entry != NULL) {
    cfe8:	4603      	mov	r3, r0
    cfea:	b130      	cbz	r0, cffa <ble_gap_update_entry_alloc+0x1a>
        memset(entry, 0, sizeof *entry);
    cfec:	2200      	movs	r2, #0
    cfee:	6002      	str	r2, [r0, #0]
    cff0:	6042      	str	r2, [r0, #4]
    cff2:	6082      	str	r2, [r0, #8]
    cff4:	60c2      	str	r2, [r0, #12]
    cff6:	6102      	str	r2, [r0, #16]
    cff8:	6142      	str	r2, [r0, #20]
}
    cffa:	4618      	mov	r0, r3
    cffc:	bd08      	pop	{r3, pc}
    cffe:	bf00      	nop
    d000:	200070b4 	.word	0x200070b4

0000d004 <ble_gap_conn_find>:
{
    d004:	b538      	push	{r3, r4, r5, lr}
    d006:	4604      	mov	r4, r0
    d008:	460d      	mov	r5, r1
    ble_hs_lock();
    d00a:	f002 fdbd 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
    d00e:	4620      	mov	r0, r4
    d010:	f003 fbc4 	bl	1079c <ble_hs_conn_find>
    if (conn != NULL && out_desc != NULL) {
    d014:	4604      	mov	r4, r0
    d016:	b118      	cbz	r0, d020 <ble_gap_conn_find+0x1c>
    d018:	b115      	cbz	r5, d020 <ble_gap_conn_find+0x1c>
        ble_gap_fill_conn_desc(conn, out_desc);
    d01a:	4629      	mov	r1, r5
    d01c:	f7ff fcd6 	bl	c9cc <ble_gap_fill_conn_desc>
    ble_hs_unlock();
    d020:	f002 fdb6 	bl	fb90 <ble_hs_unlock>
    if (conn == NULL) {
    d024:	b10c      	cbz	r4, d02a <ble_gap_conn_find+0x26>
        return 0;
    d026:	2000      	movs	r0, #0
}
    d028:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
    d02a:	2007      	movs	r0, #7
    d02c:	e7fc      	b.n	d028 <ble_gap_conn_find+0x24>
	...

0000d030 <ble_gap_master_in_progress>:
    return ble_gap_master.op != BLE_GAP_OP_NULL;
    d030:	4b02      	ldr	r3, [pc, #8]	; (d03c <ble_gap_master_in_progress+0xc>)
    d032:	7818      	ldrb	r0, [r3, #0]
}
    d034:	3000      	adds	r0, #0
    d036:	bf18      	it	ne
    d038:	2001      	movne	r0, #1
    d03a:	4770      	bx	lr
    d03c:	200004b8 	.word	0x200004b8

0000d040 <ble_gap_rx_adv_report>:
}
    d040:	4770      	bx	lr

0000d042 <ble_gap_rx_rd_rem_sup_feat_complete>:
{
    d042:	b538      	push	{r3, r4, r5, lr}
    d044:	4604      	mov	r4, r0
    ble_hs_lock();
    d046:	f002 fd9f 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
    d04a:	8860      	ldrh	r0, [r4, #2]
    d04c:	f003 fba6 	bl	1079c <ble_hs_conn_find>
    if ((conn != NULL) && (ev->status == 0)) {
    d050:	b110      	cbz	r0, d058 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>
    d052:	4605      	mov	r5, r0
    d054:	7863      	ldrb	r3, [r4, #1]
    d056:	b113      	cbz	r3, d05e <ble_gap_rx_rd_rem_sup_feat_complete+0x1c>
    ble_hs_unlock();
    d058:	f002 fd9a 	bl	fb90 <ble_hs_unlock>
}
    d05c:	bd38      	pop	{r3, r4, r5, pc}
        conn->supported_feat = get_le32(ev->features);
    d05e:	1d20      	adds	r0, r4, #4
    d060:	f00e fdea 	bl	1bc38 <get_le32>
    d064:	6268      	str	r0, [r5, #36]	; 0x24
    d066:	e7f7      	b.n	d058 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>

0000d068 <ble_gap_rx_l2cap_update_req>:
{
    d068:	b530      	push	{r4, r5, lr}
    d06a:	b08f      	sub	sp, #60	; 0x3c
    d06c:	4604      	mov	r4, r0
    d06e:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
    d070:	2234      	movs	r2, #52	; 0x34
    d072:	2100      	movs	r1, #0
    d074:	a801      	add	r0, sp, #4
    d076:	f7fe fc34 	bl	b8e2 <memset>
    event.type = BLE_GAP_EVENT_L2CAP_UPDATE_REQ;
    d07a:	2305      	movs	r3, #5
    d07c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
    d080:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.conn_update_req.peer_params = params;
    d084:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
    d086:	4621      	mov	r1, r4
    d088:	a801      	add	r0, sp, #4
    d08a:	f7ff fc8b 	bl	c9a4 <ble_gap_call_conn_event_cb>
}
    d08e:	b00f      	add	sp, #60	; 0x3c
    d090:	bd30      	pop	{r4, r5, pc}

0000d092 <ble_gap_rx_phy_update_complete>:
{
    d092:	b570      	push	{r4, r5, r6, lr}
    d094:	b08e      	sub	sp, #56	; 0x38
    d096:	4604      	mov	r4, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
    d098:	8845      	ldrh	r5, [r0, #2]
    d09a:	b2ae      	uxth	r6, r5
    memset(&event, 0, sizeof event);
    d09c:	2234      	movs	r2, #52	; 0x34
    d09e:	2100      	movs	r1, #0
    d0a0:	a801      	add	r0, sp, #4
    d0a2:	f7fe fc1e 	bl	b8e2 <memset>
    event.type = BLE_GAP_EVENT_PHY_UPDATE_COMPLETE;
    d0a6:	2312      	movs	r3, #18
    d0a8:	f88d 3004 	strb.w	r3, [sp, #4]
    event.phy_updated.status = ev->status;
    d0ac:	7863      	ldrb	r3, [r4, #1]
    d0ae:	9302      	str	r3, [sp, #8]
    event.phy_updated.conn_handle = conn_handle;
    d0b0:	f8ad 500c 	strh.w	r5, [sp, #12]
    event.phy_updated.tx_phy = ev->tx_phy;
    d0b4:	7923      	ldrb	r3, [r4, #4]
    d0b6:	f88d 300e 	strb.w	r3, [sp, #14]
    event.phy_updated.rx_phy = ev->rx_phy;
    d0ba:	7963      	ldrb	r3, [r4, #5]
    d0bc:	f88d 300f 	strb.w	r3, [sp, #15]
    ble_gap_event_listener_call(&event);
    d0c0:	a801      	add	r0, sp, #4
    d0c2:	f7ff fc45 	bl	c950 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
    d0c6:	4631      	mov	r1, r6
    d0c8:	a801      	add	r0, sp, #4
    d0ca:	f7ff fc6b 	bl	c9a4 <ble_gap_call_conn_event_cb>
}
    d0ce:	b00e      	add	sp, #56	; 0x38
    d0d0:	bd70      	pop	{r4, r5, r6, pc}

0000d0d2 <ble_gap_timer>:
{
    d0d2:	b510      	push	{r4, lr}
    master_ticks = ble_gap_master_timer();
    d0d4:	f7ff ff1c 	bl	cf10 <ble_gap_master_timer>
    d0d8:	4604      	mov	r4, r0
    update_ticks = ble_gap_update_timer();
    d0da:	f7ff feb9 	bl	ce50 <ble_gap_update_timer>
    min_ticks = min(master_ticks, update_ticks);
    d0de:	4284      	cmp	r4, r0
    d0e0:	bfa8      	it	ge
    d0e2:	4604      	movge	r4, r0
    min_ticks = min(min_ticks, ble_gap_slave_timer());
    d0e4:	f7ff feee 	bl	cec4 <ble_gap_slave_timer>
    d0e8:	42a0      	cmp	r0, r4
    d0ea:	dd01      	ble.n	d0f0 <ble_gap_timer+0x1e>
}
    d0ec:	4620      	mov	r0, r4
    d0ee:	bd10      	pop	{r4, pc}
    min_ticks = min(min_ticks, ble_gap_slave_timer());
    d0f0:	f7ff fee8 	bl	cec4 <ble_gap_slave_timer>
    d0f4:	4604      	mov	r4, r0
    return min_ticks;
    d0f6:	e7f9      	b.n	d0ec <ble_gap_timer+0x1a>

0000d0f8 <ble_gap_adv_start>:
{
    d0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0fc:	b082      	sub	sp, #8
    d0fe:	4605      	mov	r5, r0
    d100:	460f      	mov	r7, r1
    d102:	4690      	mov	r8, r2
    d104:	461e      	mov	r6, r3
    ble_hs_lock();
    d106:	f002 fd3f 	bl	fb88 <ble_hs_lock>
    rc = ble_gap_adv_validate(own_addr_type, direct_addr, adv_params);
    d10a:	4632      	mov	r2, r6
    d10c:	4639      	mov	r1, r7
    d10e:	4628      	mov	r0, r5
    d110:	f7ff ff24 	bl	cf5c <ble_gap_adv_validate>
    if (rc != 0) {
    d114:	4604      	mov	r4, r0
    d116:	2800      	cmp	r0, #0
    d118:	d14d      	bne.n	d1b6 <ble_gap_adv_start+0xbe>
    if (duration_ms != BLE_HS_FOREVER) {
    d11a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    d11e:	4598      	cmp	r8, r3
    d120:	d006      	beq.n	d130 <ble_gap_adv_start+0x38>
}

static inline ble_npl_error_t
ble_npl_time_ms_to_ticks(uint32_t ms, ble_npl_time_t *out_ticks)
{
    return (ble_npl_error_t)os_time_ms_to_ticks(ms, out_ticks);
    d122:	a901      	add	r1, sp, #4
    d124:	4640      	mov	r0, r8
    d126:	f7fe fa21 	bl	b56c <os_time_ms_to_ticks>
        if (rc != 0) {
    d12a:	b2c0      	uxtb	r0, r0
    d12c:	2800      	cmp	r0, #0
    d12e:	d13d      	bne.n	d1ac <ble_gap_adv_start+0xb4>
    if (!ble_hs_is_enabled()) {
    d130:	f002 fd62 	bl	fbf8 <ble_hs_is_enabled>
    d134:	2800      	cmp	r0, #0
    d136:	d03b      	beq.n	d1b0 <ble_gap_adv_start+0xb8>
    if (ble_gap_is_preempted()) {
    d138:	f7ff fb4e 	bl	c7d8 <ble_gap_is_preempted>
    d13c:	2800      	cmp	r0, #0
    d13e:	d139      	bne.n	d1b4 <ble_gap_adv_start+0xbc>
    rc = ble_hs_id_use_addr(own_addr_type);
    d140:	4628      	mov	r0, r5
    d142:	f004 fa15 	bl	11570 <ble_hs_id_use_addr>
    if (rc != 0) {
    d146:	4604      	mov	r4, r0
    d148:	2800      	cmp	r0, #0
    d14a:	d134      	bne.n	d1b6 <ble_gap_adv_start+0xbe>
    ble_gap_slave[0].cb = cb;
    d14c:	4b1d      	ldr	r3, [pc, #116]	; (d1c4 <ble_gap_adv_start+0xcc>)
    d14e:	9a08      	ldr	r2, [sp, #32]
    d150:	61da      	str	r2, [r3, #28]
    ble_gap_slave[0].cb_arg = cb_arg;
    d152:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d154:	621a      	str	r2, [r3, #32]
    ble_gap_slave[0].our_addr_type = own_addr_type;
    d156:	7d5a      	ldrb	r2, [r3, #21]
    d158:	f365 0201 	bfi	r2, r5, #0, #2
    d15c:	755a      	strb	r2, [r3, #21]
    if (adv_params->conn_mode != BLE_GAP_CONN_MODE_NON) {
    d15e:	7833      	ldrb	r3, [r6, #0]
    d160:	b1d3      	cbz	r3, d198 <ble_gap_adv_start+0xa0>
        ble_gap_slave[0].connectable = 1;
    d162:	4a18      	ldr	r2, [pc, #96]	; (d1c4 <ble_gap_adv_start+0xcc>)
    d164:	7d53      	ldrb	r3, [r2, #21]
    d166:	f043 0308 	orr.w	r3, r3, #8
    d16a:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_adv_params_tx(own_addr_type, direct_addr, adv_params);
    d16c:	4632      	mov	r2, r6
    d16e:	4639      	mov	r1, r7
    d170:	4628      	mov	r0, r5
    d172:	f7ff fcc2 	bl	cafa <ble_gap_adv_params_tx>
    if (rc != 0) {
    d176:	4604      	mov	r4, r0
    d178:	b9e8      	cbnz	r0, d1b6 <ble_gap_adv_start+0xbe>
    ble_gap_slave[0].op = BLE_GAP_OP_S_ADV;
    d17a:	2001      	movs	r0, #1
    d17c:	4b11      	ldr	r3, [pc, #68]	; (d1c4 <ble_gap_adv_start+0xcc>)
    d17e:	7518      	strb	r0, [r3, #20]
    rc = ble_gap_adv_enable_tx(1);
    d180:	f7ff fca9 	bl	cad6 <ble_gap_adv_enable_tx>
    if (rc != 0) {
    d184:	4604      	mov	r4, r0
    d186:	b968      	cbnz	r0, d1a4 <ble_gap_adv_start+0xac>
    if (duration_ms != BLE_HS_FOREVER) {
    d188:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    d18c:	4598      	cmp	r8, r3
    d18e:	d012      	beq.n	d1b6 <ble_gap_adv_start+0xbe>
        ble_gap_slave_set_timer(duration_ticks);
    d190:	9801      	ldr	r0, [sp, #4]
    d192:	f7ff fead 	bl	cef0 <ble_gap_slave_set_timer>
    d196:	e00e      	b.n	d1b6 <ble_gap_adv_start+0xbe>
        ble_gap_slave[0].connectable = 0;
    d198:	4b0a      	ldr	r3, [pc, #40]	; (d1c4 <ble_gap_adv_start+0xcc>)
    d19a:	7d5a      	ldrb	r2, [r3, #21]
    d19c:	f36f 02c3 	bfc	r2, #3, #1
    d1a0:	755a      	strb	r2, [r3, #21]
    d1a2:	e7e3      	b.n	d16c <ble_gap_adv_start+0x74>
        ble_gap_slave_reset_state(0);
    d1a4:	2000      	movs	r0, #0
    d1a6:	f7ff fd5d 	bl	cc64 <ble_gap_slave_reset_state>
        goto done;
    d1aa:	e004      	b.n	d1b6 <ble_gap_adv_start+0xbe>
            rc = BLE_HS_EINVAL;
    d1ac:	2403      	movs	r4, #3
    d1ae:	e002      	b.n	d1b6 <ble_gap_adv_start+0xbe>
        rc = BLE_HS_EDISABLED;
    d1b0:	241e      	movs	r4, #30
    d1b2:	e000      	b.n	d1b6 <ble_gap_adv_start+0xbe>
        rc = BLE_HS_EPREEMPTED;
    d1b4:	241d      	movs	r4, #29
    ble_hs_unlock();
    d1b6:	f002 fceb 	bl	fb90 <ble_hs_unlock>
}
    d1ba:	4620      	mov	r0, r4
    d1bc:	b002      	add	sp, #8
    d1be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d1c2:	bf00      	nop
    d1c4:	200004b8 	.word	0x200004b8

0000d1c8 <ble_gap_adv_set_data>:
    if (((data == NULL) && (data_len != 0)) ||
    d1c8:	4603      	mov	r3, r0
    d1ca:	b1b0      	cbz	r0, d1fa <ble_gap_adv_set_data+0x32>
    d1cc:	291f      	cmp	r1, #31
    d1ce:	dc18      	bgt.n	d202 <ble_gap_adv_set_data+0x3a>
{
    d1d0:	b510      	push	{r4, lr}
    d1d2:	b08a      	sub	sp, #40	; 0x28
    d1d4:	460c      	mov	r4, r1
    memcpy(cmd.adv_data, data, data_len);
    d1d6:	460a      	mov	r2, r1
    d1d8:	4619      	mov	r1, r3
    d1da:	f10d 0009 	add.w	r0, sp, #9
    d1de:	f7fe fb57 	bl	b890 <memcpy>
    cmd.adv_data_len = data_len;
    d1e2:	f88d 4008 	strb.w	r4, [sp, #8]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
    d1e6:	2300      	movs	r3, #0
    d1e8:	9300      	str	r3, [sp, #0]
    d1ea:	2220      	movs	r2, #32
    d1ec:	a902      	add	r1, sp, #8
    d1ee:	f242 0008 	movw	r0, #8200	; 0x2008
    d1f2:	f003 fd1f 	bl	10c34 <ble_hs_hci_cmd_tx>
}
    d1f6:	b00a      	add	sp, #40	; 0x28
    d1f8:	bd10      	pop	{r4, pc}
    if (((data == NULL) && (data_len != 0)) ||
    d1fa:	2900      	cmp	r1, #0
    d1fc:	d0e6      	beq.n	d1cc <ble_gap_adv_set_data+0x4>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    d1fe:	2012      	movs	r0, #18
    d200:	4770      	bx	lr
    d202:	2012      	movs	r0, #18
}
    d204:	4770      	bx	lr

0000d206 <ble_gap_adv_set_fields>:
{
    d206:	b500      	push	{lr}
    d208:	b08b      	sub	sp, #44	; 0x2c
    rc = ble_hs_adv_set_fields(adv_fields, buf, &buf_sz, sizeof buf);
    d20a:	231f      	movs	r3, #31
    d20c:	f10d 0207 	add.w	r2, sp, #7
    d210:	a902      	add	r1, sp, #8
    d212:	f003 f9c0 	bl	10596 <ble_hs_adv_set_fields>
    if (rc != 0) {
    d216:	4603      	mov	r3, r0
    d218:	b118      	cbz	r0, d222 <ble_gap_adv_set_fields+0x1c>
}
    d21a:	4618      	mov	r0, r3
    d21c:	b00b      	add	sp, #44	; 0x2c
    d21e:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_adv_set_data(buf, buf_sz);
    d222:	f89d 1007 	ldrb.w	r1, [sp, #7]
    d226:	a802      	add	r0, sp, #8
    d228:	f7ff ffce 	bl	d1c8 <ble_gap_adv_set_data>
    d22c:	4603      	mov	r3, r0
    d22e:	e7f4      	b.n	d21a <ble_gap_adv_set_fields+0x14>

0000d230 <ble_gap_adv_active>:
{
    d230:	b508      	push	{r3, lr}
    return ble_gap_adv_active_instance(0);
    d232:	2000      	movs	r0, #0
    d234:	f7ff faf8 	bl	c828 <ble_gap_adv_active_instance>
}
    d238:	bd08      	pop	{r3, pc}
	...

0000d23c <ble_gap_rx_conn_complete>:
{
    d23c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d23e:	b091      	sub	sp, #68	; 0x44
    if (evt->status != BLE_ERR_SUCCESS) {
    d240:	7803      	ldrb	r3, [r0, #0]
    d242:	b373      	cbz	r3, d2a2 <ble_gap_rx_conn_complete+0x66>
        switch (evt->status) {
    d244:	2b02      	cmp	r3, #2
    d246:	d010      	beq.n	d26a <ble_gap_rx_conn_complete+0x2e>
    d248:	2b3c      	cmp	r3, #60	; 0x3c
    d24a:	d120      	bne.n	d28e <ble_gap_rx_conn_complete+0x52>
            if (ble_gap_adv_active()) {
    d24c:	f7ff fff0 	bl	d230 <ble_gap_adv_active>
    d250:	4605      	mov	r5, r0
    d252:	b910      	cbnz	r0, d25a <ble_gap_rx_conn_complete+0x1e>
}
    d254:	4628      	mov	r0, r5
    d256:	b011      	add	sp, #68	; 0x44
    d258:	bdf0      	pop	{r4, r5, r6, r7, pc}
                ble_gap_adv_finished(0, 0, 0, 0);
    d25a:	2300      	movs	r3, #0
    d25c:	461a      	mov	r2, r3
    d25e:	4619      	mov	r1, r3
    d260:	4618      	mov	r0, r3
    d262:	f7ff fd25 	bl	ccb0 <ble_gap_adv_finished>
        return 0;
    d266:	2500      	movs	r5, #0
    d268:	e7f4      	b.n	d254 <ble_gap_rx_conn_complete+0x18>
            if (ble_gap_master_in_progress()) {
    d26a:	f7ff fee1 	bl	d030 <ble_gap_master_in_progress>
    d26e:	4605      	mov	r5, r0
    d270:	2800      	cmp	r0, #0
    d272:	d0ef      	beq.n	d254 <ble_gap_rx_conn_complete+0x18>
                if (ble_gap_master.preempted_op == BLE_GAP_OP_M_CONN) {
    d274:	4b5c      	ldr	r3, [pc, #368]	; (d3e8 <ble_gap_rx_conn_complete+0x1ac>)
    d276:	7c1b      	ldrb	r3, [r3, #16]
    d278:	2b02      	cmp	r3, #2
    d27a:	d003      	beq.n	d284 <ble_gap_rx_conn_complete+0x48>
                    ble_gap_master_connect_cancelled();
    d27c:	f7ff fd84 	bl	cd88 <ble_gap_master_connect_cancelled>
        return 0;
    d280:	2500      	movs	r5, #0
    d282:	e7e7      	b.n	d254 <ble_gap_rx_conn_complete+0x18>
                    ble_gap_master_failed(BLE_HS_EPREEMPTED);
    d284:	201d      	movs	r0, #29
    d286:	f7ff fd73 	bl	cd70 <ble_gap_master_failed>
        return 0;
    d28a:	2500      	movs	r5, #0
    d28c:	e7e2      	b.n	d254 <ble_gap_rx_conn_complete+0x18>
            assert(0);
    d28e:	f7fa ff97 	bl	81c0 <hal_debugger_connected>
    d292:	b100      	cbz	r0, d296 <ble_gap_rx_conn_complete+0x5a>
    d294:	be01      	bkpt	0x0001
    d296:	2300      	movs	r3, #0
    d298:	461a      	mov	r2, r3
    d29a:	4619      	mov	r1, r3
    d29c:	4618      	mov	r0, r3
    d29e:	f7fc fb97 	bl	99d0 <__assert_func>
    d2a2:	4604      	mov	r4, r0
    d2a4:	460e      	mov	r6, r1
    if (ble_hs_atomic_conn_flags(evt->connection_handle, NULL) == 0) {
    d2a6:	2100      	movs	r1, #0
    d2a8:	8840      	ldrh	r0, [r0, #2]
    d2aa:	f003 f991 	bl	105d0 <ble_hs_atomic_conn_flags>
    d2ae:	4605      	mov	r5, r0
    d2b0:	2800      	cmp	r0, #0
    d2b2:	d0cf      	beq.n	d254 <ble_gap_rx_conn_complete+0x18>
    switch (evt->role) {
    d2b4:	7923      	ldrb	r3, [r4, #4]
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	d062      	beq.n	d380 <ble_gap_rx_conn_complete+0x144>
    d2ba:	2b01      	cmp	r3, #1
    d2bc:	d066      	beq.n	d38c <ble_gap_rx_conn_complete+0x150>
    conn = ble_hs_conn_alloc(evt->connection_handle);
    d2be:	8860      	ldrh	r0, [r4, #2]
    d2c0:	f003 fa22 	bl	10708 <ble_hs_conn_alloc>
    d2c4:	4605      	mov	r5, r0
    conn->bhc_itvl = evt->conn_itvl;
    d2c6:	89a3      	ldrh	r3, [r4, #12]
    d2c8:	8383      	strh	r3, [r0, #28]
    conn->bhc_latency = evt->conn_latency;
    d2ca:	89e3      	ldrh	r3, [r4, #14]
    d2cc:	83c3      	strh	r3, [r0, #30]
    conn->bhc_supervision_timeout = evt->supervision_timeout;
    d2ce:	8a23      	ldrh	r3, [r4, #16]
    d2d0:	8403      	strh	r3, [r0, #32]
    conn->bhc_master_clock_accuracy = evt->master_clk_acc;
    d2d2:	7ca3      	ldrb	r3, [r4, #18]
    d2d4:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    if (evt->role == BLE_HCI_LE_CONN_COMPLETE_ROLE_MASTER) {
    d2d8:	7923      	ldrb	r3, [r4, #4]
    d2da:	2b00      	cmp	r3, #0
    d2dc:	d15d      	bne.n	d39a <ble_gap_rx_conn_complete+0x15e>
        conn->bhc_cb = ble_gap_master.cb;
    d2de:	4b42      	ldr	r3, [pc, #264]	; (d3e8 <ble_gap_rx_conn_complete+0x1ac>)
    d2e0:	689a      	ldr	r2, [r3, #8]
    d2e2:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_master.cb_arg;
    d2e4:	68da      	ldr	r2, [r3, #12]
    d2e6:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_flags |= BLE_HS_CONN_F_MASTER;
    d2e8:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    d2ec:	f042 0201 	orr.w	r2, r2, #1
    d2f0:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        conn->bhc_our_addr_type = ble_gap_master.conn.our_addr_type;
    d2f4:	7c5b      	ldrb	r3, [r3, #17]
    d2f6:	f3c3 0341 	ubfx	r3, r3, #1, #2
    d2fa:	7183      	strb	r3, [r0, #6]
        ble_gap_master_reset_state();
    d2fc:	f7ff fcf4 	bl	cce8 <ble_gap_master_reset_state>
    conn->bhc_peer_addr.type = evt->peer_addr_type;
    d300:	7966      	ldrb	r6, [r4, #5]
    d302:	71ee      	strb	r6, [r5, #7]
    memcpy(conn->bhc_peer_addr.val, evt->peer_addr, 6);
    d304:	4623      	mov	r3, r4
    d306:	f853 2f06 	ldr.w	r2, [r3, #6]!
    d30a:	60aa      	str	r2, [r5, #8]
    d30c:	889b      	ldrh	r3, [r3, #4]
    d30e:	81ab      	strh	r3, [r5, #12]
    conn->bhc_our_rpa_addr.type = BLE_ADDR_RANDOM;
    d310:	2301      	movs	r3, #1
    d312:	73ab      	strb	r3, [r5, #14]
    memcpy(conn->bhc_our_rpa_addr.val, evt->local_rpa, 6);
    d314:	4623      	mov	r3, r4
    d316:	f853 2f13 	ldr.w	r2, [r3, #19]!
    d31a:	f8c5 200f 	str.w	r2, [r5, #15]
    d31e:	889b      	ldrh	r3, [r3, #4]
    d320:	f8a5 3013 	strh.w	r3, [r5, #19]
    if (memcmp(BLE_ADDR_ANY->val, evt->peer_rpa, 6) == 0) {
    d324:	2300      	movs	r3, #0
    d326:	930e      	str	r3, [sp, #56]	; 0x38
    d328:	f8cd 303b 	str.w	r3, [sp, #59]	; 0x3b
    d32c:	f104 0719 	add.w	r7, r4, #25
    d330:	2206      	movs	r2, #6
    d332:	4639      	mov	r1, r7
    d334:	f10d 0039 	add.w	r0, sp, #57	; 0x39
    d338:	f7fe fa86 	bl	b848 <memcmp>
    d33c:	2800      	cmp	r0, #0
    d33e:	d14b      	bne.n	d3d8 <ble_gap_rx_conn_complete+0x19c>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
    d340:	2e01      	cmp	r6, #1
    d342:	d039      	beq.n	d3b8 <ble_gap_rx_conn_complete+0x17c>
    ble_hs_lock();
    d344:	f002 fc20 	bl	fb88 <ble_hs_lock>
    memset(&event, 0, sizeof event);
    d348:	2234      	movs	r2, #52	; 0x34
    d34a:	2100      	movs	r1, #0
    d34c:	a801      	add	r0, sp, #4
    d34e:	f7fe fac8 	bl	b8e2 <memset>
    ble_hs_conn_insert(conn);
    d352:	4628      	mov	r0, r5
    d354:	f003 fa2e 	bl	107b4 <ble_hs_conn_insert>
    ble_hs_unlock();
    d358:	f002 fc1a 	bl	fb90 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_CONNECT;
    d35c:	2500      	movs	r5, #0
    d35e:	f88d 5004 	strb.w	r5, [sp, #4]
    event.connect.conn_handle = evt->connection_handle;
    d362:	8863      	ldrh	r3, [r4, #2]
    d364:	f8ad 300c 	strh.w	r3, [sp, #12]
    event.connect.status = 0;
    d368:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
    d36a:	a801      	add	r0, sp, #4
    d36c:	f7ff faf0 	bl	c950 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, evt->connection_handle);
    d370:	8861      	ldrh	r1, [r4, #2]
    d372:	a801      	add	r0, sp, #4
    d374:	f7ff fb16 	bl	c9a4 <ble_gap_call_conn_event_cb>
    ble_gap_rd_rem_sup_feat_tx(evt->connection_handle);
    d378:	8860      	ldrh	r0, [r4, #2]
    d37a:	f7ff fb90 	bl	ca9e <ble_gap_rd_rem_sup_feat_tx>
    return 0;
    d37e:	e769      	b.n	d254 <ble_gap_rx_conn_complete+0x18>
        rc = ble_gap_accept_master_conn();
    d380:	f7ff fa5e 	bl	c840 <ble_gap_accept_master_conn>
        if (rc != 0) {
    d384:	4605      	mov	r5, r0
    d386:	2800      	cmp	r0, #0
    d388:	d099      	beq.n	d2be <ble_gap_rx_conn_complete+0x82>
    d38a:	e763      	b.n	d254 <ble_gap_rx_conn_complete+0x18>
        rc = ble_gap_accept_slave_conn(instance);
    d38c:	4630      	mov	r0, r6
    d38e:	f7ff fa61 	bl	c854 <ble_gap_accept_slave_conn>
        if (rc != 0) {
    d392:	4605      	mov	r5, r0
    d394:	2800      	cmp	r0, #0
    d396:	d092      	beq.n	d2be <ble_gap_rx_conn_complete+0x82>
    d398:	e75c      	b.n	d254 <ble_gap_rx_conn_complete+0x18>
        conn->bhc_cb = ble_gap_slave[instance].cb;
    d39a:	4b13      	ldr	r3, [pc, #76]	; (d3e8 <ble_gap_rx_conn_complete+0x1ac>)
    d39c:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    d3a0:	69da      	ldr	r2, [r3, #28]
    d3a2:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_slave[instance].cb_arg;
    d3a4:	6a1a      	ldr	r2, [r3, #32]
    d3a6:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_our_addr_type = ble_gap_slave[instance].our_addr_type;
    d3a8:	7d5b      	ldrb	r3, [r3, #21]
    d3aa:	f3c3 0301 	ubfx	r3, r3, #0, #2
    d3ae:	7183      	strb	r3, [r0, #6]
        ble_gap_slave_reset_state(instance);
    d3b0:	4630      	mov	r0, r6
    d3b2:	f7ff fc57 	bl	cc64 <ble_gap_slave_reset_state>
    d3b6:	e7a3      	b.n	d300 <ble_gap_rx_conn_complete+0xc4>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
    d3b8:	7b6b      	ldrb	r3, [r5, #13]
    d3ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d3be:	2b40      	cmp	r3, #64	; 0x40
    d3c0:	d1c0      	bne.n	d344 <ble_gap_rx_conn_complete+0x108>
            conn->bhc_peer_rpa_addr = conn->bhc_peer_addr;
    d3c2:	462a      	mov	r2, r5
    d3c4:	f852 1f07 	ldr.w	r1, [r2, #7]!
    d3c8:	f8c5 1015 	str.w	r1, [r5, #21]
    d3cc:	8891      	ldrh	r1, [r2, #4]
    d3ce:	7992      	ldrb	r2, [r2, #6]
    d3d0:	f8a5 1019 	strh.w	r1, [r5, #25]
    d3d4:	76ea      	strb	r2, [r5, #27]
    d3d6:	e7b5      	b.n	d344 <ble_gap_rx_conn_complete+0x108>
        conn->bhc_peer_rpa_addr.type = BLE_ADDR_RANDOM;
    d3d8:	2301      	movs	r3, #1
    d3da:	756b      	strb	r3, [r5, #21]
        memcpy(conn->bhc_peer_rpa_addr.val, evt->peer_rpa, 6);
    d3dc:	683b      	ldr	r3, [r7, #0]
    d3de:	f8c5 3016 	str.w	r3, [r5, #22]
    d3e2:	88bb      	ldrh	r3, [r7, #4]
    d3e4:	836b      	strh	r3, [r5, #26]
    d3e6:	e7ad      	b.n	d344 <ble_gap_rx_conn_complete+0x108>
    d3e8:	200004b8 	.word	0x200004b8

0000d3ec <ble_gap_adv_stop_no_lock>:
{
    d3ec:	b538      	push	{r3, r4, r5, lr}
    active = ble_gap_adv_active();
    d3ee:	f7ff ff1f 	bl	d230 <ble_gap_adv_active>
    d3f2:	4605      	mov	r5, r0
    rc = ble_gap_adv_enable_tx(0);
    d3f4:	2000      	movs	r0, #0
    d3f6:	f7ff fb6e 	bl	cad6 <ble_gap_adv_enable_tx>
    if (rc != 0) {
    d3fa:	4604      	mov	r4, r0
    d3fc:	b108      	cbz	r0, d402 <ble_gap_adv_stop_no_lock+0x16>
}
    d3fe:	4620      	mov	r0, r4
    d400:	bd38      	pop	{r3, r4, r5, pc}
    ble_gap_slave_reset_state(0);
    d402:	f7ff fc2f 	bl	cc64 <ble_gap_slave_reset_state>
    if (!active) {
    d406:	2d00      	cmp	r5, #0
    d408:	d1f9      	bne.n	d3fe <ble_gap_adv_stop_no_lock+0x12>
        rc = BLE_HS_EALREADY;
    d40a:	2402      	movs	r4, #2
    return rc;
    d40c:	e7f7      	b.n	d3fe <ble_gap_adv_stop_no_lock+0x12>
	...

0000d410 <ble_gap_disc_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_DISC;
    d410:	4b03      	ldr	r3, [pc, #12]	; (d420 <ble_gap_disc_active+0x10>)
    d412:	7818      	ldrb	r0, [r3, #0]
}
    d414:	2801      	cmp	r0, #1
    d416:	bf14      	ite	ne
    d418:	2000      	movne	r0, #0
    d41a:	2001      	moveq	r0, #1
    d41c:	4770      	bx	lr
    d41e:	bf00      	nop
    d420:	200004b8 	.word	0x200004b8

0000d424 <ble_gap_conn_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_CONN;
    d424:	4b03      	ldr	r3, [pc, #12]	; (d434 <ble_gap_conn_active+0x10>)
    d426:	7818      	ldrb	r0, [r3, #0]
}
    d428:	2802      	cmp	r0, #2
    d42a:	bf14      	ite	ne
    d42c:	2000      	movne	r0, #0
    d42e:	2001      	moveq	r0, #1
    d430:	4770      	bx	lr
    d432:	bf00      	nop
    d434:	200004b8 	.word	0x200004b8

0000d438 <ble_gap_conn_cancel_no_lock>:
{
    d438:	b508      	push	{r3, lr}
    if (!ble_gap_conn_active()) {
    d43a:	f7ff fff3 	bl	d424 <ble_gap_conn_active>
    d43e:	b148      	cbz	r0, d454 <ble_gap_conn_cancel_no_lock+0x1c>
    rc = ble_gap_conn_cancel_tx();
    d440:	f7ff fb3c 	bl	cabc <ble_gap_conn_cancel_tx>
    if (rc != 0) {
    d444:	4603      	mov	r3, r0
    d446:	b930      	cbnz	r0, d456 <ble_gap_conn_cancel_no_lock+0x1e>
    ble_gap_master.conn.cancel = 1;
    d448:	4904      	ldr	r1, [pc, #16]	; (d45c <ble_gap_conn_cancel_no_lock+0x24>)
    d44a:	7c4a      	ldrb	r2, [r1, #17]
    d44c:	f042 0208 	orr.w	r2, r2, #8
    d450:	744a      	strb	r2, [r1, #17]
    d452:	e000      	b.n	d456 <ble_gap_conn_cancel_no_lock+0x1e>
        rc = BLE_HS_EALREADY;
    d454:	2302      	movs	r3, #2
}
    d456:	4618      	mov	r0, r3
    d458:	bd08      	pop	{r3, pc}
    d45a:	bf00      	nop
    d45c:	200004b8 	.word	0x200004b8

0000d460 <ble_gap_terminate_with_conn>:
    if (conn->bhc_flags & BLE_HS_CONN_F_TERMINATING) {
    d460:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    d464:	f013 0f02 	tst.w	r3, #2
    d468:	d11a      	bne.n	d4a0 <ble_gap_terminate_with_conn+0x40>
{
    d46a:	b510      	push	{r4, lr}
    d46c:	b084      	sub	sp, #16
    d46e:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn->bhc_handle);
    d470:	8883      	ldrh	r3, [r0, #4]
    d472:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.reason = hci_reason;
    d476:	f88d 100e 	strb.w	r1, [sp, #14]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LINK_CTRL,
    d47a:	2300      	movs	r3, #0
    d47c:	9300      	str	r3, [sp, #0]
    d47e:	2203      	movs	r2, #3
    d480:	a903      	add	r1, sp, #12
    d482:	f240 4006 	movw	r0, #1030	; 0x406
    d486:	f003 fbd5 	bl	10c34 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
    d48a:	4603      	mov	r3, r0
    d48c:	b928      	cbnz	r0, d49a <ble_gap_terminate_with_conn+0x3a>
    conn->bhc_flags |= BLE_HS_CONN_F_TERMINATING;
    d48e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    d492:	f042 0202 	orr.w	r2, r2, #2
    d496:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
}
    d49a:	4618      	mov	r0, r3
    d49c:	b004      	add	sp, #16
    d49e:	bd10      	pop	{r4, pc}
        return BLE_HS_EALREADY;
    d4a0:	2302      	movs	r3, #2
}
    d4a2:	4618      	mov	r0, r3
    d4a4:	4770      	bx	lr

0000d4a6 <ble_gap_terminate>:
{
    d4a6:	b538      	push	{r3, r4, r5, lr}
    d4a8:	4604      	mov	r4, r0
    d4aa:	460d      	mov	r5, r1
    ble_hs_lock();
    d4ac:	f002 fb6c 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    d4b0:	4620      	mov	r0, r4
    d4b2:	f003 f973 	bl	1079c <ble_hs_conn_find>
    if (conn == NULL) {
    d4b6:	b138      	cbz	r0, d4c8 <ble_gap_terminate+0x22>
    rc = ble_gap_terminate_with_conn(conn, hci_reason);
    d4b8:	4629      	mov	r1, r5
    d4ba:	f7ff ffd1 	bl	d460 <ble_gap_terminate_with_conn>
    d4be:	4604      	mov	r4, r0
    ble_hs_unlock();
    d4c0:	f002 fb66 	bl	fb90 <ble_hs_unlock>
}
    d4c4:	4620      	mov	r0, r4
    d4c6:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
    d4c8:	2407      	movs	r4, #7
    d4ca:	e7f9      	b.n	d4c0 <ble_gap_terminate+0x1a>

0000d4cc <ble_gap_update_notify>:
{
    d4cc:	b530      	push	{r4, r5, lr}
    d4ce:	b08f      	sub	sp, #60	; 0x3c
    d4d0:	4604      	mov	r4, r0
    d4d2:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
    d4d4:	2234      	movs	r2, #52	; 0x34
    d4d6:	2100      	movs	r1, #0
    d4d8:	a801      	add	r0, sp, #4
    d4da:	f7fe fa02 	bl	b8e2 <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE;
    d4de:	2303      	movs	r3, #3
    d4e0:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update.conn_handle = conn_handle;
    d4e4:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.conn_update.status = status;
    d4e8:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
    d4ea:	a801      	add	r0, sp, #4
    d4ec:	f7ff fa30 	bl	c950 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
    d4f0:	4621      	mov	r1, r4
    d4f2:	a801      	add	r0, sp, #4
    d4f4:	f7ff fa56 	bl	c9a4 <ble_gap_call_conn_event_cb>
    if (status == BLE_HS_ETIMEOUT) {
    d4f8:	2d0d      	cmp	r5, #13
    d4fa:	d001      	beq.n	d500 <ble_gap_update_notify+0x34>
}
    d4fc:	b00f      	add	sp, #60	; 0x3c
    d4fe:	bd30      	pop	{r4, r5, pc}
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
    d500:	2113      	movs	r1, #19
    d502:	4620      	mov	r0, r4
    d504:	f7ff ffcf 	bl	d4a6 <ble_gap_terminate>
}
    d508:	e7f8      	b.n	d4fc <ble_gap_update_notify+0x30>

0000d50a <ble_gap_conn_broken>:
{
    d50a:	b570      	push	{r4, r5, r6, lr}
    d50c:	b090      	sub	sp, #64	; 0x40
    d50e:	4604      	mov	r4, r0
    d510:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
    d512:	2234      	movs	r2, #52	; 0x34
    d514:	2100      	movs	r1, #0
    d516:	4668      	mov	r0, sp
    d518:	f7fe f9e3 	bl	b8e2 <memset>
    snap.desc = &event.disconnect.conn;
    d51c:	a910      	add	r1, sp, #64	; 0x40
    d51e:	ab02      	add	r3, sp, #8
    d520:	f841 3d0c 	str.w	r3, [r1, #-12]!
    rc = ble_gap_find_snapshot(conn_handle, &snap);
    d524:	4620      	mov	r0, r4
    d526:	f7ff faa6 	bl	ca76 <ble_gap_find_snapshot>
    if (rc != 0) {
    d52a:	b108      	cbz	r0, d530 <ble_gap_conn_broken+0x26>
}
    d52c:	b010      	add	sp, #64	; 0x40
    d52e:	bd70      	pop	{r4, r5, r6, pc}
    ble_hs_lock();
    d530:	f002 fb2a 	bl	fb88 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
    d534:	4620      	mov	r0, r4
    d536:	f7ff fb7d 	bl	cc34 <ble_gap_update_entry_remove>
    d53a:	4606      	mov	r6, r0
    ble_hs_unlock();
    d53c:	f002 fb28 	bl	fb90 <ble_hs_unlock>
    if (entry != NULL) {
    d540:	b136      	cbz	r6, d550 <ble_gap_conn_broken+0x46>
        ble_gap_update_notify(conn_handle, reason);
    d542:	4629      	mov	r1, r5
    d544:	4620      	mov	r0, r4
    d546:	f7ff ffc1 	bl	d4cc <ble_gap_update_notify>
        ble_gap_update_entry_free(entry);
    d54a:	4630      	mov	r0, r6
    d54c:	f7ff fc3c 	bl	cdc8 <ble_gap_update_entry_free>
    ble_l2cap_sig_conn_broken(conn_handle, reason);
    d550:	4629      	mov	r1, r5
    d552:	4620      	mov	r0, r4
    d554:	f004 feec 	bl	12330 <ble_l2cap_sig_conn_broken>
    ble_sm_connection_broken(conn_handle);
    d558:	4620      	mov	r0, r4
    d55a:	f006 fc09 	bl	13d70 <ble_sm_connection_broken>
    ble_gatts_connection_broken(conn_handle);
    d55e:	4620      	mov	r0, r4
    d560:	f001 ffc2 	bl	f4e8 <ble_gatts_connection_broken>
    ble_gattc_connection_broken(conn_handle);
    d564:	4620      	mov	r0, r4
    d566:	f001 fa55 	bl	ea14 <ble_gattc_connection_broken>
    ble_hs_flow_connection_broken(conn_handle);;
    d56a:	4620      	mov	r0, r4
    d56c:	f003 fa52 	bl	10a14 <ble_hs_flow_connection_broken>
    ble_hs_atomic_conn_delete(conn_handle);
    d570:	4620      	mov	r0, r4
    d572:	f003 f818 	bl	105a6 <ble_hs_atomic_conn_delete>
    event.type = BLE_GAP_EVENT_DISCONNECT;
    d576:	2301      	movs	r3, #1
    d578:	f88d 3000 	strb.w	r3, [sp]
    event.disconnect.reason = reason;
    d57c:	9501      	str	r5, [sp, #4]
    ble_gap_event_listener_call(&event);
    d57e:	4668      	mov	r0, sp
    d580:	f7ff f9e6 	bl	c950 <ble_gap_event_listener_call>
    ble_gap_call_event_cb(&event, snap.cb, snap.cb_arg);
    d584:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d586:	990e      	ldr	r1, [sp, #56]	; 0x38
    d588:	4668      	mov	r0, sp
    d58a:	f7ff f90f 	bl	c7ac <ble_gap_call_event_cb>
    d58e:	e7cd      	b.n	d52c <ble_gap_conn_broken+0x22>

0000d590 <ble_gap_rx_disconn_complete>:
{
    d590:	b570      	push	{r4, r5, r6, lr}
    d592:	b08e      	sub	sp, #56	; 0x38
    d594:	4604      	mov	r4, r0
    uint16_t handle = le16toh(ev->conn_handle);
    d596:	f8b0 5001 	ldrh.w	r5, [r0, #1]
    d59a:	b2ae      	uxth	r6, r5
    if (ev->status == 0) {
    d59c:	7803      	ldrb	r3, [r0, #0]
    d59e:	b953      	cbnz	r3, d5b6 <ble_gap_rx_disconn_complete+0x26>
        ble_gap_conn_broken(handle, BLE_HS_HCI_ERR(ev->reason));
    d5a0:	78c1      	ldrb	r1, [r0, #3]
    d5a2:	b131      	cbz	r1, d5b2 <ble_gap_rx_disconn_complete+0x22>
    d5a4:	f501 7100 	add.w	r1, r1, #512	; 0x200
    d5a8:	4630      	mov	r0, r6
    d5aa:	f7ff ffae 	bl	d50a <ble_gap_conn_broken>
}
    d5ae:	b00e      	add	sp, #56	; 0x38
    d5b0:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_conn_broken(handle, BLE_HS_HCI_ERR(ev->reason));
    d5b2:	2100      	movs	r1, #0
    d5b4:	e7f8      	b.n	d5a8 <ble_gap_rx_disconn_complete+0x18>
        memset(&event, 0, sizeof event);
    d5b6:	2234      	movs	r2, #52	; 0x34
    d5b8:	2100      	movs	r1, #0
    d5ba:	a801      	add	r0, sp, #4
    d5bc:	f7fe f991 	bl	b8e2 <memset>
        event.type = BLE_GAP_EVENT_TERM_FAILURE;
    d5c0:	2306      	movs	r3, #6
    d5c2:	f88d 3004 	strb.w	r3, [sp, #4]
        event.term_failure.conn_handle = handle;
    d5c6:	f8ad 500c 	strh.w	r5, [sp, #12]
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
    d5ca:	7823      	ldrb	r3, [r4, #0]
    d5cc:	b153      	cbz	r3, d5e4 <ble_gap_rx_disconn_complete+0x54>
    d5ce:	f503 7300 	add.w	r3, r3, #512	; 0x200
    d5d2:	9302      	str	r3, [sp, #8]
        ble_gap_event_listener_call(&event);
    d5d4:	a801      	add	r0, sp, #4
    d5d6:	f7ff f9bb 	bl	c950 <ble_gap_event_listener_call>
        ble_gap_call_conn_event_cb(&event, handle);
    d5da:	4631      	mov	r1, r6
    d5dc:	a801      	add	r0, sp, #4
    d5de:	f7ff f9e1 	bl	c9a4 <ble_gap_call_conn_event_cb>
}
    d5e2:	e7e4      	b.n	d5ae <ble_gap_rx_disconn_complete+0x1e>
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
    d5e4:	2300      	movs	r3, #0
    d5e6:	e7f4      	b.n	d5d2 <ble_gap_rx_disconn_complete+0x42>

0000d5e8 <ble_gap_reset_state>:
{
    d5e8:	b510      	push	{r4, lr}
    d5ea:	4604      	mov	r4, r0
        conn_handle = ble_hs_atomic_first_conn_handle();
    d5ec:	f003 f806 	bl	105fc <ble_hs_atomic_first_conn_handle>
        if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
    d5f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d5f4:	4298      	cmp	r0, r3
    d5f6:	d003      	beq.n	d600 <ble_gap_reset_state+0x18>
        ble_gap_conn_broken(conn_handle, reason);
    d5f8:	4621      	mov	r1, r4
    d5fa:	f7ff ff86 	bl	d50a <ble_gap_conn_broken>
        conn_handle = ble_hs_atomic_first_conn_handle();
    d5fe:	e7f5      	b.n	d5ec <ble_gap_reset_state+0x4>
    if (ble_gap_adv_active_instance(0)) {
    d600:	2000      	movs	r0, #0
    d602:	f7ff f911 	bl	c828 <ble_gap_adv_active_instance>
    d606:	b918      	cbnz	r0, d610 <ble_gap_reset_state+0x28>
    ble_gap_master_failed(reason);
    d608:	4620      	mov	r0, r4
    d60a:	f7ff fbb1 	bl	cd70 <ble_gap_master_failed>
}
    d60e:	bd10      	pop	{r4, pc}
        ble_gap_adv_finished(0, reason, 0, 0);
    d610:	2300      	movs	r3, #0
    d612:	461a      	mov	r2, r3
    d614:	4621      	mov	r1, r4
    d616:	4618      	mov	r0, r3
    d618:	f7ff fb4a 	bl	ccb0 <ble_gap_adv_finished>
    d61c:	e7f4      	b.n	d608 <ble_gap_reset_state+0x20>
	...

0000d620 <ble_gap_rx_update_complete>:
{
    d620:	b5f0      	push	{r4, r5, r6, r7, lr}
    d622:	b091      	sub	sp, #68	; 0x44
    d624:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
    d626:	2234      	movs	r2, #52	; 0x34
    d628:	2100      	movs	r1, #0
    d62a:	a801      	add	r0, sp, #4
    d62c:	f7fe f959 	bl	b8e2 <memset>
    memset(&l2cap_params, 0, sizeof l2cap_params);
    d630:	2300      	movs	r3, #0
    d632:	930e      	str	r3, [sp, #56]	; 0x38
    d634:	930f      	str	r3, [sp, #60]	; 0x3c
    ble_hs_lock();
    d636:	f002 faa7 	bl	fb88 <ble_hs_lock>
    conn_handle = le16toh(ev->conn_handle);
    d63a:	8865      	ldrh	r5, [r4, #2]
    conn = ble_hs_conn_find(conn_handle);
    d63c:	4628      	mov	r0, r5
    d63e:	f003 f8ad 	bl	1079c <ble_hs_conn_find>
    if (conn != NULL) {
    d642:	b120      	cbz	r0, d64e <ble_gap_rx_update_complete+0x2e>
    d644:	4606      	mov	r6, r0
        switch (ev->status) {
    d646:	7863      	ldrb	r3, [r4, #1]
    d648:	b193      	cbz	r3, d670 <ble_gap_rx_update_complete+0x50>
    d64a:	2b1a      	cmp	r3, #26
    d64c:	d017      	beq.n	d67e <ble_gap_rx_update_complete+0x5e>
    if (l2cap_params.itvl_min == 0) {
    d64e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    d652:	b353      	cbz	r3, d6aa <ble_gap_rx_update_complete+0x8a>
    ble_hs_unlock();
    d654:	f002 fa9c 	bl	fb90 <ble_hs_unlock>
    if (l2cap_params.itvl_min != 0) {
    d658:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    d65c:	bb5b      	cbnz	r3, d6b6 <ble_gap_rx_update_complete+0x96>
        cb_status = BLE_HS_HCI_ERR(ev->status);
    d65e:	7861      	ldrb	r1, [r4, #1]
    d660:	b399      	cbz	r1, d6ca <ble_gap_rx_update_complete+0xaa>
    d662:	f501 7100 	add.w	r1, r1, #512	; 0x200
        ble_gap_update_notify(conn_handle, cb_status);
    d666:	4628      	mov	r0, r5
    d668:	f7ff ff30 	bl	d4cc <ble_gap_update_notify>
}
    d66c:	b011      	add	sp, #68	; 0x44
    d66e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            conn->bhc_itvl = le16toh(ev->conn_itvl);
    d670:	88a3      	ldrh	r3, [r4, #4]
    d672:	8383      	strh	r3, [r0, #28]
            conn->bhc_latency = le16toh(ev->conn_latency);
    d674:	88e3      	ldrh	r3, [r4, #6]
    d676:	83c3      	strh	r3, [r0, #30]
            conn->bhc_supervision_timeout = le16toh(ev->supervision_timeout);
    d678:	8923      	ldrh	r3, [r4, #8]
    d67a:	8403      	strh	r3, [r0, #32]
            break;
    d67c:	e7e7      	b.n	d64e <ble_gap_rx_update_complete+0x2e>
            entry = ble_gap_update_entry_find(conn_handle, NULL);
    d67e:	2100      	movs	r1, #0
    d680:	4628      	mov	r0, r5
    d682:	f7ff f92d 	bl	c8e0 <ble_gap_update_entry_find>
            if (entry != NULL && !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
    d686:	4607      	mov	r7, r0
    d688:	2800      	cmp	r0, #0
    d68a:	d0e0      	beq.n	d64e <ble_gap_rx_update_complete+0x2e>
    d68c:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    d690:	f013 0f01 	tst.w	r3, #1
    d694:	d1db      	bne.n	d64e <ble_gap_rx_update_complete+0x2e>
                ble_gap_update_to_l2cap(&entry->params, &l2cap_params);
    d696:	a90e      	add	r1, sp, #56	; 0x38
    d698:	3004      	adds	r0, #4
    d69a:	f7ff f8bb 	bl	c814 <ble_gap_update_to_l2cap>
    return os_time_get();
    d69e:	f7fd ff0b 	bl	b4b8 <os_time_get>
                entry->exp_os_ticks = ble_npl_time_get() +
    d6a2:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
    d6a6:	6138      	str	r0, [r7, #16]
    d6a8:	e7d1      	b.n	d64e <ble_gap_rx_update_complete+0x2e>
        entry = ble_gap_update_entry_remove(conn_handle);
    d6aa:	4628      	mov	r0, r5
    d6ac:	f7ff fac2 	bl	cc34 <ble_gap_update_entry_remove>
        ble_gap_update_entry_free(entry);
    d6b0:	f7ff fb8a 	bl	cdc8 <ble_gap_update_entry_free>
    d6b4:	e7ce      	b.n	d654 <ble_gap_rx_update_complete+0x34>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
    d6b6:	2300      	movs	r3, #0
    d6b8:	4a05      	ldr	r2, [pc, #20]	; (d6d0 <ble_gap_rx_update_complete+0xb0>)
    d6ba:	a90e      	add	r1, sp, #56	; 0x38
    d6bc:	4628      	mov	r0, r5
    d6be:	f004 fdd8 	bl	12272 <ble_l2cap_sig_update>
        if (rc == 0) {
    d6c2:	4601      	mov	r1, r0
    d6c4:	2800      	cmp	r0, #0
    d6c6:	d1ce      	bne.n	d666 <ble_gap_rx_update_complete+0x46>
    d6c8:	e7d0      	b.n	d66c <ble_gap_rx_update_complete+0x4c>
        cb_status = BLE_HS_HCI_ERR(ev->status);
    d6ca:	2100      	movs	r1, #0
    d6cc:	e7cb      	b.n	d666 <ble_gap_rx_update_complete+0x46>
    d6ce:	bf00      	nop
    d6d0:	0000d6d5 	.word	0x0000d6d5

0000d6d4 <ble_gap_update_l2cap_cb>:
{
    d6d4:	b570      	push	{r4, r5, r6, lr}
    d6d6:	4605      	mov	r5, r0
    d6d8:	460e      	mov	r6, r1
    ble_hs_lock();
    d6da:	f002 fa55 	bl	fb88 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
    d6de:	4628      	mov	r0, r5
    d6e0:	f7ff faa8 	bl	cc34 <ble_gap_update_entry_remove>
    d6e4:	4604      	mov	r4, r0
    ble_hs_unlock();
    d6e6:	f002 fa53 	bl	fb90 <ble_hs_unlock>
    if (entry != NULL) {
    d6ea:	b11c      	cbz	r4, d6f4 <ble_gap_update_l2cap_cb+0x20>
        ble_gap_update_entry_free(entry);
    d6ec:	4620      	mov	r0, r4
    d6ee:	f7ff fb6b 	bl	cdc8 <ble_gap_update_entry_free>
        if (status != 0) {
    d6f2:	b906      	cbnz	r6, d6f6 <ble_gap_update_l2cap_cb+0x22>
}
    d6f4:	bd70      	pop	{r4, r5, r6, pc}
            ble_gap_update_notify(conn_handle, status);
    d6f6:	4631      	mov	r1, r6
    d6f8:	4628      	mov	r0, r5
    d6fa:	f7ff fee7 	bl	d4cc <ble_gap_update_notify>
}
    d6fe:	e7f9      	b.n	d6f4 <ble_gap_update_l2cap_cb+0x20>

0000d700 <ble_gap_update_failed>:
{
    d700:	b570      	push	{r4, r5, r6, lr}
    d702:	4604      	mov	r4, r0
    d704:	460d      	mov	r5, r1
    ble_hs_lock();
    d706:	f002 fa3f 	bl	fb88 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
    d70a:	4620      	mov	r0, r4
    d70c:	f7ff fa92 	bl	cc34 <ble_gap_update_entry_remove>
    d710:	4606      	mov	r6, r0
    ble_hs_unlock();
    d712:	f002 fa3d 	bl	fb90 <ble_hs_unlock>
    ble_gap_update_entry_free(entry);
    d716:	4630      	mov	r0, r6
    d718:	f7ff fb56 	bl	cdc8 <ble_gap_update_entry_free>
    ble_gap_update_notify(conn_handle, status);
    d71c:	4629      	mov	r1, r5
    d71e:	4620      	mov	r0, r4
    d720:	f7ff fed4 	bl	d4cc <ble_gap_update_notify>
}
    d724:	bd70      	pop	{r4, r5, r6, pc}

0000d726 <ble_gap_rx_param_req>:
{
    d726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d72a:	b094      	sub	sp, #80	; 0x50
    d72c:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
    d72e:	f04f 0834 	mov.w	r8, #52	; 0x34
    d732:	4642      	mov	r2, r8
    d734:	2100      	movs	r1, #0
    d736:	a801      	add	r0, sp, #4
    d738:	f7fe f8d3 	bl	b8e2 <memset>
    peer_params.itvl_min = le16toh(ev->min_interval);
    d73c:	f8b4 3003 	ldrh.w	r3, [r4, #3]
    d740:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    peer_params.itvl_max = le16toh(ev->max_interval);
    d744:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    d748:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    peer_params.latency = le16toh(ev->latency);
    d74c:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    d750:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    peer_params.supervision_timeout = le16toh(ev->timeout);
    d754:	f8b4 3009 	ldrh.w	r3, [r4, #9]
    d758:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    peer_params.min_ce_len = 0;
    d75c:	2300      	movs	r3, #0
    d75e:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    peer_params.max_ce_len = 0;
    d762:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    self_params = peer_params;
    d766:	ae0e      	add	r6, sp, #56	; 0x38
    d768:	ad11      	add	r5, sp, #68	; 0x44
    d76a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    d76e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    conn_handle = le16toh(ev->conn_handle);
    d772:	f8b4 7001 	ldrh.w	r7, [r4, #1]
    d776:	b2bc      	uxth	r4, r7
    memset(&event, 0, sizeof event);
    d778:	4642      	mov	r2, r8
    d77a:	4619      	mov	r1, r3
    d77c:	a801      	add	r0, sp, #4
    d77e:	f7fe f8b0 	bl	b8e2 <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE_REQ;
    d782:	2304      	movs	r3, #4
    d784:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
    d788:	f8ad 7010 	strh.w	r7, [sp, #16]
    event.conn_update_req.self_params = &self_params;
    d78c:	9603      	str	r6, [sp, #12]
    event.conn_update_req.peer_params = &peer_params;
    d78e:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
    d790:	4621      	mov	r1, r4
    d792:	eb0d 0003 	add.w	r0, sp, r3
    d796:	f7ff f905 	bl	c9a4 <ble_gap_call_conn_event_cb>
    if (rc == 0) {
    d79a:	b948      	cbnz	r0, d7b0 <ble_gap_rx_param_req+0x8a>
        rc = ble_gap_tx_param_pos_reply(conn_handle, &self_params);
    d79c:	a90e      	add	r1, sp, #56	; 0x38
    d79e:	4620      	mov	r0, r4
    d7a0:	f7ff f9f5 	bl	cb8e <ble_gap_tx_param_pos_reply>
        if (rc != 0) {
    d7a4:	4601      	mov	r1, r0
    d7a6:	b138      	cbz	r0, d7b8 <ble_gap_rx_param_req+0x92>
            ble_gap_update_failed(conn_handle, rc);
    d7a8:	4620      	mov	r0, r4
    d7aa:	f7ff ffa9 	bl	d700 <ble_gap_update_failed>
    d7ae:	e003      	b.n	d7b8 <ble_gap_rx_param_req+0x92>
        ble_gap_tx_param_neg_reply(conn_handle, rc);
    d7b0:	b2c1      	uxtb	r1, r0
    d7b2:	4620      	mov	r0, r4
    d7b4:	f7ff fa0c 	bl	cbd0 <ble_gap_tx_param_neg_reply>
}
    d7b8:	b014      	add	sp, #80	; 0x50
    d7ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0000d7c0 <ble_gap_update_params>:
{
    d7c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d7c4:	b082      	sub	sp, #8
    d7c6:	4606      	mov	r6, r0
    d7c8:	460d      	mov	r5, r1
    if (!ble_gap_validate_conn_params(params)) {
    d7ca:	4608      	mov	r0, r1
    d7cc:	f7ff f89c 	bl	c908 <ble_gap_validate_conn_params>
    d7d0:	2800      	cmp	r0, #0
    d7d2:	d05f      	beq.n	d894 <ble_gap_update_params+0xd4>
    memset(&l2cap_params, 0, sizeof l2cap_params);
    d7d4:	2300      	movs	r3, #0
    d7d6:	9300      	str	r3, [sp, #0]
    d7d8:	9301      	str	r3, [sp, #4]
    ble_hs_lock();
    d7da:	f002 f9d5 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    d7de:	4630      	mov	r0, r6
    d7e0:	f002 ffdc 	bl	1079c <ble_hs_conn_find>
    if (conn == NULL) {
    d7e4:	4604      	mov	r4, r0
    d7e6:	b340      	cbz	r0, d83a <ble_gap_update_params+0x7a>
    dup = ble_gap_update_entry_find(conn_handle, NULL);
    d7e8:	2100      	movs	r1, #0
    d7ea:	4630      	mov	r0, r6
    d7ec:	f7ff f878 	bl	c8e0 <ble_gap_update_entry_find>
    if (dup != NULL) {
    d7f0:	b118      	cbz	r0, d7fa <ble_gap_update_params+0x3a>
        rc = BLE_HS_EALREADY;
    d7f2:	2402      	movs	r4, #2
    l2cap_update = 0;
    d7f4:	2700      	movs	r7, #0
    entry = NULL;
    d7f6:	46b8      	mov	r8, r7
    d7f8:	e022      	b.n	d840 <ble_gap_update_params+0x80>
    entry = ble_gap_update_entry_alloc();
    d7fa:	f7ff fbf1 	bl	cfe0 <ble_gap_update_entry_alloc>
    if (entry == NULL) {
    d7fe:	4680      	mov	r8, r0
    d800:	b390      	cbz	r0, d868 <ble_gap_update_params+0xa8>
    entry->conn_handle = conn_handle;
    d802:	8286      	strh	r6, [r0, #20]
    entry->params = *params;
    d804:	1d03      	adds	r3, r0, #4
    d806:	6828      	ldr	r0, [r5, #0]
    d808:	6869      	ldr	r1, [r5, #4]
    d80a:	68aa      	ldr	r2, [r5, #8]
    d80c:	c307      	stmia	r3!, {r0, r1, r2}
    d80e:	f7fd fe53 	bl	b4b8 <os_time_get>
    entry->exp_os_ticks = ble_npl_time_get() +
    d812:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
    d816:	f8c8 0010 	str.w	r0, [r8, #16]
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
    d81a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d81c:	f013 0f02 	tst.w	r3, #2
    d820:	d104      	bne.n	d82c <ble_gap_update_params+0x6c>
            !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
    d822:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
    d826:	f013 0f01 	tst.w	r3, #1
    d82a:	d020      	beq.n	d86e <ble_gap_update_params+0xae>
        rc = ble_gap_update_tx(conn_handle, params);
    d82c:	4629      	mov	r1, r5
    d82e:	4630      	mov	r0, r6
    d830:	f7ff f9df 	bl	cbf2 <ble_gap_update_tx>
    d834:	4604      	mov	r4, r0
    l2cap_update = 0;
    d836:	2700      	movs	r7, #0
    d838:	e002      	b.n	d840 <ble_gap_update_params+0x80>
        rc = BLE_HS_ENOTCONN;
    d83a:	2407      	movs	r4, #7
    l2cap_update = 0;
    d83c:	2700      	movs	r7, #0
    entry = NULL;
    d83e:	46b8      	mov	r8, r7
    ble_hs_unlock();
    d840:	f002 f9a6 	bl	fb90 <ble_hs_unlock>
    if (!l2cap_update) {
    d844:	b9b7      	cbnz	r7, d874 <ble_gap_update_params+0xb4>
        ble_hs_timer_resched();
    d846:	f002 fa7b 	bl	fd40 <ble_hs_timer_resched>
    ble_hs_lock();
    d84a:	f002 f99d 	bl	fb88 <ble_hs_lock>
    if (rc == 0) {
    d84e:	b9ec      	cbnz	r4, d88c <ble_gap_update_params+0xcc>
        SLIST_INSERT_HEAD(&ble_gap_update_entries, entry, next);
    d850:	4b11      	ldr	r3, [pc, #68]	; (d898 <ble_gap_update_params+0xd8>)
    d852:	681a      	ldr	r2, [r3, #0]
    d854:	f8c8 2000 	str.w	r2, [r8]
    d858:	f8c3 8000 	str.w	r8, [r3]
    ble_hs_unlock();
    d85c:	f002 f998 	bl	fb90 <ble_hs_unlock>
}
    d860:	4620      	mov	r0, r4
    d862:	b002      	add	sp, #8
    d864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
    d868:	2406      	movs	r4, #6
    l2cap_update = 0;
    d86a:	2700      	movs	r7, #0
    d86c:	e7e8      	b.n	d840 <ble_gap_update_params+0x80>
        rc = 0;
    d86e:	2400      	movs	r4, #0
        l2cap_update = 1;
    d870:	2701      	movs	r7, #1
    d872:	e7e5      	b.n	d840 <ble_gap_update_params+0x80>
        ble_gap_update_to_l2cap(params, &l2cap_params);
    d874:	4669      	mov	r1, sp
    d876:	4628      	mov	r0, r5
    d878:	f7fe ffcc 	bl	c814 <ble_gap_update_to_l2cap>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
    d87c:	2300      	movs	r3, #0
    d87e:	4a07      	ldr	r2, [pc, #28]	; (d89c <ble_gap_update_params+0xdc>)
    d880:	4669      	mov	r1, sp
    d882:	4630      	mov	r0, r6
    d884:	f004 fcf5 	bl	12272 <ble_l2cap_sig_update>
    d888:	4604      	mov	r4, r0
    d88a:	e7de      	b.n	d84a <ble_gap_update_params+0x8a>
        ble_gap_update_entry_free(entry);
    d88c:	4640      	mov	r0, r8
    d88e:	f7ff fa9b 	bl	cdc8 <ble_gap_update_entry_free>
    d892:	e7e3      	b.n	d85c <ble_gap_update_params+0x9c>
        return BLE_HS_EINVAL;
    d894:	2403      	movs	r4, #3
    d896:	e7e3      	b.n	d860 <ble_gap_update_params+0xa0>
    d898:	20007098 	.word	0x20007098
    d89c:	0000d6d5 	.word	0x0000d6d5

0000d8a0 <ble_gap_unpair>:
{
    d8a0:	b510      	push	{r4, lr}
    d8a2:	b082      	sub	sp, #8
    d8a4:	4604      	mov	r4, r0
    if (ble_addr_cmp(peer_addr, BLE_ADDR_ANY) == 0) {
    d8a6:	2300      	movs	r3, #0
    d8a8:	9300      	str	r3, [sp, #0]
    d8aa:	f8cd 3003 	str.w	r3, [sp, #3]

static inline int ble_addr_cmp(const ble_addr_t *a, const ble_addr_t *b)
{
    int type_diff;

    type_diff = a->type - b->type;
    d8ae:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
    d8b0:	b928      	cbnz	r0, d8be <ble_gap_unpair+0x1e>
        return type_diff;
    }

    return memcmp(a->val, b->val, sizeof(a->val));
    d8b2:	2206      	movs	r2, #6
    d8b4:	f10d 0101 	add.w	r1, sp, #1
    d8b8:	1c60      	adds	r0, r4, #1
    d8ba:	f7fd ffc5 	bl	b848 <memcmp>
    d8be:	b198      	cbz	r0, d8e8 <ble_gap_unpair+0x48>
    ble_hs_lock();
    d8c0:	f002 f962 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find_by_addr(peer_addr);
    d8c4:	4620      	mov	r0, r4
    d8c6:	f003 f80b 	bl	108e0 <ble_hs_conn_find_by_addr>
    if (conn != NULL) {
    d8ca:	b110      	cbz	r0, d8d2 <ble_gap_unpair+0x32>
        ble_gap_terminate_with_conn(conn, BLE_ERR_REM_USER_CONN_TERM);
    d8cc:	2113      	movs	r1, #19
    d8ce:	f7ff fdc7 	bl	d460 <ble_gap_terminate_with_conn>
    ble_hs_unlock();
    d8d2:	f002 f95d 	bl	fb90 <ble_hs_unlock>
    ble_hs_pvcy_remove_entry(peer_addr->type,
    d8d6:	1c61      	adds	r1, r4, #1
    d8d8:	7820      	ldrb	r0, [r4, #0]
    d8da:	f003 ffb2 	bl	11842 <ble_hs_pvcy_remove_entry>
    return ble_store_util_delete_peer(peer_addr);
    d8de:	4620      	mov	r0, r4
    d8e0:	f006 fd6a 	bl	143b8 <ble_store_util_delete_peer>
}
    d8e4:	b002      	add	sp, #8
    d8e6:	bd10      	pop	{r4, pc}
        return BLE_HS_EINVAL;
    d8e8:	2003      	movs	r0, #3
    d8ea:	e7fb      	b.n	d8e4 <ble_gap_unpair+0x44>

0000d8ec <ble_gap_unpair_oldest_peer>:
{
    d8ec:	b500      	push	{lr}
    d8ee:	b085      	sub	sp, #20
    rc = ble_store_util_bonded_peers(
    d8f0:	2201      	movs	r2, #1
    d8f2:	a901      	add	r1, sp, #4
    d8f4:	a802      	add	r0, sp, #8
    d8f6:	f006 fd37 	bl	14368 <ble_store_util_bonded_peers>
    if (rc != 0) {
    d8fa:	4603      	mov	r3, r0
    d8fc:	b928      	cbnz	r0, d90a <ble_gap_unpair_oldest_peer+0x1e>
    if (num_peers == 0) {
    d8fe:	9b01      	ldr	r3, [sp, #4]
    d900:	b13b      	cbz	r3, d912 <ble_gap_unpair_oldest_peer+0x26>
    rc = ble_gap_unpair(&oldest_peer_id_addr);
    d902:	a802      	add	r0, sp, #8
    d904:	f7ff ffcc 	bl	d8a0 <ble_gap_unpair>
    d908:	4603      	mov	r3, r0
}
    d90a:	4618      	mov	r0, r3
    d90c:	b005      	add	sp, #20
    d90e:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_ENOENT;
    d912:	2305      	movs	r3, #5
    d914:	e7f9      	b.n	d90a <ble_gap_unpair_oldest_peer+0x1e>

0000d916 <ble_gap_unpair_oldest_except>:
{
    d916:	b570      	push	{r4, r5, r6, lr}
    d918:	b088      	sub	sp, #32
    d91a:	4605      	mov	r5, r0
    rc = ble_store_util_bonded_peers(
    d91c:	2203      	movs	r2, #3
    d91e:	a901      	add	r1, sp, #4
    d920:	a802      	add	r0, sp, #8
    d922:	f006 fd21 	bl	14368 <ble_store_util_bonded_peers>
    if (rc != 0) {
    d926:	4604      	mov	r4, r0
    d928:	bb18      	cbnz	r0, d972 <ble_gap_unpair_oldest_except+0x5c>
    if (num_peers == 0) {
    d92a:	9e01      	ldr	r6, [sp, #4]
    d92c:	b91e      	cbnz	r6, d936 <ble_gap_unpair_oldest_except+0x20>
        return BLE_HS_ENOENT;
    d92e:	2405      	movs	r4, #5
    d930:	e01f      	b.n	d972 <ble_gap_unpair_oldest_except+0x5c>
        if (ble_addr_cmp(peer_addr, &peer_id_addrs[i]) != 0) {
    d932:	b9a8      	cbnz	r0, d960 <ble_gap_unpair_oldest_except+0x4a>
    for (i = 0; i < num_peers; i++) {
    d934:	3401      	adds	r4, #1
    d936:	42a6      	cmp	r6, r4
    d938:	dd12      	ble.n	d960 <ble_gap_unpair_oldest_except+0x4a>
    type_diff = a->type - b->type;
    d93a:	7828      	ldrb	r0, [r5, #0]
    d93c:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    d940:	aa08      	add	r2, sp, #32
    d942:	4413      	add	r3, r2
    d944:	f813 3c18 	ldrb.w	r3, [r3, #-24]
    if (type_diff != 0) {
    d948:	1ac0      	subs	r0, r0, r3
    d94a:	d1f2      	bne.n	d932 <ble_gap_unpair_oldest_except+0x1c>
    return memcmp(a->val, b->val, sizeof(a->val));
    d94c:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    d950:	ab02      	add	r3, sp, #8
    d952:	4419      	add	r1, r3
    d954:	2206      	movs	r2, #6
    d956:	3101      	adds	r1, #1
    d958:	1c68      	adds	r0, r5, #1
    d95a:	f7fd ff75 	bl	b848 <memcmp>
    d95e:	e7e8      	b.n	d932 <ble_gap_unpair_oldest_except+0x1c>
    if (i >= num_peers) {
    d960:	42a6      	cmp	r6, r4
    d962:	dd09      	ble.n	d978 <ble_gap_unpair_oldest_except+0x62>
    return ble_gap_unpair(&peer_id_addrs[i]);
    d964:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    d968:	ab02      	add	r3, sp, #8
    d96a:	1918      	adds	r0, r3, r4
    d96c:	f7ff ff98 	bl	d8a0 <ble_gap_unpair>
    d970:	4604      	mov	r4, r0
}
    d972:	4620      	mov	r0, r4
    d974:	b008      	add	sp, #32
    d976:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOMEM;
    d978:	2406      	movs	r4, #6
    d97a:	e7fa      	b.n	d972 <ble_gap_unpair_oldest_except+0x5c>

0000d97c <ble_gap_passkey_event>:
{
    d97c:	b530      	push	{r4, r5, lr}
    d97e:	b08f      	sub	sp, #60	; 0x3c
    d980:	4604      	mov	r4, r0
    d982:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
    d984:	2234      	movs	r2, #52	; 0x34
    d986:	2100      	movs	r1, #0
    d988:	a801      	add	r0, sp, #4
    d98a:	f7fd ffaa 	bl	b8e2 <memset>
    event.type = BLE_GAP_EVENT_PASSKEY_ACTION;
    d98e:	230b      	movs	r3, #11
    d990:	f88d 3004 	strb.w	r3, [sp, #4]
    event.passkey.conn_handle = conn_handle;
    d994:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.passkey.params = *passkey_params;
    d998:	ab02      	add	r3, sp, #8
    d99a:	e895 0003 	ldmia.w	r5, {r0, r1}
    d99e:	e883 0003 	stmia.w	r3, {r0, r1}
    ble_gap_call_conn_event_cb(&event, conn_handle);
    d9a2:	4621      	mov	r1, r4
    d9a4:	a801      	add	r0, sp, #4
    d9a6:	f7fe fffd 	bl	c9a4 <ble_gap_call_conn_event_cb>
}
    d9aa:	b00f      	add	sp, #60	; 0x3c
    d9ac:	bd30      	pop	{r4, r5, pc}

0000d9ae <ble_gap_enc_event>:
{
    d9ae:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9b0:	b08f      	sub	sp, #60	; 0x3c
    d9b2:	4604      	mov	r4, r0
    d9b4:	460d      	mov	r5, r1
    d9b6:	4616      	mov	r6, r2
    d9b8:	461f      	mov	r7, r3
    memset(&event, 0, sizeof event);
    d9ba:	2234      	movs	r2, #52	; 0x34
    d9bc:	2100      	movs	r1, #0
    d9be:	a801      	add	r0, sp, #4
    d9c0:	f7fd ff8f 	bl	b8e2 <memset>
    event.type = BLE_GAP_EVENT_ENC_CHANGE;
    d9c4:	230a      	movs	r3, #10
    d9c6:	f88d 3004 	strb.w	r3, [sp, #4]
    event.enc_change.conn_handle = conn_handle;
    d9ca:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.enc_change.status = status;
    d9ce:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
    d9d0:	a801      	add	r0, sp, #4
    d9d2:	f7fe ffbd 	bl	c950 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
    d9d6:	4621      	mov	r1, r4
    d9d8:	a801      	add	r0, sp, #4
    d9da:	f7fe ffe3 	bl	c9a4 <ble_gap_call_conn_event_cb>
    if (status != 0) {
    d9de:	b90d      	cbnz	r5, d9e4 <ble_gap_enc_event+0x36>
    if (security_restored) {
    d9e0:	b916      	cbnz	r6, d9e8 <ble_gap_enc_event+0x3a>
    if (bonded) {
    d9e2:	b92f      	cbnz	r7, d9f0 <ble_gap_enc_event+0x42>
}
    d9e4:	b00f      	add	sp, #60	; 0x3c
    d9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ble_gatts_bonding_restored(conn_handle);
    d9e8:	4620      	mov	r0, r4
    d9ea:	f001 ff69 	bl	f8c0 <ble_gatts_bonding_restored>
        return;
    d9ee:	e7f9      	b.n	d9e4 <ble_gap_enc_event+0x36>
        ble_gatts_bonding_established(conn_handle);
    d9f0:	4620      	mov	r0, r4
    d9f2:	f001 ff25 	bl	f840 <ble_gatts_bonding_established>
    d9f6:	e7f5      	b.n	d9e4 <ble_gap_enc_event+0x36>

0000d9f8 <ble_gap_identity_event>:
{
    d9f8:	b510      	push	{r4, lr}
    d9fa:	b08e      	sub	sp, #56	; 0x38
    d9fc:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
    d9fe:	2234      	movs	r2, #52	; 0x34
    da00:	2100      	movs	r1, #0
    da02:	a801      	add	r0, sp, #4
    da04:	f7fd ff6d 	bl	b8e2 <memset>
    event.type = BLE_GAP_EVENT_IDENTITY_RESOLVED;
    da08:	2310      	movs	r3, #16
    da0a:	f88d 3004 	strb.w	r3, [sp, #4]
    event.identity_resolved.conn_handle = conn_handle;
    da0e:	f8ad 4008 	strh.w	r4, [sp, #8]
    ble_gap_call_conn_event_cb(&event, conn_handle);
    da12:	4621      	mov	r1, r4
    da14:	a801      	add	r0, sp, #4
    da16:	f7fe ffc5 	bl	c9a4 <ble_gap_call_conn_event_cb>
}
    da1a:	b00e      	add	sp, #56	; 0x38
    da1c:	bd10      	pop	{r4, pc}

0000da1e <ble_gap_repeat_pairing_event>:
{
    da1e:	b510      	push	{r4, lr}
    da20:	b08e      	sub	sp, #56	; 0x38
    da22:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
    da24:	2234      	movs	r2, #52	; 0x34
    da26:	2100      	movs	r1, #0
    da28:	a801      	add	r0, sp, #4
    da2a:	f7fd ff5a 	bl	b8e2 <memset>
    event.type = BLE_GAP_EVENT_REPEAT_PAIRING;
    da2e:	2311      	movs	r3, #17
    da30:	f88d 3004 	strb.w	r3, [sp, #4]
    event.repeat_pairing = *rp;
    da34:	6820      	ldr	r0, [r4, #0]
    da36:	9002      	str	r0, [sp, #8]
    da38:	88a3      	ldrh	r3, [r4, #4]
    da3a:	f8ad 300c 	strh.w	r3, [sp, #12]
    rc = ble_gap_call_conn_event_cb(&event, rp->conn_handle);
    da3e:	8821      	ldrh	r1, [r4, #0]
    da40:	a801      	add	r0, sp, #4
    da42:	f7fe ffaf 	bl	c9a4 <ble_gap_call_conn_event_cb>
}
    da46:	b00e      	add	sp, #56	; 0x38
    da48:	bd10      	pop	{r4, pc}

0000da4a <ble_gap_notify_rx_event>:
{
    da4a:	b5f0      	push	{r4, r5, r6, r7, lr}
    da4c:	b08f      	sub	sp, #60	; 0x3c
    da4e:	4604      	mov	r4, r0
    da50:	460f      	mov	r7, r1
    da52:	4616      	mov	r6, r2
    da54:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
    da56:	2234      	movs	r2, #52	; 0x34
    da58:	2100      	movs	r1, #0
    da5a:	a801      	add	r0, sp, #4
    da5c:	f7fd ff41 	bl	b8e2 <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_RX;
    da60:	230c      	movs	r3, #12
    da62:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_rx.conn_handle = conn_handle;
    da66:	f8ad 400e 	strh.w	r4, [sp, #14]
    event.notify_rx.attr_handle = attr_handle;
    da6a:	f8ad 700c 	strh.w	r7, [sp, #12]
    event.notify_rx.om = om;
    da6e:	9602      	str	r6, [sp, #8]
    event.notify_rx.indication = is_indication;
    da70:	f04f 0300 	mov.w	r3, #0
    da74:	f365 0300 	bfi	r3, r5, #0, #1
    da78:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
    da7c:	a801      	add	r0, sp, #4
    da7e:	f7fe ff67 	bl	c950 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
    da82:	4621      	mov	r1, r4
    da84:	a801      	add	r0, sp, #4
    da86:	f7fe ff8d 	bl	c9a4 <ble_gap_call_conn_event_cb>
    os_mbuf_free_chain(event.notify_rx.om);
    da8a:	9802      	ldr	r0, [sp, #8]
    da8c:	f7fc fc1a 	bl	a2c4 <os_mbuf_free_chain>
}
    da90:	b00f      	add	sp, #60	; 0x3c
    da92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000da94 <ble_gap_notify_tx_event>:
{
    da94:	b5f0      	push	{r4, r5, r6, r7, lr}
    da96:	b08f      	sub	sp, #60	; 0x3c
    da98:	4607      	mov	r7, r0
    da9a:	460c      	mov	r4, r1
    da9c:	4616      	mov	r6, r2
    da9e:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
    daa0:	2234      	movs	r2, #52	; 0x34
    daa2:	2100      	movs	r1, #0
    daa4:	a801      	add	r0, sp, #4
    daa6:	f7fd ff1c 	bl	b8e2 <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_TX;
    daaa:	230d      	movs	r3, #13
    daac:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_tx.conn_handle = conn_handle;
    dab0:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.notify_tx.status = status;
    dab4:	9702      	str	r7, [sp, #8]
    event.notify_tx.attr_handle = attr_handle;
    dab6:	f8ad 600e 	strh.w	r6, [sp, #14]
    event.notify_tx.indication = is_indication;
    daba:	f04f 0300 	mov.w	r3, #0
    dabe:	f365 0300 	bfi	r3, r5, #0, #1
    dac2:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
    dac6:	a801      	add	r0, sp, #4
    dac8:	f7fe ff42 	bl	c950 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
    dacc:	4621      	mov	r1, r4
    dace:	a801      	add	r0, sp, #4
    dad0:	f7fe ff68 	bl	c9a4 <ble_gap_call_conn_event_cb>
}
    dad4:	b00f      	add	sp, #60	; 0x3c
    dad6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000dad8 <ble_gap_subscribe_event>:
{
    dad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dada:	b08f      	sub	sp, #60	; 0x3c
    dadc:	4605      	mov	r5, r0
    dade:	460f      	mov	r7, r1
    dae0:	4616      	mov	r6, r2
    dae2:	461c      	mov	r4, r3
    memset(&event, 0, sizeof event);
    dae4:	2234      	movs	r2, #52	; 0x34
    dae6:	2100      	movs	r1, #0
    dae8:	a801      	add	r0, sp, #4
    daea:	f7fd fefa 	bl	b8e2 <memset>
    event.type = BLE_GAP_EVENT_SUBSCRIBE;
    daee:	230e      	movs	r3, #14
    daf0:	f88d 3004 	strb.w	r3, [sp, #4]
    event.subscribe.conn_handle = conn_handle;
    daf4:	f8ad 5008 	strh.w	r5, [sp, #8]
    event.subscribe.attr_handle = attr_handle;
    daf8:	f8ad 700a 	strh.w	r7, [sp, #10]
    event.subscribe.reason = reason;
    dafc:	f88d 600c 	strb.w	r6, [sp, #12]
    event.subscribe.cur_notify = !!cur_notify;
    db00:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    db04:	3200      	adds	r2, #0
    db06:	bf18      	it	ne
    db08:	2201      	movne	r2, #1
    db0a:	1c23      	adds	r3, r4, #0
    db0c:	bf18      	it	ne
    db0e:	2301      	movne	r3, #1
    db10:	f362 0341 	bfi	r3, r2, #1, #1
    event.subscribe.prev_indicate = !!prev_indicate;
    db14:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
    db18:	3200      	adds	r2, #0
    db1a:	bf18      	it	ne
    db1c:	2201      	movne	r2, #1
    db1e:	f362 0382 	bfi	r3, r2, #2, #1
    event.subscribe.cur_indicate = !!cur_indicate;
    db22:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    db26:	3200      	adds	r2, #0
    db28:	bf18      	it	ne
    db2a:	2201      	movne	r2, #1
    db2c:	f362 03c3 	bfi	r3, r2, #3, #1
    db30:	f88d 300d 	strb.w	r3, [sp, #13]
    ble_gap_event_listener_call(&event);
    db34:	a801      	add	r0, sp, #4
    db36:	f7fe ff0b 	bl	c950 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
    db3a:	4629      	mov	r1, r5
    db3c:	a801      	add	r0, sp, #4
    db3e:	f7fe ff31 	bl	c9a4 <ble_gap_call_conn_event_cb>
}
    db42:	b00f      	add	sp, #60	; 0x3c
    db44:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000db46 <ble_gap_mtu_event>:
{
    db46:	b570      	push	{r4, r5, r6, lr}
    db48:	b08e      	sub	sp, #56	; 0x38
    db4a:	4604      	mov	r4, r0
    db4c:	460e      	mov	r6, r1
    db4e:	4615      	mov	r5, r2
    memset(&event, 0, sizeof event);
    db50:	2234      	movs	r2, #52	; 0x34
    db52:	2100      	movs	r1, #0
    db54:	a801      	add	r0, sp, #4
    db56:	f7fd fec4 	bl	b8e2 <memset>
    event.type = BLE_GAP_EVENT_MTU;
    db5a:	230f      	movs	r3, #15
    db5c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.mtu.conn_handle = conn_handle;
    db60:	f8ad 4008 	strh.w	r4, [sp, #8]
    event.mtu.channel_id = cid;
    db64:	f8ad 600a 	strh.w	r6, [sp, #10]
    event.mtu.value = mtu;
    db68:	f8ad 500c 	strh.w	r5, [sp, #12]
    ble_gap_event_listener_call(&event);
    db6c:	a801      	add	r0, sp, #4
    db6e:	f7fe feef 	bl	c950 <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
    db72:	4621      	mov	r1, r4
    db74:	a801      	add	r0, sp, #4
    db76:	f7fe ff15 	bl	c9a4 <ble_gap_call_conn_event_cb>
}
    db7a:	b00e      	add	sp, #56	; 0x38
    db7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000db80 <ble_gap_preempt_no_lock>:
{
    db80:	b508      	push	{r3, lr}
    rc = ble_gap_adv_stop_no_lock();
    db82:	f7ff fc33 	bl	d3ec <ble_gap_adv_stop_no_lock>
    if (rc == 0) {
    db86:	b920      	cbnz	r0, db92 <ble_gap_preempt_no_lock+0x12>
        ble_gap_slave[0].preempted = 1;
    db88:	4a05      	ldr	r2, [pc, #20]	; (dba0 <ble_gap_preempt_no_lock+0x20>)
    db8a:	7d53      	ldrb	r3, [r2, #21]
    db8c:	f043 0304 	orr.w	r3, r3, #4
    db90:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_conn_cancel_no_lock();
    db92:	f7ff fc51 	bl	d438 <ble_gap_conn_cancel_no_lock>
    if (rc == 0) {
    db96:	b910      	cbnz	r0, db9e <ble_gap_preempt_no_lock+0x1e>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_CONN;
    db98:	4b01      	ldr	r3, [pc, #4]	; (dba0 <ble_gap_preempt_no_lock+0x20>)
    db9a:	2202      	movs	r2, #2
    db9c:	741a      	strb	r2, [r3, #16]
}
    db9e:	bd08      	pop	{r3, pc}
    dba0:	200004b8 	.word	0x200004b8

0000dba4 <ble_gap_preempt>:
{
    dba4:	b508      	push	{r3, lr}
    ble_hs_lock();
    dba6:	f001 ffef 	bl	fb88 <ble_hs_lock>
    if (!ble_gap_is_preempted()) {
    dbaa:	f7fe fe15 	bl	c7d8 <ble_gap_is_preempted>
    dbae:	b110      	cbz	r0, dbb6 <ble_gap_preempt+0x12>
    ble_hs_unlock();
    dbb0:	f001 ffee 	bl	fb90 <ble_hs_unlock>
}
    dbb4:	bd08      	pop	{r3, pc}
        ble_gap_preempt_no_lock();
    dbb6:	f7ff ffe3 	bl	db80 <ble_gap_preempt_no_lock>
    dbba:	e7f9      	b.n	dbb0 <ble_gap_preempt+0xc>

0000dbbc <ble_gap_preempt_done>:
{
    dbbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    dbbe:	b08f      	sub	sp, #60	; 0x3c
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
    dbc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dbc4:	482b      	ldr	r0, [pc, #172]	; (dc74 <ble_gap_preempt_done+0xb8>)
    dbc6:	f7fd f92f 	bl	ae28 <os_mutex_pend>
    memset(slaves, 0, sizeof(slaves));
    dbca:	4b2b      	ldr	r3, [pc, #172]	; (dc78 <ble_gap_preempt_done+0xbc>)
    dbcc:	2400      	movs	r4, #0
    dbce:	601c      	str	r4, [r3, #0]
    dbd0:	605c      	str	r4, [r3, #4]
    ble_hs_lock();
    dbd2:	f001 ffd9 	bl	fb88 <ble_hs_lock>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
    dbd6:	4623      	mov	r3, r4
    dbd8:	2b00      	cmp	r3, #0
    dbda:	dd14      	ble.n	dc06 <ble_gap_preempt_done+0x4a>
    if (ble_gap_master.preempted_op == BLE_GAP_OP_M_DISC) {
    dbdc:	4b27      	ldr	r3, [pc, #156]	; (dc7c <ble_gap_preempt_done+0xc0>)
    dbde:	7c1b      	ldrb	r3, [r3, #16]
    dbe0:	2b01      	cmp	r3, #1
    dbe2:	d028      	beq.n	dc36 <ble_gap_preempt_done+0x7a>
    disc_preempted = 0;
    dbe4:	2700      	movs	r7, #0
    ble_hs_unlock();
    dbe6:	f001 ffd3 	bl	fb90 <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
    dbea:	2309      	movs	r3, #9
    dbec:	f88d 3004 	strb.w	r3, [sp, #4]
    event.adv_complete.reason = BLE_HS_EPREEMPTED;
    dbf0:	231d      	movs	r3, #29
    dbf2:	9302      	str	r3, [sp, #8]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
    dbf4:	2400      	movs	r4, #0
    dbf6:	2c00      	cmp	r4, #0
    dbf8:	dd24      	ble.n	dc44 <ble_gap_preempt_done+0x88>
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
    dbfa:	481e      	ldr	r0, [pc, #120]	; (dc74 <ble_gap_preempt_done+0xb8>)
    dbfc:	f7fd f8b4 	bl	ad68 <os_mutex_release>
    if (disc_preempted) {
    dc00:	bb67      	cbnz	r7, dc5c <ble_gap_preempt_done+0xa0>
}
    dc02:	b00f      	add	sp, #60	; 0x3c
    dc04:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_gap_slave[i].preempted) {
    dc06:	4a1d      	ldr	r2, [pc, #116]	; (dc7c <ble_gap_preempt_done+0xc0>)
    dc08:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    dc0c:	7d52      	ldrb	r2, [r2, #21]
    dc0e:	f012 0f04 	tst.w	r2, #4
    dc12:	d00e      	beq.n	dc32 <ble_gap_preempt_done+0x76>
            ble_gap_slave[i].preempted = 0;
    dc14:	4a19      	ldr	r2, [pc, #100]	; (dc7c <ble_gap_preempt_done+0xc0>)
    dc16:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    dc1a:	7d50      	ldrb	r0, [r2, #21]
    dc1c:	f36f 0082 	bfc	r0, #2, #1
    dc20:	7550      	strb	r0, [r2, #21]
            slaves[i].cb = ble_gap_slave[i].cb;
    dc22:	69d0      	ldr	r0, [r2, #28]
    dc24:	4914      	ldr	r1, [pc, #80]	; (dc78 <ble_gap_preempt_done+0xbc>)
    dc26:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
            slaves[i].arg = ble_gap_slave[i].cb_arg;
    dc2a:	6a12      	ldr	r2, [r2, #32]
    dc2c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    dc30:	604a      	str	r2, [r1, #4]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
    dc32:	3301      	adds	r3, #1
    dc34:	e7d0      	b.n	dbd8 <ble_gap_preempt_done+0x1c>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
    dc36:	4b11      	ldr	r3, [pc, #68]	; (dc7c <ble_gap_preempt_done+0xc0>)
    dc38:	2200      	movs	r2, #0
    dc3a:	741a      	strb	r2, [r3, #16]
        master_cb = ble_gap_master.cb;
    dc3c:	689d      	ldr	r5, [r3, #8]
        master_arg = ble_gap_master.cb_arg;
    dc3e:	68de      	ldr	r6, [r3, #12]
        disc_preempted = 1;
    dc40:	2701      	movs	r7, #1
    dc42:	e7d0      	b.n	dbe6 <ble_gap_preempt_done+0x2a>
        if (slaves[i].cb) {
    dc44:	4b0c      	ldr	r3, [pc, #48]	; (dc78 <ble_gap_preempt_done+0xbc>)
    dc46:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    dc4a:	b129      	cbz	r1, dc58 <ble_gap_preempt_done+0x9c>
            ble_gap_call_event_cb(&event, slaves[i].cb, slaves[i].arg);
    dc4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    dc50:	685a      	ldr	r2, [r3, #4]
    dc52:	a801      	add	r0, sp, #4
    dc54:	f7fe fdaa 	bl	c7ac <ble_gap_call_event_cb>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
    dc58:	3401      	adds	r4, #1
    dc5a:	e7cc      	b.n	dbf6 <ble_gap_preempt_done+0x3a>
        event.type = BLE_GAP_EVENT_DISC_COMPLETE;
    dc5c:	2308      	movs	r3, #8
    dc5e:	f88d 3004 	strb.w	r3, [sp, #4]
        event.disc_complete.reason = BLE_HS_EPREEMPTED;
    dc62:	231d      	movs	r3, #29
    dc64:	9302      	str	r3, [sp, #8]
        ble_gap_call_event_cb(&event, master_cb, master_arg);
    dc66:	4632      	mov	r2, r6
    dc68:	4629      	mov	r1, r5
    dc6a:	a801      	add	r0, sp, #4
    dc6c:	f7fe fd9e 	bl	c7ac <ble_gap_call_event_cb>
}
    dc70:	e7c7      	b.n	dc02 <ble_gap_preempt_done+0x46>
    dc72:	bf00      	nop
    dc74:	200070d0 	.word	0x200070d0
    dc78:	200070dc 	.word	0x200070dc
    dc7c:	200004b8 	.word	0x200004b8

0000dc80 <ble_gap_event_listener_unregister>:
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
    dc80:	4b0c      	ldr	r3, [pc, #48]	; (dcb4 <ble_gap_event_listener_unregister+0x34>)
    dc82:	681a      	ldr	r2, [r3, #0]
    dc84:	4613      	mov	r3, r2
    dc86:	b11b      	cbz	r3, dc90 <ble_gap_event_listener_unregister+0x10>
        if (evl == listener) {
    dc88:	4283      	cmp	r3, r0
    dc8a:	d001      	beq.n	dc90 <ble_gap_event_listener_unregister+0x10>
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
    dc8c:	689b      	ldr	r3, [r3, #8]
    dc8e:	e7fa      	b.n	dc86 <ble_gap_event_listener_unregister+0x6>
    if (!evl) {
    dc90:	b173      	cbz	r3, dcb0 <ble_gap_event_listener_unregister+0x30>
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
    dc92:	4282      	cmp	r2, r0
    dc94:	d105      	bne.n	dca2 <ble_gap_event_listener_unregister+0x22>
    dc96:	6892      	ldr	r2, [r2, #8]
    dc98:	4b06      	ldr	r3, [pc, #24]	; (dcb4 <ble_gap_event_listener_unregister+0x34>)
    dc9a:	601a      	str	r2, [r3, #0]
        rc = 0;
    dc9c:	2000      	movs	r0, #0
    dc9e:	4770      	bx	lr
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
    dca0:	461a      	mov	r2, r3
    dca2:	6893      	ldr	r3, [r2, #8]
    dca4:	4283      	cmp	r3, r0
    dca6:	d1fb      	bne.n	dca0 <ble_gap_event_listener_unregister+0x20>
    dca8:	689b      	ldr	r3, [r3, #8]
    dcaa:	6093      	str	r3, [r2, #8]
        rc = 0;
    dcac:	2000      	movs	r0, #0
    dcae:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
    dcb0:	2005      	movs	r0, #5
}
    dcb2:	4770      	bx	lr
    dcb4:	20007094 	.word	0x20007094

0000dcb8 <ble_gap_init>:
 * $init                                                                     *
 *****************************************************************************/

int
ble_gap_init(void)
{
    dcb8:	b510      	push	{r4, lr}
    dcba:	b082      	sub	sp, #8
    int rc;

    memset(&ble_gap_master, 0, sizeof(ble_gap_master));
    dcbc:	4b11      	ldr	r3, [pc, #68]	; (dd04 <ble_gap_init+0x4c>)
    dcbe:	2400      	movs	r4, #0
    dcc0:	601c      	str	r4, [r3, #0]
    dcc2:	605c      	str	r4, [r3, #4]
    dcc4:	609c      	str	r4, [r3, #8]
    dcc6:	60dc      	str	r4, [r3, #12]
    dcc8:	611c      	str	r4, [r3, #16]
    memset(ble_gap_slave, 0, sizeof(ble_gap_slave));
    dcca:	615c      	str	r4, [r3, #20]
    dccc:	619c      	str	r4, [r3, #24]
    dcce:	61dc      	str	r4, [r3, #28]
    dcd0:	621c      	str	r4, [r3, #32]
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
    dcd2:	480d      	ldr	r0, [pc, #52]	; (dd08 <ble_gap_init+0x50>)
    dcd4:	f7fd f83e 	bl	ad54 <os_mutex_init>
    memset(&ble_gap_sync, 0, sizeof(ble_gap_sync));
#endif

    ble_npl_mutex_init(&preempt_done_mutex);

    SLIST_INIT(&ble_gap_update_entries);
    dcd8:	4b0c      	ldr	r3, [pc, #48]	; (dd0c <ble_gap_init+0x54>)
    dcda:	601c      	str	r4, [r3, #0]
    SLIST_INIT(&ble_gap_event_listener_list);
    dcdc:	4b0c      	ldr	r3, [pc, #48]	; (dd10 <ble_gap_init+0x58>)
    dcde:	601c      	str	r4, [r3, #0]

    rc = os_mempool_init(&ble_gap_update_entry_pool,
    dce0:	4b0c      	ldr	r3, [pc, #48]	; (dd14 <ble_gap_init+0x5c>)
    dce2:	9300      	str	r3, [sp, #0]
    dce4:	4b0c      	ldr	r3, [pc, #48]	; (dd18 <ble_gap_init+0x60>)
    dce6:	2218      	movs	r2, #24
    dce8:	2101      	movs	r1, #1
    dcea:	480c      	ldr	r0, [pc, #48]	; (dd1c <ble_gap_init+0x64>)
    dcec:	f7fc fef4 	bl	aad8 <os_mempool_init>
                         MYNEWT_VAL(BLE_GAP_MAX_PENDING_CONN_PARAM_UPDATE),
                         sizeof (struct ble_gap_update_entry),
                         ble_gap_update_entry_mem,
                         "ble_gap_update");
    switch (rc) {
    dcf0:	b118      	cbz	r0, dcfa <ble_gap_init+0x42>
    dcf2:	2801      	cmp	r0, #1
    dcf4:	d004      	beq.n	dd00 <ble_gap_init+0x48>
        break;
    case OS_ENOMEM:
        rc = BLE_HS_ENOMEM;
        goto err;
    default:
        rc = BLE_HS_EOS;
    dcf6:	200b      	movs	r0, #11
        goto err;
    dcf8:	e000      	b.n	dcfc <ble_gap_init+0x44>
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_gap_stats), "ble_gap");
    if (rc != 0) {
        goto err;
    }

    return 0;
    dcfa:	2000      	movs	r0, #0

err:
    return rc;
}
    dcfc:	b002      	add	sp, #8
    dcfe:	bd10      	pop	{r4, pc}
        rc = BLE_HS_ENOMEM;
    dd00:	2006      	movs	r0, #6
    dd02:	e7fb      	b.n	dcfc <ble_gap_init+0x44>
    dd04:	200004b8 	.word	0x200004b8
    dd08:	200070d0 	.word	0x200070d0
    dd0c:	20007098 	.word	0x20007098
    dd10:	20007094 	.word	0x20007094
    dd14:	00028cb0 	.word	0x00028cb0
    dd18:	2000709c 	.word	0x2000709c
    dd1c:	200070b4 	.word	0x200070b4

0000dd20 <ble_gattc_err_dispatch_get>:
static ble_gattc_err_fn *
ble_gattc_err_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_err_dispatch[op];
}
    dd20:	4b01      	ldr	r3, [pc, #4]	; (dd28 <ble_gattc_err_dispatch_get+0x8>)
    dd22:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    dd26:	4770      	bx	lr
    dd28:	00028ccc 	.word	0x00028ccc

0000dd2c <ble_gattc_resume_dispatch_get>:
static ble_gattc_resume_fn *
ble_gattc_resume_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_resume_dispatch[op];
}
    dd2c:	4b01      	ldr	r3, [pc, #4]	; (dd34 <ble_gattc_resume_dispatch_get+0x8>)
    dd2e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    dd32:	4770      	bx	lr
    dd34:	00028d1c 	.word	0x00028d1c

0000dd38 <ble_gattc_tmo_dispatch_get>:
static ble_gattc_tmo_fn *
ble_gattc_tmo_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_tmo_dispatch[op];
}
    dd38:	4b01      	ldr	r3, [pc, #4]	; (dd40 <ble_gattc_tmo_dispatch_get+0x8>)
    dd3a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    dd3e:	4770      	bx	lr
    dd40:	00028d58 	.word	0x00028d58

0000dd44 <ble_gattc_proc_matches_conn_op>:
{
    const struct ble_gattc_criteria_conn_op *criteria;

    criteria = arg;

    if (criteria->conn_handle != proc->conn_handle) {
    dd44:	880a      	ldrh	r2, [r1, #0]
    dd46:	8903      	ldrh	r3, [r0, #8]
    dd48:	429a      	cmp	r2, r3
    dd4a:	d001      	beq.n	dd50 <ble_gattc_proc_matches_conn_op+0xc>
        return 0;
    dd4c:	2000      	movs	r0, #0
    dd4e:	4770      	bx	lr
    }

    if (criteria->op != proc->op && criteria->op != BLE_GATT_OP_NONE) {
    dd50:	788b      	ldrb	r3, [r1, #2]
    dd52:	7a82      	ldrb	r2, [r0, #10]
    dd54:	4293      	cmp	r3, r2
    dd56:	d005      	beq.n	dd64 <ble_gattc_proc_matches_conn_op+0x20>
    dd58:	2bff      	cmp	r3, #255	; 0xff
    dd5a:	d001      	beq.n	dd60 <ble_gattc_proc_matches_conn_op+0x1c>
        return 0;
    dd5c:	2000      	movs	r0, #0
    }

    return 1;
}
    dd5e:	4770      	bx	lr
    return 1;
    dd60:	2001      	movs	r0, #1
    dd62:	4770      	bx	lr
    dd64:	2001      	movs	r0, #1
    dd66:	4770      	bx	lr

0000dd68 <ble_gattc_proc_matches_expired>:
    struct ble_gattc_criteria_exp *criteria;
    int32_t time_diff;

    criteria = arg;

    time_diff = proc->exp_os_ticks - criteria->now;
    dd68:	6843      	ldr	r3, [r0, #4]
    dd6a:	680a      	ldr	r2, [r1, #0]
    dd6c:	1a9b      	subs	r3, r3, r2

    if (time_diff <= 0) {
    dd6e:	2b00      	cmp	r3, #0
    dd70:	dd05      	ble.n	dd7e <ble_gattc_proc_matches_expired+0x16>
        /* Procedure is expired. */
        return 1;
    }

    /* Procedure isn't expired; determine if it is the next to expire. */
    if (time_diff < criteria->next_exp_in) {
    dd72:	684a      	ldr	r2, [r1, #4]
    dd74:	429a      	cmp	r2, r3
    dd76:	dd04      	ble.n	dd82 <ble_gattc_proc_matches_expired+0x1a>
        criteria->next_exp_in = time_diff;
    dd78:	604b      	str	r3, [r1, #4]
    }
    return 0;
    dd7a:	2000      	movs	r0, #0
    dd7c:	4770      	bx	lr
        return 1;
    dd7e:	2001      	movs	r0, #1
    dd80:	4770      	bx	lr
    return 0;
    dd82:	2000      	movs	r0, #0
}
    dd84:	4770      	bx	lr

0000dd86 <ble_gattc_proc_matches_stalled>:
}

static int
ble_gattc_proc_matches_stalled(struct ble_gattc_proc *proc, void *unused)
{
    return proc->flags & BLE_GATTC_PROC_F_STALLED;
    dd86:	7ac0      	ldrb	r0, [r0, #11]
}
    dd88:	f000 0001 	and.w	r0, r0, #1
    dd8c:	4770      	bx	lr

0000dd8e <ble_gattc_proc_timeout>:
    return diff;
}

static void
ble_gattc_proc_timeout(struct ble_gattc_proc *proc)
{
    dd8e:	b510      	push	{r4, lr}
    dd90:	4604      	mov	r4, r0
    ble_gattc_tmo_fn *cb;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    cb = ble_gattc_tmo_dispatch_get(proc->op);
    dd92:	7a80      	ldrb	r0, [r0, #10]
    dd94:	f7ff ffd0 	bl	dd38 <ble_gattc_tmo_dispatch_get>
    if (cb != NULL) {
    dd98:	b110      	cbz	r0, dda0 <ble_gattc_proc_timeout+0x12>
    dd9a:	4603      	mov	r3, r0
        cb(proc);
    dd9c:	4620      	mov	r0, r4
    dd9e:	4798      	blx	r3
    }
}
    dda0:	bd10      	pop	{r4, pc}
	...

0000dda4 <ble_gattc_error>:
ble_gattc_error(int status, uint16_t att_handle)
{
    static struct ble_gatt_error error;

    /* For consistency, always indicate a handle of 0 on success. */
    if (status == 0 || status == BLE_HS_EDONE) {
    dda4:	4603      	mov	r3, r0
    dda6:	b118      	cbz	r0, ddb0 <ble_gattc_error+0xc>
    dda8:	280e      	cmp	r0, #14
    ddaa:	d102      	bne.n	ddb2 <ble_gattc_error+0xe>
        att_handle = 0;
    ddac:	2100      	movs	r1, #0
    ddae:	e000      	b.n	ddb2 <ble_gattc_error+0xe>
    ddb0:	2100      	movs	r1, #0
    }

    error.status = status;
    ddb2:	4802      	ldr	r0, [pc, #8]	; (ddbc <ble_gattc_error+0x18>)
    ddb4:	8003      	strh	r3, [r0, #0]
    error.att_handle = att_handle;
    ddb6:	8041      	strh	r1, [r0, #2]
    return &error;
}
    ddb8:	4770      	bx	lr
    ddba:	bf00      	nop
    ddbc:	200071ec 	.word	0x200071ec

0000ddc0 <ble_gattc_mtu_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_mtu_cb(struct ble_gattc_proc *proc, int status, uint16_t att_handle,
                 uint16_t mtu)
{
    ddc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, mtu_fail);
    }

    if (proc->mtu.cb == NULL) {
    ddc4:	68c6      	ldr	r6, [r0, #12]
    ddc6:	b17e      	cbz	r6, dde8 <ble_gattc_mtu_cb+0x28>
    ddc8:	461f      	mov	r7, r3
    ddca:	460d      	mov	r5, r1
    ddcc:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->mtu.cb(proc->conn_handle,
    ddce:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                          ble_gattc_error(status, att_handle),
    ddd2:	4611      	mov	r1, r2
    ddd4:	4628      	mov	r0, r5
    ddd6:	f7ff ffe5 	bl	dda4 <ble_gattc_error>
        rc = proc->mtu.cb(proc->conn_handle,
    ddda:	6923      	ldr	r3, [r4, #16]
    dddc:	463a      	mov	r2, r7
    ddde:	4601      	mov	r1, r0
    dde0:	4640      	mov	r0, r8
    dde2:	47b0      	blx	r6
                          mtu, proc->mtu.cb_arg);
    }

    return rc;
}
    dde4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    dde8:	2000      	movs	r0, #0
    return rc;
    ddea:	e7fb      	b.n	dde4 <ble_gattc_mtu_cb+0x24>

0000ddec <ble_gattc_mtu_tmo>:

static void
ble_gattc_mtu_tmo(struct ble_gattc_proc *proc)
{
    ddec:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_mtu_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
    ddee:	2300      	movs	r3, #0
    ddf0:	461a      	mov	r2, r3
    ddf2:	210d      	movs	r1, #13
    ddf4:	f7ff ffe4 	bl	ddc0 <ble_gattc_mtu_cb>
}
    ddf8:	bd08      	pop	{r3, pc}

0000ddfa <ble_gattc_mtu_err>:
/**
 * Handles an incoming ATT error response for the specified mtu-exchange proc.
 */
static void
ble_gattc_mtu_err(struct ble_gattc_proc *proc, int status, uint16_t att_handle)
{
    ddfa:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_mtu_cb(proc, status, att_handle, 0);
    ddfc:	2300      	movs	r3, #0
    ddfe:	f7ff ffdf 	bl	ddc0 <ble_gattc_mtu_cb>
}
    de02:	bd08      	pop	{r3, pc}

0000de04 <ble_gattc_disc_all_svcs_cb>:
 */
static int
ble_gattc_disc_all_svcs_cb(struct ble_gattc_proc *proc,
                           uint16_t status, uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
    de04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_all_svcs_fail);
    }

    if (proc->disc_all_svcs.cb == NULL) {
    de08:	6906      	ldr	r6, [r0, #16]
    de0a:	b17e      	cbz	r6, de2c <ble_gattc_disc_all_svcs_cb+0x28>
    de0c:	461f      	mov	r7, r3
    de0e:	460d      	mov	r5, r1
    de10:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
    de12:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
    de16:	4611      	mov	r1, r2
    de18:	4628      	mov	r0, r5
    de1a:	f7ff ffc3 	bl	dda4 <ble_gattc_error>
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
    de1e:	6963      	ldr	r3, [r4, #20]
    de20:	463a      	mov	r2, r7
    de22:	4601      	mov	r1, r0
    de24:	4640      	mov	r0, r8
    de26:	47b0      	blx	r6
                                    service, proc->disc_all_svcs.cb_arg);
    }

    return rc;
}
    de28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    de2c:	2000      	movs	r0, #0
    return rc;
    de2e:	e7fb      	b.n	de28 <ble_gattc_disc_all_svcs_cb+0x24>

0000de30 <ble_gattc_disc_all_svcs_tmo>:

static void
ble_gattc_disc_all_svcs_tmo(struct ble_gattc_proc *proc)
{
    de30:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
    de32:	2300      	movs	r3, #0
    de34:	461a      	mov	r2, r3
    de36:	210d      	movs	r1, #13
    de38:	f7ff ffe4 	bl	de04 <ble_gattc_disc_all_svcs_cb>
}
    de3c:	bd08      	pop	{r3, pc}

0000de3e <ble_gattc_disc_all_svcs_err>:
 * discover-all-services proc.
 */
static void
ble_gattc_disc_all_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
    de3e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
    de40:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
    de44:	d004      	beq.n	de50 <ble_gattc_disc_all_svcs_err+0x12>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_svcs_cb(proc, status, att_handle, NULL);
    de46:	2300      	movs	r3, #0
    de48:	b289      	uxth	r1, r1
    de4a:	f7ff ffdb 	bl	de04 <ble_gattc_disc_all_svcs_cb>
}
    de4e:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
    de50:	210e      	movs	r1, #14
    de52:	e7f8      	b.n	de46 <ble_gattc_disc_all_svcs_err+0x8>

0000de54 <ble_gattc_disc_svc_uuid_cb>:
 */
static int
ble_gattc_disc_svc_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
    de54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_svc_uuid_fail);
    }

    if (proc->disc_svc_uuid.cb == NULL) {
    de58:	6a46      	ldr	r6, [r0, #36]	; 0x24
    de5a:	b17e      	cbz	r6, de7c <ble_gattc_disc_svc_uuid_cb+0x28>
    de5c:	461f      	mov	r7, r3
    de5e:	460d      	mov	r5, r1
    de60:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
    de62:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
    de66:	4611      	mov	r1, r2
    de68:	4628      	mov	r0, r5
    de6a:	f7ff ff9b 	bl	dda4 <ble_gattc_error>
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
    de6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de70:	463a      	mov	r2, r7
    de72:	4601      	mov	r1, r0
    de74:	4640      	mov	r0, r8
    de76:	47b0      	blx	r6
                                    service, proc->disc_svc_uuid.cb_arg);
    }

    return rc;
}
    de78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    de7c:	2000      	movs	r0, #0
    return rc;
    de7e:	e7fb      	b.n	de78 <ble_gattc_disc_svc_uuid_cb+0x24>

0000de80 <ble_gattc_disc_svc_uuid_tmo>:

static void
ble_gattc_disc_svc_uuid_tmo(struct ble_gattc_proc *proc)
{
    de80:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
    de82:	2300      	movs	r3, #0
    de84:	461a      	mov	r2, r3
    de86:	210d      	movs	r1, #13
    de88:	f7ff ffe4 	bl	de54 <ble_gattc_disc_svc_uuid_cb>
}
    de8c:	bd08      	pop	{r3, pc}

0000de8e <ble_gattc_disc_svc_uuid_err>:
 * discover-service-by-uuid proc.
 */
static void
ble_gattc_disc_svc_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
    de8e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
    de90:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
    de94:	d003      	beq.n	de9e <ble_gattc_disc_svc_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_svc_uuid_cb(proc, status, att_handle, NULL);
    de96:	2300      	movs	r3, #0
    de98:	f7ff ffdc 	bl	de54 <ble_gattc_disc_svc_uuid_cb>
}
    de9c:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
    de9e:	210e      	movs	r1, #14
    dea0:	e7f9      	b.n	de96 <ble_gattc_disc_svc_uuid_err+0x8>

0000dea2 <ble_gattc_find_inc_svcs_cb>:
 */
static int
ble_gattc_find_inc_svcs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
    dea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, find_inc_svcs_fail);
    }

    if (proc->find_inc_svcs.cb == NULL) {
    dea6:	6946      	ldr	r6, [r0, #20]
    dea8:	b17e      	cbz	r6, deca <ble_gattc_find_inc_svcs_cb+0x28>
    deaa:	461f      	mov	r7, r3
    deac:	460d      	mov	r5, r1
    deae:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
    deb0:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
    deb4:	4611      	mov	r1, r2
    deb6:	4628      	mov	r0, r5
    deb8:	f7ff ff74 	bl	dda4 <ble_gattc_error>
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
    debc:	69a3      	ldr	r3, [r4, #24]
    debe:	463a      	mov	r2, r7
    dec0:	4601      	mov	r1, r0
    dec2:	4640      	mov	r0, r8
    dec4:	47b0      	blx	r6
                                    service, proc->find_inc_svcs.cb_arg);
    }

    return rc;
}
    dec6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    deca:	2000      	movs	r0, #0
    return rc;
    decc:	e7fb      	b.n	dec6 <ble_gattc_find_inc_svcs_cb+0x24>

0000dece <ble_gattc_find_inc_svcs_tmo>:

static void
ble_gattc_find_inc_svcs_tmo(struct ble_gattc_proc *proc)
{
    dece:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_find_inc_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
    ded0:	2300      	movs	r3, #0
    ded2:	461a      	mov	r2, r3
    ded4:	210d      	movs	r1, #13
    ded6:	f7ff ffe4 	bl	dea2 <ble_gattc_find_inc_svcs_cb>
}
    deda:	bd08      	pop	{r3, pc}

0000dedc <ble_gattc_find_inc_svcs_err>:
 * find-included-services proc.
 */
static void
ble_gattc_find_inc_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
    dedc:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->find_inc_svcs.cur_start == 0 &&
    dede:	8a03      	ldrh	r3, [r0, #16]
    dee0:	b913      	cbnz	r3, dee8 <ble_gattc_find_inc_svcs_err+0xc>
    dee2:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
    dee6:	d003      	beq.n	def0 <ble_gattc_find_inc_svcs_err+0x14>

        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_find_inc_svcs_cb(proc, status, att_handle, NULL);
    dee8:	2300      	movs	r3, #0
    deea:	f7ff ffda 	bl	dea2 <ble_gattc_find_inc_svcs_cb>
}
    deee:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
    def0:	210e      	movs	r1, #14
    def2:	e7f9      	b.n	dee8 <ble_gattc_find_inc_svcs_err+0xc>

0000def4 <ble_gattc_disc_all_chrs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_chrs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
    def4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_all_chrs_fail);
    }

    if (proc->disc_all_chrs.cb == NULL) {
    def8:	6906      	ldr	r6, [r0, #16]
    defa:	b17e      	cbz	r6, df1c <ble_gattc_disc_all_chrs_cb+0x28>
    defc:	461f      	mov	r7, r3
    defe:	460d      	mov	r5, r1
    df00:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
    df02:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle), chr,
    df06:	4611      	mov	r1, r2
    df08:	4628      	mov	r0, r5
    df0a:	f7ff ff4b 	bl	dda4 <ble_gattc_error>
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
    df0e:	6963      	ldr	r3, [r4, #20]
    df10:	463a      	mov	r2, r7
    df12:	4601      	mov	r1, r0
    df14:	4640      	mov	r0, r8
    df16:	47b0      	blx	r6
                                    proc->disc_all_chrs.cb_arg);
    }

    return rc;
}
    df18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    df1c:	2000      	movs	r0, #0
    return rc;
    df1e:	e7fb      	b.n	df18 <ble_gattc_disc_all_chrs_cb+0x24>

0000df20 <ble_gattc_disc_all_chrs_tmo>:

static void
ble_gattc_disc_all_chrs_tmo(struct ble_gattc_proc *proc)
{
    df20:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_chrs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
    df22:	2300      	movs	r3, #0
    df24:	461a      	mov	r2, r3
    df26:	210d      	movs	r1, #13
    df28:	f7ff ffe4 	bl	def4 <ble_gattc_disc_all_chrs_cb>
}
    df2c:	bd08      	pop	{r3, pc}

0000df2e <ble_gattc_disc_all_chrs_err>:
 * discover-all-characteristics proc.
 */
static void
ble_gattc_disc_all_chrs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
    df2e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
    df30:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
    df34:	d003      	beq.n	df3e <ble_gattc_disc_all_chrs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_chrs_cb(proc, status, att_handle, NULL);
    df36:	2300      	movs	r3, #0
    df38:	f7ff ffdc 	bl	def4 <ble_gattc_disc_all_chrs_cb>
}
    df3c:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
    df3e:	210e      	movs	r1, #14
    df40:	e7f9      	b.n	df36 <ble_gattc_disc_all_chrs_err+0x8>

0000df42 <ble_gattc_disc_chr_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_chr_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
    df42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_chrs_uuid_fail);
    }

    if (proc->disc_chr_uuid.cb == NULL) {
    df46:	6a46      	ldr	r6, [r0, #36]	; 0x24
    df48:	b17e      	cbz	r6, df6a <ble_gattc_disc_chr_uuid_cb+0x28>
    df4a:	461f      	mov	r7, r3
    df4c:	460d      	mov	r5, r1
    df4e:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
    df50:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle), chr,
    df54:	4611      	mov	r1, r2
    df56:	4628      	mov	r0, r5
    df58:	f7ff ff24 	bl	dda4 <ble_gattc_error>
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
    df5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df5e:	463a      	mov	r2, r7
    df60:	4601      	mov	r1, r0
    df62:	4640      	mov	r0, r8
    df64:	47b0      	blx	r6
                                    proc->disc_chr_uuid.cb_arg);
    }

    return rc;
}
    df66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    df6a:	2000      	movs	r0, #0
    return rc;
    df6c:	e7fb      	b.n	df66 <ble_gattc_disc_chr_uuid_cb+0x24>

0000df6e <ble_gattc_disc_chr_uuid_tmo>:

static void
ble_gattc_disc_chr_uuid_tmo(struct ble_gattc_proc *proc)
{
    df6e:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
    df70:	2300      	movs	r3, #0
    df72:	461a      	mov	r2, r3
    df74:	210d      	movs	r1, #13
    df76:	f7ff ffe4 	bl	df42 <ble_gattc_disc_chr_uuid_cb>
}
    df7a:	bd08      	pop	{r3, pc}

0000df7c <ble_gattc_disc_chr_uuid_err>:
 * discover-characteristic-by-uuid proc.
 */
static void
ble_gattc_disc_chr_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
    df7c:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
    df7e:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
    df82:	d003      	beq.n	df8c <ble_gattc_disc_chr_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_chr_uuid_cb(proc, status, att_handle, NULL);
    df84:	2300      	movs	r3, #0
    df86:	f7ff ffdc 	bl	df42 <ble_gattc_disc_chr_uuid_cb>
}
    df8a:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
    df8c:	210e      	movs	r1, #14
    df8e:	e7f9      	b.n	df84 <ble_gattc_disc_chr_uuid_err+0x8>

0000df90 <ble_gattc_disc_all_dscs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_dscs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_dsc *dsc)
{
    df90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df94:	b082      	sub	sp, #8

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_all_dscs_fail);
    }

    if (proc->disc_all_dscs.cb == NULL) {
    df96:	6946      	ldr	r6, [r0, #20]
    df98:	b196      	cbz	r6, dfc0 <ble_gattc_disc_all_dscs_cb+0x30>
    df9a:	461f      	mov	r7, r3
    df9c:	460d      	mov	r5, r1
    df9e:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
    dfa0:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
    dfa4:	4611      	mov	r1, r2
    dfa6:	4628      	mov	r0, r5
    dfa8:	f7ff fefc 	bl	dda4 <ble_gattc_error>
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
    dfac:	89a2      	ldrh	r2, [r4, #12]
    dfae:	69a3      	ldr	r3, [r4, #24]
    dfb0:	9300      	str	r3, [sp, #0]
    dfb2:	463b      	mov	r3, r7
    dfb4:	4601      	mov	r1, r0
    dfb6:	4640      	mov	r0, r8
    dfb8:	47b0      	blx	r6
                                    proc->disc_all_dscs.chr_val_handle,
                                    dsc, proc->disc_all_dscs.cb_arg);
    }

    return rc;
}
    dfba:	b002      	add	sp, #8
    dfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    dfc0:	2000      	movs	r0, #0
    return rc;
    dfc2:	e7fa      	b.n	dfba <ble_gattc_disc_all_dscs_cb+0x2a>

0000dfc4 <ble_gattc_disc_all_dscs_tmo>:

static void
ble_gattc_disc_all_dscs_tmo(struct ble_gattc_proc *proc)
{
    dfc4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_dscs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
    dfc6:	2300      	movs	r3, #0
    dfc8:	461a      	mov	r2, r3
    dfca:	210d      	movs	r1, #13
    dfcc:	f7ff ffe0 	bl	df90 <ble_gattc_disc_all_dscs_cb>
}
    dfd0:	bd08      	pop	{r3, pc}

0000dfd2 <ble_gattc_disc_all_dscs_err>:
 * discover-all-descriptors proc.
 */
static void
ble_gattc_disc_all_dscs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
    dfd2:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
    dfd4:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
    dfd8:	d003      	beq.n	dfe2 <ble_gattc_disc_all_dscs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_dscs_cb(proc, status, att_handle, NULL);
    dfda:	2300      	movs	r3, #0
    dfdc:	f7ff ffd8 	bl	df90 <ble_gattc_disc_all_dscs_cb>
}
    dfe0:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
    dfe2:	210e      	movs	r1, #14
    dfe4:	e7f9      	b.n	dfda <ble_gattc_disc_all_dscs_err+0x8>

0000dfe6 <ble_gattc_read_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_cb(struct ble_gattc_proc *proc, int status,
                  uint16_t att_handle, struct ble_gatt_attr *attr)
{
    dfe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, read_fail);
    }

    if (proc->read.cb == NULL) {
    dfea:	6906      	ldr	r6, [r0, #16]
    dfec:	b17e      	cbz	r6, e00e <ble_gattc_read_cb+0x28>
    dfee:	461f      	mov	r7, r3
    dff0:	460d      	mov	r5, r1
    dff2:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read.cb(proc->conn_handle,
    dff4:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                           ble_gattc_error(status, att_handle), attr,
    dff8:	4611      	mov	r1, r2
    dffa:	4628      	mov	r0, r5
    dffc:	f7ff fed2 	bl	dda4 <ble_gattc_error>
        rc = proc->read.cb(proc->conn_handle,
    e000:	6963      	ldr	r3, [r4, #20]
    e002:	463a      	mov	r2, r7
    e004:	4601      	mov	r1, r0
    e006:	4640      	mov	r0, r8
    e008:	47b0      	blx	r6
                           proc->read.cb_arg);
    }

    return rc;
}
    e00a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    e00e:	2000      	movs	r0, #0
    return rc;
    e010:	e7fb      	b.n	e00a <ble_gattc_read_cb+0x24>

0000e012 <ble_gattc_read_tmo>:

static void
ble_gattc_read_tmo(struct ble_gattc_proc *proc)
{
    e012:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
    e014:	2300      	movs	r3, #0
    e016:	461a      	mov	r2, r3
    e018:	210d      	movs	r1, #13
    e01a:	f7ff ffe4 	bl	dfe6 <ble_gattc_read_cb>
}
    e01e:	bd08      	pop	{r3, pc}

0000e020 <ble_gattc_read_err>:
 * read-characteristic-value proc.
 */
static void
ble_gattc_read_err(struct ble_gattc_proc *proc, int status,
                   uint16_t att_handle)
{
    e020:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_cb(proc, status, att_handle, NULL);
    e022:	2300      	movs	r3, #0
    e024:	f7ff ffdf 	bl	dfe6 <ble_gattc_read_cb>
}
    e028:	bd08      	pop	{r3, pc}

0000e02a <ble_gattc_read_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_uuid_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
    e02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, read_uuid_fail);
    }

    if (proc->read_uuid.cb == NULL) {
    e02e:	6a46      	ldr	r6, [r0, #36]	; 0x24
    e030:	b17e      	cbz	r6, e052 <ble_gattc_read_uuid_cb+0x28>
    e032:	461f      	mov	r7, r3
    e034:	460d      	mov	r5, r1
    e036:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read_uuid.cb(proc->conn_handle,
    e038:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                ble_gattc_error(status, att_handle), attr,
    e03c:	4611      	mov	r1, r2
    e03e:	4628      	mov	r0, r5
    e040:	f7ff feb0 	bl	dda4 <ble_gattc_error>
        rc = proc->read_uuid.cb(proc->conn_handle,
    e044:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e046:	463a      	mov	r2, r7
    e048:	4601      	mov	r1, r0
    e04a:	4640      	mov	r0, r8
    e04c:	47b0      	blx	r6
                                proc->read_uuid.cb_arg);
    }

    return rc;
}
    e04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    e052:	2000      	movs	r0, #0
    return rc;
    e054:	e7fb      	b.n	e04e <ble_gattc_read_uuid_cb+0x24>

0000e056 <ble_gattc_read_uuid_tmo>:

static void
ble_gattc_read_uuid_tmo(struct ble_gattc_proc *proc)
{
    e056:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
    e058:	2300      	movs	r3, #0
    e05a:	461a      	mov	r2, r3
    e05c:	210d      	movs	r1, #13
    e05e:	f7ff ffe4 	bl	e02a <ble_gattc_read_uuid_cb>
}
    e062:	bd08      	pop	{r3, pc}

0000e064 <ble_gattc_read_uuid_err>:
 * read-using-characteristic-uuid proc.
 */
static void
ble_gattc_read_uuid_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
    e064:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, status, att_handle, NULL);
    e066:	2300      	movs	r3, #0
    e068:	f7ff ffdf 	bl	e02a <ble_gattc_read_uuid_cb>
}
    e06c:	bd08      	pop	{r3, pc}

0000e06e <ble_gattc_read_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_long_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
    e06e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, read_long_fail);
    }

    if (proc->read_long.cb == NULL) {
    e072:	6906      	ldr	r6, [r0, #16]
    e074:	b17e      	cbz	r6, e096 <ble_gattc_read_long_cb+0x28>
    e076:	461f      	mov	r7, r3
    e078:	460d      	mov	r5, r1
    e07a:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read_long.cb(proc->conn_handle,
    e07c:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                ble_gattc_error(status, att_handle), attr,
    e080:	4611      	mov	r1, r2
    e082:	4628      	mov	r0, r5
    e084:	f7ff fe8e 	bl	dda4 <ble_gattc_error>
        rc = proc->read_long.cb(proc->conn_handle,
    e088:	6963      	ldr	r3, [r4, #20]
    e08a:	463a      	mov	r2, r7
    e08c:	4601      	mov	r1, r0
    e08e:	4640      	mov	r0, r8
    e090:	47b0      	blx	r6
                                proc->read_long.cb_arg);
    }

    return rc;
}
    e092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    e096:	2000      	movs	r0, #0
    return rc;
    e098:	e7fb      	b.n	e092 <ble_gattc_read_long_cb+0x24>

0000e09a <ble_gattc_read_long_tmo>:

static void
ble_gattc_read_long_tmo(struct ble_gattc_proc *proc)
{
    e09a:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_long_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
    e09c:	2300      	movs	r3, #0
    e09e:	461a      	mov	r2, r3
    e0a0:	210d      	movs	r1, #13
    e0a2:	f7ff ffe4 	bl	e06e <ble_gattc_read_long_cb>
}
    e0a6:	bd08      	pop	{r3, pc}

0000e0a8 <ble_gattc_read_long_err>:
 * read-long-characteristic proc.
 */
static void
ble_gattc_read_long_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
    e0a8:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_long_cb(proc, status, att_handle, NULL);
    e0aa:	2300      	movs	r3, #0
    e0ac:	f7ff ffdf 	bl	e06e <ble_gattc_read_long_cb>
}
    e0b0:	bd08      	pop	{r3, pc}

0000e0b2 <ble_gattc_read_mult_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_mult_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct os_mbuf **om)
{
    e0b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    e0b4:	b083      	sub	sp, #12
    e0b6:	4605      	mov	r5, r0
    e0b8:	4608      	mov	r0, r1

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, read_mult_fail);
    }

    attr.handle = 0;
    e0ba:	2400      	movs	r4, #0
    e0bc:	f8ad 4000 	strh.w	r4, [sp]
    attr.offset = 0;
    e0c0:	f8ad 4002 	strh.w	r4, [sp, #2]
    if (om == NULL) {
    e0c4:	461c      	mov	r4, r3
    e0c6:	b18b      	cbz	r3, e0ec <ble_gattc_read_mult_cb+0x3a>
        attr.om = NULL;
    } else {
        attr.om = *om;
    e0c8:	681b      	ldr	r3, [r3, #0]
    e0ca:	9301      	str	r3, [sp, #4]
    }

    if (proc->read_mult.cb == NULL) {
    e0cc:	6a2e      	ldr	r6, [r5, #32]
    e0ce:	b17e      	cbz	r6, e0f0 <ble_gattc_read_mult_cb+0x3e>
        rc = 0;
    } else {
        rc = proc->read_mult.cb(proc->conn_handle,
    e0d0:	892f      	ldrh	r7, [r5, #8]
                                ble_gattc_error(status, att_handle), &attr,
    e0d2:	4611      	mov	r1, r2
    e0d4:	f7ff fe66 	bl	dda4 <ble_gattc_error>
        rc = proc->read_mult.cb(proc->conn_handle,
    e0d8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    e0da:	466a      	mov	r2, sp
    e0dc:	4601      	mov	r1, r0
    e0de:	4638      	mov	r0, r7
    e0e0:	47b0      	blx	r6
                                proc->read_mult.cb_arg);
    }

    /* Indicate to the caller whether the application consumed the mbuf. */
    if (om != NULL) {
    e0e2:	b10c      	cbz	r4, e0e8 <ble_gattc_read_mult_cb+0x36>
        *om = attr.om;
    e0e4:	9b01      	ldr	r3, [sp, #4]
    e0e6:	6023      	str	r3, [r4, #0]
    }

    return rc;
}
    e0e8:	b003      	add	sp, #12
    e0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        attr.om = NULL;
    e0ec:	9301      	str	r3, [sp, #4]
    e0ee:	e7ed      	b.n	e0cc <ble_gattc_read_mult_cb+0x1a>
        rc = 0;
    e0f0:	2000      	movs	r0, #0
    e0f2:	e7f6      	b.n	e0e2 <ble_gattc_read_mult_cb+0x30>

0000e0f4 <ble_gattc_read_mult_tmo>:

static void
ble_gattc_read_mult_tmo(struct ble_gattc_proc *proc)
{
    e0f4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_mult_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
    e0f6:	2300      	movs	r3, #0
    e0f8:	461a      	mov	r2, r3
    e0fa:	210d      	movs	r1, #13
    e0fc:	f7ff ffd9 	bl	e0b2 <ble_gattc_read_mult_cb>
}
    e100:	bd08      	pop	{r3, pc}

0000e102 <ble_gattc_read_mult_err>:
 * read-multiple-characteristics proc.
 */
static void
ble_gattc_read_mult_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
    e102:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_mult_cb(proc, status, att_handle, NULL);
    e104:	2300      	movs	r3, #0
    e106:	f7ff ffd4 	bl	e0b2 <ble_gattc_read_mult_cb>
}
    e10a:	bd08      	pop	{r3, pc}

0000e10c <ble_gattc_write_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_long_cb(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
    e10c:	b570      	push	{r4, r5, r6, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, write_long_fail);
    }

    if (proc->write_long.cb == NULL) {
    e10e:	6985      	ldr	r5, [r0, #24]
    e110:	b16d      	cbz	r5, e12e <ble_gattc_write_long_cb+0x22>
    e112:	460b      	mov	r3, r1
    e114:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->write_long.cb(proc->conn_handle,
    e116:	8906      	ldrh	r6, [r0, #8]
                                 ble_gattc_error(status, att_handle),
    e118:	4611      	mov	r1, r2
    e11a:	4618      	mov	r0, r3
    e11c:	f7ff fe42 	bl	dda4 <ble_gattc_error>
        rc = proc->write_long.cb(proc->conn_handle,
    e120:	69e3      	ldr	r3, [r4, #28]
    e122:	f104 020c 	add.w	r2, r4, #12
    e126:	4601      	mov	r1, r0
    e128:	4630      	mov	r0, r6
    e12a:	47a8      	blx	r5
                                 &proc->write_long.attr,
                                 proc->write_long.cb_arg);
    }

    return rc;
}
    e12c:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
    e12e:	2000      	movs	r0, #0
    return rc;
    e130:	e7fc      	b.n	e12c <ble_gattc_write_long_cb+0x20>

0000e132 <ble_gattc_write_long_tmo>:

static void
ble_gattc_write_long_tmo(struct ble_gattc_proc *proc)
{
    e132:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_long_cb(proc, BLE_HS_ETIMEOUT, 0);
    e134:	2200      	movs	r2, #0
    e136:	210d      	movs	r1, #13
    e138:	f7ff ffe8 	bl	e10c <ble_gattc_write_long_cb>
}
    e13c:	bd08      	pop	{r3, pc}

0000e13e <ble_gattc_write_reliable_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_reliable_cb(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
    e13e:	b570      	push	{r4, r5, r6, lr}
    e140:	b082      	sub	sp, #8

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, write_reliable_fail);
    }

    if (proc->write_reliable.cb == NULL) {
    e142:	6b05      	ldr	r5, [r0, #48]	; 0x30
    e144:	b18d      	cbz	r5, e16a <ble_gattc_write_reliable_cb+0x2c>
    e146:	460b      	mov	r3, r1
    e148:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->write_reliable.cb(proc->conn_handle,
    e14a:	8906      	ldrh	r6, [r0, #8]
                                     ble_gattc_error(status, att_handle),
    e14c:	4611      	mov	r1, r2
    e14e:	4618      	mov	r0, r3
    e150:	f7ff fe28 	bl	dda4 <ble_gattc_error>
        rc = proc->write_reliable.cb(proc->conn_handle,
    e154:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e158:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e15a:	9200      	str	r2, [sp, #0]
    e15c:	f104 020c 	add.w	r2, r4, #12
    e160:	4601      	mov	r1, r0
    e162:	4630      	mov	r0, r6
    e164:	47a8      	blx	r5
                                     proc->write_reliable.num_attrs,
                                     proc->write_reliable.cb_arg);
    }

    return rc;
}
    e166:	b002      	add	sp, #8
    e168:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
    e16a:	2000      	movs	r0, #0
    return rc;
    e16c:	e7fb      	b.n	e166 <ble_gattc_write_reliable_cb+0x28>

0000e16e <ble_gattc_write_reliable_tmo>:

static void
ble_gattc_write_reliable_tmo(struct ble_gattc_proc *proc)
{
    e16e:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_reliable_cb(proc, BLE_HS_ETIMEOUT, 0);
    e170:	2200      	movs	r2, #0
    e172:	210d      	movs	r1, #13
    e174:	f7ff ffe3 	bl	e13e <ble_gattc_write_reliable_cb>
}
    e178:	bd08      	pop	{r3, pc}
	...

0000e17c <ble_gattc_proc_set_resume_timer>:
{
    e17c:	b508      	push	{r3, lr}
    proc->flags |= BLE_GATTC_PROC_F_STALLED;
    e17e:	7ac3      	ldrb	r3, [r0, #11]
    e180:	f043 0301 	orr.w	r3, r3, #1
    e184:	72c3      	strb	r3, [r0, #11]
    if (ble_gattc_resume_at == 0) {
    e186:	4b07      	ldr	r3, [pc, #28]	; (e1a4 <ble_gattc_proc_set_resume_timer+0x28>)
    e188:	681b      	ldr	r3, [r3, #0]
    e18a:	b103      	cbz	r3, e18e <ble_gattc_proc_set_resume_timer+0x12>
}
    e18c:	bd08      	pop	{r3, pc}
    return os_time_get();
    e18e:	f7fd f993 	bl	b4b8 <os_time_get>
        ble_gattc_resume_at = ble_npl_time_get() +
    e192:	3080      	adds	r0, #128	; 0x80
    e194:	4b03      	ldr	r3, [pc, #12]	; (e1a4 <ble_gattc_proc_set_resume_timer+0x28>)
    e196:	6018      	str	r0, [r3, #0]
        if (ble_gattc_resume_at == 0) {
    e198:	2800      	cmp	r0, #0
    e19a:	d1f7      	bne.n	e18c <ble_gattc_proc_set_resume_timer+0x10>
            ble_gattc_resume_at++;
    e19c:	3001      	adds	r0, #1
    e19e:	6018      	str	r0, [r3, #0]
}
    e1a0:	e7f4      	b.n	e18c <ble_gattc_proc_set_resume_timer+0x10>
    e1a2:	bf00      	nop
    e1a4:	200071e8 	.word	0x200071e8

0000e1a8 <ble_gattc_process_resume_status>:
    switch (status) {
    e1a8:	2906      	cmp	r1, #6
    e1aa:	d001      	beq.n	e1b0 <ble_gattc_process_resume_status+0x8>
}
    e1ac:	4608      	mov	r0, r1
    e1ae:	4770      	bx	lr
{
    e1b0:	b508      	push	{r3, lr}
        ble_gattc_proc_set_resume_timer(proc);
    e1b2:	f7ff ffe3 	bl	e17c <ble_gattc_proc_set_resume_timer>
        return 0;
    e1b6:	2100      	movs	r1, #0
}
    e1b8:	4608      	mov	r0, r1
    e1ba:	bd08      	pop	{r3, pc}

0000e1bc <ble_gattc_proc_set_exp_timer>:
{
    e1bc:	b510      	push	{r4, lr}
    e1be:	4604      	mov	r4, r0
    e1c0:	f7fd f97a 	bl	b4b8 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
    e1c4:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
    e1c8:	6060      	str	r0, [r4, #4]
}
    e1ca:	bd10      	pop	{r4, pc}

0000e1cc <ble_gattc_ticks_until_resume>:
{
    e1cc:	b508      	push	{r3, lr}
    if (ble_gattc_resume_at == 0) {
    e1ce:	4b07      	ldr	r3, [pc, #28]	; (e1ec <ble_gattc_ticks_until_resume+0x20>)
    e1d0:	681b      	ldr	r3, [r3, #0]
    e1d2:	b143      	cbz	r3, e1e6 <ble_gattc_ticks_until_resume+0x1a>
    e1d4:	f7fd f970 	bl	b4b8 <os_time_get>
    diff = ble_gattc_resume_at - now;
    e1d8:	4b04      	ldr	r3, [pc, #16]	; (e1ec <ble_gattc_ticks_until_resume+0x20>)
    e1da:	681b      	ldr	r3, [r3, #0]
    e1dc:	1a18      	subs	r0, r3, r0
    if (diff <= 0) {
    e1de:	2800      	cmp	r0, #0
    e1e0:	dc03      	bgt.n	e1ea <ble_gattc_ticks_until_resume+0x1e>
        return 0;
    e1e2:	2000      	movs	r0, #0
    e1e4:	e001      	b.n	e1ea <ble_gattc_ticks_until_resume+0x1e>
        return BLE_HS_FOREVER;
    e1e6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
    e1ea:	bd08      	pop	{r3, pc}
    e1ec:	200071e8 	.word	0x200071e8

0000e1f0 <ble_gattc_extract>:
{
    e1f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e1f4:	4681      	mov	r9, r0
    e1f6:	4688      	mov	r8, r1
    e1f8:	4693      	mov	fp, r2
    e1fa:	461f      	mov	r7, r3
    STAILQ_INIT(dst_list);
    e1fc:	2500      	movs	r5, #0
    e1fe:	601d      	str	r5, [r3, #0]
    e200:	605b      	str	r3, [r3, #4]
    ble_hs_lock();
    e202:	f001 fcc1 	bl	fb88 <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_gattc_procs);
    e206:	4b17      	ldr	r3, [pc, #92]	; (e264 <ble_gattc_extract+0x74>)
    e208:	681c      	ldr	r4, [r3, #0]
    num_extracted = 0;
    e20a:	46aa      	mov	sl, r5
    while (proc != NULL) {
    e20c:	e00c      	b.n	e228 <ble_gattc_extract+0x38>
                STAILQ_REMOVE_HEAD(&ble_gattc_procs, next);
    e20e:	4a15      	ldr	r2, [pc, #84]	; (e264 <ble_gattc_extract+0x74>)
    e210:	6813      	ldr	r3, [r2, #0]
    e212:	681b      	ldr	r3, [r3, #0]
    e214:	6013      	str	r3, [r2, #0]
    e216:	b9ab      	cbnz	r3, e244 <ble_gattc_extract+0x54>
    e218:	4613      	mov	r3, r2
    e21a:	605a      	str	r2, [r3, #4]
    e21c:	e012      	b.n	e244 <ble_gattc_extract+0x54>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
    e21e:	4b11      	ldr	r3, [pc, #68]	; (e264 <ble_gattc_extract+0x74>)
    e220:	605d      	str	r5, [r3, #4]
    e222:	e00f      	b.n	e244 <ble_gattc_extract+0x54>
            prev = proc;
    e224:	4625      	mov	r5, r4
    e226:	4634      	mov	r4, r6
    while (proc != NULL) {
    e228:	b1c4      	cbz	r4, e25c <ble_gattc_extract+0x6c>
        next = STAILQ_NEXT(proc, next);
    e22a:	6826      	ldr	r6, [r4, #0]
        if (cb(proc, arg)) {
    e22c:	4641      	mov	r1, r8
    e22e:	4620      	mov	r0, r4
    e230:	47c8      	blx	r9
    e232:	2800      	cmp	r0, #0
    e234:	d0f6      	beq.n	e224 <ble_gattc_extract+0x34>
            if (prev == NULL) {
    e236:	2d00      	cmp	r5, #0
    e238:	d0e9      	beq.n	e20e <ble_gattc_extract+0x1e>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
    e23a:	682b      	ldr	r3, [r5, #0]
    e23c:	681b      	ldr	r3, [r3, #0]
    e23e:	602b      	str	r3, [r5, #0]
    e240:	2b00      	cmp	r3, #0
    e242:	d0ec      	beq.n	e21e <ble_gattc_extract+0x2e>
            STAILQ_INSERT_TAIL(dst_list, proc, next);
    e244:	2300      	movs	r3, #0
    e246:	6023      	str	r3, [r4, #0]
    e248:	687b      	ldr	r3, [r7, #4]
    e24a:	601c      	str	r4, [r3, #0]
    e24c:	607c      	str	r4, [r7, #4]
            if (max_procs > 0) {
    e24e:	f1bb 0f00 	cmp.w	fp, #0
    e252:	dde8      	ble.n	e226 <ble_gattc_extract+0x36>
                num_extracted++;
    e254:	f10a 0a01 	add.w	sl, sl, #1
                if (num_extracted >= max_procs) {
    e258:	45d3      	cmp	fp, sl
    e25a:	dce4      	bgt.n	e226 <ble_gattc_extract+0x36>
    ble_hs_unlock();
    e25c:	f001 fc98 	bl	fb90 <ble_hs_unlock>
}
    e260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e264:	200071e0 	.word	0x200071e0

0000e268 <ble_gattc_extract_expired>:
{
    e268:	b510      	push	{r4, lr}
    e26a:	b082      	sub	sp, #8
    e26c:	4604      	mov	r4, r0
    e26e:	f7fd f923 	bl	b4b8 <os_time_get>
    criteria.now = ble_npl_time_get();
    e272:	9000      	str	r0, [sp, #0]
    criteria.next_exp_in = BLE_HS_FOREVER;
    e274:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    e278:	9301      	str	r3, [sp, #4]
    STAILQ_INIT(dst_list);
    e27a:	2200      	movs	r2, #0
    e27c:	6022      	str	r2, [r4, #0]
    e27e:	6064      	str	r4, [r4, #4]
    ble_gattc_extract(ble_gattc_proc_matches_expired, &criteria, 0, dst_list);
    e280:	4623      	mov	r3, r4
    e282:	4669      	mov	r1, sp
    e284:	4802      	ldr	r0, [pc, #8]	; (e290 <ble_gattc_extract_expired+0x28>)
    e286:	f7ff ffb3 	bl	e1f0 <ble_gattc_extract>
}
    e28a:	9801      	ldr	r0, [sp, #4]
    e28c:	b002      	add	sp, #8
    e28e:	bd10      	pop	{r4, pc}
    e290:	0000dd69 	.word	0x0000dd69

0000e294 <ble_gattc_extract_stalled>:
{
    e294:	b508      	push	{r3, lr}
    ble_gattc_extract(ble_gattc_proc_matches_stalled, NULL, 0, dst_list);
    e296:	4603      	mov	r3, r0
    e298:	2200      	movs	r2, #0
    e29a:	4611      	mov	r1, r2
    e29c:	4801      	ldr	r0, [pc, #4]	; (e2a4 <ble_gattc_extract_stalled+0x10>)
    e29e:	f7ff ffa7 	bl	e1f0 <ble_gattc_extract>
}
    e2a2:	bd08      	pop	{r3, pc}
    e2a4:	0000dd87 	.word	0x0000dd87

0000e2a8 <ble_gattc_extract_by_conn_op>:
{
    e2a8:	b500      	push	{lr}
    e2aa:	b083      	sub	sp, #12
    criteria.conn_handle = conn_handle;
    e2ac:	f8ad 0004 	strh.w	r0, [sp, #4]
    criteria.op = op;
    e2b0:	f88d 1006 	strb.w	r1, [sp, #6]
    ble_gattc_extract(ble_gattc_proc_matches_conn_op, &criteria, max_procs, dst_list);
    e2b4:	a901      	add	r1, sp, #4
    e2b6:	4803      	ldr	r0, [pc, #12]	; (e2c4 <ble_gattc_extract_by_conn_op+0x1c>)
    e2b8:	f7ff ff9a 	bl	e1f0 <ble_gattc_extract>
}
    e2bc:	b003      	add	sp, #12
    e2be:	f85d fb04 	ldr.w	pc, [sp], #4
    e2c2:	bf00      	nop
    e2c4:	0000dd45 	.word	0x0000dd45

0000e2c8 <ble_gattc_extract_first_by_conn_op>:
{
    e2c8:	b500      	push	{lr}
    e2ca:	b083      	sub	sp, #12
    ble_gattc_extract_by_conn_op(conn_handle, op, 1, &dst_list);
    e2cc:	466b      	mov	r3, sp
    e2ce:	2201      	movs	r2, #1
    e2d0:	f7ff ffea 	bl	e2a8 <ble_gattc_extract_by_conn_op>
}
    e2d4:	9800      	ldr	r0, [sp, #0]
    e2d6:	b003      	add	sp, #12
    e2d8:	f85d fb04 	ldr.w	pc, [sp], #4

0000e2dc <ble_gattc_proc_insert>:
{
    e2dc:	b510      	push	{r4, lr}
    e2de:	4604      	mov	r4, r0
    ble_hs_lock();
    e2e0:	f001 fc52 	bl	fb88 <ble_hs_lock>
    STAILQ_INSERT_TAIL(&ble_gattc_procs, proc, next);
    e2e4:	2300      	movs	r3, #0
    e2e6:	6023      	str	r3, [r4, #0]
    e2e8:	4b03      	ldr	r3, [pc, #12]	; (e2f8 <ble_gattc_proc_insert+0x1c>)
    e2ea:	685a      	ldr	r2, [r3, #4]
    e2ec:	6014      	str	r4, [r2, #0]
    e2ee:	605c      	str	r4, [r3, #4]
    ble_hs_unlock();
    e2f0:	f001 fc4e 	bl	fb90 <ble_hs_unlock>
}
    e2f4:	bd10      	pop	{r4, pc}
    e2f6:	bf00      	nop
    e2f8:	200071e0 	.word	0x200071e0

0000e2fc <ble_gattc_indicate_tmo>:
    ble_gatts_send_next_indicate(proc->conn_handle);
}

static void
ble_gattc_indicate_tmo(struct ble_gattc_proc *proc)
{
    e2fc:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gap_notify_tx_event(BLE_HS_ETIMEOUT, proc->conn_handle,
    e2fe:	2301      	movs	r3, #1
    e300:	8982      	ldrh	r2, [r0, #12]
    e302:	8901      	ldrh	r1, [r0, #8]
    e304:	200d      	movs	r0, #13
    e306:	f7ff fbc5 	bl	da94 <ble_gap_notify_tx_event>
                            proc->indicate.chr_val_handle, 1);
}
    e30a:	bd08      	pop	{r3, pc}

0000e30c <ble_gattc_write_cb>:
{
    e30c:	b570      	push	{r4, r5, r6, lr}
    e30e:	b082      	sub	sp, #8
    if (proc->write.cb == NULL) {
    e310:	6905      	ldr	r5, [r0, #16]
    e312:	b1ad      	cbz	r5, e340 <ble_gattc_write_cb+0x34>
    e314:	460b      	mov	r3, r1
    e316:	4604      	mov	r4, r0
        memset(&attr, 0, sizeof attr);
    e318:	2100      	movs	r1, #0
    e31a:	f8cd 1002 	str.w	r1, [sp, #2]
    e31e:	f8ad 1006 	strh.w	r1, [sp, #6]
        attr.handle = proc->write.att_handle;
    e322:	8981      	ldrh	r1, [r0, #12]
    e324:	f8ad 1000 	strh.w	r1, [sp]
        rc = proc->write.cb(proc->conn_handle,
    e328:	8906      	ldrh	r6, [r0, #8]
                            ble_gattc_error(status, att_handle),
    e32a:	4611      	mov	r1, r2
    e32c:	4618      	mov	r0, r3
    e32e:	f7ff fd39 	bl	dda4 <ble_gattc_error>
        rc = proc->write.cb(proc->conn_handle,
    e332:	6963      	ldr	r3, [r4, #20]
    e334:	466a      	mov	r2, sp
    e336:	4601      	mov	r1, r0
    e338:	4630      	mov	r0, r6
    e33a:	47a8      	blx	r5
}
    e33c:	b002      	add	sp, #8
    e33e:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
    e340:	2000      	movs	r0, #0
    return rc;
    e342:	e7fb      	b.n	e33c <ble_gattc_write_cb+0x30>

0000e344 <ble_gattc_write_tmo>:
{
    e344:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, BLE_HS_ETIMEOUT, 0);
    e346:	2200      	movs	r2, #0
    e348:	210d      	movs	r1, #13
    e34a:	f7ff ffdf 	bl	e30c <ble_gattc_write_cb>
}
    e34e:	bd08      	pop	{r3, pc}

0000e350 <ble_gattc_write_err>:
{
    e350:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, status, att_handle);
    e352:	f7ff ffdb 	bl	e30c <ble_gattc_write_cb>
}
    e356:	bd08      	pop	{r3, pc}

0000e358 <ble_gattc_proc_free>:
    if (proc != NULL) {
    e358:	b1e8      	cbz	r0, e396 <ble_gattc_proc_free+0x3e>
{
    e35a:	b538      	push	{r3, r4, r5, lr}
    e35c:	4604      	mov	r4, r0
        switch (proc->op) {
    e35e:	7a83      	ldrb	r3, [r0, #10]
    e360:	2b0c      	cmp	r3, #12
    e362:	d006      	beq.n	e372 <ble_gattc_proc_free+0x1a>
    e364:	2b0d      	cmp	r3, #13
    e366:	d014      	beq.n	e392 <ble_gattc_proc_free+0x3a>
        rc = os_memblock_put(&ble_gattc_proc_pool, proc);
    e368:	4621      	mov	r1, r4
    e36a:	480b      	ldr	r0, [pc, #44]	; (e398 <ble_gattc_proc_free+0x40>)
    e36c:	f7fc fc21 	bl	abb2 <os_memblock_put>
}
    e370:	bd38      	pop	{r3, r4, r5, pc}
            os_mbuf_free_chain(proc->write_long.attr.om);
    e372:	6900      	ldr	r0, [r0, #16]
    e374:	f7fb ffa6 	bl	a2c4 <os_mbuf_free_chain>
            break;
    e378:	e7f6      	b.n	e368 <ble_gattc_proc_free+0x10>
                os_mbuf_free_chain(proc->write_reliable.attrs[i].om);
    e37a:	1c5d      	adds	r5, r3, #1
    e37c:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    e380:	6898      	ldr	r0, [r3, #8]
    e382:	f7fb ff9f 	bl	a2c4 <os_mbuf_free_chain>
            for (i = 0; i < proc->write_reliable.num_attrs; i++) {
    e386:	462b      	mov	r3, r5
    e388:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    e38c:	429a      	cmp	r2, r3
    e38e:	dcf4      	bgt.n	e37a <ble_gattc_proc_free+0x22>
    e390:	e7ea      	b.n	e368 <ble_gattc_proc_free+0x10>
    e392:	2300      	movs	r3, #0
    e394:	e7f8      	b.n	e388 <ble_gattc_proc_free+0x30>
    e396:	4770      	bx	lr
    e398:	200071c4 	.word	0x200071c4

0000e39c <ble_gattc_fail_procs>:
{
    e39c:	b530      	push	{r4, r5, lr}
    e39e:	b083      	sub	sp, #12
    e3a0:	4615      	mov	r5, r2
    ble_gattc_extract_by_conn_op(conn_handle, op, 0, &temp_list);
    e3a2:	466b      	mov	r3, sp
    e3a4:	2200      	movs	r2, #0
    e3a6:	f7ff ff7f 	bl	e2a8 <ble_gattc_extract_by_conn_op>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
    e3aa:	e002      	b.n	e3b2 <ble_gattc_fail_procs+0x16>
        ble_gattc_proc_free(proc);
    e3ac:	4620      	mov	r0, r4
    e3ae:	f7ff ffd3 	bl	e358 <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
    e3b2:	9c00      	ldr	r4, [sp, #0]
    e3b4:	b17c      	cbz	r4, e3d6 <ble_gattc_fail_procs+0x3a>
        err_cb = ble_gattc_err_dispatch_get(proc->op);
    e3b6:	7aa0      	ldrb	r0, [r4, #10]
    e3b8:	f7ff fcb2 	bl	dd20 <ble_gattc_err_dispatch_get>
    e3bc:	4603      	mov	r3, r0
        err_cb(proc, status, 0);
    e3be:	2200      	movs	r2, #0
    e3c0:	4629      	mov	r1, r5
    e3c2:	4620      	mov	r0, r4
    e3c4:	4798      	blx	r3
        STAILQ_REMOVE_HEAD(&temp_list, next);
    e3c6:	9b00      	ldr	r3, [sp, #0]
    e3c8:	681b      	ldr	r3, [r3, #0]
    e3ca:	9300      	str	r3, [sp, #0]
    e3cc:	2b00      	cmp	r3, #0
    e3ce:	d1ed      	bne.n	e3ac <ble_gattc_fail_procs+0x10>
    e3d0:	f8cd d004 	str.w	sp, [sp, #4]
    e3d4:	e7ea      	b.n	e3ac <ble_gattc_fail_procs+0x10>
}
    e3d6:	b003      	add	sp, #12
    e3d8:	bd30      	pop	{r4, r5, pc}

0000e3da <ble_gattc_write_reliable_err>:
{
    e3da:	b510      	push	{r4, lr}
    e3dc:	4604      	mov	r4, r0
    ble_gattc_write_reliable_cb(proc, status, att_handle);
    e3de:	f7ff feae 	bl	e13e <ble_gattc_write_reliable_cb>
    if (proc->write_reliable.cur_attr < proc->write_reliable.num_attrs) {
    e3e2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    e3e6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e3ea:	429a      	cmp	r2, r3
    e3ec:	d300      	bcc.n	e3f0 <ble_gattc_write_reliable_err+0x16>
}
    e3ee:	bd10      	pop	{r4, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
    e3f0:	2100      	movs	r1, #0
    e3f2:	8920      	ldrh	r0, [r4, #8]
    e3f4:	f006 fa76 	bl	148e4 <ble_att_clt_tx_exec_write>
}
    e3f8:	e7f9      	b.n	e3ee <ble_gattc_write_reliable_err+0x14>

0000e3fa <ble_gattc_write_long_err>:
{
    e3fa:	b570      	push	{r4, r5, r6, lr}
    e3fc:	4604      	mov	r4, r0
    e3fe:	460d      	mov	r5, r1
    e400:	4616      	mov	r6, r2
    if (proc->write_long.attr.offset > 0 &&
    e402:	89c3      	ldrh	r3, [r0, #14]
    e404:	b11b      	cbz	r3, e40e <ble_gattc_write_long_err+0x14>
            OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
    e406:	6902      	ldr	r2, [r0, #16]
    e408:	8a12      	ldrh	r2, [r2, #16]
    if (proc->write_long.attr.offset > 0 &&
    e40a:	4293      	cmp	r3, r2
    e40c:	d305      	bcc.n	e41a <ble_gattc_write_long_err+0x20>
    ble_gattc_write_long_cb(proc, status, att_handle);
    e40e:	4632      	mov	r2, r6
    e410:	4629      	mov	r1, r5
    e412:	4620      	mov	r0, r4
    e414:	f7ff fe7a 	bl	e10c <ble_gattc_write_long_cb>
}
    e418:	bd70      	pop	{r4, r5, r6, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
    e41a:	2100      	movs	r1, #0
    e41c:	8900      	ldrh	r0, [r0, #8]
    e41e:	f006 fa61 	bl	148e4 <ble_att_clt_tx_exec_write>
    e422:	e7f4      	b.n	e40e <ble_gattc_write_long_err+0x14>

0000e424 <ble_gattc_write_reliable_tx>:
{
    e424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e428:	4604      	mov	r4, r0
    attr_idx = proc->write_reliable.cur_attr;
    e42a:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
    if (attr_idx >= proc->write_reliable.num_attrs) {
    e42e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    e432:	429d      	cmp	r5, r3
    e434:	d225      	bcs.n	e482 <ble_gattc_write_reliable_tx+0x5e>
    attr = proc->write_reliable.attrs + attr_idx;
    e436:	f100 080c 	add.w	r8, r0, #12
    e43a:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
    e43e:	8900      	ldrh	r0, [r0, #8]
    e440:	f006 f9b7 	bl	147b2 <ble_att_mtu>
    e444:	3805      	subs	r0, #5
    e446:	b280      	uxth	r0, r0
    if (max_sz <= 0) {
    e448:	b338      	cbz	r0, e49a <ble_gattc_write_reliable_tx+0x76>
        min(max_sz, OS_MBUF_PKTLEN(attr->om) - attr->offset);
    e44a:	687b      	ldr	r3, [r7, #4]
    e44c:	8a1b      	ldrh	r3, [r3, #16]
    e44e:	887a      	ldrh	r2, [r7, #2]
    e450:	1a9b      	subs	r3, r3, r2
    e452:	4298      	cmp	r0, r3
    e454:	bfa8      	it	ge
    e456:	4618      	movge	r0, r3
    proc->write_reliable.length =
    e458:	85e0      	strh	r0, [r4, #46]	; 0x2e
    om = ble_hs_mbuf_att_pkt();
    e45a:	f003 f900 	bl	1165e <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
    e45e:	4606      	mov	r6, r0
    e460:	b1f0      	cbz	r0, e4a0 <ble_gattc_write_reliable_tx+0x7c>
    rc = os_mbuf_appendfrom(om, attr->om, attr->offset,
    e462:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    e464:	887a      	ldrh	r2, [r7, #2]
    e466:	6879      	ldr	r1, [r7, #4]
    e468:	f7fc f804 	bl	a474 <os_mbuf_appendfrom>
    if (rc != 0) {
    e46c:	b9d0      	cbnz	r0, e4a4 <ble_gattc_write_reliable_tx+0x80>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle, attr->handle,
    e46e:	4633      	mov	r3, r6
    e470:	887a      	ldrh	r2, [r7, #2]
    e472:	f838 1035 	ldrh.w	r1, [r8, r5, lsl #3]
    e476:	8920      	ldrh	r0, [r4, #8]
    e478:	f006 fa30 	bl	148dc <ble_att_clt_tx_prep_write>
    e47c:	4604      	mov	r4, r0
    om = NULL;
    e47e:	2600      	movs	r6, #0
done:
    e480:	e005      	b.n	e48e <ble_gattc_write_reliable_tx+0x6a>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
    e482:	2101      	movs	r1, #1
    e484:	8900      	ldrh	r0, [r0, #8]
    e486:	f006 fa2d 	bl	148e4 <ble_att_clt_tx_exec_write>
    e48a:	4604      	mov	r4, r0
    om = NULL;
    e48c:	2600      	movs	r6, #0
    os_mbuf_free_chain(om);
    e48e:	4630      	mov	r0, r6
    e490:	f7fb ff18 	bl	a2c4 <os_mbuf_free_chain>
}
    e494:	4620      	mov	r0, r4
    e496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOTCONN;
    e49a:	2407      	movs	r4, #7
    om = NULL;
    e49c:	2600      	movs	r6, #0
    e49e:	e7f6      	b.n	e48e <ble_gattc_write_reliable_tx+0x6a>
        rc = BLE_HS_ENOMEM;
    e4a0:	2406      	movs	r4, #6
    e4a2:	e7f4      	b.n	e48e <ble_gattc_write_reliable_tx+0x6a>
        rc = BLE_HS_ENOMEM;
    e4a4:	2406      	movs	r4, #6
    e4a6:	e7f2      	b.n	e48e <ble_gattc_write_reliable_tx+0x6a>

0000e4a8 <ble_gattc_write_reliable_resume>:
{
    e4a8:	b538      	push	{r3, r4, r5, lr}
    e4aa:	4605      	mov	r5, r0
    status = ble_gattc_write_reliable_tx(proc);
    e4ac:	f7ff ffba 	bl	e424 <ble_gattc_write_reliable_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e4b0:	4601      	mov	r1, r0
    e4b2:	4628      	mov	r0, r5
    e4b4:	f7ff fe78 	bl	e1a8 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e4b8:	4604      	mov	r4, r0
    e4ba:	b908      	cbnz	r0, e4c0 <ble_gattc_write_reliable_resume+0x18>
}
    e4bc:	4620      	mov	r0, r4
    e4be:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_reliable_cb(proc, rc, 0);
    e4c0:	2200      	movs	r2, #0
    e4c2:	4601      	mov	r1, r0
    e4c4:	4628      	mov	r0, r5
    e4c6:	f7ff fe3a 	bl	e13e <ble_gattc_write_reliable_cb>
        return rc;
    e4ca:	e7f7      	b.n	e4bc <ble_gattc_write_reliable_resume+0x14>

0000e4cc <ble_gattc_write_long_tx>:
{
    e4cc:	b538      	push	{r3, r4, r5, lr}
    e4ce:	4604      	mov	r4, r0
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
    e4d0:	8900      	ldrh	r0, [r0, #8]
    e4d2:	f006 f96e 	bl	147b2 <ble_att_mtu>
    e4d6:	1f42      	subs	r2, r0, #5
    if (max_sz <= 0) {
    e4d8:	2a00      	cmp	r2, #0
    e4da:	dd27      	ble.n	e52c <ble_gattc_write_long_tx+0x60>
    write_len = min(max_sz,
    e4dc:	6923      	ldr	r3, [r4, #16]
    e4de:	8a1b      	ldrh	r3, [r3, #16]
    e4e0:	89e0      	ldrh	r0, [r4, #14]
    e4e2:	1a18      	subs	r0, r3, r0
    e4e4:	4290      	cmp	r0, r2
    e4e6:	bfa8      	it	ge
    e4e8:	4610      	movge	r0, r2
    if (write_len <= 0) {
    e4ea:	2800      	cmp	r0, #0
    e4ec:	dd13      	ble.n	e516 <ble_gattc_write_long_tx+0x4a>
    proc->write_long.length = write_len;
    e4ee:	82a0      	strh	r0, [r4, #20]
    om = ble_hs_mbuf_att_pkt();
    e4f0:	f003 f8b5 	bl	1165e <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
    e4f4:	4605      	mov	r5, r0
    e4f6:	b1e0      	cbz	r0, e532 <ble_gattc_write_long_tx+0x66>
    rc = os_mbuf_appendfrom(om, proc->write_long.attr.om,
    e4f8:	8aa3      	ldrh	r3, [r4, #20]
    e4fa:	89e2      	ldrh	r2, [r4, #14]
    e4fc:	6921      	ldr	r1, [r4, #16]
    e4fe:	f7fb ffb9 	bl	a474 <os_mbuf_appendfrom>
    if (rc != 0) {
    e502:	b9c0      	cbnz	r0, e536 <ble_gattc_write_long_tx+0x6a>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle,
    e504:	462b      	mov	r3, r5
    e506:	89e2      	ldrh	r2, [r4, #14]
    e508:	89a1      	ldrh	r1, [r4, #12]
    e50a:	8920      	ldrh	r0, [r4, #8]
    e50c:	f006 f9e6 	bl	148dc <ble_att_clt_tx_prep_write>
    e510:	4604      	mov	r4, r0
    om = NULL;
    e512:	2500      	movs	r5, #0
done:
    e514:	e005      	b.n	e522 <ble_gattc_write_long_tx+0x56>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
    e516:	2101      	movs	r1, #1
    e518:	8920      	ldrh	r0, [r4, #8]
    e51a:	f006 f9e3 	bl	148e4 <ble_att_clt_tx_exec_write>
    e51e:	4604      	mov	r4, r0
    om = NULL;
    e520:	2500      	movs	r5, #0
    os_mbuf_free_chain(om);
    e522:	4628      	mov	r0, r5
    e524:	f7fb fece 	bl	a2c4 <os_mbuf_free_chain>
}
    e528:	4620      	mov	r0, r4
    e52a:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
    e52c:	2407      	movs	r4, #7
    om = NULL;
    e52e:	2500      	movs	r5, #0
    e530:	e7f7      	b.n	e522 <ble_gattc_write_long_tx+0x56>
        rc = BLE_HS_ENOMEM;
    e532:	2406      	movs	r4, #6
    e534:	e7f5      	b.n	e522 <ble_gattc_write_long_tx+0x56>
        rc = BLE_HS_ENOMEM;
    e536:	2406      	movs	r4, #6
    e538:	e7f3      	b.n	e522 <ble_gattc_write_long_tx+0x56>

0000e53a <ble_gattc_write_long_resume>:
{
    e53a:	b538      	push	{r3, r4, r5, lr}
    e53c:	4605      	mov	r5, r0
    status = ble_gattc_write_long_tx(proc);
    e53e:	f7ff ffc5 	bl	e4cc <ble_gattc_write_long_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e542:	4601      	mov	r1, r0
    e544:	4628      	mov	r0, r5
    e546:	f7ff fe2f 	bl	e1a8 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e54a:	4604      	mov	r4, r0
    e54c:	b908      	cbnz	r0, e552 <ble_gattc_write_long_resume+0x18>
}
    e54e:	4620      	mov	r0, r4
    e550:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_long_cb(proc, rc, 0);
    e552:	2200      	movs	r2, #0
    e554:	4601      	mov	r1, r0
    e556:	4628      	mov	r0, r5
    e558:	f7ff fdd8 	bl	e10c <ble_gattc_write_long_cb>
        return rc;
    e55c:	e7f7      	b.n	e54e <ble_gattc_write_long_resume+0x14>

0000e55e <ble_gattc_read_long_tx>:
{
    e55e:	b508      	push	{r3, lr}
    if (proc->read_long.offset == 0) {
    e560:	89c2      	ldrh	r2, [r0, #14]
    e562:	b922      	cbnz	r2, e56e <ble_gattc_read_long_tx+0x10>
        rc = ble_att_clt_tx_read(proc->conn_handle, proc->read_long.handle);
    e564:	8981      	ldrh	r1, [r0, #12]
    e566:	8900      	ldrh	r0, [r0, #8]
    e568:	f006 f9a8 	bl	148bc <ble_att_clt_tx_read>
}
    e56c:	bd08      	pop	{r3, pc}
        rc = ble_att_clt_tx_read_blob(proc->conn_handle,
    e56e:	8981      	ldrh	r1, [r0, #12]
    e570:	8900      	ldrh	r0, [r0, #8]
    e572:	f006 f9a7 	bl	148c4 <ble_att_clt_tx_read_blob>
    e576:	e7f9      	b.n	e56c <ble_gattc_read_long_tx+0xe>

0000e578 <ble_gattc_read_long_resume>:
{
    e578:	b538      	push	{r3, r4, r5, lr}
    e57a:	4605      	mov	r5, r0
    status = ble_gattc_read_long_tx(proc);
    e57c:	f7ff ffef 	bl	e55e <ble_gattc_read_long_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e580:	4601      	mov	r1, r0
    e582:	4628      	mov	r0, r5
    e584:	f7ff fe10 	bl	e1a8 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e588:	4604      	mov	r4, r0
    e58a:	b908      	cbnz	r0, e590 <ble_gattc_read_long_resume+0x18>
}
    e58c:	4620      	mov	r0, r4
    e58e:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_read_long_cb(proc, rc, 0, NULL);
    e590:	2300      	movs	r3, #0
    e592:	461a      	mov	r2, r3
    e594:	4601      	mov	r1, r0
    e596:	4628      	mov	r0, r5
    e598:	f7ff fd69 	bl	e06e <ble_gattc_read_long_cb>
        return rc;
    e59c:	e7f6      	b.n	e58c <ble_gattc_read_long_resume+0x14>

0000e59e <ble_gattc_disc_all_dscs_tx>:
{
    e59e:	b508      	push	{r3, lr}
                                  proc->disc_all_dscs.prev_handle + 1,
    e5a0:	89c1      	ldrh	r1, [r0, #14]
    rc = ble_att_clt_tx_find_info(proc->conn_handle,
    e5a2:	3101      	adds	r1, #1
    e5a4:	8a02      	ldrh	r2, [r0, #16]
    e5a6:	b289      	uxth	r1, r1
    e5a8:	8900      	ldrh	r0, [r0, #8]
    e5aa:	f006 f97b 	bl	148a4 <ble_att_clt_tx_find_info>
}
    e5ae:	bd08      	pop	{r3, pc}

0000e5b0 <ble_gattc_disc_all_dscs_resume>:
{
    e5b0:	b538      	push	{r3, r4, r5, lr}
    e5b2:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_dscs_tx(proc);
    e5b4:	f7ff fff3 	bl	e59e <ble_gattc_disc_all_dscs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e5b8:	4601      	mov	r1, r0
    e5ba:	4628      	mov	r0, r5
    e5bc:	f7ff fdf4 	bl	e1a8 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e5c0:	4604      	mov	r4, r0
    e5c2:	b908      	cbnz	r0, e5c8 <ble_gattc_disc_all_dscs_resume+0x18>
}
    e5c4:	4620      	mov	r0, r4
    e5c6:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_dscs_cb(proc, rc, 0, NULL);
    e5c8:	2300      	movs	r3, #0
    e5ca:	461a      	mov	r2, r3
    e5cc:	4601      	mov	r1, r0
    e5ce:	4628      	mov	r0, r5
    e5d0:	f7ff fcde 	bl	df90 <ble_gattc_disc_all_dscs_cb>
        return rc;
    e5d4:	e7f6      	b.n	e5c4 <ble_gattc_disc_all_dscs_resume+0x14>
	...

0000e5d8 <ble_gattc_disc_chr_uuid_tx>:
{
    e5d8:	b500      	push	{lr}
    e5da:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
    e5dc:	4b07      	ldr	r3, [pc, #28]	; (e5fc <ble_gattc_disc_chr_uuid_tx+0x24>)
    e5de:	681a      	ldr	r2, [r3, #0]
    e5e0:	ab02      	add	r3, sp, #8
    e5e2:	f843 2d04 	str.w	r2, [r3, #-4]!
                                  proc->disc_chr_uuid.prev_handle + 1,
    e5e6:	8c01      	ldrh	r1, [r0, #32]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
    e5e8:	3101      	adds	r1, #1
    e5ea:	8c42      	ldrh	r2, [r0, #34]	; 0x22
    e5ec:	b289      	uxth	r1, r1
    e5ee:	8900      	ldrh	r0, [r0, #8]
    e5f0:	f006 f960 	bl	148b4 <ble_att_clt_tx_read_type>
}
    e5f4:	b003      	add	sp, #12
    e5f6:	f85d fb04 	ldr.w	pc, [sp], #4
    e5fa:	bf00      	nop
    e5fc:	00028cc0 	.word	0x00028cc0

0000e600 <ble_gattc_disc_chr_uuid_resume>:
{
    e600:	b538      	push	{r3, r4, r5, lr}
    e602:	4605      	mov	r5, r0
    status = ble_gattc_disc_chr_uuid_tx(proc);
    e604:	f7ff ffe8 	bl	e5d8 <ble_gattc_disc_chr_uuid_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e608:	4601      	mov	r1, r0
    e60a:	4628      	mov	r0, r5
    e60c:	f7ff fdcc 	bl	e1a8 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e610:	4604      	mov	r4, r0
    e612:	b908      	cbnz	r0, e618 <ble_gattc_disc_chr_uuid_resume+0x18>
}
    e614:	4620      	mov	r0, r4
    e616:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
    e618:	2300      	movs	r3, #0
    e61a:	461a      	mov	r2, r3
    e61c:	4601      	mov	r1, r0
    e61e:	4628      	mov	r0, r5
    e620:	f7ff fc8f 	bl	df42 <ble_gattc_disc_chr_uuid_cb>
        return rc;
    e624:	e7f6      	b.n	e614 <ble_gattc_disc_chr_uuid_resume+0x14>
	...

0000e628 <ble_gattc_disc_all_chrs_tx>:
{
    e628:	b500      	push	{lr}
    e62a:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
    e62c:	4b07      	ldr	r3, [pc, #28]	; (e64c <ble_gattc_disc_all_chrs_tx+0x24>)
    e62e:	681a      	ldr	r2, [r3, #0]
    e630:	ab02      	add	r3, sp, #8
    e632:	f843 2d04 	str.w	r2, [r3, #-4]!
                                  proc->disc_all_chrs.prev_handle + 1,
    e636:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
    e638:	3101      	adds	r1, #1
    e63a:	89c2      	ldrh	r2, [r0, #14]
    e63c:	b289      	uxth	r1, r1
    e63e:	8900      	ldrh	r0, [r0, #8]
    e640:	f006 f938 	bl	148b4 <ble_att_clt_tx_read_type>
}
    e644:	b003      	add	sp, #12
    e646:	f85d fb04 	ldr.w	pc, [sp], #4
    e64a:	bf00      	nop
    e64c:	00028cc0 	.word	0x00028cc0

0000e650 <ble_gattc_disc_all_chrs_resume>:
{
    e650:	b538      	push	{r3, r4, r5, lr}
    e652:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_chrs_tx(proc);
    e654:	f7ff ffe8 	bl	e628 <ble_gattc_disc_all_chrs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e658:	4601      	mov	r1, r0
    e65a:	4628      	mov	r0, r5
    e65c:	f7ff fda4 	bl	e1a8 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e660:	4604      	mov	r4, r0
    e662:	b908      	cbnz	r0, e668 <ble_gattc_disc_all_chrs_resume+0x18>
}
    e664:	4620      	mov	r0, r4
    e666:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_chrs_cb(proc, rc, 0, NULL);
    e668:	2300      	movs	r3, #0
    e66a:	461a      	mov	r2, r3
    e66c:	4601      	mov	r1, r0
    e66e:	4628      	mov	r0, r5
    e670:	f7ff fc40 	bl	def4 <ble_gattc_disc_all_chrs_cb>
        return rc;
    e674:	e7f6      	b.n	e664 <ble_gattc_disc_all_chrs_resume+0x14>
	...

0000e678 <ble_gattc_find_inc_svcs_tx>:
{
    e678:	b500      	push	{lr}
    e67a:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_INCLUDE);
    e67c:	4b09      	ldr	r3, [pc, #36]	; (e6a4 <ble_gattc_find_inc_svcs_tx+0x2c>)
    e67e:	685b      	ldr	r3, [r3, #4]
    e680:	9301      	str	r3, [sp, #4]
    if (proc->find_inc_svcs.cur_start == 0) {
    e682:	8a01      	ldrh	r1, [r0, #16]
    e684:	b951      	cbnz	r1, e69c <ble_gattc_find_inc_svcs_tx+0x24>
                                      proc->find_inc_svcs.prev_handle + 1,
    e686:	8981      	ldrh	r1, [r0, #12]
        rc = ble_att_clt_tx_read_type(proc->conn_handle,
    e688:	3101      	adds	r1, #1
    e68a:	ab01      	add	r3, sp, #4
    e68c:	89c2      	ldrh	r2, [r0, #14]
    e68e:	b289      	uxth	r1, r1
    e690:	8900      	ldrh	r0, [r0, #8]
    e692:	f006 f90f 	bl	148b4 <ble_att_clt_tx_read_type>
}
    e696:	b003      	add	sp, #12
    e698:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_att_clt_tx_read(proc->conn_handle,
    e69c:	8900      	ldrh	r0, [r0, #8]
    e69e:	f006 f90d 	bl	148bc <ble_att_clt_tx_read>
    e6a2:	e7f8      	b.n	e696 <ble_gattc_find_inc_svcs_tx+0x1e>
    e6a4:	00028cc0 	.word	0x00028cc0

0000e6a8 <ble_gattc_find_inc_svcs_resume>:
{
    e6a8:	b538      	push	{r3, r4, r5, lr}
    e6aa:	4605      	mov	r5, r0
    status = ble_gattc_find_inc_svcs_tx(proc);
    e6ac:	f7ff ffe4 	bl	e678 <ble_gattc_find_inc_svcs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e6b0:	4601      	mov	r1, r0
    e6b2:	4628      	mov	r0, r5
    e6b4:	f7ff fd78 	bl	e1a8 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e6b8:	4604      	mov	r4, r0
    e6ba:	b908      	cbnz	r0, e6c0 <ble_gattc_find_inc_svcs_resume+0x18>
}
    e6bc:	4620      	mov	r0, r4
    e6be:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
    e6c0:	2300      	movs	r3, #0
    e6c2:	461a      	mov	r2, r3
    e6c4:	4601      	mov	r1, r0
    e6c6:	4628      	mov	r0, r5
    e6c8:	f7ff fbeb 	bl	dea2 <ble_gattc_find_inc_svcs_cb>
        return rc;
    e6cc:	e7f6      	b.n	e6bc <ble_gattc_find_inc_svcs_resume+0x14>

0000e6ce <ble_gattc_disc_svc_uuid_tx>:
{
    e6ce:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6d0:	b087      	sub	sp, #28
    e6d2:	4604      	mov	r4, r0
    ble_uuid_flat(&proc->disc_svc_uuid.service_uuid.u, val);
    e6d4:	f100 060c 	add.w	r6, r0, #12
    e6d8:	ad02      	add	r5, sp, #8
    e6da:	4629      	mov	r1, r5
    e6dc:	4630      	mov	r0, r6
    e6de:	f005 ff91 	bl	14604 <ble_uuid_flat>
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
    e6e2:	8927      	ldrh	r7, [r4, #8]
                                        proc->disc_svc_uuid.prev_handle + 1,
    e6e4:	8c24      	ldrh	r4, [r4, #32]
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
    e6e6:	3401      	adds	r4, #1
    e6e8:	b2a4      	uxth	r4, r4
    e6ea:	4630      	mov	r0, r6
    e6ec:	f005 ffb6 	bl	1465c <ble_uuid_length>
    e6f0:	9001      	str	r0, [sp, #4]
    e6f2:	9500      	str	r5, [sp, #0]
    e6f4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e6f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e6fc:	4621      	mov	r1, r4
    e6fe:	4638      	mov	r0, r7
    e700:	f006 f8d4 	bl	148ac <ble_att_clt_tx_find_type_value>
}
    e704:	b007      	add	sp, #28
    e706:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e708 <ble_gattc_disc_svc_uuid_resume>:
{
    e708:	b538      	push	{r3, r4, r5, lr}
    e70a:	4605      	mov	r5, r0
    status = ble_gattc_disc_svc_uuid_tx(proc);
    e70c:	f7ff ffdf 	bl	e6ce <ble_gattc_disc_svc_uuid_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e710:	4601      	mov	r1, r0
    e712:	4628      	mov	r0, r5
    e714:	f7ff fd48 	bl	e1a8 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e718:	4604      	mov	r4, r0
    e71a:	b908      	cbnz	r0, e720 <ble_gattc_disc_svc_uuid_resume+0x18>
}
    e71c:	4620      	mov	r0, r4
    e71e:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_svc_uuid_cb(proc, rc, 0, NULL);
    e720:	2300      	movs	r3, #0
    e722:	461a      	mov	r2, r3
    e724:	4601      	mov	r1, r0
    e726:	4628      	mov	r0, r5
    e728:	f7ff fb94 	bl	de54 <ble_gattc_disc_svc_uuid_cb>
        return rc;
    e72c:	e7f6      	b.n	e71c <ble_gattc_disc_svc_uuid_resume+0x14>
	...

0000e730 <ble_gattc_disc_all_svcs_tx>:
{
    e730:	b500      	push	{lr}
    e732:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_PRIMARY_SERVICE);
    e734:	4b07      	ldr	r3, [pc, #28]	; (e754 <ble_gattc_disc_all_svcs_tx+0x24>)
    e736:	689a      	ldr	r2, [r3, #8]
    e738:	ab02      	add	r3, sp, #8
    e73a:	f843 2d04 	str.w	r2, [r3, #-4]!
                                        proc->disc_all_svcs.prev_handle + 1,
    e73e:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_group_type(proc->conn_handle,
    e740:	3101      	adds	r1, #1
    e742:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e746:	b289      	uxth	r1, r1
    e748:	8900      	ldrh	r0, [r0, #8]
    e74a:	f006 f8c1 	bl	148d0 <ble_att_clt_tx_read_group_type>
}
    e74e:	b003      	add	sp, #12
    e750:	f85d fb04 	ldr.w	pc, [sp], #4
    e754:	00028cc0 	.word	0x00028cc0

0000e758 <ble_gattc_disc_all_svcs_resume>:
{
    e758:	b538      	push	{r3, r4, r5, lr}
    e75a:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_svcs_tx(proc);
    e75c:	f7ff ffe8 	bl	e730 <ble_gattc_disc_all_svcs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e760:	4601      	mov	r1, r0
    e762:	4628      	mov	r0, r5
    e764:	f7ff fd20 	bl	e1a8 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e768:	4604      	mov	r4, r0
    e76a:	b908      	cbnz	r0, e770 <ble_gattc_disc_all_svcs_resume+0x18>
}
    e76c:	4620      	mov	r0, r4
    e76e:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_svcs_cb(proc, rc, 0, NULL);
    e770:	2300      	movs	r3, #0
    e772:	461a      	mov	r2, r3
    e774:	b281      	uxth	r1, r0
    e776:	4628      	mov	r0, r5
    e778:	f7ff fb44 	bl	de04 <ble_gattc_disc_all_svcs_cb>
        return rc;
    e77c:	e7f6      	b.n	e76c <ble_gattc_disc_all_svcs_resume+0x14>

0000e77e <ble_gattc_process_status>:
{
    e77e:	b510      	push	{r4, lr}
    e780:	4604      	mov	r4, r0
    switch (status) {
    e782:	b961      	cbnz	r1, e79e <ble_gattc_process_status+0x20>
        if (!(proc->flags & BLE_GATTC_PROC_F_STALLED)) {
    e784:	7ac3      	ldrb	r3, [r0, #11]
    e786:	f013 0f01 	tst.w	r3, #1
    e78a:	d005      	beq.n	e798 <ble_gattc_process_status+0x1a>
        ble_gattc_proc_insert(proc);
    e78c:	4620      	mov	r0, r4
    e78e:	f7ff fda5 	bl	e2dc <ble_gattc_proc_insert>
        ble_hs_timer_resched();
    e792:	f001 fad5 	bl	fd40 <ble_hs_timer_resched>
}
    e796:	bd10      	pop	{r4, pc}
            ble_gattc_proc_set_exp_timer(proc);
    e798:	f7ff fd10 	bl	e1bc <ble_gattc_proc_set_exp_timer>
    e79c:	e7f6      	b.n	e78c <ble_gattc_process_status+0xe>
        ble_gattc_proc_free(proc);
    e79e:	f7ff fddb 	bl	e358 <ble_gattc_proc_free>
}
    e7a2:	e7f8      	b.n	e796 <ble_gattc_process_status+0x18>

0000e7a4 <ble_gattc_resume_procs>:
{
    e7a4:	b510      	push	{r4, lr}
    e7a6:	b082      	sub	sp, #8
    ble_gattc_resume_at = 0;
    e7a8:	4b0d      	ldr	r3, [pc, #52]	; (e7e0 <ble_gattc_resume_procs+0x3c>)
    e7aa:	2200      	movs	r2, #0
    e7ac:	601a      	str	r2, [r3, #0]
    ble_gattc_extract_stalled(&stall_list);
    e7ae:	4668      	mov	r0, sp
    e7b0:	f7ff fd70 	bl	e294 <ble_gattc_extract_stalled>
    STAILQ_FOREACH(proc, &stall_list, next) {
    e7b4:	9c00      	ldr	r4, [sp, #0]
    e7b6:	e00e      	b.n	e7d6 <ble_gattc_resume_procs+0x32>
        resume_cb = ble_gattc_resume_dispatch_get(proc->op);
    e7b8:	7aa0      	ldrb	r0, [r4, #10]
    e7ba:	f7ff fab7 	bl	dd2c <ble_gattc_resume_dispatch_get>
    e7be:	4602      	mov	r2, r0
        proc->flags &= ~BLE_GATTC_PROC_F_STALLED;
    e7c0:	7ae3      	ldrb	r3, [r4, #11]
    e7c2:	f023 0301 	bic.w	r3, r3, #1
    e7c6:	72e3      	strb	r3, [r4, #11]
        rc = resume_cb(proc);
    e7c8:	4620      	mov	r0, r4
    e7ca:	4790      	blx	r2
        ble_gattc_process_status(proc, rc);
    e7cc:	4601      	mov	r1, r0
    e7ce:	4620      	mov	r0, r4
    e7d0:	f7ff ffd5 	bl	e77e <ble_gattc_process_status>
    STAILQ_FOREACH(proc, &stall_list, next) {
    e7d4:	6824      	ldr	r4, [r4, #0]
    e7d6:	2c00      	cmp	r4, #0
    e7d8:	d1ee      	bne.n	e7b8 <ble_gattc_resume_procs+0x14>
}
    e7da:	b002      	add	sp, #8
    e7dc:	bd10      	pop	{r4, pc}
    e7de:	bf00      	nop
    e7e0:	200071e8 	.word	0x200071e8

0000e7e4 <ble_gattc_proc_alloc>:
{
    e7e4:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_gattc_proc_pool);
    e7e6:	4805      	ldr	r0, [pc, #20]	; (e7fc <ble_gattc_proc_alloc+0x18>)
    e7e8:	f7fc f9bb 	bl	ab62 <os_memblock_get>
    if (proc != NULL) {
    e7ec:	4604      	mov	r4, r0
    e7ee:	b118      	cbz	r0, e7f8 <ble_gattc_proc_alloc+0x14>
        memset(proc, 0, sizeof *proc);
    e7f0:	2238      	movs	r2, #56	; 0x38
    e7f2:	2100      	movs	r1, #0
    e7f4:	f7fd f875 	bl	b8e2 <memset>
}
    e7f8:	4620      	mov	r0, r4
    e7fa:	bd10      	pop	{r4, pc}
    e7fc:	200071c4 	.word	0x200071c4

0000e800 <ble_gattc_indicate_err>:
{
    e800:	b538      	push	{r3, r4, r5, lr}
    e802:	4604      	mov	r4, r0
    e804:	460d      	mov	r5, r1
    if (status != BLE_HS_ENOTCONN) {
    e806:	2907      	cmp	r1, #7
    e808:	d004      	beq.n	e814 <ble_gattc_indicate_err+0x14>
        rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
    e80a:	8981      	ldrh	r1, [r0, #12]
    e80c:	8900      	ldrh	r0, [r0, #8]
    e80e:	f000 ffa1 	bl	f754 <ble_gatts_rx_indicate_ack>
        if (rc != 0) {
    e812:	b940      	cbnz	r0, e826 <ble_gattc_indicate_err+0x26>
    ble_gap_notify_tx_event(status, proc->conn_handle,
    e814:	2301      	movs	r3, #1
    e816:	89a2      	ldrh	r2, [r4, #12]
    e818:	8921      	ldrh	r1, [r4, #8]
    e81a:	4628      	mov	r0, r5
    e81c:	f7ff f93a 	bl	da94 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
    e820:	8920      	ldrh	r0, [r4, #8]
    e822:	f000 ff6b 	bl	f6fc <ble_gatts_send_next_indicate>
}
    e826:	bd38      	pop	{r3, r4, r5, pc}

0000e828 <ble_gattc_indicate_rx_rsp>:
 * Handles an incoming handle-value-confirmation for the specified indication
 * proc.
 */
static void
ble_gattc_indicate_rx_rsp(struct ble_gattc_proc *proc)
{
    e828:	b510      	push	{r4, lr}
    e82a:	4604      	mov	r4, r0
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
    e82c:	8981      	ldrh	r1, [r0, #12]
    e82e:	8900      	ldrh	r0, [r0, #8]
    e830:	f000 ff90 	bl	f754 <ble_gatts_rx_indicate_ack>
                                   proc->indicate.chr_val_handle);
    if (rc != 0) {
    e834:	b100      	cbz	r0, e838 <ble_gattc_indicate_rx_rsp+0x10>
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
                            proc->indicate.chr_val_handle, 1);

    /* Send the next indication if one is pending. */
    ble_gatts_send_next_indicate(proc->conn_handle);
}
    e836:	bd10      	pop	{r4, pc}
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
    e838:	2301      	movs	r3, #1
    e83a:	89a2      	ldrh	r2, [r4, #12]
    e83c:	8921      	ldrh	r1, [r4, #8]
    e83e:	200e      	movs	r0, #14
    e840:	f7ff f928 	bl	da94 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
    e844:	8920      	ldrh	r0, [r4, #8]
    e846:	f000 ff59 	bl	f6fc <ble_gatts_send_next_indicate>
    e84a:	e7f4      	b.n	e836 <ble_gattc_indicate_rx_rsp+0xe>

0000e84c <ble_gattc_timer>:
{
    e84c:	b530      	push	{r4, r5, lr}
    e84e:	b083      	sub	sp, #12
    ticks_until_exp = ble_gattc_extract_expired(&exp_list);
    e850:	4668      	mov	r0, sp
    e852:	f7ff fd09 	bl	e268 <ble_gattc_extract_expired>
    e856:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
    e858:	e002      	b.n	e860 <ble_gattc_timer+0x14>
        ble_gattc_proc_free(proc);
    e85a:	4620      	mov	r0, r4
    e85c:	f7ff fd7c 	bl	e358 <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
    e860:	9c00      	ldr	r4, [sp, #0]
    e862:	b174      	cbz	r4, e882 <ble_gattc_timer+0x36>
        ble_gattc_proc_timeout(proc);
    e864:	4620      	mov	r0, r4
    e866:	f7ff fa92 	bl	dd8e <ble_gattc_proc_timeout>
        ble_gap_terminate(proc->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
    e86a:	2113      	movs	r1, #19
    e86c:	8920      	ldrh	r0, [r4, #8]
    e86e:	f7fe fe1a 	bl	d4a6 <ble_gap_terminate>
        STAILQ_REMOVE_HEAD(&exp_list, next);
    e872:	9b00      	ldr	r3, [sp, #0]
    e874:	681b      	ldr	r3, [r3, #0]
    e876:	9300      	str	r3, [sp, #0]
    e878:	2b00      	cmp	r3, #0
    e87a:	d1ee      	bne.n	e85a <ble_gattc_timer+0xe>
    e87c:	f8cd d004 	str.w	sp, [sp, #4]
    e880:	e7eb      	b.n	e85a <ble_gattc_timer+0xe>
    ticks_until_resume = ble_gattc_ticks_until_resume();
    e882:	f7ff fca3 	bl	e1cc <ble_gattc_ticks_until_resume>
    if (ticks_until_resume == 0) {
    e886:	4603      	mov	r3, r0
    e888:	b128      	cbz	r0, e896 <ble_gattc_timer+0x4a>
}
    e88a:	42ab      	cmp	r3, r5
    e88c:	bfa8      	it	ge
    e88e:	462b      	movge	r3, r5
    e890:	4618      	mov	r0, r3
    e892:	b003      	add	sp, #12
    e894:	bd30      	pop	{r4, r5, pc}
        ble_gattc_resume_procs();
    e896:	f7ff ff85 	bl	e7a4 <ble_gattc_resume_procs>
        ticks_until_resume = ble_gattc_ticks_until_resume();
    e89a:	f7ff fc97 	bl	e1cc <ble_gattc_ticks_until_resume>
    e89e:	4603      	mov	r3, r0
    e8a0:	e7f3      	b.n	e88a <ble_gattc_timer+0x3e>

0000e8a2 <ble_gattc_notify_custom>:
{
    e8a2:	b5f0      	push	{r4, r5, r6, r7, lr}
    e8a4:	b083      	sub	sp, #12
    e8a6:	4607      	mov	r7, r0
    e8a8:	460d      	mov	r5, r1
    if (txom == NULL) {
    e8aa:	4614      	mov	r4, r2
    e8ac:	b192      	cbz	r2, e8d4 <ble_gattc_notify_custom+0x32>
    rc = ble_att_clt_tx_notify(conn_handle, chr_val_handle, txom);
    e8ae:	4622      	mov	r2, r4
    e8b0:	4629      	mov	r1, r5
    e8b2:	4638      	mov	r0, r7
    e8b4:	f006 f81a 	bl	148ec <ble_att_clt_tx_notify>
    e8b8:	4606      	mov	r6, r0
    txom = NULL;
    e8ba:	2400      	movs	r4, #0
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 0);
    e8bc:	2300      	movs	r3, #0
    e8be:	462a      	mov	r2, r5
    e8c0:	4639      	mov	r1, r7
    e8c2:	4630      	mov	r0, r6
    e8c4:	f7ff f8e6 	bl	da94 <ble_gap_notify_tx_event>
    os_mbuf_free_chain(txom);
    e8c8:	4620      	mov	r0, r4
    e8ca:	f7fb fcfb 	bl	a2c4 <os_mbuf_free_chain>
}
    e8ce:	4630      	mov	r0, r6
    e8d0:	b003      	add	sp, #12
    e8d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txom = ble_hs_mbuf_att_pkt();
    e8d4:	f002 fec3 	bl	1165e <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
    e8d8:	4604      	mov	r4, r0
    e8da:	b158      	cbz	r0, e8f4 <ble_gattc_notify_custom+0x52>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE,
    e8dc:	2200      	movs	r2, #0
    e8de:	9200      	str	r2, [sp, #0]
    e8e0:	4603      	mov	r3, r0
    e8e2:	4629      	mov	r1, r5
    e8e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e8e8:	f006 ff16 	bl	15718 <ble_att_svr_read_handle>
        if (rc != 0) {
    e8ec:	2800      	cmp	r0, #0
    e8ee:	d0de      	beq.n	e8ae <ble_gattc_notify_custom+0xc>
            rc = BLE_HS_EAPP;
    e8f0:	2609      	movs	r6, #9
    e8f2:	e7e3      	b.n	e8bc <ble_gattc_notify_custom+0x1a>
            rc = BLE_HS_ENOMEM;
    e8f4:	2606      	movs	r6, #6
    e8f6:	e7e1      	b.n	e8bc <ble_gattc_notify_custom+0x1a>

0000e8f8 <ble_gattc_notify>:
{
    e8f8:	b508      	push	{r3, lr}
    rc = ble_gattc_notify_custom(conn_handle, chr_val_handle, NULL);
    e8fa:	2200      	movs	r2, #0
    e8fc:	f7ff ffd1 	bl	e8a2 <ble_gattc_notify_custom>
}
    e900:	bd08      	pop	{r3, pc}

0000e902 <ble_gatts_indicate_fail_notconn>:
 * Causes the indication in progress for the specified connection (if any) to
 * fail with a status code of BLE_HS_ENOTCONN;
 */
void
ble_gatts_indicate_fail_notconn(uint16_t conn_handle)
{
    e902:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_INDICATE, BLE_HS_ENOTCONN);
    e904:	2207      	movs	r2, #7
    e906:	210e      	movs	r1, #14
    e908:	f7ff fd48 	bl	e39c <ble_gattc_fail_procs>
}
    e90c:	bd08      	pop	{r3, pc}

0000e90e <ble_gattc_indicate_custom>:

int
ble_gattc_indicate_custom(uint16_t conn_handle, uint16_t chr_val_handle,
                          struct os_mbuf *txom)
{
    e90e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e912:	b082      	sub	sp, #8
    e914:	4680      	mov	r8, r0
    e916:	460f      	mov	r7, r1
    e918:	4614      	mov	r4, r2
    struct ble_hs_conn *conn;
    int rc;

    STATS_INC(ble_gattc_stats, indicate);

    proc = ble_gattc_proc_alloc();
    e91a:	f7ff ff63 	bl	e7e4 <ble_gattc_proc_alloc>
    if (proc == NULL) {
    e91e:	4605      	mov	r5, r0
    e920:	b3d0      	cbz	r0, e998 <ble_gattc_indicate_custom+0x8a>
        rc = BLE_HS_ENOMEM;
        goto done;
    }

    proc->op = BLE_GATT_OP_INDICATE;
    e922:	230e      	movs	r3, #14
    e924:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
    e926:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->indicate.chr_val_handle = chr_val_handle;
    e92a:	8187      	strh	r7, [r0, #12]

    ble_gattc_log_indicate(chr_val_handle);

    if (txom == NULL) {
    e92c:	b1c4      	cbz	r4, e960 <ble_gattc_indicate_custom+0x52>
            rc = BLE_HS_EAPP;
            goto done;
        }
    }

    rc = ble_att_clt_tx_indicate(conn_handle, chr_val_handle, txom);
    e92e:	4622      	mov	r2, r4
    e930:	4639      	mov	r1, r7
    e932:	4640      	mov	r0, r8
    e934:	f005 fffa 	bl	1492c <ble_att_clt_tx_indicate>
    txom = NULL;
    if (rc != 0) {
    e938:	4606      	mov	r6, r0
    e93a:	b308      	cbz	r0, e980 <ble_gattc_indicate_custom+0x72>
    txom = NULL;
    e93c:	2400      	movs	r4, #0
    if (rc != 0) {
        STATS_INC(ble_gattc_stats, indicate_fail);
    }

    /* Tell the application that an indication transmission was attempted. */
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 1);
    e93e:	2301      	movs	r3, #1
    e940:	463a      	mov	r2, r7
    e942:	4641      	mov	r1, r8
    e944:	4630      	mov	r0, r6
    e946:	f7ff f8a5 	bl	da94 <ble_gap_notify_tx_event>

    ble_gattc_process_status(proc, rc);
    e94a:	4631      	mov	r1, r6
    e94c:	4628      	mov	r0, r5
    e94e:	f7ff ff16 	bl	e77e <ble_gattc_process_status>
    os_mbuf_free_chain(txom);
    e952:	4620      	mov	r0, r4
    e954:	f7fb fcb6 	bl	a2c4 <os_mbuf_free_chain>
    return rc;
}
    e958:	4630      	mov	r0, r6
    e95a:	b002      	add	sp, #8
    e95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txom = ble_hs_mbuf_att_pkt();
    e960:	f002 fe7d 	bl	1165e <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
    e964:	4604      	mov	r4, r0
    e966:	b1c8      	cbz	r0, e99c <ble_gattc_indicate_custom+0x8e>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE, chr_val_handle,
    e968:	2200      	movs	r2, #0
    e96a:	9200      	str	r2, [sp, #0]
    e96c:	4603      	mov	r3, r0
    e96e:	4639      	mov	r1, r7
    e970:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e974:	f006 fed0 	bl	15718 <ble_att_svr_read_handle>
        if (rc != 0) {
    e978:	2800      	cmp	r0, #0
    e97a:	d0d8      	beq.n	e92e <ble_gattc_indicate_custom+0x20>
            rc = BLE_HS_EAPP;
    e97c:	2609      	movs	r6, #9
    e97e:	e7de      	b.n	e93e <ble_gattc_indicate_custom+0x30>
    ble_hs_lock();
    e980:	f001 f902 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    e984:	4640      	mov	r0, r8
    e986:	f001 ff09 	bl	1079c <ble_hs_conn_find>
    if (conn != NULL) {
    e98a:	b108      	cbz	r0, e990 <ble_gattc_indicate_custom+0x82>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
    e98c:	f8a0 7054 	strh.w	r7, [r0, #84]	; 0x54
    ble_hs_unlock();
    e990:	f001 f8fe 	bl	fb90 <ble_hs_unlock>
    txom = NULL;
    e994:	2400      	movs	r4, #0
    e996:	e7d2      	b.n	e93e <ble_gattc_indicate_custom+0x30>
        rc = BLE_HS_ENOMEM;
    e998:	2606      	movs	r6, #6
    e99a:	e7d0      	b.n	e93e <ble_gattc_indicate_custom+0x30>
            rc = BLE_HS_ENOMEM;
    e99c:	2606      	movs	r6, #6
    e99e:	e7ce      	b.n	e93e <ble_gattc_indicate_custom+0x30>

0000e9a0 <ble_gattc_indicate>:

int
ble_gattc_indicate(uint16_t conn_handle, uint16_t chr_val_handle)
{
    e9a0:	b508      	push	{r3, lr}
    return ble_gattc_indicate_custom(conn_handle, chr_val_handle, NULL);
    e9a2:	2200      	movs	r2, #0
    e9a4:	f7ff ffb3 	bl	e90e <ble_gattc_indicate_custom>
}
    e9a8:	bd08      	pop	{r3, pc}

0000e9aa <ble_gattc_rx_err>:
 * Dispatches an incoming ATT error-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_err(uint16_t conn_handle, uint16_t handle, uint16_t status)
{
    e9aa:	b570      	push	{r4, r5, r6, lr}
    e9ac:	460e      	mov	r6, r1
    e9ae:	4615      	mov	r5, r2
    struct ble_gattc_proc *proc;
    ble_gattc_err_fn *err_cb;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_NONE);
    e9b0:	21ff      	movs	r1, #255	; 0xff
    e9b2:	f7ff fc89 	bl	e2c8 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
    e9b6:	b168      	cbz	r0, e9d4 <ble_gattc_rx_err+0x2a>
    e9b8:	4604      	mov	r4, r0
        err_cb = ble_gattc_err_dispatch_get(proc->op);
    e9ba:	7a80      	ldrb	r0, [r0, #10]
    e9bc:	f7ff f9b0 	bl	dd20 <ble_gattc_err_dispatch_get>
        if (err_cb != NULL) {
    e9c0:	4603      	mov	r3, r0
    e9c2:	b120      	cbz	r0, e9ce <ble_gattc_rx_err+0x24>
            err_cb(proc, BLE_HS_ERR_ATT_BASE + status, handle);
    e9c4:	4632      	mov	r2, r6
    e9c6:	f505 7180 	add.w	r1, r5, #256	; 0x100
    e9ca:	4620      	mov	r0, r4
    e9cc:	4798      	blx	r3
        }
        ble_gattc_proc_free(proc);
    e9ce:	4620      	mov	r0, r4
    e9d0:	f7ff fcc2 	bl	e358 <ble_gattc_proc_free>
    }
}
    e9d4:	bd70      	pop	{r4, r5, r6, pc}

0000e9d6 <ble_gattc_rx_mtu>:
 * Dispatches an incoming ATT exchange-mtu-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_mtu(uint16_t conn_handle, int status, uint16_t chan_mtu)
{
    e9d6:	b570      	push	{r4, r5, r6, lr}
    e9d8:	460d      	mov	r5, r1
    e9da:	4616      	mov	r6, r2
    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_MTU);
    e9dc:	2100      	movs	r1, #0
    e9de:	f7ff fc73 	bl	e2c8 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
    e9e2:	b148      	cbz	r0, e9f8 <ble_gattc_rx_mtu+0x22>
    e9e4:	4604      	mov	r4, r0
        ble_gattc_mtu_cb(proc, status, 0, chan_mtu);
    e9e6:	4633      	mov	r3, r6
    e9e8:	2200      	movs	r2, #0
    e9ea:	4629      	mov	r1, r5
    e9ec:	f7ff f9e8 	bl	ddc0 <ble_gattc_mtu_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
    e9f0:	210e      	movs	r1, #14
    e9f2:	4620      	mov	r0, r4
    e9f4:	f7ff fec3 	bl	e77e <ble_gattc_process_status>
    }
}
    e9f8:	bd70      	pop	{r4, r5, r6, pc}

0000e9fa <ble_gattc_rx_indicate_rsp>:
 * Dispatches an incoming ATT handle-value-confirmation to the appropriate
 * active GATT procedure.
 */
void
ble_gattc_rx_indicate_rsp(uint16_t conn_handle)
{
    e9fa:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
    e9fc:	210e      	movs	r1, #14
    e9fe:	f7ff fc63 	bl	e2c8 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_INDICATE);
    if (proc != NULL) {
    ea02:	b130      	cbz	r0, ea12 <ble_gattc_rx_indicate_rsp+0x18>
    ea04:	4604      	mov	r4, r0
        ble_gattc_indicate_rx_rsp(proc);
    ea06:	f7ff ff0f 	bl	e828 <ble_gattc_indicate_rx_rsp>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
    ea0a:	210e      	movs	r1, #14
    ea0c:	4620      	mov	r0, r4
    ea0e:	f7ff feb6 	bl	e77e <ble_gattc_process_status>
    }
}
    ea12:	bd10      	pop	{r4, pc}

0000ea14 <ble_gattc_connection_broken>:
 * @param conn_handle           The handle of the connection that was
 *                                  terminated.
 */
void
ble_gattc_connection_broken(uint16_t conn_handle)
{
    ea14:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_NONE, BLE_HS_ENOTCONN);
    ea16:	2207      	movs	r2, #7
    ea18:	21ff      	movs	r1, #255	; 0xff
    ea1a:	f7ff fcbf 	bl	e39c <ble_gattc_fail_procs>
}
    ea1e:	bd08      	pop	{r3, pc}

0000ea20 <ble_gattc_init>:
    return !STAILQ_EMPTY(&ble_gattc_procs);
}

int
ble_gattc_init(void)
{
    ea20:	b500      	push	{lr}
    ea22:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_gattc_procs);
    ea24:	4b07      	ldr	r3, [pc, #28]	; (ea44 <ble_gattc_init+0x24>)
    ea26:	2200      	movs	r2, #0
    ea28:	601a      	str	r2, [r3, #0]
    ea2a:	605b      	str	r3, [r3, #4]

    if (MYNEWT_VAL(BLE_GATT_MAX_PROCS) > 0) {
        rc = os_mempool_init(&ble_gattc_proc_pool,
    ea2c:	4b06      	ldr	r3, [pc, #24]	; (ea48 <ble_gattc_init+0x28>)
    ea2e:	9300      	str	r3, [sp, #0]
    ea30:	4b06      	ldr	r3, [pc, #24]	; (ea4c <ble_gattc_init+0x2c>)
    ea32:	2238      	movs	r2, #56	; 0x38
    ea34:	2104      	movs	r1, #4
    ea36:	4806      	ldr	r0, [pc, #24]	; (ea50 <ble_gattc_init+0x30>)
    ea38:	f7fc f84e 	bl	aad8 <os_mempool_init>
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
    ea3c:	b003      	add	sp, #12
    ea3e:	f85d fb04 	ldr.w	pc, [sp], #4
    ea42:	bf00      	nop
    ea44:	200071e0 	.word	0x200071e0
    ea48:	00028d08 	.word	0x00028d08
    ea4c:	200070e4 	.word	0x200070e4
    ea50:	200071c4 	.word	0x200071c4

0000ea54 <ble_gatts_chr_clt_cfg_allowed>:
ble_gatts_chr_clt_cfg_allowed(const struct ble_gatt_chr_def *chr)
{
    uint16_t flags;

    flags = 0;
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
    ea54:	8a03      	ldrh	r3, [r0, #16]
    ea56:	f013 0f10 	tst.w	r3, #16
    ea5a:	d106      	bne.n	ea6a <ble_gatts_chr_clt_cfg_allowed+0x16>
    flags = 0;
    ea5c:	2000      	movs	r0, #0
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
    ea5e:	f013 0f20 	tst.w	r3, #32
    ea62:	d001      	beq.n	ea68 <ble_gatts_chr_clt_cfg_allowed+0x14>
        flags |= BLE_GATTS_CLT_CFG_F_INDICATE;
    ea64:	f040 0002 	orr.w	r0, r0, #2
    }

    return flags;
}
    ea68:	4770      	bx	lr
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
    ea6a:	2001      	movs	r0, #1
    ea6c:	e7f7      	b.n	ea5e <ble_gatts_chr_clt_cfg_allowed+0xa>

0000ea6e <ble_gatts_att_flags_from_chr_flags>:
ble_gatts_att_flags_from_chr_flags(ble_gatt_chr_flags chr_flags)
{
    uint8_t att_flags;

    att_flags = 0;
    if (chr_flags & BLE_GATT_CHR_F_READ) {
    ea6e:	f010 0f02 	tst.w	r0, #2
    ea72:	d125      	bne.n	eac0 <ble_gatts_att_flags_from_chr_flags+0x52>
    att_flags = 0;
    ea74:	2300      	movs	r3, #0
        att_flags |= BLE_ATT_F_READ;
    }
    if (chr_flags & (BLE_GATT_CHR_F_WRITE_NO_RSP | BLE_GATT_CHR_F_WRITE)) {
    ea76:	f010 0f0c 	tst.w	r0, #12
    ea7a:	d001      	beq.n	ea80 <ble_gatts_att_flags_from_chr_flags+0x12>
        att_flags |= BLE_ATT_F_WRITE;
    ea7c:	f043 0302 	orr.w	r3, r3, #2
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_ENC) {
    ea80:	f410 7f00 	tst.w	r0, #512	; 0x200
    ea84:	d001      	beq.n	ea8a <ble_gatts_att_flags_from_chr_flags+0x1c>
        att_flags |= BLE_ATT_F_READ_ENC;
    ea86:	f043 0304 	orr.w	r3, r3, #4
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHEN) {
    ea8a:	f410 6f80 	tst.w	r0, #1024	; 0x400
    ea8e:	d001      	beq.n	ea94 <ble_gatts_att_flags_from_chr_flags+0x26>
        att_flags |= BLE_ATT_F_READ_AUTHEN;
    ea90:	f043 0308 	orr.w	r3, r3, #8
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHOR) {
    ea94:	f410 6f00 	tst.w	r0, #2048	; 0x800
    ea98:	d001      	beq.n	ea9e <ble_gatts_att_flags_from_chr_flags+0x30>
        att_flags |= BLE_ATT_F_READ_AUTHOR;
    ea9a:	f043 0310 	orr.w	r3, r3, #16
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_ENC) {
    ea9e:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    eaa2:	d001      	beq.n	eaa8 <ble_gatts_att_flags_from_chr_flags+0x3a>
        att_flags |= BLE_ATT_F_WRITE_ENC;
    eaa4:	f043 0320 	orr.w	r3, r3, #32
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHEN) {
    eaa8:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    eaac:	d001      	beq.n	eab2 <ble_gatts_att_flags_from_chr_flags+0x44>
        att_flags |= BLE_ATT_F_WRITE_AUTHEN;
    eaae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHOR) {
    eab2:	f410 4f80 	tst.w	r0, #16384	; 0x4000
    eab6:	d001      	beq.n	eabc <ble_gatts_att_flags_from_chr_flags+0x4e>
        att_flags |= BLE_ATT_F_WRITE_AUTHOR;
    eab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    }

    return att_flags;
}
    eabc:	4618      	mov	r0, r3
    eabe:	4770      	bx	lr
        att_flags |= BLE_ATT_F_READ;
    eac0:	2301      	movs	r3, #1
    eac2:	e7d8      	b.n	ea76 <ble_gatts_att_flags_from_chr_flags+0x8>

0000eac4 <ble_gatts_chr_properties>:
{
    uint8_t properties;

    properties = 0;

    if (chr->flags & BLE_GATT_CHR_F_BROADCAST) {
    eac4:	8a03      	ldrh	r3, [r0, #16]
    eac6:	f013 0f01 	tst.w	r3, #1
    eaca:	d124      	bne.n	eb16 <ble_gatts_chr_properties+0x52>
    properties = 0;
    eacc:	2000      	movs	r0, #0
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
    }
    if (chr->flags & BLE_GATT_CHR_F_READ) {
    eace:	f013 0f02 	tst.w	r3, #2
    ead2:	d001      	beq.n	ead8 <ble_gatts_chr_properties+0x14>
        properties |= BLE_GATT_CHR_PROP_READ;
    ead4:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE_NO_RSP) {
    ead8:	f013 0f04 	tst.w	r3, #4
    eadc:	d001      	beq.n	eae2 <ble_gatts_chr_properties+0x1e>
        properties |= BLE_GATT_CHR_PROP_WRITE_NO_RSP;
    eade:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE) {
    eae2:	f013 0f08 	tst.w	r3, #8
    eae6:	d001      	beq.n	eaec <ble_gatts_chr_properties+0x28>
        properties |= BLE_GATT_CHR_PROP_WRITE;
    eae8:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
    eaec:	f013 0f10 	tst.w	r3, #16
    eaf0:	d001      	beq.n	eaf6 <ble_gatts_chr_properties+0x32>
        properties |= BLE_GATT_CHR_PROP_NOTIFY;
    eaf2:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
    eaf6:	f013 0f20 	tst.w	r3, #32
    eafa:	d001      	beq.n	eb00 <ble_gatts_chr_properties+0x3c>
        properties |= BLE_GATT_CHR_PROP_INDICATE;
    eafc:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr->flags & BLE_GATT_CHR_F_AUTH_SIGN_WRITE) {
    eb00:	f013 0f40 	tst.w	r3, #64	; 0x40
    eb04:	d001      	beq.n	eb0a <ble_gatts_chr_properties+0x46>
        properties |= BLE_GATT_CHR_PROP_AUTH_SIGN_WRITE;
    eb06:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr->flags &
    eb0a:	f413 7fc0 	tst.w	r3, #384	; 0x180
    eb0e:	d001      	beq.n	eb14 <ble_gatts_chr_properties+0x50>
        (BLE_GATT_CHR_F_RELIABLE_WRITE | BLE_GATT_CHR_F_AUX_WRITE)) {

        properties |= BLE_GATT_CHR_PROP_EXTENDED;
    eb10:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return properties;
}
    eb14:	4770      	bx	lr
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
    eb16:	2001      	movs	r0, #1
    eb18:	e7d9      	b.n	eace <ble_gatts_chr_properties+0xa>

0000eb1a <ble_gatts_chr_is_sane>:
}

static int
ble_gatts_chr_is_sane(const struct ble_gatt_chr_def *chr)
{
    if (chr->uuid == NULL) {
    eb1a:	6803      	ldr	r3, [r0, #0]
    eb1c:	b12b      	cbz	r3, eb2a <ble_gatts_chr_is_sane+0x10>
        return 0;
    }

    if (chr->access_cb == NULL) {
    eb1e:	6843      	ldr	r3, [r0, #4]
    eb20:	b10b      	cbz	r3, eb26 <ble_gatts_chr_is_sane+0xc>
        return 0;
    }

    /* XXX: Check properties. */

    return 1;
    eb22:	2001      	movs	r0, #1
}
    eb24:	4770      	bx	lr
        return 0;
    eb26:	2000      	movs	r0, #0
    eb28:	4770      	bx	lr
        return 0;
    eb2a:	2000      	movs	r0, #0
    eb2c:	4770      	bx	lr

0000eb2e <ble_gatts_chr_op>:

static uint8_t
ble_gatts_chr_op(uint8_t att_op)
{
    switch (att_op) {
    eb2e:	2802      	cmp	r0, #2
    eb30:	d001      	beq.n	eb36 <ble_gatts_chr_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_CHR;
    eb32:	2000      	movs	r0, #0
    eb34:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_CHR;
    eb36:	2001      	movs	r0, #1

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_CHR;
    }
}
    eb38:	4770      	bx	lr
	...

0000eb3c <ble_gatts_find_svc_entry_idx>:
static int
ble_gatts_find_svc_entry_idx(const struct ble_gatt_svc_def *svc)
{
    int i;

    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
    eb3c:	2300      	movs	r3, #0
    eb3e:	4a08      	ldr	r2, [pc, #32]	; (eb60 <ble_gatts_find_svc_entry_idx+0x24>)
    eb40:	8812      	ldrh	r2, [r2, #0]
    eb42:	429a      	cmp	r2, r3
    eb44:	dd07      	ble.n	eb56 <ble_gatts_find_svc_entry_idx+0x1a>
        if (ble_gatts_svc_entries[i].svc == svc) {
    eb46:	4a07      	ldr	r2, [pc, #28]	; (eb64 <ble_gatts_find_svc_entry_idx+0x28>)
    eb48:	6812      	ldr	r2, [r2, #0]
    eb4a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    eb4e:	4282      	cmp	r2, r0
    eb50:	d003      	beq.n	eb5a <ble_gatts_find_svc_entry_idx+0x1e>
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
    eb52:	3301      	adds	r3, #1
    eb54:	e7f3      	b.n	eb3e <ble_gatts_find_svc_entry_idx+0x2>
            return i;
        }
    }

    return -1;
    eb56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    eb5a:	4618      	mov	r0, r3
    eb5c:	4770      	bx	lr
    eb5e:	bf00      	nop
    eb60:	2000721c 	.word	0x2000721c
    eb64:	20007224 	.word	0x20007224

0000eb68 <ble_gatts_svc_incs_satisfied>:

static int
ble_gatts_svc_incs_satisfied(const struct ble_gatt_svc_def *svc)
{
    eb68:	b538      	push	{r3, r4, r5, lr}
    int idx;
    int i;

    if (svc->includes == NULL) {
    eb6a:	6885      	ldr	r5, [r0, #8]
    eb6c:	b195      	cbz	r5, eb94 <ble_gatts_svc_incs_satisfied+0x2c>
        /* No included services. */
        return 1;
    }

    for (i = 0; svc->includes[i] != NULL; i++) {
    eb6e:	2400      	movs	r4, #0
    eb70:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    eb74:	b160      	cbz	r0, eb90 <ble_gatts_svc_incs_satisfied+0x28>
        idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
    eb76:	f7ff ffe1 	bl	eb3c <ble_gatts_find_svc_entry_idx>
        if (idx == -1 || ble_gatts_svc_entries[idx].handle == 0) {
    eb7a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    eb7e:	d00b      	beq.n	eb98 <ble_gatts_svc_incs_satisfied+0x30>
    eb80:	4b07      	ldr	r3, [pc, #28]	; (eba0 <ble_gatts_svc_incs_satisfied+0x38>)
    eb82:	681b      	ldr	r3, [r3, #0]
    eb84:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    eb88:	8883      	ldrh	r3, [r0, #4]
    eb8a:	b13b      	cbz	r3, eb9c <ble_gatts_svc_incs_satisfied+0x34>
    for (i = 0; svc->includes[i] != NULL; i++) {
    eb8c:	3401      	adds	r4, #1
    eb8e:	e7ef      	b.n	eb70 <ble_gatts_svc_incs_satisfied+0x8>
            return 0;
        }
    }

    return 1;
    eb90:	2001      	movs	r0, #1
    eb92:	e000      	b.n	eb96 <ble_gatts_svc_incs_satisfied+0x2e>
        return 1;
    eb94:	2001      	movs	r0, #1
}
    eb96:	bd38      	pop	{r3, r4, r5, pc}
            return 0;
    eb98:	2000      	movs	r0, #0
    eb9a:	e7fc      	b.n	eb96 <ble_gatts_svc_incs_satisfied+0x2e>
    eb9c:	2000      	movs	r0, #0
    eb9e:	e7fa      	b.n	eb96 <ble_gatts_svc_incs_satisfied+0x2e>
    eba0:	20007224 	.word	0x20007224

0000eba4 <ble_gatts_dsc_op>:
}

static uint8_t
ble_gatts_dsc_op(uint8_t att_op)
{
    switch (att_op) {
    eba4:	2802      	cmp	r0, #2
    eba6:	d001      	beq.n	ebac <ble_gatts_dsc_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_DSC;
    eba8:	2002      	movs	r0, #2
    ebaa:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_DSC;
    ebac:	2003      	movs	r0, #3

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_DSC;
    }
}
    ebae:	4770      	bx	lr

0000ebb0 <ble_gatts_dsc_is_sane>:
}

static int
ble_gatts_dsc_is_sane(const struct ble_gatt_dsc_def *dsc)
{
    if (dsc->uuid == NULL) {
    ebb0:	6803      	ldr	r3, [r0, #0]
    ebb2:	b12b      	cbz	r3, ebc0 <ble_gatts_dsc_is_sane+0x10>
        return 0;
    }

    if (dsc->access_cb == NULL) {
    ebb4:	6883      	ldr	r3, [r0, #8]
    ebb6:	b10b      	cbz	r3, ebbc <ble_gatts_dsc_is_sane+0xc>
        return 0;
    }

    return 1;
    ebb8:	2001      	movs	r0, #1
}
    ebba:	4770      	bx	lr
        return 0;
    ebbc:	2000      	movs	r0, #0
    ebbe:	4770      	bx	lr
        return 0;
    ebc0:	2000      	movs	r0, #0
    ebc2:	4770      	bx	lr

0000ebc4 <ble_gatts_clt_cfg_find_idx>:
                           uint16_t chr_val_handle)
{
    struct ble_gatts_clt_cfg *cfg;
    int i;

    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
    ebc4:	2300      	movs	r3, #0
    ebc6:	4a07      	ldr	r2, [pc, #28]	; (ebe4 <ble_gatts_clt_cfg_find_idx+0x20>)
    ebc8:	6812      	ldr	r2, [r2, #0]
    ebca:	429a      	cmp	r2, r3
    ebcc:	dd05      	ble.n	ebda <ble_gatts_clt_cfg_find_idx+0x16>
        cfg = cfgs + i;
        if (cfg->chr_val_handle == chr_val_handle) {
    ebce:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
    ebd2:	428a      	cmp	r2, r1
    ebd4:	d003      	beq.n	ebde <ble_gatts_clt_cfg_find_idx+0x1a>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
    ebd6:	3301      	adds	r3, #1
    ebd8:	e7f5      	b.n	ebc6 <ble_gatts_clt_cfg_find_idx+0x2>
            return i;
        }
    }

    return -1;
    ebda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    ebde:	4618      	mov	r0, r3
    ebe0:	4770      	bx	lr
    ebe2:	bf00      	nop
    ebe4:	20007214 	.word	0x20007214

0000ebe8 <ble_gatts_clt_cfg_find>:

static struct ble_gatts_clt_cfg *
ble_gatts_clt_cfg_find(struct ble_gatts_clt_cfg *cfgs,
                       uint16_t chr_val_handle)
{
    ebe8:	b510      	push	{r4, lr}
    ebea:	4604      	mov	r4, r0
    int idx;

    idx = ble_gatts_clt_cfg_find_idx(cfgs, chr_val_handle);
    ebec:	f7ff ffea 	bl	ebc4 <ble_gatts_clt_cfg_find_idx>
    if (idx == -1) {
    ebf0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ebf4:	d002      	beq.n	ebfc <ble_gatts_clt_cfg_find+0x14>
        return NULL;
    } else {
        return cfgs + idx;
    ebf6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    }
}
    ebfa:	bd10      	pop	{r4, pc}
        return NULL;
    ebfc:	2000      	movs	r0, #0
    ebfe:	e7fc      	b.n	ebfa <ble_gatts_clt_cfg_find+0x12>

0000ec00 <ble_gatts_svc_type_to_uuid>:
}

static int
ble_gatts_svc_type_to_uuid(uint8_t svc_type, const ble_uuid_t **uuid)
{
    switch (svc_type) {
    ec00:	2801      	cmp	r0, #1
    ec02:	d003      	beq.n	ec0c <ble_gatts_svc_type_to_uuid+0xc>
    ec04:	2802      	cmp	r0, #2
    ec06:	d005      	beq.n	ec14 <ble_gatts_svc_type_to_uuid+0x14>
    case BLE_GATT_SVC_TYPE_SECONDARY:
        *uuid = uuid_sec;
        return 0;

    default:
        return BLE_HS_EINVAL;
    ec08:	2003      	movs	r0, #3
    }
}
    ec0a:	4770      	bx	lr
        *uuid = uuid_pri;
    ec0c:	4b03      	ldr	r3, [pc, #12]	; (ec1c <ble_gatts_svc_type_to_uuid+0x1c>)
    ec0e:	600b      	str	r3, [r1, #0]
        return 0;
    ec10:	2000      	movs	r0, #0
    ec12:	4770      	bx	lr
        *uuid = uuid_sec;
    ec14:	4b02      	ldr	r3, [pc, #8]	; (ec20 <ble_gatts_svc_type_to_uuid+0x20>)
    ec16:	600b      	str	r3, [r1, #0]
        return 0;
    ec18:	2000      	movs	r0, #0
    ec1a:	4770      	bx	lr
    ec1c:	20000168 	.word	0x20000168
    ec20:	2000016c 	.word	0x2000016c

0000ec24 <ble_gatts_svc_is_sane>:

static int
ble_gatts_svc_is_sane(const struct ble_gatt_svc_def *svc)
{
    if (svc->type != BLE_GATT_SVC_TYPE_PRIMARY &&
    ec24:	7803      	ldrb	r3, [r0, #0]
    ec26:	3b01      	subs	r3, #1
    ec28:	b2db      	uxtb	r3, r3
    ec2a:	2b01      	cmp	r3, #1
    ec2c:	d901      	bls.n	ec32 <ble_gatts_svc_is_sane+0xe>
        svc->type != BLE_GATT_SVC_TYPE_SECONDARY) {

        return 0;
    ec2e:	2000      	movs	r0, #0
    ec30:	4770      	bx	lr
    }

    if (svc->uuid == NULL) {
    ec32:	6843      	ldr	r3, [r0, #4]
    ec34:	b10b      	cbz	r3, ec3a <ble_gatts_svc_is_sane+0x16>
        return 0;
    }

    return 1;
    ec36:	2001      	movs	r0, #1
}
    ec38:	4770      	bx	lr
        return 0;
    ec3a:	2000      	movs	r0, #0
    ec3c:	4770      	bx	lr
	...

0000ec40 <ble_gatts_clt_cfg_size>:
}

static int
ble_gatts_clt_cfg_size(void)
{
    return ble_gatts_num_cfgable_chrs * sizeof (struct ble_gatts_clt_cfg);
    ec40:	4b01      	ldr	r3, [pc, #4]	; (ec48 <ble_gatts_clt_cfg_size+0x8>)
    ec42:	6818      	ldr	r0, [r3, #0]
}
    ec44:	0080      	lsls	r0, r0, #2
    ec46:	4770      	bx	lr
    ec48:	20007214 	.word	0x20007214

0000ec4c <ble_gatts_schedule_update>:
ble_gatts_schedule_update(struct ble_hs_conn *conn,
                          struct ble_gatts_clt_cfg *clt_cfg)
{
    uint8_t att_op;

    if (!(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED)) {
    ec4c:	788b      	ldrb	r3, [r1, #2]
    ec4e:	f013 0f80 	tst.w	r3, #128	; 0x80
    ec52:	d101      	bne.n	ec58 <ble_gatts_schedule_update+0xc>
        /* Characteristic not modified.  Nothing to send. */
        att_op = 0;
    ec54:	2000      	movs	r0, #0
    ec56:	4770      	bx	lr
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_NOTIFY) {
    ec58:	f013 0f01 	tst.w	r3, #1
    ec5c:	d107      	bne.n	ec6e <ble_gatts_schedule_update+0x22>
        /* Notifications always get sent immediately. */
        att_op = BLE_ATT_OP_NOTIFY_REQ;
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_INDICATE) {
    ec5e:	f013 0f02 	tst.w	r3, #2
    ec62:	d009      	beq.n	ec78 <ble_gatts_schedule_update+0x2c>
        /* Only one outstanding indication per peer is allowed.  If we
         * are still awaiting an ack, mark this CCCD as updated so that
         * we know to send the indication upon receiving the expected ack.
         * If there isn't an outstanding indication, send this one now.
         */
        if (conn->bhc_gatt_svr.indicate_val_handle != 0) {
    ec64:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
    ec68:	b942      	cbnz	r2, ec7c <ble_gatts_schedule_update+0x30>
            att_op = 0;
        } else {
            att_op = BLE_ATT_OP_INDICATE_REQ;
    ec6a:	201d      	movs	r0, #29
    ec6c:	e000      	b.n	ec70 <ble_gatts_schedule_update+0x24>
        att_op = BLE_ATT_OP_NOTIFY_REQ;
    ec6e:	201b      	movs	r0, #27

    /* If we will be sending an update, clear the modified flag so that we
     * don't double-send.
     */
    if (att_op != 0) {
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
    ec70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ec74:	708b      	strb	r3, [r1, #2]
    ec76:	4770      	bx	lr
        att_op = 0;
    ec78:	2000      	movs	r0, #0
    ec7a:	4770      	bx	lr
            att_op = 0;
    ec7c:	2000      	movs	r0, #0
    }

    return att_op;
}
    ec7e:	4770      	bx	lr

0000ec80 <ble_gatts_count_resources>:
 *                                  invalid resource definition.
 */
static int
ble_gatts_count_resources(const struct ble_gatt_svc_def *svcs,
                          struct ble_gatt_resources *res)
{
    ec80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ec84:	4681      	mov	r9, r0
    ec86:	460c      	mov	r4, r1
    int s;
    int i;
    int c;
    int d;

    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
    ec88:	f04f 0a00 	mov.w	sl, #0
    ec8c:	ea4f 130a 	mov.w	r3, sl, lsl #4
    ec90:	eb09 0703 	add.w	r7, r9, r3
    ec94:	f819 3003 	ldrb.w	r3, [r9, r3]
    ec98:	2b00      	cmp	r3, #0
    ec9a:	d059      	beq.n	ed50 <ble_gatts_count_resources+0xd0>
        svc = svcs + s;

        if (!ble_gatts_svc_is_sane(svc)) {
    ec9c:	4638      	mov	r0, r7
    ec9e:	f7ff ffc1 	bl	ec24 <ble_gatts_svc_is_sane>
    eca2:	2800      	cmp	r0, #0
    eca4:	d056      	beq.n	ed54 <ble_gatts_count_resources+0xd4>

        /* Each service requires:
         *     o 1 service
         *     o 1 attribute
         */
        res->svcs++;
    eca6:	8823      	ldrh	r3, [r4, #0]
    eca8:	3301      	adds	r3, #1
    ecaa:	8023      	strh	r3, [r4, #0]
        res->attrs++;
    ecac:	8963      	ldrh	r3, [r4, #10]
    ecae:	3301      	adds	r3, #1
    ecb0:	8163      	strh	r3, [r4, #10]

        if (svc->includes != NULL) {
    ecb2:	68bb      	ldr	r3, [r7, #8]
    ecb4:	b163      	cbz	r3, ecd0 <ble_gatts_count_resources+0x50>
            for (i = 0; svc->includes[i] != NULL; i++) {
    ecb6:	2200      	movs	r2, #0
    ecb8:	68bb      	ldr	r3, [r7, #8]
    ecba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ecbe:	b13b      	cbz	r3, ecd0 <ble_gatts_count_resources+0x50>
                /* Each include requires:
                 *     o 1 include
                 *     o 1 attribute
                 */
                res->incs++;
    ecc0:	8863      	ldrh	r3, [r4, #2]
    ecc2:	3301      	adds	r3, #1
    ecc4:	8063      	strh	r3, [r4, #2]
                res->attrs++;
    ecc6:	8963      	ldrh	r3, [r4, #10]
    ecc8:	3301      	adds	r3, #1
    ecca:	8163      	strh	r3, [r4, #10]
            for (i = 0; svc->includes[i] != NULL; i++) {
    eccc:	3201      	adds	r2, #1
    ecce:	e7f3      	b.n	ecb8 <ble_gatts_count_resources+0x38>
            }
        }

        if (svc->characteristics != NULL) {
    ecd0:	68fb      	ldr	r3, [r7, #12]
    ecd2:	2b00      	cmp	r3, #0
    ecd4:	d039      	beq.n	ed4a <ble_gatts_count_resources+0xca>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
    ecd6:	f04f 0800 	mov.w	r8, #0
    ecda:	e001      	b.n	ece0 <ble_gatts_count_resources+0x60>
    ecdc:	f108 0801 	add.w	r8, r8, #1
    ece0:	68fa      	ldr	r2, [r7, #12]
    ece2:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    ece6:	00cb      	lsls	r3, r1, #3
    ece8:	18d6      	adds	r6, r2, r3
    ecea:	58d3      	ldr	r3, [r2, r3]
    ecec:	2b00      	cmp	r3, #0
    ecee:	d02c      	beq.n	ed4a <ble_gatts_count_resources+0xca>
                chr = svc->characteristics + c;

                if (!ble_gatts_chr_is_sane(chr)) {
    ecf0:	4630      	mov	r0, r6
    ecf2:	f7ff ff12 	bl	eb1a <ble_gatts_chr_is_sane>
    ecf6:	2800      	cmp	r0, #0
    ecf8:	d02e      	beq.n	ed58 <ble_gatts_count_resources+0xd8>

                /* Each characteristic requires:
                 *     o 1 characteristic
                 *     o 2 attributes
                 */
                res->chrs++;
    ecfa:	88a3      	ldrh	r3, [r4, #4]
    ecfc:	3301      	adds	r3, #1
    ecfe:	80a3      	strh	r3, [r4, #4]
                res->attrs += 2;
    ed00:	8963      	ldrh	r3, [r4, #10]
    ed02:	3302      	adds	r3, #2
    ed04:	b29b      	uxth	r3, r3
    ed06:	8163      	strh	r3, [r4, #10]

                /* If the characteristic permits notifications or indications,
                 * it has a CCCD.
                 */
                if (chr->flags & BLE_GATT_CHR_F_NOTIFY ||
    ed08:	8a32      	ldrh	r2, [r6, #16]
    ed0a:	f012 0f30 	tst.w	r2, #48	; 0x30
    ed0e:	d007      	beq.n	ed20 <ble_gatts_count_resources+0xa0>
                    /* Each CCCD requires:
                     *     o 1 descriptor
                     *     o 1 CCCD
                     *     o 1 attribute
                     */
                    res->dscs++;
    ed10:	88e2      	ldrh	r2, [r4, #6]
    ed12:	3201      	adds	r2, #1
    ed14:	80e2      	strh	r2, [r4, #6]
                    res->cccds++;
    ed16:	8922      	ldrh	r2, [r4, #8]
    ed18:	3201      	adds	r2, #1
    ed1a:	8122      	strh	r2, [r4, #8]
                    res->attrs++;
    ed1c:	3301      	adds	r3, #1
    ed1e:	8163      	strh	r3, [r4, #10]
                }

                if (chr->descriptors != NULL) {
    ed20:	68f3      	ldr	r3, [r6, #12]
    ed22:	2b00      	cmp	r3, #0
    ed24:	d0da      	beq.n	ecdc <ble_gatts_count_resources+0x5c>
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
    ed26:	2500      	movs	r5, #0
    ed28:	68f2      	ldr	r2, [r6, #12]
    ed2a:	012b      	lsls	r3, r5, #4
    ed2c:	18d0      	adds	r0, r2, r3
    ed2e:	58d3      	ldr	r3, [r2, r3]
    ed30:	2b00      	cmp	r3, #0
    ed32:	d0d3      	beq.n	ecdc <ble_gatts_count_resources+0x5c>
                        if (!ble_gatts_dsc_is_sane(chr->descriptors + d)) {
    ed34:	f7ff ff3c 	bl	ebb0 <ble_gatts_dsc_is_sane>
    ed38:	b180      	cbz	r0, ed5c <ble_gatts_count_resources+0xdc>

                        /* Each descriptor requires:
                         *     o 1 descriptor
                         *     o 1 attribute
                         */
                        res->dscs++;
    ed3a:	88e3      	ldrh	r3, [r4, #6]
    ed3c:	3301      	adds	r3, #1
    ed3e:	80e3      	strh	r3, [r4, #6]
                        res->attrs++;
    ed40:	8963      	ldrh	r3, [r4, #10]
    ed42:	3301      	adds	r3, #1
    ed44:	8163      	strh	r3, [r4, #10]
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
    ed46:	3501      	adds	r5, #1
    ed48:	e7ee      	b.n	ed28 <ble_gatts_count_resources+0xa8>
    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
    ed4a:	f10a 0a01 	add.w	sl, sl, #1
    ed4e:	e79d      	b.n	ec8c <ble_gatts_count_resources+0xc>
                }
            }
        }
    }

    return 0;
    ed50:	2000      	movs	r0, #0
    ed52:	e004      	b.n	ed5e <ble_gatts_count_resources+0xde>
            return BLE_HS_EINVAL;
    ed54:	2003      	movs	r0, #3
    ed56:	e002      	b.n	ed5e <ble_gatts_count_resources+0xde>
                    return BLE_HS_EINVAL;
    ed58:	2003      	movs	r0, #3
    ed5a:	e000      	b.n	ed5e <ble_gatts_count_resources+0xde>
                            return BLE_HS_EINVAL;
    ed5c:	2003      	movs	r0, #3
}
    ed5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ed62 <ble_gatts_clt_cfg_access_locked>:
{
    ed62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed66:	9e07      	ldr	r6, [sp, #28]
    out_cccd->chr_val_handle = 0;
    ed68:	2300      	movs	r3, #0
    ed6a:	8133      	strh	r3, [r6, #8]
    chr_val_handle = attr_handle - 1;
    ed6c:	1e4c      	subs	r4, r1, #1
    ed6e:	b2a4      	uxth	r4, r4
    if (chr_val_handle > attr_handle) {
    ed70:	42a1      	cmp	r1, r4
    ed72:	d35a      	bcc.n	ee2a <ble_gatts_clt_cfg_access_locked+0xc8>
    ed74:	4615      	mov	r5, r2
    ed76:	4607      	mov	r7, r0
    clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
    ed78:	4621      	mov	r1, r4
    ed7a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    ed7c:	f7ff ff34 	bl	ebe8 <ble_gatts_clt_cfg_find>
    if (clt_cfg == NULL) {
    ed80:	4680      	mov	r8, r0
    ed82:	2800      	cmp	r0, #0
    ed84:	d055      	beq.n	ee32 <ble_gatts_clt_cfg_access_locked+0xd0>
    *out_prev_clt_cfg_flags = clt_cfg->flags;
    ed86:	7882      	ldrb	r2, [r0, #2]
    ed88:	9b08      	ldr	r3, [sp, #32]
    ed8a:	701a      	strb	r2, [r3, #0]
    *out_cur_clt_cfg_flags = clt_cfg->flags;
    ed8c:	7883      	ldrb	r3, [r0, #2]
    ed8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ed90:	7013      	strb	r3, [r2, #0]
    gatt_op = ble_gatts_dsc_op(att_op);
    ed92:	4628      	mov	r0, r5
    ed94:	f7ff ff06 	bl	eba4 <ble_gatts_dsc_op>
    switch (gatt_op) {
    ed98:	2802      	cmp	r0, #2
    ed9a:	d003      	beq.n	eda4 <ble_gatts_clt_cfg_access_locked+0x42>
    ed9c:	2803      	cmp	r0, #3
    ed9e:	d00f      	beq.n	edc0 <ble_gatts_clt_cfg_access_locked+0x5e>
        return BLE_ATT_ERR_UNLIKELY;
    eda0:	250e      	movs	r5, #14
    eda2:	e043      	b.n	ee2c <ble_gatts_clt_cfg_access_locked+0xca>
        buf = os_mbuf_extend(om, 2);
    eda4:	2102      	movs	r1, #2
    eda6:	9806      	ldr	r0, [sp, #24]
    eda8:	f7fb fd14 	bl	a7d4 <os_mbuf_extend>
        if (buf == NULL) {
    edac:	2800      	cmp	r0, #0
    edae:	d042      	beq.n	ee36 <ble_gatts_clt_cfg_access_locked+0xd4>
        put_le16(buf, clt_cfg->flags & ~BLE_GATTS_CLT_CFG_F_RESERVED);
    edb0:	f898 1002 	ldrb.w	r1, [r8, #2]
    edb4:	f001 0103 	and.w	r1, r1, #3
    edb8:	f00c ff18 	bl	1bbec <put_le16>
    return 0;
    edbc:	2500      	movs	r5, #0
        break;
    edbe:	e035      	b.n	ee2c <ble_gatts_clt_cfg_access_locked+0xca>
        if (OS_MBUF_PKTLEN(om) != 2) {
    edc0:	9b06      	ldr	r3, [sp, #24]
    edc2:	8a1b      	ldrh	r3, [r3, #16]
    edc4:	2b02      	cmp	r3, #2
    edc6:	d001      	beq.n	edcc <ble_gatts_clt_cfg_access_locked+0x6a>
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    edc8:	250d      	movs	r5, #13
    edca:	e02f      	b.n	ee2c <ble_gatts_clt_cfg_access_locked+0xca>
        om = os_mbuf_pullup(om, 2);
    edcc:	2102      	movs	r1, #2
    edce:	9806      	ldr	r0, [sp, #24]
    edd0:	f7fb fd31 	bl	a836 <os_mbuf_pullup>
        flags = get_le16(om->om_data);
    edd4:	6800      	ldr	r0, [r0, #0]
    edd6:	f00c ff2a 	bl	1bc2e <get_le16>
        if ((flags & ~clt_cfg->allowed) != 0) {
    edda:	f898 5003 	ldrb.w	r5, [r8, #3]
    edde:	ea30 0505 	bics.w	r5, r0, r5
    ede2:	d12a      	bne.n	ee3a <ble_gatts_clt_cfg_access_locked+0xd8>
        if (clt_cfg->flags != flags) {
    ede4:	f898 3002 	ldrb.w	r3, [r8, #2]
    ede8:	4283      	cmp	r3, r0
    edea:	d01f      	beq.n	ee2c <ble_gatts_clt_cfg_access_locked+0xca>
            clt_cfg->flags = flags;
    edec:	b2c0      	uxtb	r0, r0
    edee:	f888 0002 	strb.w	r0, [r8, #2]
            *out_cur_clt_cfg_flags = flags;
    edf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    edf4:	7018      	strb	r0, [r3, #0]
            if (conn->bhc_sec_state.bonded) {
    edf6:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    edfa:	f013 0f04 	tst.w	r3, #4
    edfe:	d015      	beq.n	ee2c <ble_gatts_clt_cfg_access_locked+0xca>
                out_cccd->peer_addr = conn->bhc_peer_addr;
    ee00:	463b      	mov	r3, r7
    ee02:	f853 0f07 	ldr.w	r0, [r3, #7]!
    ee06:	6030      	str	r0, [r6, #0]
    ee08:	889a      	ldrh	r2, [r3, #4]
    ee0a:	799b      	ldrb	r3, [r3, #6]
    ee0c:	80b2      	strh	r2, [r6, #4]
    ee0e:	71b3      	strb	r3, [r6, #6]
                    ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
    ee10:	79f8      	ldrb	r0, [r7, #7]
    ee12:	f002 fc95 	bl	11740 <ble_hs_misc_peer_addr_type_to_id>
                out_cccd->peer_addr.type =
    ee16:	7030      	strb	r0, [r6, #0]
                out_cccd->chr_val_handle = chr_val_handle;
    ee18:	8134      	strh	r4, [r6, #8]
                out_cccd->flags = clt_cfg->flags;
    ee1a:	f898 3002 	ldrb.w	r3, [r8, #2]
    ee1e:	8173      	strh	r3, [r6, #10]
                out_cccd->value_changed = 0;
    ee20:	7b33      	ldrb	r3, [r6, #12]
    ee22:	f36f 0300 	bfc	r3, #0, #1
    ee26:	7333      	strb	r3, [r6, #12]
    ee28:	e000      	b.n	ee2c <ble_gatts_clt_cfg_access_locked+0xca>
        return BLE_ATT_ERR_UNLIKELY;
    ee2a:	250e      	movs	r5, #14
}
    ee2c:	4628      	mov	r0, r5
    ee2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_ATT_ERR_UNLIKELY;
    ee32:	250e      	movs	r5, #14
    ee34:	e7fa      	b.n	ee2c <ble_gatts_clt_cfg_access_locked+0xca>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
    ee36:	2511      	movs	r5, #17
    ee38:	e7f8      	b.n	ee2c <ble_gatts_clt_cfg_access_locked+0xca>
            return BLE_ATT_ERR_REQ_NOT_SUPPORTED;
    ee3a:	2506      	movs	r5, #6
    ee3c:	e7f6      	b.n	ee2c <ble_gatts_clt_cfg_access_locked+0xca>

0000ee3e <ble_gatts_subscribe_event>:
{
    ee3e:	b530      	push	{r4, r5, lr}
    ee40:	b085      	sub	sp, #20
    ee42:	f89d 4020 	ldrb.w	r4, [sp, #32]
    if ((prev_flags ^ cur_flags) & ~BLE_GATTS_CLT_CFG_F_RESERVED) {
    ee46:	ea83 0504 	eor.w	r5, r3, r4
    ee4a:	f035 05fc 	bics.w	r5, r5, #252	; 0xfc
    ee4e:	d101      	bne.n	ee54 <ble_gatts_subscribe_event+0x16>
}
    ee50:	b005      	add	sp, #20
    ee52:	bd30      	pop	{r4, r5, pc}
        ble_gap_subscribe_event(conn_handle,
    ee54:	f004 0502 	and.w	r5, r4, #2
    ee58:	9502      	str	r5, [sp, #8]
    ee5a:	f003 0502 	and.w	r5, r3, #2
    ee5e:	9501      	str	r5, [sp, #4]
    ee60:	f004 0401 	and.w	r4, r4, #1
    ee64:	9400      	str	r4, [sp, #0]
    ee66:	f003 0301 	and.w	r3, r3, #1
    ee6a:	f7fe fe35 	bl	dad8 <ble_gap_subscribe_event>
}
    ee6e:	e7ef      	b.n	ee50 <ble_gatts_subscribe_event+0x12>

0000ee70 <ble_gatts_clt_cfg_access>:
{
    ee70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ee74:	b08c      	sub	sp, #48	; 0x30
    ee76:	4606      	mov	r6, r0
    ee78:	460d      	mov	r5, r1
    ee7a:	4617      	mov	r7, r2
    ee7c:	4698      	mov	r8, r3
    ble_hs_lock();
    ee7e:	f000 fe83 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    ee82:	4630      	mov	r0, r6
    ee84:	f001 fc8a 	bl	1079c <ble_hs_conn_find>
    if (conn == NULL) {
    ee88:	b1b8      	cbz	r0, eeba <ble_gatts_clt_cfg_access+0x4a>
        rc = ble_gatts_clt_cfg_access_locked(conn, attr_handle, op, offset,
    ee8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ee8c:	681b      	ldr	r3, [r3, #0]
    ee8e:	f10d 0212 	add.w	r2, sp, #18
    ee92:	9203      	str	r2, [sp, #12]
    ee94:	f10d 0213 	add.w	r2, sp, #19
    ee98:	9202      	str	r2, [sp, #8]
    ee9a:	aa08      	add	r2, sp, #32
    ee9c:	9201      	str	r2, [sp, #4]
    ee9e:	9300      	str	r3, [sp, #0]
    eea0:	4643      	mov	r3, r8
    eea2:	463a      	mov	r2, r7
    eea4:	4629      	mov	r1, r5
    eea6:	f7ff ff5c 	bl	ed62 <ble_gatts_clt_cfg_access_locked>
    eeaa:	4604      	mov	r4, r0
    ble_hs_unlock();
    eeac:	f000 fe70 	bl	fb90 <ble_hs_unlock>
    if (rc != 0) {
    eeb0:	b13c      	cbz	r4, eec2 <ble_gatts_clt_cfg_access+0x52>
}
    eeb2:	4620      	mov	r0, r4
    eeb4:	b00c      	add	sp, #48	; 0x30
    eeb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
    eeba:	f000 fe69 	bl	fb90 <ble_hs_unlock>
        rc = BLE_ATT_ERR_UNLIKELY;
    eebe:	240e      	movs	r4, #14
    eec0:	e7f7      	b.n	eeb2 <ble_gatts_clt_cfg_access+0x42>
    chr_val_handle = attr_handle - 1;
    eec2:	1e69      	subs	r1, r5, #1
    ble_gatts_subscribe_event(conn_handle, chr_val_handle,
    eec4:	f89d 3013 	ldrb.w	r3, [sp, #19]
    eec8:	f89d 2012 	ldrb.w	r2, [sp, #18]
    eecc:	9200      	str	r2, [sp, #0]
    eece:	2201      	movs	r2, #1
    eed0:	b289      	uxth	r1, r1
    eed2:	4630      	mov	r0, r6
    eed4:	f7ff ffb3 	bl	ee3e <ble_gatts_subscribe_event>
    if (cccd_value.chr_val_handle != 0) {
    eed8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    eedc:	2b00      	cmp	r3, #0
    eede:	d0e8      	beq.n	eeb2 <ble_gatts_clt_cfg_access+0x42>
        if (cccd_value.flags == 0) {
    eee0:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    eee4:	b123      	cbz	r3, eef0 <ble_gatts_clt_cfg_access+0x80>
            rc = ble_store_write_cccd(&cccd_value);
    eee6:	a808      	add	r0, sp, #32
    eee8:	f005 f9a5 	bl	14236 <ble_store_write_cccd>
    eeec:	4604      	mov	r4, r0
    eeee:	e7e0      	b.n	eeb2 <ble_gatts_clt_cfg_access+0x42>
            ble_store_key_from_value_cccd(&cccd_key, &cccd_value);
    eef0:	a908      	add	r1, sp, #32
    eef2:	a805      	add	r0, sp, #20
    eef4:	f005 f9ab 	bl	1424e <ble_store_key_from_value_cccd>
            rc = ble_store_delete_cccd(&cccd_key);
    eef8:	a805      	add	r0, sp, #20
    eefa:	f005 f9a2 	bl	14242 <ble_store_delete_cccd>
    eefe:	4604      	mov	r4, r0
    ef00:	e7d7      	b.n	eeb2 <ble_gatts_clt_cfg_access+0x42>
	...

0000ef04 <ble_gatts_register_inc>:
{
    ef04:	b500      	push	{lr}
    ef06:	b085      	sub	sp, #20
    rc = ble_att_svr_register(uuid_inc, BLE_ATT_F_READ, 0, &handle,
    ef08:	9001      	str	r0, [sp, #4]
    ef0a:	4b06      	ldr	r3, [pc, #24]	; (ef24 <ble_gatts_register_inc+0x20>)
    ef0c:	9300      	str	r3, [sp, #0]
    ef0e:	f10d 030e 	add.w	r3, sp, #14
    ef12:	2200      	movs	r2, #0
    ef14:	2101      	movs	r1, #1
    ef16:	4804      	ldr	r0, [pc, #16]	; (ef28 <ble_gatts_register_inc+0x24>)
    ef18:	f006 fab8 	bl	1548c <ble_att_svr_register>
}
    ef1c:	b005      	add	sp, #20
    ef1e:	f85d fb04 	ldr.w	pc, [sp], #4
    ef22:	bf00      	nop
    ef24:	0000f247 	.word	0x0000f247
    ef28:	20000170 	.word	0x20000170

0000ef2c <ble_gatts_register_clt_cfg_dsc>:
{
    ef2c:	b500      	push	{lr}
    ef2e:	b083      	sub	sp, #12
    rc = ble_att_svr_register(uuid_ccc, BLE_ATT_F_READ | BLE_ATT_F_WRITE, 0,
    ef30:	2200      	movs	r2, #0
    ef32:	9201      	str	r2, [sp, #4]
    ef34:	4b04      	ldr	r3, [pc, #16]	; (ef48 <ble_gatts_register_clt_cfg_dsc+0x1c>)
    ef36:	9300      	str	r3, [sp, #0]
    ef38:	4603      	mov	r3, r0
    ef3a:	2103      	movs	r1, #3
    ef3c:	4803      	ldr	r0, [pc, #12]	; (ef4c <ble_gatts_register_clt_cfg_dsc+0x20>)
    ef3e:	f006 faa5 	bl	1548c <ble_att_svr_register>
}
    ef42:	b003      	add	sp, #12
    ef44:	f85d fb04 	ldr.w	pc, [sp], #4
    ef48:	0000ee71 	.word	0x0000ee71
    ef4c:	20000178 	.word	0x20000178

0000ef50 <ble_gatts_register_dsc>:
{
    ef50:	b5f0      	push	{r4, r5, r6, r7, lr}
    ef52:	b089      	sub	sp, #36	; 0x24
    ef54:	4607      	mov	r7, r0
    ef56:	460e      	mov	r6, r1
    ef58:	4614      	mov	r4, r2
    if (!ble_gatts_dsc_is_sane(dsc)) {
    ef5a:	4610      	mov	r0, r2
    ef5c:	f7ff fe28 	bl	ebb0 <ble_gatts_dsc_is_sane>
    ef60:	b1e0      	cbz	r0, ef9c <ble_gatts_register_dsc+0x4c>
    rc = ble_att_svr_register(dsc->uuid, dsc->att_flags, dsc->min_key_size,
    ef62:	7921      	ldrb	r1, [r4, #4]
    ef64:	7962      	ldrb	r2, [r4, #5]
    ef66:	9401      	str	r4, [sp, #4]
    ef68:	4b0e      	ldr	r3, [pc, #56]	; (efa4 <ble_gatts_register_dsc+0x54>)
    ef6a:	9300      	str	r3, [sp, #0]
    ef6c:	f10d 030a 	add.w	r3, sp, #10
    ef70:	6820      	ldr	r0, [r4, #0]
    ef72:	f006 fa8b 	bl	1548c <ble_att_svr_register>
    if (rc != 0) {
    ef76:	4605      	mov	r5, r0
    ef78:	b988      	cbnz	r0, ef9e <ble_gatts_register_dsc+0x4e>
    if (register_cb != NULL) {
    ef7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ef7c:	b17b      	cbz	r3, ef9e <ble_gatts_register_dsc+0x4e>
        register_ctxt.op = BLE_GATT_REGISTER_OP_DSC;
    ef7e:	2303      	movs	r3, #3
    ef80:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.dsc.handle = dsc_handle;
    ef84:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    ef88:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.dsc.svc_def = svc;
    ef8c:	9707      	str	r7, [sp, #28]
        register_ctxt.dsc.chr_def = chr;
    ef8e:	9606      	str	r6, [sp, #24]
        register_ctxt.dsc.dsc_def = dsc;
    ef90:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
    ef92:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ef94:	a803      	add	r0, sp, #12
    ef96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ef98:	4798      	blx	r3
    ef9a:	e000      	b.n	ef9e <ble_gatts_register_dsc+0x4e>
        return BLE_HS_EINVAL;
    ef9c:	2503      	movs	r5, #3
}
    ef9e:	4628      	mov	r0, r5
    efa0:	b009      	add	sp, #36	; 0x24
    efa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    efa4:	0000f365 	.word	0x0000f365

0000efa8 <ble_gatts_register_chr>:
{
    efa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    efac:	b08b      	sub	sp, #44	; 0x2c
    efae:	4680      	mov	r8, r0
    efb0:	460c      	mov	r4, r1
    efb2:	4617      	mov	r7, r2
    efb4:	4699      	mov	r9, r3
    if (!ble_gatts_chr_is_sane(chr)) {
    efb6:	4608      	mov	r0, r1
    efb8:	f7ff fdaf 	bl	eb1a <ble_gatts_chr_is_sane>
    efbc:	2800      	cmp	r0, #0
    efbe:	d061      	beq.n	f084 <ble_gatts_register_chr+0xdc>
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
    efc0:	4620      	mov	r0, r4
    efc2:	f7ff fd47 	bl	ea54 <ble_gatts_chr_clt_cfg_allowed>
    efc6:	b140      	cbz	r0, efda <ble_gatts_register_chr+0x32>
        if (ble_gatts_num_cfgable_chrs > ble_hs_max_client_configs) {
    efc8:	4b31      	ldr	r3, [pc, #196]	; (f090 <ble_gatts_register_chr+0xe8>)
    efca:	881a      	ldrh	r2, [r3, #0]
    efcc:	4b31      	ldr	r3, [pc, #196]	; (f094 <ble_gatts_register_chr+0xec>)
    efce:	681b      	ldr	r3, [r3, #0]
    efd0:	429a      	cmp	r2, r3
    efd2:	db59      	blt.n	f088 <ble_gatts_register_chr+0xe0>
        ble_gatts_num_cfgable_chrs++;
    efd4:	3301      	adds	r3, #1
    efd6:	4a2f      	ldr	r2, [pc, #188]	; (f094 <ble_gatts_register_chr+0xec>)
    efd8:	6013      	str	r3, [r2, #0]
    rc = ble_att_svr_register(uuid_chr, BLE_ATT_F_READ, 0, &def_handle,
    efda:	9401      	str	r4, [sp, #4]
    efdc:	4b2e      	ldr	r3, [pc, #184]	; (f098 <ble_gatts_register_chr+0xf0>)
    efde:	9300      	str	r3, [sp, #0]
    efe0:	f10d 0312 	add.w	r3, sp, #18
    efe4:	2200      	movs	r2, #0
    efe6:	2101      	movs	r1, #1
    efe8:	482c      	ldr	r0, [pc, #176]	; (f09c <ble_gatts_register_chr+0xf4>)
    efea:	f006 fa4f 	bl	1548c <ble_att_svr_register>
    if (rc != 0) {
    efee:	4605      	mov	r5, r0
    eff0:	b118      	cbz	r0, effa <ble_gatts_register_chr+0x52>
}
    eff2:	4628      	mov	r0, r5
    eff4:	b00b      	add	sp, #44	; 0x2c
    eff6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    att_flags = ble_gatts_att_flags_from_chr_flags(chr->flags);
    effa:	8a20      	ldrh	r0, [r4, #16]
    effc:	f7ff fd37 	bl	ea6e <ble_gatts_att_flags_from_chr_flags>
    rc = ble_att_svr_register(chr->uuid, att_flags, chr->min_key_size,
    f000:	7ca2      	ldrb	r2, [r4, #18]
    f002:	9401      	str	r4, [sp, #4]
    f004:	4b26      	ldr	r3, [pc, #152]	; (f0a0 <ble_gatts_register_chr+0xf8>)
    f006:	9300      	str	r3, [sp, #0]
    f008:	ab04      	add	r3, sp, #16
    f00a:	4601      	mov	r1, r0
    f00c:	6820      	ldr	r0, [r4, #0]
    f00e:	f006 fa3d 	bl	1548c <ble_att_svr_register>
    if (rc != 0) {
    f012:	4605      	mov	r5, r0
    f014:	2800      	cmp	r0, #0
    f016:	d1ec      	bne.n	eff2 <ble_gatts_register_chr+0x4a>
    if (chr->val_handle != NULL) {
    f018:	6963      	ldr	r3, [r4, #20]
    f01a:	b113      	cbz	r3, f022 <ble_gatts_register_chr+0x7a>
        *chr->val_handle = val_handle;
    f01c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    f020:	801a      	strh	r2, [r3, #0]
    if (register_cb != NULL) {
    f022:	b187      	cbz	r7, f046 <ble_gatts_register_chr+0x9e>
        register_ctxt.op = BLE_GATT_REGISTER_OP_CHR;
    f024:	2302      	movs	r3, #2
    f026:	f88d 3014 	strb.w	r3, [sp, #20]
        register_ctxt.chr.def_handle = def_handle;
    f02a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    f02e:	f8ad 3018 	strh.w	r3, [sp, #24]
        register_ctxt.chr.val_handle = val_handle;
    f032:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    f036:	f8ad 301a 	strh.w	r3, [sp, #26]
        register_ctxt.chr.svc_def = svc;
    f03a:	f8cd 8020 	str.w	r8, [sp, #32]
        register_ctxt.chr.chr_def = chr;
    f03e:	9407      	str	r4, [sp, #28]
        register_cb(&register_ctxt, cb_arg);
    f040:	4649      	mov	r1, r9
    f042:	a805      	add	r0, sp, #20
    f044:	47b8      	blx	r7
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
    f046:	4620      	mov	r0, r4
    f048:	f7ff fd04 	bl	ea54 <ble_gatts_chr_clt_cfg_allowed>
    f04c:	b990      	cbnz	r0, f074 <ble_gatts_register_chr+0xcc>
    if (chr->descriptors != NULL) {
    f04e:	68e6      	ldr	r6, [r4, #12]
    f050:	2e00      	cmp	r6, #0
    f052:	d0ce      	beq.n	eff2 <ble_gatts_register_chr+0x4a>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
    f054:	6833      	ldr	r3, [r6, #0]
    f056:	2b00      	cmp	r3, #0
    f058:	d0cb      	beq.n	eff2 <ble_gatts_register_chr+0x4a>
            rc = ble_gatts_register_dsc(svc, chr, dsc, def_handle, register_cb,
    f05a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    f05e:	f8cd 9004 	str.w	r9, [sp, #4]
    f062:	9700      	str	r7, [sp, #0]
    f064:	4632      	mov	r2, r6
    f066:	4621      	mov	r1, r4
    f068:	4640      	mov	r0, r8
    f06a:	f7ff ff71 	bl	ef50 <ble_gatts_register_dsc>
            if (rc != 0) {
    f06e:	b968      	cbnz	r0, f08c <ble_gatts_register_chr+0xe4>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
    f070:	3610      	adds	r6, #16
    f072:	e7ef      	b.n	f054 <ble_gatts_register_chr+0xac>
        rc = ble_gatts_register_clt_cfg_dsc(&dsc_handle);
    f074:	f10d 000e 	add.w	r0, sp, #14
    f078:	f7ff ff58 	bl	ef2c <ble_gatts_register_clt_cfg_dsc>
        if (rc != 0) {
    f07c:	2800      	cmp	r0, #0
    f07e:	d0e6      	beq.n	f04e <ble_gatts_register_chr+0xa6>
            return rc;
    f080:	4605      	mov	r5, r0
    f082:	e7b6      	b.n	eff2 <ble_gatts_register_chr+0x4a>
        return BLE_HS_EINVAL;
    f084:	2503      	movs	r5, #3
    f086:	e7b4      	b.n	eff2 <ble_gatts_register_chr+0x4a>
            return BLE_HS_ENOMEM;
    f088:	2506      	movs	r5, #6
    f08a:	e7b2      	b.n	eff2 <ble_gatts_register_chr+0x4a>
                return rc;
    f08c:	4605      	mov	r5, r0
    f08e:	e7b0      	b.n	eff2 <ble_gatts_register_chr+0x4a>
    f090:	2000732e 	.word	0x2000732e
    f094:	20007214 	.word	0x20007214
    f098:	0000f1f9 	.word	0x0000f1f9
    f09c:	20000174 	.word	0x20000174
    f0a0:	0000f331 	.word	0x0000f331

0000f0a4 <ble_gatts_register_svc>:
{
    f0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0a8:	b088      	sub	sp, #32
    f0aa:	4604      	mov	r4, r0
    f0ac:	460e      	mov	r6, r1
    f0ae:	4617      	mov	r7, r2
    f0b0:	4698      	mov	r8, r3
    if (!ble_gatts_svc_incs_satisfied(svc)) {
    f0b2:	f7ff fd59 	bl	eb68 <ble_gatts_svc_incs_satisfied>
    f0b6:	2800      	cmp	r0, #0
    f0b8:	d040      	beq.n	f13c <ble_gatts_register_svc+0x98>
    if (!ble_gatts_svc_is_sane(svc)) {
    f0ba:	4620      	mov	r0, r4
    f0bc:	f7ff fdb2 	bl	ec24 <ble_gatts_svc_is_sane>
    f0c0:	2800      	cmp	r0, #0
    f0c2:	d040      	beq.n	f146 <ble_gatts_register_svc+0xa2>
    uuid = NULL;
    f0c4:	2500      	movs	r5, #0
    f0c6:	a908      	add	r1, sp, #32
    f0c8:	f841 5d18 	str.w	r5, [r1, #-24]!
    rc = ble_gatts_svc_type_to_uuid(svc->type, &uuid);
    f0cc:	7820      	ldrb	r0, [r4, #0]
    f0ce:	f7ff fd97 	bl	ec00 <ble_gatts_svc_type_to_uuid>
    rc = ble_att_svr_register(uuid, BLE_ATT_F_READ, 0, out_handle,
    f0d2:	9401      	str	r4, [sp, #4]
    f0d4:	4b1f      	ldr	r3, [pc, #124]	; (f154 <ble_gatts_register_svc+0xb0>)
    f0d6:	9300      	str	r3, [sp, #0]
    f0d8:	4633      	mov	r3, r6
    f0da:	462a      	mov	r2, r5
    f0dc:	2101      	movs	r1, #1
    f0de:	9802      	ldr	r0, [sp, #8]
    f0e0:	f006 f9d4 	bl	1548c <ble_att_svr_register>
    if (rc != 0) {
    f0e4:	4605      	mov	r5, r0
    f0e6:	bb50      	cbnz	r0, f13e <ble_gatts_register_svc+0x9a>
    if (register_cb != NULL) {
    f0e8:	b14f      	cbz	r7, f0fe <ble_gatts_register_svc+0x5a>
        register_ctxt.op = BLE_GATT_REGISTER_OP_SVC;
    f0ea:	2301      	movs	r3, #1
    f0ec:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.svc.handle = *out_handle;
    f0f0:	8833      	ldrh	r3, [r6, #0]
    f0f2:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.svc.svc_def = svc;
    f0f6:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
    f0f8:	4641      	mov	r1, r8
    f0fa:	a803      	add	r0, sp, #12
    f0fc:	47b8      	blx	r7
    if (svc->includes != NULL) {
    f0fe:	68a3      	ldr	r3, [r4, #8]
    f100:	b17b      	cbz	r3, f122 <ble_gatts_register_svc+0x7e>
        for (i = 0; svc->includes[i] != NULL; i++) {
    f102:	462e      	mov	r6, r5
    f104:	68a3      	ldr	r3, [r4, #8]
    f106:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
    f10a:	b150      	cbz	r0, f122 <ble_gatts_register_svc+0x7e>
            idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
    f10c:	f7ff fd16 	bl	eb3c <ble_gatts_find_svc_entry_idx>
            rc = ble_gatts_register_inc(ble_gatts_svc_entries + idx);
    f110:	4b11      	ldr	r3, [pc, #68]	; (f158 <ble_gatts_register_svc+0xb4>)
    f112:	681b      	ldr	r3, [r3, #0]
    f114:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    f118:	f7ff fef4 	bl	ef04 <ble_gatts_register_inc>
            if (rc != 0) {
    f11c:	b9a8      	cbnz	r0, f14a <ble_gatts_register_svc+0xa6>
        for (i = 0; svc->includes[i] != NULL; i++) {
    f11e:	3601      	adds	r6, #1
    f120:	e7f0      	b.n	f104 <ble_gatts_register_svc+0x60>
    if (svc->characteristics != NULL) {
    f122:	68e6      	ldr	r6, [r4, #12]
    f124:	b15e      	cbz	r6, f13e <ble_gatts_register_svc+0x9a>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
    f126:	6833      	ldr	r3, [r6, #0]
    f128:	b14b      	cbz	r3, f13e <ble_gatts_register_svc+0x9a>
            rc = ble_gatts_register_chr(svc, chr, register_cb, cb_arg);
    f12a:	4643      	mov	r3, r8
    f12c:	463a      	mov	r2, r7
    f12e:	4631      	mov	r1, r6
    f130:	4620      	mov	r0, r4
    f132:	f7ff ff39 	bl	efa8 <ble_gatts_register_chr>
            if (rc != 0) {
    f136:	b950      	cbnz	r0, f14e <ble_gatts_register_svc+0xaa>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
    f138:	3618      	adds	r6, #24
    f13a:	e7f4      	b.n	f126 <ble_gatts_register_svc+0x82>
        return BLE_HS_EAGAIN;
    f13c:	2501      	movs	r5, #1
}
    f13e:	4628      	mov	r0, r5
    f140:	b008      	add	sp, #32
    f142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EINVAL;
    f146:	2503      	movs	r5, #3
    f148:	e7f9      	b.n	f13e <ble_gatts_register_svc+0x9a>
                return rc;
    f14a:	4605      	mov	r5, r0
    f14c:	e7f7      	b.n	f13e <ble_gatts_register_svc+0x9a>
                return rc;
    f14e:	4605      	mov	r5, r0
    f150:	e7f5      	b.n	f13e <ble_gatts_register_svc+0x9a>
    f152:	bf00      	nop
    f154:	0000f1d1 	.word	0x0000f1d1
    f158:	20007224 	.word	0x20007224

0000f15c <ble_gatts_register_round>:
{
    f15c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f160:	b082      	sub	sp, #8
    f162:	4606      	mov	r6, r0
    f164:	4688      	mov	r8, r1
    f166:	4617      	mov	r7, r2
    *out_num_registered = 0;
    f168:	2400      	movs	r4, #0
    f16a:	6004      	str	r4, [r0, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
    f16c:	e009      	b.n	f182 <ble_gatts_register_round+0x26>
                entry->handle = handle;
    f16e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f172:	80ab      	strh	r3, [r5, #4]
                entry->end_group_handle = ble_att_svr_prev_handle();
    f174:	f006 f9b2 	bl	154dc <ble_att_svr_prev_handle>
    f178:	80e8      	strh	r0, [r5, #6]
                (*out_num_registered)++;
    f17a:	6833      	ldr	r3, [r6, #0]
    f17c:	3301      	adds	r3, #1
    f17e:	6033      	str	r3, [r6, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
    f180:	3401      	adds	r4, #1
    f182:	4b11      	ldr	r3, [pc, #68]	; (f1c8 <ble_gatts_register_round+0x6c>)
    f184:	881b      	ldrh	r3, [r3, #0]
    f186:	42a3      	cmp	r3, r4
    f188:	dd17      	ble.n	f1ba <ble_gatts_register_round+0x5e>
        entry = ble_gatts_svc_entries + i;
    f18a:	4b10      	ldr	r3, [pc, #64]	; (f1cc <ble_gatts_register_round+0x70>)
    f18c:	6818      	ldr	r0, [r3, #0]
    f18e:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
        if (entry->handle == 0) {
    f192:	88ab      	ldrh	r3, [r5, #4]
    f194:	2b00      	cmp	r3, #0
    f196:	d1f3      	bne.n	f180 <ble_gatts_register_round+0x24>
            rc = ble_gatts_register_svc(entry->svc, &handle, cb, cb_arg);
    f198:	463b      	mov	r3, r7
    f19a:	4642      	mov	r2, r8
    f19c:	f10d 0106 	add.w	r1, sp, #6
    f1a0:	f850 0034 	ldr.w	r0, [r0, r4, lsl #3]
    f1a4:	f7ff ff7e 	bl	f0a4 <ble_gatts_register_svc>
            switch (rc) {
    f1a8:	4603      	mov	r3, r0
    f1aa:	2800      	cmp	r0, #0
    f1ac:	d0df      	beq.n	f16e <ble_gatts_register_round+0x12>
    f1ae:	2801      	cmp	r0, #1
    f1b0:	d0e6      	beq.n	f180 <ble_gatts_register_round+0x24>
}
    f1b2:	4618      	mov	r0, r3
    f1b4:	b002      	add	sp, #8
    f1b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*out_num_registered == 0) {
    f1ba:	6833      	ldr	r3, [r6, #0]
    f1bc:	b10b      	cbz	r3, f1c2 <ble_gatts_register_round+0x66>
    return 0;
    f1be:	2300      	movs	r3, #0
    f1c0:	e7f7      	b.n	f1b2 <ble_gatts_register_round+0x56>
        return BLE_HS_EINVAL;
    f1c2:	2303      	movs	r3, #3
    f1c4:	e7f5      	b.n	f1b2 <ble_gatts_register_round+0x56>
    f1c6:	bf00      	nop
    f1c8:	2000721c 	.word	0x2000721c
    f1cc:	20007224 	.word	0x20007224

0000f1d0 <ble_gatts_svc_access>:
{
    f1d0:	b538      	push	{r3, r4, r5, lr}
    f1d2:	9c05      	ldr	r4, [sp, #20]
    buf = os_mbuf_extend(*om, ble_uuid_length(svc->uuid));
    f1d4:	9b04      	ldr	r3, [sp, #16]
    f1d6:	681d      	ldr	r5, [r3, #0]
    f1d8:	6860      	ldr	r0, [r4, #4]
    f1da:	f005 fa3f 	bl	1465c <ble_uuid_length>
    f1de:	b281      	uxth	r1, r0
    f1e0:	4628      	mov	r0, r5
    f1e2:	f7fb faf7 	bl	a7d4 <os_mbuf_extend>
    if (buf == NULL) {
    f1e6:	b128      	cbz	r0, f1f4 <ble_gatts_svc_access+0x24>
    f1e8:	4601      	mov	r1, r0
    ble_uuid_flat(svc->uuid, buf);
    f1ea:	6860      	ldr	r0, [r4, #4]
    f1ec:	f005 fa0a 	bl	14604 <ble_uuid_flat>
    return 0;
    f1f0:	2000      	movs	r0, #0
}
    f1f2:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
    f1f4:	2011      	movs	r0, #17
    f1f6:	e7fc      	b.n	f1f2 <ble_gatts_svc_access+0x22>

0000f1f8 <ble_gatts_chr_def_access>:
{
    f1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f1fa:	460d      	mov	r5, r1
    f1fc:	9f06      	ldr	r7, [sp, #24]
    f1fe:	9e07      	ldr	r6, [sp, #28]
    buf = os_mbuf_extend(*om, 3);
    f200:	2103      	movs	r1, #3
    f202:	6838      	ldr	r0, [r7, #0]
    f204:	f7fb fae6 	bl	a7d4 <os_mbuf_extend>
    if (buf == NULL) {
    f208:	b1c8      	cbz	r0, f23e <ble_gatts_chr_def_access+0x46>
    f20a:	4604      	mov	r4, r0
    buf[0] = ble_gatts_chr_properties(chr);
    f20c:	4630      	mov	r0, r6
    f20e:	f7ff fc59 	bl	eac4 <ble_gatts_chr_properties>
    f212:	f804 0b01 	strb.w	r0, [r4], #1
    put_le16(buf + 1, attr_handle + 1);
    f216:	1c69      	adds	r1, r5, #1
    f218:	b289      	uxth	r1, r1
    f21a:	4620      	mov	r0, r4
    f21c:	f00c fce6 	bl	1bbec <put_le16>
    buf = os_mbuf_extend(*om, ble_uuid_length(chr->uuid));
    f220:	683c      	ldr	r4, [r7, #0]
    f222:	6830      	ldr	r0, [r6, #0]
    f224:	f005 fa1a 	bl	1465c <ble_uuid_length>
    f228:	b281      	uxth	r1, r0
    f22a:	4620      	mov	r0, r4
    f22c:	f7fb fad2 	bl	a7d4 <os_mbuf_extend>
    if (buf == NULL) {
    f230:	4601      	mov	r1, r0
    f232:	b130      	cbz	r0, f242 <ble_gatts_chr_def_access+0x4a>
    ble_uuid_flat(chr->uuid, buf);
    f234:	6830      	ldr	r0, [r6, #0]
    f236:	f005 f9e5 	bl	14604 <ble_uuid_flat>
    return 0;
    f23a:	2000      	movs	r0, #0
}
    f23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
    f23e:	2011      	movs	r0, #17
    f240:	e7fc      	b.n	f23c <ble_gatts_chr_def_access+0x44>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
    f242:	2011      	movs	r0, #17
    f244:	e7fa      	b.n	f23c <ble_gatts_chr_def_access+0x44>

0000f246 <ble_gatts_inc_access>:
{
    f246:	b570      	push	{r4, r5, r6, lr}
    f248:	9e04      	ldr	r6, [sp, #16]
    f24a:	9c05      	ldr	r4, [sp, #20]
    buf = os_mbuf_extend(*om, 4);
    f24c:	2104      	movs	r1, #4
    f24e:	6830      	ldr	r0, [r6, #0]
    f250:	f7fb fac0 	bl	a7d4 <os_mbuf_extend>
    if (buf == NULL) {
    f254:	b1c8      	cbz	r0, f28a <ble_gatts_inc_access+0x44>
    f256:	4605      	mov	r5, r0
    put_le16(buf + 0, entry->handle);
    f258:	88a1      	ldrh	r1, [r4, #4]
    f25a:	f00c fcc7 	bl	1bbec <put_le16>
    put_le16(buf + 2, entry->end_group_handle);
    f25e:	88e1      	ldrh	r1, [r4, #6]
    f260:	1ca8      	adds	r0, r5, #2
    f262:	f00c fcc3 	bl	1bbec <put_le16>
    uuid16 = ble_uuid_u16(entry->svc->uuid);
    f266:	6823      	ldr	r3, [r4, #0]
    f268:	6858      	ldr	r0, [r3, #4]
    f26a:	f005 f98f 	bl	1458c <ble_uuid_u16>
    if (uuid16 != 0) {
    f26e:	4604      	mov	r4, r0
    f270:	b908      	cbnz	r0, f276 <ble_gatts_inc_access+0x30>
    return 0;
    f272:	2000      	movs	r0, #0
}
    f274:	bd70      	pop	{r4, r5, r6, pc}
        buf = os_mbuf_extend(*om, 2);
    f276:	2102      	movs	r1, #2
    f278:	6830      	ldr	r0, [r6, #0]
    f27a:	f7fb faab 	bl	a7d4 <os_mbuf_extend>
        if (buf == NULL) {
    f27e:	b130      	cbz	r0, f28e <ble_gatts_inc_access+0x48>
        put_le16(buf, uuid16);
    f280:	4621      	mov	r1, r4
    f282:	f00c fcb3 	bl	1bbec <put_le16>
    return 0;
    f286:	2000      	movs	r0, #0
    f288:	e7f4      	b.n	f274 <ble_gatts_inc_access+0x2e>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
    f28a:	2011      	movs	r0, #17
    f28c:	e7f2      	b.n	f274 <ble_gatts_inc_access+0x2e>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
    f28e:	2011      	movs	r0, #17
    f290:	e7f0      	b.n	f274 <ble_gatts_inc_access+0x2e>

0000f292 <ble_gatts_val_access>:
{
    f292:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f296:	4606      	mov	r6, r0
    f298:	4688      	mov	r8, r1
    f29a:	4617      	mov	r7, r2
    f29c:	461c      	mov	r4, r3
    f29e:	9d08      	ldr	r5, [sp, #32]
    switch (gatt_ctxt->op) {
    f2a0:	781b      	ldrb	r3, [r3, #0]
    f2a2:	2b03      	cmp	r3, #3
    f2a4:	d840      	bhi.n	f328 <ble_gatts_val_access+0x96>
    f2a6:	e8df f003 	tbb	[pc, r3]
    f2aa:	3302      	.short	0x3302
    f2ac:	3302      	.short	0x3302
        if (offset == 0) {
    f2ae:	b9f7      	cbnz	r7, f2ee <ble_gatts_val_access+0x5c>
            gatt_ctxt->om = *om;
    f2b0:	682b      	ldr	r3, [r5, #0]
    f2b2:	6063      	str	r3, [r4, #4]
            new_om = 0;
    f2b4:	f04f 0900 	mov.w	r9, #0
        initial_len = OS_MBUF_PKTLEN(gatt_ctxt->om);
    f2b8:	6863      	ldr	r3, [r4, #4]
    f2ba:	f8b3 a010 	ldrh.w	sl, [r3, #16]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
    f2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f2c0:	4622      	mov	r2, r4
    f2c2:	4641      	mov	r1, r8
    f2c4:	4630      	mov	r0, r6
    f2c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
    f2c8:	47b0      	blx	r6
        if (rc == 0) {
    f2ca:	4606      	mov	r6, r0
    f2cc:	b940      	cbnz	r0, f2e0 <ble_gatts_val_access+0x4e>
            attr_len = OS_MBUF_PKTLEN(gatt_ctxt->om) - initial_len - offset;
    f2ce:	6861      	ldr	r1, [r4, #4]
    f2d0:	8a0b      	ldrh	r3, [r1, #16]
    f2d2:	eba3 030a 	sub.w	r3, r3, sl
            if (attr_len >= 0) {
    f2d6:	1bdb      	subs	r3, r3, r7
    f2d8:	d418      	bmi.n	f30c <ble_gatts_val_access+0x7a>
                if (new_om) {
    f2da:	f1b9 0f00 	cmp.w	r9, #0
    f2de:	d10f      	bne.n	f300 <ble_gatts_val_access+0x6e>
        if (new_om) {
    f2e0:	f1b9 0f00 	cmp.w	r9, #0
    f2e4:	d01d      	beq.n	f322 <ble_gatts_val_access+0x90>
            os_mbuf_free_chain(gatt_ctxt->om);
    f2e6:	6860      	ldr	r0, [r4, #4]
    f2e8:	f7fa ffec 	bl	a2c4 <os_mbuf_free_chain>
    f2ec:	e019      	b.n	f322 <ble_gatts_val_access+0x90>
            gatt_ctxt->om = os_msys_get_pkthdr(0, 0);
    f2ee:	2100      	movs	r1, #0
    f2f0:	4608      	mov	r0, r1
    f2f2:	f7fb fd00 	bl	acf6 <os_msys_get_pkthdr>
    f2f6:	6060      	str	r0, [r4, #4]
            if (gatt_ctxt->om == NULL) {
    f2f8:	b1c0      	cbz	r0, f32c <ble_gatts_val_access+0x9a>
            new_om = 1;
    f2fa:	f04f 0901 	mov.w	r9, #1
    f2fe:	e7db      	b.n	f2b8 <ble_gatts_val_access+0x26>
                    os_mbuf_appendfrom(*om, gatt_ctxt->om, offset, attr_len);
    f300:	b29b      	uxth	r3, r3
    f302:	463a      	mov	r2, r7
    f304:	6828      	ldr	r0, [r5, #0]
    f306:	f7fb f8b5 	bl	a474 <os_mbuf_appendfrom>
    f30a:	e7e9      	b.n	f2e0 <ble_gatts_val_access+0x4e>
                rc = BLE_ATT_ERR_INVALID_OFFSET;
    f30c:	2607      	movs	r6, #7
    f30e:	e7e7      	b.n	f2e0 <ble_gatts_val_access+0x4e>
        gatt_ctxt->om = *om;
    f310:	682b      	ldr	r3, [r5, #0]
    f312:	6063      	str	r3, [r4, #4]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
    f314:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f316:	4622      	mov	r2, r4
    f318:	9e09      	ldr	r6, [sp, #36]	; 0x24
    f31a:	47b0      	blx	r6
    f31c:	4606      	mov	r6, r0
        *om = gatt_ctxt->om;
    f31e:	6863      	ldr	r3, [r4, #4]
    f320:	602b      	str	r3, [r5, #0]
}
    f322:	4630      	mov	r0, r6
    f324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BLE_ATT_ERR_UNLIKELY;
    f328:	260e      	movs	r6, #14
    f32a:	e7fa      	b.n	f322 <ble_gatts_val_access+0x90>
                return BLE_ATT_ERR_INSUFFICIENT_RES;
    f32c:	2611      	movs	r6, #17
    f32e:	e7f8      	b.n	f322 <ble_gatts_val_access+0x90>

0000f330 <ble_gatts_chr_val_access>:
{
    f330:	b5f0      	push	{r4, r5, r6, r7, lr}
    f332:	b089      	sub	sp, #36	; 0x24
    f334:	4605      	mov	r5, r0
    f336:	460e      	mov	r6, r1
    f338:	461f      	mov	r7, r3
    f33a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_chr_op(att_op);
    f33c:	4610      	mov	r0, r2
    f33e:	f7ff fbf6 	bl	eb2e <ble_gatts_chr_op>
    f342:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.chr = chr_def;
    f346:	9407      	str	r4, [sp, #28]
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
    f348:	6863      	ldr	r3, [r4, #4]
    f34a:	68a2      	ldr	r2, [r4, #8]
    f34c:	9202      	str	r2, [sp, #8]
    f34e:	9301      	str	r3, [sp, #4]
    f350:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f352:	9300      	str	r3, [sp, #0]
    f354:	ab05      	add	r3, sp, #20
    f356:	463a      	mov	r2, r7
    f358:	4631      	mov	r1, r6
    f35a:	4628      	mov	r0, r5
    f35c:	f7ff ff99 	bl	f292 <ble_gatts_val_access>
}
    f360:	b009      	add	sp, #36	; 0x24
    f362:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f364 <ble_gatts_dsc_access>:
{
    f364:	b5f0      	push	{r4, r5, r6, r7, lr}
    f366:	b089      	sub	sp, #36	; 0x24
    f368:	4605      	mov	r5, r0
    f36a:	460e      	mov	r6, r1
    f36c:	461f      	mov	r7, r3
    f36e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_dsc_op(att_op);
    f370:	4610      	mov	r0, r2
    f372:	f7ff fc17 	bl	eba4 <ble_gatts_dsc_op>
    f376:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.dsc = dsc_def;
    f37a:	9407      	str	r4, [sp, #28]
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
    f37c:	68a3      	ldr	r3, [r4, #8]
    f37e:	68e2      	ldr	r2, [r4, #12]
    f380:	9202      	str	r2, [sp, #8]
    f382:	9301      	str	r3, [sp, #4]
    f384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f386:	9300      	str	r3, [sp, #0]
    f388:	ab05      	add	r3, sp, #20
    f38a:	463a      	mov	r2, r7
    f38c:	4631      	mov	r1, r6
    f38e:	4628      	mov	r0, r5
    f390:	f7ff ff7f 	bl	f292 <ble_gatts_val_access>
}
    f394:	b009      	add	sp, #36	; 0x24
    f396:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f398 <ble_gatts_mutable>:
{
    f398:	b508      	push	{r3, lr}
    if (ble_gap_adv_active() ||
    f39a:	f7fd ff49 	bl	d230 <ble_gap_adv_active>
    f39e:	b108      	cbz	r0, f3a4 <ble_gatts_mutable+0xc>
        return false;
    f3a0:	2000      	movs	r0, #0
}
    f3a2:	bd08      	pop	{r3, pc}
        ble_gap_disc_active() ||
    f3a4:	f7fe f834 	bl	d410 <ble_gap_disc_active>
    if (ble_gap_adv_active() ||
    f3a8:	b108      	cbz	r0, f3ae <ble_gatts_mutable+0x16>
        return false;
    f3aa:	2000      	movs	r0, #0
    f3ac:	e7f9      	b.n	f3a2 <ble_gatts_mutable+0xa>
        ble_gap_conn_active()) {
    f3ae:	f7fe f839 	bl	d424 <ble_gap_conn_active>
        ble_gap_disc_active() ||
    f3b2:	b108      	cbz	r0, f3b8 <ble_gatts_mutable+0x20>
        return false;
    f3b4:	2000      	movs	r0, #0
    f3b6:	e7f4      	b.n	f3a2 <ble_gatts_mutable+0xa>
    if (ble_hs_conn_first() != NULL) {
    f3b8:	f001 fa22 	bl	10800 <ble_hs_conn_first>
    f3bc:	b108      	cbz	r0, f3c2 <ble_gatts_mutable+0x2a>
        return false;
    f3be:	2000      	movs	r0, #0
    f3c0:	e7ef      	b.n	f3a2 <ble_gatts_mutable+0xa>
    return true;
    f3c2:	2001      	movs	r0, #1
    f3c4:	e7ed      	b.n	f3a2 <ble_gatts_mutable+0xa>
	...

0000f3c8 <ble_gatts_free_mem>:
{
    f3c8:	b538      	push	{r3, r4, r5, lr}
    free(ble_gatts_clt_cfg_mem);
    f3ca:	4c06      	ldr	r4, [pc, #24]	; (f3e4 <ble_gatts_free_mem+0x1c>)
    f3cc:	6820      	ldr	r0, [r4, #0]
    f3ce:	f00c fe3f 	bl	1c050 <free>
    ble_gatts_clt_cfg_mem = NULL;
    f3d2:	2500      	movs	r5, #0
    f3d4:	6025      	str	r5, [r4, #0]
    free(ble_gatts_svc_entries);
    f3d6:	4c04      	ldr	r4, [pc, #16]	; (f3e8 <ble_gatts_free_mem+0x20>)
    f3d8:	6820      	ldr	r0, [r4, #0]
    f3da:	f00c fe39 	bl	1c050 <free>
    ble_gatts_svc_entries = NULL;
    f3de:	6025      	str	r5, [r4, #0]
}
    f3e0:	bd38      	pop	{r3, r4, r5, pc}
    f3e2:	bf00      	nop
    f3e4:	200071f0 	.word	0x200071f0
    f3e8:	20007224 	.word	0x20007224

0000f3ec <ble_gatts_free_svc_defs>:
{
    f3ec:	b510      	push	{r4, lr}
    free(ble_gatts_svc_defs);
    f3ee:	4c04      	ldr	r4, [pc, #16]	; (f400 <ble_gatts_free_svc_defs+0x14>)
    f3f0:	6820      	ldr	r0, [r4, #0]
    f3f2:	f00c fe2d 	bl	1c050 <free>
    ble_gatts_svc_defs = NULL;
    f3f6:	2300      	movs	r3, #0
    f3f8:	6023      	str	r3, [r4, #0]
    ble_gatts_num_svc_defs = 0;
    f3fa:	4a02      	ldr	r2, [pc, #8]	; (f404 <ble_gatts_free_svc_defs+0x18>)
    f3fc:	6013      	str	r3, [r2, #0]
}
    f3fe:	bd10      	pop	{r4, pc}
    f400:	20007220 	.word	0x20007220
    f404:	20007218 	.word	0x20007218

0000f408 <ble_gatts_tx_notifications_one_chr>:
{
    f408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f40c:	4680      	mov	r8, r0
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
    f40e:	4601      	mov	r1, r0
    f410:	4b17      	ldr	r3, [pc, #92]	; (f470 <ble_gatts_tx_notifications_one_chr+0x68>)
    f412:	6818      	ldr	r0, [r3, #0]
    f414:	f7ff fbd6 	bl	ebc4 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
    f418:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f41c:	d026      	beq.n	f46c <ble_gatts_tx_notifications_one_chr+0x64>
    f41e:	4681      	mov	r9, r0
    for (i = 0; ; i++) {
    f420:	2500      	movs	r5, #0
    f422:	e008      	b.n	f436 <ble_gatts_tx_notifications_one_chr+0x2e>
            att_op = 0;
    f424:	2600      	movs	r6, #0
            conn_handle = BLE_HS_CONN_HANDLE_NONE;
    f426:	f64f 77ff 	movw	r7, #65535	; 0xffff
    f42a:	e013      	b.n	f454 <ble_gatts_tx_notifications_one_chr+0x4c>
            ble_gattc_notify(conn_handle, chr_val_handle);
    f42c:	4641      	mov	r1, r8
    f42e:	4638      	mov	r0, r7
    f430:	f7ff fa62 	bl	e8f8 <ble_gattc_notify>
    for (i = 0; ; i++) {
    f434:	3501      	adds	r5, #1
        ble_hs_lock();
    f436:	f000 fba7 	bl	fb88 <ble_hs_lock>
        conn = ble_hs_conn_find_by_idx(i);
    f43a:	4628      	mov	r0, r5
    f43c:	f001 f9ca 	bl	107d4 <ble_hs_conn_find_by_idx>
        if (conn != NULL) {
    f440:	4604      	mov	r4, r0
    f442:	2800      	cmp	r0, #0
    f444:	d0ee      	beq.n	f424 <ble_gatts_tx_notifications_one_chr+0x1c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
    f446:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
            att_op = ble_gatts_schedule_update(conn, clt_cfg);
    f448:	eb01 0189 	add.w	r1, r1, r9, lsl #2
    f44c:	f7ff fbfe 	bl	ec4c <ble_gatts_schedule_update>
    f450:	4606      	mov	r6, r0
            conn_handle = conn->bhc_handle;
    f452:	88a7      	ldrh	r7, [r4, #4]
        ble_hs_unlock();
    f454:	f000 fb9c 	bl	fb90 <ble_hs_unlock>
        if (conn == NULL) {
    f458:	b144      	cbz	r4, f46c <ble_gatts_tx_notifications_one_chr+0x64>
        switch (att_op) {
    f45a:	2e1b      	cmp	r6, #27
    f45c:	d0e6      	beq.n	f42c <ble_gatts_tx_notifications_one_chr+0x24>
    f45e:	2e1d      	cmp	r6, #29
    f460:	d1e8      	bne.n	f434 <ble_gatts_tx_notifications_one_chr+0x2c>
            ble_gattc_indicate(conn_handle, chr_val_handle);
    f462:	4641      	mov	r1, r8
    f464:	4638      	mov	r0, r7
    f466:	f7ff fa9b 	bl	e9a0 <ble_gattc_indicate>
            break;
    f46a:	e7e3      	b.n	f434 <ble_gatts_tx_notifications_one_chr+0x2c>
}
    f46c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f470:	20007210 	.word	0x20007210

0000f474 <ble_gatts_register_svcs>:
{
    f474:	b5f0      	push	{r4, r5, r6, r7, lr}
    f476:	b083      	sub	sp, #12
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
    f478:	2400      	movs	r4, #0
    f47a:	0123      	lsls	r3, r4, #4
    f47c:	18c7      	adds	r7, r0, r3
    f47e:	5cc3      	ldrb	r3, [r0, r3]
    f480:	b19b      	cbz	r3, f4aa <ble_gatts_register_svcs+0x36>
        idx = ble_gatts_num_svc_entries + i;
    f482:	4b16      	ldr	r3, [pc, #88]	; (f4dc <ble_gatts_register_svcs+0x68>)
    f484:	881b      	ldrh	r3, [r3, #0]
    f486:	4423      	add	r3, r4
        if (idx >= ble_hs_max_services) {
    f488:	4d15      	ldr	r5, [pc, #84]	; (f4e0 <ble_gatts_register_svcs+0x6c>)
    f48a:	882d      	ldrh	r5, [r5, #0]
    f48c:	429d      	cmp	r5, r3
    f48e:	dd21      	ble.n	f4d4 <ble_gatts_register_svcs+0x60>
        ble_gatts_svc_entries[idx].svc = svcs + i;
    f490:	4d14      	ldr	r5, [pc, #80]	; (f4e4 <ble_gatts_register_svcs+0x70>)
    f492:	682e      	ldr	r6, [r5, #0]
    f494:	eb06 05c3 	add.w	r5, r6, r3, lsl #3
    f498:	f846 7033 	str.w	r7, [r6, r3, lsl #3]
        ble_gatts_svc_entries[idx].handle = 0;
    f49c:	2300      	movs	r3, #0
    f49e:	80ab      	strh	r3, [r5, #4]
        ble_gatts_svc_entries[idx].end_group_handle = 0xffff;
    f4a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f4a4:	80eb      	strh	r3, [r5, #6]
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
    f4a6:	3401      	adds	r4, #1
    f4a8:	e7e7      	b.n	f47a <ble_gatts_register_svcs+0x6>
    f4aa:	4617      	mov	r7, r2
    f4ac:	460e      	mov	r6, r1
    ble_gatts_num_svc_entries += num_svcs;
    f4ae:	4a0b      	ldr	r2, [pc, #44]	; (f4dc <ble_gatts_register_svcs+0x68>)
    f4b0:	8813      	ldrh	r3, [r2, #0]
    f4b2:	4423      	add	r3, r4
    f4b4:	8013      	strh	r3, [r2, #0]
    total_registered = 0;
    f4b6:	2500      	movs	r5, #0
    while (total_registered < num_svcs) {
    f4b8:	42a5      	cmp	r5, r4
    f4ba:	da09      	bge.n	f4d0 <ble_gatts_register_svcs+0x5c>
        rc = ble_gatts_register_round(&cur_registered, cb, cb_arg);
    f4bc:	463a      	mov	r2, r7
    f4be:	4631      	mov	r1, r6
    f4c0:	a801      	add	r0, sp, #4
    f4c2:	f7ff fe4b 	bl	f15c <ble_gatts_register_round>
        if (rc != 0) {
    f4c6:	4603      	mov	r3, r0
    f4c8:	b928      	cbnz	r0, f4d6 <ble_gatts_register_svcs+0x62>
        total_registered += cur_registered;
    f4ca:	9b01      	ldr	r3, [sp, #4]
    f4cc:	441d      	add	r5, r3
    f4ce:	e7f3      	b.n	f4b8 <ble_gatts_register_svcs+0x44>
    return 0;
    f4d0:	2300      	movs	r3, #0
    f4d2:	e000      	b.n	f4d6 <ble_gatts_register_svcs+0x62>
            return BLE_HS_ENOMEM;
    f4d4:	2306      	movs	r3, #6
}
    f4d6:	4618      	mov	r0, r3
    f4d8:	b003      	add	sp, #12
    f4da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f4dc:	2000721c 	.word	0x2000721c
    f4e0:	20007330 	.word	0x20007330
    f4e4:	20007224 	.word	0x20007224

0000f4e8 <ble_gatts_connection_broken>:
{
    f4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    f4ea:	b083      	sub	sp, #12
    f4ec:	4606      	mov	r6, r0
    ble_hs_lock();
    f4ee:	f000 fb4b 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    f4f2:	4630      	mov	r0, r6
    f4f4:	f001 f952 	bl	1079c <ble_hs_conn_find>
    if (conn != NULL) {
    f4f8:	4604      	mov	r4, r0
    f4fa:	b120      	cbz	r0, f506 <ble_gatts_connection_broken+0x1e>
        clt_cfgs = conn->bhc_gatt_svr.clt_cfgs;
    f4fc:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
        num_clt_cfgs = conn->bhc_gatt_svr.num_clt_cfgs;
    f4fe:	6d07      	ldr	r7, [r0, #80]	; 0x50
        conn->bhc_gatt_svr.clt_cfgs = NULL;
    f500:	2300      	movs	r3, #0
    f502:	64c3      	str	r3, [r0, #76]	; 0x4c
        conn->bhc_gatt_svr.num_clt_cfgs = 0;
    f504:	6503      	str	r3, [r0, #80]	; 0x50
    ble_hs_unlock();
    f506:	f000 fb43 	bl	fb90 <ble_hs_unlock>
    if (conn == NULL) {
    f50a:	b1bc      	cbz	r4, f53c <ble_gatts_connection_broken+0x54>
    ble_gatts_indicate_fail_notconn(conn_handle);
    f50c:	4630      	mov	r0, r6
    f50e:	f7ff f9f8 	bl	e902 <ble_gatts_indicate_fail_notconn>
    if (clt_cfgs != NULL) {
    f512:	b19d      	cbz	r5, f53c <ble_gatts_connection_broken+0x54>
        for (i = 0; i < num_clt_cfgs; i++) {
    f514:	2400      	movs	r4, #0
    f516:	e00b      	b.n	f530 <ble_gatts_connection_broken+0x48>
            ble_gatts_subscribe_event(conn_handle, clt_cfgs[i].chr_val_handle,
    f518:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    f51c:	789b      	ldrb	r3, [r3, #2]
    f51e:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
    f522:	2200      	movs	r2, #0
    f524:	9200      	str	r2, [sp, #0]
    f526:	2202      	movs	r2, #2
    f528:	4630      	mov	r0, r6
    f52a:	f7ff fc88 	bl	ee3e <ble_gatts_subscribe_event>
        for (i = 0; i < num_clt_cfgs; i++) {
    f52e:	3401      	adds	r4, #1
    f530:	42a7      	cmp	r7, r4
    f532:	dcf1      	bgt.n	f518 <ble_gatts_connection_broken+0x30>
        rc = os_memblock_put(&ble_gatts_clt_cfg_pool, clt_cfgs);
    f534:	4629      	mov	r1, r5
    f536:	4802      	ldr	r0, [pc, #8]	; (f540 <ble_gatts_connection_broken+0x58>)
    f538:	f7fb fb3b 	bl	abb2 <os_memblock_put>
}
    f53c:	b003      	add	sp, #12
    f53e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f540:	200071f4 	.word	0x200071f4

0000f544 <ble_gatts_start>:
{
    f544:	b570      	push	{r4, r5, r6, lr}
    f546:	b084      	sub	sp, #16
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
    f548:	4b43      	ldr	r3, [pc, #268]	; (f658 <ble_gatts_start+0x114>)
    f54a:	681b      	ldr	r3, [r3, #0]
    f54c:	9303      	str	r3, [sp, #12]
    ble_hs_lock();
    f54e:	f000 fb1b 	bl	fb88 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
    f552:	f7ff ff21 	bl	f398 <ble_gatts_mutable>
    f556:	2800      	cmp	r0, #0
    f558:	d071      	beq.n	f63e <ble_gatts_start+0xfa>
    ble_gatts_free_mem();
    f55a:	f7ff ff35 	bl	f3c8 <ble_gatts_free_mem>
    rc = ble_att_svr_start();
    f55e:	f006 fd21 	bl	15fa4 <ble_att_svr_start>
    if (rc != 0) {
    f562:	4604      	mov	r4, r0
    f564:	2800      	cmp	r0, #0
    f566:	d168      	bne.n	f63a <ble_gatts_start+0xf6>
    if (ble_hs_max_client_configs > 0) {
    f568:	4b3c      	ldr	r3, [pc, #240]	; (f65c <ble_gatts_start+0x118>)
    f56a:	8818      	ldrh	r0, [r3, #0]
    f56c:	b9b0      	cbnz	r0, f59c <ble_gatts_start+0x58>
    if (ble_hs_max_services > 0) {
    f56e:	4b3c      	ldr	r3, [pc, #240]	; (f660 <ble_gatts_start+0x11c>)
    f570:	8818      	ldrh	r0, [r3, #0]
    f572:	b9e0      	cbnz	r0, f5ae <ble_gatts_start+0x6a>
    ble_gatts_num_svc_entries = 0;
    f574:	4b3b      	ldr	r3, [pc, #236]	; (f664 <ble_gatts_start+0x120>)
    f576:	2200      	movs	r2, #0
    f578:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
    f57a:	4b3b      	ldr	r3, [pc, #236]	; (f668 <ble_gatts_start+0x124>)
    f57c:	681b      	ldr	r3, [r3, #0]
    f57e:	42a3      	cmp	r3, r4
    f580:	dd1e      	ble.n	f5c0 <ble_gatts_start+0x7c>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
    f582:	4b3a      	ldr	r3, [pc, #232]	; (f66c <ble_gatts_start+0x128>)
    f584:	6818      	ldr	r0, [r3, #0]
    f586:	4b3a      	ldr	r3, [pc, #232]	; (f670 <ble_gatts_start+0x12c>)
    f588:	685a      	ldr	r2, [r3, #4]
    f58a:	6819      	ldr	r1, [r3, #0]
    f58c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    f590:	f7ff ff70 	bl	f474 <ble_gatts_register_svcs>
        if (rc != 0) {
    f594:	2800      	cmp	r0, #0
    f596:	d14f      	bne.n	f638 <ble_gatts_start+0xf4>
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
    f598:	3401      	adds	r4, #1
    f59a:	e7ee      	b.n	f57a <ble_gatts_start+0x36>
        ble_gatts_clt_cfg_mem = malloc(
    f59c:	0080      	lsls	r0, r0, #2
    f59e:	f00c fd21 	bl	1bfe4 <malloc>
    f5a2:	4b34      	ldr	r3, [pc, #208]	; (f674 <ble_gatts_start+0x130>)
    f5a4:	6018      	str	r0, [r3, #0]
        if (ble_gatts_clt_cfg_mem == NULL) {
    f5a6:	2800      	cmp	r0, #0
    f5a8:	d1e1      	bne.n	f56e <ble_gatts_start+0x2a>
            rc = BLE_HS_ENOMEM;
    f5aa:	2406      	movs	r4, #6
    f5ac:	e048      	b.n	f640 <ble_gatts_start+0xfc>
            malloc(ble_hs_max_services * sizeof *ble_gatts_svc_entries);
    f5ae:	00c0      	lsls	r0, r0, #3
    f5b0:	f00c fd18 	bl	1bfe4 <malloc>
        ble_gatts_svc_entries =
    f5b4:	4b30      	ldr	r3, [pc, #192]	; (f678 <ble_gatts_start+0x134>)
    f5b6:	6018      	str	r0, [r3, #0]
        if (ble_gatts_svc_entries == NULL) {
    f5b8:	2800      	cmp	r0, #0
    f5ba:	d1db      	bne.n	f574 <ble_gatts_start+0x30>
            rc = BLE_HS_ENOMEM;
    f5bc:	2406      	movs	r4, #6
    f5be:	e03f      	b.n	f640 <ble_gatts_start+0xfc>
    ble_gatts_free_svc_defs();
    f5c0:	f7ff ff14 	bl	f3ec <ble_gatts_free_svc_defs>
    if (ble_gatts_num_cfgable_chrs == 0) {
    f5c4:	4b2d      	ldr	r3, [pc, #180]	; (f67c <ble_gatts_start+0x138>)
    f5c6:	681c      	ldr	r4, [r3, #0]
    f5c8:	2c00      	cmp	r4, #0
    f5ca:	d03d      	beq.n	f648 <ble_gatts_start+0x104>
    num_elems = ble_hs_max_client_configs / ble_gatts_num_cfgable_chrs;
    f5cc:	4b23      	ldr	r3, [pc, #140]	; (f65c <ble_gatts_start+0x118>)
    f5ce:	881b      	ldrh	r3, [r3, #0]
    f5d0:	fb93 f4f4 	sdiv	r4, r3, r4
                         ble_gatts_clt_cfg_size(), ble_gatts_clt_cfg_mem,
    f5d4:	f7ff fb34 	bl	ec40 <ble_gatts_clt_cfg_size>
    rc = os_mempool_init(&ble_gatts_clt_cfg_pool, num_elems,
    f5d8:	4b26      	ldr	r3, [pc, #152]	; (f674 <ble_gatts_start+0x130>)
    f5da:	681b      	ldr	r3, [r3, #0]
    f5dc:	4a28      	ldr	r2, [pc, #160]	; (f680 <ble_gatts_start+0x13c>)
    f5de:	9200      	str	r2, [sp, #0]
    f5e0:	4602      	mov	r2, r0
    f5e2:	b2a1      	uxth	r1, r4
    f5e4:	4827      	ldr	r0, [pc, #156]	; (f684 <ble_gatts_start+0x140>)
    f5e6:	f7fb fa77 	bl	aad8 <os_mempool_init>
    f5ea:	4606      	mov	r6, r0
    f5ec:	4604      	mov	r4, r0
    if (rc != 0) {
    f5ee:	b108      	cbz	r0, f5f4 <ble_gatts_start+0xb0>
        rc = BLE_HS_EOS;
    f5f0:	240b      	movs	r4, #11
    f5f2:	e025      	b.n	f640 <ble_gatts_start+0xfc>
    ble_gatts_clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
    f5f4:	4823      	ldr	r0, [pc, #140]	; (f684 <ble_gatts_start+0x140>)
    f5f6:	f7fb fab4 	bl	ab62 <os_memblock_get>
    f5fa:	4b23      	ldr	r3, [pc, #140]	; (f688 <ble_gatts_start+0x144>)
    f5fc:	6018      	str	r0, [r3, #0]
    if (ble_gatts_clt_cfgs == NULL) {
    f5fe:	b340      	cbz	r0, f652 <ble_gatts_start+0x10e>
    ha = NULL;
    f600:	2500      	movs	r5, #0
    while ((ha = ble_att_svr_find_by_uuid(ha, &uuid.u, 0xffff)) != NULL) {
    f602:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f606:	a903      	add	r1, sp, #12
    f608:	4628      	mov	r0, r5
    f60a:	f005 ffc5 	bl	15598 <ble_att_svr_find_by_uuid>
    f60e:	4605      	mov	r5, r0
    f610:	b198      	cbz	r0, f63a <ble_gatts_start+0xf6>
        allowed_flags = ble_gatts_chr_clt_cfg_allowed(chr);
    f612:	6928      	ldr	r0, [r5, #16]
    f614:	f7ff fa1e 	bl	ea54 <ble_gatts_chr_clt_cfg_allowed>
        if (allowed_flags != 0) {
    f618:	4601      	mov	r1, r0
    f61a:	2800      	cmp	r0, #0
    f61c:	d0f1      	beq.n	f602 <ble_gatts_start+0xbe>
            ble_gatts_clt_cfgs[idx].chr_val_handle = ha->ha_handle_id + 1;
    f61e:	896b      	ldrh	r3, [r5, #10]
    f620:	4a19      	ldr	r2, [pc, #100]	; (f688 <ble_gatts_start+0x144>)
    f622:	6810      	ldr	r0, [r2, #0]
    f624:	eb00 0286 	add.w	r2, r0, r6, lsl #2
    f628:	3301      	adds	r3, #1
    f62a:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
            ble_gatts_clt_cfgs[idx].allowed = allowed_flags;
    f62e:	70d1      	strb	r1, [r2, #3]
            ble_gatts_clt_cfgs[idx].flags = 0;
    f630:	2300      	movs	r3, #0
    f632:	7093      	strb	r3, [r2, #2]
            idx++;
    f634:	3601      	adds	r6, #1
    f636:	e7e4      	b.n	f602 <ble_gatts_start+0xbe>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
    f638:	4604      	mov	r4, r0
    if (rc != 0) {
    f63a:	b90c      	cbnz	r4, f640 <ble_gatts_start+0xfc>
    f63c:	e004      	b.n	f648 <ble_gatts_start+0x104>
        rc = BLE_HS_EBUSY;
    f63e:	240f      	movs	r4, #15
        ble_gatts_free_mem();
    f640:	f7ff fec2 	bl	f3c8 <ble_gatts_free_mem>
        ble_gatts_free_svc_defs();
    f644:	f7ff fed2 	bl	f3ec <ble_gatts_free_svc_defs>
    ble_hs_unlock();
    f648:	f000 faa2 	bl	fb90 <ble_hs_unlock>
}
    f64c:	4620      	mov	r0, r4
    f64e:	b004      	add	sp, #16
    f650:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOMEM;
    f652:	2406      	movs	r4, #6
    f654:	e7f4      	b.n	f640 <ble_gatts_start+0xfc>
    f656:	bf00      	nop
    f658:	00028d94 	.word	0x00028d94
    f65c:	2000732e 	.word	0x2000732e
    f660:	20007330 	.word	0x20007330
    f664:	2000721c 	.word	0x2000721c
    f668:	20007218 	.word	0x20007218
    f66c:	20007220 	.word	0x20007220
    f670:	2000017c 	.word	0x2000017c
    f674:	200071f0 	.word	0x200071f0
    f678:	20007224 	.word	0x20007224
    f67c:	20007214 	.word	0x20007214
    f680:	00028d98 	.word	0x00028d98
    f684:	200071f4 	.word	0x200071f4
    f688:	20007210 	.word	0x20007210

0000f68c <ble_gatts_conn_can_alloc>:
    return ble_gatts_num_cfgable_chrs == 0 ||
    f68c:	4b05      	ldr	r3, [pc, #20]	; (f6a4 <ble_gatts_conn_can_alloc+0x18>)
    f68e:	681b      	ldr	r3, [r3, #0]
    f690:	b133      	cbz	r3, f6a0 <ble_gatts_conn_can_alloc+0x14>
           ble_gatts_clt_cfg_pool.mp_num_free > 0;
    f692:	4b05      	ldr	r3, [pc, #20]	; (f6a8 <ble_gatts_conn_can_alloc+0x1c>)
    f694:	88db      	ldrh	r3, [r3, #6]
    return ble_gatts_num_cfgable_chrs == 0 ||
    f696:	b90b      	cbnz	r3, f69c <ble_gatts_conn_can_alloc+0x10>
    f698:	2000      	movs	r0, #0
}
    f69a:	4770      	bx	lr
    return ble_gatts_num_cfgable_chrs == 0 ||
    f69c:	2001      	movs	r0, #1
    f69e:	4770      	bx	lr
    f6a0:	2001      	movs	r0, #1
    f6a2:	4770      	bx	lr
    f6a4:	20007214 	.word	0x20007214
    f6a8:	200071f4 	.word	0x200071f4

0000f6ac <ble_gatts_conn_init>:
    if (ble_gatts_num_cfgable_chrs > 0) {
    f6ac:	4b10      	ldr	r3, [pc, #64]	; (f6f0 <ble_gatts_conn_init+0x44>)
    f6ae:	681b      	ldr	r3, [r3, #0]
    f6b0:	2b00      	cmp	r3, #0
    f6b2:	dc04      	bgt.n	f6be <ble_gatts_conn_init+0x12>
        gatts_conn->clt_cfgs = NULL;
    f6b4:	2300      	movs	r3, #0
    f6b6:	6003      	str	r3, [r0, #0]
        gatts_conn->num_clt_cfgs = 0;
    f6b8:	6043      	str	r3, [r0, #4]
    return 0;
    f6ba:	4618      	mov	r0, r3
}
    f6bc:	4770      	bx	lr
{
    f6be:	b570      	push	{r4, r5, r6, lr}
    f6c0:	4604      	mov	r4, r0
        gatts_conn->clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
    f6c2:	480c      	ldr	r0, [pc, #48]	; (f6f4 <ble_gatts_conn_init+0x48>)
    f6c4:	f7fb fa4d 	bl	ab62 <os_memblock_get>
    f6c8:	4605      	mov	r5, r0
    f6ca:	6020      	str	r0, [r4, #0]
        if (gatts_conn->clt_cfgs == NULL) {
    f6cc:	b168      	cbz	r0, f6ea <ble_gatts_conn_init+0x3e>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
    f6ce:	4b0a      	ldr	r3, [pc, #40]	; (f6f8 <ble_gatts_conn_init+0x4c>)
    f6d0:	681e      	ldr	r6, [r3, #0]
               ble_gatts_clt_cfg_size());
    f6d2:	f7ff fab5 	bl	ec40 <ble_gatts_clt_cfg_size>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
    f6d6:	4602      	mov	r2, r0
    f6d8:	4631      	mov	r1, r6
    f6da:	4628      	mov	r0, r5
    f6dc:	f7fc f8d8 	bl	b890 <memcpy>
        gatts_conn->num_clt_cfgs = ble_gatts_num_cfgable_chrs;
    f6e0:	4b03      	ldr	r3, [pc, #12]	; (f6f0 <ble_gatts_conn_init+0x44>)
    f6e2:	681b      	ldr	r3, [r3, #0]
    f6e4:	6063      	str	r3, [r4, #4]
    return 0;
    f6e6:	2000      	movs	r0, #0
}
    f6e8:	bd70      	pop	{r4, r5, r6, pc}
            return BLE_HS_ENOMEM;
    f6ea:	2006      	movs	r0, #6
    f6ec:	e7fc      	b.n	f6e8 <ble_gatts_conn_init+0x3c>
    f6ee:	bf00      	nop
    f6f0:	20007214 	.word	0x20007214
    f6f4:	200071f4 	.word	0x200071f4
    f6f8:	20007210 	.word	0x20007210

0000f6fc <ble_gatts_send_next_indicate>:
{
    f6fc:	b570      	push	{r4, r5, r6, lr}
    f6fe:	4605      	mov	r5, r0
    ble_hs_lock();
    f700:	f000 fa42 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    f704:	4628      	mov	r0, r5
    f706:	f001 f849 	bl	1079c <ble_hs_conn_find>
    if (conn != NULL) {
    f70a:	4604      	mov	r4, r0
    f70c:	b160      	cbz	r0, f728 <ble_gatts_send_next_indicate+0x2c>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
    f70e:	2200      	movs	r2, #0
    f710:	6d23      	ldr	r3, [r4, #80]	; 0x50
    f712:	4293      	cmp	r3, r2
    f714:	dd0f      	ble.n	f736 <ble_gatts_send_next_indicate+0x3a>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + i;
    f716:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    f718:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED) {
    f71c:	7899      	ldrb	r1, [r3, #2]
    f71e:	f011 0f80 	tst.w	r1, #128	; 0x80
    f722:	d103      	bne.n	f72c <ble_gatts_send_next_indicate+0x30>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
    f724:	3201      	adds	r2, #1
    f726:	e7f3      	b.n	f710 <ble_gatts_send_next_indicate+0x14>
    chr_val_handle = 0;
    f728:	2600      	movs	r6, #0
    f72a:	e005      	b.n	f738 <ble_gatts_send_next_indicate+0x3c>
                chr_val_handle = clt_cfg->chr_val_handle;
    f72c:	881e      	ldrh	r6, [r3, #0]
                clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
    f72e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    f732:	7099      	strb	r1, [r3, #2]
                break;
    f734:	e000      	b.n	f738 <ble_gatts_send_next_indicate+0x3c>
    chr_val_handle = 0;
    f736:	2600      	movs	r6, #0
    ble_hs_unlock();
    f738:	f000 fa2a 	bl	fb90 <ble_hs_unlock>
    if (conn == NULL) {
    f73c:	b12c      	cbz	r4, f74a <ble_gatts_send_next_indicate+0x4e>
    if (chr_val_handle == 0) {
    f73e:	b136      	cbz	r6, f74e <ble_gatts_send_next_indicate+0x52>
    rc = ble_gattc_indicate(conn_handle, chr_val_handle);
    f740:	4631      	mov	r1, r6
    f742:	4628      	mov	r0, r5
    f744:	f7ff f92c 	bl	e9a0 <ble_gattc_indicate>
}
    f748:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOTCONN;
    f74a:	2007      	movs	r0, #7
    f74c:	e7fc      	b.n	f748 <ble_gatts_send_next_indicate+0x4c>
        return BLE_HS_ENOENT;
    f74e:	2005      	movs	r0, #5
    f750:	e7fa      	b.n	f748 <ble_gatts_send_next_indicate+0x4c>
	...

0000f754 <ble_gatts_rx_indicate_ack>:
{
    f754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f758:	b084      	sub	sp, #16
    f75a:	4680      	mov	r8, r0
    f75c:	460e      	mov	r6, r1
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
    f75e:	4b2d      	ldr	r3, [pc, #180]	; (f814 <ble_gatts_rx_indicate_ack+0xc0>)
    f760:	681c      	ldr	r4, [r3, #0]
    f762:	4620      	mov	r0, r4
    f764:	f7ff fa2e 	bl	ebc4 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
    f768:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f76c:	d04b      	beq.n	f806 <ble_gatts_rx_indicate_ack+0xb2>
    clt_cfg = ble_gatts_clt_cfgs + clt_cfg_idx;
    f76e:	0085      	lsls	r5, r0, #2
    f770:	442c      	add	r4, r5
    if (!(clt_cfg->allowed & BLE_GATTS_CLT_CFG_F_INDICATE)) {
    f772:	78e3      	ldrb	r3, [r4, #3]
    f774:	f013 0f02 	tst.w	r3, #2
    f778:	d047      	beq.n	f80a <ble_gatts_rx_indicate_ack+0xb6>
    ble_hs_lock();
    f77a:	f000 fa05 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    f77e:	4640      	mov	r0, r8
    f780:	f001 f80c 	bl	1079c <ble_hs_conn_find>
    f784:	4603      	mov	r3, r0
    if (conn->bhc_gatt_svr.indicate_val_handle == chr_val_handle) {
    f786:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
    f78a:	42b2      	cmp	r2, r6
    f78c:	d006      	beq.n	f79c <ble_gatts_rx_indicate_ack+0x48>
        rc = BLE_HS_ENOENT;
    f78e:	2405      	movs	r4, #5
    ble_hs_unlock();
    f790:	f000 f9fe 	bl	fb90 <ble_hs_unlock>
    if (rc != 0) {
    f794:	bbd4      	cbnz	r4, f80c <ble_gatts_rx_indicate_ack+0xb8>
    if (persist) {
    f796:	bb97      	cbnz	r7, f7fe <ble_gatts_rx_indicate_ack+0xaa>
    return 0;
    f798:	463c      	mov	r4, r7
    f79a:	e037      	b.n	f80c <ble_gatts_rx_indicate_ack+0xb8>
        conn->bhc_gatt_svr.indicate_val_handle = 0;
    f79c:	2200      	movs	r2, #0
    f79e:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
        clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
    f7a2:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    f7a4:	4405      	add	r5, r0
        persist = conn->bhc_sec_state.bonded &&
    f7a6:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    f7aa:	f012 0f04 	tst.w	r2, #4
    f7ae:	d023      	beq.n	f7f8 <ble_gatts_rx_indicate_ack+0xa4>
                  !(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED);
    f7b0:	f995 2002 	ldrsb.w	r2, [r5, #2]
        persist = conn->bhc_sec_state.bonded &&
    f7b4:	2a00      	cmp	r2, #0
    f7b6:	da02      	bge.n	f7be <ble_gatts_rx_indicate_ack+0x6a>
        rc = 0;
    f7b8:	2400      	movs	r4, #0
    f7ba:	4627      	mov	r7, r4
    f7bc:	e7e8      	b.n	f790 <ble_gatts_rx_indicate_ack+0x3c>
            cccd_value.peer_addr = conn->bhc_peer_addr;
    f7be:	461a      	mov	r2, r3
    f7c0:	f852 0f07 	ldr.w	r0, [r2, #7]!
    f7c4:	9000      	str	r0, [sp, #0]
    f7c6:	8891      	ldrh	r1, [r2, #4]
    f7c8:	7992      	ldrb	r2, [r2, #6]
    f7ca:	f8ad 1004 	strh.w	r1, [sp, #4]
    f7ce:	f88d 2006 	strb.w	r2, [sp, #6]
                ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
    f7d2:	79d8      	ldrb	r0, [r3, #7]
    f7d4:	f001 ffb4 	bl	11740 <ble_hs_misc_peer_addr_type_to_id>
            cccd_value.peer_addr.type =
    f7d8:	f88d 0000 	strb.w	r0, [sp]
            cccd_value.chr_val_handle = chr_val_handle;
    f7dc:	f8ad 6008 	strh.w	r6, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
    f7e0:	78ab      	ldrb	r3, [r5, #2]
    f7e2:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
    f7e6:	f89d 300c 	ldrb.w	r3, [sp, #12]
    f7ea:	f36f 0300 	bfc	r3, #0, #1
    f7ee:	f88d 300c 	strb.w	r3, [sp, #12]
        rc = 0;
    f7f2:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
    f7f4:	2701      	movs	r7, #1
    f7f6:	e7cb      	b.n	f790 <ble_gatts_rx_indicate_ack+0x3c>
        rc = 0;
    f7f8:	2400      	movs	r4, #0
    f7fa:	4627      	mov	r7, r4
    f7fc:	e7c8      	b.n	f790 <ble_gatts_rx_indicate_ack+0x3c>
        rc = ble_store_write_cccd(&cccd_value);
    f7fe:	4668      	mov	r0, sp
    f800:	f004 fd19 	bl	14236 <ble_store_write_cccd>
    f804:	e002      	b.n	f80c <ble_gatts_rx_indicate_ack+0xb8>
        return BLE_HS_ENOENT;
    f806:	2405      	movs	r4, #5
    f808:	e000      	b.n	f80c <ble_gatts_rx_indicate_ack+0xb8>
        return BLE_HS_ENOENT;
    f80a:	2405      	movs	r4, #5
}
    f80c:	4620      	mov	r0, r4
    f80e:	b004      	add	sp, #16
    f810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f814:	20007210 	.word	0x20007210

0000f818 <ble_gatts_tx_notifications>:
{
    f818:	b510      	push	{r4, lr}
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
    f81a:	2400      	movs	r4, #0
    f81c:	e006      	b.n	f82c <ble_gatts_tx_notifications+0x14>
        chr_val_handle = ble_gatts_clt_cfgs[i].chr_val_handle;
    f81e:	4b06      	ldr	r3, [pc, #24]	; (f838 <ble_gatts_tx_notifications+0x20>)
    f820:	681b      	ldr	r3, [r3, #0]
        ble_gatts_tx_notifications_one_chr(chr_val_handle);
    f822:	f833 0024 	ldrh.w	r0, [r3, r4, lsl #2]
    f826:	f7ff fdef 	bl	f408 <ble_gatts_tx_notifications_one_chr>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
    f82a:	3401      	adds	r4, #1
    f82c:	4b03      	ldr	r3, [pc, #12]	; (f83c <ble_gatts_tx_notifications+0x24>)
    f82e:	681b      	ldr	r3, [r3, #0]
    f830:	42a3      	cmp	r3, r4
    f832:	dcf4      	bgt.n	f81e <ble_gatts_tx_notifications+0x6>
}
    f834:	bd10      	pop	{r4, pc}
    f836:	bf00      	nop
    f838:	20007210 	.word	0x20007210
    f83c:	20007214 	.word	0x20007214

0000f840 <ble_gatts_bonding_established>:
{
    f840:	b570      	push	{r4, r5, r6, lr}
    f842:	b084      	sub	sp, #16
    f844:	4606      	mov	r6, r0
    ble_hs_lock();
    f846:	f000 f99f 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    f84a:	4630      	mov	r0, r6
    f84c:	f000 ffa6 	bl	1079c <ble_hs_conn_find>
    f850:	4605      	mov	r5, r0
    cccd_value.peer_addr = conn->bhc_peer_addr;
    f852:	4603      	mov	r3, r0
    f854:	f853 0f07 	ldr.w	r0, [r3, #7]!
    f858:	9000      	str	r0, [sp, #0]
    f85a:	889a      	ldrh	r2, [r3, #4]
    f85c:	799b      	ldrb	r3, [r3, #6]
    f85e:	f8ad 2004 	strh.w	r2, [sp, #4]
    f862:	f88d 3006 	strb.w	r3, [sp, #6]
        ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
    f866:	79e8      	ldrb	r0, [r5, #7]
    f868:	f001 ff6a 	bl	11740 <ble_hs_misc_peer_addr_type_to_id>
    cccd_value.peer_addr.type =
    f86c:	f88d 0000 	strb.w	r0, [sp]
    for (i = 0; i < gatt_srv->num_clt_cfgs; ++i) {
    f870:	2400      	movs	r4, #0
    f872:	e000      	b.n	f876 <ble_gatts_bonding_established+0x36>
    f874:	3401      	adds	r4, #1
    f876:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    f878:	42a3      	cmp	r3, r4
    f87a:	dd1d      	ble.n	f8b8 <ble_gatts_bonding_established+0x78>
        clt_cfg = &gatt_srv->clt_cfgs[i];
    f87c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    f87e:	eb02 0384 	add.w	r3, r2, r4, lsl #2
        if (clt_cfg->flags != 0) {
    f882:	7899      	ldrb	r1, [r3, #2]
    f884:	2900      	cmp	r1, #0
    f886:	d0f5      	beq.n	f874 <ble_gatts_bonding_established+0x34>
            cccd_value.chr_val_handle = clt_cfg->chr_val_handle;
    f888:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
    f88c:	f8ad 2008 	strh.w	r2, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
    f890:	789b      	ldrb	r3, [r3, #2]
    f892:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
    f896:	f89d 300c 	ldrb.w	r3, [sp, #12]
    f89a:	f36f 0300 	bfc	r3, #0, #1
    f89e:	f88d 300c 	strb.w	r3, [sp, #12]
            ble_hs_unlock();
    f8a2:	f000 f975 	bl	fb90 <ble_hs_unlock>
            ble_store_write_cccd(&cccd_value);
    f8a6:	4668      	mov	r0, sp
    f8a8:	f004 fcc5 	bl	14236 <ble_store_write_cccd>
            ble_hs_lock();
    f8ac:	f000 f96c 	bl	fb88 <ble_hs_lock>
            conn = ble_hs_conn_find(conn_handle);
    f8b0:	4630      	mov	r0, r6
    f8b2:	f000 ff73 	bl	1079c <ble_hs_conn_find>
    f8b6:	e7dd      	b.n	f874 <ble_gatts_bonding_established+0x34>
    ble_hs_unlock();
    f8b8:	f000 f96a 	bl	fb90 <ble_hs_unlock>
}
    f8bc:	b004      	add	sp, #16
    f8be:	bd70      	pop	{r4, r5, r6, pc}

0000f8c0 <ble_gatts_bonding_restored>:
{
    f8c0:	b530      	push	{r4, r5, lr}
    f8c2:	b08b      	sub	sp, #44	; 0x2c
    f8c4:	4604      	mov	r4, r0
    ble_hs_lock();
    f8c6:	f000 f95f 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    f8ca:	4620      	mov	r0, r4
    f8cc:	f000 ff66 	bl	1079c <ble_hs_conn_find>
    f8d0:	4602      	mov	r2, r0
    cccd_key.peer_addr = conn->bhc_peer_addr;
    f8d2:	4603      	mov	r3, r0
    f8d4:	f853 0f07 	ldr.w	r0, [r3, #7]!
    f8d8:	9003      	str	r0, [sp, #12]
    f8da:	8899      	ldrh	r1, [r3, #4]
    f8dc:	799b      	ldrb	r3, [r3, #6]
    f8de:	f8ad 1010 	strh.w	r1, [sp, #16]
    f8e2:	f88d 3012 	strb.w	r3, [sp, #18]
        ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
    f8e6:	79d0      	ldrb	r0, [r2, #7]
    f8e8:	f001 ff2a 	bl	11740 <ble_hs_misc_peer_addr_type_to_id>
    cccd_key.peer_addr.type =
    f8ec:	f88d 000c 	strb.w	r0, [sp, #12]
    cccd_key.chr_val_handle = 0;
    f8f0:	2300      	movs	r3, #0
    f8f2:	f8ad 3014 	strh.w	r3, [sp, #20]
    cccd_key.idx = 0;
    f8f6:	f88d 3016 	strb.w	r3, [sp, #22]
    ble_hs_unlock();
    f8fa:	f000 f949 	bl	fb90 <ble_hs_unlock>
    f8fe:	e014      	b.n	f92a <ble_gatts_bonding_restored+0x6a>
                clt_cfg->flags |= BLE_GATTS_CLT_CFG_F_MODIFIED;
    f900:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f904:	7083      	strb	r3, [r0, #2]
                att_op = ble_gatts_schedule_update(conn, clt_cfg);
    f906:	4628      	mov	r0, r5
    f908:	f7ff f9a0 	bl	ec4c <ble_gatts_schedule_update>
    f90c:	4605      	mov	r5, r0
    f90e:	e028      	b.n	f962 <ble_gatts_bonding_restored+0xa2>
        att_op = 0;
    f910:	2500      	movs	r5, #0
    f912:	e026      	b.n	f962 <ble_gatts_bonding_restored+0xa2>
            rc = ble_gattc_notify(conn_handle, cccd_value.chr_val_handle);
    f914:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    f918:	4620      	mov	r0, r4
    f91a:	f7fe ffed 	bl	e8f8 <ble_gattc_notify>
            if (rc == 0) {
    f91e:	b3b0      	cbz	r0, f98e <ble_gatts_bonding_restored+0xce>
        cccd_key.idx++;
    f920:	f89d 3016 	ldrb.w	r3, [sp, #22]
    f924:	3301      	adds	r3, #1
    f926:	f88d 3016 	strb.w	r3, [sp, #22]
        rc = ble_store_read_cccd(&cccd_key, &cccd_value);
    f92a:	a906      	add	r1, sp, #24
    f92c:	a803      	add	r0, sp, #12
    f92e:	f004 fc7b 	bl	14228 <ble_store_read_cccd>
        if (rc != 0) {
    f932:	bbb0      	cbnz	r0, f9a2 <ble_gatts_bonding_restored+0xe2>
        ble_hs_lock();
    f934:	f000 f928 	bl	fb88 <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
    f938:	4620      	mov	r0, r4
    f93a:	f000 ff2f 	bl	1079c <ble_hs_conn_find>
    f93e:	4605      	mov	r5, r0
        clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
    f940:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    f944:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    f946:	f7ff f94f 	bl	ebe8 <ble_gatts_clt_cfg_find>
        if (clt_cfg != NULL) {
    f94a:	4601      	mov	r1, r0
    f94c:	2800      	cmp	r0, #0
    f94e:	d0df      	beq.n	f910 <ble_gatts_bonding_restored+0x50>
            clt_cfg->flags = cccd_value.flags;
    f950:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    f954:	7083      	strb	r3, [r0, #2]
            if (cccd_value.value_changed) {
    f956:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    f95a:	f012 0f01 	tst.w	r2, #1
    f95e:	d1cf      	bne.n	f900 <ble_gatts_bonding_restored+0x40>
        att_op = 0;
    f960:	2500      	movs	r5, #0
        ble_hs_unlock();
    f962:	f000 f915 	bl	fb90 <ble_hs_unlock>
        ble_gatts_subscribe_event(conn_handle, cccd_value.chr_val_handle,
    f966:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    f96a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    f96e:	9300      	str	r3, [sp, #0]
    f970:	2300      	movs	r3, #0
    f972:	2203      	movs	r2, #3
    f974:	4620      	mov	r0, r4
    f976:	f7ff fa62 	bl	ee3e <ble_gatts_subscribe_event>
        switch (att_op) {
    f97a:	2d1b      	cmp	r5, #27
    f97c:	d0ca      	beq.n	f914 <ble_gatts_bonding_restored+0x54>
    f97e:	2d1d      	cmp	r5, #29
    f980:	d1ce      	bne.n	f920 <ble_gatts_bonding_restored+0x60>
            ble_gattc_indicate(conn_handle, cccd_value.chr_val_handle);
    f982:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    f986:	4620      	mov	r0, r4
    f988:	f7ff f80a 	bl	e9a0 <ble_gattc_indicate>
            break;
    f98c:	e7c8      	b.n	f920 <ble_gatts_bonding_restored+0x60>
                cccd_value.value_changed = 0;
    f98e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    f992:	f36f 0300 	bfc	r3, #0, #1
    f996:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                ble_store_write_cccd(&cccd_value);
    f99a:	a806      	add	r0, sp, #24
    f99c:	f004 fc4b 	bl	14236 <ble_store_write_cccd>
    f9a0:	e7be      	b.n	f920 <ble_gatts_bonding_restored+0x60>
}
    f9a2:	b00b      	add	sp, #44	; 0x2c
    f9a4:	bd30      	pop	{r4, r5, pc}
	...

0000f9a8 <ble_gatts_add_svcs>:
{
    f9a8:	b570      	push	{r4, r5, r6, lr}
    f9aa:	4606      	mov	r6, r0
    ble_hs_lock();
    f9ac:	f000 f8ec 	bl	fb88 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
    f9b0:	f7ff fcf2 	bl	f398 <ble_gatts_mutable>
    f9b4:	b180      	cbz	r0, f9d8 <ble_gatts_add_svcs+0x30>
                (ble_gatts_num_svc_defs + 1) * sizeof *ble_gatts_svc_defs);
    f9b6:	4b0c      	ldr	r3, [pc, #48]	; (f9e8 <ble_gatts_add_svcs+0x40>)
    f9b8:	681d      	ldr	r5, [r3, #0]
    f9ba:	1c6c      	adds	r4, r5, #1
    p = realloc(ble_gatts_svc_defs,
    f9bc:	00a1      	lsls	r1, r4, #2
    f9be:	4b0b      	ldr	r3, [pc, #44]	; (f9ec <ble_gatts_add_svcs+0x44>)
    f9c0:	6818      	ldr	r0, [r3, #0]
    f9c2:	f00c fb5b 	bl	1c07c <realloc>
    if (p == NULL) {
    f9c6:	b160      	cbz	r0, f9e2 <ble_gatts_add_svcs+0x3a>
    ble_gatts_svc_defs = p;
    f9c8:	4a08      	ldr	r2, [pc, #32]	; (f9ec <ble_gatts_add_svcs+0x44>)
    f9ca:	6010      	str	r0, [r2, #0]
    ble_gatts_svc_defs[ble_gatts_num_svc_defs] = svcs;
    f9cc:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
    ble_gatts_num_svc_defs++;
    f9d0:	4b05      	ldr	r3, [pc, #20]	; (f9e8 <ble_gatts_add_svcs+0x40>)
    f9d2:	601c      	str	r4, [r3, #0]
    rc = 0;
    f9d4:	2400      	movs	r4, #0
    f9d6:	e000      	b.n	f9da <ble_gatts_add_svcs+0x32>
        rc = BLE_HS_EBUSY;
    f9d8:	240f      	movs	r4, #15
    ble_hs_unlock();
    f9da:	f000 f8d9 	bl	fb90 <ble_hs_unlock>
}
    f9de:	4620      	mov	r0, r4
    f9e0:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOMEM;
    f9e2:	2406      	movs	r4, #6
    f9e4:	e7f9      	b.n	f9da <ble_gatts_add_svcs+0x32>
    f9e6:	bf00      	nop
    f9e8:	20007218 	.word	0x20007218
    f9ec:	20007220 	.word	0x20007220

0000f9f0 <ble_gatts_count_cfg>:
int
ble_gatts_count_cfg(const struct ble_gatt_svc_def *defs)
{
    f9f0:	b500      	push	{lr}
    f9f2:	b085      	sub	sp, #20
    struct ble_gatt_resources res = { 0 };
    f9f4:	2300      	movs	r3, #0
    f9f6:	9301      	str	r3, [sp, #4]
    f9f8:	9302      	str	r3, [sp, #8]
    f9fa:	9303      	str	r3, [sp, #12]
    int rc;

    rc = ble_gatts_count_resources(defs, &res);
    f9fc:	a901      	add	r1, sp, #4
    f9fe:	f7ff f93f 	bl	ec80 <ble_gatts_count_resources>
    if (rc != 0) {
    fa02:	4602      	mov	r2, r0
    fa04:	b990      	cbnz	r0, fa2c <ble_gatts_count_cfg+0x3c>
        return rc;
    }

    ble_hs_max_services += res.svcs;
    fa06:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    fa0a:	490a      	ldr	r1, [pc, #40]	; (fa34 <ble_gatts_count_cfg+0x44>)
    fa0c:	8808      	ldrh	r0, [r1, #0]
    fa0e:	4403      	add	r3, r0
    fa10:	800b      	strh	r3, [r1, #0]
    ble_hs_max_attrs += res.attrs;
    fa12:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    fa16:	4908      	ldr	r1, [pc, #32]	; (fa38 <ble_gatts_count_cfg+0x48>)
    fa18:	8808      	ldrh	r0, [r1, #0]
    fa1a:	4403      	add	r3, r0
    fa1c:	800b      	strh	r3, [r1, #0]

    /* Reserve an extra CCCD for the cache. */
    ble_hs_max_client_configs +=
        res.cccds * (MYNEWT_VAL(BLE_MAX_CONNECTIONS) + 1);
    fa1e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    ble_hs_max_client_configs +=
    fa22:	4906      	ldr	r1, [pc, #24]	; (fa3c <ble_gatts_count_cfg+0x4c>)
    fa24:	880b      	ldrh	r3, [r1, #0]
    fa26:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    fa2a:	800b      	strh	r3, [r1, #0]

    return 0;
}
    fa2c:	4610      	mov	r0, r2
    fa2e:	b005      	add	sp, #20
    fa30:	f85d fb04 	ldr.w	pc, [sp], #4
    fa34:	20007330 	.word	0x20007330
    fa38:	2000732c 	.word	0x2000732c
    fa3c:	2000732e 	.word	0x2000732e

0000fa40 <ble_gatts_init>:
int
ble_gatts_init(void)
{
    int rc;

    ble_gatts_num_cfgable_chrs = 0;
    fa40:	2000      	movs	r0, #0
    fa42:	4b02      	ldr	r3, [pc, #8]	; (fa4c <ble_gatts_init+0xc>)
    fa44:	6018      	str	r0, [r3, #0]
    ble_gatts_clt_cfgs = NULL;
    fa46:	4b02      	ldr	r3, [pc, #8]	; (fa50 <ble_gatts_init+0x10>)
    fa48:	6018      	str	r0, [r3, #0]
        return BLE_HS_EOS;
    }

    return 0;

}
    fa4a:	4770      	bx	lr
    fa4c:	20007214 	.word	0x20007214
    fa50:	20007210 	.word	0x20007210

0000fa54 <ble_hs_wakeup_tx_conn>:
    }
}

static int
ble_hs_wakeup_tx_conn(struct ble_hs_conn *conn)
{
    fa54:	b510      	push	{r4, lr}
    fa56:	b082      	sub	sp, #8
    fa58:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *omp;
    struct os_mbuf *om;
    int rc;

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
    fa5a:	e008      	b.n	fa6e <ble_hs_wakeup_tx_conn+0x1a>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);

        om = OS_MBUF_PKTHDR_TO_MBUF(omp);
    fa5c:	3b10      	subs	r3, #16
    fa5e:	a902      	add	r1, sp, #8
    fa60:	f841 3d04 	str.w	r3, [r1, #-4]!
        rc = ble_hs_hci_acl_tx_now(conn, &om);
    fa64:	4620      	mov	r0, r4
    fa66:	f001 f93b 	bl	10ce0 <ble_hs_hci_acl_tx_now>
        if (rc == BLE_HS_EAGAIN) {
    fa6a:	2801      	cmp	r0, #1
    fa6c:	d009      	beq.n	fa82 <ble_hs_wakeup_tx_conn+0x2e>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
    fa6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    fa70:	b193      	cbz	r3, fa98 <ble_hs_wakeup_tx_conn+0x44>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
    fa72:	685a      	ldr	r2, [r3, #4]
    fa74:	63e2      	str	r2, [r4, #60]	; 0x3c
    fa76:	2a00      	cmp	r2, #0
    fa78:	d1f0      	bne.n	fa5c <ble_hs_wakeup_tx_conn+0x8>
    fa7a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
    fa7e:	6422      	str	r2, [r4, #64]	; 0x40
    fa80:	e7ec      	b.n	fa5c <ble_hs_wakeup_tx_conn+0x8>
            /* Controller is at capacity.  This packet will be the first to
             * get transmitted next time around.
             */
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
    fa82:	9b01      	ldr	r3, [sp, #4]
    fa84:	f103 0110 	add.w	r1, r3, #16
    fa88:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    fa8a:	615a      	str	r2, [r3, #20]
    fa8c:	b10a      	cbz	r2, fa92 <ble_hs_wakeup_tx_conn+0x3e>
    fa8e:	63e1      	str	r1, [r4, #60]	; 0x3c
            return BLE_HS_EAGAIN;
    fa90:	e003      	b.n	fa9a <ble_hs_wakeup_tx_conn+0x46>
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
    fa92:	3314      	adds	r3, #20
    fa94:	6423      	str	r3, [r4, #64]	; 0x40
    fa96:	e7fa      	b.n	fa8e <ble_hs_wakeup_tx_conn+0x3a>
        }
    }

    return 0;
    fa98:	2000      	movs	r0, #0
}
    fa9a:	b002      	add	sp, #8
    fa9c:	bd10      	pop	{r4, pc}
	...

0000faa0 <ble_hs_event_rx_hci_ev>:
#endif
}

static void
ble_hs_event_rx_hci_ev(struct ble_npl_event *ev)
{
    faa0:	b510      	push	{r4, lr}
    faa2:	4601      	mov	r1, r0
    return ev->ev.ev_arg;
    faa4:	6884      	ldr	r4, [r0, #8]
    const struct ble_hci_ev *hci_ev;
    int rc;

    hci_ev = ble_npl_event_get_arg(ev);

    rc = os_memblock_put(&ble_hs_hci_ev_pool, ev);
    faa6:	4803      	ldr	r0, [pc, #12]	; (fab4 <ble_hs_event_rx_hci_ev+0x14>)
    faa8:	f7fb f883 	bl	abb2 <os_memblock_put>
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_EVENT_PKT, hci_ev,
                     hci_ev->length + sizeof(*hci_ev));
#endif

    ble_hs_hci_evt_process(hci_ev);
    faac:	4620      	mov	r0, r4
    faae:	f001 fbe3 	bl	11278 <ble_hs_hci_evt_process>
}
    fab2:	bd10      	pop	{r4, pc}
    fab4:	20007270 	.word	0x20007270

0000fab8 <ble_hs_clear_rx_queue>:
{
    fab8:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
    faba:	e002      	b.n	fac2 <ble_hs_clear_rx_queue+0xa>
        os_mbuf_free_chain(om);
    fabc:	4618      	mov	r0, r3
    fabe:	f7fa fc01 	bl	a2c4 <os_mbuf_free_chain>
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
    fac2:	4803      	ldr	r0, [pc, #12]	; (fad0 <ble_hs_clear_rx_queue+0x18>)
    fac4:	f001 fe58 	bl	11778 <ble_mqueue_get>
    fac8:	4603      	mov	r3, r0
    faca:	2800      	cmp	r0, #0
    facc:	d1f6      	bne.n	fabc <ble_hs_clear_rx_queue+0x4>
}
    face:	bd08      	pop	{r3, pc}
    fad0:	20007348 	.word	0x20007348

0000fad4 <ble_hs_rx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_hs_rx_data(struct os_mbuf *om, void *arg)
{
    fad4:	b510      	push	{r4, lr}
    fad6:	4604      	mov	r4, r0
    int rc;

    /* If flow control is enabled, mark this packet with its corresponding
     * connection handle.
     */
    ble_hs_flow_track_data_mbuf(om);
    fad8:	f000 ff9d 	bl	10a16 <ble_hs_flow_track_data_mbuf>

    rc = ble_mqueue_put(&ble_hs_rx_q, ble_hs_evq, om);
    fadc:	4622      	mov	r2, r4
    fade:	4b07      	ldr	r3, [pc, #28]	; (fafc <ble_hs_rx_data+0x28>)
    fae0:	6819      	ldr	r1, [r3, #0]
    fae2:	4807      	ldr	r0, [pc, #28]	; (fb00 <ble_hs_rx_data+0x2c>)
    fae4:	f001 fe5b 	bl	1179e <ble_mqueue_put>
    if (rc != 0) {
    fae8:	4603      	mov	r3, r0
    faea:	b908      	cbnz	r0, faf0 <ble_hs_rx_data+0x1c>
        os_mbuf_free_chain(om);
        return BLE_HS_EOS;
    }

    return 0;
}
    faec:	4618      	mov	r0, r3
    faee:	bd10      	pop	{r4, pc}
        os_mbuf_free_chain(om);
    faf0:	4620      	mov	r0, r4
    faf2:	f7fa fbe7 	bl	a2c4 <os_mbuf_free_chain>
        return BLE_HS_EOS;
    faf6:	230b      	movs	r3, #11
    faf8:	e7f8      	b.n	faec <ble_hs_rx_data+0x18>
    fafa:	bf00      	nop
    fafc:	2000726c 	.word	0x2000726c
    fb00:	20007348 	.word	0x20007348

0000fb04 <ble_hs_event_tx_notify>:
{
    fb04:	b508      	push	{r3, lr}
    ble_gatts_tx_notifications();
    fb06:	f7ff fe87 	bl	f818 <ble_gatts_tx_notifications>
}
    fb0a:	bd08      	pop	{r3, pc}

0000fb0c <ble_hs_evq_get>:
}
    fb0c:	4b01      	ldr	r3, [pc, #4]	; (fb14 <ble_hs_evq_get+0x8>)
    fb0e:	6818      	ldr	r0, [r3, #0]
    fb10:	4770      	bx	lr
    fb12:	bf00      	nop
    fb14:	2000726c 	.word	0x2000726c

0000fb18 <ble_hs_sched_start_stage2>:
{
    fb18:	b508      	push	{r3, lr}
    ble_npl_eventq_put((struct ble_npl_eventq *)ble_hs_evq_get(),
    fb1a:	f7ff fff7 	bl	fb0c <ble_hs_evq_get>
    os_eventq_put(&evq->evq, &ev->ev);
    fb1e:	4902      	ldr	r1, [pc, #8]	; (fb28 <ble_hs_sched_start_stage2+0x10>)
    fb20:	f7fa faa3 	bl	a06a <os_eventq_put>
}
    fb24:	bd08      	pop	{r3, pc}
    fb26:	bf00      	nop
    fb28:	2000724c 	.word	0x2000724c

0000fb2c <ble_hs_event_start_stage1>:
{
    fb2c:	b508      	push	{r3, lr}
    ble_hs_sched_start_stage2();
    fb2e:	f7ff fff3 	bl	fb18 <ble_hs_sched_start_stage2>
}
    fb32:	bd08      	pop	{r3, pc}

0000fb34 <ble_hs_evq_set>:
    ble_hs_evq = evq;
    fb34:	4b01      	ldr	r3, [pc, #4]	; (fb3c <ble_hs_evq_set+0x8>)
    fb36:	6018      	str	r0, [r3, #0]
}
    fb38:	4770      	bx	lr
    fb3a:	bf00      	nop
    fb3c:	2000726c 	.word	0x2000726c

0000fb40 <ble_hs_is_parent_task>:
{
    fb40:	b508      	push	{r3, lr}
    return os_started();
    fb42:	f7fa f805 	bl	9b50 <os_started>
    return !ble_npl_os_started() ||
    fb46:	b908      	cbnz	r0, fb4c <ble_hs_is_parent_task+0xc>
    fb48:	2001      	movs	r0, #1
}
    fb4a:	bd08      	pop	{r3, pc}
    return os_sched_get_current_task();
    fb4c:	f7fb faa0 	bl	b090 <os_sched_get_current_task>
           ble_npl_get_current_task_id() == ble_hs_parent_task;
    fb50:	4b03      	ldr	r3, [pc, #12]	; (fb60 <ble_hs_is_parent_task+0x20>)
    fb52:	681b      	ldr	r3, [r3, #0]
    return !ble_npl_os_started() ||
    fb54:	4283      	cmp	r3, r0
    fb56:	d001      	beq.n	fb5c <ble_hs_is_parent_task+0x1c>
    fb58:	2000      	movs	r0, #0
    fb5a:	e7f6      	b.n	fb4a <ble_hs_is_parent_task+0xa>
    fb5c:	2001      	movs	r0, #1
    fb5e:	e7f4      	b.n	fb4a <ble_hs_is_parent_task+0xa>
    fb60:	20007340 	.word	0x20007340

0000fb64 <ble_hs_lock_nested>:
{
    fb64:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
    fb66:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fb6a:	4802      	ldr	r0, [pc, #8]	; (fb74 <ble_hs_lock_nested+0x10>)
    fb6c:	f7fb f95c 	bl	ae28 <os_mutex_pend>
}
    fb70:	bd08      	pop	{r3, pc}
    fb72:	bf00      	nop
    fb74:	20007334 	.word	0x20007334

0000fb78 <ble_hs_unlock_nested>:
{
    fb78:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
    fb7a:	4802      	ldr	r0, [pc, #8]	; (fb84 <ble_hs_unlock_nested+0xc>)
    fb7c:	f7fb f8f4 	bl	ad68 <os_mutex_release>
}
    fb80:	bd08      	pop	{r3, pc}
    fb82:	bf00      	nop
    fb84:	20007334 	.word	0x20007334

0000fb88 <ble_hs_lock>:
{
    fb88:	b508      	push	{r3, lr}
    ble_hs_lock_nested();
    fb8a:	f7ff ffeb 	bl	fb64 <ble_hs_lock_nested>
}
    fb8e:	bd08      	pop	{r3, pc}

0000fb90 <ble_hs_unlock>:
{
    fb90:	b508      	push	{r3, lr}
    ble_hs_unlock_nested();
    fb92:	f7ff fff1 	bl	fb78 <ble_hs_unlock_nested>
}
    fb96:	bd08      	pop	{r3, pc}

0000fb98 <ble_hs_process_rx_data_queue>:
{
    fb98:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
    fb9a:	e002      	b.n	fba2 <ble_hs_process_rx_data_queue+0xa>
        ble_hs_hci_evt_acl_process(om);
    fb9c:	4618      	mov	r0, r3
    fb9e:	f001 fb7f 	bl	112a0 <ble_hs_hci_evt_acl_process>
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
    fba2:	4803      	ldr	r0, [pc, #12]	; (fbb0 <ble_hs_process_rx_data_queue+0x18>)
    fba4:	f001 fde8 	bl	11778 <ble_mqueue_get>
    fba8:	4603      	mov	r3, r0
    fbaa:	2800      	cmp	r0, #0
    fbac:	d1f6      	bne.n	fb9c <ble_hs_process_rx_data_queue+0x4>
}
    fbae:	bd08      	pop	{r3, pc}
    fbb0:	20007348 	.word	0x20007348

0000fbb4 <ble_hs_event_rx_data>:
{
    fbb4:	b508      	push	{r3, lr}
    ble_hs_process_rx_data_queue();
    fbb6:	f7ff ffef 	bl	fb98 <ble_hs_process_rx_data_queue>
}
    fbba:	bd08      	pop	{r3, pc}

0000fbbc <ble_hs_wakeup_tx>:
{
    fbbc:	b510      	push	{r4, lr}
    ble_hs_lock();
    fbbe:	f7ff ffe3 	bl	fb88 <ble_hs_lock>
    for (conn = ble_hs_conn_first();
    fbc2:	f000 fe1d 	bl	10800 <ble_hs_conn_first>
    fbc6:	b148      	cbz	r0, fbdc <ble_hs_wakeup_tx+0x20>
        if (conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG) {
    fbc8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    fbcc:	f013 0f04 	tst.w	r3, #4
    fbd0:	d101      	bne.n	fbd6 <ble_hs_wakeup_tx+0x1a>
         conn = SLIST_NEXT(conn, bhc_next)) {
    fbd2:	6800      	ldr	r0, [r0, #0]
    fbd4:	e7f7      	b.n	fbc6 <ble_hs_wakeup_tx+0xa>
            rc = ble_hs_wakeup_tx_conn(conn);
    fbd6:	f7ff ff3d 	bl	fa54 <ble_hs_wakeup_tx_conn>
            if (rc != 0) {
    fbda:	b948      	cbnz	r0, fbf0 <ble_hs_wakeup_tx+0x34>
    for (conn = ble_hs_conn_first();
    fbdc:	f000 fe10 	bl	10800 <ble_hs_conn_first>
    fbe0:	4604      	mov	r4, r0
    fbe2:	b12c      	cbz	r4, fbf0 <ble_hs_wakeup_tx+0x34>
        rc = ble_hs_wakeup_tx_conn(conn);
    fbe4:	4620      	mov	r0, r4
    fbe6:	f7ff ff35 	bl	fa54 <ble_hs_wakeup_tx_conn>
        if (rc != 0) {
    fbea:	b908      	cbnz	r0, fbf0 <ble_hs_wakeup_tx+0x34>
         conn = SLIST_NEXT(conn, bhc_next)) {
    fbec:	6824      	ldr	r4, [r4, #0]
    fbee:	e7f8      	b.n	fbe2 <ble_hs_wakeup_tx+0x26>
    ble_hs_unlock();
    fbf0:	f7ff ffce 	bl	fb90 <ble_hs_unlock>
}
    fbf4:	bd10      	pop	{r4, pc}
	...

0000fbf8 <ble_hs_is_enabled>:
    return ble_hs_enabled_state == BLE_HS_ENABLED_STATE_ON;
    fbf8:	4b03      	ldr	r3, [pc, #12]	; (fc08 <ble_hs_is_enabled+0x10>)
    fbfa:	7818      	ldrb	r0, [r3, #0]
}
    fbfc:	2802      	cmp	r0, #2
    fbfe:	bf14      	ite	ne
    fc00:	2000      	movne	r0, #0
    fc02:	2001      	moveq	r0, #1
    fc04:	4770      	bx	lr
    fc06:	bf00      	nop
    fc08:	20007228 	.word	0x20007228

0000fc0c <ble_hs_timer_reset>:
{
    fc0c:	b510      	push	{r4, lr}
    fc0e:	4604      	mov	r4, r0
    if (!ble_hs_is_enabled()) {
    fc10:	f7ff fff2 	bl	fbf8 <ble_hs_is_enabled>
    fc14:	b120      	cbz	r0, fc20 <ble_hs_timer_reset+0x14>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
    fc16:	4621      	mov	r1, r4
    fc18:	4803      	ldr	r0, [pc, #12]	; (fc28 <ble_hs_timer_reset+0x1c>)
    fc1a:	f7fa f8ad 	bl	9d78 <os_callout_reset>
}
    fc1e:	bd10      	pop	{r4, pc}
    os_callout_stop(&co->co);
    fc20:	4801      	ldr	r0, [pc, #4]	; (fc28 <ble_hs_timer_reset+0x1c>)
    fc22:	f7fa f88b 	bl	9d3c <os_callout_stop>
    fc26:	e7fa      	b.n	fc1e <ble_hs_timer_reset+0x12>
    fc28:	20007364 	.word	0x20007364

0000fc2c <ble_hs_timer_sched>:
    if (ticks_from_now == BLE_HS_FOREVER) {
    fc2c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    fc30:	4298      	cmp	r0, r3
    fc32:	d010      	beq.n	fc56 <ble_hs_timer_sched+0x2a>
{
    fc34:	b510      	push	{r4, lr}
    fc36:	4604      	mov	r4, r0
    return os_time_get();
    fc38:	f7fb fc3e 	bl	b4b8 <os_time_get>
    abs_time = ble_npl_time_get() + ticks_from_now;
    fc3c:	4420      	add	r0, r4
    fc3e:	4b06      	ldr	r3, [pc, #24]	; (fc58 <ble_hs_timer_sched+0x2c>)
    fc40:	69db      	ldr	r3, [r3, #28]
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
    fc42:	b123      	cbz	r3, fc4e <ble_hs_timer_sched+0x22>
    return co->co.c_ticks;
    fc44:	4b04      	ldr	r3, [pc, #16]	; (fc58 <ble_hs_timer_sched+0x2c>)
    fc46:	695b      	ldr	r3, [r3, #20]
            ((ble_npl_stime_t)(abs_time -
    fc48:	1ac0      	subs	r0, r0, r3
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
    fc4a:	2800      	cmp	r0, #0
    fc4c:	da02      	bge.n	fc54 <ble_hs_timer_sched+0x28>
        ble_hs_timer_reset(ticks_from_now);
    fc4e:	4620      	mov	r0, r4
    fc50:	f7ff ffdc 	bl	fc0c <ble_hs_timer_reset>
}
    fc54:	bd10      	pop	{r4, pc}
    fc56:	4770      	bx	lr
    fc58:	20007364 	.word	0x20007364

0000fc5c <ble_hs_sync>:
{
    fc5c:	b510      	push	{r4, lr}
    ble_hs_sync_state = BLE_HS_SYNC_STATE_BRINGUP;
    fc5e:	4b0e      	ldr	r3, [pc, #56]	; (fc98 <ble_hs_sync+0x3c>)
    fc60:	2201      	movs	r2, #1
    fc62:	701a      	strb	r2, [r3, #0]
    rc = ble_hs_startup_go();
    fc64:	f001 ffd3 	bl	11c0e <ble_hs_startup_go>
    if (rc == 0) {
    fc68:	4604      	mov	r4, r0
    fc6a:	b940      	cbnz	r0, fc7e <ble_hs_sync+0x22>
        ble_hs_sync_state = BLE_HS_SYNC_STATE_GOOD;
    fc6c:	4b0a      	ldr	r3, [pc, #40]	; (fc98 <ble_hs_sync+0x3c>)
    fc6e:	2202      	movs	r2, #2
    fc70:	701a      	strb	r2, [r3, #0]
    ble_hs_timer_sched(retry_tmo_ticks);
    fc72:	200c      	movs	r0, #12
    fc74:	f7ff ffda 	bl	fc2c <ble_hs_timer_sched>
    if (rc == 0) {
    fc78:	b12c      	cbz	r4, fc86 <ble_hs_sync+0x2a>
}
    fc7a:	4620      	mov	r0, r4
    fc7c:	bd10      	pop	{r4, pc}
        ble_hs_sync_state = BLE_HS_SYNC_STATE_BAD;
    fc7e:	4b06      	ldr	r3, [pc, #24]	; (fc98 <ble_hs_sync+0x3c>)
    fc80:	2200      	movs	r2, #0
    fc82:	701a      	strb	r2, [r3, #0]
    fc84:	e7f5      	b.n	fc72 <ble_hs_sync+0x16>
        rc = ble_hs_misc_restore_irks();
    fc86:	f001 fd63 	bl	11750 <ble_hs_misc_restore_irks>
    fc8a:	4604      	mov	r4, r0
        if (ble_hs_cfg.sync_cb != NULL) {
    fc8c:	4b03      	ldr	r3, [pc, #12]	; (fc9c <ble_hs_sync+0x40>)
    fc8e:	691b      	ldr	r3, [r3, #16]
    fc90:	2b00      	cmp	r3, #0
    fc92:	d0f2      	beq.n	fc7a <ble_hs_sync+0x1e>
            ble_hs_cfg.sync_cb();
    fc94:	4798      	blx	r3
    return rc;
    fc96:	e7f0      	b.n	fc7a <ble_hs_sync+0x1e>
    fc98:	20007360 	.word	0x20007360
    fc9c:	2000017c 	.word	0x2000017c

0000fca0 <ble_hs_reset>:
{
    fca0:	b508      	push	{r3, lr}
    ble_hs_sync_state = 0;
    fca2:	4b0d      	ldr	r3, [pc, #52]	; (fcd8 <ble_hs_reset+0x38>)
    fca4:	2200      	movs	r2, #0
    fca6:	701a      	strb	r2, [r3, #0]
    (void)ble_hci_trans_reset();
    fca8:	f006 fd24 	bl	166f4 <ble_hci_trans_reset>
    ble_hs_clear_rx_queue();
    fcac:	f7ff ff04 	bl	fab8 <ble_hs_clear_rx_queue>
    ble_gap_reset_state(ble_hs_reset_reason);
    fcb0:	4b0a      	ldr	r3, [pc, #40]	; (fcdc <ble_hs_reset+0x3c>)
    fcb2:	6818      	ldr	r0, [r3, #0]
    fcb4:	f7fd fc98 	bl	d5e8 <ble_gap_reset_state>
    ble_hs_id_reset();
    fcb8:	f001 fc8e 	bl	115d8 <ble_hs_id_reset>
    if (ble_hs_cfg.reset_cb != NULL && ble_hs_reset_reason != 0) {
    fcbc:	4b08      	ldr	r3, [pc, #32]	; (fce0 <ble_hs_reset+0x40>)
    fcbe:	68db      	ldr	r3, [r3, #12]
    fcc0:	b11b      	cbz	r3, fcca <ble_hs_reset+0x2a>
    fcc2:	4a06      	ldr	r2, [pc, #24]	; (fcdc <ble_hs_reset+0x3c>)
    fcc4:	6810      	ldr	r0, [r2, #0]
    fcc6:	b100      	cbz	r0, fcca <ble_hs_reset+0x2a>
        ble_hs_cfg.reset_cb(ble_hs_reset_reason);
    fcc8:	4798      	blx	r3
    ble_hs_reset_reason = 0;
    fcca:	4b04      	ldr	r3, [pc, #16]	; (fcdc <ble_hs_reset+0x3c>)
    fccc:	2200      	movs	r2, #0
    fcce:	601a      	str	r2, [r3, #0]
    rc = ble_hs_sync();
    fcd0:	f7ff ffc4 	bl	fc5c <ble_hs_sync>
}
    fcd4:	bd08      	pop	{r3, pc}
    fcd6:	bf00      	nop
    fcd8:	20007360 	.word	0x20007360
    fcdc:	20007344 	.word	0x20007344
    fce0:	2000017c 	.word	0x2000017c

0000fce4 <ble_hs_event_reset>:
{
    fce4:	b508      	push	{r3, lr}
    ble_hs_reset();
    fce6:	f7ff ffdb 	bl	fca0 <ble_hs_reset>
}
    fcea:	bd08      	pop	{r3, pc}

0000fcec <ble_hs_timer_exp>:
{
    fcec:	b508      	push	{r3, lr}
    switch (ble_hs_sync_state) {
    fcee:	4b13      	ldr	r3, [pc, #76]	; (fd3c <ble_hs_timer_exp+0x50>)
    fcf0:	781b      	ldrb	r3, [r3, #0]
    fcf2:	b1b3      	cbz	r3, fd22 <ble_hs_timer_exp+0x36>
    fcf4:	2b02      	cmp	r3, #2
    fcf6:	d117      	bne.n	fd28 <ble_hs_timer_exp+0x3c>
        ticks_until_next = ble_gattc_timer();
    fcf8:	f7fe fda8 	bl	e84c <ble_gattc_timer>
        ble_hs_timer_sched(ticks_until_next);
    fcfc:	f7ff ff96 	bl	fc2c <ble_hs_timer_sched>
        ticks_until_next = ble_gap_timer();
    fd00:	f7fd f9e7 	bl	d0d2 <ble_gap_timer>
        ble_hs_timer_sched(ticks_until_next);
    fd04:	f7ff ff92 	bl	fc2c <ble_hs_timer_sched>
        ticks_until_next = ble_l2cap_sig_timer();
    fd08:	f002 fb2e 	bl	12368 <ble_l2cap_sig_timer>
        ble_hs_timer_sched(ticks_until_next);
    fd0c:	f7ff ff8e 	bl	fc2c <ble_hs_timer_sched>
        ticks_until_next = ble_sm_timer();
    fd10:	f003 ff05 	bl	13b1e <ble_sm_timer>
        ble_hs_timer_sched(ticks_until_next);
    fd14:	f7ff ff8a 	bl	fc2c <ble_hs_timer_sched>
        ticks_until_next = ble_hs_conn_timer();
    fd18:	f000 fe24 	bl	10964 <ble_hs_conn_timer>
        ble_hs_timer_sched(ticks_until_next);
    fd1c:	f7ff ff86 	bl	fc2c <ble_hs_timer_sched>
}
    fd20:	bd08      	pop	{r3, pc}
        ble_hs_reset();
    fd22:	f7ff ffbd 	bl	fca0 <ble_hs_reset>
        break;
    fd26:	e7fb      	b.n	fd20 <ble_hs_timer_exp+0x34>
        assert(0);
    fd28:	f7f8 fa4a 	bl	81c0 <hal_debugger_connected>
    fd2c:	b100      	cbz	r0, fd30 <ble_hs_timer_exp+0x44>
    fd2e:	be01      	bkpt	0x0001
    fd30:	2300      	movs	r3, #0
    fd32:	461a      	mov	r2, r3
    fd34:	4619      	mov	r1, r3
    fd36:	4618      	mov	r0, r3
    fd38:	f7f9 fe4a 	bl	99d0 <__assert_func>
    fd3c:	20007360 	.word	0x20007360

0000fd40 <ble_hs_timer_resched>:
{
    fd40:	b508      	push	{r3, lr}
    ble_hs_timer_reset(0);
    fd42:	2000      	movs	r0, #0
    fd44:	f7ff ff62 	bl	fc0c <ble_hs_timer_reset>
}
    fd48:	bd08      	pop	{r3, pc}
	...

0000fd4c <ble_hs_enqueue_hci_event>:
{
    fd4c:	b510      	push	{r4, lr}
    fd4e:	4604      	mov	r4, r0
    ev = os_memblock_get(&ble_hs_hci_ev_pool);
    fd50:	480a      	ldr	r0, [pc, #40]	; (fd7c <ble_hs_enqueue_hci_event+0x30>)
    fd52:	f7fa ff06 	bl	ab62 <os_memblock_get>
    if (ev == NULL) {
    fd56:	b160      	cbz	r0, fd72 <ble_hs_enqueue_hci_event+0x26>
    fd58:	4601      	mov	r1, r0
    memset(ev, 0, sizeof(*ev));
    fd5a:	2300      	movs	r3, #0
    fd5c:	6003      	str	r3, [r0, #0]
    fd5e:	60c3      	str	r3, [r0, #12]
    ev->ev.ev_queued = 0;
    fd60:	7003      	strb	r3, [r0, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
    fd62:	4b07      	ldr	r3, [pc, #28]	; (fd80 <ble_hs_enqueue_hci_event+0x34>)
    fd64:	6043      	str	r3, [r0, #4]
    ev->ev.ev_arg = arg;
    fd66:	6084      	str	r4, [r0, #8]
    os_eventq_put(&evq->evq, &ev->ev);
    fd68:	4b06      	ldr	r3, [pc, #24]	; (fd84 <ble_hs_enqueue_hci_event+0x38>)
    fd6a:	6818      	ldr	r0, [r3, #0]
    fd6c:	f7fa f97d 	bl	a06a <os_eventq_put>
}
    fd70:	bd10      	pop	{r4, pc}
        ble_hci_trans_buf_free(hci_evt);
    fd72:	4620      	mov	r0, r4
    fd74:	f006 fc6c 	bl	16650 <ble_hci_trans_buf_free>
    fd78:	e7fa      	b.n	fd70 <ble_hs_enqueue_hci_event+0x24>
    fd7a:	bf00      	nop
    fd7c:	20007270 	.word	0x20007270
    fd80:	0000faa1 	.word	0x0000faa1
    fd84:	2000726c 	.word	0x2000726c

0000fd88 <ble_hs_sched_reset>:
{
    fd88:	b508      	push	{r3, lr}
    ble_hs_reset_reason = reason;
    fd8a:	4b04      	ldr	r3, [pc, #16]	; (fd9c <ble_hs_sched_reset+0x14>)
    fd8c:	6018      	str	r0, [r3, #0]
    fd8e:	4904      	ldr	r1, [pc, #16]	; (fda0 <ble_hs_sched_reset+0x18>)
    fd90:	4b04      	ldr	r3, [pc, #16]	; (fda4 <ble_hs_sched_reset+0x1c>)
    fd92:	6818      	ldr	r0, [r3, #0]
    fd94:	f7fa f969 	bl	a06a <os_eventq_put>
}
    fd98:	bd08      	pop	{r3, pc}
    fd9a:	bf00      	nop
    fd9c:	20007344 	.word	0x20007344
    fda0:	2000722c 	.word	0x2000722c
    fda4:	2000726c 	.word	0x2000726c

0000fda8 <ble_hs_hw_error>:
{
    fda8:	b508      	push	{r3, lr}
    ble_hs_sched_reset(BLE_HS_HW_ERR(hw_code));
    fdaa:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
    fdae:	f7ff ffeb 	bl	fd88 <ble_hs_sched_reset>
}
    fdb2:	bd08      	pop	{r3, pc}

0000fdb4 <ble_hs_start>:
{
    fdb4:	b510      	push	{r4, lr}
    ble_hs_lock();
    fdb6:	f7ff fee7 	bl	fb88 <ble_hs_lock>
    switch (ble_hs_enabled_state) {
    fdba:	4b19      	ldr	r3, [pc, #100]	; (fe20 <ble_hs_start+0x6c>)
    fdbc:	781b      	ldrb	r3, [r3, #0]
    fdbe:	2b01      	cmp	r3, #1
    fdc0:	d029      	beq.n	fe16 <ble_hs_start+0x62>
    fdc2:	b133      	cbz	r3, fdd2 <ble_hs_start+0x1e>
    fdc4:	2b02      	cmp	r3, #2
    fdc6:	d11c      	bne.n	fe02 <ble_hs_start+0x4e>
    ble_hs_unlock();
    fdc8:	f7ff fee2 	bl	fb90 <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
    fdcc:	2402      	movs	r4, #2
}
    fdce:	4620      	mov	r0, r4
    fdd0:	bd10      	pop	{r4, pc}
        ble_hs_enabled_state = BLE_HS_ENABLED_STATE_ON;
    fdd2:	4b13      	ldr	r3, [pc, #76]	; (fe20 <ble_hs_start+0x6c>)
    fdd4:	2202      	movs	r2, #2
    fdd6:	701a      	strb	r2, [r3, #0]
    ble_hs_unlock();
    fdd8:	f7ff feda 	bl	fb90 <ble_hs_unlock>
    return os_sched_get_current_task();
    fddc:	f7fb f958 	bl	b090 <os_sched_get_current_task>
    ble_hs_parent_task = ble_npl_get_current_task_id();
    fde0:	4b10      	ldr	r3, [pc, #64]	; (fe24 <ble_hs_start+0x70>)
    fde2:	6018      	str	r0, [r3, #0]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    fde4:	2300      	movs	r3, #0
    fde6:	4a10      	ldr	r2, [pc, #64]	; (fe28 <ble_hs_start+0x74>)
    fde8:	4910      	ldr	r1, [pc, #64]	; (fe2c <ble_hs_start+0x78>)
    fdea:	6809      	ldr	r1, [r1, #0]
    fdec:	4810      	ldr	r0, [pc, #64]	; (fe30 <ble_hs_start+0x7c>)
    fdee:	f7f9 ff97 	bl	9d20 <os_callout_init>
    rc = ble_gatts_start();
    fdf2:	f7ff fba7 	bl	f544 <ble_gatts_start>
    if (rc != 0) {
    fdf6:	4604      	mov	r4, r0
    fdf8:	2800      	cmp	r0, #0
    fdfa:	d1e8      	bne.n	fdce <ble_hs_start+0x1a>
    ble_hs_sync();
    fdfc:	f7ff ff2e 	bl	fc5c <ble_hs_sync>
    return 0;
    fe00:	e7e5      	b.n	fdce <ble_hs_start+0x1a>
        assert(0);
    fe02:	f7f8 f9dd 	bl	81c0 <hal_debugger_connected>
    fe06:	b100      	cbz	r0, fe0a <ble_hs_start+0x56>
    fe08:	be01      	bkpt	0x0001
    fe0a:	2300      	movs	r3, #0
    fe0c:	461a      	mov	r2, r3
    fe0e:	4619      	mov	r1, r3
    fe10:	4618      	mov	r0, r3
    fe12:	f7f9 fddd 	bl	99d0 <__assert_func>
    ble_hs_unlock();
    fe16:	f7ff febb 	bl	fb90 <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
    fe1a:	240f      	movs	r4, #15
    fe1c:	e7d7      	b.n	fdce <ble_hs_start+0x1a>
    fe1e:	bf00      	nop
    fe20:	20007228 	.word	0x20007228
    fe24:	20007340 	.word	0x20007340
    fe28:	0000fced 	.word	0x0000fced
    fe2c:	2000726c 	.word	0x2000726c
    fe30:	20007364 	.word	0x20007364

0000fe34 <ble_hs_event_start_stage2>:
{
    fe34:	b508      	push	{r3, lr}
    rc = ble_hs_start();
    fe36:	f7ff ffbd 	bl	fdb4 <ble_hs_start>
    assert(rc == 0);
    fe3a:	b900      	cbnz	r0, fe3e <ble_hs_event_start_stage2+0xa>
}
    fe3c:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    fe3e:	f7f8 f9bf 	bl	81c0 <hal_debugger_connected>
    fe42:	b100      	cbz	r0, fe46 <ble_hs_event_start_stage2+0x12>
    fe44:	be01      	bkpt	0x0001
    fe46:	2300      	movs	r3, #0
    fe48:	461a      	mov	r2, r3
    fe4a:	4619      	mov	r1, r3
    fe4c:	4618      	mov	r0, r3
    fe4e:	f7f9 fdbf 	bl	99d0 <__assert_func>

0000fe52 <ble_hs_tx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_tx_data(struct os_mbuf *om)
{
    fe52:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send_om(BLE_MONITOR_OPCODE_ACL_TX_PKT, om);
#endif

    return ble_hci_trans_hs_acl_tx(om);
    fe54:	f006 fba2 	bl	1659c <ble_hci_trans_hs_acl_tx>
}
    fe58:	bd08      	pop	{r3, pc}
	...

0000fe5c <ble_hs_init>:

void
ble_hs_init(void)
{
    fe5c:	b510      	push	{r4, lr}
    fe5e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    fe60:	4b73      	ldr	r3, [pc, #460]	; (10030 <ble_hs_init+0x1d4>)
    fe62:	781b      	ldrb	r3, [r3, #0]
    fe64:	2b00      	cmp	r3, #0
    fe66:	d063      	beq.n	ff30 <ble_hs_init+0xd4>

    /* Create memory pool of OS events */
    rc = os_mempool_init(&ble_hs_hci_ev_pool, BLE_HS_HCI_EVT_COUNT,
    fe68:	4b72      	ldr	r3, [pc, #456]	; (10034 <ble_hs_init+0x1d8>)
    fe6a:	9300      	str	r3, [sp, #0]
    fe6c:	4b72      	ldr	r3, [pc, #456]	; (10038 <ble_hs_init+0x1dc>)
    fe6e:	2210      	movs	r2, #16
    fe70:	210a      	movs	r1, #10
    fe72:	4872      	ldr	r0, [pc, #456]	; (1003c <ble_hs_init+0x1e0>)
    fe74:	f7fa fe30 	bl	aad8 <os_mempool_init>
                         sizeof (struct ble_npl_event), ble_hs_hci_os_event_buf,
                         "ble_hs_hci_ev_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
    fe78:	2800      	cmp	r0, #0
    fe7a:	d163      	bne.n	ff44 <ble_hs_init+0xe8>

    /* These get initialized here to allow unit tests to run without a zeroed
     * bss.
     */
    ble_hs_reset_reason = 0;
    fe7c:	2300      	movs	r3, #0
    fe7e:	4a70      	ldr	r2, [pc, #448]	; (10040 <ble_hs_init+0x1e4>)
    fe80:	6013      	str	r3, [r2, #0]
    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
    fe82:	4a70      	ldr	r2, [pc, #448]	; (10044 <ble_hs_init+0x1e8>)
    fe84:	7013      	strb	r3, [r2, #0]
    memset(ev, 0, sizeof(*ev));
    fe86:	4a70      	ldr	r2, [pc, #448]	; (10048 <ble_hs_init+0x1ec>)
    fe88:	6013      	str	r3, [r2, #0]
    fe8a:	6093      	str	r3, [r2, #8]
    fe8c:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    fe8e:	496f      	ldr	r1, [pc, #444]	; (1004c <ble_hs_init+0x1f0>)
    fe90:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
    fe92:	4a6f      	ldr	r2, [pc, #444]	; (10050 <ble_hs_init+0x1f4>)
    fe94:	6013      	str	r3, [r2, #0]
    fe96:	6093      	str	r3, [r2, #8]
    fe98:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    fe9a:	496e      	ldr	r1, [pc, #440]	; (10054 <ble_hs_init+0x1f8>)
    fe9c:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
    fe9e:	4a6e      	ldr	r2, [pc, #440]	; (10058 <ble_hs_init+0x1fc>)
    fea0:	6013      	str	r3, [r2, #0]
    fea2:	6093      	str	r3, [r2, #8]
    fea4:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    fea6:	496d      	ldr	r1, [pc, #436]	; (1005c <ble_hs_init+0x200>)
    fea8:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
    feaa:	4a6d      	ldr	r2, [pc, #436]	; (10060 <ble_hs_init+0x204>)
    feac:	6013      	str	r3, [r2, #0]
    feae:	6093      	str	r3, [r2, #8]
    feb0:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    feb2:	4b6c      	ldr	r3, [pc, #432]	; (10064 <ble_hs_init+0x208>)
    feb4:	6053      	str	r3, [r2, #4]
    ble_npl_event_init(&ble_hs_ev_start_stage1, ble_hs_event_start_stage1,
                       NULL);
    ble_npl_event_init(&ble_hs_ev_start_stage2, ble_hs_event_start_stage2,
                       NULL);

    ble_hs_hci_init();
    feb6:	f000 ff89 	bl	10dcc <ble_hs_hci_init>

    rc = ble_hs_conn_init();
    feba:	f000 fd91 	bl	109e0 <ble_hs_conn_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    febe:	2800      	cmp	r0, #0
    fec0:	d14d      	bne.n	ff5e <ble_hs_init+0x102>
#if MYNEWT_VAL(BLE_PERIODIC_ADV)
    rc = ble_hs_periodic_sync_init();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif

    rc = ble_l2cap_init();
    fec2:	f002 f827 	bl	11f14 <ble_l2cap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fec6:	2800      	cmp	r0, #0
    fec8:	d156      	bne.n	ff78 <ble_hs_init+0x11c>

    rc = ble_att_init();
    feca:	f004 fc9d 	bl	14808 <ble_att_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fece:	2800      	cmp	r0, #0
    fed0:	d15f      	bne.n	ff92 <ble_hs_init+0x136>

    rc = ble_att_svr_init();
    fed2:	f006 f893 	bl	15ffc <ble_att_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fed6:	2800      	cmp	r0, #0
    fed8:	d168      	bne.n	ffac <ble_hs_init+0x150>

    rc = ble_gap_init();
    feda:	f7fd feed 	bl	dcb8 <ble_gap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fede:	2800      	cmp	r0, #0
    fee0:	d171      	bne.n	ffc6 <ble_hs_init+0x16a>

    rc = ble_gattc_init();
    fee2:	f7fe fd9d 	bl	ea20 <ble_gattc_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fee6:	2800      	cmp	r0, #0
    fee8:	d17a      	bne.n	ffe0 <ble_hs_init+0x184>

    rc = ble_gatts_init();
    feea:	f7ff fda9 	bl	fa40 <ble_gatts_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    feee:	2800      	cmp	r0, #0
    fef0:	f040 8083 	bne.w	fffa <ble_hs_init+0x19e>

    ble_hs_stop_init();
    fef4:	f001 fee0 	bl	11cb8 <ble_hs_stop_init>

    ble_mqueue_init(&ble_hs_rx_q, ble_hs_event_rx_data, NULL);
    fef8:	2200      	movs	r2, #0
    fefa:	495b      	ldr	r1, [pc, #364]	; (10068 <ble_hs_init+0x20c>)
    fefc:	485b      	ldr	r0, [pc, #364]	; (1006c <ble_hs_init+0x210>)
    fefe:	f001 fc31 	bl	11764 <ble_mqueue_init>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
    ff02:	485b      	ldr	r0, [pc, #364]	; (10070 <ble_hs_init+0x214>)
    ff04:	f7fa ff26 	bl	ad54 <os_mutex_init>
        STATS_HDR(ble_hs_stats), STATS_SIZE_INIT_PARMS(ble_hs_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_hs_stats), "ble_hs");
    SYSINIT_PANIC_ASSERT(rc == 0);

    rc = ble_npl_mutex_init(&ble_hs_mutex);
    SYSINIT_PANIC_ASSERT(rc == 0);
    ff08:	2800      	cmp	r0, #0
    ff0a:	f040 8083 	bne.w	10014 <ble_hs_init+0x1b8>
#if MYNEWT_VAL(BLE_HS_DEBUG)
    ble_hs_dbg_mutex_locked = 0;
#endif

#ifdef MYNEWT
    ble_hs_evq_set((struct ble_npl_eventq *)os_eventq_dflt_get());
    ff0e:	f7fa f957 	bl	a1c0 <os_eventq_dflt_get>
    ff12:	f7ff fe0f 	bl	fb34 <ble_hs_evq_set>
#else
    ble_hs_evq_set(nimble_port_get_dflt_eventq());
#endif

    /* Configure the HCI transport to communicate with a host. */
    ble_hci_trans_cfg_hs(ble_hs_hci_rx_evt, NULL, ble_hs_rx_data, NULL);
    ff16:	2300      	movs	r3, #0
    ff18:	4a56      	ldr	r2, [pc, #344]	; (10074 <ble_hs_init+0x218>)
    ff1a:	4619      	mov	r1, r3
    ff1c:	4856      	ldr	r0, [pc, #344]	; (10078 <ble_hs_init+0x21c>)
    ff1e:	f006 fae9 	bl	164f4 <ble_hci_trans_cfg_hs>
     * queue ensures the event won't run until the end of main().  This allows
     * the application to configure this package in the meantime.
     */
#if MYNEWT_VAL(BLE_HS_AUTO_START)
#ifdef MYNEWT
    ble_npl_eventq_put((struct ble_npl_eventq *)os_eventq_dflt_get(),
    ff22:	f7fa f94d 	bl	a1c0 <os_eventq_dflt_get>
    os_eventq_put(&evq->evq, &ev->ev);
    ff26:	494c      	ldr	r1, [pc, #304]	; (10058 <ble_hs_init+0x1fc>)
    ff28:	f7fa f89f 	bl	a06a <os_eventq_put>
#endif

#if BLE_MONITOR
    ble_monitor_new_index(0, (uint8_t[6]){ }, "nimble0");
#endif
}
    ff2c:	b002      	add	sp, #8
    ff2e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    ff30:	f7f8 f946 	bl	81c0 <hal_debugger_connected>
    ff34:	b100      	cbz	r0, ff38 <ble_hs_init+0xdc>
    ff36:	be01      	bkpt	0x0001
    ff38:	2300      	movs	r3, #0
    ff3a:	461a      	mov	r2, r3
    ff3c:	4619      	mov	r1, r3
    ff3e:	4618      	mov	r0, r3
    ff40:	f7f9 fd46 	bl	99d0 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ff44:	f7f8 f93c 	bl	81c0 <hal_debugger_connected>
    ff48:	b100      	cbz	r0, ff4c <ble_hs_init+0xf0>
    ff4a:	be01      	bkpt	0x0001
    ff4c:	2000      	movs	r0, #0
    ff4e:	9000      	str	r0, [sp, #0]
    ff50:	4b4a      	ldr	r3, [pc, #296]	; (1007c <ble_hs_init+0x220>)
    ff52:	681c      	ldr	r4, [r3, #0]
    ff54:	4603      	mov	r3, r0
    ff56:	4602      	mov	r2, r0
    ff58:	4601      	mov	r1, r0
    ff5a:	47a0      	blx	r4
    ff5c:	e78e      	b.n	fe7c <ble_hs_init+0x20>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ff5e:	f7f8 f92f 	bl	81c0 <hal_debugger_connected>
    ff62:	b100      	cbz	r0, ff66 <ble_hs_init+0x10a>
    ff64:	be01      	bkpt	0x0001
    ff66:	2000      	movs	r0, #0
    ff68:	9000      	str	r0, [sp, #0]
    ff6a:	4b44      	ldr	r3, [pc, #272]	; (1007c <ble_hs_init+0x220>)
    ff6c:	681c      	ldr	r4, [r3, #0]
    ff6e:	4603      	mov	r3, r0
    ff70:	4602      	mov	r2, r0
    ff72:	4601      	mov	r1, r0
    ff74:	47a0      	blx	r4
    ff76:	e7a4      	b.n	fec2 <ble_hs_init+0x66>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ff78:	f7f8 f922 	bl	81c0 <hal_debugger_connected>
    ff7c:	b100      	cbz	r0, ff80 <ble_hs_init+0x124>
    ff7e:	be01      	bkpt	0x0001
    ff80:	2000      	movs	r0, #0
    ff82:	9000      	str	r0, [sp, #0]
    ff84:	4b3d      	ldr	r3, [pc, #244]	; (1007c <ble_hs_init+0x220>)
    ff86:	681c      	ldr	r4, [r3, #0]
    ff88:	4603      	mov	r3, r0
    ff8a:	4602      	mov	r2, r0
    ff8c:	4601      	mov	r1, r0
    ff8e:	47a0      	blx	r4
    ff90:	e79b      	b.n	feca <ble_hs_init+0x6e>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ff92:	f7f8 f915 	bl	81c0 <hal_debugger_connected>
    ff96:	b100      	cbz	r0, ff9a <ble_hs_init+0x13e>
    ff98:	be01      	bkpt	0x0001
    ff9a:	2000      	movs	r0, #0
    ff9c:	9000      	str	r0, [sp, #0]
    ff9e:	4b37      	ldr	r3, [pc, #220]	; (1007c <ble_hs_init+0x220>)
    ffa0:	681c      	ldr	r4, [r3, #0]
    ffa2:	4603      	mov	r3, r0
    ffa4:	4602      	mov	r2, r0
    ffa6:	4601      	mov	r1, r0
    ffa8:	47a0      	blx	r4
    ffaa:	e792      	b.n	fed2 <ble_hs_init+0x76>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ffac:	f7f8 f908 	bl	81c0 <hal_debugger_connected>
    ffb0:	b100      	cbz	r0, ffb4 <ble_hs_init+0x158>
    ffb2:	be01      	bkpt	0x0001
    ffb4:	2000      	movs	r0, #0
    ffb6:	9000      	str	r0, [sp, #0]
    ffb8:	4b30      	ldr	r3, [pc, #192]	; (1007c <ble_hs_init+0x220>)
    ffba:	681c      	ldr	r4, [r3, #0]
    ffbc:	4603      	mov	r3, r0
    ffbe:	4602      	mov	r2, r0
    ffc0:	4601      	mov	r1, r0
    ffc2:	47a0      	blx	r4
    ffc4:	e789      	b.n	feda <ble_hs_init+0x7e>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ffc6:	f7f8 f8fb 	bl	81c0 <hal_debugger_connected>
    ffca:	b100      	cbz	r0, ffce <ble_hs_init+0x172>
    ffcc:	be01      	bkpt	0x0001
    ffce:	2000      	movs	r0, #0
    ffd0:	9000      	str	r0, [sp, #0]
    ffd2:	4b2a      	ldr	r3, [pc, #168]	; (1007c <ble_hs_init+0x220>)
    ffd4:	681c      	ldr	r4, [r3, #0]
    ffd6:	4603      	mov	r3, r0
    ffd8:	4602      	mov	r2, r0
    ffda:	4601      	mov	r1, r0
    ffdc:	47a0      	blx	r4
    ffde:	e780      	b.n	fee2 <ble_hs_init+0x86>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ffe0:	f7f8 f8ee 	bl	81c0 <hal_debugger_connected>
    ffe4:	b100      	cbz	r0, ffe8 <ble_hs_init+0x18c>
    ffe6:	be01      	bkpt	0x0001
    ffe8:	2000      	movs	r0, #0
    ffea:	9000      	str	r0, [sp, #0]
    ffec:	4b23      	ldr	r3, [pc, #140]	; (1007c <ble_hs_init+0x220>)
    ffee:	681c      	ldr	r4, [r3, #0]
    fff0:	4603      	mov	r3, r0
    fff2:	4602      	mov	r2, r0
    fff4:	4601      	mov	r1, r0
    fff6:	47a0      	blx	r4
    fff8:	e777      	b.n	feea <ble_hs_init+0x8e>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fffa:	f7f8 f8e1 	bl	81c0 <hal_debugger_connected>
    fffe:	b100      	cbz	r0, 10002 <ble_hs_init+0x1a6>
   10000:	be01      	bkpt	0x0001
   10002:	2000      	movs	r0, #0
   10004:	9000      	str	r0, [sp, #0]
   10006:	4b1d      	ldr	r3, [pc, #116]	; (1007c <ble_hs_init+0x220>)
   10008:	681c      	ldr	r4, [r3, #0]
   1000a:	4603      	mov	r3, r0
   1000c:	4602      	mov	r2, r0
   1000e:	4601      	mov	r1, r0
   10010:	47a0      	blx	r4
   10012:	e76f      	b.n	fef4 <ble_hs_init+0x98>
    SYSINIT_PANIC_ASSERT(rc == 0);
   10014:	f7f8 f8d4 	bl	81c0 <hal_debugger_connected>
   10018:	b100      	cbz	r0, 1001c <ble_hs_init+0x1c0>
   1001a:	be01      	bkpt	0x0001
   1001c:	2000      	movs	r0, #0
   1001e:	9000      	str	r0, [sp, #0]
   10020:	4b16      	ldr	r3, [pc, #88]	; (1007c <ble_hs_init+0x220>)
   10022:	681c      	ldr	r4, [r3, #0]
   10024:	4603      	mov	r3, r0
   10026:	4602      	mov	r2, r0
   10028:	4601      	mov	r1, r0
   1002a:	47a0      	blx	r4
   1002c:	e76f      	b.n	ff0e <ble_hs_init+0xb2>
   1002e:	bf00      	nop
   10030:	20000506 	.word	0x20000506
   10034:	00028db0 	.word	0x00028db0
   10038:	2000728c 	.word	0x2000728c
   1003c:	20007270 	.word	0x20007270
   10040:	20007344 	.word	0x20007344
   10044:	20007228 	.word	0x20007228
   10048:	2000725c 	.word	0x2000725c
   1004c:	0000fb05 	.word	0x0000fb05
   10050:	2000722c 	.word	0x2000722c
   10054:	0000fce5 	.word	0x0000fce5
   10058:	2000723c 	.word	0x2000723c
   1005c:	0000fb2d 	.word	0x0000fb2d
   10060:	2000724c 	.word	0x2000724c
   10064:	0000fe35 	.word	0x0000fe35
   10068:	0000fbb5 	.word	0x0000fbb5
   1006c:	20007348 	.word	0x20007348
   10070:	20007334 	.word	0x20007334
   10074:	0000fad5 	.word	0x0000fad5
   10078:	00010cb1 	.word	0x00010cb1
   1007c:	200000ec 	.word	0x200000ec

00010080 <ble_hs_adv_set_hdr>:
static ble_uuid128_t ble_hs_adv_uuids128[BLE_HS_ADV_MAX_FIELD_SZ / 16];

static int
ble_hs_adv_set_hdr(uint8_t type, uint8_t data_len, uint8_t max_len,
                   uint8_t *dst, uint8_t *dst_len, struct os_mbuf *om)
{
   10080:	b530      	push	{r4, r5, lr}
   10082:	b083      	sub	sp, #12
   10084:	9d06      	ldr	r5, [sp, #24]
   10086:	9c07      	ldr	r4, [sp, #28]
   10088:	f88d 0007 	strb.w	r0, [sp, #7]
   1008c:	f88d 1006 	strb.w	r1, [sp, #6]
    int rc;

    if (om ) {
   10090:	b1ac      	cbz	r4, 100be <ble_hs_adv_set_hdr+0x3e>
        data_len++;
   10092:	b2cb      	uxtb	r3, r1
   10094:	3301      	adds	r3, #1
   10096:	a902      	add	r1, sp, #8
   10098:	f801 3d02 	strb.w	r3, [r1, #-2]!
        rc = os_mbuf_append(om, &data_len, sizeof(data_len));
   1009c:	2201      	movs	r2, #1
   1009e:	4620      	mov	r0, r4
   100a0:	f7fa f922 	bl	a2e8 <os_mbuf_append>
        if (rc) {
   100a4:	4603      	mov	r3, r0
   100a6:	b110      	cbz	r0, 100ae <ble_hs_adv_set_hdr+0x2e>
    dst[*dst_len + 1] = type;

    *dst_len += 2;

    return 0;
}
   100a8:	4618      	mov	r0, r3
   100aa:	b003      	add	sp, #12
   100ac:	bd30      	pop	{r4, r5, pc}
        return os_mbuf_append(om, &type, sizeof(type));
   100ae:	2201      	movs	r2, #1
   100b0:	f10d 0107 	add.w	r1, sp, #7
   100b4:	4620      	mov	r0, r4
   100b6:	f7fa f917 	bl	a2e8 <os_mbuf_append>
   100ba:	4603      	mov	r3, r0
   100bc:	e7f4      	b.n	100a8 <ble_hs_adv_set_hdr+0x28>
    if (*dst_len + 2 + data_len > max_len) {
   100be:	782c      	ldrb	r4, [r5, #0]
   100c0:	1ca0      	adds	r0, r4, #2
   100c2:	f89d 1006 	ldrb.w	r1, [sp, #6]
   100c6:	4408      	add	r0, r1
   100c8:	4290      	cmp	r0, r2
   100ca:	dc0b      	bgt.n	100e4 <ble_hs_adv_set_hdr+0x64>
    dst[*dst_len] = data_len + 1;
   100cc:	3101      	adds	r1, #1
   100ce:	5519      	strb	r1, [r3, r4]
    dst[*dst_len + 1] = type;
   100d0:	782a      	ldrb	r2, [r5, #0]
   100d2:	3201      	adds	r2, #1
   100d4:	f89d 1007 	ldrb.w	r1, [sp, #7]
   100d8:	5499      	strb	r1, [r3, r2]
    *dst_len += 2;
   100da:	782b      	ldrb	r3, [r5, #0]
   100dc:	3302      	adds	r3, #2
   100de:	702b      	strb	r3, [r5, #0]
    return 0;
   100e0:	2300      	movs	r3, #0
   100e2:	e7e1      	b.n	100a8 <ble_hs_adv_set_hdr+0x28>
        return BLE_HS_EMSGSIZE;
   100e4:	2304      	movs	r3, #4
   100e6:	e7df      	b.n	100a8 <ble_hs_adv_set_hdr+0x28>

000100e8 <ble_hs_adv_set_flat_mbuf>:

static int
ble_hs_adv_set_flat_mbuf(uint8_t type, int data_len, const void *data,
                         uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                         struct os_mbuf *om)
{
   100e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   100ec:	b082      	sub	sp, #8
   100ee:	460f      	mov	r7, r1
   100f0:	4691      	mov	r9, r2
   100f2:	469a      	mov	sl, r3
   100f4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   100f6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int rc;

    BLE_HS_DBG_ASSERT(data_len > 0);

    rc = ble_hs_adv_set_hdr(type, data_len, max_len, dst, dst_len, om);
   100f8:	b2ce      	uxtb	r6, r1
   100fa:	9401      	str	r4, [sp, #4]
   100fc:	9500      	str	r5, [sp, #0]
   100fe:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   10102:	4631      	mov	r1, r6
   10104:	f7ff ffbc 	bl	10080 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   10108:	4680      	mov	r8, r0
   1010a:	b930      	cbnz	r0, 1011a <ble_hs_adv_set_flat_mbuf+0x32>
        return rc;
    }

    if (om) {
   1010c:	b14c      	cbz	r4, 10122 <ble_hs_adv_set_flat_mbuf+0x3a>
        return os_mbuf_append(om, data, data_len);
   1010e:	b2ba      	uxth	r2, r7
   10110:	4649      	mov	r1, r9
   10112:	4620      	mov	r0, r4
   10114:	f7fa f8e8 	bl	a2e8 <os_mbuf_append>
   10118:	4680      	mov	r8, r0

    memcpy(dst + *dst_len, data, data_len);
    *dst_len += data_len;

    return 0;
}
   1011a:	4640      	mov	r0, r8
   1011c:	b002      	add	sp, #8
   1011e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(dst + *dst_len, data, data_len);
   10122:	7828      	ldrb	r0, [r5, #0]
   10124:	463a      	mov	r2, r7
   10126:	4649      	mov	r1, r9
   10128:	4450      	add	r0, sl
   1012a:	f7fb fbb1 	bl	b890 <memcpy>
    *dst_len += data_len;
   1012e:	782b      	ldrb	r3, [r5, #0]
   10130:	441e      	add	r6, r3
   10132:	702e      	strb	r6, [r5, #0]
    return 0;
   10134:	e7f1      	b.n	1011a <ble_hs_adv_set_flat_mbuf+0x32>

00010136 <ble_hs_adv_set_array_uuid16>:
static int
ble_hs_adv_set_array_uuid16(uint8_t type, uint8_t num_elems,
                            const ble_uuid16_t *elems, uint8_t *dst,
                            uint8_t *dst_len, uint8_t max_len,
                            struct os_mbuf *om)
{
   10136:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1013a:	b082      	sub	sp, #8
   1013c:	460e      	mov	r6, r1
   1013e:	4690      	mov	r8, r2
   10140:	469a      	mov	sl, r3
   10142:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10144:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * 2, max_len, dst,
   10146:	0049      	lsls	r1, r1, #1
   10148:	9501      	str	r5, [sp, #4]
   1014a:	9700      	str	r7, [sp, #0]
   1014c:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   10150:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   10154:	f7ff ff94 	bl	10080 <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   10158:	4681      	mov	r9, r0
   1015a:	b9b8      	cbnz	r0, 1018c <ble_hs_adv_set_array_uuid16+0x56>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   1015c:	4604      	mov	r4, r0
   1015e:	e009      	b.n	10174 <ble_hs_adv_set_array_uuid16+0x3e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
            if (rc) {
                return rc;
            }
        } else {
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   10160:	7839      	ldrb	r1, [r7, #0]
   10162:	4451      	add	r1, sl
   10164:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   10168:	f004 fa4c 	bl	14604 <ble_uuid_flat>
            *dst_len += 2;
   1016c:	783b      	ldrb	r3, [r7, #0]
   1016e:	3302      	adds	r3, #2
   10170:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   10172:	3401      	adds	r4, #1
   10174:	42a6      	cmp	r6, r4
   10176:	dd09      	ble.n	1018c <ble_hs_adv_set_array_uuid16+0x56>
        if (om) {
   10178:	2d00      	cmp	r5, #0
   1017a:	d0f1      	beq.n	10160 <ble_hs_adv_set_array_uuid16+0x2a>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   1017c:	4629      	mov	r1, r5
   1017e:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   10182:	f004 fa6e 	bl	14662 <ble_uuid_to_mbuf>
            if (rc) {
   10186:	2800      	cmp	r0, #0
   10188:	d0f3      	beq.n	10172 <ble_hs_adv_set_array_uuid16+0x3c>
                return rc;
   1018a:	4681      	mov	r9, r0
        }
    }

    return 0;
}
   1018c:	4648      	mov	r0, r9
   1018e:	b002      	add	sp, #8
   10190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00010194 <ble_hs_adv_set_array_uuid128>:
static int
ble_hs_adv_set_array_uuid128(uint8_t type, uint8_t num_elems,
                             const ble_uuid128_t *elems, uint8_t *dst,
                             uint8_t *dst_len, uint8_t max_len,
                             struct os_mbuf *om)
{
   10194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10198:	b082      	sub	sp, #8
   1019a:	460e      	mov	r6, r1
   1019c:	4690      	mov	r8, r2
   1019e:	469a      	mov	sl, r3
   101a0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   101a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * 16, max_len, dst,
   101a4:	0109      	lsls	r1, r1, #4
   101a6:	9501      	str	r5, [sp, #4]
   101a8:	9700      	str	r7, [sp, #0]
   101aa:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   101ae:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   101b2:	f7ff ff65 	bl	10080 <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   101b6:	4681      	mov	r9, r0
   101b8:	b9c8      	cbnz	r0, 101ee <ble_hs_adv_set_array_uuid128+0x5a>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   101ba:	4604      	mov	r4, r0
   101bc:	e00a      	b.n	101d4 <ble_hs_adv_set_array_uuid128+0x40>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
            if (rc) {
                return rc;
            }
        } else {
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   101be:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   101c2:	7839      	ldrb	r1, [r7, #0]
   101c4:	4451      	add	r1, sl
   101c6:	4440      	add	r0, r8
   101c8:	f004 fa1c 	bl	14604 <ble_uuid_flat>
            *dst_len += 16;
   101cc:	783b      	ldrb	r3, [r7, #0]
   101ce:	3310      	adds	r3, #16
   101d0:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   101d2:	3401      	adds	r4, #1
   101d4:	42a6      	cmp	r6, r4
   101d6:	dd0a      	ble.n	101ee <ble_hs_adv_set_array_uuid128+0x5a>
        if (om) {
   101d8:	2d00      	cmp	r5, #0
   101da:	d0f0      	beq.n	101be <ble_hs_adv_set_array_uuid128+0x2a>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   101dc:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   101e0:	4629      	mov	r1, r5
   101e2:	4440      	add	r0, r8
   101e4:	f004 fa3d 	bl	14662 <ble_uuid_to_mbuf>
            if (rc) {
   101e8:	2800      	cmp	r0, #0
   101ea:	d0f2      	beq.n	101d2 <ble_hs_adv_set_array_uuid128+0x3e>
                return rc;
   101ec:	4681      	mov	r9, r0
        }
    }

    return 0;
}
   101ee:	4648      	mov	r0, r9
   101f0:	b002      	add	sp, #8
   101f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000101f6 <ble_hs_adv_set_array_uuid32>:
{
   101f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   101fa:	b084      	sub	sp, #16
   101fc:	460e      	mov	r6, r1
   101fe:	4690      	mov	r8, r2
   10200:	469a      	mov	sl, r3
   10202:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   10204:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * 4, max_len, dst,
   10206:	0089      	lsls	r1, r1, #2
   10208:	9501      	str	r5, [sp, #4]
   1020a:	9700      	str	r7, [sp, #0]
   1020c:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   10210:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   10214:	f7ff ff34 	bl	10080 <ble_hs_adv_set_hdr>
    if (rc != 0) {
   10218:	4681      	mov	r9, r0
   1021a:	b9e8      	cbnz	r0, 10258 <ble_hs_adv_set_array_uuid32+0x62>
    for (i = 0; i < num_elems; i++) {
   1021c:	4604      	mov	r4, r0
   1021e:	e00a      	b.n	10236 <ble_hs_adv_set_array_uuid32+0x40>
            put_le32(dst + *dst_len, elems[i].value);
   10220:	7838      	ldrb	r0, [r7, #0]
   10222:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   10226:	6859      	ldr	r1, [r3, #4]
   10228:	4450      	add	r0, sl
   1022a:	f00b fce3 	bl	1bbf4 <put_le32>
            *dst_len += 4;
   1022e:	783b      	ldrb	r3, [r7, #0]
   10230:	3304      	adds	r3, #4
   10232:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   10234:	3401      	adds	r4, #1
   10236:	42a6      	cmp	r6, r4
   10238:	dd0e      	ble.n	10258 <ble_hs_adv_set_array_uuid32+0x62>
        if (om) {
   1023a:	2d00      	cmp	r5, #0
   1023c:	d0f0      	beq.n	10220 <ble_hs_adv_set_array_uuid32+0x2a>
            uuid_le = htole32(elems[i].value);
   1023e:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   10242:	685b      	ldr	r3, [r3, #4]
   10244:	a904      	add	r1, sp, #16
   10246:	f841 3d04 	str.w	r3, [r1, #-4]!
            rc = os_mbuf_append(om, &uuid_le, sizeof(uuid_le));
   1024a:	2204      	movs	r2, #4
   1024c:	4628      	mov	r0, r5
   1024e:	f7fa f84b 	bl	a2e8 <os_mbuf_append>
            if (rc) {
   10252:	2800      	cmp	r0, #0
   10254:	d0ee      	beq.n	10234 <ble_hs_adv_set_array_uuid32+0x3e>
                return rc;
   10256:	4681      	mov	r9, r0
}
   10258:	4648      	mov	r0, r9
   1025a:	b004      	add	sp, #16
   1025c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00010260 <ble_hs_adv_set_array16>:

static int
ble_hs_adv_set_array16(uint8_t type, uint8_t num_elems, const uint16_t *elems,
                       uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                       struct os_mbuf *om)
{
   10260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10264:	b084      	sub	sp, #16
   10266:	460e      	mov	r6, r1
   10268:	4690      	mov	r8, r2
   1026a:	469a      	mov	sl, r3
   1026c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1026e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    uint16_t tmp;
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * sizeof *elems, max_len, dst,
   10270:	0049      	lsls	r1, r1, #1
   10272:	9501      	str	r5, [sp, #4]
   10274:	9700      	str	r7, [sp, #0]
   10276:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1027a:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   1027e:	f7ff feff 	bl	10080 <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   10282:	4681      	mov	r9, r0
   10284:	b9d8      	cbnz	r0, 102be <ble_hs_adv_set_array16+0x5e>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   10286:	4604      	mov	r4, r0
   10288:	e009      	b.n	1029e <ble_hs_adv_set_array16+0x3e>
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
            if (rc) {
                return rc;
            }
        } else {
            put_le16(dst + *dst_len, elems[i]);
   1028a:	7838      	ldrb	r0, [r7, #0]
   1028c:	f838 1014 	ldrh.w	r1, [r8, r4, lsl #1]
   10290:	4450      	add	r0, sl
   10292:	f00b fcab 	bl	1bbec <put_le16>
            *dst_len += sizeof elems[i];
   10296:	783b      	ldrb	r3, [r7, #0]
   10298:	3302      	adds	r3, #2
   1029a:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   1029c:	3401      	adds	r4, #1
   1029e:	42a6      	cmp	r6, r4
   102a0:	dd0d      	ble.n	102be <ble_hs_adv_set_array16+0x5e>
        if (om) {
   102a2:	2d00      	cmp	r5, #0
   102a4:	d0f1      	beq.n	1028a <ble_hs_adv_set_array16+0x2a>
            tmp = htole16(elems[i]);
   102a6:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
   102aa:	a904      	add	r1, sp, #16
   102ac:	f821 3d02 	strh.w	r3, [r1, #-2]!
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
   102b0:	2202      	movs	r2, #2
   102b2:	4628      	mov	r0, r5
   102b4:	f7fa f818 	bl	a2e8 <os_mbuf_append>
            if (rc) {
   102b8:	2800      	cmp	r0, #0
   102ba:	d0ef      	beq.n	1029c <ble_hs_adv_set_array16+0x3c>
                return rc;
   102bc:	4681      	mov	r9, r0
        }
    }

    return 0;
}
   102be:	4648      	mov	r0, r9
   102c0:	b004      	add	sp, #16
   102c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000102c6 <adv_set_fields>:

static int
adv_set_fields(const struct ble_hs_adv_fields *adv_fields,
                      uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                      struct os_mbuf *om)
{
   102c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102ca:	b086      	sub	sp, #24
   102cc:	4604      	mov	r4, r0
   102ce:	460d      	mov	r5, r1
   102d0:	4690      	mov	r8, r2
   102d2:	461e      	mov	r6, r3
   102d4:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    uint8_t type;
    int8_t tx_pwr_lvl;
    uint8_t dst_len_local;
    int rc;

    dst_len_local = 0;
   102d6:	2300      	movs	r3, #0
   102d8:	f88d 3016 	strb.w	r3, [sp, #22]
     * 2. Explicitly specify the value (flags != 0).
     *
     * Note: The CSS prohibits advertising a flags value of 0, so this method
     * of specifying option 1 vs. 2 is sound.
     */
    if (adv_fields->flags != 0) {
   102dc:	7803      	ldrb	r3, [r0, #0]
   102de:	2b00      	cmp	r3, #0
   102e0:	f040 80be 	bne.w	10460 <adv_set_fields+0x19a>
            return rc;
        }
    }

    /*** 0x02,0x03 - 16-bit service class UUIDs. */
    if (adv_fields->uuids16 != NULL && adv_fields->num_uuids16) {
   102e4:	6862      	ldr	r2, [r4, #4]
   102e6:	b19a      	cbz	r2, 10310 <adv_set_fields+0x4a>
   102e8:	7a21      	ldrb	r1, [r4, #8]
   102ea:	b189      	cbz	r1, 10310 <adv_set_fields+0x4a>
        if (adv_fields->uuids16_is_complete) {
   102ec:	7a63      	ldrb	r3, [r4, #9]
   102ee:	f013 0f01 	tst.w	r3, #1
   102f2:	f000 80c8 	beq.w	10486 <adv_set_fields+0x1c0>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS16;
   102f6:	2003      	movs	r0, #3
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
        }

        rc = ble_hs_adv_set_array_uuid16(type, adv_fields->num_uuids16,
   102f8:	9702      	str	r7, [sp, #8]
   102fa:	9601      	str	r6, [sp, #4]
   102fc:	f10d 0316 	add.w	r3, sp, #22
   10300:	9300      	str	r3, [sp, #0]
   10302:	462b      	mov	r3, r5
   10304:	f7ff ff17 	bl	10136 <ble_hs_adv_set_array_uuid16>
                                         adv_fields->uuids16, dst, &dst_len_local,
                                         max_len, om);
        if (rc != 0) {
   10308:	4603      	mov	r3, r0
   1030a:	2800      	cmp	r0, #0
   1030c:	f040 80b7 	bne.w	1047e <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x04,0x05 - 32-bit service class UUIDs. */
    if (adv_fields->uuids32 != NULL && adv_fields->num_uuids32) {
   10310:	68e2      	ldr	r2, [r4, #12]
   10312:	b19a      	cbz	r2, 1033c <adv_set_fields+0x76>
   10314:	7c21      	ldrb	r1, [r4, #16]
   10316:	b189      	cbz	r1, 1033c <adv_set_fields+0x76>
        if (adv_fields->uuids32_is_complete) {
   10318:	7c63      	ldrb	r3, [r4, #17]
   1031a:	f013 0f01 	tst.w	r3, #1
   1031e:	f000 80b4 	beq.w	1048a <adv_set_fields+0x1c4>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS32;
   10322:	2005      	movs	r0, #5
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
        }

        rc = ble_hs_adv_set_array_uuid32(type, adv_fields->num_uuids32,
   10324:	9702      	str	r7, [sp, #8]
   10326:	9601      	str	r6, [sp, #4]
   10328:	f10d 0316 	add.w	r3, sp, #22
   1032c:	9300      	str	r3, [sp, #0]
   1032e:	462b      	mov	r3, r5
   10330:	f7ff ff61 	bl	101f6 <ble_hs_adv_set_array_uuid32>
                                         adv_fields->uuids32, dst, &dst_len_local,
                                         max_len, om);
        if (rc != 0) {
   10334:	4603      	mov	r3, r0
   10336:	2800      	cmp	r0, #0
   10338:	f040 80a1 	bne.w	1047e <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x06,0x07 - 128-bit service class UUIDs. */
    if (adv_fields->uuids128 != NULL && adv_fields->num_uuids128 > 0) {
   1033c:	6962      	ldr	r2, [r4, #20]
   1033e:	b19a      	cbz	r2, 10368 <adv_set_fields+0xa2>
   10340:	7e21      	ldrb	r1, [r4, #24]
   10342:	b189      	cbz	r1, 10368 <adv_set_fields+0xa2>
        if (adv_fields->uuids128_is_complete) {
   10344:	7e63      	ldrb	r3, [r4, #25]
   10346:	f013 0f01 	tst.w	r3, #1
   1034a:	f000 80a0 	beq.w	1048e <adv_set_fields+0x1c8>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS128;
   1034e:	2007      	movs	r0, #7
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
        }

        rc = ble_hs_adv_set_array_uuid128(type, adv_fields->num_uuids128,
   10350:	9702      	str	r7, [sp, #8]
   10352:	9601      	str	r6, [sp, #4]
   10354:	f10d 0316 	add.w	r3, sp, #22
   10358:	9300      	str	r3, [sp, #0]
   1035a:	462b      	mov	r3, r5
   1035c:	f7ff ff1a 	bl	10194 <ble_hs_adv_set_array_uuid128>
                                          adv_fields->uuids128, dst, &dst_len_local,
                                          max_len, om);
        if (rc != 0) {
   10360:	4603      	mov	r3, r0
   10362:	2800      	cmp	r0, #0
   10364:	f040 808b 	bne.w	1047e <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x08,0x09 - Local name. */
    if (adv_fields->name != NULL && adv_fields->name_len > 0) {
   10368:	69e2      	ldr	r2, [r4, #28]
   1036a:	b1a2      	cbz	r2, 10396 <adv_set_fields+0xd0>
   1036c:	f894 1020 	ldrb.w	r1, [r4, #32]
   10370:	b189      	cbz	r1, 10396 <adv_set_fields+0xd0>
        if (adv_fields->name_is_complete) {
   10372:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   10376:	f013 0f01 	tst.w	r3, #1
   1037a:	f000 808a 	beq.w	10492 <adv_set_fields+0x1cc>
            type = BLE_HS_ADV_TYPE_COMP_NAME;
   1037e:	2009      	movs	r0, #9
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
        }

        rc = ble_hs_adv_set_flat_mbuf(type, adv_fields->name_len,
   10380:	9702      	str	r7, [sp, #8]
   10382:	9601      	str	r6, [sp, #4]
   10384:	f10d 0316 	add.w	r3, sp, #22
   10388:	9300      	str	r3, [sp, #0]
   1038a:	462b      	mov	r3, r5
   1038c:	f7ff feac 	bl	100e8 <ble_hs_adv_set_flat_mbuf>
                                      adv_fields->name, dst, &dst_len_local, max_len,
                                      om);
        if (rc != 0) {
   10390:	4603      	mov	r3, r0
   10392:	2800      	cmp	r0, #0
   10394:	d173      	bne.n	1047e <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x0a - Tx power level. */
    if (adv_fields->tx_pwr_lvl_is_present) {
   10396:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   1039a:	f013 0f01 	tst.w	r3, #1
   1039e:	d015      	beq.n	103cc <adv_set_fields+0x106>
        /* Read the power level from the controller if requested; otherwise use
         * the explicitly specified value.
         */
        if (adv_fields->tx_pwr_lvl == BLE_HS_ADV_TX_PWR_LVL_AUTO) {
   103a0:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
   103a4:	f113 0f80 	cmn.w	r3, #128	; 0x80
   103a8:	d075      	beq.n	10496 <adv_set_fields+0x1d0>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
            if (rc != 0) {
                return rc;
            }
        } else {
            tx_pwr_lvl = adv_fields->tx_pwr_lvl;
   103aa:	f88d 3017 	strb.w	r3, [sp, #23]
        }

        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_TX_PWR_LVL, 1,
   103ae:	9702      	str	r7, [sp, #8]
   103b0:	9601      	str	r6, [sp, #4]
   103b2:	f10d 0316 	add.w	r3, sp, #22
   103b6:	9300      	str	r3, [sp, #0]
   103b8:	462b      	mov	r3, r5
   103ba:	f10d 0217 	add.w	r2, sp, #23
   103be:	2101      	movs	r1, #1
   103c0:	200a      	movs	r0, #10
   103c2:	f7ff fe91 	bl	100e8 <ble_hs_adv_set_flat_mbuf>
                                      &tx_pwr_lvl, dst, &dst_len_local, max_len, om);
        if (rc != 0) {
   103c6:	4603      	mov	r3, r0
   103c8:	2800      	cmp	r0, #0
   103ca:	d158      	bne.n	1047e <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x12 - Slave connection interval range. */
    if (adv_fields->slave_itvl_range != NULL) {
   103cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   103ce:	b162      	cbz	r2, 103ea <adv_set_fields+0x124>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SLAVE_ITVL_RANGE,
   103d0:	9702      	str	r7, [sp, #8]
   103d2:	9601      	str	r6, [sp, #4]
   103d4:	f10d 0316 	add.w	r3, sp, #22
   103d8:	9300      	str	r3, [sp, #0]
   103da:	462b      	mov	r3, r5
   103dc:	2104      	movs	r1, #4
   103de:	2012      	movs	r0, #18
   103e0:	f7ff fe82 	bl	100e8 <ble_hs_adv_set_flat_mbuf>
                                      BLE_HS_ADV_SLAVE_ITVL_RANGE_LEN,
                                      adv_fields->slave_itvl_range, dst,
                                      &dst_len_local, max_len, om);
        if (rc != 0) {
   103e4:	4603      	mov	r3, r0
   103e6:	2800      	cmp	r0, #0
   103e8:	d149      	bne.n	1047e <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x16 - Service data - 16-bit UUID. */
    if (adv_fields->svc_data_uuid16 != NULL && adv_fields->svc_data_uuid16_len) {
   103ea:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   103ec:	b11a      	cbz	r2, 103f6 <adv_set_fields+0x130>
   103ee:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   103f2:	2900      	cmp	r1, #0
   103f4:	d157      	bne.n	104a6 <adv_set_fields+0x1e0>
            return rc;
        }
    }

    /*** 0x17 - Public target address. */
    if (adv_fields->public_tgt_addr != NULL &&
   103f6:	6b22      	ldr	r2, [r4, #48]	; 0x30
   103f8:	b11a      	cbz	r2, 10402 <adv_set_fields+0x13c>
        adv_fields->num_public_tgt_addrs != 0) {
   103fa:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    if (adv_fields->public_tgt_addr != NULL &&
   103fe:	2b00      	cmp	r3, #0
   10400:	d15e      	bne.n	104c0 <adv_set_fields+0x1fa>
            return rc;
        }
    }

    /*** 0x19 - Appearance. */
    if (adv_fields->appearance_is_present) {
   10402:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   10406:	f013 0f01 	tst.w	r3, #1
   1040a:	d169      	bne.n	104e0 <adv_set_fields+0x21a>
            return rc;
        }
    }

    /*** 0x1a - Advertising interval. */
    if (adv_fields->adv_itvl_is_present) {
   1040c:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   10410:	f013 0f01 	tst.w	r3, #1
   10414:	d174      	bne.n	10500 <adv_set_fields+0x23a>
            return rc;
        }
    }

    /*** 0x20 - Service data - 32-bit UUID. */
    if (adv_fields->svc_data_uuid32 != NULL && adv_fields->svc_data_uuid32_len) {
   10416:	6c22      	ldr	r2, [r4, #64]	; 0x40
   10418:	b11a      	cbz	r2, 10422 <adv_set_fields+0x15c>
   1041a:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   1041e:	2900      	cmp	r1, #0
   10420:	d17f      	bne.n	10522 <adv_set_fields+0x25c>
            return rc;
        }
    }

    /*** 0x21 - Service data - 128-bit UUID. */
    if (adv_fields->svc_data_uuid128 != NULL && adv_fields->svc_data_uuid128_len) {
   10422:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   10424:	b122      	cbz	r2, 10430 <adv_set_fields+0x16a>
   10426:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   1042a:	2900      	cmp	r1, #0
   1042c:	f040 8087 	bne.w	1053e <adv_set_fields+0x278>
            return rc;
        }
    }

    /*** 0x24 - URI. */
    if (adv_fields->uri != NULL && adv_fields->uri_len) {
   10430:	6d22      	ldr	r2, [r4, #80]	; 0x50
   10432:	b122      	cbz	r2, 1043e <adv_set_fields+0x178>
   10434:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   10438:	2900      	cmp	r1, #0
   1043a:	f040 808e 	bne.w	1055a <adv_set_fields+0x294>
            return rc;
        }
    }

    /*** 0xff - Manufacturer specific data. */
    if ((adv_fields->mfg_data != NULL) && (adv_fields->mfg_data_len >= 2)) {
   1043e:	6da2      	ldr	r2, [r4, #88]	; 0x58
   10440:	b122      	cbz	r2, 1044c <adv_set_fields+0x186>
   10442:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
   10446:	2901      	cmp	r1, #1
   10448:	f200 8095 	bhi.w	10576 <adv_set_fields+0x2b0>
        if (rc != 0) {
            return rc;
        }
    }

    if (dst_len) {
   1044c:	f1b8 0f00 	cmp.w	r8, #0
   10450:	f000 809f 	beq.w	10592 <adv_set_fields+0x2cc>
        *dst_len = dst_len_local;
   10454:	f89d 3016 	ldrb.w	r3, [sp, #22]
   10458:	f888 3000 	strb.w	r3, [r8]
    }

    return 0;
   1045c:	2300      	movs	r3, #0
   1045e:	e00e      	b.n	1047e <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_FLAGS, 1,
   10460:	9702      	str	r7, [sp, #8]
   10462:	9601      	str	r6, [sp, #4]
   10464:	f10d 0316 	add.w	r3, sp, #22
   10468:	9300      	str	r3, [sp, #0]
   1046a:	460b      	mov	r3, r1
   1046c:	4602      	mov	r2, r0
   1046e:	2101      	movs	r1, #1
   10470:	4608      	mov	r0, r1
   10472:	f7ff fe39 	bl	100e8 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   10476:	4603      	mov	r3, r0
   10478:	2800      	cmp	r0, #0
   1047a:	f43f af33 	beq.w	102e4 <adv_set_fields+0x1e>
}
   1047e:	4618      	mov	r0, r3
   10480:	b006      	add	sp, #24
   10482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
   10486:	2002      	movs	r0, #2
   10488:	e736      	b.n	102f8 <adv_set_fields+0x32>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
   1048a:	2004      	movs	r0, #4
   1048c:	e74a      	b.n	10324 <adv_set_fields+0x5e>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
   1048e:	2006      	movs	r0, #6
   10490:	e75e      	b.n	10350 <adv_set_fields+0x8a>
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
   10492:	2008      	movs	r0, #8
   10494:	e774      	b.n	10380 <adv_set_fields+0xba>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
   10496:	f10d 0017 	add.w	r0, sp, #23
   1049a:	f000 ff58 	bl	1134e <ble_hs_hci_util_read_adv_tx_pwr>
            if (rc != 0) {
   1049e:	4603      	mov	r3, r0
   104a0:	2800      	cmp	r0, #0
   104a2:	d084      	beq.n	103ae <adv_set_fields+0xe8>
   104a4:	e7eb      	b.n	1047e <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID16,
   104a6:	9702      	str	r7, [sp, #8]
   104a8:	9601      	str	r6, [sp, #4]
   104aa:	f10d 0316 	add.w	r3, sp, #22
   104ae:	9300      	str	r3, [sp, #0]
   104b0:	462b      	mov	r3, r5
   104b2:	2016      	movs	r0, #22
   104b4:	f7ff fe18 	bl	100e8 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   104b8:	4603      	mov	r3, r0
   104ba:	2800      	cmp	r0, #0
   104bc:	d09b      	beq.n	103f6 <adv_set_fields+0x130>
   104be:	e7de      	b.n	1047e <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_PUBLIC_TGT_ADDR,
   104c0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   104c4:	0059      	lsls	r1, r3, #1
   104c6:	9702      	str	r7, [sp, #8]
   104c8:	9601      	str	r6, [sp, #4]
   104ca:	f10d 0316 	add.w	r3, sp, #22
   104ce:	9300      	str	r3, [sp, #0]
   104d0:	462b      	mov	r3, r5
   104d2:	2017      	movs	r0, #23
   104d4:	f7ff fe08 	bl	100e8 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   104d8:	4603      	mov	r3, r0
   104da:	2800      	cmp	r0, #0
   104dc:	d091      	beq.n	10402 <adv_set_fields+0x13c>
   104de:	e7ce      	b.n	1047e <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_APPEARANCE,
   104e0:	9702      	str	r7, [sp, #8]
   104e2:	9601      	str	r6, [sp, #4]
   104e4:	f10d 0316 	add.w	r3, sp, #22
   104e8:	9300      	str	r3, [sp, #0]
   104ea:	462b      	mov	r3, r5
   104ec:	f104 0236 	add.w	r2, r4, #54	; 0x36
   104f0:	2102      	movs	r1, #2
   104f2:	2019      	movs	r0, #25
   104f4:	f7ff fdf8 	bl	100e8 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   104f8:	4603      	mov	r3, r0
   104fa:	2800      	cmp	r0, #0
   104fc:	d086      	beq.n	1040c <adv_set_fields+0x146>
   104fe:	e7be      	b.n	1047e <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_array16(BLE_HS_ADV_TYPE_ADV_ITVL, 1,
   10500:	9702      	str	r7, [sp, #8]
   10502:	9601      	str	r6, [sp, #4]
   10504:	f10d 0316 	add.w	r3, sp, #22
   10508:	9300      	str	r3, [sp, #0]
   1050a:	462b      	mov	r3, r5
   1050c:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   10510:	2101      	movs	r1, #1
   10512:	201a      	movs	r0, #26
   10514:	f7ff fea4 	bl	10260 <ble_hs_adv_set_array16>
        if (rc != 0) {
   10518:	4603      	mov	r3, r0
   1051a:	2800      	cmp	r0, #0
   1051c:	f43f af7b 	beq.w	10416 <adv_set_fields+0x150>
   10520:	e7ad      	b.n	1047e <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID32,
   10522:	9702      	str	r7, [sp, #8]
   10524:	9601      	str	r6, [sp, #4]
   10526:	f10d 0316 	add.w	r3, sp, #22
   1052a:	9300      	str	r3, [sp, #0]
   1052c:	462b      	mov	r3, r5
   1052e:	2020      	movs	r0, #32
   10530:	f7ff fdda 	bl	100e8 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   10534:	4603      	mov	r3, r0
   10536:	2800      	cmp	r0, #0
   10538:	f43f af73 	beq.w	10422 <adv_set_fields+0x15c>
   1053c:	e79f      	b.n	1047e <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID128,
   1053e:	9702      	str	r7, [sp, #8]
   10540:	9601      	str	r6, [sp, #4]
   10542:	f10d 0316 	add.w	r3, sp, #22
   10546:	9300      	str	r3, [sp, #0]
   10548:	462b      	mov	r3, r5
   1054a:	2021      	movs	r0, #33	; 0x21
   1054c:	f7ff fdcc 	bl	100e8 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   10550:	4603      	mov	r3, r0
   10552:	2800      	cmp	r0, #0
   10554:	f43f af6c 	beq.w	10430 <adv_set_fields+0x16a>
   10558:	e791      	b.n	1047e <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_URI, adv_fields->uri_len,
   1055a:	9702      	str	r7, [sp, #8]
   1055c:	9601      	str	r6, [sp, #4]
   1055e:	f10d 0316 	add.w	r3, sp, #22
   10562:	9300      	str	r3, [sp, #0]
   10564:	462b      	mov	r3, r5
   10566:	2024      	movs	r0, #36	; 0x24
   10568:	f7ff fdbe 	bl	100e8 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1056c:	4603      	mov	r3, r0
   1056e:	2800      	cmp	r0, #0
   10570:	f43f af65 	beq.w	1043e <adv_set_fields+0x178>
   10574:	e783      	b.n	1047e <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_MFG_DATA,
   10576:	9702      	str	r7, [sp, #8]
   10578:	9601      	str	r6, [sp, #4]
   1057a:	f10d 0316 	add.w	r3, sp, #22
   1057e:	9300      	str	r3, [sp, #0]
   10580:	462b      	mov	r3, r5
   10582:	20ff      	movs	r0, #255	; 0xff
   10584:	f7ff fdb0 	bl	100e8 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   10588:	4603      	mov	r3, r0
   1058a:	2800      	cmp	r0, #0
   1058c:	f43f af5e 	beq.w	1044c <adv_set_fields+0x186>
   10590:	e775      	b.n	1047e <adv_set_fields+0x1b8>
    return 0;
   10592:	2300      	movs	r3, #0
   10594:	e773      	b.n	1047e <adv_set_fields+0x1b8>

00010596 <ble_hs_adv_set_fields>:
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_adv_set_fields(const struct ble_hs_adv_fields *adv_fields,
                      uint8_t *dst, uint8_t *dst_len, uint8_t max_len)
{
   10596:	b510      	push	{r4, lr}
   10598:	b082      	sub	sp, #8
#if !NIMBLE_BLE_ADVERTISE
    return BLE_HS_ENOTSUP;
#endif

    return adv_set_fields(adv_fields, dst, dst_len, max_len, NULL);
   1059a:	2400      	movs	r4, #0
   1059c:	9400      	str	r4, [sp, #0]
   1059e:	f7ff fe92 	bl	102c6 <adv_set_fields>
}
   105a2:	b002      	add	sp, #8
   105a4:	bd10      	pop	{r4, pc}

000105a6 <ble_hs_atomic_conn_delete>:

#include "ble_hs_priv.h"

int
ble_hs_atomic_conn_delete(uint16_t conn_handle)
{
   105a6:	b510      	push	{r4, lr}
   105a8:	4604      	mov	r4, r0
    struct ble_hs_conn *conn;

    ble_hs_lock();
   105aa:	f7ff faed 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   105ae:	4620      	mov	r0, r4
   105b0:	f000 f8f4 	bl	1079c <ble_hs_conn_find>
    if (conn != NULL) {
   105b4:	4604      	mov	r4, r0
   105b6:	b120      	cbz	r0, 105c2 <ble_hs_atomic_conn_delete+0x1c>
        ble_hs_conn_remove(conn);
   105b8:	f000 f8e0 	bl	1077c <ble_hs_conn_remove>
#if MYNEWT_VAL(BLE_PERIODIC_ADV_SYNC_TRANSFER)
        if (conn->psync) {
            ble_hs_periodic_sync_free(conn->psync);
        }
#endif
        ble_hs_conn_free(conn);
   105bc:	4620      	mov	r0, r4
   105be:	f000 f87f 	bl	106c0 <ble_hs_conn_free>

    }
    ble_hs_unlock();
   105c2:	f7ff fae5 	bl	fb90 <ble_hs_unlock>

    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   105c6:	b10c      	cbz	r4, 105cc <ble_hs_atomic_conn_delete+0x26>
   105c8:	2000      	movs	r0, #0
}
   105ca:	bd10      	pop	{r4, pc}
    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   105cc:	2007      	movs	r0, #7
   105ce:	e7fc      	b.n	105ca <ble_hs_atomic_conn_delete+0x24>

000105d0 <ble_hs_atomic_conn_flags>:
    ble_hs_unlock();
}

int
ble_hs_atomic_conn_flags(uint16_t conn_handle, ble_hs_conn_flags_t *out_flags)
{
   105d0:	b538      	push	{r3, r4, r5, lr}
   105d2:	4605      	mov	r5, r0
   105d4:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   105d6:	f7ff fad7 	bl	fb88 <ble_hs_lock>

    conn = ble_hs_conn_find(conn_handle);
   105da:	4628      	mov	r0, r5
   105dc:	f000 f8de 	bl	1079c <ble_hs_conn_find>
    if (conn == NULL) {
   105e0:	b140      	cbz	r0, 105f4 <ble_hs_atomic_conn_flags+0x24>
        rc = BLE_HS_ENOTCONN;
    } else {
        rc = 0;
        if (out_flags != NULL) {
   105e2:	b14c      	cbz	r4, 105f8 <ble_hs_atomic_conn_flags+0x28>
            *out_flags = conn->bhc_flags;
   105e4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   105e8:	7023      	strb	r3, [r4, #0]
        rc = 0;
   105ea:	2400      	movs	r4, #0
        }
    }

    ble_hs_unlock();
   105ec:	f7ff fad0 	bl	fb90 <ble_hs_unlock>

    return rc;
}
   105f0:	4620      	mov	r0, r4
   105f2:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
   105f4:	2407      	movs	r4, #7
   105f6:	e7f9      	b.n	105ec <ble_hs_atomic_conn_flags+0x1c>
        rc = 0;
   105f8:	2400      	movs	r4, #0
   105fa:	e7f7      	b.n	105ec <ble_hs_atomic_conn_flags+0x1c>

000105fc <ble_hs_atomic_first_conn_handle>:
    return rc;
}

uint16_t
ble_hs_atomic_first_conn_handle(void)
{
   105fc:	b510      	push	{r4, lr}
    const struct ble_hs_conn *conn;
    uint16_t conn_handle;

    ble_hs_lock();
   105fe:	f7ff fac3 	bl	fb88 <ble_hs_lock>

    conn = ble_hs_conn_first();
   10602:	f000 f8fd 	bl	10800 <ble_hs_conn_first>
    if (conn != NULL) {
   10606:	b120      	cbz	r0, 10612 <ble_hs_atomic_first_conn_handle+0x16>
        conn_handle = conn->bhc_handle;
   10608:	8884      	ldrh	r4, [r0, #4]
    } else {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
    }

    ble_hs_unlock();
   1060a:	f7ff fac1 	bl	fb90 <ble_hs_unlock>

    return conn_handle;
}
   1060e:	4620      	mov	r0, r4
   10610:	bd10      	pop	{r4, pc}
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   10612:	f64f 74ff 	movw	r4, #65535	; 0xffff
   10616:	e7f8      	b.n	1060a <ble_hs_atomic_first_conn_handle+0xe>

00010618 <ble_hs_conn_can_alloc>:

static const uint8_t ble_hs_conn_null_addr[6];

int
ble_hs_conn_can_alloc(void)
{
   10618:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif

    return ble_hs_conn_pool.mp_num_free >= 1 &&
   1061a:	4b09      	ldr	r3, [pc, #36]	; (10640 <ble_hs_conn_can_alloc+0x28>)
   1061c:	88db      	ldrh	r3, [r3, #6]
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   1061e:	b15b      	cbz	r3, 10638 <ble_hs_conn_can_alloc+0x20>
   10620:	4b08      	ldr	r3, [pc, #32]	; (10644 <ble_hs_conn_can_alloc+0x2c>)
   10622:	88db      	ldrh	r3, [r3, #6]
    return ble_hs_conn_pool.mp_num_free >= 1 &&
   10624:	2b02      	cmp	r3, #2
   10626:	d801      	bhi.n	1062c <ble_hs_conn_can_alloc+0x14>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   10628:	2300      	movs	r3, #0
   1062a:	e006      	b.n	1063a <ble_hs_conn_can_alloc+0x22>
           ble_gatts_conn_can_alloc();
   1062c:	f7ff f82e 	bl	f68c <ble_gatts_conn_can_alloc>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   10630:	4603      	mov	r3, r0
   10632:	b110      	cbz	r0, 1063a <ble_hs_conn_can_alloc+0x22>
   10634:	2301      	movs	r3, #1
   10636:	e000      	b.n	1063a <ble_hs_conn_can_alloc+0x22>
   10638:	2300      	movs	r3, #0
}
   1063a:	4618      	mov	r0, r3
   1063c:	bd08      	pop	{r3, pc}
   1063e:	bf00      	nop
   10640:	200073f0 	.word	0x200073f0
   10644:	20007628 	.word	0x20007628

00010648 <ble_hs_conn_chan_find_by_scid>:
    return NULL;
#endif

    struct ble_l2cap_chan *chan;

    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   10648:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   1064a:	b128      	cbz	r0, 10658 <ble_hs_conn_chan_find_by_scid+0x10>
        if (chan->scid == cid) {
   1064c:	8903      	ldrh	r3, [r0, #8]
   1064e:	428b      	cmp	r3, r1
   10650:	d004      	beq.n	1065c <ble_hs_conn_chan_find_by_scid+0x14>
            return chan;
        }
        if (chan->scid > cid) {
   10652:	d802      	bhi.n	1065a <ble_hs_conn_chan_find_by_scid+0x12>
    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   10654:	6800      	ldr	r0, [r0, #0]
   10656:	e7f8      	b.n	1064a <ble_hs_conn_chan_find_by_scid+0x2>
   10658:	4770      	bx	lr
            return NULL;
   1065a:	2000      	movs	r0, #0
        }
    }

    return NULL;
}
   1065c:	4770      	bx	lr

0001065e <ble_hs_conn_chan_insert>:
    return false;
}

int
ble_hs_conn_chan_insert(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   1065e:	b470      	push	{r4, r5, r6}

    struct ble_l2cap_chan *prev;
    struct ble_l2cap_chan *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   10660:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   10662:	4633      	mov	r3, r6
    prev = NULL;
   10664:	2500      	movs	r5, #0
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   10666:	b13b      	cbz	r3, 10678 <ble_hs_conn_chan_insert+0x1a>
        if (cur->scid == chan->scid) {
   10668:	891c      	ldrh	r4, [r3, #8]
   1066a:	890a      	ldrh	r2, [r1, #8]
   1066c:	4294      	cmp	r4, r2
   1066e:	d00e      	beq.n	1068e <ble_hs_conn_chan_insert+0x30>
            return BLE_HS_EALREADY;
        }
        if (cur->scid > chan->scid) {
   10670:	d802      	bhi.n	10678 <ble_hs_conn_chan_insert+0x1a>
            break;
        }

        prev = cur;
   10672:	461d      	mov	r5, r3
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   10674:	681b      	ldr	r3, [r3, #0]
   10676:	e7f6      	b.n	10666 <ble_hs_conn_chan_insert+0x8>
    }

    if (prev == NULL) {
   10678:	b12d      	cbz	r5, 10686 <ble_hs_conn_chan_insert+0x28>
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
    } else {
        SLIST_INSERT_AFTER(prev, chan, next);
   1067a:	682b      	ldr	r3, [r5, #0]
   1067c:	600b      	str	r3, [r1, #0]
   1067e:	6029      	str	r1, [r5, #0]
    }

    return 0;
   10680:	2000      	movs	r0, #0
}
   10682:	bc70      	pop	{r4, r5, r6}
   10684:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
   10686:	600e      	str	r6, [r1, #0]
   10688:	62c1      	str	r1, [r0, #44]	; 0x2c
    return 0;
   1068a:	2000      	movs	r0, #0
   1068c:	e7f9      	b.n	10682 <ble_hs_conn_chan_insert+0x24>
            return BLE_HS_EALREADY;
   1068e:	2002      	movs	r0, #2
   10690:	e7f7      	b.n	10682 <ble_hs_conn_chan_insert+0x24>

00010692 <ble_hs_conn_delete_chan>:
    return NULL;
}

void
ble_hs_conn_delete_chan(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   10692:	b508      	push	{r3, lr}
    if (conn->bhc_rx_chan == chan) {
   10694:	6b03      	ldr	r3, [r0, #48]	; 0x30
   10696:	428b      	cmp	r3, r1
   10698:	d005      	beq.n	106a6 <ble_hs_conn_delete_chan+0x14>
        conn->bhc_rx_chan = NULL;
    }

    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   1069a:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   1069c:	428a      	cmp	r2, r1
   1069e:	d106      	bne.n	106ae <ble_hs_conn_delete_chan+0x1c>
   106a0:	6813      	ldr	r3, [r2, #0]
   106a2:	62c3      	str	r3, [r0, #44]	; 0x2c
   106a4:	e008      	b.n	106b8 <ble_hs_conn_delete_chan+0x26>
        conn->bhc_rx_chan = NULL;
   106a6:	2300      	movs	r3, #0
   106a8:	6303      	str	r3, [r0, #48]	; 0x30
   106aa:	e7f6      	b.n	1069a <ble_hs_conn_delete_chan+0x8>
    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   106ac:	461a      	mov	r2, r3
   106ae:	6813      	ldr	r3, [r2, #0]
   106b0:	428b      	cmp	r3, r1
   106b2:	d1fb      	bne.n	106ac <ble_hs_conn_delete_chan+0x1a>
   106b4:	681b      	ldr	r3, [r3, #0]
   106b6:	6013      	str	r3, [r2, #0]
    ble_l2cap_chan_free(conn, chan);
   106b8:	f001 fb3a 	bl	11d30 <ble_l2cap_chan_free>
}
   106bc:	bd08      	pop	{r3, pc}
	...

000106c0 <ble_hs_conn_free>:

    struct ble_l2cap_chan *chan;
    struct os_mbuf_pkthdr *omp;
    int rc;

    if (conn == NULL) {
   106c0:	b1f0      	cbz	r0, 10700 <ble_hs_conn_free+0x40>
{
   106c2:	b510      	push	{r4, lr}
   106c4:	4604      	mov	r4, r0
        return;
    }

    ble_att_svr_prep_clear(&conn->bhc_att_svr.basc_prep_list);
   106c6:	3044      	adds	r0, #68	; 0x44
   106c8:	f005 fb59 	bl	15d7e <ble_att_svr_prep_clear>

    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   106cc:	e002      	b.n	106d4 <ble_hs_conn_free+0x14>
        ble_hs_conn_delete_chan(conn, chan);
   106ce:	4620      	mov	r0, r4
   106d0:	f7ff ffdf 	bl	10692 <ble_hs_conn_delete_chan>
    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   106d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   106d6:	2900      	cmp	r1, #0
   106d8:	d1f9      	bne.n	106ce <ble_hs_conn_free+0xe>
   106da:	e002      	b.n	106e2 <ble_hs_conn_free+0x22>
    }

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
        os_mbuf_free_chain(OS_MBUF_PKTHDR_TO_MBUF(omp));
   106dc:	3810      	subs	r0, #16
   106de:	f7f9 fdf1 	bl	a2c4 <os_mbuf_free_chain>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   106e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   106e4:	b138      	cbz	r0, 106f6 <ble_hs_conn_free+0x36>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   106e6:	6843      	ldr	r3, [r0, #4]
   106e8:	63e3      	str	r3, [r4, #60]	; 0x3c
   106ea:	2b00      	cmp	r3, #0
   106ec:	d1f6      	bne.n	106dc <ble_hs_conn_free+0x1c>
   106ee:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   106f2:	6423      	str	r3, [r4, #64]	; 0x40
   106f4:	e7f2      	b.n	106dc <ble_hs_conn_free+0x1c>
    }

#if MYNEWT_VAL(BLE_HS_DEBUG)
    memset(conn, 0xff, sizeof *conn);
#endif
    rc = os_memblock_put(&ble_hs_conn_pool, conn);
   106f6:	4621      	mov	r1, r4
   106f8:	4802      	ldr	r0, [pc, #8]	; (10704 <ble_hs_conn_free+0x44>)
   106fa:	f7fa fa5a 	bl	abb2 <os_memblock_put>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    STATS_INC(ble_hs_stats, conn_delete);
}
   106fe:	bd10      	pop	{r4, pc}
   10700:	4770      	bx	lr
   10702:	bf00      	nop
   10704:	200073f0 	.word	0x200073f0

00010708 <ble_hs_conn_alloc>:
{
   10708:	b538      	push	{r3, r4, r5, lr}
   1070a:	4605      	mov	r5, r0
    conn = os_memblock_get(&ble_hs_conn_pool);
   1070c:	481a      	ldr	r0, [pc, #104]	; (10778 <ble_hs_conn_alloc+0x70>)
   1070e:	f7fa fa28 	bl	ab62 <os_memblock_get>
    if (conn == NULL) {
   10712:	4604      	mov	r4, r0
   10714:	b350      	cbz	r0, 1076c <ble_hs_conn_alloc+0x64>
    memset(conn, 0, sizeof *conn);
   10716:	2264      	movs	r2, #100	; 0x64
   10718:	2100      	movs	r1, #0
   1071a:	f7fb f8e2 	bl	b8e2 <memset>
    conn->bhc_handle = conn_handle;
   1071e:	80a5      	strh	r5, [r4, #4]
    chan = ble_att_create_chan(conn_handle);
   10720:	4628      	mov	r0, r5
   10722:	f004 f85d 	bl	147e0 <ble_att_create_chan>
    if (chan == NULL) {
   10726:	4601      	mov	r1, r0
   10728:	b300      	cbz	r0, 1076c <ble_hs_conn_alloc+0x64>
    rc = ble_hs_conn_chan_insert(conn, chan);
   1072a:	4620      	mov	r0, r4
   1072c:	f7ff ff97 	bl	1065e <ble_hs_conn_chan_insert>
    if (rc != 0) {
   10730:	b9e0      	cbnz	r0, 1076c <ble_hs_conn_alloc+0x64>
    chan = ble_l2cap_sig_create_chan(conn_handle);
   10732:	4628      	mov	r0, r5
   10734:	f001 fdec 	bl	12310 <ble_l2cap_sig_create_chan>
    if (chan == NULL) {
   10738:	4601      	mov	r1, r0
   1073a:	b1b8      	cbz	r0, 1076c <ble_hs_conn_alloc+0x64>
    rc = ble_hs_conn_chan_insert(conn, chan);
   1073c:	4620      	mov	r0, r4
   1073e:	f7ff ff8e 	bl	1065e <ble_hs_conn_chan_insert>
    if (rc != 0) {
   10742:	b998      	cbnz	r0, 1076c <ble_hs_conn_alloc+0x64>
    chan = ble_sm_create_chan(conn_handle);
   10744:	4628      	mov	r0, r5
   10746:	f003 fb41 	bl	13dcc <ble_sm_create_chan>
    if (chan == NULL) {
   1074a:	4601      	mov	r1, r0
   1074c:	b170      	cbz	r0, 1076c <ble_hs_conn_alloc+0x64>
    rc = ble_hs_conn_chan_insert(conn, chan);
   1074e:	4620      	mov	r0, r4
   10750:	f7ff ff85 	bl	1065e <ble_hs_conn_chan_insert>
    if (rc != 0) {
   10754:	b950      	cbnz	r0, 1076c <ble_hs_conn_alloc+0x64>
    rc = ble_gatts_conn_init(&conn->bhc_gatt_svr);
   10756:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1075a:	f7fe ffa7 	bl	f6ac <ble_gatts_conn_init>
    if (rc != 0) {
   1075e:	b928      	cbnz	r0, 1076c <ble_hs_conn_alloc+0x64>
    STAILQ_INIT(&conn->bhc_tx_q);
   10760:	4623      	mov	r3, r4
   10762:	2200      	movs	r2, #0
   10764:	f843 2f3c 	str.w	r2, [r3, #60]!
   10768:	6423      	str	r3, [r4, #64]	; 0x40
    return conn;
   1076a:	e003      	b.n	10774 <ble_hs_conn_alloc+0x6c>
    ble_hs_conn_free(conn);
   1076c:	4620      	mov	r0, r4
   1076e:	f7ff ffa7 	bl	106c0 <ble_hs_conn_free>
    return NULL;
   10772:	2400      	movs	r4, #0
}
   10774:	4620      	mov	r0, r4
   10776:	bd38      	pop	{r3, r4, r5, pc}
   10778:	200073f0 	.word	0x200073f0

0001077c <ble_hs_conn_remove>:
    return;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   1077c:	4b06      	ldr	r3, [pc, #24]	; (10798 <ble_hs_conn_remove+0x1c>)
   1077e:	681a      	ldr	r2, [r3, #0]
   10780:	4282      	cmp	r2, r0
   10782:	d103      	bne.n	1078c <ble_hs_conn_remove+0x10>
   10784:	6812      	ldr	r2, [r2, #0]
   10786:	601a      	str	r2, [r3, #0]
   10788:	4770      	bx	lr
   1078a:	461a      	mov	r2, r3
   1078c:	6813      	ldr	r3, [r2, #0]
   1078e:	4283      	cmp	r3, r0
   10790:	d1fb      	bne.n	1078a <ble_hs_conn_remove+0xe>
   10792:	681b      	ldr	r3, [r3, #0]
   10794:	6013      	str	r3, [r2, #0]
}
   10796:	4770      	bx	lr
   10798:	2000740c 	.word	0x2000740c

0001079c <ble_hs_conn_find>:

    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   1079c:	4b04      	ldr	r3, [pc, #16]	; (107b0 <ble_hs_conn_find+0x14>)
   1079e:	681b      	ldr	r3, [r3, #0]
   107a0:	b123      	cbz	r3, 107ac <ble_hs_conn_find+0x10>
        if (conn->bhc_handle == conn_handle) {
   107a2:	889a      	ldrh	r2, [r3, #4]
   107a4:	4282      	cmp	r2, r0
   107a6:	d001      	beq.n	107ac <ble_hs_conn_find+0x10>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   107a8:	681b      	ldr	r3, [r3, #0]
   107aa:	e7f9      	b.n	107a0 <ble_hs_conn_find+0x4>
            return conn;
        }
    }

    return NULL;
}
   107ac:	4618      	mov	r0, r3
   107ae:	4770      	bx	lr
   107b0:	2000740c 	.word	0x2000740c

000107b4 <ble_hs_conn_insert>:
{
   107b4:	b510      	push	{r4, lr}
   107b6:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT_EVAL(ble_hs_conn_find(conn->bhc_handle) == NULL);
   107b8:	8880      	ldrh	r0, [r0, #4]
   107ba:	f7ff ffef 	bl	1079c <ble_hs_conn_find>
    SLIST_INSERT_HEAD(&ble_hs_conns, conn, bhc_next);
   107be:	4b02      	ldr	r3, [pc, #8]	; (107c8 <ble_hs_conn_insert+0x14>)
   107c0:	681a      	ldr	r2, [r3, #0]
   107c2:	6022      	str	r2, [r4, #0]
   107c4:	601c      	str	r4, [r3, #0]
}
   107c6:	bd10      	pop	{r4, pc}
   107c8:	2000740c 	.word	0x2000740c

000107cc <ble_hs_conn_find_assert>:

struct ble_hs_conn *
ble_hs_conn_find_assert(uint16_t conn_handle)
{
   107cc:	b508      	push	{r3, lr}
    struct ble_hs_conn *conn;

    conn = ble_hs_conn_find(conn_handle);
   107ce:	f7ff ffe5 	bl	1079c <ble_hs_conn_find>
    BLE_HS_DBG_ASSERT(conn != NULL);

    return conn;
}
   107d2:	bd08      	pop	{r3, pc}

000107d4 <ble_hs_conn_find_by_idx>:
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    i = 0;
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   107d4:	4b05      	ldr	r3, [pc, #20]	; (107ec <ble_hs_conn_find_by_idx+0x18>)
   107d6:	681b      	ldr	r3, [r3, #0]
    i = 0;
   107d8:	2200      	movs	r2, #0
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   107da:	b123      	cbz	r3, 107e6 <ble_hs_conn_find_by_idx+0x12>
        if (i == idx) {
   107dc:	4282      	cmp	r2, r0
   107de:	d002      	beq.n	107e6 <ble_hs_conn_find_by_idx+0x12>
            return conn;
        }

        i++;
   107e0:	3201      	adds	r2, #1
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   107e2:	681b      	ldr	r3, [r3, #0]
   107e4:	e7f9      	b.n	107da <ble_hs_conn_find_by_idx+0x6>
    }

    return NULL;
}
   107e6:	4618      	mov	r0, r3
   107e8:	4770      	bx	lr
   107ea:	bf00      	nop
   107ec:	2000740c 	.word	0x2000740c

000107f0 <ble_hs_conn_exists>:

int
ble_hs_conn_exists(uint16_t conn_handle)
{
   107f0:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif
    return ble_hs_conn_find(conn_handle) != NULL;
   107f2:	f7ff ffd3 	bl	1079c <ble_hs_conn_find>
}
   107f6:	3000      	adds	r0, #0
   107f8:	bf18      	it	ne
   107fa:	2001      	movne	r0, #1
   107fc:	bd08      	pop	{r3, pc}
	...

00010800 <ble_hs_conn_first>:
    return NULL;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());
    return SLIST_FIRST(&ble_hs_conns);
}
   10800:	4b01      	ldr	r3, [pc, #4]	; (10808 <ble_hs_conn_first+0x8>)
   10802:	6818      	ldr	r0, [r3, #0]
   10804:	4770      	bx	lr
   10806:	bf00      	nop
   10808:	2000740c 	.word	0x2000740c

0001080c <ble_hs_conn_addrs>:

void
ble_hs_conn_addrs(const struct ble_hs_conn *conn,
                  struct ble_hs_conn_addrs *addrs)
{
   1080c:	b570      	push	{r4, r5, r6, lr}
   1080e:	b082      	sub	sp, #8
   10810:	4605      	mov	r5, r0
   10812:	460c      	mov	r4, r1
    const uint8_t *our_id_addr_val;
    int rc;

    /* Determine our address information. */
    addrs->our_id_addr.type =
        ble_hs_misc_own_addr_type_to_id(conn->bhc_our_addr_type);
   10814:	7980      	ldrb	r0, [r0, #6]
   10816:	f000 ff8b 	bl	11730 <ble_hs_misc_own_addr_type_to_id>
    addrs->our_id_addr.type =
   1081a:	7020      	strb	r0, [r4, #0]
    } else {
        rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
        assert(rc == 0);
    }
#else
    rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
   1081c:	2200      	movs	r2, #0
   1081e:	a901      	add	r1, sp, #4
   10820:	f000 fe44 	bl	114ac <ble_hs_id_addr>
    assert(rc == 0);
   10824:	bb70      	cbnz	r0, 10884 <ble_hs_conn_addrs+0x78>
#endif

    memcpy(addrs->our_id_addr.val, our_id_addr_val, 6);
   10826:	9b01      	ldr	r3, [sp, #4]
   10828:	681a      	ldr	r2, [r3, #0]
   1082a:	f8c4 2001 	str.w	r2, [r4, #1]
   1082e:	889b      	ldrh	r3, [r3, #4]
   10830:	f8a4 3005 	strh.w	r3, [r4, #5]

    if (memcmp(conn->bhc_our_rpa_addr.val, ble_hs_conn_null_addr, 6) == 0) {
   10834:	2206      	movs	r2, #6
   10836:	4929      	ldr	r1, [pc, #164]	; (108dc <ble_hs_conn_addrs+0xd0>)
   10838:	f105 000f 	add.w	r0, r5, #15
   1083c:	f7fb f804 	bl	b848 <memcmp>
   10840:	bb50      	cbnz	r0, 10898 <ble_hs_conn_addrs+0x8c>
        addrs->our_ota_addr = addrs->our_id_addr;
   10842:	6822      	ldr	r2, [r4, #0]
   10844:	f8c4 200e 	str.w	r2, [r4, #14]
   10848:	88a1      	ldrh	r1, [r4, #4]
   1084a:	79a2      	ldrb	r2, [r4, #6]
   1084c:	8261      	strh	r1, [r4, #18]
   1084e:	7522      	strb	r2, [r4, #20]
    } else {
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
    }

    /* Determine peer address information. */
    addrs->peer_id_addr = conn->bhc_peer_addr;
   10850:	462b      	mov	r3, r5
   10852:	f853 1f07 	ldr.w	r1, [r3, #7]!
   10856:	f8c4 1007 	str.w	r1, [r4, #7]
   1085a:	8898      	ldrh	r0, [r3, #4]
   1085c:	7999      	ldrb	r1, [r3, #6]
   1085e:	f8a4 000b 	strh.w	r0, [r4, #11]
   10862:	7361      	strb	r1, [r4, #13]
    addrs->peer_ota_addr = conn->bhc_peer_addr;
   10864:	f104 0215 	add.w	r2, r4, #21
   10868:	6819      	ldr	r1, [r3, #0]
   1086a:	f8c4 1015 	str.w	r1, [r4, #21]
   1086e:	8898      	ldrh	r0, [r3, #4]
   10870:	7999      	ldrb	r1, [r3, #6]
   10872:	8090      	strh	r0, [r2, #4]
   10874:	7191      	strb	r1, [r2, #6]
    switch (conn->bhc_peer_addr.type) {
   10876:	79eb      	ldrb	r3, [r5, #7]
   10878:	2b02      	cmp	r3, #2
   1087a:	d017      	beq.n	108ac <ble_hs_conn_addrs+0xa0>
   1087c:	2b03      	cmp	r3, #3
   1087e:	d021      	beq.n	108c4 <ble_hs_conn_addrs+0xb8>

    default:
        BLE_HS_DBG_ASSERT(0);
        break;
    }
}
   10880:	b002      	add	sp, #8
   10882:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
   10884:	f7f7 fc9c 	bl	81c0 <hal_debugger_connected>
   10888:	b100      	cbz	r0, 1088c <ble_hs_conn_addrs+0x80>
   1088a:	be01      	bkpt	0x0001
   1088c:	2300      	movs	r3, #0
   1088e:	461a      	mov	r2, r3
   10890:	4619      	mov	r1, r3
   10892:	4618      	mov	r0, r3
   10894:	f7f9 f89c 	bl	99d0 <__assert_func>
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
   10898:	462a      	mov	r2, r5
   1089a:	f852 1f0e 	ldr.w	r1, [r2, #14]!
   1089e:	f8c4 100e 	str.w	r1, [r4, #14]
   108a2:	8891      	ldrh	r1, [r2, #4]
   108a4:	7992      	ldrb	r2, [r2, #6]
   108a6:	8261      	strh	r1, [r4, #18]
   108a8:	7522      	strb	r2, [r4, #20]
   108aa:	e7d1      	b.n	10850 <ble_hs_conn_addrs+0x44>
        addrs->peer_id_addr.type = BLE_ADDR_PUBLIC;
   108ac:	2300      	movs	r3, #0
   108ae:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   108b0:	f855 2f15 	ldr.w	r2, [r5, #21]!
   108b4:	f8c4 2015 	str.w	r2, [r4, #21]
   108b8:	88a9      	ldrh	r1, [r5, #4]
   108ba:	79aa      	ldrb	r2, [r5, #6]
   108bc:	f8a4 1019 	strh.w	r1, [r4, #25]
   108c0:	76e2      	strb	r2, [r4, #27]
        break;
   108c2:	e7dd      	b.n	10880 <ble_hs_conn_addrs+0x74>
        addrs->peer_id_addr.type = BLE_ADDR_RANDOM;
   108c4:	2301      	movs	r3, #1
   108c6:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   108c8:	f855 2f15 	ldr.w	r2, [r5, #21]!
   108cc:	f8c4 2015 	str.w	r2, [r4, #21]
   108d0:	88a9      	ldrh	r1, [r5, #4]
   108d2:	79aa      	ldrb	r2, [r5, #6]
   108d4:	f8a4 1019 	strh.w	r1, [r4, #25]
   108d8:	76e2      	strb	r2, [r4, #27]
}
   108da:	e7d1      	b.n	10880 <ble_hs_conn_addrs+0x74>
   108dc:	200073e8 	.word	0x200073e8

000108e0 <ble_hs_conn_find_by_addr>:
{
   108e0:	b570      	push	{r4, r5, r6, lr}
   108e2:	b088      	sub	sp, #32
    if (!addr) {
   108e4:	2800      	cmp	r0, #0
   108e6:	d039      	beq.n	1095c <ble_hs_conn_find_by_addr+0x7c>
   108e8:	4606      	mov	r6, r0
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   108ea:	4b1d      	ldr	r3, [pc, #116]	; (10960 <ble_hs_conn_find_by_addr+0x80>)
   108ec:	681c      	ldr	r4, [r3, #0]
   108ee:	e014      	b.n	1091a <ble_hs_conn_find_by_addr+0x3a>
        if (BLE_ADDR_IS_RPA(addr)) {
   108f0:	79b3      	ldrb	r3, [r6, #6]
   108f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   108f6:	2b40      	cmp	r3, #64	; 0x40
   108f8:	d114      	bne.n	10924 <ble_hs_conn_find_by_addr+0x44>
    type_diff = a->type - b->type;
   108fa:	7d63      	ldrb	r3, [r4, #21]
    if (type_diff != 0) {
   108fc:	1a18      	subs	r0, r3, r0
   108fe:	d105      	bne.n	1090c <ble_hs_conn_find_by_addr+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   10900:	2206      	movs	r2, #6
   10902:	1c71      	adds	r1, r6, #1
   10904:	f104 0016 	add.w	r0, r4, #22
   10908:	f7fa ff9e 	bl	b848 <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_rpa_addr, addr) == 0) {
   1090c:	b920      	cbnz	r0, 10918 <ble_hs_conn_find_by_addr+0x38>
}
   1090e:	4620      	mov	r0, r4
   10910:	b008      	add	sp, #32
   10912:	bd70      	pop	{r4, r5, r6, pc}
            if (ble_addr_cmp(&addrs.peer_id_addr, addr) == 0) {
   10914:	2800      	cmp	r0, #0
   10916:	d0fa      	beq.n	1090e <ble_hs_conn_find_by_addr+0x2e>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   10918:	6824      	ldr	r4, [r4, #0]
   1091a:	2c00      	cmp	r4, #0
   1091c:	d0f7      	beq.n	1090e <ble_hs_conn_find_by_addr+0x2e>
        if (BLE_ADDR_IS_RPA(addr)) {
   1091e:	7830      	ldrb	r0, [r6, #0]
   10920:	2801      	cmp	r0, #1
   10922:	d0e5      	beq.n	108f0 <ble_hs_conn_find_by_addr+0x10>
    type_diff = a->type - b->type;
   10924:	79e5      	ldrb	r5, [r4, #7]
    if (type_diff != 0) {
   10926:	1a28      	subs	r0, r5, r0
   10928:	d105      	bne.n	10936 <ble_hs_conn_find_by_addr+0x56>
    return memcmp(a->val, b->val, sizeof(a->val));
   1092a:	2206      	movs	r2, #6
   1092c:	1c71      	adds	r1, r6, #1
   1092e:	f104 0008 	add.w	r0, r4, #8
   10932:	f7fa ff89 	bl	b848 <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_addr, addr) == 0) {
   10936:	2800      	cmp	r0, #0
   10938:	d0e9      	beq.n	1090e <ble_hs_conn_find_by_addr+0x2e>
            if (conn->bhc_peer_addr.type < BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT) {
   1093a:	2d01      	cmp	r5, #1
   1093c:	d9ec      	bls.n	10918 <ble_hs_conn_find_by_addr+0x38>
            ble_hs_conn_addrs(conn, &addrs);
   1093e:	a901      	add	r1, sp, #4
   10940:	4620      	mov	r0, r4
   10942:	f7ff ff63 	bl	1080c <ble_hs_conn_addrs>
    type_diff = a->type - b->type;
   10946:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1094a:	7833      	ldrb	r3, [r6, #0]
    if (type_diff != 0) {
   1094c:	1ac0      	subs	r0, r0, r3
   1094e:	d1e1      	bne.n	10914 <ble_hs_conn_find_by_addr+0x34>
    return memcmp(a->val, b->val, sizeof(a->val));
   10950:	2206      	movs	r2, #6
   10952:	1c71      	adds	r1, r6, #1
   10954:	a803      	add	r0, sp, #12
   10956:	f7fa ff77 	bl	b848 <memcmp>
   1095a:	e7db      	b.n	10914 <ble_hs_conn_find_by_addr+0x34>
        return NULL;
   1095c:	2400      	movs	r4, #0
   1095e:	e7d6      	b.n	1090e <ble_hs_conn_find_by_addr+0x2e>
   10960:	2000740c 	.word	0x2000740c

00010964 <ble_hs_conn_timer>:

int32_t
ble_hs_conn_timer(void)
{
   10964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return os_time_get();
   10966:	f7fa fda7 	bl	b4b8 <os_time_get>
   1096a:	4607      	mov	r7, r0
    for (;;) {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
        next_exp_in = BLE_HS_FOREVER;
        now = ble_npl_time_get();

        ble_hs_lock();
   1096c:	f7ff f90c 	bl	fb88 <ble_hs_lock>
         * 1. Determine if any connections need to be terminated due to timeout.
         *    If so, break out of the loop and terminate the connection.  This
         *    function will need to be executed again.
         * 2. Otherwise, determine when the next timeout will occur.
         */
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   10970:	4b1a      	ldr	r3, [pc, #104]	; (109dc <ble_hs_conn_timer+0x78>)
   10972:	681c      	ldr	r4, [r3, #0]
        next_exp_in = BLE_HS_FOREVER;
   10974:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   10978:	e00d      	b.n	10996 <ble_hs_conn_timer+0x32>
                    if (time_diff <= 0) {
                        /* ACL reassembly has timed out.  Remember the connection
                         * handle so it can be terminated after the mutex is
                         * unlocked.
                         */
                        conn_handle = conn->bhc_handle;
   1097a:	88a4      	ldrh	r4, [r4, #4]
                        break;
   1097c:	e021      	b.n	109c2 <ble_hs_conn_timer+0x5e>
   1097e:	4635      	mov	r5, r6
#if BLE_HS_ATT_SVR_QUEUED_WRITE_TMO
                /* Check each connection's rx queued write timer.  If too much
                 * time passes after a prep write is received, the queue is
                 * cleared.
                 */
                time_diff = ble_att_svr_ticks_until_tmo(&conn->bhc_att_svr, now);
   10980:	4639      	mov	r1, r7
   10982:	f104 0044 	add.w	r0, r4, #68	; 0x44
   10986:	f004 febc 	bl	15702 <ble_att_svr_ticks_until_tmo>
                if (time_diff <= 0) {
   1098a:	1e06      	subs	r6, r0, #0
   1098c:	dd14      	ble.n	109b8 <ble_hs_conn_timer+0x54>
                    conn_handle = conn->bhc_handle;
                    break;
                }

                /* Determine if this connection is the soonest to time out. */
                if (time_diff < next_exp_in) {
   1098e:	42b5      	cmp	r5, r6
   10990:	dc00      	bgt.n	10994 <ble_hs_conn_timer+0x30>
   10992:	462e      	mov	r6, r5
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   10994:	6824      	ldr	r4, [r4, #0]
   10996:	b194      	cbz	r4, 109be <ble_hs_conn_timer+0x5a>
            if (!(conn->bhc_flags & BLE_HS_CONN_F_TERMINATING)) {
   10998:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1099c:	f013 0f02 	tst.w	r3, #2
   109a0:	d1f8      	bne.n	10994 <ble_hs_conn_timer+0x30>
                if (conn->bhc_rx_chan != NULL) {
   109a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   109a4:	2b00      	cmp	r3, #0
   109a6:	d0ea      	beq.n	1097e <ble_hs_conn_timer+0x1a>
                    time_diff = conn->bhc_rx_timeout - now;
   109a8:	6b65      	ldr	r5, [r4, #52]	; 0x34
   109aa:	1bed      	subs	r5, r5, r7
                    if (time_diff <= 0) {
   109ac:	2d00      	cmp	r5, #0
   109ae:	dde4      	ble.n	1097a <ble_hs_conn_timer+0x16>
                    if (time_diff < next_exp_in) {
   109b0:	42ae      	cmp	r6, r5
   109b2:	dce5      	bgt.n	10980 <ble_hs_conn_timer+0x1c>
   109b4:	4635      	mov	r5, r6
   109b6:	e7e3      	b.n	10980 <ble_hs_conn_timer+0x1c>
                    conn_handle = conn->bhc_handle;
   109b8:	88a4      	ldrh	r4, [r4, #4]
                    break;
   109ba:	462e      	mov	r6, r5
   109bc:	e001      	b.n	109c2 <ble_hs_conn_timer+0x5e>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   109be:	f64f 74ff 	movw	r4, #65535	; 0xffff
                }
#endif
            }
        }

        ble_hs_unlock();
   109c2:	f7ff f8e5 	bl	fb90 <ble_hs_unlock>

        /* If a connection has timed out, terminate it.  We need to repeatedly
         * call this function again to determine when the next timeout is.
         */
        if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   109c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   109ca:	429c      	cmp	r4, r3
   109cc:	d101      	bne.n	109d2 <ble_hs_conn_timer+0x6e>
            continue;
        }

        return next_exp_in;
    }
}
   109ce:	4630      	mov	r0, r6
   109d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   109d2:	2113      	movs	r1, #19
   109d4:	4620      	mov	r0, r4
   109d6:	f7fc fd66 	bl	d4a6 <ble_gap_terminate>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   109da:	e7c4      	b.n	10966 <ble_hs_conn_timer+0x2>
   109dc:	2000740c 	.word	0x2000740c

000109e0 <ble_hs_conn_init>:

int
ble_hs_conn_init(void)
{
   109e0:	b500      	push	{lr}
   109e2:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_hs_conn_pool, MYNEWT_VAL(BLE_MAX_CONNECTIONS),
   109e4:	4b07      	ldr	r3, [pc, #28]	; (10a04 <ble_hs_conn_init+0x24>)
   109e6:	9300      	str	r3, [sp, #0]
   109e8:	4b07      	ldr	r3, [pc, #28]	; (10a08 <ble_hs_conn_init+0x28>)
   109ea:	2264      	movs	r2, #100	; 0x64
   109ec:	2101      	movs	r1, #1
   109ee:	4807      	ldr	r0, [pc, #28]	; (10a0c <ble_hs_conn_init+0x2c>)
   109f0:	f7fa f872 	bl	aad8 <os_mempool_init>
                         sizeof (struct ble_hs_conn),
                         ble_hs_conn_elem_mem, "ble_hs_conn_pool");
    if (rc != 0) {
   109f4:	b920      	cbnz	r0, 10a00 <ble_hs_conn_init+0x20>
        return BLE_HS_EOS;
    }

    SLIST_INIT(&ble_hs_conns);
   109f6:	4b06      	ldr	r3, [pc, #24]	; (10a10 <ble_hs_conn_init+0x30>)
   109f8:	6018      	str	r0, [r3, #0]

    return 0;
}
   109fa:	b003      	add	sp, #12
   109fc:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   10a00:	200b      	movs	r0, #11
   10a02:	e7fa      	b.n	109fa <ble_hs_conn_init+0x1a>
   10a04:	00028dc4 	.word	0x00028dc4
   10a08:	20007384 	.word	0x20007384
   10a0c:	200073f0 	.word	0x200073f0
   10a10:	2000740c 	.word	0x2000740c

00010a14 <ble_hs_flow_connection_broken>:
    MYNEWT_VAL(BLE_HS_FLOW_CTRL_TX_ON_DISCONNECT)
    ble_hs_lock();
    ble_hs_flow_tx_num_comp_pkts();
    ble_hs_unlock();
#endif
}
   10a14:	4770      	bx	lr

00010a16 <ble_hs_flow_track_data_mbuf>:
    int idx = ble_hs_flow_mbuf_index(om);

    hdr = (void *)om->om_data;
    ble_hs_flow_mbuf_conn_handle[idx] = BLE_HCI_DATA_HANDLE(hdr->hdh_handle_pb_bc);
#endif
}
   10a16:	4770      	bx	lr

00010a18 <ble_hs_flow_startup>:
    ble_npl_callout_init(&ble_hs_flow_timer, ble_hs_evq_get(),
                         ble_hs_flow_event_cb, NULL);
#endif

    return 0;
}
   10a18:	2000      	movs	r0, #0
   10a1a:	4770      	bx	lr

00010a1c <ble_hs_hci_rx_cmd_complete>:
{
    const struct ble_hci_ev_command_complete *ev = data;
    const struct ble_hci_ev_command_complete_nop *nop = data;
    uint16_t opcode;

    if (len < sizeof(*ev)) {
   10a1c:	2903      	cmp	r1, #3
   10a1e:	d809      	bhi.n	10a34 <ble_hs_hci_rx_cmd_complete+0x18>
        if (len < sizeof(*nop)) {
   10a20:	2902      	cmp	r1, #2
   10a22:	d91c      	bls.n	10a5e <ble_hs_hci_rx_cmd_complete+0x42>
            return BLE_HS_ECONTROLLER;
        }

        /* nop is special as it doesn't have status and response */

        opcode = le16toh(nop->opcode);
   10a24:	f8b0 3001 	ldrh.w	r3, [r0, #1]
        if (opcode != BLE_HCI_OPCODE_NOP) {
   10a28:	b9db      	cbnz	r3, 10a62 <ble_hs_hci_rx_cmd_complete+0x46>
            return BLE_HS_ECONTROLLER;
        }

        /* TODO Process num_pkts field. */

        out_ack->bha_status = 0;
   10a2a:	2100      	movs	r1, #0
   10a2c:	6011      	str	r1, [r2, #0]
        out_ack->bha_params = NULL;
   10a2e:	6051      	str	r1, [r2, #4]
        out_ack->bha_params_len = 0;
   10a30:	6091      	str	r1, [r2, #8]
        return 0;
   10a32:	e00c      	b.n	10a4e <ble_hs_hci_rx_cmd_complete+0x32>
    }

    opcode = le16toh(ev->opcode);
   10a34:	f8b0 3001 	ldrh.w	r3, [r0, #1]

    /* TODO Process num_pkts field. */

    out_ack->bha_opcode = opcode;
   10a38:	8193      	strh	r3, [r2, #12]

    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   10a3a:	78c3      	ldrb	r3, [r0, #3]
   10a3c:	b14b      	cbz	r3, 10a52 <ble_hs_hci_rx_cmd_complete+0x36>
   10a3e:	f503 7300 	add.w	r3, r3, #512	; 0x200
   10a42:	6013      	str	r3, [r2, #0]
    out_ack->bha_params_len = len - sizeof(*ev);
   10a44:	3904      	subs	r1, #4
   10a46:	6091      	str	r1, [r2, #8]
    if (out_ack->bha_params_len) {
   10a48:	b929      	cbnz	r1, 10a56 <ble_hs_hci_rx_cmd_complete+0x3a>
        out_ack->bha_params = ev->return_params;
    } else {
        out_ack->bha_params = NULL;
   10a4a:	2300      	movs	r3, #0
   10a4c:	6053      	str	r3, [r2, #4]
    }

    return 0;
}
   10a4e:	4608      	mov	r0, r1
   10a50:	4770      	bx	lr
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   10a52:	2300      	movs	r3, #0
   10a54:	e7f5      	b.n	10a42 <ble_hs_hci_rx_cmd_complete+0x26>
        out_ack->bha_params = ev->return_params;
   10a56:	3004      	adds	r0, #4
   10a58:	6050      	str	r0, [r2, #4]
    return 0;
   10a5a:	2100      	movs	r1, #0
   10a5c:	e7f7      	b.n	10a4e <ble_hs_hci_rx_cmd_complete+0x32>
            return BLE_HS_ECONTROLLER;
   10a5e:	210c      	movs	r1, #12
   10a60:	e7f5      	b.n	10a4e <ble_hs_hci_rx_cmd_complete+0x32>
            return BLE_HS_ECONTROLLER;
   10a62:	210c      	movs	r1, #12
   10a64:	e7f3      	b.n	10a4e <ble_hs_hci_rx_cmd_complete+0x32>

00010a66 <ble_hs_hci_rx_cmd_status>:
ble_hs_hci_rx_cmd_status(const void *data, int len,
                         struct ble_hs_hci_ack *out_ack)
{
    const struct ble_hci_ev_command_status *ev = data;

    if (len != sizeof(*ev)) {
   10a66:	2904      	cmp	r1, #4
   10a68:	d10d      	bne.n	10a86 <ble_hs_hci_rx_cmd_status+0x20>
        return BLE_HS_ECONTROLLER;
    }

    /* XXX: Process num_pkts field. */

    out_ack->bha_opcode = le16toh(ev->opcode);
   10a6a:	8843      	ldrh	r3, [r0, #2]
   10a6c:	8193      	strh	r3, [r2, #12]
    out_ack->bha_params = NULL;
   10a6e:	2300      	movs	r3, #0
   10a70:	6053      	str	r3, [r2, #4]
    out_ack->bha_params_len = 0;
   10a72:	6093      	str	r3, [r2, #8]
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   10a74:	7803      	ldrb	r3, [r0, #0]
   10a76:	b123      	cbz	r3, 10a82 <ble_hs_hci_rx_cmd_status+0x1c>
   10a78:	f503 7300 	add.w	r3, r3, #512	; 0x200
   10a7c:	6013      	str	r3, [r2, #0]

    return 0;
   10a7e:	2000      	movs	r0, #0
   10a80:	4770      	bx	lr
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   10a82:	2300      	movs	r3, #0
   10a84:	e7fa      	b.n	10a7c <ble_hs_hci_rx_cmd_status+0x16>
        return BLE_HS_ECONTROLLER;
   10a86:	200c      	movs	r0, #12
}
   10a88:	4770      	bx	lr
	...

00010a8c <ble_hs_hci_max_acl_payload_sz>:
     * The LE_Read_Buffer_Size command is used to read the maximum size of the
     * data portion of HCI LE ACL Data Packets sent from the Host to the
     * Controller.
     */
    return ble_hs_hci_buf_sz;
}
   10a8c:	4b01      	ldr	r3, [pc, #4]	; (10a94 <ble_hs_hci_max_acl_payload_sz+0x8>)
   10a8e:	8818      	ldrh	r0, [r3, #0]
   10a90:	4770      	bx	lr
   10a92:	bf00      	nop
   10a94:	20007416 	.word	0x20007416

00010a98 <ble_hs_hci_lock>:
{
   10a98:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   10a9a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10a9e:	4802      	ldr	r0, [pc, #8]	; (10aa8 <ble_hs_hci_lock+0x10>)
   10aa0:	f7fa f9c2 	bl	ae28 <os_mutex_pend>
}
   10aa4:	bd08      	pop	{r3, pc}
   10aa6:	bf00      	nop
   10aa8:	2000755c 	.word	0x2000755c

00010aac <ble_hs_hci_wait_for_ack>:
{
   10aac:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_sem_pend(&sem->sem, timeout);
   10aae:	f44f 7180 	mov.w	r1, #256	; 0x100
   10ab2:	4806      	ldr	r0, [pc, #24]	; (10acc <ble_hs_hci_wait_for_ack+0x20>)
   10ab4:	f00b f9b6 	bl	1be24 <os_sem_pend>
    rc = ble_npl_sem_pend(&ble_hs_hci_sem,
   10ab8:	4603      	mov	r3, r0
    switch (rc) {
   10aba:	b110      	cbz	r0, 10ac2 <ble_hs_hci_wait_for_ack+0x16>
   10abc:	2806      	cmp	r0, #6
   10abe:	d002      	beq.n	10ac6 <ble_hs_hci_wait_for_ack+0x1a>
        rc = BLE_HS_EOS;
   10ac0:	230b      	movs	r3, #11
}
   10ac2:	4618      	mov	r0, r3
   10ac4:	bd08      	pop	{r3, pc}
        rc = BLE_HS_ETIMEOUT_HCI;
   10ac6:	2313      	movs	r3, #19
    return rc;
   10ac8:	e7fb      	b.n	10ac2 <ble_hs_hci_wait_for_ack+0x16>
   10aca:	bf00      	nop
   10acc:	20007568 	.word	0x20007568

00010ad0 <ble_hs_hci_process_ack>:
{
   10ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ad4:	4607      	mov	r7, r0
   10ad6:	460e      	mov	r6, r1
   10ad8:	4690      	mov	r8, r2
   10ada:	461c      	mov	r4, r3
    memset(out_ack, 0, sizeof *out_ack);
   10adc:	2300      	movs	r3, #0
   10ade:	6023      	str	r3, [r4, #0]
   10ae0:	6063      	str	r3, [r4, #4]
   10ae2:	60a3      	str	r3, [r4, #8]
   10ae4:	60e3      	str	r3, [r4, #12]
    switch (ble_hs_hci_ack->opcode) {
   10ae6:	4b18      	ldr	r3, [pc, #96]	; (10b48 <ble_hs_hci_process_ack+0x78>)
   10ae8:	6818      	ldr	r0, [r3, #0]
   10aea:	7803      	ldrb	r3, [r0, #0]
   10aec:	2b0e      	cmp	r3, #14
   10aee:	d005      	beq.n	10afc <ble_hs_hci_process_ack+0x2c>
   10af0:	2b0f      	cmp	r3, #15
   10af2:	d019      	beq.n	10b28 <ble_hs_hci_process_ack+0x58>
        rc = BLE_HS_EUNKNOWN;
   10af4:	2511      	movs	r5, #17
}
   10af6:	4628      	mov	r0, r5
   10af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_hci_rx_cmd_complete(ble_hs_hci_ack->data,
   10afc:	4622      	mov	r2, r4
   10afe:	7841      	ldrb	r1, [r0, #1]
   10b00:	3002      	adds	r0, #2
   10b02:	f7ff ff8b 	bl	10a1c <ble_hs_hci_rx_cmd_complete>
   10b06:	4605      	mov	r5, r0
    if (rc == 0) {
   10b08:	2d00      	cmp	r5, #0
   10b0a:	d1f4      	bne.n	10af6 <ble_hs_hci_process_ack+0x26>
        if (params_buf == NULL || out_ack->bha_params == NULL) {
   10b0c:	b19e      	cbz	r6, 10b36 <ble_hs_hci_process_ack+0x66>
   10b0e:	6861      	ldr	r1, [r4, #4]
   10b10:	b189      	cbz	r1, 10b36 <ble_hs_hci_process_ack+0x66>
            if (out_ack->bha_params_len > params_buf_len) {
   10b12:	68a3      	ldr	r3, [r4, #8]
   10b14:	4543      	cmp	r3, r8
   10b16:	dd02      	ble.n	10b1e <ble_hs_hci_process_ack+0x4e>
                out_ack->bha_params_len = params_buf_len;
   10b18:	f8c4 8008 	str.w	r8, [r4, #8]
                rc = BLE_HS_ECONTROLLER;
   10b1c:	250c      	movs	r5, #12
            memcpy(params_buf, out_ack->bha_params, out_ack->bha_params_len);
   10b1e:	68a2      	ldr	r2, [r4, #8]
   10b20:	4630      	mov	r0, r6
   10b22:	f7fa feb5 	bl	b890 <memcpy>
   10b26:	e008      	b.n	10b3a <ble_hs_hci_process_ack+0x6a>
        rc = ble_hs_hci_rx_cmd_status(ble_hs_hci_ack->data,
   10b28:	4622      	mov	r2, r4
   10b2a:	7841      	ldrb	r1, [r0, #1]
   10b2c:	3002      	adds	r0, #2
   10b2e:	f7ff ff9a 	bl	10a66 <ble_hs_hci_rx_cmd_status>
   10b32:	4605      	mov	r5, r0
        break;
   10b34:	e7e8      	b.n	10b08 <ble_hs_hci_process_ack+0x38>
            out_ack->bha_params_len = 0;
   10b36:	2300      	movs	r3, #0
   10b38:	60a3      	str	r3, [r4, #8]
        out_ack->bha_params = params_buf;
   10b3a:	6066      	str	r6, [r4, #4]
        if (out_ack->bha_opcode != expected_opcode) {
   10b3c:	89a3      	ldrh	r3, [r4, #12]
   10b3e:	42bb      	cmp	r3, r7
   10b40:	d0d9      	beq.n	10af6 <ble_hs_hci_process_ack+0x26>
            rc = BLE_HS_ECONTROLLER;
   10b42:	250c      	movs	r5, #12
    return rc;
   10b44:	e7d7      	b.n	10af6 <ble_hs_hci_process_ack+0x26>
   10b46:	bf00      	nop
   10b48:	20007410 	.word	0x20007410

00010b4c <ble_hs_hci_unlock>:
{
   10b4c:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   10b4e:	4802      	ldr	r0, [pc, #8]	; (10b58 <ble_hs_hci_unlock+0xc>)
   10b50:	f7fa f90a 	bl	ad68 <os_mutex_release>
}
   10b54:	bd08      	pop	{r3, pc}
   10b56:	bf00      	nop
   10b58:	2000755c 	.word	0x2000755c

00010b5c <ble_hs_hci_rx_ack>:
{
   10b5c:	b508      	push	{r3, lr}
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
   10b5e:	4b06      	ldr	r3, [pc, #24]	; (10b78 <ble_hs_hci_rx_ack+0x1c>)
   10b60:	88db      	ldrh	r3, [r3, #6]
    if (ble_npl_sem_get_count(&ble_hs_hci_sem) > 0) {
   10b62:	b92b      	cbnz	r3, 10b70 <ble_hs_hci_rx_ack+0x14>
    ble_hs_hci_ack = (struct ble_hci_ev *) ack_ev;
   10b64:	4b05      	ldr	r3, [pc, #20]	; (10b7c <ble_hs_hci_rx_ack+0x20>)
   10b66:	6018      	str	r0, [r3, #0]
    return (ble_npl_error_t)os_sem_release(&sem->sem);
   10b68:	4803      	ldr	r0, [pc, #12]	; (10b78 <ble_hs_hci_rx_ack+0x1c>)
   10b6a:	f00b f929 	bl	1bdc0 <os_sem_release>
}
   10b6e:	bd08      	pop	{r3, pc}
        ble_hci_trans_buf_free(ack_ev);
   10b70:	f005 fd6e 	bl	16650 <ble_hci_trans_buf_free>
        return;
   10b74:	e7fb      	b.n	10b6e <ble_hs_hci_rx_ack+0x12>
   10b76:	bf00      	nop
   10b78:	20007568 	.word	0x20007568
   10b7c:	20007410 	.word	0x20007410

00010b80 <ble_hs_hci_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing ACL data fragment.
 */
static struct os_mbuf *
ble_hs_hci_frag_alloc(uint16_t frag_size, void *arg)
{
   10b80:	b508      	push	{r3, lr}
    struct os_mbuf *om;

    /* Prefer the dedicated one-element fragment pool. */
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, 0);
   10b82:	2100      	movs	r1, #0
   10b84:	4806      	ldr	r0, [pc, #24]	; (10ba0 <ble_hs_hci_frag_alloc+0x20>)
   10b86:	f7f9 fb78 	bl	a27a <os_mbuf_get_pkthdr>
    if (om != NULL) {
   10b8a:	b128      	cbz	r0, 10b98 <ble_hs_hci_frag_alloc+0x18>
   10b8c:	4603      	mov	r3, r0
        om->om_data += BLE_HCI_DATA_HDR_SZ;
   10b8e:	6802      	ldr	r2, [r0, #0]
   10b90:	3204      	adds	r2, #4
   10b92:	6002      	str	r2, [r0, #0]
    if (om != NULL) {
        return om;
    }

    return NULL;
}
   10b94:	4618      	mov	r0, r3
   10b96:	bd08      	pop	{r3, pc}
    om = ble_hs_mbuf_acl_pkt();
   10b98:	f000 fd57 	bl	1164a <ble_hs_mbuf_acl_pkt>
   10b9c:	4603      	mov	r3, r0
   10b9e:	e7f9      	b.n	10b94 <ble_hs_hci_frag_alloc+0x14>
   10ba0:	20007534 	.word	0x20007534

00010ba4 <ble_hs_hci_acl_hdr_prepend>:
}

static struct os_mbuf *
ble_hs_hci_acl_hdr_prepend(struct os_mbuf *om, uint16_t handle,
                           uint8_t pb_flag)
{
   10ba4:	b510      	push	{r4, lr}
   10ba6:	b082      	sub	sp, #8
   10ba8:	4604      	mov	r4, r0
   10baa:	4608      	mov	r0, r1
   10bac:	4611      	mov	r1, r2
    struct hci_data_hdr hci_hdr;
    struct os_mbuf *om2;

    put_le16(&hci_hdr.hdh_handle_pb_bc,
   10bae:	2200      	movs	r2, #0
   10bb0:	f000 fbc6 	bl	11340 <ble_hs_hci_util_handle_pb_bc_join>
   10bb4:	4601      	mov	r1, r0
   10bb6:	a801      	add	r0, sp, #4
   10bb8:	f00b f818 	bl	1bbec <put_le16>
             ble_hs_hci_util_handle_pb_bc_join(handle, pb_flag, 0));
    put_le16(&hci_hdr.hdh_len, OS_MBUF_PKTHDR(om)->omp_len);
   10bbc:	8a21      	ldrh	r1, [r4, #16]
   10bbe:	f10d 0006 	add.w	r0, sp, #6
   10bc2:	f00b f813 	bl	1bbec <put_le16>

    om2 = os_mbuf_prepend(om, sizeof hci_hdr);
   10bc6:	2104      	movs	r1, #4
   10bc8:	4620      	mov	r0, r4
   10bca:	f7f9 fd39 	bl	a640 <os_mbuf_prepend>
    if (om2 == NULL) {
   10bce:	4604      	mov	r4, r0
   10bd0:	b158      	cbz	r0, 10bea <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    om = om2;
    om = os_mbuf_pullup(om, sizeof hci_hdr);
   10bd2:	2104      	movs	r1, #4
   10bd4:	f7f9 fe2f 	bl	a836 <os_mbuf_pullup>
    if (om == NULL) {
   10bd8:	4604      	mov	r4, r0
   10bda:	b130      	cbz	r0, 10bea <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    memcpy(om->om_data, &hci_hdr, sizeof hci_hdr);
   10bdc:	6803      	ldr	r3, [r0, #0]
   10bde:	9a01      	ldr	r2, [sp, #4]
   10be0:	601a      	str	r2, [r3, #0]

#if !BLE_MONITOR
    BLE_HS_LOG(DEBUG, "host tx hci data; handle=%d length=%d\n", handle,
   10be2:	f10d 0006 	add.w	r0, sp, #6
   10be6:	f00b f822 	bl	1bc2e <get_le16>
               get_le16(&hci_hdr.hdh_len));
#endif

    return om;
}
   10bea:	4620      	mov	r0, r4
   10bec:	b002      	add	sp, #8
   10bee:	bd10      	pop	{r4, pc}

00010bf0 <ble_hs_hci_set_buf_sz>:
    if (pktlen == 0 || max_pkts == 0) {
   10bf0:	b130      	cbz	r0, 10c00 <ble_hs_hci_set_buf_sz+0x10>
   10bf2:	b139      	cbz	r1, 10c04 <ble_hs_hci_set_buf_sz+0x14>
    ble_hs_hci_buf_sz = pktlen;
   10bf4:	4a04      	ldr	r2, [pc, #16]	; (10c08 <ble_hs_hci_set_buf_sz+0x18>)
   10bf6:	8010      	strh	r0, [r2, #0]
    ble_hs_hci_avail_pkts = max_pkts;
   10bf8:	4b04      	ldr	r3, [pc, #16]	; (10c0c <ble_hs_hci_set_buf_sz+0x1c>)
   10bfa:	8019      	strh	r1, [r3, #0]
    return 0;
   10bfc:	2000      	movs	r0, #0
   10bfe:	4770      	bx	lr
        return BLE_HS_EINVAL;
   10c00:	2003      	movs	r0, #3
   10c02:	4770      	bx	lr
   10c04:	2003      	movs	r0, #3
}
   10c06:	4770      	bx	lr
   10c08:	20007416 	.word	0x20007416
   10c0c:	20007414 	.word	0x20007414

00010c10 <ble_hs_hci_add_avail_pkts>:
{
   10c10:	b508      	push	{r3, lr}
    if (ble_hs_hci_avail_pkts + delta > UINT16_MAX) {
   10c12:	4b07      	ldr	r3, [pc, #28]	; (10c30 <ble_hs_hci_add_avail_pkts+0x20>)
   10c14:	881b      	ldrh	r3, [r3, #0]
   10c16:	181a      	adds	r2, r3, r0
   10c18:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   10c1c:	da03      	bge.n	10c26 <ble_hs_hci_add_avail_pkts+0x16>
        ble_hs_hci_avail_pkts += delta;
   10c1e:	4403      	add	r3, r0
   10c20:	4a03      	ldr	r2, [pc, #12]	; (10c30 <ble_hs_hci_add_avail_pkts+0x20>)
   10c22:	8013      	strh	r3, [r2, #0]
}
   10c24:	bd08      	pop	{r3, pc}
        ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   10c26:	200c      	movs	r0, #12
   10c28:	f7ff f8ae 	bl	fd88 <ble_hs_sched_reset>
   10c2c:	e7fa      	b.n	10c24 <ble_hs_hci_add_avail_pkts+0x14>
   10c2e:	bf00      	nop
   10c30:	20007414 	.word	0x20007414

00010c34 <ble_hs_hci_cmd_tx>:
{
   10c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10c38:	b084      	sub	sp, #16
   10c3a:	4605      	mov	r5, r0
   10c3c:	460c      	mov	r4, r1
   10c3e:	4616      	mov	r6, r2
   10c40:	4698      	mov	r8, r3
   10c42:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    ble_hs_hci_lock();
   10c46:	f7ff ff27 	bl	10a98 <ble_hs_hci_lock>
    rc = ble_hs_hci_cmd_send_buf(opcode, cmd, cmd_len);
   10c4a:	4632      	mov	r2, r6
   10c4c:	4621      	mov	r1, r4
   10c4e:	4628      	mov	r0, r5
   10c50:	f000 f902 	bl	10e58 <ble_hs_hci_cmd_send_buf>
    if (rc != 0) {
   10c54:	4604      	mov	r4, r0
   10c56:	b168      	cbz	r0, 10c74 <ble_hs_hci_cmd_tx+0x40>
    if (ble_hs_hci_ack != NULL) {
   10c58:	4b14      	ldr	r3, [pc, #80]	; (10cac <ble_hs_hci_cmd_tx+0x78>)
   10c5a:	6818      	ldr	r0, [r3, #0]
   10c5c:	b120      	cbz	r0, 10c68 <ble_hs_hci_cmd_tx+0x34>
        ble_hci_trans_buf_free((uint8_t *) ble_hs_hci_ack);
   10c5e:	f005 fcf7 	bl	16650 <ble_hci_trans_buf_free>
        ble_hs_hci_ack = NULL;
   10c62:	4b12      	ldr	r3, [pc, #72]	; (10cac <ble_hs_hci_cmd_tx+0x78>)
   10c64:	2200      	movs	r2, #0
   10c66:	601a      	str	r2, [r3, #0]
    ble_hs_hci_unlock();
   10c68:	f7ff ff70 	bl	10b4c <ble_hs_hci_unlock>
}
   10c6c:	4620      	mov	r0, r4
   10c6e:	b004      	add	sp, #16
   10c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_hs_hci_wait_for_ack();
   10c74:	f7ff ff1a 	bl	10aac <ble_hs_hci_wait_for_ack>
    if (rc != 0) {
   10c78:	4604      	mov	r4, r0
   10c7a:	b110      	cbz	r0, 10c82 <ble_hs_hci_cmd_tx+0x4e>
        ble_hs_sched_reset(rc);
   10c7c:	f7ff f884 	bl	fd88 <ble_hs_sched_reset>
        goto done;
   10c80:	e7ea      	b.n	10c58 <ble_hs_hci_cmd_tx+0x24>
    rc = ble_hs_hci_process_ack(opcode, rsp, rsp_len, &ack);
   10c82:	466b      	mov	r3, sp
   10c84:	463a      	mov	r2, r7
   10c86:	4641      	mov	r1, r8
   10c88:	4628      	mov	r0, r5
   10c8a:	f7ff ff21 	bl	10ad0 <ble_hs_hci_process_ack>
    if (rc != 0) {
   10c8e:	4604      	mov	r4, r0
   10c90:	b948      	cbnz	r0, 10ca6 <ble_hs_hci_cmd_tx+0x72>
    rc = ack.bha_status;
   10c92:	9c00      	ldr	r4, [sp, #0]
    if (!rc && (ack.bha_params_len != rsp_len)) {
   10c94:	2c00      	cmp	r4, #0
   10c96:	d1df      	bne.n	10c58 <ble_hs_hci_cmd_tx+0x24>
   10c98:	9b02      	ldr	r3, [sp, #8]
   10c9a:	42bb      	cmp	r3, r7
   10c9c:	d0dc      	beq.n	10c58 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   10c9e:	4620      	mov	r0, r4
   10ca0:	f7ff f872 	bl	fd88 <ble_hs_sched_reset>
        goto done;
   10ca4:	e7d8      	b.n	10c58 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   10ca6:	f7ff f86f 	bl	fd88 <ble_hs_sched_reset>
        goto done;
   10caa:	e7d5      	b.n	10c58 <ble_hs_hci_cmd_tx+0x24>
   10cac:	20007410 	.word	0x20007410

00010cb0 <ble_hs_hci_rx_evt>:
{
   10cb0:	b508      	push	{r3, lr}
    switch (ev->opcode) {
   10cb2:	7803      	ldrb	r3, [r0, #0]
   10cb4:	2b0e      	cmp	r3, #14
   10cb6:	d006      	beq.n	10cc6 <ble_hs_hci_rx_evt+0x16>
   10cb8:	2b0f      	cmp	r3, #15
   10cba:	d10a      	bne.n	10cd2 <ble_hs_hci_rx_evt+0x22>
        enqueue = (cmd_status->opcode == BLE_HCI_OPCODE_NOP);
   10cbc:	8883      	ldrh	r3, [r0, #4]
   10cbe:	fab3 f383 	clz	r3, r3
   10cc2:	095b      	lsrs	r3, r3, #5
        break;
   10cc4:	e004      	b.n	10cd0 <ble_hs_hci_rx_evt+0x20>
        enqueue = (cmd_complete->opcode == BLE_HCI_OPCODE_NOP);
   10cc6:	f8b0 3003 	ldrh.w	r3, [r0, #3]
   10cca:	fab3 f383 	clz	r3, r3
   10cce:	095b      	lsrs	r3, r3, #5
    if (enqueue) {
   10cd0:	b11b      	cbz	r3, 10cda <ble_hs_hci_rx_evt+0x2a>
        ble_hs_enqueue_hci_event(hci_ev);
   10cd2:	f7ff f83b 	bl	fd4c <ble_hs_enqueue_hci_event>
}
   10cd6:	2000      	movs	r0, #0
   10cd8:	bd08      	pop	{r3, pc}
        ble_hs_hci_rx_ack(hci_ev);
   10cda:	f7ff ff3f 	bl	10b5c <ble_hs_hci_rx_ack>
   10cde:	e7fa      	b.n	10cd6 <ble_hs_hci_rx_evt+0x26>

00010ce0 <ble_hs_hci_acl_tx_now>:

int
ble_hs_hci_acl_tx_now(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   10ce0:	b570      	push	{r4, r5, r6, lr}
   10ce2:	b082      	sub	sp, #8
   10ce4:	4604      	mov	r4, r0
   10ce6:	460d      	mov	r5, r1
    uint8_t pb;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    txom = *om;
   10ce8:	680b      	ldr	r3, [r1, #0]
   10cea:	9301      	str	r3, [sp, #4]
    *om = NULL;
   10cec:	2300      	movs	r3, #0
   10cee:	600b      	str	r3, [r1, #0]

    if (!(conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG)) {
   10cf0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   10cf4:	f013 0f04 	tst.w	r3, #4
   10cf8:	d02e      	beq.n	10d58 <ble_hs_hci_acl_tx_now+0x78>
         * After sending the first fragment, pb gets set appropriately for all
         * subsequent fragments in this packet.
         */
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
    } else {
        pb = BLE_HCI_PB_MIDDLE;
   10cfa:	2601      	movs	r6, #1
    }

    /* Send fragments until the entire packet has been sent. */
    while (txom != NULL && ble_hs_hci_avail_pkts > 0) {
   10cfc:	9b01      	ldr	r3, [sp, #4]
   10cfe:	b36b      	cbz	r3, 10d5c <ble_hs_hci_acl_tx_now+0x7c>
   10d00:	4a23      	ldr	r2, [pc, #140]	; (10d90 <ble_hs_hci_acl_tx_now+0xb0>)
   10d02:	8812      	ldrh	r2, [r2, #0]
   10d04:	b352      	cbz	r2, 10d5c <ble_hs_hci_acl_tx_now+0x7c>
        frag = mem_split_frag(&txom, ble_hs_hci_max_acl_payload_sz(),
   10d06:	f7ff fec1 	bl	10a8c <ble_hs_hci_max_acl_payload_sz>
   10d0a:	2300      	movs	r3, #0
   10d0c:	4a21      	ldr	r2, [pc, #132]	; (10d94 <ble_hs_hci_acl_tx_now+0xb4>)
   10d0e:	4601      	mov	r1, r0
   10d10:	a801      	add	r0, sp, #4
   10d12:	f006 fae2 	bl	172da <mem_split_frag>
                              ble_hs_hci_frag_alloc, NULL);
        if (frag == NULL) {
   10d16:	b1d8      	cbz	r0, 10d50 <ble_hs_hci_acl_tx_now+0x70>
            *om = txom;
            return BLE_HS_EAGAIN;
        }

        frag = ble_hs_hci_acl_hdr_prepend(frag, conn->bhc_handle, pb);
   10d18:	4632      	mov	r2, r6
   10d1a:	88a1      	ldrh	r1, [r4, #4]
   10d1c:	f7ff ff42 	bl	10ba4 <ble_hs_hci_acl_hdr_prepend>
        if (frag == NULL) {
   10d20:	4606      	mov	r6, r0
   10d22:	b338      	cbz	r0, 10d74 <ble_hs_hci_acl_tx_now+0x94>
            goto err;
        }

#if !BLE_MONITOR
        BLE_HS_LOG(DEBUG, "ble_hs_hci_acl_tx(): ");
        ble_hs_log_mbuf(frag);
   10d24:	f000 fc64 	bl	115f0 <ble_hs_log_mbuf>
        BLE_HS_LOG(DEBUG, "\n");
#endif

        rc = ble_hs_tx_data(frag);
   10d28:	4630      	mov	r0, r6
   10d2a:	f7ff f892 	bl	fe52 <ble_hs_tx_data>
        if (rc != 0) {
   10d2e:	4606      	mov	r6, r0
   10d30:	bb08      	cbnz	r0, 10d76 <ble_hs_hci_acl_tx_now+0x96>
        }

        /* If any fragments remain, they should be marked as 'middle'
         * fragments.
         */
        conn->bhc_flags |= BLE_HS_CONN_F_TX_FRAG;
   10d32:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10d36:	f043 0304 	orr.w	r3, r3, #4
   10d3a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pb = BLE_HCI_PB_MIDDLE;

        /* Account for the controller buf that will hold the txed fragment. */
        conn->bhc_outstanding_pkts++;
   10d3e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   10d40:	3301      	adds	r3, #1
   10d42:	8723      	strh	r3, [r4, #56]	; 0x38
        ble_hs_hci_avail_pkts--;
   10d44:	4a12      	ldr	r2, [pc, #72]	; (10d90 <ble_hs_hci_acl_tx_now+0xb0>)
   10d46:	8813      	ldrh	r3, [r2, #0]
   10d48:	3b01      	subs	r3, #1
   10d4a:	8013      	strh	r3, [r2, #0]
        pb = BLE_HCI_PB_MIDDLE;
   10d4c:	2601      	movs	r6, #1
   10d4e:	e7d5      	b.n	10cfc <ble_hs_hci_acl_tx_now+0x1c>
            *om = txom;
   10d50:	9b01      	ldr	r3, [sp, #4]
   10d52:	602b      	str	r3, [r5, #0]
            return BLE_HS_EAGAIN;
   10d54:	2601      	movs	r6, #1
   10d56:	e017      	b.n	10d88 <ble_hs_hci_acl_tx_now+0xa8>
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
   10d58:	2600      	movs	r6, #0
   10d5a:	e7cf      	b.n	10cfc <ble_hs_hci_acl_tx_now+0x1c>
    }

    if (txom != NULL) {
   10d5c:	b113      	cbz	r3, 10d64 <ble_hs_hci_acl_tx_now+0x84>
        /* The controller couldn't accommodate some or all of the packet. */
        *om = txom;
   10d5e:	602b      	str	r3, [r5, #0]
        return BLE_HS_EAGAIN;
   10d60:	2601      	movs	r6, #1
   10d62:	e011      	b.n	10d88 <ble_hs_hci_acl_tx_now+0xa8>
    }

    /* The entire packet was transmitted. */
    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   10d64:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10d68:	f023 0304 	bic.w	r3, r3, #4
   10d6c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    return 0;
   10d70:	2600      	movs	r6, #0
   10d72:	e009      	b.n	10d88 <ble_hs_hci_acl_tx_now+0xa8>
            rc = BLE_HS_ENOMEM;
   10d74:	2606      	movs	r6, #6

err:
    BLE_HS_DBG_ASSERT(rc != 0);

    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   10d76:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10d7a:	f023 0304 	bic.w	r3, r3, #4
   10d7e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    os_mbuf_free_chain(txom);
   10d82:	9801      	ldr	r0, [sp, #4]
   10d84:	f7f9 fa9e 	bl	a2c4 <os_mbuf_free_chain>
    return rc;
}
   10d88:	4630      	mov	r0, r6
   10d8a:	b002      	add	sp, #8
   10d8c:	bd70      	pop	{r4, r5, r6, pc}
   10d8e:	bf00      	nop
   10d90:	20007414 	.word	0x20007414
   10d94:	00010b81 	.word	0x00010b81

00010d98 <ble_hs_hci_acl_tx>:
 *                                  error.
 *
 */
int
ble_hs_hci_acl_tx(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   10d98:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    /* If this conn is already backed up, don't even try to send. */
    if (STAILQ_FIRST(&conn->bhc_tx_q) != NULL) {
   10d9a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   10d9c:	b10b      	cbz	r3, 10da2 <ble_hs_hci_acl_tx+0xa>
        return BLE_HS_EAGAIN;
   10d9e:	2001      	movs	r0, #1
    }

    return ble_hs_hci_acl_tx_now(conn, om);
}
   10da0:	bd08      	pop	{r3, pc}
    return ble_hs_hci_acl_tx_now(conn, om);
   10da2:	f7ff ff9d 	bl	10ce0 <ble_hs_hci_acl_tx_now>
   10da6:	e7fb      	b.n	10da0 <ble_hs_hci_acl_tx+0x8>

00010da8 <ble_hs_hci_set_le_supported_feat>:

void
ble_hs_hci_set_le_supported_feat(uint32_t feat)
{
    ble_hs_hci_sup_feat = feat;
   10da8:	4b01      	ldr	r3, [pc, #4]	; (10db0 <ble_hs_hci_set_le_supported_feat+0x8>)
   10daa:	6018      	str	r0, [r3, #0]
}
   10dac:	4770      	bx	lr
   10dae:	bf00      	nop
   10db0:	20007570 	.word	0x20007570

00010db4 <ble_hs_hci_set_hci_version>:
}

void
ble_hs_hci_set_hci_version(uint8_t hci_version)
{
    ble_hs_hci_version = hci_version;
   10db4:	4b01      	ldr	r3, [pc, #4]	; (10dbc <ble_hs_hci_set_hci_version+0x8>)
   10db6:	7018      	strb	r0, [r3, #0]
}
   10db8:	4770      	bx	lr
   10dba:	bf00      	nop
   10dbc:	20007574 	.word	0x20007574

00010dc0 <ble_hs_hci_get_hci_version>:

uint8_t
ble_hs_hci_get_hci_version(void)
{
    return ble_hs_hci_version;
}
   10dc0:	4b01      	ldr	r3, [pc, #4]	; (10dc8 <ble_hs_hci_get_hci_version+0x8>)
   10dc2:	7818      	ldrb	r0, [r3, #0]
   10dc4:	4770      	bx	lr
   10dc6:	bf00      	nop
   10dc8:	20007574 	.word	0x20007574

00010dcc <ble_hs_hci_init>:

void
ble_hs_hci_init(void)
{
   10dcc:	b500      	push	{lr}
   10dce:	b083      	sub	sp, #12
    return (ble_npl_error_t)os_sem_init(&sem->sem, tokens);
   10dd0:	2100      	movs	r1, #0
   10dd2:	480a      	ldr	r0, [pc, #40]	; (10dfc <ble_hs_hci_init+0x30>)
   10dd4:	f00a ffeb 	bl	1bdae <os_sem_init>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   10dd8:	4809      	ldr	r0, [pc, #36]	; (10e00 <ble_hs_hci_init+0x34>)
   10dda:	f7f9 ffbb 	bl	ad54 <os_mutex_init>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = ble_npl_mutex_init(&ble_hs_hci_mutex);
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = mem_init_mbuf_pool(ble_hs_hci_frag_data,
   10dde:	4b09      	ldr	r3, [pc, #36]	; (10e04 <ble_hs_hci_init+0x38>)
   10de0:	9301      	str	r3, [sp, #4]
   10de2:	f44f 738e 	mov.w	r3, #284	; 0x11c
   10de6:	9300      	str	r3, [sp, #0]
   10de8:	2301      	movs	r3, #1
   10dea:	4a07      	ldr	r2, [pc, #28]	; (10e08 <ble_hs_hci_init+0x3c>)
   10dec:	4907      	ldr	r1, [pc, #28]	; (10e0c <ble_hs_hci_init+0x40>)
   10dee:	4808      	ldr	r0, [pc, #32]	; (10e10 <ble_hs_hci_init+0x44>)
   10df0:	f006 fa5b 	bl	172aa <mem_init_mbuf_pool>
                            &ble_hs_hci_frag_mbuf_pool,
                            1,
                            BLE_HS_HCI_FRAG_MEMBLOCK_SIZE,
                            "ble_hs_hci_frag");
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}
   10df4:	b003      	add	sp, #12
   10df6:	f85d fb04 	ldr.w	pc, [sp], #4
   10dfa:	bf00      	nop
   10dfc:	20007568 	.word	0x20007568
   10e00:	2000755c 	.word	0x2000755c
   10e04:	00028dd8 	.word	0x00028dd8
   10e08:	20007534 	.word	0x20007534
   10e0c:	20007540 	.word	0x20007540
   10e10:	20007418 	.word	0x20007418

00010e14 <ble_hs_hci_cmd_transport>:
#include "ble_hs_priv.h"
#include "ble_monitor_priv.h"

static int
ble_hs_hci_cmd_transport(struct ble_hci_cmd *cmd)
{
   10e14:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_COMMAND_PKT, cmd,
                     cmd->length + sizeof(*cmd));
#endif

    rc = ble_hci_trans_hs_cmd_tx((uint8_t *) cmd);
   10e16:	f005 fb95 	bl	16544 <ble_hci_trans_hs_cmd_tx>
    switch (rc) {
   10e1a:	4603      	mov	r3, r0
   10e1c:	b110      	cbz	r0, 10e24 <ble_hs_hci_cmd_transport+0x10>
   10e1e:	2807      	cmp	r0, #7
   10e20:	d002      	beq.n	10e28 <ble_hs_hci_cmd_transport+0x14>

    case BLE_ERR_MEM_CAPACITY:
        return BLE_HS_ENOMEM_EVT;

    default:
        return BLE_HS_EUNKNOWN;
   10e22:	2311      	movs	r3, #17
    }
}
   10e24:	4618      	mov	r0, r3
   10e26:	bd08      	pop	{r3, pc}
        return BLE_HS_ENOMEM_EVT;
   10e28:	2314      	movs	r3, #20
   10e2a:	e7fb      	b.n	10e24 <ble_hs_hci_cmd_transport+0x10>

00010e2c <ble_hs_hci_cmd_send>:

static int
ble_hs_hci_cmd_send(uint16_t opcode, uint8_t len, const void *cmddata)
{
   10e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10e2e:	4606      	mov	r6, r0
   10e30:	460d      	mov	r5, r1
   10e32:	4617      	mov	r7, r2
    struct ble_hci_cmd *cmd;
    int rc;

    cmd = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_CMD);
   10e34:	2003      	movs	r0, #3
   10e36:	f005 fbdd 	bl	165f4 <ble_hci_trans_buf_alloc>
   10e3a:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT(cmd != NULL);

    cmd->opcode = htole16(opcode);
   10e3c:	8006      	strh	r6, [r0, #0]
    cmd->length = len;
   10e3e:	7085      	strb	r5, [r0, #2]
    if (len != 0) {
   10e40:	b91d      	cbnz	r5, 10e4a <ble_hs_hci_cmd_send+0x1e>
        memcpy(cmd->data, cmddata, len);
    }

    rc = ble_hs_hci_cmd_transport(cmd);
   10e42:	4620      	mov	r0, r4
   10e44:	f7ff ffe6 	bl	10e14 <ble_hs_hci_cmd_transport>
    } else {
        BLE_HS_LOG(DEBUG, "ble_hs_hci_cmd_send failure; rc=%d\n", rc);
    }

    return rc;
}
   10e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(cmd->data, cmddata, len);
   10e4a:	462a      	mov	r2, r5
   10e4c:	4639      	mov	r1, r7
   10e4e:	3003      	adds	r0, #3
   10e50:	f7fa fd1e 	bl	b890 <memcpy>
   10e54:	e7f5      	b.n	10e42 <ble_hs_hci_cmd_send+0x16>
	...

00010e58 <ble_hs_hci_cmd_send_buf>:

int
ble_hs_hci_cmd_send_buf(uint16_t opcode, const void *buf, uint8_t buf_len)
{
   10e58:	b570      	push	{r4, r5, r6, lr}
   10e5a:	4604      	mov	r4, r0
   10e5c:	460e      	mov	r6, r1
   10e5e:	4615      	mov	r5, r2
    switch (ble_hs_sync_state) {
   10e60:	4b0a      	ldr	r3, [pc, #40]	; (10e8c <ble_hs_hci_cmd_send_buf+0x34>)
   10e62:	781b      	ldrb	r3, [r3, #0]
   10e64:	2b01      	cmp	r3, #1
   10e66:	d006      	beq.n	10e76 <ble_hs_hci_cmd_send_buf+0x1e>
   10e68:	b11b      	cbz	r3, 10e72 <ble_hs_hci_cmd_send_buf+0x1a>
   10e6a:	2b02      	cmp	r3, #2
   10e6c:	d006      	beq.n	10e7c <ble_hs_hci_cmd_send_buf+0x24>
    case BLE_HS_SYNC_STATE_GOOD:
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HS_EUNKNOWN;
   10e6e:	2011      	movs	r0, #17
   10e70:	e009      	b.n	10e86 <ble_hs_hci_cmd_send_buf+0x2e>
        return BLE_HS_ENOTSYNCED;
   10e72:	2016      	movs	r0, #22
   10e74:	e007      	b.n	10e86 <ble_hs_hci_cmd_send_buf+0x2e>
        if (!ble_hs_is_parent_task()) {
   10e76:	f7fe fe63 	bl	fb40 <ble_hs_is_parent_task>
   10e7a:	b128      	cbz	r0, 10e88 <ble_hs_hci_cmd_send_buf+0x30>
    }

    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
   10e7c:	4632      	mov	r2, r6
   10e7e:	4629      	mov	r1, r5
   10e80:	4620      	mov	r0, r4
   10e82:	f7ff ffd3 	bl	10e2c <ble_hs_hci_cmd_send>
}
   10e86:	bd70      	pop	{r4, r5, r6, pc}
            return BLE_HS_ENOTSYNCED;
   10e88:	2016      	movs	r0, #22
   10e8a:	e7fc      	b.n	10e86 <ble_hs_hci_cmd_send_buf+0x2e>
   10e8c:	20007360 	.word	0x20007360

00010e90 <ble_hs_hci_evt_dispatch_find>:
ble_hs_hci_evt_dispatch_find(uint8_t event_code)
{
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   10e90:	2300      	movs	r3, #0
   10e92:	2b05      	cmp	r3, #5
   10e94:	d808      	bhi.n	10ea8 <ble_hs_hci_evt_dispatch_find+0x18>
        entry = ble_hs_hci_evt_dispatch + i;
   10e96:	4a06      	ldr	r2, [pc, #24]	; (10eb0 <ble_hs_hci_evt_dispatch_find+0x20>)
   10e98:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
        if (entry->event_code == event_code) {
   10e9c:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   10ea0:	4282      	cmp	r2, r0
   10ea2:	d002      	beq.n	10eaa <ble_hs_hci_evt_dispatch_find+0x1a>
    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   10ea4:	3301      	adds	r3, #1
   10ea6:	e7f4      	b.n	10e92 <ble_hs_hci_evt_dispatch_find+0x2>
            return entry;
        }
    }

    return NULL;
   10ea8:	2100      	movs	r1, #0
}
   10eaa:	4608      	mov	r0, r1
   10eac:	4770      	bx	lr
   10eae:	bf00      	nop
   10eb0:	00028de8 	.word	0x00028de8

00010eb4 <ble_hs_hci_evt_le_dispatch_find>:

static ble_hs_hci_evt_le_fn *
ble_hs_hci_evt_le_dispatch_find(uint8_t event_code)
{
    if (event_code >= BLE_HS_HCI_EVT_LE_DISPATCH_SZ) {
   10eb4:	2818      	cmp	r0, #24
   10eb6:	d803      	bhi.n	10ec0 <ble_hs_hci_evt_le_dispatch_find+0xc>
        return NULL;
    }

    return ble_hs_hci_evt_le_dispatch[event_code];
   10eb8:	4b02      	ldr	r3, [pc, #8]	; (10ec4 <ble_hs_hci_evt_le_dispatch_find+0x10>)
   10eba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   10ebe:	4770      	bx	lr
        return NULL;
   10ec0:	2000      	movs	r0, #0
}
   10ec2:	4770      	bx	lr
   10ec4:	00028e18 	.word	0x00028e18

00010ec8 <ble_hs_hci_evt_le_meta>:
ble_hs_hci_evt_le_meta(uint8_t event_code, const void *data, unsigned int len)
{
    const struct ble_hci_ev_le_meta *ev = data;
    ble_hs_hci_evt_le_fn *fn;

    if (len < sizeof(*ev)) {
   10ec8:	b16a      	cbz	r2, 10ee6 <ble_hs_hci_evt_le_meta+0x1e>
{
   10eca:	b570      	push	{r4, r5, r6, lr}
   10ecc:	4615      	mov	r5, r2
   10ece:	460c      	mov	r4, r1
        return BLE_HS_ECONTROLLER;
    }

    fn = ble_hs_hci_evt_le_dispatch_find(ev->subevent);
   10ed0:	780e      	ldrb	r6, [r1, #0]
   10ed2:	4630      	mov	r0, r6
   10ed4:	f7ff ffee 	bl	10eb4 <ble_hs_hci_evt_le_dispatch_find>
    if (fn) {
   10ed8:	4603      	mov	r3, r0
   10eda:	b130      	cbz	r0, 10eea <ble_hs_hci_evt_le_meta+0x22>
        return fn(ev->subevent, data, len);
   10edc:	462a      	mov	r2, r5
   10ede:	4621      	mov	r1, r4
   10ee0:	4630      	mov	r0, r6
   10ee2:	4798      	blx	r3
    }

    return 0;
}
   10ee4:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   10ee6:	200c      	movs	r0, #12
}
   10ee8:	4770      	bx	lr
    return 0;
   10eea:	2000      	movs	r0, #0
   10eec:	e7fa      	b.n	10ee4 <ble_hs_hci_evt_le_meta+0x1c>

00010eee <ble_hs_hci_evt_le_adv_rpt_first_pass>:
{
    const struct ble_hci_ev_le_subev_adv_rpt *ev = data;
    const struct adv_report *rpt;
    int i;

    if (len < sizeof(*ev)) {
   10eee:	2901      	cmp	r1, #1
   10ef0:	d91a      	bls.n	10f28 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3a>
{
   10ef2:	b410      	push	{r4}
        return BLE_HS_ECONTROLLER;
    }

    len -= sizeof(*ev);
   10ef4:	3902      	subs	r1, #2
    data += sizeof(*ev);
   10ef6:	1c84      	adds	r4, r0, #2

    if (ev->num_reports < BLE_HCI_LE_ADV_RPT_NUM_RPTS_MIN ||
   10ef8:	7840      	ldrb	r0, [r0, #1]
   10efa:	1e43      	subs	r3, r0, #1
   10efc:	b2db      	uxtb	r3, r3
   10efe:	2b18      	cmp	r3, #24
   10f00:	d814      	bhi.n	10f2c <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3e>
        ev->num_reports > BLE_HCI_LE_ADV_RPT_NUM_RPTS_MAX) {
        return BLE_HS_EBADDATA;
    }

    for (i = 0; i < ev->num_reports; i++) {
   10f02:	2200      	movs	r2, #0
   10f04:	4290      	cmp	r0, r2
   10f06:	dd0a      	ble.n	10f1e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x30>
        /* extra byte for RSSI after adv data */
        if (len < sizeof(*rpt) + 1) {
   10f08:	2909      	cmp	r1, #9
   10f0a:	d913      	bls.n	10f34 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x46>
            return BLE_HS_ECONTROLLER;
        }

        rpt = data;

        len -= sizeof(*rpt) + 1;
   10f0c:	390a      	subs	r1, #10
        data += sizeof(rpt) + 1;

        if (rpt->data_len > len) {
   10f0e:	7a23      	ldrb	r3, [r4, #8]
   10f10:	428b      	cmp	r3, r1
   10f12:	d811      	bhi.n	10f38 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x4a>
            return BLE_HS_ECONTROLLER;
        }

        len -= rpt->data_len;
   10f14:	1ac9      	subs	r1, r1, r3
        data += rpt->data_len;
   10f16:	3305      	adds	r3, #5
   10f18:	441c      	add	r4, r3
    for (i = 0; i < ev->num_reports; i++) {
   10f1a:	3201      	adds	r2, #1
   10f1c:	e7f2      	b.n	10f04 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x16>
    }

    /* Make sure length was correct */
    if (len) {
   10f1e:	b909      	cbnz	r1, 10f24 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x36>
        return BLE_HS_ECONTROLLER;
    }

    return 0;
   10f20:	2000      	movs	r0, #0
   10f22:	e004      	b.n	10f2e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>
        return BLE_HS_ECONTROLLER;
   10f24:	200c      	movs	r0, #12
   10f26:	e002      	b.n	10f2e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>
        return BLE_HS_ECONTROLLER;
   10f28:	200c      	movs	r0, #12
}
   10f2a:	4770      	bx	lr
        return BLE_HS_EBADDATA;
   10f2c:	200a      	movs	r0, #10
}
   10f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
   10f32:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   10f34:	200c      	movs	r0, #12
   10f36:	e7fa      	b.n	10f2e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>
            return BLE_HS_ECONTROLLER;
   10f38:	200c      	movs	r0, #12
   10f3a:	e7f8      	b.n	10f2e <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>

00010f3c <ble_hs_hci_evt_le_ext_adv_rpt>:

        report = (const void *) &report->data[report->data_len];
    }
#endif
    return 0;
}
   10f3c:	2000      	movs	r0, #0
   10f3e:	4770      	bx	lr

00010f40 <ble_hs_hci_evt_le_periodic_adv_sync_estab>:

    ble_gap_rx_peroidic_adv_sync_estab(ev);
#endif

    return 0;
}
   10f40:	2000      	movs	r0, #0
   10f42:	4770      	bx	lr

00010f44 <ble_hs_hci_evt_le_periodic_adv_rpt>:

    ble_gap_rx_periodic_adv_rpt(ev);
#endif

return 0;
}
   10f44:	2000      	movs	r0, #0
   10f46:	4770      	bx	lr

00010f48 <ble_hs_hci_evt_le_periodic_adv_sync_lost>:

    ble_gap_rx_periodic_adv_sync_lost(ev);

#endif
    return 0;
}
   10f48:	2000      	movs	r0, #0
   10f4a:	4770      	bx	lr

00010f4c <ble_hs_hci_evt_le_periodic_adv_sync_transfer>:

    ble_gap_rx_periodic_adv_sync_transfer(ev);

#endif
    return 0;
}
   10f4c:	2000      	movs	r0, #0
   10f4e:	4770      	bx	lr

00010f50 <ble_hs_hci_evt_le_scan_timeout>:
    }

    ble_gap_rx_le_scan_timeout();
#endif
    return 0;
}
   10f50:	2000      	movs	r0, #0
   10f52:	4770      	bx	lr

00010f54 <ble_hs_hci_evt_le_adv_set_terminated>:
    }
    ble_gap_rx_adv_set_terminated(ev);
#endif

    return 0;
}
   10f54:	2000      	movs	r0, #0
   10f56:	4770      	bx	lr

00010f58 <ble_hs_hci_evt_le_scan_req_rcvd>:

    ble_gap_rx_scan_req_rcvd(ev);
#endif

    return 0;
}
   10f58:	2000      	movs	r0, #0
   10f5a:	4770      	bx	lr

00010f5c <ble_hs_hci_evt_hw_error>:
    if (len != sizeof(*ev)) {
   10f5c:	2a01      	cmp	r2, #1
   10f5e:	d001      	beq.n	10f64 <ble_hs_hci_evt_hw_error+0x8>
        return BLE_HS_ECONTROLLER;
   10f60:	200c      	movs	r0, #12
}
   10f62:	4770      	bx	lr
{
   10f64:	b508      	push	{r3, lr}
    ble_hs_hw_error(ev->hw_code);
   10f66:	7808      	ldrb	r0, [r1, #0]
   10f68:	f7fe ff1e 	bl	fda8 <ble_hs_hw_error>
    return 0;
   10f6c:	2000      	movs	r0, #0
}
   10f6e:	bd08      	pop	{r3, pc}

00010f70 <ble_hs_hci_evt_enc_key_refresh>:
    if (len != sizeof(*ev)) {
   10f70:	2a03      	cmp	r2, #3
   10f72:	d001      	beq.n	10f78 <ble_hs_hci_evt_enc_key_refresh+0x8>
        return BLE_HS_ECONTROLLER;
   10f74:	200c      	movs	r0, #12
}
   10f76:	4770      	bx	lr
{
   10f78:	b508      	push	{r3, lr}
   10f7a:	4608      	mov	r0, r1
    ble_sm_enc_key_refresh_rx(ev);
   10f7c:	f002 fcb8 	bl	138f0 <ble_sm_enc_key_refresh_rx>
    return 0;
   10f80:	2000      	movs	r0, #0
}
   10f82:	bd08      	pop	{r3, pc}

00010f84 <ble_hs_hci_evt_encrypt_change>:
    if (len != sizeof (*ev)) {
   10f84:	2a04      	cmp	r2, #4
   10f86:	d001      	beq.n	10f8c <ble_hs_hci_evt_encrypt_change+0x8>
        return BLE_HS_ECONTROLLER;
   10f88:	200c      	movs	r0, #12
}
   10f8a:	4770      	bx	lr
{
   10f8c:	b508      	push	{r3, lr}
   10f8e:	4608      	mov	r0, r1
    ble_sm_enc_change_rx(ev);
   10f90:	f002 fca4 	bl	138dc <ble_sm_enc_change_rx>
    return 0;
   10f94:	2000      	movs	r0, #0
}
   10f96:	bd08      	pop	{r3, pc}

00010f98 <ble_hs_hci_evt_disconn_complete>:
    if (len != sizeof(*ev)) {
   10f98:	2a04      	cmp	r2, #4
   10f9a:	d001      	beq.n	10fa0 <ble_hs_hci_evt_disconn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   10f9c:	200c      	movs	r0, #12
}
   10f9e:	4770      	bx	lr
{
   10fa0:	b510      	push	{r4, lr}
   10fa2:	460c      	mov	r4, r1
    ble_hs_lock();
   10fa4:	f7fe fdf0 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   10fa8:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10fac:	f7ff fbf6 	bl	1079c <ble_hs_conn_find>
    if (conn != NULL) {
   10fb0:	b110      	cbz	r0, 10fb8 <ble_hs_hci_evt_disconn_complete+0x20>
        ble_hs_hci_add_avail_pkts(conn->bhc_outstanding_pkts);
   10fb2:	8f00      	ldrh	r0, [r0, #56]	; 0x38
   10fb4:	f7ff fe2c 	bl	10c10 <ble_hs_hci_add_avail_pkts>
    ble_hs_unlock();
   10fb8:	f7fe fdea 	bl	fb90 <ble_hs_unlock>
    ble_gap_rx_disconn_complete(ev);
   10fbc:	4620      	mov	r0, r4
   10fbe:	f7fc fae7 	bl	d590 <ble_gap_rx_disconn_complete>
    ble_hs_wakeup_tx();
   10fc2:	f7fe fdfb 	bl	fbbc <ble_hs_wakeup_tx>
    return 0;
   10fc6:	2000      	movs	r0, #0
}
   10fc8:	bd10      	pop	{r4, pc}

00010fca <ble_hs_hci_evt_num_completed_pkts>:
    if (len != sizeof(*ev) + (ev->count * sizeof(ev->completed[0]))) {
   10fca:	780b      	ldrb	r3, [r1, #0]
   10fcc:	009b      	lsls	r3, r3, #2
   10fce:	3301      	adds	r3, #1
   10fd0:	4293      	cmp	r3, r2
   10fd2:	d129      	bne.n	11028 <ble_hs_hci_evt_num_completed_pkts+0x5e>
{
   10fd4:	b570      	push	{r4, r5, r6, lr}
   10fd6:	460d      	mov	r5, r1
    for (i = 0; i < ev->count; i++) {
   10fd8:	2400      	movs	r4, #0
   10fda:	e007      	b.n	10fec <ble_hs_hci_evt_num_completed_pkts+0x22>
                    conn->bhc_outstanding_pkts -= num_pkts;
   10fdc:	1b9b      	subs	r3, r3, r6
   10fde:	8703      	strh	r3, [r0, #56]	; 0x38
                ble_hs_hci_add_avail_pkts(num_pkts);
   10fe0:	4630      	mov	r0, r6
   10fe2:	f7ff fe15 	bl	10c10 <ble_hs_hci_add_avail_pkts>
            ble_hs_unlock();
   10fe6:	f7fe fdd3 	bl	fb90 <ble_hs_unlock>
    for (i = 0; i < ev->count; i++) {
   10fea:	3401      	adds	r4, #1
   10fec:	782b      	ldrb	r3, [r5, #0]
   10fee:	42a3      	cmp	r3, r4
   10ff0:	dd16      	ble.n	11020 <ble_hs_hci_evt_num_completed_pkts+0x56>
        num_pkts = le16toh(ev->completed[i].packets);
   10ff2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   10ff6:	f8b3 6003 	ldrh.w	r6, [r3, #3]
        if (num_pkts > 0) {
   10ffa:	2e00      	cmp	r6, #0
   10ffc:	d0f5      	beq.n	10fea <ble_hs_hci_evt_num_completed_pkts+0x20>
            ble_hs_lock();
   10ffe:	f7fe fdc3 	bl	fb88 <ble_hs_lock>
            conn = ble_hs_conn_find(le16toh(ev->completed[i].handle));
   11002:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   11006:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1100a:	f7ff fbc7 	bl	1079c <ble_hs_conn_find>
            if (conn != NULL) {
   1100e:	2800      	cmp	r0, #0
   11010:	d0e9      	beq.n	10fe6 <ble_hs_hci_evt_num_completed_pkts+0x1c>
                if (conn->bhc_outstanding_pkts < num_pkts) {
   11012:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   11014:	42b3      	cmp	r3, r6
   11016:	d2e1      	bcs.n	10fdc <ble_hs_hci_evt_num_completed_pkts+0x12>
                    ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   11018:	200c      	movs	r0, #12
   1101a:	f7fe feb5 	bl	fd88 <ble_hs_sched_reset>
   1101e:	e7df      	b.n	10fe0 <ble_hs_hci_evt_num_completed_pkts+0x16>
    ble_hs_wakeup_tx();
   11020:	f7fe fdcc 	bl	fbbc <ble_hs_wakeup_tx>
    return 0;
   11024:	2000      	movs	r0, #0
}
   11026:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   11028:	200c      	movs	r0, #12
}
   1102a:	4770      	bx	lr

0001102c <ble_hs_hci_evt_le_phy_update_complete>:
ble_hs_hci_evt_le_phy_update_complete(uint8_t subevent, const void *data,
                                      unsigned int len)
{
    const struct ble_hci_ev_le_subev_phy_update_complete *ev = data;

    if (len != sizeof(*ev)) {
   1102c:	2a06      	cmp	r2, #6
   1102e:	d001      	beq.n	11034 <ble_hs_hci_evt_le_phy_update_complete+0x8>
        return BLE_HS_ECONTROLLER;
   11030:	200c      	movs	r0, #12
    }

    ble_gap_rx_phy_update_complete(ev);

    return 0;
}
   11032:	4770      	bx	lr
{
   11034:	b508      	push	{r3, lr}
   11036:	4608      	mov	r0, r1
    ble_gap_rx_phy_update_complete(ev);
   11038:	f7fc f82b 	bl	d092 <ble_gap_rx_phy_update_complete>
    return 0;
   1103c:	2000      	movs	r0, #0
}
   1103e:	bd08      	pop	{r3, pc}

00011040 <ble_hs_hci_evt_le_dir_adv_rpt>:
{
   11040:	b530      	push	{r4, r5, lr}
   11042:	b087      	sub	sp, #28
    struct ble_gap_disc_desc desc = {0};
   11044:	2300      	movs	r3, #0
   11046:	9300      	str	r3, [sp, #0]
   11048:	9301      	str	r3, [sp, #4]
   1104a:	9302      	str	r3, [sp, #8]
   1104c:	9303      	str	r3, [sp, #12]
   1104e:	9304      	str	r3, [sp, #16]
   11050:	9305      	str	r3, [sp, #20]
    if (len < sizeof(*ev) || len != ev->num_reports * sizeof(ev->reports[0])) {
   11052:	2a01      	cmp	r2, #1
   11054:	d92f      	bls.n	110b6 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>
   11056:	784b      	ldrb	r3, [r1, #1]
   11058:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
   1105c:	d12d      	bne.n	110ba <ble_hs_hci_evt_le_dir_adv_rpt+0x7a>
   1105e:	460d      	mov	r5, r1
    for (i = 0; i < ev->num_reports; i++) {
   11060:	2400      	movs	r4, #0
   11062:	e022      	b.n	110aa <ble_hs_hci_evt_le_dir_adv_rpt+0x6a>
        desc.event_type = ev->reports[i].type;
   11064:	eb05 1304 	add.w	r3, r5, r4, lsl #4
   11068:	789a      	ldrb	r2, [r3, #2]
   1106a:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = ev->reports[i].addr_type;
   1106e:	78da      	ldrb	r2, [r3, #3]
   11070:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, ev->reports[i].addr, BLE_DEV_ADDR_LEN);
   11074:	461a      	mov	r2, r3
   11076:	f852 1f04 	ldr.w	r1, [r2, #4]!
   1107a:	f8cd 1003 	str.w	r1, [sp, #3]
   1107e:	8892      	ldrh	r2, [r2, #4]
   11080:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.direct_addr.type = ev->reports[i].dir_addr_type;
   11084:	7a9a      	ldrb	r2, [r3, #10]
   11086:	f88d 2010 	strb.w	r2, [sp, #16]
        memcpy(desc.direct_addr.val, ev->reports[i].dir_addr, BLE_DEV_ADDR_LEN);
   1108a:	461a      	mov	r2, r3
   1108c:	f852 1f0b 	ldr.w	r1, [r2, #11]!
   11090:	f8cd 1011 	str.w	r1, [sp, #17]
   11094:	8892      	ldrh	r2, [r2, #4]
   11096:	f8ad 2015 	strh.w	r2, [sp, #21]
        desc.rssi = ev->reports[i].rssi;
   1109a:	f993 3011 	ldrsb.w	r3, [r3, #17]
   1109e:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   110a2:	4668      	mov	r0, sp
   110a4:	f7fb ffcc 	bl	d040 <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   110a8:	3401      	adds	r4, #1
   110aa:	786b      	ldrb	r3, [r5, #1]
   110ac:	42a3      	cmp	r3, r4
   110ae:	dcd9      	bgt.n	11064 <ble_hs_hci_evt_le_dir_adv_rpt+0x24>
    return 0;
   110b0:	2000      	movs	r0, #0
}
   110b2:	b007      	add	sp, #28
   110b4:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   110b6:	200c      	movs	r0, #12
   110b8:	e7fb      	b.n	110b2 <ble_hs_hci_evt_le_dir_adv_rpt+0x72>
   110ba:	200c      	movs	r0, #12
   110bc:	e7f9      	b.n	110b2 <ble_hs_hci_evt_le_dir_adv_rpt+0x72>

000110be <ble_hs_hci_evt_le_adv_rpt>:
{
   110be:	b5f0      	push	{r4, r5, r6, r7, lr}
   110c0:	b087      	sub	sp, #28
   110c2:	460e      	mov	r6, r1
    struct ble_gap_disc_desc desc = {0};
   110c4:	2300      	movs	r3, #0
   110c6:	9300      	str	r3, [sp, #0]
   110c8:	9301      	str	r3, [sp, #4]
   110ca:	9302      	str	r3, [sp, #8]
   110cc:	9303      	str	r3, [sp, #12]
   110ce:	9304      	str	r3, [sp, #16]
   110d0:	9305      	str	r3, [sp, #20]
    rc = ble_hs_hci_evt_le_adv_rpt_first_pass(data, len);
   110d2:	4611      	mov	r1, r2
   110d4:	4630      	mov	r0, r6
   110d6:	f7ff ff0a 	bl	10eee <ble_hs_hci_evt_le_adv_rpt_first_pass>
    if (rc != 0) {
   110da:	4607      	mov	r7, r0
   110dc:	bb58      	cbnz	r0, 11136 <ble_hs_hci_evt_le_adv_rpt+0x78>
    data += sizeof(*ev);
   110de:	1cb3      	adds	r3, r6, #2
    desc.direct_addr = *BLE_ADDR_ANY;
   110e0:	2200      	movs	r2, #0
   110e2:	9204      	str	r2, [sp, #16]
   110e4:	f8cd 2013 	str.w	r2, [sp, #19]
    for (i = 0; i < ev->num_reports; i++) {
   110e8:	4605      	mov	r5, r0
   110ea:	e021      	b.n	11130 <ble_hs_hci_evt_le_adv_rpt+0x72>
        data += sizeof(rpt) + rpt->data_len + 1;
   110ec:	7a1c      	ldrb	r4, [r3, #8]
   110ee:	3405      	adds	r4, #5
   110f0:	441c      	add	r4, r3
        desc.event_type = rpt->type;
   110f2:	781a      	ldrb	r2, [r3, #0]
   110f4:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = rpt->addr_type;
   110f8:	785a      	ldrb	r2, [r3, #1]
   110fa:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, rpt->addr, BLE_DEV_ADDR_LEN);
   110fe:	461a      	mov	r2, r3
   11100:	f852 1f02 	ldr.w	r1, [r2, #2]!
   11104:	f8cd 1003 	str.w	r1, [sp, #3]
   11108:	8892      	ldrh	r2, [r2, #4]
   1110a:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.length_data = rpt->data_len;
   1110e:	7a1a      	ldrb	r2, [r3, #8]
   11110:	f88d 2001 	strb.w	r2, [sp, #1]
        desc.data = rpt->data;
   11114:	f103 0209 	add.w	r2, r3, #9
   11118:	9203      	str	r2, [sp, #12]
        desc.rssi = rpt->data[rpt->data_len];
   1111a:	7a1a      	ldrb	r2, [r3, #8]
   1111c:	4413      	add	r3, r2
   1111e:	f993 3009 	ldrsb.w	r3, [r3, #9]
   11122:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   11126:	4668      	mov	r0, sp
   11128:	f7fb ff8a 	bl	d040 <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   1112c:	3501      	adds	r5, #1
        data += sizeof(rpt) + rpt->data_len + 1;
   1112e:	4623      	mov	r3, r4
    for (i = 0; i < ev->num_reports; i++) {
   11130:	7872      	ldrb	r2, [r6, #1]
   11132:	42aa      	cmp	r2, r5
   11134:	dcda      	bgt.n	110ec <ble_hs_hci_evt_le_adv_rpt+0x2e>
}
   11136:	4638      	mov	r0, r7
   11138:	b007      	add	sp, #28
   1113a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001113c <ble_hs_hci_evt_le_enh_conn_complete>:
    if (len != sizeof(*ev)) {
   1113c:	2a1f      	cmp	r2, #31
   1113e:	d001      	beq.n	11144 <ble_hs_hci_evt_le_enh_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   11140:	200c      	movs	r0, #12
}
   11142:	4770      	bx	lr
{
   11144:	b510      	push	{r4, lr}
   11146:	b088      	sub	sp, #32
   11148:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   1114a:	2220      	movs	r2, #32
   1114c:	2100      	movs	r1, #0
   1114e:	4668      	mov	r0, sp
   11150:	f7fa fbc7 	bl	b8e2 <memset>
    evt.status = ev->status;
   11154:	7863      	ldrb	r3, [r4, #1]
   11156:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   1115a:	bb63      	cbnz	r3, 111b6 <ble_hs_hci_evt_le_enh_conn_complete+0x7a>
        evt.connection_handle = le16toh(ev->conn_handle);
   1115c:	8863      	ldrh	r3, [r4, #2]
   1115e:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   11162:	7923      	ldrb	r3, [r4, #4]
   11164:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   11168:	7963      	ldrb	r3, [r4, #5]
   1116a:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   1116e:	4623      	mov	r3, r4
   11170:	f853 2f06 	ldr.w	r2, [r3, #6]!
   11174:	f8cd 2006 	str.w	r2, [sp, #6]
   11178:	889b      	ldrh	r3, [r3, #4]
   1117a:	f8ad 300a 	strh.w	r3, [sp, #10]
        memcpy(evt.local_rpa, ev->local_rpa, BLE_DEV_ADDR_LEN);
   1117e:	4623      	mov	r3, r4
   11180:	f853 2f0c 	ldr.w	r2, [r3, #12]!
   11184:	f8cd 2013 	str.w	r2, [sp, #19]
   11188:	889b      	ldrh	r3, [r3, #4]
   1118a:	f8ad 3017 	strh.w	r3, [sp, #23]
        memcpy(evt.peer_rpa,ev->peer_rpa, BLE_DEV_ADDR_LEN);
   1118e:	4623      	mov	r3, r4
   11190:	f853 2f12 	ldr.w	r2, [r3, #18]!
   11194:	f8cd 2019 	str.w	r2, [sp, #25]
   11198:	889b      	ldrh	r3, [r3, #4]
   1119a:	f8ad 301d 	strh.w	r3, [sp, #29]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   1119e:	8b23      	ldrh	r3, [r4, #24]
   111a0:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   111a4:	8b63      	ldrh	r3, [r4, #26]
   111a6:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   111aa:	8ba3      	ldrh	r3, [r4, #28]
   111ac:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   111b0:	7fa3      	ldrb	r3, [r4, #30]
   111b2:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   111b6:	2100      	movs	r1, #0
   111b8:	4668      	mov	r0, sp
   111ba:	f7fc f83f 	bl	d23c <ble_gap_rx_conn_complete>
}
   111be:	b008      	add	sp, #32
   111c0:	bd10      	pop	{r4, pc}

000111c2 <ble_hs_hci_evt_le_conn_complete>:
    if (len != sizeof(*ev)) {
   111c2:	2a13      	cmp	r2, #19
   111c4:	d001      	beq.n	111ca <ble_hs_hci_evt_le_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   111c6:	200c      	movs	r0, #12
}
   111c8:	4770      	bx	lr
{
   111ca:	b510      	push	{r4, lr}
   111cc:	b088      	sub	sp, #32
   111ce:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   111d0:	2220      	movs	r2, #32
   111d2:	2100      	movs	r1, #0
   111d4:	4668      	mov	r0, sp
   111d6:	f7fa fb84 	bl	b8e2 <memset>
    evt.status = ev->status;
   111da:	7863      	ldrb	r3, [r4, #1]
   111dc:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   111e0:	b9e3      	cbnz	r3, 1121c <ble_hs_hci_evt_le_conn_complete+0x5a>
        evt.connection_handle = le16toh(ev->conn_handle);
   111e2:	8863      	ldrh	r3, [r4, #2]
   111e4:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   111e8:	7923      	ldrb	r3, [r4, #4]
   111ea:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   111ee:	7963      	ldrb	r3, [r4, #5]
   111f0:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   111f4:	4623      	mov	r3, r4
   111f6:	f853 2f06 	ldr.w	r2, [r3, #6]!
   111fa:	f8cd 2006 	str.w	r2, [sp, #6]
   111fe:	889b      	ldrh	r3, [r3, #4]
   11200:	f8ad 300a 	strh.w	r3, [sp, #10]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   11204:	89a3      	ldrh	r3, [r4, #12]
   11206:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   1120a:	89e3      	ldrh	r3, [r4, #14]
   1120c:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   11210:	8a23      	ldrh	r3, [r4, #16]
   11212:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   11216:	7ca3      	ldrb	r3, [r4, #18]
   11218:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   1121c:	2100      	movs	r1, #0
   1121e:	4668      	mov	r0, sp
   11220:	f7fc f80c 	bl	d23c <ble_gap_rx_conn_complete>
}
   11224:	b008      	add	sp, #32
   11226:	bd10      	pop	{r4, pc}

00011228 <ble_hs_hci_evt_le_conn_parm_req>:
    if (len != sizeof(*ev)) {
   11228:	2a0b      	cmp	r2, #11
   1122a:	d001      	beq.n	11230 <ble_hs_hci_evt_le_conn_parm_req+0x8>
        return BLE_HS_ECONTROLLER;
   1122c:	200c      	movs	r0, #12
}
   1122e:	4770      	bx	lr
{
   11230:	b508      	push	{r3, lr}
   11232:	4608      	mov	r0, r1
    ble_gap_rx_param_req(ev);
   11234:	f7fc fa77 	bl	d726 <ble_gap_rx_param_req>
    return 0;
   11238:	2000      	movs	r0, #0
}
   1123a:	bd08      	pop	{r3, pc}

0001123c <ble_hs_hci_evt_le_lt_key_req>:
    if (len != sizeof(*ev)) {
   1123c:	2a0d      	cmp	r2, #13
   1123e:	d001      	beq.n	11244 <ble_hs_hci_evt_le_lt_key_req+0x8>
        return BLE_HS_ECONTROLLER;
   11240:	200c      	movs	r0, #12
}
   11242:	4770      	bx	lr
{
   11244:	b508      	push	{r3, lr}
   11246:	4608      	mov	r0, r1
    ble_sm_ltk_req_rx(ev);
   11248:	f002 fb5a 	bl	13900 <ble_sm_ltk_req_rx>
    return 0;
   1124c:	2000      	movs	r0, #0
}
   1124e:	bd08      	pop	{r3, pc}

00011250 <ble_hs_hci_evt_le_rd_rem_used_feat_complete>:
    if (len != sizeof(*ev)) {
   11250:	2a0c      	cmp	r2, #12
   11252:	d001      	beq.n	11258 <ble_hs_hci_evt_le_rd_rem_used_feat_complete+0x8>
        return BLE_HS_ECONTROLLER;
   11254:	200c      	movs	r0, #12
}
   11256:	4770      	bx	lr
{
   11258:	b508      	push	{r3, lr}
   1125a:	4608      	mov	r0, r1
    ble_gap_rx_rd_rem_sup_feat_complete(ev);
   1125c:	f7fb fef1 	bl	d042 <ble_gap_rx_rd_rem_sup_feat_complete>
    return 0;
   11260:	2000      	movs	r0, #0
}
   11262:	bd08      	pop	{r3, pc}

00011264 <ble_hs_hci_evt_le_conn_upd_complete>:
    if (len != sizeof(*ev)) {
   11264:	2a0a      	cmp	r2, #10
   11266:	d001      	beq.n	1126c <ble_hs_hci_evt_le_conn_upd_complete+0x8>
        return BLE_HS_ECONTROLLER;
   11268:	200c      	movs	r0, #12
}
   1126a:	4770      	bx	lr
{
   1126c:	b508      	push	{r3, lr}
   1126e:	4608      	mov	r0, r1
    ble_gap_rx_update_complete(ev);
   11270:	f7fc f9d6 	bl	d620 <ble_gap_rx_update_complete>
    return 0;
   11274:	2000      	movs	r0, #0
}
   11276:	bd08      	pop	{r3, pc}

00011278 <ble_hs_hci_evt_process>:

int
ble_hs_hci_evt_process(const struct ble_hci_ev *ev)
{
   11278:	b538      	push	{r3, r4, r5, lr}
   1127a:	4604      	mov	r4, r0

    /* Count events received */
    STATS_INC(ble_hs_stats, hci_event);


    entry = ble_hs_hci_evt_dispatch_find(ev->opcode);
   1127c:	7805      	ldrb	r5, [r0, #0]
   1127e:	4628      	mov	r0, r5
   11280:	f7ff fe06 	bl	10e90 <ble_hs_hci_evt_dispatch_find>
    if (entry == NULL) {
   11284:	b150      	cbz	r0, 1129c <ble_hs_hci_evt_process+0x24>
        STATS_INC(ble_hs_stats, hci_unknown_event);
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = entry->cb(ev->opcode, ev->data, ev->length);
   11286:	6843      	ldr	r3, [r0, #4]
   11288:	7862      	ldrb	r2, [r4, #1]
   1128a:	1ca1      	adds	r1, r4, #2
   1128c:	4628      	mov	r0, r5
   1128e:	4798      	blx	r3
   11290:	4605      	mov	r5, r0
    }

    ble_hci_trans_buf_free((uint8_t *) ev);
   11292:	4620      	mov	r0, r4
   11294:	f005 f9dc 	bl	16650 <ble_hci_trans_buf_free>

    return rc;
}
   11298:	4628      	mov	r0, r5
   1129a:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTSUP;
   1129c:	2508      	movs	r5, #8
   1129e:	e7f8      	b.n	11292 <ble_hs_hci_evt_process+0x1a>

000112a0 <ble_hs_hci_evt_acl_process>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_hci_evt_acl_process(struct os_mbuf *om)
{
   112a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   112a4:	b086      	sub	sp, #24
   112a6:	4604      	mov	r4, r0
    ble_l2cap_rx_fn *rx_cb;
    uint16_t conn_handle;
    int reject_cid;
    int rc;

    rc = ble_hs_hci_util_data_hdr_strip(om, &hci_hdr);
   112a8:	a905      	add	r1, sp, #20
   112aa:	f000 f898 	bl	113de <ble_hs_hci_util_data_hdr_strip>
    if (rc != 0) {
   112ae:	4605      	mov	r5, r0
   112b0:	b940      	cbnz	r0, 112c4 <ble_hs_hci_evt_acl_process+0x24>
    BLE_HS_LOG(DEBUG, "ble_hs_hci_evt_acl_process(): conn_handle=%u pb=%x "
                      "len=%u data=",
               BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc),
               BLE_HCI_DATA_PB(hci_hdr.hdh_handle_pb_bc),
               hci_hdr.hdh_len);
    ble_hs_log_mbuf(om);
   112b2:	4620      	mov	r0, r4
   112b4:	f000 f99c 	bl	115f0 <ble_hs_log_mbuf>
    BLE_HS_LOG(DEBUG, "\n");
#endif
#endif

    if (hci_hdr.hdh_len != OS_MBUF_PKTHDR(om)->omp_len) {
   112b8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   112bc:	8a23      	ldrh	r3, [r4, #16]
   112be:	429a      	cmp	r2, r3
   112c0:	d007      	beq.n	112d2 <ble_hs_hci_evt_acl_process+0x32>
        rc = BLE_HS_EBADDATA;
   112c2:	250a      	movs	r5, #10
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   112c4:	4620      	mov	r0, r4
   112c6:	f7f8 fffd 	bl	a2c4 <os_mbuf_free_chain>
    return rc;
}
   112ca:	4628      	mov	r0, r5
   112cc:	b006      	add	sp, #24
   112ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    conn_handle = BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc);
   112d2:	f8bd 6014 	ldrh.w	r6, [sp, #20]
   112d6:	f3c6 060b 	ubfx	r6, r6, #0, #12
    ble_hs_lock();
   112da:	f7fe fc55 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   112de:	4630      	mov	r0, r6
   112e0:	f7ff fa5c 	bl	1079c <ble_hs_conn_find>
    if (conn == NULL) {
   112e4:	4680      	mov	r8, r0
   112e6:	b198      	cbz	r0, 11310 <ble_hs_hci_evt_acl_process+0x70>
        rc = ble_l2cap_rx(conn, &hci_hdr, om, &rx_cb, &reject_cid);
   112e8:	ab03      	add	r3, sp, #12
   112ea:	9300      	str	r3, [sp, #0]
   112ec:	ab04      	add	r3, sp, #16
   112ee:	4622      	mov	r2, r4
   112f0:	a905      	add	r1, sp, #20
   112f2:	f000 fd94 	bl	11e1e <ble_l2cap_rx>
   112f6:	4607      	mov	r7, r0
        om = NULL;
   112f8:	2400      	movs	r4, #0
    ble_hs_unlock();
   112fa:	f7fe fc49 	bl	fb90 <ble_hs_unlock>
    switch (rc) {
   112fe:	b167      	cbz	r7, 1131a <ble_hs_hci_evt_acl_process+0x7a>
   11300:	2f01      	cmp	r7, #1
   11302:	d0e2      	beq.n	112ca <ble_hs_hci_evt_acl_process+0x2a>
        if (reject_cid != -1) {
   11304:	9b03      	ldr	r3, [sp, #12]
   11306:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1130a:	d111      	bne.n	11330 <ble_hs_hci_evt_acl_process+0x90>
   1130c:	463d      	mov	r5, r7
   1130e:	e7d9      	b.n	112c4 <ble_hs_hci_evt_acl_process+0x24>
        reject_cid = -1;
   11310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11314:	9303      	str	r3, [sp, #12]
        rc = BLE_HS_ENOTCONN;
   11316:	2707      	movs	r7, #7
   11318:	e7ef      	b.n	112fa <ble_hs_hci_evt_acl_process+0x5a>
        rc = rx_cb(conn->bhc_rx_chan);
   1131a:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   1131e:	9b04      	ldr	r3, [sp, #16]
   11320:	4798      	blx	r3
        ble_l2cap_remove_rx(conn, conn->bhc_rx_chan);
   11322:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
   11326:	4640      	mov	r0, r8
   11328:	f000 fd49 	bl	11dbe <ble_l2cap_remove_rx>
    return 0;
   1132c:	463d      	mov	r5, r7
        break;
   1132e:	e7cc      	b.n	112ca <ble_hs_hci_evt_acl_process+0x2a>
            ble_l2cap_sig_reject_invalid_cid_tx(conn_handle, 0, 0, reject_cid);
   11330:	b29b      	uxth	r3, r3
   11332:	2200      	movs	r2, #0
   11334:	4611      	mov	r1, r2
   11336:	4630      	mov	r0, r6
   11338:	f001 f8aa 	bl	12490 <ble_l2cap_sig_reject_invalid_cid_tx>
   1133c:	463d      	mov	r5, r7
   1133e:	e7c1      	b.n	112c4 <ble_hs_hci_evt_acl_process+0x24>

00011340 <ble_hs_hci_util_handle_pb_bc_join>:
{
    BLE_HS_DBG_ASSERT(handle <= 0x0fff);
    BLE_HS_DBG_ASSERT(pb <= 0x03);
    BLE_HS_DBG_ASSERT(bc <= 0x03);

    return (handle  << 0)   |
   11340:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
   11344:	b200      	sxth	r0, r0
           (pb      << 12)  |
   11346:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
           (bc      << 14);
}
   1134a:	b280      	uxth	r0, r0
   1134c:	4770      	bx	lr

0001134e <ble_hs_hci_util_read_adv_tx_pwr>:

int
ble_hs_hci_util_read_adv_tx_pwr(int8_t *out_tx_pwr)
{
   1134e:	b510      	push	{r4, lr}
   11350:	b084      	sub	sp, #16
   11352:	4604      	mov	r4, r0
    struct ble_hci_le_rd_adv_chan_txpwr_rp rsp;
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   11354:	2301      	movs	r3, #1
   11356:	9300      	str	r3, [sp, #0]
   11358:	ab03      	add	r3, sp, #12
   1135a:	2200      	movs	r2, #0
   1135c:	4611      	mov	r1, r2
   1135e:	f242 0007 	movw	r0, #8199	; 0x2007
   11362:	f7ff fc67 	bl	10c34 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_LE_RD_ADV_CHAN_TXPWR),
                           NULL, 0, &rsp, sizeof(rsp));
    if (rc != 0) {
   11366:	4603      	mov	r3, r0
   11368:	b910      	cbnz	r0, 11370 <ble_hs_hci_util_read_adv_tx_pwr+0x22>
        return rc;
    }

    *out_tx_pwr = rsp.power_level;
   1136a:	f99d 200c 	ldrsb.w	r2, [sp, #12]
   1136e:	7022      	strb	r2, [r4, #0]
        *out_tx_pwr > BLE_HCI_ADV_CHAN_TXPWR_MAX) {
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
    }

    return 0;
}
   11370:	4618      	mov	r0, r3
   11372:	b004      	add	sp, #16
   11374:	bd10      	pop	{r4, pc}

00011376 <ble_hs_hci_util_rand>:

int
ble_hs_hci_util_rand(void *dst, int len)
{
   11376:	b570      	push	{r4, r5, r6, lr}
   11378:	b084      	sub	sp, #16
   1137a:	4606      	mov	r6, r0
   1137c:	460c      	mov	r4, r1
    uint8_t *u8ptr;
    int chunk_sz;
    int rc;

    u8ptr = dst;
    while (len > 0) {
   1137e:	2c00      	cmp	r4, #0
   11380:	dd16      	ble.n	113b0 <ble_hs_hci_util_rand+0x3a>
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_RAND),
   11382:	2308      	movs	r3, #8
   11384:	9300      	str	r3, [sp, #0]
   11386:	446b      	add	r3, sp
   11388:	2200      	movs	r2, #0
   1138a:	4611      	mov	r1, r2
   1138c:	f242 0018 	movw	r0, #8216	; 0x2018
   11390:	f7ff fc50 	bl	10c34 <ble_hs_hci_cmd_tx>
                               NULL, 0, &rsp, sizeof(rsp));
        if (rc != 0) {
   11394:	4603      	mov	r3, r0
   11396:	b960      	cbnz	r0, 113b2 <ble_hs_hci_util_rand+0x3c>
            return rc;
        }

        chunk_sz = min(len, sizeof(rsp));
   11398:	4625      	mov	r5, r4
   1139a:	2c08      	cmp	r4, #8
   1139c:	bf28      	it	cs
   1139e:	2508      	movcs	r5, #8
        memcpy(u8ptr, &rsp.random_number, chunk_sz);
   113a0:	462a      	mov	r2, r5
   113a2:	a902      	add	r1, sp, #8
   113a4:	4630      	mov	r0, r6
   113a6:	f7fa fa73 	bl	b890 <memcpy>

        len -= chunk_sz;
   113aa:	1b64      	subs	r4, r4, r5
        u8ptr += chunk_sz;
   113ac:	442e      	add	r6, r5
   113ae:	e7e6      	b.n	1137e <ble_hs_hci_util_rand+0x8>
    }

    return 0;
   113b0:	2300      	movs	r3, #0
}
   113b2:	4618      	mov	r0, r3
   113b4:	b004      	add	sp, #16
   113b6:	bd70      	pop	{r4, r5, r6, pc}

000113b8 <ble_hs_hci_util_set_random_addr>:
    return 0;
}

int
ble_hs_hci_util_set_random_addr(const uint8_t *addr)
{
   113b8:	b500      	push	{lr}
   113ba:	b085      	sub	sp, #20
   113bc:	4603      	mov	r3, r0
    struct ble_hci_le_set_rand_addr_cp cmd;

    memcpy(cmd.addr, addr, BLE_DEV_ADDR_LEN);
   113be:	6800      	ldr	r0, [r0, #0]
   113c0:	9002      	str	r0, [sp, #8]
   113c2:	889b      	ldrh	r3, [r3, #4]
   113c4:	f8ad 300c 	strh.w	r3, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   113c8:	2300      	movs	r3, #0
   113ca:	9300      	str	r3, [sp, #0]
   113cc:	2206      	movs	r2, #6
   113ce:	a902      	add	r1, sp, #8
   113d0:	f242 0005 	movw	r0, #8197	; 0x2005
   113d4:	f7ff fc2e 	bl	10c34 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RAND_ADDR),
                             &cmd, sizeof(cmd), NULL, 0);
}
   113d8:	b005      	add	sp, #20
   113da:	f85d fb04 	ldr.w	pc, [sp], #4

000113de <ble_hs_hci_util_data_hdr_strip>:
}

int
ble_hs_hci_util_data_hdr_strip(struct os_mbuf *om,
                               struct hci_data_hdr *out_hdr)
{
   113de:	b570      	push	{r4, r5, r6, lr}
   113e0:	4606      	mov	r6, r0
   113e2:	460c      	mov	r4, r1
    int rc;

    rc = os_mbuf_copydata(om, 0, BLE_HCI_DATA_HDR_SZ, out_hdr);
   113e4:	460b      	mov	r3, r1
   113e6:	2204      	movs	r2, #4
   113e8:	2100      	movs	r1, #0
   113ea:	f7f9 f86d 	bl	a4c8 <os_mbuf_copydata>
    if (rc != 0) {
   113ee:	b980      	cbnz	r0, 11412 <ble_hs_hci_util_data_hdr_strip+0x34>
   113f0:	4605      	mov	r5, r0
        return BLE_HS_ECONTROLLER;
    }

    /* Strip HCI ACL data header from the front of the packet. */
    os_mbuf_adj(om, BLE_HCI_DATA_HDR_SZ);
   113f2:	2104      	movs	r1, #4
   113f4:	4630      	mov	r0, r6
   113f6:	f7f9 f894 	bl	a522 <os_mbuf_adj>

    out_hdr->hdh_handle_pb_bc = get_le16(&out_hdr->hdh_handle_pb_bc);
   113fa:	4620      	mov	r0, r4
   113fc:	f00a fc17 	bl	1bc2e <get_le16>
   11400:	4623      	mov	r3, r4
   11402:	f823 0b02 	strh.w	r0, [r3], #2
    out_hdr->hdh_len = get_le16(&out_hdr->hdh_len);
   11406:	4618      	mov	r0, r3
   11408:	f00a fc11 	bl	1bc2e <get_le16>
   1140c:	8060      	strh	r0, [r4, #2]

    return 0;
}
   1140e:	4628      	mov	r0, r5
   11410:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   11412:	250c      	movs	r5, #12
   11414:	e7fb      	b.n	1140e <ble_hs_hci_util_data_hdr_strip+0x30>
	...

00011418 <ble_hs_id_set_pub>:
static uint8_t ble_hs_id_pub[6];
static uint8_t ble_hs_id_rnd[6];

void
ble_hs_id_set_pub(const uint8_t *pub_addr)
{
   11418:	b510      	push	{r4, lr}
   1141a:	4604      	mov	r4, r0
    ble_hs_lock();
   1141c:	f7fe fbb4 	bl	fb88 <ble_hs_lock>
    memcpy(ble_hs_id_pub, pub_addr, 6);
   11420:	4b03      	ldr	r3, [pc, #12]	; (11430 <ble_hs_id_set_pub+0x18>)
   11422:	6820      	ldr	r0, [r4, #0]
   11424:	6018      	str	r0, [r3, #0]
   11426:	88a2      	ldrh	r2, [r4, #4]
   11428:	809a      	strh	r2, [r3, #4]
    ble_hs_unlock();
   1142a:	f7fe fbb1 	bl	fb90 <ble_hs_unlock>
}
   1142e:	bd10      	pop	{r4, pc}
   11430:	20007578 	.word	0x20007578

00011434 <ble_hs_id_set_rnd>:
    return 0;
}

int
ble_hs_id_set_rnd(const uint8_t *rnd_addr)
{
   11434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11436:	4605      	mov	r5, r0
    uint8_t addr_type_byte;
    int rc;
    int ones;

    ble_hs_lock();
   11438:	f7fe fba6 	bl	fb88 <ble_hs_lock>

    /* Make sure random part of rnd_addr is not all ones or zeros. Reference:
     * Core v5.0, Vol 6, Part B, section 1.3.2.1 */
    addr_type_byte = rnd_addr[5] & 0xc0;
   1143c:	796f      	ldrb	r7, [r5, #5]
   1143e:	f007 06c0 	and.w	r6, r7, #192	; 0xc0

    /* count bits set to 1 in random part of address */
    ones = __builtin_popcount(rnd_addr[0]);
   11442:	7828      	ldrb	r0, [r5, #0]
   11444:	f00a ff5c 	bl	1c300 <__popcountsi2>
   11448:	4604      	mov	r4, r0
    ones += __builtin_popcount(rnd_addr[1]);
   1144a:	7868      	ldrb	r0, [r5, #1]
   1144c:	f00a ff58 	bl	1c300 <__popcountsi2>
   11450:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[2]);
   11452:	78a8      	ldrb	r0, [r5, #2]
   11454:	f00a ff54 	bl	1c300 <__popcountsi2>
   11458:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[3]);
   1145a:	78e8      	ldrb	r0, [r5, #3]
   1145c:	f00a ff50 	bl	1c300 <__popcountsi2>
   11460:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[4]);
   11462:	7928      	ldrb	r0, [r5, #4]
   11464:	f00a ff4c 	bl	1c300 <__popcountsi2>
   11468:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[5] & 0x3f);
   1146a:	f007 003f 	and.w	r0, r7, #63	; 0x3f
   1146e:	f00a ff47 	bl	1c300 <__popcountsi2>
   11472:	4420      	add	r0, r4

    if ((addr_type_byte != 0x00 && addr_type_byte != 0xc0) ||
   11474:	b10e      	cbz	r6, 1147a <ble_hs_id_set_rnd+0x46>
   11476:	2ec0      	cmp	r6, #192	; 0xc0
   11478:	d10d      	bne.n	11496 <ble_hs_id_set_rnd+0x62>
   1147a:	b170      	cbz	r0, 1149a <ble_hs_id_set_rnd+0x66>
            (ones == 0 || ones == 46)) {
   1147c:	282e      	cmp	r0, #46	; 0x2e
   1147e:	d011      	beq.n	114a4 <ble_hs_id_set_rnd+0x70>
        rc = BLE_HS_EINVAL;
        goto done;
    }

    rc = ble_hs_hci_util_set_random_addr(rnd_addr);
   11480:	4628      	mov	r0, r5
   11482:	f7ff ff99 	bl	113b8 <ble_hs_hci_util_set_random_addr>
    if (rc != 0) {
   11486:	4604      	mov	r4, r0
   11488:	b940      	cbnz	r0, 1149c <ble_hs_id_set_rnd+0x68>
        goto done;
    }

    memcpy(ble_hs_id_rnd, rnd_addr, 6);
   1148a:	4b07      	ldr	r3, [pc, #28]	; (114a8 <ble_hs_id_set_rnd+0x74>)
   1148c:	6828      	ldr	r0, [r5, #0]
   1148e:	6018      	str	r0, [r3, #0]
   11490:	88aa      	ldrh	r2, [r5, #4]
   11492:	809a      	strh	r2, [r3, #4]
   11494:	e002      	b.n	1149c <ble_hs_id_set_rnd+0x68>
        rc = BLE_HS_EINVAL;
   11496:	2403      	movs	r4, #3
   11498:	e000      	b.n	1149c <ble_hs_id_set_rnd+0x68>
   1149a:	2403      	movs	r4, #3

done:
    ble_hs_unlock();
   1149c:	f7fe fb78 	bl	fb90 <ble_hs_unlock>
    return rc;
}
   114a0:	4620      	mov	r0, r4
   114a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_EINVAL;
   114a4:	2403      	movs	r4, #3
   114a6:	e7f9      	b.n	1149c <ble_hs_id_set_rnd+0x68>
   114a8:	20007580 	.word	0x20007580

000114ac <ble_hs_id_addr>:
 *                              Other BLE host core code on error.
 */
int
ble_hs_id_addr(uint8_t id_addr_type, const uint8_t **out_id_addr,
               int *out_is_nrpa)
{
   114ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const uint8_t *id_addr;
    int nrpa;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    switch (id_addr_type) {
   114ae:	b1b0      	cbz	r0, 114de <ble_hs_id_addr+0x32>
   114b0:	2801      	cmp	r0, #1
   114b2:	d117      	bne.n	114e4 <ble_hs_id_addr+0x38>
        nrpa = 0;
        break;

    case BLE_ADDR_RANDOM:
        id_addr = ble_hs_id_rnd;
        nrpa = (ble_hs_id_rnd[5] & 0xc0) == 0;
   114b4:	4e0e      	ldr	r6, [pc, #56]	; (114f0 <ble_hs_id_addr+0x44>)
   114b6:	7973      	ldrb	r3, [r6, #5]
   114b8:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   114bc:	bf0c      	ite	eq
   114be:	2701      	moveq	r7, #1
   114c0:	2700      	movne	r7, #0
   114c2:	4614      	mov	r4, r2
   114c4:	460d      	mov	r5, r1

    default:
        return BLE_HS_EINVAL;
    }

    if (memcmp(id_addr, ble_hs_misc_null_addr, 6) == 0) {
   114c6:	2206      	movs	r2, #6
   114c8:	490a      	ldr	r1, [pc, #40]	; (114f4 <ble_hs_id_addr+0x48>)
   114ca:	4630      	mov	r0, r6
   114cc:	f7fa f9bc 	bl	b848 <memcmp>
   114d0:	b150      	cbz	r0, 114e8 <ble_hs_id_addr+0x3c>
        return BLE_HS_ENOADDR;
    }

    if (out_id_addr != NULL) {
   114d2:	b105      	cbz	r5, 114d6 <ble_hs_id_addr+0x2a>
        *out_id_addr = id_addr;
   114d4:	602e      	str	r6, [r5, #0]
    }
    if (out_is_nrpa != NULL) {
   114d6:	b14c      	cbz	r4, 114ec <ble_hs_id_addr+0x40>
        *out_is_nrpa = nrpa;
   114d8:	6027      	str	r7, [r4, #0]
    }

    return 0;
   114da:	2000      	movs	r0, #0
}
   114dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrpa = 0;
   114de:	2700      	movs	r7, #0
        id_addr = ble_hs_id_pub;
   114e0:	4e05      	ldr	r6, [pc, #20]	; (114f8 <ble_hs_id_addr+0x4c>)
   114e2:	e7ee      	b.n	114c2 <ble_hs_id_addr+0x16>
        return BLE_HS_EINVAL;
   114e4:	2003      	movs	r0, #3
   114e6:	e7f9      	b.n	114dc <ble_hs_id_addr+0x30>
        return BLE_HS_ENOADDR;
   114e8:	2015      	movs	r0, #21
   114ea:	e7f7      	b.n	114dc <ble_hs_id_addr+0x30>
    return 0;
   114ec:	2000      	movs	r0, #0
   114ee:	e7f5      	b.n	114dc <ble_hs_id_addr+0x30>
   114f0:	20007580 	.word	0x20007580
   114f4:	20007588 	.word	0x20007588
   114f8:	20007578 	.word	0x20007578

000114fc <ble_hs_id_addr_type_usable>:
    return rc;
}

static int
ble_hs_id_addr_type_usable(uint8_t own_addr_type)
{
   114fc:	b500      	push	{lr}
   114fe:	b083      	sub	sp, #12
    uint8_t id_addr_type;
    int nrpa;
    int rc;

    switch (own_addr_type) {
   11500:	2803      	cmp	r0, #3
   11502:	d81a      	bhi.n	1153a <ble_hs_id_addr_type_usable+0x3e>
   11504:	e8df f000 	tbb	[pc, r0]
   11508:	0b0b0202 	.word	0x0b0b0202
    case BLE_OWN_ADDR_PUBLIC:
    case BLE_OWN_ADDR_RANDOM:
        rc = ble_hs_id_addr(own_addr_type, NULL, NULL);
   1150c:	2200      	movs	r2, #0
   1150e:	4611      	mov	r1, r2
   11510:	f7ff ffcc 	bl	114ac <ble_hs_id_addr>
   11514:	4603      	mov	r3, r0
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   11516:	4618      	mov	r0, r3
   11518:	b003      	add	sp, #12
   1151a:	f85d fb04 	ldr.w	pc, [sp], #4
        id_addr_type = ble_hs_misc_own_addr_type_to_id(own_addr_type);
   1151e:	f000 f907 	bl	11730 <ble_hs_misc_own_addr_type_to_id>
        rc = ble_hs_id_addr(id_addr_type, NULL, &nrpa);
   11522:	aa01      	add	r2, sp, #4
   11524:	2100      	movs	r1, #0
   11526:	f7ff ffc1 	bl	114ac <ble_hs_id_addr>
        if (rc != 0) {
   1152a:	4603      	mov	r3, r0
   1152c:	2800      	cmp	r0, #0
   1152e:	d1f2      	bne.n	11516 <ble_hs_id_addr_type_usable+0x1a>
        if (nrpa) {
   11530:	9b01      	ldr	r3, [sp, #4]
   11532:	2b00      	cmp	r3, #0
   11534:	d0ef      	beq.n	11516 <ble_hs_id_addr_type_usable+0x1a>
            return BLE_HS_ENOADDR;
   11536:	2315      	movs	r3, #21
   11538:	e7ed      	b.n	11516 <ble_hs_id_addr_type_usable+0x1a>
        return BLE_HS_EINVAL;
   1153a:	2303      	movs	r3, #3
   1153c:	e7eb      	b.n	11516 <ble_hs_id_addr_type_usable+0x1a>

0001153e <ble_hs_id_copy_addr>:
{
   1153e:	b570      	push	{r4, r5, r6, lr}
   11540:	b082      	sub	sp, #8
   11542:	4605      	mov	r5, r0
   11544:	460c      	mov	r4, r1
   11546:	4616      	mov	r6, r2
    ble_hs_lock();
   11548:	f7fe fb1e 	bl	fb88 <ble_hs_lock>
    rc = ble_hs_id_addr(id_addr_type, &addr, out_is_nrpa);
   1154c:	4632      	mov	r2, r6
   1154e:	a901      	add	r1, sp, #4
   11550:	4628      	mov	r0, r5
   11552:	f7ff ffab 	bl	114ac <ble_hs_id_addr>
    if (rc == 0 && out_id_addr != NULL) {
   11556:	4605      	mov	r5, r0
   11558:	b928      	cbnz	r0, 11566 <ble_hs_id_copy_addr+0x28>
   1155a:	b124      	cbz	r4, 11566 <ble_hs_id_copy_addr+0x28>
        memcpy(out_id_addr, addr, 6);
   1155c:	9b01      	ldr	r3, [sp, #4]
   1155e:	681a      	ldr	r2, [r3, #0]
   11560:	6022      	str	r2, [r4, #0]
   11562:	889b      	ldrh	r3, [r3, #4]
   11564:	80a3      	strh	r3, [r4, #4]
    ble_hs_unlock();
   11566:	f7fe fb13 	bl	fb90 <ble_hs_unlock>
}
   1156a:	4628      	mov	r0, r5
   1156c:	b002      	add	sp, #8
   1156e:	bd70      	pop	{r4, r5, r6, pc}

00011570 <ble_hs_id_use_addr>:

int
ble_hs_id_use_addr(uint8_t own_addr_type)
{
   11570:	b510      	push	{r4, lr}
   11572:	4604      	mov	r4, r0
    int rc;

    rc = ble_hs_id_addr_type_usable(own_addr_type);
   11574:	f7ff ffc2 	bl	114fc <ble_hs_id_addr_type_usable>
    if (rc != 0) {
   11578:	4603      	mov	r3, r0
   1157a:	b918      	cbnz	r0, 11584 <ble_hs_id_use_addr+0x14>
        return rc;
    }

    /* If privacy is being used, make sure RPA rotation is in effect. */
    if (own_addr_type == BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT ||
   1157c:	3c02      	subs	r4, #2
   1157e:	b2e4      	uxtb	r4, r4
   11580:	2c01      	cmp	r4, #1
   11582:	d901      	bls.n	11588 <ble_hs_id_use_addr+0x18>
            return rc;
        }
    }

    return 0;
}
   11584:	4618      	mov	r0, r3
   11586:	bd10      	pop	{r4, pc}
        rc = ble_hs_pvcy_ensure_started();
   11588:	f000 f974 	bl	11874 <ble_hs_pvcy_ensure_started>
   1158c:	4603      	mov	r3, r0
   1158e:	e7f9      	b.n	11584 <ble_hs_id_use_addr+0x14>

00011590 <ble_hs_id_infer_auto>:

int
ble_hs_id_infer_auto(int privacy, uint8_t *out_addr_type)
{
   11590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11594:	4604      	mov	r4, r0
   11596:	4688      	mov	r8, r1
    uint8_t addr_type;
    int num_addr_types;
    int rc;
    int i;

    ble_hs_lock();
   11598:	f7fe faf6 	bl	fb88 <ble_hs_lock>

    if (privacy) {
   1159c:	b16c      	cbz	r4, 115ba <ble_hs_id_infer_auto+0x2a>
        addr_types = priv_addr_types;
   1159e:	4f0c      	ldr	r7, [pc, #48]	; (115d0 <ble_hs_id_infer_auto+0x40>)
    } else {
        addr_types = pub_addr_types;
        num_addr_types = sizeof pub_addr_types / sizeof pub_addr_types[0];
    }

    for (i = 0; i < num_addr_types; i++) {
   115a0:	2400      	movs	r4, #0
   115a2:	2c01      	cmp	r4, #1
   115a4:	dc0e      	bgt.n	115c4 <ble_hs_id_infer_auto+0x34>
        addr_type = addr_types[i];
   115a6:	5d3e      	ldrb	r6, [r7, r4]

        rc = ble_hs_id_addr_type_usable(addr_type);
   115a8:	4630      	mov	r0, r6
   115aa:	f7ff ffa7 	bl	114fc <ble_hs_id_addr_type_usable>
        switch (rc) {
   115ae:	4605      	mov	r5, r0
   115b0:	b128      	cbz	r0, 115be <ble_hs_id_infer_auto+0x2e>
   115b2:	2815      	cmp	r0, #21
   115b4:	d107      	bne.n	115c6 <ble_hs_id_infer_auto+0x36>
    for (i = 0; i < num_addr_types; i++) {
   115b6:	3401      	adds	r4, #1
   115b8:	e7f3      	b.n	115a2 <ble_hs_id_infer_auto+0x12>
        addr_types = pub_addr_types;
   115ba:	4f06      	ldr	r7, [pc, #24]	; (115d4 <ble_hs_id_infer_auto+0x44>)
   115bc:	e7f0      	b.n	115a0 <ble_hs_id_infer_auto+0x10>
        case 0:
            *out_addr_type = addr_type;
   115be:	f888 6000 	strb.w	r6, [r8]
            goto done;
   115c2:	e000      	b.n	115c6 <ble_hs_id_infer_auto+0x36>
        default:
            goto done;
        }
    }

    rc = BLE_HS_ENOADDR;
   115c4:	2515      	movs	r5, #21

done:
    ble_hs_unlock();
   115c6:	f7fe fae3 	bl	fb90 <ble_hs_unlock>
    return rc;
}
   115ca:	4628      	mov	r0, r5
   115cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   115d0:	00028e7c 	.word	0x00028e7c
   115d4:	00028e80 	.word	0x00028e80

000115d8 <ble_hs_id_reset>:
 * when the controller loses its random address (e.g., on a stack reset).
 */
void
ble_hs_id_reset(void)
{
    memset(ble_hs_id_pub, 0, sizeof ble_hs_id_pub);
   115d8:	4a03      	ldr	r2, [pc, #12]	; (115e8 <ble_hs_id_reset+0x10>)
   115da:	2300      	movs	r3, #0
   115dc:	6013      	str	r3, [r2, #0]
   115de:	8093      	strh	r3, [r2, #4]
    memset(ble_hs_id_rnd, 0, sizeof ble_hs_id_pub);
   115e0:	4a02      	ldr	r2, [pc, #8]	; (115ec <ble_hs_id_reset+0x14>)
   115e2:	6013      	str	r3, [r2, #0]
   115e4:	8093      	strh	r3, [r2, #4]
}
   115e6:	4770      	bx	lr
   115e8:	20007578 	.word	0x20007578
   115ec:	20007580 	.word	0x20007580

000115f0 <ble_hs_log_mbuf>:

struct log ble_hs_log;

void
ble_hs_log_mbuf(const struct os_mbuf *om)
{
   115f0:	b530      	push	{r4, r5, lr}
   115f2:	b083      	sub	sp, #12
   115f4:	4605      	mov	r5, r0
    uint8_t u8;
    int i;

    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   115f6:	2400      	movs	r4, #0
   115f8:	e007      	b.n	1160a <ble_hs_log_mbuf+0x1a>
        os_mbuf_copydata(om, i, 1, &u8);
   115fa:	f10d 0307 	add.w	r3, sp, #7
   115fe:	2201      	movs	r2, #1
   11600:	4621      	mov	r1, r4
   11602:	4628      	mov	r0, r5
   11604:	f7f8 ff60 	bl	a4c8 <os_mbuf_copydata>
    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   11608:	3401      	adds	r4, #1
   1160a:	8a2b      	ldrh	r3, [r5, #16]
   1160c:	42a3      	cmp	r3, r4
   1160e:	dcf4      	bgt.n	115fa <ble_hs_log_mbuf+0xa>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8);
    }
}
   11610:	b003      	add	sp, #12
   11612:	bd30      	pop	{r4, r5, pc}

00011614 <ble_hs_log_flat_buf>:
{
    const uint8_t *u8ptr;
    int i;

    u8ptr = data;
    for (i = 0; i < len; i++) {
   11614:	2300      	movs	r3, #0
   11616:	e000      	b.n	1161a <ble_hs_log_flat_buf+0x6>
   11618:	3301      	adds	r3, #1
   1161a:	428b      	cmp	r3, r1
   1161c:	dbfc      	blt.n	11618 <ble_hs_log_flat_buf+0x4>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8ptr[i]);
    }
}
   1161e:	4770      	bx	lr

00011620 <ble_hs_mbuf_gen_pkt>:
/**
 * Allocates an mbuf for use by the nimble host.
 */
static struct os_mbuf *
ble_hs_mbuf_gen_pkt(uint16_t leading_space)
{
   11620:	b510      	push	{r4, lr}
   11622:	4604      	mov	r4, r0
    struct os_mbuf *om;
    int rc;

    om = os_msys_get_pkthdr(0, 0);
   11624:	2100      	movs	r1, #0
   11626:	4608      	mov	r0, r1
   11628:	f7f9 fb65 	bl	acf6 <os_msys_get_pkthdr>
    if (om == NULL) {
   1162c:	4603      	mov	r3, r0
   1162e:	b130      	cbz	r0, 1163e <ble_hs_mbuf_gen_pkt+0x1e>
        return NULL;
    }

    if (om->om_omp->omp_databuf_len < leading_space) {
   11630:	6882      	ldr	r2, [r0, #8]
   11632:	8812      	ldrh	r2, [r2, #0]
   11634:	42a2      	cmp	r2, r4
   11636:	d304      	bcc.n	11642 <ble_hs_mbuf_gen_pkt+0x22>
        rc = os_mbuf_free_chain(om);
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
        return NULL;
    }

    om->om_data += leading_space;
   11638:	6800      	ldr	r0, [r0, #0]
   1163a:	4420      	add	r0, r4
   1163c:	6018      	str	r0, [r3, #0]

    return om;
}
   1163e:	4618      	mov	r0, r3
   11640:	bd10      	pop	{r4, pc}
        rc = os_mbuf_free_chain(om);
   11642:	f7f8 fe3f 	bl	a2c4 <os_mbuf_free_chain>
        return NULL;
   11646:	2300      	movs	r3, #0
   11648:	e7f9      	b.n	1163e <ble_hs_mbuf_gen_pkt+0x1e>

0001164a <ble_hs_mbuf_acl_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_acl_pkt(void)
{
   1164a:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ);
   1164c:	2004      	movs	r0, #4
   1164e:	f7ff ffe7 	bl	11620 <ble_hs_mbuf_gen_pkt>
}
   11652:	bd08      	pop	{r3, pc}

00011654 <ble_hs_mbuf_l2cap_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_l2cap_pkt(void)
{
   11654:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ + BLE_L2CAP_HDR_SZ);
   11656:	2008      	movs	r0, #8
   11658:	f7ff ffe2 	bl	11620 <ble_hs_mbuf_gen_pkt>
}
   1165c:	bd08      	pop	{r3, pc}

0001165e <ble_hs_mbuf_att_pkt>:

struct os_mbuf *
ble_hs_mbuf_att_pkt(void)
{
   1165e:	b508      	push	{r3, lr}
    /* Prepare write request and response are the larget ATT commands which
     * contain attribute data.
     */
     return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ +
   11660:	200d      	movs	r0, #13
   11662:	f7ff ffdd 	bl	11620 <ble_hs_mbuf_gen_pkt>
                                BLE_L2CAP_HDR_SZ +
                                BLE_ATT_PREP_WRITE_CMD_BASE_SZ);
}
   11666:	bd08      	pop	{r3, pc}

00011668 <ble_hs_mbuf_to_flat>:
}

int
ble_hs_mbuf_to_flat(const struct os_mbuf *om, void *flat, uint16_t max_len,
                    uint16_t *out_copy_len)
{
   11668:	b570      	push	{r4, r5, r6, lr}
   1166a:	4615      	mov	r5, r2
   1166c:	461e      	mov	r6, r3
    uint16_t copy_len;
    int rc;

    if (OS_MBUF_PKTLEN(om) <= max_len) {
   1166e:	8a04      	ldrh	r4, [r0, #16]
   11670:	4294      	cmp	r4, r2
   11672:	d900      	bls.n	11676 <ble_hs_mbuf_to_flat+0xe>
        copy_len = OS_MBUF_PKTLEN(om);
    } else {
        copy_len = max_len;
   11674:	4614      	mov	r4, r2
    }

    rc = os_mbuf_copydata(om, 0, copy_len, flat);
   11676:	460b      	mov	r3, r1
   11678:	4622      	mov	r2, r4
   1167a:	2100      	movs	r1, #0
   1167c:	f7f8 ff24 	bl	a4c8 <os_mbuf_copydata>
    if (rc != 0) {
   11680:	4603      	mov	r3, r0
   11682:	b930      	cbnz	r0, 11692 <ble_hs_mbuf_to_flat+0x2a>
        return BLE_HS_EUNKNOWN;
    }

    if (copy_len > max_len) {
   11684:	42ac      	cmp	r4, r5
   11686:	d900      	bls.n	1168a <ble_hs_mbuf_to_flat+0x22>
        rc = BLE_HS_EMSGSIZE;
   11688:	2304      	movs	r3, #4
    } else {
        rc = 0;
    }

    if (out_copy_len != NULL) {
   1168a:	b106      	cbz	r6, 1168e <ble_hs_mbuf_to_flat+0x26>
        *out_copy_len = copy_len;
   1168c:	8034      	strh	r4, [r6, #0]
    }
    return rc;
}
   1168e:	4618      	mov	r0, r3
   11690:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EUNKNOWN;
   11692:	2311      	movs	r3, #17
   11694:	e7fb      	b.n	1168e <ble_hs_mbuf_to_flat+0x26>

00011696 <ble_hs_mbuf_pullup_base>:

int
ble_hs_mbuf_pullup_base(struct os_mbuf **om, int base_len)
{
    if (OS_MBUF_PKTLEN(*om) < base_len) {
   11696:	6803      	ldr	r3, [r0, #0]
   11698:	8a1a      	ldrh	r2, [r3, #16]
   1169a:	428a      	cmp	r2, r1
   1169c:	db0b      	blt.n	116b6 <ble_hs_mbuf_pullup_base+0x20>
{
   1169e:	b510      	push	{r4, lr}
   116a0:	4604      	mov	r4, r0
        return BLE_HS_EBADDATA;
    }

    *om = os_mbuf_pullup(*om, base_len);
   116a2:	b289      	uxth	r1, r1
   116a4:	4618      	mov	r0, r3
   116a6:	f7f9 f8c6 	bl	a836 <os_mbuf_pullup>
   116aa:	6020      	str	r0, [r4, #0]
    if (*om == NULL) {
   116ac:	b108      	cbz	r0, 116b2 <ble_hs_mbuf_pullup_base+0x1c>
        return BLE_HS_ENOMEM;
    }

    return 0;
   116ae:	2000      	movs	r0, #0
}
   116b0:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOMEM;
   116b2:	2006      	movs	r0, #6
   116b4:	e7fc      	b.n	116b0 <ble_hs_mbuf_pullup_base+0x1a>
        return BLE_HS_EBADDATA;
   116b6:	200a      	movs	r0, #10
}
   116b8:	4770      	bx	lr

000116ba <ble_hs_misc_restore_one_irk>:
}

static int
ble_hs_misc_restore_one_irk(int obj_type, union ble_store_value *val,
                            void *cookie)
{
   116ba:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    sec = &val->sec;
    if (sec->irk_present) {
   116bc:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   116c0:	f013 0f01 	tst.w	r3, #1
   116c4:	d101      	bne.n	116ca <ble_hs_misc_restore_one_irk+0x10>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
        }
    }

    return 0;
}
   116c6:	2000      	movs	r0, #0
   116c8:	bd08      	pop	{r3, pc}
   116ca:	4608      	mov	r0, r1
        rc = ble_hs_pvcy_add_entry(sec->peer_addr.val, sec->peer_addr.type,
   116cc:	460a      	mov	r2, r1
   116ce:	f812 1b29 	ldrb.w	r1, [r2], #41
   116d2:	3001      	adds	r0, #1
   116d4:	f000 f94e 	bl	11974 <ble_hs_pvcy_add_entry>
   116d8:	e7f5      	b.n	116c6 <ble_hs_misc_restore_one_irk+0xc>

000116da <ble_hs_misc_conn_chan_find>:
{
   116da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116dc:	460f      	mov	r7, r1
   116de:	4615      	mov	r5, r2
   116e0:	461c      	mov	r4, r3
    conn = ble_hs_conn_find(conn_handle);
   116e2:	f7ff f85b 	bl	1079c <ble_hs_conn_find>
    if (conn == NULL) {
   116e6:	4606      	mov	r6, r0
   116e8:	b160      	cbz	r0, 11704 <ble_hs_misc_conn_chan_find+0x2a>
        chan = ble_hs_conn_chan_find_by_scid(conn, cid);
   116ea:	4639      	mov	r1, r7
   116ec:	f7fe ffac 	bl	10648 <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   116f0:	4603      	mov	r3, r0
   116f2:	b128      	cbz	r0, 11700 <ble_hs_misc_conn_chan_find+0x26>
            rc = 0;
   116f4:	2000      	movs	r0, #0
    if (out_conn != NULL) {
   116f6:	b105      	cbz	r5, 116fa <ble_hs_misc_conn_chan_find+0x20>
        *out_conn = conn;
   116f8:	602e      	str	r6, [r5, #0]
    if (out_chan != NULL) {
   116fa:	b104      	cbz	r4, 116fe <ble_hs_misc_conn_chan_find+0x24>
        *out_chan = chan;
   116fc:	6023      	str	r3, [r4, #0]
}
   116fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = BLE_HS_ENOTCONN;
   11700:	2007      	movs	r0, #7
   11702:	e7f8      	b.n	116f6 <ble_hs_misc_conn_chan_find+0x1c>
        rc = BLE_HS_ENOTCONN;
   11704:	2007      	movs	r0, #7
        chan = NULL;
   11706:	2300      	movs	r3, #0
   11708:	e7f5      	b.n	116f6 <ble_hs_misc_conn_chan_find+0x1c>

0001170a <ble_hs_misc_conn_chan_find_reqd>:
{
   1170a:	b530      	push	{r4, r5, lr}
   1170c:	b083      	sub	sp, #12
   1170e:	4615      	mov	r5, r2
   11710:	461c      	mov	r4, r3
    rc = ble_hs_misc_conn_chan_find(conn_handle, cid, &conn, &chan);
   11712:	ab01      	add	r3, sp, #4
   11714:	466a      	mov	r2, sp
   11716:	f7ff ffe0 	bl	116da <ble_hs_misc_conn_chan_find>
    if (rc != 0) {
   1171a:	4603      	mov	r3, r0
   1171c:	b928      	cbnz	r0, 1172a <ble_hs_misc_conn_chan_find_reqd+0x20>
    if (out_conn != NULL) {
   1171e:	b10d      	cbz	r5, 11724 <ble_hs_misc_conn_chan_find_reqd+0x1a>
        *out_conn = conn;
   11720:	9a00      	ldr	r2, [sp, #0]
   11722:	602a      	str	r2, [r5, #0]
    if (out_chan != NULL) {
   11724:	b10c      	cbz	r4, 1172a <ble_hs_misc_conn_chan_find_reqd+0x20>
        *out_chan = chan;
   11726:	9a01      	ldr	r2, [sp, #4]
   11728:	6022      	str	r2, [r4, #0]
}
   1172a:	4618      	mov	r0, r3
   1172c:	b003      	add	sp, #12
   1172e:	bd30      	pop	{r4, r5, pc}

00011730 <ble_hs_misc_own_addr_type_to_id>:
    switch (own_addr_type) {
   11730:	2801      	cmp	r0, #1
   11732:	d003      	beq.n	1173c <ble_hs_misc_own_addr_type_to_id+0xc>
   11734:	2803      	cmp	r0, #3
   11736:	d001      	beq.n	1173c <ble_hs_misc_own_addr_type_to_id+0xc>
         return BLE_ADDR_PUBLIC;
   11738:	2000      	movs	r0, #0
   1173a:	4770      	bx	lr
         return BLE_ADDR_RANDOM;
   1173c:	2001      	movs	r0, #1
}
   1173e:	4770      	bx	lr

00011740 <ble_hs_misc_peer_addr_type_to_id>:
    switch (peer_addr_type) {
   11740:	2801      	cmp	r0, #1
   11742:	d003      	beq.n	1174c <ble_hs_misc_peer_addr_type_to_id+0xc>
   11744:	2803      	cmp	r0, #3
   11746:	d001      	beq.n	1174c <ble_hs_misc_peer_addr_type_to_id+0xc>
            return BLE_ADDR_PUBLIC;
   11748:	2000      	movs	r0, #0
   1174a:	4770      	bx	lr
            return BLE_ADDR_RANDOM;
   1174c:	2001      	movs	r0, #1
}
   1174e:	4770      	bx	lr

00011750 <ble_hs_misc_restore_irks>:

int
ble_hs_misc_restore_irks(void)
{
   11750:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_PEER_SEC,
   11752:	2200      	movs	r2, #0
   11754:	4902      	ldr	r1, [pc, #8]	; (11760 <ble_hs_misc_restore_irks+0x10>)
   11756:	2002      	movs	r0, #2
   11758:	f002 fd9d 	bl	14296 <ble_store_iterate>
                           ble_hs_misc_restore_one_irk,
                           NULL);
    return rc;
}
   1175c:	bd08      	pop	{r3, pc}
   1175e:	bf00      	nop
   11760:	000116bb 	.word	0x000116bb

00011764 <ble_mqueue_init>:

#include "ble_hs_priv.h"

int
ble_mqueue_init(struct ble_mqueue *mq, ble_npl_event_fn *ev_fn, void *ev_arg)
{
   11764:	4603      	mov	r3, r0
    STAILQ_INIT(&mq->head);
   11766:	2000      	movs	r0, #0
   11768:	6018      	str	r0, [r3, #0]
   1176a:	605b      	str	r3, [r3, #4]
    memset(ev, 0, sizeof(*ev));
   1176c:	6098      	str	r0, [r3, #8]
   1176e:	6158      	str	r0, [r3, #20]
    ev->ev.ev_queued = 0;
   11770:	7218      	strb	r0, [r3, #8]
    ev->ev.ev_cb = (os_event_fn *)fn;
   11772:	60d9      	str	r1, [r3, #12]
    ev->ev.ev_arg = arg;
   11774:	611a      	str	r2, [r3, #16]

    ble_npl_event_init(&mq->ev, ev_fn, ev_arg);

    return (0);
}
   11776:	4770      	bx	lr

00011778 <ble_mqueue_get>:

struct os_mbuf *
ble_mqueue_get(struct ble_mqueue *mq)
{
   11778:	b538      	push	{r3, r4, r5, lr}
   1177a:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *om;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1177c:	f7f9 ff1a 	bl	b5b4 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->head);
   11780:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   11782:	b114      	cbz	r4, 1178a <ble_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   11784:	6863      	ldr	r3, [r4, #4]
   11786:	602b      	str	r3, [r5, #0]
   11788:	b12b      	cbz	r3, 11796 <ble_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   1178a:	f7f9 ff19 	bl	b5c0 <os_arch_restore_sr>

    if (mp) {
   1178e:	b124      	cbz	r4, 1179a <ble_mqueue_get+0x22>
        om = OS_MBUF_PKTHDR_TO_MBUF(mp);
   11790:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        om = NULL;
    }

    return (om);
}
   11794:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   11796:	606d      	str	r5, [r5, #4]
   11798:	e7f7      	b.n	1178a <ble_mqueue_get+0x12>
        om = NULL;
   1179a:	2000      	movs	r0, #0
    return (om);
   1179c:	e7fa      	b.n	11794 <ble_mqueue_get+0x1c>

0001179e <ble_mqueue_put>:

int
ble_mqueue_put(struct ble_mqueue *mq, struct ble_npl_eventq *evq, struct os_mbuf *om)
{
   1179e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(om)) {
   117a0:	7953      	ldrb	r3, [r2, #5]
   117a2:	2b07      	cmp	r3, #7
   117a4:	d916      	bls.n	117d4 <ble_mqueue_put+0x36>
   117a6:	4614      	mov	r4, r2
   117a8:	460e      	mov	r6, r1
   117aa:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(om);
   117ac:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   117b0:	f7f9 ff00 	bl	b5b4 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->head, mp, omp_next);
   117b4:	2300      	movs	r3, #0
   117b6:	f844 3f14 	str.w	r3, [r4, #20]!
   117ba:	686b      	ldr	r3, [r5, #4]
   117bc:	601f      	str	r7, [r3, #0]
   117be:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   117c0:	f7f9 fefe 	bl	b5c0 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   117c4:	b146      	cbz	r6, 117d8 <ble_mqueue_put+0x3a>
    os_eventq_put(&evq->evq, &ev->ev);
   117c6:	f105 0108 	add.w	r1, r5, #8
   117ca:	4630      	mov	r0, r6
   117cc:	f7f8 fc4d 	bl	a06a <os_eventq_put>
        ble_npl_eventq_put(evq, &mq->ev);
    }

    return (0);
   117d0:	2000      	movs	r0, #0
   117d2:	e000      	b.n	117d6 <ble_mqueue_put+0x38>
err:
    return (rc);
   117d4:	2002      	movs	r0, #2
}
   117d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   117d8:	2000      	movs	r0, #0
   117da:	e7fc      	b.n	117d6 <ble_mqueue_put+0x38>

000117dc <ble_hs_pvcy_set_addr_timeout>:
static int
ble_hs_pvcy_set_addr_timeout(uint16_t timeout)
{
    struct ble_hci_le_set_rpa_tmo_cp cmd;

    if (timeout == 0 || timeout > 0xA1B8) {
   117dc:	1e43      	subs	r3, r0, #1
   117de:	b29b      	uxth	r3, r3
   117e0:	f24a 12b7 	movw	r2, #41399	; 0xa1b7
   117e4:	4293      	cmp	r3, r2
   117e6:	d80e      	bhi.n	11806 <ble_hs_pvcy_set_addr_timeout+0x2a>
{
   117e8:	b500      	push	{lr}
   117ea:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.rpa_timeout = htole16(timeout);
   117ec:	a904      	add	r1, sp, #16
   117ee:	f821 0d04 	strh.w	r0, [r1, #-4]!

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   117f2:	2300      	movs	r3, #0
   117f4:	9300      	str	r3, [sp, #0]
   117f6:	2202      	movs	r2, #2
   117f8:	f242 002e 	movw	r0, #8238	; 0x202e
   117fc:	f7ff fa1a 	bl	10c34 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RPA_TMO),
                             &cmd, sizeof(cmd), NULL, 0);
}
   11800:	b005      	add	sp, #20
   11802:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   11806:	2012      	movs	r0, #18
}
   11808:	4770      	bx	lr

0001180a <ble_hs_pvcy_clear_entries>:
                             &cmd, sizeof(cmd), NULL, 0);
}

static int
ble_hs_pvcy_clear_entries(void)
{
   1180a:	b500      	push	{lr}
   1180c:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1180e:	2100      	movs	r1, #0
   11810:	9100      	str	r1, [sp, #0]
   11812:	460b      	mov	r3, r1
   11814:	460a      	mov	r2, r1
   11816:	f242 0029 	movw	r0, #8233	; 0x2029
   1181a:	f7ff fa0b 	bl	10c34 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_CLR_RESOLV_LIST),
                             NULL, 0, NULL, 0);
}
   1181e:	b003      	add	sp, #12
   11820:	f85d fb04 	ldr.w	pc, [sp], #4

00011824 <ble_hs_pvcy_set_resolve_enabled>:
{
   11824:	b500      	push	{lr}
   11826:	b085      	sub	sp, #20
    cmd.enable = enable;
   11828:	a904      	add	r1, sp, #16
   1182a:	f801 0d04 	strb.w	r0, [r1, #-4]!
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1182e:	2300      	movs	r3, #0
   11830:	9300      	str	r3, [sp, #0]
   11832:	2201      	movs	r2, #1
   11834:	f242 002d 	movw	r0, #8237	; 0x202d
   11838:	f7ff f9fc 	bl	10c34 <ble_hs_hci_cmd_tx>
}
   1183c:	b005      	add	sp, #20
   1183e:	f85d fb04 	ldr.w	pc, [sp], #4

00011842 <ble_hs_pvcy_remove_entry>:
{
   11842:	b500      	push	{lr}
   11844:	b085      	sub	sp, #20
    if (addr_type > BLE_ADDR_RANDOM) {
   11846:	2801      	cmp	r0, #1
   11848:	d901      	bls.n	1184e <ble_hs_pvcy_remove_entry+0xc>
        addr_type = addr_type % 2;
   1184a:	f000 0001 	and.w	r0, r0, #1
    cmd.peer_addr_type = addr_type;
   1184e:	f88d 0008 	strb.w	r0, [sp, #8]
    memcpy(cmd.peer_id_addr, addr, BLE_DEV_ADDR_LEN);
   11852:	680b      	ldr	r3, [r1, #0]
   11854:	f8cd 3009 	str.w	r3, [sp, #9]
   11858:	888b      	ldrh	r3, [r1, #4]
   1185a:	f8ad 300d 	strh.w	r3, [sp, #13]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1185e:	2300      	movs	r3, #0
   11860:	9300      	str	r3, [sp, #0]
   11862:	2207      	movs	r2, #7
   11864:	a902      	add	r1, sp, #8
   11866:	f242 0028 	movw	r0, #8232	; 0x2028
   1186a:	f7ff f9e3 	bl	10c34 <ble_hs_hci_cmd_tx>
}
   1186e:	b005      	add	sp, #20
   11870:	f85d fb04 	ldr.w	pc, [sp], #4

00011874 <ble_hs_pvcy_ensure_started>:
    return rc;
}

int
ble_hs_pvcy_ensure_started(void)
{
   11874:	b508      	push	{r3, lr}
    int rc;

    if (ble_hs_pvcy_started) {
   11876:	4b08      	ldr	r3, [pc, #32]	; (11898 <ble_hs_pvcy_ensure_started+0x24>)
   11878:	781b      	ldrb	r3, [r3, #0]
   1187a:	b113      	cbz	r3, 11882 <ble_hs_pvcy_ensure_started+0xe>
        return 0;
   1187c:	2300      	movs	r3, #0
    }

    ble_hs_pvcy_started = 1;

    return 0;
}
   1187e:	4618      	mov	r0, r3
   11880:	bd08      	pop	{r3, pc}
    rc = ble_hs_pvcy_set_addr_timeout(MYNEWT_VAL(BLE_RPA_TIMEOUT));
   11882:	f44f 7096 	mov.w	r0, #300	; 0x12c
   11886:	f7ff ffa9 	bl	117dc <ble_hs_pvcy_set_addr_timeout>
    if (rc != 0) {
   1188a:	4603      	mov	r3, r0
   1188c:	2800      	cmp	r0, #0
   1188e:	d1f6      	bne.n	1187e <ble_hs_pvcy_ensure_started+0xa>
    ble_hs_pvcy_started = 1;
   11890:	4a01      	ldr	r2, [pc, #4]	; (11898 <ble_hs_pvcy_ensure_started+0x24>)
   11892:	2101      	movs	r1, #1
   11894:	7011      	strb	r1, [r2, #0]
    return 0;
   11896:	e7f2      	b.n	1187e <ble_hs_pvcy_ensure_started+0xa>
   11898:	200075a0 	.word	0x200075a0

0001189c <ble_hs_pvcy_our_irk>:
int
ble_hs_pvcy_our_irk(const uint8_t **out_irk)
{
    /* XXX: Return error if privacy not supported. */

    *out_irk = ble_hs_pvcy_irk;
   1189c:	4b01      	ldr	r3, [pc, #4]	; (118a4 <ble_hs_pvcy_our_irk+0x8>)
   1189e:	6003      	str	r3, [r0, #0]
    return 0;
}
   118a0:	2000      	movs	r0, #0
   118a2:	4770      	bx	lr
   118a4:	20007590 	.word	0x20007590

000118a8 <ble_hs_pvcy_set_mode>:
int
ble_hs_pvcy_set_mode(const ble_addr_t *addr, uint8_t priv_mode)
{
    struct ble_hci_le_set_privacy_mode_cp cmd;

    if (addr->type > BLE_ADDR_RANDOM) {
   118a8:	7803      	ldrb	r3, [r0, #0]
   118aa:	2b01      	cmp	r3, #1
   118ac:	d901      	bls.n	118b2 <ble_hs_pvcy_set_mode+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   118ae:	2012      	movs	r0, #18
    memcpy(cmd.peer_id_addr, addr->val, BLE_DEV_ADDR_LEN);

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
                                        BLE_HCI_OCF_LE_SET_PRIVACY_MODE),
                             &cmd, sizeof(cmd), NULL, 0);
}
   118b0:	4770      	bx	lr
{
   118b2:	b500      	push	{lr}
   118b4:	b085      	sub	sp, #20
    cmd.mode = priv_mode;
   118b6:	f88d 100f 	strb.w	r1, [sp, #15]
    cmd.peer_id_addr_type = addr->type;
   118ba:	7803      	ldrb	r3, [r0, #0]
   118bc:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpy(cmd.peer_id_addr, addr->val, BLE_DEV_ADDR_LEN);
   118c0:	f850 3f01 	ldr.w	r3, [r0, #1]!
   118c4:	f8cd 3009 	str.w	r3, [sp, #9]
   118c8:	8883      	ldrh	r3, [r0, #4]
   118ca:	f8ad 300d 	strh.w	r3, [sp, #13]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   118ce:	2300      	movs	r3, #0
   118d0:	9300      	str	r3, [sp, #0]
   118d2:	2208      	movs	r2, #8
   118d4:	eb0d 0102 	add.w	r1, sp, r2
   118d8:	f242 004e 	movw	r0, #8270	; 0x204e
   118dc:	f7ff f9aa 	bl	10c34 <ble_hs_hci_cmd_tx>
}
   118e0:	b005      	add	sp, #20
   118e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000118e8 <ble_hs_pvcy_add_entry_hci>:
    if (addr_type > BLE_ADDR_RANDOM) {
   118e8:	2901      	cmp	r1, #1
   118ea:	d902      	bls.n	118f2 <ble_hs_pvcy_add_entry_hci+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   118ec:	2312      	movs	r3, #18
}
   118ee:	4618      	mov	r0, r3
   118f0:	4770      	bx	lr
{
   118f2:	b5f0      	push	{r4, r5, r6, r7, lr}
   118f4:	b08f      	sub	sp, #60	; 0x3c
   118f6:	4614      	mov	r4, r2
   118f8:	460e      	mov	r6, r1
   118fa:	4607      	mov	r7, r0
    cmd.peer_addr_type = addr_type;
   118fc:	f88d 1010 	strb.w	r1, [sp, #16]
    memcpy(cmd.peer_id_addr, addr, 6);
   11900:	6803      	ldr	r3, [r0, #0]
   11902:	f8cd 3011 	str.w	r3, [sp, #17]
   11906:	8883      	ldrh	r3, [r0, #4]
   11908:	f8ad 3015 	strh.w	r3, [sp, #21]
    memcpy(cmd.local_irk, ble_hs_pvcy_irk, 16);
   1190c:	4d18      	ldr	r5, [pc, #96]	; (11970 <ble_hs_pvcy_add_entry_hci+0x88>)
   1190e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   11910:	f8cd 0027 	str.w	r0, [sp, #39]	; 0x27
   11914:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
   11918:	f8cd 202f 	str.w	r2, [sp, #47]	; 0x2f
   1191c:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    memcpy(cmd.peer_irk, irk, 16);
   11920:	6820      	ldr	r0, [r4, #0]
   11922:	6861      	ldr	r1, [r4, #4]
   11924:	68a2      	ldr	r2, [r4, #8]
   11926:	68e3      	ldr	r3, [r4, #12]
   11928:	f8cd 0017 	str.w	r0, [sp, #23]
   1192c:	f8cd 101b 	str.w	r1, [sp, #27]
   11930:	f8cd 201f 	str.w	r2, [sp, #31]
   11934:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   11938:	2300      	movs	r3, #0
   1193a:	9300      	str	r3, [sp, #0]
   1193c:	2227      	movs	r2, #39	; 0x27
   1193e:	a904      	add	r1, sp, #16
   11940:	f242 0027 	movw	r0, #8231	; 0x2027
   11944:	f7ff f976 	bl	10c34 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   11948:	4603      	mov	r3, r0
   1194a:	b110      	cbz	r0, 11952 <ble_hs_pvcy_add_entry_hci+0x6a>
}
   1194c:	4618      	mov	r0, r3
   1194e:	b00f      	add	sp, #60	; 0x3c
   11950:	bdf0      	pop	{r4, r5, r6, r7, pc}
    peer_addr.type = addr_type;
   11952:	f88d 6008 	strb.w	r6, [sp, #8]
    memcpy(peer_addr.val, addr, sizeof peer_addr.val);
   11956:	683b      	ldr	r3, [r7, #0]
   11958:	f8cd 3009 	str.w	r3, [sp, #9]
   1195c:	88bb      	ldrh	r3, [r7, #4]
   1195e:	f8ad 300d 	strh.w	r3, [sp, #13]
    rc = ble_hs_pvcy_set_mode(&peer_addr, BLE_GAP_PRIVATE_MODE_DEVICE);
   11962:	2101      	movs	r1, #1
   11964:	a802      	add	r0, sp, #8
   11966:	f7ff ff9f 	bl	118a8 <ble_hs_pvcy_set_mode>
   1196a:	4603      	mov	r3, r0
   1196c:	e7ee      	b.n	1194c <ble_hs_pvcy_add_entry_hci+0x64>
   1196e:	bf00      	nop
   11970:	20007590 	.word	0x20007590

00011974 <ble_hs_pvcy_add_entry>:
{
   11974:	b570      	push	{r4, r5, r6, lr}
   11976:	4604      	mov	r4, r0
   11978:	460d      	mov	r5, r1
   1197a:	4616      	mov	r6, r2
    ble_gap_preempt();
   1197c:	f7fc f912 	bl	dba4 <ble_gap_preempt>
    rc = ble_hs_pvcy_add_entry_hci(addr, addr_type, irk);
   11980:	4632      	mov	r2, r6
   11982:	4629      	mov	r1, r5
   11984:	4620      	mov	r0, r4
   11986:	f7ff ffaf 	bl	118e8 <ble_hs_pvcy_add_entry_hci>
   1198a:	4604      	mov	r4, r0
    ble_gap_preempt_done();
   1198c:	f7fc f916 	bl	dbbc <ble_gap_preempt_done>
}
   11990:	4620      	mov	r0, r4
   11992:	bd70      	pop	{r4, r5, r6, pc}

00011994 <ble_hs_pvcy_set_our_irk>:
{
   11994:	b510      	push	{r4, lr}
   11996:	b086      	sub	sp, #24
    if (irk != NULL) {
   11998:	b180      	cbz	r0, 119bc <ble_hs_pvcy_set_our_irk+0x28>
   1199a:	4603      	mov	r3, r0
        memcpy(new_irk, irk, 16);
   1199c:	466c      	mov	r4, sp
   1199e:	6800      	ldr	r0, [r0, #0]
   119a0:	6859      	ldr	r1, [r3, #4]
   119a2:	689a      	ldr	r2, [r3, #8]
   119a4:	68db      	ldr	r3, [r3, #12]
   119a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if (memcmp(ble_hs_pvcy_irk, new_irk, 16) != 0) {
   119a8:	2210      	movs	r2, #16
   119aa:	4669      	mov	r1, sp
   119ac:	4818      	ldr	r0, [pc, #96]	; (11a10 <ble_hs_pvcy_set_our_irk+0x7c>)
   119ae:	f7f9 ff4b 	bl	b848 <memcmp>
   119b2:	4603      	mov	r3, r0
   119b4:	b940      	cbnz	r0, 119c8 <ble_hs_pvcy_set_our_irk+0x34>
}
   119b6:	4618      	mov	r0, r3
   119b8:	b006      	add	sp, #24
   119ba:	bd10      	pop	{r4, pc}
        memcpy(new_irk, ble_hs_pvcy_default_irk, 16);
   119bc:	4b15      	ldr	r3, [pc, #84]	; (11a14 <ble_hs_pvcy_set_our_irk+0x80>)
   119be:	466c      	mov	r4, sp
   119c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   119c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   119c6:	e7ef      	b.n	119a8 <ble_hs_pvcy_set_our_irk+0x14>
        memcpy(ble_hs_pvcy_irk, new_irk, 16);
   119c8:	4c11      	ldr	r4, [pc, #68]	; (11a10 <ble_hs_pvcy_set_our_irk+0x7c>)
   119ca:	466b      	mov	r3, sp
   119cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   119ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rc = ble_hs_pvcy_set_resolve_enabled(0);
   119d2:	2000      	movs	r0, #0
   119d4:	f7ff ff26 	bl	11824 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   119d8:	4603      	mov	r3, r0
   119da:	2800      	cmp	r0, #0
   119dc:	d1eb      	bne.n	119b6 <ble_hs_pvcy_set_our_irk+0x22>
        rc = ble_hs_pvcy_clear_entries();
   119de:	f7ff ff14 	bl	1180a <ble_hs_pvcy_clear_entries>
        if (rc != 0) {
   119e2:	4603      	mov	r3, r0
   119e4:	2800      	cmp	r0, #0
   119e6:	d1e6      	bne.n	119b6 <ble_hs_pvcy_set_our_irk+0x22>
        rc = ble_hs_pvcy_set_resolve_enabled(1);
   119e8:	2001      	movs	r0, #1
   119ea:	f7ff ff1b 	bl	11824 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   119ee:	4603      	mov	r3, r0
   119f0:	2800      	cmp	r0, #0
   119f2:	d1e0      	bne.n	119b6 <ble_hs_pvcy_set_our_irk+0x22>
        memset(tmp_addr, 0, 6);
   119f4:	2100      	movs	r1, #0
   119f6:	9104      	str	r1, [sp, #16]
   119f8:	f8ad 1014 	strh.w	r1, [sp, #20]
        memset(new_irk, 0, 16);
   119fc:	9100      	str	r1, [sp, #0]
   119fe:	9101      	str	r1, [sp, #4]
   11a00:	9102      	str	r1, [sp, #8]
   11a02:	9103      	str	r1, [sp, #12]
        rc = ble_hs_pvcy_add_entry(tmp_addr, 0, new_irk);
   11a04:	466a      	mov	r2, sp
   11a06:	a804      	add	r0, sp, #16
   11a08:	f7ff ffb4 	bl	11974 <ble_hs_pvcy_add_entry>
   11a0c:	4603      	mov	r3, r0
   11a0e:	e7d2      	b.n	119b6 <ble_hs_pvcy_set_our_irk+0x22>
   11a10:	20007590 	.word	0x20007590
   11a14:	00028e84 	.word	0x00028e84

00011a18 <ble_hs_startup_reset_tx>:
    return 0;
}

static int
ble_hs_startup_reset_tx(void)
{
   11a18:	b500      	push	{lr}
   11a1a:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   11a1c:	2100      	movs	r1, #0
   11a1e:	9100      	str	r1, [sp, #0]
   11a20:	460b      	mov	r3, r1
   11a22:	460a      	mov	r2, r1
   11a24:	f640 4003 	movw	r0, #3075	; 0xc03
   11a28:	f7ff f904 	bl	10c34 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_CB_RESET),
                             NULL, 0, NULL, 0);
}
   11a2c:	b003      	add	sp, #12
   11a2e:	f85d fb04 	ldr.w	pc, [sp], #4

00011a32 <ble_hs_startup_le_read_buf_sz_tx>:
{
   11a32:	b530      	push	{r4, r5, lr}
   11a34:	b085      	sub	sp, #20
   11a36:	4605      	mov	r5, r0
   11a38:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   11a3a:	2303      	movs	r3, #3
   11a3c:	9300      	str	r3, [sp, #0]
   11a3e:	ab03      	add	r3, sp, #12
   11a40:	2200      	movs	r2, #0
   11a42:	4611      	mov	r1, r2
   11a44:	f242 0002 	movw	r0, #8194	; 0x2002
   11a48:	f7ff f8f4 	bl	10c34 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   11a4c:	4603      	mov	r3, r0
   11a4e:	b928      	cbnz	r0, 11a5c <ble_hs_startup_le_read_buf_sz_tx+0x2a>
    *out_pktlen = le16toh(rsp.data_len);
   11a50:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   11a54:	802a      	strh	r2, [r5, #0]
    *out_max_pkts = rsp.data_packets;
   11a56:	f89d 200e 	ldrb.w	r2, [sp, #14]
   11a5a:	7022      	strb	r2, [r4, #0]
}
   11a5c:	4618      	mov	r0, r3
   11a5e:	b005      	add	sp, #20
   11a60:	bd30      	pop	{r4, r5, pc}

00011a62 <ble_hs_startup_read_buf_sz_tx>:
{
   11a62:	b530      	push	{r4, r5, lr}
   11a64:	b085      	sub	sp, #20
   11a66:	4605      	mov	r5, r0
   11a68:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   11a6a:	2307      	movs	r3, #7
   11a6c:	9300      	str	r3, [sp, #0]
   11a6e:	ab02      	add	r3, sp, #8
   11a70:	2200      	movs	r2, #0
   11a72:	4611      	mov	r1, r2
   11a74:	f241 0005 	movw	r0, #4101	; 0x1005
   11a78:	f7ff f8dc 	bl	10c34 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   11a7c:	4603      	mov	r3, r0
   11a7e:	b928      	cbnz	r0, 11a8c <ble_hs_startup_read_buf_sz_tx+0x2a>
    *out_pktlen = le16toh(rsp.acl_data_len);
   11a80:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   11a84:	802a      	strh	r2, [r5, #0]
    *out_max_pkts = le16toh(rsp.acl_num);
   11a86:	f8bd 200b 	ldrh.w	r2, [sp, #11]
   11a8a:	8022      	strh	r2, [r4, #0]
}
   11a8c:	4618      	mov	r0, r3
   11a8e:	b005      	add	sp, #20
   11a90:	bd30      	pop	{r4, r5, pc}

00011a92 <ble_hs_startup_read_local_ver_tx>:
{
   11a92:	b510      	push	{r4, lr}
   11a94:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   11a96:	2308      	movs	r3, #8
   11a98:	9300      	str	r3, [sp, #0]
   11a9a:	446b      	add	r3, sp
   11a9c:	2200      	movs	r2, #0
   11a9e:	4611      	mov	r1, r2
   11aa0:	f241 0001 	movw	r0, #4097	; 0x1001
   11aa4:	f7ff f8c6 	bl	10c34 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   11aa8:	4604      	mov	r4, r0
   11aaa:	b110      	cbz	r0, 11ab2 <ble_hs_startup_read_local_ver_tx+0x20>
}
   11aac:	4620      	mov	r0, r4
   11aae:	b004      	add	sp, #16
   11ab0:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_hci_version(rsp.hci_ver);
   11ab2:	f89d 0008 	ldrb.w	r0, [sp, #8]
   11ab6:	f7ff f97d 	bl	10db4 <ble_hs_hci_set_hci_version>
    return 0;
   11aba:	e7f7      	b.n	11aac <ble_hs_startup_read_local_ver_tx+0x1a>
   11abc:	0000      	movs	r0, r0
	...

00011ac0 <ble_hs_startup_set_evmask_tx>:
{
   11ac0:	b510      	push	{r4, lr}
   11ac2:	b086      	sub	sp, #24
    version = ble_hs_hci_get_hci_version();
   11ac4:	f7ff f97c 	bl	10dc0 <ble_hs_hci_get_hci_version>
   11ac8:	4604      	mov	r4, r0
    cmd.event_mask = htole64(0x2000800002008090);
   11aca:	a906      	add	r1, sp, #24
   11acc:	a310      	add	r3, pc, #64	; (adr r3, 11b10 <ble_hs_startup_set_evmask_tx+0x50>)
   11ace:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ad2:	e961 2302 	strd	r2, r3, [r1, #-8]!
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   11ad6:	2300      	movs	r3, #0
   11ad8:	9300      	str	r3, [sp, #0]
   11ada:	2208      	movs	r2, #8
   11adc:	f640 4001 	movw	r0, #3073	; 0xc01
   11ae0:	f7ff f8a8 	bl	10c34 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   11ae4:	4603      	mov	r3, r0
   11ae6:	b908      	cbnz	r0, 11aec <ble_hs_startup_set_evmask_tx+0x2c>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   11ae8:	2c06      	cmp	r4, #6
   11aea:	d802      	bhi.n	11af2 <ble_hs_startup_set_evmask_tx+0x32>
}
   11aec:	4618      	mov	r0, r3
   11aee:	b006      	add	sp, #24
   11af0:	bd10      	pop	{r4, pc}
        cmd2.event_mask2 = htole64(0x0000000000800000);
   11af2:	a906      	add	r1, sp, #24
   11af4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   11af8:	2300      	movs	r3, #0
   11afa:	e961 2304 	strd	r2, r3, [r1, #-16]!
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   11afe:	2300      	movs	r3, #0
   11b00:	9300      	str	r3, [sp, #0]
   11b02:	2208      	movs	r2, #8
   11b04:	f640 4063 	movw	r0, #3171	; 0xc63
   11b08:	f7ff f894 	bl	10c34 <ble_hs_hci_cmd_tx>
   11b0c:	4603      	mov	r3, r0
   11b0e:	e7ed      	b.n	11aec <ble_hs_startup_set_evmask_tx+0x2c>
   11b10:	02008090 	.word	0x02008090
   11b14:	20008000 	.word	0x20008000

00011b18 <ble_hs_startup_le_set_evmask_tx>:
{
   11b18:	b500      	push	{lr}
   11b1a:	b085      	sub	sp, #20
    version = ble_hs_hci_get_hci_version();
   11b1c:	f7ff f950 	bl	10dc0 <ble_hs_hci_get_hci_version>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   11b20:	2806      	cmp	r0, #6
   11b22:	d818      	bhi.n	11b56 <ble_hs_startup_le_set_evmask_tx+0x3e>
    mask = 0x000000000000001f;
   11b24:	221f      	movs	r2, #31
   11b26:	2300      	movs	r3, #0
    if (version >= BLE_HCI_VER_BCS_4_2) {
   11b28:	2807      	cmp	r0, #7
   11b2a:	d901      	bls.n	11b30 <ble_hs_startup_le_set_evmask_tx+0x18>
        mask |= 0x0000000000000640;
   11b2c:	f442 62c8 	orr.w	r2, r2, #1600	; 0x640
    if (version >= BLE_HCI_VER_BCS_5_0) {
   11b30:	2808      	cmp	r0, #8
   11b32:	d903      	bls.n	11b3c <ble_hs_startup_le_set_evmask_tx+0x24>
        mask |= 0x00000000000ff800;
   11b34:	4809      	ldr	r0, [pc, #36]	; (11b5c <ble_hs_startup_le_set_evmask_tx+0x44>)
   11b36:	2100      	movs	r1, #0
   11b38:	4302      	orrs	r2, r0
   11b3a:	430b      	orrs	r3, r1
    cmd.event_mask = htole64(mask);
   11b3c:	a904      	add	r1, sp, #16
   11b3e:	e961 2302 	strd	r2, r3, [r1, #-8]!
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   11b42:	2300      	movs	r3, #0
   11b44:	9300      	str	r3, [sp, #0]
   11b46:	2208      	movs	r2, #8
   11b48:	f242 0001 	movw	r0, #8193	; 0x2001
   11b4c:	f7ff f872 	bl	10c34 <ble_hs_hci_cmd_tx>
}
   11b50:	b005      	add	sp, #20
   11b52:	f85d fb04 	ldr.w	pc, [sp], #4
        mask |= 0x0000000000000020;
   11b56:	223f      	movs	r2, #63	; 0x3f
   11b58:	2300      	movs	r3, #0
   11b5a:	e7e5      	b.n	11b28 <ble_hs_startup_le_set_evmask_tx+0x10>
   11b5c:	000ff800 	.word	0x000ff800

00011b60 <ble_hs_startup_read_buf_sz>:
{
   11b60:	b500      	push	{lr}
   11b62:	b083      	sub	sp, #12
    uint16_t le_pktlen = 0;
   11b64:	2300      	movs	r3, #0
   11b66:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t max_pkts = 0;
   11b6a:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t pktlen = 0;
   11b6e:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint8_t le_max_pkts = 0;
   11b72:	a902      	add	r1, sp, #8
   11b74:	f801 3d07 	strb.w	r3, [r1, #-7]!
    rc = ble_hs_startup_le_read_buf_sz_tx(&le_pktlen, &le_max_pkts);
   11b78:	f10d 0006 	add.w	r0, sp, #6
   11b7c:	f7ff ff59 	bl	11a32 <ble_hs_startup_le_read_buf_sz_tx>
    if (rc != 0) {
   11b80:	4603      	mov	r3, r0
   11b82:	b978      	cbnz	r0, 11ba4 <ble_hs_startup_read_buf_sz+0x44>
    if (le_pktlen != 0) {
   11b84:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11b88:	b183      	cbz	r3, 11bac <ble_hs_startup_read_buf_sz+0x4c>
        pktlen = le_pktlen;
   11b8a:	f8ad 3002 	strh.w	r3, [sp, #2]
        max_pkts = le_max_pkts;
   11b8e:	f89d 3001 	ldrb.w	r3, [sp, #1]
   11b92:	f8ad 3004 	strh.w	r3, [sp, #4]
    rc = ble_hs_hci_set_buf_sz(pktlen, max_pkts);
   11b96:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   11b9a:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   11b9e:	f7ff f827 	bl	10bf0 <ble_hs_hci_set_buf_sz>
   11ba2:	4603      	mov	r3, r0
}
   11ba4:	4618      	mov	r0, r3
   11ba6:	b003      	add	sp, #12
   11ba8:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_hs_startup_read_buf_sz_tx(&pktlen, &max_pkts);
   11bac:	a901      	add	r1, sp, #4
   11bae:	f10d 0002 	add.w	r0, sp, #2
   11bb2:	f7ff ff56 	bl	11a62 <ble_hs_startup_read_buf_sz_tx>
        if (rc != 0) {
   11bb6:	4603      	mov	r3, r0
   11bb8:	2800      	cmp	r0, #0
   11bba:	d0ec      	beq.n	11b96 <ble_hs_startup_read_buf_sz+0x36>
   11bbc:	e7f2      	b.n	11ba4 <ble_hs_startup_read_buf_sz+0x44>

00011bbe <ble_hs_startup_le_read_sup_f_tx>:
{
   11bbe:	b510      	push	{r4, lr}
   11bc0:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   11bc2:	2308      	movs	r3, #8
   11bc4:	9300      	str	r3, [sp, #0]
   11bc6:	446b      	add	r3, sp
   11bc8:	2200      	movs	r2, #0
   11bca:	4611      	mov	r1, r2
   11bcc:	f242 0003 	movw	r0, #8195	; 0x2003
   11bd0:	f7ff f830 	bl	10c34 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   11bd4:	4604      	mov	r4, r0
   11bd6:	b110      	cbz	r0, 11bde <ble_hs_startup_le_read_sup_f_tx+0x20>
}
   11bd8:	4620      	mov	r0, r4
   11bda:	b004      	add	sp, #16
   11bdc:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_le_supported_feat(le64toh(rsp.features));
   11bde:	9802      	ldr	r0, [sp, #8]
   11be0:	f7ff f8e2 	bl	10da8 <ble_hs_hci_set_le_supported_feat>
    return 0;
   11be4:	e7f8      	b.n	11bd8 <ble_hs_startup_le_read_sup_f_tx+0x1a>

00011be6 <ble_hs_startup_read_bd_addr>:
{
   11be6:	b510      	push	{r4, lr}
   11be8:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   11bea:	2306      	movs	r3, #6
   11bec:	9300      	str	r3, [sp, #0]
   11bee:	ab02      	add	r3, sp, #8
   11bf0:	2200      	movs	r2, #0
   11bf2:	4611      	mov	r1, r2
   11bf4:	f241 0009 	movw	r0, #4105	; 0x1009
   11bf8:	f7ff f81c 	bl	10c34 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   11bfc:	4604      	mov	r4, r0
   11bfe:	b110      	cbz	r0, 11c06 <ble_hs_startup_read_bd_addr+0x20>
}
   11c00:	4620      	mov	r0, r4
   11c02:	b004      	add	sp, #16
   11c04:	bd10      	pop	{r4, pc}
    ble_hs_id_set_pub(rsp.addr);
   11c06:	a802      	add	r0, sp, #8
   11c08:	f7ff fc06 	bl	11418 <ble_hs_id_set_pub>
    return 0;
   11c0c:	e7f8      	b.n	11c00 <ble_hs_startup_read_bd_addr+0x1a>

00011c0e <ble_hs_startup_go>:

int
ble_hs_startup_go(void)
{
   11c0e:	b510      	push	{r4, lr}
    int rc;

    rc = ble_hs_startup_reset_tx();
   11c10:	f7ff ff02 	bl	11a18 <ble_hs_startup_reset_tx>
    if (rc != 0) {
   11c14:	4604      	mov	r4, r0
   11c16:	b108      	cbz	r0, 11c1c <ble_hs_startup_go+0xe>

    /* If flow control is enabled, configure the controller to use it. */
    ble_hs_flow_startup();

    return 0;
}
   11c18:	4620      	mov	r0, r4
   11c1a:	bd10      	pop	{r4, pc}
    rc = ble_hs_startup_read_local_ver_tx();
   11c1c:	f7ff ff39 	bl	11a92 <ble_hs_startup_read_local_ver_tx>
    if (rc != 0) {
   11c20:	4604      	mov	r4, r0
   11c22:	2800      	cmp	r0, #0
   11c24:	d1f8      	bne.n	11c18 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_set_evmask_tx();
   11c26:	f7ff ff4b 	bl	11ac0 <ble_hs_startup_set_evmask_tx>
    if (rc != 0) {
   11c2a:	4604      	mov	r4, r0
   11c2c:	2800      	cmp	r0, #0
   11c2e:	d1f3      	bne.n	11c18 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_set_evmask_tx();
   11c30:	f7ff ff72 	bl	11b18 <ble_hs_startup_le_set_evmask_tx>
    if (rc != 0) {
   11c34:	4604      	mov	r4, r0
   11c36:	2800      	cmp	r0, #0
   11c38:	d1ee      	bne.n	11c18 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_buf_sz();
   11c3a:	f7ff ff91 	bl	11b60 <ble_hs_startup_read_buf_sz>
    if (rc != 0) {
   11c3e:	4604      	mov	r4, r0
   11c40:	2800      	cmp	r0, #0
   11c42:	d1e9      	bne.n	11c18 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_read_sup_f_tx();
   11c44:	f7ff ffbb 	bl	11bbe <ble_hs_startup_le_read_sup_f_tx>
    if (rc != 0) {
   11c48:	4604      	mov	r4, r0
   11c4a:	2800      	cmp	r0, #0
   11c4c:	d1e4      	bne.n	11c18 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_bd_addr();
   11c4e:	f7ff ffca 	bl	11be6 <ble_hs_startup_read_bd_addr>
    if (rc != 0) {
   11c52:	4604      	mov	r4, r0
   11c54:	2800      	cmp	r0, #0
   11c56:	d1df      	bne.n	11c18 <ble_hs_startup_go+0xa>
    ble_hs_pvcy_set_our_irk(NULL);
   11c58:	f7ff fe9c 	bl	11994 <ble_hs_pvcy_set_our_irk>
    ble_hs_flow_startup();
   11c5c:	f7fe fedc 	bl	10a18 <ble_hs_flow_startup>
    return 0;
   11c60:	e7da      	b.n	11c18 <ble_hs_startup_go+0xa>
	...

00011c64 <ble_hs_stop_done>:
/**
 * Called when a stop procedure has completed.
 */
static void
ble_hs_stop_done(int status)
{
   11c64:	b538      	push	{r3, r4, r5, lr}
   11c66:	4605      	mov	r5, r0
    os_callout_stop(&co->co);
   11c68:	480c      	ldr	r0, [pc, #48]	; (11c9c <ble_hs_stop_done+0x38>)
   11c6a:	f7f8 f867 	bl	9d3c <os_callout_stop>
    struct ble_hs_stop_listener_slist slist;
    struct ble_hs_stop_listener *listener;

    ble_npl_callout_stop(&ble_hs_stop_terminate_tmo);

    ble_hs_lock();
   11c6e:	f7fd ff8b 	bl	fb88 <ble_hs_lock>

    ble_gap_event_listener_unregister(&ble_hs_stop_gap_listener);
   11c72:	480b      	ldr	r0, [pc, #44]	; (11ca0 <ble_hs_stop_done+0x3c>)
   11c74:	f7fc f804 	bl	dc80 <ble_gap_event_listener_unregister>

    slist = ble_hs_stop_listeners;
   11c78:	4a0a      	ldr	r2, [pc, #40]	; (11ca4 <ble_hs_stop_done+0x40>)
   11c7a:	6814      	ldr	r4, [r2, #0]
    SLIST_INIT(&ble_hs_stop_listeners);
   11c7c:	2300      	movs	r3, #0
   11c7e:	6013      	str	r3, [r2, #0]

    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   11c80:	4a09      	ldr	r2, [pc, #36]	; (11ca8 <ble_hs_stop_done+0x44>)
   11c82:	7013      	strb	r3, [r2, #0]

    ble_hs_unlock();
   11c84:	f7fd ff84 	bl	fb90 <ble_hs_unlock>

    SLIST_FOREACH(listener, &slist, link) {
   11c88:	e004      	b.n	11c94 <ble_hs_stop_done+0x30>
        listener->fn(status, listener->arg);
   11c8a:	6823      	ldr	r3, [r4, #0]
   11c8c:	6861      	ldr	r1, [r4, #4]
   11c8e:	4628      	mov	r0, r5
   11c90:	4798      	blx	r3
    SLIST_FOREACH(listener, &slist, link) {
   11c92:	68a4      	ldr	r4, [r4, #8]
   11c94:	2c00      	cmp	r4, #0
   11c96:	d1f8      	bne.n	11c8a <ble_hs_stop_done+0x26>
    }
}
   11c98:	bd38      	pop	{r3, r4, r5, pc}
   11c9a:	bf00      	nop
   11c9c:	200075b4 	.word	0x200075b4
   11ca0:	200075a4 	.word	0x200075a4
   11ca4:	200075b0 	.word	0x200075b0
   11ca8:	20007228 	.word	0x20007228

00011cac <ble_hs_stop_terminate_timeout_cb>:
 * This is called when host graceful disconnect timeout fires. That means some devices
 * are out of range and disconnection completed did no happen yet.
 */
static void
ble_hs_stop_terminate_timeout_cb(struct ble_npl_event *ev)
{
   11cac:	b508      	push	{r3, lr}
    BLE_HS_LOG(ERROR, "ble_hs_stop_terminate_timeout_cb,"
                      "%d connection(s) still up \n", ble_hs_stop_conn_cnt);

    /* TODO: Shall we send error here? */
    ble_hs_stop_done(0);
   11cae:	2000      	movs	r0, #0
   11cb0:	f7ff ffd8 	bl	11c64 <ble_hs_stop_done>
}
   11cb4:	bd08      	pop	{r3, pc}
	...

00011cb8 <ble_hs_stop_init>:
    return 0;
}

void
ble_hs_stop_init(void)
{
   11cb8:	b508      	push	{r3, lr}
    return (struct ble_npl_eventq *) os_eventq_dflt_get();
   11cba:	f7f8 fa81 	bl	a1c0 <os_eventq_dflt_get>
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   11cbe:	2300      	movs	r3, #0
   11cc0:	4a02      	ldr	r2, [pc, #8]	; (11ccc <ble_hs_stop_init+0x14>)
   11cc2:	4601      	mov	r1, r0
   11cc4:	4802      	ldr	r0, [pc, #8]	; (11cd0 <ble_hs_stop_init+0x18>)
   11cc6:	f7f8 f82b 	bl	9d20 <os_callout_init>
                         ble_hs_stop_terminate_timeout_cb, NULL);
#else
    ble_npl_callout_init(&ble_hs_stop_terminate_tmo, nimble_port_get_dflt_eventq(),
                         ble_hs_stop_terminate_timeout_cb, NULL);
#endif
}
   11cca:	bd08      	pop	{r3, pc}
   11ccc:	00011cad 	.word	0x00011cad
   11cd0:	200075b4 	.word	0x200075b4

00011cd4 <ble_l2cap_get_mtu>:
    return rc;
}

static uint16_t
ble_l2cap_get_mtu(struct ble_l2cap_chan *chan)
{
   11cd4:	b508      	push	{r3, lr}
    if (chan->scid == BLE_L2CAP_CID_ATT) {
   11cd6:	8903      	ldrh	r3, [r0, #8]
   11cd8:	2b04      	cmp	r3, #4
   11cda:	d001      	beq.n	11ce0 <ble_l2cap_get_mtu+0xc>
         * done
         */
        return ble_att_chan_mtu(chan);
    }

    return chan->my_mtu;
   11cdc:	8940      	ldrh	r0, [r0, #10]
}
   11cde:	bd08      	pop	{r3, pc}
        return ble_att_chan_mtu(chan);
   11ce0:	f002 fd4a 	bl	14778 <ble_att_chan_mtu>
   11ce4:	e7fb      	b.n	11cde <ble_l2cap_get_mtu+0xa>

00011ce6 <ble_l2cap_append_rx>:
{
   11ce6:	b508      	push	{r3, lr}
    m = os_mbuf_pack_chains(chan->rx_buf, frag);
   11ce8:	6900      	ldr	r0, [r0, #16]
   11cea:	f7f8 fe61 	bl	a9b0 <os_mbuf_pack_chains>
    assert(m);
   11cee:	b100      	cbz	r0, 11cf2 <ble_l2cap_append_rx+0xc>
}
   11cf0:	bd08      	pop	{r3, pc}
    assert(m);
   11cf2:	f7f6 fa65 	bl	81c0 <hal_debugger_connected>
   11cf6:	b100      	cbz	r0, 11cfa <ble_l2cap_append_rx+0x14>
   11cf8:	be01      	bkpt	0x0001
   11cfa:	2300      	movs	r3, #0
   11cfc:	461a      	mov	r2, r3
   11cfe:	4619      	mov	r1, r3
   11d00:	4618      	mov	r0, r3
   11d02:	f7f7 fe65 	bl	99d0 <__assert_func>
	...

00011d08 <ble_l2cap_chan_alloc>:
{
   11d08:	b510      	push	{r4, lr}
   11d0a:	4604      	mov	r4, r0
    chan = os_memblock_get(&ble_l2cap_chan_pool);
   11d0c:	4807      	ldr	r0, [pc, #28]	; (11d2c <ble_l2cap_chan_alloc+0x24>)
   11d0e:	f7f8 ff28 	bl	ab62 <os_memblock_get>
    if (chan == NULL) {
   11d12:	4603      	mov	r3, r0
   11d14:	b140      	cbz	r0, 11d28 <ble_l2cap_chan_alloc+0x20>
    memset(chan, 0, sizeof *chan);
   11d16:	2200      	movs	r2, #0
   11d18:	6002      	str	r2, [r0, #0]
   11d1a:	6042      	str	r2, [r0, #4]
   11d1c:	6082      	str	r2, [r0, #8]
   11d1e:	60c2      	str	r2, [r0, #12]
   11d20:	6102      	str	r2, [r0, #16]
   11d22:	6142      	str	r2, [r0, #20]
   11d24:	6182      	str	r2, [r0, #24]
    chan->conn_handle = conn_handle;
   11d26:	8084      	strh	r4, [r0, #4]
}
   11d28:	4618      	mov	r0, r3
   11d2a:	bd10      	pop	{r4, pc}
   11d2c:	20007628 	.word	0x20007628

00011d30 <ble_l2cap_chan_free>:
    if (chan == NULL) {
   11d30:	b149      	cbz	r1, 11d46 <ble_l2cap_chan_free+0x16>
{
   11d32:	b510      	push	{r4, lr}
   11d34:	460c      	mov	r4, r1
    os_mbuf_free_chain(chan->rx_buf);
   11d36:	6908      	ldr	r0, [r1, #16]
   11d38:	f7f8 fac4 	bl	a2c4 <os_mbuf_free_chain>
    rc = os_memblock_put(&ble_l2cap_chan_pool, chan);
   11d3c:	4621      	mov	r1, r4
   11d3e:	4802      	ldr	r0, [pc, #8]	; (11d48 <ble_l2cap_chan_free+0x18>)
   11d40:	f7f8 ff37 	bl	abb2 <os_memblock_put>
}
   11d44:	bd10      	pop	{r4, pc}
   11d46:	4770      	bx	lr
   11d48:	20007628 	.word	0x20007628

00011d4c <ble_l2cap_is_mtu_req_sent>:
    return (chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU);
   11d4c:	7b80      	ldrb	r0, [r0, #14]
}
   11d4e:	f000 0001 	and.w	r0, r0, #1
   11d52:	4770      	bx	lr

00011d54 <ble_l2cap_parse_hdr>:
{
   11d54:	b538      	push	{r3, r4, r5, lr}
   11d56:	4614      	mov	r4, r2
    rc = os_mbuf_copydata(om, off, sizeof *l2cap_hdr, l2cap_hdr);
   11d58:	4613      	mov	r3, r2
   11d5a:	2204      	movs	r2, #4
   11d5c:	f7f8 fbb4 	bl	a4c8 <os_mbuf_copydata>
    if (rc != 0) {
   11d60:	b960      	cbnz	r0, 11d7c <ble_l2cap_parse_hdr+0x28>
   11d62:	4605      	mov	r5, r0
    l2cap_hdr->len = get_le16(&l2cap_hdr->len);
   11d64:	4620      	mov	r0, r4
   11d66:	f009 ff62 	bl	1bc2e <get_le16>
   11d6a:	4623      	mov	r3, r4
   11d6c:	f823 0b02 	strh.w	r0, [r3], #2
    l2cap_hdr->cid = get_le16(&l2cap_hdr->cid);
   11d70:	4618      	mov	r0, r3
   11d72:	f009 ff5c 	bl	1bc2e <get_le16>
   11d76:	8060      	strh	r0, [r4, #2]
}
   11d78:	4628      	mov	r0, r5
   11d7a:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   11d7c:	2504      	movs	r5, #4
   11d7e:	e7fb      	b.n	11d78 <ble_l2cap_parse_hdr+0x24>

00011d80 <ble_l2cap_prepend_hdr>:
{
   11d80:	b530      	push	{r4, r5, lr}
   11d82:	b083      	sub	sp, #12
   11d84:	4604      	mov	r4, r0
   11d86:	460d      	mov	r5, r1
    put_le16(&hdr.len, len);
   11d88:	4611      	mov	r1, r2
   11d8a:	a801      	add	r0, sp, #4
   11d8c:	f009 ff2e 	bl	1bbec <put_le16>
    put_le16(&hdr.cid, cid);
   11d90:	4629      	mov	r1, r5
   11d92:	f10d 0006 	add.w	r0, sp, #6
   11d96:	f009 ff29 	bl	1bbec <put_le16>
    om = os_mbuf_prepend_pullup(om, sizeof hdr);
   11d9a:	2104      	movs	r1, #4
   11d9c:	4620      	mov	r0, r4
   11d9e:	f7f8 fdcf 	bl	a940 <os_mbuf_prepend_pullup>
    if (om == NULL) {
   11da2:	4603      	mov	r3, r0
   11da4:	b110      	cbz	r0, 11dac <ble_l2cap_prepend_hdr+0x2c>
    memcpy(om->om_data, &hdr, sizeof hdr);
   11da6:	6802      	ldr	r2, [r0, #0]
   11da8:	9901      	ldr	r1, [sp, #4]
   11daa:	6011      	str	r1, [r2, #0]
}
   11dac:	4618      	mov	r0, r3
   11dae:	b003      	add	sp, #12
   11db0:	bd30      	pop	{r4, r5, pc}

00011db2 <ble_l2cap_get_conn_handle>:
    if (!chan) {
   11db2:	b108      	cbz	r0, 11db8 <ble_l2cap_get_conn_handle+0x6>
    return chan->conn_handle;
   11db4:	8880      	ldrh	r0, [r0, #4]
   11db6:	4770      	bx	lr
        return BLE_HS_CONN_HANDLE_NONE;
   11db8:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   11dbc:	4770      	bx	lr

00011dbe <ble_l2cap_remove_rx>:
{
   11dbe:	b538      	push	{r3, r4, r5, lr}
   11dc0:	460c      	mov	r4, r1
    conn->bhc_rx_chan = NULL;
   11dc2:	2500      	movs	r5, #0
   11dc4:	6305      	str	r5, [r0, #48]	; 0x30
    os_mbuf_free_chain(chan->rx_buf);
   11dc6:	6908      	ldr	r0, [r1, #16]
   11dc8:	f7f8 fa7c 	bl	a2c4 <os_mbuf_free_chain>
    chan->rx_buf = NULL;
   11dcc:	6125      	str	r5, [r4, #16]
    chan->rx_len = 0;
   11dce:	82a5      	strh	r5, [r4, #20]
}
   11dd0:	bd38      	pop	{r3, r4, r5, pc}

00011dd2 <ble_l2cap_rx_payload>:
{
   11dd2:	b570      	push	{r4, r5, r6, lr}
   11dd4:	4605      	mov	r5, r0
   11dd6:	460c      	mov	r4, r1
   11dd8:	461e      	mov	r6, r3
    if (chan->rx_buf == NULL) {
   11dda:	690b      	ldr	r3, [r1, #16]
   11ddc:	b16b      	cbz	r3, 11dfa <ble_l2cap_rx_payload+0x28>
        ble_l2cap_append_rx(chan, om);
   11dde:	4611      	mov	r1, r2
   11de0:	4620      	mov	r0, r4
   11de2:	f7ff ff80 	bl	11ce6 <ble_l2cap_append_rx>
    len_diff = OS_MBUF_PKTLEN(chan->rx_buf) - chan->rx_len;
   11de6:	6923      	ldr	r3, [r4, #16]
   11de8:	8a18      	ldrh	r0, [r3, #16]
   11dea:	8aa3      	ldrh	r3, [r4, #20]
   11dec:	1ac0      	subs	r0, r0, r3
    if (len_diff > 0) {
   11dee:	2800      	cmp	r0, #0
   11df0:	dc05      	bgt.n	11dfe <ble_l2cap_rx_payload+0x2c>
    } else if (len_diff == 0) {
   11df2:	b950      	cbnz	r0, 11e0a <ble_l2cap_rx_payload+0x38>
        *out_rx_cb = chan->rx_fn;
   11df4:	69a3      	ldr	r3, [r4, #24]
   11df6:	6033      	str	r3, [r6, #0]
}
   11df8:	bd70      	pop	{r4, r5, r6, pc}
        chan->rx_buf = om;
   11dfa:	610a      	str	r2, [r1, #16]
   11dfc:	e7f3      	b.n	11de6 <ble_l2cap_rx_payload+0x14>
        ble_l2cap_remove_rx(conn, chan);
   11dfe:	4621      	mov	r1, r4
   11e00:	4628      	mov	r0, r5
   11e02:	f7ff ffdc 	bl	11dbe <ble_l2cap_remove_rx>
        rc = BLE_HS_EBADDATA;
   11e06:	200a      	movs	r0, #10
   11e08:	e7f6      	b.n	11df8 <ble_l2cap_rx_payload+0x26>
    return os_time_get();
   11e0a:	f7f9 fb55 	bl	b4b8 <os_time_get>
            ble_npl_time_get() + MYNEWT_VAL(BLE_L2CAP_RX_FRAG_TIMEOUT);
   11e0e:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   11e12:	3030      	adds	r0, #48	; 0x30
        conn->bhc_rx_timeout =
   11e14:	6368      	str	r0, [r5, #52]	; 0x34
        ble_hs_timer_resched();
   11e16:	f7fd ff93 	bl	fd40 <ble_hs_timer_resched>
        rc = BLE_HS_EAGAIN;
   11e1a:	2001      	movs	r0, #1
    return rc;
   11e1c:	e7ec      	b.n	11df8 <ble_l2cap_rx_payload+0x26>

00011e1e <ble_l2cap_rx>:
ble_l2cap_rx(struct ble_hs_conn *conn,
             struct hci_data_hdr *hci_hdr,
             struct os_mbuf *om,
             ble_l2cap_rx_fn **out_rx_cb,
             int *out_reject_cid)
{
   11e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11e22:	b082      	sub	sp, #8
   11e24:	4607      	mov	r7, r0
   11e26:	4614      	mov	r4, r2
   11e28:	4698      	mov	r8, r3
   11e2a:	9d08      	ldr	r5, [sp, #32]
    struct ble_l2cap_chan *chan;
    struct ble_l2cap_hdr l2cap_hdr;
    uint8_t pb;
    int rc;

    *out_reject_cid = -1;
   11e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11e30:	602b      	str	r3, [r5, #0]

    pb = BLE_HCI_DATA_PB(hci_hdr->hdh_handle_pb_bc);
   11e32:	880b      	ldrh	r3, [r1, #0]
   11e34:	f3c3 3301 	ubfx	r3, r3, #12, #2
    switch (pb) {
   11e38:	2b01      	cmp	r3, #1
   11e3a:	d02e      	beq.n	11e9a <ble_l2cap_rx+0x7c>
   11e3c:	2b02      	cmp	r3, #2
   11e3e:	d13a      	bne.n	11eb6 <ble_l2cap_rx+0x98>
    case BLE_HCI_PB_FIRST_FLUSH:
        /* First fragment. */
        rc = ble_l2cap_parse_hdr(om, 0, &l2cap_hdr);
   11e40:	aa01      	add	r2, sp, #4
   11e42:	2100      	movs	r1, #0
   11e44:	4620      	mov	r0, r4
   11e46:	f7ff ff85 	bl	11d54 <ble_l2cap_parse_hdr>
        if (rc != 0) {
   11e4a:	4606      	mov	r6, r0
   11e4c:	bba0      	cbnz	r0, 11eb8 <ble_l2cap_rx+0x9a>
            goto err;
        }

        /* Strip L2CAP header from the front of the mbuf. */
        os_mbuf_adj(om, BLE_L2CAP_HDR_SZ);
   11e4e:	2104      	movs	r1, #4
   11e50:	4620      	mov	r0, r4
   11e52:	f7f8 fb66 	bl	a522 <os_mbuf_adj>

        chan = ble_hs_conn_chan_find_by_scid(conn, l2cap_hdr.cid);
   11e56:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   11e5a:	4638      	mov	r0, r7
   11e5c:	f7fe fbf4 	bl	10648 <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   11e60:	4606      	mov	r6, r0
   11e62:	b188      	cbz	r0, 11e88 <ble_l2cap_rx+0x6a>
                *out_reject_cid = l2cap_hdr.cid;
            }
            goto err;
        }

        if (chan->rx_buf != NULL) {
   11e64:	6903      	ldr	r3, [r0, #16]
   11e66:	b11b      	cbz	r3, 11e70 <ble_l2cap_rx+0x52>
            /* Previous data packet never completed.  Discard old packet. */
            ble_l2cap_remove_rx(conn, chan);
   11e68:	4601      	mov	r1, r0
   11e6a:	4638      	mov	r0, r7
   11e6c:	f7ff ffa7 	bl	11dbe <ble_l2cap_remove_rx>
        }

        if (l2cap_hdr.len > ble_l2cap_get_mtu(chan)) {
   11e70:	f8bd 5004 	ldrh.w	r5, [sp, #4]
   11e74:	4630      	mov	r0, r6
   11e76:	f7ff ff2d 	bl	11cd4 <ble_l2cap_get_mtu>
   11e7a:	4285      	cmp	r5, r0
   11e7c:	d825      	bhi.n	11eca <ble_l2cap_rx+0xac>
            rc = BLE_HS_EBADDATA;
            goto err;
        }

        /* Remember channel and length of L2CAP data for reassembly. */
        conn->bhc_rx_chan = chan;
   11e7e:	633e      	str	r6, [r7, #48]	; 0x30
        chan->rx_len = l2cap_hdr.len;
   11e80:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11e84:	82b3      	strh	r3, [r6, #20]
        break;
   11e86:	e00c      	b.n	11ea2 <ble_l2cap_rx+0x84>
            if (l2cap_hdr.cid != BLE_L2CAP_CID_BLACK_HOLE) {
   11e88:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11e90:	4293      	cmp	r3, r2
   11e92:	d018      	beq.n	11ec6 <ble_l2cap_rx+0xa8>
                *out_reject_cid = l2cap_hdr.cid;
   11e94:	602b      	str	r3, [r5, #0]
            rc = BLE_HS_ENOENT;
   11e96:	2605      	movs	r6, #5
   11e98:	e00e      	b.n	11eb8 <ble_l2cap_rx+0x9a>

    case BLE_HCI_PB_MIDDLE:
        chan = conn->bhc_rx_chan;
   11e9a:	6b06      	ldr	r6, [r0, #48]	; 0x30
        if (chan == NULL || chan->rx_buf == NULL) {
   11e9c:	b1be      	cbz	r6, 11ece <ble_l2cap_rx+0xb0>
   11e9e:	6933      	ldr	r3, [r6, #16]
   11ea0:	b1bb      	cbz	r3, 11ed2 <ble_l2cap_rx+0xb4>
    default:
        rc = BLE_HS_EBADDATA;
        goto err;
    }

    rc = ble_l2cap_rx_payload(conn, chan, om, out_rx_cb);
   11ea2:	4643      	mov	r3, r8
   11ea4:	4622      	mov	r2, r4
   11ea6:	4631      	mov	r1, r6
   11ea8:	4638      	mov	r0, r7
   11eaa:	f7ff ff92 	bl	11dd2 <ble_l2cap_rx_payload>
    om = NULL;
    if (rc != 0) {
   11eae:	4606      	mov	r6, r0
   11eb0:	b128      	cbz	r0, 11ebe <ble_l2cap_rx+0xa0>
    om = NULL;
   11eb2:	2400      	movs	r4, #0
        goto err;
    }

    return 0;

err:
   11eb4:	e000      	b.n	11eb8 <ble_l2cap_rx+0x9a>
        rc = BLE_HS_EBADDATA;
   11eb6:	260a      	movs	r6, #10
    os_mbuf_free_chain(om);
   11eb8:	4620      	mov	r0, r4
   11eba:	f7f8 fa03 	bl	a2c4 <os_mbuf_free_chain>
    return rc;
}
   11ebe:	4630      	mov	r0, r6
   11ec0:	b002      	add	sp, #8
   11ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOENT;
   11ec6:	2605      	movs	r6, #5
   11ec8:	e7f6      	b.n	11eb8 <ble_l2cap_rx+0x9a>
            rc = BLE_HS_EBADDATA;
   11eca:	260a      	movs	r6, #10
   11ecc:	e7f4      	b.n	11eb8 <ble_l2cap_rx+0x9a>
            rc = BLE_HS_EBADDATA;
   11ece:	260a      	movs	r6, #10
   11ed0:	e7f2      	b.n	11eb8 <ble_l2cap_rx+0x9a>
   11ed2:	260a      	movs	r6, #10
   11ed4:	e7f0      	b.n	11eb8 <ble_l2cap_rx+0x9a>

00011ed6 <ble_l2cap_tx>:
 * @return                      0 on success; nonzero on error.
 */
int
ble_l2cap_tx(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan,
             struct os_mbuf *txom)
{
   11ed6:	b510      	push	{r4, lr}
   11ed8:	b082      	sub	sp, #8
   11eda:	4604      	mov	r4, r0
   11edc:	9201      	str	r2, [sp, #4]
    int rc;

    txom = ble_l2cap_prepend_hdr(txom, chan->dcid, OS_MBUF_PKTLEN(txom));
   11ede:	4610      	mov	r0, r2
   11ee0:	8a12      	ldrh	r2, [r2, #16]
   11ee2:	88c9      	ldrh	r1, [r1, #6]
   11ee4:	f7ff ff4c 	bl	11d80 <ble_l2cap_prepend_hdr>
   11ee8:	9001      	str	r0, [sp, #4]
    if (txom == NULL) {
   11eea:	b188      	cbz	r0, 11f10 <ble_l2cap_tx+0x3a>
        return BLE_HS_ENOMEM;
    }

    rc = ble_hs_hci_acl_tx(conn, &txom);
   11eec:	a901      	add	r1, sp, #4
   11eee:	4620      	mov	r0, r4
   11ef0:	f7fe ff52 	bl	10d98 <ble_hs_hci_acl_tx>
    switch (rc) {
   11ef4:	2801      	cmp	r0, #1
   11ef6:	d001      	beq.n	11efc <ble_l2cap_tx+0x26>

    default:
        /* Error. */
        return rc;
    }
}
   11ef8:	b002      	add	sp, #8
   11efa:	bd10      	pop	{r4, pc}
        STAILQ_INSERT_TAIL(&conn->bhc_tx_q, OS_MBUF_PKTHDR(txom), omp_next);
   11efc:	9b01      	ldr	r3, [sp, #4]
   11efe:	2000      	movs	r0, #0
   11f00:	6158      	str	r0, [r3, #20]
   11f02:	6c22      	ldr	r2, [r4, #64]	; 0x40
   11f04:	3310      	adds	r3, #16
   11f06:	6013      	str	r3, [r2, #0]
   11f08:	9b01      	ldr	r3, [sp, #4]
   11f0a:	3314      	adds	r3, #20
   11f0c:	6423      	str	r3, [r4, #64]	; 0x40
        return 0;
   11f0e:	e7f3      	b.n	11ef8 <ble_l2cap_tx+0x22>
        return BLE_HS_ENOMEM;
   11f10:	2006      	movs	r0, #6
   11f12:	e7f1      	b.n	11ef8 <ble_l2cap_tx+0x22>

00011f14 <ble_l2cap_init>:

int
ble_l2cap_init(void)
{
   11f14:	b500      	push	{lr}
   11f16:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_l2cap_chan_pool,
   11f18:	4b0a      	ldr	r3, [pc, #40]	; (11f44 <ble_l2cap_init+0x30>)
   11f1a:	9300      	str	r3, [sp, #0]
   11f1c:	4b0a      	ldr	r3, [pc, #40]	; (11f48 <ble_l2cap_init+0x34>)
   11f1e:	221c      	movs	r2, #28
   11f20:	2103      	movs	r1, #3
   11f22:	480a      	ldr	r0, [pc, #40]	; (11f4c <ble_l2cap_init+0x38>)
   11f24:	f7f8 fdd8 	bl	aad8 <os_mempool_init>
                         MYNEWT_VAL(BLE_L2CAP_MAX_CHANS) +
                         MYNEWT_VAL(BLE_L2CAP_COC_MAX_NUM),
                         sizeof (struct ble_l2cap_chan),
                         ble_l2cap_chan_mem, "ble_l2cap_chan_pool");
    if (rc != 0) {
   11f28:	b938      	cbnz	r0, 11f3a <ble_l2cap_init+0x26>
        return BLE_HS_EOS;
    }

    rc = ble_l2cap_sig_init();
   11f2a:	f000 fa3b 	bl	123a4 <ble_l2cap_sig_init>
    if (rc != 0) {
   11f2e:	4603      	mov	r3, r0
   11f30:	b920      	cbnz	r0, 11f3c <ble_l2cap_init+0x28>
    rc = ble_l2cap_coc_init();
    if (rc != 0) {
        return rc;
    }

    rc = ble_sm_init();
   11f32:	f001 ff31 	bl	13d98 <ble_sm_init>
   11f36:	4603      	mov	r3, r0
   11f38:	e000      	b.n	11f3c <ble_l2cap_init+0x28>
        return BLE_HS_EOS;
   11f3a:	230b      	movs	r3, #11
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   11f3c:	4618      	mov	r0, r3
   11f3e:	b003      	add	sp, #12
   11f40:	f85d fb04 	ldr.w	pc, [sp], #4
   11f44:	00028e94 	.word	0x00028e94
   11f48:	200075d4 	.word	0x200075d4
   11f4c:	20007628 	.word	0x20007628

00011f50 <ble_l2cap_sig_next_id>:
 *****************************************************************************/

static uint8_t
ble_l2cap_sig_next_id(void)
{
    ble_l2cap_sig_cur_id++;
   11f50:	4a05      	ldr	r2, [pc, #20]	; (11f68 <ble_l2cap_sig_next_id+0x18>)
   11f52:	7813      	ldrb	r3, [r2, #0]
   11f54:	3301      	adds	r3, #1
   11f56:	b2db      	uxtb	r3, r3
   11f58:	7013      	strb	r3, [r2, #0]
    if (ble_l2cap_sig_cur_id == 0) {
   11f5a:	b913      	cbnz	r3, 11f62 <ble_l2cap_sig_next_id+0x12>
        /* An ID of 0 is illegal. */
        ble_l2cap_sig_cur_id = 1;
   11f5c:	4613      	mov	r3, r2
   11f5e:	2201      	movs	r2, #1
   11f60:	701a      	strb	r2, [r3, #0]
    }

    return ble_l2cap_sig_cur_id;
}
   11f62:	4b01      	ldr	r3, [pc, #4]	; (11f68 <ble_l2cap_sig_next_id+0x18>)
   11f64:	7818      	ldrb	r0, [r3, #0]
   11f66:	4770      	bx	lr
   11f68:	20007644 	.word	0x20007644

00011f6c <ble_l2cap_sig_dispatch_get>:

static ble_l2cap_sig_rx_fn *
ble_l2cap_sig_dispatch_get(uint8_t op)
{
    if (op >= BLE_L2CAP_SIG_OP_MAX) {
   11f6c:	281a      	cmp	r0, #26
   11f6e:	d803      	bhi.n	11f78 <ble_l2cap_sig_dispatch_get+0xc>
        return NULL;
    }

    return ble_l2cap_sig_dispatch[op];
   11f70:	4b02      	ldr	r3, [pc, #8]	; (11f7c <ble_l2cap_sig_dispatch_get+0x10>)
   11f72:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   11f76:	4770      	bx	lr
        return NULL;
   11f78:	2000      	movs	r0, #0
}
   11f7a:	4770      	bx	lr
   11f7c:	00028ea8 	.word	0x00028ea8

00011f80 <ble_l2cap_sig_proc_matches>:
 * @return                      1 if the proc matches; 0 otherwise.
 */
static int
ble_l2cap_sig_proc_matches(struct ble_l2cap_sig_proc *proc,
                           uint16_t conn_handle, uint8_t op, uint8_t id)
{
   11f80:	b410      	push	{r4}
    if (conn_handle != proc->conn_handle) {
   11f82:	8904      	ldrh	r4, [r0, #8]
   11f84:	428c      	cmp	r4, r1
   11f86:	d003      	beq.n	11f90 <ble_l2cap_sig_proc_matches+0x10>
        return 0;
   11f88:	2000      	movs	r0, #0
    if (id != 0 && id != proc->id) {
        return 0;
    }

    return 1;
}
   11f8a:	f85d 4b04 	ldr.w	r4, [sp], #4
   11f8e:	4770      	bx	lr
    if (op != proc->op) {
   11f90:	7a81      	ldrb	r1, [r0, #10]
   11f92:	4291      	cmp	r1, r2
   11f94:	d001      	beq.n	11f9a <ble_l2cap_sig_proc_matches+0x1a>
        return 0;
   11f96:	2000      	movs	r0, #0
   11f98:	e7f7      	b.n	11f8a <ble_l2cap_sig_proc_matches+0xa>
    if (id != 0 && id != proc->id) {
   11f9a:	b133      	cbz	r3, 11faa <ble_l2cap_sig_proc_matches+0x2a>
   11f9c:	7ac2      	ldrb	r2, [r0, #11]
   11f9e:	429a      	cmp	r2, r3
   11fa0:	d001      	beq.n	11fa6 <ble_l2cap_sig_proc_matches+0x26>
        return 0;
   11fa2:	2000      	movs	r0, #0
   11fa4:	e7f1      	b.n	11f8a <ble_l2cap_sig_proc_matches+0xa>
    return 1;
   11fa6:	2001      	movs	r0, #1
   11fa8:	e7ef      	b.n	11f8a <ble_l2cap_sig_proc_matches+0xa>
   11faa:	2001      	movs	r0, #1
   11fac:	e7ed      	b.n	11f8a <ble_l2cap_sig_proc_matches+0xa>

00011fae <ble_l2cap_sig_rx_noop>:
ble_l2cap_sig_rx_noop(uint16_t conn_handle,
                      struct ble_l2cap_sig_hdr *hdr,
                      struct os_mbuf **om)
{
    return BLE_HS_ENOTSUP;
}
   11fae:	2008      	movs	r0, #8
   11fb0:	4770      	bx	lr

00011fb2 <ble_l2cap_sig_update_call_cb>:
 * $update                                                                   *
 *****************************************************************************/

static void
ble_l2cap_sig_update_call_cb(struct ble_l2cap_sig_proc *proc, int status)
{
   11fb2:	b508      	push	{r3, lr}

    if (status != 0) {
        STATS_INC(ble_l2cap_stats, update_fail);
    }

    if (proc->update.cb != NULL) {
   11fb4:	68c3      	ldr	r3, [r0, #12]
   11fb6:	b113      	cbz	r3, 11fbe <ble_l2cap_sig_update_call_cb+0xc>
        proc->update.cb(proc->conn_handle, status, proc->update.cb_arg);
   11fb8:	6902      	ldr	r2, [r0, #16]
   11fba:	8900      	ldrh	r0, [r0, #8]
   11fbc:	4798      	blx	r3
    }
}
   11fbe:	bd08      	pop	{r3, pc}

00011fc0 <ble_l2cap_sig_proc_insert>:
{
   11fc0:	b510      	push	{r4, lr}
   11fc2:	4604      	mov	r4, r0
    ble_hs_lock();
   11fc4:	f7fd fde0 	bl	fb88 <ble_hs_lock>
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   11fc8:	4b05      	ldr	r3, [pc, #20]	; (11fe0 <ble_l2cap_sig_proc_insert+0x20>)
   11fca:	681b      	ldr	r3, [r3, #0]
   11fcc:	6023      	str	r3, [r4, #0]
   11fce:	b123      	cbz	r3, 11fda <ble_l2cap_sig_proc_insert+0x1a>
   11fd0:	4b03      	ldr	r3, [pc, #12]	; (11fe0 <ble_l2cap_sig_proc_insert+0x20>)
   11fd2:	601c      	str	r4, [r3, #0]
    ble_hs_unlock();
   11fd4:	f7fd fddc 	bl	fb90 <ble_hs_unlock>
}
   11fd8:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   11fda:	4b01      	ldr	r3, [pc, #4]	; (11fe0 <ble_l2cap_sig_proc_insert+0x20>)
   11fdc:	605c      	str	r4, [r3, #4]
   11fde:	e7f7      	b.n	11fd0 <ble_l2cap_sig_proc_insert+0x10>
   11fe0:	20007678 	.word	0x20007678

00011fe4 <ble_l2cap_sig_proc_extract>:
{
   11fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11fe8:	4680      	mov	r8, r0
   11fea:	460f      	mov	r7, r1
   11fec:	4616      	mov	r6, r2
    ble_hs_lock();
   11fee:	f7fd fdcb 	bl	fb88 <ble_hs_lock>
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   11ff2:	4b13      	ldr	r3, [pc, #76]	; (12040 <ble_l2cap_sig_proc_extract+0x5c>)
   11ff4:	f8d3 9000 	ldr.w	r9, [r3]
   11ff8:	464c      	mov	r4, r9
    prev = NULL;
   11ffa:	2500      	movs	r5, #0
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   11ffc:	b174      	cbz	r4, 1201c <ble_l2cap_sig_proc_extract+0x38>
        if (ble_l2cap_sig_proc_matches(proc, conn_handle, op, identifier)) {
   11ffe:	4633      	mov	r3, r6
   12000:	463a      	mov	r2, r7
   12002:	4641      	mov	r1, r8
   12004:	4620      	mov	r0, r4
   12006:	f7ff ffbb 	bl	11f80 <ble_l2cap_sig_proc_matches>
   1200a:	b910      	cbnz	r0, 12012 <ble_l2cap_sig_proc_extract+0x2e>
        prev = proc;
   1200c:	4625      	mov	r5, r4
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   1200e:	6824      	ldr	r4, [r4, #0]
   12010:	e7f4      	b.n	11ffc <ble_l2cap_sig_proc_extract+0x18>
            if (prev == NULL) {
   12012:	b145      	cbz	r5, 12026 <ble_l2cap_sig_proc_extract+0x42>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   12014:	682b      	ldr	r3, [r5, #0]
   12016:	681b      	ldr	r3, [r3, #0]
   12018:	602b      	str	r3, [r5, #0]
   1201a:	b16b      	cbz	r3, 12038 <ble_l2cap_sig_proc_extract+0x54>
    ble_hs_unlock();
   1201c:	f7fd fdb8 	bl	fb90 <ble_hs_unlock>
}
   12020:	4620      	mov	r0, r4
   12022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   12026:	f8d9 3000 	ldr.w	r3, [r9]
   1202a:	4a05      	ldr	r2, [pc, #20]	; (12040 <ble_l2cap_sig_proc_extract+0x5c>)
   1202c:	6013      	str	r3, [r2, #0]
   1202e:	2b00      	cmp	r3, #0
   12030:	d1f4      	bne.n	1201c <ble_l2cap_sig_proc_extract+0x38>
   12032:	4613      	mov	r3, r2
   12034:	605a      	str	r2, [r3, #4]
   12036:	e7f1      	b.n	1201c <ble_l2cap_sig_proc_extract+0x38>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   12038:	4b01      	ldr	r3, [pc, #4]	; (12040 <ble_l2cap_sig_proc_extract+0x5c>)
   1203a:	605d      	str	r5, [r3, #4]
   1203c:	e7ee      	b.n	1201c <ble_l2cap_sig_proc_extract+0x38>
   1203e:	bf00      	nop
   12040:	20007678 	.word	0x20007678

00012044 <ble_l2cap_sig_proc_alloc>:
{
   12044:	b508      	push	{r3, lr}
    proc = os_memblock_get(&ble_l2cap_sig_proc_pool);
   12046:	4806      	ldr	r0, [pc, #24]	; (12060 <ble_l2cap_sig_proc_alloc+0x1c>)
   12048:	f7f8 fd8b 	bl	ab62 <os_memblock_get>
    if (proc != NULL) {
   1204c:	4603      	mov	r3, r0
   1204e:	b128      	cbz	r0, 1205c <ble_l2cap_sig_proc_alloc+0x18>
        memset(proc, 0, sizeof *proc);
   12050:	2200      	movs	r2, #0
   12052:	6002      	str	r2, [r0, #0]
   12054:	6042      	str	r2, [r0, #4]
   12056:	6082      	str	r2, [r0, #8]
   12058:	60c2      	str	r2, [r0, #12]
   1205a:	6102      	str	r2, [r0, #16]
}
   1205c:	4618      	mov	r0, r3
   1205e:	bd08      	pop	{r3, pc}
   12060:	2000765c 	.word	0x2000765c

00012064 <ble_l2cap_sig_proc_set_timer>:
{
   12064:	b510      	push	{r4, lr}
   12066:	4604      	mov	r4, r0
   12068:	f7f9 fa26 	bl	b4b8 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   1206c:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   12070:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   12072:	f7fd fe65 	bl	fd40 <ble_hs_timer_resched>
}
   12076:	bd10      	pop	{r4, pc}

00012078 <ble_l2cap_sig_extract_expired>:
 * @return                      The number of ticks until the next expiration
 *                                  occurs.
 */
static int32_t
ble_l2cap_sig_extract_expired(struct ble_l2cap_sig_proc_list *dst_list)
{
   12078:	b570      	push	{r4, r5, r6, lr}
   1207a:	4604      	mov	r4, r0
   1207c:	f7f9 fa1c 	bl	b4b8 <os_time_get>
   12080:	4606      	mov	r6, r0
    ble_npl_time_t now;
    ble_npl_stime_t next_exp_in;
    ble_npl_stime_t time_diff;

    now = ble_npl_time_get();
    STAILQ_INIT(dst_list);
   12082:	2300      	movs	r3, #0
   12084:	6023      	str	r3, [r4, #0]
   12086:	6064      	str	r4, [r4, #4]

    /* Assume each event is either expired or has infinite duration. */
    next_exp_in = BLE_HS_FOREVER;

    ble_hs_lock();
   12088:	f7fd fd7e 	bl	fb88 <ble_hs_lock>

    prev = NULL;
    proc = STAILQ_FIRST(&ble_l2cap_sig_procs);
   1208c:	4b10      	ldr	r3, [pc, #64]	; (120d0 <ble_l2cap_sig_extract_expired+0x58>)
   1208e:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   12090:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    while (proc != NULL) {
   12094:	e00a      	b.n	120ac <ble_l2cap_sig_extract_expired+0x34>

        time_diff = proc->exp_os_ticks - now;
        if (time_diff <= 0) {
            /* Procedure has expired; move it to the destination list. */
            if (prev == NULL) {
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   12096:	480e      	ldr	r0, [pc, #56]	; (120d0 <ble_l2cap_sig_extract_expired+0x58>)
   12098:	6802      	ldr	r2, [r0, #0]
   1209a:	6812      	ldr	r2, [r2, #0]
   1209c:	6002      	str	r2, [r0, #0]
   1209e:	b17a      	cbz	r2, 120c0 <ble_l2cap_sig_extract_expired+0x48>
            } else {
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
            }
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   120a0:	2200      	movs	r2, #0
   120a2:	601a      	str	r2, [r3, #0]
   120a4:	6862      	ldr	r2, [r4, #4]
   120a6:	6013      	str	r3, [r2, #0]
   120a8:	6063      	str	r3, [r4, #4]
        } else {
            if (time_diff < next_exp_in) {
                next_exp_in = time_diff;
   120aa:	460b      	mov	r3, r1
    while (proc != NULL) {
   120ac:	b15b      	cbz	r3, 120c6 <ble_l2cap_sig_extract_expired+0x4e>
        next = STAILQ_NEXT(proc, next);
   120ae:	6819      	ldr	r1, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   120b0:	685a      	ldr	r2, [r3, #4]
   120b2:	1b92      	subs	r2, r2, r6
        if (time_diff <= 0) {
   120b4:	2a00      	cmp	r2, #0
   120b6:	ddee      	ble.n	12096 <ble_l2cap_sig_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   120b8:	4295      	cmp	r5, r2
   120ba:	ddf6      	ble.n	120aa <ble_l2cap_sig_extract_expired+0x32>
                next_exp_in = time_diff;
   120bc:	4615      	mov	r5, r2
   120be:	e7f4      	b.n	120aa <ble_l2cap_sig_extract_expired+0x32>
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   120c0:	4602      	mov	r2, r0
   120c2:	6050      	str	r0, [r2, #4]
   120c4:	e7ec      	b.n	120a0 <ble_l2cap_sig_extract_expired+0x28>
        }

        proc = next;
    }

    ble_hs_unlock();
   120c6:	f7fd fd63 	bl	fb90 <ble_hs_unlock>

    return next_exp_in;
}
   120ca:	4628      	mov	r0, r5
   120cc:	bd70      	pop	{r4, r5, r6, pc}
   120ce:	bf00      	nop
   120d0:	20007678 	.word	0x20007678

000120d4 <ble_l2cap_sig_proc_free>:
    if (proc != NULL) {
   120d4:	b128      	cbz	r0, 120e2 <ble_l2cap_sig_proc_free+0xe>
{
   120d6:	b508      	push	{r3, lr}
   120d8:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_l2cap_sig_proc_pool, proc);
   120da:	4802      	ldr	r0, [pc, #8]	; (120e4 <ble_l2cap_sig_proc_free+0x10>)
   120dc:	f7f8 fd69 	bl	abb2 <os_memblock_put>
}
   120e0:	bd08      	pop	{r3, pc}
   120e2:	4770      	bx	lr
   120e4:	2000765c 	.word	0x2000765c

000120e8 <ble_l2cap_sig_process_status>:
{
   120e8:	b510      	push	{r4, lr}
   120ea:	4604      	mov	r4, r0
    if (status == 0) {
   120ec:	b111      	cbz	r1, 120f4 <ble_l2cap_sig_process_status+0xc>
        ble_l2cap_sig_proc_free(proc);
   120ee:	f7ff fff1 	bl	120d4 <ble_l2cap_sig_proc_free>
}
   120f2:	bd10      	pop	{r4, pc}
        ble_l2cap_sig_proc_set_timer(proc);
   120f4:	f7ff ffb6 	bl	12064 <ble_l2cap_sig_proc_set_timer>
        ble_l2cap_sig_proc_insert(proc);
   120f8:	4620      	mov	r0, r4
   120fa:	f7ff ff61 	bl	11fc0 <ble_l2cap_sig_proc_insert>
   120fe:	e7f8      	b.n	120f2 <ble_l2cap_sig_process_status+0xa>

00012100 <ble_l2cap_sig_rx_reject>:
{
   12100:	b508      	push	{r3, lr}
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   12102:	784a      	ldrb	r2, [r1, #1]
   12104:	2101      	movs	r1, #1
   12106:	f7ff ff6d 	bl	11fe4 <ble_l2cap_sig_proc_extract>
   if (!proc) {
   1210a:	b108      	cbz	r0, 12110 <ble_l2cap_sig_rx_reject+0x10>
   ble_l2cap_sig_proc_free(proc);
   1210c:	f7ff ffe2 	bl	120d4 <ble_l2cap_sig_proc_free>
}
   12110:	2000      	movs	r0, #0
   12112:	bd08      	pop	{r3, pc}

00012114 <ble_l2cap_sig_update_rsp_rx>:
{
   12114:	b570      	push	{r4, r5, r6, lr}
   12116:	4616      	mov	r6, r2
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   12118:	784a      	ldrb	r2, [r1, #1]
   1211a:	2100      	movs	r1, #0
   1211c:	f7ff ff62 	bl	11fe4 <ble_l2cap_sig_proc_extract>
    if (proc == NULL) {
   12120:	b1d8      	cbz	r0, 1215a <ble_l2cap_sig_update_rsp_rx+0x46>
   12122:	4605      	mov	r5, r0
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_RSP_SZ);
   12124:	2102      	movs	r1, #2
   12126:	4630      	mov	r0, r6
   12128:	f7ff fab5 	bl	11696 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1212c:	4604      	mov	r4, r0
   1212e:	b948      	cbnz	r0, 12144 <ble_l2cap_sig_update_rsp_rx+0x30>
    rsp = (struct ble_l2cap_sig_update_rsp *)(*om)->om_data;
   12130:	6833      	ldr	r3, [r6, #0]
   12132:	681b      	ldr	r3, [r3, #0]
    switch (le16toh(rsp->result)) {
   12134:	881b      	ldrh	r3, [r3, #0]
   12136:	b11b      	cbz	r3, 12140 <ble_l2cap_sig_update_rsp_rx+0x2c>
   12138:	2b01      	cmp	r3, #1
   1213a:	d00c      	beq.n	12156 <ble_l2cap_sig_update_rsp_rx+0x42>
        cb_status = BLE_HS_EBADDATA;
   1213c:	210a      	movs	r1, #10
        break;
   1213e:	e002      	b.n	12146 <ble_l2cap_sig_update_rsp_rx+0x32>
        cb_status = 0;
   12140:	4601      	mov	r1, r0
   12142:	e000      	b.n	12146 <ble_l2cap_sig_update_rsp_rx+0x32>
        cb_status = rc;
   12144:	4601      	mov	r1, r0
    ble_l2cap_sig_update_call_cb(proc, cb_status);
   12146:	4628      	mov	r0, r5
   12148:	f7ff ff33 	bl	11fb2 <ble_l2cap_sig_update_call_cb>
    ble_l2cap_sig_proc_free(proc);
   1214c:	4628      	mov	r0, r5
   1214e:	f7ff ffc1 	bl	120d4 <ble_l2cap_sig_proc_free>
}
   12152:	4620      	mov	r0, r4
   12154:	bd70      	pop	{r4, r5, r6, pc}
        cb_status = BLE_HS_EREJECT;
   12156:	2110      	movs	r1, #16
   12158:	e7f5      	b.n	12146 <ble_l2cap_sig_update_rsp_rx+0x32>
        return 0;
   1215a:	2400      	movs	r4, #0
   1215c:	e7f9      	b.n	12152 <ble_l2cap_sig_update_rsp_rx+0x3e>

0001215e <ble_l2cap_sig_rx>:
{
   1215e:	b5f0      	push	{r4, r5, r6, r7, lr}
   12160:	b085      	sub	sp, #20
   12162:	4604      	mov	r4, r0
    conn_handle = chan->conn_handle;
   12164:	8887      	ldrh	r7, [r0, #4]
    om = &chan->rx_buf;
   12166:	f100 0610 	add.w	r6, r0, #16
    ble_hs_log_mbuf(*om);
   1216a:	6900      	ldr	r0, [r0, #16]
   1216c:	f7ff fa40 	bl	115f0 <ble_hs_log_mbuf>
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_HDR_SZ);
   12170:	2104      	movs	r1, #4
   12172:	4630      	mov	r0, r6
   12174:	f7ff fa8f 	bl	11696 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   12178:	4605      	mov	r5, r0
   1217a:	b110      	cbz	r0, 12182 <ble_l2cap_sig_rx+0x24>
}
   1217c:	4628      	mov	r0, r5
   1217e:	b005      	add	sp, #20
   12180:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_l2cap_sig_hdr_parse((*om)->om_data, (*om)->om_len, &hdr);
   12182:	6923      	ldr	r3, [r4, #16]
   12184:	aa03      	add	r2, sp, #12
   12186:	88d9      	ldrh	r1, [r3, #6]
   12188:	6818      	ldr	r0, [r3, #0]
   1218a:	f000 f93f 	bl	1240c <ble_l2cap_sig_hdr_parse>
    os_mbuf_adj(*om, BLE_L2CAP_SIG_HDR_SZ);
   1218e:	2104      	movs	r1, #4
   12190:	6920      	ldr	r0, [r4, #16]
   12192:	f7f8 f9c6 	bl	a522 <os_mbuf_adj>
    if (OS_MBUF_PKTLEN(*om) != hdr.length) {
   12196:	6923      	ldr	r3, [r4, #16]
   12198:	8a1a      	ldrh	r2, [r3, #16]
   1219a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1219e:	429a      	cmp	r2, r3
   121a0:	d117      	bne.n	121d2 <ble_l2cap_sig_rx+0x74>
    rx_cb = ble_l2cap_sig_dispatch_get(hdr.op);
   121a2:	f89d 000c 	ldrb.w	r0, [sp, #12]
   121a6:	f7ff fee1 	bl	11f6c <ble_l2cap_sig_dispatch_get>
    if (rx_cb == NULL) {
   121aa:	4603      	mov	r3, r0
   121ac:	b178      	cbz	r0, 121ce <ble_l2cap_sig_rx+0x70>
        rc = rx_cb(conn_handle, &hdr, om);
   121ae:	4632      	mov	r2, r6
   121b0:	a903      	add	r1, sp, #12
   121b2:	4638      	mov	r0, r7
   121b4:	4798      	blx	r3
    if (rc) {
   121b6:	4605      	mov	r5, r0
   121b8:	2800      	cmp	r0, #0
   121ba:	d0df      	beq.n	1217c <ble_l2cap_sig_rx+0x1e>
        ble_l2cap_sig_reject_tx(conn_handle, hdr.identifier,
   121bc:	f89d 100d 	ldrb.w	r1, [sp, #13]
   121c0:	2200      	movs	r2, #0
   121c2:	9200      	str	r2, [sp, #0]
   121c4:	4613      	mov	r3, r2
   121c6:	4638      	mov	r0, r7
   121c8:	f000 f947 	bl	1245a <ble_l2cap_sig_reject_tx>
   121cc:	e7d6      	b.n	1217c <ble_l2cap_sig_rx+0x1e>
        rc = BLE_HS_EREJECT;
   121ce:	2510      	movs	r5, #16
   121d0:	e7f4      	b.n	121bc <ble_l2cap_sig_rx+0x5e>
        return BLE_HS_EBADDATA;
   121d2:	250a      	movs	r5, #10
   121d4:	e7d2      	b.n	1217c <ble_l2cap_sig_rx+0x1e>

000121d6 <ble_l2cap_sig_update_req_rx>:
{
   121d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   121d8:	b087      	sub	sp, #28
   121da:	4606      	mov	r6, r0
   121dc:	460f      	mov	r7, r1
   121de:	4615      	mov	r5, r2
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_REQ_SZ);
   121e0:	2108      	movs	r1, #8
   121e2:	4610      	mov	r0, r2
   121e4:	f7ff fa57 	bl	11696 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   121e8:	4604      	mov	r4, r0
   121ea:	b110      	cbz	r0, 121f2 <ble_l2cap_sig_update_req_rx+0x1c>
}
   121ec:	4620      	mov	r0, r4
   121ee:	b007      	add	sp, #28
   121f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = ble_hs_atomic_conn_flags(conn_handle, &conn_flags);
   121f2:	f10d 0107 	add.w	r1, sp, #7
   121f6:	4630      	mov	r0, r6
   121f8:	f7fe f9ea 	bl	105d0 <ble_hs_atomic_conn_flags>
    if (rc != 0) {
   121fc:	4604      	mov	r4, r0
   121fe:	2800      	cmp	r0, #0
   12200:	d1f4      	bne.n	121ec <ble_l2cap_sig_update_req_rx+0x16>
    sig_err = !(conn_flags & BLE_HS_CONN_F_MASTER);
   12202:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (sig_err) {
   12206:	f013 0f01 	tst.w	r3, #1
   1220a:	d030      	beq.n	1226e <ble_l2cap_sig_update_req_rx+0x98>
    req = (struct ble_l2cap_sig_update_req *)(*om)->om_data;
   1220c:	682b      	ldr	r3, [r5, #0]
   1220e:	681b      	ldr	r3, [r3, #0]
    params.itvl_min = le16toh(req->itvl_min);
   12210:	881a      	ldrh	r2, [r3, #0]
   12212:	f8ad 2008 	strh.w	r2, [sp, #8]
    params.itvl_max = le16toh(req->itvl_max);
   12216:	885a      	ldrh	r2, [r3, #2]
   12218:	f8ad 200a 	strh.w	r2, [sp, #10]
    params.latency = le16toh(req->slave_latency);
   1221c:	889a      	ldrh	r2, [r3, #4]
   1221e:	f8ad 200c 	strh.w	r2, [sp, #12]
    params.supervision_timeout = le16toh(req->timeout_multiplier);
   12222:	88db      	ldrh	r3, [r3, #6]
   12224:	f8ad 300e 	strh.w	r3, [sp, #14]
    params.min_ce_len = BLE_GAP_INITIAL_CONN_MIN_CE_LEN;
   12228:	2300      	movs	r3, #0
   1222a:	f8ad 3010 	strh.w	r3, [sp, #16]
    params.max_ce_len = BLE_GAP_INITIAL_CONN_MAX_CE_LEN;
   1222e:	f8ad 3012 	strh.w	r3, [sp, #18]
    rc = ble_gap_rx_l2cap_update_req(conn_handle, &params);
   12232:	a902      	add	r1, sp, #8
   12234:	4630      	mov	r0, r6
   12236:	f7fa ff17 	bl	d068 <ble_gap_rx_l2cap_update_req>
    if (rc == 0) {
   1223a:	4603      	mov	r3, r0
   1223c:	b178      	cbz	r0, 1225e <ble_l2cap_sig_update_req_rx+0x88>
    if (rc == 0) {
   1223e:	b9a3      	cbnz	r3, 1226a <ble_l2cap_sig_update_req_rx+0x94>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_ACCEPT;
   12240:	2500      	movs	r5, #0
    rsp = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_RSP, hdr->identifier,
   12242:	ab05      	add	r3, sp, #20
   12244:	2202      	movs	r2, #2
   12246:	7879      	ldrb	r1, [r7, #1]
   12248:	2013      	movs	r0, #19
   1224a:	f000 f8e6 	bl	1241a <ble_l2cap_sig_cmd_get>
    if (!rsp) {
   1224e:	2800      	cmp	r0, #0
   12250:	d0cc      	beq.n	121ec <ble_l2cap_sig_update_req_rx+0x16>
    rsp->result = htole16(l2cap_result);
   12252:	8005      	strh	r5, [r0, #0]
    ble_l2cap_sig_tx(conn_handle, txom);
   12254:	9905      	ldr	r1, [sp, #20]
   12256:	4630      	mov	r0, r6
   12258:	f000 f8be 	bl	123d8 <ble_l2cap_sig_tx>
    return 0;
   1225c:	e7c6      	b.n	121ec <ble_l2cap_sig_update_req_rx+0x16>
        rc = ble_gap_update_params(conn_handle, &params);
   1225e:	a902      	add	r1, sp, #8
   12260:	4630      	mov	r0, r6
   12262:	f7fb faad 	bl	d7c0 <ble_gap_update_params>
   12266:	4603      	mov	r3, r0
   12268:	e7e9      	b.n	1223e <ble_l2cap_sig_update_req_rx+0x68>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_REJECT;
   1226a:	2501      	movs	r5, #1
   1226c:	e7e9      	b.n	12242 <ble_l2cap_sig_update_req_rx+0x6c>
        return BLE_HS_EREJECT;
   1226e:	2410      	movs	r4, #16
   12270:	e7bc      	b.n	121ec <ble_l2cap_sig_update_req_rx+0x16>

00012272 <ble_l2cap_sig_update>:
{
   12272:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12276:	b085      	sub	sp, #20
   12278:	4606      	mov	r6, r0
   1227a:	460f      	mov	r7, r1
   1227c:	4691      	mov	r9, r2
   1227e:	4698      	mov	r8, r3
    ble_hs_lock();
   12280:	f7fd fc82 	bl	fb88 <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   12284:	ab02      	add	r3, sp, #8
   12286:	aa01      	add	r2, sp, #4
   12288:	2105      	movs	r1, #5
   1228a:	4630      	mov	r0, r6
   1228c:	f7ff fa3d 	bl	1170a <ble_hs_misc_conn_chan_find_reqd>
    if (rc != 0) {
   12290:	bb50      	cbnz	r0, 122e8 <ble_l2cap_sig_update+0x76>
    master = conn->bhc_flags & BLE_HS_CONN_F_MASTER;
   12292:	9b01      	ldr	r3, [sp, #4]
   12294:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    ble_hs_unlock();
   12298:	f7fd fc7a 	bl	fb90 <ble_hs_unlock>
    if (master) {
   1229c:	f014 0f01 	tst.w	r4, #1
   122a0:	d12e      	bne.n	12300 <ble_l2cap_sig_update+0x8e>
    proc = ble_l2cap_sig_proc_alloc();
   122a2:	f7ff fecf 	bl	12044 <ble_l2cap_sig_proc_alloc>
    if (proc == NULL) {
   122a6:	4605      	mov	r5, r0
   122a8:	b368      	cbz	r0, 12306 <ble_l2cap_sig_update+0x94>
    proc->op = BLE_L2CAP_SIG_PROC_OP_UPDATE;
   122aa:	2300      	movs	r3, #0
   122ac:	7283      	strb	r3, [r0, #10]
    proc->id = ble_l2cap_sig_next_id();
   122ae:	f7ff fe4f 	bl	11f50 <ble_l2cap_sig_next_id>
   122b2:	4601      	mov	r1, r0
   122b4:	72e8      	strb	r0, [r5, #11]
    proc->conn_handle = conn_handle;
   122b6:	812e      	strh	r6, [r5, #8]
    proc->update.cb = cb;
   122b8:	f8c5 900c 	str.w	r9, [r5, #12]
    proc->update.cb_arg = cb_arg;
   122bc:	f8c5 8010 	str.w	r8, [r5, #16]
    req = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_REQ, proc->id,
   122c0:	ab03      	add	r3, sp, #12
   122c2:	2208      	movs	r2, #8
   122c4:	2012      	movs	r0, #18
   122c6:	f000 f8a8 	bl	1241a <ble_l2cap_sig_cmd_get>
    if (!req) {
   122ca:	b1f0      	cbz	r0, 1230a <ble_l2cap_sig_update+0x98>
    req->itvl_min = htole16(params->itvl_min);
   122cc:	883a      	ldrh	r2, [r7, #0]
   122ce:	8002      	strh	r2, [r0, #0]
    req->itvl_max = htole16(params->itvl_max);
   122d0:	887a      	ldrh	r2, [r7, #2]
   122d2:	8042      	strh	r2, [r0, #2]
    req->slave_latency = htole16(params->slave_latency);
   122d4:	88ba      	ldrh	r2, [r7, #4]
   122d6:	8082      	strh	r2, [r0, #4]
    req->timeout_multiplier = htole16(params->timeout_multiplier);
   122d8:	88fa      	ldrh	r2, [r7, #6]
   122da:	80c2      	strh	r2, [r0, #6]
    rc = ble_l2cap_sig_tx(conn_handle, txom);
   122dc:	9903      	ldr	r1, [sp, #12]
   122de:	4630      	mov	r0, r6
   122e0:	f000 f87a 	bl	123d8 <ble_l2cap_sig_tx>
   122e4:	4604      	mov	r4, r0
   122e6:	e003      	b.n	122f0 <ble_l2cap_sig_update+0x7e>
   122e8:	4604      	mov	r4, r0
        ble_hs_unlock();
   122ea:	f7fd fc51 	bl	fb90 <ble_hs_unlock>
    proc = NULL;
   122ee:	2500      	movs	r5, #0
    ble_l2cap_sig_process_status(proc, rc);
   122f0:	4621      	mov	r1, r4
   122f2:	4628      	mov	r0, r5
   122f4:	f7ff fef8 	bl	120e8 <ble_l2cap_sig_process_status>
}
   122f8:	4620      	mov	r0, r4
   122fa:	b005      	add	sp, #20
   122fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = BLE_HS_EINVAL;
   12300:	2403      	movs	r4, #3
    proc = NULL;
   12302:	2500      	movs	r5, #0
   12304:	e7f4      	b.n	122f0 <ble_l2cap_sig_update+0x7e>
        rc = BLE_HS_ENOMEM;
   12306:	2406      	movs	r4, #6
   12308:	e7f2      	b.n	122f0 <ble_l2cap_sig_update+0x7e>
        rc = BLE_HS_ENOMEM;
   1230a:	2406      	movs	r4, #6
   1230c:	e7f0      	b.n	122f0 <ble_l2cap_sig_update+0x7e>
	...

00012310 <ble_l2cap_sig_create_chan>:
{
   12310:	b508      	push	{r3, lr}
    chan = ble_l2cap_chan_alloc(conn_handle);
   12312:	f7ff fcf9 	bl	11d08 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   12316:	4603      	mov	r3, r0
   12318:	b130      	cbz	r0, 12328 <ble_l2cap_sig_create_chan+0x18>
    chan->scid = BLE_L2CAP_CID_SIG;
   1231a:	2205      	movs	r2, #5
   1231c:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SIG;
   1231e:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_L2CAP_SIG_MTU;
   12320:	2264      	movs	r2, #100	; 0x64
   12322:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_l2cap_sig_rx;
   12324:	4a01      	ldr	r2, [pc, #4]	; (1232c <ble_l2cap_sig_create_chan+0x1c>)
   12326:	6182      	str	r2, [r0, #24]
}
   12328:	4618      	mov	r0, r3
   1232a:	bd08      	pop	{r3, pc}
   1232c:	0001215f 	.word	0x0001215f

00012330 <ble_l2cap_sig_conn_broken>:

void
ble_l2cap_sig_conn_broken(uint16_t conn_handle, int reason)
{
   12330:	b538      	push	{r3, r4, r5, lr}
   12332:	460d      	mov	r5, r1
    struct ble_l2cap_sig_proc *proc;

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   12334:	e007      	b.n	12346 <ble_l2cap_sig_conn_broken+0x16>
            break;
#endif
#endif
            }

            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   12336:	4a0b      	ldr	r2, [pc, #44]	; (12364 <ble_l2cap_sig_conn_broken+0x34>)
   12338:	6813      	ldr	r3, [r2, #0]
   1233a:	681b      	ldr	r3, [r3, #0]
   1233c:	6013      	str	r3, [r2, #0]
   1233e:	b16b      	cbz	r3, 1235c <ble_l2cap_sig_conn_broken+0x2c>
            ble_l2cap_sig_proc_free(proc);
   12340:	4620      	mov	r0, r4
   12342:	f7ff fec7 	bl	120d4 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   12346:	4b07      	ldr	r3, [pc, #28]	; (12364 <ble_l2cap_sig_conn_broken+0x34>)
   12348:	681c      	ldr	r4, [r3, #0]
   1234a:	b154      	cbz	r4, 12362 <ble_l2cap_sig_conn_broken+0x32>
        switch(proc->op) {
   1234c:	7aa3      	ldrb	r3, [r4, #10]
   1234e:	2b00      	cmp	r3, #0
   12350:	d1f1      	bne.n	12336 <ble_l2cap_sig_conn_broken+0x6>
                ble_l2cap_sig_update_call_cb(proc, reason);
   12352:	4629      	mov	r1, r5
   12354:	4620      	mov	r0, r4
   12356:	f7ff fe2c 	bl	11fb2 <ble_l2cap_sig_update_call_cb>
                break;
   1235a:	e7ec      	b.n	12336 <ble_l2cap_sig_conn_broken+0x6>
            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   1235c:	4613      	mov	r3, r2
   1235e:	605a      	str	r2, [r3, #4]
   12360:	e7ee      	b.n	12340 <ble_l2cap_sig_conn_broken+0x10>
    }

}
   12362:	bd38      	pop	{r3, r4, r5, pc}
   12364:	20007678 	.word	0x20007678

00012368 <ble_l2cap_sig_timer>:
 * @return                      The number of ticks until this function should
 *                                  be called again.
 */
int32_t
ble_l2cap_sig_timer(void)
{
   12368:	b530      	push	{r4, r5, lr}
   1236a:	b083      	sub	sp, #12

    /* Remove timed-out procedures from the main list and insert them into a
     * temporary list.  This function also calculates the number of ticks until
     * the next expiration will occur.
     */
    ticks_until_exp = ble_l2cap_sig_extract_expired(&temp_list);
   1236c:	4668      	mov	r0, sp
   1236e:	f7ff fe83 	bl	12078 <ble_l2cap_sig_extract_expired>
   12372:	4605      	mov	r5, r0

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   12374:	e006      	b.n	12384 <ble_l2cap_sig_timer+0x1c>
                ble_l2cap_sig_coc_disconnect_cb(proc, BLE_HS_ETIMEOUT);
            break;
#endif
        }

        STAILQ_REMOVE_HEAD(&temp_list, next);
   12376:	9b00      	ldr	r3, [sp, #0]
   12378:	681b      	ldr	r3, [r3, #0]
   1237a:	9300      	str	r3, [sp, #0]
   1237c:	b163      	cbz	r3, 12398 <ble_l2cap_sig_timer+0x30>
        ble_l2cap_sig_proc_free(proc);
   1237e:	4620      	mov	r0, r4
   12380:	f7ff fea8 	bl	120d4 <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   12384:	9c00      	ldr	r4, [sp, #0]
   12386:	b154      	cbz	r4, 1239e <ble_l2cap_sig_timer+0x36>
        switch(proc->op) {
   12388:	7aa3      	ldrb	r3, [r4, #10]
   1238a:	2b00      	cmp	r3, #0
   1238c:	d1f3      	bne.n	12376 <ble_l2cap_sig_timer+0xe>
                ble_l2cap_sig_update_call_cb(proc, BLE_HS_ETIMEOUT);
   1238e:	210d      	movs	r1, #13
   12390:	4620      	mov	r0, r4
   12392:	f7ff fe0e 	bl	11fb2 <ble_l2cap_sig_update_call_cb>
                break;
   12396:	e7ee      	b.n	12376 <ble_l2cap_sig_timer+0xe>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   12398:	f8cd d004 	str.w	sp, [sp, #4]
   1239c:	e7ef      	b.n	1237e <ble_l2cap_sig_timer+0x16>
    }

    return ticks_until_exp;
}
   1239e:	4628      	mov	r0, r5
   123a0:	b003      	add	sp, #12
   123a2:	bd30      	pop	{r4, r5, pc}

000123a4 <ble_l2cap_sig_init>:

int
ble_l2cap_sig_init(void)
{
   123a4:	b500      	push	{lr}
   123a6:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_l2cap_sig_procs);
   123a8:	4b07      	ldr	r3, [pc, #28]	; (123c8 <ble_l2cap_sig_init+0x24>)
   123aa:	2200      	movs	r2, #0
   123ac:	601a      	str	r2, [r3, #0]
   123ae:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_l2cap_sig_proc_pool,
   123b0:	4b06      	ldr	r3, [pc, #24]	; (123cc <ble_l2cap_sig_init+0x28>)
   123b2:	9300      	str	r3, [sp, #0]
   123b4:	4b06      	ldr	r3, [pc, #24]	; (123d0 <ble_l2cap_sig_init+0x2c>)
   123b6:	2214      	movs	r2, #20
   123b8:	2101      	movs	r1, #1
   123ba:	4806      	ldr	r0, [pc, #24]	; (123d4 <ble_l2cap_sig_init+0x30>)
   123bc:	f7f8 fb8c 	bl	aad8 <os_mempool_init>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   123c0:	b003      	add	sp, #12
   123c2:	f85d fb04 	ldr.w	pc, [sp], #4
   123c6:	bf00      	nop
   123c8:	20007678 	.word	0x20007678
   123cc:	00028f14 	.word	0x00028f14
   123d0:	20007648 	.word	0x20007648
   123d4:	2000765c 	.word	0x2000765c

000123d8 <ble_l2cap_sig_tx>:
#include <string.h>
#include "ble_hs_priv.h"

int
ble_l2cap_sig_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   123d8:	b530      	push	{r4, r5, lr}
   123da:	b083      	sub	sp, #12
   123dc:	4604      	mov	r4, r0
   123de:	460d      	mov	r5, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   123e0:	f7fd fbd2 	bl	fb88 <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   123e4:	ab01      	add	r3, sp, #4
   123e6:	466a      	mov	r2, sp
   123e8:	2105      	movs	r1, #5
   123ea:	4620      	mov	r0, r4
   123ec:	f7ff f98d 	bl	1170a <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   123f0:	4604      	mov	r4, r0
   123f2:	b120      	cbz	r0, 123fe <ble_l2cap_sig_tx+0x26>
        rc = ble_l2cap_tx(conn, chan, txom);
    }
    ble_hs_unlock();
   123f4:	f7fd fbcc 	bl	fb90 <ble_hs_unlock>

    return rc;
}
   123f8:	4620      	mov	r0, r4
   123fa:	b003      	add	sp, #12
   123fc:	bd30      	pop	{r4, r5, pc}
        rc = ble_l2cap_tx(conn, chan, txom);
   123fe:	462a      	mov	r2, r5
   12400:	9901      	ldr	r1, [sp, #4]
   12402:	9800      	ldr	r0, [sp, #0]
   12404:	f7ff fd67 	bl	11ed6 <ble_l2cap_tx>
   12408:	4604      	mov	r4, r0
   1240a:	e7f3      	b.n	123f4 <ble_l2cap_sig_tx+0x1c>

0001240c <ble_l2cap_sig_hdr_parse>:
{
    struct ble_l2cap_sig_hdr *src = payload;

    BLE_HS_DBG_ASSERT(len >= BLE_L2CAP_SIG_HDR_SZ);

    dst->op = src->op;
   1240c:	7803      	ldrb	r3, [r0, #0]
   1240e:	7013      	strb	r3, [r2, #0]
    dst->identifier = src->identifier;
   12410:	7843      	ldrb	r3, [r0, #1]
   12412:	7053      	strb	r3, [r2, #1]
    dst->length = le16toh(src->length);
   12414:	8843      	ldrh	r3, [r0, #2]
   12416:	8053      	strh	r3, [r2, #2]
}
   12418:	4770      	bx	lr

0001241a <ble_l2cap_sig_cmd_get>:
}

void *
ble_l2cap_sig_cmd_get(uint8_t opcode, uint8_t id, uint16_t len,
                      struct os_mbuf **txom)
{
   1241a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1241e:	4680      	mov	r8, r0
   12420:	460f      	mov	r7, r1
   12422:	4616      	mov	r6, r2
   12424:	461d      	mov	r5, r3
    struct ble_l2cap_sig_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   12426:	f7ff f915 	bl	11654 <ble_hs_mbuf_l2cap_pkt>
   1242a:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   1242c:	b198      	cbz	r0, 12456 <ble_l2cap_sig_cmd_get+0x3c>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   1242e:	1d31      	adds	r1, r6, #4
   12430:	b289      	uxth	r1, r1
   12432:	f7f8 f9cf 	bl	a7d4 <os_mbuf_extend>
   12436:	4604      	mov	r4, r0
   12438:	b148      	cbz	r0, 1244e <ble_l2cap_sig_cmd_get+0x34>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_l2cap_sig_hdr *)(*txom)->om_data;
   1243a:	682b      	ldr	r3, [r5, #0]
   1243c:	681c      	ldr	r4, [r3, #0]

    hdr->op = opcode;
   1243e:	f884 8000 	strb.w	r8, [r4]
    hdr->identifier = id;
   12442:	7067      	strb	r7, [r4, #1]
    hdr->length = htole16(len);
   12444:	8066      	strh	r6, [r4, #2]

    return hdr->data;
   12446:	3404      	adds	r4, #4
}
   12448:	4620      	mov	r0, r4
   1244a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free_chain(*txom);
   1244e:	6828      	ldr	r0, [r5, #0]
   12450:	f7f7 ff38 	bl	a2c4 <os_mbuf_free_chain>
        return NULL;
   12454:	e7f8      	b.n	12448 <ble_l2cap_sig_cmd_get+0x2e>
        return NULL;
   12456:	2400      	movs	r4, #0
   12458:	e7f6      	b.n	12448 <ble_l2cap_sig_cmd_get+0x2e>

0001245a <ble_l2cap_sig_reject_tx>:
{
   1245a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1245c:	b083      	sub	sp, #12
   1245e:	4605      	mov	r5, r0
   12460:	4617      	mov	r7, r2
   12462:	461e      	mov	r6, r3
   12464:	9c08      	ldr	r4, [sp, #32]
    cmd = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_REJECT, id,
   12466:	1ca2      	adds	r2, r4, #2
   12468:	ab01      	add	r3, sp, #4
   1246a:	b292      	uxth	r2, r2
   1246c:	2001      	movs	r0, #1
   1246e:	f7ff ffd4 	bl	1241a <ble_l2cap_sig_cmd_get>
    if (!cmd) {
   12472:	b158      	cbz	r0, 1248c <ble_l2cap_sig_reject_tx+0x32>
    cmd->reason = htole16(reason);
   12474:	f820 7b02 	strh.w	r7, [r0], #2
    memcpy(cmd->data, data, data_len);
   12478:	4622      	mov	r2, r4
   1247a:	4631      	mov	r1, r6
   1247c:	f7f9 fa08 	bl	b890 <memcpy>
    return ble_l2cap_sig_tx(conn_handle, txom);
   12480:	9901      	ldr	r1, [sp, #4]
   12482:	4628      	mov	r0, r5
   12484:	f7ff ffa8 	bl	123d8 <ble_l2cap_sig_tx>
}
   12488:	b003      	add	sp, #12
   1248a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1248c:	2006      	movs	r0, #6
   1248e:	e7fb      	b.n	12488 <ble_l2cap_sig_reject_tx+0x2e>

00012490 <ble_l2cap_sig_reject_invalid_cid_tx>:
{
   12490:	b500      	push	{lr}
   12492:	b085      	sub	sp, #20
    } data = {
   12494:	f8ad 300c 	strh.w	r3, [sp, #12]
   12498:	f8ad 200e 	strh.w	r2, [sp, #14]
    return ble_l2cap_sig_reject_tx(conn_handle, id,
   1249c:	2304      	movs	r3, #4
   1249e:	9300      	str	r3, [sp, #0]
   124a0:	ab03      	add	r3, sp, #12
   124a2:	2202      	movs	r2, #2
   124a4:	f7ff ffd9 	bl	1245a <ble_l2cap_sig_reject_tx>
}
   124a8:	b005      	add	sp, #20
   124aa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000124b0 <ble_sm_dispatch_get>:
}

static ble_sm_rx_fn *
ble_sm_dispatch_get(uint8_t op)
{
    if (op >= sizeof ble_sm_dispatch / sizeof ble_sm_dispatch[0]) {
   124b0:	280e      	cmp	r0, #14
   124b2:	d803      	bhi.n	124bc <ble_sm_dispatch_get+0xc>
        return NULL;
    }

    return ble_sm_dispatch[op];
   124b4:	4b02      	ldr	r3, [pc, #8]	; (124c0 <ble_sm_dispatch_get+0x10>)
   124b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   124ba:	4770      	bx	lr
        return NULL;
   124bc:	2000      	movs	r0, #0
}
   124be:	4770      	bx	lr
   124c0:	00028f2c 	.word	0x00028f2c

000124c4 <ble_sm_proc_remove>:

static void
ble_sm_proc_remove(struct ble_sm_proc *proc,
                         struct ble_sm_proc *prev)
{
    if (prev == NULL) {
   124c4:	b121      	cbz	r1, 124d0 <ble_sm_proc_remove+0xc>
        BLE_HS_DBG_ASSERT(STAILQ_FIRST(&ble_sm_procs) == proc);
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
    } else {
        BLE_HS_DBG_ASSERT(STAILQ_NEXT(prev, next) == proc);
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   124c6:	680a      	ldr	r2, [r1, #0]
   124c8:	6812      	ldr	r2, [r2, #0]
   124ca:	600a      	str	r2, [r1, #0]
   124cc:	b14a      	cbz	r2, 124e2 <ble_sm_proc_remove+0x1e>
    }

    ble_sm_dbg_assert_no_cycles();
}
   124ce:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   124d0:	4a05      	ldr	r2, [pc, #20]	; (124e8 <ble_sm_proc_remove+0x24>)
   124d2:	6813      	ldr	r3, [r2, #0]
   124d4:	681b      	ldr	r3, [r3, #0]
   124d6:	6013      	str	r3, [r2, #0]
   124d8:	2b00      	cmp	r3, #0
   124da:	d1f8      	bne.n	124ce <ble_sm_proc_remove+0xa>
   124dc:	4613      	mov	r3, r2
   124de:	605a      	str	r2, [r3, #4]
   124e0:	4770      	bx	lr
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   124e2:	4a01      	ldr	r2, [pc, #4]	; (124e8 <ble_sm_proc_remove+0x24>)
   124e4:	6051      	str	r1, [r2, #4]
}
   124e6:	e7f2      	b.n	124ce <ble_sm_proc_remove+0xa>
   124e8:	2000779c 	.word	0x2000779c

000124ec <ble_sm_proc_matches>:
}

static int
ble_sm_proc_matches(struct ble_sm_proc *proc, uint16_t conn_handle,
                    uint8_t state, int is_initiator)
{
   124ec:	b410      	push	{r4}
    int proc_is_initiator;

    if (conn_handle != proc->conn_handle) {
   124ee:	8944      	ldrh	r4, [r0, #10]
   124f0:	428c      	cmp	r4, r1
   124f2:	d003      	beq.n	124fc <ble_sm_proc_matches+0x10>
        return 0;
   124f4:	2000      	movs	r0, #0
    if (is_initiator != -1 && is_initiator != proc_is_initiator) {
        return 0;
    }

    return 1;
}
   124f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   124fa:	4770      	bx	lr
    if (state != BLE_SM_PROC_STATE_NONE && state != proc->state) {
   124fc:	2aff      	cmp	r2, #255	; 0xff
   124fe:	d004      	beq.n	1250a <ble_sm_proc_matches+0x1e>
   12500:	7b41      	ldrb	r1, [r0, #13]
   12502:	4291      	cmp	r1, r2
   12504:	d001      	beq.n	1250a <ble_sm_proc_matches+0x1e>
        return 0;
   12506:	2000      	movs	r0, #0
   12508:	e7f5      	b.n	124f6 <ble_sm_proc_matches+0xa>
    proc_is_initiator = !!(proc->flags & BLE_SM_PROC_F_INITIATOR);
   1250a:	7a02      	ldrb	r2, [r0, #8]
   1250c:	f002 0201 	and.w	r2, r2, #1
    if (is_initiator != -1 && is_initiator != proc_is_initiator) {
   12510:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   12514:	d005      	beq.n	12522 <ble_sm_proc_matches+0x36>
   12516:	429a      	cmp	r2, r3
   12518:	d001      	beq.n	1251e <ble_sm_proc_matches+0x32>
        return 0;
   1251a:	2000      	movs	r0, #0
   1251c:	e7eb      	b.n	124f6 <ble_sm_proc_matches+0xa>
    return 1;
   1251e:	2001      	movs	r0, #1
   12520:	e7e9      	b.n	124f6 <ble_sm_proc_matches+0xa>
   12522:	2001      	movs	r0, #1
   12524:	e7e7      	b.n	124f6 <ble_sm_proc_matches+0xa>
	...

00012528 <ble_sm_insert>:
    STAILQ_FOREACH(cur, &ble_sm_procs, next) {
        BLE_HS_DBG_ASSERT(cur != proc);
    }
#endif

    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   12528:	4b04      	ldr	r3, [pc, #16]	; (1253c <ble_sm_insert+0x14>)
   1252a:	681b      	ldr	r3, [r3, #0]
   1252c:	6003      	str	r3, [r0, #0]
   1252e:	b113      	cbz	r3, 12536 <ble_sm_insert+0xe>
   12530:	4b02      	ldr	r3, [pc, #8]	; (1253c <ble_sm_insert+0x14>)
   12532:	6018      	str	r0, [r3, #0]
}
   12534:	4770      	bx	lr
    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   12536:	4b01      	ldr	r3, [pc, #4]	; (1253c <ble_sm_insert+0x14>)
   12538:	6058      	str	r0, [r3, #4]
   1253a:	e7f9      	b.n	12530 <ble_sm_insert+0x8>
   1253c:	2000779c 	.word	0x2000779c

00012540 <ble_sm_rx_noop>:

static void
ble_sm_rx_noop(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
    res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   12540:	f240 4307 	movw	r3, #1031	; 0x407
   12544:	6013      	str	r3, [r2, #0]
    res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   12546:	2307      	movs	r3, #7
   12548:	7113      	strb	r3, [r2, #4]
}
   1254a:	4770      	bx	lr

0001254c <ble_sm_build_authreq>:

static uint8_t
ble_sm_build_authreq(void)
{
    return ble_hs_cfg.sm_bonding << 0  |
   1254c:	4b08      	ldr	r3, [pc, #32]	; (12570 <ble_sm_build_authreq+0x24>)
   1254e:	7a5b      	ldrb	r3, [r3, #9]
   12550:	f3c3 0040 	ubfx	r0, r3, #1, #1
           ble_hs_cfg.sm_mitm << 2     |
   12554:	f3c3 0280 	ubfx	r2, r3, #2, #1
    return ble_hs_cfg.sm_bonding << 0  |
   12558:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
           ble_hs_cfg.sm_sc << 3       |
   1255c:	f3c3 02c0 	ubfx	r2, r3, #3, #1
           ble_hs_cfg.sm_mitm << 2     |
   12560:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
           ble_hs_cfg.sm_keypress << 4;
   12564:	f3c3 1300 	ubfx	r3, r3, #4, #1
}
   12568:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
   1256c:	4770      	bx	lr
   1256e:	bf00      	nop
   12570:	2000017c 	.word	0x2000017c

00012574 <ble_sm_key_dist>:
{
    struct ble_sm_pair_cmd *pair_rsp;

    pair_rsp = (struct ble_sm_pair_cmd *) &proc->pair_rsp[1];

    *out_init_key_dist = pair_rsp->init_key_dist;
   12574:	7f03      	ldrb	r3, [r0, #28]
   12576:	700b      	strb	r3, [r1, #0]
    *out_resp_key_dist = pair_rsp->resp_key_dist;
   12578:	7f43      	ldrb	r3, [r0, #29]
   1257a:	7013      	strb	r3, [r2, #0]

    /* Encryption info and master ID are only sent in legacy pairing. */
    if (proc->flags & BLE_SM_PROC_F_SC) {
   1257c:	7a03      	ldrb	r3, [r0, #8]
   1257e:	f013 0f10 	tst.w	r3, #16
   12582:	d007      	beq.n	12594 <ble_sm_key_dist+0x20>
        *out_init_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   12584:	780b      	ldrb	r3, [r1, #0]
   12586:	f023 0301 	bic.w	r3, r3, #1
   1258a:	700b      	strb	r3, [r1, #0]
        *out_resp_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   1258c:	7813      	ldrb	r3, [r2, #0]
   1258e:	f023 0301 	bic.w	r3, r3, #1
   12592:	7013      	strb	r3, [r2, #0]
    }
}
   12594:	4770      	bx	lr

00012596 <ble_sm_chk_store_overflow_by_type>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   12596:	2000      	movs	r0, #0
   12598:	4770      	bx	lr

0001259a <ble_sm_chk_store_overflow>:

static int
ble_sm_chk_store_overflow(uint16_t conn_handle)
{
   1259a:	b510      	push	{r4, lr}
   1259c:	4604      	mov	r4, r0
    int rc;

    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_PEER_SEC,
   1259e:	4601      	mov	r1, r0
   125a0:	2002      	movs	r0, #2
   125a2:	f7ff fff8 	bl	12596 <ble_sm_chk_store_overflow_by_type>
                                           conn_handle);
    if (rc != 0) {
   125a6:	4603      	mov	r3, r0
   125a8:	b920      	cbnz	r0, 125b4 <ble_sm_chk_store_overflow+0x1a>
        return rc;
    }

    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_OUR_SEC,
   125aa:	4621      	mov	r1, r4
   125ac:	2001      	movs	r0, #1
   125ae:	f7ff fff2 	bl	12596 <ble_sm_chk_store_overflow_by_type>
   125b2:	4603      	mov	r3, r0
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   125b4:	4618      	mov	r0, r3
   125b6:	bd10      	pop	{r4, pc}

000125b8 <ble_sm_state_after_pair>:
 *****************************************************************************/

static uint8_t
ble_sm_state_after_pair(struct ble_sm_proc *proc)
{
    if (proc->flags & BLE_SM_PROC_F_SC) {
   125b8:	7a03      	ldrb	r3, [r0, #8]
   125ba:	f013 0f10 	tst.w	r3, #16
   125be:	d101      	bne.n	125c4 <ble_sm_state_after_pair+0xc>
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
    } else {
        return BLE_SM_PROC_STATE_CONFIRM;
   125c0:	2001      	movs	r0, #1
    }
}
   125c2:	4770      	bx	lr
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
   125c4:	2009      	movs	r0, #9
   125c6:	4770      	bx	lr

000125c8 <ble_sm_pair_base_fill>:
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}

static void
ble_sm_pair_base_fill(struct ble_sm_pair_cmd *cmd)
{
   125c8:	b510      	push	{r4, lr}
   125ca:	4604      	mov	r4, r0
    cmd->io_cap = ble_hs_cfg.sm_io_cap;
   125cc:	4b06      	ldr	r3, [pc, #24]	; (125e8 <ble_sm_pair_base_fill+0x20>)
   125ce:	7a1a      	ldrb	r2, [r3, #8]
   125d0:	7002      	strb	r2, [r0, #0]
    cmd->oob_data_flag = ble_hs_cfg.sm_oob_data_flag;
   125d2:	7a5b      	ldrb	r3, [r3, #9]
   125d4:	f3c3 0300 	ubfx	r3, r3, #0, #1
   125d8:	7043      	strb	r3, [r0, #1]
    cmd->authreq = ble_sm_build_authreq();
   125da:	f7ff ffb7 	bl	1254c <ble_sm_build_authreq>
   125de:	70a0      	strb	r0, [r4, #2]
    cmd->max_enc_key_size = BLE_SM_PAIR_KEY_SZ_MAX;
   125e0:	2310      	movs	r3, #16
   125e2:	70e3      	strb	r3, [r4, #3]
}
   125e4:	bd10      	pop	{r4, pc}
   125e6:	bf00      	nop
   125e8:	2000017c 	.word	0x2000017c

000125ec <ble_sm_pair_req_fill>:

static void
ble_sm_pair_req_fill(struct ble_sm_proc *proc)
{
   125ec:	b510      	push	{r4, lr}
   125ee:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *req;

    req = (void *)(proc->pair_req + 1);

    proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   125f0:	2301      	movs	r3, #1
   125f2:	7403      	strb	r3, [r0, #16]
    ble_sm_pair_base_fill(req);
   125f4:	3011      	adds	r0, #17
   125f6:	f7ff ffe7 	bl	125c8 <ble_sm_pair_base_fill>
    req->init_key_dist = ble_hs_cfg.sm_our_key_dist;
   125fa:	4b03      	ldr	r3, [pc, #12]	; (12608 <ble_sm_pair_req_fill+0x1c>)
   125fc:	7a9a      	ldrb	r2, [r3, #10]
   125fe:	7562      	strb	r2, [r4, #21]
    req->resp_key_dist = ble_hs_cfg.sm_their_key_dist;
   12600:	7adb      	ldrb	r3, [r3, #11]
   12602:	75a3      	strb	r3, [r4, #22]
}
   12604:	bd10      	pop	{r4, pc}
   12606:	bf00      	nop
   12608:	2000017c 	.word	0x2000017c

0001260c <ble_sm_pair_rsp_fill>:

static void
ble_sm_pair_rsp_fill(struct ble_sm_proc *proc)
{
   1260c:	b510      	push	{r4, lr}
   1260e:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *rsp;

    req = (void *)(proc->pair_req + 1);
    rsp = (void *)(proc->pair_rsp + 1);

    proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   12610:	2302      	movs	r3, #2
   12612:	75c3      	strb	r3, [r0, #23]
    ble_sm_pair_base_fill(rsp);
   12614:	3018      	adds	r0, #24
   12616:	f7ff ffd7 	bl	125c8 <ble_sm_pair_base_fill>

    /* The response's key distribution flags field is the intersection of
     * the peer's preferences and our capabilities.
     */
    rsp->init_key_dist = req->init_key_dist &
   1261a:	7d63      	ldrb	r3, [r4, #21]
                         ble_hs_cfg.sm_their_key_dist;
   1261c:	4a04      	ldr	r2, [pc, #16]	; (12630 <ble_sm_pair_rsp_fill+0x24>)
   1261e:	7ad1      	ldrb	r1, [r2, #11]
    rsp->init_key_dist = req->init_key_dist &
   12620:	400b      	ands	r3, r1
   12622:	7723      	strb	r3, [r4, #28]
    rsp->resp_key_dist = req->resp_key_dist &
   12624:	7da3      	ldrb	r3, [r4, #22]
                         ble_hs_cfg.sm_our_key_dist;
   12626:	7a92      	ldrb	r2, [r2, #10]
    rsp->resp_key_dist = req->resp_key_dist &
   12628:	4013      	ands	r3, r2
   1262a:	7763      	strb	r3, [r4, #29]
}
   1262c:	bd10      	pop	{r4, pc}
   1262e:	bf00      	nop
   12630:	2000017c 	.word	0x2000017c

00012634 <ble_sm_verify_auth_requirements>:
        if (MYNEWT_VAL(BLE_SM_LEGACY) == 0) {
            return false;
        }
    }
    return true;
}
   12634:	2001      	movs	r0, #1
   12636:	4770      	bx	lr

00012638 <ble_sm_gen_ediv>:
{
   12638:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->ediv, sizeof master_id->ediv);
   1263a:	2102      	movs	r1, #2
   1263c:	f7fe fe9b 	bl	11376 <ble_hs_hci_util_rand>
}
   12640:	bd08      	pop	{r3, pc}

00012642 <ble_sm_gen_master_id_rand>:
{
   12642:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->rand_val, sizeof master_id->rand_val);
   12644:	2108      	movs	r1, #8
   12646:	3002      	adds	r0, #2
   12648:	f7fe fe95 	bl	11376 <ble_hs_hci_util_rand>
}
   1264c:	bd08      	pop	{r3, pc}

0001264e <ble_sm_gen_csrk>:
{
   1264e:	b508      	push	{r3, lr}
   12650:	4608      	mov	r0, r1
    rc = ble_hs_hci_util_rand(csrk, 16);
   12652:	2110      	movs	r1, #16
   12654:	f7fe fe8f 	bl	11376 <ble_hs_hci_util_rand>
}
   12658:	bd08      	pop	{r3, pc}

0001265a <ble_sm_io_action>:
{
   1265a:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   1265c:	7a03      	ldrb	r3, [r0, #8]
   1265e:	f013 0f10 	tst.w	r3, #16
   12662:	d102      	bne.n	1266a <ble_sm_io_action+0x10>
        return ble_sm_lgcy_io_action(proc, action);
   12664:	f001 fc10 	bl	13e88 <ble_sm_lgcy_io_action>
}
   12668:	bd08      	pop	{r3, pc}
        return ble_sm_sc_io_action(proc, action);
   1266a:	2008      	movs	r0, #8
   1266c:	e7fc      	b.n	12668 <ble_sm_io_action+0xe>

0001266e <ble_sm_pair_cfg>:
{
   1266e:	b510      	push	{r4, lr}
   12670:	b082      	sub	sp, #8
   12672:	4604      	mov	r4, r0
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   12674:	7cc3      	ldrb	r3, [r0, #19]
   12676:	f013 0f08 	tst.w	r3, #8
   1267a:	d007      	beq.n	1268c <ble_sm_pair_cfg+0x1e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_SC) {
   1267c:	7e83      	ldrb	r3, [r0, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   1267e:	f013 0f08 	tst.w	r3, #8
   12682:	d003      	beq.n	1268c <ble_sm_pair_cfg+0x1e>
        proc->flags |= BLE_SM_PROC_F_SC;
   12684:	7a03      	ldrb	r3, [r0, #8]
   12686:	f043 0310 	orr.w	r3, r3, #16
   1268a:	7203      	strb	r3, [r0, #8]
    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   1268c:	f10d 0206 	add.w	r2, sp, #6
   12690:	f10d 0107 	add.w	r1, sp, #7
   12694:	4620      	mov	r0, r4
   12696:	f7ff ff6d 	bl	12574 <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   1269a:	7a22      	ldrb	r2, [r4, #8]
   1269c:	f012 0f01 	tst.w	r2, #1
   126a0:	d03b      	beq.n	1271a <ble_sm_pair_cfg+0xac>
        rx_key_dist = resp_key_dist;
   126a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   126a6:	7ce1      	ldrb	r1, [r4, #19]
   126a8:	f011 0f01 	tst.w	r1, #1
   126ac:	d006      	beq.n	126bc <ble_sm_pair_cfg+0x4e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   126ae:	7ea1      	ldrb	r1, [r4, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   126b0:	f011 0f01 	tst.w	r1, #1
   126b4:	d002      	beq.n	126bc <ble_sm_pair_cfg+0x4e>
        proc->flags |= BLE_SM_PROC_F_BONDING;
   126b6:	f042 0220 	orr.w	r2, r2, #32
   126ba:	7222      	strb	r2, [r4, #8]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   126bc:	7a22      	ldrb	r2, [r4, #8]
   126be:	f012 0f10 	tst.w	r2, #16
   126c2:	d108      	bne.n	126d6 <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   126c4:	f89d 1007 	ldrb.w	r1, [sp, #7]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   126c8:	b929      	cbnz	r1, 126d6 <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   126ca:	f89d 1006 	ldrb.w	r1, [sp, #6]
   126ce:	b911      	cbnz	r1, 126d6 <ble_sm_pair_cfg+0x68>
        proc->flags &= ~BLE_SM_PROC_F_BONDING;
   126d0:	f022 0220 	bic.w	r2, r2, #32
   126d4:	7222      	strb	r2, [r4, #8]
    proc->rx_key_flags = 0;
   126d6:	2200      	movs	r2, #0
   126d8:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   126da:	f013 0f01 	tst.w	r3, #1
   126de:	d001      	beq.n	126e4 <ble_sm_pair_cfg+0x76>
        proc->rx_key_flags |= BLE_SM_KE_F_ENC_INFO |
   126e0:	2203      	movs	r2, #3
   126e2:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   126e4:	f013 0f02 	tst.w	r3, #2
   126e8:	d003      	beq.n	126f2 <ble_sm_pair_cfg+0x84>
        proc->rx_key_flags |= BLE_SM_KE_F_ID_INFO |
   126ea:	7ba2      	ldrb	r2, [r4, #14]
   126ec:	f042 020c 	orr.w	r2, r2, #12
   126f0:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   126f2:	f013 0f04 	tst.w	r3, #4
   126f6:	d003      	beq.n	12700 <ble_sm_pair_cfg+0x92>
        proc->rx_key_flags |= BLE_SM_KE_F_SIGN_INFO;
   126f8:	7ba3      	ldrb	r3, [r4, #14]
   126fa:	f043 0310 	orr.w	r3, r3, #16
   126fe:	73a3      	strb	r3, [r4, #14]
    proc->key_size = min(pair_req->max_enc_key_size,
   12700:	7ee3      	ldrb	r3, [r4, #27]
   12702:	7d22      	ldrb	r2, [r4, #20]
   12704:	4293      	cmp	r3, r2
   12706:	bf28      	it	cs
   12708:	4613      	movcs	r3, r2
   1270a:	73e3      	strb	r3, [r4, #15]
    rc = ble_sm_io_action(proc, &ioact);
   1270c:	f10d 0105 	add.w	r1, sp, #5
   12710:	4620      	mov	r0, r4
   12712:	f7ff ffa2 	bl	1265a <ble_sm_io_action>
}
   12716:	b002      	add	sp, #8
   12718:	bd10      	pop	{r4, pc}
        rx_key_dist = init_key_dist;
   1271a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1271e:	e7c2      	b.n	126a6 <ble_sm_pair_cfg+0x38>

00012720 <ble_sm_gen_ltk>:
{
   12720:	b570      	push	{r4, r5, r6, lr}
   12722:	4605      	mov	r5, r0
   12724:	460c      	mov	r4, r1
    rc = ble_hs_hci_util_rand(ltk, proc->key_size);
   12726:	7bc1      	ldrb	r1, [r0, #15]
   12728:	4620      	mov	r0, r4
   1272a:	f7fe fe24 	bl	11376 <ble_hs_hci_util_rand>
    if (rc != 0) {
   1272e:	4606      	mov	r6, r0
   12730:	b108      	cbz	r0, 12736 <ble_sm_gen_ltk+0x16>
}
   12732:	4630      	mov	r0, r6
   12734:	bd70      	pop	{r4, r5, r6, pc}
    memset(ltk + proc->key_size, 0, sizeof proc->ltk - proc->key_size);
   12736:	7be8      	ldrb	r0, [r5, #15]
   12738:	f1c0 0210 	rsb	r2, r0, #16
   1273c:	2100      	movs	r1, #0
   1273e:	4420      	add	r0, r4
   12740:	f7f9 f8cf 	bl	b8e2 <memset>
    return 0;
   12744:	e7f5      	b.n	12732 <ble_sm_gen_ltk+0x12>
	...

00012748 <ble_sm_exec>:
{
   12748:	b570      	push	{r4, r5, r6, lr}
   1274a:	4605      	mov	r5, r0
   1274c:	460c      	mov	r4, r1
   1274e:	4616      	mov	r6, r2
    memset(res, 0, sizeof *res);
   12750:	2300      	movs	r3, #0
   12752:	600b      	str	r3, [r1, #0]
   12754:	604b      	str	r3, [r1, #4]
   12756:	608b      	str	r3, [r1, #8]
   12758:	60cb      	str	r3, [r1, #12]
   1275a:	610b      	str	r3, [r1, #16]
   1275c:	614b      	str	r3, [r1, #20]
    if (!ble_hs_conn_exists(proc->conn_handle)) {
   1275e:	8940      	ldrh	r0, [r0, #10]
   12760:	f7fe f846 	bl	107f0 <ble_hs_conn_exists>
   12764:	b140      	cbz	r0, 12778 <ble_sm_exec+0x30>
        cb = ble_sm_state_dispatch[proc->state];
   12766:	7b6a      	ldrb	r2, [r5, #13]
   12768:	4b05      	ldr	r3, [pc, #20]	; (12780 <ble_sm_exec+0x38>)
   1276a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        cb(proc, res, arg);
   1276e:	4632      	mov	r2, r6
   12770:	4621      	mov	r1, r4
   12772:	4628      	mov	r0, r5
   12774:	4798      	blx	r3
}
   12776:	bd70      	pop	{r4, r5, r6, pc}
        res->app_status = BLE_HS_ENOTCONN;
   12778:	2307      	movs	r3, #7
   1277a:	6023      	str	r3, [r4, #0]
   1277c:	e7fb      	b.n	12776 <ble_sm_exec+0x2e>
   1277e:	bf00      	nop
   12780:	00028f7c 	.word	0x00028f7c

00012784 <ble_sm_sec_req_exec>:
 *****************************************************************************/

static void
ble_sm_sec_req_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                    void *arg)
{
   12784:	b570      	push	{r4, r5, r6, lr}
   12786:	b082      	sub	sp, #8
   12788:	4605      	mov	r5, r0
   1278a:	460c      	mov	r4, r1
    struct ble_sm_sec_req *cmd;
    struct os_mbuf *txom;
    int rc;

    cmd = ble_sm_cmd_get(BLE_SM_OP_SEC_REQ, sizeof(*cmd), &txom);
   1278c:	aa01      	add	r2, sp, #4
   1278e:	2101      	movs	r1, #1
   12790:	200b      	movs	r0, #11
   12792:	f001 fb2b 	bl	13dec <ble_sm_cmd_get>
    if (!cmd) {
   12796:	b150      	cbz	r0, 127ae <ble_sm_sec_req_exec+0x2a>
   12798:	4606      	mov	r6, r0
        res->app_status = BLE_HS_ENOMEM;
        return;
    }

    cmd->authreq = ble_sm_build_authreq();
   1279a:	f7ff fed7 	bl	1254c <ble_sm_build_authreq>
   1279e:	7030      	strb	r0, [r6, #0]
    rc = ble_sm_tx(proc->conn_handle, txom);
   127a0:	9901      	ldr	r1, [sp, #4]
   127a2:	8968      	ldrh	r0, [r5, #10]
   127a4:	f001 fb3c 	bl	13e20 <ble_sm_tx>
    if (rc != 0) {
   127a8:	b118      	cbz	r0, 127b2 <ble_sm_sec_req_exec+0x2e>
        res->app_status = rc;
   127aa:	6020      	str	r0, [r4, #0]
        return;
   127ac:	e001      	b.n	127b2 <ble_sm_sec_req_exec+0x2e>
        res->app_status = BLE_HS_ENOMEM;
   127ae:	2306      	movs	r3, #6
   127b0:	6023      	str	r3, [r4, #0]
    }
}
   127b2:	b002      	add	sp, #8
   127b4:	bd70      	pop	{r4, r5, r6, pc}

000127b6 <ble_sm_pair_fail_tx>:
{
   127b6:	b530      	push	{r4, r5, lr}
   127b8:	b083      	sub	sp, #12
   127ba:	4604      	mov	r4, r0
   127bc:	460d      	mov	r5, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_FAIL, sizeof(*cmd), &txom);
   127be:	aa01      	add	r2, sp, #4
   127c0:	2101      	movs	r1, #1
   127c2:	2005      	movs	r0, #5
   127c4:	f001 fb12 	bl	13dec <ble_sm_cmd_get>
    if (cmd) {
   127c8:	b120      	cbz	r0, 127d4 <ble_sm_pair_fail_tx+0x1e>
        cmd->reason = reason;
   127ca:	7005      	strb	r5, [r0, #0]
        rc = ble_sm_tx(conn_handle, txom);
   127cc:	9901      	ldr	r1, [sp, #4]
   127ce:	4620      	mov	r0, r4
   127d0:	f001 fb26 	bl	13e20 <ble_sm_tx>
}
   127d4:	b003      	add	sp, #12
   127d6:	bd30      	pop	{r4, r5, pc}

000127d8 <ble_sm_fill_store_value>:
{
   127d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127dc:	4606      	mov	r6, r0
   127de:	4688      	mov	r8, r1
   127e0:	4617      	mov	r7, r2
   127e2:	461d      	mov	r5, r3
   127e4:	9c06      	ldr	r4, [sp, #24]
    memset(value_sec, 0, sizeof *value_sec);
   127e6:	2250      	movs	r2, #80	; 0x50
   127e8:	2100      	movs	r1, #0
   127ea:	4620      	mov	r0, r4
   127ec:	f7f9 f879 	bl	b8e2 <memset>
    value_sec->peer_addr = *peer_addr;
   127f0:	6830      	ldr	r0, [r6, #0]
   127f2:	6020      	str	r0, [r4, #0]
   127f4:	88b2      	ldrh	r2, [r6, #4]
   127f6:	79b3      	ldrb	r3, [r6, #6]
   127f8:	80a2      	strh	r2, [r4, #4]
   127fa:	71a3      	strb	r3, [r4, #6]
    if (keys->ediv_rand_valid && keys->ltk_valid) {
   127fc:	782b      	ldrb	r3, [r5, #0]
   127fe:	f003 0303 	and.w	r3, r3, #3
   12802:	2b03      	cmp	r3, #3
   12804:	d009      	beq.n	1281a <ble_sm_fill_store_value+0x42>
    if (keys->irk_valid) {
   12806:	782b      	ldrb	r3, [r5, #0]
   12808:	f013 0f04 	tst.w	r3, #4
   1280c:	d12e      	bne.n	1286c <ble_sm_fill_store_value+0x94>
    if (keys->csrk_valid) {
   1280e:	782b      	ldrb	r3, [r5, #0]
   12810:	f013 0f08 	tst.w	r3, #8
   12814:	d13f      	bne.n	12896 <ble_sm_fill_store_value+0xbe>
}
   12816:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        value_sec->key_size = keys->key_size;
   1281a:	7c6b      	ldrb	r3, [r5, #17]
   1281c:	71e3      	strb	r3, [r4, #7]
        value_sec->ediv = keys->ediv;
   1281e:	886b      	ldrh	r3, [r5, #2]
   12820:	8123      	strh	r3, [r4, #8]
        value_sec->rand_num = keys->rand_val;
   12822:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   12826:	e9c4 2304 	strd	r2, r3, [r4, #16]
        memcpy(value_sec->ltk, keys->ltk, sizeof value_sec->ltk);
   1282a:	462b      	mov	r3, r5
   1282c:	f853 6f12 	ldr.w	r6, [r3, #18]!
   12830:	6858      	ldr	r0, [r3, #4]
   12832:	6899      	ldr	r1, [r3, #8]
   12834:	68db      	ldr	r3, [r3, #12]
   12836:	61a6      	str	r6, [r4, #24]
   12838:	61e0      	str	r0, [r4, #28]
   1283a:	6221      	str	r1, [r4, #32]
   1283c:	6263      	str	r3, [r4, #36]	; 0x24
        value_sec->ltk_present = 1;
   1283e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   12842:	f043 0301 	orr.w	r3, r3, #1
   12846:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        value_sec->authenticated = !!authenticated;
   1284a:	f118 0800 	adds.w	r8, r8, #0
   1284e:	bf18      	it	ne
   12850:	f04f 0801 	movne.w	r8, #1
   12854:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   12858:	f368 0341 	bfi	r3, r8, #1, #1
        value_sec->sc = !!sc;
   1285c:	3700      	adds	r7, #0
   1285e:	bf18      	it	ne
   12860:	2701      	movne	r7, #1
   12862:	f367 0382 	bfi	r3, r7, #2, #1
   12866:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   1286a:	e7cc      	b.n	12806 <ble_sm_fill_store_value+0x2e>
        memcpy(value_sec->irk, keys->irk, sizeof value_sec->irk);
   1286c:	462b      	mov	r3, r5
   1286e:	f853 6f22 	ldr.w	r6, [r3, #34]!
   12872:	6858      	ldr	r0, [r3, #4]
   12874:	6899      	ldr	r1, [r3, #8]
   12876:	68db      	ldr	r3, [r3, #12]
   12878:	f8c4 6029 	str.w	r6, [r4, #41]	; 0x29
   1287c:	f8c4 002d 	str.w	r0, [r4, #45]	; 0x2d
   12880:	f8c4 1031 	str.w	r1, [r4, #49]	; 0x31
   12884:	f8c4 3035 	str.w	r3, [r4, #53]	; 0x35
        value_sec->irk_present = 1;
   12888:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   1288c:	f043 0301 	orr.w	r3, r3, #1
   12890:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   12894:	e7bb      	b.n	1280e <ble_sm_fill_store_value+0x36>
        memcpy(value_sec->csrk, keys->csrk, sizeof value_sec->csrk);
   12896:	f855 6f32 	ldr.w	r6, [r5, #50]!
   1289a:	6868      	ldr	r0, [r5, #4]
   1289c:	68a9      	ldr	r1, [r5, #8]
   1289e:	68ea      	ldr	r2, [r5, #12]
   128a0:	f8c4 603a 	str.w	r6, [r4, #58]	; 0x3a
   128a4:	f8c4 003e 	str.w	r0, [r4, #62]	; 0x3e
   128a8:	f8c4 1042 	str.w	r1, [r4, #66]	; 0x42
   128ac:	f8c4 2046 	str.w	r2, [r4, #70]	; 0x46
        value_sec->csrk_present = 1;
   128b0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   128b4:	f043 0301 	orr.w	r3, r3, #1
   128b8:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
   128bc:	e7ab      	b.n	12816 <ble_sm_fill_store_value+0x3e>

000128be <ble_sm_update_sec_state>:
{
   128be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   128c0:	460f      	mov	r7, r1
   128c2:	4616      	mov	r6, r2
   128c4:	461d      	mov	r5, r3
   128c6:	9c06      	ldr	r4, [sp, #24]
    conn = ble_hs_conn_find(conn_handle);
   128c8:	f7fd ff68 	bl	1079c <ble_hs_conn_find>
    if (conn != NULL) {
   128cc:	b1d0      	cbz	r0, 12904 <ble_sm_update_sec_state+0x46>
   128ce:	4603      	mov	r3, r0
        conn->bhc_sec_state.encrypted = encrypted;
   128d0:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   128d4:	f367 0200 	bfi	r2, r7, #0, #1
   128d8:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
        if (authenticated) {
   128dc:	b126      	cbz	r6, 128e8 <ble_sm_update_sec_state+0x2a>
            conn->bhc_sec_state.authenticated = 1;
   128de:	b2d2      	uxtb	r2, r2
   128e0:	f042 0202 	orr.w	r2, r2, #2
   128e4:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
        if (bonded) {
   128e8:	b12d      	cbz	r5, 128f6 <ble_sm_update_sec_state+0x38>
            conn->bhc_sec_state.bonded = 1;
   128ea:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   128ee:	f042 0204 	orr.w	r2, r2, #4
   128f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        if (key_size) {
   128f6:	b12c      	cbz	r4, 12904 <ble_sm_update_sec_state+0x46>
            conn->bhc_sec_state.key_size = key_size;
   128f8:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   128fc:	f364 02c7 	bfi	r2, r4, #3, #5
   12900:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
   12904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012906 <ble_sm_key_exch_success>:
 * $key exchange                                                             *
 *****************************************************************************/

static void
ble_sm_key_exch_success(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   12906:	b530      	push	{r4, r5, lr}
   12908:	b083      	sub	sp, #12
   1290a:	4604      	mov	r4, r0
   1290c:	460d      	mov	r5, r1
    /* The procedure is now complete.  Update connection bonded state and
     * terminate procedure.
     */
    ble_sm_update_sec_state(proc->conn_handle, 1,
                            !!(proc->flags & BLE_SM_PROC_F_AUTHENTICATED),
   1290e:	7a02      	ldrb	r2, [r0, #8]
                            !!(proc->flags & BLE_SM_PROC_F_BONDING),
                            proc->key_size);
   12910:	7bc3      	ldrb	r3, [r0, #15]
    ble_sm_update_sec_state(proc->conn_handle, 1,
   12912:	8940      	ldrh	r0, [r0, #10]
   12914:	9300      	str	r3, [sp, #0]
   12916:	f3c2 1340 	ubfx	r3, r2, #5, #1
   1291a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1291e:	2101      	movs	r1, #1
   12920:	f7ff ffcd 	bl	128be <ble_sm_update_sec_state>
    proc->state = BLE_SM_PROC_STATE_NONE;
   12924:	23ff      	movs	r3, #255	; 0xff
   12926:	7363      	strb	r3, [r4, #13]

    res->app_status = 0;
   12928:	2300      	movs	r3, #0
   1292a:	602b      	str	r3, [r5, #0]
    res->enc_cb = 1;
   1292c:	7d2b      	ldrb	r3, [r5, #20]
   1292e:	f043 0302 	orr.w	r3, r3, #2
   12932:	752b      	strb	r3, [r5, #20]
}
   12934:	b003      	add	sp, #12
   12936:	bd30      	pop	{r4, r5, pc}

00012938 <ble_sm_key_exch_exec>:

static void
ble_sm_key_exch_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                     void *arg)
{
   12938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1293c:	b08a      	sub	sp, #40	; 0x28
   1293e:	4604      	mov	r4, r0
   12940:	460d      	mov	r5, r1
    uint8_t our_key_dist;
    struct os_mbuf *txom;
    const uint8_t *irk;
    int rc;

    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   12942:	f10d 020a 	add.w	r2, sp, #10
   12946:	f10d 010b 	add.w	r1, sp, #11
   1294a:	f7ff fe13 	bl	12574 <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   1294e:	7a23      	ldrb	r3, [r4, #8]
   12950:	f013 0f01 	tst.w	r3, #1
   12954:	d018      	beq.n	12988 <ble_sm_key_exch_exec+0x50>
        our_key_dist = init_key_dist;
   12956:	f89d 600b 	ldrb.w	r6, [sp, #11]
    } else {
        our_key_dist = resp_key_dist;
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   1295a:	f016 0f01 	tst.w	r6, #1
   1295e:	d116      	bne.n	1298e <ble_sm_key_exch_exec+0x56>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   12960:	f016 0f02 	tst.w	r6, #2
   12964:	d179      	bne.n	12a5a <ble_sm_key_exch_exec+0x122>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   12966:	f016 0f04 	tst.w	r6, #4
   1296a:	f040 80e3 	bne.w	12b34 <ble_sm_key_exch_exec+0x1fc>
        if (rc != 0) {
            goto err;
        }
    }

    if (proc->flags & BLE_SM_PROC_F_INITIATOR || proc->rx_key_flags == 0) {
   1296e:	7a23      	ldrb	r3, [r4, #8]
   12970:	f013 0f01 	tst.w	r3, #1
   12974:	d103      	bne.n	1297e <ble_sm_key_exch_exec+0x46>
   12976:	7ba3      	ldrb	r3, [r4, #14]
   12978:	2b00      	cmp	r3, #0
   1297a:	f040 810f 	bne.w	12b9c <ble_sm_key_exch_exec+0x264>
        /* The procedure is now complete. */
        ble_sm_key_exch_success(proc, res);
   1297e:	4629      	mov	r1, r5
   12980:	4620      	mov	r0, r4
   12982:	f7ff ffc0 	bl	12906 <ble_sm_key_exch_success>
   12986:	e109      	b.n	12b9c <ble_sm_key_exch_exec+0x264>
        our_key_dist = resp_key_dist;
   12988:	f89d 600a 	ldrb.w	r6, [sp, #10]
   1298c:	e7e5      	b.n	1295a <ble_sm_key_exch_exec+0x22>
        enc_info = ble_sm_cmd_get(BLE_SM_OP_ENC_INFO, sizeof(*enc_info), &txom);
   1298e:	aa01      	add	r2, sp, #4
   12990:	2110      	movs	r1, #16
   12992:	2006      	movs	r0, #6
   12994:	f001 fa2a 	bl	13dec <ble_sm_cmd_get>
        if (!enc_info) {
   12998:	4601      	mov	r1, r0
   1299a:	2800      	cmp	r0, #0
   1299c:	f000 80f6 	beq.w	12b8c <ble_sm_key_exch_exec+0x254>
        rc = ble_sm_gen_ltk(proc, enc_info->ltk);
   129a0:	4680      	mov	r8, r0
   129a2:	4620      	mov	r0, r4
   129a4:	f7ff febc 	bl	12720 <ble_sm_gen_ltk>
        if (rc != 0) {
   129a8:	4607      	mov	r7, r0
   129aa:	b118      	cbz	r0, 129b4 <ble_sm_key_exch_exec+0x7c>
            os_mbuf_free_chain(txom);
   129ac:	9801      	ldr	r0, [sp, #4]
   129ae:	f7f7 fc89 	bl	a2c4 <os_mbuf_free_chain>
            goto err;
   129b2:	e0ec      	b.n	12b8e <ble_sm_key_exch_exec+0x256>
        memcpy(proc->our_keys.ltk, enc_info->ltk, 16);
   129b4:	f8d8 7000 	ldr.w	r7, [r8]
   129b8:	f8d8 0004 	ldr.w	r0, [r8, #4]
   129bc:	f8d8 1008 	ldr.w	r1, [r8, #8]
   129c0:	f8d8 200c 	ldr.w	r2, [r8, #12]
   129c4:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
   129c8:	f8c4 0086 	str.w	r0, [r4, #134]	; 0x86
   129cc:	f8c4 108a 	str.w	r1, [r4, #138]	; 0x8a
   129d0:	f8c4 208e 	str.w	r2, [r4, #142]	; 0x8e
        proc->our_keys.key_size = proc->key_size;
   129d4:	7be3      	ldrb	r3, [r4, #15]
   129d6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        proc->our_keys.ltk_valid = 1;
   129da:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   129de:	f043 0301 	orr.w	r3, r3, #1
   129e2:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   129e6:	9901      	ldr	r1, [sp, #4]
   129e8:	8960      	ldrh	r0, [r4, #10]
   129ea:	f001 fa19 	bl	13e20 <ble_sm_tx>
        if (rc != 0) {
   129ee:	4607      	mov	r7, r0
   129f0:	2800      	cmp	r0, #0
   129f2:	f040 80cc 	bne.w	12b8e <ble_sm_key_exch_exec+0x256>
        master_id = ble_sm_cmd_get(BLE_SM_OP_MASTER_ID, sizeof(*master_id),
   129f6:	aa01      	add	r2, sp, #4
   129f8:	210a      	movs	r1, #10
   129fa:	2007      	movs	r0, #7
   129fc:	f001 f9f6 	bl	13dec <ble_sm_cmd_get>
        if (!master_id) {
   12a00:	4680      	mov	r8, r0
   12a02:	2800      	cmp	r0, #0
   12a04:	f000 80cd 	beq.w	12ba2 <ble_sm_key_exch_exec+0x26a>
        rc = ble_sm_gen_ediv(master_id);
   12a08:	f7ff fe16 	bl	12638 <ble_sm_gen_ediv>
        if (rc != 0) {
   12a0c:	4607      	mov	r7, r0
   12a0e:	b118      	cbz	r0, 12a18 <ble_sm_key_exch_exec+0xe0>
            os_mbuf_free_chain(txom);
   12a10:	9801      	ldr	r0, [sp, #4]
   12a12:	f7f7 fc57 	bl	a2c4 <os_mbuf_free_chain>
            goto err;
   12a16:	e0ba      	b.n	12b8e <ble_sm_key_exch_exec+0x256>
        rc = ble_sm_gen_master_id_rand(master_id);
   12a18:	4640      	mov	r0, r8
   12a1a:	f7ff fe12 	bl	12642 <ble_sm_gen_master_id_rand>
        if (rc != 0) {
   12a1e:	4607      	mov	r7, r0
   12a20:	b118      	cbz	r0, 12a2a <ble_sm_key_exch_exec+0xf2>
            os_mbuf_free_chain(txom);
   12a22:	9801      	ldr	r0, [sp, #4]
   12a24:	f7f7 fc4e 	bl	a2c4 <os_mbuf_free_chain>
            goto err;
   12a28:	e0b1      	b.n	12b8e <ble_sm_key_exch_exec+0x256>
        proc->our_keys.ediv_rand_valid = 1;
   12a2a:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   12a2e:	f043 0302 	orr.w	r3, r3, #2
   12a32:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        proc->our_keys.rand_val = master_id->rand_val;
   12a36:	f8d8 2002 	ldr.w	r2, [r8, #2]
   12a3a:	f8d8 3006 	ldr.w	r3, [r8, #6]
   12a3e:	67a2      	str	r2, [r4, #120]	; 0x78
   12a40:	67e3      	str	r3, [r4, #124]	; 0x7c
        proc->our_keys.ediv = master_id->ediv;
   12a42:	f8b8 3000 	ldrh.w	r3, [r8]
   12a46:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        rc = ble_sm_tx(proc->conn_handle, txom);
   12a4a:	9901      	ldr	r1, [sp, #4]
   12a4c:	8960      	ldrh	r0, [r4, #10]
   12a4e:	f001 f9e7 	bl	13e20 <ble_sm_tx>
        if (rc != 0) {
   12a52:	4607      	mov	r7, r0
   12a54:	2800      	cmp	r0, #0
   12a56:	d083      	beq.n	12960 <ble_sm_key_exch_exec+0x28>
    }

    return;

err:
   12a58:	e099      	b.n	12b8e <ble_sm_key_exch_exec+0x256>
        id_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_INFO, sizeof(*id_info),
   12a5a:	aa01      	add	r2, sp, #4
   12a5c:	2110      	movs	r1, #16
   12a5e:	2008      	movs	r0, #8
   12a60:	f001 f9c4 	bl	13dec <ble_sm_cmd_get>
        if (!id_info) {
   12a64:	4680      	mov	r8, r0
   12a66:	2800      	cmp	r0, #0
   12a68:	f000 809d 	beq.w	12ba6 <ble_sm_key_exch_exec+0x26e>
        rc = ble_hs_pvcy_our_irk(&irk);
   12a6c:	4668      	mov	r0, sp
   12a6e:	f7fe ff15 	bl	1189c <ble_hs_pvcy_our_irk>
        if (rc != 0) {
   12a72:	4607      	mov	r7, r0
   12a74:	b118      	cbz	r0, 12a7e <ble_sm_key_exch_exec+0x146>
            os_mbuf_free_chain(txom);
   12a76:	9801      	ldr	r0, [sp, #4]
   12a78:	f7f7 fc24 	bl	a2c4 <os_mbuf_free_chain>
            goto err;
   12a7c:	e087      	b.n	12b8e <ble_sm_key_exch_exec+0x256>
        memcpy(id_info->irk, irk, 16);
   12a7e:	9b00      	ldr	r3, [sp, #0]
   12a80:	6818      	ldr	r0, [r3, #0]
   12a82:	6859      	ldr	r1, [r3, #4]
   12a84:	689a      	ldr	r2, [r3, #8]
   12a86:	68db      	ldr	r3, [r3, #12]
   12a88:	f8c8 0000 	str.w	r0, [r8]
   12a8c:	f8c8 1004 	str.w	r1, [r8, #4]
   12a90:	f8c8 2008 	str.w	r2, [r8, #8]
   12a94:	f8c8 300c 	str.w	r3, [r8, #12]
        proc->our_keys.irk_valid = 1;
   12a98:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   12a9c:	f043 0304 	orr.w	r3, r3, #4
   12aa0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   12aa4:	9901      	ldr	r1, [sp, #4]
   12aa6:	8960      	ldrh	r0, [r4, #10]
   12aa8:	f001 f9ba 	bl	13e20 <ble_sm_tx>
        if (rc != 0) {
   12aac:	4607      	mov	r7, r0
   12aae:	2800      	cmp	r0, #0
   12ab0:	d16d      	bne.n	12b8e <ble_sm_key_exch_exec+0x256>
        addr_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_ADDR_INFO,
   12ab2:	aa01      	add	r2, sp, #4
   12ab4:	2107      	movs	r1, #7
   12ab6:	2009      	movs	r0, #9
   12ab8:	f001 f998 	bl	13dec <ble_sm_cmd_get>
        if (!addr_info) {
   12abc:	4607      	mov	r7, r0
   12abe:	2800      	cmp	r0, #0
   12ac0:	d073      	beq.n	12baa <ble_sm_key_exch_exec+0x272>
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   12ac2:	8960      	ldrh	r0, [r4, #10]
   12ac4:	f7fd fe82 	bl	107cc <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   12ac8:	a903      	add	r1, sp, #12
   12aca:	f7fd fe9f 	bl	1080c <ble_hs_conn_addrs>
        addr_info->addr_type = addrs.our_id_addr.type;
   12ace:	f89d 200c 	ldrb.w	r2, [sp, #12]
   12ad2:	463b      	mov	r3, r7
   12ad4:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(addr_info->bd_addr, addrs.our_id_addr.val, 6);
   12ad8:	aa0a      	add	r2, sp, #40	; 0x28
   12ada:	f852 1d1b 	ldr.w	r1, [r2, #-27]!
   12ade:	f8c7 1001 	str.w	r1, [r7, #1]
   12ae2:	8892      	ldrh	r2, [r2, #4]
   12ae4:	809a      	strh	r2, [r3, #4]
        proc->our_keys.addr_valid = 1;
   12ae6:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
   12aea:	f042 0210 	orr.w	r2, r2, #16
   12aee:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
        memcpy(proc->our_keys.irk, irk, 16);
   12af2:	9900      	ldr	r1, [sp, #0]
   12af4:	f8d1 e000 	ldr.w	lr, [r1]
   12af8:	f8d1 c004 	ldr.w	ip, [r1, #4]
   12afc:	6888      	ldr	r0, [r1, #8]
   12afe:	68c9      	ldr	r1, [r1, #12]
   12b00:	f8c4 e092 	str.w	lr, [r4, #146]	; 0x92
   12b04:	f8c4 c096 	str.w	ip, [r4, #150]	; 0x96
   12b08:	f8c4 009a 	str.w	r0, [r4, #154]	; 0x9a
   12b0c:	f8c4 109e 	str.w	r1, [r4, #158]	; 0x9e
        proc->our_keys.addr_type = addr_info->addr_type;
   12b10:	783a      	ldrb	r2, [r7, #0]
   12b12:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
        memcpy(proc->our_keys.addr, addr_info->bd_addr, 6);
   12b16:	681a      	ldr	r2, [r3, #0]
   12b18:	f8c4 20b2 	str.w	r2, [r4, #178]	; 0xb2
   12b1c:	889b      	ldrh	r3, [r3, #4]
   12b1e:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
        rc = ble_sm_tx(proc->conn_handle, txom);
   12b22:	9901      	ldr	r1, [sp, #4]
   12b24:	8960      	ldrh	r0, [r4, #10]
   12b26:	f001 f97b 	bl	13e20 <ble_sm_tx>
        if (rc != 0) {
   12b2a:	4607      	mov	r7, r0
   12b2c:	2800      	cmp	r0, #0
   12b2e:	f43f af1a 	beq.w	12966 <ble_sm_key_exch_exec+0x2e>
err:
   12b32:	e02c      	b.n	12b8e <ble_sm_key_exch_exec+0x256>
        sign_info = ble_sm_cmd_get(BLE_SM_OP_SIGN_INFO, sizeof(*sign_info),
   12b34:	aa01      	add	r2, sp, #4
   12b36:	2110      	movs	r1, #16
   12b38:	200a      	movs	r0, #10
   12b3a:	f001 f957 	bl	13dec <ble_sm_cmd_get>
        if (!sign_info) {
   12b3e:	4601      	mov	r1, r0
   12b40:	b3a8      	cbz	r0, 12bae <ble_sm_key_exch_exec+0x276>
        rc = ble_sm_gen_csrk(proc, sign_info->sig_key);
   12b42:	4606      	mov	r6, r0
   12b44:	4620      	mov	r0, r4
   12b46:	f7ff fd82 	bl	1264e <ble_sm_gen_csrk>
        if (rc != 0) {
   12b4a:	4607      	mov	r7, r0
   12b4c:	b118      	cbz	r0, 12b56 <ble_sm_key_exch_exec+0x21e>
            os_mbuf_free_chain(txom);
   12b4e:	9801      	ldr	r0, [sp, #4]
   12b50:	f7f7 fbb8 	bl	a2c4 <os_mbuf_free_chain>
            goto err;
   12b54:	e01b      	b.n	12b8e <ble_sm_key_exch_exec+0x256>
        proc->our_keys.csrk_valid = 1;
   12b56:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   12b5a:	f043 0308 	orr.w	r3, r3, #8
   12b5e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        memcpy(proc->our_keys.csrk, sign_info->sig_key, 16);
   12b62:	6837      	ldr	r7, [r6, #0]
   12b64:	6870      	ldr	r0, [r6, #4]
   12b66:	68b1      	ldr	r1, [r6, #8]
   12b68:	68f2      	ldr	r2, [r6, #12]
   12b6a:	f8c4 70a2 	str.w	r7, [r4, #162]	; 0xa2
   12b6e:	f8c4 00a6 	str.w	r0, [r4, #166]	; 0xa6
   12b72:	f8c4 10aa 	str.w	r1, [r4, #170]	; 0xaa
   12b76:	f8c4 20ae 	str.w	r2, [r4, #174]	; 0xae
        rc = ble_sm_tx(proc->conn_handle, txom);
   12b7a:	9901      	ldr	r1, [sp, #4]
   12b7c:	8960      	ldrh	r0, [r4, #10]
   12b7e:	f001 f94f 	bl	13e20 <ble_sm_tx>
        if (rc != 0) {
   12b82:	4607      	mov	r7, r0
   12b84:	2800      	cmp	r0, #0
   12b86:	f43f aef2 	beq.w	1296e <ble_sm_key_exch_exec+0x36>
err:
   12b8a:	e000      	b.n	12b8e <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   12b8c:	2706      	movs	r7, #6
    res->app_status = rc;
   12b8e:	602f      	str	r7, [r5, #0]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   12b90:	2308      	movs	r3, #8
   12b92:	712b      	strb	r3, [r5, #4]
    res->enc_cb = 1;
   12b94:	7d2b      	ldrb	r3, [r5, #20]
   12b96:	f043 0302 	orr.w	r3, r3, #2
   12b9a:	752b      	strb	r3, [r5, #20]
}
   12b9c:	b00a      	add	sp, #40	; 0x28
   12b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   12ba2:	2706      	movs	r7, #6
   12ba4:	e7f3      	b.n	12b8e <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   12ba6:	2706      	movs	r7, #6
   12ba8:	e7f1      	b.n	12b8e <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   12baa:	2706      	movs	r7, #6
   12bac:	e7ef      	b.n	12b8e <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   12bae:	2706      	movs	r7, #6
   12bb0:	e7ed      	b.n	12b8e <ble_sm_key_exch_exec+0x256>

00012bb2 <ble_sm_key_rxed>:

static void
ble_sm_key_rxed(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   12bb2:	b508      	push	{r3, lr}
    BLE_HS_LOG(DEBUG, "rx_key_flags=0x%02x\n", proc->rx_key_flags);

    if (proc->rx_key_flags == 0) {
   12bb4:	7b83      	ldrb	r3, [r0, #14]
   12bb6:	b93b      	cbnz	r3, 12bc8 <ble_sm_key_rxed+0x16>
        /* The peer is done sending keys.  If we are the initiator, we need to
         * send ours.  If we are the responder, the procedure is complete.
         */
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   12bb8:	7a03      	ldrb	r3, [r0, #8]
   12bba:	f013 0f01 	tst.w	r3, #1
   12bbe:	d004      	beq.n	12bca <ble_sm_key_rxed+0x18>
            res->execute = 1;
   12bc0:	7d0b      	ldrb	r3, [r1, #20]
   12bc2:	f043 0301 	orr.w	r3, r3, #1
   12bc6:	750b      	strb	r3, [r1, #20]
        } else {
            ble_sm_key_exch_success(proc, res);
        }
    }
}
   12bc8:	bd08      	pop	{r3, pc}
            ble_sm_key_exch_success(proc, res);
   12bca:	f7ff fe9c 	bl	12906 <ble_sm_key_exch_success>
}
   12bce:	e7fb      	b.n	12bc8 <ble_sm_key_rxed+0x16>

00012bd0 <ble_sm_start_encrypt_tx>:
{
   12bd0:	b510      	push	{r4, lr}
   12bd2:	b08a      	sub	sp, #40	; 0x28
    cmd.conn_handle = htole16(params->connection_handle);
   12bd4:	8803      	ldrh	r3, [r0, #0]
   12bd6:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.div = htole16(params->encrypted_diversifier);
   12bda:	8843      	ldrh	r3, [r0, #2]
   12bdc:	f8ad 3016 	strh.w	r3, [sp, #22]
    cmd.rand = htole64(params->random_number);
   12be0:	6882      	ldr	r2, [r0, #8]
   12be2:	68c3      	ldr	r3, [r0, #12]
   12be4:	f8cd 200e 	str.w	r2, [sp, #14]
   12be8:	f8cd 3012 	str.w	r3, [sp, #18]
    memcpy(cmd.ltk, params->long_term_key, sizeof(cmd.ltk));
   12bec:	ac06      	add	r4, sp, #24
   12bee:	4603      	mov	r3, r0
   12bf0:	f853 0f10 	ldr.w	r0, [r3, #16]!
   12bf4:	6859      	ldr	r1, [r3, #4]
   12bf6:	689a      	ldr	r2, [r3, #8]
   12bf8:	68db      	ldr	r3, [r3, #12]
   12bfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   12bfc:	2300      	movs	r3, #0
   12bfe:	9300      	str	r3, [sp, #0]
   12c00:	221c      	movs	r2, #28
   12c02:	a903      	add	r1, sp, #12
   12c04:	f242 0019 	movw	r0, #8217	; 0x2019
   12c08:	f7fe f814 	bl	10c34 <ble_hs_hci_cmd_tx>
}
   12c0c:	b00a      	add	sp, #40	; 0x28
   12c0e:	bd10      	pop	{r4, pc}

00012c10 <ble_sm_enc_restore_exec>:
{
   12c10:	b510      	push	{r4, lr}
   12c12:	460c      	mov	r4, r1
    res->app_status = ble_sm_start_encrypt_tx(cmd);
   12c14:	4610      	mov	r0, r2
   12c16:	f7ff ffdb 	bl	12bd0 <ble_sm_start_encrypt_tx>
   12c1a:	6020      	str	r0, [r4, #0]
}
   12c1c:	bd10      	pop	{r4, pc}

00012c1e <ble_sm_enc_start_exec>:
{
   12c1e:	b530      	push	{r4, r5, lr}
   12c20:	b089      	sub	sp, #36	; 0x24
   12c22:	460d      	mov	r5, r1
    cmd.connection_handle = proc->conn_handle;
   12c24:	8943      	ldrh	r3, [r0, #10]
   12c26:	f8ad 3000 	strh.w	r3, [sp]
    cmd.encrypted_diversifier = 0;
   12c2a:	2300      	movs	r3, #0
   12c2c:	f8ad 3002 	strh.w	r3, [sp, #2]
    cmd.random_number = 0;
   12c30:	2200      	movs	r2, #0
   12c32:	2300      	movs	r3, #0
   12c34:	e9cd 2302 	strd	r2, r3, [sp, #8]
    memcpy(cmd.long_term_key, proc->ltk, sizeof cmd.long_term_key);
   12c38:	ac04      	add	r4, sp, #16
   12c3a:	4603      	mov	r3, r0
   12c3c:	f853 0f5e 	ldr.w	r0, [r3, #94]!
   12c40:	6859      	ldr	r1, [r3, #4]
   12c42:	689a      	ldr	r2, [r3, #8]
   12c44:	68db      	ldr	r3, [r3, #12]
   12c46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    rc = ble_sm_start_encrypt_tx(&cmd);
   12c48:	4668      	mov	r0, sp
   12c4a:	f7ff ffc1 	bl	12bd0 <ble_sm_start_encrypt_tx>
    if (rc != 0) {
   12c4e:	b130      	cbz	r0, 12c5e <ble_sm_enc_start_exec+0x40>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   12c50:	2208      	movs	r2, #8
   12c52:	712a      	strb	r2, [r5, #4]
        res->app_status = rc;
   12c54:	6028      	str	r0, [r5, #0]
        res->enc_cb = 1;
   12c56:	7d2b      	ldrb	r3, [r5, #20]
   12c58:	f043 0302 	orr.w	r3, r3, #2
   12c5c:	752b      	strb	r3, [r5, #20]
}
   12c5e:	b009      	add	sp, #36	; 0x24
   12c60:	bd30      	pop	{r4, r5, pc}

00012c62 <ble_sm_ltk_req_reply_tx>:
{
   12c62:	b530      	push	{r4, r5, lr}
   12c64:	b089      	sub	sp, #36	; 0x24
   12c66:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn_handle);
   12c68:	f8ad 000c 	strh.w	r0, [sp, #12]
    memcpy(cmd.ltk, ltk, 16);
   12c6c:	680d      	ldr	r5, [r1, #0]
   12c6e:	6848      	ldr	r0, [r1, #4]
   12c70:	688a      	ldr	r2, [r1, #8]
   12c72:	68cb      	ldr	r3, [r1, #12]
   12c74:	f8cd 500e 	str.w	r5, [sp, #14]
   12c78:	f8cd 0012 	str.w	r0, [sp, #18]
   12c7c:	f8cd 2016 	str.w	r2, [sp, #22]
   12c80:	f8cd 301a 	str.w	r3, [sp, #26]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   12c84:	2302      	movs	r3, #2
   12c86:	9300      	str	r3, [sp, #0]
   12c88:	ab02      	add	r3, sp, #8
   12c8a:	2212      	movs	r2, #18
   12c8c:	a903      	add	r1, sp, #12
   12c8e:	f242 001a 	movw	r0, #8218	; 0x201a
   12c92:	f7fd ffcf 	bl	10c34 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   12c96:	4603      	mov	r3, r0
   12c98:	b918      	cbnz	r0, 12ca2 <ble_sm_ltk_req_reply_tx+0x40>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   12c9a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   12c9e:	42a2      	cmp	r2, r4
   12ca0:	d102      	bne.n	12ca8 <ble_sm_ltk_req_reply_tx+0x46>
}
   12ca2:	4618      	mov	r0, r3
   12ca4:	b009      	add	sp, #36	; 0x24
   12ca6:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   12ca8:	230c      	movs	r3, #12
   12caa:	e7fa      	b.n	12ca2 <ble_sm_ltk_req_reply_tx+0x40>

00012cac <ble_sm_ltk_start_exec>:
{
   12cac:	b538      	push	{r3, r4, r5, lr}
   12cae:	4604      	mov	r4, r0
   12cb0:	460d      	mov	r5, r1
    res->app_status = ble_sm_ltk_req_reply_tx(proc->conn_handle, proc->ltk);
   12cb2:	f100 015e 	add.w	r1, r0, #94	; 0x5e
   12cb6:	8940      	ldrh	r0, [r0, #10]
   12cb8:	f7ff ffd3 	bl	12c62 <ble_sm_ltk_req_reply_tx>
   12cbc:	6028      	str	r0, [r5, #0]
    if (res->app_status == 0) {
   12cbe:	b120      	cbz	r0, 12cca <ble_sm_ltk_start_exec+0x1e>
        res->enc_cb = 1;
   12cc0:	7d2b      	ldrb	r3, [r5, #20]
   12cc2:	f043 0302 	orr.w	r3, r3, #2
   12cc6:	752b      	strb	r3, [r5, #20]
}
   12cc8:	bd38      	pop	{r3, r4, r5, pc}
        proc->state = BLE_SM_PROC_STATE_ENC_START;
   12cca:	2305      	movs	r3, #5
   12ccc:	7363      	strb	r3, [r4, #13]
   12cce:	e7fb      	b.n	12cc8 <ble_sm_ltk_start_exec+0x1c>

00012cd0 <ble_sm_ltk_req_neg_reply_tx>:
{
   12cd0:	b510      	push	{r4, lr}
   12cd2:	b084      	sub	sp, #16
   12cd4:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn_handle);
   12cd6:	f8ad 000c 	strh.w	r0, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   12cda:	2202      	movs	r2, #2
   12cdc:	9200      	str	r2, [sp, #0]
   12cde:	ab02      	add	r3, sp, #8
   12ce0:	a903      	add	r1, sp, #12
   12ce2:	f242 001b 	movw	r0, #8219	; 0x201b
   12ce6:	f7fd ffa5 	bl	10c34 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   12cea:	4603      	mov	r3, r0
   12cec:	b918      	cbnz	r0, 12cf6 <ble_sm_ltk_req_neg_reply_tx+0x26>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   12cee:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   12cf2:	42a2      	cmp	r2, r4
   12cf4:	d102      	bne.n	12cfc <ble_sm_ltk_req_neg_reply_tx+0x2c>
}
   12cf6:	4618      	mov	r0, r3
   12cf8:	b004      	add	sp, #16
   12cfa:	bd10      	pop	{r4, pc}
        return BLE_HS_ECONTROLLER;
   12cfc:	230c      	movs	r3, #12
   12cfe:	e7fa      	b.n	12cf6 <ble_sm_ltk_req_neg_reply_tx+0x26>

00012d00 <ble_sm_ltk_restore_exec>:
{
   12d00:	b570      	push	{r4, r5, r6, lr}
   12d02:	4605      	mov	r5, r0
   12d04:	460c      	mov	r4, r1
    if (value_sec != NULL) {
   12d06:	b1e2      	cbz	r2, 12d42 <ble_sm_ltk_restore_exec+0x42>
   12d08:	4616      	mov	r6, r2
        res->app_status = ble_sm_ltk_req_reply_tx(
   12d0a:	f102 0118 	add.w	r1, r2, #24
   12d0e:	8940      	ldrh	r0, [r0, #10]
   12d10:	f7ff ffa7 	bl	12c62 <ble_sm_ltk_req_reply_tx>
   12d14:	6020      	str	r0, [r4, #0]
        if (res->app_status == 0) {
   12d16:	b958      	cbnz	r0, 12d30 <ble_sm_ltk_restore_exec+0x30>
            proc->key_size = value_sec->key_size;
   12d18:	79f3      	ldrb	r3, [r6, #7]
   12d1a:	73eb      	strb	r3, [r5, #15]
            if (value_sec->authenticated) {
   12d1c:	f896 304a 	ldrb.w	r3, [r6, #74]	; 0x4a
   12d20:	f013 0f02 	tst.w	r3, #2
   12d24:	d008      	beq.n	12d38 <ble_sm_ltk_restore_exec+0x38>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   12d26:	7a2b      	ldrb	r3, [r5, #8]
   12d28:	f043 0308 	orr.w	r3, r3, #8
   12d2c:	722b      	strb	r3, [r5, #8]
   12d2e:	e003      	b.n	12d38 <ble_sm_ltk_restore_exec+0x38>
            res->enc_cb = 1;
   12d30:	7d23      	ldrb	r3, [r4, #20]
   12d32:	f043 0302 	orr.w	r3, r3, #2
   12d36:	7523      	strb	r3, [r4, #20]
    if (res->app_status == 0) {
   12d38:	6823      	ldr	r3, [r4, #0]
   12d3a:	b90b      	cbnz	r3, 12d40 <ble_sm_ltk_restore_exec+0x40>
        proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   12d3c:	2306      	movs	r3, #6
   12d3e:	736b      	strb	r3, [r5, #13]
}
   12d40:	bd70      	pop	{r4, r5, r6, pc}
        ble_sm_ltk_req_neg_reply_tx(proc->conn_handle);
   12d42:	8940      	ldrh	r0, [r0, #10]
   12d44:	f7ff ffc4 	bl	12cd0 <ble_sm_ltk_req_neg_reply_tx>
        res->app_status = BLE_HS_ENOENT;
   12d48:	2305      	movs	r3, #5
   12d4a:	6023      	str	r3, [r4, #0]
   12d4c:	e7f4      	b.n	12d38 <ble_sm_ltk_restore_exec+0x38>

00012d4e <ble_sm_random_exec>:
{
   12d4e:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   12d50:	7a03      	ldrb	r3, [r0, #8]
   12d52:	f013 0f10 	tst.w	r3, #16
   12d56:	d000      	beq.n	12d5a <ble_sm_random_exec+0xc>
}
   12d58:	bd08      	pop	{r3, pc}
        ble_sm_lgcy_random_exec(proc, res);
   12d5a:	f001 f935 	bl	13fc8 <ble_sm_lgcy_random_exec>
}
   12d5e:	e7fb      	b.n	12d58 <ble_sm_random_exec+0xa>

00012d60 <ble_sm_confirm_exec>:
{
   12d60:	b508      	push	{r3, lr}
    if (!(proc->flags & BLE_SM_PROC_F_SC)) {
   12d62:	7a03      	ldrb	r3, [r0, #8]
   12d64:	f013 0f10 	tst.w	r3, #16
   12d68:	d000      	beq.n	12d6c <ble_sm_confirm_exec+0xc>
}
   12d6a:	bd08      	pop	{r3, pc}
        ble_sm_lgcy_confirm_exec(proc, res);
   12d6c:	f001 f8de 	bl	13f2c <ble_sm_lgcy_confirm_exec>
}
   12d70:	e7fb      	b.n	12d6a <ble_sm_confirm_exec+0xa>

00012d72 <ble_sm_proc_set_timer>:
{
   12d72:	b510      	push	{r4, lr}
   12d74:	4604      	mov	r4, r0
   12d76:	f7f8 fb9f 	bl	b4b8 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   12d7a:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   12d7e:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   12d80:	f7fc ffde 	bl	fd40 <ble_hs_timer_resched>
}
   12d84:	bd10      	pop	{r4, pc}
	...

00012d88 <ble_sm_extract_expired>:
{
   12d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12d8a:	4605      	mov	r5, r0
   12d8c:	f7f8 fb94 	bl	b4b8 <os_time_get>
   12d90:	4607      	mov	r7, r0
    STAILQ_INIT(dst_list);
   12d92:	2400      	movs	r4, #0
   12d94:	602c      	str	r4, [r5, #0]
   12d96:	606d      	str	r5, [r5, #4]
    ble_hs_lock();
   12d98:	f7fc fef6 	bl	fb88 <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_sm_procs);
   12d9c:	4b15      	ldr	r3, [pc, #84]	; (12df4 <ble_sm_extract_expired+0x6c>)
   12d9e:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   12da0:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    while (proc != NULL) {
   12da4:	e00a      	b.n	12dbc <ble_sm_extract_expired+0x34>
            if (prev == NULL) {
   12da6:	b19c      	cbz	r4, 12dd0 <ble_sm_extract_expired+0x48>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   12da8:	6822      	ldr	r2, [r4, #0]
   12daa:	6812      	ldr	r2, [r2, #0]
   12dac:	6022      	str	r2, [r4, #0]
   12dae:	b1c2      	cbz	r2, 12de2 <ble_sm_extract_expired+0x5a>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   12db0:	682a      	ldr	r2, [r5, #0]
   12db2:	601a      	str	r2, [r3, #0]
   12db4:	b1c2      	cbz	r2, 12de8 <ble_sm_extract_expired+0x60>
   12db6:	602b      	str	r3, [r5, #0]
                next_exp_in = time_diff;
   12db8:	461c      	mov	r4, r3
   12dba:	4603      	mov	r3, r0
    while (proc != NULL) {
   12dbc:	b1b3      	cbz	r3, 12dec <ble_sm_extract_expired+0x64>
        next = STAILQ_NEXT(proc, next);
   12dbe:	6818      	ldr	r0, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   12dc0:	685a      	ldr	r2, [r3, #4]
   12dc2:	1bd2      	subs	r2, r2, r7
        if (time_diff <= 0) {
   12dc4:	2a00      	cmp	r2, #0
   12dc6:	ddee      	ble.n	12da6 <ble_sm_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   12dc8:	4296      	cmp	r6, r2
   12dca:	ddf5      	ble.n	12db8 <ble_sm_extract_expired+0x30>
                next_exp_in = time_diff;
   12dcc:	4616      	mov	r6, r2
   12dce:	e7f3      	b.n	12db8 <ble_sm_extract_expired+0x30>
                STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   12dd0:	4908      	ldr	r1, [pc, #32]	; (12df4 <ble_sm_extract_expired+0x6c>)
   12dd2:	680a      	ldr	r2, [r1, #0]
   12dd4:	6812      	ldr	r2, [r2, #0]
   12dd6:	600a      	str	r2, [r1, #0]
   12dd8:	2a00      	cmp	r2, #0
   12dda:	d1e9      	bne.n	12db0 <ble_sm_extract_expired+0x28>
   12ddc:	460a      	mov	r2, r1
   12dde:	6051      	str	r1, [r2, #4]
   12de0:	e7e6      	b.n	12db0 <ble_sm_extract_expired+0x28>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   12de2:	4a04      	ldr	r2, [pc, #16]	; (12df4 <ble_sm_extract_expired+0x6c>)
   12de4:	6054      	str	r4, [r2, #4]
   12de6:	e7e3      	b.n	12db0 <ble_sm_extract_expired+0x28>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   12de8:	606b      	str	r3, [r5, #4]
   12dea:	e7e4      	b.n	12db6 <ble_sm_extract_expired+0x2e>
    ble_hs_unlock();
   12dec:	f7fc fed0 	bl	fb90 <ble_hs_unlock>
}
   12df0:	4630      	mov	r0, r6
   12df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12df4:	2000779c 	.word	0x2000779c

00012df8 <ble_sm_persist_keys>:
{
   12df8:	b5f0      	push	{r4, r5, r6, r7, lr}
   12dfa:	b09b      	sub	sp, #108	; 0x6c
   12dfc:	4604      	mov	r4, r0
    ble_hs_lock();
   12dfe:	f7fc fec3 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find(proc->conn_handle);
   12e02:	8960      	ldrh	r0, [r4, #10]
   12e04:	f7fd fcca 	bl	1079c <ble_hs_conn_find>
   12e08:	4605      	mov	r5, r0
    if (proc->peer_keys.addr_valid) {
   12e0a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   12e0e:	f013 0f10 	tst.w	r3, #16
   12e12:	d052      	beq.n	12eba <ble_sm_persist_keys+0xc2>
        peer_addr.type = proc->peer_keys.addr_type;
   12e14:	f894 60c8 	ldrb.w	r6, [r4, #200]	; 0xc8
   12e18:	f88d 6008 	strb.w	r6, [sp, #8]
        memcpy(peer_addr.val, proc->peer_keys.addr, sizeof peer_addr.val);
   12e1c:	4623      	mov	r3, r4
   12e1e:	f853 2ffa 	ldr.w	r2, [r3, #250]!
   12e22:	f8cd 2009 	str.w	r2, [sp, #9]
   12e26:	889b      	ldrh	r3, [r3, #4]
   12e28:	f8ad 300d 	strh.w	r3, [sp, #13]
        conn->bhc_peer_addr = peer_addr;
   12e2c:	9802      	ldr	r0, [sp, #8]
   12e2e:	f8c5 0007 	str.w	r0, [r5, #7]
   12e32:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   12e36:	f89d 200e 	ldrb.w	r2, [sp, #14]
   12e3a:	f8a5 100b 	strh.w	r1, [r5, #11]
   12e3e:	736a      	strb	r2, [r5, #13]
        if (memcmp(BLE_ADDR_ANY->val, &conn->bhc_peer_rpa_addr.val, 6) != 0) {
   12e40:	2300      	movs	r3, #0
   12e42:	9318      	str	r3, [sp, #96]	; 0x60
   12e44:	f8cd 3063 	str.w	r3, [sp, #99]	; 0x63
   12e48:	2206      	movs	r2, #6
   12e4a:	f105 0116 	add.w	r1, r5, #22
   12e4e:	f10d 0061 	add.w	r0, sp, #97	; 0x61
   12e52:	f7f8 fcf9 	bl	b848 <memcmp>
   12e56:	b128      	cbz	r0, 12e64 <ble_sm_persist_keys+0x6c>
            switch (peer_addr.type) {
   12e58:	2e03      	cmp	r6, #3
   12e5a:	d808      	bhi.n	12e6e <ble_sm_persist_keys+0x76>
   12e5c:	e8df f006 	tbb	[pc, r6]
   12e60:	2a052a05 	.word	0x2a052a05
    ble_hs_unlock();
   12e64:	f7fc fe94 	bl	fb90 <ble_hs_unlock>
   12e68:	e006      	b.n	12e78 <ble_sm_persist_keys+0x80>
                conn->bhc_peer_addr.type = BLE_ADDR_PUBLIC_ID;
   12e6a:	2302      	movs	r3, #2
   12e6c:	71eb      	strb	r3, [r5, #7]
    ble_hs_unlock();
   12e6e:	f7fc fe8f 	bl	fb90 <ble_hs_unlock>
        ble_gap_identity_event(proc->conn_handle);
   12e72:	8960      	ldrh	r0, [r4, #10]
   12e74:	f7fa fdc0 	bl	d9f8 <ble_gap_identity_event>
    authenticated = proc->flags & BLE_SM_PROC_F_AUTHENTICATED;
   12e78:	7a25      	ldrb	r5, [r4, #8]
   12e7a:	f005 0708 	and.w	r7, r5, #8
    sc = proc->flags & BLE_SM_PROC_F_SC;
   12e7e:	f005 0510 	and.w	r5, r5, #16
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->our_keys,
   12e82:	ae04      	add	r6, sp, #16
   12e84:	9600      	str	r6, [sp, #0]
   12e86:	f104 0370 	add.w	r3, r4, #112	; 0x70
   12e8a:	462a      	mov	r2, r5
   12e8c:	4639      	mov	r1, r7
   12e8e:	a802      	add	r0, sp, #8
   12e90:	f7ff fca2 	bl	127d8 <ble_sm_fill_store_value>
    ble_store_write_our_sec(&value_sec);
   12e94:	4630      	mov	r0, r6
   12e96:	f001 f992 	bl	141be <ble_store_write_our_sec>
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->peer_keys,
   12e9a:	9600      	str	r6, [sp, #0]
   12e9c:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   12ea0:	462a      	mov	r2, r5
   12ea2:	4639      	mov	r1, r7
   12ea4:	a802      	add	r0, sp, #8
   12ea6:	f7ff fc97 	bl	127d8 <ble_sm_fill_store_value>
    ble_store_write_peer_sec(&value_sec);
   12eaa:	4630      	mov	r0, r6
   12eac:	f001 f994 	bl	141d8 <ble_store_write_peer_sec>
}
   12eb0:	b01b      	add	sp, #108	; 0x6c
   12eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                conn->bhc_peer_addr.type = BLE_ADDR_RANDOM_ID;
   12eb4:	2303      	movs	r3, #3
   12eb6:	71eb      	strb	r3, [r5, #7]
                break;
   12eb8:	e7d9      	b.n	12e6e <ble_sm_persist_keys+0x76>
        peer_addr = conn->bhc_peer_addr;
   12eba:	4603      	mov	r3, r0
   12ebc:	f853 0f07 	ldr.w	r0, [r3, #7]!
   12ec0:	9002      	str	r0, [sp, #8]
   12ec2:	889a      	ldrh	r2, [r3, #4]
   12ec4:	799b      	ldrb	r3, [r3, #6]
   12ec6:	f8ad 200c 	strh.w	r2, [sp, #12]
   12eca:	f88d 300e 	strb.w	r3, [sp, #14]
            ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   12ece:	79e8      	ldrb	r0, [r5, #7]
   12ed0:	f7fe fc36 	bl	11740 <ble_hs_misc_peer_addr_type_to_id>
        peer_addr.type =
   12ed4:	f88d 0008 	strb.w	r0, [sp, #8]
    ble_hs_unlock();
   12ed8:	f7fc fe5a 	bl	fb90 <ble_hs_unlock>
   12edc:	e7cc      	b.n	12e78 <ble_sm_persist_keys+0x80>
	...

00012ee0 <ble_sm_proc_free>:
    if (proc != NULL) {
   12ee0:	b128      	cbz	r0, 12eee <ble_sm_proc_free+0xe>
{
   12ee2:	b508      	push	{r3, lr}
   12ee4:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_sm_proc_pool, proc);
   12ee6:	4802      	ldr	r0, [pc, #8]	; (12ef0 <ble_sm_proc_free+0x10>)
   12ee8:	f7f7 fe63 	bl	abb2 <os_memblock_put>
}
   12eec:	bd08      	pop	{r3, pc}
   12eee:	4770      	bx	lr
   12ef0:	20007780 	.word	0x20007780

00012ef4 <ble_sm_proc_alloc>:
{
   12ef4:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_sm_proc_pool);
   12ef6:	4806      	ldr	r0, [pc, #24]	; (12f10 <ble_sm_proc_alloc+0x1c>)
   12ef8:	f7f7 fe33 	bl	ab62 <os_memblock_get>
    if (proc != NULL) {
   12efc:	4604      	mov	r4, r0
   12efe:	b120      	cbz	r0, 12f0a <ble_sm_proc_alloc+0x16>
        memset(proc, 0, sizeof *proc);
   12f00:	f44f 7280 	mov.w	r2, #256	; 0x100
   12f04:	2100      	movs	r1, #0
   12f06:	f7f8 fcec 	bl	b8e2 <memset>
}
   12f0a:	4620      	mov	r0, r4
   12f0c:	bd10      	pop	{r4, pc}
   12f0e:	bf00      	nop
   12f10:	20007780 	.word	0x20007780

00012f14 <ble_sm_retrieve_ltk>:
{
   12f14:	b5f0      	push	{r4, r5, r6, r7, lr}
   12f16:	b089      	sub	sp, #36	; 0x24
   12f18:	4605      	mov	r5, r0
   12f1a:	4616      	mov	r6, r2
   12f1c:	461f      	mov	r7, r3
   12f1e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    memset(&key_sec, 0, sizeof key_sec);
   12f20:	2220      	movs	r2, #32
   12f22:	2100      	movs	r1, #0
   12f24:	4668      	mov	r0, sp
   12f26:	f7f8 fcdc 	bl	b8e2 <memset>
    key_sec.peer_addr.type = peer_addr_type;
   12f2a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12f2e:	f88d 3000 	strb.w	r3, [sp]
    memcpy(key_sec.peer_addr.val, peer_addr, 6);
   12f32:	6823      	ldr	r3, [r4, #0]
   12f34:	f8cd 3001 	str.w	r3, [sp, #1]
   12f38:	88a3      	ldrh	r3, [r4, #4]
   12f3a:	f8ad 3005 	strh.w	r3, [sp, #5]
    key_sec.ediv = ediv;
   12f3e:	f8ad 5008 	strh.w	r5, [sp, #8]
    key_sec.rand_num = rand;
   12f42:	e9cd 6704 	strd	r6, r7, [sp, #16]
    key_sec.ediv_rand_present = 1;
   12f46:	2301      	movs	r3, #1
   12f48:	f88d 3018 	strb.w	r3, [sp, #24]
    rc = ble_store_read_our_sec(&key_sec, value_sec);
   12f4c:	9910      	ldr	r1, [sp, #64]	; 0x40
   12f4e:	4668      	mov	r0, sp
   12f50:	f001 f92e 	bl	141b0 <ble_store_read_our_sec>
}
   12f54:	b009      	add	sp, #36	; 0x24
   12f56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012f58 <ble_sm_fail_rx>:
 *****************************************************************************/

static void
ble_sm_fail_rx(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
   12f58:	b538      	push	{r3, r4, r5, lr}
   12f5a:	460d      	mov	r5, r1
   12f5c:	4614      	mov	r4, r2
    struct ble_sm_pair_fail *cmd;

    res->enc_cb = 1;
   12f5e:	7d13      	ldrb	r3, [r2, #20]
   12f60:	f043 0302 	orr.w	r3, r3, #2
   12f64:	7513      	strb	r3, [r2, #20]

    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   12f66:	2101      	movs	r1, #1
   12f68:	4628      	mov	r0, r5
   12f6a:	f7fe fb94 	bl	11696 <ble_hs_mbuf_pullup_base>
   12f6e:	6020      	str	r0, [r4, #0]
    if (res->app_status == 0) {
   12f70:	b930      	cbnz	r0, 12f80 <ble_sm_fail_rx+0x28>
        cmd = (struct ble_sm_pair_fail *)(*om)->om_data;
   12f72:	682b      	ldr	r3, [r5, #0]
   12f74:	681b      	ldr	r3, [r3, #0]

        res->app_status = BLE_HS_SM_PEER_ERR(cmd->reason);
   12f76:	781b      	ldrb	r3, [r3, #0]
   12f78:	b10b      	cbz	r3, 12f7e <ble_sm_fail_rx+0x26>
   12f7a:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
   12f7e:	6020      	str	r0, [r4, #0]
    }
}
   12f80:	bd38      	pop	{r3, r4, r5, pc}

00012f82 <ble_sm_read_bond>:
{
   12f82:	b510      	push	{r4, lr}
   12f84:	b094      	sub	sp, #80	; 0x50
   12f86:	460c      	mov	r4, r1
    rc = ble_gap_conn_find(conn_handle, &desc);
   12f88:	a901      	add	r1, sp, #4
   12f8a:	f7fa f83b 	bl	d004 <ble_gap_conn_find>
    if (rc != 0) {
   12f8e:	4603      	mov	r3, r0
   12f90:	b110      	cbz	r0, 12f98 <ble_sm_read_bond+0x16>
}
   12f92:	4618      	mov	r0, r3
   12f94:	b014      	add	sp, #80	; 0x50
   12f96:	bd10      	pop	{r4, pc}
    memset(&key_sec, 0, sizeof key_sec);
   12f98:	2300      	movs	r3, #0
   12f9a:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   12f9e:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   12fa2:	f8cd 303e 	str.w	r3, [sp, #62]	; 0x3e
   12fa6:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
   12faa:	f8cd 3046 	str.w	r3, [sp, #70]	; 0x46
   12fae:	f8cd 304a 	str.w	r3, [sp, #74]	; 0x4a
   12fb2:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    key_sec.peer_addr = desc.peer_id_addr;
   12fb6:	ab14      	add	r3, sp, #80	; 0x50
   12fb8:	f853 0d41 	ldr.w	r0, [r3, #-65]!
   12fbc:	900c      	str	r0, [sp, #48]	; 0x30
   12fbe:	889a      	ldrh	r2, [r3, #4]
   12fc0:	799b      	ldrb	r3, [r3, #6]
   12fc2:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   12fc6:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    rc = ble_store_read_peer_sec(&key_sec, out_bond);
   12fca:	4621      	mov	r1, r4
   12fcc:	a80c      	add	r0, sp, #48	; 0x30
   12fce:	f001 f8fc 	bl	141ca <ble_store_read_peer_sec>
   12fd2:	4603      	mov	r3, r0
    return rc;
   12fd4:	e7dd      	b.n	12f92 <ble_sm_read_bond+0x10>

00012fd6 <ble_sm_chk_repeat_pairing>:
{
   12fd6:	b570      	push	{r4, r5, r6, lr}
   12fd8:	b096      	sub	sp, #88	; 0x58
   12fda:	4604      	mov	r4, r0
   12fdc:	460d      	mov	r5, r1
   12fde:	4616      	mov	r6, r2
        rc = ble_sm_read_bond(conn_handle, &bond);
   12fe0:	4669      	mov	r1, sp
   12fe2:	4620      	mov	r0, r4
   12fe4:	f7ff ffcd 	bl	12f82 <ble_sm_read_bond>
        switch (rc) {
   12fe8:	4603      	mov	r3, r0
   12fea:	b128      	cbz	r0, 12ff8 <ble_sm_chk_repeat_pairing+0x22>
   12fec:	2805      	cmp	r0, #5
   12fee:	d100      	bne.n	12ff2 <ble_sm_chk_repeat_pairing+0x1c>
            return 0;
   12ff0:	2300      	movs	r3, #0
}
   12ff2:	4618      	mov	r0, r3
   12ff4:	b016      	add	sp, #88	; 0x58
   12ff6:	bd70      	pop	{r4, r5, r6, pc}
        rp.conn_handle = conn_handle;
   12ff8:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
        rp.cur_key_size = bond.key_size;
   12ffc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   13000:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
        rp.cur_authenticated = bond.authenticated;
   13004:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   13008:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1300c:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   13010:	f361 0300 	bfi	r3, r1, #0, #1
        rp.cur_sc = bond.sc;
   13014:	f3c2 0280 	ubfx	r2, r2, #2, #1
   13018:	f362 0341 	bfi	r3, r2, #1, #1
   1301c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        rp.new_key_size = key_size;
   13020:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
        rp.new_authenticated = !!(proc_flags & BLE_SM_PROC_F_AUTHENTICATED);
   13024:	f3c5 02c0 	ubfx	r2, r5, #3, #1
   13028:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
   1302c:	f362 0300 	bfi	r3, r2, #0, #1
        rp.new_sc = !!(proc_flags & BLE_SM_PROC_F_SC);
   13030:	f3c5 1200 	ubfx	r2, r5, #4, #1
   13034:	f362 0341 	bfi	r3, r2, #1, #1
        rp.new_bonding = !!(proc_flags & BLE_SM_PROC_F_BONDING);
   13038:	f3c5 1240 	ubfx	r2, r5, #5, #1
   1303c:	f362 0382 	bfi	r3, r2, #2, #1
   13040:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
        rc = ble_gap_repeat_pairing_event(&rp);
   13044:	a814      	add	r0, sp, #80	; 0x50
   13046:	f7fa fcea 	bl	da1e <ble_gap_repeat_pairing_event>
    } while (rc == BLE_GAP_REPEAT_PAIRING_RETRY);
   1304a:	2801      	cmp	r0, #1
   1304c:	d0c8      	beq.n	12fe0 <ble_sm_chk_repeat_pairing+0xa>
    return BLE_HS_EALREADY;
   1304e:	2302      	movs	r3, #2
   13050:	e7cf      	b.n	12ff2 <ble_sm_chk_repeat_pairing+0x1c>

00013052 <ble_sm_gen_pair_rand>:
{
   13052:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(pair_rand, 16);
   13054:	2110      	movs	r1, #16
   13056:	f7fe f98e 	bl	11376 <ble_hs_hci_util_rand>
}
   1305a:	bd08      	pop	{r3, pc}

0001305c <ble_sm_ia_ra>:
{
   1305c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13060:	b088      	sub	sp, #32
   13062:	4606      	mov	r6, r0
   13064:	4688      	mov	r8, r1
   13066:	4615      	mov	r5, r2
   13068:	461f      	mov	r7, r3
   1306a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    conn = ble_hs_conn_find_assert(proc->conn_handle);
   1306c:	8940      	ldrh	r0, [r0, #10]
   1306e:	f7fd fbad 	bl	107cc <ble_hs_conn_find_assert>
    ble_hs_conn_addrs(conn, &addrs);
   13072:	a901      	add	r1, sp, #4
   13074:	f7fd fbca 	bl	1080c <ble_hs_conn_addrs>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   13078:	7a33      	ldrb	r3, [r6, #8]
   1307a:	f013 0f01 	tst.w	r3, #1
   1307e:	d115      	bne.n	130ac <ble_sm_ia_ra+0x50>
        *out_iat = addrs.peer_ota_addr.type;
   13080:	f89d 3019 	ldrb.w	r3, [sp, #25]
   13084:	f888 3000 	strb.w	r3, [r8]
        memcpy(out_ia, addrs.peer_ota_addr.val, 6);
   13088:	ab08      	add	r3, sp, #32
   1308a:	f853 2d06 	ldr.w	r2, [r3, #-6]!
   1308e:	602a      	str	r2, [r5, #0]
   13090:	889b      	ldrh	r3, [r3, #4]
   13092:	80ab      	strh	r3, [r5, #4]
        *out_rat = addrs.our_ota_addr.type;
   13094:	f89d 3012 	ldrb.w	r3, [sp, #18]
   13098:	703b      	strb	r3, [r7, #0]
        memcpy(out_ra, addrs.our_ota_addr.val, 6);
   1309a:	ab08      	add	r3, sp, #32
   1309c:	f853 2d0d 	ldr.w	r2, [r3, #-13]!
   130a0:	6022      	str	r2, [r4, #0]
   130a2:	889b      	ldrh	r3, [r3, #4]
   130a4:	80a3      	strh	r3, [r4, #4]
}
   130a6:	b008      	add	sp, #32
   130a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *out_iat = addrs.our_ota_addr.type;
   130ac:	f89d 3012 	ldrb.w	r3, [sp, #18]
   130b0:	f888 3000 	strb.w	r3, [r8]
        memcpy(out_ia, addrs.our_ota_addr.val, 6);
   130b4:	ab08      	add	r3, sp, #32
   130b6:	f853 2d0d 	ldr.w	r2, [r3, #-13]!
   130ba:	602a      	str	r2, [r5, #0]
   130bc:	889b      	ldrh	r3, [r3, #4]
   130be:	80ab      	strh	r3, [r5, #4]
        *out_rat = addrs.peer_ota_addr.type;
   130c0:	f89d 3019 	ldrb.w	r3, [sp, #25]
   130c4:	703b      	strb	r3, [r7, #0]
        memcpy(out_ra, addrs.peer_ota_addr.val, 6);
   130c6:	ab08      	add	r3, sp, #32
   130c8:	f853 2d06 	ldr.w	r2, [r3, #-6]!
   130cc:	6022      	str	r2, [r4, #0]
   130ce:	889b      	ldrh	r3, [r3, #4]
   130d0:	80a3      	strh	r3, [r4, #4]
   130d2:	e7e8      	b.n	130a6 <ble_sm_ia_ra+0x4a>

000130d4 <ble_sm_proc_find>:
{
   130d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   130d8:	4607      	mov	r7, r0
   130da:	460e      	mov	r6, r1
   130dc:	4615      	mov	r5, r2
   130de:	4699      	mov	r9, r3
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   130e0:	4b0b      	ldr	r3, [pc, #44]	; (13110 <ble_sm_proc_find+0x3c>)
   130e2:	681c      	ldr	r4, [r3, #0]
    prev = NULL;
   130e4:	f04f 0800 	mov.w	r8, #0
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   130e8:	b174      	cbz	r4, 13108 <ble_sm_proc_find+0x34>
        if (ble_sm_proc_matches(proc, conn_handle, state, is_initiator)) {
   130ea:	462b      	mov	r3, r5
   130ec:	4632      	mov	r2, r6
   130ee:	4639      	mov	r1, r7
   130f0:	4620      	mov	r0, r4
   130f2:	f7ff f9fb 	bl	124ec <ble_sm_proc_matches>
   130f6:	b910      	cbnz	r0, 130fe <ble_sm_proc_find+0x2a>
        prev = proc;
   130f8:	46a0      	mov	r8, r4
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   130fa:	6824      	ldr	r4, [r4, #0]
   130fc:	e7f4      	b.n	130e8 <ble_sm_proc_find+0x14>
            if (out_prev != NULL) {
   130fe:	f1b9 0f00 	cmp.w	r9, #0
   13102:	d001      	beq.n	13108 <ble_sm_proc_find+0x34>
                *out_prev = prev;
   13104:	f8c9 8000 	str.w	r8, [r9]
}
   13108:	4620      	mov	r0, r4
   1310a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1310e:	bf00      	nop
   13110:	2000779c 	.word	0x2000779c

00013114 <ble_sm_sign_info_rx>:
{
   13114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13116:	4606      	mov	r6, r0
   13118:	460d      	mov	r5, r1
   1311a:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   1311c:	2110      	movs	r1, #16
   1311e:	4628      	mov	r0, r5
   13120:	f7fe fab9 	bl	11696 <ble_hs_mbuf_pullup_base>
   13124:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   13126:	b130      	cbz	r0, 13136 <ble_sm_sign_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13128:	2308      	movs	r3, #8
   1312a:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   1312c:	7d23      	ldrb	r3, [r4, #20]
   1312e:	f043 0302 	orr.w	r3, r3, #2
   13132:	7523      	strb	r3, [r4, #20]
}
   13134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_sign_info *)(*om)->om_data;
   13136:	682b      	ldr	r3, [r5, #0]
   13138:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   1313a:	f7fc fd25 	bl	fb88 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   1313e:	2300      	movs	r3, #0
   13140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13144:	2107      	movs	r1, #7
   13146:	4630      	mov	r0, r6
   13148:	f7ff ffc4 	bl	130d4 <ble_sm_proc_find>
    if (proc == NULL) {
   1314c:	4603      	mov	r3, r0
   1314e:	b1e0      	cbz	r0, 1318a <ble_sm_sign_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_SIGN_INFO;
   13150:	7b82      	ldrb	r2, [r0, #14]
   13152:	f022 0210 	bic.w	r2, r2, #16
   13156:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.csrk, cmd->sig_key, 16);
   13158:	682f      	ldr	r7, [r5, #0]
   1315a:	686e      	ldr	r6, [r5, #4]
   1315c:	68a8      	ldr	r0, [r5, #8]
   1315e:	68e9      	ldr	r1, [r5, #12]
   13160:	f8c3 70ea 	str.w	r7, [r3, #234]	; 0xea
   13164:	f8c3 60ee 	str.w	r6, [r3, #238]	; 0xee
   13168:	f8c3 00f2 	str.w	r0, [r3, #242]	; 0xf2
   1316c:	f8c3 10f6 	str.w	r1, [r3, #246]	; 0xf6
        proc->peer_keys.csrk_valid = 1;
   13170:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   13174:	f042 0208 	orr.w	r2, r2, #8
   13178:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   1317c:	4621      	mov	r1, r4
   1317e:	4618      	mov	r0, r3
   13180:	f7ff fd17 	bl	12bb2 <ble_sm_key_rxed>
    ble_hs_unlock();
   13184:	f7fc fd04 	bl	fb90 <ble_hs_unlock>
   13188:	e7d4      	b.n	13134 <ble_sm_sign_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   1318a:	2305      	movs	r3, #5
   1318c:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1318e:	2308      	movs	r3, #8
   13190:	7123      	strb	r3, [r4, #4]
   13192:	e7f7      	b.n	13184 <ble_sm_sign_info_rx+0x70>

00013194 <ble_sm_id_addr_info_rx>:
{
   13194:	b570      	push	{r4, r5, r6, lr}
   13196:	4606      	mov	r6, r0
   13198:	460d      	mov	r5, r1
   1319a:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   1319c:	2107      	movs	r1, #7
   1319e:	4628      	mov	r0, r5
   131a0:	f7fe fa79 	bl	11696 <ble_hs_mbuf_pullup_base>
   131a4:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   131a6:	b130      	cbz	r0, 131b6 <ble_sm_id_addr_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   131a8:	2308      	movs	r3, #8
   131aa:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   131ac:	7d23      	ldrb	r3, [r4, #20]
   131ae:	f043 0302 	orr.w	r3, r3, #2
   131b2:	7523      	strb	r3, [r4, #20]
}
   131b4:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_id_addr_info *)(*om)->om_data;
   131b6:	682b      	ldr	r3, [r5, #0]
   131b8:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   131ba:	f7fc fce5 	bl	fb88 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   131be:	2300      	movs	r3, #0
   131c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   131c4:	2107      	movs	r1, #7
   131c6:	4630      	mov	r0, r6
   131c8:	f7ff ff84 	bl	130d4 <ble_sm_proc_find>
    if (proc == NULL) {
   131cc:	b1d0      	cbz	r0, 13204 <ble_sm_id_addr_info_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ADDR_INFO;
   131ce:	7b82      	ldrb	r2, [r0, #14]
   131d0:	f022 0208 	bic.w	r2, r2, #8
   131d4:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.addr_valid = 1;
   131d6:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   131da:	f042 0210 	orr.w	r2, r2, #16
   131de:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.addr_type = cmd->addr_type;
   131e2:	782a      	ldrb	r2, [r5, #0]
   131e4:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
        memcpy(proc->peer_keys.addr, cmd->bd_addr, 6);
   131e8:	462a      	mov	r2, r5
   131ea:	f852 1f01 	ldr.w	r1, [r2, #1]!
   131ee:	f8c0 10fa 	str.w	r1, [r0, #250]	; 0xfa
   131f2:	8892      	ldrh	r2, [r2, #4]
   131f4:	f8a0 20fe 	strh.w	r2, [r0, #254]	; 0xfe
        ble_sm_key_rxed(proc, res);
   131f8:	4621      	mov	r1, r4
   131fa:	f7ff fcda 	bl	12bb2 <ble_sm_key_rxed>
    ble_hs_unlock();
   131fe:	f7fc fcc7 	bl	fb90 <ble_hs_unlock>
   13202:	e7d7      	b.n	131b4 <ble_sm_id_addr_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   13204:	2305      	movs	r3, #5
   13206:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13208:	2308      	movs	r3, #8
   1320a:	7123      	strb	r3, [r4, #4]
   1320c:	e7f7      	b.n	131fe <ble_sm_id_addr_info_rx+0x6a>

0001320e <ble_sm_id_info_rx>:
{
   1320e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13210:	4606      	mov	r6, r0
   13212:	460d      	mov	r5, r1
   13214:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   13216:	2110      	movs	r1, #16
   13218:	4628      	mov	r0, r5
   1321a:	f7fe fa3c 	bl	11696 <ble_hs_mbuf_pullup_base>
   1321e:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   13220:	b130      	cbz	r0, 13230 <ble_sm_id_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13222:	2308      	movs	r3, #8
   13224:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   13226:	7d23      	ldrb	r3, [r4, #20]
   13228:	f043 0302 	orr.w	r3, r3, #2
   1322c:	7523      	strb	r3, [r4, #20]
}
   1322e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_id_info *)(*om)->om_data;
   13230:	682b      	ldr	r3, [r5, #0]
   13232:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   13234:	f7fc fca8 	bl	fb88 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   13238:	2300      	movs	r3, #0
   1323a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1323e:	2107      	movs	r1, #7
   13240:	4630      	mov	r0, r6
   13242:	f7ff ff47 	bl	130d4 <ble_sm_proc_find>
    if (proc == NULL) {
   13246:	4603      	mov	r3, r0
   13248:	b1e0      	cbz	r0, 13284 <ble_sm_id_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ID_INFO;
   1324a:	7b82      	ldrb	r2, [r0, #14]
   1324c:	f022 0204 	bic.w	r2, r2, #4
   13250:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.irk, cmd->irk, 16);
   13252:	682f      	ldr	r7, [r5, #0]
   13254:	686e      	ldr	r6, [r5, #4]
   13256:	68a8      	ldr	r0, [r5, #8]
   13258:	68e9      	ldr	r1, [r5, #12]
   1325a:	f8c3 70da 	str.w	r7, [r3, #218]	; 0xda
   1325e:	f8c3 60de 	str.w	r6, [r3, #222]	; 0xde
   13262:	f8c3 00e2 	str.w	r0, [r3, #226]	; 0xe2
   13266:	f8c3 10e6 	str.w	r1, [r3, #230]	; 0xe6
        proc->peer_keys.irk_valid = 1;
   1326a:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   1326e:	f042 0204 	orr.w	r2, r2, #4
   13272:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   13276:	4621      	mov	r1, r4
   13278:	4618      	mov	r0, r3
   1327a:	f7ff fc9a 	bl	12bb2 <ble_sm_key_rxed>
    ble_hs_unlock();
   1327e:	f7fc fc87 	bl	fb90 <ble_hs_unlock>
   13282:	e7d4      	b.n	1322e <ble_sm_id_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   13284:	2305      	movs	r3, #5
   13286:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13288:	2308      	movs	r3, #8
   1328a:	7123      	strb	r3, [r4, #4]
   1328c:	e7f7      	b.n	1327e <ble_sm_id_info_rx+0x70>

0001328e <ble_sm_master_id_rx>:
{
   1328e:	b570      	push	{r4, r5, r6, lr}
   13290:	4606      	mov	r6, r0
   13292:	460d      	mov	r5, r1
   13294:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   13296:	210a      	movs	r1, #10
   13298:	4628      	mov	r0, r5
   1329a:	f7fe f9fc 	bl	11696 <ble_hs_mbuf_pullup_base>
   1329e:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   132a0:	b130      	cbz	r0, 132b0 <ble_sm_master_id_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   132a2:	2308      	movs	r3, #8
   132a4:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   132a6:	7d23      	ldrb	r3, [r4, #20]
   132a8:	f043 0302 	orr.w	r3, r3, #2
   132ac:	7523      	strb	r3, [r4, #20]
}
   132ae:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_master_id *)(*om)->om_data;
   132b0:	682b      	ldr	r3, [r5, #0]
   132b2:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   132b4:	f7fc fc68 	bl	fb88 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   132b8:	2300      	movs	r3, #0
   132ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   132be:	2107      	movs	r1, #7
   132c0:	4630      	mov	r0, r6
   132c2:	f7ff ff07 	bl	130d4 <ble_sm_proc_find>
    if (proc == NULL) {
   132c6:	b1d0      	cbz	r0, 132fe <ble_sm_master_id_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_MASTER_ID;
   132c8:	7b82      	ldrb	r2, [r0, #14]
   132ca:	f022 0202 	bic.w	r2, r2, #2
   132ce:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ediv_rand_valid = 1;
   132d0:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   132d4:	f042 0202 	orr.w	r2, r2, #2
   132d8:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.ediv = le16toh(cmd->ediv);
   132dc:	882a      	ldrh	r2, [r5, #0]
   132de:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
        proc->peer_keys.rand_val = le64toh(cmd->rand_val);
   132e2:	f8d5 1002 	ldr.w	r1, [r5, #2]
   132e6:	f8d5 2006 	ldr.w	r2, [r5, #6]
   132ea:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
   132ee:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
        ble_sm_key_rxed(proc, res);
   132f2:	4621      	mov	r1, r4
   132f4:	f7ff fc5d 	bl	12bb2 <ble_sm_key_rxed>
    ble_hs_unlock();
   132f8:	f7fc fc4a 	bl	fb90 <ble_hs_unlock>
   132fc:	e7d7      	b.n	132ae <ble_sm_master_id_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   132fe:	2305      	movs	r3, #5
   13300:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13302:	2308      	movs	r3, #8
   13304:	7123      	strb	r3, [r4, #4]
   13306:	e7f7      	b.n	132f8 <ble_sm_master_id_rx+0x6a>

00013308 <ble_sm_enc_info_rx>:
{
   13308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1330a:	4606      	mov	r6, r0
   1330c:	460d      	mov	r5, r1
   1330e:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   13310:	2110      	movs	r1, #16
   13312:	4628      	mov	r0, r5
   13314:	f7fe f9bf 	bl	11696 <ble_hs_mbuf_pullup_base>
   13318:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   1331a:	b130      	cbz	r0, 1332a <ble_sm_enc_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1331c:	2308      	movs	r3, #8
   1331e:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   13320:	7d23      	ldrb	r3, [r4, #20]
   13322:	f043 0302 	orr.w	r3, r3, #2
   13326:	7523      	strb	r3, [r4, #20]
}
   13328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_enc_info *)(*om)->om_data;
   1332a:	682b      	ldr	r3, [r5, #0]
   1332c:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   1332e:	f7fc fc2b 	bl	fb88 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   13332:	2300      	movs	r3, #0
   13334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13338:	2107      	movs	r1, #7
   1333a:	4630      	mov	r0, r6
   1333c:	f7ff feca 	bl	130d4 <ble_sm_proc_find>
    if (proc == NULL) {
   13340:	4603      	mov	r3, r0
   13342:	b1f8      	cbz	r0, 13384 <ble_sm_enc_info_rx+0x7c>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ENC_INFO;
   13344:	7b82      	ldrb	r2, [r0, #14]
   13346:	f022 0201 	bic.w	r2, r2, #1
   1334a:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ltk_valid = 1;
   1334c:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   13350:	f042 0201 	orr.w	r2, r2, #1
   13354:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        memcpy(proc->peer_keys.ltk, cmd->ltk, 16);
   13358:	682f      	ldr	r7, [r5, #0]
   1335a:	686e      	ldr	r6, [r5, #4]
   1335c:	68a8      	ldr	r0, [r5, #8]
   1335e:	68e9      	ldr	r1, [r5, #12]
   13360:	f8c3 70ca 	str.w	r7, [r3, #202]	; 0xca
   13364:	f8c3 60ce 	str.w	r6, [r3, #206]	; 0xce
   13368:	f8c3 00d2 	str.w	r0, [r3, #210]	; 0xd2
   1336c:	f8c3 10d6 	str.w	r1, [r3, #214]	; 0xd6
        proc->peer_keys.key_size = proc->key_size;
   13370:	7bda      	ldrb	r2, [r3, #15]
   13372:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
        ble_sm_key_rxed(proc, res);
   13376:	4621      	mov	r1, r4
   13378:	4618      	mov	r0, r3
   1337a:	f7ff fc1a 	bl	12bb2 <ble_sm_key_rxed>
    ble_hs_unlock();
   1337e:	f7fc fc07 	bl	fb90 <ble_hs_unlock>
   13382:	e7d1      	b.n	13328 <ble_sm_enc_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   13384:	2305      	movs	r3, #5
   13386:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13388:	2308      	movs	r3, #8
   1338a:	7123      	strb	r3, [r4, #4]
   1338c:	e7f7      	b.n	1337e <ble_sm_enc_info_rx+0x76>

0001338e <ble_sm_pair_req_rx>:
{
   1338e:	b5f0      	push	{r4, r5, r6, r7, lr}
   13390:	b083      	sub	sp, #12
   13392:	4606      	mov	r6, r0
   13394:	460d      	mov	r5, r1
   13396:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*req));
   13398:	2106      	movs	r1, #6
   1339a:	4628      	mov	r0, r5
   1339c:	f7fe f97b 	bl	11696 <ble_hs_mbuf_pullup_base>
   133a0:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   133a2:	b108      	cbz	r0, 133a8 <ble_sm_pair_req_rx+0x1a>
}
   133a4:	b003      	add	sp, #12
   133a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    req = (struct ble_sm_pair_cmd *)(*om)->om_data;
   133a8:	682b      	ldr	r3, [r5, #0]
   133aa:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   133ac:	f7fc fbec 	bl	fb88 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, &prev);
   133b0:	ab01      	add	r3, sp, #4
   133b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   133b6:	21ff      	movs	r1, #255	; 0xff
   133b8:	4630      	mov	r0, r6
   133ba:	f7ff fe8b 	bl	130d4 <ble_sm_proc_find>
    if (proc != NULL) {
   133be:	4605      	mov	r5, r0
   133c0:	b180      	cbz	r0, 133e4 <ble_sm_pair_req_rx+0x56>
        if (proc->state != BLE_SM_PROC_STATE_SEC_REQ) {
   133c2:	7b43      	ldrb	r3, [r0, #13]
   133c4:	2b08      	cmp	r3, #8
   133c6:	d007      	beq.n	133d8 <ble_sm_pair_req_rx+0x4a>
            res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   133c8:	2308      	movs	r3, #8
   133ca:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_UNSPECIFIED);
   133cc:	f44f 6381 	mov.w	r3, #1032	; 0x408
   133d0:	6023      	str	r3, [r4, #0]
            ble_hs_unlock();
   133d2:	f7fc fbdd 	bl	fb90 <ble_hs_unlock>
            return;
   133d6:	e7e5      	b.n	133a4 <ble_sm_pair_req_rx+0x16>
        ble_sm_proc_remove(proc, prev);
   133d8:	9901      	ldr	r1, [sp, #4]
   133da:	f7ff f873 	bl	124c4 <ble_sm_proc_remove>
        ble_sm_proc_free(proc);
   133de:	4628      	mov	r0, r5
   133e0:	f7ff fd7e 	bl	12ee0 <ble_sm_proc_free>
    ble_hs_unlock();
   133e4:	f7fc fbd4 	bl	fb90 <ble_hs_unlock>
    rc = ble_sm_chk_store_overflow(conn_handle);
   133e8:	4630      	mov	r0, r6
   133ea:	f7ff f8d6 	bl	1259a <ble_sm_chk_store_overflow>
    if (rc != 0) {
   133ee:	b118      	cbz	r0, 133f8 <ble_sm_pair_req_rx+0x6a>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   133f0:	2208      	movs	r2, #8
   133f2:	7122      	strb	r2, [r4, #4]
        res->app_status = rc;
   133f4:	6020      	str	r0, [r4, #0]
        return;
   133f6:	e7d5      	b.n	133a4 <ble_sm_pair_req_rx+0x16>
    ble_hs_lock();
   133f8:	f7fc fbc6 	bl	fb88 <ble_hs_lock>
    proc = ble_sm_proc_alloc();
   133fc:	f7ff fd7a 	bl	12ef4 <ble_sm_proc_alloc>
    if (proc != NULL) {
   13400:	4605      	mov	r5, r0
   13402:	2800      	cmp	r0, #0
   13404:	d04a      	beq.n	1349c <ble_sm_pair_req_rx+0x10e>
        proc->conn_handle = conn_handle;
   13406:	8146      	strh	r6, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   13408:	2300      	movs	r3, #0
   1340a:	7343      	strb	r3, [r0, #13]
        ble_sm_insert(proc);
   1340c:	f7ff f88c 	bl	12528 <ble_sm_insert>
        proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   13410:	2301      	movs	r3, #1
   13412:	742b      	strb	r3, [r5, #16]
        memcpy(proc->pair_req + 1, req, sizeof(*req));
   13414:	683b      	ldr	r3, [r7, #0]
   13416:	f8c5 3011 	str.w	r3, [r5, #17]
   1341a:	88bb      	ldrh	r3, [r7, #4]
   1341c:	f8a5 3015 	strh.w	r3, [r5, #21]
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   13420:	8968      	ldrh	r0, [r5, #10]
   13422:	f7fd f9d3 	bl	107cc <ble_hs_conn_find_assert>
        if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   13426:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   1342a:	f013 0f01 	tst.w	r3, #1
   1342e:	d007      	beq.n	13440 <ble_sm_pair_req_rx+0xb2>
            res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   13430:	2307      	movs	r3, #7
   13432:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   13434:	f240 4307 	movw	r3, #1031	; 0x407
   13438:	6023      	str	r3, [r4, #0]
    key_size = 0;
   1343a:	2500      	movs	r5, #0
    proc_flags = 0;
   1343c:	462f      	mov	r7, r5
   1343e:	e02f      	b.n	134a0 <ble_sm_pair_req_rx+0x112>
        } else if (req->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   13440:	78fb      	ldrb	r3, [r7, #3]
   13442:	2b06      	cmp	r3, #6
   13444:	d807      	bhi.n	13456 <ble_sm_pair_req_rx+0xc8>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   13446:	2306      	movs	r3, #6
   13448:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   1344a:	f240 4306 	movw	r3, #1030	; 0x406
   1344e:	6023      	str	r3, [r4, #0]
    key_size = 0;
   13450:	2500      	movs	r5, #0
    proc_flags = 0;
   13452:	462f      	mov	r7, r5
   13454:	e024      	b.n	134a0 <ble_sm_pair_req_rx+0x112>
        } else if (req->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   13456:	2b10      	cmp	r3, #16
   13458:	d907      	bls.n	1346a <ble_sm_pair_req_rx+0xdc>
            res->sm_err = BLE_SM_ERR_INVAL;
   1345a:	230a      	movs	r3, #10
   1345c:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   1345e:	f240 430a 	movw	r3, #1034	; 0x40a
   13462:	6023      	str	r3, [r4, #0]
    key_size = 0;
   13464:	2500      	movs	r5, #0
    proc_flags = 0;
   13466:	462f      	mov	r7, r5
   13468:	e01a      	b.n	134a0 <ble_sm_pair_req_rx+0x112>
        } else if (!ble_sm_verify_auth_requirements(req->authreq)) {
   1346a:	78b8      	ldrb	r0, [r7, #2]
   1346c:	f7ff f8e2 	bl	12634 <ble_sm_verify_auth_requirements>
   13470:	b938      	cbnz	r0, 13482 <ble_sm_pair_req_rx+0xf4>
            res->sm_err = BLE_SM_ERR_AUTHREQ;
   13472:	2303      	movs	r3, #3
   13474:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   13476:	f240 4303 	movw	r3, #1027	; 0x403
   1347a:	6023      	str	r3, [r4, #0]
    key_size = 0;
   1347c:	2500      	movs	r5, #0
    proc_flags = 0;
   1347e:	462f      	mov	r7, r5
   13480:	e00e      	b.n	134a0 <ble_sm_pair_req_rx+0x112>
            ble_sm_pair_rsp_fill(proc);
   13482:	4628      	mov	r0, r5
   13484:	f7ff f8c2 	bl	1260c <ble_sm_pair_rsp_fill>
            ble_sm_pair_cfg(proc);
   13488:	4628      	mov	r0, r5
   1348a:	f7ff f8f0 	bl	1266e <ble_sm_pair_cfg>
            proc_flags = proc->flags;
   1348e:	7a2f      	ldrb	r7, [r5, #8]
            key_size = proc->key_size;
   13490:	7bed      	ldrb	r5, [r5, #15]
            res->execute = 1;
   13492:	7d23      	ldrb	r3, [r4, #20]
   13494:	f043 0301 	orr.w	r3, r3, #1
   13498:	7523      	strb	r3, [r4, #20]
   1349a:	e001      	b.n	134a0 <ble_sm_pair_req_rx+0x112>
    key_size = 0;
   1349c:	2500      	movs	r5, #0
    proc_flags = 0;
   1349e:	462f      	mov	r7, r5
    ble_hs_unlock();
   134a0:	f7fc fb76 	bl	fb90 <ble_hs_unlock>
    if (res->app_status == 0) {
   134a4:	6823      	ldr	r3, [r4, #0]
   134a6:	2b00      	cmp	r3, #0
   134a8:	f47f af7c 	bne.w	133a4 <ble_sm_pair_req_rx+0x16>
        rc = ble_sm_chk_repeat_pairing(conn_handle, proc_flags, key_size);
   134ac:	462a      	mov	r2, r5
   134ae:	4639      	mov	r1, r7
   134b0:	4630      	mov	r0, r6
   134b2:	f7ff fd90 	bl	12fd6 <ble_sm_chk_repeat_pairing>
        if (rc != 0) {
   134b6:	2800      	cmp	r0, #0
   134b8:	f43f af74 	beq.w	133a4 <ble_sm_pair_req_rx+0x16>
            res->app_status = rc;
   134bc:	6020      	str	r0, [r4, #0]
            res->execute = 0;
   134be:	7d23      	ldrb	r3, [r4, #20]
   134c0:	f36f 0300 	bfc	r3, #0, #1
   134c4:	7523      	strb	r3, [r4, #20]
   134c6:	e76d      	b.n	133a4 <ble_sm_pair_req_rx+0x16>

000134c8 <ble_sm_ioact_state>:
    switch (action) {
   134c8:	3801      	subs	r0, #1
   134ca:	2804      	cmp	r0, #4
   134cc:	d804      	bhi.n	134d8 <ble_sm_ioact_state+0x10>
   134ce:	e8df f000 	tbb	[pc, r0]
   134d2:	0707      	.short	0x0707
   134d4:	0907      	.short	0x0907
   134d6:	05          	.byte	0x05
   134d7:	00          	.byte	0x00
        return BLE_SM_PROC_STATE_NONE;
   134d8:	20ff      	movs	r0, #255	; 0xff
   134da:	4770      	bx	lr
        return BLE_SM_PROC_STATE_RANDOM;
   134dc:	2002      	movs	r0, #2
   134de:	4770      	bx	lr
        return BLE_SM_PROC_STATE_CONFIRM;
   134e0:	2001      	movs	r0, #1
   134e2:	4770      	bx	lr
        return BLE_SM_PROC_STATE_DHKEY_CHECK;
   134e4:	200a      	movs	r0, #10
}
   134e6:	4770      	bx	lr

000134e8 <ble_sm_proc_can_advance>:
{
   134e8:	b510      	push	{r4, lr}
   134ea:	b082      	sub	sp, #8
   134ec:	4604      	mov	r4, r0
    rc = ble_sm_io_action(proc, &ioact);
   134ee:	f10d 0107 	add.w	r1, sp, #7
   134f2:	f7ff f8b2 	bl	1265a <ble_sm_io_action>
    if (ble_sm_ioact_state(ioact) != proc->state) {
   134f6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   134fa:	f7ff ffe5 	bl	134c8 <ble_sm_ioact_state>
   134fe:	7b63      	ldrb	r3, [r4, #13]
   13500:	4298      	cmp	r0, r3
   13502:	d002      	beq.n	1350a <ble_sm_proc_can_advance+0x22>
        return 1;
   13504:	2001      	movs	r0, #1
}
   13506:	b002      	add	sp, #8
   13508:	bd10      	pop	{r4, pc}
    if (proc->flags & BLE_SM_PROC_F_IO_INJECTED &&
   1350a:	7a23      	ldrb	r3, [r4, #8]
   1350c:	f003 0306 	and.w	r3, r3, #6
   13510:	2b06      	cmp	r3, #6
   13512:	d001      	beq.n	13518 <ble_sm_proc_can_advance+0x30>
    return 0;
   13514:	2000      	movs	r0, #0
   13516:	e7f6      	b.n	13506 <ble_sm_proc_can_advance+0x1e>
        return 1;
   13518:	2001      	movs	r0, #1
   1351a:	e7f4      	b.n	13506 <ble_sm_proc_can_advance+0x1e>

0001351c <ble_sm_confirm_rx>:
{
   1351c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1351e:	b083      	sub	sp, #12
   13520:	4606      	mov	r6, r0
   13522:	460d      	mov	r5, r1
   13524:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   13526:	2110      	movs	r1, #16
   13528:	4628      	mov	r0, r5
   1352a:	f7fe f8b4 	bl	11696 <ble_hs_mbuf_pullup_base>
   1352e:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   13530:	b138      	cbz	r0, 13542 <ble_sm_confirm_rx+0x26>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13532:	2308      	movs	r3, #8
   13534:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   13536:	7d23      	ldrb	r3, [r4, #20]
   13538:	f043 0302 	orr.w	r3, r3, #2
   1353c:	7523      	strb	r3, [r4, #20]
}
   1353e:	b003      	add	sp, #12
   13540:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_confirm *)(*om)->om_data;
   13542:	682b      	ldr	r3, [r5, #0]
   13544:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   13546:	f7fc fb1f 	bl	fb88 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_CONFIRM, -1, NULL);
   1354a:	2300      	movs	r3, #0
   1354c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13550:	2101      	movs	r1, #1
   13552:	4630      	mov	r0, r6
   13554:	f7ff fdbe 	bl	130d4 <ble_sm_proc_find>
    if (proc == NULL) {
   13558:	4605      	mov	r5, r0
   1355a:	b1b0      	cbz	r0, 1358a <ble_sm_confirm_rx+0x6e>
        memcpy(proc->confirm_peer, cmd->value, 16);
   1355c:	683e      	ldr	r6, [r7, #0]
   1355e:	6878      	ldr	r0, [r7, #4]
   13560:	68b9      	ldr	r1, [r7, #8]
   13562:	68fa      	ldr	r2, [r7, #12]
   13564:	f8c5 602e 	str.w	r6, [r5, #46]	; 0x2e
   13568:	f8c5 0032 	str.w	r0, [r5, #50]	; 0x32
   1356c:	f8c5 1036 	str.w	r1, [r5, #54]	; 0x36
   13570:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   13574:	7a2b      	ldrb	r3, [r5, #8]
   13576:	f013 0f01 	tst.w	r3, #1
   1357a:	d00b      	beq.n	13594 <ble_sm_confirm_rx+0x78>
            proc->state = BLE_SM_PROC_STATE_RANDOM;
   1357c:	2302      	movs	r3, #2
   1357e:	736b      	strb	r3, [r5, #13]
            res->execute = 1;
   13580:	7d23      	ldrb	r3, [r4, #20]
   13582:	f043 0301 	orr.w	r3, r3, #1
   13586:	7523      	strb	r3, [r4, #20]
   13588:	e001      	b.n	1358e <ble_sm_confirm_rx+0x72>
        res->app_status = BLE_HS_ENOENT;
   1358a:	2305      	movs	r3, #5
   1358c:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   1358e:	f7fc faff 	bl	fb90 <ble_hs_unlock>
   13592:	e7d4      	b.n	1353e <ble_sm_confirm_rx+0x22>
            rc = ble_sm_io_action(proc, &ioact);
   13594:	f10d 0107 	add.w	r1, sp, #7
   13598:	4628      	mov	r0, r5
   1359a:	f7ff f85e 	bl	1265a <ble_sm_io_action>
            if (ble_sm_ioact_state(ioact) == proc->state) {
   1359e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   135a2:	f7ff ff91 	bl	134c8 <ble_sm_ioact_state>
   135a6:	7b6b      	ldrb	r3, [r5, #13]
   135a8:	4298      	cmp	r0, r3
   135aa:	d009      	beq.n	135c0 <ble_sm_confirm_rx+0xa4>
            if (ble_sm_proc_can_advance(proc)) {
   135ac:	4628      	mov	r0, r5
   135ae:	f7ff ff9b 	bl	134e8 <ble_sm_proc_can_advance>
   135b2:	2800      	cmp	r0, #0
   135b4:	d0eb      	beq.n	1358e <ble_sm_confirm_rx+0x72>
                res->execute = 1;
   135b6:	7d23      	ldrb	r3, [r4, #20]
   135b8:	f043 0301 	orr.w	r3, r3, #1
   135bc:	7523      	strb	r3, [r4, #20]
   135be:	e7e6      	b.n	1358e <ble_sm_confirm_rx+0x72>
                proc->flags |= BLE_SM_PROC_F_ADVANCE_ON_IO;
   135c0:	7a2b      	ldrb	r3, [r5, #8]
   135c2:	f043 0304 	orr.w	r3, r3, #4
   135c6:	722b      	strb	r3, [r5, #8]
   135c8:	e7f0      	b.n	135ac <ble_sm_confirm_rx+0x90>

000135ca <ble_sm_pair_rsp_rx>:
{
   135ca:	b5f0      	push	{r4, r5, r6, r7, lr}
   135cc:	b083      	sub	sp, #12
   135ce:	4606      	mov	r6, r0
   135d0:	460d      	mov	r5, r1
   135d2:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*rsp));
   135d4:	2106      	movs	r1, #6
   135d6:	4628      	mov	r0, r5
   135d8:	f7fe f85d 	bl	11696 <ble_hs_mbuf_pullup_base>
   135dc:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   135de:	b128      	cbz	r0, 135ec <ble_sm_pair_rsp_rx+0x22>
        res->enc_cb = 1;
   135e0:	7d23      	ldrb	r3, [r4, #20]
   135e2:	f043 0302 	orr.w	r3, r3, #2
   135e6:	7523      	strb	r3, [r4, #20]
}
   135e8:	b003      	add	sp, #12
   135ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_sm_pair_cmd *)(*om)->om_data;
   135ec:	682b      	ldr	r3, [r5, #0]
   135ee:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   135f0:	f7fc faca 	bl	fb88 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_PAIR, 1, NULL);
   135f4:	2300      	movs	r3, #0
   135f6:	2201      	movs	r2, #1
   135f8:	4619      	mov	r1, r3
   135fa:	4630      	mov	r0, r6
   135fc:	f7ff fd6a 	bl	130d4 <ble_sm_proc_find>
    if (proc != NULL) {
   13600:	4605      	mov	r5, r0
   13602:	b168      	cbz	r0, 13620 <ble_sm_pair_rsp_rx+0x56>
        proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   13604:	2302      	movs	r3, #2
   13606:	75c3      	strb	r3, [r0, #23]
        memcpy(proc->pair_rsp + 1, rsp, sizeof(*rsp));
   13608:	683b      	ldr	r3, [r7, #0]
   1360a:	6183      	str	r3, [r0, #24]
   1360c:	88bb      	ldrh	r3, [r7, #4]
   1360e:	8383      	strh	r3, [r0, #28]
        if (rsp->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   13610:	78fb      	ldrb	r3, [r7, #3]
   13612:	2b06      	cmp	r3, #6
   13614:	d807      	bhi.n	13626 <ble_sm_pair_rsp_rx+0x5c>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   13616:	2306      	movs	r3, #6
   13618:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   1361a:	f240 4306 	movw	r3, #1030	; 0x406
   1361e:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   13620:	f7fc fab6 	bl	fb90 <ble_hs_unlock>
   13624:	e7e0      	b.n	135e8 <ble_sm_pair_rsp_rx+0x1e>
        } else if (rsp->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   13626:	2b10      	cmp	r3, #16
   13628:	d905      	bls.n	13636 <ble_sm_pair_rsp_rx+0x6c>
            res->sm_err = BLE_SM_ERR_INVAL;
   1362a:	230a      	movs	r3, #10
   1362c:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   1362e:	f240 430a 	movw	r3, #1034	; 0x40a
   13632:	6023      	str	r3, [r4, #0]
   13634:	e7f4      	b.n	13620 <ble_sm_pair_rsp_rx+0x56>
            ble_sm_pair_cfg(proc);
   13636:	f7ff f81a 	bl	1266e <ble_sm_pair_cfg>
            rc = ble_sm_io_action(proc, &ioact);
   1363a:	f10d 0107 	add.w	r1, sp, #7
   1363e:	4628      	mov	r0, r5
   13640:	f7ff f80b 	bl	1265a <ble_sm_io_action>
            if (rc != 0) {
   13644:	b148      	cbz	r0, 1365a <ble_sm_pair_rsp_rx+0x90>
                res->sm_err = BLE_SM_ERR_AUTHREQ;
   13646:	2303      	movs	r3, #3
   13648:	7123      	strb	r3, [r4, #4]
                res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   1364a:	f240 4303 	movw	r3, #1027	; 0x403
   1364e:	6023      	str	r3, [r4, #0]
                res->enc_cb = 1;
   13650:	7d23      	ldrb	r3, [r4, #20]
   13652:	f043 0302 	orr.w	r3, r3, #2
   13656:	7523      	strb	r3, [r4, #20]
   13658:	e7e2      	b.n	13620 <ble_sm_pair_rsp_rx+0x56>
                proc->state = ble_sm_state_after_pair(proc);
   1365a:	4628      	mov	r0, r5
   1365c:	f7fe ffac 	bl	125b8 <ble_sm_state_after_pair>
   13660:	4606      	mov	r6, r0
   13662:	7368      	strb	r0, [r5, #13]
                if (ble_sm_ioact_state(ioact) == proc->state) {
   13664:	f89d 7007 	ldrb.w	r7, [sp, #7]
   13668:	4638      	mov	r0, r7
   1366a:	f7ff ff2d 	bl	134c8 <ble_sm_ioact_state>
   1366e:	42b0      	cmp	r0, r6
   13670:	d009      	beq.n	13686 <ble_sm_pair_rsp_rx+0xbc>
                if (ble_sm_proc_can_advance(proc)) {
   13672:	4628      	mov	r0, r5
   13674:	f7ff ff38 	bl	134e8 <ble_sm_proc_can_advance>
   13678:	2800      	cmp	r0, #0
   1367a:	d0d1      	beq.n	13620 <ble_sm_pair_rsp_rx+0x56>
                    res->execute = 1;
   1367c:	7d23      	ldrb	r3, [r4, #20]
   1367e:	f043 0301 	orr.w	r3, r3, #1
   13682:	7523      	strb	r3, [r4, #20]
   13684:	e7cc      	b.n	13620 <ble_sm_pair_rsp_rx+0x56>
                    res->passkey_params.action = ioact;
   13686:	7227      	strb	r7, [r4, #8]
   13688:	e7f3      	b.n	13672 <ble_sm_pair_rsp_rx+0xa8>

0001368a <ble_sm_process_result>:
{
   1368a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1368c:	b083      	sub	sp, #12
   1368e:	4607      	mov	r7, r0
   13690:	460c      	mov	r4, r1
    rm = 0;
   13692:	2600      	movs	r6, #0
   13694:	e02f      	b.n	136f6 <ble_sm_process_result+0x6c>
                ble_sm_exec(proc, res, res->state_arg);
   13696:	6922      	ldr	r2, [r4, #16]
   13698:	4621      	mov	r1, r4
   1369a:	f7ff f855 	bl	12748 <ble_sm_exec>
   1369e:	e039      	b.n	13714 <ble_sm_process_result+0x8a>
                rm = 1;
   136a0:	2601      	movs	r6, #1
   136a2:	e03f      	b.n	13724 <ble_sm_process_result+0x9a>
                ble_sm_proc_set_timer(proc);
   136a4:	4628      	mov	r0, r5
   136a6:	f7ff fb64 	bl	12d72 <ble_sm_proc_set_timer>
   136aa:	e03f      	b.n	1372c <ble_sm_process_result+0xa2>
            ble_sm_pair_fail_tx(conn_handle, res->sm_err);
   136ac:	4638      	mov	r0, r7
   136ae:	f7ff f882 	bl	127b6 <ble_sm_pair_fail_tx>
   136b2:	e03e      	b.n	13732 <ble_sm_process_result+0xa8>
            ble_gap_enc_event(conn_handle, res->app_status, res->restore, res->bonded);
   136b4:	461a      	mov	r2, r3
   136b6:	f3c3 0380 	ubfx	r3, r3, #2, #1
   136ba:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   136be:	6821      	ldr	r1, [r4, #0]
   136c0:	4638      	mov	r0, r7
   136c2:	f7fa f974 	bl	d9ae <ble_gap_enc_event>
   136c6:	e03b      	b.n	13740 <ble_sm_process_result+0xb6>
            ble_gap_passkey_event(conn_handle, &res->passkey_params);
   136c8:	f104 0108 	add.w	r1, r4, #8
   136cc:	4638      	mov	r0, r7
   136ce:	f7fa f955 	bl	d97c <ble_gap_passkey_event>
   136d2:	e03a      	b.n	1374a <ble_sm_process_result+0xc0>
        if (rm) {
   136d4:	2e00      	cmp	r6, #0
   136d6:	d145      	bne.n	13764 <ble_sm_process_result+0xda>
        if (!res->execute) {
   136d8:	7d23      	ldrb	r3, [r4, #20]
   136da:	f013 0f01 	tst.w	r3, #1
   136de:	d044      	beq.n	1376a <ble_sm_process_result+0xe0>
        memset(res, 0, sizeof *res);
   136e0:	2300      	movs	r3, #0
   136e2:	6023      	str	r3, [r4, #0]
   136e4:	6063      	str	r3, [r4, #4]
   136e6:	60a3      	str	r3, [r4, #8]
   136e8:	60e3      	str	r3, [r4, #12]
   136ea:	6123      	str	r3, [r4, #16]
   136ec:	6163      	str	r3, [r4, #20]
        res->execute = 1;
   136ee:	7d23      	ldrb	r3, [r4, #20]
   136f0:	f043 0301 	orr.w	r3, r3, #1
   136f4:	7523      	strb	r3, [r4, #20]
        ble_hs_lock();
   136f6:	f7fc fa47 	bl	fb88 <ble_hs_lock>
        proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1,
   136fa:	ab01      	add	r3, sp, #4
   136fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13700:	21ff      	movs	r1, #255	; 0xff
   13702:	4638      	mov	r0, r7
   13704:	f7ff fce6 	bl	130d4 <ble_sm_proc_find>
        if (proc != NULL) {
   13708:	4605      	mov	r5, r0
   1370a:	b178      	cbz	r0, 1372c <ble_sm_process_result+0xa2>
            if (res->execute) {
   1370c:	7d23      	ldrb	r3, [r4, #20]
   1370e:	f013 0f01 	tst.w	r3, #1
   13712:	d1c0      	bne.n	13696 <ble_sm_process_result+0xc>
            if (res->app_status != 0) {
   13714:	6823      	ldr	r3, [r4, #0]
   13716:	b103      	cbz	r3, 1371a <ble_sm_process_result+0x90>
                rm = 1;
   13718:	2601      	movs	r6, #1
            if (proc->state == BLE_SM_PROC_STATE_NONE) {
   1371a:	7b6b      	ldrb	r3, [r5, #13]
   1371c:	2bff      	cmp	r3, #255	; 0xff
   1371e:	d0bf      	beq.n	136a0 <ble_sm_process_result+0x16>
            if (rm) {
   13720:	2e00      	cmp	r6, #0
   13722:	d0bf      	beq.n	136a4 <ble_sm_process_result+0x1a>
                ble_sm_proc_remove(proc, prev);
   13724:	9901      	ldr	r1, [sp, #4]
   13726:	4628      	mov	r0, r5
   13728:	f7fe fecc 	bl	124c4 <ble_sm_proc_remove>
        if (res->sm_err != 0) {
   1372c:	7921      	ldrb	r1, [r4, #4]
   1372e:	2900      	cmp	r1, #0
   13730:	d1bc      	bne.n	136ac <ble_sm_process_result+0x22>
        ble_hs_unlock();
   13732:	f7fc fa2d 	bl	fb90 <ble_hs_unlock>
        if (proc == NULL) {
   13736:	b1c5      	cbz	r5, 1376a <ble_sm_process_result+0xe0>
        if (res->enc_cb) {
   13738:	7d23      	ldrb	r3, [r4, #20]
   1373a:	f013 0f02 	tst.w	r3, #2
   1373e:	d1b9      	bne.n	136b4 <ble_sm_process_result+0x2a>
        if (res->app_status == 0 &&
   13740:	6823      	ldr	r3, [r4, #0]
   13742:	b913      	cbnz	r3, 1374a <ble_sm_process_result+0xc0>
            res->passkey_params.action != BLE_SM_IOACT_NONE) {
   13744:	7a23      	ldrb	r3, [r4, #8]
        if (res->app_status == 0 &&
   13746:	2b00      	cmp	r3, #0
   13748:	d1be      	bne.n	136c8 <ble_sm_process_result+0x3e>
        if (res->app_status == 0    &&
   1374a:	6823      	ldr	r3, [r4, #0]
   1374c:	2b00      	cmp	r3, #0
   1374e:	d1c1      	bne.n	136d4 <ble_sm_process_result+0x4a>
   13750:	2e00      	cmp	r6, #0
   13752:	d0bf      	beq.n	136d4 <ble_sm_process_result+0x4a>
            proc->flags & BLE_SM_PROC_F_BONDING) {
   13754:	7a2b      	ldrb	r3, [r5, #8]
            rm                      &&
   13756:	f013 0f20 	tst.w	r3, #32
   1375a:	d0bb      	beq.n	136d4 <ble_sm_process_result+0x4a>
            ble_sm_persist_keys(proc);
   1375c:	4628      	mov	r0, r5
   1375e:	f7ff fb4b 	bl	12df8 <ble_sm_persist_keys>
   13762:	e7b7      	b.n	136d4 <ble_sm_process_result+0x4a>
            ble_sm_proc_free(proc);
   13764:	4628      	mov	r0, r5
   13766:	f7ff fbbb 	bl	12ee0 <ble_sm_proc_free>
}
   1376a:	b003      	add	sp, #12
   1376c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001376e <ble_sm_enc_event_rx>:
{
   1376e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13772:	b088      	sub	sp, #32
   13774:	4606      	mov	r6, r0
   13776:	460d      	mov	r5, r1
   13778:	4690      	mov	r8, r2
    memset(&res, 0, sizeof res);
   1377a:	2400      	movs	r4, #0
   1377c:	9402      	str	r4, [sp, #8]
   1377e:	9403      	str	r4, [sp, #12]
   13780:	9404      	str	r4, [sp, #16]
   13782:	9405      	str	r4, [sp, #20]
   13784:	9406      	str	r4, [sp, #24]
   13786:	9407      	str	r4, [sp, #28]
    ble_hs_lock();
   13788:	f7fc f9fe 	bl	fb88 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   1378c:	4623      	mov	r3, r4
   1378e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13792:	21ff      	movs	r1, #255	; 0xff
   13794:	4630      	mov	r0, r6
   13796:	f7ff fc9d 	bl	130d4 <ble_sm_proc_find>
    if (proc != NULL) {
   1379a:	4604      	mov	r4, r0
   1379c:	2800      	cmp	r0, #0
   1379e:	d03a      	beq.n	13816 <ble_sm_enc_event_rx+0xa8>
        switch (proc->state) {
   137a0:	7b43      	ldrb	r3, [r0, #13]
   137a2:	2b05      	cmp	r3, #5
   137a4:	d00a      	beq.n	137bc <ble_sm_enc_event_rx+0x4e>
   137a6:	2b06      	cmp	r3, #6
   137a8:	d023      	beq.n	137f2 <ble_sm_enc_event_rx+0x84>
            proc->state = BLE_SM_PROC_STATE_NONE;
   137aa:	23ff      	movs	r3, #255	; 0xff
   137ac:	7343      	strb	r3, [r0, #13]
            res.sm_err = BLE_SM_ERR_UNSPECIFIED;
   137ae:	2308      	movs	r3, #8
   137b0:	f88d 300c 	strb.w	r3, [sp, #12]
    key_size = 0;
   137b4:	2300      	movs	r3, #0
    bonded = 0;
   137b6:	461f      	mov	r7, r3
    authenticated = 0;
   137b8:	461a      	mov	r2, r3
            break;
   137ba:	e02f      	b.n	1381c <ble_sm_enc_event_rx+0xae>
            if (evt_status == 0) {
   137bc:	b9ad      	cbnz	r5, 137ea <ble_sm_enc_event_rx+0x7c>
                proc->state = BLE_SM_PROC_STATE_KEY_EXCH;
   137be:	2307      	movs	r3, #7
   137c0:	7343      	strb	r3, [r0, #13]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   137c2:	7a03      	ldrb	r3, [r0, #8]
   137c4:	f013 0f01 	tst.w	r3, #1
   137c8:	d001      	beq.n	137ce <ble_sm_enc_event_rx+0x60>
                    proc->rx_key_flags == 0) {
   137ca:	7b83      	ldrb	r3, [r0, #14]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   137cc:	b92b      	cbnz	r3, 137da <ble_sm_enc_event_rx+0x6c>
                    res.execute = 1;
   137ce:	f89d 301c 	ldrb.w	r3, [sp, #28]
   137d2:	f043 0301 	orr.w	r3, r3, #1
   137d6:	f88d 301c 	strb.w	r3, [sp, #28]
                key_size = proc->key_size;
   137da:	7be3      	ldrb	r3, [r4, #15]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   137dc:	7a22      	ldrb	r2, [r4, #8]
   137de:	f012 0f08 	tst.w	r2, #8
   137e2:	d139      	bne.n	13858 <ble_sm_enc_event_rx+0xea>
    bonded = 0;
   137e4:	2700      	movs	r7, #0
    authenticated = 0;
   137e6:	463a      	mov	r2, r7
   137e8:	e018      	b.n	1381c <ble_sm_enc_event_rx+0xae>
                proc->state = BLE_SM_PROC_STATE_NONE;
   137ea:	23ff      	movs	r3, #255	; 0xff
   137ec:	7343      	strb	r3, [r0, #13]
    key_size = 0;
   137ee:	2300      	movs	r3, #0
   137f0:	e7f4      	b.n	137dc <ble_sm_enc_event_rx+0x6e>
            proc->state = BLE_SM_PROC_STATE_NONE;
   137f2:	23ff      	movs	r3, #255	; 0xff
   137f4:	7343      	strb	r3, [r0, #13]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   137f6:	7a03      	ldrb	r3, [r0, #8]
   137f8:	f013 0f08 	tst.w	r3, #8
   137fc:	d109      	bne.n	13812 <ble_sm_enc_event_rx+0xa4>
    authenticated = 0;
   137fe:	2200      	movs	r2, #0
            res.restore = 1;
   13800:	f89d 301c 	ldrb.w	r3, [sp, #28]
   13804:	f043 0308 	orr.w	r3, r3, #8
   13808:	f88d 301c 	strb.w	r3, [sp, #28]
            key_size = proc->key_size;
   1380c:	7be3      	ldrb	r3, [r4, #15]
            bonded = 1;
   1380e:	2701      	movs	r7, #1
            break;
   13810:	e004      	b.n	1381c <ble_sm_enc_event_rx+0xae>
                authenticated = 1;
   13812:	2201      	movs	r2, #1
   13814:	e7f4      	b.n	13800 <ble_sm_enc_event_rx+0x92>
    key_size = 0;
   13816:	2300      	movs	r3, #0
    bonded = 0;
   13818:	461f      	mov	r7, r3
    authenticated = 0;
   1381a:	461a      	mov	r2, r3
    if (evt_status == 0) {
   1381c:	b1fd      	cbz	r5, 1385e <ble_sm_enc_event_rx+0xf0>
    if (proc == NULL || proc->state == BLE_SM_PROC_STATE_NONE) {
   1381e:	b114      	cbz	r4, 13826 <ble_sm_enc_event_rx+0xb8>
   13820:	7b63      	ldrb	r3, [r4, #13]
   13822:	2bff      	cmp	r3, #255	; 0xff
   13824:	d109      	bne.n	1383a <ble_sm_enc_event_rx+0xcc>
        res.enc_cb = 1;
   13826:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1382a:	f043 0302 	orr.w	r3, r3, #2
   1382e:	f88d 301c 	strb.w	r3, [sp, #28]
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   13832:	b1dd      	cbz	r5, 1386c <ble_sm_enc_event_rx+0xfe>
   13834:	f505 7500 	add.w	r5, r5, #512	; 0x200
   13838:	9502      	str	r5, [sp, #8]
    ble_hs_unlock();
   1383a:	f7fc f9a9 	bl	fb90 <ble_hs_unlock>
    res.bonded = bonded;
   1383e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   13842:	f367 0382 	bfi	r3, r7, #2, #1
   13846:	f88d 301c 	strb.w	r3, [sp, #28]
    ble_sm_process_result(conn_handle, &res);
   1384a:	a902      	add	r1, sp, #8
   1384c:	4630      	mov	r0, r6
   1384e:	f7ff ff1c 	bl	1368a <ble_sm_process_result>
}
   13852:	b008      	add	sp, #32
   13854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bonded = 0;
   13858:	2700      	movs	r7, #0
                authenticated = 1;
   1385a:	2201      	movs	r2, #1
   1385c:	e7de      	b.n	1381c <ble_sm_enc_event_rx+0xae>
        ble_sm_update_sec_state(conn_handle, encrypted, authenticated, bonded,
   1385e:	9300      	str	r3, [sp, #0]
   13860:	463b      	mov	r3, r7
   13862:	4641      	mov	r1, r8
   13864:	4630      	mov	r0, r6
   13866:	f7ff f82a 	bl	128be <ble_sm_update_sec_state>
   1386a:	e7d8      	b.n	1381e <ble_sm_enc_event_rx+0xb0>
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   1386c:	2500      	movs	r5, #0
   1386e:	e7e3      	b.n	13838 <ble_sm_enc_event_rx+0xca>

00013870 <ble_sm_rx>:
    return res.app_status;
}

static int
ble_sm_rx(struct ble_l2cap_chan *chan)
{
   13870:	b570      	push	{r4, r5, r6, lr}
   13872:	b088      	sub	sp, #32
   13874:	4604      	mov	r4, r0
    struct os_mbuf **om;
    int rc;

    STATS_INC(ble_l2cap_stats, sm_rx);

    conn_handle = ble_l2cap_get_conn_handle(chan);
   13876:	f7fe fa9c 	bl	11db2 <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   1387a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1387e:	4298      	cmp	r0, r3
   13880:	d025      	beq.n	138ce <ble_sm_rx+0x5e>
   13882:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   13884:	f104 0610 	add.w	r6, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   13888:	f10d 0307 	add.w	r3, sp, #7
   1388c:	2201      	movs	r2, #1
   1388e:	2100      	movs	r1, #0
   13890:	6920      	ldr	r0, [r4, #16]
   13892:	f7f6 fe19 	bl	a4c8 <os_mbuf_copydata>
    if (rc != 0) {
   13896:	b9e0      	cbnz	r0, 138d2 <ble_sm_rx+0x62>
        return BLE_HS_EBADDATA;
    }

    /* Strip L2CAP SM header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   13898:	2101      	movs	r1, #1
   1389a:	6920      	ldr	r0, [r4, #16]
   1389c:	f7f6 fe41 	bl	a522 <os_mbuf_adj>

    rx_cb = ble_sm_dispatch_get(op);
   138a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   138a4:	f7fe fe04 	bl	124b0 <ble_sm_dispatch_get>
    if (rx_cb != NULL) {
   138a8:	4604      	mov	r4, r0
   138aa:	b1a8      	cbz	r0, 138d8 <ble_sm_rx+0x68>
        memset(&res, 0, sizeof res);
   138ac:	2300      	movs	r3, #0
   138ae:	9302      	str	r3, [sp, #8]
   138b0:	9303      	str	r3, [sp, #12]
   138b2:	9304      	str	r3, [sp, #16]
   138b4:	9305      	str	r3, [sp, #20]
   138b6:	9306      	str	r3, [sp, #24]
   138b8:	9307      	str	r3, [sp, #28]

        rx_cb(conn_handle, om, &res);
   138ba:	aa02      	add	r2, sp, #8
   138bc:	4631      	mov	r1, r6
   138be:	4628      	mov	r0, r5
   138c0:	47a0      	blx	r4
        ble_sm_process_result(conn_handle, &res);
   138c2:	a902      	add	r1, sp, #8
   138c4:	4628      	mov	r0, r5
   138c6:	f7ff fee0 	bl	1368a <ble_sm_process_result>
        rc = res.app_status;
   138ca:	9802      	ldr	r0, [sp, #8]
   138cc:	e002      	b.n	138d4 <ble_sm_rx+0x64>
        return BLE_HS_ENOTCONN;
   138ce:	2007      	movs	r0, #7
   138d0:	e000      	b.n	138d4 <ble_sm_rx+0x64>
        return BLE_HS_EBADDATA;
   138d2:	200a      	movs	r0, #10
    } else {
        rc = BLE_HS_ENOTSUP;
    }

    return rc;
}
   138d4:	b008      	add	sp, #32
   138d6:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   138d8:	2008      	movs	r0, #8
   138da:	e7fb      	b.n	138d4 <ble_sm_rx+0x64>

000138dc <ble_sm_enc_change_rx>:
{
   138dc:	b508      	push	{r3, lr}
                        ev->enabled & 0x01);
   138de:	78c2      	ldrb	r2, [r0, #3]
    ble_sm_enc_event_rx(le16toh(ev->connection_handle), ev->status,
   138e0:	f002 0201 	and.w	r2, r2, #1
   138e4:	7801      	ldrb	r1, [r0, #0]
   138e6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   138ea:	f7ff ff40 	bl	1376e <ble_sm_enc_event_rx>
}
   138ee:	bd08      	pop	{r3, pc}

000138f0 <ble_sm_enc_key_refresh_rx>:
{
   138f0:	b508      	push	{r3, lr}
    ble_sm_enc_event_rx(le16toh(ev->conn_handle), ev->status, 1);
   138f2:	2201      	movs	r2, #1
   138f4:	7801      	ldrb	r1, [r0, #0]
   138f6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   138fa:	f7ff ff38 	bl	1376e <ble_sm_enc_event_rx>
}
   138fe:	bd08      	pop	{r3, pc}

00013900 <ble_sm_ltk_req_rx>:
{
   13900:	b5f0      	push	{r4, r5, r6, r7, lr}
   13902:	b0a9      	sub	sp, #164	; 0xa4
   13904:	4606      	mov	r6, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   13906:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   1390a:	b2bd      	uxth	r5, r7
    memset(&res, 0, sizeof res);
   1390c:	2400      	movs	r4, #0
   1390e:	9407      	str	r4, [sp, #28]
   13910:	9408      	str	r4, [sp, #32]
   13912:	9409      	str	r4, [sp, #36]	; 0x24
   13914:	940a      	str	r4, [sp, #40]	; 0x28
   13916:	940b      	str	r4, [sp, #44]	; 0x2c
   13918:	940c      	str	r4, [sp, #48]	; 0x30
    ble_hs_lock();
   1391a:	f7fc f935 	bl	fb88 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, 0, NULL);
   1391e:	4623      	mov	r3, r4
   13920:	4622      	mov	r2, r4
   13922:	21ff      	movs	r1, #255	; 0xff
   13924:	4628      	mov	r0, r5
   13926:	f7ff fbd5 	bl	130d4 <ble_sm_proc_find>
    if (proc == NULL) {
   1392a:	b168      	cbz	r0, 13948 <ble_sm_ltk_req_rx+0x48>
   1392c:	4604      	mov	r4, r0
    } else if (proc->state == BLE_SM_PROC_STATE_SEC_REQ) {
   1392e:	7b43      	ldrb	r3, [r0, #13]
   13930:	2b08      	cmp	r3, #8
   13932:	d01c      	beq.n	1396e <ble_sm_ltk_req_rx+0x6e>
    } else if (proc->state == BLE_SM_PROC_STATE_LTK_START) {
   13934:	2b03      	cmp	r3, #3
   13936:	d13c      	bne.n	139b2 <ble_sm_ltk_req_rx+0xb2>
        res.execute = 1;
   13938:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1393c:	f043 0301 	orr.w	r3, r3, #1
   13940:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        restore = 0;
   13944:	2700      	movs	r7, #0
   13946:	e027      	b.n	13998 <ble_sm_ltk_req_rx+0x98>
        proc = ble_sm_proc_alloc();
   13948:	f7ff fad4 	bl	12ef4 <ble_sm_proc_alloc>
        if (proc == NULL) {
   1394c:	4604      	mov	r4, r0
   1394e:	b158      	cbz	r0, 13968 <ble_sm_ltk_req_rx+0x68>
            proc->conn_handle = conn_handle;
   13950:	8147      	strh	r7, [r0, #10]
            proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   13952:	2304      	movs	r3, #4
   13954:	7343      	strb	r3, [r0, #13]
            ble_sm_insert(proc);
   13956:	f7fe fde7 	bl	12528 <ble_sm_insert>
            res.execute = 1;
   1395a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1395e:	f043 0301 	orr.w	r3, r3, #1
   13962:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   13966:	e00a      	b.n	1397e <ble_sm_ltk_req_rx+0x7e>
            res.app_status = BLE_HS_ENOMEM;
   13968:	2306      	movs	r3, #6
   1396a:	9307      	str	r3, [sp, #28]
   1396c:	e007      	b.n	1397e <ble_sm_ltk_req_rx+0x7e>
        proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   1396e:	2304      	movs	r3, #4
   13970:	7343      	strb	r3, [r0, #13]
        res.execute = 1;
   13972:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13976:	f043 0301 	orr.w	r3, r3, #1
   1397a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        conn = ble_hs_conn_find_assert(conn_handle);
   1397e:	4628      	mov	r0, r5
   13980:	f7fc ff24 	bl	107cc <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   13984:	a90d      	add	r1, sp, #52	; 0x34
   13986:	f7fc ff41 	bl	1080c <ble_hs_conn_addrs>
        memcpy(peer_id_addr, addrs.peer_id_addr.val, 6);
   1398a:	ab0f      	add	r3, sp, #60	; 0x3c
   1398c:	e893 0003 	ldmia.w	r3, {r0, r1}
   13990:	9005      	str	r0, [sp, #20]
   13992:	f8ad 1018 	strh.w	r1, [sp, #24]
   13996:	2701      	movs	r7, #1
    ble_hs_unlock();
   13998:	f7fc f8fa 	bl	fb90 <ble_hs_unlock>
    if (proc == NULL) {
   1399c:	b17c      	cbz	r4, 139be <ble_sm_ltk_req_rx+0xbe>
    if (res.app_status == 0) {
   1399e:	9b07      	ldr	r3, [sp, #28]
   139a0:	b903      	cbnz	r3, 139a4 <ble_sm_ltk_req_rx+0xa4>
        if (restore) {
   139a2:	b977      	cbnz	r7, 139c2 <ble_sm_ltk_req_rx+0xc2>
    ble_sm_process_result(conn_handle, &res);
   139a4:	a907      	add	r1, sp, #28
   139a6:	4628      	mov	r0, r5
   139a8:	f7ff fe6f 	bl	1368a <ble_sm_process_result>
    return 0;
   139ac:	2000      	movs	r0, #0
}
   139ae:	b029      	add	sp, #164	; 0xa4
   139b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ble_sm_ltk_req_neg_reply_tx(conn_handle);
   139b2:	4628      	mov	r0, r5
   139b4:	f7ff f98c 	bl	12cd0 <ble_sm_ltk_req_neg_reply_tx>
        restore = 0;
   139b8:	2700      	movs	r7, #0
        proc = NULL;
   139ba:	463c      	mov	r4, r7
   139bc:	e7ec      	b.n	13998 <ble_sm_ltk_req_rx+0x98>
        return res.app_status;
   139be:	9807      	ldr	r0, [sp, #28]
   139c0:	e7f5      	b.n	139ae <ble_sm_ltk_req_rx+0xae>
            store_rc = ble_sm_retrieve_ltk(le16toh(ev->div), le64toh(ev->rand),
   139c2:	f8b6 000b 	ldrh.w	r0, [r6, #11]
   139c6:	f8d6 2003 	ldr.w	r2, [r6, #3]
   139ca:	f8d6 3007 	ldr.w	r3, [r6, #7]
   139ce:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   139d2:	ac14      	add	r4, sp, #80	; 0x50
   139d4:	9402      	str	r4, [sp, #8]
   139d6:	ac05      	add	r4, sp, #20
   139d8:	9401      	str	r4, [sp, #4]
   139da:	9100      	str	r1, [sp, #0]
   139dc:	f7ff fa9a 	bl	12f14 <ble_sm_retrieve_ltk>
            if (store_rc == 0) {
   139e0:	b910      	cbnz	r0, 139e8 <ble_sm_ltk_req_rx+0xe8>
                res.state_arg = &value_sec;
   139e2:	ab14      	add	r3, sp, #80	; 0x50
   139e4:	930b      	str	r3, [sp, #44]	; 0x2c
   139e6:	e7dd      	b.n	139a4 <ble_sm_ltk_req_rx+0xa4>
                res.state_arg = NULL;
   139e8:	2300      	movs	r3, #0
   139ea:	930b      	str	r3, [sp, #44]	; 0x2c
   139ec:	e7da      	b.n	139a4 <ble_sm_ltk_req_rx+0xa4>

000139ee <ble_sm_our_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   139ee:	7a03      	ldrb	r3, [r0, #8]
   139f0:	f013 0f01 	tst.w	r3, #1
   139f4:	d101      	bne.n	139fa <ble_sm_our_pair_rand+0xc>
        return proc->rands;
   139f6:	304e      	adds	r0, #78	; 0x4e
}
   139f8:	4770      	bx	lr
        return proc->randm;
   139fa:	303e      	adds	r0, #62	; 0x3e
   139fc:	4770      	bx	lr

000139fe <ble_sm_pair_exec>:
{
   139fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   13a00:	b083      	sub	sp, #12
   13a02:	4605      	mov	r5, r0
   13a04:	460e      	mov	r6, r1
    is_req = proc->flags & BLE_SM_PROC_F_INITIATOR;
   13a06:	7a03      	ldrb	r3, [r0, #8]
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   13a08:	f013 0401 	ands.w	r4, r3, #1
   13a0c:	d01d      	beq.n	13a4a <ble_sm_pair_exec+0x4c>
   13a0e:	2001      	movs	r0, #1
   13a10:	aa01      	add	r2, sp, #4
   13a12:	2106      	movs	r1, #6
   13a14:	f000 f9ea 	bl	13dec <ble_sm_cmd_get>
    if (cmd == NULL) {
   13a18:	4607      	mov	r7, r0
   13a1a:	2800      	cmp	r0, #0
   13a1c:	d03f      	beq.n	13a9e <ble_sm_pair_exec+0xa0>
    if (is_req) {
   13a1e:	b1b4      	cbz	r4, 13a4e <ble_sm_pair_exec+0x50>
        ble_sm_pair_req_fill(proc);
   13a20:	4628      	mov	r0, r5
   13a22:	f7fe fde3 	bl	125ec <ble_sm_pair_req_fill>
        memcpy(cmd, proc->pair_req + 1, sizeof(*cmd));
   13a26:	462b      	mov	r3, r5
   13a28:	f853 2f11 	ldr.w	r2, [r3, #17]!
   13a2c:	603a      	str	r2, [r7, #0]
   13a2e:	889b      	ldrh	r3, [r3, #4]
   13a30:	80bb      	strh	r3, [r7, #4]
    rc = ble_sm_tx(proc->conn_handle, txom);
   13a32:	9901      	ldr	r1, [sp, #4]
   13a34:	8968      	ldrh	r0, [r5, #10]
   13a36:	f000 f9f3 	bl	13e20 <ble_sm_tx>
    if (rc != 0) {
   13a3a:	4603      	mov	r3, r0
   13a3c:	b300      	cbz	r0, 13a80 <ble_sm_pair_exec+0x82>
    res->app_status = rc;
   13a3e:	6033      	str	r3, [r6, #0]
    if (!is_req) {
   13a40:	b90c      	cbnz	r4, 13a46 <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13a42:	2308      	movs	r3, #8
   13a44:	7133      	strb	r3, [r6, #4]
}
   13a46:	b003      	add	sp, #12
   13a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   13a4a:	2002      	movs	r0, #2
   13a4c:	e7e0      	b.n	13a10 <ble_sm_pair_exec+0x12>
        memcpy(cmd, proc->pair_rsp + 1, sizeof(*cmd));
   13a4e:	462b      	mov	r3, r5
   13a50:	f853 2f18 	ldr.w	r2, [r3, #24]!
   13a54:	6002      	str	r2, [r0, #0]
   13a56:	889b      	ldrh	r3, [r3, #4]
   13a58:	8083      	strh	r3, [r0, #4]
        proc->state = ble_sm_state_after_pair(proc);
   13a5a:	4628      	mov	r0, r5
   13a5c:	f7fe fdac 	bl	125b8 <ble_sm_state_after_pair>
   13a60:	7368      	strb	r0, [r5, #13]
        rc = ble_sm_io_action(proc, &ioact);
   13a62:	f10d 0103 	add.w	r1, sp, #3
   13a66:	4628      	mov	r0, r5
   13a68:	f7fe fdf7 	bl	1265a <ble_sm_io_action>
        if (ble_sm_ioact_state(ioact) == proc->state) {
   13a6c:	f89d 7003 	ldrb.w	r7, [sp, #3]
   13a70:	4638      	mov	r0, r7
   13a72:	f7ff fd29 	bl	134c8 <ble_sm_ioact_state>
   13a76:	7b6b      	ldrb	r3, [r5, #13]
   13a78:	4298      	cmp	r0, r3
   13a7a:	d1da      	bne.n	13a32 <ble_sm_pair_exec+0x34>
            res->passkey_params.action = ioact;
   13a7c:	7237      	strb	r7, [r6, #8]
   13a7e:	e7d8      	b.n	13a32 <ble_sm_pair_exec+0x34>
    res->app_status = ble_sm_gen_pair_rand(ble_sm_our_pair_rand(proc));
   13a80:	4628      	mov	r0, r5
   13a82:	f7ff ffb4 	bl	139ee <ble_sm_our_pair_rand>
   13a86:	f7ff fae4 	bl	13052 <ble_sm_gen_pair_rand>
   13a8a:	6030      	str	r0, [r6, #0]
    if (res->app_status != 0) {
   13a8c:	2800      	cmp	r0, #0
   13a8e:	d0da      	beq.n	13a46 <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13a90:	2308      	movs	r3, #8
   13a92:	7133      	strb	r3, [r6, #4]
        res->enc_cb = 1;
   13a94:	7d33      	ldrb	r3, [r6, #20]
   13a96:	f043 0302 	orr.w	r3, r3, #2
   13a9a:	7533      	strb	r3, [r6, #20]
        return;
   13a9c:	e7d3      	b.n	13a46 <ble_sm_pair_exec+0x48>
        rc = BLE_HS_ENOMEM;
   13a9e:	2306      	movs	r3, #6
   13aa0:	e7cd      	b.n	13a3e <ble_sm_pair_exec+0x40>

00013aa2 <ble_sm_peer_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   13aa2:	7a03      	ldrb	r3, [r0, #8]
   13aa4:	f013 0f01 	tst.w	r3, #1
   13aa8:	d101      	bne.n	13aae <ble_sm_peer_pair_rand+0xc>
        return proc->randm;
   13aaa:	303e      	adds	r0, #62	; 0x3e
}
   13aac:	4770      	bx	lr
        return proc->rands;
   13aae:	304e      	adds	r0, #78	; 0x4e
   13ab0:	4770      	bx	lr

00013ab2 <ble_sm_random_rx>:
{
   13ab2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ab4:	4606      	mov	r6, r0
   13ab6:	460d      	mov	r5, r1
   13ab8:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   13aba:	2110      	movs	r1, #16
   13abc:	4628      	mov	r0, r5
   13abe:	f7fd fdea 	bl	11696 <ble_hs_mbuf_pullup_base>
   13ac2:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   13ac4:	b130      	cbz	r0, 13ad4 <ble_sm_random_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13ac6:	2308      	movs	r3, #8
   13ac8:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   13aca:	7d23      	ldrb	r3, [r4, #20]
   13acc:	f043 0302 	orr.w	r3, r3, #2
   13ad0:	7523      	strb	r3, [r4, #20]
}
   13ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_random *)(*om)->om_data;
   13ad4:	682b      	ldr	r3, [r5, #0]
   13ad6:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   13ad8:	f7fc f856 	bl	fb88 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_RANDOM, -1, NULL);
   13adc:	2300      	movs	r3, #0
   13ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13ae2:	2102      	movs	r1, #2
   13ae4:	4630      	mov	r0, r6
   13ae6:	f7ff faf5 	bl	130d4 <ble_sm_proc_find>
    if (proc == NULL) {
   13aea:	4606      	mov	r6, r0
   13aec:	b190      	cbz	r0, 13b14 <ble_sm_random_rx+0x62>
        memcpy(ble_sm_peer_pair_rand(proc), cmd->value, 16);
   13aee:	f7ff ffd8 	bl	13aa2 <ble_sm_peer_pair_rand>
   13af2:	682f      	ldr	r7, [r5, #0]
   13af4:	6869      	ldr	r1, [r5, #4]
   13af6:	68aa      	ldr	r2, [r5, #8]
   13af8:	68eb      	ldr	r3, [r5, #12]
   13afa:	6007      	str	r7, [r0, #0]
   13afc:	6041      	str	r1, [r0, #4]
   13afe:	6082      	str	r2, [r0, #8]
   13b00:	60c3      	str	r3, [r0, #12]
        if (proc->flags & BLE_SM_PROC_F_SC) {
   13b02:	7a33      	ldrb	r3, [r6, #8]
   13b04:	f013 0f10 	tst.w	r3, #16
   13b08:	d106      	bne.n	13b18 <ble_sm_random_rx+0x66>
            ble_sm_lgcy_random_rx(proc, res);
   13b0a:	4621      	mov	r1, r4
   13b0c:	4630      	mov	r0, r6
   13b0e:	f000 fa8f 	bl	14030 <ble_sm_lgcy_random_rx>
   13b12:	e001      	b.n	13b18 <ble_sm_random_rx+0x66>
        res->app_status = BLE_HS_ENOENT;
   13b14:	2305      	movs	r3, #5
   13b16:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   13b18:	f7fc f83a 	bl	fb90 <ble_hs_unlock>
   13b1c:	e7d9      	b.n	13ad2 <ble_sm_random_rx+0x20>

00013b1e <ble_sm_timer>:
{
   13b1e:	b530      	push	{r4, r5, lr}
   13b20:	b083      	sub	sp, #12
    ticks_until_exp = ble_sm_extract_expired(&exp_list);
   13b22:	4668      	mov	r0, sp
   13b24:	f7ff f930 	bl	12d88 <ble_sm_extract_expired>
   13b28:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   13b2a:	e002      	b.n	13b32 <ble_sm_timer+0x14>
        ble_sm_proc_free(proc);
   13b2c:	4620      	mov	r0, r4
   13b2e:	f7ff f9d7 	bl	12ee0 <ble_sm_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   13b32:	9c00      	ldr	r4, [sp, #0]
   13b34:	b16c      	cbz	r4, 13b52 <ble_sm_timer+0x34>
        ble_gap_enc_event(proc->conn_handle, BLE_HS_ETIMEOUT, 0, 0);
   13b36:	2300      	movs	r3, #0
   13b38:	461a      	mov	r2, r3
   13b3a:	210d      	movs	r1, #13
   13b3c:	8960      	ldrh	r0, [r4, #10]
   13b3e:	f7f9 ff36 	bl	d9ae <ble_gap_enc_event>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   13b42:	9b00      	ldr	r3, [sp, #0]
   13b44:	681b      	ldr	r3, [r3, #0]
   13b46:	9300      	str	r3, [sp, #0]
   13b48:	2b00      	cmp	r3, #0
   13b4a:	d1ef      	bne.n	13b2c <ble_sm_timer+0xe>
   13b4c:	f8cd d004 	str.w	sp, [sp, #4]
   13b50:	e7ec      	b.n	13b2c <ble_sm_timer+0xe>
}
   13b52:	4628      	mov	r0, r5
   13b54:	b003      	add	sp, #12
   13b56:	bd30      	pop	{r4, r5, pc}

00013b58 <ble_sm_pair_initiate>:
{
   13b58:	b530      	push	{r4, r5, lr}
   13b5a:	b087      	sub	sp, #28
   13b5c:	4605      	mov	r5, r0
    memset(&res, 0, sizeof(res));
   13b5e:	2400      	movs	r4, #0
   13b60:	9400      	str	r4, [sp, #0]
   13b62:	9401      	str	r4, [sp, #4]
   13b64:	9402      	str	r4, [sp, #8]
   13b66:	9403      	str	r4, [sp, #12]
   13b68:	9404      	str	r4, [sp, #16]
   13b6a:	9405      	str	r4, [sp, #20]
    ble_hs_lock();
   13b6c:	f7fc f80c 	bl	fb88 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   13b70:	4623      	mov	r3, r4
   13b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13b76:	21ff      	movs	r1, #255	; 0xff
   13b78:	4628      	mov	r0, r5
   13b7a:	f7ff faab 	bl	130d4 <ble_sm_proc_find>
   13b7e:	4604      	mov	r4, r0
    ble_hs_unlock();
   13b80:	f7fc f806 	bl	fb90 <ble_hs_unlock>
    if (proc != NULL) {
   13b84:	b11c      	cbz	r4, 13b8e <ble_sm_pair_initiate+0x36>
        return BLE_HS_EALREADY;
   13b86:	2302      	movs	r3, #2
}
   13b88:	4618      	mov	r0, r3
   13b8a:	b007      	add	sp, #28
   13b8c:	bd30      	pop	{r4, r5, pc}
    rc = ble_sm_chk_store_overflow(conn_handle);
   13b8e:	4628      	mov	r0, r5
   13b90:	f7fe fd03 	bl	1259a <ble_sm_chk_store_overflow>
    if (rc != 0) {
   13b94:	4603      	mov	r3, r0
   13b96:	2800      	cmp	r0, #0
   13b98:	d1f6      	bne.n	13b88 <ble_sm_pair_initiate+0x30>
    proc = ble_sm_proc_alloc();
   13b9a:	f7ff f9ab 	bl	12ef4 <ble_sm_proc_alloc>
    if (proc == NULL) {
   13b9e:	4604      	mov	r4, r0
   13ba0:	b1d0      	cbz	r0, 13bd8 <ble_sm_pair_initiate+0x80>
        proc->conn_handle = conn_handle;
   13ba2:	8145      	strh	r5, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   13ba4:	2300      	movs	r3, #0
   13ba6:	7343      	strb	r3, [r0, #13]
        proc->flags |= BLE_SM_PROC_F_INITIATOR;
   13ba8:	7a03      	ldrb	r3, [r0, #8]
   13baa:	f043 0301 	orr.w	r3, r3, #1
   13bae:	7203      	strb	r3, [r0, #8]
        ble_hs_lock();
   13bb0:	f7fb ffea 	bl	fb88 <ble_hs_lock>
        ble_sm_insert(proc);
   13bb4:	4620      	mov	r0, r4
   13bb6:	f7fe fcb7 	bl	12528 <ble_sm_insert>
        ble_hs_unlock();
   13bba:	f7fb ffe9 	bl	fb90 <ble_hs_unlock>
        res.execute = 1;
   13bbe:	f89d 3014 	ldrb.w	r3, [sp, #20]
   13bc2:	f043 0301 	orr.w	r3, r3, #1
   13bc6:	f88d 3014 	strb.w	r3, [sp, #20]
    if (proc != NULL) {
   13bca:	b11c      	cbz	r4, 13bd4 <ble_sm_pair_initiate+0x7c>
        ble_sm_process_result(conn_handle, &res);
   13bcc:	4669      	mov	r1, sp
   13bce:	4628      	mov	r0, r5
   13bd0:	f7ff fd5b 	bl	1368a <ble_sm_process_result>
    return res.app_status;
   13bd4:	9b00      	ldr	r3, [sp, #0]
   13bd6:	e7d7      	b.n	13b88 <ble_sm_pair_initiate+0x30>
        res.app_status = BLE_HS_ENOMEM;
   13bd8:	2306      	movs	r3, #6
   13bda:	9300      	str	r3, [sp, #0]
   13bdc:	e7f5      	b.n	13bca <ble_sm_pair_initiate+0x72>

00013bde <ble_sm_enc_initiate>:
{
   13bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13be2:	b08e      	sub	sp, #56	; 0x38
   13be4:	4605      	mov	r5, r0
   13be6:	4688      	mov	r8, r1
   13be8:	4616      	mov	r6, r2
   13bea:	461f      	mov	r7, r3
    memset(&res, 0, sizeof res);
   13bec:	2400      	movs	r4, #0
   13bee:	9408      	str	r4, [sp, #32]
   13bf0:	9409      	str	r4, [sp, #36]	; 0x24
   13bf2:	940a      	str	r4, [sp, #40]	; 0x28
   13bf4:	940b      	str	r4, [sp, #44]	; 0x2c
   13bf6:	940c      	str	r4, [sp, #48]	; 0x30
   13bf8:	940d      	str	r4, [sp, #52]	; 0x34
    ble_hs_lock();
   13bfa:	f7fb ffc5 	bl	fb88 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   13bfe:	4623      	mov	r3, r4
   13c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13c04:	21ff      	movs	r1, #255	; 0xff
   13c06:	4628      	mov	r0, r5
   13c08:	f7ff fa64 	bl	130d4 <ble_sm_proc_find>
    if (proc != NULL) {
   13c0c:	b158      	cbz	r0, 13c26 <ble_sm_enc_initiate+0x48>
        res.app_status = BLE_HS_EALREADY;
   13c0e:	2302      	movs	r3, #2
   13c10:	9308      	str	r3, [sp, #32]
    ble_hs_unlock();
   13c12:	f7fb ffbd 	bl	fb90 <ble_hs_unlock>
    ble_sm_process_result(conn_handle, &res);
   13c16:	a908      	add	r1, sp, #32
   13c18:	4628      	mov	r0, r5
   13c1a:	f7ff fd36 	bl	1368a <ble_sm_process_result>
}
   13c1e:	9808      	ldr	r0, [sp, #32]
   13c20:	b00e      	add	sp, #56	; 0x38
   13c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        proc = ble_sm_proc_alloc();
   13c26:	f7ff f965 	bl	12ef4 <ble_sm_proc_alloc>
        if (proc == NULL) {
   13c2a:	4603      	mov	r3, r0
   13c2c:	b338      	cbz	r0, 13c7e <ble_sm_enc_initiate+0xa0>
            proc->conn_handle = conn_handle;
   13c2e:	8145      	strh	r5, [r0, #10]
            proc->key_size = key_size;
   13c30:	f880 800f 	strb.w	r8, [r0, #15]
            proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   13c34:	2206      	movs	r2, #6
   13c36:	7342      	strb	r2, [r0, #13]
            proc->flags |= BLE_SM_PROC_F_INITIATOR;
   13c38:	7a02      	ldrb	r2, [r0, #8]
   13c3a:	f042 0201 	orr.w	r2, r2, #1
   13c3e:	7202      	strb	r2, [r0, #8]
            if (auth) {
   13c40:	9916      	ldr	r1, [sp, #88]	; 0x58
   13c42:	b111      	cbz	r1, 13c4a <ble_sm_enc_initiate+0x6c>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   13c44:	f042 0208 	orr.w	r2, r2, #8
   13c48:	7202      	strb	r2, [r0, #8]
            ble_sm_insert(proc);
   13c4a:	4618      	mov	r0, r3
   13c4c:	f7fe fc6c 	bl	12528 <ble_sm_insert>
            cmd.connection_handle = conn_handle;
   13c50:	f8ad 5000 	strh.w	r5, [sp]
            cmd.encrypted_diversifier = ediv;
   13c54:	f8ad 7002 	strh.w	r7, [sp, #2]
            cmd.random_number = rand_val;
   13c58:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   13c5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
            memcpy(cmd.long_term_key, ltk, sizeof cmd.long_term_key);
   13c60:	ac04      	add	r4, sp, #16
   13c62:	6830      	ldr	r0, [r6, #0]
   13c64:	6871      	ldr	r1, [r6, #4]
   13c66:	68b2      	ldr	r2, [r6, #8]
   13c68:	68f3      	ldr	r3, [r6, #12]
   13c6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            res.execute = 1;
   13c6c:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   13c70:	f043 0301 	orr.w	r3, r3, #1
   13c74:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            res.state_arg = &cmd;
   13c78:	f8cd d030 	str.w	sp, [sp, #48]	; 0x30
   13c7c:	e7c9      	b.n	13c12 <ble_sm_enc_initiate+0x34>
            res.app_status = BLE_HS_ENOMEM;
   13c7e:	2306      	movs	r3, #6
   13c80:	9308      	str	r3, [sp, #32]
   13c82:	e7c6      	b.n	13c12 <ble_sm_enc_initiate+0x34>

00013c84 <ble_sm_sec_req_rx>:
{
   13c84:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   13c88:	b0a8      	sub	sp, #160	; 0xa0
   13c8a:	4606      	mov	r6, r0
   13c8c:	460d      	mov	r5, r1
   13c8e:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   13c90:	2101      	movs	r1, #1
   13c92:	4628      	mov	r0, r5
   13c94:	f7fd fcff 	bl	11696 <ble_hs_mbuf_pullup_base>
   13c98:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   13c9a:	b110      	cbz	r0, 13ca2 <ble_sm_sec_req_rx+0x1e>
}
   13c9c:	b028      	add	sp, #160	; 0xa0
   13c9e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    cmd = (struct ble_sm_sec_req *)(*om)->om_data;
   13ca2:	682b      	ldr	r3, [r5, #0]
   13ca4:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   13ca6:	f7fb ff6f 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   13caa:	4630      	mov	r0, r6
   13cac:	f7fc fd8e 	bl	107cc <ble_hs_conn_find_assert>
    if (!(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   13cb0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   13cb4:	f013 0f01 	tst.w	r3, #1
   13cb8:	d132      	bne.n	13d20 <ble_sm_sec_req_rx+0x9c>
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   13cba:	f240 4307 	movw	r3, #1031	; 0x407
   13cbe:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   13cc0:	2307      	movs	r3, #7
   13cc2:	7123      	strb	r3, [r4, #4]
    ble_hs_unlock();
   13cc4:	f7fb ff64 	bl	fb90 <ble_hs_unlock>
    if (res->app_status == 0) {
   13cc8:	6823      	ldr	r3, [r4, #0]
   13cca:	2b00      	cmp	r3, #0
   13ccc:	d1e6      	bne.n	13c9c <ble_sm_sec_req_rx+0x18>
        if (cmd->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   13cce:	782b      	ldrb	r3, [r5, #0]
   13cd0:	f013 0f01 	tst.w	r3, #1
   13cd4:	d141      	bne.n	13d5a <ble_sm_sec_req_rx+0xd6>
            res->app_status = BLE_HS_ENOENT;
   13cd6:	2305      	movs	r3, #5
   13cd8:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   13cda:	6823      	ldr	r3, [r4, #0]
   13cdc:	b953      	cbnz	r3, 13cf4 <ble_sm_sec_req_rx+0x70>
            authreq_mitm = cmd->authreq & BLE_SM_PAIR_AUTHREQ_MITM;
   13cde:	782b      	ldrb	r3, [r5, #0]
            if (authreq_mitm && !value_sec.authenticated) {
   13ce0:	f013 0f04 	tst.w	r3, #4
   13ce4:	d006      	beq.n	13cf4 <ble_sm_sec_req_rx+0x70>
   13ce6:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
   13cea:	f013 0f02 	tst.w	r3, #2
   13cee:	d101      	bne.n	13cf4 <ble_sm_sec_req_rx+0x70>
                res->app_status = BLE_HS_EREJECT;
   13cf0:	2310      	movs	r3, #16
   13cf2:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   13cf4:	6823      	ldr	r3, [r4, #0]
   13cf6:	2b00      	cmp	r3, #0
   13cf8:	d135      	bne.n	13d66 <ble_sm_sec_req_rx+0xe2>
                                                  value_sec.authenticated);
   13cfa:	f89d 209a 	ldrb.w	r2, [sp, #154]	; 0x9a
   13cfe:	f3c2 0240 	ubfx	r2, r2, #1, #1
            res->app_status = ble_sm_enc_initiate(conn_handle,
   13d02:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   13d06:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
   13d0a:	9202      	str	r2, [sp, #8]
   13d0c:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   13d10:	e9cd 8900 	strd	r8, r9, [sp]
   13d14:	aa1a      	add	r2, sp, #104	; 0x68
   13d16:	4630      	mov	r0, r6
   13d18:	f7ff ff61 	bl	13bde <ble_sm_enc_initiate>
   13d1c:	6020      	str	r0, [r4, #0]
   13d1e:	e7bd      	b.n	13c9c <ble_sm_sec_req_rx+0x18>
        ble_hs_conn_addrs(conn, &addrs);
   13d20:	a905      	add	r1, sp, #20
   13d22:	f7fc fd73 	bl	1080c <ble_hs_conn_addrs>
        memset(&key_sec, 0, sizeof key_sec);
   13d26:	2300      	movs	r3, #0
   13d28:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   13d2c:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   13d30:	f8cd 303e 	str.w	r3, [sp, #62]	; 0x3e
   13d34:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
   13d38:	f8cd 3046 	str.w	r3, [sp, #70]	; 0x46
   13d3c:	f8cd 304a 	str.w	r3, [sp, #74]	; 0x4a
   13d40:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        key_sec.peer_addr = addrs.peer_id_addr;
   13d44:	ab28      	add	r3, sp, #160	; 0xa0
   13d46:	f853 0d85 	ldr.w	r0, [r3, #-133]!
   13d4a:	900c      	str	r0, [sp, #48]	; 0x30
   13d4c:	889a      	ldrh	r2, [r3, #4]
   13d4e:	799b      	ldrb	r3, [r3, #6]
   13d50:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   13d54:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
   13d58:	e7b4      	b.n	13cc4 <ble_sm_sec_req_rx+0x40>
            res->app_status = ble_store_read_peer_sec(&key_sec, &value_sec);
   13d5a:	a914      	add	r1, sp, #80	; 0x50
   13d5c:	a80c      	add	r0, sp, #48	; 0x30
   13d5e:	f000 fa34 	bl	141ca <ble_store_read_peer_sec>
   13d62:	6020      	str	r0, [r4, #0]
   13d64:	e7b9      	b.n	13cda <ble_sm_sec_req_rx+0x56>
            res->app_status = ble_sm_pair_initiate(conn_handle);
   13d66:	4630      	mov	r0, r6
   13d68:	f7ff fef6 	bl	13b58 <ble_sm_pair_initiate>
   13d6c:	6020      	str	r0, [r4, #0]
   13d6e:	e795      	b.n	13c9c <ble_sm_sec_req_rx+0x18>

00013d70 <ble_sm_connection_broken>:
    return res.app_status;
}

void
ble_sm_connection_broken(uint16_t conn_handle)
{
   13d70:	b500      	push	{lr}
   13d72:	b087      	sub	sp, #28
    struct ble_sm_result res;

    memset(&res, 0, sizeof res);
   13d74:	2300      	movs	r3, #0
   13d76:	9301      	str	r3, [sp, #4]
   13d78:	9302      	str	r3, [sp, #8]
   13d7a:	9303      	str	r3, [sp, #12]
   13d7c:	9304      	str	r3, [sp, #16]
   13d7e:	9305      	str	r3, [sp, #20]
    res.app_status = BLE_HS_ENOTCONN;
   13d80:	2307      	movs	r3, #7
   13d82:	9300      	str	r3, [sp, #0]
    res.enc_cb = 1;
   13d84:	2302      	movs	r3, #2
   13d86:	f88d 3014 	strb.w	r3, [sp, #20]

    ble_sm_process_result(conn_handle, &res);
   13d8a:	4669      	mov	r1, sp
   13d8c:	f7ff fc7d 	bl	1368a <ble_sm_process_result>
}
   13d90:	b007      	add	sp, #28
   13d92:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00013d98 <ble_sm_init>:

int
ble_sm_init(void)
{
   13d98:	b500      	push	{lr}
   13d9a:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_sm_procs);
   13d9c:	4b07      	ldr	r3, [pc, #28]	; (13dbc <ble_sm_init+0x24>)
   13d9e:	2200      	movs	r2, #0
   13da0:	601a      	str	r2, [r3, #0]
   13da2:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_sm_proc_pool,
   13da4:	4b06      	ldr	r3, [pc, #24]	; (13dc0 <ble_sm_init+0x28>)
   13da6:	9300      	str	r3, [sp, #0]
   13da8:	4b06      	ldr	r3, [pc, #24]	; (13dc4 <ble_sm_init+0x2c>)
   13daa:	f44f 7280 	mov.w	r2, #256	; 0x100
   13dae:	2101      	movs	r1, #1
   13db0:	4805      	ldr	r0, [pc, #20]	; (13dc8 <ble_sm_init+0x30>)
   13db2:	f7f6 fe91 	bl	aad8 <os_mempool_init>
    }

    ble_sm_sc_init();

    return 0;
}
   13db6:	b003      	add	sp, #12
   13db8:	f85d fb04 	ldr.w	pc, [sp], #4
   13dbc:	2000779c 	.word	0x2000779c
   13dc0:	00028f68 	.word	0x00028f68
   13dc4:	20007680 	.word	0x20007680
   13dc8:	20007780 	.word	0x20007780

00013dcc <ble_sm_create_chan>:
}
#endif

struct ble_l2cap_chan *
ble_sm_create_chan(uint16_t conn_handle)
{
   13dcc:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   13dce:	f7fd ff9b 	bl	11d08 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   13dd2:	4603      	mov	r3, r0
   13dd4:	b130      	cbz	r0, 13de4 <ble_sm_create_chan+0x18>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_SM;
   13dd6:	2206      	movs	r2, #6
   13dd8:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SM;
   13dda:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_SM_MTU;
   13ddc:	2241      	movs	r2, #65	; 0x41
   13dde:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_sm_rx;
   13de0:	4a01      	ldr	r2, [pc, #4]	; (13de8 <ble_sm_create_chan+0x1c>)
   13de2:	6182      	str	r2, [r0, #24]

    return chan;
}
   13de4:	4618      	mov	r0, r3
   13de6:	bd08      	pop	{r3, pc}
   13de8:	00013871 	.word	0x00013871

00013dec <ble_sm_cmd_get>:
#include "host/ble_sm.h"
#include "ble_hs_priv.h"

void *
ble_sm_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   13dec:	b570      	push	{r4, r5, r6, lr}
   13dee:	4606      	mov	r6, r0
   13df0:	460c      	mov	r4, r1
   13df2:	4615      	mov	r5, r2
    struct ble_sm_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   13df4:	f7fd fc2e 	bl	11654 <ble_hs_mbuf_l2cap_pkt>
   13df8:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   13dfa:	b178      	cbz	r0, 13e1c <ble_sm_cmd_get+0x30>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   13dfc:	1c61      	adds	r1, r4, #1
   13dfe:	b289      	uxth	r1, r1
   13e00:	f7f6 fce8 	bl	a7d4 <os_mbuf_extend>
   13e04:	4604      	mov	r4, r0
   13e06:	b128      	cbz	r0, 13e14 <ble_sm_cmd_get+0x28>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_sm_hdr *)(*txom)->om_data;
   13e08:	682b      	ldr	r3, [r5, #0]

    hdr->opcode = opcode;
   13e0a:	681c      	ldr	r4, [r3, #0]
   13e0c:	f804 6b01 	strb.w	r6, [r4], #1

    return hdr->data;
}
   13e10:	4620      	mov	r0, r4
   13e12:	bd70      	pop	{r4, r5, r6, pc}
        os_mbuf_free_chain(*txom);
   13e14:	6828      	ldr	r0, [r5, #0]
   13e16:	f7f6 fa55 	bl	a2c4 <os_mbuf_free_chain>
        return NULL;
   13e1a:	e7f9      	b.n	13e10 <ble_sm_cmd_get+0x24>
        return NULL;
   13e1c:	2400      	movs	r4, #0
   13e1e:	e7f7      	b.n	13e10 <ble_sm_cmd_get+0x24>

00013e20 <ble_sm_tx>:

/* this function consumes tx os_mbuf */
int
ble_sm_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   13e20:	b510      	push	{r4, lr}
   13e22:	b082      	sub	sp, #8
   13e24:	460c      	mov	r4, r1

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    STATS_INC(ble_l2cap_stats, sm_tx);

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SM,
   13e26:	ab01      	add	r3, sp, #4
   13e28:	466a      	mov	r2, sp
   13e2a:	2106      	movs	r1, #6
   13e2c:	f7fd fc6d 	bl	1170a <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   13e30:	4603      	mov	r3, r0
   13e32:	b110      	cbz	r0, 13e3a <ble_sm_tx+0x1a>
        rc = ble_l2cap_tx(conn, chan, txom);
    }

    return rc;
}
   13e34:	4618      	mov	r0, r3
   13e36:	b002      	add	sp, #8
   13e38:	bd10      	pop	{r4, pc}
        rc = ble_l2cap_tx(conn, chan, txom);
   13e3a:	4622      	mov	r2, r4
   13e3c:	9901      	ldr	r1, [sp, #4]
   13e3e:	9800      	ldr	r0, [sp, #0]
   13e40:	f7fe f849 	bl	11ed6 <ble_l2cap_tx>
   13e44:	4603      	mov	r3, r0
    return rc;
   13e46:	e7f5      	b.n	13e34 <ble_sm_tx+0x14>

00013e48 <ble_sm_gen_stk>:
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
}

static int
ble_sm_gen_stk(struct ble_sm_proc *proc)
{
   13e48:	b570      	push	{r4, r5, r6, lr}
   13e4a:	b084      	sub	sp, #16
   13e4c:	4604      	mov	r4, r0
    uint8_t key[16];
    int rc;

    rc = ble_sm_alg_s1(proc->tk, proc->rands, proc->randm, key);
   13e4e:	466b      	mov	r3, sp
   13e50:	f100 023e 	add.w	r2, r0, #62	; 0x3e
   13e54:	f100 014e 	add.w	r1, r0, #78	; 0x4e
   13e58:	301e      	adds	r0, #30
   13e5a:	f002 f925 	bl	160a8 <ble_sm_alg_s1>
    if (rc != 0) {
   13e5e:	4605      	mov	r5, r0
   13e60:	b110      	cbz	r0, 13e68 <ble_sm_gen_stk+0x20>

    /* Ensure proper key size */
    memset(proc->ltk + proc->key_size, 0, sizeof key - proc->key_size);

    return 0;
}
   13e62:	4628      	mov	r0, r5
   13e64:	b004      	add	sp, #16
   13e66:	bd70      	pop	{r4, r5, r6, pc}
    memcpy(proc->ltk, key, proc->key_size);
   13e68:	f104 065e 	add.w	r6, r4, #94	; 0x5e
   13e6c:	7be4      	ldrb	r4, [r4, #15]
   13e6e:	4622      	mov	r2, r4
   13e70:	4669      	mov	r1, sp
   13e72:	4630      	mov	r0, r6
   13e74:	f7f7 fd0c 	bl	b890 <memcpy>
    memset(proc->ltk + proc->key_size, 0, sizeof key - proc->key_size);
   13e78:	f1c4 0210 	rsb	r2, r4, #16
   13e7c:	2100      	movs	r1, #0
   13e7e:	1930      	adds	r0, r6, r4
   13e80:	f7f7 fd2f 	bl	b8e2 <memset>
    return 0;
   13e84:	e7ed      	b.n	13e62 <ble_sm_gen_stk+0x1a>
	...

00013e88 <ble_sm_lgcy_io_action>:
{
   13e88:	b410      	push	{r4}
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES &&
   13e8a:	7c83      	ldrb	r3, [r0, #18]
   13e8c:	2b01      	cmp	r3, #1
   13e8e:	d00a      	beq.n	13ea6 <ble_sm_lgcy_io_action+0x1e>
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   13e90:	7cc3      	ldrb	r3, [r0, #19]
   13e92:	f013 0f04 	tst.w	r3, #4
   13e96:	d10b      	bne.n	13eb0 <ble_sm_lgcy_io_action+0x28>
               !(pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_MITM)) {
   13e98:	7e83      	ldrb	r3, [r0, #26]
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   13e9a:	f013 0f04 	tst.w	r3, #4
   13e9e:	d107      	bne.n	13eb0 <ble_sm_lgcy_io_action+0x28>
        *action = BLE_SM_IOACT_NONE;
   13ea0:	2300      	movs	r3, #0
   13ea2:	700b      	strb	r3, [r1, #0]
   13ea4:	e00c      	b.n	13ec0 <ble_sm_lgcy_io_action+0x38>
        pair_rsp->oob_data_flag == BLE_SM_PAIR_OOB_YES) {
   13ea6:	7e43      	ldrb	r3, [r0, #25]
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES &&
   13ea8:	2b01      	cmp	r3, #1
   13eaa:	d1f1      	bne.n	13e90 <ble_sm_lgcy_io_action+0x8>
        *action = BLE_SM_IOACT_OOB;
   13eac:	700b      	strb	r3, [r1, #0]
   13eae:	e007      	b.n	13ec0 <ble_sm_lgcy_io_action+0x38>
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   13eb0:	7c43      	ldrb	r3, [r0, #17]
   13eb2:	2b04      	cmp	r3, #4
   13eb4:	d802      	bhi.n	13ebc <ble_sm_lgcy_io_action+0x34>
               pair_rsp->io_cap >= BLE_SM_IO_CAP_RESERVED) {
   13eb6:	7e02      	ldrb	r2, [r0, #24]
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   13eb8:	2a04      	cmp	r2, #4
   13eba:	d908      	bls.n	13ece <ble_sm_lgcy_io_action+0x46>
        *action = BLE_SM_IOACT_NONE;
   13ebc:	2300      	movs	r3, #0
   13ebe:	700b      	strb	r3, [r1, #0]
    switch (*action) {
   13ec0:	780b      	ldrb	r3, [r1, #0]
   13ec2:	2b03      	cmp	r3, #3
   13ec4:	d82b      	bhi.n	13f1e <ble_sm_lgcy_io_action+0x96>
   13ec6:	e8df f003 	tbb	[pc, r3]
   13eca:	1a14      	.short	0x1a14
   13ecc:	2222      	.short	0x2222
    } else if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   13ece:	7a04      	ldrb	r4, [r0, #8]
   13ed0:	f014 0f01 	tst.w	r4, #1
   13ed4:	d006      	beq.n	13ee4 <ble_sm_lgcy_io_action+0x5c>
        *action = ble_sm_lgcy_init_ioa[pair_rsp->io_cap][pair_req->io_cap];
   13ed6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   13eda:	4c12      	ldr	r4, [pc, #72]	; (13f24 <ble_sm_lgcy_io_action+0x9c>)
   13edc:	4422      	add	r2, r4
   13ede:	5cd3      	ldrb	r3, [r2, r3]
   13ee0:	700b      	strb	r3, [r1, #0]
   13ee2:	e7ed      	b.n	13ec0 <ble_sm_lgcy_io_action+0x38>
        *action = ble_sm_lgcy_resp_ioa[pair_rsp->io_cap][pair_req->io_cap];
   13ee4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   13ee8:	4c0f      	ldr	r4, [pc, #60]	; (13f28 <ble_sm_lgcy_io_action+0xa0>)
   13eea:	4422      	add	r2, r4
   13eec:	5cd3      	ldrb	r3, [r2, r3]
   13eee:	700b      	strb	r3, [r1, #0]
   13ef0:	e7e6      	b.n	13ec0 <ble_sm_lgcy_io_action+0x38>
        proc->pair_alg = BLE_SM_PAIR_ALG_JW;
   13ef2:	2300      	movs	r3, #0
   13ef4:	7303      	strb	r3, [r0, #12]
    return 0;
   13ef6:	4618      	mov	r0, r3
}
   13ef8:	f85d 4b04 	ldr.w	r4, [sp], #4
   13efc:	4770      	bx	lr
        proc->pair_alg = BLE_SM_PAIR_ALG_OOB;
   13efe:	2302      	movs	r3, #2
   13f00:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   13f02:	7a03      	ldrb	r3, [r0, #8]
   13f04:	f043 0308 	orr.w	r3, r3, #8
   13f08:	7203      	strb	r3, [r0, #8]
    return 0;
   13f0a:	2000      	movs	r0, #0
        break;
   13f0c:	e7f4      	b.n	13ef8 <ble_sm_lgcy_io_action+0x70>
        proc->pair_alg = BLE_SM_PAIR_ALG_PASSKEY;
   13f0e:	2301      	movs	r3, #1
   13f10:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   13f12:	7a03      	ldrb	r3, [r0, #8]
   13f14:	f043 0308 	orr.w	r3, r3, #8
   13f18:	7203      	strb	r3, [r0, #8]
    return 0;
   13f1a:	2000      	movs	r0, #0
        break;
   13f1c:	e7ec      	b.n	13ef8 <ble_sm_lgcy_io_action+0x70>
        return BLE_HS_EINVAL;
   13f1e:	2003      	movs	r0, #3
   13f20:	e7ea      	b.n	13ef8 <ble_sm_lgcy_io_action+0x70>
   13f22:	bf00      	nop
   13f24:	00028fa8 	.word	0x00028fa8
   13f28:	00028fc4 	.word	0x00028fc4

00013f2c <ble_sm_lgcy_confirm_exec>:
{
   13f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13f30:	b08d      	sub	sp, #52	; 0x34
   13f32:	4605      	mov	r5, r0
   13f34:	460c      	mov	r4, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_CONFIRM, sizeof(*cmd), &txom);
   13f36:	aa0b      	add	r2, sp, #44	; 0x2c
   13f38:	2110      	movs	r1, #16
   13f3a:	2003      	movs	r0, #3
   13f3c:	f7ff ff56 	bl	13dec <ble_sm_cmd_get>
    if (cmd == NULL) {
   13f40:	b398      	cbz	r0, 13faa <ble_sm_lgcy_confirm_exec+0x7e>
   13f42:	4681      	mov	r9, r0
    ble_sm_ia_ra(proc, &iat, ia, &rat, ra);
   13f44:	f10d 0824 	add.w	r8, sp, #36	; 0x24
   13f48:	af07      	add	r7, sp, #28
   13f4a:	9700      	str	r7, [sp, #0]
   13f4c:	f10d 031a 	add.w	r3, sp, #26
   13f50:	4642      	mov	r2, r8
   13f52:	f10d 011b 	add.w	r1, sp, #27
   13f56:	4628      	mov	r0, r5
   13f58:	f7ff f880 	bl	1305c <ble_sm_ia_ra>
    rc = ble_sm_alg_c1(proc->tk, ble_sm_our_pair_rand(proc), proc->pair_req,
   13f5c:	f105 061e 	add.w	r6, r5, #30
   13f60:	4628      	mov	r0, r5
   13f62:	f7ff fd44 	bl	139ee <ble_sm_our_pair_rand>
   13f66:	f89d 301b 	ldrb.w	r3, [sp, #27]
   13f6a:	f89d 201a 	ldrb.w	r2, [sp, #26]
   13f6e:	f8cd 9010 	str.w	r9, [sp, #16]
   13f72:	9703      	str	r7, [sp, #12]
   13f74:	f8cd 8008 	str.w	r8, [sp, #8]
   13f78:	9201      	str	r2, [sp, #4]
   13f7a:	9300      	str	r3, [sp, #0]
   13f7c:	f105 0317 	add.w	r3, r5, #23
   13f80:	f105 0210 	add.w	r2, r5, #16
   13f84:	4601      	mov	r1, r0
   13f86:	4630      	mov	r0, r6
   13f88:	f002 f8b6 	bl	160f8 <ble_sm_alg_c1>
    if (rc != 0) {
   13f8c:	4606      	mov	r6, r0
   13f8e:	b968      	cbnz	r0, 13fac <ble_sm_lgcy_confirm_exec+0x80>
    rc = ble_sm_tx(proc->conn_handle, txom);
   13f90:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13f92:	8968      	ldrh	r0, [r5, #10]
   13f94:	f7ff ff44 	bl	13e20 <ble_sm_tx>
    if (rc != 0) {
   13f98:	4606      	mov	r6, r0
   13f9a:	b938      	cbnz	r0, 13fac <ble_sm_lgcy_confirm_exec+0x80>
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   13f9c:	7a2b      	ldrb	r3, [r5, #8]
   13f9e:	f013 0f01 	tst.w	r3, #1
   13fa2:	d10e      	bne.n	13fc2 <ble_sm_lgcy_confirm_exec+0x96>
        proc->state = BLE_SM_PROC_STATE_RANDOM;
   13fa4:	2302      	movs	r3, #2
   13fa6:	736b      	strb	r3, [r5, #13]
   13fa8:	e00b      	b.n	13fc2 <ble_sm_lgcy_confirm_exec+0x96>
        rc = BLE_HS_ENOMEM;
   13faa:	2606      	movs	r6, #6
    if (txom) {
   13fac:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13fae:	b108      	cbz	r0, 13fb4 <ble_sm_lgcy_confirm_exec+0x88>
        os_mbuf_free_chain(txom);
   13fb0:	f7f6 f988 	bl	a2c4 <os_mbuf_free_chain>
    res->app_status = rc;
   13fb4:	6026      	str	r6, [r4, #0]
    res->enc_cb = 1;
   13fb6:	7d23      	ldrb	r3, [r4, #20]
   13fb8:	f043 0302 	orr.w	r3, r3, #2
   13fbc:	7523      	strb	r3, [r4, #20]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13fbe:	2308      	movs	r3, #8
   13fc0:	7123      	strb	r3, [r4, #4]
}
   13fc2:	b00d      	add	sp, #52	; 0x34
   13fc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00013fc8 <ble_sm_lgcy_random_exec>:

void
ble_sm_lgcy_random_exec(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   13fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   13fca:	b083      	sub	sp, #12
   13fcc:	4606      	mov	r6, r0
   13fce:	460c      	mov	r4, r1
    struct ble_sm_pair_random *cmd;
    struct os_mbuf *txom;
    int rc;

    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_RANDOM, sizeof(*cmd), &txom);
   13fd0:	aa01      	add	r2, sp, #4
   13fd2:	2110      	movs	r1, #16
   13fd4:	2004      	movs	r0, #4
   13fd6:	f7ff ff09 	bl	13dec <ble_sm_cmd_get>
    if (cmd == NULL) {
   13fda:	b1c0      	cbz	r0, 1400e <ble_sm_lgcy_random_exec+0x46>
   13fdc:	4605      	mov	r5, r0
        res->enc_cb = 1;
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
        return;
    }

    memcpy(cmd->value, ble_sm_our_pair_rand(proc), 16);
   13fde:	4630      	mov	r0, r6
   13fe0:	f7ff fd05 	bl	139ee <ble_sm_our_pair_rand>
   13fe4:	6807      	ldr	r7, [r0, #0]
   13fe6:	6841      	ldr	r1, [r0, #4]
   13fe8:	6882      	ldr	r2, [r0, #8]
   13fea:	68c3      	ldr	r3, [r0, #12]
   13fec:	602f      	str	r7, [r5, #0]
   13fee:	6069      	str	r1, [r5, #4]
   13ff0:	60aa      	str	r2, [r5, #8]
   13ff2:	60eb      	str	r3, [r5, #12]

    rc = ble_sm_tx(proc->conn_handle, txom);
   13ff4:	9901      	ldr	r1, [sp, #4]
   13ff6:	8970      	ldrh	r0, [r6, #10]
   13ff8:	f7ff ff12 	bl	13e20 <ble_sm_tx>
    if (rc != 0) {
   13ffc:	b188      	cbz	r0, 14022 <ble_sm_lgcy_random_exec+0x5a>
        res->app_status = rc;
   13ffe:	6020      	str	r0, [r4, #0]
        res->enc_cb = 1;
   14000:	7d23      	ldrb	r3, [r4, #20]
   14002:	f043 0302 	orr.w	r3, r3, #2
   14006:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   14008:	2308      	movs	r3, #8
   1400a:	7123      	strb	r3, [r4, #4]
        return;
   1400c:	e007      	b.n	1401e <ble_sm_lgcy_random_exec+0x56>
        res->app_status = BLE_HS_ENOMEM;
   1400e:	2306      	movs	r3, #6
   14010:	6023      	str	r3, [r4, #0]
        res->enc_cb = 1;
   14012:	7d23      	ldrb	r3, [r4, #20]
   14014:	f043 0302 	orr.w	r3, r3, #2
   14018:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1401a:	2308      	movs	r3, #8
   1401c:	7123      	strb	r3, [r4, #4]
    }

    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
        proc->state = BLE_SM_PROC_STATE_LTK_START;
    }
}
   1401e:	b003      	add	sp, #12
   14020:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   14022:	7a33      	ldrb	r3, [r6, #8]
   14024:	f013 0f01 	tst.w	r3, #1
   14028:	d1f9      	bne.n	1401e <ble_sm_lgcy_random_exec+0x56>
        proc->state = BLE_SM_PROC_STATE_LTK_START;
   1402a:	2303      	movs	r3, #3
   1402c:	7373      	strb	r3, [r6, #13]
   1402e:	e7f6      	b.n	1401e <ble_sm_lgcy_random_exec+0x56>

00014030 <ble_sm_lgcy_random_rx>:

void
ble_sm_lgcy_random_rx(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   14030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14034:	b090      	sub	sp, #64	; 0x40
   14036:	4604      	mov	r4, r0
   14038:	460d      	mov	r5, r1
    uint8_t ra[6];
    uint8_t iat;
    uint8_t rat;
    int rc;

    ble_sm_ia_ra(proc, &iat, ia, &rat, ra);
   1403a:	ae0a      	add	r6, sp, #40	; 0x28
   1403c:	af08      	add	r7, sp, #32
   1403e:	9700      	str	r7, [sp, #0]
   14040:	f10d 031e 	add.w	r3, sp, #30
   14044:	4632      	mov	r2, r6
   14046:	f10d 011f 	add.w	r1, sp, #31
   1404a:	f7ff f807 	bl	1305c <ble_sm_ia_ra>

    rc = ble_sm_alg_c1(proc->tk, ble_sm_peer_pair_rand(proc), proc->pair_req,
   1404e:	f104 081e 	add.w	r8, r4, #30
   14052:	4620      	mov	r0, r4
   14054:	f7ff fd25 	bl	13aa2 <ble_sm_peer_pair_rand>
   14058:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1405c:	f89d 201e 	ldrb.w	r2, [sp, #30]
   14060:	a90c      	add	r1, sp, #48	; 0x30
   14062:	9104      	str	r1, [sp, #16]
   14064:	9703      	str	r7, [sp, #12]
   14066:	9602      	str	r6, [sp, #8]
   14068:	9201      	str	r2, [sp, #4]
   1406a:	9300      	str	r3, [sp, #0]
   1406c:	f104 0317 	add.w	r3, r4, #23
   14070:	f104 0210 	add.w	r2, r4, #16
   14074:	4601      	mov	r1, r0
   14076:	4640      	mov	r0, r8
   14078:	f002 f83e 	bl	160f8 <ble_sm_alg_c1>
                       proc->pair_rsp, iat, rat, ia, ra, confirm_val);
    if (rc != 0) {
   1407c:	b148      	cbz	r0, 14092 <ble_sm_lgcy_random_rx+0x62>
        res->app_status = rc;
   1407e:	6028      	str	r0, [r5, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   14080:	2308      	movs	r3, #8
   14082:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   14084:	7d2b      	ldrb	r3, [r5, #20]
   14086:	f043 0302 	orr.w	r3, r3, #2
   1408a:	752b      	strb	r3, [r5, #20]
         */
        proc->state = BLE_SM_PROC_STATE_ENC_START;
    }

    res->execute = 1;
}
   1408c:	b010      	add	sp, #64	; 0x40
   1408e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (memcmp(proc->confirm_peer, confirm_val, 16) != 0) {
   14092:	2210      	movs	r2, #16
   14094:	a90c      	add	r1, sp, #48	; 0x30
   14096:	f104 002e 	add.w	r0, r4, #46	; 0x2e
   1409a:	f7f7 fbd5 	bl	b848 <memcmp>
   1409e:	b148      	cbz	r0, 140b4 <ble_sm_lgcy_random_rx+0x84>
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CONFIRM_MISMATCH);
   140a0:	f240 4304 	movw	r3, #1028	; 0x404
   140a4:	602b      	str	r3, [r5, #0]
        res->sm_err = BLE_SM_ERR_CONFIRM_MISMATCH;
   140a6:	2304      	movs	r3, #4
   140a8:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   140aa:	7d2b      	ldrb	r3, [r5, #20]
   140ac:	f043 0302 	orr.w	r3, r3, #2
   140b0:	752b      	strb	r3, [r5, #20]
        return;
   140b2:	e7eb      	b.n	1408c <ble_sm_lgcy_random_rx+0x5c>
    rc = ble_sm_gen_stk(proc);
   140b4:	4620      	mov	r0, r4
   140b6:	f7ff fec7 	bl	13e48 <ble_sm_gen_stk>
    if (rc != 0) {
   140ba:	b138      	cbz	r0, 140cc <ble_sm_lgcy_random_rx+0x9c>
        res->app_status = rc;
   140bc:	6028      	str	r0, [r5, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   140be:	2308      	movs	r3, #8
   140c0:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   140c2:	7d2b      	ldrb	r3, [r5, #20]
   140c4:	f043 0302 	orr.w	r3, r3, #2
   140c8:	752b      	strb	r3, [r5, #20]
        return;
   140ca:	e7df      	b.n	1408c <ble_sm_lgcy_random_rx+0x5c>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   140cc:	7a23      	ldrb	r3, [r4, #8]
   140ce:	f013 0f01 	tst.w	r3, #1
   140d2:	d001      	beq.n	140d8 <ble_sm_lgcy_random_rx+0xa8>
        proc->state = BLE_SM_PROC_STATE_ENC_START;
   140d4:	2305      	movs	r3, #5
   140d6:	7363      	strb	r3, [r4, #13]
    res->execute = 1;
   140d8:	7d2b      	ldrb	r3, [r5, #20]
   140da:	f043 0301 	orr.w	r3, r3, #1
   140de:	752b      	strb	r3, [r5, #20]
   140e0:	e7d4      	b.n	1408c <ble_sm_lgcy_random_rx+0x5c>
	...

000140e4 <ble_store_status>:
    return rc;
}

static int
ble_store_status(struct ble_store_status_event *event)
{
   140e4:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (ble_hs_cfg.store_status_cb == NULL) {
   140e6:	4b04      	ldr	r3, [pc, #16]	; (140f8 <ble_store_status+0x14>)
   140e8:	6a1b      	ldr	r3, [r3, #32]
   140ea:	b11b      	cbz	r3, 140f4 <ble_store_status+0x10>
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = ble_hs_cfg.store_status_cb(event, ble_hs_cfg.store_status_arg);
   140ec:	4a02      	ldr	r2, [pc, #8]	; (140f8 <ble_store_status+0x14>)
   140ee:	6a51      	ldr	r1, [r2, #36]	; 0x24
   140f0:	4798      	blx	r3
    }

    return rc;
}
   140f2:	bd08      	pop	{r3, pc}
        rc = BLE_HS_ENOTSUP;
   140f4:	2008      	movs	r0, #8
    return rc;
   140f6:	e7fc      	b.n	140f2 <ble_store_status+0xe>
   140f8:	2000017c 	.word	0x2000017c

000140fc <ble_store_read>:
{
   140fc:	b570      	push	{r4, r5, r6, lr}
   140fe:	4604      	mov	r4, r0
   14100:	460d      	mov	r5, r1
   14102:	4616      	mov	r6, r2
    ble_hs_lock();
   14104:	f7fb fd40 	bl	fb88 <ble_hs_lock>
    if (ble_hs_cfg.store_read_cb == NULL) {
   14108:	4b06      	ldr	r3, [pc, #24]	; (14124 <ble_store_read+0x28>)
   1410a:	695b      	ldr	r3, [r3, #20]
   1410c:	b143      	cbz	r3, 14120 <ble_store_read+0x24>
        rc = ble_hs_cfg.store_read_cb(obj_type, key, val);
   1410e:	4632      	mov	r2, r6
   14110:	4629      	mov	r1, r5
   14112:	4620      	mov	r0, r4
   14114:	4798      	blx	r3
   14116:	4604      	mov	r4, r0
    ble_hs_unlock();
   14118:	f7fb fd3a 	bl	fb90 <ble_hs_unlock>
}
   1411c:	4620      	mov	r0, r4
   1411e:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   14120:	2408      	movs	r4, #8
   14122:	e7f9      	b.n	14118 <ble_store_read+0x1c>
   14124:	2000017c 	.word	0x2000017c

00014128 <ble_store_delete>:
{
   14128:	b538      	push	{r3, r4, r5, lr}
   1412a:	4604      	mov	r4, r0
   1412c:	460d      	mov	r5, r1
    ble_hs_lock();
   1412e:	f7fb fd2b 	bl	fb88 <ble_hs_lock>
    if (ble_hs_cfg.store_delete_cb == NULL) {
   14132:	4b06      	ldr	r3, [pc, #24]	; (1414c <ble_store_delete+0x24>)
   14134:	69db      	ldr	r3, [r3, #28]
   14136:	b13b      	cbz	r3, 14148 <ble_store_delete+0x20>
        rc = ble_hs_cfg.store_delete_cb(obj_type, key);
   14138:	4629      	mov	r1, r5
   1413a:	4620      	mov	r0, r4
   1413c:	4798      	blx	r3
   1413e:	4604      	mov	r4, r0
    ble_hs_unlock();
   14140:	f7fb fd26 	bl	fb90 <ble_hs_unlock>
}
   14144:	4620      	mov	r0, r4
   14146:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTSUP;
   14148:	2408      	movs	r4, #8
   1414a:	e7f9      	b.n	14140 <ble_store_delete+0x18>
   1414c:	2000017c 	.word	0x2000017c

00014150 <ble_store_overflow_event>:

int
ble_store_overflow_event(int obj_type, const union ble_store_value *value)
{
   14150:	b500      	push	{lr}
   14152:	b085      	sub	sp, #20
    struct ble_store_status_event event;

    event.event_code = BLE_STORE_EVENT_OVERFLOW;
   14154:	2301      	movs	r3, #1
   14156:	9301      	str	r3, [sp, #4]
    event.overflow.obj_type = obj_type;
   14158:	9002      	str	r0, [sp, #8]
    event.overflow.value = value;
   1415a:	9103      	str	r1, [sp, #12]

    return ble_store_status(&event);
   1415c:	a801      	add	r0, sp, #4
   1415e:	f7ff ffc1 	bl	140e4 <ble_store_status>
}
   14162:	b005      	add	sp, #20
   14164:	f85d fb04 	ldr.w	pc, [sp], #4

00014168 <ble_store_write>:
{
   14168:	b570      	push	{r4, r5, r6, lr}
   1416a:	4606      	mov	r6, r0
   1416c:	460d      	mov	r5, r1
    if (ble_hs_cfg.store_write_cb == NULL) {
   1416e:	4b0d      	ldr	r3, [pc, #52]	; (141a4 <ble_store_write+0x3c>)
   14170:	699b      	ldr	r3, [r3, #24]
   14172:	b1ab      	cbz	r3, 141a0 <ble_store_write+0x38>
        ble_hs_lock();
   14174:	f7fb fd08 	bl	fb88 <ble_hs_lock>
        rc = ble_hs_cfg.store_write_cb(obj_type, val);
   14178:	4b0a      	ldr	r3, [pc, #40]	; (141a4 <ble_store_write+0x3c>)
   1417a:	699b      	ldr	r3, [r3, #24]
   1417c:	4629      	mov	r1, r5
   1417e:	4630      	mov	r0, r6
   14180:	4798      	blx	r3
   14182:	4604      	mov	r4, r0
        ble_hs_unlock();
   14184:	f7fb fd04 	bl	fb90 <ble_hs_unlock>
        switch (rc) {
   14188:	2c1b      	cmp	r4, #27
   1418a:	d001      	beq.n	14190 <ble_store_write+0x28>
}
   1418c:	4620      	mov	r0, r4
   1418e:	bd70      	pop	{r4, r5, r6, pc}
            rc = ble_store_overflow_event(obj_type, val);
   14190:	4629      	mov	r1, r5
   14192:	4630      	mov	r0, r6
   14194:	f7ff ffdc 	bl	14150 <ble_store_overflow_event>
            if (rc != 0) {
   14198:	4604      	mov	r4, r0
   1419a:	2800      	cmp	r0, #0
   1419c:	d0ea      	beq.n	14174 <ble_store_write+0xc>
   1419e:	e7f5      	b.n	1418c <ble_store_write+0x24>
        return BLE_HS_ENOTSUP;
   141a0:	2408      	movs	r4, #8
   141a2:	e7f3      	b.n	1418c <ble_store_write+0x24>
   141a4:	2000017c 	.word	0x2000017c

000141a8 <ble_store_persist_sec>:
}

static int
ble_store_persist_sec(int obj_type,
                      const struct ble_store_value_sec *value_sec)
{
   141a8:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(value_sec->ltk_present ||
                      value_sec->irk_present ||
                      value_sec->csrk_present);

    store_value = (void *)value_sec;
    rc = ble_store_write(obj_type, store_value);
   141aa:	f7ff ffdd 	bl	14168 <ble_store_write>
    return rc;
}
   141ae:	bd08      	pop	{r3, pc}

000141b0 <ble_store_read_our_sec>:
{
   141b0:	b508      	push	{r3, lr}
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_OUR_SEC, store_key, store_value);
   141b2:	460a      	mov	r2, r1
   141b4:	4601      	mov	r1, r0
   141b6:	2001      	movs	r0, #1
   141b8:	f7ff ffa0 	bl	140fc <ble_store_read>
}
   141bc:	bd08      	pop	{r3, pc}

000141be <ble_store_write_our_sec>:

int
ble_store_write_our_sec(const struct ble_store_value_sec *value_sec)
{
   141be:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_OUR_SEC, value_sec);
   141c0:	4601      	mov	r1, r0
   141c2:	2001      	movs	r0, #1
   141c4:	f7ff fff0 	bl	141a8 <ble_store_persist_sec>
    return rc;
}
   141c8:	bd08      	pop	{r3, pc}

000141ca <ble_store_read_peer_sec>:
}

int
ble_store_read_peer_sec(const struct ble_store_key_sec *key_sec,
                        struct ble_store_value_sec *value_sec)
{
   141ca:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(key_sec->peer_addr.type == BLE_ADDR_PUBLIC ||
                      key_sec->peer_addr.type == BLE_ADDR_RANDOM);

    store_key = (void *)key_sec;
    store_value = (void *)value_sec;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_PEER_SEC, store_key, store_value);
   141cc:	460a      	mov	r2, r1
   141ce:	4601      	mov	r1, r0
   141d0:	2002      	movs	r0, #2
   141d2:	f7ff ff93 	bl	140fc <ble_store_read>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   141d6:	bd08      	pop	{r3, pc}

000141d8 <ble_store_write_peer_sec>:

int
ble_store_write_peer_sec(const struct ble_store_value_sec *value_sec)
{
   141d8:	b570      	push	{r4, r5, r6, lr}
   141da:	b082      	sub	sp, #8
   141dc:	4604      	mov	r4, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_PEER_SEC, value_sec);
   141de:	4601      	mov	r1, r0
   141e0:	2002      	movs	r0, #2
   141e2:	f7ff ffe1 	bl	141a8 <ble_store_persist_sec>
    if (rc != 0) {
   141e6:	4605      	mov	r5, r0
   141e8:	b9d8      	cbnz	r0, 14222 <ble_store_write_peer_sec+0x4a>
        return rc;
    }

    if (ble_addr_cmp(&value_sec->peer_addr, BLE_ADDR_ANY) &&
   141ea:	2300      	movs	r3, #0
   141ec:	9300      	str	r3, [sp, #0]
   141ee:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   141f2:	7826      	ldrb	r6, [r4, #0]
   141f4:	4630      	mov	r0, r6
    if (type_diff != 0) {
   141f6:	b92e      	cbnz	r6, 14204 <ble_store_write_peer_sec+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   141f8:	2206      	movs	r2, #6
   141fa:	f10d 0101 	add.w	r1, sp, #1
   141fe:	1c60      	adds	r0, r4, #1
   14200:	f7f7 fb22 	bl	b848 <memcmp>
   14204:	b160      	cbz	r0, 14220 <ble_store_write_peer_sec+0x48>
   14206:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   1420a:	f013 0f01 	tst.w	r3, #1
   1420e:	d008      	beq.n	14222 <ble_store_write_peer_sec+0x4a>
        value_sec->irk_present) {

        /* Write the peer IRK to the controller keycache
         * There is not much to do here if it fails */
        rc = ble_hs_pvcy_add_entry(value_sec->peer_addr.val,
   14210:	f104 0229 	add.w	r2, r4, #41	; 0x29
   14214:	4631      	mov	r1, r6
   14216:	1c60      	adds	r0, r4, #1
   14218:	f7fd fbac 	bl	11974 <ble_hs_pvcy_add_entry>
   1421c:	4605      	mov	r5, r0
   1421e:	e000      	b.n	14222 <ble_store_write_peer_sec+0x4a>
        if (rc != 0) {
            return rc;
        }
    }

    return 0;
   14220:	4605      	mov	r5, r0
}
   14222:	4628      	mov	r0, r5
   14224:	b002      	add	sp, #8
   14226:	bd70      	pop	{r4, r5, r6, pc}

00014228 <ble_store_read_cccd>:

int
ble_store_read_cccd(const struct ble_store_key_cccd *key,
                    struct ble_store_value_cccd *out_value)
{
   14228:	b508      	push	{r3, lr}
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    store_value = (void *)out_value;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_CCCD, store_key, store_value);
   1422a:	460a      	mov	r2, r1
   1422c:	4601      	mov	r1, r0
   1422e:	2003      	movs	r0, #3
   14230:	f7ff ff64 	bl	140fc <ble_store_read>
    return rc;
}
   14234:	bd08      	pop	{r3, pc}

00014236 <ble_store_write_cccd>:

int
ble_store_write_cccd(const struct ble_store_value_cccd *value)
{
   14236:	b508      	push	{r3, lr}
    union ble_store_value *store_value;
    int rc;

    store_value = (void *)value;
    rc = ble_store_write(BLE_STORE_OBJ_TYPE_CCCD, store_value);
   14238:	4601      	mov	r1, r0
   1423a:	2003      	movs	r0, #3
   1423c:	f7ff ff94 	bl	14168 <ble_store_write>
    return rc;
}
   14240:	bd08      	pop	{r3, pc}

00014242 <ble_store_delete_cccd>:

int
ble_store_delete_cccd(const struct ble_store_key_cccd *key)
{
   14242:	b508      	push	{r3, lr}
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    rc = ble_store_delete(BLE_STORE_OBJ_TYPE_CCCD, store_key);
   14244:	4601      	mov	r1, r0
   14246:	2003      	movs	r0, #3
   14248:	f7ff ff6e 	bl	14128 <ble_store_delete>
    return rc;
}
   1424c:	bd08      	pop	{r3, pc}

0001424e <ble_store_key_from_value_cccd>:

void
ble_store_key_from_value_cccd(struct ble_store_key_cccd *out_key,
                              const struct ble_store_value_cccd *value)
{
   1424e:	b410      	push	{r4}
   14250:	4603      	mov	r3, r0
    out_key->peer_addr = value->peer_addr;
   14252:	6808      	ldr	r0, [r1, #0]
   14254:	6018      	str	r0, [r3, #0]
   14256:	8888      	ldrh	r0, [r1, #4]
   14258:	798a      	ldrb	r2, [r1, #6]
   1425a:	8098      	strh	r0, [r3, #4]
   1425c:	719a      	strb	r2, [r3, #6]
    out_key->chr_val_handle = value->chr_val_handle;
   1425e:	890a      	ldrh	r2, [r1, #8]
   14260:	811a      	strh	r2, [r3, #8]
    out_key->idx = 0;
   14262:	2200      	movs	r2, #0
   14264:	729a      	strb	r2, [r3, #10]
}
   14266:	f85d 4b04 	ldr.w	r4, [sp], #4
   1426a:	4770      	bx	lr

0001426c <ble_store_key_from_value_sec>:

void
ble_store_key_from_value_sec(struct ble_store_key_sec *out_key,
                             const struct ble_store_value_sec *value)
{
   1426c:	4603      	mov	r3, r0
   1426e:	460a      	mov	r2, r1
    out_key->peer_addr = value->peer_addr;
   14270:	e9d1 0100 	ldrd	r0, r1, [r1]
   14274:	6018      	str	r0, [r3, #0]
   14276:	8099      	strh	r1, [r3, #4]
   14278:	0c09      	lsrs	r1, r1, #16
   1427a:	7199      	strb	r1, [r3, #6]

    out_key->ediv = value->ediv;
   1427c:	8911      	ldrh	r1, [r2, #8]
   1427e:	8119      	strh	r1, [r3, #8]
    out_key->rand_num = value->rand_num;
   14280:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   14284:	e9c3 0104 	strd	r0, r1, [r3, #16]
    out_key->ediv_rand_present = 1;
   14288:	7e1a      	ldrb	r2, [r3, #24]
   1428a:	f042 0201 	orr.w	r2, r2, #1
   1428e:	761a      	strb	r2, [r3, #24]
    out_key->idx = 0;
   14290:	2200      	movs	r2, #0
   14292:	765a      	strb	r2, [r3, #25]
}
   14294:	4770      	bx	lr

00014296 <ble_store_iterate>:

int
ble_store_iterate(int obj_type,
                  ble_store_iterator_fn *callback,
                  void *cookie)
{
   14296:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1429a:	b09d      	sub	sp, #116	; 0x74
   1429c:	4604      	mov	r4, r0
   1429e:	4688      	mov	r8, r1
   142a0:	4691      	mov	r9, r2
    int idx = 0;
    uint8_t *pidx;
    int rc;

    /* a magic value to retrieve anything */
    memset(&key, 0, sizeof(key));
   142a2:	2220      	movs	r2, #32
   142a4:	2100      	movs	r1, #0
   142a6:	a814      	add	r0, sp, #80	; 0x50
   142a8:	f7f7 fb1b 	bl	b8e2 <memset>
    switch(obj_type) {
   142ac:	2c01      	cmp	r4, #1
   142ae:	db27      	blt.n	14300 <ble_store_iterate+0x6a>
   142b0:	2c02      	cmp	r4, #2
   142b2:	dd08      	ble.n	142c6 <ble_store_iterate+0x30>
   142b4:	2c03      	cmp	r4, #3
   142b6:	d123      	bne.n	14300 <ble_store_iterate+0x6a>
        case BLE_STORE_OBJ_TYPE_OUR_SEC:
            key.sec.peer_addr = *BLE_ADDR_ANY;
            pidx = &key.sec.idx;
            break;
        case BLE_STORE_OBJ_TYPE_CCCD:
            key.cccd.peer_addr = *BLE_ADDR_ANY;
   142b8:	2300      	movs	r3, #0
   142ba:	9314      	str	r3, [sp, #80]	; 0x50
   142bc:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.cccd.idx;
   142c0:	f10d 075a 	add.w	r7, sp, #90	; 0x5a
            break;
   142c4:	e005      	b.n	142d2 <ble_store_iterate+0x3c>
            key.sec.peer_addr = *BLE_ADDR_ANY;
   142c6:	2300      	movs	r3, #0
   142c8:	9314      	str	r3, [sp, #80]	; 0x50
   142ca:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.sec.idx;
   142ce:	f10d 0769 	add.w	r7, sp, #105	; 0x69
            pidx = &key.cccd.idx;
   142d2:	2600      	movs	r6, #0
            BLE_HS_DBG_ASSERT(0);
            return BLE_HS_EINVAL;
    }

    while (1) {
        *pidx = idx;
   142d4:	703e      	strb	r6, [r7, #0]
        rc = ble_store_read(obj_type, &key, &value);
   142d6:	466a      	mov	r2, sp
   142d8:	a914      	add	r1, sp, #80	; 0x50
   142da:	4620      	mov	r0, r4
   142dc:	f7ff ff0e 	bl	140fc <ble_store_read>
        switch (rc) {
   142e0:	4605      	mov	r5, r0
   142e2:	b118      	cbz	r0, 142ec <ble_store_iterate+0x56>
   142e4:	2805      	cmp	r0, #5
   142e6:	d10c      	bne.n	14302 <ble_store_iterate+0x6c>
            }
            break;

        case BLE_HS_ENOENT:
            /* No more entries. */
            return 0;
   142e8:	2500      	movs	r5, #0
   142ea:	e00a      	b.n	14302 <ble_store_iterate+0x6c>
            if (callback != NULL) {
   142ec:	f1b8 0f00 	cmp.w	r8, #0
   142f0:	d004      	beq.n	142fc <ble_store_iterate+0x66>
                rc = callback(obj_type, &value, cookie);
   142f2:	464a      	mov	r2, r9
   142f4:	4669      	mov	r1, sp
   142f6:	4620      	mov	r0, r4
   142f8:	47c0      	blx	r8
                if (rc != 0) {
   142fa:	b910      	cbnz	r0, 14302 <ble_store_iterate+0x6c>
        default:
            /* Read error. */
            return rc;
        }

        idx++;
   142fc:	3601      	adds	r6, #1
        *pidx = idx;
   142fe:	e7e9      	b.n	142d4 <ble_store_iterate+0x3e>
            return BLE_HS_EINVAL;
   14300:	2503      	movs	r5, #3
    }
}
   14302:	4628      	mov	r0, r5
   14304:	b01d      	add	sp, #116	; 0x74
   14306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001430a <ble_store_util_iter_unique_peer>:

static int
ble_store_util_iter_unique_peer(int obj_type,
                                union ble_store_value *val,
                                void *arg)
{
   1430a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1430c:	460e      	mov	r6, r1
   1430e:	4615      	mov	r5, r2
                      obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    set = arg;

    /* Do nothing if this peer is a duplicate. */
    for (i = 0; i < set->num_peers; i++) {
   14310:	2400      	movs	r4, #0
   14312:	e001      	b.n	14318 <ble_store_util_iter_unique_peer+0xe>
        if (ble_addr_cmp(set->peer_id_addrs + i, &val->sec.peer_addr) == 0) {
   14314:	b310      	cbz	r0, 1435c <ble_store_util_iter_unique_peer+0x52>
    for (i = 0; i < set->num_peers; i++) {
   14316:	3401      	adds	r4, #1
   14318:	686b      	ldr	r3, [r5, #4]
   1431a:	42a3      	cmp	r3, r4
   1431c:	dd0d      	ble.n	1433a <ble_store_util_iter_unique_peer+0x30>
        if (ble_addr_cmp(set->peer_id_addrs + i, &val->sec.peer_addr) == 0) {
   1431e:	682a      	ldr	r2, [r5, #0]
   14320:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   14324:	18d7      	adds	r7, r2, r3
    type_diff = a->type - b->type;
   14326:	5cd3      	ldrb	r3, [r2, r3]
   14328:	7830      	ldrb	r0, [r6, #0]
    if (type_diff != 0) {
   1432a:	1a18      	subs	r0, r3, r0
   1432c:	d1f2      	bne.n	14314 <ble_store_util_iter_unique_peer+0xa>
    return memcmp(a->val, b->val, sizeof(a->val));
   1432e:	2206      	movs	r2, #6
   14330:	1c71      	adds	r1, r6, #1
   14332:	1c78      	adds	r0, r7, #1
   14334:	f7f7 fa88 	bl	b848 <memcmp>
   14338:	e7ec      	b.n	14314 <ble_store_util_iter_unique_peer+0xa>
            return 0;
        }
    }

    if (set->num_peers >= set->max_peers) {
   1433a:	68aa      	ldr	r2, [r5, #8]
   1433c:	4293      	cmp	r3, r2
   1433e:	da0e      	bge.n	1435e <ble_store_util_iter_unique_peer+0x54>
        /* Overflow; abort the iterate procedure. */
        set->status = BLE_HS_ENOMEM;
        return 1;
    }

    set->peer_id_addrs[set->num_peers] = val->sec.peer_addr;
   14340:	6829      	ldr	r1, [r5, #0]
   14342:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   14346:	18ca      	adds	r2, r1, r3
   14348:	6830      	ldr	r0, [r6, #0]
   1434a:	50c8      	str	r0, [r1, r3]
   1434c:	88b1      	ldrh	r1, [r6, #4]
   1434e:	79b3      	ldrb	r3, [r6, #6]
   14350:	8091      	strh	r1, [r2, #4]
   14352:	7193      	strb	r3, [r2, #6]
    set->num_peers++;
   14354:	686b      	ldr	r3, [r5, #4]
   14356:	3301      	adds	r3, #1
   14358:	606b      	str	r3, [r5, #4]

    return 0;
   1435a:	2000      	movs	r0, #0
}
   1435c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        set->status = BLE_HS_ENOMEM;
   1435e:	2306      	movs	r3, #6
   14360:	60eb      	str	r3, [r5, #12]
        return 1;
   14362:	2001      	movs	r0, #1
   14364:	e7fa      	b.n	1435c <ble_store_util_iter_unique_peer+0x52>
	...

00014368 <ble_store_util_bonded_peers>:
 *                              Other nonzero on error.
 */
int
ble_store_util_bonded_peers(ble_addr_t *out_peer_id_addrs, int *out_num_peers,
                            int max_peers)
{
   14368:	b510      	push	{r4, lr}
   1436a:	b084      	sub	sp, #16
   1436c:	460c      	mov	r4, r1
    struct ble_store_util_peer_set set = {
   1436e:	9000      	str	r0, [sp, #0]
   14370:	2300      	movs	r3, #0
   14372:	9301      	str	r3, [sp, #4]
   14374:	9202      	str	r2, [sp, #8]
   14376:	9303      	str	r3, [sp, #12]
        .max_peers = max_peers,
        .status = 0,
    };
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_OUR_SEC,
   14378:	466a      	mov	r2, sp
   1437a:	4906      	ldr	r1, [pc, #24]	; (14394 <ble_store_util_bonded_peers+0x2c>)
   1437c:	2001      	movs	r0, #1
   1437e:	f7ff ff8a 	bl	14296 <ble_store_iterate>
                           ble_store_util_iter_unique_peer,
                           &set);
    if (rc != 0) {
   14382:	4603      	mov	r3, r0
   14384:	b918      	cbnz	r0, 1438e <ble_store_util_bonded_peers+0x26>
        return rc;
    }
    if (set.status != 0) {
   14386:	9b03      	ldr	r3, [sp, #12]
   14388:	b90b      	cbnz	r3, 1438e <ble_store_util_bonded_peers+0x26>
        return set.status;
    }

    *out_num_peers = set.num_peers;
   1438a:	9a01      	ldr	r2, [sp, #4]
   1438c:	6022      	str	r2, [r4, #0]
    return 0;
}
   1438e:	4618      	mov	r0, r3
   14390:	b004      	add	sp, #16
   14392:	bd10      	pop	{r4, pc}
   14394:	0001430b 	.word	0x0001430b

00014398 <ble_store_util_delete_all>:
 * @return                      0 on success;
 *                              Other nonzero on error.
 */
int
ble_store_util_delete_all(int type, const union ble_store_key *key)
{
   14398:	b538      	push	{r3, r4, r5, lr}
   1439a:	4605      	mov	r5, r0
   1439c:	460c      	mov	r4, r1
    int rc;

    do {
        rc = ble_store_delete(type, key);
   1439e:	4621      	mov	r1, r4
   143a0:	4628      	mov	r0, r5
   143a2:	f7ff fec1 	bl	14128 <ble_store_delete>
    } while (rc == 0);
   143a6:	4603      	mov	r3, r0
   143a8:	2800      	cmp	r0, #0
   143aa:	d0f8      	beq.n	1439e <ble_store_util_delete_all+0x6>

    if (rc != BLE_HS_ENOENT) {
   143ac:	2805      	cmp	r0, #5
   143ae:	d001      	beq.n	143b4 <ble_store_util_delete_all+0x1c>
        return rc;
    }

    return 0;
}
   143b0:	4618      	mov	r0, r3
   143b2:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   143b4:	2300      	movs	r3, #0
   143b6:	e7fb      	b.n	143b0 <ble_store_util_delete_all+0x18>

000143b8 <ble_store_util_delete_peer>:
{
   143b8:	b510      	push	{r4, lr}
   143ba:	b088      	sub	sp, #32
   143bc:	4604      	mov	r4, r0
    memset(&key, 0, sizeof key);
   143be:	2220      	movs	r2, #32
   143c0:	2100      	movs	r1, #0
   143c2:	4668      	mov	r0, sp
   143c4:	f7f7 fa8d 	bl	b8e2 <memset>
    key.sec.peer_addr = *peer_id_addr;
   143c8:	6820      	ldr	r0, [r4, #0]
   143ca:	9000      	str	r0, [sp, #0]
   143cc:	88a2      	ldrh	r2, [r4, #4]
   143ce:	79a3      	ldrb	r3, [r4, #6]
   143d0:	f8ad 2004 	strh.w	r2, [sp, #4]
   143d4:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_OUR_SEC, &key);
   143d8:	4669      	mov	r1, sp
   143da:	2001      	movs	r0, #1
   143dc:	f7ff ffdc 	bl	14398 <ble_store_util_delete_all>
    if (rc != 0) {
   143e0:	4603      	mov	r3, r0
   143e2:	b110      	cbz	r0, 143ea <ble_store_util_delete_peer+0x32>
}
   143e4:	4618      	mov	r0, r3
   143e6:	b008      	add	sp, #32
   143e8:	bd10      	pop	{r4, pc}
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_PEER_SEC, &key);
   143ea:	4669      	mov	r1, sp
   143ec:	2002      	movs	r0, #2
   143ee:	f7ff ffd3 	bl	14398 <ble_store_util_delete_all>
    if (rc != 0) {
   143f2:	4603      	mov	r3, r0
   143f4:	2800      	cmp	r0, #0
   143f6:	d1f5      	bne.n	143e4 <ble_store_util_delete_peer+0x2c>
    memset(&key, 0, sizeof key);
   143f8:	2220      	movs	r2, #32
   143fa:	2100      	movs	r1, #0
   143fc:	4668      	mov	r0, sp
   143fe:	f7f7 fa70 	bl	b8e2 <memset>
    key.cccd.peer_addr = *peer_id_addr;
   14402:	6820      	ldr	r0, [r4, #0]
   14404:	9000      	str	r0, [sp, #0]
   14406:	88a2      	ldrh	r2, [r4, #4]
   14408:	79a3      	ldrb	r3, [r4, #6]
   1440a:	f8ad 2004 	strh.w	r2, [sp, #4]
   1440e:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_CCCD, &key);
   14412:	4669      	mov	r1, sp
   14414:	2003      	movs	r0, #3
   14416:	f7ff ffbf 	bl	14398 <ble_store_util_delete_all>
   1441a:	4603      	mov	r3, r0
   1441c:	e7e2      	b.n	143e4 <ble_store_util_delete_peer+0x2c>

0001441e <ble_store_util_status_rr>:
 * uninteresting peers could cause important bonds to be deleted.  This is
 * useful for demonstrations and sample apps.
 */
int
ble_store_util_status_rr(struct ble_store_status_event *event, void *arg)
{
   1441e:	b508      	push	{r3, lr}
    switch (event->event_code) {
   14420:	6803      	ldr	r3, [r0, #0]
   14422:	2b01      	cmp	r3, #1
   14424:	d003      	beq.n	1442e <ble_store_util_status_rr+0x10>
   14426:	2b02      	cmp	r3, #2
   14428:	d10f      	bne.n	1444a <ble_store_util_status_rr+0x2c>

    case BLE_STORE_EVENT_FULL:
        /* Just proceed with the operation.  If it results in an overflow,
         * we'll delete a record when the overflow occurs.
         */
        return 0;
   1442a:	2000      	movs	r0, #0

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   1442c:	bd08      	pop	{r3, pc}
        switch (event->overflow.obj_type) {
   1442e:	6843      	ldr	r3, [r0, #4]
   14430:	2b01      	cmp	r3, #1
   14432:	db0c      	blt.n	1444e <ble_store_util_status_rr+0x30>
   14434:	2b02      	cmp	r3, #2
   14436:	dd05      	ble.n	14444 <ble_store_util_status_rr+0x26>
   14438:	2b03      	cmp	r3, #3
   1443a:	d108      	bne.n	1444e <ble_store_util_status_rr+0x30>
            return ble_gap_unpair_oldest_except(&event->overflow.value->cccd.peer_addr);
   1443c:	6880      	ldr	r0, [r0, #8]
   1443e:	f7f9 fa6a 	bl	d916 <ble_gap_unpair_oldest_except>
   14442:	e7f3      	b.n	1442c <ble_store_util_status_rr+0xe>
            return ble_gap_unpair_oldest_peer();
   14444:	f7f9 fa52 	bl	d8ec <ble_gap_unpair_oldest_peer>
   14448:	e7f0      	b.n	1442c <ble_store_util_status_rr+0xe>
        return BLE_HS_EUNKNOWN;
   1444a:	2011      	movs	r0, #17
   1444c:	e7ee      	b.n	1442c <ble_store_util_status_rr+0xe>
            return BLE_HS_EUNKNOWN;
   1444e:	2011      	movs	r0, #17
   14450:	e7ec      	b.n	1442c <ble_store_util_status_rr+0xe>

00014452 <ble_uuid_init_from_buf>:
#define VERIFY_UUID(uuid)
#endif

int
ble_uuid_init_from_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   14452:	b570      	push	{r4, r5, r6, lr}
   14454:	4604      	mov	r4, r0
    switch (len) {
   14456:	2a04      	cmp	r2, #4
   14458:	d00d      	beq.n	14476 <ble_uuid_init_from_buf+0x24>
   1445a:	2a10      	cmp	r2, #16
   1445c:	d013      	beq.n	14486 <ble_uuid_init_from_buf+0x34>
   1445e:	2a02      	cmp	r2, #2
   14460:	d001      	beq.n	14466 <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
        return 0;
    }

    return BLE_HS_EINVAL;
   14462:	2003      	movs	r0, #3
   14464:	e006      	b.n	14474 <ble_uuid_init_from_buf+0x22>
        uuid->u.type = BLE_UUID_TYPE_16;
   14466:	2310      	movs	r3, #16
   14468:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   1446a:	4608      	mov	r0, r1
   1446c:	f007 fbdf 	bl	1bc2e <get_le16>
   14470:	8060      	strh	r0, [r4, #2]
        return 0;
   14472:	2000      	movs	r0, #0
}
   14474:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_32;
   14476:	2320      	movs	r3, #32
   14478:	7003      	strb	r3, [r0, #0]
        uuid->u32.value = get_le32(buf);
   1447a:	4608      	mov	r0, r1
   1447c:	f007 fbdc 	bl	1bc38 <get_le32>
   14480:	6060      	str	r0, [r4, #4]
        return 0;
   14482:	2000      	movs	r0, #0
   14484:	e7f6      	b.n	14474 <ble_uuid_init_from_buf+0x22>
        uuid->u.type = BLE_UUID_TYPE_128;
   14486:	4603      	mov	r3, r0
   14488:	2280      	movs	r2, #128	; 0x80
   1448a:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   1448e:	680e      	ldr	r6, [r1, #0]
   14490:	684d      	ldr	r5, [r1, #4]
   14492:	6888      	ldr	r0, [r1, #8]
   14494:	68ca      	ldr	r2, [r1, #12]
   14496:	f8c4 6001 	str.w	r6, [r4, #1]
   1449a:	605d      	str	r5, [r3, #4]
   1449c:	6098      	str	r0, [r3, #8]
   1449e:	60da      	str	r2, [r3, #12]
        return 0;
   144a0:	2000      	movs	r0, #0
   144a2:	e7e7      	b.n	14474 <ble_uuid_init_from_buf+0x22>

000144a4 <ble_uuid_cmp>:

int
ble_uuid_cmp(const ble_uuid_t *uuid1, const ble_uuid_t *uuid2)
{
   144a4:	b508      	push	{r3, lr}
    VERIFY_UUID(uuid1);
    VERIFY_UUID(uuid2);

    if (uuid1->type != uuid2->type) {
   144a6:	7803      	ldrb	r3, [r0, #0]
   144a8:	780a      	ldrb	r2, [r1, #0]
   144aa:	4293      	cmp	r3, r2
   144ac:	d001      	beq.n	144b2 <ble_uuid_cmp+0xe>
      return uuid1->type - uuid2->type;
   144ae:	1a98      	subs	r0, r3, r2
    }

    BLE_HS_DBG_ASSERT(0);

    return -1;
}
   144b0:	bd08      	pop	{r3, pc}
    switch (uuid1->type) {
   144b2:	2b20      	cmp	r3, #32
   144b4:	d00a      	beq.n	144cc <ble_uuid_cmp+0x28>
   144b6:	2b80      	cmp	r3, #128	; 0x80
   144b8:	d00c      	beq.n	144d4 <ble_uuid_cmp+0x30>
   144ba:	2b10      	cmp	r3, #16
   144bc:	d002      	beq.n	144c4 <ble_uuid_cmp+0x20>
    return -1;
   144be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   144c2:	e7f5      	b.n	144b0 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID16(uuid1)->value - (int) BLE_UUID16(uuid2)->value;
   144c4:	8840      	ldrh	r0, [r0, #2]
   144c6:	884b      	ldrh	r3, [r1, #2]
   144c8:	1ac0      	subs	r0, r0, r3
   144ca:	e7f1      	b.n	144b0 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID32(uuid1)->value - (int) BLE_UUID32(uuid2)->value;
   144cc:	6840      	ldr	r0, [r0, #4]
   144ce:	684b      	ldr	r3, [r1, #4]
   144d0:	1ac0      	subs	r0, r0, r3
   144d2:	e7ed      	b.n	144b0 <ble_uuid_cmp+0xc>
        return memcmp(BLE_UUID128(uuid1)->value, BLE_UUID128(uuid2)->value, 16);
   144d4:	2210      	movs	r2, #16
   144d6:	3101      	adds	r1, #1
   144d8:	3001      	adds	r0, #1
   144da:	f7f7 f9b5 	bl	b848 <memcmp>
   144de:	e7e7      	b.n	144b0 <ble_uuid_cmp+0xc>

000144e0 <ble_uuid_to_str>:
    }
}

char *
ble_uuid_to_str(const ble_uuid_t *uuid, char *dst)
{
   144e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144e4:	b091      	sub	sp, #68	; 0x44
   144e6:	460c      	mov	r4, r1
    const uint8_t *u8p;

    switch (uuid->type) {
   144e8:	7803      	ldrb	r3, [r0, #0]
   144ea:	2b20      	cmp	r3, #32
   144ec:	d00f      	beq.n	1450e <ble_uuid_to_str+0x2e>
   144ee:	2b80      	cmp	r3, #128	; 0x80
   144f0:	d013      	beq.n	1451a <ble_uuid_to_str+0x3a>
   144f2:	2b10      	cmp	r3, #16
   144f4:	d002      	beq.n	144fc <ble_uuid_to_str+0x1c>
                u8p[11], u8p[10],  u8p[9],  u8p[8],
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
        break;
    default:
        dst[0] = '\0';
   144f6:	2300      	movs	r3, #0
   144f8:	700b      	strb	r3, [r1, #0]
        break;
   144fa:	e004      	b.n	14506 <ble_uuid_to_str+0x26>
        sprintf(dst, "0x%04" PRIx16, BLE_UUID16(uuid)->value);
   144fc:	8842      	ldrh	r2, [r0, #2]
   144fe:	4920      	ldr	r1, [pc, #128]	; (14580 <ble_uuid_to_str+0xa0>)
   14500:	4620      	mov	r0, r4
   14502:	f007 fdeb 	bl	1c0dc <sprintf>
    }

    return dst;
}
   14506:	4620      	mov	r0, r4
   14508:	b011      	add	sp, #68	; 0x44
   1450a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sprintf(dst, "0x%08" PRIx32, BLE_UUID32(uuid)->value);
   1450e:	6842      	ldr	r2, [r0, #4]
   14510:	491c      	ldr	r1, [pc, #112]	; (14584 <ble_uuid_to_str+0xa4>)
   14512:	4620      	mov	r0, r4
   14514:	f007 fde2 	bl	1c0dc <sprintf>
        break;
   14518:	e7f5      	b.n	14506 <ble_uuid_to_str+0x26>
                u8p[15], u8p[14], u8p[13], u8p[12],
   1451a:	7c03      	ldrb	r3, [r0, #16]
   1451c:	930e      	str	r3, [sp, #56]	; 0x38
   1451e:	7bc1      	ldrb	r1, [r0, #15]
   14520:	910f      	str	r1, [sp, #60]	; 0x3c
   14522:	7b85      	ldrb	r5, [r0, #14]
   14524:	9500      	str	r5, [sp, #0]
   14526:	7b43      	ldrb	r3, [r0, #13]
                u8p[11], u8p[10],  u8p[9],  u8p[8],
   14528:	7b02      	ldrb	r2, [r0, #12]
   1452a:	7ac1      	ldrb	r1, [r0, #11]
   1452c:	7a85      	ldrb	r5, [r0, #10]
   1452e:	7a46      	ldrb	r6, [r0, #9]
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
   14530:	7a07      	ldrb	r7, [r0, #8]
   14532:	f890 c007 	ldrb.w	ip, [r0, #7]
   14536:	f890 e006 	ldrb.w	lr, [r0, #6]
   1453a:	f890 8005 	ldrb.w	r8, [r0, #5]
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
   1453e:	f890 9004 	ldrb.w	r9, [r0, #4]
   14542:	f890 a003 	ldrb.w	sl, [r0, #3]
   14546:	f890 b002 	ldrb.w	fp, [r0, #2]
   1454a:	7840      	ldrb	r0, [r0, #1]
        sprintf(dst, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-"
   1454c:	900d      	str	r0, [sp, #52]	; 0x34
   1454e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   14552:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   14556:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   1455a:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   1455e:	f8cd e020 	str.w	lr, [sp, #32]
   14562:	f8cd c01c 	str.w	ip, [sp, #28]
   14566:	9706      	str	r7, [sp, #24]
   14568:	9605      	str	r6, [sp, #20]
   1456a:	9504      	str	r5, [sp, #16]
   1456c:	9103      	str	r1, [sp, #12]
   1456e:	9202      	str	r2, [sp, #8]
   14570:	9301      	str	r3, [sp, #4]
   14572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   14574:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14576:	4904      	ldr	r1, [pc, #16]	; (14588 <ble_uuid_to_str+0xa8>)
   14578:	4620      	mov	r0, r4
   1457a:	f007 fdaf 	bl	1c0dc <sprintf>
        break;
   1457e:	e7c2      	b.n	14506 <ble_uuid_to_str+0x26>
   14580:	00028ff0 	.word	0x00028ff0
   14584:	00028ff8 	.word	0x00028ff8
   14588:	00029000 	.word	0x00029000

0001458c <ble_uuid_u16>:
uint16_t
ble_uuid_u16(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   1458c:	7803      	ldrb	r3, [r0, #0]
   1458e:	2b10      	cmp	r3, #16
   14590:	d001      	beq.n	14596 <ble_uuid_u16+0xa>
   14592:	2000      	movs	r0, #0
}
   14594:	4770      	bx	lr
    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   14596:	8840      	ldrh	r0, [r0, #2]
   14598:	4770      	bx	lr

0001459a <ble_uuid_init_from_att_buf>:
    return rc;
}

int
ble_uuid_init_from_att_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   1459a:	b570      	push	{r4, r5, r6, lr}
    int rc = 0;

    if (len == 2) {
   1459c:	2a02      	cmp	r2, #2
   1459e:	d003      	beq.n	145a8 <ble_uuid_init_from_att_buf+0xe>
        uuid->u.type = BLE_UUID_TYPE_16;
        uuid->u16.value = get_le16(buf);
    } else if (len == 16) {
   145a0:	2a10      	cmp	r2, #16
   145a2:	d00a      	beq.n	145ba <ble_uuid_init_from_att_buf+0x20>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
    } else {
        rc = BLE_HS_EINVAL;
   145a4:	2003      	movs	r0, #3
    }

    return rc;
}
   145a6:	bd70      	pop	{r4, r5, r6, pc}
   145a8:	4604      	mov	r4, r0
        uuid->u.type = BLE_UUID_TYPE_16;
   145aa:	2310      	movs	r3, #16
   145ac:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   145ae:	4608      	mov	r0, r1
   145b0:	f007 fb3d 	bl	1bc2e <get_le16>
   145b4:	8060      	strh	r0, [r4, #2]
    int rc = 0;
   145b6:	2000      	movs	r0, #0
   145b8:	e7f5      	b.n	145a6 <ble_uuid_init_from_att_buf+0xc>
        uuid->u.type = BLE_UUID_TYPE_128;
   145ba:	4603      	mov	r3, r0
   145bc:	2280      	movs	r2, #128	; 0x80
   145be:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   145c2:	680e      	ldr	r6, [r1, #0]
   145c4:	684d      	ldr	r5, [r1, #4]
   145c6:	688c      	ldr	r4, [r1, #8]
   145c8:	68ca      	ldr	r2, [r1, #12]
   145ca:	f8c0 6001 	str.w	r6, [r0, #1]
   145ce:	605d      	str	r5, [r3, #4]
   145d0:	609c      	str	r4, [r3, #8]
   145d2:	60da      	str	r2, [r3, #12]
    int rc = 0;
   145d4:	2000      	movs	r0, #0
   145d6:	e7e6      	b.n	145a6 <ble_uuid_init_from_att_buf+0xc>

000145d8 <ble_uuid_init_from_att_mbuf>:
{
   145d8:	b530      	push	{r4, r5, lr}
   145da:	b085      	sub	sp, #20
   145dc:	4605      	mov	r5, r0
   145de:	4608      	mov	r0, r1
   145e0:	4611      	mov	r1, r2
   145e2:	461c      	mov	r4, r3
    rc = os_mbuf_copydata(om, off, len, val);
   145e4:	466b      	mov	r3, sp
   145e6:	4622      	mov	r2, r4
   145e8:	f7f5 ff6e 	bl	a4c8 <os_mbuf_copydata>
    if (rc != 0) {
   145ec:	4603      	mov	r3, r0
   145ee:	b110      	cbz	r0, 145f6 <ble_uuid_init_from_att_mbuf+0x1e>
}
   145f0:	4618      	mov	r0, r3
   145f2:	b005      	add	sp, #20
   145f4:	bd30      	pop	{r4, r5, pc}
    rc = ble_uuid_init_from_att_buf(uuid, val, len);
   145f6:	4622      	mov	r2, r4
   145f8:	4669      	mov	r1, sp
   145fa:	4628      	mov	r0, r5
   145fc:	f7ff ffcd 	bl	1459a <ble_uuid_init_from_att_buf>
   14600:	4603      	mov	r3, r0
    return rc;
   14602:	e7f5      	b.n	145f0 <ble_uuid_init_from_att_mbuf+0x18>

00014604 <ble_uuid_flat>:
    return 0;
}

int
ble_uuid_flat(const ble_uuid_t *uuid, void *dst)
{
   14604:	b570      	push	{r4, r5, r6, lr}
   14606:	4605      	mov	r5, r0
   14608:	460c      	mov	r4, r1
    VERIFY_UUID(uuid);

    switch (uuid->type) {
   1460a:	7803      	ldrb	r3, [r0, #0]
   1460c:	2b20      	cmp	r3, #32
   1460e:	d00b      	beq.n	14628 <ble_uuid_flat+0x24>
   14610:	2b80      	cmp	r3, #128	; 0x80
   14612:	d016      	beq.n	14642 <ble_uuid_flat+0x3e>
   14614:	2b10      	cmp	r3, #16
   14616:	d001      	beq.n	1461c <ble_uuid_flat+0x18>
        break;
    case BLE_UUID_TYPE_128:
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
        break;
    default:
        return BLE_HS_EINVAL;
   14618:	2003      	movs	r0, #3
   1461a:	e004      	b.n	14626 <ble_uuid_flat+0x22>
        put_le16(dst, BLE_UUID16(uuid)->value);
   1461c:	8841      	ldrh	r1, [r0, #2]
   1461e:	4620      	mov	r0, r4
   14620:	f007 fae4 	bl	1bbec <put_le16>
    }

    return 0;
   14624:	2000      	movs	r0, #0
}
   14626:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(dst, ble_uuid_base, 16);
   14628:	4e0b      	ldr	r6, [pc, #44]	; (14658 <ble_uuid_flat+0x54>)
   1462a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1462c:	6020      	str	r0, [r4, #0]
   1462e:	6061      	str	r1, [r4, #4]
   14630:	60a2      	str	r2, [r4, #8]
   14632:	4620      	mov	r0, r4
   14634:	f840 3f0c 	str.w	r3, [r0, #12]!
        put_le32(dst + 12, BLE_UUID32(uuid)->value);
   14638:	6869      	ldr	r1, [r5, #4]
   1463a:	f007 fadb 	bl	1bbf4 <put_le32>
    return 0;
   1463e:	2000      	movs	r0, #0
        break;
   14640:	e7f1      	b.n	14626 <ble_uuid_flat+0x22>
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
   14642:	f855 0f01 	ldr.w	r0, [r5, #1]!
   14646:	6869      	ldr	r1, [r5, #4]
   14648:	68aa      	ldr	r2, [r5, #8]
   1464a:	68eb      	ldr	r3, [r5, #12]
   1464c:	6020      	str	r0, [r4, #0]
   1464e:	6061      	str	r1, [r4, #4]
   14650:	60a2      	str	r2, [r4, #8]
   14652:	60e3      	str	r3, [r4, #12]
    return 0;
   14654:	2000      	movs	r0, #0
        break;
   14656:	e7e6      	b.n	14626 <ble_uuid_flat+0x22>
   14658:	00028fe0 	.word	0x00028fe0

0001465c <ble_uuid_length>:
int
ble_uuid_length(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type >> 3;
   1465c:	7800      	ldrb	r0, [r0, #0]
}
   1465e:	08c0      	lsrs	r0, r0, #3
   14660:	4770      	bx	lr

00014662 <ble_uuid_to_mbuf>:
{
   14662:	b538      	push	{r3, r4, r5, lr}
   14664:	4605      	mov	r5, r0
   14666:	460c      	mov	r4, r1
    len = ble_uuid_length(uuid);
   14668:	f7ff fff8 	bl	1465c <ble_uuid_length>
    buf = os_mbuf_extend(om, len);
   1466c:	b281      	uxth	r1, r0
   1466e:	4620      	mov	r0, r4
   14670:	f7f6 f8b0 	bl	a7d4 <os_mbuf_extend>
    if (buf == NULL) {
   14674:	b128      	cbz	r0, 14682 <ble_uuid_to_mbuf+0x20>
   14676:	4601      	mov	r1, r0
    ble_uuid_flat(uuid, buf);
   14678:	4628      	mov	r0, r5
   1467a:	f7ff ffc3 	bl	14604 <ble_uuid_flat>
    return 0;
   1467e:	2000      	movs	r0, #0
}
   14680:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOMEM;
   14682:	2006      	movs	r0, #6
   14684:	e7fc      	b.n	14680 <ble_uuid_to_mbuf+0x1e>
	...

00014688 <ble_att_rx_dispatch_entry_find>:
    STATS_NAME(ble_att_stats, write_cmd_tx)
STATS_NAME_END(ble_att_stats)

static const struct ble_att_rx_dispatch_entry *
ble_att_rx_dispatch_entry_find(uint8_t op)
{
   14688:	4601      	mov	r1, r0
    const struct ble_att_rx_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   1468a:	2300      	movs	r3, #0
   1468c:	2b1a      	cmp	r3, #26
   1468e:	d809      	bhi.n	146a4 <ble_att_rx_dispatch_entry_find+0x1c>
        entry = ble_att_rx_dispatch + i;
   14690:	4a06      	ldr	r2, [pc, #24]	; (146ac <ble_att_rx_dispatch_entry_find+0x24>)
   14692:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->bde_op == op) {
   14696:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   1469a:	428a      	cmp	r2, r1
   1469c:	d005      	beq.n	146aa <ble_att_rx_dispatch_entry_find+0x22>
            return entry;
        }

        if (entry->bde_op > op) {
   1469e:	d803      	bhi.n	146a8 <ble_att_rx_dispatch_entry_find+0x20>
    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   146a0:	3301      	adds	r3, #1
   146a2:	e7f3      	b.n	1468c <ble_att_rx_dispatch_entry_find+0x4>
            break;
        }
    }

    return NULL;
   146a4:	2000      	movs	r0, #0
   146a6:	4770      	bx	lr
   146a8:	2000      	movs	r0, #0
}
   146aa:	4770      	bx	lr
   146ac:	00029048 	.word	0x00029048

000146b0 <ble_att_rx_handle_unknown_request>:
static void
ble_att_rx_handle_unknown_request(uint8_t op, uint16_t conn_handle,
                                  struct os_mbuf **om)
{
    /* If this is command (bit6 is set to 1), do nothing */
    if (op & 0x40) {
   146b0:	f010 0f40 	tst.w	r0, #64	; 0x40
   146b4:	d000      	beq.n	146b8 <ble_att_rx_handle_unknown_request+0x8>
   146b6:	4770      	bx	lr
{
   146b8:	b570      	push	{r4, r5, r6, lr}
   146ba:	b082      	sub	sp, #8
   146bc:	4615      	mov	r5, r2
   146be:	460e      	mov	r6, r1
   146c0:	4604      	mov	r4, r0
        return;
    }

    os_mbuf_adj(*om, OS_MBUF_PKTLEN(*om));
   146c2:	6810      	ldr	r0, [r2, #0]
   146c4:	8a01      	ldrh	r1, [r0, #16]
   146c6:	f7f5 ff2c 	bl	a522 <os_mbuf_adj>
    ble_att_svr_tx_error_rsp(conn_handle, *om, op, 0,
   146ca:	2306      	movs	r3, #6
   146cc:	9300      	str	r3, [sp, #0]
   146ce:	2300      	movs	r3, #0
   146d0:	4622      	mov	r2, r4
   146d2:	6829      	ldr	r1, [r5, #0]
   146d4:	4630      	mov	r0, r6
   146d6:	f001 f88c 	bl	157f2 <ble_att_svr_tx_error_rsp>
                             BLE_ATT_ERR_REQ_NOT_SUPPORTED);

    *om = NULL;
   146da:	2300      	movs	r3, #0
   146dc:	602b      	str	r3, [r5, #0]
}
   146de:	b002      	add	sp, #8
   146e0:	bd70      	pop	{r4, r5, r6, pc}

000146e2 <ble_att_rx>:

static int
ble_att_rx(struct ble_l2cap_chan *chan)
{
   146e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   146e6:	b082      	sub	sp, #8
   146e8:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    conn_handle = ble_l2cap_get_conn_handle(chan);
   146ea:	f7fd fb62 	bl	11db2 <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   146ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
   146f2:	4298      	cmp	r0, r3
   146f4:	d02c      	beq.n	14750 <ble_att_rx+0x6e>
   146f6:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   146f8:	f104 0610 	add.w	r6, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   146fc:	f10d 0307 	add.w	r3, sp, #7
   14700:	2201      	movs	r2, #1
   14702:	2100      	movs	r1, #0
   14704:	6920      	ldr	r0, [r4, #16]
   14706:	f7f5 fedf 	bl	a4c8 <os_mbuf_copydata>
    if (rc != 0) {
   1470a:	bb30      	cbnz	r0, 1475a <ble_att_rx+0x78>
        return BLE_HS_EMSGSIZE;
    }

    entry = ble_att_rx_dispatch_entry_find(op);
   1470c:	f89d 7007 	ldrb.w	r7, [sp, #7]
   14710:	4638      	mov	r0, r7
   14712:	f7ff ffb9 	bl	14688 <ble_att_rx_dispatch_entry_find>
    if (entry == NULL) {
   14716:	4680      	mov	r8, r0
   14718:	b198      	cbz	r0, 14742 <ble_att_rx+0x60>
    }

    ble_att_inc_rx_stat(op);

    /* Strip L2CAP ATT header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   1471a:	2101      	movs	r1, #1
   1471c:	6920      	ldr	r0, [r4, #16]
   1471e:	f7f5 ff00 	bl	a522 <os_mbuf_adj>

    rc = entry->bde_fn(conn_handle, om);
   14722:	f8d8 3004 	ldr.w	r3, [r8, #4]
   14726:	4631      	mov	r1, r6
   14728:	4628      	mov	r0, r5
   1472a:	4798      	blx	r3
    if (rc != 0) {
   1472c:	4604      	mov	r4, r0
   1472e:	b180      	cbz	r0, 14752 <ble_att_rx+0x70>
        if (rc == BLE_HS_ENOTSUP) {
   14730:	2808      	cmp	r0, #8
   14732:	d10e      	bne.n	14752 <ble_att_rx+0x70>
            ble_att_rx_handle_unknown_request(op, conn_handle, om);
   14734:	4632      	mov	r2, r6
   14736:	4629      	mov	r1, r5
   14738:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1473c:	f7ff ffb8 	bl	146b0 <ble_att_rx_handle_unknown_request>
   14740:	e007      	b.n	14752 <ble_att_rx+0x70>
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
   14742:	4632      	mov	r2, r6
   14744:	4629      	mov	r1, r5
   14746:	4638      	mov	r0, r7
   14748:	f7ff ffb2 	bl	146b0 <ble_att_rx_handle_unknown_request>
        return BLE_HS_ENOTSUP;
   1474c:	2408      	movs	r4, #8
   1474e:	e000      	b.n	14752 <ble_att_rx+0x70>
        return BLE_HS_ENOTCONN;
   14750:	2407      	movs	r4, #7
        }
        return rc;
    }

    return 0;
}
   14752:	4620      	mov	r0, r4
   14754:	b002      	add	sp, #8
   14756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EMSGSIZE;
   1475a:	2404      	movs	r4, #4
   1475c:	e7f9      	b.n	14752 <ble_att_rx+0x70>

0001475e <ble_att_conn_chan_find>:
{
   1475e:	b508      	push	{r3, lr}
    return ble_hs_misc_conn_chan_find(conn_handle, BLE_L2CAP_CID_ATT,
   14760:	4613      	mov	r3, r2
   14762:	460a      	mov	r2, r1
   14764:	2104      	movs	r1, #4
   14766:	f7fc ffb8 	bl	116da <ble_hs_misc_conn_chan_find>
}
   1476a:	bd08      	pop	{r3, pc}

0001476c <ble_att_inc_tx_stat>:
}
   1476c:	4770      	bx	lr

0001476e <ble_att_set_peer_mtu>:
    if (peer_mtu < BLE_ATT_MTU_DFLT) {
   1476e:	2916      	cmp	r1, #22
   14770:	d800      	bhi.n	14774 <ble_att_set_peer_mtu+0x6>
        peer_mtu = BLE_ATT_MTU_DFLT;
   14772:	2117      	movs	r1, #23
    chan->peer_mtu = peer_mtu;
   14774:	8181      	strh	r1, [r0, #12]
}
   14776:	4770      	bx	lr

00014778 <ble_att_chan_mtu>:
{
   14778:	b510      	push	{r4, lr}
   1477a:	4604      	mov	r4, r0
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   1477c:	f7fd fae6 	bl	11d4c <ble_l2cap_is_mtu_req_sent>
   14780:	b130      	cbz	r0, 14790 <ble_att_chan_mtu+0x18>
        chan->peer_mtu == 0) {
   14782:	89a0      	ldrh	r0, [r4, #12]
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   14784:	b130      	cbz	r0, 14794 <ble_att_chan_mtu+0x1c>
        mtu = min(chan->my_mtu, chan->peer_mtu);
   14786:	8963      	ldrh	r3, [r4, #10]
   14788:	4298      	cmp	r0, r3
   1478a:	bf28      	it	cs
   1478c:	4618      	movcs	r0, r3
}
   1478e:	bd10      	pop	{r4, pc}
        mtu = BLE_ATT_MTU_DFLT;
   14790:	2017      	movs	r0, #23
   14792:	e7fc      	b.n	1478e <ble_att_chan_mtu+0x16>
   14794:	2017      	movs	r0, #23
   14796:	e7fa      	b.n	1478e <ble_att_chan_mtu+0x16>

00014798 <ble_att_truncate_to_mtu>:
{
   14798:	b510      	push	{r4, lr}
   1479a:	460c      	mov	r4, r1
    mtu = ble_att_chan_mtu(att_chan);
   1479c:	f7ff ffec 	bl	14778 <ble_att_chan_mtu>
    extra_len = OS_MBUF_PKTLEN(txom) - mtu;
   147a0:	8a21      	ldrh	r1, [r4, #16]
   147a2:	1a09      	subs	r1, r1, r0
    if (extra_len > 0) {
   147a4:	2900      	cmp	r1, #0
   147a6:	dd03      	ble.n	147b0 <ble_att_truncate_to_mtu+0x18>
        os_mbuf_adj(txom, -extra_len);
   147a8:	4249      	negs	r1, r1
   147aa:	4620      	mov	r0, r4
   147ac:	f7f5 feb9 	bl	a522 <os_mbuf_adj>
}
   147b0:	bd10      	pop	{r4, pc}

000147b2 <ble_att_mtu>:
{
   147b2:	b510      	push	{r4, lr}
   147b4:	b082      	sub	sp, #8
   147b6:	4604      	mov	r4, r0
    ble_hs_lock();
   147b8:	f7fb f9e6 	bl	fb88 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   147bc:	aa01      	add	r2, sp, #4
   147be:	4669      	mov	r1, sp
   147c0:	4620      	mov	r0, r4
   147c2:	f7ff ffcc 	bl	1475e <ble_att_conn_chan_find>
    if (rc == 0) {
   147c6:	b128      	cbz	r0, 147d4 <ble_att_mtu+0x22>
        mtu = 0;
   147c8:	2400      	movs	r4, #0
    ble_hs_unlock();
   147ca:	f7fb f9e1 	bl	fb90 <ble_hs_unlock>
}
   147ce:	4620      	mov	r0, r4
   147d0:	b002      	add	sp, #8
   147d2:	bd10      	pop	{r4, pc}
        mtu = ble_att_chan_mtu(chan);
   147d4:	9801      	ldr	r0, [sp, #4]
   147d6:	f7ff ffcf 	bl	14778 <ble_att_chan_mtu>
   147da:	4604      	mov	r4, r0
   147dc:	e7f5      	b.n	147ca <ble_att_mtu+0x18>
	...

000147e0 <ble_att_create_chan>:
    return 0;
}

struct ble_l2cap_chan *
ble_att_create_chan(uint16_t conn_handle)
{
   147e0:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   147e2:	f7fd fa91 	bl	11d08 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   147e6:	4603      	mov	r3, r0
   147e8:	b138      	cbz	r0, 147fa <ble_att_create_chan+0x1a>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_ATT;
   147ea:	2204      	movs	r2, #4
   147ec:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_ATT;
   147ee:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = ble_att_preferred_mtu_val;
   147f0:	4a03      	ldr	r2, [pc, #12]	; (14800 <ble_att_create_chan+0x20>)
   147f2:	8812      	ldrh	r2, [r2, #0]
   147f4:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_att_rx;
   147f6:	4a03      	ldr	r2, [pc, #12]	; (14804 <ble_att_create_chan+0x24>)
   147f8:	6182      	str	r2, [r0, #24]

    return chan;
}
   147fa:	4618      	mov	r0, r3
   147fc:	bd08      	pop	{r3, pc}
   147fe:	bf00      	nop
   14800:	200077a4 	.word	0x200077a4
   14804:	000146e3 	.word	0x000146e3

00014808 <ble_att_init>:
int
ble_att_init(void)
{
    int rc;

    ble_att_preferred_mtu_val = MYNEWT_VAL(BLE_ATT_PREFERRED_MTU);
   14808:	4b02      	ldr	r3, [pc, #8]	; (14814 <ble_att_init+0xc>)
   1480a:	f44f 7280 	mov.w	r2, #256	; 0x100
   1480e:	801a      	strh	r2, [r3, #0]
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   14810:	2000      	movs	r0, #0
   14812:	4770      	bx	lr
   14814:	200077a4 	.word	0x200077a4

00014818 <ble_att_clt_rx_error>:
 * $error response                                                           *
 *****************************************************************************/

int
ble_att_clt_rx_error(uint16_t conn_handle, struct os_mbuf **rxom)
{
   14818:	b570      	push	{r4, r5, r6, lr}
   1481a:	4606      	mov	r6, r0
   1481c:	460c      	mov	r4, r1
    struct ble_att_error_rsp *rsp;
    int rc;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   1481e:	2104      	movs	r1, #4
   14820:	4620      	mov	r0, r4
   14822:	f7fc ff38 	bl	11696 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   14826:	4605      	mov	r5, r0
   14828:	b108      	cbz	r0, 1482e <ble_att_clt_rx_error+0x16>

    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
                     le16toh(rsp->baep_error_code));

    return 0;
}
   1482a:	4628      	mov	r0, r5
   1482c:	bd70      	pop	{r4, r5, r6, pc}
    rsp = (struct ble_att_error_rsp *)(*rxom)->om_data;
   1482e:	6823      	ldr	r3, [r4, #0]
   14830:	681b      	ldr	r3, [r3, #0]
    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
   14832:	78da      	ldrb	r2, [r3, #3]
   14834:	f8b3 1001 	ldrh.w	r1, [r3, #1]
   14838:	4630      	mov	r0, r6
   1483a:	f7fa f8b6 	bl	e9aa <ble_gattc_rx_err>
    return 0;
   1483e:	e7f4      	b.n	1482a <ble_att_clt_rx_error+0x12>

00014840 <ble_att_clt_rx_mtu>:
    return rc;
}

int
ble_att_clt_rx_mtu(uint16_t conn_handle, struct os_mbuf **rxom)
{
   14840:	b570      	push	{r4, r5, r6, lr}
   14842:	b082      	sub	sp, #8
   14844:	4605      	mov	r5, r0
   14846:	460e      	mov	r6, r1
    uint16_t mtu;
    int rc;

    mtu = 0;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*cmd));
   14848:	2102      	movs	r1, #2
   1484a:	4630      	mov	r0, r6
   1484c:	f7fc ff23 	bl	11696 <ble_hs_mbuf_pullup_base>
    if (rc == 0) {
   14850:	b148      	cbz	r0, 14866 <ble_att_clt_rx_mtu+0x26>
   14852:	4604      	mov	r4, r0
    mtu = 0;
   14854:	2600      	movs	r6, #0
        if (rc == 0) {
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
        }
    }

    ble_gattc_rx_mtu(conn_handle, rc, mtu);
   14856:	4632      	mov	r2, r6
   14858:	4621      	mov	r1, r4
   1485a:	4628      	mov	r0, r5
   1485c:	f7fa f8bb 	bl	e9d6 <ble_gattc_rx_mtu>
    return rc;
}
   14860:	4620      	mov	r0, r4
   14862:	b002      	add	sp, #8
   14864:	bd70      	pop	{r4, r5, r6, pc}
        cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   14866:	6833      	ldr	r3, [r6, #0]
   14868:	681e      	ldr	r6, [r3, #0]
        ble_hs_lock();
   1486a:	f7fb f98d 	bl	fb88 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   1486e:	aa01      	add	r2, sp, #4
   14870:	2100      	movs	r1, #0
   14872:	4628      	mov	r0, r5
   14874:	f7ff ff73 	bl	1475e <ble_att_conn_chan_find>
        if (rc == 0) {
   14878:	4604      	mov	r4, r0
   1487a:	b150      	cbz	r0, 14892 <ble_att_clt_rx_mtu+0x52>
    mtu = 0;
   1487c:	2600      	movs	r6, #0
        ble_hs_unlock();
   1487e:	f7fb f987 	bl	fb90 <ble_hs_unlock>
        if (rc == 0) {
   14882:	2c00      	cmp	r4, #0
   14884:	d1e7      	bne.n	14856 <ble_att_clt_rx_mtu+0x16>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   14886:	4632      	mov	r2, r6
   14888:	2104      	movs	r1, #4
   1488a:	4628      	mov	r0, r5
   1488c:	f7f9 f95b 	bl	db46 <ble_gap_mtu_event>
   14890:	e7e1      	b.n	14856 <ble_att_clt_rx_mtu+0x16>
            ble_att_set_peer_mtu(chan, le16toh(cmd->bamc_mtu));
   14892:	8831      	ldrh	r1, [r6, #0]
   14894:	9801      	ldr	r0, [sp, #4]
   14896:	f7ff ff6a 	bl	1476e <ble_att_set_peer_mtu>
            mtu = ble_att_chan_mtu(chan);
   1489a:	9801      	ldr	r0, [sp, #4]
   1489c:	f7ff ff6c 	bl	14778 <ble_att_chan_mtu>
   148a0:	4606      	mov	r6, r0
   148a2:	e7ec      	b.n	1487e <ble_att_clt_rx_mtu+0x3e>

000148a4 <ble_att_clt_tx_find_info>:

    req->bafq_start_handle = htole16(start_handle);
    req->bafq_end_handle = htole16(end_handle);

    return ble_att_tx(conn_handle, txom);
}
   148a4:	2008      	movs	r0, #8
   148a6:	4770      	bx	lr

000148a8 <ble_att_clt_rx_find_info>:

done:
    /* Notify GATT that response processing is done. */
    ble_gattc_rx_find_info_complete(conn_handle, rc);
    return rc;
}
   148a8:	2008      	movs	r0, #8
   148aa:	4770      	bx	lr

000148ac <ble_att_clt_tx_find_type_value>:
    req->bavq_end_handle = htole16(end_handle);
    req->bavq_attr_type = htole16(attribute_type);
    memcpy(req->bavq_value, attribute_value, value_len);

    return ble_att_tx(conn_handle, txom);
}
   148ac:	2008      	movs	r0, #8
   148ae:	4770      	bx	lr

000148b0 <ble_att_clt_rx_find_type_value>:

    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_find_type_value_complete(conn_handle, rc);

    return 0;
}
   148b0:	2008      	movs	r0, #8
   148b2:	4770      	bx	lr

000148b4 <ble_att_clt_tx_read_type>:
    req->batq_end_handle = htole16(end_handle);

    ble_uuid_flat(uuid, req->uuid);

    return ble_att_tx(conn_handle, txom);
}
   148b4:	2008      	movs	r0, #8
   148b6:	4770      	bx	lr

000148b8 <ble_att_clt_rx_read_type>:
done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_type_complete(conn_handle, rc);
    return rc;

}
   148b8:	2008      	movs	r0, #8
   148ba:	4770      	bx	lr

000148bc <ble_att_clt_tx_read>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   148bc:	2008      	movs	r0, #8
   148be:	4770      	bx	lr

000148c0 <ble_att_clt_rx_read>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_rsp(conn_handle, 0, rxom);
    return 0;
}
   148c0:	2008      	movs	r0, #8
   148c2:	4770      	bx	lr

000148c4 <ble_att_clt_tx_read_blob>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   148c4:	2008      	movs	r0, #8
   148c6:	4770      	bx	lr

000148c8 <ble_att_clt_rx_read_blob>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_blob_rsp(conn_handle, 0, rxom);
    return 0;
}
   148c8:	2008      	movs	r0, #8
   148ca:	4770      	bx	lr

000148cc <ble_att_clt_rx_read_mult>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_mult_rsp(conn_handle, 0, rxom);
    return 0;
}
   148cc:	2008      	movs	r0, #8
   148ce:	4770      	bx	lr

000148d0 <ble_att_clt_tx_read_group_type>:
    req->bagq_start_handle = htole16(start_handle);
    req->bagq_end_handle = htole16(end_handle);
    ble_uuid_flat(uuid, req->uuid);

    return ble_att_tx(conn_handle, txom);
}
   148d0:	2008      	movs	r0, #8
   148d2:	4770      	bx	lr

000148d4 <ble_att_clt_rx_read_group_type>:

done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_group_type_complete(conn_handle, rc);
    return rc;
}
   148d4:	2008      	movs	r0, #8
   148d6:	4770      	bx	lr

000148d8 <ble_att_clt_rx_write>:
#endif

    /* No payload. */
    ble_gattc_rx_write_rsp(conn_handle);
    return 0;
}
   148d8:	2008      	movs	r0, #8
   148da:	4770      	bx	lr

000148dc <ble_att_clt_tx_prep_write>:
    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
    return rc;
}
   148dc:	2008      	movs	r0, #8
   148de:	4770      	bx	lr

000148e0 <ble_att_clt_rx_prep_write>:

done:
    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_prep_write_rsp(conn_handle, rc, handle, offset, rxom);
    return rc;
}
   148e0:	2008      	movs	r0, #8
   148e2:	4770      	bx	lr

000148e4 <ble_att_clt_tx_exec_write>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   148e4:	2008      	movs	r0, #8
   148e6:	4770      	bx	lr

000148e8 <ble_att_clt_rx_exec_write>:
    return BLE_HS_ENOTSUP;
#endif

    ble_gattc_rx_exec_write_rsp(conn_handle, 0);
    return 0;
}
   148e8:	2008      	movs	r0, #8
   148ea:	4770      	bx	lr

000148ec <ble_att_clt_tx_notify>:
 *****************************************************************************/

int
ble_att_clt_tx_notify(uint16_t conn_handle, uint16_t handle,
                      struct os_mbuf *txom)
{
   148ec:	b570      	push	{r4, r5, r6, lr}
   148ee:	b082      	sub	sp, #8
   148f0:	4615      	mov	r5, r2

    struct ble_att_notify_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   148f2:	b1a1      	cbz	r1, 1491e <ble_att_clt_tx_notify+0x32>
   148f4:	4604      	mov	r4, r0
   148f6:	460e      	mov	r6, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    req = ble_att_cmd_get(BLE_ATT_OP_NOTIFY_REQ, sizeof(*req), &txom2);
   148f8:	aa01      	add	r2, sp, #4
   148fa:	2102      	movs	r1, #2
   148fc:	201b      	movs	r0, #27
   148fe:	f000 f84d 	bl	1499c <ble_att_cmd_get>
    if (req == NULL) {
   14902:	b908      	cbnz	r0, 14908 <ble_att_clt_tx_notify+0x1c>
        rc = BLE_HS_ENOMEM;
   14904:	2406      	movs	r4, #6
   14906:	e00b      	b.n	14920 <ble_att_clt_tx_notify+0x34>
        goto err;
    }

    req->banq_handle = htole16(handle);
   14908:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   1490a:	4629      	mov	r1, r5
   1490c:	9801      	ldr	r0, [sp, #4]
   1490e:	f7f5 ff3e 	bl	a78e <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   14912:	9901      	ldr	r1, [sp, #4]
   14914:	4620      	mov	r0, r4
   14916:	f000 f851 	bl	149bc <ble_att_tx>
   1491a:	4604      	mov	r4, r0
   1491c:	e003      	b.n	14926 <ble_att_clt_tx_notify+0x3a>
        rc = BLE_HS_EINVAL;
   1491e:	2403      	movs	r4, #3

err:
    os_mbuf_free_chain(txom);
   14920:	4628      	mov	r0, r5
   14922:	f7f5 fccf 	bl	a2c4 <os_mbuf_free_chain>
    return rc;
}
   14926:	4620      	mov	r0, r4
   14928:	b002      	add	sp, #8
   1492a:	bd70      	pop	{r4, r5, r6, pc}

0001492c <ble_att_clt_tx_indicate>:
 *****************************************************************************/

int
ble_att_clt_tx_indicate(uint16_t conn_handle, uint16_t handle,
                        struct os_mbuf *txom)
{
   1492c:	b570      	push	{r4, r5, r6, lr}
   1492e:	b082      	sub	sp, #8
   14930:	4615      	mov	r5, r2

    struct ble_att_indicate_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   14932:	b1a1      	cbz	r1, 1495e <ble_att_clt_tx_indicate+0x32>
   14934:	4604      	mov	r4, r0
   14936:	460e      	mov	r6, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    req = ble_att_cmd_get(BLE_ATT_OP_INDICATE_REQ, sizeof(*req), &txom2);
   14938:	aa01      	add	r2, sp, #4
   1493a:	2102      	movs	r1, #2
   1493c:	201d      	movs	r0, #29
   1493e:	f000 f82d 	bl	1499c <ble_att_cmd_get>
    if (req == NULL) {
   14942:	b908      	cbnz	r0, 14948 <ble_att_clt_tx_indicate+0x1c>
        rc = BLE_HS_ENOMEM;
   14944:	2406      	movs	r4, #6
   14946:	e00b      	b.n	14960 <ble_att_clt_tx_indicate+0x34>
        goto err;
    }

    req->baiq_handle = htole16(handle);
   14948:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   1494a:	4629      	mov	r1, r5
   1494c:	9801      	ldr	r0, [sp, #4]
   1494e:	f7f5 ff1e 	bl	a78e <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   14952:	9901      	ldr	r1, [sp, #4]
   14954:	4620      	mov	r0, r4
   14956:	f000 f831 	bl	149bc <ble_att_tx>
   1495a:	4604      	mov	r4, r0
   1495c:	e003      	b.n	14966 <ble_att_clt_tx_indicate+0x3a>
        rc = BLE_HS_EINVAL;
   1495e:	2403      	movs	r4, #3

err:
    os_mbuf_free_chain(txom);
   14960:	4628      	mov	r0, r5
   14962:	f7f5 fcaf 	bl	a2c4 <os_mbuf_free_chain>
    return rc;
}
   14966:	4620      	mov	r0, r4
   14968:	b002      	add	sp, #8
   1496a:	bd70      	pop	{r4, r5, r6, pc}

0001496c <ble_att_clt_rx_indicate>:

int
ble_att_clt_rx_indicate(uint16_t conn_handle, struct os_mbuf **rxom)
{
   1496c:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_INDICATE
    return BLE_HS_ENOTSUP;
#endif

    /* No payload. */
    ble_gattc_rx_indicate_rsp(conn_handle);
   1496e:	f7fa f844 	bl	e9fa <ble_gattc_rx_indicate_rsp>
    return 0;
}
   14972:	2000      	movs	r0, #0
   14974:	bd08      	pop	{r3, pc}

00014976 <ble_att_cmd_prepare>:
#include "host/ble_uuid.h"
#include "ble_hs_priv.h"

void *
ble_att_cmd_prepare(uint8_t opcode, size_t len, struct os_mbuf *txom)
{
   14976:	b570      	push	{r4, r5, r6, lr}
   14978:	4606      	mov	r6, r0
   1497a:	4615      	mov	r5, r2
    struct ble_att_hdr *hdr;

    if (os_mbuf_extend(txom, sizeof(*hdr) + len) == NULL) {
   1497c:	3101      	adds	r1, #1
   1497e:	b289      	uxth	r1, r1
   14980:	4610      	mov	r0, r2
   14982:	f7f5 ff27 	bl	a7d4 <os_mbuf_extend>
   14986:	b120      	cbz	r0, 14992 <ble_att_cmd_prepare+0x1c>
        return NULL;
    }

    hdr = (struct ble_att_hdr *)(txom)->om_data;

    hdr->opcode = opcode;
   14988:	682c      	ldr	r4, [r5, #0]
   1498a:	f804 6b01 	strb.w	r6, [r4], #1

    return hdr->data;
}
   1498e:	4620      	mov	r0, r4
   14990:	bd70      	pop	{r4, r5, r6, pc}
   14992:	4604      	mov	r4, r0
        os_mbuf_free_chain(txom);
   14994:	4628      	mov	r0, r5
   14996:	f7f5 fc95 	bl	a2c4 <os_mbuf_free_chain>
        return NULL;
   1499a:	e7f8      	b.n	1498e <ble_att_cmd_prepare+0x18>

0001499c <ble_att_cmd_get>:

void *
ble_att_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   1499c:	b570      	push	{r4, r5, r6, lr}
   1499e:	4605      	mov	r5, r0
   149a0:	460e      	mov	r6, r1
   149a2:	4614      	mov	r4, r2
    *txom = ble_hs_mbuf_l2cap_pkt();
   149a4:	f7fc fe56 	bl	11654 <ble_hs_mbuf_l2cap_pkt>
   149a8:	6020      	str	r0, [r4, #0]
    if (*txom == NULL) {
   149aa:	b128      	cbz	r0, 149b8 <ble_att_cmd_get+0x1c>
        return NULL;
    }

    return ble_att_cmd_prepare(opcode, len, *txom);
   149ac:	4602      	mov	r2, r0
   149ae:	4631      	mov	r1, r6
   149b0:	4628      	mov	r0, r5
   149b2:	f7ff ffe0 	bl	14976 <ble_att_cmd_prepare>
}
   149b6:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   149b8:	2000      	movs	r0, #0
   149ba:	e7fc      	b.n	149b6 <ble_att_cmd_get+0x1a>

000149bc <ble_att_tx>:

int
ble_att_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   149bc:	b530      	push	{r4, r5, lr}
   149be:	b083      	sub	sp, #12
   149c0:	4605      	mov	r5, r0
   149c2:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT_EVAL(txom->om_len >= 1);
    ble_att_inc_tx_stat(txom->om_data[0]);
   149c4:	680b      	ldr	r3, [r1, #0]
   149c6:	7818      	ldrb	r0, [r3, #0]
   149c8:	f7ff fed0 	bl	1476c <ble_att_inc_tx_stat>

    ble_hs_lock();
   149cc:	f7fb f8dc 	bl	fb88 <ble_hs_lock>

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_ATT, &conn,
   149d0:	ab01      	add	r3, sp, #4
   149d2:	466a      	mov	r2, sp
   149d4:	2104      	movs	r1, #4
   149d6:	4628      	mov	r0, r5
   149d8:	f7fc fe97 	bl	1170a <ble_hs_misc_conn_chan_find_reqd>
                                         &chan);
    if (rc != 0) {
   149dc:	b970      	cbnz	r0, 149fc <ble_att_tx+0x40>
        os_mbuf_free_chain(txom);
    } else {
        ble_att_truncate_to_mtu(chan, txom);
   149de:	4621      	mov	r1, r4
   149e0:	9801      	ldr	r0, [sp, #4]
   149e2:	f7ff fed9 	bl	14798 <ble_att_truncate_to_mtu>
        rc = ble_l2cap_tx(conn, chan, txom);
   149e6:	4622      	mov	r2, r4
   149e8:	9901      	ldr	r1, [sp, #4]
   149ea:	9800      	ldr	r0, [sp, #0]
   149ec:	f7fd fa73 	bl	11ed6 <ble_l2cap_tx>
   149f0:	4605      	mov	r5, r0
    }

    ble_hs_unlock();
   149f2:	f7fb f8cd 	bl	fb90 <ble_hs_unlock>

    return rc;
}
   149f6:	4628      	mov	r0, r5
   149f8:	b003      	add	sp, #12
   149fa:	bd30      	pop	{r4, r5, pc}
   149fc:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   149fe:	4620      	mov	r0, r4
   14a00:	f7f5 fc60 	bl	a2c4 <os_mbuf_free_chain>
   14a04:	e7f5      	b.n	149f2 <ble_att_tx+0x36>
	...

00014a08 <ble_att_svr_next_id>:
static uint16_t
ble_att_svr_next_id(void)
{
    /* Rollover is fatal. */
    BLE_HS_DBG_ASSERT(ble_att_svr_id != UINT16_MAX);
    return ++ble_att_svr_id;
   14a08:	4b02      	ldr	r3, [pc, #8]	; (14a14 <ble_att_svr_next_id+0xc>)
   14a0a:	8818      	ldrh	r0, [r3, #0]
   14a0c:	3001      	adds	r0, #1
   14a0e:	b280      	uxth	r0, r0
   14a10:	8018      	strh	r0, [r3, #0]
}
   14a12:	4770      	bx	lr
   14a14:	200077d0 	.word	0x200077d0

00014a18 <ble_att_svr_prep_find_prev>:
{
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;

    prev = NULL;
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   14a18:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   14a1a:	2000      	movs	r0, #0
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   14a1c:	b173      	cbz	r3, 14a3c <ble_att_svr_prep_find_prev+0x24>
{
   14a1e:	b410      	push	{r4}
   14a20:	e002      	b.n	14a28 <ble_att_svr_prep_find_prev+0x10>

        if (entry->bape_handle == handle && entry->bape_offset > offset) {
            break;
        }

        prev = entry;
   14a22:	4618      	mov	r0, r3
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   14a24:	681b      	ldr	r3, [r3, #0]
   14a26:	b133      	cbz	r3, 14a36 <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle > handle) {
   14a28:	889c      	ldrh	r4, [r3, #4]
   14a2a:	428c      	cmp	r4, r1
   14a2c:	d803      	bhi.n	14a36 <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle == handle && entry->bape_offset > offset) {
   14a2e:	d1f8      	bne.n	14a22 <ble_att_svr_prep_find_prev+0xa>
   14a30:	88dc      	ldrh	r4, [r3, #6]
   14a32:	4294      	cmp	r4, r2
   14a34:	d9f5      	bls.n	14a22 <ble_att_svr_prep_find_prev+0xa>
    }

    return prev;
}
   14a36:	f85d 4b04 	ldr.w	r4, [sp], #4
   14a3a:	4770      	bx	lr
   14a3c:	4770      	bx	lr

00014a3e <ble_att_svr_prep_validate>:
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;
    int cur_len;

    prev = NULL;
    SLIST_FOREACH(entry, prep_list, bape_next) {
   14a3e:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   14a40:	2200      	movs	r2, #0
    SLIST_FOREACH(entry, prep_list, bape_next) {
   14a42:	b34b      	cbz	r3, 14a98 <ble_att_svr_prep_validate+0x5a>
{
   14a44:	b410      	push	{r4}
   14a46:	e00b      	b.n	14a60 <ble_att_svr_prep_validate+0x22>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
            /* Ensure attribute write starts at offset 0. */
            if (entry->bape_offset != 0) {
   14a48:	88da      	ldrh	r2, [r3, #6]
   14a4a:	b9ca      	cbnz	r2, 14a80 <ble_att_svr_prep_validate+0x42>
                *err_handle = entry->bape_handle;
                return BLE_ATT_ERR_INVALID_OFFSET;
            }
        }

        cur_len = entry->bape_offset + OS_MBUF_PKTLEN(entry->bape_value);
   14a4c:	88da      	ldrh	r2, [r3, #6]
   14a4e:	6898      	ldr	r0, [r3, #8]
   14a50:	8a00      	ldrh	r0, [r0, #16]
   14a52:	4402      	add	r2, r0
        if (cur_len > BLE_ATT_ATTR_MAX_LEN) {
   14a54:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   14a58:	dc16      	bgt.n	14a88 <ble_att_svr_prep_validate+0x4a>
            *err_handle = entry->bape_handle;
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
        }

        prev = entry;
   14a5a:	461a      	mov	r2, r3
    SLIST_FOREACH(entry, prep_list, bape_next) {
   14a5c:	681b      	ldr	r3, [r3, #0]
   14a5e:	b1bb      	cbz	r3, 14a90 <ble_att_svr_prep_validate+0x52>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
   14a60:	2a00      	cmp	r2, #0
   14a62:	d0f1      	beq.n	14a48 <ble_att_svr_prep_validate+0xa>
   14a64:	8894      	ldrh	r4, [r2, #4]
   14a66:	8898      	ldrh	r0, [r3, #4]
   14a68:	4284      	cmp	r4, r0
   14a6a:	d1ed      	bne.n	14a48 <ble_att_svr_prep_validate+0xa>
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   14a6c:	88d4      	ldrh	r4, [r2, #6]
   14a6e:	6892      	ldr	r2, [r2, #8]
   14a70:	8a12      	ldrh	r2, [r2, #16]
   14a72:	4422      	add	r2, r4
                entry->bape_offset) {
   14a74:	88dc      	ldrh	r4, [r3, #6]
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   14a76:	42a2      	cmp	r2, r4
   14a78:	d0e8      	beq.n	14a4c <ble_att_svr_prep_validate+0xe>
                *err_handle = entry->bape_handle;
   14a7a:	8008      	strh	r0, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   14a7c:	2007      	movs	r0, #7
   14a7e:	e008      	b.n	14a92 <ble_att_svr_prep_validate+0x54>
                *err_handle = entry->bape_handle;
   14a80:	889b      	ldrh	r3, [r3, #4]
   14a82:	800b      	strh	r3, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   14a84:	2007      	movs	r0, #7
   14a86:	e004      	b.n	14a92 <ble_att_svr_prep_validate+0x54>
            *err_handle = entry->bape_handle;
   14a88:	889b      	ldrh	r3, [r3, #4]
   14a8a:	800b      	strh	r3, [r1, #0]
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   14a8c:	200d      	movs	r0, #13
   14a8e:	e000      	b.n	14a92 <ble_att_svr_prep_validate+0x54>
    }

    return 0;
   14a90:	2000      	movs	r0, #0
}
   14a92:	f85d 4b04 	ldr.w	r4, [sp], #4
   14a96:	4770      	bx	lr
    return 0;
   14a98:	2000      	movs	r0, #0
}
   14a9a:	4770      	bx	lr

00014a9c <ble_att_svr_entry_alloc>:
{
   14a9c:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_att_svr_entry_pool);
   14a9e:	4806      	ldr	r0, [pc, #24]	; (14ab8 <ble_att_svr_entry_alloc+0x1c>)
   14aa0:	f7f6 f85f 	bl	ab62 <os_memblock_get>
    if (entry != NULL) {
   14aa4:	4603      	mov	r3, r0
   14aa6:	b128      	cbz	r0, 14ab4 <ble_att_svr_entry_alloc+0x18>
        memset(entry, 0, sizeof *entry);
   14aa8:	2200      	movs	r2, #0
   14aaa:	6002      	str	r2, [r0, #0]
   14aac:	6042      	str	r2, [r0, #4]
   14aae:	6082      	str	r2, [r0, #8]
   14ab0:	60c2      	str	r2, [r0, #12]
   14ab2:	6102      	str	r2, [r0, #16]
}
   14ab4:	4618      	mov	r0, r3
   14ab6:	bd08      	pop	{r3, pc}
   14ab8:	200077ac 	.word	0x200077ac

00014abc <ble_att_svr_get_sec_state>:
{
   14abc:	b538      	push	{r3, r4, r5, lr}
   14abe:	4605      	mov	r5, r0
   14ac0:	460c      	mov	r4, r1
    ble_hs_lock();
   14ac2:	f7fb f861 	bl	fb88 <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   14ac6:	4628      	mov	r0, r5
   14ac8:	f7fb fe80 	bl	107cc <ble_hs_conn_find_assert>
    *out_sec_state = conn->bhc_sec_state;
   14acc:	6d83      	ldr	r3, [r0, #88]	; 0x58
   14ace:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   14ad0:	f7fb f85e 	bl	fb90 <ble_hs_unlock>
}
   14ad4:	bd38      	pop	{r3, r4, r5, pc}

00014ad6 <ble_att_svr_check_perms>:
{
   14ad6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14ada:	b0a6      	sub	sp, #152	; 0x98
    if (is_read) {
   14adc:	b371      	cbz	r1, 14b3c <ble_att_svr_check_perms+0x66>
        if (!(entry->ha_flags & BLE_ATT_F_READ)) {
   14ade:	7a11      	ldrb	r1, [r2, #8]
   14ae0:	f011 0f01 	tst.w	r1, #1
   14ae4:	d026      	beq.n	14b34 <ble_att_svr_check_perms+0x5e>
        enc = entry->ha_flags & BLE_ATT_F_READ_ENC;
   14ae6:	f001 0504 	and.w	r5, r1, #4
        authen = entry->ha_flags & BLE_ATT_F_READ_AUTHEN;
   14aea:	f001 0608 	and.w	r6, r1, #8
        author = entry->ha_flags & BLE_ATT_F_READ_AUTHOR;
   14aee:	f001 0110 	and.w	r1, r1, #16
    if (!enc && !authen && !author) {
   14af2:	b90d      	cbnz	r5, 14af8 <ble_att_svr_check_perms+0x22>
   14af4:	b906      	cbnz	r6, 14af8 <ble_att_svr_check_perms+0x22>
   14af6:	b1c9      	cbz	r1, 14b2c <ble_att_svr_check_perms+0x56>
   14af8:	4698      	mov	r8, r3
   14afa:	4614      	mov	r4, r2
   14afc:	4607      	mov	r7, r0
    ble_att_svr_get_sec_state(conn_handle, &sec_state);
   14afe:	a925      	add	r1, sp, #148	; 0x94
   14b00:	f7ff ffdc 	bl	14abc <ble_att_svr_get_sec_state>
    if ((enc || authen) && !sec_state.encrypted) {
   14b04:	b905      	cbnz	r5, 14b08 <ble_att_svr_check_perms+0x32>
   14b06:	b126      	cbz	r6, 14b12 <ble_att_svr_check_perms+0x3c>
   14b08:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   14b0c:	f013 0f01 	tst.w	r3, #1
   14b10:	d023      	beq.n	14b5a <ble_att_svr_check_perms+0x84>
    if (authen && !sec_state.authenticated) {
   14b12:	b126      	cbz	r6, 14b1e <ble_att_svr_check_perms+0x48>
   14b14:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   14b18:	f013 0f02 	tst.w	r3, #2
   14b1c:	d058      	beq.n	14bd0 <ble_att_svr_check_perms+0xfa>
    if (entry->ha_min_key_size > sec_state.key_size) {
   14b1e:	7a63      	ldrb	r3, [r4, #9]
   14b20:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
   14b24:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   14b28:	d858      	bhi.n	14bdc <ble_att_svr_check_perms+0x106>
    return 0;
   14b2a:	2100      	movs	r1, #0
}
   14b2c:	4608      	mov	r0, r1
   14b2e:	b026      	add	sp, #152	; 0x98
   14b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *out_att_err = BLE_ATT_ERR_READ_NOT_PERMITTED;
   14b34:	2202      	movs	r2, #2
   14b36:	701a      	strb	r2, [r3, #0]
            return BLE_HS_EREJECT;
   14b38:	2110      	movs	r1, #16
   14b3a:	e7f7      	b.n	14b2c <ble_att_svr_check_perms+0x56>
        if (!(entry->ha_flags & BLE_ATT_F_WRITE)) {
   14b3c:	7a11      	ldrb	r1, [r2, #8]
   14b3e:	f011 0f02 	tst.w	r1, #2
   14b42:	d006      	beq.n	14b52 <ble_att_svr_check_perms+0x7c>
        enc = entry->ha_flags & BLE_ATT_F_WRITE_ENC;
   14b44:	f001 0520 	and.w	r5, r1, #32
        authen = entry->ha_flags & BLE_ATT_F_WRITE_AUTHEN;
   14b48:	f001 0640 	and.w	r6, r1, #64	; 0x40
        author = entry->ha_flags & BLE_ATT_F_WRITE_AUTHOR;
   14b4c:	f001 0180 	and.w	r1, r1, #128	; 0x80
   14b50:	e7cf      	b.n	14af2 <ble_att_svr_check_perms+0x1c>
            *out_att_err = BLE_ATT_ERR_WRITE_NOT_PERMITTED;
   14b52:	2203      	movs	r2, #3
   14b54:	701a      	strb	r2, [r3, #0]
            return BLE_HS_EREJECT;
   14b56:	2110      	movs	r1, #16
   14b58:	e7e8      	b.n	14b2c <ble_att_svr_check_perms+0x56>
        ble_hs_lock();
   14b5a:	f7fb f815 	bl	fb88 <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   14b5e:	4638      	mov	r0, r7
   14b60:	f7fb fe1c 	bl	1079c <ble_hs_conn_find>
        if (conn != NULL) {
   14b64:	b1d8      	cbz	r0, 14b9e <ble_att_svr_check_perms+0xc8>
            ble_hs_conn_addrs(conn, &addrs);
   14b66:	a901      	add	r1, sp, #4
   14b68:	f7fb fe50 	bl	1080c <ble_hs_conn_addrs>
            memset(&key_sec, 0, sizeof key_sec);
   14b6c:	2300      	movs	r3, #0
   14b6e:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
   14b72:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
   14b76:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
   14b7a:	f8cd 3032 	str.w	r3, [sp, #50]	; 0x32
   14b7e:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   14b82:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   14b86:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            key_sec.peer_addr = addrs.peer_id_addr;
   14b8a:	ab26      	add	r3, sp, #152	; 0x98
   14b8c:	f853 0d8d 	ldr.w	r0, [r3, #-141]!
   14b90:	9008      	str	r0, [sp, #32]
   14b92:	889a      	ldrh	r2, [r3, #4]
   14b94:	799b      	ldrb	r3, [r3, #6]
   14b96:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   14b9a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        ble_hs_unlock();
   14b9e:	f7fa fff7 	bl	fb90 <ble_hs_unlock>
        rc = ble_store_read_peer_sec(&key_sec, &value_sec);
   14ba2:	a910      	add	r1, sp, #64	; 0x40
   14ba4:	a808      	add	r0, sp, #32
   14ba6:	f7ff fb10 	bl	141ca <ble_store_read_peer_sec>
        if (rc == 0 && value_sec.ltk_present) {
   14baa:	b940      	cbnz	r0, 14bbe <ble_att_svr_check_perms+0xe8>
   14bac:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   14bb0:	f013 0f01 	tst.w	r3, #1
   14bb4:	d003      	beq.n	14bbe <ble_att_svr_check_perms+0xe8>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_ENC;
   14bb6:	230f      	movs	r3, #15
   14bb8:	f888 3000 	strb.w	r3, [r8]
   14bbc:	e002      	b.n	14bc4 <ble_att_svr_check_perms+0xee>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   14bbe:	2305      	movs	r3, #5
   14bc0:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   14bc4:	f898 1000 	ldrb.w	r1, [r8]
   14bc8:	b171      	cbz	r1, 14be8 <ble_att_svr_check_perms+0x112>
   14bca:	f501 7180 	add.w	r1, r1, #256	; 0x100
   14bce:	e7ad      	b.n	14b2c <ble_att_svr_check_perms+0x56>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   14bd0:	2305      	movs	r3, #5
   14bd2:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   14bd6:	f240 1105 	movw	r1, #261	; 0x105
   14bda:	e7a7      	b.n	14b2c <ble_att_svr_check_perms+0x56>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_KEY_SZ;
   14bdc:	230c      	movs	r3, #12
   14bde:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   14be2:	f44f 7186 	mov.w	r1, #268	; 0x10c
   14be6:	e7a1      	b.n	14b2c <ble_att_svr_check_perms+0x56>
        return BLE_HS_ATT_ERR(*out_att_err);
   14be8:	2100      	movs	r1, #0
   14bea:	e79f      	b.n	14b2c <ble_att_svr_check_perms+0x56>

00014bec <ble_att_svr_read>:
{
   14bec:	b5f0      	push	{r4, r5, r6, r7, lr}
   14bee:	b087      	sub	sp, #28
   14bf0:	4605      	mov	r5, r0
   14bf2:	460c      	mov	r4, r1
   14bf4:	4616      	mov	r6, r2
   14bf6:	9303      	str	r3, [sp, #12]
    att_err = 0;    /* Silence gcc warning. */
   14bf8:	2300      	movs	r3, #0
   14bfa:	f88d 3017 	strb.w	r3, [sp, #23]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   14bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14c02:	4298      	cmp	r0, r3
   14c04:	d117      	bne.n	14c36 <ble_att_svr_read+0x4a>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   14c06:	68e7      	ldr	r7, [r4, #12]
   14c08:	8961      	ldrh	r1, [r4, #10]
   14c0a:	6923      	ldr	r3, [r4, #16]
   14c0c:	9301      	str	r3, [sp, #4]
   14c0e:	ab03      	add	r3, sp, #12
   14c10:	9300      	str	r3, [sp, #0]
   14c12:	4633      	mov	r3, r6
   14c14:	2201      	movs	r2, #1
   14c16:	4628      	mov	r0, r5
   14c18:	47b8      	blx	r7
    if (rc != 0) {
   14c1a:	4603      	mov	r3, r0
   14c1c:	b140      	cbz	r0, 14c30 <ble_att_svr_read+0x44>
        att_err = rc;
   14c1e:	f88d 0017 	strb.w	r0, [sp, #23]
        rc = BLE_HS_EAPP;
   14c22:	2309      	movs	r3, #9
    if (out_att_err != NULL) {
   14c24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14c26:	b11a      	cbz	r2, 14c30 <ble_att_svr_read+0x44>
        *out_att_err = att_err;
   14c28:	f89d 2017 	ldrb.w	r2, [sp, #23]
   14c2c:	990c      	ldr	r1, [sp, #48]	; 0x30
   14c2e:	700a      	strb	r2, [r1, #0]
}
   14c30:	4618      	mov	r0, r3
   14c32:	b007      	add	sp, #28
   14c34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = ble_att_svr_check_perms(conn_handle, 1, entry, &att_err);
   14c36:	f10d 0317 	add.w	r3, sp, #23
   14c3a:	460a      	mov	r2, r1
   14c3c:	2101      	movs	r1, #1
   14c3e:	f7ff ff4a 	bl	14ad6 <ble_att_svr_check_perms>
        if (rc != 0) {
   14c42:	4603      	mov	r3, r0
   14c44:	2800      	cmp	r0, #0
   14c46:	d1ed      	bne.n	14c24 <ble_att_svr_read+0x38>
   14c48:	e7dd      	b.n	14c06 <ble_att_svr_read+0x1a>

00014c4a <ble_att_svr_write>:
{
   14c4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14c4e:	b085      	sub	sp, #20
   14c50:	4605      	mov	r5, r0
   14c52:	460c      	mov	r4, r1
   14c54:	4691      	mov	r9, r2
   14c56:	4698      	mov	r8, r3
   14c58:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    uint8_t att_err = 0;
   14c5a:	2300      	movs	r3, #0
   14c5c:	f88d 300f 	strb.w	r3, [sp, #15]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   14c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14c64:	4298      	cmp	r0, r3
   14c66:	d113      	bne.n	14c90 <ble_att_svr_write+0x46>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   14c68:	68e7      	ldr	r7, [r4, #12]
   14c6a:	8961      	ldrh	r1, [r4, #10]
   14c6c:	6923      	ldr	r3, [r4, #16]
   14c6e:	9301      	str	r3, [sp, #4]
   14c70:	f8cd 8000 	str.w	r8, [sp]
   14c74:	464b      	mov	r3, r9
   14c76:	2202      	movs	r2, #2
   14c78:	4628      	mov	r0, r5
   14c7a:	47b8      	blx	r7
    if (rc != 0) {
   14c7c:	4603      	mov	r3, r0
   14c7e:	b988      	cbnz	r0, 14ca4 <ble_att_svr_write+0x5a>
    if (out_att_err != NULL) {
   14c80:	b116      	cbz	r6, 14c88 <ble_att_svr_write+0x3e>
        *out_att_err = att_err;
   14c82:	f89d 200f 	ldrb.w	r2, [sp, #15]
   14c86:	7032      	strb	r2, [r6, #0]
}
   14c88:	4618      	mov	r0, r3
   14c8a:	b005      	add	sp, #20
   14c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = ble_att_svr_check_perms(conn_handle, 0, entry, &att_err);
   14c90:	f10d 030f 	add.w	r3, sp, #15
   14c94:	460a      	mov	r2, r1
   14c96:	2100      	movs	r1, #0
   14c98:	f7ff ff1d 	bl	14ad6 <ble_att_svr_check_perms>
        if (rc != 0) {
   14c9c:	4603      	mov	r3, r0
   14c9e:	2800      	cmp	r0, #0
   14ca0:	d1ee      	bne.n	14c80 <ble_att_svr_write+0x36>
   14ca2:	e7e1      	b.n	14c68 <ble_att_svr_write+0x1e>
        att_err = rc;
   14ca4:	f88d 000f 	strb.w	r0, [sp, #15]
        rc = BLE_HS_EAPP;
   14ca8:	2309      	movs	r3, #9
        goto done;
   14caa:	e7e9      	b.n	14c80 <ble_att_svr_write+0x36>

00014cac <ble_att_svr_pullup_req_base>:
{
   14cac:	b510      	push	{r4, lr}
   14cae:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, base_len);
   14cb0:	f7fc fcf1 	bl	11696 <ble_hs_mbuf_pullup_base>
    if (rc == BLE_HS_ENOMEM) {
   14cb4:	2806      	cmp	r0, #6
   14cb6:	d003      	beq.n	14cc0 <ble_att_svr_pullup_req_base+0x14>
        att_err = 0;
   14cb8:	2300      	movs	r3, #0
    if (out_att_err != NULL) {
   14cba:	b104      	cbz	r4, 14cbe <ble_att_svr_pullup_req_base+0x12>
        *out_att_err = att_err;
   14cbc:	7023      	strb	r3, [r4, #0]
}
   14cbe:	bd10      	pop	{r4, pc}
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   14cc0:	2311      	movs	r3, #17
   14cc2:	e7fa      	b.n	14cba <ble_att_svr_pullup_req_base+0xe>

00014cc4 <ble_att_svr_build_mtu_rsp>:
{
   14cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14cc8:	b083      	sub	sp, #12
   14cca:	4605      	mov	r5, r0
   14ccc:	4688      	mov	r8, r1
   14cce:	4617      	mov	r7, r2
   14cd0:	461e      	mov	r6, r3
    *att_err = 0; /* Silence unnecessary warning. */
   14cd2:	2400      	movs	r4, #0
   14cd4:	701c      	strb	r4, [r3, #0]
    ble_hs_lock();
   14cd6:	f7fa ff57 	bl	fb88 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   14cda:	aa01      	add	r2, sp, #4
   14cdc:	4621      	mov	r1, r4
   14cde:	4628      	mov	r0, r5
   14ce0:	f7ff fd3d 	bl	1475e <ble_att_conn_chan_find>
    if (rc == 0) {
   14ce4:	4605      	mov	r5, r0
   14ce6:	b910      	cbnz	r0, 14cee <ble_att_svr_build_mtu_rsp+0x2a>
        mtu = chan->my_mtu;
   14ce8:	9b01      	ldr	r3, [sp, #4]
   14cea:	f8b3 900a 	ldrh.w	r9, [r3, #10]
    ble_hs_unlock();
   14cee:	f7fa ff4f 	bl	fb90 <ble_hs_unlock>
    if (rc != 0) {
   14cf2:	b12d      	cbz	r5, 14d00 <ble_att_svr_build_mtu_rsp+0x3c>
    txom = NULL;
   14cf4:	2400      	movs	r4, #0
    *out_txom = txom;
   14cf6:	603c      	str	r4, [r7, #0]
}
   14cf8:	4628      	mov	r0, r5
   14cfa:	b003      	add	sp, #12
   14cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    txom = *rxom;
   14d00:	f8d8 4000 	ldr.w	r4, [r8]
    *rxom = NULL;
   14d04:	2300      	movs	r3, #0
   14d06:	f8c8 3000 	str.w	r3, [r8]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   14d0a:	8a21      	ldrh	r1, [r4, #16]
   14d0c:	4620      	mov	r0, r4
   14d0e:	f7f5 fc08 	bl	a522 <os_mbuf_adj>
    cmd = ble_att_cmd_prepare(BLE_ATT_OP_MTU_RSP, sizeof(*cmd), txom);
   14d12:	4622      	mov	r2, r4
   14d14:	2102      	movs	r1, #2
   14d16:	2003      	movs	r0, #3
   14d18:	f7ff fe2d 	bl	14976 <ble_att_cmd_prepare>
    if (cmd == NULL) {
   14d1c:	b110      	cbz	r0, 14d24 <ble_att_svr_build_mtu_rsp+0x60>
    cmd->bamc_mtu = htole16(mtu);
   14d1e:	f8a0 9000 	strh.w	r9, [r0]
   14d22:	e7e8      	b.n	14cf6 <ble_att_svr_build_mtu_rsp+0x32>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   14d24:	2311      	movs	r3, #17
   14d26:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   14d28:	2506      	movs	r5, #6
        goto done;
   14d2a:	e7e4      	b.n	14cf6 <ble_att_svr_build_mtu_rsp+0x32>

00014d2c <ble_att_svr_pkt>:
{
   14d2c:	b570      	push	{r4, r5, r6, lr}
   14d2e:	4605      	mov	r5, r0
   14d30:	460c      	mov	r4, r1
   14d32:	4616      	mov	r6, r2
    *out_txom = ble_hs_mbuf_l2cap_pkt();
   14d34:	f7fc fc8e 	bl	11654 <ble_hs_mbuf_l2cap_pkt>
   14d38:	6020      	str	r0, [r4, #0]
    if (*out_txom != NULL) {
   14d3a:	b108      	cbz	r0, 14d40 <ble_att_svr_pkt+0x14>
        return 0;
   14d3c:	2000      	movs	r0, #0
}
   14d3e:	bd70      	pop	{r4, r5, r6, pc}
    *out_txom = *rxom;
   14d40:	682b      	ldr	r3, [r5, #0]
   14d42:	6023      	str	r3, [r4, #0]
    *rxom = NULL;
   14d44:	2300      	movs	r3, #0
   14d46:	602b      	str	r3, [r5, #0]
    *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   14d48:	2311      	movs	r3, #17
   14d4a:	7033      	strb	r3, [r6, #0]
    return BLE_HS_ENOMEM;
   14d4c:	2006      	movs	r0, #6
   14d4e:	e7f6      	b.n	14d3e <ble_att_svr_pkt+0x12>

00014d50 <ble_att_svr_build_write_rsp>:
{
   14d50:	b570      	push	{r4, r5, r6, lr}
   14d52:	b082      	sub	sp, #8
   14d54:	460d      	mov	r5, r1
   14d56:	4616      	mov	r6, r2
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   14d58:	a901      	add	r1, sp, #4
   14d5a:	f7ff ffe7 	bl	14d2c <ble_att_svr_pkt>
    if (rc != 0) {
   14d5e:	4604      	mov	r4, r0
   14d60:	b120      	cbz	r0, 14d6c <ble_att_svr_build_write_rsp+0x1c>
    *out_txom = txom;
   14d62:	9b01      	ldr	r3, [sp, #4]
   14d64:	602b      	str	r3, [r5, #0]
}
   14d66:	4620      	mov	r0, r4
   14d68:	b002      	add	sp, #8
   14d6a:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_WRITE_RSP, 0, txom) == NULL) {
   14d6c:	9a01      	ldr	r2, [sp, #4]
   14d6e:	2100      	movs	r1, #0
   14d70:	2013      	movs	r0, #19
   14d72:	f7ff fe00 	bl	14976 <ble_att_cmd_prepare>
   14d76:	2800      	cmp	r0, #0
   14d78:	d1f3      	bne.n	14d62 <ble_att_svr_build_write_rsp+0x12>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   14d7a:	2311      	movs	r3, #17
   14d7c:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   14d7e:	2406      	movs	r4, #6
        goto done;
   14d80:	e7ef      	b.n	14d62 <ble_att_svr_build_write_rsp+0x12>

00014d82 <ble_att_svr_build_indicate_rsp>:
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_att_svr_build_indicate_rsp(struct os_mbuf **rxom,
                               struct os_mbuf **out_txom, uint8_t *out_att_err)
{
   14d82:	b570      	push	{r4, r5, r6, lr}
   14d84:	b082      	sub	sp, #8
   14d86:	460d      	mov	r5, r1
   14d88:	4616      	mov	r6, r2

    /* Allocate a new buffer for the response.  An indicate response never
     * reuses the request buffer.  See the note at the top of this file for
     * details.
     */
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   14d8a:	a901      	add	r1, sp, #4
   14d8c:	f7ff ffce 	bl	14d2c <ble_att_svr_pkt>
    if (rc != 0) {
   14d90:	4604      	mov	r4, r0
   14d92:	b120      	cbz	r0, 14d9e <ble_att_svr_build_indicate_rsp+0x1c>
    }

    rc = 0;

done:
    *out_txom = txom;
   14d94:	9b01      	ldr	r3, [sp, #4]
   14d96:	602b      	str	r3, [r5, #0]
    return rc;
}
   14d98:	4620      	mov	r0, r4
   14d9a:	b002      	add	sp, #8
   14d9c:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_INDICATE_RSP, 0, txom) == NULL) {
   14d9e:	9a01      	ldr	r2, [sp, #4]
   14da0:	2100      	movs	r1, #0
   14da2:	201e      	movs	r0, #30
   14da4:	f7ff fde7 	bl	14976 <ble_att_cmd_prepare>
   14da8:	2800      	cmp	r0, #0
   14daa:	d1f3      	bne.n	14d94 <ble_att_svr_build_indicate_rsp+0x12>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   14dac:	2311      	movs	r3, #17
   14dae:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   14db0:	2406      	movs	r4, #6
        goto done;
   14db2:	e7ef      	b.n	14d94 <ble_att_svr_build_indicate_rsp+0x12>

00014db4 <ble_att_svr_fill_info>:
{
   14db4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14db8:	4607      	mov	r7, r0
   14dba:	460e      	mov	r6, r1
   14dbc:	4690      	mov	r8, r2
   14dbe:	469a      	mov	sl, r3
   14dc0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    *format = 0;
   14dc4:	2500      	movs	r5, #0
   14dc6:	f889 5000 	strb.w	r5, [r9]
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   14dca:	4b25      	ldr	r3, [pc, #148]	; (14e60 <ble_att_svr_fill_info+0xac>)
   14dcc:	681c      	ldr	r4, [r3, #0]
   14dce:	e022      	b.n	14e16 <ble_att_svr_fill_info+0x62>
                if (*format == 0) {
   14dd0:	f899 3000 	ldrb.w	r3, [r9]
   14dd4:	b923      	cbnz	r3, 14de0 <ble_att_svr_fill_info+0x2c>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT;
   14dd6:	2301      	movs	r3, #1
   14dd8:	f889 3000 	strb.w	r3, [r9]
                entry_sz = 4;
   14ddc:	2104      	movs	r1, #4
   14dde:	e006      	b.n	14dee <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT) {
   14de0:	2b01      	cmp	r3, #1
   14de2:	d132      	bne.n	14e4a <ble_att_svr_fill_info+0x96>
                entry_sz = 4;
   14de4:	2104      	movs	r1, #4
   14de6:	e002      	b.n	14dee <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT) {
   14de8:	2b02      	cmp	r3, #2
   14dea:	d130      	bne.n	14e4e <ble_att_svr_fill_info+0x9a>
                entry_sz = 18;
   14dec:	2112      	movs	r1, #18
            if (OS_MBUF_PKTLEN(om) + entry_sz > mtu) {
   14dee:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   14df2:	440b      	add	r3, r1
   14df4:	4553      	cmp	r3, sl
   14df6:	dc2c      	bgt.n	14e52 <ble_att_svr_fill_info+0x9e>
            buf = os_mbuf_extend(om, entry_sz);
   14df8:	4640      	mov	r0, r8
   14dfa:	f7f5 fceb 	bl	a7d4 <os_mbuf_extend>
            if (buf == NULL) {
   14dfe:	4683      	mov	fp, r0
   14e00:	b348      	cbz	r0, 14e56 <ble_att_svr_fill_info+0xa2>
            put_le16(buf + 0, ha->ha_handle_id);
   14e02:	8961      	ldrh	r1, [r4, #10]
   14e04:	f006 fef2 	bl	1bbec <put_le16>
            ble_uuid_flat(ha->ha_uuid, buf + 2);
   14e08:	f10b 0102 	add.w	r1, fp, #2
   14e0c:	6860      	ldr	r0, [r4, #4]
   14e0e:	f7ff fbf9 	bl	14604 <ble_uuid_flat>
            num_entries++;
   14e12:	3501      	adds	r5, #1
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   14e14:	6824      	ldr	r4, [r4, #0]
   14e16:	b18c      	cbz	r4, 14e3c <ble_att_svr_fill_info+0x88>
        if (ha->ha_handle_id > end_handle) {
   14e18:	8963      	ldrh	r3, [r4, #10]
   14e1a:	42b3      	cmp	r3, r6
   14e1c:	d813      	bhi.n	14e46 <ble_att_svr_fill_info+0x92>
        if (ha->ha_handle_id >= start_handle) {
   14e1e:	42bb      	cmp	r3, r7
   14e20:	d3f8      	bcc.n	14e14 <ble_att_svr_fill_info+0x60>
            if (ha->ha_uuid->type == BLE_UUID_TYPE_16) {
   14e22:	6863      	ldr	r3, [r4, #4]
   14e24:	781b      	ldrb	r3, [r3, #0]
   14e26:	2b10      	cmp	r3, #16
   14e28:	d0d2      	beq.n	14dd0 <ble_att_svr_fill_info+0x1c>
                if (*format == 0) {
   14e2a:	f899 3000 	ldrb.w	r3, [r9]
   14e2e:	2b00      	cmp	r3, #0
   14e30:	d1da      	bne.n	14de8 <ble_att_svr_fill_info+0x34>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT;
   14e32:	2302      	movs	r3, #2
   14e34:	f889 3000 	strb.w	r3, [r9]
                entry_sz = 18;
   14e38:	2112      	movs	r1, #18
   14e3a:	e7d8      	b.n	14dee <ble_att_svr_fill_info+0x3a>
    rc = 0;
   14e3c:	2000      	movs	r0, #0
    if (rc == 0 && num_entries == 0) {
   14e3e:	b900      	cbnz	r0, 14e42 <ble_att_svr_fill_info+0x8e>
   14e40:	b15d      	cbz	r5, 14e5a <ble_att_svr_fill_info+0xa6>
}
   14e42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            rc = 0;
   14e46:	2000      	movs	r0, #0
   14e48:	e7f9      	b.n	14e3e <ble_att_svr_fill_info+0x8a>
                    rc = 0;
   14e4a:	2000      	movs	r0, #0
   14e4c:	e7f7      	b.n	14e3e <ble_att_svr_fill_info+0x8a>
                    rc = 0;
   14e4e:	2000      	movs	r0, #0
   14e50:	e7f5      	b.n	14e3e <ble_att_svr_fill_info+0x8a>
                rc = 0;
   14e52:	2000      	movs	r0, #0
   14e54:	e7f3      	b.n	14e3e <ble_att_svr_fill_info+0x8a>
                rc = BLE_HS_ENOMEM;
   14e56:	2006      	movs	r0, #6
   14e58:	e7f1      	b.n	14e3e <ble_att_svr_fill_info+0x8a>
        return BLE_HS_ENOENT;
   14e5a:	2005      	movs	r0, #5
   14e5c:	e7f1      	b.n	14e42 <ble_att_svr_fill_info+0x8e>
   14e5e:	bf00      	nop
   14e60:	200077d4 	.word	0x200077d4

00014e64 <ble_att_svr_build_find_info_rsp>:
{
   14e64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14e68:	b082      	sub	sp, #8
   14e6a:	4680      	mov	r8, r0
   14e6c:	460d      	mov	r5, r1
   14e6e:	4616      	mov	r6, r2
    txom = *rxom;
   14e70:	681c      	ldr	r4, [r3, #0]
    *rxom = NULL;
   14e72:	2200      	movs	r2, #0
   14e74:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   14e76:	8a21      	ldrh	r1, [r4, #16]
   14e78:	4620      	mov	r0, r4
   14e7a:	f7f5 fb52 	bl	a522 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_FIND_INFO_RSP, sizeof(*rsp), txom);
   14e7e:	4622      	mov	r2, r4
   14e80:	2101      	movs	r1, #1
   14e82:	2005      	movs	r0, #5
   14e84:	f7ff fd77 	bl	14976 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   14e88:	b190      	cbz	r0, 14eb0 <ble_att_svr_build_find_info_rsp+0x4c>
   14e8a:	4607      	mov	r7, r0
    mtu = ble_att_mtu(conn_handle);
   14e8c:	4640      	mov	r0, r8
   14e8e:	f7ff fc90 	bl	147b2 <ble_att_mtu>
    rc = ble_att_svr_fill_info(start_handle, end_handle, txom, mtu,
   14e92:	9700      	str	r7, [sp, #0]
   14e94:	4603      	mov	r3, r0
   14e96:	4622      	mov	r2, r4
   14e98:	4631      	mov	r1, r6
   14e9a:	4628      	mov	r0, r5
   14e9c:	f7ff ff8a 	bl	14db4 <ble_att_svr_fill_info>
    if (rc != 0) {
   14ea0:	4603      	mov	r3, r0
   14ea2:	b950      	cbnz	r0, 14eba <ble_att_svr_build_find_info_rsp+0x56>
    *out_txom = txom;
   14ea4:	9a08      	ldr	r2, [sp, #32]
   14ea6:	6014      	str	r4, [r2, #0]
}
   14ea8:	4618      	mov	r0, r3
   14eaa:	b002      	add	sp, #8
   14eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   14eb0:	2311      	movs	r3, #17
   14eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14eb4:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   14eb6:	2306      	movs	r3, #6
        goto done;
   14eb8:	e7f4      	b.n	14ea4 <ble_att_svr_build_find_info_rsp+0x40>
        *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   14eba:	230a      	movs	r3, #10
   14ebc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14ebe:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOENT;
   14ec0:	2305      	movs	r3, #5
        goto done;
   14ec2:	e7ef      	b.n	14ea4 <ble_att_svr_build_find_info_rsp+0x40>

00014ec4 <ble_att_svr_read_group_type_entry_write>:
{
   14ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14ec6:	9d06      	ldr	r5, [sp, #24]
    if (service_uuid->type == BLE_UUID_TYPE_16) {
   14ec8:	782c      	ldrb	r4, [r5, #0]
   14eca:	2c10      	cmp	r4, #16
   14ecc:	d018      	beq.n	14f00 <ble_att_svr_read_group_type_entry_write+0x3c>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   14ece:	2614      	movs	r6, #20
    if (OS_MBUF_PKTLEN(om) + len > mtu) {
   14ed0:	8a04      	ldrh	r4, [r0, #16]
   14ed2:	4434      	add	r4, r6
   14ed4:	428c      	cmp	r4, r1
   14ed6:	dc15      	bgt.n	14f04 <ble_att_svr_read_group_type_entry_write+0x40>
   14ed8:	461c      	mov	r4, r3
   14eda:	4617      	mov	r7, r2
    buf = os_mbuf_extend(om, len);
   14edc:	4631      	mov	r1, r6
   14ede:	f7f5 fc79 	bl	a7d4 <os_mbuf_extend>
    if (buf == NULL) {
   14ee2:	4606      	mov	r6, r0
   14ee4:	b180      	cbz	r0, 14f08 <ble_att_svr_read_group_type_entry_write+0x44>
    put_le16(buf + 0, start_group_handle);
   14ee6:	4639      	mov	r1, r7
   14ee8:	f006 fe80 	bl	1bbec <put_le16>
    put_le16(buf + 2, end_group_handle);
   14eec:	4621      	mov	r1, r4
   14eee:	1cb0      	adds	r0, r6, #2
   14ef0:	f006 fe7c 	bl	1bbec <put_le16>
    ble_uuid_flat(service_uuid, buf + 4);
   14ef4:	1d31      	adds	r1, r6, #4
   14ef6:	4628      	mov	r0, r5
   14ef8:	f7ff fb84 	bl	14604 <ble_uuid_flat>
    return 0;
   14efc:	2000      	movs	r0, #0
   14efe:	e002      	b.n	14f06 <ble_att_svr_read_group_type_entry_write+0x42>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   14f00:	2606      	movs	r6, #6
   14f02:	e7e5      	b.n	14ed0 <ble_att_svr_read_group_type_entry_write+0xc>
        return BLE_HS_EMSGSIZE;
   14f04:	2004      	movs	r0, #4
}
   14f06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   14f08:	2006      	movs	r0, #6
   14f0a:	e7fc      	b.n	14f06 <ble_att_svr_read_group_type_entry_write+0x42>

00014f0c <ble_att_svr_is_valid_find_group_type>:
{
   14f0c:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   14f0e:	f7ff fb3d 	bl	1458c <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   14f12:	f5a0 5320 	sub.w	r3, r0, #10240	; 0x2800
   14f16:	b29b      	uxth	r3, r3
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   14f18:	2b01      	cmp	r3, #1
   14f1a:	d907      	bls.n	14f2c <ble_att_svr_is_valid_find_group_type+0x20>
   14f1c:	f642 0303 	movw	r3, #10243	; 0x2803
   14f20:	4298      	cmp	r0, r3
   14f22:	d001      	beq.n	14f28 <ble_att_svr_is_valid_find_group_type+0x1c>
   14f24:	2000      	movs	r0, #0
}
   14f26:	bd08      	pop	{r3, pc}
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   14f28:	2001      	movs	r0, #1
   14f2a:	e7fc      	b.n	14f26 <ble_att_svr_is_valid_find_group_type+0x1a>
   14f2c:	2001      	movs	r0, #1
   14f2e:	e7fa      	b.n	14f26 <ble_att_svr_is_valid_find_group_type+0x1a>

00014f30 <ble_att_svr_is_valid_group_end>:
    if (uuid_group->type != BLE_UUID_TYPE_16) {
   14f30:	7803      	ldrb	r3, [r0, #0]
   14f32:	2b10      	cmp	r3, #16
   14f34:	d001      	beq.n	14f3a <ble_att_svr_is_valid_group_end+0xa>
        return 1;
   14f36:	2001      	movs	r0, #1
   14f38:	4770      	bx	lr
    if (uuid->type != BLE_UUID_TYPE_16) {
   14f3a:	780b      	ldrb	r3, [r1, #0]
   14f3c:	2b10      	cmp	r3, #16
   14f3e:	d001      	beq.n	14f44 <ble_att_svr_is_valid_group_end+0x14>
        return 0;
   14f40:	2000      	movs	r0, #0
}
   14f42:	4770      	bx	lr
{
   14f44:	b510      	push	{r4, lr}
   14f46:	460c      	mov	r4, r1
    switch (ble_uuid_u16(uuid_group)) {
   14f48:	f7ff fb20 	bl	1458c <ble_uuid_u16>
   14f4c:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
   14f50:	d316      	bcc.n	14f80 <ble_att_svr_is_valid_group_end+0x50>
   14f52:	f642 0301 	movw	r3, #10241	; 0x2801
   14f56:	4298      	cmp	r0, r3
   14f58:	d907      	bls.n	14f6a <ble_att_svr_is_valid_group_end+0x3a>
   14f5a:	f642 0303 	movw	r3, #10243	; 0x2803
   14f5e:	4298      	cmp	r0, r3
   14f60:	d10e      	bne.n	14f80 <ble_att_svr_is_valid_group_end+0x50>
        return ble_att_svr_is_valid_find_group_type(uuid);
   14f62:	4620      	mov	r0, r4
   14f64:	f7ff ffd2 	bl	14f0c <ble_att_svr_is_valid_find_group_type>
   14f68:	e009      	b.n	14f7e <ble_att_svr_is_valid_group_end+0x4e>
        uuid16 = ble_uuid_u16(uuid);
   14f6a:	4620      	mov	r0, r4
   14f6c:	f7ff fb0e 	bl	1458c <ble_uuid_u16>
        return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   14f70:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   14f74:	b280      	uxth	r0, r0
   14f76:	2801      	cmp	r0, #1
   14f78:	bf8c      	ite	hi
   14f7a:	2000      	movhi	r0, #0
   14f7c:	2001      	movls	r0, #1
}
   14f7e:	bd10      	pop	{r4, pc}
        return 1;
   14f80:	2001      	movs	r0, #1
   14f82:	e7fc      	b.n	14f7e <ble_att_svr_is_valid_group_end+0x4e>

00014f84 <ble_att_svr_is_valid_read_group_type>:
{
   14f84:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   14f86:	f7ff fb01 	bl	1458c <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   14f8a:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   14f8e:	b280      	uxth	r0, r0
}
   14f90:	2801      	cmp	r0, #1
   14f92:	bf8c      	ite	hi
   14f94:	2000      	movhi	r0, #0
   14f96:	2001      	movls	r0, #1
   14f98:	bd08      	pop	{r3, pc}

00014f9a <ble_att_svr_read_flat>:
{
   14f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14f9e:	b082      	sub	sp, #8
   14fa0:	4605      	mov	r5, r0
   14fa2:	460e      	mov	r6, r1
   14fa4:	4617      	mov	r7, r2
   14fa6:	4698      	mov	r8, r3
    om = ble_hs_mbuf_l2cap_pkt();
   14fa8:	f7fc fb54 	bl	11654 <ble_hs_mbuf_l2cap_pkt>
    if (om == NULL) {
   14fac:	4604      	mov	r4, r0
   14fae:	b1d0      	cbz	r0, 14fe6 <ble_att_svr_read_flat+0x4c>
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   14fb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14fb2:	9300      	str	r3, [sp, #0]
   14fb4:	4603      	mov	r3, r0
   14fb6:	463a      	mov	r2, r7
   14fb8:	4631      	mov	r1, r6
   14fba:	4628      	mov	r0, r5
   14fbc:	f7ff fe16 	bl	14bec <ble_att_svr_read>
    if (rc != 0) {
   14fc0:	4605      	mov	r5, r0
   14fc2:	b988      	cbnz	r0, 14fe8 <ble_att_svr_read_flat+0x4e>
    len = OS_MBUF_PKTLEN(om);
   14fc4:	8a26      	ldrh	r6, [r4, #16]
    if (len > max_len) {
   14fc6:	4546      	cmp	r6, r8
   14fc8:	d808      	bhi.n	14fdc <ble_att_svr_read_flat+0x42>
    rc = os_mbuf_copydata(om, 0, len, dst);
   14fca:	9b08      	ldr	r3, [sp, #32]
   14fcc:	4632      	mov	r2, r6
   14fce:	2100      	movs	r1, #0
   14fd0:	4620      	mov	r0, r4
   14fd2:	f7f5 fa79 	bl	a4c8 <os_mbuf_copydata>
    *out_len = len;
   14fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14fd8:	801e      	strh	r6, [r3, #0]
   14fda:	e005      	b.n	14fe8 <ble_att_svr_read_flat+0x4e>
        *out_att_err = BLE_ATT_ERR_UNLIKELY;
   14fdc:	230e      	movs	r3, #14
   14fde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14fe0:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_EMSGSIZE;
   14fe2:	2504      	movs	r5, #4
        goto done;
   14fe4:	e000      	b.n	14fe8 <ble_att_svr_read_flat+0x4e>
        rc = BLE_HS_ENOMEM;
   14fe6:	2506      	movs	r5, #6
    os_mbuf_free_chain(om);
   14fe8:	4620      	mov	r0, r4
   14fea:	f7f5 f96b 	bl	a2c4 <os_mbuf_free_chain>
}
   14fee:	4628      	mov	r0, r5
   14ff0:	b002      	add	sp, #8
   14ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014ff6 <ble_att_svr_fill_type_value_entry>:
{
   14ff6:	b530      	push	{r4, r5, lr}
   14ff8:	b083      	sub	sp, #12
    rsp_sz = OS_MBUF_PKTHDR(om)->omp_len + 4;
   14ffa:	8a04      	ldrh	r4, [r0, #16]
   14ffc:	3404      	adds	r4, #4
    if (rsp_sz > mtu) {
   14ffe:	429c      	cmp	r4, r3
   15000:	dd02      	ble.n	15008 <ble_att_svr_fill_type_value_entry+0x12>
        return 0;
   15002:	2000      	movs	r0, #0
}
   15004:	b003      	add	sp, #12
   15006:	bd30      	pop	{r4, r5, pc}
   15008:	4615      	mov	r5, r2
   1500a:	4604      	mov	r4, r0
    put_le16(&u16, first);
   1500c:	f10d 0006 	add.w	r0, sp, #6
   15010:	f006 fdec 	bl	1bbec <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   15014:	2202      	movs	r2, #2
   15016:	f10d 0106 	add.w	r1, sp, #6
   1501a:	4620      	mov	r0, r4
   1501c:	f7f5 f964 	bl	a2e8 <os_mbuf_append>
    if (rc != 0) {
   15020:	b968      	cbnz	r0, 1503e <ble_att_svr_fill_type_value_entry+0x48>
    put_le16(&u16, last);
   15022:	4629      	mov	r1, r5
   15024:	f10d 0006 	add.w	r0, sp, #6
   15028:	f006 fde0 	bl	1bbec <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   1502c:	2202      	movs	r2, #2
   1502e:	f10d 0106 	add.w	r1, sp, #6
   15032:	4620      	mov	r0, r4
   15034:	f7f5 f958 	bl	a2e8 <os_mbuf_append>
    if (rc != 0) {
   15038:	b930      	cbnz	r0, 15048 <ble_att_svr_fill_type_value_entry+0x52>
    return BLE_HS_EAGAIN;
   1503a:	2001      	movs	r0, #1
   1503c:	e7e2      	b.n	15004 <ble_att_svr_fill_type_value_entry+0xe>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1503e:	2311      	movs	r3, #17
   15040:	9a06      	ldr	r2, [sp, #24]
   15042:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   15044:	2006      	movs	r0, #6
   15046:	e7dd      	b.n	15004 <ble_att_svr_fill_type_value_entry+0xe>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   15048:	2311      	movs	r3, #17
   1504a:	9a06      	ldr	r2, [sp, #24]
   1504c:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   1504e:	2006      	movs	r0, #6
   15050:	e7d8      	b.n	15004 <ble_att_svr_fill_type_value_entry+0xe>
	...

00015054 <ble_att_svr_fill_type_value>:
{
   15054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15058:	b08d      	sub	sp, #52	; 0x34
   1505a:	4683      	mov	fp, r0
   1505c:	460e      	mov	r6, r1
   1505e:	4690      	mov	r8, r2
   15060:	9305      	str	r3, [sp, #20]
   15062:	f8bd a060 	ldrh.w	sl, [sp, #96]	; 0x60
   15066:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1506a:	4b33      	ldr	r3, [pc, #204]	; (15138 <ble_att_svr_fill_type_value+0xe4>)
   1506c:	681c      	ldr	r4, [r3, #0]
    prev = 0;
   1506e:	2700      	movs	r7, #0
    first = 0;
   15070:	463d      	mov	r5, r7
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   15072:	e015      	b.n	150a0 <ble_att_svr_fill_type_value+0x4c>
            rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   15074:	f8cd 9000 	str.w	r9, [sp]
   15078:	4653      	mov	r3, sl
   1507a:	463a      	mov	r2, r7
   1507c:	4629      	mov	r1, r5
   1507e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   15080:	f7ff ffb9 	bl	14ff6 <ble_att_svr_fill_type_value_entry>
   15084:	4603      	mov	r3, r0
            if (rc != BLE_HS_EAGAIN) {
   15086:	2801      	cmp	r0, #1
   15088:	d13a      	bne.n	15100 <ble_att_svr_fill_type_value+0xac>
            if (ha->ha_handle_id > end_handle) {
   1508a:	8963      	ldrh	r3, [r4, #10]
   1508c:	4543      	cmp	r3, r8
   1508e:	d833      	bhi.n	150f8 <ble_att_svr_fill_type_value+0xa4>
            prev = 0;
   15090:	2700      	movs	r7, #0
            first = 0;
   15092:	463d      	mov	r5, r7
        if (ble_uuid_cmp(ha->ha_uuid, &attr_type.u) == 0) {
   15094:	a905      	add	r1, sp, #20
   15096:	6860      	ldr	r0, [r4, #4]
   15098:	f7ff fa04 	bl	144a4 <ble_uuid_cmp>
   1509c:	b188      	cbz	r0, 150c2 <ble_att_svr_fill_type_value+0x6e>
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   1509e:	6824      	ldr	r4, [r4, #0]
   150a0:	b364      	cbz	r4, 150fc <ble_att_svr_fill_type_value+0xa8>
        if (ha->ha_handle_id < start_handle) {
   150a2:	8963      	ldrh	r3, [r4, #10]
   150a4:	42b3      	cmp	r3, r6
   150a6:	d3fa      	bcc.n	1509e <ble_att_svr_fill_type_value+0x4a>
        if (!first && ha->ha_handle_id > end_handle) {
   150a8:	b90d      	cbnz	r5, 150ae <ble_att_svr_fill_type_value+0x5a>
   150aa:	4543      	cmp	r3, r8
   150ac:	d826      	bhi.n	150fc <ble_att_svr_fill_type_value+0xa8>
        if (first) {
   150ae:	2d00      	cmp	r5, #0
   150b0:	d0f0      	beq.n	15094 <ble_att_svr_fill_type_value+0x40>
            if (!ble_att_svr_is_valid_group_end(&attr_type.u, ha->ha_uuid)) {
   150b2:	6861      	ldr	r1, [r4, #4]
   150b4:	a805      	add	r0, sp, #20
   150b6:	f7ff ff3b 	bl	14f30 <ble_att_svr_is_valid_group_end>
   150ba:	2800      	cmp	r0, #0
   150bc:	d1da      	bne.n	15074 <ble_att_svr_fill_type_value+0x20>
                prev = ha->ha_handle_id;
   150be:	8967      	ldrh	r7, [r4, #10]
                continue;
   150c0:	e7ed      	b.n	1509e <ble_att_svr_fill_type_value+0x4a>
            rc = ble_att_svr_read_flat(conn_handle, ha, 0, sizeof buf, buf,
   150c2:	f8cd 9008 	str.w	r9, [sp, #8]
   150c6:	f10d 031e 	add.w	r3, sp, #30
   150ca:	9301      	str	r3, [sp, #4]
   150cc:	ab08      	add	r3, sp, #32
   150ce:	9300      	str	r3, [sp, #0]
   150d0:	2310      	movs	r3, #16
   150d2:	2200      	movs	r2, #0
   150d4:	4621      	mov	r1, r4
   150d6:	4658      	mov	r0, fp
   150d8:	f7ff ff5f 	bl	14f9a <ble_att_svr_read_flat>
            if (rc != 0) {
   150dc:	4603      	mov	r3, r0
   150de:	b978      	cbnz	r0, 15100 <ble_att_svr_fill_type_value+0xac>
            rc = os_mbuf_cmpf(rxom, sizeof(struct ble_att_find_type_value_req),
   150e0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   150e4:	aa08      	add	r2, sp, #32
   150e6:	2106      	movs	r1, #6
   150e8:	9816      	ldr	r0, [sp, #88]	; 0x58
   150ea:	f7f5 fa6c 	bl	a5c6 <os_mbuf_cmpf>
            if (rc == 0) {
   150ee:	2800      	cmp	r0, #0
   150f0:	d1d5      	bne.n	1509e <ble_att_svr_fill_type_value+0x4a>
                first = ha->ha_handle_id;
   150f2:	8965      	ldrh	r5, [r4, #10]
                prev = ha->ha_handle_id;
   150f4:	462f      	mov	r7, r5
   150f6:	e7d2      	b.n	1509e <ble_att_svr_fill_type_value+0x4a>
            prev = 0;
   150f8:	2700      	movs	r7, #0
            first = 0;
   150fa:	463d      	mov	r5, r7
    if (first) {
   150fc:	b94d      	cbnz	r5, 15112 <ble_att_svr_fill_type_value+0xbe>
        rc = 0;
   150fe:	2300      	movs	r3, #0
    any_entries = OS_MBUF_PKTHDR(txom)->omp_len >
   15100:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   15102:	8a12      	ldrh	r2, [r2, #16]
    if (rc == 0 && !any_entries) {
   15104:	b90b      	cbnz	r3, 1510a <ble_att_svr_fill_type_value+0xb6>
   15106:	2a01      	cmp	r2, #1
   15108:	d910      	bls.n	1512c <ble_att_svr_fill_type_value+0xd8>
}
   1510a:	4618      	mov	r0, r3
   1510c:	b00d      	add	sp, #52	; 0x34
   1510e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   15112:	f8cd 9000 	str.w	r9, [sp]
   15116:	4653      	mov	r3, sl
   15118:	463a      	mov	r2, r7
   1511a:	4629      	mov	r1, r5
   1511c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1511e:	f7ff ff6a 	bl	14ff6 <ble_att_svr_fill_type_value_entry>
   15122:	4603      	mov	r3, r0
        if (rc == BLE_HS_EAGAIN) {
   15124:	2801      	cmp	r0, #1
   15126:	d1eb      	bne.n	15100 <ble_att_svr_fill_type_value+0xac>
            rc = 0;
   15128:	2300      	movs	r3, #0
   1512a:	e7e9      	b.n	15100 <ble_att_svr_fill_type_value+0xac>
        *out_att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1512c:	230a      	movs	r3, #10
   1512e:	f889 3000 	strb.w	r3, [r9]
        return BLE_HS_ENOENT;
   15132:	2305      	movs	r3, #5
   15134:	e7e9      	b.n	1510a <ble_att_svr_fill_type_value+0xb6>
   15136:	bf00      	nop
   15138:	200077d4 	.word	0x200077d4

0001513c <ble_att_svr_build_find_type_value_rsp>:
{
   1513c:	b570      	push	{r4, r5, r6, lr}
   1513e:	b088      	sub	sp, #32
   15140:	4604      	mov	r4, r0
   15142:	460d      	mov	r5, r1
   15144:	4616      	mov	r6, r2
   15146:	9305      	str	r3, [sp, #20]
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   15148:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1514a:	a907      	add	r1, sp, #28
   1514c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1514e:	f7ff fded 	bl	14d2c <ble_att_svr_pkt>
    if (rc != 0) {
   15152:	4603      	mov	r3, r0
   15154:	b128      	cbz	r0, 15162 <ble_att_svr_build_find_type_value_rsp+0x26>
    *out_txom = txom;
   15156:	9907      	ldr	r1, [sp, #28]
   15158:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1515a:	6011      	str	r1, [r2, #0]
}
   1515c:	4618      	mov	r0, r3
   1515e:	b008      	add	sp, #32
   15160:	bd70      	pop	{r4, r5, r6, pc}
    buf = ble_att_cmd_prepare(BLE_ATT_OP_FIND_TYPE_VALUE_RSP, 0, txom);
   15162:	9a07      	ldr	r2, [sp, #28]
   15164:	2100      	movs	r1, #0
   15166:	2007      	movs	r0, #7
   15168:	f7ff fc05 	bl	14976 <ble_att_cmd_prepare>
    if (buf == NULL) {
   1516c:	b190      	cbz	r0, 15194 <ble_att_svr_build_find_type_value_rsp+0x58>
    mtu = ble_att_mtu(conn_handle);
   1516e:	4620      	mov	r0, r4
   15170:	f7ff fb1f 	bl	147b2 <ble_att_mtu>
    rc = ble_att_svr_fill_type_value(conn_handle, start_handle, end_handle,
   15174:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   15176:	681b      	ldr	r3, [r3, #0]
   15178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1517a:	9203      	str	r2, [sp, #12]
   1517c:	9002      	str	r0, [sp, #8]
   1517e:	9a07      	ldr	r2, [sp, #28]
   15180:	9201      	str	r2, [sp, #4]
   15182:	9300      	str	r3, [sp, #0]
   15184:	9b05      	ldr	r3, [sp, #20]
   15186:	4632      	mov	r2, r6
   15188:	4629      	mov	r1, r5
   1518a:	4620      	mov	r0, r4
   1518c:	f7ff ff62 	bl	15054 <ble_att_svr_fill_type_value>
   15190:	4603      	mov	r3, r0
   15192:	e7e0      	b.n	15156 <ble_att_svr_build_find_type_value_rsp+0x1a>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   15194:	2311      	movs	r3, #17
   15196:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15198:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   1519a:	2306      	movs	r3, #6
        goto done;
   1519c:	e7db      	b.n	15156 <ble_att_svr_build_find_type_value_rsp+0x1a>

0001519e <ble_att_svr_service_uuid>:
{
   1519e:	b510      	push	{r4, lr}
   151a0:	b08a      	sub	sp, #40	; 0x28
   151a2:	460c      	mov	r4, r1
    rc = ble_att_svr_read_flat(BLE_HS_CONN_HANDLE_NONE, entry, 0, sizeof(val), val,
   151a4:	9202      	str	r2, [sp, #8]
   151a6:	f10d 0316 	add.w	r3, sp, #22
   151aa:	9301      	str	r3, [sp, #4]
   151ac:	ab06      	add	r3, sp, #24
   151ae:	9300      	str	r3, [sp, #0]
   151b0:	2310      	movs	r3, #16
   151b2:	2200      	movs	r2, #0
   151b4:	4601      	mov	r1, r0
   151b6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   151ba:	f7ff feee 	bl	14f9a <ble_att_svr_read_flat>
    if (rc != 0) {
   151be:	4603      	mov	r3, r0
   151c0:	b110      	cbz	r0, 151c8 <ble_att_svr_service_uuid+0x2a>
}
   151c2:	4618      	mov	r0, r3
   151c4:	b00a      	add	sp, #40	; 0x28
   151c6:	bd10      	pop	{r4, pc}
    rc = ble_uuid_init_from_buf(uuid, val, attr_len);
   151c8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   151cc:	a906      	add	r1, sp, #24
   151ce:	4620      	mov	r0, r4
   151d0:	f7ff f93f 	bl	14452 <ble_uuid_init_from_buf>
   151d4:	4603      	mov	r3, r0
    return rc;
   151d6:	e7f4      	b.n	151c2 <ble_att_svr_service_uuid+0x24>

000151d8 <ble_att_svr_build_read_group_type_rsp>:
{
   151d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151dc:	b08b      	sub	sp, #44	; 0x2c
   151de:	460e      	mov	r6, r1
   151e0:	4617      	mov	r7, r2
   151e2:	9302      	str	r3, [sp, #8]
   151e4:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   151e8:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    *att_err = 0;
   151ec:	f04f 0b00 	mov.w	fp, #0
   151f0:	f88a b000 	strb.w	fp, [sl]
    *err_handle = start_handle;
   151f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   151f6:	8019      	strh	r1, [r3, #0]
    mtu = ble_att_mtu(conn_handle);
   151f8:	f7ff fadb 	bl	147b2 <ble_att_mtu>
   151fc:	9003      	str	r0, [sp, #12]
    txom = *rxom;
   151fe:	f8d9 8000 	ldr.w	r8, [r9]
    *rxom = NULL;
   15202:	f8c9 b000 	str.w	fp, [r9]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   15206:	f8b8 1010 	ldrh.w	r1, [r8, #16]
   1520a:	4640      	mov	r0, r8
   1520c:	f7f5 f989 	bl	a522 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_GROUP_TYPE_RSP, sizeof(*rsp),
   15210:	4642      	mov	r2, r8
   15212:	2101      	movs	r1, #1
   15214:	2011      	movs	r0, #17
   15216:	f7ff fbae 	bl	14976 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1521a:	b130      	cbz	r0, 1522a <ble_att_svr_build_read_group_type_rsp+0x52>
   1521c:	4683      	mov	fp, r0
    rsp->bagp_length = 0;
   1521e:	2500      	movs	r5, #0
   15220:	7005      	strb	r5, [r0, #0]
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   15222:	4b4d      	ldr	r3, [pc, #308]	; (15358 <ble_att_svr_build_read_group_type_rsp+0x180>)
   15224:	681c      	ldr	r4, [r3, #0]
    end_group_handle = 0;
   15226:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   15228:	e042      	b.n	152b0 <ble_att_svr_build_read_group_type_rsp+0xd8>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1522a:	2311      	movs	r3, #17
   1522c:	f88a 3000 	strb.w	r3, [sl]
        rc = BLE_HS_ENOMEM;
   15230:	2306      	movs	r3, #6
    end_group_handle = 0;
   15232:	f04f 0900 	mov.w	r9, #0
        goto done;
   15236:	e05c      	b.n	152f2 <ble_att_svr_build_read_group_type_rsp+0x11a>
            if (!ble_att_svr_is_valid_read_group_type(entry->ha_uuid)) {
   15238:	6860      	ldr	r0, [r4, #4]
   1523a:	f7ff fea3 	bl	14f84 <ble_att_svr_is_valid_read_group_type>
   1523e:	b910      	cbnz	r0, 15246 <ble_att_svr_build_read_group_type_rsp+0x6e>
                end_group_handle = entry->ha_handle_id;
   15240:	f8b4 900a 	ldrh.w	r9, [r4, #10]
   15244:	e03d      	b.n	152c2 <ble_att_svr_build_read_group_type_rsp+0xea>
                rc = ble_att_svr_read_group_type_entry_write(
   15246:	ab05      	add	r3, sp, #20
   15248:	9300      	str	r3, [sp, #0]
   1524a:	464b      	mov	r3, r9
   1524c:	462a      	mov	r2, r5
   1524e:	9903      	ldr	r1, [sp, #12]
   15250:	4640      	mov	r0, r8
   15252:	f7ff fe37 	bl	14ec4 <ble_att_svr_read_group_type_entry_write>
                if (rc != 0) {
   15256:	4603      	mov	r3, r0
   15258:	b918      	cbnz	r0, 15262 <ble_att_svr_build_read_group_type_rsp+0x8a>
                end_group_handle = 0;
   1525a:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1525e:	464d      	mov	r5, r9
   15260:	e031      	b.n	152c6 <ble_att_svr_build_read_group_type_rsp+0xee>
                    *err_handle = entry->ha_handle_id;
   15262:	8962      	ldrh	r2, [r4, #10]
   15264:	9917      	ldr	r1, [sp, #92]	; 0x5c
   15266:	800a      	strh	r2, [r1, #0]
                    if (rc == BLE_HS_ENOMEM) {
   15268:	2806      	cmp	r0, #6
   1526a:	d003      	beq.n	15274 <ble_att_svr_build_read_group_type_rsp+0x9c>
                end_group_handle = 0;
   1526c:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   15270:	464d      	mov	r5, r9
   15272:	e03e      	b.n	152f2 <ble_att_svr_build_read_group_type_rsp+0x11a>
                        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   15274:	2211      	movs	r2, #17
   15276:	f88a 2000 	strb.w	r2, [sl]
                end_group_handle = 0;
   1527a:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   1527e:	464d      	mov	r5, r9
   15280:	e037      	b.n	152f2 <ble_att_svr_build_read_group_type_rsp+0x11a>
                    *err_handle = entry->ha_handle_id;
   15282:	8962      	ldrh	r2, [r4, #10]
   15284:	9917      	ldr	r1, [sp, #92]	; 0x5c
   15286:	800a      	strh	r2, [r1, #0]
                    goto done;
   15288:	e033      	b.n	152f2 <ble_att_svr_build_read_group_type_rsp+0x11a>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   1528a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1528e:	2b10      	cmp	r3, #16
   15290:	d003      	beq.n	1529a <ble_att_svr_build_read_group_type_rsp+0xc2>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   15292:	2314      	movs	r3, #20
   15294:	f88b 3000 	strb.w	r3, [fp]
   15298:	e007      	b.n	152aa <ble_att_svr_build_read_group_type_rsp+0xd2>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   1529a:	2306      	movs	r3, #6
   1529c:	f88b 3000 	strb.w	r3, [fp]
   152a0:	e003      	b.n	152aa <ble_att_svr_build_read_group_type_rsp+0xd2>
                    if (service_uuid.u.type != BLE_UUID_TYPE_16) {
   152a2:	f89d 2014 	ldrb.w	r2, [sp, #20]
   152a6:	2a10      	cmp	r2, #16
   152a8:	d123      	bne.n	152f2 <ble_att_svr_build_read_group_type_rsp+0x11a>
                start_group_handle = entry->ha_handle_id;
   152aa:	8965      	ldrh	r5, [r4, #10]
                end_group_handle = entry->ha_handle_id;
   152ac:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   152ae:	6824      	ldr	r4, [r4, #0]
   152b0:	2c00      	cmp	r4, #0
   152b2:	d03a      	beq.n	1532a <ble_att_svr_build_read_group_type_rsp+0x152>
        if (entry->ha_handle_id < start_handle) {
   152b4:	8963      	ldrh	r3, [r4, #10]
   152b6:	42b3      	cmp	r3, r6
   152b8:	d3f9      	bcc.n	152ae <ble_att_svr_build_read_group_type_rsp+0xd6>
        if (entry->ha_handle_id > end_handle) {
   152ba:	42bb      	cmp	r3, r7
   152bc:	d837      	bhi.n	1532e <ble_att_svr_build_read_group_type_rsp+0x156>
        if (start_group_handle != 0) {
   152be:	2d00      	cmp	r5, #0
   152c0:	d1ba      	bne.n	15238 <ble_att_svr_build_read_group_type_rsp+0x60>
        if (start_group_handle == 0) {
   152c2:	2d00      	cmp	r5, #0
   152c4:	d1f3      	bne.n	152ae <ble_att_svr_build_read_group_type_rsp+0xd6>
            if (ble_uuid_cmp(entry->ha_uuid, group_uuid) == 0) {
   152c6:	9902      	ldr	r1, [sp, #8]
   152c8:	6860      	ldr	r0, [r4, #4]
   152ca:	f7ff f8eb 	bl	144a4 <ble_uuid_cmp>
   152ce:	2800      	cmp	r0, #0
   152d0:	d1ed      	bne.n	152ae <ble_att_svr_build_read_group_type_rsp+0xd6>
                rc = ble_att_svr_service_uuid(entry, &service_uuid, att_err);
   152d2:	4652      	mov	r2, sl
   152d4:	a905      	add	r1, sp, #20
   152d6:	4620      	mov	r0, r4
   152d8:	f7ff ff61 	bl	1519e <ble_att_svr_service_uuid>
                if (rc != 0) {
   152dc:	4603      	mov	r3, r0
   152de:	2800      	cmp	r0, #0
   152e0:	d1cf      	bne.n	15282 <ble_att_svr_build_read_group_type_rsp+0xaa>
                switch (rsp->bagp_length) {
   152e2:	f89b 2000 	ldrb.w	r2, [fp]
   152e6:	2a06      	cmp	r2, #6
   152e8:	d0db      	beq.n	152a2 <ble_att_svr_build_read_group_type_rsp+0xca>
   152ea:	2a14      	cmp	r2, #20
   152ec:	d018      	beq.n	15320 <ble_att_svr_build_read_group_type_rsp+0x148>
   152ee:	2a00      	cmp	r2, #0
   152f0:	d0cb      	beq.n	1528a <ble_att_svr_build_read_group_type_rsp+0xb2>
    if (rc == 0) {
   152f2:	bb2b      	cbnz	r3, 15340 <ble_att_svr_build_read_group_type_rsp+0x168>
        if (start_group_handle != 0) {
   152f4:	b15d      	cbz	r5, 1530e <ble_att_svr_build_read_group_type_rsp+0x136>
            if (entry == NULL) {
   152f6:	b1e4      	cbz	r4, 15332 <ble_att_svr_build_read_group_type_rsp+0x15a>
            rc = ble_att_svr_read_group_type_entry_write(txom, mtu,
   152f8:	ab05      	add	r3, sp, #20
   152fa:	9300      	str	r3, [sp, #0]
   152fc:	464b      	mov	r3, r9
   152fe:	462a      	mov	r2, r5
   15300:	9903      	ldr	r1, [sp, #12]
   15302:	4640      	mov	r0, r8
   15304:	f7ff fdde 	bl	14ec4 <ble_att_svr_read_group_type_entry_write>
   15308:	4603      	mov	r3, r0
            if (rc == BLE_HS_ENOMEM) {
   1530a:	2806      	cmp	r0, #6
   1530c:	d014      	beq.n	15338 <ble_att_svr_build_read_group_type_rsp+0x160>
        if (OS_MBUF_PKTLEN(txom) <= BLE_ATT_READ_GROUP_TYPE_RSP_BASE_SZ) {
   1530e:	f8b8 2010 	ldrh.w	r2, [r8, #16]
   15312:	2a02      	cmp	r2, #2
   15314:	d814      	bhi.n	15340 <ble_att_svr_build_read_group_type_rsp+0x168>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   15316:	230a      	movs	r3, #10
   15318:	f88a 3000 	strb.w	r3, [sl]
            rc = BLE_HS_ENOENT;
   1531c:	2305      	movs	r3, #5
   1531e:	e010      	b.n	15342 <ble_att_svr_build_read_group_type_rsp+0x16a>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   15320:	f89d 2014 	ldrb.w	r2, [sp, #20]
   15324:	2a10      	cmp	r2, #16
   15326:	d1c0      	bne.n	152aa <ble_att_svr_build_read_group_type_rsp+0xd2>
   15328:	e7e3      	b.n	152f2 <ble_att_svr_build_read_group_type_rsp+0x11a>
    rc = 0;
   1532a:	2300      	movs	r3, #0
   1532c:	e7e1      	b.n	152f2 <ble_att_svr_build_read_group_type_rsp+0x11a>
            rc = 0;
   1532e:	2300      	movs	r3, #0
   15330:	e7df      	b.n	152f2 <ble_att_svr_build_read_group_type_rsp+0x11a>
                end_group_handle = 0xffff;
   15332:	f64f 79ff 	movw	r9, #65535	; 0xffff
   15336:	e7df      	b.n	152f8 <ble_att_svr_build_read_group_type_rsp+0x120>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   15338:	2211      	movs	r2, #17
   1533a:	f88a 2000 	strb.w	r2, [sl]
   1533e:	e7e6      	b.n	1530e <ble_att_svr_build_read_group_type_rsp+0x136>
    if (rc == 0 || rc == BLE_HS_EMSGSIZE) {
   15340:	b10b      	cbz	r3, 15346 <ble_att_svr_build_read_group_type_rsp+0x16e>
   15342:	2b04      	cmp	r3, #4
   15344:	d006      	beq.n	15354 <ble_att_svr_build_read_group_type_rsp+0x17c>
    *out_txom = txom;
   15346:	9a15      	ldr	r2, [sp, #84]	; 0x54
   15348:	f8c2 8000 	str.w	r8, [r2]
}
   1534c:	4618      	mov	r0, r3
   1534e:	b00b      	add	sp, #44	; 0x2c
   15350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = 0;
   15354:	2300      	movs	r3, #0
   15356:	e7f6      	b.n	15346 <ble_att_svr_build_read_group_type_rsp+0x16e>
   15358:	200077d4 	.word	0x200077d4

0001535c <ble_att_svr_prep_free>:
    if (entry != NULL) {
   1535c:	b148      	cbz	r0, 15372 <ble_att_svr_prep_free+0x16>
{
   1535e:	b510      	push	{r4, lr}
   15360:	4604      	mov	r4, r0
        os_mbuf_free_chain(entry->bape_value);
   15362:	6880      	ldr	r0, [r0, #8]
   15364:	f7f4 ffae 	bl	a2c4 <os_mbuf_free_chain>
        os_memblock_put(&ble_att_svr_prep_entry_pool, entry);
   15368:	4621      	mov	r1, r4
   1536a:	4802      	ldr	r0, [pc, #8]	; (15374 <ble_att_svr_prep_free+0x18>)
   1536c:	f7f5 fc21 	bl	abb2 <os_memblock_put>
}
   15370:	bd10      	pop	{r4, pc}
   15372:	4770      	bx	lr
   15374:	20007adc 	.word	0x20007adc

00015378 <ble_att_svr_prep_alloc>:
{
   15378:	b538      	push	{r3, r4, r5, lr}
   1537a:	4605      	mov	r5, r0
    entry = os_memblock_get(&ble_att_svr_prep_entry_pool);
   1537c:	480c      	ldr	r0, [pc, #48]	; (153b0 <ble_att_svr_prep_alloc+0x38>)
   1537e:	f7f5 fbf0 	bl	ab62 <os_memblock_get>
    if (entry == NULL) {
   15382:	4604      	mov	r4, r0
   15384:	b148      	cbz	r0, 1539a <ble_att_svr_prep_alloc+0x22>
    memset(entry, 0, sizeof *entry);
   15386:	2300      	movs	r3, #0
   15388:	6003      	str	r3, [r0, #0]
   1538a:	6043      	str	r3, [r0, #4]
   1538c:	6083      	str	r3, [r0, #8]
    entry->bape_value = ble_hs_mbuf_l2cap_pkt();
   1538e:	f7fc f961 	bl	11654 <ble_hs_mbuf_l2cap_pkt>
   15392:	60a0      	str	r0, [r4, #8]
    if (entry->bape_value == NULL) {
   15394:	b120      	cbz	r0, 153a0 <ble_att_svr_prep_alloc+0x28>
}
   15396:	4620      	mov	r0, r4
   15398:	bd38      	pop	{r3, r4, r5, pc}
        *att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   1539a:	2309      	movs	r3, #9
   1539c:	702b      	strb	r3, [r5, #0]
        return NULL;
   1539e:	e7fa      	b.n	15396 <ble_att_svr_prep_alloc+0x1e>
        ble_att_svr_prep_free(entry);
   153a0:	4620      	mov	r0, r4
   153a2:	f7ff ffdb 	bl	1535c <ble_att_svr_prep_free>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   153a6:	2311      	movs	r3, #17
   153a8:	702b      	strb	r3, [r5, #0]
        return NULL;
   153aa:	2400      	movs	r4, #0
   153ac:	e7f3      	b.n	15396 <ble_att_svr_prep_alloc+0x1e>
   153ae:	bf00      	nop
   153b0:	20007adc 	.word	0x20007adc

000153b4 <ble_att_svr_insert_prep_entry>:
{
   153b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   153b8:	460e      	mov	r6, r1
   153ba:	4617      	mov	r7, r2
   153bc:	461d      	mov	r5, r3
    conn = ble_hs_conn_find_assert(conn_handle);
   153be:	f7fb fa05 	bl	107cc <ble_hs_conn_find_assert>
   153c2:	4680      	mov	r8, r0
    prep_entry = ble_att_svr_prep_alloc(out_att_err);
   153c4:	9806      	ldr	r0, [sp, #24]
   153c6:	f7ff ffd7 	bl	15378 <ble_att_svr_prep_alloc>
    if (prep_entry == NULL) {
   153ca:	b378      	cbz	r0, 1542c <ble_att_svr_insert_prep_entry+0x78>
   153cc:	4604      	mov	r4, r0
    prep_entry->bape_handle = handle;
   153ce:	8086      	strh	r6, [r0, #4]
    prep_entry->bape_offset = offset;
   153d0:	80c7      	strh	r7, [r0, #6]
        OS_MBUF_PKTLEN(rxom) - sizeof(struct ble_att_prep_write_cmd));
   153d2:	8a2b      	ldrh	r3, [r5, #16]
    rc = os_mbuf_appendfrom(
   153d4:	3b04      	subs	r3, #4
   153d6:	b29b      	uxth	r3, r3
   153d8:	2204      	movs	r2, #4
   153da:	4629      	mov	r1, r5
   153dc:	6880      	ldr	r0, [r0, #8]
   153de:	f7f5 f849 	bl	a474 <os_mbuf_appendfrom>
    if (rc != 0) {
   153e2:	4605      	mov	r5, r0
   153e4:	b9a8      	cbnz	r0, 15412 <ble_att_svr_insert_prep_entry+0x5e>
    prep_prev = ble_att_svr_prep_find_prev(&conn->bhc_att_svr,
   153e6:	463a      	mov	r2, r7
   153e8:	4631      	mov	r1, r6
   153ea:	f108 0044 	add.w	r0, r8, #68	; 0x44
   153ee:	f7ff fb13 	bl	14a18 <ble_att_svr_prep_find_prev>
    if (prep_prev == NULL) {
   153f2:	b1a8      	cbz	r0, 15420 <ble_att_svr_insert_prep_entry+0x6c>
        SLIST_INSERT_AFTER(prep_prev, prep_entry, bape_next);
   153f4:	6802      	ldr	r2, [r0, #0]
   153f6:	6022      	str	r2, [r4, #0]
   153f8:	6004      	str	r4, [r0, #0]
   153fa:	f7f6 f85d 	bl	b4b8 <os_time_get>
        ble_npl_time_get() + BLE_HS_ATT_SVR_QUEUED_WRITE_TMO;
   153fe:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   15402:	3030      	adds	r0, #48	; 0x30
    conn->bhc_att_svr.basc_prep_timeout_at =
   15404:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
    ble_hs_timer_resched();
   15408:	f7fa fc9a 	bl	fd40 <ble_hs_timer_resched>
}
   1540c:	4628      	mov	r0, r5
   1540e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_att_svr_prep_free(prep_entry);
   15412:	4620      	mov	r0, r4
   15414:	f7ff ffa2 	bl	1535c <ble_att_svr_prep_free>
        *out_att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   15418:	2309      	movs	r3, #9
   1541a:	9a06      	ldr	r2, [sp, #24]
   1541c:	7013      	strb	r3, [r2, #0]
        return rc;
   1541e:	e7f5      	b.n	1540c <ble_att_svr_insert_prep_entry+0x58>
        SLIST_INSERT_HEAD(&conn->bhc_att_svr.basc_prep_list, prep_entry,
   15420:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   15424:	6023      	str	r3, [r4, #0]
   15426:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
   1542a:	e7e6      	b.n	153fa <ble_att_svr_insert_prep_entry+0x46>
        return BLE_HS_ENOMEM;
   1542c:	2506      	movs	r5, #6
   1542e:	e7ed      	b.n	1540c <ble_att_svr_insert_prep_entry+0x58>

00015430 <ble_att_svr_prep_extract>:
{
   15430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15434:	4605      	mov	r5, r0
   15436:	4689      	mov	r9, r1
   15438:	4690      	mov	r8, r2
    first = SLIST_FIRST(prep_list);
   1543a:	6803      	ldr	r3, [r0, #0]
    attr_handle = first->bape_handle;
   1543c:	889f      	ldrh	r7, [r3, #4]
    om = NULL;
   1543e:	2600      	movs	r6, #0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   15440:	e008      	b.n	15454 <ble_att_svr_prep_extract+0x24>
            om = entry->bape_value;
   15442:	68a6      	ldr	r6, [r4, #8]
        entry->bape_value = NULL;
   15444:	2300      	movs	r3, #0
   15446:	60a3      	str	r3, [r4, #8]
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   15448:	682b      	ldr	r3, [r5, #0]
   1544a:	681b      	ldr	r3, [r3, #0]
   1544c:	602b      	str	r3, [r5, #0]
        ble_att_svr_prep_free(entry);
   1544e:	4620      	mov	r0, r4
   15450:	f7ff ff84 	bl	1535c <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   15454:	682c      	ldr	r4, [r5, #0]
   15456:	b14c      	cbz	r4, 1546c <ble_att_svr_prep_extract+0x3c>
        if (entry->bape_handle != attr_handle) {
   15458:	88a3      	ldrh	r3, [r4, #4]
   1545a:	42bb      	cmp	r3, r7
   1545c:	d106      	bne.n	1546c <ble_att_svr_prep_extract+0x3c>
        if (om == NULL) {
   1545e:	2e00      	cmp	r6, #0
   15460:	d0ef      	beq.n	15442 <ble_att_svr_prep_extract+0x12>
            os_mbuf_concat(om, entry->bape_value);
   15462:	68a1      	ldr	r1, [r4, #8]
   15464:	4630      	mov	r0, r6
   15466:	f7f5 f992 	bl	a78e <os_mbuf_concat>
   1546a:	e7eb      	b.n	15444 <ble_att_svr_prep_extract+0x14>
    *out_attr_handle = attr_handle;
   1546c:	f8a9 7000 	strh.w	r7, [r9]
    *out_om = om;
   15470:	f8c8 6000 	str.w	r6, [r8]
}
   15474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015478 <ble_att_svr_free_start_mem>:
     */
}

static void
ble_att_svr_free_start_mem(void)
{
   15478:	b510      	push	{r4, lr}
    free(ble_att_svr_entry_mem);
   1547a:	4c03      	ldr	r4, [pc, #12]	; (15488 <ble_att_svr_free_start_mem+0x10>)
   1547c:	6820      	ldr	r0, [r4, #0]
   1547e:	f006 fde7 	bl	1c050 <free>
    ble_att_svr_entry_mem = NULL;
   15482:	2300      	movs	r3, #0
   15484:	6023      	str	r3, [r4, #0]
}
   15486:	bd10      	pop	{r4, pc}
   15488:	200077a8 	.word	0x200077a8

0001548c <ble_att_svr_register>:
{
   1548c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15490:	4680      	mov	r8, r0
   15492:	460f      	mov	r7, r1
   15494:	4616      	mov	r6, r2
   15496:	461d      	mov	r5, r3
    entry = ble_att_svr_entry_alloc();
   15498:	f7ff fb00 	bl	14a9c <ble_att_svr_entry_alloc>
    if (entry == NULL) {
   1549c:	b1b8      	cbz	r0, 154ce <ble_att_svr_register+0x42>
   1549e:	4604      	mov	r4, r0
    entry->ha_uuid = uuid;
   154a0:	f8c0 8004 	str.w	r8, [r0, #4]
    entry->ha_flags = flags;
   154a4:	7207      	strb	r7, [r0, #8]
    entry->ha_min_key_size = min_key_size;
   154a6:	7246      	strb	r6, [r0, #9]
    entry->ha_handle_id = ble_att_svr_next_id();
   154a8:	f7ff faae 	bl	14a08 <ble_att_svr_next_id>
   154ac:	8160      	strh	r0, [r4, #10]
    entry->ha_cb = cb;
   154ae:	9b06      	ldr	r3, [sp, #24]
   154b0:	60e3      	str	r3, [r4, #12]
    entry->ha_cb_arg = cb_arg;
   154b2:	9b07      	ldr	r3, [sp, #28]
   154b4:	6123      	str	r3, [r4, #16]
    STAILQ_INSERT_TAIL(&ble_att_svr_list, entry, ha_next);
   154b6:	2300      	movs	r3, #0
   154b8:	6023      	str	r3, [r4, #0]
   154ba:	4b07      	ldr	r3, [pc, #28]	; (154d8 <ble_att_svr_register+0x4c>)
   154bc:	685a      	ldr	r2, [r3, #4]
   154be:	6014      	str	r4, [r2, #0]
   154c0:	605c      	str	r4, [r3, #4]
    if (handle_id != NULL) {
   154c2:	b135      	cbz	r5, 154d2 <ble_att_svr_register+0x46>
        *handle_id = entry->ha_handle_id;
   154c4:	8963      	ldrh	r3, [r4, #10]
   154c6:	802b      	strh	r3, [r5, #0]
    return 0;
   154c8:	2000      	movs	r0, #0
}
   154ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_ENOMEM;
   154ce:	2006      	movs	r0, #6
   154d0:	e7fb      	b.n	154ca <ble_att_svr_register+0x3e>
    return 0;
   154d2:	2000      	movs	r0, #0
   154d4:	e7f9      	b.n	154ca <ble_att_svr_register+0x3e>
   154d6:	bf00      	nop
   154d8:	200077d4 	.word	0x200077d4

000154dc <ble_att_svr_prev_handle>:
}
   154dc:	4b01      	ldr	r3, [pc, #4]	; (154e4 <ble_att_svr_prev_handle+0x8>)
   154de:	8818      	ldrh	r0, [r3, #0]
   154e0:	4770      	bx	lr
   154e2:	bf00      	nop
   154e4:	200077d0 	.word	0x200077d0

000154e8 <ble_att_svr_find_by_handle>:
    for (entry = STAILQ_FIRST(&ble_att_svr_list);
   154e8:	4b04      	ldr	r3, [pc, #16]	; (154fc <ble_att_svr_find_by_handle+0x14>)
   154ea:	681b      	ldr	r3, [r3, #0]
   154ec:	b123      	cbz	r3, 154f8 <ble_att_svr_find_by_handle+0x10>
        if (entry->ha_handle_id == handle_id) {
   154ee:	895a      	ldrh	r2, [r3, #10]
   154f0:	4282      	cmp	r2, r0
   154f2:	d001      	beq.n	154f8 <ble_att_svr_find_by_handle+0x10>
         entry = STAILQ_NEXT(entry, ha_next)) {
   154f4:	681b      	ldr	r3, [r3, #0]
   154f6:	e7f9      	b.n	154ec <ble_att_svr_find_by_handle+0x4>
}
   154f8:	4618      	mov	r0, r3
   154fa:	4770      	bx	lr
   154fc:	200077d4 	.word	0x200077d4

00015500 <ble_att_svr_write_handle>:
{
   15500:	b5f0      	push	{r4, r5, r6, r7, lr}
   15502:	b083      	sub	sp, #12
   15504:	4605      	mov	r5, r0
   15506:	4616      	mov	r6, r2
   15508:	461f      	mov	r7, r3
   1550a:	9c08      	ldr	r4, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   1550c:	4608      	mov	r0, r1
   1550e:	f7ff ffeb 	bl	154e8 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   15512:	b140      	cbz	r0, 15526 <ble_att_svr_write_handle+0x26>
   15514:	4601      	mov	r1, r0
    rc = ble_att_svr_write(conn_handle, entry, offset, om, out_att_err);
   15516:	9400      	str	r4, [sp, #0]
   15518:	463b      	mov	r3, r7
   1551a:	4632      	mov	r2, r6
   1551c:	4628      	mov	r0, r5
   1551e:	f7ff fb94 	bl	14c4a <ble_att_svr_write>
}
   15522:	b003      	add	sp, #12
   15524:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   15526:	b11c      	cbz	r4, 15530 <ble_att_svr_write_handle+0x30>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   15528:	2301      	movs	r3, #1
   1552a:	7023      	strb	r3, [r4, #0]
        return BLE_HS_ENOENT;
   1552c:	2005      	movs	r0, #5
   1552e:	e7f8      	b.n	15522 <ble_att_svr_write_handle+0x22>
   15530:	2005      	movs	r0, #5
   15532:	e7f6      	b.n	15522 <ble_att_svr_write_handle+0x22>

00015534 <ble_att_svr_prep_write>:
{
   15534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15538:	b084      	sub	sp, #16
   1553a:	4606      	mov	r6, r0
   1553c:	460c      	mov	r4, r1
   1553e:	4617      	mov	r7, r2
    *err_handle = 0; /* Silence unnecessary warning. */
   15540:	2300      	movs	r3, #0
   15542:	8013      	strh	r3, [r2, #0]
    rc = ble_att_svr_prep_validate(prep_list, err_handle);
   15544:	4611      	mov	r1, r2
   15546:	4620      	mov	r0, r4
   15548:	f7ff fa79 	bl	14a3e <ble_att_svr_prep_validate>
    if (rc != 0) {
   1554c:	4680      	mov	r8, r0
   1554e:	b9f8      	cbnz	r0, 15590 <ble_att_svr_prep_write+0x5c>
    while (!SLIST_EMPTY(prep_list)) {
   15550:	6823      	ldr	r3, [r4, #0]
   15552:	b1eb      	cbz	r3, 15590 <ble_att_svr_prep_write+0x5c>
        ble_att_svr_prep_extract(prep_list, &attr_handle, &om);
   15554:	aa03      	add	r2, sp, #12
   15556:	f10d 010a 	add.w	r1, sp, #10
   1555a:	4620      	mov	r0, r4
   1555c:	f7ff ff68 	bl	15430 <ble_att_svr_prep_extract>
        attr = ble_att_svr_find_by_handle(attr_handle);
   15560:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   15564:	f7ff ffc0 	bl	154e8 <ble_att_svr_find_by_handle>
        rc = ble_att_svr_write(conn_handle, attr, 0, &om, &att_err);
   15568:	f10d 0309 	add.w	r3, sp, #9
   1556c:	9300      	str	r3, [sp, #0]
   1556e:	ab03      	add	r3, sp, #12
   15570:	2200      	movs	r2, #0
   15572:	4601      	mov	r1, r0
   15574:	4630      	mov	r0, r6
   15576:	f7ff fb68 	bl	14c4a <ble_att_svr_write>
   1557a:	4605      	mov	r5, r0
        os_mbuf_free_chain(om);
   1557c:	9803      	ldr	r0, [sp, #12]
   1557e:	f7f4 fea1 	bl	a2c4 <os_mbuf_free_chain>
        if (rc != 0) {
   15582:	2d00      	cmp	r5, #0
   15584:	d0e4      	beq.n	15550 <ble_att_svr_prep_write+0x1c>
            *err_handle = attr_handle;
   15586:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   1558a:	803b      	strh	r3, [r7, #0]
            return att_err;
   1558c:	f89d 8009 	ldrb.w	r8, [sp, #9]
}
   15590:	4640      	mov	r0, r8
   15592:	b004      	add	sp, #16
   15594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00015598 <ble_att_svr_find_by_uuid>:
{
   15598:	b570      	push	{r4, r5, r6, lr}
   1559a:	460d      	mov	r5, r1
   1559c:	4616      	mov	r6, r2
    if (prev == NULL) {
   1559e:	b160      	cbz	r0, 155ba <ble_att_svr_find_by_uuid+0x22>
        entry = STAILQ_NEXT(prev, ha_next);
   155a0:	6804      	ldr	r4, [r0, #0]
    for (;
   155a2:	b174      	cbz	r4, 155c2 <ble_att_svr_find_by_uuid+0x2a>
         entry != NULL && entry->ha_handle_id <= end_handle;
   155a4:	8963      	ldrh	r3, [r4, #10]
   155a6:	42b3      	cmp	r3, r6
   155a8:	d80a      	bhi.n	155c0 <ble_att_svr_find_by_uuid+0x28>
        if (uuid == NULL || ble_uuid_cmp(entry->ha_uuid, uuid) == 0) {
   155aa:	b155      	cbz	r5, 155c2 <ble_att_svr_find_by_uuid+0x2a>
   155ac:	4629      	mov	r1, r5
   155ae:	6860      	ldr	r0, [r4, #4]
   155b0:	f7fe ff78 	bl	144a4 <ble_uuid_cmp>
   155b4:	b128      	cbz	r0, 155c2 <ble_att_svr_find_by_uuid+0x2a>
         entry = STAILQ_NEXT(entry, ha_next)) {
   155b6:	6824      	ldr	r4, [r4, #0]
   155b8:	e7f3      	b.n	155a2 <ble_att_svr_find_by_uuid+0xa>
        entry = STAILQ_FIRST(&ble_att_svr_list);
   155ba:	4b03      	ldr	r3, [pc, #12]	; (155c8 <ble_att_svr_find_by_uuid+0x30>)
   155bc:	681c      	ldr	r4, [r3, #0]
   155be:	e7f0      	b.n	155a2 <ble_att_svr_find_by_uuid+0xa>
    return NULL;
   155c0:	2400      	movs	r4, #0
}
   155c2:	4620      	mov	r0, r4
   155c4:	bd70      	pop	{r4, r5, r6, pc}
   155c6:	bf00      	nop
   155c8:	200077d4 	.word	0x200077d4

000155cc <ble_att_svr_build_read_type_rsp>:
{
   155cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155d0:	b08f      	sub	sp, #60	; 0x3c
   155d2:	9006      	str	r0, [sp, #24]
   155d4:	460d      	mov	r5, r1
   155d6:	4617      	mov	r7, r2
   155d8:	9305      	str	r3, [sp, #20]
   155da:	9b18      	ldr	r3, [sp, #96]	; 0x60
   155dc:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
    *att_err = 0;    /* Silence unnecessary warning. */
   155e0:	2200      	movs	r2, #0
   155e2:	f88a 2000 	strb.w	r2, [sl]
    *err_handle = start_handle;
   155e6:	991b      	ldr	r1, [sp, #108]	; 0x6c
   155e8:	800d      	strh	r5, [r1, #0]
    txom = *rxom;
   155ea:	681e      	ldr	r6, [r3, #0]
    *rxom = NULL;
   155ec:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   155ee:	8a31      	ldrh	r1, [r6, #16]
   155f0:	4630      	mov	r0, r6
   155f2:	f7f4 ff96 	bl	a522 <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_TYPE_RSP, sizeof(*rsp), txom);
   155f6:	4632      	mov	r2, r6
   155f8:	2101      	movs	r1, #1
   155fa:	2009      	movs	r0, #9
   155fc:	f7ff f9bb 	bl	14976 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   15600:	9007      	str	r0, [sp, #28]
   15602:	b140      	cbz	r0, 15616 <ble_att_svr_build_read_type_rsp+0x4a>
    mtu = ble_att_mtu(conn_handle);
   15604:	9806      	ldr	r0, [sp, #24]
   15606:	f7ff f8d4 	bl	147b2 <ble_att_mtu>
   1560a:	4681      	mov	r9, r0
    prev_attr_len = 0;
   1560c:	f04f 0800 	mov.w	r8, #0
    entry_written = 0;
   15610:	46c3      	mov	fp, r8
    entry = NULL;
   15612:	4644      	mov	r4, r8
   15614:	e035      	b.n	15682 <ble_att_svr_build_read_type_rsp+0xb6>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   15616:	2311      	movs	r3, #17
   15618:	f88a 3000 	strb.w	r3, [sl]
        *err_handle = 0;
   1561c:	f04f 0b00 	mov.w	fp, #0
   15620:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   15622:	f8a3 b000 	strh.w	fp, [r3]
        rc = BLE_HS_ENOMEM;
   15626:	2206      	movs	r2, #6
    prev_attr_len = 0;
   15628:	46d8      	mov	r8, fp
    if (!entry_written) {
   1562a:	f1bb 0f00 	cmp.w	fp, #0
   1562e:	d15a      	bne.n	156e6 <ble_att_svr_build_read_type_rsp+0x11a>
        if (*att_err == 0) {
   15630:	f89a 3000 	ldrb.w	r3, [sl]
   15634:	b913      	cbnz	r3, 1563c <ble_att_svr_build_read_type_rsp+0x70>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   15636:	230a      	movs	r3, #10
   15638:	f88a 3000 	strb.w	r3, [sl]
        if (rc == 0) {
   1563c:	2a00      	cmp	r2, #0
   1563e:	d15a      	bne.n	156f6 <ble_att_svr_build_read_type_rsp+0x12a>
            rc = BLE_HS_ENOENT;
   15640:	2205      	movs	r2, #5
   15642:	e058      	b.n	156f6 <ble_att_svr_build_read_type_rsp+0x12a>
                *err_handle = entry->ha_handle_id;
   15644:	8963      	ldrh	r3, [r4, #10]
   15646:	991b      	ldr	r1, [sp, #108]	; 0x6c
   15648:	800b      	strh	r3, [r1, #0]
                goto done;
   1564a:	e7ee      	b.n	1562a <ble_att_svr_build_read_type_rsp+0x5e>
            } else if (prev_attr_len != attr_len) {
   1564c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   15650:	4543      	cmp	r3, r8
   15652:	d1ea      	bne.n	1562a <ble_att_svr_build_read_type_rsp+0x5e>
            txomlen = OS_MBUF_PKTHDR(txom)->omp_len + 2 + attr_len;
   15654:	8a33      	ldrh	r3, [r6, #16]
   15656:	3302      	adds	r3, #2
   15658:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   1565c:	440b      	add	r3, r1
            if (txomlen > mtu) {
   1565e:	4599      	cmp	r9, r3
   15660:	dbe3      	blt.n	1562a <ble_att_svr_build_read_type_rsp+0x5e>
            data = os_mbuf_extend(txom, 2 + attr_len);
   15662:	3102      	adds	r1, #2
   15664:	b289      	uxth	r1, r1
   15666:	4630      	mov	r0, r6
   15668:	f7f5 f8b4 	bl	a7d4 <os_mbuf_extend>
            if (data == NULL) {
   1566c:	b388      	cbz	r0, 156d2 <ble_att_svr_build_read_type_rsp+0x106>
            data->handle = htole16(entry->ha_handle_id);
   1566e:	8962      	ldrh	r2, [r4, #10]
   15670:	f820 2b02 	strh.w	r2, [r0], #2
            memcpy(data->value, buf, attr_len);
   15674:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   15678:	a908      	add	r1, sp, #32
   1567a:	f7f6 f909 	bl	b890 <memcpy>
            entry_written = 1;
   1567e:	f04f 0b01 	mov.w	fp, #1
        entry = ble_att_svr_find_by_uuid(entry, uuid, end_handle);
   15682:	463a      	mov	r2, r7
   15684:	9905      	ldr	r1, [sp, #20]
   15686:	4620      	mov	r0, r4
   15688:	f7ff ff86 	bl	15598 <ble_att_svr_find_by_uuid>
        if (entry == NULL) {
   1568c:	4604      	mov	r4, r0
   1568e:	b340      	cbz	r0, 156e2 <ble_att_svr_build_read_type_rsp+0x116>
        if (entry->ha_handle_id >= start_handle) {
   15690:	8943      	ldrh	r3, [r0, #10]
   15692:	42ab      	cmp	r3, r5
   15694:	d3f5      	bcc.n	15682 <ble_att_svr_build_read_type_rsp+0xb6>
            rc = ble_att_svr_read_flat(conn_handle, entry, 0, sizeof buf, buf,
   15696:	f8cd a008 	str.w	sl, [sp, #8]
   1569a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   1569e:	9301      	str	r3, [sp, #4]
   156a0:	ab08      	add	r3, sp, #32
   156a2:	9300      	str	r3, [sp, #0]
   156a4:	2313      	movs	r3, #19
   156a6:	2200      	movs	r2, #0
   156a8:	4601      	mov	r1, r0
   156aa:	9806      	ldr	r0, [sp, #24]
   156ac:	f7ff fc75 	bl	14f9a <ble_att_svr_read_flat>
            if (rc != 0) {
   156b0:	4602      	mov	r2, r0
   156b2:	2800      	cmp	r0, #0
   156b4:	d1c6      	bne.n	15644 <ble_att_svr_build_read_type_rsp+0x78>
            if (attr_len > mtu - 4) {
   156b6:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   156ba:	f1a9 0304 	sub.w	r3, r9, #4
   156be:	4299      	cmp	r1, r3
   156c0:	dd01      	ble.n	156c6 <ble_att_svr_build_read_type_rsp+0xfa>
                attr_len = mtu - 4;
   156c2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if (prev_attr_len == 0) {
   156c6:	f1b8 0f00 	cmp.w	r8, #0
   156ca:	d1bf      	bne.n	1564c <ble_att_svr_build_read_type_rsp+0x80>
                prev_attr_len = attr_len;
   156cc:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
   156d0:	e7c0      	b.n	15654 <ble_att_svr_build_read_type_rsp+0x88>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   156d2:	2311      	movs	r3, #17
   156d4:	f88a 3000 	strb.w	r3, [sl]
                *err_handle = entry->ha_handle_id;
   156d8:	8963      	ldrh	r3, [r4, #10]
   156da:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   156dc:	8013      	strh	r3, [r2, #0]
                rc = BLE_HS_ENOMEM;
   156de:	2206      	movs	r2, #6
                goto done;
   156e0:	e7a3      	b.n	1562a <ble_att_svr_build_read_type_rsp+0x5e>
            rc = BLE_HS_ENOENT;
   156e2:	2205      	movs	r2, #5
   156e4:	e7a1      	b.n	1562a <ble_att_svr_build_read_type_rsp+0x5e>
        *att_err = 0;
   156e6:	2200      	movs	r2, #0
   156e8:	f88a 2000 	strb.w	r2, [sl]
        rsp->batp_length = sizeof(*data) + prev_attr_len;
   156ec:	f108 0802 	add.w	r8, r8, #2
   156f0:	9b07      	ldr	r3, [sp, #28]
   156f2:	f883 8000 	strb.w	r8, [r3]
    *out_txom = txom;
   156f6:	9b19      	ldr	r3, [sp, #100]	; 0x64
   156f8:	601e      	str	r6, [r3, #0]
}
   156fa:	4610      	mov	r0, r2
   156fc:	b00f      	add	sp, #60	; 0x3c
   156fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015702 <ble_att_svr_ticks_until_tmo>:
    if (SLIST_EMPTY(&svr->basc_prep_list)) {
   15702:	6803      	ldr	r3, [r0, #0]
   15704:	b12b      	cbz	r3, 15712 <ble_att_svr_ticks_until_tmo+0x10>
    time_diff = svr->basc_prep_timeout_at - now;
   15706:	6840      	ldr	r0, [r0, #4]
    if (time_diff < 0) {
   15708:	1a40      	subs	r0, r0, r1
   1570a:	d400      	bmi.n	1570e <ble_att_svr_ticks_until_tmo+0xc>
}
   1570c:	4770      	bx	lr
        return 0;
   1570e:	2000      	movs	r0, #0
   15710:	4770      	bx	lr
        return BLE_HS_FOREVER;
   15712:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   15716:	e7f9      	b.n	1570c <ble_att_svr_ticks_until_tmo+0xa>

00015718 <ble_att_svr_read_handle>:
{
   15718:	b5f0      	push	{r4, r5, r6, r7, lr}
   1571a:	b083      	sub	sp, #12
   1571c:	4605      	mov	r5, r0
   1571e:	4616      	mov	r6, r2
   15720:	461f      	mov	r7, r3
   15722:	9c08      	ldr	r4, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   15724:	4608      	mov	r0, r1
   15726:	f7ff fedf 	bl	154e8 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   1572a:	b140      	cbz	r0, 1573e <ble_att_svr_read_handle+0x26>
   1572c:	4601      	mov	r1, r0
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   1572e:	9400      	str	r4, [sp, #0]
   15730:	463b      	mov	r3, r7
   15732:	4632      	mov	r2, r6
   15734:	4628      	mov	r0, r5
   15736:	f7ff fa59 	bl	14bec <ble_att_svr_read>
}
   1573a:	b003      	add	sp, #12
   1573c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   1573e:	b11c      	cbz	r4, 15748 <ble_att_svr_read_handle+0x30>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   15740:	2301      	movs	r3, #1
   15742:	7023      	strb	r3, [r4, #0]
        return BLE_HS_ENOENT;
   15744:	2005      	movs	r0, #5
   15746:	e7f8      	b.n	1573a <ble_att_svr_read_handle+0x22>
   15748:	2005      	movs	r0, #5
   1574a:	e7f6      	b.n	1573a <ble_att_svr_read_handle+0x22>

0001574c <ble_att_svr_build_read_mult_rsp>:
{
   1574c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15750:	b084      	sub	sp, #16
   15752:	4607      	mov	r7, r0
   15754:	460c      	mov	r4, r1
   15756:	4691      	mov	r9, r2
   15758:	461d      	mov	r5, r3
    mtu = ble_att_mtu(conn_handle);
   1575a:	f7ff f82a 	bl	147b2 <ble_att_mtu>
   1575e:	4606      	mov	r6, r0
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   15760:	462a      	mov	r2, r5
   15762:	a903      	add	r1, sp, #12
   15764:	4620      	mov	r0, r4
   15766:	f7ff fae1 	bl	14d2c <ble_att_svr_pkt>
    if (rc != 0) {
   1576a:	4680      	mov	r8, r0
   1576c:	b148      	cbz	r0, 15782 <ble_att_svr_build_read_mult_rsp+0x36>
        *err_handle = 0;
   1576e:	2300      	movs	r3, #0
   15770:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   15772:	8013      	strh	r3, [r2, #0]
    *out_txom = txom;
   15774:	9b03      	ldr	r3, [sp, #12]
   15776:	f8c9 3000 	str.w	r3, [r9]
}
   1577a:	4640      	mov	r0, r8
   1577c:	b004      	add	sp, #16
   1577e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_MULT_RSP, 0, txom) == NULL) {
   15782:	9a03      	ldr	r2, [sp, #12]
   15784:	2100      	movs	r1, #0
   15786:	200f      	movs	r0, #15
   15788:	f7ff f8f5 	bl	14976 <ble_att_cmd_prepare>
   1578c:	b320      	cbz	r0, 157d8 <ble_att_svr_build_read_mult_rsp+0x8c>
    while (OS_MBUF_PKTLEN(*rxom) >= 2 && OS_MBUF_PKTLEN(txom) < mtu) {
   1578e:	6823      	ldr	r3, [r4, #0]
   15790:	8a1b      	ldrh	r3, [r3, #16]
   15792:	2b01      	cmp	r3, #1
   15794:	d9ee      	bls.n	15774 <ble_att_svr_build_read_mult_rsp+0x28>
   15796:	9b03      	ldr	r3, [sp, #12]
   15798:	8a1b      	ldrh	r3, [r3, #16]
   1579a:	42b3      	cmp	r3, r6
   1579c:	d2ea      	bcs.n	15774 <ble_att_svr_build_read_mult_rsp+0x28>
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   1579e:	462a      	mov	r2, r5
   157a0:	2102      	movs	r1, #2
   157a2:	4620      	mov	r0, r4
   157a4:	f7ff fa82 	bl	14cac <ble_att_svr_pullup_req_base>
        if (rc != 0) {
   157a8:	b9f0      	cbnz	r0, 157e8 <ble_att_svr_build_read_mult_rsp+0x9c>
        handle = get_le16((*rxom)->om_data);
   157aa:	6823      	ldr	r3, [r4, #0]
   157ac:	6818      	ldr	r0, [r3, #0]
   157ae:	f006 fa3e 	bl	1bc2e <get_le16>
   157b2:	4682      	mov	sl, r0
        os_mbuf_adj(*rxom, 2);
   157b4:	2102      	movs	r1, #2
   157b6:	6820      	ldr	r0, [r4, #0]
   157b8:	f7f4 feb3 	bl	a522 <os_mbuf_adj>
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   157bc:	9500      	str	r5, [sp, #0]
   157be:	9b03      	ldr	r3, [sp, #12]
   157c0:	2200      	movs	r2, #0
   157c2:	4651      	mov	r1, sl
   157c4:	4638      	mov	r0, r7
   157c6:	f7ff ffa7 	bl	15718 <ble_att_svr_read_handle>
        if (rc != 0) {
   157ca:	2800      	cmp	r0, #0
   157cc:	d0df      	beq.n	1578e <ble_att_svr_build_read_mult_rsp+0x42>
            *err_handle = handle;
   157ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   157d0:	f8a2 a000 	strh.w	sl, [r2]
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   157d4:	4680      	mov	r8, r0
            goto done;
   157d6:	e7cd      	b.n	15774 <ble_att_svr_build_read_mult_rsp+0x28>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   157d8:	2311      	movs	r3, #17
   157da:	702b      	strb	r3, [r5, #0]
        *err_handle = 0;
   157dc:	2300      	movs	r3, #0
   157de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   157e0:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   157e2:	f04f 0806 	mov.w	r8, #6
        goto done;
   157e6:	e7c5      	b.n	15774 <ble_att_svr_build_read_mult_rsp+0x28>
            *err_handle = 0;
   157e8:	2200      	movs	r2, #0
   157ea:	990c      	ldr	r1, [sp, #48]	; 0x30
   157ec:	800a      	strh	r2, [r1, #0]
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   157ee:	4680      	mov	r8, r0
            goto done;
   157f0:	e7c0      	b.n	15774 <ble_att_svr_build_read_mult_rsp+0x28>

000157f2 <ble_att_svr_tx_error_rsp>:
{
   157f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   157f4:	4605      	mov	r5, r0
   157f6:	460c      	mov	r4, r1
   157f8:	4617      	mov	r7, r2
   157fa:	461e      	mov	r6, r3
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_ERROR_RSP, sizeof(*rsp), txom);
   157fc:	460a      	mov	r2, r1
   157fe:	2104      	movs	r1, #4
   15800:	2001      	movs	r0, #1
   15802:	f7ff f8b8 	bl	14976 <ble_att_cmd_prepare>
    if (rsp == NULL) {
   15806:	b150      	cbz	r0, 1581e <ble_att_svr_tx_error_rsp+0x2c>
    rsp->baep_req_op = req_op;
   15808:	7007      	strb	r7, [r0, #0]
    rsp->baep_handle = htole16(handle);
   1580a:	f8a0 6001 	strh.w	r6, [r0, #1]
    rsp->baep_error_code = error_code;
   1580e:	f89d 2018 	ldrb.w	r2, [sp, #24]
   15812:	70c2      	strb	r2, [r0, #3]
    return ble_att_tx(conn_handle, txom);
   15814:	4621      	mov	r1, r4
   15816:	4628      	mov	r0, r5
   15818:	f7ff f8d0 	bl	149bc <ble_att_tx>
}
   1581c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   1581e:	2006      	movs	r0, #6
   15820:	e7fc      	b.n	1581c <ble_att_svr_tx_error_rsp+0x2a>

00015822 <ble_att_svr_tx_rsp>:
{
   15822:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15826:	b085      	sub	sp, #20
   15828:	4607      	mov	r7, r0
   1582a:	4614      	mov	r4, r2
   1582c:	4699      	mov	r9, r3
   1582e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    if (hs_status != 0 && err_status == 0) {
   15832:	4688      	mov	r8, r1
   15834:	b109      	cbz	r1, 1583a <ble_att_svr_tx_rsp+0x18>
   15836:	2e00      	cmp	r6, #0
   15838:	d037      	beq.n	158aa <ble_att_svr_tx_rsp+0x88>
        ble_hs_lock();
   1583a:	f7fa f9a5 	bl	fb88 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1583e:	aa03      	add	r2, sp, #12
   15840:	a902      	add	r1, sp, #8
   15842:	4638      	mov	r0, r7
   15844:	f7fe ff8b 	bl	1475e <ble_att_conn_chan_find>
        if (rc != 0) {
   15848:	4605      	mov	r5, r0
   1584a:	b918      	cbnz	r0, 15854 <ble_att_svr_tx_rsp+0x32>
            if (hs_status == 0) {
   1584c:	f1b8 0f00 	cmp.w	r8, #0
   15850:	d013      	beq.n	1587a <ble_att_svr_tx_rsp+0x58>
   15852:	4645      	mov	r5, r8
        ble_hs_unlock();
   15854:	f7fa f99c 	bl	fb90 <ble_hs_unlock>
        if (hs_status != 0) {
   15858:	b345      	cbz	r5, 158ac <ble_att_svr_tx_rsp+0x8a>
            if (om == NULL) {
   1585a:	b314      	cbz	r4, 158a2 <ble_att_svr_tx_rsp+0x80>
                os_mbuf_adj(om, OS_MBUF_PKTLEN(om));
   1585c:	8a21      	ldrh	r1, [r4, #16]
   1585e:	4620      	mov	r0, r4
   15860:	f7f4 fe5f 	bl	a522 <os_mbuf_adj>
            if (om != NULL) {
   15864:	b314      	cbz	r4, 158ac <ble_att_svr_tx_rsp+0x8a>
                ble_att_svr_tx_error_rsp(conn_handle, om, att_op,
   15866:	9600      	str	r6, [sp, #0]
   15868:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1586c:	464a      	mov	r2, r9
   1586e:	4621      	mov	r1, r4
   15870:	4638      	mov	r0, r7
   15872:	f7ff ffbe 	bl	157f2 <ble_att_svr_tx_error_rsp>
                om = NULL;
   15876:	2400      	movs	r4, #0
   15878:	e018      	b.n	158ac <ble_att_svr_tx_rsp+0x8a>
                ble_att_inc_tx_stat(om->om_data[0]);
   1587a:	6823      	ldr	r3, [r4, #0]
   1587c:	7818      	ldrb	r0, [r3, #0]
   1587e:	f7fe ff75 	bl	1476c <ble_att_inc_tx_stat>
                ble_att_truncate_to_mtu(chan, om);
   15882:	4621      	mov	r1, r4
   15884:	9803      	ldr	r0, [sp, #12]
   15886:	f7fe ff87 	bl	14798 <ble_att_truncate_to_mtu>
                hs_status = ble_l2cap_tx(conn, chan, om);
   1588a:	4622      	mov	r2, r4
   1588c:	9903      	ldr	r1, [sp, #12]
   1588e:	9802      	ldr	r0, [sp, #8]
   15890:	f7fc fb21 	bl	11ed6 <ble_l2cap_tx>
                if (hs_status != 0) {
   15894:	4605      	mov	r5, r0
   15896:	b908      	cbnz	r0, 1589c <ble_att_svr_tx_rsp+0x7a>
                om = NULL;
   15898:	2400      	movs	r4, #0
   1589a:	e7db      	b.n	15854 <ble_att_svr_tx_rsp+0x32>
                    err_status = BLE_ATT_ERR_UNLIKELY;
   1589c:	260e      	movs	r6, #14
                om = NULL;
   1589e:	2400      	movs	r4, #0
   158a0:	e7d8      	b.n	15854 <ble_att_svr_tx_rsp+0x32>
                om = ble_hs_mbuf_l2cap_pkt();
   158a2:	f7fb fed7 	bl	11654 <ble_hs_mbuf_l2cap_pkt>
   158a6:	4604      	mov	r4, r0
   158a8:	e7dc      	b.n	15864 <ble_att_svr_tx_rsp+0x42>
   158aa:	460d      	mov	r5, r1
    os_mbuf_free_chain(om);
   158ac:	4620      	mov	r0, r4
   158ae:	f7f4 fd09 	bl	a2c4 <os_mbuf_free_chain>
}
   158b2:	4628      	mov	r0, r5
   158b4:	b005      	add	sp, #20
   158b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000158ba <ble_att_svr_rx_mtu>:
{
   158ba:	b570      	push	{r4, r5, r6, lr}
   158bc:	b086      	sub	sp, #24
   158be:	4604      	mov	r4, r0
   158c0:	460d      	mov	r5, r1
    txom = NULL;
   158c2:	2300      	movs	r3, #0
   158c4:	9303      	str	r3, [sp, #12]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*cmd), &att_err);
   158c6:	f10d 020b 	add.w	r2, sp, #11
   158ca:	2102      	movs	r1, #2
   158cc:	4628      	mov	r0, r5
   158ce:	f7ff f9ed 	bl	14cac <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   158d2:	b180      	cbz	r0, 158f6 <ble_att_svr_rx_mtu+0x3c>
   158d4:	4601      	mov	r1, r0
    mtu = 0;
   158d6:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_MTU_REQ,
   158d8:	f89d 300b 	ldrb.w	r3, [sp, #11]
   158dc:	2200      	movs	r2, #0
   158de:	9201      	str	r2, [sp, #4]
   158e0:	9300      	str	r3, [sp, #0]
   158e2:	2302      	movs	r3, #2
   158e4:	9a03      	ldr	r2, [sp, #12]
   158e6:	4620      	mov	r0, r4
   158e8:	f7ff ff9b 	bl	15822 <ble_att_svr_tx_rsp>
    if (rc == 0) {
   158ec:	4605      	mov	r5, r0
   158ee:	b170      	cbz	r0, 1590e <ble_att_svr_rx_mtu+0x54>
}
   158f0:	4628      	mov	r0, r5
   158f2:	b006      	add	sp, #24
   158f4:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   158f6:	682b      	ldr	r3, [r5, #0]
   158f8:	681b      	ldr	r3, [r3, #0]
    mtu = le16toh(cmd->bamc_mtu);
   158fa:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_mtu_rsp(conn_handle, rxom, &txom, &att_err);
   158fc:	f10d 030b 	add.w	r3, sp, #11
   15900:	aa03      	add	r2, sp, #12
   15902:	4629      	mov	r1, r5
   15904:	4620      	mov	r0, r4
   15906:	f7ff f9dd 	bl	14cc4 <ble_att_svr_build_mtu_rsp>
   1590a:	4601      	mov	r1, r0
   1590c:	e7e4      	b.n	158d8 <ble_att_svr_rx_mtu+0x1e>
        ble_hs_lock();
   1590e:	f7fa f93b 	bl	fb88 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   15912:	aa05      	add	r2, sp, #20
   15914:	a904      	add	r1, sp, #16
   15916:	4620      	mov	r0, r4
   15918:	f7fe ff21 	bl	1475e <ble_att_conn_chan_find>
        if (rc == 0) {
   1591c:	4605      	mov	r5, r0
   1591e:	b148      	cbz	r0, 15934 <ble_att_svr_rx_mtu+0x7a>
        ble_hs_unlock();
   15920:	f7fa f936 	bl	fb90 <ble_hs_unlock>
        if (rc == 0) {
   15924:	2d00      	cmp	r5, #0
   15926:	d1e3      	bne.n	158f0 <ble_att_svr_rx_mtu+0x36>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   15928:	4632      	mov	r2, r6
   1592a:	2104      	movs	r1, #4
   1592c:	4620      	mov	r0, r4
   1592e:	f7f8 f90a 	bl	db46 <ble_gap_mtu_event>
    return rc;
   15932:	e7dd      	b.n	158f0 <ble_att_svr_rx_mtu+0x36>
            ble_att_set_peer_mtu(chan, mtu);
   15934:	4631      	mov	r1, r6
   15936:	9805      	ldr	r0, [sp, #20]
   15938:	f7fe ff19 	bl	1476e <ble_att_set_peer_mtu>
            chan->flags |= BLE_L2CAP_CHAN_F_TXED_MTU;
   1593c:	9805      	ldr	r0, [sp, #20]
   1593e:	7b83      	ldrb	r3, [r0, #14]
   15940:	f043 0301 	orr.w	r3, r3, #1
   15944:	7383      	strb	r3, [r0, #14]
            mtu = ble_att_chan_mtu(chan);
   15946:	f7fe ff17 	bl	14778 <ble_att_chan_mtu>
   1594a:	4606      	mov	r6, r0
   1594c:	e7e8      	b.n	15920 <ble_att_svr_rx_mtu+0x66>

0001594e <ble_att_svr_rx_find_info>:
{
   1594e:	b570      	push	{r4, r5, r6, lr}
   15950:	b084      	sub	sp, #16
   15952:	4606      	mov	r6, r0
   15954:	460d      	mov	r5, r1
    txom = NULL;
   15956:	2300      	movs	r3, #0
   15958:	9303      	str	r3, [sp, #12]
    att_err = 0;
   1595a:	aa04      	add	r2, sp, #16
   1595c:	f802 3d05 	strb.w	r3, [r2, #-5]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   15960:	2104      	movs	r1, #4
   15962:	4628      	mov	r0, r5
   15964:	f7ff f9a2 	bl	14cac <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15968:	b9c8      	cbnz	r0, 1599e <ble_att_svr_rx_find_info+0x50>
    req = (struct ble_att_find_info_req *)(*rxom)->om_data;
   1596a:	682b      	ldr	r3, [r5, #0]
   1596c:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bafq_start_handle);
   1596e:	881c      	ldrh	r4, [r3, #0]
    end_handle = le16toh(req->bafq_end_handle);
   15970:	885a      	ldrh	r2, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   15972:	4294      	cmp	r4, r2
   15974:	d800      	bhi.n	15978 <ble_att_svr_rx_find_info+0x2a>
   15976:	b924      	cbnz	r4, 15982 <ble_att_svr_rx_find_info+0x34>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   15978:	2301      	movs	r3, #1
   1597a:	f88d 300b 	strb.w	r3, [sp, #11]
        rc = BLE_HS_EBADDATA;
   1597e:	210a      	movs	r1, #10
        goto done;
   15980:	e00f      	b.n	159a2 <ble_att_svr_rx_find_info+0x54>
    rc = ble_att_svr_build_find_info_rsp(conn_handle,
   15982:	f10d 030b 	add.w	r3, sp, #11
   15986:	9301      	str	r3, [sp, #4]
   15988:	ab03      	add	r3, sp, #12
   1598a:	9300      	str	r3, [sp, #0]
   1598c:	462b      	mov	r3, r5
   1598e:	4621      	mov	r1, r4
   15990:	4630      	mov	r0, r6
   15992:	f7ff fa67 	bl	14e64 <ble_att_svr_build_find_info_rsp>
    if (rc != 0) {
   15996:	4601      	mov	r1, r0
   15998:	b918      	cbnz	r0, 159a2 <ble_att_svr_rx_find_info+0x54>
    err_handle = 0;
   1599a:	2400      	movs	r4, #0
   1599c:	e001      	b.n	159a2 <ble_att_svr_rx_find_info+0x54>
   1599e:	4601      	mov	r1, r0
        err_handle = 0;
   159a0:	2400      	movs	r4, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_FIND_INFO_REQ,
   159a2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   159a6:	9401      	str	r4, [sp, #4]
   159a8:	9300      	str	r3, [sp, #0]
   159aa:	2304      	movs	r3, #4
   159ac:	9a03      	ldr	r2, [sp, #12]
   159ae:	4630      	mov	r0, r6
   159b0:	f7ff ff37 	bl	15822 <ble_att_svr_tx_rsp>
}
   159b4:	b004      	add	sp, #16
   159b6:	bd70      	pop	{r4, r5, r6, pc}

000159b8 <ble_att_svr_rx_find_type_value>:
{
   159b8:	b570      	push	{r4, r5, r6, lr}
   159ba:	b088      	sub	sp, #32
   159bc:	4606      	mov	r6, r0
   159be:	460d      	mov	r5, r1
    txom = NULL;
   159c0:	2300      	movs	r3, #0
   159c2:	9306      	str	r3, [sp, #24]
    att_err = 0;
   159c4:	aa08      	add	r2, sp, #32
   159c6:	f802 3d09 	strb.w	r3, [r2, #-9]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   159ca:	2106      	movs	r1, #6
   159cc:	4628      	mov	r0, r5
   159ce:	f7ff f96d 	bl	14cac <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   159d2:	bb00      	cbnz	r0, 15a16 <ble_att_svr_rx_find_type_value+0x5e>
    req = (struct ble_att_find_type_value_req *)(*rxom)->om_data;
   159d4:	682b      	ldr	r3, [r5, #0]
   159d6:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bavq_start_handle);
   159d8:	881c      	ldrh	r4, [r3, #0]
    end_handle = le16toh(req->bavq_end_handle);
   159da:	885a      	ldrh	r2, [r3, #2]
    attr_type = (ble_uuid16_t) BLE_UUID16_INIT(le16toh(req->bavq_attr_type));
   159dc:	889b      	ldrh	r3, [r3, #4]
   159de:	2110      	movs	r1, #16
   159e0:	f88d 101c 	strb.w	r1, [sp, #28]
   159e4:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (start_handle > end_handle || start_handle == 0) {
   159e8:	4294      	cmp	r4, r2
   159ea:	d800      	bhi.n	159ee <ble_att_svr_rx_find_type_value+0x36>
   159ec:	b924      	cbnz	r4, 159f8 <ble_att_svr_rx_find_type_value+0x40>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   159ee:	2301      	movs	r3, #1
   159f0:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = BLE_HS_EBADDATA;
   159f4:	210a      	movs	r1, #10
        goto done;
   159f6:	e010      	b.n	15a1a <ble_att_svr_rx_find_type_value+0x62>
    rc = ble_att_svr_build_find_type_value_rsp(conn_handle, start_handle,
   159f8:	f10d 0317 	add.w	r3, sp, #23
   159fc:	9302      	str	r3, [sp, #8]
   159fe:	ab06      	add	r3, sp, #24
   15a00:	9301      	str	r3, [sp, #4]
   15a02:	9500      	str	r5, [sp, #0]
   15a04:	9b07      	ldr	r3, [sp, #28]
   15a06:	4621      	mov	r1, r4
   15a08:	4630      	mov	r0, r6
   15a0a:	f7ff fb97 	bl	1513c <ble_att_svr_build_find_type_value_rsp>
    if (rc != 0) {
   15a0e:	4601      	mov	r1, r0
   15a10:	b918      	cbnz	r0, 15a1a <ble_att_svr_rx_find_type_value+0x62>
    err_handle = 0;
   15a12:	2400      	movs	r4, #0
   15a14:	e001      	b.n	15a1a <ble_att_svr_rx_find_type_value+0x62>
   15a16:	4601      	mov	r1, r0
   15a18:	2400      	movs	r4, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   15a1a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   15a1e:	9401      	str	r4, [sp, #4]
   15a20:	9300      	str	r3, [sp, #0]
   15a22:	2306      	movs	r3, #6
   15a24:	9a06      	ldr	r2, [sp, #24]
   15a26:	4630      	mov	r0, r6
   15a28:	f7ff fefb 	bl	15822 <ble_att_svr_tx_rsp>
}
   15a2c:	b008      	add	sp, #32
   15a2e:	bd70      	pop	{r4, r5, r6, pc}

00015a30 <ble_att_svr_rx_read_type>:
{
   15a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15a34:	b08c      	sub	sp, #48	; 0x30
   15a36:	4606      	mov	r6, r0
   15a38:	460d      	mov	r5, r1
    txom = NULL;
   15a3a:	2300      	movs	r3, #0
   15a3c:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   15a3e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    att_err = 0;
   15a42:	f88d 3013 	strb.w	r3, [sp, #19]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   15a46:	680b      	ldr	r3, [r1, #0]
   15a48:	8a1c      	ldrh	r4, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   15a4a:	2c06      	cmp	r4, #6
   15a4c:	d010      	beq.n	15a70 <ble_att_svr_rx_read_type+0x40>
   15a4e:	2c14      	cmp	r4, #20
   15a50:	d00e      	beq.n	15a70 <ble_att_svr_rx_read_type+0x40>
        rc = BLE_HS_EBADDATA;
   15a52:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_TYPE_REQ,
   15a54:	f89d 3013 	ldrb.w	r3, [sp, #19]
   15a58:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   15a5c:	9201      	str	r2, [sp, #4]
   15a5e:	9300      	str	r3, [sp, #0]
   15a60:	2308      	movs	r3, #8
   15a62:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15a64:	4630      	mov	r0, r6
   15a66:	f7ff fedc 	bl	15822 <ble_att_svr_tx_rsp>
}
   15a6a:	b00c      	add	sp, #48	; 0x30
   15a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   15a70:	f10d 0213 	add.w	r2, sp, #19
   15a74:	4621      	mov	r1, r4
   15a76:	4628      	mov	r0, r5
   15a78:	f7ff f918 	bl	14cac <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15a7c:	4601      	mov	r1, r0
   15a7e:	2800      	cmp	r0, #0
   15a80:	d1e8      	bne.n	15a54 <ble_att_svr_rx_read_type+0x24>
    req = (struct ble_att_read_type_req *)(*rxom)->om_data;
   15a82:	6829      	ldr	r1, [r5, #0]
   15a84:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->batq_start_handle);
   15a86:	881a      	ldrh	r2, [r3, #0]
   15a88:	b297      	uxth	r7, r2
    end_handle = le16toh(req->batq_end_handle);
   15a8a:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   15a8e:	4547      	cmp	r7, r8
   15a90:	d800      	bhi.n	15a94 <ble_att_svr_rx_read_type+0x64>
   15a92:	b937      	cbnz	r7, 15aa2 <ble_att_svr_rx_read_type+0x72>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   15a94:	2301      	movs	r3, #1
   15a96:	f88d 3013 	strb.w	r3, [sp, #19]
        err_handle = start_handle;
   15a9a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        rc = BLE_HS_EBADDATA;
   15a9e:	210a      	movs	r1, #10
        goto done;
   15aa0:	e7d8      	b.n	15a54 <ble_att_svr_rx_read_type+0x24>
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req),
   15aa2:	1f23      	subs	r3, r4, #4
   15aa4:	2204      	movs	r2, #4
   15aa6:	a805      	add	r0, sp, #20
   15aa8:	f7fe fd96 	bl	145d8 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   15aac:	b118      	cbz	r0, 15ab6 <ble_att_svr_rx_read_type+0x86>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   15aae:	2104      	movs	r1, #4
   15ab0:	f88d 1013 	strb.w	r1, [sp, #19]
        goto done;
   15ab4:	e7ce      	b.n	15a54 <ble_att_svr_rx_read_type+0x24>
    rc = ble_att_svr_build_read_type_rsp(conn_handle, start_handle, end_handle,
   15ab6:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   15aba:	9303      	str	r3, [sp, #12]
   15abc:	f10d 0313 	add.w	r3, sp, #19
   15ac0:	9302      	str	r3, [sp, #8]
   15ac2:	ab0b      	add	r3, sp, #44	; 0x2c
   15ac4:	9301      	str	r3, [sp, #4]
   15ac6:	9500      	str	r5, [sp, #0]
   15ac8:	ab05      	add	r3, sp, #20
   15aca:	4642      	mov	r2, r8
   15acc:	4639      	mov	r1, r7
   15ace:	4630      	mov	r0, r6
   15ad0:	f7ff fd7c 	bl	155cc <ble_att_svr_build_read_type_rsp>
   15ad4:	4601      	mov	r1, r0
   15ad6:	e7bd      	b.n	15a54 <ble_att_svr_rx_read_type+0x24>

00015ad8 <ble_att_svr_rx_read>:
{
   15ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15adc:	b084      	sub	sp, #16
   15ade:	4607      	mov	r7, r0
   15ae0:	460e      	mov	r6, r1
    att_err = 0;
   15ae2:	aa04      	add	r2, sp, #16
   15ae4:	2300      	movs	r3, #0
   15ae6:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   15aea:	2102      	movs	r1, #2
   15aec:	4630      	mov	r0, r6
   15aee:	f7ff f8dd 	bl	14cac <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15af2:	b170      	cbz	r0, 15b12 <ble_att_svr_rx_read+0x3a>
   15af4:	4601      	mov	r1, r0
    err_handle = 0;
   15af6:	2500      	movs	r5, #0
    txom = NULL;
   15af8:	462c      	mov	r4, r5
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_REQ,
   15afa:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15afe:	9501      	str	r5, [sp, #4]
   15b00:	9300      	str	r3, [sp, #0]
   15b02:	230a      	movs	r3, #10
   15b04:	4622      	mov	r2, r4
   15b06:	4638      	mov	r0, r7
   15b08:	f7ff fe8b 	bl	15822 <ble_att_svr_tx_rsp>
}
   15b0c:	b004      	add	sp, #16
   15b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_read_req *)(*rxom)->om_data;
   15b12:	6834      	ldr	r4, [r6, #0]
   15b14:	6823      	ldr	r3, [r4, #0]
    err_handle = le16toh(req->barq_handle);
   15b16:	881d      	ldrh	r5, [r3, #0]
    *rxom = NULL;
   15b18:	f04f 0800 	mov.w	r8, #0
   15b1c:	f8c6 8000 	str.w	r8, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   15b20:	8a21      	ldrh	r1, [r4, #16]
   15b22:	4620      	mov	r0, r4
   15b24:	f7f4 fcfd 	bl	a522 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_RSP, 0, txom) == NULL) {
   15b28:	4622      	mov	r2, r4
   15b2a:	4641      	mov	r1, r8
   15b2c:	200b      	movs	r0, #11
   15b2e:	f7fe ff22 	bl	14976 <ble_att_cmd_prepare>
   15b32:	b150      	cbz	r0, 15b4a <ble_att_svr_rx_read+0x72>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, 0, txom, &att_err);
   15b34:	f10d 030f 	add.w	r3, sp, #15
   15b38:	9300      	str	r3, [sp, #0]
   15b3a:	4623      	mov	r3, r4
   15b3c:	2200      	movs	r2, #0
   15b3e:	4629      	mov	r1, r5
   15b40:	4638      	mov	r0, r7
   15b42:	f7ff fde9 	bl	15718 <ble_att_svr_read_handle>
   15b46:	4601      	mov	r1, r0
done:
   15b48:	e7d7      	b.n	15afa <ble_att_svr_rx_read+0x22>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   15b4a:	2311      	movs	r3, #17
   15b4c:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   15b50:	2106      	movs	r1, #6
        goto done;
   15b52:	e7d2      	b.n	15afa <ble_att_svr_rx_read+0x22>

00015b54 <ble_att_svr_rx_read_blob>:
{
   15b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15b58:	b085      	sub	sp, #20
   15b5a:	4607      	mov	r7, r0
   15b5c:	460e      	mov	r6, r1
    att_err = 0;
   15b5e:	aa04      	add	r2, sp, #16
   15b60:	2300      	movs	r3, #0
   15b62:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   15b66:	2104      	movs	r1, #4
   15b68:	4630      	mov	r0, r6
   15b6a:	f7ff f89f 	bl	14cac <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15b6e:	b170      	cbz	r0, 15b8e <ble_att_svr_rx_read_blob+0x3a>
   15b70:	4601      	mov	r1, r0
    err_handle = 0;
   15b72:	2500      	movs	r5, #0
    txom = NULL;
   15b74:	462c      	mov	r4, r5
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_BLOB_REQ,
   15b76:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15b7a:	9501      	str	r5, [sp, #4]
   15b7c:	9300      	str	r3, [sp, #0]
   15b7e:	230c      	movs	r3, #12
   15b80:	4622      	mov	r2, r4
   15b82:	4638      	mov	r0, r7
   15b84:	f7ff fe4d 	bl	15822 <ble_att_svr_tx_rsp>
}
   15b88:	b005      	add	sp, #20
   15b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_read_blob_req *)(*rxom)->om_data;
   15b8e:	6834      	ldr	r4, [r6, #0]
   15b90:	6823      	ldr	r3, [r4, #0]
    err_handle = le16toh(req->babq_handle);
   15b92:	881d      	ldrh	r5, [r3, #0]
    offset = le16toh(req->babq_offset);
   15b94:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    *rxom = NULL;
   15b98:	f04f 0800 	mov.w	r8, #0
   15b9c:	f8c6 8000 	str.w	r8, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   15ba0:	8a21      	ldrh	r1, [r4, #16]
   15ba2:	4620      	mov	r0, r4
   15ba4:	f7f4 fcbd 	bl	a522 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_BLOB_RSP, 0, txom) == NULL) {
   15ba8:	4622      	mov	r2, r4
   15baa:	4641      	mov	r1, r8
   15bac:	200d      	movs	r0, #13
   15bae:	f7fe fee2 	bl	14976 <ble_att_cmd_prepare>
   15bb2:	b150      	cbz	r0, 15bca <ble_att_svr_rx_read_blob+0x76>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, offset,
   15bb4:	f10d 030f 	add.w	r3, sp, #15
   15bb8:	9300      	str	r3, [sp, #0]
   15bba:	4623      	mov	r3, r4
   15bbc:	464a      	mov	r2, r9
   15bbe:	4629      	mov	r1, r5
   15bc0:	4638      	mov	r0, r7
   15bc2:	f7ff fda9 	bl	15718 <ble_att_svr_read_handle>
   15bc6:	4601      	mov	r1, r0
   15bc8:	e7d5      	b.n	15b76 <ble_att_svr_rx_read_blob+0x22>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   15bca:	2311      	movs	r3, #17
   15bcc:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   15bd0:	2106      	movs	r1, #6
        goto done;
   15bd2:	e7d0      	b.n	15b76 <ble_att_svr_rx_read_blob+0x22>

00015bd4 <ble_att_svr_rx_read_mult>:
{
   15bd4:	b510      	push	{r4, lr}
   15bd6:	b084      	sub	sp, #16
   15bd8:	4604      	mov	r4, r0
    txom = NULL;
   15bda:	2200      	movs	r2, #0
   15bdc:	9203      	str	r2, [sp, #12]
    err_handle = 0;
   15bde:	f8ad 200a 	strh.w	r2, [sp, #10]
    att_err = 0;
   15be2:	ab04      	add	r3, sp, #16
   15be4:	f803 2d07 	strb.w	r2, [r3, #-7]!
    rc = ble_att_svr_build_read_mult_rsp(conn_handle, rxom, &txom, &att_err,
   15be8:	f10d 020a 	add.w	r2, sp, #10
   15bec:	9200      	str	r2, [sp, #0]
   15bee:	aa03      	add	r2, sp, #12
   15bf0:	f7ff fdac 	bl	1574c <ble_att_svr_build_read_mult_rsp>
    return ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_MULT_REQ,
   15bf4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   15bf8:	9301      	str	r3, [sp, #4]
   15bfa:	f89d 3009 	ldrb.w	r3, [sp, #9]
   15bfe:	9300      	str	r3, [sp, #0]
   15c00:	230e      	movs	r3, #14
   15c02:	9a03      	ldr	r2, [sp, #12]
   15c04:	4601      	mov	r1, r0
   15c06:	4620      	mov	r0, r4
   15c08:	f7ff fe0b 	bl	15822 <ble_att_svr_tx_rsp>
}
   15c0c:	b004      	add	sp, #16
   15c0e:	bd10      	pop	{r4, pc}

00015c10 <ble_att_svr_rx_read_group_type>:
{
   15c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15c14:	b08c      	sub	sp, #48	; 0x30
   15c16:	4605      	mov	r5, r0
   15c18:	460c      	mov	r4, r1
    txom = NULL;
   15c1a:	2300      	movs	r3, #0
   15c1c:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   15c1e:	f8ad 3016 	strh.w	r3, [sp, #22]
    att_err = 0;
   15c22:	f88d 3015 	strb.w	r3, [sp, #21]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   15c26:	680b      	ldr	r3, [r1, #0]
   15c28:	8a19      	ldrh	r1, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   15c2a:	2906      	cmp	r1, #6
   15c2c:	d010      	beq.n	15c50 <ble_att_svr_rx_read_group_type+0x40>
   15c2e:	2914      	cmp	r1, #20
   15c30:	d00e      	beq.n	15c50 <ble_att_svr_rx_read_group_type+0x40>
        rc = BLE_HS_EBADDATA;
   15c32:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   15c34:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15c38:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   15c3c:	9201      	str	r2, [sp, #4]
   15c3e:	9300      	str	r3, [sp, #0]
   15c40:	2310      	movs	r3, #16
   15c42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15c44:	4628      	mov	r0, r5
   15c46:	f7ff fdec 	bl	15822 <ble_att_svr_tx_rsp>
}
   15c4a:	b00c      	add	sp, #48	; 0x30
   15c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   15c50:	f10d 0215 	add.w	r2, sp, #21
   15c54:	4620      	mov	r0, r4
   15c56:	f7ff f829 	bl	14cac <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15c5a:	4601      	mov	r1, r0
   15c5c:	2800      	cmp	r0, #0
   15c5e:	d1e9      	bne.n	15c34 <ble_att_svr_rx_read_group_type+0x24>
    req = (struct ble_att_read_group_type_req *)(*rxom)->om_data;
   15c60:	6821      	ldr	r1, [r4, #0]
   15c62:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->bagq_start_handle);
   15c64:	881e      	ldrh	r6, [r3, #0]
   15c66:	b2b7      	uxth	r7, r6
    end_handle = le16toh(req->bagq_end_handle);
   15c68:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   15c6c:	4547      	cmp	r7, r8
   15c6e:	d800      	bhi.n	15c72 <ble_att_svr_rx_read_group_type+0x62>
   15c70:	b937      	cbnz	r7, 15c80 <ble_att_svr_rx_read_group_type+0x70>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   15c72:	2301      	movs	r3, #1
   15c74:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   15c78:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   15c7c:	210a      	movs	r1, #10
        goto done;
   15c7e:	e7d9      	b.n	15c34 <ble_att_svr_rx_read_group_type+0x24>
    om_uuid_len = OS_MBUF_PKTHDR(*rxom)->omp_len - sizeof(*req);
   15c80:	8a0b      	ldrh	r3, [r1, #16]
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req), om_uuid_len);
   15c82:	3b04      	subs	r3, #4
   15c84:	2204      	movs	r2, #4
   15c86:	a806      	add	r0, sp, #24
   15c88:	f7fe fca6 	bl	145d8 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   15c8c:	b130      	cbz	r0, 15c9c <ble_att_svr_rx_read_group_type+0x8c>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   15c8e:	2304      	movs	r3, #4
   15c90:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   15c94:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   15c98:	210a      	movs	r1, #10
        goto done;
   15c9a:	e7cb      	b.n	15c34 <ble_att_svr_rx_read_group_type+0x24>
    if (!ble_att_svr_is_valid_read_group_type(&uuid.u)) {
   15c9c:	a806      	add	r0, sp, #24
   15c9e:	f7ff f971 	bl	14f84 <ble_att_svr_is_valid_read_group_type>
   15ca2:	b928      	cbnz	r0, 15cb0 <ble_att_svr_rx_read_group_type+0xa0>
        att_err = BLE_ATT_ERR_UNSUPPORTED_GROUP;
   15ca4:	2110      	movs	r1, #16
   15ca6:	f88d 1015 	strb.w	r1, [sp, #21]
        err_handle = start_handle;
   15caa:	f8ad 6016 	strh.w	r6, [sp, #22]
        goto done;
   15cae:	e7c1      	b.n	15c34 <ble_att_svr_rx_read_group_type+0x24>
    rc = ble_att_svr_build_read_group_type_rsp(conn_handle, start_handle,
   15cb0:	f10d 0316 	add.w	r3, sp, #22
   15cb4:	9303      	str	r3, [sp, #12]
   15cb6:	f10d 0315 	add.w	r3, sp, #21
   15cba:	9302      	str	r3, [sp, #8]
   15cbc:	ab0b      	add	r3, sp, #44	; 0x2c
   15cbe:	9301      	str	r3, [sp, #4]
   15cc0:	9400      	str	r4, [sp, #0]
   15cc2:	ab06      	add	r3, sp, #24
   15cc4:	4642      	mov	r2, r8
   15cc6:	4639      	mov	r1, r7
   15cc8:	4628      	mov	r0, r5
   15cca:	f7ff fa85 	bl	151d8 <ble_att_svr_build_read_group_type_rsp>
   15cce:	4601      	mov	r1, r0
   15cd0:	e7b0      	b.n	15c34 <ble_att_svr_rx_read_group_type+0x24>

00015cd2 <ble_att_svr_rx_write>:
{
   15cd2:	b570      	push	{r4, r5, r6, lr}
   15cd4:	b084      	sub	sp, #16
   15cd6:	4605      	mov	r5, r0
   15cd8:	460c      	mov	r4, r1
    txom = NULL;
   15cda:	2300      	movs	r3, #0
   15cdc:	9303      	str	r3, [sp, #12]
    att_err = 0;
   15cde:	aa04      	add	r2, sp, #16
   15ce0:	f802 3d05 	strb.w	r3, [r2, #-5]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   15ce4:	2102      	movs	r1, #2
   15ce6:	4620      	mov	r0, r4
   15ce8:	f7fe ffe0 	bl	14cac <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15cec:	b160      	cbz	r0, 15d08 <ble_att_svr_rx_write+0x36>
   15cee:	4601      	mov	r1, r0
    handle = 0;
   15cf0:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_WRITE_REQ,
   15cf2:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15cf6:	9601      	str	r6, [sp, #4]
   15cf8:	9300      	str	r3, [sp, #0]
   15cfa:	2312      	movs	r3, #18
   15cfc:	9a03      	ldr	r2, [sp, #12]
   15cfe:	4628      	mov	r0, r5
   15d00:	f7ff fd8f 	bl	15822 <ble_att_svr_tx_rsp>
}
   15d04:	b004      	add	sp, #16
   15d06:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   15d08:	6823      	ldr	r3, [r4, #0]
   15d0a:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->bawq_handle);
   15d0c:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_write_rsp(rxom, &txom, &att_err);
   15d0e:	f10d 020b 	add.w	r2, sp, #11
   15d12:	a903      	add	r1, sp, #12
   15d14:	4620      	mov	r0, r4
   15d16:	f7ff f81b 	bl	14d50 <ble_att_svr_build_write_rsp>
    if (rc != 0) {
   15d1a:	4601      	mov	r1, r0
   15d1c:	2800      	cmp	r0, #0
   15d1e:	d1e8      	bne.n	15cf2 <ble_att_svr_rx_write+0x20>
    os_mbuf_adj(*rxom, sizeof(*req));
   15d20:	2102      	movs	r1, #2
   15d22:	6820      	ldr	r0, [r4, #0]
   15d24:	f7f4 fbfd 	bl	a522 <os_mbuf_adj>
    rc = ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   15d28:	f10d 030b 	add.w	r3, sp, #11
   15d2c:	9300      	str	r3, [sp, #0]
   15d2e:	4623      	mov	r3, r4
   15d30:	2200      	movs	r2, #0
   15d32:	4631      	mov	r1, r6
   15d34:	4628      	mov	r0, r5
   15d36:	f7ff fbe3 	bl	15500 <ble_att_svr_write_handle>
   15d3a:	4601      	mov	r1, r0
   15d3c:	e7d9      	b.n	15cf2 <ble_att_svr_rx_write+0x20>

00015d3e <ble_att_svr_rx_write_no_rsp>:
{
   15d3e:	b570      	push	{r4, r5, r6, lr}
   15d40:	b084      	sub	sp, #16
   15d42:	4605      	mov	r5, r0
   15d44:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   15d46:	f10d 020f 	add.w	r2, sp, #15
   15d4a:	2102      	movs	r1, #2
   15d4c:	4620      	mov	r0, r4
   15d4e:	f7fe ffad 	bl	14cac <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15d52:	4603      	mov	r3, r0
   15d54:	b110      	cbz	r0, 15d5c <ble_att_svr_rx_write_no_rsp+0x1e>
}
   15d56:	4618      	mov	r0, r3
   15d58:	b004      	add	sp, #16
   15d5a:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   15d5c:	6820      	ldr	r0, [r4, #0]
   15d5e:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->bawq_handle);
   15d60:	881e      	ldrh	r6, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*req));
   15d62:	2102      	movs	r1, #2
   15d64:	f7f4 fbdd 	bl	a522 <os_mbuf_adj>
    return ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   15d68:	f10d 030f 	add.w	r3, sp, #15
   15d6c:	9300      	str	r3, [sp, #0]
   15d6e:	4623      	mov	r3, r4
   15d70:	2200      	movs	r2, #0
   15d72:	4631      	mov	r1, r6
   15d74:	4628      	mov	r0, r5
   15d76:	f7ff fbc3 	bl	15500 <ble_att_svr_write_handle>
   15d7a:	4603      	mov	r3, r0
   15d7c:	e7eb      	b.n	15d56 <ble_att_svr_rx_write_no_rsp+0x18>

00015d7e <ble_att_svr_prep_clear>:
{
   15d7e:	b510      	push	{r4, lr}
   15d80:	4604      	mov	r4, r0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   15d82:	e003      	b.n	15d8c <ble_att_svr_prep_clear+0xe>
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   15d84:	6803      	ldr	r3, [r0, #0]
   15d86:	6023      	str	r3, [r4, #0]
        ble_att_svr_prep_free(entry);
   15d88:	f7ff fae8 	bl	1535c <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   15d8c:	6820      	ldr	r0, [r4, #0]
   15d8e:	2800      	cmp	r0, #0
   15d90:	d1f8      	bne.n	15d84 <ble_att_svr_prep_clear+0x6>
}
   15d92:	bd10      	pop	{r4, pc}

00015d94 <ble_att_svr_rx_prep_write>:
{
   15d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15d98:	b084      	sub	sp, #16
   15d9a:	4607      	mov	r7, r0
   15d9c:	460d      	mov	r5, r1
    att_err = 0;
   15d9e:	aa04      	add	r2, sp, #16
   15da0:	2300      	movs	r3, #0
   15da2:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   15da6:	2104      	movs	r1, #4
   15da8:	4628      	mov	r0, r5
   15daa:	f7fe ff7f 	bl	14cac <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15dae:	b178      	cbz	r0, 15dd0 <ble_att_svr_rx_prep_write+0x3c>
   15db0:	4606      	mov	r6, r0
    err_handle = 0;
   15db2:	2400      	movs	r4, #0
    txom = NULL;
   15db4:	46a0      	mov	r8, r4
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_PREP_WRITE_REQ,
   15db6:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15dba:	9401      	str	r4, [sp, #4]
   15dbc:	9300      	str	r3, [sp, #0]
   15dbe:	2316      	movs	r3, #22
   15dc0:	4642      	mov	r2, r8
   15dc2:	4631      	mov	r1, r6
   15dc4:	4638      	mov	r0, r7
   15dc6:	f7ff fd2c 	bl	15822 <ble_att_svr_tx_rsp>
}
   15dca:	b004      	add	sp, #16
   15dcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   15dd0:	682b      	ldr	r3, [r5, #0]
   15dd2:	f8d3 8000 	ldr.w	r8, [r3]
    err_handle = le16toh(req->bapc_handle);
   15dd6:	f8b8 4000 	ldrh.w	r4, [r8]
    attr_entry = ble_att_svr_find_by_handle(le16toh(req->bapc_handle));
   15dda:	4620      	mov	r0, r4
   15ddc:	f7ff fb84 	bl	154e8 <ble_att_svr_find_by_handle>
    if (attr_entry == NULL) {
   15de0:	4602      	mov	r2, r0
   15de2:	b150      	cbz	r0, 15dfa <ble_att_svr_rx_prep_write+0x66>
    rc = ble_att_svr_check_perms(conn_handle, 0, attr_entry, &att_err);
   15de4:	f10d 030f 	add.w	r3, sp, #15
   15de8:	2100      	movs	r1, #0
   15dea:	4638      	mov	r0, r7
   15dec:	f7fe fe73 	bl	14ad6 <ble_att_svr_check_perms>
    if (rc != 0) {
   15df0:	4606      	mov	r6, r0
   15df2:	b148      	cbz	r0, 15e08 <ble_att_svr_rx_prep_write+0x74>
    txom = NULL;
   15df4:	f04f 0800 	mov.w	r8, #0
   15df8:	e7dd      	b.n	15db6 <ble_att_svr_rx_prep_write+0x22>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   15dfa:	2301      	movs	r3, #1
   15dfc:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOENT;
   15e00:	2605      	movs	r6, #5
    txom = NULL;
   15e02:	f04f 0800 	mov.w	r8, #0
        goto done;
   15e06:	e7d6      	b.n	15db6 <ble_att_svr_rx_prep_write+0x22>
    ble_hs_lock();
   15e08:	f7f9 febe 	bl	fb88 <ble_hs_lock>
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   15e0c:	f8b8 1000 	ldrh.w	r1, [r8]
                                       le16toh(req->bapc_offset), *rxom,
   15e10:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   15e14:	f10d 030f 	add.w	r3, sp, #15
   15e18:	9300      	str	r3, [sp, #0]
   15e1a:	682b      	ldr	r3, [r5, #0]
   15e1c:	4638      	mov	r0, r7
   15e1e:	f7ff fac9 	bl	153b4 <ble_att_svr_insert_prep_entry>
   15e22:	4606      	mov	r6, r0
    ble_hs_unlock();
   15e24:	f7f9 feb4 	bl	fb90 <ble_hs_unlock>
    txom = *rxom;
   15e28:	f8d5 8000 	ldr.w	r8, [r5]
    *rxom = NULL;
   15e2c:	2300      	movs	r3, #0
   15e2e:	602b      	str	r3, [r5, #0]
    if (rc != 0) {
   15e30:	2e00      	cmp	r6, #0
   15e32:	d1c0      	bne.n	15db6 <ble_att_svr_rx_prep_write+0x22>
    os_mbuf_prepend(txom, 1);
   15e34:	2101      	movs	r1, #1
   15e36:	4640      	mov	r0, r8
   15e38:	f7f4 fc02 	bl	a640 <os_mbuf_prepend>
    txom->om_data[0] = BLE_ATT_OP_PREP_WRITE_RSP;
   15e3c:	f8d8 3000 	ldr.w	r3, [r8]
   15e40:	2217      	movs	r2, #23
   15e42:	701a      	strb	r2, [r3, #0]
   15e44:	e7b7      	b.n	15db6 <ble_att_svr_rx_prep_write+0x22>

00015e46 <ble_att_svr_rx_exec_write>:
{
   15e46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15e4a:	b085      	sub	sp, #20
   15e4c:	4607      	mov	r7, r0
   15e4e:	460e      	mov	r6, r1
    err_handle = 0;
   15e50:	2300      	movs	r3, #0
   15e52:	f8ad 300a 	strh.w	r3, [sp, #10]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   15e56:	f10d 0209 	add.w	r2, sp, #9
   15e5a:	2101      	movs	r1, #1
   15e5c:	4630      	mov	r0, r6
   15e5e:	f7fe ff25 	bl	14cac <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15e62:	4605      	mov	r5, r0
   15e64:	b190      	cbz	r0, 15e8c <ble_att_svr_rx_exec_write+0x46>
        flags = 0;
   15e66:	f04f 0800 	mov.w	r8, #0
    txom = NULL;
   15e6a:	4644      	mov	r4, r8
    if (rc == 0) {
   15e6c:	b335      	cbz	r5, 15ebc <ble_att_svr_rx_exec_write+0x76>
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_EXEC_WRITE_REQ,
   15e6e:	f89d 3009 	ldrb.w	r3, [sp, #9]
   15e72:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   15e76:	9201      	str	r2, [sp, #4]
   15e78:	9300      	str	r3, [sp, #0]
   15e7a:	2318      	movs	r3, #24
   15e7c:	4622      	mov	r2, r4
   15e7e:	4629      	mov	r1, r5
   15e80:	4638      	mov	r0, r7
   15e82:	f7ff fcce 	bl	15822 <ble_att_svr_tx_rsp>
}
   15e86:	b005      	add	sp, #20
   15e88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_exec_write_req *)(*rxom)->om_data;
   15e8c:	6834      	ldr	r4, [r6, #0]
   15e8e:	6823      	ldr	r3, [r4, #0]
    flags = req->baeq_flags;
   15e90:	f893 8000 	ldrb.w	r8, [r3]
    *rxom = NULL;
   15e94:	f04f 0900 	mov.w	r9, #0
   15e98:	f8c6 9000 	str.w	r9, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   15e9c:	8a21      	ldrh	r1, [r4, #16]
   15e9e:	4620      	mov	r0, r4
   15ea0:	f7f4 fb3f 	bl	a522 <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_EXEC_WRITE_RSP, 0, txom) == NULL) {
   15ea4:	4622      	mov	r2, r4
   15ea6:	4649      	mov	r1, r9
   15ea8:	2019      	movs	r0, #25
   15eaa:	f7fe fd64 	bl	14976 <ble_att_cmd_prepare>
   15eae:	2800      	cmp	r0, #0
   15eb0:	d1dc      	bne.n	15e6c <ble_att_svr_rx_exec_write+0x26>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   15eb2:	2311      	movs	r3, #17
   15eb4:	f88d 3009 	strb.w	r3, [sp, #9]
        rc = BLE_HS_ENOMEM;
   15eb8:	2506      	movs	r5, #6
        goto done;
   15eba:	e7d7      	b.n	15e6c <ble_att_svr_rx_exec_write+0x26>
        ble_hs_lock();
   15ebc:	f7f9 fe64 	bl	fb88 <ble_hs_lock>
        conn = ble_hs_conn_find_assert(conn_handle);
   15ec0:	4638      	mov	r0, r7
   15ec2:	f7fa fc83 	bl	107cc <ble_hs_conn_find_assert>
        prep_list = conn->bhc_att_svr.basc_prep_list;
   15ec6:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15ec8:	9303      	str	r3, [sp, #12]
        SLIST_INIT(&conn->bhc_att_svr.basc_prep_list);
   15eca:	2300      	movs	r3, #0
   15ecc:	6443      	str	r3, [r0, #68]	; 0x44
        ble_hs_unlock();
   15ece:	f7f9 fe5f 	bl	fb90 <ble_hs_unlock>
        if (flags) {
   15ed2:	f1b8 0f00 	cmp.w	r8, #0
   15ed6:	d103      	bne.n	15ee0 <ble_att_svr_rx_exec_write+0x9a>
        ble_att_svr_prep_clear(&prep_list);
   15ed8:	a803      	add	r0, sp, #12
   15eda:	f7ff ff50 	bl	15d7e <ble_att_svr_prep_clear>
   15ede:	e7c6      	b.n	15e6e <ble_att_svr_rx_exec_write+0x28>
            att_err = ble_att_svr_prep_write(conn_handle, &prep_list,
   15ee0:	f10d 020a 	add.w	r2, sp, #10
   15ee4:	a903      	add	r1, sp, #12
   15ee6:	4638      	mov	r0, r7
   15ee8:	f7ff fb24 	bl	15534 <ble_att_svr_prep_write>
   15eec:	b2c0      	uxtb	r0, r0
   15eee:	f88d 0009 	strb.w	r0, [sp, #9]
            if (att_err != 0) {
   15ef2:	2800      	cmp	r0, #0
   15ef4:	d0f0      	beq.n	15ed8 <ble_att_svr_rx_exec_write+0x92>
                rc = BLE_HS_EAPP;
   15ef6:	2509      	movs	r5, #9
   15ef8:	e7ee      	b.n	15ed8 <ble_att_svr_rx_exec_write+0x92>

00015efa <ble_att_svr_rx_notify>:
{
   15efa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15efc:	4607      	mov	r7, r0
   15efe:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   15f00:	2200      	movs	r2, #0
   15f02:	2102      	movs	r1, #2
   15f04:	4620      	mov	r0, r4
   15f06:	f7fe fed1 	bl	14cac <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15f0a:	b988      	cbnz	r0, 15f30 <ble_att_svr_rx_notify+0x36>
   15f0c:	4605      	mov	r5, r0
    req = (struct ble_att_notify_req *)(*rxom)->om_data;
   15f0e:	6820      	ldr	r0, [r4, #0]
   15f10:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->banq_handle);
   15f12:	881e      	ldrh	r6, [r3, #0]
    if (handle == 0) {
   15f14:	b176      	cbz	r6, 15f34 <ble_att_svr_rx_notify+0x3a>
    os_mbuf_adj(*rxom, sizeof(*req));
   15f16:	2102      	movs	r1, #2
   15f18:	f7f4 fb03 	bl	a522 <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 0);
   15f1c:	2300      	movs	r3, #0
   15f1e:	6822      	ldr	r2, [r4, #0]
   15f20:	4631      	mov	r1, r6
   15f22:	4638      	mov	r0, r7
   15f24:	f7f7 fd91 	bl	da4a <ble_gap_notify_rx_event>
    *rxom = NULL;
   15f28:	2300      	movs	r3, #0
   15f2a:	6023      	str	r3, [r4, #0]
}
   15f2c:	4628      	mov	r0, r5
   15f2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   15f30:	2506      	movs	r5, #6
   15f32:	e7fb      	b.n	15f2c <ble_att_svr_rx_notify+0x32>
        return BLE_HS_EBADDATA;
   15f34:	250a      	movs	r5, #10
   15f36:	e7f9      	b.n	15f2c <ble_att_svr_rx_notify+0x32>

00015f38 <ble_att_svr_rx_indicate>:
{
   15f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f3a:	b085      	sub	sp, #20
   15f3c:	4607      	mov	r7, r0
   15f3e:	460c      	mov	r4, r1
    txom = NULL;
   15f40:	2200      	movs	r2, #0
   15f42:	9203      	str	r2, [sp, #12]
    att_err = 0;
   15f44:	f88d 200b 	strb.w	r2, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   15f48:	2102      	movs	r1, #2
   15f4a:	4620      	mov	r0, r4
   15f4c:	f7fe feae 	bl	14cac <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15f50:	b9d0      	cbnz	r0, 15f88 <ble_att_svr_rx_indicate+0x50>
    req = (struct ble_att_indicate_req *)(*rxom)->om_data;
   15f52:	6823      	ldr	r3, [r4, #0]
   15f54:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->baiq_handle);
   15f56:	881d      	ldrh	r5, [r3, #0]
    if (handle == 0) {
   15f58:	b90d      	cbnz	r5, 15f5e <ble_att_svr_rx_indicate+0x26>
        rc = BLE_HS_EBADDATA;
   15f5a:	260a      	movs	r6, #10
   15f5c:	e016      	b.n	15f8c <ble_att_svr_rx_indicate+0x54>
    rc = ble_att_svr_build_indicate_rsp(rxom, &txom, &att_err);
   15f5e:	f10d 020b 	add.w	r2, sp, #11
   15f62:	a903      	add	r1, sp, #12
   15f64:	4620      	mov	r0, r4
   15f66:	f7fe ff0c 	bl	14d82 <ble_att_svr_build_indicate_rsp>
    if (rc != 0) {
   15f6a:	4606      	mov	r6, r0
   15f6c:	b970      	cbnz	r0, 15f8c <ble_att_svr_rx_indicate+0x54>
    os_mbuf_adj(*rxom, sizeof(*req));
   15f6e:	2102      	movs	r1, #2
   15f70:	6820      	ldr	r0, [r4, #0]
   15f72:	f7f4 fad6 	bl	a522 <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 1);
   15f76:	2301      	movs	r3, #1
   15f78:	6822      	ldr	r2, [r4, #0]
   15f7a:	4629      	mov	r1, r5
   15f7c:	4638      	mov	r0, r7
   15f7e:	f7f7 fd64 	bl	da4a <ble_gap_notify_rx_event>
    *rxom = NULL;
   15f82:	2300      	movs	r3, #0
   15f84:	6023      	str	r3, [r4, #0]
   15f86:	e001      	b.n	15f8c <ble_att_svr_rx_indicate+0x54>
   15f88:	4606      	mov	r6, r0
    handle = 0;
   15f8a:	2500      	movs	r5, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_INDICATE_REQ,
   15f8c:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15f90:	9501      	str	r5, [sp, #4]
   15f92:	9300      	str	r3, [sp, #0]
   15f94:	231d      	movs	r3, #29
   15f96:	9a03      	ldr	r2, [sp, #12]
   15f98:	4631      	mov	r1, r6
   15f9a:	4638      	mov	r0, r7
   15f9c:	f7ff fc41 	bl	15822 <ble_att_svr_tx_rsp>
}
   15fa0:	b005      	add	sp, #20
   15fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015fa4 <ble_att_svr_start>:

int
ble_att_svr_start(void)
{
   15fa4:	b510      	push	{r4, lr}
   15fa6:	b082      	sub	sp, #8
    int rc;

    ble_att_svr_free_start_mem();
   15fa8:	f7ff fa66 	bl	15478 <ble_att_svr_free_start_mem>

    if (ble_hs_max_attrs > 0) {
   15fac:	4b0f      	ldr	r3, [pc, #60]	; (15fec <ble_att_svr_start+0x48>)
   15fae:	881c      	ldrh	r4, [r3, #0]
   15fb0:	b91c      	cbnz	r4, 15fba <ble_att_svr_start+0x16>
            rc = BLE_HS_EOS;
            goto err;
        }
    }

    return 0;
   15fb2:	2400      	movs	r4, #0

err:
    ble_att_svr_free_start_mem();
    return rc;
}
   15fb4:	4620      	mov	r0, r4
   15fb6:	b002      	add	sp, #8
   15fb8:	bd10      	pop	{r4, pc}
        ble_att_svr_entry_mem = malloc(
   15fba:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15fbe:	0098      	lsls	r0, r3, #2
   15fc0:	f006 f810 	bl	1bfe4 <malloc>
   15fc4:	4b0a      	ldr	r3, [pc, #40]	; (15ff0 <ble_att_svr_start+0x4c>)
   15fc6:	6018      	str	r0, [r3, #0]
        if (ble_att_svr_entry_mem == NULL) {
   15fc8:	b160      	cbz	r0, 15fe4 <ble_att_svr_start+0x40>
        rc = os_mempool_init(&ble_att_svr_entry_pool, ble_hs_max_attrs,
   15fca:	4b0a      	ldr	r3, [pc, #40]	; (15ff4 <ble_att_svr_start+0x50>)
   15fcc:	9300      	str	r3, [sp, #0]
   15fce:	4603      	mov	r3, r0
   15fd0:	2214      	movs	r2, #20
   15fd2:	4621      	mov	r1, r4
   15fd4:	4808      	ldr	r0, [pc, #32]	; (15ff8 <ble_att_svr_start+0x54>)
   15fd6:	f7f4 fd7f 	bl	aad8 <os_mempool_init>
        if (rc != 0) {
   15fda:	b128      	cbz	r0, 15fe8 <ble_att_svr_start+0x44>
            rc = BLE_HS_EOS;
   15fdc:	240b      	movs	r4, #11
    ble_att_svr_free_start_mem();
   15fde:	f7ff fa4b 	bl	15478 <ble_att_svr_free_start_mem>
    return rc;
   15fe2:	e7e7      	b.n	15fb4 <ble_att_svr_start+0x10>
            rc = BLE_HS_ENOMEM;
   15fe4:	2406      	movs	r4, #6
   15fe6:	e7fa      	b.n	15fde <ble_att_svr_start+0x3a>
    return 0;
   15fe8:	2400      	movs	r4, #0
   15fea:	e7e3      	b.n	15fb4 <ble_att_svr_start+0x10>
   15fec:	2000732c 	.word	0x2000732c
   15ff0:	200077a8 	.word	0x200077a8
   15ff4:	0002913c 	.word	0x0002913c
   15ff8:	200077ac 	.word	0x200077ac

00015ffc <ble_att_svr_init>:

int
ble_att_svr_init(void)
{
   15ffc:	b500      	push	{lr}
   15ffe:	b083      	sub	sp, #12
    int rc;

    if (MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES) > 0) {
        rc = os_mempool_init(&ble_att_svr_prep_entry_pool,
   16000:	4b0a      	ldr	r3, [pc, #40]	; (1602c <ble_att_svr_init+0x30>)
   16002:	9300      	str	r3, [sp, #0]
   16004:	4b0a      	ldr	r3, [pc, #40]	; (16030 <ble_att_svr_init+0x34>)
   16006:	220c      	movs	r2, #12
   16008:	2140      	movs	r1, #64	; 0x40
   1600a:	480a      	ldr	r0, [pc, #40]	; (16034 <ble_att_svr_init+0x38>)
   1600c:	f7f4 fd64 	bl	aad8 <os_mempool_init>
                             MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES),
                             sizeof (struct ble_att_prep_entry),
                             ble_att_svr_prep_entry_mem,
                             "ble_att_svr_prep_entry_pool");
        if (rc != 0) {
   16010:	b950      	cbnz	r0, 16028 <ble_att_svr_init+0x2c>
            return BLE_HS_EOS;
        }
    }

    STAILQ_INIT(&ble_att_svr_list);
   16012:	4b09      	ldr	r3, [pc, #36]	; (16038 <ble_att_svr_init+0x3c>)
   16014:	6018      	str	r0, [r3, #0]
   16016:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&ble_att_svr_hidden_list);
   16018:	4b08      	ldr	r3, [pc, #32]	; (1603c <ble_att_svr_init+0x40>)
   1601a:	6018      	str	r0, [r3, #0]
   1601c:	605b      	str	r3, [r3, #4]

    ble_att_svr_id = 0;
   1601e:	4b08      	ldr	r3, [pc, #32]	; (16040 <ble_att_svr_init+0x44>)
   16020:	8018      	strh	r0, [r3, #0]

    return 0;
}
   16022:	b003      	add	sp, #12
   16024:	f85d fb04 	ldr.w	pc, [sp], #4
            return BLE_HS_EOS;
   16028:	200b      	movs	r0, #11
   1602a:	e7fa      	b.n	16022 <ble_att_svr_init+0x26>
   1602c:	00029120 	.word	0x00029120
   16030:	200077dc 	.word	0x200077dc
   16034:	20007adc 	.word	0x20007adc
   16038:	200077d4 	.word	0x200077d4
   1603c:	200077c8 	.word	0x200077c8
   16040:	200077d0 	.word	0x200077d0

00016044 <ble_sm_alg_xor_128>:
static void
ble_sm_alg_xor_128(const uint8_t *p, const uint8_t *q, uint8_t *r)
{
    int i;

    for (i = 0; i < 16; i++) {
   16044:	2300      	movs	r3, #0
   16046:	2b0f      	cmp	r3, #15
   16048:	dc09      	bgt.n	1605e <ble_sm_alg_xor_128+0x1a>
{
   1604a:	b430      	push	{r4, r5}
        r[i] = p[i] ^ q[i];
   1604c:	5cc4      	ldrb	r4, [r0, r3]
   1604e:	5ccd      	ldrb	r5, [r1, r3]
   16050:	406c      	eors	r4, r5
   16052:	54d4      	strb	r4, [r2, r3]
    for (i = 0; i < 16; i++) {
   16054:	3301      	adds	r3, #1
   16056:	2b0f      	cmp	r3, #15
   16058:	ddf8      	ble.n	1604c <ble_sm_alg_xor_128+0x8>
    }
}
   1605a:	bc30      	pop	{r4, r5}
   1605c:	4770      	bx	lr
   1605e:	4770      	bx	lr

00016060 <ble_sm_alg_encrypt>:

static int
ble_sm_alg_encrypt(const uint8_t *key, const uint8_t *plaintext,
                   uint8_t *enc_data)
{
   16060:	b530      	push	{r4, r5, lr}
   16062:	b0b1      	sub	sp, #196	; 0xc4
   16064:	460d      	mov	r5, r1
   16066:	4614      	mov	r4, r2
    struct tc_aes_key_sched_struct s;
    uint8_t tmp[16];

    swap_buf(tmp, key, 16);
   16068:	2210      	movs	r2, #16
   1606a:	4601      	mov	r1, r0
   1606c:	4668      	mov	r0, sp
   1606e:	f005 fe3a 	bl	1bce6 <swap_buf>

    if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   16072:	4669      	mov	r1, sp
   16074:	a804      	add	r0, sp, #16
   16076:	f002 fbd9 	bl	1882c <tc_aes128_set_encrypt_key>
   1607a:	b180      	cbz	r0, 1609e <ble_sm_alg_encrypt+0x3e>
        return BLE_HS_EUNKNOWN;
    }

    swap_buf(tmp, plaintext, 16);
   1607c:	2210      	movs	r2, #16
   1607e:	4629      	mov	r1, r5
   16080:	4668      	mov	r0, sp
   16082:	f005 fe30 	bl	1bce6 <swap_buf>

    if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   16086:	aa04      	add	r2, sp, #16
   16088:	4669      	mov	r1, sp
   1608a:	4620      	mov	r0, r4
   1608c:	f002 fc2c 	bl	188e8 <tc_aes_encrypt>
   16090:	b140      	cbz	r0, 160a4 <ble_sm_alg_encrypt+0x44>
        return BLE_HS_EUNKNOWN;
    }

    swap_in_place(enc_data, 16);
   16092:	2110      	movs	r1, #16
   16094:	4620      	mov	r0, r4
   16096:	f005 fe15 	bl	1bcc4 <swap_in_place>

    return 0;
   1609a:	2000      	movs	r0, #0
   1609c:	e000      	b.n	160a0 <ble_sm_alg_encrypt+0x40>
        return BLE_HS_EUNKNOWN;
   1609e:	2011      	movs	r0, #17
}
   160a0:	b031      	add	sp, #196	; 0xc4
   160a2:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EUNKNOWN;
   160a4:	2011      	movs	r0, #17
   160a6:	e7fb      	b.n	160a0 <ble_sm_alg_encrypt+0x40>

000160a8 <ble_sm_alg_s1>:

int
ble_sm_alg_s1(const uint8_t *k, const uint8_t *r1, const uint8_t *r2,
              uint8_t *out)
{
   160a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   160ac:	4680      	mov	r8, r0
   160ae:	460e      	mov	r6, r1
   160b0:	4615      	mov	r5, r2
   160b2:	461c      	mov	r4, r3
     * r1' is concatenated with r2' to generate r' which is used as
     * the 128-bit input parameter plaintextData to security function e:
     *
     *    r' = r1' || r2'
     */
    memcpy(out, r2, 8);
   160b4:	6812      	ldr	r2, [r2, #0]
   160b6:	686b      	ldr	r3, [r5, #4]
   160b8:	6022      	str	r2, [r4, #0]
   160ba:	6063      	str	r3, [r4, #4]
    memcpy(out + 8, r1, 8);
   160bc:	680a      	ldr	r2, [r1, #0]
   160be:	684b      	ldr	r3, [r1, #4]
   160c0:	60a2      	str	r2, [r4, #8]
   160c2:	60e3      	str	r3, [r4, #12]

    /* s1(k, r1 , r2) = e(k, r') */
    rc = ble_sm_alg_encrypt(k, out, out);
   160c4:	4622      	mov	r2, r4
   160c6:	4621      	mov	r1, r4
   160c8:	f7ff ffca 	bl	16060 <ble_sm_alg_encrypt>
    if (rc != 0) {
   160cc:	4607      	mov	r7, r0
   160ce:	b110      	cbz	r0, 160d6 <ble_sm_alg_s1+0x2e>
    BLE_HS_LOG(DEBUG, "\n    out=");
    ble_hs_log_flat_buf(out, 16);
    BLE_HS_LOG(DEBUG, "\n");

    return 0;
}
   160d0:	4638      	mov	r0, r7
   160d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_log_flat_buf(k, 16);
   160d6:	2110      	movs	r1, #16
   160d8:	4640      	mov	r0, r8
   160da:	f7fb fa9b 	bl	11614 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(r1, 16);
   160de:	2110      	movs	r1, #16
   160e0:	4630      	mov	r0, r6
   160e2:	f7fb fa97 	bl	11614 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(r2, 16);
   160e6:	2110      	movs	r1, #16
   160e8:	4628      	mov	r0, r5
   160ea:	f7fb fa93 	bl	11614 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(out, 16);
   160ee:	2110      	movs	r1, #16
   160f0:	4620      	mov	r0, r4
   160f2:	f7fb fa8f 	bl	11614 <ble_hs_log_flat_buf>
    return 0;
   160f6:	e7eb      	b.n	160d0 <ble_sm_alg_s1+0x28>

000160f8 <ble_sm_alg_c1>:
ble_sm_alg_c1(const uint8_t *k, const uint8_t *r,
              const uint8_t *preq, const uint8_t *pres,
              uint8_t iat, uint8_t rat,
              const uint8_t *ia, const uint8_t *ra,
              uint8_t *out_enc_data)
{
   160f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   160fc:	b089      	sub	sp, #36	; 0x24
   160fe:	4681      	mov	r9, r0
   16100:	4688      	mov	r8, r1
   16102:	4615      	mov	r5, r2
   16104:	461c      	mov	r4, r3
   16106:	9e12      	ldr	r6, [sp, #72]	; 0x48
   16108:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    uint8_t p1[16], p2[16];
    int rc;

    BLE_HS_LOG(DEBUG, "ble_sm_alg_c1()\n    k=");
    ble_hs_log_flat_buf(k, 16);
   1610a:	2110      	movs	r1, #16
   1610c:	f7fb fa82 	bl	11614 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    r=");
    ble_hs_log_flat_buf(r, 16);
   16110:	2110      	movs	r1, #16
   16112:	4640      	mov	r0, r8
   16114:	f7fb fa7e 	bl	11614 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    iat=%d rat=%d", iat, rat);
    BLE_HS_LOG(DEBUG, "\n    ia=");
    ble_hs_log_flat_buf(ia, 6);
   16118:	2106      	movs	r1, #6
   1611a:	4630      	mov	r0, r6
   1611c:	f7fb fa7a 	bl	11614 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    ra=");
    ble_hs_log_flat_buf(ra, 6);
   16120:	2106      	movs	r1, #6
   16122:	4638      	mov	r0, r7
   16124:	f7fb fa76 	bl	11614 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    preq=");
    ble_hs_log_flat_buf(preq, 7);
   16128:	2107      	movs	r1, #7
   1612a:	4628      	mov	r0, r5
   1612c:	f7fb fa72 	bl	11614 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    pres=");
    ble_hs_log_flat_buf(pres, 7);
   16130:	2107      	movs	r1, #7
   16132:	4620      	mov	r0, r4
   16134:	f7fb fa6e 	bl	11614 <ble_hs_log_flat_buf>

    /* pres, preq, rat and iat are concatenated to generate p1 */
    p1[0] = iat;
   16138:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   1613c:	f88d 3010 	strb.w	r3, [sp, #16]
    p1[1] = rat;
   16140:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   16144:	f88d 3011 	strb.w	r3, [sp, #17]
    memcpy(p1 + 2, preq, 7);
   16148:	682b      	ldr	r3, [r5, #0]
   1614a:	f8cd 3012 	str.w	r3, [sp, #18]
   1614e:	88aa      	ldrh	r2, [r5, #4]
   16150:	79ab      	ldrb	r3, [r5, #6]
   16152:	f8ad 2016 	strh.w	r2, [sp, #22]
   16156:	f88d 3018 	strb.w	r3, [sp, #24]
    memcpy(p1 + 9, pres, 7);
   1615a:	6823      	ldr	r3, [r4, #0]
   1615c:	f8cd 3019 	str.w	r3, [sp, #25]
   16160:	88a2      	ldrh	r2, [r4, #4]
   16162:	79a3      	ldrb	r3, [r4, #6]
   16164:	f8ad 201d 	strh.w	r2, [sp, #29]
   16168:	f88d 301f 	strb.w	r3, [sp, #31]

    BLE_HS_LOG(DEBUG, "\n    p1=");
    ble_hs_log_flat_buf(p1, sizeof p1);
   1616c:	2110      	movs	r1, #16
   1616e:	eb0d 0001 	add.w	r0, sp, r1
   16172:	f7fb fa4f 	bl	11614 <ble_hs_log_flat_buf>

    /* c1 = e(k, e(k, r XOR p1) XOR p2) */

    /* Using out_enc_data as temporary output buffer */
    ble_sm_alg_xor_128(r, p1, out_enc_data);
   16176:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16178:	a904      	add	r1, sp, #16
   1617a:	4640      	mov	r0, r8
   1617c:	f7ff ff62 	bl	16044 <ble_sm_alg_xor_128>

    rc = ble_sm_alg_encrypt(k, out_enc_data, out_enc_data);
   16180:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16182:	4611      	mov	r1, r2
   16184:	4648      	mov	r0, r9
   16186:	f7ff ff6b 	bl	16060 <ble_sm_alg_encrypt>
    if (rc != 0) {
   1618a:	bb08      	cbnz	r0, 161d0 <ble_sm_alg_c1+0xd8>
        rc = BLE_HS_EUNKNOWN;
        goto done;
    }

    /* ra is concatenated with ia and padding to generate p2 */
    memcpy(p2, ra, 6);
   1618c:	6838      	ldr	r0, [r7, #0]
   1618e:	9000      	str	r0, [sp, #0]
   16190:	88bb      	ldrh	r3, [r7, #4]
   16192:	f8ad 3004 	strh.w	r3, [sp, #4]
    memcpy(p2 + 6, ia, 6);
   16196:	6833      	ldr	r3, [r6, #0]
   16198:	f8cd 3006 	str.w	r3, [sp, #6]
   1619c:	88b3      	ldrh	r3, [r6, #4]
   1619e:	f8ad 300a 	strh.w	r3, [sp, #10]
    memset(p2 + 12, 0, 4);
   161a2:	2300      	movs	r3, #0
   161a4:	9303      	str	r3, [sp, #12]

    BLE_HS_LOG(DEBUG, "\n    p2=");
    ble_hs_log_flat_buf(p2, sizeof p2);
   161a6:	2110      	movs	r1, #16
   161a8:	4668      	mov	r0, sp
   161aa:	f7fb fa33 	bl	11614 <ble_hs_log_flat_buf>

    ble_sm_alg_xor_128(out_enc_data, p2, out_enc_data);
   161ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
   161b0:	4669      	mov	r1, sp
   161b2:	4610      	mov	r0, r2
   161b4:	f7ff ff46 	bl	16044 <ble_sm_alg_xor_128>

    rc = ble_sm_alg_encrypt(k, out_enc_data, out_enc_data);
   161b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   161ba:	4611      	mov	r1, r2
   161bc:	4648      	mov	r0, r9
   161be:	f7ff ff4f 	bl	16060 <ble_sm_alg_encrypt>
    if (rc != 0) {
   161c2:	4604      	mov	r4, r0
   161c4:	b948      	cbnz	r0, 161da <ble_sm_alg_c1+0xe2>
        rc = BLE_HS_EUNKNOWN;
        goto done;
    }

    BLE_HS_LOG(DEBUG, "\n    out_enc_data=");
    ble_hs_log_flat_buf(out_enc_data, 16);
   161c6:	2110      	movs	r1, #16
   161c8:	9814      	ldr	r0, [sp, #80]	; 0x50
   161ca:	f7fb fa23 	bl	11614 <ble_hs_log_flat_buf>
   161ce:	e000      	b.n	161d2 <ble_sm_alg_c1+0xda>
        rc = BLE_HS_EUNKNOWN;
   161d0:	2411      	movs	r4, #17
    rc = 0;

done:
    BLE_HS_LOG(DEBUG, "\n    rc=%d\n", rc);
    return rc;
}
   161d2:	4620      	mov	r0, r4
   161d4:	b009      	add	sp, #36	; 0x24
   161d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = BLE_HS_EUNKNOWN;
   161da:	2411      	movs	r4, #17
    return rc;
   161dc:	e7f9      	b.n	161d2 <ble_sm_alg_c1+0xda>
	...

000161e0 <ble_svc_dis_access>:
    (MYNEWT_VAL(BLE_SVC_DIS_MANUFACTURER_NAME_READ_PERM) >= 0) || \
    (MYNEWT_VAL(BLE_SVC_DIS_SYSTEM_ID_READ_PERM) >= 0)
static int
ble_svc_dis_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   161e0:	b538      	push	{r3, r4, r5, lr}
   161e2:	4615      	mov	r5, r2
    uint16_t uuid    = ble_uuid_u16(ctxt->chr->uuid);
   161e4:	6893      	ldr	r3, [r2, #8]
   161e6:	6818      	ldr	r0, [r3, #0]
   161e8:	f7fe f9d0 	bl	1458c <ble_uuid_u16>
    const char *info = NULL;

    switch(uuid) {
   161ec:	f642 2324 	movw	r3, #10788	; 0x2a24
   161f0:	4298      	cmp	r0, r3
   161f2:	d008      	beq.n	16206 <ble_svc_dis_access+0x26>
   161f4:	f642 2326 	movw	r3, #10790	; 0x2a26
   161f8:	4298      	cmp	r0, r3
   161fa:	d114      	bne.n	16226 <ble_svc_dis_access+0x46>
#endif
        break;
#endif
#if (MYNEWT_VAL(BLE_SVC_DIS_FIRMWARE_REVISION_READ_PERM) >= 0)
    case BLE_SVC_DIS_CHR_UUID16_FIRMWARE_REVISION:
        info = ble_svc_dis_data.firmware_revision;
   161fc:	4b10      	ldr	r3, [pc, #64]	; (16240 <ble_svc_dis_access+0x60>)
   161fe:	689c      	ldr	r4, [r3, #8]
#ifdef MYNEWT_VAL_BLE_SVC_DIS_FIRMWARE_REVISION_DEFAULT
        if (info == NULL) {
   16200:	b91c      	cbnz	r4, 1620a <ble_svc_dis_access+0x2a>
    if (info != NULL) {
       int rc = os_mbuf_append(ctxt->om, info, strlen(info));
       return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    }

    return 0;
   16202:	2300      	movs	r3, #0
   16204:	e01a      	b.n	1623c <ble_svc_dis_access+0x5c>
        info = ble_svc_dis_data.model_number;
   16206:	4b0e      	ldr	r3, [pc, #56]	; (16240 <ble_svc_dis_access+0x60>)
   16208:	681c      	ldr	r4, [r3, #0]
    if (info != NULL) {
   1620a:	b1b4      	cbz	r4, 1623a <ble_svc_dis_access+0x5a>
       int rc = os_mbuf_append(ctxt->om, info, strlen(info));
   1620c:	686d      	ldr	r5, [r5, #4]
   1620e:	4620      	mov	r0, r4
   16210:	f7f5 fb9c 	bl	b94c <strlen>
   16214:	b282      	uxth	r2, r0
   16216:	4621      	mov	r1, r4
   16218:	4628      	mov	r0, r5
   1621a:	f7f4 f865 	bl	a2e8 <os_mbuf_append>
       return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1621e:	4603      	mov	r3, r0
   16220:	b160      	cbz	r0, 1623c <ble_svc_dis_access+0x5c>
   16222:	2311      	movs	r3, #17
   16224:	e00a      	b.n	1623c <ble_svc_dis_access+0x5c>
        assert(0);
   16226:	f7f1 ffcb 	bl	81c0 <hal_debugger_connected>
   1622a:	b100      	cbz	r0, 1622e <ble_svc_dis_access+0x4e>
   1622c:	be01      	bkpt	0x0001
   1622e:	2300      	movs	r3, #0
   16230:	461a      	mov	r2, r3
   16232:	4619      	mov	r1, r3
   16234:	4618      	mov	r0, r3
   16236:	f7f3 fbcb 	bl	99d0 <__assert_func>
    return 0;
   1623a:	2300      	movs	r3, #0
}
   1623c:	4618      	mov	r0, r3
   1623e:	bd38      	pop	{r3, r4, r5, pc}
   16240:	200001f8 	.word	0x200001f8

00016244 <ble_svc_dis_firmware_revision_set>:
}

int
ble_svc_dis_firmware_revision_set(const char *value)
{
    ble_svc_dis_data.firmware_revision = value;
   16244:	4b01      	ldr	r3, [pc, #4]	; (1624c <ble_svc_dis_firmware_revision_set+0x8>)
   16246:	6098      	str	r0, [r3, #8]
    return 0;
}
   16248:	2000      	movs	r0, #0
   1624a:	4770      	bx	lr
   1624c:	200001f8 	.word	0x200001f8

00016250 <ble_svc_dis_init>:
/**
 * Initialize the DIS package.
 */
void
ble_svc_dis_init(void)
{
   16250:	b510      	push	{r4, lr}
   16252:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16254:	4b18      	ldr	r3, [pc, #96]	; (162b8 <ble_svc_dis_init+0x68>)
   16256:	781b      	ldrb	r3, [r3, #0]
   16258:	b14b      	cbz	r3, 1626e <ble_svc_dis_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_dis_defs);
   1625a:	4818      	ldr	r0, [pc, #96]	; (162bc <ble_svc_dis_init+0x6c>)
   1625c:	f7f9 fbc8 	bl	f9f0 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16260:	b978      	cbnz	r0, 16282 <ble_svc_dis_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_dis_defs);
   16262:	4816      	ldr	r0, [pc, #88]	; (162bc <ble_svc_dis_init+0x6c>)
   16264:	f7f9 fba0 	bl	f9a8 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16268:	b9c0      	cbnz	r0, 1629c <ble_svc_dis_init+0x4c>
}
   1626a:	b002      	add	sp, #8
   1626c:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1626e:	f7f1 ffa7 	bl	81c0 <hal_debugger_connected>
   16272:	b100      	cbz	r0, 16276 <ble_svc_dis_init+0x26>
   16274:	be01      	bkpt	0x0001
   16276:	2300      	movs	r3, #0
   16278:	461a      	mov	r2, r3
   1627a:	4619      	mov	r1, r3
   1627c:	4618      	mov	r0, r3
   1627e:	f7f3 fba7 	bl	99d0 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16282:	f7f1 ff9d 	bl	81c0 <hal_debugger_connected>
   16286:	b100      	cbz	r0, 1628a <ble_svc_dis_init+0x3a>
   16288:	be01      	bkpt	0x0001
   1628a:	2000      	movs	r0, #0
   1628c:	9000      	str	r0, [sp, #0]
   1628e:	4b0c      	ldr	r3, [pc, #48]	; (162c0 <ble_svc_dis_init+0x70>)
   16290:	681c      	ldr	r4, [r3, #0]
   16292:	4603      	mov	r3, r0
   16294:	4602      	mov	r2, r0
   16296:	4601      	mov	r1, r0
   16298:	47a0      	blx	r4
   1629a:	e7e2      	b.n	16262 <ble_svc_dis_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1629c:	f7f1 ff90 	bl	81c0 <hal_debugger_connected>
   162a0:	b100      	cbz	r0, 162a4 <ble_svc_dis_init+0x54>
   162a2:	be01      	bkpt	0x0001
   162a4:	2000      	movs	r0, #0
   162a6:	9000      	str	r0, [sp, #0]
   162a8:	4b05      	ldr	r3, [pc, #20]	; (162c0 <ble_svc_dis_init+0x70>)
   162aa:	681c      	ldr	r4, [r3, #0]
   162ac:	4603      	mov	r3, r0
   162ae:	4602      	mov	r2, r0
   162b0:	4601      	mov	r1, r0
   162b2:	47a0      	blx	r4
}
   162b4:	e7d9      	b.n	1626a <ble_svc_dis_init+0x1a>
   162b6:	bf00      	nop
   162b8:	20000506 	.word	0x20000506
   162bc:	00029154 	.word	0x00029154
   162c0:	200000ec 	.word	0x200000ec

000162c4 <ble_svc_gap_device_name_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_device_name_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   162c4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_DEVICE_NAME_WRITE_PERM) < 0
    assert(0);
   162c6:	f7f1 ff7b 	bl	81c0 <hal_debugger_connected>
   162ca:	b100      	cbz	r0, 162ce <ble_svc_gap_device_name_write_access+0xa>
   162cc:	be01      	bkpt	0x0001
   162ce:	2300      	movs	r3, #0
   162d0:	461a      	mov	r2, r3
   162d2:	4619      	mov	r1, r3
   162d4:	4618      	mov	r0, r3
   162d6:	f7f3 fb7b 	bl	99d0 <__assert_func>

000162da <ble_svc_gap_appearance_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_appearance_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   162da:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_APPEARANCE_WRITE_PERM) < 0
    assert(0);
   162dc:	f7f1 ff70 	bl	81c0 <hal_debugger_connected>
   162e0:	b100      	cbz	r0, 162e4 <ble_svc_gap_appearance_write_access+0xa>
   162e2:	be01      	bkpt	0x0001
   162e4:	2300      	movs	r3, #0
   162e6:	461a      	mov	r2, r3
   162e8:	4619      	mov	r1, r3
   162ea:	4618      	mov	r0, r3
   162ec:	f7f3 fb70 	bl	99d0 <__assert_func>

000162f0 <ble_svc_gap_device_name_read_access>:
{
   162f0:	b538      	push	{r3, r4, r5, lr}
    rc = os_mbuf_append(ctxt->om, ble_svc_gap_name, strlen(ble_svc_gap_name));
   162f2:	6845      	ldr	r5, [r0, #4]
   162f4:	4c07      	ldr	r4, [pc, #28]	; (16314 <ble_svc_gap_device_name_read_access+0x24>)
   162f6:	4620      	mov	r0, r4
   162f8:	f7f5 fb28 	bl	b94c <strlen>
   162fc:	b282      	uxth	r2, r0
   162fe:	4621      	mov	r1, r4
   16300:	4628      	mov	r0, r5
   16302:	f7f3 fff1 	bl	a2e8 <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   16306:	4603      	mov	r3, r0
   16308:	b908      	cbnz	r0, 1630e <ble_svc_gap_device_name_read_access+0x1e>
}
   1630a:	4618      	mov	r0, r3
   1630c:	bd38      	pop	{r3, r4, r5, pc}
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1630e:	2311      	movs	r3, #17
   16310:	e7fb      	b.n	1630a <ble_svc_gap_device_name_read_access+0x1a>
   16312:	bf00      	nop
   16314:	20000268 	.word	0x20000268

00016318 <ble_svc_gap_appearance_read_access>:
{
   16318:	b500      	push	{lr}
   1631a:	b083      	sub	sp, #12
    uint16_t appearance = htole16(ble_svc_gap_appearance);
   1631c:	4b08      	ldr	r3, [pc, #32]	; (16340 <ble_svc_gap_appearance_read_access+0x28>)
   1631e:	881b      	ldrh	r3, [r3, #0]
   16320:	a902      	add	r1, sp, #8
   16322:	f821 3d02 	strh.w	r3, [r1, #-2]!
    rc = os_mbuf_append(ctxt->om, &appearance, sizeof(appearance));
   16326:	2202      	movs	r2, #2
   16328:	6840      	ldr	r0, [r0, #4]
   1632a:	f7f3 ffdd 	bl	a2e8 <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1632e:	4603      	mov	r3, r0
   16330:	b918      	cbnz	r0, 1633a <ble_svc_gap_appearance_read_access+0x22>
}
   16332:	4618      	mov	r0, r3
   16334:	b003      	add	sp, #12
   16336:	f85d fb04 	ldr.w	pc, [sp], #4
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1633a:	2311      	movs	r3, #17
   1633c:	e7f9      	b.n	16332 <ble_svc_gap_appearance_read_access+0x1a>
   1633e:	bf00      	nop
   16340:	20007af8 	.word	0x20007af8

00016344 <ble_svc_gap_access>:
}

static int
ble_svc_gap_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   16344:	b510      	push	{r4, lr}
   16346:	4614      	mov	r4, r2
        htole16(MYNEWT_VAL(BLE_SVC_GAP_PPCP_SUPERVISION_TMO))
    };
#endif
    int rc;

    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   16348:	6893      	ldr	r3, [r2, #8]
   1634a:	6818      	ldr	r0, [r3, #0]
   1634c:	f7fe f91e 	bl	1458c <ble_uuid_u16>
    assert(uuid16 != 0);
   16350:	b1a0      	cbz	r0, 1637c <ble_svc_gap_access+0x38>

    switch (uuid16) {
   16352:	f5b0 5f28 	cmp.w	r0, #10752	; 0x2a00
   16356:	d01b      	beq.n	16390 <ble_svc_gap_access+0x4c>
   16358:	f642 2201 	movw	r2, #10753	; 0x2a01
   1635c:	4290      	cmp	r0, r2
   1635e:	d133      	bne.n	163c8 <ble_svc_gap_access+0x84>
            rc = BLE_ATT_ERR_UNLIKELY;
        }
        return rc;

    case BLE_SVC_GAP_CHR_UUID16_APPEARANCE:
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   16360:	7823      	ldrb	r3, [r4, #0]
   16362:	b353      	cbz	r3, 163ba <ble_svc_gap_access+0x76>
            rc = ble_svc_gap_appearance_read_access(ctxt);
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   16364:	2b01      	cmp	r3, #1
   16366:	d02c      	beq.n	163c2 <ble_svc_gap_access+0x7e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
        } else {
            assert(0);
   16368:	f7f1 ff2a 	bl	81c0 <hal_debugger_connected>
   1636c:	b100      	cbz	r0, 16370 <ble_svc_gap_access+0x2c>
   1636e:	be01      	bkpt	0x0001
   16370:	2300      	movs	r3, #0
   16372:	461a      	mov	r2, r3
   16374:	4619      	mov	r1, r3
   16376:	4618      	mov	r0, r3
   16378:	f7f3 fb2a 	bl	99d0 <__assert_func>
    assert(uuid16 != 0);
   1637c:	f7f1 ff20 	bl	81c0 <hal_debugger_connected>
   16380:	b100      	cbz	r0, 16384 <ble_svc_gap_access+0x40>
   16382:	be01      	bkpt	0x0001
   16384:	2300      	movs	r3, #0
   16386:	461a      	mov	r2, r3
   16388:	4619      	mov	r1, r3
   1638a:	4618      	mov	r0, r3
   1638c:	f7f3 fb20 	bl	99d0 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   16390:	7823      	ldrb	r3, [r4, #0]
   16392:	b15b      	cbz	r3, 163ac <ble_svc_gap_access+0x68>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   16394:	2b01      	cmp	r3, #1
   16396:	d00d      	beq.n	163b4 <ble_svc_gap_access+0x70>
            assert(0);
   16398:	f7f1 ff12 	bl	81c0 <hal_debugger_connected>
   1639c:	b100      	cbz	r0, 163a0 <ble_svc_gap_access+0x5c>
   1639e:	be01      	bkpt	0x0001
   163a0:	2300      	movs	r3, #0
   163a2:	461a      	mov	r2, r3
   163a4:	4619      	mov	r1, r3
   163a6:	4618      	mov	r0, r3
   163a8:	f7f3 fb12 	bl	99d0 <__assert_func>
            rc = ble_svc_gap_device_name_read_access(ctxt);
   163ac:	4620      	mov	r0, r4
   163ae:	f7ff ff9f 	bl	162f0 <ble_svc_gap_device_name_read_access>

    default:
        assert(0);
        return BLE_ATT_ERR_UNLIKELY;
    }
}
   163b2:	bd10      	pop	{r4, pc}
            rc = ble_svc_gap_device_name_write_access(ctxt);
   163b4:	4620      	mov	r0, r4
   163b6:	f7ff ff85 	bl	162c4 <ble_svc_gap_device_name_write_access>
            rc = ble_svc_gap_appearance_read_access(ctxt);
   163ba:	4620      	mov	r0, r4
   163bc:	f7ff ffac 	bl	16318 <ble_svc_gap_appearance_read_access>
        return rc;
   163c0:	e7f7      	b.n	163b2 <ble_svc_gap_access+0x6e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
   163c2:	4620      	mov	r0, r4
   163c4:	f7ff ff89 	bl	162da <ble_svc_gap_appearance_write_access>
        assert(0);
   163c8:	f7f1 fefa 	bl	81c0 <hal_debugger_connected>
   163cc:	b100      	cbz	r0, 163d0 <ble_svc_gap_access+0x8c>
   163ce:	be01      	bkpt	0x0001
   163d0:	2300      	movs	r3, #0
   163d2:	461a      	mov	r2, r3
   163d4:	4619      	mov	r1, r3
   163d6:	4618      	mov	r0, r3
   163d8:	f7f3 fafa 	bl	99d0 <__assert_func>

000163dc <ble_svc_gap_device_name>:

const char *
ble_svc_gap_device_name(void)
{
    return ble_svc_gap_name;
}
   163dc:	4800      	ldr	r0, [pc, #0]	; (163e0 <ble_svc_gap_device_name+0x4>)
   163de:	4770      	bx	lr
   163e0:	20000268 	.word	0x20000268

000163e4 <ble_svc_gap_device_name_set>:

int
ble_svc_gap_device_name_set(const char *name)
{
   163e4:	b570      	push	{r4, r5, r6, lr}
   163e6:	4606      	mov	r6, r0
    int len;

    len = strlen(name);
   163e8:	f7f5 fab0 	bl	b94c <strlen>
    if (len > BLE_SVC_GAP_NAME_MAX_LEN) {
   163ec:	281f      	cmp	r0, #31
   163ee:	dc09      	bgt.n	16404 <ble_svc_gap_device_name_set+0x20>
   163f0:	4604      	mov	r4, r0
        return BLE_HS_EINVAL;
    }

    memcpy(ble_svc_gap_name, name, len);
   163f2:	4d05      	ldr	r5, [pc, #20]	; (16408 <ble_svc_gap_device_name_set+0x24>)
   163f4:	4602      	mov	r2, r0
   163f6:	4631      	mov	r1, r6
   163f8:	4628      	mov	r0, r5
   163fa:	f7f5 fa49 	bl	b890 <memcpy>
    ble_svc_gap_name[len] = '\0';
   163fe:	2000      	movs	r0, #0
   16400:	5528      	strb	r0, [r5, r4]

    return 0;
}
   16402:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   16404:	2003      	movs	r0, #3
   16406:	e7fc      	b.n	16402 <ble_svc_gap_device_name_set+0x1e>
   16408:	20000268 	.word	0x20000268

0001640c <ble_svc_gap_init>:
    ble_svc_gap_chr_changed_cb_fn = cb;
}

void
ble_svc_gap_init(void)
{
   1640c:	b510      	push	{r4, lr}
   1640e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16410:	4b18      	ldr	r3, [pc, #96]	; (16474 <ble_svc_gap_init+0x68>)
   16412:	781b      	ldrb	r3, [r3, #0]
   16414:	b14b      	cbz	r3, 1642a <ble_svc_gap_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_gap_defs);
   16416:	4818      	ldr	r0, [pc, #96]	; (16478 <ble_svc_gap_init+0x6c>)
   16418:	f7f9 faea 	bl	f9f0 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1641c:	b978      	cbnz	r0, 1643e <ble_svc_gap_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gap_defs);
   1641e:	4816      	ldr	r0, [pc, #88]	; (16478 <ble_svc_gap_init+0x6c>)
   16420:	f7f9 fac2 	bl	f9a8 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16424:	b9c0      	cbnz	r0, 16458 <ble_svc_gap_init+0x4c>
}
   16426:	b002      	add	sp, #8
   16428:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1642a:	f7f1 fec9 	bl	81c0 <hal_debugger_connected>
   1642e:	b100      	cbz	r0, 16432 <ble_svc_gap_init+0x26>
   16430:	be01      	bkpt	0x0001
   16432:	2300      	movs	r3, #0
   16434:	461a      	mov	r2, r3
   16436:	4619      	mov	r1, r3
   16438:	4618      	mov	r0, r3
   1643a:	f7f3 fac9 	bl	99d0 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1643e:	f7f1 febf 	bl	81c0 <hal_debugger_connected>
   16442:	b100      	cbz	r0, 16446 <ble_svc_gap_init+0x3a>
   16444:	be01      	bkpt	0x0001
   16446:	2000      	movs	r0, #0
   16448:	9000      	str	r0, [sp, #0]
   1644a:	4b0c      	ldr	r3, [pc, #48]	; (1647c <ble_svc_gap_init+0x70>)
   1644c:	681c      	ldr	r4, [r3, #0]
   1644e:	4603      	mov	r3, r0
   16450:	4602      	mov	r2, r0
   16452:	4601      	mov	r1, r0
   16454:	47a0      	blx	r4
   16456:	e7e2      	b.n	1641e <ble_svc_gap_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16458:	f7f1 feb2 	bl	81c0 <hal_debugger_connected>
   1645c:	b100      	cbz	r0, 16460 <ble_svc_gap_init+0x54>
   1645e:	be01      	bkpt	0x0001
   16460:	2000      	movs	r0, #0
   16462:	9000      	str	r0, [sp, #0]
   16464:	4b05      	ldr	r3, [pc, #20]	; (1647c <ble_svc_gap_init+0x70>)
   16466:	681c      	ldr	r4, [r3, #0]
   16468:	4603      	mov	r3, r0
   1646a:	4602      	mov	r2, r0
   1646c:	4601      	mov	r1, r0
   1646e:	47a0      	blx	r4
}
   16470:	e7d9      	b.n	16426 <ble_svc_gap_init+0x1a>
   16472:	bf00      	nop
   16474:	20000506 	.word	0x20000506
   16478:	0002918c 	.word	0x0002918c
   1647c:	200000ec 	.word	0x200000ec

00016480 <ble_hs_util_load_rand_addr>:
#include "controller/ble_hw.h"
#endif

static int
ble_hs_util_load_rand_addr(ble_addr_t *addr)
{
   16480:	b508      	push	{r3, lr}
     * automically restore a random address.
     */
#if MYNEWT_VAL(BLE_CONTROLLER)
    int rc;

    rc = ble_hw_get_static_addr(addr);
   16482:	f00f f99f 	bl	257c4 <ble_hw_get_static_addr>
    if (rc == 0) {
   16486:	4603      	mov	r3, r0
   16488:	b908      	cbnz	r0, 1648e <ble_hs_util_load_rand_addr+0xe>
        return 0;
    }
#endif

    return BLE_HS_ENOADDR;
}
   1648a:	4618      	mov	r0, r3
   1648c:	bd08      	pop	{r3, pc}
    return BLE_HS_ENOADDR;
   1648e:	2315      	movs	r3, #21
   16490:	e7fb      	b.n	1648a <ble_hs_util_load_rand_addr+0xa>

00016492 <ble_hs_util_ensure_rand_addr>:

static int
ble_hs_util_ensure_rand_addr(void)
{
   16492:	b500      	push	{lr}
   16494:	b083      	sub	sp, #12
    ble_addr_t addr;
    int rc;

    /* If we already have a random address, then we are done. */
    rc = ble_hs_id_copy_addr(BLE_ADDR_RANDOM, NULL, NULL);
   16496:	2200      	movs	r2, #0
   16498:	4611      	mov	r1, r2
   1649a:	2001      	movs	r0, #1
   1649c:	f7fb f84f 	bl	1153e <ble_hs_id_copy_addr>
    if (rc == 0) {
   164a0:	4603      	mov	r3, r0
   164a2:	b918      	cbnz	r0, 164ac <ble_hs_util_ensure_rand_addr+0x1a>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   164a4:	4618      	mov	r0, r3
   164a6:	b003      	add	sp, #12
   164a8:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_hs_util_load_rand_addr(&addr);
   164ac:	4668      	mov	r0, sp
   164ae:	f7ff ffe7 	bl	16480 <ble_hs_util_load_rand_addr>
    if (rc != 0) {
   164b2:	4603      	mov	r3, r0
   164b4:	2800      	cmp	r0, #0
   164b6:	d1f5      	bne.n	164a4 <ble_hs_util_ensure_rand_addr+0x12>
    rc = ble_hs_id_set_rnd(addr.val);
   164b8:	f10d 0001 	add.w	r0, sp, #1
   164bc:	f7fa ffba 	bl	11434 <ble_hs_id_set_rnd>
   164c0:	4603      	mov	r3, r0
   164c2:	e7ef      	b.n	164a4 <ble_hs_util_ensure_rand_addr+0x12>

000164c4 <ble_hs_util_ensure_addr>:

int
ble_hs_util_ensure_addr(int prefer_random)
{
   164c4:	b508      	push	{r3, lr}
    int rc;

    if (prefer_random) {
   164c6:	b150      	cbz	r0, 164de <ble_hs_util_ensure_addr+0x1a>
        /* Try to load a random address. */
        rc = ble_hs_util_ensure_rand_addr();
   164c8:	f7ff ffe3 	bl	16492 <ble_hs_util_ensure_rand_addr>
        if (rc == BLE_HS_ENOADDR) {
   164cc:	2815      	cmp	r0, #21
   164ce:	d000      	beq.n	164d2 <ble_hs_util_ensure_addr+0xe>
            rc = ble_hs_util_ensure_rand_addr();
        }
    }

    return rc;
}
   164d0:	bd08      	pop	{r3, pc}
            rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   164d2:	2200      	movs	r2, #0
   164d4:	4611      	mov	r1, r2
   164d6:	4610      	mov	r0, r2
   164d8:	f7fb f831 	bl	1153e <ble_hs_id_copy_addr>
   164dc:	e7f8      	b.n	164d0 <ble_hs_util_ensure_addr+0xc>
        rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   164de:	2200      	movs	r2, #0
   164e0:	4611      	mov	r1, r2
   164e2:	4610      	mov	r0, r2
   164e4:	f7fb f82b 	bl	1153e <ble_hs_id_copy_addr>
        if (rc == BLE_HS_ENOADDR) {
   164e8:	2815      	cmp	r0, #21
   164ea:	d1f1      	bne.n	164d0 <ble_hs_util_ensure_addr+0xc>
            rc = ble_hs_util_ensure_rand_addr();
   164ec:	f7ff ffd1 	bl	16492 <ble_hs_util_ensure_rand_addr>
    return rc;
   164f0:	e7ee      	b.n	164d0 <ble_hs_util_ensure_addr+0xc>
	...

000164f4 <ble_hci_trans_cfg_hs>:
void
ble_hci_trans_cfg_hs(ble_hci_trans_rx_cmd_fn *cmd_cb,
                     void *cmd_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb,
                     void *acl_arg)
{
   164f4:	b410      	push	{r4}
    ble_hci_ram_rx_cmd_hs_cb = cmd_cb;
   164f6:	4c05      	ldr	r4, [pc, #20]	; (1650c <ble_hci_trans_cfg_hs+0x18>)
   164f8:	6020      	str	r0, [r4, #0]
    ble_hci_ram_rx_cmd_hs_arg = cmd_arg;
   164fa:	4805      	ldr	r0, [pc, #20]	; (16510 <ble_hci_trans_cfg_hs+0x1c>)
   164fc:	6001      	str	r1, [r0, #0]
    ble_hci_ram_rx_acl_hs_cb = acl_cb;
   164fe:	4905      	ldr	r1, [pc, #20]	; (16514 <ble_hci_trans_cfg_hs+0x20>)
   16500:	600a      	str	r2, [r1, #0]
    ble_hci_ram_rx_acl_hs_arg = acl_arg;
   16502:	4a05      	ldr	r2, [pc, #20]	; (16518 <ble_hci_trans_cfg_hs+0x24>)
   16504:	6013      	str	r3, [r2, #0]
}
   16506:	f85d 4b04 	ldr.w	r4, [sp], #4
   1650a:	4770      	bx	lr
   1650c:	20007f38 	.word	0x20007f38
   16510:	20007f34 	.word	0x20007f34
   16514:	20007f28 	.word	0x20007f28
   16518:	20007f24 	.word	0x20007f24

0001651c <ble_hci_trans_cfg_ll>:
void
ble_hci_trans_cfg_ll(ble_hci_trans_rx_cmd_fn *cmd_cb,
                     void *cmd_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb,
                     void *acl_arg)
{
   1651c:	b410      	push	{r4}
    ble_hci_ram_rx_cmd_ll_cb = cmd_cb;
   1651e:	4c05      	ldr	r4, [pc, #20]	; (16534 <ble_hci_trans_cfg_ll+0x18>)
   16520:	6020      	str	r0, [r4, #0]
    ble_hci_ram_rx_cmd_ll_arg = cmd_arg;
   16522:	4805      	ldr	r0, [pc, #20]	; (16538 <ble_hci_trans_cfg_ll+0x1c>)
   16524:	6001      	str	r1, [r0, #0]
    ble_hci_ram_rx_acl_ll_cb = acl_cb;
   16526:	4905      	ldr	r1, [pc, #20]	; (1653c <ble_hci_trans_cfg_ll+0x20>)
   16528:	600a      	str	r2, [r1, #0]
    ble_hci_ram_rx_acl_ll_arg = acl_arg;
   1652a:	4a05      	ldr	r2, [pc, #20]	; (16540 <ble_hci_trans_cfg_ll+0x24>)
   1652c:	6013      	str	r3, [r2, #0]
}
   1652e:	f85d 4b04 	ldr.w	r4, [sp], #4
   16532:	4770      	bx	lr
   16534:	20007f40 	.word	0x20007f40
   16538:	20007f3c 	.word	0x20007f3c
   1653c:	20007f30 	.word	0x20007f30
   16540:	20007f2c 	.word	0x20007f2c

00016544 <ble_hci_trans_hs_cmd_tx>:

int
ble_hci_trans_hs_cmd_tx(uint8_t *cmd)
{
   16544:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_cmd_ll_cb != NULL);
   16546:	4b08      	ldr	r3, [pc, #32]	; (16568 <ble_hci_trans_hs_cmd_tx+0x24>)
   16548:	681b      	ldr	r3, [r3, #0]
   1654a:	b11b      	cbz	r3, 16554 <ble_hci_trans_hs_cmd_tx+0x10>

    rc = ble_hci_ram_rx_cmd_ll_cb(cmd, ble_hci_ram_rx_cmd_ll_arg);
   1654c:	4a07      	ldr	r2, [pc, #28]	; (1656c <ble_hci_trans_hs_cmd_tx+0x28>)
   1654e:	6811      	ldr	r1, [r2, #0]
   16550:	4798      	blx	r3
    return rc;
}
   16552:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_cmd_ll_cb != NULL);
   16554:	f7f1 fe34 	bl	81c0 <hal_debugger_connected>
   16558:	b100      	cbz	r0, 1655c <ble_hci_trans_hs_cmd_tx+0x18>
   1655a:	be01      	bkpt	0x0001
   1655c:	2300      	movs	r3, #0
   1655e:	461a      	mov	r2, r3
   16560:	4619      	mov	r1, r3
   16562:	4618      	mov	r0, r3
   16564:	f7f3 fa34 	bl	99d0 <__assert_func>
   16568:	20007f40 	.word	0x20007f40
   1656c:	20007f3c 	.word	0x20007f3c

00016570 <ble_hci_trans_ll_evt_tx>:

int
ble_hci_trans_ll_evt_tx(uint8_t *hci_ev)
{
   16570:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_cmd_hs_cb != NULL);
   16572:	4b08      	ldr	r3, [pc, #32]	; (16594 <ble_hci_trans_ll_evt_tx+0x24>)
   16574:	681b      	ldr	r3, [r3, #0]
   16576:	b11b      	cbz	r3, 16580 <ble_hci_trans_ll_evt_tx+0x10>

    rc = ble_hci_ram_rx_cmd_hs_cb(hci_ev, ble_hci_ram_rx_cmd_hs_arg);
   16578:	4a07      	ldr	r2, [pc, #28]	; (16598 <ble_hci_trans_ll_evt_tx+0x28>)
   1657a:	6811      	ldr	r1, [r2, #0]
   1657c:	4798      	blx	r3
    return rc;
}
   1657e:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_cmd_hs_cb != NULL);
   16580:	f7f1 fe1e 	bl	81c0 <hal_debugger_connected>
   16584:	b100      	cbz	r0, 16588 <ble_hci_trans_ll_evt_tx+0x18>
   16586:	be01      	bkpt	0x0001
   16588:	2300      	movs	r3, #0
   1658a:	461a      	mov	r2, r3
   1658c:	4619      	mov	r1, r3
   1658e:	4618      	mov	r0, r3
   16590:	f7f3 fa1e 	bl	99d0 <__assert_func>
   16594:	20007f38 	.word	0x20007f38
   16598:	20007f34 	.word	0x20007f34

0001659c <ble_hci_trans_hs_acl_tx>:

int
ble_hci_trans_hs_acl_tx(struct os_mbuf *om)
{
   1659c:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_acl_ll_cb != NULL);
   1659e:	4b08      	ldr	r3, [pc, #32]	; (165c0 <ble_hci_trans_hs_acl_tx+0x24>)
   165a0:	681b      	ldr	r3, [r3, #0]
   165a2:	b11b      	cbz	r3, 165ac <ble_hci_trans_hs_acl_tx+0x10>

    rc = ble_hci_ram_rx_acl_ll_cb(om, ble_hci_ram_rx_acl_ll_arg);
   165a4:	4a07      	ldr	r2, [pc, #28]	; (165c4 <ble_hci_trans_hs_acl_tx+0x28>)
   165a6:	6811      	ldr	r1, [r2, #0]
   165a8:	4798      	blx	r3
    return rc;
}
   165aa:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_acl_ll_cb != NULL);
   165ac:	f7f1 fe08 	bl	81c0 <hal_debugger_connected>
   165b0:	b100      	cbz	r0, 165b4 <ble_hci_trans_hs_acl_tx+0x18>
   165b2:	be01      	bkpt	0x0001
   165b4:	2300      	movs	r3, #0
   165b6:	461a      	mov	r2, r3
   165b8:	4619      	mov	r1, r3
   165ba:	4618      	mov	r0, r3
   165bc:	f7f3 fa08 	bl	99d0 <__assert_func>
   165c0:	20007f30 	.word	0x20007f30
   165c4:	20007f2c 	.word	0x20007f2c

000165c8 <ble_hci_trans_ll_acl_tx>:

int
ble_hci_trans_ll_acl_tx(struct os_mbuf *om)
{
   165c8:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_acl_hs_cb != NULL);
   165ca:	4b08      	ldr	r3, [pc, #32]	; (165ec <ble_hci_trans_ll_acl_tx+0x24>)
   165cc:	681b      	ldr	r3, [r3, #0]
   165ce:	b11b      	cbz	r3, 165d8 <ble_hci_trans_ll_acl_tx+0x10>

    rc = ble_hci_ram_rx_acl_hs_cb(om, ble_hci_ram_rx_acl_hs_arg);
   165d0:	4a07      	ldr	r2, [pc, #28]	; (165f0 <ble_hci_trans_ll_acl_tx+0x28>)
   165d2:	6811      	ldr	r1, [r2, #0]
   165d4:	4798      	blx	r3
    return rc;
}
   165d6:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_acl_hs_cb != NULL);
   165d8:	f7f1 fdf2 	bl	81c0 <hal_debugger_connected>
   165dc:	b100      	cbz	r0, 165e0 <ble_hci_trans_ll_acl_tx+0x18>
   165de:	be01      	bkpt	0x0001
   165e0:	2300      	movs	r3, #0
   165e2:	461a      	mov	r2, r3
   165e4:	4619      	mov	r1, r3
   165e6:	4618      	mov	r0, r3
   165e8:	f7f3 f9f2 	bl	99d0 <__assert_func>
   165ec:	20007f28 	.word	0x20007f28
   165f0:	20007f24 	.word	0x20007f24

000165f4 <ble_hci_trans_buf_alloc>:

uint8_t *
ble_hci_trans_buf_alloc(int type)
{
   165f4:	b508      	push	{r3, lr}
    uint8_t *buf;

    switch (type) {
   165f6:	2802      	cmp	r0, #2
   165f8:	d013      	beq.n	16622 <ble_hci_trans_buf_alloc+0x2e>
   165fa:	2803      	cmp	r0, #3
   165fc:	d00b      	beq.n	16616 <ble_hci_trans_buf_alloc+0x22>
   165fe:	2801      	cmp	r0, #1
   16600:	d01a      	beq.n	16638 <ble_hci_trans_buf_alloc+0x44>
    case BLE_HCI_TRANS_BUF_EVT_LO:
        buf = os_memblock_get(&ble_hci_ram_evt_lo_pool);
        break;

    default:
        assert(0);
   16602:	f7f1 fddd 	bl	81c0 <hal_debugger_connected>
   16606:	b100      	cbz	r0, 1660a <ble_hci_trans_buf_alloc+0x16>
   16608:	be01      	bkpt	0x0001
   1660a:	2300      	movs	r3, #0
   1660c:	461a      	mov	r2, r3
   1660e:	4619      	mov	r1, r3
   16610:	4618      	mov	r0, r3
   16612:	f7f3 f9dd 	bl	99d0 <__assert_func>
        buf = os_memblock_get(&ble_hci_ram_cmd_pool);
   16616:	480b      	ldr	r0, [pc, #44]	; (16644 <ble_hci_trans_buf_alloc+0x50>)
   16618:	f7f4 faa3 	bl	ab62 <os_memblock_get>
   1661c:	4603      	mov	r3, r0
        buf = NULL;
    }

    return buf;
}
   1661e:	4618      	mov	r0, r3
   16620:	bd08      	pop	{r3, pc}
        buf = os_memblock_get(&ble_hci_ram_evt_hi_pool);
   16622:	4809      	ldr	r0, [pc, #36]	; (16648 <ble_hci_trans_buf_alloc+0x54>)
   16624:	f7f4 fa9d 	bl	ab62 <os_memblock_get>
        if (buf == NULL) {
   16628:	4603      	mov	r3, r0
   1662a:	2800      	cmp	r0, #0
   1662c:	d1f7      	bne.n	1661e <ble_hci_trans_buf_alloc+0x2a>
            buf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   1662e:	2001      	movs	r0, #1
   16630:	f7ff ffe0 	bl	165f4 <ble_hci_trans_buf_alloc>
   16634:	4603      	mov	r3, r0
   16636:	e7f2      	b.n	1661e <ble_hci_trans_buf_alloc+0x2a>
        buf = os_memblock_get(&ble_hci_ram_evt_lo_pool);
   16638:	4804      	ldr	r0, [pc, #16]	; (1664c <ble_hci_trans_buf_alloc+0x58>)
   1663a:	f7f4 fa92 	bl	ab62 <os_memblock_get>
   1663e:	4603      	mov	r3, r0
        break;
   16640:	e7ed      	b.n	1661e <ble_hci_trans_buf_alloc+0x2a>
   16642:	bf00      	nop
   16644:	20007c00 	.word	0x20007c00
   16648:	20007cac 	.word	0x20007cac
   1664c:	20007f08 	.word	0x20007f08

00016650 <ble_hci_trans_buf_free>:

void
ble_hci_trans_buf_free(uint8_t *buf)
{
   16650:	b510      	push	{r4, lr}
   16652:	4604      	mov	r4, r0
    * response to the command. This was done to insure that the controller
    * could always send back one of these events when a command was received.
    * Thus, we check to see which pool the buffer came from so we can free
    * it to the appropriate pool
    */
    if (os_memblock_from(&ble_hci_ram_evt_hi_pool, buf)) {
   16654:	4601      	mov	r1, r0
   16656:	4824      	ldr	r0, [pc, #144]	; (166e8 <ble_hci_trans_buf_free+0x98>)
   16658:	f7f4 fa63 	bl	ab22 <os_memblock_from>
   1665c:	b178      	cbz	r0, 1667e <ble_hci_trans_buf_free+0x2e>
        rc = os_memblock_put(&ble_hci_ram_evt_hi_pool, buf);
   1665e:	4621      	mov	r1, r4
   16660:	4821      	ldr	r0, [pc, #132]	; (166e8 <ble_hci_trans_buf_free+0x98>)
   16662:	f7f4 faa6 	bl	abb2 <os_memblock_put>
        assert(rc == 0);
   16666:	b900      	cbnz	r0, 1666a <ble_hci_trans_buf_free+0x1a>
    } else {
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
        rc = os_memblock_put(&ble_hci_ram_cmd_pool, buf);
        assert(rc == 0);
    }
}
   16668:	bd10      	pop	{r4, pc}
        assert(rc == 0);
   1666a:	f7f1 fda9 	bl	81c0 <hal_debugger_connected>
   1666e:	b100      	cbz	r0, 16672 <ble_hci_trans_buf_free+0x22>
   16670:	be01      	bkpt	0x0001
   16672:	2300      	movs	r3, #0
   16674:	461a      	mov	r2, r3
   16676:	4619      	mov	r1, r3
   16678:	4618      	mov	r0, r3
   1667a:	f7f3 f9a9 	bl	99d0 <__assert_func>
    } else if (os_memblock_from(&ble_hci_ram_evt_lo_pool, buf)) {
   1667e:	4621      	mov	r1, r4
   16680:	481a      	ldr	r0, [pc, #104]	; (166ec <ble_hci_trans_buf_free+0x9c>)
   16682:	f7f4 fa4e 	bl	ab22 <os_memblock_from>
   16686:	b178      	cbz	r0, 166a8 <ble_hci_trans_buf_free+0x58>
        rc = os_memblock_put(&ble_hci_ram_evt_lo_pool, buf);
   16688:	4621      	mov	r1, r4
   1668a:	4818      	ldr	r0, [pc, #96]	; (166ec <ble_hci_trans_buf_free+0x9c>)
   1668c:	f7f4 fa91 	bl	abb2 <os_memblock_put>
        assert(rc == 0);
   16690:	2800      	cmp	r0, #0
   16692:	d0e9      	beq.n	16668 <ble_hci_trans_buf_free+0x18>
   16694:	f7f1 fd94 	bl	81c0 <hal_debugger_connected>
   16698:	b100      	cbz	r0, 1669c <ble_hci_trans_buf_free+0x4c>
   1669a:	be01      	bkpt	0x0001
   1669c:	2300      	movs	r3, #0
   1669e:	461a      	mov	r2, r3
   166a0:	4619      	mov	r1, r3
   166a2:	4618      	mov	r0, r3
   166a4:	f7f3 f994 	bl	99d0 <__assert_func>
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
   166a8:	4621      	mov	r1, r4
   166aa:	4811      	ldr	r0, [pc, #68]	; (166f0 <ble_hci_trans_buf_free+0xa0>)
   166ac:	f7f4 fa39 	bl	ab22 <os_memblock_from>
   166b0:	b178      	cbz	r0, 166d2 <ble_hci_trans_buf_free+0x82>
        rc = os_memblock_put(&ble_hci_ram_cmd_pool, buf);
   166b2:	4621      	mov	r1, r4
   166b4:	480e      	ldr	r0, [pc, #56]	; (166f0 <ble_hci_trans_buf_free+0xa0>)
   166b6:	f7f4 fa7c 	bl	abb2 <os_memblock_put>
        assert(rc == 0);
   166ba:	2800      	cmp	r0, #0
   166bc:	d0d4      	beq.n	16668 <ble_hci_trans_buf_free+0x18>
   166be:	f7f1 fd7f 	bl	81c0 <hal_debugger_connected>
   166c2:	b100      	cbz	r0, 166c6 <ble_hci_trans_buf_free+0x76>
   166c4:	be01      	bkpt	0x0001
   166c6:	2300      	movs	r3, #0
   166c8:	461a      	mov	r2, r3
   166ca:	4619      	mov	r1, r3
   166cc:	4618      	mov	r0, r3
   166ce:	f7f3 f97f 	bl	99d0 <__assert_func>
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
   166d2:	f7f1 fd75 	bl	81c0 <hal_debugger_connected>
   166d6:	b100      	cbz	r0, 166da <ble_hci_trans_buf_free+0x8a>
   166d8:	be01      	bkpt	0x0001
   166da:	2300      	movs	r3, #0
   166dc:	461a      	mov	r2, r3
   166de:	4619      	mov	r1, r3
   166e0:	4618      	mov	r0, r3
   166e2:	f7f3 f975 	bl	99d0 <__assert_func>
   166e6:	bf00      	nop
   166e8:	20007cac 	.word	0x20007cac
   166ec:	20007f08 	.word	0x20007f08
   166f0:	20007c00 	.word	0x20007c00

000166f4 <ble_hci_trans_reset>:
{
    /* No work to do.  All allocated buffers are owned by the host or
     * controller, and they will get freed by their owners.
     */
    return 0;
}
   166f4:	2000      	movs	r0, #0
   166f6:	4770      	bx	lr

000166f8 <ble_hci_ram_init>:

void
ble_hci_ram_init(void)
{
   166f8:	b510      	push	{r4, lr}
   166fa:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   166fc:	4b28      	ldr	r3, [pc, #160]	; (167a0 <ble_hci_ram_init+0xa8>)
   166fe:	781b      	ldrb	r3, [r3, #0]
   16700:	b1eb      	cbz	r3, 1673e <ble_hci_ram_init+0x46>
     * Create memory pool of HCI command buffers. NOTE: we currently dont
     * allow this to be configured. The controller will only allow one
     * outstanding command. We decided to keep this a pool in case we allow
     * allow the controller to handle more than one outstanding command.
     */
    rc = os_mempool_init(&ble_hci_ram_cmd_pool,
   16702:	4b28      	ldr	r3, [pc, #160]	; (167a4 <ble_hci_ram_init+0xac>)
   16704:	9300      	str	r3, [sp, #0]
   16706:	4b28      	ldr	r3, [pc, #160]	; (167a8 <ble_hci_ram_init+0xb0>)
   16708:	f44f 7282 	mov.w	r2, #260	; 0x104
   1670c:	2101      	movs	r1, #1
   1670e:	4827      	ldr	r0, [pc, #156]	; (167ac <ble_hci_ram_init+0xb4>)
   16710:	f7f4 f9e2 	bl	aad8 <os_mempool_init>
                         1,
                         BLE_HCI_TRANS_CMD_SZ,
                         ble_hci_ram_cmd_buf,
                         "ble_hci_ram_cmd_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   16714:	b9e8      	cbnz	r0, 16752 <ble_hci_ram_init+0x5a>

    rc = os_mempool_init(&ble_hci_ram_evt_hi_pool,
   16716:	4b26      	ldr	r3, [pc, #152]	; (167b0 <ble_hci_ram_init+0xb8>)
   16718:	9300      	str	r3, [sp, #0]
   1671a:	4b26      	ldr	r3, [pc, #152]	; (167b4 <ble_hci_ram_init+0xbc>)
   1671c:	2246      	movs	r2, #70	; 0x46
   1671e:	2102      	movs	r1, #2
   16720:	4825      	ldr	r0, [pc, #148]	; (167b8 <ble_hci_ram_init+0xc0>)
   16722:	f7f4 f9d9 	bl	aad8 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_HI_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         ble_hci_ram_evt_hi_buf,
                         "ble_hci_ram_evt_hi_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   16726:	bb08      	cbnz	r0, 1676c <ble_hci_ram_init+0x74>

    rc = os_mempool_init(&ble_hci_ram_evt_lo_pool,
   16728:	4b24      	ldr	r3, [pc, #144]	; (167bc <ble_hci_ram_init+0xc4>)
   1672a:	9300      	str	r3, [sp, #0]
   1672c:	4b24      	ldr	r3, [pc, #144]	; (167c0 <ble_hci_ram_init+0xc8>)
   1672e:	2246      	movs	r2, #70	; 0x46
   16730:	2108      	movs	r1, #8
   16732:	4824      	ldr	r0, [pc, #144]	; (167c4 <ble_hci_ram_init+0xcc>)
   16734:	f7f4 f9d0 	bl	aad8 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_LO_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         ble_hci_ram_evt_lo_buf,
                         "ble_hci_ram_evt_lo_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   16738:	bb28      	cbnz	r0, 16786 <ble_hci_ram_init+0x8e>
}
   1673a:	b002      	add	sp, #8
   1673c:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1673e:	f7f1 fd3f 	bl	81c0 <hal_debugger_connected>
   16742:	b100      	cbz	r0, 16746 <ble_hci_ram_init+0x4e>
   16744:	be01      	bkpt	0x0001
   16746:	2300      	movs	r3, #0
   16748:	461a      	mov	r2, r3
   1674a:	4619      	mov	r1, r3
   1674c:	4618      	mov	r0, r3
   1674e:	f7f3 f93f 	bl	99d0 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16752:	f7f1 fd35 	bl	81c0 <hal_debugger_connected>
   16756:	b100      	cbz	r0, 1675a <ble_hci_ram_init+0x62>
   16758:	be01      	bkpt	0x0001
   1675a:	2000      	movs	r0, #0
   1675c:	9000      	str	r0, [sp, #0]
   1675e:	4b1a      	ldr	r3, [pc, #104]	; (167c8 <ble_hci_ram_init+0xd0>)
   16760:	681c      	ldr	r4, [r3, #0]
   16762:	4603      	mov	r3, r0
   16764:	4602      	mov	r2, r0
   16766:	4601      	mov	r1, r0
   16768:	47a0      	blx	r4
   1676a:	e7d4      	b.n	16716 <ble_hci_ram_init+0x1e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1676c:	f7f1 fd28 	bl	81c0 <hal_debugger_connected>
   16770:	b100      	cbz	r0, 16774 <ble_hci_ram_init+0x7c>
   16772:	be01      	bkpt	0x0001
   16774:	2000      	movs	r0, #0
   16776:	9000      	str	r0, [sp, #0]
   16778:	4b13      	ldr	r3, [pc, #76]	; (167c8 <ble_hci_ram_init+0xd0>)
   1677a:	681c      	ldr	r4, [r3, #0]
   1677c:	4603      	mov	r3, r0
   1677e:	4602      	mov	r2, r0
   16780:	4601      	mov	r1, r0
   16782:	47a0      	blx	r4
   16784:	e7d0      	b.n	16728 <ble_hci_ram_init+0x30>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16786:	f7f1 fd1b 	bl	81c0 <hal_debugger_connected>
   1678a:	b100      	cbz	r0, 1678e <ble_hci_ram_init+0x96>
   1678c:	be01      	bkpt	0x0001
   1678e:	2000      	movs	r0, #0
   16790:	9000      	str	r0, [sp, #0]
   16792:	4b0d      	ldr	r3, [pc, #52]	; (167c8 <ble_hci_ram_init+0xd0>)
   16794:	681c      	ldr	r4, [r3, #0]
   16796:	4603      	mov	r3, r0
   16798:	4602      	mov	r2, r0
   1679a:	4601      	mov	r1, r0
   1679c:	47a0      	blx	r4
}
   1679e:	e7cc      	b.n	1673a <ble_hci_ram_init+0x42>
   167a0:	20000506 	.word	0x20000506
   167a4:	000291ac 	.word	0x000291ac
   167a8:	20007afc 	.word	0x20007afc
   167ac:	20007c00 	.word	0x20007c00
   167b0:	000291c4 	.word	0x000291c4
   167b4:	20007c1c 	.word	0x20007c1c
   167b8:	20007cac 	.word	0x20007cac
   167bc:	000291dc 	.word	0x000291dc
   167c0:	20007cc8 	.word	0x20007cc8
   167c4:	20007f08 	.word	0x20007f08
   167c8:	200000ec 	.word	0x200000ec

000167cc <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
   167cc:	b538      	push	{r3, r4, r5, lr}
   167ce:	460d      	mov	r5, r1
   167d0:	4614      	mov	r4, r2
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
   167d2:	6811      	ldr	r1, [r2, #0]
   167d4:	f7f5 f8ac 	bl	b930 <strcmp>
   167d8:	b940      	cbnz	r0, 167ec <conf_dup_check_cb+0x20>
        return;
    }
    if (!val) {
   167da:	b145      	cbz	r5, 167ee <conf_dup_check_cb+0x22>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    } else {
        if (cdca->val && !strcmp(val, cdca->val)) {
   167dc:	6861      	ldr	r1, [r4, #4]
   167de:	b119      	cbz	r1, 167e8 <conf_dup_check_cb+0x1c>
   167e0:	4628      	mov	r0, r5
   167e2:	f7f5 f8a5 	bl	b930 <strcmp>
   167e6:	b160      	cbz	r0, 16802 <conf_dup_check_cb+0x36>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
   167e8:	2300      	movs	r3, #0
   167ea:	60a3      	str	r3, [r4, #8]
        }
    }
}
   167ec:	bd38      	pop	{r3, r4, r5, pc}
        if (!cdca->val || cdca->val[0] == '\0') {
   167ee:	6863      	ldr	r3, [r4, #4]
   167f0:	b10b      	cbz	r3, 167f6 <conf_dup_check_cb+0x2a>
   167f2:	781b      	ldrb	r3, [r3, #0]
   167f4:	b913      	cbnz	r3, 167fc <conf_dup_check_cb+0x30>
            cdca->is_dup = 1;
   167f6:	2301      	movs	r3, #1
   167f8:	60a3      	str	r3, [r4, #8]
   167fa:	e7f7      	b.n	167ec <conf_dup_check_cb+0x20>
            cdca->is_dup = 0;
   167fc:	2300      	movs	r3, #0
   167fe:	60a3      	str	r3, [r4, #8]
   16800:	e7f4      	b.n	167ec <conf_dup_check_cb+0x20>
            cdca->is_dup = 1;
   16802:	2301      	movs	r3, #1
   16804:	60a3      	str	r3, [r4, #8]
   16806:	e7f1      	b.n	167ec <conf_dup_check_cb+0x20>

00016808 <conf_load_cb>:
{
   16808:	b538      	push	{r3, r4, r5, lr}
   1680a:	4604      	mov	r4, r0
   1680c:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
   1680e:	b122      	cbz	r2, 1681a <conf_load_cb+0x12>
   16810:	4610      	mov	r0, r2
   16812:	4621      	mov	r1, r4
   16814:	f7f5 f88c 	bl	b930 <strcmp>
   16818:	b918      	cbnz	r0, 16822 <conf_load_cb+0x1a>
        conf_set_value(name, val);
   1681a:	4629      	mov	r1, r5
   1681c:	4620      	mov	r0, r4
   1681e:	f000 fa0f 	bl	16c40 <conf_set_value>
}
   16822:	bd38      	pop	{r3, r4, r5, pc}

00016824 <conf_load>:
{
   16824:	b510      	push	{r4, lr}
    conf_lock();
   16826:	f000 f8b1 	bl	1698c <conf_lock>
    conf_loaded = true;
   1682a:	2301      	movs	r3, #1
   1682c:	4a0e      	ldr	r2, [pc, #56]	; (16868 <conf_load+0x44>)
   1682e:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
   16830:	4a0e      	ldr	r2, [pc, #56]	; (1686c <conf_load+0x48>)
   16832:	7013      	strb	r3, [r2, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   16834:	4b0e      	ldr	r3, [pc, #56]	; (16870 <conf_load+0x4c>)
   16836:	681c      	ldr	r4, [r3, #0]
   16838:	e000      	b.n	1683c <conf_load+0x18>
   1683a:	6824      	ldr	r4, [r4, #0]
   1683c:	b164      	cbz	r4, 16858 <conf_load+0x34>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
   1683e:	6863      	ldr	r3, [r4, #4]
   16840:	681b      	ldr	r3, [r3, #0]
   16842:	2200      	movs	r2, #0
   16844:	490b      	ldr	r1, [pc, #44]	; (16874 <conf_load+0x50>)
   16846:	4620      	mov	r0, r4
   16848:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
   1684a:	6823      	ldr	r3, [r4, #0]
   1684c:	2b00      	cmp	r3, #0
   1684e:	d0f4      	beq.n	1683a <conf_load+0x16>
            conf_commit(NULL);
   16850:	2000      	movs	r0, #0
   16852:	f000 fa0f 	bl	16c74 <conf_commit>
   16856:	e7f0      	b.n	1683a <conf_load+0x16>
    conf_loading = false;
   16858:	4b04      	ldr	r3, [pc, #16]	; (1686c <conf_load+0x48>)
   1685a:	701c      	strb	r4, [r3, #0]
    conf_unlock();
   1685c:	f000 f8a0 	bl	169a0 <conf_unlock>
    return conf_commit(NULL);
   16860:	4620      	mov	r0, r4
   16862:	f000 fa07 	bl	16c74 <conf_commit>
}
   16866:	bd10      	pop	{r4, pc}
   16868:	20007f48 	.word	0x20007f48
   1686c:	20007f49 	.word	0x20007f49
   16870:	20007f44 	.word	0x20007f44
   16874:	00016809 	.word	0x00016809

00016878 <conf_ensure_loaded>:
{
   16878:	b508      	push	{r3, lr}
    if (conf_loaded) {
   1687a:	4b04      	ldr	r3, [pc, #16]	; (1688c <conf_ensure_loaded+0x14>)
   1687c:	781b      	ldrb	r3, [r3, #0]
   1687e:	b10b      	cbz	r3, 16884 <conf_ensure_loaded+0xc>
        return 0;
   16880:	2000      	movs	r0, #0
}
   16882:	bd08      	pop	{r3, pc}
    return conf_load();
   16884:	f7ff ffce 	bl	16824 <conf_load>
   16888:	e7fb      	b.n	16882 <conf_ensure_loaded+0xa>
   1688a:	bf00      	nop
   1688c:	20007f48 	.word	0x20007f48

00016890 <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
   16890:	b570      	push	{r4, r5, r6, lr}
   16892:	b084      	sub	sp, #16
   16894:	4605      	mov	r5, r0
   16896:	460e      	mov	r6, r1
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
   16898:	f000 f878 	bl	1698c <conf_lock>
    if (!conf_save_dst) {
   1689c:	4b13      	ldr	r3, [pc, #76]	; (168ec <conf_save_one+0x5c>)
   1689e:	681b      	ldr	r3, [r3, #0]
   168a0:	b1fb      	cbz	r3, 168e2 <conf_save_one+0x52>
    }

    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
   168a2:	9501      	str	r5, [sp, #4]
    cdca.val = value;
   168a4:	9602      	str	r6, [sp, #8]
    cdca.is_dup = 0;
   168a6:	2300      	movs	r3, #0
   168a8:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   168aa:	4b11      	ldr	r3, [pc, #68]	; (168f0 <conf_save_one+0x60>)
   168ac:	681c      	ldr	r4, [r3, #0]
   168ae:	e006      	b.n	168be <conf_save_one+0x2e>
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
   168b0:	6863      	ldr	r3, [r4, #4]
   168b2:	681b      	ldr	r3, [r3, #0]
   168b4:	aa01      	add	r2, sp, #4
   168b6:	490f      	ldr	r1, [pc, #60]	; (168f4 <conf_save_one+0x64>)
   168b8:	4620      	mov	r0, r4
   168ba:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   168bc:	6824      	ldr	r4, [r4, #0]
   168be:	2c00      	cmp	r4, #0
   168c0:	d1f6      	bne.n	168b0 <conf_save_one+0x20>
    }
    if (cdca.is_dup == 1) {
   168c2:	9b03      	ldr	r3, [sp, #12]
   168c4:	2b01      	cmp	r3, #1
   168c6:	d00e      	beq.n	168e6 <conf_save_one+0x56>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
   168c8:	4b08      	ldr	r3, [pc, #32]	; (168ec <conf_save_one+0x5c>)
   168ca:	6818      	ldr	r0, [r3, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
   168cc:	6843      	ldr	r3, [r0, #4]
   168ce:	689b      	ldr	r3, [r3, #8]
   168d0:	4632      	mov	r2, r6
   168d2:	4629      	mov	r1, r5
   168d4:	4798      	blx	r3
   168d6:	4604      	mov	r4, r0
out:
    conf_unlock();
   168d8:	f000 f862 	bl	169a0 <conf_unlock>
    return rc;
}
   168dc:	4620      	mov	r0, r4
   168de:	b004      	add	sp, #16
   168e0:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
   168e2:	240a      	movs	r4, #10
   168e4:	e7f8      	b.n	168d8 <conf_save_one+0x48>
        rc = 0;
   168e6:	2400      	movs	r4, #0
   168e8:	e7f6      	b.n	168d8 <conf_save_one+0x48>
   168ea:	bf00      	nop
   168ec:	20007f4c 	.word	0x20007f4c
   168f0:	20007f44 	.word	0x20007f44
   168f4:	000167cd 	.word	0x000167cd

000168f8 <conf_store_init>:
}

void
conf_store_init(void)
{
    conf_loaded = false;
   168f8:	2300      	movs	r3, #0
   168fa:	4a02      	ldr	r2, [pc, #8]	; (16904 <conf_store_init+0xc>)
   168fc:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
   168fe:	4a02      	ldr	r2, [pc, #8]	; (16908 <conf_store_init+0x10>)
   16900:	6013      	str	r3, [r2, #0]
}
   16902:	4770      	bx	lr
   16904:	20007f48 	.word	0x20007f48
   16908:	20007f44 	.word	0x20007f44

0001690c <conf_set_cb>:
/**
 * Executes a conf_handler's "set" callback and returns the result.
 */
static int
conf_set_cb(struct conf_handler *ch, int argc, char **argv, char *val)
{
   1690c:	b538      	push	{r3, r4, r5, lr}
   1690e:	460c      	mov	r4, r1
   16910:	4611      	mov	r1, r2
   16912:	461a      	mov	r2, r3
    if (ch->ch_ext) {
   16914:	7a03      	ldrb	r3, [r0, #8]
   16916:	b12b      	cbz	r3, 16924 <conf_set_cb+0x18>
        if (ch->ch_set_ext != NULL) {
   16918:	6905      	ldr	r5, [r0, #16]
   1691a:	b145      	cbz	r5, 1692e <conf_set_cb+0x22>
            return ch->ch_set_ext(argc, argv, val, ch->ch_arg);
   1691c:	69c3      	ldr	r3, [r0, #28]
   1691e:	4620      	mov	r0, r4
   16920:	47a8      	blx	r5
            return ch->ch_set(argc, argv, val);
        }
    }

    return OS_ERROR;
}
   16922:	bd38      	pop	{r3, r4, r5, pc}
        if (ch->ch_set != NULL) {
   16924:	6903      	ldr	r3, [r0, #16]
   16926:	b123      	cbz	r3, 16932 <conf_set_cb+0x26>
            return ch->ch_set(argc, argv, val);
   16928:	4620      	mov	r0, r4
   1692a:	4798      	blx	r3
   1692c:	e7f9      	b.n	16922 <conf_set_cb+0x16>
    return OS_ERROR;
   1692e:	200c      	movs	r0, #12
   16930:	e7f7      	b.n	16922 <conf_set_cb+0x16>
   16932:	200c      	movs	r0, #12
   16934:	e7f5      	b.n	16922 <conf_set_cb+0x16>

00016936 <conf_commit_cb>:
/**
 * Executes a conf_handler's "commit" callback and returns the result.
 */
static int
conf_commit_cb(struct conf_handler *ch)
{
   16936:	b508      	push	{r3, lr}
    if (ch->ch_ext) {
   16938:	7a03      	ldrb	r3, [r0, #8]
   1693a:	b123      	cbz	r3, 16946 <conf_commit_cb+0x10>
        if (ch->ch_commit_ext != NULL) {
   1693c:	6943      	ldr	r3, [r0, #20]
   1693e:	b133      	cbz	r3, 1694e <conf_commit_cb+0x18>
            return ch->ch_commit_ext(ch->ch_arg);
   16940:	69c0      	ldr	r0, [r0, #28]
   16942:	4798      	blx	r3
   16944:	e002      	b.n	1694c <conf_commit_cb+0x16>
        }
    } else {
        if (ch->ch_commit != NULL) {
   16946:	6943      	ldr	r3, [r0, #20]
   16948:	b11b      	cbz	r3, 16952 <conf_commit_cb+0x1c>
            return ch->ch_commit();
   1694a:	4798      	blx	r3
        }
    }

    return 0;
}
   1694c:	bd08      	pop	{r3, pc}
    return 0;
   1694e:	2000      	movs	r0, #0
   16950:	e7fc      	b.n	1694c <conf_commit_cb+0x16>
   16952:	2000      	movs	r0, #0
   16954:	e7fa      	b.n	1694c <conf_commit_cb+0x16>

00016956 <conf_ev_fn_load>:
{
   16956:	b508      	push	{r3, lr}
    conf_ensure_loaded();
   16958:	f7ff ff8e 	bl	16878 <conf_ensure_loaded>
}
   1695c:	bd08      	pop	{r3, pc}
	...

00016960 <conf_init>:
{
   16960:	b508      	push	{r3, lr}
    os_mutex_init(&conf_mtx);
   16962:	4807      	ldr	r0, [pc, #28]	; (16980 <conf_init+0x20>)
   16964:	f7f4 f9f6 	bl	ad54 <os_mutex_init>
    SLIST_INIT(&conf_handlers);
   16968:	4b06      	ldr	r3, [pc, #24]	; (16984 <conf_init+0x24>)
   1696a:	2200      	movs	r2, #0
   1696c:	601a      	str	r2, [r3, #0]
    conf_store_init();
   1696e:	f7ff ffc3 	bl	168f8 <conf_store_init>
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
   16972:	f7f3 fc25 	bl	a1c0 <os_eventq_dflt_get>
   16976:	4904      	ldr	r1, [pc, #16]	; (16988 <conf_init+0x28>)
   16978:	f7f3 fb77 	bl	a06a <os_eventq_put>
}
   1697c:	bd08      	pop	{r3, pc}
   1697e:	bf00      	nop
   16980:	20007f54 	.word	0x20007f54
   16984:	20007f50 	.word	0x20007f50
   16988:	20000288 	.word	0x20000288

0001698c <conf_lock>:
{
   1698c:	b508      	push	{r3, lr}
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
   1698e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   16992:	4802      	ldr	r0, [pc, #8]	; (1699c <conf_lock+0x10>)
   16994:	f7f4 fa48 	bl	ae28 <os_mutex_pend>
}
   16998:	bd08      	pop	{r3, pc}
   1699a:	bf00      	nop
   1699c:	20007f54 	.word	0x20007f54

000169a0 <conf_unlock>:
{
   169a0:	b508      	push	{r3, lr}
    os_mutex_release(&conf_mtx);
   169a2:	4802      	ldr	r0, [pc, #8]	; (169ac <conf_unlock+0xc>)
   169a4:	f7f4 f9e0 	bl	ad68 <os_mutex_release>
}
   169a8:	bd08      	pop	{r3, pc}
   169aa:	bf00      	nop
   169ac:	20007f54 	.word	0x20007f54

000169b0 <conf_register>:
{
   169b0:	b510      	push	{r4, lr}
   169b2:	4604      	mov	r4, r0
    conf_lock();
   169b4:	f7ff ffea 	bl	1698c <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
   169b8:	4b03      	ldr	r3, [pc, #12]	; (169c8 <conf_register+0x18>)
   169ba:	681a      	ldr	r2, [r3, #0]
   169bc:	6022      	str	r2, [r4, #0]
   169be:	601c      	str	r4, [r3, #0]
    conf_unlock();
   169c0:	f7ff ffee 	bl	169a0 <conf_unlock>
}
   169c4:	2000      	movs	r0, #0
   169c6:	bd10      	pop	{r4, pc}
   169c8:	20007f50 	.word	0x20007f50

000169cc <conf_handler_lookup>:
{
   169cc:	b538      	push	{r3, r4, r5, lr}
   169ce:	4605      	mov	r5, r0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   169d0:	4b05      	ldr	r3, [pc, #20]	; (169e8 <conf_handler_lookup+0x1c>)
   169d2:	681c      	ldr	r4, [r3, #0]
   169d4:	b134      	cbz	r4, 169e4 <conf_handler_lookup+0x18>
        if (!strcmp(name, ch->ch_name)) {
   169d6:	6861      	ldr	r1, [r4, #4]
   169d8:	4628      	mov	r0, r5
   169da:	f7f4 ffa9 	bl	b930 <strcmp>
   169de:	b108      	cbz	r0, 169e4 <conf_handler_lookup+0x18>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   169e0:	6824      	ldr	r4, [r4, #0]
   169e2:	e7f7      	b.n	169d4 <conf_handler_lookup+0x8>
}
   169e4:	4620      	mov	r0, r4
   169e6:	bd38      	pop	{r3, r4, r5, pc}
   169e8:	20007f50 	.word	0x20007f50

000169ec <conf_parse_name>:
{
   169ec:	b570      	push	{r4, r5, r6, lr}
   169ee:	b082      	sub	sp, #8
   169f0:	460e      	mov	r6, r1
   169f2:	4615      	mov	r5, r2
    tok = strtok_r(name, sep, &tok_ptr);
   169f4:	aa01      	add	r2, sp, #4
   169f6:	4909      	ldr	r1, [pc, #36]	; (16a1c <conf_parse_name+0x30>)
   169f8:	f005 fbb4 	bl	1c164 <strtok_r>
    i = 0;
   169fc:	2300      	movs	r3, #0
    while (tok) {
   169fe:	e008      	b.n	16a12 <conf_parse_name+0x26>
        name_argv[i++] = tok;
   16a00:	1c5c      	adds	r4, r3, #1
   16a02:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
   16a06:	aa01      	add	r2, sp, #4
   16a08:	4904      	ldr	r1, [pc, #16]	; (16a1c <conf_parse_name+0x30>)
   16a0a:	2000      	movs	r0, #0
   16a0c:	f005 fbaa 	bl	1c164 <strtok_r>
        name_argv[i++] = tok;
   16a10:	4623      	mov	r3, r4
    while (tok) {
   16a12:	2800      	cmp	r0, #0
   16a14:	d1f4      	bne.n	16a00 <conf_parse_name+0x14>
    *name_argc = i;
   16a16:	6033      	str	r3, [r6, #0]
}
   16a18:	b002      	add	sp, #8
   16a1a:	bd70      	pop	{r4, r5, r6, pc}
   16a1c:	000291f4 	.word	0x000291f4

00016a20 <conf_parse_and_lookup>:
{
   16a20:	b510      	push	{r4, lr}
   16a22:	4614      	mov	r4, r2
    rc = conf_parse_name(name, name_argc, name_argv);
   16a24:	f7ff ffe2 	bl	169ec <conf_parse_name>
    if (rc) {
   16a28:	b918      	cbnz	r0, 16a32 <conf_parse_and_lookup+0x12>
    return conf_handler_lookup(name_argv[0]);
   16a2a:	6820      	ldr	r0, [r4, #0]
   16a2c:	f7ff ffce 	bl	169cc <conf_handler_lookup>
}
   16a30:	bd10      	pop	{r4, pc}
        return NULL;
   16a32:	2000      	movs	r0, #0
   16a34:	e7fc      	b.n	16a30 <conf_parse_and_lookup+0x10>

00016a36 <conf_value_from_str>:
    if (!val_str) {
   16a36:	2800      	cmp	r0, #0
   16a38:	f000 8092 	beq.w	16b60 <conf_value_from_str+0x12a>
{
   16a3c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   16a40:	b082      	sub	sp, #8
   16a42:	4605      	mov	r5, r0
   16a44:	461e      	mov	r6, r3
   16a46:	4617      	mov	r7, r2
   16a48:	460c      	mov	r4, r1
    switch (type) {
   16a4a:	3902      	subs	r1, #2
   16a4c:	290c      	cmp	r1, #12
   16a4e:	f200 8089 	bhi.w	16b64 <conf_value_from_str+0x12e>
   16a52:	e8df f001 	tbb	[pc, r1]
   16a56:	0707      	.short	0x0707
   16a58:	87730707 	.word	0x87730707
   16a5c:	4a078787 	.word	0x4a078787
   16a60:	4a4a      	.short	0x4a4a
   16a62:	4a          	.byte	0x4a
   16a63:	00          	.byte	0x00
        val = strtoll(val_str, &eptr, 0);
   16a64:	2200      	movs	r2, #0
   16a66:	a901      	add	r1, sp, #4
   16a68:	f005 fb8c 	bl	1c184 <strtoll>
        if (*eptr != '\0') {
   16a6c:	9b01      	ldr	r3, [sp, #4]
   16a6e:	781b      	ldrb	r3, [r3, #0]
   16a70:	2b00      	cmp	r3, #0
   16a72:	d17b      	bne.n	16b6c <conf_value_from_str+0x136>
        if (type == CONF_BOOL) {
   16a74:	2c0a      	cmp	r4, #10
   16a76:	d009      	beq.n	16a8c <conf_value_from_str+0x56>
        } else if (type == CONF_INT8) {
   16a78:	2c02      	cmp	r4, #2
   16a7a:	d013      	beq.n	16aa4 <conf_value_from_str+0x6e>
        } else if (type == CONF_INT16) {
   16a7c:	2c03      	cmp	r4, #3
   16a7e:	d01d      	beq.n	16abc <conf_value_from_str+0x86>
        } else if (type == CONF_INT32) {
   16a80:	2c04      	cmp	r4, #4
   16a82:	d027      	beq.n	16ad4 <conf_value_from_str+0x9e>
            *(int64_t *)vp = val;
   16a84:	e9c7 0100 	strd	r0, r1, [r7]
    return 0;
   16a88:	2000      	movs	r0, #0
   16a8a:	e06c      	b.n	16b66 <conf_value_from_str+0x130>
            if (val < 0 || val > 1) {
   16a8c:	2900      	cmp	r1, #0
   16a8e:	bf08      	it	eq
   16a90:	2802      	cmpeq	r0, #2
   16a92:	d26d      	bcs.n	16b70 <conf_value_from_str+0x13a>
            *(bool *)vp = val;
   16a94:	ea50 0301 	orrs.w	r3, r0, r1
   16a98:	bf14      	ite	ne
   16a9a:	2301      	movne	r3, #1
   16a9c:	2300      	moveq	r3, #0
   16a9e:	703b      	strb	r3, [r7, #0]
    return 0;
   16aa0:	2000      	movs	r0, #0
   16aa2:	e060      	b.n	16b66 <conf_value_from_str+0x130>
            if (val < INT8_MIN || val > INT8_MAX) {
   16aa4:	f110 0280 	adds.w	r2, r0, #128	; 0x80
   16aa8:	f141 0300 	adc.w	r3, r1, #0
   16aac:	2b00      	cmp	r3, #0
   16aae:	bf08      	it	eq
   16ab0:	f5b2 7f80 	cmpeq.w	r2, #256	; 0x100
   16ab4:	d25e      	bcs.n	16b74 <conf_value_from_str+0x13e>
            *(int8_t *)vp = val;
   16ab6:	7038      	strb	r0, [r7, #0]
    return 0;
   16ab8:	2000      	movs	r0, #0
   16aba:	e054      	b.n	16b66 <conf_value_from_str+0x130>
            if (val < INT16_MIN || val > INT16_MAX) {
   16abc:	f510 4200 	adds.w	r2, r0, #32768	; 0x8000
   16ac0:	f141 0300 	adc.w	r3, r1, #0
   16ac4:	2b00      	cmp	r3, #0
   16ac6:	bf08      	it	eq
   16ac8:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
   16acc:	d254      	bcs.n	16b78 <conf_value_from_str+0x142>
            *(int16_t *)vp = val;
   16ace:	8038      	strh	r0, [r7, #0]
    return 0;
   16ad0:	2000      	movs	r0, #0
   16ad2:	e048      	b.n	16b66 <conf_value_from_str+0x130>
            if (val < INT32_MIN || val > INT32_MAX) {
   16ad4:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
   16ad8:	f141 0300 	adc.w	r3, r1, #0
   16adc:	2b01      	cmp	r3, #1
   16ade:	bf08      	it	eq
   16ae0:	2a00      	cmpeq	r2, #0
   16ae2:	d24b      	bcs.n	16b7c <conf_value_from_str+0x146>
            *(int32_t *)vp = val;
   16ae4:	6038      	str	r0, [r7, #0]
    return 0;
   16ae6:	2000      	movs	r0, #0
   16ae8:	e03d      	b.n	16b66 <conf_value_from_str+0x130>
        uval = strtoull(val_str, &eptr, 0);
   16aea:	2200      	movs	r2, #0
   16aec:	a901      	add	r1, sp, #4
   16aee:	f005 fb4f 	bl	1c190 <strtoull>
        if (*eptr != '\0') {
   16af2:	9b01      	ldr	r3, [sp, #4]
   16af4:	781b      	ldrb	r3, [r3, #0]
   16af6:	2b00      	cmp	r3, #0
   16af8:	d142      	bne.n	16b80 <conf_value_from_str+0x14a>
        if (type == CONF_UINT8) {
   16afa:	2c0b      	cmp	r4, #11
   16afc:	d007      	beq.n	16b0e <conf_value_from_str+0xd8>
        } else if (type == CONF_UINT16) {
   16afe:	2c0c      	cmp	r4, #12
   16b00:	d00d      	beq.n	16b1e <conf_value_from_str+0xe8>
        } else if (type == CONF_UINT32) {
   16b02:	2c0d      	cmp	r4, #13
   16b04:	d013      	beq.n	16b2e <conf_value_from_str+0xf8>
            *(uint64_t *)vp = uval;
   16b06:	e9c7 0100 	strd	r0, r1, [r7]
    return 0;
   16b0a:	2000      	movs	r0, #0
   16b0c:	e02b      	b.n	16b66 <conf_value_from_str+0x130>
            if (uval > UINT8_MAX) {
   16b0e:	2900      	cmp	r1, #0
   16b10:	bf08      	it	eq
   16b12:	f5b0 7f80 	cmpeq.w	r0, #256	; 0x100
   16b16:	d235      	bcs.n	16b84 <conf_value_from_str+0x14e>
            *(uint8_t *)vp = uval;
   16b18:	7038      	strb	r0, [r7, #0]
    return 0;
   16b1a:	2000      	movs	r0, #0
   16b1c:	e023      	b.n	16b66 <conf_value_from_str+0x130>
            if (uval > UINT16_MAX) {
   16b1e:	2900      	cmp	r1, #0
   16b20:	bf08      	it	eq
   16b22:	f5b0 3f80 	cmpeq.w	r0, #65536	; 0x10000
   16b26:	d22f      	bcs.n	16b88 <conf_value_from_str+0x152>
            *(uint16_t *)vp = uval;
   16b28:	8038      	strh	r0, [r7, #0]
    return 0;
   16b2a:	2000      	movs	r0, #0
   16b2c:	e01b      	b.n	16b66 <conf_value_from_str+0x130>
            if (uval > UINT32_MAX) {
   16b2e:	2901      	cmp	r1, #1
   16b30:	bf08      	it	eq
   16b32:	2800      	cmpeq	r0, #0
   16b34:	d22a      	bcs.n	16b8c <conf_value_from_str+0x156>
            *(uint32_t *)vp = uval;
   16b36:	6038      	str	r0, [r7, #0]
    return 0;
   16b38:	2000      	movs	r0, #0
   16b3a:	e014      	b.n	16b66 <conf_value_from_str+0x130>
        val = strlen(val_str);
   16b3c:	f7f4 ff06 	bl	b94c <strlen>
   16b40:	2100      	movs	r1, #0
        if (val + 1 > maxlen) {
   16b42:	f110 0b01 	adds.w	fp, r0, #1
   16b46:	f141 0c00 	adc.w	ip, r1, #0
   16b4a:	17f3      	asrs	r3, r6, #31
   16b4c:	455e      	cmp	r6, fp
   16b4e:	eb73 030c 	sbcs.w	r3, r3, ip
   16b52:	db1d      	blt.n	16b90 <conf_value_from_str+0x15a>
        strcpy(vp, val_str);
   16b54:	4629      	mov	r1, r5
   16b56:	4638      	mov	r0, r7
   16b58:	f005 fada 	bl	1c110 <strcpy>
    return 0;
   16b5c:	2000      	movs	r0, #0
        break;
   16b5e:	e002      	b.n	16b66 <conf_value_from_str+0x130>
    return OS_INVALID_PARM;
   16b60:	2003      	movs	r0, #3
}
   16b62:	4770      	bx	lr
    return OS_INVALID_PARM;
   16b64:	2003      	movs	r0, #3
}
   16b66:	b002      	add	sp, #8
   16b68:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
    return OS_INVALID_PARM;
   16b6c:	2003      	movs	r0, #3
   16b6e:	e7fa      	b.n	16b66 <conf_value_from_str+0x130>
   16b70:	2003      	movs	r0, #3
   16b72:	e7f8      	b.n	16b66 <conf_value_from_str+0x130>
   16b74:	2003      	movs	r0, #3
   16b76:	e7f6      	b.n	16b66 <conf_value_from_str+0x130>
   16b78:	2003      	movs	r0, #3
   16b7a:	e7f4      	b.n	16b66 <conf_value_from_str+0x130>
   16b7c:	2003      	movs	r0, #3
   16b7e:	e7f2      	b.n	16b66 <conf_value_from_str+0x130>
   16b80:	2003      	movs	r0, #3
   16b82:	e7f0      	b.n	16b66 <conf_value_from_str+0x130>
   16b84:	2003      	movs	r0, #3
   16b86:	e7ee      	b.n	16b66 <conf_value_from_str+0x130>
   16b88:	2003      	movs	r0, #3
   16b8a:	e7ec      	b.n	16b66 <conf_value_from_str+0x130>
   16b8c:	2003      	movs	r0, #3
   16b8e:	e7ea      	b.n	16b66 <conf_value_from_str+0x130>
   16b90:	2003      	movs	r0, #3
   16b92:	e7e8      	b.n	16b66 <conf_value_from_str+0x130>

00016b94 <conf_str_from_value>:
    if (type == CONF_STRING) {
   16b94:	2806      	cmp	r0, #6
   16b96:	d04b      	beq.n	16c30 <conf_str_from_value+0x9c>
{
   16b98:	b570      	push	{r4, r5, r6, lr}
   16b9a:	b082      	sub	sp, #8
   16b9c:	4616      	mov	r6, r2
   16b9e:	460c      	mov	r4, r1
    switch (type) {
   16ba0:	1e85      	subs	r5, r0, #2
   16ba2:	2d0c      	cmp	r5, #12
   16ba4:	d846      	bhi.n	16c34 <conf_str_from_value+0xa0>
   16ba6:	e8df f005 	tbb	[pc, r5]
   16baa:	0707      	.short	0x0707
   16bac:	45450707 	.word	0x45450707
   16bb0:	29074545 	.word	0x29074545
   16bb4:	2929      	.short	0x2929
   16bb6:	29          	.byte	0x29
   16bb7:	00          	.byte	0x00
        if (type == CONF_BOOL) {
   16bb8:	280a      	cmp	r0, #10
   16bba:	d008      	beq.n	16bce <conf_str_from_value+0x3a>
        } else if (type == CONF_INT8) {
   16bbc:	2802      	cmp	r0, #2
   16bbe:	d012      	beq.n	16be6 <conf_str_from_value+0x52>
        } else if (type == CONF_INT16) {
   16bc0:	2803      	cmp	r0, #3
   16bc2:	d014      	beq.n	16bee <conf_str_from_value+0x5a>
        } else if (type == CONF_INT32) {
   16bc4:	2804      	cmp	r0, #4
   16bc6:	d016      	beq.n	16bf6 <conf_str_from_value+0x62>
            val = *(int64_t *)vp;
   16bc8:	e9d1 0100 	ldrd	r0, r1, [r1]
   16bcc:	e001      	b.n	16bd2 <conf_str_from_value+0x3e>
            val = *(bool *)vp;
   16bce:	7820      	ldrb	r0, [r4, #0]
   16bd0:	2100      	movs	r1, #0
        snprintf(buf, buf_len, "%lld", val);
   16bd2:	e9cd 0100 	strd	r0, r1, [sp]
   16bd6:	4a18      	ldr	r2, [pc, #96]	; (16c38 <conf_str_from_value+0xa4>)
   16bd8:	4619      	mov	r1, r3
   16bda:	4630      	mov	r0, r6
   16bdc:	f7f5 f9e1 	bl	bfa2 <snprintf>
        return buf;
   16be0:	4630      	mov	r0, r6
}
   16be2:	b002      	add	sp, #8
   16be4:	bd70      	pop	{r4, r5, r6, pc}
            val = *(int8_t *)vp;
   16be6:	f994 0000 	ldrsb.w	r0, [r4]
   16bea:	17c1      	asrs	r1, r0, #31
   16bec:	e7f1      	b.n	16bd2 <conf_str_from_value+0x3e>
            val = *(int16_t *)vp;
   16bee:	f9b4 0000 	ldrsh.w	r0, [r4]
   16bf2:	17c1      	asrs	r1, r0, #31
   16bf4:	e7ed      	b.n	16bd2 <conf_str_from_value+0x3e>
            val = *(int32_t *)vp;
   16bf6:	6808      	ldr	r0, [r1, #0]
   16bf8:	17c1      	asrs	r1, r0, #31
   16bfa:	e7ea      	b.n	16bd2 <conf_str_from_value+0x3e>
        if (type == CONF_UINT8) {
   16bfc:	280b      	cmp	r0, #11
   16bfe:	d006      	beq.n	16c0e <conf_str_from_value+0x7a>
        } else if (type == CONF_UINT16) {
   16c00:	280c      	cmp	r0, #12
   16c02:	d00f      	beq.n	16c24 <conf_str_from_value+0x90>
        } else if (type == CONF_UINT32) {
   16c04:	280d      	cmp	r0, #13
   16c06:	d010      	beq.n	16c2a <conf_str_from_value+0x96>
            uval = *(uint64_t *)vp;
   16c08:	e9d1 0100 	ldrd	r0, r1, [r1]
   16c0c:	e001      	b.n	16c12 <conf_str_from_value+0x7e>
            uval = *(uint8_t *)vp;
   16c0e:	7820      	ldrb	r0, [r4, #0]
   16c10:	2100      	movs	r1, #0
        snprintf(buf, buf_len, "%llu", uval);
   16c12:	e9cd 0100 	strd	r0, r1, [sp]
   16c16:	4a09      	ldr	r2, [pc, #36]	; (16c3c <conf_str_from_value+0xa8>)
   16c18:	4619      	mov	r1, r3
   16c1a:	4630      	mov	r0, r6
   16c1c:	f7f5 f9c1 	bl	bfa2 <snprintf>
        return buf;
   16c20:	4630      	mov	r0, r6
   16c22:	e7de      	b.n	16be2 <conf_str_from_value+0x4e>
            uval = *(uint16_t *)vp;
   16c24:	8820      	ldrh	r0, [r4, #0]
   16c26:	2100      	movs	r1, #0
   16c28:	e7f3      	b.n	16c12 <conf_str_from_value+0x7e>
            uval = *(uint32_t *)vp;
   16c2a:	6808      	ldr	r0, [r1, #0]
   16c2c:	2100      	movs	r1, #0
   16c2e:	e7f0      	b.n	16c12 <conf_str_from_value+0x7e>
        return vp;
   16c30:	4608      	mov	r0, r1
}
   16c32:	4770      	bx	lr
        return NULL;
   16c34:	2000      	movs	r0, #0
   16c36:	e7d4      	b.n	16be2 <conf_str_from_value+0x4e>
   16c38:	000291f8 	.word	0x000291f8
   16c3c:	00029200 	.word	0x00029200

00016c40 <conf_set_value>:
    return 0;
}

int
conf_set_value(char *name, char *val_str)
{
   16c40:	b530      	push	{r4, r5, lr}
   16c42:	b08b      	sub	sp, #44	; 0x2c
   16c44:	4604      	mov	r4, r0
   16c46:	460d      	mov	r5, r1
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
   16c48:	f7ff fea0 	bl	1698c <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   16c4c:	aa01      	add	r2, sp, #4
   16c4e:	a909      	add	r1, sp, #36	; 0x24
   16c50:	4620      	mov	r0, r4
   16c52:	f7ff fee5 	bl	16a20 <conf_parse_and_lookup>
    if (!ch) {
   16c56:	b158      	cbz	r0, 16c70 <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }

    rc = conf_set_cb(ch, name_argc - 1, &name_argv[1], val_str);
   16c58:	462b      	mov	r3, r5
   16c5a:	aa02      	add	r2, sp, #8
   16c5c:	9909      	ldr	r1, [sp, #36]	; 0x24
   16c5e:	3901      	subs	r1, #1
   16c60:	f7ff fe54 	bl	1690c <conf_set_cb>
   16c64:	4604      	mov	r4, r0

out:
    conf_unlock();
   16c66:	f7ff fe9b 	bl	169a0 <conf_unlock>
    return rc;
}
   16c6a:	4620      	mov	r0, r4
   16c6c:	b00b      	add	sp, #44	; 0x2c
   16c6e:	bd30      	pop	{r4, r5, pc}
        rc = OS_INVALID_PARM;
   16c70:	2403      	movs	r4, #3
   16c72:	e7f8      	b.n	16c66 <conf_set_value+0x26>

00016c74 <conf_commit>:
}


int
conf_commit(char *name)
{
   16c74:	b530      	push	{r4, r5, lr}
   16c76:	b08b      	sub	sp, #44	; 0x2c
   16c78:	4604      	mov	r4, r0
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   16c7a:	f7ff fe87 	bl	1698c <conf_lock>
    if (name) {
   16c7e:	b16c      	cbz	r4, 16c9c <conf_commit+0x28>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   16c80:	aa01      	add	r2, sp, #4
   16c82:	a909      	add	r1, sp, #36	; 0x24
   16c84:	4620      	mov	r0, r4
   16c86:	f7ff fecb 	bl	16a20 <conf_parse_and_lookup>
        if (!ch) {
   16c8a:	b1c0      	cbz	r0, 16cbe <conf_commit+0x4a>
            rc = OS_INVALID_PARM;
            goto out;
        }
        rc = conf_commit_cb(ch);
   16c8c:	f7ff fe53 	bl	16936 <conf_commit_cb>
   16c90:	4605      	mov	r5, r0
                }
            }
        }
    }
out:
    conf_unlock();
   16c92:	f7ff fe85 	bl	169a0 <conf_unlock>
    return rc;
}
   16c96:	4628      	mov	r0, r5
   16c98:	b00b      	add	sp, #44	; 0x2c
   16c9a:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   16c9c:	4b09      	ldr	r3, [pc, #36]	; (16cc4 <conf_commit+0x50>)
   16c9e:	681c      	ldr	r4, [r3, #0]
        rc = 0;
   16ca0:	2500      	movs	r5, #0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   16ca2:	e000      	b.n	16ca6 <conf_commit+0x32>
   16ca4:	6824      	ldr	r4, [r4, #0]
   16ca6:	2c00      	cmp	r4, #0
   16ca8:	d0f3      	beq.n	16c92 <conf_commit+0x1e>
            if (ch->ch_commit) {
   16caa:	6963      	ldr	r3, [r4, #20]
   16cac:	2b00      	cmp	r3, #0
   16cae:	d0f9      	beq.n	16ca4 <conf_commit+0x30>
                rc2 = conf_commit_cb(ch);
   16cb0:	4620      	mov	r0, r4
   16cb2:	f7ff fe40 	bl	16936 <conf_commit_cb>
                if (!rc) {
   16cb6:	2d00      	cmp	r5, #0
   16cb8:	d1f4      	bne.n	16ca4 <conf_commit+0x30>
                    rc = rc2;
   16cba:	4605      	mov	r5, r0
   16cbc:	e7f2      	b.n	16ca4 <conf_commit+0x30>
            rc = OS_INVALID_PARM;
   16cbe:	2503      	movs	r5, #3
   16cc0:	e7e7      	b.n	16c92 <conf_commit+0x1e>
   16cc2:	bf00      	nop
   16cc4:	20007f50 	.word	0x20007f50

00016cc8 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   16cc8:	b410      	push	{r4}
    int i;

    if (flash_map == NULL) {
   16cca:	4b0c      	ldr	r3, [pc, #48]	; (16cfc <flash_area_find_idx+0x34>)
   16ccc:	681c      	ldr	r4, [r3, #0]
   16cce:	b194      	cbz	r4, 16cf6 <flash_area_find_idx+0x2e>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   16cd0:	2300      	movs	r3, #0
   16cd2:	4a0b      	ldr	r2, [pc, #44]	; (16d00 <flash_area_find_idx+0x38>)
   16cd4:	6812      	ldr	r2, [r2, #0]
   16cd6:	429a      	cmp	r2, r3
   16cd8:	dd07      	ble.n	16cea <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   16cda:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   16cde:	008a      	lsls	r2, r1, #2
   16ce0:	5ca2      	ldrb	r2, [r4, r2]
   16ce2:	4282      	cmp	r2, r0
   16ce4:	d003      	beq.n	16cee <flash_area_find_idx+0x26>
    for (i = 0; i < flash_map_entries; i++) {
   16ce6:	3301      	adds	r3, #1
   16ce8:	e7f3      	b.n	16cd2 <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   16cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   16cee:	4618      	mov	r0, r3
   16cf0:	f85d 4b04 	ldr.w	r4, [sp], #4
   16cf4:	4770      	bx	lr
        return -1;
   16cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16cfa:	e7f8      	b.n	16cee <flash_area_find_idx+0x26>
   16cfc:	20007f60 	.word	0x20007f60
   16d00:	20007f64 	.word	0x20007f64

00016d04 <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   16d04:	2300      	movs	r3, #0
   16d06:	4a13      	ldr	r2, [pc, #76]	; (16d54 <flash_map_area_overlaps+0x50>)
   16d08:	6812      	ldr	r2, [r2, #0]
   16d0a:	429a      	cmp	r2, r3
   16d0c:	dd1f      	ble.n	16d4e <flash_map_area_overlaps+0x4a>
{
   16d0e:	b430      	push	{r4, r5}
   16d10:	e004      	b.n	16d1c <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   16d12:	3301      	adds	r3, #1
   16d14:	4a0f      	ldr	r2, [pc, #60]	; (16d54 <flash_map_area_overlaps+0x50>)
   16d16:	6812      	ldr	r2, [r2, #0]
   16d18:	429a      	cmp	r2, r3
   16d1a:	dd15      	ble.n	16d48 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   16d1c:	4a0e      	ldr	r2, [pc, #56]	; (16d58 <flash_map_area_overlaps+0x54>)
   16d1e:	6812      	ldr	r2, [r2, #0]
   16d20:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   16d24:	00a1      	lsls	r1, r4, #2
   16d26:	440a      	add	r2, r1

        if (area1->fa_device_id == area2->fa_device_id) {
   16d28:	7844      	ldrb	r4, [r0, #1]
   16d2a:	7851      	ldrb	r1, [r2, #1]
   16d2c:	428c      	cmp	r4, r1
   16d2e:	d1f0      	bne.n	16d12 <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   16d30:	6845      	ldr	r5, [r0, #4]
   16d32:	6881      	ldr	r1, [r0, #8]
   16d34:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   16d36:	6854      	ldr	r4, [r2, #4]
   16d38:	6892      	ldr	r2, [r2, #8]
   16d3a:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   16d3c:	428c      	cmp	r4, r1
   16d3e:	d2e8      	bcs.n	16d12 <flash_map_area_overlaps+0xe>
   16d40:	4295      	cmp	r5, r2
   16d42:	d2e6      	bcs.n	16d12 <flash_map_area_overlaps+0xe>
                return true;
   16d44:	2001      	movs	r0, #1
   16d46:	e000      	b.n	16d4a <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   16d48:	2000      	movs	r0, #0
}
   16d4a:	bc30      	pop	{r4, r5}
   16d4c:	4770      	bx	lr
    return false;
   16d4e:	2000      	movs	r0, #0
}
   16d50:	4770      	bx	lr
   16d52:	bf00      	nop
   16d54:	20007f64 	.word	0x20007f64
   16d58:	20007f60 	.word	0x20007f60

00016d5c <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   16d5c:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   16d5e:	2400      	movs	r4, #0
   16d60:	e00a      	b.n	16d78 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   16d62:	f7f1 fa2d 	bl	81c0 <hal_debugger_connected>
   16d66:	b100      	cbz	r0, 16d6a <flash_map_add_new_dflt_areas+0xe>
   16d68:	be01      	bkpt	0x0001
   16d6a:	2300      	movs	r3, #0
   16d6c:	461a      	mov	r2, r3
   16d6e:	4619      	mov	r1, r3
   16d70:	4618      	mov	r0, r3
   16d72:	f7f2 fe2d 	bl	99d0 <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   16d76:	3401      	adds	r4, #1
   16d78:	2c05      	cmp	r4, #5
   16d7a:	dc26      	bgt.n	16dca <flash_map_add_new_dflt_areas+0x6e>
        dflt_area = &sysflash_map_dflt[i];
   16d7c:	0063      	lsls	r3, r4, #1
   16d7e:	4423      	add	r3, r4
   16d80:	009a      	lsls	r2, r3, #2
   16d82:	4b12      	ldr	r3, [pc, #72]	; (16dcc <flash_map_add_new_dflt_areas+0x70>)
   16d84:	18d6      	adds	r6, r2, r3
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   16d86:	5c98      	ldrb	r0, [r3, r2]
   16d88:	f7ff ff9e 	bl	16cc8 <flash_area_find_idx>
   16d8c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16d90:	d1f1      	bne.n	16d76 <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   16d92:	4b0f      	ldr	r3, [pc, #60]	; (16dd0 <flash_map_add_new_dflt_areas+0x74>)
   16d94:	681d      	ldr	r5, [r3, #0]
   16d96:	2d09      	cmp	r5, #9
   16d98:	dce3      	bgt.n	16d62 <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   16d9a:	4630      	mov	r0, r6
   16d9c:	f7ff ffb2 	bl	16d04 <flash_map_area_overlaps>
   16da0:	2800      	cmp	r0, #0
   16da2:	d1e8      	bne.n	16d76 <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   16da4:	4b0b      	ldr	r3, [pc, #44]	; (16dd4 <flash_map_add_new_dflt_areas+0x78>)
   16da6:	681b      	ldr	r3, [r3, #0]
   16da8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   16dac:	00aa      	lsls	r2, r5, #2
   16dae:	4413      	add	r3, r2

                *dst_area = *dflt_area;
   16db0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   16db4:	0091      	lsls	r1, r2, #2
   16db6:	4a05      	ldr	r2, [pc, #20]	; (16dcc <flash_map_add_new_dflt_areas+0x70>)
   16db8:	440a      	add	r2, r1
   16dba:	ca07      	ldmia	r2, {r0, r1, r2}
   16dbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                flash_map_entries++;
   16dc0:	4a03      	ldr	r2, [pc, #12]	; (16dd0 <flash_map_add_new_dflt_areas+0x74>)
   16dc2:	6813      	ldr	r3, [r2, #0]
   16dc4:	3301      	adds	r3, #1
   16dc6:	6013      	str	r3, [r2, #0]
   16dc8:	e7d5      	b.n	16d76 <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   16dca:	bd70      	pop	{r4, r5, r6, pc}
   16dcc:	00029208 	.word	0x00029208
   16dd0:	20007f64 	.word	0x20007f64
   16dd4:	20007f60 	.word	0x20007f60

00016dd8 <flash_map_read_mfg>:
{
   16dd8:	b570      	push	{r4, r5, r6, lr}
   16dda:	b086      	sub	sp, #24
   16ddc:	4605      	mov	r5, r0
   16dde:	460e      	mov	r6, r1
   16de0:	4614      	mov	r4, r2
    *out_num_areas = 0;
   16de2:	2300      	movs	r3, #0
   16de4:	6013      	str	r3, [r2, #0]
    mfg_init();
   16de6:	f000 fa11 	bl	1720c <mfg_init>
    mfg_open(&reader);
   16dea:	a801      	add	r0, sp, #4
   16dec:	f000 fa2e 	bl	1724c <mfg_open>
        if (*out_num_areas >= max_areas) {
   16df0:	6823      	ldr	r3, [r4, #0]
   16df2:	42ab      	cmp	r3, r5
   16df4:	da29      	bge.n	16e4a <flash_map_read_mfg+0x72>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   16df6:	2102      	movs	r1, #2
   16df8:	a801      	add	r0, sp, #4
   16dfa:	f000 f9f0 	bl	171de <mfg_seek_next_with_type>
   16dfe:	4603      	mov	r3, r0
        switch (rc) {
   16e00:	f110 0f0f 	cmn.w	r0, #15
   16e04:	d003      	beq.n	16e0e <flash_map_read_mfg+0x36>
   16e06:	b120      	cbz	r0, 16e12 <flash_map_read_mfg+0x3a>
}
   16e08:	4618      	mov	r0, r3
   16e0a:	b006      	add	sp, #24
   16e0c:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   16e0e:	2300      	movs	r3, #0
   16e10:	e7fa      	b.n	16e08 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   16e12:	a903      	add	r1, sp, #12
   16e14:	a801      	add	r0, sp, #4
   16e16:	f000 f9ef 	bl	171f8 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   16e1a:	4603      	mov	r3, r0
   16e1c:	2800      	cmp	r0, #0
   16e1e:	d1f3      	bne.n	16e08 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   16e20:	6823      	ldr	r3, [r4, #0]
   16e22:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16e26:	009a      	lsls	r2, r3, #2
   16e28:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   16e2a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   16e2e:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   16e30:	f89d 200d 	ldrb.w	r2, [sp, #13]
   16e34:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   16e36:	f8dd 200e 	ldr.w	r2, [sp, #14]
   16e3a:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   16e3c:	f8dd 2012 	ldr.w	r2, [sp, #18]
   16e40:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   16e42:	6823      	ldr	r3, [r4, #0]
   16e44:	3301      	adds	r3, #1
   16e46:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   16e48:	e7d2      	b.n	16df0 <flash_map_read_mfg+0x18>
            return -1;
   16e4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16e4e:	e7db      	b.n	16e08 <flash_map_read_mfg+0x30>

00016e50 <flash_area_open>:
{
   16e50:	b538      	push	{r3, r4, r5, lr}
    if (flash_map == NULL) {
   16e52:	4b0b      	ldr	r3, [pc, #44]	; (16e80 <flash_area_open+0x30>)
   16e54:	681c      	ldr	r4, [r3, #0]
   16e56:	b164      	cbz	r4, 16e72 <flash_area_open+0x22>
   16e58:	460d      	mov	r5, r1
    idx = flash_area_find_idx(id);
   16e5a:	f7ff ff35 	bl	16cc8 <flash_area_find_idx>
    if (idx == -1) {
   16e5e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16e62:	d009      	beq.n	16e78 <flash_area_open+0x28>
    *fap = &flash_map[idx];
   16e64:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16e68:	0083      	lsls	r3, r0, #2
   16e6a:	441c      	add	r4, r3
   16e6c:	602c      	str	r4, [r5, #0]
    return 0;
   16e6e:	2000      	movs	r0, #0
}
   16e70:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
   16e72:	f06f 0006 	mvn.w	r0, #6
   16e76:	e7fb      	b.n	16e70 <flash_area_open+0x20>
        return SYS_ENOENT;
   16e78:	f06f 0003 	mvn.w	r0, #3
   16e7c:	e7f8      	b.n	16e70 <flash_area_open+0x20>
   16e7e:	bf00      	nop
   16e80:	20007f60 	.word	0x20007f60

00016e84 <flash_area_read>:
{
   16e84:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   16e86:	6884      	ldr	r4, [r0, #8]
   16e88:	428c      	cmp	r4, r1
   16e8a:	d308      	bcc.n	16e9e <flash_area_read+0x1a>
   16e8c:	18cd      	adds	r5, r1, r3
   16e8e:	42ac      	cmp	r4, r5
   16e90:	d308      	bcc.n	16ea4 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   16e92:	6844      	ldr	r4, [r0, #4]
   16e94:	4421      	add	r1, r4
   16e96:	7840      	ldrb	r0, [r0, #1]
   16e98:	f003 fa76 	bl	1a388 <hal_flash_read>
}
   16e9c:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   16e9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16ea2:	e7fb      	b.n	16e9c <flash_area_read+0x18>
   16ea4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16ea8:	e7f8      	b.n	16e9c <flash_area_read+0x18>

00016eaa <flash_area_write>:
{
   16eaa:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   16eac:	6884      	ldr	r4, [r0, #8]
   16eae:	428c      	cmp	r4, r1
   16eb0:	d308      	bcc.n	16ec4 <flash_area_write+0x1a>
   16eb2:	18cd      	adds	r5, r1, r3
   16eb4:	42ac      	cmp	r4, r5
   16eb6:	d308      	bcc.n	16eca <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   16eb8:	6844      	ldr	r4, [r0, #4]
   16eba:	4421      	add	r1, r4
   16ebc:	7840      	ldrb	r0, [r0, #1]
   16ebe:	f003 fa8d 	bl	1a3dc <hal_flash_write>
}
   16ec2:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   16ec4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16ec8:	e7fb      	b.n	16ec2 <flash_area_write+0x18>
   16eca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16ece:	e7f8      	b.n	16ec2 <flash_area_write+0x18>

00016ed0 <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
   16ed0:	6883      	ldr	r3, [r0, #8]
   16ed2:	428b      	cmp	r3, r1
   16ed4:	d309      	bcc.n	16eea <flash_area_erase+0x1a>
{
   16ed6:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   16ed8:	188c      	adds	r4, r1, r2
   16eda:	42a3      	cmp	r3, r4
   16edc:	d308      	bcc.n	16ef0 <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   16ede:	6843      	ldr	r3, [r0, #4]
   16ee0:	4419      	add	r1, r3
   16ee2:	7840      	ldrb	r0, [r0, #1]
   16ee4:	f003 fab4 	bl	1a450 <hal_flash_erase>
}
   16ee8:	bd10      	pop	{r4, pc}
        return -1;
   16eea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   16eee:	4770      	bx	lr
        return -1;
   16ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16ef4:	e7f8      	b.n	16ee8 <flash_area_erase+0x18>

00016ef6 <flash_area_align>:
{
   16ef6:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
   16ef8:	7840      	ldrb	r0, [r0, #1]
   16efa:	f003 fa35 	bl	1a368 <hal_flash_align>
}
   16efe:	bd08      	pop	{r3, pc}

00016f00 <flash_area_erased_val>:
{
   16f00:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
   16f02:	7840      	ldrb	r0, [r0, #1]
   16f04:	f003 fa38 	bl	1a378 <hal_flash_erased_val>
}
   16f08:	bd08      	pop	{r3, pc}

00016f0a <flash_area_is_empty>:
{
   16f0a:	b510      	push	{r4, lr}
   16f0c:	460c      	mov	r4, r1
    *empty = false;
   16f0e:	2300      	movs	r3, #0
   16f10:	700b      	strb	r3, [r1, #0]
    rc = hal_flash_isempty_no_buf(fa->fa_device_id, fa->fa_off, fa->fa_size);
   16f12:	6882      	ldr	r2, [r0, #8]
   16f14:	6841      	ldr	r1, [r0, #4]
   16f16:	7840      	ldrb	r0, [r0, #1]
   16f18:	f003 fb4f 	bl	1a5ba <hal_flash_isempty_no_buf>
    if (rc < 0) {
   16f1c:	2800      	cmp	r0, #0
   16f1e:	db02      	blt.n	16f26 <flash_area_is_empty+0x1c>
    } else if (rc == 1) {
   16f20:	2801      	cmp	r0, #1
   16f22:	d001      	beq.n	16f28 <flash_area_is_empty+0x1e>
    return 0;
   16f24:	2000      	movs	r0, #0
}
   16f26:	bd10      	pop	{r4, pc}
        *empty = true;
   16f28:	2301      	movs	r3, #1
   16f2a:	7023      	strb	r3, [r4, #0]
    return 0;
   16f2c:	2000      	movs	r0, #0
   16f2e:	e7fa      	b.n	16f26 <flash_area_is_empty+0x1c>

00016f30 <flash_area_read_is_empty>:
{
   16f30:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   16f32:	6844      	ldr	r4, [r0, #4]
   16f34:	4421      	add	r1, r4
   16f36:	7840      	ldrb	r0, [r0, #1]
   16f38:	f003 fb0e 	bl	1a558 <hal_flash_isempty>
}
   16f3c:	bd10      	pop	{r4, pc}

00016f3e <flash_area_id_from_image_slot>:
    switch (slot) {
   16f3e:	b170      	cbz	r0, 16f5e <flash_area_id_from_image_slot+0x20>
{
   16f40:	b508      	push	{r3, lr}
    switch (slot) {
   16f42:	2801      	cmp	r0, #1
   16f44:	d101      	bne.n	16f4a <flash_area_id_from_image_slot+0xc>
        return FLASH_AREA_IMAGE_1;
   16f46:	2002      	movs	r0, #2
}
   16f48:	bd08      	pop	{r3, pc}
        assert(0);
   16f4a:	f7f1 f939 	bl	81c0 <hal_debugger_connected>
   16f4e:	b100      	cbz	r0, 16f52 <flash_area_id_from_image_slot+0x14>
   16f50:	be01      	bkpt	0x0001
   16f52:	2300      	movs	r3, #0
   16f54:	461a      	mov	r2, r3
   16f56:	4619      	mov	r1, r3
   16f58:	4618      	mov	r0, r3
   16f5a:	f7f2 fd39 	bl	99d0 <__assert_func>
        return FLASH_AREA_IMAGE_0;
   16f5e:	2001      	movs	r0, #1
}
   16f60:	4770      	bx	lr
	...

00016f64 <flash_map_init>:

void
flash_map_init(void)
{
   16f64:	b510      	push	{r4, lr}
   16f66:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16f68:	4b1a      	ldr	r3, [pc, #104]	; (16fd4 <flash_map_init+0x70>)
   16f6a:	781b      	ldrb	r3, [r3, #0]
   16f6c:	b193      	cbz	r3, 16f94 <flash_map_init+0x30>

    rc = hal_flash_init();
   16f6e:	f003 f9e7 	bl	1a340 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16f72:	b9c8      	cbnz	r0, 16fa8 <flash_map_init+0x44>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   16f74:	4b18      	ldr	r3, [pc, #96]	; (16fd8 <flash_map_init+0x74>)
   16f76:	4a19      	ldr	r2, [pc, #100]	; (16fdc <flash_map_init+0x78>)
   16f78:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   16f7a:	4b19      	ldr	r3, [pc, #100]	; (16fe0 <flash_map_init+0x7c>)
   16f7c:	2206      	movs	r2, #6
   16f7e:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   16f80:	aa03      	add	r2, sp, #12
   16f82:	4918      	ldr	r1, [pc, #96]	; (16fe4 <flash_map_init+0x80>)
   16f84:	200a      	movs	r0, #10
   16f86:	f7ff ff27 	bl	16dd8 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc != 0 || num_areas == 0) {
   16f8a:	b908      	cbnz	r0, 16f90 <flash_map_init+0x2c>
   16f8c:	9b03      	ldr	r3, [sp, #12]
   16f8e:	b9c3      	cbnz	r3, 16fc2 <flash_map_init+0x5e>
    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
}
   16f90:	b004      	add	sp, #16
   16f92:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16f94:	f7f1 f914 	bl	81c0 <hal_debugger_connected>
   16f98:	b100      	cbz	r0, 16f9c <flash_map_init+0x38>
   16f9a:	be01      	bkpt	0x0001
   16f9c:	2300      	movs	r3, #0
   16f9e:	461a      	mov	r2, r3
   16fa0:	4619      	mov	r1, r3
   16fa2:	4618      	mov	r0, r3
   16fa4:	f7f2 fd14 	bl	99d0 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16fa8:	f7f1 f90a 	bl	81c0 <hal_debugger_connected>
   16fac:	b100      	cbz	r0, 16fb0 <flash_map_init+0x4c>
   16fae:	be01      	bkpt	0x0001
   16fb0:	2000      	movs	r0, #0
   16fb2:	9000      	str	r0, [sp, #0]
   16fb4:	4b0c      	ldr	r3, [pc, #48]	; (16fe8 <flash_map_init+0x84>)
   16fb6:	681c      	ldr	r4, [r3, #0]
   16fb8:	4603      	mov	r3, r0
   16fba:	4602      	mov	r2, r0
   16fbc:	4601      	mov	r1, r0
   16fbe:	47a0      	blx	r4
   16fc0:	e7d8      	b.n	16f74 <flash_map_init+0x10>
    flash_map = mfg_areas;
   16fc2:	4a05      	ldr	r2, [pc, #20]	; (16fd8 <flash_map_init+0x74>)
   16fc4:	4907      	ldr	r1, [pc, #28]	; (16fe4 <flash_map_init+0x80>)
   16fc6:	6011      	str	r1, [r2, #0]
    flash_map_entries = num_areas;
   16fc8:	4a05      	ldr	r2, [pc, #20]	; (16fe0 <flash_map_init+0x7c>)
   16fca:	6013      	str	r3, [r2, #0]
    flash_map_add_new_dflt_areas();
   16fcc:	f7ff fec6 	bl	16d5c <flash_map_add_new_dflt_areas>
   16fd0:	e7de      	b.n	16f90 <flash_map_init+0x2c>
   16fd2:	bf00      	nop
   16fd4:	20000506 	.word	0x20000506
   16fd8:	20007f60 	.word	0x20007f60
   16fdc:	00029208 	.word	0x00029208
   16fe0:	20007f64 	.word	0x20007f64
   16fe4:	20007f68 	.word	0x20007f68
   16fe8:	200000ec 	.word	0x200000ec

00016fec <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   16fec:	b530      	push	{r4, r5, lr}
   16fee:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   16ff0:	7885      	ldrb	r5, [r0, #2]
   16ff2:	4b21      	ldr	r3, [pc, #132]	; (17078 <mfg_seek_next_aux+0x8c>)
   16ff4:	681b      	ldr	r3, [r3, #0]
   16ff6:	429d      	cmp	r5, r3
   16ff8:	da32      	bge.n	17060 <mfg_seek_next_aux+0x74>
   16ffa:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   16ffc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   17000:	0093      	lsls	r3, r2, #2
   17002:	a901      	add	r1, sp, #4
   17004:	4a1d      	ldr	r2, [pc, #116]	; (1707c <mfg_seek_next_aux+0x90>)
   17006:	5cd0      	ldrb	r0, [r2, r3]
   17008:	f7ff ff22 	bl	16e50 <flash_area_open>
    if (rc != 0) {
   1700c:	bb58      	cbnz	r0, 17066 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1700e:	6862      	ldr	r2, [r4, #4]
   17010:	b9c2      	cbnz	r2, 17044 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   17012:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   17016:	00aa      	lsls	r2, r5, #2
   17018:	4b18      	ldr	r3, [pc, #96]	; (1707c <mfg_seek_next_aux+0x90>)
   1701a:	4413      	add	r3, r2
   1701c:	685b      	ldr	r3, [r3, #4]
   1701e:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   17020:	6861      	ldr	r1, [r4, #4]
   17022:	9801      	ldr	r0, [sp, #4]
   17024:	6883      	ldr	r3, [r0, #8]
   17026:	3b08      	subs	r3, #8
   17028:	4299      	cmp	r1, r3
   1702a:	d310      	bcc.n	1704e <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1702c:	78a3      	ldrb	r3, [r4, #2]
   1702e:	1c59      	adds	r1, r3, #1
   17030:	4a11      	ldr	r2, [pc, #68]	; (17078 <mfg_seek_next_aux+0x8c>)
   17032:	6812      	ldr	r2, [r2, #0]
   17034:	4291      	cmp	r1, r2
   17036:	da19      	bge.n	1706c <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   17038:	2200      	movs	r2, #0
   1703a:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1703c:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1703e:	f06f 0305 	mvn.w	r3, #5
   17042:	e015      	b.n	17070 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   17044:	7863      	ldrb	r3, [r4, #1]
   17046:	4413      	add	r3, r2
   17048:	3302      	adds	r3, #2
   1704a:	6063      	str	r3, [r4, #4]
   1704c:	e7e8      	b.n	17020 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1704e:	2302      	movs	r3, #2
   17050:	4622      	mov	r2, r4
   17052:	f7ff ff17 	bl	16e84 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   17056:	4603      	mov	r3, r0
   17058:	b150      	cbz	r0, 17070 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1705a:	f06f 0304 	mvn.w	r3, #4
   1705e:	e007      	b.n	17070 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   17060:	f06f 0301 	mvn.w	r3, #1
   17064:	e004      	b.n	17070 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   17066:	f06f 0304 	mvn.w	r3, #4
   1706a:	e001      	b.n	17070 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1706c:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   17070:	4618      	mov	r0, r3
   17072:	b003      	add	sp, #12
   17074:	bd30      	pop	{r4, r5, pc}
   17076:	bf00      	nop
   17078:	20007ffc 	.word	0x20007ffc
   1707c:	20007fe4 	.word	0x20007fe4

00017080 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   17080:	b530      	push	{r4, r5, lr}
   17082:	b085      	sub	sp, #20
   17084:	4605      	mov	r5, r0
   17086:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   17088:	a903      	add	r1, sp, #12
   1708a:	f7ff fee1 	bl	16e50 <flash_area_open>
    if (rc != 0) {
   1708e:	b9e8      	cbnz	r0, 170cc <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   17090:	9803      	ldr	r0, [sp, #12]
   17092:	6881      	ldr	r1, [r0, #8]
   17094:	2308      	movs	r3, #8
   17096:	aa01      	add	r2, sp, #4
   17098:	3908      	subs	r1, #8
   1709a:	f7ff fef3 	bl	16e84 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1709e:	4601      	mov	r1, r0
   170a0:	b9b8      	cbnz	r0, 170d2 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   170a2:	9a02      	ldr	r2, [sp, #8]
   170a4:	4b11      	ldr	r3, [pc, #68]	; (170ec <mfg_read_mmr+0x6c>)
   170a6:	429a      	cmp	r2, r3
   170a8:	d116      	bne.n	170d8 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   170aa:	f89d 3006 	ldrb.w	r3, [sp, #6]
   170ae:	2b02      	cmp	r3, #2
   170b0:	d115      	bne.n	170de <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   170b2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   170b6:	9b03      	ldr	r3, [sp, #12]
   170b8:	689b      	ldr	r3, [r3, #8]
   170ba:	429a      	cmp	r2, r3
   170bc:	d812      	bhi.n	170e4 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   170be:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   170c0:	7025      	strb	r5, [r4, #0]
   170c2:	6063      	str	r3, [r4, #4]
   170c4:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   170c6:	4608      	mov	r0, r1
   170c8:	b005      	add	sp, #20
   170ca:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   170cc:	f06f 0104 	mvn.w	r1, #4
   170d0:	e7f9      	b.n	170c6 <mfg_read_mmr+0x46>
        return SYS_EIO;
   170d2:	f06f 0104 	mvn.w	r1, #4
   170d6:	e7f6      	b.n	170c6 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   170d8:	f06f 0108 	mvn.w	r1, #8
   170dc:	e7f3      	b.n	170c6 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   170de:	f06f 010b 	mvn.w	r1, #11
   170e2:	e7f0      	b.n	170c6 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   170e4:	f06f 0108 	mvn.w	r1, #8
   170e8:	e7ed      	b.n	170c6 <mfg_read_mmr+0x46>
   170ea:	bf00      	nop
   170ec:	3bb2a269 	.word	0x3bb2a269

000170f0 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   170f0:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   170f2:	2300      	movs	r3, #0
   170f4:	4a11      	ldr	r2, [pc, #68]	; (1713c <mfg_read_next_mmr+0x4c>)
   170f6:	6812      	ldr	r2, [r2, #0]
   170f8:	429a      	cmp	r2, r3
   170fa:	dd08      	ble.n	1710e <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   170fc:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   17100:	008a      	lsls	r2, r1, #2
   17102:	490f      	ldr	r1, [pc, #60]	; (17140 <mfg_read_next_mmr+0x50>)
   17104:	5c8a      	ldrb	r2, [r1, r2]
   17106:	4282      	cmp	r2, r0
   17108:	d011      	beq.n	1712e <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1710a:	3301      	adds	r3, #1
   1710c:	e7f2      	b.n	170f4 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1710e:	2a01      	cmp	r2, #1
   17110:	dc11      	bgt.n	17136 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   17112:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   17116:	0093      	lsls	r3, r2, #2
   17118:	4909      	ldr	r1, [pc, #36]	; (17140 <mfg_read_next_mmr+0x50>)
   1711a:	4419      	add	r1, r3
   1711c:	f7ff ffb0 	bl	17080 <mfg_read_mmr>
    if (rc != 0) {
   17120:	4603      	mov	r3, r0
   17122:	b930      	cbnz	r0, 17132 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   17124:	4905      	ldr	r1, [pc, #20]	; (1713c <mfg_read_next_mmr+0x4c>)
   17126:	680a      	ldr	r2, [r1, #0]
   17128:	3201      	adds	r2, #1
   1712a:	600a      	str	r2, [r1, #0]
    return 0;
   1712c:	e001      	b.n	17132 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1712e:	f06f 030a 	mvn.w	r3, #10
}
   17132:	4618      	mov	r0, r3
   17134:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   17136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1713a:	e7fa      	b.n	17132 <mfg_read_next_mmr+0x42>
   1713c:	20007ffc 	.word	0x20007ffc
   17140:	20007fe4 	.word	0x20007fe4

00017144 <mfg_open_flash_area>:
{
   17144:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   17146:	7883      	ldrb	r3, [r0, #2]
   17148:	4a0d      	ldr	r2, [pc, #52]	; (17180 <mfg_open_flash_area+0x3c>)
   1714a:	6812      	ldr	r2, [r2, #0]
   1714c:	4293      	cmp	r3, r2
   1714e:	da0a      	bge.n	17166 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   17150:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   17154:	009a      	lsls	r2, r3, #2
   17156:	4b0b      	ldr	r3, [pc, #44]	; (17184 <mfg_open_flash_area+0x40>)
   17158:	5c98      	ldrb	r0, [r3, r2]
   1715a:	f7ff fe79 	bl	16e50 <flash_area_open>
    if (rc != 0) {
   1715e:	4603      	mov	r3, r0
   17160:	b958      	cbnz	r0, 1717a <mfg_open_flash_area+0x36>
}
   17162:	4618      	mov	r0, r3
   17164:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   17166:	f7f1 f82b 	bl	81c0 <hal_debugger_connected>
   1716a:	b100      	cbz	r0, 1716e <mfg_open_flash_area+0x2a>
   1716c:	be01      	bkpt	0x0001
   1716e:	2300      	movs	r3, #0
   17170:	461a      	mov	r2, r3
   17172:	4619      	mov	r1, r3
   17174:	4618      	mov	r0, r3
   17176:	f7f2 fc2b 	bl	99d0 <__assert_func>
        return SYS_EIO;
   1717a:	f06f 0304 	mvn.w	r3, #4
   1717e:	e7f0      	b.n	17162 <mfg_open_flash_area+0x1e>
   17180:	20007ffc 	.word	0x20007ffc
   17184:	20007fe4 	.word	0x20007fe4

00017188 <mfg_read_tlv_body>:
{
   17188:	b570      	push	{r4, r5, r6, lr}
   1718a:	b082      	sub	sp, #8
   1718c:	4606      	mov	r6, r0
   1718e:	460c      	mov	r4, r1
   17190:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   17192:	a901      	add	r1, sp, #4
   17194:	f7ff ffd6 	bl	17144 <mfg_open_flash_area>
    if (rc != 0) {
   17198:	4603      	mov	r3, r0
   1719a:	b110      	cbz	r0, 171a2 <mfg_read_tlv_body+0x1a>
}
   1719c:	4618      	mov	r0, r3
   1719e:	b002      	add	sp, #8
   171a0:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   171a2:	462a      	mov	r2, r5
   171a4:	2100      	movs	r1, #0
   171a6:	4620      	mov	r0, r4
   171a8:	f7f4 fb9b 	bl	b8e2 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   171ac:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   171ae:	6871      	ldr	r1, [r6, #4]
   171b0:	42ab      	cmp	r3, r5
   171b2:	bfa8      	it	ge
   171b4:	462b      	movge	r3, r5
   171b6:	4622      	mov	r2, r4
   171b8:	3102      	adds	r1, #2
   171ba:	9801      	ldr	r0, [sp, #4]
   171bc:	f7ff fe62 	bl	16e84 <flash_area_read>
    if (rc != 0) {
   171c0:	4603      	mov	r3, r0
   171c2:	2800      	cmp	r0, #0
   171c4:	d0ea      	beq.n	1719c <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   171c6:	f06f 0304 	mvn.w	r3, #4
   171ca:	e7e7      	b.n	1719c <mfg_read_tlv_body+0x14>

000171cc <mfg_seek_next>:
{
   171cc:	b510      	push	{r4, lr}
   171ce:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   171d0:	4620      	mov	r0, r4
   171d2:	f7ff ff0b 	bl	16fec <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   171d6:	f110 0f06 	cmn.w	r0, #6
   171da:	d0f9      	beq.n	171d0 <mfg_seek_next+0x4>
}
   171dc:	bd10      	pop	{r4, pc}

000171de <mfg_seek_next_with_type>:
{
   171de:	b538      	push	{r3, r4, r5, lr}
   171e0:	4604      	mov	r4, r0
   171e2:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   171e4:	4620      	mov	r0, r4
   171e6:	f7ff fff1 	bl	171cc <mfg_seek_next>
        if (rc != 0) {
   171ea:	4602      	mov	r2, r0
   171ec:	b910      	cbnz	r0, 171f4 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   171ee:	7823      	ldrb	r3, [r4, #0]
   171f0:	42ab      	cmp	r3, r5
   171f2:	d1f7      	bne.n	171e4 <mfg_seek_next_with_type+0x6>
}
   171f4:	4610      	mov	r0, r2
   171f6:	bd38      	pop	{r3, r4, r5, pc}

000171f8 <mfg_read_tlv_flash_area>:
{
   171f8:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   171fa:	220a      	movs	r2, #10
   171fc:	f7ff ffc4 	bl	17188 <mfg_read_tlv_body>
}
   17200:	bd08      	pop	{r3, pc}

00017202 <mfg_read_tlv_mmr_ref>:
{
   17202:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   17204:	2201      	movs	r2, #1
   17206:	f7ff ffbf 	bl	17188 <mfg_read_tlv_body>
}
   1720a:	bd08      	pop	{r3, pc}

0001720c <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1720c:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1720e:	4b0d      	ldr	r3, [pc, #52]	; (17244 <mfg_init+0x38>)
   17210:	781b      	ldrb	r3, [r3, #0]
   17212:	b94b      	cbnz	r3, 17228 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   17214:	4b0b      	ldr	r3, [pc, #44]	; (17244 <mfg_init+0x38>)
   17216:	2201      	movs	r2, #1
   17218:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1721a:	4b0b      	ldr	r3, [pc, #44]	; (17248 <mfg_init+0x3c>)
   1721c:	781b      	ldrb	r3, [r3, #0]
   1721e:	b123      	cbz	r3, 1722a <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   17220:	2000      	movs	r0, #0
   17222:	f7ff ff65 	bl	170f0 <mfg_read_next_mmr>
    if (rc != 0) {
   17226:	b150      	cbz	r0, 1723e <mfg_init+0x32>

    return;

err:
    MFG_LOG_ERROR("failed to read MMRs: rc=%d", rc);
}
   17228:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1722a:	f7f0 ffc9 	bl	81c0 <hal_debugger_connected>
   1722e:	b100      	cbz	r0, 17232 <mfg_init+0x26>
   17230:	be01      	bkpt	0x0001
   17232:	2300      	movs	r3, #0
   17234:	461a      	mov	r2, r3
   17236:	4619      	mov	r1, r3
   17238:	4618      	mov	r0, r3
   1723a:	f7f2 fbc9 	bl	99d0 <__assert_func>
    rc = mfg_read_mmr_refs();
   1723e:	f000 f80d 	bl	1725c <mfg_read_mmr_refs>
err:
   17242:	e7f1      	b.n	17228 <mfg_init+0x1c>
   17244:	20007fe0 	.word	0x20007fe0
   17248:	20000506 	.word	0x20000506

0001724c <mfg_open>:
{
   1724c:	b510      	push	{r4, lr}
   1724e:	4604      	mov	r4, r0
    mfg_init();
   17250:	f7ff ffdc 	bl	1720c <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   17254:	2300      	movs	r3, #0
   17256:	6023      	str	r3, [r4, #0]
   17258:	6063      	str	r3, [r4, #4]
}
   1725a:	bd10      	pop	{r4, pc}

0001725c <mfg_read_mmr_refs>:
{
   1725c:	b500      	push	{lr}
   1725e:	b085      	sub	sp, #20
    mfg_open(&reader);
   17260:	a801      	add	r0, sp, #4
   17262:	f7ff fff3 	bl	1724c <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   17266:	2104      	movs	r1, #4
   17268:	eb0d 0001 	add.w	r0, sp, r1
   1726c:	f7ff ffb7 	bl	171de <mfg_seek_next_with_type>
   17270:	4603      	mov	r3, r0
        switch (rc) {
   17272:	f110 0f0f 	cmn.w	r0, #15
   17276:	d004      	beq.n	17282 <mfg_read_mmr_refs+0x26>
   17278:	b128      	cbz	r0, 17286 <mfg_read_mmr_refs+0x2a>
}
   1727a:	4618      	mov	r0, r3
   1727c:	b005      	add	sp, #20
   1727e:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   17282:	2300      	movs	r3, #0
   17284:	e7f9      	b.n	1727a <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   17286:	a903      	add	r1, sp, #12
   17288:	a801      	add	r0, sp, #4
   1728a:	f7ff ffba 	bl	17202 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1728e:	4603      	mov	r3, r0
   17290:	2800      	cmp	r0, #0
   17292:	d1f2      	bne.n	1727a <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   17294:	f89d 000c 	ldrb.w	r0, [sp, #12]
   17298:	f7ff ff2a 	bl	170f0 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1729c:	4603      	mov	r3, r0
   1729e:	2800      	cmp	r0, #0
   172a0:	d0e1      	beq.n	17266 <mfg_read_mmr_refs+0xa>
   172a2:	f110 0f0b 	cmn.w	r0, #11
   172a6:	d0de      	beq.n	17266 <mfg_read_mmr_refs+0xa>
   172a8:	e7e7      	b.n	1727a <mfg_read_mmr_refs+0x1e>

000172aa <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   172aa:	b570      	push	{r4, r5, r6, lr}
   172ac:	b082      	sub	sp, #8
   172ae:	460c      	mov	r4, r1
   172b0:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   172b2:	b29d      	uxth	r5, r3
   172b4:	9b07      	ldr	r3, [sp, #28]
   172b6:	9300      	str	r3, [sp, #0]
   172b8:	4603      	mov	r3, r0
   172ba:	9a06      	ldr	r2, [sp, #24]
   172bc:	4629      	mov	r1, r5
   172be:	4620      	mov	r0, r4
   172c0:	f7f3 fc0a 	bl	aad8 <os_mempool_init>
    if (rc != 0) {
   172c4:	b108      	cbz	r0, 172ca <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   172c6:	b002      	add	sp, #8
   172c8:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   172ca:	462b      	mov	r3, r5
   172cc:	9a06      	ldr	r2, [sp, #24]
   172ce:	b292      	uxth	r2, r2
   172d0:	4621      	mov	r1, r4
   172d2:	4630      	mov	r0, r6
   172d4:	f7f2 ffb3 	bl	a23e <os_mbuf_pool_init>
   172d8:	e7f5      	b.n	172c6 <mem_init_mbuf_pool+0x1c>

000172da <mem_split_frag>:
 *                              NULL on failure.
 */
struct os_mbuf *
mem_split_frag(struct os_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   172da:	b570      	push	{r4, r5, r6, lr}
   172dc:	460d      	mov	r5, r1
    struct os_mbuf *frag;
    int rc;

    if (OS_MBUF_PKTLEN(*om) <= max_frag_sz) {
   172de:	6806      	ldr	r6, [r0, #0]
   172e0:	8a31      	ldrh	r1, [r6, #16]
   172e2:	42a9      	cmp	r1, r5
   172e4:	d915      	bls.n	17312 <mem_split_frag+0x38>
   172e6:	4619      	mov	r1, r3
   172e8:	4604      	mov	r4, r0
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
   172ea:	4628      	mov	r0, r5
   172ec:	4790      	blx	r2
    if (frag == NULL) {
   172ee:	4606      	mov	r6, r0
   172f0:	b190      	cbz	r0, 17318 <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = os_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   172f2:	462b      	mov	r3, r5
   172f4:	2200      	movs	r2, #0
   172f6:	6821      	ldr	r1, [r4, #0]
   172f8:	f7f3 f8bc 	bl	a474 <os_mbuf_appendfrom>
    if (rc != 0) {
   172fc:	b960      	cbnz	r0, 17318 <mem_split_frag+0x3e>
        goto err;
    }
    os_mbuf_adj(*om, max_frag_sz);
   172fe:	4629      	mov	r1, r5
   17300:	6820      	ldr	r0, [r4, #0]
   17302:	f7f3 f90e 	bl	a522 <os_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = os_mbuf_trim_front(*om);
   17306:	6820      	ldr	r0, [r4, #0]
   17308:	f7f3 fb26 	bl	a958 <os_mbuf_trim_front>
   1730c:	6020      	str	r0, [r4, #0]
    return frag;

err:
    os_mbuf_free_chain(frag);
    return NULL;
}
   1730e:	4630      	mov	r0, r6
   17310:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
   17312:	2300      	movs	r3, #0
   17314:	6003      	str	r3, [r0, #0]
        return frag;
   17316:	e7fa      	b.n	1730e <mem_split_frag+0x34>
    os_mbuf_free_chain(frag);
   17318:	4630      	mov	r0, r6
   1731a:	f7f2 ffd3 	bl	a2c4 <os_mbuf_free_chain>
    return NULL;
   1731e:	2600      	movs	r6, #0
   17320:	e7f5      	b.n	1730e <mem_split_frag+0x34>

00017322 <sysinit_app>:
void init_sensor_coap(void);
void pinetime_lvgl_mynewt_init(void);

void
sysinit_app(void)
{
   17322:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   17324:	f7f2 fcd8 	bl	9cd8 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   17328:	f7ff fe1c 	bl	16f64 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1732c:	f7f1 ffbc 	bl	92a8 <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
   17330:	f010 f92e 	bl	27590 <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: ble_hci_ram_init (nimble/transport/ram) */
    ble_hci_ram_init();
   17334:	f7ff f9e0 	bl	166f8 <ble_hci_ram_init>
    /* 100.1: mfg_init (sys/mfg) */
    mfg_init();
   17338:	f7ff ff68 	bl	1720c <mfg_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   1733c:	f010 f93d 	bl	275ba <modlog_init>

    /*** Stage 200 */
    /* 200.0: ble_hs_init (nimble/host) */
    ble_hs_init();
   17340:	f7f8 fd8c 	bl	fe5c <ble_hs_init>
    /* 200.1: log_reboot_pkg_init (sys/reboot) */
    log_reboot_pkg_init();
   17344:	f010 fb4e 	bl	279e4 <log_reboot_pkg_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
   17348:	f010 f936 	bl	275b8 <config_pkg_init_stage2>

    /*** Stage 250 */
    /* 250.0: ble_ll_init (nimble/controller) */
    ble_ll_init();
   1734c:	f006 f822 	bl	1d394 <ble_ll_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   17350:	f005 fc76 	bl	1cc40 <oc_init>

    /*** Stage 301 */
    /* 301.0: ble_svc_gap_init (nimble/host/services/gap) */
    ble_svc_gap_init();
   17354:	f7ff f85a 	bl	1640c <ble_svc_gap_init>
    /* 301.1: oc_register_gatt (net/oic) */
    oc_register_gatt();
   17358:	f005 fc8a 	bl	1cc70 <oc_register_gatt>
    /* 301.2: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1735c:	f005 fc89 	bl	1cc72 <oc_register_ip4>
    /* 301.3: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   17360:	f005 fc88 	bl	1cc74 <oc_register_ip6>
    /* 301.4: oc_register_lora (net/oic) */
    oc_register_lora();
   17364:	f005 fc87 	bl	1cc76 <oc_register_lora>
    /* 301.5: oc_register_serial (net/oic) */
    oc_register_serial();
   17368:	f005 fc86 	bl	1cc78 <oc_register_serial>
    /* 301.6: oc_register_tcp4 (net/oic) */
    oc_register_tcp4();
   1736c:	f005 fc85 	bl	1cc7a <oc_register_tcp4>

    /*** Stage 302 */
    /* 302.0: ble_svc_gatt_init (nimble/host/services/gatt) */
    ble_svc_gatt_init();
   17370:	f00f fbd0 	bl	26b14 <ble_svc_gatt_init>

    /*** Stage 303 */
    /* 303.0: ble_svc_ans_init (nimble/host/services/ans) */
    ble_svc_ans_init();
   17374:	f00f fb58 	bl	26a28 <ble_svc_ans_init>
    /* 303.1: ble_svc_dis_init (nimble/host/services/dis) */
    ble_svc_dis_init();
   17378:	f7fe ff6a 	bl	16250 <ble_svc_dis_init>

    /*** Stage 500 */
    /* 500.0: ble_store_config_init (nimble/host/store/config) */
    ble_store_config_init();
   1737c:	f00f fe40 	bl	27000 <ble_store_config_init>
    /* 500.1: imgmgr_module_init (mgmt/imgmgr) */
    imgmgr_module_init();
   17380:	f7f5 f910 	bl	c5a4 <imgmgr_module_init>
    /* 500.2: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   17384:	f004 f9ba 	bl	1b6fc <sensor_dev_create>
    /* 500.3: smp_pkg_init (mgmt/smp) */
    smp_pkg_init();
   17388:	f005 fada 	bl	1c940 <smp_pkg_init>
    /* 500.4: split_app_init (boot/split) */
    split_app_init();
   1738c:	f000 f9ee 	bl	1776c <split_app_init>

    /*** Stage 501 */
    /* 501.0: img_mgmt_module_init (cmd/img_mgmt/port/mynewt) */
    img_mgmt_module_init();
   17390:	f001 f87a 	bl	18488 <img_mgmt_module_init>
    /* 501.1: os_mgmt_module_init (cmd/os_mgmt) */
    os_mgmt_module_init();
   17394:	f001 f9d6 	bl	18744 <os_mgmt_module_init>
    /* 501.2: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   17398:	f004 fb04 	bl	1b9a4 <sensor_pkg_init>
    /* 501.3: smp_ble_pkg_init (mgmt/smp/transport/ble) */
    smp_ble_pkg_init();
   1739c:	f005 fb94 	bl	1cac8 <smp_ble_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   173a0:	f005 f8dc 	bl	1c55c <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   173a4:	f005 f846 	bl	1c434 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   173a8:	f004 ffc4 	bl	1c334 <init_sensor_coap>

    /*** Stage 900 */
    /* 900.0: pinetime_lvgl_mynewt_init (libs/pinetime_lvgl_mynewt) */
    pinetime_lvgl_mynewt_init();
   173ac:	f004 ff9e 	bl	1c2ec <pinetime_lvgl_mynewt_init>
}
   173b0:	bd08      	pop	{r3, pc}

000173b2 <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
   173b2:	2801      	cmp	r0, #1
   173b4:	d101      	bne.n	173ba <boot_flag_decode+0x8>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
   173b6:	2001      	movs	r0, #1
}
   173b8:	4770      	bx	lr
        return BOOT_FLAG_BAD;
   173ba:	2002      	movs	r0, #2
   173bc:	4770      	bx	lr
	...

000173c0 <boot_magic_decode>:
{
   173c0:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   173c2:	2210      	movs	r2, #16
   173c4:	4903      	ldr	r1, [pc, #12]	; (173d4 <boot_magic_decode+0x14>)
   173c6:	f7f4 fa3f 	bl	b848 <memcmp>
   173ca:	b908      	cbnz	r0, 173d0 <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
   173cc:	2001      	movs	r0, #1
}
   173ce:	bd08      	pop	{r3, pc}
    return BOOT_MAGIC_BAD;
   173d0:	2002      	movs	r0, #2
   173d2:	e7fc      	b.n	173ce <boot_magic_decode+0xe>
   173d4:	00029250 	.word	0x00029250

000173d8 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
static int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
   173d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   173dc:	b083      	sub	sp, #12
   173de:	4606      	mov	r6, r0
   173e0:	460f      	mov	r7, r1
   173e2:	4690      	mov	r8, r2
   173e4:	461c      	mov	r4, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
   173e6:	f7ff fd86 	bl	16ef6 <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
   173ea:	2c08      	cmp	r4, #8
   173ec:	d823      	bhi.n	17436 <boot_write_trailer+0x5e>
   173ee:	4605      	mov	r5, r0
   173f0:	2808      	cmp	r0, #8
   173f2:	d823      	bhi.n	1743c <boot_write_trailer+0x64>
        return -1;
    }
    erased_val = flash_area_erased_val(fap);
   173f4:	4630      	mov	r0, r6
   173f6:	f7ff fd83 	bl	16f00 <flash_area_erased_val>
   173fa:	4681      	mov	r9, r0
    if (align < inlen) {
   173fc:	42a5      	cmp	r5, r4
   173fe:	d200      	bcs.n	17402 <boot_write_trailer+0x2a>
        align = inlen;
   17400:	4625      	mov	r5, r4
    }
    memcpy(buf, inbuf, inlen);
   17402:	4622      	mov	r2, r4
   17404:	4641      	mov	r1, r8
   17406:	4668      	mov	r0, sp
   17408:	f7f4 fa42 	bl	b890 <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
   1740c:	1b2a      	subs	r2, r5, r4
   1740e:	fa5f f189 	uxtb.w	r1, r9
   17412:	eb0d 0004 	add.w	r0, sp, r4
   17416:	f7f4 fa64 	bl	b8e2 <memset>

    rc = flash_area_write(fap, off, buf, align);
   1741a:	462b      	mov	r3, r5
   1741c:	466a      	mov	r2, sp
   1741e:	4639      	mov	r1, r7
   17420:	4630      	mov	r0, r6
   17422:	f7ff fd42 	bl	16eaa <flash_area_write>
    if (rc != 0) {
   17426:	4603      	mov	r3, r0
   17428:	b918      	cbnz	r0, 17432 <boot_write_trailer+0x5a>
        return BOOT_EFLASH;
    }

    return 0;
}
   1742a:	4618      	mov	r0, r3
   1742c:	b003      	add	sp, #12
   1742e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BOOT_EFLASH;
   17432:	2301      	movs	r3, #1
   17434:	e7f9      	b.n	1742a <boot_write_trailer+0x52>
        return -1;
   17436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1743a:	e7f6      	b.n	1742a <boot_write_trailer+0x52>
   1743c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17440:	e7f3      	b.n	1742a <boot_write_trailer+0x52>

00017442 <boot_write_trailer_flag>:

static int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
   17442:	b510      	push	{r4, lr}
   17444:	b082      	sub	sp, #8
    const uint8_t buf[1] = { flag_val };
   17446:	ac02      	add	r4, sp, #8
   17448:	f804 2d04 	strb.w	r2, [r4, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
   1744c:	2301      	movs	r3, #1
   1744e:	4622      	mov	r2, r4
   17450:	f7ff ffc2 	bl	173d8 <boot_write_trailer>
}
   17454:	b002      	add	sp, #8
   17456:	bd10      	pop	{r4, pc}

00017458 <boot_magic_compatible_check>:
    switch (tbl_val) {
   17458:	2804      	cmp	r0, #4
   1745a:	d00b      	beq.n	17474 <boot_magic_compatible_check+0x1c>
   1745c:	2805      	cmp	r0, #5
   1745e:	d104      	bne.n	1746a <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
   17460:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
   17464:	bf18      	it	ne
   17466:	2001      	movne	r0, #1
   17468:	4770      	bx	lr
        return tbl_val == val;
   1746a:	4288      	cmp	r0, r1
   1746c:	bf14      	ite	ne
   1746e:	2000      	movne	r0, #0
   17470:	2001      	moveq	r0, #1
   17472:	4770      	bx	lr
        return 1;
   17474:	2001      	movs	r0, #1
}
   17476:	4770      	bx	lr

00017478 <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
   17478:	6880      	ldr	r0, [r0, #8]
}
   1747a:	3828      	subs	r0, #40	; 0x28
   1747c:	4770      	bx	lr

0001747e <boot_read_swap_state>:
{
   1747e:	b530      	push	{r4, r5, lr}
   17480:	b087      	sub	sp, #28
   17482:	4604      	mov	r4, r0
   17484:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
   17486:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
   17488:	2310      	movs	r3, #16
   1748a:	aa02      	add	r2, sp, #8
   1748c:	3910      	subs	r1, #16
   1748e:	f7ff fd4f 	bl	16f30 <flash_area_read_is_empty>
    if (rc < 0) {
   17492:	2800      	cmp	r0, #0
   17494:	db4a      	blt.n	1752c <boot_read_swap_state+0xae>
    if (rc == 1) {
   17496:	2801      	cmp	r0, #1
   17498:	d03e      	beq.n	17518 <boot_read_swap_state+0x9a>
        state->magic = boot_magic_decode(magic);
   1749a:	a802      	add	r0, sp, #8
   1749c:	f7ff ff90 	bl	173c0 <boot_magic_decode>
   174a0:	7028      	strb	r0, [r5, #0]
    off = boot_swap_info_off(fap);
   174a2:	4620      	mov	r0, r4
   174a4:	f7ff ffe8 	bl	17478 <boot_swap_info_off>
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
   174a8:	2301      	movs	r3, #1
   174aa:	f10d 0207 	add.w	r2, sp, #7
   174ae:	4601      	mov	r1, r0
   174b0:	4620      	mov	r0, r4
   174b2:	f7ff fd3d 	bl	16f30 <flash_area_read_is_empty>
    if (rc < 0) {
   174b6:	2800      	cmp	r0, #0
   174b8:	db3b      	blt.n	17532 <boot_read_swap_state+0xb4>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   174ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
   174be:	f003 020f 	and.w	r2, r3, #15
   174c2:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   174c4:	091b      	lsrs	r3, r3, #4
   174c6:	712b      	strb	r3, [r5, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   174c8:	2801      	cmp	r0, #1
   174ca:	d001      	beq.n	174d0 <boot_read_swap_state+0x52>
   174cc:	2a04      	cmp	r2, #4
   174ce:	d903      	bls.n	174d8 <boot_read_swap_state+0x5a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   174d0:	2301      	movs	r3, #1
   174d2:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
   174d4:	2300      	movs	r3, #0
   174d6:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
   174d8:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
   174da:	2301      	movs	r3, #1
   174dc:	1caa      	adds	r2, r5, #2
   174de:	3920      	subs	r1, #32
   174e0:	4620      	mov	r0, r4
   174e2:	f7ff fd25 	bl	16f30 <flash_area_read_is_empty>
    if (rc < 0) {
   174e6:	2800      	cmp	r0, #0
   174e8:	db25      	blt.n	17536 <boot_read_swap_state+0xb8>
    if (rc == 1) {
   174ea:	2801      	cmp	r0, #1
   174ec:	d017      	beq.n	1751e <boot_read_swap_state+0xa0>
        state->copy_done = boot_flag_decode(state->copy_done);
   174ee:	78a8      	ldrb	r0, [r5, #2]
   174f0:	f7ff ff5f 	bl	173b2 <boot_flag_decode>
   174f4:	70a8      	strb	r0, [r5, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
   174f6:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
   174f8:	2301      	movs	r3, #1
   174fa:	1cea      	adds	r2, r5, #3
   174fc:	3918      	subs	r1, #24
   174fe:	4620      	mov	r0, r4
   17500:	f7ff fd16 	bl	16f30 <flash_area_read_is_empty>
    if (rc < 0) {
   17504:	2800      	cmp	r0, #0
   17506:	db18      	blt.n	1753a <boot_read_swap_state+0xbc>
    if (rc == 1) {
   17508:	2801      	cmp	r0, #1
   1750a:	d00b      	beq.n	17524 <boot_read_swap_state+0xa6>
        state->image_ok = boot_flag_decode(state->image_ok);
   1750c:	78e8      	ldrb	r0, [r5, #3]
   1750e:	f7ff ff50 	bl	173b2 <boot_flag_decode>
   17512:	70e8      	strb	r0, [r5, #3]
    return 0;
   17514:	2000      	movs	r0, #0
   17516:	e00a      	b.n	1752e <boot_read_swap_state+0xb0>
        state->magic = BOOT_MAGIC_UNSET;
   17518:	2303      	movs	r3, #3
   1751a:	702b      	strb	r3, [r5, #0]
   1751c:	e7c1      	b.n	174a2 <boot_read_swap_state+0x24>
        state->copy_done = BOOT_FLAG_UNSET;
   1751e:	2303      	movs	r3, #3
   17520:	70ab      	strb	r3, [r5, #2]
   17522:	e7e8      	b.n	174f6 <boot_read_swap_state+0x78>
        state->image_ok = BOOT_FLAG_UNSET;
   17524:	2303      	movs	r3, #3
   17526:	70eb      	strb	r3, [r5, #3]
    return 0;
   17528:	2000      	movs	r0, #0
   1752a:	e000      	b.n	1752e <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
   1752c:	2001      	movs	r0, #1
}
   1752e:	b007      	add	sp, #28
   17530:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   17532:	2001      	movs	r0, #1
   17534:	e7fb      	b.n	1752e <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
   17536:	2001      	movs	r0, #1
   17538:	e7f9      	b.n	1752e <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
   1753a:	2001      	movs	r0, #1
   1753c:	e7f7      	b.n	1752e <boot_read_swap_state+0xb0>

0001753e <boot_read_swap_state_by_id>:
{
   1753e:	b510      	push	{r4, lr}
   17540:	b082      	sub	sp, #8
   17542:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
   17544:	a901      	add	r1, sp, #4
   17546:	b2c0      	uxtb	r0, r0
   17548:	f7ff fc82 	bl	16e50 <flash_area_open>
    if (rc != 0) {
   1754c:	b110      	cbz	r0, 17554 <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
   1754e:	2001      	movs	r0, #1
}
   17550:	b002      	add	sp, #8
   17552:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
   17554:	4621      	mov	r1, r4
   17556:	9801      	ldr	r0, [sp, #4]
   17558:	f7ff ff91 	bl	1747e <boot_read_swap_state>
    return rc;
   1755c:	e7f8      	b.n	17550 <boot_read_swap_state_by_id+0x12>
	...

00017560 <boot_write_magic>:
{
   17560:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   17562:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   17564:	2310      	movs	r3, #16
   17566:	4a05      	ldr	r2, [pc, #20]	; (1757c <boot_write_magic+0x1c>)
   17568:	3910      	subs	r1, #16
   1756a:	f7ff fc9e 	bl	16eaa <flash_area_write>
    if (rc != 0) {
   1756e:	4603      	mov	r3, r0
   17570:	b908      	cbnz	r0, 17576 <boot_write_magic+0x16>
}
   17572:	4618      	mov	r0, r3
   17574:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
   17576:	2301      	movs	r3, #1
   17578:	e7fb      	b.n	17572 <boot_write_magic+0x12>
   1757a:	bf00      	nop
   1757c:	00029250 	.word	0x00029250

00017580 <boot_write_image_ok>:
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
}

int
boot_write_image_ok(const struct flash_area *fap)
{
   17580:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   17582:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   17584:	2201      	movs	r2, #1
   17586:	3918      	subs	r1, #24
   17588:	f7ff ff5b 	bl	17442 <boot_write_trailer_flag>
}
   1758c:	bd08      	pop	{r3, pc}

0001758e <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
   1758e:	b530      	push	{r4, r5, lr}
   17590:	b083      	sub	sp, #12
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   17592:	2a0e      	cmp	r2, #14
   17594:	d811      	bhi.n	175ba <boot_write_swap_info+0x2c>
   17596:	4605      	mov	r5, r0
   17598:	290e      	cmp	r1, #14
   1759a:	d818      	bhi.n	175ce <boot_write_swap_info+0x40>
   1759c:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   175a0:	ac02      	add	r4, sp, #8
   175a2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    off = boot_swap_info_off(fap);
   175a6:	f7ff ff67 	bl	17478 <boot_swap_info_off>
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   175aa:	2301      	movs	r3, #1
   175ac:	4622      	mov	r2, r4
   175ae:	4601      	mov	r1, r0
   175b0:	4628      	mov	r0, r5
   175b2:	f7ff ff11 	bl	173d8 <boot_write_trailer>
}
   175b6:	b003      	add	sp, #12
   175b8:	bd30      	pop	{r4, r5, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   175ba:	f7f0 fe01 	bl	81c0 <hal_debugger_connected>
   175be:	b100      	cbz	r0, 175c2 <boot_write_swap_info+0x34>
   175c0:	be01      	bkpt	0x0001
   175c2:	2300      	movs	r3, #0
   175c4:	461a      	mov	r2, r3
   175c6:	4619      	mov	r1, r3
   175c8:	4618      	mov	r0, r3
   175ca:	f7f2 fa01 	bl	99d0 <__assert_func>
   175ce:	f7f0 fdf7 	bl	81c0 <hal_debugger_connected>
   175d2:	b100      	cbz	r0, 175d6 <boot_write_swap_info+0x48>
   175d4:	be01      	bkpt	0x0001
   175d6:	2300      	movs	r3, #0
   175d8:	461a      	mov	r2, r3
   175da:	4619      	mov	r1, r3
   175dc:	4618      	mov	r0, r3
   175de:	f7f2 f9f7 	bl	99d0 <__assert_func>
	...

000175e4 <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
   175e4:	b530      	push	{r4, r5, lr}
   175e6:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
   175e8:	a902      	add	r1, sp, #8
   175ea:	2001      	movs	r0, #1
   175ec:	f7ff ffa7 	bl	1753e <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
   175f0:	2800      	cmp	r0, #0
   175f2:	d13c      	bne.n	1766e <boot_swap_type_multi+0x8a>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
   175f4:	4669      	mov	r1, sp
   175f6:	2002      	movs	r0, #2
   175f8:	f7ff ffa1 	bl	1753e <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
   175fc:	2800      	cmp	r0, #0
   175fe:	d139      	bne.n	17674 <boot_swap_type_multi+0x90>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   17600:	2400      	movs	r4, #0
   17602:	e007      	b.n	17614 <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   17604:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   17606:	2b04      	cmp	r3, #4
   17608:	d028      	beq.n	1765c <boot_swap_type_multi+0x78>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   1760a:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1760e:	4293      	cmp	r3, r2
   17610:	d024      	beq.n	1765c <boot_swap_type_multi+0x78>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   17612:	3401      	adds	r4, #1
   17614:	2c02      	cmp	r4, #2
   17616:	d828      	bhi.n	1766a <boot_swap_type_multi+0x86>
        table = boot_swap_tables + i;
   17618:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1761c:	0053      	lsls	r3, r2, #1
   1761e:	4a16      	ldr	r2, [pc, #88]	; (17678 <boot_swap_type_multi+0x94>)
   17620:	18d5      	adds	r5, r2, r3
        if (boot_magic_compatible_check(table->magic_primary_slot,
   17622:	f89d 1008 	ldrb.w	r1, [sp, #8]
   17626:	5cd0      	ldrb	r0, [r2, r3]
   17628:	f7ff ff16 	bl	17458 <boot_magic_compatible_check>
   1762c:	2800      	cmp	r0, #0
   1762e:	d0f0      	beq.n	17612 <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
   17630:	f89d 1000 	ldrb.w	r1, [sp]
   17634:	7868      	ldrb	r0, [r5, #1]
   17636:	f7ff ff0f 	bl	17458 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   1763a:	2800      	cmp	r0, #0
   1763c:	d0e9      	beq.n	17612 <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   1763e:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
   17640:	2b04      	cmp	r3, #4
   17642:	d003      	beq.n	1764c <boot_swap_type_multi+0x68>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   17644:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   17648:	4293      	cmp	r3, r2
   1764a:	d1e2      	bne.n	17612 <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   1764c:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   1764e:	2b04      	cmp	r3, #4
   17650:	d0d8      	beq.n	17604 <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   17652:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   17656:	4293      	cmp	r3, r2
   17658:	d1db      	bne.n	17612 <boot_swap_type_multi+0x2e>
   1765a:	e7d3      	b.n	17604 <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
   1765c:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
   1765e:	1e83      	subs	r3, r0, #2
   17660:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
   17662:	2b02      	cmp	r3, #2
   17664:	d904      	bls.n	17670 <boot_swap_type_multi+0x8c>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
   17666:	20ff      	movs	r0, #255	; 0xff
   17668:	e002      	b.n	17670 <boot_swap_type_multi+0x8c>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
   1766a:	2001      	movs	r0, #1
   1766c:	e000      	b.n	17670 <boot_swap_type_multi+0x8c>
        return BOOT_SWAP_TYPE_PANIC;
   1766e:	20ff      	movs	r0, #255	; 0xff
}
   17670:	b005      	add	sp, #20
   17672:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
   17674:	20ff      	movs	r0, #255	; 0xff
   17676:	e7fb      	b.n	17670 <boot_swap_type_multi+0x8c>
   17678:	00029260 	.word	0x00029260

0001767c <boot_swap_type>:
 * This function is not used by the bootloader itself, but its required API
 * by external tooling like mcumgr.
 */
int
boot_swap_type(void)
{
   1767c:	b508      	push	{r3, lr}
    return boot_swap_type_multi(0);
   1767e:	2000      	movs	r0, #0
   17680:	f7ff ffb0 	bl	175e4 <boot_swap_type_multi>
}
   17684:	bd08      	pop	{r3, pc}

00017686 <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   17686:	b510      	push	{r4, lr}
   17688:	b084      	sub	sp, #16
   1768a:	4604      	mov	r4, r0
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(0),
   1768c:	a901      	add	r1, sp, #4
   1768e:	2002      	movs	r0, #2
   17690:	f7ff ff55 	bl	1753e <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
   17694:	4603      	mov	r3, r0
   17696:	bba8      	cbnz	r0, 17704 <boot_set_pending+0x7e>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   17698:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1769c:	2a02      	cmp	r2, #2
   1769e:	d02b      	beq.n	176f8 <boot_set_pending+0x72>
   176a0:	2a03      	cmp	r2, #3
   176a2:	d00b      	beq.n	176bc <boot_set_pending+0x36>
   176a4:	2a01      	cmp	r2, #1
   176a6:	d02d      	beq.n	17704 <boot_set_pending+0x7e>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
   176a8:	f7f0 fd8a 	bl	81c0 <hal_debugger_connected>
   176ac:	b100      	cbz	r0, 176b0 <boot_set_pending+0x2a>
   176ae:	be01      	bkpt	0x0001
   176b0:	2300      	movs	r3, #0
   176b2:	461a      	mov	r2, r3
   176b4:	4619      	mov	r1, r3
   176b6:	4618      	mov	r0, r3
   176b8:	f7f2 f98a 	bl	99d0 <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
   176bc:	a903      	add	r1, sp, #12
   176be:	2002      	movs	r0, #2
   176c0:	f7ff fbc6 	bl	16e50 <flash_area_open>
        if (rc != 0) {
   176c4:	b148      	cbz	r0, 176da <boot_set_pending+0x54>
            rc = BOOT_EFLASH;
   176c6:	2301      	movs	r3, #1
        if (rc == 0) {
   176c8:	b9e3      	cbnz	r3, 17704 <boot_set_pending+0x7e>
            if (permanent) {
   176ca:	b99c      	cbnz	r4, 176f4 <boot_set_pending+0x6e>
                swap_type = BOOT_SWAP_TYPE_TEST;
   176cc:	2102      	movs	r1, #2
            rc = boot_write_swap_info(fap, swap_type, 0);
   176ce:	2200      	movs	r2, #0
   176d0:	9803      	ldr	r0, [sp, #12]
   176d2:	f7ff ff5c 	bl	1758e <boot_write_swap_info>
   176d6:	4603      	mov	r3, r0
   176d8:	e014      	b.n	17704 <boot_set_pending+0x7e>
            rc = boot_write_magic(fap);
   176da:	9803      	ldr	r0, [sp, #12]
   176dc:	f7ff ff40 	bl	17560 <boot_write_magic>
        if (rc == 0 && permanent) {
   176e0:	4603      	mov	r3, r0
   176e2:	2800      	cmp	r0, #0
   176e4:	d1f0      	bne.n	176c8 <boot_set_pending+0x42>
   176e6:	2c00      	cmp	r4, #0
   176e8:	d0ee      	beq.n	176c8 <boot_set_pending+0x42>
            rc = boot_write_image_ok(fap);
   176ea:	9803      	ldr	r0, [sp, #12]
   176ec:	f7ff ff48 	bl	17580 <boot_write_image_ok>
   176f0:	4603      	mov	r3, r0
   176f2:	e7e9      	b.n	176c8 <boot_set_pending+0x42>
                swap_type = BOOT_SWAP_TYPE_PERM;
   176f4:	2103      	movs	r1, #3
   176f6:	e7ea      	b.n	176ce <boot_set_pending+0x48>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
   176f8:	a903      	add	r1, sp, #12
   176fa:	2002      	movs	r0, #2
   176fc:	f7ff fba8 	bl	16e50 <flash_area_open>
        if (rc != 0) {
   17700:	b118      	cbz	r0, 1770a <boot_set_pending+0x84>
            return BOOT_EFLASH;
   17702:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
   17704:	4618      	mov	r0, r3
   17706:	b004      	add	sp, #16
   17708:	bd10      	pop	{r4, pc}
        flash_area_erase(fap, 0, fap->fa_size);
   1770a:	9803      	ldr	r0, [sp, #12]
   1770c:	6882      	ldr	r2, [r0, #8]
   1770e:	2100      	movs	r1, #0
   17710:	f7ff fbde 	bl	16ed0 <flash_area_erase>
        return BOOT_EBADIMAGE;
   17714:	2303      	movs	r3, #3
   17716:	e7f5      	b.n	17704 <boot_set_pending+0x7e>

00017718 <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   17718:	b500      	push	{lr}
   1771a:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(0),
   1771c:	a901      	add	r1, sp, #4
   1771e:	2001      	movs	r0, #1
   17720:	f7ff ff0d 	bl	1753e <boot_read_swap_state_by_id>
                                    &state_primary_slot);
    if (rc != 0) {
   17724:	4603      	mov	r3, r0
   17726:	b9c8      	cbnz	r0, 1775c <boot_set_confirmed+0x44>
        return rc;
    }

    switch (state_primary_slot.magic) {
   17728:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1772c:	2a02      	cmp	r2, #2
   1772e:	d014      	beq.n	1775a <boot_set_confirmed+0x42>
   17730:	2a03      	cmp	r2, #3
   17732:	d013      	beq.n	1775c <boot_set_confirmed+0x44>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(0), &fap);
   17734:	a903      	add	r1, sp, #12
   17736:	2001      	movs	r0, #1
   17738:	f7ff fb8a 	bl	16e50 <flash_area_open>
    if (rc) {
   1773c:	4603      	mov	r3, r0
   1773e:	b988      	cbnz	r0, 17764 <boot_set_confirmed+0x4c>
        rc = BOOT_EFLASH;
        goto done;
    }

    if (state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
   17740:	f89d 2006 	ldrb.w	r2, [sp, #6]
   17744:	2a03      	cmp	r2, #3
   17746:	d00f      	beq.n	17768 <boot_set_confirmed+0x50>
        /* Swap never completed.  This is unexpected. */
        rc = BOOT_EBADVECT;
        goto done;
    }

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   17748:	f89d 2007 	ldrb.w	r2, [sp, #7]
   1774c:	2a03      	cmp	r2, #3
   1774e:	d105      	bne.n	1775c <boot_set_confirmed+0x44>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   17750:	9803      	ldr	r0, [sp, #12]
   17752:	f7ff ff15 	bl	17580 <boot_write_image_ok>
   17756:	4603      	mov	r3, r0
   17758:	e000      	b.n	1775c <boot_set_confirmed+0x44>
        return BOOT_EBADVECT;
   1775a:	2304      	movs	r3, #4

done:
    flash_area_close(fap);
    return rc;
}
   1775c:	4618      	mov	r0, r3
   1775e:	b005      	add	sp, #20
   17760:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = BOOT_EFLASH;
   17764:	2301      	movs	r3, #1
   17766:	e7f9      	b.n	1775c <boot_set_confirmed+0x44>
        rc = BOOT_EBADVECT;
   17768:	2304      	movs	r3, #4
   1776a:	e7f7      	b.n	1775c <boot_set_confirmed+0x44>

0001776c <split_app_init>:
    },
};

void
split_app_init(void)
{
   1776c:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1776e:	4b0e      	ldr	r3, [pc, #56]	; (177a8 <split_app_init+0x3c>)
   17770:	781b      	ldrb	r3, [r3, #0]
   17772:	b12b      	cbz	r3, 17780 <split_app_init+0x14>

    rc = scfg_register(&split_scfg, "split");
   17774:	490d      	ldr	r1, [pc, #52]	; (177ac <split_app_init+0x40>)
   17776:	480e      	ldr	r0, [pc, #56]	; (177b0 <split_app_init+0x44>)
   17778:	f010 fa32 	bl	27be0 <scfg_register>
    assert(rc == 0);
   1777c:	b950      	cbnz	r0, 17794 <split_app_init+0x28>
}
   1777e:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   17780:	f7f0 fd1e 	bl	81c0 <hal_debugger_connected>
   17784:	b100      	cbz	r0, 17788 <split_app_init+0x1c>
   17786:	be01      	bkpt	0x0001
   17788:	2300      	movs	r3, #0
   1778a:	461a      	mov	r2, r3
   1778c:	4619      	mov	r1, r3
   1778e:	4618      	mov	r0, r3
   17790:	f7f2 f91e 	bl	99d0 <__assert_func>
    assert(rc == 0);
   17794:	f7f0 fd14 	bl	81c0 <hal_debugger_connected>
   17798:	b100      	cbz	r0, 1779c <split_app_init+0x30>
   1779a:	be01      	bkpt	0x0001
   1779c:	2300      	movs	r3, #0
   1779e:	461a      	mov	r2, r3
   177a0:	4619      	mov	r1, r3
   177a2:	4618      	mov	r0, r3
   177a4:	f7f2 f914 	bl	99d0 <__assert_func>
   177a8:	20000506 	.word	0x20000506
   177ac:	00029294 	.word	0x00029294
   177b0:	20000298 	.word	0x20000298

000177b4 <split_app_active_get>:

int
split_app_active_get(void)
{
    return split_app_active;
}
   177b4:	4b01      	ldr	r3, [pc, #4]	; (177bc <split_app_active_get+0x8>)
   177b6:	f993 0000 	ldrsb.w	r0, [r3]
   177ba:	4770      	bx	lr
   177bc:	20008004 	.word	0x20008004

000177c0 <split_mode_set>:
    /* XXX: For now, cast this as an integer.  This value should either be
     * treated as an enumeration generally (i.e. not read directly and assigned
     * from values in flash), or switched to a native type of integer.  However,
     * this is not a high priority change, so just cast it for now.
     */
    if ((int) split_mode < 0 || (int) split_mode >= SPLIT_MODE_CNT) {
   177c0:	2803      	cmp	r0, #3
   177c2:	d803      	bhi.n	177cc <split_mode_set+0xc>
        return SYS_EINVAL;
    }

    split_mode_cur = split_mode;
   177c4:	4b03      	ldr	r3, [pc, #12]	; (177d4 <split_mode_set+0x14>)
   177c6:	7018      	strb	r0, [r3, #0]
    return 0;
   177c8:	2000      	movs	r0, #0
   177ca:	4770      	bx	lr
        return SYS_EINVAL;
   177cc:	f06f 0001 	mvn.w	r0, #1
}
   177d0:	4770      	bx	lr
   177d2:	bf00      	nop
   177d4:	20008005 	.word	0x20008005

000177d8 <split_write_split>:

int
split_write_split(split_mode_t split_mode)
{
   177d8:	b508      	push	{r3, lr}
    int rc;

    rc = split_mode_set(split_mode);
   177da:	f7ff fff1 	bl	177c0 <split_mode_set>
    if (rc != 0) {
   177de:	4603      	mov	r3, r0
   177e0:	b108      	cbz	r0, 177e6 <split_write_split+0xe>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   177e2:	4618      	mov	r0, r3
   177e4:	bd08      	pop	{r3, pc}
    rc = scfg_save_val(&split_scfg, &split_mode_cur);
   177e6:	4903      	ldr	r1, [pc, #12]	; (177f4 <split_write_split+0x1c>)
   177e8:	4803      	ldr	r0, [pc, #12]	; (177f8 <split_write_split+0x20>)
   177ea:	f010 f9eb 	bl	27bc4 <scfg_save_val>
   177ee:	4603      	mov	r3, r0
   177f0:	e7f7      	b.n	177e2 <split_write_split+0xa>
   177f2:	bf00      	nop
   177f4:	20008005 	.word	0x20008005
   177f8:	20000298 	.word	0x20000298

000177fc <img_mgmt_find_tlvs>:
 * Finds the TLVs in the specified image slot, if any.
 */
static int
img_mgmt_find_tlvs(int slot, size_t *start_off, size_t *end_off,
                   uint16_t magic)
{
   177fc:	b570      	push	{r4, r5, r6, lr}
   177fe:	b082      	sub	sp, #8
   17800:	460c      	mov	r4, r1
   17802:	4616      	mov	r6, r2
   17804:	461d      	mov	r5, r3
    struct image_tlv_info tlv_info;
    int rc;

    rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof tlv_info);
   17806:	2304      	movs	r3, #4
   17808:	eb0d 0203 	add.w	r2, sp, r3
   1780c:	6809      	ldr	r1, [r1, #0]
   1780e:	f000 fdd4 	bl	183ba <img_mgmt_impl_read>
    if (rc != 0) {
   17812:	b960      	cbnz	r0, 1782e <img_mgmt_find_tlvs+0x32>
   17814:	4603      	mov	r3, r0
        /* Read error. */
        return MGMT_ERR_EUNKNOWN;
    }

    if (tlv_info.it_magic != magic) {
   17816:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1781a:	42aa      	cmp	r2, r5
   1781c:	d10b      	bne.n	17836 <img_mgmt_find_tlvs+0x3a>
        /* No TLVs. */
        return MGMT_ERR_ENOENT;
    }

    *start_off += sizeof tlv_info;
   1781e:	6822      	ldr	r2, [r4, #0]
   17820:	3204      	adds	r2, #4
   17822:	6022      	str	r2, [r4, #0]
    *end_off = *start_off + tlv_info.it_tlv_tot;
   17824:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   17828:	440a      	add	r2, r1
   1782a:	6032      	str	r2, [r6, #0]

    return 0;
   1782c:	e000      	b.n	17830 <img_mgmt_find_tlvs+0x34>
        return MGMT_ERR_EUNKNOWN;
   1782e:	2301      	movs	r3, #1
}
   17830:	4618      	mov	r0, r3
   17832:	b002      	add	sp, #8
   17834:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_ENOENT;
   17836:	2305      	movs	r3, #5
   17838:	e7fa      	b.n	17830 <img_mgmt_find_tlvs+0x34>
	...

0001783c <img_mgmt_erase>:
/**
 * Command handler: image erase
 */
static int
img_mgmt_erase(struct mgmt_ctxt *ctxt)
{
   1783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1783e:	4605      	mov	r5, r0
    CborError err;
    int rc;

    if (img_mgmt_slot_in_use(1)) {
   17840:	2001      	movs	r0, #1
   17842:	f000 fa97 	bl	17d74 <img_mgmt_slot_in_use>
   17846:	b998      	cbnz	r0, 17870 <img_mgmt_erase+0x34>
   17848:	4604      	mov	r4, r0
        /* No free slot. */
        return MGMT_ERR_EBADSTATE;
    }
    
    rc = img_mgmt_impl_erase_slot();
   1784a:	f000 fd35 	bl	182b8 <img_mgmt_impl_erase_slot>
   1784e:	4607      	mov	r7, r0
   17850:	2202      	movs	r2, #2
   17852:	4909      	ldr	r1, [pc, #36]	; (17878 <img_mgmt_erase+0x3c>)
   17854:	4628      	mov	r0, r5
   17856:	f001 fe2b 	bl	194b0 <cbor_encode_text_string>
   1785a:	4606      	mov	r6, r0

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, rc);
   1785c:	463a      	mov	r2, r7
   1785e:	17fb      	asrs	r3, r7, #31
   17860:	4628      	mov	r0, r5
   17862:	f001 fda4 	bl	193ae <cbor_encode_int>

    if (err != 0) {
   17866:	ea50 0306 	orrs.w	r3, r0, r6
   1786a:	d002      	beq.n	17872 <img_mgmt_erase+0x36>
        return MGMT_ERR_ENOMEM;
   1786c:	2402      	movs	r4, #2
   1786e:	e000      	b.n	17872 <img_mgmt_erase+0x36>
        return MGMT_ERR_EBADSTATE;
   17870:	2406      	movs	r4, #6
    }

    return 0;
}
   17872:	4620      	mov	r0, r4
   17874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17876:	bf00      	nop
   17878:	00028c58 	.word	0x00028c58

0001787c <img_mgmt_upload_good_rsp>:

static int
img_mgmt_upload_good_rsp(struct mgmt_ctxt *ctxt)
{
   1787c:	b538      	push	{r3, r4, r5, lr}
   1787e:	4605      	mov	r5, r0
   17880:	2202      	movs	r2, #2
   17882:	490e      	ldr	r1, [pc, #56]	; (178bc <img_mgmt_upload_good_rsp+0x40>)
   17884:	f001 fe14 	bl	194b0 <cbor_encode_text_string>
   17888:	4604      	mov	r4, r0
    CborError err = CborNoError;

    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   1788a:	2200      	movs	r2, #0
   1788c:	2300      	movs	r3, #0
   1788e:	4628      	mov	r0, r5
   17890:	f001 fd8d 	bl	193ae <cbor_encode_int>
   17894:	4304      	orrs	r4, r0
   17896:	2203      	movs	r2, #3
   17898:	4909      	ldr	r1, [pc, #36]	; (178c0 <img_mgmt_upload_good_rsp+0x44>)
   1789a:	4628      	mov	r0, r5
   1789c:	f001 fe08 	bl	194b0 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
   178a0:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&ctxt->encoder, g_img_mgmt_state.off);
   178a2:	4b08      	ldr	r3, [pc, #32]	; (178c4 <img_mgmt_upload_good_rsp+0x48>)
   178a4:	685a      	ldr	r2, [r3, #4]
   178a6:	2300      	movs	r3, #0
   178a8:	4628      	mov	r0, r5
   178aa:	f001 fd80 	bl	193ae <cbor_encode_int>

    if (err != 0) {
   178ae:	ea54 0300 	orrs.w	r3, r4, r0
   178b2:	d101      	bne.n	178b8 <img_mgmt_upload_good_rsp+0x3c>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   178b4:	2000      	movs	r0, #0
}
   178b6:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   178b8:	2002      	movs	r0, #2
   178ba:	e7fc      	b.n	178b6 <img_mgmt_upload_good_rsp+0x3a>
   178bc:	00028c58 	.word	0x00028c58
   178c0:	000292ec 	.word	0x000292ec
   178c4:	20008008 	.word	0x20008008

000178c8 <img_mgmt_read_info>:
{
   178c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   178ca:	b08d      	sub	sp, #52	; 0x34
   178cc:	4604      	mov	r4, r0
   178ce:	460d      	mov	r5, r1
   178d0:	4616      	mov	r6, r2
   178d2:	461f      	mov	r7, r3
    rc = img_mgmt_impl_read(image_slot, 0, &hdr, sizeof hdr);
   178d4:	2320      	movs	r3, #32
   178d6:	aa04      	add	r2, sp, #16
   178d8:	2100      	movs	r1, #0
   178da:	f000 fd6e 	bl	183ba <img_mgmt_impl_read>
    if (rc != 0) {
   178de:	2800      	cmp	r0, #0
   178e0:	d16d      	bne.n	179be <img_mgmt_read_info+0xf6>
    if (ver != NULL) {
   178e2:	b11d      	cbz	r5, 178ec <img_mgmt_read_info+0x24>
        memset(ver, 0xff, sizeof(*ver));
   178e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   178e8:	602b      	str	r3, [r5, #0]
   178ea:	606b      	str	r3, [r5, #4]
    if (hdr.ih_magic == IMAGE_MAGIC) {
   178ec:	9b04      	ldr	r3, [sp, #16]
   178ee:	4a3b      	ldr	r2, [pc, #236]	; (179dc <img_mgmt_read_info+0x114>)
   178f0:	4293      	cmp	r3, r2
   178f2:	d004      	beq.n	178fe <img_mgmt_read_info+0x36>
    } else if (hdr.ih_magic == 0xffffffff) {
   178f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   178f8:	d025      	beq.n	17946 <img_mgmt_read_info+0x7e>
        return MGMT_ERR_EUNKNOWN;
   178fa:	2501      	movs	r5, #1
   178fc:	e060      	b.n	179c0 <img_mgmt_read_info+0xf8>
        if (ver != NULL) {
   178fe:	b11d      	cbz	r5, 17908 <img_mgmt_read_info+0x40>
            memcpy(ver, &hdr.ih_ver, sizeof(*ver));
   17900:	ab09      	add	r3, sp, #36	; 0x24
   17902:	cb03      	ldmia	r3!, {r0, r1}
   17904:	6028      	str	r0, [r5, #0]
   17906:	6069      	str	r1, [r5, #4]
    if (flags != NULL) {
   17908:	b10f      	cbz	r7, 1790e <img_mgmt_read_info+0x46>
        *flags = hdr.ih_flags;
   1790a:	9b08      	ldr	r3, [sp, #32]
   1790c:	603b      	str	r3, [r7, #0]
    data_off = hdr.ih_hdr_size + hdr.ih_img_size;
   1790e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   17912:	9a07      	ldr	r2, [sp, #28]
   17914:	4413      	add	r3, r2
   17916:	9302      	str	r3, [sp, #8]
    rc = img_mgmt_find_tlvs(image_slot, &data_off, &data_end, IMAGE_TLV_PROT_INFO_MAGIC);
   17918:	f646 1308 	movw	r3, #26888	; 0x6908
   1791c:	aa01      	add	r2, sp, #4
   1791e:	a902      	add	r1, sp, #8
   17920:	4620      	mov	r0, r4
   17922:	f7ff ff6b 	bl	177fc <img_mgmt_find_tlvs>
    if (!rc) {
   17926:	b910      	cbnz	r0, 1792e <img_mgmt_read_info+0x66>
        data_off = data_end - sizeof(struct image_tlv_info);
   17928:	9b01      	ldr	r3, [sp, #4]
   1792a:	3b04      	subs	r3, #4
   1792c:	9302      	str	r3, [sp, #8]
    rc = img_mgmt_find_tlvs(image_slot, &data_off, &data_end, IMAGE_TLV_INFO_MAGIC);
   1792e:	f646 1307 	movw	r3, #26887	; 0x6907
   17932:	aa01      	add	r2, sp, #4
   17934:	a902      	add	r1, sp, #8
   17936:	4620      	mov	r0, r4
   17938:	f7ff ff60 	bl	177fc <img_mgmt_find_tlvs>
    if (rc != 0) {
   1793c:	4605      	mov	r5, r0
   1793e:	2800      	cmp	r0, #0
   17940:	d141      	bne.n	179c6 <img_mgmt_read_info+0xfe>
    hash_found = false;
   17942:	2700      	movs	r7, #0
   17944:	e00f      	b.n	17966 <img_mgmt_read_info+0x9e>
        return MGMT_ERR_ENOENT;
   17946:	2505      	movs	r5, #5
   17948:	e03a      	b.n	179c0 <img_mgmt_read_info+0xf8>
        if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   1794a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1794e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   17952:	4291      	cmp	r1, r2
   17954:	d116      	bne.n	17984 <img_mgmt_read_info+0xbc>
            return MGMT_ERR_EUNKNOWN;
   17956:	2501      	movs	r5, #1
   17958:	e032      	b.n	179c0 <img_mgmt_read_info+0xf8>
            data_off += sizeof tlv + tlv.it_len;
   1795a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1795e:	9a02      	ldr	r2, [sp, #8]
   17960:	4413      	add	r3, r2
   17962:	3304      	adds	r3, #4
   17964:	9302      	str	r3, [sp, #8]
    while (data_off + sizeof tlv <= data_end) {
   17966:	9902      	ldr	r1, [sp, #8]
   17968:	1d0a      	adds	r2, r1, #4
   1796a:	9b01      	ldr	r3, [sp, #4]
   1796c:	429a      	cmp	r2, r3
   1796e:	d823      	bhi.n	179b8 <img_mgmt_read_info+0xf0>
        rc = img_mgmt_impl_read(image_slot, data_off, &tlv, sizeof tlv);
   17970:	2304      	movs	r3, #4
   17972:	aa03      	add	r2, sp, #12
   17974:	4620      	mov	r0, r4
   17976:	f000 fd20 	bl	183ba <img_mgmt_impl_read>
        if (rc != 0) {
   1797a:	bb30      	cbnz	r0, 179ca <img_mgmt_read_info+0x102>
        if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   1797c:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17980:	2bff      	cmp	r3, #255	; 0xff
   17982:	d0e2      	beq.n	1794a <img_mgmt_read_info+0x82>
        if (tlv.it_type != IMAGE_TLV_SHA256 || tlv.it_len != IMAGE_HASH_LEN) {
   17984:	2b10      	cmp	r3, #16
   17986:	d1e8      	bne.n	1795a <img_mgmt_read_info+0x92>
   17988:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1798c:	2b20      	cmp	r3, #32
   1798e:	d1e4      	bne.n	1795a <img_mgmt_read_info+0x92>
        if (hash_found) {
   17990:	b9ef      	cbnz	r7, 179ce <img_mgmt_read_info+0x106>
        data_off += sizeof tlv;
   17992:	9902      	ldr	r1, [sp, #8]
   17994:	3104      	adds	r1, #4
   17996:	9102      	str	r1, [sp, #8]
        if (hash != NULL) {
   17998:	b166      	cbz	r6, 179b4 <img_mgmt_read_info+0xec>
            if (data_off + IMAGE_HASH_LEN > data_end) {
   1799a:	f101 0320 	add.w	r3, r1, #32
   1799e:	9a01      	ldr	r2, [sp, #4]
   179a0:	4293      	cmp	r3, r2
   179a2:	d816      	bhi.n	179d2 <img_mgmt_read_info+0x10a>
            rc = img_mgmt_impl_read(image_slot, data_off, hash,
   179a4:	2320      	movs	r3, #32
   179a6:	4632      	mov	r2, r6
   179a8:	4620      	mov	r0, r4
   179aa:	f000 fd06 	bl	183ba <img_mgmt_impl_read>
            if (rc != 0) {
   179ae:	b990      	cbnz	r0, 179d6 <img_mgmt_read_info+0x10e>
        hash_found = true;
   179b0:	2701      	movs	r7, #1
   179b2:	e7d8      	b.n	17966 <img_mgmt_read_info+0x9e>
   179b4:	2701      	movs	r7, #1
   179b6:	e7d6      	b.n	17966 <img_mgmt_read_info+0x9e>
    if (!hash_found) {
   179b8:	b917      	cbnz	r7, 179c0 <img_mgmt_read_info+0xf8>
        return MGMT_ERR_EUNKNOWN;
   179ba:	2501      	movs	r5, #1
   179bc:	e000      	b.n	179c0 <img_mgmt_read_info+0xf8>
        return MGMT_ERR_EUNKNOWN;
   179be:	2501      	movs	r5, #1
}
   179c0:	4628      	mov	r0, r5
   179c2:	b00d      	add	sp, #52	; 0x34
   179c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_EUNKNOWN;
   179c6:	2501      	movs	r5, #1
   179c8:	e7fa      	b.n	179c0 <img_mgmt_read_info+0xf8>
            return MGMT_ERR_EUNKNOWN;
   179ca:	2501      	movs	r5, #1
   179cc:	e7f8      	b.n	179c0 <img_mgmt_read_info+0xf8>
            return MGMT_ERR_EUNKNOWN;
   179ce:	2501      	movs	r5, #1
   179d0:	e7f6      	b.n	179c0 <img_mgmt_read_info+0xf8>
                return MGMT_ERR_EUNKNOWN;
   179d2:	2501      	movs	r5, #1
   179d4:	e7f4      	b.n	179c0 <img_mgmt_read_info+0xf8>
                return MGMT_ERR_EUNKNOWN;
   179d6:	2501      	movs	r5, #1
   179d8:	e7f2      	b.n	179c0 <img_mgmt_read_info+0xf8>
   179da:	bf00      	nop
   179dc:	96f3b83d 	.word	0x96f3b83d

000179e0 <img_mgmt_upload_log>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
img_mgmt_upload_log(bool is_first, bool is_last, int status)
{
   179e0:	b510      	push	{r4, lr}
   179e2:	b088      	sub	sp, #32
   179e4:	4614      	mov	r4, r2
    uint8_t hash[IMAGE_HASH_LEN];
    const uint8_t *hashp;
    int rc;

    if (is_first) {
   179e6:	b970      	cbnz	r0, 17a06 <img_mgmt_upload_log+0x26>
        return img_mgmt_impl_log_upload_start(status);
    }

    if (is_last || status != 0) {
   179e8:	b901      	cbnz	r1, 179ec <img_mgmt_upload_log+0xc>
   179ea:	b192      	cbz	r2, 17a12 <img_mgmt_upload_log+0x32>
        /* Log the image hash if we know it. */
        rc = img_mgmt_read_info(1, NULL, hash, NULL);
   179ec:	2300      	movs	r3, #0
   179ee:	466a      	mov	r2, sp
   179f0:	4619      	mov	r1, r3
   179f2:	2001      	movs	r0, #1
   179f4:	f7ff ff68 	bl	178c8 <img_mgmt_read_info>
        if (rc != 0) {
   179f8:	b148      	cbz	r0, 17a0e <img_mgmt_upload_log+0x2e>
            hashp = NULL;
   179fa:	2100      	movs	r1, #0
        } else {
            hashp = hash;
        }

        return img_mgmt_impl_log_upload_done(status, hashp);
   179fc:	4620      	mov	r0, r4
   179fe:	f000 fd63 	bl	184c8 <img_mgmt_impl_log_upload_done>
    }

    /* Nothing to log. */
    return 0;
}
   17a02:	b008      	add	sp, #32
   17a04:	bd10      	pop	{r4, pc}
        return img_mgmt_impl_log_upload_start(status);
   17a06:	4610      	mov	r0, r2
   17a08:	f000 fd54 	bl	184b4 <img_mgmt_impl_log_upload_start>
   17a0c:	e7f9      	b.n	17a02 <img_mgmt_upload_log+0x22>
            hashp = hash;
   17a0e:	4669      	mov	r1, sp
   17a10:	e7f4      	b.n	179fc <img_mgmt_upload_log+0x1c>
    return 0;
   17a12:	4610      	mov	r0, r2
   17a14:	e7f5      	b.n	17a02 <img_mgmt_upload_log+0x22>

00017a16 <img_mgmt_find_by_hash>:
{
   17a16:	b570      	push	{r4, r5, r6, lr}
   17a18:	b088      	sub	sp, #32
   17a1a:	4606      	mov	r6, r0
   17a1c:	460d      	mov	r5, r1
    for (i = 0; i < 2; i++) {
   17a1e:	2400      	movs	r4, #0
   17a20:	e000      	b.n	17a24 <img_mgmt_find_by_hash+0xe>
   17a22:	3401      	adds	r4, #1
   17a24:	2c01      	cmp	r4, #1
   17a26:	dc0f      	bgt.n	17a48 <img_mgmt_find_by_hash+0x32>
        if (img_mgmt_read_info(i, ver, hash, NULL) != 0) {
   17a28:	2300      	movs	r3, #0
   17a2a:	466a      	mov	r2, sp
   17a2c:	4629      	mov	r1, r5
   17a2e:	4620      	mov	r0, r4
   17a30:	f7ff ff4a 	bl	178c8 <img_mgmt_read_info>
   17a34:	2800      	cmp	r0, #0
   17a36:	d1f4      	bne.n	17a22 <img_mgmt_find_by_hash+0xc>
        if (!memcmp(hash, find, IMAGE_HASH_LEN)) {
   17a38:	2220      	movs	r2, #32
   17a3a:	4631      	mov	r1, r6
   17a3c:	4668      	mov	r0, sp
   17a3e:	f7f3 ff03 	bl	b848 <memcmp>
   17a42:	2800      	cmp	r0, #0
   17a44:	d1ed      	bne.n	17a22 <img_mgmt_find_by_hash+0xc>
   17a46:	e001      	b.n	17a4c <img_mgmt_find_by_hash+0x36>
    return -1;
   17a48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   17a4c:	4620      	mov	r0, r4
   17a4e:	b008      	add	sp, #32
   17a50:	bd70      	pop	{r4, r5, r6, pc}
	...

00017a54 <img_mgmt_dfu_stopped>:
    return img_mgmt_upload_good_rsp(ctxt);
}

void
img_mgmt_dfu_stopped(void)
{
   17a54:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_stopped_cb) {
   17a56:	4b03      	ldr	r3, [pc, #12]	; (17a64 <img_mgmt_dfu_stopped+0x10>)
   17a58:	681b      	ldr	r3, [r3, #0]
   17a5a:	b113      	cbz	r3, 17a62 <img_mgmt_dfu_stopped+0xe>
   17a5c:	685b      	ldr	r3, [r3, #4]
   17a5e:	b103      	cbz	r3, 17a62 <img_mgmt_dfu_stopped+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_stopped_cb();
   17a60:	4798      	blx	r3
    }
}
   17a62:	bd08      	pop	{r3, pc}
   17a64:	20008038 	.word	0x20008038

00017a68 <img_mgmt_dfu_started>:

void
img_mgmt_dfu_started(void)
{
   17a68:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_started_cb) {
   17a6a:	4b03      	ldr	r3, [pc, #12]	; (17a78 <img_mgmt_dfu_started+0x10>)
   17a6c:	681b      	ldr	r3, [r3, #0]
   17a6e:	b113      	cbz	r3, 17a76 <img_mgmt_dfu_started+0xe>
   17a70:	681b      	ldr	r3, [r3, #0]
   17a72:	b103      	cbz	r3, 17a76 <img_mgmt_dfu_started+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_started_cb();
   17a74:	4798      	blx	r3
    }
}
   17a76:	bd08      	pop	{r3, pc}
   17a78:	20008038 	.word	0x20008038

00017a7c <img_mgmt_dfu_pending>:

void
img_mgmt_dfu_pending(void)
{
   17a7c:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_pending_cb) {
   17a7e:	4b03      	ldr	r3, [pc, #12]	; (17a8c <img_mgmt_dfu_pending+0x10>)
   17a80:	681b      	ldr	r3, [r3, #0]
   17a82:	b113      	cbz	r3, 17a8a <img_mgmt_dfu_pending+0xe>
   17a84:	689b      	ldr	r3, [r3, #8]
   17a86:	b103      	cbz	r3, 17a8a <img_mgmt_dfu_pending+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_pending_cb();
   17a88:	4798      	blx	r3
    }
}
   17a8a:	bd08      	pop	{r3, pc}
   17a8c:	20008038 	.word	0x20008038

00017a90 <img_mgmt_upload>:
{
   17a90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17a94:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
   17a98:	4605      	mov	r5, r0
    struct img_mgmt_upload_req req = {
   17a9a:	ac50      	add	r4, sp, #320	; 0x140
   17a9c:	f44f 7210 	mov.w	r2, #576	; 0x240
   17aa0:	2100      	movs	r1, #0
   17aa2:	4620      	mov	r0, r4
   17aa4:	f7f3 ff1d 	bl	b8e2 <memset>
   17aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17aac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17ab0:	e9c4 2300 	strd	r2, r3, [r4]
   17ab4:	e9c4 2302 	strd	r2, r3, [r4, #8]
    const struct cbor_attr_t off_attr[] = {
   17ab8:	f44f 7290 	mov.w	r2, #288	; 0x120
   17abc:	2100      	movs	r1, #0
   17abe:	a808      	add	r0, sp, #32
   17ac0:	f7f3 ff0f 	bl	b8e2 <memset>
   17ac4:	4b6d      	ldr	r3, [pc, #436]	; (17c7c <img_mgmt_upload+0x1ec>)
   17ac6:	9308      	str	r3, [sp, #32]
   17ac8:	2303      	movs	r3, #3
   17aca:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   17ace:	aa56      	add	r2, sp, #344	; 0x158
   17ad0:	920a      	str	r2, [sp, #40]	; 0x28
   17ad2:	aa54      	add	r2, sp, #336	; 0x150
   17ad4:	920b      	str	r2, [sp, #44]	; 0x2c
   17ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
   17ada:	9212      	str	r2, [sp, #72]	; 0x48
   17adc:	4a68      	ldr	r2, [pc, #416]	; (17c80 <img_mgmt_upload+0x1f0>)
   17ade:	9214      	str	r2, [sp, #80]	; 0x50
   17ae0:	2102      	movs	r1, #2
   17ae2:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
   17ae6:	aa52      	add	r2, sp, #328	; 0x148
   17ae8:	9216      	str	r2, [sp, #88]	; 0x58
   17aea:	2201      	movs	r2, #1
   17aec:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
   17af0:	4864      	ldr	r0, [pc, #400]	; (17c84 <img_mgmt_upload+0x1f4>)
   17af2:	9020      	str	r0, [sp, #128]	; 0x80
   17af4:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   17af8:	9422      	str	r4, [sp, #136]	; 0x88
   17afa:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   17afe:	4a62      	ldr	r2, [pc, #392]	; (17c88 <img_mgmt_upload+0x1f8>)
   17b00:	922c      	str	r2, [sp, #176]	; 0xb0
   17b02:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
   17b06:	abd6      	add	r3, sp, #856	; 0x358
   17b08:	932e      	str	r3, [sp, #184]	; 0xb8
   17b0a:	ab55      	add	r3, sp, #340	; 0x154
   17b0c:	932f      	str	r3, [sp, #188]	; 0xbc
   17b0e:	2320      	movs	r3, #32
   17b10:	9336      	str	r3, [sp, #216]	; 0xd8
   17b12:	4b5e      	ldr	r3, [pc, #376]	; (17c8c <img_mgmt_upload+0x1fc>)
   17b14:	9338      	str	r3, [sp, #224]	; 0xe0
   17b16:	2305      	movs	r3, #5
   17b18:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
   17b1c:	abde      	add	r3, sp, #888	; 0x378
   17b1e:	933a      	str	r3, [sp, #232]	; 0xe8
    const char *errstr = NULL;
   17b20:	2300      	movs	r3, #0
   17b22:	9307      	str	r3, [sp, #28]
    rc = cbor_read_object(&ctxt->it, off_attr);
   17b24:	a908      	add	r1, sp, #32
   17b26:	f105 001c 	add.w	r0, r5, #28
   17b2a:	f010 fc57 	bl	283dc <cbor_read_object>
    if (rc != 0) {
   17b2e:	2800      	cmp	r0, #0
   17b30:	f040 809d 	bne.w	17c6e <img_mgmt_upload+0x1de>
    rc = img_mgmt_impl_upload_inspect(&req, &action, &errstr);
   17b34:	aa07      	add	r2, sp, #28
   17b36:	4669      	mov	r1, sp
   17b38:	a850      	add	r0, sp, #320	; 0x140
   17b3a:	f000 faeb 	bl	18114 <img_mgmt_impl_upload_inspect>
    if (rc != 0) {
   17b3e:	4604      	mov	r4, r0
   17b40:	2800      	cmp	r0, #0
   17b42:	d12d      	bne.n	17ba0 <img_mgmt_upload+0x110>
    if (!action.proceed) {
   17b44:	f89d 6010 	ldrb.w	r6, [sp, #16]
   17b48:	2e00      	cmp	r6, #0
   17b4a:	d02c      	beq.n	17ba6 <img_mgmt_upload+0x116>
    if (img_mgmt_upload_cb != NULL) {
   17b4c:	4b50      	ldr	r3, [pc, #320]	; (17c90 <img_mgmt_upload+0x200>)
   17b4e:	681b      	ldr	r3, [r3, #0]
   17b50:	2b00      	cmp	r3, #0
   17b52:	d02d      	beq.n	17bb0 <img_mgmt_upload+0x120>
        rc = img_mgmt_upload_cb(req.off, action.size, img_mgmt_upload_arg);
   17b54:	4a4f      	ldr	r2, [pc, #316]	; (17c94 <img_mgmt_upload+0x204>)
   17b56:	6812      	ldr	r2, [r2, #0]
   17b58:	9900      	ldr	r1, [sp, #0]
   17b5a:	9850      	ldr	r0, [sp, #320]	; 0x140
   17b5c:	4798      	blx	r3
        if (rc != 0) {
   17b5e:	4604      	mov	r4, r0
   17b60:	b330      	cbz	r0, 17bb0 <img_mgmt_upload+0x120>
            errstr = img_mgmt_err_str_app_reject;
   17b62:	2300      	movs	r3, #0
   17b64:	9307      	str	r3, [sp, #28]
    img_mgmt_upload_log(req.off == 0, g_img_mgmt_state.off == g_img_mgmt_state.size, rc);
   17b66:	9850      	ldr	r0, [sp, #320]	; 0x140
   17b68:	9a51      	ldr	r2, [sp, #324]	; 0x144
   17b6a:	4b4b      	ldr	r3, [pc, #300]	; (17c98 <img_mgmt_upload+0x208>)
   17b6c:	6859      	ldr	r1, [r3, #4]
   17b6e:	689b      	ldr	r3, [r3, #8]
   17b70:	4302      	orrs	r2, r0
   17b72:	bf0c      	ite	eq
   17b74:	2001      	moveq	r0, #1
   17b76:	2000      	movne	r0, #0
   17b78:	4622      	mov	r2, r4
   17b7a:	4299      	cmp	r1, r3
   17b7c:	bf14      	ite	ne
   17b7e:	2100      	movne	r1, #0
   17b80:	2101      	moveq	r1, #1
   17b82:	f7ff ff2d 	bl	179e0 <img_mgmt_upload_log>
    mgmt_evt(MGMT_EVT_OP_CMD_STATUS, MGMT_GROUP_ID_IMAGE, IMG_MGMT_ID_UPLOAD,
   17b86:	abe1      	add	r3, sp, #900	; 0x384
   17b88:	2201      	movs	r2, #1
   17b8a:	4611      	mov	r1, r2
   17b8c:	2002      	movs	r0, #2
   17b8e:	f7f4 fe05 	bl	c79c <mgmt_evt>
    if (rc != 0) {
   17b92:	2c00      	cmp	r4, #0
   17b94:	d168      	bne.n	17c68 <img_mgmt_upload+0x1d8>
    return img_mgmt_upload_good_rsp(ctxt);
   17b96:	4628      	mov	r0, r5
   17b98:	f7ff fe70 	bl	1787c <img_mgmt_upload_good_rsp>
   17b9c:	4604      	mov	r4, r0
   17b9e:	e067      	b.n	17c70 <img_mgmt_upload+0x1e0>
        img_mgmt_dfu_stopped();
   17ba0:	f7ff ff58 	bl	17a54 <img_mgmt_dfu_stopped>
        return rc;
   17ba4:	e064      	b.n	17c70 <img_mgmt_upload+0x1e0>
        return img_mgmt_upload_good_rsp(ctxt);
   17ba6:	4628      	mov	r0, r5
   17ba8:	f7ff fe68 	bl	1787c <img_mgmt_upload_good_rsp>
   17bac:	4604      	mov	r4, r0
   17bae:	e05f      	b.n	17c70 <img_mgmt_upload+0x1e0>
    g_img_mgmt_state.area_id = action.area_id;
   17bb0:	9a03      	ldr	r2, [sp, #12]
   17bb2:	4b39      	ldr	r3, [pc, #228]	; (17c98 <img_mgmt_upload+0x208>)
   17bb4:	601a      	str	r2, [r3, #0]
    g_img_mgmt_state.size = action.size;
   17bb6:	9a00      	ldr	r2, [sp, #0]
   17bb8:	609a      	str	r2, [r3, #8]
    if (req.off == 0) {
   17bba:	ab50      	add	r3, sp, #320	; 0x140
   17bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   17bc0:	4313      	orrs	r3, r2
   17bc2:	d015      	beq.n	17bf0 <img_mgmt_upload+0x160>
    if (req.data_len != 0) {
   17bc4:	9b54      	ldr	r3, [sp, #336]	; 0x150
   17bc6:	2b00      	cmp	r3, #0
   17bc8:	d0cd      	beq.n	17b66 <img_mgmt_upload+0xd6>
        if (g_img_mgmt_state.off + req.data_len == g_img_mgmt_state.size) {
   17bca:	4a33      	ldr	r2, [pc, #204]	; (17c98 <img_mgmt_upload+0x208>)
   17bcc:	6851      	ldr	r1, [r2, #4]
   17bce:	440b      	add	r3, r1
   17bd0:	6892      	ldr	r2, [r2, #8]
   17bd2:	4293      	cmp	r3, r2
   17bd4:	d000      	beq.n	17bd8 <img_mgmt_upload+0x148>
    bool last = false;
   17bd6:	2600      	movs	r6, #0
        rc = img_mgmt_impl_write_image_data(req.off, req.img_data, action.write_bytes, last);
   17bd8:	4633      	mov	r3, r6
   17bda:	9a02      	ldr	r2, [sp, #8]
   17bdc:	a956      	add	r1, sp, #344	; 0x158
   17bde:	9850      	ldr	r0, [sp, #320]	; 0x140
   17be0:	f000 fc06 	bl	183f0 <img_mgmt_impl_write_image_data>
        if (rc != 0) {
   17be4:	4604      	mov	r4, r0
   17be6:	b370      	cbz	r0, 17c46 <img_mgmt_upload+0x1b6>
            errstr = img_mgmt_err_str_flash_write_failed;
   17be8:	2300      	movs	r3, #0
   17bea:	9307      	str	r3, [sp, #28]
            rc = MGMT_ERR_EUNKNOWN;
   17bec:	2401      	movs	r4, #1
            goto end;
   17bee:	e7ba      	b.n	17b66 <img_mgmt_upload+0xd6>
        g_img_mgmt_state.off = 0;
   17bf0:	4f29      	ldr	r7, [pc, #164]	; (17c98 <img_mgmt_upload+0x208>)
   17bf2:	f04f 0900 	mov.w	r9, #0
   17bf6:	f8c7 9004 	str.w	r9, [r7, #4]
        img_mgmt_dfu_started();
   17bfa:	f7ff ff35 	bl	17a68 <img_mgmt_dfu_started>
        cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_START;
   17bfe:	f8cd 9384 	str.w	r9, [sp, #900]	; 0x384
        g_img_mgmt_state.data_sha_len = req.data_sha_len;
   17c02:	f8dd 8154 	ldr.w	r8, [sp, #340]	; 0x154
   17c06:	f887 800c 	strb.w	r8, [r7, #12]
        memcpy(g_img_mgmt_state.data_sha, req.data_sha, req.data_sha_len);
   17c0a:	4642      	mov	r2, r8
   17c0c:	a9d6      	add	r1, sp, #856	; 0x358
   17c0e:	f107 000d 	add.w	r0, r7, #13
   17c12:	f7f3 fe3d 	bl	b890 <memcpy>
        memset(&g_img_mgmt_state.data_sha[req.data_sha_len], 0,
   17c16:	f108 0008 	add.w	r0, r8, #8
   17c1a:	4438      	add	r0, r7
   17c1c:	f1c8 0220 	rsb	r2, r8, #32
   17c20:	4649      	mov	r1, r9
   17c22:	3005      	adds	r0, #5
   17c24:	f7f3 fe5d 	bl	b8e2 <memset>
        if (action.erase) {
   17c28:	f89d 3011 	ldrb.w	r3, [sp, #17]
   17c2c:	2b00      	cmp	r3, #0
   17c2e:	d0c9      	beq.n	17bc4 <img_mgmt_upload+0x134>
            rc = img_mgmt_impl_erase_image_data(0, req.size);
   17c30:	9952      	ldr	r1, [sp, #328]	; 0x148
   17c32:	4648      	mov	r0, r9
   17c34:	f000 fbf5 	bl	18422 <img_mgmt_impl_erase_image_data>
            if (rc != 0) {
   17c38:	4604      	mov	r4, r0
   17c3a:	2800      	cmp	r0, #0
   17c3c:	d0c2      	beq.n	17bc4 <img_mgmt_upload+0x134>
                errstr = img_mgmt_err_str_flash_erase_failed;
   17c3e:	f8cd 901c 	str.w	r9, [sp, #28]
                rc = MGMT_ERR_EUNKNOWN;
   17c42:	2401      	movs	r4, #1
                goto end;
   17c44:	e78f      	b.n	17b66 <img_mgmt_upload+0xd6>
            g_img_mgmt_state.off += action.write_bytes;
   17c46:	9b02      	ldr	r3, [sp, #8]
   17c48:	4a13      	ldr	r2, [pc, #76]	; (17c98 <img_mgmt_upload+0x208>)
   17c4a:	6851      	ldr	r1, [r2, #4]
   17c4c:	440b      	add	r3, r1
   17c4e:	6053      	str	r3, [r2, #4]
            if (g_img_mgmt_state.off == g_img_mgmt_state.size) {
   17c50:	6892      	ldr	r2, [r2, #8]
   17c52:	4293      	cmp	r3, r2
   17c54:	d187      	bne.n	17b66 <img_mgmt_upload+0xd6>
                img_mgmt_dfu_pending();
   17c56:	f7ff ff11 	bl	17a7c <img_mgmt_dfu_pending>
                cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_ONGOING;
   17c5a:	2301      	movs	r3, #1
   17c5c:	93e1      	str	r3, [sp, #900]	; 0x384
                g_img_mgmt_state.area_id = -1;
   17c5e:	4b0e      	ldr	r3, [pc, #56]	; (17c98 <img_mgmt_upload+0x208>)
   17c60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17c64:	601a      	str	r2, [r3, #0]
   17c66:	e77e      	b.n	17b66 <img_mgmt_upload+0xd6>
        img_mgmt_dfu_stopped();
   17c68:	f7ff fef4 	bl	17a54 <img_mgmt_dfu_stopped>
        return img_mgmt_error_rsp(ctxt, rc, errstr);
   17c6c:	e000      	b.n	17c70 <img_mgmt_upload+0x1e0>
        return MGMT_ERR_EINVAL;
   17c6e:	2403      	movs	r4, #3
}
   17c70:	4620      	mov	r0, r4
   17c72:	f50d 7d63 	add.w	sp, sp, #908	; 0x38c
   17c76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17c7a:	bf00      	nop
   17c7c:	000292d4 	.word	0x000292d4
   17c80:	000292dc 	.word	0x000292dc
   17c84:	000292ec 	.word	0x000292ec
   17c88:	000292e0 	.word	0x000292e0
   17c8c:	000292e4 	.word	0x000292e4
   17c90:	20008040 	.word	0x20008040
   17c94:	2000803c 	.word	0x2000803c
   17c98:	20008008 	.word	0x20008008

00017c9c <img_mgmt_dfu_confirmed>:

void
img_mgmt_dfu_confirmed(void)
{
   17c9c:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb) {
   17c9e:	4b03      	ldr	r3, [pc, #12]	; (17cac <img_mgmt_dfu_confirmed+0x10>)
   17ca0:	681b      	ldr	r3, [r3, #0]
   17ca2:	b113      	cbz	r3, 17caa <img_mgmt_dfu_confirmed+0xe>
   17ca4:	68db      	ldr	r3, [r3, #12]
   17ca6:	b103      	cbz	r3, 17caa <img_mgmt_dfu_confirmed+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb();
   17ca8:	4798      	blx	r3
    }
}
   17caa:	bd08      	pop	{r3, pc}
   17cac:	20008038 	.word	0x20008038

00017cb0 <img_mgmt_my_version>:
}


int
img_mgmt_my_version(struct image_version *ver)
{
   17cb0:	b508      	push	{r3, lr}
    return img_mgmt_read_info(IMG_MGMT_BOOT_CURR_SLOT, ver, NULL, NULL);
   17cb2:	2300      	movs	r3, #0
   17cb4:	461a      	mov	r2, r3
   17cb6:	4601      	mov	r1, r0
   17cb8:	4802      	ldr	r0, [pc, #8]	; (17cc4 <img_mgmt_my_version+0x14>)
   17cba:	6800      	ldr	r0, [r0, #0]
   17cbc:	f7ff fe04 	bl	178c8 <img_mgmt_read_info>
}
   17cc0:	bd08      	pop	{r3, pc}
   17cc2:	bf00      	nop
   17cc4:	20008000 	.word	0x20008000

00017cc8 <img_mgmt_register_group>:

void
img_mgmt_register_group(void)
{
   17cc8:	b508      	push	{r3, lr}
    mgmt_register_group(&img_mgmt_group);
   17cca:	4802      	ldr	r0, [pc, #8]	; (17cd4 <img_mgmt_register_group+0xc>)
   17ccc:	f7f4 fd02 	bl	c6d4 <mgmt_register_group>
}
   17cd0:	bd08      	pop	{r3, pc}
   17cd2:	bf00      	nop
   17cd4:	200002bc 	.word	0x200002bc

00017cd8 <img_mgmt_state_flags>:
/**
 * Collects information about the specified image slot.
 */
uint8_t
img_mgmt_state_flags(int query_slot)
{
   17cd8:	b510      	push	{r4, lr}
    uint8_t flags;
    int swap_type;

    assert(query_slot == 0 || query_slot == 1);
   17cda:	2801      	cmp	r0, #1
   17cdc:	d808      	bhi.n	17cf0 <img_mgmt_state_flags+0x18>
   17cde:	4604      	mov	r4, r0
    flags = 0;

    /* Determine if this is is pending or confirmed (only applicable for
     * unified images and loaders.
     */
    swap_type = img_mgmt_impl_swap_type();
   17ce0:	f000 fbb6 	bl	18450 <img_mgmt_impl_swap_type>
    switch (swap_type) {
   17ce4:	2803      	cmp	r0, #3
   17ce6:	d822      	bhi.n	17d2e <img_mgmt_state_flags+0x56>
   17ce8:	e8df f000 	tbb	[pc, r0]
   17cec:	1c17120c 	.word	0x1c17120c
    assert(query_slot == 0 || query_slot == 1);
   17cf0:	f7f0 fa66 	bl	81c0 <hal_debugger_connected>
   17cf4:	b100      	cbz	r0, 17cf8 <img_mgmt_state_flags+0x20>
   17cf6:	be01      	bkpt	0x0001
   17cf8:	2300      	movs	r3, #0
   17cfa:	461a      	mov	r2, r3
   17cfc:	4619      	mov	r1, r3
   17cfe:	4618      	mov	r0, r3
   17d00:	f7f1 fe66 	bl	99d0 <__assert_func>
    case IMG_MGMT_SWAP_TYPE_NONE:
        if (query_slot == 0) {
   17d04:	b1ac      	cbz	r4, 17d32 <img_mgmt_state_flags+0x5a>
    flags = 0;
   17d06:	2000      	movs	r0, #0
        break;
    }

    /* Slot 0 is always active. */
    /* XXX: The slot 0 assumption only holds when running from flash. */
    if (query_slot == 0) {
   17d08:	b90c      	cbnz	r4, 17d0e <img_mgmt_state_flags+0x36>
        flags |= IMG_MGMT_STATE_F_ACTIVE;
   17d0a:	f040 0004 	orr.w	r0, r0, #4
    }

    return flags;
}
   17d0e:	bd10      	pop	{r4, pc}
        if (query_slot == 0) {
   17d10:	b18c      	cbz	r4, 17d36 <img_mgmt_state_flags+0x5e>
        } else if (query_slot == 1) {
   17d12:	2c01      	cmp	r4, #1
   17d14:	d011      	beq.n	17d3a <img_mgmt_state_flags+0x62>
    flags = 0;
   17d16:	2000      	movs	r0, #0
   17d18:	e7f6      	b.n	17d08 <img_mgmt_state_flags+0x30>
        if (query_slot == 0) {
   17d1a:	b184      	cbz	r4, 17d3e <img_mgmt_state_flags+0x66>
        } else if (query_slot == 1) {
   17d1c:	2c01      	cmp	r4, #1
   17d1e:	d010      	beq.n	17d42 <img_mgmt_state_flags+0x6a>
    flags = 0;
   17d20:	2000      	movs	r0, #0
   17d22:	e7f1      	b.n	17d08 <img_mgmt_state_flags+0x30>
        if (query_slot == 0) {
   17d24:	b17c      	cbz	r4, 17d46 <img_mgmt_state_flags+0x6e>
        } else if (query_slot == 1) {
   17d26:	2c01      	cmp	r4, #1
   17d28:	d00f      	beq.n	17d4a <img_mgmt_state_flags+0x72>
    flags = 0;
   17d2a:	2000      	movs	r0, #0
   17d2c:	e7ec      	b.n	17d08 <img_mgmt_state_flags+0x30>
   17d2e:	2000      	movs	r0, #0
   17d30:	e7ea      	b.n	17d08 <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_ACTIVE;
   17d32:	2006      	movs	r0, #6
   17d34:	e7e8      	b.n	17d08 <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   17d36:	2002      	movs	r0, #2
   17d38:	e7e6      	b.n	17d08 <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_PENDING;
   17d3a:	2001      	movs	r0, #1
   17d3c:	e7e4      	b.n	17d08 <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   17d3e:	2002      	movs	r0, #2
   17d40:	e7e2      	b.n	17d08 <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_PENDING | IMG_MGMT_STATE_F_PERMANENT;
   17d42:	2009      	movs	r0, #9
   17d44:	e7e0      	b.n	17d08 <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_ACTIVE;
   17d46:	2004      	movs	r0, #4
   17d48:	e7de      	b.n	17d08 <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   17d4a:	2002      	movs	r0, #2
   17d4c:	e7dc      	b.n	17d08 <img_mgmt_state_flags+0x30>

00017d4e <img_mgmt_state_any_pending>:
 * Indicates whether any image slot is pending (i.e., whether a test swap will
 * happen on the next reboot.
 */
int
img_mgmt_state_any_pending(void)
{
   17d4e:	b508      	push	{r3, lr}
    return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   17d50:	2000      	movs	r0, #0
   17d52:	f7ff ffc1 	bl	17cd8 <img_mgmt_state_flags>
   17d56:	f010 0f01 	tst.w	r0, #1
   17d5a:	d001      	beq.n	17d60 <img_mgmt_state_any_pending+0x12>
   17d5c:	2001      	movs	r0, #1
           img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
}
   17d5e:	bd08      	pop	{r3, pc}
           img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
   17d60:	2001      	movs	r0, #1
   17d62:	f7ff ffb9 	bl	17cd8 <img_mgmt_state_flags>
    return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   17d66:	f010 0f01 	tst.w	r0, #1
   17d6a:	d001      	beq.n	17d70 <img_mgmt_state_any_pending+0x22>
   17d6c:	2001      	movs	r0, #1
   17d6e:	e7f6      	b.n	17d5e <img_mgmt_state_any_pending+0x10>
   17d70:	2000      	movs	r0, #0
   17d72:	e7f4      	b.n	17d5e <img_mgmt_state_any_pending+0x10>

00017d74 <img_mgmt_slot_in_use>:
 * Indicates whether the specified slot has any flags.  If no flags are set,
 * the slot can be freely erased.
 */
int
img_mgmt_slot_in_use(int slot)
{
   17d74:	b508      	push	{r3, lr}
    uint8_t state_flags;

    state_flags = img_mgmt_state_flags(slot);
   17d76:	f7ff ffaf 	bl	17cd8 <img_mgmt_state_flags>
    return state_flags & IMG_MGMT_STATE_F_ACTIVE       ||
           state_flags & IMG_MGMT_STATE_F_CONFIRMED    ||
   17d7a:	f010 0f06 	tst.w	r0, #6
   17d7e:	d106      	bne.n	17d8e <img_mgmt_slot_in_use+0x1a>
   17d80:	f010 0f01 	tst.w	r0, #1
   17d84:	d101      	bne.n	17d8a <img_mgmt_slot_in_use+0x16>
   17d86:	2000      	movs	r0, #0
   17d88:	e002      	b.n	17d90 <img_mgmt_slot_in_use+0x1c>
   17d8a:	2001      	movs	r0, #1
   17d8c:	e000      	b.n	17d90 <img_mgmt_slot_in_use+0x1c>
   17d8e:	2001      	movs	r0, #1
           state_flags & IMG_MGMT_STATE_F_PENDING;
}
   17d90:	bd08      	pop	{r3, pc}

00017d92 <img_mgmt_state_set_pending>:
 * argument is specified, the system doesn't require a confirm after the swap
 * occurs.
 */
int
img_mgmt_state_set_pending(int slot, int permanent)
{
   17d92:	b530      	push	{r4, r5, lr}
   17d94:	b089      	sub	sp, #36	; 0x24
   17d96:	4604      	mov	r4, r0
   17d98:	460d      	mov	r5, r1
    uint8_t hash[IMAGE_HASH_LEN];
    uint8_t state_flags;
    const uint8_t *hashp;
    int rc;

    state_flags = img_mgmt_state_flags(slot);
   17d9a:	f7ff ff9d 	bl	17cd8 <img_mgmt_state_flags>

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED && slot != 0) {
   17d9e:	f010 0f02 	tst.w	r0, #2
   17da2:	d000      	beq.n	17da6 <img_mgmt_state_set_pending+0x14>
   17da4:	b92c      	cbnz	r4, 17db2 <img_mgmt_state_set_pending+0x20>
        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    rc = img_mgmt_impl_write_pending(slot, permanent);
   17da6:	1c29      	adds	r1, r5, #0
   17da8:	bf18      	it	ne
   17daa:	2101      	movne	r1, #1
   17dac:	4620      	mov	r0, r4
   17dae:	f000 faa6 	bl	182fe <img_mgmt_impl_write_pending>
        rc = MGMT_ERR_EUNKNOWN;
    }

done:
    /* Log the image hash if we know it. */
    rc = img_mgmt_read_info(slot, NULL, hash, NULL);
   17db2:	2300      	movs	r3, #0
   17db4:	466a      	mov	r2, sp
   17db6:	4619      	mov	r1, r3
   17db8:	4620      	mov	r0, r4
   17dba:	f7ff fd85 	bl	178c8 <img_mgmt_read_info>
    if (rc != 0) {
   17dbe:	4603      	mov	r3, r0
   17dc0:	b130      	cbz	r0, 17dd0 <img_mgmt_state_set_pending+0x3e>
        hashp = NULL;
   17dc2:	2100      	movs	r1, #0
    } else {
        hashp = hash;
    }

    if (permanent) {
   17dc4:	b935      	cbnz	r5, 17dd4 <img_mgmt_state_set_pending+0x42>
        return img_mgmt_impl_log_confirm(rc, hashp);
    } else {
        return img_mgmt_impl_log_pending(rc, hashp);
   17dc6:	4618      	mov	r0, r3
   17dc8:	f000 fb88 	bl	184dc <img_mgmt_impl_log_pending>
    }
}
   17dcc:	b009      	add	sp, #36	; 0x24
   17dce:	bd30      	pop	{r4, r5, pc}
        hashp = hash;
   17dd0:	4669      	mov	r1, sp
   17dd2:	e7f7      	b.n	17dc4 <img_mgmt_state_set_pending+0x32>
        return img_mgmt_impl_log_confirm(rc, hashp);
   17dd4:	4618      	mov	r0, r3
   17dd6:	f000 fb8b 	bl	184f0 <img_mgmt_impl_log_confirm>
   17dda:	e7f7      	b.n	17dcc <img_mgmt_state_set_pending+0x3a>

00017ddc <img_mgmt_state_confirm>:
 * Confirms the current image state.  Prevents a fallback from occurring on the
 * next reboot if the active image is currently being tested.
 */
int
img_mgmt_state_confirm(void)
{
   17ddc:	b510      	push	{r4, lr}
    int rc;

    /* Confirm disallowed if a test is pending. */
    if (img_mgmt_state_any_pending()) {
   17dde:	f7ff ffb6 	bl	17d4e <img_mgmt_state_any_pending>
   17de2:	b128      	cbz	r0, 17df0 <img_mgmt_state_confirm+0x14>
        rc = MGMT_ERR_EBADSTATE;
   17de4:	2406      	movs	r4, #6
        rc = MGMT_ERR_EUNKNOWN;
    }

     img_mgmt_dfu_confirmed();
err:
    return img_mgmt_impl_log_confirm(rc, NULL);
   17de6:	2100      	movs	r1, #0
   17de8:	4620      	mov	r0, r4
   17dea:	f000 fb81 	bl	184f0 <img_mgmt_impl_log_confirm>
}
   17dee:	bd10      	pop	{r4, pc}
    rc = img_mgmt_impl_write_confirmed();
   17df0:	f000 fac9 	bl	18386 <img_mgmt_impl_write_confirmed>
    if (rc != 0) {
   17df4:	4604      	mov	r4, r0
   17df6:	b100      	cbz	r0, 17dfa <img_mgmt_state_confirm+0x1e>
        rc = MGMT_ERR_EUNKNOWN;
   17df8:	2401      	movs	r4, #1
     img_mgmt_dfu_confirmed();
   17dfa:	f7ff ff4f 	bl	17c9c <img_mgmt_dfu_confirmed>
   17dfe:	e7f2      	b.n	17de6 <img_mgmt_state_confirm+0xa>

00017e00 <img_mgmt_state_read>:
/**
 * Command handler: image state read
 */
int
img_mgmt_state_read(struct mgmt_ctxt *ctxt)
{
   17e00:	b5f0      	push	{r4, r5, r6, r7, lr}
   17e02:	b09b      	sub	sp, #108	; 0x6c
   17e04:	4605      	mov	r5, r0
   17e06:	2206      	movs	r2, #6
   17e08:	4959      	ldr	r1, [pc, #356]	; (17f70 <img_mgmt_state_read+0x170>)
   17e0a:	f001 fb51 	bl	194b0 <cbor_encode_text_string>
   17e0e:	4604      	mov	r4, r0
    int i;

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "images");

    err |= cbor_encoder_create_array(&ctxt->encoder, &images,
   17e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17e14:	a905      	add	r1, sp, #20
   17e16:	4628      	mov	r0, r5
   17e18:	f001 fb52 	bl	194c0 <cbor_encoder_create_array>
   17e1c:	4304      	orrs	r4, r0
                                       CborIndefiniteLength);
    for (i = 0; i < 2; i++) {
   17e1e:	2600      	movs	r6, #0
   17e20:	e000      	b.n	17e24 <img_mgmt_state_read+0x24>
   17e22:	3601      	adds	r6, #1
   17e24:	2e01      	cmp	r6, #1
   17e26:	f300 808a 	bgt.w	17f3e <img_mgmt_state_read+0x13e>
        rc = img_mgmt_read_info(i, &ver, hash, &flags);
   17e2a:	466b      	mov	r3, sp
   17e2c:	aa0b      	add	r2, sp, #44	; 0x2c
   17e2e:	a909      	add	r1, sp, #36	; 0x24
   17e30:	4630      	mov	r0, r6
   17e32:	f7ff fd49 	bl	178c8 <img_mgmt_read_info>
        if (rc != 0) {
   17e36:	2800      	cmp	r0, #0
   17e38:	d1f3      	bne.n	17e22 <img_mgmt_state_read+0x22>
            continue;
        }

        state_flags = img_mgmt_state_flags(i);
   17e3a:	4630      	mov	r0, r6
   17e3c:	f7ff ff4c 	bl	17cd8 <img_mgmt_state_flags>
   17e40:	4607      	mov	r7, r0

        err |= cbor_encoder_create_map(&images, &image,
   17e42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17e46:	a901      	add	r1, sp, #4
   17e48:	a805      	add	r0, sp, #20
   17e4a:	f001 fb3f 	bl	194cc <cbor_encoder_create_map>
   17e4e:	4304      	orrs	r4, r0
   17e50:	2204      	movs	r2, #4
   17e52:	4948      	ldr	r1, [pc, #288]	; (17f74 <img_mgmt_state_read+0x174>)
   17e54:	eb0d 0002 	add.w	r0, sp, r2
   17e58:	f001 fb2a 	bl	194b0 <cbor_encode_text_string>
                                         CborIndefiniteLength);
        err |= cbor_encode_text_stringz(&image, "slot");
   17e5c:	4304      	orrs	r4, r0
        err |= cbor_encode_int(&image, i);
   17e5e:	4632      	mov	r2, r6
   17e60:	17f3      	asrs	r3, r6, #31
   17e62:	a801      	add	r0, sp, #4
   17e64:	f001 faa3 	bl	193ae <cbor_encode_int>
   17e68:	4304      	orrs	r4, r0
   17e6a:	2207      	movs	r2, #7
   17e6c:	4942      	ldr	r1, [pc, #264]	; (17f78 <img_mgmt_state_read+0x178>)
   17e6e:	a801      	add	r0, sp, #4
   17e70:	f001 fb1e 	bl	194b0 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "version");
   17e74:	4304      	orrs	r4, r0
        img_mgmt_ver_str(&ver, vers_str);
   17e76:	a913      	add	r1, sp, #76	; 0x4c
   17e78:	a809      	add	r0, sp, #36	; 0x24
   17e7a:	f000 f8db 	bl	18034 <img_mgmt_ver_str>
   17e7e:	a813      	add	r0, sp, #76	; 0x4c
   17e80:	f7f3 fd64 	bl	b94c <strlen>
   17e84:	4602      	mov	r2, r0
   17e86:	a913      	add	r1, sp, #76	; 0x4c
   17e88:	a801      	add	r0, sp, #4
   17e8a:	f001 fb11 	bl	194b0 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&image, vers_str);
   17e8e:	4304      	orrs	r4, r0
   17e90:	2204      	movs	r2, #4
   17e92:	493a      	ldr	r1, [pc, #232]	; (17f7c <img_mgmt_state_read+0x17c>)
   17e94:	eb0d 0002 	add.w	r0, sp, r2
   17e98:	f001 fb0a 	bl	194b0 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "hash");
   17e9c:	4304      	orrs	r4, r0
        err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
   17e9e:	2220      	movs	r2, #32
   17ea0:	a90b      	add	r1, sp, #44	; 0x2c
   17ea2:	a801      	add	r0, sp, #4
   17ea4:	f001 fafc 	bl	194a0 <cbor_encode_byte_string>
   17ea8:	4304      	orrs	r4, r0
   17eaa:	2208      	movs	r2, #8
   17eac:	4934      	ldr	r1, [pc, #208]	; (17f80 <img_mgmt_state_read+0x180>)
   17eae:	a801      	add	r0, sp, #4
   17eb0:	f001 fafe 	bl	194b0 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "bootable");
   17eb4:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   17eb6:	9b00      	ldr	r3, [sp, #0]
   17eb8:	f013 0f10 	tst.w	r3, #16
                                          int iov_len);
CBOR_API CborError cbor_encode_floating_point(CborEncoder *encoder, CborType fpType, const void *value);
CBOR_INLINE_API int cbor_encode_bytes_written(CborEncoder *encoder)
{   return encoder->writer->bytes_written; }
CBOR_INLINE_API CborError cbor_encode_boolean(CborEncoder *encoder, bool value)
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   17ebc:	bf14      	ite	ne
   17ebe:	2114      	movne	r1, #20
   17ec0:	2115      	moveq	r1, #21
   17ec2:	a801      	add	r0, sp, #4
   17ec4:	f001 fabd 	bl	19442 <cbor_encode_simple_value>
   17ec8:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   17eca:	2207      	movs	r2, #7
   17ecc:	492d      	ldr	r1, [pc, #180]	; (17f84 <img_mgmt_state_read+0x184>)
   17ece:	a801      	add	r0, sp, #4
   17ed0:	f001 faee 	bl	194b0 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "pending");
   17ed4:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image,
   17ed6:	f007 0101 	and.w	r1, r7, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   17eda:	3114      	adds	r1, #20
   17edc:	a801      	add	r0, sp, #4
   17ede:	f001 fab0 	bl	19442 <cbor_encode_simple_value>
   17ee2:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   17ee4:	2209      	movs	r2, #9
   17ee6:	4928      	ldr	r1, [pc, #160]	; (17f88 <img_mgmt_state_read+0x188>)
   17ee8:	a801      	add	r0, sp, #4
   17eea:	f001 fae1 	bl	194b0 <cbor_encode_text_string>
                                     state_flags & IMG_MGMT_STATE_F_PENDING);

        err |= cbor_encode_text_stringz(&image, "confirmed");
   17eee:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image,
   17ef0:	f3c7 0140 	ubfx	r1, r7, #1, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   17ef4:	3114      	adds	r1, #20
   17ef6:	a801      	add	r0, sp, #4
   17ef8:	f001 faa3 	bl	19442 <cbor_encode_simple_value>
   17efc:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   17efe:	2206      	movs	r2, #6
   17f00:	4922      	ldr	r1, [pc, #136]	; (17f8c <img_mgmt_state_read+0x18c>)
   17f02:	a801      	add	r0, sp, #4
   17f04:	f001 fad4 	bl	194b0 <cbor_encode_text_string>
                                     state_flags & IMG_MGMT_STATE_F_CONFIRMED);

        err |= cbor_encode_text_stringz(&image, "active");
   17f08:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image,
   17f0a:	f3c7 0180 	ubfx	r1, r7, #2, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   17f0e:	3114      	adds	r1, #20
   17f10:	a801      	add	r0, sp, #4
   17f12:	f001 fa96 	bl	19442 <cbor_encode_simple_value>
   17f16:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   17f18:	2209      	movs	r2, #9
   17f1a:	491d      	ldr	r1, [pc, #116]	; (17f90 <img_mgmt_state_read+0x190>)
   17f1c:	a801      	add	r0, sp, #4
   17f1e:	f001 fac7 	bl	194b0 <cbor_encode_text_string>
                                     state_flags & IMG_MGMT_STATE_F_ACTIVE);

        err |= cbor_encode_text_stringz(&image, "permanent");
   17f22:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image,
   17f24:	f3c7 01c0 	ubfx	r1, r7, #3, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   17f28:	3114      	adds	r1, #20
   17f2a:	a801      	add	r0, sp, #4
   17f2c:	f001 fa89 	bl	19442 <cbor_encode_simple_value>
   17f30:	4304      	orrs	r4, r0
                                     state_flags & IMG_MGMT_STATE_F_PERMANENT);

        err |= cbor_encoder_close_container(&images, &image);
   17f32:	a901      	add	r1, sp, #4
   17f34:	a805      	add	r0, sp, #20
   17f36:	f001 fad9 	bl	194ec <cbor_encoder_close_container>
   17f3a:	4304      	orrs	r4, r0
   17f3c:	e771      	b.n	17e22 <img_mgmt_state_read+0x22>
    }

    err |= cbor_encoder_close_container(&ctxt->encoder, &images);
   17f3e:	a905      	add	r1, sp, #20
   17f40:	4628      	mov	r0, r5
   17f42:	f001 fad3 	bl	194ec <cbor_encoder_close_container>
   17f46:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   17f48:	220b      	movs	r2, #11
   17f4a:	4912      	ldr	r1, [pc, #72]	; (17f94 <img_mgmt_state_read+0x194>)
   17f4c:	4628      	mov	r0, r5
   17f4e:	f001 faaf 	bl	194b0 <cbor_encode_text_string>

    err |= cbor_encode_text_stringz(&ctxt->encoder, "splitStatus");
   17f52:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&ctxt->encoder, 0);
   17f54:	2200      	movs	r2, #0
   17f56:	2300      	movs	r3, #0
   17f58:	4628      	mov	r0, r5
   17f5a:	f001 fa28 	bl	193ae <cbor_encode_int>

    if (err != 0) {
   17f5e:	ea54 0300 	orrs.w	r3, r4, r0
   17f62:	d102      	bne.n	17f6a <img_mgmt_state_read+0x16a>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   17f64:	2000      	movs	r0, #0
}
   17f66:	b01b      	add	sp, #108	; 0x6c
   17f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   17f6a:	2002      	movs	r0, #2
   17f6c:	e7fb      	b.n	17f66 <img_mgmt_state_read+0x166>
   17f6e:	bf00      	nop
   17f70:	000292f0 	.word	0x000292f0
   17f74:	000292f8 	.word	0x000292f8
   17f78:	00029300 	.word	0x00029300
   17f7c:	00029308 	.word	0x00029308
   17f80:	00029310 	.word	0x00029310
   17f84:	0002931c 	.word	0x0002931c
   17f88:	00029324 	.word	0x00029324
   17f8c:	00029330 	.word	0x00029330
   17f90:	00029338 	.word	0x00029338
   17f94:	00029344 	.word	0x00029344

00017f98 <img_mgmt_state_write>:
/**
 * Command handler: image state write
 */
int
img_mgmt_state_write(struct mgmt_ctxt *ctxt)
{
   17f98:	b510      	push	{r4, lr}
   17f9a:	b0b0      	sub	sp, #192	; 0xc0
   17f9c:	4604      	mov	r4, r0
    size_t hash_len;
    bool confirm;
    int slot;
    int rc;

    const struct cbor_attr_t write_attr[] = {
   17f9e:	228c      	movs	r2, #140	; 0x8c
   17fa0:	2100      	movs	r1, #0
   17fa2:	a801      	add	r0, sp, #4
   17fa4:	f7f3 fc9d 	bl	b8e2 <memset>
   17fa8:	4b20      	ldr	r3, [pc, #128]	; (1802c <img_mgmt_state_write+0x94>)
   17faa:	9300      	str	r3, [sp, #0]
   17fac:	2303      	movs	r3, #3
   17fae:	f88d 3004 	strb.w	r3, [sp, #4]
   17fb2:	ab27      	add	r3, sp, #156	; 0x9c
   17fb4:	9302      	str	r3, [sp, #8]
   17fb6:	ab26      	add	r3, sp, #152	; 0x98
   17fb8:	9303      	str	r3, [sp, #12]
   17fba:	2321      	movs	r3, #33	; 0x21
   17fbc:	930a      	str	r3, [sp, #40]	; 0x28
   17fbe:	4b1c      	ldr	r3, [pc, #112]	; (18030 <img_mgmt_state_write+0x98>)
   17fc0:	930c      	str	r3, [sp, #48]	; 0x30
   17fc2:	2305      	movs	r3, #5
   17fc4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   17fc8:	f10d 0397 	add.w	r3, sp, #151	; 0x97
   17fcc:	930e      	str	r3, [sp, #56]	; 0x38
            .dflt.boolean = false,
        },
        [2] = { 0 },
    };

    hash_len = 0;
   17fce:	2300      	movs	r3, #0
   17fd0:	9326      	str	r3, [sp, #152]	; 0x98
    rc = cbor_read_object(&ctxt->it, write_attr);
   17fd2:	4669      	mov	r1, sp
   17fd4:	f104 001c 	add.w	r0, r4, #28
   17fd8:	f010 fa00 	bl	283dc <cbor_read_object>
    if (rc != 0) {
   17fdc:	bb10      	cbnz	r0, 18024 <img_mgmt_state_write+0x8c>
   17fde:	4603      	mov	r3, r0
        return MGMT_ERR_EINVAL;
    }

    /* Determine which slot is being operated on. */
    if (hash_len == 0) {
   17fe0:	9a26      	ldr	r2, [sp, #152]	; 0x98
   17fe2:	b97a      	cbnz	r2, 18004 <img_mgmt_state_write+0x6c>
        if (confirm) {
   17fe4:	f89d 2097 	ldrb.w	r2, [sp, #151]	; 0x97
   17fe8:	b152      	cbz	r2, 18000 <img_mgmt_state_write+0x68>
        if (slot < 0) {
            return MGMT_ERR_EINVAL;
        }
    }

    if (slot == 0 && confirm) {
   17fea:	f89d 2097 	ldrb.w	r2, [sp, #151]	; 0x97
   17fee:	b992      	cbnz	r2, 18016 <img_mgmt_state_write+0x7e>
        /* Confirm current setup. */
        rc = img_mgmt_state_confirm();
    } else {
        rc = img_mgmt_state_set_pending(slot, confirm);
   17ff0:	f89d 1097 	ldrb.w	r1, [sp, #151]	; 0x97
   17ff4:	4618      	mov	r0, r3
   17ff6:	f7ff fecc 	bl	17d92 <img_mgmt_state_set_pending>
    }
    if (rc != 0) {
   17ffa:	b178      	cbz	r0, 1801c <img_mgmt_state_write+0x84>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   17ffc:	b030      	add	sp, #192	; 0xc0
   17ffe:	bd10      	pop	{r4, pc}
            return MGMT_ERR_EINVAL;
   18000:	2003      	movs	r0, #3
   18002:	e7fb      	b.n	17ffc <img_mgmt_state_write+0x64>
        slot = img_mgmt_find_by_hash(hash, NULL);
   18004:	2100      	movs	r1, #0
   18006:	a827      	add	r0, sp, #156	; 0x9c
   18008:	f7ff fd05 	bl	17a16 <img_mgmt_find_by_hash>
        if (slot < 0) {
   1800c:	1e03      	subs	r3, r0, #0
   1800e:	db0b      	blt.n	18028 <img_mgmt_state_write+0x90>
    if (slot == 0 && confirm) {
   18010:	2b00      	cmp	r3, #0
   18012:	d1ed      	bne.n	17ff0 <img_mgmt_state_write+0x58>
   18014:	e7e9      	b.n	17fea <img_mgmt_state_write+0x52>
        rc = img_mgmt_state_confirm();
   18016:	f7ff fee1 	bl	17ddc <img_mgmt_state_confirm>
   1801a:	e7ee      	b.n	17ffa <img_mgmt_state_write+0x62>
    rc = img_mgmt_state_read(ctxt);
   1801c:	4620      	mov	r0, r4
   1801e:	f7ff feef 	bl	17e00 <img_mgmt_state_read>
   18022:	e7eb      	b.n	17ffc <img_mgmt_state_write+0x64>
        return MGMT_ERR_EINVAL;
   18024:	2003      	movs	r0, #3
   18026:	e7e9      	b.n	17ffc <img_mgmt_state_write+0x64>
            return MGMT_ERR_EINVAL;
   18028:	2003      	movs	r0, #3
   1802a:	e7e7      	b.n	17ffc <img_mgmt_state_write+0x64>
   1802c:	00029308 	.word	0x00029308
   18030:	00029350 	.word	0x00029350

00018034 <img_mgmt_ver_str>:
#include "img_mgmt/image.h"
#include "img_mgmt/img_mgmt.h"

int
img_mgmt_ver_str(const struct image_version *ver, char *dst)
{
   18034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18036:	4606      	mov	r6, r0
   18038:	460c      	mov	r4, r1
    int off;

    off = 0;

    off += ull_to_s(ver->iv_major, INT_MAX, dst + off);
   1803a:	460b      	mov	r3, r1
   1803c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   18040:	7830      	ldrb	r0, [r6, #0]
   18042:	2100      	movs	r1, #0
   18044:	f00f fe1c 	bl	27c80 <ull_to_s>

    dst[off++] = '.';
   18048:	1c45      	adds	r5, r0, #1
   1804a:	272e      	movs	r7, #46	; 0x2e
   1804c:	5427      	strb	r7, [r4, r0]
    off += ull_to_s(ver->iv_minor, INT_MAX, dst + off);
   1804e:	1963      	adds	r3, r4, r5
   18050:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   18054:	7870      	ldrb	r0, [r6, #1]
   18056:	2100      	movs	r1, #0
   18058:	f00f fe12 	bl	27c80 <ull_to_s>
   1805c:	4428      	add	r0, r5

    dst[off++] = '.';
   1805e:	1c45      	adds	r5, r0, #1
   18060:	5427      	strb	r7, [r4, r0]
    off += ull_to_s(ver->iv_revision, INT_MAX, dst + off);
   18062:	1963      	adds	r3, r4, r5
   18064:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   18068:	8870      	ldrh	r0, [r6, #2]
   1806a:	2100      	movs	r1, #0
   1806c:	f00f fe08 	bl	27c80 <ull_to_s>
   18070:	4428      	add	r0, r5

    if (ver->iv_build_num != 0) {
   18072:	6873      	ldr	r3, [r6, #4]
   18074:	b90b      	cbnz	r3, 1807a <img_mgmt_ver_str+0x46>
        dst[off++] = '.';
        off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
    }

    return 0;
}
   18076:	2000      	movs	r0, #0
   18078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dst[off++] = '.';
   1807a:	1c43      	adds	r3, r0, #1
   1807c:	5427      	strb	r7, [r4, r0]
        off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
   1807e:	4423      	add	r3, r4
   18080:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   18084:	6870      	ldr	r0, [r6, #4]
   18086:	2100      	movs	r1, #0
   18088:	f00f fdfa 	bl	27c80 <ull_to_s>
   1808c:	e7f3      	b.n	18076 <img_mgmt_ver_str+0x42>

0001808e <img_mgmt_vercmp>:
 * @return                       1 if a > b
 */
static int
img_mgmt_vercmp(const struct image_version *a, const struct image_version *b)
{
    if (a->iv_major < b->iv_major) {
   1808e:	7802      	ldrb	r2, [r0, #0]
   18090:	780b      	ldrb	r3, [r1, #0]
   18092:	429a      	cmp	r2, r3
   18094:	d30e      	bcc.n	180b4 <img_mgmt_vercmp+0x26>
        return -1;
    } else if (a->iv_major > b->iv_major) {
   18096:	d810      	bhi.n	180ba <img_mgmt_vercmp+0x2c>
        return 1;
    }

    if (a->iv_minor < b->iv_minor) {
   18098:	7842      	ldrb	r2, [r0, #1]
   1809a:	784b      	ldrb	r3, [r1, #1]
   1809c:	429a      	cmp	r2, r3
   1809e:	d30e      	bcc.n	180be <img_mgmt_vercmp+0x30>
        return -1;
    } else if (a->iv_minor > b->iv_minor) {
   180a0:	d810      	bhi.n	180c4 <img_mgmt_vercmp+0x36>
        return 1;
    }

    if (a->iv_revision < b->iv_revision) {
   180a2:	8842      	ldrh	r2, [r0, #2]
   180a4:	884b      	ldrh	r3, [r1, #2]
   180a6:	429a      	cmp	r2, r3
   180a8:	d30e      	bcc.n	180c8 <img_mgmt_vercmp+0x3a>
        return -1;
    } else if (a->iv_revision > b->iv_revision) {
   180aa:	d801      	bhi.n	180b0 <img_mgmt_vercmp+0x22>
        return 1;
    }

    /* Note: For semver compatibility, don't compare the 32-bit build num. */

    return 0;
   180ac:	2000      	movs	r0, #0
}
   180ae:	4770      	bx	lr
        return 1;
   180b0:	2001      	movs	r0, #1
   180b2:	4770      	bx	lr
        return -1;
   180b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   180b8:	4770      	bx	lr
        return 1;
   180ba:	2001      	movs	r0, #1
   180bc:	4770      	bx	lr
        return -1;
   180be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   180c2:	4770      	bx	lr
        return 1;
   180c4:	2001      	movs	r0, #1
   180c6:	4770      	bx	lr
        return -1;
   180c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   180cc:	4770      	bx	lr

000180ce <img_mgmt_find_best_area_id>:
{
   180ce:	b530      	push	{r4, r5, lr}
   180d0:	b083      	sub	sp, #12
    for (i = 0; i < 2; i++) {
   180d2:	2400      	movs	r4, #0
    int best = -1;
   180d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
   180d8:	e000      	b.n	180dc <img_mgmt_find_best_area_id+0xe>
   180da:	3401      	adds	r4, #1
   180dc:	2c01      	cmp	r4, #1
   180de:	dc10      	bgt.n	18102 <img_mgmt_find_best_area_id+0x34>
        rc = img_mgmt_read_info(i, &ver, NULL, NULL);
   180e0:	2300      	movs	r3, #0
   180e2:	461a      	mov	r2, r3
   180e4:	4669      	mov	r1, sp
   180e6:	4620      	mov	r0, r4
   180e8:	f7ff fbee 	bl	178c8 <img_mgmt_read_info>
        if (rc < 0) {
   180ec:	2800      	cmp	r0, #0
   180ee:	dbf4      	blt.n	180da <img_mgmt_find_best_area_id+0xc>
        if (rc == 0) {
   180f0:	b930      	cbnz	r0, 18100 <img_mgmt_find_best_area_id+0x32>
            if (img_mgmt_slot_in_use(i)) {
   180f2:	4620      	mov	r0, r4
   180f4:	f7ff fe3e 	bl	17d74 <img_mgmt_slot_in_use>
   180f8:	2800      	cmp	r0, #0
   180fa:	d1ee      	bne.n	180da <img_mgmt_find_best_area_id+0xc>
                best = i;
   180fc:	4625      	mov	r5, r4
   180fe:	e7ec      	b.n	180da <img_mgmt_find_best_area_id+0xc>
        best = i;
   18100:	4625      	mov	r5, r4
    if (best >= 0) {
   18102:	2d00      	cmp	r5, #0
   18104:	db03      	blt.n	1810e <img_mgmt_find_best_area_id+0x40>
        best = flash_area_id_from_image_slot(best);
   18106:	4628      	mov	r0, r5
   18108:	f7fe ff19 	bl	16f3e <flash_area_id_from_image_slot>
   1810c:	4605      	mov	r5, r0
}
   1810e:	4628      	mov	r0, r5
   18110:	b003      	add	sp, #12
   18112:	bd30      	pop	{r4, r5, pc}

00018114 <img_mgmt_impl_upload_inspect>:
 */
int
img_mgmt_impl_upload_inspect(const struct img_mgmt_upload_req *req,
                             struct img_mgmt_upload_action *action,
                             const char **errstr)
{
   18114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18118:	b084      	sub	sp, #16
    struct image_version cur_ver;
    uint8_t rem_bytes;
    bool empty;
    int rc;

    memset(action, 0, sizeof *action);
   1811a:	2300      	movs	r3, #0
   1811c:	600b      	str	r3, [r1, #0]
   1811e:	604b      	str	r3, [r1, #4]
   18120:	608b      	str	r3, [r1, #8]
   18122:	60cb      	str	r3, [r1, #12]
   18124:	610b      	str	r3, [r1, #16]
   18126:	614b      	str	r3, [r1, #20]

    if (req->off == -1) {
   18128:	e9d0 6700 	ldrd	r6, r7, [r0]
   1812c:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   18130:	bf08      	it	eq
   18132:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   18136:	d043      	beq.n	181c0 <img_mgmt_impl_upload_inspect+0xac>
   18138:	4690      	mov	r8, r2
   1813a:	460c      	mov	r4, r1
   1813c:	4605      	mov	r5, r0
        /* Request did not include an `off` field. */
        *errstr = img_mgmt_err_str_hdr_malformed;
        return MGMT_ERR_EINVAL;
    }

    if (req->off == 0) {
   1813e:	ea56 0307 	orrs.w	r3, r6, r7
   18142:	d17f      	bne.n	18244 <img_mgmt_impl_upload_inspect+0x130>
        /* First upload chunk. */
        if (req->data_len < sizeof(struct image_header)) {
   18144:	6903      	ldr	r3, [r0, #16]
   18146:	2b1f      	cmp	r3, #31
   18148:	d93d      	bls.n	181c6 <img_mgmt_impl_upload_inspect+0xb2>
             */
            *errstr = img_mgmt_err_str_hdr_malformed;
            return MGMT_ERR_EINVAL;
        }

        if (req->size == -1) {
   1814a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   1814e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   18152:	bf08      	it	eq
   18154:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   18158:	d039      	beq.n	181ce <img_mgmt_impl_upload_inspect+0xba>
            /* Request did not include a `len` field. */
            *errstr = img_mgmt_err_str_hdr_malformed;
            return MGMT_ERR_EINVAL;
        }
        action->size = req->size;
   1815a:	e9c1 2300 	strd	r2, r3, [r1]

        hdr = (struct image_header *)req->img_data;
        if (hdr->ih_magic != IMAGE_MAGIC) {
   1815e:	6982      	ldr	r2, [r0, #24]
   18160:	4b52      	ldr	r3, [pc, #328]	; (182ac <img_mgmt_impl_upload_inspect+0x198>)
   18162:	429a      	cmp	r2, r3
   18164:	d138      	bne.n	181d8 <img_mgmt_impl_upload_inspect+0xc4>
            *errstr = img_mgmt_err_str_magic_mismatch;
            return MGMT_ERR_EINVAL;
        }

        if (req->data_sha_len > IMG_MGMT_DATA_SHA_LEN) {
   18166:	6942      	ldr	r2, [r0, #20]
   18168:	2a20      	cmp	r2, #32
   1816a:	f200 8099 	bhi.w	182a0 <img_mgmt_impl_upload_inspect+0x18c>
         * If request includes proper data hash we can check whether there is
         * upload in progress (interrupted due to e.g. link disconnection) with
         * the same data hash so we can just resume it by simply including
         * current upload offset in response.
         */
        if ((req->data_sha_len > 0) && (g_img_mgmt_state.area_id != -1)) {
   1816e:	b142      	cbz	r2, 18182 <img_mgmt_impl_upload_inspect+0x6e>
   18170:	4b4f      	ldr	r3, [pc, #316]	; (182b0 <img_mgmt_impl_upload_inspect+0x19c>)
   18172:	681b      	ldr	r3, [r3, #0]
   18174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   18178:	d003      	beq.n	18182 <img_mgmt_impl_upload_inspect+0x6e>
            if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   1817a:	4b4d      	ldr	r3, [pc, #308]	; (182b0 <img_mgmt_impl_upload_inspect+0x19c>)
   1817c:	7b1b      	ldrb	r3, [r3, #12]
   1817e:	429a      	cmp	r2, r3
   18180:	d02f      	beq.n	181e2 <img_mgmt_impl_upload_inspect+0xce>
                                                        req->data_sha_len)) {
                return 0;
            }
        }

        action->area_id = img_mgmt_find_best_area_id();
   18182:	f7ff ffa4 	bl	180ce <img_mgmt_find_best_area_id>
   18186:	60e0      	str	r0, [r4, #12]
        if (action->area_id < 0) {
   18188:	2800      	cmp	r0, #0
   1818a:	db33      	blt.n	181f4 <img_mgmt_impl_upload_inspect+0xe0>
            /* No slot where to upload! */
            *errstr = img_mgmt_err_str_no_slot;
            return MGMT_ERR_ENOMEM;
        }

        if (req->upgrade) {
   1818c:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
   18190:	b163      	cbz	r3, 181ac <img_mgmt_impl_upload_inspect+0x98>
            /* User specified upgrade-only.  Make sure new image version is
             * greater than that of the currently running image.
             */
            rc = img_mgmt_my_version(&cur_ver);
   18192:	a801      	add	r0, sp, #4
   18194:	f7ff fd8c 	bl	17cb0 <img_mgmt_my_version>
            if (rc != 0) {
   18198:	2800      	cmp	r0, #0
   1819a:	f040 8083 	bne.w	182a4 <img_mgmt_impl_upload_inspect+0x190>
                return MGMT_ERR_EUNKNOWN;
            }

            if (img_mgmt_vercmp(&cur_ver, &hdr->ih_ver) >= 0) {
   1819e:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   181a2:	a801      	add	r0, sp, #4
   181a4:	f7ff ff73 	bl	1808e <img_mgmt_vercmp>
   181a8:	2800      	cmp	r0, #0
   181aa:	da28      	bge.n	181fe <img_mgmt_impl_upload_inspect+0xea>
        }

#if MYNEWT_VAL(IMG_MGMT_LAZY_ERASE)
        (void) empty;
#else
        rc = flash_area_open(action->area_id, &fa);
   181ac:	a903      	add	r1, sp, #12
   181ae:	7b20      	ldrb	r0, [r4, #12]
   181b0:	f7fe fe4e 	bl	16e50 <flash_area_open>
        if (rc) {
   181b4:	b340      	cbz	r0, 18208 <img_mgmt_impl_upload_inspect+0xf4>
            *errstr = img_mgmt_err_str_flash_open_failed;
   181b6:	2300      	movs	r3, #0
   181b8:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_EUNKNOWN;
   181bc:	2301      	movs	r3, #1
   181be:	e051      	b.n	18264 <img_mgmt_impl_upload_inspect+0x150>
        *errstr = img_mgmt_err_str_hdr_malformed;
   181c0:	6013      	str	r3, [r2, #0]
        return MGMT_ERR_EINVAL;
   181c2:	2303      	movs	r3, #3
   181c4:	e04e      	b.n	18264 <img_mgmt_impl_upload_inspect+0x150>
            *errstr = img_mgmt_err_str_hdr_malformed;
   181c6:	2300      	movs	r3, #0
   181c8:	6013      	str	r3, [r2, #0]
            return MGMT_ERR_EINVAL;
   181ca:	2303      	movs	r3, #3
   181cc:	e04a      	b.n	18264 <img_mgmt_impl_upload_inspect+0x150>
            *errstr = img_mgmt_err_str_hdr_malformed;
   181ce:	2300      	movs	r3, #0
   181d0:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_EINVAL;
   181d4:	2303      	movs	r3, #3
   181d6:	e045      	b.n	18264 <img_mgmt_impl_upload_inspect+0x150>
            *errstr = img_mgmt_err_str_magic_mismatch;
   181d8:	2300      	movs	r3, #0
   181da:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_EINVAL;
   181de:	2303      	movs	r3, #3
   181e0:	e040      	b.n	18264 <img_mgmt_impl_upload_inspect+0x150>
                            !memcmp(g_img_mgmt_state.data_sha, req->data_sha,
   181e2:	f500 7106 	add.w	r1, r0, #536	; 0x218
   181e6:	4833      	ldr	r0, [pc, #204]	; (182b4 <img_mgmt_impl_upload_inspect+0x1a0>)
   181e8:	f7f3 fb2e 	bl	b848 <memcmp>
            if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   181ec:	4603      	mov	r3, r0
   181ee:	2800      	cmp	r0, #0
   181f0:	d1c7      	bne.n	18182 <img_mgmt_impl_upload_inspect+0x6e>
   181f2:	e037      	b.n	18264 <img_mgmt_impl_upload_inspect+0x150>
            *errstr = img_mgmt_err_str_no_slot;
   181f4:	2300      	movs	r3, #0
   181f6:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_ENOMEM;
   181fa:	2302      	movs	r3, #2
   181fc:	e032      	b.n	18264 <img_mgmt_impl_upload_inspect+0x150>
                *errstr = img_mgmt_err_str_downgrade;
   181fe:	2300      	movs	r3, #0
   18200:	f8c8 3000 	str.w	r3, [r8]
                return MGMT_ERR_EBADSTATE;
   18204:	2306      	movs	r3, #6
   18206:	e02d      	b.n	18264 <img_mgmt_impl_upload_inspect+0x150>
        }

        rc = flash_area_is_empty(fa, &empty);
   18208:	f10d 0103 	add.w	r1, sp, #3
   1820c:	9803      	ldr	r0, [sp, #12]
   1820e:	f7fe fe7c 	bl	16f0a <flash_area_is_empty>
        flash_area_close(fa);
        if (rc) {
   18212:	2800      	cmp	r0, #0
   18214:	d148      	bne.n	182a8 <img_mgmt_impl_upload_inspect+0x194>
            return MGMT_ERR_EUNKNOWN;
        }

        action->erase = !empty;
   18216:	f89d 3003 	ldrb.w	r3, [sp, #3]
   1821a:	f083 0301 	eor.w	r3, r3, #1
   1821e:	7463      	strb	r3, [r4, #17]
            return 0;
        }
    }

    /* Calculate size of flash write. */
    action->write_bytes = req->data_len;
   18220:	692b      	ldr	r3, [r5, #16]
   18222:	60a3      	str	r3, [r4, #8]
    if (req->off + req->data_len < action->size) {
   18224:	e9d5 6700 	ldrd	r6, r7, [r5]
   18228:	6929      	ldr	r1, [r5, #16]
   1822a:	1872      	adds	r2, r6, r1
   1822c:	f147 0300 	adc.w	r3, r7, #0
   18230:	e9d4 0100 	ldrd	r0, r1, [r4]
   18234:	428b      	cmp	r3, r1
   18236:	bf08      	it	eq
   18238:	4282      	cmpeq	r2, r0
   1823a:	d317      	bcc.n	1826c <img_mgmt_impl_upload_inspect+0x158>
        if (rem_bytes) {
            action->write_bytes -= rem_bytes;
        }
    }

    action->proceed = true;
   1823c:	2301      	movs	r3, #1
   1823e:	7423      	strb	r3, [r4, #16]
    return 0;
   18240:	2300      	movs	r3, #0
   18242:	e00f      	b.n	18264 <img_mgmt_impl_upload_inspect+0x150>
        action->area_id = g_img_mgmt_state.area_id;
   18244:	491a      	ldr	r1, [pc, #104]	; (182b0 <img_mgmt_impl_upload_inspect+0x19c>)
   18246:	680b      	ldr	r3, [r1, #0]
   18248:	60e3      	str	r3, [r4, #12]
        action->size = g_img_mgmt_state.size;
   1824a:	688b      	ldr	r3, [r1, #8]
   1824c:	6023      	str	r3, [r4, #0]
   1824e:	2300      	movs	r3, #0
   18250:	6063      	str	r3, [r4, #4]
        if (req->off != g_img_mgmt_state.off) {
   18252:	e9d0 2300 	ldrd	r2, r3, [r0]
   18256:	6848      	ldr	r0, [r1, #4]
   18258:	2100      	movs	r1, #0
   1825a:	428b      	cmp	r3, r1
   1825c:	bf08      	it	eq
   1825e:	4282      	cmpeq	r2, r0
   18260:	d0de      	beq.n	18220 <img_mgmt_impl_upload_inspect+0x10c>
            return 0;
   18262:	2300      	movs	r3, #0
}
   18264:	4618      	mov	r0, r3
   18266:	b004      	add	sp, #16
   18268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = flash_area_open(action->area_id, &fa);
   1826c:	a903      	add	r1, sp, #12
   1826e:	7b20      	ldrb	r0, [r4, #12]
   18270:	f7fe fdee 	bl	16e50 <flash_area_open>
        if (rc) {
   18274:	b120      	cbz	r0, 18280 <img_mgmt_impl_upload_inspect+0x16c>
            *errstr = img_mgmt_err_str_flash_open_failed;
   18276:	2300      	movs	r3, #0
   18278:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_EUNKNOWN;
   1827c:	2301      	movs	r3, #1
   1827e:	e7f1      	b.n	18264 <img_mgmt_impl_upload_inspect+0x150>
        rem_bytes = req->data_len % flash_area_align(fa);
   18280:	692d      	ldr	r5, [r5, #16]
   18282:	9803      	ldr	r0, [sp, #12]
   18284:	f7fe fe37 	bl	16ef6 <flash_area_align>
   18288:	fbb5 f3f0 	udiv	r3, r5, r0
   1828c:	fb00 5013 	mls	r0, r0, r3, r5
        if (rem_bytes) {
   18290:	f010 0fff 	tst.w	r0, #255	; 0xff
   18294:	d0d2      	beq.n	1823c <img_mgmt_impl_upload_inspect+0x128>
            action->write_bytes -= rem_bytes;
   18296:	b2c0      	uxtb	r0, r0
   18298:	68a3      	ldr	r3, [r4, #8]
   1829a:	1a18      	subs	r0, r3, r0
   1829c:	60a0      	str	r0, [r4, #8]
   1829e:	e7cd      	b.n	1823c <img_mgmt_impl_upload_inspect+0x128>
            return MGMT_ERR_EINVAL;
   182a0:	2303      	movs	r3, #3
   182a2:	e7df      	b.n	18264 <img_mgmt_impl_upload_inspect+0x150>
                return MGMT_ERR_EUNKNOWN;
   182a4:	2301      	movs	r3, #1
   182a6:	e7dd      	b.n	18264 <img_mgmt_impl_upload_inspect+0x150>
            return MGMT_ERR_EUNKNOWN;
   182a8:	2301      	movs	r3, #1
   182aa:	e7db      	b.n	18264 <img_mgmt_impl_upload_inspect+0x150>
   182ac:	96f3b83d 	.word	0x96f3b83d
   182b0:	20008008 	.word	0x20008008
   182b4:	20008015 	.word	0x20008015

000182b8 <img_mgmt_impl_erase_slot>:

int
img_mgmt_impl_erase_slot(void)
{
   182b8:	b500      	push	{lr}
   182ba:	b083      	sub	sp, #12
    const struct flash_area *fa;
    bool empty;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   182bc:	a901      	add	r1, sp, #4
   182be:	2002      	movs	r0, #2
   182c0:	f7fe fdc6 	bl	16e50 <flash_area_open>
    if (rc != 0) {
   182c4:	b120      	cbz	r0, 182d0 <img_mgmt_impl_erase_slot+0x18>
        return MGMT_ERR_EUNKNOWN;
   182c6:	2301      	movs	r3, #1
            return MGMT_ERR_EUNKNOWN;
        }
    }

    return 0;
}
   182c8:	4618      	mov	r0, r3
   182ca:	b003      	add	sp, #12
   182cc:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = flash_area_is_empty(fa, &empty);
   182d0:	f10d 0103 	add.w	r1, sp, #3
   182d4:	9801      	ldr	r0, [sp, #4]
   182d6:	f7fe fe18 	bl	16f0a <flash_area_is_empty>
    if (rc != 0) {
   182da:	4603      	mov	r3, r0
   182dc:	b968      	cbnz	r0, 182fa <img_mgmt_impl_erase_slot+0x42>
    if (!empty) {
   182de:	f89d 2003 	ldrb.w	r2, [sp, #3]
   182e2:	2a00      	cmp	r2, #0
   182e4:	d1f0      	bne.n	182c8 <img_mgmt_impl_erase_slot+0x10>
        rc = flash_area_erase(fa, 0, fa->fa_size);
   182e6:	9801      	ldr	r0, [sp, #4]
   182e8:	6882      	ldr	r2, [r0, #8]
   182ea:	2100      	movs	r1, #0
   182ec:	f7fe fdf0 	bl	16ed0 <flash_area_erase>
        if (rc != 0) {
   182f0:	4603      	mov	r3, r0
   182f2:	2800      	cmp	r0, #0
   182f4:	d0e8      	beq.n	182c8 <img_mgmt_impl_erase_slot+0x10>
            return MGMT_ERR_EUNKNOWN;
   182f6:	2301      	movs	r3, #1
   182f8:	e7e6      	b.n	182c8 <img_mgmt_impl_erase_slot+0x10>
        return MGMT_ERR_EUNKNOWN;
   182fa:	2301      	movs	r3, #1
   182fc:	e7e4      	b.n	182c8 <img_mgmt_impl_erase_slot+0x10>

000182fe <img_mgmt_impl_write_pending>:

int
img_mgmt_impl_write_pending(int slot, bool permanent)
{
   182fe:	b5f0      	push	{r4, r5, r6, r7, lr}
   18300:	b083      	sub	sp, #12
   18302:	4604      	mov	r4, r0
   18304:	460f      	mov	r7, r1
    uint32_t image_flags;
    uint8_t state_flags;
    int split_app_active;
    int rc;

    state_flags = img_mgmt_state_flags(slot);
   18306:	f7ff fce7 	bl	17cd8 <img_mgmt_state_flags>
   1830a:	4605      	mov	r5, r0
    split_app_active = split_app_active_get();
   1830c:	f7ff fa52 	bl	177b4 <split_app_active_get>
   18310:	4606      	mov	r6, r0

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED &&
   18312:	f015 0f02 	tst.w	r5, #2
   18316:	d001      	beq.n	1831c <img_mgmt_impl_write_pending+0x1e>
   18318:	bb6c      	cbnz	r4, 18376 <img_mgmt_impl_write_pending+0x78>
        (slot != 0 || !split_app_active)) {
   1831a:	b370      	cbz	r0, 1837a <img_mgmt_impl_write_pending+0x7c>

        return MGMT_ERR_EBADSTATE;
    }

    rc = img_mgmt_read_info(slot, NULL, NULL, &image_flags);
   1831c:	ab01      	add	r3, sp, #4
   1831e:	2200      	movs	r2, #0
   18320:	4611      	mov	r1, r2
   18322:	4620      	mov	r0, r4
   18324:	f7ff fad0 	bl	178c8 <img_mgmt_read_info>
    if (rc != 0) {
   18328:	bb48      	cbnz	r0, 1837e <img_mgmt_impl_write_pending+0x80>
        return MGMT_ERR_EUNKNOWN;
    }

    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   1832a:	9b01      	ldr	r3, [sp, #4]
   1832c:	f013 0f10 	tst.w	r3, #16
   18330:	d114      	bne.n	1835c <img_mgmt_impl_write_pending+0x5e>
        /* Unified image or loader. */
        if (!split_app_active) {
   18332:	b13e      	cbz	r6, 18344 <img_mgmt_impl_write_pending+0x46>
            if (rc != 0) {
                return MGMT_ERR_EUNKNOWN;
            }
        } else {
            /* Currently loader + app; testing loader-only. */
            if (permanent) {
   18334:	b16f      	cbz	r7, 18352 <img_mgmt_impl_write_pending+0x54>
                rc = split_write_split(SPLIT_MODE_LOADER);
   18336:	2000      	movs	r0, #0
   18338:	f7ff fa4e 	bl	177d8 <split_write_split>
   1833c:	4603      	mov	r3, r0
            } else {
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
            }
            if (rc != 0) {
   1833e:	b1fb      	cbz	r3, 18380 <img_mgmt_impl_write_pending+0x82>
                return MGMT_ERR_EUNKNOWN;
   18340:	2301      	movs	r3, #1
   18342:	e01d      	b.n	18380 <img_mgmt_impl_write_pending+0x82>
            rc = boot_set_pending(permanent);
   18344:	4638      	mov	r0, r7
   18346:	f7ff f99e 	bl	17686 <boot_set_pending>
            if (rc != 0) {
   1834a:	4603      	mov	r3, r0
   1834c:	b1c0      	cbz	r0, 18380 <img_mgmt_impl_write_pending+0x82>
                return MGMT_ERR_EUNKNOWN;
   1834e:	2301      	movs	r3, #1
   18350:	e016      	b.n	18380 <img_mgmt_impl_write_pending+0x82>
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
   18352:	2003      	movs	r0, #3
   18354:	f7ff fa40 	bl	177d8 <split_write_split>
   18358:	4603      	mov	r3, r0
   1835a:	e7f0      	b.n	1833e <img_mgmt_impl_write_pending+0x40>
            }
        }
    } else {
        /* Testing split app. */
        if (permanent) {
   1835c:	b137      	cbz	r7, 1836c <img_mgmt_impl_write_pending+0x6e>
            rc = split_write_split(SPLIT_MODE_APP);
   1835e:	2002      	movs	r0, #2
   18360:	f7ff fa3a 	bl	177d8 <split_write_split>
   18364:	4603      	mov	r3, r0
        } else {
            rc = split_write_split(SPLIT_MODE_TEST_APP);
        }
        if (rc != 0) {
   18366:	b15b      	cbz	r3, 18380 <img_mgmt_impl_write_pending+0x82>
            return MGMT_ERR_EUNKNOWN;
   18368:	2301      	movs	r3, #1
   1836a:	e009      	b.n	18380 <img_mgmt_impl_write_pending+0x82>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   1836c:	2001      	movs	r0, #1
   1836e:	f7ff fa33 	bl	177d8 <split_write_split>
   18372:	4603      	mov	r3, r0
   18374:	e7f7      	b.n	18366 <img_mgmt_impl_write_pending+0x68>
        return MGMT_ERR_EBADSTATE;
   18376:	2306      	movs	r3, #6
   18378:	e002      	b.n	18380 <img_mgmt_impl_write_pending+0x82>
   1837a:	2306      	movs	r3, #6
   1837c:	e000      	b.n	18380 <img_mgmt_impl_write_pending+0x82>
        return MGMT_ERR_EUNKNOWN;
   1837e:	2301      	movs	r3, #1
        }
    }

    return 0;
}
   18380:	4618      	mov	r0, r3
   18382:	b003      	add	sp, #12
   18384:	bdf0      	pop	{r4, r5, r6, r7, pc}

00018386 <img_mgmt_impl_write_confirmed>:

int
img_mgmt_impl_write_confirmed(void)
{
   18386:	b508      	push	{r3, lr}
    int rc;

    /* Confirm the unified image or loader in slot 0. */
    rc = boot_set_confirmed();
   18388:	f7ff f9c6 	bl	17718 <boot_set_confirmed>
    if (rc != 0) {
   1838c:	b110      	cbz	r0, 18394 <img_mgmt_impl_write_confirmed+0xe>
        return MGMT_ERR_EUNKNOWN;
   1838e:	2301      	movs	r3, #1
            return MGMT_ERR_EUNKNOWN;
        }
    }

    return 0;
}
   18390:	4618      	mov	r0, r3
   18392:	bd08      	pop	{r3, pc}
    if (split_app_active_get()) {
   18394:	f7ff fa0e 	bl	177b4 <split_app_active_get>
   18398:	b138      	cbz	r0, 183aa <img_mgmt_impl_write_confirmed+0x24>
        rc = split_write_split(SPLIT_MODE_APP);
   1839a:	2002      	movs	r0, #2
   1839c:	f7ff fa1c 	bl	177d8 <split_write_split>
        if (rc != 0) {
   183a0:	4603      	mov	r3, r0
   183a2:	2800      	cmp	r0, #0
   183a4:	d0f4      	beq.n	18390 <img_mgmt_impl_write_confirmed+0xa>
            return MGMT_ERR_EUNKNOWN;
   183a6:	2301      	movs	r3, #1
   183a8:	e7f2      	b.n	18390 <img_mgmt_impl_write_confirmed+0xa>
        rc = split_write_split(SPLIT_MODE_LOADER);
   183aa:	2000      	movs	r0, #0
   183ac:	f7ff fa14 	bl	177d8 <split_write_split>
        if (rc != 0) {
   183b0:	4603      	mov	r3, r0
   183b2:	2800      	cmp	r0, #0
   183b4:	d0ec      	beq.n	18390 <img_mgmt_impl_write_confirmed+0xa>
            return MGMT_ERR_EUNKNOWN;
   183b6:	2301      	movs	r3, #1
   183b8:	e7ea      	b.n	18390 <img_mgmt_impl_write_confirmed+0xa>

000183ba <img_mgmt_impl_read>:

int
img_mgmt_impl_read(int slot, unsigned int offset, void *dst,
                   unsigned int num_bytes)
{
   183ba:	b570      	push	{r4, r5, r6, lr}
   183bc:	b082      	sub	sp, #8
   183be:	460c      	mov	r4, r1
   183c0:	4615      	mov	r5, r2
   183c2:	461e      	mov	r6, r3
    const struct flash_area *fa;
    int area_id;
    int rc;

    area_id = flash_area_id_from_image_slot(slot);
   183c4:	f7fe fdbb 	bl	16f3e <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fa);
   183c8:	a901      	add	r1, sp, #4
   183ca:	b2c0      	uxtb	r0, r0
   183cc:	f7fe fd40 	bl	16e50 <flash_area_open>
    if (rc != 0) {
   183d0:	b118      	cbz	r0, 183da <img_mgmt_impl_read+0x20>
        return MGMT_ERR_EUNKNOWN;
   183d2:	2301      	movs	r3, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   183d4:	4618      	mov	r0, r3
   183d6:	b002      	add	sp, #8
   183d8:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_read(fa, offset, dst, num_bytes);
   183da:	4633      	mov	r3, r6
   183dc:	462a      	mov	r2, r5
   183de:	4621      	mov	r1, r4
   183e0:	9801      	ldr	r0, [sp, #4]
   183e2:	f7fe fd4f 	bl	16e84 <flash_area_read>
    if (rc != 0) {
   183e6:	4603      	mov	r3, r0
   183e8:	2800      	cmp	r0, #0
   183ea:	d0f3      	beq.n	183d4 <img_mgmt_impl_read+0x1a>
        return MGMT_ERR_EUNKNOWN;
   183ec:	2301      	movs	r3, #1
   183ee:	e7f1      	b.n	183d4 <img_mgmt_impl_read+0x1a>

000183f0 <img_mgmt_impl_write_image_data>:

#else
int
img_mgmt_impl_write_image_data(unsigned int offset, const void *data,
                               unsigned int num_bytes, bool last)
{
   183f0:	b570      	push	{r4, r5, r6, lr}
   183f2:	b082      	sub	sp, #8
   183f4:	4604      	mov	r4, r0
   183f6:	460d      	mov	r5, r1
   183f8:	4616      	mov	r6, r2
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   183fa:	a901      	add	r1, sp, #4
   183fc:	2002      	movs	r0, #2
   183fe:	f7fe fd27 	bl	16e50 <flash_area_open>
    if (rc != 0) {
   18402:	b118      	cbz	r0, 1840c <img_mgmt_impl_write_image_data+0x1c>
        return MGMT_ERR_EUNKNOWN;
   18404:	2301      	movs	r3, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   18406:	4618      	mov	r0, r3
   18408:	b002      	add	sp, #8
   1840a:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_write(fa, offset, data, num_bytes);
   1840c:	4633      	mov	r3, r6
   1840e:	462a      	mov	r2, r5
   18410:	4621      	mov	r1, r4
   18412:	9801      	ldr	r0, [sp, #4]
   18414:	f7fe fd49 	bl	16eaa <flash_area_write>
    if (rc != 0) {
   18418:	4603      	mov	r3, r0
   1841a:	2800      	cmp	r0, #0
   1841c:	d0f3      	beq.n	18406 <img_mgmt_impl_write_image_data+0x16>
        return MGMT_ERR_EUNKNOWN;
   1841e:	2301      	movs	r3, #1
   18420:	e7f1      	b.n	18406 <img_mgmt_impl_write_image_data+0x16>

00018422 <img_mgmt_impl_erase_image_data>:
#endif

int
img_mgmt_impl_erase_image_data(unsigned int off, unsigned int num_bytes)
{
   18422:	b530      	push	{r4, r5, lr}
   18424:	b083      	sub	sp, #12
   18426:	4604      	mov	r4, r0
   18428:	460d      	mov	r5, r1
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   1842a:	a901      	add	r1, sp, #4
   1842c:	2002      	movs	r0, #2
   1842e:	f7fe fd0f 	bl	16e50 <flash_area_open>
    if (rc != 0) {
   18432:	b118      	cbz	r0, 1843c <img_mgmt_impl_erase_image_data+0x1a>
        return MGMT_ERR_EUNKNOWN;
   18434:	2301      	movs	r3, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   18436:	4618      	mov	r0, r3
   18438:	b003      	add	sp, #12
   1843a:	bd30      	pop	{r4, r5, pc}
    rc = flash_area_erase(fa, off, num_bytes);
   1843c:	462a      	mov	r2, r5
   1843e:	4621      	mov	r1, r4
   18440:	9801      	ldr	r0, [sp, #4]
   18442:	f7fe fd45 	bl	16ed0 <flash_area_erase>
    if (rc != 0) {
   18446:	4603      	mov	r3, r0
   18448:	2800      	cmp	r0, #0
   1844a:	d0f4      	beq.n	18436 <img_mgmt_impl_erase_image_data+0x14>
        return MGMT_ERR_EUNKNOWN;
   1844c:	2301      	movs	r3, #1
   1844e:	e7f2      	b.n	18436 <img_mgmt_impl_erase_image_data+0x14>

00018450 <img_mgmt_impl_swap_type>:
}
#endif

int
img_mgmt_impl_swap_type(void)
{
   18450:	b508      	push	{r3, lr}
    switch (boot_swap_type()) {
   18452:	f7ff f913 	bl	1767c <boot_swap_type>
   18456:	3801      	subs	r0, #1
   18458:	2803      	cmp	r0, #3
   1845a:	d807      	bhi.n	1846c <img_mgmt_impl_swap_type+0x1c>
   1845c:	e8df f000 	tbb	[pc, r0]
   18460:	04021210 	.word	0x04021210
    case BOOT_SWAP_TYPE_NONE:
        return IMG_MGMT_SWAP_TYPE_NONE;
    case BOOT_SWAP_TYPE_TEST:
        return IMG_MGMT_SWAP_TYPE_TEST;
    case BOOT_SWAP_TYPE_PERM:
        return IMG_MGMT_SWAP_TYPE_PERM;
   18464:	2002      	movs	r0, #2
        return IMG_MGMT_SWAP_TYPE_REVERT;
    default:
        assert(0);
        return IMG_MGMT_SWAP_TYPE_NONE;
    }
}
   18466:	bd08      	pop	{r3, pc}
        return IMG_MGMT_SWAP_TYPE_REVERT;
   18468:	2003      	movs	r0, #3
   1846a:	e7fc      	b.n	18466 <img_mgmt_impl_swap_type+0x16>
        assert(0);
   1846c:	f7ef fea8 	bl	81c0 <hal_debugger_connected>
   18470:	b100      	cbz	r0, 18474 <img_mgmt_impl_swap_type+0x24>
   18472:	be01      	bkpt	0x0001
   18474:	2300      	movs	r3, #0
   18476:	461a      	mov	r2, r3
   18478:	4619      	mov	r1, r3
   1847a:	4618      	mov	r0, r3
   1847c:	f7f1 faa8 	bl	99d0 <__assert_func>
        return IMG_MGMT_SWAP_TYPE_NONE;
   18480:	2000      	movs	r0, #0
   18482:	e7f0      	b.n	18466 <img_mgmt_impl_swap_type+0x16>
        return IMG_MGMT_SWAP_TYPE_TEST;
   18484:	2001      	movs	r0, #1
   18486:	e7ee      	b.n	18466 <img_mgmt_impl_swap_type+0x16>

00018488 <img_mgmt_module_init>:

void
img_mgmt_module_init(void)
{
   18488:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1848a:	4b08      	ldr	r3, [pc, #32]	; (184ac <img_mgmt_module_init+0x24>)
   1848c:	781b      	ldrb	r3, [r3, #0]
   1848e:	b113      	cbz	r3, 18496 <img_mgmt_module_init+0xe>

    img_mgmt_register_group();
   18490:	f7ff fc1a 	bl	17cc8 <img_mgmt_register_group>
}
   18494:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   18496:	f7ef fe93 	bl	81c0 <hal_debugger_connected>
   1849a:	b100      	cbz	r0, 1849e <img_mgmt_module_init+0x16>
   1849c:	be01      	bkpt	0x0001
   1849e:	2300      	movs	r3, #0
   184a0:	461a      	mov	r2, r3
   184a2:	4619      	mov	r1, r3
   184a4:	4618      	mov	r0, r3
   184a6:	f7f1 fa93 	bl	99d0 <__assert_func>
   184aa:	bf00      	nop
   184ac:	20000506 	.word	0x20000506

000184b0 <img_mgmt_log_gen>:
    modlog_append_mbuf(MYNEWT_VAL(IMG_MGMT_LOG_MOD), LOG_LEVEL_INFO,
                       LOG_ETYPE_CBOR, om);
#endif

    return 0;
}
   184b0:	2000      	movs	r0, #0
   184b2:	4770      	bx	lr

000184b4 <img_mgmt_impl_log_upload_start>:

int
img_mgmt_impl_log_upload_start(int status)
{
   184b4:	b508      	push	{r3, lr}
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_UPSTART, status, NULL);
   184b6:	2200      	movs	r2, #0
   184b8:	4601      	mov	r1, r0
   184ba:	4802      	ldr	r0, [pc, #8]	; (184c4 <img_mgmt_impl_log_upload_start+0x10>)
   184bc:	f7ff fff8 	bl	184b0 <img_mgmt_log_gen>
}
   184c0:	bd08      	pop	{r3, pc}
   184c2:	bf00      	nop
   184c4:	00029370 	.word	0x00029370

000184c8 <img_mgmt_impl_log_upload_done>:

int
img_mgmt_impl_log_upload_done(int status, const uint8_t *hash)
{
   184c8:	b508      	push	{r3, lr}
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_UPDONE, 0, hash);
   184ca:	460a      	mov	r2, r1
   184cc:	2100      	movs	r1, #0
   184ce:	4802      	ldr	r0, [pc, #8]	; (184d8 <img_mgmt_impl_log_upload_done+0x10>)
   184d0:	f7ff ffee 	bl	184b0 <img_mgmt_log_gen>
}
   184d4:	bd08      	pop	{r3, pc}
   184d6:	bf00      	nop
   184d8:	00029368 	.word	0x00029368

000184dc <img_mgmt_impl_log_pending>:

int
img_mgmt_impl_log_pending(int status, const uint8_t *hash)
{
   184dc:	b508      	push	{r3, lr}
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_PEND, status, hash);
   184de:	460a      	mov	r2, r1
   184e0:	4601      	mov	r1, r0
   184e2:	4802      	ldr	r0, [pc, #8]	; (184ec <img_mgmt_impl_log_pending+0x10>)
   184e4:	f7ff ffe4 	bl	184b0 <img_mgmt_log_gen>
}
   184e8:	bd08      	pop	{r3, pc}
   184ea:	bf00      	nop
   184ec:	00029360 	.word	0x00029360

000184f0 <img_mgmt_impl_log_confirm>:

int
img_mgmt_impl_log_confirm(int status, const uint8_t *hash)
{
   184f0:	b508      	push	{r3, lr}
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_CONF, status, hash);
   184f2:	460a      	mov	r2, r1
   184f4:	4601      	mov	r1, r0
   184f6:	4802      	ldr	r0, [pc, #8]	; (18500 <img_mgmt_impl_log_confirm+0x10>)
   184f8:	f7ff ffda 	bl	184b0 <img_mgmt_log_gen>
}
   184fc:	bd08      	pop	{r3, pc}
   184fe:	bf00      	nop
   18500:	00029358 	.word	0x00029358

00018504 <os_mgmt_reset>:
/**
 * Command handler: os reset
 */
static int
os_mgmt_reset(struct mgmt_ctxt *ctxt)
{
   18504:	b508      	push	{r3, lr}
    return os_mgmt_impl_reset(OS_MGMT_RESET_MS);
   18506:	20fa      	movs	r0, #250	; 0xfa
   18508:	f000 f962 	bl	187d0 <os_mgmt_impl_reset>
}
   1850c:	bd08      	pop	{r3, pc}
	...

00018510 <os_mgmt_taskstat_encode_one>:
{
   18510:	b5f0      	push	{r4, r5, r6, r7, lr}
   18512:	b085      	sub	sp, #20
   18514:	4606      	mov	r6, r0
   18516:	460d      	mov	r5, r1
    err |= cbor_encode_text_stringz(encoder, task_info->oti_name);
   18518:	f101 0418 	add.w	r4, r1, #24
   1851c:	4620      	mov	r0, r4
   1851e:	f7f3 fa15 	bl	b94c <strlen>
   18522:	4602      	mov	r2, r0
   18524:	4621      	mov	r1, r4
   18526:	4630      	mov	r0, r6
   18528:	f000 ffc2 	bl	194b0 <cbor_encode_text_string>
   1852c:	4604      	mov	r4, r0
    err |= cbor_encoder_create_map(encoder, &task_map, CborIndefiniteLength);
   1852e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18532:	4669      	mov	r1, sp
   18534:	4630      	mov	r0, r6
   18536:	f000 ffc9 	bl	194cc <cbor_encoder_create_map>
   1853a:	4304      	orrs	r4, r0
   1853c:	2204      	movs	r2, #4
   1853e:	493c      	ldr	r1, [pc, #240]	; (18630 <os_mgmt_taskstat_encode_one+0x120>)
   18540:	4668      	mov	r0, sp
   18542:	f000 ffb5 	bl	194b0 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "prio");
   18546:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_prio);
   18548:	782a      	ldrb	r2, [r5, #0]
   1854a:	2300      	movs	r3, #0
   1854c:	4668      	mov	r0, sp
   1854e:	f000 fef9 	bl	19344 <cbor_encode_uint>
   18552:	4304      	orrs	r4, r0
   18554:	2203      	movs	r2, #3
   18556:	4937      	ldr	r1, [pc, #220]	; (18634 <os_mgmt_taskstat_encode_one+0x124>)
   18558:	4668      	mov	r0, sp
   1855a:	f000 ffa9 	bl	194b0 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "tid");
   1855e:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_taskid);
   18560:	786a      	ldrb	r2, [r5, #1]
   18562:	2300      	movs	r3, #0
   18564:	4668      	mov	r0, sp
   18566:	f000 feed 	bl	19344 <cbor_encode_uint>
   1856a:	4304      	orrs	r4, r0
   1856c:	2205      	movs	r2, #5
   1856e:	4932      	ldr	r1, [pc, #200]	; (18638 <os_mgmt_taskstat_encode_one+0x128>)
   18570:	4668      	mov	r0, sp
   18572:	f000 ff9d 	bl	194b0 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "state");
   18576:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_state);
   18578:	78aa      	ldrb	r2, [r5, #2]
   1857a:	2300      	movs	r3, #0
   1857c:	4668      	mov	r0, sp
   1857e:	f000 fee1 	bl	19344 <cbor_encode_uint>
   18582:	4304      	orrs	r4, r0
   18584:	2206      	movs	r2, #6
   18586:	492d      	ldr	r1, [pc, #180]	; (1863c <os_mgmt_taskstat_encode_one+0x12c>)
   18588:	4668      	mov	r0, sp
   1858a:	f000 ff91 	bl	194b0 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "stkuse");
   1858e:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_stkusage);
   18590:	88aa      	ldrh	r2, [r5, #4]
   18592:	2300      	movs	r3, #0
   18594:	4668      	mov	r0, sp
   18596:	f000 fed5 	bl	19344 <cbor_encode_uint>
   1859a:	4304      	orrs	r4, r0
   1859c:	2206      	movs	r2, #6
   1859e:	4928      	ldr	r1, [pc, #160]	; (18640 <os_mgmt_taskstat_encode_one+0x130>)
   185a0:	4668      	mov	r0, sp
   185a2:	f000 ff85 	bl	194b0 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "stksiz");
   185a6:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_stksize);
   185a8:	88ea      	ldrh	r2, [r5, #6]
   185aa:	2300      	movs	r3, #0
   185ac:	4668      	mov	r0, sp
   185ae:	f000 fec9 	bl	19344 <cbor_encode_uint>
   185b2:	4304      	orrs	r4, r0
   185b4:	2206      	movs	r2, #6
   185b6:	4923      	ldr	r1, [pc, #140]	; (18644 <os_mgmt_taskstat_encode_one+0x134>)
   185b8:	4668      	mov	r0, sp
   185ba:	f000 ff79 	bl	194b0 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "cswcnt");
   185be:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_cswcnt);
   185c0:	2700      	movs	r7, #0
   185c2:	68aa      	ldr	r2, [r5, #8]
   185c4:	463b      	mov	r3, r7
   185c6:	4668      	mov	r0, sp
   185c8:	f000 febc 	bl	19344 <cbor_encode_uint>
   185cc:	4304      	orrs	r4, r0
   185ce:	2207      	movs	r2, #7
   185d0:	491d      	ldr	r1, [pc, #116]	; (18648 <os_mgmt_taskstat_encode_one+0x138>)
   185d2:	4668      	mov	r0, sp
   185d4:	f000 ff6c 	bl	194b0 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "runtime");
   185d8:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_runtime);
   185da:	68ea      	ldr	r2, [r5, #12]
   185dc:	463b      	mov	r3, r7
   185de:	4668      	mov	r0, sp
   185e0:	f000 feb0 	bl	19344 <cbor_encode_uint>
   185e4:	4304      	orrs	r4, r0
   185e6:	220c      	movs	r2, #12
   185e8:	4918      	ldr	r1, [pc, #96]	; (1864c <os_mgmt_taskstat_encode_one+0x13c>)
   185ea:	4668      	mov	r0, sp
   185ec:	f000 ff60 	bl	194b0 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "last_checkin");
   185f0:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_last_checkin);
   185f2:	692a      	ldr	r2, [r5, #16]
   185f4:	463b      	mov	r3, r7
   185f6:	4668      	mov	r0, sp
   185f8:	f000 fea4 	bl	19344 <cbor_encode_uint>
   185fc:	4304      	orrs	r4, r0
   185fe:	220c      	movs	r2, #12
   18600:	4913      	ldr	r1, [pc, #76]	; (18650 <os_mgmt_taskstat_encode_one+0x140>)
   18602:	4668      	mov	r0, sp
   18604:	f000 ff54 	bl	194b0 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "next_checkin");
   18608:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_next_checkin);
   1860a:	696a      	ldr	r2, [r5, #20]
   1860c:	463b      	mov	r3, r7
   1860e:	4668      	mov	r0, sp
   18610:	f000 fe98 	bl	19344 <cbor_encode_uint>
   18614:	4304      	orrs	r4, r0
    err |= cbor_encoder_close_container(encoder, &task_map);
   18616:	4669      	mov	r1, sp
   18618:	4630      	mov	r0, r6
   1861a:	f000 ff67 	bl	194ec <cbor_encoder_close_container>
    if (err != 0) {
   1861e:	ea54 0300 	orrs.w	r3, r4, r0
   18622:	d102      	bne.n	1862a <os_mgmt_taskstat_encode_one+0x11a>
    return 0;
   18624:	2000      	movs	r0, #0
}
   18626:	b005      	add	sp, #20
   18628:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   1862a:	2002      	movs	r0, #2
   1862c:	e7fb      	b.n	18626 <os_mgmt_taskstat_encode_one+0x116>
   1862e:	bf00      	nop
   18630:	000293ac 	.word	0x000293ac
   18634:	000293b4 	.word	0x000293b4
   18638:	000293b8 	.word	0x000293b8
   1863c:	000293c0 	.word	0x000293c0
   18640:	000293c8 	.word	0x000293c8
   18644:	000293d0 	.word	0x000293d0
   18648:	000293d8 	.word	0x000293d8
   1864c:	000293e0 	.word	0x000293e0
   18650:	000293f0 	.word	0x000293f0

00018654 <os_mgmt_taskstat_read>:
{
   18654:	b570      	push	{r4, r5, r6, lr}
   18656:	b092      	sub	sp, #72	; 0x48
   18658:	4606      	mov	r6, r0
   1865a:	2205      	movs	r2, #5
   1865c:	4917      	ldr	r1, [pc, #92]	; (186bc <os_mgmt_taskstat_read+0x68>)
   1865e:	f000 ff27 	bl	194b0 <cbor_encode_text_string>
   18662:	4604      	mov	r4, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &tasks_map,
   18664:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18668:	4669      	mov	r1, sp
   1866a:	4630      	mov	r0, r6
   1866c:	f000 ff2e 	bl	194cc <cbor_encoder_create_map>
    if (err != 0) {
   18670:	ea50 0304 	orrs.w	r3, r0, r4
   18674:	d11e      	bne.n	186b4 <os_mgmt_taskstat_read+0x60>
    for (task_idx = 0; ; task_idx++) {
   18676:	2500      	movs	r5, #0
        rc = os_mgmt_impl_task_info(task_idx, &task_info);
   18678:	a904      	add	r1, sp, #16
   1867a:	4628      	mov	r0, r5
   1867c:	f000 f883 	bl	18786 <os_mgmt_impl_task_info>
   18680:	4604      	mov	r4, r0
        if (rc == MGMT_ERR_ENOENT) {
   18682:	2805      	cmp	r0, #5
   18684:	d00d      	beq.n	186a2 <os_mgmt_taskstat_read+0x4e>
        } else if (rc != 0) {
   18686:	b9b0      	cbnz	r0, 186b6 <os_mgmt_taskstat_read+0x62>
        rc = os_mgmt_taskstat_encode_one(&tasks_map, &task_info);
   18688:	a904      	add	r1, sp, #16
   1868a:	4668      	mov	r0, sp
   1868c:	f7ff ff40 	bl	18510 <os_mgmt_taskstat_encode_one>
        if (rc != 0) {
   18690:	4604      	mov	r4, r0
   18692:	b908      	cbnz	r0, 18698 <os_mgmt_taskstat_read+0x44>
    for (task_idx = 0; ; task_idx++) {
   18694:	3501      	adds	r5, #1
        rc = os_mgmt_impl_task_info(task_idx, &task_info);
   18696:	e7ef      	b.n	18678 <os_mgmt_taskstat_read+0x24>
            cbor_encoder_close_container(&ctxt->encoder, &tasks_map);
   18698:	4669      	mov	r1, sp
   1869a:	4630      	mov	r0, r6
   1869c:	f000 ff26 	bl	194ec <cbor_encoder_close_container>
            return rc;
   186a0:	e009      	b.n	186b6 <os_mgmt_taskstat_read+0x62>
    err = cbor_encoder_close_container(&ctxt->encoder, &tasks_map);
   186a2:	4669      	mov	r1, sp
   186a4:	4630      	mov	r0, r6
   186a6:	f000 ff21 	bl	194ec <cbor_encoder_close_container>
    if (err != 0) {
   186aa:	b908      	cbnz	r0, 186b0 <os_mgmt_taskstat_read+0x5c>
    return 0;
   186ac:	2400      	movs	r4, #0
   186ae:	e002      	b.n	186b6 <os_mgmt_taskstat_read+0x62>
        return MGMT_ERR_ENOMEM;
   186b0:	2402      	movs	r4, #2
   186b2:	e000      	b.n	186b6 <os_mgmt_taskstat_read+0x62>
        return MGMT_ERR_ENOMEM;
   186b4:	2402      	movs	r4, #2
}
   186b6:	4620      	mov	r0, r4
   186b8:	b012      	add	sp, #72	; 0x48
   186ba:	bd70      	pop	{r4, r5, r6, pc}
   186bc:	00029400 	.word	0x00029400

000186c0 <os_mgmt_echo>:
{
   186c0:	b530      	push	{r4, r5, lr}
   186c2:	b0b9      	sub	sp, #228	; 0xe4
   186c4:	4604      	mov	r4, r0
    const struct cbor_attr_t attrs[2] = {
   186c6:	225c      	movs	r2, #92	; 0x5c
   186c8:	2100      	movs	r1, #0
   186ca:	a801      	add	r0, sp, #4
   186cc:	f7f3 f909 	bl	b8e2 <memset>
   186d0:	4b16      	ldr	r3, [pc, #88]	; (1872c <os_mgmt_echo+0x6c>)
   186d2:	9300      	str	r3, [sp, #0]
   186d4:	2304      	movs	r3, #4
   186d6:	f88d 3004 	strb.w	r3, [sp, #4]
   186da:	ab18      	add	r3, sp, #96	; 0x60
   186dc:	9302      	str	r3, [sp, #8]
   186de:	2380      	movs	r3, #128	; 0x80
   186e0:	930a      	str	r3, [sp, #40]	; 0x28
   186e2:	2301      	movs	r3, #1
   186e4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    echo_buf[0] = '\0';
   186e8:	2300      	movs	r3, #0
   186ea:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    err = cbor_read_object(&ctxt->it, attrs);
   186ee:	4669      	mov	r1, sp
   186f0:	f104 001c 	add.w	r0, r4, #28
   186f4:	f00f fe72 	bl	283dc <cbor_read_object>
    if (err != 0) {
   186f8:	b9a8      	cbnz	r0, 18726 <os_mgmt_echo+0x66>
   186fa:	4605      	mov	r5, r0
   186fc:	2201      	movs	r2, #1
   186fe:	490c      	ldr	r1, [pc, #48]	; (18730 <os_mgmt_echo+0x70>)
   18700:	4620      	mov	r0, r4
   18702:	f000 fed5 	bl	194b0 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "r");
   18706:	4305      	orrs	r5, r0
    err |= cbor_encode_text_string(&ctxt->encoder, echo_buf, strlen(echo_buf));
   18708:	a818      	add	r0, sp, #96	; 0x60
   1870a:	f7f3 f91f 	bl	b94c <strlen>
   1870e:	4602      	mov	r2, r0
   18710:	a918      	add	r1, sp, #96	; 0x60
   18712:	4620      	mov	r0, r4
   18714:	f000 fecc 	bl	194b0 <cbor_encode_text_string>
    if (err != 0) {
   18718:	ea55 0300 	orrs.w	r3, r5, r0
   1871c:	d101      	bne.n	18722 <os_mgmt_echo+0x62>
    return 0;
   1871e:	2000      	movs	r0, #0
   18720:	e002      	b.n	18728 <os_mgmt_echo+0x68>
        return MGMT_ERR_ENOMEM;
   18722:	2002      	movs	r0, #2
   18724:	e000      	b.n	18728 <os_mgmt_echo+0x68>
        return MGMT_ERR_EINVAL;
   18726:	2003      	movs	r0, #3
}
   18728:	b039      	add	sp, #228	; 0xe4
   1872a:	bd30      	pop	{r4, r5, pc}
   1872c:	000299e8 	.word	0x000299e8
   18730:	00029378 	.word	0x00029378

00018734 <os_mgmt_register_group>:

void
os_mgmt_register_group(void)
{
   18734:	b508      	push	{r3, lr}
    mgmt_register_group(&os_mgmt_group);
   18736:	4802      	ldr	r0, [pc, #8]	; (18740 <os_mgmt_register_group+0xc>)
   18738:	f7f3 ffcc 	bl	c6d4 <mgmt_register_group>
}
   1873c:	bd08      	pop	{r3, pc}
   1873e:	bf00      	nop
   18740:	200002c8 	.word	0x200002c8

00018744 <os_mgmt_module_init>:

void
os_mgmt_module_init(void)
{
   18744:	b508      	push	{r3, lr}
    os_mgmt_register_group();
   18746:	f7ff fff5 	bl	18734 <os_mgmt_register_group>
}
   1874a:	bd08      	pop	{r3, pc}

0001874c <mynewt_os_mgmt_task_at>:
mynewt_os_mgmt_task_at(int idx)
{
    const struct os_task *task;
    int i;

    task = STAILQ_FIRST(&g_os_task_list);
   1874c:	4b05      	ldr	r3, [pc, #20]	; (18764 <mynewt_os_mgmt_task_at+0x18>)
   1874e:	681b      	ldr	r3, [r3, #0]
    for (i = 0; i < idx; i++) {
   18750:	2200      	movs	r2, #0
   18752:	4282      	cmp	r2, r0
   18754:	da03      	bge.n	1875e <mynewt_os_mgmt_task_at+0x12>
        if (task == NULL) {
   18756:	b113      	cbz	r3, 1875e <mynewt_os_mgmt_task_at+0x12>
            break;
        }

        task = STAILQ_NEXT(task, t_os_task_list);
   18758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    for (i = 0; i < idx; i++) {
   1875a:	3201      	adds	r2, #1
   1875c:	e7f9      	b.n	18752 <mynewt_os_mgmt_task_at+0x6>
    }

    return task;
}
   1875e:	4618      	mov	r0, r3
   18760:	4770      	bx	lr
   18762:	bf00      	nop
   18764:	2000703c 	.word	0x2000703c

00018768 <mynewt_os_mgmt_stack_usage>:
{
   18768:	b500      	push	{lr}
   1876a:	b08f      	sub	sp, #60	; 0x3c
    os_task_info_get(task, &oti);
   1876c:	4669      	mov	r1, sp
   1876e:	f7f2 fe1b 	bl	b3a8 <os_task_info_get>
}
   18772:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   18776:	b00f      	add	sp, #60	; 0x3c
   18778:	f85d fb04 	ldr.w	pc, [sp], #4

0001877c <mynewt_os_mgmt_reset_tmo>:
{
   1877c:	b508      	push	{r3, lr}
    hal_watchdog_tickle();
   1877e:	f7f1 f91d 	bl	99bc <hal_watchdog_tickle>
    hal_system_reset();
   18782:	f7ef fd25 	bl	81d0 <hal_system_reset>

00018786 <os_mgmt_impl_task_info>:

int
os_mgmt_impl_task_info(int idx, struct os_mgmt_task_info *out_info)
{
   18786:	b538      	push	{r3, r4, r5, lr}
   18788:	460d      	mov	r5, r1
    const struct os_task *task;

    task = mynewt_os_mgmt_task_at(idx);
   1878a:	f7ff ffdf 	bl	1874c <mynewt_os_mgmt_task_at>
    if (task == NULL) {
   1878e:	b1e8      	cbz	r0, 187cc <os_mgmt_impl_task_info+0x46>
   18790:	4604      	mov	r4, r0
        return MGMT_ERR_ENOENT;
    }

    out_info->oti_prio = task->t_prio;
   18792:	7ac3      	ldrb	r3, [r0, #11]
   18794:	702b      	strb	r3, [r5, #0]
    out_info->oti_taskid = task->t_taskid;
   18796:	7a83      	ldrb	r3, [r0, #10]
   18798:	706b      	strb	r3, [r5, #1]
    out_info->oti_state = task->t_state;
   1879a:	7b03      	ldrb	r3, [r0, #12]
   1879c:	70ab      	strb	r3, [r5, #2]
    out_info->oti_stkusage = mynewt_os_mgmt_stack_usage(task);
   1879e:	f7ff ffe3 	bl	18768 <mynewt_os_mgmt_stack_usage>
   187a2:	80a8      	strh	r0, [r5, #4]
    out_info->oti_stksize = task->t_stacksize;
   187a4:	8923      	ldrh	r3, [r4, #8]
   187a6:	80eb      	strh	r3, [r5, #6]
    out_info->oti_cswcnt = task->t_ctx_sw_cnt;
   187a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   187aa:	60ab      	str	r3, [r5, #8]
    out_info->oti_runtime = task->t_run_time;
   187ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   187ae:	60eb      	str	r3, [r5, #12]
    out_info->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
   187b0:	6a23      	ldr	r3, [r4, #32]
   187b2:	612b      	str	r3, [r5, #16]
    out_info->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
   187b4:	6a23      	ldr	r3, [r4, #32]
                                 task->t_sanity_check.sc_checkin_itvl;
   187b6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    out_info->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
   187b8:	4413      	add	r3, r2
   187ba:	616b      	str	r3, [r5, #20]
    strncpy(out_info->oti_name, task->t_name, sizeof out_info->oti_name);
   187bc:	2220      	movs	r2, #32
   187be:	6921      	ldr	r1, [r4, #16]
   187c0:	f105 0018 	add.w	r0, r5, #24
   187c4:	f003 fcac 	bl	1c120 <strncpy>

    return 0;
   187c8:	2000      	movs	r0, #0
}
   187ca:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOENT;
   187cc:	2005      	movs	r0, #5
   187ce:	e7fc      	b.n	187ca <os_mgmt_impl_task_info+0x44>

000187d0 <os_mgmt_impl_reset>:

int
os_mgmt_impl_reset(unsigned int delay_ms)
{
   187d0:	b530      	push	{r4, r5, lr}
   187d2:	b085      	sub	sp, #20
   187d4:	4604      	mov	r4, r0
#if MYNEWT_VAL(LOG_SOFT_RESET)
    struct log_reboot_info info = {
   187d6:	2306      	movs	r3, #6
   187d8:	f8ad 3000 	strh.w	r3, [sp]
   187dc:	2300      	movs	r3, #0
   187de:	9301      	str	r3, [sp, #4]
   187e0:	9302      	str	r3, [sp, #8]
   187e2:	9303      	str	r3, [sp, #12]
        .file = NULL,
        .line = 0,
        .pc = 0,
    };

    if (img_mgmt_state_any_pending()) {
   187e4:	f7ff fab3 	bl	17d4e <img_mgmt_state_any_pending>
   187e8:	b110      	cbz	r0, 187f0 <os_mgmt_impl_reset+0x20>
        info.reason = HAL_RESET_DFU;
   187ea:	2308      	movs	r3, #8
   187ec:	f8ad 3000 	strh.w	r3, [sp]
    }
#endif
    os_callout_init(&mynewt_os_mgmt_reset_callout, os_eventq_dflt_get(),
   187f0:	f7f1 fce6 	bl	a1c0 <os_eventq_dflt_get>
   187f4:	4d0a      	ldr	r5, [pc, #40]	; (18820 <os_mgmt_impl_reset+0x50>)
   187f6:	2300      	movs	r3, #0
   187f8:	4a0a      	ldr	r2, [pc, #40]	; (18824 <os_mgmt_impl_reset+0x54>)
   187fa:	4601      	mov	r1, r0
   187fc:	4628      	mov	r0, r5
   187fe:	f7f1 fa8f 	bl	9d20 <os_callout_init>
                    mynewt_os_mgmt_reset_tmo, NULL);

#if MYNEWT_VAL(LOG_SOFT_RESET)
    log_reboot(&info);
   18802:	4668      	mov	r0, sp
   18804:	f00f f8cc 	bl	279a0 <log_reboot>
#endif
    os_callout_reset(&mynewt_os_mgmt_reset_callout,
                     delay_ms * OS_TICKS_PER_SEC / 1000);
   18808:	01e4      	lsls	r4, r4, #7
   1880a:	4907      	ldr	r1, [pc, #28]	; (18828 <os_mgmt_impl_reset+0x58>)
   1880c:	fba1 3104 	umull	r3, r1, r1, r4
    os_callout_reset(&mynewt_os_mgmt_reset_callout,
   18810:	0989      	lsrs	r1, r1, #6
   18812:	4628      	mov	r0, r5
   18814:	f7f1 fab0 	bl	9d78 <os_callout_reset>

    return 0;
}
   18818:	2000      	movs	r0, #0
   1881a:	b005      	add	sp, #20
   1881c:	bd30      	pop	{r4, r5, pc}
   1881e:	bf00      	nop
   18820:	20008044 	.word	0x20008044
   18824:	0001877d 	.word	0x0001877d
   18828:	10624dd3 	.word	0x10624dd3

0001882c <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   1882c:	b4f0      	push	{r4, r5, r6, r7}
   1882e:	b08c      	sub	sp, #48	; 0x30
   18830:	4604      	mov	r4, r0
   18832:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
   18834:	ad01      	add	r5, sp, #4
   18836:	4e2a      	ldr	r6, [pc, #168]	; (188e0 <tc_aes128_set_encrypt_key+0xb4>)
   18838:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1883a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1883c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1883e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   18840:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   18844:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   18848:	2c00      	cmp	r4, #0
   1884a:	d044      	beq.n	188d6 <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   1884c:	2f00      	cmp	r7, #0
   1884e:	d044      	beq.n	188da <tc_aes128_set_encrypt_key+0xae>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   18850:	2300      	movs	r3, #0
   18852:	e00f      	b.n	18874 <tc_aes128_set_encrypt_key+0x48>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   18854:	f817 0023 	ldrb.w	r0, [r7, r3, lsl #2]
   18858:	eb07 0183 	add.w	r1, r7, r3, lsl #2
   1885c:	784a      	ldrb	r2, [r1, #1]
   1885e:	0412      	lsls	r2, r2, #16
   18860:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   18864:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   18866:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1886a:	78c9      	ldrb	r1, [r1, #3]
   1886c:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1886e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   18872:	3301      	adds	r3, #1
   18874:	2b03      	cmp	r3, #3
   18876:	d9ed      	bls.n	18854 <tc_aes128_set_encrypt_key+0x28>
   18878:	e006      	b.n	18888 <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   1887a:	1f19      	subs	r1, r3, #4
   1887c:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
   18880:	404a      	eors	r2, r1
   18882:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   18886:	3301      	adds	r3, #1
   18888:	2b2b      	cmp	r3, #43	; 0x2b
   1888a:	d820      	bhi.n	188ce <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
   1888c:	1e5a      	subs	r2, r3, #1
   1888e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
		if ((i % Nk) == 0) {
   18892:	f013 0f03 	tst.w	r3, #3
   18896:	d1f0      	bne.n	1887a <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
   18898:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   1889c:	0e11      	lsrs	r1, r2, #24
   1889e:	4811      	ldr	r0, [pc, #68]	; (188e4 <tc_aes128_set_encrypt_key+0xb8>)
   188a0:	5c45      	ldrb	r5, [r0, r1]
   188a2:	f3c2 4107 	ubfx	r1, r2, #16, #8
   188a6:	5c41      	ldrb	r1, [r0, r1]
   188a8:	0409      	lsls	r1, r1, #16
   188aa:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   188ae:	f3c2 2507 	ubfx	r5, r2, #8, #8
   188b2:	5d45      	ldrb	r5, [r0, r5]
   188b4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   188b8:	b2d2      	uxtb	r2, r2
   188ba:	5c82      	ldrb	r2, [r0, r2]
   188bc:	4311      	orrs	r1, r2
   188be:	f023 0203 	bic.w	r2, r3, #3
   188c2:	a80c      	add	r0, sp, #48	; 0x30
   188c4:	4402      	add	r2, r0
   188c6:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   188ca:	404a      	eors	r2, r1
   188cc:	e7d5      	b.n	1887a <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
   188ce:	2001      	movs	r0, #1
}
   188d0:	b00c      	add	sp, #48	; 0x30
   188d2:	bcf0      	pop	{r4, r5, r6, r7}
   188d4:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   188d6:	2000      	movs	r0, #0
   188d8:	e7fa      	b.n	188d0 <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
   188da:	2000      	movs	r0, #0
   188dc:	e7f8      	b.n	188d0 <tc_aes128_set_encrypt_key+0xa4>
   188de:	bf00      	nop
   188e0:	00029408 	.word	0x00029408
   188e4:	00029434 	.word	0x00029434

000188e8 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   188e8:	2800      	cmp	r0, #0
   188ea:	f000 8367 	beq.w	18fbc <tc_aes_encrypt+0x6d4>
{
   188ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   188f2:	b088      	sub	sp, #32
   188f4:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   188f6:	2900      	cmp	r1, #0
   188f8:	f000 8362 	beq.w	18fc0 <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   188fc:	2a00      	cmp	r2, #0
   188fe:	f000 8361 	beq.w	18fc4 <tc_aes_encrypt+0x6dc>
   18902:	4617      	mov	r7, r2
   18904:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   18906:	2310      	movs	r3, #16
   18908:	4619      	mov	r1, r3
   1890a:	eb0d 0003 	add.w	r0, sp, r3
   1890e:	f000 fb5d 	bl	18fcc <_copy>
	add_round_key(state, s->words);
   18912:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   18914:	683b      	ldr	r3, [r7, #0]
   18916:	f89d 2010 	ldrb.w	r2, [sp, #16]
   1891a:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1891e:	f88d 2010 	strb.w	r2, [sp, #16]
   18922:	f3c3 4207 	ubfx	r2, r3, #16, #8
   18926:	f89d 1011 	ldrb.w	r1, [sp, #17]
   1892a:	404a      	eors	r2, r1
   1892c:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   18930:	f3c3 2207 	ubfx	r2, r3, #8, #8
   18934:	f89d 1012 	ldrb.w	r1, [sp, #18]
   18938:	404a      	eors	r2, r1
   1893a:	f88d 2012 	strb.w	r2, [sp, #18]
   1893e:	b2db      	uxtb	r3, r3
   18940:	f89d 2013 	ldrb.w	r2, [sp, #19]
   18944:	4053      	eors	r3, r2
   18946:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1894a:	687b      	ldr	r3, [r7, #4]
   1894c:	f89d 2014 	ldrb.w	r2, [sp, #20]
   18950:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   18954:	f88d 2014 	strb.w	r2, [sp, #20]
   18958:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1895c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   18960:	404a      	eors	r2, r1
   18962:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   18966:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1896a:	f89d 1016 	ldrb.w	r1, [sp, #22]
   1896e:	404a      	eors	r2, r1
   18970:	f88d 2016 	strb.w	r2, [sp, #22]
   18974:	b2db      	uxtb	r3, r3
   18976:	f89d 2017 	ldrb.w	r2, [sp, #23]
   1897a:	4053      	eors	r3, r2
   1897c:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   18980:	68bb      	ldr	r3, [r7, #8]
   18982:	f89d 2018 	ldrb.w	r2, [sp, #24]
   18986:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1898a:	f88d 2018 	strb.w	r2, [sp, #24]
   1898e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   18992:	f89d 1019 	ldrb.w	r1, [sp, #25]
   18996:	404a      	eors	r2, r1
   18998:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1899c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   189a0:	f89d 101a 	ldrb.w	r1, [sp, #26]
   189a4:	404a      	eors	r2, r1
   189a6:	f88d 201a 	strb.w	r2, [sp, #26]
   189aa:	b2db      	uxtb	r3, r3
   189ac:	f89d 201b 	ldrb.w	r2, [sp, #27]
   189b0:	4053      	eors	r3, r2
   189b2:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   189b6:	68fb      	ldr	r3, [r7, #12]
   189b8:	f89d 201c 	ldrb.w	r2, [sp, #28]
   189bc:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   189c0:	f88d 201c 	strb.w	r2, [sp, #28]
   189c4:	f3c3 4207 	ubfx	r2, r3, #16, #8
   189c8:	f89d 101d 	ldrb.w	r1, [sp, #29]
   189cc:	404a      	eors	r2, r1
   189ce:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   189d2:	f3c3 2207 	ubfx	r2, r3, #8, #8
   189d6:	f89d 101e 	ldrb.w	r1, [sp, #30]
   189da:	404a      	eors	r2, r1
   189dc:	f88d 201e 	strb.w	r2, [sp, #30]
   189e0:	b2db      	uxtb	r3, r3
   189e2:	f89d 201f 	ldrb.w	r2, [sp, #31]
   189e6:	4053      	eors	r3, r2
   189e8:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   189ec:	2500      	movs	r5, #0
   189ee:	e210      	b.n	18e12 <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
   189f0:	a904      	add	r1, sp, #16
   189f2:	5ccc      	ldrb	r4, [r1, r3]
   189f4:	4a02      	ldr	r2, [pc, #8]	; (18a00 <tc_aes_encrypt+0x118>)
   189f6:	5d14      	ldrb	r4, [r2, r4]
   189f8:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   189fa:	3301      	adds	r3, #1
   189fc:	e002      	b.n	18a04 <tc_aes_encrypt+0x11c>
   189fe:	bf00      	nop
   18a00:	00029434 	.word	0x00029434
   18a04:	2b0f      	cmp	r3, #15
   18a06:	d9f3      	bls.n	189f0 <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   18a08:	f89d 3010 	ldrb.w	r3, [sp, #16]
   18a0c:	f88d 3000 	strb.w	r3, [sp]
   18a10:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18a14:	f88d 3001 	strb.w	r3, [sp, #1]
   18a18:	f89d 301a 	ldrb.w	r3, [sp, #26]
   18a1c:	f88d 3002 	strb.w	r3, [sp, #2]
   18a20:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18a24:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   18a28:	f89d 3014 	ldrb.w	r3, [sp, #20]
   18a2c:	f88d 3004 	strb.w	r3, [sp, #4]
   18a30:	f89d 3019 	ldrb.w	r3, [sp, #25]
   18a34:	f88d 3005 	strb.w	r3, [sp, #5]
   18a38:	f89d 301e 	ldrb.w	r3, [sp, #30]
   18a3c:	f88d 3006 	strb.w	r3, [sp, #6]
   18a40:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18a44:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   18a48:	f89d 3018 	ldrb.w	r3, [sp, #24]
   18a4c:	f88d 3008 	strb.w	r3, [sp, #8]
   18a50:	f89d 301d 	ldrb.w	r3, [sp, #29]
   18a54:	f88d 3009 	strb.w	r3, [sp, #9]
   18a58:	f89d 3012 	ldrb.w	r3, [sp, #18]
   18a5c:	f88d 300a 	strb.w	r3, [sp, #10]
   18a60:	f89d 3017 	ldrb.w	r3, [sp, #23]
   18a64:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   18a68:	f89d 301c 	ldrb.w	r3, [sp, #28]
   18a6c:	f88d 300c 	strb.w	r3, [sp, #12]
   18a70:	f89d 3011 	ldrb.w	r3, [sp, #17]
   18a74:	f88d 300d 	strb.w	r3, [sp, #13]
   18a78:	f89d 3016 	ldrb.w	r3, [sp, #22]
   18a7c:	f88d 300e 	strb.w	r3, [sp, #14]
   18a80:	f89d 301b 	ldrb.w	r3, [sp, #27]
   18a84:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   18a88:	2310      	movs	r3, #16
   18a8a:	466a      	mov	r2, sp
   18a8c:	4619      	mov	r1, r3
   18a8e:	eb0d 0003 	add.w	r0, sp, r3
   18a92:	f000 fa9b 	bl	18fcc <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   18a96:	f89d 0010 	ldrb.w	r0, [sp, #16]
   18a9a:	f000 faa7 	bl	18fec <_double_byte>
   18a9e:	4604      	mov	r4, r0
   18aa0:	f89d 0011 	ldrb.w	r0, [sp, #17]
   18aa4:	f000 faa2 	bl	18fec <_double_byte>
   18aa8:	f89d 1011 	ldrb.w	r1, [sp, #17]
   18aac:	f89d 2012 	ldrb.w	r2, [sp, #18]
   18ab0:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18ab4:	4048      	eors	r0, r1
   18ab6:	4044      	eors	r4, r0
   18ab8:	4062      	eors	r2, r4
   18aba:	4053      	eors	r3, r2
   18abc:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   18ac0:	f89d 4010 	ldrb.w	r4, [sp, #16]
   18ac4:	4608      	mov	r0, r1
   18ac6:	f000 fa91 	bl	18fec <_double_byte>
   18aca:	4044      	eors	r4, r0
   18acc:	b2e4      	uxtb	r4, r4
   18ace:	f89d 0012 	ldrb.w	r0, [sp, #18]
   18ad2:	f000 fa8b 	bl	18fec <_double_byte>
   18ad6:	f89d 2012 	ldrb.w	r2, [sp, #18]
   18ada:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18ade:	4050      	eors	r0, r2
   18ae0:	4044      	eors	r4, r0
   18ae2:	405c      	eors	r4, r3
   18ae4:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   18ae8:	f89d 4010 	ldrb.w	r4, [sp, #16]
   18aec:	f89d 0011 	ldrb.w	r0, [sp, #17]
   18af0:	4044      	eors	r4, r0
   18af2:	4610      	mov	r0, r2
   18af4:	f000 fa7a 	bl	18fec <_double_byte>
   18af8:	4044      	eors	r4, r0
   18afa:	b2e4      	uxtb	r4, r4
   18afc:	f89d 0013 	ldrb.w	r0, [sp, #19]
   18b00:	f000 fa74 	bl	18fec <_double_byte>
   18b04:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18b08:	4058      	eors	r0, r3
   18b0a:	4044      	eors	r4, r0
   18b0c:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   18b10:	f89d 0010 	ldrb.w	r0, [sp, #16]
   18b14:	f000 fa6a 	bl	18fec <_double_byte>
   18b18:	f89d 2010 	ldrb.w	r2, [sp, #16]
   18b1c:	f89d 3011 	ldrb.w	r3, [sp, #17]
   18b20:	f89d 4012 	ldrb.w	r4, [sp, #18]
   18b24:	4050      	eors	r0, r2
   18b26:	4043      	eors	r3, r0
   18b28:	405c      	eors	r4, r3
   18b2a:	b2e4      	uxtb	r4, r4
   18b2c:	f89d 0013 	ldrb.w	r0, [sp, #19]
   18b30:	f000 fa5c 	bl	18fec <_double_byte>
   18b34:	4060      	eors	r0, r4
   18b36:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   18b3a:	f89d 0014 	ldrb.w	r0, [sp, #20]
   18b3e:	f000 fa55 	bl	18fec <_double_byte>
   18b42:	4604      	mov	r4, r0
   18b44:	f89d 0015 	ldrb.w	r0, [sp, #21]
   18b48:	f000 fa50 	bl	18fec <_double_byte>
   18b4c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   18b50:	f89d 2016 	ldrb.w	r2, [sp, #22]
   18b54:	f89d 3017 	ldrb.w	r3, [sp, #23]
   18b58:	4048      	eors	r0, r1
   18b5a:	4044      	eors	r4, r0
   18b5c:	4062      	eors	r2, r4
   18b5e:	4053      	eors	r3, r2
   18b60:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   18b64:	f89d 4014 	ldrb.w	r4, [sp, #20]
   18b68:	4608      	mov	r0, r1
   18b6a:	f000 fa3f 	bl	18fec <_double_byte>
   18b6e:	4044      	eors	r4, r0
   18b70:	b2e4      	uxtb	r4, r4
   18b72:	f89d 0016 	ldrb.w	r0, [sp, #22]
   18b76:	f000 fa39 	bl	18fec <_double_byte>
   18b7a:	f89d 2016 	ldrb.w	r2, [sp, #22]
   18b7e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   18b82:	4050      	eors	r0, r2
   18b84:	4044      	eors	r4, r0
   18b86:	405c      	eors	r4, r3
   18b88:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   18b8c:	f89d 4014 	ldrb.w	r4, [sp, #20]
   18b90:	f89d 0015 	ldrb.w	r0, [sp, #21]
   18b94:	4044      	eors	r4, r0
   18b96:	4610      	mov	r0, r2
   18b98:	f000 fa28 	bl	18fec <_double_byte>
   18b9c:	4044      	eors	r4, r0
   18b9e:	b2e4      	uxtb	r4, r4
   18ba0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   18ba4:	f000 fa22 	bl	18fec <_double_byte>
   18ba8:	f89d 3017 	ldrb.w	r3, [sp, #23]
   18bac:	4058      	eors	r0, r3
   18bae:	4044      	eors	r4, r0
   18bb0:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   18bb4:	f89d 0014 	ldrb.w	r0, [sp, #20]
   18bb8:	f000 fa18 	bl	18fec <_double_byte>
   18bbc:	f89d 2014 	ldrb.w	r2, [sp, #20]
   18bc0:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18bc4:	f89d 4016 	ldrb.w	r4, [sp, #22]
   18bc8:	4050      	eors	r0, r2
   18bca:	4043      	eors	r3, r0
   18bcc:	405c      	eors	r4, r3
   18bce:	b2e4      	uxtb	r4, r4
   18bd0:	f89d 0017 	ldrb.w	r0, [sp, #23]
   18bd4:	f000 fa0a 	bl	18fec <_double_byte>
   18bd8:	4060      	eors	r0, r4
   18bda:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   18bde:	f89d 0018 	ldrb.w	r0, [sp, #24]
   18be2:	f000 fa03 	bl	18fec <_double_byte>
   18be6:	4604      	mov	r4, r0
   18be8:	f89d 0019 	ldrb.w	r0, [sp, #25]
   18bec:	f000 f9fe 	bl	18fec <_double_byte>
   18bf0:	f89d 1019 	ldrb.w	r1, [sp, #25]
   18bf4:	f89d 201a 	ldrb.w	r2, [sp, #26]
   18bf8:	f89d 301b 	ldrb.w	r3, [sp, #27]
   18bfc:	4048      	eors	r0, r1
   18bfe:	4044      	eors	r4, r0
   18c00:	4062      	eors	r2, r4
   18c02:	4053      	eors	r3, r2
   18c04:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   18c08:	f89d 4018 	ldrb.w	r4, [sp, #24]
   18c0c:	4608      	mov	r0, r1
   18c0e:	f000 f9ed 	bl	18fec <_double_byte>
   18c12:	4044      	eors	r4, r0
   18c14:	b2e4      	uxtb	r4, r4
   18c16:	f89d 001a 	ldrb.w	r0, [sp, #26]
   18c1a:	f000 f9e7 	bl	18fec <_double_byte>
   18c1e:	f89d 201a 	ldrb.w	r2, [sp, #26]
   18c22:	f89d 301b 	ldrb.w	r3, [sp, #27]
   18c26:	4050      	eors	r0, r2
   18c28:	4044      	eors	r4, r0
   18c2a:	405c      	eors	r4, r3
   18c2c:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   18c30:	f89d 4018 	ldrb.w	r4, [sp, #24]
   18c34:	f89d 0019 	ldrb.w	r0, [sp, #25]
   18c38:	4044      	eors	r4, r0
   18c3a:	4610      	mov	r0, r2
   18c3c:	f000 f9d6 	bl	18fec <_double_byte>
   18c40:	4044      	eors	r4, r0
   18c42:	b2e4      	uxtb	r4, r4
   18c44:	f89d 001b 	ldrb.w	r0, [sp, #27]
   18c48:	f000 f9d0 	bl	18fec <_double_byte>
   18c4c:	f89d 301b 	ldrb.w	r3, [sp, #27]
   18c50:	4058      	eors	r0, r3
   18c52:	4044      	eors	r4, r0
   18c54:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   18c58:	f89d 0018 	ldrb.w	r0, [sp, #24]
   18c5c:	f000 f9c6 	bl	18fec <_double_byte>
   18c60:	f89d 2018 	ldrb.w	r2, [sp, #24]
   18c64:	f89d 3019 	ldrb.w	r3, [sp, #25]
   18c68:	f89d 401a 	ldrb.w	r4, [sp, #26]
   18c6c:	4050      	eors	r0, r2
   18c6e:	4043      	eors	r3, r0
   18c70:	405c      	eors	r4, r3
   18c72:	b2e4      	uxtb	r4, r4
   18c74:	f89d 001b 	ldrb.w	r0, [sp, #27]
   18c78:	f000 f9b8 	bl	18fec <_double_byte>
   18c7c:	4060      	eors	r0, r4
   18c7e:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   18c82:	f89d 001c 	ldrb.w	r0, [sp, #28]
   18c86:	f000 f9b1 	bl	18fec <_double_byte>
   18c8a:	4604      	mov	r4, r0
   18c8c:	f89d 001d 	ldrb.w	r0, [sp, #29]
   18c90:	f000 f9ac 	bl	18fec <_double_byte>
   18c94:	f89d 101d 	ldrb.w	r1, [sp, #29]
   18c98:	f89d 201e 	ldrb.w	r2, [sp, #30]
   18c9c:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18ca0:	4048      	eors	r0, r1
   18ca2:	4044      	eors	r4, r0
   18ca4:	4062      	eors	r2, r4
   18ca6:	4053      	eors	r3, r2
   18ca8:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   18cac:	f89d 401c 	ldrb.w	r4, [sp, #28]
   18cb0:	4608      	mov	r0, r1
   18cb2:	f000 f99b 	bl	18fec <_double_byte>
   18cb6:	4044      	eors	r4, r0
   18cb8:	b2e4      	uxtb	r4, r4
   18cba:	f89d 001e 	ldrb.w	r0, [sp, #30]
   18cbe:	f000 f995 	bl	18fec <_double_byte>
   18cc2:	f89d 201e 	ldrb.w	r2, [sp, #30]
   18cc6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18cca:	4050      	eors	r0, r2
   18ccc:	4044      	eors	r4, r0
   18cce:	405c      	eors	r4, r3
   18cd0:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   18cd4:	f89d 401c 	ldrb.w	r4, [sp, #28]
   18cd8:	f89d 001d 	ldrb.w	r0, [sp, #29]
   18cdc:	4044      	eors	r4, r0
   18cde:	4610      	mov	r0, r2
   18ce0:	f000 f984 	bl	18fec <_double_byte>
   18ce4:	4044      	eors	r4, r0
   18ce6:	b2e4      	uxtb	r4, r4
   18ce8:	f89d 001f 	ldrb.w	r0, [sp, #31]
   18cec:	f000 f97e 	bl	18fec <_double_byte>
   18cf0:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18cf4:	4058      	eors	r0, r3
   18cf6:	4044      	eors	r4, r0
   18cf8:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   18cfc:	f89d 001c 	ldrb.w	r0, [sp, #28]
   18d00:	f000 f974 	bl	18fec <_double_byte>
   18d04:	f89d 201c 	ldrb.w	r2, [sp, #28]
   18d08:	f89d 301d 	ldrb.w	r3, [sp, #29]
   18d0c:	f89d 401e 	ldrb.w	r4, [sp, #30]
   18d10:	4050      	eors	r0, r2
   18d12:	4043      	eors	r3, r0
   18d14:	405c      	eors	r4, r3
   18d16:	b2e4      	uxtb	r4, r4
   18d18:	f89d 001f 	ldrb.w	r0, [sp, #31]
   18d1c:	f000 f966 	bl	18fec <_double_byte>
   18d20:	4060      	eors	r0, r4
   18d22:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   18d26:	2310      	movs	r3, #16
   18d28:	466a      	mov	r2, sp
   18d2a:	4619      	mov	r1, r3
   18d2c:	eb0d 0003 	add.w	r0, sp, r3
   18d30:	f000 f94c 	bl	18fcc <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   18d34:	3501      	adds	r5, #1
   18d36:	012b      	lsls	r3, r5, #4
   18d38:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   18d3a:	58f3      	ldr	r3, [r6, r3]
   18d3c:	f89d 1010 	ldrb.w	r1, [sp, #16]
   18d40:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   18d44:	f88d 1010 	strb.w	r1, [sp, #16]
   18d48:	f3c3 4107 	ubfx	r1, r3, #16, #8
   18d4c:	f89d 0011 	ldrb.w	r0, [sp, #17]
   18d50:	4041      	eors	r1, r0
   18d52:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   18d56:	f3c3 2107 	ubfx	r1, r3, #8, #8
   18d5a:	f89d 0012 	ldrb.w	r0, [sp, #18]
   18d5e:	4041      	eors	r1, r0
   18d60:	f88d 1012 	strb.w	r1, [sp, #18]
   18d64:	b2db      	uxtb	r3, r3
   18d66:	f89d 1013 	ldrb.w	r1, [sp, #19]
   18d6a:	404b      	eors	r3, r1
   18d6c:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   18d70:	6853      	ldr	r3, [r2, #4]
   18d72:	f89d 1014 	ldrb.w	r1, [sp, #20]
   18d76:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   18d7a:	f88d 1014 	strb.w	r1, [sp, #20]
   18d7e:	f3c3 4107 	ubfx	r1, r3, #16, #8
   18d82:	f89d 0015 	ldrb.w	r0, [sp, #21]
   18d86:	4041      	eors	r1, r0
   18d88:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   18d8c:	f3c3 2107 	ubfx	r1, r3, #8, #8
   18d90:	f89d 0016 	ldrb.w	r0, [sp, #22]
   18d94:	4041      	eors	r1, r0
   18d96:	f88d 1016 	strb.w	r1, [sp, #22]
   18d9a:	b2db      	uxtb	r3, r3
   18d9c:	f89d 1017 	ldrb.w	r1, [sp, #23]
   18da0:	404b      	eors	r3, r1
   18da2:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   18da6:	6893      	ldr	r3, [r2, #8]
   18da8:	f89d 1018 	ldrb.w	r1, [sp, #24]
   18dac:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   18db0:	f88d 1018 	strb.w	r1, [sp, #24]
   18db4:	f3c3 4107 	ubfx	r1, r3, #16, #8
   18db8:	f89d 0019 	ldrb.w	r0, [sp, #25]
   18dbc:	4041      	eors	r1, r0
   18dbe:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   18dc2:	f3c3 2107 	ubfx	r1, r3, #8, #8
   18dc6:	f89d 001a 	ldrb.w	r0, [sp, #26]
   18dca:	4041      	eors	r1, r0
   18dcc:	f88d 101a 	strb.w	r1, [sp, #26]
   18dd0:	b2db      	uxtb	r3, r3
   18dd2:	f89d 101b 	ldrb.w	r1, [sp, #27]
   18dd6:	404b      	eors	r3, r1
   18dd8:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   18ddc:	68d3      	ldr	r3, [r2, #12]
   18dde:	f89d 201c 	ldrb.w	r2, [sp, #28]
   18de2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   18de6:	f88d 201c 	strb.w	r2, [sp, #28]
   18dea:	f3c3 4207 	ubfx	r2, r3, #16, #8
   18dee:	f89d 101d 	ldrb.w	r1, [sp, #29]
   18df2:	404a      	eors	r2, r1
   18df4:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   18df8:	f3c3 2207 	ubfx	r2, r3, #8, #8
   18dfc:	f89d 101e 	ldrb.w	r1, [sp, #30]
   18e00:	404a      	eors	r2, r1
   18e02:	f88d 201e 	strb.w	r2, [sp, #30]
   18e06:	b2db      	uxtb	r3, r3
   18e08:	f89d 201f 	ldrb.w	r2, [sp, #31]
   18e0c:	4053      	eors	r3, r2
   18e0e:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   18e12:	2d08      	cmp	r5, #8
   18e14:	d801      	bhi.n	18e1a <tc_aes_encrypt+0x532>
	for (i = 0; i < (Nb * Nk); ++i) {
   18e16:	2300      	movs	r3, #0
   18e18:	e5f4      	b.n	18a04 <tc_aes_encrypt+0x11c>
   18e1a:	2300      	movs	r3, #0
   18e1c:	e005      	b.n	18e2a <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
   18e1e:	aa04      	add	r2, sp, #16
   18e20:	5cd1      	ldrb	r1, [r2, r3]
   18e22:	4869      	ldr	r0, [pc, #420]	; (18fc8 <tc_aes_encrypt+0x6e0>)
   18e24:	5c41      	ldrb	r1, [r0, r1]
   18e26:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   18e28:	3301      	adds	r3, #1
   18e2a:	2b0f      	cmp	r3, #15
   18e2c:	d9f7      	bls.n	18e1e <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   18e2e:	f89d 3010 	ldrb.w	r3, [sp, #16]
   18e32:	f88d 3000 	strb.w	r3, [sp]
   18e36:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18e3a:	f88d 3001 	strb.w	r3, [sp, #1]
   18e3e:	f89d 301a 	ldrb.w	r3, [sp, #26]
   18e42:	f88d 3002 	strb.w	r3, [sp, #2]
   18e46:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18e4a:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   18e4e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   18e52:	f88d 3004 	strb.w	r3, [sp, #4]
   18e56:	f89d 3019 	ldrb.w	r3, [sp, #25]
   18e5a:	f88d 3005 	strb.w	r3, [sp, #5]
   18e5e:	f89d 301e 	ldrb.w	r3, [sp, #30]
   18e62:	f88d 3006 	strb.w	r3, [sp, #6]
   18e66:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18e6a:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   18e6e:	f89d 3018 	ldrb.w	r3, [sp, #24]
   18e72:	f88d 3008 	strb.w	r3, [sp, #8]
   18e76:	f89d 301d 	ldrb.w	r3, [sp, #29]
   18e7a:	f88d 3009 	strb.w	r3, [sp, #9]
   18e7e:	f89d 3012 	ldrb.w	r3, [sp, #18]
   18e82:	f88d 300a 	strb.w	r3, [sp, #10]
   18e86:	f89d 3017 	ldrb.w	r3, [sp, #23]
   18e8a:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   18e8e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   18e92:	f88d 300c 	strb.w	r3, [sp, #12]
   18e96:	f89d 3011 	ldrb.w	r3, [sp, #17]
   18e9a:	f88d 300d 	strb.w	r3, [sp, #13]
   18e9e:	f89d 3016 	ldrb.w	r3, [sp, #22]
   18ea2:	f88d 300e 	strb.w	r3, [sp, #14]
   18ea6:	f89d 301b 	ldrb.w	r3, [sp, #27]
   18eaa:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   18eae:	2310      	movs	r3, #16
   18eb0:	466a      	mov	r2, sp
   18eb2:	4619      	mov	r1, r3
   18eb4:	eb0d 0003 	add.w	r0, sp, r3
   18eb8:	f000 f888 	bl	18fcc <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   18ebc:	1c6b      	adds	r3, r5, #1
   18ebe:	011b      	lsls	r3, r3, #4
   18ec0:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   18ec2:	58fb      	ldr	r3, [r7, r3]
   18ec4:	f89d 1010 	ldrb.w	r1, [sp, #16]
   18ec8:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   18ecc:	f88d 1010 	strb.w	r1, [sp, #16]
   18ed0:	f3c3 4107 	ubfx	r1, r3, #16, #8
   18ed4:	f89d 0011 	ldrb.w	r0, [sp, #17]
   18ed8:	4041      	eors	r1, r0
   18eda:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   18ede:	f3c3 2107 	ubfx	r1, r3, #8, #8
   18ee2:	f89d 0012 	ldrb.w	r0, [sp, #18]
   18ee6:	4041      	eors	r1, r0
   18ee8:	f88d 1012 	strb.w	r1, [sp, #18]
   18eec:	b2db      	uxtb	r3, r3
   18eee:	f89d 1013 	ldrb.w	r1, [sp, #19]
   18ef2:	404b      	eors	r3, r1
   18ef4:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   18ef8:	6853      	ldr	r3, [r2, #4]
   18efa:	f89d 1014 	ldrb.w	r1, [sp, #20]
   18efe:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   18f02:	f88d 1014 	strb.w	r1, [sp, #20]
   18f06:	f3c3 4107 	ubfx	r1, r3, #16, #8
   18f0a:	f89d 0015 	ldrb.w	r0, [sp, #21]
   18f0e:	4041      	eors	r1, r0
   18f10:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   18f14:	f3c3 2107 	ubfx	r1, r3, #8, #8
   18f18:	f89d 0016 	ldrb.w	r0, [sp, #22]
   18f1c:	4041      	eors	r1, r0
   18f1e:	f88d 1016 	strb.w	r1, [sp, #22]
   18f22:	b2db      	uxtb	r3, r3
   18f24:	f89d 1017 	ldrb.w	r1, [sp, #23]
   18f28:	404b      	eors	r3, r1
   18f2a:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   18f2e:	6893      	ldr	r3, [r2, #8]
   18f30:	f89d 1018 	ldrb.w	r1, [sp, #24]
   18f34:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   18f38:	f88d 1018 	strb.w	r1, [sp, #24]
   18f3c:	f3c3 4107 	ubfx	r1, r3, #16, #8
   18f40:	f89d 0019 	ldrb.w	r0, [sp, #25]
   18f44:	4041      	eors	r1, r0
   18f46:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   18f4a:	f3c3 2107 	ubfx	r1, r3, #8, #8
   18f4e:	f89d 001a 	ldrb.w	r0, [sp, #26]
   18f52:	4041      	eors	r1, r0
   18f54:	f88d 101a 	strb.w	r1, [sp, #26]
   18f58:	b2db      	uxtb	r3, r3
   18f5a:	f89d 101b 	ldrb.w	r1, [sp, #27]
   18f5e:	404b      	eors	r3, r1
   18f60:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   18f64:	68d3      	ldr	r3, [r2, #12]
   18f66:	f89d 201c 	ldrb.w	r2, [sp, #28]
   18f6a:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   18f6e:	f88d 201c 	strb.w	r2, [sp, #28]
   18f72:	f3c3 4207 	ubfx	r2, r3, #16, #8
   18f76:	f89d 101d 	ldrb.w	r1, [sp, #29]
   18f7a:	404a      	eors	r2, r1
   18f7c:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   18f80:	f3c3 2207 	ubfx	r2, r3, #8, #8
   18f84:	f89d 101e 	ldrb.w	r1, [sp, #30]
   18f88:	404a      	eors	r2, r1
   18f8a:	f88d 201e 	strb.w	r2, [sp, #30]
   18f8e:	b2db      	uxtb	r3, r3
   18f90:	f89d 201f 	ldrb.w	r2, [sp, #31]
   18f94:	4053      	eors	r3, r2
   18f96:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   18f9a:	2310      	movs	r3, #16
   18f9c:	eb0d 0203 	add.w	r2, sp, r3
   18fa0:	4619      	mov	r1, r3
   18fa2:	4640      	mov	r0, r8
   18fa4:	f000 f812 	bl	18fcc <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   18fa8:	2210      	movs	r2, #16
   18faa:	2100      	movs	r1, #0
   18fac:	eb0d 0002 	add.w	r0, sp, r2
   18fb0:	f000 f818 	bl	18fe4 <_set>

	return TC_CRYPTO_SUCCESS;
   18fb4:	2001      	movs	r0, #1
}
   18fb6:	b008      	add	sp, #32
   18fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   18fbc:	2000      	movs	r0, #0
}
   18fbe:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   18fc0:	2000      	movs	r0, #0
   18fc2:	e7f8      	b.n	18fb6 <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
   18fc4:	2000      	movs	r0, #0
   18fc6:	e7f6      	b.n	18fb6 <tc_aes_encrypt+0x6ce>
   18fc8:	00029434 	.word	0x00029434

00018fcc <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   18fcc:	428b      	cmp	r3, r1
   18fce:	d901      	bls.n	18fd4 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   18fd0:	2000      	movs	r0, #0
	}
}
   18fd2:	4770      	bx	lr
{
   18fd4:	b510      	push	{r4, lr}
   18fd6:	461c      	mov	r4, r3
   18fd8:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
   18fda:	461a      	mov	r2, r3
   18fdc:	f7f2 fc58 	bl	b890 <memcpy>
		return from_len;
   18fe0:	4620      	mov	r0, r4
}
   18fe2:	bd10      	pop	{r4, pc}

00018fe4 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   18fe4:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   18fe6:	f7f2 fc7c 	bl	b8e2 <memset>
}
   18fea:	bd08      	pop	{r3, pc}

00018fec <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   18fec:	09c3      	lsrs	r3, r0, #7
   18fee:	005a      	lsls	r2, r3, #1
   18ff0:	4413      	add	r3, r2
   18ff2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   18ff6:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   18ffa:	b2c0      	uxtb	r0, r0
   18ffc:	4770      	bx	lr
	...

00019000 <pos>:

static int
pos(char c)
{
    const char *p;
    for (p = base64_chars; *p; p++)
   19000:	4b06      	ldr	r3, [pc, #24]	; (1901c <pos+0x1c>)
   19002:	781a      	ldrb	r2, [r3, #0]
   19004:	b132      	cbz	r2, 19014 <pos+0x14>
        if (*p == c)
   19006:	4282      	cmp	r2, r0
   19008:	d001      	beq.n	1900e <pos+0xe>
    for (p = base64_chars; *p; p++)
   1900a:	3301      	adds	r3, #1
   1900c:	e7f9      	b.n	19002 <pos+0x2>
            return p - base64_chars;
   1900e:	4803      	ldr	r0, [pc, #12]	; (1901c <pos+0x1c>)
   19010:	1a18      	subs	r0, r3, r0
   19012:	4770      	bx	lr
    return -1;
   19014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   19018:	4770      	bx	lr
   1901a:	bf00      	nop
   1901c:	00029534 	.word	0x00029534

00019020 <token_decode>:
{
    int i;
    unsigned int val = 0;
    int marker = 0;

    if (len < 4) {
   19020:	2903      	cmp	r1, #3
   19022:	dd18      	ble.n	19056 <token_decode+0x36>
{
   19024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19026:	4607      	mov	r7, r0
    int marker = 0;
   19028:	2600      	movs	r6, #0
    unsigned int val = 0;
   1902a:	4634      	mov	r4, r6
        return DECODE_ERROR;
    }

    for (i = 0; i < 4; i++) {
   1902c:	4635      	mov	r5, r6
   1902e:	e001      	b.n	19034 <token_decode+0x14>
        val *= 64;
        if (token[i] == '=') {
            marker++;
   19030:	3601      	adds	r6, #1
    for (i = 0; i < 4; i++) {
   19032:	3501      	adds	r5, #1
   19034:	2d03      	cmp	r5, #3
   19036:	dc09      	bgt.n	1904c <token_decode+0x2c>
        val *= 64;
   19038:	01a4      	lsls	r4, r4, #6
        if (token[i] == '=') {
   1903a:	5d78      	ldrb	r0, [r7, r5]
   1903c:	283d      	cmp	r0, #61	; 0x3d
   1903e:	d0f7      	beq.n	19030 <token_decode+0x10>
        } else if (marker > 0) {
   19040:	2e00      	cmp	r6, #0
   19042:	dc0b      	bgt.n	1905c <token_decode+0x3c>
            return DECODE_ERROR;
        } else {
            val += pos(token[i]);
   19044:	f7ff ffdc 	bl	19000 <pos>
   19048:	4404      	add	r4, r0
   1904a:	e7f2      	b.n	19032 <token_decode+0x12>
        }
    }

    if (marker > 2) {
   1904c:	2e02      	cmp	r6, #2
   1904e:	dc08      	bgt.n	19062 <token_decode+0x42>
        return DECODE_ERROR;
    }

    return (marker << 24) | val;
   19050:	ea44 6006 	orr.w	r0, r4, r6, lsl #24
}
   19054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DECODE_ERROR;
   19056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1905a:	4770      	bx	lr
            return DECODE_ERROR;
   1905c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19060:	e7f8      	b.n	19054 <token_decode+0x34>
        return DECODE_ERROR;
   19062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19066:	e7f5      	b.n	19054 <token_decode+0x34>

00019068 <base64_encode>:
{
   19068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1906a:	4616      	mov	r6, r2
    p = s;
   1906c:	4615      	mov	r5, r2
    last = NULL;
   1906e:	2400      	movs	r4, #0
    i = 0;
   19070:	4622      	mov	r2, r4
    while (i < size) {
   19072:	e019      	b.n	190a8 <base64_encode+0x40>
        i++;
   19074:	3203      	adds	r2, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   19076:	f3c4 4c85 	ubfx	ip, r4, #18, #6
   1907a:	4f1d      	ldr	r7, [pc, #116]	; (190f0 <base64_encode+0x88>)
   1907c:	f817 c00c 	ldrb.w	ip, [r7, ip]
   19080:	f885 c000 	strb.w	ip, [r5]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   19084:	f3c4 3c05 	ubfx	ip, r4, #12, #6
   19088:	f817 c00c 	ldrb.w	ip, [r7, ip]
   1908c:	f885 c001 	strb.w	ip, [r5, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   19090:	f3c4 1c85 	ubfx	ip, r4, #6, #6
   19094:	f817 c00c 	ldrb.w	ip, [r7, ip]
   19098:	f885 c002 	strb.w	ip, [r5, #2]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   1909c:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   190a0:	5d3c      	ldrb	r4, [r7, r4]
   190a2:	70ec      	strb	r4, [r5, #3]
        last = p;
   190a4:	462c      	mov	r4, r5
        p += 4;
   190a6:	3504      	adds	r5, #4
    while (i < size) {
   190a8:	428a      	cmp	r2, r1
   190aa:	da0d      	bge.n	190c8 <base64_encode+0x60>
        c = q[i++];
   190ac:	1c57      	adds	r7, r2, #1
   190ae:	5c84      	ldrb	r4, [r0, r2]
        c *= 256;
   190b0:	0224      	lsls	r4, r4, #8
        if (i < size)
   190b2:	42b9      	cmp	r1, r7
   190b4:	dd01      	ble.n	190ba <base64_encode+0x52>
            c += q[i];
   190b6:	5dc7      	ldrb	r7, [r0, r7]
   190b8:	443c      	add	r4, r7
        i++;
   190ba:	1c97      	adds	r7, r2, #2
        c *= 256;
   190bc:	0224      	lsls	r4, r4, #8
        if (i < size)
   190be:	42b9      	cmp	r1, r7
   190c0:	ddd8      	ble.n	19074 <base64_encode+0xc>
            c += q[i];
   190c2:	5dc7      	ldrb	r7, [r0, r7]
   190c4:	443c      	add	r4, r7
   190c6:	e7d5      	b.n	19074 <base64_encode+0xc>
    if (last) {
   190c8:	b134      	cbz	r4, 190d8 <base64_encode+0x70>
        diff = i - size;
   190ca:	1a52      	subs	r2, r2, r1
        if (diff > 0) {
   190cc:	2a00      	cmp	r2, #0
   190ce:	dd03      	ble.n	190d8 <base64_encode+0x70>
            if (should_pad) {
   190d0:	b933      	cbnz	r3, 190e0 <base64_encode+0x78>
                p = last + (4 - diff);
   190d2:	f1c2 0204 	rsb	r2, r2, #4
   190d6:	18a5      	adds	r5, r4, r2
    *p = 0;
   190d8:	2300      	movs	r3, #0
   190da:	702b      	strb	r3, [r5, #0]
}
   190dc:	1ba8      	subs	r0, r5, r6
   190de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                memset(last + (4 - diff), '=', diff);
   190e0:	f1c2 0004 	rsb	r0, r2, #4
   190e4:	213d      	movs	r1, #61	; 0x3d
   190e6:	4420      	add	r0, r4
   190e8:	f7f2 fbfb 	bl	b8e2 <memset>
   190ec:	e7f4      	b.n	190d8 <base64_encode+0x70>
   190ee:	bf00      	nop
   190f0:	00029534 	.word	0x00029534

000190f4 <base64_decoder_go>:
    return len * 3 / 4;
}

int
base64_decoder_go(struct base64_decoder *dec)
{
   190f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190f8:	b085      	sub	sp, #20
   190fa:	4680      	mov	r8, r0
    int src_off;
    int dst_len;
    int dst_off;
    int i;

    dst = dec->dst;
   190fc:	6843      	ldr	r3, [r0, #4]
   190fe:	9303      	str	r3, [sp, #12]
    dst_off = 0;
    src_off = 0;

    /* A length <= 0 means "unbounded". */
    if (dec->src_len <= 0) {
   19100:	f8d0 a008 	ldr.w	sl, [r0, #8]
   19104:	f1ba 0f00 	cmp.w	sl, #0
   19108:	dd18      	ble.n	1913c <base64_decoder_go+0x48>
        src_len = INT_MAX;
    } else {
        src_len = dec->src_len;
    }
    if (dec->dst_len <= 0) {
   1910a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1910e:	9300      	str	r3, [sp, #0]
   19110:	2b00      	cmp	r3, #0
   19112:	dd16      	ble.n	19142 <base64_decoder_go+0x4e>
        dst_len = INT_MAX;
   19114:	f04f 0900 	mov.w	r9, #0
   19118:	464d      	mov	r5, r9
        dst_len = dec->dst_len;
    }

    while (1) {
        src_rem = src_len - src_off;
        if (src_rem == 0) {
   1911a:	ebba 0305 	subs.w	r3, sl, r5
   1911e:	9301      	str	r3, [sp, #4]
   19120:	d068      	beq.n	191f4 <base64_decoder_go+0x100>
            /* End of source input. */
            break;
        }

        if (dec->src[src_off] == '\0') {
   19122:	f8d8 6000 	ldr.w	r6, [r8]
   19126:	1973      	adds	r3, r6, r5
   19128:	9302      	str	r3, [sp, #8]
   1912a:	5d73      	ldrb	r3, [r6, r5]
   1912c:	2b00      	cmp	r3, #0
   1912e:	d061      	beq.n	191f4 <base64_decoder_go+0x100>
            /* End of source string. */
            break;
        }

        /* Account for possibility of partial token from previous call. */
        read_len = 4 - dec->buf_len;
   19130:	f8d8 b014 	ldr.w	fp, [r8, #20]
   19134:	f1cb 0704 	rsb	r7, fp, #4

        /* Detect invalid input. */
        for (i = 0; i < read_len; i++) {
   19138:	2400      	movs	r4, #0
   1913a:	e007      	b.n	1914c <base64_decoder_go+0x58>
        src_len = INT_MAX;
   1913c:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   19140:	e7e3      	b.n	1910a <base64_decoder_go+0x16>
        dst_len = INT_MAX;
   19142:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   19146:	9300      	str	r3, [sp, #0]
   19148:	e7e4      	b.n	19114 <base64_decoder_go+0x20>
        for (i = 0; i < read_len; i++) {
   1914a:	3401      	adds	r4, #1
   1914c:	42bc      	cmp	r4, r7
   1914e:	da0d      	bge.n	1916c <base64_decoder_go+0x78>
            sval = dec->src[src_off + i];
   19150:	192b      	adds	r3, r5, r4
   19152:	5cf1      	ldrb	r1, [r6, r3]
            if (sval == '\0') {
   19154:	2900      	cmp	r1, #0
   19156:	d04b      	beq.n	191f0 <base64_decoder_go+0xfc>
                /* Incomplete input. */
                return -1;
            }
            if (sval != '=' && strchr(base64_chars, sval) == NULL) {
   19158:	293d      	cmp	r1, #61	; 0x3d
   1915a:	d0f6      	beq.n	1914a <base64_decoder_go+0x56>
   1915c:	482b      	ldr	r0, [pc, #172]	; (1920c <base64_decoder_go+0x118>)
   1915e:	f002 ffcd 	bl	1c0fc <strchr>
   19162:	2800      	cmp	r0, #0
   19164:	d1f1      	bne.n	1914a <base64_decoder_go+0x56>
                /* Invalid base64 character. */
                return -1;
   19166:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1916a:	e043      	b.n	191f4 <base64_decoder_go+0x100>
            }
        }

        if (src_rem < read_len) {
   1916c:	9b01      	ldr	r3, [sp, #4]
   1916e:	42bb      	cmp	r3, r7
   19170:	db27      	blt.n	191c2 <base64_decoder_go+0xce>
            dec->buf_len += src_rem;
            break;
        }

        /* Copy full token into buf and decode it. */
        memcpy(&dec->buf[dec->buf_len], &dec->src[src_off], read_len);
   19172:	f10b 0010 	add.w	r0, fp, #16
   19176:	463a      	mov	r2, r7
   19178:	9902      	ldr	r1, [sp, #8]
   1917a:	4440      	add	r0, r8
   1917c:	f7f2 fb88 	bl	b890 <memcpy>
        val = token_decode(dec->buf, read_len);
   19180:	4639      	mov	r1, r7
   19182:	f108 0010 	add.w	r0, r8, #16
   19186:	f7ff ff4b 	bl	19020 <token_decode>
        if (val == DECODE_ERROR) {
   1918a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1918e:	d035      	beq.n	191fc <base64_decoder_go+0x108>
            return -1;
        }
        src_off += read_len;
   19190:	443d      	add	r5, r7
        dec->buf_len = 0;
   19192:	2300      	movs	r3, #0
   19194:	f8c8 3014 	str.w	r3, [r8, #20]

        marker = (val >> 24) & 0xff;
   19198:	0e02      	lsrs	r2, r0, #24

        if (dst_off >= dst_len) {
   1919a:	9b00      	ldr	r3, [sp, #0]
   1919c:	4599      	cmp	r9, r3
   1919e:	da29      	bge.n	191f4 <base64_decoder_go+0x100>
            break;
        }
        dst[dst_off] = (val >> 16) & 0xff;
   191a0:	0c03      	lsrs	r3, r0, #16
   191a2:	9903      	ldr	r1, [sp, #12]
   191a4:	f801 3009 	strb.w	r3, [r1, r9]
        dst_off++;
   191a8:	f109 0301 	add.w	r3, r9, #1

        if (marker < 2) {
   191ac:	2a01      	cmp	r2, #1
   191ae:	d916      	bls.n	191de <base64_decoder_go+0xea>
            }
            dst[dst_off] = (val >> 8) & 0xff;
            dst_off++;
        }

        if (marker < 1) {
   191b0:	b92a      	cbnz	r2, 191be <base64_decoder_go+0xca>
            if (dst_off >= dst_len) {
   191b2:	9a00      	ldr	r2, [sp, #0]
   191b4:	4293      	cmp	r3, r2
   191b6:	da26      	bge.n	19206 <base64_decoder_go+0x112>
                break;
            }
            dst[dst_off] = val & 0xff;
   191b8:	9a03      	ldr	r2, [sp, #12]
   191ba:	54d0      	strb	r0, [r2, r3]
            dst_off++;
   191bc:	3301      	adds	r3, #1
        dst_len = INT_MAX;
   191be:	4699      	mov	r9, r3
   191c0:	e7ab      	b.n	1911a <base64_decoder_go+0x26>
            memcpy(&dec->buf[dec->buf_len], &dec->src[src_off], src_rem);
   191c2:	f10b 0010 	add.w	r0, fp, #16
   191c6:	461c      	mov	r4, r3
   191c8:	461a      	mov	r2, r3
   191ca:	9902      	ldr	r1, [sp, #8]
   191cc:	4440      	add	r0, r8
   191ce:	f7f2 fb5f 	bl	b890 <memcpy>
            dec->buf_len += src_rem;
   191d2:	f8d8 3014 	ldr.w	r3, [r8, #20]
   191d6:	4423      	add	r3, r4
   191d8:	f8c8 3014 	str.w	r3, [r8, #20]
            break;
   191dc:	e00a      	b.n	191f4 <base64_decoder_go+0x100>
            if (dst_off >= dst_len) {
   191de:	9900      	ldr	r1, [sp, #0]
   191e0:	428b      	cmp	r3, r1
   191e2:	da0e      	bge.n	19202 <base64_decoder_go+0x10e>
            dst[dst_off] = (val >> 8) & 0xff;
   191e4:	0a01      	lsrs	r1, r0, #8
   191e6:	9c03      	ldr	r4, [sp, #12]
   191e8:	54e1      	strb	r1, [r4, r3]
            dst_off++;
   191ea:	f109 0302 	add.w	r3, r9, #2
   191ee:	e7df      	b.n	191b0 <base64_decoder_go+0xbc>
                return -1;
   191f0:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
        }
    }

    return dst_off;
}
   191f4:	4648      	mov	r0, r9
   191f6:	b005      	add	sp, #20
   191f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return -1;
   191fc:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   19200:	e7f8      	b.n	191f4 <base64_decoder_go+0x100>
        dst_off++;
   19202:	4699      	mov	r9, r3
   19204:	e7f6      	b.n	191f4 <base64_decoder_go+0x100>
   19206:	4699      	mov	r9, r3
   19208:	e7f4      	b.n	191f4 <base64_decoder_go+0x100>
   1920a:	bf00      	nop
   1920c:	00029534 	.word	0x00029534

00019210 <base64_decode>:
{
   19210:	b500      	push	{lr}
   19212:	b087      	sub	sp, #28
    struct base64_decoder dec = {
   19214:	2300      	movs	r3, #0
   19216:	9302      	str	r3, [sp, #8]
   19218:	9303      	str	r3, [sp, #12]
   1921a:	9304      	str	r3, [sp, #16]
   1921c:	9305      	str	r3, [sp, #20]
   1921e:	9000      	str	r0, [sp, #0]
   19220:	9101      	str	r1, [sp, #4]
    return base64_decoder_go(&dec);
   19222:	4668      	mov	r0, sp
   19224:	f7ff ff66 	bl	190f4 <base64_decoder_go>
}
   19228:	b007      	add	sp, #28
   1922a:	f85d fb04 	ldr.w	pc, [sp], #4

0001922e <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   1922e:	b530      	push	{r4, r5, lr}
   19230:	b085      	sub	sp, #20
   19232:	460c      	mov	r4, r1
    CborError err;
    container->writer = encoder->writer;
   19234:	6801      	ldr	r1, [r0, #0]
   19236:	6021      	str	r1, [r4, #0]
    ++encoder->added;
   19238:	6881      	ldr	r1, [r0, #8]
   1923a:	3101      	adds	r1, #1
   1923c:	6081      	str	r1, [r0, #8]
    container->added = 0;
   1923e:	2100      	movs	r1, #0
   19240:	60a1      	str	r1, [r4, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   19242:	f003 0120 	and.w	r1, r3, #32
   19246:	60e1      	str	r1, [r4, #12]

    if (length == CborIndefiniteLength) {
   19248:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   1924c:	d10d      	bne.n	1926a <create_container+0x3c>
        container->flags |= CborIteratorFlag_UnknownLength;
   1924e:	f041 0104 	orr.w	r1, r1, #4
   19252:	60e1      	str	r1, [r4, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   19254:	331f      	adds	r3, #31
   19256:	a904      	add	r1, sp, #16
   19258:	f801 3d10 	strb.w	r3, [r1, #-16]!
    return encoder->writer->write(encoder->writer, data, len);
   1925c:	6820      	ldr	r0, [r4, #0]
   1925e:	6803      	ldr	r3, [r0, #0]
   19260:	2201      	movs	r2, #1
   19262:	4798      	blx	r3
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   19264:	2000      	movs	r0, #0
   19266:	b005      	add	sp, #20
   19268:	bd30      	pop	{r4, r5, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   1926a:	4610      	mov	r0, r2
   1926c:	2100      	movs	r1, #0
    v = cbor_htonll(v);
   1926e:	ba12      	rev	r2, r2
   19270:	2500      	movs	r5, #0
    memcpy(where, &v, sizeof(v));
   19272:	9502      	str	r5, [sp, #8]
   19274:	9203      	str	r2, [sp, #12]
    if (ui < Value8Bit) {
   19276:	2900      	cmp	r1, #0
   19278:	bf08      	it	eq
   1927a:	2818      	cmpeq	r0, #24
   1927c:	d31a      	bcc.n	192b4 <create_container+0x86>
        if (ui > 0xffU)
   1927e:	2900      	cmp	r1, #0
   19280:	bf08      	it	eq
   19282:	f5b0 7f80 	cmpeq.w	r0, #256	; 0x100
   19286:	d21b      	bcs.n	192c0 <create_container+0x92>
        unsigned more = 0;
   19288:	2500      	movs	r5, #0
        if (ui > 0xffffU)
   1928a:	2900      	cmp	r1, #0
   1928c:	bf08      	it	eq
   1928e:	f5b0 3f80 	cmpeq.w	r0, #65536	; 0x10000
   19292:	d300      	bcc.n	19296 <create_container+0x68>
            ++more;
   19294:	3501      	adds	r5, #1
        bufstart -= (size_t)1 << more;
   19296:	2101      	movs	r1, #1
   19298:	fa01 f205 	lsl.w	r2, r1, r5
   1929c:	f10d 010f 	add.w	r1, sp, #15
   192a0:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   192a2:	442b      	add	r3, r5
   192a4:	3318      	adds	r3, #24
   192a6:	700b      	strb	r3, [r1, #0]
    return encoder->writer->write(encoder->writer, data, len);
   192a8:	6820      	ldr	r0, [r4, #0]
   192aa:	6803      	ldr	r3, [r0, #0]
   192ac:	aa04      	add	r2, sp, #16
   192ae:	1a52      	subs	r2, r2, r1
   192b0:	4798      	blx	r3
   192b2:	e7d7      	b.n	19264 <create_container+0x36>
        *bufstart += shiftedMajorType;
   192b4:	eb03 6212 	add.w	r2, r3, r2, lsr #24
   192b8:	a904      	add	r1, sp, #16
   192ba:	f801 2d01 	strb.w	r2, [r1, #-1]!
   192be:	e7f3      	b.n	192a8 <create_container+0x7a>
            ++more;
   192c0:	2501      	movs	r5, #1
   192c2:	e7e2      	b.n	1928a <create_container+0x5c>

000192c4 <encode_string>:
{
   192c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   192c6:	b085      	sub	sp, #20
   192c8:	4604      	mov	r4, r0
   192ca:	460d      	mov	r5, r1
   192cc:	461e      	mov	r6, r3
    CborError err = encode_number(encoder, length, shiftedMajorType);
   192ce:	2100      	movs	r1, #0
    ++encoder->added;
   192d0:	68a3      	ldr	r3, [r4, #8]
   192d2:	3301      	adds	r3, #1
   192d4:	60a3      	str	r3, [r4, #8]
    v = cbor_htonll(v);
   192d6:	ba2b      	rev	r3, r5
   192d8:	2700      	movs	r7, #0
    memcpy(where, &v, sizeof(v));
   192da:	9702      	str	r7, [sp, #8]
   192dc:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   192de:	2900      	cmp	r1, #0
   192e0:	bf08      	it	eq
   192e2:	2d18      	cmpeq	r5, #24
   192e4:	d321      	bcc.n	1932a <encode_string+0x66>
   192e6:	4628      	mov	r0, r5
        if (ui > 0xffU)
   192e8:	2900      	cmp	r1, #0
   192ea:	bf08      	it	eq
   192ec:	f5b5 7f80 	cmpeq.w	r5, #256	; 0x100
   192f0:	d221      	bcs.n	19336 <encode_string+0x72>
        unsigned more = 0;
   192f2:	2300      	movs	r3, #0
        if (ui > 0xffffU)
   192f4:	2900      	cmp	r1, #0
   192f6:	bf08      	it	eq
   192f8:	f5b0 3f80 	cmpeq.w	r0, #65536	; 0x10000
   192fc:	d300      	bcc.n	19300 <encode_string+0x3c>
            ++more;
   192fe:	3301      	adds	r3, #1
        bufstart -= (size_t)1 << more;
   19300:	2101      	movs	r1, #1
   19302:	fa01 f003 	lsl.w	r0, r1, r3
   19306:	f10d 010f 	add.w	r1, sp, #15
   1930a:	1a09      	subs	r1, r1, r0
        *bufstart = shiftedMajorType + Value8Bit + more;
   1930c:	441a      	add	r2, r3
   1930e:	3218      	adds	r2, #24
   19310:	700a      	strb	r2, [r1, #0]
    return encoder->writer->write(encoder->writer, data, len);
   19312:	6820      	ldr	r0, [r4, #0]
   19314:	6803      	ldr	r3, [r0, #0]
   19316:	aa04      	add	r2, sp, #16
   19318:	1a52      	subs	r2, r2, r1
   1931a:	4798      	blx	r3
   1931c:	6820      	ldr	r0, [r4, #0]
   1931e:	6803      	ldr	r3, [r0, #0]
   19320:	462a      	mov	r2, r5
   19322:	4631      	mov	r1, r6
   19324:	4798      	blx	r3
}
   19326:	b005      	add	sp, #20
   19328:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *bufstart += shiftedMajorType;
   1932a:	eb02 6213 	add.w	r2, r2, r3, lsr #24
   1932e:	a904      	add	r1, sp, #16
   19330:	f801 2d01 	strb.w	r2, [r1, #-1]!
   19334:	e7ed      	b.n	19312 <encode_string+0x4e>
            ++more;
   19336:	2301      	movs	r3, #1
   19338:	e7dc      	b.n	192f4 <encode_string+0x30>

0001933a <cbor_encoder_init>:
    encoder->writer = writer;
   1933a:	6001      	str	r1, [r0, #0]
    encoder->added = 0;
   1933c:	2300      	movs	r3, #0
   1933e:	6083      	str	r3, [r0, #8]
    encoder->flags = flags;
   19340:	60c2      	str	r2, [r0, #12]
}
   19342:	4770      	bx	lr

00019344 <cbor_encode_uint>:
{
   19344:	b510      	push	{r4, lr}
   19346:	b084      	sub	sp, #16
    ++encoder->added;
   19348:	6881      	ldr	r1, [r0, #8]
   1934a:	3101      	adds	r1, #1
   1934c:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   1934e:	ba11      	rev	r1, r2
   19350:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   19352:	9402      	str	r4, [sp, #8]
   19354:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   19356:	2b00      	cmp	r3, #0
   19358:	bf08      	it	eq
   1935a:	2a18      	cmpeq	r2, #24
   1935c:	d31f      	bcc.n	1939e <cbor_encode_uint+0x5a>
        if (ui > 0xffU)
   1935e:	2b00      	cmp	r3, #0
   19360:	bf08      	it	eq
   19362:	f5b2 7f80 	cmpeq.w	r2, #256	; 0x100
   19366:	d220      	bcs.n	193aa <cbor_encode_uint+0x66>
        unsigned more = 0;
   19368:	2400      	movs	r4, #0
        if (ui > 0xffffU)
   1936a:	2b00      	cmp	r3, #0
   1936c:	bf08      	it	eq
   1936e:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
   19372:	d300      	bcc.n	19376 <cbor_encode_uint+0x32>
            ++more;
   19374:	3401      	adds	r4, #1
        if (ui > 0xffffffffU)
   19376:	2b01      	cmp	r3, #1
   19378:	bf08      	it	eq
   1937a:	2a00      	cmpeq	r2, #0
   1937c:	d300      	bcc.n	19380 <cbor_encode_uint+0x3c>
            ++more;
   1937e:	3401      	adds	r4, #1
        bufstart -= (size_t)1 << more;
   19380:	2101      	movs	r1, #1
   19382:	fa01 f304 	lsl.w	r3, r1, r4
   19386:	f10d 010f 	add.w	r1, sp, #15
   1938a:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   1938c:	3418      	adds	r4, #24
   1938e:	700c      	strb	r4, [r1, #0]
    return encoder->writer->write(encoder->writer, data, len);
   19390:	6800      	ldr	r0, [r0, #0]
   19392:	6803      	ldr	r3, [r0, #0]
   19394:	aa04      	add	r2, sp, #16
   19396:	1a52      	subs	r2, r2, r1
   19398:	4798      	blx	r3
}
   1939a:	b004      	add	sp, #16
   1939c:	bd10      	pop	{r4, pc}
        *bufstart += shiftedMajorType;
   1939e:	f3c1 6307 	ubfx	r3, r1, #24, #8
   193a2:	a904      	add	r1, sp, #16
   193a4:	f801 3d01 	strb.w	r3, [r1, #-1]!
   193a8:	e7f2      	b.n	19390 <cbor_encode_uint+0x4c>
            ++more;
   193aa:	2401      	movs	r4, #1
   193ac:	e7dd      	b.n	1936a <cbor_encode_uint+0x26>

000193ae <cbor_encode_int>:
{
   193ae:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   193b2:	b084      	sub	sp, #16
   193b4:	461f      	mov	r7, r3
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   193b6:	17db      	asrs	r3, r3, #31
   193b8:	461c      	mov	r4, r3
    uint8_t majorType = ui & 0x20;          /* extract major type */
   193ba:	b2db      	uxtb	r3, r3
   193bc:	f003 0320 	and.w	r3, r3, #32
    ui ^= value;                            /* complement negatives */
   193c0:	ea84 0b02 	eor.w	fp, r4, r2
   193c4:	ea84 0c07 	eor.w	ip, r4, r7
    ++encoder->added;
   193c8:	6882      	ldr	r2, [r0, #8]
   193ca:	3201      	adds	r2, #1
   193cc:	6082      	str	r2, [r0, #8]
    v = cbor_htonll(v);
   193ce:	fa9b f28b 	rev.w	r2, fp
   193d2:	fa9c f18c 	rev.w	r1, ip
    memcpy(where, &v, sizeof(v));
   193d6:	9102      	str	r1, [sp, #8]
   193d8:	9203      	str	r2, [sp, #12]
    if (ui < Value8Bit) {
   193da:	f1bc 0f00 	cmp.w	ip, #0
   193de:	bf08      	it	eq
   193e0:	f1bb 0f18 	cmpeq.w	fp, #24
   193e4:	d325      	bcc.n	19432 <cbor_encode_int+0x84>
        if (ui > 0xffU)
   193e6:	f1bc 0f00 	cmp.w	ip, #0
   193ea:	bf08      	it	eq
   193ec:	f5bb 7f80 	cmpeq.w	fp, #256	; 0x100
   193f0:	d225      	bcs.n	1943e <cbor_encode_int+0x90>
        unsigned more = 0;
   193f2:	2200      	movs	r2, #0
        if (ui > 0xffffU)
   193f4:	f1bc 0f00 	cmp.w	ip, #0
   193f8:	bf08      	it	eq
   193fa:	f5bb 3f80 	cmpeq.w	fp, #65536	; 0x10000
   193fe:	d300      	bcc.n	19402 <cbor_encode_int+0x54>
            ++more;
   19400:	3201      	adds	r2, #1
        if (ui > 0xffffffffU)
   19402:	f1bc 0f01 	cmp.w	ip, #1
   19406:	bf08      	it	eq
   19408:	f1bb 0f00 	cmpeq.w	fp, #0
   1940c:	d300      	bcc.n	19410 <cbor_encode_int+0x62>
            ++more;
   1940e:	3201      	adds	r2, #1
        bufstart -= (size_t)1 << more;
   19410:	2101      	movs	r1, #1
   19412:	fa01 f402 	lsl.w	r4, r1, r2
   19416:	f10d 010f 	add.w	r1, sp, #15
   1941a:	1b09      	subs	r1, r1, r4
        *bufstart = shiftedMajorType + Value8Bit + more;
   1941c:	4413      	add	r3, r2
   1941e:	3318      	adds	r3, #24
   19420:	700b      	strb	r3, [r1, #0]
    return encoder->writer->write(encoder->writer, data, len);
   19422:	6800      	ldr	r0, [r0, #0]
   19424:	6803      	ldr	r3, [r0, #0]
   19426:	aa04      	add	r2, sp, #16
   19428:	1a52      	subs	r2, r2, r1
   1942a:	4798      	blx	r3
}
   1942c:	b004      	add	sp, #16
   1942e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        *bufstart += shiftedMajorType;
   19432:	eb03 6312 	add.w	r3, r3, r2, lsr #24
   19436:	a904      	add	r1, sp, #16
   19438:	f801 3d01 	strb.w	r3, [r1, #-1]!
   1943c:	e7f1      	b.n	19422 <cbor_encode_int+0x74>
            ++more;
   1943e:	2201      	movs	r2, #1
   19440:	e7d8      	b.n	193f4 <cbor_encode_int+0x46>

00019442 <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   19442:	f1a1 0319 	sub.w	r3, r1, #25
   19446:	b2db      	uxtb	r3, r3
   19448:	2b06      	cmp	r3, #6
   1944a:	d926      	bls.n	1949a <cbor_encode_simple_value+0x58>
{
   1944c:	b510      	push	{r4, lr}
   1944e:	b084      	sub	sp, #16
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   19450:	b2ca      	uxtb	r2, r1
   19452:	2300      	movs	r3, #0
    ++encoder->added;
   19454:	6881      	ldr	r1, [r0, #8]
   19456:	3101      	adds	r1, #1
   19458:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   1945a:	ba11      	rev	r1, r2
   1945c:	2400      	movs	r4, #0
    memcpy(where, &v, sizeof(v));
   1945e:	9402      	str	r4, [sp, #8]
   19460:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   19462:	2b00      	cmp	r3, #0
   19464:	bf08      	it	eq
   19466:	2a18      	cmpeq	r2, #24
   19468:	d309      	bcc.n	1947e <cbor_encode_simple_value+0x3c>
        unsigned more = 0;
   1946a:	2300      	movs	r3, #0
        bufstart -= (size_t)1 << more;
   1946c:	2101      	movs	r1, #1
   1946e:	fa01 f203 	lsl.w	r2, r1, r3
   19472:	f10d 010f 	add.w	r1, sp, #15
   19476:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   19478:	3b08      	subs	r3, #8
   1947a:	700b      	strb	r3, [r1, #0]
   1947c:	e006      	b.n	1948c <cbor_encode_simple_value+0x4a>
        *bufstart += shiftedMajorType;
   1947e:	f3c1 6107 	ubfx	r1, r1, #24, #8
   19482:	f1a1 0320 	sub.w	r3, r1, #32
   19486:	a904      	add	r1, sp, #16
   19488:	f801 3d01 	strb.w	r3, [r1, #-1]!
    return encoder->writer->write(encoder->writer, data, len);
   1948c:	6800      	ldr	r0, [r0, #0]
   1948e:	6803      	ldr	r3, [r0, #0]
   19490:	aa04      	add	r2, sp, #16
   19492:	1a52      	subs	r2, r2, r1
   19494:	4798      	blx	r3
}
   19496:	b004      	add	sp, #16
   19498:	bd10      	pop	{r4, pc}
        return CborErrorIllegalSimpleType;
   1949a:	f44f 7083 	mov.w	r0, #262	; 0x106
}
   1949e:	4770      	bx	lr

000194a0 <cbor_encode_byte_string>:
{
   194a0:	b510      	push	{r4, lr}
   194a2:	4614      	mov	r4, r2
    return encode_string(encoder, length, ByteStringType << MajorTypeShift, string);
   194a4:	460b      	mov	r3, r1
   194a6:	2240      	movs	r2, #64	; 0x40
   194a8:	4621      	mov	r1, r4
   194aa:	f7ff ff0b 	bl	192c4 <encode_string>
}
   194ae:	bd10      	pop	{r4, pc}

000194b0 <cbor_encode_text_string>:
{
   194b0:	b510      	push	{r4, lr}
   194b2:	4614      	mov	r4, r2
    return encode_string(encoder, length, TextStringType << MajorTypeShift, string);
   194b4:	460b      	mov	r3, r1
   194b6:	2260      	movs	r2, #96	; 0x60
   194b8:	4621      	mov	r1, r4
   194ba:	f7ff ff03 	bl	192c4 <encode_string>
}
   194be:	bd10      	pop	{r4, pc}

000194c0 <cbor_encoder_create_array>:
 * length instead.
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
   194c0:	b508      	push	{r3, lr}
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   194c2:	2380      	movs	r3, #128	; 0x80
   194c4:	f7ff feb3 	bl	1922e <create_container>
}
   194c8:	bd08      	pop	{r3, pc}
	...

000194cc <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   194cc:	b510      	push	{r4, lr}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   194ce:	f102 4400 	add.w	r4, r2, #2147483648	; 0x80000000
   194d2:	4b05      	ldr	r3, [pc, #20]	; (194e8 <cbor_encoder_create_map+0x1c>)
   194d4:	429c      	cmp	r4, r3
   194d6:	d903      	bls.n	194e0 <cbor_encoder_create_map+0x14>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   194d8:	23a0      	movs	r3, #160	; 0xa0
   194da:	f7ff fea8 	bl	1922e <create_container>
}
   194de:	bd10      	pop	{r4, pc}
        return CborErrorDataTooLarge;
   194e0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   194e4:	e7fb      	b.n	194de <cbor_encoder_create_map+0x12>
   194e6:	bf00      	nop
   194e8:	7ffffffe 	.word	0x7ffffffe

000194ec <cbor_encoder_close_container>:
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;
   194ec:	680b      	ldr	r3, [r1, #0]
   194ee:	6003      	str	r3, [r0, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   194f0:	68cb      	ldr	r3, [r1, #12]
   194f2:	f013 0f04 	tst.w	r3, #4
   194f6:	d00c      	beq.n	19512 <cbor_encoder_close_container+0x26>
{
   194f8:	b500      	push	{lr}
   194fa:	b083      	sub	sp, #12
   194fc:	a902      	add	r1, sp, #8
   194fe:	23ff      	movs	r3, #255	; 0xff
   19500:	f801 3d01 	strb.w	r3, [r1, #-1]!
    return encoder->writer->write(encoder->writer, data, len);
   19504:	6800      	ldr	r0, [r0, #0]
   19506:	6803      	ldr	r3, [r0, #0]
   19508:	2201      	movs	r2, #1
   1950a:	4798      	blx	r3
        return append_byte_to_buffer(encoder, BreakByte);
    return CborNoError;
}
   1950c:	b003      	add	sp, #12
   1950e:	f85d fb04 	ldr.w	pc, [sp], #4
    return CborNoError;
   19512:	2000      	movs	r0, #0
}
   19514:	4770      	bx	lr

00019516 <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   19516:	2860      	cmp	r0, #96	; 0x60
   19518:	d009      	beq.n	1952e <is_fixed_type+0x18>
   1951a:	2840      	cmp	r0, #64	; 0x40
   1951c:	d009      	beq.n	19532 <is_fixed_type+0x1c>
   1951e:	2880      	cmp	r0, #128	; 0x80
   19520:	d009      	beq.n	19536 <is_fixed_type+0x20>
   19522:	28a0      	cmp	r0, #160	; 0xa0
   19524:	d001      	beq.n	1952a <is_fixed_type+0x14>
   19526:	2001      	movs	r0, #1
           type != CborMapType;
}
   19528:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   1952a:	2000      	movs	r0, #0
   1952c:	4770      	bx	lr
   1952e:	2000      	movs	r0, #0
   19530:	4770      	bx	lr
   19532:	2000      	movs	r0, #0
   19534:	4770      	bx	lr
   19536:	2000      	movs	r0, #0
   19538:	4770      	bx	lr

0001953a <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   1953a:	2001      	movs	r0, #1
   1953c:	4770      	bx	lr

0001953e <preparse_value>:
{
   1953e:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   19540:	6806      	ldr	r6, [r0, #0]
    it->type = CborInvalidType;
   19542:	23ff      	movs	r3, #255	; 0xff
   19544:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   19546:	6841      	ldr	r1, [r0, #4]
   19548:	6873      	ldr	r3, [r6, #4]
   1954a:	4299      	cmp	r1, r3
   1954c:	f000 808f 	beq.w	1966e <preparse_value+0x130>
   19550:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   19552:	6830      	ldr	r0, [r6, #0]
   19554:	6803      	ldr	r3, [r0, #0]
   19556:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   19558:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
    it->type = type;
   1955c:	73a5      	strb	r5, [r4, #14]
    it->flags = 0;
   1955e:	2300      	movs	r3, #0
   19560:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   19562:	f000 001f 	and.w	r0, r0, #31
   19566:	81a0      	strh	r0, [r4, #12]
    if (descriptor > Value64Bit) {
   19568:	281b      	cmp	r0, #27
   1956a:	d91d      	bls.n	195a8 <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   1956c:	281f      	cmp	r0, #31
   1956e:	d10b      	bne.n	19588 <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   19570:	4628      	mov	r0, r5
   19572:	f7ff ffd0 	bl	19516 <is_fixed_type>
   19576:	f080 0001 	eor.w	r0, r0, #1
   1957a:	f010 0fff 	tst.w	r0, #255	; 0xff
   1957e:	d00b      	beq.n	19598 <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   19580:	2304      	movs	r3, #4
   19582:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   19584:	2000      	movs	r0, #0
}
   19586:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   19588:	2de0      	cmp	r5, #224	; 0xe0
   1958a:	d002      	beq.n	19592 <preparse_value+0x54>
   1958c:	f240 1005 	movw	r0, #261	; 0x105
   19590:	e7f9      	b.n	19586 <preparse_value+0x48>
   19592:	f240 1003 	movw	r0, #259	; 0x103
   19596:	e7f6      	b.n	19586 <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   19598:	2de0      	cmp	r5, #224	; 0xe0
   1959a:	d002      	beq.n	195a2 <preparse_value+0x64>
   1959c:	f240 1005 	movw	r0, #261	; 0x105
   195a0:	e7f1      	b.n	19586 <preparse_value+0x48>
   195a2:	f44f 7081 	mov.w	r0, #258	; 0x102
   195a6:	e7ee      	b.n	19586 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   195a8:	2817      	cmp	r0, #23
   195aa:	d919      	bls.n	195e0 <preparse_value+0xa2>
   195ac:	f1a0 0218 	sub.w	r2, r0, #24
   195b0:	2301      	movs	r3, #1
   195b2:	4093      	lsls	r3, r2
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   195b4:	3301      	adds	r3, #1
   195b6:	6872      	ldr	r2, [r6, #4]
   195b8:	6861      	ldr	r1, [r4, #4]
   195ba:	1a52      	subs	r2, r2, r1
   195bc:	4293      	cmp	r3, r2
   195be:	d859      	bhi.n	19674 <preparse_value+0x136>
    uint8_t majortype = type >> MajorTypeShift;
   195c0:	096d      	lsrs	r5, r5, #5
    if (majortype == NegativeIntegerType) {
   195c2:	2d01      	cmp	r5, #1
   195c4:	d00e      	beq.n	195e4 <preparse_value+0xa6>
    } else if (majortype == SimpleTypesType) {
   195c6:	2d07      	cmp	r5, #7
   195c8:	d011      	beq.n	195ee <preparse_value+0xb0>
    if (descriptor < Value8Bit)
   195ca:	2817      	cmp	r0, #23
   195cc:	d957      	bls.n	1967e <preparse_value+0x140>
    if (descriptor == Value8Bit)
   195ce:	2818      	cmp	r0, #24
   195d0:	d13e      	bne.n	19650 <preparse_value+0x112>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   195d2:	6830      	ldr	r0, [r6, #0]
   195d4:	6803      	ldr	r3, [r0, #0]
   195d6:	3101      	adds	r1, #1
   195d8:	4798      	blx	r3
   195da:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   195dc:	2000      	movs	r0, #0
   195de:	e7d2      	b.n	19586 <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   195e0:	2300      	movs	r3, #0
   195e2:	e7e7      	b.n	195b4 <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   195e4:	2302      	movs	r3, #2
   195e6:	73e3      	strb	r3, [r4, #15]
        it->type = CborIntegerType;
   195e8:	2300      	movs	r3, #0
   195ea:	73a3      	strb	r3, [r4, #14]
   195ec:	e7ed      	b.n	195ca <preparse_value+0x8c>
        switch (descriptor) {
   195ee:	3814      	subs	r0, #20
   195f0:	280b      	cmp	r0, #11
   195f2:	d842      	bhi.n	1967a <preparse_value+0x13c>
   195f4:	e8df f000 	tbb	[pc, r0]
   195f8:	0d0d0d06 	.word	0x0d0d0d06
   195fc:	0b0b0d13 	.word	0x0b0b0d13
   19600:	22222222 	.word	0x22222222
            it->extra = false;
   19604:	2000      	movs	r0, #0
   19606:	81a0      	strh	r0, [r4, #12]
            it->type = CborBooleanType;
   19608:	23f5      	movs	r3, #245	; 0xf5
   1960a:	73a3      	strb	r3, [r4, #14]
            break;
   1960c:	e7bb      	b.n	19586 <preparse_value+0x48>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   1960e:	2301      	movs	r3, #1
   19610:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   19612:	6830      	ldr	r0, [r6, #0]
   19614:	6803      	ldr	r3, [r0, #0]
   19616:	4798      	blx	r3
   19618:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   1961a:	2000      	movs	r0, #0
            break;
   1961c:	e7b3      	b.n	19586 <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   1961e:	6830      	ldr	r0, [r6, #0]
   19620:	6803      	ldr	r3, [r0, #0]
   19622:	3101      	adds	r1, #1
   19624:	4798      	blx	r3
   19626:	b280      	uxth	r0, r0
   19628:	81a0      	strh	r0, [r4, #12]
            if (unlikely(it->extra < 32)) {
   1962a:	281f      	cmp	r0, #31
   1962c:	d901      	bls.n	19632 <preparse_value+0xf4>
        return CborNoError;
   1962e:	2000      	movs	r0, #0
   19630:	e7a9      	b.n	19586 <preparse_value+0x48>
                it->type = CborInvalidType;
   19632:	23ff      	movs	r3, #255	; 0xff
   19634:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   19636:	f44f 7083 	mov.w	r0, #262	; 0x106
   1963a:	e7a4      	b.n	19586 <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   1963c:	f7ee fdc0 	bl	81c0 <hal_debugger_connected>
   19640:	b100      	cbz	r0, 19644 <preparse_value+0x106>
   19642:	be01      	bkpt	0x0001
   19644:	2300      	movs	r3, #0
   19646:	461a      	mov	r2, r3
   19648:	4619      	mov	r1, r3
   1964a:	4618      	mov	r0, r3
   1964c:	f7f0 f9c0 	bl	99d0 <__assert_func>
    else if (descriptor == Value16Bit)
   19650:	2819      	cmp	r0, #25
   19652:	d106      	bne.n	19662 <preparse_value+0x124>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   19654:	6830      	ldr	r0, [r6, #0]
   19656:	6843      	ldr	r3, [r0, #4]
   19658:	3101      	adds	r1, #1
   1965a:	4798      	blx	r3
   1965c:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   1965e:	2000      	movs	r0, #0
   19660:	e791      	b.n	19586 <preparse_value+0x48>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   19662:	7be3      	ldrb	r3, [r4, #15]
   19664:	f043 0301 	orr.w	r3, r3, #1
   19668:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   1966a:	2000      	movs	r0, #0
   1966c:	e78b      	b.n	19586 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   1966e:	f240 1001 	movw	r0, #257	; 0x101
   19672:	e788      	b.n	19586 <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   19674:	f240 1001 	movw	r0, #257	; 0x101
   19678:	e785      	b.n	19586 <preparse_value+0x48>
        return CborNoError;
   1967a:	2000      	movs	r0, #0
   1967c:	e783      	b.n	19586 <preparse_value+0x48>
        return CborNoError;
   1967e:	2000      	movs	r0, #0
   19680:	e781      	b.n	19586 <preparse_value+0x48>

00019682 <preparse_next_value>:
{
   19682:	b510      	push	{r4, lr}
   19684:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   19686:	6883      	ldr	r3, [r0, #8]
   19688:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1968c:	d00d      	beq.n	196aa <preparse_next_value+0x28>
        if (it->type != CborTagType && !--it->remaining) {
   1968e:	7b82      	ldrb	r2, [r0, #14]
   19690:	2ac0      	cmp	r2, #192	; 0xc0
   19692:	d002      	beq.n	1969a <preparse_next_value+0x18>
   19694:	3b01      	subs	r3, #1
   19696:	6083      	str	r3, [r0, #8]
   19698:	b11b      	cbz	r3, 196a2 <preparse_next_value+0x20>
    return preparse_value(it);
   1969a:	4620      	mov	r0, r4
   1969c:	f7ff ff4f 	bl	1953e <preparse_value>
}
   196a0:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   196a2:	23ff      	movs	r3, #255	; 0xff
   196a4:	7383      	strb	r3, [r0, #14]
            return CborNoError;
   196a6:	2000      	movs	r0, #0
   196a8:	e7fa      	b.n	196a0 <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   196aa:	6841      	ldr	r1, [r0, #4]
   196ac:	6803      	ldr	r3, [r0, #0]
   196ae:	685a      	ldr	r2, [r3, #4]
   196b0:	4291      	cmp	r1, r2
   196b2:	d0f2      	beq.n	1969a <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   196b4:	6818      	ldr	r0, [r3, #0]
   196b6:	6803      	ldr	r3, [r0, #0]
   196b8:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   196ba:	28ff      	cmp	r0, #255	; 0xff
   196bc:	d1ed      	bne.n	1969a <preparse_next_value+0x18>
        ++it->offset;
   196be:	6863      	ldr	r3, [r4, #4]
   196c0:	3301      	adds	r3, #1
   196c2:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   196c4:	23ff      	movs	r3, #255	; 0xff
   196c6:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   196c8:	2000      	movs	r0, #0
   196ca:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   196cc:	e7e8      	b.n	196a0 <preparse_next_value+0x1e>

000196ce <extract_length>:
{
   196ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196d0:	4606      	mov	r6, r0
   196d2:	460c      	mov	r4, r1
   196d4:	4615      	mov	r5, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   196d6:	6800      	ldr	r0, [r0, #0]
   196d8:	6803      	ldr	r3, [r0, #0]
   196da:	6809      	ldr	r1, [r1, #0]
   196dc:	4798      	blx	r3
   196de:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   196e2:	6823      	ldr	r3, [r4, #0]
   196e4:	3301      	adds	r3, #1
   196e6:	6023      	str	r3, [r4, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   196e8:	2817      	cmp	r0, #23
   196ea:	d915      	bls.n	19718 <extract_length+0x4a>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   196ec:	281b      	cmp	r0, #27
   196ee:	d836      	bhi.n	1975e <extract_length+0x90>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   196f0:	3818      	subs	r0, #24
   196f2:	2701      	movs	r7, #1
   196f4:	4087      	lsls	r7, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   196f6:	6873      	ldr	r3, [r6, #4]
   196f8:	6821      	ldr	r1, [r4, #0]
   196fa:	1a5b      	subs	r3, r3, r1
   196fc:	429f      	cmp	r7, r3
   196fe:	d833      	bhi.n	19768 <extract_length+0x9a>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   19700:	2f01      	cmp	r7, #1
   19702:	d116      	bne.n	19732 <extract_length+0x64>
        *len = p->d->get8(p->d, *offset);
   19704:	6830      	ldr	r0, [r6, #0]
   19706:	6803      	ldr	r3, [r0, #0]
   19708:	4798      	blx	r3
   1970a:	b2c2      	uxtb	r2, r0
   1970c:	2300      	movs	r3, #0
    } else if (bytesNeeded == 4) {
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
    }
    *offset += bytesNeeded;
   1970e:	6820      	ldr	r0, [r4, #0]
   19710:	4438      	add	r0, r7
   19712:	6020      	str	r0, [r4, #0]
    return CborNoError;
   19714:	2000      	movs	r0, #0
   19716:	e002      	b.n	1971e <extract_length+0x50>
        *len = additional_information;
   19718:	b2c2      	uxtb	r2, r0
   1971a:	2300      	movs	r3, #0
        return CborNoError;
   1971c:	2000      	movs	r0, #0
    if (err) {
   1971e:	bb40      	cbnz	r0, 19772 <extract_length+0xa4>
    *len = v;
   19720:	602a      	str	r2, [r5, #0]
    if (v != *len)
   19722:	2500      	movs	r5, #0
   19724:	429d      	cmp	r5, r3
   19726:	bf08      	it	eq
   19728:	4292      	cmpeq	r2, r2
   1972a:	d024      	beq.n	19776 <extract_length+0xa8>
        return CborErrorDataTooLarge;
   1972c:	f44f 6080 	mov.w	r0, #1024	; 0x400
   19730:	e021      	b.n	19776 <extract_length+0xa8>
    } else if (bytesNeeded == 2) {
   19732:	2f02      	cmp	r7, #2
   19734:	d105      	bne.n	19742 <extract_length+0x74>
        *len =  p->d->get16(p->d, *offset);
   19736:	6830      	ldr	r0, [r6, #0]
   19738:	6843      	ldr	r3, [r0, #4]
   1973a:	4798      	blx	r3
   1973c:	b282      	uxth	r2, r0
   1973e:	2300      	movs	r3, #0
   19740:	e7e5      	b.n	1970e <extract_length+0x40>
    } else if (bytesNeeded == 4) {
   19742:	2f04      	cmp	r7, #4
   19744:	d005      	beq.n	19752 <extract_length+0x84>
        *len =  p->d->get64(p->d, *offset);
   19746:	6830      	ldr	r0, [r6, #0]
   19748:	68c3      	ldr	r3, [r0, #12]
   1974a:	4798      	blx	r3
   1974c:	4602      	mov	r2, r0
   1974e:	460b      	mov	r3, r1
   19750:	e7dd      	b.n	1970e <extract_length+0x40>
        *len =  p->d->get32(p->d, *offset);
   19752:	6830      	ldr	r0, [r6, #0]
   19754:	6883      	ldr	r3, [r0, #8]
   19756:	4798      	blx	r3
   19758:	4602      	mov	r2, r0
   1975a:	2300      	movs	r3, #0
   1975c:	e7d7      	b.n	1970e <extract_length+0x40>
    *len = 1;
   1975e:	2201      	movs	r2, #1
   19760:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   19762:	f240 1005 	movw	r0, #261	; 0x105
   19766:	e7da      	b.n	1971e <extract_length+0x50>
    *len = 1;
   19768:	2201      	movs	r2, #1
   1976a:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   1976c:	f240 1001 	movw	r0, #257	; 0x101
   19770:	e7d5      	b.n	1971e <extract_length+0x50>
        *len = 0;
   19772:	2300      	movs	r3, #0
   19774:	602b      	str	r3, [r5, #0]
}
   19776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019778 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   19778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1977c:	b085      	sub	sp, #20
   1977e:	4604      	mov	r4, r0
   19780:	4688      	mov	r8, r1
   19782:	4691      	mov	r9, r2
   19784:	461e      	mov	r6, r3
}
CBOR_API CborError cbor_value_skip_tag(CborValue *it);

/* Strings */
CBOR_INLINE_API bool cbor_value_is_byte_string(const CborValue *value)
{ return value->type == CborByteStringType; }
   19786:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   19788:	2b40      	cmp	r3, #64	; 0x40
   1978a:	d001      	beq.n	19790 <iterate_string_chunks+0x18>
   1978c:	2b60      	cmp	r3, #96	; 0x60
   1978e:	d10c      	bne.n	197aa <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   19790:	6863      	ldr	r3, [r4, #4]
   19792:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   19794:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   19796:	f012 0f04 	tst.w	r2, #4
   1979a:	d010      	beq.n	197be <iterate_string_chunks+0x46>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   1979c:	3301      	adds	r3, #1
   1979e:	9302      	str	r3, [sp, #8]
        total = 0;
   197a0:	2300      	movs	r3, #0
   197a2:	9303      	str	r3, [sp, #12]
        *result = true;
   197a4:	2301      	movs	r3, #1
   197a6:	7033      	strb	r3, [r6, #0]
   197a8:	e059      	b.n	1985e <iterate_string_chunks+0xe6>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   197aa:	f7ee fd09 	bl	81c0 <hal_debugger_connected>
   197ae:	b100      	cbz	r0, 197b2 <iterate_string_chunks+0x3a>
   197b0:	be01      	bkpt	0x0001
   197b2:	2300      	movs	r3, #0
   197b4:	461a      	mov	r2, r3
   197b6:	4619      	mov	r1, r3
   197b8:	4618      	mov	r0, r3
   197ba:	f7f0 f909 	bl	99d0 <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   197be:	aa03      	add	r2, sp, #12
   197c0:	a902      	add	r1, sp, #8
   197c2:	6820      	ldr	r0, [r4, #0]
   197c4:	f7ff ff83 	bl	196ce <extract_length>
        if (err)
   197c8:	4603      	mov	r3, r0
   197ca:	2800      	cmp	r0, #0
   197cc:	f040 8084 	bne.w	198d8 <iterate_string_chunks+0x160>
        if (total > (size_t)(value->parser->end - offset))
   197d0:	6820      	ldr	r0, [r4, #0]
   197d2:	6843      	ldr	r3, [r0, #4]
   197d4:	9a02      	ldr	r2, [sp, #8]
   197d6:	1a99      	subs	r1, r3, r2
   197d8:	9b03      	ldr	r3, [sp, #12]
   197da:	4299      	cmp	r1, r3
   197dc:	f0c0 8083 	bcc.w	198e6 <iterate_string_chunks+0x16e>
        if (total <= *buflen)
   197e0:	f8d9 1000 	ldr.w	r1, [r9]
   197e4:	428b      	cmp	r3, r1
   197e6:	d82a      	bhi.n	1983e <iterate_string_chunks+0xc6>
            *result = !!func(value->parser->d, buffer, offset, total);
   197e8:	4641      	mov	r1, r8
   197ea:	6800      	ldr	r0, [r0, #0]
   197ec:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   197ee:	47a8      	blx	r5
   197f0:	3000      	adds	r0, #0
   197f2:	bf18      	it	ne
   197f4:	2001      	movne	r0, #1
   197f6:	7030      	strb	r0, [r6, #0]
        offset += total;
   197f8:	9b02      	ldr	r3, [sp, #8]
   197fa:	9a03      	ldr	r2, [sp, #12]
   197fc:	4413      	add	r3, r2
   197fe:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   19800:	7833      	ldrb	r3, [r6, #0]
   19802:	b153      	cbz	r3, 1981a <iterate_string_chunks+0xa2>
   19804:	f8d9 2000 	ldr.w	r2, [r9]
   19808:	9b03      	ldr	r3, [sp, #12]
   1980a:	429a      	cmp	r2, r3
   1980c:	d905      	bls.n	1981a <iterate_string_chunks+0xa2>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   1980e:	f1b8 0f00 	cmp.w	r8, #0
   19812:	d002      	beq.n	1981a <iterate_string_chunks+0xa2>
            *(buffer + total) = '\0';
   19814:	2200      	movs	r2, #0
   19816:	f808 2003 	strb.w	r2, [r8, r3]
        }
    }
    *buflen = total;
   1981a:	9b03      	ldr	r3, [sp, #12]
   1981c:	f8c9 3000 	str.w	r3, [r9]

    if (next) {
   19820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19822:	2b00      	cmp	r3, #0
   19824:	d062      	beq.n	198ec <iterate_string_chunks+0x174>
        *next = *value;
   19826:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   1982a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1982c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   19830:	9b02      	ldr	r3, [sp, #8]
   19832:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   19834:	4620      	mov	r0, r4
   19836:	f7ff ff24 	bl	19682 <preparse_next_value>
   1983a:	4603      	mov	r3, r0
   1983c:	e04c      	b.n	198d8 <iterate_string_chunks+0x160>
            *result = false;
   1983e:	2300      	movs	r3, #0
   19840:	7033      	strb	r3, [r6, #0]
   19842:	e7d9      	b.n	197f8 <iterate_string_chunks+0x80>
                ++offset;
   19844:	9b02      	ldr	r3, [sp, #8]
   19846:	3301      	adds	r3, #1
   19848:	9302      	str	r3, [sp, #8]
   1984a:	e7d9      	b.n	19800 <iterate_string_chunks+0x88>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   1984c:	2201      	movs	r2, #1
   1984e:	e021      	b.n	19894 <iterate_string_chunks+0x11c>
                *result = false;
   19850:	2300      	movs	r3, #0
   19852:	7033      	strb	r3, [r6, #0]
            offset += chunkLen;
   19854:	9b02      	ldr	r3, [sp, #8]
   19856:	9a01      	ldr	r2, [sp, #4]
   19858:	4413      	add	r3, r2
   1985a:	9302      	str	r3, [sp, #8]
            total = newTotal;
   1985c:	9503      	str	r5, [sp, #12]
            if (offset == value->parser->end)
   1985e:	6823      	ldr	r3, [r4, #0]
   19860:	685a      	ldr	r2, [r3, #4]
   19862:	9902      	ldr	r1, [sp, #8]
   19864:	428a      	cmp	r2, r1
   19866:	d02f      	beq.n	198c8 <iterate_string_chunks+0x150>
            val = value->parser->d->get8(value->parser->d, offset);
   19868:	6818      	ldr	r0, [r3, #0]
   1986a:	6803      	ldr	r3, [r0, #0]
   1986c:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   1986e:	28ff      	cmp	r0, #255	; 0xff
   19870:	d0e8      	beq.n	19844 <iterate_string_chunks+0xcc>
            if ((val & MajorTypeMask) != value->type)
   19872:	f020 001f 	bic.w	r0, r0, #31
   19876:	7ba3      	ldrb	r3, [r4, #14]
   19878:	4298      	cmp	r0, r3
   1987a:	d128      	bne.n	198ce <iterate_string_chunks+0x156>
            err = extract_length(value->parser, &offset, &chunkLen);
   1987c:	aa01      	add	r2, sp, #4
   1987e:	a902      	add	r1, sp, #8
   19880:	6820      	ldr	r0, [r4, #0]
   19882:	f7ff ff24 	bl	196ce <extract_length>
            if (err)
   19886:	4603      	mov	r3, r0
   19888:	bb30      	cbnz	r0, 198d8 <iterate_string_chunks+0x160>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   1988a:	9903      	ldr	r1, [sp, #12]
   1988c:	9b01      	ldr	r3, [sp, #4]
   1988e:	2200      	movs	r2, #0
   19890:	18cd      	adds	r5, r1, r3
   19892:	d2db      	bcs.n	1984c <iterate_string_chunks+0xd4>
   19894:	b9f2      	cbnz	r2, 198d4 <iterate_string_chunks+0x15c>
            if (chunkLen > (size_t)(value->parser->end - offset))
   19896:	f8d4 c000 	ldr.w	ip, [r4]
   1989a:	f8dc 0004 	ldr.w	r0, [ip, #4]
   1989e:	9a02      	ldr	r2, [sp, #8]
   198a0:	1a80      	subs	r0, r0, r2
   198a2:	4283      	cmp	r3, r0
   198a4:	d81c      	bhi.n	198e0 <iterate_string_chunks+0x168>
            if (*result && *buflen >= newTotal)
   198a6:	7830      	ldrb	r0, [r6, #0]
   198a8:	2800      	cmp	r0, #0
   198aa:	d0d1      	beq.n	19850 <iterate_string_chunks+0xd8>
   198ac:	f8d9 0000 	ldr.w	r0, [r9]
   198b0:	42a8      	cmp	r0, r5
   198b2:	d3cd      	bcc.n	19850 <iterate_string_chunks+0xd8>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   198b4:	4441      	add	r1, r8
   198b6:	f8dc 0000 	ldr.w	r0, [ip]
   198ba:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   198bc:	47b8      	blx	r7
   198be:	3000      	adds	r0, #0
   198c0:	bf18      	it	ne
   198c2:	2001      	movne	r0, #1
   198c4:	7030      	strb	r0, [r6, #0]
   198c6:	e7c5      	b.n	19854 <iterate_string_chunks+0xdc>
                return CborErrorUnexpectedEOF;
   198c8:	f240 1301 	movw	r3, #257	; 0x101
   198cc:	e004      	b.n	198d8 <iterate_string_chunks+0x160>
                return CborErrorIllegalType;
   198ce:	f44f 7382 	mov.w	r3, #260	; 0x104
   198d2:	e001      	b.n	198d8 <iterate_string_chunks+0x160>
                return CborErrorDataTooLarge;
   198d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    }
    return CborNoError;
}
   198d8:	4618      	mov	r0, r3
   198da:	b005      	add	sp, #20
   198dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   198e0:	f240 1301 	movw	r3, #257	; 0x101
   198e4:	e7f8      	b.n	198d8 <iterate_string_chunks+0x160>
            return CborErrorUnexpectedEOF;
   198e6:	f240 1301 	movw	r3, #257	; 0x101
   198ea:	e7f5      	b.n	198d8 <iterate_string_chunks+0x160>
    return CborNoError;
   198ec:	2300      	movs	r3, #0
   198ee:	e7f3      	b.n	198d8 <iterate_string_chunks+0x160>

000198f0 <advance_internal>:
{
   198f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   198f2:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   198f4:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   198f6:	6830      	ldr	r0, [r6, #0]
   198f8:	6803      	ldr	r3, [r0, #0]
   198fa:	6861      	ldr	r1, [r4, #4]
   198fc:	4798      	blx	r3
   198fe:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   19902:	6863      	ldr	r3, [r4, #4]
   19904:	3301      	adds	r3, #1
   19906:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   19908:	2817      	cmp	r0, #23
   1990a:	d915      	bls.n	19938 <advance_internal+0x48>
    if (unlikely(additional_information > Value64Bit))
   1990c:	281b      	cmp	r0, #27
   1990e:	d83f      	bhi.n	19990 <advance_internal+0xa0>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   19910:	3818      	subs	r0, #24
   19912:	2501      	movs	r5, #1
   19914:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   19916:	6873      	ldr	r3, [r6, #4]
   19918:	6861      	ldr	r1, [r4, #4]
   1991a:	1a5b      	subs	r3, r3, r1
   1991c:	429d      	cmp	r5, r3
   1991e:	d83c      	bhi.n	1999a <advance_internal+0xaa>
    } else if (bytesNeeded == 1) {
   19920:	2d01      	cmp	r5, #1
   19922:	d122      	bne.n	1996a <advance_internal+0x7a>
        *len = p->d->get8(p->d, *offset);
   19924:	6830      	ldr	r0, [r6, #0]
   19926:	6803      	ldr	r3, [r0, #0]
   19928:	4798      	blx	r3
   1992a:	b2c0      	uxtb	r0, r0
   1992c:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   1992e:	6863      	ldr	r3, [r4, #4]
   19930:	441d      	add	r5, r3
   19932:	6065      	str	r5, [r4, #4]
    return CborNoError;
   19934:	2300      	movs	r3, #0
   19936:	e002      	b.n	1993e <advance_internal+0x4e>
        *len = additional_information;
   19938:	b2c0      	uxtb	r0, r0
   1993a:	2100      	movs	r1, #0
        return CborNoError;
   1993c:	2300      	movs	r3, #0
    assert(err == CborNoError);
   1993e:	bb8b      	cbnz	r3, 199a4 <advance_internal+0xb4>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   19940:	7ba3      	ldrb	r3, [r4, #14]
   19942:	2b40      	cmp	r3, #64	; 0x40
   19944:	d001      	beq.n	1994a <advance_internal+0x5a>
   19946:	2b60      	cmp	r3, #96	; 0x60
   19948:	d10b      	bne.n	19962 <advance_internal+0x72>
        assert(length == (size_t)length);
   1994a:	2700      	movs	r7, #0
   1994c:	428f      	cmp	r7, r1
   1994e:	bf08      	it	eq
   19950:	4280      	cmpeq	r0, r0
   19952:	d131      	bne.n	199b8 <advance_internal+0xc8>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   19954:	7be3      	ldrb	r3, [r4, #15]
   19956:	f013 0f04 	tst.w	r3, #4
   1995a:	d137      	bne.n	199cc <advance_internal+0xdc>
        it->offset += length;
   1995c:	6863      	ldr	r3, [r4, #4]
   1995e:	4403      	add	r3, r0
   19960:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   19962:	4620      	mov	r0, r4
   19964:	f7ff fe8d 	bl	19682 <preparse_next_value>
}
   19968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (bytesNeeded == 2) {
   1996a:	2d02      	cmp	r5, #2
   1996c:	d105      	bne.n	1997a <advance_internal+0x8a>
        *len =  p->d->get16(p->d, *offset);
   1996e:	6830      	ldr	r0, [r6, #0]
   19970:	6843      	ldr	r3, [r0, #4]
   19972:	4798      	blx	r3
   19974:	b280      	uxth	r0, r0
   19976:	2100      	movs	r1, #0
   19978:	e7d9      	b.n	1992e <advance_internal+0x3e>
    } else if (bytesNeeded == 4) {
   1997a:	2d04      	cmp	r5, #4
   1997c:	d003      	beq.n	19986 <advance_internal+0x96>
        *len =  p->d->get64(p->d, *offset);
   1997e:	6830      	ldr	r0, [r6, #0]
   19980:	68c3      	ldr	r3, [r0, #12]
   19982:	4798      	blx	r3
   19984:	e7d3      	b.n	1992e <advance_internal+0x3e>
        *len =  p->d->get32(p->d, *offset);
   19986:	6830      	ldr	r0, [r6, #0]
   19988:	6883      	ldr	r3, [r0, #8]
   1998a:	4798      	blx	r3
   1998c:	2100      	movs	r1, #0
   1998e:	e7ce      	b.n	1992e <advance_internal+0x3e>
    *len = 1;
   19990:	2001      	movs	r0, #1
   19992:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   19994:	f240 1305 	movw	r3, #261	; 0x105
   19998:	e7d1      	b.n	1993e <advance_internal+0x4e>
    *len = 1;
   1999a:	2001      	movs	r0, #1
   1999c:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   1999e:	f240 1301 	movw	r3, #257	; 0x101
   199a2:	e7cc      	b.n	1993e <advance_internal+0x4e>
    assert(err == CborNoError);
   199a4:	f7ee fc0c 	bl	81c0 <hal_debugger_connected>
   199a8:	b100      	cbz	r0, 199ac <advance_internal+0xbc>
   199aa:	be01      	bkpt	0x0001
   199ac:	2300      	movs	r3, #0
   199ae:	461a      	mov	r2, r3
   199b0:	4619      	mov	r1, r3
   199b2:	4618      	mov	r0, r3
   199b4:	f7f0 f80c 	bl	99d0 <__assert_func>
        assert(length == (size_t)length);
   199b8:	f7ee fc02 	bl	81c0 <hal_debugger_connected>
   199bc:	b100      	cbz	r0, 199c0 <advance_internal+0xd0>
   199be:	be01      	bkpt	0x0001
   199c0:	2300      	movs	r3, #0
   199c2:	461a      	mov	r2, r3
   199c4:	4619      	mov	r1, r3
   199c6:	4618      	mov	r0, r3
   199c8:	f7f0 f802 	bl	99d0 <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   199cc:	f7ee fbf8 	bl	81c0 <hal_debugger_connected>
   199d0:	b100      	cbz	r0, 199d4 <advance_internal+0xe4>
   199d2:	be01      	bkpt	0x0001
   199d4:	2300      	movs	r3, #0
   199d6:	461a      	mov	r2, r3
   199d8:	4619      	mov	r1, r3
   199da:	4618      	mov	r0, r3
   199dc:	f7ef fff8 	bl	99d0 <__assert_func>

000199e0 <_cbor_value_decode_int64_internal>:
{
   199e0:	b510      	push	{r4, lr}
   199e2:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   199e4:	6803      	ldr	r3, [r0, #0]
   199e6:	6818      	ldr	r0, [r3, #0]
   199e8:	6803      	ldr	r3, [r0, #0]
   199ea:	6861      	ldr	r1, [r4, #4]
   199ec:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   199ee:	7be3      	ldrb	r3, [r4, #15]
   199f0:	f013 0f01 	tst.w	r3, #1
   199f4:	d104      	bne.n	19a00 <_cbor_value_decode_int64_internal+0x20>
   199f6:	7ba3      	ldrb	r3, [r4, #14]
   199f8:	2bfa      	cmp	r3, #250	; 0xfa
   199fa:	d001      	beq.n	19a00 <_cbor_value_decode_int64_internal+0x20>
   199fc:	2bfb      	cmp	r3, #251	; 0xfb
   199fe:	d110      	bne.n	19a22 <_cbor_value_decode_int64_internal+0x42>
   19a00:	f000 031f 	and.w	r3, r0, #31
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   19a04:	f1a3 021a 	sub.w	r2, r3, #26
   19a08:	2a01      	cmp	r2, #1
   19a0a:	d814      	bhi.n	19a36 <_cbor_value_decode_int64_internal+0x56>
    if ((val & 1) == (Value32Bit & 1))
   19a0c:	f010 0f01 	tst.w	r0, #1
   19a10:	d11b      	bne.n	19a4a <_cbor_value_decode_int64_internal+0x6a>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   19a12:	6823      	ldr	r3, [r4, #0]
   19a14:	6818      	ldr	r0, [r3, #0]
   19a16:	6883      	ldr	r3, [r0, #8]
   19a18:	6861      	ldr	r1, [r4, #4]
   19a1a:	3101      	adds	r1, #1
   19a1c:	4798      	blx	r3
   19a1e:	2100      	movs	r1, #0
}
   19a20:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   19a22:	f7ee fbcd 	bl	81c0 <hal_debugger_connected>
   19a26:	b100      	cbz	r0, 19a2a <_cbor_value_decode_int64_internal+0x4a>
   19a28:	be01      	bkpt	0x0001
   19a2a:	2300      	movs	r3, #0
   19a2c:	461a      	mov	r2, r3
   19a2e:	4619      	mov	r1, r3
   19a30:	4618      	mov	r0, r3
   19a32:	f7ef ffcd 	bl	99d0 <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   19a36:	f7ee fbc3 	bl	81c0 <hal_debugger_connected>
   19a3a:	b100      	cbz	r0, 19a3e <_cbor_value_decode_int64_internal+0x5e>
   19a3c:	be01      	bkpt	0x0001
   19a3e:	2300      	movs	r3, #0
   19a40:	461a      	mov	r2, r3
   19a42:	4619      	mov	r1, r3
   19a44:	4618      	mov	r0, r3
   19a46:	f7ef ffc3 	bl	99d0 <__assert_func>
    assert((val & SmallValueMask) == Value64Bit);
   19a4a:	2b1b      	cmp	r3, #27
   19a4c:	d106      	bne.n	19a5c <_cbor_value_decode_int64_internal+0x7c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   19a4e:	6823      	ldr	r3, [r4, #0]
   19a50:	6818      	ldr	r0, [r3, #0]
   19a52:	68c3      	ldr	r3, [r0, #12]
   19a54:	6861      	ldr	r1, [r4, #4]
   19a56:	3101      	adds	r1, #1
   19a58:	4798      	blx	r3
   19a5a:	e7e1      	b.n	19a20 <_cbor_value_decode_int64_internal+0x40>
    assert((val & SmallValueMask) == Value64Bit);
   19a5c:	f7ee fbb0 	bl	81c0 <hal_debugger_connected>
   19a60:	b100      	cbz	r0, 19a64 <_cbor_value_decode_int64_internal+0x84>
   19a62:	be01      	bkpt	0x0001
   19a64:	2300      	movs	r3, #0
   19a66:	461a      	mov	r2, r3
   19a68:	4619      	mov	r1, r3
   19a6a:	4618      	mov	r0, r3
   19a6c:	f7ef ffb0 	bl	99d0 <__assert_func>

00019a70 <cbor_parser_init>:
{
   19a70:	b510      	push	{r4, lr}
    memset(parser, 0, sizeof(*parser));
   19a72:	2400      	movs	r4, #0
   19a74:	6054      	str	r4, [r2, #4]
   19a76:	6094      	str	r4, [r2, #8]
    parser->d = d;
   19a78:	6010      	str	r0, [r2, #0]
    parser->end = d->message_size;
   19a7a:	6980      	ldr	r0, [r0, #24]
   19a7c:	6050      	str	r0, [r2, #4]
    parser->flags = flags;
   19a7e:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   19a80:	601a      	str	r2, [r3, #0]
    it->offset = 0;
   19a82:	605c      	str	r4, [r3, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   19a84:	2201      	movs	r2, #1
   19a86:	609a      	str	r2, [r3, #8]
    return preparse_value(it);
   19a88:	4618      	mov	r0, r3
   19a8a:	f7ff fd58 	bl	1953e <preparse_value>
}
   19a8e:	bd10      	pop	{r4, pc}

00019a90 <cbor_value_enter_container>:
{
   19a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19a92:	4605      	mov	r5, r0
   19a94:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   19a96:	7b83      	ldrb	r3, [r0, #14]
   19a98:	2b80      	cmp	r3, #128	; 0x80
   19a9a:	d021      	beq.n	19ae0 <cbor_value_enter_container+0x50>
   19a9c:	2ba0      	cmp	r3, #160	; 0xa0
   19a9e:	d01d      	beq.n	19adc <cbor_value_enter_container+0x4c>
   19aa0:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   19aa2:	b1fb      	cbz	r3, 19ae4 <cbor_value_enter_container+0x54>
    *recursed = *it;
   19aa4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   19aa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   19aac:	7beb      	ldrb	r3, [r5, #15]
   19aae:	f013 0f04 	tst.w	r3, #4
   19ab2:	d021      	beq.n	19af8 <cbor_value_enter_container+0x68>
        recursed->remaining = UINT32_MAX;
   19ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19ab8:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   19aba:	460b      	mov	r3, r1
   19abc:	3301      	adds	r3, #1
   19abe:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   19ac0:	4620      	mov	r0, r4
   19ac2:	f7ff fd3c 	bl	1953e <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   19ac6:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   19aca:	d145      	bne.n	19b58 <cbor_value_enter_container+0xc8>
        ++recursed->offset;
   19acc:	6863      	ldr	r3, [r4, #4]
   19ace:	3301      	adds	r3, #1
   19ad0:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   19ad2:	23ff      	movs	r3, #255	; 0xff
   19ad4:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   19ad6:	2000      	movs	r0, #0
   19ad8:	60a0      	str	r0, [r4, #8]
    return CborNoError;
   19ada:	e03d      	b.n	19b58 <cbor_value_enter_container+0xc8>
   19adc:	2301      	movs	r3, #1
   19ade:	e7e0      	b.n	19aa2 <cbor_value_enter_container+0x12>
   19ae0:	2301      	movs	r3, #1
   19ae2:	e7de      	b.n	19aa2 <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   19ae4:	f7ee fb6c 	bl	81c0 <hal_debugger_connected>
   19ae8:	b100      	cbz	r0, 19aec <cbor_value_enter_container+0x5c>
   19aea:	be01      	bkpt	0x0001
   19aec:	2300      	movs	r3, #0
   19aee:	461a      	mov	r2, r3
   19af0:	4619      	mov	r1, r3
   19af2:	4618      	mov	r0, r3
   19af4:	f7ef ff6c 	bl	99d0 <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   19af8:	6826      	ldr	r6, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   19afa:	6830      	ldr	r0, [r6, #0]
   19afc:	6803      	ldr	r3, [r0, #0]
   19afe:	6861      	ldr	r1, [r4, #4]
   19b00:	4798      	blx	r3
   19b02:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   19b06:	6863      	ldr	r3, [r4, #4]
   19b08:	3301      	adds	r3, #1
   19b0a:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   19b0c:	2817      	cmp	r0, #23
   19b0e:	d915      	bls.n	19b3c <cbor_value_enter_container+0xac>
    if (unlikely(additional_information > Value64Bit))
   19b10:	281b      	cmp	r0, #27
   19b12:	d835      	bhi.n	19b80 <cbor_value_enter_container+0xf0>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   19b14:	3818      	subs	r0, #24
   19b16:	2701      	movs	r7, #1
   19b18:	4087      	lsls	r7, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   19b1a:	6873      	ldr	r3, [r6, #4]
   19b1c:	6861      	ldr	r1, [r4, #4]
   19b1e:	1a5b      	subs	r3, r3, r1
   19b20:	429f      	cmp	r7, r3
   19b22:	d832      	bhi.n	19b8a <cbor_value_enter_container+0xfa>
    } else if (bytesNeeded == 1) {
   19b24:	2f01      	cmp	r7, #1
   19b26:	d118      	bne.n	19b5a <cbor_value_enter_container+0xca>
        *len = p->d->get8(p->d, *offset);
   19b28:	6830      	ldr	r0, [r6, #0]
   19b2a:	6803      	ldr	r3, [r0, #0]
   19b2c:	4798      	blx	r3
   19b2e:	b2c0      	uxtb	r0, r0
   19b30:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   19b32:	6863      	ldr	r3, [r4, #4]
   19b34:	441f      	add	r7, r3
   19b36:	6067      	str	r7, [r4, #4]
    return CborNoError;
   19b38:	2300      	movs	r3, #0
   19b3a:	e002      	b.n	19b42 <cbor_value_enter_container+0xb2>
        *len = additional_information;
   19b3c:	b2c0      	uxtb	r0, r0
   19b3e:	2100      	movs	r1, #0
        return CborNoError;
   19b40:	2300      	movs	r3, #0
        assert(err == CborNoError);
   19b42:	bb3b      	cbnz	r3, 19b94 <cbor_value_enter_container+0x104>
        recursed->remaining = (uint32_t)len;
   19b44:	60a0      	str	r0, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   19b46:	2300      	movs	r3, #0
   19b48:	428b      	cmp	r3, r1
   19b4a:	bf08      	it	eq
   19b4c:	4280      	cmpeq	r0, r0
   19b4e:	d02b      	beq.n	19ba8 <cbor_value_enter_container+0x118>
            recursed->offset = it->offset;
   19b50:	686b      	ldr	r3, [r5, #4]
   19b52:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   19b54:	f44f 6080 	mov.w	r0, #1024	; 0x400
}
   19b58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (bytesNeeded == 2) {
   19b5a:	2f02      	cmp	r7, #2
   19b5c:	d105      	bne.n	19b6a <cbor_value_enter_container+0xda>
        *len =  p->d->get16(p->d, *offset);
   19b5e:	6830      	ldr	r0, [r6, #0]
   19b60:	6843      	ldr	r3, [r0, #4]
   19b62:	4798      	blx	r3
   19b64:	b280      	uxth	r0, r0
   19b66:	2100      	movs	r1, #0
   19b68:	e7e3      	b.n	19b32 <cbor_value_enter_container+0xa2>
    } else if (bytesNeeded == 4) {
   19b6a:	2f04      	cmp	r7, #4
   19b6c:	d003      	beq.n	19b76 <cbor_value_enter_container+0xe6>
        *len =  p->d->get64(p->d, *offset);
   19b6e:	6830      	ldr	r0, [r6, #0]
   19b70:	68c3      	ldr	r3, [r0, #12]
   19b72:	4798      	blx	r3
   19b74:	e7dd      	b.n	19b32 <cbor_value_enter_container+0xa2>
        *len =  p->d->get32(p->d, *offset);
   19b76:	6830      	ldr	r0, [r6, #0]
   19b78:	6883      	ldr	r3, [r0, #8]
   19b7a:	4798      	blx	r3
   19b7c:	2100      	movs	r1, #0
   19b7e:	e7d8      	b.n	19b32 <cbor_value_enter_container+0xa2>
    *len = 1;
   19b80:	2001      	movs	r0, #1
   19b82:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   19b84:	f240 1305 	movw	r3, #261	; 0x105
   19b88:	e7db      	b.n	19b42 <cbor_value_enter_container+0xb2>
    *len = 1;
   19b8a:	2001      	movs	r0, #1
   19b8c:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   19b8e:	f240 1301 	movw	r3, #257	; 0x101
   19b92:	e7d6      	b.n	19b42 <cbor_value_enter_container+0xb2>
        assert(err == CborNoError);
   19b94:	f7ee fb14 	bl	81c0 <hal_debugger_connected>
   19b98:	b100      	cbz	r0, 19b9c <cbor_value_enter_container+0x10c>
   19b9a:	be01      	bkpt	0x0001
   19b9c:	2300      	movs	r3, #0
   19b9e:	461a      	mov	r2, r3
   19ba0:	4619      	mov	r1, r3
   19ba2:	4618      	mov	r0, r3
   19ba4:	f7ef ff14 	bl	99d0 <__assert_func>
        if (recursed->remaining != len || len == UINT32_MAX) {
   19ba8:	2900      	cmp	r1, #0
   19baa:	bf08      	it	eq
   19bac:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   19bb0:	d0ce      	beq.n	19b50 <cbor_value_enter_container+0xc0>
        if (recursed->type == CborMapType) {
   19bb2:	7ba3      	ldrb	r3, [r4, #14]
   19bb4:	2ba0      	cmp	r3, #160	; 0xa0
   19bb6:	d006      	beq.n	19bc6 <cbor_value_enter_container+0x136>
        if (len != 0)
   19bb8:	ea50 0301 	orrs.w	r3, r0, r1
   19bbc:	d089      	beq.n	19ad2 <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   19bbe:	4620      	mov	r0, r4
   19bc0:	f7ff fcbd 	bl	1953e <preparse_value>
   19bc4:	e7c8      	b.n	19b58 <cbor_value_enter_container+0xc8>
            if (recursed->remaining > UINT32_MAX / 2) {
   19bc6:	2800      	cmp	r0, #0
   19bc8:	db02      	blt.n	19bd0 <cbor_value_enter_container+0x140>
            recursed->remaining *= 2;
   19bca:	0046      	lsls	r6, r0, #1
   19bcc:	60a6      	str	r6, [r4, #8]
   19bce:	e7f3      	b.n	19bb8 <cbor_value_enter_container+0x128>
                recursed->offset = it->offset;
   19bd0:	686b      	ldr	r3, [r5, #4]
   19bd2:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   19bd4:	f44f 6080 	mov.w	r0, #1024	; 0x400
   19bd8:	e7be      	b.n	19b58 <cbor_value_enter_container+0xc8>

00019bda <cbor_value_leave_container>:
{
   19bda:	b508      	push	{r3, lr}
   19bdc:	7b83      	ldrb	r3, [r0, #14]
   19bde:	2b80      	cmp	r3, #128	; 0x80
   19be0:	d00d      	beq.n	19bfe <cbor_value_leave_container+0x24>
   19be2:	2ba0      	cmp	r3, #160	; 0xa0
   19be4:	d009      	beq.n	19bfa <cbor_value_leave_container+0x20>
   19be6:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   19be8:	b15b      	cbz	r3, 19c02 <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   19bea:	7b8b      	ldrb	r3, [r1, #14]
   19bec:	2bff      	cmp	r3, #255	; 0xff
   19bee:	d112      	bne.n	19c16 <cbor_value_leave_container+0x3c>
    it->offset = recursed->offset;
   19bf0:	684b      	ldr	r3, [r1, #4]
   19bf2:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   19bf4:	f7ff fd45 	bl	19682 <preparse_next_value>
}
   19bf8:	bd08      	pop	{r3, pc}
   19bfa:	2301      	movs	r3, #1
   19bfc:	e7f4      	b.n	19be8 <cbor_value_leave_container+0xe>
   19bfe:	2301      	movs	r3, #1
   19c00:	e7f2      	b.n	19be8 <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   19c02:	f7ee fadd 	bl	81c0 <hal_debugger_connected>
   19c06:	b100      	cbz	r0, 19c0a <cbor_value_leave_container+0x30>
   19c08:	be01      	bkpt	0x0001
   19c0a:	2300      	movs	r3, #0
   19c0c:	461a      	mov	r2, r3
   19c0e:	4619      	mov	r1, r3
   19c10:	4618      	mov	r0, r3
   19c12:	f7ef fedd 	bl	99d0 <__assert_func>
    assert(recursed->type == CborInvalidType);
   19c16:	f7ee fad3 	bl	81c0 <hal_debugger_connected>
   19c1a:	b100      	cbz	r0, 19c1e <cbor_value_leave_container+0x44>
   19c1c:	be01      	bkpt	0x0001
   19c1e:	2300      	movs	r3, #0
   19c20:	461a      	mov	r2, r3
   19c22:	4619      	mov	r1, r3
   19c24:	4618      	mov	r0, r3
   19c26:	f7ef fed3 	bl	99d0 <__assert_func>
	...

00019c2c <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   19c2c:	b510      	push	{r4, lr}
   19c2e:	b084      	sub	sp, #16
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   19c30:	460c      	mov	r4, r1
   19c32:	b189      	cbz	r1, 19c58 <_cbor_value_copy_string+0x2c>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   19c34:	6801      	ldr	r1, [r0, #0]
   19c36:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   19c38:	6949      	ldr	r1, [r1, #20]
   19c3a:	9101      	str	r1, [sp, #4]
   19c3c:	9300      	str	r3, [sp, #0]
   19c3e:	f10d 030f 	add.w	r3, sp, #15
   19c42:	4621      	mov	r1, r4
   19c44:	f7ff fd98 	bl	19778 <iterate_string_chunks>
    return err ? err :
   19c48:	4603      	mov	r3, r0
   19c4a:	b910      	cbnz	r0, 19c52 <_cbor_value_copy_string+0x26>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   19c4c:	f89d 200f 	ldrb.w	r2, [sp, #15]
    return err ? err :
   19c50:	b122      	cbz	r2, 19c5c <_cbor_value_copy_string+0x30>
}
   19c52:	4618      	mov	r0, r3
   19c54:	b004      	add	sp, #16
   19c56:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   19c58:	4902      	ldr	r1, [pc, #8]	; (19c64 <_cbor_value_copy_string+0x38>)
   19c5a:	e7ee      	b.n	19c3a <_cbor_value_copy_string+0xe>
    return err ? err :
   19c5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   19c60:	e7f7      	b.n	19c52 <_cbor_value_copy_string+0x26>
   19c62:	bf00      	nop
   19c64:	0001953b 	.word	0x0001953b

00019c68 <advance_recursive>:
{
   19c68:	b570      	push	{r4, r5, r6, lr}
   19c6a:	b086      	sub	sp, #24
   19c6c:	4605      	mov	r5, r0
   19c6e:	460e      	mov	r6, r1
    if (is_fixed_type(it->type))
   19c70:	7b84      	ldrb	r4, [r0, #14]
   19c72:	4620      	mov	r0, r4
   19c74:	f7ff fc4f 	bl	19516 <is_fixed_type>
   19c78:	b9c0      	cbnz	r0, 19cac <advance_recursive+0x44>
   19c7a:	2c80      	cmp	r4, #128	; 0x80
   19c7c:	d01f      	beq.n	19cbe <advance_recursive+0x56>
   19c7e:	2ca0      	cmp	r4, #160	; 0xa0
   19c80:	d01b      	beq.n	19cba <advance_recursive+0x52>
   19c82:	2300      	movs	r3, #0
    if (!cbor_value_is_container(it)) {
   19c84:	b1eb      	cbz	r3, 19cc2 <advance_recursive+0x5a>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   19c86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   19c8a:	d02c      	beq.n	19ce6 <advance_recursive+0x7e>
    err = cbor_value_enter_container(it, &recursed);
   19c8c:	a902      	add	r1, sp, #8
   19c8e:	4628      	mov	r0, r5
   19c90:	f7ff fefe 	bl	19a90 <cbor_value_enter_container>
    if (err)
   19c94:	4603      	mov	r3, r0
   19c96:	b968      	cbnz	r0, 19cb4 <advance_recursive+0x4c>
{ return it->remaining == 0; }
   19c98:	9b04      	ldr	r3, [sp, #16]
    while (!cbor_value_at_end(&recursed)) {
   19c9a:	b1f3      	cbz	r3, 19cda <advance_recursive+0x72>
        err = advance_recursive(&recursed, nestingLevel + 1);
   19c9c:	1c71      	adds	r1, r6, #1
   19c9e:	a802      	add	r0, sp, #8
   19ca0:	f7ff ffe2 	bl	19c68 <advance_recursive>
        if (err)
   19ca4:	4603      	mov	r3, r0
   19ca6:	2800      	cmp	r0, #0
   19ca8:	d0f6      	beq.n	19c98 <advance_recursive+0x30>
   19caa:	e003      	b.n	19cb4 <advance_recursive+0x4c>
        return advance_internal(it);
   19cac:	4628      	mov	r0, r5
   19cae:	f7ff fe1f 	bl	198f0 <advance_internal>
   19cb2:	4603      	mov	r3, r0
}
   19cb4:	4618      	mov	r0, r3
   19cb6:	b006      	add	sp, #24
   19cb8:	bd70      	pop	{r4, r5, r6, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
   19cba:	2301      	movs	r3, #1
   19cbc:	e7e2      	b.n	19c84 <advance_recursive+0x1c>
   19cbe:	2301      	movs	r3, #1
   19cc0:	e7e0      	b.n	19c84 <advance_recursive+0x1c>
        size_t len = SIZE_MAX;
   19cc2:	aa06      	add	r2, sp, #24
   19cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19cc8:	f842 3d14 	str.w	r3, [r2, #-20]!
        return _cbor_value_copy_string(it, NULL, &len, it);
   19ccc:	462b      	mov	r3, r5
   19cce:	2100      	movs	r1, #0
   19cd0:	4628      	mov	r0, r5
   19cd2:	f7ff ffab 	bl	19c2c <_cbor_value_copy_string>
   19cd6:	4603      	mov	r3, r0
   19cd8:	e7ec      	b.n	19cb4 <advance_recursive+0x4c>
    return cbor_value_leave_container(it, &recursed);
   19cda:	a902      	add	r1, sp, #8
   19cdc:	4628      	mov	r0, r5
   19cde:	f7ff ff7c 	bl	19bda <cbor_value_leave_container>
   19ce2:	4603      	mov	r3, r0
   19ce4:	e7e6      	b.n	19cb4 <advance_recursive+0x4c>
        return CborErrorNestingTooDeep;
   19ce6:	f240 4301 	movw	r3, #1025	; 0x401
   19cea:	e7e3      	b.n	19cb4 <advance_recursive+0x4c>

00019cec <cbor_value_advance>:
{
   19cec:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
   19cee:	7b83      	ldrb	r3, [r0, #14]
   19cf0:	2bff      	cmp	r3, #255	; 0xff
   19cf2:	d005      	beq.n	19d00 <cbor_value_advance+0x14>
    if (!it->remaining)
   19cf4:	6883      	ldr	r3, [r0, #8]
   19cf6:	b16b      	cbz	r3, 19d14 <cbor_value_advance+0x28>
    return advance_recursive(it, 0);
   19cf8:	2100      	movs	r1, #0
   19cfa:	f7ff ffb5 	bl	19c68 <advance_recursive>
}
   19cfe:	bd08      	pop	{r3, pc}
    assert(it->type != CborInvalidType);
   19d00:	f7ee fa5e 	bl	81c0 <hal_debugger_connected>
   19d04:	b100      	cbz	r0, 19d08 <cbor_value_advance+0x1c>
   19d06:	be01      	bkpt	0x0001
   19d08:	2300      	movs	r3, #0
   19d0a:	461a      	mov	r2, r3
   19d0c:	4619      	mov	r1, r3
   19d0e:	4618      	mov	r0, r3
   19d10:	f7ef fe5e 	bl	99d0 <__assert_func>
        return CborErrorAdvancePastEOF;
   19d14:	2003      	movs	r0, #3
   19d16:	e7f2      	b.n	19cfe <cbor_value_advance+0x12>

00019d18 <cbor_value_calculate_string_length>:
{
   19d18:	b508      	push	{r3, lr}
   19d1a:	460a      	mov	r2, r1
    *len = SIZE_MAX;
   19d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19d20:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   19d22:	2300      	movs	r3, #0
   19d24:	4619      	mov	r1, r3
   19d26:	f7ff ff81 	bl	19c2c <_cbor_value_copy_string>
}
   19d2a:	bd08      	pop	{r3, pc}

00019d2c <hal_bsp_flash_dev>:

/// Return the Flash Device for the ID. 0 for Internal Flash ROM, 1 for External SPI Flash
const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id >= ARRAY_SIZE(flash_devs)) {
   19d2c:	2801      	cmp	r0, #1
   19d2e:	d803      	bhi.n	19d38 <hal_bsp_flash_dev+0xc>
        return NULL;
    }
    return flash_devs[id];
   19d30:	4b02      	ldr	r3, [pc, #8]	; (19d3c <hal_bsp_flash_dev+0x10>)
   19d32:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19d36:	4770      	bx	lr
        return NULL;
   19d38:	2000      	movs	r0, #0
}
   19d3a:	4770      	bx	lr
   19d3c:	00029578 	.word	0x00029578

00019d40 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   19d40:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   19d42:	f7ee fa5b 	bl	81fc <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   19d46:	f001 f929 	bl	1af9c <nrf52_periph_create>
}
   19d4a:	bd08      	pop	{r3, pc}

00019d4c <hal_spiflash_sector_info>:
}

static int
hal_spiflash_sector_info(const struct hal_flash *hal_flash_dev, int idx,
        uint32_t *address, uint32_t *sz)
{
   19d4c:	b410      	push	{r4}
    const struct spiflash_dev *dev = (const struct spiflash_dev *)hal_flash_dev;

    *address = idx * dev->sector_size;
   19d4e:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   19d50:	fb01 f104 	mul.w	r1, r1, r4
   19d54:	6011      	str	r1, [r2, #0]
    *sz = dev->sector_size;
   19d56:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   19d58:	601a      	str	r2, [r3, #0]
    return 0;
}
   19d5a:	2000      	movs	r0, #0
   19d5c:	f85d 4b04 	ldr.w	r4, [sp], #4
   19d60:	4770      	bx	lr

00019d62 <spiflash_release_power_down_generic>:
{
   19d62:	b530      	push	{r4, r5, lr}
   19d64:	b083      	sub	sp, #12
   19d66:	4605      	mov	r5, r0
    uint8_t cmd[1] = { SPIFLASH_RELEASE_POWER_DOWN };
   19d68:	ac02      	add	r4, sp, #8
   19d6a:	23ab      	movs	r3, #171	; 0xab
   19d6c:	f804 3d04 	strb.w	r3, [r4, #-4]!
    hal_gpio_write(dev->ss_pin, 0);
   19d70:	2100      	movs	r1, #0
   19d72:	6a80      	ldr	r0, [r0, #40]	; 0x28
   19d74:	f000 fd19 	bl	1a7aa <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
   19d78:	2301      	movs	r3, #1
   19d7a:	4622      	mov	r2, r4
   19d7c:	4621      	mov	r1, r4
   19d7e:	6a28      	ldr	r0, [r5, #32]
   19d80:	f001 f86e 	bl	1ae60 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
   19d84:	2101      	movs	r1, #1
   19d86:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   19d88:	f000 fd0f 	bl	1a7aa <hal_gpio_write>
}
   19d8c:	b003      	add	sp, #12
   19d8e:	bd30      	pop	{r4, r5, pc}

00019d90 <spiflash_delay_us>:
{
   19d90:	b510      	push	{r4, lr}
   19d92:	4604      	mov	r4, r0
    uint32_t ticks = os_time_ms_to_ticks32(usecs / 1000);
   19d94:	4809      	ldr	r0, [pc, #36]	; (19dbc <spiflash_delay_us+0x2c>)
   19d96:	fba0 3004 	umull	r3, r0, r0, r4
   19d9a:	0980      	lsrs	r0, r0, #6
os_time_ms_to_ticks32(uint32_t ms)
{
#if OS_TICKS_PER_SEC == 1000
    return ms;
#else
    return ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   19d9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19da0:	2300      	movs	r3, #0
   19da2:	01c0      	lsls	r0, r0, #7
   19da4:	2100      	movs	r1, #0
   19da6:	f7f2 f977 	bl	c098 <__aeabi_uldivmod>
    if (ticks > 1) {
   19daa:	2801      	cmp	r0, #1
   19dac:	d902      	bls.n	19db4 <spiflash_delay_us+0x24>
        os_time_delay(ticks);
   19dae:	f7f1 fbad 	bl	b50c <os_time_delay>
}
   19db2:	bd10      	pop	{r4, pc}
        os_cputime_delay_usecs(usecs);
   19db4:	4620      	mov	r0, r4
   19db6:	f001 ffe0 	bl	1bd7a <os_cputime_delay_usecs>
}
   19dba:	e7fa      	b.n	19db2 <spiflash_delay_us+0x22>
   19dbc:	10624dd3 	.word	0x10624dd3

00019dc0 <spiflash_read_jedec_id>:
{
   19dc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19dc4:	b083      	sub	sp, #12
   19dc6:	4604      	mov	r4, r0
   19dc8:	4689      	mov	r9, r1
   19dca:	4690      	mov	r8, r2
   19dcc:	461f      	mov	r7, r3
    uint8_t cmd[4] = { SPIFLASH_READ_JEDEC_ID, 0, 0, 0 };
   19dce:	239f      	movs	r3, #159	; 0x9f
   19dd0:	f88d 3004 	strb.w	r3, [sp, #4]
   19dd4:	2500      	movs	r5, #0
   19dd6:	f88d 5005 	strb.w	r5, [sp, #5]
   19dda:	f88d 5006 	strb.w	r5, [sp, #6]
   19dde:	f88d 5007 	strb.w	r5, [sp, #7]
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   19de2:	f100 0640 	add.w	r6, r0, #64	; 0x40
   19de6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19dea:	4630      	mov	r0, r6
   19dec:	f7f1 f81c 	bl	ae28 <os_mutex_pend>
    hal_gpio_write(dev->ss_pin, 0);
   19df0:	4629      	mov	r1, r5
   19df2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19df4:	f000 fcd9 	bl	1a7aa <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
   19df8:	2304      	movs	r3, #4
   19dfa:	eb0d 0203 	add.w	r2, sp, r3
   19dfe:	4611      	mov	r1, r2
   19e00:	6a20      	ldr	r0, [r4, #32]
   19e02:	f001 f82d 	bl	1ae60 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
   19e06:	2101      	movs	r1, #1
   19e08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19e0a:	f000 fcce 	bl	1a7aa <hal_gpio_write>
    if (manufacturer) {
   19e0e:	f1b9 0f00 	cmp.w	r9, #0
   19e12:	d003      	beq.n	19e1c <spiflash_read_jedec_id+0x5c>
        *manufacturer = cmd[1];
   19e14:	f89d 3005 	ldrb.w	r3, [sp, #5]
   19e18:	f889 3000 	strb.w	r3, [r9]
    if (memory_type) {
   19e1c:	f1b8 0f00 	cmp.w	r8, #0
   19e20:	d003      	beq.n	19e2a <spiflash_read_jedec_id+0x6a>
        *memory_type = cmd[2];
   19e22:	f89d 3006 	ldrb.w	r3, [sp, #6]
   19e26:	f888 3000 	strb.w	r3, [r8]
    if (capacity) {
   19e2a:	b117      	cbz	r7, 19e32 <spiflash_read_jedec_id+0x72>
        *capacity = cmd[3];
   19e2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19e30:	703b      	strb	r3, [r7, #0]
    os_mutex_release(&dev->lock);
   19e32:	4630      	mov	r0, r6
   19e34:	f7f0 ff98 	bl	ad68 <os_mutex_release>
}
   19e38:	2000      	movs	r0, #0
   19e3a:	b003      	add	sp, #12
   19e3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00019e40 <spiflash_read_status>:
{
   19e40:	b570      	push	{r4, r5, r6, lr}
   19e42:	4604      	mov	r4, r0
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   19e44:	f100 0540 	add.w	r5, r0, #64	; 0x40
   19e48:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19e4c:	4628      	mov	r0, r5
   19e4e:	f7f0 ffeb 	bl	ae28 <os_mutex_pend>
    hal_gpio_write(dev->ss_pin, 0);
   19e52:	2100      	movs	r1, #0
   19e54:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19e56:	f000 fca8 	bl	1a7aa <hal_gpio_write>
    hal_spi_tx_val(dev->spi_num, cmd);
   19e5a:	2105      	movs	r1, #5
   19e5c:	6a20      	ldr	r0, [r4, #32]
   19e5e:	f000 ffc5 	bl	1adec <hal_spi_tx_val>
    val = hal_spi_tx_val(dev->spi_num, 0xFF);
   19e62:	21ff      	movs	r1, #255	; 0xff
   19e64:	6a20      	ldr	r0, [r4, #32]
   19e66:	f000 ffc1 	bl	1adec <hal_spi_tx_val>
   19e6a:	b2c6      	uxtb	r6, r0
    hal_gpio_write(dev->ss_pin, 1);
   19e6c:	2101      	movs	r1, #1
   19e6e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19e70:	f000 fc9b 	bl	1a7aa <hal_gpio_write>
    os_mutex_release(&dev->lock);
   19e74:	4628      	mov	r0, r5
   19e76:	f7f0 ff77 	bl	ad68 <os_mutex_release>
}
   19e7a:	4630      	mov	r0, r6
   19e7c:	bd70      	pop	{r4, r5, r6, pc}

00019e7e <spiflash_device_ready>:
{
   19e7e:	b510      	push	{r4, lr}
   19e80:	4604      	mov	r4, r0
    dev->ready = !(spiflash_read_status(dev) & SPIFLASH_STATUS_BUSY);
   19e82:	f7ff ffdd 	bl	19e40 <spiflash_read_status>
   19e86:	f080 0001 	eor.w	r0, r0, #1
   19e8a:	f000 0001 	and.w	r0, r0, #1
   19e8e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
   19e92:	bd10      	pop	{r4, pc}

00019e94 <spiflash_wait_ready_till>:
{
   19e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (dev->ready) {
   19e98:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   19e9c:	bb73      	cbnz	r3, 19efc <spiflash_wait_ready_till+0x68>
   19e9e:	4604      	mov	r4, r0
   19ea0:	4688      	mov	r8, r1
   19ea2:	4615      	mov	r5, r2
    if (step_us < MYNEWT_VAL(SPIFLASH_READ_STATUS_INTERVAL)) {
   19ea4:	2a09      	cmp	r2, #9
   19ea6:	d904      	bls.n	19eb2 <spiflash_wait_ready_till+0x1e>
    } else if (step_us > 1000000) {
   19ea8:	4b15      	ldr	r3, [pc, #84]	; (19f00 <spiflash_wait_ready_till+0x6c>)
   19eaa:	429a      	cmp	r2, r3
   19eac:	d902      	bls.n	19eb4 <spiflash_wait_ready_till+0x20>
        step_us = 1000000;
   19eae:	4d14      	ldr	r5, [pc, #80]	; (19f00 <spiflash_wait_ready_till+0x6c>)
   19eb0:	e000      	b.n	19eb4 <spiflash_wait_ready_till+0x20>
        step_us = MYNEWT_VAL(SPIFLASH_READ_STATUS_INTERVAL);
   19eb2:	250a      	movs	r5, #10
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   19eb4:	f104 0740 	add.w	r7, r4, #64	; 0x40
   19eb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19ebc:	4638      	mov	r0, r7
   19ebe:	f7f0 ffb3 	bl	ae28 <os_mutex_pend>
    limit = os_cputime_get32() + os_cputime_usecs_to_ticks(timeout_us);
   19ec2:	f001 ff4a 	bl	1bd5a <os_cputime_get32>
   19ec6:	4606      	mov	r6, r0
   19ec8:	4640      	mov	r0, r8
   19eca:	f001 ff5d 	bl	1bd88 <os_cputime_usecs_to_ticks>
   19ece:	4406      	add	r6, r0
        if (spiflash_device_ready(dev)) {
   19ed0:	4620      	mov	r0, r4
   19ed2:	f7ff ffd4 	bl	19e7e <spiflash_device_ready>
   19ed6:	b950      	cbnz	r0, 19eee <spiflash_wait_ready_till+0x5a>
        spiflash_delay_us(step_us);
   19ed8:	4628      	mov	r0, r5
   19eda:	f7ff ff59 	bl	19d90 <spiflash_delay_us>
    } while (CPUTIME_LT(os_cputime_get32(), limit));
   19ede:	f001 ff3c 	bl	1bd5a <os_cputime_get32>
   19ee2:	1b80      	subs	r0, r0, r6
   19ee4:	2800      	cmp	r0, #0
   19ee6:	dbf3      	blt.n	19ed0 <spiflash_wait_ready_till+0x3c>
    int rc = -1;
   19ee8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19eec:	e000      	b.n	19ef0 <spiflash_wait_ready_till+0x5c>
            rc = 0;
   19eee:	2400      	movs	r4, #0
    os_mutex_release(&dev->lock);
   19ef0:	4638      	mov	r0, r7
   19ef2:	f7f0 ff39 	bl	ad68 <os_mutex_release>
}
   19ef6:	4620      	mov	r0, r4
   19ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 0;
   19efc:	2400      	movs	r4, #0
   19efe:	e7fa      	b.n	19ef6 <spiflash_wait_ready_till+0x62>
   19f00:	000f4240 	.word	0x000f4240

00019f04 <spiflash_wait_ready>:
{
   19f04:	b508      	push	{r3, lr}
    return spiflash_wait_ready_till(dev, timeout_ms * 1000, timeout_ms * 10);
   19f06:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   19f0a:	005a      	lsls	r2, r3, #1
   19f0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19f10:	fb03 f101 	mul.w	r1, r3, r1
   19f14:	f7ff ffbe 	bl	19e94 <spiflash_wait_ready_till>
}
   19f18:	bd08      	pop	{r3, pc}

00019f1a <hal_spiflash_read>:
{
   19f1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   19f1c:	b083      	sub	sp, #12
   19f1e:	4604      	mov	r4, r0
   19f20:	4617      	mov	r7, r2
   19f22:	461e      	mov	r6, r3
    uint8_t cmd[] = { SPIFLASH_READ,
   19f24:	2303      	movs	r3, #3
   19f26:	f88d 3004 	strb.w	r3, [sp, #4]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
   19f2a:	f3c1 4307 	ubfx	r3, r1, #16, #8
    uint8_t cmd[] = { SPIFLASH_READ,
   19f2e:	f88d 3005 	strb.w	r3, [sp, #5]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
   19f32:	f3c1 2307 	ubfx	r3, r1, #8, #8
    uint8_t cmd[] = { SPIFLASH_READ,
   19f36:	f88d 3006 	strb.w	r3, [sp, #6]
   19f3a:	f88d 1007 	strb.w	r1, [sp, #7]
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   19f3e:	f100 0540 	add.w	r5, r0, #64	; 0x40
   19f42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19f46:	4628      	mov	r0, r5
   19f48:	f7f0 ff6e 	bl	ae28 <os_mutex_pend>
    err = spiflash_wait_ready(dev, 100);
   19f4c:	2164      	movs	r1, #100	; 0x64
   19f4e:	4620      	mov	r0, r4
   19f50:	f7ff ffd8 	bl	19f04 <spiflash_wait_ready>
    if (!err) {
   19f54:	b900      	cbnz	r0, 19f58 <hal_spiflash_read+0x3e>
        if (len > 0) {
   19f56:	b92e      	cbnz	r6, 19f64 <hal_spiflash_read+0x4a>
    os_mutex_release(&dev->lock);
   19f58:	4628      	mov	r0, r5
   19f5a:	f7f0 ff05 	bl	ad68 <os_mutex_release>
}
   19f5e:	2000      	movs	r0, #0
   19f60:	b003      	add	sp, #12
   19f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hal_gpio_write(dev->ss_pin, 0);
   19f64:	2100      	movs	r1, #0
   19f66:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19f68:	f000 fc1f 	bl	1a7aa <hal_gpio_write>
            hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
   19f6c:	2304      	movs	r3, #4
   19f6e:	2200      	movs	r2, #0
   19f70:	eb0d 0103 	add.w	r1, sp, r3
   19f74:	6a20      	ldr	r0, [r4, #32]
   19f76:	f000 ff73 	bl	1ae60 <hal_spi_txrx>
            memset(buf, 0xFF, len);
   19f7a:	4632      	mov	r2, r6
   19f7c:	21ff      	movs	r1, #255	; 0xff
   19f7e:	4638      	mov	r0, r7
   19f80:	f7f1 fcaf 	bl	b8e2 <memset>
            hal_spi_txrx(dev->spi_num, buf, buf, len);
   19f84:	4633      	mov	r3, r6
   19f86:	463a      	mov	r2, r7
   19f88:	4639      	mov	r1, r7
   19f8a:	6a20      	ldr	r0, [r4, #32]
   19f8c:	f000 ff68 	bl	1ae60 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
   19f90:	2101      	movs	r1, #1
   19f92:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19f94:	f000 fc09 	bl	1a7aa <hal_gpio_write>
   19f98:	e7de      	b.n	19f58 <hal_spiflash_read+0x3e>

00019f9a <spiflash_write_enable>:
{
   19f9a:	b538      	push	{r3, r4, r5, lr}
   19f9c:	4604      	mov	r4, r0
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   19f9e:	f100 0540 	add.w	r5, r0, #64	; 0x40
   19fa2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19fa6:	4628      	mov	r0, r5
   19fa8:	f7f0 ff3e 	bl	ae28 <os_mutex_pend>
    hal_gpio_write(dev->ss_pin, 0);
   19fac:	2100      	movs	r1, #0
   19fae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19fb0:	f000 fbfb 	bl	1a7aa <hal_gpio_write>
    hal_spi_tx_val(dev->spi_num, cmd);
   19fb4:	2106      	movs	r1, #6
   19fb6:	6a20      	ldr	r0, [r4, #32]
   19fb8:	f000 ff18 	bl	1adec <hal_spi_tx_val>
    hal_gpio_write(dev->ss_pin, 1);
   19fbc:	2101      	movs	r1, #1
   19fbe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19fc0:	f000 fbf3 	bl	1a7aa <hal_gpio_write>
    os_mutex_release(&dev->lock);
   19fc4:	4628      	mov	r0, r5
   19fc6:	f7f0 fecf 	bl	ad68 <os_mutex_release>
}
   19fca:	2000      	movs	r0, #0
   19fcc:	bd38      	pop	{r3, r4, r5, pc}
	...

00019fd0 <hal_spiflash_write>:
{
   19fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fd4:	b085      	sub	sp, #20
   19fd6:	4605      	mov	r5, r0
   19fd8:	460e      	mov	r6, r1
   19fda:	4690      	mov	r8, r2
   19fdc:	461f      	mov	r7, r3
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
   19fde:	2300      	movs	r3, #0
   19fe0:	9303      	str	r3, [sp, #12]
   19fe2:	2302      	movs	r3, #2
   19fe4:	f88d 300c 	strb.w	r3, [sp, #12]
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   19fe8:	f100 0b40 	add.w	fp, r0, #64	; 0x40
   19fec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19ff0:	4658      	mov	r0, fp
   19ff2:	f7f0 ff19 	bl	ae28 <os_mutex_pend>
    if (spiflash_wait_ready(dev, 100) != 0) {
   19ff6:	2164      	movs	r1, #100	; 0x64
   19ff8:	4628      	mov	r0, r5
   19ffa:	f7ff ff83 	bl	19f04 <spiflash_wait_ready>
   19ffe:	9001      	str	r0, [sp, #4]
   1a000:	2800      	cmp	r0, #0
   1a002:	d148      	bne.n	1a096 <hal_spiflash_write+0xc6>
    pp_time_typical = dev->characteristics->tbp1.typical;
   1a004:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1a006:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    pp_time_maximum = dev->characteristics->tpp.maximum;
   1a00a:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
    if (pp_time_maximum < pp_time_typical) {
   1a00e:	45d1      	cmp	r9, sl
   1a010:	d83f      	bhi.n	1a092 <hal_spiflash_write+0xc2>
    while (len) {
   1a012:	2f00      	cmp	r7, #0
   1a014:	d042      	beq.n	1a09c <hal_spiflash_write+0xcc>
        spiflash_write_enable(dev);
   1a016:	4628      	mov	r0, r5
   1a018:	f7ff ffbf 	bl	19f9a <spiflash_write_enable>
        cmd[1] = (uint8_t)(addr >> 16);
   1a01c:	f3c6 4307 	ubfx	r3, r6, #16, #8
   1a020:	f88d 300d 	strb.w	r3, [sp, #13]
        cmd[2] = (uint8_t)(addr >> 8);
   1a024:	f3c6 2307 	ubfx	r3, r6, #8, #8
   1a028:	f88d 300e 	strb.w	r3, [sp, #14]
        cmd[3] = (uint8_t)(addr);
   1a02c:	f88d 600f 	strb.w	r6, [sp, #15]
        page_limit = (addr & ~(dev->page_size - 1)) + dev->page_size;
   1a030:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   1a032:	425c      	negs	r4, r3
   1a034:	4034      	ands	r4, r6
   1a036:	441c      	add	r4, r3
        to_write = page_limit - addr > len ? len :  page_limit - addr;
   1a038:	1ba4      	subs	r4, r4, r6
   1a03a:	42bc      	cmp	r4, r7
   1a03c:	bf28      	it	cs
   1a03e:	463c      	movcs	r4, r7
    hal_gpio_write(dev->ss_pin, 0);
   1a040:	2100      	movs	r1, #0
   1a042:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1a044:	f000 fbb1 	bl	1a7aa <hal_gpio_write>
        hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
   1a048:	2304      	movs	r3, #4
   1a04a:	2200      	movs	r2, #0
   1a04c:	a903      	add	r1, sp, #12
   1a04e:	6a28      	ldr	r0, [r5, #32]
   1a050:	f000 ff06 	bl	1ae60 <hal_spi_txrx>
        hal_spi_txrx(dev->spi_num, (void *)u8buf, NULL, to_write);
   1a054:	4623      	mov	r3, r4
   1a056:	2200      	movs	r2, #0
   1a058:	4641      	mov	r1, r8
   1a05a:	6a28      	ldr	r0, [r5, #32]
   1a05c:	f000 ff00 	bl	1ae60 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
   1a060:	2101      	movs	r1, #1
   1a062:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   1a064:	f000 fba1 	bl	1a7aa <hal_gpio_write>
        dev->ready = false;
   1a068:	2300      	movs	r3, #0
   1a06a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        spiflash_delay_us(pp_time_typical);
   1a06e:	4648      	mov	r0, r9
   1a070:	f7ff fe8e 	bl	19d90 <spiflash_delay_us>
        rc = spiflash_wait_ready_till(dev, pp_time_maximum - pp_time_typical,
   1a074:	ebaa 0109 	sub.w	r1, sl, r9
   1a078:	4a0c      	ldr	r2, [pc, #48]	; (1a0ac <hal_spiflash_write+0xdc>)
   1a07a:	fba2 3201 	umull	r3, r2, r2, r1
   1a07e:	08d2      	lsrs	r2, r2, #3
   1a080:	4628      	mov	r0, r5
   1a082:	f7ff ff07 	bl	19e94 <spiflash_wait_ready_till>
        if (rc) {
   1a086:	9001      	str	r0, [sp, #4]
   1a088:	b940      	cbnz	r0, 1a09c <hal_spiflash_write+0xcc>
        addr += to_write;
   1a08a:	4426      	add	r6, r4
        u8buf += to_write;
   1a08c:	44a0      	add	r8, r4
        len -= to_write;
   1a08e:	1b3f      	subs	r7, r7, r4
   1a090:	e7bf      	b.n	1a012 <hal_spiflash_write+0x42>
        pp_time_maximum = pp_time_typical;
   1a092:	46ca      	mov	sl, r9
   1a094:	e7bd      	b.n	1a012 <hal_spiflash_write+0x42>
        rc = -1;
   1a096:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a09a:	9301      	str	r3, [sp, #4]
    os_mutex_release(&dev->lock);
   1a09c:	4658      	mov	r0, fp
   1a09e:	f7f0 fe63 	bl	ad68 <os_mutex_release>
}
   1a0a2:	9801      	ldr	r0, [sp, #4]
   1a0a4:	b005      	add	sp, #20
   1a0a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0aa:	bf00      	nop
   1a0ac:	cccccccd 	.word	0xcccccccd

0001a0b0 <spiflash_execute_erase>:
{
   1a0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0b4:	4604      	mov	r4, r0
   1a0b6:	460f      	mov	r7, r1
   1a0b8:	4690      	mov	r8, r2
   1a0ba:	461e      	mov	r6, r3
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   1a0bc:	f100 0540 	add.w	r5, r0, #64	; 0x40
   1a0c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a0c4:	4628      	mov	r0, r5
   1a0c6:	f7f0 feaf 	bl	ae28 <os_mutex_pend>
    if (spiflash_wait_ready(dev, 100) != 0) {
   1a0ca:	2164      	movs	r1, #100	; 0x64
   1a0cc:	4620      	mov	r0, r4
   1a0ce:	f7ff ff19 	bl	19f04 <spiflash_wait_ready>
   1a0d2:	bba8      	cbnz	r0, 1a140 <spiflash_execute_erase+0x90>
    spiflash_write_enable(dev);
   1a0d4:	4620      	mov	r0, r4
   1a0d6:	f7ff ff60 	bl	19f9a <spiflash_write_enable>
    spiflash_read_status(dev);
   1a0da:	4620      	mov	r0, r4
   1a0dc:	f7ff feb0 	bl	19e40 <spiflash_read_status>
    hal_gpio_write(dev->ss_pin, 0);
   1a0e0:	2100      	movs	r1, #0
   1a0e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1a0e4:	f000 fb61 	bl	1a7aa <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, (void *)buf, NULL, size);
   1a0e8:	4643      	mov	r3, r8
   1a0ea:	2200      	movs	r2, #0
   1a0ec:	4639      	mov	r1, r7
   1a0ee:	6a20      	ldr	r0, [r4, #32]
   1a0f0:	f000 feb6 	bl	1ae60 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
   1a0f4:	2101      	movs	r1, #1
   1a0f6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1a0f8:	f000 fb57 	bl	1a7aa <hal_gpio_write>
    dev->ready = false;
   1a0fc:	2300      	movs	r3, #0
   1a0fe:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    start_time = os_cputime_get32();
   1a102:	f001 fe2a 	bl	1bd5a <os_cputime_get32>
   1a106:	4607      	mov	r7, r0
    spiflash_delay_us(delay_spec->typical);
   1a108:	6830      	ldr	r0, [r6, #0]
   1a10a:	f7ff fe41 	bl	19d90 <spiflash_delay_us>
    wait_time_us = os_cputime_ticks_to_usecs(os_cputime_get32() - start_time);
   1a10e:	f001 fe24 	bl	1bd5a <os_cputime_get32>
   1a112:	1bc0      	subs	r0, r0, r7
   1a114:	f001 fe40 	bl	1bd98 <os_cputime_ticks_to_usecs>
    if (wait_time_us > delay_spec->maximum) {
   1a118:	6871      	ldr	r1, [r6, #4]
   1a11a:	4281      	cmp	r1, r0
   1a11c:	d30e      	bcc.n	1a13c <spiflash_execute_erase+0x8c>
        wait_time_us = delay_spec->maximum - wait_time_us;
   1a11e:	1a09      	subs	r1, r1, r0
    rc = spiflash_wait_ready_till(dev, wait_time_us, wait_time_us / 50);
   1a120:	4a09      	ldr	r2, [pc, #36]	; (1a148 <spiflash_execute_erase+0x98>)
   1a122:	fba2 3201 	umull	r3, r2, r2, r1
   1a126:	0912      	lsrs	r2, r2, #4
   1a128:	4620      	mov	r0, r4
   1a12a:	f7ff feb3 	bl	19e94 <spiflash_wait_ready_till>
   1a12e:	4604      	mov	r4, r0
    os_mutex_release(&dev->lock);
   1a130:	4628      	mov	r0, r5
   1a132:	f7f0 fe19 	bl	ad68 <os_mutex_release>
}
   1a136:	4620      	mov	r0, r4
   1a138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        wait_time_us = 0;
   1a13c:	2100      	movs	r1, #0
   1a13e:	e7ef      	b.n	1a120 <spiflash_execute_erase+0x70>
        rc = -1;
   1a140:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a144:	e7f4      	b.n	1a130 <spiflash_execute_erase+0x80>
   1a146:	bf00      	nop
   1a148:	51eb851f 	.word	0x51eb851f

0001a14c <spiflash_erase_cmd>:

static int
spiflash_erase_cmd(struct spiflash_dev *dev, uint8_t cmd, uint32_t addr,
                   const struct spiflash_time_spec *time_spec)
{
   1a14c:	b500      	push	{lr}
   1a14e:	b083      	sub	sp, #12
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
   1a150:	f88d 1004 	strb.w	r1, [sp, #4]
   1a154:	f3c2 4107 	ubfx	r1, r2, #16, #8
   1a158:	f88d 1005 	strb.w	r1, [sp, #5]
   1a15c:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1a160:	f88d 1006 	strb.w	r1, [sp, #6]
   1a164:	f88d 2007 	strb.w	r2, [sp, #7]
                       (uint8_t)addr };
    return spiflash_execute_erase(dev, buf, sizeof(buf), time_spec);
   1a168:	2204      	movs	r2, #4
   1a16a:	eb0d 0102 	add.w	r1, sp, r2
   1a16e:	f7ff ff9f 	bl	1a0b0 <spiflash_execute_erase>

}
   1a172:	b003      	add	sp, #12
   1a174:	f85d fb04 	ldr.w	pc, [sp], #4

0001a178 <spiflash_sector_erase>:

int
spiflash_sector_erase(struct spiflash_dev *dev, uint32_t addr)
{
   1a178:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_SECTOR_ERASE, addr,
   1a17a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1a17c:	460a      	mov	r2, r1
   1a17e:	2120      	movs	r1, #32
   1a180:	f7ff ffe4 	bl	1a14c <spiflash_erase_cmd>
                              &dev->characteristics->tse);
}
   1a184:	bd08      	pop	{r3, pc}

0001a186 <hal_spiflash_erase_sector>:
{
   1a186:	b508      	push	{r3, lr}
    return spiflash_sector_erase(dev, addr);
   1a188:	f7ff fff6 	bl	1a178 <spiflash_sector_erase>
}
   1a18c:	bd08      	pop	{r3, pc}

0001a18e <spiflash_block_32k_erase>:

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
int
spiflash_block_32k_erase(struct spiflash_dev *dev, uint32_t addr)
{
   1a18e:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
                              &dev->characteristics->tbe1);
   1a190:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
   1a192:	3308      	adds	r3, #8
   1a194:	460a      	mov	r2, r1
   1a196:	2152      	movs	r1, #82	; 0x52
   1a198:	f7ff ffd8 	bl	1a14c <spiflash_erase_cmd>
}
   1a19c:	bd08      	pop	{r3, pc}

0001a19e <spiflash_block_64k_erase>:
#endif

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
int
spiflash_block_64k_erase(struct spiflash_dev *dev, uint32_t addr)
{
   1a19e:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
                              &dev->characteristics->tbe2);
   1a1a0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
   1a1a2:	3310      	adds	r3, #16
   1a1a4:	460a      	mov	r2, r1
   1a1a6:	21d8      	movs	r1, #216	; 0xd8
   1a1a8:	f7ff ffd0 	bl	1a14c <spiflash_erase_cmd>
}
   1a1ac:	bd08      	pop	{r3, pc}

0001a1ae <spiflash_chip_erase>:
#endif

int
spiflash_chip_erase(struct spiflash_dev *dev)
{
   1a1ae:	b500      	push	{lr}
   1a1b0:	b083      	sub	sp, #12
    uint8_t buf[1] = { SPIFLASH_CHIP_ERASE };
   1a1b2:	a902      	add	r1, sp, #8
   1a1b4:	2360      	movs	r3, #96	; 0x60
   1a1b6:	f801 3d04 	strb.w	r3, [r1, #-4]!

    return spiflash_execute_erase(dev, buf, sizeof(buf),
                                  &dev->characteristics->tce);
   1a1ba:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_execute_erase(dev, buf, sizeof(buf),
   1a1bc:	3318      	adds	r3, #24
   1a1be:	2201      	movs	r2, #1
   1a1c0:	f7ff ff76 	bl	1a0b0 <spiflash_execute_erase>
}
   1a1c4:	b003      	add	sp, #12
   1a1c6:	f85d fb04 	ldr.w	pc, [sp], #4

0001a1ca <spiflash_erase>:

int
spiflash_erase(struct spiflash_dev *dev, uint32_t address, uint32_t size)
{
   1a1ca:	b570      	push	{r4, r5, r6, lr}
   1a1cc:	4606      	mov	r6, r0
   1a1ce:	4615      	mov	r5, r2
    int rc = 0;

    if (address == 0 && size == dev->hal.hf_size) {
   1a1d0:	460c      	mov	r4, r1
   1a1d2:	b911      	cbnz	r1, 1a1da <spiflash_erase+0x10>
   1a1d4:	6883      	ldr	r3, [r0, #8]
   1a1d6:	4293      	cmp	r3, r2
   1a1d8:	d005      	beq.n	1a1e6 <spiflash_erase+0x1c>
        return spiflash_chip_erase(dev);
    }
    address &= ~0xFFFU;
   1a1da:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   1a1de:	f024 040f 	bic.w	r4, r4, #15
    int rc = 0;
   1a1e2:	2300      	movs	r3, #0
    while (size) {
   1a1e4:	e01c      	b.n	1a220 <spiflash_erase+0x56>
        return spiflash_chip_erase(dev);
   1a1e6:	f7ff ffe2 	bl	1a1ae <spiflash_chip_erase>
   1a1ea:	4603      	mov	r3, r0
   1a1ec:	e010      	b.n	1a210 <spiflash_erase+0x46>
#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
            /* 64 KB erase if possible */
            rc = spiflash_block_64k_erase(dev, address);
   1a1ee:	4621      	mov	r1, r4
   1a1f0:	4630      	mov	r0, r6
   1a1f2:	f7ff ffd4 	bl	1a19e <spiflash_block_64k_erase>
            if (rc) {
   1a1f6:	4603      	mov	r3, r0
   1a1f8:	b950      	cbnz	r0, 1a210 <spiflash_erase+0x46>
                goto err;
            }
            address += 0x10000;
   1a1fa:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
            size -= 0x10000;
   1a1fe:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
            continue;
   1a202:	e00d      	b.n	1a220 <spiflash_erase+0x56>
        }
#endif
#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
            /* 32 KB erase if possible */
            rc = spiflash_block_32k_erase(dev, address);
   1a204:	4621      	mov	r1, r4
   1a206:	4630      	mov	r0, r6
   1a208:	f7ff ffc1 	bl	1a18e <spiflash_block_32k_erase>
            if (rc) {
   1a20c:	4603      	mov	r3, r0
   1a20e:	b108      	cbz	r0, 1a214 <spiflash_erase+0x4a>
            size = 0;
        }
    }
err:
    return rc;
}
   1a210:	4618      	mov	r0, r3
   1a212:	bd70      	pop	{r4, r5, r6, pc}
            address += 0x8000;
   1a214:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
            size -= 0x8000;
   1a218:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
            continue;
   1a21c:	e000      	b.n	1a220 <spiflash_erase+0x56>
            size = 0;
   1a21e:	2500      	movs	r5, #0
    while (size) {
   1a220:	2d00      	cmp	r5, #0
   1a222:	d0f5      	beq.n	1a210 <spiflash_erase+0x46>
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
   1a224:	b2a3      	uxth	r3, r4
   1a226:	b913      	cbnz	r3, 1a22e <spiflash_erase+0x64>
   1a228:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1a22c:	d2df      	bcs.n	1a1ee <spiflash_erase+0x24>
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
   1a22e:	f3c4 030e 	ubfx	r3, r4, #0, #15
   1a232:	b913      	cbnz	r3, 1a23a <spiflash_erase+0x70>
   1a234:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1a238:	d2e4      	bcs.n	1a204 <spiflash_erase+0x3a>
        rc = spiflash_sector_erase(dev, address);
   1a23a:	4621      	mov	r1, r4
   1a23c:	4630      	mov	r0, r6
   1a23e:	f7ff ff9b 	bl	1a178 <spiflash_sector_erase>
        if (rc) {
   1a242:	4603      	mov	r3, r0
   1a244:	2800      	cmp	r0, #0
   1a246:	d1e3      	bne.n	1a210 <spiflash_erase+0x46>
        address += MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
   1a248:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
        if (size > MYNEWT_VAL(SPIFLASH_SECTOR_SIZE)) {
   1a24c:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1a250:	d9e5      	bls.n	1a21e <spiflash_erase+0x54>
            size -= MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
   1a252:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
   1a256:	e7e3      	b.n	1a220 <spiflash_erase+0x56>

0001a258 <hal_spiflash_erase>:
{
   1a258:	b508      	push	{r3, lr}
    return spiflash_erase(dev, address, size);
   1a25a:	f7ff ffb6 	bl	1a1ca <spiflash_erase>
}
   1a25e:	bd08      	pop	{r3, pc}

0001a260 <spiflash_identify>:

void blink_backlight(int pattern_id, int repetitions);  ////  Defined in blink.c

int
spiflash_identify(struct spiflash_dev *dev)
{
   1a260:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a262:	b083      	sub	sp, #12
   1a264:	4604      	mov	r4, r0
    int i;
    int j;
    uint8_t manufacturer = 0;
   1a266:	2300      	movs	r3, #0
   1a268:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t memory_type = 0;
   1a26c:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t capacity = 0;
   1a270:	ad02      	add	r5, sp, #8
   1a272:	f805 3d03 	strb.w	r3, [r5, #-3]!
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   1a276:	f100 0740 	add.w	r7, r0, #64	; 0x40
   1a27a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a27e:	4638      	mov	r0, r7
   1a280:	f7f0 fdd2 	bl	ae28 <os_mutex_pend>

    spiflash_lock(dev);

    /* Only one chip specified, no need for search*/
    if ((sizeof(supported_chips) / sizeof(supported_chips[0])) == 2) {
        supported_chips[0].fc_release_power_down(dev);
   1a284:	4e16      	ldr	r6, [pc, #88]	; (1a2e0 <spiflash_identify+0x80>)
   1a286:	6873      	ldr	r3, [r6, #4]
   1a288:	4620      	mov	r0, r4
   1a28a:	4798      	blx	r3
        spiflash_read_jedec_id(dev, &manufacturer, &memory_type, &capacity);
   1a28c:	462b      	mov	r3, r5
   1a28e:	f10d 0206 	add.w	r2, sp, #6
   1a292:	f10d 0107 	add.w	r1, sp, #7
   1a296:	4620      	mov	r0, r4
   1a298:	f7ff fd92 	bl	19dc0 <spiflash_read_jedec_id>

        ////Begin
        if (manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
   1a29c:	7832      	ldrb	r2, [r6, #0]
   1a29e:	f89d 3007 	ldrb.w	r3, [sp, #7]
        /* If BSP defined SpiFlash manufacturer or memory type does not
         * match SpiFlash is most likely not connected, connected to
         * different pins, or of different type.
         * It is unlikely that flash depended packaged will work correctly.
         */
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
   1a2a2:	429a      	cmp	r2, r3
   1a2a4:	d111      	bne.n	1a2ca <spiflash_identify+0x6a>
   1a2a6:	7872      	ldrb	r2, [r6, #1]
   1a2a8:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1a2ac:	429a      	cmp	r2, r3
   1a2ae:	d10c      	bne.n	1a2ca <spiflash_identify+0x6a>
   1a2b0:	78b2      	ldrb	r2, [r6, #2]
   1a2b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1a2b6:	429a      	cmp	r2, r3
   1a2b8:	d107      	bne.n	1a2ca <spiflash_identify+0x6a>
            memory_type != supported_chips[0].fc_jedec_id.ji_type ||
            capacity != supported_chips[0].fc_jedec_id.ji_capacity) {
            rc = -1;
            goto err;
        }
        dev->flash_chip = &supported_chips[0];
   1a2ba:	4b09      	ldr	r3, [pc, #36]	; (1a2e0 <spiflash_identify+0x80>)
   1a2bc:	63a3      	str	r3, [r4, #56]	; 0x38
    os_mutex_release(&dev->lock);
   1a2be:	4638      	mov	r0, r7
   1a2c0:	f7f0 fd52 	bl	ad68 <os_mutex_release>
    }
err:
    spiflash_unlock(dev);

    return rc;
}
   1a2c4:	2000      	movs	r0, #0
   1a2c6:	b003      	add	sp, #12
   1a2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
   1a2ca:	f7ed ff79 	bl	81c0 <hal_debugger_connected>
   1a2ce:	b100      	cbz	r0, 1a2d2 <spiflash_identify+0x72>
   1a2d0:	be01      	bkpt	0x0001
   1a2d2:	2300      	movs	r3, #0
   1a2d4:	461a      	mov	r2, r3
   1a2d6:	4619      	mov	r1, r3
   1a2d8:	4618      	mov	r0, r3
   1a2da:	f7ef fb79 	bl	99d0 <__assert_func>
   1a2de:	bf00      	nop
   1a2e0:	20000320 	.word	0x20000320

0001a2e4 <hal_spiflash_init>:

static int
hal_spiflash_init(const struct hal_flash *hal_flash_dev)
{
   1a2e4:	b510      	push	{r4, lr}
   1a2e6:	4604      	mov	r4, r0
    os_callout_init(&dev->apd_tmo_co, os_eventq_dflt_get(),
                    spiflash_apd_tmo_func, dev);
#endif

#if !MYNEWT_VAL(BUS_DRIVER_PRESENT)
    hal_gpio_init_out(dev->ss_pin, 1);
   1a2e8:	2101      	movs	r1, #1
   1a2ea:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1a2ec:	f000 fa41 	bl	1a772 <hal_gpio_init_out>

    (void)hal_spi_disable(dev->spi_num);
   1a2f0:	6a20      	ldr	r0, [r4, #32]
   1a2f2:	f000 fd13 	bl	1ad1c <hal_spi_disable>

    rc = hal_spi_config(dev->spi_num, &dev->spi_settings);
   1a2f6:	f104 0118 	add.w	r1, r4, #24
   1a2fa:	6a20      	ldr	r0, [r4, #32]
   1a2fc:	f000 fccc 	bl	1ac98 <hal_spi_config>
    if (rc) {
   1a300:	4603      	mov	r3, r0
   1a302:	b108      	cbz	r0, 1a308 <hal_spiflash_init+0x24>
    hal_spi_enable(dev->spi_num);
#endif
    rc = spiflash_identify(dev);

    return rc;
}
   1a304:	4618      	mov	r0, r3
   1a306:	bd10      	pop	{r4, pc}
    hal_spi_set_txrx_cb(dev->spi_num, NULL, NULL);
   1a308:	2200      	movs	r2, #0
   1a30a:	4611      	mov	r1, r2
   1a30c:	6a20      	ldr	r0, [r4, #32]
   1a30e:	f000 fd91 	bl	1ae34 <hal_spi_set_txrx_cb>
    hal_spi_enable(dev->spi_num);
   1a312:	6a20      	ldr	r0, [r4, #32]
   1a314:	f000 fcdc 	bl	1acd0 <hal_spi_enable>
    rc = spiflash_identify(dev);
   1a318:	4620      	mov	r0, r4
   1a31a:	f7ff ffa1 	bl	1a260 <spiflash_identify>
   1a31e:	4603      	mov	r3, r0
    return rc;
   1a320:	e7f0      	b.n	1a304 <hal_spiflash_init+0x20>

0001a322 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1a322:	6843      	ldr	r3, [r0, #4]
   1a324:	428b      	cmp	r3, r1
   1a326:	d808      	bhi.n	1a33a <hal_flash_check_addr+0x18>
   1a328:	6882      	ldr	r2, [r0, #8]
   1a32a:	4413      	add	r3, r2
   1a32c:	428b      	cmp	r3, r1
   1a32e:	d301      	bcc.n	1a334 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1a330:	2000      	movs	r0, #0
}
   1a332:	4770      	bx	lr
        return SYS_EINVAL;
   1a334:	f06f 0001 	mvn.w	r0, #1
   1a338:	4770      	bx	lr
   1a33a:	f06f 0001 	mvn.w	r0, #1
   1a33e:	4770      	bx	lr

0001a340 <hal_flash_init>:
{
   1a340:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1a342:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1a344:	462c      	mov	r4, r5
   1a346:	e001      	b.n	1a34c <hal_flash_init+0xc>
   1a348:	3401      	adds	r4, #1
   1a34a:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1a34c:	4620      	mov	r0, r4
   1a34e:	f7ff fced 	bl	19d2c <hal_bsp_flash_dev>
        if (!hf) {
   1a352:	b138      	cbz	r0, 1a364 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1a354:	6802      	ldr	r2, [r0, #0]
   1a356:	6952      	ldr	r2, [r2, #20]
   1a358:	4790      	blx	r2
   1a35a:	2800      	cmp	r0, #0
   1a35c:	d0f4      	beq.n	1a348 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1a35e:	f06f 0504 	mvn.w	r5, #4
   1a362:	e7f1      	b.n	1a348 <hal_flash_init+0x8>
}
   1a364:	4628      	mov	r0, r5
   1a366:	bd38      	pop	{r3, r4, r5, pc}

0001a368 <hal_flash_align>:
{
   1a368:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   1a36a:	f7ff fcdf 	bl	19d2c <hal_bsp_flash_dev>
    if (!hf) {
   1a36e:	b108      	cbz	r0, 1a374 <hal_flash_align+0xc>
    return hf->hf_align;
   1a370:	7c00      	ldrb	r0, [r0, #16]
}
   1a372:	bd08      	pop	{r3, pc}
        return 1;
   1a374:	2001      	movs	r0, #1
   1a376:	e7fc      	b.n	1a372 <hal_flash_align+0xa>

0001a378 <hal_flash_erased_val>:
{
   1a378:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   1a37a:	f7ff fcd7 	bl	19d2c <hal_bsp_flash_dev>
    if (!hf) {
   1a37e:	b108      	cbz	r0, 1a384 <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
   1a380:	7d00      	ldrb	r0, [r0, #20]
}
   1a382:	bd08      	pop	{r3, pc}
        return 1;
   1a384:	2001      	movs	r0, #1
   1a386:	e7fc      	b.n	1a382 <hal_flash_erased_val+0xa>

0001a388 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1a388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a38c:	460d      	mov	r5, r1
   1a38e:	4690      	mov	r8, r2
   1a390:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1a392:	f7ff fccb 	bl	19d2c <hal_bsp_flash_dev>
    if (!hf) {
   1a396:	b1c0      	cbz	r0, 1a3ca <hal_flash_read+0x42>
   1a398:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1a39a:	4629      	mov	r1, r5
   1a39c:	f7ff ffc1 	bl	1a322 <hal_flash_check_addr>
   1a3a0:	b9b0      	cbnz	r0, 1a3d0 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1a3a2:	19a9      	adds	r1, r5, r6
   1a3a4:	4620      	mov	r0, r4
   1a3a6:	f7ff ffbc 	bl	1a322 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1a3aa:	b9a0      	cbnz	r0, 1a3d6 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1a3ac:	6823      	ldr	r3, [r4, #0]
   1a3ae:	681f      	ldr	r7, [r3, #0]
   1a3b0:	4633      	mov	r3, r6
   1a3b2:	4642      	mov	r2, r8
   1a3b4:	4629      	mov	r1, r5
   1a3b6:	4620      	mov	r0, r4
   1a3b8:	47b8      	blx	r7
    if (rc != 0) {
   1a3ba:	4603      	mov	r3, r0
   1a3bc:	b910      	cbnz	r0, 1a3c4 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1a3be:	4618      	mov	r0, r3
   1a3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1a3c4:	f06f 0304 	mvn.w	r3, #4
   1a3c8:	e7f9      	b.n	1a3be <hal_flash_read+0x36>
        return SYS_EINVAL;
   1a3ca:	f06f 0301 	mvn.w	r3, #1
   1a3ce:	e7f6      	b.n	1a3be <hal_flash_read+0x36>
        return SYS_EINVAL;
   1a3d0:	f06f 0301 	mvn.w	r3, #1
   1a3d4:	e7f3      	b.n	1a3be <hal_flash_read+0x36>
   1a3d6:	f06f 0301 	mvn.w	r3, #1
   1a3da:	e7f0      	b.n	1a3be <hal_flash_read+0x36>

0001a3dc <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
   1a3dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3e0:	4605      	mov	r5, r0
   1a3e2:	460e      	mov	r6, r1
   1a3e4:	4690      	mov	r8, r2
   1a3e6:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1a3e8:	f7ff fca0 	bl	19d2c <hal_bsp_flash_dev>
    if (!hf) {
   1a3ec:	b310      	cbz	r0, 1a434 <hal_flash_write+0x58>
   1a3ee:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1a3f0:	4631      	mov	r1, r6
   1a3f2:	f7ff ff96 	bl	1a322 <hal_flash_check_addr>
   1a3f6:	bb00      	cbnz	r0, 1a43a <hal_flash_write+0x5e>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1a3f8:	19f1      	adds	r1, r6, r7
   1a3fa:	4620      	mov	r0, r4
   1a3fc:	f7ff ff91 	bl	1a322 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1a400:	b9f0      	cbnz	r0, 1a440 <hal_flash_write+0x64>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   1a402:	08eb      	lsrs	r3, r5, #3
   1a404:	4a11      	ldr	r2, [pc, #68]	; (1a44c <hal_flash_write+0x70>)
   1a406:	5cd3      	ldrb	r3, [r2, r3]
   1a408:	f005 0507 	and.w	r5, r5, #7
   1a40c:	fa43 f505 	asr.w	r5, r3, r5
   1a410:	f015 0f01 	tst.w	r5, #1
   1a414:	d117      	bne.n	1a446 <hal_flash_write+0x6a>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
   1a416:	6823      	ldr	r3, [r4, #0]
   1a418:	685d      	ldr	r5, [r3, #4]
   1a41a:	463b      	mov	r3, r7
   1a41c:	4642      	mov	r2, r8
   1a41e:	4631      	mov	r1, r6
   1a420:	4620      	mov	r0, r4
   1a422:	47a8      	blx	r5
    if (rc != 0) {
   1a424:	4603      	mov	r3, r0
   1a426:	b910      	cbnz	r0, 1a42e <hal_flash_write+0x52>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
   1a428:	4618      	mov	r0, r3
   1a42a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1a42e:	f06f 0304 	mvn.w	r3, #4
   1a432:	e7f9      	b.n	1a428 <hal_flash_write+0x4c>
        return SYS_EINVAL;
   1a434:	f06f 0301 	mvn.w	r3, #1
   1a438:	e7f6      	b.n	1a428 <hal_flash_write+0x4c>
        return SYS_EINVAL;
   1a43a:	f06f 0301 	mvn.w	r3, #1
   1a43e:	e7f3      	b.n	1a428 <hal_flash_write+0x4c>
   1a440:	f06f 0301 	mvn.w	r3, #1
   1a444:	e7f0      	b.n	1a428 <hal_flash_write+0x4c>
        return SYS_EACCES;
   1a446:	f06f 0306 	mvn.w	r3, #6
   1a44a:	e7ed      	b.n	1a428 <hal_flash_write+0x4c>
   1a44c:	20008064 	.word	0x20008064

0001a450 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   1a450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a454:	b083      	sub	sp, #12
   1a456:	4605      	mov	r5, r0
   1a458:	460e      	mov	r6, r1
   1a45a:	4690      	mov	r8, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1a45c:	f7ff fc66 	bl	19d2c <hal_bsp_flash_dev>
    if (!hf) {
   1a460:	2800      	cmp	r0, #0
   1a462:	d050      	beq.n	1a506 <hal_flash_erase+0xb6>
   1a464:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1a466:	4631      	mov	r1, r6
   1a468:	f7ff ff5b 	bl	1a322 <hal_flash_check_addr>
   1a46c:	2800      	cmp	r0, #0
   1a46e:	d14d      	bne.n	1a50c <hal_flash_erase+0xbc>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1a470:	eb06 0708 	add.w	r7, r6, r8
   1a474:	4639      	mov	r1, r7
   1a476:	4620      	mov	r0, r4
   1a478:	f7ff ff53 	bl	1a322 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1a47c:	2800      	cmp	r0, #0
   1a47e:	d148      	bne.n	1a512 <hal_flash_erase+0xc2>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   1a480:	08eb      	lsrs	r3, r5, #3
   1a482:	4a28      	ldr	r2, [pc, #160]	; (1a524 <hal_flash_erase+0xd4>)
   1a484:	5cd3      	ldrb	r3, [r2, r3]
   1a486:	f005 0507 	and.w	r5, r5, #7
   1a48a:	fa43 f505 	asr.w	r5, r3, r5
   1a48e:	f015 0501 	ands.w	r5, r5, #1
   1a492:	d141      	bne.n	1a518 <hal_flash_erase+0xc8>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
   1a494:	42b7      	cmp	r7, r6
   1a496:	d942      	bls.n	1a51e <hal_flash_erase+0xce>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
   1a498:	6823      	ldr	r3, [r4, #0]
   1a49a:	699b      	ldr	r3, [r3, #24]
   1a49c:	2b00      	cmp	r3, #0
   1a49e:	d030      	beq.n	1a502 <hal_flash_erase+0xb2>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
   1a4a0:	4642      	mov	r2, r8
   1a4a2:	4631      	mov	r1, r6
   1a4a4:	4620      	mov	r0, r4
   1a4a6:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
   1a4a8:	4628      	mov	r0, r5
   1a4aa:	b003      	add	sp, #12
   1a4ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            assert(rc == 0);
   1a4b0:	f7ed fe86 	bl	81c0 <hal_debugger_connected>
   1a4b4:	b100      	cbz	r0, 1a4b8 <hal_flash_erase+0x68>
   1a4b6:	be01      	bkpt	0x0001
   1a4b8:	2300      	movs	r3, #0
   1a4ba:	461a      	mov	r2, r3
   1a4bc:	4619      	mov	r1, r3
   1a4be:	4618      	mov	r0, r3
   1a4c0:	f7ef fa86 	bl	99d0 <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   1a4c4:	f108 0801 	add.w	r8, r8, #1
   1a4c8:	68e3      	ldr	r3, [r4, #12]
   1a4ca:	4543      	cmp	r3, r8
   1a4cc:	ddec      	ble.n	1a4a8 <hal_flash_erase+0x58>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   1a4ce:	6823      	ldr	r3, [r4, #0]
   1a4d0:	f8d3 900c 	ldr.w	r9, [r3, #12]
   1a4d4:	466b      	mov	r3, sp
   1a4d6:	aa01      	add	r2, sp, #4
   1a4d8:	4641      	mov	r1, r8
   1a4da:	4620      	mov	r0, r4
   1a4dc:	47c8      	blx	r9
            assert(rc == 0);
   1a4de:	2800      	cmp	r0, #0
   1a4e0:	d1e6      	bne.n	1a4b0 <hal_flash_erase+0x60>
            end_area = start + size;
   1a4e2:	9901      	ldr	r1, [sp, #4]
   1a4e4:	9b00      	ldr	r3, [sp, #0]
   1a4e6:	440b      	add	r3, r1
            if (address < end_area && end > start) {
   1a4e8:	429e      	cmp	r6, r3
   1a4ea:	d2eb      	bcs.n	1a4c4 <hal_flash_erase+0x74>
   1a4ec:	428f      	cmp	r7, r1
   1a4ee:	d9e9      	bls.n	1a4c4 <hal_flash_erase+0x74>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
   1a4f0:	6823      	ldr	r3, [r4, #0]
   1a4f2:	689b      	ldr	r3, [r3, #8]
   1a4f4:	4620      	mov	r0, r4
   1a4f6:	4798      	blx	r3
   1a4f8:	2800      	cmp	r0, #0
   1a4fa:	d0e3      	beq.n	1a4c4 <hal_flash_erase+0x74>
                    return SYS_EIO;
   1a4fc:	f06f 0504 	mvn.w	r5, #4
   1a500:	e7d2      	b.n	1a4a8 <hal_flash_erase+0x58>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   1a502:	46a8      	mov	r8, r5
   1a504:	e7e0      	b.n	1a4c8 <hal_flash_erase+0x78>
        return SYS_EINVAL;
   1a506:	f06f 0501 	mvn.w	r5, #1
   1a50a:	e7cd      	b.n	1a4a8 <hal_flash_erase+0x58>
        return SYS_EINVAL;
   1a50c:	f06f 0501 	mvn.w	r5, #1
   1a510:	e7ca      	b.n	1a4a8 <hal_flash_erase+0x58>
   1a512:	f06f 0501 	mvn.w	r5, #1
   1a516:	e7c7      	b.n	1a4a8 <hal_flash_erase+0x58>
        return SYS_EACCES;
   1a518:	f06f 0506 	mvn.w	r5, #6
   1a51c:	e7c4      	b.n	1a4a8 <hal_flash_erase+0x58>
        return SYS_EINVAL;
   1a51e:	f06f 0501 	mvn.w	r5, #1
   1a522:	e7c1      	b.n	1a4a8 <hal_flash_erase+0x58>
   1a524:	20008064 	.word	0x20008064

0001a528 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
   1a528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a52a:	4604      	mov	r4, r0
   1a52c:	4616      	mov	r6, r2
   1a52e:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1a530:	6807      	ldr	r7, [r0, #0]
   1a532:	683f      	ldr	r7, [r7, #0]
   1a534:	47b8      	blx	r7
    if (rc != 0) {
   1a536:	b960      	cbnz	r0, 1a552 <hal_flash_is_erased+0x2a>
   1a538:	4607      	mov	r7, r0
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
   1a53a:	2300      	movs	r3, #0
   1a53c:	42ab      	cmp	r3, r5
   1a53e:	d205      	bcs.n	1a54c <hal_flash_is_erased+0x24>
        if (buf[i] != hf->hf_erased_val) {
   1a540:	5cf1      	ldrb	r1, [r6, r3]
   1a542:	7d22      	ldrb	r2, [r4, #20]
   1a544:	4291      	cmp	r1, r2
   1a546:	d102      	bne.n	1a54e <hal_flash_is_erased+0x26>
    for (i = 0; i < num_bytes; i++) {
   1a548:	3301      	adds	r3, #1
   1a54a:	e7f7      	b.n	1a53c <hal_flash_is_erased+0x14>
            return 0;
        }
    }
    return 1;
   1a54c:	2701      	movs	r7, #1
}
   1a54e:	4638      	mov	r0, r7
   1a550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
   1a552:	f06f 0704 	mvn.w	r7, #4
   1a556:	e7fa      	b.n	1a54e <hal_flash_is_erased+0x26>

0001a558 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1a558:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a55c:	460d      	mov	r5, r1
   1a55e:	4690      	mov	r8, r2
   1a560:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1a562:	f7ff fbe3 	bl	19d2c <hal_bsp_flash_dev>
    if (!hf) {
   1a566:	b1f8      	cbz	r0, 1a5a8 <hal_flash_isempty+0x50>
   1a568:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1a56a:	4629      	mov	r1, r5
   1a56c:	f7ff fed9 	bl	1a322 <hal_flash_check_addr>
   1a570:	b9e8      	cbnz	r0, 1a5ae <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1a572:	19a9      	adds	r1, r5, r6
   1a574:	4620      	mov	r0, r4
   1a576:	f7ff fed4 	bl	1a322 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1a57a:	b9d8      	cbnz	r0, 1a5b4 <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
   1a57c:	6823      	ldr	r3, [r4, #0]
   1a57e:	691f      	ldr	r7, [r3, #16]
   1a580:	b15f      	cbz	r7, 1a59a <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   1a582:	4633      	mov	r3, r6
   1a584:	4642      	mov	r2, r8
   1a586:	4629      	mov	r1, r5
   1a588:	4620      	mov	r0, r4
   1a58a:	47b8      	blx	r7
        if (rc < 0) {
   1a58c:	2800      	cmp	r0, #0
   1a58e:	db01      	blt.n	1a594 <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
   1a590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
   1a594:	f06f 0004 	mvn.w	r0, #4
   1a598:	e7fa      	b.n	1a590 <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
   1a59a:	4633      	mov	r3, r6
   1a59c:	4642      	mov	r2, r8
   1a59e:	4629      	mov	r1, r5
   1a5a0:	4620      	mov	r0, r4
   1a5a2:	f7ff ffc1 	bl	1a528 <hal_flash_is_erased>
   1a5a6:	e7f3      	b.n	1a590 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   1a5a8:	f06f 0001 	mvn.w	r0, #1
   1a5ac:	e7f0      	b.n	1a590 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   1a5ae:	f06f 0001 	mvn.w	r0, #1
   1a5b2:	e7ed      	b.n	1a590 <hal_flash_isempty+0x38>
   1a5b4:	f06f 0001 	mvn.w	r0, #1
   1a5b8:	e7ea      	b.n	1a590 <hal_flash_isempty+0x38>

0001a5ba <hal_flash_isempty_no_buf>:

int
hal_flash_isempty_no_buf(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   1a5ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a5bc:	b085      	sub	sp, #20
   1a5be:	4607      	mov	r7, r0
   1a5c0:	460e      	mov	r6, r1
   1a5c2:	4615      	mov	r5, r2
    uint32_t blksz;
    uint32_t rem;
    uint32_t off;
    int empty;

    for (off = 0; off < num_bytes; off += sizeof buf) {
   1a5c4:	2400      	movs	r4, #0
   1a5c6:	e007      	b.n	1a5d8 <hal_flash_isempty_no_buf+0x1e>
        blksz = sizeof buf;
        if (blksz > rem) {
            blksz = rem;
        }

        empty = hal_flash_isempty(id, address + off, buf, blksz);
   1a5c8:	466a      	mov	r2, sp
   1a5ca:	19a1      	adds	r1, r4, r6
   1a5cc:	4638      	mov	r0, r7
   1a5ce:	f7ff ffc3 	bl	1a558 <hal_flash_isempty>
        if (empty != 1) {
   1a5d2:	2801      	cmp	r0, #1
   1a5d4:	d108      	bne.n	1a5e8 <hal_flash_isempty_no_buf+0x2e>
    for (off = 0; off < num_bytes; off += sizeof buf) {
   1a5d6:	3410      	adds	r4, #16
   1a5d8:	42ac      	cmp	r4, r5
   1a5da:	d204      	bcs.n	1a5e6 <hal_flash_isempty_no_buf+0x2c>
        rem = num_bytes - off;
   1a5dc:	1b2b      	subs	r3, r5, r4
        if (blksz > rem) {
   1a5de:	2b0f      	cmp	r3, #15
   1a5e0:	d9f2      	bls.n	1a5c8 <hal_flash_isempty_no_buf+0xe>
        blksz = sizeof buf;
   1a5e2:	2310      	movs	r3, #16
   1a5e4:	e7f0      	b.n	1a5c8 <hal_flash_isempty_no_buf+0xe>
            return empty;
        }
    }

    return 1;
   1a5e6:	2001      	movs	r0, #1
}
   1a5e8:	b005      	add	sp, #20
   1a5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a5ec <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1a5ec:	2300      	movs	r3, #0
   1a5ee:	4a07      	ldr	r2, [pc, #28]	; (1a60c <nrf52k_flash_wait_ready+0x20>)
   1a5f0:	4293      	cmp	r3, r2
   1a5f2:	dc06      	bgt.n	1a602 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1a5f4:	4a06      	ldr	r2, [pc, #24]	; (1a610 <nrf52k_flash_wait_ready+0x24>)
   1a5f6:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1a5fa:	2a01      	cmp	r2, #1
   1a5fc:	d004      	beq.n	1a608 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1a5fe:	3301      	adds	r3, #1
   1a600:	e7f5      	b.n	1a5ee <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1a602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a606:	4770      	bx	lr
            return 0;
   1a608:	2000      	movs	r0, #0
}
   1a60a:	4770      	bx	lr
   1a60c:	0001869f 	.word	0x0001869f
   1a610:	4001e000 	.word	0x4001e000

0001a614 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1a614:	b538      	push	{r3, r4, r5, lr}
   1a616:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1a618:	f7ff ffe8 	bl	1a5ec <nrf52k_flash_wait_ready>
   1a61c:	b9f0      	cbnz	r0, 1a65c <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a61e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a622:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1a624:	4b0f      	ldr	r3, [pc, #60]	; (1a664 <nrf52k_flash_erase_sector+0x50>)
   1a626:	2202      	movs	r2, #2
   1a628:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1a62c:	f7ff ffde 	bl	1a5ec <nrf52k_flash_wait_ready>
   1a630:	b148      	cbz	r0, 1a646 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1a632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1a636:	4a0b      	ldr	r2, [pc, #44]	; (1a664 <nrf52k_flash_erase_sector+0x50>)
   1a638:	2100      	movs	r1, #0
   1a63a:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1a63e:	b904      	cbnz	r4, 1a642 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1a640:	b662      	cpsie	i
    return rc;
}
   1a642:	4618      	mov	r0, r3
   1a644:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1a646:	4b07      	ldr	r3, [pc, #28]	; (1a664 <nrf52k_flash_erase_sector+0x50>)
   1a648:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1a64c:	f7ff ffce 	bl	1a5ec <nrf52k_flash_wait_ready>
   1a650:	4603      	mov	r3, r0
   1a652:	2800      	cmp	r0, #0
   1a654:	d0ef      	beq.n	1a636 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1a656:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a65a:	e7ec      	b.n	1a636 <nrf52k_flash_erase_sector+0x22>
        return -1;
   1a65c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a660:	e7ef      	b.n	1a642 <nrf52k_flash_erase_sector+0x2e>
   1a662:	bf00      	nop
   1a664:	4001e000 	.word	0x4001e000

0001a668 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1a668:	2000      	movs	r0, #0
   1a66a:	4770      	bx	lr

0001a66c <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1a66c:	297f      	cmp	r1, #127	; 0x7f
   1a66e:	dc06      	bgt.n	1a67e <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1a670:	0309      	lsls	r1, r1, #12
   1a672:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1a674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1a678:	601a      	str	r2, [r3, #0]
}
   1a67a:	2000      	movs	r0, #0
   1a67c:	4770      	bx	lr
{
   1a67e:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1a680:	f7ed fd9e 	bl	81c0 <hal_debugger_connected>
   1a684:	b100      	cbz	r0, 1a688 <nrf52k_flash_sector_info+0x1c>
   1a686:	be01      	bkpt	0x0001
   1a688:	2300      	movs	r3, #0
   1a68a:	461a      	mov	r2, r3
   1a68c:	4619      	mov	r1, r3
   1a68e:	4618      	mov	r0, r3
   1a690:	f7ef f99e 	bl	99d0 <__assert_func>

0001a694 <nrf52k_flash_write>:
{
   1a694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a698:	b082      	sub	sp, #8
   1a69a:	460d      	mov	r5, r1
   1a69c:	4616      	mov	r6, r2
   1a69e:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1a6a0:	f7ff ffa4 	bl	1a5ec <nrf52k_flash_wait_ready>
   1a6a4:	2800      	cmp	r0, #0
   1a6a6:	d158      	bne.n	1a75a <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a6a8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a6ac:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1a6ae:	4b2c      	ldr	r3, [pc, #176]	; (1a760 <nrf52k_flash_write+0xcc>)
   1a6b0:	2201      	movs	r2, #1
   1a6b2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1a6b6:	f015 0803 	ands.w	r8, r5, #3
   1a6ba:	d10b      	bne.n	1a6d4 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1a6bc:	2c03      	cmp	r4, #3
   1a6be:	d925      	bls.n	1a70c <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1a6c0:	f7ff ff94 	bl	1a5ec <nrf52k_flash_wait_ready>
   1a6c4:	2800      	cmp	r0, #0
   1a6c6:	d139      	bne.n	1a73c <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1a6c8:	f856 3b04 	ldr.w	r3, [r6], #4
   1a6cc:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1a6d0:	3c04      	subs	r4, #4
   1a6d2:	e7f3      	b.n	1a6bc <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1a6d4:	f7ff ff8a 	bl	1a5ec <nrf52k_flash_wait_ready>
   1a6d8:	bb68      	cbnz	r0, 1a736 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1a6da:	f025 0a03 	bic.w	sl, r5, #3
   1a6de:	f8da 3000 	ldr.w	r3, [sl]
   1a6e2:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1a6e4:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1a6e8:	45a1      	cmp	r9, r4
   1a6ea:	d900      	bls.n	1a6ee <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1a6ec:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1a6ee:	464a      	mov	r2, r9
   1a6f0:	4631      	mov	r1, r6
   1a6f2:	ab01      	add	r3, sp, #4
   1a6f4:	eb03 0008 	add.w	r0, r3, r8
   1a6f8:	f7f1 f8ca 	bl	b890 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1a6fc:	9b01      	ldr	r3, [sp, #4]
   1a6fe:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1a702:	444d      	add	r5, r9
        num_bytes -= cnt;
   1a704:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1a708:	444e      	add	r6, r9
   1a70a:	e7d7      	b.n	1a6bc <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1a70c:	b164      	cbz	r4, 1a728 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1a70e:	682b      	ldr	r3, [r5, #0]
   1a710:	a802      	add	r0, sp, #8
   1a712:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1a716:	4622      	mov	r2, r4
   1a718:	4631      	mov	r1, r6
   1a71a:	f7f1 f8b9 	bl	b890 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1a71e:	f7ff ff65 	bl	1a5ec <nrf52k_flash_wait_ready>
   1a722:	b9b8      	cbnz	r0, 1a754 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1a724:	9b01      	ldr	r3, [sp, #4]
   1a726:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1a728:	f7ff ff60 	bl	1a5ec <nrf52k_flash_wait_ready>
   1a72c:	4603      	mov	r3, r0
   1a72e:	b138      	cbz	r0, 1a740 <nrf52k_flash_write+0xac>
        rc = -1;
   1a730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a734:	e004      	b.n	1a740 <nrf52k_flash_write+0xac>
    int rc = -1;
   1a736:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a73a:	e001      	b.n	1a740 <nrf52k_flash_write+0xac>
   1a73c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1a740:	4a07      	ldr	r2, [pc, #28]	; (1a760 <nrf52k_flash_write+0xcc>)
   1a742:	2100      	movs	r1, #0
   1a744:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1a748:	b907      	cbnz	r7, 1a74c <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1a74a:	b662      	cpsie	i
}
   1a74c:	4618      	mov	r0, r3
   1a74e:	b002      	add	sp, #8
   1a750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1a754:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a758:	e7f2      	b.n	1a740 <nrf52k_flash_write+0xac>
        return -1;
   1a75a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a75e:	e7f5      	b.n	1a74c <nrf52k_flash_write+0xb8>
   1a760:	4001e000 	.word	0x4001e000

0001a764 <nrf52k_flash_read>:
{
   1a764:	b508      	push	{r3, lr}
   1a766:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1a768:	461a      	mov	r2, r3
   1a76a:	f7f1 f891 	bl	b890 <memcpy>
}
   1a76e:	2000      	movs	r0, #0
   1a770:	bd08      	pop	{r3, pc}

0001a772 <hal_gpio_init_out>:
{
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);

    port = HAL_GPIO_PORT(pin);
    if (val) {
   1a772:	b999      	cbnz	r1, 1a79c <hal_gpio_init_out+0x2a>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
   1a774:	2301      	movs	r3, #1
   1a776:	4083      	lsls	r3, r0
   1a778:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a77c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    }
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   1a780:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a784:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   1a788:	2103      	movs	r1, #3
   1a78a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);
    port->DIRSET = HAL_GPIO_MASK(pin);
   1a78e:	2301      	movs	r3, #1
   1a790:	fa03 f000 	lsl.w	r0, r3, r0
   1a794:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518

    return 0;
}
   1a798:	2000      	movs	r0, #0
   1a79a:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1a79c:	2301      	movs	r3, #1
   1a79e:	4083      	lsls	r3, r0
   1a7a0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a7a4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1a7a8:	e7ea      	b.n	1a780 <hal_gpio_init_out+0xe>

0001a7aa <hal_gpio_write>:
hal_gpio_write(int pin, int val)
{
    NRF_GPIO_Type *port;

    port = HAL_GPIO_PORT(pin);
    if (val) {
   1a7aa:	b939      	cbnz	r1, 1a7bc <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
   1a7ac:	2301      	movs	r3, #1
   1a7ae:	fa03 f000 	lsl.w	r0, r3, r0
   1a7b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a7b6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    }
}
   1a7ba:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1a7bc:	2301      	movs	r3, #1
   1a7be:	fa03 f000 	lsl.w	r0, r3, r0
   1a7c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a7c6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   1a7ca:	4770      	bx	lr

0001a7cc <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1a7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1a7ce:	f7f0 fef1 	bl	b5b4 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1a7d2:	4b39      	ldr	r3, [pc, #228]	; (1a8b8 <nrf52_timer_handler+0xec>)
   1a7d4:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1a7d8:	4b38      	ldr	r3, [pc, #224]	; (1a8bc <nrf52_timer_handler+0xf0>)
   1a7da:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1a7dc:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1a7e0:	d229      	bcs.n	1a836 <nrf52_timer_handler+0x6a>
   1a7e2:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1a7e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a7e8:	d22f      	bcs.n	1a84a <nrf52_timer_handler+0x7e>
    result = x - y;
   1a7ea:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1a7ec:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1a7f0:	d135      	bne.n	1a85e <nrf52_timer_handler+0x92>
        return (result & 0x007fffff);
   1a7f2:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1a7f6:	4f31      	ldr	r7, [pc, #196]	; (1a8bc <nrf52_timer_handler+0xf0>)
   1a7f8:	683c      	ldr	r4, [r7, #0]
   1a7fa:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1a7fe:	4628      	mov	r0, r5
   1a800:	f7f0 fe60 	bl	b4c4 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1a804:	4b2c      	ldr	r3, [pc, #176]	; (1a8b8 <nrf52_timer_handler+0xec>)
   1a806:	2200      	movs	r2, #0
   1a808:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a80c:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1a80e:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a810:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1a814:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a818:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1a81a:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1a81c:	f7f0 fed3 	bl	b5c6 <os_arch_in_critical>
   1a820:	bba8      	cbnz	r0, 1a88e <nrf52_timer_handler+0xc2>
   1a822:	f7ed fccd 	bl	81c0 <hal_debugger_connected>
   1a826:	b100      	cbz	r0, 1a82a <nrf52_timer_handler+0x5e>
   1a828:	be01      	bkpt	0x0001
   1a82a:	2300      	movs	r3, #0
   1a82c:	461a      	mov	r2, r3
   1a82e:	4619      	mov	r1, r3
   1a830:	4618      	mov	r0, r3
   1a832:	f7ef f8cd 	bl	99d0 <__assert_func>
    assert(x <= 0xffffff);
   1a836:	f7ed fcc3 	bl	81c0 <hal_debugger_connected>
   1a83a:	b100      	cbz	r0, 1a83e <nrf52_timer_handler+0x72>
   1a83c:	be01      	bkpt	0x0001
   1a83e:	2300      	movs	r3, #0
   1a840:	461a      	mov	r2, r3
   1a842:	4619      	mov	r1, r3
   1a844:	4618      	mov	r0, r3
   1a846:	f7ef f8c3 	bl	99d0 <__assert_func>
    assert(y <= 0xffffff);
   1a84a:	f7ed fcb9 	bl	81c0 <hal_debugger_connected>
   1a84e:	b100      	cbz	r0, 1a852 <nrf52_timer_handler+0x86>
   1a850:	be01      	bkpt	0x0001
   1a852:	2300      	movs	r3, #0
   1a854:	461a      	mov	r2, r3
   1a856:	4619      	mov	r1, r3
   1a858:	4618      	mov	r0, r3
   1a85a:	f7ef f8b9 	bl	99d0 <__assert_func>
        return (result | 0xff800000);
   1a85e:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1a862:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1a866:	e7c6      	b.n	1a7f6 <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1a868:	f7ed fcaa 	bl	81c0 <hal_debugger_connected>
   1a86c:	b100      	cbz	r0, 1a870 <nrf52_timer_handler+0xa4>
   1a86e:	be01      	bkpt	0x0001
   1a870:	2300      	movs	r3, #0
   1a872:	461a      	mov	r2, r3
   1a874:	4619      	mov	r1, r3
   1a876:	4618      	mov	r0, r3
   1a878:	f7ef f8aa 	bl	99d0 <__assert_func>
        return (result | 0xff800000);
   1a87c:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1a880:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1a884:	2a02      	cmp	r2, #2
   1a886:	dc13      	bgt.n	1a8b0 <nrf52_timer_handler+0xe4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1a888:	4a0c      	ldr	r2, [pc, #48]	; (1a8bc <nrf52_timer_handler+0xf0>)
   1a88a:	6814      	ldr	r4, [r2, #0]
   1a88c:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1a88e:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1a892:	4a09      	ldr	r2, [pc, #36]	; (1a8b8 <nrf52_timer_handler+0xec>)
   1a894:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1a898:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1a89c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1a8a0:	d2e2      	bcs.n	1a868 <nrf52_timer_handler+0x9c>
    result = x - y;
   1a8a2:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1a8a4:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1a8a8:	d1e8      	bne.n	1a87c <nrf52_timer_handler+0xb0>
        return (result & 0x007fffff);
   1a8aa:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1a8ae:	e7e9      	b.n	1a884 <nrf52_timer_handler+0xb8>

    OS_EXIT_CRITICAL(sr);
   1a8b0:	4630      	mov	r0, r6
   1a8b2:	f7f0 fe85 	bl	b5c0 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1a8b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a8b8:	40011000 	.word	0x40011000
   1a8bc:	20008068 	.word	0x20008068

0001a8c0 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1a8c0:	b538      	push	{r3, r4, r5, lr}
   1a8c2:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1a8c4:	f7f0 fe7f 	bl	b5c6 <os_arch_in_critical>
   1a8c8:	b1c0      	cbz	r0, 1a8fc <os_tick_idle+0x3c>

    if (ticks > 0) {
   1a8ca:	2d00      	cmp	r5, #0
   1a8cc:	d044      	beq.n	1a958 <os_tick_idle+0x98>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1a8ce:	4b26      	ldr	r3, [pc, #152]	; (1a968 <os_tick_idle+0xa8>)
   1a8d0:	685b      	ldr	r3, [r3, #4]
   1a8d2:	42ab      	cmp	r3, r5
   1a8d4:	d200      	bcs.n	1a8d8 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1a8d6:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1a8d8:	4b23      	ldr	r3, [pc, #140]	; (1a968 <os_tick_idle+0xa8>)
   1a8da:	689c      	ldr	r4, [r3, #8]
   1a8dc:	681a      	ldr	r2, [r3, #0]
   1a8de:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1a8e2:	f7f0 fe70 	bl	b5c6 <os_arch_in_critical>
   1a8e6:	bb30      	cbnz	r0, 1a936 <os_tick_idle+0x76>
   1a8e8:	f7ed fc6a 	bl	81c0 <hal_debugger_connected>
   1a8ec:	b100      	cbz	r0, 1a8f0 <os_tick_idle+0x30>
   1a8ee:	be01      	bkpt	0x0001
   1a8f0:	2300      	movs	r3, #0
   1a8f2:	461a      	mov	r2, r3
   1a8f4:	4619      	mov	r1, r3
   1a8f6:	4618      	mov	r0, r3
   1a8f8:	f7ef f86a 	bl	99d0 <__assert_func>
    OS_ASSERT_CRITICAL();
   1a8fc:	f7ed fc60 	bl	81c0 <hal_debugger_connected>
   1a900:	b100      	cbz	r0, 1a904 <os_tick_idle+0x44>
   1a902:	be01      	bkpt	0x0001
   1a904:	2300      	movs	r3, #0
   1a906:	461a      	mov	r2, r3
   1a908:	4619      	mov	r1, r3
   1a90a:	4618      	mov	r0, r3
   1a90c:	f7ef f860 	bl	99d0 <__assert_func>
    assert(y <= 0xffffff);
   1a910:	f7ed fc56 	bl	81c0 <hal_debugger_connected>
   1a914:	b100      	cbz	r0, 1a918 <os_tick_idle+0x58>
   1a916:	be01      	bkpt	0x0001
   1a918:	2300      	movs	r3, #0
   1a91a:	461a      	mov	r2, r3
   1a91c:	4619      	mov	r1, r3
   1a91e:	4618      	mov	r0, r3
   1a920:	f7ef f856 	bl	99d0 <__assert_func>
        return (result | 0xff800000);
   1a924:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1a928:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1a92c:	2b02      	cmp	r3, #2
   1a92e:	dc13      	bgt.n	1a958 <os_tick_idle+0x98>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1a930:	4b0d      	ldr	r3, [pc, #52]	; (1a968 <os_tick_idle+0xa8>)
   1a932:	681c      	ldr	r4, [r3, #0]
   1a934:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1a936:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1a93a:	4b0c      	ldr	r3, [pc, #48]	; (1a96c <os_tick_idle+0xac>)
   1a93c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1a940:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1a944:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a948:	d2e2      	bcs.n	1a910 <os_tick_idle+0x50>
    result = x - y;
   1a94a:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1a94c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1a950:	d1e8      	bne.n	1a924 <os_tick_idle+0x64>
        return (result & 0x007fffff);
   1a952:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1a956:	e7e9      	b.n	1a92c <os_tick_idle+0x6c>
  __ASM volatile ("dsb 0xF":::"memory");
   1a958:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1a95c:	bf30      	wfi

    if (ticks > 0) {
   1a95e:	b905      	cbnz	r5, 1a962 <os_tick_idle+0xa2>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1a960:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1a962:	f7ff ff33 	bl	1a7cc <nrf52_timer_handler>
}
   1a966:	e7fb      	b.n	1a960 <os_tick_idle+0xa0>
   1a968:	20008068 	.word	0x20008068
   1a96c:	40011000 	.word	0x40011000

0001a970 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1a970:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a976:	fbb3 f3f0 	udiv	r3, r3, r0
   1a97a:	fb00 f303 	mul.w	r3, r0, r3
   1a97e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a982:	d136      	bne.n	1a9f2 <os_tick_init+0x82>
   1a984:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1a986:	4d20      	ldr	r5, [pc, #128]	; (1aa08 <os_tick_init+0x98>)
   1a988:	2600      	movs	r6, #0
   1a98a:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1a98c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a990:	fbb3 f0f0 	udiv	r0, r3, r0
   1a994:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1a996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a99a:	fbb3 f0f0 	udiv	r0, r3, r0
   1a99e:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1a9a0:	f7f0 fe08 	bl	b5b4 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a9a4:	0164      	lsls	r4, r4, #5
   1a9a6:	b2e4      	uxtb	r4, r4
   1a9a8:	4b18      	ldr	r3, [pc, #96]	; (1aa0c <os_tick_init+0x9c>)
   1a9aa:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a9ae:	4a18      	ldr	r2, [pc, #96]	; (1aa10 <os_tick_init+0xa0>)
   1a9b0:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a9b2:	4918      	ldr	r1, [pc, #96]	; (1aa14 <os_tick_init+0xa4>)
   1a9b4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a9b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a9bc:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1a9be:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1a9c2:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1a9c6:	2201      	movs	r2, #1
   1a9c8:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1a9ca:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1a9cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a9d0:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1a9d4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1a9d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1a9dc:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1a9e0:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1a9e4:	6829      	ldr	r1, [r5, #0]
   1a9e6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1a9ea:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1a9ec:	f7f0 fde8 	bl	b5c0 <os_arch_restore_sr>
}
   1a9f0:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a9f2:	f7ed fbe5 	bl	81c0 <hal_debugger_connected>
   1a9f6:	b100      	cbz	r0, 1a9fa <os_tick_init+0x8a>
   1a9f8:	be01      	bkpt	0x0001
   1a9fa:	2300      	movs	r3, #0
   1a9fc:	461a      	mov	r2, r3
   1a9fe:	4619      	mov	r1, r3
   1aa00:	4618      	mov	r0, r3
   1aa02:	f7ee ffe5 	bl	99d0 <__assert_func>
   1aa06:	bf00      	nop
   1aa08:	20008068 	.word	0x20008068
   1aa0c:	e000e100 	.word	0xe000e100
   1aa10:	e000ed00 	.word	0xe000ed00
   1aa14:	0001a7cd 	.word	0x0001a7cd

0001aa18 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER) || MYNEWT_VAL(SPI_3_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   1aa18:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   1aa1a:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   1aa1c:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1aa20:	b32b      	cbz	r3, 1aa6e <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   1aa22:	2300      	movs	r3, #0
   1aa24:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   1aa28:	7843      	ldrb	r3, [r0, #1]
   1aa2a:	b303      	cbz	r3, 1aa6e <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   1aa2c:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   1aa30:	88c3      	ldrh	r3, [r0, #6]
   1aa32:	fa13 f382 	uxtah	r3, r3, r2
   1aa36:	b29b      	uxth	r3, r3
   1aa38:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   1aa3a:	8881      	ldrh	r1, [r0, #4]
   1aa3c:	428b      	cmp	r3, r1
   1aa3e:	d217      	bcs.n	1aa70 <nrf52_irqm_handler+0x58>
   1aa40:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   1aa42:	6984      	ldr	r4, [r0, #24]
   1aa44:	4414      	add	r4, r2
   1aa46:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   1aa48:	1acb      	subs	r3, r1, r3
   1aa4a:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   1aa4c:	2bff      	cmp	r3, #255	; 0xff
   1aa4e:	bf28      	it	cs
   1aa50:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1aa52:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1aa56:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   1aa5a:	69c1      	ldr	r1, [r0, #28]
   1aa5c:	b129      	cbz	r1, 1aa6a <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   1aa5e:	440a      	add	r2, r1
   1aa60:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1aa62:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1aa66:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   1aa6a:	2301      	movs	r3, #1
   1aa6c:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   1aa6e:	bd38      	pop	{r3, r4, r5, pc}
   1aa70:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   1aa72:	6a03      	ldr	r3, [r0, #32]
   1aa74:	b10b      	cbz	r3, 1aa7a <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1aa76:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1aa78:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   1aa7a:	2300      	movs	r3, #0
   1aa7c:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1aa7e:	2340      	movs	r3, #64	; 0x40
   1aa80:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1aa84:	e7f3      	b.n	1aa6e <nrf52_irqm_handler+0x56>
	...

0001aa88 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   1aa88:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   1aa8a:	4b04      	ldr	r3, [pc, #16]	; (1aa9c <nrf52_spi0_irq_handler+0x14>)
   1aa8c:	781b      	ldrb	r3, [r3, #0]
   1aa8e:	b103      	cbz	r3, 1aa92 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   1aa90:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1aa92:	4802      	ldr	r0, [pc, #8]	; (1aa9c <nrf52_spi0_irq_handler+0x14>)
   1aa94:	f7ff ffc0 	bl	1aa18 <nrf52_irqm_handler>
}
   1aa98:	e7fa      	b.n	1aa90 <nrf52_spi0_irq_handler+0x8>
   1aa9a:	bf00      	nop
   1aa9c:	20008074 	.word	0x20008074

0001aaa0 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   1aaa0:	2301      	movs	r3, #1
   1aaa2:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   1aaa4:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1aaa8:	2b00      	cmp	r3, #0
   1aaaa:	d0fb      	beq.n	1aaa4 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   1aaac:	2300      	movs	r3, #0
   1aaae:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1aab2:	4770      	bx	lr

0001aab4 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   1aab4:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   1aab6:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   1aab8:	780b      	ldrb	r3, [r1, #0]
   1aaba:	2b03      	cmp	r3, #3
   1aabc:	d80c      	bhi.n	1aad8 <hal_spi_config_slave+0x24>
   1aabe:	e8df f003 	tbb	[pc, r3]
   1aac2:	0e02      	.short	0x0e02
   1aac4:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1aac6:	2300      	movs	r3, #0
    rc = 0;
   1aac8:	4618      	mov	r0, r3
   1aaca:	e00a      	b.n	1aae2 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1aacc:	2304      	movs	r3, #4
    rc = 0;
   1aace:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   1aad0:	e007      	b.n	1aae2 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1aad2:	2306      	movs	r3, #6
    rc = 0;
   1aad4:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   1aad6:	e004      	b.n	1aae2 <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   1aad8:	2300      	movs	r3, #0
            rc = EINVAL;
   1aada:	2016      	movs	r0, #22
            break;
   1aadc:	e001      	b.n	1aae2 <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1aade:	2302      	movs	r3, #2
    rc = 0;
   1aae0:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1aae2:	784c      	ldrb	r4, [r1, #1]
   1aae4:	2c01      	cmp	r4, #1
   1aae6:	d006      	beq.n	1aaf6 <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   1aae8:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   1aaec:	788b      	ldrb	r3, [r1, #2]
   1aaee:	b92b      	cbnz	r3, 1aafc <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   1aaf0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1aaf4:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1aaf6:	f043 0301 	orr.w	r3, r3, #1
   1aafa:	e7f5      	b.n	1aae8 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   1aafc:	2016      	movs	r0, #22
    return rc;
   1aafe:	e7f7      	b.n	1aaf0 <hal_spi_config_slave+0x3c>

0001ab00 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   1ab00:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1ab02:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   1ab04:	2501      	movs	r5, #1
   1ab06:	409d      	lsls	r5, r3
   1ab08:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1ab0c:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   1ab10:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ab14:	2503      	movs	r5, #3
   1ab16:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   1ab1a:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   1ab1c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ab20:	2500      	movs	r5, #0
   1ab22:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1ab26:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   1ab28:	780c      	ldrb	r4, [r1, #0]
   1ab2a:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   1ab2e:	784c      	ldrb	r4, [r1, #1]
   1ab30:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   1ab34:	7889      	ldrb	r1, [r1, #2]
   1ab36:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1ab3a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ab3e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1ab42:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ab46:	4919      	ldr	r1, [pc, #100]	; (1abac <hal_spi_init_master+0xac>)
   1ab48:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ab4a:	3310      	adds	r3, #16
   1ab4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   1ab50:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1ab54:	42ab      	cmp	r3, r5
   1ab56:	db22      	blt.n	1ab9e <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ab58:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1ab5c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1ab60:	22e0      	movs	r2, #224	; 0xe0
   1ab62:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1ab66:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1ab6a:	2b00      	cmp	r3, #0
   1ab6c:	db08      	blt.n	1ab80 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ab6e:	f003 011f 	and.w	r1, r3, #31
   1ab72:	095b      	lsrs	r3, r3, #5
   1ab74:	2201      	movs	r2, #1
   1ab76:	408a      	lsls	r2, r1
   1ab78:	3360      	adds	r3, #96	; 0x60
   1ab7a:	490d      	ldr	r1, [pc, #52]	; (1abb0 <hal_spi_init_master+0xb0>)
   1ab7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   1ab80:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1ab84:	2b00      	cmp	r3, #0
   1ab86:	db07      	blt.n	1ab98 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ab88:	f003 011f 	and.w	r1, r3, #31
   1ab8c:	095b      	lsrs	r3, r3, #5
   1ab8e:	2201      	movs	r2, #1
   1ab90:	408a      	lsls	r2, r1
   1ab92:	4907      	ldr	r1, [pc, #28]	; (1abb0 <hal_spi_init_master+0xb0>)
   1ab94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   1ab98:	2000      	movs	r0, #0
   1ab9a:	bc30      	pop	{r4, r5}
   1ab9c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ab9e:	f003 030f 	and.w	r3, r3, #15
   1aba2:	4a04      	ldr	r2, [pc, #16]	; (1abb4 <hal_spi_init_master+0xb4>)
   1aba4:	441a      	add	r2, r3
   1aba6:	23e0      	movs	r3, #224	; 0xe0
   1aba8:	7613      	strb	r3, [r2, #24]
   1abaa:	e7dc      	b.n	1ab66 <hal_spi_init_master+0x66>
   1abac:	e000ed00 	.word	0xe000ed00
   1abb0:	e000e100 	.word	0xe000e100
   1abb4:	e000ecfc 	.word	0xe000ecfc

0001abb8 <hal_spi_config_master>:
{
   1abb8:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   1abba:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   1abbc:	680c      	ldr	r4, [r1, #0]
   1abbe:	684b      	ldr	r3, [r1, #4]
   1abc0:	6084      	str	r4, [r0, #8]
   1abc2:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1abc4:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   1abc8:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   1abcc:	7808      	ldrb	r0, [r1, #0]
   1abce:	2801      	cmp	r0, #1
   1abd0:	d916      	bls.n	1ac00 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1abd2:	2001      	movs	r0, #1
   1abd4:	4098      	lsls	r0, r3
   1abd6:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1abda:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   1abde:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1abe2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1abe6:	2403      	movs	r4, #3
   1abe8:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   1abec:	788b      	ldrb	r3, [r1, #2]
   1abee:	b973      	cbnz	r3, 1ac0e <hal_spi_config_master+0x56>
    rc = 0;
   1abf0:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1abf2:	780b      	ldrb	r3, [r1, #0]
   1abf4:	2b03      	cmp	r3, #3
   1abf6:	d812      	bhi.n	1ac1e <hal_spi_config_master+0x66>
   1abf8:	e8df f003 	tbb	[pc, r3]
   1abfc:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   1ac00:	2001      	movs	r0, #1
   1ac02:	4098      	lsls	r0, r3
   1ac04:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1ac08:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   1ac0c:	e7e7      	b.n	1abde <hal_spi_config_master+0x26>
            rc = EINVAL;
   1ac0e:	2016      	movs	r0, #22
   1ac10:	e7ef      	b.n	1abf2 <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1ac12:	2300      	movs	r3, #0
   1ac14:	e007      	b.n	1ac26 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1ac16:	2304      	movs	r3, #4
            break;
   1ac18:	e005      	b.n	1ac26 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1ac1a:	2306      	movs	r3, #6
            break;
   1ac1c:	e003      	b.n	1ac26 <hal_spi_config_master+0x6e>
            nrf_config = 0;
   1ac1e:	2300      	movs	r3, #0
            rc = EINVAL;
   1ac20:	2016      	movs	r0, #22
            break;
   1ac22:	e000      	b.n	1ac26 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1ac24:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1ac26:	784c      	ldrb	r4, [r1, #1]
   1ac28:	2c01      	cmp	r4, #1
   1ac2a:	d010      	beq.n	1ac4e <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   1ac2c:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   1ac30:	684b      	ldr	r3, [r1, #4]
   1ac32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1ac36:	d023      	beq.n	1ac80 <hal_spi_config_master+0xc8>
   1ac38:	d80c      	bhi.n	1ac54 <hal_spi_config_master+0x9c>
   1ac3a:	2bfa      	cmp	r3, #250	; 0xfa
   1ac3c:	d029      	beq.n	1ac92 <hal_spi_config_master+0xda>
   1ac3e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1ac42:	d01a      	beq.n	1ac7a <hal_spi_config_master+0xc2>
   1ac44:	2b7d      	cmp	r3, #125	; 0x7d
   1ac46:	d011      	beq.n	1ac6c <hal_spi_config_master+0xb4>
            frequency = 0;
   1ac48:	2300      	movs	r3, #0
            rc = EINVAL;
   1ac4a:	2016      	movs	r0, #22
            break;
   1ac4c:	e010      	b.n	1ac70 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   1ac4e:	f043 0301 	orr.w	r3, r3, #1
   1ac52:	e7eb      	b.n	1ac2c <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   1ac54:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   1ac58:	d015      	beq.n	1ac86 <hal_spi_config_master+0xce>
   1ac5a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   1ac5e:	d015      	beq.n	1ac8c <hal_spi_config_master+0xd4>
   1ac60:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1ac64:	d1f0      	bne.n	1ac48 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1ac66:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   1ac6a:	e001      	b.n	1ac70 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   1ac6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   1ac70:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   1ac74:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ac78:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   1ac7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   1ac7e:	e7f7      	b.n	1ac70 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1ac80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   1ac84:	e7f4      	b.n	1ac70 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   1ac86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   1ac8a:	e7f1      	b.n	1ac70 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   1ac8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   1ac90:	e7ee      	b.n	1ac70 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   1ac92:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1ac96:	e7eb      	b.n	1ac70 <hal_spi_config_master+0xb8>

0001ac98 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ac98:	2803      	cmp	r0, #3
   1ac9a:	dc10      	bgt.n	1acbe <hal_spi_config+0x26>
{
   1ac9c:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ac9e:	4b0b      	ldr	r3, [pc, #44]	; (1accc <hal_spi_config+0x34>)
   1aca0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1aca4:	b168      	cbz	r0, 1acc2 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1aca6:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   1aca8:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1acac:	b95b      	cbnz	r3, 1acc6 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1acae:	7803      	ldrb	r3, [r0, #0]
   1acb0:	b113      	cbz	r3, 1acb8 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   1acb2:	f7ff feff 	bl	1aab4 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   1acb6:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   1acb8:	f7ff ff7e 	bl	1abb8 <hal_spi_config_master>
   1acbc:	e7fb      	b.n	1acb6 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1acbe:	2016      	movs	r0, #22
}
   1acc0:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1acc2:	2016      	movs	r0, #22
   1acc4:	e7f7      	b.n	1acb6 <hal_spi_config+0x1e>
        return -1;
   1acc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1acca:	e7f4      	b.n	1acb6 <hal_spi_config+0x1e>
   1accc:	00029600 	.word	0x00029600

0001acd0 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1acd0:	2803      	cmp	r0, #3
   1acd2:	dc1b      	bgt.n	1ad0c <hal_spi_enable+0x3c>
   1acd4:	4b10      	ldr	r3, [pc, #64]	; (1ad18 <hal_spi_enable+0x48>)
   1acd6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1acda:	b1cb      	cbz	r3, 1ad10 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1acdc:	781a      	ldrb	r2, [r3, #0]
   1acde:	b17a      	cbz	r2, 1ad00 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   1ace0:	6a1a      	ldr	r2, [r3, #32]
   1ace2:	b1ba      	cbz	r2, 1ad14 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   1ace4:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   1ace6:	2000      	movs	r0, #0
   1ace8:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1acec:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1acf0:	f240 4202 	movw	r2, #1026	; 0x402
   1acf4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   1acf8:	2202      	movs	r2, #2
   1acfa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1acfe:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   1ad00:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1ad02:	2201      	movs	r2, #1
   1ad04:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   1ad08:	2000      	movs	r0, #0
   1ad0a:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ad0c:	2016      	movs	r0, #22
   1ad0e:	4770      	bx	lr
   1ad10:	2016      	movs	r0, #22
   1ad12:	4770      	bx	lr
            rc = EINVAL;
   1ad14:	2016      	movs	r0, #22

err:
    return rc;
}
   1ad16:	4770      	bx	lr
   1ad18:	00029600 	.word	0x00029600

0001ad1c <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ad1c:	2803      	cmp	r0, #3
   1ad1e:	dc2a      	bgt.n	1ad76 <hal_spi_disable+0x5a>
{
   1ad20:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ad22:	4b17      	ldr	r3, [pc, #92]	; (1ad80 <hal_spi_disable+0x64>)
   1ad24:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1ad28:	b33c      	cbz	r4, 1ad7a <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1ad2a:	7823      	ldrb	r3, [r4, #0]
   1ad2c:	b9ab      	cbnz	r3, 1ad5a <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   1ad2e:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1ad30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ad34:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   1ad38:	7863      	ldrb	r3, [r4, #1]
   1ad3a:	b943      	cbnz	r3, 1ad4e <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   1ad3c:	2300      	movs	r3, #0
   1ad3e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1ad42:	2000      	movs	r0, #0
   1ad44:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1ad46:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   1ad48:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   1ad4a:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   1ad4c:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   1ad4e:	4628      	mov	r0, r5
   1ad50:	f7ff fea6 	bl	1aaa0 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   1ad54:	2300      	movs	r3, #0
   1ad56:	7063      	strb	r3, [r4, #1]
   1ad58:	e7f0      	b.n	1ad3c <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   1ad5a:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1ad5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ad60:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   1ad64:	2300      	movs	r3, #0
   1ad66:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1ad6a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1ad6e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1ad72:	70e3      	strb	r3, [r4, #3]
   1ad74:	e7e5      	b.n	1ad42 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ad76:	2016      	movs	r0, #22
}
   1ad78:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ad7a:	2016      	movs	r0, #22
    return rc;
   1ad7c:	e7e6      	b.n	1ad4c <hal_spi_disable+0x30>
   1ad7e:	bf00      	nop
   1ad80:	00029600 	.word	0x00029600

0001ad84 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ad84:	2803      	cmp	r0, #3
   1ad86:	dc21      	bgt.n	1adcc <hal_spi_init+0x48>
{
   1ad88:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ad8a:	4b15      	ldr	r3, [pc, #84]	; (1ade0 <hal_spi_init+0x5c>)
   1ad8c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1ad90:	b1f4      	cbz	r4, 1add0 <hal_spi_init+0x4c>
    if (cfg == NULL) {
   1ad92:	b1f9      	cbz	r1, 1add4 <hal_spi_init+0x50>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   1ad94:	2a01      	cmp	r2, #1
   1ad96:	d81f      	bhi.n	1add8 <hal_spi_init+0x54>
    spi->spi_type = spi_type;
   1ad98:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   1ad9a:	b9f8      	cbnz	r0, 1addc <hal_spi_init+0x58>
   1ad9c:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1ad9e:	2303      	movs	r3, #3
   1ada0:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1ada2:	b94a      	cbnz	r2, 1adb8 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   1ada4:	4b0f      	ldr	r3, [pc, #60]	; (1ade4 <hal_spi_init+0x60>)
   1ada6:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   1ada8:	f7ff ffb8 	bl	1ad1c <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   1adac:	4a0e      	ldr	r2, [pc, #56]	; (1ade8 <hal_spi_init+0x64>)
   1adae:	4629      	mov	r1, r5
   1adb0:	4620      	mov	r0, r4
   1adb2:	f7ff fea5 	bl	1ab00 <hal_spi_init_master>
   1adb6:	e010      	b.n	1adda <hal_spi_init+0x56>
            assert(0);
   1adb8:	f7ed fa02 	bl	81c0 <hal_debugger_connected>
   1adbc:	b100      	cbz	r0, 1adc0 <hal_spi_init+0x3c>
   1adbe:	be01      	bkpt	0x0001
   1adc0:	2300      	movs	r3, #0
   1adc2:	461a      	mov	r2, r3
   1adc4:	4619      	mov	r1, r3
   1adc6:	4618      	mov	r0, r3
   1adc8:	f7ee fe02 	bl	99d0 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1adcc:	2016      	movs	r0, #22
}
   1adce:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1add0:	2016      	movs	r0, #22
   1add2:	e002      	b.n	1adda <hal_spi_init+0x56>
    rc = EINVAL;
   1add4:	2016      	movs	r0, #22
   1add6:	e000      	b.n	1adda <hal_spi_init+0x56>
   1add8:	2016      	movs	r0, #22
}
   1adda:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   1addc:	2016      	movs	r0, #22
    return (rc);
   1adde:	e7fc      	b.n	1adda <hal_spi_init+0x56>
   1ade0:	00029600 	.word	0x00029600
   1ade4:	40003000 	.word	0x40003000
   1ade8:	0001aa89 	.word	0x0001aa89

0001adec <hal_spi_tx_val>:
    int rc;
    uint16_t retval;
    NRF_SPI_Type *spi;
    struct nrf52_hal_spi *hal_spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   1adec:	2803      	cmp	r0, #3
   1adee:	dc17      	bgt.n	1ae20 <hal_spi_tx_val+0x34>
   1adf0:	4b0f      	ldr	r3, [pc, #60]	; (1ae30 <hal_spi_tx_val+0x44>)
   1adf2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1adf6:	b1ab      	cbz	r3, 1ae24 <hal_spi_tx_val+0x38>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1adf8:	781a      	ldrb	r2, [r3, #0]
   1adfa:	b9aa      	cbnz	r2, 1ae28 <hal_spi_tx_val+0x3c>
        spi = (NRF_SPI_Type *)hal_spi->nhs_spi.spim;
   1adfc:	691a      	ldr	r2, [r3, #16]
        spi->EVENTS_READY = 0;
   1adfe:	2300      	movs	r3, #0
   1ae00:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        spi->TXD = (uint8_t)val;
   1ae04:	b2c9      	uxtb	r1, r1
   1ae06:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
        while (!spi->EVENTS_READY) {}
   1ae0a:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   1ae0e:	2b00      	cmp	r3, #0
   1ae10:	d0fb      	beq.n	1ae0a <hal_spi_tx_val+0x1e>
        spi->EVENTS_READY = 0;
   1ae12:	2300      	movs	r3, #0
   1ae14:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        retval = (uint16_t)spi->RXD;
   1ae18:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1ae1c:	b280      	uxth	r0, r0
   1ae1e:	4770      	bx	lr
    }

    return retval;

err:
    return rc;
   1ae20:	2016      	movs	r0, #22
   1ae22:	4770      	bx	lr
   1ae24:	2016      	movs	r0, #22
   1ae26:	4770      	bx	lr
        retval = 0xFFFF;
   1ae28:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   1ae2c:	4770      	bx	lr
   1ae2e:	bf00      	nop
   1ae30:	00029600 	.word	0x00029600

0001ae34 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ae34:	2803      	cmp	r0, #3
   1ae36:	dc0a      	bgt.n	1ae4e <hal_spi_set_txrx_cb+0x1a>
   1ae38:	4b08      	ldr	r3, [pc, #32]	; (1ae5c <hal_spi_set_txrx_cb+0x28>)
   1ae3a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1ae3e:	b143      	cbz	r3, 1ae52 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1ae40:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1ae42:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1ae46:	b930      	cbnz	r0, 1ae56 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   1ae48:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   1ae4a:	625a      	str	r2, [r3, #36]	; 0x24
   1ae4c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ae4e:	2016      	movs	r0, #22
   1ae50:	4770      	bx	lr
   1ae52:	2016      	movs	r0, #22
   1ae54:	4770      	bx	lr
        rc = -1;
   1ae56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   1ae5a:	4770      	bx	lr
   1ae5c:	00029600 	.word	0x00029600

0001ae60 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   1ae60:	2b00      	cmp	r3, #0
   1ae62:	d046      	beq.n	1aef2 <hal_spi_txrx+0x92>
{
   1ae64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ae66:	460d      	mov	r5, r1
   1ae68:	4617      	mov	r7, r2
   1ae6a:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   1ae6c:	2803      	cmp	r0, #3
   1ae6e:	dc42      	bgt.n	1aef6 <hal_spi_txrx+0x96>
   1ae70:	4b25      	ldr	r3, [pc, #148]	; (1af08 <hal_spi_txrx+0xa8>)
   1ae72:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1ae76:	2b00      	cmp	r3, #0
   1ae78:	d03f      	beq.n	1aefa <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1ae7a:	781a      	ldrb	r2, [r3, #0]
   1ae7c:	2a00      	cmp	r2, #0
   1ae7e:	d13e      	bne.n	1aefe <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1ae80:	2900      	cmp	r1, #0
   1ae82:	d03e      	beq.n	1af02 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   1ae84:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   1ae86:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   1ae8a:	2b07      	cmp	r3, #7
   1ae8c:	d004      	beq.n	1ae98 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   1ae8e:	b95b      	cbnz	r3, 1aea8 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1ae90:	2301      	movs	r3, #1
   1ae92:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1ae96:	e007      	b.n	1aea8 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   1ae98:	f7ff ff40 	bl	1ad1c <hal_spi_disable>
   1ae9c:	e7f8      	b.n	1ae90 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   1ae9e:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1aea2:	2300      	movs	r3, #0
   1aea4:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   1aea8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1aeac:	2b00      	cmp	r3, #0
   1aeae:	d1f6      	bne.n	1ae9e <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1aeb0:	782b      	ldrb	r3, [r5, #0]
   1aeb2:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   1aeb6:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   1aeb8:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   1aeba:	2200      	movs	r2, #0
   1aebc:	e00d      	b.n	1aeda <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   1aebe:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1aec2:	2b00      	cmp	r3, #0
   1aec4:	d0fb      	beq.n	1aebe <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   1aec6:	2300      	movs	r3, #0
   1aec8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   1aecc:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   1aed0:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1aed2:	b10f      	cbz	r7, 1aed8 <hal_spi_txrx+0x78>
                *rxd = rxval;
   1aed4:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   1aed8:	3201      	adds	r2, #1
   1aeda:	42b2      	cmp	r2, r6
   1aedc:	da07      	bge.n	1aeee <hal_spi_txrx+0x8e>
            if (txcnt) {
   1aede:	2900      	cmp	r1, #0
   1aee0:	d0ed      	beq.n	1aebe <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   1aee2:	786b      	ldrb	r3, [r5, #1]
   1aee4:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   1aee8:	3901      	subs	r1, #1
                ++txd;
   1aeea:	3501      	adds	r5, #1
   1aeec:	e7e7      	b.n	1aebe <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1aeee:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1aef0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1aef2:	2016      	movs	r0, #22
}
   1aef4:	4770      	bx	lr
    return rc;
   1aef6:	2016      	movs	r0, #22
   1aef8:	e7fa      	b.n	1aef0 <hal_spi_txrx+0x90>
   1aefa:	2016      	movs	r0, #22
   1aefc:	e7f8      	b.n	1aef0 <hal_spi_txrx+0x90>
   1aefe:	2016      	movs	r0, #22
   1af00:	e7f6      	b.n	1aef0 <hal_spi_txrx+0x90>
   1af02:	2016      	movs	r0, #22
   1af04:	e7f4      	b.n	1aef0 <hal_spi_txrx+0x90>
   1af06:	bf00      	nop
   1af08:	00029600 	.word	0x00029600

0001af0c <nrf52_periph_create_timers>:
static struct temperature_dev os_bsp_temp;
#endif

static void
nrf52_periph_create_timers(void)
{
   1af0c:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TIMER_4)
    rc = hal_timer_init(4, NULL);
    assert(rc == 0);
#endif
#if MYNEWT_VAL(TIMER_5)
    rc = hal_timer_init(5, NULL);
   1af0e:	2100      	movs	r1, #0
   1af10:	2005      	movs	r0, #5
   1af12:	f000 fa5d 	bl	1b3d0 <hal_timer_init>
    assert(rc == 0);
   1af16:	b928      	cbnz	r0, 1af24 <nrf52_periph_create_timers+0x18>
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1af18:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1af1c:	f000 fef1 	bl	1bd02 <os_cputime_init>
    assert(rc == 0);
   1af20:	b950      	cbnz	r0, 1af38 <nrf52_periph_create_timers+0x2c>
#endif
}
   1af22:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1af24:	f7ed f94c 	bl	81c0 <hal_debugger_connected>
   1af28:	b100      	cbz	r0, 1af2c <nrf52_periph_create_timers+0x20>
   1af2a:	be01      	bkpt	0x0001
   1af2c:	2300      	movs	r3, #0
   1af2e:	461a      	mov	r2, r3
   1af30:	4619      	mov	r1, r3
   1af32:	4618      	mov	r0, r3
   1af34:	f7ee fd4c 	bl	99d0 <__assert_func>
    assert(rc == 0);
   1af38:	f7ed f942 	bl	81c0 <hal_debugger_connected>
   1af3c:	b100      	cbz	r0, 1af40 <nrf52_periph_create_timers+0x34>
   1af3e:	be01      	bkpt	0x0001
   1af40:	2300      	movs	r3, #0
   1af42:	461a      	mov	r2, r3
   1af44:	4619      	mov	r1, r3
   1af46:	4618      	mov	r0, r3
   1af48:	f7ee fd42 	bl	99d0 <__assert_func>

0001af4c <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1af4c:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1af4e:	4908      	ldr	r1, [pc, #32]	; (1af70 <nrf52_periph_create_i2c+0x24>)
   1af50:	2001      	movs	r0, #1
   1af52:	f000 f8d5 	bl	1b100 <hal_i2c_init>
    assert(rc == 0);
   1af56:	b900      	cbnz	r0, 1af5a <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1af58:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1af5a:	f7ed f931 	bl	81c0 <hal_debugger_connected>
   1af5e:	b100      	cbz	r0, 1af62 <nrf52_periph_create_i2c+0x16>
   1af60:	be01      	bkpt	0x0001
   1af62:	2300      	movs	r3, #0
   1af64:	461a      	mov	r2, r3
   1af66:	4619      	mov	r1, r3
   1af68:	4618      	mov	r0, r3
   1af6a:	f7ee fd31 	bl	99d0 <__assert_func>
   1af6e:	bf00      	nop
   1af70:	00029610 	.word	0x00029610

0001af74 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1af74:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1af76:	2200      	movs	r2, #0
   1af78:	4907      	ldr	r1, [pc, #28]	; (1af98 <nrf52_periph_create_spi+0x24>)
   1af7a:	4610      	mov	r0, r2
   1af7c:	f7ff ff02 	bl	1ad84 <hal_spi_init>
    assert(rc == 0);
   1af80:	b900      	cbnz	r0, 1af84 <nrf52_periph_create_spi+0x10>
#else
    rc = hal_spi_init(3, (void *)&os_bsp_spi3m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
#endif
}
   1af82:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1af84:	f7ed f91c 	bl	81c0 <hal_debugger_connected>
   1af88:	b100      	cbz	r0, 1af8c <nrf52_periph_create_spi+0x18>
   1af8a:	be01      	bkpt	0x0001
   1af8c:	2300      	movs	r3, #0
   1af8e:	461a      	mov	r2, r3
   1af90:	4619      	mov	r1, r3
   1af92:	4618      	mov	r0, r3
   1af94:	f7ee fd1c 	bl	99d0 <__assert_func>
   1af98:	0002961c 	.word	0x0002961c

0001af9c <nrf52_periph_create>:
#endif
}

void
nrf52_periph_create(void)
{
   1af9c:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1af9e:	f7ff ffb5 	bl	1af0c <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1afa2:	f7ff ffd3 	bl	1af4c <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1afa6:	f7ff ffe5 	bl	1af74 <nrf52_periph_create_spi>
    nrf52_periph_create_temp();
}
   1afaa:	bd08      	pop	{r3, pc}

0001afac <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   1afac:	3801      	subs	r0, #1
   1afae:	bf00      	nop
   1afb0:	bf00      	nop
   1afb2:	bf00      	nop
   1afb4:	bf00      	nop
   1afb6:	bf00      	nop
   1afb8:	bf00      	nop
   1afba:	bf00      	nop
   1afbc:	bf00      	nop
   1afbe:	bf00      	nop
   1afc0:	bf00      	nop
   1afc2:	bf00      	nop
   1afc4:	bf00      	nop
   1afc6:	bf00      	nop
   1afc8:	bf00      	nop
   1afca:	bf00      	nop
   1afcc:	bf00      	nop
   1afce:	bf00      	nop
   1afd0:	bf00      	nop
   1afd2:	bf00      	nop
   1afd4:	bf00      	nop
   1afd6:	bf00      	nop
   1afd8:	bf00      	nop
   1afda:	bf00      	nop
   1afdc:	bf00      	nop
   1afde:	bf00      	nop
   1afe0:	bf00      	nop
   1afe2:	bf00      	nop
   1afe4:	bf00      	nop
   1afe6:	bf00      	nop
   1afe8:	bf00      	nop
   1afea:	bf00      	nop
   1afec:	bf00      	nop
   1afee:	bf00      	nop
   1aff0:	bf00      	nop
   1aff2:	bf00      	nop
   1aff4:	bf00      	nop
   1aff6:	bf00      	nop
   1aff8:	bf00      	nop
   1affa:	bf00      	nop
   1affc:	bf00      	nop
   1affe:	bf00      	nop
   1b000:	bf00      	nop
   1b002:	bf00      	nop
   1b004:	bf00      	nop
   1b006:	bf00      	nop
   1b008:	bf00      	nop
   1b00a:	bf00      	nop
   1b00c:	bf00      	nop
   1b00e:	bf00      	nop
   1b010:	bf00      	nop
   1b012:	bf00      	nop
   1b014:	bf00      	nop
   1b016:	bf00      	nop
   1b018:	bf00      	nop
   1b01a:	bf00      	nop
   1b01c:	bf00      	nop
   1b01e:	bf00      	nop
   1b020:	bf00      	nop
   1b022:	d1c3      	bne.n	1afac <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   1b024:	4770      	bx	lr
	...

0001b028 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   1b028:	2801      	cmp	r0, #1
   1b02a:	d806      	bhi.n	1b03a <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   1b02c:	4b06      	ldr	r3, [pc, #24]	; (1b048 <hal_i2c_resolve+0x20>)
   1b02e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b032:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   1b034:	b12b      	cbz	r3, 1b042 <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   1b036:	2000      	movs	r0, #0
}
   1b038:	4770      	bx	lr
        *out_i2c = NULL;
   1b03a:	2300      	movs	r3, #0
   1b03c:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   1b03e:	2002      	movs	r0, #2
   1b040:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   1b042:	2002      	movs	r0, #2
   1b044:	4770      	bx	lr
   1b046:	bf00      	nop
   1b048:	00029620 	.word	0x00029620

0001b04c <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   1b04c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b050:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   1b054:	fa23 f000 	lsr.w	r0, r3, r0
}
   1b058:	f000 0001 	and.w	r0, r0, #1
   1b05c:	4770      	bx	lr

0001b05e <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   1b05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b062:	4605      	mov	r5, r0
   1b064:	460e      	mov	r6, r1
    sda_port = HAL_GPIO_PORT(sda_pin);
    scl_pin_ix = HAL_GPIO_INDEX(scl_pin);
    sda_pin_ix = HAL_GPIO_INDEX(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin_ix] = NRF52_SCL_PIN_CONF;
   1b066:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1b06a:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   1b06e:	f240 630c 	movw	r3, #1548	; 0x60c
   1b072:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin_ix] = NRF52_SDA_PIN_CONF;
   1b076:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   1b07a:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   1b07e:	2101      	movs	r1, #1
   1b080:	f7ff fb93 	bl	1a7aa <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   1b084:	2101      	movs	r1, #1
   1b086:	4630      	mov	r0, r6
   1b088:	f7ff fb8f 	bl	1a7aa <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin_ix] = NRF52_SCL_PIN_CONF_CLR;
   1b08c:	f240 630d 	movw	r3, #1549	; 0x60d
   1b090:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin_ix] = NRF52_SDA_PIN_CONF_CLR;
   1b094:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   1b098:	2004      	movs	r0, #4
   1b09a:	f7ff ff87 	bl	1afac <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   1b09e:	2400      	movs	r4, #0
   1b0a0:	2c08      	cmp	r4, #8
   1b0a2:	dc14      	bgt.n	1b0ce <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   1b0a4:	4630      	mov	r0, r6
   1b0a6:	f7ff ffd1 	bl	1b04c <read_gpio_inbuffer>
   1b0aa:	b978      	cbnz	r0, 1b0cc <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   1b0ac:	2100      	movs	r1, #0
   1b0ae:	4628      	mov	r0, r5
   1b0b0:	f7ff fb7b 	bl	1a7aa <hal_gpio_write>
        hal_i2c_delay_us(4);
   1b0b4:	2004      	movs	r0, #4
   1b0b6:	f7ff ff79 	bl	1afac <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   1b0ba:	2101      	movs	r1, #1
   1b0bc:	4628      	mov	r0, r5
   1b0be:	f7ff fb74 	bl	1a7aa <hal_gpio_write>
        hal_i2c_delay_us(4);
   1b0c2:	2004      	movs	r0, #4
   1b0c4:	f7ff ff72 	bl	1afac <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   1b0c8:	3401      	adds	r4, #1
   1b0ca:	e7e9      	b.n	1b0a0 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   1b0cc:	b154      	cbz	r4, 1b0e4 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   1b0ce:	2100      	movs	r1, #0
   1b0d0:	4630      	mov	r0, r6
   1b0d2:	f7ff fb6a 	bl	1a7aa <hal_gpio_write>
    hal_i2c_delay_us(4);
   1b0d6:	2004      	movs	r0, #4
   1b0d8:	f7ff ff68 	bl	1afac <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   1b0dc:	2101      	movs	r1, #1
   1b0de:	4630      	mov	r0, r6
   1b0e0:	f7ff fb63 	bl	1a7aa <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin_ix] = NRF52_SCL_PIN_CONF;
   1b0e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b0e8:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1b0ec:	f240 620c 	movw	r2, #1548	; 0x60c
   1b0f0:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin_ix] = NRF52_SDA_PIN_CONF;
   1b0f4:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1b0f8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1b0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b100 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   1b100:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b102:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   1b104:	b1a9      	cbz	r1, 1b132 <hal_i2c_init+0x32>
   1b106:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1b108:	a901      	add	r1, sp, #4
   1b10a:	f7ff ff8d 	bl	1b028 <hal_i2c_resolve>
    if (rc != 0) {
   1b10e:	4606      	mov	r6, r0
   1b110:	2800      	cmp	r0, #0
   1b112:	d139      	bne.n	1b188 <hal_i2c_init+0x88>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   1b114:	9b01      	ldr	r3, [sp, #4]
   1b116:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   1b118:	68a3      	ldr	r3, [r4, #8]
   1b11a:	2bfa      	cmp	r3, #250	; 0xfa
   1b11c:	d039      	beq.n	1b192 <hal_i2c_init+0x92>
   1b11e:	d912      	bls.n	1b146 <hal_i2c_init+0x46>
   1b120:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   1b124:	d033      	beq.n	1b18e <hal_i2c_init+0x8e>
   1b126:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   1b12a:	d135      	bne.n	1b198 <hal_i2c_init+0x98>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   1b12c:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   1b130:	e00d      	b.n	1b14e <hal_i2c_init+0x4e>
    assert(usercfg != NULL);
   1b132:	f7ed f845 	bl	81c0 <hal_debugger_connected>
   1b136:	b100      	cbz	r0, 1b13a <hal_i2c_init+0x3a>
   1b138:	be01      	bkpt	0x0001
   1b13a:	2300      	movs	r3, #0
   1b13c:	461a      	mov	r2, r3
   1b13e:	4619      	mov	r1, r3
   1b140:	4618      	mov	r0, r3
   1b142:	f7ee fc45 	bl	99d0 <__assert_func>
    switch (cfg->i2c_frequency) {
   1b146:	2b64      	cmp	r3, #100	; 0x64
   1b148:	d126      	bne.n	1b198 <hal_i2c_init+0x98>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   1b14a:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   1b14e:	6861      	ldr	r1, [r4, #4]
   1b150:	6820      	ldr	r0, [r4, #0]
   1b152:	f7ff ff84 	bl	1b05e <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   1b156:	6823      	ldr	r3, [r4, #0]
   1b158:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1b15c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b160:	f240 610c 	movw	r1, #1548	; 0x60c
   1b164:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   1b168:	6863      	ldr	r3, [r4, #4]
   1b16a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b16e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   1b172:	6823      	ldr	r3, [r4, #0]
   1b174:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   1b178:	6863      	ldr	r3, [r4, #4]
   1b17a:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   1b17e:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1b182:	2305      	movs	r3, #5
   1b184:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   1b188:	4630      	mov	r0, r6
   1b18a:	b003      	add	sp, #12
   1b18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   1b18e:	4f03      	ldr	r7, [pc, #12]	; (1b19c <hal_i2c_init+0x9c>)
        break;
   1b190:	e7dd      	b.n	1b14e <hal_i2c_init+0x4e>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   1b192:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   1b196:	e7da      	b.n	1b14e <hal_i2c_init+0x4e>
        rc = HAL_I2C_ERR_INVAL;
   1b198:	2602      	movs	r6, #2
   1b19a:	e7f5      	b.n	1b188 <hal_i2c_init+0x88>
   1b19c:	06147ae9 	.word	0x06147ae9

0001b1a0 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1b1a0:	2301      	movs	r3, #1
   1b1a2:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1b1a4:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1b1a8:	4770      	bx	lr
	...

0001b1ac <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1b1ac:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1b1ae:	7883      	ldrb	r3, [r0, #2]
   1b1b0:	2b00      	cmp	r3, #0
   1b1b2:	d050      	beq.n	1b256 <nrf_timer_set_ocmp+0xaa>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1b1b4:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1b1b6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b1ba:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1b1be:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1b1c0:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1b1c4:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1b1c8:	b11d      	cbz	r5, 1b1d2 <nrf_timer_set_ocmp+0x26>
            temp += (1UL << 24);
   1b1ca:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1b1ce:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1b1d2:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1b1d4:	1acb      	subs	r3, r1, r3
         * to be handled differently. TICK event is used to have interrupt on
         * each subsequent tick so we won't miss any and in case we detected
         * mentioned extra tick during calculations, interrupt is triggered
         * immediately. Delta 0 or less means we should always fire immediately.
         */
        if (delta_t < 1) {
   1b1d6:	2b00      	cmp	r3, #0
   1b1d8:	dd17      	ble.n	1b20a <nrf_timer_set_ocmp+0x5e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        } else if (delta_t < 3) {
   1b1da:	2b02      	cmp	r3, #2
   1b1dc:	dc27      	bgt.n	1b22e <nrf_timer_set_ocmp+0x82>
            rtctimer->INTENSET = RTC_INTENSET_TICK_Msk;
   1b1de:	2301      	movs	r3, #1
   1b1e0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
            if (rtctimer->COUNTER != cntr) {
   1b1e4:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
   1b1e8:	42a3      	cmp	r3, r4
   1b1ea:	d02e      	beq.n	1b24a <nrf_timer_set_ocmp+0x9e>
                NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1b1ec:	7842      	ldrb	r2, [r0, #1]
   1b1ee:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1b1f0:	2b00      	cmp	r3, #0
   1b1f2:	db2a      	blt.n	1b24a <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b1f4:	f002 021f 	and.w	r2, r2, #31
   1b1f8:	095b      	lsrs	r3, r3, #5
   1b1fa:	2101      	movs	r1, #1
   1b1fc:	fa01 f202 	lsl.w	r2, r1, r2
   1b200:	3340      	adds	r3, #64	; 0x40
   1b202:	4926      	ldr	r1, [pc, #152]	; (1b29c <nrf_timer_set_ocmp+0xf0>)
   1b204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1b208:	e01f      	b.n	1b24a <nrf_timer_set_ocmp+0x9e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   1b20a:	2301      	movs	r3, #1
   1b20c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1b210:	7842      	ldrb	r2, [r0, #1]
   1b212:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1b214:	2b00      	cmp	r3, #0
   1b216:	db18      	blt.n	1b24a <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b218:	f002 021f 	and.w	r2, r2, #31
   1b21c:	095b      	lsrs	r3, r3, #5
   1b21e:	2101      	movs	r1, #1
   1b220:	fa01 f202 	lsl.w	r2, r1, r2
   1b224:	3340      	adds	r3, #64	; 0x40
   1b226:	491d      	ldr	r1, [pc, #116]	; (1b29c <nrf_timer_set_ocmp+0xf0>)
   1b228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1b22c:	e00d      	b.n	1b24a <nrf_timer_set_ocmp+0x9e>
            }
        } else {
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   1b22e:	2001      	movs	r0, #1
   1b230:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308

            if (delta_t < (1UL << 24)) {
   1b234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1b238:	d208      	bcs.n	1b24c <nrf_timer_set_ocmp+0xa0>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1b23a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1b23e:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1b242:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b246:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1b24a:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1b24c:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1b250:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1b254:	e7f5      	b.n	1b242 <nrf_timer_set_ocmp+0x96>
   1b256:	460d      	mov	r5, r1
   1b258:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1b25a:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1b25c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1b260:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1b264:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1b268:	2200      	movs	r2, #0
   1b26a:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1b26e:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1b272:	f7ff ff95 	bl	1b1a0 <nrf_read_timer_cntr>
   1b276:	1b40      	subs	r0, r0, r5
   1b278:	2800      	cmp	r0, #0
   1b27a:	dbe6      	blt.n	1b24a <nrf_timer_set_ocmp+0x9e>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1b27c:	7862      	ldrb	r2, [r4, #1]
   1b27e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1b280:	2b00      	cmp	r3, #0
   1b282:	dbe2      	blt.n	1b24a <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b284:	f002 021f 	and.w	r2, r2, #31
   1b288:	095b      	lsrs	r3, r3, #5
   1b28a:	2101      	movs	r1, #1
   1b28c:	fa01 f202 	lsl.w	r2, r1, r2
   1b290:	3340      	adds	r3, #64	; 0x40
   1b292:	4902      	ldr	r1, [pc, #8]	; (1b29c <nrf_timer_set_ocmp+0xf0>)
   1b294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1b298:	e7d7      	b.n	1b24a <nrf_timer_set_ocmp+0x9e>
   1b29a:	bf00      	nop
   1b29c:	e000e100 	.word	0xe000e100

0001b2a0 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1b2a0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1b2a4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1b2a8:	4770      	bx	lr

0001b2aa <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1b2aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b2ae:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   1b2b2:	2301      	movs	r3, #1
   1b2b4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1b2b8:	4770      	bx	lr
	...

0001b2bc <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1b2bc:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1b2be:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b2c0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b2c4:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1b2c6:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1b2c8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1b2cc:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1b2d0:	b1ad      	cbz	r5, 1b2fe <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1b2d2:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1b2d6:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1b2d8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1b2dc:	2500      	movs	r5, #0
   1b2de:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1b2e2:	7840      	ldrb	r0, [r0, #1]
   1b2e4:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1b2e6:	42aa      	cmp	r2, r5
   1b2e8:	db09      	blt.n	1b2fe <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b2ea:	f000 001f 	and.w	r0, r0, #31
   1b2ee:	0952      	lsrs	r2, r2, #5
   1b2f0:	2501      	movs	r5, #1
   1b2f2:	fa05 f000 	lsl.w	r0, r5, r0
   1b2f6:	3240      	adds	r2, #64	; 0x40
   1b2f8:	4d04      	ldr	r5, [pc, #16]	; (1b30c <hal_timer_read_bsptimer+0x50>)
   1b2fa:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1b2fe:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1b302:	b904      	cbnz	r4, 1b306 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1b304:	b662      	cpsie	i

    return tcntr;
}
   1b306:	bc30      	pop	{r4, r5}
   1b308:	4770      	bx	lr
   1b30a:	bf00      	nop
   1b30c:	e000e100 	.word	0xe000e100

0001b310 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1b310:	b570      	push	{r4, r5, r6, lr}
   1b312:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b314:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b318:	b672      	cpsid	i
   1b31a:	e012      	b.n	1b342 <hal_timer_chk_queue+0x32>
    __HAL_DISABLE_INTERRUPTS(ctx);
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
        if (bsptimer->tmr_rtc) {
            tcntr = hal_timer_read_bsptimer(bsptimer);
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1b31c:	6928      	ldr	r0, [r5, #16]
   1b31e:	f7ff ff3f 	bl	1b1a0 <nrf_read_timer_cntr>
        }
        if ((int32_t)(tcntr - timer->expiry) >= 0) {
   1b322:	68e3      	ldr	r3, [r4, #12]
   1b324:	1ac0      	subs	r0, r0, r3
   1b326:	2800      	cmp	r0, #0
   1b328:	db17      	blt.n	1b35a <hal_timer_chk_queue+0x4a>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1b32a:	6923      	ldr	r3, [r4, #16]
   1b32c:	b193      	cbz	r3, 1b354 <hal_timer_chk_queue+0x44>
   1b32e:	6962      	ldr	r2, [r4, #20]
   1b330:	615a      	str	r2, [r3, #20]
   1b332:	6963      	ldr	r3, [r4, #20]
   1b334:	6922      	ldr	r2, [r4, #16]
   1b336:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1b338:	2300      	movs	r3, #0
   1b33a:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1b33c:	6863      	ldr	r3, [r4, #4]
   1b33e:	68a0      	ldr	r0, [r4, #8]
   1b340:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1b342:	696c      	ldr	r4, [r5, #20]
   1b344:	b14c      	cbz	r4, 1b35a <hal_timer_chk_queue+0x4a>
        if (bsptimer->tmr_rtc) {
   1b346:	78ab      	ldrb	r3, [r5, #2]
   1b348:	2b00      	cmp	r3, #0
   1b34a:	d0e7      	beq.n	1b31c <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1b34c:	4628      	mov	r0, r5
   1b34e:	f7ff ffb5 	bl	1b2bc <hal_timer_read_bsptimer>
   1b352:	e7e6      	b.n	1b322 <hal_timer_chk_queue+0x12>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1b354:	6963      	ldr	r3, [r4, #20]
   1b356:	61ab      	str	r3, [r5, #24]
   1b358:	e7eb      	b.n	1b332 <hal_timer_chk_queue+0x22>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1b35a:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1b35c:	b133      	cbz	r3, 1b36c <hal_timer_chk_queue+0x5c>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1b35e:	68d9      	ldr	r1, [r3, #12]
   1b360:	4628      	mov	r0, r5
   1b362:	f7ff ff23 	bl	1b1ac <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1b366:	b906      	cbnz	r6, 1b36a <hal_timer_chk_queue+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
   1b368:	b662      	cpsie	i
}
   1b36a:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1b36c:	78ab      	ldrb	r3, [r5, #2]
   1b36e:	b11b      	cbz	r3, 1b378 <hal_timer_chk_queue+0x68>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1b370:	6928      	ldr	r0, [r5, #16]
   1b372:	f7ff ff9a 	bl	1b2aa <nrf_rtc_disable_ocmp>
   1b376:	e7f6      	b.n	1b366 <hal_timer_chk_queue+0x56>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1b378:	6928      	ldr	r0, [r5, #16]
   1b37a:	f7ff ff91 	bl	1b2a0 <nrf_timer_disable_ocmp>
   1b37e:	e7f2      	b.n	1b366 <hal_timer_chk_queue+0x56>

0001b380 <hal_rtc_timer_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_5)
static void
hal_rtc_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1b380:	b510      	push	{r4, lr}
    NRF_RTC_Type *rtctimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1b382:	6904      	ldr	r4, [r0, #16]
    compare = rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT];
   1b384:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (compare) {
   1b388:	b113      	cbz	r3, 1b390 <hal_rtc_timer_irq_handler+0x10>
       rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT] = 0;
   1b38a:	2300      	movs	r3, #0
   1b38c:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    }

    tick = rtctimer->EVENTS_TICK;
   1b390:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    if (tick) {
   1b394:	b113      	cbz	r3, 1b39c <hal_rtc_timer_irq_handler+0x1c>
        rtctimer->EVENTS_TICK = 0;
   1b396:	2300      	movs	r3, #0
   1b398:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    }

    overflow = rtctimer->EVENTS_OVRFLW;
   1b39c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (overflow) {
   1b3a0:	b133      	cbz	r3, 1b3b0 <hal_rtc_timer_irq_handler+0x30>
        rtctimer->EVENTS_OVRFLW = 0;
   1b3a2:	2300      	movs	r3, #0
   1b3a4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        bsptimer->tmr_cntr += (1UL << 24);
   1b3a8:	6843      	ldr	r3, [r0, #4]
   1b3aa:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   1b3ae:	6043      	str	r3, [r0, #4]
    }

    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1b3b0:	6883      	ldr	r3, [r0, #8]
   1b3b2:	3301      	adds	r3, #1
   1b3b4:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    hal_timer_chk_queue(bsptimer);
   1b3b6:	f7ff ffab 	bl	1b310 <hal_timer_chk_queue>

    /* Recommended by nordic to make sure interrupts are cleared */
    compare = rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT];
   1b3ba:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148

    os_trace_isr_exit();
}
   1b3be:	bd10      	pop	{r4, pc}

0001b3c0 <nrf52_timer5_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_5)
void
nrf52_timer5_irq_handler(void)
{
   1b3c0:	b508      	push	{r3, lr}
    hal_rtc_timer_irq_handler(&nrf52_hal_timer5);
   1b3c2:	4802      	ldr	r0, [pc, #8]	; (1b3cc <nrf52_timer5_irq_handler+0xc>)
   1b3c4:	f7ff ffdc 	bl	1b380 <hal_rtc_timer_irq_handler>
}
   1b3c8:	bd08      	pop	{r3, pc}
   1b3ca:	bf00      	nop
   1b3cc:	2000809c 	.word	0x2000809c

0001b3d0 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b3d0:	2805      	cmp	r0, #5
   1b3d2:	dc20      	bgt.n	1b416 <hal_timer_init+0x46>
   1b3d4:	4b14      	ldr	r3, [pc, #80]	; (1b428 <hal_timer_init+0x58>)
   1b3d6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b3da:	b1f3      	cbz	r3, 1b41a <hal_timer_init+0x4a>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1b3dc:	781a      	ldrb	r2, [r3, #0]
   1b3de:	b9f2      	cbnz	r2, 1b41e <hal_timer_init+0x4e>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1b3e0:	2805      	cmp	r0, #5
   1b3e2:	d11e      	bne.n	1b422 <hal_timer_init+0x52>
#if MYNEWT_VAL(TIMER_5)
    case 5:
        irq_num = RTC0_IRQn;
        hwtimer = NRF_RTC0;
        irq_isr = nrf52_timer5_irq_handler;
        bsptimer->tmr_rtc = 1;
   1b3e4:	2201      	movs	r2, #1
   1b3e6:	709a      	strb	r2, [r3, #2]
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1b3e8:	4a10      	ldr	r2, [pc, #64]	; (1b42c <hal_timer_init+0x5c>)
   1b3ea:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1b3ec:	220b      	movs	r2, #11
   1b3ee:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b3f0:	4b0f      	ldr	r3, [pc, #60]	; (1b430 <hal_timer_init+0x60>)
   1b3f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b3f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1b3fa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b3fe:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b402:	22e0      	movs	r2, #224	; 0xe0
   1b404:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b408:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1b40c:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b40e:	4a09      	ldr	r2, [pc, #36]	; (1b434 <hal_timer_init+0x64>)
   1b410:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1b412:	2000      	movs	r0, #0
   1b414:	4770      	bx	lr

err:
    return rc;
   1b416:	2016      	movs	r0, #22
   1b418:	4770      	bx	lr
   1b41a:	2016      	movs	r0, #22
   1b41c:	4770      	bx	lr
   1b41e:	2016      	movs	r0, #22
   1b420:	4770      	bx	lr
   1b422:	2016      	movs	r0, #22
}
   1b424:	4770      	bx	lr
   1b426:	bf00      	nop
   1b428:	00029628 	.word	0x00029628
   1b42c:	4000b000 	.word	0x4000b000
   1b430:	e000e100 	.word	0xe000e100
   1b434:	0001b3c1 	.word	0x0001b3c1

0001b438 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b438:	2805      	cmp	r0, #5
   1b43a:	f300 8097 	bgt.w	1b56c <hal_timer_config+0x134>
{
   1b43e:	b430      	push	{r4, r5}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b440:	4b56      	ldr	r3, [pc, #344]	; (1b59c <hal_timer_config+0x164>)
   1b442:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1b446:	2c00      	cmp	r4, #0
   1b448:	f000 8092 	beq.w	1b570 <hal_timer_config+0x138>

#if MYNEWT_VAL(TIMER_5)
    if (timer_num == 5) {
   1b44c:	2805      	cmp	r0, #5
   1b44e:	d01d      	beq.n	1b48c <hal_timer_config+0x54>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1b450:	4b53      	ldr	r3, [pc, #332]	; (1b5a0 <hal_timer_config+0x168>)
   1b452:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1b456:	7823      	ldrb	r3, [r4, #0]
   1b458:	2b00      	cmp	r3, #0
   1b45a:	f040 8093 	bne.w	1b584 <hal_timer_config+0x14c>
   1b45e:	2900      	cmp	r1, #0
   1b460:	f000 8093 	beq.w	1b58a <hal_timer_config+0x152>
   1b464:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1b468:	f200 8091 	bhi.w	1b58e <hal_timer_config+0x156>
        (bsptimer->tmr_reg == NULL)) {
   1b46c:	6922      	ldr	r2, [r4, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1b46e:	2a00      	cmp	r2, #0
   1b470:	f000 808f 	beq.w	1b592 <hal_timer_config+0x15a>
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1b474:	2901      	cmp	r1, #1
   1b476:	d03f      	beq.n	1b4f8 <hal_timer_config+0xc0>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1b478:	2301      	movs	r3, #1
   1b47a:	2b09      	cmp	r3, #9
   1b47c:	d83c      	bhi.n	1b4f8 <hal_timer_config+0xc0>
            if (div <= (1 << prescaler)) {
   1b47e:	2201      	movs	r2, #1
   1b480:	409a      	lsls	r2, r3
   1b482:	428a      	cmp	r2, r1
   1b484:	d22e      	bcs.n	1b4e4 <hal_timer_config+0xac>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1b486:	3301      	adds	r3, #1
   1b488:	b2db      	uxtb	r3, r3
   1b48a:	e7f6      	b.n	1b47a <hal_timer_config+0x42>
        if (bsptimer->tmr_enabled || (freq_hz != 32768) ||
   1b48c:	7823      	ldrb	r3, [r4, #0]
   1b48e:	2b00      	cmp	r3, #0
   1b490:	d170      	bne.n	1b574 <hal_timer_config+0x13c>
   1b492:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   1b496:	d16f      	bne.n	1b578 <hal_timer_config+0x140>
            (bsptimer->tmr_reg == NULL)) {
   1b498:	6923      	ldr	r3, [r4, #16]
        if (bsptimer->tmr_enabled || (freq_hz != 32768) ||
   1b49a:	2b00      	cmp	r3, #0
   1b49c:	d06e      	beq.n	1b57c <hal_timer_config+0x144>
        bsptimer->tmr_freq = freq_hz;
   1b49e:	60e1      	str	r1, [r4, #12]
        bsptimer->tmr_enabled = 1;
   1b4a0:	2201      	movs	r2, #1
   1b4a2:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b4a4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b4a8:	b672      	cpsid	i
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1b4aa:	6923      	ldr	r3, [r4, #16]
        rtctimer->TASKS_STOP = 1;
   1b4ac:	605a      	str	r2, [r3, #4]
        rtctimer->TASKS_CLEAR = 1;
   1b4ae:	609a      	str	r2, [r3, #8]
        rtctimer->PRESCALER = 0;
   1b4b0:	2100      	movs	r1, #0
   1b4b2:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
        rtctimer->EVENTS_OVRFLW = 0;
   1b4b6:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        rtctimer->INTENSET = RTC_INTENSET_OVRFLW_Msk;
   1b4ba:	2102      	movs	r1, #2
   1b4bc:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
        rtctimer->TASKS_START = 1;
   1b4c0:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1b4c2:	7862      	ldrb	r2, [r4, #1]
   1b4c4:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1b4c6:	2b00      	cmp	r3, #0
   1b4c8:	db08      	blt.n	1b4dc <hal_timer_config+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b4ca:	f002 021f 	and.w	r2, r2, #31
   1b4ce:	095b      	lsrs	r3, r3, #5
   1b4d0:	2101      	movs	r1, #1
   1b4d2:	fa01 f202 	lsl.w	r2, r1, r2
   1b4d6:	4933      	ldr	r1, [pc, #204]	; (1b5a4 <hal_timer_config+0x16c>)
   1b4d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        __HAL_ENABLE_INTERRUPTS(ctx);
   1b4dc:	2800      	cmp	r0, #0
   1b4de:	d14f      	bne.n	1b580 <hal_timer_config+0x148>
  __ASM volatile ("cpsie i" : : : "memory");
   1b4e0:	b662      	cpsie	i
   1b4e2:	e050      	b.n	1b586 <hal_timer_config+0x14e>
                min_delta = div - (1 << (prescaler - 1));
   1b4e4:	1e58      	subs	r0, r3, #1
   1b4e6:	2501      	movs	r5, #1
   1b4e8:	fa05 f000 	lsl.w	r0, r5, r0
   1b4ec:	1a08      	subs	r0, r1, r0
                max_delta = (1 << prescaler) - div;
   1b4ee:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1b4f0:	4288      	cmp	r0, r1
   1b4f2:	d201      	bcs.n	1b4f8 <hal_timer_config+0xc0>
                    prescaler -= 1;
   1b4f4:	3b01      	subs	r3, #1
   1b4f6:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1b4f8:	4a29      	ldr	r2, [pc, #164]	; (1b5a0 <hal_timer_config+0x168>)
   1b4fa:	411a      	asrs	r2, r3
   1b4fc:	60e2      	str	r2, [r4, #12]
    bsptimer->tmr_enabled = 1;
   1b4fe:	2201      	movs	r2, #1
   1b500:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b502:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b506:	b672      	cpsid	i
    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

#if MYNEWT_VAL_CHOICE(MCU_HFCLK_SOURCE, HFXO)
    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1b508:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1b50c:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1b510:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1b514:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1b518:	d00c      	beq.n	1b534 <hal_timer_config+0xfc>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1b51a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1b51e:	2100      	movs	r1, #0
   1b520:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1b524:	2101      	movs	r1, #1
   1b526:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1b528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1b52c:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1b530:	2a00      	cmp	r2, #0
   1b532:	d0f9      	beq.n	1b528 <hal_timer_config+0xf0>
                break;
            }
        }
    }
#endif
    hwtimer = bsptimer->tmr_reg;
   1b534:	6922      	ldr	r2, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1b536:	2101      	movs	r1, #1
   1b538:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1b53a:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1b53c:	2500      	movs	r5, #0
   1b53e:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1b542:	2503      	movs	r5, #3
   1b544:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1b548:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1b54c:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1b54e:	7862      	ldrb	r2, [r4, #1]
   1b550:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1b552:	2b00      	cmp	r3, #0
   1b554:	db07      	blt.n	1b566 <hal_timer_config+0x12e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b556:	f002 021f 	and.w	r2, r2, #31
   1b55a:	095b      	lsrs	r3, r3, #5
   1b55c:	fa01 f202 	lsl.w	r2, r1, r2
   1b560:	4910      	ldr	r1, [pc, #64]	; (1b5a4 <hal_timer_config+0x16c>)
   1b562:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1b566:	b9b0      	cbnz	r0, 1b596 <hal_timer_config+0x15e>
  __ASM volatile ("cpsie i" : : : "memory");
   1b568:	b662      	cpsie	i
   1b56a:	e00c      	b.n	1b586 <hal_timer_config+0x14e>

    return 0;

err:
    return rc;
   1b56c:	2016      	movs	r0, #22
}
   1b56e:	4770      	bx	lr
    return rc;
   1b570:	2016      	movs	r0, #22
   1b572:	e008      	b.n	1b586 <hal_timer_config+0x14e>
   1b574:	2016      	movs	r0, #22
   1b576:	e006      	b.n	1b586 <hal_timer_config+0x14e>
   1b578:	2016      	movs	r0, #22
   1b57a:	e004      	b.n	1b586 <hal_timer_config+0x14e>
   1b57c:	2016      	movs	r0, #22
   1b57e:	e002      	b.n	1b586 <hal_timer_config+0x14e>
        return 0;
   1b580:	2000      	movs	r0, #0
   1b582:	e000      	b.n	1b586 <hal_timer_config+0x14e>
    return rc;
   1b584:	2016      	movs	r0, #22
}
   1b586:	bc30      	pop	{r4, r5}
   1b588:	4770      	bx	lr
    return rc;
   1b58a:	2016      	movs	r0, #22
   1b58c:	e7fb      	b.n	1b586 <hal_timer_config+0x14e>
   1b58e:	2016      	movs	r0, #22
   1b590:	e7f9      	b.n	1b586 <hal_timer_config+0x14e>
   1b592:	2016      	movs	r0, #22
   1b594:	e7f7      	b.n	1b586 <hal_timer_config+0x14e>
    return 0;
   1b596:	2000      	movs	r0, #0
   1b598:	e7f5      	b.n	1b586 <hal_timer_config+0x14e>
   1b59a:	bf00      	nop
   1b59c:	00029628 	.word	0x00029628
   1b5a0:	00f42400 	.word	0x00f42400
   1b5a4:	e000e100 	.word	0xe000e100

0001b5a8 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1b5a8:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b5aa:	2805      	cmp	r0, #5
   1b5ac:	dc0c      	bgt.n	1b5c8 <hal_timer_read+0x20>
   1b5ae:	4b0b      	ldr	r3, [pc, #44]	; (1b5dc <hal_timer_read+0x34>)
   1b5b0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1b5b4:	b140      	cbz	r0, 1b5c8 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1b5b6:	7883      	ldrb	r3, [r0, #2]
   1b5b8:	b91b      	cbnz	r3, 1b5c2 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1b5ba:	6900      	ldr	r0, [r0, #16]
   1b5bc:	f7ff fdf0 	bl	1b1a0 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1b5c0:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1b5c2:	f7ff fe7b 	bl	1b2bc <hal_timer_read_bsptimer>
   1b5c6:	e7fb      	b.n	1b5c0 <hal_timer_read+0x18>
    assert(0);
   1b5c8:	f7ec fdfa 	bl	81c0 <hal_debugger_connected>
   1b5cc:	b100      	cbz	r0, 1b5d0 <hal_timer_read+0x28>
   1b5ce:	be01      	bkpt	0x0001
   1b5d0:	2300      	movs	r3, #0
   1b5d2:	461a      	mov	r2, r3
   1b5d4:	4619      	mov	r1, r3
   1b5d6:	4618      	mov	r0, r3
   1b5d8:	f7ee f9fa 	bl	99d0 <__assert_func>
   1b5dc:	00029628 	.word	0x00029628

0001b5e0 <hal_timer_set_cb>:
                 void *arg)
{
    int rc;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b5e0:	2805      	cmp	r0, #5
   1b5e2:	dc0c      	bgt.n	1b5fe <hal_timer_set_cb+0x1e>
{
   1b5e4:	b410      	push	{r4}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b5e6:	4c08      	ldr	r4, [pc, #32]	; (1b608 <hal_timer_set_cb+0x28>)
   1b5e8:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   1b5ec:	b14c      	cbz	r4, 1b602 <hal_timer_set_cb+0x22>

    timer->cb_func = cb_func;
   1b5ee:	604a      	str	r2, [r1, #4]
    timer->cb_arg = arg;
   1b5f0:	608b      	str	r3, [r1, #8]
    timer->link.tqe_prev = NULL;
   1b5f2:	2000      	movs	r0, #0
   1b5f4:	6148      	str	r0, [r1, #20]
    timer->bsp_timer = bsptimer;
   1b5f6:	600c      	str	r4, [r1, #0]

    rc = 0;

err:
    return rc;
}
   1b5f8:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b5fc:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b5fe:	2016      	movs	r0, #22
}
   1b600:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b602:	2016      	movs	r0, #22
    return rc;
   1b604:	e7f8      	b.n	1b5f8 <hal_timer_set_cb+0x18>
   1b606:	bf00      	nop
   1b608:	00029628 	.word	0x00029628

0001b60c <hal_timer_start_at>:
{
    uint32_t ctx;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1b60c:	2800      	cmp	r0, #0
   1b60e:	d03d      	beq.n	1b68c <hal_timer_start_at+0x80>
{
   1b610:	b538      	push	{r3, r4, r5, lr}
   1b612:	4604      	mov	r4, r0
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1b614:	6943      	ldr	r3, [r0, #20]
   1b616:	b10b      	cbz	r3, 1b61c <hal_timer_start_at+0x10>
        (timer->cb_func == NULL)) {
        return EINVAL;
   1b618:	2016      	movs	r0, #22
    }

    __HAL_ENABLE_INTERRUPTS(ctx);

    return 0;
}
   1b61a:	bd38      	pop	{r3, r4, r5, pc}
        (timer->cb_func == NULL)) {
   1b61c:	6843      	ldr	r3, [r0, #4]
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1b61e:	2b00      	cmp	r3, #0
   1b620:	d036      	beq.n	1b690 <hal_timer_start_at+0x84>
    bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   1b622:	6800      	ldr	r0, [r0, #0]
    timer->expiry = tick;
   1b624:	60e1      	str	r1, [r4, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b626:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b62a:	b672      	cpsid	i
    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   1b62c:	6943      	ldr	r3, [r0, #20]
   1b62e:	b13b      	cbz	r3, 1b640 <hal_timer_start_at+0x34>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   1b630:	b1bb      	cbz	r3, 1b662 <hal_timer_start_at+0x56>
            if ((int32_t)(timer->expiry - entry->expiry) < 0) {
   1b632:	68e2      	ldr	r2, [r4, #12]
   1b634:	68d9      	ldr	r1, [r3, #12]
   1b636:	1a52      	subs	r2, r2, r1
   1b638:	2a00      	cmp	r2, #0
   1b63a:	db0a      	blt.n	1b652 <hal_timer_start_at+0x46>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   1b63c:	691b      	ldr	r3, [r3, #16]
   1b63e:	e7f7      	b.n	1b630 <hal_timer_start_at+0x24>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   1b640:	4622      	mov	r2, r4
   1b642:	f842 3f10 	str.w	r3, [r2, #16]!
   1b646:	6182      	str	r2, [r0, #24]
   1b648:	4603      	mov	r3, r0
   1b64a:	f843 4f14 	str.w	r4, [r3, #20]!
   1b64e:	6163      	str	r3, [r4, #20]
   1b650:	e008      	b.n	1b664 <hal_timer_start_at+0x58>
                TAILQ_INSERT_BEFORE(entry, timer, link);
   1b652:	695a      	ldr	r2, [r3, #20]
   1b654:	6162      	str	r2, [r4, #20]
   1b656:	6123      	str	r3, [r4, #16]
   1b658:	695a      	ldr	r2, [r3, #20]
   1b65a:	6014      	str	r4, [r2, #0]
   1b65c:	f104 0210 	add.w	r2, r4, #16
   1b660:	615a      	str	r2, [r3, #20]
        if (!entry) {
   1b662:	b133      	cbz	r3, 1b672 <hal_timer_start_at+0x66>
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   1b664:	6943      	ldr	r3, [r0, #20]
   1b666:	42a3      	cmp	r3, r4
   1b668:	d00c      	beq.n	1b684 <hal_timer_start_at+0x78>
    __HAL_ENABLE_INTERRUPTS(ctx);
   1b66a:	b99d      	cbnz	r5, 1b694 <hal_timer_start_at+0x88>
  __ASM volatile ("cpsie i" : : : "memory");
   1b66c:	b662      	cpsie	i
    return 0;
   1b66e:	2000      	movs	r0, #0
   1b670:	e7d3      	b.n	1b61a <hal_timer_start_at+0xe>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
   1b672:	6123      	str	r3, [r4, #16]
   1b674:	6983      	ldr	r3, [r0, #24]
   1b676:	6163      	str	r3, [r4, #20]
   1b678:	6983      	ldr	r3, [r0, #24]
   1b67a:	601c      	str	r4, [r3, #0]
   1b67c:	f104 0310 	add.w	r3, r4, #16
   1b680:	6183      	str	r3, [r0, #24]
   1b682:	e7ef      	b.n	1b664 <hal_timer_start_at+0x58>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1b684:	68e1      	ldr	r1, [r4, #12]
   1b686:	f7ff fd91 	bl	1b1ac <nrf_timer_set_ocmp>
   1b68a:	e7ee      	b.n	1b66a <hal_timer_start_at+0x5e>
        return EINVAL;
   1b68c:	2016      	movs	r0, #22
}
   1b68e:	4770      	bx	lr
        return EINVAL;
   1b690:	2016      	movs	r0, #22
   1b692:	e7c2      	b.n	1b61a <hal_timer_start_at+0xe>
    return 0;
   1b694:	2000      	movs	r0, #0
   1b696:	e7c0      	b.n	1b61a <hal_timer_start_at+0xe>

0001b698 <hal_timer_stop>:
    uint32_t ctx;
    int reset_ocmp;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if (timer == NULL) {
   1b698:	b360      	cbz	r0, 1b6f4 <hal_timer_stop+0x5c>
{
   1b69a:	b570      	push	{r4, r5, r6, lr}
   1b69c:	4603      	mov	r3, r0
        return EINVAL;
    }

   bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   1b69e:	6801      	ldr	r1, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b6a0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b6a4:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (timer->link.tqe_prev != NULL) {
   1b6a6:	6942      	ldr	r2, [r0, #20]
   1b6a8:	b18a      	cbz	r2, 1b6ce <hal_timer_stop+0x36>
        reset_ocmp = 0;
        if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   1b6aa:	6948      	ldr	r0, [r1, #20]
   1b6ac:	4298      	cmp	r0, r3
   1b6ae:	d012      	beq.n	1b6d6 <hal_timer_stop+0x3e>
        reset_ocmp = 0;
   1b6b0:	2500      	movs	r5, #0
            /* If first on queue, we will need to reset OCMP */
            entry = TAILQ_NEXT(timer, link);
            reset_ocmp = 1;
        }
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1b6b2:	6918      	ldr	r0, [r3, #16]
   1b6b4:	b190      	cbz	r0, 1b6dc <hal_timer_stop+0x44>
   1b6b6:	6142      	str	r2, [r0, #20]
   1b6b8:	695a      	ldr	r2, [r3, #20]
   1b6ba:	6918      	ldr	r0, [r3, #16]
   1b6bc:	6010      	str	r0, [r2, #0]
        timer->link.tqe_prev = NULL;
   1b6be:	2200      	movs	r2, #0
   1b6c0:	615a      	str	r2, [r3, #20]
        if (reset_ocmp) {
   1b6c2:	b125      	cbz	r5, 1b6ce <hal_timer_stop+0x36>
            if (entry) {
   1b6c4:	b166      	cbz	r6, 1b6e0 <hal_timer_stop+0x48>
                nrf_timer_set_ocmp((struct nrf52_hal_timer *)entry->bsp_timer,
   1b6c6:	68f1      	ldr	r1, [r6, #12]
   1b6c8:	6830      	ldr	r0, [r6, #0]
   1b6ca:	f7ff fd6f 	bl	1b1ac <nrf_timer_set_ocmp>
                }
            }
        }
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   1b6ce:	b99c      	cbnz	r4, 1b6f8 <hal_timer_stop+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1b6d0:	b662      	cpsie	i

    return 0;
   1b6d2:	2000      	movs	r0, #0
}
   1b6d4:	bd70      	pop	{r4, r5, r6, pc}
            entry = TAILQ_NEXT(timer, link);
   1b6d6:	691e      	ldr	r6, [r3, #16]
            reset_ocmp = 1;
   1b6d8:	2501      	movs	r5, #1
   1b6da:	e7ea      	b.n	1b6b2 <hal_timer_stop+0x1a>
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1b6dc:	618a      	str	r2, [r1, #24]
   1b6de:	e7eb      	b.n	1b6b8 <hal_timer_stop+0x20>
                if (bsptimer->tmr_rtc) {
   1b6e0:	788b      	ldrb	r3, [r1, #2]
   1b6e2:	b11b      	cbz	r3, 1b6ec <hal_timer_stop+0x54>
                    nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1b6e4:	6908      	ldr	r0, [r1, #16]
   1b6e6:	f7ff fde0 	bl	1b2aa <nrf_rtc_disable_ocmp>
   1b6ea:	e7f0      	b.n	1b6ce <hal_timer_stop+0x36>
                    nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1b6ec:	6908      	ldr	r0, [r1, #16]
   1b6ee:	f7ff fdd7 	bl	1b2a0 <nrf_timer_disable_ocmp>
   1b6f2:	e7ec      	b.n	1b6ce <hal_timer_stop+0x36>
        return EINVAL;
   1b6f4:	2016      	movs	r0, #22
}
   1b6f6:	4770      	bx	lr
    return 0;
   1b6f8:	2000      	movs	r0, #0
   1b6fa:	e7eb      	b.n	1b6d4 <hal_timer_stop+0x3c>

0001b6fc <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1b6fc:	4770      	bx	lr
	...

0001b700 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1b700:	4b08      	ldr	r3, [pc, #32]	; (1b724 <sensor_mgr_remove+0x24>)
   1b702:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b704:	4282      	cmp	r2, r0
   1b706:	d104      	bne.n	1b712 <sensor_mgr_remove+0x12>
   1b708:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1b70c:	631a      	str	r2, [r3, #48]	; 0x30
   1b70e:	4770      	bx	lr
   1b710:	461a      	mov	r2, r3
   1b712:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1b716:	4283      	cmp	r3, r0
   1b718:	d1fa      	bne.n	1b710 <sensor_mgr_remove+0x10>
   1b71a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1b71e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1b722:	4770      	bx	lr
   1b724:	200080d0 	.word	0x200080d0

0001b728 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1b728:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1b72a:	6a03      	ldr	r3, [r0, #32]
   1b72c:	b993      	cbnz	r3, 1b754 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b72e:	4b15      	ldr	r3, [pc, #84]	; (1b784 <sensor_mgr_insert+0x5c>)
   1b730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1b732:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b734:	e002      	b.n	1b73c <sensor_mgr_insert+0x14>
            prev = cursor;
   1b736:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b738:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1b73c:	2b00      	cmp	r3, #0
   1b73e:	d1fa      	bne.n	1b736 <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1b740:	b1c9      	cbz	r1, 1b776 <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1b742:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1b746:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1b74a:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1b74e:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b752:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b754:	4b0b      	ldr	r3, [pc, #44]	; (1b784 <sensor_mgr_insert+0x5c>)
   1b756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1b758:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b75a:	2b00      	cmp	r3, #0
   1b75c:	d0f0      	beq.n	1b740 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1b75e:	6a1a      	ldr	r2, [r3, #32]
   1b760:	2a00      	cmp	r2, #0
   1b762:	d0ed      	beq.n	1b740 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1b764:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1b766:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1b768:	1b12      	subs	r2, r2, r4
   1b76a:	2a00      	cmp	r2, #0
   1b76c:	dbe8      	blt.n	1b740 <sensor_mgr_insert+0x18>
        prev = cursor;
   1b76e:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b770:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1b774:	e7f1      	b.n	1b75a <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1b776:	4b03      	ldr	r3, [pc, #12]	; (1b784 <sensor_mgr_insert+0x5c>)
   1b778:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b77a:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1b77e:	6318      	str	r0, [r3, #48]	; 0x30
   1b780:	e7e5      	b.n	1b74e <sensor_mgr_insert+0x26>
   1b782:	bf00      	nop
   1b784:	200080d0 	.word	0x200080d0

0001b788 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1b788:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1b78a:	fab0 f080 	clz	r0, r0
   1b78e:	0940      	lsrs	r0, r0, #5
   1b790:	4770      	bx	lr
	...

0001b794 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1b794:	4b01      	ldr	r3, [pc, #4]	; (1b79c <sensor_mgr_evq_set+0x8>)
   1b796:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1b798:	4770      	bx	lr
   1b79a:	bf00      	nop
   1b79c:	200080d0 	.word	0x200080d0

0001b7a0 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1b7a0:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1b7a4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1b7a8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1b7ac:	ea02 0b04 	and.w	fp, r2, r4
   1b7b0:	ea03 0c05 	and.w	ip, r3, r5
   1b7b4:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1b7b8:	ea0b 0200 	and.w	r2, fp, r0
   1b7bc:	ea0c 0301 	and.w	r3, ip, r1
   1b7c0:	4313      	orrs	r3, r2
}
   1b7c2:	bf14      	ite	ne
   1b7c4:	2001      	movne	r0, #1
   1b7c6:	2000      	moveq	r0, #0
   1b7c8:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1b7cc:	4770      	bx	lr

0001b7ce <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1b7ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b7d2:	b083      	sub	sp, #12
   1b7d4:	4605      	mov	r5, r0
   1b7d6:	4689      	mov	r9, r1
   1b7d8:	4690      	mov	r8, r2
   1b7da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1b7de:	790b      	ldrb	r3, [r1, #4]
   1b7e0:	2b01      	cmp	r3, #1
   1b7e2:	d013      	beq.n	1b80c <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1b7e4:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1b7e6:	e000      	b.n	1b7ea <sensor_read_data_func+0x1c>
   1b7e8:	6924      	ldr	r4, [r4, #16]
   1b7ea:	b17c      	cbz	r4, 1b80c <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1b7ec:	e9d4 0100 	ldrd	r0, r1, [r4]
   1b7f0:	ea00 0206 	and.w	r2, r0, r6
   1b7f4:	ea01 0307 	and.w	r3, r1, r7
   1b7f8:	4313      	orrs	r3, r2
   1b7fa:	d0f5      	beq.n	1b7e8 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1b7fc:	68a3      	ldr	r3, [r4, #8]
   1b7fe:	68e1      	ldr	r1, [r4, #12]
   1b800:	e9cd 6700 	strd	r6, r7, [sp]
   1b804:	4642      	mov	r2, r8
   1b806:	4628      	mov	r0, r5
   1b808:	4798      	blx	r3
   1b80a:	e7ed      	b.n	1b7e8 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1b80c:	f8d9 3000 	ldr.w	r3, [r9]
   1b810:	b14b      	cbz	r3, 1b826 <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1b812:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1b816:	e9cd 6700 	strd	r6, r7, [sp]
   1b81a:	4642      	mov	r2, r8
   1b81c:	4628      	mov	r0, r5
   1b81e:	4798      	blx	r3
    }

    return (0);
}
   1b820:	b003      	add	sp, #12
   1b822:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1b826:	2000      	movs	r0, #0
   1b828:	e7fa      	b.n	1b820 <sensor_read_data_func+0x52>
	...

0001b82c <sensor_base_ts_update_event>:
{
   1b82c:	b530      	push	{r4, r5, lr}
   1b82e:	b087      	sub	sp, #28
    ticks = os_time_get();
   1b830:	f7ef fe42 	bl	b4b8 <os_time_get>
   1b834:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1b836:	a901      	add	r1, sp, #4
   1b838:	a802      	add	r0, sp, #8
   1b83a:	f7ef fe7b 	bl	b534 <os_gettimeofday>
    if (rc) {
   1b83e:	b138      	cbz	r0, 1b850 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1b840:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1b844:	4621      	mov	r1, r4
   1b846:	4809      	ldr	r0, [pc, #36]	; (1b86c <sensor_base_ts_update_event+0x40>)
   1b848:	f7ee fa96 	bl	9d78 <os_callout_reset>
}
   1b84c:	b007      	add	sp, #28
   1b84e:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1b850:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1b854:	4d06      	ldr	r5, [pc, #24]	; (1b870 <sensor_base_ts_update_event+0x44>)
   1b856:	ab06      	add	r3, sp, #24
   1b858:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1b85c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1b860:	9b01      	ldr	r3, [sp, #4]
   1b862:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1b864:	f000 fa79 	bl	1bd5a <os_cputime_get32>
   1b868:	6168      	str	r0, [r5, #20]
   1b86a:	e7eb      	b.n	1b844 <sensor_base_ts_update_event+0x18>
   1b86c:	20008198 	.word	0x20008198
   1b870:	200080b8 	.word	0x200080b8

0001b874 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1b874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b876:	4607      	mov	r7, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1b878:	f000 fa6f 	bl	1bd5a <os_cputime_get32>
   1b87c:	4604      	mov	r4, r0

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
             sensor_base_ts.st_cputime);
   1b87e:	4e0e      	ldr	r6, [pc, #56]	; (1b8b8 <sensor_up_timestamp+0x44>)
   1b880:	6970      	ldr	r0, [r6, #20]
    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1b882:	1a20      	subs	r0, r4, r0
   1b884:	f000 fa88 	bl	1bd98 <os_cputime_ticks_to_usecs>

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1b888:	647c      	str	r4, [r7, #68]	; 0x44
   1b88a:	6174      	str	r4, [r6, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1b88c:	e9d6 4500 	ldrd	r4, r5, [r6]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1b890:	68b3      	ldr	r3, [r6, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1b892:	4418      	add	r0, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1b894:	4b09      	ldr	r3, [pc, #36]	; (1b8bc <sensor_up_timestamp+0x48>)
   1b896:	fba3 2300 	umull	r2, r3, r3, r0
   1b89a:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1b89c:	18e1      	adds	r1, r4, r3
   1b89e:	f145 0200 	adc.w	r2, r5, #0
   1b8a2:	e9c6 1200 	strd	r1, r2, [r6]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1b8a6:	e9c7 120c 	strd	r1, r2, [r7, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1b8aa:	4a05      	ldr	r2, [pc, #20]	; (1b8c0 <sensor_up_timestamp+0x4c>)
   1b8ac:	fb02 0213 	mls	r2, r2, r3, r0
    sensor_base_ts.st_ostv.tv_usec  =
   1b8b0:	60b2      	str	r2, [r6, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1b8b2:	63ba      	str	r2, [r7, #56]	; 0x38

}
   1b8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b8b6:	bf00      	nop
   1b8b8:	200080b8 	.word	0x200080b8
   1b8bc:	431bde83 	.word	0x431bde83
   1b8c0:	000f4240 	.word	0x000f4240

0001b8c4 <sensor_mgr_lock>:
{
   1b8c4:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1b8c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b8ca:	4804      	ldr	r0, [pc, #16]	; (1b8dc <sensor_mgr_lock+0x18>)
   1b8cc:	f7ef faac 	bl	ae28 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1b8d0:	b108      	cbz	r0, 1b8d6 <sensor_mgr_lock+0x12>
   1b8d2:	2809      	cmp	r0, #9
   1b8d4:	d000      	beq.n	1b8d8 <sensor_mgr_lock+0x14>
}
   1b8d6:	bd08      	pop	{r3, pc}
        return (0);
   1b8d8:	2000      	movs	r0, #0
   1b8da:	e7fc      	b.n	1b8d6 <sensor_mgr_lock+0x12>
   1b8dc:	200080d0 	.word	0x200080d0

0001b8e0 <sensor_mgr_unlock>:
{
   1b8e0:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1b8e2:	4802      	ldr	r0, [pc, #8]	; (1b8ec <sensor_mgr_unlock+0xc>)
   1b8e4:	f7ef fa40 	bl	ad68 <os_mutex_release>
}
   1b8e8:	bd08      	pop	{r3, pc}
   1b8ea:	bf00      	nop
   1b8ec:	200080d0 	.word	0x200080d0

0001b8f0 <sensor_mgr_evq_get>:
}
   1b8f0:	4b01      	ldr	r3, [pc, #4]	; (1b8f8 <sensor_mgr_evq_get+0x8>)
   1b8f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1b8f4:	4770      	bx	lr
   1b8f6:	bf00      	nop
   1b8f8:	200080d0 	.word	0x200080d0

0001b8fc <sensor_mgr_init>:
{
   1b8fc:	b570      	push	{r4, r5, r6, lr}
   1b8fe:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1b900:	f7ee fc5e 	bl	a1c0 <os_eventq_dflt_get>
   1b904:	f7ff ff46 	bl	1b794 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1b908:	4b1e      	ldr	r3, [pc, #120]	; (1b984 <sensor_mgr_init+0x88>)
   1b90a:	9300      	str	r3, [sp, #0]
   1b90c:	4b1e      	ldr	r3, [pc, #120]	; (1b988 <sensor_mgr_init+0x8c>)
   1b90e:	2218      	movs	r2, #24
   1b910:	2105      	movs	r1, #5
   1b912:	481e      	ldr	r0, [pc, #120]	; (1b98c <sensor_mgr_init+0x90>)
   1b914:	f7ef f8e0 	bl	aad8 <os_mempool_init>
    assert(rc == OS_OK);
   1b918:	bb50      	cbnz	r0, 1b970 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1b91a:	f7ff ffe9 	bl	1b8f0 <sensor_mgr_evq_get>
   1b91e:	4e1c      	ldr	r6, [pc, #112]	; (1b990 <sensor_mgr_init+0x94>)
   1b920:	2300      	movs	r3, #0
   1b922:	4a1c      	ldr	r2, [pc, #112]	; (1b994 <sensor_mgr_init+0x98>)
   1b924:	4601      	mov	r1, r0
   1b926:	f106 000c 	add.w	r0, r6, #12
   1b92a:	f7ee f9f9 	bl	9d20 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1b92e:	ad04      	add	r5, sp, #16
   1b930:	a903      	add	r1, sp, #12
   1b932:	4628      	mov	r0, r5
   1b934:	f7ef fdfe 	bl	b534 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1b938:	4c17      	ldr	r4, [pc, #92]	; (1b998 <sensor_mgr_init+0x9c>)
   1b93a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1b93e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1b942:	9b03      	ldr	r3, [sp, #12]
   1b944:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1b946:	f000 fa08 	bl	1bd5a <os_cputime_get32>
   1b94a:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1b94c:	f7ff ffd0 	bl	1b8f0 <sensor_mgr_evq_get>
   1b950:	4c12      	ldr	r4, [pc, #72]	; (1b99c <sensor_mgr_init+0xa0>)
   1b952:	2300      	movs	r3, #0
   1b954:	4a12      	ldr	r2, [pc, #72]	; (1b9a0 <sensor_mgr_init+0xa4>)
   1b956:	4601      	mov	r1, r0
   1b958:	4620      	mov	r0, r4
   1b95a:	f7ee f9e1 	bl	9d20 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1b95e:	2180      	movs	r1, #128	; 0x80
   1b960:	4620      	mov	r0, r4
   1b962:	f7ee fa09 	bl	9d78 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1b966:	4630      	mov	r0, r6
   1b968:	f7ef f9f4 	bl	ad54 <os_mutex_init>
}
   1b96c:	b008      	add	sp, #32
   1b96e:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1b970:	f7ec fc26 	bl	81c0 <hal_debugger_connected>
   1b974:	b100      	cbz	r0, 1b978 <sensor_mgr_init+0x7c>
   1b976:	be01      	bkpt	0x0001
   1b978:	2300      	movs	r3, #0
   1b97a:	461a      	mov	r2, r3
   1b97c:	4619      	mov	r1, r3
   1b97e:	4618      	mov	r0, r3
   1b980:	f7ee f826 	bl	99d0 <__assert_func>
   1b984:	00029640 	.word	0x00029640
   1b988:	20008104 	.word	0x20008104
   1b98c:	2000817c 	.word	0x2000817c
   1b990:	200080d0 	.word	0x200080d0
   1b994:	0001bb71 	.word	0x0001bb71
   1b998:	200080b8 	.word	0x200080b8
   1b99c:	20008198 	.word	0x20008198
   1b9a0:	0001b82d 	.word	0x0001b82d

0001b9a4 <sensor_pkg_init>:
{
   1b9a4:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1b9a6:	f7ff ffa9 	bl	1b8fc <sensor_mgr_init>
}
   1b9aa:	bd08      	pop	{r3, pc}

0001b9ac <sensor_lock>:
{
   1b9ac:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1b9ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b9b2:	3004      	adds	r0, #4
   1b9b4:	f7ef fa38 	bl	ae28 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1b9b8:	b108      	cbz	r0, 1b9be <sensor_lock+0x12>
   1b9ba:	2809      	cmp	r0, #9
   1b9bc:	d000      	beq.n	1b9c0 <sensor_lock+0x14>
}
   1b9be:	bd08      	pop	{r3, pc}
        return (0);
   1b9c0:	2000      	movs	r0, #0
   1b9c2:	e7fc      	b.n	1b9be <sensor_lock+0x12>

0001b9c4 <sensor_unlock>:
{
   1b9c4:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1b9c6:	3004      	adds	r0, #4
   1b9c8:	f7ef f9ce 	bl	ad68 <os_mutex_release>
}
   1b9cc:	bd08      	pop	{r3, pc}

0001b9ce <sensor_update_nextrun>:
{
   1b9ce:	b530      	push	{r4, r5, lr}
   1b9d0:	b083      	sub	sp, #12
   1b9d2:	4604      	mov	r4, r0
   1b9d4:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1b9d6:	a901      	add	r1, sp, #4
   1b9d8:	6a00      	ldr	r0, [r0, #32]
   1b9da:	f7ef fdc7 	bl	b56c <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1b9de:	4620      	mov	r0, r4
   1b9e0:	f7ff ffe4 	bl	1b9ac <sensor_lock>
    sensor_mgr_remove(sensor);
   1b9e4:	4620      	mov	r0, r4
   1b9e6:	f7ff fe8b 	bl	1b700 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1b9ea:	9b01      	ldr	r3, [sp, #4]
   1b9ec:	441d      	add	r5, r3
   1b9ee:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1b9f0:	4620      	mov	r0, r4
   1b9f2:	f7ff fe99 	bl	1b728 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1b9f6:	4620      	mov	r0, r4
   1b9f8:	f7ff ffe4 	bl	1b9c4 <sensor_unlock>
}
   1b9fc:	b003      	add	sp, #12
   1b9fe:	bd30      	pop	{r4, r5, pc}

0001ba00 <sensor_calc_nextrun_delta>:
{
   1ba00:	b538      	push	{r3, r4, r5, lr}
   1ba02:	4605      	mov	r5, r0
   1ba04:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1ba06:	f7ff ffd1 	bl	1b9ac <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1ba0a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1ba0c:	1b0c      	subs	r4, r1, r4
   1ba0e:	d404      	bmi.n	1ba1a <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1ba10:	4628      	mov	r0, r5
   1ba12:	f7ff ffd7 	bl	1b9c4 <sensor_unlock>
}
   1ba16:	4620      	mov	r0, r4
   1ba18:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1ba1a:	2400      	movs	r4, #0
   1ba1c:	e7f8      	b.n	1ba10 <sensor_calc_nextrun_delta+0x10>
	...

0001ba20 <sensor_find_min_nextrun_sensor>:
{
   1ba20:	b570      	push	{r4, r5, r6, lr}
   1ba22:	4606      	mov	r6, r0
   1ba24:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1ba26:	f7ff ff4d 	bl	1b8c4 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1ba2a:	4b05      	ldr	r3, [pc, #20]	; (1ba40 <sensor_find_min_nextrun_sensor+0x20>)
   1ba2c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1ba2e:	4631      	mov	r1, r6
   1ba30:	4620      	mov	r0, r4
   1ba32:	f7ff ffe5 	bl	1ba00 <sensor_calc_nextrun_delta>
   1ba36:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1ba38:	f7ff ff52 	bl	1b8e0 <sensor_mgr_unlock>
}
   1ba3c:	4620      	mov	r0, r4
   1ba3e:	bd70      	pop	{r4, r5, r6, pc}
   1ba40:	200080d0 	.word	0x200080d0

0001ba44 <sensor_mgr_register>:
{
   1ba44:	b538      	push	{r3, r4, r5, lr}
   1ba46:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1ba48:	f7ff ff3c 	bl	1b8c4 <sensor_mgr_lock>
    if (rc != 0) {
   1ba4c:	4604      	mov	r4, r0
   1ba4e:	b108      	cbz	r0, 1ba54 <sensor_mgr_register+0x10>
}
   1ba50:	4620      	mov	r0, r4
   1ba52:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1ba54:	4628      	mov	r0, r5
   1ba56:	f7ff ffa9 	bl	1b9ac <sensor_lock>
    if (rc != 0) {
   1ba5a:	4604      	mov	r4, r0
   1ba5c:	2800      	cmp	r0, #0
   1ba5e:	d1f7      	bne.n	1ba50 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1ba60:	4628      	mov	r0, r5
   1ba62:	f7ff fe61 	bl	1b728 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1ba66:	4628      	mov	r0, r5
   1ba68:	f7ff ffac 	bl	1b9c4 <sensor_unlock>
    sensor_mgr_unlock();
   1ba6c:	f7ff ff38 	bl	1b8e0 <sensor_mgr_unlock>
    return (0);
   1ba70:	e7ee      	b.n	1ba50 <sensor_mgr_register+0xc>

0001ba72 <sensor_init>:
{
   1ba72:	b538      	push	{r3, r4, r5, lr}
   1ba74:	4604      	mov	r4, r0
   1ba76:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1ba78:	2288      	movs	r2, #136	; 0x88
   1ba7a:	2100      	movs	r1, #0
   1ba7c:	f7ef ff31 	bl	b8e2 <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1ba80:	1d20      	adds	r0, r4, #4
   1ba82:	f7ef f967 	bl	ad54 <os_mutex_init>
    if (rc != 0) {
   1ba86:	4603      	mov	r3, r0
   1ba88:	b900      	cbnz	r0, 1ba8c <sensor_init+0x1a>
    sensor->s_dev = dev;
   1ba8a:	6025      	str	r5, [r4, #0]
}
   1ba8c:	4618      	mov	r0, r3
   1ba8e:	bd38      	pop	{r3, r4, r5, pc}

0001ba90 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1ba90:	b530      	push	{r4, r5, lr}
   1ba92:	b089      	sub	sp, #36	; 0x24
   1ba94:	4604      	mov	r4, r0
   1ba96:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1ba9a:	f7ff ff87 	bl	1b9ac <sensor_lock>
    if (rc) {
   1ba9e:	4605      	mov	r5, r0
   1baa0:	b9f8      	cbnz	r0, 1bae2 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1baa2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1baa4:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1baa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1baa8:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1baaa:	a904      	add	r1, sp, #16
   1baac:	4620      	mov	r0, r4
   1baae:	f7ff fe77 	bl	1b7a0 <sensor_mgr_match_bytype>
   1bab2:	b1e0      	cbz	r0, 1baee <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1bab4:	4620      	mov	r0, r4
   1bab6:	f7ff fedd 	bl	1b874 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1baba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1babc:	6819      	ldr	r1, [r3, #0]
   1babe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bac0:	9302      	str	r3, [sp, #8]
   1bac2:	ab06      	add	r3, sp, #24
   1bac4:	9301      	str	r3, [sp, #4]
   1bac6:	4b0b      	ldr	r3, [pc, #44]	; (1baf4 <sensor_read+0x64>)
   1bac8:	9300      	str	r3, [sp, #0]
   1baca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bace:	4620      	mov	r0, r4
   1bad0:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1bad2:	4605      	mov	r5, r0
   1bad4:	b128      	cbz	r0, 1bae2 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1bad6:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1bad8:	b11b      	cbz	r3, 1bae2 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1bada:	4602      	mov	r2, r0
   1badc:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1bade:	4620      	mov	r0, r4
   1bae0:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1bae2:	4620      	mov	r0, r4
   1bae4:	f7ff ff6e 	bl	1b9c4 <sensor_unlock>
    return (rc);
}
   1bae8:	4628      	mov	r0, r5
   1baea:	b009      	add	sp, #36	; 0x24
   1baec:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1baee:	f06f 0503 	mvn.w	r5, #3
   1baf2:	e7f6      	b.n	1bae2 <sensor_read+0x52>
   1baf4:	0001b7cf 	.word	0x0001b7cf

0001baf8 <sensor_mgr_poll_bytype>:
{
   1baf8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bafa:	b085      	sub	sp, #20
   1bafc:	4616      	mov	r6, r2
   1bafe:	461f      	mov	r7, r3
   1bb00:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1bb02:	b10c      	cbz	r4, 1bb08 <sensor_mgr_poll_bytype+0x10>
   1bb04:	8aa3      	ldrh	r3, [r4, #20]
   1bb06:	b9cb      	cbnz	r3, 1bb3c <sensor_mgr_poll_bytype+0x44>
   1bb08:	4632      	mov	r2, r6
   1bb0a:	463b      	mov	r3, r7
   1bb0c:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1bb0e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bb12:	9102      	str	r1, [sp, #8]
   1bb14:	2100      	movs	r1, #0
   1bb16:	9101      	str	r1, [sp, #4]
   1bb18:	9100      	str	r1, [sp, #0]
   1bb1a:	f7ff ffb9 	bl	1ba90 <sensor_read>
        sensor_lock(sensor);
   1bb1e:	4628      	mov	r0, r5
   1bb20:	f7ff ff44 	bl	1b9ac <sensor_lock>
        if (stt) {
   1bb24:	b12c      	cbz	r4, 1bb32 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1bb26:	8aa3      	ldrh	r3, [r4, #20]
   1bb28:	b91b      	cbnz	r3, 1bb32 <sensor_mgr_poll_bytype+0x3a>
   1bb2a:	8a63      	ldrh	r3, [r4, #18]
   1bb2c:	b10b      	cbz	r3, 1bb32 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1bb2e:	3b01      	subs	r3, #1
   1bb30:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1bb32:	4628      	mov	r0, r5
   1bb34:	f7ff ff46 	bl	1b9c4 <sensor_unlock>
}
   1bb38:	b005      	add	sp, #20
   1bb3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1bb3c:	3b01      	subs	r3, #1
   1bb3e:	82a3      	strh	r3, [r4, #20]
}
   1bb40:	e7fa      	b.n	1bb38 <sensor_mgr_poll_bytype+0x40>

0001bb42 <sensor_poll_per_type_trait>:
{
   1bb42:	b570      	push	{r4, r5, r6, lr}
   1bb44:	b082      	sub	sp, #8
   1bb46:	4605      	mov	r5, r0
   1bb48:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1bb4a:	f7ff ff2f 	bl	1b9ac <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1bb4e:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1bb50:	e007      	b.n	1bb62 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1bb52:	e9d4 2300 	ldrd	r2, r3, [r4]
   1bb56:	9601      	str	r6, [sp, #4]
   1bb58:	9400      	str	r4, [sp, #0]
   1bb5a:	4628      	mov	r0, r5
   1bb5c:	f7ff ffcc 	bl	1baf8 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1bb60:	6a24      	ldr	r4, [r4, #32]
   1bb62:	2c00      	cmp	r4, #0
   1bb64:	d1f5      	bne.n	1bb52 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1bb66:	4628      	mov	r0, r5
   1bb68:	f7ff ff2c 	bl	1b9c4 <sensor_unlock>
}
   1bb6c:	b002      	add	sp, #8
   1bb6e:	bd70      	pop	{r4, r5, r6, pc}

0001bb70 <sensor_mgr_wakeup_event>:
{
   1bb70:	b570      	push	{r4, r5, r6, lr}
   1bb72:	b084      	sub	sp, #16
    now = os_time_get();
   1bb74:	f7ef fca0 	bl	b4b8 <os_time_get>
   1bb78:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1bb7a:	f7ff fea3 	bl	1b8c4 <sensor_mgr_lock>
   1bb7e:	e012      	b.n	1bba6 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1bb80:	4620      	mov	r0, r4
   1bb82:	f7ff ff1f 	bl	1b9c4 <sensor_unlock>
            sensor_mgr_unlock();
   1bb86:	f7ff feab 	bl	1b8e0 <sensor_mgr_unlock>
}
   1bb8a:	b004      	add	sp, #16
   1bb8c:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1bb8e:	4632      	mov	r2, r6
   1bb90:	4629      	mov	r1, r5
   1bb92:	4620      	mov	r0, r4
   1bb94:	f7ff ffd5 	bl	1bb42 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1bb98:	4629      	mov	r1, r5
   1bb9a:	4620      	mov	r0, r4
   1bb9c:	f7ff ff17 	bl	1b9ce <sensor_update_nextrun>
        sensor_unlock(cursor);
   1bba0:	4620      	mov	r0, r4
   1bba2:	f7ff ff0f 	bl	1b9c4 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1bba6:	a903      	add	r1, sp, #12
   1bba8:	4628      	mov	r0, r5
   1bbaa:	f7ff ff39 	bl	1ba20 <sensor_find_min_nextrun_sensor>
   1bbae:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1bbb0:	f7ff fefc 	bl	1b9ac <sensor_lock>
        if (!cursor->s_poll_rate) {
   1bbb4:	6a23      	ldr	r3, [r4, #32]
   1bbb6:	2b00      	cmp	r3, #0
   1bbb8:	d0e2      	beq.n	1bb80 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1bbba:	9e03      	ldr	r6, [sp, #12]
   1bbbc:	b96e      	cbnz	r6, 1bbda <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1bbbe:	4620      	mov	r0, r4
   1bbc0:	f7ff fde2 	bl	1b788 <sensor_type_traits_empty>
   1bbc4:	2800      	cmp	r0, #0
   1bbc6:	d0e2      	beq.n	1bb8e <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1bbc8:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1bbcc:	9501      	str	r5, [sp, #4]
   1bbce:	2100      	movs	r1, #0
   1bbd0:	9100      	str	r1, [sp, #0]
   1bbd2:	4620      	mov	r0, r4
   1bbd4:	f7ff ff90 	bl	1baf8 <sensor_mgr_poll_bytype>
   1bbd8:	e7de      	b.n	1bb98 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1bbda:	f7ff fe81 	bl	1b8e0 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1bbde:	9903      	ldr	r1, [sp, #12]
   1bbe0:	4801      	ldr	r0, [pc, #4]	; (1bbe8 <sensor_mgr_wakeup_event+0x78>)
   1bbe2:	f7ee f8c9 	bl	9d78 <os_callout_reset>
   1bbe6:	e7d0      	b.n	1bb8a <sensor_mgr_wakeup_event+0x1a>
   1bbe8:	200080dc 	.word	0x200080dc

0001bbec <put_le16>:
put_le16(void *buf, uint16_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   1bbec:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   1bbee:	0a09      	lsrs	r1, r1, #8
   1bbf0:	7041      	strb	r1, [r0, #1]
}
   1bbf2:	4770      	bx	lr

0001bbf4 <put_le32>:
put_le32(void *buf, uint32_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   1bbf4:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   1bbf6:	f3c1 2307 	ubfx	r3, r1, #8, #8
   1bbfa:	7043      	strb	r3, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   1bbfc:	f3c1 4307 	ubfx	r3, r1, #16, #8
   1bc00:	7083      	strb	r3, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   1bc02:	0e09      	lsrs	r1, r1, #24
   1bc04:	70c1      	strb	r1, [r0, #3]
}
   1bc06:	4770      	bx	lr

0001bc08 <put_le64>:
put_le64(void *buf, uint64_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   1bc08:	7002      	strb	r2, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   1bc0a:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1bc0e:	7041      	strb	r1, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   1bc10:	f3c2 4107 	ubfx	r1, r2, #16, #8
   1bc14:	7081      	strb	r1, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   1bc16:	0e12      	lsrs	r2, r2, #24
   1bc18:	70c2      	strb	r2, [r0, #3]
    u8ptr[4] = (uint8_t)(x >> 32);
   1bc1a:	7103      	strb	r3, [r0, #4]
    u8ptr[5] = (uint8_t)(x >> 40);
   1bc1c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1bc20:	7142      	strb	r2, [r0, #5]
    u8ptr[6] = (uint8_t)(x >> 48);
   1bc22:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1bc26:	7182      	strb	r2, [r0, #6]
    u8ptr[7] = (uint8_t)(x >> 56);
   1bc28:	0e1b      	lsrs	r3, r3, #24
   1bc2a:	71c3      	strb	r3, [r0, #7]
}
   1bc2c:	4770      	bx	lr

0001bc2e <get_le16>:
{
    const uint8_t *u8ptr;
    uint16_t x;

    u8ptr = buf;
    x = u8ptr[0];
   1bc2e:	7803      	ldrb	r3, [r0, #0]
    x |= (uint16_t)u8ptr[1] << 8;
   1bc30:	7840      	ldrb	r0, [r0, #1]

    return x;
}
   1bc32:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1bc36:	4770      	bx	lr

0001bc38 <get_le32>:
{
    const uint8_t *u8ptr;
    uint32_t x;

    u8ptr = buf;
    x = u8ptr[0];
   1bc38:	7803      	ldrb	r3, [r0, #0]
    x |= (uint32_t)u8ptr[1] << 8;
   1bc3a:	7842      	ldrb	r2, [r0, #1]
   1bc3c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    x |= (uint32_t)u8ptr[2] << 16;
   1bc40:	7882      	ldrb	r2, [r0, #2]
   1bc42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    x |= (uint32_t)u8ptr[3] << 24;
   1bc46:	78c0      	ldrb	r0, [r0, #3]

    return x;
}
   1bc48:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   1bc4c:	4770      	bx	lr

0001bc4e <get_le64>:

uint64_t
get_le64(const void *buf)
{
   1bc4e:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
    const uint8_t *u8ptr;
    uint64_t x;

    u8ptr = buf;
    x = u8ptr[0];
   1bc52:	7804      	ldrb	r4, [r0, #0]
   1bc54:	2500      	movs	r5, #0
    x |= (uint64_t)u8ptr[1] << 8;
   1bc56:	7846      	ldrb	r6, [r0, #1]
   1bc58:	2300      	movs	r3, #0
   1bc5a:	0232      	lsls	r2, r6, #8
   1bc5c:	ea44 0802 	orr.w	r8, r4, r2
   1bc60:	ea45 0903 	orr.w	r9, r5, r3
    x |= (uint64_t)u8ptr[2] << 16;
   1bc64:	7886      	ldrb	r6, [r0, #2]
   1bc66:	2300      	movs	r3, #0
   1bc68:	0432      	lsls	r2, r6, #16
   1bc6a:	ea48 0402 	orr.w	r4, r8, r2
   1bc6e:	ea49 0503 	orr.w	r5, r9, r3
    x |= (uint64_t)u8ptr[3] << 24;
   1bc72:	78c6      	ldrb	r6, [r0, #3]
   1bc74:	ea4f 2916 	mov.w	r9, r6, lsr #8
   1bc78:	ea4f 6806 	mov.w	r8, r6, lsl #24
   1bc7c:	ea48 0204 	orr.w	r2, r8, r4
   1bc80:	ea49 0305 	orr.w	r3, r9, r5
    x |= (uint64_t)u8ptr[4] << 32;
   1bc84:	2400      	movs	r4, #0
   1bc86:	7905      	ldrb	r5, [r0, #4]
   1bc88:	ea42 0b04 	orr.w	fp, r2, r4
   1bc8c:	ea43 0c05 	orr.w	ip, r3, r5
    x |= (uint64_t)u8ptr[5] << 40;
   1bc90:	f890 8005 	ldrb.w	r8, [r0, #5]
   1bc94:	ea4f 2708 	mov.w	r7, r8, lsl #8
   1bc98:	ea4b 0204 	orr.w	r2, fp, r4
   1bc9c:	ea4c 0307 	orr.w	r3, ip, r7
    x |= (uint64_t)u8ptr[6] << 48;
   1bca0:	f890 8006 	ldrb.w	r8, [r0, #6]
   1bca4:	ea4f 4c08 	mov.w	ip, r8, lsl #16
   1bca8:	ea44 0602 	orr.w	r6, r4, r2
   1bcac:	ea4c 0703 	orr.w	r7, ip, r3
    x |= (uint64_t)u8ptr[7] << 56;
   1bcb0:	79c2      	ldrb	r2, [r0, #7]
   1bcb2:	ea4f 6902 	mov.w	r9, r2, lsl #24

    return x;
}
   1bcb6:	ea44 0006 	orr.w	r0, r4, r6
   1bcba:	ea49 0107 	orr.w	r1, r9, r7
   1bcbe:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
   1bcc2:	4770      	bx	lr

0001bcc4 <swap_in_place>:
    int i;
    int j;

    u8ptr = buf;

    for (i = 0, j = len - 1; i < j; i++, j--) {
   1bcc4:	3901      	subs	r1, #1
   1bcc6:	2300      	movs	r3, #0
   1bcc8:	428b      	cmp	r3, r1
   1bcca:	da0b      	bge.n	1bce4 <swap_in_place+0x20>
{
   1bccc:	b410      	push	{r4}
        tmp = u8ptr[i];
   1bcce:	5cc2      	ldrb	r2, [r0, r3]

        u8ptr[i] = u8ptr[j];
   1bcd0:	5c44      	ldrb	r4, [r0, r1]
   1bcd2:	54c4      	strb	r4, [r0, r3]
        u8ptr[j] = tmp;
   1bcd4:	5442      	strb	r2, [r0, r1]
    for (i = 0, j = len - 1; i < j; i++, j--) {
   1bcd6:	3301      	adds	r3, #1
   1bcd8:	3901      	subs	r1, #1
   1bcda:	428b      	cmp	r3, r1
   1bcdc:	dbf7      	blt.n	1bcce <swap_in_place+0xa>
    }
}
   1bcde:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bce2:	4770      	bx	lr
   1bce4:	4770      	bx	lr

0001bce6 <swap_buf>:
void
swap_buf(uint8_t *dst, const uint8_t *src, int len)
{
    int i;

    for (i = 0; i < len; i++) {
   1bce6:	2300      	movs	r3, #0
   1bce8:	4293      	cmp	r3, r2
   1bcea:	da09      	bge.n	1bd00 <swap_buf+0x1a>
{
   1bcec:	b430      	push	{r4, r5}
        dst[len - 1 - i] = src[i];
   1bcee:	1e54      	subs	r4, r2, #1
   1bcf0:	1ae4      	subs	r4, r4, r3
   1bcf2:	5ccd      	ldrb	r5, [r1, r3]
   1bcf4:	5505      	strb	r5, [r0, r4]
    for (i = 0; i < len; i++) {
   1bcf6:	3301      	adds	r3, #1
   1bcf8:	4293      	cmp	r3, r2
   1bcfa:	dbf8      	blt.n	1bcee <swap_buf+0x8>
    }
}
   1bcfc:	bc30      	pop	{r4, r5}
   1bcfe:	4770      	bx	lr
   1bd00:	4770      	bx	lr

0001bd02 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   1bd02:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   1bd04:	4601      	mov	r1, r0
   1bd06:	2005      	movs	r0, #5
   1bd08:	f7ff fb96 	bl	1b438 <hal_timer_config>
    return rc;
}
   1bd0c:	bd08      	pop	{r3, pc}

0001bd0e <os_cputime_timer_init>:
    os_cputime_delay_ticks(ticks);
}

void
os_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
   1bd0e:	b510      	push	{r4, lr}
    assert(timer != NULL);
   1bd10:	b138      	cbz	r0, 1bd22 <os_cputime_timer_init+0x14>
    assert(fp != NULL);
   1bd12:	b181      	cbz	r1, 1bd36 <os_cputime_timer_init+0x28>

    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   1bd14:	4613      	mov	r3, r2
   1bd16:	460a      	mov	r2, r1
   1bd18:	4601      	mov	r1, r0
   1bd1a:	2005      	movs	r0, #5
   1bd1c:	f7ff fc60 	bl	1b5e0 <hal_timer_set_cb>
}
   1bd20:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
   1bd22:	f7ec fa4d 	bl	81c0 <hal_debugger_connected>
   1bd26:	b100      	cbz	r0, 1bd2a <os_cputime_timer_init+0x1c>
   1bd28:	be01      	bkpt	0x0001
   1bd2a:	2300      	movs	r3, #0
   1bd2c:	461a      	mov	r2, r3
   1bd2e:	4619      	mov	r1, r3
   1bd30:	4618      	mov	r0, r3
   1bd32:	f7ed fe4d 	bl	99d0 <__assert_func>
    assert(fp != NULL);
   1bd36:	f7ec fa43 	bl	81c0 <hal_debugger_connected>
   1bd3a:	b100      	cbz	r0, 1bd3e <os_cputime_timer_init+0x30>
   1bd3c:	be01      	bkpt	0x0001
   1bd3e:	2300      	movs	r3, #0
   1bd40:	461a      	mov	r2, r3
   1bd42:	4619      	mov	r1, r3
   1bd44:	4618      	mov	r0, r3
   1bd46:	f7ed fe43 	bl	99d0 <__assert_func>

0001bd4a <os_cputime_timer_start>:

int
os_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
   1bd4a:	b508      	push	{r3, lr}
    int rc;

    rc = hal_timer_start_at(timer, cputime);
   1bd4c:	f7ff fc5e 	bl	1b60c <hal_timer_start_at>
    return rc;
}
   1bd50:	bd08      	pop	{r3, pc}

0001bd52 <os_cputime_timer_stop>:
    return rc;
}

void
os_cputime_timer_stop(struct hal_timer *timer)
{
   1bd52:	b508      	push	{r3, lr}
    hal_timer_stop(timer);
   1bd54:	f7ff fca0 	bl	1b698 <hal_timer_stop>
}
   1bd58:	bd08      	pop	{r3, pc}

0001bd5a <os_cputime_get32>:

uint32_t
os_cputime_get32(void)
{
   1bd5a:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   1bd5c:	2005      	movs	r0, #5
   1bd5e:	f7ff fc23 	bl	1b5a8 <hal_timer_read>
    return cpu_time;
}
   1bd62:	bd08      	pop	{r3, pc}

0001bd64 <os_cputime_delay_ticks>:
{
   1bd64:	b510      	push	{r4, lr}
   1bd66:	4604      	mov	r4, r0
    until = os_cputime_get32() + ticks;
   1bd68:	f7ff fff7 	bl	1bd5a <os_cputime_get32>
   1bd6c:	4404      	add	r4, r0
    while ((int32_t)(os_cputime_get32() - until) < 0) {
   1bd6e:	f7ff fff4 	bl	1bd5a <os_cputime_get32>
   1bd72:	1b00      	subs	r0, r0, r4
   1bd74:	2800      	cmp	r0, #0
   1bd76:	dbfa      	blt.n	1bd6e <os_cputime_delay_ticks+0xa>
}
   1bd78:	bd10      	pop	{r4, pc}

0001bd7a <os_cputime_delay_usecs>:
{
   1bd7a:	b508      	push	{r3, lr}
    ticks = os_cputime_usecs_to_ticks(usecs);
   1bd7c:	f000 f804 	bl	1bd88 <os_cputime_usecs_to_ticks>
    os_cputime_delay_ticks(ticks);
   1bd80:	f7ff fff0 	bl	1bd64 <os_cputime_delay_ticks>
}
   1bd84:	bd08      	pop	{r3, pc}
	...

0001bd88 <os_cputime_usecs_to_ticks>:
    /*
     * Faster calculation but could be off 1 full tick since we do not
     * add residual back. Adding back the residual is commented out below, but
     * shown.
     */
    ticks = (1ULL << 32) * MYNEWT_VAL(OS_CPUTIME_FREQ) / 1000000 * usecs;
   1bd88:	4b02      	ldr	r3, [pc, #8]	; (1bd94 <os_cputime_usecs_to_ticks+0xc>)
   1bd8a:	fba0 0103 	umull	r0, r1, r0, r3

    /* Residual for 32768 Hz. */
    //ticks += ((uint64_t)usecs * (1526122139+1)) >> 32;

    return ticks >> 32;
}
   1bd8e:	4608      	mov	r0, r1
   1bd90:	4770      	bx	lr
   1bd92:	bf00      	nop
   1bd94:	08637bd0 	.word	0x08637bd0

0001bd98 <os_cputime_ticks_to_usecs>:
    uint32_t usecs;
    uint32_t shift;

    shift = __builtin_popcount(MYNEWT_VAL(OS_CPUTIME_FREQ) - 1) - 6;

    usecs = ((ticks >> shift) * 15625) +
   1bd98:	0a41      	lsrs	r1, r0, #9
   1bd9a:	f643 5209 	movw	r2, #15625	; 0x3d09
            (((ticks & ~(~0U << shift)) * 15625) >> shift);
   1bd9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
   1bda2:	fb02 f303 	mul.w	r3, r2, r3
   1bda6:	0a5b      	lsrs	r3, r3, #9
    return usecs;
}
   1bda8:	fb02 3001 	mla	r0, r2, r1, r3
   1bdac:	4770      	bx	lr

0001bdae <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1bdae:	4603      	mov	r3, r0
   1bdb0:	b118      	cbz	r0, 1bdba <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1bdb2:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1bdb4:	2000      	movs	r0, #0
   1bdb6:	6018      	str	r0, [r3, #0]
   1bdb8:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1bdba:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1bdbc:	4770      	bx	lr
	...

0001bdc0 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1bdc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1bdc2:	4b17      	ldr	r3, [pc, #92]	; (1be20 <os_sem_release+0x60>)
   1bdc4:	681b      	ldr	r3, [r3, #0]
   1bdc6:	b33b      	cbz	r3, 1be18 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1bdc8:	b340      	cbz	r0, 1be1c <os_sem_release+0x5c>
   1bdca:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1bdcc:	f7ef f960 	bl	b090 <os_sched_get_current_task>
   1bdd0:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1bdd2:	f7ef fbef 	bl	b5b4 <os_arch_save_sr>
   1bdd6:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1bdd8:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1bdda:	b165      	cbz	r5, 1bdf6 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1bddc:	7b6b      	ldrb	r3, [r5, #13]
   1bdde:	f023 0302 	bic.w	r3, r3, #2
   1bde2:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1bde4:	4628      	mov	r0, r5
   1bde6:	f7ef f9a7 	bl	b138 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1bdea:	7afa      	ldrb	r2, [r7, #11]
   1bdec:	7aeb      	ldrb	r3, [r5, #11]
   1bdee:	429a      	cmp	r2, r3
   1bdf0:	d80b      	bhi.n	1be0a <os_sem_release+0x4a>
    resched = 0;
   1bdf2:	2400      	movs	r4, #0
   1bdf4:	e003      	b.n	1bdfe <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1bdf6:	88e3      	ldrh	r3, [r4, #6]
   1bdf8:	3301      	adds	r3, #1
   1bdfa:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1bdfc:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1bdfe:	4630      	mov	r0, r6
   1be00:	f7ef fbde 	bl	b5c0 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1be04:	b91c      	cbnz	r4, 1be0e <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1be06:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1be08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1be0a:	2401      	movs	r4, #1
   1be0c:	e7f7      	b.n	1bdfe <os_sem_release+0x3e>
        os_sched(rdy);
   1be0e:	4628      	mov	r0, r5
   1be10:	f7ef fa1e 	bl	b250 <os_sched>
    ret = OS_OK;
   1be14:	2000      	movs	r0, #0
   1be16:	e7f7      	b.n	1be08 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1be18:	2009      	movs	r0, #9
   1be1a:	e7f5      	b.n	1be08 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1be1c:	2003      	movs	r0, #3
   1be1e:	e7f3      	b.n	1be08 <os_sem_release+0x48>
   1be20:	200026d0 	.word	0x200026d0

0001be24 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1be24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1be26:	4b2c      	ldr	r3, [pc, #176]	; (1bed8 <os_sem_pend+0xb4>)
   1be28:	681b      	ldr	r3, [r3, #0]
   1be2a:	2b00      	cmp	r3, #0
   1be2c:	d04f      	beq.n	1bece <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1be2e:	2800      	cmp	r0, #0
   1be30:	d04f      	beq.n	1bed2 <os_sem_pend+0xae>
   1be32:	460d      	mov	r5, r1
   1be34:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1be36:	f7ef f92b 	bl	b090 <os_sched_get_current_task>
   1be3a:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   1be3c:	f7ef fbba 	bl	b5b4 <os_arch_save_sr>
   1be40:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1be42:	88e3      	ldrh	r3, [r4, #6]
   1be44:	b14b      	cbz	r3, 1be5a <os_sem_pend+0x36>
        sem->sem_tokens--;
   1be46:	3b01      	subs	r3, #1
   1be48:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1be4a:	2400      	movs	r4, #0
    sched = 0;
   1be4c:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1be4e:	4638      	mov	r0, r7
   1be50:	f7ef fbb6 	bl	b5c0 <os_arch_restore_sr>

    if (sched) {
   1be54:	bb45      	cbnz	r5, 1bea8 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1be56:	4620      	mov	r0, r4
   1be58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1be5a:	b315      	cbz	r5, 1bea2 <os_sem_pend+0x7e>
        current->t_obj = sem;
   1be5c:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1be5e:	7b73      	ldrb	r3, [r6, #13]
   1be60:	f043 0302 	orr.w	r3, r3, #2
   1be64:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1be66:	f8d4 c000 	ldr.w	ip, [r4]
   1be6a:	f1bc 0f00 	cmp.w	ip, #0
   1be6e:	d00e      	beq.n	1be8e <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1be70:	4663      	mov	r3, ip
        last = NULL;
   1be72:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1be74:	b133      	cbz	r3, 1be84 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1be76:	7af1      	ldrb	r1, [r6, #11]
   1be78:	7ada      	ldrb	r2, [r3, #11]
   1be7a:	4291      	cmp	r1, r2
   1be7c:	d302      	bcc.n	1be84 <os_sem_pend+0x60>
                last = entry;
   1be7e:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1be80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1be82:	e7f7      	b.n	1be74 <os_sem_pend+0x50>
        if (last) {
   1be84:	b118      	cbz	r0, 1be8e <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1be86:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1be88:	64f3      	str	r3, [r6, #76]	; 0x4c
   1be8a:	64c6      	str	r6, [r0, #76]	; 0x4c
   1be8c:	e002      	b.n	1be94 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1be8e:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1be92:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1be94:	4629      	mov	r1, r5
   1be96:	4630      	mov	r0, r6
   1be98:	f7ef f906 	bl	b0a8 <os_sched_sleep>
        ret = OS_OK;
   1be9c:	2400      	movs	r4, #0
        sched = 1;
   1be9e:	2501      	movs	r5, #1
   1bea0:	e7d5      	b.n	1be4e <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1bea2:	2406      	movs	r4, #6
    sched = 0;
   1bea4:	2500      	movs	r5, #0
   1bea6:	e7d2      	b.n	1be4e <os_sem_pend+0x2a>
        os_sched(NULL);
   1bea8:	2000      	movs	r0, #0
   1beaa:	f7ef f9d1 	bl	b250 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1beae:	7b73      	ldrb	r3, [r6, #13]
   1beb0:	f013 0f02 	tst.w	r3, #2
   1beb4:	d101      	bne.n	1beba <os_sem_pend+0x96>
            ret = OS_OK;
   1beb6:	2400      	movs	r4, #0
   1beb8:	e7cd      	b.n	1be56 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1beba:	f7ef fb7b 	bl	b5b4 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1bebe:	7b73      	ldrb	r3, [r6, #13]
   1bec0:	f023 0302 	bic.w	r3, r3, #2
   1bec4:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1bec6:	f7ef fb7b 	bl	b5c0 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1beca:	2406      	movs	r4, #6
   1becc:	e7c3      	b.n	1be56 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1bece:	2409      	movs	r4, #9
   1bed0:	e7c1      	b.n	1be56 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1bed2:	2403      	movs	r4, #3
   1bed4:	e7bf      	b.n	1be56 <os_sem_pend+0x32>
   1bed6:	bf00      	nop
   1bed8:	200026d0 	.word	0x200026d0

0001bedc <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   1bedc:	2001      	movs	r0, #1
   1bede:	4770      	bx	lr

0001bee0 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   1bee0:	4770      	bx	lr

0001bee2 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   1bee2:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   1bee4:	f101 0320 	add.w	r3, r1, #32
   1bee8:	4293      	cmp	r3, r2
   1beea:	d907      	bls.n	1befc <__malloc_from_block+0x1a>
        nfp->next_free = fpn = fp->next_free;
        nfp->prev_free = fpp = fp->prev_free;
        fpn->prev_free = nfp;
        fpp->next_free = nfp;
    } else {
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   1beec:	2300      	movs	r3, #0
   1beee:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   1bef0:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   1bef2:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   1bef4:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   1bef6:	615a      	str	r2, [r3, #20]
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   1bef8:	3010      	adds	r0, #16
   1befa:	4770      	bx	lr
{
   1befc:	b430      	push	{r4, r5}
        nfp = (struct free_arena_header *)((char *)fp + size);
   1befe:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   1bf00:	6884      	ldr	r4, [r0, #8]
        nfp->a.type = ARENA_TYPE_FREE;
   1bf02:	2501      	movs	r5, #1
   1bf04:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   1bf06:	1a52      	subs	r2, r2, r1
   1bf08:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   1bf0a:	2200      	movs	r2, #0
   1bf0c:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   1bf0e:	6041      	str	r1, [r0, #4]
        nfp->a.prev = fp;
   1bf10:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   1bf12:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   1bf14:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   1bf16:	6083      	str	r3, [r0, #8]
        nfp->next_free = fpn = fp->next_free;
   1bf18:	6901      	ldr	r1, [r0, #16]
   1bf1a:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   1bf1c:	6942      	ldr	r2, [r0, #20]
   1bf1e:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   1bf20:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   1bf22:	6113      	str	r3, [r2, #16]
}
   1bf24:	3010      	adds	r0, #16
   1bf26:	bc30      	pop	{r4, r5}
   1bf28:	4770      	bx	lr
	...

0001bf2c <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   1bf2c:	b410      	push	{r4}
   1bf2e:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   1bf30:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   1bf32:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   1bf34:	6802      	ldr	r2, [r0, #0]
   1bf36:	2a01      	cmp	r2, #1
   1bf38:	d00f      	beq.n	1bf5a <__free_block+0x2e>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   1bf3a:	2201      	movs	r2, #1
   1bf3c:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   1bf3e:	4a14      	ldr	r2, [pc, #80]	; (1bf90 <__free_block+0x64>)
   1bf40:	6910      	ldr	r0, [r2, #16]
   1bf42:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   1bf44:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   1bf46:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   1bf48:	691a      	ldr	r2, [r3, #16]
   1bf4a:	6153      	str	r3, [r2, #20]
   1bf4c:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   1bf4e:	680b      	ldr	r3, [r1, #0]
   1bf50:	2b01      	cmp	r3, #1
   1bf52:	d00c      	beq.n	1bf6e <__free_block+0x42>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   1bf54:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bf58:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   1bf5a:	6842      	ldr	r2, [r0, #4]
   1bf5c:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   1bf5e:	429c      	cmp	r4, r3
   1bf60:	d1eb      	bne.n	1bf3a <__free_block+0xe>
        pah->a.size += ah->a.size;
   1bf62:	685b      	ldr	r3, [r3, #4]
   1bf64:	441a      	add	r2, r3
   1bf66:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   1bf68:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   1bf6a:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   1bf6c:	e7ef      	b.n	1bf4e <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
   1bf6e:	6843      	ldr	r3, [r0, #4]
   1bf70:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   1bf72:	428a      	cmp	r2, r1
   1bf74:	d1ee      	bne.n	1bf54 <__free_block+0x28>
        ah->a.size += nah->a.size;
   1bf76:	684a      	ldr	r2, [r1, #4]
   1bf78:	4413      	add	r3, r2
   1bf7a:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   1bf7c:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   1bf7e:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   1bf80:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   1bf82:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   1bf84:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   1bf86:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   1bf88:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   1bf8a:	60da      	str	r2, [r3, #12]
    return ah;
   1bf8c:	e7e2      	b.n	1bf54 <__free_block+0x28>
   1bf8e:	bf00      	nop
   1bf90:	20000334 	.word	0x20000334

0001bf94 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   1bf94:	2917      	cmp	r1, #23
   1bf96:	d91e      	bls.n	1bfd6 <add_malloc_block+0x42>
{
   1bf98:	b510      	push	{r4, lr}
   1bf9a:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   1bf9c:	2301      	movs	r3, #1
   1bf9e:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   1bfa0:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   1bfa2:	4b0d      	ldr	r3, [pc, #52]	; (1bfd8 <add_malloc_block+0x44>)
   1bfa4:	681b      	ldr	r3, [r3, #0]
   1bfa6:	4798      	blx	r3
   1bfa8:	b1a0      	cbz	r0, 1bfd4 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   1bfaa:	4b0c      	ldr	r3, [pc, #48]	; (1bfdc <add_malloc_block+0x48>)
   1bfac:	68db      	ldr	r3, [r3, #12]
   1bfae:	681a      	ldr	r2, [r3, #0]
   1bfb0:	2a02      	cmp	r2, #2
   1bfb2:	d003      	beq.n	1bfbc <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
   1bfb4:	42a3      	cmp	r3, r4
   1bfb6:	d301      	bcc.n	1bfbc <add_malloc_block+0x28>
         pah = pah->a.prev) {
   1bfb8:	68db      	ldr	r3, [r3, #12]
   1bfba:	e7f8      	b.n	1bfae <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   1bfbc:	689a      	ldr	r2, [r3, #8]
   1bfbe:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   1bfc0:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   1bfc2:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   1bfc4:	68a3      	ldr	r3, [r4, #8]
   1bfc6:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   1bfc8:	4620      	mov	r0, r4
   1bfca:	f7ff ffaf 	bl	1bf2c <__free_block>

    malloc_unlock();
   1bfce:	4b04      	ldr	r3, [pc, #16]	; (1bfe0 <add_malloc_block+0x4c>)
   1bfd0:	681b      	ldr	r3, [r3, #0]
   1bfd2:	4798      	blx	r3
}
   1bfd4:	bd10      	pop	{r4, pc}
   1bfd6:	4770      	bx	lr
   1bfd8:	2000034c 	.word	0x2000034c
   1bfdc:	20000334 	.word	0x20000334
   1bfe0:	20000350 	.word	0x20000350

0001bfe4 <malloc>:
{
   1bfe4:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   1bfe6:	1e43      	subs	r3, r0, #1
   1bfe8:	f113 0f12 	cmn.w	r3, #18
   1bfec:	d826      	bhi.n	1c03c <malloc+0x58>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   1bfee:	f100 041f 	add.w	r4, r0, #31
   1bff2:	f024 040f 	bic.w	r4, r4, #15
    if (!malloc_lock())
   1bff6:	4b13      	ldr	r3, [pc, #76]	; (1c044 <malloc+0x60>)
   1bff8:	681b      	ldr	r3, [r3, #0]
   1bffa:	4798      	blx	r3
   1bffc:	b300      	cbz	r0, 1c040 <malloc+0x5c>
    void *result = NULL;
   1bffe:	2500      	movs	r5, #0
   1c000:	e00d      	b.n	1c01e <malloc+0x3a>
            result = __malloc_from_block(fp, size);
   1c002:	4621      	mov	r1, r4
   1c004:	f7ff ff6d 	bl	1bee2 <__malloc_from_block>
   1c008:	4605      	mov	r5, r0
    if (result == NULL) {
   1c00a:	b995      	cbnz	r5, 1c032 <malloc+0x4e>
        more_mem = _sbrk(size);
   1c00c:	4620      	mov	r0, r4
   1c00e:	f7ec f8b3 	bl	8178 <_sbrk>
        if (more_mem != (void *)-1) {
   1c012:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1c016:	d00c      	beq.n	1c032 <malloc+0x4e>
            add_malloc_block(more_mem, size);
   1c018:	4621      	mov	r1, r4
   1c01a:	f7ff ffbb 	bl	1bf94 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   1c01e:	4b0a      	ldr	r3, [pc, #40]	; (1c048 <malloc+0x64>)
   1c020:	6918      	ldr	r0, [r3, #16]
   1c022:	6803      	ldr	r3, [r0, #0]
   1c024:	2b02      	cmp	r3, #2
   1c026:	d0f0      	beq.n	1c00a <malloc+0x26>
        if (fp->a.size >= size) {
   1c028:	6843      	ldr	r3, [r0, #4]
   1c02a:	42a3      	cmp	r3, r4
   1c02c:	d2e9      	bcs.n	1c002 <malloc+0x1e>
         fp = fp->next_free) {
   1c02e:	6900      	ldr	r0, [r0, #16]
   1c030:	e7f7      	b.n	1c022 <malloc+0x3e>
    malloc_unlock();
   1c032:	4b06      	ldr	r3, [pc, #24]	; (1c04c <malloc+0x68>)
   1c034:	681b      	ldr	r3, [r3, #0]
   1c036:	4798      	blx	r3
}
   1c038:	4628      	mov	r0, r5
   1c03a:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   1c03c:	2500      	movs	r5, #0
   1c03e:	e7fb      	b.n	1c038 <malloc+0x54>
        return NULL;
   1c040:	2500      	movs	r5, #0
   1c042:	e7f9      	b.n	1c038 <malloc+0x54>
   1c044:	2000034c 	.word	0x2000034c
   1c048:	20000334 	.word	0x20000334
   1c04c:	20000350 	.word	0x20000350

0001c050 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   1c050:	b170      	cbz	r0, 1c070 <free+0x20>
{
   1c052:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   1c054:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   1c058:	4b06      	ldr	r3, [pc, #24]	; (1c074 <free+0x24>)
   1c05a:	681b      	ldr	r3, [r3, #0]
   1c05c:	4798      	blx	r3
   1c05e:	b900      	cbnz	r0, 1c062 <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   1c060:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   1c062:	4620      	mov	r0, r4
   1c064:	f7ff ff62 	bl	1bf2c <__free_block>
    malloc_unlock();
   1c068:	4b03      	ldr	r3, [pc, #12]	; (1c078 <free+0x28>)
   1c06a:	681b      	ldr	r3, [r3, #0]
   1c06c:	4798      	blx	r3
   1c06e:	e7f7      	b.n	1c060 <free+0x10>
   1c070:	4770      	bx	lr
   1c072:	bf00      	nop
   1c074:	2000034c 	.word	0x2000034c
   1c078:	20000350 	.word	0x20000350

0001c07c <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   1c07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   1c07e:	b300      	cbz	r0, 1c0c2 <realloc+0x46>
   1c080:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   1c082:	1e4b      	subs	r3, r1, #1
   1c084:	f113 0f12 	cmn.w	r3, #18
   1c088:	d820      	bhi.n	1c0cc <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   1c08a:	311f      	adds	r1, #31
   1c08c:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   1c090:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   1c094:	42a5      	cmp	r5, r4
   1c096:	d302      	bcc.n	1c09e <realloc+0x22>
   1c098:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   1c09c:	d21a      	bcs.n	1c0d4 <realloc+0x58>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   1c09e:	3d10      	subs	r5, #16

		newptr = malloc(size);
   1c0a0:	4620      	mov	r0, r4
   1c0a2:	f7ff ff9f 	bl	1bfe4 <malloc>
                if (newptr) {
   1c0a6:	4607      	mov	r7, r0
   1c0a8:	b1b0      	cbz	r0, 1c0d8 <realloc+0x5c>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   1c0aa:	4622      	mov	r2, r4
   1c0ac:	42ac      	cmp	r4, r5
   1c0ae:	bf28      	it	cs
   1c0b0:	462a      	movcs	r2, r5
   1c0b2:	4631      	mov	r1, r6
   1c0b4:	f7ef fbec 	bl	b890 <memcpy>
                    free(ptr);
   1c0b8:	4630      	mov	r0, r6
   1c0ba:	f7ff ffc9 	bl	1c050 <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   1c0be:	4638      	mov	r0, r7
   1c0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   1c0c2:	4608      	mov	r0, r1
   1c0c4:	f7ff ff8e 	bl	1bfe4 <malloc>
   1c0c8:	4607      	mov	r7, r0
   1c0ca:	e7f8      	b.n	1c0be <realloc+0x42>
		free(ptr);
   1c0cc:	f7ff ffc0 	bl	1c050 <free>
		return NULL;
   1c0d0:	2700      	movs	r7, #0
   1c0d2:	e7f4      	b.n	1c0be <realloc+0x42>
		return ptr;
   1c0d4:	4607      	mov	r7, r0
   1c0d6:	e7f2      	b.n	1c0be <realloc+0x42>
                    newptr = ptr;
   1c0d8:	4637      	mov	r7, r6
   1c0da:	e7f0      	b.n	1c0be <realloc+0x42>

0001c0dc <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1c0dc:	b40e      	push	{r1, r2, r3}
   1c0de:	b500      	push	{lr}
   1c0e0:	b082      	sub	sp, #8
   1c0e2:	ab03      	add	r3, sp, #12
   1c0e4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1c0e8:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1c0ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c0ee:	f7ef ff3b 	bl	bf68 <vsnprintf>
	va_end(ap);

	return rv;
}
   1c0f2:	b002      	add	sp, #8
   1c0f4:	f85d eb04 	ldr.w	lr, [sp], #4
   1c0f8:	b003      	add	sp, #12
   1c0fa:	4770      	bx	lr

0001c0fc <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   1c0fc:	7803      	ldrb	r3, [r0, #0]
   1c0fe:	b2ca      	uxtb	r2, r1
   1c100:	4293      	cmp	r3, r2
   1c102:	d002      	beq.n	1c10a <strchr+0xe>
		if (!*s)
   1c104:	b113      	cbz	r3, 1c10c <strchr+0x10>
			return NULL;
		s++;
   1c106:	3001      	adds	r0, #1
   1c108:	e7f8      	b.n	1c0fc <strchr>
   1c10a:	4770      	bx	lr
			return NULL;
   1c10c:	2000      	movs	r0, #0
	}

	return (char *)s;
}
   1c10e:	4770      	bx	lr

0001c110 <strcpy>:

#include <string.h>

char *strcpy(char *dst, const char *src)
{
	char *q = dst;
   1c110:	4603      	mov	r3, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   1c112:	780a      	ldrb	r2, [r1, #0]
   1c114:	701a      	strb	r2, [r3, #0]
   1c116:	3301      	adds	r3, #1
   1c118:	3101      	adds	r1, #1
	} while (ch);
   1c11a:	2a00      	cmp	r2, #0
   1c11c:	d1f9      	bne.n	1c112 <strcpy+0x2>

	return dst;
}
   1c11e:	4770      	bx	lr

0001c120 <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
   1c120:	b570      	push	{r4, r5, r6, lr}
   1c122:	4606      	mov	r6, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
   1c124:	b14a      	cbz	r2, 1c13a <strncpy+0x1a>
		n--;
   1c126:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
   1c128:	1c4d      	adds	r5, r1, #1
   1c12a:	780b      	ldrb	r3, [r1, #0]
   1c12c:	1c44      	adds	r4, r0, #1
   1c12e:	7003      	strb	r3, [r0, #0]
		if (!ch)
   1c130:	b113      	cbz	r3, 1c138 <strncpy+0x18>
		*q++ = ch = *p++;
   1c132:	4629      	mov	r1, r5
   1c134:	4620      	mov	r0, r4
   1c136:	e7f5      	b.n	1c124 <strncpy+0x4>
   1c138:	4620      	mov	r0, r4
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
   1c13a:	2100      	movs	r1, #0
   1c13c:	f7ef fbd1 	bl	b8e2 <memset>

	return dst;
}
   1c140:	4630      	mov	r0, r6
   1c142:	bd70      	pop	{r4, r5, r6, pc}

0001c144 <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   1c144:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   1c146:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   1c148:	b145      	cbz	r5, 1c15c <strsep+0x18>
   1c14a:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   1c14c:	4628      	mov	r0, r5
   1c14e:	f000 f8b2 	bl	1c2b6 <strpbrk>
	if (e)
   1c152:	b128      	cbz	r0, 1c160 <strsep+0x1c>
		*e++ = '\0';
   1c154:	1c42      	adds	r2, r0, #1
   1c156:	2100      	movs	r1, #0
   1c158:	7001      	strb	r1, [r0, #0]

	*stringp = e;
   1c15a:	6022      	str	r2, [r4, #0]
	return s;
}
   1c15c:	4628      	mov	r0, r5
   1c15e:	bd38      	pop	{r3, r4, r5, pc}
	e = strpbrk(s, delim);
   1c160:	4602      	mov	r2, r0
   1c162:	e7fa      	b.n	1c15a <strsep+0x16>

0001c164 <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   1c164:	b538      	push	{r3, r4, r5, lr}
   1c166:	460d      	mov	r5, r1
   1c168:	4614      	mov	r4, r2
	if (s)
   1c16a:	b100      	cbz	r0, 1c16e <strtok_r+0xa>
		*holder = s;
   1c16c:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   1c16e:	4629      	mov	r1, r5
   1c170:	4620      	mov	r0, r4
   1c172:	f7ff ffe7 	bl	1c144 <strsep>
	} while (s && !*s);
   1c176:	4603      	mov	r3, r0
   1c178:	b110      	cbz	r0, 1c180 <strtok_r+0x1c>
   1c17a:	7802      	ldrb	r2, [r0, #0]
   1c17c:	2a00      	cmp	r2, #0
   1c17e:	d0f6      	beq.n	1c16e <strtok_r+0xa>

	return s;
}
   1c180:	4618      	mov	r0, r3
   1c182:	bd38      	pop	{r3, r4, r5, pc}

0001c184 <strtoll>:
#include <stddef.h>
#include <stdlib.h>
#include <strntoimax.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   1c184:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1c186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c18a:	f000 f807 	bl	1c19c <strntoumax>
}
   1c18e:	bd08      	pop	{r3, pc}

0001c190 <strtoull>:
{
   1c190:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1c192:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c196:	f000 f801 	bl	1c19c <strntoumax>
}
   1c19a:	bd08      	pop	{r3, pc}

0001c19c <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   1c19c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c1a0:	4605      	mov	r5, r0
   1c1a2:	468c      	mov	ip, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   1c1a4:	e001      	b.n	1c1aa <strntoumax+0xe>
		nptr++;
   1c1a6:	3501      	adds	r5, #1
		n--;
   1c1a8:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   1c1aa:	b143      	cbz	r3, 1c1be <strntoumax+0x22>
   1c1ac:	7828      	ldrb	r0, [r5, #0]
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   1c1ae:	2820      	cmp	r0, #32
   1c1b0:	d0f9      	beq.n	1c1a6 <strntoumax+0xa>
   1c1b2:	280a      	cmp	r0, #10
   1c1b4:	d0f7      	beq.n	1c1a6 <strntoumax+0xa>
   1c1b6:	2809      	cmp	r0, #9
   1c1b8:	d0f5      	beq.n	1c1a6 <strntoumax+0xa>
   1c1ba:	280d      	cmp	r0, #13
   1c1bc:	d0f3      	beq.n	1c1a6 <strntoumax+0xa>
	}

	/* Single optional + or - */
	if (n) {
   1c1be:	b1a3      	cbz	r3, 1c1ea <strntoumax+0x4e>
		char c = *nptr;
   1c1c0:	f895 e000 	ldrb.w	lr, [r5]
		if (c == '-' || c == '+') {
   1c1c4:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   1c1c8:	d005      	beq.n	1c1d6 <strntoumax+0x3a>
   1c1ca:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   1c1ce:	d002      	beq.n	1c1d6 <strntoumax+0x3a>
	int minus = 0;
   1c1d0:	f04f 0e00 	mov.w	lr, #0
   1c1d4:	e00b      	b.n	1c1ee <strntoumax+0x52>
			minus = (c == '-');
   1c1d6:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   1c1da:	bf14      	ite	ne
   1c1dc:	f04f 0e00 	movne.w	lr, #0
   1c1e0:	f04f 0e01 	moveq.w	lr, #1
			nptr++;
   1c1e4:	3501      	adds	r5, #1
			n--;
   1c1e6:	3b01      	subs	r3, #1
   1c1e8:	e001      	b.n	1c1ee <strntoumax+0x52>
	int minus = 0;
   1c1ea:	f04f 0e00 	mov.w	lr, #0
		}
	}

	if (base == 0) {
   1c1ee:	b9ba      	cbnz	r2, 1c220 <strntoumax+0x84>
		if (n >= 2 && nptr[0] == '0' &&
   1c1f0:	2b01      	cmp	r3, #1
   1c1f2:	d902      	bls.n	1c1fa <strntoumax+0x5e>
   1c1f4:	782a      	ldrb	r2, [r5, #0]
   1c1f6:	2a30      	cmp	r2, #48	; 0x30
   1c1f8:	d005      	beq.n	1c206 <strntoumax+0x6a>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   1c1fa:	b32b      	cbz	r3, 1c248 <strntoumax+0xac>
   1c1fc:	782a      	ldrb	r2, [r5, #0]
   1c1fe:	2a30      	cmp	r2, #48	; 0x30
   1c200:	d00a      	beq.n	1c218 <strntoumax+0x7c>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   1c202:	220a      	movs	r2, #10
   1c204:	e00e      	b.n	1c224 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c206:	786a      	ldrb	r2, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1c208:	2a78      	cmp	r2, #120	; 0x78
   1c20a:	d001      	beq.n	1c210 <strntoumax+0x74>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c20c:	2a58      	cmp	r2, #88	; 0x58
   1c20e:	d1f4      	bne.n	1c1fa <strntoumax+0x5e>
			n -= 2;
   1c210:	3b02      	subs	r3, #2
			nptr += 2;
   1c212:	3502      	adds	r5, #2
			base = 16;
   1c214:	2210      	movs	r2, #16
   1c216:	e005      	b.n	1c224 <strntoumax+0x88>
			n--;
   1c218:	3b01      	subs	r3, #1
			nptr++;
   1c21a:	3501      	adds	r5, #1
			base = 8;
   1c21c:	2208      	movs	r2, #8
   1c21e:	e001      	b.n	1c224 <strntoumax+0x88>
		}
	} else if (base == 16) {
   1c220:	2a10      	cmp	r2, #16
   1c222:	d004      	beq.n	1c22e <strntoumax+0x92>
			base = 10;
   1c224:	f04f 0800 	mov.w	r8, #0
   1c228:	f04f 0900 	mov.w	r9, #0
   1c22c:	e025      	b.n	1c27a <strntoumax+0xde>
		if (n >= 2 && nptr[0] == '0' &&
   1c22e:	2b01      	cmp	r3, #1
   1c230:	d9f8      	bls.n	1c224 <strntoumax+0x88>
   1c232:	7829      	ldrb	r1, [r5, #0]
   1c234:	2930      	cmp	r1, #48	; 0x30
   1c236:	d1f5      	bne.n	1c224 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c238:	7869      	ldrb	r1, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1c23a:	2978      	cmp	r1, #120	; 0x78
   1c23c:	d001      	beq.n	1c242 <strntoumax+0xa6>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c23e:	2958      	cmp	r1, #88	; 0x58
   1c240:	d1f0      	bne.n	1c224 <strntoumax+0x88>
			n -= 2;
   1c242:	3b02      	subs	r3, #2
			nptr += 2;
   1c244:	3502      	adds	r5, #2
   1c246:	e7ed      	b.n	1c224 <strntoumax+0x88>
			base = 10;
   1c248:	220a      	movs	r2, #10
   1c24a:	e7eb      	b.n	1c224 <strntoumax+0x88>
	} else if (ch >= 'A' && ch <= 'Z') {
   1c24c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   1c250:	2e19      	cmp	r6, #25
   1c252:	d81a      	bhi.n	1c28a <strntoumax+0xee>
		return ch - 'A' + 10;
   1c254:	3c37      	subs	r4, #55	; 0x37
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1c256:	2c00      	cmp	r4, #0
   1c258:	db1d      	blt.n	1c296 <strntoumax+0xfa>
   1c25a:	42a2      	cmp	r2, r4
   1c25c:	dd1b      	ble.n	1c296 <strntoumax+0xfa>
		v = v * base + d;
   1c25e:	fb02 f109 	mul.w	r1, r2, r9
   1c262:	17d7      	asrs	r7, r2, #31
   1c264:	fb08 1607 	mla	r6, r8, r7, r1
   1c268:	fba2 0108 	umull	r0, r1, r2, r8
   1c26c:	4431      	add	r1, r6
   1c26e:	eb10 0804 	adds.w	r8, r0, r4
   1c272:	eb41 79e4 	adc.w	r9, r1, r4, asr #31
		n--;
   1c276:	3b01      	subs	r3, #1
		nptr++;
   1c278:	3501      	adds	r5, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1c27a:	b163      	cbz	r3, 1c296 <strntoumax+0xfa>
   1c27c:	782c      	ldrb	r4, [r5, #0]
	if (ch >= '0' && ch <= '9') {
   1c27e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   1c282:	2e09      	cmp	r6, #9
   1c284:	d8e2      	bhi.n	1c24c <strntoumax+0xb0>
		return ch - '0';
   1c286:	4634      	mov	r4, r6
   1c288:	e7e5      	b.n	1c256 <strntoumax+0xba>
	} else if (ch >= 'a' && ch <= 'z') {
   1c28a:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   1c28e:	2e19      	cmp	r6, #25
   1c290:	d801      	bhi.n	1c296 <strntoumax+0xfa>
		return ch - 'a' + 10;
   1c292:	3c57      	subs	r4, #87	; 0x57
   1c294:	e7df      	b.n	1c256 <strntoumax+0xba>
	}

	if (endptr)
   1c296:	f1bc 0f00 	cmp.w	ip, #0
   1c29a:	d001      	beq.n	1c2a0 <strntoumax+0x104>
		*endptr = (char *)nptr;
   1c29c:	f8cc 5000 	str.w	r5, [ip]

	return minus ? -v : v;
   1c2a0:	f1be 0f00 	cmp.w	lr, #0
   1c2a4:	d003      	beq.n	1c2ae <strntoumax+0x112>
   1c2a6:	f1d8 0800 	rsbs	r8, r8, #0
   1c2aa:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
}
   1c2ae:	4640      	mov	r0, r8
   1c2b0:	4649      	mov	r1, r9
   1c2b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001c2b6 <strpbrk>:
#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
  const char *c = s2;
  if (!*s1)
   1c2b6:	7803      	ldrb	r3, [r0, #0]
   1c2b8:	b19b      	cbz	r3, 1c2e2 <strpbrk+0x2c>
{
   1c2ba:	b410      	push	{r4}
  const char *c = s2;
   1c2bc:	460a      	mov	r2, r1
   1c2be:	e001      	b.n	1c2c4 <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   1c2c0:	b953      	cbnz	r3, 1c2d8 <strpbrk+0x22>
	break;
      s1++;
   1c2c2:	3001      	adds	r0, #1
  while (*s1)
   1c2c4:	7804      	ldrb	r4, [r0, #0]
   1c2c6:	b13c      	cbz	r4, 1c2d8 <strpbrk+0x22>
      for (c = s2; *c; c++)
   1c2c8:	460a      	mov	r2, r1
   1c2ca:	7813      	ldrb	r3, [r2, #0]
   1c2cc:	2b00      	cmp	r3, #0
   1c2ce:	d0f7      	beq.n	1c2c0 <strpbrk+0xa>
	  if (*s1 == *c)
   1c2d0:	42a3      	cmp	r3, r4
   1c2d2:	d0f5      	beq.n	1c2c0 <strpbrk+0xa>
      for (c = s2; *c; c++)
   1c2d4:	3201      	adds	r2, #1
   1c2d6:	e7f8      	b.n	1c2ca <strpbrk+0x14>
    }

  if (*c == '\0')
   1c2d8:	7813      	ldrb	r3, [r2, #0]
   1c2da:	b123      	cbz	r3, 1c2e6 <strpbrk+0x30>
    s1 = NULL;

  return (char *) s1;
}
   1c2dc:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c2e0:	4770      	bx	lr
    return (char *) NULL;
   1c2e2:	2000      	movs	r0, #0
}
   1c2e4:	4770      	bx	lr
    s1 = NULL;
   1c2e6:	2000      	movs	r0, #0
   1c2e8:	e7f8      	b.n	1c2dc <strpbrk+0x26>
	...

0001c2ec <pinetime_lvgl_mynewt_init>:
#include <console/console.h>
#include "lvgl.h"
#include "lv_port_disp.h"

/// Init the LVGL library. Called by sysinit() during startup, defined in pkg.yml.
void pinetime_lvgl_mynewt_init(void) {    
   1c2ec:	b508      	push	{r3, lr}
    console_printf("Init LVGL..."); console_flush();
   1c2ee:	4803      	ldr	r0, [pc, #12]	; (1c2fc <pinetime_lvgl_mynewt_init+0x10>)
   1c2f0:	f7ed f80a 	bl	9308 <console_printf>
   1c2f4:	f7ec ff68 	bl	91c8 <console_flush>
    ////int rc = pinetime_lvgl_mynewt_init_display(); assert(rc == 0);

    //  Init the LVGL display
    ////lv_init();
    ////lv_port_disp_init();
}
   1c2f8:	bd08      	pop	{r3, pc}
   1c2fa:	bf00      	nop
   1c2fc:	00029654 	.word	0x00029654

0001c300 <__popcountsi2>:
   1c300:	0843      	lsrs	r3, r0, #1
   1c302:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
   1c306:	1ac3      	subs	r3, r0, r3
   1c308:	0898      	lsrs	r0, r3, #2
   1c30a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
   1c30e:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
   1c312:	b480      	push	{r7}
   1c314:	4418      	add	r0, r3
   1c316:	eb00 1010 	add.w	r0, r0, r0, lsr #4
   1c31a:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
   1c31e:	eb00 4010 	add.w	r0, r0, r0, lsr #16
   1c322:	eb00 2010 	add.w	r0, r0, r0, lsr #8
   1c326:	af00      	add	r7, sp, #0
   1c328:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1c32c:	46bd      	mov	sp, r7
   1c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c332:	4770      	bx	lr

0001c334 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1c334:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1c336:	2101      	movs	r1, #1
   1c338:	4808      	ldr	r0, [pc, #32]	; (1c35c <init_sensor_coap+0x28>)
   1c33a:	f7ff fd38 	bl	1bdae <os_sem_init>
    assert(rc == OS_OK);
   1c33e:	b918      	cbnz	r0, 1c348 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1c340:	4b07      	ldr	r3, [pc, #28]	; (1c360 <init_sensor_coap+0x2c>)
   1c342:	2201      	movs	r2, #1
   1c344:	701a      	strb	r2, [r3, #0]
}
   1c346:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1c348:	f7eb ff3a 	bl	81c0 <hal_debugger_connected>
   1c34c:	b100      	cbz	r0, 1c350 <init_sensor_coap+0x1c>
   1c34e:	be01      	bkpt	0x0001
   1c350:	2300      	movs	r3, #0
   1c352:	461a      	mov	r2, r3
   1c354:	4619      	mov	r1, r3
   1c356:	4618      	mov	r0, r3
   1c358:	f7ed fb3a 	bl	99d0 <__assert_func>
   1c35c:	200081b8 	.word	0x200081b8
   1c360:	200081c0 	.word	0x200081c0

0001c364 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1c364:	4b04      	ldr	r3, [pc, #16]	; (1c378 <is_sensor_node+0x14>)
   1c366:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c36a:	4313      	orrs	r3, r2
   1c36c:	d101      	bne.n	1c372 <is_sensor_node+0xe>
    return false;
   1c36e:	2000      	movs	r0, #0
}
   1c370:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1c372:	2001      	movs	r0, #1
   1c374:	4770      	bx	lr
   1c376:	bf00      	nop
   1c378:	200081d8 	.word	0x200081d8

0001c37c <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1c37c:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1c37e:	4b1a      	ldr	r3, [pc, #104]	; (1c3e8 <get_hardware_id+0x6c>)
   1c380:	681b      	ldr	r3, [r3, #0]
   1c382:	b10b      	cbz	r3, 1c388 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1c384:	4819      	ldr	r0, [pc, #100]	; (1c3ec <get_hardware_id+0x70>)
   1c386:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1c388:	f00c f930 	bl	285ec <hal_bsp_hw_id_len>
   1c38c:	4b16      	ldr	r3, [pc, #88]	; (1c3e8 <get_hardware_id+0x6c>)
   1c38e:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1c390:	280b      	cmp	r0, #11
   1c392:	d914      	bls.n	1c3be <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1c394:	210c      	movs	r1, #12
   1c396:	4815      	ldr	r0, [pc, #84]	; (1c3ec <get_hardware_id+0x70>)
   1c398:	f00c f92a 	bl	285f0 <hal_bsp_hw_id>
   1c39c:	4b12      	ldr	r3, [pc, #72]	; (1c3e8 <get_hardware_id+0x6c>)
   1c39e:	6018      	str	r0, [r3, #0]
   1c3a0:	2800      	cmp	r0, #0
   1c3a2:	dd16      	ble.n	1c3d2 <get_hardware_id+0x56>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1c3a4:	4912      	ldr	r1, [pc, #72]	; (1c3f0 <get_hardware_id+0x74>)
   1c3a6:	4813      	ldr	r0, [pc, #76]	; (1c3f4 <get_hardware_id+0x78>)
   1c3a8:	f7ec ffae 	bl	9308 <console_printf>
   1c3ac:	4b0e      	ldr	r3, [pc, #56]	; (1c3e8 <get_hardware_id+0x6c>)
   1c3ae:	6819      	ldr	r1, [r3, #0]
   1c3b0:	480e      	ldr	r0, [pc, #56]	; (1c3ec <get_hardware_id+0x70>)
   1c3b2:	f7ec ff3f 	bl	9234 <console_dump>
   1c3b6:	4810      	ldr	r0, [pc, #64]	; (1c3f8 <get_hardware_id+0x7c>)
   1c3b8:	f7ec ffa6 	bl	9308 <console_printf>
   1c3bc:	e7e2      	b.n	1c384 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1c3be:	f7eb feff 	bl	81c0 <hal_debugger_connected>
   1c3c2:	b100      	cbz	r0, 1c3c6 <get_hardware_id+0x4a>
   1c3c4:	be01      	bkpt	0x0001
   1c3c6:	2300      	movs	r3, #0
   1c3c8:	461a      	mov	r2, r3
   1c3ca:	4619      	mov	r1, r3
   1c3cc:	4618      	mov	r0, r3
   1c3ce:	f7ed faff 	bl	99d0 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1c3d2:	f7eb fef5 	bl	81c0 <hal_debugger_connected>
   1c3d6:	b100      	cbz	r0, 1c3da <get_hardware_id+0x5e>
   1c3d8:	be01      	bkpt	0x0001
   1c3da:	2300      	movs	r3, #0
   1c3dc:	461a      	mov	r2, r3
   1c3de:	4619      	mov	r1, r3
   1c3e0:	4618      	mov	r0, r3
   1c3e2:	f7ed faf5 	bl	99d0 <__assert_func>
   1c3e6:	bf00      	nop
   1c3e8:	200081d0 	.word	0x200081d0
   1c3ec:	200081c4 	.word	0x200081c4
   1c3f0:	000296f4 	.word	0x000296f4
   1c3f4:	000296ac 	.word	0x000296ac
   1c3f8:	00029a60 	.word	0x00029a60

0001c3fc <is_collector_node>:
bool is_collector_node(void) {
   1c3fc:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1c3fe:	f7ff ffbd 	bl	1c37c <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1c402:	220c      	movs	r2, #12
   1c404:	4903      	ldr	r1, [pc, #12]	; (1c414 <is_collector_node+0x18>)
   1c406:	f7ef fa1f 	bl	b848 <memcmp>
   1c40a:	b108      	cbz	r0, 1c410 <is_collector_node+0x14>
    return false; 
   1c40c:	2000      	movs	r0, #0
}
   1c40e:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1c410:	2001      	movs	r0, #1
   1c412:	e7fc      	b.n	1c40e <is_collector_node+0x12>
   1c414:	00029664 	.word	0x00029664

0001c418 <is_standalone_node>:
bool is_standalone_node(void) {
   1c418:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1c41a:	f7ff ffef 	bl	1c3fc <is_collector_node>
   1c41e:	b928      	cbnz	r0, 1c42c <is_standalone_node+0x14>
   1c420:	4604      	mov	r4, r0
   1c422:	f7ff ff9f 	bl	1c364 <is_sensor_node>
   1c426:	b910      	cbnz	r0, 1c42e <is_standalone_node+0x16>
   1c428:	2401      	movs	r4, #1
   1c42a:	e000      	b.n	1c42e <is_standalone_node+0x16>
    return false;
   1c42c:	2400      	movs	r4, #0
}
   1c42e:	4620      	mov	r0, r4
   1c430:	bd10      	pop	{r4, pc}
	...

0001c434 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1c434:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c436:	2400      	movs	r4, #0
   1c438:	2c04      	cmp	r4, #4
   1c43a:	dc19      	bgt.n	1c470 <sensor_network_init+0x3c>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1c43c:	4b25      	ldr	r3, [pc, #148]	; (1c4d4 <sensor_network_init+0xa0>)
   1c43e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1c442:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c446:	4924      	ldr	r1, [pc, #144]	; (1c4d8 <sensor_network_init+0xa4>)
   1c448:	4824      	ldr	r0, [pc, #144]	; (1c4dc <sensor_network_init+0xa8>)
   1c44a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1c44e:	f7ff fe45 	bl	1c0dc <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1c452:	3001      	adds	r0, #1
   1c454:	280b      	cmp	r0, #11
   1c456:	dc01      	bgt.n	1c45c <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c458:	3401      	adds	r4, #1
   1c45a:	e7ed      	b.n	1c438 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1c45c:	f7eb feb0 	bl	81c0 <hal_debugger_connected>
   1c460:	b100      	cbz	r0, 1c464 <sensor_network_init+0x30>
   1c462:	be01      	bkpt	0x0001
   1c464:	2300      	movs	r3, #0
   1c466:	461a      	mov	r2, r3
   1c468:	4619      	mov	r1, r3
   1c46a:	4618      	mov	r0, r3
   1c46c:	f7ed fab0 	bl	99d0 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1c470:	f7ff ff84 	bl	1c37c <get_hardware_id>
   1c474:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c476:	2400      	movs	r4, #0
   1c478:	2c04      	cmp	r4, #4
   1c47a:	dc19      	bgt.n	1c4b0 <sensor_network_init+0x7c>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1c47c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1c480:	0093      	lsls	r3, r2, #2
   1c482:	220c      	movs	r2, #12
   1c484:	4916      	ldr	r1, [pc, #88]	; (1c4e0 <sensor_network_init+0xac>)
   1c486:	4419      	add	r1, r3
   1c488:	4628      	mov	r0, r5
   1c48a:	f7ef f9dd 	bl	b848 <memcmp>
   1c48e:	b108      	cbz	r0, 1c494 <sensor_network_init+0x60>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c490:	3401      	adds	r4, #1
   1c492:	e7f1      	b.n	1c478 <sensor_network_init+0x44>
            sensor_node_address = sensor_node_addresses[i];
   1c494:	4b0f      	ldr	r3, [pc, #60]	; (1c4d4 <sensor_network_init+0xa0>)
   1c496:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1c49a:	e9d3 0100 	ldrd	r0, r1, [r3]
   1c49e:	4b11      	ldr	r3, [pc, #68]	; (1c4e4 <sensor_network_init+0xb0>)
   1c4a0:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1c4a4:	1c63      	adds	r3, r4, #1
   1c4a6:	4a10      	ldr	r2, [pc, #64]	; (1c4e8 <sensor_network_init+0xb4>)
   1c4a8:	4910      	ldr	r1, [pc, #64]	; (1c4ec <sensor_network_init+0xb8>)
   1c4aa:	4811      	ldr	r0, [pc, #68]	; (1c4f0 <sensor_network_init+0xbc>)
   1c4ac:	f7ec ff2c 	bl	9308 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1c4b0:	f7ff ffa4 	bl	1c3fc <is_collector_node>
   1c4b4:	b940      	cbnz	r0, 1c4c8 <sensor_network_init+0x94>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1c4b6:	f7ff ffaf 	bl	1c418 <is_standalone_node>
   1c4ba:	b150      	cbz	r0, 1c4d2 <sensor_network_init+0x9e>
   1c4bc:	4a0a      	ldr	r2, [pc, #40]	; (1c4e8 <sensor_network_init+0xb4>)
   1c4be:	490b      	ldr	r1, [pc, #44]	; (1c4ec <sensor_network_init+0xb8>)
   1c4c0:	480c      	ldr	r0, [pc, #48]	; (1c4f4 <sensor_network_init+0xc0>)
   1c4c2:	f7ec ff21 	bl	9308 <console_printf>
}
   1c4c6:	e004      	b.n	1c4d2 <sensor_network_init+0x9e>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1c4c8:	4a07      	ldr	r2, [pc, #28]	; (1c4e8 <sensor_network_init+0xb4>)
   1c4ca:	4908      	ldr	r1, [pc, #32]	; (1c4ec <sensor_network_init+0xb8>)
   1c4cc:	480a      	ldr	r0, [pc, #40]	; (1c4f8 <sensor_network_init+0xc4>)
   1c4ce:	f7ec ff1b 	bl	9308 <console_printf>
}
   1c4d2:	bd38      	pop	{r3, r4, r5, pc}
   1c4d4:	00029708 	.word	0x00029708
   1c4d8:	000296b4 	.word	0x000296b4
   1c4dc:	20000354 	.word	0x20000354
   1c4e0:	00029670 	.word	0x00029670
   1c4e4:	200081d8 	.word	0x200081d8
   1c4e8:	000296bc 	.word	0x000296bc
   1c4ec:	000296f4 	.word	0x000296f4
   1c4f0:	000296c4 	.word	0x000296c4
   1c4f4:	000296e4 	.word	0x000296e4
   1c4f8:	000296d4 	.word	0x000296d4

0001c4fc <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1c4fc:	b530      	push	{r4, r5, lr}
   1c4fe:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1c500:	2200      	movs	r2, #0
   1c502:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c506:	4814      	ldr	r0, [pc, #80]	; (1c558 <config_device+0x5c>)
   1c508:	f7ed fd5c 	bl	9fc4 <os_dev_open>
    assert(dev != NULL);
   1c50c:	b178      	cbz	r0, 1c52e <config_device+0x32>
   1c50e:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1c510:	4668      	mov	r0, sp
   1c512:	f000 f884 	bl	1c61e <temp_stub_default_cfg>
    assert(rc == 0);
   1c516:	b9a0      	cbnz	r0, 1c542 <config_device+0x46>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1c518:	4669      	mov	r1, sp
   1c51a:	4620      	mov	r0, r4
   1c51c:	f000 f920 	bl	1c760 <temp_stub_config>
   1c520:	4605      	mov	r5, r0
    os_dev_close(dev);
   1c522:	4620      	mov	r0, r4
   1c524:	f7ed fd70 	bl	a008 <os_dev_close>
    return rc;
}
   1c528:	4628      	mov	r0, r5
   1c52a:	b003      	add	sp, #12
   1c52c:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1c52e:	f7eb fe47 	bl	81c0 <hal_debugger_connected>
   1c532:	b100      	cbz	r0, 1c536 <config_device+0x3a>
   1c534:	be01      	bkpt	0x0001
   1c536:	2300      	movs	r3, #0
   1c538:	461a      	mov	r2, r3
   1c53a:	4619      	mov	r1, r3
   1c53c:	4618      	mov	r0, r3
   1c53e:	f7ed fa47 	bl	99d0 <__assert_func>
    assert(rc == 0);
   1c542:	f7eb fe3d 	bl	81c0 <hal_debugger_connected>
   1c546:	b100      	cbz	r0, 1c54a <config_device+0x4e>
   1c548:	be01      	bkpt	0x0001
   1c54a:	2300      	movs	r3, #0
   1c54c:	461a      	mov	r2, r3
   1c54e:	4619      	mov	r1, r3
   1c550:	4618      	mov	r0, r3
   1c552:	f7ed fa3d 	bl	99d0 <__assert_func>
   1c556:	bf00      	nop
   1c558:	00029730 	.word	0x00029730

0001c55c <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1c55c:	b510      	push	{r4, lr}
   1c55e:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1c560:	4c14      	ldr	r4, [pc, #80]	; (1c5b4 <temp_stub_create+0x58>)
   1c562:	4621      	mov	r1, r4
   1c564:	4814      	ldr	r0, [pc, #80]	; (1c5b8 <temp_stub_create+0x5c>)
   1c566:	f7ec fecf 	bl	9308 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1c56a:	4b14      	ldr	r3, [pc, #80]	; (1c5bc <temp_stub_create+0x60>)
   1c56c:	9301      	str	r3, [sp, #4]
   1c56e:	4b14      	ldr	r3, [pc, #80]	; (1c5c0 <temp_stub_create+0x64>)
   1c570:	9300      	str	r3, [sp, #0]
   1c572:	2300      	movs	r3, #0
   1c574:	2201      	movs	r2, #1
   1c576:	4621      	mov	r1, r4
   1c578:	4812      	ldr	r0, [pc, #72]	; (1c5c4 <temp_stub_create+0x68>)
   1c57a:	f7ed fcdd 	bl	9f38 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1c57e:	b920      	cbnz	r0, 1c58a <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1c580:	f7ff ffbc 	bl	1c4fc <config_device>
    assert(rc == 0);
   1c584:	b958      	cbnz	r0, 1c59e <temp_stub_create+0x42>
}
   1c586:	b002      	add	sp, #8
   1c588:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1c58a:	f7eb fe19 	bl	81c0 <hal_debugger_connected>
   1c58e:	b100      	cbz	r0, 1c592 <temp_stub_create+0x36>
   1c590:	be01      	bkpt	0x0001
   1c592:	2300      	movs	r3, #0
   1c594:	461a      	mov	r2, r3
   1c596:	4619      	mov	r1, r3
   1c598:	4618      	mov	r0, r3
   1c59a:	f7ed fa19 	bl	99d0 <__assert_func>
    assert(rc == 0);
   1c59e:	f7eb fe0f 	bl	81c0 <hal_debugger_connected>
   1c5a2:	b100      	cbz	r0, 1c5a6 <temp_stub_create+0x4a>
   1c5a4:	be01      	bkpt	0x0001
   1c5a6:	2300      	movs	r3, #0
   1c5a8:	461a      	mov	r2, r3
   1c5aa:	4619      	mov	r1, r3
   1c5ac:	4618      	mov	r0, r3
   1c5ae:	f7ed fa0f 	bl	99d0 <__assert_func>
   1c5b2:	bf00      	nop
   1c5b4:	00029730 	.word	0x00029730
   1c5b8:	0002973c 	.word	0x0002973c
   1c5bc:	20008218 	.word	0x20008218
   1c5c0:	0001c62d 	.word	0x0001c62d
   1c5c4:	20008230 	.word	0x20008230

0001c5c8 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1c5c8:	2000      	movs	r0, #0
   1c5ca:	4770      	bx	lr

0001c5cc <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1c5cc:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1c5d0:	2100      	movs	r1, #0
   1c5d2:	ea50 0301 	orrs.w	r3, r0, r1
   1c5d6:	d004      	beq.n	1c5e2 <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1c5d8:	9b00      	ldr	r3, [sp, #0]
   1c5da:	2201      	movs	r2, #1
   1c5dc:	701a      	strb	r2, [r3, #0]
    return (0);
   1c5de:	2000      	movs	r0, #0
   1c5e0:	4770      	bx	lr
err:
    return (rc);
   1c5e2:	f06f 0001 	mvn.w	r0, #1
}
   1c5e6:	4770      	bx	lr

0001c5e8 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1c5e8:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1c5ea:	b120      	cbz	r0, 1c5f6 <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1c5ec:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1c5f0:	d00b      	beq.n	1c60a <temp_stub_open+0x22>
}
   1c5f2:	2000      	movs	r0, #0
   1c5f4:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1c5f6:	f7eb fde3 	bl	81c0 <hal_debugger_connected>
   1c5fa:	b100      	cbz	r0, 1c5fe <temp_stub_open+0x16>
   1c5fc:	be01      	bkpt	0x0001
   1c5fe:	2300      	movs	r3, #0
   1c600:	461a      	mov	r2, r3
   1c602:	4619      	mov	r1, r3
   1c604:	4618      	mov	r0, r3
   1c606:	f7ed f9e3 	bl	99d0 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1c60a:	f7eb fdd9 	bl	81c0 <hal_debugger_connected>
   1c60e:	b100      	cbz	r0, 1c612 <temp_stub_open+0x2a>
   1c610:	be01      	bkpt	0x0001
   1c612:	2300      	movs	r3, #0
   1c614:	461a      	mov	r2, r3
   1c616:	4619      	mov	r1, r3
   1c618:	4618      	mov	r0, r3
   1c61a:	f7ed f9d9 	bl	99d0 <__assert_func>

0001c61e <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1c61e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c622:	2300      	movs	r3, #0
   1c624:	e9c0 2300 	strd	r2, r3, [r0]
}
   1c628:	2000      	movs	r0, #0
   1c62a:	4770      	bx	lr

0001c62c <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1c62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1c62e:	b379      	cbz	r1, 1c690 <temp_stub_init+0x64>
   1c630:	460d      	mov	r5, r1
   1c632:	b380      	cbz	r0, 1c696 <temp_stub_init+0x6a>
   1c634:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1c636:	30b0      	adds	r0, #176	; 0xb0
   1c638:	f7ff fff1 	bl	1c61e <temp_stub_default_cfg>
    if (rc) { goto err; }
   1c63c:	4603      	mov	r3, r0
   1c63e:	b108      	cbz	r0, 1c644 <temp_stub_init+0x18>
}
   1c640:	4618      	mov	r0, r3
   1c642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1c644:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1c648:	4621      	mov	r1, r4
   1c64a:	4630      	mov	r0, r6
   1c64c:	f7ff fa11 	bl	1ba72 <sensor_init>
    if (rc != 0) { goto err; }
   1c650:	4603      	mov	r3, r0
   1c652:	2800      	cmp	r0, #0
   1c654:	d1f4      	bne.n	1c640 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1c656:	4b11      	ldr	r3, [pc, #68]	; (1c69c <temp_stub_init+0x70>)
   1c658:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1c65a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1c65e:	2300      	movs	r3, #0
   1c660:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1c664:	682a      	ldr	r2, [r5, #0]
   1c666:	686f      	ldr	r7, [r5, #4]
   1c668:	68a8      	ldr	r0, [r5, #8]
   1c66a:	68e9      	ldr	r1, [r5, #12]
   1c66c:	6722      	str	r2, [r4, #112]	; 0x70
   1c66e:	6767      	str	r7, [r4, #116]	; 0x74
   1c670:	67a0      	str	r0, [r4, #120]	; 0x78
   1c672:	67e1      	str	r1, [r4, #124]	; 0x7c
   1c674:	692a      	ldr	r2, [r5, #16]
   1c676:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1c67a:	4630      	mov	r0, r6
   1c67c:	f7ff f9e2 	bl	1ba44 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1c680:	4603      	mov	r3, r0
   1c682:	2800      	cmp	r0, #0
   1c684:	d1dc      	bne.n	1c640 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1c686:	4a06      	ldr	r2, [pc, #24]	; (1c6a0 <temp_stub_init+0x74>)
   1c688:	6022      	str	r2, [r4, #0]
   1c68a:	4a06      	ldr	r2, [pc, #24]	; (1c6a4 <temp_stub_init+0x78>)
   1c68c:	60e2      	str	r2, [r4, #12]
    return (0);
   1c68e:	e7d7      	b.n	1c640 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1c690:	f06f 0308 	mvn.w	r3, #8
   1c694:	e7d4      	b.n	1c640 <temp_stub_init+0x14>
   1c696:	f06f 0308 	mvn.w	r3, #8
   1c69a:	e7d1      	b.n	1c640 <temp_stub_init+0x14>
   1c69c:	0002974c 	.word	0x0002974c
   1c6a0:	0001c5e9 	.word	0x0001c5e9
   1c6a4:	0001c5c9 	.word	0x0001c5c9

0001c6a8 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1c6a8:	b538      	push	{r3, r4, r5, lr}
   1c6aa:	460d      	mov	r5, r1
   1c6ac:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1c6ae:	480a      	ldr	r0, [pc, #40]	; (1c6d8 <temp_stub_get_raw_temperature+0x30>)
   1c6b0:	f7ec fe2a 	bl	9308 <console_printf>
    assert(temp_sum);
   1c6b4:	b134      	cbz	r4, 1c6c4 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1c6b6:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1c6ba:	fb01 f105 	mul.w	r1, r1, r5
   1c6be:	6021      	str	r1, [r4, #0]
}
   1c6c0:	2000      	movs	r0, #0
   1c6c2:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1c6c4:	f7eb fd7c 	bl	81c0 <hal_debugger_connected>
   1c6c8:	b100      	cbz	r0, 1c6cc <temp_stub_get_raw_temperature+0x24>
   1c6ca:	be01      	bkpt	0x0001
   1c6cc:	2300      	movs	r3, #0
   1c6ce:	461a      	mov	r2, r3
   1c6d0:	4619      	mov	r1, r3
   1c6d2:	4618      	mov	r0, r3
   1c6d4:	f7ed f97c 	bl	99d0 <__assert_func>
   1c6d8:	00029774 	.word	0x00029774

0001c6dc <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1c6dc:	b530      	push	{r4, r5, lr}
   1c6de:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1c6e0:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1c6e4:	2500      	movs	r5, #0
   1c6e6:	ea54 0305 	orrs.w	r3, r4, r5
   1c6ea:	d036      	beq.n	1c75a <temp_stub_sensor_read+0x7e>
   1c6ec:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1c6ee:	6805      	ldr	r5, [r0, #0]
   1c6f0:	b165      	cbz	r5, 1c70c <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1c6f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c6f6:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1c6f8:	2200      	movs	r2, #0
   1c6fa:	4611      	mov	r1, r2
   1c6fc:	4628      	mov	r0, r5
   1c6fe:	f7ff ff73 	bl	1c5e8 <temp_stub_open>
        if (rc) { goto err; }
   1c702:	4603      	mov	r3, r0
   1c704:	b160      	cbz	r0, 1c720 <temp_stub_sensor_read+0x44>
}
   1c706:	4618      	mov	r0, r3
   1c708:	b007      	add	sp, #28
   1c70a:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1c70c:	f7eb fd58 	bl	81c0 <hal_debugger_connected>
   1c710:	b100      	cbz	r0, 1c714 <temp_stub_sensor_read+0x38>
   1c712:	be01      	bkpt	0x0001
   1c714:	2300      	movs	r3, #0
   1c716:	461a      	mov	r2, r3
   1c718:	4619      	mov	r1, r3
   1c71a:	4618      	mov	r0, r3
   1c71c:	f7ed f958 	bl	99d0 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1c720:	2300      	movs	r3, #0
   1c722:	aa03      	add	r2, sp, #12
   1c724:	2101      	movs	r1, #1
   1c726:	4628      	mov	r0, r5
   1c728:	f7ff ffbe 	bl	1c6a8 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1c72c:	4603      	mov	r3, r0
   1c72e:	2800      	cmp	r0, #0
   1c730:	d1e9      	bne.n	1c706 <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1c732:	9a03      	ldr	r2, [sp, #12]
   1c734:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1c736:	2201      	movs	r2, #1
   1c738:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1c73c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c73e:	2a00      	cmp	r2, #0
   1c740:	d0e1      	beq.n	1c706 <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1c742:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1c746:	2300      	movs	r3, #0
   1c748:	e9cd 2300 	strd	r2, r3, [sp]
   1c74c:	aa04      	add	r2, sp, #16
   1c74e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c750:	4620      	mov	r0, r4
   1c752:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c754:	4798      	blx	r3
   1c756:	4603      	mov	r3, r0
   1c758:	e7d5      	b.n	1c706 <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1c75a:	f06f 0301 	mvn.w	r3, #1
   1c75e:	e7d2      	b.n	1c706 <temp_stub_sensor_read+0x2a>

0001c760 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1c760:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1c762:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1c766:	d009      	beq.n	1c77c <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1c768:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1c76c:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1c770:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c774:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1c778:	2000      	movs	r0, #0
   1c77a:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1c77c:	f7eb fd20 	bl	81c0 <hal_debugger_connected>
   1c780:	b100      	cbz	r0, 1c784 <temp_stub_config+0x24>
   1c782:	be01      	bkpt	0x0001
   1c784:	2300      	movs	r3, #0
   1c786:	461a      	mov	r2, r3
   1c788:	4619      	mov	r1, r3
   1c78a:	4618      	mov	r0, r3
   1c78c:	f7ed f920 	bl	99d0 <__assert_func>

0001c790 <smp_free_buf>:
}

static void
smp_free_buf(void *m, void *arg)
{
    if (!m) {
   1c790:	b118      	cbz	r0, 1c79a <smp_free_buf+0xa>
{
   1c792:	b508      	push	{r3, lr}
        return;
    }

    os_mbuf_free_chain(m);
   1c794:	f7ed fd96 	bl	a2c4 <os_mbuf_free_chain>
}
   1c798:	bd08      	pop	{r3, pc}
   1c79a:	4770      	bx	lr

0001c79c <smp_init_writer>:
smp_init_writer(struct cbor_encoder_writer *writer, void *m,
		void *arg)
{
    struct cbor_mbuf_writer *cmw;
     
    if (!writer) {
   1c79c:	b120      	cbz	r0, 1c7a8 <smp_init_writer+0xc>
{
   1c79e:	b508      	push	{r3, lr}
        return MGMT_ERR_EINVAL;
    }

    cmw = (struct cbor_mbuf_writer *)writer;
    cbor_mbuf_writer_init(cmw, m);
   1c7a0:	f00b fed8 	bl	28554 <cbor_mbuf_writer_init>

    return 0;
   1c7a4:	2000      	movs	r0, #0
}
   1c7a6:	bd08      	pop	{r3, pc}
        return MGMT_ERR_EINVAL;
   1c7a8:	2003      	movs	r0, #3
}
   1c7aa:	4770      	bx	lr

0001c7ac <smp_init_reader>:
    if (!reader) {
   1c7ac:	b128      	cbz	r0, 1c7ba <smp_init_reader+0xe>
{
   1c7ae:	b508      	push	{r3, lr}
    cbor_mbuf_reader_init(cmr, m, 0);
   1c7b0:	2200      	movs	r2, #0
   1c7b2:	f00b fe91 	bl	284d8 <cbor_mbuf_reader_init>
    return 0;
   1c7b6:	2000      	movs	r0, #0
}
   1c7b8:	bd08      	pop	{r3, pc}
        return MGMT_ERR_EINVAL;
   1c7ba:	2003      	movs	r0, #3
}
   1c7bc:	4770      	bx	lr

0001c7be <smp_write_at>:
{
   1c7be:	b538      	push	{r3, r4, r5, lr}
    if (!writer) {
   1c7c0:	b160      	cbz	r0, 1c7dc <smp_write_at+0x1e>
   1c7c2:	4604      	mov	r4, r0
    m = cmw->m;
   1c7c4:	6885      	ldr	r5, [r0, #8]
    if (offset > OS_MBUF_PKTLEN(m)) {
   1c7c6:	8a28      	ldrh	r0, [r5, #16]
   1c7c8:	4288      	cmp	r0, r1
   1c7ca:	d309      	bcc.n	1c7e0 <smp_write_at+0x22>
    rc = os_mbuf_copyinto(m, offset, data, len);
   1c7cc:	4628      	mov	r0, r5
   1c7ce:	f7ed ff9a 	bl	a706 <os_mbuf_copyinto>
    if (rc) {
   1c7d2:	4603      	mov	r3, r0
   1c7d4:	b938      	cbnz	r0, 1c7e6 <smp_write_at+0x28>
    writer->bytes_written = OS_MBUF_PKTLEN(m);
   1c7d6:	8a2a      	ldrh	r2, [r5, #16]
   1c7d8:	6062      	str	r2, [r4, #4]
    return 0;
   1c7da:	e002      	b.n	1c7e2 <smp_write_at+0x24>
        return MGMT_ERR_EINVAL;
   1c7dc:	2303      	movs	r3, #3
   1c7de:	e000      	b.n	1c7e2 <smp_write_at+0x24>
        return MGMT_ERR_EINVAL;
   1c7e0:	2303      	movs	r3, #3
}
   1c7e2:	4618      	mov	r0, r3
   1c7e4:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   1c7e6:	2302      	movs	r3, #2
   1c7e8:	e7fb      	b.n	1c7e2 <smp_write_at+0x24>

0001c7ea <smp_reset_buf>:
    if (!m) {
   1c7ea:	b128      	cbz	r0, 1c7f8 <smp_reset_buf+0xe>
{
   1c7ec:	b508      	push	{r3, lr}
    os_mbuf_adj(m, -1 * OS_MBUF_PKTLEN((struct os_mbuf *)m));
   1c7ee:	8a01      	ldrh	r1, [r0, #16]
   1c7f0:	4249      	negs	r1, r1
   1c7f2:	f7ed fe96 	bl	a522 <os_mbuf_adj>
}
   1c7f6:	bd08      	pop	{r3, pc}
   1c7f8:	4770      	bx	lr

0001c7fa <smp_trim_front>:
{
   1c7fa:	b508      	push	{r3, lr}
    os_mbuf_adj(m, len);
   1c7fc:	f7ed fe91 	bl	a522 <os_mbuf_adj>
}
   1c800:	bd08      	pop	{r3, pc}

0001c802 <smp_alloc_rsp>:
{
   1c802:	b538      	push	{r3, r4, r5, lr}
   if (!req) {
   1c804:	b188      	cbz	r0, 1c82a <smp_alloc_rsp+0x28>
   1c806:	4604      	mov	r4, r0
   rsp = os_msys_get_pkthdr(0, OS_MBUF_USRHDR_LEN(m));
   1c808:	7941      	ldrb	r1, [r0, #5]
   1c80a:	3908      	subs	r1, #8
   1c80c:	b289      	uxth	r1, r1
   1c80e:	2000      	movs	r0, #0
   1c810:	f7ee fa71 	bl	acf6 <os_msys_get_pkthdr>
   if (!rsp) {
   1c814:	4605      	mov	r5, r0
   1c816:	b150      	cbz	r0, 1c82e <smp_alloc_rsp+0x2c>
   memcpy(OS_MBUF_USRHDR(rsp), OS_MBUF_USRHDR(m), OS_MBUF_USRHDR_LEN(m));
   1c818:	7962      	ldrb	r2, [r4, #5]
   1c81a:	3a08      	subs	r2, #8
   1c81c:	f104 0118 	add.w	r1, r4, #24
   1c820:	3018      	adds	r0, #24
   1c822:	f7ef f835 	bl	b890 <memcpy>
}
   1c826:	4628      	mov	r0, r5
   1c828:	bd38      	pop	{r3, r4, r5, pc}
       return NULL;
   1c82a:	2500      	movs	r5, #0
   1c82c:	e7fb      	b.n	1c826 <smp_alloc_rsp+0x24>
       return NULL;
   1c82e:	2500      	movs	r5, #0
   1c830:	e7f9      	b.n	1c826 <smp_alloc_rsp+0x24>

0001c832 <smp_rsp_frag_alloc>:
/**
 * Allocates an mbuf to costain an outgoing response fragment.
 */
static struct os_mbuf *
smp_rsp_frag_alloc(uint16_t frag_size, void *arg)
{
   1c832:	b538      	push	{r3, r4, r5, lr}
   1c834:	460c      	mov	r4, r1
    /* We need to duplicate the user header from the source response, as that
     * is where transport-specific information is stored.
     */
    src_rsp = arg;

    frag = os_msys_get_pkthdr(frag_size, OS_MBUF_USRHDR_LEN(src_rsp));
   1c836:	7949      	ldrb	r1, [r1, #5]
   1c838:	3908      	subs	r1, #8
   1c83a:	b289      	uxth	r1, r1
   1c83c:	f7ee fa5b 	bl	acf6 <os_msys_get_pkthdr>
    if (frag != NULL) {
   1c840:	4605      	mov	r5, r0
   1c842:	b130      	cbz	r0, 1c852 <smp_rsp_frag_alloc+0x20>
        /* Copy the user header from the response into the fragmest mbuf. */
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
               OS_MBUF_USRHDR_LEN(src_rsp));
   1c844:	7962      	ldrb	r2, [r4, #5]
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
   1c846:	3a08      	subs	r2, #8
   1c848:	f104 0118 	add.w	r1, r4, #24
   1c84c:	3018      	adds	r0, #24
   1c84e:	f7ef f81f 	bl	b890 <memcpy>
    }

    return frag;
}
   1c852:	4628      	mov	r0, r5
   1c854:	bd38      	pop	{r3, r4, r5, pc}
	...

0001c858 <smp_tx_rsp>:

int
smp_tx_rsp(struct smp_streamer *ns, void *rsp, void *arg)
{
   1c858:	b570      	push	{r4, r5, r6, lr}
   1c85a:	b082      	sub	sp, #8
   1c85c:	460c      	mov	r4, r1
   1c85e:	4615      	mov	r5, r2
    struct os_mbuf *m;
    uint16_t mtu;
    int rc;

    st = arg;
    m  = rsp;
   1c860:	9101      	str	r1, [sp, #4]

    mtu = st->st_get_mtu(rsp);
   1c862:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1c864:	4608      	mov	r0, r1
   1c866:	4798      	blx	r3
    if (mtu == 0U) {
   1c868:	4606      	mov	r6, r0
   1c86a:	b180      	cbz	r0, 1c88e <smp_tx_rsp+0x36>
        /* The transport cannot support a transmission right now. */
        return MGMT_ERR_EUNKNOWN;
    }

    while (m != NULL) {
   1c86c:	9b01      	ldr	r3, [sp, #4]
   1c86e:	b163      	cbz	r3, 1c88a <smp_tx_rsp+0x32>
        frag = mem_split_frag(&m, mtu, smp_rsp_frag_alloc, rsp);
   1c870:	4623      	mov	r3, r4
   1c872:	4a09      	ldr	r2, [pc, #36]	; (1c898 <smp_tx_rsp+0x40>)
   1c874:	4631      	mov	r1, r6
   1c876:	a801      	add	r0, sp, #4
   1c878:	f7fa fd2f 	bl	172da <mem_split_frag>
        if (frag == NULL) {
   1c87c:	b150      	cbz	r0, 1c894 <smp_tx_rsp+0x3c>
            return MGMT_ERR_ENOMEM;
        }

        rc = st->st_output(frag);
   1c87e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1c880:	4790      	blx	r2
        if (rc != 0) {
   1c882:	2800      	cmp	r0, #0
   1c884:	d0f2      	beq.n	1c86c <smp_tx_rsp+0x14>
            return MGMT_ERR_EUNKNOWN;
   1c886:	2001      	movs	r0, #1
   1c888:	e002      	b.n	1c890 <smp_tx_rsp+0x38>
        }
    }

    return 0;
   1c88a:	2000      	movs	r0, #0
   1c88c:	e000      	b.n	1c890 <smp_tx_rsp+0x38>
        return MGMT_ERR_EUNKNOWN;
   1c88e:	2001      	movs	r0, #1
}
   1c890:	b002      	add	sp, #8
   1c892:	bd70      	pop	{r4, r5, r6, pc}
            return MGMT_ERR_ENOMEM;
   1c894:	2002      	movs	r0, #2
   1c896:	e7fb      	b.n	1c890 <smp_tx_rsp+0x38>
   1c898:	0001c833 	.word	0x0001c833

0001c89c <smp_process_packet>:
    struct cbor_mbuf_reader reader;
    struct cbor_mbuf_writer writer;
    struct os_mbuf *m;
    int rc;

    if (!st) {
   1c89c:	b1c0      	cbz	r0, 1c8d0 <smp_process_packet+0x34>
{
   1c89e:	b510      	push	{r4, lr}
   1c8a0:	b08c      	sub	sp, #48	; 0x30
   1c8a2:	4604      	mov	r4, r0
        return MGMT_ERR_EINVAL;
    }

    st->st_streamer = (struct smp_streamer) {
   1c8a4:	4b0e      	ldr	r3, [pc, #56]	; (1c8e0 <smp_process_packet+0x44>)
   1c8a6:	6003      	str	r3, [r0, #0]
   1c8a8:	6060      	str	r0, [r4, #4]
   1c8aa:	ab03      	add	r3, sp, #12
   1c8ac:	6083      	str	r3, [r0, #8]
   1c8ae:	f8c0 d00c 	str.w	sp, [r0, #12]
   1c8b2:	4b0c      	ldr	r3, [pc, #48]	; (1c8e4 <smp_process_packet+0x48>)
   1c8b4:	6103      	str	r3, [r0, #16]
        },
        .tx_rsp_cb = smp_tx_rsp,
    };

    while (1) {
        m = os_mqueue_get(&st->st_imq);
   1c8b6:	f104 0014 	add.w	r0, r4, #20
   1c8ba:	f7ed fc8e 	bl	a1da <os_mqueue_get>
        if (!m) {
   1c8be:	4601      	mov	r1, r0
   1c8c0:	b148      	cbz	r0, 1c8d6 <smp_process_packet+0x3a>
            break;
        }

        rc = smp_process_request_packet(&st->st_streamer, m);
   1c8c2:	4620      	mov	r0, r4
   1c8c4:	f00a fdde 	bl	27484 <smp_process_request_packet>
        if (rc) {
   1c8c8:	4603      	mov	r3, r0
   1c8ca:	2800      	cmp	r0, #0
   1c8cc:	d0f3      	beq.n	1c8b6 <smp_process_packet+0x1a>
   1c8ce:	e003      	b.n	1c8d8 <smp_process_packet+0x3c>
        return MGMT_ERR_EINVAL;
   1c8d0:	2303      	movs	r3, #3
            return rc;
        }
    }
    
    return 0;
}
   1c8d2:	4618      	mov	r0, r3
   1c8d4:	4770      	bx	lr
    return 0;
   1c8d6:	2300      	movs	r3, #0
}
   1c8d8:	4618      	mov	r0, r3
   1c8da:	b00c      	add	sp, #48	; 0x30
   1c8dc:	bd10      	pop	{r4, pc}
   1c8de:	bf00      	nop
   1c8e0:	0002978c 	.word	0x0002978c
   1c8e4:	0001c859 	.word	0x0001c859

0001c8e8 <smp_event_data_in>:
    return rc;
}

static void
smp_event_data_in(struct os_event *ev)
{
   1c8e8:	b508      	push	{r3, lr}
    smp_process_packet(ev->ev_arg);
   1c8ea:	6880      	ldr	r0, [r0, #8]
   1c8ec:	f7ff ffd6 	bl	1c89c <smp_process_packet>
}
   1c8f0:	bd08      	pop	{r3, pc}
	...

0001c8f4 <mgmt_evq_set>:
    g_smp_evq = evq;
   1c8f4:	4b01      	ldr	r3, [pc, #4]	; (1c8fc <mgmt_evq_set+0x8>)
   1c8f6:	6018      	str	r0, [r3, #0]
}
   1c8f8:	4770      	bx	lr
   1c8fa:	bf00      	nop
   1c8fc:	200082f0 	.word	0x200082f0

0001c900 <smp_rx_req>:
{
   1c900:	b538      	push	{r3, r4, r5, lr}
   1c902:	460c      	mov	r4, r1
    rc = os_mqueue_put(&st->st_imq, os_eventq_dflt_get(), req);
   1c904:	f100 0514 	add.w	r5, r0, #20
   1c908:	f7ed fc5a 	bl	a1c0 <os_eventq_dflt_get>
   1c90c:	4622      	mov	r2, r4
   1c90e:	4601      	mov	r1, r0
   1c910:	4628      	mov	r0, r5
   1c912:	f7ed fc75 	bl	a200 <os_mqueue_put>
    if (rc) {
   1c916:	4605      	mov	r5, r0
   1c918:	b908      	cbnz	r0, 1c91e <smp_rx_req+0x1e>
}
   1c91a:	4628      	mov	r0, r5
   1c91c:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(req);
   1c91e:	4620      	mov	r0, r4
   1c920:	f7ed fcd0 	bl	a2c4 <os_mbuf_free_chain>
    return rc;
   1c924:	e7f9      	b.n	1c91a <smp_rx_req+0x1a>
	...

0001c928 <smp_transport_init>:

int
smp_transport_init(struct smp_transport *st,
                   smp_transport_out_func_t output_func,
                   smp_transport_get_mtu_func_t get_mtu_func)
{
   1c928:	b508      	push	{r3, lr}
    int rc;

    st->st_output = output_func;
   1c92a:	62c1      	str	r1, [r0, #44]	; 0x2c
    st->st_get_mtu = get_mtu_func;
   1c92c:	6302      	str	r2, [r0, #48]	; 0x30

    rc = os_mqueue_init(&st->st_imq, smp_event_data_in, st);
   1c92e:	4602      	mov	r2, r0
   1c930:	4902      	ldr	r1, [pc, #8]	; (1c93c <smp_transport_init+0x14>)
   1c932:	3014      	adds	r0, #20
   1c934:	f7ed fc48 	bl	a1c8 <os_mqueue_init>
    }

    return 0;
err:
    return rc;
}
   1c938:	bd08      	pop	{r3, pc}
   1c93a:	bf00      	nop
   1c93c:	0001c8e9 	.word	0x0001c8e9

0001c940 <smp_pkg_init>:

void
smp_pkg_init(void)
{
   1c940:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1c942:	4b09      	ldr	r3, [pc, #36]	; (1c968 <smp_pkg_init+0x28>)
   1c944:	781b      	ldrb	r3, [r3, #0]
   1c946:	b123      	cbz	r3, 1c952 <smp_pkg_init+0x12>

    mgmt_evq_set(os_eventq_dflt_get());
   1c948:	f7ed fc3a 	bl	a1c0 <os_eventq_dflt_get>
   1c94c:	f7ff ffd2 	bl	1c8f4 <mgmt_evq_set>
}
   1c950:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c952:	f7eb fc35 	bl	81c0 <hal_debugger_connected>
   1c956:	b100      	cbz	r0, 1c95a <smp_pkg_init+0x1a>
   1c958:	be01      	bkpt	0x0001
   1c95a:	2300      	movs	r3, #0
   1c95c:	461a      	mov	r2, r3
   1c95e:	4619      	mov	r1, r3
   1c960:	4618      	mov	r0, r3
   1c962:	f7ed f835 	bl	99d0 <__assert_func>
   1c966:	bf00      	nop
   1c968:	20000506 	.word	0x20000506

0001c96c <smp_ble_get_mtu>:
            return BLE_ATT_ERR_UNLIKELY;
    }
}

uint16_t
smp_ble_get_mtu(struct os_mbuf *req) {
   1c96c:	b508      	push	{r3, lr}

    uint16_t conn_handle;
    uint16_t mtu;

    memcpy(&conn_handle, OS_MBUF_USRHDR(req), sizeof (conn_handle));
    mtu = ble_att_mtu(conn_handle);
   1c96e:	8b00      	ldrh	r0, [r0, #24]
   1c970:	f7f7 ff1f 	bl	147b2 <ble_att_mtu>
    if (!mtu) {
   1c974:	4603      	mov	r3, r0
   1c976:	b108      	cbz	r0, 1c97c <smp_ble_get_mtu+0x10>
        /* No longer connected. */
        return 0;
    }

    /* 3 is the number of bytes for ATT notification base */
    mtu = mtu - 3;
   1c978:	1ec3      	subs	r3, r0, #3
   1c97a:	b29b      	uxth	r3, r3

    return (mtu);
}
   1c97c:	4618      	mov	r0, r3
   1c97e:	bd08      	pop	{r3, pc}

0001c980 <smp_ble_out>:
    }
}

static int
smp_ble_out(struct os_mbuf *om)
{
   1c980:	b538      	push	{r3, r4, r5, lr}
   1c982:	4604      	mov	r4, r0
    int rc;

    rc = os_mqueue_put(&g_smp_ble_mq, os_eventq_dflt_get(), om);
   1c984:	f7ed fc1c 	bl	a1c0 <os_eventq_dflt_get>
   1c988:	4622      	mov	r2, r4
   1c98a:	4601      	mov	r1, r0
   1c98c:	4805      	ldr	r0, [pc, #20]	; (1c9a4 <smp_ble_out+0x24>)
   1c98e:	f7ed fc37 	bl	a200 <os_mqueue_put>
    if (rc != 0) {
   1c992:	4605      	mov	r5, r0
   1c994:	b908      	cbnz	r0, 1c99a <smp_ble_out+0x1a>

    return 0;
err:
    os_mbuf_free_chain(om);
    return rc;
}
   1c996:	4628      	mov	r0, r5
   1c998:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(om);
   1c99a:	4620      	mov	r0, r4
   1c99c:	f7ed fc92 	bl	a2c4 <os_mbuf_free_chain>
    return rc;
   1c9a0:	e7f9      	b.n	1c996 <smp_ble_out+0x16>
   1c9a2:	bf00      	nop
   1c9a4:	200082f8 	.word	0x200082f8

0001c9a8 <smp_ble_event_data_in>:
{
   1c9a8:	b508      	push	{r3, lr}
    while ((m_resp = os_mqueue_get(&g_smp_ble_mq)) != NULL) {
   1c9aa:	480d      	ldr	r0, [pc, #52]	; (1c9e0 <smp_ble_event_data_in+0x38>)
   1c9ac:	f7ed fc15 	bl	a1da <os_mqueue_get>
   1c9b0:	4603      	mov	r3, r0
   1c9b2:	b1a0      	cbz	r0, 1c9de <smp_ble_event_data_in+0x36>
        assert(OS_MBUF_USRHDR_LEN(m_resp) >= sizeof (conn_handle));
   1c9b4:	795a      	ldrb	r2, [r3, #5]
   1c9b6:	3a08      	subs	r2, #8
   1c9b8:	2a01      	cmp	r2, #1
   1c9ba:	d906      	bls.n	1c9ca <smp_ble_event_data_in+0x22>
        ble_gattc_notify_custom(conn_handle, g_ble_smp_attr_handle,
   1c9bc:	461a      	mov	r2, r3
   1c9be:	4909      	ldr	r1, [pc, #36]	; (1c9e4 <smp_ble_event_data_in+0x3c>)
   1c9c0:	8809      	ldrh	r1, [r1, #0]
   1c9c2:	8b18      	ldrh	r0, [r3, #24]
   1c9c4:	f7f1 ff6d 	bl	e8a2 <ble_gattc_notify_custom>
   1c9c8:	e7ef      	b.n	1c9aa <smp_ble_event_data_in+0x2>
        assert(OS_MBUF_USRHDR_LEN(m_resp) >= sizeof (conn_handle));
   1c9ca:	f7eb fbf9 	bl	81c0 <hal_debugger_connected>
   1c9ce:	b100      	cbz	r0, 1c9d2 <smp_ble_event_data_in+0x2a>
   1c9d0:	be01      	bkpt	0x0001
   1c9d2:	2300      	movs	r3, #0
   1c9d4:	461a      	mov	r2, r3
   1c9d6:	4619      	mov	r1, r3
   1c9d8:	4618      	mov	r0, r3
   1c9da:	f7ec fff9 	bl	99d0 <__assert_func>
}
   1c9de:	bd08      	pop	{r3, pc}
   1c9e0:	200082f8 	.word	0x200082f8
   1c9e4:	200082f4 	.word	0x200082f4

0001c9e8 <gatt_svr_chr_access_smp>:
{
   1c9e8:	b570      	push	{r4, r5, r6, lr}
    switch (ctxt->op) {
   1c9ea:	7813      	ldrb	r3, [r2, #0]
   1c9ec:	2b01      	cmp	r3, #1
   1c9ee:	d136      	bne.n	1ca5e <gatt_svr_chr_access_smp+0x76>
   1c9f0:	4606      	mov	r6, r0
   1c9f2:	4615      	mov	r5, r2
            if (OS_MBUF_USRHDR_LEN(ctxt->om) >= sizeof (conn_handle)) {
   1c9f4:	6854      	ldr	r4, [r2, #4]
   1c9f6:	7963      	ldrb	r3, [r4, #5]
   1c9f8:	f1a3 0208 	sub.w	r2, r3, #8
   1c9fc:	2a01      	cmp	r2, #1
   1c9fe:	d90a      	bls.n	1ca16 <gatt_svr_chr_access_smp+0x2e>
                ctxt->om = NULL;
   1ca00:	2300      	movs	r3, #0
   1ca02:	606b      	str	r3, [r5, #4]
            memcpy(OS_MBUF_USRHDR(m_req), &conn_handle, sizeof(conn_handle));
   1ca04:	8326      	strh	r6, [r4, #24]
            rc = smp_rx_req(&g_smp_ble_transport, m_req);
   1ca06:	4621      	mov	r1, r4
   1ca08:	481b      	ldr	r0, [pc, #108]	; (1ca78 <gatt_svr_chr_access_smp+0x90>)
   1ca0a:	f7ff ff79 	bl	1c900 <smp_rx_req>
            if (rc) {
   1ca0e:	4603      	mov	r3, r0
   1ca10:	bb18      	cbnz	r0, 1ca5a <gatt_svr_chr_access_smp+0x72>
}
   1ca12:	4618      	mov	r0, r3
   1ca14:	bd70      	pop	{r4, r5, r6, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1ca16:	2b07      	cmp	r3, #7
   1ca18:	d901      	bls.n	1ca1e <gatt_svr_chr_access_smp+0x36>
        startoff = om->om_pkthdr_len;
   1ca1a:	b29b      	uxth	r3, r3
   1ca1c:	e000      	b.n	1ca20 <gatt_svr_chr_access_smp+0x38>
    startoff = 0;
   1ca1e:	2300      	movs	r3, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1ca20:	4621      	mov	r1, r4
   1ca22:	f851 2b10 	ldr.w	r2, [r1], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1ca26:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1ca28:	1ad3      	subs	r3, r2, r3
   1ca2a:	b29b      	uxth	r3, r3
            } else if (OS_MBUF_LEADINGSPACE(ctxt->om) >=
   1ca2c:	2b01      	cmp	r3, #1
   1ca2e:	d905      	bls.n	1ca3c <gatt_svr_chr_access_smp+0x54>
                ctxt->om = NULL;
   1ca30:	2300      	movs	r3, #0
   1ca32:	606b      	str	r3, [r5, #4]
                m_req->om_pkthdr_len += sizeof (conn_handle);
   1ca34:	7963      	ldrb	r3, [r4, #5]
   1ca36:	3302      	adds	r3, #2
   1ca38:	7163      	strb	r3, [r4, #5]
   1ca3a:	e7e3      	b.n	1ca04 <gatt_svr_chr_access_smp+0x1c>
                m_req = os_msys_get_pkthdr(OS_MBUF_PKTLEN(ctxt->om),
   1ca3c:	2102      	movs	r1, #2
   1ca3e:	8a20      	ldrh	r0, [r4, #16]
   1ca40:	f7ee f959 	bl	acf6 <os_msys_get_pkthdr>
                if (!m_req) {
   1ca44:	4604      	mov	r4, r0
   1ca46:	b1a0      	cbz	r0, 1ca72 <gatt_svr_chr_access_smp+0x8a>
                rc = os_mbuf_appendfrom(m_req, ctxt->om, 0,
   1ca48:	6869      	ldr	r1, [r5, #4]
   1ca4a:	8a0b      	ldrh	r3, [r1, #16]
   1ca4c:	2200      	movs	r2, #0
   1ca4e:	f7ed fd11 	bl	a474 <os_mbuf_appendfrom>
                if (rc) {
   1ca52:	2800      	cmp	r0, #0
   1ca54:	d0d6      	beq.n	1ca04 <gatt_svr_chr_access_smp+0x1c>
                    return BLE_ATT_ERR_INSUFFICIENT_RES;
   1ca56:	2311      	movs	r3, #17
   1ca58:	e7db      	b.n	1ca12 <gatt_svr_chr_access_smp+0x2a>
                return BLE_ATT_ERR_UNLIKELY;
   1ca5a:	230e      	movs	r3, #14
   1ca5c:	e7d9      	b.n	1ca12 <gatt_svr_chr_access_smp+0x2a>
            assert(0);
   1ca5e:	f7eb fbaf 	bl	81c0 <hal_debugger_connected>
   1ca62:	b100      	cbz	r0, 1ca66 <gatt_svr_chr_access_smp+0x7e>
   1ca64:	be01      	bkpt	0x0001
   1ca66:	2300      	movs	r3, #0
   1ca68:	461a      	mov	r2, r3
   1ca6a:	4619      	mov	r1, r3
   1ca6c:	4618      	mov	r0, r3
   1ca6e:	f7ec ffaf 	bl	99d0 <__assert_func>
                    return BLE_ATT_ERR_INSUFFICIENT_RES;
   1ca72:	2311      	movs	r3, #17
   1ca74:	e7cd      	b.n	1ca12 <gatt_svr_chr_access_smp+0x2a>
   1ca76:	bf00      	nop
   1ca78:	20008310 	.word	0x20008310

0001ca7c <smp_ble_gatt_svr_init>:
 * @param eventq
 * @return 0 on success; non-zero on failure
 */
int
smp_ble_gatt_svr_init(void)
{
   1ca7c:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
   1ca7e:	480c      	ldr	r0, [pc, #48]	; (1cab0 <smp_ble_gatt_svr_init+0x34>)
   1ca80:	f7f2 ffb6 	bl	f9f0 <ble_gatts_count_cfg>
    if (rc != 0) {
   1ca84:	4603      	mov	r3, r0
   1ca86:	b108      	cbz	r0, 1ca8c <smp_ble_gatt_svr_init+0x10>

    rc = smp_transport_init(&g_smp_ble_transport, smp_ble_out, smp_ble_get_mtu);

err:
    return rc;
}
   1ca88:	4618      	mov	r0, r3
   1ca8a:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
   1ca8c:	4808      	ldr	r0, [pc, #32]	; (1cab0 <smp_ble_gatt_svr_init+0x34>)
   1ca8e:	f7f2 ff8b 	bl	f9a8 <ble_gatts_add_svcs>
    if (rc != 0) {
   1ca92:	4603      	mov	r3, r0
   1ca94:	2800      	cmp	r0, #0
   1ca96:	d1f7      	bne.n	1ca88 <smp_ble_gatt_svr_init+0xc>
    os_mqueue_init(&g_smp_ble_mq, &smp_ble_event_data_in, NULL);
   1ca98:	2200      	movs	r2, #0
   1ca9a:	4906      	ldr	r1, [pc, #24]	; (1cab4 <smp_ble_gatt_svr_init+0x38>)
   1ca9c:	4806      	ldr	r0, [pc, #24]	; (1cab8 <smp_ble_gatt_svr_init+0x3c>)
   1ca9e:	f7ed fb93 	bl	a1c8 <os_mqueue_init>
    rc = smp_transport_init(&g_smp_ble_transport, smp_ble_out, smp_ble_get_mtu);
   1caa2:	4a06      	ldr	r2, [pc, #24]	; (1cabc <smp_ble_gatt_svr_init+0x40>)
   1caa4:	4906      	ldr	r1, [pc, #24]	; (1cac0 <smp_ble_gatt_svr_init+0x44>)
   1caa6:	4807      	ldr	r0, [pc, #28]	; (1cac4 <smp_ble_gatt_svr_init+0x48>)
   1caa8:	f7ff ff3e 	bl	1c928 <smp_transport_init>
   1caac:	4603      	mov	r3, r0
   1caae:	e7eb      	b.n	1ca88 <smp_ble_gatt_svr_init+0xc>
   1cab0:	000297d0 	.word	0x000297d0
   1cab4:	0001c9a9 	.word	0x0001c9a9
   1cab8:	200082f8 	.word	0x200082f8
   1cabc:	0001c96d 	.word	0x0001c96d
   1cac0:	0001c981 	.word	0x0001c981
   1cac4:	20008310 	.word	0x20008310

0001cac8 <smp_ble_pkg_init>:

void
smp_ble_pkg_init(void)
{
   1cac8:	b510      	push	{r4, lr}
   1caca:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1cacc:	4b0f      	ldr	r3, [pc, #60]	; (1cb0c <smp_ble_pkg_init+0x44>)
   1cace:	781b      	ldrb	r3, [r3, #0]
   1cad0:	b123      	cbz	r3, 1cadc <smp_ble_pkg_init+0x14>

    rc = smp_ble_gatt_svr_init();
   1cad2:	f7ff ffd3 	bl	1ca7c <smp_ble_gatt_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cad6:	b958      	cbnz	r0, 1caf0 <smp_ble_pkg_init+0x28>
}
   1cad8:	b002      	add	sp, #8
   1cada:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cadc:	f7eb fb70 	bl	81c0 <hal_debugger_connected>
   1cae0:	b100      	cbz	r0, 1cae4 <smp_ble_pkg_init+0x1c>
   1cae2:	be01      	bkpt	0x0001
   1cae4:	2300      	movs	r3, #0
   1cae6:	461a      	mov	r2, r3
   1cae8:	4619      	mov	r1, r3
   1caea:	4618      	mov	r0, r3
   1caec:	f7ec ff70 	bl	99d0 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1caf0:	f7eb fb66 	bl	81c0 <hal_debugger_connected>
   1caf4:	b100      	cbz	r0, 1caf8 <smp_ble_pkg_init+0x30>
   1caf6:	be01      	bkpt	0x0001
   1caf8:	2000      	movs	r0, #0
   1cafa:	9000      	str	r0, [sp, #0]
   1cafc:	4b04      	ldr	r3, [pc, #16]	; (1cb10 <smp_ble_pkg_init+0x48>)
   1cafe:	681c      	ldr	r4, [r3, #0]
   1cb00:	4603      	mov	r3, r0
   1cb02:	4602      	mov	r2, r0
   1cb04:	4601      	mov	r1, r0
   1cb06:	47a0      	blx	r4
}
   1cb08:	e7e6      	b.n	1cad8 <smp_ble_pkg_init+0x10>
   1cb0a:	bf00      	nop
   1cb0c:	20000506 	.word	0x20000506
   1cb10:	200000ec 	.word	0x200000ec

0001cb14 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1cb14:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1cb16:	e002      	b.n	1cb1e <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1cb18:	4618      	mov	r0, r3
   1cb1a:	f000 f85b 	bl	1cbd4 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1cb1e:	4808      	ldr	r0, [pc, #32]	; (1cb40 <oc_buffer_tx+0x2c>)
   1cb20:	f7ed fb5b 	bl	a1da <os_mqueue_get>
   1cb24:	4603      	mov	r3, r0
   1cb26:	b148      	cbz	r0, 1cb3c <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1cb28:	2200      	movs	r2, #0
   1cb2a:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1cb2c:	7e1a      	ldrb	r2, [r3, #24]
   1cb2e:	f012 0f08 	tst.w	r2, #8
   1cb32:	d0f1      	beq.n	1cb18 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1cb34:	4618      	mov	r0, r3
   1cb36:	f000 f85d 	bl	1cbf4 <oc_send_multicast_message>
   1cb3a:	e7f0      	b.n	1cb1e <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1cb3c:	bd08      	pop	{r3, pc}
   1cb3e:	bf00      	nop
   1cb40:	2000835c 	.word	0x2000835c

0001cb44 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1cb44:	b500      	push	{lr}
   1cb46:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1cb48:	4808      	ldr	r0, [pc, #32]	; (1cb6c <oc_buffer_rx+0x28>)
   1cb4a:	f7ed fb46 	bl	a1da <os_mqueue_get>
   1cb4e:	9001      	str	r0, [sp, #4]
   1cb50:	b140      	cbz	r0, 1cb64 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1cb52:	a801      	add	r0, sp, #4
   1cb54:	f00b f8cc 	bl	27cf0 <__wrap_coap_receive>
#endif
        if (m) {
   1cb58:	9801      	ldr	r0, [sp, #4]
   1cb5a:	2800      	cmp	r0, #0
   1cb5c:	d0f4      	beq.n	1cb48 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1cb5e:	f7ed fbb1 	bl	a2c4 <os_mbuf_free_chain>
   1cb62:	e7f1      	b.n	1cb48 <oc_buffer_rx+0x4>
        }
    }
}
   1cb64:	b003      	add	sp, #12
   1cb66:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb6a:	bf00      	nop
   1cb6c:	20008344 	.word	0x20008344

0001cb70 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1cb70:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1cb72:	2200      	movs	r2, #0
   1cb74:	4904      	ldr	r1, [pc, #16]	; (1cb88 <oc_buffer_init+0x18>)
   1cb76:	4805      	ldr	r0, [pc, #20]	; (1cb8c <oc_buffer_init+0x1c>)
   1cb78:	f7ed fb26 	bl	a1c8 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1cb7c:	2200      	movs	r2, #0
   1cb7e:	4904      	ldr	r1, [pc, #16]	; (1cb90 <oc_buffer_init+0x20>)
   1cb80:	4804      	ldr	r0, [pc, #16]	; (1cb94 <oc_buffer_init+0x24>)
   1cb82:	f7ed fb21 	bl	a1c8 <os_mqueue_init>
}
   1cb86:	bd08      	pop	{r3, pc}
   1cb88:	0001cb45 	.word	0x0001cb45
   1cb8c:	20008344 	.word	0x20008344
   1cb90:	0001cb15 	.word	0x0001cb15
   1cb94:	2000835c 	.word	0x2000835c

0001cb98 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1cb98:	b500      	push	{lr}
   1cb9a:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1cb9c:	4b07      	ldr	r3, [pc, #28]	; (1cbbc <oc_ri_mem_init+0x24>)
   1cb9e:	9300      	str	r3, [sp, #0]
   1cba0:	4b07      	ldr	r3, [pc, #28]	; (1cbc0 <oc_ri_mem_init+0x28>)
   1cba2:	226c      	movs	r2, #108	; 0x6c
   1cba4:	2102      	movs	r1, #2
   1cba6:	4807      	ldr	r0, [pc, #28]	; (1cbc4 <oc_ri_mem_init+0x2c>)
   1cba8:	f7ed ff96 	bl	aad8 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1cbac:	f000 f866 	bl	1cc7c <oc_rep_init>
#endif
    oc_buffer_init();
   1cbb0:	f7ff ffde 	bl	1cb70 <oc_buffer_init>
}
   1cbb4:	b003      	add	sp, #12
   1cbb6:	f85d fb04 	ldr.w	pc, [sp], #4
   1cbba:	bf00      	nop
   1cbbc:	000297f0 	.word	0x000297f0
   1cbc0:	20008374 	.word	0x20008374
   1cbc4:	2000844c 	.word	0x2000844c

0001cbc8 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1cbc8:	4b01      	ldr	r3, [pc, #4]	; (1cbd0 <oc_evq_set+0x8>)
   1cbca:	6018      	str	r0, [r3, #0]
}
   1cbcc:	4770      	bx	lr
   1cbce:	bf00      	nop
   1cbd0:	20008468 	.word	0x20008468

0001cbd4 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1cbd4:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1cbd6:	7e03      	ldrb	r3, [r0, #24]
   1cbd8:	f003 0307 	and.w	r3, r3, #7
   1cbdc:	4a04      	ldr	r2, [pc, #16]	; (1cbf0 <oc_send_buffer+0x1c>)
   1cbde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1cbe2:	b113      	cbz	r3, 1cbea <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1cbe4:	68db      	ldr	r3, [r3, #12]
   1cbe6:	4798      	blx	r3
    } else {
        OC_LOG_ERROR("Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1cbe8:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1cbea:	f7ed fb6b 	bl	a2c4 <os_mbuf_free_chain>
}
   1cbee:	e7fb      	b.n	1cbe8 <oc_send_buffer+0x14>
   1cbf0:	2000846c 	.word	0x2000846c

0001cbf4 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1cbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cbf8:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1cbfa:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1cbfc:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1cbfe:	e002      	b.n	1cc06 <oc_send_multicast_message+0x12>
   1cc00:	4635      	mov	r5, r6
   1cc02:	3401      	adds	r4, #1
   1cc04:	462e      	mov	r6, r5
   1cc06:	2c07      	cmp	r4, #7
   1cc08:	dc12      	bgt.n	1cc30 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1cc0a:	4b0c      	ldr	r3, [pc, #48]	; (1cc3c <oc_send_multicast_message+0x48>)
   1cc0c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1cc10:	2d00      	cmp	r5, #0
   1cc12:	d0f5      	beq.n	1cc00 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1cc14:	2e00      	cmp	r6, #0
   1cc16:	d0f4      	beq.n	1cc02 <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1cc18:	4638      	mov	r0, r7
   1cc1a:	f7ed fbb9 	bl	a390 <os_mbuf_dup>
   1cc1e:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1cc20:	6933      	ldr	r3, [r6, #16]
   1cc22:	4638      	mov	r0, r7
   1cc24:	4798      	blx	r3
            if (!n) {
   1cc26:	f1b8 0f00 	cmp.w	r8, #0
   1cc2a:	d005      	beq.n	1cc38 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1cc2c:	4647      	mov	r7, r8
   1cc2e:	e7e8      	b.n	1cc02 <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1cc30:	b116      	cbz	r6, 1cc38 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1cc32:	6933      	ldr	r3, [r6, #16]
   1cc34:	4638      	mov	r0, r7
   1cc36:	4798      	blx	r3
    }
}
   1cc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cc3c:	2000846c 	.word	0x2000846c

0001cc40 <oc_init>:
    return 0;
}

void
oc_init(void)
{
   1cc40:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1cc42:	4b0a      	ldr	r3, [pc, #40]	; (1cc6c <oc_init+0x2c>)
   1cc44:	781b      	ldrb	r3, [r3, #0]
   1cc46:	b133      	cbz	r3, 1cc56 <oc_init+0x16>
    oc_ri_mem_init();
   1cc48:	f7ff ffa6 	bl	1cb98 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1cc4c:	f7ed fab8 	bl	a1c0 <os_eventq_dflt_get>
   1cc50:	f7ff ffba 	bl	1cbc8 <oc_evq_set>
}
   1cc54:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cc56:	f7eb fab3 	bl	81c0 <hal_debugger_connected>
   1cc5a:	b100      	cbz	r0, 1cc5e <oc_init+0x1e>
   1cc5c:	be01      	bkpt	0x0001
   1cc5e:	2300      	movs	r3, #0
   1cc60:	461a      	mov	r2, r3
   1cc62:	4619      	mov	r1, r3
   1cc64:	4618      	mov	r0, r3
   1cc66:	f7ec feb3 	bl	99d0 <__assert_func>
   1cc6a:	bf00      	nop
   1cc6c:	20000506 	.word	0x20000506

0001cc70 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1cc70:	4770      	bx	lr

0001cc72 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1cc72:	4770      	bx	lr

0001cc74 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1cc74:	4770      	bx	lr

0001cc76 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1cc76:	4770      	bx	lr

0001cc78 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1cc78:	4770      	bx	lr

0001cc7a <oc_register_tcp4>:
                         "oc_tcp4_conn_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);

    oc_tcp4_transport_id = oc_transport_register(&oc_tcp4_transport);
#endif
}
   1cc7a:	4770      	bx	lr

0001cc7c <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1cc7c:	b500      	push	{lr}
   1cc7e:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1cc80:	4b05      	ldr	r3, [pc, #20]	; (1cc98 <oc_rep_init+0x1c>)
   1cc82:	9300      	str	r3, [sp, #0]
   1cc84:	4b05      	ldr	r3, [pc, #20]	; (1cc9c <oc_rep_init+0x20>)
   1cc86:	2218      	movs	r2, #24
   1cc88:	2102      	movs	r1, #2
   1cc8a:	4805      	ldr	r0, [pc, #20]	; (1cca0 <oc_rep_init+0x24>)
   1cc8c:	f7ed ff24 	bl	aad8 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1cc90:	b003      	add	sp, #12
   1cc92:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc96:	bf00      	nop
   1cc98:	000297fc 	.word	0x000297fc
   1cc9c:	200084a8 	.word	0x200084a8
   1cca0:	2000848c 	.word	0x2000848c

0001cca4 <ble_ll_flush_pkt_queue>:
 *
 * @param pktq
 */
static void
ble_ll_flush_pkt_queue(struct ble_ll_pkt_q *pktq)
{
   1cca4:	b510      	push	{r4, lr}
   1cca6:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *pkthdr;
    struct os_mbuf *om;

    /* FLush all packets from Link layer queues */
    while (STAILQ_FIRST(pktq)) {
   1cca8:	e001      	b.n	1ccae <ble_ll_flush_pkt_queue+0xa>
        pkthdr = STAILQ_FIRST(pktq);
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);

        /* Remove from queue and free the mbuf */
        STAILQ_REMOVE_HEAD(pktq, omp_next);
        os_mbuf_free_chain(om);
   1ccaa:	f7ed fb0b 	bl	a2c4 <os_mbuf_free_chain>
    while (STAILQ_FIRST(pktq)) {
   1ccae:	6823      	ldr	r3, [r4, #0]
   1ccb0:	b13b      	cbz	r3, 1ccc2 <ble_ll_flush_pkt_queue+0x1e>
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   1ccb2:	f1a3 0010 	sub.w	r0, r3, #16
        STAILQ_REMOVE_HEAD(pktq, omp_next);
   1ccb6:	685b      	ldr	r3, [r3, #4]
   1ccb8:	6023      	str	r3, [r4, #0]
   1ccba:	2b00      	cmp	r3, #0
   1ccbc:	d1f5      	bne.n	1ccaa <ble_ll_flush_pkt_queue+0x6>
   1ccbe:	6064      	str	r4, [r4, #4]
   1ccc0:	e7f3      	b.n	1ccaa <ble_ll_flush_pkt_queue+0x6>
    }
}
   1ccc2:	bd10      	pop	{r4, pc}

0001ccc4 <ble_ll_task>:
{
   1ccc4:	b508      	push	{r3, lr}
    ble_phy_init();
   1ccc6:	f009 f953 	bl	25f70 <ble_phy_init>
    ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   1ccca:	2000      	movs	r0, #0
   1cccc:	f009 fa60 	bl	26190 <ble_phy_txpwr_set>
    ble_hci_trans_cfg_ll(ble_ll_hci_cmd_rx, NULL, ble_ll_hci_acl_rx, NULL);
   1ccd0:	2300      	movs	r3, #0
   1ccd2:	4a0d      	ldr	r2, [pc, #52]	; (1cd08 <ble_ll_task+0x44>)
   1ccd4:	4619      	mov	r1, r3
   1ccd6:	480d      	ldr	r0, [pc, #52]	; (1cd0c <ble_ll_task+0x48>)
   1ccd8:	f7f9 fc20 	bl	1651c <ble_hci_trans_cfg_ll>
    ble_ll_hci_send_noop();
   1ccdc:	f005 feeb 	bl	22ab6 <ble_ll_hci_send_noop>
    ble_ll_rand_start();
   1cce0:	f006 f974 	bl	22fcc <ble_ll_rand_start>
        ev = os_eventq_get(&evq->evq);
   1cce4:	480a      	ldr	r0, [pc, #40]	; (1cd10 <ble_ll_task+0x4c>)
   1cce6:	f7ed f9f8 	bl	a0da <os_eventq_get>
        assert(ev);
   1ccea:	b110      	cbz	r0, 1ccf2 <ble_ll_task+0x2e>
    ev->ev.ev_cb(&ev->ev);
   1ccec:	6842      	ldr	r2, [r0, #4]
   1ccee:	4790      	blx	r2
   1ccf0:	e7f8      	b.n	1cce4 <ble_ll_task+0x20>
   1ccf2:	f7eb fa65 	bl	81c0 <hal_debugger_connected>
   1ccf6:	b100      	cbz	r0, 1ccfa <ble_ll_task+0x36>
   1ccf8:	be01      	bkpt	0x0001
   1ccfa:	2300      	movs	r3, #0
   1ccfc:	461a      	mov	r2, r3
   1ccfe:	4619      	mov	r1, r3
   1cd00:	4618      	mov	r0, r3
   1cd02:	f7ec fe65 	bl	99d0 <__assert_func>
   1cd06:	bf00      	nop
   1cd08:	00022bf1 	.word	0x00022bf1
   1cd0c:	00022bb5 	.word	0x00022bb5
   1cd10:	200084e8 	.word	0x200084e8

0001cd14 <ble_ll_hw_err_timer_cb>:
{
   1cd14:	b508      	push	{r3, lr}
    if (ble_ll_hci_ev_hw_err(BLE_HW_ERR_HCI_SYNC_LOSS)) {
   1cd16:	2001      	movs	r0, #1
   1cd18:	f006 f8b0 	bl	22e7c <ble_ll_hci_ev_hw_err>
   1cd1c:	b900      	cbnz	r0, 1cd20 <ble_ll_hw_err_timer_cb+0xc>
}
   1cd1e:	bd08      	pop	{r3, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1cd20:	2106      	movs	r1, #6
   1cd22:	4802      	ldr	r0, [pc, #8]	; (1cd2c <ble_ll_hw_err_timer_cb+0x18>)
   1cd24:	f7ed f828 	bl	9d78 <os_callout_reset>
   1cd28:	e7f9      	b.n	1cd1e <ble_ll_hw_err_timer_cb+0xa>
   1cd2a:	bf00      	nop
   1cd2c:	20008560 	.word	0x20008560

0001cd30 <ble_ll_event_comp_pkts>:
{
   1cd30:	b508      	push	{r3, lr}
    ble_ll_conn_num_comp_pkts_event_send(NULL);
   1cd32:	2000      	movs	r0, #0
   1cd34:	f003 fd74 	bl	20820 <ble_ll_conn_num_comp_pkts_event_send>
}
   1cd38:	bd08      	pop	{r3, pc}

0001cd3a <ble_ll_event_dbuf_overflow>:
{
   1cd3a:	b508      	push	{r3, lr}
    ble_ll_hci_ev_databuf_overflow();
   1cd3c:	f006 f8b6 	bl	22eac <ble_ll_hci_ev_databuf_overflow>
}
   1cd40:	bd08      	pop	{r3, pc}
	...

0001cd44 <ble_ll_tx_pkt_in>:
{
   1cd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   1cd46:	e006      	b.n	1cd56 <ble_ll_tx_pkt_in+0x12>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   1cd48:	4613      	mov	r3, r2
   1cd4a:	3260      	adds	r2, #96	; 0x60
   1cd4c:	665a      	str	r2, [r3, #100]	; 0x64
   1cd4e:	e00c      	b.n	1cd6a <ble_ll_tx_pkt_in+0x26>
            os_mbuf_free_chain(om);
   1cd50:	4628      	mov	r0, r5
   1cd52:	f7ed fab7 	bl	a2c4 <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   1cd56:	4b15      	ldr	r3, [pc, #84]	; (1cdac <ble_ll_tx_pkt_in+0x68>)
   1cd58:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   1cd5a:	b32c      	cbz	r4, 1cda8 <ble_ll_tx_pkt_in+0x64>
        om = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   1cd5c:	f1a4 0510 	sub.w	r5, r4, #16
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   1cd60:	6863      	ldr	r3, [r4, #4]
   1cd62:	4a12      	ldr	r2, [pc, #72]	; (1cdac <ble_ll_tx_pkt_in+0x68>)
   1cd64:	6613      	str	r3, [r2, #96]	; 0x60
   1cd66:	2b00      	cmp	r3, #0
   1cd68:	d0ee      	beq.n	1cd48 <ble_ll_tx_pkt_in+0x4>
        handle = get_le16(om->om_data);
   1cd6a:	f854 0c10 	ldr.w	r0, [r4, #-16]
   1cd6e:	f7fe ff5e 	bl	1bc2e <get_le16>
   1cd72:	4607      	mov	r7, r0
        length = get_le16(om->om_data + 2);
   1cd74:	f854 0c10 	ldr.w	r0, [r4, #-16]
   1cd78:	3002      	adds	r0, #2
   1cd7a:	f7fe ff58 	bl	1bc2e <get_le16>
   1cd7e:	4606      	mov	r6, r0
        os_mbuf_adj(om, sizeof(struct hci_data_hdr));
   1cd80:	2104      	movs	r1, #4
   1cd82:	4628      	mov	r0, r5
   1cd84:	f7ed fbcd 	bl	a522 <os_mbuf_adj>
        pb = handle & 0x3000;
   1cd88:	f407 5240 	and.w	r2, r7, #12288	; 0x3000
        if ((pkthdr->omp_len != length) || (pb > 0x1000) || (length == 0)) {
   1cd8c:	8823      	ldrh	r3, [r4, #0]
   1cd8e:	42b3      	cmp	r3, r6
   1cd90:	d1de      	bne.n	1cd50 <ble_ll_tx_pkt_in+0xc>
   1cd92:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   1cd96:	d8db      	bhi.n	1cd50 <ble_ll_tx_pkt_in+0xc>
   1cd98:	2e00      	cmp	r6, #0
   1cd9a:	d0d9      	beq.n	1cd50 <ble_ll_tx_pkt_in+0xc>
        ble_ll_conn_tx_pkt_in(om, handle, length);
   1cd9c:	4632      	mov	r2, r6
   1cd9e:	4639      	mov	r1, r7
   1cda0:	4628      	mov	r0, r5
   1cda2:	f003 fa3e 	bl	20222 <ble_ll_conn_tx_pkt_in>
   1cda6:	e7d6      	b.n	1cd56 <ble_ll_tx_pkt_in+0x12>
}
   1cda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cdaa:	bf00      	nop
   1cdac:	200084d8 	.word	0x200084d8

0001cdb0 <ble_ll_event_tx_pkt>:
{
   1cdb0:	b508      	push	{r3, lr}
    ble_ll_tx_pkt_in();
   1cdb2:	f7ff ffc7 	bl	1cd44 <ble_ll_tx_pkt_in>
}
   1cdb6:	bd08      	pop	{r3, pc}

0001cdb8 <ble_ll_rx_pkt_in>:
{
   1cdb8:	b538      	push	{r3, r4, r5, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   1cdba:	e00e      	b.n	1cdda <ble_ll_rx_pkt_in+0x22>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   1cdbc:	4613      	mov	r3, r2
   1cdbe:	3248      	adds	r2, #72	; 0x48
   1cdc0:	64da      	str	r2, [r3, #76]	; 0x4c
   1cdc2:	e017      	b.n	1cdf4 <ble_ll_rx_pkt_in+0x3c>
            ble_ll_conn_rx_data_pdu(m, ble_hdr);
   1cdc4:	4611      	mov	r1, r2
   1cdc6:	4628      	mov	r0, r5
   1cdc8:	f003 f810 	bl	1fdec <ble_ll_conn_rx_data_pdu>
   1cdcc:	e005      	b.n	1cdda <ble_ll_rx_pkt_in+0x22>
            ble_ll_adv_rx_pkt_in(pdu_type, rxbuf, ble_hdr);
   1cdce:	f001 faf3 	bl	1e3b8 <ble_ll_adv_rx_pkt_in>
        if (m) {
   1cdd2:	b115      	cbz	r5, 1cdda <ble_ll_rx_pkt_in+0x22>
            os_mbuf_free_chain(m);
   1cdd4:	4628      	mov	r0, r5
   1cdd6:	f7ed fa75 	bl	a2c4 <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   1cdda:	4b17      	ldr	r3, [pc, #92]	; (1ce38 <ble_ll_rx_pkt_in+0x80>)
   1cddc:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   1cdde:	b354      	cbz	r4, 1ce36 <ble_ll_rx_pkt_in+0x7e>
        m = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   1cde0:	f1a4 0510 	sub.w	r5, r4, #16
        OS_ENTER_CRITICAL(sr);
   1cde4:	f7ee fbe6 	bl	b5b4 <os_arch_save_sr>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   1cde8:	4a13      	ldr	r2, [pc, #76]	; (1ce38 <ble_ll_rx_pkt_in+0x80>)
   1cdea:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1cdec:	685b      	ldr	r3, [r3, #4]
   1cdee:	6493      	str	r3, [r2, #72]	; 0x48
   1cdf0:	2b00      	cmp	r3, #0
   1cdf2:	d0e3      	beq.n	1cdbc <ble_ll_rx_pkt_in+0x4>
        OS_EXIT_CRITICAL(sr);
   1cdf4:	f7ee fbe4 	bl	b5c0 <os_arch_restore_sr>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   1cdf8:	f104 0208 	add.w	r2, r4, #8
        rxbuf = m->om_data;
   1cdfc:	f854 1c10 	ldr.w	r1, [r4, #-16]
        pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1ce00:	7808      	ldrb	r0, [r1, #0]
   1ce02:	f000 000f 	and.w	r0, r0, #15
        switch (BLE_MBUF_HDR_RX_STATE(ble_hdr)) {
   1ce06:	7a23      	ldrb	r3, [r4, #8]
   1ce08:	f003 0307 	and.w	r3, r3, #7
   1ce0c:	3b01      	subs	r3, #1
   1ce0e:	2b03      	cmp	r3, #3
   1ce10:	d8df      	bhi.n	1cdd2 <ble_ll_rx_pkt_in+0x1a>
   1ce12:	a401      	add	r4, pc, #4	; (adr r4, 1ce18 <ble_ll_rx_pkt_in+0x60>)
   1ce14:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
   1ce18:	0001cdcf 	.word	0x0001cdcf
   1ce1c:	0001ce29 	.word	0x0001ce29
   1ce20:	0001ce31 	.word	0x0001ce31
   1ce24:	0001cdc5 	.word	0x0001cdc5
            ble_ll_scan_rx_pkt_in(pdu_type, m, ble_hdr);
   1ce28:	4629      	mov	r1, r5
   1ce2a:	f007 fd97 	bl	2495c <ble_ll_scan_rx_pkt_in>
            break;
   1ce2e:	e7d0      	b.n	1cdd2 <ble_ll_rx_pkt_in+0x1a>
            ble_ll_init_rx_pkt_in(pdu_type, rxbuf, ble_hdr);
   1ce30:	f002 fd7a 	bl	1f928 <ble_ll_init_rx_pkt_in>
            break;
   1ce34:	e7cd      	b.n	1cdd2 <ble_ll_rx_pkt_in+0x1a>
}
   1ce36:	bd38      	pop	{r3, r4, r5, pc}
   1ce38:	200084d8 	.word	0x200084d8

0001ce3c <ble_ll_event_rx_pkt>:
{
   1ce3c:	b508      	push	{r3, lr}
    ble_ll_rx_pkt_in();
   1ce3e:	f7ff ffbb 	bl	1cdb8 <ble_ll_rx_pkt_in>
}
   1ce42:	bd08      	pop	{r3, pc}

0001ce44 <ble_ll_seed_prng>:
    return rc;
}

static void
ble_ll_seed_prng(void)
{
   1ce44:	b508      	push	{r3, lr}

    /* Seed random number generator with least significant bytes of device
     * address.
     */
    seed = 0;
    for (i = 0; i < 4; ++i) {
   1ce46:	2300      	movs	r3, #0
    seed = 0;
   1ce48:	4618      	mov	r0, r3
    for (i = 0; i < 4; ++i) {
   1ce4a:	e004      	b.n	1ce56 <ble_ll_seed_prng+0x12>
        seed |= g_dev_addr[i];
   1ce4c:	4a04      	ldr	r2, [pc, #16]	; (1ce60 <ble_ll_seed_prng+0x1c>)
   1ce4e:	5cd2      	ldrb	r2, [r2, r3]
   1ce50:	4310      	orrs	r0, r2
        seed <<= 8;
   1ce52:	0200      	lsls	r0, r0, #8
    for (i = 0; i < 4; ++i) {
   1ce54:	3301      	adds	r3, #1
   1ce56:	2b03      	cmp	r3, #3
   1ce58:	ddf8      	ble.n	1ce4c <ble_ll_seed_prng+0x8>
}
__extern_inline void srand(unsigned int __s)
{
	srand48(__s);
   1ce5a:	f7ee fd5f 	bl	b91c <srand48>
    }
    srand(seed);
}
   1ce5e:	bd08      	pop	{r3, pc}
   1ce60:	20008750 	.word	0x20008750

0001ce64 <ble_ll_rxpdu_alloc>:
{
   1ce64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce68:	4604      	mov	r4, r0
    om_ret = os_msys_get_pkthdr(len, sizeof(struct ble_mbuf_hdr));
   1ce6a:	2110      	movs	r1, #16
   1ce6c:	f7ed ff43 	bl	acf6 <os_msys_get_pkthdr>
    if (!om_ret) {
   1ce70:	4607      	mov	r7, r0
   1ce72:	b1f8      	cbz	r0, 1ceb4 <ble_ll_rxpdu_alloc+0x50>
    pkthdr->omp_len = len;
   1ce74:	8204      	strh	r4, [r0, #16]
    databuf_len = om_ret->om_omp->omp_databuf_len & ~3;
   1ce76:	6883      	ldr	r3, [r0, #8]
   1ce78:	881b      	ldrh	r3, [r3, #0]
   1ce7a:	f023 0303 	bic.w	r3, r3, #3
   1ce7e:	b29b      	uxth	r3, r3
    om_ret->om_data += 4;
   1ce80:	6802      	ldr	r2, [r0, #0]
   1ce82:	3204      	adds	r2, #4
   1ce84:	6002      	str	r2, [r0, #0]
    rem_len -= databuf_len - om_ret->om_pkthdr_len - 4;
   1ce86:	4698      	mov	r8, r3
   1ce88:	7942      	ldrb	r2, [r0, #5]
   1ce8a:	1a9b      	subs	r3, r3, r2
   1ce8c:	3b04      	subs	r3, #4
   1ce8e:	1ae4      	subs	r4, r4, r3
    om = om_ret;
   1ce90:	4606      	mov	r6, r0
    while (rem_len > 0) {
   1ce92:	2c00      	cmp	r4, #0
   1ce94:	dd0e      	ble.n	1ceb4 <ble_ll_rxpdu_alloc+0x50>
        om_next = os_msys_get(rem_len, 0);
   1ce96:	2100      	movs	r1, #0
   1ce98:	b2a0      	uxth	r0, r4
   1ce9a:	f7ed ff1d 	bl	acd8 <os_msys_get>
        if (!om_next) {
   1ce9e:	4605      	mov	r5, r0
   1cea0:	b120      	cbz	r0, 1ceac <ble_ll_rxpdu_alloc+0x48>
        SLIST_NEXT(om, om_next) = om_next;
   1cea2:	60f0      	str	r0, [r6, #12]
        rem_len -= databuf_len;
   1cea4:	eba4 0408 	sub.w	r4, r4, r8
        om = om_next;
   1cea8:	4606      	mov	r6, r0
   1ceaa:	e7f2      	b.n	1ce92 <ble_ll_rxpdu_alloc+0x2e>
            os_mbuf_free_chain(om_ret);
   1ceac:	4638      	mov	r0, r7
   1ceae:	f7ed fa09 	bl	a2c4 <os_mbuf_free_chain>
    return NULL;
   1ceb2:	462f      	mov	r7, r5
}
   1ceb4:	4638      	mov	r0, r7
   1ceb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ceba <ble_ll_chk_txrx_octets>:
    if ((octets < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   1ceba:	381b      	subs	r0, #27
   1cebc:	b280      	uxth	r0, r0
   1cebe:	28e0      	cmp	r0, #224	; 0xe0
   1cec0:	d801      	bhi.n	1cec6 <ble_ll_chk_txrx_octets+0xc>
        rc = 1;
   1cec2:	2001      	movs	r0, #1
}
   1cec4:	4770      	bx	lr
        rc = 0;
   1cec6:	2000      	movs	r0, #0
   1cec8:	4770      	bx	lr

0001ceca <ble_ll_chk_txrx_time>:
    if ((time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   1ceca:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
   1cece:	b280      	uxth	r0, r0
   1ced0:	f244 1348 	movw	r3, #16712	; 0x4148
   1ced4:	4298      	cmp	r0, r3
   1ced6:	d801      	bhi.n	1cedc <ble_ll_chk_txrx_time+0x12>
        rc = 1;
   1ced8:	2001      	movs	r0, #1
}
   1ceda:	4770      	bx	lr
        rc = 0;
   1cedc:	2000      	movs	r0, #0
   1cede:	4770      	bx	lr

0001cee0 <ble_ll_is_rpa>:
    if (addr_type && ((addr[5] & 0xc0) == 0x40)) {
   1cee0:	b131      	cbz	r1, 1cef0 <ble_ll_is_rpa+0x10>
   1cee2:	7943      	ldrb	r3, [r0, #5]
   1cee4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cee8:	2b40      	cmp	r3, #64	; 0x40
   1ceea:	d003      	beq.n	1cef4 <ble_ll_is_rpa+0x14>
        rc = 0;
   1ceec:	2000      	movs	r0, #0
   1ceee:	4770      	bx	lr
   1cef0:	2000      	movs	r0, #0
   1cef2:	4770      	bx	lr
        rc = 1;
   1cef4:	2001      	movs	r0, #1
}
   1cef6:	4770      	bx	lr

0001cef8 <ble_ll_addr_is_id>:
    return !addr_type || ((addr[5] & 0xc0) == 0xc0);
   1cef8:	b141      	cbz	r1, 1cf0c <ble_ll_addr_is_id+0x14>
   1cefa:	7943      	ldrb	r3, [r0, #5]
   1cefc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cf00:	2bc0      	cmp	r3, #192	; 0xc0
   1cf02:	d001      	beq.n	1cf08 <ble_ll_addr_is_id+0x10>
   1cf04:	2000      	movs	r0, #0
}
   1cf06:	4770      	bx	lr
    return !addr_type || ((addr[5] & 0xc0) == 0xc0);
   1cf08:	2001      	movs	r0, #1
   1cf0a:	4770      	bx	lr
   1cf0c:	2001      	movs	r0, #1
   1cf0e:	4770      	bx	lr

0001cf10 <ble_ll_addr_subtype>:
    if (!addr_type) {
   1cf10:	b141      	cbz	r1, 1cf24 <ble_ll_addr_subtype+0x14>
    switch (addr[5] >> 6) {
   1cf12:	7943      	ldrb	r3, [r0, #5]
   1cf14:	099b      	lsrs	r3, r3, #6
   1cf16:	d003      	beq.n	1cf20 <ble_ll_addr_subtype+0x10>
   1cf18:	2b01      	cmp	r3, #1
   1cf1a:	d005      	beq.n	1cf28 <ble_ll_addr_subtype+0x18>
        return BLE_LL_ADDR_SUBTYPE_IDENTITY; /* static random */
   1cf1c:	2000      	movs	r0, #0
   1cf1e:	4770      	bx	lr
        return BLE_LL_ADDR_SUBTYPE_NRPA; /* NRPA */
   1cf20:	2002      	movs	r0, #2
   1cf22:	4770      	bx	lr
        return BLE_LL_ADDR_SUBTYPE_IDENTITY;
   1cf24:	2000      	movs	r0, #0
   1cf26:	4770      	bx	lr
        return BLE_LL_ADDR_SUBTYPE_RPA; /* RPA */
   1cf28:	2001      	movs	r0, #1
}
   1cf2a:	4770      	bx	lr

0001cf2c <ble_ll_is_valid_public_addr>:
    for (i = 0; i < BLE_DEV_ADDR_LEN; ++i) {
   1cf2c:	2300      	movs	r3, #0
   1cf2e:	2b05      	cmp	r3, #5
   1cf30:	dc03      	bgt.n	1cf3a <ble_ll_is_valid_public_addr+0xe>
        if (addr[i]) {
   1cf32:	5cc2      	ldrb	r2, [r0, r3]
   1cf34:	b91a      	cbnz	r2, 1cf3e <ble_ll_is_valid_public_addr+0x12>
    for (i = 0; i < BLE_DEV_ADDR_LEN; ++i) {
   1cf36:	3301      	adds	r3, #1
   1cf38:	e7f9      	b.n	1cf2e <ble_ll_is_valid_public_addr+0x2>
    return 0;
   1cf3a:	2000      	movs	r0, #0
   1cf3c:	4770      	bx	lr
            return 1;
   1cf3e:	2001      	movs	r0, #1
}
   1cf40:	4770      	bx	lr
	...

0001cf44 <ble_ll_is_valid_random_addr>:
{
   1cf44:	b510      	push	{r4, lr}
    sum = 0;
   1cf46:	2300      	movs	r3, #0
    for (i = 0; i < (BLE_DEV_ADDR_LEN -1); ++i) {
   1cf48:	461a      	mov	r2, r3
   1cf4a:	e003      	b.n	1cf54 <ble_ll_is_valid_random_addr+0x10>
        sum += addr[i];
   1cf4c:	5c84      	ldrb	r4, [r0, r2]
   1cf4e:	4423      	add	r3, r4
   1cf50:	b29b      	uxth	r3, r3
    for (i = 0; i < (BLE_DEV_ADDR_LEN -1); ++i) {
   1cf52:	3201      	adds	r2, #1
   1cf54:	2a04      	cmp	r2, #4
   1cf56:	ddf9      	ble.n	1cf4c <ble_ll_is_valid_random_addr+0x8>
    sum += addr[5] & 0x3f;
   1cf58:	7942      	ldrb	r2, [r0, #5]
   1cf5a:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   1cf5e:	440b      	add	r3, r1
   1cf60:	b29b      	uxth	r3, r3
    if ((sum == 0) || (sum == ((5*255) + 0x3f))) {
   1cf62:	b1f3      	cbz	r3, 1cfa2 <ble_ll_is_valid_random_addr+0x5e>
   1cf64:	f240 543a 	movw	r4, #1338	; 0x53a
   1cf68:	42a3      	cmp	r3, r4
   1cf6a:	d01d      	beq.n	1cfa8 <ble_ll_is_valid_random_addr+0x64>
    addr_type = addr[5] & 0xc0;
   1cf6c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    if (addr_type == 0xc0) {
   1cf70:	2ac0      	cmp	r2, #192	; 0xc0
   1cf72:	d01b      	beq.n	1cfac <ble_ll_is_valid_random_addr+0x68>
    } else if (addr_type == 0x40) {
   1cf74:	2a40      	cmp	r2, #64	; 0x40
   1cf76:	d009      	beq.n	1cf8c <ble_ll_is_valid_random_addr+0x48>
    } else if (addr_type == 0) {
   1cf78:	b9f2      	cbnz	r2, 1cfb8 <ble_ll_is_valid_random_addr+0x74>
   1cf7a:	4601      	mov	r1, r0
        if (!memcmp(g_dev_addr, addr, BLE_DEV_ADDR_LEN)) {
   1cf7c:	2206      	movs	r2, #6
   1cf7e:	480f      	ldr	r0, [pc, #60]	; (1cfbc <ble_ll_is_valid_random_addr+0x78>)
   1cf80:	f7ee fc62 	bl	b848 <memcmp>
   1cf84:	4603      	mov	r3, r0
   1cf86:	b168      	cbz	r0, 1cfa4 <ble_ll_is_valid_random_addr+0x60>
    rc = 1;
   1cf88:	2301      	movs	r3, #1
   1cf8a:	e00b      	b.n	1cfa4 <ble_ll_is_valid_random_addr+0x60>
        sum = addr[3] + addr[4] + (addr[5] & 0x3f);
   1cf8c:	78c3      	ldrb	r3, [r0, #3]
   1cf8e:	7902      	ldrb	r2, [r0, #4]
   1cf90:	4413      	add	r3, r2
        if ((sum == 0) || (sum == (255 + 255 + 0x3f))) {
   1cf92:	18c9      	adds	r1, r1, r3
   1cf94:	d00c      	beq.n	1cfb0 <ble_ll_is_valid_random_addr+0x6c>
   1cf96:	f240 233d 	movw	r3, #573	; 0x23d
   1cf9a:	4299      	cmp	r1, r3
   1cf9c:	d00a      	beq.n	1cfb4 <ble_ll_is_valid_random_addr+0x70>
    rc = 1;
   1cf9e:	2301      	movs	r3, #1
   1cfa0:	e000      	b.n	1cfa4 <ble_ll_is_valid_random_addr+0x60>
        return 0;
   1cfa2:	2300      	movs	r3, #0
}
   1cfa4:	4618      	mov	r0, r3
   1cfa6:	bd10      	pop	{r4, pc}
        return 0;
   1cfa8:	2300      	movs	r3, #0
   1cfaa:	e7fb      	b.n	1cfa4 <ble_ll_is_valid_random_addr+0x60>
    rc = 1;
   1cfac:	2301      	movs	r3, #1
   1cfae:	e7f9      	b.n	1cfa4 <ble_ll_is_valid_random_addr+0x60>
            rc = 0;
   1cfb0:	2300      	movs	r3, #0
   1cfb2:	e7f7      	b.n	1cfa4 <ble_ll_is_valid_random_addr+0x60>
   1cfb4:	2300      	movs	r3, #0
   1cfb6:	e7f5      	b.n	1cfa4 <ble_ll_is_valid_random_addr+0x60>
        rc = 0;
   1cfb8:	2300      	movs	r3, #0
   1cfba:	e7f3      	b.n	1cfa4 <ble_ll_is_valid_random_addr+0x60>
   1cfbc:	20008750 	.word	0x20008750

0001cfc0 <ble_ll_is_valid_own_addr_type>:
{
   1cfc0:	b508      	push	{r3, lr}
    switch (own_addr_type) {
   1cfc2:	2803      	cmp	r0, #3
   1cfc4:	d80b      	bhi.n	1cfde <ble_ll_is_valid_own_addr_type+0x1e>
   1cfc6:	e8df f000 	tbb	[pc, r0]
   1cfca:	0602      	.short	0x0602
   1cfcc:	0602      	.short	0x0602
        rc = ble_ll_is_valid_public_addr(g_dev_addr);
   1cfce:	4805      	ldr	r0, [pc, #20]	; (1cfe4 <ble_ll_is_valid_own_addr_type+0x24>)
   1cfd0:	f7ff ffac 	bl	1cf2c <ble_ll_is_valid_public_addr>
}
   1cfd4:	bd08      	pop	{r3, pc}
        rc = ble_ll_is_valid_random_addr(random_addr);
   1cfd6:	4608      	mov	r0, r1
   1cfd8:	f7ff ffb4 	bl	1cf44 <ble_ll_is_valid_random_addr>
        break;
   1cfdc:	e7fa      	b.n	1cfd4 <ble_ll_is_valid_own_addr_type+0x14>
        rc = 0;
   1cfde:	2000      	movs	r0, #0
    return rc;
   1cfe0:	e7f8      	b.n	1cfd4 <ble_ll_is_valid_own_addr_type+0x14>
   1cfe2:	bf00      	nop
   1cfe4:	20008750 	.word	0x20008750

0001cfe8 <ble_ll_set_random_addr>:
{
   1cfe8:	b570      	push	{r4, r5, r6, lr}
    if (len < sizeof(*cmd)) {
   1cfea:	2905      	cmp	r1, #5
   1cfec:	d91c      	bls.n	1d028 <ble_ll_set_random_addr+0x40>
    if (g_ble_ll_conn_create_sm || ble_ll_scan_enabled() ||
   1cfee:	4b11      	ldr	r3, [pc, #68]	; (1d034 <ble_ll_set_random_addr+0x4c>)
   1cff0:	681b      	ldr	r3, [r3, #0]
   1cff2:	b113      	cbz	r3, 1cffa <ble_ll_set_random_addr+0x12>
        return BLE_ERR_CMD_DISALLOWED;
   1cff4:	240c      	movs	r4, #12
}
   1cff6:	4620      	mov	r0, r4
   1cff8:	bd70      	pop	{r4, r5, r6, pc}
   1cffa:	4616      	mov	r6, r2
   1cffc:	4605      	mov	r5, r0
    if (g_ble_ll_conn_create_sm || ble_ll_scan_enabled() ||
   1cffe:	f007 fd51 	bl	24aa4 <ble_ll_scan_enabled>
   1d002:	4604      	mov	r4, r0
   1d004:	b990      	cbnz	r0, 1d02c <ble_ll_set_random_addr+0x44>
   1d006:	b14e      	cbz	r6, 1d01c <ble_ll_set_random_addr+0x34>
    if (!ble_ll_is_valid_random_addr(cmd->addr)) {
   1d008:	4628      	mov	r0, r5
   1d00a:	f7ff ff9b 	bl	1cf44 <ble_ll_is_valid_random_addr>
   1d00e:	b178      	cbz	r0, 1d030 <ble_ll_set_random_addr+0x48>
    memcpy(g_random_addr, cmd->addr, BLE_DEV_ADDR_LEN);
   1d010:	4b09      	ldr	r3, [pc, #36]	; (1d038 <ble_ll_set_random_addr+0x50>)
   1d012:	6828      	ldr	r0, [r5, #0]
   1d014:	6018      	str	r0, [r3, #0]
   1d016:	88aa      	ldrh	r2, [r5, #4]
   1d018:	809a      	strh	r2, [r3, #4]
    return BLE_ERR_SUCCESS;
   1d01a:	e7ec      	b.n	1cff6 <ble_ll_set_random_addr+0xe>
                                (!hci_adv_ext && ble_ll_adv_enabled())) {
   1d01c:	f001 fa74 	bl	1e508 <ble_ll_adv_enabled>
   1d020:	2800      	cmp	r0, #0
   1d022:	d0f1      	beq.n	1d008 <ble_ll_set_random_addr+0x20>
        return BLE_ERR_CMD_DISALLOWED;
   1d024:	240c      	movs	r4, #12
   1d026:	e7e6      	b.n	1cff6 <ble_ll_set_random_addr+0xe>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d028:	2412      	movs	r4, #18
   1d02a:	e7e4      	b.n	1cff6 <ble_ll_set_random_addr+0xe>
        return BLE_ERR_CMD_DISALLOWED;
   1d02c:	240c      	movs	r4, #12
   1d02e:	e7e2      	b.n	1cff6 <ble_ll_set_random_addr+0xe>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d030:	2412      	movs	r4, #18
   1d032:	e7e0      	b.n	1cff6 <ble_ll_set_random_addr+0xe>
   1d034:	200087ec 	.word	0x200087ec
   1d038:	20008758 	.word	0x20008758

0001d03c <ble_ll_is_our_devaddr>:
{
   1d03c:	b508      	push	{r3, lr}
    if (addr_type) {
   1d03e:	b141      	cbz	r1, 1d052 <ble_ll_is_our_devaddr+0x16>
        our_addr = g_random_addr;
   1d040:	4b06      	ldr	r3, [pc, #24]	; (1d05c <ble_ll_is_our_devaddr+0x20>)
    if (!memcmp(our_addr, addr, BLE_DEV_ADDR_LEN)) {
   1d042:	2206      	movs	r2, #6
   1d044:	4601      	mov	r1, r0
   1d046:	4618      	mov	r0, r3
   1d048:	f7ee fbfe 	bl	b848 <memcmp>
   1d04c:	b918      	cbnz	r0, 1d056 <ble_ll_is_our_devaddr+0x1a>
        rc = 1;
   1d04e:	2001      	movs	r0, #1
}
   1d050:	bd08      	pop	{r3, pc}
        our_addr = g_dev_addr;
   1d052:	4b03      	ldr	r3, [pc, #12]	; (1d060 <ble_ll_is_our_devaddr+0x24>)
   1d054:	e7f5      	b.n	1d042 <ble_ll_is_our_devaddr+0x6>
    rc = 0;
   1d056:	2000      	movs	r0, #0
   1d058:	e7fa      	b.n	1d050 <ble_ll_is_our_devaddr+0x14>
   1d05a:	bf00      	nop
   1d05c:	20008758 	.word	0x20008758
   1d060:	20008750 	.word	0x20008750

0001d064 <ble_ll_get_our_devaddr>:
    if (addr_type) {
   1d064:	b908      	cbnz	r0, 1d06a <ble_ll_get_our_devaddr+0x6>
    return g_dev_addr;
   1d066:	4802      	ldr	r0, [pc, #8]	; (1d070 <ble_ll_get_our_devaddr+0xc>)
}
   1d068:	4770      	bx	lr
        return g_random_addr;
   1d06a:	4802      	ldr	r0, [pc, #8]	; (1d074 <ble_ll_get_our_devaddr+0x10>)
   1d06c:	4770      	bx	lr
   1d06e:	bf00      	nop
   1d070:	20008750 	.word	0x20008750
   1d074:	20008758 	.word	0x20008758

0001d078 <ble_ll_wfr_timer_exp>:
{
   1d078:	b538      	push	{r3, r4, r5, lr}
    rx_start = ble_phy_rx_started();
   1d07a:	f009 fb3b 	bl	266f4 <ble_phy_rx_started>
   1d07e:	4605      	mov	r5, r0
    lls = g_ble_ll_data.ll_state;
   1d080:	4b0b      	ldr	r3, [pc, #44]	; (1d0b0 <ble_ll_wfr_timer_exp+0x38>)
   1d082:	7a1c      	ldrb	r4, [r3, #8]
    ble_ll_trace_u32x3(BLE_LL_TRACE_ID_WFR_EXP, lls, ble_phy_xcvr_state_get(),
   1d084:	f009 fb3c 	bl	26700 <ble_phy_xcvr_state_get>
    if (!rx_start) {
   1d088:	b945      	cbnz	r5, 1d09c <ble_ll_wfr_timer_exp+0x24>
        switch (lls) {
   1d08a:	1e63      	subs	r3, r4, #1
   1d08c:	2b03      	cmp	r3, #3
   1d08e:	d805      	bhi.n	1d09c <ble_ll_wfr_timer_exp+0x24>
   1d090:	e8df f003 	tbb	[pc, r3]
   1d094:	050b0802 	.word	0x050b0802
            ble_ll_adv_wfr_timer_exp();
   1d098:	f001 fa14 	bl	1e4c4 <ble_ll_adv_wfr_timer_exp>
}
   1d09c:	bd38      	pop	{r3, r4, r5, pc}
            ble_ll_conn_wfr_timer_exp();
   1d09e:	f002 f9e1 	bl	1f464 <ble_ll_conn_wfr_timer_exp>
            break;
   1d0a2:	e7fb      	b.n	1d09c <ble_ll_wfr_timer_exp+0x24>
            ble_ll_scan_wfr_timer_exp();
   1d0a4:	f007 fc1a 	bl	248dc <ble_ll_scan_wfr_timer_exp>
            break;
   1d0a8:	e7f8      	b.n	1d09c <ble_ll_wfr_timer_exp+0x24>
            ble_ll_conn_init_wfr_timer_exp();
   1d0aa:	f002 f9e4 	bl	1f476 <ble_ll_conn_init_wfr_timer_exp>
}
   1d0ae:	e7f5      	b.n	1d09c <ble_ll_wfr_timer_exp+0x24>
   1d0b0:	200084d8 	.word	0x200084d8

0001d0b4 <ble_ll_rx_pdu_in>:
{
   1d0b4:	b508      	push	{r3, lr}
    pkthdr = OS_MBUF_PKTHDR(rxpdu);
   1d0b6:	f100 0110 	add.w	r1, r0, #16
    STAILQ_INSERT_TAIL(&g_ble_ll_data.ll_rx_pkt_q, pkthdr, omp_next);
   1d0ba:	2300      	movs	r3, #0
   1d0bc:	f840 3f14 	str.w	r3, [r0, #20]!
   1d0c0:	4b05      	ldr	r3, [pc, #20]	; (1d0d8 <ble_ll_rx_pdu_in+0x24>)
   1d0c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1d0c4:	6011      	str	r1, [r2, #0]
   1d0c6:	64d8      	str	r0, [r3, #76]	; 0x4c
    os_eventq_put(&evq->evq, &ev->ev);
   1d0c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
   1d0cc:	f103 0010 	add.w	r0, r3, #16
   1d0d0:	f7ec ffcb 	bl	a06a <os_eventq_put>
}
   1d0d4:	bd08      	pop	{r3, pc}
   1d0d6:	bf00      	nop
   1d0d8:	200084d8 	.word	0x200084d8

0001d0dc <ble_ll_acl_data_in>:
{
   1d0dc:	b538      	push	{r3, r4, r5, lr}
   1d0de:	4604      	mov	r4, r0
    pkthdr = OS_MBUF_PKTHDR(txpkt);
   1d0e0:	f100 0510 	add.w	r5, r0, #16
    OS_ENTER_CRITICAL(sr);
   1d0e4:	f7ee fa66 	bl	b5b4 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&g_ble_ll_data.ll_tx_pkt_q, pkthdr, omp_next);
   1d0e8:	4623      	mov	r3, r4
   1d0ea:	2200      	movs	r2, #0
   1d0ec:	f843 2f14 	str.w	r2, [r3, #20]!
   1d0f0:	4c06      	ldr	r4, [pc, #24]	; (1d10c <ble_ll_acl_data_in+0x30>)
   1d0f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d0f4:	6015      	str	r5, [r2, #0]
   1d0f6:	6663      	str	r3, [r4, #100]	; 0x64
    OS_EXIT_CRITICAL(sr);
   1d0f8:	f7ee fa62 	bl	b5c0 <os_arch_restore_sr>
   1d0fc:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1d100:	f104 0010 	add.w	r0, r4, #16
   1d104:	f7ec ffb1 	bl	a06a <os_eventq_put>
}
   1d108:	bd38      	pop	{r3, r4, r5, pc}
   1d10a:	bf00      	nop
   1d10c:	200084d8 	.word	0x200084d8

0001d110 <ble_ll_rx_start>:
{
   1d110:	b510      	push	{r4, lr}
   1d112:	4614      	mov	r4, r2
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1d114:	7800      	ldrb	r0, [r0, #0]
   1d116:	f000 000f 	and.w	r0, r0, #15
    ble_ll_trace_u32x2(BLE_LL_TRACE_ID_RX_START, g_ble_ll_data.ll_state,
   1d11a:	4b0f      	ldr	r3, [pc, #60]	; (1d158 <ble_ll_rx_start+0x48>)
   1d11c:	7a1b      	ldrb	r3, [r3, #8]
    switch (g_ble_ll_data.ll_state) {
   1d11e:	3b01      	subs	r3, #1
   1d120:	2b03      	cmp	r3, #3
   1d122:	d815      	bhi.n	1d150 <ble_ll_rx_start+0x40>
   1d124:	e8df f003 	tbb	[pc, r3]
   1d128:	020c1009 	.word	0x020c1009
        rc = ble_ll_conn_rx_isr_start(rxhdr, ble_phy_access_addr_get());
   1d12c:	f009 fadc 	bl	266e8 <ble_phy_access_addr_get>
   1d130:	4601      	mov	r1, r0
   1d132:	4620      	mov	r0, r4
   1d134:	f002 fe28 	bl	1fd88 <ble_ll_conn_rx_isr_start>
}
   1d138:	bd10      	pop	{r4, pc}
        rc = ble_ll_adv_rx_isr_start(pdu_type);
   1d13a:	f001 f95f 	bl	1e3fc <ble_ll_adv_rx_isr_start>
        break;
   1d13e:	e7fb      	b.n	1d138 <ble_ll_rx_start+0x28>
        rc = ble_ll_init_rx_isr_start(pdu_type, rxhdr);
   1d140:	4621      	mov	r1, r4
   1d142:	f002 fc73 	bl	1fa2c <ble_ll_init_rx_isr_start>
        break;
   1d146:	e7f7      	b.n	1d138 <ble_ll_rx_start+0x28>
        rc = ble_ll_scan_rx_isr_start(pdu_type, &rxhdr->rxinfo.flags);
   1d148:	4621      	mov	r1, r4
   1d14a:	f007 fae3 	bl	24714 <ble_ll_scan_rx_isr_start>
        break;
   1d14e:	e7f3      	b.n	1d138 <ble_ll_rx_start+0x28>
        rc = -1;
   1d150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   1d154:	e7f0      	b.n	1d138 <ble_ll_rx_start+0x28>
   1d156:	bf00      	nop
   1d158:	200084d8 	.word	0x200084d8

0001d15c <ble_ll_rx_end>:
{
   1d15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d15e:	4605      	mov	r5, r0
    crcok = BLE_MBUF_HDR_CRC_OK(rxhdr);
   1d160:	880b      	ldrh	r3, [r1, #0]
   1d162:	f003 0280 	and.w	r2, r3, #128	; 0x80
   1d166:	f3c3 16c0 	ubfx	r6, r3, #7, #1
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1d16a:	7804      	ldrb	r4, [r0, #0]
    len = rxbuf[1];
   1d16c:	7840      	ldrb	r0, [r0, #1]
   1d16e:	f003 0307 	and.w	r3, r3, #7
    if (BLE_MBUF_HDR_RX_STATE(rxhdr) == BLE_LL_STATE_CONNECTION) {
   1d172:	2b04      	cmp	r3, #4
   1d174:	d00b      	beq.n	1d18e <ble_ll_rx_end+0x32>
   1d176:	f004 040f 	and.w	r4, r4, #15
    if (crcok) {
   1d17a:	b30a      	cbz	r2, 1d1c0 <ble_ll_rx_end+0x64>
        switch (pdu_type) {
   1d17c:	2c08      	cmp	r4, #8
   1d17e:	d829      	bhi.n	1d1d4 <ble_ll_rx_end+0x78>
   1d180:	e8df f004 	tbb	[pc, r4]
   1d184:	0c120c12 	.word	0x0c120c12
   1d188:	0a121812 	.word	0x0a121812
   1d18c:	0a          	.byte	0x0a
   1d18d:	00          	.byte	0x00
        rc = ble_ll_conn_rx_isr_end(rxbuf, rxhdr);
   1d18e:	4628      	mov	r0, r5
   1d190:	f002 fed0 	bl	1ff34 <ble_ll_conn_rx_isr_end>
   1d194:	4604      	mov	r4, r0
        return rc;
   1d196:	e02d      	b.n	1d1f4 <ble_ll_rx_end+0x98>
    badpkt = 0;
   1d198:	2200      	movs	r2, #0
   1d19a:	e012      	b.n	1d1c2 <ble_ll_rx_end+0x66>
            if (len != BLE_SCAN_REQ_LEN) {
   1d19c:	280c      	cmp	r0, #12
   1d19e:	d001      	beq.n	1d1a4 <ble_ll_rx_end+0x48>
                badpkt = 1;
   1d1a0:	2201      	movs	r2, #1
   1d1a2:	e00e      	b.n	1d1c2 <ble_ll_rx_end+0x66>
    badpkt = 0;
   1d1a4:	2200      	movs	r2, #0
   1d1a6:	e00c      	b.n	1d1c2 <ble_ll_rx_end+0x66>
            if ((len < BLE_DEV_ADDR_LEN) || (len > BLE_ADV_SCAN_IND_MAX_LEN)) {
   1d1a8:	1f82      	subs	r2, r0, #6
   1d1aa:	b2d2      	uxtb	r2, r2
   1d1ac:	2a1f      	cmp	r2, #31
   1d1ae:	d813      	bhi.n	1d1d8 <ble_ll_rx_end+0x7c>
    badpkt = 0;
   1d1b0:	2200      	movs	r2, #0
   1d1b2:	e006      	b.n	1d1c2 <ble_ll_rx_end+0x66>
            if (len != BLE_CONNECT_REQ_LEN) {
   1d1b4:	2822      	cmp	r0, #34	; 0x22
   1d1b6:	d001      	beq.n	1d1bc <ble_ll_rx_end+0x60>
                badpkt = 1;
   1d1b8:	2201      	movs	r2, #1
   1d1ba:	e002      	b.n	1d1c2 <ble_ll_rx_end+0x66>
    badpkt = 0;
   1d1bc:	2200      	movs	r2, #0
   1d1be:	e000      	b.n	1d1c2 <ble_ll_rx_end+0x66>
   1d1c0:	2200      	movs	r2, #0
    switch (BLE_MBUF_HDR_RX_STATE(rxhdr)) {
   1d1c2:	2b02      	cmp	r3, #2
   1d1c4:	d023      	beq.n	1d20e <ble_ll_rx_end+0xb2>
   1d1c6:	2b03      	cmp	r3, #3
   1d1c8:	d034      	beq.n	1d234 <ble_ll_rx_end+0xd8>
   1d1ca:	2b01      	cmp	r3, #1
   1d1cc:	d006      	beq.n	1d1dc <ble_ll_rx_end+0x80>
        rc = -1;
   1d1ce:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1d1d2:	e00f      	b.n	1d1f4 <ble_ll_rx_end+0x98>
            badpkt = 1;
   1d1d4:	2201      	movs	r2, #1
   1d1d6:	e7f4      	b.n	1d1c2 <ble_ll_rx_end+0x66>
                badpkt = 1;
   1d1d8:	2201      	movs	r2, #1
   1d1da:	e7f2      	b.n	1d1c2 <ble_ll_rx_end+0x66>
        if (!badpkt) {
   1d1dc:	b162      	cbz	r2, 1d1f8 <ble_ll_rx_end+0x9c>
    rxpdu = NULL;
   1d1de:	2700      	movs	r7, #0
        rc = ble_ll_adv_rx_isr_end(pdu_type, rxpdu, crcok);
   1d1e0:	4632      	mov	r2, r6
   1d1e2:	4639      	mov	r1, r7
   1d1e4:	4620      	mov	r0, r4
   1d1e6:	f001 f8c1 	bl	1e36c <ble_ll_adv_rx_isr_end>
   1d1ea:	4604      	mov	r4, r0
    if (rxpdu) {
   1d1ec:	b117      	cbz	r7, 1d1f4 <ble_ll_rx_end+0x98>
        ble_ll_rx_pdu_in(rxpdu);
   1d1ee:	4638      	mov	r0, r7
   1d1f0:	f7ff ff60 	bl	1d0b4 <ble_ll_rx_pdu_in>
}
   1d1f4:	4620      	mov	r0, r4
   1d1f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rxpdu = ble_ll_rxpdu_alloc(len + BLE_LL_PDU_HDR_LEN);
   1d1f8:	3002      	adds	r0, #2
   1d1fa:	f7ff fe33 	bl	1ce64 <ble_ll_rxpdu_alloc>
            if (rxpdu) {
   1d1fe:	4607      	mov	r7, r0
   1d200:	2800      	cmp	r0, #0
   1d202:	d0ed      	beq.n	1d1e0 <ble_ll_rx_end+0x84>
                ble_phy_rxpdu_copy(rxbuf, rxpdu);
   1d204:	4601      	mov	r1, r0
   1d206:	4628      	mov	r0, r5
   1d208:	f008 fdbe 	bl	25d88 <ble_phy_rxpdu_copy>
   1d20c:	e7e8      	b.n	1d1e0 <ble_ll_rx_end+0x84>
        if (!badpkt) {
   1d20e:	b132      	cbz	r2, 1d21e <ble_ll_rx_end+0xc2>
    rxpdu = NULL;
   1d210:	2700      	movs	r7, #0
        rc = ble_ll_scan_rx_isr_end(rxpdu, crcok);
   1d212:	4631      	mov	r1, r6
   1d214:	4638      	mov	r0, r7
   1d216:	f007 fb1d 	bl	24854 <ble_ll_scan_rx_isr_end>
   1d21a:	4604      	mov	r4, r0
        break;
   1d21c:	e7e6      	b.n	1d1ec <ble_ll_rx_end+0x90>
            rxpdu = ble_ll_rxpdu_alloc(len + BLE_LL_PDU_HDR_LEN);
   1d21e:	3002      	adds	r0, #2
   1d220:	f7ff fe20 	bl	1ce64 <ble_ll_rxpdu_alloc>
            if (rxpdu) {
   1d224:	4607      	mov	r7, r0
   1d226:	2800      	cmp	r0, #0
   1d228:	d0f3      	beq.n	1d212 <ble_ll_rx_end+0xb6>
                ble_phy_rxpdu_copy(rxbuf, rxpdu);
   1d22a:	4601      	mov	r1, r0
   1d22c:	4628      	mov	r0, r5
   1d22e:	f008 fdab 	bl	25d88 <ble_phy_rxpdu_copy>
   1d232:	e7ee      	b.n	1d212 <ble_ll_rx_end+0xb6>
        rc = ble_ll_init_rx_isr_end(rxbuf, crcok, rxhdr);
   1d234:	460a      	mov	r2, r1
   1d236:	4631      	mov	r1, r6
   1d238:	4628      	mov	r0, r5
   1d23a:	f002 fc0b 	bl	1fa54 <ble_ll_init_rx_isr_end>
   1d23e:	4604      	mov	r4, r0
   1d240:	e7d8      	b.n	1d1f4 <ble_ll_rx_end+0x98>

0001d242 <ble_ll_tx_mbuf_pducb>:
{
   1d242:	b538      	push	{r3, r4, r5, lr}
    BLE_LL_ASSERT(txpdu);
   1d244:	b159      	cbz	r1, 1d25e <ble_ll_tx_mbuf_pducb+0x1c>
   1d246:	4615      	mov	r5, r2
   1d248:	460c      	mov	r4, r1
    os_mbuf_copydata(txpdu, ble_hdr->txinfo.offset, ble_hdr->txinfo.pyld_len,
   1d24a:	4603      	mov	r3, r0
   1d24c:	7e8a      	ldrb	r2, [r1, #26]
   1d24e:	7e49      	ldrb	r1, [r1, #25]
   1d250:	4620      	mov	r0, r4
   1d252:	f7ed f939 	bl	a4c8 <os_mbuf_copydata>
    *hdr_byte = ble_hdr->txinfo.hdr_byte;
   1d256:	7ee3      	ldrb	r3, [r4, #27]
   1d258:	702b      	strb	r3, [r5, #0]
}
   1d25a:	7ea0      	ldrb	r0, [r4, #26]
   1d25c:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(txpdu);
   1d25e:	f7ea ffaf 	bl	81c0 <hal_debugger_connected>
   1d262:	b100      	cbz	r0, 1d266 <ble_ll_tx_mbuf_pducb+0x24>
   1d264:	be01      	bkpt	0x0001
   1d266:	2300      	movs	r3, #0
   1d268:	461a      	mov	r2, r3
   1d26a:	4619      	mov	r1, r3
   1d26c:	4618      	mov	r0, r3
   1d26e:	f7ec fbaf 	bl	99d0 <__assert_func>
	...

0001d274 <ble_ll_state_set>:
    g_ble_ll_data.ll_state = ll_state;
   1d274:	4b01      	ldr	r3, [pc, #4]	; (1d27c <ble_ll_state_set+0x8>)
   1d276:	7218      	strb	r0, [r3, #8]
}
   1d278:	4770      	bx	lr
   1d27a:	bf00      	nop
   1d27c:	200084d8 	.word	0x200084d8

0001d280 <ble_ll_state_get>:
}
   1d280:	4b01      	ldr	r3, [pc, #4]	; (1d288 <ble_ll_state_get+0x8>)
   1d282:	7a18      	ldrb	r0, [r3, #8]
   1d284:	4770      	bx	lr
   1d286:	bf00      	nop
   1d288:	200084d8 	.word	0x200084d8

0001d28c <ble_ll_event_send>:
{
   1d28c:	b508      	push	{r3, lr}
   1d28e:	4601      	mov	r1, r0
   1d290:	4801      	ldr	r0, [pc, #4]	; (1d298 <ble_ll_event_send+0xc>)
   1d292:	f7ec feea 	bl	a06a <os_eventq_put>
}
   1d296:	bd08      	pop	{r3, pc}
   1d298:	200084e8 	.word	0x200084e8

0001d29c <ble_ll_read_supp_states>:
}
   1d29c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d2a0:	f240 31ff 	movw	r1, #1023	; 0x3ff
   1d2a4:	4770      	bx	lr
	...

0001d2a8 <ble_ll_read_supp_features>:
}
   1d2a8:	4b01      	ldr	r3, [pc, #4]	; (1d2b0 <ble_ll_read_supp_features+0x8>)
   1d2aa:	e9d3 0100 	ldrd	r0, r1, [r3]
   1d2ae:	4770      	bx	lr
   1d2b0:	200084d8 	.word	0x200084d8

0001d2b4 <ble_ll_reset>:
{
   1d2b4:	b538      	push	{r3, r4, r5, lr}
    OS_ENTER_CRITICAL(sr);
   1d2b6:	f7ee f97d 	bl	b5b4 <os_arch_save_sr>
   1d2ba:	4604      	mov	r4, r0
    ble_phy_disable();
   1d2bc:	f008 ffa2 	bl	26204 <ble_phy_disable>
    ble_ll_sched_stop();
   1d2c0:	f008 f8c8 	bl	25454 <ble_ll_sched_stop>
    ble_ll_scan_reset();
   1d2c4:	f007 fc12 	bl	24aec <ble_ll_scan_reset>
    ble_ll_rfmgmt_reset();
   1d2c8:	f006 fac8 	bl	2385c <ble_ll_rfmgmt_reset>
    OS_EXIT_CRITICAL(sr);
   1d2cc:	4620      	mov	r0, r4
   1d2ce:	f7ee f977 	bl	b5c0 <os_arch_restore_sr>
    ble_ll_adv_reset();
   1d2d2:	f001 f901 	bl	1e4d8 <ble_ll_adv_reset>
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_tx_pkt_q);
   1d2d6:	4d0f      	ldr	r5, [pc, #60]	; (1d314 <ble_ll_reset+0x60>)
   1d2d8:	f105 0060 	add.w	r0, r5, #96	; 0x60
   1d2dc:	f7ff fce2 	bl	1cca4 <ble_ll_flush_pkt_queue>
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_rx_pkt_q);
   1d2e0:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1d2e4:	f7ff fcde 	bl	1cca4 <ble_ll_flush_pkt_queue>
    g_ble_ll_data.ll_pref_tx_phys = 0;
   1d2e8:	2400      	movs	r4, #0
   1d2ea:	732c      	strb	r4, [r5, #12]
    g_ble_ll_data.ll_pref_rx_phys = 0;
   1d2ec:	736c      	strb	r4, [r5, #13]
    ble_ll_conn_module_reset();
   1d2ee:	f003 f8bd 	bl	2046c <ble_ll_conn_module_reset>
    ble_ll_hci_init();
   1d2f2:	f005 fc83 	bl	22bfc <ble_ll_hci_init>
    ble_ll_sched_init();
   1d2f6:	f008 f8b5 	bl	25464 <ble_ll_sched_init>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1d2fa:	4620      	mov	r0, r4
   1d2fc:	f7ff ffba 	bl	1d274 <ble_ll_state_set>
    memset(g_random_addr, 0, BLE_DEV_ADDR_LEN);
   1d300:	4b05      	ldr	r3, [pc, #20]	; (1d318 <ble_ll_reset+0x64>)
   1d302:	601c      	str	r4, [r3, #0]
   1d304:	809c      	strh	r4, [r3, #4]
    ble_ll_whitelist_clear();
   1d306:	f008 f9ab 	bl	25660 <ble_ll_whitelist_clear>
    ble_ll_resolv_list_reset();
   1d30a:	f006 f9d3 	bl	236b4 <ble_ll_resolv_list_reset>
    rc = ble_phy_init();
   1d30e:	f008 fe2f 	bl	25f70 <ble_phy_init>
}
   1d312:	bd38      	pop	{r3, r4, r5, pc}
   1d314:	200084d8 	.word	0x200084d8
   1d318:	20008758 	.word	0x20008758

0001d31c <ble_ll_pdu_tx_time_get>:
    }

    usecs += g_ble_ll_pdu_header_tx_time[phy_mode];
#else
    usecs = (((payload_len) + BLE_LL_PDU_HDR_LEN + BLE_LL_ACC_ADDR_LEN
            + BLE_LL_PREAMBLE_LEN + BLE_LL_CRC_LEN) << 3);
   1d31c:	300a      	adds	r0, #10
#endif

    return usecs;
}
   1d31e:	00c0      	lsls	r0, r0, #3
   1d320:	4770      	bx	lr
	...

0001d324 <ble_ll_pdu_max_tx_octets_get>:

uint16_t
ble_ll_pdu_max_tx_octets_get(uint32_t usecs, int phy_mode)
{
   1d324:	b508      	push	{r3, lr}
    uint32_t header_tx_time;
    uint16_t octets = 0;

    BLE_LL_ASSERT(phy_mode < BLE_PHY_NUM_MODE);
   1d326:	2903      	cmp	r1, #3
   1d328:	dc0f      	bgt.n	1d34a <ble_ll_pdu_max_tx_octets_get+0x26>

    header_tx_time = g_ble_ll_pdu_header_tx_time[phy_mode];
   1d32a:	4b19      	ldr	r3, [pc, #100]	; (1d390 <ble_ll_pdu_max_tx_octets_get+0x6c>)
   1d32c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
     * Reference:
     * Core v5.0, Vol 6, Part B, section 4.5.10
     * see connEffectiveMaxTxTime and connEffectiveMaxRxTime definitions
     */

    if (usecs < header_tx_time) {
   1d330:	4283      	cmp	r3, r0
   1d332:	d82a      	bhi.n	1d38a <ble_ll_pdu_max_tx_octets_get+0x66>
        return 27;
    }

    usecs -= header_tx_time;
   1d334:	1ac0      	subs	r0, r0, r3

    if (phy_mode == BLE_PHY_MODE_1M) {
   1d336:	2901      	cmp	r1, #1
   1d338:	d011      	beq.n	1d35e <ble_ll_pdu_max_tx_octets_get+0x3a>
        /* 8 usecs per byte */
        octets = usecs >> 3;
    } else if (phy_mode == BLE_PHY_MODE_2M) {
   1d33a:	2902      	cmp	r1, #2
   1d33c:	d015      	beq.n	1d36a <ble_ll_pdu_max_tx_octets_get+0x46>
        /* 4 usecs per byte */
        octets = usecs >> 2;
    } else if (phy_mode == BLE_PHY_MODE_CODED_125KBPS) {
   1d33e:	2903      	cmp	r1, #3
   1d340:	d016      	beq.n	1d370 <ble_ll_pdu_max_tx_octets_get+0x4c>
        /* S=8 => 8 * 8 = 64 usecs per byte */
        octets = usecs >> 6;
    } else if (phy_mode == BLE_PHY_MODE_CODED_500KBPS) {
   1d342:	b9c1      	cbnz	r1, 1d376 <ble_ll_pdu_max_tx_octets_get+0x52>
        /* S=2 => 2 * 8 = 16 usecs per byte */
        octets = usecs >> 4;
   1d344:	f3c0 100f 	ubfx	r0, r0, #4, #16
   1d348:	e00b      	b.n	1d362 <ble_ll_pdu_max_tx_octets_get+0x3e>
    BLE_LL_ASSERT(phy_mode < BLE_PHY_NUM_MODE);
   1d34a:	f7ea ff39 	bl	81c0 <hal_debugger_connected>
   1d34e:	b100      	cbz	r0, 1d352 <ble_ll_pdu_max_tx_octets_get+0x2e>
   1d350:	be01      	bkpt	0x0001
   1d352:	2300      	movs	r3, #0
   1d354:	461a      	mov	r2, r3
   1d356:	4619      	mov	r1, r3
   1d358:	4618      	mov	r0, r3
   1d35a:	f7ec fb39 	bl	99d0 <__assert_func>
        octets = usecs >> 3;
   1d35e:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    } else {
        BLE_LL_ASSERT(0);
    }

    /* see comment at the beginning */
    return max(27, octets);
   1d362:	281b      	cmp	r0, #27
   1d364:	bf38      	it	cc
   1d366:	201b      	movcc	r0, #27
}
   1d368:	bd08      	pop	{r3, pc}
        octets = usecs >> 2;
   1d36a:	f3c0 008f 	ubfx	r0, r0, #2, #16
   1d36e:	e7f8      	b.n	1d362 <ble_ll_pdu_max_tx_octets_get+0x3e>
        octets = usecs >> 6;
   1d370:	f3c0 108f 	ubfx	r0, r0, #6, #16
   1d374:	e7f5      	b.n	1d362 <ble_ll_pdu_max_tx_octets_get+0x3e>
        BLE_LL_ASSERT(0);
   1d376:	f7ea ff23 	bl	81c0 <hal_debugger_connected>
   1d37a:	b100      	cbz	r0, 1d37e <ble_ll_pdu_max_tx_octets_get+0x5a>
   1d37c:	be01      	bkpt	0x0001
   1d37e:	2300      	movs	r3, #0
   1d380:	461a      	mov	r2, r3
   1d382:	4619      	mov	r1, r3
   1d384:	4618      	mov	r0, r3
   1d386:	f7ec fb23 	bl	99d0 <__assert_func>
        return 27;
   1d38a:	201b      	movs	r0, #27
   1d38c:	e7ec      	b.n	1d368 <ble_ll_pdu_max_tx_octets_get+0x44>
   1d38e:	bf00      	nop
   1d390:	00029810 	.word	0x00029810

0001d394 <ble_ll_init>:
 *
 * @return int
 */
void
ble_ll_init(void)
{
   1d394:	b570      	push	{r4, r5, r6, lr}
   1d396:	b08c      	sub	sp, #48	; 0x30
    uint64_t features;
    ble_addr_t addr;
    struct ble_ll_obj *lldata;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1d398:	4b46      	ldr	r3, [pc, #280]	; (1d4b4 <ble_ll_init+0x120>)
   1d39a:	781b      	ldrb	r3, [r3, #0]
   1d39c:	2b00      	cmp	r3, #0
   1d39e:	d071      	beq.n	1d484 <ble_ll_init+0xf0>
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   1d3a0:	2300      	movs	r3, #0
   1d3a2:	9308      	str	r3, [sp, #32]
   1d3a4:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
   1d3a8:	2206      	movs	r2, #6
   1d3aa:	a908      	add	r1, sp, #32
   1d3ac:	4842      	ldr	r0, [pc, #264]	; (1d4b8 <ble_ll_init+0x124>)
   1d3ae:	f7ee fa4b 	bl	b848 <memcmp>

    ble_ll_trace_init();
    ble_phy_trace_init();

    /* Set public device address if not already set */
    if (ble_ll_is_addr_empty(g_dev_addr)) {
   1d3b2:	b988      	cbnz	r0, 1d3d8 <ble_ll_init+0x44>
        /* Use sycfg address if configured, otherwise try to read from HW */
        if (!ble_ll_is_addr_empty(MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR))) {
   1d3b4:	2300      	movs	r3, #0
   1d3b6:	9306      	str	r3, [sp, #24]
   1d3b8:	f8ad 301c 	strh.w	r3, [sp, #28]
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   1d3bc:	930a      	str	r3, [sp, #40]	; 0x28
   1d3be:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
   1d3c2:	2206      	movs	r2, #6
   1d3c4:	a90a      	add	r1, sp, #40	; 0x28
   1d3c6:	a806      	add	r0, sp, #24
   1d3c8:	f7ee fa3e 	bl	b848 <memcmp>
        if (!ble_ll_is_addr_empty(MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR))) {
   1d3cc:	2800      	cmp	r0, #0
   1d3ce:	d063      	beq.n	1d498 <ble_ll_init+0x104>
            memcpy(g_dev_addr, MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR), BLE_DEV_ADDR_LEN);
   1d3d0:	4b39      	ldr	r3, [pc, #228]	; (1d4b8 <ble_ll_init+0x124>)
   1d3d2:	2200      	movs	r2, #0
   1d3d4:	601a      	str	r2, [r3, #0]
   1d3d6:	809a      	strh	r2, [r3, #4]
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
            }
        }
    }

    ble_ll_rfmgmt_init();
   1d3d8:	f006 fa24 	bl	23824 <ble_ll_rfmgmt_init>

    /* Get pointer to global data object */
    lldata = &g_ble_ll_data;

    /* Set acl pkt size and number */
    lldata->ll_num_acl_pkts = MYNEWT_VAL(BLE_ACL_BUF_COUNT);
   1d3dc:	4c37      	ldr	r4, [pc, #220]	; (1d4bc <ble_ll_init+0x128>)
   1d3de:	2304      	movs	r3, #4
   1d3e0:	7263      	strb	r3, [r4, #9]
    lldata->ll_acl_pkt_size = MYNEWT_VAL(BLE_ACL_BUF_SIZE);
   1d3e2:	23ff      	movs	r3, #255	; 0xff
   1d3e4:	8163      	strh	r3, [r4, #10]
    os_eventq_init(&evq->evq);
   1d3e6:	f104 0610 	add.w	r6, r4, #16
   1d3ea:	4630      	mov	r0, r6
   1d3ec:	f7ec fe30 	bl	a050 <os_eventq_init>

    /* Initialize eventq */
    ble_npl_eventq_init(&lldata->ll_evq);

    /* Initialize the transmit (from host) and receive (from phy) queues */
    STAILQ_INIT(&lldata->ll_tx_pkt_q);
   1d3f0:	2500      	movs	r5, #0
   1d3f2:	4623      	mov	r3, r4
   1d3f4:	f843 5f60 	str.w	r5, [r3, #96]!
   1d3f8:	6663      	str	r3, [r4, #100]	; 0x64
    STAILQ_INIT(&lldata->ll_rx_pkt_q);
   1d3fa:	4623      	mov	r3, r4
   1d3fc:	f843 5f48 	str.w	r5, [r3, #72]!
   1d400:	64e3      	str	r3, [r4, #76]	; 0x4c
    memset(ev, 0, sizeof(*ev));
   1d402:	63a5      	str	r5, [r4, #56]	; 0x38
   1d404:	6425      	str	r5, [r4, #64]	; 0x40
   1d406:	6465      	str	r5, [r4, #68]	; 0x44
    ev->ev.ev_cb = (os_event_fn *)fn;
   1d408:	4b2d      	ldr	r3, [pc, #180]	; (1d4c0 <ble_ll_init+0x12c>)
   1d40a:	63e3      	str	r3, [r4, #60]	; 0x3c
    memset(ev, 0, sizeof(*ev));
   1d40c:	6525      	str	r5, [r4, #80]	; 0x50
   1d40e:	65a5      	str	r5, [r4, #88]	; 0x58
   1d410:	65e5      	str	r5, [r4, #92]	; 0x5c
    ev->ev.ev_cb = (os_event_fn *)fn;
   1d412:	4b2c      	ldr	r3, [pc, #176]	; (1d4c4 <ble_ll_init+0x130>)
   1d414:	6563      	str	r3, [r4, #84]	; 0x54
    memset(ev, 0, sizeof(*ev));
   1d416:	66a5      	str	r5, [r4, #104]	; 0x68
   1d418:	6725      	str	r5, [r4, #112]	; 0x70
   1d41a:	6765      	str	r5, [r4, #116]	; 0x74
    ev->ev.ev_cb = (os_event_fn *)fn;
   1d41c:	4b2a      	ldr	r3, [pc, #168]	; (1d4c8 <ble_ll_init+0x134>)
   1d41e:	66e3      	str	r3, [r4, #108]	; 0x6c
    memset(ev, 0, sizeof(*ev));
   1d420:	67a5      	str	r5, [r4, #120]	; 0x78
   1d422:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   1d426:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    ev->ev.ev_cb = (os_event_fn *)fn;
   1d42a:	4b28      	ldr	r3, [pc, #160]	; (1d4cc <ble_ll_init+0x138>)
   1d42c:	67e3      	str	r3, [r4, #124]	; 0x7c
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   1d42e:	462b      	mov	r3, r5
   1d430:	4a27      	ldr	r2, [pc, #156]	; (1d4d0 <ble_ll_init+0x13c>)
   1d432:	4631      	mov	r1, r6
   1d434:	f104 0088 	add.w	r0, r4, #136	; 0x88
   1d438:	f7ec fc72 	bl	9d20 <os_callout_init>
                         &g_ble_ll_data.ll_evq,
                         ble_ll_hw_err_timer_cb,
                         NULL);

    /* Initialize LL HCI */
    ble_ll_hci_init();
   1d43c:	f005 fbde 	bl	22bfc <ble_ll_hci_init>

    /* Init the scheduler */
    ble_ll_sched_init();
   1d440:	f008 f810 	bl	25464 <ble_ll_sched_init>

    /* Initialize advertiser */
    ble_ll_adv_init();
   1d444:	f001 f870 	bl	1e528 <ble_ll_adv_init>

    /* Initialize a scanner */
    ble_ll_scan_init();
   1d448:	f007 fb74 	bl	24b34 <ble_ll_scan_init>

    /* Initialize the connection module */
    ble_ll_conn_module_init();
   1d44c:	f003 f86a 	bl	20524 <ble_ll_conn_module_init>
    features |= BLE_LL_FEAT_LE_ENCRYPTION;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    features |= (BLE_LL_FEAT_LL_PRIVACY | BLE_LL_FEAT_EXT_SCAN_FILT);
    ble_ll_resolv_init();
   1d450:	f006 f916 	bl	23680 <ble_ll_resolv_init>
    features |= BLE_LL_FEAT_ISO_BROADCASTER;
    features |= BLE_LL_FEAT_ISO_HOST_SUPPORT;
#endif

    /* Initialize random number generation */
    ble_ll_rand_init();
   1d454:	f005 fdc8 	bl	22fe8 <ble_ll_rand_init>

    /* XXX: This really doesn't belong here, as the address probably has not
     * been set yet.
     */
    ble_ll_seed_prng();
   1d458:	f7ff fcf4 	bl	1ce44 <ble_ll_seed_prng>

    lldata->ll_supp_features = features;
   1d45c:	22ff      	movs	r2, #255	; 0xff
   1d45e:	2300      	movs	r3, #0
   1d460:	e9c4 2300 	strd	r2, r3, [r4]
    ble_ll_dtm_init();
#endif

#if MYNEWT
    /* Initialize the LL task */
    os_task_init(&g_ble_ll_task, "ble_ll", ble_ll_task, NULL,
   1d464:	235a      	movs	r3, #90	; 0x5a
   1d466:	9303      	str	r3, [sp, #12]
   1d468:	4b1a      	ldr	r3, [pc, #104]	; (1d4d4 <ble_ll_init+0x140>)
   1d46a:	9302      	str	r3, [sp, #8]
   1d46c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d470:	9301      	str	r3, [sp, #4]
   1d472:	9500      	str	r5, [sp, #0]
   1d474:	462b      	mov	r3, r5
   1d476:	4a18      	ldr	r2, [pc, #96]	; (1d4d8 <ble_ll_init+0x144>)
   1d478:	4918      	ldr	r1, [pc, #96]	; (1d4dc <ble_ll_init+0x148>)
   1d47a:	4819      	ldr	r0, [pc, #100]	; (1d4e0 <ble_ll_init+0x14c>)
   1d47c:	f7ed ff22 	bl	b2c4 <os_task_init>
 * For non-Mynewt OS it is required that OS creates task for LL and run LL
 * routine which is wrapped by nimble_port_ll_task_func().
 */

#endif
}
   1d480:	b00c      	add	sp, #48	; 0x30
   1d482:	bd70      	pop	{r4, r5, r6, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d484:	f7ea fe9c 	bl	81c0 <hal_debugger_connected>
   1d488:	b100      	cbz	r0, 1d48c <ble_ll_init+0xf8>
   1d48a:	be01      	bkpt	0x0001
   1d48c:	2300      	movs	r3, #0
   1d48e:	461a      	mov	r2, r3
   1d490:	4619      	mov	r1, r3
   1d492:	4618      	mov	r0, r3
   1d494:	f7ec fa9c 	bl	99d0 <__assert_func>
            rc = ble_hw_get_public_addr(&addr);
   1d498:	a804      	add	r0, sp, #16
   1d49a:	f008 f97b 	bl	25794 <ble_hw_get_public_addr>
            if (!rc) {
   1d49e:	2800      	cmp	r0, #0
   1d4a0:	d19a      	bne.n	1d3d8 <ble_ll_init+0x44>
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
   1d4a2:	4a05      	ldr	r2, [pc, #20]	; (1d4b8 <ble_ll_init+0x124>)
   1d4a4:	ab0c      	add	r3, sp, #48	; 0x30
   1d4a6:	f853 0d1f 	ldr.w	r0, [r3, #-31]!
   1d4aa:	6010      	str	r0, [r2, #0]
   1d4ac:	889b      	ldrh	r3, [r3, #4]
   1d4ae:	8093      	strh	r3, [r2, #4]
   1d4b0:	e792      	b.n	1d3d8 <ble_ll_init+0x44>
   1d4b2:	bf00      	nop
   1d4b4:	20000506 	.word	0x20000506
   1d4b8:	20008750 	.word	0x20008750
   1d4bc:	200084d8 	.word	0x200084d8
   1d4c0:	0001ce3d 	.word	0x0001ce3d
   1d4c4:	0001cdb1 	.word	0x0001cdb1
   1d4c8:	0001cd3b 	.word	0x0001cd3b
   1d4cc:	0001cd31 	.word	0x0001cd31
   1d4d0:	0001cd15 	.word	0x0001cd15
   1d4d4:	20008580 	.word	0x20008580
   1d4d8:	0001ccc5 	.word	0x0001ccc5
   1d4dc:	00029808 	.word	0x00029808
   1d4e0:	20008700 	.word	0x20008700

0001d4e4 <ble_ll_adv_first_chan>:
ble_ll_adv_first_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    /* Set first advertising channel */
    if (advsm->adv_chanmask & 0x01) {
   1d4e4:	7883      	ldrb	r3, [r0, #2]
   1d4e6:	f013 0f01 	tst.w	r3, #1
   1d4ea:	d106      	bne.n	1d4fa <ble_ll_adv_first_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START;
    } else if (advsm->adv_chanmask & 0x02) {
   1d4ec:	f013 0f02 	tst.w	r3, #2
   1d4f0:	d101      	bne.n	1d4f6 <ble_ll_adv_first_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   1d4f2:	2027      	movs	r0, #39	; 0x27
    }

    return adv_chan;
}
   1d4f4:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   1d4f6:	2026      	movs	r0, #38	; 0x26
   1d4f8:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START;
   1d4fa:	2025      	movs	r0, #37	; 0x25
   1d4fc:	4770      	bx	lr

0001d4fe <ble_ll_adv_final_chan>:
static uint8_t
ble_ll_adv_final_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    if (advsm->adv_chanmask & 0x04) {
   1d4fe:	7883      	ldrb	r3, [r0, #2]
   1d500:	f013 0f04 	tst.w	r3, #4
   1d504:	d106      	bne.n	1d514 <ble_ll_adv_final_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
    } else if (advsm->adv_chanmask & 0x02) {
   1d506:	f013 0f02 	tst.w	r3, #2
   1d50a:	d101      	bne.n	1d510 <ble_ll_adv_final_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START;
   1d50c:	2025      	movs	r0, #37	; 0x25
    }

    return adv_chan;
}
   1d50e:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   1d510:	2026      	movs	r0, #38	; 0x26
   1d512:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   1d514:	2027      	movs	r0, #39	; 0x27
   1d516:	4770      	bx	lr

0001d518 <ble_ll_adv_flags_set>:
{
   1d518:	b538      	push	{r3, r4, r5, lr}
   1d51a:	4605      	mov	r5, r0
   1d51c:	460c      	mov	r4, r1
    OS_ENTER_CRITICAL(sr);
   1d51e:	f7ee f849 	bl	b5b4 <os_arch_save_sr>
    advsm->flags |= flags;
   1d522:	896b      	ldrh	r3, [r5, #10]
   1d524:	431c      	orrs	r4, r3
   1d526:	816c      	strh	r4, [r5, #10]
    OS_EXIT_CRITICAL(sr);
   1d528:	f7ee f84a 	bl	b5c0 <os_arch_restore_sr>
}
   1d52c:	bd38      	pop	{r3, r4, r5, pc}

0001d52e <ble_ll_adv_flags_clear>:
{
   1d52e:	b538      	push	{r3, r4, r5, lr}
   1d530:	4604      	mov	r4, r0
   1d532:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
   1d534:	f7ee f83e 	bl	b5b4 <os_arch_save_sr>
    advsm->flags &= ~flags;
   1d538:	8961      	ldrh	r1, [r4, #10]
   1d53a:	ea21 0105 	bic.w	r1, r1, r5
   1d53e:	8161      	strh	r1, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1d540:	f7ee f83e 	bl	b5c0 <os_arch_restore_sr>
}
   1d544:	bd38      	pop	{r3, r4, r5, pc}

0001d546 <ble_ll_adv_rpa_update>:
{
   1d546:	b538      	push	{r3, r4, r5, lr}
   1d548:	4604      	mov	r4, r0
    if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   1d54a:	f100 0534 	add.w	r5, r0, #52	; 0x34
   1d54e:	2301      	movs	r3, #1
   1d550:	f100 0228 	add.w	r2, r0, #40	; 0x28
   1d554:	7941      	ldrb	r1, [r0, #5]
   1d556:	4628      	mov	r0, r5
   1d558:	f006 f83e 	bl	235d8 <ble_ll_resolv_gen_rpa>
   1d55c:	b960      	cbnz	r0, 1d578 <ble_ll_adv_rpa_update+0x32>
        if (advsm->own_addr_type & 1) {
   1d55e:	7923      	ldrb	r3, [r4, #4]
   1d560:	f013 0f01 	tst.w	r3, #1
   1d564:	d00d      	beq.n	1d582 <ble_ll_adv_rpa_update+0x3c>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   1d566:	2101      	movs	r1, #1
   1d568:	4620      	mov	r0, r4
   1d56a:	f7ff ffd5 	bl	1d518 <ble_ll_adv_flags_set>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1d56e:	89a3      	ldrh	r3, [r4, #12]
   1d570:	f013 0f04 	tst.w	r3, #4
   1d574:	d10a      	bne.n	1d58c <ble_ll_adv_rpa_update+0x46>
}
   1d576:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   1d578:	2101      	movs	r1, #1
   1d57a:	4620      	mov	r0, r4
   1d57c:	f7ff ffcc 	bl	1d518 <ble_ll_adv_flags_set>
   1d580:	e7f5      	b.n	1d56e <ble_ll_adv_rpa_update+0x28>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   1d582:	2101      	movs	r1, #1
   1d584:	4620      	mov	r0, r4
   1d586:	f7ff ffd2 	bl	1d52e <ble_ll_adv_flags_clear>
   1d58a:	e7f0      	b.n	1d56e <ble_ll_adv_rpa_update+0x28>
        if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   1d58c:	2300      	movs	r3, #0
   1d58e:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   1d592:	7961      	ldrb	r1, [r4, #5]
   1d594:	4628      	mov	r0, r5
   1d596:	f006 f81f 	bl	235d8 <ble_ll_resolv_gen_rpa>
   1d59a:	b940      	cbnz	r0, 1d5ae <ble_ll_adv_rpa_update+0x68>
            if (advsm->peer_addr_type & 1) {
   1d59c:	7963      	ldrb	r3, [r4, #5]
   1d59e:	f013 0f01 	tst.w	r3, #1
   1d5a2:	d109      	bne.n	1d5b8 <ble_ll_adv_rpa_update+0x72>
                ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   1d5a4:	2102      	movs	r1, #2
   1d5a6:	4620      	mov	r0, r4
   1d5a8:	f7ff ffc1 	bl	1d52e <ble_ll_adv_flags_clear>
}
   1d5ac:	e7e3      	b.n	1d576 <ble_ll_adv_rpa_update+0x30>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   1d5ae:	2102      	movs	r1, #2
   1d5b0:	4620      	mov	r0, r4
   1d5b2:	f7ff ffb1 	bl	1d518 <ble_ll_adv_flags_set>
   1d5b6:	e7de      	b.n	1d576 <ble_ll_adv_rpa_update+0x30>
                ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   1d5b8:	2102      	movs	r1, #2
   1d5ba:	4620      	mov	r0, r4
   1d5bc:	f7ff ffac 	bl	1d518 <ble_ll_adv_flags_set>
   1d5c0:	e7d9      	b.n	1d576 <ble_ll_adv_rpa_update+0x30>

0001d5c2 <ble_ll_adv_active_chanset_clear>:
{
   1d5c2:	b510      	push	{r4, lr}
   1d5c4:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1d5c6:	f7ed fff5 	bl	b5b4 <os_arch_save_sr>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   1d5ca:	8963      	ldrh	r3, [r4, #10]
   1d5cc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1d5d0:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1d5d2:	f7ed fff5 	bl	b5c0 <os_arch_restore_sr>
}
   1d5d6:	bd10      	pop	{r4, pc}

0001d5d8 <ble_ll_adv_tx_done>:
 * @param advsm
 *
 */
static void
ble_ll_adv_tx_done(void *arg)
{
   1d5d8:	b510      	push	{r4, lr}
   1d5da:	4604      	mov	r4, r0
    struct ble_ll_adv_sm *advsm;

    /* reset power to max after advertising */
    ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   1d5dc:	2000      	movs	r0, #0
   1d5de:	f008 fdd7 	bl	26190 <ble_phy_txpwr_set>
    os_eventq_put(&evq->evq, &ev->ev);
   1d5e2:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1d5e6:	4806      	ldr	r0, [pc, #24]	; (1d600 <ble_ll_adv_tx_done+0x28>)
   1d5e8:	f7ec fd3f 	bl	a06a <os_eventq_put>
    }
#else
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &advsm->adv_txdone_ev);
#endif

    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1d5ec:	2000      	movs	r0, #0
   1d5ee:	f7ff fe41 	bl	1d274 <ble_ll_state_set>

    ble_ll_adv_active_chanset_clear(advsm);
   1d5f2:	4620      	mov	r0, r4
   1d5f4:	f7ff ffe5 	bl	1d5c2 <ble_ll_adv_active_chanset_clear>

    /* We no longer have a current state machine */
    g_ble_ll_cur_adv_sm = NULL;
   1d5f8:	4b02      	ldr	r3, [pc, #8]	; (1d604 <ble_ll_adv_tx_done+0x2c>)
   1d5fa:	2200      	movs	r2, #0
   1d5fc:	601a      	str	r2, [r3, #0]
}
   1d5fe:	bd10      	pop	{r4, pc}
   1d600:	200084e8 	.word	0x200084e8
   1d604:	200087e0 	.word	0x200087e0

0001d608 <ble_ll_adv_sm_find_configured>:
{
   1d608:	b510      	push	{r4, lr}
   1d60a:	4604      	mov	r4, r0
    if (!ble_ll_hci_adv_mode_ext()) {
   1d60c:	f005 f9c3 	bl	22996 <ble_ll_hci_adv_mode_ext>
   1d610:	b9c0      	cbnz	r0, 1d644 <ble_ll_adv_sm_find_configured+0x3c>
        BLE_LL_ASSERT(instance == 0);
   1d612:	b90c      	cbnz	r4, 1d618 <ble_ll_adv_sm_find_configured+0x10>
        return &g_ble_ll_adv_sm[0];
   1d614:	480e      	ldr	r0, [pc, #56]	; (1d650 <ble_ll_adv_sm_find_configured+0x48>)
}
   1d616:	bd10      	pop	{r4, pc}
        BLE_LL_ASSERT(instance == 0);
   1d618:	f7ea fdd2 	bl	81c0 <hal_debugger_connected>
   1d61c:	b100      	cbz	r0, 1d620 <ble_ll_adv_sm_find_configured+0x18>
   1d61e:	be01      	bkpt	0x0001
   1d620:	2300      	movs	r3, #0
   1d622:	461a      	mov	r2, r3
   1d624:	4619      	mov	r1, r3
   1d626:	4618      	mov	r0, r3
   1d628:	f7ec f9d2 	bl	99d0 <__assert_func>
        advsm = &g_ble_ll_adv_sm[i];
   1d62c:	4808      	ldr	r0, [pc, #32]	; (1d650 <ble_ll_adv_sm_find_configured+0x48>)
   1d62e:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_CONFIGURED) &&
   1d632:	8942      	ldrh	r2, [r0, #10]
   1d634:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d638:	d002      	beq.n	1d640 <ble_ll_adv_sm_find_configured+0x38>
                (advsm->adv_instance == instance)) {
   1d63a:	7842      	ldrb	r2, [r0, #1]
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_CONFIGURED) &&
   1d63c:	42a2      	cmp	r2, r4
   1d63e:	d0ea      	beq.n	1d616 <ble_ll_adv_sm_find_configured+0xe>
    for (i = 0; i < ARRAY_SIZE(g_ble_ll_adv_sm); i++) {
   1d640:	3301      	adds	r3, #1
   1d642:	e000      	b.n	1d646 <ble_ll_adv_sm_find_configured+0x3e>
   1d644:	2300      	movs	r3, #0
   1d646:	2b00      	cmp	r3, #0
   1d648:	d0f0      	beq.n	1d62c <ble_ll_adv_sm_find_configured+0x24>
    return NULL;
   1d64a:	2000      	movs	r0, #0
   1d64c:	e7e3      	b.n	1d616 <ble_ll_adv_sm_find_configured+0xe>
   1d64e:	bf00      	nop
   1d650:	20008760 	.word	0x20008760

0001d654 <ble_ll_adv_active_chanset_set_pri>:
{
   1d654:	b510      	push	{r4, lr}
   1d656:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1d658:	f7ed ffac 	bl	b5b4 <os_arch_save_sr>
    assert((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   1d65c:	8963      	ldrh	r3, [r4, #10]
   1d65e:	f013 0f30 	tst.w	r3, #48	; 0x30
   1d662:	d107      	bne.n	1d674 <ble_ll_adv_active_chanset_set_pri+0x20>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   1d664:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    advsm->flags |= 0x10;
   1d668:	f043 0310 	orr.w	r3, r3, #16
   1d66c:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1d66e:	f7ed ffa7 	bl	b5c0 <os_arch_restore_sr>
}
   1d672:	bd10      	pop	{r4, pc}
    assert((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   1d674:	f7ea fda4 	bl	81c0 <hal_debugger_connected>
   1d678:	b100      	cbz	r0, 1d67c <ble_ll_adv_active_chanset_set_pri+0x28>
   1d67a:	be01      	bkpt	0x0001
   1d67c:	2300      	movs	r3, #0
   1d67e:	461a      	mov	r2, r3
   1d680:	4619      	mov	r1, r3
   1d682:	4618      	mov	r0, r3
   1d684:	f7ec f9a4 	bl	99d0 <__assert_func>

0001d688 <ble_ll_adv_scheduled>:
}
#endif

static void
ble_ll_adv_scheduled(struct ble_ll_adv_sm *advsm, uint32_t sch_start, void *arg)
{
   1d688:	b538      	push	{r3, r4, r5, lr}
    /* The event start time is when we start transmission of the adv PDU */
    advsm->adv_event_start_time = sch_start + g_ble_ll_sched_offset_ticks;
   1d68a:	4b08      	ldr	r3, [pc, #32]	; (1d6ac <ble_ll_adv_scheduled+0x24>)
   1d68c:	781c      	ldrb	r4, [r3, #0]
   1d68e:	440c      	add	r4, r1
   1d690:	6184      	str	r4, [r0, #24]
    advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1d692:	61c4      	str	r4, [r0, #28]
                             os_cputime_usecs_to_ticks(advsm->duration * 10000);
    }
#else
    /* Set the time at which we must end directed, high-duty cycle advertising.
     */
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1d694:	8983      	ldrh	r3, [r0, #12]
   1d696:	f013 0f08 	tst.w	r3, #8
   1d69a:	d100      	bne.n	1d69e <ble_ll_adv_scheduled+0x16>
        advsm->adv_end_time = advsm->adv_event_start_time +
                     os_cputime_usecs_to_ticks(BLE_LL_ADV_STATE_HD_MAX * 1000);
    }
#endif
}
   1d69c:	bd38      	pop	{r3, r4, r5, pc}
   1d69e:	4605      	mov	r5, r0
                     os_cputime_usecs_to_ticks(BLE_LL_ADV_STATE_HD_MAX * 1000);
   1d6a0:	4803      	ldr	r0, [pc, #12]	; (1d6b0 <ble_ll_adv_scheduled+0x28>)
   1d6a2:	f7fe fb71 	bl	1bd88 <os_cputime_usecs_to_ticks>
        advsm->adv_end_time = advsm->adv_event_start_time +
   1d6a6:	4404      	add	r4, r0
   1d6a8:	622c      	str	r4, [r5, #32]
}
   1d6aa:	e7f7      	b.n	1d69c <ble_ll_adv_scheduled+0x14>
   1d6ac:	20008cf0 	.word	0x20008cf0
   1d6b0:	00138800 	.word	0x00138800

0001d6b4 <ble_ll_adv_set_sched>:
{
   1d6b4:	b538      	push	{r3, r4, r5, lr}
   1d6b6:	4604      	mov	r4, r0
    sch->cb_arg = advsm;
   1d6b8:	6700      	str	r0, [r0, #112]	; 0x70
    sch->sched_cb = ble_ll_adv_tx_start_cb;
   1d6ba:	4b11      	ldr	r3, [pc, #68]	; (1d700 <ble_ll_adv_set_sched+0x4c>)
   1d6bc:	6743      	str	r3, [r0, #116]	; 0x74
    sch->sched_type = BLE_LL_SCHED_TYPE_ADV;
   1d6be:	2101      	movs	r1, #1
   1d6c0:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
    max_usecs = ble_ll_pdu_tx_time_get(advsm->adv_pdu_len, BLE_PHY_MODE_1M);
   1d6c4:	79c0      	ldrb	r0, [r0, #7]
   1d6c6:	f7ff fe29 	bl	1d31c <ble_ll_pdu_tx_time_get>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1d6ca:	89a3      	ldrh	r3, [r4, #12]
   1d6cc:	f013 0f04 	tst.w	r3, #4
   1d6d0:	d105      	bne.n	1d6de <ble_ll_adv_set_sched+0x2a>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1d6d2:	f013 0f01 	tst.w	r3, #1
   1d6d6:	d004      	beq.n	1d6e2 <ble_ll_adv_set_sched+0x2e>
        max_usecs += BLE_LL_SCHED_ADV_MAX_USECS;
   1d6d8:	f500 7055 	add.w	r0, r0, #852	; 0x354
   1d6dc:	e001      	b.n	1d6e2 <ble_ll_adv_set_sched+0x2e>
        max_usecs += BLE_LL_SCHED_DIRECT_ADV_MAX_USECS;
   1d6de:	f500 70fb 	add.w	r0, r0, #502	; 0x1f6
    sch->start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   1d6e2:	69e5      	ldr	r5, [r4, #28]
   1d6e4:	4b07      	ldr	r3, [pc, #28]	; (1d704 <ble_ll_adv_set_sched+0x50>)
   1d6e6:	781b      	ldrb	r3, [r3, #0]
   1d6e8:	1aeb      	subs	r3, r5, r3
   1d6ea:	66a3      	str	r3, [r4, #104]	; 0x68
    sch->remainder = 0;
   1d6ec:	2300      	movs	r3, #0
   1d6ee:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66

/* Convert usecs to ticks and round up to nearest tick */
static inline uint32_t
ble_ll_usecs_to_ticks_round_up(uint32_t usecs)
{
    return os_cputime_usecs_to_ticks(usecs + 30);
   1d6f2:	301e      	adds	r0, #30
   1d6f4:	f7fe fb48 	bl	1bd88 <os_cputime_usecs_to_ticks>
    sch->end_time = advsm->adv_pdu_start_time +
   1d6f8:	4428      	add	r0, r5
   1d6fa:	66e0      	str	r0, [r4, #108]	; 0x6c
}
   1d6fc:	bd38      	pop	{r3, r4, r5, pc}
   1d6fe:	bf00      	nop
   1d700:	0001d821 	.word	0x0001d821
   1d704:	20008cf0 	.word	0x20008cf0

0001d708 <ble_ll_adv_sm_start>:
 *
 * @return int
 */
static int
ble_ll_adv_sm_start(struct ble_ll_adv_sm *advsm)
{
   1d708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d70a:	4604      	mov	r4, r0
    const uint8_t *random_addr;
    uint32_t earliest_start_time;
    int32_t delta;

    /* only clear flags that are not set from HCI */
    ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD |
   1d70c:	210b      	movs	r1, #11
   1d70e:	f7ff ff0e 	bl	1d52e <ble_ll_adv_flags_clear>
    random_addr = advsm->adv_random_addr;
#else
    random_addr = g_random_addr;
#endif

    if (!ble_ll_is_valid_own_addr_type(advsm->own_addr_type, random_addr)) {
   1d712:	493f      	ldr	r1, [pc, #252]	; (1d810 <ble_ll_adv_sm_start+0x108>)
   1d714:	7920      	ldrb	r0, [r4, #4]
   1d716:	f7ff fc53 	bl	1cfc0 <ble_ll_is_valid_own_addr_type>
   1d71a:	2800      	cmp	r0, #0
   1d71c:	d073      	beq.n	1d806 <ble_ll_adv_sm_start+0xfe>

    /*
     * Get an event with which to send the connection complete event if
     * this is connectable
     */
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1d71e:	89a3      	ldrh	r3, [r4, #12]
   1d720:	f013 0f01 	tst.w	r3, #1
   1d724:	d001      	beq.n	1d72a <ble_ll_adv_sm_start+0x22>
        /* We expect this to be NULL but if not we wont allocate one... */
        if (advsm->conn_comp_ev == NULL) {
   1d726:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1d728:	b14b      	cbz	r3, 1d73e <ble_ll_adv_sm_start+0x36>
            advsm->conn_comp_ev = evbuf;
        }
    }

    /* Set advertising address */
    if ((advsm->own_addr_type & 1) == 0) {
   1d72a:	7923      	ldrb	r3, [r4, #4]
   1d72c:	f013 0f01 	tst.w	r3, #1
   1d730:	d00c      	beq.n	1d74c <ble_ll_adv_sm_start+0x44>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
        addr = advsm->adv_random_addr;
#else
        addr = g_random_addr;
#endif
        advsm->flags |= BLE_LL_ADV_SM_FLAG_TX_ADD;
   1d732:	8962      	ldrh	r2, [r4, #10]
   1d734:	f042 0201 	orr.w	r2, r2, #1
   1d738:	8162      	strh	r2, [r4, #10]
        addr = g_random_addr;
   1d73a:	4a35      	ldr	r2, [pc, #212]	; (1d810 <ble_ll_adv_sm_start+0x108>)
   1d73c:	e007      	b.n	1d74e <ble_ll_adv_sm_start+0x46>
            evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1d73e:	2002      	movs	r0, #2
   1d740:	f7f8 ff58 	bl	165f4 <ble_hci_trans_buf_alloc>
            if (!evbuf) {
   1d744:	2800      	cmp	r0, #0
   1d746:	d060      	beq.n	1d80a <ble_ll_adv_sm_start+0x102>
            advsm->conn_comp_ev = evbuf;
   1d748:	6520      	str	r0, [r4, #80]	; 0x50
   1d74a:	e7ee      	b.n	1d72a <ble_ll_adv_sm_start+0x22>
        addr = g_dev_addr;
   1d74c:	4a31      	ldr	r2, [pc, #196]	; (1d814 <ble_ll_adv_sm_start+0x10c>)
    }
    memcpy(advsm->adva, addr, BLE_DEV_ADDR_LEN);
   1d74e:	6811      	ldr	r1, [r2, #0]
   1d750:	62a1      	str	r1, [r4, #40]	; 0x28
   1d752:	8892      	ldrh	r2, [r2, #4]
   1d754:	85a2      	strh	r2, [r4, #44]	; 0x2c

    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1d756:	89a2      	ldrh	r2, [r4, #12]
   1d758:	f012 0f04 	tst.w	r2, #4
   1d75c:	d133      	bne.n	1d7c6 <ble_ll_adv_sm_start+0xbe>
        }
    }

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    /* This will generate an RPA for both initiator addr and adva */
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1d75e:	2b01      	cmp	r3, #1
   1d760:	d841      	bhi.n	1d7e6 <ble_ll_adv_sm_start+0xde>
        ble_ll_adv_rpa_update(advsm);
    }
#endif

    /* Set flag telling us that advertising is enabled */
    advsm->adv_enabled = 1;
   1d762:	2301      	movs	r3, #1
   1d764:	7023      	strb	r3, [r4, #0]
    advsm->channel_id = ((access_addr & 0xffff0000) >> 16) ^
                         (access_addr & 0x0000ffff);
#endif

    /* Determine the advertising interval we will use */
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1d766:	89a3      	ldrh	r3, [r4, #12]
   1d768:	f013 0f08 	tst.w	r3, #8
   1d76c:	d03f      	beq.n	1d7ee <ble_ll_adv_sm_start+0xe6>
        /* Set it to max. allowed for high duty cycle advertising */
        advsm->adv_itvl_usecs = BLE_LL_ADV_PDU_ITVL_HD_MS_MAX;
   1d76e:	f640 63a6 	movw	r3, #3750	; 0xea6
   1d772:	6163      	str	r3, [r4, #20]
        advsm->adv_itvl_usecs = (uint32_t)advsm->adv_itvl_max;
        advsm->adv_itvl_usecs *= BLE_LL_ADV_ITVL;
    }

    /* Set first advertising channel */
    adv_chan = ble_ll_adv_first_chan(advsm);
   1d774:	4620      	mov	r0, r4
   1d776:	f7ff feb5 	bl	1d4e4 <ble_ll_adv_first_chan>
    advsm->adv_chan = adv_chan;
   1d77a:	71a0      	strb	r0, [r4, #6]
     * used to setup start time for scheduler item.
     * Then we check if start time for scheduler item (which includes scheduler
     * overhead) is no earlier than calculated earliest possible start time and
     * adjust scheduler item if necessary.
     */
    earliest_start_time = ble_ll_rfmgmt_enable_now();
   1d77c:	f006 f8d2 	bl	23924 <ble_ll_rfmgmt_enable_now>
   1d780:	4607      	mov	r7, r0
	return (int)lrand48();
   1d782:	f7ee f859 	bl	b838 <lrand48>

    start_delay_us = rand() % (BLE_LL_ADV_DELAY_MS_MAX * 1000);
   1d786:	4b24      	ldr	r3, [pc, #144]	; (1d818 <ble_ll_adv_sm_start+0x110>)
   1d788:	fb83 2300 	smull	r2, r3, r3, r0
   1d78c:	17c5      	asrs	r5, r0, #31
   1d78e:	ebc5 3523 	rsb	r5, r5, r3, asr #12
   1d792:	f242 7310 	movw	r3, #10000	; 0x2710
   1d796:	fb03 0515 	mls	r5, r3, r5, r0
    advsm->adv_pdu_start_time = os_cputime_get32() +
   1d79a:	f7fe fade 	bl	1bd5a <os_cputime_get32>
   1d79e:	4606      	mov	r6, r0
                                os_cputime_usecs_to_ticks(start_delay_us);
   1d7a0:	4628      	mov	r0, r5
   1d7a2:	f7fe faf1 	bl	1bd88 <os_cputime_usecs_to_ticks>
    advsm->adv_pdu_start_time = os_cputime_get32() +
   1d7a6:	4430      	add	r0, r6
   1d7a8:	61e0      	str	r0, [r4, #28]

    ble_ll_adv_set_sched(advsm);
   1d7aa:	4620      	mov	r0, r4
   1d7ac:	f7ff ff82 	bl	1d6b4 <ble_ll_adv_set_sched>

    delta = (int32_t)(advsm->adv_sch.start_time - earliest_start_time);
   1d7b0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    if (delta < 0) {
   1d7b2:	1bdb      	subs	r3, r3, r7
   1d7b4:	d422      	bmi.n	1d7fc <ble_ll_adv_sm_start+0xf4>
        advsm->adv_sch.start_time -= delta;
        advsm->adv_sch.end_time -= delta;
    }

    /* This does actual scheduling */
    ble_ll_sched_adv_new(&advsm->adv_sch, ble_ll_adv_scheduled, NULL);
   1d7b6:	2200      	movs	r2, #0
   1d7b8:	4918      	ldr	r1, [pc, #96]	; (1d81c <ble_ll_adv_sm_start+0x114>)
   1d7ba:	f104 0064 	add.w	r0, r4, #100	; 0x64
   1d7be:	f007 fca1 	bl	25104 <ble_ll_sched_adv_new>
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
        ble_ll_adv_aux_schedule(advsm);
    }
#endif

    return BLE_ERR_SUCCESS;
   1d7c2:	2000      	movs	r0, #0
}
   1d7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(advsm->initiator_addr, advsm->peer_addr, BLE_DEV_ADDR_LEN);
   1d7c6:	4622      	mov	r2, r4
   1d7c8:	f852 1f34 	ldr.w	r1, [r2, #52]!
   1d7cc:	f8c4 103a 	str.w	r1, [r4, #58]	; 0x3a
   1d7d0:	8892      	ldrh	r2, [r2, #4]
   1d7d2:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if (advsm->peer_addr_type & 1) {
   1d7d4:	7962      	ldrb	r2, [r4, #5]
   1d7d6:	f012 0f01 	tst.w	r2, #1
   1d7da:	d0c0      	beq.n	1d75e <ble_ll_adv_sm_start+0x56>
            advsm->flags |= BLE_LL_ADV_SM_FLAG_RX_ADD;
   1d7dc:	8962      	ldrh	r2, [r4, #10]
   1d7de:	f042 0202 	orr.w	r2, r2, #2
   1d7e2:	8162      	strh	r2, [r4, #10]
   1d7e4:	e7bb      	b.n	1d75e <ble_ll_adv_sm_start+0x56>
        ble_ll_adv_rpa_update(advsm);
   1d7e6:	4620      	mov	r0, r4
   1d7e8:	f7ff fead 	bl	1d546 <ble_ll_adv_rpa_update>
   1d7ec:	e7b9      	b.n	1d762 <ble_ll_adv_sm_start+0x5a>
        advsm->adv_itvl_usecs = (uint32_t)advsm->adv_itvl_max;
   1d7ee:	8a22      	ldrh	r2, [r4, #16]
        advsm->adv_itvl_usecs *= BLE_LL_ADV_ITVL;
   1d7f0:	f240 2371 	movw	r3, #625	; 0x271
   1d7f4:	fb03 f302 	mul.w	r3, r3, r2
   1d7f8:	6163      	str	r3, [r4, #20]
   1d7fa:	e7bb      	b.n	1d774 <ble_ll_adv_sm_start+0x6c>
        advsm->adv_sch.start_time -= delta;
   1d7fc:	66a7      	str	r7, [r4, #104]	; 0x68
        advsm->adv_sch.end_time -= delta;
   1d7fe:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   1d800:	1ad3      	subs	r3, r2, r3
   1d802:	66e3      	str	r3, [r4, #108]	; 0x6c
   1d804:	e7d7      	b.n	1d7b6 <ble_ll_adv_sm_start+0xae>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d806:	2012      	movs	r0, #18
   1d808:	e7dc      	b.n	1d7c4 <ble_ll_adv_sm_start+0xbc>
                return BLE_ERR_MEM_CAPACITY;
   1d80a:	2007      	movs	r0, #7
   1d80c:	e7da      	b.n	1d7c4 <ble_ll_adv_sm_start+0xbc>
   1d80e:	bf00      	nop
   1d810:	20008758 	.word	0x20008758
   1d814:	20008750 	.word	0x20008750
   1d818:	68db8bad 	.word	0x68db8bad
   1d81c:	0001d689 	.word	0x0001d689

0001d820 <ble_ll_adv_tx_start_cb>:
{
   1d820:	b538      	push	{r3, r4, r5, lr}
   1d822:	4605      	mov	r5, r0
    advsm = (struct ble_ll_adv_sm *)sch->cb_arg;
   1d824:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_cur_adv_sm = advsm;
   1d826:	4b2d      	ldr	r3, [pc, #180]	; (1d8dc <ble_ll_adv_tx_start_cb+0xbc>)
   1d828:	601c      	str	r4, [r3, #0]
    ble_ll_adv_active_chanset_set_pri(advsm);
   1d82a:	4620      	mov	r0, r4
   1d82c:	f7ff ff12 	bl	1d654 <ble_ll_adv_active_chanset_set_pri>
    if ((advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) ||
   1d830:	8963      	ldrh	r3, [r4, #10]
   1d832:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   1d836:	d111      	bne.n	1d85c <ble_ll_adv_tx_start_cb+0x3c>
    ble_phy_txpwr_set(advsm->adv_txpwr);
   1d838:	f994 0009 	ldrsb.w	r0, [r4, #9]
   1d83c:	f008 fca8 	bl	26190 <ble_phy_txpwr_set>
    rc = ble_phy_setchan(advsm->adv_chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   1d840:	4a27      	ldr	r2, [pc, #156]	; (1d8e0 <ble_ll_adv_tx_start_cb+0xc0>)
   1d842:	4928      	ldr	r1, [pc, #160]	; (1d8e4 <ble_ll_adv_tx_start_cb+0xc4>)
   1d844:	79a0      	ldrb	r0, [r4, #6]
   1d846:	f008 fcb7 	bl	261b8 <ble_phy_setchan>
    assert(rc == 0);
   1d84a:	b968      	cbnz	r0, 1d868 <ble_ll_adv_tx_start_cb+0x48>
    txstart = sch->start_time + g_ble_ll_sched_offset_ticks;
   1d84c:	6868      	ldr	r0, [r5, #4]
   1d84e:	4b26      	ldr	r3, [pc, #152]	; (1d8e8 <ble_ll_adv_tx_start_cb+0xc8>)
   1d850:	781b      	ldrb	r3, [r3, #0]
    rc = ble_phy_tx_set_start_time(txstart, sch->remainder);
   1d852:	78a9      	ldrb	r1, [r5, #2]
   1d854:	4418      	add	r0, r3
   1d856:	f008 feaf 	bl	265b8 <ble_phy_tx_set_start_time>
    if (rc) {
   1d85a:	b178      	cbz	r0, 1d87c <ble_ll_adv_tx_start_cb+0x5c>
    ble_ll_adv_tx_done(advsm);
   1d85c:	4620      	mov	r0, r4
   1d85e:	f7ff febb 	bl	1d5d8 <ble_ll_adv_tx_done>
    return BLE_LL_SCHED_STATE_DONE;
   1d862:	2501      	movs	r5, #1
}
   1d864:	4628      	mov	r0, r5
   1d866:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
   1d868:	f7ea fcaa 	bl	81c0 <hal_debugger_connected>
   1d86c:	b100      	cbz	r0, 1d870 <ble_ll_adv_tx_start_cb+0x50>
   1d86e:	be01      	bkpt	0x0001
   1d870:	2300      	movs	r3, #0
   1d872:	461a      	mov	r2, r3
   1d874:	4619      	mov	r1, r3
   1d876:	4618      	mov	r0, r3
   1d878:	f7ec f8aa 	bl	99d0 <__assert_func>
    ble_phy_encrypt_disable();
   1d87c:	f008 fc44 	bl	26108 <ble_phy_encrypt_disable>
    advsm->adv_rpa_index = -1;
   1d880:	23ff      	movs	r3, #255	; 0xff
   1d882:	7223      	strb	r3, [r4, #8]
    if (ble_ll_resolv_enabled()) {
   1d884:	f005 fef6 	bl	23674 <ble_ll_resolv_enabled>
   1d888:	b1e0      	cbz	r0, 1d8c4 <ble_ll_adv_tx_start_cb+0xa4>
        ble_phy_resolv_list_enable();
   1d88a:	f008 ff43 	bl	26714 <ble_phy_resolv_list_enable>
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
   1d88e:	89a3      	ldrh	r3, [r4, #12]
   1d890:	f013 0f10 	tst.w	r3, #16
   1d894:	d002      	beq.n	1d89c <ble_ll_adv_tx_start_cb+0x7c>
   1d896:	f013 0f03 	tst.w	r3, #3
   1d89a:	d116      	bne.n	1d8ca <ble_ll_adv_tx_start_cb+0xaa>
        ble_phy_set_txend_cb(ble_ll_adv_tx_done, advsm);
   1d89c:	4621      	mov	r1, r4
   1d89e:	4813      	ldr	r0, [pc, #76]	; (1d8ec <ble_ll_adv_tx_start_cb+0xcc>)
   1d8a0:	f008 fc48 	bl	26134 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_NONE;
   1d8a4:	2200      	movs	r2, #0
    rc = ble_phy_tx(ble_ll_adv_legacy_pdu_make, advsm, end_trans);
   1d8a6:	4621      	mov	r1, r4
   1d8a8:	4811      	ldr	r0, [pc, #68]	; (1d8f0 <ble_ll_adv_tx_start_cb+0xd0>)
   1d8aa:	f008 fe9d 	bl	265e8 <ble_phy_tx>
    if (rc) {
   1d8ae:	4605      	mov	r5, r0
   1d8b0:	2800      	cmp	r0, #0
   1d8b2:	d1d3      	bne.n	1d85c <ble_ll_adv_tx_start_cb+0x3c>
    if (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE) {
   1d8b4:	78e3      	ldrb	r3, [r4, #3]
   1d8b6:	b173      	cbz	r3, 1d8d6 <ble_ll_adv_tx_start_cb+0xb6>
        ble_ll_whitelist_enable();
   1d8b8:	f007 ff44 	bl	25744 <ble_ll_whitelist_enable>
    ble_ll_state_set(BLE_LL_STATE_ADV);
   1d8bc:	2001      	movs	r0, #1
   1d8be:	f7ff fcd9 	bl	1d274 <ble_ll_state_set>
    return BLE_LL_SCHED_STATE_RUNNING;
   1d8c2:	e7cf      	b.n	1d864 <ble_ll_adv_tx_start_cb+0x44>
        ble_phy_resolv_list_disable();
   1d8c4:	f008 ff36 	bl	26734 <ble_phy_resolv_list_disable>
   1d8c8:	e7e1      	b.n	1d88e <ble_ll_adv_tx_start_cb+0x6e>
        ble_phy_set_txend_cb(NULL, NULL);
   1d8ca:	2100      	movs	r1, #0
   1d8cc:	4608      	mov	r0, r1
   1d8ce:	f008 fc31 	bl	26134 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_TX_RX;
   1d8d2:	2202      	movs	r2, #2
        ble_phy_set_txend_cb(NULL, NULL);
   1d8d4:	e7e7      	b.n	1d8a6 <ble_ll_adv_tx_start_cb+0x86>
        ble_ll_whitelist_disable();
   1d8d6:	f007 ff39 	bl	2574c <ble_ll_whitelist_disable>
   1d8da:	e7ef      	b.n	1d8bc <ble_ll_adv_tx_start_cb+0x9c>
   1d8dc:	200087e0 	.word	0x200087e0
   1d8e0:	00555555 	.word	0x00555555
   1d8e4:	8e89bed6 	.word	0x8e89bed6
   1d8e8:	20008cf0 	.word	0x20008cf0
   1d8ec:	0001d5d9 	.word	0x0001d5d9
   1d8f0:	0001d8f5 	.word	0x0001d8f5

0001d8f4 <ble_ll_adv_legacy_pdu_make>:
{
   1d8f4:	b570      	push	{r4, r5, r6, lr}
   1d8f6:	460c      	mov	r4, r1
    adv_data_len = ADV_DATA_LEN(advsm);
   1d8f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1d8fa:	b333      	cbz	r3, 1d94a <ble_ll_adv_legacy_pdu_make+0x56>
   1d8fc:	7c19      	ldrb	r1, [r3, #16]
    pdulen = BLE_DEV_ADDR_LEN + adv_data_len;
   1d8fe:	1d8d      	adds	r5, r1, #6
   1d900:	b2ed      	uxtb	r5, r5
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1d902:	89a3      	ldrh	r3, [r4, #12]
   1d904:	f013 0f04 	tst.w	r3, #4
   1d908:	d021      	beq.n	1d94e <ble_ll_adv_legacy_pdu_make+0x5a>
        if (advsm->flags & BLE_LL_ADV_SM_FLAG_RX_ADD) {
   1d90a:	8963      	ldrh	r3, [r4, #10]
   1d90c:	f013 0f02 	tst.w	r3, #2
   1d910:	d125      	bne.n	1d95e <ble_ll_adv_legacy_pdu_make+0x6a>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_DIRECT_IND;
   1d912:	2301      	movs	r3, #1
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   1d914:	250c      	movs	r5, #12
        adv_data_len = 0;
   1d916:	2100      	movs	r1, #0
    assert(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   1d918:	291f      	cmp	r1, #31
   1d91a:	d828      	bhi.n	1d96e <ble_ll_adv_legacy_pdu_make+0x7a>
    advsm->adv_pdu_len = pdulen + BLE_LL_PDU_HDR_LEN;
   1d91c:	1cae      	adds	r6, r5, #2
   1d91e:	71e6      	strb	r6, [r4, #7]
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) {
   1d920:	8966      	ldrh	r6, [r4, #10]
   1d922:	f016 0f01 	tst.w	r6, #1
   1d926:	d001      	beq.n	1d92c <ble_ll_adv_legacy_pdu_make+0x38>
        pdu_type |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1d928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    *hdr_byte = pdu_type;
   1d92c:	7013      	strb	r3, [r2, #0]
    memcpy(dptr, advsm->adva, BLE_DEV_ADDR_LEN);
   1d92e:	4623      	mov	r3, r4
   1d930:	f853 2f28 	ldr.w	r2, [r3, #40]!
   1d934:	6002      	str	r2, [r0, #0]
   1d936:	889b      	ldrh	r3, [r3, #4]
   1d938:	8083      	strh	r3, [r0, #4]
    dptr += BLE_DEV_ADDR_LEN;
   1d93a:	1d83      	adds	r3, r0, #6
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1d93c:	89a2      	ldrh	r2, [r4, #12]
   1d93e:	f012 0f04 	tst.w	r2, #4
   1d942:	d11e      	bne.n	1d982 <ble_ll_adv_legacy_pdu_make+0x8e>
    if (adv_data_len != 0) {
   1d944:	bb29      	cbnz	r1, 1d992 <ble_ll_adv_legacy_pdu_make+0x9e>
}
   1d946:	4628      	mov	r0, r5
   1d948:	bd70      	pop	{r4, r5, r6, pc}
    adv_data_len = ADV_DATA_LEN(advsm);
   1d94a:	2100      	movs	r1, #0
   1d94c:	e7d7      	b.n	1d8fe <ble_ll_adv_legacy_pdu_make+0xa>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1d94e:	f013 0f01 	tst.w	r3, #1
   1d952:	d108      	bne.n	1d966 <ble_ll_adv_legacy_pdu_make+0x72>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   1d954:	f013 0f02 	tst.w	r3, #2
   1d958:	d007      	beq.n	1d96a <ble_ll_adv_legacy_pdu_make+0x76>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_SCAN_IND;
   1d95a:	2306      	movs	r3, #6
   1d95c:	e7dc      	b.n	1d918 <ble_ll_adv_legacy_pdu_make+0x24>
            pdu_type |= BLE_ADV_PDU_HDR_RXADD_RAND;
   1d95e:	2381      	movs	r3, #129	; 0x81
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   1d960:	250c      	movs	r5, #12
        adv_data_len = 0;
   1d962:	2100      	movs	r1, #0
   1d964:	e7d8      	b.n	1d918 <ble_ll_adv_legacy_pdu_make+0x24>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_IND;
   1d966:	2300      	movs	r3, #0
   1d968:	e7d6      	b.n	1d918 <ble_ll_adv_legacy_pdu_make+0x24>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_NONCONN_IND;
   1d96a:	2302      	movs	r3, #2
   1d96c:	e7d4      	b.n	1d918 <ble_ll_adv_legacy_pdu_make+0x24>
    assert(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   1d96e:	f7ea fc27 	bl	81c0 <hal_debugger_connected>
   1d972:	b100      	cbz	r0, 1d976 <ble_ll_adv_legacy_pdu_make+0x82>
   1d974:	be01      	bkpt	0x0001
   1d976:	2300      	movs	r3, #0
   1d978:	461a      	mov	r2, r3
   1d97a:	4619      	mov	r1, r3
   1d97c:	4618      	mov	r0, r3
   1d97e:	f7ec f827 	bl	99d0 <__assert_func>
        memcpy(dptr, advsm->initiator_addr, BLE_DEV_ADDR_LEN);
   1d982:	4622      	mov	r2, r4
   1d984:	f852 6f3a 	ldr.w	r6, [r2, #58]!
   1d988:	f8c0 6006 	str.w	r6, [r0, #6]
   1d98c:	8892      	ldrh	r2, [r2, #4]
   1d98e:	809a      	strh	r2, [r3, #4]
   1d990:	e7d8      	b.n	1d944 <ble_ll_adv_legacy_pdu_make+0x50>
        os_mbuf_copydata(advsm->adv_data, 0, adv_data_len, dptr);
   1d992:	460a      	mov	r2, r1
   1d994:	2100      	movs	r1, #0
   1d996:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1d998:	f7ec fd96 	bl	a4c8 <os_mbuf_copydata>
   1d99c:	e7d3      	b.n	1d946 <ble_ll_adv_legacy_pdu_make+0x52>

0001d99e <ble_ll_adv_scan_rsp_legacy_pdu_make>:
{
   1d99e:	b538      	push	{r3, r4, r5, lr}
   1d9a0:	460c      	mov	r4, r1
    scan_rsp_len = SCAN_RSP_DATA_LEN(advsm);
   1d9a2:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1d9a4:	b1eb      	cbz	r3, 1d9e2 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x44>
   1d9a6:	7c19      	ldrb	r1, [r3, #16]
    assert(scan_rsp_len <= BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN);
   1d9a8:	291f      	cmp	r1, #31
   1d9aa:	d810      	bhi.n	1d9ce <ble_ll_adv_scan_rsp_legacy_pdu_make+0x30>
    pdulen = BLE_DEV_ADDR_LEN + scan_rsp_len;
   1d9ac:	1d8d      	adds	r5, r1, #6
   1d9ae:	b2ed      	uxtb	r5, r5
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) {
   1d9b0:	8963      	ldrh	r3, [r4, #10]
   1d9b2:	f013 0f01 	tst.w	r3, #1
   1d9b6:	d116      	bne.n	1d9e6 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x48>
    hdr = BLE_ADV_PDU_TYPE_SCAN_RSP;
   1d9b8:	2304      	movs	r3, #4
    *hdr_byte = hdr;
   1d9ba:	7013      	strb	r3, [r2, #0]
    memcpy(dptr, advsm->adva, BLE_DEV_ADDR_LEN);
   1d9bc:	4622      	mov	r2, r4
   1d9be:	f852 3f28 	ldr.w	r3, [r2, #40]!
   1d9c2:	6003      	str	r3, [r0, #0]
   1d9c4:	8893      	ldrh	r3, [r2, #4]
   1d9c6:	8083      	strh	r3, [r0, #4]
    if (scan_rsp_len != 0) {
   1d9c8:	b979      	cbnz	r1, 1d9ea <ble_ll_adv_scan_rsp_legacy_pdu_make+0x4c>
}
   1d9ca:	4628      	mov	r0, r5
   1d9cc:	bd38      	pop	{r3, r4, r5, pc}
    assert(scan_rsp_len <= BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN);
   1d9ce:	f7ea fbf7 	bl	81c0 <hal_debugger_connected>
   1d9d2:	b100      	cbz	r0, 1d9d6 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x38>
   1d9d4:	be01      	bkpt	0x0001
   1d9d6:	2300      	movs	r3, #0
   1d9d8:	461a      	mov	r2, r3
   1d9da:	4619      	mov	r1, r3
   1d9dc:	4618      	mov	r0, r3
   1d9de:	f7eb fff7 	bl	99d0 <__assert_func>
    scan_rsp_len = SCAN_RSP_DATA_LEN(advsm);
   1d9e2:	2100      	movs	r1, #0
   1d9e4:	e7e2      	b.n	1d9ac <ble_ll_adv_scan_rsp_legacy_pdu_make+0xe>
        hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1d9e6:	2344      	movs	r3, #68	; 0x44
   1d9e8:	e7e7      	b.n	1d9ba <ble_ll_adv_scan_rsp_legacy_pdu_make+0x1c>
        os_mbuf_copydata(advsm->scan_rsp_data, 0, scan_rsp_len,
   1d9ea:	1d83      	adds	r3, r0, #6
   1d9ec:	460a      	mov	r2, r1
   1d9ee:	2100      	movs	r1, #0
   1d9f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1d9f2:	f7ec fd69 	bl	a4c8 <os_mbuf_copydata>
   1d9f6:	e7e8      	b.n	1d9ca <ble_ll_adv_scan_rsp_legacy_pdu_make+0x2c>

0001d9f8 <ble_ll_adv_drop_event>:
    return rc;
}

static void
ble_ll_adv_drop_event(struct ble_ll_adv_sm *advsm)
{
   1d9f8:	b510      	push	{r4, lr}
   1d9fa:	4604      	mov	r4, r0
    STATS_INC(ble_ll_stats, adv_drop_event);

    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1d9fc:	3064      	adds	r0, #100	; 0x64
   1d9fe:	f007 fcdd 	bl	253bc <ble_ll_sched_rmv_elem>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &advsm->adv_sec_txdone_ev);
    advsm->aux_active = 0;
#endif

    advsm->adv_chan = ble_ll_adv_final_chan(advsm);
   1da02:	4620      	mov	r0, r4
   1da04:	f7ff fd7b 	bl	1d4fe <ble_ll_adv_final_chan>
   1da08:	71a0      	strb	r0, [r4, #6]
   1da0a:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1da0e:	4802      	ldr	r0, [pc, #8]	; (1da18 <ble_ll_adv_drop_event+0x20>)
   1da10:	f7ec fb2b 	bl	a06a <os_eventq_put>
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &advsm->adv_txdone_ev);
}
   1da14:	bd10      	pop	{r4, pc}
   1da16:	bf00      	nop
   1da18:	200084e8 	.word	0x200084e8

0001da1c <ble_ll_adv_update_adv_scan_rsp_data>:
    if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) &&
   1da1c:	8943      	ldrh	r3, [r0, #10]
   1da1e:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   1da22:	d023      	beq.n	1da6c <ble_ll_adv_update_adv_scan_rsp_data+0x50>
{
   1da24:	b510      	push	{r4, lr}
   1da26:	4604      	mov	r4, r0
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) {
   1da28:	f413 7f00 	tst.w	r3, #512	; 0x200
   1da2c:	d00e      	beq.n	1da4c <ble_ll_adv_update_adv_scan_rsp_data+0x30>
        if (advsm->new_adv_data) {
   1da2e:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1da30:	b133      	cbz	r3, 1da40 <ble_ll_adv_update_adv_scan_rsp_data+0x24>
            os_mbuf_free_chain(advsm->adv_data);
   1da32:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1da34:	f7ec fc46 	bl	a2c4 <os_mbuf_free_chain>
            advsm->adv_data = advsm->new_adv_data;
   1da38:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1da3a:	6423      	str	r3, [r4, #64]	; 0x40
            advsm->new_adv_data = NULL;
   1da3c:	2300      	movs	r3, #0
   1da3e:	6463      	str	r3, [r4, #68]	; 0x44
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   1da40:	f44f 7100 	mov.w	r1, #512	; 0x200
   1da44:	4620      	mov	r0, r4
   1da46:	f7ff fd72 	bl	1d52e <ble_ll_adv_flags_clear>
}
   1da4a:	bd10      	pop	{r4, pc}
    } else if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA) {
   1da4c:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1da50:	d0fb      	beq.n	1da4a <ble_ll_adv_update_adv_scan_rsp_data+0x2e>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   1da52:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1da54:	f7ec fc36 	bl	a2c4 <os_mbuf_free_chain>
        advsm->scan_rsp_data = advsm->new_scan_rsp_data;
   1da58:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1da5a:	64a3      	str	r3, [r4, #72]	; 0x48
        advsm->new_scan_rsp_data = NULL;
   1da5c:	2300      	movs	r3, #0
   1da5e:	64e3      	str	r3, [r4, #76]	; 0x4c
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1da60:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1da64:	4620      	mov	r0, r4
   1da66:	f7ff fd62 	bl	1d52e <ble_ll_adv_flags_clear>
   1da6a:	e7ee      	b.n	1da4a <ble_ll_adv_update_adv_scan_rsp_data+0x2e>
   1da6c:	4770      	bx	lr
	...

0001da70 <ble_ll_adv_sm_stop>:
{
   1da70:	b538      	push	{r3, r4, r5, lr}
    if (advsm->adv_enabled) {
   1da72:	7803      	ldrb	r3, [r0, #0]
   1da74:	b903      	cbnz	r3, 1da78 <ble_ll_adv_sm_stop+0x8>
}
   1da76:	bd38      	pop	{r3, r4, r5, pc}
   1da78:	4604      	mov	r4, r0
        ble_ll_rfmgmt_release();
   1da7a:	f005 ff39 	bl	238f0 <ble_ll_rfmgmt_release>
        ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1da7e:	f104 0064 	add.w	r0, r4, #100	; 0x64
   1da82:	f007 fc9b 	bl	253bc <ble_ll_sched_rmv_elem>
        OS_ENTER_CRITICAL(sr);
   1da86:	f7ed fd95 	bl	b5b4 <os_arch_save_sr>
   1da8a:	4605      	mov	r5, r0
        if (ble_ll_state_get() == BLE_LL_STATE_ADV) {
   1da8c:	f7ff fbf8 	bl	1d280 <ble_ll_state_get>
   1da90:	2801      	cmp	r0, #1
   1da92:	d016      	beq.n	1dac2 <ble_ll_adv_sm_stop+0x52>
        OS_EXIT_CRITICAL(sr);
   1da94:	4628      	mov	r0, r5
   1da96:	f7ed fd93 	bl	b5c0 <os_arch_restore_sr>
    os_eventq_remove(&evq->evq, &ev->ev);
   1da9a:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1da9e:	480e      	ldr	r0, [pc, #56]	; (1dad8 <ble_ll_adv_sm_stop+0x68>)
   1daa0:	f7ec fb6d 	bl	a17e <os_eventq_remove>
        if (advsm->conn_comp_ev) {
   1daa4:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1daa6:	b118      	cbz	r0, 1dab0 <ble_ll_adv_sm_stop+0x40>
            ble_hci_trans_buf_free(advsm->conn_comp_ev);
   1daa8:	f7f8 fdd2 	bl	16650 <ble_hci_trans_buf_free>
            advsm->conn_comp_ev = NULL;
   1daac:	2300      	movs	r3, #0
   1daae:	6523      	str	r3, [r4, #80]	; 0x50
        ble_ll_adv_active_chanset_clear(advsm);
   1dab0:	4620      	mov	r0, r4
   1dab2:	f7ff fd86 	bl	1d5c2 <ble_ll_adv_active_chanset_clear>
        advsm->adv_enabled = 0;
   1dab6:	2300      	movs	r3, #0
   1dab8:	7023      	strb	r3, [r4, #0]
        ble_ll_adv_update_adv_scan_rsp_data(advsm);
   1daba:	4620      	mov	r0, r4
   1dabc:	f7ff ffae 	bl	1da1c <ble_ll_adv_update_adv_scan_rsp_data>
}
   1dac0:	e7d9      	b.n	1da76 <ble_ll_adv_sm_stop+0x6>
            ble_phy_disable();
   1dac2:	f008 fb9f 	bl	26204 <ble_phy_disable>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1dac6:	2000      	movs	r0, #0
   1dac8:	f7ff fbd4 	bl	1d274 <ble_ll_state_set>
            g_ble_ll_cur_adv_sm = NULL;
   1dacc:	4b03      	ldr	r3, [pc, #12]	; (1dadc <ble_ll_adv_sm_stop+0x6c>)
   1dace:	2200      	movs	r2, #0
   1dad0:	601a      	str	r2, [r3, #0]
            ble_ll_scan_chk_resume();
   1dad2:	f006 fe77 	bl	247c4 <ble_ll_scan_chk_resume>
   1dad6:	e7dd      	b.n	1da94 <ble_ll_adv_sm_stop+0x24>
   1dad8:	200084e8 	.word	0x200084e8
   1dadc:	200087e0 	.word	0x200087e0

0001dae0 <ble_ll_adv_set_enable>:
{
   1dae0:	b510      	push	{r4, lr}
   1dae2:	460c      	mov	r4, r1
    advsm = ble_ll_adv_sm_find_configured(instance);
   1dae4:	f7ff fd90 	bl	1d608 <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1dae8:	b168      	cbz	r0, 1db06 <ble_ll_adv_set_enable+0x26>
    if (enable == 1) {
   1daea:	2c01      	cmp	r4, #1
   1daec:	d004      	beq.n	1daf8 <ble_ll_adv_set_enable+0x18>
    } else if (enable == 0) {
   1daee:	b964      	cbnz	r4, 1db0a <ble_ll_adv_set_enable+0x2a>
        ble_ll_adv_sm_stop(advsm);
   1daf0:	f7ff ffbe 	bl	1da70 <ble_ll_adv_sm_stop>
    rc = BLE_ERR_SUCCESS;
   1daf4:	2000      	movs	r0, #0
}
   1daf6:	bd10      	pop	{r4, pc}
        if (!advsm->adv_enabled) {
   1daf8:	7802      	ldrb	r2, [r0, #0]
   1dafa:	b10a      	cbz	r2, 1db00 <ble_ll_adv_set_enable+0x20>
    rc = BLE_ERR_SUCCESS;
   1dafc:	2000      	movs	r0, #0
   1dafe:	e7fa      	b.n	1daf6 <ble_ll_adv_set_enable+0x16>
            rc = ble_ll_adv_sm_start(advsm);
   1db00:	f7ff fe02 	bl	1d708 <ble_ll_adv_sm_start>
   1db04:	e7f7      	b.n	1daf6 <ble_ll_adv_set_enable+0x16>
        return BLE_ERR_UNK_ADV_INDENT;
   1db06:	2042      	movs	r0, #66	; 0x42
   1db08:	e7f5      	b.n	1daf6 <ble_ll_adv_set_enable+0x16>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1db0a:	2012      	movs	r0, #18
   1db0c:	e7f3      	b.n	1daf6 <ble_ll_adv_set_enable+0x16>

0001db0e <ble_ll_adv_update_data_mbuf>:
{
   1db0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db12:	4605      	mov	r5, r0
   1db14:	4617      	mov	r7, r2
   1db16:	4698      	mov	r8, r3
   1db18:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    om = *omp;
   1db1c:	6804      	ldr	r4, [r0, #0]
    if (new_data) {
   1db1e:	b149      	cbz	r1, 1db34 <ble_ll_adv_update_data_mbuf+0x26>
        if (om) {
   1db20:	b114      	cbz	r4, 1db28 <ble_ll_adv_update_data_mbuf+0x1a>
            os_mbuf_free_chain(om);
   1db22:	4620      	mov	r0, r4
   1db24:	f7ec fbce 	bl	a2c4 <os_mbuf_free_chain>
        om = os_msys_get_pkthdr(datalen, 0);
   1db28:	2100      	movs	r1, #0
   1db2a:	4630      	mov	r0, r6
   1db2c:	f7ed f8e3 	bl	acf6 <os_msys_get_pkthdr>
        if (!om) {
   1db30:	4604      	mov	r4, r0
   1db32:	b1e8      	cbz	r0, 1db70 <ble_ll_adv_update_data_mbuf+0x62>
    assert(om);
   1db34:	b174      	cbz	r4, 1db54 <ble_ll_adv_update_data_mbuf+0x46>
    if (OS_MBUF_PKTLEN(om) + datalen > maxlen) {
   1db36:	8a23      	ldrh	r3, [r4, #16]
   1db38:	4433      	add	r3, r6
   1db3a:	42bb      	cmp	r3, r7
   1db3c:	dc14      	bgt.n	1db68 <ble_ll_adv_update_data_mbuf+0x5a>
    ret = os_mbuf_append(om, data, datalen);
   1db3e:	4632      	mov	r2, r6
   1db40:	4641      	mov	r1, r8
   1db42:	4620      	mov	r0, r4
   1db44:	f7ec fbd0 	bl	a2e8 <os_mbuf_append>
    if (ret) {
   1db48:	b190      	cbz	r0, 1db70 <ble_ll_adv_update_data_mbuf+0x62>
        os_mbuf_free_chain(om);
   1db4a:	4620      	mov	r0, r4
   1db4c:	f7ec fbba 	bl	a2c4 <os_mbuf_free_chain>
        om = NULL;
   1db50:	2400      	movs	r4, #0
   1db52:	e00d      	b.n	1db70 <ble_ll_adv_update_data_mbuf+0x62>
    assert(om);
   1db54:	f7ea fb34 	bl	81c0 <hal_debugger_connected>
   1db58:	b100      	cbz	r0, 1db5c <ble_ll_adv_update_data_mbuf+0x4e>
   1db5a:	be01      	bkpt	0x0001
   1db5c:	2300      	movs	r3, #0
   1db5e:	461a      	mov	r2, r3
   1db60:	4619      	mov	r1, r3
   1db62:	4618      	mov	r0, r3
   1db64:	f7eb ff34 	bl	99d0 <__assert_func>
        os_mbuf_free_chain(om);
   1db68:	4620      	mov	r0, r4
   1db6a:	f7ec fbab 	bl	a2c4 <os_mbuf_free_chain>
        om = NULL;
   1db6e:	2400      	movs	r4, #0
    *omp = om;
   1db70:	602c      	str	r4, [r5, #0]
}
   1db72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001db76 <ble_ll_adv_set_scan_rsp_data>:
{
   1db76:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db78:	b083      	sub	sp, #12
   1db7a:	4607      	mov	r7, r0
   1db7c:	460e      	mov	r6, r1
   1db7e:	461d      	mov	r5, r3
    advsm = ble_ll_adv_sm_find_configured(instance);
   1db80:	4610      	mov	r0, r2
   1db82:	f7ff fd41 	bl	1d608 <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1db86:	2800      	cmp	r0, #0
   1db88:	d042      	beq.n	1dc10 <ble_ll_adv_set_scan_rsp_data+0x9a>
   1db8a:	4604      	mov	r4, r0
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE)) {
   1db8c:	8983      	ldrh	r3, [r0, #12]
   1db8e:	f013 0f02 	tst.w	r3, #2
   1db92:	d102      	bne.n	1db9a <ble_ll_adv_set_scan_rsp_data+0x24>
        if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   1db94:	f013 0f10 	tst.w	r3, #16
   1db98:	d03c      	beq.n	1dc14 <ble_ll_adv_set_scan_rsp_data+0x9e>
    switch (operation) {
   1db9a:	2d03      	cmp	r5, #3
   1db9c:	d13c      	bne.n	1dc18 <ble_ll_adv_set_scan_rsp_data+0xa2>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1db9e:	f013 0f10 	tst.w	r3, #16
   1dba2:	d001      	beq.n	1dba8 <ble_ll_adv_set_scan_rsp_data+0x32>
            if (datalen > BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN) {
   1dba4:	2e1f      	cmp	r6, #31
   1dba6:	d83a      	bhi.n	1dc1e <ble_ll_adv_set_scan_rsp_data+0xa8>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   1dba8:	2d03      	cmp	r5, #3
   1dbaa:	d021      	beq.n	1dbf0 <ble_ll_adv_set_scan_rsp_data+0x7a>
   1dbac:	2d01      	cmp	r5, #1
   1dbae:	d000      	beq.n	1dbb2 <ble_ll_adv_set_scan_rsp_data+0x3c>
   1dbb0:	2500      	movs	r5, #0
    if (advsm->adv_enabled) {
   1dbb2:	7823      	ldrb	r3, [r4, #0]
   1dbb4:	b1f3      	cbz	r3, 1dbf4 <ble_ll_adv_set_scan_rsp_data+0x7e>
        if (advsm->new_scan_rsp_data) {
   1dbb6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1dbb8:	b14b      	cbz	r3, 1dbce <ble_ll_adv_set_scan_rsp_data+0x58>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1dbba:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1dbbe:	4620      	mov	r0, r4
   1dbc0:	f7ff fcb5 	bl	1d52e <ble_ll_adv_flags_clear>
            os_mbuf_free_chain(advsm->new_scan_rsp_data);
   1dbc4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1dbc6:	f7ec fb7d 	bl	a2c4 <os_mbuf_free_chain>
            advsm->new_scan_rsp_data = NULL;
   1dbca:	2300      	movs	r3, #0
   1dbcc:	64e3      	str	r3, [r4, #76]	; 0x4c
        ble_ll_adv_update_data_mbuf(&advsm->new_scan_rsp_data, new_data,
   1dbce:	9600      	str	r6, [sp, #0]
   1dbd0:	463b      	mov	r3, r7
   1dbd2:	221f      	movs	r2, #31
   1dbd4:	4629      	mov	r1, r5
   1dbd6:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1dbda:	f7ff ff98 	bl	1db0e <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_scan_rsp_data) {
   1dbde:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1dbe0:	b1fb      	cbz	r3, 1dc22 <ble_ll_adv_set_scan_rsp_data+0xac>
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1dbe2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1dbe6:	4620      	mov	r0, r4
   1dbe8:	f7ff fc96 	bl	1d518 <ble_ll_adv_flags_set>
    return BLE_ERR_SUCCESS;
   1dbec:	2000      	movs	r0, #0
   1dbee:	e014      	b.n	1dc1a <ble_ll_adv_set_scan_rsp_data+0xa4>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   1dbf0:	2501      	movs	r5, #1
   1dbf2:	e7de      	b.n	1dbb2 <ble_ll_adv_set_scan_rsp_data+0x3c>
        ble_ll_adv_update_data_mbuf(&advsm->scan_rsp_data, new_data,
   1dbf4:	9600      	str	r6, [sp, #0]
   1dbf6:	463b      	mov	r3, r7
   1dbf8:	221f      	movs	r2, #31
   1dbfa:	4629      	mov	r1, r5
   1dbfc:	f104 0048 	add.w	r0, r4, #72	; 0x48
   1dc00:	f7ff ff85 	bl	1db0e <ble_ll_adv_update_data_mbuf>
        if (!advsm->scan_rsp_data) {
   1dc04:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1dc06:	b10b      	cbz	r3, 1dc0c <ble_ll_adv_set_scan_rsp_data+0x96>
    return BLE_ERR_SUCCESS;
   1dc08:	2000      	movs	r0, #0
   1dc0a:	e006      	b.n	1dc1a <ble_ll_adv_set_scan_rsp_data+0xa4>
            return BLE_ERR_MEM_CAPACITY;
   1dc0c:	2007      	movs	r0, #7
   1dc0e:	e004      	b.n	1dc1a <ble_ll_adv_set_scan_rsp_data+0xa4>
        return BLE_ERR_UNK_ADV_INDENT;
   1dc10:	2042      	movs	r0, #66	; 0x42
   1dc12:	e002      	b.n	1dc1a <ble_ll_adv_set_scan_rsp_data+0xa4>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   1dc14:	2012      	movs	r0, #18
   1dc16:	e000      	b.n	1dc1a <ble_ll_adv_set_scan_rsp_data+0xa4>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1dc18:	2012      	movs	r0, #18
}
   1dc1a:	b003      	add	sp, #12
   1dc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1dc1e:	2012      	movs	r0, #18
   1dc20:	e7fb      	b.n	1dc1a <ble_ll_adv_set_scan_rsp_data+0xa4>
            return BLE_ERR_MEM_CAPACITY;
   1dc22:	2007      	movs	r0, #7
   1dc24:	e7f9      	b.n	1dc1a <ble_ll_adv_set_scan_rsp_data+0xa4>

0001dc26 <ble_ll_adv_set_adv_data>:
{
   1dc26:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc28:	b083      	sub	sp, #12
   1dc2a:	4607      	mov	r7, r0
   1dc2c:	460e      	mov	r6, r1
   1dc2e:	461d      	mov	r5, r3
    advsm = ble_ll_adv_sm_find_configured(instance);
   1dc30:	4610      	mov	r0, r2
   1dc32:	f7ff fce9 	bl	1d608 <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1dc36:	2800      	cmp	r0, #0
   1dc38:	d04f      	beq.n	1dcda <ble_ll_adv_set_adv_data+0xb4>
   1dc3a:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1dc3c:	8983      	ldrh	r3, [r0, #12]
   1dc3e:	f013 0f10 	tst.w	r3, #16
   1dc42:	d007      	beq.n	1dc54 <ble_ll_adv_set_adv_data+0x2e>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1dc44:	f013 0f04 	tst.w	r3, #4
   1dc48:	d007      	beq.n	1dc5a <ble_ll_adv_set_adv_data+0x34>
            if (ble_ll_hci_adv_mode_ext()) {
   1dc4a:	f004 fea4 	bl	22996 <ble_ll_hci_adv_mode_ext>
   1dc4e:	b120      	cbz	r0, 1dc5a <ble_ll_adv_set_adv_data+0x34>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1dc50:	2012      	movs	r0, #18
   1dc52:	e047      	b.n	1dce4 <ble_ll_adv_set_adv_data+0xbe>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   1dc54:	f013 0f02 	tst.w	r3, #2
   1dc58:	d141      	bne.n	1dcde <ble_ll_adv_set_adv_data+0xb8>
    switch (operation) {
   1dc5a:	2d03      	cmp	r5, #3
   1dc5c:	d141      	bne.n	1dce2 <ble_ll_adv_set_adv_data+0xbc>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1dc5e:	89a3      	ldrh	r3, [r4, #12]
   1dc60:	f013 0f10 	tst.w	r3, #16
   1dc64:	d001      	beq.n	1dc6a <ble_ll_adv_set_adv_data+0x44>
            if (datalen > BLE_ADV_LEGACY_DATA_MAX_LEN) {
   1dc66:	2e1f      	cmp	r6, #31
   1dc68:	d83e      	bhi.n	1dce8 <ble_ll_adv_set_adv_data+0xc2>
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_ADV_DATA_INCOMPLETE);
   1dc6a:	2140      	movs	r1, #64	; 0x40
   1dc6c:	4620      	mov	r0, r4
   1dc6e:	f7ff fc5e 	bl	1d52e <ble_ll_adv_flags_clear>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   1dc72:	2d03      	cmp	r5, #3
   1dc74:	d021      	beq.n	1dcba <ble_ll_adv_set_adv_data+0x94>
   1dc76:	2d01      	cmp	r5, #1
   1dc78:	d000      	beq.n	1dc7c <ble_ll_adv_set_adv_data+0x56>
   1dc7a:	2500      	movs	r5, #0
    if (advsm->adv_enabled) {
   1dc7c:	7823      	ldrb	r3, [r4, #0]
   1dc7e:	b1f3      	cbz	r3, 1dcbe <ble_ll_adv_set_adv_data+0x98>
        if (advsm->new_adv_data) {
   1dc80:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1dc82:	b14b      	cbz	r3, 1dc98 <ble_ll_adv_set_adv_data+0x72>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   1dc84:	f44f 7100 	mov.w	r1, #512	; 0x200
   1dc88:	4620      	mov	r0, r4
   1dc8a:	f7ff fc50 	bl	1d52e <ble_ll_adv_flags_clear>
            os_mbuf_free_chain(advsm->new_adv_data);
   1dc8e:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1dc90:	f7ec fb18 	bl	a2c4 <os_mbuf_free_chain>
            advsm->new_adv_data = NULL;
   1dc94:	2300      	movs	r3, #0
   1dc96:	6463      	str	r3, [r4, #68]	; 0x44
        ble_ll_adv_update_data_mbuf(&advsm->new_adv_data, new_data,
   1dc98:	9600      	str	r6, [sp, #0]
   1dc9a:	463b      	mov	r3, r7
   1dc9c:	221f      	movs	r2, #31
   1dc9e:	4629      	mov	r1, r5
   1dca0:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1dca4:	f7ff ff33 	bl	1db0e <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_adv_data) {
   1dca8:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1dcaa:	b1fb      	cbz	r3, 1dcec <ble_ll_adv_set_adv_data+0xc6>
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   1dcac:	f44f 7100 	mov.w	r1, #512	; 0x200
   1dcb0:	4620      	mov	r0, r4
   1dcb2:	f7ff fc31 	bl	1d518 <ble_ll_adv_flags_set>
    return BLE_ERR_SUCCESS;
   1dcb6:	2000      	movs	r0, #0
   1dcb8:	e014      	b.n	1dce4 <ble_ll_adv_set_adv_data+0xbe>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   1dcba:	2501      	movs	r5, #1
   1dcbc:	e7de      	b.n	1dc7c <ble_ll_adv_set_adv_data+0x56>
        ble_ll_adv_update_data_mbuf(&advsm->adv_data, new_data,
   1dcbe:	9600      	str	r6, [sp, #0]
   1dcc0:	463b      	mov	r3, r7
   1dcc2:	221f      	movs	r2, #31
   1dcc4:	4629      	mov	r1, r5
   1dcc6:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1dcca:	f7ff ff20 	bl	1db0e <ble_ll_adv_update_data_mbuf>
        if (!advsm->adv_data) {
   1dcce:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1dcd0:	b10b      	cbz	r3, 1dcd6 <ble_ll_adv_set_adv_data+0xb0>
    return BLE_ERR_SUCCESS;
   1dcd2:	2000      	movs	r0, #0
   1dcd4:	e006      	b.n	1dce4 <ble_ll_adv_set_adv_data+0xbe>
            return BLE_ERR_MEM_CAPACITY;
   1dcd6:	2007      	movs	r0, #7
   1dcd8:	e004      	b.n	1dce4 <ble_ll_adv_set_adv_data+0xbe>
        return BLE_ERR_UNK_ADV_INDENT;
   1dcda:	2042      	movs	r0, #66	; 0x42
   1dcdc:	e002      	b.n	1dce4 <ble_ll_adv_set_adv_data+0xbe>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   1dcde:	2012      	movs	r0, #18
   1dce0:	e000      	b.n	1dce4 <ble_ll_adv_set_adv_data+0xbe>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1dce2:	2012      	movs	r0, #18
}
   1dce4:	b003      	add	sp, #12
   1dce6:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1dce8:	2012      	movs	r0, #18
   1dcea:	e7fb      	b.n	1dce4 <ble_ll_adv_set_adv_data+0xbe>
            return BLE_ERR_MEM_CAPACITY;
   1dcec:	2007      	movs	r0, #7
   1dcee:	e7f9      	b.n	1dce4 <ble_ll_adv_set_adv_data+0xbe>

0001dcf0 <ble_ll_adv_already_connected>:
{
   1dcf0:	b570      	push	{r4, r5, r6, lr}
   1dcf2:	4605      	mov	r5, r0
   1dcf4:	460e      	mov	r6, r1
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   1dcf6:	4b10      	ldr	r3, [pc, #64]	; (1dd38 <ble_ll_adv_already_connected+0x48>)
   1dcf8:	681c      	ldr	r4, [r3, #0]
   1dcfa:	e006      	b.n	1dd0a <ble_ll_adv_already_connected+0x1a>
                if (connsm->peer_addr_type & 1) {
   1dcfc:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
   1dd00:	f013 0f01 	tst.w	r3, #1
   1dd04:	d115      	bne.n	1dd32 <ble_ll_adv_already_connected+0x42>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   1dd06:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   1dd0a:	b184      	cbz	r4, 1dd2e <ble_ll_adv_already_connected+0x3e>
        if (!memcmp(&connsm->peer_addr, addr, BLE_DEV_ADDR_LEN)) {
   1dd0c:	2206      	movs	r2, #6
   1dd0e:	4629      	mov	r1, r5
   1dd10:	f104 0093 	add.w	r0, r4, #147	; 0x93
   1dd14:	f7ed fd98 	bl	b848 <memcmp>
   1dd18:	2800      	cmp	r0, #0
   1dd1a:	d1f4      	bne.n	1dd06 <ble_ll_adv_already_connected+0x16>
            if (addr_type == BLE_ADDR_RANDOM) {
   1dd1c:	2e01      	cmp	r6, #1
   1dd1e:	d0ed      	beq.n	1dcfc <ble_ll_adv_already_connected+0xc>
                if ((connsm->peer_addr_type & 1) == 0) {
   1dd20:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
   1dd24:	f013 0f01 	tst.w	r3, #1
   1dd28:	d1ed      	bne.n	1dd06 <ble_ll_adv_already_connected+0x16>
                    return 1;
   1dd2a:	2001      	movs	r0, #1
   1dd2c:	e000      	b.n	1dd30 <ble_ll_adv_already_connected+0x40>
    return 0;
   1dd2e:	2000      	movs	r0, #0
}
   1dd30:	bd70      	pop	{r4, r5, r6, pc}
                    return 1;
   1dd32:	2001      	movs	r0, #1
   1dd34:	e7fc      	b.n	1dd30 <ble_ll_adv_already_connected+0x40>
   1dd36:	bf00      	nop
   1dd38:	200087e4 	.word	0x200087e4

0001dd3c <ble_ll_adv_rx_req>:
{
   1dd3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd40:	4607      	mov	r7, r0
   1dd42:	460e      	mov	r6, r1
    advsm = g_ble_ll_cur_adv_sm;
   1dd44:	4b4b      	ldr	r3, [pc, #300]	; (1de74 <ble_ll_adv_rx_req+0x138>)
   1dd46:	f8d3 8000 	ldr.w	r8, [r3]
    rxbuf = rxpdu->om_data;
   1dd4a:	680d      	ldr	r5, [r1, #0]
    if (memcmp(advsm->adva, adva, BLE_DEV_ADDR_LEN)) {
   1dd4c:	2206      	movs	r2, #6
   1dd4e:	f105 0108 	add.w	r1, r5, #8
   1dd52:	f108 0028 	add.w	r0, r8, #40	; 0x28
   1dd56:	f7ed fd77 	bl	b848 <memcmp>
   1dd5a:	2800      	cmp	r0, #0
   1dd5c:	d17e      	bne.n	1de5c <ble_ll_adv_rx_req+0x120>
   1dd5e:	4682      	mov	sl, r0
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   1dd60:	2f03      	cmp	r7, #3
   1dd62:	d022      	beq.n	1ddaa <ble_ll_adv_rx_req+0x6e>
        chk_wl = advsm->adv_filter_policy & 2;
   1dd64:	f898 4003 	ldrb.w	r4, [r8, #3]
   1dd68:	f004 0402 	and.w	r4, r4, #2
    if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   1dd6c:	782b      	ldrb	r3, [r5, #0]
   1dd6e:	f013 0f40 	tst.w	r3, #64	; 0x40
   1dd72:	d01f      	beq.n	1ddb4 <ble_ll_adv_rx_req+0x78>
        txadd = BLE_ADDR_RANDOM;
   1dd74:	f04f 0901 	mov.w	r9, #1
    peer = rxbuf + BLE_LL_PDU_HDR_LEN;
   1dd78:	3502      	adds	r5, #2
    if (ble_ll_resolv_enabled()) {
   1dd7a:	f005 fc7b 	bl	23674 <ble_ll_resolv_enabled>
   1dd7e:	b9e0      	cbnz	r0, 1ddba <ble_ll_adv_rx_req+0x7e>
    if (chk_wl && !ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   1dd80:	2c00      	cmp	r4, #0
   1dd82:	d150      	bne.n	1de26 <ble_ll_adv_rx_req+0xea>
    ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_DEVMATCH;
   1dd84:	8b33      	ldrh	r3, [r6, #24]
   1dd86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1dd8a:	8333      	strh	r3, [r6, #24]
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   1dd8c:	2f03      	cmp	r7, #3
   1dd8e:	d054      	beq.n	1de3a <ble_ll_adv_rx_req+0xfe>
    } else if (pdu_type == BLE_ADV_PDU_TYPE_AUX_CONNECT_REQ) {
   1dd90:	2f05      	cmp	r7, #5
   1dd92:	d169      	bne.n	1de68 <ble_ll_adv_rx_req+0x12c>
        if (ble_ll_adv_already_connected(peer, peer_addr_type)) {
   1dd94:	4649      	mov	r1, r9
   1dd96:	4628      	mov	r0, r5
   1dd98:	f7ff ffaa 	bl	1dcf0 <ble_ll_adv_already_connected>
   1dd9c:	2800      	cmp	r0, #0
   1dd9e:	d166      	bne.n	1de6e <ble_ll_adv_rx_req+0x132>
    rc = -1;
   1dda0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1dda4:	4618      	mov	r0, r3
   1dda6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chk_wl = advsm->adv_filter_policy & 1;
   1ddaa:	f898 4003 	ldrb.w	r4, [r8, #3]
   1ddae:	f004 0401 	and.w	r4, r4, #1
   1ddb2:	e7db      	b.n	1dd6c <ble_ll_adv_rx_req+0x30>
        txadd = BLE_ADDR_PUBLIC;
   1ddb4:	f04f 0900 	mov.w	r9, #0
   1ddb8:	e7de      	b.n	1dd78 <ble_ll_adv_rx_req+0x3c>
        if (ble_ll_is_rpa(peer, txadd)) {
   1ddba:	4649      	mov	r1, r9
   1ddbc:	4628      	mov	r0, r5
   1ddbe:	f7ff f88f 	bl	1cee0 <ble_ll_is_rpa>
   1ddc2:	4683      	mov	fp, r0
   1ddc4:	b300      	cbz	r0, 1de08 <ble_ll_adv_rx_req+0xcc>
            advsm->adv_rpa_index = ble_hw_resolv_list_match();
   1ddc6:	f007 fe65 	bl	25a94 <ble_hw_resolv_list_match>
   1ddca:	b240      	sxtb	r0, r0
   1ddcc:	f888 0008 	strb.w	r0, [r8, #8]
            if (advsm->adv_rpa_index >= 0) {
   1ddd0:	2800      	cmp	r0, #0
   1ddd2:	db14      	blt.n	1ddfe <ble_ll_adv_rx_req+0xc2>
                ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_RESOLVED;
   1ddd4:	8b33      	ldrh	r3, [r6, #24]
   1ddd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1ddda:	8333      	strh	r3, [r6, #24]
                rl = &g_ble_ll_resolv_list[advsm->adv_rpa_index];
   1dddc:	f998 2008 	ldrsb.w	r2, [r8, #8]
                if (chk_wl) {
   1dde0:	2c00      	cmp	r4, #0
   1dde2:	d0cd      	beq.n	1dd80 <ble_ll_adv_rx_req+0x44>
                    peer = rl->rl_identity_addr;
   1dde4:	2336      	movs	r3, #54	; 0x36
   1dde6:	fb03 f302 	mul.w	r3, r3, r2
   1ddea:	f103 0520 	add.w	r5, r3, #32
   1ddee:	4a22      	ldr	r2, [pc, #136]	; (1de78 <ble_ll_adv_rx_req+0x13c>)
   1ddf0:	4415      	add	r5, r2
   1ddf2:	3504      	adds	r5, #4
                    peer_addr_type = rl->rl_addr_type;
   1ddf4:	f812 9003 	ldrb.w	r9, [r2, r3]
                    resolved = 1;
   1ddf8:	f04f 0a01 	mov.w	sl, #1
   1ddfc:	e7c0      	b.n	1dd80 <ble_ll_adv_rx_req+0x44>
                if (chk_wl) {
   1ddfe:	2c00      	cmp	r4, #0
   1de00:	d0be      	beq.n	1dd80 <ble_ll_adv_rx_req+0x44>
                    return -1;
   1de02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de06:	e7cd      	b.n	1dda4 <ble_ll_adv_rx_req+0x68>
            rl = ble_ll_resolv_list_find(peer, peer_addr_type);
   1de08:	4649      	mov	r1, r9
   1de0a:	4628      	mov	r0, r5
   1de0c:	f005 f9dc 	bl	231c8 <ble_ll_resolv_list_find>
            if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1de10:	b128      	cbz	r0, 1de1e <ble_ll_adv_rx_req+0xe2>
   1de12:	7842      	ldrb	r2, [r0, #1]
   1de14:	b92a      	cbnz	r2, 1de22 <ble_ll_adv_rx_req+0xe6>
                rl->rl_has_peer) {
   1de16:	78c3      	ldrb	r3, [r0, #3]
            if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1de18:	bb1b      	cbnz	r3, 1de62 <ble_ll_adv_rx_req+0x126>
    resolved = 0;
   1de1a:	46da      	mov	sl, fp
   1de1c:	e7b0      	b.n	1dd80 <ble_ll_adv_rx_req+0x44>
   1de1e:	46da      	mov	sl, fp
   1de20:	e7ae      	b.n	1dd80 <ble_ll_adv_rx_req+0x44>
   1de22:	46da      	mov	sl, fp
   1de24:	e7ac      	b.n	1dd80 <ble_ll_adv_rx_req+0x44>
    if (chk_wl && !ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   1de26:	4652      	mov	r2, sl
   1de28:	4649      	mov	r1, r9
   1de2a:	4628      	mov	r0, r5
   1de2c:	f007 fc34 	bl	25698 <ble_ll_whitelist_match>
   1de30:	2800      	cmp	r0, #0
   1de32:	d1a7      	bne.n	1dd84 <ble_ll_adv_rx_req+0x48>
        return -1;
   1de34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de38:	e7b4      	b.n	1dda4 <ble_ll_adv_rx_req+0x68>
        ble_phy_set_txend_cb(ble_ll_adv_tx_done, advsm);
   1de3a:	4641      	mov	r1, r8
   1de3c:	480f      	ldr	r0, [pc, #60]	; (1de7c <ble_ll_adv_rx_req+0x140>)
   1de3e:	f008 f979 	bl	26134 <ble_phy_set_txend_cb>
        rc = ble_phy_tx(ble_ll_adv_scan_rsp_legacy_pdu_make, advsm,
   1de42:	2200      	movs	r2, #0
   1de44:	4641      	mov	r1, r8
   1de46:	480e      	ldr	r0, [pc, #56]	; (1de80 <ble_ll_adv_rx_req+0x144>)
   1de48:	f008 fbce 	bl	265e8 <ble_phy_tx>
        if (!rc) {
   1de4c:	4603      	mov	r3, r0
   1de4e:	2800      	cmp	r0, #0
   1de50:	d1a8      	bne.n	1dda4 <ble_ll_adv_rx_req+0x68>
            ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_SCAN_RSP_TXD;
   1de52:	8b32      	ldrh	r2, [r6, #24]
   1de54:	f042 0210 	orr.w	r2, r2, #16
   1de58:	8332      	strh	r2, [r6, #24]
   1de5a:	e7a3      	b.n	1dda4 <ble_ll_adv_rx_req+0x68>
        return -1;
   1de5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de60:	e7a0      	b.n	1dda4 <ble_ll_adv_rx_req+0x68>
                return -1;
   1de62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de66:	e79d      	b.n	1dda4 <ble_ll_adv_rx_req+0x68>
    rc = -1;
   1de68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de6c:	e79a      	b.n	1dda4 <ble_ll_adv_rx_req+0x68>
            return -1;
   1de6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de72:	e797      	b.n	1dda4 <ble_ll_adv_rx_req+0x68>
   1de74:	200087e0 	.word	0x200087e0
   1de78:	20008a40 	.word	0x20008a40
   1de7c:	0001d5d9 	.word	0x0001d5d9
   1de80:	0001d99f 	.word	0x0001d99f

0001de84 <ble_ll_adv_conn_req_rxd>:
{
   1de84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   1de88:	8993      	ldrh	r3, [r2, #12]
   1de8a:	f013 0f10 	tst.w	r3, #16
   1de8e:	d103      	bne.n	1de98 <ble_ll_adv_conn_req_rxd+0x14>
        if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   1de90:	8954      	ldrh	r4, [r2, #10]
   1de92:	f014 0f08 	tst.w	r4, #8
   1de96:	d069      	beq.n	1df6c <ble_ll_adv_conn_req_rxd+0xe8>
    resolved = BLE_MBUF_HDR_RESOLVED(hdr);
   1de98:	880c      	ldrh	r4, [r1, #0]
   1de9a:	f404 6680 	and.w	r6, r4, #1024	; 0x400
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   1de9e:	1c87      	adds	r7, r0, #2
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_DEVMATCH) {
   1dea0:	f014 0f40 	tst.w	r4, #64	; 0x40
   1dea4:	d064      	beq.n	1df70 <ble_ll_adv_conn_req_rxd+0xec>
        if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   1dea6:	7804      	ldrb	r4, [r0, #0]
   1dea8:	f014 0f40 	tst.w	r4, #64	; 0x40
   1deac:	d019      	beq.n	1dee2 <ble_ll_adv_conn_req_rxd+0x5e>
            addr_type = BLE_ADDR_RANDOM;
   1deae:	f04f 0801 	mov.w	r8, #1
   1deb2:	4614      	mov	r4, r2
   1deb4:	4689      	mov	r9, r1
   1deb6:	4605      	mov	r5, r0
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1deb8:	f013 0f04 	tst.w	r3, #4
   1debc:	d01d      	beq.n	1defa <ble_ll_adv_conn_req_rxd+0x76>
            if (resolved) {
   1debe:	b19e      	cbz	r6, 1dee8 <ble_ll_adv_conn_req_rxd+0x64>
                ident_addr = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr;
   1dec0:	f992 2008 	ldrsb.w	r2, [r2, #8]
   1dec4:	2336      	movs	r3, #54	; 0x36
   1dec6:	fb03 f302 	mul.w	r3, r3, r2
   1deca:	f103 0120 	add.w	r1, r3, #32
   1dece:	4a2b      	ldr	r2, [pc, #172]	; (1df7c <ble_ll_adv_conn_req_rxd+0xf8>)
   1ded0:	4411      	add	r1, r2
   1ded2:	3104      	adds	r1, #4
                addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   1ded4:	f812 8003 	ldrb.w	r8, [r2, r3]
            if ((addr_type != advsm->peer_addr_type) ||
   1ded8:	7963      	ldrb	r3, [r4, #5]
   1deda:	4543      	cmp	r3, r8
   1dedc:	d006      	beq.n	1deec <ble_ll_adv_conn_req_rxd+0x68>
   1dede:	2500      	movs	r5, #0
   1dee0:	e047      	b.n	1df72 <ble_ll_adv_conn_req_rxd+0xee>
            addr_type = BLE_ADDR_PUBLIC;
   1dee2:	f04f 0800 	mov.w	r8, #0
   1dee6:	e7e4      	b.n	1deb2 <ble_ll_adv_conn_req_rxd+0x2e>
            ident_addr = inita;
   1dee8:	4639      	mov	r1, r7
   1deea:	e7f5      	b.n	1ded8 <ble_ll_adv_conn_req_rxd+0x54>
                memcmp(advsm->peer_addr, ident_addr, BLE_DEV_ADDR_LEN)) {
   1deec:	2206      	movs	r2, #6
   1deee:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1def2:	f7ed fca9 	bl	b848 <memcmp>
            if ((addr_type != advsm->peer_addr_type) ||
   1def6:	2800      	cmp	r0, #0
   1def8:	d13e      	bne.n	1df78 <ble_ll_adv_conn_req_rxd+0xf4>
        if (resolved) {
   1defa:	b9a6      	cbnz	r6, 1df26 <ble_ll_adv_conn_req_rxd+0xa2>
                          !(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY));
   1defc:	89a3      	ldrh	r3, [r4, #12]
        valid = ble_ll_conn_slave_start(rxbuf, addr_type, hdr,
   1defe:	091b      	lsrs	r3, r3, #4
   1df00:	f083 0301 	eor.w	r3, r3, #1
   1df04:	f003 0301 	and.w	r3, r3, #1
   1df08:	464a      	mov	r2, r9
   1df0a:	4641      	mov	r1, r8
   1df0c:	4628      	mov	r0, r5
   1df0e:	f002 f9c5 	bl	2029c <ble_ll_conn_slave_start>
        if (valid) {
   1df12:	4605      	mov	r5, r0
   1df14:	b368      	cbz	r0, 1df72 <ble_ll_adv_conn_req_rxd+0xee>
            if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   1df16:	8963      	ldrh	r3, [r4, #10]
   1df18:	f013 0f08 	tst.w	r3, #8
   1df1c:	d129      	bne.n	1df72 <ble_ll_adv_conn_req_rxd+0xee>
                ble_ll_adv_sm_stop(advsm);
   1df1e:	4620      	mov	r0, r4
   1df20:	f7ff fda6 	bl	1da70 <ble_ll_adv_sm_stop>
   1df24:	e025      	b.n	1df72 <ble_ll_adv_conn_req_rxd+0xee>
            memcpy(advsm->adv_rpa, inita, BLE_DEV_ADDR_LEN);
   1df26:	683b      	ldr	r3, [r7, #0]
   1df28:	f8c4 302e 	str.w	r3, [r4, #46]	; 0x2e
   1df2c:	88bb      	ldrh	r3, [r7, #4]
   1df2e:	8663      	strh	r3, [r4, #50]	; 0x32
            ble_ll_resolv_set_peer_rpa(advsm->adv_rpa_index, inita);
   1df30:	4639      	mov	r1, r7
   1df32:	f994 0008 	ldrsb.w	r0, [r4, #8]
   1df36:	f005 fb25 	bl	23584 <ble_ll_resolv_set_peer_rpa>
                   g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr,
   1df3a:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1df3e:	2236      	movs	r2, #54	; 0x36
   1df40:	fb02 f303 	mul.w	r3, r2, r3
   1df44:	3320      	adds	r3, #32
   1df46:	490d      	ldr	r1, [pc, #52]	; (1df7c <ble_ll_adv_conn_req_rxd+0xf8>)
   1df48:	440b      	add	r3, r1
            memcpy(inita,
   1df4a:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1df4e:	f8c5 0002 	str.w	r0, [r5, #2]
   1df52:	889b      	ldrh	r3, [r3, #4]
   1df54:	80bb      	strh	r3, [r7, #4]
            addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   1df56:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1df5a:	fb02 f203 	mul.w	r2, r2, r3
   1df5e:	f811 8002 	ldrb.w	r8, [r1, r2]
            addr_type += 2;
   1df62:	f108 0802 	add.w	r8, r8, #2
   1df66:	fa5f f888 	uxtb.w	r8, r8
   1df6a:	e7c7      	b.n	1defc <ble_ll_adv_conn_req_rxd+0x78>
            return 0;
   1df6c:	2500      	movs	r5, #0
   1df6e:	e000      	b.n	1df72 <ble_ll_adv_conn_req_rxd+0xee>
    valid = 0;
   1df70:	2500      	movs	r5, #0
}
   1df72:	4628      	mov	r0, r5
   1df74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1df78:	2500      	movs	r5, #0
   1df7a:	e7fa      	b.n	1df72 <ble_ll_adv_conn_req_rxd+0xee>
   1df7c:	20008a40 	.word	0x20008a40

0001df80 <ble_ll_adv_sm_stop_timeout>:
{
   1df80:	b510      	push	{r4, lr}
   1df82:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1df84:	8983      	ldrh	r3, [r0, #12]
   1df86:	f013 0f08 	tst.w	r3, #8
   1df8a:	d103      	bne.n	1df94 <ble_ll_adv_sm_stop_timeout+0x14>
    ble_ll_adv_sm_stop(advsm);
   1df8c:	4620      	mov	r0, r4
   1df8e:	f7ff fd6f 	bl	1da70 <ble_ll_adv_sm_stop>
}
   1df92:	bd10      	pop	{r4, pc}
        ble_ll_conn_comp_event_send(NULL, BLE_ERR_DIR_ADV_TMO,
   1df94:	4603      	mov	r3, r0
   1df96:	6d02      	ldr	r2, [r0, #80]	; 0x50
   1df98:	213c      	movs	r1, #60	; 0x3c
   1df9a:	2000      	movs	r0, #0
   1df9c:	f002 fb76 	bl	2068c <ble_ll_conn_comp_event_send>
        advsm->conn_comp_ev = NULL;
   1dfa0:	2300      	movs	r3, #0
   1dfa2:	6523      	str	r3, [r4, #80]	; 0x50
   1dfa4:	e7f2      	b.n	1df8c <ble_ll_adv_sm_stop_timeout+0xc>
	...

0001dfa8 <ble_ll_adv_reschedule_event>:

static void
ble_ll_adv_reschedule_event(struct ble_ll_adv_sm *advsm)
{
   1dfa8:	b510      	push	{r4, lr}
   1dfaa:	b082      	sub	sp, #8
    int rc;
    uint32_t start_time;
    uint32_t max_delay_ticks;

    assert(advsm->adv_enabled);
   1dfac:	7803      	ldrb	r3, [r0, #0]
   1dfae:	b1b3      	cbz	r3, 1dfde <ble_ll_adv_reschedule_event+0x36>
   1dfb0:	4604      	mov	r4, r0

    if (!advsm->adv_sch.enqueued) {
   1dfb2:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
   1dfb6:	b983      	cbnz	r3, 1dfda <ble_ll_adv_reschedule_event+0x32>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1dfb8:	8983      	ldrh	r3, [r0, #12]
   1dfba:	f013 0f08 	tst.w	r3, #8
   1dfbe:	d018      	beq.n	1dff2 <ble_ll_adv_reschedule_event+0x4a>
            max_delay_ticks = 0;
   1dfc0:	2200      	movs	r2, #0
        } else {
            max_delay_ticks =
                    os_cputime_usecs_to_ticks(BLE_LL_ADV_DELAY_MS_MAX * 1000);
        }

        rc = ble_ll_sched_adv_reschedule(&advsm->adv_sch, &start_time,
   1dfc2:	a901      	add	r1, sp, #4
   1dfc4:	f104 0064 	add.w	r0, r4, #100	; 0x64
   1dfc8:	f007 f902 	bl	251d0 <ble_ll_sched_adv_reschedule>
                                         max_delay_ticks);
        if (rc) {
   1dfcc:	b9b8      	cbnz	r0, 1dffe <ble_ll_adv_reschedule_event+0x56>
            ble_ll_adv_drop_event(advsm);
            return;
        }

        start_time += g_ble_ll_sched_offset_ticks;
   1dfce:	4b0e      	ldr	r3, [pc, #56]	; (1e008 <ble_ll_adv_reschedule_event+0x60>)
   1dfd0:	781b      	ldrb	r3, [r3, #0]
   1dfd2:	9a01      	ldr	r2, [sp, #4]
   1dfd4:	4413      	add	r3, r2
        advsm->adv_event_start_time = start_time;
   1dfd6:	61a3      	str	r3, [r4, #24]
        advsm->adv_pdu_start_time = start_time;
   1dfd8:	61e3      	str	r3, [r4, #28]
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
                                                        !advsm->aux_active) {
        ble_ll_adv_aux_schedule(advsm);
    }
#endif
}
   1dfda:	b002      	add	sp, #8
   1dfdc:	bd10      	pop	{r4, pc}
    assert(advsm->adv_enabled);
   1dfde:	f7ea f8ef 	bl	81c0 <hal_debugger_connected>
   1dfe2:	b100      	cbz	r0, 1dfe6 <ble_ll_adv_reschedule_event+0x3e>
   1dfe4:	be01      	bkpt	0x0001
   1dfe6:	2300      	movs	r3, #0
   1dfe8:	461a      	mov	r2, r3
   1dfea:	4619      	mov	r1, r3
   1dfec:	4618      	mov	r0, r3
   1dfee:	f7eb fcef 	bl	99d0 <__assert_func>
            max_delay_ticks =
   1dff2:	f242 7010 	movw	r0, #10000	; 0x2710
   1dff6:	f7fd fec7 	bl	1bd88 <os_cputime_usecs_to_ticks>
   1dffa:	4602      	mov	r2, r0
   1dffc:	e7e1      	b.n	1dfc2 <ble_ll_adv_reschedule_event+0x1a>
            ble_ll_adv_drop_event(advsm);
   1dffe:	4620      	mov	r0, r4
   1e000:	f7ff fcfa 	bl	1d9f8 <ble_ll_adv_drop_event>
   1e004:	e7e9      	b.n	1dfda <ble_ll_adv_reschedule_event+0x32>
   1e006:	bf00      	nop
   1e008:	20008cf0 	.word	0x20008cf0

0001e00c <ble_ll_adv_sm_init>:
    return 0;
}

static void
ble_ll_adv_sm_init(struct ble_ll_adv_sm *advsm)
{
   1e00c:	b510      	push	{r4, lr}
   1e00e:	4604      	mov	r4, r0
    memset(advsm, 0, sizeof(struct ble_ll_adv_sm));
   1e010:	2280      	movs	r2, #128	; 0x80
   1e012:	2100      	movs	r1, #0
   1e014:	f7ed fc65 	bl	b8e2 <memset>

    advsm->adv_itvl_min = BLE_HCI_ADV_ITVL_DEF;
   1e018:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1e01c:	81e3      	strh	r3, [r4, #14]
    advsm->adv_itvl_max = BLE_HCI_ADV_ITVL_DEF;
   1e01e:	8223      	strh	r3, [r4, #16]
    advsm->adv_chanmask = BLE_HCI_ADV_CHANMASK_DEF;
   1e020:	2307      	movs	r3, #7
   1e022:	70a3      	strb	r3, [r4, #2]
    memset(ev, 0, sizeof(*ev));
   1e024:	2300      	movs	r3, #0
   1e026:	6563      	str	r3, [r4, #84]	; 0x54
   1e028:	6623      	str	r3, [r4, #96]	; 0x60
    ev->ev.ev_queued = 0;
   1e02a:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    ev->ev.ev_cb = (os_event_fn *)fn;
   1e02e:	4b03      	ldr	r3, [pc, #12]	; (1e03c <ble_ll_adv_sm_init+0x30>)
   1e030:	65a3      	str	r3, [r4, #88]	; 0x58
    ev->ev.ev_arg = arg;
   1e032:	65e4      	str	r4, [r4, #92]	; 0x5c
#endif
#endif

    /* Configure instances to be legacy on start */
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE;
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY;
   1e034:	2312      	movs	r3, #18
   1e036:	81a3      	strh	r3, [r4, #12]
}
   1e038:	bd10      	pop	{r4, pc}
   1e03a:	bf00      	nop
   1e03c:	0001e179 	.word	0x0001e179

0001e040 <ble_ll_adv_chk_rpa_timeout>:
    if (advsm->own_addr_type < BLE_HCI_ADV_OWN_ADDR_PRIV_PUB) {
   1e040:	7903      	ldrb	r3, [r0, #4]
   1e042:	2b01      	cmp	r3, #1
   1e044:	d903      	bls.n	1e04e <ble_ll_adv_chk_rpa_timeout+0xe>
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO) {
   1e046:	8943      	ldrh	r3, [r0, #10]
   1e048:	f413 7f80 	tst.w	r3, #256	; 0x100
   1e04c:	d100      	bne.n	1e050 <ble_ll_adv_chk_rpa_timeout+0x10>
   1e04e:	4770      	bx	lr
{
   1e050:	b510      	push	{r4, lr}
   1e052:	4604      	mov	r4, r0
        ble_ll_adv_rpa_update(advsm);
   1e054:	f7ff fa77 	bl	1d546 <ble_ll_adv_rpa_update>
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO);
   1e058:	f44f 7180 	mov.w	r1, #256	; 0x100
   1e05c:	4620      	mov	r0, r4
   1e05e:	f7ff fa66 	bl	1d52e <ble_ll_adv_flags_clear>
}
   1e062:	bd10      	pop	{r4, pc}

0001e064 <ble_ll_adv_done>:
{
   1e064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(advsm->adv_enabled);
   1e068:	7803      	ldrb	r3, [r0, #0]
   1e06a:	2b00      	cmp	r3, #0
   1e06c:	d043      	beq.n	1e0f6 <ble_ll_adv_done+0x92>
   1e06e:	4604      	mov	r4, r0
    ble_ll_rfmgmt_release();
   1e070:	f005 fc3e 	bl	238f0 <ble_ll_rfmgmt_release>
    ble_ll_adv_update_adv_scan_rsp_data(advsm);
   1e074:	4620      	mov	r0, r4
   1e076:	f7ff fcd1 	bl	1da1c <ble_ll_adv_update_adv_scan_rsp_data>
    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1e07a:	f104 0564 	add.w	r5, r4, #100	; 0x64
   1e07e:	4628      	mov	r0, r5
   1e080:	f007 f99c 	bl	253bc <ble_ll_sched_rmv_elem>
    os_eventq_remove(&evq->evq, &ev->ev);
   1e084:	f104 0654 	add.w	r6, r4, #84	; 0x54
   1e088:	4631      	mov	r1, r6
   1e08a:	4835      	ldr	r0, [pc, #212]	; (1e160 <ble_ll_adv_done+0xfc>)
   1e08c:	f7ec f877 	bl	a17e <os_eventq_remove>
    final_adv_chan = ble_ll_adv_final_chan(advsm);
   1e090:	4620      	mov	r0, r4
   1e092:	f7ff fa34 	bl	1d4fe <ble_ll_adv_final_chan>
    if (advsm->adv_chan == final_adv_chan) {
   1e096:	79a3      	ldrb	r3, [r4, #6]
   1e098:	4283      	cmp	r3, r0
   1e09a:	d036      	beq.n	1e10a <ble_ll_adv_done+0xa6>
        ++advsm->adv_chan;
   1e09c:	3301      	adds	r3, #1
   1e09e:	b2db      	uxtb	r3, r3
   1e0a0:	71a3      	strb	r3, [r4, #6]
        mask = 1 << (advsm->adv_chan - BLE_PHY_ADV_CHAN_START);
   1e0a2:	f1a3 0125 	sub.w	r1, r3, #37	; 0x25
   1e0a6:	2201      	movs	r2, #1
   1e0a8:	408a      	lsls	r2, r1
        if ((mask & advsm->adv_chanmask) == 0) {
   1e0aa:	78a1      	ldrb	r1, [r4, #2]
   1e0ac:	420a      	tst	r2, r1
   1e0ae:	d101      	bne.n	1e0b4 <ble_ll_adv_done+0x50>
            ++advsm->adv_chan;
   1e0b0:	3301      	adds	r3, #1
   1e0b2:	71a3      	strb	r3, [r4, #6]
        advsm->adv_pdu_start_time = os_cputime_get32() +
   1e0b4:	f7fd fe51 	bl	1bd5a <os_cputime_get32>
   1e0b8:	4b2a      	ldr	r3, [pc, #168]	; (1e164 <ble_ll_adv_done+0x100>)
   1e0ba:	781b      	ldrb	r3, [r3, #0]
   1e0bc:	4418      	add	r0, r3
   1e0be:	61e0      	str	r0, [r4, #28]
        resched_pdu = 1;
   1e0c0:	2701      	movs	r7, #1
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   1e0c2:	89a3      	ldrh	r3, [r4, #12]
   1e0c4:	f013 0f08 	tst.w	r3, #8
   1e0c8:	d003      	beq.n	1e0d2 <ble_ll_adv_done+0x6e>
            (advsm->adv_pdu_start_time >= advsm->adv_end_time)) {
   1e0ca:	69e2      	ldr	r2, [r4, #28]
   1e0cc:	6a23      	ldr	r3, [r4, #32]
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   1e0ce:	429a      	cmp	r2, r3
   1e0d0:	d23c      	bcs.n	1e14c <ble_ll_adv_done+0xe8>
    ble_ll_adv_chk_rpa_timeout(advsm);
   1e0d2:	4620      	mov	r0, r4
   1e0d4:	f7ff ffb4 	bl	1e040 <ble_ll_adv_chk_rpa_timeout>
    ble_ll_adv_set_sched(advsm);
   1e0d8:	4620      	mov	r0, r4
   1e0da:	f7ff faeb 	bl	1d6b4 <ble_ll_adv_set_sched>
    if (!resched_pdu) {
   1e0de:	2f00      	cmp	r7, #0
   1e0e0:	d038      	beq.n	1e154 <ble_ll_adv_done+0xf0>
    rc = ble_ll_sched_adv_resched_pdu(&advsm->adv_sch);
   1e0e2:	4628      	mov	r0, r5
   1e0e4:	f007 f92e 	bl	25344 <ble_ll_sched_adv_resched_pdu>
    if (rc) {
   1e0e8:	2800      	cmp	r0, #0
   1e0ea:	d036      	beq.n	1e15a <ble_ll_adv_done+0xf6>
    os_eventq_put(&evq->evq, &ev->ev);
   1e0ec:	4631      	mov	r1, r6
   1e0ee:	481c      	ldr	r0, [pc, #112]	; (1e160 <ble_ll_adv_done+0xfc>)
   1e0f0:	f7eb ffbb 	bl	a06a <os_eventq_put>
   1e0f4:	e031      	b.n	1e15a <ble_ll_adv_done+0xf6>
    assert(advsm->adv_enabled);
   1e0f6:	f7ea f863 	bl	81c0 <hal_debugger_connected>
   1e0fa:	b100      	cbz	r0, 1e0fe <ble_ll_adv_done+0x9a>
   1e0fc:	be01      	bkpt	0x0001
   1e0fe:	2300      	movs	r3, #0
   1e100:	461a      	mov	r2, r3
   1e102:	4619      	mov	r1, r3
   1e104:	4618      	mov	r0, r3
   1e106:	f7eb fc63 	bl	99d0 <__assert_func>
        ble_ll_scan_chk_resume();
   1e10a:	f006 fb5b 	bl	247c4 <ble_ll_scan_chk_resume>
        advsm->adv_chan = ble_ll_adv_first_chan(advsm);
   1e10e:	4620      	mov	r0, r4
   1e110:	f7ff f9e8 	bl	1d4e4 <ble_ll_adv_first_chan>
   1e114:	71a0      	strb	r0, [r4, #6]
        tick_itvl = os_cputime_usecs_to_ticks(itvl);
   1e116:	6960      	ldr	r0, [r4, #20]
   1e118:	f7fd fe36 	bl	1bd88 <os_cputime_usecs_to_ticks>
   1e11c:	4680      	mov	r8, r0
        advsm->adv_event_start_time += tick_itvl;
   1e11e:	69a0      	ldr	r0, [r4, #24]
   1e120:	4440      	add	r0, r8
   1e122:	61a0      	str	r0, [r4, #24]
        advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1e124:	61e0      	str	r0, [r4, #28]
        start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   1e126:	4b0f      	ldr	r3, [pc, #60]	; (1e164 <ble_ll_adv_done+0x100>)
   1e128:	781f      	ldrb	r7, [r3, #0]
   1e12a:	1bc7      	subs	r7, r0, r7
        delta_t = (int32_t)(start_time - os_cputime_get32());
   1e12c:	f7fd fe15 	bl	1bd5a <os_cputime_get32>
        if (delta_t < 0) {
   1e130:	1a38      	subs	r0, r7, r0
   1e132:	d401      	bmi.n	1e138 <ble_ll_adv_done+0xd4>
        resched_pdu = 0;
   1e134:	2700      	movs	r7, #0
   1e136:	e7c4      	b.n	1e0c2 <ble_ll_adv_done+0x5e>
            while (delta_t < 0) {
   1e138:	2800      	cmp	r0, #0
   1e13a:	da05      	bge.n	1e148 <ble_ll_adv_done+0xe4>
                advsm->adv_event_start_time += tick_itvl;
   1e13c:	69a3      	ldr	r3, [r4, #24]
   1e13e:	4443      	add	r3, r8
   1e140:	61a3      	str	r3, [r4, #24]
                advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1e142:	61e3      	str	r3, [r4, #28]
                delta_t += (int32_t)tick_itvl;
   1e144:	4440      	add	r0, r8
   1e146:	e7f7      	b.n	1e138 <ble_ll_adv_done+0xd4>
        resched_pdu = 0;
   1e148:	2700      	movs	r7, #0
   1e14a:	e7ba      	b.n	1e0c2 <ble_ll_adv_done+0x5e>
        ble_ll_adv_sm_stop_timeout(advsm);
   1e14c:	4620      	mov	r0, r4
   1e14e:	f7ff ff17 	bl	1df80 <ble_ll_adv_sm_stop_timeout>
        return;
   1e152:	e002      	b.n	1e15a <ble_ll_adv_done+0xf6>
        ble_ll_adv_reschedule_event(advsm);
   1e154:	4620      	mov	r0, r4
   1e156:	f7ff ff27 	bl	1dfa8 <ble_ll_adv_reschedule_event>
}
   1e15a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e15e:	bf00      	nop
   1e160:	200084e8 	.word	0x200084e8
   1e164:	20008cf0 	.word	0x20008cf0

0001e168 <ble_ll_adv_make_done>:
{
   1e168:	b510      	push	{r4, lr}
   1e16a:	4604      	mov	r4, r0
    ble_ll_adv_active_chanset_clear(advsm);
   1e16c:	f7ff fa29 	bl	1d5c2 <ble_ll_adv_active_chanset_clear>
    ble_ll_adv_done(advsm);
   1e170:	4620      	mov	r0, r4
   1e172:	f7ff ff77 	bl	1e064 <ble_ll_adv_done>
}
   1e176:	bd10      	pop	{r4, pc}

0001e178 <ble_ll_adv_event_done>:
{
   1e178:	b508      	push	{r3, lr}
    ble_ll_adv_done(ble_npl_event_get_arg(ev));
   1e17a:	6880      	ldr	r0, [r0, #8]
   1e17c:	f7ff ff72 	bl	1e064 <ble_ll_adv_done>
}
   1e180:	bd08      	pop	{r3, pc}
	...

0001e184 <ble_ll_adv_rpa_timeout>:
{
   1e184:	b510      	push	{r4, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1e186:	2400      	movs	r4, #0
   1e188:	2c00      	cmp	r4, #0
   1e18a:	dd00      	ble.n	1e18e <ble_ll_adv_rpa_timeout+0xa>
}
   1e18c:	bd10      	pop	{r4, pc}
        advsm = &g_ble_ll_adv_sm[i];
   1e18e:	4a07      	ldr	r2, [pc, #28]	; (1e1ac <ble_ll_adv_rpa_timeout+0x28>)
   1e190:	01e3      	lsls	r3, r4, #7
   1e192:	18d0      	adds	r0, r2, r3
        if (advsm->adv_enabled &&
   1e194:	5cd3      	ldrb	r3, [r2, r3]
   1e196:	b113      	cbz	r3, 1e19e <ble_ll_adv_rpa_timeout+0x1a>
                advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1e198:	7903      	ldrb	r3, [r0, #4]
        if (advsm->adv_enabled &&
   1e19a:	2b01      	cmp	r3, #1
   1e19c:	d801      	bhi.n	1e1a2 <ble_ll_adv_rpa_timeout+0x1e>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1e19e:	3401      	adds	r4, #1
   1e1a0:	e7f2      	b.n	1e188 <ble_ll_adv_rpa_timeout+0x4>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO);
   1e1a2:	f44f 7180 	mov.w	r1, #256	; 0x100
   1e1a6:	f7ff f9b7 	bl	1d518 <ble_ll_adv_flags_set>
   1e1aa:	e7f8      	b.n	1e19e <ble_ll_adv_rpa_timeout+0x1a>
   1e1ac:	20008760 	.word	0x20008760

0001e1b0 <ble_ll_adv_event_rmvd_from_sched>:
{
   1e1b0:	b510      	push	{r4, lr}
   1e1b2:	4604      	mov	r4, r0
    advsm->adv_chan = ble_ll_adv_final_chan(advsm);
   1e1b4:	f7ff f9a3 	bl	1d4fe <ble_ll_adv_final_chan>
   1e1b8:	71a0      	strb	r0, [r4, #6]
   1e1ba:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1e1be:	4802      	ldr	r0, [pc, #8]	; (1e1c8 <ble_ll_adv_event_rmvd_from_sched+0x18>)
   1e1c0:	f7eb ff53 	bl	a06a <os_eventq_put>
}
   1e1c4:	bd10      	pop	{r4, pc}
   1e1c6:	bf00      	nop
   1e1c8:	200084e8 	.word	0x200084e8

0001e1cc <ble_ll_adv_halt>:
{
   1e1cc:	b510      	push	{r4, lr}
    if (g_ble_ll_cur_adv_sm != NULL) {
   1e1ce:	4b0a      	ldr	r3, [pc, #40]	; (1e1f8 <ble_ll_adv_halt+0x2c>)
   1e1d0:	681c      	ldr	r4, [r3, #0]
   1e1d2:	b184      	cbz	r4, 1e1f6 <ble_ll_adv_halt+0x2a>
        ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   1e1d4:	2000      	movs	r0, #0
   1e1d6:	f007 ffdb 	bl	26190 <ble_phy_txpwr_set>
   1e1da:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1e1de:	4807      	ldr	r0, [pc, #28]	; (1e1fc <ble_ll_adv_halt+0x30>)
   1e1e0:	f7eb ff43 	bl	a06a <os_eventq_put>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1e1e4:	2000      	movs	r0, #0
   1e1e6:	f7ff f845 	bl	1d274 <ble_ll_state_set>
        ble_ll_adv_active_chanset_clear(g_ble_ll_cur_adv_sm);
   1e1ea:	4c03      	ldr	r4, [pc, #12]	; (1e1f8 <ble_ll_adv_halt+0x2c>)
   1e1ec:	6820      	ldr	r0, [r4, #0]
   1e1ee:	f7ff f9e8 	bl	1d5c2 <ble_ll_adv_active_chanset_clear>
        g_ble_ll_cur_adv_sm = NULL;
   1e1f2:	2300      	movs	r3, #0
   1e1f4:	6023      	str	r3, [r4, #0]
}
   1e1f6:	bd10      	pop	{r4, pc}
   1e1f8:	200087e0 	.word	0x200087e0
   1e1fc:	200084e8 	.word	0x200084e8

0001e200 <ble_ll_adv_set_adv_params>:
    if (len != sizeof(*cmd)) {
   1e200:	290f      	cmp	r1, #15
   1e202:	d161      	bne.n	1e2c8 <ble_ll_adv_set_adv_params+0xc8>
   1e204:	4603      	mov	r3, r0
    if (advsm->adv_enabled) {
   1e206:	4a3e      	ldr	r2, [pc, #248]	; (1e300 <ble_ll_adv_set_adv_params+0x100>)
   1e208:	7812      	ldrb	r2, [r2, #0]
   1e20a:	2a00      	cmp	r2, #0
   1e20c:	d15e      	bne.n	1e2cc <ble_ll_adv_set_adv_params+0xcc>
{
   1e20e:	b4f0      	push	{r4, r5, r6, r7}
    adv_itvl_min = le16toh(cmd->min_interval);
   1e210:	8804      	ldrh	r4, [r0, #0]
    adv_itvl_max = le16toh(cmd->max_interval);
   1e212:	8845      	ldrh	r5, [r0, #2]
    adv_filter_policy = cmd->filter_policy;
   1e214:	7b86      	ldrb	r6, [r0, #14]
    switch (cmd->type) {
   1e216:	7901      	ldrb	r1, [r0, #4]
   1e218:	2904      	cmp	r1, #4
   1e21a:	d859      	bhi.n	1e2d0 <ble_ll_adv_set_adv_params+0xd0>
   1e21c:	e8df f001 	tbb	[pc, r1]
   1e220:	1d1b0503 	.word	0x1d1b0503
   1e224:	11          	.byte	0x11
   1e225:	00          	.byte	0x00
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_IND;
   1e226:	2213      	movs	r2, #19
   1e228:	e018      	b.n	1e25c <ble_ll_adv_set_adv_params+0x5c>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   1e22a:	4619      	mov	r1, r3
   1e22c:	4c34      	ldr	r4, [pc, #208]	; (1e300 <ble_ll_adv_set_adv_params+0x100>)
   1e22e:	f851 0f07 	ldr.w	r0, [r1, #7]!
   1e232:	6360      	str	r0, [r4, #52]	; 0x34
   1e234:	8889      	ldrh	r1, [r1, #4]
   1e236:	8721      	strh	r1, [r4, #56]	; 0x38
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   1e238:	4616      	mov	r6, r2
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_HD_DIR ;
   1e23a:	221d      	movs	r2, #29
        adv_itvl_max = 0;
   1e23c:	2500      	movs	r5, #0
        adv_itvl_min = 0;
   1e23e:	462c      	mov	r4, r5
        break;
   1e240:	e00c      	b.n	1e25c <ble_ll_adv_set_adv_params+0x5c>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   1e242:	4619      	mov	r1, r3
   1e244:	4e2e      	ldr	r6, [pc, #184]	; (1e300 <ble_ll_adv_set_adv_params+0x100>)
   1e246:	f851 0f07 	ldr.w	r0, [r1, #7]!
   1e24a:	6370      	str	r0, [r6, #52]	; 0x34
   1e24c:	8889      	ldrh	r1, [r1, #4]
   1e24e:	8731      	strh	r1, [r6, #56]	; 0x38
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   1e250:	4616      	mov	r6, r2
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_LD_DIR ;
   1e252:	2215      	movs	r2, #21
        break;
   1e254:	e002      	b.n	1e25c <ble_ll_adv_set_adv_params+0x5c>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_SCAN;
   1e256:	2212      	movs	r2, #18
        break;
   1e258:	e000      	b.n	1e25c <ble_ll_adv_set_adv_params+0x5c>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_NONCONN;
   1e25a:	2210      	movs	r2, #16
    if (!(props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED)) {
   1e25c:	f012 0f08 	tst.w	r2, #8
   1e260:	d10b      	bne.n	1e27a <ble_ll_adv_set_adv_params+0x7a>
        if ((adv_itvl_min > adv_itvl_max) ||
   1e262:	42ac      	cmp	r4, r5
   1e264:	d836      	bhi.n	1e2d4 <ble_ll_adv_set_adv_params+0xd4>
   1e266:	2c1f      	cmp	r4, #31
   1e268:	d936      	bls.n	1e2d8 <ble_ll_adv_set_adv_params+0xd8>
                (adv_itvl_min < BLE_HCI_ADV_ITVL_MIN) ||
   1e26a:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
   1e26e:	d835      	bhi.n	1e2dc <ble_ll_adv_set_adv_params+0xdc>
                (adv_itvl_min > BLE_HCI_ADV_ITVL_MAX) ||
   1e270:	2d1f      	cmp	r5, #31
   1e272:	d935      	bls.n	1e2e0 <ble_ll_adv_set_adv_params+0xe0>
                (adv_itvl_max < BLE_HCI_ADV_ITVL_MIN) ||
   1e274:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
   1e278:	d834      	bhi.n	1e2e4 <ble_ll_adv_set_adv_params+0xe4>
    if ((cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   1e27a:	7959      	ldrb	r1, [r3, #5]
   1e27c:	2903      	cmp	r1, #3
   1e27e:	d833      	bhi.n	1e2e8 <ble_ll_adv_set_adv_params+0xe8>
        (cmd->peer_addr_type > BLE_HCI_ADV_PEER_ADDR_MAX)) {
   1e280:	7999      	ldrb	r1, [r3, #6]
    if ((cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   1e282:	2901      	cmp	r1, #1
   1e284:	d833      	bhi.n	1e2ee <ble_ll_adv_set_adv_params+0xee>
    advsm->adv_txpwr = MYNEWT_VAL(BLE_LL_TX_PWR_DBM);
   1e286:	491e      	ldr	r1, [pc, #120]	; (1e300 <ble_ll_adv_set_adv_params+0x100>)
   1e288:	2000      	movs	r0, #0
   1e28a:	7248      	strb	r0, [r1, #9]
    if (cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1e28c:	7959      	ldrb	r1, [r3, #5]
   1e28e:	2901      	cmp	r1, #1
   1e290:	d812      	bhi.n	1e2b8 <ble_ll_adv_set_adv_params+0xb8>
    if (((cmd->chan_map & 0xF8) != 0) || (cmd->chan_map == 0)) {
   1e292:	7b59      	ldrb	r1, [r3, #13]
   1e294:	f011 0ff8 	tst.w	r1, #248	; 0xf8
   1e298:	d12b      	bne.n	1e2f2 <ble_ll_adv_set_adv_params+0xf2>
   1e29a:	b361      	cbz	r1, 1e2f6 <ble_ll_adv_set_adv_params+0xf6>
    if (adv_filter_policy > BLE_HCI_ADV_FILT_MAX) {
   1e29c:	2e03      	cmp	r6, #3
   1e29e:	d82c      	bhi.n	1e2fa <ble_ll_adv_set_adv_params+0xfa>
    advsm->own_addr_type = cmd->own_addr_type;
   1e2a0:	795f      	ldrb	r7, [r3, #5]
   1e2a2:	4817      	ldr	r0, [pc, #92]	; (1e300 <ble_ll_adv_set_adv_params+0x100>)
   1e2a4:	7107      	strb	r7, [r0, #4]
    advsm->peer_addr_type = cmd->peer_addr_type;
   1e2a6:	799b      	ldrb	r3, [r3, #6]
   1e2a8:	7143      	strb	r3, [r0, #5]
    advsm->adv_filter_policy = adv_filter_policy;
   1e2aa:	70c6      	strb	r6, [r0, #3]
    advsm->adv_chanmask = cmd->chan_map;
   1e2ac:	7081      	strb	r1, [r0, #2]
    advsm->adv_itvl_min = adv_itvl_min;
   1e2ae:	81c4      	strh	r4, [r0, #14]
    advsm->adv_itvl_max = adv_itvl_max;
   1e2b0:	8205      	strh	r5, [r0, #16]
    advsm->props = props;
   1e2b2:	8182      	strh	r2, [r0, #12]
    return 0;
   1e2b4:	2000      	movs	r0, #0
   1e2b6:	e018      	b.n	1e2ea <ble_ll_adv_set_adv_params+0xea>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   1e2b8:	4619      	mov	r1, r3
   1e2ba:	4f11      	ldr	r7, [pc, #68]	; (1e300 <ble_ll_adv_set_adv_params+0x100>)
   1e2bc:	f851 0f07 	ldr.w	r0, [r1, #7]!
   1e2c0:	6378      	str	r0, [r7, #52]	; 0x34
   1e2c2:	8889      	ldrh	r1, [r1, #4]
   1e2c4:	8739      	strh	r1, [r7, #56]	; 0x38
   1e2c6:	e7e4      	b.n	1e292 <ble_ll_adv_set_adv_params+0x92>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e2c8:	2012      	movs	r0, #18
   1e2ca:	4770      	bx	lr
        return BLE_ERR_CMD_DISALLOWED;
   1e2cc:	200c      	movs	r0, #12
}
   1e2ce:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e2d0:	2012      	movs	r0, #18
   1e2d2:	e00a      	b.n	1e2ea <ble_ll_adv_set_adv_params+0xea>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   1e2d4:	2012      	movs	r0, #18
   1e2d6:	e008      	b.n	1e2ea <ble_ll_adv_set_adv_params+0xea>
   1e2d8:	2012      	movs	r0, #18
   1e2da:	e006      	b.n	1e2ea <ble_ll_adv_set_adv_params+0xea>
   1e2dc:	2012      	movs	r0, #18
   1e2de:	e004      	b.n	1e2ea <ble_ll_adv_set_adv_params+0xea>
   1e2e0:	2012      	movs	r0, #18
   1e2e2:	e002      	b.n	1e2ea <ble_ll_adv_set_adv_params+0xea>
   1e2e4:	2012      	movs	r0, #18
   1e2e6:	e000      	b.n	1e2ea <ble_ll_adv_set_adv_params+0xea>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e2e8:	2012      	movs	r0, #18
}
   1e2ea:	bcf0      	pop	{r4, r5, r6, r7}
   1e2ec:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e2ee:	2012      	movs	r0, #18
   1e2f0:	e7fb      	b.n	1e2ea <ble_ll_adv_set_adv_params+0xea>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e2f2:	2012      	movs	r0, #18
   1e2f4:	e7f9      	b.n	1e2ea <ble_ll_adv_set_adv_params+0xea>
   1e2f6:	2012      	movs	r0, #18
   1e2f8:	e7f7      	b.n	1e2ea <ble_ll_adv_set_adv_params+0xea>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e2fa:	2012      	movs	r0, #18
   1e2fc:	e7f5      	b.n	1e2ea <ble_ll_adv_set_adv_params+0xea>
   1e2fe:	bf00      	nop
   1e300:	20008760 	.word	0x20008760

0001e304 <ble_ll_adv_read_txpwr>:
    rsp->power_level = MYNEWT_VAL(BLE_LL_TX_PWR_DBM);
   1e304:	2300      	movs	r3, #0
   1e306:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   1e308:	2201      	movs	r2, #1
   1e30a:	700a      	strb	r2, [r1, #0]
}
   1e30c:	4618      	mov	r0, r3
   1e30e:	4770      	bx	lr

0001e310 <ble_ll_hci_adv_set_enable>:
    if (len != sizeof(*cmd)) {
   1e310:	2901      	cmp	r1, #1
   1e312:	d001      	beq.n	1e318 <ble_ll_hci_adv_set_enable+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e314:	2012      	movs	r0, #18
}
   1e316:	4770      	bx	lr
{
   1e318:	b508      	push	{r3, lr}
    return ble_ll_adv_set_enable(0, cmd->enable, -1, 0);
   1e31a:	2300      	movs	r3, #0
   1e31c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e320:	7801      	ldrb	r1, [r0, #0]
   1e322:	4618      	mov	r0, r3
   1e324:	f7ff fbdc 	bl	1dae0 <ble_ll_adv_set_enable>
}
   1e328:	bd08      	pop	{r3, pc}

0001e32a <ble_ll_hci_set_scan_rsp_data>:
    if ((len != sizeof(*cmd)) || (cmd->scan_rsp_len > sizeof(cmd->scan_rsp))) {
   1e32a:	2920      	cmp	r1, #32
   1e32c:	d109      	bne.n	1e342 <ble_ll_hci_set_scan_rsp_data+0x18>
   1e32e:	7801      	ldrb	r1, [r0, #0]
   1e330:	291f      	cmp	r1, #31
   1e332:	d808      	bhi.n	1e346 <ble_ll_hci_set_scan_rsp_data+0x1c>
{
   1e334:	b508      	push	{r3, lr}
    return ble_ll_adv_set_scan_rsp_data(cmd->scan_rsp, cmd->scan_rsp_len, 0,
   1e336:	2303      	movs	r3, #3
   1e338:	2200      	movs	r2, #0
   1e33a:	3001      	adds	r0, #1
   1e33c:	f7ff fc1b 	bl	1db76 <ble_ll_adv_set_scan_rsp_data>
}
   1e340:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e342:	2012      	movs	r0, #18
   1e344:	4770      	bx	lr
   1e346:	2012      	movs	r0, #18
}
   1e348:	4770      	bx	lr

0001e34a <ble_ll_hci_set_adv_data>:
    if ((len != sizeof(*cmd)) || (cmd->adv_data_len > sizeof(cmd->adv_data))) {
   1e34a:	2920      	cmp	r1, #32
   1e34c:	d109      	bne.n	1e362 <ble_ll_hci_set_adv_data+0x18>
   1e34e:	7801      	ldrb	r1, [r0, #0]
   1e350:	291f      	cmp	r1, #31
   1e352:	d808      	bhi.n	1e366 <ble_ll_hci_set_adv_data+0x1c>
{
   1e354:	b508      	push	{r3, lr}
    return ble_ll_adv_set_adv_data(cmd->adv_data, cmd->adv_data_len, 0,
   1e356:	2303      	movs	r3, #3
   1e358:	2200      	movs	r2, #0
   1e35a:	3001      	adds	r0, #1
   1e35c:	f7ff fc63 	bl	1dc26 <ble_ll_adv_set_adv_data>
}
   1e360:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e362:	2012      	movs	r0, #18
   1e364:	4770      	bx	lr
   1e366:	2012      	movs	r0, #18
}
   1e368:	4770      	bx	lr
	...

0001e36c <ble_ll_adv_rx_isr_end>:
{
   1e36c:	b510      	push	{r4, lr}
    if (rxpdu == NULL) {
   1e36e:	b141      	cbz	r1, 1e382 <ble_ll_adv_rx_isr_end+0x16>
   1e370:	460b      	mov	r3, r1
        if (crcok) {
   1e372:	b19a      	cbz	r2, 1e39c <ble_ll_adv_rx_isr_end+0x30>
            if ((pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) ||
   1e374:	2803      	cmp	r0, #3
   1e376:	d00b      	beq.n	1e390 <ble_ll_adv_rx_isr_end+0x24>
   1e378:	2805      	cmp	r0, #5
   1e37a:	d009      	beq.n	1e390 <ble_ll_adv_rx_isr_end+0x24>
    rc = -1;
   1e37c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1e380:	e00e      	b.n	1e3a0 <ble_ll_adv_rx_isr_end+0x34>
        ble_ll_adv_tx_done(g_ble_ll_cur_adv_sm);
   1e382:	4b0c      	ldr	r3, [pc, #48]	; (1e3b4 <ble_ll_adv_rx_isr_end+0x48>)
   1e384:	6818      	ldr	r0, [r3, #0]
   1e386:	f7ff f927 	bl	1d5d8 <ble_ll_adv_tx_done>
    rc = -1;
   1e38a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1e38e:	e00b      	b.n	1e3a8 <ble_ll_adv_rx_isr_end+0x3c>
                rc = ble_ll_adv_rx_req(pdu_type, rxpdu);
   1e390:	4619      	mov	r1, r3
   1e392:	f7ff fcd3 	bl	1dd3c <ble_ll_adv_rx_req>
        if (rc) {
   1e396:	4604      	mov	r4, r0
   1e398:	b128      	cbz	r0, 1e3a6 <ble_ll_adv_rx_isr_end+0x3a>
   1e39a:	e001      	b.n	1e3a0 <ble_ll_adv_rx_isr_end+0x34>
    rc = -1;
   1e39c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            g_ble_ll_cur_adv_sm = NULL;
   1e3a0:	4b04      	ldr	r3, [pc, #16]	; (1e3b4 <ble_ll_adv_rx_isr_end+0x48>)
   1e3a2:	2200      	movs	r2, #0
   1e3a4:	601a      	str	r2, [r3, #0]
    if (rc) {
   1e3a6:	b114      	cbz	r4, 1e3ae <ble_ll_adv_rx_isr_end+0x42>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1e3a8:	2000      	movs	r0, #0
   1e3aa:	f7fe ff63 	bl	1d274 <ble_ll_state_set>
}
   1e3ae:	4620      	mov	r0, r4
   1e3b0:	bd10      	pop	{r4, pc}
   1e3b2:	bf00      	nop
   1e3b4:	200087e0 	.word	0x200087e0

0001e3b8 <ble_ll_adv_rx_pkt_in>:
    if (!advsm->adv_enabled) {
   1e3b8:	4b0f      	ldr	r3, [pc, #60]	; (1e3f8 <ble_ll_adv_rx_pkt_in+0x40>)
   1e3ba:	781b      	ldrb	r3, [r3, #0]
   1e3bc:	b1db      	cbz	r3, 1e3f6 <ble_ll_adv_rx_pkt_in+0x3e>
{
   1e3be:	b510      	push	{r4, lr}
   1e3c0:	4614      	mov	r4, r2
   1e3c2:	460b      	mov	r3, r1
    if (BLE_MBUF_HDR_CRC_OK(hdr)) {
   1e3c4:	8812      	ldrh	r2, [r2, #0]
   1e3c6:	f012 0f80 	tst.w	r2, #128	; 0x80
   1e3ca:	d003      	beq.n	1e3d4 <ble_ll_adv_rx_pkt_in+0x1c>
        if (ptype == BLE_ADV_PDU_TYPE_CONNECT_IND) {
   1e3cc:	2805      	cmp	r0, #5
   1e3ce:	d006      	beq.n	1e3de <ble_ll_adv_rx_pkt_in+0x26>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   1e3d0:	2803      	cmp	r0, #3
   1e3d2:	d00c      	beq.n	1e3ee <ble_ll_adv_rx_pkt_in+0x36>
        ble_ll_adv_make_done(advsm, hdr);
   1e3d4:	4621      	mov	r1, r4
   1e3d6:	4808      	ldr	r0, [pc, #32]	; (1e3f8 <ble_ll_adv_rx_pkt_in+0x40>)
   1e3d8:	f7ff fec6 	bl	1e168 <ble_ll_adv_make_done>
}
   1e3dc:	bd10      	pop	{r4, pc}
            if (ble_ll_adv_conn_req_rxd(rxbuf, hdr, advsm)) {
   1e3de:	4a06      	ldr	r2, [pc, #24]	; (1e3f8 <ble_ll_adv_rx_pkt_in+0x40>)
   1e3e0:	4621      	mov	r1, r4
   1e3e2:	4618      	mov	r0, r3
   1e3e4:	f7ff fd4e 	bl	1de84 <ble_ll_adv_conn_req_rxd>
   1e3e8:	2800      	cmp	r0, #0
   1e3ea:	d0f3      	beq.n	1e3d4 <ble_ll_adv_rx_pkt_in+0x1c>
   1e3ec:	e7f6      	b.n	1e3dc <ble_ll_adv_rx_pkt_in+0x24>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   1e3ee:	f012 0f10 	tst.w	r2, #16
   1e3f2:	d0ef      	beq.n	1e3d4 <ble_ll_adv_rx_pkt_in+0x1c>
   1e3f4:	e7f2      	b.n	1e3dc <ble_ll_adv_rx_pkt_in+0x24>
   1e3f6:	4770      	bx	lr
   1e3f8:	20008760 	.word	0x20008760

0001e3fc <ble_ll_adv_rx_isr_start>:
{
   1e3fc:	b508      	push	{r3, lr}
    advsm = g_ble_ll_cur_adv_sm;
   1e3fe:	4b0e      	ldr	r3, [pc, #56]	; (1e438 <ble_ll_adv_rx_isr_start+0x3c>)
   1e400:	681a      	ldr	r2, [r3, #0]
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   1e402:	2803      	cmp	r0, #3
   1e404:	d00b      	beq.n	1e41e <ble_ll_adv_rx_isr_start+0x22>
        if (pdu_type == BLE_ADV_PDU_TYPE_CONNECT_IND) {
   1e406:	2805      	cmp	r0, #5
   1e408:	d10f      	bne.n	1e42a <ble_ll_adv_rx_isr_start+0x2e>
            if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1e40a:	8993      	ldrh	r3, [r2, #12]
   1e40c:	f013 0f01 	tst.w	r3, #1
   1e410:	d00b      	beq.n	1e42a <ble_ll_adv_rx_isr_start+0x2e>
                rc = !(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY);
   1e412:	0918      	lsrs	r0, r3, #4
   1e414:	f080 0001 	eor.w	r0, r0, #1
   1e418:	f000 0001 	and.w	r0, r0, #1
}
   1e41c:	bd08      	pop	{r3, pc}
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   1e41e:	8993      	ldrh	r3, [r2, #12]
   1e420:	f013 0f02 	tst.w	r3, #2
   1e424:	d001      	beq.n	1e42a <ble_ll_adv_rx_isr_start+0x2e>
            rc = 1;
   1e426:	2001      	movs	r0, #1
    return rc;
   1e428:	e7f8      	b.n	1e41c <ble_ll_adv_rx_isr_start+0x20>
        ble_ll_adv_tx_done(advsm);
   1e42a:	4610      	mov	r0, r2
   1e42c:	f7ff f8d4 	bl	1d5d8 <ble_ll_adv_tx_done>
   1e430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e434:	e7f2      	b.n	1e41c <ble_ll_adv_rx_isr_start+0x20>
   1e436:	bf00      	nop
   1e438:	200087e0 	.word	0x200087e0

0001e43c <ble_ll_adv_can_chg_whitelist>:
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1e43c:	2300      	movs	r3, #0
   1e43e:	2b00      	cmp	r3, #0
   1e440:	dd01      	ble.n	1e446 <ble_ll_adv_can_chg_whitelist+0xa>
    rc = 1;
   1e442:	2001      	movs	r0, #1
   1e444:	4770      	bx	lr
        if (advsm->adv_enabled &&
   1e446:	01da      	lsls	r2, r3, #7
   1e448:	4905      	ldr	r1, [pc, #20]	; (1e460 <ble_ll_adv_can_chg_whitelist+0x24>)
   1e44a:	5c8a      	ldrb	r2, [r1, r2]
   1e44c:	b11a      	cbz	r2, 1e456 <ble_ll_adv_can_chg_whitelist+0x1a>
            (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE)) {
   1e44e:	eb01 12c3 	add.w	r2, r1, r3, lsl #7
   1e452:	78d2      	ldrb	r2, [r2, #3]
        if (advsm->adv_enabled &&
   1e454:	b90a      	cbnz	r2, 1e45a <ble_ll_adv_can_chg_whitelist+0x1e>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1e456:	3301      	adds	r3, #1
   1e458:	e7f1      	b.n	1e43e <ble_ll_adv_can_chg_whitelist+0x2>
            rc = 0;
   1e45a:	2000      	movs	r0, #0
}
   1e45c:	4770      	bx	lr
   1e45e:	bf00      	nop
   1e460:	20008760 	.word	0x20008760

0001e464 <ble_ll_adv_send_conn_comp_ev>:
{
   1e464:	b508      	push	{r3, lr}
    evbuf = advsm->conn_comp_ev;
   1e466:	4b09      	ldr	r3, [pc, #36]	; (1e48c <ble_ll_adv_send_conn_comp_ev+0x28>)
   1e468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    assert(evbuf != NULL);
   1e46a:	b12a      	cbz	r2, 1e478 <ble_ll_adv_send_conn_comp_ev+0x14>
    advsm->conn_comp_ev = NULL;
   1e46c:	4b07      	ldr	r3, [pc, #28]	; (1e48c <ble_ll_adv_send_conn_comp_ev+0x28>)
   1e46e:	2100      	movs	r1, #0
   1e470:	6519      	str	r1, [r3, #80]	; 0x50
    ble_ll_conn_comp_event_send(connsm, BLE_ERR_SUCCESS, evbuf, advsm);
   1e472:	f002 f90b 	bl	2068c <ble_ll_conn_comp_event_send>
}
   1e476:	bd08      	pop	{r3, pc}
    assert(evbuf != NULL);
   1e478:	f7e9 fea2 	bl	81c0 <hal_debugger_connected>
   1e47c:	b100      	cbz	r0, 1e480 <ble_ll_adv_send_conn_comp_ev+0x1c>
   1e47e:	be01      	bkpt	0x0001
   1e480:	2300      	movs	r3, #0
   1e482:	461a      	mov	r2, r3
   1e484:	4619      	mov	r1, r3
   1e486:	4618      	mov	r0, r3
   1e488:	f7eb faa2 	bl	99d0 <__assert_func>
   1e48c:	20008760 	.word	0x20008760

0001e490 <ble_ll_adv_get_local_rpa>:
{
   1e490:	b510      	push	{r4, lr}
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1e492:	7903      	ldrb	r3, [r0, #4]
   1e494:	2b01      	cmp	r3, #1
   1e496:	d90e      	bls.n	1e4b6 <ble_ll_adv_get_local_rpa+0x26>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   1e498:	8943      	ldrh	r3, [r0, #10]
   1e49a:	f013 0f01 	tst.w	r3, #1
   1e49e:	d00c      	beq.n	1e4ba <ble_ll_adv_get_local_rpa+0x2a>
                                    ble_ll_is_rpa(advsm->adva, 1)) {
   1e4a0:	f100 0428 	add.w	r4, r0, #40	; 0x28
   1e4a4:	2101      	movs	r1, #1
   1e4a6:	4620      	mov	r0, r4
   1e4a8:	f7fe fd1a 	bl	1cee0 <ble_ll_is_rpa>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   1e4ac:	b108      	cbz	r0, 1e4b2 <ble_ll_adv_get_local_rpa+0x22>
}
   1e4ae:	4620      	mov	r0, r4
   1e4b0:	bd10      	pop	{r4, pc}
    uint8_t *rpa = NULL;
   1e4b2:	2400      	movs	r4, #0
   1e4b4:	e7fb      	b.n	1e4ae <ble_ll_adv_get_local_rpa+0x1e>
   1e4b6:	2400      	movs	r4, #0
   1e4b8:	e7f9      	b.n	1e4ae <ble_ll_adv_get_local_rpa+0x1e>
   1e4ba:	2400      	movs	r4, #0
    return rpa;
   1e4bc:	e7f7      	b.n	1e4ae <ble_ll_adv_get_local_rpa+0x1e>

0001e4be <ble_ll_adv_get_peer_rpa>:
}
   1e4be:	302e      	adds	r0, #46	; 0x2e
   1e4c0:	4770      	bx	lr
	...

0001e4c4 <ble_ll_adv_wfr_timer_exp>:
{
   1e4c4:	b508      	push	{r3, lr}
    ble_phy_disable();
   1e4c6:	f007 fe9d 	bl	26204 <ble_phy_disable>
    ble_ll_adv_tx_done(g_ble_ll_cur_adv_sm);
   1e4ca:	4b02      	ldr	r3, [pc, #8]	; (1e4d4 <ble_ll_adv_wfr_timer_exp+0x10>)
   1e4cc:	6818      	ldr	r0, [r3, #0]
   1e4ce:	f7ff f883 	bl	1d5d8 <ble_ll_adv_tx_done>
}
   1e4d2:	bd08      	pop	{r3, pc}
   1e4d4:	200087e0 	.word	0x200087e0

0001e4d8 <ble_ll_adv_reset>:
{
   1e4d8:	b538      	push	{r3, r4, r5, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1e4da:	2500      	movs	r5, #0
   1e4dc:	2d00      	cmp	r5, #0
   1e4de:	dd00      	ble.n	1e4e2 <ble_ll_adv_reset+0xa>
}
   1e4e0:	bd38      	pop	{r3, r4, r5, pc}
        advsm = &g_ble_ll_adv_sm[i];
   1e4e2:	4c08      	ldr	r4, [pc, #32]	; (1e504 <ble_ll_adv_reset+0x2c>)
   1e4e4:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
        ble_ll_adv_sm_stop(advsm);
   1e4e8:	4620      	mov	r0, r4
   1e4ea:	f7ff fac1 	bl	1da70 <ble_ll_adv_sm_stop>
        os_mbuf_free_chain(advsm->adv_data);
   1e4ee:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1e4f0:	f7eb fee8 	bl	a2c4 <os_mbuf_free_chain>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   1e4f4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1e4f6:	f7eb fee5 	bl	a2c4 <os_mbuf_free_chain>
        ble_ll_adv_sm_init(advsm);
   1e4fa:	4620      	mov	r0, r4
   1e4fc:	f7ff fd86 	bl	1e00c <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1e500:	3501      	adds	r5, #1
   1e502:	e7eb      	b.n	1e4dc <ble_ll_adv_reset+0x4>
   1e504:	20008760 	.word	0x20008760

0001e508 <ble_ll_adv_enabled>:
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1e508:	2300      	movs	r3, #0
   1e50a:	2b00      	cmp	r3, #0
   1e50c:	dd01      	ble.n	1e512 <ble_ll_adv_enabled+0xa>
    return 0;
   1e50e:	2000      	movs	r0, #0
   1e510:	4770      	bx	lr
        if (g_ble_ll_adv_sm[i].adv_enabled) {
   1e512:	01da      	lsls	r2, r3, #7
   1e514:	4903      	ldr	r1, [pc, #12]	; (1e524 <ble_ll_adv_enabled+0x1c>)
   1e516:	5c8a      	ldrb	r2, [r1, r2]
   1e518:	b90a      	cbnz	r2, 1e51e <ble_ll_adv_enabled+0x16>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1e51a:	3301      	adds	r3, #1
   1e51c:	e7f5      	b.n	1e50a <ble_ll_adv_enabled+0x2>
            return 1;
   1e51e:	2001      	movs	r0, #1
}
   1e520:	4770      	bx	lr
   1e522:	bf00      	nop
   1e524:	20008760 	.word	0x20008760

0001e528 <ble_ll_adv_init>:
 * Initialize the advertising functionality of a BLE device. This should
 * be called once on initialization
 */
void
ble_ll_adv_init(void)
{
   1e528:	b510      	push	{r4, lr}
    int i;

    /* Set default advertising parameters */
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1e52a:	2400      	movs	r4, #0
   1e52c:	2c00      	cmp	r4, #0
   1e52e:	dd00      	ble.n	1e532 <ble_ll_adv_init+0xa>
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
    }
}
   1e530:	bd10      	pop	{r4, pc}
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
   1e532:	4803      	ldr	r0, [pc, #12]	; (1e540 <ble_ll_adv_init+0x18>)
   1e534:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
   1e538:	f7ff fd68 	bl	1e00c <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1e53c:	3401      	adds	r4, #1
   1e53e:	e7f5      	b.n	1e52c <ble_ll_adv_init+0x4>
   1e540:	20008760 	.word	0x20008760

0001e544 <ble_ll_conn_is_empty_pdu>:
ble_ll_conn_is_empty_pdu(uint8_t *rxbuf)
{
    int rc;
    uint8_t llid;

    llid = rxbuf[0] & BLE_LL_DATA_HDR_LLID_MASK;
   1e544:	7803      	ldrb	r3, [r0, #0]
   1e546:	f003 0303 	and.w	r3, r3, #3
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (rxbuf[1] == 0)) {
   1e54a:	2b01      	cmp	r3, #1
   1e54c:	d001      	beq.n	1e552 <ble_ll_conn_is_empty_pdu+0xe>
        rc = 1;
    } else {
        rc = 0;
   1e54e:	2000      	movs	r0, #0
   1e550:	4770      	bx	lr
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (rxbuf[1] == 0)) {
   1e552:	7843      	ldrb	r3, [r0, #1]
   1e554:	b10b      	cbz	r3, 1e55a <ble_ll_conn_is_empty_pdu+0x16>
        rc = 0;
   1e556:	2000      	movs	r0, #0
   1e558:	4770      	bx	lr
        rc = 1;
   1e55a:	2001      	movs	r0, #1
    }
    return rc;
}
   1e55c:	4770      	bx	lr

0001e55e <ble_ll_conn_calc_dci_csa1>:
    return connsm;
}

static uint8_t
ble_ll_conn_calc_dci_csa1(struct ble_ll_conn_sm *conn)
{
   1e55e:	b508      	push	{r3, lr}
   1e560:	4601      	mov	r1, r0
    uint8_t curchan;
    uint8_t remap_index;
    uint8_t bitpos;

    /* Get next unmapped channel */
    curchan = conn->last_unmapped_chan + conn->hop_inc;
   1e562:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   1e566:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   1e56a:	4403      	add	r3, r0
   1e56c:	b2d8      	uxtb	r0, r3
    if (curchan > BLE_PHY_NUM_DATA_CHANS) {
   1e56e:	2825      	cmp	r0, #37	; 0x25
   1e570:	d902      	bls.n	1e578 <ble_ll_conn_calc_dci_csa1+0x1a>
        curchan -= BLE_PHY_NUM_DATA_CHANS;
   1e572:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   1e576:	b2d8      	uxtb	r0, r3
    }

    /* Save unmapped channel */
    conn->last_unmapped_chan = curchan;
   1e578:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30

    /* Is this a valid channel? */
    bitpos = 1 << (curchan & 0x07);
   1e57c:	f000 0207 	and.w	r2, r0, #7
   1e580:	2301      	movs	r3, #1
   1e582:	4093      	lsls	r3, r2
    if (conn->chanmap[curchan >> 3] & bitpos) {
   1e584:	f3c0 02c7 	ubfx	r2, r0, #3, #8
   1e588:	440a      	add	r2, r1
   1e58a:	f892 2020 	ldrb.w	r2, [r2, #32]
   1e58e:	4213      	tst	r3, r2
   1e590:	d000      	beq.n	1e594 <ble_ll_conn_calc_dci_csa1+0x36>

    /* Calculate remap index */
    remap_index = curchan % conn->num_used_chans;

    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
}
   1e592:	bd08      	pop	{r3, pc}
    remap_index = curchan % conn->num_used_chans;
   1e594:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
   1e598:	fbb0 f3f2 	udiv	r3, r0, r2
   1e59c:	fb02 0013 	mls	r0, r2, r3, r0
    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
   1e5a0:	3120      	adds	r1, #32
   1e5a2:	b2c0      	uxtb	r0, r0
   1e5a4:	f006 ffcc 	bl	25540 <ble_ll_utils_remapped_channel>
   1e5a8:	e7f3      	b.n	1e592 <ble_ll_conn_calc_dci_csa1+0x34>
	...

0001e5ac <ble_ll_conn_halt>:
{
   1e5ac:	b508      	push	{r3, lr}
    ble_phy_disable();
   1e5ae:	f007 fe29 	bl	26204 <ble_phy_disable>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1e5b2:	2000      	movs	r0, #0
   1e5b4:	f7fe fe5e 	bl	1d274 <ble_ll_state_set>
    g_ble_ll_conn_cur_sm = NULL;
   1e5b8:	4b01      	ldr	r3, [pc, #4]	; (1e5c0 <ble_ll_conn_halt+0x14>)
   1e5ba:	2200      	movs	r2, #0
   1e5bc:	601a      	str	r2, [r3, #0]
}
   1e5be:	bd08      	pop	{r3, pc}
   1e5c0:	200087f0 	.word	0x200087f0

0001e5c4 <ble_ll_conn_current_sm_over>:
{
   1e5c4:	b510      	push	{r4, lr}
   1e5c6:	4604      	mov	r4, r0
    ble_ll_conn_halt();
   1e5c8:	f7ff fff0 	bl	1e5ac <ble_ll_conn_halt>
    if (connsm) {
   1e5cc:	b11c      	cbz	r4, 1e5d6 <ble_ll_conn_current_sm_over+0x12>
        ble_ll_event_send(&connsm->conn_ev_end);
   1e5ce:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1e5d2:	f7fe fe5b 	bl	1d28c <ble_ll_event_send>
}
   1e5d6:	bd10      	pop	{r4, pc}

0001e5d8 <ble_ll_conn_rxend_unencrypt>:
    ble_ll_conn_current_sm_over(connsm);
}

static void
ble_ll_conn_rxend_unencrypt(void *arg)
{
   1e5d8:	b508      	push	{r3, lr}
    struct ble_ll_conn_sm *connsm;

    connsm = (struct ble_ll_conn_sm *)arg;
    CONN_F_ENCRYPTED(connsm) = 0;
   1e5da:	7882      	ldrb	r2, [r0, #2]
   1e5dc:	f36f 0241 	bfc	r2, #1, #1
   1e5e0:	7082      	strb	r2, [r0, #2]
    ble_ll_conn_current_sm_over(connsm);
   1e5e2:	f7ff ffef 	bl	1e5c4 <ble_ll_conn_current_sm_over>
}
   1e5e6:	bd08      	pop	{r3, pc}

0001e5e8 <ble_ll_conn_txend_encrypt>:
{
   1e5e8:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 1;
   1e5ea:	7883      	ldrb	r3, [r0, #2]
   1e5ec:	f043 0302 	orr.w	r3, r3, #2
   1e5f0:	7083      	strb	r3, [r0, #2]
    ble_ll_conn_current_sm_over(connsm);
   1e5f2:	f7ff ffe7 	bl	1e5c4 <ble_ll_conn_current_sm_over>
}
   1e5f6:	bd08      	pop	{r3, pc}

0001e5f8 <ble_ll_conn_wait_txend>:
{
   1e5f8:	b508      	push	{r3, lr}
    ble_ll_conn_current_sm_over(connsm);
   1e5fa:	f7ff ffe3 	bl	1e5c4 <ble_ll_conn_current_sm_over>
}
   1e5fe:	bd08      	pop	{r3, pc}

0001e600 <ble_ll_conn_connect_ind_txend_to_init>:
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
}

static void
ble_ll_conn_connect_ind_txend_to_init(void *arg)
{
   1e600:	b508      	push	{r3, lr}
    ble_ll_state_set(BLE_LL_STATE_INITIATING);
   1e602:	2003      	movs	r0, #3
   1e604:	f7fe fe36 	bl	1d274 <ble_ll_state_set>
}
   1e608:	bd08      	pop	{r3, pc}

0001e60a <ble_ll_conn_connect_ind_txend_to_standby>:
{
   1e60a:	b508      	push	{r3, lr}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1e60c:	2000      	movs	r0, #0
   1e60e:	f7fe fe31 	bl	1d274 <ble_ll_state_set>
}
   1e612:	bd08      	pop	{r3, pc}

0001e614 <ble_ll_init_get_conn_comp_ev>:
{
   1e614:	b508      	push	{r3, lr}
    evbuf = g_ble_ll_conn_comp_ev;
   1e616:	4b08      	ldr	r3, [pc, #32]	; (1e638 <ble_ll_init_get_conn_comp_ev+0x24>)
   1e618:	6818      	ldr	r0, [r3, #0]
    BLE_LL_ASSERT(evbuf != NULL);
   1e61a:	b118      	cbz	r0, 1e624 <ble_ll_init_get_conn_comp_ev+0x10>
    g_ble_ll_conn_comp_ev = NULL;
   1e61c:	4b06      	ldr	r3, [pc, #24]	; (1e638 <ble_ll_init_get_conn_comp_ev+0x24>)
   1e61e:	2200      	movs	r2, #0
   1e620:	601a      	str	r2, [r3, #0]
}
   1e622:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(evbuf != NULL);
   1e624:	f7e9 fdcc 	bl	81c0 <hal_debugger_connected>
   1e628:	b100      	cbz	r0, 1e62c <ble_ll_init_get_conn_comp_ev+0x18>
   1e62a:	be01      	bkpt	0x0001
   1e62c:	2300      	movs	r3, #0
   1e62e:	461a      	mov	r2, r3
   1e630:	4619      	mov	r1, r3
   1e632:	4618      	mov	r0, r3
   1e634:	f7eb f9cc 	bl	99d0 <__assert_func>
   1e638:	200087e8 	.word	0x200087e8

0001e63c <ble_ll_conn_start_rx_encrypt>:
{
   1e63c:	b500      	push	{lr}
   1e63e:	b083      	sub	sp, #12
   1e640:	4602      	mov	r2, r0
    CONN_F_ENCRYPTED(connsm) = 1;
   1e642:	7883      	ldrb	r3, [r0, #2]
   1e644:	f043 0302 	orr.w	r3, r3, #2
   1e648:	7083      	strb	r3, [r0, #2]
    ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   1e64a:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
                           !CONN_IS_MASTER(connsm));
   1e64e:	79d3      	ldrb	r3, [r2, #7]
    ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   1e650:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   1e654:	bf18      	it	ne
   1e656:	2301      	movne	r3, #1
   1e658:	9300      	str	r3, [sp, #0]
   1e65a:	f502 73ac 	add.w	r3, r2, #344	; 0x158
   1e65e:	f502 7298 	add.w	r2, r2, #304	; 0x130
   1e662:	2100      	movs	r1, #0
   1e664:	f007 fd1e 	bl	260a4 <ble_phy_encrypt_enable>
}
   1e668:	b003      	add	sp, #12
   1e66a:	f85d fb04 	ldr.w	pc, [sp], #4

0001e66e <ble_ll_conn_start_rx_unencrypt>:
{
   1e66e:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 0;
   1e670:	7883      	ldrb	r3, [r0, #2]
   1e672:	f36f 0341 	bfc	r3, #1, #1
   1e676:	7083      	strb	r3, [r0, #2]
    ble_phy_encrypt_disable();
   1e678:	f007 fd46 	bl	26108 <ble_phy_encrypt_disable>
}
   1e67c:	bd08      	pop	{r3, pc}

0001e67e <ble_ll_conn_continue_rx_encrypt>:
{
   1e67e:	b508      	push	{r3, lr}
                                 !CONN_IS_MASTER(connsm));
   1e680:	79c2      	ldrb	r2, [r0, #7]
    ble_phy_encrypt_set_pkt_cntr(connsm->enc_data.rx_pkt_cntr,
   1e682:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   1e686:	bf18      	it	ne
   1e688:	2201      	movne	r2, #1
   1e68a:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
   1e68e:	2100      	movs	r1, #0
   1e690:	f007 fd32 	bl	260f8 <ble_phy_encrypt_set_pkt_cntr>
}
   1e694:	bd08      	pop	{r3, pc}

0001e696 <ble_ll_conn_adjust_pyld_len>:
{
   1e696:	b538      	push	{r3, r4, r5, lr}
   1e698:	4604      	mov	r4, r0
   1e69a:	460d      	mov	r5, r1
    phy_max_tx_octets = ble_ll_pdu_max_tx_octets_get(connsm->eff_max_tx_time,
   1e69c:	2101      	movs	r1, #1
   1e69e:	8b00      	ldrh	r0, [r0, #24]
   1e6a0:	f7fe fe40 	bl	1d324 <ble_ll_pdu_max_tx_octets_get>
    if (ret > connsm->eff_max_tx_octets) {
   1e6a4:	7ba3      	ldrb	r3, [r4, #14]
   1e6a6:	42ab      	cmp	r3, r5
   1e6a8:	d300      	bcc.n	1e6ac <ble_ll_conn_adjust_pyld_len+0x16>
    ret = pyld_len;
   1e6aa:	462b      	mov	r3, r5
    if (ret > phy_max_tx_octets) {
   1e6ac:	4283      	cmp	r3, r0
   1e6ae:	d900      	bls.n	1e6b2 <ble_ll_conn_adjust_pyld_len+0x1c>
}
   1e6b0:	bd38      	pop	{r3, r4, r5, pc}
    if (ret > phy_max_tx_octets) {
   1e6b2:	4618      	mov	r0, r3
   1e6b4:	e7fc      	b.n	1e6b0 <ble_ll_conn_adjust_pyld_len+0x1a>

0001e6b6 <ble_ll_update_max_tx_octets_phy_mode>:
{
   1e6b6:	b538      	push	{r3, r4, r5, lr}
   1e6b8:	4604      	mov	r4, r0
    usecs = connsm->eff_max_tx_time;
   1e6ba:	8b05      	ldrh	r5, [r0, #24]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_1M);
   1e6bc:	2101      	movs	r1, #1
   1e6be:	4628      	mov	r0, r5
   1e6c0:	f7fe fe30 	bl	1d324 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_1M] =
   1e6c4:	7760      	strb	r0, [r4, #29]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_2M);
   1e6c6:	2102      	movs	r1, #2
   1e6c8:	4628      	mov	r0, r5
   1e6ca:	f7fe fe2b 	bl	1d324 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_2M] =
   1e6ce:	77a0      	strb	r0, [r4, #30]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_CODED_125KBPS);
   1e6d0:	2103      	movs	r1, #3
   1e6d2:	4628      	mov	r0, r5
   1e6d4:	f7fe fe26 	bl	1d324 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_CODED_125KBPS] =
   1e6d8:	77e0      	strb	r0, [r4, #31]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_CODED_500KBPS);
   1e6da:	2100      	movs	r1, #0
   1e6dc:	4628      	mov	r0, r5
   1e6de:	f7fe fe21 	bl	1d324 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_CODED_500KBPS] =
   1e6e2:	7720      	strb	r0, [r4, #28]
}
   1e6e4:	bd38      	pop	{r3, r4, r5, pc}
	...

0001e6e8 <ble_ll_conn_get_next_sched_time>:
{
   1e6e8:	b510      	push	{r4, lr}
   1e6ea:	b082      	sub	sp, #8
    ce_end = connsm->anchor_point + connsm->conn_itvl_ticks -
   1e6ec:	6f44      	ldr	r4, [r0, #116]	; 0x74
   1e6ee:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1e6f0:	441c      	add	r4, r3
   1e6f2:	4b0c      	ldr	r3, [pc, #48]	; (1e724 <ble_ll_conn_get_next_sched_time+0x3c>)
   1e6f4:	781b      	ldrb	r3, [r3, #0]
   1e6f6:	1ae4      	subs	r4, r4, r3
    if ((connsm->anchor_point_usecs + connsm->conn_itvl_usecs) >= 31) {
   1e6f8:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   1e6fc:	f890 2079 	ldrb.w	r2, [r0, #121]	; 0x79
   1e700:	4413      	add	r3, r2
   1e702:	2b1e      	cmp	r3, #30
   1e704:	dd00      	ble.n	1e708 <ble_ll_conn_get_next_sched_time+0x20>
        ++ce_end;
   1e706:	3401      	adds	r4, #1
    if (ble_ll_sched_next_time(&next_sched_time)) {
   1e708:	a801      	add	r0, sp, #4
   1e70a:	f006 fe91 	bl	25430 <ble_ll_sched_next_time>
   1e70e:	b118      	cbz	r0, 1e718 <ble_ll_conn_get_next_sched_time+0x30>
        if (CPUTIME_LT(next_sched_time, ce_end)) {
   1e710:	9b01      	ldr	r3, [sp, #4]
   1e712:	1b1a      	subs	r2, r3, r4
   1e714:	2a00      	cmp	r2, #0
   1e716:	db02      	blt.n	1e71e <ble_ll_conn_get_next_sched_time+0x36>
}
   1e718:	4620      	mov	r0, r4
   1e71a:	b002      	add	sp, #8
   1e71c:	bd10      	pop	{r4, pc}
            ce_end = next_sched_time;
   1e71e:	461c      	mov	r4, r3
    return ce_end;
   1e720:	e7fa      	b.n	1e718 <ble_ll_conn_get_next_sched_time+0x30>
   1e722:	bf00      	nop
   1e724:	20008cf0 	.word	0x20008cf0

0001e728 <ble_ll_conn_tx_pdu>:
{
   1e728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e72c:	b08f      	sub	sp, #60	; 0x3c
   1e72e:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.terminate_ind_rxd) {
   1e730:	7803      	ldrb	r3, [r0, #0]
   1e732:	f013 0f04 	tst.w	r3, #4
   1e736:	d035      	beq.n	1e7a4 <ble_ll_conn_tx_pdu+0x7c>
        CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   1e738:	7843      	ldrb	r3, [r0, #1]
   1e73a:	f043 0320 	orr.w	r3, r3, #32
   1e73e:	7043      	strb	r3, [r0, #1]
    ble_hdr = NULL;
   1e740:	2700      	movs	r7, #0
    m = NULL;
   1e742:	463d      	mov	r5, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e744:	2601      	movs	r6, #1
    md = 0;
   1e746:	46b9      	mov	r9, r7
    if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   1e748:	7863      	ldrb	r3, [r4, #1]
   1e74a:	f013 0f20 	tst.w	r3, #32
   1e74e:	d00a      	beq.n	1e766 <ble_ll_conn_tx_pdu+0x3e>
        m->om_data += BLE_MBUF_MEMBLOCK_OVERHEAD;
   1e750:	ab0e      	add	r3, sp, #56	; 0x38
   1e752:	9304      	str	r3, [sp, #16]
        ble_hdr->txinfo.flags = 0;
   1e754:	2300      	movs	r3, #0
   1e756:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        ble_hdr->txinfo.offset = 0;
   1e75a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        ble_hdr->txinfo.pyld_len = 0;
   1e75e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        ble_hdr = &empty_pdu.ble_hdr;
   1e762:	af0a      	add	r7, sp, #40	; 0x28
        m = (struct os_mbuf *)&empty_pdu;
   1e764:	ad04      	add	r5, sp, #16
    if (connsm->tx_seqnum) {
   1e766:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   1e76a:	b10b      	cbz	r3, 1e770 <ble_ll_conn_tx_pdu+0x48>
        hdr_byte |= BLE_LL_DATA_HDR_SN_MASK;
   1e76c:	f046 0608 	orr.w	r6, r6, #8
    if (md) {
   1e770:	f1b9 0f00 	cmp.w	r9, #0
   1e774:	d001      	beq.n	1e77a <ble_ll_conn_tx_pdu+0x52>
        hdr_byte |= BLE_LL_DATA_HDR_MD_MASK;
   1e776:	f046 0610 	orr.w	r6, r6, #16
    if (connsm->next_exp_seqnum) {
   1e77a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   1e77e:	b10b      	cbz	r3, 1e784 <ble_ll_conn_tx_pdu+0x5c>
        hdr_byte |= BLE_LL_DATA_HDR_NESN_MASK;
   1e780:	f046 0604 	orr.w	r6, r6, #4
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   1e784:	70fe      	strb	r6, [r7, #3]
    if ((connsm->csmflags.cfbit.terminate_ind_rxd) ||
   1e786:	7823      	ldrb	r3, [r4, #0]
   1e788:	f013 0f04 	tst.w	r3, #4
   1e78c:	f040 8125 	bne.w	1e9da <ble_ll_conn_tx_pdu+0x2b2>
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   1e790:	f894 8007 	ldrb.w	r8, [r4, #7]
    if ((connsm->csmflags.cfbit.terminate_ind_rxd) ||
   1e794:	f1b8 0f02 	cmp.w	r8, #2
   1e798:	f000 8108 	beq.w	1e9ac <ble_ll_conn_tx_pdu+0x284>
        txend_func = NULL;
   1e79c:	2600      	movs	r6, #0
        end_transition = BLE_PHY_TRANSITION_TX_RX;
   1e79e:	f04f 0802 	mov.w	r8, #2
   1e7a2:	e11d      	b.n	1e9e0 <ble_ll_conn_tx_pdu+0x2b8>
    pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   1e7a4:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm) && !pkthdr) {
   1e7a8:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
   1e7ac:	b335      	cbz	r5, 1e7fc <ble_ll_conn_tx_pdu+0xd4>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm)) {
   1e7ae:	b39d      	cbz	r5, 1e818 <ble_ll_conn_tx_pdu+0xf0>
        if (connsm->cur_tx_pdu) {
   1e7b0:	2d00      	cmp	r5, #0
   1e7b2:	f000 8091 	beq.w	1e8d8 <ble_ll_conn_tx_pdu+0x1b0>
            ble_hdr = BLE_MBUF_HDR_PTR(m);
   1e7b6:	f105 0718 	add.w	r7, r5, #24
            pktlen = OS_MBUF_PKTLEN(m);
   1e7ba:	f8b5 8010 	ldrh.w	r8, [r5, #16]
            cur_txlen = ble_hdr->txinfo.pyld_len;
   1e7be:	f895 b01a 	ldrb.w	fp, [r5, #26]
            cur_offset = ble_hdr->txinfo.offset;
   1e7c2:	f895 9019 	ldrb.w	r9, [r5, #25]
            if (cur_offset == 0) {
   1e7c6:	f1b9 0f00 	cmp.w	r9, #0
   1e7ca:	d17b      	bne.n	1e8c4 <ble_ll_conn_tx_pdu+0x19c>
                hdr_byte = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   1e7cc:	7eee      	ldrb	r6, [r5, #27]
   1e7ce:	f006 0603 	and.w	r6, r6, #3
            if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   1e7d2:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1e7d6:	2b02      	cmp	r3, #2
   1e7d8:	f240 8095 	bls.w	1e906 <ble_ll_conn_tx_pdu+0x1de>
                if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)
   1e7dc:	f1ba 0f00 	cmp.w	sl, #0
   1e7e0:	f000 8091 	beq.w	1e906 <ble_ll_conn_tx_pdu+0x1de>
   1e7e4:	4650      	mov	r0, sl
   1e7e6:	f003 f806 	bl	217f6 <ble_ll_ctrl_enc_allowed_pdu_tx>
   1e7ea:	2800      	cmp	r0, #0
   1e7ec:	f040 808b 	bne.w	1e906 <ble_ll_conn_tx_pdu+0x1de>
                    && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   1e7f0:	79e3      	ldrb	r3, [r4, #7]
   1e7f2:	2b01      	cmp	r3, #1
   1e7f4:	d168      	bne.n	1e8c8 <ble_ll_conn_tx_pdu+0x1a0>
                    nextpkthdr = NULL;
   1e7f6:	f04f 0a00 	mov.w	sl, #0
   1e7fa:	e084      	b.n	1e906 <ble_ll_conn_tx_pdu+0x1de>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm) && !pkthdr) {
   1e7fc:	7843      	ldrb	r3, [r0, #1]
   1e7fe:	f013 0f20 	tst.w	r3, #32
   1e802:	d1d4      	bne.n	1e7ae <ble_ll_conn_tx_pdu+0x86>
   1e804:	f1ba 0f00 	cmp.w	sl, #0
   1e808:	d1d1      	bne.n	1e7ae <ble_ll_conn_tx_pdu+0x86>
        CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   1e80a:	f043 0320 	orr.w	r3, r3, #32
   1e80e:	7043      	strb	r3, [r0, #1]
    ble_hdr = NULL;
   1e810:	2700      	movs	r7, #0
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e812:	2601      	movs	r6, #1
    md = 0;
   1e814:	46b9      	mov	r9, r7
        goto conn_tx_pdu;
   1e816:	e797      	b.n	1e748 <ble_ll_conn_tx_pdu+0x20>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm)) {
   1e818:	7863      	ldrb	r3, [r4, #1]
   1e81a:	f013 0f20 	tst.w	r3, #32
   1e81e:	d1c7      	bne.n	1e7b0 <ble_ll_conn_tx_pdu+0x88>
        m = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   1e820:	f1aa 0510 	sub.w	r5, sl, #16
        nextpkthdr = STAILQ_NEXT(pkthdr, omp_next);
   1e824:	f8da 9004 	ldr.w	r9, [sl, #4]
        if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   1e828:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1e82c:	2b02      	cmp	r3, #2
   1e82e:	d81b      	bhi.n	1e868 <ble_ll_conn_tx_pdu+0x140>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   1e830:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   1e834:	685b      	ldr	r3, [r3, #4]
   1e836:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   1e83a:	b3bb      	cbz	r3, 1e8ac <ble_ll_conn_tx_pdu+0x184>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   1e83c:	f10a 0708 	add.w	r7, sl, #8
        llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   1e840:	f89a 300b 	ldrb.w	r3, [sl, #11]
   1e844:	f003 0303 	and.w	r3, r3, #3
        pktlen = pkthdr->omp_len;
   1e848:	f8ba 8000 	ldrh.w	r8, [sl]
        if (llid == BLE_LL_LLID_CTRL) {
   1e84c:	2b03      	cmp	r3, #3
   1e84e:	d132      	bne.n	1e8b6 <ble_ll_conn_tx_pdu+0x18e>
            cur_txlen = pktlen;
   1e850:	fa5f fb88 	uxtb.w	fp, r8
        ble_hdr->txinfo.pyld_len = cur_txlen;
   1e854:	f88a b00a 	strb.w	fp, [sl, #10]
        hdr_byte = ble_hdr->txinfo.hdr_byte;
   1e858:	f89a 600b 	ldrb.w	r6, [sl, #11]
        connsm->cur_tx_pdu = m;
   1e85c:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
   1e860:	46ca      	mov	sl, r9
    cur_offset = 0;
   1e862:	f04f 0900 	mov.w	r9, #0
        connsm->cur_tx_pdu = m;
   1e866:	e04e      	b.n	1e906 <ble_ll_conn_tx_pdu+0x1de>
            if (!ble_ll_ctrl_enc_allowed_pdu_tx(pkthdr)) {
   1e868:	4650      	mov	r0, sl
   1e86a:	f002 ffc4 	bl	217f6 <ble_ll_ctrl_enc_allowed_pdu_tx>
   1e86e:	b938      	cbnz	r0, 1e880 <ble_ll_conn_tx_pdu+0x158>
                CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   1e870:	7863      	ldrb	r3, [r4, #1]
   1e872:	f043 0320 	orr.w	r3, r3, #32
   1e876:	7063      	strb	r3, [r4, #1]
    ble_hdr = NULL;
   1e878:	2700      	movs	r7, #0
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e87a:	2601      	movs	r6, #1
    md = 0;
   1e87c:	46b9      	mov	r9, r7
                goto conn_tx_pdu;
   1e87e:	e763      	b.n	1e748 <ble_ll_conn_tx_pdu+0x20>
            if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)
   1e880:	f1b9 0f00 	cmp.w	r9, #0
   1e884:	d0d4      	beq.n	1e830 <ble_ll_conn_tx_pdu+0x108>
   1e886:	4648      	mov	r0, r9
   1e888:	f002 ffb5 	bl	217f6 <ble_ll_ctrl_enc_allowed_pdu_tx>
   1e88c:	2800      	cmp	r0, #0
   1e88e:	d1cf      	bne.n	1e830 <ble_ll_conn_tx_pdu+0x108>
                && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   1e890:	79e3      	ldrb	r3, [r4, #7]
   1e892:	2b01      	cmp	r3, #1
   1e894:	d007      	beq.n	1e8a6 <ble_ll_conn_tx_pdu+0x17e>
                    !ble_ll_ctrl_is_start_enc_rsp(m))) {
   1e896:	4628      	mov	r0, r5
   1e898:	f002 ffbd 	bl	21816 <ble_ll_ctrl_is_start_enc_rsp>
                && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   1e89c:	2800      	cmp	r0, #0
   1e89e:	d1c7      	bne.n	1e830 <ble_ll_conn_tx_pdu+0x108>
                nextpkthdr = NULL;
   1e8a0:	f04f 0900 	mov.w	r9, #0
   1e8a4:	e7c4      	b.n	1e830 <ble_ll_conn_tx_pdu+0x108>
   1e8a6:	f04f 0900 	mov.w	r9, #0
   1e8aa:	e7c1      	b.n	1e830 <ble_ll_conn_tx_pdu+0x108>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   1e8ac:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   1e8b0:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   1e8b4:	e7c2      	b.n	1e83c <ble_ll_conn_tx_pdu+0x114>
            cur_txlen = ble_ll_conn_adjust_pyld_len(connsm, pktlen);
   1e8b6:	4641      	mov	r1, r8
   1e8b8:	4620      	mov	r0, r4
   1e8ba:	f7ff feec 	bl	1e696 <ble_ll_conn_adjust_pyld_len>
   1e8be:	fa5f fb80 	uxtb.w	fp, r0
   1e8c2:	e7c7      	b.n	1e854 <ble_ll_conn_tx_pdu+0x12c>
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e8c4:	2601      	movs	r6, #1
   1e8c6:	e784      	b.n	1e7d2 <ble_ll_conn_tx_pdu+0xaa>
                        !ble_ll_ctrl_is_start_enc_rsp(connsm->cur_tx_pdu))) {
   1e8c8:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   1e8cc:	f002 ffa3 	bl	21816 <ble_ll_ctrl_is_start_enc_rsp>
                    && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   1e8d0:	b9c8      	cbnz	r0, 1e906 <ble_ll_conn_tx_pdu+0x1de>
                    nextpkthdr = NULL;
   1e8d2:	f04f 0a00 	mov.w	sl, #0
   1e8d6:	e016      	b.n	1e906 <ble_ll_conn_tx_pdu+0x1de>
            if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   1e8d8:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1e8dc:	2b02      	cmp	r3, #2
   1e8de:	d90d      	bls.n	1e8fc <ble_ll_conn_tx_pdu+0x1d4>
                if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)) {
   1e8e0:	f1ba 0f00 	cmp.w	sl, #0
   1e8e4:	d03e      	beq.n	1e964 <ble_ll_conn_tx_pdu+0x23c>
   1e8e6:	4650      	mov	r0, sl
   1e8e8:	f002 ff85 	bl	217f6 <ble_ll_ctrl_enc_allowed_pdu_tx>
   1e8ec:	2800      	cmp	r0, #0
   1e8ee:	d03f      	beq.n	1e970 <ble_ll_conn_tx_pdu+0x248>
    ble_hdr = NULL;
   1e8f0:	2700      	movs	r7, #0
            pktlen = 0;
   1e8f2:	46b8      	mov	r8, r7
    cur_offset = 0;
   1e8f4:	46b9      	mov	r9, r7
            cur_txlen = 0;
   1e8f6:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e8f8:	2601      	movs	r6, #1
   1e8fa:	e004      	b.n	1e906 <ble_ll_conn_tx_pdu+0x1de>
    ble_hdr = NULL;
   1e8fc:	2700      	movs	r7, #0
            pktlen = 0;
   1e8fe:	46b8      	mov	r8, r7
    cur_offset = 0;
   1e900:	46b9      	mov	r9, r7
            cur_txlen = 0;
   1e902:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e904:	2601      	movs	r6, #1
    if (nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) {
   1e906:	f1ba 0f00 	cmp.w	sl, #0
   1e90a:	d039      	beq.n	1e980 <ble_ll_conn_tx_pdu+0x258>
        next_event_time = ble_ll_conn_get_next_sched_time(connsm);
   1e90c:	4620      	mov	r0, r4
   1e90e:	f7ff feeb 	bl	1e6e8 <ble_ll_conn_get_next_sched_time>
   1e912:	9003      	str	r0, [sp, #12]
        if ((cur_offset + cur_txlen) < pktlen) {
   1e914:	eb09 030b 	add.w	r3, r9, fp
   1e918:	4543      	cmp	r3, r8
   1e91a:	da38      	bge.n	1e98e <ble_ll_conn_tx_pdu+0x266>
            next_txlen = pktlen - (cur_offset + cur_txlen);
   1e91c:	fa5f f088 	uxtb.w	r0, r8
   1e920:	fa5f f883 	uxtb.w	r8, r3
   1e924:	eba0 0008 	sub.w	r0, r0, r8
   1e928:	b2c0      	uxtb	r0, r0
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   1e92a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
            ble_ll_pdu_tx_time_get(next_txlen, tx_phy_mode) +
   1e92e:	2101      	movs	r1, #1
   1e930:	f7fe fcf4 	bl	1d31c <ble_ll_pdu_tx_time_get>
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   1e934:	4480      	add	r8, r0
            ble_ll_pdu_tx_time_get(cur_txlen, tx_phy_mode);
   1e936:	2101      	movs	r1, #1
   1e938:	4658      	mov	r0, fp
   1e93a:	f7fe fcef 	bl	1d31c <ble_ll_pdu_tx_time_get>
            ble_ll_pdu_tx_time_get(next_txlen, tx_phy_mode) +
   1e93e:	4440      	add	r0, r8
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   1e940:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   1e944:	79e3      	ldrb	r3, [r4, #7]
   1e946:	2b01      	cmp	r3, #1
   1e948:	d029      	beq.n	1e99e <ble_ll_conn_tx_pdu+0x276>
        ticks = os_cputime_usecs_to_ticks(ticks);
   1e94a:	f7fd fa1d 	bl	1bd88 <os_cputime_usecs_to_ticks>
   1e94e:	4680      	mov	r8, r0
        if ((int32_t)((os_cputime_get32() + ticks) - next_event_time) < 0) {
   1e950:	f7fd fa03 	bl	1bd5a <os_cputime_get32>
   1e954:	4440      	add	r0, r8
   1e956:	9b03      	ldr	r3, [sp, #12]
   1e958:	1ac0      	subs	r0, r0, r3
   1e95a:	2800      	cmp	r0, #0
   1e95c:	db23      	blt.n	1e9a6 <ble_ll_conn_tx_pdu+0x27e>
    md = 0;
   1e95e:	f04f 0900 	mov.w	r9, #0
   1e962:	e6f1      	b.n	1e748 <ble_ll_conn_tx_pdu+0x20>
    ble_hdr = NULL;
   1e964:	2700      	movs	r7, #0
            pktlen = 0;
   1e966:	46b8      	mov	r8, r7
    cur_offset = 0;
   1e968:	46b9      	mov	r9, r7
            cur_txlen = 0;
   1e96a:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e96c:	2601      	movs	r6, #1
   1e96e:	e7ca      	b.n	1e906 <ble_ll_conn_tx_pdu+0x1de>
                    nextpkthdr = NULL;
   1e970:	f04f 0a00 	mov.w	sl, #0
    ble_hdr = NULL;
   1e974:	4657      	mov	r7, sl
            pktlen = 0;
   1e976:	46d0      	mov	r8, sl
    cur_offset = 0;
   1e978:	46d1      	mov	r9, sl
            cur_txlen = 0;
   1e97a:	46d3      	mov	fp, sl
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e97c:	2601      	movs	r6, #1
   1e97e:	e7c2      	b.n	1e906 <ble_ll_conn_tx_pdu+0x1de>
    if (nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) {
   1e980:	eb09 030b 	add.w	r3, r9, fp
   1e984:	4543      	cmp	r3, r8
   1e986:	dbc1      	blt.n	1e90c <ble_ll_conn_tx_pdu+0x1e4>
    md = 0;
   1e988:	f04f 0900 	mov.w	r9, #0
   1e98c:	e6dc      	b.n	1e748 <ble_ll_conn_tx_pdu+0x20>
            if (nextpkthdr->omp_len > connsm->eff_max_tx_octets) {
   1e98e:	f8ba 3000 	ldrh.w	r3, [sl]
   1e992:	7ba0      	ldrb	r0, [r4, #14]
   1e994:	b282      	uxth	r2, r0
   1e996:	4293      	cmp	r3, r2
   1e998:	d8c7      	bhi.n	1e92a <ble_ll_conn_tx_pdu+0x202>
                next_txlen = nextpkthdr->omp_len;
   1e99a:	b2d8      	uxtb	r0, r3
   1e99c:	e7c5      	b.n	1e92a <ble_ll_conn_tx_pdu+0x202>
            ticks += (BLE_LL_IFS + connsm->eff_max_rx_time);
   1e99e:	8b63      	ldrh	r3, [r4, #26]
   1e9a0:	4418      	add	r0, r3
   1e9a2:	3096      	adds	r0, #150	; 0x96
   1e9a4:	e7d1      	b.n	1e94a <ble_ll_conn_tx_pdu+0x222>
            md = 1;
   1e9a6:	f04f 0901 	mov.w	r9, #1
   1e9aa:	e6cd      	b.n	1e748 <ble_ll_conn_tx_pdu+0x20>
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   1e9ac:	f1b9 0f00 	cmp.w	r9, #0
   1e9b0:	d144      	bne.n	1ea3c <ble_ll_conn_tx_pdu+0x314>
         (connsm->cons_rxd_bad_crc == 0) &&
   1e9b2:	f894 a034 	ldrb.w	sl, [r4, #52]	; 0x34
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   1e9b6:	f1ba 0f00 	cmp.w	sl, #0
   1e9ba:	d141      	bne.n	1ea40 <ble_ll_conn_tx_pdu+0x318>
         ((connsm->last_rxd_hdr_byte & BLE_LL_DATA_HDR_MD_MASK) == 0) &&
   1e9bc:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
         (connsm->cons_rxd_bad_crc == 0) &&
   1e9c0:	f013 0f10 	tst.w	r3, #16
   1e9c4:	d001      	beq.n	1e9ca <ble_ll_conn_tx_pdu+0x2a2>
        txend_func = NULL;
   1e9c6:	2600      	movs	r6, #0
   1e9c8:	e00a      	b.n	1e9e0 <ble_ll_conn_tx_pdu+0x2b8>
         !ble_ll_ctrl_is_terminate_ind(hdr_byte, m->om_data[0]))) {
   1e9ca:	682b      	ldr	r3, [r5, #0]
   1e9cc:	7819      	ldrb	r1, [r3, #0]
   1e9ce:	4630      	mov	r0, r6
   1e9d0:	f003 f82b 	bl	21a2a <ble_ll_ctrl_is_terminate_ind>
         ((connsm->last_rxd_hdr_byte & BLE_LL_DATA_HDR_MD_MASK) == 0) &&
   1e9d4:	b3b0      	cbz	r0, 1ea44 <ble_ll_conn_tx_pdu+0x31c>
        txend_func = NULL;
   1e9d6:	2600      	movs	r6, #0
   1e9d8:	e002      	b.n	1e9e0 <ble_ll_conn_tx_pdu+0x2b8>
        txend_func = ble_ll_conn_wait_txend;
   1e9da:	4e51      	ldr	r6, [pc, #324]	; (1eb20 <ble_ll_conn_tx_pdu+0x3f8>)
        end_transition = BLE_PHY_TRANSITION_NONE;
   1e9dc:	f04f 0800 	mov.w	r8, #0
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   1e9e0:	78fb      	ldrb	r3, [r7, #3]
   1e9e2:	f003 0303 	and.w	r3, r3, #3
    if (llid == BLE_LL_LLID_CTRL) {
   1e9e6:	2b03      	cmp	r3, #3
   1e9e8:	d02f      	beq.n	1ea4a <ble_ll_conn_tx_pdu+0x322>
        opcode = 0;
   1e9ea:	2300      	movs	r3, #0
        is_ctrl = 0;
   1e9ec:	461a      	mov	r2, r3
    } else if (is_ctrl && (opcode == BLE_LL_CTRL_START_ENC_REQ)) {
   1e9ee:	b10a      	cbz	r2, 1e9f4 <ble_ll_conn_tx_pdu+0x2cc>
   1e9f0:	2b05      	cmp	r3, #5
   1e9f2:	d047      	beq.n	1ea84 <ble_ll_conn_tx_pdu+0x35c>
    } else if (is_ctrl && (opcode == BLE_LL_CTRL_PAUSE_ENC_RSP)) {
   1e9f4:	b10a      	cbz	r2, 1e9fa <ble_ll_conn_tx_pdu+0x2d2>
   1e9f6:	2b0b      	cmp	r3, #11
   1e9f8:	d055      	beq.n	1eaa6 <ble_ll_conn_tx_pdu+0x37e>
        if (CONN_F_ENCRYPTED(connsm)) {
   1e9fa:	78a3      	ldrb	r3, [r4, #2]
   1e9fc:	f013 0f02 	tst.w	r3, #2
   1ea00:	d17b      	bne.n	1eafa <ble_ll_conn_tx_pdu+0x3d2>
    ble_phy_set_txend_cb(txend_func, connsm);
   1ea02:	4621      	mov	r1, r4
   1ea04:	4630      	mov	r0, r6
   1ea06:	f007 fb95 	bl	26134 <ble_phy_set_txend_cb>
    rc = ble_phy_tx(ble_ll_tx_mbuf_pducb, m, end_transition);
   1ea0a:	4642      	mov	r2, r8
   1ea0c:	4629      	mov	r1, r5
   1ea0e:	4845      	ldr	r0, [pc, #276]	; (1eb24 <ble_ll_conn_tx_pdu+0x3fc>)
   1ea10:	f007 fdea 	bl	265e8 <ble_phy_tx>
    if (!rc) {
   1ea14:	4602      	mov	r2, r0
   1ea16:	b968      	cbnz	r0, 1ea34 <ble_ll_conn_tx_pdu+0x30c>
        CONN_F_LAST_TXD_MD(connsm) = md;
   1ea18:	7863      	ldrb	r3, [r4, #1]
   1ea1a:	f369 1386 	bfi	r3, r9, #6, #1
   1ea1e:	7063      	strb	r3, [r4, #1]
        if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   1ea20:	f013 0f20 	tst.w	r3, #32
   1ea24:	d006      	beq.n	1ea34 <ble_ll_conn_tx_pdu+0x30c>
            if (connsm->csmflags.cfbit.terminate_ind_rxd) {
   1ea26:	7823      	ldrb	r3, [r4, #0]
   1ea28:	f013 0f04 	tst.w	r3, #4
   1ea2c:	d002      	beq.n	1ea34 <ble_ll_conn_tx_pdu+0x30c>
                connsm->csmflags.cfbit.terminate_ind_rxd_acked = 1;
   1ea2e:	f043 0308 	orr.w	r3, r3, #8
   1ea32:	7023      	strb	r3, [r4, #0]
}
   1ea34:	4610      	mov	r0, r2
   1ea36:	b00f      	add	sp, #60	; 0x3c
   1ea38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txend_func = NULL;
   1ea3c:	2600      	movs	r6, #0
   1ea3e:	e7cf      	b.n	1e9e0 <ble_ll_conn_tx_pdu+0x2b8>
   1ea40:	2600      	movs	r6, #0
   1ea42:	e7cd      	b.n	1e9e0 <ble_ll_conn_tx_pdu+0x2b8>
        end_transition = BLE_PHY_TRANSITION_NONE;
   1ea44:	46d0      	mov	r8, sl
        txend_func = ble_ll_conn_wait_txend;
   1ea46:	4e36      	ldr	r6, [pc, #216]	; (1eb20 <ble_ll_conn_tx_pdu+0x3f8>)
   1ea48:	e7ca      	b.n	1e9e0 <ble_ll_conn_tx_pdu+0x2b8>
        opcode = m->om_data[0];
   1ea4a:	682b      	ldr	r3, [r5, #0]
   1ea4c:	781b      	ldrb	r3, [r3, #0]
    if (is_ctrl && (opcode == BLE_LL_CTRL_START_ENC_RSP)) {
   1ea4e:	2b06      	cmp	r3, #6
   1ea50:	d001      	beq.n	1ea56 <ble_ll_conn_tx_pdu+0x32e>
        is_ctrl = 1;
   1ea52:	2201      	movs	r2, #1
   1ea54:	e7cb      	b.n	1e9ee <ble_ll_conn_tx_pdu+0x2c6>
        CONN_F_ENCRYPTED(connsm) = 1;
   1ea56:	78a3      	ldrb	r3, [r4, #2]
   1ea58:	f043 0302 	orr.w	r3, r3, #2
   1ea5c:	70a3      	strb	r3, [r4, #2]
        connsm->enc_data.tx_encrypted = 1;
   1ea5e:	2301      	movs	r3, #1
   1ea60:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
                               CONN_IS_MASTER(connsm));
   1ea64:	79e3      	ldrb	r3, [r4, #7]
        ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   1ea66:	2b01      	cmp	r3, #1
   1ea68:	bf14      	ite	ne
   1ea6a:	2300      	movne	r3, #0
   1ea6c:	2301      	moveq	r3, #1
   1ea6e:	9300      	str	r3, [sp, #0]
   1ea70:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   1ea74:	f504 7298 	add.w	r2, r4, #304	; 0x130
   1ea78:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   1ea7c:	2100      	movs	r1, #0
   1ea7e:	f007 fb11 	bl	260a4 <ble_phy_encrypt_enable>
   1ea82:	e7be      	b.n	1ea02 <ble_ll_conn_tx_pdu+0x2da>
        CONN_F_ENCRYPTED(connsm) = 0;
   1ea84:	78a3      	ldrb	r3, [r4, #2]
   1ea86:	f36f 0341 	bfc	r3, #1, #1
   1ea8a:	70a3      	strb	r3, [r4, #2]
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
   1ea8c:	2307      	movs	r3, #7
   1ea8e:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        connsm->enc_data.tx_encrypted = 0;
   1ea92:	2300      	movs	r3, #0
   1ea94:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
        ble_phy_encrypt_disable();
   1ea98:	f007 fb36 	bl	26108 <ble_phy_encrypt_disable>
        if (txend_func == NULL) {
   1ea9c:	b10e      	cbz	r6, 1eaa2 <ble_ll_conn_tx_pdu+0x37a>
            txend_func = ble_ll_conn_txend_encrypt;
   1ea9e:	4e22      	ldr	r6, [pc, #136]	; (1eb28 <ble_ll_conn_tx_pdu+0x400>)
   1eaa0:	e7af      	b.n	1ea02 <ble_ll_conn_tx_pdu+0x2da>
            txend_func = ble_ll_conn_start_rx_encrypt;
   1eaa2:	4e22      	ldr	r6, [pc, #136]	; (1eb2c <ble_ll_conn_tx_pdu+0x404>)
   1eaa4:	e7ad      	b.n	1ea02 <ble_ll_conn_tx_pdu+0x2da>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   1eaa6:	79e3      	ldrb	r3, [r4, #7]
   1eaa8:	2b02      	cmp	r3, #2
   1eaaa:	d00c      	beq.n	1eac6 <ble_ll_conn_tx_pdu+0x39e>
            CONN_F_ENCRYPTED(connsm) = 0;
   1eaac:	78a3      	ldrb	r3, [r4, #2]
   1eaae:	f36f 0341 	bfc	r3, #1, #1
   1eab2:	70a3      	strb	r3, [r4, #2]
            connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
   1eab4:	2305      	movs	r3, #5
   1eab6:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            connsm->enc_data.tx_encrypted = 0;
   1eaba:	2300      	movs	r3, #0
   1eabc:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
            ble_phy_encrypt_disable();
   1eac0:	f007 fb22 	bl	26108 <ble_phy_encrypt_disable>
   1eac4:	e79d      	b.n	1ea02 <ble_ll_conn_tx_pdu+0x2da>
            CONN_F_ENCRYPTED(connsm) = 1;
   1eac6:	78a2      	ldrb	r2, [r4, #2]
   1eac8:	f042 0202 	orr.w	r2, r2, #2
   1eacc:	70a2      	strb	r2, [r4, #2]
            connsm->enc_data.tx_encrypted = 1;
   1eace:	2201      	movs	r2, #1
   1ead0:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
            ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   1ead4:	4293      	cmp	r3, r2
   1ead6:	bf14      	ite	ne
   1ead8:	2300      	movne	r3, #0
   1eada:	2301      	moveq	r3, #1
   1eadc:	9300      	str	r3, [sp, #0]
   1eade:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   1eae2:	f504 7298 	add.w	r2, r4, #304	; 0x130
   1eae6:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   1eaea:	2100      	movs	r1, #0
   1eaec:	f007 fada 	bl	260a4 <ble_phy_encrypt_enable>
            if (txend_func == NULL) {
   1eaf0:	b10e      	cbz	r6, 1eaf6 <ble_ll_conn_tx_pdu+0x3ce>
                txend_func = ble_ll_conn_rxend_unencrypt;
   1eaf2:	4e0f      	ldr	r6, [pc, #60]	; (1eb30 <ble_ll_conn_tx_pdu+0x408>)
   1eaf4:	e785      	b.n	1ea02 <ble_ll_conn_tx_pdu+0x2da>
                txend_func = ble_ll_conn_start_rx_unencrypt;
   1eaf6:	4e0f      	ldr	r6, [pc, #60]	; (1eb34 <ble_ll_conn_tx_pdu+0x40c>)
   1eaf8:	e783      	b.n	1ea02 <ble_ll_conn_tx_pdu+0x2da>
            connsm->enc_data.tx_encrypted = 1;
   1eafa:	2301      	movs	r3, #1
   1eafc:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
                                         CONN_IS_MASTER(connsm));
   1eb00:	79e2      	ldrb	r2, [r4, #7]
            ble_phy_encrypt_set_pkt_cntr(connsm->enc_data.tx_pkt_cntr,
   1eb02:	429a      	cmp	r2, r3
   1eb04:	bf14      	ite	ne
   1eb06:	2200      	movne	r2, #0
   1eb08:	2201      	moveq	r2, #1
   1eb0a:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   1eb0e:	2100      	movs	r1, #0
   1eb10:	f007 faf2 	bl	260f8 <ble_phy_encrypt_set_pkt_cntr>
            if (txend_func == NULL) {
   1eb14:	2e00      	cmp	r6, #0
   1eb16:	f47f af74 	bne.w	1ea02 <ble_ll_conn_tx_pdu+0x2da>
                txend_func = ble_ll_conn_continue_rx_encrypt;
   1eb1a:	4e07      	ldr	r6, [pc, #28]	; (1eb38 <ble_ll_conn_tx_pdu+0x410>)
   1eb1c:	e771      	b.n	1ea02 <ble_ll_conn_tx_pdu+0x2da>
   1eb1e:	bf00      	nop
   1eb20:	0001e5f9 	.word	0x0001e5f9
   1eb24:	0001d243 	.word	0x0001d243
   1eb28:	0001e5e9 	.word	0x0001e5e9
   1eb2c:	0001e63d 	.word	0x0001e63d
   1eb30:	0001e5d9 	.word	0x0001e5d9
   1eb34:	0001e66f 	.word	0x0001e66f
   1eb38:	0001e67f 	.word	0x0001e67f

0001eb3c <ble_ll_conn_event_start_cb>:
{
   1eb3c:	b530      	push	{r4, r5, lr}
   1eb3e:	b083      	sub	sp, #12
    connsm = (struct ble_ll_conn_sm *)sch->cb_arg;
   1eb40:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_conn_cur_sm = connsm;
   1eb42:	4b46      	ldr	r3, [pc, #280]	; (1ec5c <ble_ll_conn_event_start_cb+0x120>)
   1eb44:	601c      	str	r4, [r3, #0]
    BLE_LL_ASSERT(connsm);
   1eb46:	2c00      	cmp	r4, #0
   1eb48:	d03f      	beq.n	1ebca <ble_ll_conn_event_start_cb+0x8e>
   1eb4a:	4605      	mov	r5, r0
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   1eb4c:	79a3      	ldrb	r3, [r4, #6]
   1eb4e:	2b00      	cmp	r3, #0
   1eb50:	d045      	beq.n	1ebde <ble_ll_conn_event_start_cb+0xa2>
    ble_ll_whitelist_disable();
   1eb52:	f006 fdfb 	bl	2574c <ble_ll_whitelist_disable>
    ble_ll_state_set(BLE_LL_STATE_CONNECTION);
   1eb56:	2004      	movs	r0, #4
   1eb58:	f7fe fb8c 	bl	1d274 <ble_ll_state_set>
    ble_phy_setchan(connsm->data_chan_index, connsm->access_addr,
   1eb5c:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1eb5e:	6d61      	ldr	r1, [r4, #84]	; 0x54
   1eb60:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   1eb64:	f007 fb28 	bl	261b8 <ble_phy_setchan>
    ble_phy_resolv_list_disable();
   1eb68:	f007 fde4 	bl	26734 <ble_phy_resolv_list_disable>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   1eb6c:	79e3      	ldrb	r3, [r4, #7]
   1eb6e:	2b01      	cmp	r3, #1
   1eb70:	d03f      	beq.n	1ebf2 <ble_ll_conn_event_start_cb+0xb6>
        if (CONN_F_ENCRYPTED(connsm)) {
   1eb72:	78a3      	ldrb	r3, [r4, #2]
   1eb74:	f013 0f02 	tst.w	r3, #2
   1eb78:	d05d      	beq.n	1ec36 <ble_ll_conn_event_start_cb+0xfa>
            ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   1eb7a:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
   1eb7e:	2301      	movs	r3, #1
   1eb80:	9300      	str	r3, [sp, #0]
   1eb82:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   1eb86:	f504 7298 	add.w	r2, r4, #304	; 0x130
   1eb8a:	2100      	movs	r1, #0
   1eb8c:	f007 fa8a 	bl	260a4 <ble_phy_encrypt_enable>
        start = sch->start_time + g_ble_ll_sched_offset_ticks;
   1eb90:	6868      	ldr	r0, [r5, #4]
   1eb92:	4b33      	ldr	r3, [pc, #204]	; (1ec60 <ble_ll_conn_event_start_cb+0x124>)
   1eb94:	781b      	ldrb	r3, [r3, #0]
        rc = ble_phy_rx_set_start_time(start, sch->remainder);
   1eb96:	78a9      	ldrb	r1, [r5, #2]
   1eb98:	4418      	add	r0, r3
   1eb9a:	f007 fcdb 	bl	26554 <ble_phy_rx_set_start_time>
        if (rc) {
   1eb9e:	4605      	mov	r5, r0
   1eba0:	2800      	cmp	r0, #0
   1eba2:	d04b      	beq.n	1ec3c <ble_ll_conn_event_start_cb+0x100>
        ble_ll_event_send(&connsm->conn_ev_end);
   1eba4:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1eba8:	f7fe fb70 	bl	1d28c <ble_ll_event_send>
        ble_phy_disable();
   1ebac:	f007 fb2a 	bl	26204 <ble_phy_disable>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1ebb0:	2000      	movs	r0, #0
   1ebb2:	f7fe fb5f 	bl	1d274 <ble_ll_state_set>
        g_ble_ll_conn_cur_sm = NULL;
   1ebb6:	4b29      	ldr	r3, [pc, #164]	; (1ec5c <ble_ll_conn_event_start_cb+0x120>)
   1ebb8:	2200      	movs	r2, #0
   1ebba:	601a      	str	r2, [r3, #0]
   1ebbc:	2501      	movs	r5, #1
    connsm->last_scheduled = os_cputime_get32();
   1ebbe:	f7fd f8cc 	bl	1bd5a <os_cputime_get32>
   1ebc2:	6660      	str	r0, [r4, #100]	; 0x64
}
   1ebc4:	4628      	mov	r0, r5
   1ebc6:	b003      	add	sp, #12
   1ebc8:	bd30      	pop	{r4, r5, pc}
    BLE_LL_ASSERT(connsm);
   1ebca:	f7e9 faf9 	bl	81c0 <hal_debugger_connected>
   1ebce:	b100      	cbz	r0, 1ebd2 <ble_ll_conn_event_start_cb+0x96>
   1ebd0:	be01      	bkpt	0x0001
   1ebd2:	2300      	movs	r3, #0
   1ebd4:	461a      	mov	r2, r3
   1ebd6:	4619      	mov	r1, r3
   1ebd8:	4618      	mov	r0, r3
   1ebda:	f7ea fef9 	bl	99d0 <__assert_func>
        BLE_LL_ASSERT(0);
   1ebde:	f7e9 faef 	bl	81c0 <hal_debugger_connected>
   1ebe2:	b100      	cbz	r0, 1ebe6 <ble_ll_conn_event_start_cb+0xaa>
   1ebe4:	be01      	bkpt	0x0001
   1ebe6:	2300      	movs	r3, #0
   1ebe8:	461a      	mov	r2, r3
   1ebea:	4619      	mov	r1, r3
   1ebec:	4618      	mov	r0, r3
   1ebee:	f7ea feef 	bl	99d0 <__assert_func>
        start = sch->start_time + g_ble_ll_sched_offset_ticks;
   1ebf2:	6868      	ldr	r0, [r5, #4]
   1ebf4:	4b1a      	ldr	r3, [pc, #104]	; (1ec60 <ble_ll_conn_event_start_cb+0x124>)
   1ebf6:	781b      	ldrb	r3, [r3, #0]
        rc = ble_phy_tx_set_start_time(start, sch->remainder);
   1ebf8:	78a9      	ldrb	r1, [r5, #2]
   1ebfa:	4418      	add	r0, r3
   1ebfc:	f007 fcdc 	bl	265b8 <ble_phy_tx_set_start_time>
        if (!rc) {
   1ec00:	2800      	cmp	r0, #0
   1ec02:	d1cf      	bne.n	1eba4 <ble_ll_conn_event_start_cb+0x68>
            if (CONN_F_ENCRYPTED(connsm)) {
   1ec04:	78a3      	ldrb	r3, [r4, #2]
   1ec06:	f013 0f02 	tst.w	r3, #2
   1ec0a:	d011      	beq.n	1ec30 <ble_ll_conn_event_start_cb+0xf4>
                ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   1ec0c:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   1ec10:	2301      	movs	r3, #1
   1ec12:	9300      	str	r3, [sp, #0]
   1ec14:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   1ec18:	f504 7298 	add.w	r2, r4, #304	; 0x130
   1ec1c:	2100      	movs	r1, #0
   1ec1e:	f007 fa41 	bl	260a4 <ble_phy_encrypt_enable>
            rc = ble_ll_conn_tx_pdu(connsm);
   1ec22:	4620      	mov	r0, r4
   1ec24:	f7ff fd80 	bl	1e728 <ble_ll_conn_tx_pdu>
            if (!rc) {
   1ec28:	4605      	mov	r5, r0
   1ec2a:	2800      	cmp	r0, #0
   1ec2c:	d1ba      	bne.n	1eba4 <ble_ll_conn_event_start_cb+0x68>
   1ec2e:	e7c6      	b.n	1ebbe <ble_ll_conn_event_start_cb+0x82>
                ble_phy_encrypt_disable();
   1ec30:	f007 fa6a 	bl	26108 <ble_phy_encrypt_disable>
   1ec34:	e7f5      	b.n	1ec22 <ble_ll_conn_event_start_cb+0xe6>
            ble_phy_encrypt_disable();
   1ec36:	f007 fa67 	bl	26108 <ble_phy_encrypt_disable>
   1ec3a:	e7a9      	b.n	1eb90 <ble_ll_conn_event_start_cb+0x54>
            connsm->csmflags.cfbit.slave_set_last_anchor = 1;
   1ec3c:	7823      	ldrb	r3, [r4, #0]
   1ec3e:	f043 0320 	orr.w	r3, r3, #32
   1ec42:	7023      	strb	r3, [r4, #0]
            usecs = connsm->slave_cur_tx_win_usecs + 61 +
   1ec44:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
                (2 * connsm->slave_cur_window_widening);
   1ec48:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
            usecs = connsm->slave_cur_tx_win_usecs + 61 +
   1ec4c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
            ble_phy_wfr_enable(BLE_PHY_WFR_ENABLE_RX, 0, usecs);
   1ec50:	323d      	adds	r2, #61	; 0x3d
   1ec52:	2100      	movs	r1, #0
   1ec54:	4608      	mov	r0, r1
   1ec56:	f007 f8db 	bl	25e10 <ble_phy_wfr_enable>
   1ec5a:	e7b0      	b.n	1ebbe <ble_ll_conn_event_start_cb+0x82>
   1ec5c:	200087f0 	.word	0x200087f0
   1ec60:	20008cf0 	.word	0x20008cf0

0001ec64 <ble_ll_conn_master_common_init>:
{
   1ec64:	b510      	push	{r4, lr}
   1ec66:	4604      	mov	r4, r0
    connsm->conn_role = BLE_LL_CONN_ROLE_MASTER;
   1ec68:	2301      	movs	r3, #1
   1ec6a:	71c3      	strb	r3, [r0, #7]
    connsm->tx_win_size = BLE_LL_CONN_TX_WIN_MIN + 1;
   1ec6c:	2302      	movs	r3, #2
   1ec6e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    connsm->tx_win_off = 0;
   1ec72:	2300      	movs	r3, #0
   1ec74:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
    connsm->master_sca = BLE_LL_SCA_ENUM;
   1ec78:	2307      	movs	r3, #7
   1ec7a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
   1ec7e:	f7ec fddb 	bl	b838 <lrand48>
    connsm->hop_inc = (rand() % 12) + 5;
   1ec82:	4a11      	ldr	r2, [pc, #68]	; (1ecc8 <ble_ll_conn_master_common_init+0x64>)
   1ec84:	fb82 3200 	smull	r3, r2, r2, r0
   1ec88:	17c3      	asrs	r3, r0, #31
   1ec8a:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   1ec8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ec92:	009a      	lsls	r2, r3, #2
   1ec94:	1a83      	subs	r3, r0, r2
   1ec96:	3305      	adds	r3, #5
   1ec98:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    connsm->num_used_chans = g_ble_ll_conn_params.num_used_chans;
   1ec9c:	4b0b      	ldr	r3, [pc, #44]	; (1eccc <ble_ll_conn_master_common_init+0x68>)
   1ec9e:	795a      	ldrb	r2, [r3, #5]
   1eca0:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
    memcpy(connsm->chanmap, g_ble_ll_conn_params.master_chan_map,
   1eca4:	6818      	ldr	r0, [r3, #0]
   1eca6:	6220      	str	r0, [r4, #32]
   1eca8:	791b      	ldrb	r3, [r3, #4]
   1ecaa:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    connsm->access_addr = ble_ll_utils_calc_access_addr();
   1ecae:	f006 fbed 	bl	2548c <ble_ll_utils_calc_access_addr>
   1ecb2:	6560      	str	r0, [r4, #84]	; 0x54
   1ecb4:	f7ec fdc0 	bl	b838 <lrand48>
    connsm->crcinit = rand() & 0xffffff;
   1ecb8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1ecbc:	65a0      	str	r0, [r4, #88]	; 0x58
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   1ecbe:	4b04      	ldr	r3, [pc, #16]	; (1ecd0 <ble_ll_conn_master_common_init+0x6c>)
   1ecc0:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   1ecc4:	bd10      	pop	{r4, pc}
   1ecc6:	bf00      	nop
   1ecc8:	2aaaaaab 	.word	0x2aaaaaab
   1eccc:	200087fc 	.word	0x200087fc
   1ecd0:	0001eb3d 	.word	0x0001eb3d

0001ecd4 <ble_ll_conn_calc_itvl_ticks>:
{
   1ecd4:	b570      	push	{r4, r5, r6, lr}
   1ecd6:	4605      	mov	r5, r0
    usecs = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   1ecd8:	f8b0 0068 	ldrh.w	r0, [r0, #104]	; 0x68
   1ecdc:	f240 44e2 	movw	r4, #1250	; 0x4e2
   1ece0:	fb04 f400 	mul.w	r4, r4, r0
    ticks = os_cputime_usecs_to_ticks(usecs);
   1ece4:	4620      	mov	r0, r4
   1ece6:	f7fd f84f 	bl	1bd88 <os_cputime_usecs_to_ticks>
   1ecea:	4606      	mov	r6, r0
                                        os_cputime_ticks_to_usecs(ticks));
   1ecec:	f7fd f854 	bl	1bd98 <os_cputime_ticks_to_usecs>
    connsm->conn_itvl_usecs = (uint8_t)(usecs -
   1ecf0:	1a20      	subs	r0, r4, r0
   1ecf2:	b2c0      	uxtb	r0, r0
   1ecf4:	f885 0079 	strb.w	r0, [r5, #121]	; 0x79
    if (connsm->conn_itvl_usecs == 31) {
   1ecf8:	281f      	cmp	r0, #31
   1ecfa:	d001      	beq.n	1ed00 <ble_ll_conn_calc_itvl_ticks+0x2c>
    connsm->conn_itvl_ticks = ticks;
   1ecfc:	67ee      	str	r6, [r5, #124]	; 0x7c
}
   1ecfe:	bd70      	pop	{r4, r5, r6, pc}
        connsm->conn_itvl_usecs = 0;
   1ed00:	2300      	movs	r3, #0
   1ed02:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
        ++ticks;
   1ed06:	3601      	adds	r6, #1
   1ed08:	e7f8      	b.n	1ecfc <ble_ll_conn_calc_itvl_ticks+0x28>

0001ed0a <ble_ll_conn_can_send_next_pdu>:
{
   1ed0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   1ed0c:	79c3      	ldrb	r3, [r0, #7]
   1ed0e:	2b01      	cmp	r3, #1
   1ed10:	d001      	beq.n	1ed16 <ble_ll_conn_can_send_next_pdu+0xc>
    rc = 1;
   1ed12:	2001      	movs	r0, #1
}
   1ed14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ed16:	4616      	mov	r6, r2
   1ed18:	460d      	mov	r5, r1
   1ed1a:	4604      	mov	r4, r0
        next_sched_time = ble_ll_conn_get_next_sched_time(connsm);
   1ed1c:	f7ff fce4 	bl	1e6e8 <ble_ll_conn_get_next_sched_time>
   1ed20:	4607      	mov	r7, r0
        txpdu = connsm->cur_tx_pdu;
   1ed22:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
        if (!txpdu) {
   1ed26:	b1ca      	cbz	r2, 1ed5c <ble_ll_conn_can_send_next_pdu+0x52>
            pkthdr = OS_MBUF_PKTHDR(txpdu);
   1ed28:	f102 0310 	add.w	r3, r2, #16
        if (txpdu) {
   1ed2c:	b1ea      	cbz	r2, 1ed6a <ble_ll_conn_can_send_next_pdu+0x60>
            rem_bytes = pkthdr->omp_len - txhdr->txinfo.offset;
   1ed2e:	781b      	ldrb	r3, [r3, #0]
   1ed30:	7e52      	ldrb	r2, [r2, #25]
   1ed32:	1a9b      	subs	r3, r3, r2
   1ed34:	b2db      	uxtb	r3, r3
            if (rem_bytes > connsm->eff_max_tx_octets) {
   1ed36:	7ba0      	ldrb	r0, [r4, #14]
   1ed38:	4298      	cmp	r0, r3
   1ed3a:	d300      	bcc.n	1ed3e <ble_ll_conn_can_send_next_pdu+0x34>
            rem_bytes = pkthdr->omp_len - txhdr->txinfo.offset;
   1ed3c:	4618      	mov	r0, r3
            usecs = ble_ll_pdu_tx_time_get(rem_bytes, tx_phy_mode);
   1ed3e:	2101      	movs	r1, #1
   1ed40:	f7fe faec 	bl	1d31c <ble_ll_pdu_tx_time_get>
        usecs += (BLE_LL_IFS * 2) + connsm->eff_max_rx_time;
   1ed44:	8b64      	ldrh	r4, [r4, #26]
   1ed46:	4420      	add	r0, r4
   1ed48:	f500 7496 	add.w	r4, r0, #300	; 0x12c
        allowed_usecs = os_cputime_ticks_to_usecs(ticks);
   1ed4c:	1b78      	subs	r0, r7, r5
   1ed4e:	f7fd f823 	bl	1bd98 <os_cputime_ticks_to_usecs>
        if ((usecs + add_usecs) >= allowed_usecs) {
   1ed52:	4434      	add	r4, r6
   1ed54:	4284      	cmp	r4, r0
   1ed56:	d30d      	bcc.n	1ed74 <ble_ll_conn_can_send_next_pdu+0x6a>
            rc = 0;
   1ed58:	2000      	movs	r0, #0
    return rc;
   1ed5a:	e7db      	b.n	1ed14 <ble_ll_conn_can_send_next_pdu+0xa>
            pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   1ed5c:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
            if (pkthdr) {
   1ed60:	2b00      	cmp	r3, #0
   1ed62:	d0e3      	beq.n	1ed2c <ble_ll_conn_can_send_next_pdu+0x22>
                txpdu = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   1ed64:	f1a3 0210 	sub.w	r2, r3, #16
   1ed68:	e7e0      	b.n	1ed2c <ble_ll_conn_can_send_next_pdu+0x22>
            usecs = ble_ll_pdu_tx_time_get(0, tx_phy_mode);
   1ed6a:	2101      	movs	r1, #1
   1ed6c:	2000      	movs	r0, #0
   1ed6e:	f7fe fad5 	bl	1d31c <ble_ll_pdu_tx_time_get>
   1ed72:	e7e7      	b.n	1ed44 <ble_ll_conn_can_send_next_pdu+0x3a>
    rc = 1;
   1ed74:	2001      	movs	r0, #1
   1ed76:	e7cd      	b.n	1ed14 <ble_ll_conn_can_send_next_pdu+0xa>

0001ed78 <ble_ll_conn_chk_csm_flags>:
{
   1ed78:	b510      	push	{r4, lr}
   1ed7a:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.send_ltk_req) {
   1ed7c:	7883      	ldrb	r3, [r0, #2]
   1ed7e:	f013 0f01 	tst.w	r3, #1
   1ed82:	d114      	bne.n	1edae <ble_ll_conn_chk_csm_flags+0x36>
    if (connsm->csmflags.cfbit.host_expects_upd_event) {
   1ed84:	7863      	ldrb	r3, [r4, #1]
   1ed86:	f013 0f02 	tst.w	r3, #2
   1ed8a:	d00f      	beq.n	1edac <ble_ll_conn_chk_csm_flags+0x34>
        if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE)) {
   1ed8c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1ed90:	f013 0f01 	tst.w	r3, #1
   1ed94:	d119      	bne.n	1edca <ble_ll_conn_chk_csm_flags+0x52>
            if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   1ed96:	f013 0f40 	tst.w	r3, #64	; 0x40
   1ed9a:	d11c      	bne.n	1edd6 <ble_ll_conn_chk_csm_flags+0x5e>
        update_status = BLE_ERR_SUCCESS;
   1ed9c:	2100      	movs	r1, #0
        ble_ll_hci_ev_conn_update(connsm, update_status);
   1ed9e:	4620      	mov	r0, r4
   1eda0:	f003 ffa1 	bl	22ce6 <ble_ll_hci_ev_conn_update>
        connsm->csmflags.cfbit.host_expects_upd_event = 0;
   1eda4:	7863      	ldrb	r3, [r4, #1]
   1eda6:	f36f 0341 	bfc	r3, #1, #1
   1edaa:	7063      	strb	r3, [r4, #1]
}
   1edac:	bd10      	pop	{r4, pc}
        if (ble_ll_hci_ev_ltk_req(connsm)) {
   1edae:	f003 fff5 	bl	22d9c <ble_ll_hci_ev_ltk_req>
   1edb2:	b920      	cbnz	r0, 1edbe <ble_ll_conn_chk_csm_flags+0x46>
        connsm->csmflags.cfbit.send_ltk_req = 0;
   1edb4:	78a3      	ldrb	r3, [r4, #2]
   1edb6:	f36f 0300 	bfc	r3, #0, #1
   1edba:	70a3      	strb	r3, [r4, #2]
   1edbc:	e7e2      	b.n	1ed84 <ble_ll_conn_chk_csm_flags+0xc>
            ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   1edbe:	2206      	movs	r2, #6
   1edc0:	2103      	movs	r1, #3
   1edc2:	4620      	mov	r0, r4
   1edc4:	f003 fa02 	bl	221cc <ble_ll_ctrl_reject_ind_send>
   1edc8:	e7f4      	b.n	1edb4 <ble_ll_conn_chk_csm_flags+0x3c>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE);
   1edca:	2100      	movs	r1, #0
   1edcc:	4620      	mov	r0, r4
   1edce:	f002 fed5 	bl	21b7c <ble_ll_ctrl_proc_stop>
        update_status = BLE_ERR_SUCCESS;
   1edd2:	2100      	movs	r1, #0
   1edd4:	e7e3      	b.n	1ed9e <ble_ll_conn_chk_csm_flags+0x26>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   1edd6:	2106      	movs	r1, #6
   1edd8:	4620      	mov	r0, r4
   1edda:	f002 fecf 	bl	21b7c <ble_ll_ctrl_proc_stop>
                update_status = connsm->reject_reason;
   1edde:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
   1ede2:	e7dc      	b.n	1ed9e <ble_ll_conn_chk_csm_flags+0x26>

0001ede4 <ble_ll_conn_connect_ind_tx_pducb>:

static uint8_t
ble_ll_conn_connect_ind_tx_pducb(uint8_t *dptr, void *pducb_arg, uint8_t *hdr_byte)
{
   1ede4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ede6:	4604      	mov	r4, r0
   1ede8:	460d      	mov	r5, r1
   1edea:	4617      	mov	r7, r2
    connsm = pducb_arg;
    /*
     * pdu_data was prepared just before starting TX and is expected to be
     * still valid here
     */
    pdu_data = ble_ll_scan_get_pdu_data();
   1edec:	f005 fe72 	bl	24ad4 <ble_ll_scan_get_pdu_data>
   1edf0:	4606      	mov	r6, r0

    memcpy(dptr, pdu_data->inita, BLE_DEV_ADDR_LEN);
   1edf2:	4603      	mov	r3, r0
   1edf4:	f853 2f01 	ldr.w	r2, [r3, #1]!
   1edf8:	6022      	str	r2, [r4, #0]
   1edfa:	889b      	ldrh	r3, [r3, #4]
   1edfc:	80a3      	strh	r3, [r4, #4]
    memcpy(dptr + BLE_DEV_ADDR_LEN, pdu_data->adva, BLE_DEV_ADDR_LEN);
   1edfe:	4603      	mov	r3, r0
   1ee00:	f853 2f07 	ldr.w	r2, [r3, #7]!
   1ee04:	f8c4 2006 	str.w	r2, [r4, #6]
   1ee08:	889b      	ldrh	r3, [r3, #4]
   1ee0a:	8163      	strh	r3, [r4, #10]

    dptr += 2 * BLE_DEV_ADDR_LEN;

    put_le32(dptr, connsm->access_addr);
   1ee0c:	6d69      	ldr	r1, [r5, #84]	; 0x54
   1ee0e:	f104 000c 	add.w	r0, r4, #12
   1ee12:	f7fc feef 	bl	1bbf4 <put_le32>
    dptr[4] = (uint8_t)connsm->crcinit;
   1ee16:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
   1ee1a:	7423      	strb	r3, [r4, #16]
    dptr[5] = (uint8_t)(connsm->crcinit >> 8);
   1ee1c:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
   1ee20:	7463      	strb	r3, [r4, #17]
    dptr[6] = (uint8_t)(connsm->crcinit >> 16);
   1ee22:	f895 305a 	ldrb.w	r3, [r5, #90]	; 0x5a
   1ee26:	74a3      	strb	r3, [r4, #18]
    dptr[7] = connsm->tx_win_size;
   1ee28:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1ee2c:	74e3      	strb	r3, [r4, #19]
    put_le16(dptr + 8, connsm->tx_win_off);
   1ee2e:	f8b5 1072 	ldrh.w	r1, [r5, #114]	; 0x72
   1ee32:	f104 0014 	add.w	r0, r4, #20
   1ee36:	f7fc fed9 	bl	1bbec <put_le16>
    put_le16(dptr + 10, connsm->conn_itvl);
   1ee3a:	f8b5 1068 	ldrh.w	r1, [r5, #104]	; 0x68
   1ee3e:	f104 0016 	add.w	r0, r4, #22
   1ee42:	f7fc fed3 	bl	1bbec <put_le16>
    put_le16(dptr + 12, connsm->slave_latency);
   1ee46:	f8b5 106a 	ldrh.w	r1, [r5, #106]	; 0x6a
   1ee4a:	f104 0018 	add.w	r0, r4, #24
   1ee4e:	f7fc fecd 	bl	1bbec <put_le16>
    put_le16(dptr + 14, connsm->supervision_tmo);
   1ee52:	f8b5 106c 	ldrh.w	r1, [r5, #108]	; 0x6c
   1ee56:	f104 001a 	add.w	r0, r4, #26
   1ee5a:	f7fc fec7 	bl	1bbec <put_le16>
    memcpy(dptr + 16, &connsm->chanmap, BLE_LL_CONN_CHMAP_LEN);
   1ee5e:	462b      	mov	r3, r5
   1ee60:	f853 2f20 	ldr.w	r2, [r3, #32]!
   1ee64:	61e2      	str	r2, [r4, #28]
   1ee66:	791b      	ldrb	r3, [r3, #4]
   1ee68:	f884 3020 	strb.w	r3, [r4, #32]
    dptr[21] = connsm->hop_inc | (connsm->master_sca << 5);
   1ee6c:	f995 302e 	ldrsb.w	r3, [r5, #46]	; 0x2e
   1ee70:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   1ee74:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   1ee78:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    *hdr_byte = pdu_data->hdr_byte;
   1ee7c:	7833      	ldrb	r3, [r6, #0]
   1ee7e:	703b      	strb	r3, [r7, #0]

    return 34;
}
   1ee80:	2022      	movs	r0, #34	; 0x22
   1ee82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ee84 <ble_ll_conn_is_peer_adv>:
{
   1ee84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    connsm = g_ble_ll_conn_create_sm;
   1ee86:	4b3f      	ldr	r3, [pc, #252]	; (1ef84 <ble_ll_conn_is_peer_adv+0x100>)
   1ee88:	681d      	ldr	r5, [r3, #0]
    if (!connsm) {
   1ee8a:	2d00      	cmp	r5, #0
   1ee8c:	d06d      	beq.n	1ef6a <ble_ll_conn_is_peer_adv+0xe6>
   1ee8e:	4614      	mov	r4, r2
   1ee90:	460f      	mov	r7, r1
   1ee92:	4606      	mov	r6, r0
    switch (connsm->peer_addr_type) {
   1ee94:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   1ee98:	2b03      	cmp	r3, #3
   1ee9a:	d868      	bhi.n	1ef6e <ble_ll_conn_is_peer_adv+0xea>
   1ee9c:	e8df f003 	tbb	[pc, r3]
   1eea0:	51420202 	.word	0x51420202
        if (ble_ll_addr_is_id(adva, addr_type)) {
   1eea4:	4601      	mov	r1, r0
   1eea6:	4638      	mov	r0, r7
   1eea8:	f7fe f826 	bl	1cef8 <ble_ll_addr_is_id>
   1eeac:	b9d0      	cbnz	r0, 1eee4 <ble_ll_conn_is_peer_adv+0x60>
        if ((index >= 0) &&
   1eeae:	2c00      	cmp	r4, #0
   1eeb0:	db32      	blt.n	1ef18 <ble_ll_conn_is_peer_adv+0x94>
                (g_ble_ll_resolv_list[index].rl_addr_type == connsm->peer_addr_type)) {
   1eeb2:	2336      	movs	r3, #54	; 0x36
   1eeb4:	fb03 f304 	mul.w	r3, r3, r4
   1eeb8:	4a33      	ldr	r2, [pc, #204]	; (1ef88 <ble_ll_conn_is_peer_adv+0x104>)
   1eeba:	5cd2      	ldrb	r2, [r2, r3]
   1eebc:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
        if ((index >= 0) &&
   1eec0:	429a      	cmp	r2, r3
   1eec2:	d021      	beq.n	1ef08 <ble_ll_conn_is_peer_adv+0x84>
    uint8_t *peer_addr = NULL;
   1eec4:	2000      	movs	r0, #0
        if ((connsm->peer_addr_type == addr_type) && !peer_addr) {
   1eec6:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   1eeca:	42b3      	cmp	r3, r6
   1eecc:	d026      	beq.n	1ef1c <ble_ll_conn_is_peer_adv+0x98>
    if (peer_addr) {
   1eece:	2800      	cmp	r0, #0
   1eed0:	d055      	beq.n	1ef7e <ble_ll_conn_is_peer_adv+0xfa>
        if (!memcmp(peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN)) {
   1eed2:	2206      	movs	r2, #6
   1eed4:	f105 0193 	add.w	r1, r5, #147	; 0x93
   1eed8:	f7ec fcb6 	bl	b848 <memcmp>
   1eedc:	2800      	cmp	r0, #0
   1eede:	d142      	bne.n	1ef66 <ble_ll_conn_is_peer_adv+0xe2>
            rc = 1;
   1eee0:	2001      	movs	r0, #1
   1eee2:	e043      	b.n	1ef6c <ble_ll_conn_is_peer_adv+0xe8>
            if (ble_ll_resolv_enabled()) {
   1eee4:	f004 fbc6 	bl	23674 <ble_ll_resolv_enabled>
   1eee8:	2800      	cmp	r0, #0
   1eeea:	d0e0      	beq.n	1eeae <ble_ll_conn_is_peer_adv+0x2a>
                rl = ble_ll_resolv_list_find(adva, addr_type);
   1eeec:	4631      	mov	r1, r6
   1eeee:	4638      	mov	r0, r7
   1eef0:	f004 f96a 	bl	231c8 <ble_ll_resolv_list_find>
                if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1eef4:	2800      	cmp	r0, #0
   1eef6:	d0da      	beq.n	1eeae <ble_ll_conn_is_peer_adv+0x2a>
   1eef8:	7842      	ldrb	r2, [r0, #1]
   1eefa:	2a00      	cmp	r2, #0
   1eefc:	d1d7      	bne.n	1eeae <ble_ll_conn_is_peer_adv+0x2a>
                    rl->rl_has_peer) {
   1eefe:	78c3      	ldrb	r3, [r0, #3]
                if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1ef00:	2b00      	cmp	r3, #0
   1ef02:	d0d4      	beq.n	1eeae <ble_ll_conn_is_peer_adv+0x2a>
                    return 0;
   1ef04:	2000      	movs	r0, #0
   1ef06:	e031      	b.n	1ef6c <ble_ll_conn_is_peer_adv+0xe8>
            peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   1ef08:	2036      	movs	r0, #54	; 0x36
   1ef0a:	fb00 f004 	mul.w	r0, r0, r4
   1ef0e:	3020      	adds	r0, #32
   1ef10:	4b1d      	ldr	r3, [pc, #116]	; (1ef88 <ble_ll_conn_is_peer_adv+0x104>)
   1ef12:	4418      	add	r0, r3
   1ef14:	3004      	adds	r0, #4
   1ef16:	e7d6      	b.n	1eec6 <ble_ll_conn_is_peer_adv+0x42>
    uint8_t *peer_addr = NULL;
   1ef18:	2000      	movs	r0, #0
   1ef1a:	e7d4      	b.n	1eec6 <ble_ll_conn_is_peer_adv+0x42>
        if ((connsm->peer_addr_type == addr_type) && !peer_addr) {
   1ef1c:	2800      	cmp	r0, #0
   1ef1e:	d1d6      	bne.n	1eece <ble_ll_conn_is_peer_adv+0x4a>
            peer_addr = adva;
   1ef20:	4638      	mov	r0, r7
   1ef22:	e7d4      	b.n	1eece <ble_ll_conn_is_peer_adv+0x4a>
        if ((index < 0) ||
   1ef24:	2c00      	cmp	r4, #0
   1ef26:	db24      	blt.n	1ef72 <ble_ll_conn_is_peer_adv+0xee>
            (g_ble_ll_resolv_list[index].rl_addr_type != 0)) {
   1ef28:	2336      	movs	r3, #54	; 0x36
   1ef2a:	fb03 f304 	mul.w	r3, r3, r4
   1ef2e:	4a16      	ldr	r2, [pc, #88]	; (1ef88 <ble_ll_conn_is_peer_adv+0x104>)
   1ef30:	5cd3      	ldrb	r3, [r2, r3]
        if ((index < 0) ||
   1ef32:	bb03      	cbnz	r3, 1ef76 <ble_ll_conn_is_peer_adv+0xf2>
        peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   1ef34:	2036      	movs	r0, #54	; 0x36
   1ef36:	fb00 f004 	mul.w	r0, r0, r4
   1ef3a:	3020      	adds	r0, #32
   1ef3c:	4410      	add	r0, r2
   1ef3e:	3004      	adds	r0, #4
        break;
   1ef40:	e7c5      	b.n	1eece <ble_ll_conn_is_peer_adv+0x4a>
        if ((index < 0) ||
   1ef42:	2c00      	cmp	r4, #0
   1ef44:	db19      	blt.n	1ef7a <ble_ll_conn_is_peer_adv+0xf6>
            (g_ble_ll_resolv_list[index].rl_addr_type != 1)) {
   1ef46:	2336      	movs	r3, #54	; 0x36
   1ef48:	fb03 f304 	mul.w	r3, r3, r4
   1ef4c:	4a0e      	ldr	r2, [pc, #56]	; (1ef88 <ble_ll_conn_is_peer_adv+0x104>)
   1ef4e:	5cd3      	ldrb	r3, [r2, r3]
        if ((index < 0) ||
   1ef50:	2b01      	cmp	r3, #1
   1ef52:	d001      	beq.n	1ef58 <ble_ll_conn_is_peer_adv+0xd4>
            return 0;
   1ef54:	2000      	movs	r0, #0
   1ef56:	e009      	b.n	1ef6c <ble_ll_conn_is_peer_adv+0xe8>
        peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   1ef58:	2036      	movs	r0, #54	; 0x36
   1ef5a:	fb00 f004 	mul.w	r0, r0, r4
   1ef5e:	3020      	adds	r0, #32
   1ef60:	4410      	add	r0, r2
   1ef62:	3004      	adds	r0, #4
        break;
   1ef64:	e7b3      	b.n	1eece <ble_ll_conn_is_peer_adv+0x4a>
    rc = 0;
   1ef66:	2000      	movs	r0, #0
   1ef68:	e000      	b.n	1ef6c <ble_ll_conn_is_peer_adv+0xe8>
        return 0;
   1ef6a:	2000      	movs	r0, #0
}
   1ef6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rc = 0;
   1ef6e:	2000      	movs	r0, #0
   1ef70:	e7fc      	b.n	1ef6c <ble_ll_conn_is_peer_adv+0xe8>
            return 0;
   1ef72:	2000      	movs	r0, #0
   1ef74:	e7fa      	b.n	1ef6c <ble_ll_conn_is_peer_adv+0xe8>
   1ef76:	2000      	movs	r0, #0
   1ef78:	e7f8      	b.n	1ef6c <ble_ll_conn_is_peer_adv+0xe8>
            return 0;
   1ef7a:	2000      	movs	r0, #0
   1ef7c:	e7f6      	b.n	1ef6c <ble_ll_conn_is_peer_adv+0xe8>
    rc = 0;
   1ef7e:	2000      	movs	r0, #0
   1ef80:	e7f4      	b.n	1ef6c <ble_ll_conn_is_peer_adv+0xe8>
   1ef82:	bf00      	nop
   1ef84:	200087ec 	.word	0x200087ec
   1ef88:	20008a40 	.word	0x20008a40

0001ef8c <ble_ll_conn_connect_ind_prepare>:
{
   1ef8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ef90:	460c      	mov	r4, r1
   1ef92:	461d      	mov	r5, r3
   1ef94:	f89d 1020 	ldrb.w	r1, [sp, #32]
   1ef98:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if (adva_type) {
   1ef9a:	4690      	mov	r8, r2
   1ef9c:	b99a      	cbnz	r2, 1efc6 <ble_ll_conn_connect_ind_prepare+0x3a>
    hdr = BLE_ADV_PDU_TYPE_CONNECT_IND;
   1ef9e:	2605      	movs	r6, #5
    if (inita) {
   1efa0:	b19b      	cbz	r3, 1efca <ble_ll_conn_connect_ind_prepare+0x3e>
        memcpy(pdu_data->inita, inita, BLE_DEV_ADDR_LEN);
   1efa2:	681a      	ldr	r2, [r3, #0]
   1efa4:	f8c4 2001 	str.w	r2, [r4, #1]
   1efa8:	889b      	ldrh	r3, [r3, #4]
   1efaa:	f8a4 3005 	strh.w	r3, [r4, #5]
        if (inita_type) {
   1efae:	b109      	cbz	r1, 1efb4 <ble_ll_conn_connect_ind_prepare+0x28>
            hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1efb0:	f046 0640 	orr.w	r6, r6, #64	; 0x40
    memcpy(pdu_data->adva, adva, BLE_DEV_ADDR_LEN);
   1efb4:	682b      	ldr	r3, [r5, #0]
   1efb6:	f8c4 3007 	str.w	r3, [r4, #7]
   1efba:	88ab      	ldrh	r3, [r5, #4]
   1efbc:	f8a4 300b 	strh.w	r3, [r4, #11]
    pdu_data->hdr_byte = hdr;
   1efc0:	7026      	strb	r6, [r4, #0]
}
   1efc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hdr |= BLE_ADV_PDU_HDR_RXADD_MASK;
   1efc6:	2685      	movs	r6, #133	; 0x85
   1efc8:	e7ea      	b.n	1efa0 <ble_ll_conn_connect_ind_prepare+0x14>
        connsm = g_ble_ll_conn_create_sm;
   1efca:	4b1c      	ldr	r3, [pc, #112]	; (1f03c <ble_ll_conn_connect_ind_prepare+0xb0>)
   1efcc:	f8d3 9000 	ldr.w	r9, [r3]
        if ((connsm->own_addr_type & 1) == 0) {
   1efd0:	f899 3091 	ldrb.w	r3, [r9, #145]	; 0x91
   1efd4:	f013 0f01 	tst.w	r3, #1
   1efd8:	d010      	beq.n	1effc <ble_ll_conn_connect_ind_prepare+0x70>
            hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1efda:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            addr = g_random_addr;
   1efde:	4f18      	ldr	r7, [pc, #96]	; (1f040 <ble_ll_conn_connect_ind_prepare+0xb4>)
        if (connsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1efe0:	2b01      	cmp	r3, #1
   1efe2:	d80d      	bhi.n	1f000 <ble_ll_conn_connect_ind_prepare+0x74>
        if (addr) {
   1efe4:	2f00      	cmp	r7, #0
   1efe6:	d0e5      	beq.n	1efb4 <ble_ll_conn_connect_ind_prepare+0x28>
            memcpy(pdu_data->inita, addr, BLE_DEV_ADDR_LEN);
   1efe8:	683b      	ldr	r3, [r7, #0]
   1efea:	f8c4 3001 	str.w	r3, [r4, #1]
   1efee:	88bb      	ldrh	r3, [r7, #4]
   1eff0:	f8a4 3005 	strh.w	r3, [r4, #5]
            connsm->inita_identity_used = 1;
   1eff4:	2301      	movs	r3, #1
   1eff6:	f889 3090 	strb.w	r3, [r9, #144]	; 0x90
   1effa:	e7db      	b.n	1efb4 <ble_ll_conn_connect_ind_prepare+0x28>
            addr = g_dev_addr;
   1effc:	4f11      	ldr	r7, [pc, #68]	; (1f044 <ble_ll_conn_connect_ind_prepare+0xb8>)
   1effe:	e7ef      	b.n	1efe0 <ble_ll_conn_connect_ind_prepare+0x54>
            is_rpa = ble_ll_is_rpa(adva, adva_type);
   1f000:	4641      	mov	r1, r8
   1f002:	4628      	mov	r0, r5
   1f004:	f7fd ff6c 	bl	1cee0 <ble_ll_is_rpa>
            if (is_rpa) {
   1f008:	b198      	cbz	r0, 1f032 <ble_ll_conn_connect_ind_prepare+0xa6>
                if (rpa_index >= 0) {
   1f00a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f00c:	2b00      	cmp	r3, #0
   1f00e:	dbe9      	blt.n	1efe4 <ble_ll_conn_connect_ind_prepare+0x58>
                    rl = &g_ble_ll_resolv_list[rpa_index];
   1f010:	2336      	movs	r3, #54	; 0x36
   1f012:	480d      	ldr	r0, [pc, #52]	; (1f048 <ble_ll_conn_connect_ind_prepare+0xbc>)
   1f014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f016:	fb03 0002 	mla	r0, r3, r2, r0
            if (rl && rl->rl_has_local) {
   1f01a:	2800      	cmp	r0, #0
   1f01c:	d0e2      	beq.n	1efe4 <ble_ll_conn_connect_ind_prepare+0x58>
   1f01e:	7883      	ldrb	r3, [r0, #2]
   1f020:	2b00      	cmp	r3, #0
   1f022:	d0df      	beq.n	1efe4 <ble_ll_conn_connect_ind_prepare+0x58>
                hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1f024:	f046 0640 	orr.w	r6, r6, #64	; 0x40
                ble_ll_resolv_get_priv_addr(rl, 1, pdu_data->inita);
   1f028:	1c62      	adds	r2, r4, #1
   1f02a:	2101      	movs	r1, #1
   1f02c:	f004 fa66 	bl	234fc <ble_ll_resolv_get_priv_addr>
   1f030:	e7c0      	b.n	1efb4 <ble_ll_conn_connect_ind_prepare+0x28>
                 rl = ble_ll_resolv_list_find(adva, adva_type);
   1f032:	4641      	mov	r1, r8
   1f034:	4628      	mov	r0, r5
   1f036:	f004 f8c7 	bl	231c8 <ble_ll_resolv_list_find>
   1f03a:	e7ee      	b.n	1f01a <ble_ll_conn_connect_ind_prepare+0x8e>
   1f03c:	200087ec 	.word	0x200087ec
   1f040:	20008758 	.word	0x20008758
   1f044:	20008750 	.word	0x20008750
   1f048:	20008a40 	.word	0x20008a40

0001f04c <ble_ll_conn_is_lru>:
    if ((int32_t)(s1->last_scheduled - s2->last_scheduled) < 0) {
   1f04c:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1f04e:	6e4a      	ldr	r2, [r1, #100]	; 0x64
   1f050:	1a9b      	subs	r3, r3, r2
   1f052:	2b00      	cmp	r3, #0
   1f054:	db01      	blt.n	1f05a <ble_ll_conn_is_lru+0xe>
        rc = 0;
   1f056:	2000      	movs	r0, #0
}
   1f058:	4770      	bx	lr
        rc = 1;
   1f05a:	2001      	movs	r0, #1
   1f05c:	4770      	bx	lr
	...

0001f060 <ble_ll_conn_get_ce_end_time>:
{
   1f060:	b508      	push	{r3, lr}
    if (g_ble_ll_conn_cur_sm) {
   1f062:	4b04      	ldr	r3, [pc, #16]	; (1f074 <ble_ll_conn_get_ce_end_time+0x14>)
   1f064:	681b      	ldr	r3, [r3, #0]
   1f066:	b10b      	cbz	r3, 1f06c <ble_ll_conn_get_ce_end_time+0xc>
        ce_end_time = g_ble_ll_conn_cur_sm->ce_end_time;
   1f068:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
}
   1f06a:	bd08      	pop	{r3, pc}
        ce_end_time = os_cputime_get32();
   1f06c:	f7fc fe75 	bl	1bd5a <os_cputime_get32>
    return ce_end_time;
   1f070:	e7fb      	b.n	1f06a <ble_ll_conn_get_ce_end_time+0xa>
   1f072:	bf00      	nop
   1f074:	200087f0 	.word	0x200087f0

0001f078 <ble_ll_conn_find_active_conn>:
    if ((handle != 0) && (handle <= MYNEWT_VAL(BLE_MAX_CONNECTIONS))) {
   1f078:	2801      	cmp	r0, #1
   1f07a:	d108      	bne.n	1f08e <ble_ll_conn_find_active_conn+0x16>
        connsm = &g_ble_ll_conn_sm[handle - 1];
   1f07c:	3801      	subs	r0, #1
   1f07e:	4b06      	ldr	r3, [pc, #24]	; (1f098 <ble_ll_conn_find_active_conn+0x20>)
   1f080:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1f084:	fb02 3000 	mla	r0, r2, r0, r3
        if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   1f088:	7983      	ldrb	r3, [r0, #6]
   1f08a:	b113      	cbz	r3, 1f092 <ble_ll_conn_find_active_conn+0x1a>
}
   1f08c:	4770      	bx	lr
    connsm = NULL;
   1f08e:	2000      	movs	r0, #0
   1f090:	4770      	bx	lr
            connsm = NULL;
   1f092:	2000      	movs	r0, #0
    return connsm;
   1f094:	e7fa      	b.n	1f08c <ble_ll_conn_find_active_conn+0x14>
   1f096:	bf00      	nop
   1f098:	20008818 	.word	0x20008818

0001f09c <ble_ll_conn_sm_get>:
    connsm = STAILQ_FIRST(&g_ble_ll_conn_free_list);
   1f09c:	4b05      	ldr	r3, [pc, #20]	; (1f0b4 <ble_ll_conn_sm_get+0x18>)
   1f09e:	6818      	ldr	r0, [r3, #0]
    if (connsm) {
   1f0a0:	b120      	cbz	r0, 1f0ac <ble_ll_conn_sm_get+0x10>
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   1f0a2:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1f0a6:	4a03      	ldr	r2, [pc, #12]	; (1f0b4 <ble_ll_conn_sm_get+0x18>)
   1f0a8:	6013      	str	r3, [r2, #0]
   1f0aa:	b103      	cbz	r3, 1f0ae <ble_ll_conn_sm_get+0x12>
}
   1f0ac:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   1f0ae:	4613      	mov	r3, r2
   1f0b0:	605a      	str	r2, [r3, #4]
    return connsm;
   1f0b2:	e7fb      	b.n	1f0ac <ble_ll_conn_sm_get+0x10>
   1f0b4:	200087f4 	.word	0x200087f4

0001f0b8 <ble_ll_conn_calc_dci>:
{
   1f0b8:	b538      	push	{r3, r4, r5, lr}
   1f0ba:	4605      	mov	r5, r0
   1f0bc:	460c      	mov	r4, r1
    index = conn->data_chan_index;
   1f0be:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
    while (latency > 0) {
   1f0c2:	e004      	b.n	1f0ce <ble_ll_conn_calc_dci+0x16>
        index = ble_ll_conn_calc_dci_csa1(conn);
   1f0c4:	4628      	mov	r0, r5
   1f0c6:	f7ff fa4a 	bl	1e55e <ble_ll_conn_calc_dci_csa1>
        latency--;
   1f0ca:	3c01      	subs	r4, #1
   1f0cc:	b2a4      	uxth	r4, r4
    while (latency > 0) {
   1f0ce:	2c00      	cmp	r4, #0
   1f0d0:	d1f8      	bne.n	1f0c4 <ble_ll_conn_calc_dci+0xc>
}
   1f0d2:	bd38      	pop	{r3, r4, r5, pc}

0001f0d4 <ble_ll_conn_next_event>:
{
   1f0d4:	b570      	push	{r4, r5, r6, lr}
   1f0d6:	4604      	mov	r4, r0
    ble_ll_conn_chk_csm_flags(connsm);
   1f0d8:	f7ff fe4e 	bl	1ed78 <ble_ll_conn_chk_csm_flags>
    if (connsm->disconnect_reason && !CONN_F_TERMINATE_STARTED(connsm)) {
   1f0dc:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1f0e0:	b11b      	cbz	r3, 1f0ea <ble_ll_conn_next_event+0x16>
   1f0e2:	f994 3000 	ldrsb.w	r3, [r4]
   1f0e6:	2b00      	cmp	r3, #0
   1f0e8:	da59      	bge.n	1f19e <ble_ll_conn_next_event+0xca>
    if (CONN_F_TERMINATE_STARTED(connsm) && (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE)) {
   1f0ea:	7822      	ldrb	r2, [r4, #0]
   1f0ec:	f012 0f80 	tst.w	r2, #128	; 0x80
   1f0f0:	d159      	bne.n	1f1a6 <ble_ll_conn_next_event+0xd2>
    itvl = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   1f0f2:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
   1f0f6:	f240 45e2 	movw	r5, #1250	; 0x4e2
   1f0fa:	fb05 f500 	mul.w	r5, r5, r0
        !CONN_F_PHY_UPDATE_SCHED(connsm)                &&
   1f0fe:	6821      	ldr	r1, [r4, #0]
   1f100:	4b8c      	ldr	r3, [pc, #560]	; (1f334 <ble_ll_conn_next_event+0x260>)
   1f102:	400b      	ands	r3, r1
    if (connsm->csmflags.cfbit.allow_slave_latency      &&
   1f104:	2b10      	cmp	r3, #16
   1f106:	d055      	beq.n	1f1b4 <ble_ll_conn_next_event+0xe0>
    latency = 1;
   1f108:	2601      	movs	r6, #1
    connsm->event_cntr += latency;
   1f10a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   1f10e:	4433      	add	r3, r6
   1f110:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if (latency == 1) {
   1f114:	2e01      	cmp	r6, #1
   1f116:	d159      	bne.n	1f1cc <ble_ll_conn_next_event+0xf8>
        connsm->anchor_point += connsm->conn_itvl_ticks;
   1f118:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   1f11a:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f11c:	4413      	add	r3, r2
   1f11e:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs += connsm->conn_itvl_usecs;
   1f120:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
   1f124:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1f128:	4413      	add	r3, r2
   1f12a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    if (connsm->anchor_point_usecs >= 31) {
   1f12e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1f132:	2b1e      	cmp	r3, #30
   1f134:	d905      	bls.n	1f142 <ble_ll_conn_next_event+0x6e>
        ++connsm->anchor_point;
   1f136:	6f62      	ldr	r2, [r4, #116]	; 0x74
   1f138:	3201      	adds	r2, #1
   1f13a:	6762      	str	r2, [r4, #116]	; 0x74
        connsm->anchor_point_usecs -= 31;
   1f13c:	3b1f      	subs	r3, #31
   1f13e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    if (connsm->csmflags.cfbit.conn_update_sched &&
   1f142:	7863      	ldrb	r3, [r4, #1]
   1f144:	f013 0f01 	tst.w	r3, #1
   1f148:	d005      	beq.n	1f156 <ble_ll_conn_next_event+0x82>
        (connsm->event_cntr == connsm->conn_update_req.instant)) {
   1f14a:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
   1f14e:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
    if (connsm->csmflags.cfbit.conn_update_sched &&
   1f152:	429a      	cmp	r2, r3
   1f154:	d049      	beq.n	1f1ea <ble_ll_conn_next_event+0x116>
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   1f156:	7863      	ldrb	r3, [r4, #1]
   1f158:	f013 0f10 	tst.w	r3, #16
   1f15c:	d007      	beq.n	1f16e <ble_ll_conn_next_event+0x9a>
        ((int16_t)(connsm->chanmap_instant - connsm->event_cntr) <= 0)) {
   1f15e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1f160:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
   1f164:	1a9b      	subs	r3, r3, r2
   1f166:	b21b      	sxth	r3, r3
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   1f168:	2b00      	cmp	r3, #0
   1f16a:	f340 80a4 	ble.w	1f2b6 <ble_ll_conn_next_event+0x1e2>
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, latency);
   1f16e:	4631      	mov	r1, r6
   1f170:	4620      	mov	r0, r4
   1f172:	f7ff ffa1 	bl	1f0b8 <ble_ll_conn_calc_dci>
   1f176:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    if (CONN_F_TERMINATE_STARTED(connsm)) {
   1f17a:	f994 3000 	ldrsb.w	r3, [r4]
   1f17e:	2b00      	cmp	r3, #0
   1f180:	f2c0 80b0 	blt.w	1f2e4 <ble_ll_conn_next_event+0x210>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   1f184:	79e3      	ldrb	r3, [r4, #7]
   1f186:	2b02      	cmp	r3, #2
   1f188:	f000 80b5 	beq.w	1f2f6 <ble_ll_conn_next_event+0x222>
    itvl = MYNEWT_VAL(BLE_LL_CONN_INIT_SLOTS) * BLE_LL_SCHED_32KHZ_TICKS_PER_SLOT;
   1f18c:	23a4      	movs	r3, #164	; 0xa4
    itvl -= g_ble_ll_sched_offset_ticks;
   1f18e:	4a6a      	ldr	r2, [pc, #424]	; (1f338 <ble_ll_conn_next_event+0x264>)
   1f190:	7810      	ldrb	r0, [r2, #0]
   1f192:	1a18      	subs	r0, r3, r0
    connsm->ce_end_time = connsm->anchor_point + itvl;
   1f194:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f196:	4403      	add	r3, r0
   1f198:	65e3      	str	r3, [r4, #92]	; 0x5c
    return 0;
   1f19a:	2000      	movs	r0, #0
}
   1f19c:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_ctrl_terminate_start(connsm);
   1f19e:	4620      	mov	r0, r4
   1f1a0:	f002 fc4f 	bl	21a42 <ble_ll_ctrl_terminate_start>
   1f1a4:	e7a1      	b.n	1f0ea <ble_ll_conn_next_event+0x16>
    if (CONN_F_TERMINATE_STARTED(connsm) && (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE)) {
   1f1a6:	79e3      	ldrb	r3, [r4, #7]
   1f1a8:	2b02      	cmp	r3, #2
   1f1aa:	d1a2      	bne.n	1f0f2 <ble_ll_conn_next_event+0x1e>
        connsm->slave_latency = 0;
   1f1ac:	2300      	movs	r3, #0
   1f1ae:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
   1f1b2:	e79e      	b.n	1f0f2 <ble_ll_conn_next_event+0x1e>
        if (connsm->csmflags.cfbit.pkt_rxd) {
   1f1b4:	f012 0f01 	tst.w	r2, #1
   1f1b8:	d006      	beq.n	1f1c8 <ble_ll_conn_next_event+0xf4>
            latency += connsm->slave_latency;
   1f1ba:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
   1f1be:	3601      	adds	r6, #1
   1f1c0:	b2b6      	uxth	r6, r6
            itvl = itvl * latency;
   1f1c2:	fb06 f505 	mul.w	r5, r6, r5
   1f1c6:	e7a0      	b.n	1f10a <ble_ll_conn_next_event+0x36>
    latency = 1;
   1f1c8:	2601      	movs	r6, #1
   1f1ca:	e79e      	b.n	1f10a <ble_ll_conn_next_event+0x36>
        ticks = os_cputime_usecs_to_ticks(itvl);
   1f1cc:	4628      	mov	r0, r5
   1f1ce:	f7fc fddb 	bl	1bd88 <os_cputime_usecs_to_ticks>
        connsm->anchor_point += ticks;
   1f1d2:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f1d4:	4403      	add	r3, r0
   1f1d6:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs += (itvl - os_cputime_ticks_to_usecs(ticks));
   1f1d8:	f7fc fdde 	bl	1bd98 <os_cputime_ticks_to_usecs>
   1f1dc:	1a28      	subs	r0, r5, r0
   1f1de:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1f1e2:	4428      	add	r0, r5
   1f1e4:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
   1f1e8:	e7a1      	b.n	1f12e <ble_ll_conn_next_event+0x5a>
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER)  ||
   1f1ea:	79e3      	ldrb	r3, [r4, #7]
   1f1ec:	2b01      	cmp	r3, #1
   1f1ee:	d007      	beq.n	1f200 <ble_ll_conn_next_event+0x12c>
   1f1f0:	2b02      	cmp	r3, #2
   1f1f2:	d031      	beq.n	1f258 <ble_ll_conn_next_event+0x184>
            (connsm->conn_itvl != upd->interval)            ||
   1f1f4:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   1f1f8:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   1f1fc:	429a      	cmp	r2, r3
   1f1fe:	d031      	beq.n	1f264 <ble_ll_conn_next_event+0x190>
            connsm->csmflags.cfbit.host_expects_upd_event = 1;
   1f200:	7863      	ldrb	r3, [r4, #1]
   1f202:	f043 0302 	orr.w	r3, r3, #2
   1f206:	7063      	strb	r3, [r4, #1]
        connsm->supervision_tmo = upd->timeout;
   1f208:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
   1f20c:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
        connsm->slave_latency = upd->latency;
   1f210:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
   1f214:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        connsm->tx_win_size = upd->winsize;
   1f218:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   1f21c:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   1f220:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1f224:	fb03 f302 	mul.w	r3, r3, r2
        connsm->slave_cur_tx_win_usecs =
   1f228:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        connsm->tx_win_off = upd->winoffset;
   1f22c:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   1f230:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        connsm->conn_itvl = upd->interval;
   1f234:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   1f238:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
        ble_ll_conn_calc_itvl_ticks(connsm);
   1f23c:	4620      	mov	r0, r4
   1f23e:	f7ff fd49 	bl	1ecd4 <ble_ll_conn_calc_itvl_ticks>
        if (upd->winoffset != 0) {
   1f242:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   1f246:	b9d3      	cbnz	r3, 1f27e <ble_ll_conn_next_event+0x1aa>
        connsm->last_rxd_pdu_cputime = connsm->anchor_point;
   1f248:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f24a:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        connsm->csmflags.cfbit.conn_update_sched = 0;
   1f24e:	7863      	ldrb	r3, [r4, #1]
   1f250:	f36f 0300 	bfc	r3, #0, #1
   1f254:	7063      	strb	r3, [r4, #1]
   1f256:	e77e      	b.n	1f156 <ble_ll_conn_next_event+0x82>
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   1f258:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   1f25c:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f260:	d1ce      	bne.n	1f200 <ble_ll_conn_next_event+0x12c>
   1f262:	e7c7      	b.n	1f1f4 <ble_ll_conn_next_event+0x120>
            (connsm->slave_latency != upd->latency)         ||
   1f264:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   1f268:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
            (connsm->conn_itvl != upd->interval)            ||
   1f26c:	429a      	cmp	r2, r3
   1f26e:	d1c7      	bne.n	1f200 <ble_ll_conn_next_event+0x12c>
            (connsm->supervision_tmo != upd->timeout)) {
   1f270:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   1f274:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
            (connsm->slave_latency != upd->latency)         ||
   1f278:	429a      	cmp	r2, r3
   1f27a:	d1c1      	bne.n	1f200 <ble_ll_conn_next_event+0x12c>
   1f27c:	e7c4      	b.n	1f208 <ble_ll_conn_next_event+0x134>
            usecs = upd->winoffset * BLE_LL_CONN_ITVL_USECS;
   1f27e:	f240 45e2 	movw	r5, #1250	; 0x4e2
   1f282:	fb05 f503 	mul.w	r5, r5, r3
            ticks = os_cputime_usecs_to_ticks(usecs);
   1f286:	4628      	mov	r0, r5
   1f288:	f7fc fd7e 	bl	1bd88 <os_cputime_usecs_to_ticks>
            connsm->anchor_point += ticks;
   1f28c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f28e:	4403      	add	r3, r0
   1f290:	6763      	str	r3, [r4, #116]	; 0x74
            usecs = usecs - os_cputime_ticks_to_usecs(ticks);
   1f292:	f7fc fd81 	bl	1bd98 <os_cputime_ticks_to_usecs>
   1f296:	1a28      	subs	r0, r5, r0
            connsm->anchor_point_usecs += usecs;
   1f298:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1f29c:	4403      	add	r3, r0
   1f29e:	b2db      	uxtb	r3, r3
   1f2a0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
            if (connsm->anchor_point_usecs >= 31) {
   1f2a4:	2b1e      	cmp	r3, #30
   1f2a6:	d9cf      	bls.n	1f248 <ble_ll_conn_next_event+0x174>
                ++connsm->anchor_point;
   1f2a8:	6f62      	ldr	r2, [r4, #116]	; 0x74
   1f2aa:	3201      	adds	r2, #1
   1f2ac:	6762      	str	r2, [r4, #116]	; 0x74
                connsm->anchor_point_usecs -= 31;
   1f2ae:	3b1f      	subs	r3, #31
   1f2b0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1f2b4:	e7c8      	b.n	1f248 <ble_ll_conn_next_event+0x174>
            ble_ll_utils_calc_num_used_chans(connsm->req_chanmap);
   1f2b6:	f104 0525 	add.w	r5, r4, #37	; 0x25
   1f2ba:	4628      	mov	r0, r5
   1f2bc:	f006 f969 	bl	25592 <ble_ll_utils_calc_num_used_chans>
        connsm->num_used_chans =
   1f2c0:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
        memcpy(connsm->chanmap, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   1f2c4:	f8d4 3025 	ldr.w	r3, [r4, #37]	; 0x25
   1f2c8:	6223      	str	r3, [r4, #32]
   1f2ca:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1f2ce:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        connsm->csmflags.cfbit.chanmap_update_scheduled = 0;
   1f2d2:	7863      	ldrb	r3, [r4, #1]
   1f2d4:	f36f 1304 	bfc	r3, #4, #1
   1f2d8:	7063      	strb	r3, [r4, #1]
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
   1f2da:	2101      	movs	r1, #1
   1f2dc:	4620      	mov	r0, r4
   1f2de:	f002 fc4d 	bl	21b7c <ble_ll_ctrl_proc_stop>
   1f2e2:	e744      	b.n	1f16e <ble_ll_conn_next_event+0x9a>
        if ((int32_t)(connsm->terminate_timeout - connsm->anchor_point) <= 0) {
   1f2e4:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1f2e6:	6f62      	ldr	r2, [r4, #116]	; 0x74
   1f2e8:	1a9b      	subs	r3, r3, r2
   1f2ea:	2b00      	cmp	r3, #0
   1f2ec:	f73f af4a 	bgt.w	1f184 <ble_ll_conn_next_event+0xb0>
            return -1;
   1f2f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f2f4:	e752      	b.n	1f19c <ble_ll_conn_next_event+0xc8>
        cur_ww = ble_ll_utils_calc_window_widening(connsm->anchor_point,
   1f2f6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   1f2fa:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   1f2fe:	6f60      	ldr	r0, [r4, #116]	; 0x74
   1f300:	f006 f966 	bl	255d0 <ble_ll_utils_calc_window_widening>
        max_ww = (connsm->conn_itvl * (BLE_LL_CONN_ITVL_USECS/2)) - BLE_LL_IFS;
   1f304:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   1f308:	f240 2371 	movw	r3, #625	; 0x271
   1f30c:	fb03 f302 	mul.w	r3, r3, r2
   1f310:	3b96      	subs	r3, #150	; 0x96
        if (cur_ww >= max_ww) {
   1f312:	4298      	cmp	r0, r3
   1f314:	d20a      	bcs.n	1f32c <ble_ll_conn_next_event+0x258>
        cur_ww += BLE_LL_JITTER_USECS;
   1f316:	3010      	adds	r0, #16
        connsm->slave_cur_window_widening = cur_ww;
   1f318:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        itvl += os_cputime_usecs_to_ticks(cur_ww + connsm->slave_cur_tx_win_usecs);
   1f31c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   1f320:	4418      	add	r0, r3
   1f322:	f7fc fd31 	bl	1bd88 <os_cputime_usecs_to_ticks>
   1f326:	f100 03a4 	add.w	r3, r0, #164	; 0xa4
   1f32a:	e730      	b.n	1f18e <ble_ll_conn_next_event+0xba>
            return -1;
   1f32c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f330:	e734      	b.n	1f19c <ble_ll_conn_next_event+0xc8>
   1f332:	bf00      	nop
   1f334:	00401110 	.word	0x00401110
   1f338:	20008cf0 	.word	0x20008cf0

0001f33c <ble_ll_conn_created>:
{
   1f33c:	b570      	push	{r4, r5, r6, lr}
   1f33e:	4604      	mov	r4, r0
   1f340:	460d      	mov	r5, r1
    connsm->conn_state = BLE_LL_CONN_STATE_CREATED;
   1f342:	2301      	movs	r3, #1
   1f344:	7183      	strb	r3, [r0, #6]
    connsm->csmflags.cfbit.pkt_rxd = 0;
   1f346:	7803      	ldrb	r3, [r0, #0]
   1f348:	f36f 0300 	bfc	r3, #0, #1
   1f34c:	7003      	strb	r3, [r0, #0]
    connsm->last_scheduled = os_cputime_get32();
   1f34e:	f7fc fd04 	bl	1bd5a <os_cputime_get32>
   1f352:	6660      	str	r0, [r4, #100]	; 0x64
    connsm->last_rxd_pdu_cputime = connsm->last_scheduled;
   1f354:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   1f358:	79e3      	ldrb	r3, [r4, #7]
   1f35a:	2b02      	cmp	r3, #2
   1f35c:	d011      	beq.n	1f382 <ble_ll_conn_created+0x46>
    rc = 1;
   1f35e:	2601      	movs	r6, #1
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   1f360:	79e3      	ldrb	r3, [r4, #7]
   1f362:	2b02      	cmp	r3, #2
   1f364:	d06d      	beq.n	1f442 <ble_ll_conn_created+0x106>
            evbuf = ble_ll_init_get_conn_comp_ev();
   1f366:	f7ff f955 	bl	1e614 <ble_ll_init_get_conn_comp_ev>
            ble_ll_conn_comp_event_send(connsm, BLE_ERR_SUCCESS, evbuf, NULL);
   1f36a:	2300      	movs	r3, #0
   1f36c:	4602      	mov	r2, r0
   1f36e:	4619      	mov	r1, r3
   1f370:	4620      	mov	r0, r4
   1f372:	f001 f98b 	bl	2068c <ble_ll_conn_comp_event_send>
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   1f376:	2103      	movs	r1, #3
   1f378:	4620      	mov	r0, r4
   1f37a:	f002 fb88 	bl	21a8e <ble_ll_ctrl_proc_start>
}
   1f37e:	4630      	mov	r0, r6
   1f380:	bd70      	pop	{r4, r5, r6, pc}
        connsm->last_anchor_point = rxhdr->beg_cputime;
   1f382:	68ab      	ldr	r3, [r5, #8]
   1f384:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        usecs = rxhdr->rem_usecs + 1250 +
   1f388:	68ee      	ldr	r6, [r5, #12]
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   1f38a:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
        usecs = rxhdr->rem_usecs + 1250 +
   1f38e:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1f392:	fb03 6600 	mla	r6, r3, r0, r6
                ble_ll_pdu_tx_time_get(BLE_CONNECT_REQ_LEN,
   1f396:	79a9      	ldrb	r1, [r5, #6]
   1f398:	2022      	movs	r0, #34	; 0x22
   1f39a:	f7fd ffbf 	bl	1d31c <ble_ll_pdu_tx_time_get>
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   1f39e:	4430      	add	r0, r6
        usecs = rxhdr->rem_usecs + 1250 +
   1f3a0:	f200 46e2 	addw	r6, r0, #1250	; 0x4e2
        if (rxhdr->rxinfo.channel < BLE_PHY_NUM_DATA_CHANS) {
   1f3a4:	78ab      	ldrb	r3, [r5, #2]
   1f3a6:	2b24      	cmp	r3, #36	; 0x24
   1f3a8:	d80c      	bhi.n	1f3c4 <ble_ll_conn_created+0x88>
            switch (rxhdr->rxinfo.phy) {
   1f3aa:	f995 3005 	ldrsb.w	r3, [r5, #5]
   1f3ae:	2b01      	cmp	r3, #1
   1f3b0:	db32      	blt.n	1f418 <ble_ll_conn_created+0xdc>
   1f3b2:	2b02      	cmp	r3, #2
   1f3b4:	dd04      	ble.n	1f3c0 <ble_ll_conn_created+0x84>
   1f3b6:	2b03      	cmp	r3, #3
   1f3b8:	d12e      	bne.n	1f418 <ble_ll_conn_created+0xdc>
                usecs += 2500;
   1f3ba:	f600 66a6 	addw	r6, r0, #3750	; 0xea6
                break;
   1f3be:	e001      	b.n	1f3c4 <ble_ll_conn_created+0x88>
                usecs += 1250;
   1f3c0:	f600 16c4 	addw	r6, r0, #2500	; 0x9c4
        endtime = os_cputime_usecs_to_ticks(usecs);
   1f3c4:	4630      	mov	r0, r6
   1f3c6:	f7fc fcdf 	bl	1bd88 <os_cputime_usecs_to_ticks>
        connsm->anchor_point = rxhdr->beg_cputime + endtime;
   1f3ca:	68ab      	ldr	r3, [r5, #8]
   1f3cc:	4403      	add	r3, r0
   1f3ce:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs = usecs - os_cputime_ticks_to_usecs(endtime);
   1f3d0:	f7fc fce2 	bl	1bd98 <os_cputime_ticks_to_usecs>
   1f3d4:	1a30      	subs	r0, r6, r0
   1f3d6:	b2c0      	uxtb	r0, r0
   1f3d8:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
        if (connsm->anchor_point_usecs == 31) {
   1f3dc:	281f      	cmp	r0, #31
   1f3de:	d025      	beq.n	1f42c <ble_ll_conn_created+0xf0>
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   1f3e0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1f3e4:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1f3e8:	fb00 f003 	mul.w	r0, r0, r3
        connsm->slave_cur_tx_win_usecs =
   1f3ec:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
        connsm->ce_end_time = connsm->anchor_point +
   1f3f0:	6f66      	ldr	r6, [r4, #116]	; 0x74
            + os_cputime_usecs_to_ticks(connsm->slave_cur_tx_win_usecs) + 1;
   1f3f2:	f7fc fcc9 	bl	1bd88 <os_cputime_usecs_to_ticks>
   1f3f6:	4430      	add	r0, r6
   1f3f8:	30a5      	adds	r0, #165	; 0xa5
        connsm->ce_end_time = connsm->anchor_point +
   1f3fa:	65e0      	str	r0, [r4, #92]	; 0x5c
        connsm->slave_cur_window_widening = BLE_LL_JITTER_USECS;
   1f3fc:	2310      	movs	r3, #16
   1f3fe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        while (ble_ll_sched_slave_new(connsm)) {
   1f402:	4620      	mov	r0, r4
   1f404:	f005 fdfe 	bl	25004 <ble_ll_sched_slave_new>
   1f408:	b1b8      	cbz	r0, 1f43a <ble_ll_conn_created+0xfe>
            if (ble_ll_conn_next_event(connsm)) {
   1f40a:	4620      	mov	r0, r4
   1f40c:	f7ff fe62 	bl	1f0d4 <ble_ll_conn_next_event>
   1f410:	2800      	cmp	r0, #0
   1f412:	d0f6      	beq.n	1f402 <ble_ll_conn_created+0xc6>
                rc = 0;
   1f414:	2600      	movs	r6, #0
   1f416:	e011      	b.n	1f43c <ble_ll_conn_created+0x100>
                BLE_LL_ASSERT(0);
   1f418:	f7e8 fed2 	bl	81c0 <hal_debugger_connected>
   1f41c:	b100      	cbz	r0, 1f420 <ble_ll_conn_created+0xe4>
   1f41e:	be01      	bkpt	0x0001
   1f420:	2300      	movs	r3, #0
   1f422:	461a      	mov	r2, r3
   1f424:	4619      	mov	r1, r3
   1f426:	4618      	mov	r0, r3
   1f428:	f7ea fad2 	bl	99d0 <__assert_func>
            ++connsm->anchor_point;
   1f42c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f42e:	3301      	adds	r3, #1
   1f430:	6763      	str	r3, [r4, #116]	; 0x74
            connsm->anchor_point_usecs = 0;
   1f432:	2300      	movs	r3, #0
   1f434:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1f438:	e7d2      	b.n	1f3e0 <ble_ll_conn_created+0xa4>
    rc = 1;
   1f43a:	2601      	movs	r6, #1
    if (rc) {
   1f43c:	2e00      	cmp	r6, #0
   1f43e:	d18f      	bne.n	1f360 <ble_ll_conn_created+0x24>
   1f440:	e79d      	b.n	1f37e <ble_ll_conn_created+0x42>
            ble_ll_adv_send_conn_comp_ev(connsm, rxhdr);
   1f442:	4629      	mov	r1, r5
   1f444:	4620      	mov	r0, r4
   1f446:	f7ff f80d 	bl	1e464 <ble_ll_adv_send_conn_comp_ev>
   1f44a:	e798      	b.n	1f37e <ble_ll_conn_created+0x42>

0001f44c <ble_ll_conn_set_csa>:
{
   1f44c:	b510      	push	{r4, lr}
   1f44e:	4604      	mov	r4, r0
    connsm->last_unmapped_chan = 0;
   1f450:	2300      	movs	r3, #0
   1f452:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, 1);
   1f456:	2101      	movs	r1, #1
   1f458:	f7ff fe2e 	bl	1f0b8 <ble_ll_conn_calc_dci>
   1f45c:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
}
   1f460:	bd10      	pop	{r4, pc}
	...

0001f464 <ble_ll_conn_wfr_timer_exp>:
{
   1f464:	b508      	push	{r3, lr}
    ble_ll_conn_current_sm_over(connsm);
   1f466:	4b02      	ldr	r3, [pc, #8]	; (1f470 <ble_ll_conn_wfr_timer_exp+0xc>)
   1f468:	6818      	ldr	r0, [r3, #0]
   1f46a:	f7ff f8ab 	bl	1e5c4 <ble_ll_conn_current_sm_over>
}
   1f46e:	bd08      	pop	{r3, pc}
   1f470:	200087f0 	.word	0x200087f0

0001f474 <ble_ll_conn_reset_pending_aux_conn_rsp>:
}
   1f474:	4770      	bx	lr

0001f476 <ble_ll_conn_init_wfr_timer_exp>:
}
   1f476:	4770      	bx	lr

0001f478 <ble_ll_conn_auth_pyld_timer_start>:
{
   1f478:	b510      	push	{r4, lr}
   1f47a:	4604      	mov	r4, r0
    tmo = (int32_t)BLE_LL_CONN_AUTH_PYLD_OS_TMO(connsm->auth_pyld_tmo);
   1f47c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   1f480:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1f484:	0058      	lsls	r0, r3, #1
   1f486:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f48a:	2300      	movs	r3, #0
   1f48c:	01c0      	lsls	r0, r0, #7
   1f48e:	2100      	movs	r1, #0
   1f490:	f7ec fe02 	bl	c098 <__aeabi_uldivmod>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1f494:	4601      	mov	r1, r0
   1f496:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   1f49a:	f7ea fc6d 	bl	9d78 <os_callout_reset>
}
   1f49e:	bd10      	pop	{r4, pc}

0001f4a0 <ble_ll_conn_auth_pyld_timer_cb>:
{
   1f4a0:	b510      	push	{r4, lr}
    return ev->ev.ev_arg;
   1f4a2:	6884      	ldr	r4, [r0, #8]
    ble_ll_auth_pyld_tmo_event_send(connsm);
   1f4a4:	4620      	mov	r0, r4
   1f4a6:	f001 fa31 	bl	2090c <ble_ll_auth_pyld_tmo_event_send>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_LE_PING);
   1f4aa:	2107      	movs	r1, #7
   1f4ac:	4620      	mov	r0, r4
   1f4ae:	f002 faee 	bl	21a8e <ble_ll_ctrl_proc_start>
    ble_ll_conn_auth_pyld_timer_start(connsm);
   1f4b2:	4620      	mov	r0, r4
   1f4b4:	f7ff ffe0 	bl	1f478 <ble_ll_conn_auth_pyld_timer_start>
}
   1f4b8:	bd10      	pop	{r4, pc}

0001f4ba <ble_ll_conn_master_init>:
{
   1f4ba:	b538      	push	{r3, r4, r5, lr}
   1f4bc:	4605      	mov	r5, r0
   1f4be:	460c      	mov	r4, r1
    ble_ll_conn_master_common_init(connsm);
   1f4c0:	f7ff fbd0 	bl	1ec64 <ble_ll_conn_master_common_init>
    connsm->slave_latency = hcc->conn_latency;
   1f4c4:	8a63      	ldrh	r3, [r4, #18]
   1f4c6:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
    connsm->supervision_tmo = hcc->supervision_timeout;
   1f4ca:	8aa3      	ldrh	r3, [r4, #20]
   1f4cc:	f8a5 306c 	strh.w	r3, [r5, #108]	; 0x6c
    connsm->own_addr_type = hcc->own_addr_type;
   1f4d0:	7b23      	ldrb	r3, [r4, #12]
   1f4d2:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
    if (hcc->filter_policy == 0) {
   1f4d6:	7923      	ldrb	r3, [r4, #4]
   1f4d8:	b173      	cbz	r3, 1f4f8 <ble_ll_conn_master_init+0x3e>
    connsm->conn_itvl = hcc->conn_itvl_max;
   1f4da:	8a23      	ldrh	r3, [r4, #16]
   1f4dc:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    if (hcc->min_ce_len > (connsm->conn_itvl * 2)) {
   1f4e0:	8ae1      	ldrh	r1, [r4, #22]
   1f4e2:	005a      	lsls	r2, r3, #1
   1f4e4:	4291      	cmp	r1, r2
   1f4e6:	dd13      	ble.n	1f510 <ble_ll_conn_master_init+0x56>
        connsm->min_ce_len = connsm->conn_itvl * 2;
   1f4e8:	f8a5 206e 	strh.w	r2, [r5, #110]	; 0x6e
    if (hcc->max_ce_len > (connsm->conn_itvl * 2)) {
   1f4ec:	8b21      	ldrh	r1, [r4, #24]
   1f4ee:	428a      	cmp	r2, r1
   1f4f0:	db11      	blt.n	1f516 <ble_ll_conn_master_init+0x5c>
        connsm->max_ce_len = hcc->max_ce_len;
   1f4f2:	f8a5 1070 	strh.w	r1, [r5, #112]	; 0x70
}
   1f4f6:	bd38      	pop	{r3, r4, r5, pc}
        memcpy(&connsm->peer_addr, &hcc->peer_addr, BLE_DEV_ADDR_LEN);
   1f4f8:	4623      	mov	r3, r4
   1f4fa:	f853 2f06 	ldr.w	r2, [r3, #6]!
   1f4fe:	f8c5 2093 	str.w	r2, [r5, #147]	; 0x93
   1f502:	889b      	ldrh	r3, [r3, #4]
   1f504:	f8a5 3097 	strh.w	r3, [r5, #151]	; 0x97
        connsm->peer_addr_type = hcc->peer_addr_type;
   1f508:	7963      	ldrb	r3, [r4, #5]
   1f50a:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
   1f50e:	e7e4      	b.n	1f4da <ble_ll_conn_master_init+0x20>
        connsm->min_ce_len = hcc->min_ce_len;
   1f510:	f8a5 106e 	strh.w	r1, [r5, #110]	; 0x6e
   1f514:	e7ea      	b.n	1f4ec <ble_ll_conn_master_init+0x32>
        connsm->max_ce_len = connsm->conn_itvl * 2;
   1f516:	005b      	lsls	r3, r3, #1
   1f518:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
   1f51c:	e7eb      	b.n	1f4f6 <ble_ll_conn_master_init+0x3c>
	...

0001f520 <ble_ll_conn_sm_new>:
{
   1f520:	b570      	push	{r4, r5, r6, lr}
   1f522:	4604      	mov	r4, r0
    connsm->csmflags.conn_flags = 0;
   1f524:	2500      	movs	r5, #0
   1f526:	6005      	str	r5, [r0, #0]
    connsm->event_cntr = 0;
   1f528:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   1f52c:	7185      	strb	r5, [r0, #6]
    connsm->disconnect_reason = 0;
   1f52e:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    connsm->rxd_disconnect_reason = 0;
   1f532:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
    connsm->conn_features = BLE_LL_CONN_INITIAL_FEATURES;
   1f536:	2322      	movs	r3, #34	; 0x22
   1f538:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    memset(connsm->remote_features, 0, sizeof(connsm->remote_features));
   1f53c:	6405      	str	r5, [r0, #64]	; 0x40
   1f53e:	f8c0 5043 	str.w	r5, [r0, #67]	; 0x43
    connsm->vers_nr = 0;
   1f542:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
    connsm->comp_id = 0;
   1f546:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
    connsm->sub_vers_nr = 0;
   1f54a:	f8a0 5050 	strh.w	r5, [r0, #80]	; 0x50
    connsm->reject_reason = BLE_ERR_SUCCESS;
   1f54e:	f880 5037 	strb.w	r5, [r0, #55]	; 0x37
    connsm->conn_rssi = BLE_LL_CONN_UNKNOWN_RSSI;
   1f552:	237f      	movs	r3, #127	; 0x7f
   1f554:	7203      	strb	r3, [r0, #8]
    connsm->rpa_index = -1;
   1f556:	23ff      	movs	r3, #255	; 0xff
   1f558:	7243      	strb	r3, [r0, #9]
    connsm->inita_identity_used = 0;
   1f55a:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
    connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   1f55e:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
    connsm->pending_ctrl_procs = 0;
   1f562:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
    connsm->conn_param_req.handle = 0;
   1f566:	f8a0 5168 	strh.w	r5, [r0, #360]	; 0x168
    memset(ev, 0, sizeof(*ev));
   1f56a:	f8c0 509c 	str.w	r5, [r0, #156]	; 0x9c
   1f56e:	f8c0 50a8 	str.w	r5, [r0, #168]	; 0xa8
    ev->ev.ev_queued = 0;
   1f572:	f880 509c 	strb.w	r5, [r0, #156]	; 0x9c
    ev->ev.ev_cb = (os_event_fn *)fn;
   1f576:	4b26      	ldr	r3, [pc, #152]	; (1f610 <ble_ll_conn_sm_new+0xf0>)
   1f578:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    ev->ev.ev_arg = arg;
   1f57c:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    STAILQ_INIT(&connsm->conn_txq);
   1f580:	4603      	mov	r3, r0
   1f582:	f843 5fb0 	str.w	r5, [r3, #176]!
   1f586:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    connsm->cur_tx_pdu = NULL;
   1f58a:	f8c0 50ac 	str.w	r5, [r0, #172]	; 0xac
    connsm->tx_seqnum = 0;
   1f58e:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
    connsm->next_exp_seqnum = 0;
   1f592:	f880 5033 	strb.w	r5, [r0, #51]	; 0x33
    connsm->cons_rxd_bad_crc = 0;
   1f596:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    connsm->last_rxd_sn = 1;
   1f59a:	2601      	movs	r6, #1
   1f59c:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
    connsm->completed_pkts = 0;
   1f5a0:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
    connsm->max_tx_octets = conn_params->conn_init_max_tx_octets;
   1f5a4:	4b1b      	ldr	r3, [pc, #108]	; (1f614 <ble_ll_conn_sm_new+0xf4>)
   1f5a6:	7a1a      	ldrb	r2, [r3, #8]
   1f5a8:	7282      	strb	r2, [r0, #10]
    connsm->max_rx_octets = conn_params->supp_max_rx_octets;
   1f5aa:	79da      	ldrb	r2, [r3, #7]
   1f5ac:	72c2      	strb	r2, [r0, #11]
    connsm->max_tx_time = conn_params->conn_init_max_tx_time;
   1f5ae:	899a      	ldrh	r2, [r3, #12]
   1f5b0:	8202      	strh	r2, [r0, #16]
    connsm->max_rx_time = conn_params->supp_max_rx_time;
   1f5b2:	8a9b      	ldrh	r3, [r3, #20]
   1f5b4:	8243      	strh	r3, [r0, #18]
    connsm->rem_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   1f5b6:	f44f 73a4 	mov.w	r3, #328	; 0x148
   1f5ba:	8283      	strh	r3, [r0, #20]
    connsm->rem_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   1f5bc:	82c3      	strh	r3, [r0, #22]
    connsm->eff_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   1f5be:	8303      	strh	r3, [r0, #24]
    connsm->eff_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   1f5c0:	8343      	strh	r3, [r0, #26]
    connsm->rem_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   1f5c2:	231b      	movs	r3, #27
   1f5c4:	7303      	strb	r3, [r0, #12]
    connsm->rem_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   1f5c6:	7343      	strb	r3, [r0, #13]
    connsm->eff_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   1f5c8:	7383      	strb	r3, [r0, #14]
    connsm->eff_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   1f5ca:	73c3      	strb	r3, [r0, #15]
    ble_ll_update_max_tx_octets_phy_mode(connsm);
   1f5cc:	f7ff f873 	bl	1e6b6 <ble_ll_update_max_tx_octets_phy_mode>
    memset(&connsm->enc_data, 0, sizeof(struct ble_ll_conn_enc_data));
   1f5d0:	2250      	movs	r2, #80	; 0x50
   1f5d2:	4629      	mov	r1, r5
   1f5d4:	f504 708c 	add.w	r0, r4, #280	; 0x118
   1f5d8:	f7ec f983 	bl	b8e2 <memset>
    connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   1f5dc:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
    connsm->auth_pyld_tmo = BLE_LL_CONN_DEF_AUTH_PYLD_TMO;
   1f5e0:	f640 33b8 	movw	r3, #3000	; 0xbb8
   1f5e4:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    CONN_F_LE_PING_SUPP(connsm) = 1;
   1f5e8:	78a3      	ldrb	r3, [r4, #2]
   1f5ea:	f043 0308 	orr.w	r3, r3, #8
   1f5ee:	70a3      	strb	r3, [r4, #2]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   1f5f0:	4623      	mov	r3, r4
   1f5f2:	4a09      	ldr	r2, [pc, #36]	; (1f618 <ble_ll_conn_sm_new+0xf8>)
   1f5f4:	4909      	ldr	r1, [pc, #36]	; (1f61c <ble_ll_conn_sm_new+0xfc>)
   1f5f6:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   1f5fa:	f7ea fb91 	bl	9d20 <os_callout_init>
    ble_ll_conn_calc_itvl_ticks(connsm);
   1f5fe:	4620      	mov	r0, r4
   1f600:	f7ff fb68 	bl	1ecd4 <ble_ll_conn_calc_itvl_ticks>
    SLIST_INSERT_HEAD(&g_ble_ll_conn_active_list, connsm, act_sle);
   1f604:	4b06      	ldr	r3, [pc, #24]	; (1f620 <ble_ll_conn_sm_new+0x100>)
   1f606:	681a      	ldr	r2, [r3, #0]
   1f608:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   1f60c:	601c      	str	r4, [r3, #0]
}
   1f60e:	bd70      	pop	{r4, r5, r6, pc}
   1f610:	0001f7a1 	.word	0x0001f7a1
   1f614:	200087fc 	.word	0x200087fc
   1f618:	0001f4a1 	.word	0x0001f4a1
   1f61c:	200084e8 	.word	0x200084e8
   1f620:	200087e4 	.word	0x200087e4

0001f624 <ble_ll_conn_update_eff_data_len>:
{
   1f624:	b510      	push	{r4, lr}
   1f626:	4604      	mov	r4, r0
    eff_time = min(connsm->rem_max_tx_time, connsm->max_rx_time);
   1f628:	8a43      	ldrh	r3, [r0, #18]
   1f62a:	8a82      	ldrh	r2, [r0, #20]
   1f62c:	4293      	cmp	r3, r2
   1f62e:	bf28      	it	cs
   1f630:	4613      	movcs	r3, r2
    if (eff_time != connsm->eff_max_rx_time) {
   1f632:	8b42      	ldrh	r2, [r0, #26]
   1f634:	429a      	cmp	r2, r3
   1f636:	d020      	beq.n	1f67a <ble_ll_conn_update_eff_data_len+0x56>
        connsm->eff_max_rx_time = eff_time;
   1f638:	8343      	strh	r3, [r0, #26]
        send_event = 1;
   1f63a:	2101      	movs	r1, #1
    eff_time = min(connsm->rem_max_rx_time, connsm->max_tx_time);
   1f63c:	8a23      	ldrh	r3, [r4, #16]
   1f63e:	8ae2      	ldrh	r2, [r4, #22]
   1f640:	4293      	cmp	r3, r2
   1f642:	bf28      	it	cs
   1f644:	4613      	movcs	r3, r2
    if (eff_time != connsm->eff_max_tx_time) {
   1f646:	8b22      	ldrh	r2, [r4, #24]
   1f648:	429a      	cmp	r2, r3
   1f64a:	d118      	bne.n	1f67e <ble_ll_conn_update_eff_data_len+0x5a>
    eff_bytes = min(connsm->rem_max_tx_octets, connsm->max_rx_octets);
   1f64c:	7b22      	ldrb	r2, [r4, #12]
   1f64e:	7ae3      	ldrb	r3, [r4, #11]
   1f650:	429a      	cmp	r2, r3
   1f652:	d21a      	bcs.n	1f68a <ble_ll_conn_update_eff_data_len+0x66>
   1f654:	b293      	uxth	r3, r2
    if (eff_bytes != connsm->eff_max_rx_octets) {
   1f656:	7be2      	ldrb	r2, [r4, #15]
   1f658:	429a      	cmp	r2, r3
   1f65a:	d001      	beq.n	1f660 <ble_ll_conn_update_eff_data_len+0x3c>
        connsm->eff_max_rx_octets = eff_bytes;
   1f65c:	73e3      	strb	r3, [r4, #15]
        send_event = 1;
   1f65e:	2101      	movs	r1, #1
    eff_bytes = min(connsm->rem_max_rx_octets, connsm->max_tx_octets);
   1f660:	7b62      	ldrb	r2, [r4, #13]
   1f662:	7aa3      	ldrb	r3, [r4, #10]
   1f664:	429a      	cmp	r2, r3
   1f666:	d212      	bcs.n	1f68e <ble_ll_conn_update_eff_data_len+0x6a>
   1f668:	b293      	uxth	r3, r2
    if (eff_bytes != connsm->eff_max_tx_octets) {
   1f66a:	7ba2      	ldrb	r2, [r4, #14]
   1f66c:	429a      	cmp	r2, r3
   1f66e:	d010      	beq.n	1f692 <ble_ll_conn_update_eff_data_len+0x6e>
        connsm->eff_max_tx_octets = eff_bytes;
   1f670:	73a3      	strb	r3, [r4, #14]
        ble_ll_hci_ev_datalen_chg(connsm);
   1f672:	4620      	mov	r0, r4
   1f674:	f003 faee 	bl	22c54 <ble_ll_hci_ev_datalen_chg>
}
   1f678:	bd10      	pop	{r4, pc}
    send_event = 0;
   1f67a:	2100      	movs	r1, #0
   1f67c:	e7de      	b.n	1f63c <ble_ll_conn_update_eff_data_len+0x18>
        connsm->eff_max_tx_time = eff_time;
   1f67e:	8323      	strh	r3, [r4, #24]
        ble_ll_update_max_tx_octets_phy_mode(connsm);
   1f680:	4620      	mov	r0, r4
   1f682:	f7ff f818 	bl	1e6b6 <ble_ll_update_max_tx_octets_phy_mode>
        send_event = 1;
   1f686:	2101      	movs	r1, #1
   1f688:	e7e0      	b.n	1f64c <ble_ll_conn_update_eff_data_len+0x28>
    eff_bytes = min(connsm->rem_max_tx_octets, connsm->max_rx_octets);
   1f68a:	b29b      	uxth	r3, r3
   1f68c:	e7e3      	b.n	1f656 <ble_ll_conn_update_eff_data_len+0x32>
    eff_bytes = min(connsm->rem_max_rx_octets, connsm->max_tx_octets);
   1f68e:	b29b      	uxth	r3, r3
   1f690:	e7eb      	b.n	1f66a <ble_ll_conn_update_eff_data_len+0x46>
    if (send_event) {
   1f692:	2900      	cmp	r1, #0
   1f694:	d1ed      	bne.n	1f672 <ble_ll_conn_update_eff_data_len+0x4e>
   1f696:	e7ef      	b.n	1f678 <ble_ll_conn_update_eff_data_len+0x54>

0001f698 <ble_ll_conn_end>:
{
   1f698:	b570      	push	{r4, r5, r6, lr}
   1f69a:	4604      	mov	r4, r0
   1f69c:	460d      	mov	r5, r1
    ble_ll_sched_rmv_elem(&connsm->conn_sch);
   1f69e:	30dc      	adds	r0, #220	; 0xdc
   1f6a0:	f005 fe8c 	bl	253bc <ble_ll_sched_rmv_elem>
    OS_ENTER_CRITICAL(sr);
   1f6a4:	f7eb ff86 	bl	b5b4 <os_arch_save_sr>
   1f6a8:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   1f6aa:	4b39      	ldr	r3, [pc, #228]	; (1f790 <ble_ll_conn_end+0xf8>)
   1f6ac:	681b      	ldr	r3, [r3, #0]
   1f6ae:	42a3      	cmp	r3, r4
   1f6b0:	d012      	beq.n	1f6d8 <ble_ll_conn_end+0x40>
    OS_EXIT_CRITICAL(sr);
   1f6b2:	4630      	mov	r0, r6
   1f6b4:	f7eb ff84 	bl	b5c0 <os_arch_restore_sr>
    os_callout_stop(&co->co);
   1f6b8:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   1f6bc:	f7ea fb3e 	bl	9d3c <os_callout_stop>
   1f6c0:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   1f6c4:	f7ea fb3a 	bl	9d3c <os_callout_stop>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   1f6c8:	4b32      	ldr	r3, [pc, #200]	; (1f794 <ble_ll_conn_end+0xfc>)
   1f6ca:	681a      	ldr	r2, [r3, #0]
   1f6cc:	42a2      	cmp	r2, r4
   1f6ce:	d107      	bne.n	1f6e0 <ble_ll_conn_end+0x48>
   1f6d0:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
   1f6d4:	601a      	str	r2, [r3, #0]
   1f6d6:	e00b      	b.n	1f6f0 <ble_ll_conn_end+0x58>
        ble_ll_conn_halt();
   1f6d8:	f7fe ff68 	bl	1e5ac <ble_ll_conn_halt>
   1f6dc:	e7e9      	b.n	1f6b2 <ble_ll_conn_end+0x1a>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   1f6de:	461a      	mov	r2, r3
   1f6e0:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1f6e4:	42a3      	cmp	r3, r4
   1f6e6:	d1fa      	bne.n	1f6de <ble_ll_conn_end+0x46>
   1f6e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   1f6ec:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    if (connsm->cur_tx_pdu) {
   1f6f0:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   1f6f4:	b140      	cbz	r0, 1f708 <ble_ll_conn_end+0x70>
        os_mbuf_free_chain(connsm->cur_tx_pdu);
   1f6f6:	f7ea fde5 	bl	a2c4 <os_mbuf_free_chain>
        connsm->cur_tx_pdu = NULL;
   1f6fa:	2300      	movs	r3, #0
   1f6fc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   1f700:	e002      	b.n	1f708 <ble_ll_conn_end+0x70>
        os_mbuf_free_chain(m);
   1f702:	3810      	subs	r0, #16
   1f704:	f7ea fdde 	bl	a2c4 <os_mbuf_free_chain>
        pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   1f708:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
        if (!pkthdr) {
   1f70c:	b148      	cbz	r0, 1f722 <ble_ll_conn_end+0x8a>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   1f70e:	6843      	ldr	r3, [r0, #4]
   1f710:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   1f714:	2b00      	cmp	r3, #0
   1f716:	d1f4      	bne.n	1f702 <ble_ll_conn_end+0x6a>
   1f718:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   1f71c:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   1f720:	e7ef      	b.n	1f702 <ble_ll_conn_end+0x6a>
    os_eventq_remove(&evq->evq, &ev->ev);
   1f722:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   1f726:	481c      	ldr	r0, [pc, #112]	; (1f798 <ble_ll_conn_end+0x100>)
   1f728:	f7ea fd29 	bl	a17e <os_eventq_remove>
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   1f72c:	2300      	movs	r3, #0
   1f72e:	71a3      	strb	r3, [r4, #6]
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   1f730:	78e3      	ldrb	r3, [r4, #3]
   1f732:	f003 0318 	and.w	r3, r3, #24
   1f736:	2b18      	cmp	r3, #24
   1f738:	d017      	beq.n	1f76a <ble_ll_conn_end+0xd2>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   1f73a:	78e3      	ldrb	r3, [r4, #3]
   1f73c:	f013 0f10 	tst.w	r3, #16
   1f740:	d11c      	bne.n	1f77c <ble_ll_conn_end+0xe4>
    if (ble_err && (ble_err != BLE_ERR_UNK_CONN_ID ||
   1f742:	b14d      	cbz	r5, 1f758 <ble_ll_conn_end+0xc0>
   1f744:	2d02      	cmp	r5, #2
   1f746:	d103      	bne.n	1f750 <ble_ll_conn_end+0xb8>
   1f748:	7823      	ldrb	r3, [r4, #0]
   1f74a:	f013 0f04 	tst.w	r3, #4
   1f74e:	d003      	beq.n	1f758 <ble_ll_conn_end+0xc0>
        ble_ll_disconn_comp_event_send(connsm, ble_err);
   1f750:	4629      	mov	r1, r5
   1f752:	4620      	mov	r0, r4
   1f754:	f001 f8ef 	bl	20936 <ble_ll_disconn_comp_event_send>
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   1f758:	2300      	movs	r3, #0
   1f75a:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
   1f75e:	4b0f      	ldr	r3, [pc, #60]	; (1f79c <ble_ll_conn_end+0x104>)
   1f760:	685a      	ldr	r2, [r3, #4]
   1f762:	6014      	str	r4, [r2, #0]
   1f764:	34b8      	adds	r4, #184	; 0xb8
   1f766:	605c      	str	r4, [r3, #4]
}
   1f768:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   1f76a:	2100      	movs	r1, #0
   1f76c:	4620      	mov	r0, r4
   1f76e:	f003 fb3d 	bl	22dec <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1f772:	78e3      	ldrb	r3, [r4, #3]
   1f774:	f36f 1304 	bfc	r3, #4, #1
   1f778:	70e3      	strb	r3, [r4, #3]
   1f77a:	e7de      	b.n	1f73a <ble_ll_conn_end+0xa2>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, ble_err);
   1f77c:	4629      	mov	r1, r5
   1f77e:	4620      	mov	r0, r4
   1f780:	f003 fb34 	bl	22dec <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1f784:	78e3      	ldrb	r3, [r4, #3]
   1f786:	f36f 1304 	bfc	r3, #4, #1
   1f78a:	70e3      	strb	r3, [r4, #3]
   1f78c:	e7d9      	b.n	1f742 <ble_ll_conn_end+0xaa>
   1f78e:	bf00      	nop
   1f790:	200087f0 	.word	0x200087f0
   1f794:	200087e4 	.word	0x200087e4
   1f798:	200084e8 	.word	0x200084e8
   1f79c:	200087f4 	.word	0x200087f4

0001f7a0 <ble_ll_conn_event_end>:
{
   1f7a0:	b538      	push	{r3, r4, r5, lr}
   1f7a2:	4604      	mov	r4, r0
    ble_ll_rfmgmt_release();
   1f7a4:	f004 f8a4 	bl	238f0 <ble_ll_rfmgmt_release>
    return ev->ev.ev_arg;
   1f7a8:	68a4      	ldr	r4, [r4, #8]
    BLE_LL_ASSERT(connsm);
   1f7aa:	b18c      	cbz	r4, 1f7d0 <ble_ll_conn_event_end+0x30>
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   1f7ac:	79a3      	ldrb	r3, [r4, #6]
   1f7ae:	b1cb      	cbz	r3, 1f7e4 <ble_ll_conn_event_end+0x44>
    ble_ll_scan_chk_resume();
   1f7b0:	f005 f808 	bl	247c4 <ble_ll_scan_chk_resume>
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   1f7b4:	7823      	ldrb	r3, [r4, #0]
   1f7b6:	f013 0202 	ands.w	r2, r3, #2
   1f7ba:	d103      	bne.n	1f7c4 <ble_ll_conn_event_end+0x24>
                    (connsm->csmflags.cfbit.terminate_ind_rxd &&
   1f7bc:	f003 030c 	and.w	r3, r3, #12
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   1f7c0:	2b0c      	cmp	r3, #12
   1f7c2:	d11e      	bne.n	1f802 <ble_ll_conn_event_end+0x62>
        if (connsm->csmflags.cfbit.terminate_ind_txd) {
   1f7c4:	b9c2      	cbnz	r2, 1f7f8 <ble_ll_conn_event_end+0x58>
            ble_err = connsm->rxd_disconnect_reason;
   1f7c6:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
            if (ble_err == 0) {
   1f7ca:	b9b1      	cbnz	r1, 1f7fa <ble_ll_conn_event_end+0x5a>
                ble_err = BLE_ERR_REM_USER_CONN_TERM;
   1f7cc:	2113      	movs	r1, #19
   1f7ce:	e014      	b.n	1f7fa <ble_ll_conn_event_end+0x5a>
    BLE_LL_ASSERT(connsm);
   1f7d0:	f7e8 fcf6 	bl	81c0 <hal_debugger_connected>
   1f7d4:	b100      	cbz	r0, 1f7d8 <ble_ll_conn_event_end+0x38>
   1f7d6:	be01      	bkpt	0x0001
   1f7d8:	2300      	movs	r3, #0
   1f7da:	461a      	mov	r2, r3
   1f7dc:	4619      	mov	r1, r3
   1f7de:	4618      	mov	r0, r3
   1f7e0:	f7ea f8f6 	bl	99d0 <__assert_func>
        BLE_LL_ASSERT(0);
   1f7e4:	f7e8 fcec 	bl	81c0 <hal_debugger_connected>
   1f7e8:	b100      	cbz	r0, 1f7ec <ble_ll_conn_event_end+0x4c>
   1f7ea:	be01      	bkpt	0x0001
   1f7ec:	2300      	movs	r3, #0
   1f7ee:	461a      	mov	r2, r3
   1f7f0:	4619      	mov	r1, r3
   1f7f2:	4618      	mov	r0, r3
   1f7f4:	f7ea f8ec 	bl	99d0 <__assert_func>
            ble_err = BLE_ERR_CONN_TERM_LOCAL;
   1f7f8:	2116      	movs	r1, #22
        ble_ll_conn_end(connsm, ble_err);
   1f7fa:	4620      	mov	r0, r4
   1f7fc:	f7ff ff4c 	bl	1f698 <ble_ll_conn_end>
}
   1f800:	bd38      	pop	{r3, r4, r5, pc}
    os_eventq_remove(&evq->evq, &ev->ev);
   1f802:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   1f806:	482f      	ldr	r0, [pc, #188]	; (1f8c4 <ble_ll_conn_event_end+0x124>)
   1f808:	f7ea fcb9 	bl	a17e <os_eventq_remove>
    if (connsm->csmflags.cfbit.pkt_rxd) {
   1f80c:	7823      	ldrb	r3, [r4, #0]
   1f80e:	f013 0f01 	tst.w	r3, #1
   1f812:	d002      	beq.n	1f81a <ble_ll_conn_event_end+0x7a>
        connsm->slave_cur_tx_win_usecs = 0;
   1f814:	2300      	movs	r3, #0
   1f816:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (ble_ll_conn_next_event(connsm)) {
   1f81a:	4620      	mov	r0, r4
   1f81c:	f7ff fc5a 	bl	1f0d4 <ble_ll_conn_next_event>
   1f820:	b9d0      	cbnz	r0, 1f858 <ble_ll_conn_event_end+0xb8>
    connsm->cons_rxd_bad_crc = 0;
   1f822:	2200      	movs	r2, #0
   1f824:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    connsm->csmflags.cfbit.pkt_rxd = 0;
   1f828:	7823      	ldrb	r3, [r4, #0]
   1f82a:	f362 0300 	bfi	r3, r2, #0, #1
   1f82e:	7023      	strb	r3, [r4, #0]
    ble_ll_ctrl_chk_proc_start(connsm);
   1f830:	4620      	mov	r0, r4
   1f832:	f002 f96b 	bl	21b0c <ble_ll_ctrl_chk_proc_start>
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   1f836:	4b24      	ldr	r3, [pc, #144]	; (1f8c8 <ble_ll_conn_event_end+0x128>)
   1f838:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    while (ble_ll_sched_conn_reschedule(connsm)) {
   1f83c:	4620      	mov	r0, r4
   1f83e:	f005 fa57 	bl	24cf0 <ble_ll_sched_conn_reschedule>
   1f842:	b170      	cbz	r0, 1f862 <ble_ll_conn_event_end+0xc2>
        if (ble_ll_conn_next_event(connsm)) {
   1f844:	4620      	mov	r0, r4
   1f846:	f7ff fc45 	bl	1f0d4 <ble_ll_conn_next_event>
   1f84a:	2800      	cmp	r0, #0
   1f84c:	d0f6      	beq.n	1f83c <ble_ll_conn_event_end+0x9c>
            ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   1f84e:	2116      	movs	r1, #22
   1f850:	4620      	mov	r0, r4
   1f852:	f7ff ff21 	bl	1f698 <ble_ll_conn_end>
            return;
   1f856:	e7d3      	b.n	1f800 <ble_ll_conn_event_end+0x60>
        ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   1f858:	2116      	movs	r1, #22
   1f85a:	4620      	mov	r0, r4
   1f85c:	f7ff ff1c 	bl	1f698 <ble_ll_conn_end>
        return;
   1f860:	e7ce      	b.n	1f800 <ble_ll_conn_event_end+0x60>
    if (connsm->conn_state == BLE_LL_CONN_STATE_CREATED) {
   1f862:	79a3      	ldrb	r3, [r4, #6]
   1f864:	2b01      	cmp	r3, #1
   1f866:	d01f      	beq.n	1f8a8 <ble_ll_conn_event_end+0x108>
        tmo = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000UL;
   1f868:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   1f86c:	f242 7010 	movw	r0, #10000	; 0x2710
   1f870:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_SPVN_TMO;
   1f874:	2508      	movs	r5, #8
    tmo = os_cputime_usecs_to_ticks(tmo);
   1f876:	f7fc fa87 	bl	1bd88 <os_cputime_usecs_to_ticks>
    if ((int32_t)(connsm->anchor_point - connsm->last_rxd_pdu_cputime) >= tmo) {
   1f87a:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f87c:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   1f880:	1a9b      	subs	r3, r3, r2
   1f882:	4283      	cmp	r3, r0
   1f884:	d218      	bcs.n	1f8b8 <ble_ll_conn_event_end+0x118>
    ble_ll_conn_num_comp_pkts_event_send(connsm);
   1f886:	4620      	mov	r0, r4
   1f888:	f000 ffca 	bl	20820 <ble_ll_conn_num_comp_pkts_event_send>
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   1f88c:	78e3      	ldrb	r3, [r4, #3]
   1f88e:	f003 0318 	and.w	r3, r3, #24
   1f892:	2b18      	cmp	r3, #24
   1f894:	d1b4      	bne.n	1f800 <ble_ll_conn_event_end+0x60>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   1f896:	2100      	movs	r1, #0
   1f898:	4620      	mov	r0, r4
   1f89a:	f003 faa7 	bl	22dec <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1f89e:	78e3      	ldrb	r3, [r4, #3]
   1f8a0:	f36f 1304 	bfc	r3, #4, #1
   1f8a4:	70e3      	strb	r3, [r4, #3]
   1f8a6:	e7ab      	b.n	1f800 <ble_ll_conn_event_end+0x60>
        tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS * 6UL;
   1f8a8:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   1f8ac:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1f8b0:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_ESTABLISHMENT;
   1f8b4:	253e      	movs	r5, #62	; 0x3e
   1f8b6:	e7de      	b.n	1f876 <ble_ll_conn_event_end+0xd6>
        ble_ll_conn_end(connsm, ble_err);
   1f8b8:	4629      	mov	r1, r5
   1f8ba:	4620      	mov	r0, r4
   1f8bc:	f7ff feec 	bl	1f698 <ble_ll_conn_end>
        return;
   1f8c0:	e79e      	b.n	1f800 <ble_ll_conn_event_end+0x60>
   1f8c2:	bf00      	nop
   1f8c4:	200084e8 	.word	0x200084e8
   1f8c8:	0001eb3d 	.word	0x0001eb3d

0001f8cc <ble_ll_conn_connect_ind_send>:
 * @param addr_type Address type of advertiser
 * @param adva Address of advertiser
 */
int
ble_ll_conn_connect_ind_send(struct ble_ll_conn_sm *connsm, uint8_t end_trans)
{
   1f8cc:	b538      	push	{r3, r4, r5, lr}
   1f8ce:	4604      	mov	r4, r0
    int rc;

    if (end_trans == BLE_PHY_TRANSITION_NONE) {
   1f8d0:	460d      	mov	r5, r1
   1f8d2:	b149      	cbz	r1, 1f8e8 <ble_ll_conn_connect_ind_send+0x1c>
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_standby, NULL);
    } else {
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_init, NULL);
   1f8d4:	2100      	movs	r1, #0
   1f8d6:	4806      	ldr	r0, [pc, #24]	; (1f8f0 <ble_ll_conn_connect_ind_send+0x24>)
   1f8d8:	f006 fc2c 	bl	26134 <ble_phy_set_txend_cb>
    }

    rc = ble_phy_tx(ble_ll_conn_connect_ind_tx_pducb, connsm, end_trans);
   1f8dc:	462a      	mov	r2, r5
   1f8de:	4621      	mov	r1, r4
   1f8e0:	4804      	ldr	r0, [pc, #16]	; (1f8f4 <ble_ll_conn_connect_ind_send+0x28>)
   1f8e2:	f006 fe81 	bl	265e8 <ble_phy_tx>

    return rc;
}
   1f8e6:	bd38      	pop	{r3, r4, r5, pc}
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_standby, NULL);
   1f8e8:	4803      	ldr	r0, [pc, #12]	; (1f8f8 <ble_ll_conn_connect_ind_send+0x2c>)
   1f8ea:	f006 fc23 	bl	26134 <ble_phy_set_txend_cb>
   1f8ee:	e7f5      	b.n	1f8dc <ble_ll_conn_connect_ind_send+0x10>
   1f8f0:	0001e601 	.word	0x0001e601
   1f8f4:	0001ede5 	.word	0x0001ede5
   1f8f8:	0001e60b 	.word	0x0001e60b

0001f8fc <ble_ll_conn_event_halt>:
 * NOTE: the phy has been disabled as well as the wfr timer before this is
 * called.
 */
void
ble_ll_conn_event_halt(void)
{
   1f8fc:	b510      	push	{r4, lr}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1f8fe:	2000      	movs	r0, #0
   1f900:	f7fd fcb8 	bl	1d274 <ble_ll_state_set>
    if (g_ble_ll_conn_cur_sm) {
   1f904:	4b07      	ldr	r3, [pc, #28]	; (1f924 <ble_ll_conn_event_halt+0x28>)
   1f906:	681b      	ldr	r3, [r3, #0]
   1f908:	b153      	cbz	r3, 1f920 <ble_ll_conn_event_halt+0x24>
        g_ble_ll_conn_cur_sm->csmflags.cfbit.pkt_rxd = 0;
   1f90a:	781a      	ldrb	r2, [r3, #0]
   1f90c:	f36f 0200 	bfc	r2, #0, #1
   1f910:	701a      	strb	r2, [r3, #0]
        ble_ll_event_send(&g_ble_ll_conn_cur_sm->conn_ev_end);
   1f912:	4c04      	ldr	r4, [pc, #16]	; (1f924 <ble_ll_conn_event_halt+0x28>)
   1f914:	6820      	ldr	r0, [r4, #0]
   1f916:	309c      	adds	r0, #156	; 0x9c
   1f918:	f7fd fcb8 	bl	1d28c <ble_ll_event_send>
        g_ble_ll_conn_cur_sm = NULL;
   1f91c:	2300      	movs	r3, #0
   1f91e:	6023      	str	r3, [r4, #0]
    }
}
   1f920:	bd10      	pop	{r4, pc}
   1f922:	bf00      	nop
   1f924:	200087f0 	.word	0x200087f0

0001f928 <ble_ll_init_rx_pkt_in>:
 * @param ble_hdr
 */
void
ble_ll_init_rx_pkt_in(uint8_t pdu_type, uint8_t *rxbuf,
                      struct ble_mbuf_hdr *ble_hdr)
{
   1f928:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f92a:	b08b      	sub	sp, #44	; 0x2c
    uint8_t *addr;
    uint8_t *adv_addr;
    uint8_t *inita;
    uint8_t inita_type;
    struct ble_ll_conn_sm *connsm;
    int ext_adv_mode = -1;
   1f92c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f930:	9305      	str	r3, [sp, #20]
         aux_data = ble_hdr->rxinfo.user_data;
     }
#endif

    /* Get the connection state machine we are trying to create */
    connsm = g_ble_ll_conn_create_sm;
   1f932:	4b3c      	ldr	r3, [pc, #240]	; (1fa24 <ble_ll_init_rx_pkt_in+0xfc>)
   1f934:	681e      	ldr	r6, [r3, #0]
    if (!connsm) {
   1f936:	b15e      	cbz	r6, 1f950 <ble_ll_init_rx_pkt_in+0x28>
   1f938:	4615      	mov	r5, r2
   1f93a:	460c      	mov	r4, r1
        }
#endif
        return;
    }

    if (!BLE_MBUF_HDR_CRC_OK(ble_hdr)) {
   1f93c:	8813      	ldrh	r3, [r2, #0]
   1f93e:	f013 0f80 	tst.w	r3, #128	; 0x80
   1f942:	d003      	beq.n	1f94c <ble_ll_init_rx_pkt_in+0x24>
        }
    }
#endif

    /* If we have sent a connect request, we need to enter CONNECTION state */
    if (connsm && CONN_F_CONN_REQ_TXD(connsm)) {
   1f944:	f996 3001 	ldrsb.w	r3, [r6, #1]
   1f948:	2b00      	cmp	r3, #0
   1f94a:	db03      	blt.n	1f954 <ble_ll_init_rx_pkt_in+0x2c>
    if (aux_data) {
        ble_ll_scan_aux_data_unref(ble_hdr->rxinfo.user_data);
        ble_hdr->rxinfo.user_data = NULL;
    }
#endif
    ble_ll_scan_chk_resume();
   1f94c:	f004 ff3a 	bl	247c4 <ble_ll_scan_chk_resume>
}
   1f950:	b00b      	add	sp, #44	; 0x2c
   1f952:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_ll_scan_adv_decode_addr(pdu_type, rxbuf, ble_hdr,
   1f954:	ab05      	add	r3, sp, #20
   1f956:	9303      	str	r3, [sp, #12]
   1f958:	f10d 031b 	add.w	r3, sp, #27
   1f95c:	9302      	str	r3, [sp, #8]
   1f95e:	ab07      	add	r3, sp, #28
   1f960:	9301      	str	r3, [sp, #4]
   1f962:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   1f966:	9300      	str	r3, [sp, #0]
   1f968:	ab08      	add	r3, sp, #32
   1f96a:	f004 feff 	bl	2476c <ble_ll_scan_adv_decode_addr>
   1f96e:	2800      	cmp	r0, #0
   1f970:	d1ec      	bne.n	1f94c <ble_ll_init_rx_pkt_in+0x24>
        if (connsm->rpa_index >= 0) {
   1f972:	f996 2009 	ldrsb.w	r2, [r6, #9]
   1f976:	2a00      	cmp	r2, #0
   1f978:	db36      	blt.n	1f9e8 <ble_ll_init_rx_pkt_in+0xc0>
            addr_type = g_ble_ll_resolv_list[connsm->rpa_index].rl_addr_type + 2;
   1f97a:	482b      	ldr	r0, [pc, #172]	; (1fa28 <ble_ll_init_rx_pkt_in+0x100>)
   1f97c:	2336      	movs	r3, #54	; 0x36
   1f97e:	fb03 f302 	mul.w	r3, r3, r2
   1f982:	5cc1      	ldrb	r1, [r0, r3]
   1f984:	3102      	adds	r1, #2
   1f986:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
            addr = g_ble_ll_resolv_list[connsm->rpa_index].rl_identity_addr;
   1f98a:	f103 0720 	add.w	r7, r3, #32
   1f98e:	4407      	add	r7, r0
   1f990:	3704      	adds	r7, #4
        if (connsm->rpa_index >= 0) {
   1f992:	2a00      	cmp	r2, #0
   1f994:	db30      	blt.n	1f9f8 <ble_ll_init_rx_pkt_in+0xd0>
            connsm->peer_addr_type = addr_type;
   1f996:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1f99a:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
            memcpy(connsm->peer_addr, addr, BLE_DEV_ADDR_LEN);
   1f99e:	683b      	ldr	r3, [r7, #0]
   1f9a0:	f8c6 3093 	str.w	r3, [r6, #147]	; 0x93
   1f9a4:	88bb      	ldrh	r3, [r7, #4]
   1f9a6:	f8a6 3097 	strh.w	r3, [r6, #151]	; 0x97
            ble_ll_scan_set_peer_rpa(adv_addr);
   1f9aa:	9808      	ldr	r0, [sp, #32]
   1f9ac:	f005 f888 	bl	24ac0 <ble_ll_scan_set_peer_rpa>
            ble_ll_resolv_set_peer_rpa(connsm->rpa_index, rxbuf + BLE_LL_PDU_HDR_LEN);
   1f9b0:	1ca1      	adds	r1, r4, #2
   1f9b2:	f996 0009 	ldrsb.w	r0, [r6, #9]
   1f9b6:	f003 fde5 	bl	23584 <ble_ll_resolv_set_peer_rpa>
            if (ble_ll_is_rpa(inita, inita_type)) {
   1f9ba:	f89d 101b 	ldrb.w	r1, [sp, #27]
   1f9be:	9807      	ldr	r0, [sp, #28]
   1f9c0:	f7fd fa8e 	bl	1cee0 <ble_ll_is_rpa>
   1f9c4:	b990      	cbnz	r0, 1f9ec <ble_ll_init_rx_pkt_in+0xc4>
        g_ble_ll_conn_create_sm = NULL;
   1f9c6:	2000      	movs	r0, #0
   1f9c8:	4b16      	ldr	r3, [pc, #88]	; (1fa24 <ble_ll_init_rx_pkt_in+0xfc>)
   1f9ca:	6018      	str	r0, [r3, #0]
        ble_ll_scan_sm_stop(0);
   1f9cc:	f004 fdce 	bl	2456c <ble_ll_scan_sm_stop>
        if (ble_hdr->rxinfo.channel < BLE_PHY_NUM_DATA_CHANS) {
   1f9d0:	78ab      	ldrb	r3, [r5, #2]
   1f9d2:	2b24      	cmp	r3, #36	; 0x24
   1f9d4:	d81f      	bhi.n	1fa16 <ble_ll_init_rx_pkt_in+0xee>
            ble_ll_conn_set_csa(connsm, 1);
   1f9d6:	2101      	movs	r1, #1
   1f9d8:	4630      	mov	r0, r6
   1f9da:	f7ff fd37 	bl	1f44c <ble_ll_conn_set_csa>
        ble_ll_conn_created(connsm, NULL);
   1f9de:	2100      	movs	r1, #0
   1f9e0:	4630      	mov	r0, r6
   1f9e2:	f7ff fcab 	bl	1f33c <ble_ll_conn_created>
        return;
   1f9e6:	e7b3      	b.n	1f950 <ble_ll_init_rx_pkt_in+0x28>
            addr = adv_addr;
   1f9e8:	9f08      	ldr	r7, [sp, #32]
   1f9ea:	e7d2      	b.n	1f992 <ble_ll_init_rx_pkt_in+0x6a>
                ble_ll_resolv_set_local_rpa(connsm->rpa_index, inita);
   1f9ec:	9907      	ldr	r1, [sp, #28]
   1f9ee:	f996 0009 	ldrsb.w	r0, [r6, #9]
   1f9f2:	f003 fddb 	bl	235ac <ble_ll_resolv_set_local_rpa>
   1f9f6:	e7e6      	b.n	1f9c6 <ble_ll_init_rx_pkt_in+0x9e>
        } else if (ble_ll_scan_whitelist_enabled()) {
   1f9f8:	f005 f870 	bl	24adc <ble_ll_scan_whitelist_enabled>
   1f9fc:	2800      	cmp	r0, #0
   1f9fe:	d0e2      	beq.n	1f9c6 <ble_ll_init_rx_pkt_in+0x9e>
            connsm->peer_addr_type = addr_type;
   1fa00:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1fa04:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
            memcpy(connsm->peer_addr, addr, BLE_DEV_ADDR_LEN);
   1fa08:	683b      	ldr	r3, [r7, #0]
   1fa0a:	f8c6 3093 	str.w	r3, [r6, #147]	; 0x93
   1fa0e:	88bb      	ldrh	r3, [r7, #4]
   1fa10:	f8a6 3097 	strh.w	r3, [r6, #151]	; 0x97
   1fa14:	e7d7      	b.n	1f9c6 <ble_ll_init_rx_pkt_in+0x9e>
            ble_ll_conn_set_csa(connsm, rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK);
   1fa16:	7821      	ldrb	r1, [r4, #0]
   1fa18:	f3c1 1140 	ubfx	r1, r1, #5, #1
   1fa1c:	4630      	mov	r0, r6
   1fa1e:	f7ff fd15 	bl	1f44c <ble_ll_conn_set_csa>
   1fa22:	e7dc      	b.n	1f9de <ble_ll_init_rx_pkt_in+0xb6>
   1fa24:	200087ec 	.word	0x200087ec
   1fa28:	20008a40 	.word	0x20008a40

0001fa2c <ble_ll_init_rx_isr_start>:
int
ble_ll_init_rx_isr_start(uint8_t pdu_type, struct ble_mbuf_hdr *ble_hdr)
{
    struct ble_ll_conn_sm *connsm;

    connsm = g_ble_ll_conn_create_sm;
   1fa2c:	4b08      	ldr	r3, [pc, #32]	; (1fa50 <ble_ll_init_rx_isr_start+0x24>)
   1fa2e:	681b      	ldr	r3, [r3, #0]
    if (!connsm) {
   1fa30:	b143      	cbz	r3, 1fa44 <ble_ll_init_rx_isr_start+0x18>
        return 0;
    }

    if ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
   1fa32:	b148      	cbz	r0, 1fa48 <ble_ll_init_rx_isr_start+0x1c>
   1fa34:	2801      	cmp	r0, #1
   1fa36:	d009      	beq.n	1fa4c <ble_ll_init_rx_isr_start+0x20>
        (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND ||
   1fa38:	2808      	cmp	r0, #8
   1fa3a:	d001      	beq.n	1fa40 <ble_ll_init_rx_isr_start+0x14>
        ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_EXT_ADV;
        return 1;
    }
#endif

    return 0;
   1fa3c:	2000      	movs	r0, #0
}
   1fa3e:	4770      	bx	lr
        return 1;
   1fa40:	2001      	movs	r0, #1
   1fa42:	4770      	bx	lr
        return 0;
   1fa44:	2000      	movs	r0, #0
   1fa46:	4770      	bx	lr
        return 1;
   1fa48:	2001      	movs	r0, #1
   1fa4a:	4770      	bx	lr
   1fa4c:	2001      	movs	r0, #1
   1fa4e:	4770      	bx	lr
   1fa50:	200087ec 	.word	0x200087ec

0001fa54 <ble_ll_init_rx_isr_end>:
 *       > 0: Do not disable PHY as that has already been done.
 */
int
ble_ll_init_rx_isr_end(uint8_t *rxbuf, uint8_t crcok,
                       struct ble_mbuf_hdr *ble_hdr)
{
   1fa54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa58:	b08d      	sub	sp, #52	; 0x34
    int chk_wl;
    int index;
    uint8_t pdu_type;
    uint8_t adv_addr_type;
    uint8_t peer_addr_type;
    uint8_t *adv_addr = NULL;
   1fa5a:	2300      	movs	r3, #0
   1fa5c:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t *peer;
    uint8_t *init_addr = NULL;
   1fa5e:	9309      	str	r3, [sp, #36]	; 0x24
#endif
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    struct ble_ll_scan_sm *scansm;
    uint8_t phy;
#endif
    int ext_adv_mode = -1;
   1fa60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fa64:	9307      	str	r3, [sp, #28]

    /* Get connection state machine to use if connection to be established */
    connsm = g_ble_ll_conn_create_sm;
   1fa66:	4baa      	ldr	r3, [pc, #680]	; (1fd10 <ble_ll_init_rx_isr_end+0x2bc>)
   1fa68:	681e      	ldr	r6, [r3, #0]
    /* This could happen if connection init was cancelled while isr end was
     * already pending
     */
    if (!connsm) {
   1fa6a:	b1f6      	cbz	r6, 1faaa <ble_ll_init_rx_isr_end+0x56>
   1fa6c:	4604      	mov	r4, r0
   1fa6e:	4690      	mov	r8, r2
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
        return -1;
    }

    rc = -1;
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1fa70:	7805      	ldrb	r5, [r0, #0]
   1fa72:	f005 050f 	and.w	r5, r5, #15
    pyld_len = rxbuf[1];
   1fa76:	7847      	ldrb	r7, [r0, #1]
        ble_hdr->rxinfo.user_data = scansm->cur_aux_data;
        scansm->cur_aux_data = NULL;
    }
#endif

    if (!crcok) {
   1fa78:	b9e9      	cbnz	r1, 1fab6 <ble_ll_init_rx_isr_end+0x62>
    rc = -1;
   1fa7a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff

    /*
     * We have to restart receive if we cant hand up pdu. We return 0 so that
     * the phy does not get disabled.
     */
    rxpdu = ble_ll_rxpdu_alloc(pyld_len + BLE_LL_PDU_HDR_LEN);
   1fa7e:	1cb8      	adds	r0, r7, #2
   1fa80:	f7fd f9f0 	bl	1ce64 <ble_ll_rxpdu_alloc>
    if (rxpdu == NULL) {
   1fa84:	4605      	mov	r5, r0
   1fa86:	2800      	cmp	r0, #0
   1fa88:	f000 8146 	beq.w	1fd18 <ble_ll_init_rx_isr_end+0x2c4>
            ble_ll_sched_rmv_elem(&connsm->conn_sch);
        }
        ble_phy_restart_rx();
        rc = 0;
    } else {
        ble_phy_rxpdu_copy(rxbuf, rxpdu);
   1fa8c:	4601      	mov	r1, r0
   1fa8e:	4620      	mov	r0, r4
   1fa90:	f006 f97a 	bl	25d88 <ble_phy_rxpdu_copy>
        ble_ll_rx_pdu_in(rxpdu);
   1fa94:	4628      	mov	r0, r5
   1fa96:	f7fd fb0d 	bl	1d0b4 <ble_ll_rx_pdu_in>
    }

    if (rc) {
   1fa9a:	f1b8 0f00 	cmp.w	r8, #0
   1fa9e:	f000 8143 	beq.w	1fd28 <ble_ll_init_rx_isr_end+0x2d4>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1faa2:	2000      	movs	r0, #0
   1faa4:	f7fd fbe6 	bl	1d274 <ble_ll_state_set>
   1faa8:	e13e      	b.n	1fd28 <ble_ll_init_rx_isr_end+0x2d4>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1faaa:	2000      	movs	r0, #0
   1faac:	f7fd fbe2 	bl	1d274 <ble_ll_state_set>
        return -1;
   1fab0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fab4:	e138      	b.n	1fd28 <ble_ll_init_rx_isr_end+0x2d4>
    if (ble_ll_scan_adv_decode_addr(pdu_type, rxbuf, ble_hdr,
   1fab6:	ab07      	add	r3, sp, #28
   1fab8:	9303      	str	r3, [sp, #12]
   1faba:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1fabe:	9302      	str	r3, [sp, #8]
   1fac0:	ab09      	add	r3, sp, #36	; 0x24
   1fac2:	9301      	str	r3, [sp, #4]
   1fac4:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   1fac8:	9300      	str	r3, [sp, #0]
   1faca:	ab0a      	add	r3, sp, #40	; 0x28
   1facc:	4601      	mov	r1, r0
   1face:	4628      	mov	r0, r5
   1fad0:	f004 fe4c 	bl	2476c <ble_ll_scan_adv_decode_addr>
   1fad4:	9004      	str	r0, [sp, #16]
   1fad6:	2800      	cmp	r0, #0
   1fad8:	f040 80fe 	bne.w	1fcd8 <ble_ll_init_rx_isr_end+0x284>
    switch (pdu_type) {
   1fadc:	b155      	cbz	r5, 1faf4 <ble_ll_init_rx_isr_end+0xa0>
   1fade:	2d01      	cmp	r5, #1
   1fae0:	f040 80fd 	bne.w	1fcde <ble_ll_init_rx_isr_end+0x28a>
        inita_is_rpa = (uint8_t)ble_ll_is_rpa(init_addr, init_addr_type);
   1fae4:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   1fae8:	9809      	ldr	r0, [sp, #36]	; 0x24
   1faea:	f7fd f9f9 	bl	1cee0 <ble_ll_is_rpa>
   1faee:	b2c5      	uxtb	r5, r0
        if (!inita_is_rpa) {
   1faf0:	2d00      	cmp	r5, #0
   1faf2:	d036      	beq.n	1fb62 <ble_ll_init_rx_isr_end+0x10e>
    peer = adv_addr;
   1faf4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    peer_addr_type = adv_addr_type;
   1faf8:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
    chk_wl = ble_ll_scan_whitelist_enabled();
   1fafc:	f004 ffee 	bl	24adc <ble_ll_scan_whitelist_enabled>
   1fb00:	9005      	str	r0, [sp, #20]
    if (ble_ll_is_rpa(adv_addr, adv_addr_type) && ble_ll_resolv_enabled()) {
   1fb02:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   1fb06:	980a      	ldr	r0, [sp, #40]	; 0x28
   1fb08:	f7fd f9ea 	bl	1cee0 <ble_ll_is_rpa>
   1fb0c:	2800      	cmp	r0, #0
   1fb0e:	d132      	bne.n	1fb76 <ble_ll_init_rx_isr_end+0x122>
    } else if (init_addr) {
   1fb10:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fb12:	2b00      	cmp	r3, #0
   1fb14:	f000 808f 	beq.w	1fc36 <ble_ll_init_rx_isr_end+0x1e2>
        if (inita_is_rpa && !ble_ll_resolv_enabled()) {
   1fb18:	b125      	cbz	r5, 1fb24 <ble_ll_init_rx_isr_end+0xd0>
   1fb1a:	f003 fdab 	bl	23674 <ble_ll_resolv_enabled>
   1fb1e:	2800      	cmp	r0, #0
   1fb20:	f000 80e9 	beq.w	1fcf6 <ble_ll_init_rx_isr_end+0x2a2>
        rl = ble_ll_resolv_list_find(adv_addr, adv_addr_type);
   1fb24:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   1fb28:	980a      	ldr	r0, [sp, #40]	; 0x28
   1fb2a:	f003 fb4d 	bl	231c8 <ble_ll_resolv_list_find>
        if (rl && !inita_is_rpa &&
   1fb2e:	4682      	mov	sl, r0
   1fb30:	b130      	cbz	r0, 1fb40 <ble_ll_init_rx_isr_end+0xec>
   1fb32:	b92d      	cbnz	r5, 1fb40 <ble_ll_init_rx_isr_end+0xec>
           (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1fb34:	7843      	ldrb	r3, [r0, #1]
        if (rl && !inita_is_rpa &&
   1fb36:	b91b      	cbnz	r3, 1fb40 <ble_ll_init_rx_isr_end+0xec>
           rl->rl_has_local) {
   1fb38:	7883      	ldrb	r3, [r0, #2]
           (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1fb3a:	2b00      	cmp	r3, #0
   1fb3c:	f040 80de 	bne.w	1fcfc <ble_ll_init_rx_isr_end+0x2a8>
        if (inita_is_rpa) {
   1fb40:	2d00      	cmp	r5, #0
   1fb42:	f000 8092 	beq.w	1fc6a <ble_ll_init_rx_isr_end+0x216>
            if (!rl || !ble_ll_resolv_rpa(init_addr, rl->rl_local_irk)) {
   1fb46:	f1ba 0f00 	cmp.w	sl, #0
   1fb4a:	f000 80da 	beq.w	1fd02 <ble_ll_init_rx_isr_end+0x2ae>
   1fb4e:	f10a 0104 	add.w	r1, sl, #4
   1fb52:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fb54:	f003 fd5a 	bl	2360c <ble_ll_resolv_rpa>
   1fb58:	2800      	cmp	r0, #0
   1fb5a:	d15c      	bne.n	1fc16 <ble_ll_init_rx_isr_end+0x1c2>
    rc = -1;
   1fb5c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fb60:	e78d      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
            if (!ble_ll_is_our_devaddr(init_addr, init_addr_type)) {
   1fb62:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   1fb66:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fb68:	f7fd fa68 	bl	1d03c <ble_ll_is_our_devaddr>
   1fb6c:	2800      	cmp	r0, #0
   1fb6e:	d1c1      	bne.n	1faf4 <ble_ll_init_rx_isr_end+0xa0>
    rc = -1;
   1fb70:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fb74:	e783      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
    if (ble_ll_is_rpa(adv_addr, adv_addr_type) && ble_ll_resolv_enabled()) {
   1fb76:	f003 fd7d 	bl	23674 <ble_ll_resolv_enabled>
   1fb7a:	2800      	cmp	r0, #0
   1fb7c:	d0c8      	beq.n	1fb10 <ble_ll_init_rx_isr_end+0xbc>
        index = ble_hw_resolv_list_match();
   1fb7e:	f005 ff89 	bl	25a94 <ble_hw_resolv_list_match>
        if (index >= 0) {
   1fb82:	f1b0 0a00 	subs.w	sl, r0, #0
   1fb86:	db3d      	blt.n	1fc04 <ble_ll_init_rx_isr_end+0x1b0>
            ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_RESOLVED;
   1fb88:	f8b8 3000 	ldrh.w	r3, [r8]
   1fb8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1fb90:	f8a8 3000 	strh.w	r3, [r8]
            connsm->rpa_index = index;
   1fb94:	f886 a009 	strb.w	sl, [r6, #9]
            peer = rl->rl_identity_addr;
   1fb98:	2336      	movs	r3, #54	; 0x36
   1fb9a:	fb03 f30a 	mul.w	r3, r3, sl
   1fb9e:	f103 0920 	add.w	r9, r3, #32
   1fba2:	4a5c      	ldr	r2, [pc, #368]	; (1fd14 <ble_ll_init_rx_isr_end+0x2c0>)
   1fba4:	4491      	add	r9, r2
   1fba6:	f109 0904 	add.w	r9, r9, #4
            peer_addr_type = rl->rl_addr_type;
   1fbaa:	18d1      	adds	r1, r2, r3
   1fbac:	f812 b003 	ldrb.w	fp, [r2, r3]
            if ((rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) && init_addr &&
   1fbb0:	784b      	ldrb	r3, [r1, #1]
   1fbb2:	b933      	cbnz	r3, 1fbc2 <ble_ll_init_rx_isr_end+0x16e>
   1fbb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fbb6:	b123      	cbz	r3, 1fbc2 <ble_ll_init_rx_isr_end+0x16e>
   1fbb8:	b91d      	cbnz	r5, 1fbc2 <ble_ll_init_rx_isr_end+0x16e>
                !inita_is_rpa && rl->rl_has_local) {
   1fbba:	788b      	ldrb	r3, [r1, #2]
   1fbbc:	2b00      	cmp	r3, #0
   1fbbe:	f040 8091 	bne.w	1fce4 <ble_ll_init_rx_isr_end+0x290>
            if (init_addr && inita_is_rpa) {
   1fbc2:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fbc4:	b388      	cbz	r0, 1fc2a <ble_ll_init_rx_isr_end+0x1d6>
   1fbc6:	b915      	cbnz	r5, 1fbce <ble_ll_init_rx_isr_end+0x17a>
            resolved = 1;
   1fbc8:	2301      	movs	r3, #1
   1fbca:	9304      	str	r3, [sp, #16]
   1fbcc:	e035      	b.n	1fc3a <ble_ll_init_rx_isr_end+0x1e6>
                                       g_ble_ll_resolv_list[index].rl_local_irk)) {
   1fbce:	2136      	movs	r1, #54	; 0x36
   1fbd0:	4b50      	ldr	r3, [pc, #320]	; (1fd14 <ble_ll_init_rx_isr_end+0x2c0>)
   1fbd2:	fb01 310a 	mla	r1, r1, sl, r3
                if (!ble_ll_resolv_rpa(init_addr,
   1fbd6:	3104      	adds	r1, #4
   1fbd8:	f003 fd18 	bl	2360c <ble_ll_resolv_rpa>
   1fbdc:	b910      	cbnz	r0, 1fbe4 <ble_ll_init_rx_isr_end+0x190>
    rc = -1;
   1fbde:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fbe2:	e74c      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
                memcpy(init_addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   1fbe4:	2336      	movs	r3, #54	; 0x36
   1fbe6:	fb03 f30a 	mul.w	r3, r3, sl
   1fbea:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1fbee:	4b49      	ldr	r3, [pc, #292]	; (1fd14 <ble_ll_init_rx_isr_end+0x2c0>)
   1fbf0:	4413      	add	r3, r2
   1fbf2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fbf4:	f853 1f02 	ldr.w	r1, [r3, #2]!
   1fbf8:	6011      	str	r1, [r2, #0]
   1fbfa:	889b      	ldrh	r3, [r3, #4]
   1fbfc:	8093      	strh	r3, [r2, #4]
            resolved = 1;
   1fbfe:	2301      	movs	r3, #1
   1fc00:	9304      	str	r3, [sp, #16]
   1fc02:	e01a      	b.n	1fc3a <ble_ll_init_rx_isr_end+0x1e6>
            if (chk_wl) {
   1fc04:	9a05      	ldr	r2, [sp, #20]
   1fc06:	2a00      	cmp	r2, #0
   1fc08:	d16f      	bne.n	1fcea <ble_ll_init_rx_isr_end+0x296>
            if (init_addr && inita_is_rpa) {
   1fc0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fc0c:	b183      	cbz	r3, 1fc30 <ble_ll_init_rx_isr_end+0x1dc>
   1fc0e:	2d00      	cmp	r5, #0
   1fc10:	d16e      	bne.n	1fcf0 <ble_ll_init_rx_isr_end+0x29c>
    resolved = 0;
   1fc12:	9204      	str	r2, [sp, #16]
   1fc14:	e011      	b.n	1fc3a <ble_ll_init_rx_isr_end+0x1e6>
            memcpy(init_addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   1fc16:	4653      	mov	r3, sl
   1fc18:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fc1a:	f853 1f2a 	ldr.w	r1, [r3, #42]!
   1fc1e:	6011      	str	r1, [r2, #0]
   1fc20:	889b      	ldrh	r3, [r3, #4]
   1fc22:	8093      	strh	r3, [r2, #4]
    index = -1;
   1fc24:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1fc28:	e007      	b.n	1fc3a <ble_ll_init_rx_isr_end+0x1e6>
            resolved = 1;
   1fc2a:	2301      	movs	r3, #1
   1fc2c:	9304      	str	r3, [sp, #16]
   1fc2e:	e004      	b.n	1fc3a <ble_ll_init_rx_isr_end+0x1e6>
    resolved = 0;
   1fc30:	9b05      	ldr	r3, [sp, #20]
   1fc32:	9304      	str	r3, [sp, #16]
   1fc34:	e001      	b.n	1fc3a <ble_ll_init_rx_isr_end+0x1e6>
    index = -1;
   1fc36:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    if (chk_wl) {
   1fc3a:	9b05      	ldr	r3, [sp, #20]
   1fc3c:	b1c3      	cbz	r3, 1fc70 <ble_ll_init_rx_isr_end+0x21c>
        if (!ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   1fc3e:	9a04      	ldr	r2, [sp, #16]
   1fc40:	4659      	mov	r1, fp
   1fc42:	4648      	mov	r0, r9
   1fc44:	f005 fd28 	bl	25698 <ble_ll_whitelist_match>
   1fc48:	2800      	cmp	r0, #0
   1fc4a:	d05d      	beq.n	1fd08 <ble_ll_init_rx_isr_end+0x2b4>
    ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_DEVMATCH;
   1fc4c:	f8b8 3000 	ldrh.w	r3, [r8]
   1fc50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1fc54:	f8a8 3000 	strh.w	r3, [r8]
    if (ble_ll_sched_master_new(connsm, ble_hdr, pyld_len)) {
   1fc58:	463a      	mov	r2, r7
   1fc5a:	4641      	mov	r1, r8
   1fc5c:	4630      	mov	r0, r6
   1fc5e:	f005 f919 	bl	24e94 <ble_ll_sched_master_new>
   1fc62:	b180      	cbz	r0, 1fc86 <ble_ll_init_rx_isr_end+0x232>
    rc = -1;
   1fc64:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fc68:	e709      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
    index = -1;
   1fc6a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1fc6e:	e7e4      	b.n	1fc3a <ble_ll_init_rx_isr_end+0x1e6>
        if (!ble_ll_conn_is_peer_adv(adv_addr_type, adv_addr, index)) {
   1fc70:	4652      	mov	r2, sl
   1fc72:	990a      	ldr	r1, [sp, #40]	; 0x28
   1fc74:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   1fc78:	f7ff f904 	bl	1ee84 <ble_ll_conn_is_peer_adv>
   1fc7c:	2800      	cmp	r0, #0
   1fc7e:	d1e5      	bne.n	1fc4c <ble_ll_init_rx_isr_end+0x1f8>
    rc = -1;
   1fc80:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fc84:	e6fb      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
    ble_ll_conn_connect_ind_prepare(connsm,
   1fc86:	f004 ff25 	bl	24ad4 <ble_ll_scan_get_pdu_data>
   1fc8a:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1fc8e:	f898 3002 	ldrb.w	r3, [r8, #2]
   1fc92:	9303      	str	r3, [sp, #12]
   1fc94:	f8cd a008 	str.w	sl, [sp, #8]
   1fc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fc9a:	9301      	str	r3, [sp, #4]
   1fc9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1fca0:	9300      	str	r3, [sp, #0]
   1fca2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fca4:	4601      	mov	r1, r0
   1fca6:	4630      	mov	r0, r6
   1fca8:	f7ff f970 	bl	1ef8c <ble_ll_conn_connect_ind_prepare>
    rc = ble_ll_conn_connect_ind_send(connsm, conn_req_end_trans);
   1fcac:	2100      	movs	r1, #0
   1fcae:	4630      	mov	r0, r6
   1fcb0:	f7ff fe0c 	bl	1f8cc <ble_ll_conn_connect_ind_send>
    if (rc) {
   1fcb4:	4680      	mov	r8, r0
   1fcb6:	b950      	cbnz	r0, 1fcce <ble_ll_init_rx_isr_end+0x27a>
    if (init_addr && !inita_is_rpa) {
   1fcb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fcba:	b11b      	cbz	r3, 1fcc4 <ble_ll_init_rx_isr_end+0x270>
   1fcbc:	b915      	cbnz	r5, 1fcc4 <ble_ll_init_rx_isr_end+0x270>
        connsm->inita_identity_used = 1;
   1fcbe:	2301      	movs	r3, #1
   1fcc0:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
    CONN_F_CONN_REQ_TXD(connsm) = 1;
   1fcc4:	7873      	ldrb	r3, [r6, #1]
   1fcc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1fcca:	7073      	strb	r3, [r6, #1]
   1fccc:	e6d7      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
        ble_ll_sched_rmv_elem(&connsm->conn_sch);
   1fcce:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
   1fcd2:	f005 fb73 	bl	253bc <ble_ll_sched_rmv_elem>
        goto init_rx_isr_exit;
   1fcd6:	e6d2      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
    rc = -1;
   1fcd8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fcdc:	e6cf      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
   1fcde:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fce2:	e6cc      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
   1fce4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fce8:	e6c9      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
   1fcea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fcee:	e6c6      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
   1fcf0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fcf4:	e6c3      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
   1fcf6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fcfa:	e6c0      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
   1fcfc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fd00:	e6bd      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
   1fd02:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fd06:	e6ba      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
   1fd08:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fd0c:	e6b7      	b.n	1fa7e <ble_ll_init_rx_isr_end+0x2a>
   1fd0e:	bf00      	nop
   1fd10:	200087ec 	.word	0x200087ec
   1fd14:	20008a40 	.word	0x20008a40
        if (CONN_F_CONN_REQ_TXD(connsm) == 1) {
   1fd18:	f996 3001 	ldrsb.w	r3, [r6, #1]
   1fd1c:	2b00      	cmp	r3, #0
   1fd1e:	db07      	blt.n	1fd30 <ble_ll_init_rx_isr_end+0x2dc>
        ble_phy_restart_rx();
   1fd20:	f006 fc38 	bl	26594 <ble_phy_restart_rx>
        rc = 0;
   1fd24:	f04f 0800 	mov.w	r8, #0
    }

    return rc;
}
   1fd28:	4640      	mov	r0, r8
   1fd2a:	b00d      	add	sp, #52	; 0x34
   1fd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            CONN_F_CONN_REQ_TXD(connsm) = 0;
   1fd30:	7873      	ldrb	r3, [r6, #1]
   1fd32:	f36f 13c7 	bfc	r3, #7, #1
   1fd36:	7073      	strb	r3, [r6, #1]
            CONN_F_AUX_CONN_REQ(connsm) = 0;
   1fd38:	78f3      	ldrb	r3, [r6, #3]
   1fd3a:	f36f 0382 	bfc	r3, #2, #1
   1fd3e:	70f3      	strb	r3, [r6, #3]
            ble_ll_sched_rmv_elem(&connsm->conn_sch);
   1fd40:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
   1fd44:	f005 fb3a 	bl	253bc <ble_ll_sched_rmv_elem>
   1fd48:	e7ea      	b.n	1fd20 <ble_ll_init_rx_isr_end+0x2cc>
   1fd4a:	bf00      	nop

0001fd4c <ble_ll_conn_timeout>:
 * @param connsm
 * @param ble_err
 */
void
ble_ll_conn_timeout(struct ble_ll_conn_sm *connsm, uint8_t ble_err)
{
   1fd4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd4e:	4604      	mov	r4, r0
   1fd50:	460d      	mov	r5, r1
    int was_current;
    os_sr_t sr;

    was_current = 0;
    OS_ENTER_CRITICAL(sr);
   1fd52:	f7eb fc2f 	bl	b5b4 <os_arch_save_sr>
   1fd56:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   1fd58:	4b0a      	ldr	r3, [pc, #40]	; (1fd84 <ble_ll_conn_timeout+0x38>)
   1fd5a:	681b      	ldr	r3, [r3, #0]
   1fd5c:	42a3      	cmp	r3, r4
   1fd5e:	d009      	beq.n	1fd74 <ble_ll_conn_timeout+0x28>
    was_current = 0;
   1fd60:	2700      	movs	r7, #0
        ble_ll_conn_current_sm_over(NULL);
        was_current = 1;
    }
    OS_EXIT_CRITICAL(sr);
   1fd62:	4630      	mov	r0, r6
   1fd64:	f7eb fc2c 	bl	b5c0 <os_arch_restore_sr>

    /* Check if we need to resume scanning */
    if (was_current) {
   1fd68:	b94f      	cbnz	r7, 1fd7e <ble_ll_conn_timeout+0x32>
        ble_ll_scan_chk_resume();
    }

    ble_ll_conn_end(connsm, ble_err);
   1fd6a:	4629      	mov	r1, r5
   1fd6c:	4620      	mov	r0, r4
   1fd6e:	f7ff fc93 	bl	1f698 <ble_ll_conn_end>
}
   1fd72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ble_ll_conn_current_sm_over(NULL);
   1fd74:	2000      	movs	r0, #0
   1fd76:	f7fe fc25 	bl	1e5c4 <ble_ll_conn_current_sm_over>
        was_current = 1;
   1fd7a:	2701      	movs	r7, #1
   1fd7c:	e7f1      	b.n	1fd62 <ble_ll_conn_timeout+0x16>
        ble_ll_scan_chk_resume();
   1fd7e:	f004 fd21 	bl	247c4 <ble_ll_scan_chk_resume>
   1fd82:	e7f2      	b.n	1fd6a <ble_ll_conn_timeout+0x1e>
   1fd84:	200087f0 	.word	0x200087f0

0001fd88 <ble_ll_conn_rx_isr_start>:
 *
 * @param rxhdr
 */
int
ble_ll_conn_rx_isr_start(struct ble_mbuf_hdr *rxhdr, uint32_t aa)
{
   1fd88:	b510      	push	{r4, lr}
     * Disable wait for response timer since we receive a response. We dont
     * care if this is the response we were waiting for or not; the code
     * called at receive end will deal with ending the connection event
     * if needed
     */
    connsm = g_ble_ll_conn_cur_sm;
   1fd8a:	4b17      	ldr	r3, [pc, #92]	; (1fde8 <ble_ll_conn_rx_isr_start+0x60>)
   1fd8c:	681c      	ldr	r4, [r3, #0]
    if (connsm) {
   1fd8e:	b33c      	cbz	r4, 1fde0 <ble_ll_conn_rx_isr_start+0x58>
        /* Double check access address. Better match connection state machine */
        if (aa != connsm->access_addr) {
   1fd90:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1fd92:	428b      	cmp	r3, r1
   1fd94:	d117      	bne.n	1fdc6 <ble_ll_conn_rx_isr_start+0x3e>
            g_ble_ll_conn_cur_sm = NULL;
            return -1;
        }

        /* Set connection handle in mbuf header */
        rxhdr->rxinfo.handle = connsm->conn_handle;
   1fd96:	88a3      	ldrh	r3, [r4, #4]
   1fd98:	70c3      	strb	r3, [r0, #3]

        /* Set flag denoting we have received a packet in connection event */
        connsm->csmflags.cfbit.pkt_rxd = 1;
   1fd9a:	7823      	ldrb	r3, [r4, #0]
   1fd9c:	f043 0301 	orr.w	r3, r3, #1
   1fda0:	7023      	strb	r3, [r4, #0]

        /* Connection is established */
        connsm->conn_state = BLE_LL_CONN_STATE_ESTABLISHED;
   1fda2:	2202      	movs	r2, #2
   1fda4:	71a2      	strb	r2, [r4, #6]

        /* Set anchor point (and last) if 1st rxd frame in connection event */
        if (connsm->csmflags.cfbit.slave_set_last_anchor) {
   1fda6:	f013 0f20 	tst.w	r3, #32
   1fdaa:	d01b      	beq.n	1fde4 <ble_ll_conn_rx_isr_start+0x5c>
            connsm->csmflags.cfbit.slave_set_last_anchor = 0;
   1fdac:	b2db      	uxtb	r3, r3
   1fdae:	f36f 1345 	bfc	r3, #5, #1
   1fdb2:	7023      	strb	r3, [r4, #0]
            connsm->last_anchor_point = rxhdr->beg_cputime;
   1fdb4:	6883      	ldr	r3, [r0, #8]
   1fdb6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            connsm->anchor_point = connsm->last_anchor_point;
   1fdba:	6763      	str	r3, [r4, #116]	; 0x74
            connsm->anchor_point_usecs = rxhdr->rem_usecs;
   1fdbc:	68c3      	ldr	r3, [r0, #12]
   1fdbe:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
        }
    }
    return 1;
   1fdc2:	2001      	movs	r0, #1
}
   1fdc4:	bd10      	pop	{r4, pc}
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1fdc6:	2000      	movs	r0, #0
   1fdc8:	f7fd fa54 	bl	1d274 <ble_ll_state_set>
            ble_ll_event_send(&connsm->conn_ev_end);
   1fdcc:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1fdd0:	f7fd fa5c 	bl	1d28c <ble_ll_event_send>
            g_ble_ll_conn_cur_sm = NULL;
   1fdd4:	4b04      	ldr	r3, [pc, #16]	; (1fde8 <ble_ll_conn_rx_isr_start+0x60>)
   1fdd6:	2200      	movs	r2, #0
   1fdd8:	601a      	str	r2, [r3, #0]
            return -1;
   1fdda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fdde:	e7f1      	b.n	1fdc4 <ble_ll_conn_rx_isr_start+0x3c>
    return 1;
   1fde0:	2001      	movs	r0, #1
   1fde2:	e7ef      	b.n	1fdc4 <ble_ll_conn_rx_isr_start+0x3c>
   1fde4:	2001      	movs	r0, #1
   1fde6:	e7ed      	b.n	1fdc4 <ble_ll_conn_rx_isr_start+0x3c>
   1fde8:	200087f0 	.word	0x200087f0

0001fdec <ble_ll_conn_rx_data_pdu>:
 * @param rxpdu Pointer to received pdu
 * @param rxpdu Pointer to ble mbuf header of received pdu
 */
void
ble_ll_conn_rx_data_pdu(struct os_mbuf *rxpdu, struct ble_mbuf_hdr *hdr)
{
   1fdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t acl_len;
    uint16_t acl_hdr;
    struct ble_ll_conn_sm *connsm;

    /* Packets with invalid CRC are not sent to LL */
    BLE_LL_ASSERT(BLE_MBUF_HDR_CRC_OK(hdr));
   1fdf0:	880b      	ldrh	r3, [r1, #0]
   1fdf2:	f013 0f80 	tst.w	r3, #128	; 0x80
   1fdf6:	d01a      	beq.n	1fe2e <ble_ll_conn_rx_data_pdu+0x42>
   1fdf8:	4606      	mov	r6, r0
   1fdfa:	460c      	mov	r4, r1

    /* XXX: there is a chance that the connection was thrown away and
       re-used before processing packets here. Fix this. */
    /* We better have a connection state machine */
    connsm = ble_ll_conn_find_active_conn(hdr->rxinfo.handle);
   1fdfc:	78c8      	ldrb	r0, [r1, #3]
   1fdfe:	f7ff f93b 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1fe02:	4605      	mov	r5, r0
   1fe04:	b170      	cbz	r0, 1fe24 <ble_ll_conn_rx_data_pdu+0x38>
       STATS_INC(ble_ll_conn_stats, no_conn_sm);
       goto conn_rx_data_pdu_end;
    }

    /* Check state machine */
    ble_ll_conn_chk_csm_flags(connsm);
   1fe06:	f7fe ffb7 	bl	1ed78 <ble_ll_conn_chk_csm_flags>

    /* Validate rx data pdu */
    rxbuf = rxpdu->om_data;
   1fe0a:	6833      	ldr	r3, [r6, #0]
    hdr_byte = rxbuf[0];
   1fe0c:	781f      	ldrb	r7, [r3, #0]
    acl_len = rxbuf[1];
   1fe0e:	f893 8001 	ldrb.w	r8, [r3, #1]

    /*
     * Check that the LLID and payload length are reasonable.
     * Empty payload is only allowed for LLID == 01b.
     *  */
    if ((llid == 0) || ((acl_len == 0) && (llid != BLE_LL_LLID_DATA_FRAG))) {
   1fe12:	f017 0903 	ands.w	r9, r7, #3
   1fe16:	d005      	beq.n	1fe24 <ble_ll_conn_rx_data_pdu+0x38>
   1fe18:	f1b8 0f00 	cmp.w	r8, #0
   1fe1c:	d111      	bne.n	1fe42 <ble_ll_conn_rx_data_pdu+0x56>
   1fe1e:	f1b9 0f01 	cmp.w	r9, #1
   1fe22:	d00e      	beq.n	1fe42 <ble_ll_conn_rx_data_pdu+0x56>
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_CONN_CREDIT) {
        ble_ll_conn_cth_flow_free_credit(connsm, 1);
    }
#endif

    os_mbuf_free_chain(rxpdu);
   1fe24:	4630      	mov	r0, r6
   1fe26:	f7ea fa4d 	bl	a2c4 <os_mbuf_free_chain>
}
   1fe2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    BLE_LL_ASSERT(BLE_MBUF_HDR_CRC_OK(hdr));
   1fe2e:	f7e8 f9c7 	bl	81c0 <hal_debugger_connected>
   1fe32:	b100      	cbz	r0, 1fe36 <ble_ll_conn_rx_data_pdu+0x4a>
   1fe34:	be01      	bkpt	0x0001
   1fe36:	2300      	movs	r3, #0
   1fe38:	461a      	mov	r2, r3
   1fe3a:	4619      	mov	r1, r3
   1fe3c:	4618      	mov	r0, r3
   1fe3e:	f7e9 fdc7 	bl	99d0 <__assert_func>
    if ((connsm->enc_data.enc_state > CONN_ENC_S_PAUSE_ENC_RSP_WAIT) &&
   1fe42:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   1fe46:	2b04      	cmp	r3, #4
   1fe48:	d83c      	bhi.n	1fec4 <ble_ll_conn_rx_data_pdu+0xd8>
    if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   1fe4a:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   1fe4e:	2b02      	cmp	r3, #2
   1fe50:	d042      	beq.n	1fed8 <ble_ll_conn_rx_data_pdu+0xec>
    connsm->conn_rssi = hdr->rxinfo.rssi;
   1fe52:	f994 3004 	ldrsb.w	r3, [r4, #4]
   1fe56:	722b      	strb	r3, [r5, #8]
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   1fe58:	79eb      	ldrb	r3, [r5, #7]
   1fe5a:	2b02      	cmp	r3, #2
   1fe5c:	d047      	beq.n	1feee <ble_ll_conn_rx_data_pdu+0x102>
    rxd_sn = hdr_byte & BLE_LL_DATA_HDR_SN_MASK;
   1fe5e:	f007 0708 	and.w	r7, r7, #8
    if (rxd_sn == connsm->last_rxd_sn) {
   1fe62:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   1fe66:	42bb      	cmp	r3, r7
   1fe68:	d0dc      	beq.n	1fe24 <ble_ll_conn_rx_data_pdu+0x38>
    connsm->last_rxd_sn = rxd_sn;
   1fe6a:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   1fe6e:	f1b9 0f01 	cmp.w	r9, #1
   1fe72:	d044      	beq.n	1fefe <ble_ll_conn_rx_data_pdu+0x112>
    if (BLE_MBUF_HDR_MIC_FAILURE(hdr)) {
   1fe74:	8823      	ldrh	r3, [r4, #0]
   1fe76:	f013 0f20 	tst.w	r3, #32
   1fe7a:	d144      	bne.n	1ff06 <ble_ll_conn_rx_data_pdu+0x11a>
    if (llid == BLE_LL_LLID_CTRL) {
   1fe7c:	f1b9 0f03 	cmp.w	r9, #3
   1fe80:	d046      	beq.n	1ff10 <ble_ll_conn_rx_data_pdu+0x124>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1fe82:	7972      	ldrb	r2, [r6, #5]
   1fe84:	2a07      	cmp	r2, #7
   1fe86:	d948      	bls.n	1ff1a <ble_ll_conn_rx_data_pdu+0x12e>
        startoff = om->om_pkthdr_len;
   1fe88:	b291      	uxth	r1, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1fe8a:	4632      	mov	r2, r6
   1fe8c:	f852 3b10 	ldr.w	r3, [r2], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1fe90:	440a      	add	r2, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1fe92:	1a9b      	subs	r3, r3, r2
   1fe94:	b29b      	uxth	r3, r3
        BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   1fe96:	2b01      	cmp	r3, #1
   1fe98:	d941      	bls.n	1ff1e <ble_ll_conn_rx_data_pdu+0x132>
        os_mbuf_prepend(rxpdu, 2);
   1fe9a:	2102      	movs	r1, #2
   1fe9c:	4630      	mov	r0, r6
   1fe9e:	f7ea fbcf 	bl	a640 <os_mbuf_prepend>
        rxbuf = rxpdu->om_data;
   1fea2:	6834      	ldr	r4, [r6, #0]
        acl_hdr = (llid << 12) | connsm->conn_handle;
   1fea4:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
   1fea8:	ea41 3109 	orr.w	r1, r1, r9, lsl #12
        put_le16(rxbuf, acl_hdr);
   1feac:	b289      	uxth	r1, r1
   1feae:	4620      	mov	r0, r4
   1feb0:	f7fb fe9c 	bl	1bbec <put_le16>
        put_le16(rxbuf + 2, acl_len);
   1feb4:	4641      	mov	r1, r8
   1feb6:	1ca0      	adds	r0, r4, #2
   1feb8:	f7fb fe98 	bl	1bbec <put_le16>
        ble_hci_trans_ll_acl_tx(rxpdu);
   1febc:	4630      	mov	r0, r6
   1febe:	f7f6 fb83 	bl	165c8 <ble_hci_trans_ll_acl_tx>
   1fec2:	e7b2      	b.n	1fe2a <ble_ll_conn_rx_data_pdu+0x3e>
            !ble_ll_ctrl_enc_allowed_pdu_rx(rxpdu)) {
   1fec4:	4630      	mov	r0, r6
   1fec6:	f001 fc88 	bl	217da <ble_ll_ctrl_enc_allowed_pdu_rx>
    if ((connsm->enc_data.enc_state > CONN_ENC_S_PAUSE_ENC_RSP_WAIT) &&
   1feca:	2800      	cmp	r0, #0
   1fecc:	d1bd      	bne.n	1fe4a <ble_ll_conn_rx_data_pdu+0x5e>
        ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   1fece:	213d      	movs	r1, #61	; 0x3d
   1fed0:	4628      	mov	r0, r5
   1fed2:	f7ff ff3b 	bl	1fd4c <ble_ll_conn_timeout>
        goto conn_rx_data_pdu_end;
   1fed6:	e7a5      	b.n	1fe24 <ble_ll_conn_rx_data_pdu+0x38>
    if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   1fed8:	78ab      	ldrb	r3, [r5, #2]
   1feda:	f013 0f08 	tst.w	r3, #8
   1fede:	d0b8      	beq.n	1fe52 <ble_ll_conn_rx_data_pdu+0x66>
        CONN_F_LE_PING_SUPP(connsm) && (acl_len != 0)) {
   1fee0:	f1b8 0f00 	cmp.w	r8, #0
   1fee4:	d0b5      	beq.n	1fe52 <ble_ll_conn_rx_data_pdu+0x66>
        ble_ll_conn_auth_pyld_timer_start(connsm);
   1fee6:	4628      	mov	r0, r5
   1fee8:	f7ff fac6 	bl	1f478 <ble_ll_conn_auth_pyld_timer_start>
   1feec:	e7b1      	b.n	1fe52 <ble_ll_conn_rx_data_pdu+0x66>
        if (hdr_byte & BLE_LL_DATA_HDR_NESN_MASK) {
   1feee:	f017 0f04 	tst.w	r7, #4
   1fef2:	d0b4      	beq.n	1fe5e <ble_ll_conn_rx_data_pdu+0x72>
            connsm->csmflags.cfbit.allow_slave_latency = 1;
   1fef4:	782b      	ldrb	r3, [r5, #0]
   1fef6:	f043 0310 	orr.w	r3, r3, #16
   1fefa:	702b      	strb	r3, [r5, #0]
   1fefc:	e7af      	b.n	1fe5e <ble_ll_conn_rx_data_pdu+0x72>
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   1fefe:	f1b8 0f00 	cmp.w	r8, #0
   1ff02:	d08f      	beq.n	1fe24 <ble_ll_conn_rx_data_pdu+0x38>
   1ff04:	e7b6      	b.n	1fe74 <ble_ll_conn_rx_data_pdu+0x88>
        ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   1ff06:	213d      	movs	r1, #61	; 0x3d
   1ff08:	4628      	mov	r0, r5
   1ff0a:	f7ff ff1f 	bl	1fd4c <ble_ll_conn_timeout>
        goto conn_rx_data_pdu_end;
   1ff0e:	e789      	b.n	1fe24 <ble_ll_conn_rx_data_pdu+0x38>
        if (ble_ll_ctrl_rx_pdu(connsm, rxpdu)) {
   1ff10:	4631      	mov	r1, r6
   1ff12:	4628      	mov	r0, r5
   1ff14:	f001 ff9c 	bl	21e50 <ble_ll_ctrl_rx_pdu>
   1ff18:	e787      	b.n	1fe2a <ble_ll_conn_rx_data_pdu+0x3e>
    startoff = 0;
   1ff1a:	2100      	movs	r1, #0
   1ff1c:	e7b5      	b.n	1fe8a <ble_ll_conn_rx_data_pdu+0x9e>
        BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   1ff1e:	f7e8 f94f 	bl	81c0 <hal_debugger_connected>
   1ff22:	b100      	cbz	r0, 1ff26 <ble_ll_conn_rx_data_pdu+0x13a>
   1ff24:	be01      	bkpt	0x0001
   1ff26:	2300      	movs	r3, #0
   1ff28:	461a      	mov	r2, r3
   1ff2a:	4619      	mov	r1, r3
   1ff2c:	4618      	mov	r0, r3
   1ff2e:	f7e9 fd4f 	bl	99d0 <__assert_func>
	...

0001ff34 <ble_ll_conn_rx_isr_end>:
 *      == 0: Success. Do not disable the PHY.
 *       > 0: Do not disable PHY as that has already been done.
 */
int
ble_ll_conn_rx_isr_end(uint8_t *rxbuf, struct ble_mbuf_hdr *rxhdr)
{
   1ff34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff38:	b083      	sub	sp, #12
   1ff3a:	4606      	mov	r6, r0
   1ff3c:	4688      	mov	r8, r1
    struct ble_mbuf_hdr *txhdr;
    int rx_phy_mode;
    bool alloc_rxpdu = true;

    rc = -1;
    connsm = g_ble_ll_conn_cur_sm;
   1ff3e:	4b8d      	ldr	r3, [pc, #564]	; (20174 <ble_ll_conn_rx_isr_end+0x240>)
   1ff40:	681c      	ldr	r4, [r3, #0]

    /* Retrieve the header and payload length */
    hdr_byte = rxbuf[0];
   1ff42:	f890 9000 	ldrb.w	r9, [r0]
    rx_pyld_len = rxbuf[1];
   1ff46:	f890 a001 	ldrb.w	sl, [r0, #1]

    /*
     * No need to alloc rxpdu for packets with invalid CRC, we would throw them
     * away instantly from LL anyway.
     */
    if (!BLE_MBUF_HDR_CRC_OK(rxhdr)) {
   1ff4a:	880b      	ldrh	r3, [r1, #0]
   1ff4c:	f013 0f80 	tst.w	r3, #128	; 0x80
   1ff50:	d139      	bne.n	1ffc6 <ble_ll_conn_rx_isr_end+0x92>
    struct os_mbuf *rxpdu = NULL;
   1ff52:	2700      	movs	r7, #0

    /*
     * We should have a current connection state machine. If we dont, we just
     * hand the packet to the higher layer to count it.
     */
    if (!connsm) {
   1ff54:	2c00      	cmp	r4, #0
   1ff56:	f000 80fd 	beq.w	20154 <ble_ll_conn_rx_isr_end+0x220>
    /*
     * Calculate the end time of the received PDU. NOTE: this looks strange
     * but for the 32768 crystal we add the time it takes to send the packet
     * to the 'additional usecs' field to save some calculations.
     */
    begtime = rxhdr->beg_cputime;
   1ff5a:	f8d8 b008 	ldr.w	fp, [r8, #8]
#if BLE_LL_BT5_PHY_SUPPORTED
    rx_phy_mode = connsm->phy_data.rx_phy_mode;
#else
    rx_phy_mode = BLE_PHY_MODE_1M;
#endif
    add_usecs = rxhdr->rem_usecs +
   1ff5e:	f8d8 500c 	ldr.w	r5, [r8, #12]
            ble_ll_pdu_tx_time_get(rx_pyld_len, rx_phy_mode);
   1ff62:	2101      	movs	r1, #1
   1ff64:	4650      	mov	r0, sl
   1ff66:	f7fd f9d9 	bl	1d31c <ble_ll_pdu_tx_time_get>
    add_usecs = rxhdr->rem_usecs +
   1ff6a:	4405      	add	r5, r0
    /*
     * Check the packet CRC. A connection event can continue even if the
     * received PDU does not pass the CRC check. If we receive two consecutive
     * CRC errors we end the conection event.
     */
    if (!BLE_MBUF_HDR_CRC_OK(rxhdr)) {
   1ff6c:	f8b8 3000 	ldrh.w	r3, [r8]
   1ff70:	f013 0f80 	tst.w	r3, #128	; 0x80
   1ff74:	d136      	bne.n	1ffe4 <ble_ll_conn_rx_isr_end+0xb0>
        /*
         * Increment # of consecutively received CRC errors. If more than
         * one we will end the connection event.
         */
        ++connsm->cons_rxd_bad_crc;
   1ff76:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   1ff7a:	3301      	adds	r3, #1
   1ff7c:	b2db      	uxtb	r3, r3
   1ff7e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if (connsm->cons_rxd_bad_crc >= 2) {
   1ff82:	2b01      	cmp	r3, #1
   1ff84:	d925      	bls.n	1ffd2 <ble_ll_conn_rx_isr_end+0x9e>
            reply = 0;
   1ff86:	2300      	movs	r3, #0
    /* If reply flag set, send data pdu and continue connection event */
    rc = -1;
    if (rx_pyld_len && CONN_F_ENCRYPTED(connsm)) {
        rx_pyld_len += BLE_LL_DATA_MIC_LEN;
    }
    if (reply && ble_ll_conn_can_send_next_pdu(connsm, begtime, add_usecs)) {
   1ff88:	2b00      	cmp	r3, #0
   1ff8a:	f000 80e9 	beq.w	20160 <ble_ll_conn_rx_isr_end+0x22c>
   1ff8e:	462a      	mov	r2, r5
   1ff90:	4659      	mov	r1, fp
   1ff92:	4620      	mov	r0, r4
   1ff94:	f7fe feb9 	bl	1ed0a <ble_ll_conn_can_send_next_pdu>
   1ff98:	2800      	cmp	r0, #0
   1ff9a:	f000 80e4 	beq.w	20166 <ble_ll_conn_rx_isr_end+0x232>
        rc = ble_ll_conn_tx_pdu(connsm);
   1ff9e:	4620      	mov	r0, r4
   1ffa0:	f7fe fbc2 	bl	1e728 <ble_ll_conn_tx_pdu>
   1ffa4:	4680      	mov	r8, r0
    }

conn_exit:
    /* Copy the received pdu and hand it up */
    if (rxpdu) {
   1ffa6:	b137      	cbz	r7, 1ffb6 <ble_ll_conn_rx_isr_end+0x82>
        ble_phy_rxpdu_copy(rxbuf, rxpdu);
   1ffa8:	4639      	mov	r1, r7
   1ffaa:	4630      	mov	r0, r6
   1ffac:	f005 feec 	bl	25d88 <ble_phy_rxpdu_copy>
        ble_ll_rx_pdu_in(rxpdu);
   1ffb0:	4638      	mov	r0, r7
   1ffb2:	f7fd f87f 	bl	1d0b4 <ble_ll_rx_pdu_in>
    }

    /* Send link layer a connection end event if over */
    if (rc) {
   1ffb6:	f1b8 0f00 	cmp.w	r8, #0
   1ffba:	f040 80d7 	bne.w	2016c <ble_ll_conn_rx_isr_end+0x238>
        ble_ll_conn_current_sm_over(connsm);
    }

    return rc;
}
   1ffbe:	4640      	mov	r0, r8
   1ffc0:	b003      	add	sp, #12
   1ffc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rxpdu = ble_ll_rxpdu_alloc(rx_pyld_len + BLE_LL_PDU_HDR_LEN);
   1ffc6:	f10a 0002 	add.w	r0, sl, #2
   1ffca:	f7fc ff4b 	bl	1ce64 <ble_ll_rxpdu_alloc>
   1ffce:	4607      	mov	r7, r0
   1ffd0:	e7c0      	b.n	1ff54 <ble_ll_conn_rx_isr_end+0x20>
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   1ffd2:	79e3      	ldrb	r3, [r4, #7]
   1ffd4:	2b01      	cmp	r3, #1
   1ffd6:	d001      	beq.n	1ffdc <ble_ll_conn_rx_isr_end+0xa8>
                reply = 1;
   1ffd8:	2301      	movs	r3, #1
   1ffda:	e7d5      	b.n	1ff88 <ble_ll_conn_rx_isr_end+0x54>
                reply = CONN_F_LAST_TXD_MD(connsm);
   1ffdc:	7863      	ldrb	r3, [r4, #1]
   1ffde:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1ffe2:	e7d1      	b.n	1ff88 <ble_ll_conn_rx_isr_end+0x54>
        connsm->cons_rxd_bad_crc = 0;
   1ffe4:	2300      	movs	r3, #0
   1ffe6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                                        os_cputime_usecs_to_ticks(add_usecs);
   1ffea:	4628      	mov	r0, r5
   1ffec:	f7fb fecc 	bl	1bd88 <os_cputime_usecs_to_ticks>
        connsm->last_rxd_pdu_cputime = begtime +
   1fff0:	4458      	add	r0, fp
   1fff2:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
        if ((hdr_byte & BLE_LL_DATA_HDR_LLID_MASK) == 0) {
   1fff6:	f019 0303 	ands.w	r3, r9, #3
   1fffa:	9300      	str	r3, [sp, #0]
   1fffc:	f000 80ad 	beq.w	2015a <ble_ll_conn_rx_isr_end+0x226>
        connsm->last_rxd_hdr_byte = hdr_byte;
   20000:	f884 9036 	strb.w	r9, [r4, #54]	; 0x36
        if (BLE_LL_LLID_IS_CTRL(hdr_byte)) {
   20004:	2b03      	cmp	r3, #3
   20006:	d03b      	beq.n	20080 <ble_ll_conn_rx_isr_end+0x14c>
    uint8_t opcode = 0;
   20008:	2300      	movs	r3, #0
   2000a:	9301      	str	r3, [sp, #4]
        hdr_sn = hdr_byte & BLE_LL_DATA_HDR_SN_MASK;
   2000c:	f009 0208 	and.w	r2, r9, #8
        conn_nesn = connsm->next_exp_seqnum;
   20010:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        if (rxpdu && ((hdr_sn && conn_nesn) || (!hdr_sn && !conn_nesn))) {
   20014:	b1a7      	cbz	r7, 20040 <ble_ll_conn_rx_isr_end+0x10c>
   20016:	b102      	cbz	r2, 2001a <ble_ll_conn_rx_isr_end+0xe6>
   20018:	b90b      	cbnz	r3, 2001e <ble_ll_conn_rx_isr_end+0xea>
   2001a:	b98a      	cbnz	r2, 20040 <ble_ll_conn_rx_isr_end+0x10c>
   2001c:	b983      	cbnz	r3, 20040 <ble_ll_conn_rx_isr_end+0x10c>
            connsm->next_exp_seqnum ^= 1;
   2001e:	f083 0301 	eor.w	r3, r3, #1
   20022:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
            if (CONN_F_ENCRYPTED(connsm) && !ble_ll_conn_is_empty_pdu(rxbuf)) {
   20026:	78a3      	ldrb	r3, [r4, #2]
   20028:	f013 0f02 	tst.w	r3, #2
   2002c:	d008      	beq.n	20040 <ble_ll_conn_rx_isr_end+0x10c>
   2002e:	4630      	mov	r0, r6
   20030:	f7fe fa88 	bl	1e544 <ble_ll_conn_is_empty_pdu>
   20034:	b920      	cbnz	r0, 20040 <ble_ll_conn_rx_isr_end+0x10c>
                ++connsm->enc_data.rx_pkt_cntr;
   20036:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   2003a:	3301      	adds	r3, #1
   2003c:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
        ble_ll_trace_u32x2(BLE_LL_TRACE_ID_CONN_RX, connsm->tx_seqnum,
   20040:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   20044:	f009 0104 	and.w	r1, r9, #4
        if (CONN_F_EMPTY_PDU_TXD(connsm) || connsm->cur_tx_pdu) {
   20048:	7863      	ldrb	r3, [r4, #1]
   2004a:	f013 0320 	ands.w	r3, r3, #32
   2004e:	d102      	bne.n	20056 <ble_ll_conn_rx_isr_end+0x122>
   20050:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   20054:	b160      	cbz	r0, 20070 <ble_ll_conn_rx_isr_end+0x13c>
            if ((hdr_nesn && conn_sn) || (!hdr_nesn && !conn_sn)) {
   20056:	b101      	cbz	r1, 2005a <ble_ll_conn_rx_isr_end+0x126>
   20058:	b952      	cbnz	r2, 20070 <ble_ll_conn_rx_isr_end+0x13c>
   2005a:	b901      	cbnz	r1, 2005e <ble_ll_conn_rx_isr_end+0x12a>
   2005c:	b142      	cbz	r2, 20070 <ble_ll_conn_rx_isr_end+0x13c>
                connsm->tx_seqnum ^= 1;
   2005e:	f082 0201 	eor.w	r2, r2, #1
   20062:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
                if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   20066:	b173      	cbz	r3, 20086 <ble_ll_conn_rx_isr_end+0x152>
                    CONN_F_EMPTY_PDU_TXD(connsm) = 0;
   20068:	7863      	ldrb	r3, [r4, #1]
   2006a:	f36f 1345 	bfc	r3, #5, #1
   2006e:	7063      	strb	r3, [r4, #1]
        if (BLE_LL_LLID_IS_CTRL(hdr_byte) &&
   20070:	9b00      	ldr	r3, [sp, #0]
   20072:	2b03      	cmp	r3, #3
   20074:	d052      	beq.n	2011c <ble_ll_conn_rx_isr_end+0x1e8>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   20076:	79e3      	ldrb	r3, [r4, #7]
   20078:	2b01      	cmp	r3, #1
   2007a:	d05d      	beq.n	20138 <ble_ll_conn_rx_isr_end+0x204>
            reply = 1;
   2007c:	2301      	movs	r3, #1
   2007e:	e783      	b.n	1ff88 <ble_ll_conn_rx_isr_end+0x54>
            opcode = rxbuf[2];
   20080:	78b3      	ldrb	r3, [r6, #2]
   20082:	9301      	str	r3, [sp, #4]
   20084:	e7c2      	b.n	2000c <ble_ll_conn_rx_isr_end+0xd8>
                txpdu = connsm->cur_tx_pdu;
   20086:	f8d4 80ac 	ldr.w	r8, [r4, #172]	; 0xac
                if (txpdu) {
   2008a:	f1b8 0f00 	cmp.w	r8, #0
   2008e:	d0ef      	beq.n	20070 <ble_ll_conn_rx_isr_end+0x13c>
                    if (connsm->enc_data.tx_encrypted) {
   20090:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   20094:	b123      	cbz	r3, 200a0 <ble_ll_conn_rx_isr_end+0x16c>
                        ++connsm->enc_data.tx_pkt_cntr;
   20096:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   2009a:	3301      	adds	r3, #1
   2009c:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
                    if ((txhdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK)
   200a0:	f898 301b 	ldrb.w	r3, [r8, #27]
   200a4:	f003 0303 	and.w	r3, r3, #3
   200a8:	2b03      	cmp	r3, #3
   200aa:	d01c      	beq.n	200e6 <ble_ll_conn_rx_isr_end+0x1b2>
                    txhdr->txinfo.offset += txhdr->txinfo.pyld_len;
   200ac:	f898 101a 	ldrb.w	r1, [r8, #26]
   200b0:	f898 3019 	ldrb.w	r3, [r8, #25]
   200b4:	440b      	add	r3, r1
   200b6:	b2db      	uxtb	r3, r3
   200b8:	f888 3019 	strb.w	r3, [r8, #25]
                    if (txhdr->txinfo.offset >= OS_MBUF_PKTLEN(txpdu)) {
   200bc:	b298      	uxth	r0, r3
   200be:	f8b8 2010 	ldrh.w	r2, [r8, #16]
   200c2:	4290      	cmp	r0, r2
   200c4:	d321      	bcc.n	2010a <ble_ll_conn_rx_isr_end+0x1d6>
                        if (txhdr->txinfo.pyld_len != 0) {
   200c6:	b139      	cbz	r1, 200d8 <ble_ll_conn_rx_isr_end+0x1a4>
                            ++connsm->completed_pkts;
   200c8:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   200cc:	3301      	adds	r3, #1
   200ce:	b29b      	uxth	r3, r3
   200d0:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
                            if (connsm->completed_pkts > 2) {
   200d4:	2b02      	cmp	r3, #2
   200d6:	d812      	bhi.n	200fe <ble_ll_conn_rx_isr_end+0x1ca>
                        os_mbuf_free_chain(txpdu);
   200d8:	4640      	mov	r0, r8
   200da:	f7ea f8f3 	bl	a2c4 <os_mbuf_free_chain>
                        connsm->cur_tx_pdu = NULL;
   200de:	2300      	movs	r3, #0
   200e0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   200e4:	e7c4      	b.n	20070 <ble_ll_conn_rx_isr_end+0x13c>
                        connsm->cur_tx_pdu = NULL;
   200e6:	2300      	movs	r3, #0
   200e8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
                        rc = ble_ll_ctrl_tx_done(txpdu, connsm);
   200ec:	4621      	mov	r1, r4
   200ee:	4640      	mov	r0, r8
   200f0:	f002 f893 	bl	2221a <ble_ll_ctrl_tx_done>
                        if (rc) {
   200f4:	4680      	mov	r8, r0
   200f6:	2800      	cmp	r0, #0
   200f8:	f47f af55 	bne.w	1ffa6 <ble_ll_conn_rx_isr_end+0x72>
   200fc:	e7b8      	b.n	20070 <ble_ll_conn_rx_isr_end+0x13c>
    os_eventq_put(&evq->evq, &ev->ev);
   200fe:	481e      	ldr	r0, [pc, #120]	; (20178 <ble_ll_conn_rx_isr_end+0x244>)
   20100:	4601      	mov	r1, r0
   20102:	3868      	subs	r0, #104	; 0x68
   20104:	f7e9 ffb1 	bl	a06a <os_eventq_put>
   20108:	e7e6      	b.n	200d8 <ble_ll_conn_rx_isr_end+0x1a4>
                        rem_bytes = OS_MBUF_PKTLEN(txpdu) - txhdr->txinfo.offset;
   2010a:	b2d2      	uxtb	r2, r2
   2010c:	1ad3      	subs	r3, r2, r3
                        rem_bytes = ble_ll_conn_adjust_pyld_len(connsm, rem_bytes);
   2010e:	b2d9      	uxtb	r1, r3
   20110:	4620      	mov	r0, r4
   20112:	f7fe fac0 	bl	1e696 <ble_ll_conn_adjust_pyld_len>
                        txhdr->txinfo.pyld_len = rem_bytes;
   20116:	f888 001a 	strb.w	r0, [r8, #26]
   2011a:	e7a9      	b.n	20070 <ble_ll_conn_rx_isr_end+0x13c>
        if (BLE_LL_LLID_IS_CTRL(hdr_byte) &&
   2011c:	9b01      	ldr	r3, [sp, #4]
   2011e:	2b02      	cmp	r3, #2
   20120:	d1a9      	bne.n	20076 <ble_ll_conn_rx_isr_end+0x142>
            (opcode == BLE_LL_CTRL_TERMINATE_IND) &&
   20122:	f1ba 0f02 	cmp.w	sl, #2
   20126:	d1a6      	bne.n	20076 <ble_ll_conn_rx_isr_end+0x142>
            connsm->csmflags.cfbit.terminate_ind_rxd = 1;
   20128:	7823      	ldrb	r3, [r4, #0]
   2012a:	f043 0304 	orr.w	r3, r3, #4
   2012e:	7023      	strb	r3, [r4, #0]
            connsm->rxd_disconnect_reason = rxbuf[3];
   20130:	78f3      	ldrb	r3, [r6, #3]
   20132:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   20136:	e79e      	b.n	20076 <ble_ll_conn_rx_isr_end+0x142>
            reply = CONN_F_LAST_TXD_MD(connsm) || (hdr_byte & BLE_LL_DATA_HDR_MD_MASK);
   20138:	7863      	ldrb	r3, [r4, #1]
   2013a:	f013 0f40 	tst.w	r3, #64	; 0x40
   2013e:	d104      	bne.n	2014a <ble_ll_conn_rx_isr_end+0x216>
   20140:	f019 0f10 	tst.w	r9, #16
   20144:	d004      	beq.n	20150 <ble_ll_conn_rx_isr_end+0x21c>
   20146:	2301      	movs	r3, #1
   20148:	e000      	b.n	2014c <ble_ll_conn_rx_isr_end+0x218>
   2014a:	2301      	movs	r3, #1
   2014c:	b2db      	uxtb	r3, r3
   2014e:	e71b      	b.n	1ff88 <ble_ll_conn_rx_isr_end+0x54>
   20150:	2300      	movs	r3, #0
   20152:	e7fb      	b.n	2014c <ble_ll_conn_rx_isr_end+0x218>
    rc = -1;
   20154:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   20158:	e725      	b.n	1ffa6 <ble_ll_conn_rx_isr_end+0x72>
   2015a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2015e:	e722      	b.n	1ffa6 <ble_ll_conn_rx_isr_end+0x72>
    rc = -1;
   20160:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   20164:	e71f      	b.n	1ffa6 <ble_ll_conn_rx_isr_end+0x72>
   20166:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2016a:	e71c      	b.n	1ffa6 <ble_ll_conn_rx_isr_end+0x72>
        ble_ll_conn_current_sm_over(connsm);
   2016c:	4620      	mov	r0, r4
   2016e:	f7fe fa29 	bl	1e5c4 <ble_ll_conn_current_sm_over>
    return rc;
   20172:	e724      	b.n	1ffbe <ble_ll_conn_rx_isr_end+0x8a>
   20174:	200087f0 	.word	0x200087f0
   20178:	20008550 	.word	0x20008550

0002017c <ble_ll_conn_enqueue_pkt>:
 * @param om
 */
void
ble_ll_conn_enqueue_pkt(struct ble_ll_conn_sm *connsm, struct os_mbuf *om,
                        uint8_t hdr_byte, uint8_t length)
{
   2017c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2017e:	4605      	mov	r5, r0
   20180:	460c      	mov	r4, r1
    struct os_mbuf_pkthdr *pkthdr;
    struct ble_mbuf_hdr *ble_hdr;
    int lifo;

    /* Set mbuf length and packet length if a control PDU */
    if (hdr_byte == BLE_LL_LLID_CTRL) {
   20182:	2a03      	cmp	r2, #3
   20184:	d00d      	beq.n	201a2 <ble_ll_conn_enqueue_pkt+0x26>
        OS_MBUF_PKTHDR(om)->omp_len = length;
    }

    /* Set BLE transmit header */
    ble_hdr = BLE_MBUF_HDR_PTR(om);
    ble_hdr->txinfo.flags = 0;
   20186:	2300      	movs	r3, #0
   20188:	7623      	strb	r3, [r4, #24]
    ble_hdr->txinfo.offset = 0;
   2018a:	7663      	strb	r3, [r4, #25]
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   2018c:	76e2      	strb	r2, [r4, #27]
     * need to do this now.
     */

    lifo = 0;
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   2018e:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   20192:	2b02      	cmp	r3, #2
   20194:	d923      	bls.n	201de <ble_ll_conn_enqueue_pkt+0x62>

        /*
         * If this is one of the following types we need to insert it at
         * head of queue.
         */
        llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   20196:	f002 0203 	and.w	r2, r2, #3
        if (llid == BLE_LL_LLID_CTRL) {
   2019a:	2a03      	cmp	r2, #3
   2019c:	d005      	beq.n	201aa <ble_ll_conn_enqueue_pkt+0x2e>
    lifo = 0;
   2019e:	2600      	movs	r6, #0
   201a0:	e01e      	b.n	201e0 <ble_ll_conn_enqueue_pkt+0x64>
        om->om_len = length;
   201a2:	b29b      	uxth	r3, r3
   201a4:	80cb      	strh	r3, [r1, #6]
        OS_MBUF_PKTHDR(om)->omp_len = length;
   201a6:	820b      	strh	r3, [r1, #16]
   201a8:	e7ed      	b.n	20186 <ble_ll_conn_enqueue_pkt+0xa>
            switch (om->om_data[0]) {
   201aa:	6822      	ldr	r2, [r4, #0]
   201ac:	7812      	ldrb	r2, [r2, #0]
   201ae:	3a02      	subs	r2, #2
   201b0:	2a0f      	cmp	r2, #15
   201b2:	d809      	bhi.n	201c8 <ble_ll_conn_enqueue_pkt+0x4c>
   201b4:	e8df f002 	tbb	[pc, r2]
   201b8:	220f0f22 	.word	0x220f0f22
   201bc:	08080822 	.word	0x08080822
   201c0:	22080a08 	.word	0x22080a08
   201c4:	22080808 	.word	0x22080808
    lifo = 0;
   201c8:	2600      	movs	r6, #0
   201ca:	e009      	b.n	201e0 <ble_ll_conn_enqueue_pkt+0x64>
            case BLE_LL_CTRL_START_ENC_REQ:
            case BLE_LL_CTRL_START_ENC_RSP:
                lifo = 1;
                break;
            case BLE_LL_CTRL_PAUSE_ENC_RSP:
                if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   201cc:	79eb      	ldrb	r3, [r5, #7]
   201ce:	2b01      	cmp	r3, #1
   201d0:	d016      	beq.n	20200 <ble_ll_conn_enqueue_pkt+0x84>
    lifo = 0;
   201d2:	2600      	movs	r6, #0
   201d4:	e004      	b.n	201e0 <ble_ll_conn_enqueue_pkt+0x64>
            case BLE_LL_CTRL_ENC_REQ:
            case BLE_LL_CTRL_ENC_RSP:
                /* If encryption has been paused, we don't want to send any packets from the
                 * TX queue, as they would go unencrypted.
                 */
                if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSED) {
   201d6:	2b05      	cmp	r3, #5
   201d8:	d014      	beq.n	20204 <ble_ll_conn_enqueue_pkt+0x88>
    lifo = 0;
   201da:	2600      	movs	r6, #0
   201dc:	e000      	b.n	201e0 <ble_ll_conn_enqueue_pkt+0x64>
   201de:	2600      	movs	r6, #0
        }
    }
#endif

    /* Add to transmit queue for the connection */
    pkthdr = OS_MBUF_PKTHDR(om);
   201e0:	f104 0710 	add.w	r7, r4, #16
    OS_ENTER_CRITICAL(sr);
   201e4:	f7eb f9e6 	bl	b5b4 <os_arch_save_sr>
    if (lifo) {
   201e8:	b196      	cbz	r6, 20210 <ble_ll_conn_enqueue_pkt+0x94>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   201ea:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
   201ee:	6163      	str	r3, [r4, #20]
   201f0:	b153      	cbz	r3, 20208 <ble_ll_conn_enqueue_pkt+0x8c>
   201f2:	f8c5 70b0 	str.w	r7, [r5, #176]	; 0xb0
    } else {
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
    }
    OS_EXIT_CRITICAL(sr);
   201f6:	f7eb f9e3 	bl	b5c0 <os_arch_restore_sr>
}
   201fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lifo = 1;
   201fc:	2601      	movs	r6, #1
   201fe:	e7ef      	b.n	201e0 <ble_ll_conn_enqueue_pkt+0x64>
                    lifo = 1;
   20200:	2601      	movs	r6, #1
   20202:	e7ed      	b.n	201e0 <ble_ll_conn_enqueue_pkt+0x64>
                    lifo = 1;
   20204:	2601      	movs	r6, #1
   20206:	e7eb      	b.n	201e0 <ble_ll_conn_enqueue_pkt+0x64>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   20208:	3414      	adds	r4, #20
   2020a:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
   2020e:	e7f0      	b.n	201f2 <ble_ll_conn_enqueue_pkt+0x76>
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
   20210:	2300      	movs	r3, #0
   20212:	f844 3f14 	str.w	r3, [r4, #20]!
   20216:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2021a:	601f      	str	r7, [r3, #0]
   2021c:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
   20220:	e7e9      	b.n	201f6 <ble_ll_conn_enqueue_pkt+0x7a>

00020222 <ble_ll_conn_tx_pkt_in>:
 *
 * @return int
 */
void
ble_ll_conn_tx_pkt_in(struct os_mbuf *om, uint16_t handle, uint16_t length)
{
   20222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20224:	4605      	mov	r5, r0
   20226:	460c      	mov	r4, r1
   20228:	4617      	mov	r7, r2
    uint16_t pb;
    struct ble_ll_conn_sm *connsm;

    /* See if we have an active matching connection handle */
    conn_handle = handle & 0x0FFF;
    connsm = ble_ll_conn_find_active_conn(conn_handle);
   2022a:	f3c1 000b 	ubfx	r0, r1, #0, #12
   2022e:	f7fe ff23 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (connsm) {
   20232:	b160      	cbz	r0, 2024e <ble_ll_conn_tx_pkt_in+0x2c>
   20234:	4606      	mov	r6, r0
        /* Construct LL header in buffer (NOTE: pb already checked) */
        pb = handle & 0x3000;
        if (pb == 0) {
   20236:	f414 5f40 	tst.w	r4, #12288	; 0x3000
   2023a:	d006      	beq.n	2024a <ble_ll_conn_tx_pkt_in+0x28>
            hdr_byte = BLE_LL_LLID_DATA_START;
        } else {
            hdr_byte = BLE_LL_LLID_DATA_FRAG;
   2023c:	2201      	movs	r2, #1

        /* Add to total l2cap pdus enqueue */
        STATS_INC(ble_ll_conn_stats, l2cap_enqueued);

        /* Clear flags field in BLE header */
        ble_ll_conn_enqueue_pkt(connsm, om, hdr_byte, length);
   2023e:	b2fb      	uxtb	r3, r7
   20240:	4629      	mov	r1, r5
   20242:	4630      	mov	r0, r6
   20244:	f7ff ff9a 	bl	2017c <ble_ll_conn_enqueue_pkt>
    } else {
        /* No connection found! */
        STATS_INC(ble_ll_conn_stats, handle_not_found);
        os_mbuf_free_chain(om);
    }
}
   20248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            hdr_byte = BLE_LL_LLID_DATA_START;
   2024a:	2202      	movs	r2, #2
   2024c:	e7f7      	b.n	2023e <ble_ll_conn_tx_pkt_in+0x1c>
        os_mbuf_free_chain(om);
   2024e:	4628      	mov	r0, r5
   20250:	f7ea f838 	bl	a2c4 <os_mbuf_free_chain>
}
   20254:	e7f8      	b.n	20248 <ble_ll_conn_tx_pkt_in+0x26>
	...

00020258 <ble_ll_conn_set_global_chanmap>:
 * @param num_used_chans
 * @param chanmap
 */
void
ble_ll_conn_set_global_chanmap(uint8_t num_used_chans, const uint8_t *chanmap)
{
   20258:	b538      	push	{r3, r4, r5, lr}
   2025a:	4605      	mov	r5, r0
   2025c:	460c      	mov	r4, r1
    struct ble_ll_conn_sm *connsm;
    struct ble_ll_conn_global_params *conn_params;

    /* Do nothing if same channel map */
    conn_params = &g_ble_ll_conn_params;
    if (!memcmp(conn_params->master_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN)) {
   2025e:	2205      	movs	r2, #5
   20260:	480c      	ldr	r0, [pc, #48]	; (20294 <ble_ll_conn_set_global_chanmap+0x3c>)
   20262:	f7eb faf1 	bl	b848 <memcmp>
   20266:	b900      	cbnz	r0, 2026a <ble_ll_conn_set_global_chanmap+0x12>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
        }
    }
}
   20268:	bd38      	pop	{r3, r4, r5, pc}
    conn_params->num_used_chans = num_used_chans;
   2026a:	4b0a      	ldr	r3, [pc, #40]	; (20294 <ble_ll_conn_set_global_chanmap+0x3c>)
   2026c:	715d      	strb	r5, [r3, #5]
    memcpy(conn_params->master_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN);
   2026e:	6820      	ldr	r0, [r4, #0]
   20270:	6018      	str	r0, [r3, #0]
   20272:	7922      	ldrb	r2, [r4, #4]
   20274:	711a      	strb	r2, [r3, #4]
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   20276:	4b08      	ldr	r3, [pc, #32]	; (20298 <ble_ll_conn_set_global_chanmap+0x40>)
   20278:	681c      	ldr	r4, [r3, #0]
   2027a:	e001      	b.n	20280 <ble_ll_conn_set_global_chanmap+0x28>
   2027c:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   20280:	2c00      	cmp	r4, #0
   20282:	d0f1      	beq.n	20268 <ble_ll_conn_set_global_chanmap+0x10>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   20284:	79e3      	ldrb	r3, [r4, #7]
   20286:	2b01      	cmp	r3, #1
   20288:	d1f8      	bne.n	2027c <ble_ll_conn_set_global_chanmap+0x24>
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
   2028a:	2101      	movs	r1, #1
   2028c:	4620      	mov	r0, r4
   2028e:	f001 fbfe 	bl	21a8e <ble_ll_ctrl_proc_start>
   20292:	e7f3      	b.n	2027c <ble_ll_conn_set_global_chanmap+0x24>
   20294:	200087fc 	.word	0x200087fc
   20298:	200087e4 	.word	0x200087e4

0002029c <ble_ll_conn_slave_start>:
 * @return 0: connection not started; 1 connecton started
 */
int
ble_ll_conn_slave_start(uint8_t *rxbuf, uint8_t pat, struct ble_mbuf_hdr *rxhdr,
                        bool force_csa2)
{
   2029c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   202a0:	4606      	mov	r6, r0
   202a2:	4689      	mov	r9, r1
   202a4:	4617      	mov	r7, r2
   202a6:	4698      	mov	r8, r3
    uint8_t *inita;
    uint8_t *dptr;
    struct ble_ll_conn_sm *connsm;

    /* Ignore the connection request if we are already connected*/
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   202a8:	1c85      	adds	r5, r0, #2
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   202aa:	4b6d      	ldr	r3, [pc, #436]	; (20460 <ble_ll_conn_slave_start+0x1c4>)
   202ac:	681c      	ldr	r4, [r3, #0]
   202ae:	e007      	b.n	202c0 <ble_ll_conn_slave_start+0x24>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
                if (connsm->peer_addr_type & 1) {
                    return 0;
                }
            } else {
                if ((connsm->peer_addr_type & 1) == 0) {
   202b0:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
   202b4:	f012 0f01 	tst.w	r2, #1
   202b8:	f000 8084 	beq.w	203c4 <ble_ll_conn_slave_start+0x128>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   202bc:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   202c0:	b194      	cbz	r4, 202e8 <ble_ll_conn_slave_start+0x4c>
        if (!memcmp(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN)) {
   202c2:	2206      	movs	r2, #6
   202c4:	4629      	mov	r1, r5
   202c6:	f104 0093 	add.w	r0, r4, #147	; 0x93
   202ca:	f7eb fabd 	bl	b848 <memcmp>
   202ce:	4603      	mov	r3, r0
   202d0:	2800      	cmp	r0, #0
   202d2:	d1f3      	bne.n	202bc <ble_ll_conn_slave_start+0x20>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   202d4:	7832      	ldrb	r2, [r6, #0]
   202d6:	f012 0f40 	tst.w	r2, #64	; 0x40
   202da:	d0e9      	beq.n	202b0 <ble_ll_conn_slave_start+0x14>
                if (connsm->peer_addr_type & 1) {
   202dc:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
   202e0:	f012 0f01 	tst.w	r2, #1
   202e4:	d0ea      	beq.n	202bc <ble_ll_conn_slave_start+0x20>
   202e6:	e06d      	b.n	203c4 <ble_ll_conn_slave_start+0x128>
            }
        }
    }

    /* Allocate a connection. If none available, dont do anything */
    connsm = ble_ll_conn_sm_get();
   202e8:	f7fe fed8 	bl	1f09c <ble_ll_conn_sm_get>
    if (connsm == NULL) {
   202ec:	4604      	mov	r4, r0
   202ee:	2800      	cmp	r0, #0
   202f0:	f000 80b3 	beq.w	2045a <ble_ll_conn_slave_start+0x1be>

    /* Set the pointer at the start of the connection data */
    dptr = rxbuf + BLE_LL_CONN_REQ_ADVA_OFF + BLE_DEV_ADDR_LEN;

    /* Set connection state machine information */
    connsm->access_addr = get_le32(dptr);
   202f4:	f106 000e 	add.w	r0, r6, #14
   202f8:	f7fb fc9e 	bl	1bc38 <get_le32>
   202fc:	6560      	str	r0, [r4, #84]	; 0x54
    crcinit = dptr[6];
   202fe:	7d32      	ldrb	r2, [r6, #20]
    crcinit = (crcinit << 8) | dptr[5];
   20300:	7cf3      	ldrb	r3, [r6, #19]
   20302:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    crcinit = (crcinit << 8) | dptr[4];
   20306:	7cb3      	ldrb	r3, [r6, #18]
   20308:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    connsm->crcinit = crcinit;
   2030c:	65a3      	str	r3, [r4, #88]	; 0x58
    connsm->tx_win_size = dptr[7];
   2030e:	7d73      	ldrb	r3, [r6, #21]
   20310:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    connsm->tx_win_off = get_le16(dptr + 8);
   20314:	f106 0016 	add.w	r0, r6, #22
   20318:	f7fb fc89 	bl	1bc2e <get_le16>
   2031c:	f8a4 0072 	strh.w	r0, [r4, #114]	; 0x72
    connsm->conn_itvl = get_le16(dptr + 10);
   20320:	f106 0018 	add.w	r0, r6, #24
   20324:	f7fb fc83 	bl	1bc2e <get_le16>
   20328:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    connsm->slave_latency = get_le16(dptr + 12);
   2032c:	f106 001a 	add.w	r0, r6, #26
   20330:	f7fb fc7d 	bl	1bc2e <get_le16>
   20334:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    connsm->supervision_tmo = get_le16(dptr + 14);
   20338:	f106 001c 	add.w	r0, r6, #28
   2033c:	f7fb fc77 	bl	1bc2e <get_le16>
   20340:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    memcpy(&connsm->chanmap, dptr + 16, BLE_LL_CONN_CHMAP_LEN);
   20344:	f104 0220 	add.w	r2, r4, #32
   20348:	4633      	mov	r3, r6
   2034a:	f853 1f1e 	ldr.w	r1, [r3, #30]!
   2034e:	6221      	str	r1, [r4, #32]
   20350:	791b      	ldrb	r3, [r3, #4]
   20352:	7113      	strb	r3, [r2, #4]
    connsm->hop_inc = dptr[21] & 0x1F;
   20354:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   20358:	f003 031f 	and.w	r3, r3, #31
   2035c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    connsm->master_sca = dptr[21] >> 5;
   20360:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   20364:	095b      	lsrs	r3, r3, #5
   20366:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

    /* Error check parameters */
    if ((connsm->tx_win_off > connsm->conn_itvl) ||
   2036a:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   2036e:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   20372:	4299      	cmp	r1, r3
   20374:	d81e      	bhi.n	203b4 <ble_ll_conn_slave_start+0x118>
   20376:	2b05      	cmp	r3, #5
   20378:	d91c      	bls.n	203b4 <ble_ll_conn_slave_start+0x118>
        (connsm->conn_itvl < BLE_HCI_CONN_ITVL_MIN) ||
   2037a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2037e:	d819      	bhi.n	203b4 <ble_ll_conn_slave_start+0x118>
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   20380:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
   20384:	b1b1      	cbz	r1, 203b4 <ble_ll_conn_slave_start+0x118>
        (connsm->slave_latency > BLE_LL_CONN_SLAVE_LATENCY_MAX)) {
   20386:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   2038a:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
   2038e:	d211      	bcs.n	203b4 <ble_ll_conn_slave_start+0x118>
        goto err_slave_start;
    }

    /* Slave latency cannot cause a supervision timeout */
    temp = (connsm->slave_latency + 1) * (connsm->conn_itvl * 2) *
   20390:	f640 1cc4 	movw	ip, #2500	; 0x9c4
   20394:	fb0c fc03 	mul.w	ip, ip, r3
   20398:	fb0e cc0c 	mla	ip, lr, ip, ip
            BLE_LL_CONN_ITVL_USECS;
    if ((connsm->supervision_tmo * 10000) <= temp ) {
   2039c:	f242 7e10 	movw	lr, #10000	; 0x2710
   203a0:	fb0e f000 	mul.w	r0, lr, r0
   203a4:	4560      	cmp	r0, ip
   203a6:	d905      	bls.n	203b4 <ble_ll_conn_slave_start+0x118>

    /*
     * The transmit window must be less than or equal to the lesser of 10
     * msecs or the connection interval minus 1.25 msecs.
     */
    temp = connsm->conn_itvl - 1;
   203a8:	3b01      	subs	r3, #1
    if (temp > 8) {
   203aa:	2b08      	cmp	r3, #8
   203ac:	d900      	bls.n	203b0 <ble_ll_conn_slave_start+0x114>
        temp = 8;
   203ae:	2308      	movs	r3, #8
    }
    if (connsm->tx_win_size > temp) {
   203b0:	4299      	cmp	r1, r3
   203b2:	d90a      	bls.n	203ca <ble_ll_conn_slave_start+0x12e>
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
    }
    return rc;

err_slave_start:
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   203b4:	2300      	movs	r3, #0
   203b6:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
   203ba:	4a2a      	ldr	r2, [pc, #168]	; (20464 <ble_ll_conn_slave_start+0x1c8>)
   203bc:	6851      	ldr	r1, [r2, #4]
   203be:	600c      	str	r4, [r1, #0]
   203c0:	34b8      	adds	r4, #184	; 0xb8
   203c2:	6054      	str	r4, [r2, #4]
    STATS_INC(ble_ll_conn_stats, slave_rxd_bad_conn_req_params);
    return 0;
}
   203c4:	4618      	mov	r0, r3
   203c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN);
   203ca:	682b      	ldr	r3, [r5, #0]
   203cc:	f8c4 3093 	str.w	r3, [r4, #147]	; 0x93
   203d0:	88ab      	ldrh	r3, [r5, #4]
   203d2:	f8a4 3097 	strh.w	r3, [r4, #151]	; 0x97
    connsm->peer_addr_type = pat;
   203d6:	f884 9092 	strb.w	r9, [r4, #146]	; 0x92
    connsm->num_used_chans = ble_ll_utils_calc_num_used_chans(connsm->chanmap);
   203da:	4610      	mov	r0, r2
   203dc:	f005 f8d9 	bl	25592 <ble_ll_utils_calc_num_used_chans>
   203e0:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    if (connsm->num_used_chans < 2) {
   203e4:	2801      	cmp	r0, #1
   203e6:	d9e5      	bls.n	203b4 <ble_ll_conn_slave_start+0x118>
    connsm->conn_role = BLE_LL_CONN_ROLE_SLAVE;
   203e8:	2302      	movs	r3, #2
   203ea:	71e3      	strb	r3, [r4, #7]
    ble_ll_conn_sm_new(connsm);
   203ec:	4620      	mov	r0, r4
   203ee:	f7ff f897 	bl	1f520 <ble_ll_conn_sm_new>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   203f2:	f1b8 0f00 	cmp.w	r8, #0
   203f6:	d105      	bne.n	20404 <ble_ll_conn_slave_start+0x168>
   203f8:	7833      	ldrb	r3, [r6, #0]
   203fa:	f013 0f20 	tst.w	r3, #32
   203fe:	d020      	beq.n	20442 <ble_ll_conn_slave_start+0x1a6>
   20400:	2101      	movs	r1, #1
   20402:	e000      	b.n	20406 <ble_ll_conn_slave_start+0x16a>
   20404:	2101      	movs	r1, #1
    ble_ll_conn_set_csa(connsm,
   20406:	4620      	mov	r0, r4
   20408:	f7ff f820 	bl	1f44c <ble_ll_conn_set_csa>
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   2040c:	4b16      	ldr	r3, [pc, #88]	; (20468 <ble_ll_conn_slave_start+0x1cc>)
   2040e:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    rc = ble_ll_conn_created(connsm, rxhdr);
   20412:	4639      	mov	r1, r7
   20414:	4620      	mov	r0, r4
   20416:	f7fe ff91 	bl	1f33c <ble_ll_conn_created>
    if (!rc) {
   2041a:	4603      	mov	r3, r0
   2041c:	2800      	cmp	r0, #0
   2041e:	d1d1      	bne.n	203c4 <ble_ll_conn_slave_start+0x128>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   20420:	4a0f      	ldr	r2, [pc, #60]	; (20460 <ble_ll_conn_slave_start+0x1c4>)
   20422:	6812      	ldr	r2, [r2, #0]
   20424:	42a2      	cmp	r2, r4
   20426:	d10f      	bne.n	20448 <ble_ll_conn_slave_start+0x1ac>
   20428:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   2042c:	4a0c      	ldr	r2, [pc, #48]	; (20460 <ble_ll_conn_slave_start+0x1c4>)
   2042e:	6011      	str	r1, [r2, #0]
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   20430:	2200      	movs	r2, #0
   20432:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   20436:	4a0b      	ldr	r2, [pc, #44]	; (20464 <ble_ll_conn_slave_start+0x1c8>)
   20438:	6851      	ldr	r1, [r2, #4]
   2043a:	600c      	str	r4, [r1, #0]
   2043c:	34b8      	adds	r4, #184	; 0xb8
   2043e:	6054      	str	r4, [r2, #4]
   20440:	e7c0      	b.n	203c4 <ble_ll_conn_slave_start+0x128>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   20442:	2100      	movs	r1, #0
   20444:	e7df      	b.n	20406 <ble_ll_conn_slave_start+0x16a>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   20446:	460a      	mov	r2, r1
   20448:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   2044c:	42a1      	cmp	r1, r4
   2044e:	d1fa      	bne.n	20446 <ble_ll_conn_slave_start+0x1aa>
   20450:	f8d1 10b8 	ldr.w	r1, [r1, #184]	; 0xb8
   20454:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
   20458:	e7ea      	b.n	20430 <ble_ll_conn_slave_start+0x194>
        return 0;
   2045a:	2300      	movs	r3, #0
   2045c:	e7b2      	b.n	203c4 <ble_ll_conn_slave_start+0x128>
   2045e:	bf00      	nop
   20460:	200087e4 	.word	0x200087e4
   20464:	200087f4 	.word	0x200087f4
   20468:	0001eb3d 	.word	0x0001eb3d

0002046c <ble_ll_conn_module_reset>:
 *
 * Context: Link Layer task
 */
void
ble_ll_conn_module_reset(void)
{
   2046c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t maxbytes;
    struct ble_ll_conn_sm *connsm;
    struct ble_ll_conn_global_params *conn_params;

    /* Kill the current one first (if one is running) */
    if (g_ble_ll_conn_cur_sm) {
   2046e:	4b28      	ldr	r3, [pc, #160]	; (20510 <ble_ll_conn_module_reset+0xa4>)
   20470:	6818      	ldr	r0, [r3, #0]
   20472:	b118      	cbz	r0, 2047c <ble_ll_conn_module_reset+0x10>
        connsm = g_ble_ll_conn_cur_sm;
        g_ble_ll_conn_cur_sm = NULL;
   20474:	2100      	movs	r1, #0
   20476:	6019      	str	r1, [r3, #0]
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   20478:	f7ff f90e 	bl	1f698 <ble_ll_conn_end>
    }

    /* Free the global connection complete event if there is one */
    if (g_ble_ll_conn_comp_ev) {
   2047c:	4b25      	ldr	r3, [pc, #148]	; (20514 <ble_ll_conn_module_reset+0xa8>)
   2047e:	6818      	ldr	r0, [r3, #0]
   20480:	b120      	cbz	r0, 2048c <ble_ll_conn_module_reset+0x20>
        ble_hci_trans_buf_free(g_ble_ll_conn_comp_ev);
   20482:	f7f6 f8e5 	bl	16650 <ble_hci_trans_buf_free>
        g_ble_ll_conn_comp_ev = NULL;
   20486:	4b23      	ldr	r3, [pc, #140]	; (20514 <ble_ll_conn_module_reset+0xa8>)
   20488:	2200      	movs	r2, #0
   2048a:	601a      	str	r2, [r3, #0]
    }

    /* Reset connection we are attempting to create */
    g_ble_ll_conn_create_sm = NULL;
   2048c:	4b22      	ldr	r3, [pc, #136]	; (20518 <ble_ll_conn_module_reset+0xac>)
   2048e:	2200      	movs	r2, #0
   20490:	601a      	str	r2, [r3, #0]

    /* Now go through and end all the connections */
    while (1) {
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   20492:	4b22      	ldr	r3, [pc, #136]	; (2051c <ble_ll_conn_module_reset+0xb0>)
   20494:	6818      	ldr	r0, [r3, #0]
        if (!connsm) {
   20496:	b118      	cbz	r0, 204a0 <ble_ll_conn_module_reset+0x34>
            break;
        }
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   20498:	2100      	movs	r1, #0
   2049a:	f7ff f8fd 	bl	1f698 <ble_ll_conn_end>
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   2049e:	e7f8      	b.n	20492 <ble_ll_conn_module_reset+0x26>
    }

    /* Get the maximum supported PHY PDU size from the PHY */
    max_phy_pyld = ble_phy_max_data_pdu_pyld();
   204a0:	f006 f936 	bl	26710 <ble_phy_max_data_pdu_pyld>
   204a4:	4605      	mov	r5, r0

    /* Configure the global LL parameters */
    conn_params = &g_ble_ll_conn_params;

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_RX_BYTES), max_phy_pyld);
   204a6:	4606      	mov	r6, r0
   204a8:	28fb      	cmp	r0, #251	; 0xfb
   204aa:	bf28      	it	cs
   204ac:	26fb      	movcs	r6, #251	; 0xfb
   204ae:	b2f6      	uxtb	r6, r6
    conn_params->supp_max_rx_octets = maxbytes;
   204b0:	4c1b      	ldr	r4, [pc, #108]	; (20520 <ble_ll_conn_module_reset+0xb4>)
   204b2:	71e6      	strb	r6, [r4, #7]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_rx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_rx_time = MAX_TIME_UNCODED(maxbytes);
   204b4:	1d37      	adds	r7, r6, #4
   204b6:	2101      	movs	r1, #1
   204b8:	4638      	mov	r0, r7
   204ba:	f7fc ff2f 	bl	1d31c <ble_ll_pdu_tx_time_get>
   204be:	82a0      	strh	r0, [r4, #20]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_TX_BYTES), max_phy_pyld);
    conn_params->supp_max_tx_octets = maxbytes;
   204c0:	71a6      	strb	r6, [r4, #6]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_tx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   204c2:	2101      	movs	r1, #1
   204c4:	4638      	mov	r0, r7
   204c6:	f7fc ff29 	bl	1d31c <ble_ll_pdu_tx_time_get>
   204ca:	8260      	strh	r0, [r4, #18]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_CONN_INIT_MAX_TX_BYTES), max_phy_pyld);
   204cc:	2d1b      	cmp	r5, #27
   204ce:	bf28      	it	cs
   204d0:	251b      	movcs	r5, #27
   204d2:	b2ed      	uxtb	r5, r5
    conn_params->conn_init_max_tx_octets = maxbytes;
   204d4:	7225      	strb	r5, [r4, #8]
    conn_params->conn_init_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   204d6:	3504      	adds	r5, #4
   204d8:	2101      	movs	r1, #1
   204da:	4628      	mov	r0, r5
   204dc:	f7fc ff1e 	bl	1d31c <ble_ll_pdu_tx_time_get>
   204e0:	81a0      	strh	r0, [r4, #12]
    conn_params->conn_init_max_tx_time_uncoded = MAX_TIME_UNCODED(maxbytes);
   204e2:	2101      	movs	r1, #1
   204e4:	4628      	mov	r0, r5
   204e6:	f7fc ff19 	bl	1d31c <ble_ll_pdu_tx_time_get>
   204ea:	81e0      	strh	r0, [r4, #14]
    conn_params->conn_init_max_tx_time_coded = MAX_TIME_CODED(maxbytes);
   204ec:	2103      	movs	r1, #3
   204ee:	4628      	mov	r0, r5
   204f0:	f7fc ff14 	bl	1d31c <ble_ll_pdu_tx_time_get>
   204f4:	8220      	strh	r0, [r4, #16]

    conn_params->sugg_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   204f6:	231b      	movs	r3, #27
   204f8:	7263      	strb	r3, [r4, #9]
    conn_params->sugg_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   204fa:	f44f 73a4 	mov.w	r3, #328	; 0x148
   204fe:	8163      	strh	r3, [r4, #10]

    /* Mask in all channels by default */
    conn_params->num_used_chans = BLE_PHY_NUM_DATA_CHANS;
   20500:	2325      	movs	r3, #37	; 0x25
   20502:	7163      	strb	r3, [r4, #5]
    memset(conn_params->master_chan_map, 0xff, BLE_LL_CONN_CHMAP_LEN - 1);
   20504:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20508:	6023      	str	r3, [r4, #0]
    conn_params->master_chan_map[4] = 0x1f;
   2050a:	231f      	movs	r3, #31
   2050c:	7123      	strb	r3, [r4, #4]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_CTRL_TO_HOST_FLOW_CONTROL)
    g_ble_ll_conn_cth_flow.enabled = false;
    g_ble_ll_conn_cth_flow.max_buffers = 1;
    g_ble_ll_conn_cth_flow.num_buffers = 1;
#endif
}
   2050e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20510:	200087f0 	.word	0x200087f0
   20514:	200087e8 	.word	0x200087e8
   20518:	200087ec 	.word	0x200087ec
   2051c:	200087e4 	.word	0x200087e4
   20520:	200087fc 	.word	0x200087fc

00020524 <ble_ll_conn_module_init>:

/* Initialize the connection module */
void
ble_ll_conn_module_init(void)
{
   20524:	b538      	push	{r3, r4, r5, lr}
    int rc;
    uint16_t i;
    struct ble_ll_conn_sm *connsm;

    /* Initialize list of active conections */
    SLIST_INIT(&g_ble_ll_conn_active_list);
   20526:	2400      	movs	r4, #0
   20528:	4b10      	ldr	r3, [pc, #64]	; (2056c <ble_ll_conn_module_init+0x48>)
   2052a:	601c      	str	r4, [r3, #0]
    STAILQ_INIT(&g_ble_ll_conn_free_list);
   2052c:	4b10      	ldr	r3, [pc, #64]	; (20570 <ble_ll_conn_module_init+0x4c>)
   2052e:	601c      	str	r4, [r3, #0]
   20530:	605b      	str	r3, [r3, #4]
    /*
     * Take all the connections off the free memory pool and add them to
     * the free connection list, assigning handles in linear order. Note:
     * the specification allows a handle of zero; we just avoid using it.
     */
    connsm = &g_ble_ll_conn_sm[0];
   20532:	4d10      	ldr	r5, [pc, #64]	; (20574 <ble_ll_conn_module_init+0x50>)
    for (i = 0; i < MYNEWT_VAL(BLE_MAX_CONNECTIONS); ++i) {
   20534:	b114      	cbz	r4, 2053c <ble_ll_conn_module_init+0x18>
    ble_npl_event_init(&g_ble_ll_conn_cth_flow_error_ev,
                       ble_ll_conn_cth_flow_error_fn, NULL);
#endif

    /* Call reset to finish reset of initialization */
    ble_ll_conn_module_reset();
   20536:	f7ff ff99 	bl	2046c <ble_ll_conn_module_reset>
}
   2053a:	bd38      	pop	{r3, r4, r5, pc}
        memset(connsm, 0, sizeof(struct ble_ll_conn_sm));
   2053c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   20540:	2100      	movs	r1, #0
   20542:	4628      	mov	r0, r5
   20544:	f7eb f9cd 	bl	b8e2 <memset>
        connsm->conn_handle = i + 1;
   20548:	3401      	adds	r4, #1
   2054a:	b2a4      	uxth	r4, r4
   2054c:	80ac      	strh	r4, [r5, #4]
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   2054e:	4b08      	ldr	r3, [pc, #32]	; (20570 <ble_ll_conn_module_init+0x4c>)
   20550:	685a      	ldr	r2, [r3, #4]
   20552:	6015      	str	r5, [r2, #0]
   20554:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
   20558:	605a      	str	r2, [r3, #4]
        connsm->conn_sch.sched_type = BLE_LL_SCHED_TYPE_CONN;
   2055a:	2303      	movs	r3, #3
   2055c:	f885 30dc 	strb.w	r3, [r5, #220]	; 0xdc
        connsm->conn_sch.cb_arg = connsm;
   20560:	f8c5 50e8 	str.w	r5, [r5, #232]	; 0xe8
        ++connsm;
   20564:	f505 75d0 	add.w	r5, r5, #416	; 0x1a0
   20568:	e7e4      	b.n	20534 <ble_ll_conn_module_init+0x10>
   2056a:	bf00      	nop
   2056c:	200087e4 	.word	0x200087e4
   20570:	200087f4 	.word	0x200087f4
   20574:	20008818 	.word	0x20008818

00020578 <ble_ll_conn_hci_chk_scan_params>:

static int
ble_ll_conn_hci_chk_scan_params(uint16_t itvl, uint16_t window)
{
    /* Check interval and window */
    if ((itvl < BLE_HCI_SCAN_ITVL_MIN) ||
   20578:	1f03      	subs	r3, r0, #4
   2057a:	b29b      	uxth	r3, r3
   2057c:	f643 72fc 	movw	r2, #16380	; 0x3ffc
   20580:	4293      	cmp	r3, r2
   20582:	d80a      	bhi.n	2059a <ble_ll_conn_hci_chk_scan_params+0x22>
        (itvl > BLE_HCI_SCAN_ITVL_MAX) ||
   20584:	2903      	cmp	r1, #3
   20586:	d90a      	bls.n	2059e <ble_ll_conn_hci_chk_scan_params+0x26>
        (window < BLE_HCI_SCAN_WINDOW_MIN) ||
   20588:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   2058c:	d809      	bhi.n	205a2 <ble_ll_conn_hci_chk_scan_params+0x2a>
        (window > BLE_HCI_SCAN_WINDOW_MAX) ||
   2058e:	4288      	cmp	r0, r1
   20590:	d301      	bcc.n	20596 <ble_ll_conn_hci_chk_scan_params+0x1e>
        (itvl < window)) {
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    return 0;
   20592:	2000      	movs	r0, #0
}
   20594:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20596:	2012      	movs	r0, #18
   20598:	4770      	bx	lr
   2059a:	2012      	movs	r0, #18
   2059c:	4770      	bx	lr
   2059e:	2012      	movs	r0, #18
   205a0:	4770      	bx	lr
   205a2:	2012      	movs	r0, #18
   205a4:	4770      	bx	lr
	...

000205a8 <ble_ll_init_alloc_conn_comp_ev>:
{
   205a8:	b508      	push	{r3, lr}
    evbuf = g_ble_ll_conn_comp_ev;
   205aa:	4b08      	ldr	r3, [pc, #32]	; (205cc <ble_ll_init_alloc_conn_comp_ev+0x24>)
   205ac:	681b      	ldr	r3, [r3, #0]
    if (evbuf == NULL) {
   205ae:	b10b      	cbz	r3, 205b4 <ble_ll_init_alloc_conn_comp_ev+0xc>
    rc = 0;
   205b0:	2000      	movs	r0, #0
}
   205b2:	bd08      	pop	{r3, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   205b4:	2002      	movs	r0, #2
   205b6:	f7f6 f81d 	bl	165f4 <ble_hci_trans_buf_alloc>
        if (!evbuf) {
   205ba:	b118      	cbz	r0, 205c4 <ble_ll_init_alloc_conn_comp_ev+0x1c>
            g_ble_ll_conn_comp_ev = evbuf;
   205bc:	4a03      	ldr	r2, [pc, #12]	; (205cc <ble_ll_init_alloc_conn_comp_ev+0x24>)
   205be:	6010      	str	r0, [r2, #0]
    rc = 0;
   205c0:	2000      	movs	r0, #0
   205c2:	e7f6      	b.n	205b2 <ble_ll_init_alloc_conn_comp_ev+0xa>
            rc = -1;
   205c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   205c8:	e7f3      	b.n	205b2 <ble_ll_init_alloc_conn_comp_ev+0xa>
   205ca:	bf00      	nop
   205cc:	200087e8 	.word	0x200087e8

000205d0 <ble_ll_conn_hci_chk_conn_params>:
    if ((itvl_min > itvl_max) ||
   205d0:	4288      	cmp	r0, r1
   205d2:	d81c      	bhi.n	2060e <ble_ll_conn_hci_chk_conn_params+0x3e>
   205d4:	2805      	cmp	r0, #5
   205d6:	d91c      	bls.n	20612 <ble_ll_conn_hci_chk_conn_params+0x42>
        (itvl_min < BLE_HCI_CONN_ITVL_MIN) ||
   205d8:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   205dc:	d81b      	bhi.n	20616 <ble_ll_conn_hci_chk_conn_params+0x46>
        (itvl_max > BLE_HCI_CONN_ITVL_MAX) ||
   205de:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   205e2:	d21a      	bcs.n	2061a <ble_ll_conn_hci_chk_conn_params+0x4a>
        (latency > BLE_HCI_CONN_LATENCY_MAX) ||
   205e4:	2b09      	cmp	r3, #9
   205e6:	d91a      	bls.n	2061e <ble_ll_conn_hci_chk_conn_params+0x4e>
        (spvn_tmo < BLE_HCI_CONN_SPVN_TIMEOUT_MIN) ||
   205e8:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   205ec:	d819      	bhi.n	20622 <ble_ll_conn_hci_chk_conn_params+0x52>
    spvn_tmo_usecs *= (BLE_HCI_CONN_SPVN_TMO_UNITS * 1000);
   205ee:	f242 7010 	movw	r0, #10000	; 0x2710
   205f2:	fb00 f303 	mul.w	r3, r0, r3
    min_spvn_tmo_usecs = (uint32_t)itvl_max * 2 * BLE_LL_CONN_ITVL_USECS;
   205f6:	f640 10c4 	movw	r0, #2500	; 0x9c4
   205fa:	fb00 f101 	mul.w	r1, r0, r1
    min_spvn_tmo_usecs *= (1 + latency);
   205fe:	fb02 1101 	mla	r1, r2, r1, r1
    if (spvn_tmo_usecs <= min_spvn_tmo_usecs) {
   20602:	428b      	cmp	r3, r1
   20604:	d901      	bls.n	2060a <ble_ll_conn_hci_chk_conn_params+0x3a>
    return BLE_ERR_SUCCESS;
   20606:	2000      	movs	r0, #0
}
   20608:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2060a:	2012      	movs	r0, #18
   2060c:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2060e:	2012      	movs	r0, #18
   20610:	4770      	bx	lr
   20612:	2012      	movs	r0, #18
   20614:	4770      	bx	lr
   20616:	2012      	movs	r0, #18
   20618:	4770      	bx	lr
   2061a:	2012      	movs	r0, #18
   2061c:	4770      	bx	lr
   2061e:	2012      	movs	r0, #18
   20620:	4770      	bx	lr
   20622:	2012      	movs	r0, #18
   20624:	4770      	bx	lr

00020626 <ble_ll_conn_process_conn_params>:
#endif

static int
ble_ll_conn_process_conn_params(const struct ble_hci_le_rem_conn_param_rr_cp *cmd,
                                struct ble_ll_conn_sm *connsm)
{
   20626:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;
    struct hci_conn_update *hcu;

    /* Retrieve command data */
    hcu = &connsm->conn_param_req;
    hcu->handle = connsm->conn_handle;
   20628:	888b      	ldrh	r3, [r1, #4]
   2062a:	f8a1 3168 	strh.w	r3, [r1, #360]	; 0x168

    BLE_LL_ASSERT(connsm->conn_handle == le16toh(cmd->conn_handle));
   2062e:	8802      	ldrh	r2, [r0, #0]
   20630:	4293      	cmp	r3, r2
   20632:	d11d      	bne.n	20670 <ble_ll_conn_process_conn_params+0x4a>

    hcu->conn_itvl_min = le16toh(cmd->conn_itvl_min);
   20634:	8844      	ldrh	r4, [r0, #2]
   20636:	f8a1 416a 	strh.w	r4, [r1, #362]	; 0x16a
    hcu->conn_itvl_max = le16toh(cmd->conn_itvl_max);
   2063a:	8885      	ldrh	r5, [r0, #4]
   2063c:	f8a1 516c 	strh.w	r5, [r1, #364]	; 0x16c
    hcu->conn_latency = le16toh(cmd->conn_latency);
   20640:	88c2      	ldrh	r2, [r0, #6]
   20642:	f8a1 216e 	strh.w	r2, [r1, #366]	; 0x16e
    hcu->supervision_timeout = le16toh(cmd->supervision_timeout);
   20646:	8903      	ldrh	r3, [r0, #8]
   20648:	f8a1 3170 	strh.w	r3, [r1, #368]	; 0x170
    hcu->min_ce_len = le16toh(cmd->min_ce);
   2064c:	8947      	ldrh	r7, [r0, #10]
   2064e:	b2be      	uxth	r6, r7
   20650:	f8a1 7172 	strh.w	r7, [r1, #370]	; 0x172
    hcu->max_ce_len = le16toh(cmd->max_ce);
   20654:	8980      	ldrh	r0, [r0, #12]
   20656:	b287      	uxth	r7, r0
   20658:	f8a1 0174 	strh.w	r0, [r1, #372]	; 0x174

    /* Check that parameter values are in range */
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   2065c:	4629      	mov	r1, r5
   2065e:	4620      	mov	r0, r4
   20660:	f7ff ffb6 	bl	205d0 <ble_ll_conn_hci_chk_conn_params>
                                         hcu->conn_itvl_max,
                                         hcu->conn_latency,
                                         hcu->supervision_timeout);

    /* Check valid min/max ce length */
    if (rc || (hcu->min_ce_len > hcu->max_ce_len)) {
   20664:	4603      	mov	r3, r0
   20666:	b978      	cbnz	r0, 20688 <ble_ll_conn_process_conn_params+0x62>
   20668:	42be      	cmp	r6, r7
   2066a:	d80b      	bhi.n	20684 <ble_ll_conn_process_conn_params+0x5e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }
    return rc;
}
   2066c:	4618      	mov	r0, r3
   2066e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BLE_LL_ASSERT(connsm->conn_handle == le16toh(cmd->conn_handle));
   20670:	f7e7 fda6 	bl	81c0 <hal_debugger_connected>
   20674:	b100      	cbz	r0, 20678 <ble_ll_conn_process_conn_params+0x52>
   20676:	be01      	bkpt	0x0001
   20678:	2300      	movs	r3, #0
   2067a:	461a      	mov	r2, r3
   2067c:	4619      	mov	r1, r3
   2067e:	4618      	mov	r0, r3
   20680:	f7e9 f9a6 	bl	99d0 <__assert_func>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20684:	2312      	movs	r3, #18
   20686:	e7f1      	b.n	2066c <ble_ll_conn_process_conn_params+0x46>
   20688:	2312      	movs	r3, #18
   2068a:	e7ef      	b.n	2066c <ble_ll_conn_process_conn_params+0x46>

0002068c <ble_ll_conn_comp_event_send>:
{
   2068c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BLE_LL_ASSERT(evbuf);
   2068e:	b382      	cbz	r2, 206f2 <ble_ll_conn_comp_event_send+0x66>
   20690:	4605      	mov	r5, r0
   20692:	460e      	mov	r6, r1
   20694:	461f      	mov	r7, r3
   20696:	4614      	mov	r4, r2
    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE)) {
   20698:	200a      	movs	r0, #10
   2069a:	f002 fa21 	bl	22ae0 <ble_ll_hci_is_le_event_enabled>
   2069e:	2800      	cmp	r0, #0
   206a0:	d067      	beq.n	20772 <ble_ll_conn_comp_event_send+0xe6>
        hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   206a2:	233e      	movs	r3, #62	; 0x3e
   206a4:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*enh_ev);
   206a6:	221f      	movs	r2, #31
   206a8:	7062      	strb	r2, [r4, #1]
        memset(enh_ev, 0, sizeof(*enh_ev));
   206aa:	2100      	movs	r1, #0
   206ac:	1ca0      	adds	r0, r4, #2
   206ae:	f7eb f918 	bl	b8e2 <memset>
        enh_ev->subev_code = BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE;
   206b2:	230a      	movs	r3, #10
   206b4:	70a3      	strb	r3, [r4, #2]
        enh_ev->status = status;
   206b6:	70e6      	strb	r6, [r4, #3]
        if (connsm) {
   206b8:	2d00      	cmp	r5, #0
   206ba:	d04b      	beq.n	20754 <ble_ll_conn_comp_event_send+0xc8>
            enh_ev->conn_handle = htole16(connsm->conn_handle);
   206bc:	88ab      	ldrh	r3, [r5, #4]
   206be:	80a3      	strh	r3, [r4, #4]
            enh_ev->role = connsm->conn_role - 1;
   206c0:	79eb      	ldrb	r3, [r5, #7]
   206c2:	3b01      	subs	r3, #1
   206c4:	71a3      	strb	r3, [r4, #6]
            enh_ev->peer_addr_type = connsm->peer_addr_type;
   206c6:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   206ca:	71e3      	strb	r3, [r4, #7]
            memcpy(enh_ev->peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   206cc:	462b      	mov	r3, r5
   206ce:	f853 2f93 	ldr.w	r2, [r3, #147]!
   206d2:	60a2      	str	r2, [r4, #8]
   206d4:	889b      	ldrh	r3, [r3, #4]
   206d6:	81a3      	strh	r3, [r4, #12]
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   206d8:	79eb      	ldrb	r3, [r5, #7]
   206da:	2b01      	cmp	r3, #1
   206dc:	d113      	bne.n	20706 <ble_ll_conn_comp_event_send+0x7a>
                if (connsm->inita_identity_used) {
   206de:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   206e2:	b9cb      	cbnz	r3, 20718 <ble_ll_conn_comp_event_send+0x8c>
                } else  if (connsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   206e4:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
   206e8:	2b01      	cmp	r3, #1
   206ea:	d915      	bls.n	20718 <ble_ll_conn_comp_event_send+0x8c>
                    rpa = ble_ll_scan_get_local_rpa();
   206ec:	f004 f9e4 	bl	24ab8 <ble_ll_scan_get_local_rpa>
   206f0:	e00c      	b.n	2070c <ble_ll_conn_comp_event_send+0x80>
    BLE_LL_ASSERT(evbuf);
   206f2:	f7e7 fd65 	bl	81c0 <hal_debugger_connected>
   206f6:	b100      	cbz	r0, 206fa <ble_ll_conn_comp_event_send+0x6e>
   206f8:	be01      	bkpt	0x0001
   206fa:	2300      	movs	r3, #0
   206fc:	461a      	mov	r2, r3
   206fe:	4619      	mov	r1, r3
   20700:	4618      	mov	r0, r3
   20702:	f7e9 f965 	bl	99d0 <__assert_func>
                rpa = ble_ll_adv_get_local_rpa(advsm);
   20706:	4638      	mov	r0, r7
   20708:	f7fd fec2 	bl	1e490 <ble_ll_adv_get_local_rpa>
            if (rpa) {
   2070c:	b120      	cbz	r0, 20718 <ble_ll_conn_comp_event_send+0x8c>
                memcpy(enh_ev->local_rpa, rpa, BLE_DEV_ADDR_LEN);
   2070e:	6803      	ldr	r3, [r0, #0]
   20710:	f8c4 300e 	str.w	r3, [r4, #14]
   20714:	8883      	ldrh	r3, [r0, #4]
   20716:	8263      	strh	r3, [r4, #18]
             if (connsm->peer_addr_type < BLE_HCI_CONN_PEER_ADDR_PUBLIC_IDENT
   20718:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   2071c:	2b01      	cmp	r3, #1
   2071e:	d91d      	bls.n	2075c <ble_ll_conn_comp_event_send+0xd0>
             if (enh_ev->peer_addr_type > BLE_HCI_CONN_PEER_ADDR_RANDOM) {
   20720:	79e3      	ldrb	r3, [r4, #7]
   20722:	2b01      	cmp	r3, #1
   20724:	d909      	bls.n	2073a <ble_ll_conn_comp_event_send+0xae>
                 if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   20726:	79eb      	ldrb	r3, [r5, #7]
   20728:	2b01      	cmp	r3, #1
   2072a:	d01f      	beq.n	2076c <ble_ll_conn_comp_event_send+0xe0>
                     rpa = ble_ll_adv_get_peer_rpa(advsm);
   2072c:	4638      	mov	r0, r7
   2072e:	f7fd fec6 	bl	1e4be <ble_ll_adv_get_peer_rpa>
                 memcpy(enh_ev->peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   20732:	6803      	ldr	r3, [r0, #0]
   20734:	6163      	str	r3, [r4, #20]
   20736:	8883      	ldrh	r3, [r0, #4]
   20738:	8323      	strh	r3, [r4, #24]
            enh_ev->conn_itvl = htole16(connsm->conn_itvl);
   2073a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   2073e:	8363      	strh	r3, [r4, #26]
            enh_ev->conn_latency = htole16(connsm->slave_latency);
   20740:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
   20744:	83a3      	strh	r3, [r4, #28]
            enh_ev->supervision_timeout = htole16(connsm->supervision_tmo);
   20746:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   2074a:	83e3      	strh	r3, [r4, #30]
            enh_ev->mca = connsm->master_sca;
   2074c:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   20750:	f884 3020 	strb.w	r3, [r4, #32]
        ble_ll_hci_event_send(hci_ev);
   20754:	4620      	mov	r0, r4
   20756:	f002 f920 	bl	2299a <ble_ll_hci_event_send>
}
   2075a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                     && (connsm->rpa_index > -1)) {
   2075c:	f995 3009 	ldrsb.w	r3, [r5, #9]
   20760:	2b00      	cmp	r3, #0
   20762:	dbdd      	blt.n	20720 <ble_ll_conn_comp_event_send+0x94>
                 enh_ev->peer_addr_type += 2;
   20764:	79e3      	ldrb	r3, [r4, #7]
   20766:	3302      	adds	r3, #2
   20768:	71e3      	strb	r3, [r4, #7]
   2076a:	e7d9      	b.n	20720 <ble_ll_conn_comp_event_send+0x94>
                     rpa = ble_ll_scan_get_peer_rpa();
   2076c:	f004 f9a0 	bl	24ab0 <ble_ll_scan_get_peer_rpa>
   20770:	e7df      	b.n	20732 <ble_ll_conn_comp_event_send+0xa6>
    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_COMPLETE)) {
   20772:	2001      	movs	r0, #1
   20774:	f002 f9b4 	bl	22ae0 <ble_ll_hci_is_le_event_enabled>
   20778:	b3a0      	cbz	r0, 207e4 <ble_ll_conn_comp_event_send+0x158>
        hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   2077a:	233e      	movs	r3, #62	; 0x3e
   2077c:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*ev);
   2077e:	2313      	movs	r3, #19
   20780:	7063      	strb	r3, [r4, #1]
        memset(ev, 0, sizeof(*ev));
   20782:	2200      	movs	r2, #0
   20784:	f8c4 2002 	str.w	r2, [r4, #2]
   20788:	f8c4 2006 	str.w	r2, [r4, #6]
   2078c:	f8c4 200a 	str.w	r2, [r4, #10]
   20790:	f8c4 200e 	str.w	r2, [r4, #14]
   20794:	f8c4 2011 	str.w	r2, [r4, #17]
        ev->subev_code = BLE_HCI_LE_SUBEV_CONN_COMPLETE;
   20798:	2301      	movs	r3, #1
   2079a:	70a3      	strb	r3, [r4, #2]
        ev->status = status;
   2079c:	70e6      	strb	r6, [r4, #3]
        if (connsm) {
   2079e:	b1ed      	cbz	r5, 207dc <ble_ll_conn_comp_event_send+0x150>
            ev->conn_handle = htole16(connsm->conn_handle);
   207a0:	88ab      	ldrh	r3, [r5, #4]
   207a2:	80a3      	strh	r3, [r4, #4]
            ev->role = connsm->conn_role - 1;
   207a4:	79eb      	ldrb	r3, [r5, #7]
   207a6:	3b01      	subs	r3, #1
   207a8:	71a3      	strb	r3, [r4, #6]
            ev->peer_addr_type = connsm->peer_addr_type;
   207aa:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   207ae:	71e3      	strb	r3, [r4, #7]
            if (ev->peer_addr_type > BLE_HCI_CONN_PEER_ADDR_RANDOM) {
   207b0:	2b01      	cmp	r3, #1
   207b2:	d901      	bls.n	207b8 <ble_ll_conn_comp_event_send+0x12c>
                ev->peer_addr_type -= 2;
   207b4:	3b02      	subs	r3, #2
   207b6:	71e3      	strb	r3, [r4, #7]
            memcpy(ev->peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   207b8:	462b      	mov	r3, r5
   207ba:	f853 2f93 	ldr.w	r2, [r3, #147]!
   207be:	60a2      	str	r2, [r4, #8]
   207c0:	889b      	ldrh	r3, [r3, #4]
   207c2:	81a3      	strh	r3, [r4, #12]
            ev->conn_itvl = htole16(connsm->conn_itvl);
   207c4:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   207c8:	81e3      	strh	r3, [r4, #14]
            ev->conn_latency = htole16(connsm->slave_latency);
   207ca:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
   207ce:	8223      	strh	r3, [r4, #16]
            ev->supervision_timeout = htole16(connsm->supervision_tmo);
   207d0:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   207d4:	8263      	strh	r3, [r4, #18]
            ev->mca = connsm->master_sca;
   207d6:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   207da:	7523      	strb	r3, [r4, #20]
        ble_ll_hci_event_send(hci_ev);
   207dc:	4620      	mov	r0, r4
   207de:	f002 f8dc 	bl	2299a <ble_ll_hci_event_send>
        return;
   207e2:	e7ba      	b.n	2075a <ble_ll_conn_comp_event_send+0xce>
    ble_hci_trans_buf_free(evbuf);
   207e4:	4620      	mov	r0, r4
   207e6:	f7f5 ff33 	bl	16650 <ble_hci_trans_buf_free>
   207ea:	e7b6      	b.n	2075a <ble_ll_conn_comp_event_send+0xce>

000207ec <ble_ll_conn_hci_cancel_conn_complete_event>:
/* this is called from same context after cmd complete is send so it is
 * safe to use g_ble_ll_conn_comp_ev
 */
static void
ble_ll_conn_hci_cancel_conn_complete_event(void)
{
   207ec:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(g_ble_ll_conn_comp_ev);
   207ee:	4b0b      	ldr	r3, [pc, #44]	; (2081c <ble_ll_conn_hci_cancel_conn_complete_event+0x30>)
   207f0:	681a      	ldr	r2, [r3, #0]
   207f2:	b142      	cbz	r2, 20806 <ble_ll_conn_hci_cancel_conn_complete_event+0x1a>

    ble_ll_conn_comp_event_send(NULL, BLE_ERR_UNK_CONN_ID,
   207f4:	2300      	movs	r3, #0
   207f6:	2102      	movs	r1, #2
   207f8:	4618      	mov	r0, r3
   207fa:	f7ff ff47 	bl	2068c <ble_ll_conn_comp_event_send>
                                g_ble_ll_conn_comp_ev, NULL);
    g_ble_ll_conn_comp_ev = NULL;
   207fe:	4b07      	ldr	r3, [pc, #28]	; (2081c <ble_ll_conn_hci_cancel_conn_complete_event+0x30>)
   20800:	2200      	movs	r2, #0
   20802:	601a      	str	r2, [r3, #0]
}
   20804:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(g_ble_ll_conn_comp_ev);
   20806:	f7e7 fcdb 	bl	81c0 <hal_debugger_connected>
   2080a:	b100      	cbz	r0, 2080e <ble_ll_conn_hci_cancel_conn_complete_event+0x22>
   2080c:	be01      	bkpt	0x0001
   2080e:	2300      	movs	r3, #0
   20810:	461a      	mov	r2, r3
   20812:	4619      	mov	r1, r3
   20814:	4618      	mov	r0, r3
   20816:	f7e9 f8db 	bl	99d0 <__assert_func>
   2081a:	bf00      	nop
   2081c:	200087e8 	.word	0x200087e8

00020820 <ble_ll_conn_num_comp_pkts_event_send>:
{
   20820:	b570      	push	{r4, r5, r6, lr}
    if (connsm == NULL) {
   20822:	b320      	cbz	r0, 2086e <ble_ll_conn_num_comp_pkts_event_send+0x4e>
   20824:	4604      	mov	r4, r0
    return os_time_get();
   20826:	f7ea fe47 	bl	b4b8 <os_time_get>
    if ((ble_npl_stime_t)(ble_npl_time_get() - g_ble_ll_last_num_comp_pkt_evt) <
   2082a:	4b36      	ldr	r3, [pc, #216]	; (20904 <ble_ll_conn_num_comp_pkts_event_send+0xe4>)
   2082c:	681b      	ldr	r3, [r3, #0]
   2082e:	1ac0      	subs	r0, r0, r3
   20830:	28ff      	cmp	r0, #255	; 0xff
   20832:	d81c      	bhi.n	2086e <ble_ll_conn_num_comp_pkts_event_send+0x4e>
        if (connsm->completed_pkts) {
   20834:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   20838:	2b00      	cmp	r3, #0
   2083a:	d05f      	beq.n	208fc <ble_ll_conn_num_comp_pkts_event_send+0xdc>
            hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   2083c:	2002      	movs	r0, #2
   2083e:	f7f5 fed9 	bl	165f4 <ble_hci_trans_buf_alloc>
            if (hci_ev) {
   20842:	2800      	cmp	r0, #0
   20844:	d05a      	beq.n	208fc <ble_ll_conn_num_comp_pkts_event_send+0xdc>
                hci_ev->opcode = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   20846:	2213      	movs	r2, #19
   20848:	7002      	strb	r2, [r0, #0]
                hci_ev->length = sizeof(*ev);
   2084a:	2201      	movs	r2, #1
   2084c:	7042      	strb	r2, [r0, #1]
                ev->count = 1;
   2084e:	7082      	strb	r2, [r0, #2]
                ev->completed[0].handle = htole16(connsm->conn_handle);
   20850:	88a2      	ldrh	r2, [r4, #4]
   20852:	f8a0 2003 	strh.w	r2, [r0, #3]
                ev->completed[0].packets = htole16(connsm->completed_pkts);
   20856:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   2085a:	f8a0 2005 	strh.w	r2, [r0, #5]
                hci_ev->length += sizeof(ev->completed[0]);
   2085e:	2205      	movs	r2, #5
   20860:	7042      	strb	r2, [r0, #1]
                connsm->completed_pkts = 0;
   20862:	2200      	movs	r2, #0
   20864:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
                ble_ll_hci_event_send(hci_ev);
   20868:	f002 f897 	bl	2299a <ble_ll_hci_event_send>
   2086c:	e046      	b.n	208fc <ble_ll_conn_num_comp_pkts_event_send+0xdc>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   2086e:	4b26      	ldr	r3, [pc, #152]	; (20908 <ble_ll_conn_num_comp_pkts_event_send+0xe8>)
   20870:	681c      	ldr	r4, [r3, #0]
    event_sent = 0;
   20872:	2600      	movs	r6, #0
    hci_ev = NULL;
   20874:	4632      	mov	r2, r6
    ev = NULL;
   20876:	4635      	mov	r5, r6
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   20878:	e018      	b.n	208ac <ble_ll_conn_num_comp_pkts_event_send+0x8c>
            if (!hci_ev) {
   2087a:	b322      	cbz	r2, 208c6 <ble_ll_conn_num_comp_pkts_event_send+0xa6>
            ev->completed[ev->count].handle = htole16(connsm->conn_handle);
   2087c:	782b      	ldrb	r3, [r5, #0]
   2087e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   20882:	88a1      	ldrh	r1, [r4, #4]
   20884:	f8a3 1001 	strh.w	r1, [r3, #1]
            ev->completed[ev->count].packets = htole16(connsm->completed_pkts);
   20888:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   2088c:	f8a3 1003 	strh.w	r1, [r3, #3]
            hci_ev->length += sizeof(ev->completed[ev->count]);
   20890:	7853      	ldrb	r3, [r2, #1]
   20892:	3304      	adds	r3, #4
   20894:	7053      	strb	r3, [r2, #1]
            ev->count++;
   20896:	782b      	ldrb	r3, [r5, #0]
   20898:	3301      	adds	r3, #1
   2089a:	702b      	strb	r3, [r5, #0]
            connsm->completed_pkts = 0;
   2089c:	2300      	movs	r3, #0
   2089e:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
            if (ev->count == max_handles) {
   208a2:	782b      	ldrb	r3, [r5, #0]
   208a4:	2b11      	cmp	r3, #17
   208a6:	d01b      	beq.n	208e0 <ble_ll_conn_num_comp_pkts_event_send+0xc0>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   208a8:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   208ac:	b1f4      	cbz	r4, 208ec <ble_ll_conn_num_comp_pkts_event_send+0xcc>
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   208ae:	79a3      	ldrb	r3, [r4, #6]
   208b0:	2b00      	cmp	r3, #0
   208b2:	d0f9      	beq.n	208a8 <ble_ll_conn_num_comp_pkts_event_send+0x88>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   208b4:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   208b8:	2b00      	cmp	r3, #0
   208ba:	d1de      	bne.n	2087a <ble_ll_conn_num_comp_pkts_event_send+0x5a>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   208bc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   208c0:	2b00      	cmp	r3, #0
   208c2:	d1da      	bne.n	2087a <ble_ll_conn_num_comp_pkts_event_send+0x5a>
   208c4:	e7f0      	b.n	208a8 <ble_ll_conn_num_comp_pkts_event_send+0x88>
                hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   208c6:	2002      	movs	r0, #2
   208c8:	f7f5 fe94 	bl	165f4 <ble_hci_trans_buf_alloc>
                if (!hci_ev) {
   208cc:	4602      	mov	r2, r0
   208ce:	b168      	cbz	r0, 208ec <ble_ll_conn_num_comp_pkts_event_send+0xcc>
                hci_ev->opcode = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   208d0:	2313      	movs	r3, #19
   208d2:	7003      	strb	r3, [r0, #0]
                hci_ev->length = sizeof(*ev);
   208d4:	2301      	movs	r3, #1
   208d6:	7043      	strb	r3, [r0, #1]
                ev = (void *)hci_ev->data;
   208d8:	1c85      	adds	r5, r0, #2
                ev->count = 0;
   208da:	2300      	movs	r3, #0
   208dc:	7083      	strb	r3, [r0, #2]
   208de:	e7cd      	b.n	2087c <ble_ll_conn_num_comp_pkts_event_send+0x5c>
                ble_ll_hci_event_send(hci_ev);
   208e0:	4610      	mov	r0, r2
   208e2:	f002 f85a 	bl	2299a <ble_ll_hci_event_send>
                event_sent = 1;
   208e6:	2601      	movs	r6, #1
                hci_ev = NULL;
   208e8:	2200      	movs	r2, #0
   208ea:	e7dd      	b.n	208a8 <ble_ll_conn_num_comp_pkts_event_send+0x88>
    if (hci_ev) {
   208ec:	b13a      	cbz	r2, 208fe <ble_ll_conn_num_comp_pkts_event_send+0xde>
        ble_ll_hci_event_send(hci_ev);
   208ee:	4610      	mov	r0, r2
   208f0:	f002 f853 	bl	2299a <ble_ll_hci_event_send>
   208f4:	f7ea fde0 	bl	b4b8 <os_time_get>
        g_ble_ll_last_num_comp_pkt_evt = ble_npl_time_get();
   208f8:	4b02      	ldr	r3, [pc, #8]	; (20904 <ble_ll_conn_num_comp_pkts_event_send+0xe4>)
   208fa:	6018      	str	r0, [r3, #0]
}
   208fc:	bd70      	pop	{r4, r5, r6, pc}
    if (event_sent) {
   208fe:	2e00      	cmp	r6, #0
   20900:	d1f8      	bne.n	208f4 <ble_ll_conn_num_comp_pkts_event_send+0xd4>
   20902:	e7fb      	b.n	208fc <ble_ll_conn_num_comp_pkts_event_send+0xdc>
   20904:	200089b8 	.word	0x200089b8
   20908:	200087e4 	.word	0x200087e4

0002090c <ble_ll_auth_pyld_tmo_event_send>:
{
   2090c:	b510      	push	{r4, lr}
   2090e:	4604      	mov	r4, r0
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_AUTH_PYLD_TMO)) {
   20910:	2057      	movs	r0, #87	; 0x57
   20912:	f002 f911 	bl	22b38 <ble_ll_hci_is_event_enabled>
   20916:	b900      	cbnz	r0, 2091a <ble_ll_auth_pyld_tmo_event_send+0xe>
}
   20918:	bd10      	pop	{r4, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   2091a:	2002      	movs	r0, #2
   2091c:	f7f5 fe6a 	bl	165f4 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   20920:	2800      	cmp	r0, #0
   20922:	d0f9      	beq.n	20918 <ble_ll_auth_pyld_tmo_event_send+0xc>
            hci_ev->opcode = BLE_HCI_EVCODE_AUTH_PYLD_TMO;
   20924:	2257      	movs	r2, #87	; 0x57
   20926:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   20928:	2202      	movs	r2, #2
   2092a:	7042      	strb	r2, [r0, #1]
            ev->conn_handle = htole16(connsm->conn_handle);
   2092c:	88a2      	ldrh	r2, [r4, #4]
   2092e:	8042      	strh	r2, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   20930:	f002 f833 	bl	2299a <ble_ll_hci_event_send>
}
   20934:	e7f0      	b.n	20918 <ble_ll_auth_pyld_tmo_event_send+0xc>

00020936 <ble_ll_disconn_comp_event_send>:
{
   20936:	b538      	push	{r3, r4, r5, lr}
   20938:	4605      	mov	r5, r0
   2093a:	460c      	mov	r4, r1
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DISCONN_CMP)) {
   2093c:	2005      	movs	r0, #5
   2093e:	f002 f8fb 	bl	22b38 <ble_ll_hci_is_event_enabled>
   20942:	b900      	cbnz	r0, 20946 <ble_ll_disconn_comp_event_send+0x10>
}
   20944:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   20946:	2002      	movs	r0, #2
   20948:	f7f5 fe54 	bl	165f4 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   2094c:	2800      	cmp	r0, #0
   2094e:	d0f9      	beq.n	20944 <ble_ll_disconn_comp_event_send+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_DISCONN_CMP;
   20950:	2205      	movs	r2, #5
   20952:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   20954:	2204      	movs	r2, #4
   20956:	7042      	strb	r2, [r0, #1]
            ev->status = BLE_ERR_SUCCESS;
   20958:	2200      	movs	r2, #0
   2095a:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   2095c:	88aa      	ldrh	r2, [r5, #4]
   2095e:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->reason = reason;
   20962:	7144      	strb	r4, [r0, #5]
            ble_ll_hci_event_send(hci_ev);
   20964:	f002 f819 	bl	2299a <ble_ll_hci_event_send>
}
   20968:	e7ec      	b.n	20944 <ble_ll_disconn_comp_event_send+0xe>
	...

0002096c <ble_ll_conn_create>:
{
   2096c:	b510      	push	{r4, lr}
   2096e:	b088      	sub	sp, #32
    struct hci_create_conn hcc = { 0 };
   20970:	2300      	movs	r3, #0
   20972:	9301      	str	r3, [sp, #4]
   20974:	9302      	str	r3, [sp, #8]
   20976:	9303      	str	r3, [sp, #12]
   20978:	9304      	str	r3, [sp, #16]
   2097a:	9305      	str	r3, [sp, #20]
   2097c:	9306      	str	r3, [sp, #24]
   2097e:	f8ad 301c 	strh.w	r3, [sp, #28]
    if (len < sizeof(*cmd)) {
   20982:	2918      	cmp	r1, #24
   20984:	f240 8082 	bls.w	20a8c <ble_ll_conn_create+0x120>
    if (g_ble_ll_conn_create_sm) {
   20988:	4b49      	ldr	r3, [pc, #292]	; (20ab0 <ble_ll_conn_create+0x144>)
   2098a:	681b      	ldr	r3, [r3, #0]
   2098c:	b11b      	cbz	r3, 20996 <ble_ll_conn_create+0x2a>
        return BLE_ERR_CMD_DISALLOWED;
   2098e:	230c      	movs	r3, #12
}
   20990:	4618      	mov	r0, r3
   20992:	b008      	add	sp, #32
   20994:	bd10      	pop	{r4, pc}
   20996:	4604      	mov	r4, r0
    if (ble_ll_scan_enabled()) {
   20998:	f004 f884 	bl	24aa4 <ble_ll_scan_enabled>
   2099c:	2800      	cmp	r0, #0
   2099e:	d177      	bne.n	20a90 <ble_ll_conn_create+0x124>
    hcc.scan_itvl = le16toh(cmd->scan_itvl);
   209a0:	8820      	ldrh	r0, [r4, #0]
   209a2:	f8ad 0004 	strh.w	r0, [sp, #4]
    hcc.scan_window = le16toh(cmd->scan_window);
   209a6:	8861      	ldrh	r1, [r4, #2]
   209a8:	f8ad 1006 	strh.w	r1, [sp, #6]
    rc = ble_ll_conn_hci_chk_scan_params(hcc.scan_itvl, hcc.scan_window);
   209ac:	f7ff fde4 	bl	20578 <ble_ll_conn_hci_chk_scan_params>
    if (rc) {
   209b0:	2800      	cmp	r0, #0
   209b2:	d16f      	bne.n	20a94 <ble_ll_conn_create+0x128>
    hcc.filter_policy = cmd->filter_policy;
   209b4:	7923      	ldrb	r3, [r4, #4]
   209b6:	f88d 3008 	strb.w	r3, [sp, #8]
    if (hcc.filter_policy > BLE_HCI_INITIATOR_FILT_POLICY_MAX) {
   209ba:	2b01      	cmp	r3, #1
   209bc:	d86c      	bhi.n	20a98 <ble_ll_conn_create+0x12c>
    if (hcc.filter_policy == 0) {
   209be:	b963      	cbnz	r3, 209da <ble_ll_conn_create+0x6e>
        hcc.peer_addr_type = cmd->peer_addr_type;
   209c0:	7963      	ldrb	r3, [r4, #5]
   209c2:	f88d 3009 	strb.w	r3, [sp, #9]
        if (hcc.peer_addr_type > BLE_HCI_CONN_PEER_ADDR_MAX) {
   209c6:	2b03      	cmp	r3, #3
   209c8:	d868      	bhi.n	20a9c <ble_ll_conn_create+0x130>
        memcpy(&hcc.peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   209ca:	4623      	mov	r3, r4
   209cc:	f853 2f06 	ldr.w	r2, [r3, #6]!
   209d0:	f8cd 200a 	str.w	r2, [sp, #10]
   209d4:	889b      	ldrh	r3, [r3, #4]
   209d6:	f8ad 300e 	strh.w	r3, [sp, #14]
    hcc.own_addr_type = cmd->own_addr_type;
   209da:	7b23      	ldrb	r3, [r4, #12]
   209dc:	f88d 3010 	strb.w	r3, [sp, #16]
    if (hcc.own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   209e0:	2b03      	cmp	r3, #3
   209e2:	d85d      	bhi.n	20aa0 <ble_ll_conn_create+0x134>
    hcc.conn_itvl_min = le16toh(cmd->min_conn_itvl);
   209e4:	f8b4 000d 	ldrh.w	r0, [r4, #13]
   209e8:	f8ad 0012 	strh.w	r0, [sp, #18]
    hcc.conn_itvl_max = le16toh(cmd->max_conn_itvl);
   209ec:	f8b4 100f 	ldrh.w	r1, [r4, #15]
   209f0:	f8ad 1014 	strh.w	r1, [sp, #20]
    hcc.conn_latency = le16toh(cmd->conn_latency);
   209f4:	f8b4 2011 	ldrh.w	r2, [r4, #17]
   209f8:	f8ad 2016 	strh.w	r2, [sp, #22]
    hcc.supervision_timeout = le16toh(cmd->tmo);
   209fc:	f8b4 3013 	ldrh.w	r3, [r4, #19]
   20a00:	f8ad 3018 	strh.w	r3, [sp, #24]
    rc = ble_ll_conn_hci_chk_conn_params(hcc.conn_itvl_min,
   20a04:	f7ff fde4 	bl	205d0 <ble_ll_conn_hci_chk_conn_params>
    if (rc) {
   20a08:	4603      	mov	r3, r0
   20a0a:	2800      	cmp	r0, #0
   20a0c:	d1c0      	bne.n	20990 <ble_ll_conn_create+0x24>
    hcc.min_ce_len = le16toh(cmd->min_ce);
   20a0e:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   20a12:	b299      	uxth	r1, r3
   20a14:	f8ad 301a 	strh.w	r3, [sp, #26]
    hcc.max_ce_len = le16toh(cmd->max_ce);
   20a18:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   20a1c:	b29a      	uxth	r2, r3
   20a1e:	f8ad 301c 	strh.w	r3, [sp, #28]
    if (hcc.min_ce_len > hcc.max_ce_len) {
   20a22:	4291      	cmp	r1, r2
   20a24:	d83e      	bhi.n	20aa4 <ble_ll_conn_create+0x138>
    if (ble_ll_init_alloc_conn_comp_ev()) {
   20a26:	f7ff fdbf 	bl	205a8 <ble_ll_init_alloc_conn_comp_ev>
   20a2a:	2800      	cmp	r0, #0
   20a2c:	d13c      	bne.n	20aa8 <ble_ll_conn_create+0x13c>
    connsm = ble_ll_conn_sm_get();
   20a2e:	f7fe fb35 	bl	1f09c <ble_ll_conn_sm_get>
    if (connsm == NULL) {
   20a32:	4604      	mov	r4, r0
   20a34:	2800      	cmp	r0, #0
   20a36:	d039      	beq.n	20aac <ble_ll_conn_create+0x140>
    ble_ll_conn_master_init(connsm, &hcc);
   20a38:	a901      	add	r1, sp, #4
   20a3a:	f7fe fd3e 	bl	1f4ba <ble_ll_conn_master_init>
    ble_ll_conn_sm_new(connsm);
   20a3e:	4620      	mov	r0, r4
   20a40:	f7fe fd6e 	bl	1f520 <ble_ll_conn_sm_new>
    rc = ble_ll_scan_initiator_start(&hcc, &connsm->scansm);
   20a44:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
   20a48:	a801      	add	r0, sp, #4
   20a4a:	f003 ffff 	bl	24a4c <ble_ll_scan_initiator_start>
    if (rc) {
   20a4e:	4603      	mov	r3, r0
   20a50:	b1c8      	cbz	r0, 20a86 <ble_ll_conn_create+0x11a>
        SLIST_REMOVE(&g_ble_ll_conn_active_list,connsm,ble_ll_conn_sm,act_sle);
   20a52:	4a18      	ldr	r2, [pc, #96]	; (20ab4 <ble_ll_conn_create+0x148>)
   20a54:	6811      	ldr	r1, [r2, #0]
   20a56:	42a1      	cmp	r1, r4
   20a58:	d104      	bne.n	20a64 <ble_ll_conn_create+0xf8>
   20a5a:	f8d1 10b8 	ldr.w	r1, [r1, #184]	; 0xb8
   20a5e:	6011      	str	r1, [r2, #0]
   20a60:	e008      	b.n	20a74 <ble_ll_conn_create+0x108>
   20a62:	4611      	mov	r1, r2
   20a64:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
   20a68:	42a2      	cmp	r2, r4
   20a6a:	d1fa      	bne.n	20a62 <ble_ll_conn_create+0xf6>
   20a6c:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
   20a70:	f8c1 20b8 	str.w	r2, [r1, #184]	; 0xb8
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   20a74:	2200      	movs	r2, #0
   20a76:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   20a7a:	4a0f      	ldr	r2, [pc, #60]	; (20ab8 <ble_ll_conn_create+0x14c>)
   20a7c:	6851      	ldr	r1, [r2, #4]
   20a7e:	600c      	str	r4, [r1, #0]
   20a80:	34b8      	adds	r4, #184	; 0xb8
   20a82:	6054      	str	r4, [r2, #4]
   20a84:	e784      	b.n	20990 <ble_ll_conn_create+0x24>
        g_ble_ll_conn_create_sm = connsm;
   20a86:	4a0a      	ldr	r2, [pc, #40]	; (20ab0 <ble_ll_conn_create+0x144>)
   20a88:	6014      	str	r4, [r2, #0]
   20a8a:	e781      	b.n	20990 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20a8c:	2312      	movs	r3, #18
   20a8e:	e77f      	b.n	20990 <ble_ll_conn_create+0x24>
        return BLE_ERR_CMD_DISALLOWED;
   20a90:	230c      	movs	r3, #12
   20a92:	e77d      	b.n	20990 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20a94:	2312      	movs	r3, #18
   20a96:	e77b      	b.n	20990 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20a98:	2312      	movs	r3, #18
   20a9a:	e779      	b.n	20990 <ble_ll_conn_create+0x24>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   20a9c:	2312      	movs	r3, #18
   20a9e:	e777      	b.n	20990 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20aa0:	2312      	movs	r3, #18
   20aa2:	e775      	b.n	20990 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20aa4:	2312      	movs	r3, #18
   20aa6:	e773      	b.n	20990 <ble_ll_conn_create+0x24>
        return BLE_ERR_MEM_CAPACITY;
   20aa8:	2307      	movs	r3, #7
   20aaa:	e771      	b.n	20990 <ble_ll_conn_create+0x24>
        return BLE_ERR_CONN_LIMIT;
   20aac:	2309      	movs	r3, #9
   20aae:	e76f      	b.n	20990 <ble_ll_conn_create+0x24>
   20ab0:	200087ec 	.word	0x200087ec
   20ab4:	200087e4 	.word	0x200087e4
   20ab8:	200087f4 	.word	0x200087f4

00020abc <ble_ll_conn_hci_read_rem_features>:
    if (len != sizeof(*cmd)) {
   20abc:	2902      	cmp	r1, #2
   20abe:	d001      	beq.n	20ac4 <ble_ll_conn_hci_read_rem_features+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20ac0:	2012      	movs	r0, #18
}
   20ac2:	4770      	bx	lr
{
   20ac4:	b510      	push	{r4, lr}
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   20ac6:	8800      	ldrh	r0, [r0, #0]
   20ac8:	f7fe fad6 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20acc:	4604      	mov	r4, r0
   20ace:	b308      	cbz	r0, 20b14 <ble_ll_conn_hci_read_rem_features+0x58>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   20ad0:	78c3      	ldrb	r3, [r0, #3]
   20ad2:	f013 0f10 	tst.w	r3, #16
   20ad6:	d11f      	bne.n	20b18 <ble_ll_conn_hci_read_rem_features+0x5c>
    if (!connsm->csmflags.cfbit.rxd_features &&
   20ad8:	f013 0f08 	tst.w	r3, #8
   20adc:	d10b      	bne.n	20af6 <ble_ll_conn_hci_read_rem_features+0x3a>
                !IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   20ade:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    if (!connsm->csmflags.cfbit.rxd_features &&
   20ae2:	f013 0f08 	tst.w	r3, #8
   20ae6:	d106      	bne.n	20af6 <ble_ll_conn_hci_read_rem_features+0x3a>
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   20ae8:	79c3      	ldrb	r3, [r0, #7]
   20aea:	2b02      	cmp	r3, #2
   20aec:	d009      	beq.n	20b02 <ble_ll_conn_hci_read_rem_features+0x46>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   20aee:	2103      	movs	r1, #3
   20af0:	4620      	mov	r0, r4
   20af2:	f000 ffcc 	bl	21a8e <ble_ll_ctrl_proc_start>
    connsm->csmflags.cfbit.pending_hci_rd_features = 1;
   20af6:	78e3      	ldrb	r3, [r4, #3]
   20af8:	f043 0310 	orr.w	r3, r3, #16
   20afc:	70e3      	strb	r3, [r4, #3]
    return BLE_ERR_SUCCESS;
   20afe:	2000      	movs	r0, #0
}
   20b00:	bd10      	pop	{r4, pc}
            !(ble_ll_read_supp_features() & BLE_LL_FEAT_SLAVE_INIT)) {
   20b02:	f7fc fbd1 	bl	1d2a8 <ble_ll_read_supp_features>
   20b06:	f000 0208 	and.w	r2, r0, #8
   20b0a:	2300      	movs	r3, #0
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   20b0c:	4313      	orrs	r3, r2
   20b0e:	d1ee      	bne.n	20aee <ble_ll_conn_hci_read_rem_features+0x32>
                return BLE_ERR_CMD_DISALLOWED;
   20b10:	200c      	movs	r0, #12
   20b12:	e7f5      	b.n	20b00 <ble_ll_conn_hci_read_rem_features+0x44>
        return BLE_ERR_UNK_CONN_ID;
   20b14:	2002      	movs	r0, #2
   20b16:	e7f3      	b.n	20b00 <ble_ll_conn_hci_read_rem_features+0x44>
        return BLE_ERR_CMD_DISALLOWED;
   20b18:	200c      	movs	r0, #12
   20b1a:	e7f1      	b.n	20b00 <ble_ll_conn_hci_read_rem_features+0x44>

00020b1c <ble_ll_conn_hci_update>:
{
   20b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20b20:	4605      	mov	r5, r0
    handle = le16toh(cmd->conn_handle);
   20b22:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   20b24:	4630      	mov	r0, r6
   20b26:	f7fe faa7 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20b2a:	2800      	cmp	r0, #0
   20b2c:	d050      	beq.n	20bd0 <ble_ll_conn_hci_update+0xb4>
   20b2e:	4604      	mov	r4, r0
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ) ||
   20b30:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   20b34:	f013 0f41 	tst.w	r3, #65	; 0x41
   20b38:	d14c      	bne.n	20bd4 <ble_ll_conn_hci_update+0xb8>
    if ((connsm->conn_features & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   20b3a:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   20b3e:	f013 0f02 	tst.w	r3, #2
   20b42:	d105      	bne.n	20b50 <ble_ll_conn_hci_update+0x34>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   20b44:	79c3      	ldrb	r3, [r0, #7]
   20b46:	2b02      	cmp	r3, #2
   20b48:	d048      	beq.n	20bdc <ble_ll_conn_hci_update+0xc0>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_UPDATE;
   20b4a:	f04f 0800 	mov.w	r8, #0
   20b4e:	e001      	b.n	20b54 <ble_ll_conn_hci_update+0x38>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   20b50:	f04f 0806 	mov.w	r8, #6
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   20b54:	7823      	ldrb	r3, [r4, #0]
   20b56:	f013 0f40 	tst.w	r3, #64	; 0x40
   20b5a:	d00c      	beq.n	20b76 <ble_ll_conn_hci_update+0x5a>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   20b5c:	79e3      	ldrb	r3, [r4, #7]
   20b5e:	2b02      	cmp	r3, #2
   20b60:	d03e      	beq.n	20be0 <ble_ll_conn_hci_update+0xc4>
            connsm->csmflags.cfbit.awaiting_host_reply = 0;
   20b62:	7823      	ldrb	r3, [r4, #0]
   20b64:	f36f 1386 	bfc	r3, #6, #1
   20b68:	7023      	strb	r3, [r4, #0]
            ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   20b6a:	2223      	movs	r2, #35	; 0x23
   20b6c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   20b70:	4620      	mov	r0, r4
   20b72:	f001 fb2b 	bl	221cc <ble_ll_ctrl_reject_ind_send>
    if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   20b76:	7863      	ldrb	r3, [r4, #1]
   20b78:	f013 0f10 	tst.w	r3, #16
   20b7c:	d002      	beq.n	20b84 <ble_ll_conn_hci_update+0x68>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   20b7e:	79e3      	ldrb	r3, [r4, #7]
   20b80:	2b02      	cmp	r3, #2
   20b82:	d02f      	beq.n	20be4 <ble_ll_conn_hci_update+0xc8>
    hcu->conn_itvl_min = le16toh(cmd->conn_itvl_min);
   20b84:	886b      	ldrh	r3, [r5, #2]
   20b86:	b298      	uxth	r0, r3
   20b88:	f8a4 316a 	strh.w	r3, [r4, #362]	; 0x16a
    hcu->conn_itvl_max = le16toh(cmd->conn_itvl_max);
   20b8c:	88ab      	ldrh	r3, [r5, #4]
   20b8e:	b299      	uxth	r1, r3
   20b90:	f8a4 316c 	strh.w	r3, [r4, #364]	; 0x16c
    hcu->conn_latency = le16toh(cmd->conn_latency);
   20b94:	88eb      	ldrh	r3, [r5, #6]
   20b96:	b29a      	uxth	r2, r3
   20b98:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
    hcu->supervision_timeout = le16toh(cmd->supervision_timeout);
   20b9c:	892f      	ldrh	r7, [r5, #8]
   20b9e:	b2bb      	uxth	r3, r7
   20ba0:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
    hcu->min_ce_len = le16toh(cmd->min_ce_len);
   20ba4:	896f      	ldrh	r7, [r5, #10]
   20ba6:	fa1f fc87 	uxth.w	ip, r7
   20baa:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
    hcu->max_ce_len = le16toh(cmd->max_ce_len);
   20bae:	89ad      	ldrh	r5, [r5, #12]
   20bb0:	b2af      	uxth	r7, r5
   20bb2:	f8a4 5174 	strh.w	r5, [r4, #372]	; 0x174
    if (hcu->min_ce_len > hcu->max_ce_len) {
   20bb6:	45bc      	cmp	ip, r7
   20bb8:	d816      	bhi.n	20be8 <ble_ll_conn_hci_update+0xcc>
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   20bba:	f7ff fd09 	bl	205d0 <ble_ll_conn_hci_chk_conn_params>
    if (!rc) {
   20bbe:	4605      	mov	r5, r0
   20bc0:	b948      	cbnz	r0, 20bd6 <ble_ll_conn_hci_update+0xba>
        hcu->handle = handle;
   20bc2:	f8a4 6168 	strh.w	r6, [r4, #360]	; 0x168
        ble_ll_ctrl_proc_start(connsm, ctrl_proc);
   20bc6:	4641      	mov	r1, r8
   20bc8:	4620      	mov	r0, r4
   20bca:	f000 ff60 	bl	21a8e <ble_ll_ctrl_proc_start>
   20bce:	e002      	b.n	20bd6 <ble_ll_conn_hci_update+0xba>
        return BLE_ERR_UNK_CONN_ID;
   20bd0:	2502      	movs	r5, #2
   20bd2:	e000      	b.n	20bd6 <ble_ll_conn_hci_update+0xba>
        return BLE_ERR_CMD_DISALLOWED;
   20bd4:	250c      	movs	r5, #12
}
   20bd6:	4628      	mov	r0, r5
   20bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return BLE_ERR_UNSUPP_REM_FEATURE;
   20bdc:	251a      	movs	r5, #26
   20bde:	e7fa      	b.n	20bd6 <ble_ll_conn_hci_update+0xba>
            return BLE_ERR_LMP_COLLISION;
   20be0:	2523      	movs	r5, #35	; 0x23
   20be2:	e7f8      	b.n	20bd6 <ble_ll_conn_hci_update+0xba>
            return BLE_ERR_DIFF_TRANS_COLL;
   20be4:	252a      	movs	r5, #42	; 0x2a
   20be6:	e7f6      	b.n	20bd6 <ble_ll_conn_hci_update+0xba>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20be8:	2512      	movs	r5, #18
   20bea:	e7f4      	b.n	20bd6 <ble_ll_conn_hci_update+0xba>

00020bec <ble_ll_conn_hci_param_rr>:
{
   20bec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len != sizeof(*cmd)) {
   20bf0:	290e      	cmp	r1, #14
   20bf2:	d003      	beq.n	20bfc <ble_ll_conn_hci_param_rr+0x10>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20bf4:	2412      	movs	r4, #18
}
   20bf6:	4620      	mov	r0, r4
   20bf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20bfc:	461e      	mov	r6, r3
   20bfe:	4615      	mov	r5, r2
   20c00:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   20c02:	8807      	ldrh	r7, [r0, #0]
   20c04:	fa1f f887 	uxth.w	r8, r7
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   20c08:	f7fc fb4e 	bl	1d2a8 <ble_ll_read_supp_features>
   20c0c:	f000 0202 	and.w	r2, r0, #2
   20c10:	2300      	movs	r3, #0
   20c12:	4313      	orrs	r3, r2
   20c14:	d104      	bne.n	20c20 <ble_ll_conn_hci_param_rr+0x34>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   20c16:	2401      	movs	r4, #1
    rsp->conn_handle = htole16(handle);
   20c18:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   20c1a:	2302      	movs	r3, #2
   20c1c:	7033      	strb	r3, [r6, #0]
    return rc;
   20c1e:	e7ea      	b.n	20bf6 <ble_ll_conn_hci_param_rr+0xa>
    connsm = ble_ll_conn_find_active_conn(handle);
   20c20:	4640      	mov	r0, r8
   20c22:	f7fe fa29 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20c26:	4680      	mov	r8, r0
   20c28:	b388      	cbz	r0, 20c8e <ble_ll_conn_hci_param_rr+0xa2>
    rc = ble_ll_conn_process_conn_params(cmd, connsm);
   20c2a:	4601      	mov	r1, r0
   20c2c:	4620      	mov	r0, r4
   20c2e:	f7ff fcfa 	bl	20626 <ble_ll_conn_process_conn_params>
   20c32:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   20c34:	f898 3000 	ldrb.w	r3, [r8]
   20c38:	f013 0f40 	tst.w	r3, #64	; 0x40
   20c3c:	d0ec      	beq.n	20c18 <ble_ll_conn_hci_param_rr+0x2c>
        if (rc == BLE_ERR_SUCCESS) {
   20c3e:	b9c8      	cbnz	r0, 20c74 <ble_ll_conn_hci_param_rr+0x88>
            om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   20c40:	2110      	movs	r1, #16
   20c42:	201b      	movs	r0, #27
   20c44:	f7ea f857 	bl	acf6 <os_msys_get_pkthdr>
            if (om) {
   20c48:	4681      	mov	r9, r0
   20c4a:	b1c8      	cbz	r0, 20c80 <ble_ll_conn_hci_param_rr+0x94>
                dptr = om->om_data;
   20c4c:	f8d0 a000 	ldr.w	sl, [r0]
                rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, dptr,
   20c50:	f508 72c1 	add.w	r2, r8, #386	; 0x182
   20c54:	4651      	mov	r1, sl
   20c56:	4640      	mov	r0, r8
   20c58:	f000 fe0d 	bl	21876 <ble_ll_ctrl_conn_param_reply>
                dptr[0] = rsp_opcode;
   20c5c:	f88a 0000 	strb.w	r0, [sl]
                len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   20c60:	4b0c      	ldr	r3, [pc, #48]	; (20c94 <ble_ll_conn_hci_param_rr+0xa8>)
   20c62:	5c1b      	ldrb	r3, [r3, r0]
   20c64:	3301      	adds	r3, #1
                ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   20c66:	b2db      	uxtb	r3, r3
   20c68:	2203      	movs	r2, #3
   20c6a:	4649      	mov	r1, r9
   20c6c:	4640      	mov	r0, r8
   20c6e:	f7ff fa85 	bl	2017c <ble_ll_conn_enqueue_pkt>
   20c72:	e005      	b.n	20c80 <ble_ll_conn_hci_param_rr+0x94>
            ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   20c74:	223b      	movs	r2, #59	; 0x3b
   20c76:	f898 1038 	ldrb.w	r1, [r8, #56]	; 0x38
   20c7a:	4640      	mov	r0, r8
   20c7c:	f001 faa6 	bl	221cc <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   20c80:	f898 3000 	ldrb.w	r3, [r8]
   20c84:	f36f 1386 	bfc	r3, #6, #1
   20c88:	f888 3000 	strb.w	r3, [r8]
   20c8c:	e7c4      	b.n	20c18 <ble_ll_conn_hci_param_rr+0x2c>
        rc = BLE_ERR_UNK_CONN_ID;
   20c8e:	2402      	movs	r4, #2
   20c90:	e7c2      	b.n	20c18 <ble_ll_conn_hci_param_rr+0x2c>
   20c92:	bf00      	nop
   20c94:	00029818 	.word	0x00029818

00020c98 <ble_ll_conn_hci_param_nrr>:
    if (len != sizeof(*cmd)) {
   20c98:	2903      	cmp	r1, #3
   20c9a:	d001      	beq.n	20ca0 <ble_ll_conn_hci_param_nrr+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20c9c:	2012      	movs	r0, #18
}
   20c9e:	4770      	bx	lr
{
   20ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ca4:	461e      	mov	r6, r3
   20ca6:	4615      	mov	r5, r2
   20ca8:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   20caa:	8807      	ldrh	r7, [r0, #0]
   20cac:	fa1f f887 	uxth.w	r8, r7
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   20cb0:	f7fc fafa 	bl	1d2a8 <ble_ll_read_supp_features>
   20cb4:	f000 0202 	and.w	r2, r0, #2
   20cb8:	2300      	movs	r3, #0
   20cba:	4313      	orrs	r3, r2
   20cbc:	d105      	bne.n	20cca <ble_ll_conn_hci_param_nrr+0x32>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   20cbe:	2001      	movs	r0, #1
    rsp->conn_handle = htole16(handle);
   20cc0:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   20cc2:	2302      	movs	r3, #2
   20cc4:	7033      	strb	r3, [r6, #0]
}
   20cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connsm = ble_ll_conn_find_active_conn(handle);
   20cca:	4640      	mov	r0, r8
   20ccc:	f7fe f9d4 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20cd0:	4680      	mov	r8, r0
   20cd2:	b190      	cbz	r0, 20cfa <ble_ll_conn_hci_param_nrr+0x62>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   20cd4:	7803      	ldrb	r3, [r0, #0]
   20cd6:	f013 0f40 	tst.w	r3, #64	; 0x40
   20cda:	d101      	bne.n	20ce0 <ble_ll_conn_hci_param_nrr+0x48>
    rc = BLE_ERR_SUCCESS;
   20cdc:	2000      	movs	r0, #0
   20cde:	e7ef      	b.n	20cc0 <ble_ll_conn_hci_param_nrr+0x28>
        ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   20ce0:	78a2      	ldrb	r2, [r4, #2]
   20ce2:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   20ce6:	f001 fa71 	bl	221cc <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   20cea:	f898 3000 	ldrb.w	r3, [r8]
   20cee:	f36f 1386 	bfc	r3, #6, #1
   20cf2:	f888 3000 	strb.w	r3, [r8]
    rc = BLE_ERR_SUCCESS;
   20cf6:	2000      	movs	r0, #0
   20cf8:	e7e2      	b.n	20cc0 <ble_ll_conn_hci_param_nrr+0x28>
        rc = BLE_ERR_UNK_CONN_ID;
   20cfa:	2002      	movs	r0, #2
   20cfc:	e7e0      	b.n	20cc0 <ble_ll_conn_hci_param_nrr+0x28>
	...

00020d00 <ble_ll_conn_create_cancel>:
 *
 * @return int
 */
int
ble_ll_conn_create_cancel(ble_ll_hci_post_cmd_complete_cb *post_cmd_cb)
{
   20d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20d02:	4607      	mov	r7, r0
     * If we receive this command and we have not got a connection
     * create command, we have to return disallowed. The spec does not say
     * what happens if the connection has already been established. We
     * return disallowed as well
     */
    OS_ENTER_CRITICAL(sr);
   20d04:	f7ea fc56 	bl	b5b4 <os_arch_save_sr>
   20d08:	4606      	mov	r6, r0
    connsm = g_ble_ll_conn_create_sm;
   20d0a:	4b0d      	ldr	r3, [pc, #52]	; (20d40 <ble_ll_conn_create_cancel+0x40>)
   20d0c:	681d      	ldr	r5, [r3, #0]
    if (connsm && (connsm->conn_state == BLE_LL_CONN_STATE_IDLE)) {
   20d0e:	b195      	cbz	r5, 20d36 <ble_ll_conn_create_cancel+0x36>
   20d10:	79ab      	ldrb	r3, [r5, #6]
   20d12:	b993      	cbnz	r3, 20d3a <ble_ll_conn_create_cancel+0x3a>
        /* stop scanning and end the connection event */
        g_ble_ll_conn_create_sm = NULL;
   20d14:	2400      	movs	r4, #0
   20d16:	4b0a      	ldr	r3, [pc, #40]	; (20d40 <ble_ll_conn_create_cancel+0x40>)
   20d18:	601c      	str	r4, [r3, #0]
        ble_ll_scan_sm_stop(1);
   20d1a:	2001      	movs	r0, #1
   20d1c:	f003 fc26 	bl	2456c <ble_ll_scan_sm_stop>
        ble_ll_conn_end(connsm, BLE_ERR_UNK_CONN_ID);
   20d20:	2102      	movs	r1, #2
   20d22:	4628      	mov	r0, r5
   20d24:	f7fe fcb8 	bl	1f698 <ble_ll_conn_end>

        *post_cmd_cb = ble_ll_conn_hci_cancel_conn_complete_event;
   20d28:	4b06      	ldr	r3, [pc, #24]	; (20d44 <ble_ll_conn_create_cancel+0x44>)
   20d2a:	603b      	str	r3, [r7, #0]
        rc = BLE_ERR_SUCCESS;
    } else {
        /* If we are not attempting to create a connection*/
        rc = BLE_ERR_CMD_DISALLOWED;
    }
    OS_EXIT_CRITICAL(sr);
   20d2c:	4630      	mov	r0, r6
   20d2e:	f7ea fc47 	bl	b5c0 <os_arch_restore_sr>

    return rc;
}
   20d32:	4620      	mov	r0, r4
   20d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_ERR_CMD_DISALLOWED;
   20d36:	240c      	movs	r4, #12
   20d38:	e7f8      	b.n	20d2c <ble_ll_conn_create_cancel+0x2c>
   20d3a:	240c      	movs	r4, #12
   20d3c:	e7f6      	b.n	20d2c <ble_ll_conn_create_cancel+0x2c>
   20d3e:	bf00      	nop
   20d40:	200087ec 	.word	0x200087ec
   20d44:	000207ed 	.word	0x000207ed

00020d48 <ble_ll_conn_hci_disconnect_cmd>:
    int rc;
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;

    /* Check for valid parameters */
    handle = le16toh(cmd->conn_handle);
   20d48:	8802      	ldrh	r2, [r0, #0]

    rc = BLE_ERR_INV_HCI_CMD_PARMS;
    if (handle <= BLE_LL_CONN_MAX_CONN_HANDLE) {
   20d4a:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
   20d4e:	d23f      	bcs.n	20dd0 <ble_ll_conn_hci_disconnect_cmd+0x88>
        /* Make sure reason is valid */
        switch (cmd->reason) {
   20d50:	7883      	ldrb	r3, [r0, #2]
   20d52:	3b05      	subs	r3, #5
   20d54:	2b36      	cmp	r3, #54	; 0x36
   20d56:	d83d      	bhi.n	20dd4 <ble_ll_conn_hci_disconnect_cmd+0x8c>
   20d58:	e8df f003 	tbb	[pc, r3]
   20d5c:	3c3c3c1c 	.word	0x3c3c3c1c
   20d60:	3c3c3c3c 	.word	0x3c3c3c3c
   20d64:	3c3c3c3c 	.word	0x3c3c3c3c
   20d68:	1c1c3c3c 	.word	0x1c1c3c3c
   20d6c:	3c3c3c1c 	.word	0x3c3c3c1c
   20d70:	3c3c1c3c 	.word	0x3c3c1c3c
   20d74:	3c3c3c3c 	.word	0x3c3c3c3c
   20d78:	3c3c3c3c 	.word	0x3c3c3c3c
   20d7c:	3c3c3c3c 	.word	0x3c3c3c3c
   20d80:	3c3c3c1c 	.word	0x3c3c3c1c
   20d84:	3c3c3c3c 	.word	0x3c3c3c3c
   20d88:	3c3c3c3c 	.word	0x3c3c3c3c
   20d8c:	3c3c3c3c 	.word	0x3c3c3c3c
   20d90:	3c3c      	.short	0x3c3c
   20d92:	1c          	.byte	0x1c
   20d93:	00          	.byte	0x00
{
   20d94:	b510      	push	{r4, lr}
   20d96:	4604      	mov	r4, r0
        case BLE_ERR_RD_CONN_TERM_RESRCS:
        case BLE_ERR_RD_CONN_TERM_PWROFF:
        case BLE_ERR_UNSUPP_REM_FEATURE:
        case BLE_ERR_UNIT_KEY_PAIRING:
        case BLE_ERR_CONN_PARMS:
            connsm = ble_ll_conn_find_active_conn(handle);
   20d98:	4610      	mov	r0, r2
   20d9a:	f7fe f96d 	bl	1f078 <ble_ll_conn_find_active_conn>
            if (connsm) {
   20d9e:	b1d8      	cbz	r0, 20dd8 <ble_ll_conn_hci_disconnect_cmd+0x90>
                /* Do not allow command if we are in process of disconnecting */
                if (connsm->disconnect_reason) {
   20da0:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
   20da4:	b9d2      	cbnz	r2, 20ddc <ble_ll_conn_hci_disconnect_cmd+0x94>
                    rc = BLE_ERR_CMD_DISALLOWED;
                } else {
                    /* This control procedure better not be pending! */
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   20da6:	f990 2000 	ldrsb.w	r2, [r0]
   20daa:	2a00      	cmp	r2, #0
   20dac:	db06      	blt.n	20dbc <ble_ll_conn_hci_disconnect_cmd+0x74>

                    /* Record the disconnect reason */
                    connsm->disconnect_reason = cmd->reason;
   20dae:	78a2      	ldrb	r2, [r4, #2]
   20db0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

                    /* Start this control procedure */
                    ble_ll_ctrl_terminate_start(connsm);
   20db4:	f000 fe45 	bl	21a42 <ble_ll_ctrl_terminate_start>

                    rc = BLE_ERR_SUCCESS;
   20db8:	2000      	movs	r0, #0
            break;
        }
    }

    return rc;
}
   20dba:	bd10      	pop	{r4, pc}
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   20dbc:	f7e7 fa00 	bl	81c0 <hal_debugger_connected>
   20dc0:	b100      	cbz	r0, 20dc4 <ble_ll_conn_hci_disconnect_cmd+0x7c>
   20dc2:	be01      	bkpt	0x0001
   20dc4:	2300      	movs	r3, #0
   20dc6:	461a      	mov	r2, r3
   20dc8:	4619      	mov	r1, r3
   20dca:	4618      	mov	r0, r3
   20dcc:	f7e8 fe00 	bl	99d0 <__assert_func>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20dd0:	2012      	movs	r0, #18
   20dd2:	4770      	bx	lr
   20dd4:	2012      	movs	r0, #18
}
   20dd6:	4770      	bx	lr
                rc = BLE_ERR_UNK_CONN_ID;
   20dd8:	2002      	movs	r0, #2
   20dda:	e7ee      	b.n	20dba <ble_ll_conn_hci_disconnect_cmd+0x72>
                    rc = BLE_ERR_CMD_DISALLOWED;
   20ddc:	200c      	movs	r0, #12
    return rc;
   20dde:	e7ec      	b.n	20dba <ble_ll_conn_hci_disconnect_cmd+0x72>

00020de0 <ble_ll_conn_hci_rd_rem_ver_cmd>:
ble_ll_conn_hci_rd_rem_ver_cmd(const uint8_t *cmdbuf, uint8_t len)
{
    struct ble_ll_conn_sm *connsm;
    const struct ble_hci_rd_rem_ver_info_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   20de0:	2902      	cmp	r1, #2
   20de2:	d001      	beq.n	20de8 <ble_ll_conn_hci_rd_rem_ver_cmd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20de4:	2012      	movs	r0, #18
    } else {
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
    }

    return BLE_ERR_SUCCESS;
}
   20de6:	4770      	bx	lr
{
   20de8:	b508      	push	{r3, lr}
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   20dea:	8800      	ldrh	r0, [r0, #0]
   20dec:	f7fe f944 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20df0:	b198      	cbz	r0, 20e1a <ble_ll_conn_hci_rd_rem_ver_cmd+0x3a>
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   20df2:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
   20df6:	f012 0f10 	tst.w	r2, #16
   20dfa:	d110      	bne.n	20e1e <ble_ll_conn_hci_rd_rem_ver_cmd+0x3e>
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   20dfc:	7841      	ldrb	r1, [r0, #1]
   20dfe:	f011 0f04 	tst.w	r1, #4
   20e02:	d005      	beq.n	20e10 <ble_ll_conn_hci_rd_rem_ver_cmd+0x30>
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
   20e04:	f042 0210 	orr.w	r2, r2, #16
   20e08:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    return BLE_ERR_SUCCESS;
   20e0c:	2000      	movs	r0, #0
}
   20e0e:	bd08      	pop	{r3, pc}
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   20e10:	2104      	movs	r1, #4
   20e12:	f000 fe3c 	bl	21a8e <ble_ll_ctrl_proc_start>
    return BLE_ERR_SUCCESS;
   20e16:	2000      	movs	r0, #0
   20e18:	e7f9      	b.n	20e0e <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>
        return BLE_ERR_UNK_CONN_ID;
   20e1a:	2002      	movs	r0, #2
   20e1c:	e7f7      	b.n	20e0e <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>
        return BLE_ERR_CMD_DISALLOWED;
   20e1e:	200c      	movs	r0, #12
   20e20:	e7f5      	b.n	20e0e <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>

00020e22 <ble_ll_conn_hci_rd_rssi>:
    const struct ble_hci_rd_rssi_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_rd_rssi_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    int rc;

    if (len != sizeof(*cmd)) {
   20e22:	2902      	cmp	r1, #2
   20e24:	d001      	beq.n	20e2a <ble_ll_conn_hci_rd_rssi+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20e26:	2012      	movs	r0, #18
        rc = BLE_ERR_SUCCESS;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   20e28:	4770      	bx	lr
{
   20e2a:	b538      	push	{r3, r4, r5, lr}
   20e2c:	461d      	mov	r5, r3
   20e2e:	4614      	mov	r4, r2
    rsp->handle = cmd->handle;
   20e30:	8803      	ldrh	r3, [r0, #0]
   20e32:	8013      	strh	r3, [r2, #0]
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->handle));
   20e34:	8800      	ldrh	r0, [r0, #0]
   20e36:	f7fe f91f 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20e3a:	b130      	cbz	r0, 20e4a <ble_ll_conn_hci_rd_rssi+0x28>
        rsp->rssi = connsm->conn_rssi;
   20e3c:	f990 3008 	ldrsb.w	r3, [r0, #8]
   20e40:	70a3      	strb	r3, [r4, #2]
        rc = BLE_ERR_SUCCESS;
   20e42:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   20e44:	2303      	movs	r3, #3
   20e46:	702b      	strb	r3, [r5, #0]
}
   20e48:	bd38      	pop	{r3, r4, r5, pc}
        rsp->rssi = 127;
   20e4a:	237f      	movs	r3, #127	; 0x7f
   20e4c:	70a3      	strb	r3, [r4, #2]
        rc = BLE_ERR_UNK_CONN_ID;
   20e4e:	2002      	movs	r0, #2
   20e50:	e7f8      	b.n	20e44 <ble_ll_conn_hci_rd_rssi+0x22>

00020e52 <ble_ll_conn_hci_rd_chan_map>:
    struct ble_hci_le_rd_chan_map_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   20e52:	2902      	cmp	r1, #2
   20e54:	d001      	beq.n	20e5a <ble_ll_conn_hci_rd_chan_map+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20e56:	2012      	movs	r0, #18

    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   20e58:	4770      	bx	lr
{
   20e5a:	b570      	push	{r4, r5, r6, lr}
   20e5c:	461d      	mov	r5, r3
   20e5e:	4614      	mov	r4, r2
    handle = le16toh(cmd->conn_handle);
   20e60:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   20e62:	4630      	mov	r0, r6
   20e64:	f7fe f908 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20e68:	4602      	mov	r2, r0
   20e6a:	b170      	cbz	r0, 20e8a <ble_ll_conn_hci_rd_chan_map+0x38>
        if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   20e6c:	7843      	ldrb	r3, [r0, #1]
   20e6e:	f013 0f10 	tst.w	r3, #16
   20e72:	d010      	beq.n	20e96 <ble_ll_conn_hci_rd_chan_map+0x44>
            memcpy(rsp->chan_map, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   20e74:	f852 3f25 	ldr.w	r3, [r2, #37]!
   20e78:	f8c4 3002 	str.w	r3, [r4, #2]
   20e7c:	7913      	ldrb	r3, [r2, #4]
   20e7e:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   20e80:	2000      	movs	r0, #0
    rsp->conn_handle = htole16(handle);
   20e82:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   20e84:	2307      	movs	r3, #7
   20e86:	702b      	strb	r3, [r5, #0]
}
   20e88:	bd70      	pop	{r4, r5, r6, pc}
        memset(rsp->chan_map, 0, sizeof(rsp->chan_map));
   20e8a:	2200      	movs	r2, #0
   20e8c:	f8c4 2002 	str.w	r2, [r4, #2]
   20e90:	71a2      	strb	r2, [r4, #6]
        rc = BLE_ERR_UNK_CONN_ID;
   20e92:	2002      	movs	r0, #2
   20e94:	e7f5      	b.n	20e82 <ble_ll_conn_hci_rd_chan_map+0x30>
            memcpy(rsp->chan_map, connsm->chanmap, BLE_LL_CONN_CHMAP_LEN);
   20e96:	f852 3f20 	ldr.w	r3, [r2, #32]!
   20e9a:	f8c4 3002 	str.w	r3, [r4, #2]
   20e9e:	7913      	ldrb	r3, [r2, #4]
   20ea0:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   20ea2:	2000      	movs	r0, #0
   20ea4:	e7ed      	b.n	20e82 <ble_ll_conn_hci_rd_chan_map+0x30>

00020ea6 <ble_ll_conn_hci_set_chan_class>:
ble_ll_conn_hci_set_chan_class(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_host_chan_class_cp *cmd = (const void *) cmdbuf;
    uint8_t num_used_chans;

    if (len != sizeof(*cmd)) {
   20ea6:	2905      	cmp	r1, #5
   20ea8:	d001      	beq.n	20eae <ble_ll_conn_hci_set_chan_class+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20eaa:	2012      	movs	r0, #18
    }

    /* Set the host channel mask */
    ble_ll_conn_set_global_chanmap(num_used_chans, cmd->chan_map);
    return BLE_ERR_SUCCESS;
}
   20eac:	4770      	bx	lr
{
   20eae:	b510      	push	{r4, lr}
   20eb0:	4604      	mov	r4, r0
    num_used_chans = ble_ll_utils_calc_num_used_chans(cmd->chan_map);
   20eb2:	f004 fb6e 	bl	25592 <ble_ll_utils_calc_num_used_chans>
    if ((num_used_chans < 2) || ((cmd->chan_map[4] & 0xe0) != 0)) {
   20eb6:	2801      	cmp	r0, #1
   20eb8:	d908      	bls.n	20ecc <ble_ll_conn_hci_set_chan_class+0x26>
   20eba:	7923      	ldrb	r3, [r4, #4]
   20ebc:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   20ec0:	d106      	bne.n	20ed0 <ble_ll_conn_hci_set_chan_class+0x2a>
    ble_ll_conn_set_global_chanmap(num_used_chans, cmd->chan_map);
   20ec2:	4621      	mov	r1, r4
   20ec4:	f7ff f9c8 	bl	20258 <ble_ll_conn_set_global_chanmap>
    return BLE_ERR_SUCCESS;
   20ec8:	2000      	movs	r0, #0
}
   20eca:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20ecc:	2012      	movs	r0, #18
   20ece:	e7fc      	b.n	20eca <ble_ll_conn_hci_set_chan_class+0x24>
   20ed0:	2012      	movs	r0, #18
   20ed2:	e7fa      	b.n	20eca <ble_ll_conn_hci_set_chan_class+0x24>

00020ed4 <ble_ll_conn_hci_set_data_len>:
    uint16_t handle;
    uint16_t txoctets;
    uint16_t txtime;
    struct ble_ll_conn_sm *connsm;

    if (len != sizeof(*cmd)) {
   20ed4:	2906      	cmp	r1, #6
   20ed6:	d001      	beq.n	20edc <ble_ll_conn_hci_set_data_len+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20ed8:	2012      	movs	r0, #18

done:
    rsp->conn_handle = htole16(handle);
    *rsplen = sizeof(*rsp);
    return rc;
}
   20eda:	4770      	bx	lr
{
   20edc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20ee0:	461e      	mov	r6, r3
   20ee2:	4615      	mov	r5, r2
   20ee4:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   20ee6:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   20ee8:	4638      	mov	r0, r7
   20eea:	f7fe f8c5 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20eee:	4680      	mov	r8, r0
   20ef0:	b1f8      	cbz	r0, 20f32 <ble_ll_conn_hci_set_data_len+0x5e>
    txoctets = le16toh(cmd->tx_octets);
   20ef2:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    txtime = le16toh(cmd->tx_time);
   20ef6:	88a4      	ldrh	r4, [r4, #4]
   20ef8:	fa1f fa84 	uxth.w	sl, r4
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   20efc:	4648      	mov	r0, r9
   20efe:	f7fb ffdc 	bl	1ceba <ble_ll_chk_txrx_octets>
   20f02:	b908      	cbnz	r0, 20f08 <ble_ll_conn_hci_set_data_len+0x34>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20f04:	2012      	movs	r0, #18
   20f06:	e015      	b.n	20f34 <ble_ll_conn_hci_set_data_len+0x60>
        !ble_ll_chk_txrx_time(txtime)) {
   20f08:	4650      	mov	r0, sl
   20f0a:	f7fb ffde 	bl	1ceca <ble_ll_chk_txrx_time>
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   20f0e:	b1b0      	cbz	r0, 20f3e <ble_ll_conn_hci_set_data_len+0x6a>
    if (connsm->max_tx_time != txtime ||
   20f10:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   20f14:	4553      	cmp	r3, sl
   20f16:	d103      	bne.n	20f20 <ble_ll_conn_hci_set_data_len+0x4c>
        connsm->max_tx_octets != txoctets) {
   20f18:	f898 300a 	ldrb.w	r3, [r8, #10]
    if (connsm->max_tx_time != txtime ||
   20f1c:	454b      	cmp	r3, r9
   20f1e:	d010      	beq.n	20f42 <ble_ll_conn_hci_set_data_len+0x6e>
        connsm->max_tx_time = txtime;
   20f20:	f8a8 4010 	strh.w	r4, [r8, #16]
        connsm->max_tx_octets = txoctets;
   20f24:	f888 900a 	strb.w	r9, [r8, #10]
        ble_ll_ctrl_initiate_dle(connsm);
   20f28:	4640      	mov	r0, r8
   20f2a:	f000 fdd7 	bl	21adc <ble_ll_ctrl_initiate_dle>
    rc = BLE_ERR_SUCCESS;
   20f2e:	2000      	movs	r0, #0
   20f30:	e000      	b.n	20f34 <ble_ll_conn_hci_set_data_len+0x60>
        rc = BLE_ERR_UNK_CONN_ID;
   20f32:	2002      	movs	r0, #2
    rsp->conn_handle = htole16(handle);
   20f34:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   20f36:	2302      	movs	r3, #2
   20f38:	7033      	strb	r3, [r6, #0]
}
   20f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20f3e:	2012      	movs	r0, #18
   20f40:	e7f8      	b.n	20f34 <ble_ll_conn_hci_set_data_len+0x60>
    rc = BLE_ERR_SUCCESS;
   20f42:	2000      	movs	r0, #0
   20f44:	e7f6      	b.n	20f34 <ble_ll_conn_hci_set_data_len+0x60>

00020f46 <ble_ll_conn_hci_le_start_encrypt>:
{
    const struct ble_hci_le_start_encrypt_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_conn_sm *connsm;
    int rc;

    if (len != sizeof(*cmd)) {
   20f46:	291c      	cmp	r1, #28
   20f48:	d001      	beq.n	20f4e <ble_ll_conn_hci_le_start_encrypt+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20f4a:	2012      	movs	r0, #18
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
        rc = BLE_ERR_SUCCESS;
    }

    return rc;
}
   20f4c:	4770      	bx	lr
{
   20f4e:	b538      	push	{r3, r4, r5, lr}
   20f50:	4604      	mov	r4, r0
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   20f52:	8800      	ldrh	r0, [r0, #0]
   20f54:	f7fe f890 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20f58:	4605      	mov	r5, r0
   20f5a:	b1f0      	cbz	r0, 20f9a <ble_ll_conn_hci_le_start_encrypt+0x54>
    } else if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   20f5c:	79c3      	ldrb	r3, [r0, #7]
   20f5e:	2b02      	cmp	r3, #2
   20f60:	d01d      	beq.n	20f9e <ble_ll_conn_hci_le_start_encrypt+0x58>
    } else if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   20f62:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   20f66:	2b02      	cmp	r3, #2
   20f68:	d01b      	beq.n	20fa2 <ble_ll_conn_hci_le_start_encrypt+0x5c>
        connsm->enc_data.host_rand_num = le64toh(cmd->rand);
   20f6a:	f8d4 2002 	ldr.w	r2, [r4, #2]
   20f6e:	f8d4 3006 	ldr.w	r3, [r4, #6]
   20f72:	f8c0 2128 	str.w	r2, [r0, #296]	; 0x128
   20f76:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
        connsm->enc_data.enc_div = le16toh(cmd->div);
   20f7a:	8963      	ldrh	r3, [r4, #10]
   20f7c:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
        swap_buf(connsm->enc_data.enc_block.key, cmd->ltk, 16);
   20f80:	2210      	movs	r2, #16
   20f82:	f104 010c 	add.w	r1, r4, #12
   20f86:	f500 709c 	add.w	r0, r0, #312	; 0x138
   20f8a:	f7fa feac 	bl	1bce6 <swap_buf>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   20f8e:	2102      	movs	r1, #2
   20f90:	4628      	mov	r0, r5
   20f92:	f000 fd7c 	bl	21a8e <ble_ll_ctrl_proc_start>
        rc = BLE_ERR_SUCCESS;
   20f96:	2000      	movs	r0, #0
}
   20f98:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_ERR_UNK_CONN_ID;
   20f9a:	2002      	movs	r0, #2
   20f9c:	e7fc      	b.n	20f98 <ble_ll_conn_hci_le_start_encrypt+0x52>
        rc = BLE_ERR_UNSPECIFIED;
   20f9e:	201f      	movs	r0, #31
   20fa0:	e7fa      	b.n	20f98 <ble_ll_conn_hci_le_start_encrypt+0x52>
        rc = BLE_ERR_CMD_DISALLOWED;
   20fa2:	200c      	movs	r0, #12
   20fa4:	e7f8      	b.n	20f98 <ble_ll_conn_hci_le_start_encrypt+0x52>

00020fa6 <ble_ll_conn_hci_le_ltk_reply>:
    struct ble_hci_le_lt_key_req_reply_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   20fa6:	2912      	cmp	r1, #18
   20fa8:	d001      	beq.n	20fae <ble_ll_conn_hci_le_ltk_reply+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20faa:	2012      	movs	r0, #18
ltk_key_cmd_complete:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   20fac:	4770      	bx	lr
{
   20fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20fb2:	461e      	mov	r6, r3
   20fb4:	4615      	mov	r5, r2
   20fb6:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   20fb8:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   20fba:	4638      	mov	r0, r7
   20fbc:	f7fe f85c 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20fc0:	4680      	mov	r8, r0
   20fc2:	b1d0      	cbz	r0, 20ffa <ble_ll_conn_hci_le_ltk_reply+0x54>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   20fc4:	79c3      	ldrb	r3, [r0, #7]
   20fc6:	2b01      	cmp	r3, #1
   20fc8:	d019      	beq.n	20ffe <ble_ll_conn_hci_le_ltk_reply+0x58>
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   20fca:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   20fce:	2b08      	cmp	r3, #8
   20fd0:	d005      	beq.n	20fde <ble_ll_conn_hci_le_ltk_reply+0x38>
        rc = BLE_ERR_CMD_DISALLOWED;
   20fd2:	200c      	movs	r0, #12
    rsp->conn_handle = htole16(handle);
   20fd4:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   20fd6:	2302      	movs	r3, #2
   20fd8:	7033      	strb	r3, [r6, #0]
}
   20fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    swap_buf(connsm->enc_data.enc_block.key, cmd->ltk, 16);
   20fde:	2210      	movs	r2, #16
   20fe0:	1ca1      	adds	r1, r4, #2
   20fe2:	f500 709c 	add.w	r0, r0, #312	; 0x138
   20fe6:	f7fa fe7e 	bl	1bce6 <swap_buf>
    ble_ll_calc_session_key(connsm);
   20fea:	4640      	mov	r0, r8
   20fec:	f000 fbce 	bl	2178c <ble_ll_calc_session_key>
    ble_ll_ctrl_start_enc_send(connsm);
   20ff0:	4640      	mov	r0, r8
   20ff2:	f000 fc1f 	bl	21834 <ble_ll_ctrl_start_enc_send>
    rc = BLE_ERR_SUCCESS;
   20ff6:	2000      	movs	r0, #0
   20ff8:	e7ec      	b.n	20fd4 <ble_ll_conn_hci_le_ltk_reply+0x2e>
        rc = BLE_ERR_UNK_CONN_ID;
   20ffa:	2002      	movs	r0, #2
   20ffc:	e7ea      	b.n	20fd4 <ble_ll_conn_hci_le_ltk_reply+0x2e>
        rc = BLE_ERR_UNSPECIFIED;
   20ffe:	201f      	movs	r0, #31
   21000:	e7e8      	b.n	20fd4 <ble_ll_conn_hci_le_ltk_reply+0x2e>

00021002 <ble_ll_conn_hci_le_ltk_neg_reply>:
    struct ble_hci_le_lt_key_req_neg_reply_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   21002:	2902      	cmp	r1, #2
   21004:	d001      	beq.n	2100a <ble_ll_conn_hci_le_ltk_neg_reply+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21006:	2012      	movs	r0, #18
ltk_key_cmd_complete:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   21008:	4770      	bx	lr
{
   2100a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2100c:	461d      	mov	r5, r3
   2100e:	4614      	mov	r4, r2
    handle = le16toh(cmd->conn_handle);
   21010:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   21012:	4630      	mov	r0, r6
   21014:	f7fe f830 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   21018:	4607      	mov	r7, r0
   2101a:	b1a0      	cbz	r0, 21046 <ble_ll_conn_hci_le_ltk_neg_reply+0x44>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   2101c:	79c3      	ldrb	r3, [r0, #7]
   2101e:	2b01      	cmp	r3, #1
   21020:	d013      	beq.n	2104a <ble_ll_conn_hci_le_ltk_neg_reply+0x48>
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   21022:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   21026:	2b08      	cmp	r3, #8
   21028:	d004      	beq.n	21034 <ble_ll_conn_hci_le_ltk_neg_reply+0x32>
        rc = BLE_ERR_CMD_DISALLOWED;
   2102a:	200c      	movs	r0, #12
    rsp->conn_handle = htole16(handle);
   2102c:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   2102e:	2302      	movs	r3, #2
   21030:	702b      	strb	r3, [r5, #0]
}
   21032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   21034:	2206      	movs	r2, #6
   21036:	2103      	movs	r1, #3
   21038:	f001 f8c8 	bl	221cc <ble_ll_ctrl_reject_ind_send>
    connsm->enc_data.enc_state = CONN_ENC_S_LTK_NEG_REPLY;
   2103c:	2309      	movs	r3, #9
   2103e:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
    rc = BLE_ERR_SUCCESS;
   21042:	2000      	movs	r0, #0
   21044:	e7f2      	b.n	2102c <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>
        rc = BLE_ERR_UNK_CONN_ID;
   21046:	2002      	movs	r0, #2
   21048:	e7f0      	b.n	2102c <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>
        rc = BLE_ERR_UNSPECIFIED;
   2104a:	201f      	movs	r0, #31
   2104c:	e7ee      	b.n	2102c <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>

0002104e <ble_ll_conn_hci_rd_auth_pyld_tmo>:
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;


    if (len != sizeof(*cmd)) {
   2104e:	2902      	cmp	r1, #2
   21050:	d001      	beq.n	21056 <ble_ll_conn_hci_rd_auth_pyld_tmo+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21052:	2012      	movs	r0, #18

    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   21054:	4770      	bx	lr
{
   21056:	b570      	push	{r4, r5, r6, lr}
   21058:	461d      	mov	r5, r3
   2105a:	4614      	mov	r4, r2
    handle = le16toh(cmd->conn_handle);
   2105c:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   2105e:	4630      	mov	r0, r6
   21060:	f7fe f80a 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   21064:	b138      	cbz	r0, 21076 <ble_ll_conn_hci_rd_auth_pyld_tmo+0x28>
        rsp->tmo = htole16(connsm->auth_pyld_tmo);
   21066:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   2106a:	8063      	strh	r3, [r4, #2]
        rc = BLE_ERR_SUCCESS;
   2106c:	2000      	movs	r0, #0
    rsp->conn_handle = htole16(handle);
   2106e:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   21070:	2304      	movs	r3, #4
   21072:	702b      	strb	r3, [r5, #0]
}
   21074:	bd70      	pop	{r4, r5, r6, pc}
        rsp->tmo = 0;
   21076:	2300      	movs	r3, #0
   21078:	70a3      	strb	r3, [r4, #2]
   2107a:	70e3      	strb	r3, [r4, #3]
        rc = BLE_ERR_UNK_CONN_ID;
   2107c:	2002      	movs	r0, #2
   2107e:	e7f6      	b.n	2106e <ble_ll_conn_hci_rd_auth_pyld_tmo+0x20>

00021080 <ble_ll_conn_hci_wr_auth_pyld_tmo>:
    uint32_t min_tmo;
    uint16_t handle;
    uint16_t tmo;
    int rc;

    if (len != sizeof(*cmd)) {
   21080:	2904      	cmp	r1, #4
   21082:	d001      	beq.n	21088 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21084:	2012      	movs	r0, #18
    }

    rsp->conn_handle = htole16(handle);
    *rsplen = sizeof(*rsp);
    return rc;
}
   21086:	4770      	bx	lr
{
   21088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2108a:	461d      	mov	r5, r3
   2108c:	4616      	mov	r6, r2
   2108e:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   21090:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   21092:	4638      	mov	r0, r7
   21094:	f7fd fff0 	bl	1f078 <ble_ll_conn_find_active_conn>
    if (!connsm) {
   21098:	4603      	mov	r3, r0
   2109a:	b1d8      	cbz	r0, 210d4 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x54>
        tmo = le16toh(cmd->tmo);
   2109c:	8862      	ldrh	r2, [r4, #2]
   2109e:	b290      	uxth	r0, r2
        min_tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   210a0:	f8b3 4068 	ldrh.w	r4, [r3, #104]	; 0x68
   210a4:	f240 41e2 	movw	r1, #1250	; 0x4e2
   210a8:	fb01 f104 	mul.w	r1, r1, r4
        min_tmo *= (connsm->slave_latency + 1);
   210ac:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
   210b0:	fb04 1101 	mla	r1, r4, r1, r1
        min_tmo /= 10000;
   210b4:	4c0c      	ldr	r4, [pc, #48]	; (210e8 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x68>)
   210b6:	fba4 4101 	umull	r4, r1, r4, r1
        if (tmo < min_tmo) {
   210ba:	ebb0 3f51 	cmp.w	r0, r1, lsr #13
   210be:	d30b      	bcc.n	210d8 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x58>
            connsm->auth_pyld_tmo = tmo;
   210c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
   210c4:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
            if (ble_npl_callout_is_active(&connsm->auth_pyld_timer)) {
   210c8:	b15a      	cbz	r2, 210e2 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x62>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   210ca:	4618      	mov	r0, r3
   210cc:	f7fe f9d4 	bl	1f478 <ble_ll_conn_auth_pyld_timer_start>
    rc = BLE_ERR_SUCCESS;
   210d0:	2000      	movs	r0, #0
   210d2:	e002      	b.n	210da <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
        rc = BLE_ERR_UNK_CONN_ID;
   210d4:	2002      	movs	r0, #2
   210d6:	e000      	b.n	210da <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
            rc = BLE_ERR_INV_HCI_CMD_PARMS;
   210d8:	2012      	movs	r0, #18
    rsp->conn_handle = htole16(handle);
   210da:	8037      	strh	r7, [r6, #0]
    *rsplen = sizeof(*rsp);
   210dc:	2302      	movs	r3, #2
   210de:	702b      	strb	r3, [r5, #0]
}
   210e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rc = BLE_ERR_SUCCESS;
   210e2:	2000      	movs	r0, #0
   210e4:	e7f9      	b.n	210da <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
   210e6:	bf00      	nop
   210e8:	d1b71759 	.word	0xd1b71759

000210ec <ble_ll_ctrl_enc_allowed_pdu>:
{
    int allowed;

    allowed = 0;

    switch (llid) {
   210ec:	2801      	cmp	r0, #1
   210ee:	d010      	beq.n	21112 <ble_ll_ctrl_enc_allowed_pdu+0x26>
   210f0:	2803      	cmp	r0, #3
   210f2:	d113      	bne.n	2111c <ble_ll_ctrl_enc_allowed_pdu+0x30>
    case BLE_LL_LLID_CTRL:
        switch (opcode) {
   210f4:	3a02      	subs	r2, #2
   210f6:	2a0f      	cmp	r2, #15
   210f8:	d809      	bhi.n	2110e <ble_ll_ctrl_enc_allowed_pdu+0x22>
   210fa:	e8df f002 	tbb	[pc, r2]
   210fe:	1111      	.short	0x1111
   21100:	08111111 	.word	0x08111111
   21104:	11110808 	.word	0x11110808
   21108:	08081108 	.word	0x08081108
   2110c:	1108      	.short	0x1108
    allowed = 0;
   2110e:	2000      	movs	r0, #0
   21110:	4770      	bx	lr
            allowed = 1;
            break;
        }
        break;
    case BLE_LL_LLID_DATA_FRAG:
        if (len == 0) {
   21112:	b909      	cbnz	r1, 21118 <ble_ll_ctrl_enc_allowed_pdu+0x2c>
            /* Empty PDUs are allowed */
            allowed = 1;
   21114:	2001      	movs	r0, #1
        }
        break;
    }

    return allowed;
}
   21116:	4770      	bx	lr
    allowed = 0;
   21118:	2000      	movs	r0, #0
   2111a:	4770      	bx	lr
   2111c:	2000      	movs	r0, #0
   2111e:	4770      	bx	lr
            allowed = 1;
   21120:	2001      	movs	r0, #1
   21122:	4770      	bx	lr

00021124 <ble_ll_ctrl_rx_start_enc_req>:
{
    int rc;

    /* Only master should receive start enc request */
    rc = BLE_ERR_MAX;
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   21124:	79c3      	ldrb	r3, [r0, #7]
   21126:	2b01      	cmp	r3, #1
   21128:	d001      	beq.n	2112e <ble_ll_ctrl_rx_start_enc_req+0xa>
        if (connsm->enc_data.enc_state == CONN_ENC_S_START_ENC_REQ_WAIT) {
            connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
            rc = BLE_LL_CTRL_START_ENC_RSP;
        }
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   2112a:	2007      	movs	r0, #7
   2112c:	4770      	bx	lr
        if (connsm->enc_data.enc_state == CONN_ENC_S_START_ENC_REQ_WAIT) {
   2112e:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   21132:	2b06      	cmp	r3, #6
   21134:	d001      	beq.n	2113a <ble_ll_ctrl_rx_start_enc_req+0x16>
    rc = BLE_ERR_MAX;
   21136:	20ff      	movs	r0, #255	; 0xff
    }
    return rc;
}
   21138:	4770      	bx	lr
            connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
   2113a:	2307      	movs	r3, #7
   2113c:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
            rc = BLE_LL_CTRL_START_ENC_RSP;
   21140:	2006      	movs	r0, #6
   21142:	4770      	bx	lr

00021144 <ble_ll_ctrl_rx_pause_enc_req>:
     * The spec does not say what to do here, but if we receive a pause
     * encryption request and we are not encrypted, what do we do? We
     * ignore it...
     */
    rc = BLE_ERR_MAX;
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   21144:	79c3      	ldrb	r3, [r0, #7]
   21146:	2b02      	cmp	r3, #2
   21148:	d001      	beq.n	2114e <ble_ll_ctrl_rx_pause_enc_req+0xa>
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   2114a:	2007      	movs	r0, #7
   2114c:	4770      	bx	lr
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
   2114e:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   21152:	2b02      	cmp	r3, #2
   21154:	d001      	beq.n	2115a <ble_ll_ctrl_rx_pause_enc_req+0x16>
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   21156:	2007      	movs	r0, #7
   21158:	4770      	bx	lr
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
   2115a:	200b      	movs	r0, #11
    }

    return rc;
}
   2115c:	4770      	bx	lr

0002115e <ble_ll_ctrl_rx_pause_enc_rsp>:
static uint8_t
ble_ll_ctrl_rx_pause_enc_rsp(struct ble_ll_conn_sm *connsm)
{
    int rc;

    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   2115e:	79c3      	ldrb	r3, [r0, #7]
   21160:	2b01      	cmp	r3, #1
   21162:	d00a      	beq.n	2117a <ble_ll_ctrl_rx_pause_enc_rsp+0x1c>
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
    } else if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSE_ENC_RSP_WAIT) {
   21164:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   21168:	2b04      	cmp	r3, #4
   2116a:	d001      	beq.n	21170 <ble_ll_ctrl_rx_pause_enc_rsp+0x12>
         * From this moment encryption is paused.
         */
        rc = BLE_ERR_MAX;
        connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   2116c:	2007      	movs	r0, #7
    }

    return rc;
}
   2116e:	4770      	bx	lr
        connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
   21170:	2305      	movs	r3, #5
   21172:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
        rc = BLE_ERR_MAX;
   21176:	20ff      	movs	r0, #255	; 0xff
   21178:	4770      	bx	lr
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
   2117a:	200b      	movs	r0, #11
   2117c:	4770      	bx	lr

0002117e <ble_ll_ctrl_proc_rsp_timer_cb>:
{
   2117e:	b508      	push	{r3, lr}
    ble_ll_conn_timeout((struct ble_ll_conn_sm *)ble_npl_event_get_arg(ev),
   21180:	2122      	movs	r1, #34	; 0x22
   21182:	6880      	ldr	r0, [r0, #8]
   21184:	f7fe fde2 	bl	1fd4c <ble_ll_conn_timeout>
}
   21188:	bd08      	pop	{r3, pc}
	...

0002118c <ble_ll_ctrl_start_rsp_timer>:
{
   2118c:	b510      	push	{r4, lr}
   2118e:	4603      	mov	r3, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   21190:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
   21194:	4a05      	ldr	r2, [pc, #20]	; (211ac <ble_ll_ctrl_start_rsp_timer+0x20>)
   21196:	4906      	ldr	r1, [pc, #24]	; (211b0 <ble_ll_ctrl_start_rsp_timer+0x24>)
   21198:	4620      	mov	r0, r4
   2119a:	f7e8 fdc1 	bl	9d20 <os_callout_init>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   2119e:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
   211a2:	4620      	mov	r0, r4
   211a4:	f7e8 fde8 	bl	9d78 <os_callout_reset>
}
   211a8:	bd10      	pop	{r4, pc}
   211aa:	bf00      	nop
   211ac:	0002117f 	.word	0x0002117f
   211b0:	200084e8 	.word	0x200084e8

000211b4 <ble_ll_ctrl_conn_upd_make>:
{
   211b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   211b6:	4604      	mov	r4, r0
   211b8:	460e      	mov	r6, r1
    instant = connsm->event_cntr + connsm->slave_latency + 6 + 1;
   211ba:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
   211be:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
   211c2:	441d      	add	r5, r3
   211c4:	b2ad      	uxth	r5, r5
   211c6:	3507      	adds	r5, #7
   211c8:	b2ad      	uxth	r5, r5
    if (cp) {
   211ca:	2a00      	cmp	r2, #0
   211cc:	d066      	beq.n	2129c <ble_ll_ctrl_conn_upd_make+0xe8>
   211ce:	4611      	mov	r1, r2
        if (cp->offset0 != 0xFFFF) {
   211d0:	8997      	ldrh	r7, [r2, #12]
   211d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   211d6:	429f      	cmp	r7, r3
   211d8:	d05c      	beq.n	21294 <ble_ll_ctrl_conn_upd_make+0xe0>
            new_itvl_usecs = cp->interval_max * BLE_LL_CONN_ITVL_USECS;
   211da:	8853      	ldrh	r3, [r2, #2]
   211dc:	f240 42e2 	movw	r2, #1250	; 0x4e2
   211e0:	fb02 f303 	mul.w	r3, r2, r3
            old_itvl_usecs = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   211e4:	f8b0 0068 	ldrh.w	r0, [r0, #104]	; 0x68
   211e8:	fb02 f200 	mul.w	r2, r2, r0
            if ((int16_t)(cp->ref_conn_event_cnt - instant) >= 0) {
   211ec:	8948      	ldrh	r0, [r1, #10]
   211ee:	eba0 0c05 	sub.w	ip, r0, r5
   211f2:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   211f6:	d140      	bne.n	2127a <ble_ll_ctrl_conn_upd_make+0xc6>
                num_old_ce = cp->ref_conn_event_cnt - instant;
   211f8:	4660      	mov	r0, ip
                dt += (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   211fa:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   211fe:	fb0c f707 	mul.w	r7, ip, r7
   21202:	fb00 7202 	mla	r2, r0, r2, r7
                dt = dt % new_itvl_usecs;
   21206:	fbb2 f0f3 	udiv	r0, r2, r3
   2120a:	fb03 2310 	mls	r3, r3, r0, r2
            req->winoffset = dt / BLE_LL_CONN_TX_WIN_USECS;
   2120e:	4a2d      	ldr	r2, [pc, #180]	; (212c4 <ble_ll_ctrl_conn_upd_make+0x110>)
   21210:	fba2 2303 	umull	r2, r3, r2, r3
   21214:	0a9b      	lsrs	r3, r3, #10
   21216:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
        req->interval = cp->interval_max;
   2121a:	884b      	ldrh	r3, [r1, #2]
   2121c:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
        req->timeout = cp->timeout;
   21220:	88cb      	ldrh	r3, [r1, #6]
   21222:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
        req->latency = cp->latency;
   21226:	888b      	ldrh	r3, [r1, #4]
   21228:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
        req->winsize = 1;
   2122c:	2301      	movs	r3, #1
   2122e:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
    req->instant = instant;
   21232:	f8a4 5180 	strh.w	r5, [r4, #384]	; 0x180
    pyld[0] = req->winsize;
   21236:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   2123a:	4630      	mov	r0, r6
   2123c:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, req->winoffset);
   21240:	f8b4 1178 	ldrh.w	r1, [r4, #376]	; 0x178
   21244:	f7fa fcd2 	bl	1bbec <put_le16>
    put_le16(pyld + 3, req->interval);
   21248:	f8b4 117a 	ldrh.w	r1, [r4, #378]	; 0x17a
   2124c:	1cf0      	adds	r0, r6, #3
   2124e:	f7fa fccd 	bl	1bbec <put_le16>
    put_le16(pyld + 5, req->latency);
   21252:	f8b4 117c 	ldrh.w	r1, [r4, #380]	; 0x17c
   21256:	1d70      	adds	r0, r6, #5
   21258:	f7fa fcc8 	bl	1bbec <put_le16>
    put_le16(pyld + 7, req->timeout);
   2125c:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
   21260:	1df0      	adds	r0, r6, #7
   21262:	f7fa fcc3 	bl	1bbec <put_le16>
    put_le16(pyld + 9, instant);
   21266:	4629      	mov	r1, r5
   21268:	f106 0009 	add.w	r0, r6, #9
   2126c:	f7fa fcbe 	bl	1bbec <put_le16>
    connsm->csmflags.cfbit.conn_update_sched = 1;
   21270:	7863      	ldrb	r3, [r4, #1]
   21272:	f043 0301 	orr.w	r3, r3, #1
   21276:	7063      	strb	r3, [r4, #1]
}
   21278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                num_old_ce = instant - cp->ref_conn_event_cnt;
   2127a:	1a28      	subs	r0, r5, r0
                dt = old_itvl_usecs * num_old_ce;
   2127c:	fb00 f202 	mul.w	r2, r0, r2
                dt -= (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   21280:	f240 40e2 	movw	r0, #1250	; 0x4e2
   21284:	fb00 2217 	mls	r2, r0, r7, r2
                dt = dt % new_itvl_usecs;
   21288:	fbb2 f7f3 	udiv	r7, r2, r3
   2128c:	fb03 2217 	mls	r2, r3, r7, r2
                dt = new_itvl_usecs - dt;
   21290:	1a9b      	subs	r3, r3, r2
   21292:	e7bc      	b.n	2120e <ble_ll_ctrl_conn_upd_make+0x5a>
            req->winoffset = 0;
   21294:	2300      	movs	r3, #0
   21296:	f8a0 3178 	strh.w	r3, [r0, #376]	; 0x178
   2129a:	e7be      	b.n	2121a <ble_ll_ctrl_conn_upd_make+0x66>
        req->interval = hcu->conn_itvl_max;
   2129c:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   212a0:	f8a0 317a 	strh.w	r3, [r0, #378]	; 0x17a
        req->timeout = hcu->supervision_timeout;
   212a4:	f8b0 3170 	ldrh.w	r3, [r0, #368]	; 0x170
   212a8:	f8a0 317e 	strh.w	r3, [r0, #382]	; 0x17e
        req->latency = hcu->conn_latency;
   212ac:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   212b0:	f8a0 317c 	strh.w	r3, [r0, #380]	; 0x17c
        req->winoffset = 0;
   212b4:	2300      	movs	r3, #0
   212b6:	f8a0 3178 	strh.w	r3, [r0, #376]	; 0x178
        req->winsize = connsm->tx_win_size;
   212ba:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   212be:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
   212c2:	e7b6      	b.n	21232 <ble_ll_ctrl_conn_upd_make+0x7e>
   212c4:	d1b71759 	.word	0xd1b71759

000212c8 <ble_ll_ctrl_version_ind_make>:
    put_le16(dptr + 21, offset);
}

static void
ble_ll_ctrl_version_ind_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   212c8:	b510      	push	{r4, lr}
   212ca:	460c      	mov	r4, r1
    /* Set flag to denote we have sent/received this */
    connsm->csmflags.cfbit.version_ind_sent = 1;
   212cc:	7843      	ldrb	r3, [r0, #1]
   212ce:	f043 0304 	orr.w	r3, r3, #4
   212d2:	7043      	strb	r3, [r0, #1]

    /* Fill out response */
    pyld[0] = BLE_HCI_VER_BCS;
   212d4:	4608      	mov	r0, r1
   212d6:	2309      	movs	r3, #9
   212d8:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, MYNEWT_VAL(BLE_LL_MFRG_ID));
   212dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
   212e0:	f7fa fc84 	bl	1bbec <put_le16>
    put_le16(pyld + 3, BLE_LL_SUB_VERS_NR);
   212e4:	2100      	movs	r1, #0
   212e6:	1ce0      	adds	r0, r4, #3
   212e8:	f7fa fc80 	bl	1bbec <put_le16>
}
   212ec:	bd10      	pop	{r4, pc}

000212ee <ble_ll_ctrl_datalen_upd_make>:
{
   212ee:	b538      	push	{r3, r4, r5, lr}
   212f0:	4605      	mov	r5, r0
   212f2:	460c      	mov	r4, r1
    put_le16(dptr + 1, connsm->max_rx_octets);
   212f4:	7ac1      	ldrb	r1, [r0, #11]
   212f6:	1c60      	adds	r0, r4, #1
   212f8:	f7fa fc78 	bl	1bbec <put_le16>
    put_le16(dptr + 3, connsm->max_rx_time);
   212fc:	8a69      	ldrh	r1, [r5, #18]
   212fe:	1ce0      	adds	r0, r4, #3
   21300:	f7fa fc74 	bl	1bbec <put_le16>
    put_le16(dptr + 5, connsm->max_tx_octets);
   21304:	7aa9      	ldrb	r1, [r5, #10]
   21306:	1d60      	adds	r0, r4, #5
   21308:	f7fa fc70 	bl	1bbec <put_le16>
    put_le16(dptr + 7, connsm->max_tx_time);
   2130c:	8a29      	ldrh	r1, [r5, #16]
   2130e:	1de0      	adds	r0, r4, #7
   21310:	f7fa fc6c 	bl	1bbec <put_le16>
}
   21314:	bd38      	pop	{r3, r4, r5, pc}

00021316 <ble_ll_ctrl_conn_param_pdu_make>:
{
   21316:	b570      	push	{r4, r5, r6, lr}
   21318:	4605      	mov	r5, r0
   2131a:	460c      	mov	r4, r1
    if (req) {
   2131c:	2a00      	cmp	r2, #0
   2131e:	d144      	bne.n	213aa <ble_ll_ctrl_conn_param_pdu_make+0x94>
        BLE_LL_ASSERT(hcu->handle != 0);
   21320:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
   21324:	2b00      	cmp	r3, #0
   21326:	d052      	beq.n	213ce <ble_ll_ctrl_conn_param_pdu_make+0xb8>
        put_le16(dptr, hcu->conn_itvl_min);
   21328:	f8b0 116a 	ldrh.w	r1, [r0, #362]	; 0x16a
   2132c:	4620      	mov	r0, r4
   2132e:	f7fa fc5d 	bl	1bbec <put_le16>
        put_le16(dptr + 2, hcu->conn_itvl_max);
   21332:	f8b5 116c 	ldrh.w	r1, [r5, #364]	; 0x16c
   21336:	1ca0      	adds	r0, r4, #2
   21338:	f7fa fc58 	bl	1bbec <put_le16>
        put_le16(dptr + 4, hcu->conn_latency);
   2133c:	f8b5 116e 	ldrh.w	r1, [r5, #366]	; 0x16e
   21340:	1d20      	adds	r0, r4, #4
   21342:	f7fa fc53 	bl	1bbec <put_le16>
        put_le16(dptr + 6, hcu->supervision_timeout);
   21346:	f8b5 1170 	ldrh.w	r1, [r5, #368]	; 0x170
   2134a:	1da0      	adds	r0, r4, #6
   2134c:	f7fa fc4e 	bl	1bbec <put_le16>
    dptr[8] = 0;
   21350:	2300      	movs	r3, #0
   21352:	7223      	strb	r3, [r4, #8]
    put_le16(dptr + 9, connsm->event_cntr);
   21354:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
   21358:	f104 0009 	add.w	r0, r4, #9
   2135c:	f7fa fc46 	bl	1bbec <put_le16>
    put_le16(dptr + 11, offset);
   21360:	f64f 71ff 	movw	r1, #65535	; 0xffff
   21364:	f104 000b 	add.w	r0, r4, #11
   21368:	f7fa fc40 	bl	1bbec <put_le16>
    put_le16(dptr + 13, offset);
   2136c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   21370:	f104 000d 	add.w	r0, r4, #13
   21374:	f7fa fc3a 	bl	1bbec <put_le16>
    put_le16(dptr + 15, offset);
   21378:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2137c:	f104 000f 	add.w	r0, r4, #15
   21380:	f7fa fc34 	bl	1bbec <put_le16>
    put_le16(dptr + 17, offset);
   21384:	f64f 71ff 	movw	r1, #65535	; 0xffff
   21388:	f104 0011 	add.w	r0, r4, #17
   2138c:	f7fa fc2e 	bl	1bbec <put_le16>
    put_le16(dptr + 19, offset);
   21390:	f64f 71ff 	movw	r1, #65535	; 0xffff
   21394:	f104 0013 	add.w	r0, r4, #19
   21398:	f7fa fc28 	bl	1bbec <put_le16>
    put_le16(dptr + 21, offset);
   2139c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   213a0:	f104 0015 	add.w	r0, r4, #21
   213a4:	f7fa fc22 	bl	1bbec <put_le16>
}
   213a8:	bd70      	pop	{r4, r5, r6, pc}
   213aa:	4616      	mov	r6, r2
        put_le16(dptr, req->interval_min);
   213ac:	8811      	ldrh	r1, [r2, #0]
   213ae:	4620      	mov	r0, r4
   213b0:	f7fa fc1c 	bl	1bbec <put_le16>
        put_le16(dptr + 2, req->interval_max);
   213b4:	8871      	ldrh	r1, [r6, #2]
   213b6:	1ca0      	adds	r0, r4, #2
   213b8:	f7fa fc18 	bl	1bbec <put_le16>
        put_le16(dptr + 4, req->latency);
   213bc:	88b1      	ldrh	r1, [r6, #4]
   213be:	1d20      	adds	r0, r4, #4
   213c0:	f7fa fc14 	bl	1bbec <put_le16>
        put_le16(dptr + 6, req->timeout);
   213c4:	88f1      	ldrh	r1, [r6, #6]
   213c6:	1da0      	adds	r0, r4, #6
   213c8:	f7fa fc10 	bl	1bbec <put_le16>
   213cc:	e7c0      	b.n	21350 <ble_ll_ctrl_conn_param_pdu_make+0x3a>
        BLE_LL_ASSERT(hcu->handle != 0);
   213ce:	f7e6 fef7 	bl	81c0 <hal_debugger_connected>
   213d2:	b100      	cbz	r0, 213d6 <ble_ll_ctrl_conn_param_pdu_make+0xc0>
   213d4:	be01      	bkpt	0x0001
   213d6:	2300      	movs	r3, #0
   213d8:	461a      	mov	r2, r3
   213da:	4619      	mov	r1, r3
   213dc:	4618      	mov	r0, r3
   213de:	f7e8 faf7 	bl	99d0 <__assert_func>
	...

000213e4 <ble_ll_ctrl_chanmap_req_make>:
 * @param connsm    Pointer to connection state machine
 * @param pyld      Pointer to payload of LL control PDU
 */
static void
ble_ll_ctrl_chanmap_req_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   213e4:	b510      	push	{r4, lr}
   213e6:	4604      	mov	r4, r0
   213e8:	4608      	mov	r0, r1
    /* Copy channel map that host desires into request */
    memcpy(pyld, g_ble_ll_conn_params.master_chan_map, BLE_LL_CONN_CHMAP_LEN);
   213ea:	4b0e      	ldr	r3, [pc, #56]	; (21424 <ble_ll_ctrl_chanmap_req_make+0x40>)
   213ec:	681a      	ldr	r2, [r3, #0]
   213ee:	600a      	str	r2, [r1, #0]
   213f0:	791b      	ldrb	r3, [r3, #4]
   213f2:	710b      	strb	r3, [r1, #4]
    memcpy(connsm->req_chanmap, pyld, BLE_LL_CONN_CHMAP_LEN);
   213f4:	680b      	ldr	r3, [r1, #0]
   213f6:	f8c4 3025 	str.w	r3, [r4, #37]	; 0x25
   213fa:	790b      	ldrb	r3, [r1, #4]
   213fc:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29

    /* Place instant into request */
    connsm->chanmap_instant = connsm->event_cntr + connsm->slave_latency + 6 + 1;
   21400:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
   21404:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   21408:	4419      	add	r1, r3
   2140a:	b289      	uxth	r1, r1
   2140c:	3107      	adds	r1, #7
   2140e:	b289      	uxth	r1, r1
   21410:	8561      	strh	r1, [r4, #42]	; 0x2a
    put_le16(pyld + BLE_LL_CONN_CHMAP_LEN, connsm->chanmap_instant);
   21412:	3005      	adds	r0, #5
   21414:	f7fa fbea 	bl	1bbec <put_le16>

    /* Set scheduled flag */
    connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   21418:	7863      	ldrb	r3, [r4, #1]
   2141a:	f043 0310 	orr.w	r3, r3, #16
   2141e:	7063      	strb	r3, [r4, #1]
}
   21420:	bd10      	pop	{r4, pc}
   21422:	bf00      	nop
   21424:	200087fc 	.word	0x200087fc

00021428 <ble_ll_ctrl_update_features>:
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
}

static void
ble_ll_ctrl_update_features(struct ble_ll_conn_sm *connsm, uint8_t *feat)
{
   21428:	b410      	push	{r4}
    connsm->conn_features = feat[0];
   2142a:	780b      	ldrb	r3, [r1, #0]
   2142c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    memcpy(connsm->remote_features, feat + 1, 7);
   21430:	f851 2f01 	ldr.w	r2, [r1, #1]!
   21434:	6402      	str	r2, [r0, #64]	; 0x40
   21436:	888c      	ldrh	r4, [r1, #4]
   21438:	798a      	ldrb	r2, [r1, #6]
   2143a:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
   2143e:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46

    /* If we received peer's features for the 1st time, we should try DLE */
    if (!connsm->csmflags.cfbit.rxd_features) {
   21442:	78c3      	ldrb	r3, [r0, #3]
   21444:	f013 0f08 	tst.w	r3, #8
   21448:	d102      	bne.n	21450 <ble_ll_ctrl_update_features+0x28>
            connsm->max_rx_time = BLE_LL_CONN_SUPP_TIME_MAX_CODED;
        }
#endif

        connsm->csmflags.cfbit.pending_initiate_dle = 1;
        connsm->csmflags.cfbit.rxd_features = 1;
   2144a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   2144e:	70c3      	strb	r3, [r0, #3]
    }
}
   21450:	f85d 4b04 	ldr.w	r4, [sp], #4
   21454:	4770      	bx	lr

00021456 <ble_ll_ctrl_rx_feature_req>:

    /*
     * Only accept slave feature requests if we are a master and feature
     * requests if we are a slave.
     */
    if (opcode ==  BLE_LL_CTRL_SLAVE_FEATURE_REQ) {
   21456:	2b0e      	cmp	r3, #14
   21458:	d004      	beq.n	21464 <ble_ll_ctrl_rx_feature_req+0xe>
        if (connsm->conn_role != BLE_LL_CONN_ROLE_MASTER) {
            return BLE_LL_CTRL_UNKNOWN_RSP;
        }
    } else {
        /* XXX: not sure this is correct but do it anyway */
        if (connsm->conn_role != BLE_LL_CONN_ROLE_SLAVE) {
   2145a:	79c3      	ldrb	r3, [r0, #7]
   2145c:	2b02      	cmp	r3, #2
   2145e:	d006      	beq.n	2146e <ble_ll_ctrl_rx_feature_req+0x18>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   21460:	2007      	movs	r0, #7

    put_le64(rspbuf + 1, our_feat);
    rspbuf[1] = connsm->conn_features;

    return rsp_opcode;
}
   21462:	4770      	bx	lr
        if (connsm->conn_role != BLE_LL_CONN_ROLE_MASTER) {
   21464:	79c3      	ldrb	r3, [r0, #7]
   21466:	2b01      	cmp	r3, #1
   21468:	d001      	beq.n	2146e <ble_ll_ctrl_rx_feature_req+0x18>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   2146a:	2007      	movs	r0, #7
   2146c:	4770      	bx	lr
{
   2146e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21472:	4616      	mov	r6, r2
   21474:	460d      	mov	r5, r1
   21476:	4604      	mov	r4, r0
    our_feat = ble_ll_read_supp_features();
   21478:	f7fb ff16 	bl	1d2a8 <ble_ll_read_supp_features>
   2147c:	4607      	mov	r7, r0
   2147e:	4688      	mov	r8, r1
    ble_ll_ctrl_update_features(connsm, dptr);
   21480:	4629      	mov	r1, r5
   21482:	4620      	mov	r0, r4
   21484:	f7ff ffd0 	bl	21428 <ble_ll_ctrl_update_features>
    connsm->conn_features &= our_feat;
   21488:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   2148c:	403b      	ands	r3, r7
   2148e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    put_le64(rspbuf + 1, our_feat);
   21492:	463a      	mov	r2, r7
   21494:	4643      	mov	r3, r8
   21496:	1c70      	adds	r0, r6, #1
   21498:	f7fa fbb6 	bl	1bc08 <put_le64>
    rspbuf[1] = connsm->conn_features;
   2149c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   214a0:	7073      	strb	r3, [r6, #1]
    return rsp_opcode;
   214a2:	2009      	movs	r0, #9
}
   214a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000214a8 <ble_ll_ctrl_enc_req_make>:
{
   214a8:	b570      	push	{r4, r5, r6, lr}
   214aa:	4604      	mov	r4, r0
   214ac:	460d      	mov	r5, r1
    put_le64(dptr, connsm->enc_data.host_rand_num);
   214ae:	f500 7394 	add.w	r3, r0, #296	; 0x128
   214b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   214b6:	4608      	mov	r0, r1
   214b8:	f7fa fba6 	bl	1bc08 <put_le64>
    put_le16(dptr + 8, connsm->enc_data.enc_div);
   214bc:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
   214c0:	f105 0008 	add.w	r0, r5, #8
   214c4:	f7fa fb92 	bl	1bbec <put_le16>
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text + 8, 8);
   214c8:	f504 76a8 	add.w	r6, r4, #336	; 0x150
   214cc:	2108      	movs	r1, #8
   214ce:	4630      	mov	r0, r6
   214d0:	f001 fd28 	bl	22f24 <ble_ll_rand_data_get>
    swap_buf(dptr + 10, connsm->enc_data.enc_block.plain_text + 8, 8);
   214d4:	2208      	movs	r2, #8
   214d6:	4631      	mov	r1, r6
   214d8:	f105 000a 	add.w	r0, r5, #10
   214dc:	f7fa fc03 	bl	1bce6 <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv, 4);
   214e0:	2104      	movs	r1, #4
   214e2:	f504 7098 	add.w	r0, r4, #304	; 0x130
   214e6:	f001 fd1d 	bl	22f24 <ble_ll_rand_data_get>
    memcpy(dptr + 18, connsm->enc_data.iv, 4);
   214ea:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   214ee:	f8c5 3012 	str.w	r3, [r5, #18]
}
   214f2:	bd70      	pop	{r4, r5, r6, pc}

000214f4 <ble_ll_ctrl_proc_init>:
 * @param connsm
 * @param ctrl_proc
 */
static struct os_mbuf *
ble_ll_ctrl_proc_init(struct ble_ll_conn_sm *connsm, int ctrl_proc)
{
   214f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   214f8:	4606      	mov	r6, r0
   214fa:	460d      	mov	r5, r1
    uint8_t *dptr;
    uint8_t *ctrdata;
    struct os_mbuf *om;

    /* Get an mbuf for the control pdu */
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN, sizeof(struct ble_mbuf_hdr));
   214fc:	2110      	movs	r1, #16
   214fe:	201b      	movs	r0, #27
   21500:	f7e9 fbf9 	bl	acf6 <os_msys_get_pkthdr>

    if (om) {
   21504:	4604      	mov	r4, r0
   21506:	b1d8      	cbz	r0, 21540 <ble_ll_ctrl_proc_init+0x4c>
        /* The control data starts after the opcode (1 byte) */
        dptr = om->om_data;
   21508:	6807      	ldr	r7, [r0, #0]
        ctrdata = dptr + 1;
   2150a:	f107 0801 	add.w	r8, r7, #1

        switch (ctrl_proc) {
   2150e:	2d08      	cmp	r5, #8
   21510:	d851      	bhi.n	215b6 <ble_ll_ctrl_proc_init+0xc2>
   21512:	e8df f005 	tbb	[pc, r5]
   21516:	1805      	.short	0x1805
   21518:	322c1e44 	.word	0x322c1e44
   2151c:	5a37      	.short	0x5a37
   2151e:	3e          	.byte	0x3e
   2151f:	00          	.byte	0x00
        case BLE_LL_CTRL_PROC_CONN_UPDATE:
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
            ble_ll_ctrl_conn_upd_make(connsm, ctrdata, NULL);
   21520:	2200      	movs	r2, #0
   21522:	4641      	mov	r1, r8
   21524:	4630      	mov	r0, r6
   21526:	f7ff fe45 	bl	211b4 <ble_ll_ctrl_conn_upd_make>
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
   2152a:	2500      	movs	r5, #0
            BLE_LL_ASSERT(0);
            break;
        }

        /* Set llid, length and opcode */
        dptr[0] = opcode;
   2152c:	703d      	strb	r5, [r7, #0]
        len = g_ble_ll_ctrl_pkt_lengths[opcode] + 1;
   2152e:	4b28      	ldr	r3, [pc, #160]	; (215d0 <ble_ll_ctrl_proc_init+0xdc>)
   21530:	5d5b      	ldrb	r3, [r3, r5]
   21532:	3301      	adds	r3, #1

        /* Add packet to transmit queue of connection */
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   21534:	b2db      	uxtb	r3, r3
   21536:	2203      	movs	r2, #3
   21538:	4621      	mov	r1, r4
   2153a:	4630      	mov	r0, r6
   2153c:	f7fe fe1e 	bl	2017c <ble_ll_conn_enqueue_pkt>
    }

    return om;
}
   21540:	4620      	mov	r0, r4
   21542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ble_ll_ctrl_chanmap_req_make(connsm, ctrdata);
   21546:	4641      	mov	r1, r8
   21548:	4630      	mov	r0, r6
   2154a:	f7ff ff4b 	bl	213e4 <ble_ll_ctrl_chanmap_req_make>
            opcode = BLE_LL_CTRL_CHANNEL_MAP_REQ;
   2154e:	2501      	movs	r5, #1
            break;
   21550:	e7ec      	b.n	2152c <ble_ll_ctrl_proc_init+0x38>
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   21552:	79f3      	ldrb	r3, [r6, #7]
   21554:	2b01      	cmp	r3, #1
   21556:	d008      	beq.n	2156a <ble_ll_ctrl_proc_init+0x76>
                opcode = BLE_LL_CTRL_SLAVE_FEATURE_REQ;
   21558:	250e      	movs	r5, #14
            put_le64(ctrdata, ble_ll_read_supp_features());
   2155a:	f7fb fea5 	bl	1d2a8 <ble_ll_read_supp_features>
   2155e:	4602      	mov	r2, r0
   21560:	460b      	mov	r3, r1
   21562:	4640      	mov	r0, r8
   21564:	f7fa fb50 	bl	1bc08 <put_le64>
            break;
   21568:	e7e0      	b.n	2152c <ble_ll_ctrl_proc_init+0x38>
                opcode = BLE_LL_CTRL_FEATURE_REQ;
   2156a:	2508      	movs	r5, #8
   2156c:	e7f5      	b.n	2155a <ble_ll_ctrl_proc_init+0x66>
            ble_ll_ctrl_version_ind_make(connsm, ctrdata);
   2156e:	4641      	mov	r1, r8
   21570:	4630      	mov	r0, r6
   21572:	f7ff fea9 	bl	212c8 <ble_ll_ctrl_version_ind_make>
            opcode = BLE_LL_CTRL_VERSION_IND;
   21576:	250c      	movs	r5, #12
            break;
   21578:	e7d8      	b.n	2152c <ble_ll_ctrl_proc_init+0x38>
            ctrdata[0] = connsm->disconnect_reason;
   2157a:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
   2157e:	707b      	strb	r3, [r7, #1]
            opcode = BLE_LL_CTRL_TERMINATE_IND;
   21580:	2502      	movs	r5, #2
            break;
   21582:	e7d3      	b.n	2152c <ble_ll_ctrl_proc_init+0x38>
            ble_ll_ctrl_conn_param_pdu_make(connsm, ctrdata, NULL);
   21584:	2200      	movs	r2, #0
   21586:	4641      	mov	r1, r8
   21588:	4630      	mov	r0, r6
   2158a:	f7ff fec4 	bl	21316 <ble_ll_ctrl_conn_param_pdu_make>
            opcode = BLE_LL_CTRL_CONN_PARM_REQ;
   2158e:	250f      	movs	r5, #15
            break;
   21590:	e7cc      	b.n	2152c <ble_ll_ctrl_proc_init+0x38>
            ble_ll_ctrl_datalen_upd_make(connsm, dptr);
   21592:	4639      	mov	r1, r7
   21594:	4630      	mov	r0, r6
   21596:	f7ff feaa 	bl	212ee <ble_ll_ctrl_datalen_upd_make>
            opcode = BLE_LL_CTRL_LENGTH_REQ;
   2159a:	2514      	movs	r5, #20
            break;
   2159c:	e7c6      	b.n	2152c <ble_ll_ctrl_proc_init+0x38>
            if (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) {
   2159e:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   215a2:	2b02      	cmp	r3, #2
   215a4:	d101      	bne.n	215aa <ble_ll_ctrl_proc_init+0xb6>
                opcode = BLE_LL_CTRL_PAUSE_ENC_REQ;
   215a6:	250a      	movs	r5, #10
   215a8:	e7c0      	b.n	2152c <ble_ll_ctrl_proc_init+0x38>
                ble_ll_ctrl_enc_req_make(connsm, ctrdata);
   215aa:	4641      	mov	r1, r8
   215ac:	4630      	mov	r0, r6
   215ae:	f7ff ff7b 	bl	214a8 <ble_ll_ctrl_enc_req_make>
                opcode = BLE_LL_CTRL_ENC_REQ;
   215b2:	2503      	movs	r5, #3
   215b4:	e7ba      	b.n	2152c <ble_ll_ctrl_proc_init+0x38>
            BLE_LL_ASSERT(0);
   215b6:	f7e6 fe03 	bl	81c0 <hal_debugger_connected>
   215ba:	b100      	cbz	r0, 215be <ble_ll_ctrl_proc_init+0xca>
   215bc:	be01      	bkpt	0x0001
   215be:	2300      	movs	r3, #0
   215c0:	461a      	mov	r2, r3
   215c2:	4619      	mov	r1, r3
   215c4:	4618      	mov	r0, r3
   215c6:	f7e8 fa03 	bl	99d0 <__assert_func>
            opcode = BLE_LL_CTRL_PING_REQ;
   215ca:	2512      	movs	r5, #18
   215cc:	e7ae      	b.n	2152c <ble_ll_ctrl_proc_init+0x38>
   215ce:	bf00      	nop
   215d0:	00029818 	.word	0x00029818

000215d4 <ble_ll_ctrl_rx_conn_update>:
{
   215d4:	b538      	push	{r3, r4, r5, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   215d6:	79c3      	ldrb	r3, [r0, #7]
   215d8:	2b01      	cmp	r3, #1
   215da:	d03b      	beq.n	21654 <ble_ll_ctrl_rx_conn_update+0x80>
   215dc:	460d      	mov	r5, r1
   215de:	4604      	mov	r4, r0
    reqdata->winsize = dptr[0];
   215e0:	4608      	mov	r0, r1
   215e2:	f810 3b01 	ldrb.w	r3, [r0], #1
   215e6:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
    reqdata->winoffset = get_le16(dptr + 1);
   215ea:	f7fa fb20 	bl	1bc2e <get_le16>
   215ee:	f8a4 0178 	strh.w	r0, [r4, #376]	; 0x178
    reqdata->interval = get_le16(dptr + 3);
   215f2:	1ce8      	adds	r0, r5, #3
   215f4:	f7fa fb1b 	bl	1bc2e <get_le16>
   215f8:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
    reqdata->latency = get_le16(dptr + 5);
   215fc:	1d68      	adds	r0, r5, #5
   215fe:	f7fa fb16 	bl	1bc2e <get_le16>
   21602:	f8a4 017c 	strh.w	r0, [r4, #380]	; 0x17c
    reqdata->timeout = get_le16(dptr + 7);
   21606:	1de8      	adds	r0, r5, #7
   21608:	f7fa fb11 	bl	1bc2e <get_le16>
   2160c:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    reqdata->instant = get_le16(dptr + 9);
   21610:	f105 0009 	add.w	r0, r5, #9
   21614:	f7fa fb0b 	bl	1bc2e <get_le16>
   21618:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
    conn_events = (reqdata->instant - connsm->event_cntr) & 0xFFFF;
   2161c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   21620:	1ac3      	subs	r3, r0, r3
   21622:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   21624:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   21628:	4293      	cmp	r3, r2
   2162a:	d80d      	bhi.n	21648 <ble_ll_ctrl_rx_conn_update+0x74>
        connsm->csmflags.cfbit.conn_update_sched = 1;
   2162c:	7862      	ldrb	r2, [r4, #1]
   2162e:	f042 0201 	orr.w	r2, r2, #1
   21632:	7062      	strb	r2, [r4, #1]
        if (conn_events == 0) {
   21634:	b983      	cbnz	r3, 21658 <ble_ll_ctrl_rx_conn_update+0x84>
            reqdata->winoffset = 0;
   21636:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
            reqdata->winsize = 0;
   2163a:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
            reqdata->instant += 1;
   2163e:	3001      	adds	r0, #1
   21640:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
    return rsp_opcode;
   21644:	20ff      	movs	r0, #255	; 0xff
   21646:	e006      	b.n	21656 <ble_ll_ctrl_rx_conn_update+0x82>
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   21648:	2128      	movs	r1, #40	; 0x28
   2164a:	4620      	mov	r0, r4
   2164c:	f7fe fb7e 	bl	1fd4c <ble_ll_conn_timeout>
    return rsp_opcode;
   21650:	20ff      	movs	r0, #255	; 0xff
   21652:	e000      	b.n	21656 <ble_ll_ctrl_rx_conn_update+0x82>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   21654:	2007      	movs	r0, #7
}
   21656:	bd38      	pop	{r3, r4, r5, pc}
    return rsp_opcode;
   21658:	20ff      	movs	r0, #255	; 0xff
   2165a:	e7fc      	b.n	21656 <ble_ll_ctrl_rx_conn_update+0x82>

0002165c <ble_ll_ctrl_rx_chanmap_req>:
{
   2165c:	b538      	push	{r3, r4, r5, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   2165e:	79c3      	ldrb	r3, [r0, #7]
   21660:	2b01      	cmp	r3, #1
   21662:	d01f      	beq.n	216a4 <ble_ll_ctrl_rx_chanmap_req+0x48>
   21664:	460d      	mov	r5, r1
   21666:	4604      	mov	r4, r0
    instant = get_le16(dptr + BLE_LL_CONN_CHMAP_LEN);
   21668:	1d48      	adds	r0, r1, #5
   2166a:	f7fa fae0 	bl	1bc2e <get_le16>
    conn_events = (instant - connsm->event_cntr) & 0xFFFF;
   2166e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   21672:	1ac3      	subs	r3, r0, r3
   21674:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   21676:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   2167a:	4293      	cmp	r3, r2
   2167c:	d80c      	bhi.n	21698 <ble_ll_ctrl_rx_chanmap_req+0x3c>
        connsm->chanmap_instant = instant;
   2167e:	8560      	strh	r0, [r4, #42]	; 0x2a
        memcpy(connsm->req_chanmap, dptr, BLE_LL_CONN_CHMAP_LEN);
   21680:	682b      	ldr	r3, [r5, #0]
   21682:	f8c4 3025 	str.w	r3, [r4, #37]	; 0x25
   21686:	792b      	ldrb	r3, [r5, #4]
   21688:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
        connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   2168c:	7863      	ldrb	r3, [r4, #1]
   2168e:	f043 0310 	orr.w	r3, r3, #16
   21692:	7063      	strb	r3, [r4, #1]
    return BLE_ERR_MAX;
   21694:	20ff      	movs	r0, #255	; 0xff
   21696:	e006      	b.n	216a6 <ble_ll_ctrl_rx_chanmap_req+0x4a>
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   21698:	2128      	movs	r1, #40	; 0x28
   2169a:	4620      	mov	r0, r4
   2169c:	f7fe fb56 	bl	1fd4c <ble_ll_conn_timeout>
    return BLE_ERR_MAX;
   216a0:	20ff      	movs	r0, #255	; 0xff
   216a2:	e000      	b.n	216a6 <ble_ll_ctrl_rx_chanmap_req+0x4a>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   216a4:	2007      	movs	r0, #7
}
   216a6:	bd38      	pop	{r3, r4, r5, pc}

000216a8 <ble_ll_ctrl_len_proc>:
{
   216a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   216ac:	4680      	mov	r8, r0
   216ae:	460c      	mov	r4, r1
    ctrl_req.max_rx_bytes = get_le16(dptr);
   216b0:	4608      	mov	r0, r1
   216b2:	f7fa fabc 	bl	1bc2e <get_le16>
   216b6:	4605      	mov	r5, r0
    ctrl_req.max_rx_time = get_le16(dptr + 2);
   216b8:	1ca0      	adds	r0, r4, #2
   216ba:	f7fa fab8 	bl	1bc2e <get_le16>
   216be:	4606      	mov	r6, r0
    ctrl_req.max_tx_bytes = get_le16(dptr + 4);
   216c0:	1d20      	adds	r0, r4, #4
   216c2:	f7fa fab4 	bl	1bc2e <get_le16>
   216c6:	4607      	mov	r7, r0
    ctrl_req.max_tx_time = get_le16(dptr + 6);
   216c8:	1da0      	adds	r0, r4, #6
   216ca:	f7fa fab0 	bl	1bc2e <get_le16>
    if ((ctrl_req.max_rx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   216ce:	2d1a      	cmp	r5, #26
   216d0:	d916      	bls.n	21700 <ble_ll_ctrl_len_proc+0x58>
   216d2:	f5b6 7fa4 	cmp.w	r6, #328	; 0x148
   216d6:	d316      	bcc.n	21706 <ble_ll_ctrl_len_proc+0x5e>
        (ctrl_req.max_rx_time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   216d8:	2f1a      	cmp	r7, #26
   216da:	d916      	bls.n	2170a <ble_ll_ctrl_len_proc+0x62>
        (ctrl_req.max_tx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   216dc:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   216e0:	d201      	bcs.n	216e6 <ble_ll_ctrl_len_proc+0x3e>
        rc = 1;
   216e2:	2001      	movs	r0, #1
    return rc;
   216e4:	e00d      	b.n	21702 <ble_ll_ctrl_len_proc+0x5a>
        connsm->rem_max_rx_time = ctrl_req.max_rx_time;
   216e6:	f8a8 6016 	strh.w	r6, [r8, #22]
        connsm->rem_max_tx_time = ctrl_req.max_tx_time;
   216ea:	f8a8 0014 	strh.w	r0, [r8, #20]
        connsm->rem_max_rx_octets = ctrl_req.max_rx_bytes;
   216ee:	f888 500d 	strb.w	r5, [r8, #13]
        connsm->rem_max_tx_octets = ctrl_req.max_tx_bytes;
   216f2:	f888 700c 	strb.w	r7, [r8, #12]
        ble_ll_conn_update_eff_data_len(connsm);
   216f6:	4640      	mov	r0, r8
   216f8:	f7fd ff94 	bl	1f624 <ble_ll_conn_update_eff_data_len>
        rc = 0;
   216fc:	2000      	movs	r0, #0
   216fe:	e000      	b.n	21702 <ble_ll_ctrl_len_proc+0x5a>
        rc = 1;
   21700:	2001      	movs	r0, #1
}
   21702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
   21706:	2001      	movs	r0, #1
   21708:	e7fb      	b.n	21702 <ble_ll_ctrl_len_proc+0x5a>
   2170a:	2001      	movs	r0, #1
   2170c:	e7f9      	b.n	21702 <ble_ll_ctrl_len_proc+0x5a>

0002170e <ble_ll_ctrl_rx_enc_req>:
{
   2170e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (connsm->conn_role != BLE_LL_CONN_ROLE_SLAVE) {
   21710:	79c3      	ldrb	r3, [r0, #7]
   21712:	2b02      	cmp	r3, #2
   21714:	d001      	beq.n	2171a <ble_ll_ctrl_rx_enc_req+0xc>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   21716:	2007      	movs	r0, #7
}
   21718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2171a:	4616      	mov	r6, r2
   2171c:	460d      	mov	r5, r1
   2171e:	4604      	mov	r4, r0
    connsm->enc_data.enc_state = CONN_ENC_S_LTK_REQ_WAIT;
   21720:	2708      	movs	r7, #8
   21722:	f880 7118 	strb.w	r7, [r0, #280]	; 0x118
    connsm->enc_data.rx_pkt_cntr = 0;
   21726:	2300      	movs	r3, #0
   21728:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
    connsm->enc_data.tx_pkt_cntr = 0;
   2172c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    connsm->enc_data.tx_encrypted = 0;
   21730:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
    connsm->enc_data.host_rand_num = get_le64(dptr);
   21734:	4608      	mov	r0, r1
   21736:	f7fa fa8a 	bl	1bc4e <get_le64>
   2173a:	f504 7394 	add.w	r3, r4, #296	; 0x128
   2173e:	e9c3 0100 	strd	r0, r1, [r3]
    connsm->enc_data.enc_div = get_le16(dptr + 8);
   21742:	19e8      	adds	r0, r5, r7
   21744:	f7fa fa73 	bl	1bc2e <get_le16>
   21748:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    swap_buf(connsm->enc_data.enc_block.plain_text + 8, dptr + 10, 8);
   2174c:	463a      	mov	r2, r7
   2174e:	f105 010a 	add.w	r1, r5, #10
   21752:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   21756:	f7fa fac6 	bl	1bce6 <swap_buf>
    memcpy(connsm->enc_data.iv, dptr + 18, 4);
   2175a:	f8d5 3012 	ldr.w	r3, [r5, #18]
   2175e:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text, 8);
   21762:	f504 75a4 	add.w	r5, r4, #328	; 0x148
   21766:	4639      	mov	r1, r7
   21768:	4628      	mov	r0, r5
   2176a:	f001 fbdb 	bl	22f24 <ble_ll_rand_data_get>
    swap_buf(rspdata, connsm->enc_data.enc_block.plain_text, 8);
   2176e:	463a      	mov	r2, r7
   21770:	4629      	mov	r1, r5
   21772:	4630      	mov	r0, r6
   21774:	f7fa fab7 	bl	1bce6 <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv + 4, 4);
   21778:	2104      	movs	r1, #4
   2177a:	f504 709a 	add.w	r0, r4, #308	; 0x134
   2177e:	f001 fbd1 	bl	22f24 <ble_ll_rand_data_get>
    memcpy(rspdata + 8, connsm->enc_data.iv + 4, 4);
   21782:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   21786:	60b3      	str	r3, [r6, #8]
    return BLE_LL_CTRL_ENC_RSP;
   21788:	2004      	movs	r0, #4
   2178a:	e7c5      	b.n	21718 <ble_ll_ctrl_rx_enc_req+0xa>

0002178c <ble_ll_calc_session_key>:
{
   2178c:	b510      	push	{r4, lr}
   2178e:	4604      	mov	r4, r0
        if (!ble_hw_encrypt_block(&connsm->enc_data.enc_block)) {
   21790:	f504 709c 	add.w	r0, r4, #312	; 0x138
   21794:	f004 f8d2 	bl	2593c <ble_hw_encrypt_block>
   21798:	2800      	cmp	r0, #0
   2179a:	d1f9      	bne.n	21790 <ble_ll_calc_session_key+0x4>
}
   2179c:	bd10      	pop	{r4, pc}

0002179e <ble_ll_ctrl_rx_enc_rsp>:
{
   2179e:	b538      	push	{r3, r4, r5, lr}
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   217a0:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   217a4:	2b02      	cmp	r3, #2
   217a6:	d000      	beq.n	217aa <ble_ll_ctrl_rx_enc_rsp+0xc>
}
   217a8:	bd38      	pop	{r3, r4, r5, pc}
   217aa:	460d      	mov	r5, r1
   217ac:	4604      	mov	r4, r0
        connsm->enc_data.rx_pkt_cntr = 0;
   217ae:	2300      	movs	r3, #0
   217b0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        connsm->enc_data.tx_pkt_cntr = 0;
   217b4:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
        connsm->enc_data.tx_encrypted = 0;
   217b8:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
        swap_buf(connsm->enc_data.enc_block.plain_text, dptr, 8);
   217bc:	2208      	movs	r2, #8
   217be:	f500 70a4 	add.w	r0, r0, #328	; 0x148
   217c2:	f7fa fa90 	bl	1bce6 <swap_buf>
        memcpy(connsm->enc_data.iv + 4, dptr + 8, 4);
   217c6:	68ab      	ldr	r3, [r5, #8]
   217c8:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
        ble_ll_calc_session_key(connsm);
   217cc:	4620      	mov	r0, r4
   217ce:	f7ff ffdd 	bl	2178c <ble_ll_calc_session_key>
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_REQ_WAIT;
   217d2:	2306      	movs	r3, #6
   217d4:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
}
   217d8:	e7e6      	b.n	217a8 <ble_ll_ctrl_rx_enc_rsp+0xa>

000217da <ble_ll_ctrl_enc_allowed_pdu_rx>:
{
   217da:	b508      	push	{r3, lr}
    llid = rxpdu->om_data[0] & BLE_LL_DATA_HDR_LLID_MASK;
   217dc:	6803      	ldr	r3, [r0, #0]
   217de:	7818      	ldrb	r0, [r3, #0]
   217e0:	f000 0003 	and.w	r0, r0, #3
    len = rxpdu->om_data[1];
   217e4:	7859      	ldrb	r1, [r3, #1]
    if (llid == BLE_LL_LLID_CTRL) {
   217e6:	2803      	cmp	r0, #3
   217e8:	d003      	beq.n	217f2 <ble_ll_ctrl_enc_allowed_pdu_rx+0x18>
        opcode = 0;
   217ea:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   217ec:	f7ff fc7e 	bl	210ec <ble_ll_ctrl_enc_allowed_pdu>
}
   217f0:	bd08      	pop	{r3, pc}
        opcode = rxpdu->om_data[2];
   217f2:	789a      	ldrb	r2, [r3, #2]
   217f4:	e7fa      	b.n	217ec <ble_ll_ctrl_enc_allowed_pdu_rx+0x12>

000217f6 <ble_ll_ctrl_enc_allowed_pdu_tx>:
{
   217f6:	b508      	push	{r3, lr}
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   217f8:	7ac3      	ldrb	r3, [r0, #11]
   217fa:	f003 0303 	and.w	r3, r3, #3
    len = ble_hdr->txinfo.pyld_len;
   217fe:	7a81      	ldrb	r1, [r0, #10]
    if (llid == BLE_LL_LLID_CTRL) {
   21800:	2b03      	cmp	r3, #3
   21802:	d004      	beq.n	2180e <ble_ll_ctrl_enc_allowed_pdu_tx+0x18>
        opcode = 0;
   21804:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   21806:	4618      	mov	r0, r3
   21808:	f7ff fc70 	bl	210ec <ble_ll_ctrl_enc_allowed_pdu>
}
   2180c:	bd08      	pop	{r3, pc}
        opcode = m->om_data[0];
   2180e:	f850 2c10 	ldr.w	r2, [r0, #-16]
   21812:	7812      	ldrb	r2, [r2, #0]
   21814:	e7f7      	b.n	21806 <ble_ll_ctrl_enc_allowed_pdu_tx+0x10>

00021816 <ble_ll_ctrl_is_start_enc_rsp>:
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   21816:	7ec3      	ldrb	r3, [r0, #27]
   21818:	f003 0303 	and.w	r3, r3, #3
    if (llid == BLE_LL_LLID_CTRL) {
   2181c:	2b03      	cmp	r3, #3
   2181e:	d001      	beq.n	21824 <ble_ll_ctrl_is_start_enc_rsp+0xe>
    is_start_enc_rsp = 0;
   21820:	2000      	movs	r0, #0
   21822:	4770      	bx	lr
        opcode = txpdu->om_data[0];
   21824:	6803      	ldr	r3, [r0, #0]
   21826:	781b      	ldrb	r3, [r3, #0]
        if (opcode == BLE_LL_CTRL_START_ENC_RSP) {
   21828:	2b06      	cmp	r3, #6
   2182a:	d001      	beq.n	21830 <ble_ll_ctrl_is_start_enc_rsp+0x1a>
    is_start_enc_rsp = 0;
   2182c:	2000      	movs	r0, #0
   2182e:	4770      	bx	lr
            is_start_enc_rsp = 1;
   21830:	2001      	movs	r0, #1
}
   21832:	4770      	bx	lr

00021834 <ble_ll_ctrl_start_enc_send>:
{
   21834:	b510      	push	{r4, lr}
   21836:	4604      	mov	r4, r0
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   21838:	2110      	movs	r1, #16
   2183a:	201b      	movs	r0, #27
   2183c:	f7e9 fa5b 	bl	acf6 <os_msys_get_pkthdr>
    if (om) {
   21840:	b1b0      	cbz	r0, 21870 <ble_ll_ctrl_start_enc_send+0x3c>
   21842:	4601      	mov	r1, r0
        om->om_data[0] = BLE_LL_CTRL_START_ENC_REQ;
   21844:	6803      	ldr	r3, [r0, #0]
   21846:	2205      	movs	r2, #5
   21848:	701a      	strb	r2, [r3, #0]
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, 1);
   2184a:	2301      	movs	r3, #1
   2184c:	2203      	movs	r2, #3
   2184e:	4620      	mov	r0, r4
   21850:	f7fe fc94 	bl	2017c <ble_ll_conn_enqueue_pkt>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   21854:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   21858:	2bff      	cmp	r3, #255	; 0xff
   2185a:	d001      	beq.n	21860 <ble_ll_ctrl_start_enc_send+0x2c>
        rc = 0;
   2185c:	2000      	movs	r0, #0
}
   2185e:	bd10      	pop	{r4, pc}
            connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_ENCRYPT;
   21860:	2302      	movs	r3, #2
   21862:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            ble_ll_ctrl_start_rsp_timer(connsm);
   21866:	4620      	mov	r0, r4
   21868:	f7ff fc90 	bl	2118c <ble_ll_ctrl_start_rsp_timer>
        rc = 0;
   2186c:	2000      	movs	r0, #0
   2186e:	e7f6      	b.n	2185e <ble_ll_ctrl_start_enc_send+0x2a>
        rc = -1;
   21870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21874:	e7f3      	b.n	2185e <ble_ll_ctrl_start_enc_send+0x2a>

00021876 <ble_ll_ctrl_conn_param_reply>:
{
   21876:	b508      	push	{r3, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   21878:	79c3      	ldrb	r3, [r0, #7]
   2187a:	2b02      	cmp	r3, #2
   2187c:	d004      	beq.n	21888 <ble_ll_ctrl_conn_param_reply+0x12>
        ble_ll_ctrl_conn_upd_make(connsm, rsp + 1, req);
   2187e:	3101      	adds	r1, #1
   21880:	f7ff fc98 	bl	211b4 <ble_ll_ctrl_conn_upd_make>
        rsp_opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
   21884:	2000      	movs	r0, #0
}
   21886:	bd08      	pop	{r3, pc}
        ble_ll_ctrl_conn_param_pdu_make(connsm, rsp + 1, req);
   21888:	3101      	adds	r1, #1
   2188a:	f7ff fd44 	bl	21316 <ble_ll_ctrl_conn_param_pdu_make>
        rsp_opcode = BLE_LL_CTRL_CONN_PARM_RSP;
   2188e:	2010      	movs	r0, #16
   21890:	e7f9      	b.n	21886 <ble_ll_ctrl_conn_param_reply+0x10>

00021892 <ble_ll_ctrl_conn_param_pdu_proc>:
{
   21892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21896:	4604      	mov	r4, r0
   21898:	460d      	mov	r5, r1
   2189a:	4617      	mov	r7, r2
   2189c:	461e      	mov	r6, r3
    req = &connsm->conn_cp;
   2189e:	f500 78c1 	add.w	r8, r0, #386	; 0x182
    req->interval_min = get_le16(dptr);
   218a2:	4608      	mov	r0, r1
   218a4:	f7fa f9c3 	bl	1bc2e <get_le16>
   218a8:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
    req->interval_max = get_le16(dptr + 2);
   218ac:	1ca8      	adds	r0, r5, #2
   218ae:	f7fa f9be 	bl	1bc2e <get_le16>
   218b2:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
    req->latency = get_le16(dptr + 4);
   218b6:	1d28      	adds	r0, r5, #4
   218b8:	f7fa f9b9 	bl	1bc2e <get_le16>
   218bc:	f8a4 0186 	strh.w	r0, [r4, #390]	; 0x186
    req->timeout = get_le16(dptr + 6);
   218c0:	1da8      	adds	r0, r5, #6
   218c2:	f7fa f9b4 	bl	1bc2e <get_le16>
   218c6:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
    req->pref_periodicity = dptr[8];
   218ca:	7a2b      	ldrb	r3, [r5, #8]
   218cc:	f884 318a 	strb.w	r3, [r4, #394]	; 0x18a
    req->ref_conn_event_cnt  = get_le16(dptr + 9);
   218d0:	f105 0009 	add.w	r0, r5, #9
   218d4:	f7fa f9ab 	bl	1bc2e <get_le16>
   218d8:	f8a4 018c 	strh.w	r0, [r4, #396]	; 0x18c
    req->offset0 = get_le16(dptr + 11);
   218dc:	f105 000b 	add.w	r0, r5, #11
   218e0:	f7fa f9a5 	bl	1bc2e <get_le16>
   218e4:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
    req->offset1 = get_le16(dptr + 13);
   218e8:	f105 000d 	add.w	r0, r5, #13
   218ec:	f7fa f99f 	bl	1bc2e <get_le16>
   218f0:	f8a4 0190 	strh.w	r0, [r4, #400]	; 0x190
    req->offset2 = get_le16(dptr + 15);
   218f4:	f105 000f 	add.w	r0, r5, #15
   218f8:	f7fa f999 	bl	1bc2e <get_le16>
   218fc:	f8a4 0192 	strh.w	r0, [r4, #402]	; 0x192
    req->offset3 = get_le16(dptr + 17);
   21900:	f105 0011 	add.w	r0, r5, #17
   21904:	f7fa f993 	bl	1bc2e <get_le16>
   21908:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
    req->offset4 = get_le16(dptr + 19);
   2190c:	f105 0013 	add.w	r0, r5, #19
   21910:	f7fa f98d 	bl	1bc2e <get_le16>
   21914:	f8a4 0196 	strh.w	r0, [r4, #406]	; 0x196
    req->offset5 = get_le16(dptr + 21);
   21918:	f105 0015 	add.w	r0, r5, #21
   2191c:	f7fa f987 	bl	1bc2e <get_le16>
   21920:	f8a4 0198 	strh.w	r0, [r4, #408]	; 0x198
    rc = ble_ll_conn_hci_chk_conn_params(req->interval_min,
   21924:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   21928:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   2192c:	f8b4 1184 	ldrh.w	r1, [r4, #388]	; 0x184
   21930:	f8b4 0182 	ldrh.w	r0, [r4, #386]	; 0x182
   21934:	f7fe fe4c 	bl	205d0 <ble_ll_conn_hci_chk_conn_params>
    if (rc) {
   21938:	2800      	cmp	r0, #0
   2193a:	d156      	bne.n	219ea <ble_ll_ctrl_conn_param_pdu_proc+0x158>
    if (opcode == BLE_LL_CTRL_CONN_PARM_REQ) {
   2193c:	2e0f      	cmp	r6, #15
   2193e:	d00b      	beq.n	21958 <ble_ll_ctrl_conn_param_pdu_proc+0xc6>
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) ||
   21940:	79e3      	ldrb	r3, [r4, #7]
   21942:	2b02      	cmp	r3, #2
   21944:	d024      	beq.n	21990 <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
   21946:	2e10      	cmp	r6, #16
   21948:	d022      	beq.n	21990 <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
        if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)){
   2194a:	2006      	movs	r0, #6
   2194c:	f001 f8c8 	bl	22ae0 <ble_ll_hci_is_le_event_enabled>
   21950:	2800      	cmp	r0, #0
   21952:	d13e      	bne.n	219d2 <ble_ll_ctrl_conn_param_pdu_proc+0x140>
            ble_err = BLE_ERR_UNSUPP_REM_FEATURE;
   21954:	231a      	movs	r3, #26
   21956:	e049      	b.n	219ec <ble_ll_ctrl_conn_param_pdu_proc+0x15a>
        if ((connsm->conn_itvl >= req->interval_min) &&
   21958:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   2195c:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
   21960:	4293      	cmp	r3, r2
   21962:	d3ed      	bcc.n	21940 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->conn_itvl <= req->interval_max) &&
   21964:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
        if ((connsm->conn_itvl >= req->interval_min) &&
   21968:	4293      	cmp	r3, r2
   2196a:	d8e9      	bhi.n	21940 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->supervision_tmo == req->timeout) &&
   2196c:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   21970:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
            (connsm->conn_itvl <= req->interval_max) &&
   21974:	429a      	cmp	r2, r3
   21976:	d1e3      	bne.n	21940 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->slave_latency == req->latency)) {
   21978:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   2197c:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
            (connsm->supervision_tmo == req->timeout) &&
   21980:	429a      	cmp	r2, r3
   21982:	d1dd      	bne.n	21940 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
        rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, rspbuf, req);
   21984:	4642      	mov	r2, r8
   21986:	4639      	mov	r1, r7
   21988:	4620      	mov	r0, r4
   2198a:	f7ff ff74 	bl	21876 <ble_ll_ctrl_conn_param_reply>
   2198e:	e030      	b.n	219f2 <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        if (hcu->handle != 0) {
   21990:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
   21994:	2b00      	cmp	r3, #0
   21996:	d0d8      	beq.n	2194a <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   21998:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   2199c:	f8b4 216a 	ldrh.w	r2, [r4, #362]	; 0x16a
   219a0:	4293      	cmp	r3, r2
   219a2:	d3d2      	bcc.n	2194a <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_min > hcu->conn_itvl_max) ||
   219a4:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   219a8:	428b      	cmp	r3, r1
   219aa:	d8ce      	bhi.n	2194a <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   219ac:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
                  (req->interval_min > hcu->conn_itvl_max) ||
   219b0:	429a      	cmp	r2, r3
   219b2:	d8ca      	bhi.n	2194a <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   219b4:	4299      	cmp	r1, r3
   219b6:	d3c8      	bcc.n	2194a <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->latency != hcu->conn_latency) ||
   219b8:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   219bc:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
                  (req->interval_max > hcu->conn_itvl_max) ||
   219c0:	429a      	cmp	r2, r3
   219c2:	d1c2      	bne.n	2194a <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->timeout != hcu->supervision_timeout))) {
   219c4:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   219c8:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   219cc:	429a      	cmp	r2, r3
   219ce:	d1bc      	bne.n	2194a <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
   219d0:	e7d8      	b.n	21984 <ble_ll_ctrl_conn_param_pdu_proc+0xf2>
        ble_ll_hci_ev_rem_conn_parm_req(connsm, req);
   219d2:	4641      	mov	r1, r8
   219d4:	4620      	mov	r0, r4
   219d6:	f001 f961 	bl	22c9c <ble_ll_hci_ev_rem_conn_parm_req>
        connsm->host_reply_opcode = opcode;
   219da:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
        connsm->csmflags.cfbit.awaiting_host_reply = 1;
   219de:	7823      	ldrb	r3, [r4, #0]
   219e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   219e4:	7023      	strb	r3, [r4, #0]
        rsp_opcode = 255;
   219e6:	20ff      	movs	r0, #255	; 0xff
   219e8:	e003      	b.n	219f2 <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        ble_err = BLE_ERR_INV_LMP_LL_PARM;
   219ea:	231e      	movs	r3, #30
        rspbuf[1] = opcode;
   219ec:	707e      	strb	r6, [r7, #1]
        rspbuf[2] = ble_err;
   219ee:	70bb      	strb	r3, [r7, #2]
        rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   219f0:	2011      	movs	r0, #17
}
   219f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000219f6 <ble_ll_ctrl_rx_conn_param_rsp>:
{
   219f6:	b508      	push	{r3, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   219f8:	79c3      	ldrb	r3, [r0, #7]
   219fa:	2b02      	cmp	r3, #2
   219fc:	d011      	beq.n	21a22 <ble_ll_ctrl_rx_conn_param_rsp+0x2c>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   219fe:	7803      	ldrb	r3, [r0, #0]
   21a00:	f013 0f40 	tst.w	r3, #64	; 0x40
   21a04:	d003      	beq.n	21a0e <ble_ll_ctrl_rx_conn_param_rsp+0x18>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   21a06:	7803      	ldrb	r3, [r0, #0]
   21a08:	f36f 1386 	bfc	r3, #6, #1
   21a0c:	7003      	strb	r3, [r0, #0]
    if (!IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   21a0e:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   21a12:	f013 0f40 	tst.w	r3, #64	; 0x40
   21a16:	d006      	beq.n	21a26 <ble_ll_ctrl_rx_conn_param_rsp+0x30>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   21a18:	2310      	movs	r3, #16
   21a1a:	f7ff ff3a 	bl	21892 <ble_ll_ctrl_conn_param_pdu_proc>
   21a1e:	b2c0      	uxtb	r0, r0
}
   21a20:	bd08      	pop	{r3, pc}
        return BLE_LL_CTRL_UNKNOWN_RSP;
   21a22:	2007      	movs	r0, #7
   21a24:	e7fc      	b.n	21a20 <ble_ll_ctrl_rx_conn_param_rsp+0x2a>
        return BLE_ERR_MAX;
   21a26:	20ff      	movs	r0, #255	; 0xff
   21a28:	e7fa      	b.n	21a20 <ble_ll_ctrl_rx_conn_param_rsp+0x2a>

00021a2a <ble_ll_ctrl_is_terminate_ind>:
ble_ll_ctrl_is_terminate_ind(uint8_t hdr, uint8_t opcode)
{
    int rc;

    rc = 0;
    if ((hdr & BLE_LL_DATA_HDR_LLID_MASK) == BLE_LL_LLID_CTRL) {
   21a2a:	f000 0003 	and.w	r0, r0, #3
   21a2e:	2803      	cmp	r0, #3
   21a30:	d001      	beq.n	21a36 <ble_ll_ctrl_is_terminate_ind+0xc>
    rc = 0;
   21a32:	2000      	movs	r0, #0
   21a34:	4770      	bx	lr
        if (opcode == BLE_LL_CTRL_TERMINATE_IND) {
   21a36:	2902      	cmp	r1, #2
   21a38:	d001      	beq.n	21a3e <ble_ll_ctrl_is_terminate_ind+0x14>
    rc = 0;
   21a3a:	2000      	movs	r0, #0
   21a3c:	4770      	bx	lr
            rc = 1;
   21a3e:	2001      	movs	r0, #1
        }
    }
    return rc;
}
   21a40:	4770      	bx	lr

00021a42 <ble_ll_ctrl_terminate_start>:
 *
 * @param connsm
 */
void
ble_ll_ctrl_terminate_start(struct ble_ll_conn_sm *connsm)
{
   21a42:	b570      	push	{r4, r5, r6, lr}
    int ctrl_proc;
    uint32_t usecs;
    struct os_mbuf *om;

    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   21a44:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   21a48:	b1bb      	cbz	r3, 21a7a <ble_ll_ctrl_terminate_start+0x38>
   21a4a:	4604      	mov	r4, r0

    ctrl_proc = BLE_LL_CTRL_PROC_TERMINATE;
    om = ble_ll_ctrl_proc_init(connsm, ctrl_proc);
   21a4c:	2105      	movs	r1, #5
   21a4e:	f7ff fd51 	bl	214f4 <ble_ll_ctrl_proc_init>
    if (om) {
   21a52:	b188      	cbz	r0, 21a78 <ble_ll_ctrl_terminate_start+0x36>
        CONN_F_TERMINATE_STARTED(connsm) = 1;
   21a54:	7823      	ldrb	r3, [r4, #0]
   21a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21a5a:	7023      	strb	r3, [r4, #0]

        /* Set terminate "timeout" */
        usecs = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000;
   21a5c:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   21a60:	f242 7610 	movw	r6, #10000	; 0x2710
   21a64:	fb06 f603 	mul.w	r6, r6, r3
        connsm->terminate_timeout = os_cputime_get32() +
   21a68:	f7fa f977 	bl	1bd5a <os_cputime_get32>
   21a6c:	4605      	mov	r5, r0
            os_cputime_usecs_to_ticks(usecs);
   21a6e:	4630      	mov	r0, r6
   21a70:	f7fa f98a 	bl	1bd88 <os_cputime_usecs_to_ticks>
        connsm->terminate_timeout = os_cputime_get32() +
   21a74:	4428      	add	r0, r5
   21a76:	6620      	str	r0, [r4, #96]	; 0x60
    }
}
   21a78:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   21a7a:	f7e6 fba1 	bl	81c0 <hal_debugger_connected>
   21a7e:	b100      	cbz	r0, 21a82 <ble_ll_ctrl_terminate_start+0x40>
   21a80:	be01      	bkpt	0x0001
   21a82:	2300      	movs	r3, #0
   21a84:	461a      	mov	r2, r3
   21a86:	4619      	mov	r1, r3
   21a88:	4618      	mov	r0, r3
   21a8a:	f7e7 ffa1 	bl	99d0 <__assert_func>

00021a8e <ble_ll_ctrl_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_proc_start(struct ble_ll_conn_sm *connsm, int ctrl_proc)
{
   21a8e:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   21a90:	2905      	cmp	r1, #5
   21a92:	d00d      	beq.n	21ab0 <ble_ll_ctrl_proc_start+0x22>
   21a94:	4604      	mov	r4, r0
   21a96:	460d      	mov	r5, r1

    om = NULL;
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   21a98:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   21a9c:	2bff      	cmp	r3, #255	; 0xff
   21a9e:	d011      	beq.n	21ac4 <ble_ll_ctrl_proc_start+0x36>
            }
        }
    }

    /* Set bitmask denoting control procedure is pending */
    connsm->pending_ctrl_procs |= (1 << ctrl_proc);
   21aa0:	2101      	movs	r1, #1
   21aa2:	40a9      	lsls	r1, r5
   21aa4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   21aa8:	4319      	orrs	r1, r3
   21aaa:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
}
   21aae:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   21ab0:	f7e6 fb86 	bl	81c0 <hal_debugger_connected>
   21ab4:	b100      	cbz	r0, 21ab8 <ble_ll_ctrl_proc_start+0x2a>
   21ab6:	be01      	bkpt	0x0001
   21ab8:	2300      	movs	r3, #0
   21aba:	461a      	mov	r2, r3
   21abc:	4619      	mov	r1, r3
   21abe:	4618      	mov	r0, r3
   21ac0:	f7e7 ff86 	bl	99d0 <__assert_func>
        om = ble_ll_ctrl_proc_init(connsm, ctrl_proc);
   21ac4:	f7ff fd16 	bl	214f4 <ble_ll_ctrl_proc_init>
        if (om) {
   21ac8:	2800      	cmp	r0, #0
   21aca:	d0e9      	beq.n	21aa0 <ble_ll_ctrl_proc_start+0x12>
            connsm->cur_ctrl_proc = ctrl_proc;
   21acc:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
            if (ctrl_proc != BLE_LL_CTRL_PROC_CHAN_MAP_UPD) {
   21ad0:	2d01      	cmp	r5, #1
   21ad2:	d0e5      	beq.n	21aa0 <ble_ll_ctrl_proc_start+0x12>
                ble_ll_ctrl_start_rsp_timer(connsm);
   21ad4:	4620      	mov	r0, r4
   21ad6:	f7ff fb59 	bl	2118c <ble_ll_ctrl_start_rsp_timer>
   21ada:	e7e1      	b.n	21aa0 <ble_ll_ctrl_proc_start+0x12>

00021adc <ble_ll_ctrl_initiate_dle>:
{
   21adc:	b508      	push	{r3, lr}
    if (!(connsm->conn_features & BLE_LL_FEAT_DATA_LEN_EXT)) {
   21ade:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   21ae2:	f013 0f20 	tst.w	r3, #32
   21ae6:	d010      	beq.n	21b0a <ble_ll_ctrl_initiate_dle+0x2e>
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   21ae8:	7a83      	ldrb	r3, [r0, #10]
   21aea:	2b1b      	cmp	r3, #27
   21aec:	d80a      	bhi.n	21b04 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   21aee:	7ac3      	ldrb	r3, [r0, #11]
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   21af0:	2b1b      	cmp	r3, #27
   21af2:	d807      	bhi.n	21b04 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   21af4:	8a03      	ldrh	r3, [r0, #16]
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   21af6:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   21afa:	d803      	bhi.n	21b04 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_time <= BLE_LL_CONN_SUPP_TIME_MIN)) {
   21afc:	8a43      	ldrh	r3, [r0, #18]
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   21afe:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   21b02:	d902      	bls.n	21b0a <ble_ll_ctrl_initiate_dle+0x2e>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   21b04:	2108      	movs	r1, #8
   21b06:	f7ff ffc2 	bl	21a8e <ble_ll_ctrl_proc_start>
}
   21b0a:	bd08      	pop	{r3, pc}

00021b0c <ble_ll_ctrl_chk_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_chk_proc_start(struct ble_ll_conn_sm *connsm)
{
   21b0c:	b538      	push	{r3, r4, r5, lr}
   21b0e:	4604      	mov	r4, r0

    /*
     * If we are terminating, dont start any new procedures but start
     * terminate if needed
     */
    if (connsm->disconnect_reason) {
   21b10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   21b14:	b133      	cbz	r3, 21b24 <ble_ll_ctrl_chk_proc_start+0x18>
        if (!CONN_F_TERMINATE_STARTED(connsm)) {
   21b16:	f990 3000 	ldrsb.w	r3, [r0]
   21b1a:	2b00      	cmp	r3, #0
   21b1c:	db06      	blt.n	21b2c <ble_ll_ctrl_chk_proc_start+0x20>
            /*
             * If the terminate procedure has not started it means we were not
             * able to start it right away (no control pdu was available).
             * Start it now. No need to start any other procedures.
             */
            ble_ll_ctrl_terminate_start(connsm);
   21b1e:	f7ff ff90 	bl	21a42 <ble_ll_ctrl_terminate_start>
   21b22:	e003      	b.n	21b2c <ble_ll_ctrl_chk_proc_start+0x20>
        }
        return;
    }

    /* If there is a running procedure or no pending, do nothing */
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   21b24:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   21b28:	2bff      	cmp	r3, #255	; 0xff
   21b2a:	d000      	beq.n	21b2e <ble_ll_ctrl_chk_proc_start+0x22>
                    break;
                }
            }
        }
    }
}
   21b2c:	bd38      	pop	{r3, r4, r5, pc}
        (connsm->pending_ctrl_procs != 0)) {
   21b2e:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   21b32:	2b00      	cmp	r3, #0
   21b34:	d0fa      	beq.n	21b2c <ble_ll_ctrl_chk_proc_start+0x20>
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   21b36:	2500      	movs	r5, #0
   21b38:	2d0b      	cmp	r5, #11
   21b3a:	dcf7      	bgt.n	21b2c <ble_ll_ctrl_chk_proc_start+0x20>
            if (IS_PENDING_CTRL_PROC(connsm, i)) {
   21b3c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   21b40:	412b      	asrs	r3, r5
   21b42:	f013 0f01 	tst.w	r3, #1
   21b46:	d017      	beq.n	21b78 <ble_ll_ctrl_chk_proc_start+0x6c>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   21b48:	2d04      	cmp	r5, #4
   21b4a:	d004      	beq.n	21b56 <ble_ll_ctrl_chk_proc_start+0x4a>
                    ble_ll_ctrl_proc_start(connsm, i);
   21b4c:	4629      	mov	r1, r5
   21b4e:	4620      	mov	r0, r4
   21b50:	f7ff ff9d 	bl	21a8e <ble_ll_ctrl_proc_start>
                    break;
   21b54:	e7ea      	b.n	21b2c <ble_ll_ctrl_chk_proc_start+0x20>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   21b56:	7863      	ldrb	r3, [r4, #1]
   21b58:	f013 0f08 	tst.w	r3, #8
   21b5c:	d0f6      	beq.n	21b4c <ble_ll_ctrl_chk_proc_start+0x40>
                    ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   21b5e:	2100      	movs	r1, #0
   21b60:	4620      	mov	r0, r4
   21b62:	f001 f96a 	bl	22e3a <ble_ll_hci_ev_rd_rem_ver>
                    CLR_PENDING_CTRL_PROC(connsm, i);
   21b66:	2301      	movs	r3, #1
   21b68:	fa03 f205 	lsl.w	r2, r3, r5
   21b6c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   21b70:	ea23 0302 	bic.w	r3, r3, r2
   21b74:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   21b78:	3501      	adds	r5, #1
   21b7a:	e7dd      	b.n	21b38 <ble_ll_ctrl_chk_proc_start+0x2c>

00021b7c <ble_ll_ctrl_proc_stop>:
{
   21b7c:	b538      	push	{r3, r4, r5, lr}
   21b7e:	4604      	mov	r4, r0
   21b80:	460d      	mov	r5, r1
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   21b82:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   21b86:	428b      	cmp	r3, r1
   21b88:	d00c      	beq.n	21ba4 <ble_ll_ctrl_proc_stop+0x28>
    CLR_PENDING_CTRL_PROC(connsm, ctrl_proc);
   21b8a:	2101      	movs	r1, #1
   21b8c:	fa01 f305 	lsl.w	r3, r1, r5
   21b90:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
   21b94:	ea21 0103 	bic.w	r1, r1, r3
   21b98:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
    ble_ll_ctrl_chk_proc_start(connsm);
   21b9c:	4620      	mov	r0, r4
   21b9e:	f7ff ffb5 	bl	21b0c <ble_ll_ctrl_chk_proc_start>
}
   21ba2:	bd38      	pop	{r3, r4, r5, pc}
    os_callout_stop(&co->co);
   21ba4:	30bc      	adds	r0, #188	; 0xbc
   21ba6:	f7e8 f8c9 	bl	9d3c <os_callout_stop>
        connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   21baa:	23ff      	movs	r3, #255	; 0xff
   21bac:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   21bb0:	e7eb      	b.n	21b8a <ble_ll_ctrl_proc_stop+0xe>

00021bb2 <ble_ll_ctrl_proc_unk_rsp>:
{
   21bb2:	b538      	push	{r3, r4, r5, lr}
   21bb4:	4605      	mov	r5, r0
   21bb6:	4613      	mov	r3, r2
    opcode = dptr[0];
   21bb8:	780c      	ldrb	r4, [r1, #0]
    switch (opcode) {
   21bba:	2c14      	cmp	r4, #20
   21bbc:	d837      	bhi.n	21c2e <ble_ll_ctrl_proc_unk_rsp+0x7c>
   21bbe:	e8df f004 	tbb	[pc, r4]
   21bc2:	3639      	.short	0x3639
   21bc4:	36363636 	.word	0x36363636
   21bc8:	36363636 	.word	0x36363636
   21bcc:	36363636 	.word	0x36363636
   21bd0:	36381b13 	.word	0x36381b13
   21bd4:	362e      	.short	0x362e
   21bd6:	0b          	.byte	0x0b
   21bd7:	00          	.byte	0x00
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_DATA_LEN_EXT);
   21bd8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   21bdc:	f023 0320 	bic.w	r3, r3, #32
   21be0:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_DATA_LEN_UPD;
   21be4:	2408      	movs	r4, #8
        break;
   21be6:	e025      	b.n	21c34 <ble_ll_ctrl_proc_unk_rsp+0x82>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_SLAVE_INIT);
   21be8:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   21bec:	f023 0308 	bic.w	r3, r3, #8
   21bf0:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_FEATURE_XCHG;
   21bf4:	2403      	movs	r4, #3
        break;
   21bf6:	e01d      	b.n	21c34 <ble_ll_ctrl_proc_unk_rsp+0x82>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_CONN_PARM_REQ);
   21bf8:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   21bfc:	f022 0202 	bic.w	r2, r2, #2
   21c00:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   21c04:	79c2      	ldrb	r2, [r0, #7]
   21c06:	2a01      	cmp	r2, #1
   21c08:	d001      	beq.n	21c0e <ble_ll_ctrl_proc_unk_rsp+0x5c>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   21c0a:	2406      	movs	r4, #6
   21c0c:	e012      	b.n	21c34 <ble_ll_ctrl_proc_unk_rsp+0x82>
            ble_ll_ctrl_conn_upd_make(connsm, rspdata, NULL);
   21c0e:	2200      	movs	r2, #0
   21c10:	4619      	mov	r1, r3
   21c12:	f7ff facf 	bl	211b4 <ble_ll_ctrl_conn_upd_make>
            connsm->reject_reason = BLE_ERR_SUCCESS;
   21c16:	2000      	movs	r0, #0
   21c18:	f885 0037 	strb.w	r0, [r5, #55]	; 0x37
            return BLE_LL_CTRL_CONN_UPDATE_IND;
   21c1c:	e00f      	b.n	21c3e <ble_ll_ctrl_proc_unk_rsp+0x8c>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_LE_PING);
   21c1e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   21c22:	f023 0310 	bic.w	r3, r3, #16
   21c26:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_LE_PING;
   21c2a:	2407      	movs	r4, #7
        break;
   21c2c:	e002      	b.n	21c34 <ble_ll_ctrl_proc_unk_rsp+0x82>
        ctrl_proc = BLE_LL_CTRL_PROC_NUM;
   21c2e:	240c      	movs	r4, #12
        break;
   21c30:	e000      	b.n	21c34 <ble_ll_ctrl_proc_unk_rsp+0x82>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   21c32:	2406      	movs	r4, #6
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   21c34:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   21c38:	42a3      	cmp	r3, r4
   21c3a:	d001      	beq.n	21c40 <ble_ll_ctrl_proc_unk_rsp+0x8e>
    return BLE_ERR_MAX;
   21c3c:	20ff      	movs	r0, #255	; 0xff
}
   21c3e:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, ctrl_proc);
   21c40:	4621      	mov	r1, r4
   21c42:	4628      	mov	r0, r5
   21c44:	f7ff ff9a 	bl	21b7c <ble_ll_ctrl_proc_stop>
        if (ctrl_proc == BLE_LL_CTRL_PROC_CONN_PARAM_REQ) {
   21c48:	2c06      	cmp	r4, #6
   21c4a:	d003      	beq.n	21c54 <ble_ll_ctrl_proc_unk_rsp+0xa2>
        } else if (ctrl_proc == BLE_LL_CTRL_PROC_FEATURE_XCHG) {
   21c4c:	2c03      	cmp	r4, #3
   21c4e:	d007      	beq.n	21c60 <ble_ll_ctrl_proc_unk_rsp+0xae>
    return BLE_ERR_MAX;
   21c50:	20ff      	movs	r0, #255	; 0xff
   21c52:	e7f4      	b.n	21c3e <ble_ll_ctrl_proc_unk_rsp+0x8c>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_UNSUPP_REM_FEATURE);
   21c54:	211a      	movs	r1, #26
   21c56:	4628      	mov	r0, r5
   21c58:	f001 f845 	bl	22ce6 <ble_ll_hci_ev_conn_update>
    return BLE_ERR_MAX;
   21c5c:	20ff      	movs	r0, #255	; 0xff
   21c5e:	e7ee      	b.n	21c3e <ble_ll_ctrl_proc_unk_rsp+0x8c>
            if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   21c60:	78eb      	ldrb	r3, [r5, #3]
   21c62:	f013 0f10 	tst.w	r3, #16
   21c66:	d105      	bne.n	21c74 <ble_ll_ctrl_proc_unk_rsp+0xc2>
            connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   21c68:	78eb      	ldrb	r3, [r5, #3]
   21c6a:	f36f 1304 	bfc	r3, #4, #1
   21c6e:	70eb      	strb	r3, [r5, #3]
    return BLE_ERR_MAX;
   21c70:	20ff      	movs	r0, #255	; 0xff
   21c72:	e7e4      	b.n	21c3e <ble_ll_ctrl_proc_unk_rsp+0x8c>
                ble_ll_hci_ev_rd_rem_used_feat(connsm,
   21c74:	211a      	movs	r1, #26
   21c76:	4628      	mov	r0, r5
   21c78:	f001 f8b8 	bl	22dec <ble_ll_hci_ev_rd_rem_used_feat>
   21c7c:	e7f4      	b.n	21c68 <ble_ll_ctrl_proc_unk_rsp+0xb6>

00021c7e <ble_ll_ctrl_rx_feature_rsp>:
{
   21c7e:	b510      	push	{r4, lr}
   21c80:	4604      	mov	r4, r0
    ble_ll_ctrl_update_features(connsm, dptr);
   21c82:	f7ff fbd1 	bl	21428 <ble_ll_ctrl_update_features>
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   21c86:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   21c8a:	f013 0f08 	tst.w	r3, #8
   21c8e:	d104      	bne.n	21c9a <ble_ll_ctrl_rx_feature_rsp+0x1c>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   21c90:	78e3      	ldrb	r3, [r4, #3]
   21c92:	f013 0f10 	tst.w	r3, #16
   21c96:	d105      	bne.n	21ca4 <ble_ll_ctrl_rx_feature_rsp+0x26>
}
   21c98:	bd10      	pop	{r4, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   21c9a:	2103      	movs	r1, #3
   21c9c:	4620      	mov	r0, r4
   21c9e:	f7ff ff6d 	bl	21b7c <ble_ll_ctrl_proc_stop>
   21ca2:	e7f5      	b.n	21c90 <ble_ll_ctrl_rx_feature_rsp+0x12>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   21ca4:	2100      	movs	r1, #0
   21ca6:	4620      	mov	r0, r4
   21ca8:	f001 f8a0 	bl	22dec <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   21cac:	78e3      	ldrb	r3, [r4, #3]
   21cae:	f36f 1304 	bfc	r3, #4, #1
   21cb2:	70e3      	strb	r3, [r4, #3]
}
   21cb4:	e7f0      	b.n	21c98 <ble_ll_ctrl_rx_feature_rsp+0x1a>

00021cb6 <ble_ll_ctrl_rx_version_ind>:
{
   21cb6:	b570      	push	{r4, r5, r6, lr}
   21cb8:	4604      	mov	r4, r0
   21cba:	460d      	mov	r5, r1
   21cbc:	4616      	mov	r6, r2
    connsm->vers_nr = dptr[0];
   21cbe:	4608      	mov	r0, r1
   21cc0:	f810 3b01 	ldrb.w	r3, [r0], #1
   21cc4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    connsm->comp_id = get_le16(dptr + 1);
   21cc8:	f7f9 ffb1 	bl	1bc2e <get_le16>
   21ccc:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
    connsm->sub_vers_nr = get_le16(dptr + 3);
   21cd0:	1ce8      	adds	r0, r5, #3
   21cd2:	f7f9 ffac 	bl	1bc2e <get_le16>
   21cd6:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
    connsm->csmflags.cfbit.rxd_version_ind = 1;
   21cda:	7863      	ldrb	r3, [r4, #1]
   21cdc:	f043 0308 	orr.w	r3, r3, #8
   21ce0:	7063      	strb	r3, [r4, #1]
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   21ce2:	f013 0f04 	tst.w	r3, #4
   21ce6:	d007      	beq.n	21cf8 <ble_ll_ctrl_rx_version_ind+0x42>
    rsp_opcode = BLE_ERR_MAX;
   21ce8:	25ff      	movs	r5, #255	; 0xff
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   21cea:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   21cee:	f013 0f10 	tst.w	r3, #16
   21cf2:	d107      	bne.n	21d04 <ble_ll_ctrl_rx_version_ind+0x4e>
}
   21cf4:	4628      	mov	r0, r5
   21cf6:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_ctrl_version_ind_make(connsm, rspbuf);
   21cf8:	4631      	mov	r1, r6
   21cfa:	4620      	mov	r0, r4
   21cfc:	f7ff fae4 	bl	212c8 <ble_ll_ctrl_version_ind_make>
        rsp_opcode = BLE_LL_CTRL_VERSION_IND;
   21d00:	250c      	movs	r5, #12
   21d02:	e7f2      	b.n	21cea <ble_ll_ctrl_rx_version_ind+0x34>
        ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   21d04:	2100      	movs	r1, #0
   21d06:	4620      	mov	r0, r4
   21d08:	f001 f897 	bl	22e3a <ble_ll_hci_ev_rd_rem_ver>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   21d0c:	2104      	movs	r1, #4
   21d0e:	4620      	mov	r0, r4
   21d10:	f7ff ff34 	bl	21b7c <ble_ll_ctrl_proc_stop>
   21d14:	e7ee      	b.n	21cf4 <ble_ll_ctrl_rx_version_ind+0x3e>

00021d16 <ble_ll_ctrl_rx_start_enc_rsp>:
{
   21d16:	b538      	push	{r3, r4, r5, lr}
    if (connsm->enc_data.enc_state != CONN_ENC_S_START_ENC_RSP_WAIT) {
   21d18:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   21d1c:	2b07      	cmp	r3, #7
   21d1e:	d11e      	bne.n	21d5e <ble_ll_ctrl_rx_start_enc_rsp+0x48>
   21d20:	4604      	mov	r4, r0
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   21d22:	79c3      	ldrb	r3, [r0, #7]
   21d24:	2b01      	cmp	r3, #1
   21d26:	d00a      	beq.n	21d3e <ble_ll_ctrl_rx_start_enc_rsp+0x28>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   21d28:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   21d2c:	2b02      	cmp	r3, #2
   21d2e:	d011      	beq.n	21d54 <ble_ll_ctrl_rx_start_enc_rsp+0x3e>
        rc = BLE_LL_CTRL_START_ENC_RSP;
   21d30:	2506      	movs	r5, #6
    ble_ll_hci_ev_encrypt_chg(connsm, BLE_ERR_SUCCESS);
   21d32:	2100      	movs	r1, #0
   21d34:	4620      	mov	r0, r4
   21d36:	f000 fff8 	bl	22d2a <ble_ll_hci_ev_encrypt_chg>
    return rc;
   21d3a:	b2e8      	uxtb	r0, r5
}
   21d3c:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   21d3e:	2102      	movs	r1, #2
   21d40:	f7ff ff1c 	bl	21b7c <ble_ll_ctrl_proc_stop>
        connsm->enc_data.enc_state = CONN_ENC_S_ENCRYPTED;
   21d44:	2302      	movs	r3, #2
   21d46:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        ble_ll_conn_auth_pyld_timer_start(connsm);
   21d4a:	4620      	mov	r0, r4
   21d4c:	f7fd fb94 	bl	1f478 <ble_ll_conn_auth_pyld_timer_start>
        rc = BLE_ERR_MAX;
   21d50:	25ff      	movs	r5, #255	; 0xff
   21d52:	e7ee      	b.n	21d32 <ble_ll_ctrl_rx_start_enc_rsp+0x1c>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   21d54:	2102      	movs	r1, #2
   21d56:	f7ff ff11 	bl	21b7c <ble_ll_ctrl_proc_stop>
        rc = BLE_LL_CTRL_START_ENC_RSP;
   21d5a:	2506      	movs	r5, #6
   21d5c:	e7e9      	b.n	21d32 <ble_ll_ctrl_rx_start_enc_rsp+0x1c>
        return BLE_ERR_MAX;
   21d5e:	20ff      	movs	r0, #255	; 0xff
   21d60:	e7ec      	b.n	21d3c <ble_ll_ctrl_rx_start_enc_rsp+0x26>

00021d62 <ble_ll_ctrl_rx_ping_rsp>:
{
   21d62:	b508      	push	{r3, lr}
    ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_LE_PING);
   21d64:	2107      	movs	r1, #7
   21d66:	f7ff ff09 	bl	21b7c <ble_ll_ctrl_proc_stop>
}
   21d6a:	bd08      	pop	{r3, pc}

00021d6c <ble_ll_ctrl_rx_conn_param_req>:
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   21d6c:	7803      	ldrb	r3, [r0, #0]
   21d6e:	f013 0f40 	tst.w	r3, #64	; 0x40
   21d72:	d12d      	bne.n	21dd0 <ble_ll_ctrl_rx_conn_param_req+0x64>
{
   21d74:	b570      	push	{r4, r5, r6, lr}
   21d76:	4616      	mov	r6, r2
   21d78:	460d      	mov	r5, r1
   21d7a:	4604      	mov	r4, r0
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   21d7c:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   21d80:	f013 0f40 	tst.w	r3, #64	; 0x40
   21d84:	d00f      	beq.n	21da6 <ble_ll_ctrl_rx_conn_param_req+0x3a>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   21d86:	79c3      	ldrb	r3, [r0, #7]
   21d88:	2b02      	cmp	r3, #2
   21d8a:	d005      	beq.n	21d98 <ble_ll_ctrl_rx_conn_param_req+0x2c>
            rspbuf[1] = BLE_LL_CTRL_CONN_PARM_REQ;
   21d8c:	230f      	movs	r3, #15
   21d8e:	7053      	strb	r3, [r2, #1]
            rspbuf[2] = BLE_ERR_LMP_COLLISION;
   21d90:	2323      	movs	r3, #35	; 0x23
   21d92:	7093      	strb	r3, [r2, #2]
            return rsp_opcode;
   21d94:	2011      	movs	r0, #17
   21d96:	e014      	b.n	21dc2 <ble_ll_ctrl_rx_conn_param_req+0x56>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   21d98:	2106      	movs	r1, #6
   21d9a:	f7ff feef 	bl	21b7c <ble_ll_ctrl_proc_stop>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_LMP_COLLISION);
   21d9e:	2123      	movs	r1, #35	; 0x23
   21da0:	4620      	mov	r0, r4
   21da2:	f000 ffa0 	bl	22ce6 <ble_ll_hci_ev_conn_update>
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) &&
   21da6:	79e3      	ldrb	r3, [r4, #7]
   21da8:	2b01      	cmp	r3, #1
   21daa:	d103      	bne.n	21db4 <ble_ll_ctrl_rx_conn_param_req+0x48>
   21dac:	7863      	ldrb	r3, [r4, #1]
   21dae:	f013 0f10 	tst.w	r3, #16
   21db2:	d107      	bne.n	21dc4 <ble_ll_ctrl_rx_conn_param_req+0x58>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   21db4:	230f      	movs	r3, #15
   21db6:	4632      	mov	r2, r6
   21db8:	4629      	mov	r1, r5
   21dba:	4620      	mov	r0, r4
   21dbc:	f7ff fd69 	bl	21892 <ble_ll_ctrl_conn_param_pdu_proc>
   21dc0:	b2c0      	uxtb	r0, r0
}
   21dc2:	bd70      	pop	{r4, r5, r6, pc}
        rspbuf[1] = BLE_LL_CTRL_CONN_PARM_REQ;
   21dc4:	230f      	movs	r3, #15
   21dc6:	7073      	strb	r3, [r6, #1]
        rspbuf[2] = BLE_ERR_DIFF_TRANS_COLL;
   21dc8:	232a      	movs	r3, #42	; 0x2a
   21dca:	70b3      	strb	r3, [r6, #2]
        return rsp_opcode;
   21dcc:	2011      	movs	r0, #17
   21dce:	e7f8      	b.n	21dc2 <ble_ll_ctrl_rx_conn_param_req+0x56>
        return BLE_ERR_MAX;
   21dd0:	20ff      	movs	r0, #255	; 0xff
}
   21dd2:	4770      	bx	lr

00021dd4 <ble_ll_ctrl_rx_reject_ind>:
{
   21dd4:	b538      	push	{r3, r4, r5, lr}
   21dd6:	4604      	mov	r4, r0
    if (opcode == BLE_LL_CTRL_REJECT_IND) {
   21dd8:	2a0d      	cmp	r2, #13
   21dda:	d00a      	beq.n	21df2 <ble_ll_ctrl_rx_reject_ind+0x1e>
        ble_error = dptr[1];
   21ddc:	784d      	ldrb	r5, [r1, #1]
    switch (connsm->cur_ctrl_proc) {
   21dde:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
   21de2:	2806      	cmp	r0, #6
   21de4:	d007      	beq.n	21df6 <ble_ll_ctrl_rx_reject_ind+0x22>
   21de6:	2808      	cmp	r0, #8
   21de8:	d02c      	beq.n	21e44 <ble_ll_ctrl_rx_reject_ind+0x70>
   21dea:	2802      	cmp	r0, #2
   21dec:	d01d      	beq.n	21e2a <ble_ll_ctrl_rx_reject_ind+0x56>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   21dee:	20ff      	movs	r0, #255	; 0xff
   21df0:	e027      	b.n	21e42 <ble_ll_ctrl_rx_reject_ind+0x6e>
        ble_error = dptr[0];
   21df2:	780d      	ldrb	r5, [r1, #0]
   21df4:	e7f3      	b.n	21dde <ble_ll_ctrl_rx_reject_ind+0xa>
        if (opcode == BLE_LL_CTRL_REJECT_IND_EXT) {
   21df6:	2a11      	cmp	r2, #17
   21df8:	d001      	beq.n	21dfe <ble_ll_ctrl_rx_reject_ind+0x2a>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   21dfa:	20ff      	movs	r0, #255	; 0xff
   21dfc:	e021      	b.n	21e42 <ble_ll_ctrl_rx_reject_ind+0x6e>
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   21dfe:	79e2      	ldrb	r2, [r4, #7]
   21e00:	2a01      	cmp	r2, #1
   21e02:	d009      	beq.n	21e18 <ble_ll_ctrl_rx_reject_ind+0x44>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   21e04:	2106      	movs	r1, #6
   21e06:	4620      	mov	r0, r4
   21e08:	f7ff feb8 	bl	21b7c <ble_ll_ctrl_proc_stop>
                ble_ll_hci_ev_conn_update(connsm, ble_error);
   21e0c:	4629      	mov	r1, r5
   21e0e:	4620      	mov	r0, r4
   21e10:	f000 ff69 	bl	22ce6 <ble_ll_hci_ev_conn_update>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   21e14:	20ff      	movs	r0, #255	; 0xff
   21e16:	e014      	b.n	21e42 <ble_ll_ctrl_rx_reject_ind+0x6e>
                ble_ll_ctrl_conn_upd_make(connsm, rspdata, NULL);
   21e18:	2200      	movs	r2, #0
   21e1a:	4619      	mov	r1, r3
   21e1c:	4620      	mov	r0, r4
   21e1e:	f7ff f9c9 	bl	211b4 <ble_ll_ctrl_conn_upd_make>
                connsm->reject_reason = BLE_ERR_SUCCESS;
   21e22:	2000      	movs	r0, #0
   21e24:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
   21e28:	e00b      	b.n	21e42 <ble_ll_ctrl_rx_reject_ind+0x6e>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   21e2a:	2102      	movs	r1, #2
   21e2c:	4620      	mov	r0, r4
   21e2e:	f7ff fea5 	bl	21b7c <ble_ll_ctrl_proc_stop>
        ble_ll_hci_ev_encrypt_chg(connsm, ble_error);
   21e32:	4629      	mov	r1, r5
   21e34:	4620      	mov	r0, r4
   21e36:	f000 ff78 	bl	22d2a <ble_ll_hci_ev_encrypt_chg>
        connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   21e3a:	2301      	movs	r3, #1
   21e3c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    uint8_t rsp_opcode = BLE_ERR_MAX;
   21e40:	20ff      	movs	r0, #255	; 0xff
}
   21e42:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   21e44:	2108      	movs	r1, #8
   21e46:	4620      	mov	r0, r4
   21e48:	f7ff fe98 	bl	21b7c <ble_ll_ctrl_proc_stop>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   21e4c:	20ff      	movs	r0, #255	; 0xff
        break;
   21e4e:	e7f8      	b.n	21e42 <ble_ll_ctrl_rx_reject_ind+0x6e>

00021e50 <ble_ll_ctrl_rx_pdu>:
 * @param om
 * @param connsm
 */
int
ble_ll_ctrl_rx_pdu(struct ble_ll_conn_sm *connsm, struct os_mbuf *om)
{
   21e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21e54:	4606      	mov	r6, r0
   21e56:	460f      	mov	r7, r1
    /*
     * dptr points to om_data pointer. The first byte of om_data is the
     * first byte of the Data Channel PDU header. Get length from header and
     * opcode from LL control PDU.
     */
    dptr = om->om_data;
   21e58:	680c      	ldr	r4, [r1, #0]
    len = dptr[1];
   21e5a:	7863      	ldrb	r3, [r4, #1]
    opcode = dptr[2];
   21e5c:	78a5      	ldrb	r5, [r4, #2]
#endif

    /* If opcode comes from reserved value or CtrlData fields is invalid
     * we shall respond with LL_UNKNOWN_RSP
     */
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   21e5e:	2d22      	cmp	r5, #34	; 0x22
   21e60:	f200 817e 	bhi.w	22160 <ble_ll_ctrl_rx_pdu+0x310>
   21e64:	f104 0901 	add.w	r9, r4, #1
   21e68:	f104 0803 	add.w	r8, r4, #3
   21e6c:	3b01      	subs	r3, #1
   21e6e:	b2db      	uxtb	r3, r3
        (len != g_ble_ll_ctrl_pkt_lengths[opcode])) {
   21e70:	4abf      	ldr	r2, [pc, #764]	; (22170 <ble_ll_ctrl_rx_pdu+0x320>)
   21e72:	5d52      	ldrb	r2, [r2, r5]
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   21e74:	429a      	cmp	r2, r3
   21e76:	f040 817d 	bne.w	22174 <ble_ll_ctrl_rx_pdu+0x324>
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
        goto ll_ctrl_send_rsp;
    }

    /* Check if the feature is supported. */
    switch (opcode) {
   21e7a:	1eeb      	subs	r3, r5, #3
   21e7c:	2b19      	cmp	r3, #25
   21e7e:	d867      	bhi.n	21f50 <ble_ll_ctrl_rx_pdu+0x100>
   21e80:	e8df f003 	tbb	[pc, r3]
   21e84:	66196619 	.word	0x66196619
   21e88:	19666666 	.word	0x19666666
   21e8c:	1f666666 	.word	0x1f666666
   21e90:	16661c1c 	.word	0x16661c1c
   21e94:	13660d66 	.word	0x13660d66
   21e98:	66106666 	.word	0x66106666
   21e9c:	2266      	.short	0x2266
    case BLE_LL_CTRL_LENGTH_REQ:
        feature = BLE_LL_FEAT_DATA_LEN_EXT;
   21e9e:	f04f 0a20 	mov.w	sl, #32
   21ea2:	e013      	b.n	21ecc <ble_ll_ctrl_rx_pdu+0x7c>
        break;
    case BLE_LL_CTRL_PHY_REQ:
        feature = BLE_LL_FEAT_LE_2M_PHY | BLE_LL_FEAT_LE_CODED_PHY;
        break;
    case BLE_LL_CTRL_MIN_USED_CHAN_IND:
        feature = BLE_LL_FEAT_MIN_USED_CHAN;
   21ea4:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
   21ea8:	e010      	b.n	21ecc <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_LE_2M_PHY | BLE_LL_FEAT_LE_CODED_PHY;
   21eaa:	f44f 6a10 	mov.w	sl, #2304	; 0x900
   21eae:	e00d      	b.n	21ecc <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_LE_PING;
   21eb0:	f04f 0a10 	mov.w	sl, #16
   21eb4:	e00a      	b.n	21ecc <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_LE_ENCRYPTION;
   21eb6:	f04f 0a01 	mov.w	sl, #1
   21eba:	e007      	b.n	21ecc <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_CONN_PARM_REQ;
   21ebc:	f04f 0a02 	mov.w	sl, #2
   21ec0:	e004      	b.n	21ecc <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_SLAVE_INIT;
   21ec2:	f04f 0a08 	mov.w	sl, #8
   21ec6:	e001      	b.n	21ecc <ble_ll_ctrl_rx_pdu+0x7c>
        break;
    case BLE_LL_CTRL_PERIODIC_SYNC_IND:
        feature = BLE_LL_FEAT_SYNC_TRANS_RECV;
   21ec8:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
        feature = 0;
        break;
    }

    if (feature) {
        features = ble_ll_read_supp_features();
   21ecc:	f7fb f9ec 	bl	1d2a8 <ble_ll_read_supp_features>
        if ((features & feature) == 0) {
   21ed0:	ea1a 0f00 	tst.w	sl, r0
   21ed4:	d13c      	bne.n	21f50 <ble_ll_ctrl_rx_pdu+0x100>
            if (opcode == BLE_LL_CTRL_ENC_REQ) {
   21ed6:	2d03      	cmp	r5, #3
   21ed8:	d024      	beq.n	21f24 <ble_ll_ctrl_rx_pdu+0xd4>
    int rc = 0;
   21eda:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   21ede:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND;
                    rspbuf[1] = BLE_ERR_UNSUPP_REM_FEATURE;
                }
            } else {
                /* Construct unknown rsp pdu */
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   21ee0:	f04f 0807 	mov.w	r8, #7
        break;
    }

    /* Free mbuf or send response */
ll_ctrl_send_rsp:
    if (rsp_opcode == BLE_ERR_MAX) {
   21ee4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   21ee8:	f000 815d 	beq.w	221a6 <ble_ll_ctrl_rx_pdu+0x356>
    } else {
        /*
         * Write the response opcode into the buffer. If this is an unknown
         * response, put opcode of unknown pdu into buffer.
         */
        rspbuf[0] = rsp_opcode;
   21eec:	f884 8000 	strb.w	r8, [r4]
        if (rsp_opcode == BLE_LL_CTRL_UNKNOWN_RSP) {
   21ef0:	f1b8 0f07 	cmp.w	r8, #7
   21ef4:	f000 815b 	beq.w	221ae <ble_ll_ctrl_rx_pdu+0x35e>
            rspbuf[1] = opcode;
        }
        len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   21ef8:	4b9d      	ldr	r3, [pc, #628]	; (22170 <ble_ll_ctrl_rx_pdu+0x320>)
   21efa:	f813 3008 	ldrb.w	r3, [r3, r8]
   21efe:	3301      	adds	r3, #1
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   21f00:	b2db      	uxtb	r3, r3
   21f02:	2203      	movs	r2, #3
   21f04:	4639      	mov	r1, r7
   21f06:	4630      	mov	r0, r6
   21f08:	f7fe f938 	bl	2017c <ble_ll_conn_enqueue_pkt>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
        if (restart_encryption) {
   21f0c:	f1ba 0f00 	cmp.w	sl, #0
   21f10:	f040 814f 	bne.w	221b2 <ble_ll_ctrl_rx_pdu+0x362>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
        }
#endif
    }

    if (connsm->csmflags.cfbit.pending_initiate_dle) {
   21f14:	78f3      	ldrb	r3, [r6, #3]
   21f16:	f013 0f20 	tst.w	r3, #32
   21f1a:	f040 814f 	bne.w	221bc <ble_ll_ctrl_rx_pdu+0x36c>
        connsm->csmflags.cfbit.pending_initiate_dle = 0;
        ble_ll_ctrl_initiate_dle(connsm);
    }

    return rc;
}
   21f1e:	4648      	mov	r0, r9
   21f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) {
   21f24:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
   21f28:	f013 0f04 	tst.w	r3, #4
   21f2c:	d008      	beq.n	21f40 <ble_ll_ctrl_rx_pdu+0xf0>
                    rspbuf[1] = opcode;
   21f2e:	7065      	strb	r5, [r4, #1]
                    rspbuf[2] = BLE_ERR_UNSUPP_REM_FEATURE;
   21f30:	231a      	movs	r3, #26
   21f32:	70a3      	strb	r3, [r4, #2]
    int rc = 0;
   21f34:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   21f38:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   21f3a:	f04f 0811 	mov.w	r8, #17
   21f3e:	e7d1      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
                    rspbuf[1] = BLE_ERR_UNSUPP_REM_FEATURE;
   21f40:	231a      	movs	r3, #26
   21f42:	7063      	strb	r3, [r4, #1]
    int rc = 0;
   21f44:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   21f48:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND;
   21f4a:	f04f 080d 	mov.w	r8, #13
   21f4e:	e7c9      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
    switch (opcode) {
   21f50:	2d15      	cmp	r5, #21
   21f52:	d817      	bhi.n	21f84 <ble_ll_ctrl_rx_pdu+0x134>
   21f54:	e8df f015 	tbh	[pc, r5, lsl #1]
   21f58:	0026001c 	.word	0x0026001c
   21f5c:	00a30016 	.word	0x00a30016
   21f60:	00b700ad 	.word	0x00b700ad
   21f64:	006b00bf 	.word	0x006b00bf
   21f68:	00820076 	.word	0x00820076
   21f6c:	00cf00c7 	.word	0x00cf00c7
   21f70:	00f8008c 	.word	0x00f8008c
   21f74:	00e20097 	.word	0x00e20097
   21f78:	00f800ed 	.word	0x00f800ed
   21f7c:	00d90115 	.word	0x00d90115
   21f80:	004d0030 	.word	0x004d0030
    int rc = 0;
   21f84:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   21f88:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   21f8a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   21f8e:	e7a9      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_update(connsm, dptr);
   21f90:	4641      	mov	r1, r8
   21f92:	4630      	mov	r0, r6
   21f94:	f7ff fb1e 	bl	215d4 <ble_ll_ctrl_rx_conn_update>
   21f98:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   21f9c:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   21fa0:	46ca      	mov	sl, r9
        break;
   21fa2:	e79f      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_chanmap_req(connsm, dptr);
   21fa4:	4641      	mov	r1, r8
   21fa6:	4630      	mov	r0, r6
   21fa8:	f7ff fb58 	bl	2165c <ble_ll_ctrl_rx_chanmap_req>
   21fac:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   21fb0:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   21fb4:	46ca      	mov	sl, r9
        break;
   21fb6:	e795      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   21fb8:	4641      	mov	r1, r8
   21fba:	4630      	mov	r0, r6
   21fbc:	f7ff fb74 	bl	216a8 <ble_ll_ctrl_len_proc>
   21fc0:	4682      	mov	sl, r0
   21fc2:	2800      	cmp	r0, #0
   21fc4:	f040 80e3 	bne.w	2218e <ble_ll_ctrl_rx_pdu+0x33e>
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   21fc8:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
   21fcc:	2b08      	cmp	r3, #8
   21fce:	d008      	beq.n	21fe2 <ble_ll_ctrl_rx_pdu+0x192>
            IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD)) {
   21fd0:	f8b6 3048 	ldrh.w	r3, [r6, #72]	; 0x48
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   21fd4:	f413 7f80 	tst.w	r3, #256	; 0x100
   21fd8:	d003      	beq.n	21fe2 <ble_ll_ctrl_rx_pdu+0x192>
            CLR_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   21fda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   21fde:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
        ble_ll_ctrl_datalen_upd_make(connsm, rspbuf);
   21fe2:	4621      	mov	r1, r4
   21fe4:	4630      	mov	r0, r6
   21fe6:	f7ff f982 	bl	212ee <ble_ll_ctrl_datalen_upd_make>
    int rc = 0;
   21fea:	46d1      	mov	r9, sl
        rsp_opcode = BLE_LL_CTRL_LENGTH_RSP;
   21fec:	f04f 0815 	mov.w	r8, #21
        break;
   21ff0:	e778      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_DATA_LEN_UPD) {
   21ff2:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
   21ff6:	2b08      	cmp	r3, #8
   21ff8:	d005      	beq.n	22006 <ble_ll_ctrl_rx_pdu+0x1b6>
    int rc = 0;
   21ffa:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   21ffe:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   22000:	f04f 08ff 	mov.w	r8, #255	; 0xff
   22004:	e76e      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
            if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   22006:	4641      	mov	r1, r8
   22008:	4630      	mov	r0, r6
   2200a:	f7ff fb4d 	bl	216a8 <ble_ll_ctrl_len_proc>
   2200e:	4681      	mov	r9, r0
   22010:	b940      	cbnz	r0, 22024 <ble_ll_ctrl_rx_pdu+0x1d4>
    rsp_opcode = BLE_ERR_MAX;
   22012:	f04f 08ff 	mov.w	r8, #255	; 0xff
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   22016:	2108      	movs	r1, #8
   22018:	4630      	mov	r0, r6
   2201a:	f7ff fdaf 	bl	21b7c <ble_ll_ctrl_proc_stop>
    restart_encryption = 0;
   2201e:	f04f 0a00 	mov.w	sl, #0
   22022:	e75f      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
                rc = -1;
   22024:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   22028:	f04f 0807 	mov.w	r8, #7
   2202c:	e7f3      	b.n	22016 <ble_ll_ctrl_rx_pdu+0x1c6>
        rsp_opcode = ble_ll_ctrl_proc_unk_rsp(connsm, dptr, rspdata);
   2202e:	464a      	mov	r2, r9
   22030:	4641      	mov	r1, r8
   22032:	4630      	mov	r0, r6
   22034:	f7ff fdbd 	bl	21bb2 <ble_ll_ctrl_proc_unk_rsp>
   22038:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   2203c:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   22040:	46ca      	mov	sl, r9
        break;
   22042:	e74f      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode);
   22044:	462b      	mov	r3, r5
   22046:	4622      	mov	r2, r4
   22048:	4641      	mov	r1, r8
   2204a:	4630      	mov	r0, r6
   2204c:	f7ff fa03 	bl	21456 <ble_ll_ctrl_rx_feature_req>
   22050:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   22054:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   22058:	46ca      	mov	sl, r9
        break;
   2205a:	e743      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        ble_ll_ctrl_rx_feature_rsp(connsm, dptr);
   2205c:	4641      	mov	r1, r8
   2205e:	4630      	mov	r0, r6
   22060:	f7ff fe0d 	bl	21c7e <ble_ll_ctrl_rx_feature_rsp>
    int rc = 0;
   22064:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   22068:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   2206a:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   2206e:	e739      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_version_ind(connsm, dptr, rspdata);
   22070:	464a      	mov	r2, r9
   22072:	4641      	mov	r1, r8
   22074:	4630      	mov	r0, r6
   22076:	f7ff fe1e 	bl	21cb6 <ble_ll_ctrl_rx_version_ind>
   2207a:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   2207e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   22082:	46ca      	mov	sl, r9
        break;
   22084:	e72e      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode);
   22086:	462b      	mov	r3, r5
   22088:	4622      	mov	r2, r4
   2208a:	4641      	mov	r1, r8
   2208c:	4630      	mov	r0, r6
   2208e:	f7ff f9e2 	bl	21456 <ble_ll_ctrl_rx_feature_req>
   22092:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   22096:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2209a:	46ca      	mov	sl, r9
        break;
   2209c:	e722      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_enc_req(connsm, dptr, rspdata);
   2209e:	464a      	mov	r2, r9
   220a0:	4641      	mov	r1, r8
   220a2:	4630      	mov	r0, r6
   220a4:	f7ff fb33 	bl	2170e <ble_ll_ctrl_rx_enc_req>
   220a8:	4680      	mov	r8, r0
    int rc = 0;
   220aa:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   220ae:	46ca      	mov	sl, r9
        break;
   220b0:	e718      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        ble_ll_ctrl_rx_enc_rsp(connsm, dptr);
   220b2:	4641      	mov	r1, r8
   220b4:	4630      	mov	r0, r6
   220b6:	f7ff fb72 	bl	2179e <ble_ll_ctrl_rx_enc_rsp>
    int rc = 0;
   220ba:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   220be:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   220c0:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   220c4:	e70e      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_req(connsm);
   220c6:	4630      	mov	r0, r6
   220c8:	f7ff f82c 	bl	21124 <ble_ll_ctrl_rx_start_enc_req>
   220cc:	4680      	mov	r8, r0
    int rc = 0;
   220ce:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   220d2:	46ca      	mov	sl, r9
        break;
   220d4:	e706      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_rsp(connsm);
   220d6:	4630      	mov	r0, r6
   220d8:	f7ff fe1d 	bl	21d16 <ble_ll_ctrl_rx_start_enc_rsp>
   220dc:	4680      	mov	r8, r0
    int rc = 0;
   220de:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   220e2:	46ca      	mov	sl, r9
        break;
   220e4:	e6fe      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_req(connsm);
   220e6:	4630      	mov	r0, r6
   220e8:	f7ff f82c 	bl	21144 <ble_ll_ctrl_rx_pause_enc_req>
   220ec:	4680      	mov	r8, r0
    int rc = 0;
   220ee:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   220f2:	46ca      	mov	sl, r9
        break;
   220f4:	e6f6      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_rsp(connsm);
   220f6:	4630      	mov	r0, r6
   220f8:	f7ff f831 	bl	2115e <ble_ll_ctrl_rx_pause_enc_rsp>
   220fc:	4680      	mov	r8, r0
        if (rsp_opcode == BLE_LL_CTRL_PAUSE_ENC_RSP) {
   220fe:	280b      	cmp	r0, #11
   22100:	d04c      	beq.n	2219c <ble_ll_ctrl_rx_pdu+0x34c>
    int rc = 0;
   22102:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   22106:	46ca      	mov	sl, r9
   22108:	e6ec      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        ble_ll_ctrl_rx_ping_rsp(connsm);
   2210a:	4630      	mov	r0, r6
   2210c:	f7ff fe29 	bl	21d62 <ble_ll_ctrl_rx_ping_rsp>
    int rc = 0;
   22110:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   22114:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   22116:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   2211a:	e6e3      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_param_req(connsm, dptr, rspbuf);
   2211c:	4622      	mov	r2, r4
   2211e:	4641      	mov	r1, r8
   22120:	4630      	mov	r0, r6
   22122:	f7ff fe23 	bl	21d6c <ble_ll_ctrl_rx_conn_param_req>
   22126:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   2212a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2212e:	46ca      	mov	sl, r9
        break;
   22130:	e6d8      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_param_rsp(connsm, dptr, rspbuf);
   22132:	4622      	mov	r2, r4
   22134:	4641      	mov	r1, r8
   22136:	4630      	mov	r0, r6
   22138:	f7ff fc5d 	bl	219f6 <ble_ll_ctrl_rx_conn_param_rsp>
   2213c:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   22140:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   22144:	46ca      	mov	sl, r9
        break;
   22146:	e6cd      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_reject_ind(connsm, dptr, opcode, rspdata);
   22148:	464b      	mov	r3, r9
   2214a:	462a      	mov	r2, r5
   2214c:	4641      	mov	r1, r8
   2214e:	4630      	mov	r0, r6
   22150:	f7ff fe40 	bl	21dd4 <ble_ll_ctrl_rx_reject_ind>
   22154:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   22158:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2215c:	46ca      	mov	sl, r9
        break;
   2215e:	e6c1      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        rc = -1;
   22160:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   22164:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   22168:	f04f 0807 	mov.w	r8, #7
   2216c:	e6ba      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
   2216e:	bf00      	nop
   22170:	00029818 	.word	0x00029818
        rc = -1;
   22174:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   22178:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   2217c:	f04f 0807 	mov.w	r8, #7
   22180:	e6b0      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
    int rc = 0;
   22182:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   22186:	46ca      	mov	sl, r9
        rsp_opcode = BLE_LL_CTRL_PING_RSP;
   22188:	f04f 0813 	mov.w	r8, #19
   2218c:	e6aa      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
            rc  = -1;
   2218e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   22192:	f04f 0a00 	mov.w	sl, #0
            rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   22196:	f04f 0807 	mov.w	r8, #7
   2219a:	e6a3      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
    int rc = 0;
   2219c:	f04f 0900 	mov.w	r9, #0
            restart_encryption = 1;
   221a0:	f04f 0a01 	mov.w	sl, #1
   221a4:	e69e      	b.n	21ee4 <ble_ll_ctrl_rx_pdu+0x94>
        os_mbuf_free_chain(om);
   221a6:	4638      	mov	r0, r7
   221a8:	f7e8 f88c 	bl	a2c4 <os_mbuf_free_chain>
   221ac:	e6b2      	b.n	21f14 <ble_ll_ctrl_rx_pdu+0xc4>
            rspbuf[1] = opcode;
   221ae:	7065      	strb	r5, [r4, #1]
   221b0:	e6a2      	b.n	21ef8 <ble_ll_ctrl_rx_pdu+0xa8>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   221b2:	2102      	movs	r1, #2
   221b4:	4630      	mov	r0, r6
   221b6:	f7ff f99d 	bl	214f4 <ble_ll_ctrl_proc_init>
   221ba:	e6ab      	b.n	21f14 <ble_ll_ctrl_rx_pdu+0xc4>
        connsm->csmflags.cfbit.pending_initiate_dle = 0;
   221bc:	78f3      	ldrb	r3, [r6, #3]
   221be:	f36f 1345 	bfc	r3, #5, #1
   221c2:	70f3      	strb	r3, [r6, #3]
        ble_ll_ctrl_initiate_dle(connsm);
   221c4:	4630      	mov	r0, r6
   221c6:	f7ff fc89 	bl	21adc <ble_ll_ctrl_initiate_dle>
    return rc;
   221ca:	e6a8      	b.n	21f1e <ble_ll_ctrl_rx_pdu+0xce>

000221cc <ble_ll_ctrl_reject_ind_send>:
 * @return int
 */
int
ble_ll_ctrl_reject_ind_send(struct ble_ll_conn_sm *connsm, uint8_t rej_opcode,
                            uint8_t err)
{
   221cc:	b570      	push	{r4, r5, r6, lr}
   221ce:	4605      	mov	r5, r0
   221d0:	460c      	mov	r4, r1
   221d2:	4616      	mov	r6, r2
    uint8_t len;
    uint8_t opcode;
    uint8_t *rspbuf;
    struct os_mbuf *om;

    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   221d4:	2110      	movs	r1, #16
   221d6:	201b      	movs	r0, #27
   221d8:	f7e8 fd8d 	bl	acf6 <os_msys_get_pkthdr>
                            sizeof(struct ble_mbuf_hdr));
    if (om) {
   221dc:	b1d8      	cbz	r0, 22216 <ble_ll_ctrl_reject_ind_send+0x4a>
   221de:	4601      	mov	r1, r0
        rspbuf = om->om_data;
   221e0:	6803      	ldr	r3, [r0, #0]
        opcode = BLE_LL_CTRL_REJECT_IND_EXT;
        if (rej_opcode == BLE_LL_CTRL_ENC_REQ) {
   221e2:	2c03      	cmp	r4, #3
   221e4:	d00a      	beq.n	221fc <ble_ll_ctrl_reject_ind_send+0x30>
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
                opcode = BLE_LL_CTRL_REJECT_IND;
            }
        }
        rspbuf[0] = opcode;
   221e6:	2211      	movs	r2, #17
   221e8:	701a      	strb	r2, [r3, #0]
        if (opcode == BLE_LL_CTRL_REJECT_IND) {
            rspbuf[1] = err;
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
        } else {
            rspbuf[1] = rej_opcode;
   221ea:	705c      	strb	r4, [r3, #1]
            rspbuf[2] = err;
   221ec:	709e      	strb	r6, [r3, #2]
            len = BLE_LL_CTRL_REJECT_IND_EXT_LEN + 1;
   221ee:	2303      	movs	r3, #3
        }
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   221f0:	2203      	movs	r2, #3
   221f2:	4628      	mov	r0, r5
   221f4:	f7fd ffc2 	bl	2017c <ble_ll_conn_enqueue_pkt>
        rc = 0;
   221f8:	2000      	movs	r0, #0
    } else {
        rc = 1;
    }
    return rc;
}
   221fa:	bd70      	pop	{r4, r5, r6, pc}
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
   221fc:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
   22200:	f012 0f04 	tst.w	r2, #4
   22204:	d104      	bne.n	22210 <ble_ll_ctrl_reject_ind_send+0x44>
        rspbuf[0] = opcode;
   22206:	220d      	movs	r2, #13
   22208:	701a      	strb	r2, [r3, #0]
            rspbuf[1] = err;
   2220a:	705e      	strb	r6, [r3, #1]
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
   2220c:	2302      	movs	r3, #2
   2220e:	e7ef      	b.n	221f0 <ble_ll_ctrl_reject_ind_send+0x24>
        rspbuf[0] = opcode;
   22210:	2211      	movs	r2, #17
   22212:	701a      	strb	r2, [r3, #0]
   22214:	e7e9      	b.n	221ea <ble_ll_ctrl_reject_ind_send+0x1e>
        rc = 1;
   22216:	2001      	movs	r0, #1
    return rc;
   22218:	e7ef      	b.n	221fa <ble_ll_ctrl_reject_ind_send+0x2e>

0002221a <ble_ll_ctrl_tx_done>:
 *
 * @return int
 */
int
ble_ll_ctrl_tx_done(struct os_mbuf *txpdu, struct ble_ll_conn_sm *connsm)
{
   2221a:	b538      	push	{r3, r4, r5, lr}
   2221c:	4604      	mov	r4, r0
    int rc;
    uint8_t opcode;

    rc = 0;
    opcode = txpdu->om_data[0];
   2221e:	6802      	ldr	r2, [r0, #0]
   22220:	7813      	ldrb	r3, [r2, #0]
    switch (opcode) {
   22222:	3b02      	subs	r3, #2
   22224:	2b0f      	cmp	r3, #15
   22226:	d85a      	bhi.n	222de <ble_ll_ctrl_tx_done+0xc4>
   22228:	e8df f003 	tbb	[pc, r3]
   2222c:	59373208 	.word	0x59373208
   22230:	5959593d 	.word	0x5959593d
   22234:	2d594f32 	.word	0x2d594f32
   22238:	13595959 	.word	0x13595959
    case BLE_LL_CTRL_TERMINATE_IND:
        connsm->csmflags.cfbit.terminate_ind_txd = 1;
   2223c:	780b      	ldrb	r3, [r1, #0]
   2223e:	f043 0302 	orr.w	r3, r3, #2
   22242:	700b      	strb	r3, [r1, #0]
        rc = -1;
   22244:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
#endif
    default:
        break;
    }

    os_mbuf_free_chain(txpdu);
   22248:	4620      	mov	r0, r4
   2224a:	f7e8 f83b 	bl	a2c4 <os_mbuf_free_chain>
    return rc;
}
   2224e:	4628      	mov	r0, r5
   22250:	bd38      	pop	{r3, r4, r5, pc}
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_CONN_PARAM_REQ) {
   22252:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
   22256:	2b06      	cmp	r3, #6
   22258:	d008      	beq.n	2226c <ble_ll_ctrl_tx_done+0x52>
        if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   2225a:	f891 3118 	ldrb.w	r3, [r1, #280]	; 0x118
   2225e:	2b02      	cmp	r3, #2
   22260:	d93f      	bls.n	222e2 <ble_ll_ctrl_tx_done+0xc8>
            connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   22262:	2301      	movs	r3, #1
   22264:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   22268:	2500      	movs	r5, #0
   2226a:	e7ed      	b.n	22248 <ble_ll_ctrl_tx_done+0x2e>
            if (txpdu->om_data[1] == BLE_LL_CTRL_CONN_PARM_REQ &&
   2226c:	7853      	ldrb	r3, [r2, #1]
   2226e:	2b0f      	cmp	r3, #15
   22270:	d1f3      	bne.n	2225a <ble_ll_ctrl_tx_done+0x40>
                            txpdu->om_data[2] != BLE_ERR_LMP_COLLISION) {
   22272:	7893      	ldrb	r3, [r2, #2]
            if (txpdu->om_data[1] == BLE_LL_CTRL_CONN_PARM_REQ &&
   22274:	2b23      	cmp	r3, #35	; 0x23
   22276:	d0f0      	beq.n	2225a <ble_ll_ctrl_tx_done+0x40>
                connsm->reject_reason = txpdu->om_data[2];
   22278:	f881 3037 	strb.w	r3, [r1, #55]	; 0x37
                connsm->csmflags.cfbit.host_expects_upd_event = 1;
   2227c:	784b      	ldrb	r3, [r1, #1]
   2227e:	f043 0302 	orr.w	r3, r3, #2
   22282:	704b      	strb	r3, [r1, #1]
   22284:	e7e9      	b.n	2225a <ble_ll_ctrl_tx_done+0x40>
        connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   22286:	2301      	movs	r3, #1
   22288:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   2228c:	2500      	movs	r5, #0
        break;
   2228e:	e7db      	b.n	22248 <ble_ll_ctrl_tx_done+0x2e>
        connsm->enc_data.enc_state = CONN_ENC_S_ENC_RSP_WAIT;
   22290:	2303      	movs	r3, #3
   22292:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   22296:	2500      	movs	r5, #0
        break;
   22298:	e7d6      	b.n	22248 <ble_ll_ctrl_tx_done+0x2e>
        connsm->csmflags.cfbit.send_ltk_req = 1;
   2229a:	788b      	ldrb	r3, [r1, #2]
   2229c:	f043 0301 	orr.w	r3, r3, #1
   222a0:	708b      	strb	r3, [r1, #2]
    rc = 0;
   222a2:	2500      	movs	r5, #0
        break;
   222a4:	e7d0      	b.n	22248 <ble_ll_ctrl_tx_done+0x2e>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   222a6:	79cb      	ldrb	r3, [r1, #7]
   222a8:	2b02      	cmp	r3, #2
   222aa:	d001      	beq.n	222b0 <ble_ll_ctrl_tx_done+0x96>
    rc = 0;
   222ac:	2500      	movs	r5, #0
   222ae:	e7cb      	b.n	22248 <ble_ll_ctrl_tx_done+0x2e>
            connsm->enc_data.enc_state = CONN_ENC_S_ENCRYPTED;
   222b0:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
            if (CONN_F_LE_PING_SUPP(connsm)) {
   222b4:	788b      	ldrb	r3, [r1, #2]
   222b6:	f013 0f08 	tst.w	r3, #8
   222ba:	d101      	bne.n	222c0 <ble_ll_ctrl_tx_done+0xa6>
    rc = 0;
   222bc:	2500      	movs	r5, #0
   222be:	e7c3      	b.n	22248 <ble_ll_ctrl_tx_done+0x2e>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   222c0:	4608      	mov	r0, r1
   222c2:	f7fd f8d9 	bl	1f478 <ble_ll_conn_auth_pyld_timer_start>
    rc = 0;
   222c6:	2500      	movs	r5, #0
   222c8:	e7be      	b.n	22248 <ble_ll_ctrl_tx_done+0x2e>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   222ca:	79cb      	ldrb	r3, [r1, #7]
   222cc:	2b02      	cmp	r3, #2
   222ce:	d001      	beq.n	222d4 <ble_ll_ctrl_tx_done+0xba>
    rc = 0;
   222d0:	2500      	movs	r5, #0
   222d2:	e7b9      	b.n	22248 <ble_ll_ctrl_tx_done+0x2e>
            connsm->enc_data.enc_state = CONN_ENC_S_PAUSE_ENC_RSP_WAIT;
   222d4:	2304      	movs	r3, #4
   222d6:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   222da:	2500      	movs	r5, #0
   222dc:	e7b4      	b.n	22248 <ble_ll_ctrl_tx_done+0x2e>
   222de:	2500      	movs	r5, #0
   222e0:	e7b2      	b.n	22248 <ble_ll_ctrl_tx_done+0x2e>
   222e2:	2500      	movs	r5, #0
   222e4:	e7b0      	b.n	22248 <ble_ll_ctrl_tx_done+0x2e>

000222e6 <ble_ll_hci_get_num_cmd_pkts>:
 */
static uint8_t
ble_ll_hci_get_num_cmd_pkts(void)
{
    return BLE_LL_CFG_NUM_HCI_CMD_PKTS;
}
   222e6:	2001      	movs	r0, #1
   222e8:	4770      	bx	lr

000222ea <ble_ll_hci_rd_local_version>:
 *
 * @return int
 */
static int
ble_ll_hci_rd_local_version(uint8_t *rspbuf, uint8_t *rsplen)
{
   222ea:	4603      	mov	r3, r0
    struct ble_hci_ip_rd_local_ver_rp *rsp = (void *) rspbuf;

    rsp->hci_ver = BLE_HCI_VER_BCS;
   222ec:	2209      	movs	r2, #9
   222ee:	7002      	strb	r2, [r0, #0]
    rsp->hci_rev = 0;
   222f0:	2000      	movs	r0, #0
   222f2:	7058      	strb	r0, [r3, #1]
   222f4:	7098      	strb	r0, [r3, #2]
    rsp->lmp_ver = BLE_LMP_VER_BCS;
   222f6:	70da      	strb	r2, [r3, #3]
    rsp->manufacturer = htole16(MYNEWT_VAL(BLE_LL_MFRG_ID));
   222f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   222fc:	711a      	strb	r2, [r3, #4]
   222fe:	715a      	strb	r2, [r3, #5]
    rsp->lmp_subver = 0;
   22300:	7198      	strb	r0, [r3, #6]
   22302:	71d8      	strb	r0, [r3, #7]

    *rsplen = sizeof(*rsp);
   22304:	2308      	movs	r3, #8
   22306:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   22308:	4770      	bx	lr

0002230a <ble_ll_hci_rd_local_supp_feat>:
    /*
     * The only two bits we set here currently are (5th byte):
     *      BR/EDR not supported        (bit 5)
     *      LE supported (controller)   (bit 6)
     */
    rsp->features = htole64(0x0000006000000000);
   2230a:	2300      	movs	r3, #0
   2230c:	7003      	strb	r3, [r0, #0]
   2230e:	7043      	strb	r3, [r0, #1]
   22310:	7083      	strb	r3, [r0, #2]
   22312:	70c3      	strb	r3, [r0, #3]
   22314:	2260      	movs	r2, #96	; 0x60
   22316:	7102      	strb	r2, [r0, #4]
   22318:	7143      	strb	r3, [r0, #5]
   2231a:	7183      	strb	r3, [r0, #6]
   2231c:	71c3      	strb	r3, [r0, #7]

    *rsplen = sizeof(*rsp);
   2231e:	2208      	movs	r2, #8
   22320:	700a      	strb	r2, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   22322:	4618      	mov	r0, r3
   22324:	4770      	bx	lr
	...

00022328 <ble_ll_hci_rd_bd_addr>:
static int
ble_ll_hci_rd_bd_addr(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_ip_rd_bd_addr_rp *rsp = (void *) rspbuf;

    memcpy(rsp->addr, g_dev_addr, BLE_DEV_ADDR_LEN);
   22328:	4b04      	ldr	r3, [pc, #16]	; (2233c <ble_ll_hci_rd_bd_addr+0x14>)
   2232a:	681a      	ldr	r2, [r3, #0]
   2232c:	6002      	str	r2, [r0, #0]
   2232e:	889b      	ldrh	r3, [r3, #4]
   22330:	8083      	strh	r3, [r0, #4]

    *rsplen = sizeof(*rsp);
   22332:	2306      	movs	r3, #6
   22334:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   22336:	2000      	movs	r0, #0
   22338:	4770      	bx	lr
   2233a:	bf00      	nop
   2233c:	20008750 	.word	0x20008750

00022340 <ble_ll_hci_set_le_event_mask>:
static int
ble_ll_hci_set_le_event_mask(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_event_mask_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   22340:	2908      	cmp	r1, #8
   22342:	d106      	bne.n	22352 <ble_ll_hci_set_le_event_mask+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_le_event_mask = le64toh(cmd->event_mask);
   22344:	6801      	ldr	r1, [r0, #0]
   22346:	6842      	ldr	r2, [r0, #4]
   22348:	4b03      	ldr	r3, [pc, #12]	; (22358 <ble_ll_hci_set_le_event_mask+0x18>)
   2234a:	6019      	str	r1, [r3, #0]
   2234c:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   2234e:	2000      	movs	r0, #0
   22350:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22352:	2012      	movs	r0, #18
}
   22354:	4770      	bx	lr
   22356:	bf00      	nop
   22358:	200089e0 	.word	0x200089e0

0002235c <ble_ll_hci_le_read_bufsize>:
static int
ble_ll_hci_le_read_bufsize(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_buf_size_rp *rp = (void *) rspbuf;

    rp->data_len = htole16(g_ble_ll_data.ll_acl_pkt_size);
   2235c:	4b04      	ldr	r3, [pc, #16]	; (22370 <ble_ll_hci_le_read_bufsize+0x14>)
   2235e:	895a      	ldrh	r2, [r3, #10]
   22360:	8002      	strh	r2, [r0, #0]
    rp->data_packets = g_ble_ll_data.ll_num_acl_pkts;
   22362:	7a5b      	ldrb	r3, [r3, #9]
   22364:	7083      	strb	r3, [r0, #2]

    *rsplen = sizeof(*rp);
   22366:	2303      	movs	r3, #3
   22368:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   2236a:	2000      	movs	r0, #0
   2236c:	4770      	bx	lr
   2236e:	bf00      	nop
   22370:	200084d8 	.word	0x200084d8

00022374 <ble_ll_hci_le_rd_sugg_data_len>:
ble_ll_hci_le_rd_sugg_data_len(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_sugg_def_data_len_rp *rsp = (void *) rspbuf;

    /* Place the data packet length and number of packets in the buffer */
    rsp->max_tx_octets = htole16(g_ble_ll_conn_params.sugg_tx_octets);
   22374:	4b04      	ldr	r3, [pc, #16]	; (22388 <ble_ll_hci_le_rd_sugg_data_len+0x14>)
   22376:	7a5a      	ldrb	r2, [r3, #9]
   22378:	8002      	strh	r2, [r0, #0]
    rsp->max_tx_time = htole16(g_ble_ll_conn_params.sugg_tx_time);
   2237a:	895b      	ldrh	r3, [r3, #10]
   2237c:	8043      	strh	r3, [r0, #2]

    *rsplen = sizeof(*rsp);
   2237e:	2304      	movs	r3, #4
   22380:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   22382:	2000      	movs	r0, #0
   22384:	4770      	bx	lr
   22386:	bf00      	nop
   22388:	200087fc 	.word	0x200087fc

0002238c <ble_ll_hci_le_rd_max_data_len>:
ble_ll_hci_le_rd_max_data_len(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_max_data_len_rp *rsp = (void *)rspbuf;

    /* Place the data packet length and number of packets in the buffer */
    rsp->max_tx_octests = htole16(g_ble_ll_conn_params.supp_max_tx_octets);
   2238c:	4b06      	ldr	r3, [pc, #24]	; (223a8 <ble_ll_hci_le_rd_max_data_len+0x1c>)
   2238e:	799a      	ldrb	r2, [r3, #6]
   22390:	8002      	strh	r2, [r0, #0]
    rsp->max_tx_time = htole16(g_ble_ll_conn_params.supp_max_tx_time);
   22392:	8a5a      	ldrh	r2, [r3, #18]
   22394:	8042      	strh	r2, [r0, #2]
    rsp->max_rx_octests = htole16(g_ble_ll_conn_params.supp_max_rx_octets);
   22396:	79da      	ldrb	r2, [r3, #7]
   22398:	8082      	strh	r2, [r0, #4]
    rsp->max_rx_time = htole16(g_ble_ll_conn_params.supp_max_rx_time);
   2239a:	8a9b      	ldrh	r3, [r3, #20]
   2239c:	80c3      	strh	r3, [r0, #6]

    *rsplen = sizeof(*rsp);
   2239e:	2308      	movs	r3, #8
   223a0:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   223a2:	2000      	movs	r0, #0
   223a4:	4770      	bx	lr
   223a6:	bf00      	nop
   223a8:	200087fc 	.word	0x200087fc

000223ac <ble_ll_hci_le_cmd_send_cmd_status>:
static int
ble_ll_hci_le_cmd_send_cmd_status(uint16_t ocf)
{
    int rc;

    switch (ocf) {
   223ac:	380d      	subs	r0, #13
   223ae:	2837      	cmp	r0, #55	; 0x37
   223b0:	d81f      	bhi.n	223f2 <ble_ll_hci_le_cmd_send_cmd_status+0x46>
   223b2:	e8df f000 	tbb	[pc, r0]
   223b6:	1e1c      	.short	0x1e1c
   223b8:	1e1e1e1e 	.word	0x1e1e1e1e
   223bc:	1c1e1e1c 	.word	0x1c1e1e1c
   223c0:	1e1c1e1e 	.word	0x1e1c1e1e
   223c4:	1e1e1e1e 	.word	0x1e1e1e1e
   223c8:	1e1e1e1e 	.word	0x1e1e1e1e
   223cc:	1c1c1e1e 	.word	0x1c1c1e1e
   223d0:	1e1e1e1e 	.word	0x1e1e1e1e
   223d4:	1e1e1e1e 	.word	0x1e1e1e1e
   223d8:	1c1e1e1e 	.word	0x1c1e1e1e
   223dc:	1e1e1e1e 	.word	0x1e1e1e1e
   223e0:	1e1e1e1e 	.word	0x1e1e1e1e
   223e4:	1e1e1e1e 	.word	0x1e1e1e1e
   223e8:	1e1e1e1e 	.word	0x1e1e1e1e
   223ec:	1c1c      	.short	0x1c1c
    case BLE_HCI_OCF_LE_SET_PHY:
    case BLE_HCI_OCF_LE_PERIODIC_ADV_CREATE_SYNC:
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_SCA_UPDATE)
    case BLE_HCI_OCF_LE_REQ_PEER_SCA:
#endif
        rc = 1;
   223ee:	2001      	movs	r0, #1
   223f0:	4770      	bx	lr
        break;
    default:
        rc = 0;
   223f2:	2000      	movs	r0, #0
        break;
    }
    return rc;
}
   223f4:	4770      	bx	lr
	...

000223f8 <ble_ll_read_rf_path_compensation>:
static int
ble_ll_read_rf_path_compensation(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_rf_path_compensation_rp *rsp = (void *) rspbuf;

    rsp->rx_path_compensation = htole16(rx_path_pwr_compensation);
   223f8:	4b04      	ldr	r3, [pc, #16]	; (2240c <ble_ll_read_rf_path_compensation+0x14>)
   223fa:	881b      	ldrh	r3, [r3, #0]
   223fc:	8043      	strh	r3, [r0, #2]
    rsp->tx_path_compensation = htole16(tx_path_pwr_compensation);
   223fe:	4b04      	ldr	r3, [pc, #16]	; (22410 <ble_ll_read_rf_path_compensation+0x18>)
   22400:	881b      	ldrh	r3, [r3, #0]
   22402:	8003      	strh	r3, [r0, #0]

    *rsplen = sizeof(*rsp);;
   22404:	2304      	movs	r3, #4
   22406:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   22408:	2000      	movs	r0, #0
   2240a:	4770      	bx	lr
   2240c:	200089e8 	.word	0x200089e8
   22410:	200089ea 	.word	0x200089ea

00022414 <ble_ll_hci_cb_set_event_mask>:
static int
ble_ll_hci_cb_set_event_mask(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_cb_set_event_mask_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   22414:	2908      	cmp	r1, #8
   22416:	d106      	bne.n	22426 <ble_ll_hci_cb_set_event_mask+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_event_mask = le64toh(cmd->event_mask);
   22418:	6801      	ldr	r1, [r0, #0]
   2241a:	6842      	ldr	r2, [r0, #4]
   2241c:	4b03      	ldr	r3, [pc, #12]	; (2242c <ble_ll_hci_cb_set_event_mask+0x18>)
   2241e:	6019      	str	r1, [r3, #0]
   22420:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   22422:	2000      	movs	r0, #0
   22424:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22426:	2012      	movs	r0, #18
}
   22428:	4770      	bx	lr
   2242a:	bf00      	nop
   2242c:	200089d0 	.word	0x200089d0

00022430 <ble_ll_hci_cb_set_event_mask2>:
static int
ble_ll_hci_cb_set_event_mask2(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_cb_set_event_mask2_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   22430:	2908      	cmp	r1, #8
   22432:	d106      	bne.n	22442 <ble_ll_hci_cb_set_event_mask2+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_event_mask2 = le64toh(cmd->event_mask2);
   22434:	6801      	ldr	r1, [r0, #0]
   22436:	6842      	ldr	r2, [r0, #4]
   22438:	4b03      	ldr	r3, [pc, #12]	; (22448 <ble_ll_hci_cb_set_event_mask2+0x18>)
   2243a:	6019      	str	r1, [r3, #0]
   2243c:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   2243e:	2000      	movs	r0, #0
   22440:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22442:	2012      	movs	r0, #18
}
   22444:	4770      	bx	lr
   22446:	bf00      	nop
   22448:	200089d8 	.word	0x200089d8

0002244c <ble_ll_hci_disconnect>:
    if (len != sizeof (*cmd)) {
   2244c:	2903      	cmp	r1, #3
   2244e:	d001      	beq.n	22454 <ble_ll_hci_disconnect+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22450:	2012      	movs	r0, #18
}
   22452:	4770      	bx	lr
{
   22454:	b508      	push	{r3, lr}
    return ble_ll_conn_hci_disconnect_cmd(cmd);
   22456:	f7fe fc77 	bl	20d48 <ble_ll_conn_hci_disconnect_cmd>
}
   2245a:	bd08      	pop	{r3, pc}

0002245c <ble_ll_hci_link_ctrl_cmd_proc>:
{
   2245c:	b508      	push	{r3, lr}
    switch (ocf) {
   2245e:	2a06      	cmp	r2, #6
   22460:	d003      	beq.n	2246a <ble_ll_hci_link_ctrl_cmd_proc+0xe>
   22462:	2a1d      	cmp	r2, #29
   22464:	d006      	beq.n	22474 <ble_ll_hci_link_ctrl_cmd_proc+0x18>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   22466:	2001      	movs	r0, #1
    return rc;
   22468:	e003      	b.n	22472 <ble_ll_hci_link_ctrl_cmd_proc+0x16>
        rc = ble_ll_hci_disconnect(cmdbuf, len);
   2246a:	f7ff ffef 	bl	2244c <ble_ll_hci_disconnect>
        rc += (BLE_ERR_MAX + 1);
   2246e:	f500 7080 	add.w	r0, r0, #256	; 0x100
}
   22472:	bd08      	pop	{r3, pc}
        rc = ble_ll_conn_hci_rd_rem_ver_cmd(cmdbuf, len);
   22474:	f7fe fcb4 	bl	20de0 <ble_ll_conn_hci_rd_rem_ver_cmd>
        rc += (BLE_ERR_MAX + 1);
   22478:	f500 7080 	add.w	r0, r0, #256	; 0x100
        break;
   2247c:	e7f9      	b.n	22472 <ble_ll_hci_link_ctrl_cmd_proc+0x16>

0002247e <ble_ll_hci_ctlr_bb_cmd_proc>:

static int
ble_ll_hci_ctlr_bb_cmd_proc(const uint8_t *cmdbuf, uint8_t len, uint16_t ocf,
                            uint8_t *rspbuf, uint8_t *rsplen)
{
   2247e:	b510      	push	{r4, lr}
    int rc;

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    switch (ocf) {
   22480:	2a63      	cmp	r2, #99	; 0x63
   22482:	d015      	beq.n	224b0 <ble_ll_hci_ctlr_bb_cmd_proc+0x32>
   22484:	461c      	mov	r4, r3
   22486:	d807      	bhi.n	22498 <ble_ll_hci_ctlr_bb_cmd_proc+0x1a>
   22488:	2a01      	cmp	r2, #1
   2248a:	d00e      	beq.n	224aa <ble_ll_hci_ctlr_bb_cmd_proc+0x2c>
   2248c:	2a03      	cmp	r2, #3
   2248e:	d117      	bne.n	224c0 <ble_ll_hci_ctlr_bb_cmd_proc+0x42>
    case BLE_HCI_OCF_CB_SET_EVENT_MASK:
        rc = ble_ll_hci_cb_set_event_mask(cmdbuf, len);
        break;
    case BLE_HCI_OCF_CB_RESET:
        if (len == 0) {
   22490:	b9c1      	cbnz	r1, 224c4 <ble_ll_hci_ctlr_bb_cmd_proc+0x46>
            rc = ble_ll_reset();
   22492:	f7fa ff0f 	bl	1d2b4 <ble_ll_reset>
   22496:	e00a      	b.n	224ae <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
    switch (ocf) {
   22498:	2a7b      	cmp	r2, #123	; 0x7b
   2249a:	d00c      	beq.n	224b6 <ble_ll_hci_ctlr_bb_cmd_proc+0x38>
   2249c:	2a7c      	cmp	r2, #124	; 0x7c
   2249e:	d10f      	bne.n	224c0 <ble_ll_hci_ctlr_bb_cmd_proc+0x42>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_PING)
    case BLE_HCI_OCF_CB_RD_AUTH_PYLD_TMO:
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
        break;
    case BLE_HCI_OCF_CB_WR_AUTH_PYLD_TMO:
        rc = ble_ll_conn_hci_wr_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
   224a0:	9b02      	ldr	r3, [sp, #8]
   224a2:	4622      	mov	r2, r4
   224a4:	f7fe fdec 	bl	21080 <ble_ll_conn_hci_wr_auth_pyld_tmo>
        break;
   224a8:	e001      	b.n	224ae <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
        rc = ble_ll_hci_cb_set_event_mask(cmdbuf, len);
   224aa:	f7ff ffb3 	bl	22414 <ble_ll_hci_cb_set_event_mask>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    return rc;
}
   224ae:	bd10      	pop	{r4, pc}
        rc = ble_ll_hci_cb_set_event_mask2(cmdbuf, len);
   224b0:	f7ff ffbe 	bl	22430 <ble_ll_hci_cb_set_event_mask2>
        break;
   224b4:	e7fb      	b.n	224ae <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
   224b6:	9b02      	ldr	r3, [sp, #8]
   224b8:	4622      	mov	r2, r4
   224ba:	f7fe fdc8 	bl	2104e <ble_ll_conn_hci_rd_auth_pyld_tmo>
        break;
   224be:	e7f6      	b.n	224ae <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   224c0:	2001      	movs	r0, #1
   224c2:	e7f4      	b.n	224ae <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   224c4:	2012      	movs	r0, #18
    return rc;
   224c6:	e7f2      	b.n	224ae <ble_ll_hci_ctlr_bb_cmd_proc+0x30>

000224c8 <ble_ll_hci_rd_local_supp_cmd>:
{
   224c8:	b4f0      	push	{r4, r5, r6, r7}
    memset(rsp->commands, 0, sizeof(rsp->commands));
   224ca:	2300      	movs	r3, #0
   224cc:	62c3      	str	r3, [r0, #44]	; 0x2c
   224ce:	6303      	str	r3, [r0, #48]	; 0x30
   224d0:	6343      	str	r3, [r0, #52]	; 0x34
   224d2:	6383      	str	r3, [r0, #56]	; 0x38
   224d4:	63c3      	str	r3, [r0, #60]	; 0x3c
    memcpy(rsp->commands, g_ble_ll_supp_cmds, sizeof(g_ble_ll_supp_cmds));
   224d6:	4b0e      	ldr	r3, [pc, #56]	; (22510 <ble_ll_hci_rd_local_supp_cmd+0x48>)
   224d8:	f103 0220 	add.w	r2, r3, #32
   224dc:	681f      	ldr	r7, [r3, #0]
   224de:	685e      	ldr	r6, [r3, #4]
   224e0:	689d      	ldr	r5, [r3, #8]
   224e2:	68dc      	ldr	r4, [r3, #12]
   224e4:	6007      	str	r7, [r0, #0]
   224e6:	6046      	str	r6, [r0, #4]
   224e8:	6085      	str	r5, [r0, #8]
   224ea:	60c4      	str	r4, [r0, #12]
   224ec:	3310      	adds	r3, #16
   224ee:	3010      	adds	r0, #16
   224f0:	4293      	cmp	r3, r2
   224f2:	d1f3      	bne.n	224dc <ble_ll_hci_rd_local_supp_cmd+0x14>
   224f4:	681d      	ldr	r5, [r3, #0]
   224f6:	685c      	ldr	r4, [r3, #4]
   224f8:	689a      	ldr	r2, [r3, #8]
   224fa:	6005      	str	r5, [r0, #0]
   224fc:	6044      	str	r4, [r0, #4]
   224fe:	6082      	str	r2, [r0, #8]
   22500:	7b1b      	ldrb	r3, [r3, #12]
   22502:	7303      	strb	r3, [r0, #12]
    *rsplen = sizeof(*rsp);
   22504:	2340      	movs	r3, #64	; 0x40
   22506:	700b      	strb	r3, [r1, #0]
}
   22508:	2000      	movs	r0, #0
   2250a:	bcf0      	pop	{r4, r5, r6, r7}
   2250c:	4770      	bx	lr
   2250e:	bf00      	nop
   22510:	00029854 	.word	0x00029854

00022514 <ble_ll_hci_info_params_cmd_proc>:

static int
ble_ll_hci_info_params_cmd_proc(const uint8_t *cmdbuf, uint8_t len,
                                uint16_t ocf, uint8_t *rspbuf, uint8_t *rsplen)
{
   22514:	b508      	push	{r3, lr}
    int rc;

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    switch (ocf) {
   22516:	3a01      	subs	r2, #1
   22518:	2a08      	cmp	r2, #8
   2251a:	d81e      	bhi.n	2255a <ble_ll_hci_info_params_cmd_proc+0x46>
   2251c:	e8df f002 	tbb	[pc, r2]
   22520:	1d110b05 	.word	0x1d110b05
   22524:	1d1d1d1d 	.word	0x1d1d1d1d
   22528:	17          	.byte	0x17
   22529:	00          	.byte	0x00
    case BLE_HCI_OCF_IP_RD_LOCAL_VER:
        if (len == 0) {
   2252a:	b9c1      	cbnz	r1, 2255e <ble_ll_hci_info_params_cmd_proc+0x4a>
            rc = ble_ll_hci_rd_local_version(rspbuf, rsplen);
   2252c:	9902      	ldr	r1, [sp, #8]
   2252e:	4618      	mov	r0, r3
   22530:	f7ff fedb 	bl	222ea <ble_ll_hci_rd_local_version>
   22534:	e012      	b.n	2255c <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_CMD:
        if (len == 0) {
   22536:	b9a1      	cbnz	r1, 22562 <ble_ll_hci_info_params_cmd_proc+0x4e>
            rc = ble_ll_hci_rd_local_supp_cmd(rspbuf, rsplen);
   22538:	9902      	ldr	r1, [sp, #8]
   2253a:	4618      	mov	r0, r3
   2253c:	f7ff ffc4 	bl	224c8 <ble_ll_hci_rd_local_supp_cmd>
   22540:	e00c      	b.n	2255c <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_FEAT:
        if (len == 0) {
   22542:	b981      	cbnz	r1, 22566 <ble_ll_hci_info_params_cmd_proc+0x52>
            rc = ble_ll_hci_rd_local_supp_feat(rspbuf, rsplen);
   22544:	9902      	ldr	r1, [sp, #8]
   22546:	4618      	mov	r0, r3
   22548:	f7ff fedf 	bl	2230a <ble_ll_hci_rd_local_supp_feat>
   2254c:	e006      	b.n	2255c <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    case BLE_HCI_OCF_IP_RD_BD_ADDR:
        if (len == 0) {
   2254e:	b961      	cbnz	r1, 2256a <ble_ll_hci_info_params_cmd_proc+0x56>
            rc = ble_ll_hci_rd_bd_addr(rspbuf, rsplen);
   22550:	9902      	ldr	r1, [sp, #8]
   22552:	4618      	mov	r0, r3
   22554:	f7ff fee8 	bl	22328 <ble_ll_hci_rd_bd_addr>
   22558:	e000      	b.n	2255c <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   2255a:	2001      	movs	r0, #1
        break;
    }

    return rc;
}
   2255c:	bd08      	pop	{r3, pc}
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2255e:	2012      	movs	r0, #18
   22560:	e7fc      	b.n	2255c <ble_ll_hci_info_params_cmd_proc+0x48>
   22562:	2012      	movs	r0, #18
   22564:	e7fa      	b.n	2255c <ble_ll_hci_info_params_cmd_proc+0x48>
   22566:	2012      	movs	r0, #18
   22568:	e7f8      	b.n	2255c <ble_ll_hci_info_params_cmd_proc+0x48>
   2256a:	2012      	movs	r0, #18
    return rc;
   2256c:	e7f6      	b.n	2255c <ble_ll_hci_info_params_cmd_proc+0x48>

0002256e <ble_ll_hci_status_params_cmd_proc>:
                                  uint16_t ocf, uint8_t *rspbuf,
                                  uint8_t *rsplen)
{
    int rc;

    switch (ocf) {
   2256e:	2a05      	cmp	r2, #5
   22570:	d001      	beq.n	22576 <ble_ll_hci_status_params_cmd_proc+0x8>
    case BLE_HCI_OCF_RD_RSSI:
        rc = ble_ll_conn_hci_rd_rssi(cmdbuf, len, rspbuf, rsplen);
        break;
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   22572:	2001      	movs	r0, #1
        break;
    }

    return rc;
}
   22574:	4770      	bx	lr
{
   22576:	b508      	push	{r3, lr}
   22578:	461a      	mov	r2, r3
        rc = ble_ll_conn_hci_rd_rssi(cmdbuf, len, rspbuf, rsplen);
   2257a:	9b02      	ldr	r3, [sp, #8]
   2257c:	f7fe fc51 	bl	20e22 <ble_ll_conn_hci_rd_rssi>
}
   22580:	bd08      	pop	{r3, pc}

00022582 <ble_ll_hci_le_read_local_features>:
{
   22582:	b538      	push	{r3, r4, r5, lr}
   22584:	4604      	mov	r4, r0
   22586:	460d      	mov	r5, r1
    rsp->features = htole64(ble_ll_read_supp_features());
   22588:	f7fa fe8e 	bl	1d2a8 <ble_ll_read_supp_features>
   2258c:	6020      	str	r0, [r4, #0]
   2258e:	6061      	str	r1, [r4, #4]
    *rsplen = sizeof(*rsp);
   22590:	2308      	movs	r3, #8
   22592:	702b      	strb	r3, [r5, #0]
}
   22594:	2000      	movs	r0, #0
   22596:	bd38      	pop	{r3, r4, r5, pc}

00022598 <ble_ll_hci_le_encrypt>:
{
   22598:	b570      	push	{r4, r5, r6, lr}
   2259a:	b08c      	sub	sp, #48	; 0x30
   2259c:	4604      	mov	r4, r0
   2259e:	4616      	mov	r6, r2
   225a0:	461d      	mov	r5, r3
    swap_buf(ecb.key, cmd->key, BLE_ENC_BLOCK_SIZE);
   225a2:	2210      	movs	r2, #16
   225a4:	4601      	mov	r1, r0
   225a6:	4668      	mov	r0, sp
   225a8:	f7f9 fb9d 	bl	1bce6 <swap_buf>
    swap_buf(ecb.plain_text, cmd->data, BLE_ENC_BLOCK_SIZE);
   225ac:	2210      	movs	r2, #16
   225ae:	18a1      	adds	r1, r4, r2
   225b0:	eb0d 0002 	add.w	r0, sp, r2
   225b4:	f7f9 fb97 	bl	1bce6 <swap_buf>
    rc = ble_hw_encrypt_block(&ecb);
   225b8:	4668      	mov	r0, sp
   225ba:	f003 f9bf 	bl	2593c <ble_hw_encrypt_block>
    if (!rc) {
   225be:	b950      	cbnz	r0, 225d6 <ble_ll_hci_le_encrypt+0x3e>
   225c0:	4604      	mov	r4, r0
        swap_buf(rsp->data, ecb.cipher_text, BLE_ENC_BLOCK_SIZE);
   225c2:	2210      	movs	r2, #16
   225c4:	a908      	add	r1, sp, #32
   225c6:	4630      	mov	r0, r6
   225c8:	f7f9 fb8d 	bl	1bce6 <swap_buf>
        *rsplen = sizeof(*rsp);
   225cc:	2310      	movs	r3, #16
   225ce:	702b      	strb	r3, [r5, #0]
}
   225d0:	4620      	mov	r0, r4
   225d2:	b00c      	add	sp, #48	; 0x30
   225d4:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_ERR_CTLR_BUSY;
   225d6:	243a      	movs	r4, #58	; 0x3a
    return rc;
   225d8:	e7fa      	b.n	225d0 <ble_ll_hci_le_encrypt+0x38>

000225da <ble_ll_hci_le_rand>:
{
   225da:	b510      	push	{r4, lr}
   225dc:	460c      	mov	r4, r1
    ble_ll_rand_data_get((uint8_t *)&rsp->random_number,
   225de:	2108      	movs	r1, #8
   225e0:	f000 fca0 	bl	22f24 <ble_ll_rand_data_get>
    *rsplen = sizeof(*rsp);
   225e4:	2308      	movs	r3, #8
   225e6:	7023      	strb	r3, [r4, #0]
}
   225e8:	2000      	movs	r0, #0
   225ea:	bd10      	pop	{r4, pc}

000225ec <ble_ll_hci_le_read_supp_states>:
{
   225ec:	b538      	push	{r3, r4, r5, lr}
   225ee:	4604      	mov	r4, r0
   225f0:	460d      	mov	r5, r1
    rsp->states = htole64(ble_ll_read_supp_states());
   225f2:	f7fa fe53 	bl	1d29c <ble_ll_read_supp_states>
   225f6:	6020      	str	r0, [r4, #0]
   225f8:	6061      	str	r1, [r4, #4]
    *rsplen = sizeof(*rsp);
   225fa:	2308      	movs	r3, #8
   225fc:	702b      	strb	r3, [r5, #0]
}
   225fe:	2000      	movs	r0, #0
   22600:	bd38      	pop	{r3, r4, r5, pc}
	...

00022604 <ble_ll_hci_le_wr_sugg_data_len>:
    if (len != sizeof(*cmd)) {
   22604:	2904      	cmp	r1, #4
   22606:	d001      	beq.n	2260c <ble_ll_hci_le_wr_sugg_data_len+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22608:	2012      	movs	r0, #18
}
   2260a:	4770      	bx	lr
{
   2260c:	b570      	push	{r4, r5, r6, lr}
    tx_oct = le16toh(cmd->max_tx_octets);
   2260e:	8804      	ldrh	r4, [r0, #0]
    tx_time = le16toh(cmd->max_tx_time);
   22610:	8845      	ldrh	r5, [r0, #2]
   22612:	b2ae      	uxth	r6, r5
    if (ble_ll_chk_txrx_octets(tx_oct) && ble_ll_chk_txrx_time(tx_time)) {
   22614:	4620      	mov	r0, r4
   22616:	f7fa fc50 	bl	1ceba <ble_ll_chk_txrx_octets>
   2261a:	b1c8      	cbz	r0, 22650 <ble_ll_hci_le_wr_sugg_data_len+0x4c>
   2261c:	4630      	mov	r0, r6
   2261e:	f7fa fc54 	bl	1ceca <ble_ll_chk_txrx_time>
   22622:	b1b8      	cbz	r0, 22654 <ble_ll_hci_le_wr_sugg_data_len+0x50>
        g_ble_ll_conn_params.sugg_tx_octets = (uint8_t)tx_oct;
   22624:	4b0c      	ldr	r3, [pc, #48]	; (22658 <ble_ll_hci_le_wr_sugg_data_len+0x54>)
   22626:	725c      	strb	r4, [r3, #9]
        g_ble_ll_conn_params.sugg_tx_time = tx_time;
   22628:	815d      	strh	r5, [r3, #10]
                        min(tx_oct, g_ble_ll_conn_params.supp_max_tx_octets);
   2262a:	799a      	ldrb	r2, [r3, #6]
   2262c:	4294      	cmp	r4, r2
   2262e:	bf28      	it	cs
   22630:	4614      	movcs	r4, r2
        g_ble_ll_conn_params.conn_init_max_tx_octets =
   22632:	721c      	strb	r4, [r3, #8]
                        min(tx_time, g_ble_ll_conn_params.supp_max_tx_time);
   22634:	8a58      	ldrh	r0, [r3, #18]
        g_ble_ll_conn_params.conn_init_max_tx_time =
   22636:	42b0      	cmp	r0, r6
   22638:	bf28      	it	cs
   2263a:	4630      	movcs	r0, r6
   2263c:	8198      	strh	r0, [r3, #12]
                                min(BLE_LL_CONN_SUPP_TIME_MAX_UNCODED,
   2263e:	f640 0248 	movw	r2, #2120	; 0x848
   22642:	4282      	cmp	r2, r0
   22644:	bf28      	it	cs
   22646:	4602      	movcs	r2, r0
        g_ble_ll_conn_params.conn_init_max_tx_time_uncoded =
   22648:	81da      	strh	r2, [r3, #14]
        g_ble_ll_conn_params.conn_init_max_tx_time_coded =
   2264a:	8218      	strh	r0, [r3, #16]
        rc = BLE_ERR_SUCCESS;
   2264c:	2000      	movs	r0, #0
   2264e:	e000      	b.n	22652 <ble_ll_hci_le_wr_sugg_data_len+0x4e>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22650:	2012      	movs	r0, #18
}
   22652:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22654:	2012      	movs	r0, #18
   22656:	e7fc      	b.n	22652 <ble_ll_hci_le_wr_sugg_data_len+0x4e>
   22658:	200087fc 	.word	0x200087fc

0002265c <ble_ll_read_tx_power>:
{
   2265c:	b538      	push	{r3, r4, r5, lr}
   2265e:	4604      	mov	r4, r0
   22660:	460d      	mov	r5, r1
    rsp->min_tx_power = ble_phy_txpower_round(-127);
   22662:	f06f 007e 	mvn.w	r0, #126	; 0x7e
   22666:	f003 fd6b 	bl	26140 <ble_phy_txpower_round>
   2266a:	7020      	strb	r0, [r4, #0]
    rsp->max_tx_power = ble_phy_txpower_round(126);
   2266c:	207e      	movs	r0, #126	; 0x7e
   2266e:	f003 fd67 	bl	26140 <ble_phy_txpower_round>
   22672:	7060      	strb	r0, [r4, #1]
    *rsplen = sizeof(*rsp);
   22674:	2302      	movs	r3, #2
   22676:	702b      	strb	r3, [r5, #0]
}
   22678:	2000      	movs	r0, #0
   2267a:	bd38      	pop	{r3, r4, r5, pc}

0002267c <ble_ll_write_rf_path_compensation>:
    if (len != sizeof(*cmd)) {
   2267c:	2904      	cmp	r1, #4
   2267e:	d121      	bne.n	226c4 <ble_ll_write_rf_path_compensation+0x48>
{
   22680:	b510      	push	{r4, lr}
    tx = le16toh(cmd->tx_path_compensation);
   22682:	f9b0 3000 	ldrsh.w	r3, [r0]
   22686:	461c      	mov	r4, r3
    rx = le16toh(cmd->rx_path_compensation);
   22688:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
   2268c:	b20a      	sxth	r2, r1
    if ((tx < -1280) || (tx > 1280) || (rx < -1280) || (rx > 1280)) {
   2268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
   22692:	b29b      	uxth	r3, r3
   22694:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
   22698:	d816      	bhi.n	226c8 <ble_ll_write_rf_path_compensation+0x4c>
   2269a:	f512 6fa0 	cmn.w	r2, #1280	; 0x500
   2269e:	db15      	blt.n	226cc <ble_ll_write_rf_path_compensation+0x50>
   226a0:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
   226a4:	dc14      	bgt.n	226d0 <ble_ll_write_rf_path_compensation+0x54>
    tx_path_pwr_compensation = tx;
   226a6:	4b0b      	ldr	r3, [pc, #44]	; (226d4 <ble_ll_write_rf_path_compensation+0x58>)
   226a8:	801c      	strh	r4, [r3, #0]
    rx_path_pwr_compensation = rx;
   226aa:	4b0b      	ldr	r3, [pc, #44]	; (226d8 <ble_ll_write_rf_path_compensation+0x5c>)
   226ac:	8019      	strh	r1, [r3, #0]
    ble_phy_set_rx_pwr_compensation(rx_path_pwr_compensation / 10);
   226ae:	480b      	ldr	r0, [pc, #44]	; (226dc <ble_ll_write_rf_path_compensation+0x60>)
   226b0:	fb80 3002 	smull	r3, r0, r0, r2
   226b4:	17d2      	asrs	r2, r2, #31
   226b6:	ebc2 00a0 	rsb	r0, r2, r0, asr #2
   226ba:	b240      	sxtb	r0, r0
   226bc:	f003 fd76 	bl	261ac <ble_phy_set_rx_pwr_compensation>
    return BLE_ERR_SUCCESS;
   226c0:	2000      	movs	r0, #0
   226c2:	e002      	b.n	226ca <ble_ll_write_rf_path_compensation+0x4e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   226c4:	2012      	movs	r0, #18
}
   226c6:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   226c8:	2012      	movs	r0, #18
}
   226ca:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   226cc:	2012      	movs	r0, #18
   226ce:	e7fc      	b.n	226ca <ble_ll_write_rf_path_compensation+0x4e>
   226d0:	2012      	movs	r0, #18
   226d2:	e7fa      	b.n	226ca <ble_ll_write_rf_path_compensation+0x4e>
   226d4:	200089ea 	.word	0x200089ea
   226d8:	200089e8 	.word	0x200089e8
   226dc:	66666667 	.word	0x66666667

000226e0 <ble_ll_hci_le_cmd_proc>:
{
   226e0:	b538      	push	{r3, r4, r5, lr}
   226e2:	4615      	mov	r5, r2
   226e4:	461a      	mov	r2, r3
    switch (ocf) {
   226e6:	1e6b      	subs	r3, r5, #1
   226e8:	2b4d      	cmp	r3, #77	; 0x4d
   226ea:	f200 8152 	bhi.w	22992 <ble_ll_hci_le_cmd_proc+0x2b2>
   226ee:	e8df f013 	tbh	[pc, r3, lsl #1]
   226f2:	004e      	.short	0x004e
   226f4:	0064005b 	.word	0x0064005b
   226f8:	006d0150 	.word	0x006d0150
   226fc:	00760072 	.word	0x00760072
   22700:	0083007f 	.word	0x0083007f
   22704:	008b0087 	.word	0x008b0087
   22708:	0093008f 	.word	0x0093008f
   2270c:	009f0097 	.word	0x009f0097
   22710:	00af00a8 	.word	0x00af00a8
   22714:	00b700b3 	.word	0x00b700b3
   22718:	00bf00bb 	.word	0x00bf00bb
   2271c:	00c800c4 	.word	0x00c800c4
   22720:	00d600cd 	.word	0x00d600cd
   22724:	00df00da 	.word	0x00df00da
   22728:	015000e4 	.word	0x015000e4
   2272c:	01500150 	.word	0x01500150
   22730:	00f200ed 	.word	0x00f200ed
   22734:	00fc00f7 	.word	0x00fc00f7
   22738:	01500105 	.word	0x01500105
   2273c:	01090150 	.word	0x01090150
   22740:	0111010d 	.word	0x0111010d
   22744:	01210118 	.word	0x01210118
   22748:	012b0126 	.word	0x012b0126
   2274c:	0133012f 	.word	0x0133012f
   22750:	01500150 	.word	0x01500150
   22754:	01500150 	.word	0x01500150
   22758:	01500150 	.word	0x01500150
   2275c:	01500150 	.word	0x01500150
   22760:	01500150 	.word	0x01500150
   22764:	01500150 	.word	0x01500150
   22768:	01500150 	.word	0x01500150
   2276c:	01500150 	.word	0x01500150
   22770:	01500150 	.word	0x01500150
   22774:	01500150 	.word	0x01500150
   22778:	01500150 	.word	0x01500150
   2277c:	01500150 	.word	0x01500150
   22780:	01500150 	.word	0x01500150
   22784:	013c0150 	.word	0x013c0150
   22788:	01480142 	.word	0x01480142
   2278c:	014c      	.short	0x014c
        rc = ble_ll_hci_set_le_event_mask(cmdbuf, len);
   2278e:	f7ff fdd7 	bl	22340 <ble_ll_hci_set_le_event_mask>
   22792:	4604      	mov	r4, r0
    if (ble_ll_hci_le_cmd_send_cmd_status(ocf) || rc == BLE_ERR_UNKNOWN_HCI_CMD) {
   22794:	4628      	mov	r0, r5
   22796:	f7ff fe09 	bl	223ac <ble_ll_hci_le_cmd_send_cmd_status>
   2279a:	b908      	cbnz	r0, 227a0 <ble_ll_hci_le_cmd_proc+0xc0>
   2279c:	2c01      	cmp	r4, #1
   2279e:	d101      	bne.n	227a4 <ble_ll_hci_le_cmd_proc+0xc4>
        rc += (BLE_ERR_MAX + 1);
   227a0:	f504 7480 	add.w	r4, r4, #256	; 0x100
}
   227a4:	4620      	mov	r0, r4
   227a6:	bd38      	pop	{r3, r4, r5, pc}
        if (len == 0) {
   227a8:	b109      	cbz	r1, 227ae <ble_ll_hci_le_cmd_proc+0xce>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   227aa:	2412      	movs	r4, #18
   227ac:	e7f2      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_read_bufsize(rspbuf, rsplen);
   227ae:	9904      	ldr	r1, [sp, #16]
   227b0:	4610      	mov	r0, r2
   227b2:	f7ff fdd3 	bl	2235c <ble_ll_hci_le_read_bufsize>
   227b6:	4604      	mov	r4, r0
   227b8:	e7ec      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   227ba:	b109      	cbz	r1, 227c0 <ble_ll_hci_le_cmd_proc+0xe0>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   227bc:	2412      	movs	r4, #18
   227be:	e7e9      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_read_local_features(rspbuf, rsplen);
   227c0:	9904      	ldr	r1, [sp, #16]
   227c2:	4610      	mov	r0, r2
   227c4:	f7ff fedd 	bl	22582 <ble_ll_hci_le_read_local_features>
   227c8:	4604      	mov	r4, r0
   227ca:	e7e3      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_set_random_addr(cmdbuf, len, false);
   227cc:	2200      	movs	r2, #0
   227ce:	f7fa fc0b 	bl	1cfe8 <ble_ll_set_random_addr>
   227d2:	4604      	mov	r4, r0
        break;
   227d4:	e7de      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_adv_set_adv_params(cmdbuf, len);
   227d6:	f7fb fd13 	bl	1e200 <ble_ll_adv_set_adv_params>
   227da:	4604      	mov	r4, r0
        break;
   227dc:	e7da      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   227de:	b109      	cbz	r1, 227e4 <ble_ll_hci_le_cmd_proc+0x104>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   227e0:	2412      	movs	r4, #18
   227e2:	e7d7      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_adv_read_txpwr(rspbuf, rsplen);
   227e4:	9904      	ldr	r1, [sp, #16]
   227e6:	4610      	mov	r0, r2
   227e8:	f7fb fd8c 	bl	1e304 <ble_ll_adv_read_txpwr>
   227ec:	4604      	mov	r4, r0
   227ee:	e7d1      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_set_adv_data(cmdbuf, len);
   227f0:	f7fb fdab 	bl	1e34a <ble_ll_hci_set_adv_data>
   227f4:	4604      	mov	r4, r0
        break;
   227f6:	e7cd      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_set_scan_rsp_data(cmdbuf, len);
   227f8:	f7fb fd97 	bl	1e32a <ble_ll_hci_set_scan_rsp_data>
   227fc:	4604      	mov	r4, r0
        break;
   227fe:	e7c9      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_adv_set_enable(cmdbuf, len);
   22800:	f7fb fd86 	bl	1e310 <ble_ll_hci_adv_set_enable>
   22804:	4604      	mov	r4, r0
        break;
   22806:	e7c5      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_scan_set_scan_params(cmdbuf, len);
   22808:	f002 f8b2 	bl	24970 <ble_ll_scan_set_scan_params>
   2280c:	4604      	mov	r4, r0
        break;
   2280e:	e7c1      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_scan_set_enable(cmdbuf, len);
   22810:	f002 f8fc 	bl	24a0c <ble_ll_hci_scan_set_enable>
   22814:	4604      	mov	r4, r0
        break;
   22816:	e7bd      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_create(cmdbuf, len);
   22818:	f7fe f8a8 	bl	2096c <ble_ll_conn_create>
   2281c:	4604      	mov	r4, r0
        break;
   2281e:	e7b9      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   22820:	b109      	cbz	r1, 22826 <ble_ll_hci_le_cmd_proc+0x146>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22822:	2412      	movs	r4, #18
   22824:	e7b6      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_conn_create_cancel(cb);
   22826:	9805      	ldr	r0, [sp, #20]
   22828:	f7fe fa6a 	bl	20d00 <ble_ll_conn_create_cancel>
   2282c:	4604      	mov	r4, r0
   2282e:	e7b1      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   22830:	b109      	cbz	r1, 22836 <ble_ll_hci_le_cmd_proc+0x156>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22832:	2412      	movs	r4, #18
   22834:	e7ae      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_whitelist_read_size(rspbuf, rsplen);
   22836:	9904      	ldr	r1, [sp, #16]
   22838:	4610      	mov	r0, r2
   2283a:	f002 ff27 	bl	2568c <ble_ll_whitelist_read_size>
   2283e:	4604      	mov	r4, r0
   22840:	e7a8      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   22842:	b109      	cbz	r1, 22848 <ble_ll_hci_le_cmd_proc+0x168>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22844:	2412      	movs	r4, #18
   22846:	e7a5      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_whitelist_clear();
   22848:	f002 ff0a 	bl	25660 <ble_ll_whitelist_clear>
   2284c:	4604      	mov	r4, r0
   2284e:	e7a1      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_whitelist_add(cmdbuf, len);
   22850:	f002 ff2a 	bl	256a8 <ble_ll_whitelist_add>
   22854:	4604      	mov	r4, r0
        break;
   22856:	e79d      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_whitelist_rmv(cmdbuf, len);
   22858:	f002 ff56 	bl	25708 <ble_ll_whitelist_rmv>
   2285c:	4604      	mov	r4, r0
        break;
   2285e:	e799      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_update(cmdbuf, len);
   22860:	f7fe f95c 	bl	20b1c <ble_ll_conn_hci_update>
   22864:	4604      	mov	r4, r0
        break;
   22866:	e795      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_set_chan_class(cmdbuf, len);
   22868:	f7fe fb1d 	bl	20ea6 <ble_ll_conn_hci_set_chan_class>
   2286c:	4604      	mov	r4, r0
        break;
   2286e:	e791      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_rd_chan_map(cmdbuf, len, rspbuf, rsplen);
   22870:	9b04      	ldr	r3, [sp, #16]
   22872:	f7fe faee 	bl	20e52 <ble_ll_conn_hci_rd_chan_map>
   22876:	4604      	mov	r4, r0
        break;
   22878:	e78c      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_read_rem_features(cmdbuf, len);
   2287a:	f7fe f91f 	bl	20abc <ble_ll_conn_hci_read_rem_features>
   2287e:	4604      	mov	r4, r0
        break;
   22880:	e788      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_le_encrypt(cmdbuf, len, rspbuf, rsplen);
   22882:	9b04      	ldr	r3, [sp, #16]
   22884:	f7ff fe88 	bl	22598 <ble_ll_hci_le_encrypt>
   22888:	4604      	mov	r4, r0
        break;
   2288a:	e783      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   2288c:	b109      	cbz	r1, 22892 <ble_ll_hci_le_cmd_proc+0x1b2>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2288e:	2412      	movs	r4, #18
   22890:	e780      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_rand(rspbuf, rsplen);
   22892:	9904      	ldr	r1, [sp, #16]
   22894:	4610      	mov	r0, r2
   22896:	f7ff fea0 	bl	225da <ble_ll_hci_le_rand>
   2289a:	4604      	mov	r4, r0
   2289c:	e77a      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_le_start_encrypt(cmdbuf, len);
   2289e:	f7fe fb52 	bl	20f46 <ble_ll_conn_hci_le_start_encrypt>
   228a2:	4604      	mov	r4, r0
        break;
   228a4:	e776      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_le_ltk_reply(cmdbuf, len, rspbuf, rsplen);
   228a6:	9b04      	ldr	r3, [sp, #16]
   228a8:	f7fe fb7d 	bl	20fa6 <ble_ll_conn_hci_le_ltk_reply>
   228ac:	4604      	mov	r4, r0
        break;
   228ae:	e771      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_le_ltk_neg_reply(cmdbuf, len, rspbuf, rsplen);
   228b0:	9b04      	ldr	r3, [sp, #16]
   228b2:	f7fe fba6 	bl	21002 <ble_ll_conn_hci_le_ltk_neg_reply>
   228b6:	4604      	mov	r4, r0
        break;
   228b8:	e76c      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   228ba:	b109      	cbz	r1, 228c0 <ble_ll_hci_le_cmd_proc+0x1e0>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   228bc:	2412      	movs	r4, #18
   228be:	e769      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_read_supp_states(rspbuf, rsplen);
   228c0:	9904      	ldr	r1, [sp, #16]
   228c2:	4610      	mov	r0, r2
   228c4:	f7ff fe92 	bl	225ec <ble_ll_hci_le_read_supp_states>
   228c8:	4604      	mov	r4, r0
   228ca:	e763      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_param_rr(cmdbuf, len, rspbuf, rsplen);
   228cc:	9b04      	ldr	r3, [sp, #16]
   228ce:	f7fe f98d 	bl	20bec <ble_ll_conn_hci_param_rr>
   228d2:	4604      	mov	r4, r0
        break;
   228d4:	e75e      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_param_nrr(cmdbuf, len, rspbuf, rsplen);
   228d6:	9b04      	ldr	r3, [sp, #16]
   228d8:	f7fe f9de 	bl	20c98 <ble_ll_conn_hci_param_nrr>
   228dc:	4604      	mov	r4, r0
        break;
   228de:	e759      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_set_data_len(cmdbuf, len, rspbuf, rsplen);
   228e0:	9b04      	ldr	r3, [sp, #16]
   228e2:	f7fe faf7 	bl	20ed4 <ble_ll_conn_hci_set_data_len>
   228e6:	4604      	mov	r4, r0
        break;
   228e8:	e754      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   228ea:	b109      	cbz	r1, 228f0 <ble_ll_hci_le_cmd_proc+0x210>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   228ec:	2412      	movs	r4, #18
   228ee:	e751      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_rd_sugg_data_len(rspbuf, rsplen);
   228f0:	9904      	ldr	r1, [sp, #16]
   228f2:	4610      	mov	r0, r2
   228f4:	f7ff fd3e 	bl	22374 <ble_ll_hci_le_rd_sugg_data_len>
   228f8:	4604      	mov	r4, r0
   228fa:	e74b      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_le_wr_sugg_data_len(cmdbuf, len);
   228fc:	f7ff fe82 	bl	22604 <ble_ll_hci_le_wr_sugg_data_len>
   22900:	4604      	mov	r4, r0
        break;
   22902:	e747      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_list_add(cmdbuf, len);
   22904:	f000 fc80 	bl	23208 <ble_ll_resolv_list_add>
   22908:	4604      	mov	r4, r0
        break;
   2290a:	e743      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_list_rmv(cmdbuf, len);
   2290c:	f000 fd12 	bl	23334 <ble_ll_resolv_list_rmv>
   22910:	4604      	mov	r4, r0
        break;
   22912:	e73f      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   22914:	b109      	cbz	r1, 2291a <ble_ll_hci_le_cmd_proc+0x23a>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22916:	2412      	movs	r4, #18
   22918:	e73c      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_resolv_list_clr();
   2291a:	f000 fc37 	bl	2318c <ble_ll_resolv_list_clr>
   2291e:	4604      	mov	r4, r0
   22920:	e738      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   22922:	b109      	cbz	r1, 22928 <ble_ll_hci_le_cmd_proc+0x248>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22924:	2412      	movs	r4, #18
   22926:	e735      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_resolv_list_read_size(rspbuf, rsplen);
   22928:	9904      	ldr	r1, [sp, #16]
   2292a:	4610      	mov	r0, r2
   2292c:	f000 fc42 	bl	231b4 <ble_ll_resolv_list_read_size>
   22930:	4604      	mov	r4, r0
   22932:	e72f      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_peer_addr_rd(cmdbuf, len, rspbuf, rsplen);
   22934:	9b04      	ldr	r3, [sp, #16]
   22936:	f000 fd61 	bl	233fc <ble_ll_resolv_peer_addr_rd>
   2293a:	4604      	mov	r4, r0
        break;
   2293c:	e72a      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_local_addr_rd(cmdbuf, len, rspbuf, rsplen);
   2293e:	9b04      	ldr	r3, [sp, #16]
   22940:	f000 fd76 	bl	23430 <ble_ll_resolv_local_addr_rd>
   22944:	4604      	mov	r4, r0
        break;
   22946:	e725      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_enable_cmd(cmdbuf, len);
   22948:	f000 fd40 	bl	233cc <ble_ll_resolv_enable_cmd>
   2294c:	4604      	mov	r4, r0
        break;
   2294e:	e721      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_set_rpa_tmo(cmdbuf, len);
   22950:	f000 fd88 	bl	23464 <ble_ll_resolv_set_rpa_tmo>
   22954:	4604      	mov	r4, r0
        break;
   22956:	e71d      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   22958:	b109      	cbz	r1, 2295e <ble_ll_hci_le_cmd_proc+0x27e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2295a:	2412      	movs	r4, #18
   2295c:	e71a      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_rd_max_data_len(rspbuf, rsplen);
   2295e:	9904      	ldr	r1, [sp, #16]
   22960:	4610      	mov	r0, r2
   22962:	f7ff fd13 	bl	2238c <ble_ll_hci_le_rd_max_data_len>
   22966:	4604      	mov	r4, r0
   22968:	e714      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_read_tx_power(rspbuf, rsplen);
   2296a:	9904      	ldr	r1, [sp, #16]
   2296c:	4610      	mov	r0, r2
   2296e:	f7ff fe75 	bl	2265c <ble_ll_read_tx_power>
   22972:	4604      	mov	r4, r0
        break;
   22974:	e70e      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_read_rf_path_compensation(rspbuf, rsplen);
   22976:	9904      	ldr	r1, [sp, #16]
   22978:	4610      	mov	r0, r2
   2297a:	f7ff fd3d 	bl	223f8 <ble_ll_read_rf_path_compensation>
   2297e:	4604      	mov	r4, r0
        break;
   22980:	e708      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_write_rf_path_compensation(cmdbuf, len);
   22982:	f7ff fe7b 	bl	2267c <ble_ll_write_rf_path_compensation>
   22986:	4604      	mov	r4, r0
        break;
   22988:	e704      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolve_set_priv_mode(cmdbuf, len);
   2298a:	f000 fd95 	bl	234b8 <ble_ll_resolve_set_priv_mode>
   2298e:	4604      	mov	r4, r0
        break;
   22990:	e700      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   22992:	2401      	movs	r4, #1
   22994:	e6fe      	b.n	22794 <ble_ll_hci_le_cmd_proc+0xb4>

00022996 <ble_ll_hci_adv_mode_ext>:
}
   22996:	2000      	movs	r0, #0
   22998:	4770      	bx	lr

0002299a <ble_ll_hci_event_send>:
{
   2299a:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(sizeof(*hci_ev) + hci_ev->length <= BLE_LL_MAX_EVT_LEN);
   2299c:	7843      	ldrb	r3, [r0, #1]
   2299e:	3302      	adds	r3, #2
   229a0:	2b46      	cmp	r3, #70	; 0x46
   229a2:	d802      	bhi.n	229aa <ble_ll_hci_event_send+0x10>
    rc = ble_hci_trans_ll_evt_tx((uint8_t *)hci_ev);
   229a4:	f7f3 fde4 	bl	16570 <ble_hci_trans_ll_evt_tx>
}
   229a8:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(sizeof(*hci_ev) + hci_ev->length <= BLE_LL_MAX_EVT_LEN);
   229aa:	f7e5 fc09 	bl	81c0 <hal_debugger_connected>
   229ae:	b100      	cbz	r0, 229b2 <ble_ll_hci_event_send+0x18>
   229b0:	be01      	bkpt	0x0001
   229b2:	2300      	movs	r3, #0
   229b4:	461a      	mov	r2, r3
   229b6:	4619      	mov	r1, r3
   229b8:	4618      	mov	r0, r3
   229ba:	f7e7 f809 	bl	99d0 <__assert_func>

000229be <ble_ll_hci_cmd_proc>:
 *
 * @param ev Pointer to os event containing a pointer to command buffer
 */
static void
ble_ll_hci_cmd_proc(struct ble_npl_event *ev)
{
   229be:	b570      	push	{r4, r5, r6, lr}
   229c0:	b084      	sub	sp, #16
    uint8_t ogf;
    uint8_t rsplen;
    struct ble_hci_cmd *cmd;
    uint16_t opcode;
    uint16_t ocf;
    ble_ll_hci_post_cmd_complete_cb post_cb = NULL;
   229c2:	2300      	movs	r3, #0
   229c4:	9302      	str	r3, [sp, #8]
    return ev->ev.ev_arg;
   229c6:	6884      	ldr	r4, [r0, #8]

    BLE_LL_DEBUG_GPIO(HCI_CMD, 1);

    /* The command buffer is the event argument */
    cmd = ble_npl_event_get_arg(ev);
    BLE_LL_ASSERT(cmd != NULL);
   229c8:	b194      	cbz	r4, 229f0 <ble_ll_hci_cmd_proc+0x32>

    /* Get the opcode from the command buffer */
    opcode = le16toh(cmd->opcode);
   229ca:	4623      	mov	r3, r4
   229cc:	f833 6b06 	ldrh.w	r6, [r3], #6
   229d0:	b2b1      	uxth	r1, r6
    ocf = BLE_HCI_OCF(opcode);
   229d2:	f3c1 0209 	ubfx	r2, r1, #0, #10
    ogf = BLE_HCI_OGF(opcode);
   229d6:	0a89      	lsrs	r1, r1, #10
     */
    hci_ev = (struct ble_hci_ev *) cmd;
    rspbuf = hci_ev->data + sizeof(*cmd_complete);

    /* Assume response length is zero */
    rsplen = 0;
   229d8:	2000      	movs	r0, #0
   229da:	f88d 000f 	strb.w	r0, [sp, #15]

    switch (ogf) {
   229de:	3901      	subs	r1, #1
   229e0:	2907      	cmp	r1, #7
   229e2:	d85c      	bhi.n	22a9e <ble_ll_hci_cmd_proc+0xe0>
   229e4:	e8df f001 	tbb	[pc, r1]
   229e8:	342b5b0e 	.word	0x342b5b0e
   229ec:	465b5b3d 	.word	0x465b5b3d
    BLE_LL_ASSERT(cmd != NULL);
   229f0:	f7e5 fbe6 	bl	81c0 <hal_debugger_connected>
   229f4:	b100      	cbz	r0, 229f8 <ble_ll_hci_cmd_proc+0x3a>
   229f6:	be01      	bkpt	0x0001
   229f8:	2300      	movs	r3, #0
   229fa:	461a      	mov	r2, r3
   229fc:	4619      	mov	r1, r3
   229fe:	4618      	mov	r0, r3
   22a00:	f7e6 ffe6 	bl	99d0 <__assert_func>
    case BLE_HCI_OGF_LINK_CTRL:
        rc = ble_ll_hci_link_ctrl_cmd_proc(cmd->data, cmd->length, ocf);
   22a04:	78a1      	ldrb	r1, [r4, #2]
   22a06:	1ce0      	adds	r0, r4, #3
   22a08:	f7ff fd28 	bl	2245c <ble_ll_hci_link_ctrl_cmd_proc>
   22a0c:	4605      	mov	r5, r0
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    /* If no response is generated, we free the buffers */
    BLE_LL_ASSERT(rc >= 0);
   22a0e:	2d00      	cmp	r5, #0
   22a10:	db3b      	blt.n	22a8a <ble_ll_hci_cmd_proc+0xcc>
    if (rc <= BLE_ERR_MAX) {
   22a12:	2dff      	cmp	r5, #255	; 0xff
   22a14:	dc45      	bgt.n	22aa2 <ble_ll_hci_cmd_proc+0xe4>
        /* Create a command complete event with status from command */
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   22a16:	230e      	movs	r3, #14
   22a18:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*cmd_complete) + rsplen;
   22a1a:	f89d 300f 	ldrb.w	r3, [sp, #15]
   22a1e:	3304      	adds	r3, #4
   22a20:	7063      	strb	r3, [r4, #1]

        cmd_complete = (void *) hci_ev->data;
        cmd_complete->num_packets = ble_ll_hci_get_num_cmd_pkts();
   22a22:	f7ff fc60 	bl	222e6 <ble_ll_hci_get_num_cmd_pkts>
   22a26:	70a0      	strb	r0, [r4, #2]
        cmd_complete->opcode = htole16(opcode);
   22a28:	f8a4 6003 	strh.w	r6, [r4, #3]
        cmd_complete->status = (uint8_t) rc;
   22a2c:	7165      	strb	r5, [r4, #5]
    } else {
        STATS_INC(ble_ll_stats, hci_cmds);
    }

    /* Send the event (events cannot be masked) */
    ble_ll_hci_event_send(hci_ev);
   22a2e:	4620      	mov	r0, r4
   22a30:	f7ff ffb3 	bl	2299a <ble_ll_hci_event_send>

    /* Call post callback if set by command handler */
    if (post_cb) {
   22a34:	9b02      	ldr	r3, [sp, #8]
   22a36:	b103      	cbz	r3, 22a3a <ble_ll_hci_cmd_proc+0x7c>
        post_cb();
   22a38:	4798      	blx	r3
    }

    BLE_LL_DEBUG_GPIO(HCI_CMD, 0);
}
   22a3a:	b004      	add	sp, #16
   22a3c:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_ll_hci_ctlr_bb_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   22a3e:	78a1      	ldrb	r1, [r4, #2]
   22a40:	f10d 000f 	add.w	r0, sp, #15
   22a44:	9000      	str	r0, [sp, #0]
   22a46:	1ce0      	adds	r0, r4, #3
   22a48:	f7ff fd19 	bl	2247e <ble_ll_hci_ctlr_bb_cmd_proc>
   22a4c:	4605      	mov	r5, r0
        break;
   22a4e:	e7de      	b.n	22a0e <ble_ll_hci_cmd_proc+0x50>
        rc = ble_ll_hci_info_params_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   22a50:	78a1      	ldrb	r1, [r4, #2]
   22a52:	f10d 000f 	add.w	r0, sp, #15
   22a56:	9000      	str	r0, [sp, #0]
   22a58:	1ce0      	adds	r0, r4, #3
   22a5a:	f7ff fd5b 	bl	22514 <ble_ll_hci_info_params_cmd_proc>
   22a5e:	4605      	mov	r5, r0
        break;
   22a60:	e7d5      	b.n	22a0e <ble_ll_hci_cmd_proc+0x50>
        rc = ble_ll_hci_status_params_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   22a62:	78a1      	ldrb	r1, [r4, #2]
   22a64:	f10d 000f 	add.w	r0, sp, #15
   22a68:	9000      	str	r0, [sp, #0]
   22a6a:	1ce0      	adds	r0, r4, #3
   22a6c:	f7ff fd7f 	bl	2256e <ble_ll_hci_status_params_cmd_proc>
   22a70:	4605      	mov	r5, r0
        break;
   22a72:	e7cc      	b.n	22a0e <ble_ll_hci_cmd_proc+0x50>
        rc = ble_ll_hci_le_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen, &post_cb);
   22a74:	78a1      	ldrb	r1, [r4, #2]
   22a76:	a802      	add	r0, sp, #8
   22a78:	9001      	str	r0, [sp, #4]
   22a7a:	f10d 000f 	add.w	r0, sp, #15
   22a7e:	9000      	str	r0, [sp, #0]
   22a80:	1ce0      	adds	r0, r4, #3
   22a82:	f7ff fe2d 	bl	226e0 <ble_ll_hci_le_cmd_proc>
   22a86:	4605      	mov	r5, r0
        break;
   22a88:	e7c1      	b.n	22a0e <ble_ll_hci_cmd_proc+0x50>
    BLE_LL_ASSERT(rc >= 0);
   22a8a:	f7e5 fb99 	bl	81c0 <hal_debugger_connected>
   22a8e:	b100      	cbz	r0, 22a92 <ble_ll_hci_cmd_proc+0xd4>
   22a90:	be01      	bkpt	0x0001
   22a92:	2300      	movs	r3, #0
   22a94:	461a      	mov	r2, r3
   22a96:	4619      	mov	r1, r3
   22a98:	4618      	mov	r0, r3
   22a9a:	f7e6 ff99 	bl	99d0 <__assert_func>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   22a9e:	2501      	movs	r5, #1
   22aa0:	e7b7      	b.n	22a12 <ble_ll_hci_cmd_proc+0x54>
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_STATUS;
   22aa2:	230f      	movs	r3, #15
   22aa4:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*cmd_status);
   22aa6:	2304      	movs	r3, #4
   22aa8:	7063      	strb	r3, [r4, #1]
        cmd_status->status = (uint8_t)rc;
   22aaa:	70a5      	strb	r5, [r4, #2]
        cmd_status->num_packets = ble_ll_hci_get_num_cmd_pkts();
   22aac:	f7ff fc1b 	bl	222e6 <ble_ll_hci_get_num_cmd_pkts>
   22ab0:	70e0      	strb	r0, [r4, #3]
        cmd_status->opcode = htole16(opcode);
   22ab2:	80a6      	strh	r6, [r4, #4]
   22ab4:	e7bb      	b.n	22a2e <ble_ll_hci_cmd_proc+0x70>

00022ab6 <ble_ll_hci_send_noop>:
{
   22ab6:	b510      	push	{r4, lr}
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22ab8:	2002      	movs	r0, #2
   22aba:	f7f3 fd9b 	bl	165f4 <ble_hci_trans_buf_alloc>
    if (hci_ev) {
   22abe:	b168      	cbz	r0, 22adc <ble_ll_hci_send_noop+0x26>
   22ac0:	4604      	mov	r4, r0
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   22ac2:	230e      	movs	r3, #14
   22ac4:	7003      	strb	r3, [r0, #0]
        hci_ev->length = sizeof(*ev);
   22ac6:	2303      	movs	r3, #3
   22ac8:	7043      	strb	r3, [r0, #1]
        ev->num_packets = ble_ll_hci_get_num_cmd_pkts();
   22aca:	f7ff fc0c 	bl	222e6 <ble_ll_hci_get_num_cmd_pkts>
   22ace:	70a0      	strb	r0, [r4, #2]
        ev->opcode = BLE_HCI_OPCODE_NOP;
   22ad0:	2300      	movs	r3, #0
   22ad2:	70e3      	strb	r3, [r4, #3]
   22ad4:	7123      	strb	r3, [r4, #4]
        ble_ll_hci_event_send(hci_ev);
   22ad6:	4620      	mov	r0, r4
   22ad8:	f7ff ff5f 	bl	2299a <ble_ll_hci_event_send>
}
   22adc:	bd10      	pop	{r4, pc}
	...

00022ae0 <ble_ll_hci_is_le_event_enabled>:
{
   22ae0:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    if (g_ble_ll_hci_event_mask & (1ull << (BLE_HCI_EVCODE_LE_META - 1))) {
   22ae4:	4b12      	ldr	r3, [pc, #72]	; (22b30 <ble_ll_hci_is_le_event_enabled+0x50>)
   22ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
   22aea:	2400      	movs	r4, #0
   22aec:	f003 5500 	and.w	r5, r3, #536870912	; 0x20000000
   22af0:	ea54 0305 	orrs.w	r3, r4, r5
   22af4:	d01a      	beq.n	22b2c <ble_ll_hci_is_le_event_enabled+0x4c>
        return g_ble_ll_hci_le_event_mask & (1ull << (subev - 1));
   22af6:	1e45      	subs	r5, r0, #1
   22af8:	2101      	movs	r1, #1
   22afa:	3821      	subs	r0, #33	; 0x21
   22afc:	f1c5 0420 	rsb	r4, r5, #32
   22b00:	fa01 fc00 	lsl.w	ip, r1, r0
   22b04:	fa21 f404 	lsr.w	r4, r1, r4
   22b08:	ea4c 0c04 	orr.w	ip, ip, r4
   22b0c:	fa01 fb05 	lsl.w	fp, r1, r5
   22b10:	4908      	ldr	r1, [pc, #32]	; (22b34 <ble_ll_hci_is_le_event_enabled+0x54>)
   22b12:	e9d1 0100 	ldrd	r0, r1, [r1]
   22b16:	ea0b 0200 	and.w	r2, fp, r0
   22b1a:	ea0c 0301 	and.w	r3, ip, r1
   22b1e:	4313      	orrs	r3, r2
   22b20:	bf14      	ite	ne
   22b22:	2001      	movne	r0, #1
   22b24:	2000      	moveq	r0, #0
}
   22b26:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   22b2a:	4770      	bx	lr
    return false;
   22b2c:	2000      	movs	r0, #0
   22b2e:	e7fa      	b.n	22b26 <ble_ll_hci_is_le_event_enabled+0x46>
   22b30:	200089d0 	.word	0x200089d0
   22b34:	200089e0 	.word	0x200089e0

00022b38 <ble_ll_hci_is_event_enabled>:
{
   22b38:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    if (evcode >= 64) {
   22b3c:	283f      	cmp	r0, #63	; 0x3f
   22b3e:	d81a      	bhi.n	22b76 <ble_ll_hci_is_event_enabled+0x3e>
    return g_ble_ll_hci_event_mask & (1ull << (evcode - 1));
   22b40:	1e45      	subs	r5, r0, #1
   22b42:	2101      	movs	r1, #1
   22b44:	3821      	subs	r0, #33	; 0x21
   22b46:	f1c5 0420 	rsb	r4, r5, #32
   22b4a:	fa01 fc00 	lsl.w	ip, r1, r0
   22b4e:	fa21 f404 	lsr.w	r4, r1, r4
   22b52:	ea4c 0c04 	orr.w	ip, ip, r4
   22b56:	fa01 fb05 	lsl.w	fp, r1, r5
   22b5a:	4914      	ldr	r1, [pc, #80]	; (22bac <ble_ll_hci_is_event_enabled+0x74>)
   22b5c:	e9d1 0100 	ldrd	r0, r1, [r1]
   22b60:	ea0b 0200 	and.w	r2, fp, r0
   22b64:	ea0c 0301 	and.w	r3, ip, r1
   22b68:	4313      	orrs	r3, r2
   22b6a:	bf14      	ite	ne
   22b6c:	2001      	movne	r0, #1
   22b6e:	2000      	moveq	r0, #0
}
   22b70:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   22b74:	4770      	bx	lr
        return g_ble_ll_hci_event_mask2 & (1ull << (evcode - 64));
   22b76:	f1a0 0540 	sub.w	r5, r0, #64	; 0x40
   22b7a:	2101      	movs	r1, #1
   22b7c:	3860      	subs	r0, #96	; 0x60
   22b7e:	f1c5 0420 	rsb	r4, r5, #32
   22b82:	fa01 fc00 	lsl.w	ip, r1, r0
   22b86:	fa21 f404 	lsr.w	r4, r1, r4
   22b8a:	ea4c 0c04 	orr.w	ip, ip, r4
   22b8e:	fa01 fb05 	lsl.w	fp, r1, r5
   22b92:	4907      	ldr	r1, [pc, #28]	; (22bb0 <ble_ll_hci_is_event_enabled+0x78>)
   22b94:	e9d1 0100 	ldrd	r0, r1, [r1]
   22b98:	ea0b 0200 	and.w	r2, fp, r0
   22b9c:	ea0c 0301 	and.w	r3, ip, r1
   22ba0:	4313      	orrs	r3, r2
   22ba2:	bf14      	ite	ne
   22ba4:	2001      	movne	r0, #1
   22ba6:	2000      	moveq	r0, #0
   22ba8:	e7e2      	b.n	22b70 <ble_ll_hci_is_event_enabled+0x38>
   22baa:	bf00      	nop
   22bac:	200089d0 	.word	0x200089d0
   22bb0:	200089d8 	.word	0x200089d8

00022bb4 <ble_ll_hci_cmd_rx>:
 * @return                      0 on success;
 *                              BLE_ERR_MEM_CAPACITY on HCI buffer exhaustion.
 */
int
ble_ll_hci_cmd_rx(uint8_t *cmdbuf, void *arg)
{
   22bb4:	b508      	push	{r3, lr}
    return ev->ev.ev_queued;
   22bb6:	4b0c      	ldr	r3, [pc, #48]	; (22be8 <ble_ll_hci_cmd_rx+0x34>)
   22bb8:	781b      	ldrb	r3, [r3, #0]
    }
#endif

    /* Get an event structure off the queue */
    ev = &g_ble_ll_hci_cmd_ev;
    if (ble_npl_event_is_queued(ev)) {
   22bba:	b99b      	cbnz	r3, 22be4 <ble_ll_hci_cmd_rx+0x30>
    assert(ev->ev.ev_queued == 0);
   22bbc:	4b0a      	ldr	r3, [pc, #40]	; (22be8 <ble_ll_hci_cmd_rx+0x34>)
   22bbe:	781b      	ldrb	r3, [r3, #0]
   22bc0:	b933      	cbnz	r3, 22bd0 <ble_ll_hci_cmd_rx+0x1c>
    ev->ev.ev_arg = arg;
   22bc2:	4909      	ldr	r1, [pc, #36]	; (22be8 <ble_ll_hci_cmd_rx+0x34>)
   22bc4:	6088      	str	r0, [r1, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   22bc6:	4809      	ldr	r0, [pc, #36]	; (22bec <ble_ll_hci_cmd_rx+0x38>)
   22bc8:	f7e7 fa4f 	bl	a06a <os_eventq_put>

    /* Fill out the event and post to Link Layer */
    ble_npl_event_set_arg(ev, cmdbuf);
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, ev);

    return 0;
   22bcc:	2000      	movs	r0, #0
}
   22bce:	bd08      	pop	{r3, pc}
    assert(ev->ev.ev_queued == 0);
   22bd0:	f7e5 faf6 	bl	81c0 <hal_debugger_connected>
   22bd4:	b100      	cbz	r0, 22bd8 <ble_ll_hci_cmd_rx+0x24>
   22bd6:	be01      	bkpt	0x0001
   22bd8:	2300      	movs	r3, #0
   22bda:	461a      	mov	r2, r3
   22bdc:	4619      	mov	r1, r3
   22bde:	4618      	mov	r0, r3
   22be0:	f7e6 fef6 	bl	99d0 <__assert_func>
        return BLE_ERR_MEM_CAPACITY;
   22be4:	2007      	movs	r0, #7
   22be6:	e7f2      	b.n	22bce <ble_ll_hci_cmd_rx+0x1a>
   22be8:	200089bc 	.word	0x200089bc
   22bec:	200084e8 	.word	0x200084e8

00022bf0 <ble_ll_hci_acl_rx>:

/* Send ACL data from host to contoller */
int
ble_ll_hci_acl_rx(struct os_mbuf *om, void *arg)
{
   22bf0:	b508      	push	{r3, lr}
    ble_ll_acl_data_in(om);
   22bf2:	f7fa fa73 	bl	1d0dc <ble_ll_acl_data_in>
    return 0;
}
   22bf6:	2000      	movs	r0, #0
   22bf8:	bd08      	pop	{r3, pc}
	...

00022bfc <ble_ll_hci_init>:
    memset(ev, 0, sizeof(*ev));
   22bfc:	4a0e      	ldr	r2, [pc, #56]	; (22c38 <ble_ll_hci_init+0x3c>)
   22bfe:	2300      	movs	r3, #0
   22c00:	6013      	str	r3, [r2, #0]
   22c02:	6093      	str	r3, [r2, #8]
   22c04:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   22c06:	490d      	ldr	r1, [pc, #52]	; (22c3c <ble_ll_hci_init+0x40>)
   22c08:	6051      	str	r1, [r2, #4]

    /* Set event callback for command processing */
    ble_npl_event_init(&g_ble_ll_hci_cmd_ev, ble_ll_hci_cmd_proc, NULL);

    /* Set defaults for LE events: Vol 2 Part E 7.8.1 */
    g_ble_ll_hci_le_event_mask = 0x1f;
   22c0a:	4a0d      	ldr	r2, [pc, #52]	; (22c40 <ble_ll_hci_init+0x44>)
   22c0c:	201f      	movs	r0, #31
   22c0e:	2100      	movs	r1, #0
   22c10:	e9c2 0100 	strd	r0, r1, [r2]

    /* Set defaults for controller/baseband events: Vol 2 Part E 7.3.1 */
    g_ble_ll_hci_event_mask = 0x1fffffffffff;
   22c14:	4a0b      	ldr	r2, [pc, #44]	; (22c44 <ble_ll_hci_init+0x48>)
   22c16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22c1a:	f641 71ff 	movw	r1, #8191	; 0x1fff
   22c1e:	e9c2 0100 	strd	r0, r1, [r2]


    /* Set page 2 to 0 */
    g_ble_ll_hci_event_mask2 = 0;
   22c22:	4a09      	ldr	r2, [pc, #36]	; (22c48 <ble_ll_hci_init+0x4c>)
   22c24:	2000      	movs	r0, #0
   22c26:	2100      	movs	r1, #0
   22c28:	e9c2 0100 	strd	r0, r1, [r2]

    /* reset RF path compensation values */
    rx_path_pwr_compensation = 0;
   22c2c:	4a07      	ldr	r2, [pc, #28]	; (22c4c <ble_ll_hci_init+0x50>)
   22c2e:	8013      	strh	r3, [r2, #0]
    tx_path_pwr_compensation = 0;
   22c30:	4a07      	ldr	r2, [pc, #28]	; (22c50 <ble_ll_hci_init+0x54>)
   22c32:	8013      	strh	r3, [r2, #0]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    /* after reset both legacy and extended advertising commands are allowed */
    hci_adv_mode = ADV_MODE_ANY;
#endif
}
   22c34:	4770      	bx	lr
   22c36:	bf00      	nop
   22c38:	200089bc 	.word	0x200089bc
   22c3c:	000229bf 	.word	0x000229bf
   22c40:	200089e0 	.word	0x200089e0
   22c44:	200089d0 	.word	0x200089d0
   22c48:	200089d8 	.word	0x200089d8
   22c4c:	200089e8 	.word	0x200089e8
   22c50:	200089ea 	.word	0x200089ea

00022c54 <ble_ll_hci_ev_datalen_chg>:
 *
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_datalen_chg(struct ble_ll_conn_sm *connsm)
{
   22c54:	b510      	push	{r4, lr}
   22c56:	4604      	mov	r4, r0
    struct ble_hci_ev_le_subev_data_len_chg *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_DATA_LEN_CHG)) {
   22c58:	2007      	movs	r0, #7
   22c5a:	f7ff ff41 	bl	22ae0 <ble_ll_hci_is_le_event_enabled>
   22c5e:	b900      	cbnz	r0, 22c62 <ble_ll_hci_ev_datalen_chg+0xe>
            ev->max_rx_time = htole16(connsm->eff_max_rx_time);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   22c60:	bd10      	pop	{r4, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22c62:	2002      	movs	r0, #2
   22c64:	f7f3 fcc6 	bl	165f4 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22c68:	2800      	cmp	r0, #0
   22c6a:	d0f9      	beq.n	22c60 <ble_ll_hci_ev_datalen_chg+0xc>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   22c6c:	223e      	movs	r2, #62	; 0x3e
   22c6e:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22c70:	220b      	movs	r2, #11
   22c72:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_DATA_LEN_CHG;
   22c74:	2207      	movs	r2, #7
   22c76:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   22c78:	88a2      	ldrh	r2, [r4, #4]
   22c7a:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->max_tx_octets = htole16(connsm->eff_max_tx_octets);
   22c7e:	7ba2      	ldrb	r2, [r4, #14]
   22c80:	f8a0 2005 	strh.w	r2, [r0, #5]
            ev->max_tx_time = htole16(connsm->eff_max_tx_time);
   22c84:	8b22      	ldrh	r2, [r4, #24]
   22c86:	f8a0 2007 	strh.w	r2, [r0, #7]
            ev->max_rx_octets = htole16(connsm->eff_max_rx_octets);
   22c8a:	7be2      	ldrb	r2, [r4, #15]
   22c8c:	f8a0 2009 	strh.w	r2, [r0, #9]
            ev->max_rx_time = htole16(connsm->eff_max_rx_time);
   22c90:	8b62      	ldrh	r2, [r4, #26]
   22c92:	f8a0 200b 	strh.w	r2, [r0, #11]
            ble_ll_hci_event_send(hci_ev);
   22c96:	f7ff fe80 	bl	2299a <ble_ll_hci_event_send>
}
   22c9a:	e7e1      	b.n	22c60 <ble_ll_hci_ev_datalen_chg+0xc>

00022c9c <ble_ll_hci_ev_rem_conn_parm_req>:
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_rem_conn_parm_req(struct ble_ll_conn_sm *connsm,
                                struct ble_ll_conn_params *cp)
{
   22c9c:	b538      	push	{r3, r4, r5, lr}
   22c9e:	4605      	mov	r5, r0
   22ca0:	460c      	mov	r4, r1
    struct ble_hci_ev_le_subev_rem_conn_param_req *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)) {
   22ca2:	2006      	movs	r0, #6
   22ca4:	f7ff ff1c 	bl	22ae0 <ble_ll_hci_is_le_event_enabled>
   22ca8:	b900      	cbnz	r0, 22cac <ble_ll_hci_ev_rem_conn_parm_req+0x10>
            ev->timeout = htole16(cp->timeout);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   22caa:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22cac:	2002      	movs	r0, #2
   22cae:	f7f3 fca1 	bl	165f4 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22cb2:	2800      	cmp	r0, #0
   22cb4:	d0f9      	beq.n	22caa <ble_ll_hci_ev_rem_conn_parm_req+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   22cb6:	223e      	movs	r2, #62	; 0x3e
   22cb8:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22cba:	220b      	movs	r2, #11
   22cbc:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ;
   22cbe:	2206      	movs	r2, #6
   22cc0:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   22cc2:	88aa      	ldrh	r2, [r5, #4]
   22cc4:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->min_interval = htole16(cp->interval_min);
   22cc8:	8822      	ldrh	r2, [r4, #0]
   22cca:	f8a0 2005 	strh.w	r2, [r0, #5]
            ev->max_interval = htole16(cp->interval_max);
   22cce:	8862      	ldrh	r2, [r4, #2]
   22cd0:	f8a0 2007 	strh.w	r2, [r0, #7]
            ev->latency = htole16(cp->latency);
   22cd4:	88a2      	ldrh	r2, [r4, #4]
   22cd6:	f8a0 2009 	strh.w	r2, [r0, #9]
            ev->timeout = htole16(cp->timeout);
   22cda:	88e2      	ldrh	r2, [r4, #6]
   22cdc:	f8a0 200b 	strh.w	r2, [r0, #11]
            ble_ll_hci_event_send(hci_ev);
   22ce0:	f7ff fe5b 	bl	2299a <ble_ll_hci_event_send>
}
   22ce4:	e7e1      	b.n	22caa <ble_ll_hci_ev_rem_conn_parm_req+0xe>

00022ce6 <ble_ll_hci_ev_conn_update>:
 * @param connsm Pointer to connection state machine
 * @param status The error code.
 */
void
ble_ll_hci_ev_conn_update(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   22ce6:	b538      	push	{r3, r4, r5, lr}
   22ce8:	4604      	mov	r4, r0
   22cea:	460d      	mov	r5, r1
    struct ble_hci_ev_le_subev_conn_upd_complete *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE)) {
   22cec:	2003      	movs	r0, #3
   22cee:	f7ff fef7 	bl	22ae0 <ble_ll_hci_is_le_event_enabled>
   22cf2:	b900      	cbnz	r0, 22cf6 <ble_ll_hci_ev_conn_update+0x10>
            ev->supervision_timeout = htole16(connsm->supervision_tmo);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   22cf4:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22cf6:	2002      	movs	r0, #2
   22cf8:	f7f3 fc7c 	bl	165f4 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22cfc:	2800      	cmp	r0, #0
   22cfe:	d0f9      	beq.n	22cf4 <ble_ll_hci_ev_conn_update+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   22d00:	223e      	movs	r2, #62	; 0x3e
   22d02:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22d04:	220a      	movs	r2, #10
   22d06:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE;
   22d08:	2203      	movs	r2, #3
   22d0a:	7082      	strb	r2, [r0, #2]
            ev->status = status;
   22d0c:	70c5      	strb	r5, [r0, #3]
            ev->conn_handle = htole16(connsm->conn_handle);
   22d0e:	88a2      	ldrh	r2, [r4, #4]
   22d10:	8082      	strh	r2, [r0, #4]
            ev->conn_itvl = htole16(connsm->conn_itvl);
   22d12:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   22d16:	80c2      	strh	r2, [r0, #6]
            ev->conn_latency = htole16(connsm->slave_latency);
   22d18:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   22d1c:	8102      	strh	r2, [r0, #8]
            ev->supervision_timeout = htole16(connsm->supervision_tmo);
   22d1e:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   22d22:	8142      	strh	r2, [r0, #10]
            ble_ll_hci_event_send(hci_ev);
   22d24:	f7ff fe39 	bl	2299a <ble_ll_hci_event_send>
}
   22d28:	e7e4      	b.n	22cf4 <ble_ll_hci_ev_conn_update+0xe>

00022d2a <ble_ll_hci_ev_encrypt_chg>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
void
ble_ll_hci_ev_encrypt_chg(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   22d2a:	b538      	push	{r3, r4, r5, lr}
   22d2c:	4604      	mov	r4, r0
   22d2e:	460d      	mov	r5, r1
    struct ble_hci_ev_enc_key_refresh *ev_key_refresh;
    struct ble_hci_ev_enrypt_chg *ev_enc_chf;
    struct ble_hci_ev *hci_ev;

    if (CONN_F_ENC_CHANGE_SENT(connsm) == 0) {
   22d30:	7883      	ldrb	r3, [r0, #2]
   22d32:	f013 0f04 	tst.w	r3, #4
   22d36:	d11c      	bne.n	22d72 <ble_ll_hci_ev_encrypt_chg+0x48>
        if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_ENCRYPT_CHG)) {
   22d38:	2008      	movs	r0, #8
   22d3a:	f7ff fefd 	bl	22b38 <ble_ll_hci_is_event_enabled>
   22d3e:	b920      	cbnz	r0, 22d4a <ble_ll_hci_ev_encrypt_chg+0x20>

                ble_ll_hci_event_send(hci_ev);
            }
        }

        CONN_F_ENC_CHANGE_SENT(connsm) = 1;
   22d40:	78a3      	ldrb	r3, [r4, #2]
   22d42:	f043 0304 	orr.w	r3, r3, #4
   22d46:	70a3      	strb	r3, [r4, #2]
            ev_key_refresh->conn_handle = htole16(connsm->conn_handle);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   22d48:	bd38      	pop	{r3, r4, r5, pc}
            hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22d4a:	2002      	movs	r0, #2
   22d4c:	f7f3 fc52 	bl	165f4 <ble_hci_trans_buf_alloc>
            if (hci_ev) {
   22d50:	2800      	cmp	r0, #0
   22d52:	d0f5      	beq.n	22d40 <ble_ll_hci_ev_encrypt_chg+0x16>
                hci_ev->opcode = BLE_HCI_EVCODE_ENCRYPT_CHG;
   22d54:	2208      	movs	r2, #8
   22d56:	7002      	strb	r2, [r0, #0]
                hci_ev->length = sizeof(*ev_enc_chf);
   22d58:	2204      	movs	r2, #4
   22d5a:	7042      	strb	r2, [r0, #1]
                ev_enc_chf->status = status;
   22d5c:	7085      	strb	r5, [r0, #2]
                ev_enc_chf->connection_handle = htole16(connsm->conn_handle);
   22d5e:	88a2      	ldrh	r2, [r4, #4]
   22d60:	f8a0 2003 	strh.w	r2, [r0, #3]
                ev_enc_chf->enabled = (status == BLE_ERR_SUCCESS) ? 0x01 : 0x00;
   22d64:	fab5 f585 	clz	r5, r5
   22d68:	096d      	lsrs	r5, r5, #5
   22d6a:	7145      	strb	r5, [r0, #5]
                ble_ll_hci_event_send(hci_ev);
   22d6c:	f7ff fe15 	bl	2299a <ble_ll_hci_event_send>
   22d70:	e7e6      	b.n	22d40 <ble_ll_hci_ev_encrypt_chg+0x16>
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_ENC_KEY_REFRESH)) {
   22d72:	2030      	movs	r0, #48	; 0x30
   22d74:	f7ff fee0 	bl	22b38 <ble_ll_hci_is_event_enabled>
   22d78:	2800      	cmp	r0, #0
   22d7a:	d0e5      	beq.n	22d48 <ble_ll_hci_ev_encrypt_chg+0x1e>
        hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22d7c:	2002      	movs	r0, #2
   22d7e:	f7f3 fc39 	bl	165f4 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22d82:	2800      	cmp	r0, #0
   22d84:	d0e0      	beq.n	22d48 <ble_ll_hci_ev_encrypt_chg+0x1e>
            hci_ev->opcode = BLE_HCI_EVCODE_ENC_KEY_REFRESH;
   22d86:	2230      	movs	r2, #48	; 0x30
   22d88:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev_key_refresh);
   22d8a:	2203      	movs	r2, #3
   22d8c:	7042      	strb	r2, [r0, #1]
            ev_key_refresh->status = status;
   22d8e:	7085      	strb	r5, [r0, #2]
            ev_key_refresh->conn_handle = htole16(connsm->conn_handle);
   22d90:	88a2      	ldrh	r2, [r4, #4]
   22d92:	f8a0 2003 	strh.w	r2, [r0, #3]
            ble_ll_hci_event_send(hci_ev);
   22d96:	f7ff fe00 	bl	2299a <ble_ll_hci_event_send>
   22d9a:	e7d5      	b.n	22d48 <ble_ll_hci_ev_encrypt_chg+0x1e>

00022d9c <ble_ll_hci_ev_ltk_req>:
 *
 * @param connsm Pointer to connection state machine
 */
int
ble_ll_hci_ev_ltk_req(struct ble_ll_conn_sm *connsm)
{
   22d9c:	b510      	push	{r4, lr}
   22d9e:	4604      	mov	r4, r0
    struct ble_hci_ev_le_subev_lt_key_req *ev;
    struct ble_hci_ev *hci_ev;
    int rc;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_LT_KEY_REQ)) {
   22da0:	2005      	movs	r0, #5
   22da2:	f7ff fe9d 	bl	22ae0 <ble_ll_hci_is_le_event_enabled>
   22da6:	b1e0      	cbz	r0, 22de2 <ble_ll_hci_ev_ltk_req+0x46>
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22da8:	2002      	movs	r0, #2
   22daa:	f7f3 fc23 	bl	165f4 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22dae:	b1d8      	cbz	r0, 22de8 <ble_ll_hci_ev_ltk_req+0x4c>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   22db0:	223e      	movs	r2, #62	; 0x3e
   22db2:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22db4:	220d      	movs	r2, #13
   22db6:	7042      	strb	r2, [r0, #1]
            ev = (void *) hci_ev->data;

            ev->subev_code = BLE_HCI_LE_SUBEV_LT_KEY_REQ;
   22db8:	2205      	movs	r2, #5
   22dba:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   22dbc:	88a2      	ldrh	r2, [r4, #4]
   22dbe:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->rand = htole64(connsm->enc_data.host_rand_num);
   22dc2:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
   22dc6:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   22dca:	f8c0 1005 	str.w	r1, [r0, #5]
   22dce:	f8c0 2009 	str.w	r2, [r0, #9]
            ev->div = htole16(connsm->enc_data.enc_div);
   22dd2:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
   22dd6:	f8a0 200d 	strh.w	r2, [r0, #13]

            ble_ll_hci_event_send(hci_ev);
   22dda:	f7ff fdde 	bl	2299a <ble_ll_hci_event_send>
        }
        rc = 0;
   22dde:	2000      	movs	r0, #0
    if (rc == 0) {
        bletest_ltk_req_reply(connsm->conn_handle);
    }
#endif
    return rc;
}
   22de0:	bd10      	pop	{r4, pc}
        rc = -1;
   22de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22de6:	e7fb      	b.n	22de0 <ble_ll_hci_ev_ltk_req+0x44>
        rc = 0;
   22de8:	2000      	movs	r0, #0
    return rc;
   22dea:	e7f9      	b.n	22de0 <ble_ll_hci_ev_ltk_req+0x44>

00022dec <ble_ll_hci_ev_rd_rem_used_feat>:
#endif

void
ble_ll_hci_ev_rd_rem_used_feat(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   22dec:	b538      	push	{r3, r4, r5, lr}
   22dee:	4604      	mov	r4, r0
   22df0:	460d      	mov	r5, r1
    struct ble_hci_ev_le_subev_rd_rem_used_feat *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT)) {
   22df2:	2004      	movs	r0, #4
   22df4:	f7ff fe74 	bl	22ae0 <ble_ll_hci_is_le_event_enabled>
   22df8:	b900      	cbnz	r0, 22dfc <ble_ll_hci_ev_rd_rem_used_feat+0x10>
            memcpy(ev->features + 1, connsm->remote_features, 7);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   22dfa:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22dfc:	2002      	movs	r0, #2
   22dfe:	f7f3 fbf9 	bl	165f4 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22e02:	4603      	mov	r3, r0
   22e04:	2800      	cmp	r0, #0
   22e06:	d0f8      	beq.n	22dfa <ble_ll_hci_ev_rd_rem_used_feat+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   22e08:	223e      	movs	r2, #62	; 0x3e
   22e0a:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22e0c:	220c      	movs	r2, #12
   22e0e:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT;
   22e10:	2204      	movs	r2, #4
   22e12:	7082      	strb	r2, [r0, #2]
            ev->status = status;
   22e14:	70c5      	strb	r5, [r0, #3]
            ev->conn_handle = htole16(connsm->conn_handle);
   22e16:	88a2      	ldrh	r2, [r4, #4]
   22e18:	8082      	strh	r2, [r0, #4]
            ev->features[0] = connsm->conn_features;
   22e1a:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
   22e1e:	7182      	strb	r2, [r0, #6]
            memcpy(ev->features + 1, connsm->remote_features, 7);
   22e20:	f854 1f40 	ldr.w	r1, [r4, #64]!
   22e24:	f8c0 1007 	str.w	r1, [r0, #7]
   22e28:	88a0      	ldrh	r0, [r4, #4]
   22e2a:	79a1      	ldrb	r1, [r4, #6]
   22e2c:	f8a3 000b 	strh.w	r0, [r3, #11]
   22e30:	7359      	strb	r1, [r3, #13]
            ble_ll_hci_event_send(hci_ev);
   22e32:	4618      	mov	r0, r3
   22e34:	f7ff fdb1 	bl	2299a <ble_ll_hci_event_send>
}
   22e38:	e7df      	b.n	22dfa <ble_ll_hci_ev_rd_rem_used_feat+0xe>

00022e3a <ble_ll_hci_ev_rd_rem_ver>:

void
ble_ll_hci_ev_rd_rem_ver(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   22e3a:	b538      	push	{r3, r4, r5, lr}
   22e3c:	4604      	mov	r4, r0
   22e3e:	460d      	mov	r5, r1
    struct ble_hci_ev_rd_rem_ver_info_cmp *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP)) {
   22e40:	200c      	movs	r0, #12
   22e42:	f7ff fe79 	bl	22b38 <ble_ll_hci_is_event_enabled>
   22e46:	b900      	cbnz	r0, 22e4a <ble_ll_hci_ev_rd_rem_ver+0x10>
            ev->subversion = htole16(connsm->sub_vers_nr);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   22e48:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22e4a:	2002      	movs	r0, #2
   22e4c:	f7f3 fbd2 	bl	165f4 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22e50:	2800      	cmp	r0, #0
   22e52:	d0f9      	beq.n	22e48 <ble_ll_hci_ev_rd_rem_ver+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP;
   22e54:	220c      	movs	r2, #12
   22e56:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22e58:	2208      	movs	r2, #8
   22e5a:	7042      	strb	r2, [r0, #1]
            ev->status = status;
   22e5c:	7085      	strb	r5, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   22e5e:	88a2      	ldrh	r2, [r4, #4]
   22e60:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->version = connsm->vers_nr;
   22e64:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
   22e68:	7142      	strb	r2, [r0, #5]
            ev->manufacturer = htole16(connsm->comp_id);
   22e6a:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
   22e6e:	80c2      	strh	r2, [r0, #6]
            ev->subversion = htole16(connsm->sub_vers_nr);
   22e70:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
   22e74:	8102      	strh	r2, [r0, #8]
            ble_ll_hci_event_send(hci_ev);
   22e76:	f7ff fd90 	bl	2299a <ble_ll_hci_event_send>
}
   22e7a:	e7e5      	b.n	22e48 <ble_ll_hci_ev_rd_rem_ver+0xe>

00022e7c <ble_ll_hci_ev_hw_err>:
 *
 * @return int 0: event masked or event sent, -1 otherwise
 */
int
ble_ll_hci_ev_hw_err(uint8_t hw_err)
{
   22e7c:	b510      	push	{r4, lr}
   22e7e:	4604      	mov	r4, r0
    struct ble_hci_ev_hw_error *ev;
    struct ble_hci_ev *hci_ev;
    int rc;

    rc = 0;
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_HW_ERROR)) {
   22e80:	2010      	movs	r0, #16
   22e82:	f7ff fe59 	bl	22b38 <ble_ll_hci_is_event_enabled>
   22e86:	b908      	cbnz	r0, 22e8c <ble_ll_hci_ev_hw_err+0x10>
    rc = 0;
   22e88:	2000      	movs	r0, #0
        } else {
            rc = -1;
        }
    }
    return rc;
}
   22e8a:	bd10      	pop	{r4, pc}
        hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22e8c:	2002      	movs	r0, #2
   22e8e:	f7f3 fbb1 	bl	165f4 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22e92:	b140      	cbz	r0, 22ea6 <ble_ll_hci_ev_hw_err+0x2a>
            hci_ev->opcode = BLE_HCI_EVCODE_HW_ERROR;
   22e94:	2210      	movs	r2, #16
   22e96:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22e98:	2201      	movs	r2, #1
   22e9a:	7042      	strb	r2, [r0, #1]
            ev->hw_code = hw_err;
   22e9c:	7084      	strb	r4, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   22e9e:	f7ff fd7c 	bl	2299a <ble_ll_hci_event_send>
    rc = 0;
   22ea2:	2000      	movs	r0, #0
   22ea4:	e7f1      	b.n	22e8a <ble_ll_hci_ev_hw_err+0xe>
            rc = -1;
   22ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   22eaa:	e7ee      	b.n	22e8a <ble_ll_hci_ev_hw_err+0xe>

00022eac <ble_ll_hci_ev_databuf_overflow>:

void
ble_ll_hci_ev_databuf_overflow(void)
{
   22eac:	b508      	push	{r3, lr}
    struct ble_hci_ev_data_buf_overflow *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DATA_BUF_OVERFLOW)) {
   22eae:	201a      	movs	r0, #26
   22eb0:	f7ff fe42 	bl	22b38 <ble_ll_hci_is_event_enabled>
   22eb4:	b900      	cbnz	r0, 22eb8 <ble_ll_hci_ev_databuf_overflow+0xc>
            ev->link_type = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   22eb6:	bd08      	pop	{r3, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22eb8:	2002      	movs	r0, #2
   22eba:	f7f3 fb9b 	bl	165f4 <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22ebe:	2800      	cmp	r0, #0
   22ec0:	d0f9      	beq.n	22eb6 <ble_ll_hci_ev_databuf_overflow+0xa>
            hci_ev->opcode = BLE_HCI_EVCODE_DATA_BUF_OVERFLOW;
   22ec2:	221a      	movs	r2, #26
   22ec4:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22ec6:	2201      	movs	r2, #1
   22ec8:	7042      	strb	r2, [r0, #1]
            ev->link_type = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;
   22eca:	7082      	strb	r2, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   22ecc:	f7ff fd65 	bl	2299a <ble_ll_hci_event_send>
}
   22ed0:	e7f1      	b.n	22eb6 <ble_ll_hci_ev_databuf_overflow+0xa>
	...

00022ed4 <ble_ll_rand_sample>:
#define IS_RNUM_BUF_END(x)  \
    (x == &g_ble_ll_rnum_buf[MYNEWT_VAL(BLE_LL_RNG_BUFSIZE) - 1])

void
ble_ll_rand_sample(uint8_t rnum)
{
   22ed4:	b538      	push	{r3, r4, r5, lr}
   22ed6:	4605      	mov	r5, r0
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   22ed8:	f7e8 fb6c 	bl	b5b4 <os_arch_save_sr>
   22edc:	4604      	mov	r4, r0
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   22ede:	4b0f      	ldr	r3, [pc, #60]	; (22f1c <ble_ll_rand_sample+0x48>)
   22ee0:	7a1b      	ldrb	r3, [r3, #8]
   22ee2:	b2db      	uxtb	r3, r3
   22ee4:	2b1f      	cmp	r3, #31
   22ee6:	d815      	bhi.n	22f14 <ble_ll_rand_sample+0x40>
        ++g_ble_ll_rnum_data.rnd_size;
   22ee8:	4a0c      	ldr	r2, [pc, #48]	; (22f1c <ble_ll_rand_sample+0x48>)
   22eea:	7a13      	ldrb	r3, [r2, #8]
   22eec:	3301      	adds	r3, #1
   22eee:	b2db      	uxtb	r3, r3
   22ef0:	7213      	strb	r3, [r2, #8]
        g_ble_ll_rnum_data.rnd_in[0] = rnum;
   22ef2:	6813      	ldr	r3, [r2, #0]
   22ef4:	701d      	strb	r5, [r3, #0]
        if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_in)) {
   22ef6:	6813      	ldr	r3, [r2, #0]
   22ef8:	4a09      	ldr	r2, [pc, #36]	; (22f20 <ble_ll_rand_sample+0x4c>)
   22efa:	4293      	cmp	r3, r2
   22efc:	d006      	beq.n	22f0c <ble_ll_rand_sample+0x38>
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
        } else {
            ++g_ble_ll_rnum_data.rnd_in;
   22efe:	3301      	adds	r3, #1
   22f00:	4a06      	ldr	r2, [pc, #24]	; (22f1c <ble_ll_rand_sample+0x48>)
   22f02:	6013      	str	r3, [r2, #0]
        }
    } else {
        /* Stop generating random numbers as we are full */
        ble_hw_rng_stop();
    }
    OS_EXIT_CRITICAL(sr);
   22f04:	4620      	mov	r0, r4
   22f06:	f7e8 fb5b 	bl	b5c0 <os_arch_restore_sr>
}
   22f0a:	bd38      	pop	{r3, r4, r5, pc}
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   22f0c:	4b03      	ldr	r3, [pc, #12]	; (22f1c <ble_ll_rand_sample+0x48>)
   22f0e:	3a1f      	subs	r2, #31
   22f10:	601a      	str	r2, [r3, #0]
   22f12:	e7f7      	b.n	22f04 <ble_ll_rand_sample+0x30>
        ble_hw_rng_stop();
   22f14:	f002 fd6c 	bl	259f0 <ble_hw_rng_stop>
   22f18:	e7f4      	b.n	22f04 <ble_ll_rand_sample+0x30>
   22f1a:	bf00      	nop
   22f1c:	20008a0c 	.word	0x20008a0c
   22f20:	20008a0b 	.word	0x20008a0b

00022f24 <ble_ll_rand_data_get>:
#endif

/* Get 'len' bytes of random data */
int
ble_ll_rand_data_get(uint8_t *buf, uint8_t len)
{
   22f24:	b538      	push	{r3, r4, r5, lr}
   22f26:	4604      	mov	r4, r0
   22f28:	460d      	mov	r5, r1
    }
#else
    uint8_t rnums;
    os_sr_t sr;

    while (len != 0) {
   22f2a:	e017      	b.n	22f5c <ble_ll_rand_data_get+0x38>
        len -= rnums;
        g_ble_ll_rnum_data.rnd_size -= rnums;
        while (rnums) {
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
                g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   22f2c:	4a1a      	ldr	r2, [pc, #104]	; (22f98 <ble_ll_rand_data_get+0x74>)
   22f2e:	391f      	subs	r1, #31
   22f30:	6051      	str	r1, [r2, #4]
            } else {
                ++g_ble_ll_rnum_data.rnd_out;
            }
            ++buf;
   22f32:	3401      	adds	r4, #1
            --rnums;
   22f34:	3b01      	subs	r3, #1
   22f36:	b2db      	uxtb	r3, r3
        while (rnums) {
   22f38:	b15b      	cbz	r3, 22f52 <ble_ll_rand_data_get+0x2e>
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
   22f3a:	4a17      	ldr	r2, [pc, #92]	; (22f98 <ble_ll_rand_data_get+0x74>)
   22f3c:	6851      	ldr	r1, [r2, #4]
   22f3e:	7809      	ldrb	r1, [r1, #0]
   22f40:	7021      	strb	r1, [r4, #0]
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
   22f42:	6852      	ldr	r2, [r2, #4]
   22f44:	4915      	ldr	r1, [pc, #84]	; (22f9c <ble_ll_rand_data_get+0x78>)
   22f46:	428a      	cmp	r2, r1
   22f48:	d0f0      	beq.n	22f2c <ble_ll_rand_data_get+0x8>
                ++g_ble_ll_rnum_data.rnd_out;
   22f4a:	3201      	adds	r2, #1
   22f4c:	4912      	ldr	r1, [pc, #72]	; (22f98 <ble_ll_rand_data_get+0x74>)
   22f4e:	604a      	str	r2, [r1, #4]
   22f50:	e7ef      	b.n	22f32 <ble_ll_rand_data_get+0xe>
        }
        OS_EXIT_CRITICAL(sr);
   22f52:	f7e8 fb35 	bl	b5c0 <os_arch_restore_sr>

        /* Make sure rng is started! */
        ble_hw_rng_start();
   22f56:	f002 fd31 	bl	259bc <ble_hw_rng_start>

        /* Wait till bytes are in buffer. */
        if (len) {
   22f5a:	b985      	cbnz	r5, 22f7e <ble_ll_rand_data_get+0x5a>
    while (len != 0) {
   22f5c:	b1d5      	cbz	r5, 22f94 <ble_ll_rand_data_get+0x70>
        OS_ENTER_CRITICAL(sr);
   22f5e:	f7e8 fb29 	bl	b5b4 <os_arch_save_sr>
        rnums = g_ble_ll_rnum_data.rnd_size;
   22f62:	4b0d      	ldr	r3, [pc, #52]	; (22f98 <ble_ll_rand_data_get+0x74>)
   22f64:	7a1b      	ldrb	r3, [r3, #8]
   22f66:	b2db      	uxtb	r3, r3
        if (rnums > len) {
   22f68:	429d      	cmp	r5, r3
   22f6a:	d200      	bcs.n	22f6e <ble_ll_rand_data_get+0x4a>
            rnums = len;
   22f6c:	462b      	mov	r3, r5
        len -= rnums;
   22f6e:	1aed      	subs	r5, r5, r3
   22f70:	b2ed      	uxtb	r5, r5
        g_ble_ll_rnum_data.rnd_size -= rnums;
   22f72:	4909      	ldr	r1, [pc, #36]	; (22f98 <ble_ll_rand_data_get+0x74>)
   22f74:	7a0a      	ldrb	r2, [r1, #8]
   22f76:	1ad2      	subs	r2, r2, r3
   22f78:	b2d2      	uxtb	r2, r2
   22f7a:	720a      	strb	r2, [r1, #8]
        while (rnums) {
   22f7c:	e7dc      	b.n	22f38 <ble_ll_rand_data_get+0x14>
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   22f7e:	4b06      	ldr	r3, [pc, #24]	; (22f98 <ble_ll_rand_data_get+0x74>)
   22f80:	7a1b      	ldrb	r3, [r3, #8]
   22f82:	b2db      	uxtb	r3, r3
   22f84:	42ab      	cmp	r3, r5
   22f86:	d2e9      	bcs.n	22f5c <ble_ll_rand_data_get+0x38>
                   (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE))) {
   22f88:	4b03      	ldr	r3, [pc, #12]	; (22f98 <ble_ll_rand_data_get+0x74>)
   22f8a:	7a1b      	ldrb	r3, [r3, #8]
   22f8c:	b2db      	uxtb	r3, r3
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   22f8e:	2b1f      	cmp	r3, #31
   22f90:	d9f5      	bls.n	22f7e <ble_ll_rand_data_get+0x5a>
   22f92:	e7e3      	b.n	22f5c <ble_ll_rand_data_get+0x38>
            }
        }
    }
#endif
    return BLE_ERR_SUCCESS;
}
   22f94:	2000      	movs	r0, #0
   22f96:	bd38      	pop	{r3, r4, r5, pc}
   22f98:	20008a0c 	.word	0x20008a0c
   22f9c:	20008a0b 	.word	0x20008a0b

00022fa0 <ble_ll_rand_prand_get>:
 *
 * @param prand
 */
void
ble_ll_rand_prand_get(uint8_t *prand)
{
   22fa0:	b510      	push	{r4, lr}
   22fa2:	4604      	mov	r4, r0
    uint16_t sum;

    while (1) {
        /* Get 24 bits of random data */
        ble_ll_rand_data_get(prand, 3);
   22fa4:	2103      	movs	r1, #3
   22fa6:	4620      	mov	r0, r4
   22fa8:	f7ff ffbc 	bl	22f24 <ble_ll_rand_data_get>

        /* Prand cannot be all zeros or 1's. */
        sum = prand[0] + prand[1] + prand[2];
   22fac:	7823      	ldrb	r3, [r4, #0]
   22fae:	7862      	ldrb	r2, [r4, #1]
   22fb0:	4413      	add	r3, r2
   22fb2:	78a2      	ldrb	r2, [r4, #2]
        if ((sum != 0) && (sum != (3 * 0xff))) {
   22fb4:	18d3      	adds	r3, r2, r3
   22fb6:	d0f5      	beq.n	22fa4 <ble_ll_rand_prand_get+0x4>
   22fb8:	f240 21fd 	movw	r1, #765	; 0x2fd
   22fbc:	428b      	cmp	r3, r1
   22fbe:	d0f1      	beq.n	22fa4 <ble_ll_rand_prand_get+0x4>
            break;
        }
    }

    /* Upper two bits must be 01 */
    prand[2] &= ~0xc0;
   22fc0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    prand[2] |= 0x40;
   22fc4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   22fc8:	70a2      	strb	r2, [r4, #2]
}
   22fca:	bd10      	pop	{r4, pc}

00022fcc <ble_ll_rand_start>:
 *
 * @return int
 */
int
ble_ll_rand_start(void)
{
   22fcc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    /* Nothing to do - this is handled by driver */
#else
    /* Start the generation of numbers if we are not full */
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   22fce:	4b05      	ldr	r3, [pc, #20]	; (22fe4 <ble_ll_rand_start+0x18>)
   22fd0:	7a1b      	ldrb	r3, [r3, #8]
   22fd2:	b2db      	uxtb	r3, r3
   22fd4:	2b1f      	cmp	r3, #31
   22fd6:	d901      	bls.n	22fdc <ble_ll_rand_start+0x10>
        ble_hw_rng_start();
    }
#endif
    return 0;
}
   22fd8:	2000      	movs	r0, #0
   22fda:	bd08      	pop	{r3, pc}
        ble_hw_rng_start();
   22fdc:	f002 fcee 	bl	259bc <ble_hw_rng_start>
   22fe0:	e7fa      	b.n	22fd8 <ble_ll_rand_start+0xc>
   22fe2:	bf00      	nop
   22fe4:	20008a0c 	.word	0x20008a0c

00022fe8 <ble_ll_rand_init>:
 *
 * @return int
 */
int
ble_ll_rand_init(void)
{
   22fe8:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    g_trng = (struct trng_dev *) os_dev_open("trng", OS_TIMEOUT_NEVER, NULL);
#else
    g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   22fea:	4b05      	ldr	r3, [pc, #20]	; (23000 <ble_ll_rand_init+0x18>)
   22fec:	4a05      	ldr	r2, [pc, #20]	; (23004 <ble_ll_rand_init+0x1c>)
   22fee:	601a      	str	r2, [r3, #0]
    g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   22ff0:	605a      	str	r2, [r3, #4]
    ble_hw_rng_init(ble_ll_rand_sample, 1);
   22ff2:	2101      	movs	r1, #1
   22ff4:	4804      	ldr	r0, [pc, #16]	; (23008 <ble_ll_rand_init+0x20>)
   22ff6:	f002 fcbd 	bl	25974 <ble_hw_rng_init>
#endif
    return 0;
}
   22ffa:	2000      	movs	r0, #0
   22ffc:	bd08      	pop	{r3, pc}
   22ffe:	bf00      	nop
   23000:	20008a0c 	.word	0x20008a0c
   23004:	200089ec 	.word	0x200089ec
   23008:	00022ed5 	.word	0x00022ed5

0002300c <ble_ll_resolv_irk_nonzero>:
{
    int i;
    int rc;

    rc = 0;
    for (i = 0; i < 16; ++i) {
   2300c:	2300      	movs	r3, #0
   2300e:	2b0f      	cmp	r3, #15
   23010:	dc04      	bgt.n	2301c <ble_ll_resolv_irk_nonzero+0x10>
        if (*irk != 0) {
   23012:	7802      	ldrb	r2, [r0, #0]
   23014:	b922      	cbnz	r2, 23020 <ble_ll_resolv_irk_nonzero+0x14>
            rc = 1;
            break;
        }
        ++irk;
   23016:	3001      	adds	r0, #1
    for (i = 0; i < 16; ++i) {
   23018:	3301      	adds	r3, #1
   2301a:	e7f8      	b.n	2300e <ble_ll_resolv_irk_nonzero+0x2>
    rc = 0;
   2301c:	2000      	movs	r0, #0
   2301e:	4770      	bx	lr
            rc = 1;
   23020:	2001      	movs	r0, #1
    }

    return rc;
}
   23022:	4770      	bx	lr

00023024 <ble_ll_is_controller_busy>:
{
   23024:	b508      	push	{r3, lr}
    return ble_ll_adv_enabled() || ble_ll_scan_enabled() ||
   23026:	f7fb fa6f 	bl	1e508 <ble_ll_adv_enabled>
   2302a:	b110      	cbz	r0, 23032 <ble_ll_is_controller_busy+0xe>
   2302c:	2301      	movs	r3, #1
}
   2302e:	4618      	mov	r0, r3
   23030:	bd08      	pop	{r3, pc}
    return ble_ll_adv_enabled() || ble_ll_scan_enabled() ||
   23032:	f001 fd37 	bl	24aa4 <ble_ll_scan_enabled>
   23036:	4603      	mov	r3, r0
   23038:	b928      	cbnz	r0, 23046 <ble_ll_is_controller_busy+0x22>
   2303a:	4a04      	ldr	r2, [pc, #16]	; (2304c <ble_ll_is_controller_busy+0x28>)
   2303c:	6812      	ldr	r2, [r2, #0]
   2303e:	2a00      	cmp	r2, #0
   23040:	d0f5      	beq.n	2302e <ble_ll_is_controller_busy+0xa>
   23042:	2301      	movs	r3, #1
   23044:	e7f3      	b.n	2302e <ble_ll_is_controller_busy+0xa>
   23046:	2301      	movs	r3, #1
   23048:	e7f1      	b.n	2302e <ble_ll_is_controller_busy+0xa>
   2304a:	bf00      	nop
   2304c:	200087ec 	.word	0x200087ec

00023050 <ble_ll_resolv_list_chg_allowed>:
{
   23050:	b508      	push	{r3, lr}
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   23052:	4b06      	ldr	r3, [pc, #24]	; (2306c <ble_ll_resolv_list_chg_allowed+0x1c>)
   23054:	781b      	ldrb	r3, [r3, #0]
   23056:	b90b      	cbnz	r3, 2305c <ble_ll_resolv_list_chg_allowed+0xc>
        rc = 1;
   23058:	2001      	movs	r0, #1
}
   2305a:	bd08      	pop	{r3, pc}
       ble_ll_is_controller_busy()) {
   2305c:	f7ff ffe2 	bl	23024 <ble_ll_is_controller_busy>
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   23060:	b908      	cbnz	r0, 23066 <ble_ll_resolv_list_chg_allowed+0x16>
        rc = 1;
   23062:	2001      	movs	r0, #1
    return rc;
   23064:	e7f9      	b.n	2305a <ble_ll_resolv_list_chg_allowed+0xa>
        rc = 0;
   23066:	2000      	movs	r0, #0
   23068:	e7f7      	b.n	2305a <ble_ll_resolv_list_chg_allowed+0xa>
   2306a:	bf00      	nop
   2306c:	20008a18 	.word	0x20008a18

00023070 <ble_ll_is_on_resolv_list>:
 * is the 'position' of the device in the resolving list (the index of the
 * element plus 1).
 */
static int
ble_ll_is_on_resolv_list(const uint8_t *addr, uint8_t addr_type)
{
   23070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23072:	4607      	mov	r7, r0
   23074:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   23076:	4c0c      	ldr	r4, [pc, #48]	; (230a8 <ble_ll_is_on_resolv_list+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   23078:	2500      	movs	r5, #0
   2307a:	e001      	b.n	23080 <ble_ll_is_on_resolv_list+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return i + 1;
        }
        ++rl;
   2307c:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   2307e:	3501      	adds	r5, #1
   23080:	4b0a      	ldr	r3, [pc, #40]	; (230ac <ble_ll_is_on_resolv_list+0x3c>)
   23082:	78db      	ldrb	r3, [r3, #3]
   23084:	42ab      	cmp	r3, r5
   23086:	dd0c      	ble.n	230a2 <ble_ll_is_on_resolv_list+0x32>
        if ((rl->rl_addr_type == addr_type) &&
   23088:	7823      	ldrb	r3, [r4, #0]
   2308a:	42b3      	cmp	r3, r6
   2308c:	d1f6      	bne.n	2307c <ble_ll_is_on_resolv_list+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   2308e:	2206      	movs	r2, #6
   23090:	4639      	mov	r1, r7
   23092:	f104 0024 	add.w	r0, r4, #36	; 0x24
   23096:	f7e8 fbd7 	bl	b848 <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   2309a:	2800      	cmp	r0, #0
   2309c:	d1ee      	bne.n	2307c <ble_ll_is_on_resolv_list+0xc>
            return i + 1;
   2309e:	1c68      	adds	r0, r5, #1
   230a0:	e000      	b.n	230a4 <ble_ll_is_on_resolv_list+0x34>
    }

    return 0;
   230a2:	2000      	movs	r0, #0
}
   230a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   230a6:	bf00      	nop
   230a8:	20008a40 	.word	0x20008a40
   230ac:	20008a18 	.word	0x20008a18

000230b0 <ble_ll_resolv_gen_priv_addr>:
{
   230b0:	b570      	push	{r4, r5, r6, lr}
   230b2:	b08c      	sub	sp, #48	; 0x30
    BLE_LL_ASSERT(rl != NULL);
   230b4:	b350      	cbz	r0, 2310c <ble_ll_resolv_gen_priv_addr+0x5c>
   230b6:	4605      	mov	r5, r0
    if (local) {
   230b8:	bb91      	cbnz	r1, 23120 <ble_ll_resolv_gen_priv_addr+0x70>
        addr = rl->rl_peer_rpa;
   230ba:	f100 0430 	add.w	r4, r0, #48	; 0x30
        irk = rl->rl_peer_irk;
   230be:	3514      	adds	r5, #20
    ble_ll_rand_prand_get(prand);
   230c0:	1ce0      	adds	r0, r4, #3
   230c2:	f7ff ff6d 	bl	22fa0 <ble_ll_rand_prand_get>
    memcpy(ecb.key, irk, 16);
   230c6:	466e      	mov	r6, sp
   230c8:	6828      	ldr	r0, [r5, #0]
   230ca:	6869      	ldr	r1, [r5, #4]
   230cc:	68aa      	ldr	r2, [r5, #8]
   230ce:	68eb      	ldr	r3, [r5, #12]
   230d0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    memset(ecb.plain_text, 0, 13);
   230d2:	2300      	movs	r3, #0
   230d4:	9304      	str	r3, [sp, #16]
   230d6:	9305      	str	r3, [sp, #20]
   230d8:	9306      	str	r3, [sp, #24]
   230da:	f88d 301c 	strb.w	r3, [sp, #28]
    ecb.plain_text[13] = prand[2];
   230de:	7963      	ldrb	r3, [r4, #5]
   230e0:	f88d 301d 	strb.w	r3, [sp, #29]
    ecb.plain_text[14] = prand[1];
   230e4:	7923      	ldrb	r3, [r4, #4]
   230e6:	f88d 301e 	strb.w	r3, [sp, #30]
    ecb.plain_text[15] = prand[0];
   230ea:	78e3      	ldrb	r3, [r4, #3]
   230ec:	f88d 301f 	strb.w	r3, [sp, #31]
    ble_hw_encrypt_block(&ecb);
   230f0:	4668      	mov	r0, sp
   230f2:	f002 fc23 	bl	2593c <ble_hw_encrypt_block>
    addr[0] = ecb.cipher_text[15];
   230f6:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   230fa:	7023      	strb	r3, [r4, #0]
    addr[1] = ecb.cipher_text[14];
   230fc:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   23100:	7063      	strb	r3, [r4, #1]
    addr[2] = ecb.cipher_text[13];
   23102:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   23106:	70a3      	strb	r3, [r4, #2]
}
   23108:	b00c      	add	sp, #48	; 0x30
   2310a:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   2310c:	f7e5 f858 	bl	81c0 <hal_debugger_connected>
   23110:	b100      	cbz	r0, 23114 <ble_ll_resolv_gen_priv_addr+0x64>
   23112:	be01      	bkpt	0x0001
   23114:	2300      	movs	r3, #0
   23116:	461a      	mov	r2, r3
   23118:	4619      	mov	r1, r3
   2311a:	4618      	mov	r0, r3
   2311c:	f7e6 fc58 	bl	99d0 <__assert_func>
        addr = rl->rl_local_rpa;
   23120:	f100 042a 	add.w	r4, r0, #42	; 0x2a
        irk = rl->rl_local_irk;
   23124:	3504      	adds	r5, #4
   23126:	e7cb      	b.n	230c0 <ble_ll_resolv_gen_priv_addr+0x10>

00023128 <ble_ll_resolv_rpa_timer_cb>:
{
   23128:	b570      	push	{r4, r5, r6, lr}
    rl = &g_ble_ll_resolv_list[0];
   2312a:	4c16      	ldr	r4, [pc, #88]	; (23184 <ble_ll_resolv_rpa_timer_cb+0x5c>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   2312c:	2500      	movs	r5, #0
   2312e:	e00c      	b.n	2314a <ble_ll_resolv_rpa_timer_cb+0x22>
            OS_ENTER_CRITICAL(sr);
   23130:	f7e8 fa40 	bl	b5b4 <os_arch_save_sr>
   23134:	4606      	mov	r6, r0
            ble_ll_resolv_gen_priv_addr(rl, 1);
   23136:	2101      	movs	r1, #1
   23138:	4620      	mov	r0, r4
   2313a:	f7ff ffb9 	bl	230b0 <ble_ll_resolv_gen_priv_addr>
            OS_EXIT_CRITICAL(sr);
   2313e:	4630      	mov	r0, r6
   23140:	f7e8 fa3e 	bl	b5c0 <os_arch_restore_sr>
   23144:	e008      	b.n	23158 <ble_ll_resolv_rpa_timer_cb+0x30>
        ++rl;
   23146:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   23148:	3501      	adds	r5, #1
   2314a:	4b0f      	ldr	r3, [pc, #60]	; (23188 <ble_ll_resolv_rpa_timer_cb+0x60>)
   2314c:	78db      	ldrb	r3, [r3, #3]
   2314e:	42ab      	cmp	r3, r5
   23150:	dd10      	ble.n	23174 <ble_ll_resolv_rpa_timer_cb+0x4c>
        if (rl->rl_has_local) {
   23152:	78a3      	ldrb	r3, [r4, #2]
   23154:	2b00      	cmp	r3, #0
   23156:	d1eb      	bne.n	23130 <ble_ll_resolv_rpa_timer_cb+0x8>
        if (rl->rl_has_peer) {
   23158:	78e3      	ldrb	r3, [r4, #3]
   2315a:	2b00      	cmp	r3, #0
   2315c:	d0f3      	beq.n	23146 <ble_ll_resolv_rpa_timer_cb+0x1e>
            OS_ENTER_CRITICAL(sr);
   2315e:	f7e8 fa29 	bl	b5b4 <os_arch_save_sr>
   23162:	4606      	mov	r6, r0
            ble_ll_resolv_gen_priv_addr(rl, 0);
   23164:	2100      	movs	r1, #0
   23166:	4620      	mov	r0, r4
   23168:	f7ff ffa2 	bl	230b0 <ble_ll_resolv_gen_priv_addr>
            OS_EXIT_CRITICAL(sr);
   2316c:	4630      	mov	r0, r6
   2316e:	f7e8 fa27 	bl	b5c0 <os_arch_restore_sr>
   23172:	e7e8      	b.n	23146 <ble_ll_resolv_rpa_timer_cb+0x1e>
    ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
   23174:	4804      	ldr	r0, [pc, #16]	; (23188 <ble_ll_resolv_rpa_timer_cb+0x60>)
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   23176:	6841      	ldr	r1, [r0, #4]
   23178:	3008      	adds	r0, #8
   2317a:	f7e6 fdfd 	bl	9d78 <os_callout_reset>
    ble_ll_adv_rpa_timeout();
   2317e:	f7fb f801 	bl	1e184 <ble_ll_adv_rpa_timeout>
}
   23182:	bd70      	pop	{r4, r5, r6, pc}
   23184:	20008a40 	.word	0x20008a40
   23188:	20008a18 	.word	0x20008a18

0002318c <ble_ll_resolv_list_clr>:
{
   2318c:	b538      	push	{r3, r4, r5, lr}
    if (!ble_ll_resolv_list_chg_allowed()) {
   2318e:	f7ff ff5f 	bl	23050 <ble_ll_resolv_list_chg_allowed>
   23192:	b158      	cbz	r0, 231ac <ble_ll_resolv_list_clr+0x20>
    g_ble_ll_resolv_data.rl_cnt_hw = 0;
   23194:	4d06      	ldr	r5, [pc, #24]	; (231b0 <ble_ll_resolv_list_clr+0x24>)
   23196:	2400      	movs	r4, #0
   23198:	70ac      	strb	r4, [r5, #2]
    g_ble_ll_resolv_data.rl_cnt = 0;
   2319a:	70ec      	strb	r4, [r5, #3]
    ble_hw_resolv_list_clear();
   2319c:	f002 fc3a 	bl	25a14 <ble_hw_resolv_list_clear>
    os_callout_stop(&co->co);
   231a0:	f105 0008 	add.w	r0, r5, #8
   231a4:	f7e6 fdca 	bl	9d3c <os_callout_stop>
    return BLE_ERR_SUCCESS;
   231a8:	4620      	mov	r0, r4
}
   231aa:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   231ac:	200c      	movs	r0, #12
   231ae:	e7fc      	b.n	231aa <ble_ll_resolv_list_clr+0x1e>
   231b0:	20008a18 	.word	0x20008a18

000231b4 <ble_ll_resolv_list_read_size>:
    rsp->size = g_ble_ll_resolv_data.rl_size;
   231b4:	4b03      	ldr	r3, [pc, #12]	; (231c4 <ble_ll_resolv_list_read_size+0x10>)
   231b6:	785b      	ldrb	r3, [r3, #1]
   231b8:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   231ba:	2301      	movs	r3, #1
   231bc:	700b      	strb	r3, [r1, #0]
}
   231be:	2000      	movs	r0, #0
   231c0:	4770      	bx	lr
   231c2:	bf00      	nop
   231c4:	20008a18 	.word	0x20008a18

000231c8 <ble_ll_resolv_list_find>:
 *
 * @return Pointer to resolving list entry or NULL if no entry found.
 */
struct ble_ll_resolv_entry *
ble_ll_resolv_list_find(const uint8_t *addr, uint8_t addr_type)
{
   231c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   231ca:	4607      	mov	r7, r0
   231cc:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   231ce:	4c0c      	ldr	r4, [pc, #48]	; (23200 <ble_ll_resolv_list_find+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   231d0:	2500      	movs	r5, #0
   231d2:	e001      	b.n	231d8 <ble_ll_resolv_list_find+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return rl;
        }
        ++rl;
   231d4:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   231d6:	3501      	adds	r5, #1
   231d8:	4b0a      	ldr	r3, [pc, #40]	; (23204 <ble_ll_resolv_list_find+0x3c>)
   231da:	78db      	ldrb	r3, [r3, #3]
   231dc:	42ab      	cmp	r3, r5
   231de:	dd0b      	ble.n	231f8 <ble_ll_resolv_list_find+0x30>
        if ((rl->rl_addr_type == addr_type) &&
   231e0:	7823      	ldrb	r3, [r4, #0]
   231e2:	42b3      	cmp	r3, r6
   231e4:	d1f6      	bne.n	231d4 <ble_ll_resolv_list_find+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   231e6:	2206      	movs	r2, #6
   231e8:	4639      	mov	r1, r7
   231ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
   231ee:	f7e8 fb2b 	bl	b848 <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   231f2:	2800      	cmp	r0, #0
   231f4:	d1ee      	bne.n	231d4 <ble_ll_resolv_list_find+0xc>
   231f6:	e000      	b.n	231fa <ble_ll_resolv_list_find+0x32>
    }

    return NULL;
   231f8:	2400      	movs	r4, #0
}
   231fa:	4620      	mov	r0, r4
   231fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   231fe:	bf00      	nop
   23200:	20008a40 	.word	0x20008a40
   23204:	20008a18 	.word	0x20008a18

00023208 <ble_ll_resolv_list_add>:
 *
 * @return int
 */
int
ble_ll_resolv_list_add(const uint8_t *cmdbuf, uint8_t len)
{
   23208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const struct ble_hci_le_add_resolv_list_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_resolv_entry *rl;
    int rc = BLE_ERR_SUCCESS;

    if (len != sizeof(*cmd)) {
   2320c:	2927      	cmp	r1, #39	; 0x27
   2320e:	d003      	beq.n	23218 <ble_ll_resolv_list_add+0x10>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   23210:	2512      	movs	r5, #18
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
                              g_ble_ll_resolv_data.rpa_tmo);
    }

    return rc;
}
   23212:	4628      	mov	r0, r5
   23214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   23218:	4604      	mov	r4, r0
    if (!ble_ll_resolv_list_chg_allowed()) {
   2321a:	f7ff ff19 	bl	23050 <ble_ll_resolv_list_chg_allowed>
   2321e:	2800      	cmp	r0, #0
   23220:	d07d      	beq.n	2331e <ble_ll_resolv_list_add+0x116>
    if (g_ble_ll_resolv_data.rl_cnt >= g_ble_ll_resolv_data.rl_size) {
   23222:	4b42      	ldr	r3, [pc, #264]	; (2332c <ble_ll_resolv_list_add+0x124>)
   23224:	78df      	ldrb	r7, [r3, #3]
   23226:	785b      	ldrb	r3, [r3, #1]
   23228:	429f      	cmp	r7, r3
   2322a:	d27a      	bcs.n	23322 <ble_ll_resolv_list_add+0x11a>
    if (ble_ll_is_on_resolv_list(cmd->peer_id_addr, cmd->peer_addr_type)) {
   2322c:	f104 0801 	add.w	r8, r4, #1
   23230:	7821      	ldrb	r1, [r4, #0]
   23232:	4640      	mov	r0, r8
   23234:	f7ff ff1c 	bl	23070 <ble_ll_is_on_resolv_list>
   23238:	4605      	mov	r5, r0
   2323a:	2800      	cmp	r0, #0
   2323c:	d173      	bne.n	23326 <ble_ll_resolv_list_add+0x11e>
    if (ble_ll_resolv_irk_nonzero(cmd->peer_irk)) {
   2323e:	f104 0907 	add.w	r9, r4, #7
   23242:	4648      	mov	r0, r9
   23244:	f7ff fee2 	bl	2300c <ble_ll_resolv_irk_nonzero>
   23248:	bb60      	cbnz	r0, 232a4 <ble_ll_resolv_list_add+0x9c>
        rl = &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt];
   2324a:	4b39      	ldr	r3, [pc, #228]	; (23330 <ble_ll_resolv_list_add+0x128>)
   2324c:	2636      	movs	r6, #54	; 0x36
   2324e:	fb06 3607 	mla	r6, r6, r7, r3
    memset (rl, 0, sizeof(*rl));
   23252:	2236      	movs	r2, #54	; 0x36
   23254:	2100      	movs	r1, #0
   23256:	4630      	mov	r0, r6
   23258:	f7e8 fb43 	bl	b8e2 <memset>
    rl->rl_addr_type = cmd->peer_addr_type;
   2325c:	7822      	ldrb	r2, [r4, #0]
   2325e:	4633      	mov	r3, r6
   23260:	f803 2b24 	strb.w	r2, [r3], #36
    memcpy(rl->rl_identity_addr, cmd->peer_id_addr, BLE_DEV_ADDR_LEN);
   23264:	f8d8 2000 	ldr.w	r2, [r8]
   23268:	6272      	str	r2, [r6, #36]	; 0x24
   2326a:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   2326e:	809a      	strh	r2, [r3, #4]
    if (ble_ll_resolv_irk_nonzero(cmd->peer_irk)) {
   23270:	4648      	mov	r0, r9
   23272:	f7ff fecb 	bl	2300c <ble_ll_resolv_irk_nonzero>
   23276:	bb28      	cbnz	r0, 232c4 <ble_ll_resolv_list_add+0xbc>
    if (ble_ll_resolv_irk_nonzero(cmd->local_irk)) {
   23278:	3417      	adds	r4, #23
   2327a:	4620      	mov	r0, r4
   2327c:	f7ff fec6 	bl	2300c <ble_ll_resolv_irk_nonzero>
   23280:	bb68      	cbnz	r0, 232de <ble_ll_resolv_list_add+0xd6>
    rl->rl_priv_mode = BLE_HCI_PRIVACY_NETWORK;
   23282:	2300      	movs	r3, #0
   23284:	7073      	strb	r3, [r6, #1]
    if (rl->rl_has_peer) {
   23286:	78f3      	ldrb	r3, [r6, #3]
   23288:	bba3      	cbnz	r3, 232f4 <ble_ll_resolv_list_add+0xec>
    g_ble_ll_resolv_data.rl_cnt++;
   2328a:	4a28      	ldr	r2, [pc, #160]	; (2332c <ble_ll_resolv_list_add+0x124>)
   2328c:	78d3      	ldrb	r3, [r2, #3]
   2328e:	3301      	adds	r3, #1
   23290:	b2db      	uxtb	r3, r3
   23292:	70d3      	strb	r3, [r2, #3]
    if (g_ble_ll_resolv_data.rl_cnt == 1) {
   23294:	2b01      	cmp	r3, #1
   23296:	d1bc      	bne.n	23212 <ble_ll_resolv_list_add+0xa>
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
   23298:	4610      	mov	r0, r2
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   2329a:	6851      	ldr	r1, [r2, #4]
   2329c:	3008      	adds	r0, #8
   2329e:	f7e6 fd6b 	bl	9d78 <os_callout_reset>
   232a2:	e7b6      	b.n	23212 <ble_ll_resolv_list_add+0xa>
        memmove(&g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw + 1],
   232a4:	4b21      	ldr	r3, [pc, #132]	; (2332c <ble_ll_resolv_list_add+0x124>)
   232a6:	789b      	ldrb	r3, [r3, #2]
   232a8:	4821      	ldr	r0, [pc, #132]	; (23330 <ble_ll_resolv_list_add+0x128>)
   232aa:	2236      	movs	r2, #54	; 0x36
   232ac:	fb03 2c02 	mla	ip, r3, r2, r2
                &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw],
   232b0:	fb02 0603 	mla	r6, r2, r3, r0
                (g_ble_ll_resolv_data.rl_cnt - g_ble_ll_resolv_data.rl_cnt_hw) *
   232b4:	1aff      	subs	r7, r7, r3
        memmove(&g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw + 1],
   232b6:	fb02 f207 	mul.w	r2, r2, r7
   232ba:	4631      	mov	r1, r6
   232bc:	4460      	add	r0, ip
   232be:	f7e8 faf4 	bl	b8aa <memmove>
   232c2:	e7c6      	b.n	23252 <ble_ll_resolv_list_add+0x4a>
        swap_buf(rl->rl_peer_irk, cmd->peer_irk, 16);
   232c4:	2210      	movs	r2, #16
   232c6:	4649      	mov	r1, r9
   232c8:	f106 0014 	add.w	r0, r6, #20
   232cc:	f7f8 fd0b 	bl	1bce6 <swap_buf>
        rl->rl_has_peer = 1;
   232d0:	2301      	movs	r3, #1
   232d2:	70f3      	strb	r3, [r6, #3]
        ble_ll_resolv_gen_priv_addr(rl, 0);
   232d4:	2100      	movs	r1, #0
   232d6:	4630      	mov	r0, r6
   232d8:	f7ff feea 	bl	230b0 <ble_ll_resolv_gen_priv_addr>
   232dc:	e7cc      	b.n	23278 <ble_ll_resolv_list_add+0x70>
        swap_buf(rl->rl_local_irk, cmd->local_irk, 16);
   232de:	2210      	movs	r2, #16
   232e0:	4621      	mov	r1, r4
   232e2:	1d30      	adds	r0, r6, #4
   232e4:	f7f8 fcff 	bl	1bce6 <swap_buf>
        rl->rl_has_local = 1;
   232e8:	2101      	movs	r1, #1
   232ea:	70b1      	strb	r1, [r6, #2]
        ble_ll_resolv_gen_priv_addr(rl, 1);
   232ec:	4630      	mov	r0, r6
   232ee:	f7ff fedf 	bl	230b0 <ble_ll_resolv_gen_priv_addr>
   232f2:	e7c6      	b.n	23282 <ble_ll_resolv_list_add+0x7a>
        rc = ble_hw_resolv_list_add(rl->rl_peer_irk);
   232f4:	f106 0014 	add.w	r0, r6, #20
   232f8:	f002 fb92 	bl	25a20 <ble_hw_resolv_list_add>
        BLE_LL_ASSERT(rc == BLE_ERR_SUCCESS);
   232fc:	4605      	mov	r5, r0
   232fe:	b920      	cbnz	r0, 2330a <ble_ll_resolv_list_add+0x102>
        g_ble_ll_resolv_data.rl_cnt_hw++;
   23300:	4a0a      	ldr	r2, [pc, #40]	; (2332c <ble_ll_resolv_list_add+0x124>)
   23302:	7893      	ldrb	r3, [r2, #2]
   23304:	3301      	adds	r3, #1
   23306:	7093      	strb	r3, [r2, #2]
   23308:	e7bf      	b.n	2328a <ble_ll_resolv_list_add+0x82>
        BLE_LL_ASSERT(rc == BLE_ERR_SUCCESS);
   2330a:	f7e4 ff59 	bl	81c0 <hal_debugger_connected>
   2330e:	b100      	cbz	r0, 23312 <ble_ll_resolv_list_add+0x10a>
   23310:	be01      	bkpt	0x0001
   23312:	2300      	movs	r3, #0
   23314:	461a      	mov	r2, r3
   23316:	4619      	mov	r1, r3
   23318:	4618      	mov	r0, r3
   2331a:	f7e6 fb59 	bl	99d0 <__assert_func>
        return BLE_ERR_CMD_DISALLOWED;
   2331e:	250c      	movs	r5, #12
   23320:	e777      	b.n	23212 <ble_ll_resolv_list_add+0xa>
        return BLE_ERR_MEM_CAPACITY;
   23322:	2507      	movs	r5, #7
   23324:	e775      	b.n	23212 <ble_ll_resolv_list_add+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   23326:	2512      	movs	r5, #18
   23328:	e773      	b.n	23212 <ble_ll_resolv_list_add+0xa>
   2332a:	bf00      	nop
   2332c:	20008a18 	.word	0x20008a18
   23330:	20008a40 	.word	0x20008a40

00023334 <ble_ll_resolv_list_rmv>:
ble_ll_resolv_list_rmv(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rmv_resolve_list_cp *cmd = (const void *) cmdbuf;
    int position;

    if (len != sizeof(*cmd)) {
   23334:	2907      	cmp	r1, #7
   23336:	d001      	beq.n	2333c <ble_ll_resolv_list_rmv+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   23338:	2012      	movs	r0, #18

        return BLE_ERR_SUCCESS;
    }

    return BLE_ERR_UNK_CONN_ID;
}
   2333a:	4770      	bx	lr
{
   2333c:	b570      	push	{r4, r5, r6, lr}
   2333e:	4604      	mov	r4, r0
    if (!ble_ll_resolv_list_chg_allowed()) {
   23340:	f7ff fe86 	bl	23050 <ble_ll_resolv_list_chg_allowed>
   23344:	2800      	cmp	r0, #0
   23346:	d037      	beq.n	233b8 <ble_ll_resolv_list_rmv+0x84>
    position = ble_ll_is_on_resolv_list(cmd->peer_id_addr, cmd->peer_addr_type);
   23348:	7821      	ldrb	r1, [r4, #0]
   2334a:	1c60      	adds	r0, r4, #1
   2334c:	f7ff fe90 	bl	23070 <ble_ll_is_on_resolv_list>
    if (position) {
   23350:	4604      	mov	r4, r0
   23352:	b398      	cbz	r0, 233bc <ble_ll_resolv_list_rmv+0x88>
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   23354:	4b1a      	ldr	r3, [pc, #104]	; (233c0 <ble_ll_resolv_list_rmv+0x8c>)
   23356:	78dd      	ldrb	r5, [r3, #3]
   23358:	4285      	cmp	r5, r0
   2335a:	db16      	blt.n	2338a <ble_ll_resolv_list_rmv+0x56>
        memmove(&g_ble_ll_resolv_list[position - 1],
   2335c:	1e46      	subs	r6, r0, #1
   2335e:	4819      	ldr	r0, [pc, #100]	; (233c4 <ble_ll_resolv_list_rmv+0x90>)
   23360:	2336      	movs	r3, #54	; 0x36
                (g_ble_ll_resolv_data.rl_cnt - position) *
   23362:	1b2a      	subs	r2, r5, r4
        memmove(&g_ble_ll_resolv_list[position - 1],
   23364:	fb03 f202 	mul.w	r2, r3, r2
   23368:	fb03 0104 	mla	r1, r3, r4, r0
   2336c:	fb03 0006 	mla	r0, r3, r6, r0
   23370:	f7e8 fa9b 	bl	b8aa <memmove>
        g_ble_ll_resolv_data.rl_cnt--;
   23374:	4b12      	ldr	r3, [pc, #72]	; (233c0 <ble_ll_resolv_list_rmv+0x8c>)
   23376:	3d01      	subs	r5, #1
   23378:	70dd      	strb	r5, [r3, #3]
        if (position <= g_ble_ll_resolv_data.rl_cnt_hw) {
   2337a:	789b      	ldrb	r3, [r3, #2]
   2337c:	42a3      	cmp	r3, r4
   2337e:	da0e      	bge.n	2339e <ble_ll_resolv_list_rmv+0x6a>
        if (g_ble_ll_resolv_data.rl_cnt == 0) {
   23380:	4b0f      	ldr	r3, [pc, #60]	; (233c0 <ble_ll_resolv_list_rmv+0x8c>)
   23382:	78db      	ldrb	r3, [r3, #3]
   23384:	b19b      	cbz	r3, 233ae <ble_ll_resolv_list_rmv+0x7a>
        return BLE_ERR_SUCCESS;
   23386:	2000      	movs	r0, #0
   23388:	e017      	b.n	233ba <ble_ll_resolv_list_rmv+0x86>
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   2338a:	f7e4 ff19 	bl	81c0 <hal_debugger_connected>
   2338e:	b100      	cbz	r0, 23392 <ble_ll_resolv_list_rmv+0x5e>
   23390:	be01      	bkpt	0x0001
   23392:	2300      	movs	r3, #0
   23394:	461a      	mov	r2, r3
   23396:	4619      	mov	r1, r3
   23398:	4618      	mov	r0, r3
   2339a:	f7e6 fb19 	bl	99d0 <__assert_func>
            ble_hw_resolv_list_rmv(position - 1);
   2339e:	4630      	mov	r0, r6
   233a0:	f002 fb5a 	bl	25a58 <ble_hw_resolv_list_rmv>
            g_ble_ll_resolv_data.rl_cnt_hw--;
   233a4:	4a06      	ldr	r2, [pc, #24]	; (233c0 <ble_ll_resolv_list_rmv+0x8c>)
   233a6:	7893      	ldrb	r3, [r2, #2]
   233a8:	3b01      	subs	r3, #1
   233aa:	7093      	strb	r3, [r2, #2]
   233ac:	e7e8      	b.n	23380 <ble_ll_resolv_list_rmv+0x4c>
    os_callout_stop(&co->co);
   233ae:	4806      	ldr	r0, [pc, #24]	; (233c8 <ble_ll_resolv_list_rmv+0x94>)
   233b0:	f7e6 fcc4 	bl	9d3c <os_callout_stop>
        return BLE_ERR_SUCCESS;
   233b4:	2000      	movs	r0, #0
   233b6:	e000      	b.n	233ba <ble_ll_resolv_list_rmv+0x86>
        return BLE_ERR_CMD_DISALLOWED;
   233b8:	200c      	movs	r0, #12
}
   233ba:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_ERR_UNK_CONN_ID;
   233bc:	2002      	movs	r0, #2
   233be:	e7fc      	b.n	233ba <ble_ll_resolv_list_rmv+0x86>
   233c0:	20008a18 	.word	0x20008a18
   233c4:	20008a40 	.word	0x20008a40
   233c8:	20008a20 	.word	0x20008a20

000233cc <ble_ll_resolv_enable_cmd>:
int
ble_ll_resolv_enable_cmd(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_addr_res_en_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   233cc:	2901      	cmp	r1, #1
   233ce:	d002      	beq.n	233d6 <ble_ll_resolv_enable_cmd+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   233d0:	2312      	movs	r3, #18
    }

    g_ble_ll_resolv_data.addr_res_enabled = cmd->enable;

    return BLE_ERR_SUCCESS;
}
   233d2:	4618      	mov	r0, r3
   233d4:	4770      	bx	lr
{
   233d6:	b510      	push	{r4, lr}
   233d8:	4604      	mov	r4, r0
    if (ble_ll_is_controller_busy()) {
   233da:	f7ff fe23 	bl	23024 <ble_ll_is_controller_busy>
   233de:	4603      	mov	r3, r0
   233e0:	b930      	cbnz	r0, 233f0 <ble_ll_resolv_enable_cmd+0x24>
    if (cmd->enable > 1) {
   233e2:	7822      	ldrb	r2, [r4, #0]
   233e4:	2a01      	cmp	r2, #1
   233e6:	d805      	bhi.n	233f4 <ble_ll_resolv_enable_cmd+0x28>
    g_ble_ll_resolv_data.addr_res_enabled = cmd->enable;
   233e8:	4903      	ldr	r1, [pc, #12]	; (233f8 <ble_ll_resolv_enable_cmd+0x2c>)
   233ea:	700a      	strb	r2, [r1, #0]
}
   233ec:	4618      	mov	r0, r3
   233ee:	bd10      	pop	{r4, pc}
        return  BLE_ERR_CMD_DISALLOWED;
   233f0:	230c      	movs	r3, #12
   233f2:	e7fb      	b.n	233ec <ble_ll_resolv_enable_cmd+0x20>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   233f4:	2312      	movs	r3, #18
   233f6:	e7f9      	b.n	233ec <ble_ll_resolv_enable_cmd+0x20>
   233f8:	20008a18 	.word	0x20008a18

000233fc <ble_ll_resolv_peer_addr_rd>:
    const struct ble_hci_le_rd_peer_recolv_addr_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_le_rd_peer_recolv_addr_rp *rsp = (void *) rspbuf;
    struct ble_ll_resolv_entry *rl;
    int rc;

    if (len != sizeof(*cmd)) {
   233fc:	2907      	cmp	r1, #7
   233fe:	d001      	beq.n	23404 <ble_ll_resolv_peer_addr_rd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   23400:	2012      	movs	r0, #18
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   23402:	4770      	bx	lr
{
   23404:	b538      	push	{r3, r4, r5, lr}
   23406:	461d      	mov	r5, r3
   23408:	4614      	mov	r4, r2
    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_addr_type);
   2340a:	7801      	ldrb	r1, [r0, #0]
   2340c:	3001      	adds	r0, #1
   2340e:	f7ff fedb 	bl	231c8 <ble_ll_resolv_list_find>
    if (rl) {
   23412:	b140      	cbz	r0, 23426 <ble_ll_resolv_peer_addr_rd+0x2a>
        memcpy(rsp->rpa, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   23414:	f850 3f30 	ldr.w	r3, [r0, #48]!
   23418:	6023      	str	r3, [r4, #0]
   2341a:	8883      	ldrh	r3, [r0, #4]
   2341c:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   2341e:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   23420:	2306      	movs	r3, #6
   23422:	702b      	strb	r3, [r5, #0]
}
   23424:	bd38      	pop	{r3, r4, r5, pc}
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
   23426:	2300      	movs	r3, #0
   23428:	6023      	str	r3, [r4, #0]
   2342a:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   2342c:	2002      	movs	r0, #2
   2342e:	e7f7      	b.n	23420 <ble_ll_resolv_peer_addr_rd+0x24>

00023430 <ble_ll_resolv_local_addr_rd>:
    const struct ble_hci_le_rd_local_recolv_addr_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_le_rd_local_recolv_addr_rp *rsp = (void *) rspbuf;
    struct ble_ll_resolv_entry *rl;
    int rc;

    if (len != sizeof(*cmd)) {
   23430:	2907      	cmp	r1, #7
   23432:	d001      	beq.n	23438 <ble_ll_resolv_local_addr_rd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   23434:	2012      	movs	r0, #18
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   23436:	4770      	bx	lr
{
   23438:	b538      	push	{r3, r4, r5, lr}
   2343a:	461d      	mov	r5, r3
   2343c:	4614      	mov	r4, r2
    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_addr_type);
   2343e:	7801      	ldrb	r1, [r0, #0]
   23440:	3001      	adds	r0, #1
   23442:	f7ff fec1 	bl	231c8 <ble_ll_resolv_list_find>
    if (rl) {
   23446:	b140      	cbz	r0, 2345a <ble_ll_resolv_local_addr_rd+0x2a>
        memcpy(rsp->rpa, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   23448:	f850 3f2a 	ldr.w	r3, [r0, #42]!
   2344c:	6023      	str	r3, [r4, #0]
   2344e:	8883      	ldrh	r3, [r0, #4]
   23450:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   23452:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   23454:	2306      	movs	r3, #6
   23456:	702b      	strb	r3, [r5, #0]
}
   23458:	bd38      	pop	{r3, r4, r5, pc}
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
   2345a:	2300      	movs	r3, #0
   2345c:	6023      	str	r3, [r4, #0]
   2345e:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   23460:	2002      	movs	r0, #2
   23462:	e7f7      	b.n	23454 <ble_ll_resolv_local_addr_rd+0x24>

00023464 <ble_ll_resolv_set_rpa_tmo>:
ble_ll_resolv_set_rpa_tmo(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_rpa_tmo_cp *cmd = (const void *)cmdbuf;
    uint16_t tmo_secs;

    if (len != sizeof(*cmd)) {
   23464:	2902      	cmp	r1, #2
   23466:	d11e      	bne.n	234a6 <ble_ll_resolv_set_rpa_tmo+0x42>
{
   23468:	b508      	push	{r3, lr}
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    tmo_secs = le16toh(cmd->rpa_timeout);
   2346a:	8802      	ldrh	r2, [r0, #0]
    if (!((tmo_secs > 0) && (tmo_secs <= 0xA1B8))) {
   2346c:	1e53      	subs	r3, r2, #1
   2346e:	b29b      	uxth	r3, r3
   23470:	f24a 11b7 	movw	r1, #41399	; 0xa1b7
   23474:	428b      	cmp	r3, r1
   23476:	d818      	bhi.n	234aa <ble_ll_resolv_set_rpa_tmo+0x46>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(tmo_secs * 1000);
   23478:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2347c:	fb01 f102 	mul.w	r1, r1, r2
   23480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23484:	2300      	movs	r3, #0
   23486:	01c8      	lsls	r0, r1, #7
   23488:	0e49      	lsrs	r1, r1, #25
   2348a:	f7e8 fe05 	bl	c098 <__aeabi_uldivmod>
   2348e:	4b08      	ldr	r3, [pc, #32]	; (234b0 <ble_ll_resolv_set_rpa_tmo+0x4c>)
   23490:	6058      	str	r0, [r3, #4]

    /* restart timer if there is something on RL */
    if (g_ble_ll_resolv_data.rl_cnt) {
   23492:	78db      	ldrb	r3, [r3, #3]
   23494:	b90b      	cbnz	r3, 2349a <ble_ll_resolv_set_rpa_tmo+0x36>
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
                              g_ble_ll_resolv_data.rpa_tmo);
    }

    return BLE_ERR_SUCCESS;
   23496:	2000      	movs	r0, #0
}
   23498:	bd08      	pop	{r3, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   2349a:	4601      	mov	r1, r0
   2349c:	4805      	ldr	r0, [pc, #20]	; (234b4 <ble_ll_resolv_set_rpa_tmo+0x50>)
   2349e:	f7e6 fc6b 	bl	9d78 <os_callout_reset>
    return BLE_ERR_SUCCESS;
   234a2:	2000      	movs	r0, #0
   234a4:	e7f8      	b.n	23498 <ble_ll_resolv_set_rpa_tmo+0x34>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   234a6:	2012      	movs	r0, #18
}
   234a8:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   234aa:	2012      	movs	r0, #18
   234ac:	e7f4      	b.n	23498 <ble_ll_resolv_set_rpa_tmo+0x34>
   234ae:	bf00      	nop
   234b0:	20008a18 	.word	0x20008a18
   234b4:	20008a20 	.word	0x20008a20

000234b8 <ble_ll_resolve_set_priv_mode>:

int
ble_ll_resolve_set_priv_mode(const uint8_t *cmdbuf, uint8_t len)
{
   234b8:	b570      	push	{r4, r5, r6, lr}
   234ba:	4605      	mov	r5, r0
   234bc:	460e      	mov	r6, r1
    const struct ble_hci_le_set_privacy_mode_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_resolv_entry *rl;

    if (ble_ll_is_controller_busy()) {
   234be:	f7ff fdb1 	bl	23024 <ble_ll_is_controller_busy>
   234c2:	b978      	cbnz	r0, 234e4 <ble_ll_resolve_set_priv_mode+0x2c>
   234c4:	4604      	mov	r4, r0
        return BLE_ERR_CMD_DISALLOWED;
    }

    if (len != sizeof(*cmd)) {
   234c6:	2e08      	cmp	r6, #8
   234c8:	d002      	beq.n	234d0 <ble_ll_resolve_set_priv_mode+0x18>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   234ca:	2412      	movs	r4, #18
    }

    rl->rl_priv_mode = cmd->mode;

    return BLE_ERR_SUCCESS;
}
   234cc:	4620      	mov	r0, r4
   234ce:	bd70      	pop	{r4, r5, r6, pc}
    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_id_addr_type);
   234d0:	7829      	ldrb	r1, [r5, #0]
   234d2:	1c68      	adds	r0, r5, #1
   234d4:	f7ff fe78 	bl	231c8 <ble_ll_resolv_list_find>
    if (!rl) {
   234d8:	b130      	cbz	r0, 234e8 <ble_ll_resolve_set_priv_mode+0x30>
    if (cmd->mode > BLE_HCI_PRIVACY_DEVICE) {
   234da:	79eb      	ldrb	r3, [r5, #7]
   234dc:	2b01      	cmp	r3, #1
   234de:	d805      	bhi.n	234ec <ble_ll_resolve_set_priv_mode+0x34>
    rl->rl_priv_mode = cmd->mode;
   234e0:	7043      	strb	r3, [r0, #1]
    return BLE_ERR_SUCCESS;
   234e2:	e7f3      	b.n	234cc <ble_ll_resolve_set_priv_mode+0x14>
        return BLE_ERR_CMD_DISALLOWED;
   234e4:	240c      	movs	r4, #12
   234e6:	e7f1      	b.n	234cc <ble_ll_resolve_set_priv_mode+0x14>
        return BLE_ERR_UNK_CONN_ID;
   234e8:	2402      	movs	r4, #2
   234ea:	e7ef      	b.n	234cc <ble_ll_resolve_set_priv_mode+0x14>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   234ec:	2412      	movs	r4, #18
   234ee:	e7ed      	b.n	234cc <ble_ll_resolve_set_priv_mode+0x14>

000234f0 <ble_ll_resolv_get_rpa_tmo>:
 */
uint32_t
ble_ll_resolv_get_rpa_tmo(void)
{
    return g_ble_ll_resolv_data.rpa_tmo;
}
   234f0:	4b01      	ldr	r3, [pc, #4]	; (234f8 <ble_ll_resolv_get_rpa_tmo+0x8>)
   234f2:	6858      	ldr	r0, [r3, #4]
   234f4:	4770      	bx	lr
   234f6:	bf00      	nop
   234f8:	20008a18 	.word	0x20008a18

000234fc <ble_ll_resolv_get_priv_addr>:

void
ble_ll_resolv_get_priv_addr(struct ble_ll_resolv_entry *rl, int local,
                            uint8_t *addr)
{
   234fc:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;

    BLE_LL_ASSERT(rl != NULL);
   234fe:	b180      	cbz	r0, 23522 <ble_ll_resolv_get_priv_addr+0x26>
   23500:	460e      	mov	r6, r1
   23502:	4615      	mov	r5, r2
   23504:	4604      	mov	r4, r0
    BLE_LL_ASSERT(addr != NULL);
   23506:	b1b2      	cbz	r2, 23536 <ble_ll_resolv_get_priv_addr+0x3a>

    OS_ENTER_CRITICAL(sr);
   23508:	f7e8 f854 	bl	b5b4 <os_arch_save_sr>
    if (local) {
   2350c:	b33e      	cbz	r6, 2355e <ble_ll_resolv_get_priv_addr+0x62>
        BLE_LL_ASSERT(rl->rl_has_local);
   2350e:	78a3      	ldrb	r3, [r4, #2]
   23510:	b1db      	cbz	r3, 2354a <ble_ll_resolv_get_priv_addr+0x4e>
        memcpy(addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   23512:	f854 3f2a 	ldr.w	r3, [r4, #42]!
   23516:	602b      	str	r3, [r5, #0]
   23518:	88a3      	ldrh	r3, [r4, #4]
   2351a:	80ab      	strh	r3, [r5, #4]
    } else {
        BLE_LL_ASSERT(rl->rl_has_peer);
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
    }

    OS_EXIT_CRITICAL(sr);
   2351c:	f7e8 f850 	bl	b5c0 <os_arch_restore_sr>
}
   23520:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   23522:	f7e4 fe4d 	bl	81c0 <hal_debugger_connected>
   23526:	b100      	cbz	r0, 2352a <ble_ll_resolv_get_priv_addr+0x2e>
   23528:	be01      	bkpt	0x0001
   2352a:	2300      	movs	r3, #0
   2352c:	461a      	mov	r2, r3
   2352e:	4619      	mov	r1, r3
   23530:	4618      	mov	r0, r3
   23532:	f7e6 fa4d 	bl	99d0 <__assert_func>
    BLE_LL_ASSERT(addr != NULL);
   23536:	f7e4 fe43 	bl	81c0 <hal_debugger_connected>
   2353a:	b100      	cbz	r0, 2353e <ble_ll_resolv_get_priv_addr+0x42>
   2353c:	be01      	bkpt	0x0001
   2353e:	2300      	movs	r3, #0
   23540:	461a      	mov	r2, r3
   23542:	4619      	mov	r1, r3
   23544:	4618      	mov	r0, r3
   23546:	f7e6 fa43 	bl	99d0 <__assert_func>
        BLE_LL_ASSERT(rl->rl_has_local);
   2354a:	f7e4 fe39 	bl	81c0 <hal_debugger_connected>
   2354e:	b100      	cbz	r0, 23552 <ble_ll_resolv_get_priv_addr+0x56>
   23550:	be01      	bkpt	0x0001
   23552:	2300      	movs	r3, #0
   23554:	461a      	mov	r2, r3
   23556:	4619      	mov	r1, r3
   23558:	4618      	mov	r0, r3
   2355a:	f7e6 fa39 	bl	99d0 <__assert_func>
        BLE_LL_ASSERT(rl->rl_has_peer);
   2355e:	78e3      	ldrb	r3, [r4, #3]
   23560:	b12b      	cbz	r3, 2356e <ble_ll_resolv_get_priv_addr+0x72>
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   23562:	f854 3f30 	ldr.w	r3, [r4, #48]!
   23566:	602b      	str	r3, [r5, #0]
   23568:	88a3      	ldrh	r3, [r4, #4]
   2356a:	80ab      	strh	r3, [r5, #4]
   2356c:	e7d6      	b.n	2351c <ble_ll_resolv_get_priv_addr+0x20>
        BLE_LL_ASSERT(rl->rl_has_peer);
   2356e:	f7e4 fe27 	bl	81c0 <hal_debugger_connected>
   23572:	b100      	cbz	r0, 23576 <ble_ll_resolv_get_priv_addr+0x7a>
   23574:	be01      	bkpt	0x0001
   23576:	2300      	movs	r3, #0
   23578:	461a      	mov	r2, r3
   2357a:	4619      	mov	r1, r3
   2357c:	4618      	mov	r0, r3
   2357e:	f7e6 fa27 	bl	99d0 <__assert_func>
	...

00023584 <ble_ll_resolv_set_peer_rpa>:

void
ble_ll_resolv_set_peer_rpa(int index, uint8_t *rpa)
{
   23584:	b538      	push	{r3, r4, r5, lr}
   23586:	4605      	mov	r5, r0
   23588:	460c      	mov	r4, r1
    os_sr_t sr;
    struct ble_ll_resolv_entry *rl;

    OS_ENTER_CRITICAL(sr);
   2358a:	f7e8 f813 	bl	b5b4 <os_arch_save_sr>
    rl = &g_ble_ll_resolv_list[index];
    memcpy(rl->rl_peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   2358e:	4a06      	ldr	r2, [pc, #24]	; (235a8 <ble_ll_resolv_set_peer_rpa+0x24>)
   23590:	2336      	movs	r3, #54	; 0x36
   23592:	fb03 f305 	mul.w	r3, r3, r5
   23596:	3330      	adds	r3, #48	; 0x30
   23598:	18d1      	adds	r1, r2, r3
   2359a:	6825      	ldr	r5, [r4, #0]
   2359c:	50d5      	str	r5, [r2, r3]
   2359e:	88a3      	ldrh	r3, [r4, #4]
   235a0:	808b      	strh	r3, [r1, #4]
    OS_EXIT_CRITICAL(sr);
   235a2:	f7e8 f80d 	bl	b5c0 <os_arch_restore_sr>
}
   235a6:	bd38      	pop	{r3, r4, r5, pc}
   235a8:	20008a40 	.word	0x20008a40

000235ac <ble_ll_resolv_set_local_rpa>:

void
ble_ll_resolv_set_local_rpa(int index, uint8_t *rpa)
{
   235ac:	b538      	push	{r3, r4, r5, lr}
   235ae:	4605      	mov	r5, r0
   235b0:	460c      	mov	r4, r1
    os_sr_t sr;
    struct ble_ll_resolv_entry *rl;

    OS_ENTER_CRITICAL(sr);
   235b2:	f7e7 ffff 	bl	b5b4 <os_arch_save_sr>
    rl = &g_ble_ll_resolv_list[index];
    memcpy(rl->rl_local_rpa, rpa, BLE_DEV_ADDR_LEN);
   235b6:	2336      	movs	r3, #54	; 0x36
   235b8:	fb03 f305 	mul.w	r3, r3, r5
   235bc:	3328      	adds	r3, #40	; 0x28
   235be:	4a05      	ldr	r2, [pc, #20]	; (235d4 <ble_ll_resolv_set_local_rpa+0x28>)
   235c0:	4413      	add	r3, r2
   235c2:	6822      	ldr	r2, [r4, #0]
   235c4:	f8c3 2002 	str.w	r2, [r3, #2]
   235c8:	88a2      	ldrh	r2, [r4, #4]
   235ca:	80da      	strh	r2, [r3, #6]
    OS_EXIT_CRITICAL(sr);
   235cc:	f7e7 fff8 	bl	b5c0 <os_arch_restore_sr>
}
   235d0:	bd38      	pop	{r3, r4, r5, pc}
   235d2:	bf00      	nop
   235d4:	20008a40 	.word	0x20008a40

000235d8 <ble_ll_resolv_gen_rpa>:
 *
 * @return int
 */
int
ble_ll_resolv_gen_rpa(uint8_t *addr, uint8_t addr_type, uint8_t *rpa, int local)
{
   235d8:	b538      	push	{r3, r4, r5, lr}
   235da:	4615      	mov	r5, r2
   235dc:	461c      	mov	r4, r3
    struct ble_ll_resolv_entry *rl;

    rl = ble_ll_resolv_list_find(addr, addr_type);
   235de:	f7ff fdf3 	bl	231c8 <ble_ll_resolv_list_find>
    if (rl) {
   235e2:	b168      	cbz	r0, 23600 <ble_ll_resolv_gen_rpa+0x28>
   235e4:	4603      	mov	r3, r0
        if ((local && rl->rl_has_local) || (!local && rl->rl_has_peer)) {
   235e6:	b10c      	cbz	r4, 235ec <ble_ll_resolv_gen_rpa+0x14>
   235e8:	7882      	ldrb	r2, [r0, #2]
   235ea:	b912      	cbnz	r2, 235f2 <ble_ll_resolv_gen_rpa+0x1a>
   235ec:	b954      	cbnz	r4, 23604 <ble_ll_resolv_gen_rpa+0x2c>
   235ee:	78da      	ldrb	r2, [r3, #3]
   235f0:	b152      	cbz	r2, 23608 <ble_ll_resolv_gen_rpa+0x30>
            ble_ll_resolv_get_priv_addr(rl, local, rpa);
   235f2:	462a      	mov	r2, r5
   235f4:	4621      	mov	r1, r4
   235f6:	4618      	mov	r0, r3
   235f8:	f7ff ff80 	bl	234fc <ble_ll_resolv_get_priv_addr>
            return 1;
   235fc:	2001      	movs	r0, #1
        }
    }

    return 0;
}
   235fe:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   23600:	2000      	movs	r0, #0
   23602:	e7fc      	b.n	235fe <ble_ll_resolv_gen_rpa+0x26>
   23604:	2000      	movs	r0, #0
   23606:	e7fa      	b.n	235fe <ble_ll_resolv_gen_rpa+0x26>
   23608:	4620      	mov	r0, r4
   2360a:	e7f8      	b.n	235fe <ble_ll_resolv_gen_rpa+0x26>

0002360c <ble_ll_resolv_rpa>:
 *
 * @return int
 */
int
ble_ll_resolv_rpa(const uint8_t *rpa, const uint8_t *irk)
{
   2360c:	b510      	push	{r4, lr}
   2360e:	b08c      	sub	sp, #48	; 0x30
   23610:	4604      	mov	r4, r0
    struct ble_encryption_block ecb;

    irk32 = (const uint32_t *)irk;
    key32 = (uint32_t *)&ecb.key[0];

    key32[0] = irk32[0];
   23612:	680b      	ldr	r3, [r1, #0]
   23614:	9300      	str	r3, [sp, #0]
    key32[1] = irk32[1];
   23616:	684b      	ldr	r3, [r1, #4]
   23618:	9301      	str	r3, [sp, #4]
    key32[2] = irk32[2];
   2361a:	688b      	ldr	r3, [r1, #8]
   2361c:	9302      	str	r3, [sp, #8]
    key32[3] = irk32[3];
   2361e:	68cb      	ldr	r3, [r1, #12]
   23620:	9303      	str	r3, [sp, #12]

    pt32 = (uint32_t *)&ecb.plain_text[0];
    pt32[0] = 0;
   23622:	2300      	movs	r3, #0
   23624:	9304      	str	r3, [sp, #16]
    pt32[1] = 0;
   23626:	9305      	str	r3, [sp, #20]
    pt32[2] = 0;
   23628:	9306      	str	r3, [sp, #24]
    pt32[3] = 0;
   2362a:	9307      	str	r3, [sp, #28]

    ecb.plain_text[15] = rpa[3];
   2362c:	78c3      	ldrb	r3, [r0, #3]
   2362e:	f88d 301f 	strb.w	r3, [sp, #31]
    ecb.plain_text[14] = rpa[4];
   23632:	7903      	ldrb	r3, [r0, #4]
   23634:	f88d 301e 	strb.w	r3, [sp, #30]
    ecb.plain_text[13] = rpa[5];
   23638:	7943      	ldrb	r3, [r0, #5]
   2363a:	f88d 301d 	strb.w	r3, [sp, #29]

    ble_hw_encrypt_block(&ecb);
   2363e:	4668      	mov	r0, sp
   23640:	f002 f97c 	bl	2593c <ble_hw_encrypt_block>
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   23644:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   23648:	7823      	ldrb	r3, [r4, #0]
   2364a:	429a      	cmp	r2, r3
   2364c:	d002      	beq.n	23654 <ble_ll_resolv_rpa+0x48>
        (ecb.cipher_text[13] == rpa[2])) {
        rc = 1;
    } else {
        rc = 0;
   2364e:	2000      	movs	r0, #0
    }

    return rc;
}
   23650:	b00c      	add	sp, #48	; 0x30
   23652:	bd10      	pop	{r4, pc}
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   23654:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
   23658:	7863      	ldrb	r3, [r4, #1]
   2365a:	429a      	cmp	r2, r3
   2365c:	d001      	beq.n	23662 <ble_ll_resolv_rpa+0x56>
        rc = 0;
   2365e:	2000      	movs	r0, #0
   23660:	e7f6      	b.n	23650 <ble_ll_resolv_rpa+0x44>
        (ecb.cipher_text[13] == rpa[2])) {
   23662:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
   23666:	78a3      	ldrb	r3, [r4, #2]
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   23668:	429a      	cmp	r2, r3
   2366a:	d001      	beq.n	23670 <ble_ll_resolv_rpa+0x64>
        rc = 0;
   2366c:	2000      	movs	r0, #0
   2366e:	e7ef      	b.n	23650 <ble_ll_resolv_rpa+0x44>
        rc = 1;
   23670:	2001      	movs	r0, #1
    return rc;
   23672:	e7ed      	b.n	23650 <ble_ll_resolv_rpa+0x44>

00023674 <ble_ll_resolv_enabled>:
 */
uint8_t
ble_ll_resolv_enabled(void)
{
    return g_ble_ll_resolv_data.addr_res_enabled;
}
   23674:	4b01      	ldr	r3, [pc, #4]	; (2367c <ble_ll_resolv_enabled+0x8>)
   23676:	7818      	ldrb	r0, [r3, #0]
   23678:	4770      	bx	lr
   2367a:	bf00      	nop
   2367c:	20008a18 	.word	0x20008a18

00023680 <ble_ll_resolv_init>:
    ble_ll_resolv_init();
}

void
ble_ll_resolv_init(void)
{
   23680:	b510      	push	{r4, lr}
    uint8_t hw_size;

    /* Default is 15 minutes */
    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(15 * 60 * 1000);
   23682:	4b09      	ldr	r3, [pc, #36]	; (236a8 <ble_ll_resolv_init+0x28>)
   23684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   23688:	605a      	str	r2, [r3, #4]

    hw_size = ble_hw_resolv_list_size();
   2368a:	f002 fa01 	bl	25a90 <ble_hw_resolv_list_size>
    if (hw_size > MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE)) {
   2368e:	2804      	cmp	r0, #4
   23690:	d900      	bls.n	23694 <ble_ll_resolv_init+0x14>
        hw_size = MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE);
   23692:	2004      	movs	r0, #4
    }
    g_ble_ll_resolv_data.rl_size = hw_size;
   23694:	4c04      	ldr	r4, [pc, #16]	; (236a8 <ble_ll_resolv_init+0x28>)
   23696:	7060      	strb	r0, [r4, #1]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   23698:	2300      	movs	r3, #0
   2369a:	4a04      	ldr	r2, [pc, #16]	; (236ac <ble_ll_resolv_init+0x2c>)
   2369c:	4904      	ldr	r1, [pc, #16]	; (236b0 <ble_ll_resolv_init+0x30>)
   2369e:	f104 0008 	add.w	r0, r4, #8
   236a2:	f7e6 fb3d 	bl	9d20 <os_callout_init>

    ble_npl_callout_init(&g_ble_ll_resolv_data.rpa_timer,
                         &g_ble_ll_data.ll_evq,
                         ble_ll_resolv_rpa_timer_cb,
                         NULL);
}
   236a6:	bd10      	pop	{r4, pc}
   236a8:	20008a18 	.word	0x20008a18
   236ac:	00023129 	.word	0x00023129
   236b0:	200084e8 	.word	0x200084e8

000236b4 <ble_ll_resolv_list_reset>:
{
   236b4:	b508      	push	{r3, lr}
    g_ble_ll_resolv_data.addr_res_enabled = 0;
   236b6:	4805      	ldr	r0, [pc, #20]	; (236cc <ble_ll_resolv_list_reset+0x18>)
   236b8:	2300      	movs	r3, #0
   236ba:	f800 3b08 	strb.w	r3, [r0], #8
    os_callout_stop(&co->co);
   236be:	f7e6 fb3d 	bl	9d3c <os_callout_stop>
    ble_ll_resolv_list_clr();
   236c2:	f7ff fd63 	bl	2318c <ble_ll_resolv_list_clr>
    ble_ll_resolv_init();
   236c6:	f7ff ffdb 	bl	23680 <ble_ll_resolv_init>
}
   236ca:	bd08      	pop	{r3, pc}
   236cc:	20008a18 	.word	0x20008a18

000236d0 <ble_ll_rfmgmt_disable>:
    }
}

static void
ble_ll_rfmgmt_disable(void)
{
   236d0:	b508      	push	{r3, lr}
    OS_ASSERT_CRITICAL();
   236d2:	f7e7 ff78 	bl	b5c6 <os_arch_in_critical>
   236d6:	b118      	cbz	r0, 236e0 <ble_ll_rfmgmt_disable+0x10>

    if (g_ble_ll_rfmgmt_data.state != RFMGMT_STATE_OFF) {
   236d8:	4b09      	ldr	r3, [pc, #36]	; (23700 <ble_ll_rfmgmt_disable+0x30>)
   236da:	781b      	ldrb	r3, [r3, #0]
   236dc:	b953      	cbnz	r3, 236f4 <ble_ll_rfmgmt_disable+0x24>
        ble_phy_rfclk_disable();
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_OFF;
    }
}
   236de:	bd08      	pop	{r3, pc}
    OS_ASSERT_CRITICAL();
   236e0:	f7e4 fd6e 	bl	81c0 <hal_debugger_connected>
   236e4:	b100      	cbz	r0, 236e8 <ble_ll_rfmgmt_disable+0x18>
   236e6:	be01      	bkpt	0x0001
   236e8:	2300      	movs	r3, #0
   236ea:	461a      	mov	r2, r3
   236ec:	4619      	mov	r1, r3
   236ee:	4618      	mov	r0, r3
   236f0:	f7e6 f96e 	bl	99d0 <__assert_func>
        ble_phy_rfclk_disable();
   236f4:	f003 f828 	bl	26748 <ble_phy_rfclk_disable>
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_OFF;
   236f8:	4b01      	ldr	r3, [pc, #4]	; (23700 <ble_ll_rfmgmt_disable+0x30>)
   236fa:	2200      	movs	r2, #0
   236fc:	701a      	strb	r2, [r3, #0]
}
   236fe:	e7ee      	b.n	236de <ble_ll_rfmgmt_disable+0xe>
   23700:	20008b18 	.word	0x20008b18

00023704 <ble_ll_rfmgmt_release_ev>:
    ble_ll_rfmgmt_enable();
}

static void
ble_ll_rfmgmt_release_ev(struct ble_npl_event *ev)
{
   23704:	b538      	push	{r3, r4, r5, lr}
    uint32_t now;
    bool can_disable;
    uint8_t lls;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   23706:	f7e7 ff55 	bl	b5b4 <os_arch_save_sr>
   2370a:	4605      	mov	r5, r0

    now = os_cputime_get32();
   2370c:	f7f8 fb25 	bl	1bd5a <os_cputime_get32>
   23710:	4604      	mov	r4, r0

    can_disable = true;
    lls = ble_ll_state_get();
   23712:	f7f9 fdb5 	bl	1d280 <ble_ll_state_get>

    if (rfmgmt->enable_scan && CPUTIME_GEQ(now, rfmgmt->enable_scan_at)) {
   23716:	4b0d      	ldr	r3, [pc, #52]	; (2374c <ble_ll_rfmgmt_release_ev+0x48>)
   23718:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   2371c:	b123      	cbz	r3, 23728 <ble_ll_rfmgmt_release_ev+0x24>
   2371e:	4b0b      	ldr	r3, [pc, #44]	; (2374c <ble_ll_rfmgmt_release_ev+0x48>)
   23720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23722:	1ae3      	subs	r3, r4, r3
   23724:	2b00      	cmp	r3, #0
   23726:	da09      	bge.n	2373c <ble_ll_rfmgmt_release_ev+0x38>
        /* Blocked by scan */
        can_disable = false;
    } else if (rfmgmt->enable_sched && CPUTIME_GEQ(now, rfmgmt->enable_sched_at)) {
   23728:	4b08      	ldr	r3, [pc, #32]	; (2374c <ble_ll_rfmgmt_release_ev+0x48>)
   2372a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   2372e:	b123      	cbz	r3, 2373a <ble_ll_rfmgmt_release_ev+0x36>
   23730:	4b06      	ldr	r3, [pc, #24]	; (2374c <ble_ll_rfmgmt_release_ev+0x48>)
   23732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23734:	1ae4      	subs	r4, r4, r3
   23736:	2c00      	cmp	r4, #0
   23738:	da00      	bge.n	2373c <ble_ll_rfmgmt_release_ev+0x38>
        /* Blocked by scheduler item */
        can_disable = false;
    } else if (lls != BLE_LL_STATE_STANDBY) {
   2373a:	b118      	cbz	r0, 23744 <ble_ll_rfmgmt_release_ev+0x40>

    if (can_disable) {
        ble_ll_rfmgmt_disable();
    }

    OS_EXIT_CRITICAL(sr);
   2373c:	4628      	mov	r0, r5
   2373e:	f7e7 ff3f 	bl	b5c0 <os_arch_restore_sr>
}
   23742:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_rfmgmt_disable();
   23744:	f7ff ffc4 	bl	236d0 <ble_ll_rfmgmt_disable>
   23748:	e7f8      	b.n	2373c <ble_ll_rfmgmt_release_ev+0x38>
   2374a:	bf00      	nop
   2374c:	20008b18 	.word	0x20008b18

00023750 <ble_ll_rfmgmt_enable>:
{
   23750:	b510      	push	{r4, lr}
    OS_ASSERT_CRITICAL();
   23752:	f7e7 ff38 	bl	b5c6 <os_arch_in_critical>
   23756:	b118      	cbz	r0, 23760 <ble_ll_rfmgmt_enable+0x10>
    if (g_ble_ll_rfmgmt_data.state == RFMGMT_STATE_OFF) {
   23758:	4b0b      	ldr	r3, [pc, #44]	; (23788 <ble_ll_rfmgmt_enable+0x38>)
   2375a:	781b      	ldrb	r3, [r3, #0]
   2375c:	b153      	cbz	r3, 23774 <ble_ll_rfmgmt_enable+0x24>
}
   2375e:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   23760:	f7e4 fd2e 	bl	81c0 <hal_debugger_connected>
   23764:	b100      	cbz	r0, 23768 <ble_ll_rfmgmt_enable+0x18>
   23766:	be01      	bkpt	0x0001
   23768:	2300      	movs	r3, #0
   2376a:	461a      	mov	r2, r3
   2376c:	4619      	mov	r1, r3
   2376e:	4618      	mov	r0, r3
   23770:	f7e6 f92e 	bl	99d0 <__assert_func>
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_ENABLING;
   23774:	4c04      	ldr	r4, [pc, #16]	; (23788 <ble_ll_rfmgmt_enable+0x38>)
   23776:	2301      	movs	r3, #1
   23778:	7023      	strb	r3, [r4, #0]
        g_ble_ll_rfmgmt_data.enabled_at = os_cputime_get32();
   2377a:	f7f8 faee 	bl	1bd5a <os_cputime_get32>
   2377e:	6320      	str	r0, [r4, #48]	; 0x30
        ble_phy_rfclk_enable();
   23780:	f002 ffde 	bl	26740 <ble_phy_rfclk_enable>
}
   23784:	e7eb      	b.n	2375e <ble_ll_rfmgmt_enable+0xe>
   23786:	bf00      	nop
   23788:	20008b18 	.word	0x20008b18

0002378c <ble_ll_rfmgmt_timer_exp>:
{
   2378c:	b508      	push	{r3, lr}
    g_ble_ll_rfmgmt_data.timer_scheduled = false;
   2378e:	4b03      	ldr	r3, [pc, #12]	; (2379c <ble_ll_rfmgmt_timer_exp+0x10>)
   23790:	2200      	movs	r2, #0
   23792:	771a      	strb	r2, [r3, #28]
    ble_ll_rfmgmt_enable();
   23794:	f7ff ffdc 	bl	23750 <ble_ll_rfmgmt_enable>
}
   23798:	bd08      	pop	{r3, pc}
   2379a:	bf00      	nop
   2379c:	20008b18 	.word	0x20008b18

000237a0 <ble_ll_rfmgmt_timer_reschedule>:
{
   237a0:	b510      	push	{r4, lr}
    if (rfmgmt->enable_scan && rfmgmt->enable_sched) {
   237a2:	4b1f      	ldr	r3, [pc, #124]	; (23820 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   237a8:	b15b      	cbz	r3, 237c2 <ble_ll_rfmgmt_timer_reschedule+0x22>
   237aa:	4a1d      	ldr	r2, [pc, #116]	; (23820 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237ac:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   237b0:	b13a      	cbz	r2, 237c2 <ble_ll_rfmgmt_timer_reschedule+0x22>
        if (CPUTIME_LT(rfmgmt->enable_scan_at, rfmgmt->enable_sched_at)) {
   237b2:	4b1b      	ldr	r3, [pc, #108]	; (23820 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   237b6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   237b8:	1b13      	subs	r3, r2, r4
   237ba:	2b00      	cmp	r3, #0
   237bc:	da04      	bge.n	237c8 <ble_ll_rfmgmt_timer_reschedule+0x28>
            enable_at = rfmgmt->enable_scan_at;
   237be:	4614      	mov	r4, r2
   237c0:	e002      	b.n	237c8 <ble_ll_rfmgmt_timer_reschedule+0x28>
    } else if (rfmgmt->enable_scan) {
   237c2:	b1e3      	cbz	r3, 237fe <ble_ll_rfmgmt_timer_reschedule+0x5e>
        enable_at = rfmgmt->enable_scan_at;
   237c4:	4b16      	ldr	r3, [pc, #88]	; (23820 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237c6:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    if (rfmgmt->timer_scheduled) {
   237c8:	4b15      	ldr	r3, [pc, #84]	; (23820 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237ca:	7f1b      	ldrb	r3, [r3, #28]
   237cc:	b14b      	cbz	r3, 237e2 <ble_ll_rfmgmt_timer_reschedule+0x42>
        if (rfmgmt->timer_scheduled_at == enable_at) {
   237ce:	4b14      	ldr	r3, [pc, #80]	; (23820 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237d0:	6a1b      	ldr	r3, [r3, #32]
   237d2:	42a3      	cmp	r3, r4
   237d4:	d012      	beq.n	237fc <ble_ll_rfmgmt_timer_reschedule+0x5c>
        rfmgmt->timer_scheduled = false;
   237d6:	4812      	ldr	r0, [pc, #72]	; (23820 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237d8:	2300      	movs	r3, #0
   237da:	7703      	strb	r3, [r0, #28]
        os_cputime_timer_stop(&rfmgmt->timer);
   237dc:	3004      	adds	r0, #4
   237de:	f7f8 fab8 	bl	1bd52 <os_cputime_timer_stop>
    if (CPUTIME_LEQ(enable_at, os_cputime_get32())) {
   237e2:	f7f8 faba 	bl	1bd5a <os_cputime_get32>
   237e6:	1a20      	subs	r0, r4, r0
   237e8:	2800      	cmp	r0, #0
   237ea:	dd16      	ble.n	2381a <ble_ll_rfmgmt_timer_reschedule+0x7a>
    rfmgmt->timer_scheduled = true;
   237ec:	480c      	ldr	r0, [pc, #48]	; (23820 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237ee:	2301      	movs	r3, #1
   237f0:	7703      	strb	r3, [r0, #28]
    rfmgmt->timer_scheduled_at = enable_at;
   237f2:	6204      	str	r4, [r0, #32]
    os_cputime_timer_start(&rfmgmt->timer, enable_at);
   237f4:	4621      	mov	r1, r4
   237f6:	3004      	adds	r0, #4
   237f8:	f7f8 faa7 	bl	1bd4a <os_cputime_timer_start>
}
   237fc:	bd10      	pop	{r4, pc}
    } else if (rfmgmt->enable_sched) {
   237fe:	4b08      	ldr	r3, [pc, #32]	; (23820 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   23800:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   23804:	b113      	cbz	r3, 2380c <ble_ll_rfmgmt_timer_reschedule+0x6c>
        enable_at = rfmgmt->enable_sched_at;
   23806:	4b06      	ldr	r3, [pc, #24]	; (23820 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   23808:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   2380a:	e7dd      	b.n	237c8 <ble_ll_rfmgmt_timer_reschedule+0x28>
        rfmgmt->timer_scheduled = false;
   2380c:	4804      	ldr	r0, [pc, #16]	; (23820 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   2380e:	2300      	movs	r3, #0
   23810:	7703      	strb	r3, [r0, #28]
        os_cputime_timer_stop(&rfmgmt->timer);
   23812:	3004      	adds	r0, #4
   23814:	f7f8 fa9d 	bl	1bd52 <os_cputime_timer_stop>
        return;
   23818:	e7f0      	b.n	237fc <ble_ll_rfmgmt_timer_reschedule+0x5c>
        ble_ll_rfmgmt_enable();
   2381a:	f7ff ff99 	bl	23750 <ble_ll_rfmgmt_enable>
        return;
   2381e:	e7ed      	b.n	237fc <ble_ll_rfmgmt_timer_reschedule+0x5c>
   23820:	20008b18 	.word	0x20008b18

00023824 <ble_ll_rfmgmt_init>:
    return rem_ticks;
}

void
ble_ll_rfmgmt_init(void)
{
   23824:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;

    rfmgmt->state = RFMGMT_STATE_OFF;
   23826:	4c0a      	ldr	r4, [pc, #40]	; (23850 <ble_ll_rfmgmt_init+0x2c>)
   23828:	2500      	movs	r5, #0
   2382a:	7025      	strb	r5, [r4, #0]
   2382c:	f240 50fa 	movw	r0, #1530	; 0x5fa
   23830:	f7f8 faaa 	bl	1bd88 <os_cputime_usecs_to_ticks>

    rfmgmt->ticks_to_enabled =
   23834:	8060      	strh	r0, [r4, #2]
            ble_ll_usecs_to_ticks_round_up(MYNEWT_VAL(BLE_LL_RFMGMT_ENABLE_TIME));

    rfmgmt->timer_scheduled = false;
   23836:	7725      	strb	r5, [r4, #28]
    os_cputime_timer_init(&rfmgmt->timer, ble_ll_rfmgmt_timer_exp, NULL);
   23838:	462a      	mov	r2, r5
   2383a:	4906      	ldr	r1, [pc, #24]	; (23854 <ble_ll_rfmgmt_init+0x30>)
   2383c:	1d20      	adds	r0, r4, #4
   2383e:	f7f8 fa66 	bl	1bd0e <os_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
   23842:	6365      	str	r5, [r4, #52]	; 0x34
   23844:	63e5      	str	r5, [r4, #60]	; 0x3c
   23846:	6425      	str	r5, [r4, #64]	; 0x40
    ev->ev.ev_cb = (os_event_fn *)fn;
   23848:	4b03      	ldr	r3, [pc, #12]	; (23858 <ble_ll_rfmgmt_init+0x34>)
   2384a:	63a3      	str	r3, [r4, #56]	; 0x38

    ble_npl_event_init(&rfmgmt->release_ev, ble_ll_rfmgmt_release_ev, NULL);
}
   2384c:	bd38      	pop	{r3, r4, r5, pc}
   2384e:	bf00      	nop
   23850:	20008b18 	.word	0x20008b18
   23854:	0002378d 	.word	0x0002378d
   23858:	00023705 	.word	0x00023705

0002385c <ble_ll_rfmgmt_reset>:

void
ble_ll_rfmgmt_reset(void)
{
   2385c:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;

    rfmgmt->timer_scheduled = false;
   2385e:	4c0b      	ldr	r4, [pc, #44]	; (2388c <ble_ll_rfmgmt_reset+0x30>)
   23860:	2500      	movs	r5, #0
   23862:	7725      	strb	r5, [r4, #28]
    rfmgmt->timer_scheduled_at = 0;
   23864:	6225      	str	r5, [r4, #32]
    os_cputime_timer_stop(&rfmgmt->timer);
   23866:	1d20      	adds	r0, r4, #4
   23868:	f7f8 fa73 	bl	1bd52 <os_cputime_timer_stop>
    os_eventq_remove(&evq->evq, &ev->ev);
   2386c:	f104 0134 	add.w	r1, r4, #52	; 0x34
   23870:	4807      	ldr	r0, [pc, #28]	; (23890 <ble_ll_rfmgmt_reset+0x34>)
   23872:	f7e6 fc84 	bl	a17e <os_eventq_remove>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);

    ble_ll_rfmgmt_disable();
   23876:	f7ff ff2b 	bl	236d0 <ble_ll_rfmgmt_disable>

    rfmgmt->enable_scan = false;
   2387a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    rfmgmt->enable_scan_at = 0;
   2387e:	62a5      	str	r5, [r4, #40]	; 0x28
    rfmgmt->enable_sched = false;
   23880:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
    rfmgmt->enable_sched_at = 0;
   23884:	62e5      	str	r5, [r4, #44]	; 0x2c

    rfmgmt->enabled_at = 0;
   23886:	6325      	str	r5, [r4, #48]	; 0x30
}
   23888:	bd38      	pop	{r3, r4, r5, pc}
   2388a:	bf00      	nop
   2388c:	20008b18 	.word	0x20008b18
   23890:	200084e8 	.word	0x200084e8

00023894 <ble_ll_rfmgmt_scan_changed>:

void
ble_ll_rfmgmt_scan_changed(bool enabled, uint32_t next_window)
{
   23894:	b570      	push	{r4, r5, r6, lr}
   23896:	4606      	mov	r6, r0
   23898:	460c      	mov	r4, r1
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   2389a:	f7e7 fe8b 	bl	b5b4 <os_arch_save_sr>
   2389e:	4605      	mov	r5, r0

    rfmgmt->enable_scan = enabled;
   238a0:	4b05      	ldr	r3, [pc, #20]	; (238b8 <ble_ll_rfmgmt_scan_changed+0x24>)
   238a2:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
    rfmgmt->enable_scan_at = next_window - rfmgmt->ticks_to_enabled;
   238a6:	885a      	ldrh	r2, [r3, #2]
   238a8:	1aa4      	subs	r4, r4, r2
   238aa:	629c      	str	r4, [r3, #40]	; 0x28

    ble_ll_rfmgmt_timer_reschedule();
   238ac:	f7ff ff78 	bl	237a0 <ble_ll_rfmgmt_timer_reschedule>

    OS_EXIT_CRITICAL(sr);
   238b0:	4628      	mov	r0, r5
   238b2:	f7e7 fe85 	bl	b5c0 <os_arch_restore_sr>
}
   238b6:	bd70      	pop	{r4, r5, r6, pc}
   238b8:	20008b18 	.word	0x20008b18

000238bc <ble_ll_rfmgmt_sched_changed>:

void
ble_ll_rfmgmt_sched_changed(struct ble_ll_sched_item *first)
{
   238bc:	b538      	push	{r3, r4, r5, lr}
   238be:	4604      	mov	r4, r0
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   238c0:	f7e7 fe78 	bl	b5b4 <os_arch_save_sr>
   238c4:	4605      	mov	r5, r0

    rfmgmt->enable_sched = (first != NULL);
   238c6:	2c00      	cmp	r4, #0
   238c8:	bf14      	ite	ne
   238ca:	2201      	movne	r2, #1
   238cc:	2200      	moveq	r2, #0
   238ce:	4b07      	ldr	r3, [pc, #28]	; (238ec <ble_ll_rfmgmt_sched_changed+0x30>)
   238d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    if (first) {
   238d4:	d004      	beq.n	238e0 <ble_ll_rfmgmt_sched_changed+0x24>
        rfmgmt->enable_sched_at = first->start_time - rfmgmt->ticks_to_enabled;
   238d6:	6863      	ldr	r3, [r4, #4]
   238d8:	4a04      	ldr	r2, [pc, #16]	; (238ec <ble_ll_rfmgmt_sched_changed+0x30>)
   238da:	8851      	ldrh	r1, [r2, #2]
   238dc:	1a5b      	subs	r3, r3, r1
   238de:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    ble_ll_rfmgmt_timer_reschedule();
   238e0:	f7ff ff5e 	bl	237a0 <ble_ll_rfmgmt_timer_reschedule>

    OS_EXIT_CRITICAL(sr);
   238e4:	4628      	mov	r0, r5
   238e6:	f7e7 fe6b 	bl	b5c0 <os_arch_restore_sr>
}
   238ea:	bd38      	pop	{r3, r4, r5, pc}
   238ec:	20008b18 	.word	0x20008b18

000238f0 <ble_ll_rfmgmt_release>:

void
ble_ll_rfmgmt_release(void)
{
   238f0:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   238f2:	f7e7 fe5f 	bl	b5b4 <os_arch_save_sr>
   238f6:	4605      	mov	r5, r0
   238f8:	4c08      	ldr	r4, [pc, #32]	; (2391c <ble_ll_rfmgmt_release+0x2c>)
   238fa:	f104 0134 	add.w	r1, r4, #52	; 0x34
   238fe:	4808      	ldr	r0, [pc, #32]	; (23920 <ble_ll_rfmgmt_release+0x30>)
   23900:	f7e6 fc3d 	bl	a17e <os_eventq_remove>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);

    if (g_ble_ll_rfmgmt_data.state != RFMGMT_STATE_OFF) {
   23904:	7823      	ldrb	r3, [r4, #0]
   23906:	b91b      	cbnz	r3, 23910 <ble_ll_rfmgmt_release+0x20>
        ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);
    }

    OS_EXIT_CRITICAL(sr);
   23908:	4628      	mov	r0, r5
   2390a:	f7e7 fe59 	bl	b5c0 <os_arch_restore_sr>
}
   2390e:	bd38      	pop	{r3, r4, r5, pc}
    os_eventq_put(&evq->evq, &ev->ev);
   23910:	f104 0134 	add.w	r1, r4, #52	; 0x34
   23914:	4802      	ldr	r0, [pc, #8]	; (23920 <ble_ll_rfmgmt_release+0x30>)
   23916:	f7e6 fba8 	bl	a06a <os_eventq_put>
   2391a:	e7f5      	b.n	23908 <ble_ll_rfmgmt_release+0x18>
   2391c:	20008b18 	.word	0x20008b18
   23920:	200084e8 	.word	0x200084e8

00023924 <ble_ll_rfmgmt_enable_now>:

uint32_t
ble_ll_rfmgmt_enable_now(void)
{
   23924:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    uint32_t enabled_at;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   23926:	f7e7 fe45 	bl	b5b4 <os_arch_save_sr>
   2392a:	4605      	mov	r5, r0

    ble_ll_rfmgmt_enable();
   2392c:	f7ff ff10 	bl	23750 <ble_ll_rfmgmt_enable>

    if (rfmgmt->state == RFMGMT_STATE_ENABLED) {
   23930:	4b08      	ldr	r3, [pc, #32]	; (23954 <ble_ll_rfmgmt_enable_now+0x30>)
   23932:	781b      	ldrb	r3, [r3, #0]
   23934:	2b02      	cmp	r3, #2
   23936:	d009      	beq.n	2394c <ble_ll_rfmgmt_enable_now+0x28>
        enabled_at = os_cputime_get32();
    } else {
        enabled_at = rfmgmt->enabled_at + rfmgmt->ticks_to_enabled + 1;
   23938:	4b06      	ldr	r3, [pc, #24]	; (23954 <ble_ll_rfmgmt_enable_now+0x30>)
   2393a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   2393c:	885b      	ldrh	r3, [r3, #2]
   2393e:	441c      	add	r4, r3
   23940:	3401      	adds	r4, #1
    }

    OS_EXIT_CRITICAL(sr);
   23942:	4628      	mov	r0, r5
   23944:	f7e7 fe3c 	bl	b5c0 <os_arch_restore_sr>

    return enabled_at;
}
   23948:	4620      	mov	r0, r4
   2394a:	bd38      	pop	{r3, r4, r5, pc}
        enabled_at = os_cputime_get32();
   2394c:	f7f8 fa05 	bl	1bd5a <os_cputime_get32>
   23950:	4604      	mov	r4, r0
   23952:	e7f6      	b.n	23942 <ble_ll_rfmgmt_enable_now+0x1e>
   23954:	20008b18 	.word	0x20008b18

00023958 <ble_ll_get_chan_to_scan>:

static void
ble_ll_get_chan_to_scan(struct ble_ll_scan_sm *scansm, uint8_t *chan,
                        int *phy)
{
    struct ble_ll_scan_params *scanp = scansm->scanp;
   23958:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    }

    *chan = aux_data->chan;
    *phy = aux_data->aux_phy;
#else
    *chan = scanp->scan_chan;
   2395a:	7958      	ldrb	r0, [r3, #5]
   2395c:	7008      	strb	r0, [r1, #0]
    *phy = scanp->phy;
   2395e:	781b      	ldrb	r3, [r3, #0]
   23960:	6013      	str	r3, [r2, #0]
#endif
}
   23962:	4770      	bx	lr

00023964 <ble_ll_scan_get_next_adv_prim_chan>:
}

static uint8_t
ble_ll_scan_get_next_adv_prim_chan(uint8_t chan)
{
    ++chan;
   23964:	3001      	adds	r0, #1
   23966:	b2c0      	uxtb	r0, r0
    if (chan == BLE_PHY_NUM_CHANS) {
   23968:	2828      	cmp	r0, #40	; 0x28
   2396a:	d000      	beq.n	2396e <ble_ll_scan_get_next_adv_prim_chan+0xa>
        chan = BLE_PHY_ADV_CHAN_START;
    }

    return chan;
}
   2396c:	4770      	bx	lr
        chan = BLE_PHY_ADV_CHAN_START;
   2396e:	2025      	movs	r0, #37	; 0x25
   23970:	e7fc      	b.n	2396c <ble_ll_scan_get_next_adv_prim_chan+0x8>

00023972 <ble_ll_scan_move_window_to>:

static uint32_t
ble_ll_scan_move_window_to(struct ble_ll_scan_params *scanp, uint32_t time)
{
   23972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23974:	4605      	mov	r5, r0
   23976:	460f      	mov	r7, r1
    /*
     * Move window until given tick is before or inside window and move to next
     * channel for each skipped interval.
     */

    end_time = scanp->timing.start_time + scanp->timing.window;
   23978:	6904      	ldr	r4, [r0, #16]
   2397a:	68c6      	ldr	r6, [r0, #12]
   2397c:	4434      	add	r4, r6
    while (CPUTIME_GEQ(time, end_time)) {
   2397e:	e008      	b.n	23992 <ble_ll_scan_move_window_to+0x20>
        scanp->timing.start_time += scanp->timing.interval;
   23980:	68ac      	ldr	r4, [r5, #8]
   23982:	692b      	ldr	r3, [r5, #16]
   23984:	441c      	add	r4, r3
   23986:	612c      	str	r4, [r5, #16]
        scanp->scan_chan = ble_ll_scan_get_next_adv_prim_chan(scanp->scan_chan);
   23988:	7968      	ldrb	r0, [r5, #5]
   2398a:	f7ff ffeb 	bl	23964 <ble_ll_scan_get_next_adv_prim_chan>
   2398e:	7168      	strb	r0, [r5, #5]
        end_time = scanp->timing.start_time + scanp->timing.window;
   23990:	4434      	add	r4, r6
    while (CPUTIME_GEQ(time, end_time)) {
   23992:	1b3c      	subs	r4, r7, r4
   23994:	2c00      	cmp	r4, #0
   23996:	daf3      	bge.n	23980 <ble_ll_scan_move_window_to+0xe>
    }

    return scanp->timing.start_time;
}
   23998:	6928      	ldr	r0, [r5, #16]
   2399a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002399c <ble_ll_scan_is_inside_window>:

static bool
ble_ll_scan_is_inside_window(struct ble_ll_scan_params *scanp, uint32_t time)
{
   2399c:	b538      	push	{r3, r4, r5, lr}
   2399e:	4605      	mov	r5, r0
   239a0:	460c      	mov	r4, r1
    uint32_t start_time;

    /* Make sure we are checking against closest window */
    start_time = ble_ll_scan_move_window_to(scanp, time);
   239a2:	f7ff ffe6 	bl	23972 <ble_ll_scan_move_window_to>

    if (scanp->timing.window == scanp->timing.interval) {
   239a6:	68eb      	ldr	r3, [r5, #12]
   239a8:	68aa      	ldr	r2, [r5, #8]
   239aa:	4293      	cmp	r3, r2
   239ac:	d00c      	beq.n	239c8 <ble_ll_scan_is_inside_window+0x2c>
        /* always inside window in continuous scan */
        return true;
    }

    return CPUTIME_GEQ(time, start_time) &&
   239ae:	1a22      	subs	r2, r4, r0
   239b0:	2a00      	cmp	r2, #0
   239b2:	db05      	blt.n	239c0 <ble_ll_scan_is_inside_window+0x24>
           CPUTIME_LT(time, start_time + scanp->timing.window);
   239b4:	4403      	add	r3, r0
   239b6:	1ae3      	subs	r3, r4, r3
    return CPUTIME_GEQ(time, start_time) &&
   239b8:	2b00      	cmp	r3, #0
   239ba:	db03      	blt.n	239c4 <ble_ll_scan_is_inside_window+0x28>
   239bc:	2000      	movs	r0, #0
   239be:	e004      	b.n	239ca <ble_ll_scan_is_inside_window+0x2e>
   239c0:	2000      	movs	r0, #0
   239c2:	e002      	b.n	239ca <ble_ll_scan_is_inside_window+0x2e>
   239c4:	2001      	movs	r0, #1
   239c6:	e000      	b.n	239ca <ble_ll_scan_is_inside_window+0x2e>
        return true;
   239c8:	2001      	movs	r0, #1
}
   239ca:	bd38      	pop	{r3, r4, r5, pc}

000239cc <ble_ll_scan_get_addr_data_from_legacy>:
}

static void
ble_ll_scan_get_addr_data_from_legacy(uint8_t pdu_type, uint8_t *rxbuf,
                                     struct ble_ll_scan_addr_data *addrd)
{
   239cc:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(pdu_type < BLE_ADV_PDU_TYPE_ADV_EXT_IND);
   239ce:	2806      	cmp	r0, #6
   239d0:	d80f      	bhi.n	239f2 <ble_ll_scan_get_addr_data_from_legacy+0x26>

    addrd->adva_present = true;
   239d2:	2301      	movs	r3, #1
   239d4:	7013      	strb	r3, [r2, #0]

    addrd->adva = rxbuf + BLE_LL_PDU_HDR_LEN;
   239d6:	1c8b      	adds	r3, r1, #2
   239d8:	6053      	str	r3, [r2, #4]
    addrd->adva_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK);
   239da:	780b      	ldrb	r3, [r1, #0]
    if (txrxflag) {
   239dc:	f013 0f40 	tst.w	r3, #64	; 0x40
   239e0:	d011      	beq.n	23a06 <ble_ll_scan_get_addr_data_from_legacy+0x3a>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   239e2:	2301      	movs	r3, #1
   239e4:	7053      	strb	r3, [r2, #1]

    if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   239e6:	2801      	cmp	r0, #1
   239e8:	d00f      	beq.n	23a0a <ble_ll_scan_get_addr_data_from_legacy+0x3e>
        addrd->targeta = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
        addrd->targeta_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
    } else {
        addrd->targeta = NULL;
   239ea:	2300      	movs	r3, #0
   239ec:	60d3      	str	r3, [r2, #12]
        addrd->targeta_type = 0;
   239ee:	7213      	strb	r3, [r2, #8]
    }
}
   239f0:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(pdu_type < BLE_ADV_PDU_TYPE_ADV_EXT_IND);
   239f2:	f7e4 fbe5 	bl	81c0 <hal_debugger_connected>
   239f6:	b100      	cbz	r0, 239fa <ble_ll_scan_get_addr_data_from_legacy+0x2e>
   239f8:	be01      	bkpt	0x0001
   239fa:	2300      	movs	r3, #0
   239fc:	461a      	mov	r2, r3
   239fe:	4619      	mov	r1, r3
   23a00:	4618      	mov	r0, r3
   23a02:	f7e5 ffe5 	bl	99d0 <__assert_func>
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   23a06:	2300      	movs	r3, #0
   23a08:	e7ec      	b.n	239e4 <ble_ll_scan_get_addr_data_from_legacy+0x18>
        addrd->targeta = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
   23a0a:	f101 0308 	add.w	r3, r1, #8
   23a0e:	60d3      	str	r3, [r2, #12]
    if (txrxflag) {
   23a10:	f991 3000 	ldrsb.w	r3, [r1]
   23a14:	2b00      	cmp	r3, #0
   23a16:	db02      	blt.n	23a1e <ble_ll_scan_get_addr_data_from_legacy+0x52>
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   23a18:	2300      	movs	r3, #0
        addrd->targeta_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
   23a1a:	7213      	strb	r3, [r2, #8]
   23a1c:	e7e8      	b.n	239f0 <ble_ll_scan_get_addr_data_from_legacy+0x24>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   23a1e:	2301      	movs	r3, #1
   23a20:	e7fb      	b.n	23a1a <ble_ll_scan_get_addr_data_from_legacy+0x4e>

00023a22 <ble_ll_scan_req_backoff>:
{
   23a22:	b510      	push	{r4, lr}
    BLE_LL_ASSERT(scansm->backoff_count == 0);
   23a24:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   23a26:	b9cb      	cbnz	r3, 23a5c <ble_ll_scan_req_backoff+0x3a>
   23a28:	4604      	mov	r4, r0
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   23a2a:	78c3      	ldrb	r3, [r0, #3]
   23a2c:	bb03      	cbnz	r3, 23a70 <ble_ll_scan_req_backoff+0x4e>
    if (success) {
   23a2e:	b389      	cbz	r1, 23a94 <ble_ll_scan_req_backoff+0x72>
        scansm->scan_rsp_cons_fails = 0;
   23a30:	2300      	movs	r3, #0
   23a32:	7103      	strb	r3, [r0, #4]
        ++scansm->scan_rsp_cons_ok;
   23a34:	7943      	ldrb	r3, [r0, #5]
   23a36:	3301      	adds	r3, #1
   23a38:	b2db      	uxtb	r3, r3
   23a3a:	7143      	strb	r3, [r0, #5]
        if (scansm->scan_rsp_cons_ok == 2) {
   23a3c:	2b02      	cmp	r3, #2
   23a3e:	d021      	beq.n	23a84 <ble_ll_scan_req_backoff+0x62>
   23a40:	f7e7 fefa 	bl	b838 <lrand48>
    scansm->backoff_count = rand() & (scansm->upper_limit - 1);
   23a44:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   23a46:	3b01      	subs	r3, #1
   23a48:	b21b      	sxth	r3, r3
   23a4a:	4018      	ands	r0, r3
   23a4c:	b280      	uxth	r0, r0
    ++scansm->backoff_count;
   23a4e:	3001      	adds	r0, #1
   23a50:	b280      	uxth	r0, r0
   23a52:	84e0      	strh	r0, [r4, #38]	; 0x26
    BLE_LL_ASSERT(scansm->backoff_count <= 256);
   23a54:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   23a58:	d82c      	bhi.n	23ab4 <ble_ll_scan_req_backoff+0x92>
}
   23a5a:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT(scansm->backoff_count == 0);
   23a5c:	f7e4 fbb0 	bl	81c0 <hal_debugger_connected>
   23a60:	b100      	cbz	r0, 23a64 <ble_ll_scan_req_backoff+0x42>
   23a62:	be01      	bkpt	0x0001
   23a64:	2300      	movs	r3, #0
   23a66:	461a      	mov	r2, r3
   23a68:	4619      	mov	r1, r3
   23a6a:	4618      	mov	r0, r3
   23a6c:	f7e5 ffb0 	bl	99d0 <__assert_func>
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   23a70:	f7e4 fba6 	bl	81c0 <hal_debugger_connected>
   23a74:	b100      	cbz	r0, 23a78 <ble_ll_scan_req_backoff+0x56>
   23a76:	be01      	bkpt	0x0001
   23a78:	2300      	movs	r3, #0
   23a7a:	461a      	mov	r2, r3
   23a7c:	4619      	mov	r1, r3
   23a7e:	4618      	mov	r0, r3
   23a80:	f7e5 ffa6 	bl	99d0 <__assert_func>
            scansm->scan_rsp_cons_ok = 0;
   23a84:	2300      	movs	r3, #0
   23a86:	7143      	strb	r3, [r0, #5]
            if (scansm->upper_limit > 1) {
   23a88:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   23a8a:	2b01      	cmp	r3, #1
   23a8c:	d9d8      	bls.n	23a40 <ble_ll_scan_req_backoff+0x1e>
                scansm->upper_limit >>= 1;
   23a8e:	085b      	lsrs	r3, r3, #1
   23a90:	8483      	strh	r3, [r0, #36]	; 0x24
   23a92:	e7d5      	b.n	23a40 <ble_ll_scan_req_backoff+0x1e>
        scansm->scan_rsp_cons_ok = 0;
   23a94:	2300      	movs	r3, #0
   23a96:	7143      	strb	r3, [r0, #5]
        ++scansm->scan_rsp_cons_fails;
   23a98:	7903      	ldrb	r3, [r0, #4]
   23a9a:	3301      	adds	r3, #1
   23a9c:	b2db      	uxtb	r3, r3
   23a9e:	7103      	strb	r3, [r0, #4]
        if (scansm->scan_rsp_cons_fails == 2) {
   23aa0:	2b02      	cmp	r3, #2
   23aa2:	d1cd      	bne.n	23a40 <ble_ll_scan_req_backoff+0x1e>
            scansm->scan_rsp_cons_fails = 0;
   23aa4:	2300      	movs	r3, #0
   23aa6:	7103      	strb	r3, [r0, #4]
            if (scansm->upper_limit < 256) {
   23aa8:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   23aaa:	2bff      	cmp	r3, #255	; 0xff
   23aac:	d8c8      	bhi.n	23a40 <ble_ll_scan_req_backoff+0x1e>
                scansm->upper_limit <<= 1;
   23aae:	005b      	lsls	r3, r3, #1
   23ab0:	8483      	strh	r3, [r0, #36]	; 0x24
   23ab2:	e7c5      	b.n	23a40 <ble_ll_scan_req_backoff+0x1e>
    BLE_LL_ASSERT(scansm->backoff_count <= 256);
   23ab4:	f7e4 fb84 	bl	81c0 <hal_debugger_connected>
   23ab8:	b100      	cbz	r0, 23abc <ble_ll_scan_req_backoff+0x9a>
   23aba:	be01      	bkpt	0x0001
   23abc:	2300      	movs	r3, #0
   23abe:	461a      	mov	r2, r3
   23ac0:	4619      	mov	r1, r3
   23ac2:	4618      	mov	r0, r3
   23ac4:	f7e5 ff84 	bl	99d0 <__assert_func>

00023ac8 <ble_ll_scan_have_rxd_scan_rsp>:
{
   23ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23acc:	4606      	mov	r6, r0
   23ace:	460f      	mov	r7, r1
   23ad0:	4690      	mov	r8, r2
   23ad2:	4699      	mov	r9, r3
    num_advs = g_ble_ll_scan_num_rsp_advs;
   23ad4:	4b17      	ldr	r3, [pc, #92]	; (23b34 <ble_ll_scan_have_rxd_scan_rsp+0x6c>)
   23ad6:	781c      	ldrb	r4, [r3, #0]
    adv = &g_ble_ll_scan_rsp_advs[0];
   23ad8:	4d17      	ldr	r5, [pc, #92]	; (23b38 <ble_ll_scan_have_rxd_scan_rsp+0x70>)
    while (num_advs) {
   23ada:	e00c      	b.n	23af6 <ble_ll_scan_have_rxd_scan_rsp+0x2e>
                if ((adv->sc_adv_flags & BLE_LL_SC_ADV_F_RANDOM_ADDR) == 0) {
   23adc:	882b      	ldrh	r3, [r5, #0]
   23ade:	f013 0f01 	tst.w	r3, #1
   23ae2:	d105      	bne.n	23af0 <ble_ll_scan_have_rxd_scan_rsp+0x28>
                    if (ext_adv) {
   23ae4:	f1b8 0f00 	cmp.w	r8, #0
   23ae8:	d020      	beq.n	23b2c <ble_ll_scan_have_rxd_scan_rsp+0x64>
                        if (adi == adv->adi) {
   23aea:	886b      	ldrh	r3, [r5, #2]
   23aec:	454b      	cmp	r3, r9
   23aee:	d01f      	beq.n	23b30 <ble_ll_scan_have_rxd_scan_rsp+0x68>
        ++adv;
   23af0:	350a      	adds	r5, #10
        --num_advs;
   23af2:	3c01      	subs	r4, #1
   23af4:	b2e4      	uxtb	r4, r4
    while (num_advs) {
   23af6:	b1a4      	cbz	r4, 23b22 <ble_ll_scan_have_rxd_scan_rsp+0x5a>
        if (!memcmp(&adv->adv_addr, addr, BLE_DEV_ADDR_LEN)) {
   23af8:	2206      	movs	r2, #6
   23afa:	4631      	mov	r1, r6
   23afc:	1d28      	adds	r0, r5, #4
   23afe:	f7e7 fea3 	bl	b848 <memcmp>
   23b02:	2800      	cmp	r0, #0
   23b04:	d1f4      	bne.n	23af0 <ble_ll_scan_have_rxd_scan_rsp+0x28>
            if (txadd) {
   23b06:	2f00      	cmp	r7, #0
   23b08:	d0e8      	beq.n	23adc <ble_ll_scan_have_rxd_scan_rsp+0x14>
                if (adv->sc_adv_flags & BLE_LL_SC_ADV_F_RANDOM_ADDR) {
   23b0a:	882b      	ldrh	r3, [r5, #0]
   23b0c:	f013 0f01 	tst.w	r3, #1
   23b10:	d0ee      	beq.n	23af0 <ble_ll_scan_have_rxd_scan_rsp+0x28>
                    if (ext_adv) {
   23b12:	f1b8 0f00 	cmp.w	r8, #0
   23b16:	d007      	beq.n	23b28 <ble_ll_scan_have_rxd_scan_rsp+0x60>
                        if (adi == adv->adi) {
   23b18:	886b      	ldrh	r3, [r5, #2]
   23b1a:	454b      	cmp	r3, r9
   23b1c:	d1e8      	bne.n	23af0 <ble_ll_scan_have_rxd_scan_rsp+0x28>
                            return 1;
   23b1e:	2001      	movs	r0, #1
   23b20:	e000      	b.n	23b24 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
    return 0;
   23b22:	2000      	movs	r0, #0
}
   23b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    return 1;
   23b28:	2001      	movs	r0, #1
   23b2a:	e7fb      	b.n	23b24 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
                    return 1;
   23b2c:	2001      	movs	r0, #1
   23b2e:	e7f9      	b.n	23b24 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
                            return 1;
   23b30:	2001      	movs	r0, #1
   23b32:	e7f7      	b.n	23b24 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
   23b34:	20008b5c 	.word	0x20008b5c
   23b38:	20008b74 	.word	0x20008b74

00023b3c <ble_ll_scan_dup_update_legacy>:
{
   23b3c:	b570      	push	{r4, r5, r6, lr}
   23b3e:	461e      	mov	r6, r3
    e = TAILQ_FIRST(&g_scan_dup_list);
   23b40:	4b15      	ldr	r3, [pc, #84]	; (23b98 <ble_ll_scan_dup_update_legacy+0x5c>)
   23b42:	681c      	ldr	r4, [r3, #0]
    BLE_LL_ASSERT(e && e->type == type && !memcmp(e->addr, addr, 6));
   23b44:	b1a4      	cbz	r4, 23b70 <ble_ll_scan_dup_update_legacy+0x34>
   23b46:	4615      	mov	r5, r2
   23b48:	f000 0001 	and.w	r0, r0, #1
   23b4c:	7823      	ldrb	r3, [r4, #0]
   23b4e:	4283      	cmp	r3, r0
   23b50:	d10e      	bne.n	23b70 <ble_ll_scan_dup_update_legacy+0x34>
   23b52:	2206      	movs	r2, #6
   23b54:	1c60      	adds	r0, r4, #1
   23b56:	f7e7 fe77 	bl	b848 <memcmp>
   23b5a:	b948      	cbnz	r0, 23b70 <ble_ll_scan_dup_update_legacy+0x34>
    if (subev == BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT) {
   23b5c:	2d0b      	cmp	r5, #11
   23b5e:	d011      	beq.n	23b84 <ble_ll_scan_dup_update_legacy+0x48>
        if (evtype == BLE_HCI_ADV_RPT_EVTYPE_SCAN_RSP) {
   23b60:	2e04      	cmp	r6, #4
   23b62:	d014      	beq.n	23b8e <ble_ll_scan_dup_update_legacy+0x52>
            e->flags |= BLE_LL_SCAN_DUP_F_ADV_REPORT_SENT;
   23b64:	79e3      	ldrb	r3, [r4, #7]
   23b66:	f043 0301 	orr.w	r3, r3, #1
   23b6a:	71e3      	strb	r3, [r4, #7]
}
   23b6c:	2000      	movs	r0, #0
   23b6e:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(e && e->type == type && !memcmp(e->addr, addr, 6));
   23b70:	f7e4 fb26 	bl	81c0 <hal_debugger_connected>
   23b74:	b100      	cbz	r0, 23b78 <ble_ll_scan_dup_update_legacy+0x3c>
   23b76:	be01      	bkpt	0x0001
   23b78:	2300      	movs	r3, #0
   23b7a:	461a      	mov	r2, r3
   23b7c:	4619      	mov	r1, r3
   23b7e:	4618      	mov	r0, r3
   23b80:	f7e5 ff26 	bl	99d0 <__assert_func>
        e->flags |= BLE_LL_SCAN_DUP_F_DIR_ADV_REPORT_SENT;
   23b84:	79e3      	ldrb	r3, [r4, #7]
   23b86:	f043 0302 	orr.w	r3, r3, #2
   23b8a:	71e3      	strb	r3, [r4, #7]
   23b8c:	e7ee      	b.n	23b6c <ble_ll_scan_dup_update_legacy+0x30>
            e->flags |= BLE_LL_SCAN_DUP_F_SCAN_RSP_SENT;
   23b8e:	79e3      	ldrb	r3, [r4, #7]
   23b90:	f043 0304 	orr.w	r3, r3, #4
   23b94:	71e3      	strb	r3, [r4, #7]
   23b96:	e7e9      	b.n	23b6c <ble_ll_scan_dup_update_legacy+0x30>
   23b98:	20008c4c 	.word	0x20008c4c

00023b9c <ble_ll_scan_rx_filter>:
 *          1 = match
 *          2 = match, but do not scan
 */
static int
ble_ll_scan_rx_filter(struct ble_mbuf_hdr *hdr, struct ble_ll_scan_addr_data *addrd)
{
   23b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23ba0:	4606      	mov	r6, r0
   23ba2:	460c      	mov	r4, r1
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    struct ble_ll_scan_params *scanp = scansm->scanp;
   23ba4:	4b46      	ldr	r3, [pc, #280]	; (23cc0 <ble_ll_scan_rx_filter+0x124>)
   23ba6:	f8d3 806c 	ldr.w	r8, [r3, #108]	; 0x6c
#endif
    bool scan_req_allowed = true;
    int resolved = 0;

    /* Use AdvA as initial advertiser address, we may try to resolve it later */
    addrd->adv_addr = addrd->adva;
   23baa:	684b      	ldr	r3, [r1, #4]
   23bac:	614b      	str	r3, [r1, #20]
    addrd->adv_addr_type = addrd->adva_type;
   23bae:	784b      	ldrb	r3, [r1, #1]
   23bb0:	740b      	strb	r3, [r1, #16]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    /* By default, assume AdvA is not resolved */
    rxinfo->rpa_index = -1;
   23bb2:	23ff      	movs	r3, #255	; 0xff
   23bb4:	71c3      	strb	r3, [r0, #7]

    switch (ble_ll_addr_subtype(addrd->adva, addrd->adva_type)) {
   23bb6:	7849      	ldrb	r1, [r1, #1]
   23bb8:	6860      	ldr	r0, [r4, #4]
   23bba:	f7f9 f9a9 	bl	1cf10 <ble_ll_addr_subtype>
   23bbe:	4605      	mov	r5, r0
   23bc0:	b328      	cbz	r0, 23c0e <ble_ll_scan_rx_filter+0x72>
   23bc2:	2801      	cmp	r0, #1
   23bc4:	d130      	bne.n	23c28 <ble_ll_scan_rx_filter+0x8c>
         * Only resolve if packet actually contained AdvA.
         * In extended advertising PDUs we may use RL index from a PDU that
         * already had AdvA (e.g. ADV_EXT_IND in case of AUX_ADV_IND without
         * AdvA). In legacy advertising PDUs we always need to resolve AdvA.
         */
        if (addrd->adva_present) {
   23bc6:	7823      	ldrb	r3, [r4, #0]
   23bc8:	b1bb      	cbz	r3, 23bfa <ble_ll_scan_rx_filter+0x5e>
            rxinfo->rpa_index = ble_hw_resolv_list_match();
   23bca:	f001 ff63 	bl	25a94 <ble_hw_resolv_list_match>
   23bce:	b240      	sxtb	r0, r0
   23bd0:	71f0      	strb	r0, [r6, #7]
            BLE_LL_ASSERT(false);
            rxinfo->rpa_index = -1;
#endif
        }

        if (rxinfo->rpa_index < 0) {
   23bd2:	2800      	cmp	r0, #0
   23bd4:	db3f      	blt.n	23c56 <ble_ll_scan_rx_filter+0xba>
            aux_data->rpa_index = rxinfo->rpa_index;
        }
#endif

        /* Use resolved identity address as advertiser address */
        rl = &g_ble_ll_resolv_list[rxinfo->rpa_index];
   23bd6:	2336      	movs	r3, #54	; 0x36
   23bd8:	fb03 f000 	mul.w	r0, r3, r0
   23bdc:	4a39      	ldr	r2, [pc, #228]	; (23cc4 <ble_ll_scan_rx_filter+0x128>)
   23bde:	1887      	adds	r7, r0, r2
        addrd->adv_addr = rl->rl_identity_addr;
   23be0:	f100 0320 	add.w	r3, r0, #32
   23be4:	4413      	add	r3, r2
   23be6:	3304      	adds	r3, #4
   23be8:	6163      	str	r3, [r4, #20]
        addrd->adv_addr_type = rl->rl_addr_type;
   23bea:	5c83      	ldrb	r3, [r0, r2]
   23bec:	7423      	strb	r3, [r4, #16]
        addrd->rl = rl;
   23bee:	61a7      	str	r7, [r4, #24]

        rxinfo->flags |= BLE_MBUF_HDR_F_RESOLVED;
   23bf0:	8833      	ldrh	r3, [r6, #0]
   23bf2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   23bf6:	8033      	strh	r3, [r6, #0]
        resolved = 1;
        break;
   23bf8:	e018      	b.n	23c2c <ble_ll_scan_rx_filter+0x90>
            BLE_LL_ASSERT(false);
   23bfa:	f7e4 fae1 	bl	81c0 <hal_debugger_connected>
   23bfe:	b100      	cbz	r0, 23c02 <ble_ll_scan_rx_filter+0x66>
   23c00:	be01      	bkpt	0x0001
   23c02:	2300      	movs	r3, #0
   23c04:	461a      	mov	r2, r3
   23c06:	4619      	mov	r1, r3
   23c08:	4618      	mov	r0, r3
   23c0a:	f7e5 fee1 	bl	99d0 <__assert_func>
    case BLE_LL_ADDR_SUBTYPE_IDENTITY:
        /*
         * If AdvA is an identity address, we need to check if that device was
         * added to RL in order to use proper privacy mode.
         */
        rl = ble_ll_resolv_list_find(addrd->adva, addrd->adva_type);
   23c0e:	7861      	ldrb	r1, [r4, #1]
   23c10:	6860      	ldr	r0, [r4, #4]
   23c12:	f7ff fad9 	bl	231c8 <ble_ll_resolv_list_find>
        if (!rl) {
   23c16:	4607      	mov	r7, r0
   23c18:	b140      	cbz	r0, 23c2c <ble_ll_scan_rx_filter+0x90>
            break;
        }

        addrd->rl = rl;
   23c1a:	61a0      	str	r0, [r4, #24]

        /* Ignore device if using network privacy mode and it has IRK */
        if ((rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) && rl->rl_has_peer) {
   23c1c:	7843      	ldrb	r3, [r0, #1]
   23c1e:	b92b      	cbnz	r3, 23c2c <ble_ll_scan_rx_filter+0x90>
   23c20:	78c3      	ldrb	r3, [r0, #3]
   23c22:	b11b      	cbz	r3, 23c2c <ble_ll_scan_rx_filter+0x90>
            return 0;
   23c24:	462b      	mov	r3, r5
   23c26:	e038      	b.n	23c9a <ble_ll_scan_rx_filter+0xfe>
    int resolved = 0;
   23c28:	2500      	movs	r5, #0
    struct ble_ll_resolv_entry *rl = NULL;
   23c2a:	462f      	mov	r7, r5
    default:
        /* NRPA goes through filtering policy directly */
        break;
    }

    if (addrd->targeta) {
   23c2c:	68e0      	ldr	r0, [r4, #12]
   23c2e:	b360      	cbz	r0, 23c8a <ble_ll_scan_rx_filter+0xee>
        switch (ble_ll_addr_subtype(addrd->targeta, addrd->targeta_type)) {
   23c30:	7a21      	ldrb	r1, [r4, #8]
   23c32:	f7f9 f96d 	bl	1cf10 <ble_ll_addr_subtype>
   23c36:	4603      	mov	r3, r0
   23c38:	b1b8      	cbz	r0, 23c6a <ble_ll_scan_rx_filter+0xce>
   23c3a:	2801      	cmp	r0, #1
   23c3c:	d130      	bne.n	23ca0 <ble_ll_scan_rx_filter+0x104>
        case BLE_LL_ADDR_SUBTYPE_RPA:
            /* Check if TargetA can be resolved using the same RL entry as AdvA */
            if (rl && ble_ll_resolv_rpa(addrd->targeta, rl->rl_local_irk)) {
   23c3e:	b16f      	cbz	r7, 23c5c <ble_ll_scan_rx_filter+0xc0>
   23c40:	1d39      	adds	r1, r7, #4
   23c42:	68e0      	ldr	r0, [r4, #12]
   23c44:	f7ff fce2 	bl	2360c <ble_ll_resolv_rpa>
   23c48:	b140      	cbz	r0, 23c5c <ble_ll_scan_rx_filter+0xc0>
                rxinfo->flags |= BLE_MBUF_HDR_F_TARGETA_RESOLVED;
   23c4a:	8833      	ldrh	r3, [r6, #0]
   23c4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   23c50:	8033      	strh	r3, [r6, #0]
    bool scan_req_allowed = true;
   23c52:	2601      	movs	r6, #1
                break;
   23c54:	e01a      	b.n	23c8c <ble_ll_scan_rx_filter+0xf0>
    int resolved = 0;
   23c56:	2500      	movs	r5, #0
    struct ble_ll_resolv_entry *rl = NULL;
   23c58:	462f      	mov	r7, r5
   23c5a:	e7e7      	b.n	23c2c <ble_ll_scan_rx_filter+0x90>
            }

            /* Check if scan filter policy allows unresolved RPAs to be processed */
            if (!(scanp->scan_filt_policy & 0x02)) {
   23c5c:	f898 3002 	ldrb.w	r3, [r8, #2]
   23c60:	f013 0f02 	tst.w	r3, #2
   23c64:	d027      	beq.n	23cb6 <ble_ll_scan_rx_filter+0x11a>
            /*
             * We will notify host as requited by scan policy, but make sure we
             * do not send scan request since we do not know if this is directed
             * to us.
             */
            scan_req_allowed = false;
   23c66:	2600      	movs	r6, #0
   23c68:	e010      	b.n	23c8c <ble_ll_scan_rx_filter+0xf0>
            break;
        case BLE_LL_ADDR_SUBTYPE_IDENTITY:
            /* We shall ignore identity in TargetA if we are using RPA */
            if ((scanp->own_addr_type & 0x02) && rl && rl->rl_has_local) {
   23c6a:	f898 2001 	ldrb.w	r2, [r8, #1]
   23c6e:	f012 0f02 	tst.w	r2, #2
   23c72:	d002      	beq.n	23c7a <ble_ll_scan_rx_filter+0xde>
   23c74:	b10f      	cbz	r7, 23c7a <ble_ll_scan_rx_filter+0xde>
   23c76:	78ba      	ldrb	r2, [r7, #2]
   23c78:	b97a      	cbnz	r2, 23c9a <ble_ll_scan_rx_filter+0xfe>
                return 0;
            }
            /* Ignore if not directed to us */
            if (!ble_ll_is_our_devaddr(addrd->targeta, addrd->targeta_type)) {
   23c7a:	7a21      	ldrb	r1, [r4, #8]
   23c7c:	68e0      	ldr	r0, [r4, #12]
   23c7e:	f7f9 f9dd 	bl	1d03c <ble_ll_is_our_devaddr>
   23c82:	4603      	mov	r3, r0
   23c84:	b148      	cbz	r0, 23c9a <ble_ll_scan_rx_filter+0xfe>
    bool scan_req_allowed = true;
   23c86:	2601      	movs	r6, #1
   23c88:	e000      	b.n	23c8c <ble_ll_scan_rx_filter+0xf0>
   23c8a:	2601      	movs	r6, #1
        return 0;
    }
#endif

    /* Check on WL if required by scan filter policy */
    if (scanp->scan_filt_policy & 0x01) {
   23c8c:	f898 3002 	ldrb.w	r3, [r8, #2]
   23c90:	f013 0f01 	tst.w	r3, #1
   23c94:	d106      	bne.n	23ca4 <ble_ll_scan_rx_filter+0x108>
        if (!ble_ll_whitelist_match(addrd->adv_addr, addrd->adv_addr_type, resolved)) {
            return 0;
        }
    }

    return scan_req_allowed ? 1 : 2;
   23c96:	b186      	cbz	r6, 23cba <ble_ll_scan_rx_filter+0x11e>
   23c98:	2301      	movs	r3, #1
}
   23c9a:	4618      	mov	r0, r3
   23c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool scan_req_allowed = true;
   23ca0:	2601      	movs	r6, #1
   23ca2:	e7f3      	b.n	23c8c <ble_ll_scan_rx_filter+0xf0>
        if (!ble_ll_whitelist_match(addrd->adv_addr, addrd->adv_addr_type, resolved)) {
   23ca4:	462a      	mov	r2, r5
   23ca6:	7c21      	ldrb	r1, [r4, #16]
   23ca8:	6960      	ldr	r0, [r4, #20]
   23caa:	f001 fcf5 	bl	25698 <ble_ll_whitelist_match>
   23cae:	4603      	mov	r3, r0
   23cb0:	2800      	cmp	r0, #0
   23cb2:	d1f0      	bne.n	23c96 <ble_ll_scan_rx_filter+0xfa>
   23cb4:	e7f1      	b.n	23c9a <ble_ll_scan_rx_filter+0xfe>
                return 0;
   23cb6:	2300      	movs	r3, #0
   23cb8:	e7ef      	b.n	23c9a <ble_ll_scan_rx_filter+0xfe>
    return scan_req_allowed ? 1 : 2;
   23cba:	2302      	movs	r3, #2
   23cbc:	e7ed      	b.n	23c9a <ble_ll_scan_rx_filter+0xfe>
   23cbe:	bf00      	nop
   23cc0:	20008bc4 	.word	0x20008bc4
   23cc4:	20008a40 	.word	0x20008a40

00023cc8 <ble_ll_scan_rx_isr_on_legacy>:

static int
ble_ll_scan_rx_isr_on_legacy(uint8_t pdu_type, uint8_t *rxbuf,
                             struct ble_mbuf_hdr *hdr,
                             struct ble_ll_scan_addr_data *addrd)
{
   23cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23cca:	4606      	mov	r6, r0
   23ccc:	4614      	mov	r4, r2
   23cce:	461d      	mov	r5, r3
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    struct ble_ll_scan_params *scanp = scansm->scanp;
   23cd0:	4b27      	ldr	r3, [pc, #156]	; (23d70 <ble_ll_scan_rx_isr_on_legacy+0xa8>)
   23cd2:	6edf      	ldr	r7, [r3, #108]	; 0x6c
    struct ble_mbuf_hdr_rxinfo *rxinfo = &hdr->rxinfo;
    uint8_t sreq_adva_type;
    uint8_t *sreq_adva;
    int rc;

    ble_ll_scan_get_addr_data_from_legacy(pdu_type, rxbuf, addrd);
   23cd4:	462a      	mov	r2, r5
   23cd6:	f7ff fe79 	bl	239cc <ble_ll_scan_get_addr_data_from_legacy>

    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   23cda:	2e04      	cmp	r6, #4
   23cdc:	d127      	bne.n	23d2e <ble_ll_scan_rx_isr_on_legacy+0x66>
        if (!BLE_MBUF_HDR_SCAN_RSP_RXD(hdr)) {
   23cde:	8823      	ldrh	r3, [r4, #0]
   23ce0:	f013 0f08 	tst.w	r3, #8
   23ce4:	d03a      	beq.n	23d5c <ble_ll_scan_rx_isr_on_legacy+0x94>
             * update backoff.
             */
            return -1;
        }

        sreq_adva_type = !!(scansm->pdu_data.hdr_byte & BLE_ADV_PDU_HDR_RXADD_MASK);
   23ce6:	4b22      	ldr	r3, [pc, #136]	; (23d70 <ble_ll_scan_rx_isr_on_legacy+0xa8>)
   23ce8:	7d9a      	ldrb	r2, [r3, #22]

        /*
         * Ignore scan response if AdvA does not match AdvA in request and also
         * update backoff as if there was no scan response.
         */
        if ((addrd->adva_type != sreq_adva_type) ||
   23cea:	786b      	ldrb	r3, [r5, #1]
   23cec:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   23cf0:	d116      	bne.n	23d20 <ble_ll_scan_rx_isr_on_legacy+0x58>
            memcmp(addrd->adva, sreq_adva, BLE_DEV_ADDR_LEN)) {
   23cf2:	2206      	movs	r2, #6
   23cf4:	491f      	ldr	r1, [pc, #124]	; (23d74 <ble_ll_scan_rx_isr_on_legacy+0xac>)
   23cf6:	6868      	ldr	r0, [r5, #4]
   23cf8:	f7e7 fda6 	bl	b848 <memcmp>
        if ((addrd->adva_type != sreq_adva_type) ||
   23cfc:	4605      	mov	r5, r0
   23cfe:	b978      	cbnz	r0, 23d20 <ble_ll_scan_rx_isr_on_legacy+0x58>
        /*
         * We are not pushing this one through filters so need to update
         * rpa_index here as otherwise pkt_in won't be able to determine
         * advertiser address properly.
         */
        rxinfo->rpa_index = ble_hw_resolv_list_match();
   23d00:	f001 fec8 	bl	25a94 <ble_hw_resolv_list_match>
   23d04:	b240      	sxtb	r0, r0
   23d06:	71e0      	strb	r0, [r4, #7]
        if (rxinfo->rpa_index >= 0) {
   23d08:	2800      	cmp	r0, #0
   23d0a:	db03      	blt.n	23d14 <ble_ll_scan_rx_isr_on_legacy+0x4c>
            rxinfo->flags |= BLE_MBUF_HDR_F_RESOLVED;
   23d0c:	8823      	ldrh	r3, [r4, #0]
   23d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   23d12:	8023      	strh	r3, [r4, #0]
        }
#endif

        rxinfo->flags |= BLE_MBUF_HDR_F_DEVMATCH;
   23d14:	8823      	ldrh	r3, [r4, #0]
   23d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23d1a:	8023      	strh	r3, [r4, #0]
    }

    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
           ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
            (pdu_type == BLE_ADV_PDU_TYPE_ADV_SCAN_IND));
}
   23d1c:	4628      	mov	r0, r5
   23d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_ll_scan_req_backoff(scansm, 0);
   23d20:	2100      	movs	r1, #0
   23d22:	4813      	ldr	r0, [pc, #76]	; (23d70 <ble_ll_scan_rx_isr_on_legacy+0xa8>)
   23d24:	f7ff fe7d 	bl	23a22 <ble_ll_scan_req_backoff>
            return -1;
   23d28:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23d2c:	e7f6      	b.n	23d1c <ble_ll_scan_rx_isr_on_legacy+0x54>
    rc = ble_ll_scan_rx_filter(hdr, addrd);
   23d2e:	4629      	mov	r1, r5
   23d30:	4620      	mov	r0, r4
   23d32:	f7ff ff33 	bl	23b9c <ble_ll_scan_rx_filter>
    if (!rc) {
   23d36:	4605      	mov	r5, r0
   23d38:	2800      	cmp	r0, #0
   23d3a:	d0ef      	beq.n	23d1c <ble_ll_scan_rx_isr_on_legacy+0x54>
    rxinfo->flags |= BLE_MBUF_HDR_F_DEVMATCH;
   23d3c:	8823      	ldrh	r3, [r4, #0]
   23d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23d42:	8023      	strh	r3, [r4, #0]
    if (rc == 2) {
   23d44:	2802      	cmp	r0, #2
   23d46:	d00c      	beq.n	23d62 <ble_ll_scan_rx_isr_on_legacy+0x9a>
    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
   23d48:	793b      	ldrb	r3, [r7, #4]
   23d4a:	2b01      	cmp	r3, #1
   23d4c:	d001      	beq.n	23d52 <ble_ll_scan_rx_isr_on_legacy+0x8a>
   23d4e:	2500      	movs	r5, #0
   23d50:	e7e4      	b.n	23d1c <ble_ll_scan_rx_isr_on_legacy+0x54>
   23d52:	b146      	cbz	r6, 23d66 <ble_ll_scan_rx_isr_on_legacy+0x9e>
           ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
   23d54:	2e06      	cmp	r6, #6
   23d56:	d008      	beq.n	23d6a <ble_ll_scan_rx_isr_on_legacy+0xa2>
    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
   23d58:	2500      	movs	r5, #0
   23d5a:	e7df      	b.n	23d1c <ble_ll_scan_rx_isr_on_legacy+0x54>
            return -1;
   23d5c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23d60:	e7dc      	b.n	23d1c <ble_ll_scan_rx_isr_on_legacy+0x54>
        return 0;
   23d62:	2500      	movs	r5, #0
   23d64:	e7da      	b.n	23d1c <ble_ll_scan_rx_isr_on_legacy+0x54>
    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
   23d66:	2501      	movs	r5, #1
   23d68:	e7d8      	b.n	23d1c <ble_ll_scan_rx_isr_on_legacy+0x54>
   23d6a:	2501      	movs	r5, #1
   23d6c:	e7d6      	b.n	23d1c <ble_ll_scan_rx_isr_on_legacy+0x54>
   23d6e:	bf00      	nop
   23d70:	20008bc4 	.word	0x20008bc4
   23d74:	20008be1 	.word	0x20008be1

00023d78 <ble_ll_scan_req_tx_pdu_cb>:
{
   23d78:	b410      	push	{r4}
    memcpy(dptr, pdu_data->scana, BLE_DEV_ADDR_LEN);
   23d7a:	460b      	mov	r3, r1
   23d7c:	f853 4f17 	ldr.w	r4, [r3, #23]!
   23d80:	6004      	str	r4, [r0, #0]
   23d82:	889b      	ldrh	r3, [r3, #4]
   23d84:	8083      	strh	r3, [r0, #4]
    memcpy(dptr + BLE_DEV_ADDR_LEN, pdu_data->adva, BLE_DEV_ADDR_LEN);
   23d86:	460b      	mov	r3, r1
   23d88:	f853 4f1d 	ldr.w	r4, [r3, #29]!
   23d8c:	f8c0 4006 	str.w	r4, [r0, #6]
   23d90:	889b      	ldrh	r3, [r3, #4]
   23d92:	8143      	strh	r3, [r0, #10]
    *hdr_byte = pdu_data->hdr_byte;
   23d94:	7d8b      	ldrb	r3, [r1, #22]
   23d96:	7013      	strb	r3, [r2, #0]
}
   23d98:	200c      	movs	r0, #12
   23d9a:	f85d 4b04 	ldr.w	r4, [sp], #4
   23d9e:	4770      	bx	lr

00023da0 <ble_ll_scan_refresh_nrpa>:
{
   23da0:	b538      	push	{r3, r4, r5, lr}
   23da2:	4604      	mov	r4, r0
    return os_time_get();
   23da4:	f7e7 fb88 	bl	b4b8 <os_time_get>
    if ((ble_npl_stime_t)(now - scansm->scan_nrpa_timer) >= 0) {
   23da8:	68e3      	ldr	r3, [r4, #12]
   23daa:	1ac3      	subs	r3, r0, r3
   23dac:	2b00      	cmp	r3, #0
   23dae:	db0d      	blt.n	23dcc <ble_ll_scan_refresh_nrpa+0x2c>
   23db0:	4605      	mov	r5, r0
        ble_ll_rand_data_get(scansm->scan_nrpa, BLE_DEV_ADDR_LEN);
   23db2:	2106      	movs	r1, #6
   23db4:	f104 0010 	add.w	r0, r4, #16
   23db8:	f7ff f8b4 	bl	22f24 <ble_ll_rand_data_get>
        scansm->scan_nrpa[5] &= ~0xc0;
   23dbc:	7d63      	ldrb	r3, [r4, #21]
   23dbe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   23dc2:	7563      	strb	r3, [r4, #21]
        scansm->scan_nrpa_timer = now + ble_ll_resolv_get_rpa_tmo();
   23dc4:	f7ff fb94 	bl	234f0 <ble_ll_resolv_get_rpa_tmo>
   23dc8:	4428      	add	r0, r5
   23dca:	60e0      	str	r0, [r4, #12]
}
   23dcc:	bd38      	pop	{r3, r4, r5, pc}
	...

00023dd0 <ble_ll_scan_req_pdu_prepare>:
{
   23dd0:	b570      	push	{r4, r5, r6, lr}
   23dd2:	b082      	sub	sp, #8
   23dd4:	4604      	mov	r4, r0
   23dd6:	460e      	mov	r6, r1
    if (adv_addr_type) {
   23dd8:	bb1a      	cbnz	r2, 23e22 <ble_ll_scan_req_pdu_prepare+0x52>
    hdr_byte = BLE_ADV_PDU_TYPE_SCAN_REQ;
   23dda:	2503      	movs	r5, #3
    if (scansm->own_addr_type & 0x01) {
   23ddc:	7861      	ldrb	r1, [r4, #1]
   23dde:	f011 0f01 	tst.w	r1, #1
   23de2:	d020      	beq.n	23e26 <ble_ll_scan_req_pdu_prepare+0x56>
        hdr_byte |= BLE_ADV_PDU_HDR_TXADD_RAND;
   23de4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
        scana = g_random_addr;
   23de8:	4a13      	ldr	r2, [pc, #76]	; (23e38 <ble_ll_scan_req_pdu_prepare+0x68>)
    if (scansm->own_addr_type & 0x02) {
   23dea:	f011 0f02 	tst.w	r1, #2
   23dee:	d009      	beq.n	23e04 <ble_ll_scan_req_pdu_prepare+0x34>
        if (rl && rl->rl_has_local) {
   23df0:	b10b      	cbz	r3, 23df6 <ble_ll_scan_req_pdu_prepare+0x26>
   23df2:	789a      	ldrb	r2, [r3, #2]
   23df4:	b9ca      	cbnz	r2, 23e2a <ble_ll_scan_req_pdu_prepare+0x5a>
            ble_ll_scan_refresh_nrpa(scansm);
   23df6:	4620      	mov	r0, r4
   23df8:	f7ff ffd2 	bl	23da0 <ble_ll_scan_refresh_nrpa>
            scana = scansm->scan_nrpa;
   23dfc:	f104 0210 	add.w	r2, r4, #16
        hdr_byte |= BLE_ADV_PDU_HDR_TXADD_RAND;
   23e00:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    pdu_data->hdr_byte = hdr_byte;
   23e04:	75a5      	strb	r5, [r4, #22]
    memcpy(pdu_data->scana, scana, BLE_DEV_ADDR_LEN);
   23e06:	6813      	ldr	r3, [r2, #0]
   23e08:	f8c4 3017 	str.w	r3, [r4, #23]
   23e0c:	8893      	ldrh	r3, [r2, #4]
   23e0e:	f8a4 301b 	strh.w	r3, [r4, #27]
    memcpy(pdu_data->adva, adv_addr, BLE_DEV_ADDR_LEN);
   23e12:	6833      	ldr	r3, [r6, #0]
   23e14:	f8c4 301d 	str.w	r3, [r4, #29]
   23e18:	88b3      	ldrh	r3, [r6, #4]
   23e1a:	f8a4 3021 	strh.w	r3, [r4, #33]	; 0x21
}
   23e1e:	b002      	add	sp, #8
   23e20:	bd70      	pop	{r4, r5, r6, pc}
        hdr_byte |= BLE_ADV_PDU_HDR_RXADD_RAND;
   23e22:	2583      	movs	r5, #131	; 0x83
   23e24:	e7da      	b.n	23ddc <ble_ll_scan_req_pdu_prepare+0xc>
        scana = g_dev_addr;
   23e26:	4a05      	ldr	r2, [pc, #20]	; (23e3c <ble_ll_scan_req_pdu_prepare+0x6c>)
   23e28:	e7df      	b.n	23dea <ble_ll_scan_req_pdu_prepare+0x1a>
            ble_ll_resolv_get_priv_addr(rl, 1, rpa);
   23e2a:	466a      	mov	r2, sp
   23e2c:	2101      	movs	r1, #1
   23e2e:	4618      	mov	r0, r3
   23e30:	f7ff fb64 	bl	234fc <ble_ll_resolv_get_priv_addr>
            scana = rpa;
   23e34:	466a      	mov	r2, sp
   23e36:	e7e3      	b.n	23e00 <ble_ll_scan_req_pdu_prepare+0x30>
   23e38:	20008758 	.word	0x20008758
   23e3c:	20008750 	.word	0x20008750

00023e40 <ble_ll_scan_send_scan_req>:

static bool
ble_ll_scan_send_scan_req(uint8_t pdu_type, uint8_t *rxbuf,
                          struct ble_mbuf_hdr *hdr,
                          struct ble_ll_scan_addr_data *addrd)
{
   23e40:	b570      	push	{r4, r5, r6, lr}
   23e42:	4615      	mov	r5, r2
   23e44:	461c      	mov	r4, r3
        is_ext_adv = true;
    }
#endif

    /* Check if we already scanned this device successfully */
    if (ble_ll_scan_have_rxd_scan_rsp(addrd->adv_addr, addrd->adv_addr_type,
   23e46:	2300      	movs	r3, #0
   23e48:	461a      	mov	r2, r3
   23e4a:	7c21      	ldrb	r1, [r4, #16]
   23e4c:	6960      	ldr	r0, [r4, #20]
   23e4e:	f7ff fe3b 	bl	23ac8 <ble_ll_scan_have_rxd_scan_rsp>
   23e52:	bb40      	cbnz	r0, 23ea6 <ble_ll_scan_send_scan_req+0x66>
                                      is_ext_adv, adi)) {
        return false;
    }

    /* Better not be a scan response pending */
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   23e54:	4b17      	ldr	r3, [pc, #92]	; (23eb4 <ble_ll_scan_send_scan_req+0x74>)
   23e56:	78db      	ldrb	r3, [r3, #3]
   23e58:	b9db      	cbnz	r3, 23e92 <ble_ll_scan_send_scan_req+0x52>

    /* We want to send a request. See if backoff allows us */
    if (scansm->backoff_count > 0) {
   23e5a:	4b16      	ldr	r3, [pc, #88]	; (23eb4 <ble_ll_scan_send_scan_req+0x74>)
   23e5c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   23e5e:	b123      	cbz	r3, 23e6a <ble_ll_scan_send_scan_req+0x2a>
        if (--scansm->backoff_count != 0) {
   23e60:	3b01      	subs	r3, #1
   23e62:	b29b      	uxth	r3, r3
   23e64:	4a13      	ldr	r2, [pc, #76]	; (23eb4 <ble_ll_scan_send_scan_req+0x74>)
   23e66:	84d3      	strh	r3, [r2, #38]	; 0x26
   23e68:	b9fb      	cbnz	r3, 23eaa <ble_ll_scan_send_scan_req+0x6a>
        return false;
    }
#endif

    /* Use original AdvA in scan request (Core 5.1, Vol 6, Part B, section 6.3) */
    ble_ll_scan_req_pdu_prepare(scansm, addrd->adva, addrd->adva_type, addrd->rl);
   23e6a:	4e12      	ldr	r6, [pc, #72]	; (23eb4 <ble_ll_scan_send_scan_req+0x74>)
   23e6c:	69a3      	ldr	r3, [r4, #24]
   23e6e:	7862      	ldrb	r2, [r4, #1]
   23e70:	6861      	ldr	r1, [r4, #4]
   23e72:	4630      	mov	r0, r6
   23e74:	f7ff ffac 	bl	23dd0 <ble_ll_scan_req_pdu_prepare>

    rc = ble_phy_tx(ble_ll_scan_req_tx_pdu_cb, scansm, BLE_PHY_TRANSITION_TX_RX);
   23e78:	2202      	movs	r2, #2
   23e7a:	4631      	mov	r1, r6
   23e7c:	480e      	ldr	r0, [pc, #56]	; (23eb8 <ble_ll_scan_send_scan_req+0x78>)
   23e7e:	f002 fbb3 	bl	265e8 <ble_phy_tx>
    if (rc) {
   23e82:	b9a0      	cbnz	r0, 23eae <ble_ll_scan_send_scan_req+0x6e>
        return false;
    }

    scansm->scan_rsp_pending = 1;
   23e84:	2001      	movs	r0, #1
   23e86:	70f0      	strb	r0, [r6, #3]
    rxinfo->flags |= BLE_MBUF_HDR_F_SCAN_REQ_TXD;
   23e88:	882b      	ldrh	r3, [r5, #0]
   23e8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   23e8e:	802b      	strh	r3, [r5, #0]
        scansm->cur_aux_data = ble_ll_scan_aux_data_ref(aux_data);
        STATS_INC(ble_ll_stats, aux_scan_req_tx);
    }
#endif

    return true;
   23e90:	e00a      	b.n	23ea8 <ble_ll_scan_send_scan_req+0x68>
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   23e92:	f7e4 f995 	bl	81c0 <hal_debugger_connected>
   23e96:	b100      	cbz	r0, 23e9a <ble_ll_scan_send_scan_req+0x5a>
   23e98:	be01      	bkpt	0x0001
   23e9a:	2300      	movs	r3, #0
   23e9c:	461a      	mov	r2, r3
   23e9e:	4619      	mov	r1, r3
   23ea0:	4618      	mov	r0, r3
   23ea2:	f7e5 fd95 	bl	99d0 <__assert_func>
        return false;
   23ea6:	2000      	movs	r0, #0
}
   23ea8:	bd70      	pop	{r4, r5, r6, pc}
            return false;
   23eaa:	2000      	movs	r0, #0
   23eac:	e7fc      	b.n	23ea8 <ble_ll_scan_send_scan_req+0x68>
        return false;
   23eae:	2000      	movs	r0, #0
   23eb0:	e7fa      	b.n	23ea8 <ble_ll_scan_send_scan_req+0x68>
   23eb2:	bf00      	nop
   23eb4:	20008bc4 	.word	0x20008bc4
   23eb8:	00023d79 	.word	0x00023d79

00023ebc <ble_ll_scan_timer_cb>:
 *
 * @param arg Pointer to scan state machine.
 */
void
ble_ll_scan_timer_cb(void *arg)
{
   23ebc:	b508      	push	{r3, lr}
    struct ble_ll_scan_sm *scansm;

    scansm = (struct ble_ll_scan_sm *)arg;
    ble_ll_event_send(&scansm->scan_sched_ev);
   23ebe:	302c      	adds	r0, #44	; 0x2c
   23ec0:	f7f9 f9e4 	bl	1d28c <ble_ll_event_send>
}
   23ec4:	bd08      	pop	{r3, pc}
	...

00023ec8 <ble_ll_scan_start>:
{
   23ec8:	b570      	push	{r4, r5, r6, lr}
   23eca:	b082      	sub	sp, #8
    struct ble_ll_scan_params *scanp = scansm->scanp;
   23ecc:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   23ece:	78c3      	ldrb	r3, [r0, #3]
   23ed0:	2b00      	cmp	r3, #0
   23ed2:	d130      	bne.n	23f36 <ble_ll_scan_start+0x6e>
   23ed4:	460c      	mov	r4, r1
    ble_ll_get_chan_to_scan(scansm, &scan_chan, &phy);
   23ed6:	466a      	mov	r2, sp
   23ed8:	f10d 0107 	add.w	r1, sp, #7
   23edc:	f7ff fd3c 	bl	23958 <ble_ll_get_chan_to_scan>
    BLE_LL_ASSERT(!sch || scan_chan < BLE_PHY_ADV_CHAN_START);
   23ee0:	b11c      	cbz	r4, 23eea <ble_ll_scan_start+0x22>
   23ee2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23ee6:	2b24      	cmp	r3, #36	; 0x24
   23ee8:	d82f      	bhi.n	23f4a <ble_ll_scan_start+0x82>
    BLE_LL_ASSERT(sch || scan_chan >= BLE_PHY_ADV_CHAN_START);
   23eea:	2c00      	cmp	r4, #0
   23eec:	d037      	beq.n	23f5e <ble_ll_scan_start+0x96>
    rc = ble_phy_setchan(scan_chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   23eee:	4a39      	ldr	r2, [pc, #228]	; (23fd4 <ble_ll_scan_start+0x10c>)
   23ef0:	4939      	ldr	r1, [pc, #228]	; (23fd8 <ble_ll_scan_start+0x110>)
   23ef2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23ef6:	f002 f95f 	bl	261b8 <ble_phy_setchan>
    BLE_LL_ASSERT(rc == 0);
   23efa:	4606      	mov	r6, r0
   23efc:	2800      	cmp	r0, #0
   23efe:	d13c      	bne.n	23f7a <ble_ll_scan_start+0xb2>
    ble_phy_set_txend_cb(NULL, NULL);
   23f00:	2100      	movs	r1, #0
   23f02:	4608      	mov	r0, r1
   23f04:	f002 f916 	bl	26134 <ble_phy_set_txend_cb>
    ble_phy_encrypt_disable();
   23f08:	f002 f8fe 	bl	26108 <ble_phy_encrypt_disable>
    if (ble_ll_resolv_enabled()) {
   23f0c:	f7ff fbb2 	bl	23674 <ble_ll_resolv_enabled>
   23f10:	2800      	cmp	r0, #0
   23f12:	d03c      	beq.n	23f8e <ble_ll_scan_start+0xc6>
        ble_phy_resolv_list_enable();
   23f14:	f002 fbfe 	bl	26714 <ble_phy_resolv_list_enable>
    if (sch) {
   23f18:	2c00      	cmp	r4, #0
   23f1a:	d03b      	beq.n	23f94 <ble_ll_scan_start+0xcc>
        rc = ble_phy_rx_set_start_time(sch->start_time +
   23f1c:	6863      	ldr	r3, [r4, #4]
   23f1e:	4a2f      	ldr	r2, [pc, #188]	; (23fdc <ble_ll_scan_start+0x114>)
   23f20:	7810      	ldrb	r0, [r2, #0]
   23f22:	78a1      	ldrb	r1, [r4, #2]
   23f24:	4418      	add	r0, r3
   23f26:	f002 fb15 	bl	26554 <ble_phy_rx_set_start_time>
    if (!rc || rc == BLE_PHY_ERR_RX_LATE) {
   23f2a:	2800      	cmp	r0, #0
   23f2c:	d03b      	beq.n	23fa6 <ble_ll_scan_start+0xde>
   23f2e:	2806      	cmp	r0, #6
   23f30:	d039      	beq.n	23fa6 <ble_ll_scan_start+0xde>
   23f32:	4606      	mov	r6, r0
    return rc;
   23f34:	e043      	b.n	23fbe <ble_ll_scan_start+0xf6>
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   23f36:	f7e4 f943 	bl	81c0 <hal_debugger_connected>
   23f3a:	b100      	cbz	r0, 23f3e <ble_ll_scan_start+0x76>
   23f3c:	be01      	bkpt	0x0001
   23f3e:	2300      	movs	r3, #0
   23f40:	461a      	mov	r2, r3
   23f42:	4619      	mov	r1, r3
   23f44:	4618      	mov	r0, r3
   23f46:	f7e5 fd43 	bl	99d0 <__assert_func>
    BLE_LL_ASSERT(!sch || scan_chan < BLE_PHY_ADV_CHAN_START);
   23f4a:	f7e4 f939 	bl	81c0 <hal_debugger_connected>
   23f4e:	b100      	cbz	r0, 23f52 <ble_ll_scan_start+0x8a>
   23f50:	be01      	bkpt	0x0001
   23f52:	2300      	movs	r3, #0
   23f54:	461a      	mov	r2, r3
   23f56:	4619      	mov	r1, r3
   23f58:	4618      	mov	r0, r3
   23f5a:	f7e5 fd39 	bl	99d0 <__assert_func>
    BLE_LL_ASSERT(sch || scan_chan >= BLE_PHY_ADV_CHAN_START);
   23f5e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23f62:	2b24      	cmp	r3, #36	; 0x24
   23f64:	d8c3      	bhi.n	23eee <ble_ll_scan_start+0x26>
   23f66:	f7e4 f92b 	bl	81c0 <hal_debugger_connected>
   23f6a:	b100      	cbz	r0, 23f6e <ble_ll_scan_start+0xa6>
   23f6c:	be01      	bkpt	0x0001
   23f6e:	2300      	movs	r3, #0
   23f70:	461a      	mov	r2, r3
   23f72:	4619      	mov	r1, r3
   23f74:	4618      	mov	r0, r3
   23f76:	f7e5 fd2b 	bl	99d0 <__assert_func>
    BLE_LL_ASSERT(rc == 0);
   23f7a:	f7e4 f921 	bl	81c0 <hal_debugger_connected>
   23f7e:	b100      	cbz	r0, 23f82 <ble_ll_scan_start+0xba>
   23f80:	be01      	bkpt	0x0001
   23f82:	2300      	movs	r3, #0
   23f84:	461a      	mov	r2, r3
   23f86:	4619      	mov	r1, r3
   23f88:	4618      	mov	r0, r3
   23f8a:	f7e5 fd21 	bl	99d0 <__assert_func>
        ble_phy_resolv_list_disable();
   23f8e:	f002 fbd1 	bl	26734 <ble_phy_resolv_list_disable>
   23f92:	e7c1      	b.n	23f18 <ble_ll_scan_start+0x50>
        rc = ble_phy_rx_set_start_time(os_cputime_get32() +
   23f94:	f7f7 fee1 	bl	1bd5a <os_cputime_get32>
   23f98:	4b10      	ldr	r3, [pc, #64]	; (23fdc <ble_ll_scan_start+0x114>)
   23f9a:	781b      	ldrb	r3, [r3, #0]
   23f9c:	2100      	movs	r1, #0
   23f9e:	4418      	add	r0, r3
   23fa0:	f002 fad8 	bl	26554 <ble_phy_rx_set_start_time>
   23fa4:	e7c1      	b.n	23f2a <ble_ll_scan_start+0x62>
        if (scanp->scan_filt_policy & 1) {
   23fa6:	78ab      	ldrb	r3, [r5, #2]
   23fa8:	f013 0f01 	tst.w	r3, #1
   23fac:	d00a      	beq.n	23fc4 <ble_ll_scan_start+0xfc>
            ble_ll_whitelist_enable();
   23fae:	f001 fbc9 	bl	25744 <ble_ll_whitelist_enable>
        if (scanp->scan_type == BLE_SCAN_TYPE_INITIATE) {
   23fb2:	792b      	ldrb	r3, [r5, #4]
   23fb4:	2b02      	cmp	r3, #2
   23fb6:	d008      	beq.n	23fca <ble_ll_scan_start+0x102>
            ble_ll_state_set(BLE_LL_STATE_SCANNING);
   23fb8:	2002      	movs	r0, #2
   23fba:	f7f9 f95b 	bl	1d274 <ble_ll_state_set>
}
   23fbe:	4630      	mov	r0, r6
   23fc0:	b002      	add	sp, #8
   23fc2:	bd70      	pop	{r4, r5, r6, pc}
            ble_ll_whitelist_disable();
   23fc4:	f001 fbc2 	bl	2574c <ble_ll_whitelist_disable>
   23fc8:	e7f3      	b.n	23fb2 <ble_ll_scan_start+0xea>
            ble_ll_state_set(BLE_LL_STATE_INITIATING);
   23fca:	2003      	movs	r0, #3
   23fcc:	f7f9 f952 	bl	1d274 <ble_ll_state_set>
   23fd0:	e7f5      	b.n	23fbe <ble_ll_scan_start+0xf6>
   23fd2:	bf00      	nop
   23fd4:	00555555 	.word	0x00555555
   23fd8:	8e89bed6 	.word	0x8e89bed6
   23fdc:	20008cf0 	.word	0x20008cf0

00023fe0 <ble_ll_scan_rx_pkt_in_restore_addr_data>:
#endif

static void
ble_ll_scan_rx_pkt_in_restore_addr_data(struct ble_mbuf_hdr *hdr,
                                        struct ble_ll_scan_addr_data *addrd)
{
   23fe0:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    struct ble_mbuf_hdr_rxinfo *rxinfo = &hdr->rxinfo;
    struct ble_ll_resolv_entry *rl;
#endif

    addrd->adv_addr = addrd->adva;
   23fe2:	684b      	ldr	r3, [r1, #4]
   23fe4:	614b      	str	r3, [r1, #20]
    addrd->adv_addr_type = addrd->adva_type;
   23fe6:	784b      	ldrb	r3, [r1, #1]
   23fe8:	740b      	strb	r3, [r1, #16]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    if (rxinfo->rpa_index >= 0) {
   23fea:	f990 2007 	ldrsb.w	r2, [r0, #7]
   23fee:	2a00      	cmp	r2, #0
   23ff0:	db0c      	blt.n	2400c <ble_ll_scan_rx_pkt_in_restore_addr_data+0x2c>
        rl = &g_ble_ll_resolv_list[rxinfo->rpa_index];
   23ff2:	2336      	movs	r3, #54	; 0x36
   23ff4:	fb03 f302 	mul.w	r3, r3, r2
   23ff8:	4c0d      	ldr	r4, [pc, #52]	; (24030 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x50>)
   23ffa:	191d      	adds	r5, r3, r4
        addrd->adv_addr = rl->rl_identity_addr;
   23ffc:	f103 0220 	add.w	r2, r3, #32
   24000:	4422      	add	r2, r4
   24002:	3204      	adds	r2, #4
   24004:	614a      	str	r2, [r1, #20]
        addrd->adv_addr_type = rl->rl_addr_type;
   24006:	5d1b      	ldrb	r3, [r3, r4]
   24008:	740b      	strb	r3, [r1, #16]
        addrd->rl = rl;
   2400a:	618d      	str	r5, [r1, #24]
    }
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_TARGETA_RESOLVED) {
   2400c:	8803      	ldrh	r3, [r0, #0]
   2400e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   24012:	d100      	bne.n	24016 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x36>
        addrd->targeta = ble_ll_get_our_devaddr(scansm->own_addr_type & 1);
        addrd->targeta_type = scansm->own_addr_type & 1;
    }
#endif
}
   24014:	bd38      	pop	{r3, r4, r5, pc}
   24016:	460c      	mov	r4, r1
        addrd->targeta = ble_ll_get_our_devaddr(scansm->own_addr_type & 1);
   24018:	4d06      	ldr	r5, [pc, #24]	; (24034 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x54>)
   2401a:	7868      	ldrb	r0, [r5, #1]
   2401c:	f000 0001 	and.w	r0, r0, #1
   24020:	f7f9 f820 	bl	1d064 <ble_ll_get_our_devaddr>
   24024:	60e0      	str	r0, [r4, #12]
        addrd->targeta_type = scansm->own_addr_type & 1;
   24026:	786b      	ldrb	r3, [r5, #1]
   24028:	f003 0301 	and.w	r3, r3, #1
   2402c:	7223      	strb	r3, [r4, #8]
}
   2402e:	e7f1      	b.n	24014 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x34>
   24030:	20008a40 	.word	0x20008a40
   24034:	20008bc4 	.word	0x20008bc4

00024038 <ble_ll_scan_dup_check_legacy>:
{
   24038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2403a:	460e      	mov	r6, r1
   2403c:	4617      	mov	r7, r2
    type = BLE_LL_SCAN_ENTRY_TYPE_LEGACY(addr_type);
   2403e:	f000 0501 	and.w	r5, r0, #1
    TAILQ_FOREACH(e, &g_scan_dup_list, link) {
   24042:	4b39      	ldr	r3, [pc, #228]	; (24128 <ble_ll_scan_dup_check_legacy+0xf0>)
   24044:	681c      	ldr	r4, [r3, #0]
   24046:	e000      	b.n	2404a <ble_ll_scan_dup_check_legacy+0x12>
   24048:	68a4      	ldr	r4, [r4, #8]
   2404a:	b14c      	cbz	r4, 24060 <ble_ll_scan_dup_check_legacy+0x28>
        if ((e->type == type) && !memcmp(e->addr, addr, 6)) {
   2404c:	7823      	ldrb	r3, [r4, #0]
   2404e:	42ab      	cmp	r3, r5
   24050:	d1fa      	bne.n	24048 <ble_ll_scan_dup_check_legacy+0x10>
   24052:	2206      	movs	r2, #6
   24054:	4631      	mov	r1, r6
   24056:	1c60      	adds	r0, r4, #1
   24058:	f7e7 fbf6 	bl	b848 <memcmp>
   2405c:	2800      	cmp	r0, #0
   2405e:	d1f3      	bne.n	24048 <ble_ll_scan_dup_check_legacy+0x10>
    if (e) {
   24060:	2c00      	cmp	r4, #0
   24062:	d02d      	beq.n	240c0 <ble_ll_scan_dup_check_legacy+0x88>
        if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   24064:	2f01      	cmp	r7, #1
   24066:	d01a      	beq.n	2409e <ble_ll_scan_dup_check_legacy+0x66>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   24068:	2f04      	cmp	r7, #4
   2406a:	d01c      	beq.n	240a6 <ble_ll_scan_dup_check_legacy+0x6e>
            rc = e->flags & BLE_LL_SCAN_DUP_F_ADV_REPORT_SENT;
   2406c:	79e0      	ldrb	r0, [r4, #7]
   2406e:	f000 0001 	and.w	r0, r0, #1
    if (e != TAILQ_FIRST(&g_scan_dup_list)) {
   24072:	4b2d      	ldr	r3, [pc, #180]	; (24128 <ble_ll_scan_dup_check_legacy+0xf0>)
   24074:	681b      	ldr	r3, [r3, #0]
   24076:	429c      	cmp	r4, r3
   24078:	d010      	beq.n	2409c <ble_ll_scan_dup_check_legacy+0x64>
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   2407a:	68a3      	ldr	r3, [r4, #8]
   2407c:	b1bb      	cbz	r3, 240ae <ble_ll_scan_dup_check_legacy+0x76>
   2407e:	68e2      	ldr	r2, [r4, #12]
   24080:	60da      	str	r2, [r3, #12]
   24082:	68e3      	ldr	r3, [r4, #12]
   24084:	68a2      	ldr	r2, [r4, #8]
   24086:	601a      	str	r2, [r3, #0]
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   24088:	4b27      	ldr	r3, [pc, #156]	; (24128 <ble_ll_scan_dup_check_legacy+0xf0>)
   2408a:	681b      	ldr	r3, [r3, #0]
   2408c:	60a3      	str	r3, [r4, #8]
   2408e:	b193      	cbz	r3, 240b6 <ble_ll_scan_dup_check_legacy+0x7e>
   24090:	f104 0208 	add.w	r2, r4, #8
   24094:	60da      	str	r2, [r3, #12]
   24096:	4b24      	ldr	r3, [pc, #144]	; (24128 <ble_ll_scan_dup_check_legacy+0xf0>)
   24098:	601c      	str	r4, [r3, #0]
   2409a:	60e3      	str	r3, [r4, #12]
}
   2409c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = e->flags & BLE_LL_SCAN_DUP_F_DIR_ADV_REPORT_SENT;
   2409e:	79e0      	ldrb	r0, [r4, #7]
   240a0:	f000 0002 	and.w	r0, r0, #2
   240a4:	e7e5      	b.n	24072 <ble_ll_scan_dup_check_legacy+0x3a>
            rc = e->flags & BLE_LL_SCAN_DUP_F_SCAN_RSP_SENT;
   240a6:	79e0      	ldrb	r0, [r4, #7]
   240a8:	f000 0004 	and.w	r0, r0, #4
   240ac:	e7e1      	b.n	24072 <ble_ll_scan_dup_check_legacy+0x3a>
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   240ae:	68e2      	ldr	r2, [r4, #12]
   240b0:	4b1d      	ldr	r3, [pc, #116]	; (24128 <ble_ll_scan_dup_check_legacy+0xf0>)
   240b2:	605a      	str	r2, [r3, #4]
   240b4:	e7e5      	b.n	24082 <ble_ll_scan_dup_check_legacy+0x4a>
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   240b6:	f104 0308 	add.w	r3, r4, #8
   240ba:	4a1b      	ldr	r2, [pc, #108]	; (24128 <ble_ll_scan_dup_check_legacy+0xf0>)
   240bc:	6053      	str	r3, [r2, #4]
   240be:	e7ea      	b.n	24096 <ble_ll_scan_dup_check_legacy+0x5e>
    e = os_memblock_get(&g_scan_dup_pool);
   240c0:	481a      	ldr	r0, [pc, #104]	; (2412c <ble_ll_scan_dup_check_legacy+0xf4>)
   240c2:	f7e6 fd4e 	bl	ab62 <os_memblock_get>
    if (!e) {
   240c6:	4603      	mov	r3, r0
   240c8:	b1c8      	cbz	r0, 240fe <ble_ll_scan_dup_check_legacy+0xc6>
    memset(e, 0, sizeof(*e));
   240ca:	2200      	movs	r2, #0
   240cc:	601a      	str	r2, [r3, #0]
   240ce:	605a      	str	r2, [r3, #4]
   240d0:	609a      	str	r2, [r3, #8]
   240d2:	60da      	str	r2, [r3, #12]
        e->flags = 0;
   240d4:	71da      	strb	r2, [r3, #7]
        e->type = type;
   240d6:	461a      	mov	r2, r3
   240d8:	f802 5b01 	strb.w	r5, [r2], #1
        memcpy(e->addr, addr, 6);
   240dc:	6831      	ldr	r1, [r6, #0]
   240de:	f8c3 1001 	str.w	r1, [r3, #1]
   240e2:	88b1      	ldrh	r1, [r6, #4]
   240e4:	8091      	strh	r1, [r2, #4]
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   240e6:	4a10      	ldr	r2, [pc, #64]	; (24128 <ble_ll_scan_dup_check_legacy+0xf0>)
   240e8:	6812      	ldr	r2, [r2, #0]
   240ea:	609a      	str	r2, [r3, #8]
   240ec:	b1ba      	cbz	r2, 2411e <ble_ll_scan_dup_check_legacy+0xe6>
   240ee:	f103 0108 	add.w	r1, r3, #8
   240f2:	60d1      	str	r1, [r2, #12]
   240f4:	4a0c      	ldr	r2, [pc, #48]	; (24128 <ble_ll_scan_dup_check_legacy+0xf0>)
   240f6:	6013      	str	r3, [r2, #0]
   240f8:	60da      	str	r2, [r3, #12]
        rc = 0;
   240fa:	2000      	movs	r0, #0
    return rc;
   240fc:	e7ce      	b.n	2409c <ble_ll_scan_dup_check_legacy+0x64>
        e = TAILQ_LAST(&g_scan_dup_list, ble_ll_scan_dup_list);
   240fe:	4b0a      	ldr	r3, [pc, #40]	; (24128 <ble_ll_scan_dup_check_legacy+0xf0>)
   24100:	685b      	ldr	r3, [r3, #4]
   24102:	685b      	ldr	r3, [r3, #4]
   24104:	681b      	ldr	r3, [r3, #0]
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   24106:	689a      	ldr	r2, [r3, #8]
   24108:	b12a      	cbz	r2, 24116 <ble_ll_scan_dup_check_legacy+0xde>
   2410a:	68d9      	ldr	r1, [r3, #12]
   2410c:	60d1      	str	r1, [r2, #12]
   2410e:	68da      	ldr	r2, [r3, #12]
   24110:	6899      	ldr	r1, [r3, #8]
   24112:	6011      	str	r1, [r2, #0]
   24114:	e7d9      	b.n	240ca <ble_ll_scan_dup_check_legacy+0x92>
   24116:	68d9      	ldr	r1, [r3, #12]
   24118:	4a03      	ldr	r2, [pc, #12]	; (24128 <ble_ll_scan_dup_check_legacy+0xf0>)
   2411a:	6051      	str	r1, [r2, #4]
   2411c:	e7f7      	b.n	2410e <ble_ll_scan_dup_check_legacy+0xd6>
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   2411e:	f103 0208 	add.w	r2, r3, #8
   24122:	4901      	ldr	r1, [pc, #4]	; (24128 <ble_ll_scan_dup_check_legacy+0xf0>)
   24124:	604a      	str	r2, [r1, #4]
   24126:	e7e5      	b.n	240f4 <ble_ll_scan_dup_check_legacy+0xbc>
   24128:	20008c4c 	.word	0x20008c4c
   2412c:	20008cd4 	.word	0x20008cd4

00024130 <ble_ll_hci_send_dir_adv_report>:
{
   24130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24132:	4605      	mov	r5, r0
   24134:	460f      	mov	r7, r1
   24136:	4614      	mov	r4, r2
   24138:	461e      	mov	r6, r3
    if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT)) {
   2413a:	200b      	movs	r0, #11
   2413c:	f7fe fcd0 	bl	22ae0 <ble_ll_hci_is_le_event_enabled>
   24140:	b1f8      	cbz	r0, 24182 <ble_ll_hci_send_dir_adv_report+0x52>
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   24142:	2001      	movs	r0, #1
   24144:	f7f2 fa56 	bl	165f4 <ble_hci_trans_buf_alloc>
    if (!hci_ev) {
   24148:	b1f0      	cbz	r0, 24188 <ble_ll_hci_send_dir_adv_report+0x58>
    hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   2414a:	223e      	movs	r2, #62	; 0x3e
   2414c:	7002      	strb	r2, [r0, #0]
    hci_ev->length = sizeof(*ev) + sizeof(*(ev->reports));
   2414e:	2212      	movs	r2, #18
   24150:	7042      	strb	r2, [r0, #1]
    ev->subev_code = BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT;
   24152:	220b      	movs	r2, #11
   24154:	7082      	strb	r2, [r0, #2]
    ev->num_reports = 1;
   24156:	2201      	movs	r2, #1
   24158:	70c2      	strb	r2, [r0, #3]
    ev->reports[0].type = BLE_HCI_ADV_RPT_EVTYPE_DIR_IND;
   2415a:	7102      	strb	r2, [r0, #4]
    ev->reports[0].addr_type = addr_type;
   2415c:	7147      	strb	r7, [r0, #5]
    memcpy(ev->reports[0].addr, addr, BLE_DEV_ADDR_LEN);
   2415e:	682a      	ldr	r2, [r5, #0]
   24160:	f8c0 2006 	str.w	r2, [r0, #6]
   24164:	88aa      	ldrh	r2, [r5, #4]
   24166:	8142      	strh	r2, [r0, #10]
    ev->reports[0].dir_addr_type = inita_type;
   24168:	7306      	strb	r6, [r0, #12]
    memcpy(ev->reports[0].dir_addr, inita, BLE_DEV_ADDR_LEN);
   2416a:	6822      	ldr	r2, [r4, #0]
   2416c:	f8c0 200d 	str.w	r2, [r0, #13]
   24170:	88a2      	ldrh	r2, [r4, #4]
   24172:	f8a0 2011 	strh.w	r2, [r0, #17]
    ev->reports[0].rssi = rssi;
   24176:	f99d 2018 	ldrsb.w	r2, [sp, #24]
   2417a:	74c2      	strb	r2, [r0, #19]
    return ble_ll_hci_event_send(hci_ev);
   2417c:	f7fe fc0d 	bl	2299a <ble_ll_hci_event_send>
}
   24180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -1;
   24182:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24186:	e7fb      	b.n	24180 <ble_ll_hci_send_dir_adv_report+0x50>
        return -1;
   24188:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2418c:	e7f8      	b.n	24180 <ble_ll_hci_send_dir_adv_report+0x50>

0002418e <ble_ll_hci_send_adv_report>:
{
   2418e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24192:	4681      	mov	r9, r0
   24194:	460e      	mov	r6, r1
   24196:	4690      	mov	r8, r2
   24198:	461f      	mov	r7, r3
   2419a:	f89d 5020 	ldrb.w	r5, [sp, #32]
    if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_ADV_RPT)) {
   2419e:	2002      	movs	r0, #2
   241a0:	f7fe fc9e 	bl	22ae0 <ble_ll_hci_is_le_event_enabled>
   241a4:	b360      	cbz	r0, 24200 <ble_ll_hci_send_adv_report+0x72>
    if ((sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len + 1) > BLE_HCI_MAX_DATA_LEN) {
   241a6:	f105 030c 	add.w	r3, r5, #12
   241aa:	2b44      	cmp	r3, #68	; 0x44
   241ac:	d82b      	bhi.n	24206 <ble_ll_hci_send_adv_report+0x78>
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   241ae:	2001      	movs	r0, #1
   241b0:	f7f2 fa20 	bl	165f4 <ble_hci_trans_buf_alloc>
    if (!hci_ev) {
   241b4:	4604      	mov	r4, r0
   241b6:	b348      	cbz	r0, 2420c <ble_ll_hci_send_adv_report+0x7e>
    hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   241b8:	233e      	movs	r3, #62	; 0x3e
   241ba:	7003      	strb	r3, [r0, #0]
    hci_ev->length = sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len + 1;
   241bc:	f105 030c 	add.w	r3, r5, #12
   241c0:	7043      	strb	r3, [r0, #1]
    ev = (void *) hci_ev->data;
   241c2:	f100 0a02 	add.w	sl, r0, #2
    ev->subev_code = BLE_HCI_LE_SUBEV_ADV_RPT;
   241c6:	2302      	movs	r3, #2
   241c8:	7083      	strb	r3, [r0, #2]
    ev->num_reports = 1;
   241ca:	2301      	movs	r3, #1
   241cc:	70c3      	strb	r3, [r0, #3]
    ev->reports[0].type = evtype;
   241ce:	f880 9004 	strb.w	r9, [r0, #4]
    ev->reports[0].addr_type = addr_type;
   241d2:	f880 8005 	strb.w	r8, [r0, #5]
    memcpy(ev->reports[0].addr, addr, BLE_DEV_ADDR_LEN);
   241d6:	6833      	ldr	r3, [r6, #0]
   241d8:	f8c0 3006 	str.w	r3, [r0, #6]
   241dc:	88b3      	ldrh	r3, [r6, #4]
   241de:	8143      	strh	r3, [r0, #10]
    ev->reports[0].data_len = adv_data_len;
   241e0:	7305      	strb	r5, [r0, #12]
    os_mbuf_copydata(adv_data, 0, adv_data_len, ev->reports[0].data);
   241e2:	f100 030d 	add.w	r3, r0, #13
   241e6:	462a      	mov	r2, r5
   241e8:	2100      	movs	r1, #0
   241ea:	9809      	ldr	r0, [sp, #36]	; 0x24
   241ec:	f7e6 f96c 	bl	a4c8 <os_mbuf_copydata>
    ev_rssi = (int8_t *) (hci_ev->data + sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len);
   241f0:	350b      	adds	r5, #11
    *ev_rssi = rssi;
   241f2:	f80a 7005 	strb.w	r7, [sl, r5]
    return ble_ll_hci_event_send(hci_ev);
   241f6:	4620      	mov	r0, r4
   241f8:	f7fe fbcf 	bl	2299a <ble_ll_hci_event_send>
}
   241fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return -1;
   24200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24204:	e7fa      	b.n	241fc <ble_ll_hci_send_adv_report+0x6e>
        return -1;
   24206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2420a:	e7f7      	b.n	241fc <ble_ll_hci_send_adv_report+0x6e>
        return -1;
   2420c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24210:	e7f4      	b.n	241fc <ble_ll_hci_send_adv_report+0x6e>

00024212 <ble_ll_scan_send_adv_report>:
{
   24212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24216:	b085      	sub	sp, #20
   24218:	4605      	mov	r5, r0
   2421a:	468a      	mov	sl, r1
   2421c:	4616      	mov	r6, r2
   2421e:	9303      	str	r3, [sp, #12]
   24220:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   24224:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   24228:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   2422c:	2801      	cmp	r0, #1
   2422e:	d030      	beq.n	24292 <ble_ll_scan_send_adv_report+0x80>
        if (pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) {
   24230:	b120      	cbz	r0, 2423c <ble_ll_scan_send_adv_report+0x2a>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_ADV_SCAN_IND) {
   24232:	2806      	cmp	r0, #6
   24234:	d038      	beq.n	242a8 <ble_ll_scan_send_adv_report+0x96>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_ADV_NONCONN_IND) {
   24236:	2802      	cmp	r0, #2
   24238:	d034      	beq.n	242a4 <ble_ll_scan_send_adv_report+0x92>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_SCAN_RSP;
   2423a:	2504      	movs	r5, #4
        adv_data_len = om->om_data[1] - BLE_DEV_ADDR_LEN;
   2423c:	f8d8 3000 	ldr.w	r3, [r8]
   24240:	785c      	ldrb	r4, [r3, #1]
   24242:	3c06      	subs	r4, #6
   24244:	b2e4      	uxtb	r4, r4
        os_mbuf_adj(om, BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN);
   24246:	2108      	movs	r1, #8
   24248:	4640      	mov	r0, r8
   2424a:	f7e6 f96a 	bl	a522 <os_mbuf_adj>
    uint8_t subev = BLE_HCI_LE_SUBEV_ADV_RPT;
   2424e:	f04f 0b02 	mov.w	fp, #2
    if (BLE_MBUF_HDR_RESOLVED(hdr)) {
   24252:	f8b9 3000 	ldrh.w	r3, [r9]
   24256:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2425a:	d001      	beq.n	24260 <ble_ll_scan_send_adv_report+0x4e>
        adva_type += 2;
   2425c:	3602      	adds	r6, #2
   2425e:	b2f6      	uxtb	r6, r6
    if (BLE_MBUF_HDR_TARGETA_RESOLVED(hdr)) {
   24260:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   24264:	d001      	beq.n	2426a <ble_ll_scan_send_adv_report+0x58>
        inita_type += 2;
   24266:	3702      	adds	r7, #2
   24268:	b2ff      	uxtb	r7, r7
    if (subev == BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT) {
   2426a:	f1bb 0f0b 	cmp.w	fp, #11
   2426e:	d021      	beq.n	242b4 <ble_ll_scan_send_adv_report+0xa2>
    rc = ble_ll_hci_send_adv_report(evtype, adva, adva_type, hdr->rxinfo.rssi,
   24270:	f999 3004 	ldrsb.w	r3, [r9, #4]
   24274:	f8cd 8004 	str.w	r8, [sp, #4]
   24278:	9400      	str	r4, [sp, #0]
   2427a:	4632      	mov	r2, r6
   2427c:	4651      	mov	r1, sl
   2427e:	4628      	mov	r0, r5
   24280:	f7ff ff85 	bl	2418e <ble_ll_hci_send_adv_report>
    if (!rc && scansm->scan_filt_dups) {
   24284:	b910      	cbnz	r0, 2428c <ble_ll_scan_send_adv_report+0x7a>
   24286:	9b11      	ldr	r3, [sp, #68]	; 0x44
   24288:	789b      	ldrb	r3, [r3, #2]
   2428a:	b9eb      	cbnz	r3, 242c8 <ble_ll_scan_send_adv_report+0xb6>
}
   2428c:	b005      	add	sp, #20
   2428e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ble_ll_is_rpa(inita, inita_type)) {
   24292:	4639      	mov	r1, r7
   24294:	4618      	mov	r0, r3
   24296:	f7f8 fe23 	bl	1cee0 <ble_ll_is_rpa>
   2429a:	b938      	cbnz	r0, 242ac <ble_ll_scan_send_adv_report+0x9a>
        adv_data_len = 0;
   2429c:	2400      	movs	r4, #0
    uint8_t subev = BLE_HCI_LE_SUBEV_ADV_RPT;
   2429e:	f04f 0b02 	mov.w	fp, #2
   242a2:	e7d6      	b.n	24252 <ble_ll_scan_send_adv_report+0x40>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_NONCONN_IND;
   242a4:	2503      	movs	r5, #3
   242a6:	e7c9      	b.n	2423c <ble_ll_scan_send_adv_report+0x2a>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_SCAN_IND;
   242a8:	2502      	movs	r5, #2
   242aa:	e7c7      	b.n	2423c <ble_ll_scan_send_adv_report+0x2a>
        adv_data_len = 0;
   242ac:	2400      	movs	r4, #0
            subev = BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT;
   242ae:	f04f 0b0b 	mov.w	fp, #11
   242b2:	e7ce      	b.n	24252 <ble_ll_scan_send_adv_report+0x40>
        rc = ble_ll_hci_send_dir_adv_report(adva, adva_type, inita, inita_type,
   242b4:	f999 3004 	ldrsb.w	r3, [r9, #4]
   242b8:	9300      	str	r3, [sp, #0]
   242ba:	463b      	mov	r3, r7
   242bc:	9a03      	ldr	r2, [sp, #12]
   242be:	4631      	mov	r1, r6
   242c0:	4650      	mov	r0, sl
   242c2:	f7ff ff35 	bl	24130 <ble_ll_hci_send_dir_adv_report>
        goto done;
   242c6:	e7dd      	b.n	24284 <ble_ll_scan_send_adv_report+0x72>
        ble_ll_scan_dup_update_legacy(adva_type, adva, subev, evtype);
   242c8:	462b      	mov	r3, r5
   242ca:	465a      	mov	r2, fp
   242cc:	4651      	mov	r1, sl
   242ce:	4630      	mov	r0, r6
   242d0:	f7ff fc34 	bl	23b3c <ble_ll_scan_dup_update_legacy>
}
   242d4:	e7da      	b.n	2428c <ble_ll_scan_send_adv_report+0x7a>
	...

000242d8 <ble_ll_scan_rx_pkt_in_on_legacy>:

static void
ble_ll_scan_rx_pkt_in_on_legacy(uint8_t pdu_type, struct os_mbuf *om,
                                struct ble_mbuf_hdr *hdr,
                                struct ble_ll_scan_addr_data *addrd)
{
   242d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   242dc:	b084      	sub	sp, #16
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    uint8_t *rxbuf = om->om_data;
   242de:	680e      	ldr	r6, [r1, #0]
    bool send_hci_report;


    if (!BLE_MBUF_HDR_DEVMATCH(hdr) ||
   242e0:	8814      	ldrh	r4, [r2, #0]
   242e2:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
   242e6:	2dc0      	cmp	r5, #192	; 0xc0
   242e8:	d002      	beq.n	242f0 <ble_ll_scan_rx_pkt_in_on_legacy+0x18>
    }

    if (BLE_MBUF_HDR_SCAN_RSP_RXD(hdr)) {
        ble_ll_scan_req_backoff(scansm, 1);
    }
}
   242ea:	b004      	add	sp, #16
   242ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        !BLE_MBUF_HDR_CRC_OK(hdr) ||
   242f0:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   242f4:	d1f9      	bne.n	242ea <ble_ll_scan_rx_pkt_in_on_legacy+0x12>
        !scansm->scan_enabled) {
   242f6:	4c1a      	ldr	r4, [pc, #104]	; (24360 <ble_ll_scan_rx_pkt_in_on_legacy+0x88>)
   242f8:	7824      	ldrb	r4, [r4, #0]
        BLE_MBUF_HDR_IGNORED(hdr) ||
   242fa:	2c00      	cmp	r4, #0
   242fc:	d0f5      	beq.n	242ea <ble_ll_scan_rx_pkt_in_on_legacy+0x12>
   242fe:	461f      	mov	r7, r3
   24300:	4615      	mov	r5, r2
   24302:	460c      	mov	r4, r1
   24304:	4680      	mov	r8, r0
    ble_ll_scan_get_addr_data_from_legacy(pdu_type, rxbuf, addrd);
   24306:	461a      	mov	r2, r3
   24308:	4631      	mov	r1, r6
   2430a:	f7ff fb5f 	bl	239cc <ble_ll_scan_get_addr_data_from_legacy>
    ble_ll_scan_rx_pkt_in_restore_addr_data(hdr, addrd);
   2430e:	4639      	mov	r1, r7
   24310:	4628      	mov	r0, r5
   24312:	f7ff fe65 	bl	23fe0 <ble_ll_scan_rx_pkt_in_restore_addr_data>
    send_hci_report = !scansm->scan_filt_dups ||
   24316:	4b12      	ldr	r3, [pc, #72]	; (24360 <ble_ll_scan_rx_pkt_in_on_legacy+0x88>)
   24318:	789b      	ldrb	r3, [r3, #2]
   2431a:	b953      	cbnz	r3, 24332 <ble_ll_scan_rx_pkt_in_on_legacy+0x5a>
   2431c:	2301      	movs	r3, #1
    if (send_hci_report) {
   2431e:	b993      	cbnz	r3, 24346 <ble_ll_scan_rx_pkt_in_on_legacy+0x6e>
    if (BLE_MBUF_HDR_SCAN_RSP_RXD(hdr)) {
   24320:	882b      	ldrh	r3, [r5, #0]
   24322:	f013 0f08 	tst.w	r3, #8
   24326:	d0e0      	beq.n	242ea <ble_ll_scan_rx_pkt_in_on_legacy+0x12>
        ble_ll_scan_req_backoff(scansm, 1);
   24328:	2101      	movs	r1, #1
   2432a:	480d      	ldr	r0, [pc, #52]	; (24360 <ble_ll_scan_rx_pkt_in_on_legacy+0x88>)
   2432c:	f7ff fb79 	bl	23a22 <ble_ll_scan_req_backoff>
   24330:	e7db      	b.n	242ea <ble_ll_scan_rx_pkt_in_on_legacy+0x12>
                      !ble_ll_scan_dup_check_legacy(addrd->adv_addr_type,
   24332:	4642      	mov	r2, r8
   24334:	6979      	ldr	r1, [r7, #20]
   24336:	7c38      	ldrb	r0, [r7, #16]
   24338:	f7ff fe7e 	bl	24038 <ble_ll_scan_dup_check_legacy>
    send_hci_report = !scansm->scan_filt_dups ||
   2433c:	b108      	cbz	r0, 24342 <ble_ll_scan_rx_pkt_in_on_legacy+0x6a>
   2433e:	2300      	movs	r3, #0
   24340:	e7ed      	b.n	2431e <ble_ll_scan_rx_pkt_in_on_legacy+0x46>
   24342:	2301      	movs	r3, #1
   24344:	e7eb      	b.n	2431e <ble_ll_scan_rx_pkt_in_on_legacy+0x46>
                                    addrd->adv_addr, addrd->adv_addr_type,
   24346:	6979      	ldr	r1, [r7, #20]
                                    addrd->targeta, addrd->targeta_type,
   24348:	68fb      	ldr	r3, [r7, #12]
        ble_ll_scan_send_adv_report(pdu_type,
   2434a:	7c3a      	ldrb	r2, [r7, #16]
   2434c:	4804      	ldr	r0, [pc, #16]	; (24360 <ble_ll_scan_rx_pkt_in_on_legacy+0x88>)
   2434e:	9003      	str	r0, [sp, #12]
   24350:	9502      	str	r5, [sp, #8]
   24352:	9401      	str	r4, [sp, #4]
   24354:	7a38      	ldrb	r0, [r7, #8]
   24356:	9000      	str	r0, [sp, #0]
   24358:	4640      	mov	r0, r8
   2435a:	f7ff ff5a 	bl	24212 <ble_ll_scan_send_adv_report>
   2435e:	e7df      	b.n	24320 <ble_ll_scan_rx_pkt_in_on_legacy+0x48>
   24360:	20008bc4 	.word	0x20008bc4

00024364 <ble_ll_scan_sm_start>:
{
   24364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24368:	4604      	mov	r4, r0
    if (!ble_ll_is_valid_own_addr_type(scansm->own_addr_type, g_random_addr)) {
   2436a:	4920      	ldr	r1, [pc, #128]	; (243ec <ble_ll_scan_sm_start+0x88>)
   2436c:	7840      	ldrb	r0, [r0, #1]
   2436e:	f7f8 fe27 	bl	1cfc0 <ble_ll_is_valid_own_addr_type>
   24372:	2800      	cmp	r0, #0
   24374:	d037      	beq.n	243e6 <ble_ll_scan_sm_start+0x82>
    BLE_LL_ASSERT(scansm->scanp);
   24376:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
   24378:	b35d      	cbz	r5, 243d2 <ble_ll_scan_sm_start+0x6e>
    scanp_next = scansm->scanp_next;
   2437a:	6f26      	ldr	r6, [r4, #112]	; 0x70
    scansm->scan_enabled = 1;
   2437c:	2301      	movs	r3, #1
   2437e:	7023      	strb	r3, [r4, #0]
    scanp->scan_chan = BLE_PHY_ADV_CHAN_START;
   24380:	2325      	movs	r3, #37	; 0x25
   24382:	716b      	strb	r3, [r5, #5]
    if (scanp_next) {
   24384:	b106      	cbz	r6, 24388 <ble_ll_scan_sm_start+0x24>
        scanp_next->scan_chan = BLE_PHY_ADV_CHAN_START;
   24386:	7173      	strb	r3, [r6, #5]
    scansm->upper_limit = 1;
   24388:	2701      	movs	r7, #1
   2438a:	84a7      	strh	r7, [r4, #36]	; 0x24
    scansm->backoff_count = 1;
   2438c:	84e7      	strh	r7, [r4, #38]	; 0x26
    scansm->scan_rsp_pending = 0;
   2438e:	f04f 0800 	mov.w	r8, #0
   24392:	f884 8003 	strb.w	r8, [r4, #3]
    g_ble_ll_scan_num_rsp_advs = 0;
   24396:	4b16      	ldr	r3, [pc, #88]	; (243f0 <ble_ll_scan_sm_start+0x8c>)
   24398:	f883 8000 	strb.w	r8, [r3]
    os_mempool_clear(&g_scan_dup_pool);
   2439c:	4815      	ldr	r0, [pc, #84]	; (243f4 <ble_ll_scan_sm_start+0x90>)
   2439e:	f7e6 fba5 	bl	aaec <os_mempool_clear>
    TAILQ_INIT(&g_scan_dup_list);
   243a2:	4b15      	ldr	r3, [pc, #84]	; (243f8 <ble_ll_scan_sm_start+0x94>)
   243a4:	f8c3 8000 	str.w	r8, [r3]
   243a8:	605b      	str	r3, [r3, #4]
    scanp->timing.start_time = ble_ll_rfmgmt_enable_now();
   243aa:	f7ff fabb 	bl	23924 <ble_ll_rfmgmt_enable_now>
   243ae:	4601      	mov	r1, r0
   243b0:	6128      	str	r0, [r5, #16]
    ble_ll_rfmgmt_scan_changed(true, scanp->timing.start_time);
   243b2:	4638      	mov	r0, r7
   243b4:	f7ff fa6e 	bl	23894 <ble_ll_rfmgmt_scan_changed>
    if (scanp_next) {
   243b8:	b11e      	cbz	r6, 243c2 <ble_ll_scan_sm_start+0x5e>
        scanp_next->timing.start_time = scanp->timing.start_time +
   243ba:	692b      	ldr	r3, [r5, #16]
                                        scanp->timing.window;
   243bc:	68ea      	ldr	r2, [r5, #12]
        scanp_next->timing.start_time = scanp->timing.start_time +
   243be:	4413      	add	r3, r2
   243c0:	6133      	str	r3, [r6, #16]
    os_cputime_timer_start(&scansm->scan_timer, scanp->timing.start_time);
   243c2:	6929      	ldr	r1, [r5, #16]
   243c4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   243c8:	f7f7 fcbf 	bl	1bd4a <os_cputime_timer_start>
    return BLE_ERR_SUCCESS;
   243cc:	2000      	movs	r0, #0
}
   243ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BLE_LL_ASSERT(scansm->scanp);
   243d2:	f7e3 fef5 	bl	81c0 <hal_debugger_connected>
   243d6:	b100      	cbz	r0, 243da <ble_ll_scan_sm_start+0x76>
   243d8:	be01      	bkpt	0x0001
   243da:	2300      	movs	r3, #0
   243dc:	461a      	mov	r2, r3
   243de:	4619      	mov	r1, r3
   243e0:	4618      	mov	r0, r3
   243e2:	f7e5 faf5 	bl	99d0 <__assert_func>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   243e6:	2012      	movs	r0, #18
   243e8:	e7f1      	b.n	243ce <ble_ll_scan_sm_start+0x6a>
   243ea:	bf00      	nop
   243ec:	20008758 	.word	0x20008758
   243f0:	20008b5c 	.word	0x20008b5c
   243f4:	20008cd4 	.word	0x20008cd4
   243f8:	20008c4c 	.word	0x20008c4c

000243fc <ble_ll_scan_common_init>:
    return g_ble_ll_scan_sm.scanp->scan_filt_policy & 1;
}

static void
ble_ll_scan_common_init(void)
{
   243fc:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_scan_params *scanp;
    int i;

    /* Clear state machine in case re-initialized */
    scansm = &g_ble_ll_scan_sm;
    memset(scansm, 0, sizeof(struct ble_ll_scan_sm));
   243fe:	4d1b      	ldr	r5, [pc, #108]	; (2446c <ble_ll_scan_common_init+0x70>)
   24400:	2288      	movs	r2, #136	; 0x88
   24402:	2100      	movs	r1, #0
   24404:	4628      	mov	r0, r5
   24406:	f7e7 fa6c 	bl	b8e2 <memset>

    /* Clear scan parameters in case re-initialized */
    memset(g_ble_ll_scan_params, 0, sizeof(g_ble_ll_scan_params));
   2440a:	4b19      	ldr	r3, [pc, #100]	; (24470 <ble_ll_scan_common_init+0x74>)
   2440c:	2400      	movs	r4, #0
   2440e:	601c      	str	r4, [r3, #0]
   24410:	605c      	str	r4, [r3, #4]
   24412:	609c      	str	r4, [r3, #8]
   24414:	60dc      	str	r4, [r3, #12]
   24416:	611c      	str	r4, [r3, #16]
    ev->ev.ev_cb = (os_event_fn *)fn;
   24418:	4b16      	ldr	r3, [pc, #88]	; (24474 <ble_ll_scan_common_init+0x78>)
   2441a:	632b      	str	r3, [r5, #48]	; 0x30
    ev->ev.ev_arg = arg;
   2441c:	636d      	str	r5, [r5, #52]	; 0x34

    /* Initialize scanning window end event */
    ble_npl_event_init(&scansm->scan_sched_ev, ble_ll_scan_event_proc, scansm);

    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   2441e:	2c00      	cmp	r4, #0
   24420:	dd13      	ble.n	2444a <ble_ll_scan_common_init+0x4e>
                        ble_ll_scan_time_hci_to_ticks(BLE_HCI_SCAN_ITVL_DEF);
        scanp->timing.window =
                        ble_ll_scan_time_hci_to_ticks(BLE_HCI_SCAN_WINDOW_DEF);
    }

    scansm->scanp_phys[PHY_UNCODED].phy = BLE_PHY_1M;
   24422:	4c12      	ldr	r4, [pc, #72]	; (2446c <ble_ll_scan_common_init+0x70>)
   24424:	2301      	movs	r3, #1
   24426:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    return os_time_get();
   2442a:	f7e7 f845 	bl	b4b8 <os_time_get>
    scansm->scanp_phys[PHY_CODED].phy = BLE_PHY_CODED;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    /* Make sure we'll generate new NRPA if necessary */
    scansm->scan_nrpa_timer = ble_npl_time_get();
   2442e:	60e0      	str	r0, [r4, #12]
#endif

    /* Initialize scanning timer */
    os_cputime_timer_init(&scansm->scan_timer, ble_ll_scan_timer_cb, scansm);
   24430:	4622      	mov	r2, r4
   24432:	4911      	ldr	r1, [pc, #68]	; (24478 <ble_ll_scan_common_init+0x7c>)
   24434:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   24438:	f7f7 fc69 	bl	1bd0e <os_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
   2443c:	2300      	movs	r3, #0
   2443e:	6563      	str	r3, [r4, #84]	; 0x54
   24440:	65e3      	str	r3, [r4, #92]	; 0x5c
   24442:	6623      	str	r3, [r4, #96]	; 0x60
    ev->ev.ev_cb = (os_event_fn *)fn;
   24444:	4b0d      	ldr	r3, [pc, #52]	; (2447c <ble_ll_scan_common_init+0x80>)
   24446:	65a3      	str	r3, [r4, #88]	; 0x58
    os_cputime_timer_init(&scansm->period_timer, ble_ll_scan_period_timer_cb,
                                                                        scansm);
#endif

    ble_npl_event_init(&scansm->scan_interrupted_ev, ble_ll_scan_interrupted_event_cb, NULL);
}
   24448:	bd38      	pop	{r3, r4, r5, pc}
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   2444a:	f242 7010 	movw	r0, #10000	; 0x2710
   2444e:	f7f7 fc9b 	bl	1bd88 <os_cputime_usecs_to_ticks>
        scanp->timing.interval =
   24452:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   24456:	4d06      	ldr	r5, [pc, #24]	; (24470 <ble_ll_scan_common_init+0x74>)
   24458:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   2445c:	60a8      	str	r0, [r5, #8]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   2445e:	f242 7010 	movw	r0, #10000	; 0x2710
   24462:	f7f7 fc91 	bl	1bd88 <os_cputime_usecs_to_ticks>
        scanp->timing.window =
   24466:	60e8      	str	r0, [r5, #12]
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   24468:	3401      	adds	r4, #1
   2446a:	e7d8      	b.n	2441e <ble_ll_scan_common_init+0x22>
   2446c:	20008bc4 	.word	0x20008bc4
   24470:	20008b60 	.word	0x20008b60
   24474:	00024481 	.word	0x00024481
   24478:	00023ebd 	.word	0x00023ebd
   2447c:	00024825 	.word	0x00024825

00024480 <ble_ll_scan_event_proc>:
{
   24480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return ev->ev.ev_arg;
   24482:	6884      	ldr	r4, [r0, #8]
    scanp = scansm->scanp;
   24484:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    OS_ENTER_CRITICAL(sr);
   24486:	f7e7 f895 	bl	b5b4 <os_arch_save_sr>
   2448a:	4605      	mov	r5, r0
    if (!scansm->scan_enabled) {
   2448c:	7823      	ldrb	r3, [r4, #0]
   2448e:	b153      	cbz	r3, 244a6 <ble_ll_scan_event_proc+0x26>
    if (scansm->cur_aux_data || scansm->scan_rsp_pending) {
   24490:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   24492:	b90b      	cbnz	r3, 24498 <ble_ll_scan_event_proc+0x18>
   24494:	78e3      	ldrb	r3, [r4, #3]
   24496:	b1a3      	cbz	r3, 244c2 <ble_ll_scan_event_proc+0x42>
        scansm->restart_timer_needed = 1;
   24498:	2301      	movs	r3, #1
   2449a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        OS_EXIT_CRITICAL(sr);
   2449e:	4628      	mov	r0, r5
   244a0:	f7e7 f88e 	bl	b5c0 <os_arch_restore_sr>
}
   244a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        os_cputime_timer_stop(&scansm->scan_timer);
   244a6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   244aa:	f7f7 fc52 	bl	1bd52 <os_cputime_timer_stop>
        ble_ll_rfmgmt_scan_changed(false, 0);
   244ae:	2100      	movs	r1, #0
   244b0:	4608      	mov	r0, r1
   244b2:	f7ff f9ef 	bl	23894 <ble_ll_rfmgmt_scan_changed>
        ble_ll_rfmgmt_release();
   244b6:	f7ff fa1b 	bl	238f0 <ble_ll_rfmgmt_release>
        OS_EXIT_CRITICAL(sr);
   244ba:	4628      	mov	r0, r5
   244bc:	f7e7 f880 	bl	b5c0 <os_arch_restore_sr>
        return;
   244c0:	e7f0      	b.n	244a4 <ble_ll_scan_event_proc+0x24>
    now = os_cputime_get32();
   244c2:	f7f7 fc4a 	bl	1bd5a <os_cputime_get32>
    inside_window = ble_ll_scan_is_inside_window(scanp, now);
   244c6:	4601      	mov	r1, r0
   244c8:	4630      	mov	r0, r6
   244ca:	f7ff fa67 	bl	2399c <ble_ll_scan_is_inside_window>
   244ce:	4607      	mov	r7, r0
    ble_ll_rfmgmt_scan_changed(true, scanp->timing.start_time);
   244d0:	6931      	ldr	r1, [r6, #16]
   244d2:	2001      	movs	r0, #1
   244d4:	f7ff f9de 	bl	23894 <ble_ll_rfmgmt_scan_changed>
    if (inside_window) {
   244d8:	b167      	cbz	r7, 244f4 <ble_ll_scan_event_proc+0x74>
        next_proc_time = scanp->timing.start_time + scanp->timing.window;
   244da:	6933      	ldr	r3, [r6, #16]
   244dc:	68f6      	ldr	r6, [r6, #12]
   244de:	441e      	add	r6, r3
    switch (ble_ll_state_get()) {
   244e0:	f7f8 fece 	bl	1d280 <ble_ll_state_get>
   244e4:	2806      	cmp	r0, #6
   244e6:	d824      	bhi.n	24532 <ble_ll_scan_event_proc+0xb2>
   244e8:	e8df f000 	tbb	[pc, r0]
   244ec:	061b0c0b 	.word	0x061b0c0b
   244f0:	230c      	.short	0x230c
   244f2:	0c          	.byte	0x0c
   244f3:	00          	.byte	0x00
        next_proc_time = scanp->timing.start_time;
   244f4:	6936      	ldr	r6, [r6, #16]
   244f6:	e7f3      	b.n	244e0 <ble_ll_scan_event_proc+0x60>
        ble_phy_disable();
   244f8:	f001 fe84 	bl	26204 <ble_phy_disable>
        if (!inside_window) {
   244fc:	b16f      	cbz	r7, 2451a <ble_ll_scan_event_proc+0x9a>
        ble_ll_conn_reset_pending_aux_conn_rsp();
   244fe:	f7fa ffb9 	bl	1f474 <ble_ll_conn_reset_pending_aux_conn_rsp>
    if (start_scan) {
   24502:	bb07      	cbnz	r7, 24546 <ble_ll_scan_event_proc+0xc6>
        ble_ll_rfmgmt_release();
   24504:	f7ff f9f4 	bl	238f0 <ble_ll_rfmgmt_release>
    OS_EXIT_CRITICAL(sr);
   24508:	4628      	mov	r0, r5
   2450a:	f7e7 f859 	bl	b5c0 <os_arch_restore_sr>
    os_cputime_timer_start(&scansm->scan_timer, next_proc_time);
   2450e:	4631      	mov	r1, r6
   24510:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   24514:	f7f7 fc19 	bl	1bd4a <os_cputime_timer_start>
   24518:	e7c4      	b.n	244a4 <ble_ll_scan_event_proc+0x24>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   2451a:	2000      	movs	r0, #0
   2451c:	f7f8 feaa 	bl	1d274 <ble_ll_state_set>
   24520:	e7ed      	b.n	244fe <ble_ll_scan_event_proc+0x7e>
        ble_phy_disable();
   24522:	f001 fe6f 	bl	26204 <ble_phy_disable>
        if (!inside_window) {
   24526:	2f00      	cmp	r7, #0
   24528:	d1eb      	bne.n	24502 <ble_ll_scan_event_proc+0x82>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   2452a:	2000      	movs	r0, #0
   2452c:	f7f8 fea2 	bl	1d274 <ble_ll_state_set>
   24530:	e7e7      	b.n	24502 <ble_ll_scan_event_proc+0x82>
        BLE_LL_ASSERT(0);
   24532:	f7e3 fe45 	bl	81c0 <hal_debugger_connected>
   24536:	b100      	cbz	r0, 2453a <ble_ll_scan_event_proc+0xba>
   24538:	be01      	bkpt	0x0001
   2453a:	2300      	movs	r3, #0
   2453c:	461a      	mov	r2, r3
   2453e:	4619      	mov	r1, r3
   24540:	4618      	mov	r0, r3
   24542:	f7e5 fa45 	bl	99d0 <__assert_func>
        ble_ll_scan_start(scansm, NULL);
   24546:	2100      	movs	r1, #0
   24548:	4620      	mov	r0, r4
   2454a:	f7ff fcbd 	bl	23ec8 <ble_ll_scan_start>
   2454e:	e7db      	b.n	24508 <ble_ll_scan_event_proc+0x88>

00024550 <ble_ll_scan_halt>:
{
   24550:	b508      	push	{r3, lr}
    if (scansm->scan_rsp_pending) {
   24552:	4b05      	ldr	r3, [pc, #20]	; (24568 <ble_ll_scan_halt+0x18>)
   24554:	78db      	ldrb	r3, [r3, #3]
   24556:	b903      	cbnz	r3, 2455a <ble_ll_scan_halt+0xa>
}
   24558:	bd08      	pop	{r3, pc}
        scansm->scan_rsp_pending = 0;
   2455a:	4803      	ldr	r0, [pc, #12]	; (24568 <ble_ll_scan_halt+0x18>)
   2455c:	2100      	movs	r1, #0
   2455e:	70c1      	strb	r1, [r0, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   24560:	f7ff fa5f 	bl	23a22 <ble_ll_scan_req_backoff>
}
   24564:	e7f8      	b.n	24558 <ble_ll_scan_halt+0x8>
   24566:	bf00      	nop
   24568:	20008bc4 	.word	0x20008bc4

0002456c <ble_ll_scan_sm_stop>:
{
   2456c:	b538      	push	{r3, r4, r5, lr}
   2456e:	4604      	mov	r4, r0
    os_cputime_timer_stop(&scansm->scan_timer);
   24570:	481c      	ldr	r0, [pc, #112]	; (245e4 <ble_ll_scan_sm_stop+0x78>)
   24572:	f7f7 fbee 	bl	1bd52 <os_cputime_timer_stop>
    if (chk_disable) {
   24576:	b9cc      	cbnz	r4, 245ac <ble_ll_scan_sm_stop+0x40>
    OS_ENTER_CRITICAL(sr);
   24578:	f7e7 f81c 	bl	b5b4 <os_arch_save_sr>
   2457c:	4604      	mov	r4, r0
    scansm->scan_enabled = 0;
   2457e:	4b1a      	ldr	r3, [pc, #104]	; (245e8 <ble_ll_scan_sm_stop+0x7c>)
   24580:	2200      	movs	r2, #0
   24582:	701a      	strb	r2, [r3, #0]
    scansm->restart_timer_needed = 0;
   24584:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    if (scansm->scan_rsp_pending) {
   24588:	78db      	ldrb	r3, [r3, #3]
   2458a:	bb23      	cbnz	r3, 245d6 <ble_ll_scan_sm_stop+0x6a>
    OS_EXIT_CRITICAL(sr);
   2458c:	4620      	mov	r0, r4
   2458e:	f7e7 f817 	bl	b5c0 <os_arch_restore_sr>
    OS_ENTER_CRITICAL(sr);
   24592:	f7e7 f80f 	bl	b5b4 <os_arch_save_sr>
   24596:	4604      	mov	r4, r0
    ble_ll_rfmgmt_scan_changed(false, 0);
   24598:	2100      	movs	r1, #0
   2459a:	4608      	mov	r0, r1
   2459c:	f7ff f97a 	bl	23894 <ble_ll_rfmgmt_scan_changed>
    ble_ll_rfmgmt_release();
   245a0:	f7ff f9a6 	bl	238f0 <ble_ll_rfmgmt_release>
    OS_EXIT_CRITICAL(sr);
   245a4:	4620      	mov	r0, r4
   245a6:	f7e7 f80b 	bl	b5c0 <os_arch_restore_sr>
}
   245aa:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   245ac:	f7e7 f802 	bl	b5b4 <os_arch_save_sr>
   245b0:	4605      	mov	r5, r0
        lls = ble_ll_state_get();
   245b2:	f7f8 fe65 	bl	1d280 <ble_ll_state_get>
        if ((lls == BLE_LL_STATE_SCANNING) ||
   245b6:	2802      	cmp	r0, #2
   245b8:	d007      	beq.n	245ca <ble_ll_scan_sm_stop+0x5e>
   245ba:	2803      	cmp	r0, #3
   245bc:	d003      	beq.n	245c6 <ble_ll_scan_sm_stop+0x5a>
        OS_EXIT_CRITICAL(sr);
   245be:	4628      	mov	r0, r5
   245c0:	f7e6 fffe 	bl	b5c0 <os_arch_restore_sr>
   245c4:	e7d8      	b.n	24578 <ble_ll_scan_sm_stop+0xc>
                        (lls == BLE_LL_STATE_INITIATING && chk_disable == 1)) {
   245c6:	2c01      	cmp	r4, #1
   245c8:	d1f9      	bne.n	245be <ble_ll_scan_sm_stop+0x52>
            ble_phy_disable();
   245ca:	f001 fe1b 	bl	26204 <ble_phy_disable>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   245ce:	2000      	movs	r0, #0
   245d0:	f7f8 fe50 	bl	1d274 <ble_ll_state_set>
   245d4:	e7f3      	b.n	245be <ble_ll_scan_sm_stop+0x52>
        scansm->scan_rsp_pending = 0;
   245d6:	4804      	ldr	r0, [pc, #16]	; (245e8 <ble_ll_scan_sm_stop+0x7c>)
   245d8:	4611      	mov	r1, r2
   245da:	70c2      	strb	r2, [r0, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   245dc:	f7ff fa21 	bl	23a22 <ble_ll_scan_req_backoff>
   245e0:	e7d4      	b.n	2458c <ble_ll_scan_sm_stop+0x20>
   245e2:	bf00      	nop
   245e4:	20008c00 	.word	0x20008c00
   245e8:	20008bc4 	.word	0x20008bc4

000245ec <ble_ll_scan_set_enable>:
    if ((filter_dups > 1) || (enable > 1)) {
   245ec:	2901      	cmp	r1, #1
   245ee:	f200 8086 	bhi.w	246fe <ble_ll_scan_set_enable+0x112>
   245f2:	2801      	cmp	r0, #1
   245f4:	f200 8085 	bhi.w	24702 <ble_ll_scan_set_enable+0x116>
{
   245f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!enable) {
   245fa:	b948      	cbnz	r0, 24610 <ble_ll_scan_set_enable+0x24>
        if (scansm->scan_enabled) {
   245fc:	4b43      	ldr	r3, [pc, #268]	; (2470c <ble_ll_scan_set_enable+0x120>)
   245fe:	781b      	ldrb	r3, [r3, #0]
   24600:	b90b      	cbnz	r3, 24606 <ble_ll_scan_set_enable+0x1a>
        return BLE_ERR_SUCCESS;
   24602:	2000      	movs	r0, #0
}
   24604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_ll_scan_sm_stop(1);
   24606:	2001      	movs	r0, #1
   24608:	f7ff ffb0 	bl	2456c <ble_ll_scan_sm_stop>
        return BLE_ERR_SUCCESS;
   2460c:	2000      	movs	r0, #0
   2460e:	e7f9      	b.n	24604 <ble_ll_scan_set_enable+0x18>
    if (scansm->scan_enabled) {
   24610:	4b3e      	ldr	r3, [pc, #248]	; (2470c <ble_ll_scan_set_enable+0x120>)
   24612:	781b      	ldrb	r3, [r3, #0]
   24614:	b9f3      	cbnz	r3, 24654 <ble_ll_scan_set_enable+0x68>
    scansm->scan_filt_dups = filter_dups;
   24616:	4a3d      	ldr	r2, [pc, #244]	; (2470c <ble_ll_scan_set_enable+0x120>)
   24618:	7091      	strb	r1, [r2, #2]
    scansm->scanp = NULL;
   2461a:	2300      	movs	r3, #0
   2461c:	66d3      	str	r3, [r2, #108]	; 0x6c
    scansm->scanp_next = NULL;
   2461e:	6713      	str	r3, [r2, #112]	; 0x70
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   24620:	2b00      	cmp	r3, #0
   24622:	dd1e      	ble.n	24662 <ble_ll_scan_set_enable+0x76>
    if (!scansm->scanp) {
   24624:	4b39      	ldr	r3, [pc, #228]	; (2470c <ble_ll_scan_set_enable+0x120>)
   24626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   24628:	2b00      	cmp	r3, #0
   2462a:	d04d      	beq.n	246c8 <ble_ll_scan_set_enable+0xdc>
    rc = ble_ll_scan_sm_start(scansm);
   2462c:	4837      	ldr	r0, [pc, #220]	; (2470c <ble_ll_scan_set_enable+0x120>)
   2462e:	f7ff fe99 	bl	24364 <ble_ll_scan_sm_start>
    return rc;
   24632:	e7e7      	b.n	24604 <ble_ll_scan_set_enable+0x18>
            if (scanp_phy->configured &&
   24634:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   24638:	0090      	lsls	r0, r2, #2
   2463a:	4a34      	ldr	r2, [pc, #208]	; (2470c <ble_ll_scan_set_enable+0x120>)
   2463c:	4402      	add	r2, r0
   2463e:	f892 2077 	ldrb.w	r2, [r2, #119]	; 0x77
   24642:	b12a      	cbz	r2, 24650 <ble_ll_scan_set_enable+0x64>
                                scanp_phy->scan_type == BLE_SCAN_TYPE_INITIATE) {
   24644:	4a31      	ldr	r2, [pc, #196]	; (2470c <ble_ll_scan_set_enable+0x120>)
   24646:	4402      	add	r2, r0
   24648:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
            if (scanp_phy->configured &&
   2464c:	2a02      	cmp	r2, #2
   2464e:	d05a      	beq.n	24706 <ble_ll_scan_set_enable+0x11a>
        for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   24650:	3301      	adds	r3, #1
   24652:	e000      	b.n	24656 <ble_ll_scan_set_enable+0x6a>
   24654:	2300      	movs	r3, #0
   24656:	2b00      	cmp	r3, #0
   24658:	ddec      	ble.n	24634 <ble_ll_scan_set_enable+0x48>
        scansm->scan_filt_dups = filter_dups;
   2465a:	4b2c      	ldr	r3, [pc, #176]	; (2470c <ble_ll_scan_set_enable+0x120>)
   2465c:	7099      	strb	r1, [r3, #2]
        return BLE_ERR_SUCCESS;
   2465e:	2000      	movs	r0, #0
   24660:	e7d0      	b.n	24604 <ble_ll_scan_set_enable+0x18>
        scanp_phy = &scansm->scanp_phys[i];
   24662:	009a      	lsls	r2, r3, #2
   24664:	18d0      	adds	r0, r2, r3
   24666:	0081      	lsls	r1, r0, #2
   24668:	3170      	adds	r1, #112	; 0x70
   2466a:	4828      	ldr	r0, [pc, #160]	; (2470c <ble_ll_scan_set_enable+0x120>)
   2466c:	4401      	add	r1, r0
   2466e:	1d0e      	adds	r6, r1, #4
        if (!scanp->configured) {
   24670:	441a      	add	r2, r3
   24672:	0091      	lsls	r1, r2, #2
   24674:	4a26      	ldr	r2, [pc, #152]	; (24710 <ble_ll_scan_set_enable+0x124>)
   24676:	440a      	add	r2, r1
   24678:	78d1      	ldrb	r1, [r2, #3]
   2467a:	b1f1      	cbz	r1, 246ba <ble_ll_scan_set_enable+0xce>
        scanp_phy->configured = scanp->configured;
   2467c:	4684      	mov	ip, r0
   2467e:	009a      	lsls	r2, r3, #2
   24680:	18d0      	adds	r0, r2, r3
   24682:	0084      	lsls	r4, r0, #2
   24684:	4620      	mov	r0, r4
   24686:	4464      	add	r4, ip
   24688:	f884 1077 	strb.w	r1, [r4, #119]	; 0x77
        scanp_phy->scan_type = scanp->scan_type;
   2468c:	4d20      	ldr	r5, [pc, #128]	; (24710 <ble_ll_scan_set_enable+0x124>)
   2468e:	4405      	add	r5, r0
   24690:	792a      	ldrb	r2, [r5, #4]
   24692:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
        scanp_phy->timing = scanp->timing;
   24696:	f105 0208 	add.w	r2, r5, #8
   2469a:	f104 077c 	add.w	r7, r4, #124	; 0x7c
   2469e:	ca07      	ldmia	r2, {r0, r1, r2}
   246a0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        scanp_phy->scan_filt_policy = scanp->scan_filt_policy;
   246a4:	78aa      	ldrb	r2, [r5, #2]
   246a6:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
        scanp_phy->own_addr_type = scanp->own_addr_type;
   246aa:	786a      	ldrb	r2, [r5, #1]
   246ac:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
        if (!scansm->scanp) {
   246b0:	f8dc 106c 	ldr.w	r1, [ip, #108]	; 0x6c
   246b4:	b119      	cbz	r1, 246be <ble_ll_scan_set_enable+0xd2>
            scansm->scanp_next = scanp_phy;
   246b6:	4a15      	ldr	r2, [pc, #84]	; (2470c <ble_ll_scan_set_enable+0x120>)
   246b8:	6716      	str	r6, [r2, #112]	; 0x70
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   246ba:	3301      	adds	r3, #1
   246bc:	e7b0      	b.n	24620 <ble_ll_scan_set_enable+0x34>
            scansm->scanp = scanp_phy;
   246be:	f8cc 606c 	str.w	r6, [ip, #108]	; 0x6c
            scansm->own_addr_type = scanp_phy->own_addr_type;
   246c2:	f88c 2001 	strb.w	r2, [ip, #1]
   246c6:	e7f8      	b.n	246ba <ble_ll_scan_set_enable+0xce>
        scansm->scanp = &scansm->scanp_phys[PHY_UNCODED];
   246c8:	4c10      	ldr	r4, [pc, #64]	; (2470c <ble_ll_scan_set_enable+0x120>)
   246ca:	f104 0374 	add.w	r3, r4, #116	; 0x74
   246ce:	66e3      	str	r3, [r4, #108]	; 0x6c
        scansm->own_addr_type = BLE_ADDR_PUBLIC;
   246d0:	2500      	movs	r5, #0
   246d2:	7065      	strb	r5, [r4, #1]
        scanp_phy->configured = 1;
   246d4:	2301      	movs	r3, #1
   246d6:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
        scanp_phy->scan_type = BLE_SCAN_TYPE_PASSIVE;
   246da:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   246de:	f242 7010 	movw	r0, #10000	; 0x2710
   246e2:	f7f7 fb51 	bl	1bd88 <os_cputime_usecs_to_ticks>
        scanp_phy->timing.interval =
   246e6:	67e0      	str	r0, [r4, #124]	; 0x7c
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   246e8:	f242 7010 	movw	r0, #10000	; 0x2710
   246ec:	f7f7 fb4c 	bl	1bd88 <os_cputime_usecs_to_ticks>
        scanp_phy->timing.window =
   246f0:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
        scanp_phy->scan_filt_policy = BLE_HCI_SCAN_FILT_NO_WL;
   246f4:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
        scanp_phy->own_addr_type = BLE_ADDR_PUBLIC;
   246f8:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
   246fc:	e796      	b.n	2462c <ble_ll_scan_set_enable+0x40>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   246fe:	2012      	movs	r0, #18
   24700:	4770      	bx	lr
   24702:	2012      	movs	r0, #18
}
   24704:	4770      	bx	lr
                return BLE_ERR_CMD_DISALLOWED;
   24706:	200c      	movs	r0, #12
   24708:	e77c      	b.n	24604 <ble_ll_scan_set_enable+0x18>
   2470a:	bf00      	nop
   2470c:	20008bc4 	.word	0x20008bc4
   24710:	20008b60 	.word	0x20008b60

00024714 <ble_ll_scan_rx_isr_start>:
{
   24714:	b510      	push	{r4, lr}
    scanp = scansm->scanp;
   24716:	4b14      	ldr	r3, [pc, #80]	; (24768 <ble_ll_scan_rx_isr_start+0x54>)
   24718:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    switch (scanp->scan_type) {
   2471a:	791b      	ldrb	r3, [r3, #4]
   2471c:	2b01      	cmp	r3, #1
   2471e:	d120      	bne.n	24762 <ble_ll_scan_rx_isr_start+0x4e>
        if ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
   24720:	b118      	cbz	r0, 2472a <ble_ll_scan_rx_isr_start+0x16>
   24722:	2806      	cmp	r0, #6
   24724:	d011      	beq.n	2474a <ble_ll_scan_rx_isr_start+0x36>
    rc = 0;
   24726:	2400      	movs	r4, #0
   24728:	e000      	b.n	2472c <ble_ll_scan_rx_isr_start+0x18>
            rc = 1;
   2472a:	2401      	movs	r4, #1
        if (scansm->scan_rsp_pending) {
   2472c:	4b0e      	ldr	r3, [pc, #56]	; (24768 <ble_ll_scan_rx_isr_start+0x54>)
   2472e:	78db      	ldrb	r3, [r3, #3]
   24730:	b1c3      	cbz	r3, 24764 <ble_ll_scan_rx_isr_start+0x50>
            scansm->scan_rsp_pending = 0;
   24732:	4b0d      	ldr	r3, [pc, #52]	; (24768 <ble_ll_scan_rx_isr_start+0x54>)
   24734:	2200      	movs	r2, #0
   24736:	70da      	strb	r2, [r3, #3]
            if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   24738:	2804      	cmp	r0, #4
   2473a:	d008      	beq.n	2474e <ble_ll_scan_rx_isr_start+0x3a>
            } else if (pdu_type == BLE_ADV_PDU_TYPE_AUX_SCAN_RSP) {
   2473c:	2807      	cmp	r0, #7
   2473e:	d00b      	beq.n	24758 <ble_ll_scan_rx_isr_start+0x44>
                ble_ll_scan_req_backoff(scansm, 0);
   24740:	2100      	movs	r1, #0
   24742:	4809      	ldr	r0, [pc, #36]	; (24768 <ble_ll_scan_rx_isr_start+0x54>)
   24744:	f7ff f96d 	bl	23a22 <ble_ll_scan_req_backoff>
   24748:	e00c      	b.n	24764 <ble_ll_scan_rx_isr_start+0x50>
            rc = 1;
   2474a:	2401      	movs	r4, #1
   2474c:	e7ee      	b.n	2472c <ble_ll_scan_rx_isr_start+0x18>
                *rxflags |= BLE_MBUF_HDR_F_SCAN_RSP_RXD;
   2474e:	880b      	ldrh	r3, [r1, #0]
   24750:	f043 0308 	orr.w	r3, r3, #8
   24754:	800b      	strh	r3, [r1, #0]
   24756:	e005      	b.n	24764 <ble_ll_scan_rx_isr_start+0x50>
                *rxflags |= BLE_MBUF_HDR_F_SCAN_RSP_RXD;
   24758:	880b      	ldrh	r3, [r1, #0]
   2475a:	f043 0308 	orr.w	r3, r3, #8
   2475e:	800b      	strh	r3, [r1, #0]
   24760:	e000      	b.n	24764 <ble_ll_scan_rx_isr_start+0x50>
    rc = 0;
   24762:	2400      	movs	r4, #0
}
   24764:	4620      	mov	r0, r4
   24766:	bd10      	pop	{r4, pc}
   24768:	20008bc4 	.word	0x20008bc4

0002476c <ble_ll_scan_adv_decode_addr>:
    if (pdu_type != BLE_ADV_PDU_TYPE_ADV_EXT_IND &&
   2476c:	1fc2      	subs	r2, r0, #7
   2476e:	b2d2      	uxtb	r2, r2
   24770:	2a01      	cmp	r2, #1
   24772:	d924      	bls.n	247be <ble_ll_scan_adv_decode_addr+0x52>
{
   24774:	b410      	push	{r4}
        *addr_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK);
   24776:	780a      	ldrb	r2, [r1, #0]
    if (txrxflag) {
   24778:	f012 0f40 	tst.w	r2, #64	; 0x40
   2477c:	d00e      	beq.n	2479c <ble_ll_scan_adv_decode_addr+0x30>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   2477e:	2401      	movs	r4, #1
   24780:	9a01      	ldr	r2, [sp, #4]
   24782:	7014      	strb	r4, [r2, #0]
        *addr = rxbuf + BLE_LL_PDU_HDR_LEN;
   24784:	1c8a      	adds	r2, r1, #2
   24786:	601a      	str	r2, [r3, #0]
        if (pdu_type != BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   24788:	2801      	cmp	r0, #1
   2478a:	d009      	beq.n	247a0 <ble_ll_scan_adv_decode_addr+0x34>
            *inita = NULL;
   2478c:	2000      	movs	r0, #0
   2478e:	9b02      	ldr	r3, [sp, #8]
   24790:	6018      	str	r0, [r3, #0]
            *inita_type = 0;
   24792:	9b03      	ldr	r3, [sp, #12]
   24794:	7018      	strb	r0, [r3, #0]
}
   24796:	f85d 4b04 	ldr.w	r4, [sp], #4
   2479a:	4770      	bx	lr
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   2479c:	2400      	movs	r4, #0
   2479e:	e7ef      	b.n	24780 <ble_ll_scan_adv_decode_addr+0x14>
        *inita = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
   247a0:	f101 0308 	add.w	r3, r1, #8
   247a4:	9a02      	ldr	r2, [sp, #8]
   247a6:	6013      	str	r3, [r2, #0]
    if (txrxflag) {
   247a8:	f991 3000 	ldrsb.w	r3, [r1]
   247ac:	2b00      	cmp	r3, #0
   247ae:	db04      	blt.n	247ba <ble_ll_scan_adv_decode_addr+0x4e>
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   247b0:	2300      	movs	r3, #0
        *inita_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
   247b2:	9a03      	ldr	r2, [sp, #12]
   247b4:	7013      	strb	r3, [r2, #0]
        return 0;
   247b6:	2000      	movs	r0, #0
   247b8:	e7ed      	b.n	24796 <ble_ll_scan_adv_decode_addr+0x2a>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   247ba:	2301      	movs	r3, #1
   247bc:	e7f9      	b.n	247b2 <ble_ll_scan_adv_decode_addr+0x46>
    return -1;
   247be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   247c2:	4770      	bx	lr

000247c4 <ble_ll_scan_chk_resume>:
{
   247c4:	b538      	push	{r3, r4, r5, lr}
    if (scansm->scan_enabled) {
   247c6:	4b16      	ldr	r3, [pc, #88]	; (24820 <ble_ll_scan_chk_resume+0x5c>)
   247c8:	781b      	ldrb	r3, [r3, #0]
   247ca:	b903      	cbnz	r3, 247ce <ble_ll_scan_chk_resume+0xa>
}
   247cc:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   247ce:	f7e6 fef1 	bl	b5b4 <os_arch_save_sr>
   247d2:	4604      	mov	r4, r0
        if (scansm->restart_timer_needed) {
   247d4:	4b12      	ldr	r3, [pc, #72]	; (24820 <ble_ll_scan_chk_resume+0x5c>)
   247d6:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   247da:	b94b      	cbnz	r3, 247f0 <ble_ll_scan_chk_resume+0x2c>
        now = os_cputime_get32();
   247dc:	f7f7 fabd 	bl	1bd5a <os_cputime_get32>
   247e0:	4605      	mov	r5, r0
        if (ble_ll_state_get() == BLE_LL_STATE_STANDBY &&
   247e2:	f7f8 fd4d 	bl	1d280 <ble_ll_state_get>
   247e6:	b170      	cbz	r0, 24806 <ble_ll_scan_chk_resume+0x42>
        OS_EXIT_CRITICAL(sr);
   247e8:	4620      	mov	r0, r4
   247ea:	f7e6 fee9 	bl	b5c0 <os_arch_restore_sr>
   247ee:	e7ed      	b.n	247cc <ble_ll_scan_chk_resume+0x8>
            scansm->restart_timer_needed = 0;
   247f0:	480b      	ldr	r0, [pc, #44]	; (24820 <ble_ll_scan_chk_resume+0x5c>)
   247f2:	2300      	movs	r3, #0
   247f4:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
            ble_ll_event_send(&scansm->scan_sched_ev);
   247f8:	302c      	adds	r0, #44	; 0x2c
   247fa:	f7f8 fd47 	bl	1d28c <ble_ll_event_send>
            OS_EXIT_CRITICAL(sr);
   247fe:	4620      	mov	r0, r4
   24800:	f7e6 fede 	bl	b5c0 <os_arch_restore_sr>
            return;
   24804:	e7e2      	b.n	247cc <ble_ll_scan_chk_resume+0x8>
            ble_ll_scan_is_inside_window(scansm->scanp, now)) {
   24806:	4629      	mov	r1, r5
   24808:	4b05      	ldr	r3, [pc, #20]	; (24820 <ble_ll_scan_chk_resume+0x5c>)
   2480a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   2480c:	f7ff f8c6 	bl	2399c <ble_ll_scan_is_inside_window>
        if (ble_ll_state_get() == BLE_LL_STATE_STANDBY &&
   24810:	2800      	cmp	r0, #0
   24812:	d0e9      	beq.n	247e8 <ble_ll_scan_chk_resume+0x24>
            ble_ll_scan_start(scansm, NULL);
   24814:	2100      	movs	r1, #0
   24816:	4802      	ldr	r0, [pc, #8]	; (24820 <ble_ll_scan_chk_resume+0x5c>)
   24818:	f7ff fb56 	bl	23ec8 <ble_ll_scan_start>
   2481c:	e7e4      	b.n	247e8 <ble_ll_scan_chk_resume+0x24>
   2481e:	bf00      	nop
   24820:	20008bc4 	.word	0x20008bc4

00024824 <ble_ll_scan_interrupted_event_cb>:
{
   24824:	b508      	push	{r3, lr}
    if (!scansm->scan_enabled) {
   24826:	4b07      	ldr	r3, [pc, #28]	; (24844 <ble_ll_scan_interrupted_event_cb+0x20>)
   24828:	781b      	ldrb	r3, [r3, #0]
   2482a:	b123      	cbz	r3, 24836 <ble_ll_scan_interrupted_event_cb+0x12>
    if (scansm->scan_rsp_pending) {
   2482c:	4b05      	ldr	r3, [pc, #20]	; (24844 <ble_ll_scan_interrupted_event_cb+0x20>)
   2482e:	78db      	ldrb	r3, [r3, #3]
   24830:	b913      	cbnz	r3, 24838 <ble_ll_scan_interrupted_event_cb+0x14>
    ble_ll_scan_chk_resume();
   24832:	f7ff ffc7 	bl	247c4 <ble_ll_scan_chk_resume>
}
   24836:	bd08      	pop	{r3, pc}
        scansm->scan_rsp_pending = 0;
   24838:	4802      	ldr	r0, [pc, #8]	; (24844 <ble_ll_scan_interrupted_event_cb+0x20>)
   2483a:	2100      	movs	r1, #0
   2483c:	70c1      	strb	r1, [r0, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   2483e:	f7ff f8f0 	bl	23a22 <ble_ll_scan_req_backoff>
   24842:	e7f6      	b.n	24832 <ble_ll_scan_interrupted_event_cb+0xe>
   24844:	20008bc4 	.word	0x20008bc4

00024848 <ble_ll_scan_interrupted>:
{
   24848:	b508      	push	{r3, lr}
    ble_ll_event_send(&scansm->scan_interrupted_ev);
   2484a:	3054      	adds	r0, #84	; 0x54
   2484c:	f7f8 fd1e 	bl	1d28c <ble_ll_event_send>
}
   24850:	bd08      	pop	{r3, pc}
	...

00024854 <ble_ll_scan_rx_isr_end>:
{
   24854:	b5f0      	push	{r4, r5, r6, r7, lr}
   24856:	b089      	sub	sp, #36	; 0x24
    if (rxpdu == NULL) {
   24858:	b188      	cbz	r0, 2487e <ble_ll_scan_rx_isr_end+0x2a>
   2485a:	4605      	mov	r5, r0
   2485c:	f100 0718 	add.w	r7, r0, #24
    rxbuf = rxpdu->om_data;
   24860:	6806      	ldr	r6, [r0, #0]
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   24862:	7834      	ldrb	r4, [r6, #0]
   24864:	f004 040f 	and.w	r4, r4, #15
    if (!crcok) {
   24868:	b349      	cbz	r1, 248be <ble_ll_scan_rx_isr_end+0x6a>
    addrd.rl = NULL;
   2486a:	2300      	movs	r3, #0
   2486c:	9307      	str	r3, [sp, #28]
    switch (pdu_type) {
   2486e:	2c06      	cmp	r4, #6
   24870:	d825      	bhi.n	248be <ble_ll_scan_rx_isr_end+0x6a>
   24872:	e8df f004 	tbb	[pc, r4]
   24876:	0909      	.short	0x0909
   24878:	24092409 	.word	0x24092409
   2487c:	09          	.byte	0x09
   2487d:	00          	.byte	0x00
        ble_ll_scan_interrupted(scansm);
   2487e:	4816      	ldr	r0, [pc, #88]	; (248d8 <ble_ll_scan_rx_isr_end+0x84>)
   24880:	f7ff ffe2 	bl	24848 <ble_ll_scan_interrupted>
        return 0;
   24884:	2000      	movs	r0, #0
   24886:	e012      	b.n	248ae <ble_ll_scan_rx_isr_end+0x5a>
        rc = ble_ll_scan_rx_isr_on_legacy(pdu_type, rxbuf, hdr, &addrd);
   24888:	ab01      	add	r3, sp, #4
   2488a:	463a      	mov	r2, r7
   2488c:	4631      	mov	r1, r6
   2488e:	4620      	mov	r0, r4
   24890:	f7ff fa1a 	bl	23cc8 <ble_ll_scan_rx_isr_on_legacy>
    if (rc == -1) {
   24894:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   24898:	d011      	beq.n	248be <ble_ll_scan_rx_isr_end+0x6a>
    } else if (rc == 1) {
   2489a:	2801      	cmp	r0, #1
   2489c:	d109      	bne.n	248b2 <ble_ll_scan_rx_isr_end+0x5e>
        if (ble_ll_scan_send_scan_req(pdu_type, rxbuf, hdr, &addrd)) {
   2489e:	ab01      	add	r3, sp, #4
   248a0:	463a      	mov	r2, r7
   248a2:	4631      	mov	r1, r6
   248a4:	4620      	mov	r0, r4
   248a6:	f7ff facb 	bl	23e40 <ble_ll_scan_send_scan_req>
   248aa:	b110      	cbz	r0, 248b2 <ble_ll_scan_rx_isr_end+0x5e>
            return 0;
   248ac:	2000      	movs	r0, #0
}
   248ae:	b009      	add	sp, #36	; 0x24
   248b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   248b2:	2000      	movs	r0, #0
   248b4:	f7f8 fcde 	bl	1d274 <ble_ll_state_set>
    return -1;
   248b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   248bc:	e7f7      	b.n	248ae <ble_ll_scan_rx_isr_end+0x5a>
    rxinfo->flags |= BLE_MBUF_HDR_F_IGNORED;
   248be:	8b2b      	ldrh	r3, [r5, #24]
   248c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   248c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   248c8:	832b      	strh	r3, [r5, #24]
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   248ca:	2000      	movs	r0, #0
   248cc:	f7f8 fcd2 	bl	1d274 <ble_ll_state_set>
    return -1;
   248d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   248d4:	e7eb      	b.n	248ae <ble_ll_scan_rx_isr_end+0x5a>
   248d6:	bf00      	nop
   248d8:	20008bc4 	.word	0x20008bc4

000248dc <ble_ll_scan_wfr_timer_exp>:
{
   248dc:	b510      	push	{r4, lr}
   248de:	b082      	sub	sp, #8
    if (scansm->scan_rsp_pending) {
   248e0:	4b1b      	ldr	r3, [pc, #108]	; (24950 <ble_ll_scan_wfr_timer_exp+0x74>)
   248e2:	78db      	ldrb	r3, [r3, #3]
   248e4:	bb03      	cbnz	r3, 24928 <ble_ll_scan_wfr_timer_exp+0x4c>
    if (scansm->cur_aux_data) {
   248e6:	4b1a      	ldr	r3, [pc, #104]	; (24950 <ble_ll_scan_wfr_timer_exp+0x74>)
   248e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   248ea:	b1cb      	cbz	r3, 24920 <ble_ll_scan_wfr_timer_exp+0x44>
        ble_ll_scan_interrupted(scansm);
   248ec:	4c18      	ldr	r4, [pc, #96]	; (24950 <ble_ll_scan_wfr_timer_exp+0x74>)
   248ee:	4620      	mov	r0, r4
   248f0:	f7ff ffaa 	bl	24848 <ble_ll_scan_interrupted>
        ble_phy_disable();
   248f4:	f001 fc86 	bl	26204 <ble_phy_disable>
        now = os_cputime_get32();
   248f8:	f7f7 fa2f 	bl	1bd5a <os_cputime_get32>
        if (!ble_ll_scan_is_inside_window(scansm->scanp, now)) {
   248fc:	4601      	mov	r1, r0
   248fe:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   24900:	f7ff f84c 	bl	2399c <ble_ll_scan_is_inside_window>
   24904:	b1b0      	cbz	r0, 24934 <ble_ll_scan_wfr_timer_exp+0x58>
        ble_ll_get_chan_to_scan(scansm, &chan, &phy);
   24906:	466a      	mov	r2, sp
   24908:	f10d 0107 	add.w	r1, sp, #7
   2490c:	4810      	ldr	r0, [pc, #64]	; (24950 <ble_ll_scan_wfr_timer_exp+0x74>)
   2490e:	f7ff f823 	bl	23958 <ble_ll_get_chan_to_scan>
        rc = ble_phy_setchan(chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   24912:	4a10      	ldr	r2, [pc, #64]	; (24954 <ble_ll_scan_wfr_timer_exp+0x78>)
   24914:	4910      	ldr	r1, [pc, #64]	; (24958 <ble_ll_scan_wfr_timer_exp+0x7c>)
   24916:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2491a:	f001 fc4d 	bl	261b8 <ble_phy_setchan>
        BLE_LL_ASSERT(rc == 0);
   2491e:	b960      	cbnz	r0, 2493a <ble_ll_scan_wfr_timer_exp+0x5e>
    ble_phy_restart_rx();
   24920:	f001 fe38 	bl	26594 <ble_phy_restart_rx>
}
   24924:	b002      	add	sp, #8
   24926:	bd10      	pop	{r4, pc}
        scansm->scan_rsp_pending = 0;
   24928:	4809      	ldr	r0, [pc, #36]	; (24950 <ble_ll_scan_wfr_timer_exp+0x74>)
   2492a:	2100      	movs	r1, #0
   2492c:	70c1      	strb	r1, [r0, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   2492e:	f7ff f878 	bl	23a22 <ble_ll_scan_req_backoff>
   24932:	e7d8      	b.n	248e6 <ble_ll_scan_wfr_timer_exp+0xa>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   24934:	f7f8 fc9e 	bl	1d274 <ble_ll_state_set>
   24938:	e7f4      	b.n	24924 <ble_ll_scan_wfr_timer_exp+0x48>
        BLE_LL_ASSERT(rc == 0);
   2493a:	f7e3 fc41 	bl	81c0 <hal_debugger_connected>
   2493e:	b100      	cbz	r0, 24942 <ble_ll_scan_wfr_timer_exp+0x66>
   24940:	be01      	bkpt	0x0001
   24942:	2300      	movs	r3, #0
   24944:	461a      	mov	r2, r3
   24946:	4619      	mov	r1, r3
   24948:	4618      	mov	r0, r3
   2494a:	f7e5 f841 	bl	99d0 <__assert_func>
   2494e:	bf00      	nop
   24950:	20008bc4 	.word	0x20008bc4
   24954:	00555555 	.word	0x00555555
   24958:	8e89bed6 	.word	0x8e89bed6

0002495c <ble_ll_scan_rx_pkt_in>:
{
   2495c:	b500      	push	{lr}
   2495e:	b089      	sub	sp, #36	; 0x24
    ble_ll_scan_rx_pkt_in_on_legacy(ptype, om, hdr, &addrd);
   24960:	ab01      	add	r3, sp, #4
   24962:	f7ff fcb9 	bl	242d8 <ble_ll_scan_rx_pkt_in_on_legacy>
    ble_ll_scan_chk_resume();
   24966:	f7ff ff2d 	bl	247c4 <ble_ll_scan_chk_resume>
}
   2496a:	b009      	add	sp, #36	; 0x24
   2496c:	f85d fb04 	ldr.w	pc, [sp], #4

00024970 <ble_ll_scan_set_scan_params>:
    if (len != sizeof(*cmd)) {
   24970:	2907      	cmp	r1, #7
   24972:	d135      	bne.n	249e0 <ble_ll_scan_set_scan_params+0x70>
{
   24974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (scansm->scan_enabled) {
   24976:	4b23      	ldr	r3, [pc, #140]	; (24a04 <ble_ll_scan_set_scan_params+0x94>)
   24978:	781b      	ldrb	r3, [r3, #0]
   2497a:	bb9b      	cbnz	r3, 249e4 <ble_ll_scan_set_scan_params+0x74>
    scan_itvl = le16toh(cmd->scan_itvl);
   2497c:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    scan_window = le16toh(cmd->scan_window);
   24980:	f8b0 5003 	ldrh.w	r5, [r0, #3]
    if ((cmd->scan_type != BLE_HCI_SCAN_TYPE_PASSIVE) &&
   24984:	7803      	ldrb	r3, [r0, #0]
   24986:	2b01      	cmp	r3, #1
   24988:	d82e      	bhi.n	249e8 <ble_ll_scan_set_scan_params+0x78>
    if ((scan_itvl < BLE_HCI_SCAN_ITVL_MIN) ||
   2498a:	1f13      	subs	r3, r2, #4
   2498c:	b29b      	uxth	r3, r3
   2498e:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   24992:	428b      	cmp	r3, r1
   24994:	d82a      	bhi.n	249ec <ble_ll_scan_set_scan_params+0x7c>
        (scan_itvl > BLE_HCI_SCAN_ITVL_MAX) ||
   24996:	2d03      	cmp	r5, #3
   24998:	d92a      	bls.n	249f0 <ble_ll_scan_set_scan_params+0x80>
        (scan_window < BLE_HCI_SCAN_WINDOW_MIN) ||
   2499a:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
   2499e:	d829      	bhi.n	249f4 <ble_ll_scan_set_scan_params+0x84>
        (scan_window > BLE_HCI_SCAN_WINDOW_MAX) ||
   249a0:	42aa      	cmp	r2, r5
   249a2:	d329      	bcc.n	249f8 <ble_ll_scan_set_scan_params+0x88>
    if (cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   249a4:	7943      	ldrb	r3, [r0, #5]
   249a6:	2b03      	cmp	r3, #3
   249a8:	d828      	bhi.n	249fc <ble_ll_scan_set_scan_params+0x8c>
    if (cmd->filter_policy > BLE_HCI_SCAN_FILT_MAX) {
   249aa:	7983      	ldrb	r3, [r0, #6]
   249ac:	2b03      	cmp	r3, #3
   249ae:	d827      	bhi.n	24a00 <ble_ll_scan_set_scan_params+0x90>
   249b0:	4604      	mov	r4, r0
    scanp->configured = 1;
   249b2:	4e15      	ldr	r6, [pc, #84]	; (24a08 <ble_ll_scan_set_scan_params+0x98>)
   249b4:	2301      	movs	r3, #1
   249b6:	70f3      	strb	r3, [r6, #3]
    scanp->scan_type = cmd->scan_type;
   249b8:	7803      	ldrb	r3, [r0, #0]
   249ba:	7133      	strb	r3, [r6, #4]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   249bc:	f240 2771 	movw	r7, #625	; 0x271
   249c0:	fb07 f002 	mul.w	r0, r7, r2
   249c4:	f7f7 f9e0 	bl	1bd88 <os_cputime_usecs_to_ticks>
    scanp->timing.interval = ble_ll_scan_time_hci_to_ticks(scan_itvl);
   249c8:	60b0      	str	r0, [r6, #8]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   249ca:	fb07 f005 	mul.w	r0, r7, r5
   249ce:	f7f7 f9db 	bl	1bd88 <os_cputime_usecs_to_ticks>
    scanp->timing.window = ble_ll_scan_time_hci_to_ticks(scan_window);
   249d2:	60f0      	str	r0, [r6, #12]
    scanp->scan_filt_policy = cmd->filter_policy;
   249d4:	79a3      	ldrb	r3, [r4, #6]
   249d6:	70b3      	strb	r3, [r6, #2]
    scanp->own_addr_type = cmd->own_addr_type;
   249d8:	7963      	ldrb	r3, [r4, #5]
   249da:	7073      	strb	r3, [r6, #1]
    return 0;
   249dc:	2000      	movs	r0, #0
   249de:	e002      	b.n	249e6 <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   249e0:	2012      	movs	r0, #18
}
   249e2:	4770      	bx	lr
        return BLE_ERR_CMD_DISALLOWED;
   249e4:	200c      	movs	r0, #12
}
   249e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   249e8:	2012      	movs	r0, #18
   249ea:	e7fc      	b.n	249e6 <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   249ec:	2012      	movs	r0, #18
   249ee:	e7fa      	b.n	249e6 <ble_ll_scan_set_scan_params+0x76>
   249f0:	2012      	movs	r0, #18
   249f2:	e7f8      	b.n	249e6 <ble_ll_scan_set_scan_params+0x76>
   249f4:	2012      	movs	r0, #18
   249f6:	e7f6      	b.n	249e6 <ble_ll_scan_set_scan_params+0x76>
   249f8:	2012      	movs	r0, #18
   249fa:	e7f4      	b.n	249e6 <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   249fc:	2012      	movs	r0, #18
   249fe:	e7f2      	b.n	249e6 <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   24a00:	2012      	movs	r0, #18
   24a02:	e7f0      	b.n	249e6 <ble_ll_scan_set_scan_params+0x76>
   24a04:	20008bc4 	.word	0x20008bc4
   24a08:	20008b60 	.word	0x20008b60

00024a0c <ble_ll_hci_scan_set_enable>:
    if (len != sizeof(*cmd)) {
   24a0c:	2902      	cmp	r1, #2
   24a0e:	d001      	beq.n	24a14 <ble_ll_hci_scan_set_enable+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   24a10:	2012      	movs	r0, #18
}
   24a12:	4770      	bx	lr
{
   24a14:	b500      	push	{lr}
   24a16:	b083      	sub	sp, #12
    return ble_ll_scan_set_enable(cmd->enable, cmd->filter_duplicates, 0, 0,
   24a18:	7841      	ldrb	r1, [r0, #1]
   24a1a:	7800      	ldrb	r0, [r0, #0]
   24a1c:	2200      	movs	r2, #0
   24a1e:	9200      	str	r2, [sp, #0]
   24a20:	4613      	mov	r3, r2
   24a22:	f7ff fde3 	bl	245ec <ble_ll_scan_set_enable>
}
   24a26:	b003      	add	sp, #12
   24a28:	f85d fb04 	ldr.w	pc, [sp], #4

00024a2c <ble_ll_scan_can_chg_whitelist>:
    scanp = scansm->scanp;
   24a2c:	4b06      	ldr	r3, [pc, #24]	; (24a48 <ble_ll_scan_can_chg_whitelist+0x1c>)
   24a2e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    if (scansm->scan_enabled && (scanp->scan_filt_policy & 1)) {
   24a30:	781b      	ldrb	r3, [r3, #0]
   24a32:	b12b      	cbz	r3, 24a40 <ble_ll_scan_can_chg_whitelist+0x14>
   24a34:	7893      	ldrb	r3, [r2, #2]
   24a36:	f013 0f01 	tst.w	r3, #1
   24a3a:	d103      	bne.n	24a44 <ble_ll_scan_can_chg_whitelist+0x18>
        rc = 1;
   24a3c:	2001      	movs	r0, #1
   24a3e:	4770      	bx	lr
   24a40:	2001      	movs	r0, #1
   24a42:	4770      	bx	lr
        rc = 0;
   24a44:	2000      	movs	r0, #0
}
   24a46:	4770      	bx	lr
   24a48:	20008bc4 	.word	0x20008bc4

00024a4c <ble_ll_scan_initiator_start>:
{
   24a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24a4e:	4605      	mov	r5, r0
   24a50:	460f      	mov	r7, r1
    scansm->own_addr_type = hcc->own_addr_type;
   24a52:	7b03      	ldrb	r3, [r0, #12]
   24a54:	4c12      	ldr	r4, [pc, #72]	; (24aa0 <ble_ll_scan_initiator_start+0x54>)
   24a56:	7063      	strb	r3, [r4, #1]
    scansm->scanp = &scansm->scanp_phys[PHY_UNCODED];
   24a58:	f104 0374 	add.w	r3, r4, #116	; 0x74
   24a5c:	66e3      	str	r3, [r4, #108]	; 0x6c
    scansm->scanp_next = NULL;
   24a5e:	2300      	movs	r3, #0
   24a60:	6723      	str	r3, [r4, #112]	; 0x70
    scanp->scan_filt_policy = hcc->filter_policy;
   24a62:	7903      	ldrb	r3, [r0, #4]
   24a64:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
    scanp->timing.interval = ble_ll_scan_time_hci_to_ticks(hcc->scan_itvl);
   24a68:	8800      	ldrh	r0, [r0, #0]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   24a6a:	f240 2671 	movw	r6, #625	; 0x271
   24a6e:	fb06 f000 	mul.w	r0, r6, r0
   24a72:	f7f7 f989 	bl	1bd88 <os_cputime_usecs_to_ticks>
    scanp->timing.interval = ble_ll_scan_time_hci_to_ticks(hcc->scan_itvl);
   24a76:	67e0      	str	r0, [r4, #124]	; 0x7c
    scanp->timing.window = ble_ll_scan_time_hci_to_ticks(hcc->scan_window);
   24a78:	8868      	ldrh	r0, [r5, #2]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   24a7a:	fb06 f000 	mul.w	r0, r6, r0
   24a7e:	f7f7 f983 	bl	1bd88 <os_cputime_usecs_to_ticks>
    scanp->timing.window = ble_ll_scan_time_hci_to_ticks(hcc->scan_window);
   24a82:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    scanp->scan_type = BLE_SCAN_TYPE_INITIATE;
   24a86:	2302      	movs	r3, #2
   24a88:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    rc = ble_ll_scan_sm_start(scansm);
   24a8c:	4620      	mov	r0, r4
   24a8e:	f7ff fc69 	bl	24364 <ble_ll_scan_sm_start>
    if (sm == NULL) {
   24a92:	b117      	cbz	r7, 24a9a <ble_ll_scan_initiator_start+0x4e>
    if (rc == BLE_ERR_SUCCESS) {
   24a94:	b110      	cbz	r0, 24a9c <ble_ll_scan_initiator_start+0x50>
        *sm = NULL;
   24a96:	2300      	movs	r3, #0
   24a98:	603b      	str	r3, [r7, #0]
}
   24a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *sm = scansm;
   24a9c:	603c      	str	r4, [r7, #0]
   24a9e:	e7fc      	b.n	24a9a <ble_ll_scan_initiator_start+0x4e>
   24aa0:	20008bc4 	.word	0x20008bc4

00024aa4 <ble_ll_scan_enabled>:
}
   24aa4:	4b01      	ldr	r3, [pc, #4]	; (24aac <ble_ll_scan_enabled+0x8>)
   24aa6:	7818      	ldrb	r0, [r3, #0]
   24aa8:	4770      	bx	lr
   24aaa:	bf00      	nop
   24aac:	20008bc4 	.word	0x20008bc4

00024ab0 <ble_ll_scan_get_peer_rpa>:
}
   24ab0:	4800      	ldr	r0, [pc, #0]	; (24ab4 <ble_ll_scan_get_peer_rpa+0x4>)
   24ab2:	4770      	bx	lr
   24ab4:	20008bca 	.word	0x20008bca

00024ab8 <ble_ll_scan_get_local_rpa>:
}
   24ab8:	4800      	ldr	r0, [pc, #0]	; (24abc <ble_ll_scan_get_local_rpa+0x4>)
   24aba:	4770      	bx	lr
   24abc:	20008bdb 	.word	0x20008bdb

00024ac0 <ble_ll_scan_set_peer_rpa>:
    memcpy(scansm->scan_peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   24ac0:	4b03      	ldr	r3, [pc, #12]	; (24ad0 <ble_ll_scan_set_peer_rpa+0x10>)
   24ac2:	6802      	ldr	r2, [r0, #0]
   24ac4:	f8c3 2006 	str.w	r2, [r3, #6]
   24ac8:	8882      	ldrh	r2, [r0, #4]
   24aca:	815a      	strh	r2, [r3, #10]
}
   24acc:	4770      	bx	lr
   24ace:	bf00      	nop
   24ad0:	20008bc4 	.word	0x20008bc4

00024ad4 <ble_ll_scan_get_pdu_data>:
}
   24ad4:	4800      	ldr	r0, [pc, #0]	; (24ad8 <ble_ll_scan_get_pdu_data+0x4>)
   24ad6:	4770      	bx	lr
   24ad8:	20008bda 	.word	0x20008bda

00024adc <ble_ll_scan_whitelist_enabled>:
    return g_ble_ll_scan_sm.scanp->scan_filt_policy & 1;
   24adc:	4b02      	ldr	r3, [pc, #8]	; (24ae8 <ble_ll_scan_whitelist_enabled+0xc>)
   24ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   24ae0:	7898      	ldrb	r0, [r3, #2]
}
   24ae2:	f000 0001 	and.w	r0, r0, #1
   24ae6:	4770      	bx	lr
   24ae8:	20008bc4 	.word	0x20008bc4

00024aec <ble_ll_scan_reset>:
 *
 * @return int
 */
void
ble_ll_scan_reset(void)
{
   24aec:	b510      	push	{r4, lr}
    struct ble_ll_scan_sm *scansm;

    scansm = &g_ble_ll_scan_sm;

    /* If enabled, stop it. */
    if (scansm->scan_enabled) {
   24aee:	4b0c      	ldr	r3, [pc, #48]	; (24b20 <ble_ll_scan_reset+0x34>)
   24af0:	781b      	ldrb	r3, [r3, #0]
   24af2:	b983      	cbnz	r3, 24b16 <ble_ll_scan_reset+0x2a>
    os_cputime_timer_stop(&scansm->duration_timer);
    os_cputime_timer_stop(&scansm->period_timer);
#endif

    /* Reset duplicate advertisers and those from which we rxd a response */
    g_ble_ll_scan_num_rsp_advs = 0;
   24af4:	2400      	movs	r4, #0
   24af6:	4b0b      	ldr	r3, [pc, #44]	; (24b24 <ble_ll_scan_reset+0x38>)
   24af8:	701c      	strb	r4, [r3, #0]
    memset(&g_ble_ll_scan_rsp_advs[0], 0, sizeof(g_ble_ll_scan_rsp_advs));
   24afa:	2250      	movs	r2, #80	; 0x50
   24afc:	4621      	mov	r1, r4
   24afe:	480a      	ldr	r0, [pc, #40]	; (24b28 <ble_ll_scan_reset+0x3c>)
   24b00:	f7e6 feef 	bl	b8e2 <memset>

    os_mempool_clear(&g_scan_dup_pool);
   24b04:	4809      	ldr	r0, [pc, #36]	; (24b2c <ble_ll_scan_reset+0x40>)
   24b06:	f7e5 fff1 	bl	aaec <os_mempool_clear>
    TAILQ_INIT(&g_scan_dup_list);
   24b0a:	4b09      	ldr	r3, [pc, #36]	; (24b30 <ble_ll_scan_reset+0x44>)
   24b0c:	601c      	str	r4, [r3, #0]
   24b0e:	605b      	str	r3, [r3, #4]
    /* clear memory pool for AUX scan results */
    os_mempool_clear(&ext_scan_aux_pool);
#endif

    /* Call the common init function again */
    ble_ll_scan_common_init();
   24b10:	f7ff fc74 	bl	243fc <ble_ll_scan_common_init>
}
   24b14:	bd10      	pop	{r4, pc}
        ble_ll_scan_sm_stop(0);
   24b16:	2000      	movs	r0, #0
   24b18:	f7ff fd28 	bl	2456c <ble_ll_scan_sm_stop>
   24b1c:	e7ea      	b.n	24af4 <ble_ll_scan_reset+0x8>
   24b1e:	bf00      	nop
   24b20:	20008bc4 	.word	0x20008bc4
   24b24:	20008b5c 	.word	0x20008b5c
   24b28:	20008b74 	.word	0x20008b74
   24b2c:	20008cd4 	.word	0x20008cd4
   24b30:	20008c4c 	.word	0x20008c4c

00024b34 <ble_ll_scan_init>:
 * Initialize a scanner. Must be called before scanning can be started.
 * Expected to be called with a un-initialized scanning state machine.
 */
void
ble_ll_scan_init(void)
{
   24b34:	b500      	push	{lr}
   24b36:	b083      	sub	sp, #12
                          ext_scan_aux_mem,
                          "ble_ll_aux_scan_pool");
    BLE_LL_ASSERT(err == 0);
#endif

    err = os_mempool_init(&g_scan_dup_pool,
   24b38:	4b0d      	ldr	r3, [pc, #52]	; (24b70 <ble_ll_scan_init+0x3c>)
   24b3a:	9300      	str	r3, [sp, #0]
   24b3c:	4b0d      	ldr	r3, [pc, #52]	; (24b74 <ble_ll_scan_init+0x40>)
   24b3e:	2210      	movs	r2, #16
   24b40:	2108      	movs	r1, #8
   24b42:	480d      	ldr	r0, [pc, #52]	; (24b78 <ble_ll_scan_init+0x44>)
   24b44:	f7e5 ffc8 	bl	aad8 <os_mempool_init>
                          MYNEWT_VAL(BLE_LL_NUM_SCAN_DUP_ADVS),
                          sizeof(struct ble_ll_scan_dup_entry),
                          g_scan_dup_mem,
                          "ble_ll_scan_dup_pool");
    BLE_LL_ASSERT(err == 0);
   24b48:	b940      	cbnz	r0, 24b5c <ble_ll_scan_init+0x28>

    TAILQ_INIT(&g_scan_dup_list);
   24b4a:	4b0c      	ldr	r3, [pc, #48]	; (24b7c <ble_ll_scan_init+0x48>)
   24b4c:	2200      	movs	r2, #0
   24b4e:	601a      	str	r2, [r3, #0]
   24b50:	605b      	str	r3, [r3, #4]

    ble_ll_scan_common_init();
   24b52:	f7ff fc53 	bl	243fc <ble_ll_scan_common_init>
}
   24b56:	b003      	add	sp, #12
   24b58:	f85d fb04 	ldr.w	pc, [sp], #4
    BLE_LL_ASSERT(err == 0);
   24b5c:	f7e3 fb30 	bl	81c0 <hal_debugger_connected>
   24b60:	b100      	cbz	r0, 24b64 <ble_ll_scan_init+0x30>
   24b62:	be01      	bkpt	0x0001
   24b64:	2300      	movs	r3, #0
   24b66:	461a      	mov	r2, r3
   24b68:	4619      	mov	r1, r3
   24b6a:	4618      	mov	r0, r3
   24b6c:	f7e4 ff30 	bl	99d0 <__assert_func>
   24b70:	0002983c 	.word	0x0002983c
   24b74:	20008c54 	.word	0x20008c54
   24b78:	20008cd4 	.word	0x20008cd4
   24b7c:	20008c4c 	.word	0x20008c4c

00024b80 <ble_ll_sched_is_overlap>:
 * @return int 0: dont overlap 1:overlap
 */
static int
ble_ll_sched_is_overlap(struct ble_ll_sched_item *s1,
                        struct ble_ll_sched_item *s2)
{
   24b80:	b410      	push	{r4}
    int rc;

    rc = 1;
    if ((int32_t)(s1->start_time - s2->start_time) < 0) {
   24b82:	6843      	ldr	r3, [r0, #4]
   24b84:	684a      	ldr	r2, [r1, #4]
   24b86:	1a9c      	subs	r4, r3, r2
   24b88:	2c00      	cmp	r4, #0
   24b8a:	db07      	blt.n	24b9c <ble_ll_sched_is_overlap+0x1c>
        if ((int32_t)(s1->end_time - s2->start_time) <= 0) {
            rc = 0;
        }
    } else {
        /* Check for overlap */
        if ((int32_t)(s1->start_time - s2->end_time) >= 0) {
   24b8c:	688a      	ldr	r2, [r1, #8]
   24b8e:	1a9b      	subs	r3, r3, r2
   24b90:	2b00      	cmp	r3, #0
   24b92:	db09      	blt.n	24ba8 <ble_ll_sched_is_overlap+0x28>
            rc = 0;
   24b94:	2000      	movs	r0, #0
        }
    }

    return rc;
}
   24b96:	f85d 4b04 	ldr.w	r4, [sp], #4
   24b9a:	4770      	bx	lr
        if ((int32_t)(s1->end_time - s2->start_time) <= 0) {
   24b9c:	6883      	ldr	r3, [r0, #8]
   24b9e:	1a9a      	subs	r2, r3, r2
   24ba0:	2a00      	cmp	r2, #0
   24ba2:	dd03      	ble.n	24bac <ble_ll_sched_is_overlap+0x2c>
    rc = 1;
   24ba4:	2001      	movs	r0, #1
   24ba6:	e7f6      	b.n	24b96 <ble_ll_sched_is_overlap+0x16>
   24ba8:	2001      	movs	r0, #1
   24baa:	e7f4      	b.n	24b96 <ble_ll_sched_is_overlap+0x16>
            rc = 0;
   24bac:	2000      	movs	r0, #0
   24bae:	e7f2      	b.n	24b96 <ble_ll_sched_is_overlap+0x16>

00024bb0 <ble_ll_sched_insert_if_empty>:
static struct ble_ll_sched_item *
ble_ll_sched_insert_if_empty(struct ble_ll_sched_item *sch)
{
    struct ble_ll_sched_item *entry;

    entry = TAILQ_FIRST(&g_ble_ll_sched_q);
   24bb0:	4b07      	ldr	r3, [pc, #28]	; (24bd0 <ble_ll_sched_insert_if_empty+0x20>)
   24bb2:	681b      	ldr	r3, [r3, #0]
    if (!entry) {
   24bb4:	b10b      	cbz	r3, 24bba <ble_ll_sched_insert_if_empty+0xa>
        TAILQ_INSERT_HEAD(&g_ble_ll_sched_q, sch, link);
        sch->enqueued = 1;
    }
    return entry;
}
   24bb6:	4618      	mov	r0, r3
   24bb8:	4770      	bx	lr
        TAILQ_INSERT_HEAD(&g_ble_ll_sched_q, sch, link);
   24bba:	4601      	mov	r1, r0
   24bbc:	f841 3f14 	str.w	r3, [r1, #20]!
   24bc0:	4a03      	ldr	r2, [pc, #12]	; (24bd0 <ble_ll_sched_insert_if_empty+0x20>)
   24bc2:	6051      	str	r1, [r2, #4]
   24bc4:	6010      	str	r0, [r2, #0]
   24bc6:	6182      	str	r2, [r0, #24]
        sch->enqueued = 1;
   24bc8:	2201      	movs	r2, #1
   24bca:	7042      	strb	r2, [r0, #1]
    return entry;
   24bcc:	e7f3      	b.n	24bb6 <ble_ll_sched_insert_if_empty+0x6>
   24bce:	bf00      	nop
   24bd0:	20008cf4 	.word	0x20008cf4

00024bd4 <ble_ll_sched_conn_overlap>:
{
   24bd4:	b508      	push	{r3, lr}
    if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN) {
   24bd6:	7803      	ldrb	r3, [r0, #0]
   24bd8:	2b03      	cmp	r3, #3
   24bda:	d113      	bne.n	24c04 <ble_ll_sched_conn_overlap+0x30>
        connsm = (struct ble_ll_conn_sm *)entry->cb_arg;
   24bdc:	68c2      	ldr	r2, [r0, #12]
        entry->enqueued = 0;
   24bde:	2300      	movs	r3, #0
   24be0:	7043      	strb	r3, [r0, #1]
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   24be2:	6943      	ldr	r3, [r0, #20]
   24be4:	b153      	cbz	r3, 24bfc <ble_ll_sched_conn_overlap+0x28>
   24be6:	6981      	ldr	r1, [r0, #24]
   24be8:	6199      	str	r1, [r3, #24]
   24bea:	6983      	ldr	r3, [r0, #24]
   24bec:	6941      	ldr	r1, [r0, #20]
   24bee:	6019      	str	r1, [r3, #0]
        ble_ll_event_send(&connsm->conn_ev_end);
   24bf0:	f102 009c 	add.w	r0, r2, #156	; 0x9c
   24bf4:	f7f8 fb4a 	bl	1d28c <ble_ll_event_send>
        rc = 0;
   24bf8:	2000      	movs	r0, #0
}
   24bfa:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   24bfc:	6981      	ldr	r1, [r0, #24]
   24bfe:	4b03      	ldr	r3, [pc, #12]	; (24c0c <ble_ll_sched_conn_overlap+0x38>)
   24c00:	6059      	str	r1, [r3, #4]
   24c02:	e7f2      	b.n	24bea <ble_ll_sched_conn_overlap+0x16>
        rc = -1;
   24c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   24c08:	e7f7      	b.n	24bfa <ble_ll_sched_conn_overlap+0x26>
   24c0a:	bf00      	nop
   24c0c:	20008cf4 	.word	0x20008cf4

00024c10 <ble_ll_sched_overlaps_current>:
{
   24c10:	b510      	push	{r4, lr}
   24c12:	4604      	mov	r4, r0
    if (ble_ll_state_get() == BLE_LL_STATE_CONNECTION) {
   24c14:	f7f8 fb34 	bl	1d280 <ble_ll_state_get>
   24c18:	2804      	cmp	r0, #4
   24c1a:	d001      	beq.n	24c20 <ble_ll_sched_overlaps_current+0x10>
    rc = 0;
   24c1c:	2000      	movs	r0, #0
}
   24c1e:	bd10      	pop	{r4, pc}
        ce_end_time = ble_ll_conn_get_ce_end_time();
   24c20:	f7fa fa1e 	bl	1f060 <ble_ll_conn_get_ce_end_time>
        if ((int32_t)(ce_end_time - sch->start_time) > 0) {
   24c24:	6863      	ldr	r3, [r4, #4]
   24c26:	1ac0      	subs	r0, r0, r3
   24c28:	2800      	cmp	r0, #0
   24c2a:	dd01      	ble.n	24c30 <ble_ll_sched_overlaps_current+0x20>
            rc = 1;
   24c2c:	2001      	movs	r0, #1
    return rc;
   24c2e:	e7f6      	b.n	24c1e <ble_ll_sched_overlaps_current+0xe>
    rc = 0;
   24c30:	2000      	movs	r0, #0
   24c32:	e7f4      	b.n	24c1e <ble_ll_sched_overlaps_current+0xe>

00024c34 <ble_ll_sched_execute_item>:
 *
 * @return int 0: schedule item is not over; otherwise schedule item is done.
 */
static int
ble_ll_sched_execute_item(struct ble_ll_sched_item *sch)
{
   24c34:	b538      	push	{r3, r4, r5, lr}
   24c36:	4604      	mov	r4, r0
    int rc;
    uint8_t lls;

    lls = ble_ll_state_get();
   24c38:	f7f8 fb22 	bl	1d280 <ble_ll_state_get>
   24c3c:	4605      	mov	r5, r0

    ble_ll_trace_u32x3(BLE_LL_TRACE_ID_SCHED, lls, os_cputime_get32(),
   24c3e:	f7f7 f88c 	bl	1bd5a <os_cputime_get32>
                       sch->start_time);

    if (lls == BLE_LL_STATE_STANDBY) {
   24c42:	b185      	cbz	r5, 24c66 <ble_ll_sched_execute_item+0x32>
     * BLE_LL_STATE_INITIATING
     * BLE_LL_STATE_STANDBY
     *
     * Let scanner to decide to disable phy or not.
     */
    if (sch->sched_type == BLE_LL_SCHED_TYPE_AUX_SCAN) {
   24c44:	7823      	ldrb	r3, [r4, #0]
   24c46:	2b04      	cmp	r3, #4
   24c48:	d103      	bne.n	24c52 <ble_ll_sched_execute_item+0x1e>
        if (lls == BLE_LL_STATE_INITIATING || lls == BLE_LL_STATE_SCANNING) {
   24c4a:	1eab      	subs	r3, r5, #2
   24c4c:	b2db      	uxtb	r3, r3
   24c4e:	2b01      	cmp	r3, #1
   24c50:	d909      	bls.n	24c66 <ble_ll_sched_execute_item+0x32>
     * This is either an advertising event or connection event start. If
     * we are scanning or initiating just stop it.
     */

    /* We have to disable the PHY no matter what */
    ble_phy_disable();
   24c52:	f001 fad7 	bl	26204 <ble_phy_disable>

    if (lls == BLE_LL_STATE_SCANNING) {
   24c56:	2d02      	cmp	r5, #2
   24c58:	d00a      	beq.n	24c70 <ble_ll_sched_execute_item+0x3c>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
        ble_ll_scan_halt();
    } else if (lls == BLE_LL_STATE_INITIATING) {
   24c5a:	2d03      	cmp	r5, #3
   24c5c:	d00e      	beq.n	24c7c <ble_ll_sched_execute_item+0x48>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
        ble_ll_scan_halt();
        /* PHY is disabled - make sure we do not wait for AUX_CONNECT_RSP */
        ble_ll_conn_reset_pending_aux_conn_rsp();
    } else if (lls == BLE_LL_STATE_ADV) {
   24c5e:	2d01      	cmp	r5, #1
   24c60:	d014      	beq.n	24c8c <ble_ll_sched_execute_item+0x58>
        STATS_INC(ble_ll_stats, sched_state_sync_errs);
        ble_ll_sync_halt();
#endif
    } else {
        STATS_INC(ble_ll_stats, sched_state_conn_errs);
        ble_ll_conn_event_halt();
   24c62:	f7fa fe4b 	bl	1f8fc <ble_ll_conn_event_halt>
    }

sched:
    BLE_LL_DEBUG_GPIO(SCHED_ITEM_CB, 1);
    BLE_LL_ASSERT(sch->sched_cb);
   24c66:	6923      	ldr	r3, [r4, #16]
   24c68:	b19b      	cbz	r3, 24c92 <ble_ll_sched_execute_item+0x5e>
    rc = sch->sched_cb(sch);
   24c6a:	4620      	mov	r0, r4
   24c6c:	4798      	blx	r3
    BLE_LL_DEBUG_GPIO(SCHED_ITEM_CB, 0);
    return rc;
}
   24c6e:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   24c70:	2000      	movs	r0, #0
   24c72:	f7f8 faff 	bl	1d274 <ble_ll_state_set>
        ble_ll_scan_halt();
   24c76:	f7ff fc6b 	bl	24550 <ble_ll_scan_halt>
   24c7a:	e7f4      	b.n	24c66 <ble_ll_sched_execute_item+0x32>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   24c7c:	2000      	movs	r0, #0
   24c7e:	f7f8 faf9 	bl	1d274 <ble_ll_state_set>
        ble_ll_scan_halt();
   24c82:	f7ff fc65 	bl	24550 <ble_ll_scan_halt>
        ble_ll_conn_reset_pending_aux_conn_rsp();
   24c86:	f7fa fbf5 	bl	1f474 <ble_ll_conn_reset_pending_aux_conn_rsp>
   24c8a:	e7ec      	b.n	24c66 <ble_ll_sched_execute_item+0x32>
        ble_ll_adv_halt();
   24c8c:	f7f9 fa9e 	bl	1e1cc <ble_ll_adv_halt>
   24c90:	e7e9      	b.n	24c66 <ble_ll_sched_execute_item+0x32>
    BLE_LL_ASSERT(sch->sched_cb);
   24c92:	f7e3 fa95 	bl	81c0 <hal_debugger_connected>
   24c96:	b100      	cbz	r0, 24c9a <ble_ll_sched_execute_item+0x66>
   24c98:	be01      	bkpt	0x0001
   24c9a:	2300      	movs	r3, #0
   24c9c:	461a      	mov	r2, r3
   24c9e:	4619      	mov	r1, r3
   24ca0:	4618      	mov	r0, r3
   24ca2:	f7e4 fe95 	bl	99d0 <__assert_func>
	...

00024ca8 <ble_ll_sched_run>:
    struct ble_ll_sched_item *sch;

    BLE_LL_DEBUG_GPIO(SCHED_RUN, 1);

    /* Look through schedule queue */
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   24ca8:	4b0f      	ldr	r3, [pc, #60]	; (24ce8 <ble_ll_sched_run+0x40>)
   24caa:	6818      	ldr	r0, [r3, #0]
    if (sch) {
   24cac:	b1d0      	cbz	r0, 24ce4 <ble_ll_sched_run+0x3c>
{
   24cae:	b510      	push	{r4, lr}
            g_ble_ll_sched_max_early = dt;
        }
#endif

        /* Remove schedule item and execute the callback */
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   24cb0:	6943      	ldr	r3, [r0, #20]
   24cb2:	b19b      	cbz	r3, 24cdc <ble_ll_sched_run+0x34>
   24cb4:	6982      	ldr	r2, [r0, #24]
   24cb6:	619a      	str	r2, [r3, #24]
   24cb8:	6983      	ldr	r3, [r0, #24]
   24cba:	6942      	ldr	r2, [r0, #20]
   24cbc:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   24cbe:	2300      	movs	r3, #0
   24cc0:	7043      	strb	r3, [r0, #1]
        ble_ll_sched_execute_item(sch);
   24cc2:	f7ff ffb7 	bl	24c34 <ble_ll_sched_execute_item>

        /* Restart if there is an item on the schedule */
        sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   24cc6:	4b08      	ldr	r3, [pc, #32]	; (24ce8 <ble_ll_sched_run+0x40>)
   24cc8:	681c      	ldr	r4, [r3, #0]
        if (sch) {
   24cca:	b11c      	cbz	r4, 24cd4 <ble_ll_sched_run+0x2c>
            os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   24ccc:	6861      	ldr	r1, [r4, #4]
   24cce:	4807      	ldr	r0, [pc, #28]	; (24cec <ble_ll_sched_run+0x44>)
   24cd0:	f7f7 f83b 	bl	1bd4a <os_cputime_timer_start>
        }
        ble_ll_rfmgmt_sched_changed(sch);
   24cd4:	4620      	mov	r0, r4
   24cd6:	f7fe fdf1 	bl	238bc <ble_ll_rfmgmt_sched_changed>
    }

    BLE_LL_DEBUG_GPIO(SCHED_RUN, 0);
}
   24cda:	bd10      	pop	{r4, pc}
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   24cdc:	6982      	ldr	r2, [r0, #24]
   24cde:	4b02      	ldr	r3, [pc, #8]	; (24ce8 <ble_ll_sched_run+0x40>)
   24ce0:	605a      	str	r2, [r3, #4]
   24ce2:	e7e9      	b.n	24cb8 <ble_ll_sched_run+0x10>
   24ce4:	4770      	bx	lr
   24ce6:	bf00      	nop
   24ce8:	20008cf4 	.word	0x20008cf4
   24cec:	20008cfc 	.word	0x20008cfc

00024cf0 <ble_ll_sched_conn_reschedule>:
{
   24cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24cf4:	4682      	mov	sl, r0
    sch = &connsm->conn_sch;
   24cf6:	f100 07dc 	add.w	r7, r0, #220	; 0xdc
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks;
   24cfa:	6f43      	ldr	r3, [r0, #116]	; 0x74
   24cfc:	4a62      	ldr	r2, [pc, #392]	; (24e88 <ble_ll_sched_conn_reschedule+0x198>)
   24cfe:	7812      	ldrb	r2, [r2, #0]
   24d00:	1a9b      	subs	r3, r3, r2
   24d02:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   24d06:	79c3      	ldrb	r3, [r0, #7]
   24d08:	2b02      	cmp	r3, #2
   24d0a:	d01f      	beq.n	24d4c <ble_ll_sched_conn_reschedule+0x5c>
        sch->remainder = connsm->anchor_point_usecs;
   24d0c:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   24d10:	f880 30de 	strb.w	r3, [r0, #222]	; 0xde
    sch->end_time = connsm->ce_end_time;
   24d14:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
   24d18:	f8ca 30e4 	str.w	r3, [sl, #228]	; 0xe4
    if ((int32_t)(sch->start_time - os_cputime_get32()) < 0) {
   24d1c:	f8da 40e0 	ldr.w	r4, [sl, #224]	; 0xe0
   24d20:	f7f7 f81b 	bl	1bd5a <os_cputime_get32>
   24d24:	1a20      	subs	r0, r4, r0
   24d26:	2800      	cmp	r0, #0
   24d28:	f2c0 80ab 	blt.w	24e82 <ble_ll_sched_conn_reschedule+0x192>
    OS_ENTER_CRITICAL(sr);
   24d2c:	f7e6 fc42 	bl	b5b4 <os_arch_save_sr>
   24d30:	4681      	mov	r9, r0
    if (ble_ll_sched_overlaps_current(sch)) {
   24d32:	4638      	mov	r0, r7
   24d34:	f7ff ff6c 	bl	24c10 <ble_ll_sched_overlaps_current>
   24d38:	4680      	mov	r8, r0
   24d3a:	b9a8      	cbnz	r0, 24d68 <ble_ll_sched_conn_reschedule+0x78>
    os_cputime_timer_stop(&g_ble_ll_sched_timer);
   24d3c:	4853      	ldr	r0, [pc, #332]	; (24e8c <ble_ll_sched_conn_reschedule+0x19c>)
   24d3e:	f7f7 f808 	bl	1bd52 <os_cputime_timer_stop>
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   24d42:	4b53      	ldr	r3, [pc, #332]	; (24e90 <ble_ll_sched_conn_reschedule+0x1a0>)
   24d44:	681d      	ldr	r5, [r3, #0]
    end_overlap = NULL;
   24d46:	2600      	movs	r6, #0
    start_overlap = NULL;
   24d48:	4634      	mov	r4, r6
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   24d4a:	e02b      	b.n	24da4 <ble_ll_sched_conn_reschedule+0xb4>
        sch->start_time -= (os_cputime_usecs_to_ticks(usecs) + 1);
   24d4c:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   24d50:	f7f7 f81a 	bl	1bd88 <os_cputime_usecs_to_ticks>
   24d54:	3001      	adds	r0, #1
   24d56:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
   24d5a:	1a1b      	subs	r3, r3, r0
   24d5c:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
        sch->remainder = 0;
   24d60:	2300      	movs	r3, #0
   24d62:	f88a 30de 	strb.w	r3, [sl, #222]	; 0xde
   24d66:	e7d5      	b.n	24d14 <ble_ll_sched_conn_reschedule+0x24>
        OS_EXIT_CRITICAL(sr);
   24d68:	4648      	mov	r0, r9
   24d6a:	f7e6 fc29 	bl	b5c0 <os_arch_restore_sr>
        return -1;
   24d6e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   24d72:	e074      	b.n	24e5e <ble_ll_sched_conn_reschedule+0x16e>
                            !ble_ll_conn_is_lru((struct ble_ll_conn_sm *)sch->cb_arg,
   24d74:	68e9      	ldr	r1, [r5, #12]
   24d76:	f8da 00e8 	ldr.w	r0, [sl, #232]	; 0xe8
   24d7a:	f7fa f967 	bl	1f04c <ble_ll_conn_is_lru>
           if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN &&
   24d7e:	b9e0      	cbnz	r0, 24dba <ble_ll_sched_conn_reschedule+0xca>
                start_overlap = NULL;
   24d80:	2400      	movs	r4, #0
                rc = -1;
   24d82:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    if (!rc) {
   24d86:	f1b8 0f00 	cmp.w	r8, #0
   24d8a:	d143      	bne.n	24e14 <ble_ll_sched_conn_reschedule+0x124>
        if (!entry) {
   24d8c:	b335      	cbz	r5, 24ddc <ble_ll_sched_conn_reschedule+0xec>
        sch->enqueued = 1;
   24d8e:	2301      	movs	r3, #1
   24d90:	f88a 30dd 	strb.w	r3, [sl, #221]	; 0xdd
    while (entry) {
   24d94:	e03e      	b.n	24e14 <ble_ll_sched_conn_reschedule+0x124>
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   24d96:	f8da 30e4 	ldr.w	r3, [sl, #228]	; 0xe4
   24d9a:	6869      	ldr	r1, [r5, #4]
   24d9c:	1a5b      	subs	r3, r3, r1
   24d9e:	2b00      	cmp	r3, #0
   24da0:	dd0e      	ble.n	24dc0 <ble_ll_sched_conn_reschedule+0xd0>
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   24da2:	696d      	ldr	r5, [r5, #20]
   24da4:	2d00      	cmp	r5, #0
   24da6:	d0ee      	beq.n	24d86 <ble_ll_sched_conn_reschedule+0x96>
        if (ble_ll_sched_is_overlap(sch, entry)) {
   24da8:	4629      	mov	r1, r5
   24daa:	4638      	mov	r0, r7
   24dac:	f7ff fee8 	bl	24b80 <ble_ll_sched_is_overlap>
   24db0:	2800      	cmp	r0, #0
   24db2:	d0f0      	beq.n	24d96 <ble_ll_sched_conn_reschedule+0xa6>
           if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN &&
   24db4:	782b      	ldrb	r3, [r5, #0]
   24db6:	2b03      	cmp	r3, #3
   24db8:	d0dc      	beq.n	24d74 <ble_ll_sched_conn_reschedule+0x84>
            if (start_overlap == NULL) {
   24dba:	b164      	cbz	r4, 24dd6 <ble_ll_sched_conn_reschedule+0xe6>
                end_overlap = entry;
   24dbc:	462e      	mov	r6, r5
   24dbe:	e7f0      	b.n	24da2 <ble_ll_sched_conn_reschedule+0xb2>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   24dc0:	69ab      	ldr	r3, [r5, #24]
   24dc2:	f8ca 30f4 	str.w	r3, [sl, #244]	; 0xf4
   24dc6:	4653      	mov	r3, sl
   24dc8:	f843 5ff0 	str.w	r5, [r3, #240]!
   24dcc:	69a9      	ldr	r1, [r5, #24]
   24dce:	600f      	str	r7, [r1, #0]
   24dd0:	61ab      	str	r3, [r5, #24]
                rc = 0;
   24dd2:	4680      	mov	r8, r0
   24dd4:	e7da      	b.n	24d8c <ble_ll_sched_conn_reschedule+0x9c>
                end_overlap = entry;
   24dd6:	462e      	mov	r6, r5
                start_overlap = entry;
   24dd8:	462c      	mov	r4, r5
   24dda:	e7e2      	b.n	24da2 <ble_ll_sched_conn_reschedule+0xb2>
            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   24ddc:	2300      	movs	r3, #0
   24dde:	f8ca 30f0 	str.w	r3, [sl, #240]	; 0xf0
   24de2:	4b2b      	ldr	r3, [pc, #172]	; (24e90 <ble_ll_sched_conn_reschedule+0x1a0>)
   24de4:	685a      	ldr	r2, [r3, #4]
   24de6:	f8ca 20f4 	str.w	r2, [sl, #244]	; 0xf4
   24dea:	6017      	str	r7, [r2, #0]
   24dec:	f10a 02f0 	add.w	r2, sl, #240	; 0xf0
   24df0:	605a      	str	r2, [r3, #4]
   24df2:	e7cc      	b.n	24d8e <ble_ll_sched_conn_reschedule+0x9e>
            tmp = (struct ble_ll_conn_sm *)entry->cb_arg;
   24df4:	68e0      	ldr	r0, [r4, #12]
            ble_ll_event_send(&tmp->conn_ev_end);
   24df6:	309c      	adds	r0, #156	; 0x9c
   24df8:	f7f8 fa48 	bl	1d28c <ble_ll_event_send>
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   24dfc:	6963      	ldr	r3, [r4, #20]
   24dfe:	b1f3      	cbz	r3, 24e3e <ble_ll_sched_conn_reschedule+0x14e>
   24e00:	69a2      	ldr	r2, [r4, #24]
   24e02:	619a      	str	r2, [r3, #24]
   24e04:	69a3      	ldr	r3, [r4, #24]
   24e06:	6962      	ldr	r2, [r4, #20]
   24e08:	601a      	str	r2, [r3, #0]
        entry->enqueued = 0;
   24e0a:	2300      	movs	r3, #0
   24e0c:	7063      	strb	r3, [r4, #1]
        if (entry == end_overlap) {
   24e0e:	42a6      	cmp	r6, r4
   24e10:	d019      	beq.n	24e46 <ble_ll_sched_conn_reschedule+0x156>
        entry = start_overlap;
   24e12:	462c      	mov	r4, r5
    while (entry) {
   24e14:	b1bc      	cbz	r4, 24e46 <ble_ll_sched_conn_reschedule+0x156>
        start_overlap = TAILQ_NEXT(entry,link);
   24e16:	6965      	ldr	r5, [r4, #20]
        switch (entry->sched_type) {
   24e18:	7823      	ldrb	r3, [r4, #0]
   24e1a:	2b01      	cmp	r3, #1
   24e1c:	d00b      	beq.n	24e36 <ble_ll_sched_conn_reschedule+0x146>
   24e1e:	2b03      	cmp	r3, #3
   24e20:	d0e8      	beq.n	24df4 <ble_ll_sched_conn_reschedule+0x104>
            BLE_LL_ASSERT(0);
   24e22:	f7e3 f9cd 	bl	81c0 <hal_debugger_connected>
   24e26:	b100      	cbz	r0, 24e2a <ble_ll_sched_conn_reschedule+0x13a>
   24e28:	be01      	bkpt	0x0001
   24e2a:	2300      	movs	r3, #0
   24e2c:	461a      	mov	r2, r3
   24e2e:	4619      	mov	r1, r3
   24e30:	4618      	mov	r0, r3
   24e32:	f7e4 fdcd 	bl	99d0 <__assert_func>
            ble_ll_adv_event_rmvd_from_sched((struct ble_ll_adv_sm *)entry->cb_arg);
   24e36:	68e0      	ldr	r0, [r4, #12]
   24e38:	f7f9 f9ba 	bl	1e1b0 <ble_ll_adv_event_rmvd_from_sched>
            break;
   24e3c:	e7de      	b.n	24dfc <ble_ll_sched_conn_reschedule+0x10c>
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   24e3e:	69a2      	ldr	r2, [r4, #24]
   24e40:	4b13      	ldr	r3, [pc, #76]	; (24e90 <ble_ll_sched_conn_reschedule+0x1a0>)
   24e42:	605a      	str	r2, [r3, #4]
   24e44:	e7de      	b.n	24e04 <ble_ll_sched_conn_reschedule+0x114>
    entry = TAILQ_FIRST(&g_ble_ll_sched_q);
   24e46:	4b12      	ldr	r3, [pc, #72]	; (24e90 <ble_ll_sched_conn_reschedule+0x1a0>)
   24e48:	681c      	ldr	r4, [r3, #0]
    if (entry == sch) {
   24e4a:	42a7      	cmp	r7, r4
   24e4c:	d00a      	beq.n	24e64 <ble_ll_sched_conn_reschedule+0x174>
    OS_EXIT_CRITICAL(sr);
   24e4e:	4648      	mov	r0, r9
   24e50:	f7e6 fbb6 	bl	b5c0 <os_arch_restore_sr>
    BLE_LL_ASSERT(sch != NULL);
   24e54:	b15c      	cbz	r4, 24e6e <ble_ll_sched_conn_reschedule+0x17e>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   24e56:	6861      	ldr	r1, [r4, #4]
   24e58:	480c      	ldr	r0, [pc, #48]	; (24e8c <ble_ll_sched_conn_reschedule+0x19c>)
   24e5a:	f7f6 ff76 	bl	1bd4a <os_cputime_timer_start>
}
   24e5e:	4640      	mov	r0, r8
   24e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ble_ll_rfmgmt_sched_changed(sch);
   24e64:	4638      	mov	r0, r7
   24e66:	f7fe fd29 	bl	238bc <ble_ll_rfmgmt_sched_changed>
    sch = &connsm->conn_sch;
   24e6a:	463c      	mov	r4, r7
   24e6c:	e7ef      	b.n	24e4e <ble_ll_sched_conn_reschedule+0x15e>
    BLE_LL_ASSERT(sch != NULL);
   24e6e:	f7e3 f9a7 	bl	81c0 <hal_debugger_connected>
   24e72:	b100      	cbz	r0, 24e76 <ble_ll_sched_conn_reschedule+0x186>
   24e74:	be01      	bkpt	0x0001
   24e76:	2300      	movs	r3, #0
   24e78:	461a      	mov	r2, r3
   24e7a:	4619      	mov	r1, r3
   24e7c:	4618      	mov	r0, r3
   24e7e:	f7e4 fda7 	bl	99d0 <__assert_func>
        return -1;
   24e82:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   24e86:	e7ea      	b.n	24e5e <ble_ll_sched_conn_reschedule+0x16e>
   24e88:	20008cf0 	.word	0x20008cf0
   24e8c:	20008cfc 	.word	0x20008cfc
   24e90:	20008cf4 	.word	0x20008cf4

00024e94 <ble_ll_sched_master_new>:
{
   24e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e98:	b083      	sub	sp, #12
   24e9a:	4605      	mov	r5, r0
   24e9c:	460c      	mov	r4, r1
    sch = &connsm->conn_sch;
   24e9e:	f100 09dc 	add.w	r9, r0, #220	; 0xdc
    adv_rxend = os_cputime_get32();
   24ea2:	f7f6 ff5a 	bl	1bd5a <os_cputime_get32>
    if (ble_hdr->rxinfo.channel >= BLE_PHY_NUM_DATA_CHANS) {
   24ea6:	78a3      	ldrb	r3, [r4, #2]
   24ea8:	2b24      	cmp	r3, #36	; 0x24
   24eaa:	d915      	bls.n	24ed8 <ble_ll_sched_master_new+0x44>
        earliest_start = adv_rxend + 57;
   24eac:	f100 0839 	add.w	r8, r0, #57	; 0x39
    earliest_end = earliest_start + dur;
   24eb0:	f108 06a4 	add.w	r6, r8, #164	; 0xa4
    itvl_t = connsm->conn_itvl_ticks;
   24eb4:	f8d5 b07c 	ldr.w	fp, [r5, #124]	; 0x7c
    OS_ENTER_CRITICAL(sr);
   24eb8:	f7e6 fb7c 	bl	b5b4 <os_arch_save_sr>
   24ebc:	9001      	str	r0, [sp, #4]
    sch->start_time = earliest_start;
   24ebe:	f8c5 80e0 	str.w	r8, [r5, #224]	; 0xe0
    if (!ble_ll_sched_insert_if_empty(sch)) {
   24ec2:	4648      	mov	r0, r9
   24ec4:	f7ff fe74 	bl	24bb0 <ble_ll_sched_insert_if_empty>
   24ec8:	b308      	cbz	r0, 24f0e <ble_ll_sched_master_new+0x7a>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   24eca:	484a      	ldr	r0, [pc, #296]	; (24ff4 <ble_ll_sched_master_new+0x160>)
   24ecc:	f7f6 ff41 	bl	1bd52 <os_cputime_timer_stop>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   24ed0:	4b49      	ldr	r3, [pc, #292]	; (24ff8 <ble_ll_sched_master_new+0x164>)
   24ed2:	681c      	ldr	r4, [r3, #0]
    earliest_start += MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET) *
   24ed4:	4647      	mov	r7, r8
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   24ed6:	e050      	b.n	24f7a <ble_ll_sched_master_new+0xe6>
        if (ble_hdr->rxinfo.phy == BLE_PHY_1M) {
   24ed8:	f994 3005 	ldrsb.w	r3, [r4, #5]
   24edc:	2b01      	cmp	r3, #1
   24ede:	d006      	beq.n	24eee <ble_ll_sched_master_new+0x5a>
        } else if (ble_hdr->rxinfo.phy == BLE_PHY_2M) {
   24ee0:	2b02      	cmp	r3, #2
   24ee2:	d007      	beq.n	24ef4 <ble_ll_sched_master_new+0x60>
        } else if (ble_hdr->rxinfo.phy == BLE_PHY_CODED) {
   24ee4:	2b03      	cmp	r3, #3
   24ee6:	d108      	bne.n	24efa <ble_ll_sched_master_new+0x66>
            earliest_start = adv_rxend + 223;
   24ee8:	f100 08df 	add.w	r8, r0, #223	; 0xdf
   24eec:	e7e0      	b.n	24eb0 <ble_ll_sched_master_new+0x1c>
            earliest_start = adv_rxend + 98;
   24eee:	f100 0862 	add.w	r8, r0, #98	; 0x62
   24ef2:	e7dd      	b.n	24eb0 <ble_ll_sched_master_new+0x1c>
            earliest_start = adv_rxend + 93;
   24ef4:	f100 085d 	add.w	r8, r0, #93	; 0x5d
   24ef8:	e7da      	b.n	24eb0 <ble_ll_sched_master_new+0x1c>
            BLE_LL_ASSERT(0);
   24efa:	f7e3 f961 	bl	81c0 <hal_debugger_connected>
   24efe:	b100      	cbz	r0, 24f02 <ble_ll_sched_master_new+0x6e>
   24f00:	be01      	bkpt	0x0001
   24f02:	2300      	movs	r3, #0
   24f04:	461a      	mov	r2, r3
   24f06:	4619      	mov	r1, r3
   24f08:	4618      	mov	r0, r3
   24f0a:	f7e4 fd61 	bl	99d0 <__assert_func>
        connsm->tx_win_off = MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET);
   24f0e:	f04f 0a00 	mov.w	sl, #0
   24f12:	f8a5 a072 	strh.w	sl, [r5, #114]	; 0x72
    earliest_start += MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET) *
   24f16:	4647      	mov	r7, r8
    if (!rc) {
   24f18:	f1ba 0f00 	cmp.w	sl, #0
   24f1c:	d10b      	bne.n	24f36 <ble_ll_sched_master_new+0xa2>
        sch->start_time = earliest_start;
   24f1e:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
        sch->end_time = earliest_end;
   24f22:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
        connsm->anchor_point = earliest_start + g_ble_ll_sched_offset_ticks;
   24f26:	4b35      	ldr	r3, [pc, #212]	; (24ffc <ble_ll_sched_master_new+0x168>)
   24f28:	781b      	ldrb	r3, [r3, #0]
   24f2a:	441f      	add	r7, r3
   24f2c:	676f      	str	r7, [r5, #116]	; 0x74
        connsm->anchor_point_usecs = 0;
   24f2e:	2300      	movs	r3, #0
   24f30:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
        connsm->ce_end_time = earliest_end;
   24f34:	65ee      	str	r6, [r5, #92]	; 0x5c
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   24f36:	4b30      	ldr	r3, [pc, #192]	; (24ff8 <ble_ll_sched_master_new+0x164>)
   24f38:	681c      	ldr	r4, [r3, #0]
    ble_ll_rfmgmt_sched_changed(sch);
   24f3a:	4620      	mov	r0, r4
   24f3c:	f7fe fcbe 	bl	238bc <ble_ll_rfmgmt_sched_changed>
    OS_EXIT_CRITICAL(sr);
   24f40:	9801      	ldr	r0, [sp, #4]
   24f42:	f7e6 fb3d 	bl	b5c0 <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   24f46:	6861      	ldr	r1, [r4, #4]
   24f48:	482a      	ldr	r0, [pc, #168]	; (24ff4 <ble_ll_sched_master_new+0x160>)
   24f4a:	f7f6 fefe 	bl	1bd4a <os_cputime_timer_start>
}
   24f4e:	4650      	mov	r0, sl
   24f50:	b003      	add	sp, #12
   24f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if ((earliest_start - initial_start) <= itvl_t) {
   24f56:	eba7 0308 	sub.w	r3, r7, r8
   24f5a:	455b      	cmp	r3, fp
   24f5c:	d834      	bhi.n	24fc8 <ble_ll_sched_master_new+0x134>
                    TAILQ_INSERT_BEFORE(entry, sch, link);
   24f5e:	69a3      	ldr	r3, [r4, #24]
   24f60:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
   24f64:	462b      	mov	r3, r5
   24f66:	f843 4ff0 	str.w	r4, [r3, #240]!
   24f6a:	69a2      	ldr	r2, [r4, #24]
   24f6c:	f8c2 9000 	str.w	r9, [r2]
   24f70:	61a3      	str	r3, [r4, #24]
                    rc = 0;
   24f72:	f04f 0a00 	mov.w	sl, #0
   24f76:	e015      	b.n	24fa4 <ble_ll_sched_master_new+0x110>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   24f78:	6964      	ldr	r4, [r4, #20]
   24f7a:	b18c      	cbz	r4, 24fa0 <ble_ll_sched_master_new+0x10c>
            sch->start_time = earliest_start;
   24f7c:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
            sch->end_time = earliest_end;
   24f80:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   24f84:	6863      	ldr	r3, [r4, #4]
   24f86:	1af3      	subs	r3, r6, r3
   24f88:	2b00      	cmp	r3, #0
   24f8a:	dde4      	ble.n	24f56 <ble_ll_sched_master_new+0xc2>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   24f8c:	4621      	mov	r1, r4
   24f8e:	4648      	mov	r0, r9
   24f90:	f7ff fdf6 	bl	24b80 <ble_ll_sched_is_overlap>
   24f94:	2800      	cmp	r0, #0
   24f96:	d0ef      	beq.n	24f78 <ble_ll_sched_master_new+0xe4>
                earliest_start = entry->end_time;
   24f98:	68a7      	ldr	r7, [r4, #8]
                earliest_end = earliest_start + dur;
   24f9a:	f107 06a4 	add.w	r6, r7, #164	; 0xa4
   24f9e:	e7eb      	b.n	24f78 <ble_ll_sched_master_new+0xe4>
    rc = -1;
   24fa0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
        if (!entry) {
   24fa4:	b19c      	cbz	r4, 24fce <ble_ll_sched_master_new+0x13a>
        if (!rc) {
   24fa6:	f1ba 0f00 	cmp.w	sl, #0
   24faa:	d1b5      	bne.n	24f18 <ble_ll_sched_master_new+0x84>
            sch->enqueued = 1;
   24fac:	2301      	movs	r3, #1
   24fae:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
            dur = os_cputime_ticks_to_usecs(earliest_start - initial_start);
   24fb2:	eba7 0008 	sub.w	r0, r7, r8
   24fb6:	f7f6 feef 	bl	1bd98 <os_cputime_ticks_to_usecs>
            connsm->tx_win_off = dur / BLE_LL_CONN_TX_OFF_USECS;
   24fba:	4b11      	ldr	r3, [pc, #68]	; (25000 <ble_ll_sched_master_new+0x16c>)
   24fbc:	fba3 3000 	umull	r3, r0, r3, r0
   24fc0:	0a80      	lsrs	r0, r0, #10
   24fc2:	f8a5 0072 	strh.w	r0, [r5, #114]	; 0x72
   24fc6:	e7a7      	b.n	24f18 <ble_ll_sched_master_new+0x84>
    rc = -1;
   24fc8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   24fcc:	e7ea      	b.n	24fa4 <ble_ll_sched_master_new+0x110>
            if ((earliest_start - initial_start) <= itvl_t) {
   24fce:	eba7 0308 	sub.w	r3, r7, r8
   24fd2:	455b      	cmp	r3, fp
   24fd4:	d8e7      	bhi.n	24fa6 <ble_ll_sched_master_new+0x112>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   24fd6:	2300      	movs	r3, #0
   24fd8:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
   24fdc:	4a06      	ldr	r2, [pc, #24]	; (24ff8 <ble_ll_sched_master_new+0x164>)
   24fde:	6851      	ldr	r1, [r2, #4]
   24fe0:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
   24fe4:	f8c1 9000 	str.w	r9, [r1]
   24fe8:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   24fec:	6051      	str	r1, [r2, #4]
                rc = 0;
   24fee:	469a      	mov	sl, r3
   24ff0:	e7dc      	b.n	24fac <ble_ll_sched_master_new+0x118>
   24ff2:	bf00      	nop
   24ff4:	20008cfc 	.word	0x20008cfc
   24ff8:	20008cf4 	.word	0x20008cf4
   24ffc:	20008cf0 	.word	0x20008cf0
   25000:	d1b71759 	.word	0xd1b71759

00025004 <ble_ll_sched_slave_new>:
{
   25004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25008:	4605      	mov	r5, r0
    sch = &connsm->conn_sch;
   2500a:	f100 07dc 	add.w	r7, r0, #220	; 0xdc
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   2500e:	6f44      	ldr	r4, [r0, #116]	; 0x74
   25010:	4b39      	ldr	r3, [pc, #228]	; (250f8 <ble_ll_sched_slave_new+0xf4>)
   25012:	7818      	ldrb	r0, [r3, #0]
   25014:	1a24      	subs	r4, r4, r0
        os_cputime_usecs_to_ticks(connsm->slave_cur_window_widening) - 1;
   25016:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   2501a:	f7f6 feb5 	bl	1bd88 <os_cputime_usecs_to_ticks>
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   2501e:	1a20      	subs	r0, r4, r0
        os_cputime_usecs_to_ticks(connsm->slave_cur_window_widening) - 1;
   25020:	3801      	subs	r0, #1
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   25022:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
    sch->end_time = connsm->ce_end_time;
   25026:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   25028:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
    sch->remainder = 0;
   2502c:	2300      	movs	r3, #0
   2502e:	f885 30de 	strb.w	r3, [r5, #222]	; 0xde
    OS_ENTER_CRITICAL(sr);
   25032:	f7e6 fabf 	bl	b5b4 <os_arch_save_sr>
   25036:	4681      	mov	r9, r0
    if (ble_ll_sched_overlaps_current(sch)) {
   25038:	4638      	mov	r0, r7
   2503a:	f7ff fde9 	bl	24c10 <ble_ll_sched_overlaps_current>
   2503e:	b950      	cbnz	r0, 25056 <ble_ll_sched_slave_new+0x52>
   25040:	4680      	mov	r8, r0
    entry = ble_ll_sched_insert_if_empty(sch);
   25042:	4638      	mov	r0, r7
   25044:	f7ff fdb4 	bl	24bb0 <ble_ll_sched_insert_if_empty>
    if (!entry) {
   25048:	4604      	mov	r4, r0
   2504a:	2800      	cmp	r0, #0
   2504c:	d044      	beq.n	250d8 <ble_ll_sched_slave_new+0xd4>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   2504e:	482b      	ldr	r0, [pc, #172]	; (250fc <ble_ll_sched_slave_new+0xf8>)
   25050:	f7f6 fe7f 	bl	1bd52 <os_cputime_timer_stop>
   25054:	e01c      	b.n	25090 <ble_ll_sched_slave_new+0x8c>
        OS_EXIT_CRITICAL(sr);
   25056:	4648      	mov	r0, r9
   25058:	f7e6 fab2 	bl	b5c0 <os_arch_restore_sr>
        return rc;
   2505c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   25060:	e043      	b.n	250ea <ble_ll_sched_slave_new+0xe6>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   25062:	69a3      	ldr	r3, [r4, #24]
   25064:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
   25068:	462b      	mov	r3, r5
   2506a:	f843 4ff0 	str.w	r4, [r3, #240]!
   2506e:	69a2      	ldr	r2, [r4, #24]
   25070:	6017      	str	r7, [r2, #0]
   25072:	61a3      	str	r3, [r4, #24]
            sch->enqueued = 1;
   25074:	2301      	movs	r3, #1
   25076:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
   2507a:	4641      	mov	r1, r8
        next_sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   2507c:	4b20      	ldr	r3, [pc, #128]	; (25100 <ble_ll_sched_slave_new+0xfc>)
   2507e:	681a      	ldr	r2, [r3, #0]
        if (next_sch == sch) {
   25080:	4297      	cmp	r7, r2
   25082:	d026      	beq.n	250d2 <ble_ll_sched_slave_new+0xce>
    int first = 0;
   25084:	4643      	mov	r3, r8
            sch = next_sch;
   25086:	4617      	mov	r7, r2
   25088:	4688      	mov	r8, r1
   2508a:	e026      	b.n	250da <ble_ll_sched_slave_new+0xd6>
            entry = next_sch;
   2508c:	4634      	mov	r4, r6
            if (!entry) {
   2508e:	b1a6      	cbz	r6, 250ba <ble_ll_sched_slave_new+0xb6>
            next_sch = entry->link.tqe_next;
   25090:	6966      	ldr	r6, [r4, #20]
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   25092:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   25096:	6862      	ldr	r2, [r4, #4]
   25098:	1a9b      	subs	r3, r3, r2
   2509a:	2b00      	cmp	r3, #0
   2509c:	dde1      	ble.n	25062 <ble_ll_sched_slave_new+0x5e>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   2509e:	4621      	mov	r1, r4
   250a0:	4638      	mov	r0, r7
   250a2:	f7ff fd6d 	bl	24b80 <ble_ll_sched_is_overlap>
   250a6:	2800      	cmp	r0, #0
   250a8:	d0f0      	beq.n	2508c <ble_ll_sched_slave_new+0x88>
                if (ble_ll_sched_conn_overlap(entry)) {
   250aa:	4620      	mov	r0, r4
   250ac:	f7ff fd92 	bl	24bd4 <ble_ll_sched_conn_overlap>
   250b0:	2800      	cmp	r0, #0
   250b2:	d0eb      	beq.n	2508c <ble_ll_sched_slave_new+0x88>
    rc = -1;
   250b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   250b8:	e7e0      	b.n	2507c <ble_ll_sched_slave_new+0x78>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   250ba:	2300      	movs	r3, #0
   250bc:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
   250c0:	4b0f      	ldr	r3, [pc, #60]	; (25100 <ble_ll_sched_slave_new+0xfc>)
   250c2:	685a      	ldr	r2, [r3, #4]
   250c4:	f8c5 20f4 	str.w	r2, [r5, #244]	; 0xf4
   250c8:	6017      	str	r7, [r2, #0]
   250ca:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
   250ce:	605a      	str	r2, [r3, #4]
   250d0:	e7d0      	b.n	25074 <ble_ll_sched_slave_new+0x70>
        if (next_sch == sch) {
   250d2:	4688      	mov	r8, r1
            first = 1;
   250d4:	2301      	movs	r3, #1
   250d6:	e000      	b.n	250da <ble_ll_sched_slave_new+0xd6>
        first = 1;
   250d8:	2301      	movs	r3, #1
    if (first) {
   250da:	b94b      	cbnz	r3, 250f0 <ble_ll_sched_slave_new+0xec>
    OS_EXIT_CRITICAL(sr);
   250dc:	4648      	mov	r0, r9
   250de:	f7e6 fa6f 	bl	b5c0 <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   250e2:	6879      	ldr	r1, [r7, #4]
   250e4:	4805      	ldr	r0, [pc, #20]	; (250fc <ble_ll_sched_slave_new+0xf8>)
   250e6:	f7f6 fe30 	bl	1bd4a <os_cputime_timer_start>
}
   250ea:	4640      	mov	r0, r8
   250ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ble_ll_rfmgmt_sched_changed(sch);
   250f0:	4638      	mov	r0, r7
   250f2:	f7fe fbe3 	bl	238bc <ble_ll_rfmgmt_sched_changed>
   250f6:	e7f1      	b.n	250dc <ble_ll_sched_slave_new+0xd8>
   250f8:	20008cf0 	.word	0x20008cf0
   250fc:	20008cfc 	.word	0x20008cfc
   25100:	20008cf4 	.word	0x20008cf4

00025104 <ble_ll_sched_adv_new>:
{
   25104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25108:	4605      	mov	r5, r0
   2510a:	460f      	mov	r7, r1
   2510c:	4691      	mov	r9, r2
    duration = sch->end_time - sch->start_time;
   2510e:	6886      	ldr	r6, [r0, #8]
   25110:	6843      	ldr	r3, [r0, #4]
   25112:	1af6      	subs	r6, r6, r3
    OS_ENTER_CRITICAL(sr);
   25114:	f7e6 fa4e 	bl	b5b4 <os_arch_save_sr>
   25118:	4680      	mov	r8, r0
    entry = ble_ll_sched_insert_if_empty(sch);
   2511a:	4628      	mov	r0, r5
   2511c:	f7ff fd48 	bl	24bb0 <ble_ll_sched_insert_if_empty>
    if (!entry) {
   25120:	b128      	cbz	r0, 2512e <ble_ll_sched_adv_new+0x2a>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   25122:	4829      	ldr	r0, [pc, #164]	; (251c8 <ble_ll_sched_adv_new+0xc4>)
   25124:	f7f6 fe15 	bl	1bd52 <os_cputime_timer_stop>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   25128:	4b28      	ldr	r3, [pc, #160]	; (251cc <ble_ll_sched_adv_new+0xc8>)
   2512a:	681c      	ldr	r4, [r3, #0]
   2512c:	e022      	b.n	25174 <ble_ll_sched_adv_new+0x70>
        adv_start = sch->start_time;
   2512e:	6869      	ldr	r1, [r5, #4]
   25130:	462c      	mov	r4, r5
   25132:	e00d      	b.n	25150 <ble_ll_sched_adv_new+0x4c>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   25134:	69a3      	ldr	r3, [r4, #24]
   25136:	61ab      	str	r3, [r5, #24]
   25138:	616c      	str	r4, [r5, #20]
   2513a:	69a3      	ldr	r3, [r4, #24]
   2513c:	601d      	str	r5, [r3, #0]
   2513e:	f105 0314 	add.w	r3, r5, #20
   25142:	61a3      	str	r3, [r4, #24]
        if (!entry) {
   25144:	b344      	cbz	r4, 25198 <ble_ll_sched_adv_new+0x94>
        adv_start = sch->start_time;
   25146:	6869      	ldr	r1, [r5, #4]
        sch->enqueued = 1;
   25148:	2301      	movs	r3, #1
   2514a:	706b      	strb	r3, [r5, #1]
        sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   2514c:	4b1f      	ldr	r3, [pc, #124]	; (251cc <ble_ll_sched_adv_new+0xc8>)
   2514e:	681c      	ldr	r4, [r3, #0]
    if (cb) {
   25150:	b117      	cbz	r7, 25158 <ble_ll_sched_adv_new+0x54>
        cb((struct ble_ll_adv_sm *)orig->cb_arg, adv_start, arg);
   25152:	464a      	mov	r2, r9
   25154:	68e8      	ldr	r0, [r5, #12]
   25156:	47b8      	blx	r7
    if (orig == sch) {
   25158:	42ac      	cmp	r4, r5
   2515a:	d027      	beq.n	251ac <ble_ll_sched_adv_new+0xa8>
    OS_EXIT_CRITICAL(sr);
   2515c:	4640      	mov	r0, r8
   2515e:	f7e6 fa2f 	bl	b5c0 <os_arch_restore_sr>
    BLE_LL_ASSERT(sch != NULL);
   25162:	b33c      	cbz	r4, 251b4 <ble_ll_sched_adv_new+0xb0>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   25164:	6861      	ldr	r1, [r4, #4]
   25166:	4818      	ldr	r0, [pc, #96]	; (251c8 <ble_ll_sched_adv_new+0xc4>)
   25168:	f7f6 fdef 	bl	1bd4a <os_cputime_timer_start>
}
   2516c:	2000      	movs	r0, #0
   2516e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   25172:	6964      	ldr	r4, [r4, #20]
   25174:	2c00      	cmp	r4, #0
   25176:	d0e5      	beq.n	25144 <ble_ll_sched_adv_new+0x40>
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   25178:	68ab      	ldr	r3, [r5, #8]
   2517a:	6862      	ldr	r2, [r4, #4]
   2517c:	1a9b      	subs	r3, r3, r2
   2517e:	2b00      	cmp	r3, #0
   25180:	ddd8      	ble.n	25134 <ble_ll_sched_adv_new+0x30>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   25182:	4621      	mov	r1, r4
   25184:	4628      	mov	r0, r5
   25186:	f7ff fcfb 	bl	24b80 <ble_ll_sched_is_overlap>
   2518a:	2800      	cmp	r0, #0
   2518c:	d0f1      	beq.n	25172 <ble_ll_sched_adv_new+0x6e>
                sch->start_time = entry->end_time;
   2518e:	68a3      	ldr	r3, [r4, #8]
   25190:	606b      	str	r3, [r5, #4]
                sch->end_time = sch->start_time + duration;
   25192:	4433      	add	r3, r6
   25194:	60ab      	str	r3, [r5, #8]
   25196:	e7ec      	b.n	25172 <ble_ll_sched_adv_new+0x6e>
            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   25198:	2300      	movs	r3, #0
   2519a:	616b      	str	r3, [r5, #20]
   2519c:	4b0b      	ldr	r3, [pc, #44]	; (251cc <ble_ll_sched_adv_new+0xc8>)
   2519e:	685a      	ldr	r2, [r3, #4]
   251a0:	61aa      	str	r2, [r5, #24]
   251a2:	6015      	str	r5, [r2, #0]
   251a4:	f105 0214 	add.w	r2, r5, #20
   251a8:	605a      	str	r2, [r3, #4]
   251aa:	e7cc      	b.n	25146 <ble_ll_sched_adv_new+0x42>
        ble_ll_rfmgmt_sched_changed(sch);
   251ac:	4620      	mov	r0, r4
   251ae:	f7fe fb85 	bl	238bc <ble_ll_rfmgmt_sched_changed>
   251b2:	e7d3      	b.n	2515c <ble_ll_sched_adv_new+0x58>
    BLE_LL_ASSERT(sch != NULL);
   251b4:	f7e3 f804 	bl	81c0 <hal_debugger_connected>
   251b8:	b100      	cbz	r0, 251bc <ble_ll_sched_adv_new+0xb8>
   251ba:	be01      	bkpt	0x0001
   251bc:	2300      	movs	r3, #0
   251be:	461a      	mov	r2, r3
   251c0:	4619      	mov	r1, r3
   251c2:	4618      	mov	r0, r3
   251c4:	f7e4 fc04 	bl	99d0 <__assert_func>
   251c8:	20008cfc 	.word	0x20008cfc
   251cc:	20008cf4 	.word	0x20008cf4

000251d0 <ble_ll_sched_adv_reschedule>:
{
   251d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   251d4:	b083      	sub	sp, #12
   251d6:	4604      	mov	r4, r0
   251d8:	468b      	mov	fp, r1
   251da:	4692      	mov	sl, r2
    duration = sch->end_time - sch->start_time;
   251dc:	6883      	ldr	r3, [r0, #8]
   251de:	6842      	ldr	r2, [r0, #4]
   251e0:	eba3 0802 	sub.w	r8, r3, r2
    sch->end_time += max_delay_ticks;
   251e4:	4453      	add	r3, sl
   251e6:	6083      	str	r3, [r0, #8]
    OS_ENTER_CRITICAL(sr);
   251e8:	f7e6 f9e4 	bl	b5b4 <os_arch_save_sr>
   251ec:	9001      	str	r0, [sp, #4]
    entry = ble_ll_sched_insert_if_empty(sch);
   251ee:	4620      	mov	r0, r4
   251f0:	f7ff fcde 	bl	24bb0 <ble_ll_sched_insert_if_empty>
    if (entry) {
   251f4:	2800      	cmp	r0, #0
   251f6:	d059      	beq.n	252ac <ble_ll_sched_adv_reschedule+0xdc>
   251f8:	4606      	mov	r6, r0
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   251fa:	4850      	ldr	r0, [pc, #320]	; (2533c <ble_ll_sched_adv_reschedule+0x16c>)
   251fc:	f7f6 fda9 	bl	1bd52 <os_cputime_timer_stop>
    end_overlap = NULL;
   25200:	f04f 0900 	mov.w	r9, #0
    start_overlap = NULL;
   25204:	464d      	mov	r5, r9
   25206:	e006      	b.n	25216 <ble_ll_sched_adv_reschedule+0x46>
                if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   25208:	68a3      	ldr	r3, [r4, #8]
   2520a:	6872      	ldr	r2, [r6, #4]
   2520c:	1a9b      	subs	r3, r3, r2
   2520e:	2b00      	cmp	r3, #0
   25210:	dd0e      	ble.n	25230 <ble_ll_sched_adv_reschedule+0x60>
            entry = next_sch;
   25212:	463e      	mov	r6, r7
            if (entry == NULL) {
   25214:	b16f      	cbz	r7, 25232 <ble_ll_sched_adv_reschedule+0x62>
            next_sch = entry->link.tqe_next;
   25216:	6977      	ldr	r7, [r6, #20]
            if (ble_ll_sched_is_overlap(sch, entry)) {
   25218:	4631      	mov	r1, r6
   2521a:	4620      	mov	r0, r4
   2521c:	f7ff fcb0 	bl	24b80 <ble_ll_sched_is_overlap>
   25220:	2800      	cmp	r0, #0
   25222:	d0f1      	beq.n	25208 <ble_ll_sched_adv_reschedule+0x38>
                if (start_overlap == NULL) {
   25224:	b10d      	cbz	r5, 2522a <ble_ll_sched_adv_reschedule+0x5a>
                    end_overlap = entry;
   25226:	46b1      	mov	r9, r6
   25228:	e7f3      	b.n	25212 <ble_ll_sched_adv_reschedule+0x42>
                    end_overlap = entry;
   2522a:	46b1      	mov	r9, r6
                    start_overlap = entry;
   2522c:	4635      	mov	r5, r6
   2522e:	e7f0      	b.n	25212 <ble_ll_sched_adv_reschedule+0x42>
                    before = entry;
   25230:	4637      	mov	r7, r6
        if (start_overlap == NULL) {
   25232:	b1ed      	cbz	r5, 25270 <ble_ll_sched_adv_reschedule+0xa0>
            orig_start = sch->start_time;
   25234:	6866      	ldr	r6, [r4, #4]
            sch->end_time = sch->start_time + duration;
   25236:	eb08 0306 	add.w	r3, r8, r6
   2523a:	60a3      	str	r3, [r4, #8]
                next_sch = entry->link.tqe_next;
   2523c:	696b      	ldr	r3, [r5, #20]
                if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   2523e:	68a2      	ldr	r2, [r4, #8]
   25240:	6869      	ldr	r1, [r5, #4]
   25242:	1a50      	subs	r0, r2, r1
   25244:	2800      	cmp	r0, #0
   25246:	dd27      	ble.n	25298 <ble_ll_sched_adv_reschedule+0xc8>
                    sch->start_time = entry->end_time;
   25248:	68aa      	ldr	r2, [r5, #8]
   2524a:	6062      	str	r2, [r4, #4]
                    sch->end_time = sch->start_time + duration;
   2524c:	eb02 0108 	add.w	r1, r2, r8
   25250:	60a1      	str	r1, [r4, #8]
                if (entry == end_overlap) {
   25252:	454d      	cmp	r5, r9
   25254:	d047      	beq.n	252e6 <ble_ll_sched_adv_reschedule+0x116>
                entry = next_sch;
   25256:	461d      	mov	r5, r3
                BLE_LL_ASSERT(entry != NULL);
   25258:	2b00      	cmp	r3, #0
   2525a:	d1ef      	bne.n	2523c <ble_ll_sched_adv_reschedule+0x6c>
   2525c:	f7e2 ffb0 	bl	81c0 <hal_debugger_connected>
   25260:	b100      	cbz	r0, 25264 <ble_ll_sched_adv_reschedule+0x94>
   25262:	be01      	bkpt	0x0001
   25264:	2300      	movs	r3, #0
   25266:	461a      	mov	r2, r3
   25268:	4619      	mov	r1, r3
   2526a:	4618      	mov	r0, r3
   2526c:	f7e4 fbb0 	bl	99d0 <__assert_func>
            if (before) {
   25270:	b147      	cbz	r7, 25284 <ble_ll_sched_adv_reschedule+0xb4>
                TAILQ_INSERT_BEFORE(before, sch, link);
   25272:	69bb      	ldr	r3, [r7, #24]
   25274:	61a3      	str	r3, [r4, #24]
   25276:	6167      	str	r7, [r4, #20]
   25278:	69bb      	ldr	r3, [r7, #24]
   2527a:	601c      	str	r4, [r3, #0]
   2527c:	f104 0314 	add.w	r3, r4, #20
   25280:	61bb      	str	r3, [r7, #24]
   25282:	e013      	b.n	252ac <ble_ll_sched_adv_reschedule+0xdc>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   25284:	2300      	movs	r3, #0
   25286:	6163      	str	r3, [r4, #20]
   25288:	4b2d      	ldr	r3, [pc, #180]	; (25340 <ble_ll_sched_adv_reschedule+0x170>)
   2528a:	685a      	ldr	r2, [r3, #4]
   2528c:	61a2      	str	r2, [r4, #24]
   2528e:	6014      	str	r4, [r2, #0]
   25290:	f104 0214 	add.w	r2, r4, #20
   25294:	605a      	str	r2, [r3, #4]
   25296:	e009      	b.n	252ac <ble_ll_sched_adv_reschedule+0xdc>
                    rand_ticks = entry->start_time - sch->end_time;
   25298:	eba1 0a02 	sub.w	sl, r1, r2
                    TAILQ_INSERT_BEFORE(before, sch, link);
   2529c:	69ab      	ldr	r3, [r5, #24]
   2529e:	61a3      	str	r3, [r4, #24]
   252a0:	6165      	str	r5, [r4, #20]
   252a2:	69ab      	ldr	r3, [r5, #24]
   252a4:	601c      	str	r4, [r3, #0]
   252a6:	f104 0314 	add.w	r3, r4, #20
   252aa:	61ab      	str	r3, [r5, #24]
        sch->enqueued = 1;
   252ac:	2301      	movs	r3, #1
   252ae:	7063      	strb	r3, [r4, #1]
        if (rand_ticks) {
   252b0:	f1ba 0f00 	cmp.w	sl, #0
   252b4:	d130      	bne.n	25318 <ble_ll_sched_adv_reschedule+0x148>
        sch->end_time = sch->start_time + duration;
   252b6:	6862      	ldr	r2, [r4, #4]
   252b8:	eb02 0308 	add.w	r3, r2, r8
   252bc:	60a3      	str	r3, [r4, #8]
        *start = sch->start_time;
   252be:	f8cb 2000 	str.w	r2, [fp]
        if (sch == TAILQ_FIRST(&g_ble_ll_sched_q)) {
   252c2:	4b1f      	ldr	r3, [pc, #124]	; (25340 <ble_ll_sched_adv_reschedule+0x170>)
   252c4:	681b      	ldr	r3, [r3, #0]
   252c6:	42a3      	cmp	r3, r4
   252c8:	d030      	beq.n	2532c <ble_ll_sched_adv_reschedule+0x15c>
   252ca:	2400      	movs	r4, #0
    OS_EXIT_CRITICAL(sr);
   252cc:	9801      	ldr	r0, [sp, #4]
   252ce:	f7e6 f977 	bl	b5c0 <os_arch_restore_sr>
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   252d2:	4b1b      	ldr	r3, [pc, #108]	; (25340 <ble_ll_sched_adv_reschedule+0x170>)
   252d4:	681b      	ldr	r3, [r3, #0]
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   252d6:	6859      	ldr	r1, [r3, #4]
   252d8:	4818      	ldr	r0, [pc, #96]	; (2533c <ble_ll_sched_adv_reschedule+0x16c>)
   252da:	f7f6 fd36 	bl	1bd4a <os_cputime_timer_start>
}
   252de:	4620      	mov	r0, r4
   252e0:	b003      	add	sp, #12
   252e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   252e6:	4456      	add	r6, sl
   252e8:	1ab2      	subs	r2, r6, r2
                    if (rand_ticks > max_delay_ticks) {
   252ea:	4592      	cmp	sl, r2
   252ec:	d323      	bcc.n	25336 <ble_ll_sched_adv_reschedule+0x166>
                        if (next_sch == NULL) {
   252ee:	b14b      	cbz	r3, 25304 <ble_ll_sched_adv_reschedule+0x134>
                            TAILQ_INSERT_BEFORE(next_sch, sch, link);
   252f0:	6999      	ldr	r1, [r3, #24]
   252f2:	61a1      	str	r1, [r4, #24]
   252f4:	6163      	str	r3, [r4, #20]
   252f6:	6999      	ldr	r1, [r3, #24]
   252f8:	600c      	str	r4, [r1, #0]
   252fa:	f104 0114 	add.w	r1, r4, #20
   252fe:	6199      	str	r1, [r3, #24]
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   25300:	4692      	mov	sl, r2
   25302:	e7d3      	b.n	252ac <ble_ll_sched_adv_reschedule+0xdc>
                            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   25304:	6163      	str	r3, [r4, #20]
   25306:	4b0e      	ldr	r3, [pc, #56]	; (25340 <ble_ll_sched_adv_reschedule+0x170>)
   25308:	6859      	ldr	r1, [r3, #4]
   2530a:	61a1      	str	r1, [r4, #24]
   2530c:	600c      	str	r4, [r1, #0]
   2530e:	f104 0114 	add.w	r1, r4, #20
   25312:	6059      	str	r1, [r3, #4]
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   25314:	4692      	mov	sl, r2
   25316:	e7c9      	b.n	252ac <ble_ll_sched_adv_reschedule+0xdc>
   25318:	f7e6 fa8e 	bl	b838 <lrand48>
            sch->start_time += rand() % rand_ticks;
   2531c:	fbb0 f3fa 	udiv	r3, r0, sl
   25320:	fb0a 0a13 	mls	sl, sl, r3, r0
   25324:	6863      	ldr	r3, [r4, #4]
   25326:	4453      	add	r3, sl
   25328:	6063      	str	r3, [r4, #4]
   2532a:	e7c4      	b.n	252b6 <ble_ll_sched_adv_reschedule+0xe6>
            ble_ll_rfmgmt_sched_changed(sch);
   2532c:	4620      	mov	r0, r4
   2532e:	f7fe fac5 	bl	238bc <ble_ll_rfmgmt_sched_changed>
   25332:	2400      	movs	r4, #0
   25334:	e7ca      	b.n	252cc <ble_ll_sched_adv_reschedule+0xfc>
                        rc = -1;
   25336:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2533a:	e7c7      	b.n	252cc <ble_ll_sched_adv_reschedule+0xfc>
   2533c:	20008cfc 	.word	0x20008cfc
   25340:	20008cf4 	.word	0x20008cf4

00025344 <ble_ll_sched_adv_resched_pdu>:
{
   25344:	b570      	push	{r4, r5, r6, lr}
   25346:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   25348:	f7e6 f934 	bl	b5b4 <os_arch_save_sr>
   2534c:	4606      	mov	r6, r0
    lls = ble_ll_state_get();
   2534e:	f7f7 ff97 	bl	1d280 <ble_ll_state_get>
    if ((lls == BLE_LL_STATE_ADV) || (lls == BLE_LL_STATE_CONNECTION) ||
   25352:	2801      	cmp	r0, #1
   25354:	d027      	beq.n	253a6 <ble_ll_sched_adv_resched_pdu+0x62>
   25356:	2804      	cmp	r0, #4
   25358:	d025      	beq.n	253a6 <ble_ll_sched_adv_resched_pdu+0x62>
   2535a:	2806      	cmp	r0, #6
   2535c:	d023      	beq.n	253a6 <ble_ll_sched_adv_resched_pdu+0x62>
    entry = ble_ll_sched_insert_if_empty(sch);
   2535e:	4620      	mov	r0, r4
   25360:	f7ff fc26 	bl	24bb0 <ble_ll_sched_insert_if_empty>
    if (entry) {
   25364:	4605      	mov	r5, r0
   25366:	b188      	cbz	r0, 2538c <ble_ll_sched_adv_resched_pdu+0x48>
        if (ble_ll_sched_is_overlap(sch, entry)) {
   25368:	4601      	mov	r1, r0
   2536a:	4620      	mov	r0, r4
   2536c:	f7ff fc08 	bl	24b80 <ble_ll_sched_is_overlap>
   25370:	b9c8      	cbnz	r0, 253a6 <ble_ll_sched_adv_resched_pdu+0x62>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   25372:	4810      	ldr	r0, [pc, #64]	; (253b4 <ble_ll_sched_adv_resched_pdu+0x70>)
   25374:	f7f6 fced 	bl	1bd52 <os_cputime_timer_stop>
        TAILQ_INSERT_BEFORE(entry, sch, link);
   25378:	69ab      	ldr	r3, [r5, #24]
   2537a:	61a3      	str	r3, [r4, #24]
   2537c:	6165      	str	r5, [r4, #20]
   2537e:	69ab      	ldr	r3, [r5, #24]
   25380:	601c      	str	r4, [r3, #0]
   25382:	f104 0314 	add.w	r3, r4, #20
   25386:	61ab      	str	r3, [r5, #24]
        sch->enqueued = 1;
   25388:	2301      	movs	r3, #1
   2538a:	7063      	strb	r3, [r4, #1]
    ble_ll_rfmgmt_sched_changed(TAILQ_FIRST(&g_ble_ll_sched_q));
   2538c:	4b0a      	ldr	r3, [pc, #40]	; (253b8 <ble_ll_sched_adv_resched_pdu+0x74>)
   2538e:	6818      	ldr	r0, [r3, #0]
   25390:	f7fe fa94 	bl	238bc <ble_ll_rfmgmt_sched_changed>
    OS_EXIT_CRITICAL(sr);
   25394:	4630      	mov	r0, r6
   25396:	f7e6 f913 	bl	b5c0 <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   2539a:	6861      	ldr	r1, [r4, #4]
   2539c:	4805      	ldr	r0, [pc, #20]	; (253b4 <ble_ll_sched_adv_resched_pdu+0x70>)
   2539e:	f7f6 fcd4 	bl	1bd4a <os_cputime_timer_start>
    return 0;
   253a2:	2000      	movs	r0, #0
}
   253a4:	bd70      	pop	{r4, r5, r6, pc}
    OS_EXIT_CRITICAL(sr);
   253a6:	4630      	mov	r0, r6
   253a8:	f7e6 f90a 	bl	b5c0 <os_arch_restore_sr>
    return -1;
   253ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   253b0:	e7f8      	b.n	253a4 <ble_ll_sched_adv_resched_pdu+0x60>
   253b2:	bf00      	nop
   253b4:	20008cfc 	.word	0x20008cfc
   253b8:	20008cf4 	.word	0x20008cf4

000253bc <ble_ll_sched_rmv_elem>:
{
   253bc:	b570      	push	{r4, r5, r6, lr}
    if (!sch) {
   253be:	2800      	cmp	r0, #0
   253c0:	d030      	beq.n	25424 <ble_ll_sched_rmv_elem+0x68>
   253c2:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   253c4:	f7e6 f8f6 	bl	b5b4 <os_arch_save_sr>
   253c8:	4605      	mov	r5, r0
    if (sch->enqueued) {
   253ca:	7863      	ldrb	r3, [r4, #1]
   253cc:	b323      	cbz	r3, 25418 <ble_ll_sched_rmv_elem+0x5c>
        first = TAILQ_FIRST(&g_ble_ll_sched_q);
   253ce:	4b16      	ldr	r3, [pc, #88]	; (25428 <ble_ll_sched_rmv_elem+0x6c>)
   253d0:	681e      	ldr	r6, [r3, #0]
        if (first == sch) {
   253d2:	42b4      	cmp	r4, r6
   253d4:	d00c      	beq.n	253f0 <ble_ll_sched_rmv_elem+0x34>
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   253d6:	6963      	ldr	r3, [r4, #20]
   253d8:	b173      	cbz	r3, 253f8 <ble_ll_sched_rmv_elem+0x3c>
   253da:	69a2      	ldr	r2, [r4, #24]
   253dc:	619a      	str	r2, [r3, #24]
   253de:	69a3      	ldr	r3, [r4, #24]
   253e0:	6962      	ldr	r2, [r4, #20]
   253e2:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   253e4:	2300      	movs	r3, #0
   253e6:	7063      	strb	r3, [r4, #1]
        if (first == sch) {
   253e8:	42b4      	cmp	r4, r6
   253ea:	d009      	beq.n	25400 <ble_ll_sched_rmv_elem+0x44>
        rc = 0;
   253ec:	2400      	movs	r4, #0
   253ee:	e014      	b.n	2541a <ble_ll_sched_rmv_elem+0x5e>
            os_cputime_timer_stop(&g_ble_ll_sched_timer);
   253f0:	480e      	ldr	r0, [pc, #56]	; (2542c <ble_ll_sched_rmv_elem+0x70>)
   253f2:	f7f6 fcae 	bl	1bd52 <os_cputime_timer_stop>
   253f6:	e7ee      	b.n	253d6 <ble_ll_sched_rmv_elem+0x1a>
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   253f8:	69a2      	ldr	r2, [r4, #24]
   253fa:	4b0b      	ldr	r3, [pc, #44]	; (25428 <ble_ll_sched_rmv_elem+0x6c>)
   253fc:	605a      	str	r2, [r3, #4]
   253fe:	e7ee      	b.n	253de <ble_ll_sched_rmv_elem+0x22>
            first = TAILQ_FIRST(&g_ble_ll_sched_q);
   25400:	4b09      	ldr	r3, [pc, #36]	; (25428 <ble_ll_sched_rmv_elem+0x6c>)
   25402:	681c      	ldr	r4, [r3, #0]
            if (first) {
   25404:	b11c      	cbz	r4, 2540e <ble_ll_sched_rmv_elem+0x52>
                os_cputime_timer_start(&g_ble_ll_sched_timer, first->start_time);
   25406:	6861      	ldr	r1, [r4, #4]
   25408:	4808      	ldr	r0, [pc, #32]	; (2542c <ble_ll_sched_rmv_elem+0x70>)
   2540a:	f7f6 fc9e 	bl	1bd4a <os_cputime_timer_start>
            ble_ll_rfmgmt_sched_changed(first);
   2540e:	4620      	mov	r0, r4
   25410:	f7fe fa54 	bl	238bc <ble_ll_rfmgmt_sched_changed>
        rc = 0;
   25414:	2400      	movs	r4, #0
   25416:	e000      	b.n	2541a <ble_ll_sched_rmv_elem+0x5e>
    int rc = 1;
   25418:	2401      	movs	r4, #1
    OS_EXIT_CRITICAL(sr);
   2541a:	4628      	mov	r0, r5
   2541c:	f7e6 f8d0 	bl	b5c0 <os_arch_restore_sr>
}
   25420:	4620      	mov	r0, r4
   25422:	bd70      	pop	{r4, r5, r6, pc}
        return rc;
   25424:	2401      	movs	r4, #1
   25426:	e7fb      	b.n	25420 <ble_ll_sched_rmv_elem+0x64>
   25428:	20008cf4 	.word	0x20008cf4
   2542c:	20008cfc 	.word	0x20008cfc

00025430 <ble_ll_sched_next_time>:
 *
 * @return int 0: No events are scheduled 1: there is an upcoming event
 */
int
ble_ll_sched_next_time(uint32_t *next_event_time)
{
   25430:	b510      	push	{r4, lr}
   25432:	4604      	mov	r4, r0
    int rc;
    os_sr_t sr;
    struct ble_ll_sched_item *first;

    rc = 0;
    OS_ENTER_CRITICAL(sr);
   25434:	f7e6 f8be 	bl	b5b4 <os_arch_save_sr>
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   25438:	4b05      	ldr	r3, [pc, #20]	; (25450 <ble_ll_sched_next_time+0x20>)
   2543a:	681b      	ldr	r3, [r3, #0]
    if (first) {
   2543c:	b133      	cbz	r3, 2544c <ble_ll_sched_next_time+0x1c>
        *next_event_time = first->start_time;
   2543e:	685b      	ldr	r3, [r3, #4]
   25440:	6023      	str	r3, [r4, #0]
        rc = 1;
   25442:	2401      	movs	r4, #1
    }
    OS_EXIT_CRITICAL(sr);
   25444:	f7e6 f8bc 	bl	b5c0 <os_arch_restore_sr>

    return rc;
}
   25448:	4620      	mov	r0, r4
   2544a:	bd10      	pop	{r4, pc}
    rc = 0;
   2544c:	2400      	movs	r4, #0
   2544e:	e7f9      	b.n	25444 <ble_ll_sched_next_time+0x14>
   25450:	20008cf4 	.word	0x20008cf4

00025454 <ble_ll_sched_stop>:
 *
 * Context: Link Layer task
 */
void
ble_ll_sched_stop(void)
{
   25454:	b508      	push	{r3, lr}
    os_cputime_timer_stop(&g_ble_ll_sched_timer);
   25456:	4802      	ldr	r0, [pc, #8]	; (25460 <ble_ll_sched_stop+0xc>)
   25458:	f7f6 fc7b 	bl	1bd52 <os_cputime_timer_stop>
}
   2545c:	bd08      	pop	{r3, pc}
   2545e:	bf00      	nop
   25460:	20008cfc 	.word	0x20008cfc

00025464 <ble_ll_sched_init>:
 *
 * @return int
 */
int
ble_ll_sched_init(void)
{
   25464:	b508      	push	{r3, lr}
    /*
     * This is the offset from the start of the scheduled item until the actual
     * tx/rx should occur, in ticks. We also "round up" to the nearest tick.
     */
    g_ble_ll_sched_offset_ticks =
        (uint8_t) os_cputime_usecs_to_ticks(XCVR_TX_SCHED_DELAY_USECS + 30);
   25466:	20df      	movs	r0, #223	; 0xdf
   25468:	f7f6 fc8e 	bl	1bd88 <os_cputime_usecs_to_ticks>
    g_ble_ll_sched_offset_ticks =
   2546c:	4b04      	ldr	r3, [pc, #16]	; (25480 <ble_ll_sched_init+0x1c>)
   2546e:	7018      	strb	r0, [r3, #0]

    /* Initialize cputimer for the scheduler */
    os_cputime_timer_init(&g_ble_ll_sched_timer, ble_ll_sched_run, NULL);
   25470:	2200      	movs	r2, #0
   25472:	4904      	ldr	r1, [pc, #16]	; (25484 <ble_ll_sched_init+0x20>)
   25474:	4804      	ldr	r0, [pc, #16]	; (25488 <ble_ll_sched_init+0x24>)
   25476:	f7f6 fc4a 	bl	1bd0e <os_cputime_timer_init>
    g_ble_ll_sched_data.sch_ticks_per_epoch = BLE_LL_SCHED_PERIODS *
        g_ble_ll_sched_data.sch_ticks_per_period;
#endif

    return 0;
}
   2547a:	2000      	movs	r0, #0
   2547c:	bd08      	pop	{r3, pc}
   2547e:	bf00      	nop
   25480:	20008cf0 	.word	0x20008cf0
   25484:	00024ca9 	.word	0x00024ca9
   25488:	20008cfc 	.word	0x20008cfc

0002548c <ble_ll_utils_calc_access_addr>:
    500, 250, 150, 100, 75, 50, 30, 20
};

uint32_t
ble_ll_utils_calc_access_addr(void)
{
   2548c:	b570      	push	{r4, r5, r6, lr}
   2548e:	f7e6 f9d3 	bl	b838 <lrand48>

    /* Calculate a random access address */
    aa = 0;
    while (1) {
        /* Get two, 16-bit random numbers */
        aa_low = rand() & 0xFFFF;
   25492:	b286      	uxth	r6, r0
   25494:	f7e6 f9d0 	bl	b838 <lrand48>
        aa_high = rand() & 0xFFFF;
   25498:	b283      	uxth	r3, r0

        /* All four bytes cannot be equal */
        if (aa_low == aa_high) {
   2549a:	429e      	cmp	r6, r3
   2549c:	d0f7      	beq.n	2548e <ble_ll_utils_calc_access_addr+0x2>
   2549e:	4605      	mov	r5, r0
            continue;
        }

        /* Upper 6 bits must have 2 transitions */
        tmp = (int16_t)aa_high >> 10;
   254a0:	f340 2085 	sbfx	r0, r0, #10, #6
        if (__builtin_popcount(tmp ^ (tmp >> 1)) < 2) {
   254a4:	ea80 0060 	eor.w	r0, r0, r0, asr #1
   254a8:	f7f6 ff2a 	bl	1c300 <__popcountsi2>
   254ac:	2801      	cmp	r0, #1
   254ae:	ddee      	ble.n	2548e <ble_ll_utils_calc_access_addr+0x2>
            continue;
        }

        /* Cannot be access address or be 1 bit different */
        aa = aa_high;
        aa = (aa << 16) | aa_low;
   254b0:	ea46 4005 	orr.w	r0, r6, r5, lsl #16
        bits_diff = 0;
        temp = aa ^ BLE_ACCESS_ADDR_ADV;
   254b4:	4921      	ldr	r1, [pc, #132]	; (2553c <ble_ll_utils_calc_access_addr+0xb0>)
   254b6:	4041      	eors	r1, r0
        bits_diff = 0;
   254b8:	2200      	movs	r2, #0
        for (mask = 0x00000001; mask != 0; mask <<= 1) {
   254ba:	2301      	movs	r3, #1
   254bc:	e000      	b.n	254c0 <ble_ll_utils_calc_access_addr+0x34>
   254be:	005b      	lsls	r3, r3, #1
   254c0:	b12b      	cbz	r3, 254ce <ble_ll_utils_calc_access_addr+0x42>
            if (mask & temp) {
   254c2:	420b      	tst	r3, r1
   254c4:	d0fb      	beq.n	254be <ble_ll_utils_calc_access_addr+0x32>
                ++bits_diff;
   254c6:	3201      	adds	r2, #1
   254c8:	b2d2      	uxtb	r2, r2
                if (bits_diff > 1) {
   254ca:	2a01      	cmp	r2, #1
   254cc:	d9f7      	bls.n	254be <ble_ll_utils_calc_access_addr+0x32>
                    break;
                }
            }
        }
        if (bits_diff <= 1) {
   254ce:	2a01      	cmp	r2, #1
   254d0:	d9dd      	bls.n	2548e <ble_ll_utils_calc_access_addr+0x2>
        }

        /* Cannot have more than 24 transitions */
        transitions = 0;
        consecutive = 1;
        ones = 0;
   254d2:	2400      	movs	r4, #0
        transitions = 0;
   254d4:	4625      	mov	r5, r4
        consecutive = 1;
   254d6:	2201      	movs	r2, #1
        mask = 0x00000001;
   254d8:	4613      	mov	r3, r2
   254da:	e00c      	b.n	254f6 <ble_ll_utils_calc_access_addr+0x6a>
            if (mask & aa) {
                if (prev_bit == 0) {
                    ++transitions;
                    consecutive = 1;
                } else {
                    ++consecutive;
   254dc:	3201      	adds	r2, #1
   254de:	b2d2      	uxtb	r2, r2
                    ++transitions;
                    consecutive = 1;
                }
            }

            if (prev_bit) {
   254e0:	b109      	cbz	r1, 254e6 <ble_ll_utils_calc_access_addr+0x5a>
                ones++;
   254e2:	3401      	adds	r4, #1
   254e4:	b2e4      	uxtb	r4, r4
            }

            /* 8 lsb should have at least three 1 */
            if (mask == 0x00000100 && ones < 3) {
   254e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   254ea:	d019      	beq.n	25520 <ble_ll_utils_calc_access_addr+0x94>
                break;
            }

            /* 16 lsb should have no more than 11 transitions */
            if (mask == 0x00010000 && transitions > 11) {
   254ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   254f0:	d019      	beq.n	25526 <ble_ll_utils_calc_access_addr+0x9a>
                break;
            }

            /* This is invalid! */
            if (consecutive > 6) {
   254f2:	2a06      	cmp	r2, #6
   254f4:	d81a      	bhi.n	2552c <ble_ll_utils_calc_access_addr+0xa0>
        while (mask < 0x80000000) {
   254f6:	2b00      	cmp	r3, #0
   254f8:	db19      	blt.n	2552e <ble_ll_utils_calc_access_addr+0xa2>
            prev_bit = aa & mask;
   254fa:	ea03 0100 	and.w	r1, r3, r0
            mask <<= 1;
   254fe:	005b      	lsls	r3, r3, #1
            if (mask & aa) {
   25500:	4218      	tst	r0, r3
   25502:	d005      	beq.n	25510 <ble_ll_utils_calc_access_addr+0x84>
                if (prev_bit == 0) {
   25504:	2900      	cmp	r1, #0
   25506:	d1e9      	bne.n	254dc <ble_ll_utils_calc_access_addr+0x50>
                    ++transitions;
   25508:	3501      	adds	r5, #1
   2550a:	b2ed      	uxtb	r5, r5
                    consecutive = 1;
   2550c:	2201      	movs	r2, #1
   2550e:	e7e7      	b.n	254e0 <ble_ll_utils_calc_access_addr+0x54>
                if (prev_bit == 0) {
   25510:	b911      	cbnz	r1, 25518 <ble_ll_utils_calc_access_addr+0x8c>
                    ++consecutive;
   25512:	3201      	adds	r2, #1
   25514:	b2d2      	uxtb	r2, r2
   25516:	e7e3      	b.n	254e0 <ble_ll_utils_calc_access_addr+0x54>
                    ++transitions;
   25518:	3501      	adds	r5, #1
   2551a:	b2ed      	uxtb	r5, r5
                    consecutive = 1;
   2551c:	2201      	movs	r2, #1
   2551e:	e7df      	b.n	254e0 <ble_ll_utils_calc_access_addr+0x54>
            if (mask == 0x00000100 && ones < 3) {
   25520:	2c02      	cmp	r4, #2
   25522:	d8e3      	bhi.n	254ec <ble_ll_utils_calc_access_addr+0x60>
   25524:	e003      	b.n	2552e <ble_ll_utils_calc_access_addr+0xa2>
            if (mask == 0x00010000 && transitions > 11) {
   25526:	2d0b      	cmp	r5, #11
   25528:	d9e3      	bls.n	254f2 <ble_ll_utils_calc_access_addr+0x66>
   2552a:	e000      	b.n	2552e <ble_ll_utils_calc_access_addr+0xa2>
                /* Make sure we always detect invalid sequence below */
                mask = 0;
   2552c:	2300      	movs	r3, #0
                break;
            }
        }

        /* Invalid sequence found */
        if (mask != 0x80000000) {
   2552e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   25532:	d1ac      	bne.n	2548e <ble_ll_utils_calc_access_addr+0x2>
            continue;
        }

        /* Cannot be more than 24 transitions */
        if (transitions > 24) {
   25534:	2d18      	cmp	r5, #24
   25536:	d8aa      	bhi.n	2548e <ble_ll_utils_calc_access_addr+0x2>

        /* We have a valid access address */
        break;
    }
    return aa;
}
   25538:	bd70      	pop	{r4, r5, r6, pc}
   2553a:	bf00      	nop
   2553c:	8e89bed6 	.word	0x8e89bed6

00025540 <ble_ll_utils_remapped_channel>:

uint8_t
ble_ll_utils_remapped_channel(uint8_t remap_index, const uint8_t *chanmap)
{
   25540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     * we just calculate
     * Iterate through channel map to find this channel
     */
    chan = 0;
    cntr = 0;
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   25542:	2500      	movs	r5, #0
    chan = 0;
   25544:	462e      	mov	r6, r5
    cntr = 0;
   25546:	462c      	mov	r4, r5
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   25548:	e00e      	b.n	25568 <ble_ll_utils_remapped_channel+0x28>
                    if (cntr == remap_index) {
                        return (chan + j);
                    }
                    ++cntr;
                }
                mask <<= 1;
   2554a:	005b      	lsls	r3, r3, #1
   2554c:	b2db      	uxtb	r3, r3
            for (j = 0; j < 8; j++) {
   2554e:	3201      	adds	r2, #1
   25550:	2a07      	cmp	r2, #7
   25552:	dc06      	bgt.n	25562 <ble_ll_utils_remapped_channel+0x22>
                if (usable_chans & mask) {
   25554:	423b      	tst	r3, r7
   25556:	d0f8      	beq.n	2554a <ble_ll_utils_remapped_channel+0xa>
                    if (cntr == remap_index) {
   25558:	4284      	cmp	r4, r0
   2555a:	d017      	beq.n	2558c <ble_ll_utils_remapped_channel+0x4c>
                    ++cntr;
   2555c:	3401      	adds	r4, #1
   2555e:	b2e4      	uxtb	r4, r4
   25560:	e7f3      	b.n	2554a <ble_ll_utils_remapped_channel+0xa>
            }
        }
        chan += 8;
   25562:	3608      	adds	r6, #8
   25564:	b2f6      	uxtb	r6, r6
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   25566:	3501      	adds	r5, #1
   25568:	2d04      	cmp	r5, #4
   2556a:	dc05      	bgt.n	25578 <ble_ll_utils_remapped_channel+0x38>
        usable_chans = chanmap[i];
   2556c:	5d4f      	ldrb	r7, [r1, r5]
        if (usable_chans != 0) {
   2556e:	2f00      	cmp	r7, #0
   25570:	d0f7      	beq.n	25562 <ble_ll_utils_remapped_channel+0x22>
            for (j = 0; j < 8; j++) {
   25572:	2200      	movs	r2, #0
            mask = 0x01;
   25574:	2301      	movs	r3, #1
   25576:	e7eb      	b.n	25550 <ble_ll_utils_remapped_channel+0x10>
    }

    /* we should never reach here */
    BLE_LL_ASSERT(0);
   25578:	f7e2 fe22 	bl	81c0 <hal_debugger_connected>
   2557c:	b100      	cbz	r0, 25580 <ble_ll_utils_remapped_channel+0x40>
   2557e:	be01      	bkpt	0x0001
   25580:	2300      	movs	r3, #0
   25582:	461a      	mov	r2, r3
   25584:	4619      	mov	r1, r3
   25586:	4618      	mov	r0, r3
   25588:	f7e4 fa22 	bl	99d0 <__assert_func>
                        return (chan + j);
   2558c:	4432      	add	r2, r6
   2558e:	b2d0      	uxtb	r0, r2
    return 0;
}
   25590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025592 <ble_ll_utils_calc_num_used_chans>:

uint8_t
ble_ll_utils_calc_num_used_chans(const uint8_t *chmap)
{
   25592:	b430      	push	{r4, r5}
    int j;
    uint8_t mask;
    uint8_t chanbyte;
    uint8_t used_channels;

    used_channels = 0;
   25594:	2100      	movs	r1, #0
    for (i = 0; i < BLE_LL_CHMAP_LEN; ++i) {
   25596:	460d      	mov	r5, r1
   25598:	e00d      	b.n	255b6 <ble_ll_utils_calc_num_used_chans+0x24>
                mask = 0x01;
                for (j = 0; j < 8; ++j) {
                    if (chanbyte & mask) {
                        ++used_channels;
                    }
                    mask <<= 1;
   2559a:	005b      	lsls	r3, r3, #1
   2559c:	b2db      	uxtb	r3, r3
                for (j = 0; j < 8; ++j) {
   2559e:	3201      	adds	r2, #1
   255a0:	2a07      	cmp	r2, #7
   255a2:	dc07      	bgt.n	255b4 <ble_ll_utils_calc_num_used_chans+0x22>
                    if (chanbyte & mask) {
   255a4:	4223      	tst	r3, r4
   255a6:	d0f8      	beq.n	2559a <ble_ll_utils_calc_num_used_chans+0x8>
                        ++used_channels;
   255a8:	3101      	adds	r1, #1
   255aa:	b2c9      	uxtb	r1, r1
   255ac:	e7f5      	b.n	2559a <ble_ll_utils_calc_num_used_chans+0x8>
                mask = 0x01;
   255ae:	2301      	movs	r3, #1
                for (j = 0; j < 8; ++j) {
   255b0:	2200      	movs	r2, #0
   255b2:	e7f5      	b.n	255a0 <ble_ll_utils_calc_num_used_chans+0xe>
    for (i = 0; i < BLE_LL_CHMAP_LEN; ++i) {
   255b4:	3501      	adds	r5, #1
   255b6:	2d04      	cmp	r5, #4
   255b8:	dc07      	bgt.n	255ca <ble_ll_utils_calc_num_used_chans+0x38>
        chanbyte = chmap[i];
   255ba:	5d44      	ldrb	r4, [r0, r5]
        if (chanbyte) {
   255bc:	2c00      	cmp	r4, #0
   255be:	d0f9      	beq.n	255b4 <ble_ll_utils_calc_num_used_chans+0x22>
            if (chanbyte == 0xff) {
   255c0:	2cff      	cmp	r4, #255	; 0xff
   255c2:	d1f4      	bne.n	255ae <ble_ll_utils_calc_num_used_chans+0x1c>
                used_channels += 8;
   255c4:	3108      	adds	r1, #8
   255c6:	b2c9      	uxtb	r1, r1
   255c8:	e7f4      	b.n	255b4 <ble_ll_utils_calc_num_used_chans+0x22>
                }
            }
        }
    }
    return used_channels;
}
   255ca:	4608      	mov	r0, r1
   255cc:	bc30      	pop	{r4, r5}
   255ce:	4770      	bx	lr

000255d0 <ble_ll_utils_calc_window_widening>:
    int32_t time_since_last_anchor;
    uint32_t delta_msec;

    window_widening = 0;

    time_since_last_anchor = (int32_t)(anchor_point - last_anchor_point);
   255d0:	1a40      	subs	r0, r0, r1
    if (time_since_last_anchor > 0) {
   255d2:	2800      	cmp	r0, #0
   255d4:	dd11      	ble.n	255fa <ble_ll_utils_calc_window_widening+0x2a>
{
   255d6:	b510      	push	{r4, lr}
   255d8:	4614      	mov	r4, r2
        delta_msec = os_cputime_ticks_to_usecs(time_since_last_anchor) / 1000;
   255da:	f7f6 fbdd 	bl	1bd98 <os_cputime_ticks_to_usecs>
   255de:	4a08      	ldr	r2, [pc, #32]	; (25600 <ble_ll_utils_calc_window_widening+0x30>)
   255e0:	fba2 3000 	umull	r3, r0, r2, r0
   255e4:	0983      	lsrs	r3, r0, #6
        total_sca_ppm = g_ble_sca_ppm_tbl[master_sca] + MYNEWT_VAL(BLE_LL_SCA);
   255e6:	4907      	ldr	r1, [pc, #28]	; (25604 <ble_ll_utils_calc_window_widening+0x34>)
   255e8:	f831 0014 	ldrh.w	r0, [r1, r4, lsl #1]
   255ec:	3005      	adds	r0, #5
        window_widening = (total_sca_ppm * delta_msec) / 1000;
   255ee:	fb00 f003 	mul.w	r0, r0, r3
   255f2:	fba2 3000 	umull	r3, r0, r2, r0
   255f6:	0980      	lsrs	r0, r0, #6
    }

    return window_widening;
}
   255f8:	bd10      	pop	{r4, pc}
    window_widening = 0;
   255fa:	2000      	movs	r0, #0
}
   255fc:	4770      	bx	lr
   255fe:	bf00      	nop
   25600:	10624dd3 	.word	0x10624dd3
   25604:	00029884 	.word	0x00029884

00025608 <ble_ll_whitelist_chg_allowed>:

struct ble_ll_whitelist_entry g_ble_ll_whitelist[BLE_LL_WHITELIST_SIZE];

static int
ble_ll_whitelist_chg_allowed(void)
{
   25608:	b508      	push	{r3, lr}
     *  -> scanning uses the whitelist and is enabled.
     *  -> initiating uses whitelist and a LE create connection command is in
     *     progress
     */
    rc = 1;
    if (!ble_ll_adv_can_chg_whitelist() || !ble_ll_scan_can_chg_whitelist()) {
   2560a:	f7f8 ff17 	bl	1e43c <ble_ll_adv_can_chg_whitelist>
   2560e:	4603      	mov	r3, r0
   25610:	b908      	cbnz	r0, 25616 <ble_ll_whitelist_chg_allowed+0xe>
        rc = 0;
    }
    return rc;
}
   25612:	4618      	mov	r0, r3
   25614:	bd08      	pop	{r3, pc}
    if (!ble_ll_adv_can_chg_whitelist() || !ble_ll_scan_can_chg_whitelist()) {
   25616:	f7ff fa09 	bl	24a2c <ble_ll_scan_can_chg_whitelist>
   2561a:	4603      	mov	r3, r0
   2561c:	2800      	cmp	r0, #0
   2561e:	d0f8      	beq.n	25612 <ble_ll_whitelist_chg_allowed+0xa>
    rc = 1;
   25620:	2301      	movs	r3, #1
    return rc;
   25622:	e7f6      	b.n	25612 <ble_ll_whitelist_chg_allowed+0xa>

00025624 <ble_ll_whitelist_search>:
 * is the 'position' of the device in the whitelist (the index of the element
 * plus 1).
 */
static int
ble_ll_whitelist_search(const uint8_t *addr, uint8_t addr_type)
{
   25624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25626:	4607      	mov	r7, r0
   25628:	460e      	mov	r6, r1
    int i;
    struct ble_ll_whitelist_entry *wl;

    wl = &g_ble_ll_whitelist[0];
   2562a:	4c0c      	ldr	r4, [pc, #48]	; (2565c <ble_ll_whitelist_search+0x38>)
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   2562c:	2500      	movs	r5, #0
   2562e:	e001      	b.n	25634 <ble_ll_whitelist_search+0x10>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
            (!memcmp(&wl->wl_dev_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return i + 1;
        }
        ++wl;
   25630:	3408      	adds	r4, #8
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   25632:	3501      	adds	r5, #1
   25634:	2d07      	cmp	r5, #7
   25636:	dc0e      	bgt.n	25656 <ble_ll_whitelist_search+0x32>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
   25638:	7823      	ldrb	r3, [r4, #0]
   2563a:	2b00      	cmp	r3, #0
   2563c:	d0f8      	beq.n	25630 <ble_ll_whitelist_search+0xc>
   2563e:	7863      	ldrb	r3, [r4, #1]
   25640:	42b3      	cmp	r3, r6
   25642:	d1f5      	bne.n	25630 <ble_ll_whitelist_search+0xc>
            (!memcmp(&wl->wl_dev_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   25644:	2206      	movs	r2, #6
   25646:	4639      	mov	r1, r7
   25648:	1ca0      	adds	r0, r4, #2
   2564a:	f7e6 f8fd 	bl	b848 <memcmp>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
   2564e:	2800      	cmp	r0, #0
   25650:	d1ee      	bne.n	25630 <ble_ll_whitelist_search+0xc>
            return i + 1;
   25652:	1c68      	adds	r0, r5, #1
   25654:	e000      	b.n	25658 <ble_ll_whitelist_search+0x34>
    }

    return 0;
   25656:	2000      	movs	r0, #0
}
   25658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2565a:	bf00      	nop
   2565c:	20008d14 	.word	0x20008d14

00025660 <ble_ll_whitelist_clear>:
{
   25660:	b508      	push	{r3, lr}
    if (!ble_ll_whitelist_chg_allowed()) {
   25662:	f7ff ffd1 	bl	25608 <ble_ll_whitelist_chg_allowed>
   25666:	b160      	cbz	r0, 25682 <ble_ll_whitelist_clear+0x22>
    wl = &g_ble_ll_whitelist[0];
   25668:	4a07      	ldr	r2, [pc, #28]	; (25688 <ble_ll_whitelist_clear+0x28>)
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   2566a:	2300      	movs	r3, #0
   2566c:	e003      	b.n	25676 <ble_ll_whitelist_clear+0x16>
        wl->wl_valid = 0;
   2566e:	2100      	movs	r1, #0
   25670:	f802 1b08 	strb.w	r1, [r2], #8
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   25674:	3301      	adds	r3, #1
   25676:	2b07      	cmp	r3, #7
   25678:	ddf9      	ble.n	2566e <ble_ll_whitelist_clear+0xe>
    ble_hw_whitelist_clear();
   2567a:	f000 f8c1 	bl	25800 <ble_hw_whitelist_clear>
    return BLE_ERR_SUCCESS;
   2567e:	2000      	movs	r0, #0
}
   25680:	bd08      	pop	{r3, pc}
        return BLE_ERR_CMD_DISALLOWED;
   25682:	200c      	movs	r0, #12
   25684:	e7fc      	b.n	25680 <ble_ll_whitelist_clear+0x20>
   25686:	bf00      	nop
   25688:	20008d14 	.word	0x20008d14

0002568c <ble_ll_whitelist_read_size>:
    rsp->size = BLE_LL_WHITELIST_SIZE;
   2568c:	2308      	movs	r3, #8
   2568e:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   25690:	2301      	movs	r3, #1
   25692:	700b      	strb	r3, [r1, #0]
}
   25694:	2000      	movs	r0, #0
   25696:	4770      	bx	lr

00025698 <ble_ll_whitelist_match>:
 *
 * @return int
 */
int
ble_ll_whitelist_match(uint8_t *addr, uint8_t addr_type, int is_ident)
{
   25698:	b508      	push	{r3, lr}
    /*
     * XXX: This should be changed. This is HW specific: some HW may be able
     * to both resolve a private address and perform a whitelist check. The
     * current BLE hw cannot support this.
     */
    if (is_ident) {
   2569a:	b112      	cbz	r2, 256a2 <ble_ll_whitelist_match+0xa>
        rc = ble_ll_whitelist_search(addr, addr_type);
   2569c:	f7ff ffc2 	bl	25624 <ble_ll_whitelist_search>
    }
#else
    rc = ble_ll_whitelist_search(addr, addr_type);
#endif
    return rc;
}
   256a0:	bd08      	pop	{r3, pc}
        rc = ble_hw_whitelist_match();
   256a2:	f000 f945 	bl	25930 <ble_hw_whitelist_match>
    return rc;
   256a6:	e7fb      	b.n	256a0 <ble_ll_whitelist_match+0x8>

000256a8 <ble_ll_whitelist_add>:
    const struct ble_hci_le_add_whte_list_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_whitelist_entry *wl;
    int rc;
    int i;

    if (len != sizeof(*cmd)) {
   256a8:	2907      	cmp	r1, #7
   256aa:	d001      	beq.n	256b0 <ble_ll_whitelist_add+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   256ac:	2012      	movs	r0, #18
#endif
        }
    }

    return rc;
}
   256ae:	4770      	bx	lr
{
   256b0:	b538      	push	{r3, r4, r5, lr}
   256b2:	4604      	mov	r4, r0
    if (!ble_ll_whitelist_chg_allowed()) {
   256b4:	f7ff ffa8 	bl	25608 <ble_ll_whitelist_chg_allowed>
   256b8:	b300      	cbz	r0, 256fc <ble_ll_whitelist_add+0x54>
    if (!ble_ll_whitelist_search(cmd->addr, cmd->addr_type)) {
   256ba:	1c65      	adds	r5, r4, #1
   256bc:	7821      	ldrb	r1, [r4, #0]
   256be:	4628      	mov	r0, r5
   256c0:	f7ff ffb0 	bl	25624 <ble_ll_whitelist_search>
   256c4:	4603      	mov	r3, r0
   256c6:	b938      	cbnz	r0, 256d8 <ble_ll_whitelist_add+0x30>
        wl = &g_ble_ll_whitelist[0];
   256c8:	4a0e      	ldr	r2, [pc, #56]	; (25704 <ble_ll_whitelist_add+0x5c>)
        for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   256ca:	2b07      	cmp	r3, #7
   256cc:	dc0f      	bgt.n	256ee <ble_ll_whitelist_add+0x46>
            if (wl->wl_valid == 0) {
   256ce:	7811      	ldrb	r1, [r2, #0]
   256d0:	b121      	cbz	r1, 256dc <ble_ll_whitelist_add+0x34>
            ++wl;
   256d2:	3208      	adds	r2, #8
        for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   256d4:	3301      	adds	r3, #1
   256d6:	e7f8      	b.n	256ca <ble_ll_whitelist_add+0x22>
    rc = BLE_ERR_SUCCESS;
   256d8:	2000      	movs	r0, #0
}
   256da:	bd38      	pop	{r3, r4, r5, pc}
                memcpy(&wl->wl_dev_addr[0], cmd->addr, BLE_DEV_ADDR_LEN);
   256dc:	6829      	ldr	r1, [r5, #0]
   256de:	f8c2 1002 	str.w	r1, [r2, #2]
   256e2:	88a9      	ldrh	r1, [r5, #4]
   256e4:	80d1      	strh	r1, [r2, #6]
                wl->wl_addr_type = cmd->addr_type;
   256e6:	7821      	ldrb	r1, [r4, #0]
   256e8:	7051      	strb	r1, [r2, #1]
                wl->wl_valid = 1;
   256ea:	2101      	movs	r1, #1
   256ec:	7011      	strb	r1, [r2, #0]
        if (i == BLE_LL_WHITELIST_SIZE) {
   256ee:	2b08      	cmp	r3, #8
   256f0:	d006      	beq.n	25700 <ble_ll_whitelist_add+0x58>
            rc = ble_hw_whitelist_add(cmd->addr, cmd->addr_type);
   256f2:	7821      	ldrb	r1, [r4, #0]
   256f4:	4628      	mov	r0, r5
   256f6:	f000 f88f 	bl	25818 <ble_hw_whitelist_add>
   256fa:	e7ee      	b.n	256da <ble_ll_whitelist_add+0x32>
        return BLE_ERR_CMD_DISALLOWED;
   256fc:	200c      	movs	r0, #12
   256fe:	e7ec      	b.n	256da <ble_ll_whitelist_add+0x32>
            rc = BLE_ERR_MEM_CAPACITY;
   25700:	2007      	movs	r0, #7
   25702:	e7ea      	b.n	256da <ble_ll_whitelist_add+0x32>
   25704:	20008d14 	.word	0x20008d14

00025708 <ble_ll_whitelist_rmv>:
ble_ll_whitelist_rmv(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rmv_white_list_cp *cmd = (const void *) cmdbuf;
    int position;

    if (len != sizeof(*cmd)) {
   25708:	2907      	cmp	r1, #7
   2570a:	d001      	beq.n	25710 <ble_ll_whitelist_rmv+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2570c:	2012      	movs	r0, #18
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_rmv(cmd->addr, cmd->addr_type);
#endif

    return BLE_ERR_SUCCESS;
}
   2570e:	4770      	bx	lr
{
   25710:	b538      	push	{r3, r4, r5, lr}
   25712:	4604      	mov	r4, r0
    if (!ble_ll_whitelist_chg_allowed()) {
   25714:	f7ff ff78 	bl	25608 <ble_ll_whitelist_chg_allowed>
   25718:	b180      	cbz	r0, 2573c <ble_ll_whitelist_rmv+0x34>
    position = ble_ll_whitelist_search(cmd->addr, cmd->addr_type);
   2571a:	1c65      	adds	r5, r4, #1
   2571c:	7821      	ldrb	r1, [r4, #0]
   2571e:	4628      	mov	r0, r5
   25720:	f7ff ff80 	bl	25624 <ble_ll_whitelist_search>
    if (position) {
   25724:	b120      	cbz	r0, 25730 <ble_ll_whitelist_rmv+0x28>
        g_ble_ll_whitelist[position - 1].wl_valid = 0;
   25726:	1e43      	subs	r3, r0, #1
   25728:	4a05      	ldr	r2, [pc, #20]	; (25740 <ble_ll_whitelist_rmv+0x38>)
   2572a:	2100      	movs	r1, #0
   2572c:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    ble_hw_whitelist_rmv(cmd->addr, cmd->addr_type);
   25730:	7821      	ldrb	r1, [r4, #0]
   25732:	4628      	mov	r0, r5
   25734:	f000 f8a4 	bl	25880 <ble_hw_whitelist_rmv>
    return BLE_ERR_SUCCESS;
   25738:	2000      	movs	r0, #0
}
   2573a:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   2573c:	200c      	movs	r0, #12
   2573e:	e7fc      	b.n	2573a <ble_ll_whitelist_rmv+0x32>
   25740:	20008d14 	.word	0x20008d14

00025744 <ble_ll_whitelist_enable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_enable(void)
{
   25744:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_enable();
   25746:	f000 f8db 	bl	25900 <ble_hw_whitelist_enable>
#endif
}
   2574a:	bd08      	pop	{r3, pc}

0002574c <ble_ll_whitelist_disable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_disable(void)
{
   2574c:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_disable();
   2574e:	f000 f8e5 	bl	2591c <ble_hw_whitelist_disable>
#endif
}
   25752:	bd08      	pop	{r3, pc}

00025754 <ble_rng_isr>:
/**
 * Random number generator ISR.
 */
static void
ble_rng_isr(void)
{
   25754:	b508      	push	{r3, lr}
    uint8_t rnum;

    os_trace_isr_enter();

    /* No callback? Clear and disable interrupts */
    if (g_ble_rng_isr_cb == NULL) {
   25756:	4b0d      	ldr	r3, [pc, #52]	; (2578c <ble_rng_isr+0x38>)
   25758:	681b      	ldr	r3, [r3, #0]
   2575a:	b163      	cbz	r3, 25776 <ble_rng_isr+0x22>
        os_trace_isr_exit();
        return;
    }

    /* If there is a value ready grab it */
    if (NRF_RNG->EVENTS_VALRDY) {
   2575c:	4a0c      	ldr	r2, [pc, #48]	; (25790 <ble_rng_isr+0x3c>)
   2575e:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   25762:	b13a      	cbz	r2, 25774 <ble_rng_isr+0x20>
        NRF_RNG->EVENTS_VALRDY = 0;
   25764:	4a0a      	ldr	r2, [pc, #40]	; (25790 <ble_rng_isr+0x3c>)
   25766:	2100      	movs	r1, #0
   25768:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        rnum = (uint8_t)NRF_RNG->VALUE;
   2576c:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
        (*g_ble_rng_isr_cb)(rnum);
   25770:	b2c0      	uxtb	r0, r0
   25772:	4798      	blx	r3
    }

    os_trace_isr_exit();
}
   25774:	bd08      	pop	{r3, pc}
        NRF_RNG->INTENCLR = 1;
   25776:	4b06      	ldr	r3, [pc, #24]	; (25790 <ble_rng_isr+0x3c>)
   25778:	2201      	movs	r2, #1
   2577a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        NRF_RNG->EVENTS_VALRDY = 0;
   2577e:	2200      	movs	r2, #0
   25780:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        (void)NRF_RNG->SHORTS;
   25784:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   25788:	e7f4      	b.n	25774 <ble_rng_isr+0x20>
   2578a:	bf00      	nop
   2578c:	20008d58 	.word	0x20008d58
   25790:	4000d000 	.word	0x4000d000

00025794 <ble_hw_get_public_addr>:
    if ((NRF_FICR->DEVICEADDRTYPE & 1) != 0) {
   25794:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   25798:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   2579c:	f013 0f01 	tst.w	r3, #1
   257a0:	d10d      	bne.n	257be <ble_hw_get_public_addr+0x2a>
    addr_low = NRF_FICR->DEVICEADDR[0];
   257a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   257a6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    addr_high = NRF_FICR->DEVICEADDR[1];
   257aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    memcpy(addr->val, &addr_low, 4);
   257ae:	f8c0 2001 	str.w	r2, [r0, #1]
    memcpy(&addr->val[4], &addr_high, 2);
   257b2:	f8a0 3005 	strh.w	r3, [r0, #5]
    addr->type = BLE_ADDR_PUBLIC;
   257b6:	2300      	movs	r3, #0
   257b8:	7003      	strb	r3, [r0, #0]
    return 0;
   257ba:	4618      	mov	r0, r3
   257bc:	4770      	bx	lr
        return -1;
   257be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   257c2:	4770      	bx	lr

000257c4 <ble_hw_get_static_addr>:
    if ((NRF_FICR->DEVICEADDRTYPE & 1) == 1) {
   257c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   257c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   257cc:	f013 0f01 	tst.w	r3, #1
   257d0:	d00f      	beq.n	257f2 <ble_hw_get_static_addr+0x2e>
        memcpy(addr->val, (void *)&NRF_FICR->DEVICEADDR[0], 4);
   257d2:	4b09      	ldr	r3, [pc, #36]	; (257f8 <ble_hw_get_static_addr+0x34>)
   257d4:	681b      	ldr	r3, [r3, #0]
   257d6:	f8c0 3001 	str.w	r3, [r0, #1]
        memcpy(&addr->val[4], (void *)&NRF_FICR->DEVICEADDR[1], 2);
   257da:	4b08      	ldr	r3, [pc, #32]	; (257fc <ble_hw_get_static_addr+0x38>)
   257dc:	881b      	ldrh	r3, [r3, #0]
   257de:	f8a0 3005 	strh.w	r3, [r0, #5]
        addr->val[5] |= 0xc0;
   257e2:	7983      	ldrb	r3, [r0, #6]
   257e4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   257e8:	7183      	strb	r3, [r0, #6]
        addr->type = BLE_ADDR_RANDOM;
   257ea:	2301      	movs	r3, #1
   257ec:	7003      	strb	r3, [r0, #0]
        rc = 0;
   257ee:	2000      	movs	r0, #0
   257f0:	4770      	bx	lr
        rc = -1;
   257f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   257f6:	4770      	bx	lr
   257f8:	100000a4 	.word	0x100000a4
   257fc:	100000a8 	.word	0x100000a8

00025800 <ble_hw_whitelist_clear>:
    NRF_RADIO->DACNF = 0;
   25800:	2300      	movs	r3, #0
   25802:	4a03      	ldr	r2, [pc, #12]	; (25810 <ble_hw_whitelist_clear+0x10>)
   25804:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    g_ble_hw_whitelist_mask = 0;
   25808:	4a02      	ldr	r2, [pc, #8]	; (25814 <ble_hw_whitelist_clear+0x14>)
   2580a:	7013      	strb	r3, [r2, #0]
}
   2580c:	4770      	bx	lr
   2580e:	bf00      	nop
   25810:	40001000 	.word	0x40001000
   25814:	20008d54 	.word	0x20008d54

00025818 <ble_hw_whitelist_add>:
{
   25818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mask = 0x01;
   2581c:	2501      	movs	r5, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   2581e:	2400      	movs	r4, #0
   25820:	2c07      	cmp	r4, #7
   25822:	dc26      	bgt.n	25872 <ble_hw_whitelist_add+0x5a>
        if ((mask & g_ble_hw_whitelist_mask) == 0) {
   25824:	4b14      	ldr	r3, [pc, #80]	; (25878 <ble_hw_whitelist_add+0x60>)
   25826:	781b      	ldrb	r3, [r3, #0]
   25828:	422b      	tst	r3, r5
   2582a:	d002      	beq.n	25832 <ble_hw_whitelist_add+0x1a>
        mask <<= 1;
   2582c:	006d      	lsls	r5, r5, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   2582e:	3401      	adds	r4, #1
   25830:	e7f6      	b.n	25820 <ble_hw_whitelist_add+0x8>
   25832:	460f      	mov	r7, r1
   25834:	4606      	mov	r6, r0
            NRF_RADIO->DAB[i] = get_le32(addr);
   25836:	f7f6 f9ff 	bl	1bc38 <get_le32>
   2583a:	f8df 8040 	ldr.w	r8, [pc, #64]	; 2587c <ble_hw_whitelist_add+0x64>
   2583e:	f504 73c0 	add.w	r3, r4, #384	; 0x180
   25842:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
            NRF_RADIO->DAP[i] = get_le16(addr + 4);
   25846:	1d30      	adds	r0, r6, #4
   25848:	f7f6 f9f1 	bl	1bc2e <get_le16>
   2584c:	f504 74c4 	add.w	r4, r4, #392	; 0x188
   25850:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
            if (addr_type == BLE_ADDR_RANDOM) {
   25854:	2f01      	cmp	r7, #1
   25856:	d005      	beq.n	25864 <ble_hw_whitelist_add+0x4c>
            g_ble_hw_whitelist_mask |= mask;
   25858:	4a07      	ldr	r2, [pc, #28]	; (25878 <ble_hw_whitelist_add+0x60>)
   2585a:	7813      	ldrb	r3, [r2, #0]
   2585c:	431d      	orrs	r5, r3
   2585e:	7015      	strb	r5, [r2, #0]
            return BLE_ERR_SUCCESS;
   25860:	2000      	movs	r0, #0
   25862:	e007      	b.n	25874 <ble_hw_whitelist_add+0x5c>
                NRF_RADIO->DACNF |= (mask << 8);
   25864:	f8d8 3640 	ldr.w	r3, [r8, #1600]	; 0x640
   25868:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   2586c:	f8c8 3640 	str.w	r3, [r8, #1600]	; 0x640
   25870:	e7f2      	b.n	25858 <ble_hw_whitelist_add+0x40>
    return BLE_ERR_MEM_CAPACITY;
   25872:	2007      	movs	r0, #7
}
   25874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   25878:	20008d54 	.word	0x20008d54
   2587c:	40001000 	.word	0x40001000

00025880 <ble_hw_whitelist_rmv>:
{
   25880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25882:	4606      	mov	r6, r0
   25884:	460d      	mov	r5, r1
    dab = get_le32(addr);
   25886:	f7f6 f9d7 	bl	1bc38 <get_le32>
   2588a:	4604      	mov	r4, r0
    dap = get_le16(addr + 4);
   2588c:	1d30      	adds	r0, r6, #4
   2588e:	f7f6 f9ce 	bl	1bc2e <get_le16>
    txadd = NRF_RADIO->DACNF >> 8;
   25892:	4b19      	ldr	r3, [pc, #100]	; (258f8 <ble_hw_whitelist_rmv+0x78>)
   25894:	f8d3 7640 	ldr.w	r7, [r3, #1600]	; 0x640
   25898:	0a3f      	lsrs	r7, r7, #8
    mask = 0x01;
   2589a:	2201      	movs	r2, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   2589c:	2300      	movs	r3, #0
   2589e:	e002      	b.n	258a6 <ble_hw_whitelist_rmv+0x26>
                    if (cfg_addr != 0) {
   258a0:	b9d1      	cbnz	r1, 258d8 <ble_hw_whitelist_rmv+0x58>
        mask <<= 1;
   258a2:	0052      	lsls	r2, r2, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   258a4:	3301      	adds	r3, #1
   258a6:	2b07      	cmp	r3, #7
   258a8:	dc16      	bgt.n	258d8 <ble_hw_whitelist_rmv+0x58>
        if (mask & g_ble_hw_whitelist_mask) {
   258aa:	4914      	ldr	r1, [pc, #80]	; (258fc <ble_hw_whitelist_rmv+0x7c>)
   258ac:	7809      	ldrb	r1, [r1, #0]
   258ae:	4211      	tst	r1, r2
   258b0:	d0f7      	beq.n	258a2 <ble_hw_whitelist_rmv+0x22>
            if ((dab == NRF_RADIO->DAB[i]) && (dap == NRF_RADIO->DAP[i])) {
   258b2:	f503 71c0 	add.w	r1, r3, #384	; 0x180
   258b6:	4e10      	ldr	r6, [pc, #64]	; (258f8 <ble_hw_whitelist_rmv+0x78>)
   258b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   258bc:	42a1      	cmp	r1, r4
   258be:	d1f0      	bne.n	258a2 <ble_hw_whitelist_rmv+0x22>
   258c0:	f503 71c4 	add.w	r1, r3, #392	; 0x188
   258c4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   258c8:	4288      	cmp	r0, r1
   258ca:	d1ea      	bne.n	258a2 <ble_hw_whitelist_rmv+0x22>
                cfg_addr = txadd & mask;
   258cc:	b2d1      	uxtb	r1, r2
   258ce:	4039      	ands	r1, r7
                if (addr_type == BLE_ADDR_RANDOM) {
   258d0:	2d01      	cmp	r5, #1
   258d2:	d0e5      	beq.n	258a0 <ble_hw_whitelist_rmv+0x20>
                    if (cfg_addr == 0) {
   258d4:	2900      	cmp	r1, #0
   258d6:	d1e4      	bne.n	258a2 <ble_hw_whitelist_rmv+0x22>
    if (i < BLE_HW_WHITE_LIST_SIZE) {
   258d8:	2b07      	cmp	r3, #7
   258da:	dc0b      	bgt.n	258f4 <ble_hw_whitelist_rmv+0x74>
        g_ble_hw_whitelist_mask &= ~mask;
   258dc:	4907      	ldr	r1, [pc, #28]	; (258fc <ble_hw_whitelist_rmv+0x7c>)
   258de:	780b      	ldrb	r3, [r1, #0]
   258e0:	ea23 0302 	bic.w	r3, r3, r2
   258e4:	700b      	strb	r3, [r1, #0]
        NRF_RADIO->DACNF &= ~mask;
   258e6:	4904      	ldr	r1, [pc, #16]	; (258f8 <ble_hw_whitelist_rmv+0x78>)
   258e8:	f8d1 3640 	ldr.w	r3, [r1, #1600]	; 0x640
   258ec:	ea23 0202 	bic.w	r2, r3, r2
   258f0:	f8c1 2640 	str.w	r2, [r1, #1600]	; 0x640
}
   258f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   258f6:	bf00      	nop
   258f8:	40001000 	.word	0x40001000
   258fc:	20008d54 	.word	0x20008d54

00025900 <ble_hw_whitelist_enable>:
    NRF_RADIO->DACNF |= g_ble_hw_whitelist_mask;
   25900:	4a04      	ldr	r2, [pc, #16]	; (25914 <ble_hw_whitelist_enable+0x14>)
   25902:	f8d2 1640 	ldr.w	r1, [r2, #1600]	; 0x640
   25906:	4b04      	ldr	r3, [pc, #16]	; (25918 <ble_hw_whitelist_enable+0x18>)
   25908:	781b      	ldrb	r3, [r3, #0]
   2590a:	430b      	orrs	r3, r1
   2590c:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   25910:	4770      	bx	lr
   25912:	bf00      	nop
   25914:	40001000 	.word	0x40001000
   25918:	20008d54 	.word	0x20008d54

0002591c <ble_hw_whitelist_disable>:
    NRF_RADIO->DACNF &= 0x0000ff00;
   2591c:	4a03      	ldr	r2, [pc, #12]	; (2592c <ble_hw_whitelist_disable+0x10>)
   2591e:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   25922:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   25926:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   2592a:	4770      	bx	lr
   2592c:	40001000 	.word	0x40001000

00025930 <ble_hw_whitelist_match>:
    return (int)NRF_RADIO->EVENTS_DEVMATCH;
   25930:	4b01      	ldr	r3, [pc, #4]	; (25938 <ble_hw_whitelist_match+0x8>)
   25932:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   25936:	4770      	bx	lr
   25938:	40001000 	.word	0x40001000

0002593c <ble_hw_encrypt_block>:
    NRF_ECB->TASKS_STOPECB = 1;
   2593c:	4b0c      	ldr	r3, [pc, #48]	; (25970 <ble_hw_encrypt_block+0x34>)
   2593e:	2201      	movs	r2, #1
   25940:	605a      	str	r2, [r3, #4]
    NRF_ECB->EVENTS_ENDECB = 0;
   25942:	2100      	movs	r1, #0
   25944:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    NRF_ECB->EVENTS_ERRORECB = 0;
   25948:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   2594c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    NRF_ECB->TASKS_STARTECB = 1;
   25950:	601a      	str	r2, [r3, #0]
        end = NRF_ECB->EVENTS_ENDECB;
   25952:	4b07      	ldr	r3, [pc, #28]	; (25970 <ble_hw_encrypt_block+0x34>)
   25954:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
        err = NRF_ECB->EVENTS_ERRORECB;
   25958:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        if (end || err) {
   2595c:	b90a      	cbnz	r2, 25962 <ble_hw_encrypt_block+0x26>
   2595e:	2b00      	cmp	r3, #0
   25960:	d0f7      	beq.n	25952 <ble_hw_encrypt_block+0x16>
            if (err) {
   25962:	b90b      	cbnz	r3, 25968 <ble_hw_encrypt_block+0x2c>
    rc = 0;
   25964:	2000      	movs	r0, #0
   25966:	4770      	bx	lr
                rc = -1;
   25968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   2596c:	4770      	bx	lr
   2596e:	bf00      	nop
   25970:	4000e000 	.word	0x4000e000

00025974 <ble_hw_rng_init>:
 */
int
ble_hw_rng_init(ble_rng_isr_cb_t cb, int bias)
{
    /* Set bias */
    if (bias) {
   25974:	b199      	cbz	r1, 2599e <ble_hw_rng_init+0x2a>
        NRF_RNG->CONFIG = 1;
   25976:	4b0c      	ldr	r3, [pc, #48]	; (259a8 <ble_hw_rng_init+0x34>)
   25978:	2201      	movs	r2, #1
   2597a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    } else {
        NRF_RNG->CONFIG = 0;
    }

    /* If we were passed a function pointer we need to enable the interrupt */
    if (cb != NULL) {
   2597e:	b160      	cbz	r0, 2599a <ble_hw_rng_init+0x26>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25980:	4b0a      	ldr	r3, [pc, #40]	; (259ac <ble_hw_rng_init+0x38>)
   25982:	22e0      	movs	r2, #224	; 0xe0
   25984:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  uint32_t vectors = (uint32_t )SCB->VTOR;
   25988:	4a09      	ldr	r2, [pc, #36]	; (259b0 <ble_hw_rng_init+0x3c>)
   2598a:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2598c:	4909      	ldr	r1, [pc, #36]	; (259b4 <ble_hw_rng_init+0x40>)
   2598e:	6751      	str	r1, [r2, #116]	; 0x74
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25990:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   25994:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(RNG_IRQn, (uint32_t)ble_rng_isr);
#else
        ble_npl_hw_set_isr(RNG_IRQn, ble_rng_isr);
#endif
        NVIC_EnableIRQ(RNG_IRQn);
        g_ble_rng_isr_cb = cb;
   25996:	4b08      	ldr	r3, [pc, #32]	; (259b8 <ble_hw_rng_init+0x44>)
   25998:	6018      	str	r0, [r3, #0]
    }

    return 0;
}
   2599a:	2000      	movs	r0, #0
   2599c:	4770      	bx	lr
        NRF_RNG->CONFIG = 0;
   2599e:	4b02      	ldr	r3, [pc, #8]	; (259a8 <ble_hw_rng_init+0x34>)
   259a0:	2200      	movs	r2, #0
   259a2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   259a6:	e7ea      	b.n	2597e <ble_hw_rng_init+0xa>
   259a8:	4000d000 	.word	0x4000d000
   259ac:	e000e100 	.word	0xe000e100
   259b0:	e000ed00 	.word	0xe000ed00
   259b4:	00025755 	.word	0x00025755
   259b8:	20008d58 	.word	0x20008d58

000259bc <ble_hw_rng_start>:
 *
 * @return int
 */
int
ble_hw_rng_start(void)
{
   259bc:	b508      	push	{r3, lr}
    os_sr_t sr;

    /* No need for interrupt if there is no callback */
    OS_ENTER_CRITICAL(sr);
   259be:	f7e5 fdf9 	bl	b5b4 <os_arch_save_sr>
    NRF_RNG->EVENTS_VALRDY = 0;
   259c2:	4b09      	ldr	r3, [pc, #36]	; (259e8 <ble_hw_rng_start+0x2c>)
   259c4:	2200      	movs	r2, #0
   259c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (g_ble_rng_isr_cb) {
   259ca:	4b08      	ldr	r3, [pc, #32]	; (259ec <ble_hw_rng_start+0x30>)
   259cc:	681b      	ldr	r3, [r3, #0]
   259ce:	b11b      	cbz	r3, 259d8 <ble_hw_rng_start+0x1c>
        NRF_RNG->INTENSET = 1;
   259d0:	4b05      	ldr	r3, [pc, #20]	; (259e8 <ble_hw_rng_start+0x2c>)
   259d2:	2201      	movs	r2, #1
   259d4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    }
    NRF_RNG->TASKS_START = 1;
   259d8:	4b03      	ldr	r3, [pc, #12]	; (259e8 <ble_hw_rng_start+0x2c>)
   259da:	2201      	movs	r2, #1
   259dc:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   259de:	f7e5 fdef 	bl	b5c0 <os_arch_restore_sr>

    return 0;
}
   259e2:	2000      	movs	r0, #0
   259e4:	bd08      	pop	{r3, pc}
   259e6:	bf00      	nop
   259e8:	4000d000 	.word	0x4000d000
   259ec:	20008d58 	.word	0x20008d58

000259f0 <ble_hw_rng_stop>:
 *
 * @return int
 */
int
ble_hw_rng_stop(void)
{
   259f0:	b510      	push	{r4, lr}
    os_sr_t sr;

    /* No need for interrupt if there is no callback */
    OS_ENTER_CRITICAL(sr);
   259f2:	f7e5 fddf 	bl	b5b4 <os_arch_save_sr>
    NRF_RNG->INTENCLR = 1;
   259f6:	4b06      	ldr	r3, [pc, #24]	; (25a10 <ble_hw_rng_stop+0x20>)
   259f8:	2201      	movs	r2, #1
   259fa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RNG->TASKS_STOP = 1;
   259fe:	605a      	str	r2, [r3, #4]
    NRF_RNG->EVENTS_VALRDY = 0;
   25a00:	2400      	movs	r4, #0
   25a02:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    OS_EXIT_CRITICAL(sr);
   25a06:	f7e5 fddb 	bl	b5c0 <os_arch_restore_sr>

    return 0;
}
   25a0a:	4620      	mov	r0, r4
   25a0c:	bd10      	pop	{r4, pc}
   25a0e:	bf00      	nop
   25a10:	4000d000 	.word	0x4000d000

00025a14 <ble_hw_resolv_list_clear>:
 * @return int
 */
void
ble_hw_resolv_list_clear(void)
{
    g_nrf_num_irks = 0;
   25a14:	4b01      	ldr	r3, [pc, #4]	; (25a1c <ble_hw_resolv_list_clear+0x8>)
   25a16:	2200      	movs	r2, #0
   25a18:	701a      	strb	r2, [r3, #0]
}
   25a1a:	4770      	bx	lr
   25a1c:	20008d9c 	.word	0x20008d9c

00025a20 <ble_hw_resolv_list_add>:
ble_hw_resolv_list_add(uint8_t *irk)
{
    uint32_t *nrf_entry;

    /* Find first ununsed device address match element */
    if (g_nrf_num_irks == NRF_IRK_LIST_ENTRIES) {
   25a20:	4b0b      	ldr	r3, [pc, #44]	; (25a50 <ble_hw_resolv_list_add+0x30>)
   25a22:	781b      	ldrb	r3, [r3, #0]
   25a24:	2b04      	cmp	r3, #4
   25a26:	d011      	beq.n	25a4c <ble_hw_resolv_list_add+0x2c>
{
   25a28:	b4f0      	push	{r4, r5, r6, r7}
        return BLE_ERR_MEM_CAPACITY;
    }

    /* Copy into irk list */
    nrf_entry = &g_nrf_irk_list[4 * g_nrf_num_irks];
   25a2a:	4c0a      	ldr	r4, [pc, #40]	; (25a54 <ble_hw_resolv_list_add+0x34>)
   25a2c:	0119      	lsls	r1, r3, #4
   25a2e:	1862      	adds	r2, r4, r1
    memcpy(nrf_entry, irk, 16);
   25a30:	6807      	ldr	r7, [r0, #0]
   25a32:	6846      	ldr	r6, [r0, #4]
   25a34:	6885      	ldr	r5, [r0, #8]
   25a36:	68c0      	ldr	r0, [r0, #12]
   25a38:	5067      	str	r7, [r4, r1]
   25a3a:	6056      	str	r6, [r2, #4]
   25a3c:	6095      	str	r5, [r2, #8]
   25a3e:	60d0      	str	r0, [r2, #12]

    /* Add to total */
    ++g_nrf_num_irks;
   25a40:	3301      	adds	r3, #1
   25a42:	4a03      	ldr	r2, [pc, #12]	; (25a50 <ble_hw_resolv_list_add+0x30>)
   25a44:	7013      	strb	r3, [r2, #0]
    return BLE_ERR_SUCCESS;
   25a46:	2000      	movs	r0, #0
}
   25a48:	bcf0      	pop	{r4, r5, r6, r7}
   25a4a:	4770      	bx	lr
        return BLE_ERR_MEM_CAPACITY;
   25a4c:	2007      	movs	r0, #7
}
   25a4e:	4770      	bx	lr
   25a50:	20008d9c 	.word	0x20008d9c
   25a54:	20008d5c 	.word	0x20008d5c

00025a58 <ble_hw_resolv_list_rmv>:
void
ble_hw_resolv_list_rmv(int index)
{
    uint32_t *irk_entry;

    if (index < g_nrf_num_irks) {
   25a58:	4b0b      	ldr	r3, [pc, #44]	; (25a88 <ble_hw_resolv_list_rmv+0x30>)
   25a5a:	781b      	ldrb	r3, [r3, #0]
   25a5c:	4283      	cmp	r3, r0
   25a5e:	dd12      	ble.n	25a86 <ble_hw_resolv_list_rmv+0x2e>
{
   25a60:	b510      	push	{r4, lr}
        --g_nrf_num_irks;
   25a62:	3b01      	subs	r3, #1
   25a64:	b2db      	uxtb	r3, r3
   25a66:	4a08      	ldr	r2, [pc, #32]	; (25a88 <ble_hw_resolv_list_rmv+0x30>)
   25a68:	7013      	strb	r3, [r2, #0]
        irk_entry = &g_nrf_irk_list[index];
   25a6a:	4c08      	ldr	r4, [pc, #32]	; (25a8c <ble_hw_resolv_list_rmv+0x34>)
   25a6c:	eb04 0480 	add.w	r4, r4, r0, lsl #2
        if (g_nrf_num_irks > index) {
   25a70:	4283      	cmp	r3, r0
   25a72:	dc00      	bgt.n	25a76 <ble_hw_resolv_list_rmv+0x1e>
            memmove(irk_entry, irk_entry + 4, 16 * (g_nrf_num_irks - index));
        }
    }
}
   25a74:	bd10      	pop	{r4, pc}
            memmove(irk_entry, irk_entry + 4, 16 * (g_nrf_num_irks - index));
   25a76:	1a1a      	subs	r2, r3, r0
   25a78:	0112      	lsls	r2, r2, #4
   25a7a:	f104 0110 	add.w	r1, r4, #16
   25a7e:	4620      	mov	r0, r4
   25a80:	f7e5 ff13 	bl	b8aa <memmove>
}
   25a84:	e7f6      	b.n	25a74 <ble_hw_resolv_list_rmv+0x1c>
   25a86:	4770      	bx	lr
   25a88:	20008d9c 	.word	0x20008d9c
   25a8c:	20008d5c 	.word	0x20008d5c

00025a90 <ble_hw_resolv_list_size>:
 */
uint8_t
ble_hw_resolv_list_size(void)
{
    return BLE_HW_RESOLV_LIST_SIZE;
}
   25a90:	2010      	movs	r0, #16
   25a92:	4770      	bx	lr

00025a94 <ble_hw_resolv_list_match>:
int
ble_hw_resolv_list_match(void)
{
    uint32_t index;

    if (NRF_AAR->EVENTS_END) {
   25a94:	4b08      	ldr	r3, [pc, #32]	; (25ab8 <ble_hw_resolv_list_match+0x24>)
   25a96:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   25a9a:	b13b      	cbz	r3, 25aac <ble_hw_resolv_list_match+0x18>
        if (NRF_AAR->EVENTS_RESOLVED) {
   25a9c:	4b06      	ldr	r3, [pc, #24]	; (25ab8 <ble_hw_resolv_list_match+0x24>)
   25a9e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   25aa2:	b133      	cbz	r3, 25ab2 <ble_hw_resolv_list_match+0x1e>
            index = NRF_AAR->STATUS;
   25aa4:	4b04      	ldr	r3, [pc, #16]	; (25ab8 <ble_hw_resolv_list_match+0x24>)
   25aa6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
            return (int)index;
   25aaa:	4770      	bx	lr
        }
    }

    return -1;
   25aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25ab0:	4770      	bx	lr
   25ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   25ab6:	4770      	bx	lr
   25ab8:	4000f000 	.word	0x4000f000

00025abc <ble_phy_apply_errata_102_106_107>:
{
    /* [102] RADIO: PAYLOAD/END events delayed or not triggered after ADDRESS
     * [106] RADIO: Higher CRC error rates for some access addresses
     * [107] RADIO: Immediate address match for access addresses containing MSBs 0x00
     */
    *(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   25abc:	4a04      	ldr	r2, [pc, #16]	; (25ad0 <ble_phy_apply_errata_102_106_107+0x14>)
   25abe:	6813      	ldr	r3, [r2, #0]
                         0xfffffffe) | 0x01000000;
   25ac0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   25ac4:	f023 0301 	bic.w	r3, r3, #1
   25ac8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    *(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   25acc:	6013      	str	r3, [r2, #0]
}
   25ace:	4770      	bx	lr
   25ad0:	40001774 	.word	0x40001774

00025ad4 <nrf_wait_disabled>:
static void
nrf_wait_disabled(void)
{
    uint32_t state;

    state = NRF_RADIO->STATE;
   25ad4:	4b06      	ldr	r3, [pc, #24]	; (25af0 <nrf_wait_disabled+0x1c>)
   25ad6:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    if (state != RADIO_STATE_STATE_Disabled) {
   25ada:	b143      	cbz	r3, 25aee <nrf_wait_disabled+0x1a>
        if ((state == RADIO_STATE_STATE_RxDisable) ||
   25adc:	2b04      	cmp	r3, #4
   25ade:	d001      	beq.n	25ae4 <nrf_wait_disabled+0x10>
   25ae0:	2b0c      	cmp	r3, #12
   25ae2:	d104      	bne.n	25aee <nrf_wait_disabled+0x1a>
            (state == RADIO_STATE_STATE_TxDisable)) {
            /* This will end within a short time (6 usecs). Just poll */
            while (NRF_RADIO->STATE == state) {
   25ae4:	4a02      	ldr	r2, [pc, #8]	; (25af0 <nrf_wait_disabled+0x1c>)
   25ae6:	f8d2 2550 	ldr.w	r2, [r2, #1360]	; 0x550
   25aea:	429a      	cmp	r2, r3
   25aec:	d0fa      	beq.n	25ae4 <nrf_wait_disabled+0x10>
                /* If this fails, something is really wrong. Should last
                 * no more than 6 usecs */
            }
        }
    }
}
   25aee:	4770      	bx	lr
   25af0:	40001000 	.word	0x40001000

00025af4 <ble_phy_set_start_time>:
 *
 *
 */
static int
ble_phy_set_start_time(uint32_t cputime, uint8_t rem_usecs, bool tx)
{
   25af4:	b430      	push	{r4, r5}
     * Radio ramp-up time is 40 usecs and TX delay is 3 or 5 usecs depending on
     * phy, thus we'll offset RTC by 2 full ticks (61 usecs) and then compensate
     * using TIMER0 with 1 usec precision.
     */

    cputime -= 2;
   25af6:	1e84      	subs	r4, r0, #2
    rem_usecs += 61;
    if (tx) {
   25af8:	2a00      	cmp	r2, #0
   25afa:	d03d      	beq.n	25b78 <ble_phy_set_start_time+0x84>
        rem_usecs -= BLE_PHY_T_TXENFAST;
   25afc:	3115      	adds	r1, #21
   25afe:	b2c9      	uxtb	r1, r1
        rem_usecs -= g_ble_phy_t_txdelay[g_ble_phy_data.phy_cur_phy_mode];
   25b00:	4b23      	ldr	r3, [pc, #140]	; (25b90 <ble_phy_set_start_time+0x9c>)
   25b02:	7a9b      	ldrb	r3, [r3, #10]
   25b04:	4a23      	ldr	r2, [pc, #140]	; (25b94 <ble_phy_set_start_time+0xa0>)
   25b06:	5cd3      	ldrb	r3, [r2, r3]
   25b08:	1ac9      	subs	r1, r1, r3
   25b0a:	b2c9      	uxtb	r1, r1
     * tick then we should better count one more low-power tick rather than
     * 30 high-power usecs. Also make sure we don't set TIMER0 CC to 0 as the
     * compare won't occur.
     */

    if (rem_usecs > 30) {
   25b0c:	291e      	cmp	r1, #30
   25b0e:	d902      	bls.n	25b16 <ble_phy_set_start_time+0x22>
        cputime++;
   25b10:	1e44      	subs	r4, r0, #1
        rem_usecs -= 30;
   25b12:	391e      	subs	r1, #30
   25b14:	b2c9      	uxtb	r1, r1
     *      counter.
     *
     * NOTE: since the counter can tick 1 while we do these calculations we
     * need to account for it.
     */
    next_cc = cputime & 0xffffff;
   25b16:	f024 457f 	bic.w	r5, r4, #4278190080	; 0xff000000
    cur_cc = NRF_RTC0->CC[0];
   25b1a:	4a1f      	ldr	r2, [pc, #124]	; (25b98 <ble_phy_set_start_time+0xa4>)
   25b1c:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    cntr = NRF_RTC0->COUNTER;
   25b20:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504

    delta = (cur_cc - cntr) & 0xffffff;
   25b24:	1a9b      	subs	r3, r3, r2
   25b26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((delta <= 3) && (delta != 0)) {
   25b2a:	3b01      	subs	r3, #1
   25b2c:	2b02      	cmp	r3, #2
   25b2e:	d926      	bls.n	25b7e <ble_phy_set_start_time+0x8a>
        return -1;
    }
    delta = (next_cc - cntr) & 0xffffff;
   25b30:	1aaa      	subs	r2, r5, r2
   25b32:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
    if ((delta & 0x800000) || (delta < 3)) {
   25b36:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   25b3a:	d123      	bne.n	25b84 <ble_phy_set_start_time+0x90>
   25b3c:	2b02      	cmp	r3, #2
   25b3e:	d924      	bls.n	25b8a <ble_phy_set_start_time+0x96>
        return -1;
    }

    /* Clear and set TIMER0 to fire off at proper time */
    NRF_TIMER0->TASKS_CLEAR = 1;
   25b40:	4b16      	ldr	r3, [pc, #88]	; (25b9c <ble_phy_set_start_time+0xa8>)
   25b42:	2201      	movs	r2, #1
   25b44:	60da      	str	r2, [r3, #12]
    NRF_TIMER0->CC[0] = rem_usecs;
   25b46:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   25b4a:	2000      	movs	r0, #0
   25b4c:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

    /* Set RTC compare to start TIMER0 */
    NRF_RTC0->EVENTS_COMPARE[0] = 0;
   25b50:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
   25b54:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
    NRF_RTC0->CC[0] = next_cc;
   25b58:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
    NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
   25b5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   25b60:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

    /* Enable PPI */
    NRF_PPI->CHENSET = PPI_CHEN_CH31_Msk;
   25b64:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   25b68:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   25b6c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

    /* Store the cputime at which we set the RTC */
    g_ble_phy_data.phy_start_cputime = cputime;
   25b70:	4b07      	ldr	r3, [pc, #28]	; (25b90 <ble_phy_set_start_time+0x9c>)
   25b72:	631c      	str	r4, [r3, #48]	; 0x30

    return 0;
}
   25b74:	bc30      	pop	{r4, r5}
   25b76:	4770      	bx	lr
        rem_usecs -= BLE_PHY_T_RXENFAST;
   25b78:	3115      	adds	r1, #21
   25b7a:	b2c9      	uxtb	r1, r1
   25b7c:	e7c6      	b.n	25b0c <ble_phy_set_start_time+0x18>
        return -1;
   25b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25b82:	e7f7      	b.n	25b74 <ble_phy_set_start_time+0x80>
        return -1;
   25b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25b88:	e7f4      	b.n	25b74 <ble_phy_set_start_time+0x80>
   25b8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25b8e:	e7f1      	b.n	25b74 <ble_phy_set_start_time+0x80>
   25b90:	20008da0 	.word	0x20008da0
   25b94:	000298c4 	.word	0x000298c4
   25b98:	4000b000 	.word	0x4000b000
   25b9c:	40008000 	.word	0x40008000

00025ba0 <ble_phy_get_ccm_datarate>:
    assert(0);
    return 0;
#else
    return CCM_MODE_DATARATE_1Mbit << CCM_MODE_DATARATE_Pos;
#endif
}
   25ba0:	2000      	movs	r0, #0
   25ba2:	4770      	bx	lr

00025ba4 <ble_phy_rx_xcvr_setup>:
/**
 * Setup transceiver for receive.
 */
static void
ble_phy_rx_xcvr_setup(void)
{
   25ba4:	b510      	push	{r4, lr}

    dptr = (uint8_t *)&g_ble_phy_rx_buf[0];
    dptr += 3;

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (g_ble_phy_data.phy_encrypted) {
   25ba6:	4b35      	ldr	r3, [pc, #212]	; (25c7c <ble_phy_rx_xcvr_setup+0xd8>)
   25ba8:	79db      	ldrb	r3, [r3, #7]
   25baa:	b383      	cbz	r3, 25c0e <ble_phy_rx_xcvr_setup+0x6a>
        NRF_RADIO->PACKETPTR = (uint32_t)&g_ble_phy_enc_buf[0];
   25bac:	4b34      	ldr	r3, [pc, #208]	; (25c80 <ble_phy_rx_xcvr_setup+0xdc>)
   25bae:	4a35      	ldr	r2, [pc, #212]	; (25c84 <ble_phy_rx_xcvr_setup+0xe0>)
   25bb0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
        NRF_CCM->INPTR = (uint32_t)&g_ble_phy_enc_buf[0];
   25bb4:	4c34      	ldr	r4, [pc, #208]	; (25c88 <ble_phy_rx_xcvr_setup+0xe4>)
   25bb6:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
        NRF_CCM->OUTPTR = (uint32_t)dptr;
   25bba:	4b34      	ldr	r3, [pc, #208]	; (25c8c <ble_phy_rx_xcvr_setup+0xe8>)
   25bbc:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
        NRF_CCM->SCRATCHPTR = (uint32_t)&g_nrf_encrypt_scratchpad[0];
   25bc0:	4b33      	ldr	r3, [pc, #204]	; (25c90 <ble_phy_rx_xcvr_setup+0xec>)
   25bc2:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | CCM_MODE_MODE_Decryption |
                                                    ble_phy_get_ccm_datarate();
   25bc6:	f7ff ffeb 	bl	25ba0 <ble_phy_get_ccm_datarate>
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | CCM_MODE_MODE_Decryption |
   25bca:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   25bce:	f040 0001 	orr.w	r0, r0, #1
   25bd2:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
        NRF_CCM->CNFPTR = (uint32_t)&g_nrf_ccm_data;
   25bd6:	4b2f      	ldr	r3, [pc, #188]	; (25c94 <ble_phy_rx_xcvr_setup+0xf0>)
   25bd8:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
        NRF_CCM->SHORTS = 0;
   25bdc:	2300      	movs	r3, #0
   25bde:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        NRF_CCM->EVENTS_ERROR = 0;
   25be2:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        NRF_CCM->EVENTS_ENDCRYPT = 0;
   25be6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        NRF_CCM->TASKS_KSGEN = 1;
   25bea:	2301      	movs	r3, #1
   25bec:	6023      	str	r3, [r4, #0]
        NRF_PPI->CHENSET = PPI_CHEN_CH25_Msk;
   25bee:	4b2a      	ldr	r3, [pc, #168]	; (25c98 <ble_phy_rx_xcvr_setup+0xf4>)
   25bf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   25bf4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#else
    NRF_RADIO->PACKETPTR = (uint32_t)dptr;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    if (g_ble_phy_data.phy_privacy) {
   25bf8:	4b20      	ldr	r3, [pc, #128]	; (25c7c <ble_phy_rx_xcvr_setup+0xd8>)
   25bfa:	7a1b      	ldrb	r3, [r3, #8]
   25bfc:	b963      	cbnz	r3, 25c18 <ble_phy_rx_xcvr_setup+0x74>
        NRF_AAR->SCRATCHPTR = (uint32_t)&g_ble_phy_data.phy_aar_scratch;
        NRF_AAR->EVENTS_END = 0;
        NRF_AAR->EVENTS_RESOLVED = 0;
        NRF_AAR->EVENTS_NOTRESOLVED = 0;
    } else {
        if (g_ble_phy_data.phy_encrypted == 0) {
   25bfe:	4b1f      	ldr	r3, [pc, #124]	; (25c7c <ble_phy_rx_xcvr_setup+0xd8>)
   25c00:	79db      	ldrb	r3, [r3, #7]
   25c02:	b9d3      	cbnz	r3, 25c3a <ble_phy_rx_xcvr_setup+0x96>
            NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Disabled;
   25c04:	4b20      	ldr	r3, [pc, #128]	; (25c88 <ble_phy_rx_xcvr_setup+0xe4>)
   25c06:	2200      	movs	r2, #0
   25c08:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   25c0c:	e015      	b.n	25c3a <ble_phy_rx_xcvr_setup+0x96>
        NRF_RADIO->PACKETPTR = (uint32_t)dptr;
   25c0e:	4a1f      	ldr	r2, [pc, #124]	; (25c8c <ble_phy_rx_xcvr_setup+0xe8>)
   25c10:	4b1c      	ldr	r3, [pc, #112]	; (25c84 <ble_phy_rx_xcvr_setup+0xe0>)
   25c12:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   25c16:	e7ef      	b.n	25bf8 <ble_phy_rx_xcvr_setup+0x54>
        NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Enabled;
   25c18:	4b1b      	ldr	r3, [pc, #108]	; (25c88 <ble_phy_rx_xcvr_setup+0xe4>)
   25c1a:	2203      	movs	r2, #3
   25c1c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   25c20:	4a1e      	ldr	r2, [pc, #120]	; (25c9c <ble_phy_rx_xcvr_setup+0xf8>)
   25c22:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        NRF_AAR->SCRATCHPTR = (uint32_t)&g_ble_phy_data.phy_aar_scratch;
   25c26:	4a1e      	ldr	r2, [pc, #120]	; (25ca0 <ble_phy_rx_xcvr_setup+0xfc>)
   25c28:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
        NRF_AAR->EVENTS_END = 0;
   25c2c:	2200      	movs	r2, #0
   25c2e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        NRF_AAR->EVENTS_RESOLVED = 0;
   25c32:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        NRF_AAR->EVENTS_NOTRESOLVED = 0;
   25c36:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        }
    }
#endif

    /* Turn off trigger TXEN on output compare match and AAR on bcmatch */
    NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk | PPI_CHEN_CH23_Msk;
   25c3a:	4b17      	ldr	r3, [pc, #92]	; (25c98 <ble_phy_rx_xcvr_setup+0xf4>)
   25c3c:	f44f 0210 	mov.w	r2, #9437184	; 0x900000
   25c40:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    /* Reset the rx started flag. Used for the wait for response */
    g_ble_phy_data.phy_rx_started = 0;
   25c44:	4b0d      	ldr	r3, [pc, #52]	; (25c7c <ble_phy_rx_xcvr_setup+0xd8>)
   25c46:	2200      	movs	r2, #0
   25c48:	719a      	strb	r2, [r3, #6]
    g_ble_phy_data.phy_state = BLE_PHY_STATE_RX;
   25c4a:	2101      	movs	r1, #1
   25c4c:	70d9      	strb	r1, [r3, #3]
        g_ble_phy_data.phy_bcc_offset = 5;
    } else {
        g_ble_phy_data.phy_bcc_offset = 0;
    }
#else
    g_ble_phy_data.phy_bcc_offset = 0;
   25c4e:	735a      	strb	r2, [r3, #13]
#endif

    /* I want to know when 1st byte received (after address) */
    NRF_RADIO->BCC = 8 + g_ble_phy_data.phy_bcc_offset; /* in bits */
   25c50:	4b0c      	ldr	r3, [pc, #48]	; (25c84 <ble_phy_rx_xcvr_setup+0xe0>)
   25c52:	2108      	movs	r1, #8
   25c54:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
    NRF_RADIO->EVENTS_ADDRESS = 0;
   25c58:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_RADIO->EVENTS_DEVMATCH = 0;
   25c5c:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    NRF_RADIO->EVENTS_BCMATCH = 0;
   25c60:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    NRF_RADIO->EVENTS_RSSIEND = 0;
   25c64:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    NRF_RADIO->EVENTS_CRCOK = 0;
   25c68:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    NRF_RADIO->SHORTS = RADIO_SHORTS_END_DISABLE_Msk |
   25c6c:	f240 1253 	movw	r2, #339	; 0x153
   25c70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                        RADIO_SHORTS_READY_START_Msk |
                        RADIO_SHORTS_ADDRESS_BCSTART_Msk |
                        RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
                        RADIO_SHORTS_DISABLED_RSSISTOP_Msk;

    NRF_RADIO->INTENSET = RADIO_INTENSET_ADDRESS_Msk;
   25c74:	2202      	movs	r2, #2
   25c76:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   25c7a:	bd10      	pop	{r4, pc}
   25c7c:	20008da0 	.word	0x20008da0
   25c80:	20008dd4 	.word	0x20008dd4
   25c84:	40001000 	.word	0x40001000
   25c88:	4000f000 	.word	0x4000f000
   25c8c:	20008edb 	.word	0x20008edb
   25c90:	20009104 	.word	0x20009104
   25c94:	200090e0 	.word	0x200090e0
   25c98:	4001f000 	.word	0x4001f000
   25c9c:	20008d5c 	.word	0x20008d5c
   25ca0:	20008db0 	.word	0x20008db0

00025ca4 <ble_phy_set_access_addr>:
 *
 * @return int 0: success; PHY error code otherwise
 */
static int
ble_phy_set_access_addr(uint32_t access_addr)
{
   25ca4:	b508      	push	{r3, lr}
    NRF_RADIO->BASE0 = (access_addr << 8);
   25ca6:	0203      	lsls	r3, r0, #8
   25ca8:	4a08      	ldr	r2, [pc, #32]	; (25ccc <ble_phy_set_access_addr+0x28>)
   25caa:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    NRF_RADIO->PREFIX0 = (NRF_RADIO->PREFIX0 & 0xFFFFFF00) | (access_addr >> 24);
   25cae:	f8d2 3524 	ldr.w	r3, [r2, #1316]	; 0x524
   25cb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   25cb6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   25cba:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524

    g_ble_phy_data.phy_access_address = access_addr;
   25cbe:	4b04      	ldr	r3, [pc, #16]	; (25cd0 <ble_phy_set_access_addr+0x2c>)
   25cc0:	6158      	str	r0, [r3, #20]

    ble_phy_apply_errata_102_106_107();
   25cc2:	f7ff fefb 	bl	25abc <ble_phy_apply_errata_102_106_107>

    return 0;
}
   25cc6:	2000      	movs	r0, #0
   25cc8:	bd08      	pop	{r3, pc}
   25cca:	bf00      	nop
   25ccc:	40001000 	.word	0x40001000
   25cd0:	20008da0 	.word	0x20008da0

00025cd4 <ble_phy_stop_usec_timer>:
 * Stop the timer used to count microseconds when using RTC for cputime
 */
static void
ble_phy_stop_usec_timer(void)
{
    NRF_TIMER0->TASKS_STOP = 1;
   25cd4:	4b05      	ldr	r3, [pc, #20]	; (25cec <ble_phy_stop_usec_timer+0x18>)
   25cd6:	2201      	movs	r2, #1
   25cd8:	605a      	str	r2, [r3, #4]
    NRF_TIMER0->TASKS_SHUTDOWN = 1;
   25cda:	611a      	str	r2, [r3, #16]
    NRF_RTC0->EVTENCLR = RTC_EVTENSET_COMPARE0_Msk;
   25cdc:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
   25ce0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   25ce4:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
}
   25ce8:	4770      	bx	lr
   25cea:	bf00      	nop
   25cec:	40008000 	.word	0x40008000

00025cf0 <ble_phy_disable_irq_and_ppi>:
 * the phy.
 */
static void
ble_phy_disable_irq_and_ppi(void)
{
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   25cf0:	4b0a      	ldr	r3, [pc, #40]	; (25d1c <ble_phy_disable_irq_and_ppi+0x2c>)
   25cf2:	f243 42ff 	movw	r2, #13567	; 0x34ff
   25cf6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->SHORTS = 0;
   25cfa:	2200      	movs	r2, #0
   25cfc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_RADIO->TASKS_DISABLE = 1;
   25d00:	2101      	movs	r1, #1
   25d02:	6119      	str	r1, [r3, #16]
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk | PPI_CHEN_CH20_Msk |
   25d04:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   25d08:	4905      	ldr	r1, [pc, #20]	; (25d20 <ble_phy_disable_irq_and_ppi+0x30>)
   25d0a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25d0e:	4b05      	ldr	r3, [pc, #20]	; (25d24 <ble_phy_disable_irq_and_ppi+0x34>)
   25d10:	2102      	movs	r1, #2
   25d12:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
          PPI_CHEN_CH21_Msk | PPI_CHEN_CH23_Msk |
          PPI_CHEN_CH25_Msk | PPI_CHEN_CH31_Msk;
    NVIC_ClearPendingIRQ(RADIO_IRQn);
    g_ble_phy_data.phy_state = BLE_PHY_STATE_IDLE;
   25d16:	4b04      	ldr	r3, [pc, #16]	; (25d28 <ble_phy_disable_irq_and_ppi+0x38>)
   25d18:	70da      	strb	r2, [r3, #3]
}
   25d1a:	4770      	bx	lr
   25d1c:	40001000 	.word	0x40001000
   25d20:	82b00030 	.word	0x82b00030
   25d24:	e000e100 	.word	0xe000e100
   25d28:	20008da0 	.word	0x20008da0

00025d2c <ble_phy_set_start_now>:
{
   25d2c:	b538      	push	{r3, r4, r5, lr}
    OS_ENTER_CRITICAL(sr);
   25d2e:	f7e5 fc41 	bl	b5b4 <os_arch_save_sr>
   25d32:	4605      	mov	r5, r0
    NRF_TIMER0->TASKS_CLEAR = 1;
   25d34:	4b10      	ldr	r3, [pc, #64]	; (25d78 <ble_phy_set_start_now+0x4c>)
   25d36:	2201      	movs	r2, #1
   25d38:	60da      	str	r2, [r3, #12]
    NRF_TIMER0->CC[0] = 1;
   25d3a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   25d3e:	2400      	movs	r4, #0
   25d40:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
    now = os_cputime_get32();
   25d44:	f7f6 f809 	bl	1bd5a <os_cputime_get32>
    NRF_RTC0->EVENTS_COMPARE[0] = 0;
   25d48:	4b0c      	ldr	r3, [pc, #48]	; (25d7c <ble_phy_set_start_now+0x50>)
   25d4a:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
    NRF_RTC0->CC[0] = now + 3;
   25d4e:	3003      	adds	r0, #3
   25d50:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
   25d54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   25d58:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    NRF_PPI->CHENSET = PPI_CHEN_CH31_Msk;
   25d5c:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   25d60:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   25d64:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    g_ble_phy_data.phy_start_cputime = now + 3;
   25d68:	4b05      	ldr	r3, [pc, #20]	; (25d80 <ble_phy_set_start_now+0x54>)
   25d6a:	6318      	str	r0, [r3, #48]	; 0x30
    OS_EXIT_CRITICAL(sr);
   25d6c:	4628      	mov	r0, r5
   25d6e:	f7e5 fc27 	bl	b5c0 <os_arch_restore_sr>
}
   25d72:	4620      	mov	r0, r4
   25d74:	bd38      	pop	{r3, r4, r5, pc}
   25d76:	bf00      	nop
   25d78:	40008000 	.word	0x40008000
   25d7c:	4000b000 	.word	0x4000b000
   25d80:	20008da0 	.word	0x20008da0

00025d84 <ble_phy_get_cur_phy>:
}
   25d84:	2001      	movs	r0, #1
   25d86:	4770      	bx	lr

00025d88 <ble_phy_rxpdu_copy>:
{
   25d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(((uint32_t)dptr & 3) == 0);
   25d8a:	f010 0f03 	tst.w	r0, #3
   25d8e:	d10a      	bne.n	25da6 <ble_phy_rxpdu_copy+0x1e>
   25d90:	460e      	mov	r6, r1
    block_len = rxpdu->om_omp->omp_databuf_len;
   25d92:	688b      	ldr	r3, [r1, #8]
   25d94:	f8b3 c000 	ldrh.w	ip, [r3]
    rem_len = OS_MBUF_PKTHDR(rxpdu)->omp_len;
   25d98:	8a0d      	ldrh	r5, [r1, #16]
    copy_len = block_len - rxpdu->om_pkthdr_len - 4;
   25d9a:	794b      	ldrb	r3, [r1, #5]
   25d9c:	ebac 0303 	sub.w	r3, ip, r3
   25da0:	3b04      	subs	r3, #4
    om = rxpdu;
   25da2:	460f      	mov	r7, r1
   25da4:	e00b      	b.n	25dbe <ble_phy_rxpdu_copy+0x36>
    assert(((uint32_t)dptr & 3) == 0);
   25da6:	f7e2 fa0b 	bl	81c0 <hal_debugger_connected>
   25daa:	b100      	cbz	r0, 25dae <ble_phy_rxpdu_copy+0x26>
   25dac:	be01      	bkpt	0x0001
   25dae:	2300      	movs	r3, #0
   25db0:	461a      	mov	r2, r3
   25db2:	4619      	mov	r1, r3
   25db4:	4618      	mov	r0, r3
   25db6:	f7e3 fe0b 	bl	99d0 <__assert_func>
        om = SLIST_NEXT(om, om_next);
   25dba:	68ff      	ldr	r7, [r7, #12]
        copy_len = block_len;
   25dbc:	4663      	mov	r3, ip
        copy_len = min(copy_len, rem_len);
   25dbe:	462a      	mov	r2, r5
   25dc0:	429d      	cmp	r5, r3
   25dc2:	bf28      	it	cs
   25dc4:	461a      	movcs	r2, r3
        copy_len &= ~3;
   25dc6:	f022 0203 	bic.w	r2, r2, #3
        dst = om->om_data;
   25dca:	6839      	ldr	r1, [r7, #0]
        om->om_len = copy_len;
   25dcc:	80fa      	strh	r2, [r7, #6]
        rem_len -= copy_len;
   25dce:	1aad      	subs	r5, r5, r2
        block_rem_len -= copy_len;
   25dd0:	eba3 0e02 	sub.w	lr, r3, r2
        __asm__ volatile (".syntax unified              \n"
   25dd4:	4614      	mov	r4, r2
   25dd6:	e001      	b.n	25ddc <ble_phy_rxpdu_copy+0x54>
   25dd8:	5883      	ldr	r3, [r0, r2]
   25dda:	508b      	str	r3, [r1, r2]
   25ddc:	3a04      	subs	r2, #4
   25dde:	d5fb      	bpl.n	25dd8 <ble_phy_rxpdu_copy+0x50>
   25de0:	1900      	adds	r0, r0, r4
   25de2:	1909      	adds	r1, r1, r4
        if ((rem_len < 4) && (block_rem_len >= rem_len)) {
   25de4:	2d03      	cmp	r5, #3
   25de6:	d8e8      	bhi.n	25dba <ble_phy_rxpdu_copy+0x32>
   25de8:	4575      	cmp	r5, lr
   25dea:	d8e6      	bhi.n	25dba <ble_phy_rxpdu_copy+0x32>
    om->om_len += rem_len;
   25dec:	88fb      	ldrh	r3, [r7, #6]
   25dee:	442b      	add	r3, r5
   25df0:	80fb      	strh	r3, [r7, #6]
    __asm__ volatile (".syntax unified              \n"
   25df2:	e001      	b.n	25df8 <ble_phy_rxpdu_copy+0x70>
   25df4:	5d43      	ldrb	r3, [r0, r5]
   25df6:	554b      	strb	r3, [r1, r5]
   25df8:	3d01      	subs	r5, #1
   25dfa:	d5fb      	bpl.n	25df4 <ble_phy_rxpdu_copy+0x6c>
    memcpy(BLE_MBUF_HDR_PTR(rxpdu), &g_ble_phy_data.rxhdr,
   25dfc:	4c03      	ldr	r4, [pc, #12]	; (25e0c <ble_phy_rxpdu_copy+0x84>)
   25dfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   25e00:	61b0      	str	r0, [r6, #24]
   25e02:	61f1      	str	r1, [r6, #28]
   25e04:	6232      	str	r2, [r6, #32]
   25e06:	6273      	str	r3, [r6, #36]	; 0x24
}
   25e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25e0a:	bf00      	nop
   25e0c:	20008db8 	.word	0x20008db8

00025e10 <ble_phy_wfr_enable>:
{
   25e10:	b410      	push	{r4}
    phy = g_ble_phy_data.phy_cur_phy_mode;
   25e12:	4b1c      	ldr	r3, [pc, #112]	; (25e84 <ble_phy_wfr_enable+0x74>)
   25e14:	7a9c      	ldrb	r4, [r3, #10]
    if (txrx == BLE_PHY_WFR_ENABLE_TXRX) {
   25e16:	2801      	cmp	r0, #1
   25e18:	d02a      	beq.n	25e70 <ble_phy_wfr_enable+0x60>
        end_time = NRF_TIMER0->CC[0] + BLE_PHY_T_RXENFAST + wfr_usecs;
   25e1a:	4b1b      	ldr	r3, [pc, #108]	; (25e88 <ble_phy_wfr_enable+0x78>)
   25e1c:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
   25e20:	441a      	add	r2, r3
   25e22:	3228      	adds	r2, #40	; 0x28
    end_time += ble_phy_mode_pdu_start_off(phy);
   25e24:	3228      	adds	r2, #40	; 0x28
    end_time += g_ble_phy_t_rxaddrdelay[phy];
   25e26:	4b19      	ldr	r3, [pc, #100]	; (25e8c <ble_phy_wfr_enable+0x7c>)
   25e28:	5d1b      	ldrb	r3, [r3, r4]
   25e2a:	441a      	add	r2, r3
    NRF_TIMER0->CC[3] = end_time;
   25e2c:	4b16      	ldr	r3, [pc, #88]	; (25e88 <ble_phy_wfr_enable+0x78>)
   25e2e:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    NRF_TIMER0->EVENTS_COMPARE[3] = 0;
   25e32:	2200      	movs	r2, #0
   25e34:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
   25e38:	4a15      	ldr	r2, [pc, #84]	; (25e90 <ble_phy_wfr_enable+0x80>)
   25e3a:	2130      	movs	r1, #48	; 0x30
   25e3c:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
   25e40:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   25e44:	2110      	movs	r1, #16
   25e46:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    NRF_TIMER0->TASKS_CAPTURE[1] = 1;
   25e4a:	2201      	movs	r2, #1
   25e4c:	645a      	str	r2, [r3, #68]	; 0x44
    if (NRF_TIMER0->CC[1] > NRF_TIMER0->CC[3]) {
   25e4e:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
   25e52:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
   25e56:	429a      	cmp	r2, r3
   25e58:	d907      	bls.n	25e6a <ble_phy_wfr_enable+0x5a>
        NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk;
   25e5a:	4b0d      	ldr	r3, [pc, #52]	; (25e90 <ble_phy_wfr_enable+0x80>)
   25e5c:	2230      	movs	r2, #48	; 0x30
   25e5e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        NRF_RADIO->TASKS_DISABLE = 1;
   25e62:	f5a3 33f0 	sub.w	r3, r3, #122880	; 0x1e000
   25e66:	2201      	movs	r2, #1
   25e68:	611a      	str	r2, [r3, #16]
}
   25e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
   25e6e:	4770      	bx	lr
        end_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   25e70:	4b05      	ldr	r3, [pc, #20]	; (25e88 <ble_phy_wfr_enable+0x78>)
   25e72:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
   25e76:	3396      	adds	r3, #150	; 0x96
        end_time += g_ble_phy_t_txenddelay[tx_phy_mode];
   25e78:	4a06      	ldr	r2, [pc, #24]	; (25e94 <ble_phy_wfr_enable+0x84>)
   25e7a:	5c52      	ldrb	r2, [r2, r1]
   25e7c:	441a      	add	r2, r3
        end_time += 1;
   25e7e:	3203      	adds	r2, #3
   25e80:	e7d0      	b.n	25e24 <ble_phy_wfr_enable+0x14>
   25e82:	bf00      	nop
   25e84:	20008da0 	.word	0x20008da0
   25e88:	40008000 	.word	0x40008000
   25e8c:	000298bc 	.word	0x000298bc
   25e90:	4001f000 	.word	0x4001f000
   25e94:	000298c8 	.word	0x000298c8

00025e98 <ble_phy_tx_end_isr>:
{
   25e98:	b510      	push	{r4, lr}
    tx_phy_mode = g_ble_phy_data.phy_cur_phy_mode;
   25e9a:	4b2e      	ldr	r3, [pc, #184]	; (25f54 <ble_phy_tx_end_isr+0xbc>)
   25e9c:	7a9c      	ldrb	r4, [r3, #10]
    was_encrypted = g_ble_phy_data.phy_encrypted;
   25e9e:	79d9      	ldrb	r1, [r3, #7]
    assert(g_ble_phy_data.phy_state == BLE_PHY_STATE_TX);
   25ea0:	78db      	ldrb	r3, [r3, #3]
   25ea2:	2b02      	cmp	r3, #2
   25ea4:	d127      	bne.n	25ef6 <ble_phy_tx_end_isr+0x5e>
    NRF_RADIO->EVENTS_DISABLED = 0;
   25ea6:	4b2c      	ldr	r3, [pc, #176]	; (25f58 <ble_phy_tx_end_isr+0xc0>)
   25ea8:	2200      	movs	r2, #0
   25eaa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_DISABLED_Msk;
   25eae:	2010      	movs	r0, #16
   25eb0:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    NRF_RADIO->EVENTS_END = 0;
   25eb4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    wfr_time = NRF_RADIO->SHORTS;
   25eb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    if (was_encrypted) {
   25ebc:	b131      	cbz	r1, 25ecc <ble_phy_tx_end_isr+0x34>
        if (NRF_CCM->EVENTS_ERROR) {
   25ebe:	4b27      	ldr	r3, [pc, #156]	; (25f5c <ble_phy_tx_end_isr+0xc4>)
   25ec0:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   25ec4:	b113      	cbz	r3, 25ecc <ble_phy_tx_end_isr+0x34>
            NRF_CCM->EVENTS_ERROR = 0;
   25ec6:	4b25      	ldr	r3, [pc, #148]	; (25f5c <ble_phy_tx_end_isr+0xc4>)
   25ec8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    if (g_ble_phy_data.txend_cb) {
   25ecc:	4b21      	ldr	r3, [pc, #132]	; (25f54 <ble_phy_tx_end_isr+0xbc>)
   25ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25ed0:	b113      	cbz	r3, 25ed8 <ble_phy_tx_end_isr+0x40>
        g_ble_phy_data.txend_cb(g_ble_phy_data.txend_arg);
   25ed2:	4a20      	ldr	r2, [pc, #128]	; (25f54 <ble_phy_tx_end_isr+0xbc>)
   25ed4:	6a90      	ldr	r0, [r2, #40]	; 0x28
   25ed6:	4798      	blx	r3
    transition = g_ble_phy_data.phy_transition;
   25ed8:	4b1e      	ldr	r3, [pc, #120]	; (25f54 <ble_phy_tx_end_isr+0xbc>)
   25eda:	791b      	ldrb	r3, [r3, #4]
    if (transition == BLE_PHY_TRANSITION_TX_RX) {
   25edc:	2b02      	cmp	r3, #2
   25ede:	d014      	beq.n	25f0a <ble_phy_tx_end_isr+0x72>
        NRF_TIMER0->TASKS_STOP = 1;
   25ee0:	4a1f      	ldr	r2, [pc, #124]	; (25f60 <ble_phy_tx_end_isr+0xc8>)
   25ee2:	2101      	movs	r1, #1
   25ee4:	6051      	str	r1, [r2, #4]
        NRF_TIMER0->TASKS_SHUTDOWN = 1;
   25ee6:	6111      	str	r1, [r2, #16]
        NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk |
   25ee8:	f502 32b8 	add.w	r2, r2, #94208	; 0x17000
   25eec:	491d      	ldr	r1, [pc, #116]	; (25f64 <ble_phy_tx_end_isr+0xcc>)
   25eee:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
        assert(transition == BLE_PHY_TRANSITION_NONE);
   25ef2:	bb23      	cbnz	r3, 25f3e <ble_phy_tx_end_isr+0xa6>
}
   25ef4:	bd10      	pop	{r4, pc}
    assert(g_ble_phy_data.phy_state == BLE_PHY_STATE_TX);
   25ef6:	f7e2 f963 	bl	81c0 <hal_debugger_connected>
   25efa:	b100      	cbz	r0, 25efe <ble_phy_tx_end_isr+0x66>
   25efc:	be01      	bkpt	0x0001
   25efe:	2300      	movs	r3, #0
   25f00:	461a      	mov	r2, r3
   25f02:	4619      	mov	r1, r3
   25f04:	4618      	mov	r0, r3
   25f06:	f7e3 fd63 	bl	99d0 <__assert_func>
        ble_phy_rx_xcvr_setup();
   25f0a:	f7ff fe4b 	bl	25ba4 <ble_phy_rx_xcvr_setup>
        ble_phy_wfr_enable(BLE_PHY_WFR_ENABLE_TXRX, tx_phy_mode, 0);
   25f0e:	2200      	movs	r2, #0
   25f10:	4621      	mov	r1, r4
   25f12:	2001      	movs	r0, #1
   25f14:	f7ff ff7c 	bl	25e10 <ble_phy_wfr_enable>
        rx_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   25f18:	4a11      	ldr	r2, [pc, #68]	; (25f60 <ble_phy_tx_end_isr+0xc8>)
   25f1a:	f8d2 1548 	ldr.w	r1, [r2, #1352]	; 0x548
   25f1e:	3196      	adds	r1, #150	; 0x96
        rx_time += g_ble_phy_t_txenddelay[tx_phy_mode];
   25f20:	4b11      	ldr	r3, [pc, #68]	; (25f68 <ble_phy_tx_end_isr+0xd0>)
   25f22:	5d1b      	ldrb	r3, [r3, r4]
   25f24:	440b      	add	r3, r1
        rx_time -= 2;
   25f26:	3b2a      	subs	r3, #42	; 0x2a
        NRF_TIMER0->CC[0] = rx_time;
   25f28:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
        NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   25f2c:	2300      	movs	r3, #0
   25f2e:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   25f32:	4b0e      	ldr	r3, [pc, #56]	; (25f6c <ble_phy_tx_end_isr+0xd4>)
   25f34:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   25f38:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   25f3c:	e7da      	b.n	25ef4 <ble_phy_tx_end_isr+0x5c>
        assert(transition == BLE_PHY_TRANSITION_NONE);
   25f3e:	f7e2 f93f 	bl	81c0 <hal_debugger_connected>
   25f42:	b100      	cbz	r0, 25f46 <ble_phy_tx_end_isr+0xae>
   25f44:	be01      	bkpt	0x0001
   25f46:	2300      	movs	r3, #0
   25f48:	461a      	mov	r2, r3
   25f4a:	4619      	mov	r1, r3
   25f4c:	4618      	mov	r0, r3
   25f4e:	f7e3 fd3f 	bl	99d0 <__assert_func>
   25f52:	bf00      	nop
   25f54:	20008da0 	.word	0x20008da0
   25f58:	40001000 	.word	0x40001000
   25f5c:	4000f000 	.word	0x4000f000
   25f60:	40008000 	.word	0x40008000
   25f64:	80100030 	.word	0x80100030
   25f68:	000298c8 	.word	0x000298c8
   25f6c:	4001f000 	.word	0x4001f000

00025f70 <ble_phy_init>:
{
   25f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    g_ble_phy_data.phy_cur_phy_mode = BLE_PHY_MODE_1M;
   25f74:	4f3f      	ldr	r7, [pc, #252]	; (26074 <ble_phy_init+0x104>)
   25f76:	2601      	movs	r6, #1
   25f78:	72be      	strb	r6, [r7, #10]
    g_ble_phy_data.phy_tx_phy_mode = BLE_PHY_MODE_1M;
   25f7a:	72fe      	strb	r6, [r7, #11]
    g_ble_phy_data.phy_rx_phy_mode = BLE_PHY_MODE_1M;
   25f7c:	733e      	strb	r6, [r7, #12]
    g_ble_phy_data.rx_pwr_compensation = 0;
   25f7e:	2400      	movs	r4, #0
   25f80:	73bc      	strb	r4, [r7, #14]
    g_ble_phy_data.phy_chan = BLE_PHY_NUM_CHANS;
   25f82:	2328      	movs	r3, #40	; 0x28
   25f84:	70bb      	strb	r3, [r7, #2]
    NRF_RADIO->POWER = 0;
   25f86:	4b3c      	ldr	r3, [pc, #240]	; (26078 <ble_phy_init+0x108>)
   25f88:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
    NRF_RADIO->POWER = 1;
   25f8c:	f8c3 6ffc 	str.w	r6, [r3, #4092]	; 0xffc
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   25f90:	f243 42ff 	movw	r2, #13567	; 0x34ff
   25f94:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->MODE = RADIO_MODE_MODE_Ble_1Mbit;
   25f98:	f04f 0903 	mov.w	r9, #3
   25f9c:	f8c3 9510 	str.w	r9, [r3, #1296]	; 0x510
    NRF_RADIO->PCNF0 = NRF_PCNF0;
   25fa0:	4a36      	ldr	r2, [pc, #216]	; (2607c <ble_phy_init+0x10c>)
   25fa2:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    NRF_RADIO->PCNF1 = NRF_MAXLEN |
   25fa6:	4a36      	ldr	r2, [pc, #216]	; (26080 <ble_phy_init+0x110>)
   25fa8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast << RADIO_MODECNF0_RU_Pos) &
   25fac:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   25fb0:	4332      	orrs	r2, r6
   25fb2:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    NRF_RADIO->TXADDRESS  = 0;
   25fb6:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    NRF_RADIO->RXADDRESSES  = (1 << 0);
   25fba:	f8c3 6530 	str.w	r6, [r3, #1328]	; 0x530
    NRF_RADIO->CRCCNF = (RADIO_CRCCNF_SKIPADDR_Skip << RADIO_CRCCNF_SKIPADDR_Pos) | RADIO_CRCCNF_LEN_Three;
   25fbe:	f240 1203 	movw	r2, #259	; 0x103
   25fc2:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    NRF_RADIO->CRCPOLY = 0x0000065B;
   25fc6:	f240 625b 	movw	r2, #1627	; 0x65b
   25fca:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_RADIO->TIFS = BLE_LL_IFS;
   25fce:	2296      	movs	r2, #150	; 0x96
   25fd0:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = PPI_CHEN_CH26_Msk | PPI_CHEN_CH27_Msk;
   25fd4:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 260a0 <ble_phy_init+0x130>
   25fd8:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
   25fdc:	f8c8 3504 	str.w	r3, [r8, #1284]	; 0x504
    NRF_CCM->INTENCLR = 0xffffffff;
   25fe0:	4d28      	ldr	r5, [pc, #160]	; (26084 <ble_phy_init+0x114>)
   25fe2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   25fe6:	f8c5 a308 	str.w	sl, [r5, #776]	; 0x308
    NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   25fea:	f8c5 6200 	str.w	r6, [r5, #512]	; 0x200
    NRF_CCM->EVENTS_ERROR = 0;
   25fee:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    memset(g_nrf_encrypt_scratchpad, 0, sizeof(g_nrf_encrypt_scratchpad));
   25ff2:	f44f 7286 	mov.w	r2, #268	; 0x10c
   25ff6:	4621      	mov	r1, r4
   25ff8:	4823      	ldr	r0, [pc, #140]	; (26088 <ble_phy_init+0x118>)
   25ffa:	f7e5 fc72 	bl	b8e2 <memset>
    g_ble_phy_data.phy_aar_scratch = 0;
   25ffe:	613c      	str	r4, [r7, #16]
    NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   26000:	4b22      	ldr	r3, [pc, #136]	; (2608c <ble_phy_init+0x11c>)
   26002:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    NRF_AAR->INTENCLR = 0xffffffff;
   26006:	f8c5 a308 	str.w	sl, [r5, #776]	; 0x308
    NRF_AAR->EVENTS_END = 0;
   2600a:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    NRF_AAR->EVENTS_RESOLVED = 0;
   2600e:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    NRF_AAR->EVENTS_NOTRESOLVED = 0;
   26012:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    NRF_AAR->NIRK = 0;
   26016:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    NRF_TIMER0->TASKS_STOP = 1;
   2601a:	4b1d      	ldr	r3, [pc, #116]	; (26090 <ble_phy_init+0x120>)
   2601c:	605e      	str	r6, [r3, #4]
    NRF_TIMER0->TASKS_SHUTDOWN = 1;
   2601e:	611e      	str	r6, [r3, #16]
    NRF_TIMER0->BITMODE = 3;    /* 32-bit timer */
   26020:	f8c3 9508 	str.w	r9, [r3, #1288]	; 0x508
    NRF_TIMER0->MODE = 0;       /* Timer mode */
   26024:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    NRF_TIMER0->PRESCALER = 4;  /* gives us 1 MHz */
   26028:	2204      	movs	r2, #4
   2602a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_PPI->CH[4].EEP = (uint32_t)&(NRF_RADIO->EVENTS_ADDRESS);
   2602e:	f5a3 43dd 	sub.w	r3, r3, #28288	; 0x6e80
   26032:	3b7c      	subs	r3, #124	; 0x7c
   26034:	f8c8 3530 	str.w	r3, [r8, #1328]	; 0x530
    NRF_PPI->CH[4].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[3]);
   26038:	f503 43de 	add.w	r3, r3, #28416	; 0x6f00
   2603c:	3348      	adds	r3, #72	; 0x48
   2603e:	f8c8 3534 	str.w	r3, [r8, #1332]	; 0x534
    NRF_PPI->CH[5].EEP = (uint32_t)&(NRF_TIMER0->EVENTS_COMPARE[3]);
   26042:	f503 7380 	add.w	r3, r3, #256	; 0x100
   26046:	f8c8 3538 	str.w	r3, [r8, #1336]	; 0x538
    NRF_PPI->CH[5].TEP = (uint32_t)&(NRF_RADIO->TASKS_DISABLE);
   2604a:	f5a3 43e2 	sub.w	r3, r3, #28928	; 0x7100
   2604e:	3b3c      	subs	r3, #60	; 0x3c
   26050:	f8c8 353c 	str.w	r3, [r8, #1340]	; 0x53c
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26054:	4b0f      	ldr	r3, [pc, #60]	; (26094 <ble_phy_init+0x124>)
   26056:	f883 4301 	strb.w	r4, [r3, #769]	; 0x301
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2605a:	4a0f      	ldr	r2, [pc, #60]	; (26098 <ble_phy_init+0x128>)
   2605c:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   2605e:	490f      	ldr	r1, [pc, #60]	; (2609c <ble_phy_init+0x12c>)
   26060:	6451      	str	r1, [r2, #68]	; 0x44
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26062:	2202      	movs	r2, #2
   26064:	601a      	str	r2, [r3, #0]
    if (!g_ble_phy_data.phy_stats_initialized) {
   26066:	783b      	ldrb	r3, [r7, #0]
   26068:	b90b      	cbnz	r3, 2606e <ble_phy_init+0xfe>
        g_ble_phy_data.phy_stats_initialized  = 1;
   2606a:	463b      	mov	r3, r7
   2606c:	701e      	strb	r6, [r3, #0]
}
   2606e:	2000      	movs	r0, #0
   26070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26074:	20008da0 	.word	0x20008da0
   26078:	40001000 	.word	0x40001000
   2607c:	00100108 	.word	0x00100108
   26080:	020300ff 	.word	0x020300ff
   26084:	4000f000 	.word	0x4000f000
   26088:	20009104 	.word	0x20009104
   2608c:	20008d5c 	.word	0x20008d5c
   26090:	40008000 	.word	0x40008000
   26094:	e000e100 	.word	0xe000e100
   26098:	e000ed00 	.word	0xe000ed00
   2609c:	00026461 	.word	0x00026461
   260a0:	4001f000 	.word	0x4001f000

000260a4 <ble_phy_encrypt_enable>:
{
   260a4:	b4f0      	push	{r4, r5, r6, r7}
   260a6:	4684      	mov	ip, r0
   260a8:	460f      	mov	r7, r1
   260aa:	4616      	mov	r6, r2
    memcpy(g_nrf_ccm_data.key, key, 16);
   260ac:	4c0f      	ldr	r4, [pc, #60]	; (260ec <ble_phy_encrypt_enable+0x48>)
   260ae:	4625      	mov	r5, r4
   260b0:	6818      	ldr	r0, [r3, #0]
   260b2:	6859      	ldr	r1, [r3, #4]
   260b4:	689a      	ldr	r2, [r3, #8]
   260b6:	68db      	ldr	r3, [r3, #12]
   260b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    g_nrf_ccm_data.pkt_counter = pkt_counter;
   260ba:	f8c4 c010 	str.w	ip, [r4, #16]
   260be:	6167      	str	r7, [r4, #20]
    memcpy(g_nrf_ccm_data.iv, iv, 8);
   260c0:	6832      	ldr	r2, [r6, #0]
   260c2:	6873      	ldr	r3, [r6, #4]
   260c4:	f8c4 2019 	str.w	r2, [r4, #25]
   260c8:	f8c4 301d 	str.w	r3, [r4, #29]
    g_nrf_ccm_data.dir_bit = is_master;
   260cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
   260d0:	7623      	strb	r3, [r4, #24]
    g_ble_phy_data.phy_encrypted = 1;
   260d2:	4b07      	ldr	r3, [pc, #28]	; (260f0 <ble_phy_encrypt_enable+0x4c>)
   260d4:	2201      	movs	r2, #1
   260d6:	71da      	strb	r2, [r3, #7]
    NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Disabled;
   260d8:	4b06      	ldr	r3, [pc, #24]	; (260f4 <ble_phy_encrypt_enable+0x50>)
   260da:	2200      	movs	r2, #0
   260dc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   260e0:	2202      	movs	r2, #2
   260e2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   260e6:	bcf0      	pop	{r4, r5, r6, r7}
   260e8:	4770      	bx	lr
   260ea:	bf00      	nop
   260ec:	200090e0 	.word	0x200090e0
   260f0:	20008da0 	.word	0x20008da0
   260f4:	4000f000 	.word	0x4000f000

000260f8 <ble_phy_encrypt_set_pkt_cntr>:
    g_nrf_ccm_data.pkt_counter = pkt_counter;
   260f8:	4b02      	ldr	r3, [pc, #8]	; (26104 <ble_phy_encrypt_set_pkt_cntr+0xc>)
   260fa:	6118      	str	r0, [r3, #16]
   260fc:	6159      	str	r1, [r3, #20]
    g_nrf_ccm_data.dir_bit = dir;
   260fe:	761a      	strb	r2, [r3, #24]
}
   26100:	4770      	bx	lr
   26102:	bf00      	nop
   26104:	200090e0 	.word	0x200090e0

00026108 <ble_phy_encrypt_disable>:
    NRF_PPI->CHENCLR = PPI_CHEN_CH25_Msk;
   26108:	4b07      	ldr	r3, [pc, #28]	; (26128 <ble_phy_encrypt_disable+0x20>)
   2610a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   2610e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_CCM->TASKS_STOP = 1;
   26112:	4a06      	ldr	r2, [pc, #24]	; (2612c <ble_phy_encrypt_disable+0x24>)
   26114:	2301      	movs	r3, #1
   26116:	6093      	str	r3, [r2, #8]
    NRF_CCM->EVENTS_ERROR = 0;
   26118:	2300      	movs	r3, #0
   2611a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   2611e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    g_ble_phy_data.phy_encrypted = 0;
   26122:	4a03      	ldr	r2, [pc, #12]	; (26130 <ble_phy_encrypt_disable+0x28>)
   26124:	71d3      	strb	r3, [r2, #7]
}
   26126:	4770      	bx	lr
   26128:	4001f000 	.word	0x4001f000
   2612c:	4000f000 	.word	0x4000f000
   26130:	20008da0 	.word	0x20008da0

00026134 <ble_phy_set_txend_cb>:
    g_ble_phy_data.txend_cb = txend_cb;
   26134:	4b01      	ldr	r3, [pc, #4]	; (2613c <ble_phy_set_txend_cb+0x8>)
   26136:	62d8      	str	r0, [r3, #44]	; 0x2c
    g_ble_phy_data.txend_arg = arg;
   26138:	6299      	str	r1, [r3, #40]	; 0x28
}
   2613a:	4770      	bx	lr
   2613c:	20008da0 	.word	0x20008da0

00026140 <ble_phy_txpower_round>:
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos4dBm) {
   26140:	2803      	cmp	r0, #3
   26142:	dc14      	bgt.n	2616e <ble_phy_txpower_round+0x2e>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos3dBm) {
   26144:	2802      	cmp	r0, #2
   26146:	dc14      	bgt.n	26172 <ble_phy_txpower_round+0x32>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_0dBm) {
   26148:	2800      	cmp	r0, #0
   2614a:	db01      	blt.n	26150 <ble_phy_txpower_round+0x10>
        return (int8_t)RADIO_TXPOWER_TXPOWER_0dBm;
   2614c:	2000      	movs	r0, #0
   2614e:	4770      	bx	lr
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg4dBm) {
   26150:	f110 0f04 	cmn.w	r0, #4
   26154:	da0f      	bge.n	26176 <ble_phy_txpower_round+0x36>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg8dBm) {
   26156:	f110 0f08 	cmn.w	r0, #8
   2615a:	da0f      	bge.n	2617c <ble_phy_txpower_round+0x3c>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg12dBm) {
   2615c:	f110 0f0c 	cmn.w	r0, #12
   26160:	da0f      	bge.n	26182 <ble_phy_txpower_round+0x42>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg20dBm) {
   26162:	f110 0f14 	cmn.w	r0, #20
   26166:	db0f      	blt.n	26188 <ble_phy_txpower_round+0x48>
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg20dBm;
   26168:	f06f 0013 	mvn.w	r0, #19
   2616c:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Pos4dBm;
   2616e:	2004      	movs	r0, #4
   26170:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Pos3dBm;
   26172:	2003      	movs	r0, #3
   26174:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg4dBm;
   26176:	f06f 0003 	mvn.w	r0, #3
   2617a:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg8dBm;
   2617c:	f06f 0007 	mvn.w	r0, #7
   26180:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg12dBm;
   26182:	f06f 000b 	mvn.w	r0, #11
   26186:	4770      	bx	lr
    return (int8_t)RADIO_TXPOWER_TXPOWER_Neg40dBm;
   26188:	f06f 0027 	mvn.w	r0, #39	; 0x27
}
   2618c:	4770      	bx	lr
	...

00026190 <ble_phy_txpwr_set>:
{
   26190:	b508      	push	{r3, lr}
    dbm = ble_phy_txpower_round(dbm);
   26192:	f7ff ffd5 	bl	26140 <ble_phy_txpower_round>
    NRF_RADIO->TXPOWER = dbm;
   26196:	4b03      	ldr	r3, [pc, #12]	; (261a4 <ble_phy_txpwr_set+0x14>)
   26198:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    g_ble_phy_data.phy_txpwr_dbm = dbm;
   2619c:	4b02      	ldr	r3, [pc, #8]	; (261a8 <ble_phy_txpwr_set+0x18>)
   2619e:	7058      	strb	r0, [r3, #1]
}
   261a0:	2000      	movs	r0, #0
   261a2:	bd08      	pop	{r3, pc}
   261a4:	40001000 	.word	0x40001000
   261a8:	20008da0 	.word	0x20008da0

000261ac <ble_phy_set_rx_pwr_compensation>:
    g_ble_phy_data.rx_pwr_compensation = compensation;
   261ac:	4b01      	ldr	r3, [pc, #4]	; (261b4 <ble_phy_set_rx_pwr_compensation+0x8>)
   261ae:	7398      	strb	r0, [r3, #14]
}
   261b0:	4770      	bx	lr
   261b2:	bf00      	nop
   261b4:	20008da0 	.word	0x20008da0

000261b8 <ble_phy_setchan>:
{
   261b8:	b538      	push	{r3, r4, r5, lr}
    assert(chan < BLE_PHY_NUM_CHANS);
   261ba:	2827      	cmp	r0, #39	; 0x27
   261bc:	d811      	bhi.n	261e2 <ble_phy_setchan+0x2a>
   261be:	4604      	mov	r4, r0
   261c0:	4615      	mov	r5, r2
    ble_phy_set_access_addr(access_addr);
   261c2:	4608      	mov	r0, r1
   261c4:	f7ff fd6e 	bl	25ca4 <ble_phy_set_access_addr>
    NRF_RADIO->CRCINIT = crcinit;
   261c8:	4b0b      	ldr	r3, [pc, #44]	; (261f8 <ble_phy_setchan+0x40>)
   261ca:	f8c3 553c 	str.w	r5, [r3, #1340]	; 0x53c
    g_ble_phy_data.phy_chan = chan;
   261ce:	4a0b      	ldr	r2, [pc, #44]	; (261fc <ble_phy_setchan+0x44>)
   261d0:	7094      	strb	r4, [r2, #2]
    NRF_RADIO->FREQUENCY = g_ble_phy_chan_freq[chan];
   261d2:	4a0b      	ldr	r2, [pc, #44]	; (26200 <ble_phy_setchan+0x48>)
   261d4:	5d12      	ldrb	r2, [r2, r4]
   261d6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_RADIO->DATAWHITEIV = chan;
   261da:	f8c3 4554 	str.w	r4, [r3, #1364]	; 0x554
}
   261de:	2000      	movs	r0, #0
   261e0:	bd38      	pop	{r3, r4, r5, pc}
    assert(chan < BLE_PHY_NUM_CHANS);
   261e2:	f7e1 ffed 	bl	81c0 <hal_debugger_connected>
   261e6:	b100      	cbz	r0, 261ea <ble_phy_setchan+0x32>
   261e8:	be01      	bkpt	0x0001
   261ea:	2300      	movs	r3, #0
   261ec:	461a      	mov	r2, r3
   261ee:	4619      	mov	r1, r3
   261f0:	4618      	mov	r0, r3
   261f2:	f7e3 fbed 	bl	99d0 <__assert_func>
   261f6:	bf00      	nop
   261f8:	40001000 	.word	0x40001000
   261fc:	20008da0 	.word	0x20008da0
   26200:	00029894 	.word	0x00029894

00026204 <ble_phy_disable>:
 * the usec timer (if used), disables interrupts, disables the RADIO, disables
 * PPI and sets state to idle.
 */
void
ble_phy_disable(void)
{
   26204:	b508      	push	{r3, lr}
    ble_phy_trace_void(BLE_PHY_TRACE_ID_DISABLE);

    ble_phy_stop_usec_timer();
   26206:	f7ff fd65 	bl	25cd4 <ble_phy_stop_usec_timer>
    ble_phy_disable_irq_and_ppi();
   2620a:	f7ff fd71 	bl	25cf0 <ble_phy_disable_irq_and_ppi>
}
   2620e:	bd08      	pop	{r3, pc}

00026210 <ble_phy_rx_start_isr>:
{
   26210:	b538      	push	{r3, r4, r5, lr}
    NRF_RADIO->EVENTS_ADDRESS = 0;
   26212:	4b42      	ldr	r3, [pc, #264]	; (2631c <ble_phy_rx_start_isr+0x10c>)
   26214:	2500      	movs	r5, #0
   26216:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_DISABLED_Msk | RADIO_INTENCLR_ADDRESS_Msk;
   2621a:	2212      	movs	r2, #18
   2621c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk;
   26220:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   26224:	2230      	movs	r2, #48	; 0x30
   26226:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    ble_hdr->rxinfo.flags = ble_ll_state_get();
   2622a:	f7f7 f829 	bl	1d280 <ble_ll_state_get>
   2622e:	4c3c      	ldr	r4, [pc, #240]	; (26320 <ble_phy_rx_start_isr+0x110>)
   26230:	8320      	strh	r0, [r4, #24]
    ble_hdr->rxinfo.channel = g_ble_phy_data.phy_chan;
   26232:	78a3      	ldrb	r3, [r4, #2]
   26234:	76a3      	strb	r3, [r4, #26]
    ble_hdr->rxinfo.handle = 0;
   26236:	76e5      	strb	r5, [r4, #27]
    ble_hdr->rxinfo.phy = ble_phy_get_cur_phy();
   26238:	f7ff fda4 	bl	25d84 <ble_phy_get_cur_phy>
   2623c:	7760      	strb	r0, [r4, #29]
    phy = g_ble_phy_data.phy_cur_phy_mode;
   2623e:	7aa2      	ldrb	r2, [r4, #10]
    ble_hdr->rxinfo.phy_mode = ble_phy_get_cur_rx_phy_mode();
   26240:	77a2      	strb	r2, [r4, #30]
    ble_hdr->beg_cputime = g_ble_phy_data.phy_start_cputime;
   26242:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26244:	6223      	str	r3, [r4, #32]
    usecs = NRF_TIMER0->CC[1];
   26246:	4937      	ldr	r1, [pc, #220]	; (26324 <ble_phy_rx_start_isr+0x114>)
   26248:	f8d1 0544 	ldr.w	r0, [r1, #1348]	; 0x544
                g_ble_phy_t_rxaddrdelay[ble_hdr->rxinfo.phy_mode];
   2624c:	4936      	ldr	r1, [pc, #216]	; (26328 <ble_phy_rx_start_isr+0x118>)
   2624e:	5c8c      	ldrb	r4, [r1, r2]
    pdu_usecs = ble_phy_mode_pdu_start_off(ble_hdr->rxinfo.phy_mode) +
   26250:	3428      	adds	r4, #40	; 0x28
    if (usecs < pdu_usecs) {
   26252:	42a0      	cmp	r0, r4
   26254:	d203      	bcs.n	2625e <ble_phy_rx_start_isr+0x4e>
        g_ble_phy_data.phy_start_cputime--;
   26256:	3b01      	subs	r3, #1
   26258:	4a31      	ldr	r2, [pc, #196]	; (26320 <ble_phy_rx_start_isr+0x110>)
   2625a:	6313      	str	r3, [r2, #48]	; 0x30
        usecs += 30;
   2625c:	301e      	adds	r0, #30
    usecs -= pdu_usecs;
   2625e:	1b04      	subs	r4, r0, r4
    ticks = os_cputime_usecs_to_ticks(usecs);
   26260:	4620      	mov	r0, r4
   26262:	f7f5 fd91 	bl	1bd88 <os_cputime_usecs_to_ticks>
   26266:	4605      	mov	r5, r0
    usecs -= os_cputime_ticks_to_usecs(ticks);
   26268:	f7f5 fd96 	bl	1bd98 <os_cputime_ticks_to_usecs>
   2626c:	1a20      	subs	r0, r4, r0
    if (usecs == 31) {
   2626e:	281f      	cmp	r0, #31
   26270:	d015      	beq.n	2629e <ble_phy_rx_start_isr+0x8e>
    ble_hdr->beg_cputime += ticks;
   26272:	4b2b      	ldr	r3, [pc, #172]	; (26320 <ble_phy_rx_start_isr+0x110>)
   26274:	6a1a      	ldr	r2, [r3, #32]
   26276:	442a      	add	r2, r5
   26278:	621a      	str	r2, [r3, #32]
    ble_hdr->rem_usecs = usecs;
   2627a:	6258      	str	r0, [r3, #36]	; 0x24
        state = NRF_RADIO->STATE;
   2627c:	4b27      	ldr	r3, [pc, #156]	; (2631c <ble_phy_rx_start_isr+0x10c>)
   2627e:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
        if (NRF_RADIO->EVENTS_BCMATCH != 0) {
   26282:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   26286:	b96b      	cbnz	r3, 262a4 <ble_phy_rx_start_isr+0x94>
        if (state == RADIO_STATE_STATE_Disabled) {
   26288:	2a00      	cmp	r2, #0
   2628a:	d1f7      	bne.n	2627c <ble_phy_rx_start_isr+0x6c>
            NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   2628c:	4b23      	ldr	r3, [pc, #140]	; (2631c <ble_phy_rx_start_isr+0x10c>)
   2628e:	f243 42ff 	movw	r2, #13567	; 0x34ff
   26292:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            NRF_RADIO->SHORTS = 0;
   26296:	2000      	movs	r0, #0
   26298:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
}
   2629c:	bd38      	pop	{r3, r4, r5, pc}
        ++ticks;
   2629e:	3501      	adds	r5, #1
        usecs = 0;
   262a0:	2000      	movs	r0, #0
   262a2:	e7e6      	b.n	26272 <ble_phy_rx_start_isr+0x62>
    if (g_ble_phy_data.phy_privacy && (dptr[3] & 0x40)) {
   262a4:	4b1e      	ldr	r3, [pc, #120]	; (26320 <ble_phy_rx_start_isr+0x110>)
   262a6:	7a1b      	ldrb	r3, [r3, #8]
   262a8:	b303      	cbz	r3, 262ec <ble_phy_rx_start_isr+0xdc>
   262aa:	4b20      	ldr	r3, [pc, #128]	; (2632c <ble_phy_rx_start_isr+0x11c>)
   262ac:	78db      	ldrb	r3, [r3, #3]
   262ae:	f013 0f40 	tst.w	r3, #64	; 0x40
   262b2:	d01b      	beq.n	262ec <ble_phy_rx_start_isr+0xdc>
        adva_offset = (dptr[3] & 0x0f) == 0x07 ? 2 : 0;
   262b4:	f003 030f 	and.w	r3, r3, #15
   262b8:	2b07      	cmp	r3, #7
   262ba:	d028      	beq.n	2630e <ble_phy_rx_start_isr+0xfe>
   262bc:	2300      	movs	r3, #0
        NRF_AAR->ADDRPTR = (uint32_t)(dptr + 3 + adva_offset);
   262be:	1cd9      	adds	r1, r3, #3
   262c0:	4a1a      	ldr	r2, [pc, #104]	; (2632c <ble_phy_rx_start_isr+0x11c>)
   262c2:	440a      	add	r2, r1
   262c4:	491a      	ldr	r1, [pc, #104]	; (26330 <ble_phy_rx_start_isr+0x120>)
   262c6:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
        NRF_RADIO->EVENTS_BCMATCH = 0;
   262ca:	f5a1 4160 	sub.w	r1, r1, #57344	; 0xe000
   262ce:	2200      	movs	r2, #0
   262d0:	f8c1 2128 	str.w	r2, [r1, #296]	; 0x128
        NRF_PPI->CHENSET = PPI_CHEN_CH23_Msk;
   262d4:	4a17      	ldr	r2, [pc, #92]	; (26334 <ble_phy_rx_start_isr+0x124>)
   262d6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   262da:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
        NRF_RADIO->BCC = (BLE_LL_PDU_HDR_LEN + adva_offset + BLE_DEV_ADDR_LEN) * 8 +
   262de:	3308      	adds	r3, #8
                         g_ble_phy_data.phy_bcc_offset;
   262e0:	4a0f      	ldr	r2, [pc, #60]	; (26320 <ble_phy_rx_start_isr+0x110>)
   262e2:	7b52      	ldrb	r2, [r2, #13]
        NRF_RADIO->BCC = (BLE_LL_PDU_HDR_LEN + adva_offset + BLE_DEV_ADDR_LEN) * 8 +
   262e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   262e8:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
    rc = ble_ll_rx_start(dptr + 3,
   262ec:	4b0c      	ldr	r3, [pc, #48]	; (26320 <ble_phy_rx_start_isr+0x110>)
   262ee:	f103 0218 	add.w	r2, r3, #24
   262f2:	7899      	ldrb	r1, [r3, #2]
   262f4:	4810      	ldr	r0, [pc, #64]	; (26338 <ble_phy_rx_start_isr+0x128>)
   262f6:	f7f6 ff0b 	bl	1d110 <ble_ll_rx_start>
    if (rc >= 0) {
   262fa:	2800      	cmp	r0, #0
   262fc:	db09      	blt.n	26312 <ble_phy_rx_start_isr+0x102>
        g_ble_phy_data.phy_rx_started = 1;
   262fe:	2001      	movs	r0, #1
   26300:	4b07      	ldr	r3, [pc, #28]	; (26320 <ble_phy_rx_start_isr+0x110>)
   26302:	7198      	strb	r0, [r3, #6]
        NRF_RADIO->INTENSET = RADIO_INTENSET_END_Msk;
   26304:	4b05      	ldr	r3, [pc, #20]	; (2631c <ble_phy_rx_start_isr+0x10c>)
   26306:	2208      	movs	r2, #8
   26308:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   2630c:	e7c6      	b.n	2629c <ble_phy_rx_start_isr+0x8c>
        adva_offset = (dptr[3] & 0x0f) == 0x07 ? 2 : 0;
   2630e:	2302      	movs	r3, #2
   26310:	e7d5      	b.n	262be <ble_phy_rx_start_isr+0xae>
        ble_phy_disable();
   26312:	f7ff ff77 	bl	26204 <ble_phy_disable>
    return true;
   26316:	2001      	movs	r0, #1
   26318:	e7c0      	b.n	2629c <ble_phy_rx_start_isr+0x8c>
   2631a:	bf00      	nop
   2631c:	40001000 	.word	0x40001000
   26320:	20008da0 	.word	0x20008da0
   26324:	40008000 	.word	0x40008000
   26328:	000298bc 	.word	0x000298bc
   2632c:	20008ed8 	.word	0x20008ed8
   26330:	4000f000 	.word	0x4000f000
   26334:	4001f000 	.word	0x4001f000
   26338:	20008edb 	.word	0x20008edb

0002633c <ble_phy_rx_end_isr>:
{
   2633c:	b510      	push	{r4, lr}
    NRF_RADIO->EVENTS_END = 0;
   2633e:	4b3f      	ldr	r3, [pc, #252]	; (2643c <ble_phy_rx_end_isr+0x100>)
   26340:	2200      	movs	r2, #0
   26342:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_END_Msk;
   26346:	2208      	movs	r2, #8
   26348:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_PPI->CHENCLR = PPI_CHEN_CH21_Msk;
   2634c:	4a3c      	ldr	r2, [pc, #240]	; (26440 <ble_phy_rx_end_isr+0x104>)
   2634e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   26352:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    assert(NRF_RADIO->EVENTS_RSSIEND != 0);
   26356:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   2635a:	2b00      	cmp	r3, #0
   2635c:	d061      	beq.n	26422 <ble_phy_rx_end_isr+0xe6>
                           g_ble_phy_data.rx_pwr_compensation;
   2635e:	4939      	ldr	r1, [pc, #228]	; (26444 <ble_phy_rx_end_isr+0x108>)
   26360:	7b8b      	ldrb	r3, [r1, #14]
    ble_hdr->rxinfo.rssi = (-1 * NRF_RADIO->RSSISAMPLE) +
   26362:	4a36      	ldr	r2, [pc, #216]	; (2643c <ble_phy_rx_end_isr+0x100>)
   26364:	f8d2 0548 	ldr.w	r0, [r2, #1352]	; 0x548
   26368:	1a1b      	subs	r3, r3, r0
   2636a:	770b      	strb	r3, [r1, #28]
    crcok = NRF_RADIO->EVENTS_CRCOK;
   2636c:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
    if (!crcok) {
   26370:	f013 0fff 	tst.w	r3, #255	; 0xff
   26374:	d021      	beq.n	263ba <ble_phy_rx_end_isr+0x7e>
        ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_CRC_OK;
   26376:	8b0b      	ldrh	r3, [r1, #24]
   26378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2637c:	830b      	strh	r3, [r1, #24]
        if (g_ble_phy_data.phy_encrypted) {
   2637e:	79ca      	ldrb	r2, [r1, #7]
   26380:	b1da      	cbz	r2, 263ba <ble_phy_rx_end_isr+0x7e>
            if ((dptr[1] != 0) && (NRF_CCM->MICSTATUS == 0)) {
   26382:	4a31      	ldr	r2, [pc, #196]	; (26448 <ble_phy_rx_end_isr+0x10c>)
   26384:	7912      	ldrb	r2, [r2, #4]
   26386:	b132      	cbz	r2, 26396 <ble_phy_rx_end_isr+0x5a>
   26388:	4a30      	ldr	r2, [pc, #192]	; (2644c <ble_phy_rx_end_isr+0x110>)
   2638a:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   2638e:	b912      	cbnz	r2, 26396 <ble_phy_rx_end_isr+0x5a>
                ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_MIC_FAILURE;
   26390:	f043 0320 	orr.w	r3, r3, #32
   26394:	830b      	strh	r3, [r1, #24]
            if (NRF_CCM->EVENTS_ERROR) {
   26396:	4b2d      	ldr	r3, [pc, #180]	; (2644c <ble_phy_rx_end_isr+0x110>)
   26398:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   2639c:	b123      	cbz	r3, 263a8 <ble_phy_rx_end_isr+0x6c>
                ble_hdr->rxinfo.flags &= ~BLE_MBUF_HDR_F_CRC_OK;
   2639e:	4a29      	ldr	r2, [pc, #164]	; (26444 <ble_phy_rx_end_isr+0x108>)
   263a0:	8b13      	ldrh	r3, [r2, #24]
   263a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   263a6:	8313      	strh	r3, [r2, #24]
            if (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   263a8:	4b28      	ldr	r3, [pc, #160]	; (2644c <ble_phy_rx_end_isr+0x110>)
   263aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   263ae:	b923      	cbnz	r3, 263ba <ble_phy_rx_end_isr+0x7e>
                ble_hdr->rxinfo.flags &= ~BLE_MBUF_HDR_F_CRC_OK;
   263b0:	4a24      	ldr	r2, [pc, #144]	; (26444 <ble_phy_rx_end_isr+0x108>)
   263b2:	8b13      	ldrh	r3, [r2, #24]
   263b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   263b8:	8313      	strh	r3, [r2, #24]
    tx_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   263ba:	4a25      	ldr	r2, [pc, #148]	; (26450 <ble_phy_rx_end_isr+0x114>)
   263bc:	f8d2 3548 	ldr.w	r3, [r2, #1352]	; 0x548
   263c0:	3396      	adds	r3, #150	; 0x96
    tx_time -= g_ble_phy_t_rxenddelay[ble_hdr->rxinfo.phy_mode];
   263c2:	4920      	ldr	r1, [pc, #128]	; (26444 <ble_phy_rx_end_isr+0x108>)
   263c4:	7f88      	ldrb	r0, [r1, #30]
   263c6:	4c23      	ldr	r4, [pc, #140]	; (26454 <ble_phy_rx_end_isr+0x118>)
   263c8:	5c20      	ldrb	r0, [r4, r0]
   263ca:	1a1b      	subs	r3, r3, r0
    tx_time -= BLE_PHY_T_TXENFAST;
   263cc:	3b28      	subs	r3, #40	; 0x28
    tx_time -= g_ble_phy_t_txdelay[g_ble_phy_data.phy_cur_phy_mode];
   263ce:	7a89      	ldrb	r1, [r1, #10]
   263d0:	4821      	ldr	r0, [pc, #132]	; (26458 <ble_phy_rx_end_isr+0x11c>)
   263d2:	5c41      	ldrb	r1, [r0, r1]
   263d4:	1a5b      	subs	r3, r3, r1
    NRF_TIMER0->CC[0] = tx_time;
   263d6:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   263da:	2300      	movs	r3, #0
   263dc:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    NRF_PPI->CHENSET = PPI_CHEN_CH20_Msk;
   263e0:	4b17      	ldr	r3, [pc, #92]	; (26440 <ble_phy_rx_end_isr+0x104>)
   263e2:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   263e6:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    NRF_TIMER0->TASKS_CAPTURE[3] = 1;
   263ea:	2301      	movs	r3, #1
   263ec:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (NRF_TIMER0->CC[3] > NRF_TIMER0->CC[0]) {
   263ee:	f8d2 154c 	ldr.w	r1, [r2, #1356]	; 0x54c
   263f2:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
   263f6:	4299      	cmp	r1, r3
   263f8:	d907      	bls.n	2640a <ble_phy_rx_end_isr+0xce>
        NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk;
   263fa:	4b11      	ldr	r3, [pc, #68]	; (26440 <ble_phy_rx_end_isr+0x104>)
   263fc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   26400:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        g_ble_phy_data.phy_transition_late = 1;
   26404:	4b0f      	ldr	r3, [pc, #60]	; (26444 <ble_phy_rx_end_isr+0x108>)
   26406:	2201      	movs	r2, #1
   26408:	715a      	strb	r2, [r3, #5]
    dptr[2] = dptr[1];
   2640a:	480f      	ldr	r0, [pc, #60]	; (26448 <ble_phy_rx_end_isr+0x10c>)
   2640c:	7903      	ldrb	r3, [r0, #4]
   2640e:	7143      	strb	r3, [r0, #5]
    dptr[1] = dptr[0];
   26410:	78c3      	ldrb	r3, [r0, #3]
   26412:	f800 3f04 	strb.w	r3, [r0, #4]!
    rc = ble_ll_rx_end(dptr + 1, ble_hdr);
   26416:	4911      	ldr	r1, [pc, #68]	; (2645c <ble_phy_rx_end_isr+0x120>)
   26418:	f7f6 fea0 	bl	1d15c <ble_ll_rx_end>
    if (rc < 0) {
   2641c:	2800      	cmp	r0, #0
   2641e:	db0a      	blt.n	26436 <ble_phy_rx_end_isr+0xfa>
}
   26420:	bd10      	pop	{r4, pc}
    assert(NRF_RADIO->EVENTS_RSSIEND != 0);
   26422:	f7e1 fecd 	bl	81c0 <hal_debugger_connected>
   26426:	b100      	cbz	r0, 2642a <ble_phy_rx_end_isr+0xee>
   26428:	be01      	bkpt	0x0001
   2642a:	2300      	movs	r3, #0
   2642c:	461a      	mov	r2, r3
   2642e:	4619      	mov	r1, r3
   26430:	4618      	mov	r0, r3
   26432:	f7e3 facd 	bl	99d0 <__assert_func>
        ble_phy_disable();
   26436:	f7ff fee5 	bl	26204 <ble_phy_disable>
}
   2643a:	e7f1      	b.n	26420 <ble_phy_rx_end_isr+0xe4>
   2643c:	40001000 	.word	0x40001000
   26440:	4001f000 	.word	0x4001f000
   26444:	20008da0 	.word	0x20008da0
   26448:	20008ed8 	.word	0x20008ed8
   2644c:	4000f000 	.word	0x4000f000
   26450:	40008000 	.word	0x40008000
   26454:	000298c0 	.word	0x000298c0
   26458:	000298c4 	.word	0x000298c4
   2645c:	20008db8 	.word	0x20008db8

00026460 <ble_phy_isr>:
{
   26460:	b510      	push	{r4, lr}
    irq_en = NRF_RADIO->INTENCLR;
   26462:	4b20      	ldr	r3, [pc, #128]	; (264e4 <ble_phy_isr+0x84>)
   26464:	f8d3 4308 	ldr.w	r4, [r3, #776]	; 0x308
    if ((irq_en & RADIO_INTENCLR_ADDRESS_Msk) && NRF_RADIO->EVENTS_ADDRESS) {
   26468:	f014 0f02 	tst.w	r4, #2
   2646c:	d002      	beq.n	26474 <ble_phy_isr+0x14>
   2646e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   26472:	b9db      	cbnz	r3, 264ac <ble_phy_isr+0x4c>
    if ((irq_en & RADIO_INTENCLR_DISABLED_Msk) && NRF_RADIO->EVENTS_DISABLED) {
   26474:	f014 0f10 	tst.w	r4, #16
   26478:	d00a      	beq.n	26490 <ble_phy_isr+0x30>
   2647a:	4b1a      	ldr	r3, [pc, #104]	; (264e4 <ble_phy_isr+0x84>)
   2647c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   26480:	b133      	cbz	r3, 26490 <ble_phy_isr+0x30>
        if (g_ble_phy_data.phy_state == BLE_PHY_STATE_RX) {
   26482:	4b19      	ldr	r3, [pc, #100]	; (264e8 <ble_phy_isr+0x88>)
   26484:	78db      	ldrb	r3, [r3, #3]
   26486:	2b01      	cmp	r3, #1
   26488:	d017      	beq.n	264ba <ble_phy_isr+0x5a>
        } else if (g_ble_phy_data.phy_state == BLE_PHY_STATE_IDLE) {
   2648a:	b1eb      	cbz	r3, 264c8 <ble_phy_isr+0x68>
            ble_phy_tx_end_isr();
   2648c:	f7ff fd04 	bl	25e98 <ble_phy_tx_end_isr>
    if ((irq_en & RADIO_INTENCLR_END_Msk) && NRF_RADIO->EVENTS_END) {
   26490:	f014 0f08 	tst.w	r4, #8
   26494:	d003      	beq.n	2649e <ble_phy_isr+0x3e>
   26496:	4b13      	ldr	r3, [pc, #76]	; (264e4 <ble_phy_isr+0x84>)
   26498:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   2649c:	b9f3      	cbnz	r3, 264dc <ble_phy_isr+0x7c>
    g_ble_phy_data.phy_transition_late = 0;
   2649e:	4b12      	ldr	r3, [pc, #72]	; (264e8 <ble_phy_isr+0x88>)
   264a0:	2200      	movs	r2, #0
   264a2:	715a      	strb	r2, [r3, #5]
    irq_en = NRF_RADIO->SHORTS;
   264a4:	4b0f      	ldr	r3, [pc, #60]	; (264e4 <ble_phy_isr+0x84>)
   264a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
}
   264aa:	bd10      	pop	{r4, pc}
        if (ble_phy_rx_start_isr()) {
   264ac:	f7ff feb0 	bl	26210 <ble_phy_rx_start_isr>
   264b0:	2800      	cmp	r0, #0
   264b2:	d0df      	beq.n	26474 <ble_phy_isr+0x14>
            irq_en &= ~RADIO_INTENCLR_DISABLED_Msk;
   264b4:	f024 0410 	bic.w	r4, r4, #16
   264b8:	e7dc      	b.n	26474 <ble_phy_isr+0x14>
            NRF_RADIO->EVENTS_DISABLED = 0;
   264ba:	2000      	movs	r0, #0
   264bc:	4b09      	ldr	r3, [pc, #36]	; (264e4 <ble_phy_isr+0x84>)
   264be:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
            ble_ll_wfr_timer_exp(NULL);
   264c2:	f7f6 fdd9 	bl	1d078 <ble_ll_wfr_timer_exp>
   264c6:	e7e3      	b.n	26490 <ble_phy_isr+0x30>
            assert(0);
   264c8:	f7e1 fe7a 	bl	81c0 <hal_debugger_connected>
   264cc:	b100      	cbz	r0, 264d0 <ble_phy_isr+0x70>
   264ce:	be01      	bkpt	0x0001
   264d0:	2300      	movs	r3, #0
   264d2:	461a      	mov	r2, r3
   264d4:	4619      	mov	r1, r3
   264d6:	4618      	mov	r0, r3
   264d8:	f7e3 fa7a 	bl	99d0 <__assert_func>
        ble_phy_rx_end_isr();
   264dc:	f7ff ff2e 	bl	2633c <ble_phy_rx_end_isr>
   264e0:	e7dd      	b.n	2649e <ble_phy_isr+0x3e>
   264e2:	bf00      	nop
   264e4:	40001000 	.word	0x40001000
   264e8:	20008da0 	.word	0x20008da0

000264ec <ble_phy_rx>:
{
   264ec:	b508      	push	{r3, lr}
    nrf_wait_disabled();
   264ee:	f7ff faf1 	bl	25ad4 <nrf_wait_disabled>
    if ((NRF_RADIO->STATE != RADIO_STATE_STATE_Disabled) &&
   264f2:	4b16      	ldr	r3, [pc, #88]	; (2654c <ble_phy_rx+0x60>)
   264f4:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
   264f8:	b133      	cbz	r3, 26508 <ble_phy_rx+0x1c>
            ((NRF_RADIO->STATE & 0x07) != RADIO_STATE_STATE_RxIdle)) {
   264fa:	4b14      	ldr	r3, [pc, #80]	; (2654c <ble_phy_rx+0x60>)
   264fc:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
   26500:	f003 0307 	and.w	r3, r3, #7
    if ((NRF_RADIO->STATE != RADIO_STATE_STATE_Disabled) &&
   26504:	2b02      	cmp	r3, #2
   26506:	d113      	bne.n	26530 <ble_phy_rx+0x44>
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   26508:	4b10      	ldr	r3, [pc, #64]	; (2654c <ble_phy_rx+0x60>)
   2650a:	f243 42ff 	movw	r2, #13567	; 0x34ff
   2650e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->EVENTS_END = 0;
   26512:	2200      	movs	r2, #0
   26514:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->EVENTS_DISABLED = 0;
   26518:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ble_phy_rx_xcvr_setup();
   2651c:	f7ff fb42 	bl	25ba4 <ble_phy_rx_xcvr_setup>
    assert(NRF_PPI->CHEN & PPI_CHEN_CH21_Msk);
   26520:	4b0b      	ldr	r3, [pc, #44]	; (26550 <ble_phy_rx+0x64>)
   26522:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   26526:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
   2652a:	d005      	beq.n	26538 <ble_phy_rx+0x4c>
    return 0;
   2652c:	2000      	movs	r0, #0
}
   2652e:	bd08      	pop	{r3, pc}
        ble_phy_disable();
   26530:	f7ff fe68 	bl	26204 <ble_phy_disable>
        return BLE_PHY_ERR_RADIO_STATE;
   26534:	2001      	movs	r0, #1
   26536:	e7fa      	b.n	2652e <ble_phy_rx+0x42>
    assert(NRF_PPI->CHEN & PPI_CHEN_CH21_Msk);
   26538:	f7e1 fe42 	bl	81c0 <hal_debugger_connected>
   2653c:	b100      	cbz	r0, 26540 <ble_phy_rx+0x54>
   2653e:	be01      	bkpt	0x0001
   26540:	2300      	movs	r3, #0
   26542:	461a      	mov	r2, r3
   26544:	4619      	mov	r1, r3
   26546:	4618      	mov	r0, r3
   26548:	f7e3 fa42 	bl	99d0 <__assert_func>
   2654c:	40001000 	.word	0x40001000
   26550:	4001f000 	.word	0x4001f000

00026554 <ble_phy_rx_set_start_time>:
{
   26554:	b510      	push	{r4, lr}
    NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk;
   26556:	4b0e      	ldr	r3, [pc, #56]	; (26590 <ble_phy_rx_set_start_time+0x3c>)
   26558:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   2655c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (ble_phy_set_start_time(cputime, rem_usecs, false) != 0) {
   26560:	2200      	movs	r2, #0
   26562:	f7ff fac7 	bl	25af4 <ble_phy_set_start_time>
   26566:	b960      	cbnz	r0, 26582 <ble_phy_rx_set_start_time+0x2e>
    bool late = false;
   26568:	2400      	movs	r4, #0
    NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   2656a:	4b09      	ldr	r3, [pc, #36]	; (26590 <ble_phy_rx_set_start_time+0x3c>)
   2656c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   26570:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    rc = ble_phy_rx();
   26574:	f7ff ffba 	bl	264ec <ble_phy_rx>
    if (!rc && late) {
   26578:	4603      	mov	r3, r0
   2657a:	b900      	cbnz	r0, 2657e <ble_phy_rx_set_start_time+0x2a>
   2657c:	b92c      	cbnz	r4, 2658a <ble_phy_rx_set_start_time+0x36>
}
   2657e:	4618      	mov	r0, r3
   26580:	bd10      	pop	{r4, pc}
        ble_phy_set_start_now();
   26582:	f7ff fbd3 	bl	25d2c <ble_phy_set_start_now>
        late = true;
   26586:	2401      	movs	r4, #1
   26588:	e7ef      	b.n	2656a <ble_phy_rx_set_start_time+0x16>
        rc = BLE_PHY_ERR_RX_LATE;
   2658a:	2306      	movs	r3, #6
    return rc;
   2658c:	e7f7      	b.n	2657e <ble_phy_rx_set_start_time+0x2a>
   2658e:	bf00      	nop
   26590:	4001f000 	.word	0x4001f000

00026594 <ble_phy_restart_rx>:
{
   26594:	b508      	push	{r3, lr}
    ble_phy_stop_usec_timer();
   26596:	f7ff fb9d 	bl	25cd4 <ble_phy_stop_usec_timer>
    ble_phy_disable_irq_and_ppi();
   2659a:	f7ff fba9 	bl	25cf0 <ble_phy_disable_irq_and_ppi>
    ble_phy_set_start_now();
   2659e:	f7ff fbc5 	bl	25d2c <ble_phy_set_start_now>
    NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   265a2:	4b04      	ldr	r3, [pc, #16]	; (265b4 <ble_phy_restart_rx+0x20>)
   265a4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   265a8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ble_phy_rx();
   265ac:	f7ff ff9e 	bl	264ec <ble_phy_rx>
}
   265b0:	bd08      	pop	{r3, pc}
   265b2:	bf00      	nop
   265b4:	4001f000 	.word	0x4001f000

000265b8 <ble_phy_tx_set_start_time>:
{
   265b8:	b508      	push	{r3, lr}
    NRF_PPI->CHENCLR = PPI_CHEN_CH21_Msk;
   265ba:	4b0a      	ldr	r3, [pc, #40]	; (265e4 <ble_phy_tx_set_start_time+0x2c>)
   265bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   265c0:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (ble_phy_set_start_time(cputime, rem_usecs, true) != 0) {
   265c4:	2201      	movs	r2, #1
   265c6:	f7ff fa95 	bl	25af4 <ble_phy_set_start_time>
   265ca:	b938      	cbnz	r0, 265dc <ble_phy_tx_set_start_time+0x24>
   265cc:	4603      	mov	r3, r0
        NRF_PPI->CHENSET = PPI_CHEN_CH20_Msk;
   265ce:	4a05      	ldr	r2, [pc, #20]	; (265e4 <ble_phy_tx_set_start_time+0x2c>)
   265d0:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   265d4:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   265d8:	4618      	mov	r0, r3
   265da:	bd08      	pop	{r3, pc}
        ble_phy_disable();
   265dc:	f7ff fe12 	bl	26204 <ble_phy_disable>
        rc = BLE_PHY_ERR_TX_LATE;
   265e0:	2305      	movs	r3, #5
   265e2:	e7f9      	b.n	265d8 <ble_phy_tx_set_start_time+0x20>
   265e4:	4001f000 	.word	0x4001f000

000265e8 <ble_phy_tx>:
{
   265e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   265ec:	b082      	sub	sp, #8
    if (g_ble_phy_data.phy_transition_late) {
   265ee:	4b34      	ldr	r3, [pc, #208]	; (266c0 <ble_phy_tx+0xd8>)
   265f0:	795b      	ldrb	r3, [r3, #5]
   265f2:	2b00      	cmp	r3, #0
   265f4:	d155      	bne.n	266a2 <ble_phy_tx+0xba>
   265f6:	4607      	mov	r7, r0
   265f8:	4688      	mov	r8, r1
   265fa:	4616      	mov	r6, r2
    nrf_wait_disabled();
   265fc:	f7ff fa6a 	bl	25ad4 <nrf_wait_disabled>
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk | PPI_CHEN_CH23_Msk |
   26600:	4b30      	ldr	r3, [pc, #192]	; (266c4 <ble_phy_tx+0xdc>)
   26602:	4a31      	ldr	r2, [pc, #196]	; (266c8 <ble_phy_tx+0xe0>)
   26604:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (g_ble_phy_data.phy_encrypted) {
   26608:	4b2d      	ldr	r3, [pc, #180]	; (266c0 <ble_phy_tx+0xd8>)
   2660a:	79db      	ldrb	r3, [r3, #7]
   2660c:	2b00      	cmp	r3, #0
   2660e:	d04c      	beq.n	266aa <ble_phy_tx+0xc2>
        NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   26610:	4d2e      	ldr	r5, [pc, #184]	; (266cc <ble_phy_tx+0xe4>)
   26612:	2301      	movs	r3, #1
   26614:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
        NRF_CCM->INPTR = (uint32_t)dptr;
   26618:	4c2d      	ldr	r4, [pc, #180]	; (266d0 <ble_phy_tx+0xe8>)
   2661a:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
        NRF_CCM->OUTPTR = (uint32_t)pktptr;
   2661e:	4b2d      	ldr	r3, [pc, #180]	; (266d4 <ble_phy_tx+0xec>)
   26620:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
        NRF_CCM->SCRATCHPTR = (uint32_t)&g_nrf_encrypt_scratchpad[0];
   26624:	4b2c      	ldr	r3, [pc, #176]	; (266d8 <ble_phy_tx+0xf0>)
   26626:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
        NRF_CCM->EVENTS_ERROR = 0;
   2662a:	2300      	movs	r3, #0
   2662c:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | ble_phy_get_ccm_datarate();
   26630:	f7ff fab6 	bl	25ba0 <ble_phy_get_ccm_datarate>
   26634:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   26638:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
        NRF_CCM->CNFPTR = (uint32_t)&g_nrf_ccm_data;
   2663c:	4b27      	ldr	r3, [pc, #156]	; (266dc <ble_phy_tx+0xf4>)
   2663e:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    payload_len = pducb(&dptr[3], pducb_arg, &hdr_byte);
   26642:	f10d 0207 	add.w	r2, sp, #7
   26646:	4641      	mov	r1, r8
   26648:	1ce0      	adds	r0, r4, #3
   2664a:	47b8      	blx	r7
    dptr[0] = hdr_byte;
   2664c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26650:	7023      	strb	r3, [r4, #0]
    dptr[1] = payload_len;
   26652:	7060      	strb	r0, [r4, #1]
    dptr[2] = 0;
   26654:	2300      	movs	r3, #0
   26656:	70a3      	strb	r3, [r4, #2]
    if (g_ble_phy_data.phy_encrypted) {
   26658:	4b19      	ldr	r3, [pc, #100]	; (266c0 <ble_phy_tx+0xd8>)
   2665a:	79db      	ldrb	r3, [r3, #7]
   2665c:	b113      	cbz	r3, 26664 <ble_phy_tx+0x7c>
        NRF_CCM->TASKS_KSGEN = 1;
   2665e:	4b1b      	ldr	r3, [pc, #108]	; (266cc <ble_phy_tx+0xe4>)
   26660:	2201      	movs	r2, #1
   26662:	601a      	str	r2, [r3, #0]
    NRF_RADIO->PACKETPTR = (uint32_t)pktptr;
   26664:	4b1e      	ldr	r3, [pc, #120]	; (266e0 <ble_phy_tx+0xf8>)
   26666:	4a1b      	ldr	r2, [pc, #108]	; (266d4 <ble_phy_tx+0xec>)
   26668:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRF_RADIO->EVENTS_READY = 0;
   2666c:	2200      	movs	r2, #0
   2666e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    NRF_RADIO->EVENTS_END = 0;
   26672:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->EVENTS_DISABLED = 0;
   26676:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    NRF_RADIO->SHORTS = shortcuts;
   2667a:	2203      	movs	r2, #3
   2667c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
   26680:	2210      	movs	r2, #16
   26682:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    g_ble_phy_data.phy_transition = end_trans;
   26686:	4a0e      	ldr	r2, [pc, #56]	; (266c0 <ble_phy_tx+0xd8>)
   26688:	7116      	strb	r6, [r2, #4]
    g_ble_phy_data.phy_tx_pyld_len = payload_len;
   2668a:	7250      	strb	r0, [r2, #9]
    state = NRF_RADIO->STATE;
   2668c:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    if (state != RADIO_STATE_STATE_Tx) {
   26690:	2b0b      	cmp	r3, #11
   26692:	d010      	beq.n	266b6 <ble_phy_tx+0xce>
        g_ble_phy_data.phy_state = BLE_PHY_STATE_TX;
   26694:	4613      	mov	r3, r2
   26696:	2202      	movs	r2, #2
   26698:	70da      	strb	r2, [r3, #3]
        rc = BLE_ERR_SUCCESS;
   2669a:	2000      	movs	r0, #0
}
   2669c:	b002      	add	sp, #8
   2669e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_phy_disable();
   266a2:	f7ff fdaf 	bl	26204 <ble_phy_disable>
        return BLE_PHY_ERR_TX_LATE;
   266a6:	2005      	movs	r0, #5
   266a8:	e7f8      	b.n	2669c <ble_phy_tx+0xb4>
        NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   266aa:	4a0e      	ldr	r2, [pc, #56]	; (266e4 <ble_phy_tx+0xfc>)
   266ac:	4b07      	ldr	r3, [pc, #28]	; (266cc <ble_phy_tx+0xe4>)
   266ae:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        dptr = (uint8_t *)&g_ble_phy_tx_buf[0];
   266b2:	4c08      	ldr	r4, [pc, #32]	; (266d4 <ble_phy_tx+0xec>)
   266b4:	e7c5      	b.n	26642 <ble_phy_tx+0x5a>
        ble_phy_disable();
   266b6:	f7ff fda5 	bl	26204 <ble_phy_disable>
        rc = BLE_PHY_ERR_RADIO_STATE;
   266ba:	2001      	movs	r0, #1
   266bc:	e7ee      	b.n	2669c <ble_phy_tx+0xb4>
   266be:	bf00      	nop
   266c0:	20008da0 	.word	0x20008da0
   266c4:	4001f000 	.word	0x4001f000
   266c8:	02800030 	.word	0x02800030
   266cc:	4000f000 	.word	0x4000f000
   266d0:	20008dd4 	.word	0x20008dd4
   266d4:	20008fdc 	.word	0x20008fdc
   266d8:	20009104 	.word	0x20009104
   266dc:	200090e0 	.word	0x200090e0
   266e0:	40001000 	.word	0x40001000
   266e4:	20008d5c 	.word	0x20008d5c

000266e8 <ble_phy_access_addr_get>:

/* Gets the current access address */
uint32_t ble_phy_access_addr_get(void)
{
    return g_ble_phy_data.phy_access_address;
}
   266e8:	4b01      	ldr	r3, [pc, #4]	; (266f0 <ble_phy_access_addr_get+0x8>)
   266ea:	6958      	ldr	r0, [r3, #20]
   266ec:	4770      	bx	lr
   266ee:	bf00      	nop
   266f0:	20008da0 	.word	0x20008da0

000266f4 <ble_phy_rx_started>:
 */
int
ble_phy_rx_started(void)
{
    return g_ble_phy_data.phy_rx_started;
}
   266f4:	4b01      	ldr	r3, [pc, #4]	; (266fc <ble_phy_rx_started+0x8>)
   266f6:	7998      	ldrb	r0, [r3, #6]
   266f8:	4770      	bx	lr
   266fa:	bf00      	nop
   266fc:	20008da0 	.word	0x20008da0

00026700 <ble_phy_xcvr_state_get>:
 */
uint8_t
ble_phy_xcvr_state_get(void)
{
    uint32_t state;
    state = NRF_RADIO->STATE;
   26700:	4b02      	ldr	r3, [pc, #8]	; (2670c <ble_phy_xcvr_state_get+0xc>)
   26702:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
    return (uint8_t)state;
}
   26706:	b2c0      	uxtb	r0, r0
   26708:	4770      	bx	lr
   2670a:	bf00      	nop
   2670c:	40001000 	.word	0x40001000

00026710 <ble_phy_max_data_pdu_pyld>:
 */
uint8_t
ble_phy_max_data_pdu_pyld(void)
{
    return BLE_LL_DATA_PDU_MAX_PYLD;
}
   26710:	20fb      	movs	r0, #251	; 0xfb
   26712:	4770      	bx	lr

00026714 <ble_phy_resolv_list_enable>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
void
ble_phy_resolv_list_enable(void)
{
    NRF_AAR->NIRK = (uint32_t)g_nrf_num_irks;
   26714:	4b04      	ldr	r3, [pc, #16]	; (26728 <ble_phy_resolv_list_enable+0x14>)
   26716:	781a      	ldrb	r2, [r3, #0]
   26718:	4b04      	ldr	r3, [pc, #16]	; (2672c <ble_phy_resolv_list_enable+0x18>)
   2671a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    g_ble_phy_data.phy_privacy = 1;
   2671e:	4b04      	ldr	r3, [pc, #16]	; (26730 <ble_phy_resolv_list_enable+0x1c>)
   26720:	2201      	movs	r2, #1
   26722:	721a      	strb	r2, [r3, #8]
}
   26724:	4770      	bx	lr
   26726:	bf00      	nop
   26728:	20008d9c 	.word	0x20008d9c
   2672c:	4000f000 	.word	0x4000f000
   26730:	20008da0 	.word	0x20008da0

00026734 <ble_phy_resolv_list_disable>:

void
ble_phy_resolv_list_disable(void)
{
    g_ble_phy_data.phy_privacy = 0;
   26734:	4b01      	ldr	r3, [pc, #4]	; (2673c <ble_phy_resolv_list_disable+0x8>)
   26736:	2200      	movs	r2, #0
   26738:	721a      	strb	r2, [r3, #8]
}
   2673a:	4770      	bx	lr
   2673c:	20008da0 	.word	0x20008da0

00026740 <ble_phy_rfclk_enable>:
}
#endif

void
ble_phy_rfclk_enable(void)
{
   26740:	b508      	push	{r3, lr}
#if MYNEWT
    nrf52_clock_hfxo_request();
   26742:	f001 ff0f 	bl	28564 <nrf52_clock_hfxo_request>
#else
    NRF_CLOCK->TASKS_HFCLKSTART = 1;
#endif
}
   26746:	bd08      	pop	{r3, pc}

00026748 <ble_phy_rfclk_disable>:

void
ble_phy_rfclk_disable(void)
{
   26748:	b508      	push	{r3, lr}
#if MYNEWT
    nrf52_clock_hfxo_release();
   2674a:	f001 ff2d 	bl	285a8 <nrf52_clock_hfxo_release>
#else
    NRF_CLOCK->TASKS_HFCLKSTOP = 1;
#endif
}
   2674e:	bd08      	pop	{r3, pc}

00026750 <ble_svc_ans_new_alert_notify>:
 *
 * @return 0 on success, non-zero error code otherwise.
 */
static int
ble_svc_ans_new_alert_notify(uint8_t cat_id, const char * info_str)
{
   26750:	b570      	push	{r4, r5, r6, lr}
    int info_str_len;

    /* Clear notification to remove old infomation that may persist */
    memset(&ble_svc_ans_new_alert_val, '\0',
   26752:	4a19      	ldr	r2, [pc, #100]	; (267b8 <ble_svc_ans_new_alert_notify+0x68>)
   26754:	2300      	movs	r3, #0
   26756:	f8c2 3002 	str.w	r3, [r2, #2]
   2675a:	f8c2 3006 	str.w	r3, [r2, #6]
   2675e:	f8c2 300a 	str.w	r3, [r2, #10]
   26762:	f8c2 300e 	str.w	r3, [r2, #14]
   26766:	8253      	strh	r3, [r2, #18]
           BLE_SVC_ANS_NEW_ALERT_MAX_LEN);

    /* Set ID and count values */
    ble_svc_ans_new_alert_val[0] = cat_id;
   26768:	7010      	strb	r0, [r2, #0]
    ble_svc_ans_new_alert_val[1] = ble_svc_ans_new_alert_cnt[cat_id];
   2676a:	4b14      	ldr	r3, [pc, #80]	; (267bc <ble_svc_ans_new_alert_notify+0x6c>)
   2676c:	5c1b      	ldrb	r3, [r3, r0]
   2676e:	7053      	strb	r3, [r2, #1]

    if (info_str) {
   26770:	b151      	cbz	r1, 26788 <ble_svc_ans_new_alert_notify+0x38>
   26772:	460c      	mov	r4, r1
        info_str_len = strlen(info_str);
   26774:	4608      	mov	r0, r1
   26776:	f7e5 f8e9 	bl	b94c <strlen>
        if (info_str_len > BLE_SVC_ANS_INFO_STR_MAX_LEN) {
   2677a:	2812      	cmp	r0, #18
   2677c:	dc0b      	bgt.n	26796 <ble_svc_ans_new_alert_notify+0x46>
            /* If info_str is longer than the max string length only
             * write up to the maximum length */
            memcpy(&ble_svc_ans_new_alert_val[2], info_str,
                   BLE_SVC_ANS_INFO_STR_MAX_LEN);
        } else {
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
   2677e:	4602      	mov	r2, r0
   26780:	4621      	mov	r1, r4
   26782:	480f      	ldr	r0, [pc, #60]	; (267c0 <ble_svc_ans_new_alert_notify+0x70>)
   26784:	f7e5 f884 	bl	b890 <memcpy>
        }
    }
    return ble_gattc_notify(ble_svc_ans_conn_handle,
   26788:	4b0e      	ldr	r3, [pc, #56]	; (267c4 <ble_svc_ans_new_alert_notify+0x74>)
   2678a:	8819      	ldrh	r1, [r3, #0]
   2678c:	4b0e      	ldr	r3, [pc, #56]	; (267c8 <ble_svc_ans_new_alert_notify+0x78>)
   2678e:	8818      	ldrh	r0, [r3, #0]
   26790:	f7e8 f8b2 	bl	e8f8 <ble_gattc_notify>
                            ble_svc_ans_new_alert_val_handle);
}
   26794:	bd70      	pop	{r4, r5, r6, pc}
            memcpy(&ble_svc_ans_new_alert_val[2], info_str,
   26796:	4a08      	ldr	r2, [pc, #32]	; (267b8 <ble_svc_ans_new_alert_notify+0x68>)
   26798:	1c93      	adds	r3, r2, #2
   2679a:	6826      	ldr	r6, [r4, #0]
   2679c:	6865      	ldr	r5, [r4, #4]
   2679e:	68a0      	ldr	r0, [r4, #8]
   267a0:	68e1      	ldr	r1, [r4, #12]
   267a2:	f8c2 6002 	str.w	r6, [r2, #2]
   267a6:	f8c2 5006 	str.w	r5, [r2, #6]
   267aa:	f8c2 000a 	str.w	r0, [r2, #10]
   267ae:	f8c2 100e 	str.w	r1, [r2, #14]
   267b2:	8a22      	ldrh	r2, [r4, #16]
   267b4:	821a      	strh	r2, [r3, #16]
   267b6:	e7e7      	b.n	26788 <ble_svc_ans_new_alert_notify+0x38>
   267b8:	20009220 	.word	0x20009220
   267bc:	20009218 	.word	0x20009218
   267c0:	20009222 	.word	0x20009222
   267c4:	20009234 	.word	0x20009234
   267c8:	20009212 	.word	0x20009212

000267cc <ble_svc_ans_unr_alert_notify>:
 *
 * @return 0 on success, non-zer0 error code otherwise.
 */
static int
ble_svc_ans_unr_alert_notify(uint8_t cat_id)
{
   267cc:	b508      	push	{r3, lr}
    ble_svc_ans_unr_alert_stat[0] = cat_id;
   267ce:	4b06      	ldr	r3, [pc, #24]	; (267e8 <ble_svc_ans_unr_alert_notify+0x1c>)
   267d0:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_unr_alert_stat[1] = ble_svc_ans_unr_alert_cnt[cat_id];
   267d2:	4a06      	ldr	r2, [pc, #24]	; (267ec <ble_svc_ans_unr_alert_notify+0x20>)
   267d4:	5c12      	ldrb	r2, [r2, r0]
   267d6:	705a      	strb	r2, [r3, #1]
    return ble_gattc_notify(ble_svc_ans_conn_handle,
   267d8:	4b05      	ldr	r3, [pc, #20]	; (267f0 <ble_svc_ans_unr_alert_notify+0x24>)
   267da:	8819      	ldrh	r1, [r3, #0]
   267dc:	4b05      	ldr	r3, [pc, #20]	; (267f4 <ble_svc_ans_unr_alert_notify+0x28>)
   267de:	8818      	ldrh	r0, [r3, #0]
   267e0:	f7e8 f88a 	bl	e8f8 <ble_gattc_notify>
                            ble_svc_ans_unr_alert_val_handle);
}
   267e4:	bd08      	pop	{r3, pc}
   267e6:	bf00      	nop
   267e8:	20009244 	.word	0x20009244
   267ec:	2000923c 	.word	0x2000923c
   267f0:	20009246 	.word	0x20009246
   267f4:	20009212 	.word	0x20009212

000267f8 <ble_svc_ans_chr_write>:
 */
static int
ble_svc_ans_chr_write(struct os_mbuf *om, uint16_t min_len,
                      uint16_t max_len, void *dst,
                      uint16_t *len)
{
   267f8:	b510      	push	{r4, lr}
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
   267fa:	8a04      	ldrh	r4, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
   267fc:	428c      	cmp	r4, r1
   267fe:	d309      	bcc.n	26814 <ble_svc_ans_chr_write+0x1c>
   26800:	4294      	cmp	r4, r2
   26802:	d809      	bhi.n	26818 <ble_svc_ans_chr_write+0x20>
   26804:	4619      	mov	r1, r3
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
   26806:	9b02      	ldr	r3, [sp, #8]
   26808:	f7ea ff2e 	bl	11668 <ble_hs_mbuf_to_flat>
    if (rc != 0) {
   2680c:	4603      	mov	r3, r0
   2680e:	b120      	cbz	r0, 2681a <ble_svc_ans_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
   26810:	230e      	movs	r3, #14
   26812:	e002      	b.n	2681a <ble_svc_ans_chr_write+0x22>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   26814:	230d      	movs	r3, #13
   26816:	e000      	b.n	2681a <ble_svc_ans_chr_write+0x22>
   26818:	230d      	movs	r3, #13
    }

    return 0;
}
   2681a:	4618      	mov	r0, r3
   2681c:	bd10      	pop	{r4, pc}
	...

00026820 <ble_svc_ans_access>:
{
   26820:	b530      	push	{r4, r5, lr}
   26822:	b083      	sub	sp, #12
   26824:	4614      	mov	r4, r2
    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   26826:	6893      	ldr	r3, [r2, #8]
   26828:	6818      	ldr	r0, [r3, #0]
   2682a:	f7ed feaf 	bl	1458c <ble_uuid_u16>
    assert(uuid16 != 0);
   2682e:	b150      	cbz	r0, 26846 <ble_svc_ans_access+0x26>
    switch (uuid16) {
   26830:	f5a0 5029 	sub.w	r0, r0, #10816	; 0x2a40
   26834:	3804      	subs	r0, #4
   26836:	2804      	cmp	r0, #4
   26838:	f200 80db 	bhi.w	269f2 <ble_svc_ans_access+0x1d2>
   2683c:	e8df f000 	tbb	[pc, r0]
   26840:	0d255d74 	.word	0x0d255d74
   26844:	47          	.byte	0x47
   26845:	00          	.byte	0x00
    assert(uuid16 != 0);
   26846:	f7e1 fcbb 	bl	81c0 <hal_debugger_connected>
   2684a:	b100      	cbz	r0, 2684e <ble_svc_ans_access+0x2e>
   2684c:	be01      	bkpt	0x0001
   2684e:	2300      	movs	r3, #0
   26850:	461a      	mov	r2, r3
   26852:	4619      	mov	r1, r3
   26854:	4618      	mov	r0, r3
   26856:	f7e3 f8bb 	bl	99d0 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2685a:	7823      	ldrb	r3, [r4, #0]
   2685c:	b94b      	cbnz	r3, 26872 <ble_svc_ans_access+0x52>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_cat,
   2685e:	2201      	movs	r2, #1
   26860:	496b      	ldr	r1, [pc, #428]	; (26a10 <ble_svc_ans_access+0x1f0>)
   26862:	6860      	ldr	r0, [r4, #4]
   26864:	f7e3 fd40 	bl	a2e8 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   26868:	4604      	mov	r4, r0
   2686a:	b960      	cbnz	r0, 26886 <ble_svc_ans_access+0x66>
}
   2686c:	4620      	mov	r0, r4
   2686e:	b003      	add	sp, #12
   26870:	bd30      	pop	{r4, r5, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   26872:	f7e1 fca5 	bl	81c0 <hal_debugger_connected>
   26876:	b100      	cbz	r0, 2687a <ble_svc_ans_access+0x5a>
   26878:	be01      	bkpt	0x0001
   2687a:	2300      	movs	r3, #0
   2687c:	461a      	mov	r2, r3
   2687e:	4619      	mov	r1, r3
   26880:	4618      	mov	r0, r3
   26882:	f7e3 f8a5 	bl	99d0 <__assert_func>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   26886:	2411      	movs	r4, #17
   26888:	e7f0      	b.n	2686c <ble_svc_ans_access+0x4c>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   2688a:	7823      	ldrb	r3, [r4, #0]
   2688c:	2b01      	cmp	r3, #1
   2688e:	d00a      	beq.n	268a6 <ble_svc_ans_access+0x86>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   26890:	b99b      	cbnz	r3, 268ba <ble_svc_ans_access+0x9a>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_val,
   26892:	2214      	movs	r2, #20
   26894:	495f      	ldr	r1, [pc, #380]	; (26a14 <ble_svc_ans_access+0x1f4>)
   26896:	6860      	ldr	r0, [r4, #4]
   26898:	f7e3 fd26 	bl	a2e8 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2689c:	4604      	mov	r4, r0
   2689e:	2800      	cmp	r0, #0
   268a0:	d0e4      	beq.n	2686c <ble_svc_ans_access+0x4c>
   268a2:	2411      	movs	r4, #17
   268a4:	e7e2      	b.n	2686c <ble_svc_ans_access+0x4c>
            rc = ble_svc_ans_chr_write(ctxt->om, 0,
   268a6:	6860      	ldr	r0, [r4, #4]
   268a8:	4b5b      	ldr	r3, [pc, #364]	; (26a18 <ble_svc_ans_access+0x1f8>)
   268aa:	9300      	str	r3, [sp, #0]
   268ac:	4b59      	ldr	r3, [pc, #356]	; (26a14 <ble_svc_ans_access+0x1f4>)
   268ae:	2214      	movs	r2, #20
   268b0:	2100      	movs	r1, #0
   268b2:	f7ff ffa1 	bl	267f8 <ble_svc_ans_chr_write>
   268b6:	4604      	mov	r4, r0
            return rc;
   268b8:	e7d8      	b.n	2686c <ble_svc_ans_access+0x4c>
        assert(0);
   268ba:	f7e1 fc81 	bl	81c0 <hal_debugger_connected>
   268be:	b100      	cbz	r0, 268c2 <ble_svc_ans_access+0xa2>
   268c0:	be01      	bkpt	0x0001
   268c2:	2300      	movs	r3, #0
   268c4:	461a      	mov	r2, r3
   268c6:	4619      	mov	r1, r3
   268c8:	4618      	mov	r0, r3
   268ca:	f7e3 f881 	bl	99d0 <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   268ce:	7823      	ldrb	r3, [r4, #0]
   268d0:	b94b      	cbnz	r3, 268e6 <ble_svc_ans_access+0xc6>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_cat,
   268d2:	2201      	movs	r2, #1
   268d4:	4951      	ldr	r1, [pc, #324]	; (26a1c <ble_svc_ans_access+0x1fc>)
   268d6:	6860      	ldr	r0, [r4, #4]
   268d8:	f7e3 fd06 	bl	a2e8 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   268dc:	4604      	mov	r4, r0
   268de:	2800      	cmp	r0, #0
   268e0:	d0c4      	beq.n	2686c <ble_svc_ans_access+0x4c>
   268e2:	2411      	movs	r4, #17
   268e4:	e7c2      	b.n	2686c <ble_svc_ans_access+0x4c>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   268e6:	f7e1 fc6b 	bl	81c0 <hal_debugger_connected>
   268ea:	b100      	cbz	r0, 268ee <ble_svc_ans_access+0xce>
   268ec:	be01      	bkpt	0x0001
   268ee:	2300      	movs	r3, #0
   268f0:	461a      	mov	r2, r3
   268f2:	4619      	mov	r1, r3
   268f4:	4618      	mov	r0, r3
   268f6:	f7e3 f86b 	bl	99d0 <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   268fa:	7823      	ldrb	r3, [r4, #0]
   268fc:	2b01      	cmp	r3, #1
   268fe:	d009      	beq.n	26914 <ble_svc_ans_access+0xf4>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_stat,
   26900:	2202      	movs	r2, #2
   26902:	4947      	ldr	r1, [pc, #284]	; (26a20 <ble_svc_ans_access+0x200>)
   26904:	6860      	ldr	r0, [r4, #4]
   26906:	f7e3 fcef 	bl	a2e8 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2690a:	4604      	mov	r4, r0
   2690c:	2800      	cmp	r0, #0
   2690e:	d0ad      	beq.n	2686c <ble_svc_ans_access+0x4c>
   26910:	2411      	movs	r4, #17
   26912:	e7ab      	b.n	2686c <ble_svc_ans_access+0x4c>
            rc = ble_svc_ans_chr_write(ctxt->om,
   26914:	6860      	ldr	r0, [r4, #4]
   26916:	2300      	movs	r3, #0
   26918:	9300      	str	r3, [sp, #0]
   2691a:	4b41      	ldr	r3, [pc, #260]	; (26a20 <ble_svc_ans_access+0x200>)
   2691c:	2202      	movs	r2, #2
   2691e:	4611      	mov	r1, r2
   26920:	f7ff ff6a 	bl	267f8 <ble_svc_ans_chr_write>
   26924:	4604      	mov	r4, r0
            return rc;
   26926:	e7a1      	b.n	2686c <ble_svc_ans_access+0x4c>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   26928:	7823      	ldrb	r3, [r4, #0]
   2692a:	2b01      	cmp	r3, #1
   2692c:	d001      	beq.n	26932 <ble_svc_ans_access+0x112>
        return rc;
   2692e:	240e      	movs	r4, #14
   26930:	e79c      	b.n	2686c <ble_svc_ans_access+0x4c>
            rc = ble_svc_ans_chr_write(ctxt->om,
   26932:	6860      	ldr	r0, [r4, #4]
   26934:	2300      	movs	r3, #0
   26936:	9300      	str	r3, [sp, #0]
   26938:	4b3a      	ldr	r3, [pc, #232]	; (26a24 <ble_svc_ans_access+0x204>)
   2693a:	2202      	movs	r2, #2
   2693c:	4611      	mov	r1, r2
   2693e:	f7ff ff5b 	bl	267f8 <ble_svc_ans_chr_write>
            if (rc != 0) {
   26942:	4604      	mov	r4, r0
   26944:	2800      	cmp	r0, #0
   26946:	d191      	bne.n	2686c <ble_svc_ans_access+0x4c>
            cmd_id = ble_svc_ans_alert_not_ctrl_pt[0];
   26948:	4b36      	ldr	r3, [pc, #216]	; (26a24 <ble_svc_ans_access+0x204>)
   2694a:	781a      	ldrb	r2, [r3, #0]
            cat_id = ble_svc_ans_alert_not_ctrl_pt[1];
   2694c:	7858      	ldrb	r0, [r3, #1]
            if (cat_id < BLE_SVC_ANS_CAT_NUM) {
   2694e:	2807      	cmp	r0, #7
   26950:	d809      	bhi.n	26966 <ble_svc_ans_access+0x146>
                cat_bit_mask = (1 << cat_id);
   26952:	2301      	movs	r3, #1
   26954:	4083      	lsls	r3, r0
   26956:	b2db      	uxtb	r3, r3
            switch (cmd_id) {
   26958:	2a05      	cmp	r2, #5
   2695a:	d856      	bhi.n	26a0a <ble_svc_ans_access+0x1ea>
   2695c:	e8df f002 	tbb	[pc, r2]
   26960:	17110c07 	.word	0x17110c07
   26964:	341d      	.short	0x341d
            } else if (cat_id == 0xff) {
   26966:	28ff      	cmp	r0, #255	; 0xff
   26968:	d14d      	bne.n	26a06 <ble_svc_ans_access+0x1e6>
                cat_bit_mask = cat_id;
   2696a:	4603      	mov	r3, r0
   2696c:	e7f4      	b.n	26958 <ble_svc_ans_access+0x138>
                ble_svc_ans_new_alert_cat |= cat_bit_mask;
   2696e:	4a28      	ldr	r2, [pc, #160]	; (26a10 <ble_svc_ans_access+0x1f0>)
   26970:	7811      	ldrb	r1, [r2, #0]
   26972:	430b      	orrs	r3, r1
   26974:	7013      	strb	r3, [r2, #0]
                break;
   26976:	e779      	b.n	2686c <ble_svc_ans_access+0x4c>
                ble_svc_ans_unr_alert_cat |= cat_bit_mask;
   26978:	4a28      	ldr	r2, [pc, #160]	; (26a1c <ble_svc_ans_access+0x1fc>)
   2697a:	7811      	ldrb	r1, [r2, #0]
   2697c:	430b      	orrs	r3, r1
   2697e:	7013      	strb	r3, [r2, #0]
                break;
   26980:	e774      	b.n	2686c <ble_svc_ans_access+0x4c>
                ble_svc_ans_new_alert_cat &= ~cat_bit_mask;
   26982:	4923      	ldr	r1, [pc, #140]	; (26a10 <ble_svc_ans_access+0x1f0>)
   26984:	780a      	ldrb	r2, [r1, #0]
   26986:	ea22 0303 	bic.w	r3, r2, r3
   2698a:	700b      	strb	r3, [r1, #0]
                break;
   2698c:	e76e      	b.n	2686c <ble_svc_ans_access+0x4c>
                ble_svc_ans_unr_alert_cat &= ~cat_bit_mask;
   2698e:	4923      	ldr	r1, [pc, #140]	; (26a1c <ble_svc_ans_access+0x1fc>)
   26990:	780a      	ldrb	r2, [r1, #0]
   26992:	ea22 0303 	bic.w	r3, r2, r3
   26996:	700b      	strb	r3, [r1, #0]
                break;
   26998:	e768      	b.n	2686c <ble_svc_ans_access+0x4c>
                if (cat_id == 0xff) {
   2699a:	28ff      	cmp	r0, #255	; 0xff
   2699c:	d110      	bne.n	269c0 <ble_svc_ans_access+0x1a0>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   2699e:	2507      	movs	r5, #7
   269a0:	e000      	b.n	269a4 <ble_svc_ans_access+0x184>
   269a2:	3d01      	subs	r5, #1
   269a4:	2d00      	cmp	r5, #0
   269a6:	f77f af61 	ble.w	2686c <ble_svc_ans_access+0x4c>
                        if ((ble_svc_ans_new_alert_cat >> i) & 0x01) {
   269aa:	4b19      	ldr	r3, [pc, #100]	; (26a10 <ble_svc_ans_access+0x1f0>)
   269ac:	781b      	ldrb	r3, [r3, #0]
   269ae:	412b      	asrs	r3, r5
   269b0:	f013 0f01 	tst.w	r3, #1
   269b4:	d0f5      	beq.n	269a2 <ble_svc_ans_access+0x182>
                            ble_svc_ans_new_alert_notify(i, NULL);
   269b6:	2100      	movs	r1, #0
   269b8:	b2e8      	uxtb	r0, r5
   269ba:	f7ff fec9 	bl	26750 <ble_svc_ans_new_alert_notify>
   269be:	e7f0      	b.n	269a2 <ble_svc_ans_access+0x182>
                    ble_svc_ans_new_alert_notify(cat_id, NULL);
   269c0:	2100      	movs	r1, #0
   269c2:	f7ff fec5 	bl	26750 <ble_svc_ans_new_alert_notify>
   269c6:	e751      	b.n	2686c <ble_svc_ans_access+0x4c>
                if (cat_id == 0xff) {
   269c8:	28ff      	cmp	r0, #255	; 0xff
   269ca:	d10f      	bne.n	269ec <ble_svc_ans_access+0x1cc>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   269cc:	2507      	movs	r5, #7
   269ce:	e000      	b.n	269d2 <ble_svc_ans_access+0x1b2>
   269d0:	3d01      	subs	r5, #1
   269d2:	2d00      	cmp	r5, #0
   269d4:	f77f af4a 	ble.w	2686c <ble_svc_ans_access+0x4c>
                        if ((ble_svc_ans_unr_alert_cat >> i) & 0x01) {
   269d8:	4b10      	ldr	r3, [pc, #64]	; (26a1c <ble_svc_ans_access+0x1fc>)
   269da:	781b      	ldrb	r3, [r3, #0]
   269dc:	412b      	asrs	r3, r5
   269de:	f013 0f01 	tst.w	r3, #1
   269e2:	d0f5      	beq.n	269d0 <ble_svc_ans_access+0x1b0>
                            ble_svc_ans_unr_alert_notify(i);
   269e4:	b2e8      	uxtb	r0, r5
   269e6:	f7ff fef1 	bl	267cc <ble_svc_ans_unr_alert_notify>
   269ea:	e7f1      	b.n	269d0 <ble_svc_ans_access+0x1b0>
                    ble_svc_ans_unr_alert_notify(cat_id);
   269ec:	f7ff feee 	bl	267cc <ble_svc_ans_unr_alert_notify>
   269f0:	e73c      	b.n	2686c <ble_svc_ans_access+0x4c>
        assert(0);
   269f2:	f7e1 fbe5 	bl	81c0 <hal_debugger_connected>
   269f6:	b100      	cbz	r0, 269fa <ble_svc_ans_access+0x1da>
   269f8:	be01      	bkpt	0x0001
   269fa:	2300      	movs	r3, #0
   269fc:	461a      	mov	r2, r3
   269fe:	4619      	mov	r1, r3
   26a00:	4618      	mov	r0, r3
   26a02:	f7e2 ffe5 	bl	99d0 <__assert_func>
                return BLE_ATT_ERR_UNLIKELY;
   26a06:	240e      	movs	r4, #14
   26a08:	e730      	b.n	2686c <ble_svc_ans_access+0x4c>
                return BLE_SVC_ANS_ERR_CMD_NOT_SUPPORTED;
   26a0a:	24a0      	movs	r4, #160	; 0xa0
   26a0c:	e72e      	b.n	2686c <ble_svc_ans_access+0x4c>
   26a0e:	bf00      	nop
   26a10:	20009214 	.word	0x20009214
   26a14:	20009220 	.word	0x20009220
   26a18:	20009236 	.word	0x20009236
   26a1c:	20009238 	.word	0x20009238
   26a20:	20009244 	.word	0x20009244
   26a24:	20009210 	.word	0x20009210

00026a28 <ble_svc_ans_init>:
 * XXX: We should technically be able to change the new alert and
 *      unread alert catagories when we have no active connections.
 */
void
ble_svc_ans_init(void)
{
   26a28:	b510      	push	{r4, lr}
   26a2a:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   26a2c:	4b1a      	ldr	r3, [pc, #104]	; (26a98 <ble_svc_ans_init+0x70>)
   26a2e:	781b      	ldrb	r3, [r3, #0]
   26a30:	b173      	cbz	r3, 26a50 <ble_svc_ans_init+0x28>

    rc = ble_gatts_count_cfg(ble_svc_ans_defs);
   26a32:	481a      	ldr	r0, [pc, #104]	; (26a9c <ble_svc_ans_init+0x74>)
   26a34:	f7e8 ffdc 	bl	f9f0 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26a38:	b9a0      	cbnz	r0, 26a64 <ble_svc_ans_init+0x3c>

    rc = ble_gatts_add_svcs(ble_svc_ans_defs);
   26a3a:	4818      	ldr	r0, [pc, #96]	; (26a9c <ble_svc_ans_init+0x74>)
   26a3c:	f7e8 ffb4 	bl	f9a8 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26a40:	b9e8      	cbnz	r0, 26a7e <ble_svc_ans_init+0x56>

    ble_svc_ans_new_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_NEW_ALERT_CAT);
   26a42:	2300      	movs	r3, #0
   26a44:	4a16      	ldr	r2, [pc, #88]	; (26aa0 <ble_svc_ans_init+0x78>)
   26a46:	7013      	strb	r3, [r2, #0]
    ble_svc_ans_unr_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_UNR_ALERT_CAT);
   26a48:	4a16      	ldr	r2, [pc, #88]	; (26aa4 <ble_svc_ans_init+0x7c>)
   26a4a:	7013      	strb	r3, [r2, #0]
}
   26a4c:	b002      	add	sp, #8
   26a4e:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   26a50:	f7e1 fbb6 	bl	81c0 <hal_debugger_connected>
   26a54:	b100      	cbz	r0, 26a58 <ble_svc_ans_init+0x30>
   26a56:	be01      	bkpt	0x0001
   26a58:	2300      	movs	r3, #0
   26a5a:	461a      	mov	r2, r3
   26a5c:	4619      	mov	r1, r3
   26a5e:	4618      	mov	r0, r3
   26a60:	f7e2 ffb6 	bl	99d0 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26a64:	f7e1 fbac 	bl	81c0 <hal_debugger_connected>
   26a68:	b100      	cbz	r0, 26a6c <ble_svc_ans_init+0x44>
   26a6a:	be01      	bkpt	0x0001
   26a6c:	2000      	movs	r0, #0
   26a6e:	9000      	str	r0, [sp, #0]
   26a70:	4b0d      	ldr	r3, [pc, #52]	; (26aa8 <ble_svc_ans_init+0x80>)
   26a72:	681c      	ldr	r4, [r3, #0]
   26a74:	4603      	mov	r3, r0
   26a76:	4602      	mov	r2, r0
   26a78:	4601      	mov	r1, r0
   26a7a:	47a0      	blx	r4
   26a7c:	e7dd      	b.n	26a3a <ble_svc_ans_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26a7e:	f7e1 fb9f 	bl	81c0 <hal_debugger_connected>
   26a82:	b100      	cbz	r0, 26a86 <ble_svc_ans_init+0x5e>
   26a84:	be01      	bkpt	0x0001
   26a86:	2000      	movs	r0, #0
   26a88:	9000      	str	r0, [sp, #0]
   26a8a:	4b07      	ldr	r3, [pc, #28]	; (26aa8 <ble_svc_ans_init+0x80>)
   26a8c:	681c      	ldr	r4, [r3, #0]
   26a8e:	4603      	mov	r3, r0
   26a90:	4602      	mov	r2, r0
   26a92:	4601      	mov	r1, r0
   26a94:	47a0      	blx	r4
   26a96:	e7d4      	b.n	26a42 <ble_svc_ans_init+0x1a>
   26a98:	20000506 	.word	0x20000506
   26a9c:	000298cc 	.word	0x000298cc
   26aa0:	20009214 	.word	0x20009214
   26aa4:	20009238 	.word	0x20009238
   26aa8:	200000ec 	.word	0x200000ec

00026aac <ble_svc_gatt_access>:
};

static int
ble_svc_gatt_access(uint16_t conn_handle, uint16_t attr_handle,
                    struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   26aac:	b510      	push	{r4, lr}
     * access callback gets called by the stack when it needs to read the
     * characteristic value to populate the outgoing indication command.
     * Therefore, this callback should only get called during an attempt to
     * read the characteristic.
     */
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   26aae:	7813      	ldrb	r3, [r2, #0]
   26ab0:	b9a3      	cbnz	r3, 26adc <ble_svc_gatt_access+0x30>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   26ab2:	6891      	ldr	r1, [r2, #8]
   26ab4:	4b14      	ldr	r3, [pc, #80]	; (26b08 <ble_svc_gatt_access+0x5c>)
   26ab6:	4299      	cmp	r1, r3
   26ab8:	d11a      	bne.n	26af0 <ble_svc_gatt_access+0x44>

    u8p = os_mbuf_extend(ctxt->om, 4);
   26aba:	2104      	movs	r1, #4
   26abc:	6850      	ldr	r0, [r2, #4]
   26abe:	f7e3 fe89 	bl	a7d4 <os_mbuf_extend>
    if (u8p == NULL) {
   26ac2:	4604      	mov	r4, r0
   26ac4:	b1f0      	cbz	r0, 26b04 <ble_svc_gatt_access+0x58>
        return BLE_HS_ENOMEM;
    }

    put_le16(u8p + 0, ble_svc_gatt_start_handle);
   26ac6:	4b11      	ldr	r3, [pc, #68]	; (26b0c <ble_svc_gatt_access+0x60>)
   26ac8:	8819      	ldrh	r1, [r3, #0]
   26aca:	f7f5 f88f 	bl	1bbec <put_le16>
    put_le16(u8p + 2, ble_svc_gatt_end_handle);
   26ace:	4b10      	ldr	r3, [pc, #64]	; (26b10 <ble_svc_gatt_access+0x64>)
   26ad0:	8819      	ldrh	r1, [r3, #0]
   26ad2:	1ca0      	adds	r0, r4, #2
   26ad4:	f7f5 f88a 	bl	1bbec <put_le16>

    return 0;
   26ad8:	2000      	movs	r0, #0
}
   26ada:	bd10      	pop	{r4, pc}
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   26adc:	f7e1 fb70 	bl	81c0 <hal_debugger_connected>
   26ae0:	b100      	cbz	r0, 26ae4 <ble_svc_gatt_access+0x38>
   26ae2:	be01      	bkpt	0x0001
   26ae4:	2300      	movs	r3, #0
   26ae6:	461a      	mov	r2, r3
   26ae8:	4619      	mov	r1, r3
   26aea:	4618      	mov	r0, r3
   26aec:	f7e2 ff70 	bl	99d0 <__assert_func>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   26af0:	f7e1 fb66 	bl	81c0 <hal_debugger_connected>
   26af4:	b100      	cbz	r0, 26af8 <ble_svc_gatt_access+0x4c>
   26af6:	be01      	bkpt	0x0001
   26af8:	2300      	movs	r3, #0
   26afa:	461a      	mov	r2, r3
   26afc:	4619      	mov	r1, r3
   26afe:	4618      	mov	r0, r3
   26b00:	f7e2 ff66 	bl	99d0 <__assert_func>
        return BLE_HS_ENOMEM;
   26b04:	2006      	movs	r0, #6
   26b06:	e7e8      	b.n	26ada <ble_svc_gatt_access+0x2e>
   26b08:	20000448 	.word	0x20000448
   26b0c:	2000924c 	.word	0x2000924c
   26b10:	2000924a 	.word	0x2000924a

00026b14 <ble_svc_gatt_init>:
    ble_gatts_chr_updated(ble_svc_gatt_changed_val_handle);
}

void
ble_svc_gatt_init(void)
{
   26b14:	b510      	push	{r4, lr}
   26b16:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   26b18:	4b18      	ldr	r3, [pc, #96]	; (26b7c <ble_svc_gatt_init+0x68>)
   26b1a:	781b      	ldrb	r3, [r3, #0]
   26b1c:	b14b      	cbz	r3, 26b32 <ble_svc_gatt_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_gatt_defs);
   26b1e:	4818      	ldr	r0, [pc, #96]	; (26b80 <ble_svc_gatt_init+0x6c>)
   26b20:	f7e8 ff66 	bl	f9f0 <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26b24:	b978      	cbnz	r0, 26b46 <ble_svc_gatt_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gatt_defs);
   26b26:	4816      	ldr	r0, [pc, #88]	; (26b80 <ble_svc_gatt_init+0x6c>)
   26b28:	f7e8 ff3e 	bl	f9a8 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26b2c:	b9c0      	cbnz	r0, 26b60 <ble_svc_gatt_init+0x4c>
}
   26b2e:	b002      	add	sp, #8
   26b30:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   26b32:	f7e1 fb45 	bl	81c0 <hal_debugger_connected>
   26b36:	b100      	cbz	r0, 26b3a <ble_svc_gatt_init+0x26>
   26b38:	be01      	bkpt	0x0001
   26b3a:	2300      	movs	r3, #0
   26b3c:	461a      	mov	r2, r3
   26b3e:	4619      	mov	r1, r3
   26b40:	4618      	mov	r0, r3
   26b42:	f7e2 ff45 	bl	99d0 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26b46:	f7e1 fb3b 	bl	81c0 <hal_debugger_connected>
   26b4a:	b100      	cbz	r0, 26b4e <ble_svc_gatt_init+0x3a>
   26b4c:	be01      	bkpt	0x0001
   26b4e:	2000      	movs	r0, #0
   26b50:	9000      	str	r0, [sp, #0]
   26b52:	4b0c      	ldr	r3, [pc, #48]	; (26b84 <ble_svc_gatt_init+0x70>)
   26b54:	681c      	ldr	r4, [r3, #0]
   26b56:	4603      	mov	r3, r0
   26b58:	4602      	mov	r2, r0
   26b5a:	4601      	mov	r1, r0
   26b5c:	47a0      	blx	r4
   26b5e:	e7e2      	b.n	26b26 <ble_svc_gatt_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26b60:	f7e1 fb2e 	bl	81c0 <hal_debugger_connected>
   26b64:	b100      	cbz	r0, 26b68 <ble_svc_gatt_init+0x54>
   26b66:	be01      	bkpt	0x0001
   26b68:	2000      	movs	r0, #0
   26b6a:	9000      	str	r0, [sp, #0]
   26b6c:	4b05      	ldr	r3, [pc, #20]	; (26b84 <ble_svc_gatt_init+0x70>)
   26b6e:	681c      	ldr	r4, [r3, #0]
   26b70:	4603      	mov	r3, r0
   26b72:	4602      	mov	r2, r0
   26b74:	4601      	mov	r1, r0
   26b76:	47a0      	blx	r4
}
   26b78:	e7d9      	b.n	26b2e <ble_svc_gatt_init+0x1a>
   26b7a:	bf00      	nop
   26b7c:	20000506 	.word	0x20000506
   26b80:	000298ec 	.word	0x000298ec
   26b84:	200000ec 	.word	0x200000ec

00026b88 <ble_store_config_find_sec>:

static int
ble_store_config_find_sec(const struct ble_store_key_sec *key_sec,
                          const struct ble_store_value_sec *value_secs,
                          int num_value_secs)
{
   26b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b8c:	b083      	sub	sp, #12
   26b8e:	4605      	mov	r5, r0
   26b90:	4688      	mov	r8, r1
   26b92:	4692      	mov	sl, r2
    int skipped;
    int i;

    skipped = 0;

    for (i = 0; i < num_value_secs; i++) {
   26b94:	2400      	movs	r4, #0
    skipped = 0;
   26b96:	46a3      	mov	fp, r4
    for (i = 0; i < num_value_secs; i++) {
   26b98:	e004      	b.n	26ba4 <ble_store_config_find_sec+0x1c>
        return type_diff;
   26b9a:	4638      	mov	r0, r7
   26b9c:	e016      	b.n	26bcc <ble_store_config_find_sec+0x44>
                continue;
            }
        }

        if (key_sec->idx > skipped) {
            skipped++;
   26b9e:	f10b 0b01 	add.w	fp, fp, #1
    for (i = 0; i < num_value_secs; i++) {
   26ba2:	3401      	adds	r4, #1
   26ba4:	4554      	cmp	r4, sl
   26ba6:	da36      	bge.n	26c16 <ble_store_config_find_sec+0x8e>
        cur = value_secs + i;
   26ba8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   26bac:	011e      	lsls	r6, r3, #4
   26bae:	eb08 0906 	add.w	r9, r8, r6
        if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   26bb2:	2300      	movs	r3, #0
   26bb4:	9300      	str	r3, [sp, #0]
   26bb6:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   26bba:	782f      	ldrb	r7, [r5, #0]
    if (type_diff != 0) {
   26bbc:	2f00      	cmp	r7, #0
   26bbe:	d1ec      	bne.n	26b9a <ble_store_config_find_sec+0x12>
    return memcmp(a->val, b->val, sizeof(a->val));
   26bc0:	2206      	movs	r2, #6
   26bc2:	f10d 0101 	add.w	r1, sp, #1
   26bc6:	1c68      	adds	r0, r5, #1
   26bc8:	f7e4 fe3e 	bl	b848 <memcmp>
   26bcc:	b158      	cbz	r0, 26be6 <ble_store_config_find_sec+0x5e>
    type_diff = a->type - b->type;
   26bce:	f818 0006 	ldrb.w	r0, [r8, r6]
    if (type_diff != 0) {
   26bd2:	1bc0      	subs	r0, r0, r7
   26bd4:	d105      	bne.n	26be2 <ble_store_config_find_sec+0x5a>
    return memcmp(a->val, b->val, sizeof(a->val));
   26bd6:	2206      	movs	r2, #6
   26bd8:	1c69      	adds	r1, r5, #1
   26bda:	f109 0001 	add.w	r0, r9, #1
   26bde:	f7e4 fe33 	bl	b848 <memcmp>
            if (ble_addr_cmp(&cur->peer_addr, &key_sec->peer_addr)) {
   26be2:	2800      	cmp	r0, #0
   26be4:	d1dd      	bne.n	26ba2 <ble_store_config_find_sec+0x1a>
        if (key_sec->ediv_rand_present) {
   26be6:	7e2b      	ldrb	r3, [r5, #24]
   26be8:	f013 0f01 	tst.w	r3, #1
   26bec:	d00c      	beq.n	26c08 <ble_store_config_find_sec+0x80>
            if (cur->ediv != key_sec->ediv) {
   26bee:	f8b9 2008 	ldrh.w	r2, [r9, #8]
   26bf2:	892b      	ldrh	r3, [r5, #8]
   26bf4:	429a      	cmp	r2, r3
   26bf6:	d1d4      	bne.n	26ba2 <ble_store_config_find_sec+0x1a>
            if (cur->rand_num != key_sec->rand_num) {
   26bf8:	e9d9 0104 	ldrd	r0, r1, [r9, #16]
   26bfc:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   26c00:	4299      	cmp	r1, r3
   26c02:	bf08      	it	eq
   26c04:	4290      	cmpeq	r0, r2
   26c06:	d1cc      	bne.n	26ba2 <ble_store_config_find_sec+0x1a>
        if (key_sec->idx > skipped) {
   26c08:	7e6b      	ldrb	r3, [r5, #25]
   26c0a:	455b      	cmp	r3, fp
   26c0c:	dcc7      	bgt.n	26b9e <ble_store_config_find_sec+0x16>

        return i;
    }

    return -1;
}
   26c0e:	4620      	mov	r0, r4
   26c10:	b003      	add	sp, #12
   26c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
   26c16:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   26c1a:	e7f8      	b.n	26c0e <ble_store_config_find_sec+0x86>

00026c1c <ble_store_config_read_peer_sec>:
}

static int
ble_store_config_read_peer_sec(const struct ble_store_key_sec *key_sec,
                               struct ble_store_value_sec *value_sec)
{
   26c1c:	b510      	push	{r4, lr}
   26c1e:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_sec(key_sec, ble_store_config_peer_secs,
   26c20:	4b0a      	ldr	r3, [pc, #40]	; (26c4c <ble_store_config_read_peer_sec+0x30>)
   26c22:	681a      	ldr	r2, [r3, #0]
   26c24:	490a      	ldr	r1, [pc, #40]	; (26c50 <ble_store_config_read_peer_sec+0x34>)
   26c26:	f7ff ffaf 	bl	26b88 <ble_store_config_find_sec>
                             ble_store_config_num_peer_secs);
    if (idx == -1) {
   26c2a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26c2e:	d00a      	beq.n	26c46 <ble_store_config_read_peer_sec+0x2a>
        return BLE_HS_ENOENT;
    }

    *value_sec = ble_store_config_peer_secs[idx];
   26c30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26c34:	0103      	lsls	r3, r0, #4
   26c36:	2250      	movs	r2, #80	; 0x50
   26c38:	4905      	ldr	r1, [pc, #20]	; (26c50 <ble_store_config_read_peer_sec+0x34>)
   26c3a:	4419      	add	r1, r3
   26c3c:	4620      	mov	r0, r4
   26c3e:	f7e4 fe27 	bl	b890 <memcpy>
    return 0;
   26c42:	2000      	movs	r0, #0
}
   26c44:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   26c46:	2005      	movs	r0, #5
   26c48:	e7fc      	b.n	26c44 <ble_store_config_read_peer_sec+0x28>
   26c4a:	bf00      	nop
   26c4c:	200092d8 	.word	0x200092d8
   26c50:	200093d0 	.word	0x200093d0

00026c54 <ble_store_config_read_our_sec>:
{
   26c54:	b510      	push	{r4, lr}
   26c56:	460c      	mov	r4, r1
    idx = ble_store_config_find_sec(key_sec, ble_store_config_our_secs,
   26c58:	4b0a      	ldr	r3, [pc, #40]	; (26c84 <ble_store_config_read_our_sec+0x30>)
   26c5a:	681a      	ldr	r2, [r3, #0]
   26c5c:	490a      	ldr	r1, [pc, #40]	; (26c88 <ble_store_config_read_our_sec+0x34>)
   26c5e:	f7ff ff93 	bl	26b88 <ble_store_config_find_sec>
    if (idx == -1) {
   26c62:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26c66:	d00a      	beq.n	26c7e <ble_store_config_read_our_sec+0x2a>
    *value_sec = ble_store_config_our_secs[idx];
   26c68:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26c6c:	0103      	lsls	r3, r0, #4
   26c6e:	2250      	movs	r2, #80	; 0x50
   26c70:	4905      	ldr	r1, [pc, #20]	; (26c88 <ble_store_config_read_our_sec+0x34>)
   26c72:	4419      	add	r1, r3
   26c74:	4620      	mov	r0, r4
   26c76:	f7e4 fe0b 	bl	b890 <memcpy>
    return 0;
   26c7a:	2000      	movs	r0, #0
}
   26c7c:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   26c7e:	2005      	movs	r0, #5
   26c80:	e7fc      	b.n	26c7c <ble_store_config_read_our_sec+0x28>
   26c82:	bf00      	nop
   26c84:	200092d4 	.word	0x200092d4
   26c88:	200092e0 	.word	0x200092e0

00026c8c <ble_store_config_find_cccd>:
 * $cccd                                                                     *
 *****************************************************************************/

static int
ble_store_config_find_cccd(const struct ble_store_key_cccd *key)
{
   26c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26c90:	b082      	sub	sp, #8
   26c92:	4605      	mov	r5, r0
    struct ble_store_value_cccd *cccd;
    int skipped;
    int i;

    skipped = 0;
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   26c94:	2400      	movs	r4, #0
    skipped = 0;
   26c96:	46a0      	mov	r8, r4
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   26c98:	e004      	b.n	26ca4 <ble_store_config_find_cccd+0x18>
        return type_diff;
   26c9a:	4630      	mov	r0, r6
   26c9c:	e019      	b.n	26cd2 <ble_store_config_find_cccd+0x46>
                continue;
            }
        }

        if (key->idx > skipped) {
            skipped++;
   26c9e:	f108 0801 	add.w	r8, r8, #1
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   26ca2:	3401      	adds	r4, #1
   26ca4:	4b18      	ldr	r3, [pc, #96]	; (26d08 <ble_store_config_find_cccd+0x7c>)
   26ca6:	681b      	ldr	r3, [r3, #0]
   26ca8:	42a3      	cmp	r3, r4
   26caa:	dd2a      	ble.n	26d02 <ble_store_config_find_cccd+0x76>
        cccd = ble_store_config_cccds + i;
   26cac:	ea4f 1904 	mov.w	r9, r4, lsl #4
   26cb0:	f8df a058 	ldr.w	sl, [pc, #88]	; 26d0c <ble_store_config_find_cccd+0x80>
   26cb4:	eb0a 0709 	add.w	r7, sl, r9
        if (ble_addr_cmp(&key->peer_addr, BLE_ADDR_ANY)) {
   26cb8:	2300      	movs	r3, #0
   26cba:	9300      	str	r3, [sp, #0]
   26cbc:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   26cc0:	782e      	ldrb	r6, [r5, #0]
    if (type_diff != 0) {
   26cc2:	2e00      	cmp	r6, #0
   26cc4:	d1e9      	bne.n	26c9a <ble_store_config_find_cccd+0xe>
    return memcmp(a->val, b->val, sizeof(a->val));
   26cc6:	2206      	movs	r2, #6
   26cc8:	f10d 0101 	add.w	r1, sp, #1
   26ccc:	1c68      	adds	r0, r5, #1
   26cce:	f7e4 fdbb 	bl	b848 <memcmp>
   26cd2:	b150      	cbz	r0, 26cea <ble_store_config_find_cccd+0x5e>
    type_diff = a->type - b->type;
   26cd4:	f81a 0009 	ldrb.w	r0, [sl, r9]
    if (type_diff != 0) {
   26cd8:	1b80      	subs	r0, r0, r6
   26cda:	d104      	bne.n	26ce6 <ble_store_config_find_cccd+0x5a>
    return memcmp(a->val, b->val, sizeof(a->val));
   26cdc:	2206      	movs	r2, #6
   26cde:	1c69      	adds	r1, r5, #1
   26ce0:	1c78      	adds	r0, r7, #1
   26ce2:	f7e4 fdb1 	bl	b848 <memcmp>
            if (ble_addr_cmp(&cccd->peer_addr, &key->peer_addr)) {
   26ce6:	2800      	cmp	r0, #0
   26ce8:	d1db      	bne.n	26ca2 <ble_store_config_find_cccd+0x16>
        if (key->chr_val_handle != 0) {
   26cea:	892b      	ldrh	r3, [r5, #8]
   26cec:	b113      	cbz	r3, 26cf4 <ble_store_config_find_cccd+0x68>
            if (cccd->chr_val_handle != key->chr_val_handle) {
   26cee:	893a      	ldrh	r2, [r7, #8]
   26cf0:	4293      	cmp	r3, r2
   26cf2:	d1d6      	bne.n	26ca2 <ble_store_config_find_cccd+0x16>
        if (key->idx > skipped) {
   26cf4:	7aab      	ldrb	r3, [r5, #10]
   26cf6:	4543      	cmp	r3, r8
   26cf8:	dcd1      	bgt.n	26c9e <ble_store_config_find_cccd+0x12>

        return i;
    }

    return -1;
}
   26cfa:	4620      	mov	r0, r4
   26cfc:	b002      	add	sp, #8
   26cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return -1;
   26d02:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   26d06:	e7f8      	b.n	26cfa <ble_store_config_find_cccd+0x6e>
   26d08:	200092d0 	.word	0x200092d0
   26d0c:	20009250 	.word	0x20009250

00026d10 <ble_store_config_read_cccd>:
}

static int
ble_store_config_read_cccd(const struct ble_store_key_cccd *key_cccd,
                           struct ble_store_value_cccd *value_cccd)
{
   26d10:	b510      	push	{r4, lr}
   26d12:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_cccd(key_cccd);
   26d14:	f7ff ffba 	bl	26c8c <ble_store_config_find_cccd>
    if (idx == -1) {
   26d18:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26d1c:	d007      	beq.n	26d2e <ble_store_config_read_cccd+0x1e>
        return BLE_HS_ENOENT;
    }

    *value_cccd = ble_store_config_cccds[idx];
   26d1e:	4b05      	ldr	r3, [pc, #20]	; (26d34 <ble_store_config_read_cccd+0x24>)
   26d20:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   26d24:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   26d26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return 0;
   26d2a:	2000      	movs	r0, #0
}
   26d2c:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   26d2e:	2005      	movs	r0, #5
   26d30:	e7fc      	b.n	26d2c <ble_store_config_read_cccd+0x1c>
   26d32:	bf00      	nop
   26d34:	20009250 	.word	0x20009250

00026d38 <ble_store_config_print_key_sec>:
{
   26d38:	b510      	push	{r4, lr}
   26d3a:	b082      	sub	sp, #8
   26d3c:	4604      	mov	r4, r0
    if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   26d3e:	2300      	movs	r3, #0
   26d40:	9300      	str	r3, [sp, #0]
   26d42:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   26d46:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
   26d48:	b928      	cbnz	r0, 26d56 <ble_store_config_print_key_sec+0x1e>
    return memcmp(a->val, b->val, sizeof(a->val));
   26d4a:	2206      	movs	r2, #6
   26d4c:	f10d 0101 	add.w	r1, sp, #1
   26d50:	1c60      	adds	r0, r4, #1
   26d52:	f7e4 fd79 	bl	b848 <memcmp>
   26d56:	b908      	cbnz	r0, 26d5c <ble_store_config_print_key_sec+0x24>
}
   26d58:	b002      	add	sp, #8
   26d5a:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(key_sec->peer_addr.val, 6);
   26d5c:	2106      	movs	r1, #6
   26d5e:	1c60      	adds	r0, r4, #1
   26d60:	f7ea fc58 	bl	11614 <ble_hs_log_flat_buf>
}
   26d64:	e7f8      	b.n	26d58 <ble_store_config_print_key_sec+0x20>

00026d66 <ble_store_config_read>:
 * @return                      0 if a key was found; else BLE_HS_ENOENT.
 */
int
ble_store_config_read(int obj_type, const union ble_store_key *key,
                      union ble_store_value *value)
{
   26d66:	b538      	push	{r3, r4, r5, lr}
   26d68:	460c      	mov	r4, r1
   26d6a:	4615      	mov	r5, r2
    int rc;

    switch (obj_type) {
   26d6c:	2802      	cmp	r0, #2
   26d6e:	d005      	beq.n	26d7c <ble_store_config_read+0x16>
   26d70:	2803      	cmp	r0, #3
   26d72:	d013      	beq.n	26d9c <ble_store_config_read+0x36>
   26d74:	2801      	cmp	r0, #1
   26d76:	d009      	beq.n	26d8c <ble_store_config_read+0x26>
    case BLE_STORE_OBJ_TYPE_CCCD:
        rc = ble_store_config_read_cccd(&key->cccd, &value->cccd);
        return rc;

    default:
        return BLE_HS_ENOTSUP;
   26d78:	2008      	movs	r0, #8
   26d7a:	e006      	b.n	26d8a <ble_store_config_read+0x24>
        ble_store_config_print_key_sec(&key->sec);
   26d7c:	4608      	mov	r0, r1
   26d7e:	f7ff ffdb 	bl	26d38 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_peer_sec(&key->sec, &value->sec);
   26d82:	4629      	mov	r1, r5
   26d84:	4620      	mov	r0, r4
   26d86:	f7ff ff49 	bl	26c1c <ble_store_config_read_peer_sec>
    }
}
   26d8a:	bd38      	pop	{r3, r4, r5, pc}
        ble_store_config_print_key_sec(&key->sec);
   26d8c:	4608      	mov	r0, r1
   26d8e:	f7ff ffd3 	bl	26d38 <ble_store_config_print_key_sec>
        rc = ble_store_config_read_our_sec(&key->sec, &value->sec);
   26d92:	4629      	mov	r1, r5
   26d94:	4620      	mov	r0, r4
   26d96:	f7ff ff5d 	bl	26c54 <ble_store_config_read_our_sec>
        return rc;
   26d9a:	e7f6      	b.n	26d8a <ble_store_config_read+0x24>
        rc = ble_store_config_read_cccd(&key->cccd, &value->cccd);
   26d9c:	4611      	mov	r1, r2
   26d9e:	4620      	mov	r0, r4
   26da0:	f7ff ffb6 	bl	26d10 <ble_store_config_read_cccd>
        return rc;
   26da4:	e7f1      	b.n	26d8a <ble_store_config_read+0x24>

00026da6 <ble_store_config_print_value_sec>:
{
   26da6:	b510      	push	{r4, lr}
   26da8:	4604      	mov	r4, r0
    if (sec->ltk_present) {
   26daa:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   26dae:	f013 0f01 	tst.w	r3, #1
   26db2:	d10a      	bne.n	26dca <ble_store_config_print_value_sec+0x24>
    if (sec->irk_present) {
   26db4:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   26db8:	f013 0f01 	tst.w	r3, #1
   26dbc:	d10a      	bne.n	26dd4 <ble_store_config_print_value_sec+0x2e>
    if (sec->csrk_present) {
   26dbe:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   26dc2:	f013 0f01 	tst.w	r3, #1
   26dc6:	d10b      	bne.n	26de0 <ble_store_config_print_value_sec+0x3a>
}
   26dc8:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(sec->ltk, 16);
   26dca:	2110      	movs	r1, #16
   26dcc:	3018      	adds	r0, #24
   26dce:	f7ea fc21 	bl	11614 <ble_hs_log_flat_buf>
   26dd2:	e7ef      	b.n	26db4 <ble_store_config_print_value_sec+0xe>
        ble_hs_log_flat_buf(sec->irk, 16);
   26dd4:	2110      	movs	r1, #16
   26dd6:	f104 0029 	add.w	r0, r4, #41	; 0x29
   26dda:	f7ea fc1b 	bl	11614 <ble_hs_log_flat_buf>
   26dde:	e7ee      	b.n	26dbe <ble_store_config_print_value_sec+0x18>
        ble_hs_log_flat_buf(sec->csrk, 16);
   26de0:	2110      	movs	r1, #16
   26de2:	f104 003a 	add.w	r0, r4, #58	; 0x3a
   26de6:	f7ea fc15 	bl	11614 <ble_hs_log_flat_buf>
}
   26dea:	e7ed      	b.n	26dc8 <ble_store_config_print_value_sec+0x22>

00026dec <ble_store_config_write_peer_sec>:
{
   26dec:	b530      	push	{r4, r5, lr}
   26dee:	b089      	sub	sp, #36	; 0x24
   26df0:	4605      	mov	r5, r0
    ble_store_config_print_value_sec(value_sec);
   26df2:	f7ff ffd8 	bl	26da6 <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   26df6:	4629      	mov	r1, r5
   26df8:	4668      	mov	r0, sp
   26dfa:	f7ed fa37 	bl	1426c <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_peer_secs,
   26dfe:	4b0f      	ldr	r3, [pc, #60]	; (26e3c <ble_store_config_write_peer_sec+0x50>)
   26e00:	681c      	ldr	r4, [r3, #0]
   26e02:	4622      	mov	r2, r4
   26e04:	490e      	ldr	r1, [pc, #56]	; (26e40 <ble_store_config_write_peer_sec+0x54>)
   26e06:	4668      	mov	r0, sp
   26e08:	f7ff febe 	bl	26b88 <ble_store_config_find_sec>
    if (idx == -1) {
   26e0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26e10:	d105      	bne.n	26e1e <ble_store_config_write_peer_sec+0x32>
        if (ble_store_config_num_peer_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   26e12:	2c02      	cmp	r4, #2
   26e14:	dc10      	bgt.n	26e38 <ble_store_config_write_peer_sec+0x4c>
        ble_store_config_num_peer_secs++;
   26e16:	1c62      	adds	r2, r4, #1
   26e18:	4b08      	ldr	r3, [pc, #32]	; (26e3c <ble_store_config_write_peer_sec+0x50>)
   26e1a:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_peer_secs;
   26e1c:	4620      	mov	r0, r4
    ble_store_config_peer_secs[idx] = *value_sec;
   26e1e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26e22:	0103      	lsls	r3, r0, #4
   26e24:	2250      	movs	r2, #80	; 0x50
   26e26:	4629      	mov	r1, r5
   26e28:	4805      	ldr	r0, [pc, #20]	; (26e40 <ble_store_config_write_peer_sec+0x54>)
   26e2a:	4418      	add	r0, r3
   26e2c:	f7e4 fd30 	bl	b890 <memcpy>
    rc = ble_store_config_persist_peer_secs();
   26e30:	f000 f9da 	bl	271e8 <ble_store_config_persist_peer_secs>
}
   26e34:	b009      	add	sp, #36	; 0x24
   26e36:	bd30      	pop	{r4, r5, pc}
            return BLE_HS_ESTORE_CAP;
   26e38:	201b      	movs	r0, #27
   26e3a:	e7fb      	b.n	26e34 <ble_store_config_write_peer_sec+0x48>
   26e3c:	200092d8 	.word	0x200092d8
   26e40:	200093d0 	.word	0x200093d0

00026e44 <ble_store_config_write_our_sec>:
{
   26e44:	b530      	push	{r4, r5, lr}
   26e46:	b089      	sub	sp, #36	; 0x24
   26e48:	4605      	mov	r5, r0
    ble_store_config_print_value_sec(value_sec);
   26e4a:	f7ff ffac 	bl	26da6 <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   26e4e:	4629      	mov	r1, r5
   26e50:	4668      	mov	r0, sp
   26e52:	f7ed fa0b 	bl	1426c <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_our_secs,
   26e56:	4b0f      	ldr	r3, [pc, #60]	; (26e94 <ble_store_config_write_our_sec+0x50>)
   26e58:	681c      	ldr	r4, [r3, #0]
   26e5a:	4622      	mov	r2, r4
   26e5c:	490e      	ldr	r1, [pc, #56]	; (26e98 <ble_store_config_write_our_sec+0x54>)
   26e5e:	4668      	mov	r0, sp
   26e60:	f7ff fe92 	bl	26b88 <ble_store_config_find_sec>
    if (idx == -1) {
   26e64:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26e68:	d105      	bne.n	26e76 <ble_store_config_write_our_sec+0x32>
        if (ble_store_config_num_our_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   26e6a:	2c02      	cmp	r4, #2
   26e6c:	dc10      	bgt.n	26e90 <ble_store_config_write_our_sec+0x4c>
        ble_store_config_num_our_secs++;
   26e6e:	1c62      	adds	r2, r4, #1
   26e70:	4b08      	ldr	r3, [pc, #32]	; (26e94 <ble_store_config_write_our_sec+0x50>)
   26e72:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_our_secs;
   26e74:	4620      	mov	r0, r4
    ble_store_config_our_secs[idx] = *value_sec;
   26e76:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26e7a:	0103      	lsls	r3, r0, #4
   26e7c:	2250      	movs	r2, #80	; 0x50
   26e7e:	4629      	mov	r1, r5
   26e80:	4805      	ldr	r0, [pc, #20]	; (26e98 <ble_store_config_write_our_sec+0x54>)
   26e82:	4418      	add	r0, r3
   26e84:	f7e4 fd04 	bl	b890 <memcpy>
    rc = ble_store_config_persist_our_secs();
   26e88:	f000 f9a0 	bl	271cc <ble_store_config_persist_our_secs>
}
   26e8c:	b009      	add	sp, #36	; 0x24
   26e8e:	bd30      	pop	{r4, r5, pc}
            return BLE_HS_ESTORE_CAP;
   26e90:	201b      	movs	r0, #27
   26e92:	e7fb      	b.n	26e8c <ble_store_config_write_our_sec+0x48>
   26e94:	200092d4 	.word	0x200092d4
   26e98:	200092e0 	.word	0x200092e0

00026e9c <ble_store_config_write_cccd>:
{
   26e9c:	b530      	push	{r4, r5, lr}
   26e9e:	b085      	sub	sp, #20
   26ea0:	4605      	mov	r5, r0
    ble_store_key_from_value_cccd(&key_cccd, value_cccd);
   26ea2:	4601      	mov	r1, r0
   26ea4:	a801      	add	r0, sp, #4
   26ea6:	f7ed f9d2 	bl	1424e <ble_store_key_from_value_cccd>
    idx = ble_store_config_find_cccd(&key_cccd);
   26eaa:	a801      	add	r0, sp, #4
   26eac:	f7ff feee 	bl	26c8c <ble_store_config_find_cccd>
    if (idx == -1) {
   26eb0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26eb4:	d106      	bne.n	26ec4 <ble_store_config_write_cccd+0x28>
        if (ble_store_config_num_cccds >= MYNEWT_VAL(BLE_STORE_MAX_CCCDS)) {
   26eb6:	4b0a      	ldr	r3, [pc, #40]	; (26ee0 <ble_store_config_write_cccd+0x44>)
   26eb8:	6818      	ldr	r0, [r3, #0]
   26eba:	2807      	cmp	r0, #7
   26ebc:	dc0d      	bgt.n	26eda <ble_store_config_write_cccd+0x3e>
        ble_store_config_num_cccds++;
   26ebe:	1c43      	adds	r3, r0, #1
   26ec0:	4a07      	ldr	r2, [pc, #28]	; (26ee0 <ble_store_config_write_cccd+0x44>)
   26ec2:	6013      	str	r3, [r2, #0]
    ble_store_config_cccds[idx] = *value_cccd;
   26ec4:	4c07      	ldr	r4, [pc, #28]	; (26ee4 <ble_store_config_write_cccd+0x48>)
   26ec6:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   26eca:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   26ece:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    rc = ble_store_config_persist_cccds();
   26ed2:	f000 f997 	bl	27204 <ble_store_config_persist_cccds>
}
   26ed6:	b005      	add	sp, #20
   26ed8:	bd30      	pop	{r4, r5, pc}
            return BLE_HS_ESTORE_CAP;
   26eda:	201b      	movs	r0, #27
   26edc:	e7fb      	b.n	26ed6 <ble_store_config_write_cccd+0x3a>
   26ede:	bf00      	nop
   26ee0:	200092d0 	.word	0x200092d0
   26ee4:	20009250 	.word	0x20009250

00026ee8 <ble_store_config_write>:
 * @return                      0 on success;
 *                              BLE_HS_ESTORE_CAP if the database is full.
 */
int
ble_store_config_write(int obj_type, const union ble_store_value *val)
{
   26ee8:	b508      	push	{r3, lr}
    int rc;

    switch (obj_type) {
   26eea:	2802      	cmp	r0, #2
   26eec:	d005      	beq.n	26efa <ble_store_config_write+0x12>
   26eee:	2803      	cmp	r0, #3
   26ef0:	d00b      	beq.n	26f0a <ble_store_config_write+0x22>
   26ef2:	2801      	cmp	r0, #1
   26ef4:	d005      	beq.n	26f02 <ble_store_config_write+0x1a>
    case BLE_STORE_OBJ_TYPE_CCCD:
        rc = ble_store_config_write_cccd(&val->cccd);
        return rc;

    default:
        return BLE_HS_ENOTSUP;
   26ef6:	2008      	movs	r0, #8
   26ef8:	e002      	b.n	26f00 <ble_store_config_write+0x18>
        rc = ble_store_config_write_peer_sec(&val->sec);
   26efa:	4608      	mov	r0, r1
   26efc:	f7ff ff76 	bl	26dec <ble_store_config_write_peer_sec>
    }
}
   26f00:	bd08      	pop	{r3, pc}
        rc = ble_store_config_write_our_sec(&val->sec);
   26f02:	4608      	mov	r0, r1
   26f04:	f7ff ff9e 	bl	26e44 <ble_store_config_write_our_sec>
        return rc;
   26f08:	e7fa      	b.n	26f00 <ble_store_config_write+0x18>
        rc = ble_store_config_write_cccd(&val->cccd);
   26f0a:	4608      	mov	r0, r1
   26f0c:	f7ff ffc6 	bl	26e9c <ble_store_config_write_cccd>
        return rc;
   26f10:	e7f6      	b.n	26f00 <ble_store_config_write+0x18>

00026f12 <ble_store_config_delete_obj>:
{
   26f12:	b510      	push	{r4, lr}
    (*num_values)--;
   26f14:	681c      	ldr	r4, [r3, #0]
   26f16:	3c01      	subs	r4, #1
   26f18:	601c      	str	r4, [r3, #0]
    if (idx < *num_values) {
   26f1a:	4294      	cmp	r4, r2
   26f1c:	dc01      	bgt.n	26f22 <ble_store_config_delete_obj+0x10>
}
   26f1e:	2000      	movs	r0, #0
   26f20:	bd10      	pop	{r4, pc}
        dst += idx * value_size;
   26f22:	fb01 0002 	mla	r0, r1, r2, r0
        move_count = *num_values - idx;
   26f26:	1aa2      	subs	r2, r4, r2
        memmove(dst, src, move_count * value_size);
   26f28:	fb02 f201 	mul.w	r2, r2, r1
   26f2c:	4401      	add	r1, r0
   26f2e:	f7e4 fcbc 	bl	b8aa <memmove>
   26f32:	e7f4      	b.n	26f1e <ble_store_config_delete_obj+0xc>

00026f34 <ble_store_config_delete_sec>:
{
   26f34:	b538      	push	{r3, r4, r5, lr}
   26f36:	460d      	mov	r5, r1
   26f38:	4614      	mov	r4, r2
    idx = ble_store_config_find_sec(key_sec, value_secs, *num_value_secs);
   26f3a:	6812      	ldr	r2, [r2, #0]
   26f3c:	f7ff fe24 	bl	26b88 <ble_store_config_find_sec>
    if (idx == -1) {
   26f40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26f44:	d006      	beq.n	26f54 <ble_store_config_delete_sec+0x20>
    rc = ble_store_config_delete_obj(value_secs, sizeof *value_secs, idx,
   26f46:	4623      	mov	r3, r4
   26f48:	4602      	mov	r2, r0
   26f4a:	2150      	movs	r1, #80	; 0x50
   26f4c:	4628      	mov	r0, r5
   26f4e:	f7ff ffe0 	bl	26f12 <ble_store_config_delete_obj>
}
   26f52:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOENT;
   26f54:	2005      	movs	r0, #5
   26f56:	e7fc      	b.n	26f52 <ble_store_config_delete_sec+0x1e>

00026f58 <ble_store_config_delete_peer_sec>:
{
   26f58:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_peer_secs,
   26f5a:	4a06      	ldr	r2, [pc, #24]	; (26f74 <ble_store_config_delete_peer_sec+0x1c>)
   26f5c:	4906      	ldr	r1, [pc, #24]	; (26f78 <ble_store_config_delete_peer_sec+0x20>)
   26f5e:	f7ff ffe9 	bl	26f34 <ble_store_config_delete_sec>
    if (rc != 0) {
   26f62:	4603      	mov	r3, r0
   26f64:	b108      	cbz	r0, 26f6a <ble_store_config_delete_peer_sec+0x12>
}
   26f66:	4618      	mov	r0, r3
   26f68:	bd08      	pop	{r3, pc}
    rc = ble_store_config_persist_peer_secs();
   26f6a:	f000 f93d 	bl	271e8 <ble_store_config_persist_peer_secs>
   26f6e:	4603      	mov	r3, r0
   26f70:	e7f9      	b.n	26f66 <ble_store_config_delete_peer_sec+0xe>
   26f72:	bf00      	nop
   26f74:	200092d8 	.word	0x200092d8
   26f78:	200093d0 	.word	0x200093d0

00026f7c <ble_store_config_delete_our_sec>:
{
   26f7c:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_our_secs,
   26f7e:	4a06      	ldr	r2, [pc, #24]	; (26f98 <ble_store_config_delete_our_sec+0x1c>)
   26f80:	4906      	ldr	r1, [pc, #24]	; (26f9c <ble_store_config_delete_our_sec+0x20>)
   26f82:	f7ff ffd7 	bl	26f34 <ble_store_config_delete_sec>
    if (rc != 0) {
   26f86:	4603      	mov	r3, r0
   26f88:	b108      	cbz	r0, 26f8e <ble_store_config_delete_our_sec+0x12>
}
   26f8a:	4618      	mov	r0, r3
   26f8c:	bd08      	pop	{r3, pc}
    rc = ble_store_config_persist_our_secs();
   26f8e:	f000 f91d 	bl	271cc <ble_store_config_persist_our_secs>
   26f92:	4603      	mov	r3, r0
   26f94:	e7f9      	b.n	26f8a <ble_store_config_delete_our_sec+0xe>
   26f96:	bf00      	nop
   26f98:	200092d4 	.word	0x200092d4
   26f9c:	200092e0 	.word	0x200092e0

00026fa0 <ble_store_config_delete_cccd>:
{
   26fa0:	b508      	push	{r3, lr}
    idx = ble_store_config_find_cccd(key_cccd);
   26fa2:	f7ff fe73 	bl	26c8c <ble_store_config_find_cccd>
    if (idx == -1) {
   26fa6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26faa:	d00d      	beq.n	26fc8 <ble_store_config_delete_cccd+0x28>
    rc = ble_store_config_delete_obj(ble_store_config_cccds,
   26fac:	4b07      	ldr	r3, [pc, #28]	; (26fcc <ble_store_config_delete_cccd+0x2c>)
   26fae:	4602      	mov	r2, r0
   26fb0:	2110      	movs	r1, #16
   26fb2:	4807      	ldr	r0, [pc, #28]	; (26fd0 <ble_store_config_delete_cccd+0x30>)
   26fb4:	f7ff ffad 	bl	26f12 <ble_store_config_delete_obj>
    if (rc != 0) {
   26fb8:	4603      	mov	r3, r0
   26fba:	b108      	cbz	r0, 26fc0 <ble_store_config_delete_cccd+0x20>
}
   26fbc:	4618      	mov	r0, r3
   26fbe:	bd08      	pop	{r3, pc}
    rc = ble_store_config_persist_cccds();
   26fc0:	f000 f920 	bl	27204 <ble_store_config_persist_cccds>
   26fc4:	4603      	mov	r3, r0
   26fc6:	e7f9      	b.n	26fbc <ble_store_config_delete_cccd+0x1c>
        return BLE_HS_ENOENT;
   26fc8:	2305      	movs	r3, #5
   26fca:	e7f7      	b.n	26fbc <ble_store_config_delete_cccd+0x1c>
   26fcc:	200092d0 	.word	0x200092d0
   26fd0:	20009250 	.word	0x20009250

00026fd4 <ble_store_config_delete>:

int
ble_store_config_delete(int obj_type, const union ble_store_key *key)
{
   26fd4:	b508      	push	{r3, lr}
    int rc;

    switch (obj_type) {
   26fd6:	2802      	cmp	r0, #2
   26fd8:	d005      	beq.n	26fe6 <ble_store_config_delete+0x12>
   26fda:	2803      	cmp	r0, #3
   26fdc:	d00b      	beq.n	26ff6 <ble_store_config_delete+0x22>
   26fde:	2801      	cmp	r0, #1
   26fe0:	d005      	beq.n	26fee <ble_store_config_delete+0x1a>
    case BLE_STORE_OBJ_TYPE_CCCD:
        rc = ble_store_config_delete_cccd(&key->cccd);
        return rc;

    default:
        return BLE_HS_ENOTSUP;
   26fe2:	2008      	movs	r0, #8
   26fe4:	e002      	b.n	26fec <ble_store_config_delete+0x18>
        rc = ble_store_config_delete_peer_sec(&key->sec);
   26fe6:	4608      	mov	r0, r1
   26fe8:	f7ff ffb6 	bl	26f58 <ble_store_config_delete_peer_sec>
    }
}
   26fec:	bd08      	pop	{r3, pc}
        rc = ble_store_config_delete_our_sec(&key->sec);
   26fee:	4608      	mov	r0, r1
   26ff0:	f7ff ffc4 	bl	26f7c <ble_store_config_delete_our_sec>
        return rc;
   26ff4:	e7fa      	b.n	26fec <ble_store_config_delete+0x18>
        rc = ble_store_config_delete_cccd(&key->cccd);
   26ff6:	4608      	mov	r0, r1
   26ff8:	f7ff ffd2 	bl	26fa0 <ble_store_config_delete_cccd>
        return rc;
   26ffc:	e7f6      	b.n	26fec <ble_store_config_delete+0x18>
	...

00027000 <ble_store_config_init>:

void
ble_store_config_init(void)
{
   27000:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   27002:	4b0f      	ldr	r3, [pc, #60]	; (27040 <ble_store_config_init+0x40>)
   27004:	781b      	ldrb	r3, [r3, #0]
   27006:	b183      	cbz	r3, 2702a <ble_store_config_init+0x2a>

    ble_hs_cfg.store_read_cb = ble_store_config_read;
   27008:	4b0e      	ldr	r3, [pc, #56]	; (27044 <ble_store_config_init+0x44>)
   2700a:	4a0f      	ldr	r2, [pc, #60]	; (27048 <ble_store_config_init+0x48>)
   2700c:	615a      	str	r2, [r3, #20]
    ble_hs_cfg.store_write_cb = ble_store_config_write;
   2700e:	4a0f      	ldr	r2, [pc, #60]	; (2704c <ble_store_config_init+0x4c>)
   27010:	619a      	str	r2, [r3, #24]
    ble_hs_cfg.store_delete_cb = ble_store_config_delete;
   27012:	4a0f      	ldr	r2, [pc, #60]	; (27050 <ble_store_config_init+0x50>)
   27014:	61da      	str	r2, [r3, #28]

    /* Re-initialize BSS values in case of unit tests. */
    ble_store_config_num_our_secs = 0;
   27016:	2300      	movs	r3, #0
   27018:	4a0e      	ldr	r2, [pc, #56]	; (27054 <ble_store_config_init+0x54>)
   2701a:	6013      	str	r3, [r2, #0]
    ble_store_config_num_peer_secs = 0;
   2701c:	4a0e      	ldr	r2, [pc, #56]	; (27058 <ble_store_config_init+0x58>)
   2701e:	6013      	str	r3, [r2, #0]
    ble_store_config_num_cccds = 0;
   27020:	4a0e      	ldr	r2, [pc, #56]	; (2705c <ble_store_config_init+0x5c>)
   27022:	6013      	str	r3, [r2, #0]

    ble_store_config_conf_init();
   27024:	f000 f90c 	bl	27240 <ble_store_config_conf_init>
}
   27028:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   2702a:	f7e1 f8c9 	bl	81c0 <hal_debugger_connected>
   2702e:	b100      	cbz	r0, 27032 <ble_store_config_init+0x32>
   27030:	be01      	bkpt	0x0001
   27032:	2300      	movs	r3, #0
   27034:	461a      	mov	r2, r3
   27036:	4619      	mov	r1, r3
   27038:	4618      	mov	r0, r3
   2703a:	f7e2 fcc9 	bl	99d0 <__assert_func>
   2703e:	bf00      	nop
   27040:	20000506 	.word	0x20000506
   27044:	2000017c 	.word	0x2000017c
   27048:	00026d67 	.word	0x00026d67
   2704c:	00026ee9 	.word	0x00026ee9
   27050:	00026fd5 	.word	0x00026fd5
   27054:	200092d4 	.word	0x200092d4
   27058:	200092d8 	.word	0x200092d8
   2705c:	200092d0 	.word	0x200092d0

00027060 <ble_store_config_serialize_arr>:
    (MYNEWT_VAL(BLE_STORE_MAX_CCCDS) * BLE_STORE_CONFIG_CCCD_ENCODE_SZ + 1)

static void
ble_store_config_serialize_arr(const void *arr, int obj_sz, int num_objs,
                               char *out_buf, int buf_sz)
{
   27060:	b510      	push	{r4, lr}
   27062:	461c      	mov	r4, r3
    int arr_size;

    arr_size = obj_sz * num_objs;
   27064:	fb02 f101 	mul.w	r1, r2, r1
    assert(arr_size <= buf_sz);
   27068:	9b02      	ldr	r3, [sp, #8]
   2706a:	4299      	cmp	r1, r3
   2706c:	dc04      	bgt.n	27078 <ble_store_config_serialize_arr+0x18>

    base64_encode(arr, arr_size, out_buf, 1);
   2706e:	2301      	movs	r3, #1
   27070:	4622      	mov	r2, r4
   27072:	f7f1 fff9 	bl	19068 <base64_encode>
}
   27076:	bd10      	pop	{r4, pc}
    assert(arr_size <= buf_sz);
   27078:	f7e1 f8a2 	bl	81c0 <hal_debugger_connected>
   2707c:	b100      	cbz	r0, 27080 <ble_store_config_serialize_arr+0x20>
   2707e:	be01      	bkpt	0x0001
   27080:	2300      	movs	r3, #0
   27082:	461a      	mov	r2, r3
   27084:	4619      	mov	r1, r3
   27086:	4618      	mov	r0, r3
   27088:	f7e2 fca2 	bl	99d0 <__assert_func>

0002708c <ble_store_config_persist_sec_set>:

static int
ble_store_config_persist_sec_set(const char *setting_name,
                                 const struct ble_store_value_sec *secs,
                                 int num_secs)
{
   2708c:	b510      	push	{r4, lr}
   2708e:	b0d4      	sub	sp, #336	; 0x150
   27090:	4604      	mov	r4, r0
   27092:	4608      	mov	r0, r1
    char buf[BLE_STORE_CONFIG_SEC_SET_ENCODE_SZ];
    int rc;

    ble_store_config_serialize_arr(secs, sizeof *secs, num_secs,
   27094:	f240 1345 	movw	r3, #325	; 0x145
   27098:	9300      	str	r3, [sp, #0]
   2709a:	ab02      	add	r3, sp, #8
   2709c:	2150      	movs	r1, #80	; 0x50
   2709e:	f7ff ffdf 	bl	27060 <ble_store_config_serialize_arr>
                                   buf, sizeof buf);
    rc = conf_save_one(setting_name, buf);
   270a2:	a902      	add	r1, sp, #8
   270a4:	4620      	mov	r0, r4
   270a6:	f7ef fbf3 	bl	16890 <conf_save_one>
    if (rc != 0) {
   270aa:	4603      	mov	r3, r0
   270ac:	b910      	cbnz	r0, 270b4 <ble_store_config_persist_sec_set+0x28>
        return BLE_HS_ESTORE_FAIL;
    }

    return 0;
}
   270ae:	4618      	mov	r0, r3
   270b0:	b054      	add	sp, #336	; 0x150
   270b2:	bd10      	pop	{r4, pc}
        return BLE_HS_ESTORE_FAIL;
   270b4:	231c      	movs	r3, #28
   270b6:	e7fa      	b.n	270ae <ble_store_config_persist_sec_set+0x22>

000270b8 <ble_store_config_conf_export>:
{
   270b8:	b530      	push	{r4, r5, lr}
   270ba:	b0d5      	sub	sp, #340	; 0x154
   270bc:	4604      	mov	r4, r0
    ble_store_config_serialize_arr(ble_store_config_our_secs,
   270be:	4b13      	ldr	r3, [pc, #76]	; (2710c <ble_store_config_conf_export+0x54>)
   270c0:	681a      	ldr	r2, [r3, #0]
   270c2:	f240 1545 	movw	r5, #325	; 0x145
   270c6:	9500      	str	r5, [sp, #0]
   270c8:	ab02      	add	r3, sp, #8
   270ca:	2150      	movs	r1, #80	; 0x50
   270cc:	4810      	ldr	r0, [pc, #64]	; (27110 <ble_store_config_conf_export+0x58>)
   270ce:	f7ff ffc7 	bl	27060 <ble_store_config_serialize_arr>
    func("ble_hs/our_sec", buf.sec);
   270d2:	a902      	add	r1, sp, #8
   270d4:	480f      	ldr	r0, [pc, #60]	; (27114 <ble_store_config_conf_export+0x5c>)
   270d6:	47a0      	blx	r4
    ble_store_config_serialize_arr(ble_store_config_peer_secs,
   270d8:	4b0f      	ldr	r3, [pc, #60]	; (27118 <ble_store_config_conf_export+0x60>)
   270da:	681a      	ldr	r2, [r3, #0]
   270dc:	9500      	str	r5, [sp, #0]
   270de:	ab02      	add	r3, sp, #8
   270e0:	2150      	movs	r1, #80	; 0x50
   270e2:	480e      	ldr	r0, [pc, #56]	; (2711c <ble_store_config_conf_export+0x64>)
   270e4:	f7ff ffbc 	bl	27060 <ble_store_config_serialize_arr>
    func("ble_hs/peer_sec", buf.sec);
   270e8:	a902      	add	r1, sp, #8
   270ea:	480d      	ldr	r0, [pc, #52]	; (27120 <ble_store_config_conf_export+0x68>)
   270ec:	47a0      	blx	r4
    ble_store_config_serialize_arr(ble_store_config_cccds,
   270ee:	4b0d      	ldr	r3, [pc, #52]	; (27124 <ble_store_config_conf_export+0x6c>)
   270f0:	681a      	ldr	r2, [r3, #0]
   270f2:	23c1      	movs	r3, #193	; 0xc1
   270f4:	9300      	str	r3, [sp, #0]
   270f6:	ab02      	add	r3, sp, #8
   270f8:	2110      	movs	r1, #16
   270fa:	480b      	ldr	r0, [pc, #44]	; (27128 <ble_store_config_conf_export+0x70>)
   270fc:	f7ff ffb0 	bl	27060 <ble_store_config_serialize_arr>
    func("ble_hs/cccd", buf.cccd);
   27100:	a902      	add	r1, sp, #8
   27102:	480a      	ldr	r0, [pc, #40]	; (2712c <ble_store_config_conf_export+0x74>)
   27104:	47a0      	blx	r4
}
   27106:	2000      	movs	r0, #0
   27108:	b055      	add	sp, #340	; 0x154
   2710a:	bd30      	pop	{r4, r5, pc}
   2710c:	200092d4 	.word	0x200092d4
   27110:	200092e0 	.word	0x200092e0
   27114:	0002990c 	.word	0x0002990c
   27118:	200092d8 	.word	0x200092d8
   2711c:	200093d0 	.word	0x200093d0
   27120:	0002991c 	.word	0x0002991c
   27124:	200092d0 	.word	0x200092d0
   27128:	20009250 	.word	0x20009250
   2712c:	0002992c 	.word	0x0002992c

00027130 <ble_store_config_deserialize_arr>:
{
   27130:	b538      	push	{r3, r4, r5, lr}
   27132:	4615      	mov	r5, r2
   27134:	461c      	mov	r4, r3
    len = base64_decode(enc, out_arr);
   27136:	f7f2 f86b 	bl	19210 <base64_decode>
    if (len < 0) {
   2713a:	2800      	cmp	r0, #0
   2713c:	db04      	blt.n	27148 <ble_store_config_deserialize_arr+0x18>
    *out_num_objs = len / obj_sz;
   2713e:	fb90 f0f5 	sdiv	r0, r0, r5
   27142:	6020      	str	r0, [r4, #0]
    return 0;
   27144:	2000      	movs	r0, #0
}
   27146:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   27148:	2002      	movs	r0, #2
   2714a:	e7fc      	b.n	27146 <ble_store_config_deserialize_arr+0x16>

0002714c <ble_store_config_conf_set>:
    if (argc == 1) {
   2714c:	2801      	cmp	r0, #1
   2714e:	d126      	bne.n	2719e <ble_store_config_conf_set+0x52>
{
   27150:	b538      	push	{r3, r4, r5, lr}
   27152:	4614      	mov	r4, r2
        if (strcmp(argv[0], "our_sec") == 0) {
   27154:	680d      	ldr	r5, [r1, #0]
   27156:	4914      	ldr	r1, [pc, #80]	; (271a8 <ble_store_config_conf_set+0x5c>)
   27158:	4628      	mov	r0, r5
   2715a:	f7e4 fbe9 	bl	b930 <strcmp>
   2715e:	b180      	cbz	r0, 27182 <ble_store_config_conf_set+0x36>
        } else if (strcmp(argv[0], "peer_sec") == 0) {
   27160:	4912      	ldr	r1, [pc, #72]	; (271ac <ble_store_config_conf_set+0x60>)
   27162:	4628      	mov	r0, r5
   27164:	f7e4 fbe4 	bl	b930 <strcmp>
   27168:	b190      	cbz	r0, 27190 <ble_store_config_conf_set+0x44>
        } else if (strcmp(argv[0], "cccd") == 0) {
   2716a:	4911      	ldr	r1, [pc, #68]	; (271b0 <ble_store_config_conf_set+0x64>)
   2716c:	4628      	mov	r0, r5
   2716e:	f7e4 fbdf 	bl	b930 <strcmp>
   27172:	b9b0      	cbnz	r0, 271a2 <ble_store_config_conf_set+0x56>
            rc = ble_store_config_deserialize_arr(
   27174:	4b0f      	ldr	r3, [pc, #60]	; (271b4 <ble_store_config_conf_set+0x68>)
   27176:	2210      	movs	r2, #16
   27178:	490f      	ldr	r1, [pc, #60]	; (271b8 <ble_store_config_conf_set+0x6c>)
   2717a:	4620      	mov	r0, r4
   2717c:	f7ff ffd8 	bl	27130 <ble_store_config_deserialize_arr>
            return rc;
   27180:	e005      	b.n	2718e <ble_store_config_conf_set+0x42>
            rc = ble_store_config_deserialize_arr(
   27182:	4b0e      	ldr	r3, [pc, #56]	; (271bc <ble_store_config_conf_set+0x70>)
   27184:	2250      	movs	r2, #80	; 0x50
   27186:	490e      	ldr	r1, [pc, #56]	; (271c0 <ble_store_config_conf_set+0x74>)
   27188:	4620      	mov	r0, r4
   2718a:	f7ff ffd1 	bl	27130 <ble_store_config_deserialize_arr>
}
   2718e:	bd38      	pop	{r3, r4, r5, pc}
            rc = ble_store_config_deserialize_arr(
   27190:	4b0c      	ldr	r3, [pc, #48]	; (271c4 <ble_store_config_conf_set+0x78>)
   27192:	2250      	movs	r2, #80	; 0x50
   27194:	490c      	ldr	r1, [pc, #48]	; (271c8 <ble_store_config_conf_set+0x7c>)
   27196:	4620      	mov	r0, r4
   27198:	f7ff ffca 	bl	27130 <ble_store_config_deserialize_arr>
            return rc;
   2719c:	e7f7      	b.n	2718e <ble_store_config_conf_set+0x42>
    return OS_ENOENT;
   2719e:	200a      	movs	r0, #10
}
   271a0:	4770      	bx	lr
    return OS_ENOENT;
   271a2:	200a      	movs	r0, #10
   271a4:	e7f3      	b.n	2718e <ble_store_config_conf_set+0x42>
   271a6:	bf00      	nop
   271a8:	00029938 	.word	0x00029938
   271ac:	00029940 	.word	0x00029940
   271b0:	0002994c 	.word	0x0002994c
   271b4:	200092d0 	.word	0x200092d0
   271b8:	20009250 	.word	0x20009250
   271bc:	200092d4 	.word	0x200092d4
   271c0:	200092e0 	.word	0x200092e0
   271c4:	200092d8 	.word	0x200092d8
   271c8:	200093d0 	.word	0x200093d0

000271cc <ble_store_config_persist_our_secs>:

int
ble_store_config_persist_our_secs(void)
{
   271cc:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_config_persist_sec_set("ble_hs/our_sec",
   271ce:	4b03      	ldr	r3, [pc, #12]	; (271dc <ble_store_config_persist_our_secs+0x10>)
   271d0:	681a      	ldr	r2, [r3, #0]
   271d2:	4903      	ldr	r1, [pc, #12]	; (271e0 <ble_store_config_persist_our_secs+0x14>)
   271d4:	4803      	ldr	r0, [pc, #12]	; (271e4 <ble_store_config_persist_our_secs+0x18>)
   271d6:	f7ff ff59 	bl	2708c <ble_store_config_persist_sec_set>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   271da:	bd08      	pop	{r3, pc}
   271dc:	200092d4 	.word	0x200092d4
   271e0:	200092e0 	.word	0x200092e0
   271e4:	0002990c 	.word	0x0002990c

000271e8 <ble_store_config_persist_peer_secs>:

int
ble_store_config_persist_peer_secs(void)
{
   271e8:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_config_persist_sec_set("ble_hs/peer_sec",
   271ea:	4b03      	ldr	r3, [pc, #12]	; (271f8 <ble_store_config_persist_peer_secs+0x10>)
   271ec:	681a      	ldr	r2, [r3, #0]
   271ee:	4903      	ldr	r1, [pc, #12]	; (271fc <ble_store_config_persist_peer_secs+0x14>)
   271f0:	4803      	ldr	r0, [pc, #12]	; (27200 <ble_store_config_persist_peer_secs+0x18>)
   271f2:	f7ff ff4b 	bl	2708c <ble_store_config_persist_sec_set>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   271f6:	bd08      	pop	{r3, pc}
   271f8:	200092d8 	.word	0x200092d8
   271fc:	200093d0 	.word	0x200093d0
   27200:	0002991c 	.word	0x0002991c

00027204 <ble_store_config_persist_cccds>:

int
ble_store_config_persist_cccds(void)
{
   27204:	b500      	push	{lr}
   27206:	b0b5      	sub	sp, #212	; 0xd4
    char buf[BLE_STORE_CONFIG_CCCD_SET_ENCODE_SZ];
    int rc;

    ble_store_config_serialize_arr(ble_store_config_cccds,
   27208:	4b0a      	ldr	r3, [pc, #40]	; (27234 <ble_store_config_persist_cccds+0x30>)
   2720a:	681a      	ldr	r2, [r3, #0]
   2720c:	23c1      	movs	r3, #193	; 0xc1
   2720e:	9300      	str	r3, [sp, #0]
   27210:	ab03      	add	r3, sp, #12
   27212:	2110      	movs	r1, #16
   27214:	4808      	ldr	r0, [pc, #32]	; (27238 <ble_store_config_persist_cccds+0x34>)
   27216:	f7ff ff23 	bl	27060 <ble_store_config_serialize_arr>
                                   sizeof *ble_store_config_cccds,
                                   ble_store_config_num_cccds,
                                   buf,
                                   sizeof buf);
    rc = conf_save_one("ble_hs/cccd", buf);
   2721a:	a903      	add	r1, sp, #12
   2721c:	4807      	ldr	r0, [pc, #28]	; (2723c <ble_store_config_persist_cccds+0x38>)
   2721e:	f7ef fb37 	bl	16890 <conf_save_one>
    if (rc != 0) {
   27222:	4603      	mov	r3, r0
   27224:	b918      	cbnz	r0, 2722e <ble_store_config_persist_cccds+0x2a>
        return BLE_HS_ESTORE_FAIL;
    }

    return 0;
}
   27226:	4618      	mov	r0, r3
   27228:	b035      	add	sp, #212	; 0xd4
   2722a:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_ESTORE_FAIL;
   2722e:	231c      	movs	r3, #28
   27230:	e7f9      	b.n	27226 <ble_store_config_persist_cccds+0x22>
   27232:	bf00      	nop
   27234:	200092d0 	.word	0x200092d0
   27238:	20009250 	.word	0x20009250
   2723c:	0002992c 	.word	0x0002992c

00027240 <ble_store_config_conf_init>:

void
ble_store_config_conf_init(void)
{
   27240:	b510      	push	{r4, lr}
   27242:	b082      	sub	sp, #8
    int rc;

    rc = conf_register(&ble_store_config_conf_handler);
   27244:	4809      	ldr	r0, [pc, #36]	; (2726c <ble_store_config_conf_init+0x2c>)
   27246:	f7ef fbb3 	bl	169b0 <conf_register>
    SYSINIT_PANIC_ASSERT_MSG(rc == 0,
   2724a:	b908      	cbnz	r0, 27250 <ble_store_config_conf_init+0x10>
                             "Failed to register ble_store_config conf");
}
   2724c:	b002      	add	sp, #8
   2724e:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT_MSG(rc == 0,
   27250:	f7e0 ffb6 	bl	81c0 <hal_debugger_connected>
   27254:	b100      	cbz	r0, 27258 <ble_store_config_conf_init+0x18>
   27256:	be01      	bkpt	0x0001
   27258:	2000      	movs	r0, #0
   2725a:	9000      	str	r0, [sp, #0]
   2725c:	4b04      	ldr	r3, [pc, #16]	; (27270 <ble_store_config_conf_init+0x30>)
   2725e:	681c      	ldr	r4, [r3, #0]
   27260:	4603      	mov	r3, r0
   27262:	4602      	mov	r2, r0
   27264:	4601      	mov	r1, r0
   27266:	47a0      	blx	r4
}
   27268:	e7f0      	b.n	2724c <ble_store_config_conf_init+0xc>
   2726a:	bf00      	nop
   2726c:	20000478 	.word	0x20000478
   27270:	200000ec 	.word	0x200000ec

00027274 <smp_align4>:
static int
smp_align4(int x)
{
    int rem;

    rem = x % 4;
   27274:	4242      	negs	r2, r0
   27276:	f000 0303 	and.w	r3, r0, #3
   2727a:	f002 0203 	and.w	r2, r2, #3
   2727e:	bf58      	it	pl
   27280:	4253      	negpl	r3, r2
    if (rem == 0) {
   27282:	b10b      	cbz	r3, 27288 <smp_align4+0x14>
        return x;
    } else {
        return x - rem + 4;
   27284:	1ac0      	subs	r0, r0, r3
   27286:	3004      	adds	r0, #4
    }
}
   27288:	4770      	bx	lr

0002728a <smp_rsp_op>:
 * Converts a request opcode to its corresponding response opcode.
 */
static uint8_t
smp_rsp_op(uint8_t req_op)
{
    if (req_op == MGMT_OP_READ) {
   2728a:	b908      	cbnz	r0, 27290 <smp_rsp_op+0x6>
        return MGMT_OP_READ_RSP;
   2728c:	2001      	movs	r0, #1
   2728e:	4770      	bx	lr
    } else {
        return MGMT_OP_WRITE_RSP;
   27290:	2003      	movs	r0, #3
    }
}
   27292:	4770      	bx	lr

00027294 <smp_init_rsp_hdr>:

static void
smp_init_rsp_hdr(const struct mgmt_hdr *req_hdr, struct mgmt_hdr *rsp_hdr)
{
   27294:	b570      	push	{r4, r5, r6, lr}
   27296:	4605      	mov	r5, r0
   27298:	460c      	mov	r4, r1
    *rsp_hdr = (struct mgmt_hdr) {
        .nh_len = 0,
        .nh_flags = 0,
        .nh_op = smp_rsp_op(req_hdr->nh_op),
   2729a:	7800      	ldrb	r0, [r0, #0]
   2729c:	f000 0007 	and.w	r0, r0, #7
   272a0:	f7ff fff3 	bl	2728a <smp_rsp_op>
        .nh_group = req_hdr->nh_group,
   272a4:	88ae      	ldrh	r6, [r5, #4]
        .nh_seq = req_hdr->nh_seq,
   272a6:	79a9      	ldrb	r1, [r5, #6]
        .nh_id = req_hdr->nh_id,
   272a8:	79ea      	ldrb	r2, [r5, #7]
    *rsp_hdr = (struct mgmt_hdr) {
   272aa:	2300      	movs	r3, #0
   272ac:	6023      	str	r3, [r4, #0]
   272ae:	7823      	ldrb	r3, [r4, #0]
   272b0:	f360 0302 	bfi	r3, r0, #0, #3
   272b4:	7023      	strb	r3, [r4, #0]
   272b6:	80a6      	strh	r6, [r4, #4]
   272b8:	71a1      	strb	r1, [r4, #6]
   272ba:	71e2      	strb	r2, [r4, #7]
    };
}
   272bc:	bd70      	pop	{r4, r5, r6, pc}

000272be <smp_read_hdr>:
static int
smp_read_hdr(struct smp_streamer *streamer, struct mgmt_hdr *dst_hdr)
{
    struct cbor_decoder_reader *reader;

    reader = streamer->mgmt_stmr.reader;
   272be:	6880      	ldr	r0, [r0, #8]

    if (reader->message_size < sizeof *dst_hdr) {
   272c0:	6983      	ldr	r3, [r0, #24]
   272c2:	2b07      	cmp	r3, #7
   272c4:	d906      	bls.n	272d4 <smp_read_hdr+0x16>
{
   272c6:	b510      	push	{r4, lr}
        return MGMT_ERR_EINVAL;
    }

    reader->cpy(reader, (char *)dst_hdr, 0, sizeof *dst_hdr);
   272c8:	6944      	ldr	r4, [r0, #20]
   272ca:	2308      	movs	r3, #8
   272cc:	2200      	movs	r2, #0
   272ce:	47a0      	blx	r4
    return 0;
   272d0:	2000      	movs	r0, #0
}
   272d2:	bd10      	pop	{r4, pc}
        return MGMT_ERR_EINVAL;
   272d4:	2003      	movs	r0, #3
}
   272d6:	4770      	bx	lr

000272d8 <smp_handle_single_payload>:
 * @return                      A MGMT_ERR_[...] error code.
 */
static int
smp_handle_single_payload(struct mgmt_ctxt *cbuf,
                          const struct mgmt_hdr *req_hdr, bool *handler_found)
{
   272d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   272da:	b085      	sub	sp, #20
   272dc:	4605      	mov	r5, r0
   272de:	460c      	mov	r4, r1
   272e0:	4617      	mov	r7, r2
    const struct mgmt_handler *handler;
    mgmt_handler_fn *handler_fn;
    struct CborEncoder payload_encoder;
    int rc;

    handler = mgmt_find_handler(req_hdr->nh_group, req_hdr->nh_id);
   272e2:	79c9      	ldrb	r1, [r1, #7]
   272e4:	88a0      	ldrh	r0, [r4, #4]
   272e6:	f7e5 fa03 	bl	c6f0 <mgmt_find_handler>
    if (handler == NULL) {
   272ea:	b348      	cbz	r0, 27340 <smp_handle_single_payload+0x68>
   272ec:	4606      	mov	r6, r0
    }

    /* Begin response payload.  Response fields are inserted into the root
     * map as key value pairs.
     */
    rc = cbor_encoder_create_map(&cbuf->encoder, &payload_encoder,
   272ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   272f2:	4669      	mov	r1, sp
   272f4:	4628      	mov	r0, r5
   272f6:	f7f2 f8e9 	bl	194cc <cbor_encoder_create_map>
                                 CborIndefiniteLength);
    rc = mgmt_err_from_cbor(rc);
   272fa:	f7e5 fa19 	bl	c730 <mgmt_err_from_cbor>
    if (rc != 0) {
   272fe:	4603      	mov	r3, r0
   27300:	b9f8      	cbnz	r0, 27342 <smp_handle_single_payload+0x6a>
        return rc;
    }

    switch (req_hdr->nh_op) {
   27302:	7823      	ldrb	r3, [r4, #0]
   27304:	f013 0307 	ands.w	r3, r3, #7
   27308:	d003      	beq.n	27312 <smp_handle_single_payload+0x3a>
   2730a:	2b02      	cmp	r3, #2
   2730c:	d016      	beq.n	2733c <smp_handle_single_payload+0x64>
    case MGMT_OP_WRITE:
        handler_fn = handler->mh_write;
        break;

    default:
        return MGMT_ERR_EINVAL;
   2730e:	2303      	movs	r3, #3
   27310:	e017      	b.n	27342 <smp_handle_single_payload+0x6a>
        handler_fn = handler->mh_read;
   27312:	6836      	ldr	r6, [r6, #0]
    }

    if (handler_fn) {
   27314:	b1c6      	cbz	r6, 27348 <smp_handle_single_payload+0x70>
        *handler_found = true;
   27316:	2001      	movs	r0, #1
   27318:	7038      	strb	r0, [r7, #0]
        mgmt_evt(MGMT_EVT_OP_CMD_RECV, req_hdr->nh_group, req_hdr->nh_id, NULL);
   2731a:	2300      	movs	r3, #0
   2731c:	79e2      	ldrb	r2, [r4, #7]
   2731e:	88a1      	ldrh	r1, [r4, #4]
   27320:	f7e5 fa3c 	bl	c79c <mgmt_evt>

        rc = handler_fn(cbuf);
   27324:	4628      	mov	r0, r5
   27326:	47b0      	blx	r6
    } else {
        rc = MGMT_ERR_ENOTSUP;
    }

    if (rc != 0) {
   27328:	4603      	mov	r3, r0
   2732a:	b950      	cbnz	r0, 27342 <smp_handle_single_payload+0x6a>
        return rc;
    }

    /* End response payload. */
    rc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
   2732c:	4669      	mov	r1, sp
   2732e:	4628      	mov	r0, r5
   27330:	f7f2 f8dc 	bl	194ec <cbor_encoder_close_container>
    return mgmt_err_from_cbor(rc);
   27334:	f7e5 f9fc 	bl	c730 <mgmt_err_from_cbor>
   27338:	4603      	mov	r3, r0
   2733a:	e002      	b.n	27342 <smp_handle_single_payload+0x6a>
        handler_fn = handler->mh_write;
   2733c:	6876      	ldr	r6, [r6, #4]
        break;
   2733e:	e7e9      	b.n	27314 <smp_handle_single_payload+0x3c>
        return MGMT_ERR_ENOTSUP;
   27340:	2308      	movs	r3, #8
}
   27342:	4618      	mov	r0, r3
   27344:	b005      	add	sp, #20
   27346:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = MGMT_ERR_ENOTSUP;
   27348:	2308      	movs	r3, #8
   2734a:	e7fa      	b.n	27342 <smp_handle_single_payload+0x6a>

0002734c <smp_write_hdr>:
{
   2734c:	b508      	push	{r3, lr}
    rc = mgmt_streamer_write_at(&streamer->mgmt_stmr, 0, src_hdr,
   2734e:	2308      	movs	r3, #8
   27350:	460a      	mov	r2, r1
   27352:	2100      	movs	r1, #0
   27354:	f7e5 f99d 	bl	c692 <mgmt_streamer_write_at>
    return mgmt_err_from_cbor(rc);
   27358:	f7e5 f9ea 	bl	c730 <mgmt_err_from_cbor>
}
   2735c:	bd08      	pop	{r3, pc}

0002735e <smp_handle_single_req>:
 * @return                      A MGMT_ERR_[...] error code.
 */
static int
smp_handle_single_req(struct smp_streamer *streamer,
                      const struct mgmt_hdr *req_hdr, bool *handler_found)
{
   2735e:	b570      	push	{r4, r5, r6, lr}
   27360:	b08e      	sub	sp, #56	; 0x38
   27362:	4604      	mov	r4, r0
   27364:	460d      	mov	r5, r1
   27366:	4616      	mov	r6, r2
    struct mgmt_ctxt cbuf;
    struct mgmt_hdr rsp_hdr;
    int rc;

    rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   27368:	4601      	mov	r1, r0
   2736a:	a803      	add	r0, sp, #12
   2736c:	f7e5 f9e8 	bl	c740 <mgmt_ctxt_init>
    if (rc != 0) {
   27370:	4603      	mov	r3, r0
   27372:	b110      	cbz	r0, 2737a <smp_handle_single_req+0x1c>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   27374:	4618      	mov	r0, r3
   27376:	b00e      	add	sp, #56	; 0x38
   27378:	bd70      	pop	{r4, r5, r6, pc}
    smp_init_rsp_hdr(req_hdr, &rsp_hdr);
   2737a:	a901      	add	r1, sp, #4
   2737c:	4628      	mov	r0, r5
   2737e:	f7ff ff89 	bl	27294 <smp_init_rsp_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   27382:	a901      	add	r1, sp, #4
   27384:	4620      	mov	r0, r4
   27386:	f7ff ffe1 	bl	2734c <smp_write_hdr>
    if (rc != 0) {
   2738a:	4603      	mov	r3, r0
   2738c:	2800      	cmp	r0, #0
   2738e:	d1f1      	bne.n	27374 <smp_handle_single_req+0x16>
    rc = smp_handle_single_payload(&cbuf, req_hdr, handler_found);
   27390:	4632      	mov	r2, r6
   27392:	4629      	mov	r1, r5
   27394:	a803      	add	r0, sp, #12
   27396:	f7ff ff9f 	bl	272d8 <smp_handle_single_payload>
    if (rc != 0) {
   2739a:	4603      	mov	r3, r0
   2739c:	2800      	cmp	r0, #0
   2739e:	d1e9      	bne.n	27374 <smp_handle_single_req+0x16>
{   return encoder->writer->bytes_written; }
   273a0:	9b03      	ldr	r3, [sp, #12]
   273a2:	685b      	ldr	r3, [r3, #4]
    rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   273a4:	3b08      	subs	r3, #8
   273a6:	f8ad 3006 	strh.w	r3, [sp, #6]
    mgmt_hton_hdr(&rsp_hdr);
   273aa:	a801      	add	r0, sp, #4
   273ac:	f7e5 f9eb 	bl	c786 <mgmt_hton_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   273b0:	a901      	add	r1, sp, #4
   273b2:	4620      	mov	r0, r4
   273b4:	f7ff ffca 	bl	2734c <smp_write_hdr>
   273b8:	4603      	mov	r3, r0
   273ba:	e7db      	b.n	27374 <smp_handle_single_req+0x16>

000273bc <smp_build_err_rsp>:
{
   273bc:	b570      	push	{r4, r5, r6, lr}
   273be:	b092      	sub	sp, #72	; 0x48
   273c0:	4604      	mov	r4, r0
   273c2:	460d      	mov	r5, r1
   273c4:	4616      	mov	r6, r2
    rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   273c6:	4601      	mov	r1, r0
   273c8:	a803      	add	r0, sp, #12
   273ca:	f7e5 f9b9 	bl	c740 <mgmt_ctxt_init>
    if (rc != 0) {
   273ce:	4603      	mov	r3, r0
   273d0:	b110      	cbz	r0, 273d8 <smp_build_err_rsp+0x1c>
}
   273d2:	4618      	mov	r0, r3
   273d4:	b012      	add	sp, #72	; 0x48
   273d6:	bd70      	pop	{r4, r5, r6, pc}
    smp_init_rsp_hdr(req_hdr, &rsp_hdr);
   273d8:	a901      	add	r1, sp, #4
   273da:	4628      	mov	r0, r5
   273dc:	f7ff ff5a 	bl	27294 <smp_init_rsp_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   273e0:	a901      	add	r1, sp, #4
   273e2:	4620      	mov	r0, r4
   273e4:	f7ff ffb2 	bl	2734c <smp_write_hdr>
    if (rc != 0) {
   273e8:	4603      	mov	r3, r0
   273ea:	2800      	cmp	r0, #0
   273ec:	d1f1      	bne.n	273d2 <smp_build_err_rsp+0x16>
    rc = cbor_encoder_create_map(&cbuf.encoder, &map, CborIndefiniteLength);
   273ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   273f2:	a90e      	add	r1, sp, #56	; 0x38
   273f4:	a803      	add	r0, sp, #12
   273f6:	f7f2 f869 	bl	194cc <cbor_encoder_create_map>
    if (rc != 0) {
   273fa:	4603      	mov	r3, r0
   273fc:	2800      	cmp	r0, #0
   273fe:	d1e8      	bne.n	273d2 <smp_build_err_rsp+0x16>
    rc = mgmt_write_rsp_status(&cbuf, status);
   27400:	4631      	mov	r1, r6
   27402:	a803      	add	r0, sp, #12
   27404:	f7e5 f980 	bl	c708 <mgmt_write_rsp_status>
    if (rc != 0) {
   27408:	4603      	mov	r3, r0
   2740a:	2800      	cmp	r0, #0
   2740c:	d1e1      	bne.n	273d2 <smp_build_err_rsp+0x16>
    rc = cbor_encoder_close_container(&cbuf.encoder, &map);
   2740e:	a90e      	add	r1, sp, #56	; 0x38
   27410:	a803      	add	r0, sp, #12
   27412:	f7f2 f86b 	bl	194ec <cbor_encoder_close_container>
    if (rc != 0) {
   27416:	4603      	mov	r3, r0
   27418:	2800      	cmp	r0, #0
   2741a:	d1da      	bne.n	273d2 <smp_build_err_rsp+0x16>
   2741c:	9b03      	ldr	r3, [sp, #12]
   2741e:	685b      	ldr	r3, [r3, #4]
    rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   27420:	3b08      	subs	r3, #8
   27422:	f8ad 3006 	strh.w	r3, [sp, #6]
    mgmt_hton_hdr(&rsp_hdr);
   27426:	a801      	add	r0, sp, #4
   27428:	f7e5 f9ad 	bl	c786 <mgmt_hton_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   2742c:	a901      	add	r1, sp, #4
   2742e:	4620      	mov	r0, r4
   27430:	f7ff ff8c 	bl	2734c <smp_write_hdr>
   27434:	4603      	mov	r3, r0
   27436:	e7cc      	b.n	273d2 <smp_build_err_rsp+0x16>

00027438 <smp_on_err>:
 * @param status                The status to indicate in the error response.
 */
static void
smp_on_err(struct smp_streamer *streamer, const struct mgmt_hdr *req_hdr,
           void *req, void *rsp, int status)
{
   27438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2743a:	4604      	mov	r4, r0
   2743c:	460f      	mov	r7, r1
   2743e:	4616      	mov	r6, r2
    int rc;

    /* Prefer the response buffer for holding the error response.  If no
     * response buffer was allocated, use the request buffer instead.
     */
    if (rsp == NULL) {
   27440:	461d      	mov	r5, r3
   27442:	b1e3      	cbz	r3, 2747e <smp_on_err+0x46>
        rsp = req;
        req = NULL;
    }

    /* Clear the partial response from the buffer, if any. */
    mgmt_streamer_reset_buf(&streamer->mgmt_stmr, rsp);
   27444:	4629      	mov	r1, r5
   27446:	4620      	mov	r0, r4
   27448:	f7e5 f91b 	bl	c682 <mgmt_streamer_reset_buf>
    mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   2744c:	4629      	mov	r1, r5
   2744e:	4620      	mov	r0, r4
   27450:	f7e5 f931 	bl	c6b6 <mgmt_streamer_init_writer>

    /* Build and transmit the error response. */
    rc = smp_build_err_rsp(streamer, req_hdr, status);
   27454:	9a06      	ldr	r2, [sp, #24]
   27456:	4639      	mov	r1, r7
   27458:	4620      	mov	r0, r4
   2745a:	f7ff ffaf 	bl	273bc <smp_build_err_rsp>
    if (rc == 0) {
   2745e:	b928      	cbnz	r0, 2746c <smp_on_err+0x34>
        streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   27460:	6923      	ldr	r3, [r4, #16]
   27462:	6862      	ldr	r2, [r4, #4]
   27464:	4629      	mov	r1, r5
   27466:	4620      	mov	r0, r4
   27468:	4798      	blx	r3
        rsp = NULL;
   2746a:	2500      	movs	r5, #0
    }

    /* Free any extra buffers. */
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   2746c:	4631      	mov	r1, r6
   2746e:	4620      	mov	r0, r4
   27470:	f7e5 f928 	bl	c6c4 <mgmt_streamer_free_buf>
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   27474:	4629      	mov	r1, r5
   27476:	4620      	mov	r0, r4
   27478:	f7e5 f924 	bl	c6c4 <mgmt_streamer_free_buf>
}
   2747c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        req = NULL;
   2747e:	462e      	mov	r6, r5
        rsp = req;
   27480:	4615      	mov	r5, r2
   27482:	e7df      	b.n	27444 <smp_on_err+0xc>

00027484 <smp_process_request_packet>:
 *
 * @return                      0 on success, MGMT_ERR_[...] code on failure.
 */
int
smp_process_request_packet(struct smp_streamer *streamer, void *req)
{
   27484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27488:	b086      	sub	sp, #24
   2748a:	4604      	mov	r4, r0
   2748c:	460e      	mov	r6, r1

    rsp = NULL;
    valid_hdr = true;

    while (1) {
        handler_found = false;
   2748e:	2300      	movs	r3, #0
   27490:	f88d 300b 	strb.w	r3, [sp, #11]

        rc = mgmt_streamer_init_reader(&streamer->mgmt_stmr, req);
   27494:	46a0      	mov	r8, r4
   27496:	4631      	mov	r1, r6
   27498:	4620      	mov	r0, r4
   2749a:	f7e5 f905 	bl	c6a8 <mgmt_streamer_init_reader>
        if (rc != 0) {
   2749e:	4605      	mov	r5, r0
   274a0:	2800      	cmp	r0, #0
   274a2:	d140      	bne.n	27526 <smp_process_request_packet+0xa2>
            valid_hdr = false;
            break;
        }

        /* Read the management header and strip it from the request. */
        rc = smp_read_hdr(streamer, &req_hdr);
   274a4:	a904      	add	r1, sp, #16
   274a6:	4620      	mov	r0, r4
   274a8:	f7ff ff09 	bl	272be <smp_read_hdr>
        if (rc != 0) {
   274ac:	4605      	mov	r5, r0
   274ae:	2800      	cmp	r0, #0
   274b0:	d14a      	bne.n	27548 <smp_process_request_packet+0xc4>
            valid_hdr = false;
            break;
        }
        mgmt_ntoh_hdr(&req_hdr);
   274b2:	a804      	add	r0, sp, #16
   274b4:	f7e5 f95c 	bl	c770 <mgmt_ntoh_hdr>
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, MGMT_HDR_SIZE);
   274b8:	2208      	movs	r2, #8
   274ba:	4631      	mov	r1, r6
   274bc:	4620      	mov	r0, r4
   274be:	f7e5 f8d7 	bl	c670 <mgmt_streamer_trim_front>

        rsp = mgmt_streamer_alloc_rsp(&streamer->mgmt_stmr, req);
   274c2:	4631      	mov	r1, r6
   274c4:	4620      	mov	r0, r4
   274c6:	f7e5 f8cb 	bl	c660 <mgmt_streamer_alloc_rsp>
        if (rsp == NULL) {
   274ca:	4607      	mov	r7, r0
   274cc:	2800      	cmp	r0, #0
   274ce:	d03e      	beq.n	2754e <smp_process_request_packet+0xca>
            rc = MGMT_ERR_ENOMEM;
            break;
        }

        rc = mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   274d0:	4601      	mov	r1, r0
   274d2:	4620      	mov	r0, r4
   274d4:	f7e5 f8ef 	bl	c6b6 <mgmt_streamer_init_writer>
        if (rc != 0) {
   274d8:	4605      	mov	r5, r0
   274da:	2800      	cmp	r0, #0
   274dc:	d13a      	bne.n	27554 <smp_process_request_packet+0xd0>
            break;
        }

        /* Process the request payload and build the response. */
        rc = smp_handle_single_req(streamer, &req_hdr, &handler_found);
   274de:	f10d 020b 	add.w	r2, sp, #11
   274e2:	a904      	add	r1, sp, #16
   274e4:	4620      	mov	r0, r4
   274e6:	f7ff ff3a 	bl	2735e <smp_handle_single_req>
        if (rc != 0) {
   274ea:	4605      	mov	r5, r0
   274ec:	bba0      	cbnz	r0, 27558 <smp_process_request_packet+0xd4>
            break;
        }

        /* Send the response. */
        rc = streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   274ee:	6923      	ldr	r3, [r4, #16]
   274f0:	6862      	ldr	r2, [r4, #4]
   274f2:	4639      	mov	r1, r7
   274f4:	4620      	mov	r0, r4
   274f6:	4798      	blx	r3
        rsp = NULL;
        if (rc != 0) {
   274f8:	4605      	mov	r5, r0
   274fa:	bb78      	cbnz	r0, 2755c <smp_process_request_packet+0xd8>
            break;
        }

        /* Trim processed request to free up space for subsequent responses. */
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req,
                                 smp_align4(req_hdr.nh_len));
   274fc:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   27500:	f7ff feb8 	bl	27274 <smp_align4>
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req,
   27504:	4602      	mov	r2, r0
   27506:	4631      	mov	r1, r6
   27508:	4620      	mov	r0, r4
   2750a:	f7e5 f8b1 	bl	c670 <mgmt_streamer_trim_front>

        cmd_done_arg.err = MGMT_ERR_EOK;
   2750e:	ab06      	add	r3, sp, #24
   27510:	2200      	movs	r2, #0
   27512:	f843 2d0c 	str.w	r2, [r3, #-12]!
        mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   27516:	f89d 2017 	ldrb.w	r2, [sp, #23]
   2751a:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   2751e:	2003      	movs	r0, #3
   27520:	f7e5 f93c 	bl	c79c <mgmt_evt>
        handler_found = false;
   27524:	e7b3      	b.n	2748e <smp_process_request_packet+0xa>
            valid_hdr = false;
   27526:	2300      	movs	r3, #0
   27528:	461f      	mov	r7, r3
                 &cmd_done_arg);
    }

    if (rc != 0 && valid_hdr) {
   2752a:	b105      	cbz	r5, 2752e <smp_process_request_packet+0xaa>
   2752c:	b9cb      	cbnz	r3, 27562 <smp_process_request_packet+0xde>
        }

        return rc;
    }

    mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   2752e:	4631      	mov	r1, r6
   27530:	4640      	mov	r0, r8
   27532:	f7e5 f8c7 	bl	c6c4 <mgmt_streamer_free_buf>
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   27536:	4639      	mov	r1, r7
   27538:	4640      	mov	r0, r8
   2753a:	f7e5 f8c3 	bl	c6c4 <mgmt_streamer_free_buf>
    return 0;
   2753e:	2500      	movs	r5, #0
}
   27540:	4628      	mov	r0, r5
   27542:	b006      	add	sp, #24
   27544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            valid_hdr = false;
   27548:	2300      	movs	r3, #0
   2754a:	461f      	mov	r7, r3
   2754c:	e7ed      	b.n	2752a <smp_process_request_packet+0xa6>
            rc = MGMT_ERR_ENOMEM;
   2754e:	2502      	movs	r5, #2
    valid_hdr = true;
   27550:	2301      	movs	r3, #1
   27552:	e7ea      	b.n	2752a <smp_process_request_packet+0xa6>
   27554:	2301      	movs	r3, #1
   27556:	e7e8      	b.n	2752a <smp_process_request_packet+0xa6>
   27558:	2301      	movs	r3, #1
   2755a:	e7e6      	b.n	2752a <smp_process_request_packet+0xa6>
   2755c:	2301      	movs	r3, #1
        rsp = NULL;
   2755e:	2700      	movs	r7, #0
   27560:	e7e3      	b.n	2752a <smp_process_request_packet+0xa6>
        smp_on_err(streamer, &req_hdr, req, rsp, rc);
   27562:	9500      	str	r5, [sp, #0]
   27564:	463b      	mov	r3, r7
   27566:	4632      	mov	r2, r6
   27568:	a904      	add	r1, sp, #16
   2756a:	4620      	mov	r0, r4
   2756c:	f7ff ff64 	bl	27438 <smp_on_err>
        if (handler_found) {
   27570:	f89d 300b 	ldrb.w	r3, [sp, #11]
   27574:	2b00      	cmp	r3, #0
   27576:	d0e3      	beq.n	27540 <smp_process_request_packet+0xbc>
            cmd_done_arg.err = rc;
   27578:	ab06      	add	r3, sp, #24
   2757a:	f843 5d0c 	str.w	r5, [r3, #-12]!
            mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   2757e:	f89d 2017 	ldrb.w	r2, [sp, #23]
   27582:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   27586:	2003      	movs	r0, #3
   27588:	f7e5 f908 	bl	c79c <mgmt_evt>
   2758c:	e7d8      	b.n	27540 <smp_process_request_packet+0xbc>
	...

00027590 <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
   27590:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   27592:	4b08      	ldr	r3, [pc, #32]	; (275b4 <config_pkg_init+0x24>)
   27594:	781b      	ldrb	r3, [r3, #0]
   27596:	b113      	cbz	r3, 2759e <config_pkg_init+0xe>

    conf_init();
   27598:	f7ef f9e2 	bl	16960 <conf_init>
    config_init_fcb();
#elif MYNEWT_VAL(CONFIG_FCB2)
    config_init_fcb2();
#endif
#endif
}
   2759c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   2759e:	f7e0 fe0f 	bl	81c0 <hal_debugger_connected>
   275a2:	b100      	cbz	r0, 275a6 <config_pkg_init+0x16>
   275a4:	be01      	bkpt	0x0001
   275a6:	2300      	movs	r3, #0
   275a8:	461a      	mov	r2, r3
   275aa:	4619      	mov	r1, r3
   275ac:	4618      	mov	r0, r3
   275ae:	f7e2 fa0f 	bl	99d0 <__assert_func>
   275b2:	bf00      	nop
   275b4:	20000506 	.word	0x20000506

000275b8 <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
   275b8:	4770      	bx	lr

000275ba <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   275ba:	4770      	bx	lr

000275bc <log_reboot_init_console>:
        return rc;
    }

    return 0;

}
   275bc:	2000      	movs	r0, #0
   275be:	4770      	bx	lr

000275c0 <reboot_conf_export>:
reboot_conf_export(void (*func)(char *name, char *val),
                   enum conf_export_tgt tgt)
{
    char str[12];

    if (tgt == CONF_EXPORT_SHOW) {
   275c0:	2901      	cmp	r1, #1
   275c2:	d001      	beq.n	275c8 <reboot_conf_export+0x8>
        func("reboot/written",
             conf_str_from_value(CONF_BOOL, &log_reboot_written, str,
                                 sizeof str));
    }
    return 0;
}
   275c4:	2000      	movs	r0, #0
   275c6:	4770      	bx	lr
{
   275c8:	b510      	push	{r4, lr}
   275ca:	b084      	sub	sp, #16
   275cc:	4604      	mov	r4, r0
        func("reboot/reboot_cnt",
   275ce:	230c      	movs	r3, #12
   275d0:	aa01      	add	r2, sp, #4
   275d2:	4909      	ldr	r1, [pc, #36]	; (275f8 <reboot_conf_export+0x38>)
   275d4:	2003      	movs	r0, #3
   275d6:	f7ef fadd 	bl	16b94 <conf_str_from_value>
   275da:	4601      	mov	r1, r0
   275dc:	4807      	ldr	r0, [pc, #28]	; (275fc <reboot_conf_export+0x3c>)
   275de:	47a0      	blx	r4
        func("reboot/written",
   275e0:	230c      	movs	r3, #12
   275e2:	aa01      	add	r2, sp, #4
   275e4:	4906      	ldr	r1, [pc, #24]	; (27600 <reboot_conf_export+0x40>)
   275e6:	200a      	movs	r0, #10
   275e8:	f7ef fad4 	bl	16b94 <conf_str_from_value>
   275ec:	4601      	mov	r1, r0
   275ee:	4805      	ldr	r0, [pc, #20]	; (27604 <reboot_conf_export+0x44>)
   275f0:	47a0      	blx	r4
}
   275f2:	2000      	movs	r0, #0
   275f4:	b004      	add	sp, #16
   275f6:	bd10      	pop	{r4, pc}
   275f8:	200094c2 	.word	0x200094c2
   275fc:	000299fc 	.word	0x000299fc
   27600:	200094c0 	.word	0x200094c0
   27604:	00029a10 	.word	0x00029a10

00027608 <reboot_conf_get>:
    if (argc == 1) {
   27608:	2801      	cmp	r0, #1
   2760a:	d11b      	bne.n	27644 <reboot_conf_get+0x3c>
{
   2760c:	b570      	push	{r4, r5, r6, lr}
   2760e:	461d      	mov	r5, r3
   27610:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   27612:	680e      	ldr	r6, [r1, #0]
   27614:	490d      	ldr	r1, [pc, #52]	; (2764c <reboot_conf_get+0x44>)
   27616:	4630      	mov	r0, r6
   27618:	f7e4 f98a 	bl	b930 <strcmp>
   2761c:	b158      	cbz	r0, 27636 <reboot_conf_get+0x2e>
        } else if (!strcmp(argv[0], "written")) {
   2761e:	490c      	ldr	r1, [pc, #48]	; (27650 <reboot_conf_get+0x48>)
   27620:	4630      	mov	r0, r6
   27622:	f7e4 f985 	bl	b930 <strcmp>
   27626:	b978      	cbnz	r0, 27648 <reboot_conf_get+0x40>
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   27628:	462b      	mov	r3, r5
   2762a:	4622      	mov	r2, r4
   2762c:	4909      	ldr	r1, [pc, #36]	; (27654 <reboot_conf_get+0x4c>)
   2762e:	200a      	movs	r0, #10
   27630:	f7ef fab0 	bl	16b94 <conf_str_from_value>
}
   27634:	bd70      	pop	{r4, r5, r6, pc}
            return conf_str_from_value(CONF_INT16, &reboot_cnt, buf, max_len);
   27636:	462b      	mov	r3, r5
   27638:	4622      	mov	r2, r4
   2763a:	4907      	ldr	r1, [pc, #28]	; (27658 <reboot_conf_get+0x50>)
   2763c:	2003      	movs	r0, #3
   2763e:	f7ef faa9 	bl	16b94 <conf_str_from_value>
   27642:	e7f7      	b.n	27634 <reboot_conf_get+0x2c>
    return NULL;
   27644:	2000      	movs	r0, #0
}
   27646:	4770      	bx	lr
    return NULL;
   27648:	2000      	movs	r0, #0
   2764a:	e7f3      	b.n	27634 <reboot_conf_get+0x2c>
   2764c:	00029a20 	.word	0x00029a20
   27650:	00029a2c 	.word	0x00029a2c
   27654:	200094c0 	.word	0x200094c0
   27658:	200094c2 	.word	0x200094c2

0002765c <reboot_conf_set>:
    if (argc == 1) {
   2765c:	2801      	cmp	r0, #1
   2765e:	d11a      	bne.n	27696 <reboot_conf_set+0x3a>
{
   27660:	b538      	push	{r3, r4, r5, lr}
   27662:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   27664:	680d      	ldr	r5, [r1, #0]
   27666:	490e      	ldr	r1, [pc, #56]	; (276a0 <reboot_conf_set+0x44>)
   27668:	4628      	mov	r0, r5
   2766a:	f7e4 f961 	bl	b930 <strcmp>
   2766e:	b158      	cbz	r0, 27688 <reboot_conf_set+0x2c>
        } else if (!strcmp(argv[0], "written")) {
   27670:	490c      	ldr	r1, [pc, #48]	; (276a4 <reboot_conf_set+0x48>)
   27672:	4628      	mov	r0, r5
   27674:	f7e4 f95c 	bl	b930 <strcmp>
   27678:	b978      	cbnz	r0, 2769a <reboot_conf_set+0x3e>
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   2767a:	2301      	movs	r3, #1
   2767c:	4a0a      	ldr	r2, [pc, #40]	; (276a8 <reboot_conf_set+0x4c>)
   2767e:	2103      	movs	r1, #3
   27680:	4620      	mov	r0, r4
   27682:	f7ef f9d8 	bl	16a36 <conf_value_from_str>
}
   27686:	bd38      	pop	{r3, r4, r5, pc}
            return CONF_VALUE_SET(val, CONF_INT16, reboot_cnt);
   27688:	2302      	movs	r3, #2
   2768a:	4a08      	ldr	r2, [pc, #32]	; (276ac <reboot_conf_set+0x50>)
   2768c:	2103      	movs	r1, #3
   2768e:	4620      	mov	r0, r4
   27690:	f7ef f9d1 	bl	16a36 <conf_value_from_str>
   27694:	e7f7      	b.n	27686 <reboot_conf_set+0x2a>
    return OS_ENOENT;
   27696:	200a      	movs	r0, #10
}
   27698:	4770      	bx	lr
    return OS_ENOENT;
   2769a:	200a      	movs	r0, #10
   2769c:	e7f3      	b.n	27686 <reboot_conf_set+0x2a>
   2769e:	bf00      	nop
   276a0:	00029a20 	.word	0x00029a20
   276a4:	00029a2c 	.word	0x00029a2c
   276a8:	200094c0 	.word	0x200094c0
   276ac:	200094c2 	.word	0x200094c2

000276b0 <log_reboot_reason_str>:

const char *
log_reboot_reason_str(enum hal_reset_reason reason)
{
   276b0:	b510      	push	{r4, lr}
    static char str_reason[MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE)];

    if (reason >= HAL_RESET_OTHER) {
   276b2:	28ff      	cmp	r0, #255	; 0xff
   276b4:	d808      	bhi.n	276c8 <log_reboot_reason_str+0x18>
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"OTHER: 0x%X",reason - HAL_RESET_OTHER);
        return str_reason;
    }

    switch (reason) {
   276b6:	1e43      	subs	r3, r0, #1
   276b8:	2b07      	cmp	r3, #7
   276ba:	d81d      	bhi.n	276f8 <log_reboot_reason_str+0x48>
   276bc:	e8df f003 	tbb	[pc, r3]
   276c0:	1210250e 	.word	0x1210250e
   276c4:	1a181614 	.word	0x1a181614
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"OTHER: 0x%X",reason - HAL_RESET_OTHER);
   276c8:	4c11      	ldr	r4, [pc, #68]	; (27710 <log_reboot_reason_str+0x60>)
   276ca:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   276ce:	4a11      	ldr	r2, [pc, #68]	; (27714 <log_reboot_reason_str+0x64>)
   276d0:	2120      	movs	r1, #32
   276d2:	4620      	mov	r0, r4
   276d4:	f7e4 fc65 	bl	bfa2 <snprintf>
        return str_reason;
   276d8:	4620      	mov	r0, r4
    default:
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"UNKNOWN %d",reason);
        return str_reason;
        break;
    }
}
   276da:	bd10      	pop	{r4, pc}
        return "HARD";
   276dc:	480e      	ldr	r0, [pc, #56]	; (27718 <log_reboot_reason_str+0x68>)
   276de:	e7fc      	b.n	276da <log_reboot_reason_str+0x2a>
        return "WDOG";
   276e0:	480e      	ldr	r0, [pc, #56]	; (2771c <log_reboot_reason_str+0x6c>)
   276e2:	e7fa      	b.n	276da <log_reboot_reason_str+0x2a>
        return "SOFT";
   276e4:	480e      	ldr	r0, [pc, #56]	; (27720 <log_reboot_reason_str+0x70>)
   276e6:	e7f8      	b.n	276da <log_reboot_reason_str+0x2a>
        return "BROWNOUT";
   276e8:	480e      	ldr	r0, [pc, #56]	; (27724 <log_reboot_reason_str+0x74>)
   276ea:	e7f6      	b.n	276da <log_reboot_reason_str+0x2a>
        return "REQUESTED";
   276ec:	480e      	ldr	r0, [pc, #56]	; (27728 <log_reboot_reason_str+0x78>)
   276ee:	e7f4      	b.n	276da <log_reboot_reason_str+0x2a>
        return "SYSTEM_OFF_INT";
   276f0:	480e      	ldr	r0, [pc, #56]	; (2772c <log_reboot_reason_str+0x7c>)
   276f2:	e7f2      	b.n	276da <log_reboot_reason_str+0x2a>
        return "DFU";
   276f4:	480e      	ldr	r0, [pc, #56]	; (27730 <log_reboot_reason_str+0x80>)
   276f6:	e7f0      	b.n	276da <log_reboot_reason_str+0x2a>
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"UNKNOWN %d",reason);
   276f8:	4c05      	ldr	r4, [pc, #20]	; (27710 <log_reboot_reason_str+0x60>)
   276fa:	4603      	mov	r3, r0
   276fc:	4a0d      	ldr	r2, [pc, #52]	; (27734 <log_reboot_reason_str+0x84>)
   276fe:	2120      	movs	r1, #32
   27700:	4620      	mov	r0, r4
   27702:	f7e4 fc4e 	bl	bfa2 <snprintf>
        return str_reason;
   27706:	4620      	mov	r0, r4
   27708:	e7e7      	b.n	276da <log_reboot_reason_str+0x2a>
        return "RESET_PIN";
   2770a:	480b      	ldr	r0, [pc, #44]	; (27738 <log_reboot_reason_str+0x88>)
   2770c:	e7e5      	b.n	276da <log_reboot_reason_str+0x2a>
   2770e:	bf00      	nop
   27710:	200094c4 	.word	0x200094c4
   27714:	000299b0 	.word	0x000299b0
   27718:	00029960 	.word	0x00029960
   2771c:	00029974 	.word	0x00029974
   27720:	0002997c 	.word	0x0002997c
   27724:	00029984 	.word	0x00029984
   27728:	00029990 	.word	0x00029990
   2772c:	0002999c 	.word	0x0002999c
   27730:	000299ac 	.word	0x000299ac
   27734:	000299bc 	.word	0x000299bc
   27738:	00029968 	.word	0x00029968

0002773c <log_reboot_write>:
{
   2773c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2773e:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
   27742:	4607      	mov	r7, r0
    rc = img_mgmt_read_info(boot_current_slot, &ver, hash, &flags);
   27744:	ab05      	add	r3, sp, #20
   27746:	aa92      	add	r2, sp, #584	; 0x248
   27748:	a99a      	add	r1, sp, #616	; 0x268
   2774a:	4884      	ldr	r0, [pc, #528]	; (2795c <log_reboot_write+0x220>)
   2774c:	6800      	ldr	r0, [r0, #0]
   2774e:	f7f0 f8bb 	bl	178c8 <img_mgmt_read_info>
    if (rc != 0) {
   27752:	4606      	mov	r6, r0
   27754:	b118      	cbz	r0, 2775e <log_reboot_write+0x22>
}
   27756:	4630      	mov	r0, r6
   27758:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
   2775c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(cbor_enc_buf, 0, sizeof cbor_enc_buf);
   2775e:	f44f 7480 	mov.w	r4, #256	; 0x100
   27762:	4622      	mov	r2, r4
   27764:	2100      	movs	r1, #0
   27766:	a812      	add	r0, sp, #72	; 0x48
   27768:	f7e4 f8bb 	bl	b8e2 <memset>
    cbor_buf_writer_init(&writer, cbor_enc_buf, sizeof cbor_enc_buf);
   2776c:	4622      	mov	r2, r4
   2776e:	a912      	add	r1, sp, #72	; 0x48
   27770:	a80e      	add	r0, sp, #56	; 0x38
   27772:	f000 fe4f 	bl	28414 <cbor_buf_writer_init>
    cbor_encoder_init(&enc, &writer.enc, 0);
   27776:	2200      	movs	r2, #0
   27778:	a90e      	add	r1, sp, #56	; 0x38
   2777a:	a80a      	add	r0, sp, #40	; 0x28
   2777c:	f7f1 fddd 	bl	1933a <cbor_encoder_init>
    rc = cbor_encoder_create_map(&enc, &map, CborIndefiniteLength);
   27780:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27784:	a906      	add	r1, sp, #24
   27786:	a80a      	add	r0, sp, #40	; 0x28
   27788:	f7f1 fea0 	bl	194cc <cbor_encoder_create_map>
    if (rc != 0) {
   2778c:	4606      	mov	r6, r0
   2778e:	2800      	cmp	r0, #0
   27790:	d1e1      	bne.n	27756 <log_reboot_write+0x1a>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   27792:	2203      	movs	r2, #3
   27794:	4972      	ldr	r1, [pc, #456]	; (27960 <log_reboot_write+0x224>)
   27796:	a806      	add	r0, sp, #24
   27798:	f7f1 fe8a 	bl	194b0 <cbor_encode_text_string>
    cbor_encode_text_stringz(&map,log_reboot_reason_str(info->reason));
   2779c:	8838      	ldrh	r0, [r7, #0]
   2779e:	f7ff ff87 	bl	276b0 <log_reboot_reason_str>
   277a2:	4604      	mov	r4, r0
   277a4:	f7e4 f8d2 	bl	b94c <strlen>
   277a8:	4602      	mov	r2, r0
   277aa:	4621      	mov	r1, r4
   277ac:	a806      	add	r0, sp, #24
   277ae:	f7f1 fe7f 	bl	194b0 <cbor_encode_text_string>
   277b2:	2203      	movs	r2, #3
   277b4:	496b      	ldr	r1, [pc, #428]	; (27964 <log_reboot_write+0x228>)
   277b6:	a806      	add	r0, sp, #24
   277b8:	f7f1 fe7a 	bl	194b0 <cbor_encode_text_string>
    cbor_encode_int(&map, reboot_cnt);
   277bc:	4b6a      	ldr	r3, [pc, #424]	; (27968 <log_reboot_write+0x22c>)
   277be:	881a      	ldrh	r2, [r3, #0]
   277c0:	2300      	movs	r3, #0
   277c2:	a806      	add	r0, sp, #24
   277c4:	f7f1 fdf3 	bl	193ae <cbor_encode_int>
   277c8:	2203      	movs	r2, #3
   277ca:	4968      	ldr	r1, [pc, #416]	; (2796c <log_reboot_write+0x230>)
   277cc:	a806      	add	r0, sp, #24
   277ce:	f7f1 fe6f 	bl	194b0 <cbor_encode_text_string>
                  ver.iv_major, ver.iv_minor, ver.iv_revision,
   277d2:	f89d 3268 	ldrb.w	r3, [sp, #616]	; 0x268
   277d6:	f89d 2269 	ldrb.w	r2, [sp, #617]	; 0x269
   277da:	f8bd 126a 	ldrh.w	r1, [sp, #618]	; 0x26a
    snprintf(buf, sizeof buf, "%u.%u.%u.%u",
   277de:	989b      	ldr	r0, [sp, #620]	; 0x26c
   277e0:	9002      	str	r0, [sp, #8]
   277e2:	9101      	str	r1, [sp, #4]
   277e4:	9200      	str	r2, [sp, #0]
   277e6:	4a62      	ldr	r2, [pc, #392]	; (27970 <log_reboot_write+0x234>)
   277e8:	f44f 7180 	mov.w	r1, #256	; 0x100
   277ec:	a852      	add	r0, sp, #328	; 0x148
   277ee:	f7e4 fbd8 	bl	bfa2 <snprintf>
   277f2:	a852      	add	r0, sp, #328	; 0x148
   277f4:	f7e4 f8aa 	bl	b94c <strlen>
   277f8:	4602      	mov	r2, r0
   277fa:	a952      	add	r1, sp, #328	; 0x148
   277fc:	a806      	add	r0, sp, #24
   277fe:	f7f1 fe57 	bl	194b0 <cbor_encode_text_string>
   27802:	2204      	movs	r2, #4
   27804:	495b      	ldr	r1, [pc, #364]	; (27974 <log_reboot_write+0x238>)
   27806:	a806      	add	r0, sp, #24
   27808:	f7f1 fe52 	bl	194b0 <cbor_encode_text_string>
    for (i = 0; i < sizeof hash; i++) {
   2780c:	4634      	mov	r4, r6
    off = 0;
   2780e:	4635      	mov	r5, r6
   27810:	e00c      	b.n	2782c <log_reboot_write+0xf0>
                        (unsigned int)hash[i]);
   27812:	ab9c      	add	r3, sp, #624	; 0x270
   27814:	4423      	add	r3, r4
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   27816:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   2781a:	4a57      	ldr	r2, [pc, #348]	; (27978 <log_reboot_write+0x23c>)
   2781c:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   27820:	a852      	add	r0, sp, #328	; 0x148
   27822:	4428      	add	r0, r5
   27824:	f7e4 fbbd 	bl	bfa2 <snprintf>
   27828:	3502      	adds	r5, #2
    for (i = 0; i < sizeof hash; i++) {
   2782a:	3401      	adds	r4, #1
   2782c:	2c1f      	cmp	r4, #31
   2782e:	d9f0      	bls.n	27812 <log_reboot_write+0xd6>
   27830:	a852      	add	r0, sp, #328	; 0x148
   27832:	f7e4 f88b 	bl	b94c <strlen>
   27836:	4602      	mov	r2, r0
   27838:	a952      	add	r1, sp, #328	; 0x148
   2783a:	a806      	add	r0, sp, #24
   2783c:	f7f1 fe38 	bl	194b0 <cbor_encode_text_string>
    if (info->file != NULL) {
   27840:	687b      	ldr	r3, [r7, #4]
   27842:	b1eb      	cbz	r3, 27880 <log_reboot_write+0x144>
   27844:	2203      	movs	r2, #3
   27846:	494d      	ldr	r1, [pc, #308]	; (2797c <log_reboot_write+0x240>)
   27848:	a806      	add	r0, sp, #24
   2784a:	f7f1 fe31 	bl	194b0 <cbor_encode_text_string>
        if (strlen(info->file) > ((sizeof buf) / 3)) {
   2784e:	687c      	ldr	r4, [r7, #4]
   27850:	4620      	mov	r0, r4
   27852:	f7e4 f87b 	bl	b94c <strlen>
   27856:	2855      	cmp	r0, #85	; 0x55
   27858:	d94c      	bls.n	278f4 <log_reboot_write+0x1b8>
            off = strlen(info->file) - ((sizeof buf) / 3);
   2785a:	f1a0 0355 	sub.w	r3, r0, #85	; 0x55
        snprintf(buf, sizeof buf, "%s:%d",
   2785e:	68ba      	ldr	r2, [r7, #8]
   27860:	9200      	str	r2, [sp, #0]
   27862:	4423      	add	r3, r4
   27864:	4a46      	ldr	r2, [pc, #280]	; (27980 <log_reboot_write+0x244>)
   27866:	f44f 7180 	mov.w	r1, #256	; 0x100
   2786a:	a852      	add	r0, sp, #328	; 0x148
   2786c:	f7e4 fb99 	bl	bfa2 <snprintf>
   27870:	a852      	add	r0, sp, #328	; 0x148
   27872:	f7e4 f86b 	bl	b94c <strlen>
   27876:	4602      	mov	r2, r0
   27878:	a952      	add	r1, sp, #328	; 0x148
   2787a:	a806      	add	r0, sp, #24
   2787c:	f7f1 fe18 	bl	194b0 <cbor_encode_text_string>
    if (info->pc != 0) {
   27880:	68fb      	ldr	r3, [r7, #12]
   27882:	2b00      	cmp	r3, #0
   27884:	d138      	bne.n	278f8 <log_reboot_write+0x1bc>
    state_flags = img_mgmt_state_flags(boot_current_slot);
   27886:	4b35      	ldr	r3, [pc, #212]	; (2795c <log_reboot_write+0x220>)
   27888:	6818      	ldr	r0, [r3, #0]
   2788a:	f7f0 fa25 	bl	17cd8 <img_mgmt_state_flags>
   2788e:	4605      	mov	r5, r0
   27890:	2205      	movs	r2, #5
   27892:	493c      	ldr	r1, [pc, #240]	; (27984 <log_reboot_write+0x248>)
   27894:	a806      	add	r0, sp, #24
   27896:	f7f1 fe0b 	bl	194b0 <cbor_encode_text_string>
    buf[0] = '\0';
   2789a:	2300      	movs	r3, #0
   2789c:	f88d 3148 	strb.w	r3, [sp, #328]	; 0x148
    if (state_flags & IMG_MGMT_STATE_F_ACTIVE) {
   278a0:	f015 0f04 	tst.w	r5, #4
   278a4:	d133      	bne.n	2790e <log_reboot_write+0x1d2>
    off = 0;
   278a6:	4634      	mov	r4, r6
    if (!(flags & IMAGE_F_NON_BOOTABLE)) {
   278a8:	9b05      	ldr	r3, [sp, #20]
   278aa:	f013 0f10 	tst.w	r3, #16
   278ae:	d037      	beq.n	27920 <log_reboot_write+0x1e4>
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED) {
   278b0:	f015 0f02 	tst.w	r5, #2
   278b4:	d13e      	bne.n	27934 <log_reboot_write+0x1f8>
    if (state_flags & IMG_MGMT_STATE_F_PENDING) {
   278b6:	f015 0f01 	tst.w	r5, #1
   278ba:	d145      	bne.n	27948 <log_reboot_write+0x20c>
    if (off > 1) {
   278bc:	2c01      	cmp	r4, #1
   278be:	dd03      	ble.n	278c8 <log_reboot_write+0x18c>
        buf[off - 1] = '\0';
   278c0:	3c01      	subs	r4, #1
   278c2:	ab52      	add	r3, sp, #328	; 0x148
   278c4:	2200      	movs	r2, #0
   278c6:	551a      	strb	r2, [r3, r4]
   278c8:	a852      	add	r0, sp, #328	; 0x148
   278ca:	f7e4 f83f 	bl	b94c <strlen>
   278ce:	4602      	mov	r2, r0
   278d0:	a952      	add	r1, sp, #328	; 0x148
   278d2:	a806      	add	r0, sp, #24
   278d4:	f7f1 fdec 	bl	194b0 <cbor_encode_text_string>
    cbor_buf_len = cbor_buf_writer_buffer_size(&writer, cbor_enc_buf) + 1;
   278d8:	a912      	add	r1, sp, #72	; 0x48
   278da:	a80e      	add	r0, sp, #56	; 0x38
   278dc:	f000 fda4 	bl	28428 <cbor_buf_writer_buffer_size>
    rc = cbor_encoder_close_container(&enc, &map);
   278e0:	a906      	add	r1, sp, #24
   278e2:	a80a      	add	r0, sp, #40	; 0x28
   278e4:	f7f1 fe02 	bl	194ec <cbor_encoder_close_container>
    if (rc != 0) {
   278e8:	2800      	cmp	r0, #0
   278ea:	f43f af34 	beq.w	27756 <log_reboot_write+0x1a>
        return SYS_ENOMEM;
   278ee:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   278f2:	e730      	b.n	27756 <log_reboot_write+0x1a>
        off  = 0;
   278f4:	4633      	mov	r3, r6
   278f6:	e7b2      	b.n	2785e <log_reboot_write+0x122>
   278f8:	2202      	movs	r2, #2
   278fa:	4923      	ldr	r1, [pc, #140]	; (27988 <log_reboot_write+0x24c>)
   278fc:	a806      	add	r0, sp, #24
   278fe:	f7f1 fdd7 	bl	194b0 <cbor_encode_text_string>
        cbor_encode_int(&map, info->pc);
   27902:	68fa      	ldr	r2, [r7, #12]
   27904:	2300      	movs	r3, #0
   27906:	a806      	add	r0, sp, #24
   27908:	f7f1 fd51 	bl	193ae <cbor_encode_int>
   2790c:	e7bb      	b.n	27886 <log_reboot_write+0x14a>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "active");
   2790e:	4b1f      	ldr	r3, [pc, #124]	; (2798c <log_reboot_write+0x250>)
   27910:	4a1f      	ldr	r2, [pc, #124]	; (27990 <log_reboot_write+0x254>)
   27912:	f44f 7180 	mov.w	r1, #256	; 0x100
   27916:	a852      	add	r0, sp, #328	; 0x148
   27918:	f7e4 fb43 	bl	bfa2 <snprintf>
   2791c:	2407      	movs	r4, #7
   2791e:	e7c3      	b.n	278a8 <log_reboot_write+0x16c>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "bootable");
   27920:	4b1c      	ldr	r3, [pc, #112]	; (27994 <log_reboot_write+0x258>)
   27922:	4a1b      	ldr	r2, [pc, #108]	; (27990 <log_reboot_write+0x254>)
   27924:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   27928:	a852      	add	r0, sp, #328	; 0x148
   2792a:	4420      	add	r0, r4
   2792c:	f7e4 fb39 	bl	bfa2 <snprintf>
   27930:	3409      	adds	r4, #9
   27932:	e7bd      	b.n	278b0 <log_reboot_write+0x174>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "confirmed");
   27934:	4b18      	ldr	r3, [pc, #96]	; (27998 <log_reboot_write+0x25c>)
   27936:	4a16      	ldr	r2, [pc, #88]	; (27990 <log_reboot_write+0x254>)
   27938:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   2793c:	a852      	add	r0, sp, #328	; 0x148
   2793e:	4420      	add	r0, r4
   27940:	f7e4 fb2f 	bl	bfa2 <snprintf>
   27944:	340a      	adds	r4, #10
   27946:	e7b6      	b.n	278b6 <log_reboot_write+0x17a>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "pending");
   27948:	4b14      	ldr	r3, [pc, #80]	; (2799c <log_reboot_write+0x260>)
   2794a:	4a11      	ldr	r2, [pc, #68]	; (27990 <log_reboot_write+0x254>)
   2794c:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   27950:	a852      	add	r0, sp, #328	; 0x148
   27952:	4420      	add	r0, r4
   27954:	f7e4 fb25 	bl	bfa2 <snprintf>
   27958:	3408      	adds	r4, #8
   2795a:	e7af      	b.n	278bc <log_reboot_write+0x180>
   2795c:	20008000 	.word	0x20008000
   27960:	000299c8 	.word	0x000299c8
   27964:	000299cc 	.word	0x000299cc
   27968:	200094c2 	.word	0x200094c2
   2796c:	000299d0 	.word	0x000299d0
   27970:	000299d4 	.word	0x000299d4
   27974:	00029308 	.word	0x00029308
   27978:	00029040 	.word	0x00029040
   2797c:	000299e0 	.word	0x000299e0
   27980:	000299e4 	.word	0x000299e4
   27984:	000299f0 	.word	0x000299f0
   27988:	000299ec 	.word	0x000299ec
   2798c:	00029330 	.word	0x00029330
   27990:	000299f8 	.word	0x000299f8
   27994:	00029310 	.word	0x00029310
   27998:	00029324 	.word	0x00029324
   2799c:	0002931c 	.word	0x0002931c

000279a0 <log_reboot>:
{
   279a0:	b538      	push	{r3, r4, r5, lr}
    if (log_reboot_written) {
   279a2:	4b0d      	ldr	r3, [pc, #52]	; (279d8 <log_reboot+0x38>)
   279a4:	f993 3000 	ldrsb.w	r3, [r3]
   279a8:	b113      	cbz	r3, 279b0 <log_reboot+0x10>
        return 0;
   279aa:	2500      	movs	r5, #0
}
   279ac:	4628      	mov	r0, r5
   279ae:	bd38      	pop	{r3, r4, r5, pc}
   279b0:	4604      	mov	r4, r0
    rc = log_reboot_write(info);
   279b2:	f7ff fec3 	bl	2773c <log_reboot_write>
    if (rc != 0) {
   279b6:	4605      	mov	r5, r0
   279b8:	2800      	cmp	r0, #0
   279ba:	d1f7      	bne.n	279ac <log_reboot+0xc>
    if (info->reason != HAL_RESET_REQUESTED &&
   279bc:	8823      	ldrh	r3, [r4, #0]
   279be:	2b06      	cmp	r3, #6
   279c0:	d0f4      	beq.n	279ac <log_reboot+0xc>
   279c2:	2b08      	cmp	r3, #8
   279c4:	d0f2      	beq.n	279ac <log_reboot+0xc>
        log_reboot_written = 1;
   279c6:	4b04      	ldr	r3, [pc, #16]	; (279d8 <log_reboot+0x38>)
   279c8:	2201      	movs	r2, #1
   279ca:	701a      	strb	r2, [r3, #0]
        conf_save_one("reboot/written", "1");
   279cc:	4903      	ldr	r1, [pc, #12]	; (279dc <log_reboot+0x3c>)
   279ce:	4804      	ldr	r0, [pc, #16]	; (279e0 <log_reboot+0x40>)
   279d0:	f7ee ff5e 	bl	16890 <conf_save_one>
   279d4:	e7ea      	b.n	279ac <log_reboot+0xc>
   279d6:	bf00      	nop
   279d8:	200094c0 	.word	0x200094c0
   279dc:	0002995c 	.word	0x0002995c
   279e0:	00029a10 	.word	0x00029a10

000279e4 <log_reboot_pkg_init>:

void
log_reboot_pkg_init(void)
{
   279e4:	b510      	push	{r4, lr}
   279e6:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   279e8:	4b17      	ldr	r3, [pc, #92]	; (27a48 <log_reboot_pkg_init+0x64>)
   279ea:	781b      	ldrb	r3, [r3, #0]
   279ec:	b143      	cbz	r3, 27a00 <log_reboot_pkg_init+0x1c>

    rc = conf_register(&reboot_conf_handler);
   279ee:	4817      	ldr	r0, [pc, #92]	; (27a4c <log_reboot_pkg_init+0x68>)
   279f0:	f7ee ffde 	bl	169b0 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   279f4:	b970      	cbnz	r0, 27a14 <log_reboot_pkg_init+0x30>
#if MYNEWT_VAL(REBOOT_LOG_FCB)
    rc = log_reboot_init_fcb();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
#if MYNEWT_VAL(REBOOT_LOG_CONSOLE)
    rc = log_reboot_init_console();
   279f6:	f7ff fde1 	bl	275bc <log_reboot_init_console>
    SYSINIT_PANIC_ASSERT(rc == 0);
   279fa:	b9c0      	cbnz	r0, 27a2e <log_reboot_pkg_init+0x4a>
#endif
}
   279fc:	b002      	add	sp, #8
   279fe:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   27a00:	f7e0 fbde 	bl	81c0 <hal_debugger_connected>
   27a04:	b100      	cbz	r0, 27a08 <log_reboot_pkg_init+0x24>
   27a06:	be01      	bkpt	0x0001
   27a08:	2300      	movs	r3, #0
   27a0a:	461a      	mov	r2, r3
   27a0c:	4619      	mov	r1, r3
   27a0e:	4618      	mov	r0, r3
   27a10:	f7e1 ffde 	bl	99d0 <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27a14:	f7e0 fbd4 	bl	81c0 <hal_debugger_connected>
   27a18:	b100      	cbz	r0, 27a1c <log_reboot_pkg_init+0x38>
   27a1a:	be01      	bkpt	0x0001
   27a1c:	2000      	movs	r0, #0
   27a1e:	9000      	str	r0, [sp, #0]
   27a20:	4b0b      	ldr	r3, [pc, #44]	; (27a50 <log_reboot_pkg_init+0x6c>)
   27a22:	681c      	ldr	r4, [r3, #0]
   27a24:	4603      	mov	r3, r0
   27a26:	4602      	mov	r2, r0
   27a28:	4601      	mov	r1, r0
   27a2a:	47a0      	blx	r4
   27a2c:	e7e3      	b.n	279f6 <log_reboot_pkg_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27a2e:	f7e0 fbc7 	bl	81c0 <hal_debugger_connected>
   27a32:	b100      	cbz	r0, 27a36 <log_reboot_pkg_init+0x52>
   27a34:	be01      	bkpt	0x0001
   27a36:	2000      	movs	r0, #0
   27a38:	9000      	str	r0, [sp, #0]
   27a3a:	4b05      	ldr	r3, [pc, #20]	; (27a50 <log_reboot_pkg_init+0x6c>)
   27a3c:	681c      	ldr	r4, [r3, #0]
   27a3e:	4603      	mov	r3, r0
   27a40:	4602      	mov	r2, r0
   27a42:	4601      	mov	r1, r0
   27a44:	47a0      	blx	r4
}
   27a46:	e7d9      	b.n	279fc <log_reboot_pkg_init+0x18>
   27a48:	20000506 	.word	0x20000506
   27a4c:	20000498 	.word	0x20000498
   27a50:	200000ec 	.word	0x200000ec

00027a54 <scfg_find_setting_by_val>:
static struct scfg_setting *
scfg_find_setting_by_val(const struct scfg_group *group, const void *val)
{
    const struct scfg_setting *setting;

    SCFG_FOREACH_SETTING(group, setting) {
   27a54:	6800      	ldr	r0, [r0, #0]
   27a56:	6803      	ldr	r3, [r0, #0]
   27a58:	b123      	cbz	r3, 27a64 <scfg_find_setting_by_val+0x10>
        if (setting->val == val) {
   27a5a:	6843      	ldr	r3, [r0, #4]
   27a5c:	428b      	cmp	r3, r1
   27a5e:	d002      	beq.n	27a66 <scfg_find_setting_by_val+0x12>
    SCFG_FOREACH_SETTING(group, setting) {
   27a60:	3010      	adds	r0, #16
   27a62:	e7f8      	b.n	27a56 <scfg_find_setting_by_val+0x2>
            /* Cast away const. */
            return (struct scfg_setting *)setting;
        }
    }

    return NULL;
   27a64:	2000      	movs	r0, #0
}
   27a66:	4770      	bx	lr

00027a68 <scfg_setting_id>:
{
   27a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27a6c:	4682      	mov	sl, r0
   27a6e:	4688      	mov	r8, r1
   27a70:	4614      	mov	r4, r2
    group_len = strlen(group_name);
   27a72:	f7e3 ff6b 	bl	b94c <strlen>
   27a76:	4605      	mov	r5, r0
    setting_len = strlen(setting_name);
   27a78:	4640      	mov	r0, r8
   27a7a:	f7e3 ff67 	bl	b94c <strlen>
    assert(group_len + 1 + setting_len < SCFG_SETTING_ID_BUF_SIZE);
   27a7e:	1c6f      	adds	r7, r5, #1
   27a80:	183e      	adds	r6, r7, r0
   27a82:	2e40      	cmp	r6, #64	; 0x40
   27a84:	dc10      	bgt.n	27aa8 <scfg_setting_id+0x40>
   27a86:	4681      	mov	r9, r0
    memcpy(&buf[off], group_name, group_len);
   27a88:	462a      	mov	r2, r5
   27a8a:	4651      	mov	r1, sl
   27a8c:	4620      	mov	r0, r4
   27a8e:	f7e3 feff 	bl	b890 <memcpy>
    buf[off] = '/';
   27a92:	232f      	movs	r3, #47	; 0x2f
   27a94:	5563      	strb	r3, [r4, r5]
    memcpy(&buf[off], setting_name, setting_len);
   27a96:	464a      	mov	r2, r9
   27a98:	4641      	mov	r1, r8
   27a9a:	19e0      	adds	r0, r4, r7
   27a9c:	f7e3 fef8 	bl	b890 <memcpy>
    buf[off] = '\0';
   27aa0:	2300      	movs	r3, #0
   27aa2:	55a3      	strb	r3, [r4, r6]
}
   27aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert(group_len + 1 + setting_len < SCFG_SETTING_ID_BUF_SIZE);
   27aa8:	f7e0 fb8a 	bl	81c0 <hal_debugger_connected>
   27aac:	b100      	cbz	r0, 27ab0 <scfg_setting_id+0x48>
   27aae:	be01      	bkpt	0x0001
   27ab0:	2300      	movs	r3, #0
   27ab2:	461a      	mov	r2, r3
   27ab4:	4619      	mov	r1, r3
   27ab6:	4618      	mov	r0, r3
   27ab8:	f7e1 ff8a 	bl	99d0 <__assert_func>

00027abc <scfg_handler_export>:
}

static int
scfg_handler_export(void (*func)(char *name, char *val),
                    enum conf_export_tgt tgt, void *arg)
{
   27abc:	b570      	push	{r4, r5, r6, lr}
   27abe:	b098      	sub	sp, #96	; 0x60
   27ac0:	4606      	mov	r6, r0
   27ac2:	4615      	mov	r5, r2
    char val_buf[SCFG_NUM_STR_BUF_SIZE];
    char *val;

    group = arg;

    SCFG_FOREACH_SETTING(group, setting) {
   27ac4:	6814      	ldr	r4, [r2, #0]
   27ac6:	e009      	b.n	27adc <scfg_handler_export+0x20>
        scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
        if (setting->private) {
            val = "<set>";
        } else {
            val = conf_str_from_value(setting->type, setting->val,
   27ac8:	2315      	movs	r3, #21
   27aca:	aa01      	add	r2, sp, #4
   27acc:	6861      	ldr	r1, [r4, #4]
   27ace:	7b20      	ldrb	r0, [r4, #12]
   27ad0:	f7ef f860 	bl	16b94 <conf_str_from_value>
   27ad4:	4601      	mov	r1, r0
                                      val_buf, sizeof val_buf);
        }
        func(id_buf, val);
   27ad6:	a807      	add	r0, sp, #28
   27ad8:	47b0      	blx	r6
    SCFG_FOREACH_SETTING(group, setting) {
   27ada:	3410      	adds	r4, #16
   27adc:	6821      	ldr	r1, [r4, #0]
   27ade:	b141      	cbz	r1, 27af2 <scfg_handler_export+0x36>
        scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
   27ae0:	aa07      	add	r2, sp, #28
   27ae2:	68a8      	ldr	r0, [r5, #8]
   27ae4:	f7ff ffc0 	bl	27a68 <scfg_setting_id>
        if (setting->private) {
   27ae8:	7b63      	ldrb	r3, [r4, #13]
   27aea:	2b00      	cmp	r3, #0
   27aec:	d0ec      	beq.n	27ac8 <scfg_handler_export+0xc>
            val = "<set>";
   27aee:	4902      	ldr	r1, [pc, #8]	; (27af8 <scfg_handler_export+0x3c>)
   27af0:	e7f1      	b.n	27ad6 <scfg_handler_export+0x1a>
    }

    return 0;
}
   27af2:	2000      	movs	r0, #0
   27af4:	b018      	add	sp, #96	; 0x60
   27af6:	bd70      	pop	{r4, r5, r6, pc}
   27af8:	00029a3c 	.word	0x00029a3c

00027afc <scfg_find_setting_by_name>:
{
   27afc:	b538      	push	{r3, r4, r5, lr}
   27afe:	460d      	mov	r5, r1
    SCFG_FOREACH_SETTING(group, setting) {
   27b00:	6804      	ldr	r4, [r0, #0]
   27b02:	6820      	ldr	r0, [r4, #0]
   27b04:	b128      	cbz	r0, 27b12 <scfg_find_setting_by_name+0x16>
        if (strcmp(setting->name, setting_name) == 0) {
   27b06:	4629      	mov	r1, r5
   27b08:	f7e3 ff12 	bl	b930 <strcmp>
   27b0c:	b110      	cbz	r0, 27b14 <scfg_find_setting_by_name+0x18>
    SCFG_FOREACH_SETTING(group, setting) {
   27b0e:	3410      	adds	r4, #16
   27b10:	e7f7      	b.n	27b02 <scfg_find_setting_by_name+0x6>
    return NULL;
   27b12:	2400      	movs	r4, #0
}
   27b14:	4620      	mov	r0, r4
   27b16:	bd38      	pop	{r3, r4, r5, pc}

00027b18 <scfg_handler_get>:
    if (argc < 1) {
   27b18:	2800      	cmp	r0, #0
   27b1a:	dd0e      	ble.n	27b3a <scfg_handler_get+0x22>
{
   27b1c:	b570      	push	{r4, r5, r6, lr}
   27b1e:	461d      	mov	r5, r3
   27b20:	4614      	mov	r4, r2
    setting = scfg_find_setting_by_name(group, argv[0]);
   27b22:	6809      	ldr	r1, [r1, #0]
   27b24:	9804      	ldr	r0, [sp, #16]
   27b26:	f7ff ffe9 	bl	27afc <scfg_find_setting_by_name>
    if (setting == NULL) {
   27b2a:	b140      	cbz	r0, 27b3e <scfg_handler_get+0x26>
    return conf_str_from_value(setting->type, setting->val, buf, max_len);
   27b2c:	462b      	mov	r3, r5
   27b2e:	4622      	mov	r2, r4
   27b30:	6841      	ldr	r1, [r0, #4]
   27b32:	7b00      	ldrb	r0, [r0, #12]
   27b34:	f7ef f82e 	bl	16b94 <conf_str_from_value>
}
   27b38:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   27b3a:	2000      	movs	r0, #0
}
   27b3c:	4770      	bx	lr
        return NULL;
   27b3e:	2000      	movs	r0, #0
   27b40:	e7fa      	b.n	27b38 <scfg_handler_get+0x20>

00027b42 <scfg_handler_set>:
    if (argc < 1) {
   27b42:	2800      	cmp	r0, #0
   27b44:	dd15      	ble.n	27b72 <scfg_handler_set+0x30>
{
   27b46:	b510      	push	{r4, lr}
   27b48:	4618      	mov	r0, r3
   27b4a:	4614      	mov	r4, r2
    setting = scfg_find_setting_by_name(group, argv[0]);
   27b4c:	6809      	ldr	r1, [r1, #0]
   27b4e:	f7ff ffd5 	bl	27afc <scfg_find_setting_by_name>
    if (setting == NULL) {
   27b52:	b190      	cbz	r0, 27b7a <scfg_handler_set+0x38>
    rc = conf_value_from_str(val, setting->type, setting->val,
   27b54:	6883      	ldr	r3, [r0, #8]
   27b56:	6842      	ldr	r2, [r0, #4]
   27b58:	7b01      	ldrb	r1, [r0, #12]
   27b5a:	4620      	mov	r0, r4
   27b5c:	f7ee ff6b 	bl	16a36 <conf_value_from_str>
    if (rc != 0) {
   27b60:	4603      	mov	r3, r0
   27b62:	b908      	cbnz	r0, 27b68 <scfg_handler_set+0x26>
}
   27b64:	4618      	mov	r0, r3
   27b66:	bd10      	pop	{r4, pc}
        return os_error_to_sys(rc);
   27b68:	b2c0      	uxtb	r0, r0
   27b6a:	f000 fd5b 	bl	28624 <os_error_to_sys>
   27b6e:	4603      	mov	r3, r0
   27b70:	e7f8      	b.n	27b64 <scfg_handler_set+0x22>
        return SYS_EINVAL;
   27b72:	f06f 0301 	mvn.w	r3, #1
}
   27b76:	4618      	mov	r0, r3
   27b78:	4770      	bx	lr
        return SYS_ENOENT;
   27b7a:	f06f 0303 	mvn.w	r3, #3
   27b7e:	e7f1      	b.n	27b64 <scfg_handler_set+0x22>

00027b80 <scfg_save_setting>:

int
scfg_save_setting(const struct scfg_group *group,
                  const struct scfg_setting *setting)
{
   27b80:	b570      	push	{r4, r5, r6, lr}
   27b82:	b098      	sub	sp, #96	; 0x60
   27b84:	4606      	mov	r6, r0
   27b86:	460c      	mov	r4, r1
    char id_buf[SCFG_SETTING_ID_BUF_SIZE];
    char val_buf[SCFG_NUM_STR_BUF_SIZE];
    char *val;
    int rc;

    val = conf_str_from_value(setting->type, setting->val,
   27b88:	2315      	movs	r3, #21
   27b8a:	aa01      	add	r2, sp, #4
   27b8c:	6849      	ldr	r1, [r1, #4]
   27b8e:	7b20      	ldrb	r0, [r4, #12]
   27b90:	f7ef f800 	bl	16b94 <conf_str_from_value>
                              val_buf, sizeof val_buf);
    if (val == NULL) {
   27b94:	b198      	cbz	r0, 27bbe <scfg_save_setting+0x3e>
   27b96:	4605      	mov	r5, r0
        return SYS_EUNKNOWN;
    }

    scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
   27b98:	aa07      	add	r2, sp, #28
   27b9a:	6821      	ldr	r1, [r4, #0]
   27b9c:	68b0      	ldr	r0, [r6, #8]
   27b9e:	f7ff ff63 	bl	27a68 <scfg_setting_id>

    rc = conf_save_one(id_buf, val);
   27ba2:	4629      	mov	r1, r5
   27ba4:	a807      	add	r0, sp, #28
   27ba6:	f7ee fe73 	bl	16890 <conf_save_one>
    if (rc != 0) {
   27baa:	4603      	mov	r3, r0
   27bac:	b910      	cbnz	r0, 27bb4 <scfg_save_setting+0x34>
        return os_error_to_sys(rc);
    }

    return 0;
}
   27bae:	4618      	mov	r0, r3
   27bb0:	b018      	add	sp, #96	; 0x60
   27bb2:	bd70      	pop	{r4, r5, r6, pc}
        return os_error_to_sys(rc);
   27bb4:	b2c0      	uxtb	r0, r0
   27bb6:	f000 fd35 	bl	28624 <os_error_to_sys>
   27bba:	4603      	mov	r3, r0
   27bbc:	e7f7      	b.n	27bae <scfg_save_setting+0x2e>
        return SYS_EUNKNOWN;
   27bbe:	f06f 030c 	mvn.w	r3, #12
   27bc2:	e7f4      	b.n	27bae <scfg_save_setting+0x2e>

00027bc4 <scfg_save_val>:
    return scfg_save_setting(group, setting);
}

int
scfg_save_val(const struct scfg_group *group, const void *val)
{
   27bc4:	b510      	push	{r4, lr}
   27bc6:	4604      	mov	r4, r0
    const struct scfg_setting *setting;

    setting = scfg_find_setting_by_val(group, val);
   27bc8:	f7ff ff44 	bl	27a54 <scfg_find_setting_by_val>
    if (setting == NULL) {
   27bcc:	b120      	cbz	r0, 27bd8 <scfg_save_val+0x14>
   27bce:	4601      	mov	r1, r0
        return SYS_ENOENT;
    }

    return scfg_save_setting(group, setting);
   27bd0:	4620      	mov	r0, r4
   27bd2:	f7ff ffd5 	bl	27b80 <scfg_save_setting>
}
   27bd6:	bd10      	pop	{r4, pc}
        return SYS_ENOENT;
   27bd8:	f06f 0003 	mvn.w	r0, #3
   27bdc:	e7fb      	b.n	27bd6 <scfg_save_val+0x12>
	...

00027be0 <scfg_register>:

int
scfg_register(struct scfg_group *group, char *name)
{
   27be0:	b570      	push	{r4, r5, r6, lr}
    const struct scfg_setting *setting;
    int rc;

    SCFG_FOREACH_SETTING(group, setting) {
   27be2:	6802      	ldr	r2, [r0, #0]
   27be4:	e000      	b.n	27be8 <scfg_register+0x8>
   27be6:	3210      	adds	r2, #16
   27be8:	6813      	ldr	r3, [r2, #0]
   27bea:	b30b      	cbz	r3, 27c30 <scfg_register+0x50>
        switch (setting->type) {
   27bec:	7b13      	ldrb	r3, [r2, #12]
   27bee:	3b02      	subs	r3, #2
   27bf0:	2b0c      	cmp	r3, #12
   27bf2:	d83b      	bhi.n	27c6c <scfg_register+0x8c>
   27bf4:	a401      	add	r4, pc, #4	; (adr r4, 27bfc <scfg_register+0x1c>)
   27bf6:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
   27bfa:	bf00      	nop
   27bfc:	00027be7 	.word	0x00027be7
   27c00:	00027be7 	.word	0x00027be7
   27c04:	00027be7 	.word	0x00027be7
   27c08:	00027be7 	.word	0x00027be7
   27c0c:	00027be7 	.word	0x00027be7
   27c10:	00027c6d 	.word	0x00027c6d
   27c14:	00027c6d 	.word	0x00027c6d
   27c18:	00027c6d 	.word	0x00027c6d
   27c1c:	00027be7 	.word	0x00027be7
   27c20:	00027be7 	.word	0x00027be7
   27c24:	00027be7 	.word	0x00027be7
   27c28:	00027be7 	.word	0x00027be7
   27c2c:	00027be7 	.word	0x00027be7
   27c30:	460d      	mov	r5, r1
   27c32:	4604      	mov	r4, r0
            /* We don't know how to (de)serialize the other data types. */
            return SYS_EINVAL;
        }
    }

    group->handler = (struct conf_handler) {
   27c34:	1d06      	adds	r6, r0, #4
   27c36:	2220      	movs	r2, #32
   27c38:	2100      	movs	r1, #0
   27c3a:	4630      	mov	r0, r6
   27c3c:	f7e3 fe51 	bl	b8e2 <memset>
   27c40:	60a5      	str	r5, [r4, #8]
   27c42:	2301      	movs	r3, #1
   27c44:	7323      	strb	r3, [r4, #12]
   27c46:	4b0b      	ldr	r3, [pc, #44]	; (27c74 <scfg_register+0x94>)
   27c48:	6123      	str	r3, [r4, #16]
   27c4a:	4b0b      	ldr	r3, [pc, #44]	; (27c78 <scfg_register+0x98>)
   27c4c:	6163      	str	r3, [r4, #20]
   27c4e:	4b0b      	ldr	r3, [pc, #44]	; (27c7c <scfg_register+0x9c>)
   27c50:	61e3      	str	r3, [r4, #28]
   27c52:	6224      	str	r4, [r4, #32]
        .ch_export_ext = scfg_handler_export,
        .ch_arg = group,
        .ch_ext = true,
    };

    rc = conf_register(&group->handler);
   27c54:	4630      	mov	r0, r6
   27c56:	f7ee feab 	bl	169b0 <conf_register>
    if (rc != 0) {
   27c5a:	4603      	mov	r3, r0
   27c5c:	b908      	cbnz	r0, 27c62 <scfg_register+0x82>
        return os_error_to_sys(rc);
    }

    return 0;
}
   27c5e:	4618      	mov	r0, r3
   27c60:	bd70      	pop	{r4, r5, r6, pc}
        return os_error_to_sys(rc);
   27c62:	b2c0      	uxtb	r0, r0
   27c64:	f000 fcde 	bl	28624 <os_error_to_sys>
   27c68:	4603      	mov	r3, r0
   27c6a:	e7f8      	b.n	27c5e <scfg_register+0x7e>
            return SYS_EINVAL;
   27c6c:	f06f 0301 	mvn.w	r3, #1
   27c70:	e7f5      	b.n	27c5e <scfg_register+0x7e>
   27c72:	bf00      	nop
   27c74:	00027b19 	.word	0x00027b19
   27c78:	00027b43 	.word	0x00027b43
   27c7c:	00027abd 	.word	0x00027abd

00027c80 <ull_to_s>:
#include <stdbool.h>
#include "util/mcumgr_util.h"

int
ull_to_s(unsigned long long val, int dst_max_len, char *dst)
{
   27c80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27c84:	4604      	mov	r4, r0
   27c86:	460d      	mov	r5, r1
   27c88:	4699      	mov	r9, r3
    int digit;
    int off;
    int len;

    /* First, calculate the length of the resulting string. */
    copy = val;
   27c8a:	4603      	mov	r3, r0
    for (len = 0; copy != 0; len++) {
   27c8c:	2700      	movs	r7, #0
   27c8e:	e004      	b.n	27c9a <ull_to_s+0x1a>
        copy /= 10;
   27c90:	4916      	ldr	r1, [pc, #88]	; (27cec <ull_to_s+0x6c>)
   27c92:	fba1 1303 	umull	r1, r3, r1, r3
   27c96:	08db      	lsrs	r3, r3, #3
    for (len = 0; copy != 0; len++) {
   27c98:	3701      	adds	r7, #1
   27c9a:	2b00      	cmp	r3, #0
   27c9c:	d1f8      	bne.n	27c90 <ull_to_s+0x10>
    }

    /* A value of 0 still requires one character ("0"). */
    if (len == 0) {
   27c9e:	b907      	cbnz	r7, 27ca2 <ull_to_s+0x22>
        len = 1;
   27ca0:	2701      	movs	r7, #1
    }

    /* Ensure the buffer can accommodate the string and terminator. */
    if (len >= dst_max_len - 1) {
   27ca2:	3a01      	subs	r2, #1
   27ca4:	42ba      	cmp	r2, r7
   27ca6:	dd1d      	ble.n	27ce4 <ull_to_s+0x64>
        return -1;
    }

    /* Encode the string from right to left. */
    off = len;
    dst[off--] = '\0';
   27ca8:	1e7e      	subs	r6, r7, #1
   27caa:	2300      	movs	r3, #0
   27cac:	f809 3007 	strb.w	r3, [r9, r7]
    do {
        digit = val % 10;
   27cb0:	220a      	movs	r2, #10
   27cb2:	2300      	movs	r3, #0
   27cb4:	4620      	mov	r0, r4
   27cb6:	4629      	mov	r1, r5
   27cb8:	f7e4 f9ee 	bl	c098 <__aeabi_uldivmod>
        dst[off--] = '0' + digit;
   27cbc:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   27cc0:	3230      	adds	r2, #48	; 0x30
   27cc2:	f809 2006 	strb.w	r2, [r9, r6]

        val /= 10;
   27cc6:	220a      	movs	r2, #10
   27cc8:	2300      	movs	r3, #0
   27cca:	4620      	mov	r0, r4
   27ccc:	4629      	mov	r1, r5
   27cce:	f7e4 f9e3 	bl	c098 <__aeabi_uldivmod>
   27cd2:	4604      	mov	r4, r0
   27cd4:	460d      	mov	r5, r1
        dst[off--] = '0' + digit;
   27cd6:	4646      	mov	r6, r8
    } while (val > 0);
   27cd8:	ea54 0305 	orrs.w	r3, r4, r5
   27cdc:	d1e8      	bne.n	27cb0 <ull_to_s+0x30>

    return len;
}
   27cde:	4638      	mov	r0, r7
   27ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return -1;
   27ce4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   27ce8:	e7f9      	b.n	27cde <ull_to_s+0x5e>
   27cea:	bf00      	nop
   27cec:	cccccccd 	.word	0xcccccccd

00027cf0 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   27cf0:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   27cf2:	4803      	ldr	r0, [pc, #12]	; (27d00 <__wrap_coap_receive+0x10>)
   27cf4:	f7e1 fb08 	bl	9308 <console_printf>
    return -1;
}
   27cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27cfc:	bd08      	pop	{r3, pc}
   27cfe:	bf00      	nop
   27d00:	00029a44 	.word	0x00029a44

00027d04 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   27d04:	4770      	bx	lr

00027d06 <valid_attr_type>:
 * one-to-one because of signedness of integers
 * and therefore we need a function to do this trickery */
static int
valid_attr_type(CborType ct, CborAttrType at)
{
    switch (at) {
   27d06:	3901      	subs	r1, #1
   27d08:	290a      	cmp	r1, #10
   27d0a:	d82a      	bhi.n	27d62 <valid_attr_type+0x5c>
   27d0c:	e8df f001 	tbb	[pc, r1]
   27d10:	0d090606 	.word	0x0d090606
   27d14:	1d191511 	.word	0x1d191511
   27d18:	2921      	.short	0x2921
   27d1a:	25          	.byte	0x25
   27d1b:	00          	.byte	0x00
    case CborAttrIntegerType:
    case CborAttrUnsignedIntegerType:
        if (ct == CborIntegerType) {
   27d1c:	b318      	cbz	r0, 27d66 <valid_attr_type+0x60>
        }
        break;
    default:
        break;
    }
    return 0;
   27d1e:	2000      	movs	r0, #0
   27d20:	4770      	bx	lr
        if (ct == CborByteStringType) {
   27d22:	2840      	cmp	r0, #64	; 0x40
   27d24:	d021      	beq.n	27d6a <valid_attr_type+0x64>
    return 0;
   27d26:	2000      	movs	r0, #0
   27d28:	4770      	bx	lr
        if (ct == CborTextStringType) {
   27d2a:	2860      	cmp	r0, #96	; 0x60
   27d2c:	d01f      	beq.n	27d6e <valid_attr_type+0x68>
    return 0;
   27d2e:	2000      	movs	r0, #0
   27d30:	4770      	bx	lr
        if (ct == CborBooleanType) {
   27d32:	28f5      	cmp	r0, #245	; 0xf5
   27d34:	d01d      	beq.n	27d72 <valid_attr_type+0x6c>
    return 0;
   27d36:	2000      	movs	r0, #0
   27d38:	4770      	bx	lr
        if (ct == CborFloatType) {
   27d3a:	28fa      	cmp	r0, #250	; 0xfa
   27d3c:	d01b      	beq.n	27d76 <valid_attr_type+0x70>
    return 0;
   27d3e:	2000      	movs	r0, #0
   27d40:	4770      	bx	lr
        if (ct == CborDoubleType) {
   27d42:	28fb      	cmp	r0, #251	; 0xfb
   27d44:	d019      	beq.n	27d7a <valid_attr_type+0x74>
    return 0;
   27d46:	2000      	movs	r0, #0
   27d48:	4770      	bx	lr
        if (ct == CborArrayType) {
   27d4a:	2880      	cmp	r0, #128	; 0x80
   27d4c:	d017      	beq.n	27d7e <valid_attr_type+0x78>
    return 0;
   27d4e:	2000      	movs	r0, #0
   27d50:	4770      	bx	lr
        if (ct == CborMapType) {
   27d52:	28a0      	cmp	r0, #160	; 0xa0
   27d54:	d015      	beq.n	27d82 <valid_attr_type+0x7c>
    return 0;
   27d56:	2000      	movs	r0, #0
   27d58:	4770      	bx	lr
        if (ct == CborNullType) {
   27d5a:	28f6      	cmp	r0, #246	; 0xf6
   27d5c:	d013      	beq.n	27d86 <valid_attr_type+0x80>
    return 0;
   27d5e:	2000      	movs	r0, #0
   27d60:	4770      	bx	lr
   27d62:	2000      	movs	r0, #0
   27d64:	4770      	bx	lr
            return 1;
   27d66:	2001      	movs	r0, #1
   27d68:	4770      	bx	lr
            return 1;
   27d6a:	2001      	movs	r0, #1
   27d6c:	4770      	bx	lr
            return 1;
   27d6e:	2001      	movs	r0, #1
   27d70:	4770      	bx	lr
            return 1;
   27d72:	2001      	movs	r0, #1
   27d74:	4770      	bx	lr
            return 1;
   27d76:	2001      	movs	r0, #1
   27d78:	4770      	bx	lr
            return 1;
   27d7a:	2001      	movs	r0, #1
   27d7c:	4770      	bx	lr
            return 1;
   27d7e:	2001      	movs	r0, #1
   27d80:	4770      	bx	lr
            return 1;
   27d82:	2001      	movs	r0, #1
   27d84:	4770      	bx	lr
            return 1;
   27d86:	2001      	movs	r0, #1
}
   27d88:	4770      	bx	lr

00027d8a <cbor_target_address>:
cbor_target_address(const struct cbor_attr_t *cursor,
                    const struct cbor_array_t *parent, int offset)
{
    char *targetaddr = NULL;

    if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   27d8a:	460b      	mov	r3, r1
   27d8c:	b111      	cbz	r1, 27d94 <cbor_target_address+0xa>
   27d8e:	7809      	ldrb	r1, [r1, #0]
   27d90:	290a      	cmp	r1, #10
   27d92:	d020      	beq.n	27dd6 <cbor_target_address+0x4c>
        /* ordinary case - use the address in the cursor structure */
        switch (cursor->type) {
   27d94:	7903      	ldrb	r3, [r0, #4]
   27d96:	3b01      	subs	r3, #1
   27d98:	2b06      	cmp	r3, #6
   27d9a:	d823      	bhi.n	27de4 <cbor_target_address+0x5a>
   27d9c:	e8df f003 	tbb	[pc, r3]
   27da0:	16140804 	.word	0x16140804
   27da4:	0c18      	.short	0x0c18
   27da6:	10          	.byte	0x10
   27da7:	00          	.byte	0x00
        case CborAttrNullType:
            targetaddr = NULL;
            break;
        case CborAttrIntegerType:
            targetaddr = (char *)&cursor->addr.integer[offset];
   27da8:	6880      	ldr	r0, [r0, #8]
   27daa:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   27dae:	4770      	bx	lr
        case CborAttrUnsignedIntegerType:
            targetaddr = (char *)&cursor->addr.uinteger[offset];
   27db0:	6880      	ldr	r0, [r0, #8]
   27db2:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   27db6:	4770      	bx	lr
#if FLOAT_SUPPORT
        case CborAttrFloatType:
            targetaddr = (char *)&cursor->addr.fval[offset];
   27db8:	6880      	ldr	r0, [r0, #8]
   27dba:	eb00 0082 	add.w	r0, r0, r2, lsl #2
            break;
   27dbe:	4770      	bx	lr
        case CborAttrDoubleType:
            targetaddr = (char *)&cursor->addr.real[offset];
   27dc0:	6880      	ldr	r0, [r0, #8]
   27dc2:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   27dc6:	4770      	bx	lr
#endif
        case CborAttrByteStringType:
            targetaddr = (char *) cursor->addr.bytestring.data;
   27dc8:	6880      	ldr	r0, [r0, #8]
            break;
   27dca:	4770      	bx	lr
        case CborAttrTextStringType:
            targetaddr = cursor->addr.string;
   27dcc:	6880      	ldr	r0, [r0, #8]
            break;
   27dce:	4770      	bx	lr
        case CborAttrBooleanType:
            targetaddr = (char *)&cursor->addr.boolean[offset];
   27dd0:	6880      	ldr	r0, [r0, #8]
   27dd2:	4410      	add	r0, r2
            break;
   27dd4:	4770      	bx	lr
            break;
        }
    } else {
        /* tricky case - hacking a member in an array of structures */
        targetaddr =
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   27dd6:	6899      	ldr	r1, [r3, #8]
   27dd8:	68db      	ldr	r3, [r3, #12]
            cursor->addr.offset;
   27dda:	6880      	ldr	r0, [r0, #8]
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   27ddc:	fb03 0002 	mla	r0, r3, r2, r0
        targetaddr =
   27de0:	4408      	add	r0, r1
   27de2:	4770      	bx	lr
            targetaddr = NULL;
   27de4:	2000      	movs	r0, #0
    }
    return targetaddr;
}
   27de6:	4770      	bx	lr

00027de8 <cbor_read_array>:
    return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   27de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27dec:	b089      	sub	sp, #36	; 0x24
   27dee:	4680      	mov	r8, r0
   27df0:	460c      	mov	r4, r1
    int off, arrcount;
    size_t len;
    void *lptr;
    char *tp;

    err = cbor_value_enter_container(value, &elem);
   27df2:	a904      	add	r1, sp, #16
   27df4:	f7f1 fe4c 	bl	19a90 <cbor_value_enter_container>
    if (err) {
   27df8:	4605      	mov	r5, r0
   27dfa:	2800      	cmp	r0, #0
   27dfc:	f040 810b 	bne.w	28016 <cbor_read_array+0x22e>
        return err;
    }
    arrcount = 0;
    tp = arr->arr.strings.store;
   27e00:	68a7      	ldr	r7, [r4, #8]
    for (off = 0; off < arr->maxlen; off++) {
   27e02:	2600      	movs	r6, #0
   27e04:	e0ce      	b.n	27fa4 <cbor_read_array+0x1bc>
        switch (arr->element_type) {
        case CborAttrBooleanType:
            lptr = &arr->arr.booleans.store[off];
   27e06:	6862      	ldr	r2, [r4, #4]
{ return value->type == CborBooleanType; }
   27e08:	f89d 301e 	ldrb.w	r3, [sp, #30]
    assert(cbor_value_is_boolean(value));
   27e0c:	2bf5      	cmp	r3, #245	; 0xf5
   27e0e:	d106      	bne.n	27e1e <cbor_read_array+0x36>
    *result = !!value->extra;
   27e10:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   27e14:	3300      	adds	r3, #0
   27e16:	bf18      	it	ne
   27e18:	2301      	movne	r3, #1
   27e1a:	5593      	strb	r3, [r2, r6]
            err |= cbor_value_get_boolean(&elem, lptr);
            break;
   27e1c:	e0b8      	b.n	27f90 <cbor_read_array+0x1a8>
    assert(cbor_value_is_boolean(value));
   27e1e:	f7e0 f9cf 	bl	81c0 <hal_debugger_connected>
   27e22:	b100      	cbz	r0, 27e26 <cbor_read_array+0x3e>
   27e24:	be01      	bkpt	0x0001
   27e26:	2300      	movs	r3, #0
   27e28:	461a      	mov	r2, r3
   27e2a:	4619      	mov	r1, r3
   27e2c:	4618      	mov	r0, r3
   27e2e:	f7e1 fdcf 	bl	99d0 <__assert_func>
        case CborAttrIntegerType:
            lptr = &arr->arr.integers.store[off];
   27e32:	6863      	ldr	r3, [r4, #4]
   27e34:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
{ return value->type == CborIntegerType; }
   27e38:	f89d 301e 	ldrb.w	r3, [sp, #30]
    assert(cbor_value_is_integer(value));
   27e3c:	b9bb      	cbnz	r3, 27e6e <cbor_read_array+0x86>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   27e3e:	f89d 301f 	ldrb.w	r3, [sp, #31]
                _cbor_value_decode_int64_internal(value) : value->extra;
   27e42:	f013 0f01 	tst.w	r3, #1
   27e46:	d11c      	bne.n	27e82 <cbor_read_array+0x9a>
   27e48:	f8bd a01c 	ldrh.w	sl, [sp, #28]
   27e4c:	f04f 0b00 	mov.w	fp, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   27e50:	e9c9 ab00 	strd	sl, fp, [r9]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   27e54:	f89d 301f 	ldrb.w	r3, [sp, #31]
   27e58:	f013 0f02 	tst.w	r3, #2
   27e5c:	f000 8098 	beq.w	27f90 <cbor_read_array+0x1a8>
        *result = -*result - 1;
   27e60:	ea6f 000a 	mvn.w	r0, sl
   27e64:	ea6f 010b 	mvn.w	r1, fp
   27e68:	e9c9 0100 	strd	r0, r1, [r9]
            err |= cbor_value_get_int64(&elem, lptr);
            break;
   27e6c:	e090      	b.n	27f90 <cbor_read_array+0x1a8>
    assert(cbor_value_is_integer(value));
   27e6e:	f7e0 f9a7 	bl	81c0 <hal_debugger_connected>
   27e72:	b100      	cbz	r0, 27e76 <cbor_read_array+0x8e>
   27e74:	be01      	bkpt	0x0001
   27e76:	2300      	movs	r3, #0
   27e78:	461a      	mov	r2, r3
   27e7a:	4619      	mov	r1, r3
   27e7c:	4618      	mov	r0, r3
   27e7e:	f7e1 fda7 	bl	99d0 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   27e82:	a804      	add	r0, sp, #16
   27e84:	f7f1 fdac 	bl	199e0 <_cbor_value_decode_int64_internal>
   27e88:	4682      	mov	sl, r0
   27e8a:	468b      	mov	fp, r1
   27e8c:	e7e0      	b.n	27e50 <cbor_read_array+0x68>
        case CborAttrUnsignedIntegerType:
            lptr = &arr->arr.uintegers.store[off];
   27e8e:	6863      	ldr	r3, [r4, #4]
   27e90:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
{ return value->type == CborIntegerType; }
   27e94:	f89d 301e 	ldrb.w	r3, [sp, #30]
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   27e98:	b933      	cbnz	r3, 27ea8 <cbor_read_array+0xc0>
   27e9a:	f89d 301f 	ldrb.w	r3, [sp, #31]
   27e9e:	f013 0f02 	tst.w	r3, #2
   27ea2:	d00e      	beq.n	27ec2 <cbor_read_array+0xda>
   27ea4:	2300      	movs	r3, #0
   27ea6:	e000      	b.n	27eaa <cbor_read_array+0xc2>
   27ea8:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   27eaa:	b163      	cbz	r3, 27ec6 <cbor_read_array+0xde>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   27eac:	f89d 301f 	ldrb.w	r3, [sp, #31]
                _cbor_value_decode_int64_internal(value) : value->extra;
   27eb0:	f013 0f01 	tst.w	r3, #1
   27eb4:	d111      	bne.n	27eda <cbor_read_array+0xf2>
   27eb6:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   27eba:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   27ebc:	e9c9 0100 	strd	r0, r1, [r9]
            err |= cbor_value_get_uint64(&elem, lptr);
            break;
   27ec0:	e066      	b.n	27f90 <cbor_read_array+0x1a8>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   27ec2:	2301      	movs	r3, #1
   27ec4:	e7f1      	b.n	27eaa <cbor_read_array+0xc2>
    assert(cbor_value_is_unsigned_integer(value));
   27ec6:	f7e0 f97b 	bl	81c0 <hal_debugger_connected>
   27eca:	b100      	cbz	r0, 27ece <cbor_read_array+0xe6>
   27ecc:	be01      	bkpt	0x0001
   27ece:	2300      	movs	r3, #0
   27ed0:	461a      	mov	r2, r3
   27ed2:	4619      	mov	r1, r3
   27ed4:	4618      	mov	r0, r3
   27ed6:	f7e1 fd7b 	bl	99d0 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   27eda:	a804      	add	r0, sp, #16
   27edc:	f7f1 fd80 	bl	199e0 <_cbor_value_decode_int64_internal>
   27ee0:	e7ec      	b.n	27ebc <cbor_read_array+0xd4>
#if FLOAT_SUPPORT
        case CborAttrFloatType:
        case CborAttrDoubleType:
            lptr = &arr->arr.reals.store[off];
   27ee2:	f8d4 a004 	ldr.w	sl, [r4, #4]
   27ee6:	ea4f 09c6 	mov.w	r9, r6, lsl #3
   27eea:	eb0a 0b09 	add.w	fp, sl, r9
    memcpy(result, &data, sizeof(*result));
    return CborNoError;
}

CBOR_INLINE_API bool cbor_value_is_double(const CborValue *value)
{ return value->type == CborDoubleType; }
   27eee:	f89d 301e 	ldrb.w	r3, [sp, #30]
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
    assert(cbor_value_is_double(value));
   27ef2:	2bfb      	cmp	r3, #251	; 0xfb
   27ef4:	d110      	bne.n	27f18 <cbor_read_array+0x130>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   27ef6:	f89d 301f 	ldrb.w	r3, [sp, #31]
   27efa:	f013 0f01 	tst.w	r3, #1
   27efe:	d015      	beq.n	27f2c <cbor_read_array+0x144>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   27f00:	a804      	add	r0, sp, #16
   27f02:	f7f1 fd6d 	bl	199e0 <_cbor_value_decode_int64_internal>
   27f06:	ab08      	add	r3, sp, #32
   27f08:	e963 0108 	strd	r0, r1, [r3, #-32]!
    memcpy(result, &data, sizeof(*result));
   27f0c:	cb03      	ldmia	r3!, {r0, r1}
   27f0e:	f84a 0009 	str.w	r0, [sl, r9]
   27f12:	f8cb 1004 	str.w	r1, [fp, #4]
            err |= cbor_value_get_double(&elem, lptr);
            break;
   27f16:	e03b      	b.n	27f90 <cbor_read_array+0x1a8>
    assert(cbor_value_is_double(value));
   27f18:	f7e0 f952 	bl	81c0 <hal_debugger_connected>
   27f1c:	b100      	cbz	r0, 27f20 <cbor_read_array+0x138>
   27f1e:	be01      	bkpt	0x0001
   27f20:	2300      	movs	r3, #0
   27f22:	461a      	mov	r2, r3
   27f24:	4619      	mov	r1, r3
   27f26:	4618      	mov	r0, r3
   27f28:	f7e1 fd52 	bl	99d0 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   27f2c:	f7e0 f948 	bl	81c0 <hal_debugger_connected>
   27f30:	b100      	cbz	r0, 27f34 <cbor_read_array+0x14c>
   27f32:	be01      	bkpt	0x0001
   27f34:	2300      	movs	r3, #0
   27f36:	461a      	mov	r2, r3
   27f38:	4619      	mov	r1, r3
   27f3a:	4618      	mov	r0, r3
   27f3c:	f7e1 fd48 	bl	99d0 <__assert_func>
#endif
        case CborAttrTextStringType:
            len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   27f40:	68e3      	ldr	r3, [r4, #12]
   27f42:	68a2      	ldr	r2, [r4, #8]
   27f44:	1aba      	subs	r2, r7, r2
   27f46:	1a9b      	subs	r3, r3, r2
   27f48:	9303      	str	r3, [sp, #12]
{ return value->type == CborTextStringType; }
   27f4a:	f89d 301e 	ldrb.w	r3, [sp, #30]
    assert(cbor_value_is_text_string(value));
   27f4e:	2b60      	cmp	r3, #96	; 0x60
   27f50:	d10d      	bne.n	27f6e <cbor_read_array+0x186>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   27f52:	2300      	movs	r3, #0
   27f54:	aa03      	add	r2, sp, #12
   27f56:	4639      	mov	r1, r7
   27f58:	a804      	add	r0, sp, #16
   27f5a:	f7f1 fe67 	bl	19c2c <_cbor_value_copy_string>
            err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   27f5e:	4305      	orrs	r5, r0
            arr->arr.strings.ptrs[off] = tp;
   27f60:	6863      	ldr	r3, [r4, #4]
   27f62:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
            tp += len + 1;
   27f66:	9b03      	ldr	r3, [sp, #12]
   27f68:	3301      	adds	r3, #1
   27f6a:	441f      	add	r7, r3
            break;
   27f6c:	e010      	b.n	27f90 <cbor_read_array+0x1a8>
    assert(cbor_value_is_text_string(value));
   27f6e:	f7e0 f927 	bl	81c0 <hal_debugger_connected>
   27f72:	b100      	cbz	r0, 27f76 <cbor_read_array+0x18e>
   27f74:	be01      	bkpt	0x0001
   27f76:	2300      	movs	r3, #0
   27f78:	461a      	mov	r2, r3
   27f7a:	4619      	mov	r1, r3
   27f7c:	4618      	mov	r0, r3
   27f7e:	f7e1 fd27 	bl	99d0 <__assert_func>
        case CborAttrStructObjectType:
            err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype,
   27f82:	4633      	mov	r3, r6
   27f84:	4622      	mov	r2, r4
   27f86:	6861      	ldr	r1, [r4, #4]
   27f88:	a804      	add	r0, sp, #16
   27f8a:	f000 f847 	bl	2801c <cbor_internal_read_object>
   27f8e:	4305      	orrs	r5, r0
            break;
        default:
            err |= CborErrorIllegalType;
            break;
        }
        arrcount++;
   27f90:	3601      	adds	r6, #1
        if (arr->element_type != CborAttrStructObjectType) {
   27f92:	7823      	ldrb	r3, [r4, #0]
   27f94:	2b0a      	cmp	r3, #10
   27f96:	d126      	bne.n	27fe6 <cbor_read_array+0x1fe>
{ return value && value->type != CborInvalidType; }
   27f98:	f89d 301e 	ldrb.w	r3, [sp, #30]
   27f9c:	2bff      	cmp	r3, #255	; 0xff
   27f9e:	d027      	beq.n	27ff0 <cbor_read_array+0x208>
   27fa0:	2301      	movs	r3, #1
            err |= cbor_value_advance(&elem);
        }
        if (!cbor_value_is_valid(&elem)) {
   27fa2:	b33b      	cbz	r3, 27ff4 <cbor_read_array+0x20c>
    for (off = 0; off < arr->maxlen; off++) {
   27fa4:	6963      	ldr	r3, [r4, #20]
   27fa6:	42b3      	cmp	r3, r6
   27fa8:	dd24      	ble.n	27ff4 <cbor_read_array+0x20c>
        switch (arr->element_type) {
   27faa:	7823      	ldrb	r3, [r4, #0]
   27fac:	3b01      	subs	r3, #1
   27fae:	2b09      	cmp	r3, #9
   27fb0:	d816      	bhi.n	27fe0 <cbor_read_array+0x1f8>
   27fb2:	a201      	add	r2, pc, #4	; (adr r2, 27fb8 <cbor_read_array+0x1d0>)
   27fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27fb8:	00027e33 	.word	0x00027e33
   27fbc:	00027e8f 	.word	0x00027e8f
   27fc0:	00027fe1 	.word	0x00027fe1
   27fc4:	00027f41 	.word	0x00027f41
   27fc8:	00027e07 	.word	0x00027e07
   27fcc:	00027ee3 	.word	0x00027ee3
   27fd0:	00027ee3 	.word	0x00027ee3
   27fd4:	00027fe1 	.word	0x00027fe1
   27fd8:	00027fe1 	.word	0x00027fe1
   27fdc:	00027f83 	.word	0x00027f83
            err |= CborErrorIllegalType;
   27fe0:	f445 7582 	orr.w	r5, r5, #260	; 0x104
            break;
   27fe4:	e7d4      	b.n	27f90 <cbor_read_array+0x1a8>
            err |= cbor_value_advance(&elem);
   27fe6:	a804      	add	r0, sp, #16
   27fe8:	f7f1 fe80 	bl	19cec <cbor_value_advance>
   27fec:	4305      	orrs	r5, r0
   27fee:	e7d3      	b.n	27f98 <cbor_read_array+0x1b0>
   27ff0:	2300      	movs	r3, #0
   27ff2:	e7d6      	b.n	27fa2 <cbor_read_array+0x1ba>
            break;
        }
    }
    if (arr->count) {
   27ff4:	6923      	ldr	r3, [r4, #16]
   27ff6:	b133      	cbz	r3, 28006 <cbor_read_array+0x21e>
        *arr->count = arrcount;
   27ff8:	601e      	str	r6, [r3, #0]
   27ffa:	e004      	b.n	28006 <cbor_read_array+0x21e>
    }
    while (!cbor_value_at_end(&elem)) {
        err |= CborErrorDataTooLarge;
   27ffc:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        cbor_value_advance(&elem);
   28000:	a804      	add	r0, sp, #16
   28002:	f7f1 fe73 	bl	19cec <cbor_value_advance>
{ return it->remaining == 0; }
   28006:	9b06      	ldr	r3, [sp, #24]
    while (!cbor_value_at_end(&elem)) {
   28008:	2b00      	cmp	r3, #0
   2800a:	d1f7      	bne.n	27ffc <cbor_read_array+0x214>
    }
    err |= cbor_value_leave_container(value, &elem);
   2800c:	a904      	add	r1, sp, #16
   2800e:	4640      	mov	r0, r8
   28010:	f7f1 fde3 	bl	19bda <cbor_value_leave_container>
   28014:	4328      	orrs	r0, r5
    return err;
}
   28016:	b009      	add	sp, #36	; 0x24
   28018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002801c <cbor_internal_read_object>:
{
   2801c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28020:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   28024:	4683      	mov	fp, r0
   28026:	9101      	str	r1, [sp, #4]
   28028:	4690      	mov	r8, r2
   2802a:	4699      	mov	r9, r3
    size_t len = 0;
   2802c:	2300      	movs	r3, #0
   2802e:	9304      	str	r3, [sp, #16]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   28030:	460c      	mov	r4, r1
   28032:	e006      	b.n	28042 <cbor_internal_read_object+0x26>
                    memcpy(lptr, &cursor->dflt.integer, sizeof(long long int));
   28034:	4623      	mov	r3, r4
   28036:	f853 1f20 	ldr.w	r1, [r3, #32]!
   2803a:	685b      	ldr	r3, [r3, #4]
   2803c:	6001      	str	r1, [r0, #0]
   2803e:	6043      	str	r3, [r0, #4]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   28040:	3430      	adds	r4, #48	; 0x30
   28042:	6823      	ldr	r3, [r4, #0]
   28044:	b3ab      	cbz	r3, 280b2 <cbor_internal_read_object+0x96>
        if (!cursor->nodefault) {
   28046:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   2804a:	2b00      	cmp	r3, #0
   2804c:	d1f8      	bne.n	28040 <cbor_internal_read_object+0x24>
            lptr = cbor_target_address(cursor, parent, offset);
   2804e:	464a      	mov	r2, r9
   28050:	4641      	mov	r1, r8
   28052:	4620      	mov	r0, r4
   28054:	f7ff fe99 	bl	27d8a <cbor_target_address>
            if (lptr != NULL) {
   28058:	2800      	cmp	r0, #0
   2805a:	d0f1      	beq.n	28040 <cbor_internal_read_object+0x24>
                switch (cursor->type) {
   2805c:	7923      	ldrb	r3, [r4, #4]
   2805e:	3b01      	subs	r3, #1
   28060:	2b06      	cmp	r3, #6
   28062:	d8ed      	bhi.n	28040 <cbor_internal_read_object+0x24>
   28064:	a101      	add	r1, pc, #4	; (adr r1, 2806c <cbor_internal_read_object+0x50>)
   28066:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2806a:	bf00      	nop
   2806c:	00028035 	.word	0x00028035
   28070:	00028089 	.word	0x00028089
   28074:	00028041 	.word	0x00028041
   28078:	00028041 	.word	0x00028041
   2807c:	00028097 	.word	0x00028097
   28080:	0002809f 	.word	0x0002809f
   28084:	000280a5 	.word	0x000280a5
                    memcpy(lptr, &cursor->dflt.integer,
   28088:	4623      	mov	r3, r4
   2808a:	f853 1f20 	ldr.w	r1, [r3, #32]!
   2808e:	685b      	ldr	r3, [r3, #4]
   28090:	6001      	str	r1, [r0, #0]
   28092:	6043      	str	r3, [r0, #4]
                    break;
   28094:	e7d4      	b.n	28040 <cbor_internal_read_object+0x24>
                    memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   28096:	f894 3020 	ldrb.w	r3, [r4, #32]
   2809a:	7003      	strb	r3, [r0, #0]
                    break;
   2809c:	e7d0      	b.n	28040 <cbor_internal_read_object+0x24>
                    memcpy(lptr, &cursor->dflt.fval, sizeof(float));
   2809e:	6a23      	ldr	r3, [r4, #32]
   280a0:	6003      	str	r3, [r0, #0]
                    break;
   280a2:	e7cd      	b.n	28040 <cbor_internal_read_object+0x24>
                    memcpy(lptr, &cursor->dflt.real, sizeof(double));
   280a4:	4623      	mov	r3, r4
   280a6:	f853 1f20 	ldr.w	r1, [r3, #32]!
   280aa:	685b      	ldr	r3, [r3, #4]
   280ac:	6001      	str	r1, [r0, #0]
   280ae:	6043      	str	r3, [r0, #4]
                    break;
   280b0:	e7c6      	b.n	28040 <cbor_internal_read_object+0x24>
{ return value->type == CborMapType; }
   280b2:	f89b 300e 	ldrb.w	r3, [fp, #14]
    if (cbor_value_is_map(root_value)) {
   280b6:	2ba0      	cmp	r3, #160	; 0xa0
   280b8:	d005      	beq.n	280c6 <cbor_internal_read_object+0xaa>
        return err;
   280ba:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   280be:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   280c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err |= cbor_value_enter_container(root_value, &cur_value);
   280c6:	a905      	add	r1, sp, #20
   280c8:	4658      	mov	r0, fp
   280ca:	f7f1 fce1 	bl	19a90 <cbor_value_enter_container>
   280ce:	4607      	mov	r7, r0
    while (cbor_value_is_valid(&cur_value) && !err) {
   280d0:	e07d      	b.n	281ce <cbor_internal_read_object+0x1b2>
            if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   280d2:	a904      	add	r1, sp, #16
   280d4:	a805      	add	r0, sp, #20
   280d6:	f7f1 fe1f 	bl	19d18 <cbor_value_calculate_string_length>
   280da:	b970      	cbnz	r0, 280fa <cbor_internal_read_object+0xde>
                if (len > CBORATTR_MAX_SIZE) {
   280dc:	9b04      	ldr	r3, [sp, #16]
   280de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   280e2:	d81c      	bhi.n	2811e <cbor_internal_read_object+0x102>
{ return value->type == CborTextStringType; }
   280e4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   280e8:	2b60      	cmp	r3, #96	; 0x60
   280ea:	d11b      	bne.n	28124 <cbor_internal_read_object+0x108>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   280ec:	2300      	movs	r3, #0
   280ee:	aa04      	add	r2, sp, #16
   280f0:	a909      	add	r1, sp, #36	; 0x24
   280f2:	a805      	add	r0, sp, #20
   280f4:	f7f1 fd9a 	bl	19c2c <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, attrbuf, &len,
   280f8:	4307      	orrs	r7, r0
            err |= cbor_value_advance(&cur_value);
   280fa:	a805      	add	r0, sp, #20
   280fc:	f7f1 fdf6 	bl	19cec <cbor_value_advance>
   28100:	4307      	orrs	r7, r0
{ return value && value->type != CborInvalidType; }
   28102:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   28106:	2eff      	cmp	r6, #255	; 0xff
   28108:	d016      	beq.n	28138 <cbor_internal_read_object+0x11c>
   2810a:	2301      	movs	r3, #1
            if (cbor_value_is_valid(&cur_value)) {
   2810c:	2b00      	cmp	r3, #0
   2810e:	d16e      	bne.n	281ee <cbor_internal_read_object+0x1d2>
                err |= CborErrorIllegalType;
   28110:	f447 7782 	orr.w	r7, r7, #260	; 0x104
    if (!err) {
   28114:	2f00      	cmp	r7, #0
   28116:	f000 815a 	beq.w	283ce <cbor_internal_read_object+0x3b2>
    return err;
   2811a:	4638      	mov	r0, r7
   2811c:	e7cf      	b.n	280be <cbor_internal_read_object+0xa2>
                    err |= CborErrorDataTooLarge;
   2811e:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
                    break;
   28122:	e7f7      	b.n	28114 <cbor_internal_read_object+0xf8>
    assert(cbor_value_is_text_string(value));
   28124:	f7e0 f84c 	bl	81c0 <hal_debugger_connected>
   28128:	b100      	cbz	r0, 2812c <cbor_internal_read_object+0x110>
   2812a:	be01      	bkpt	0x0001
   2812c:	2300      	movs	r3, #0
   2812e:	461a      	mov	r2, r3
   28130:	4619      	mov	r1, r3
   28132:	4618      	mov	r0, r3
   28134:	f7e1 fc4c 	bl	99d0 <__assert_func>
{ return value && value->type != CborInvalidType; }
   28138:	2300      	movs	r3, #0
   2813a:	e7e7      	b.n	2810c <cbor_internal_read_object+0xf0>
                    attrbuf[0] == '\0') {
   2813c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   28140:	b963      	cbnz	r3, 2815c <cbor_internal_read_object+0x140>
                    best_match = cursor;
   28142:	46a2      	mov	sl, r4
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   28144:	3430      	adds	r4, #48	; 0x30
   28146:	6825      	ldr	r5, [r4, #0]
   28148:	b1a5      	cbz	r5, 28174 <cbor_internal_read_object+0x158>
            if (valid_attr_type(type, cursor->type)) {
   2814a:	7921      	ldrb	r1, [r4, #4]
   2814c:	4630      	mov	r0, r6
   2814e:	f7ff fdda 	bl	27d06 <valid_attr_type>
   28152:	2800      	cmp	r0, #0
   28154:	d0f6      	beq.n	28144 <cbor_internal_read_object+0x128>
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   28156:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2815a:	d0ef      	beq.n	2813c <cbor_internal_read_object+0x120>
                } else if (strlen(cursor->attribute) == len &&
   2815c:	4628      	mov	r0, r5
   2815e:	f7e3 fbf5 	bl	b94c <strlen>
   28162:	9a04      	ldr	r2, [sp, #16]
   28164:	4290      	cmp	r0, r2
   28166:	d1ed      	bne.n	28144 <cbor_internal_read_object+0x128>
                    !memcmp(cursor->attribute, attrbuf, len)) {
   28168:	a909      	add	r1, sp, #36	; 0x24
   2816a:	4628      	mov	r0, r5
   2816c:	f7e3 fb6c 	bl	b848 <memcmp>
                } else if (strlen(cursor->attribute) == len &&
   28170:	2800      	cmp	r0, #0
   28172:	d1e7      	bne.n	28144 <cbor_internal_read_object+0x128>
        if (!cursor->attribute && best_match) {
   28174:	b1cd      	cbz	r5, 281aa <cbor_internal_read_object+0x18e>
        if (cursor->attribute != NULL) {
   28176:	6823      	ldr	r3, [r4, #0]
   28178:	b333      	cbz	r3, 281c8 <cbor_internal_read_object+0x1ac>
            lptr = cbor_target_address(cursor, parent, offset);
   2817a:	464a      	mov	r2, r9
   2817c:	4641      	mov	r1, r8
   2817e:	4620      	mov	r0, r4
   28180:	f7ff fe03 	bl	27d8a <cbor_target_address>
   28184:	4605      	mov	r5, r0
            switch (cursor->type) {
   28186:	7923      	ldrb	r3, [r4, #4]
   28188:	3b01      	subs	r3, #1
   2818a:	2b0a      	cmp	r3, #10
   2818c:	f200 811a 	bhi.w	283c4 <cbor_internal_read_object+0x3a8>
   28190:	e8df f013 	tbh	[pc, r3, lsl #1]
   28194:	0066003b 	.word	0x0066003b
   28198:	00f100d6 	.word	0x00f100d6
   2819c:	008d0010 	.word	0x008d0010
   281a0:	010900af 	.word	0x010900af
   281a4:	01180110 	.word	0x01180110
   281a8:	001a      	.short	0x001a
        if (!cursor->attribute && best_match) {
   281aa:	f1ba 0f00 	cmp.w	sl, #0
   281ae:	d0e2      	beq.n	28176 <cbor_internal_read_object+0x15a>
            cursor = best_match;
   281b0:	4654      	mov	r4, sl
   281b2:	e7e0      	b.n	28176 <cbor_internal_read_object+0x15a>
{ return value->type == CborBooleanType; }
   281b4:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_boolean(value));
   281b8:	2bf5      	cmp	r3, #245	; 0xf5
   281ba:	d11c      	bne.n	281f6 <cbor_internal_read_object+0x1da>
    *result = !!value->extra;
   281bc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   281c0:	3300      	adds	r3, #0
   281c2:	bf18      	it	ne
   281c4:	2301      	movne	r3, #1
   281c6:	7003      	strb	r3, [r0, #0]
        cbor_value_advance(&cur_value);
   281c8:	a805      	add	r0, sp, #20
   281ca:	f7f1 fd8f 	bl	19cec <cbor_value_advance>
{ return value && value->type != CborInvalidType; }
   281ce:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   281d2:	2eff      	cmp	r6, #255	; 0xff
   281d4:	f000 80f9 	beq.w	283ca <cbor_internal_read_object+0x3ae>
   281d8:	2301      	movs	r3, #1
    while (cbor_value_is_valid(&cur_value) && !err) {
   281da:	2b00      	cmp	r3, #0
   281dc:	d09a      	beq.n	28114 <cbor_internal_read_object+0xf8>
   281de:	2f00      	cmp	r7, #0
   281e0:	d198      	bne.n	28114 <cbor_internal_read_object+0xf8>
        if (cbor_value_is_text_string(&cur_value)) {
   281e2:	2e60      	cmp	r6, #96	; 0x60
   281e4:	f43f af75 	beq.w	280d2 <cbor_internal_read_object+0xb6>
            attrbuf[0] = '\0';
   281e8:	2300      	movs	r3, #0
   281ea:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   281ee:	9c01      	ldr	r4, [sp, #4]
        best_match = NULL;
   281f0:	f04f 0a00 	mov.w	sl, #0
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   281f4:	e7a7      	b.n	28146 <cbor_internal_read_object+0x12a>
    assert(cbor_value_is_boolean(value));
   281f6:	f7df ffe3 	bl	81c0 <hal_debugger_connected>
   281fa:	b100      	cbz	r0, 281fe <cbor_internal_read_object+0x1e2>
   281fc:	be01      	bkpt	0x0001
   281fe:	2300      	movs	r3, #0
   28200:	461a      	mov	r2, r3
   28202:	4619      	mov	r1, r3
   28204:	4618      	mov	r0, r3
   28206:	f7e1 fbe3 	bl	99d0 <__assert_func>
{ return value->type == CborIntegerType; }
   2820a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_integer(value));
   2820e:	b9bb      	cbnz	r3, 28240 <cbor_internal_read_object+0x224>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   28210:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   28214:	f013 0f01 	tst.w	r3, #1
   28218:	d11c      	bne.n	28254 <cbor_internal_read_object+0x238>
   2821a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2821e:	2400      	movs	r4, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   28220:	4619      	mov	r1, r3
   28222:	4622      	mov	r2, r4
   28224:	e9c5 1200 	strd	r1, r2, [r5]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   28228:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   2822c:	f013 0f02 	tst.w	r3, #2
   28230:	d0ca      	beq.n	281c8 <cbor_internal_read_object+0x1ac>
        *result = -*result - 1;
   28232:	43c9      	mvns	r1, r1
   28234:	43e2      	mvns	r2, r4
   28236:	4608      	mov	r0, r1
   28238:	4611      	mov	r1, r2
   2823a:	e9c5 0100 	strd	r0, r1, [r5]
                break;
   2823e:	e7c3      	b.n	281c8 <cbor_internal_read_object+0x1ac>
    assert(cbor_value_is_integer(value));
   28240:	f7df ffbe 	bl	81c0 <hal_debugger_connected>
   28244:	b100      	cbz	r0, 28248 <cbor_internal_read_object+0x22c>
   28246:	be01      	bkpt	0x0001
   28248:	2300      	movs	r3, #0
   2824a:	461a      	mov	r2, r3
   2824c:	4619      	mov	r1, r3
   2824e:	4618      	mov	r0, r3
   28250:	f7e1 fbbe 	bl	99d0 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   28254:	a805      	add	r0, sp, #20
   28256:	f7f1 fbc3 	bl	199e0 <_cbor_value_decode_int64_internal>
   2825a:	4603      	mov	r3, r0
   2825c:	460c      	mov	r4, r1
   2825e:	e7df      	b.n	28220 <cbor_internal_read_object+0x204>
{ return value->type == CborIntegerType; }
   28260:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   28264:	b933      	cbnz	r3, 28274 <cbor_internal_read_object+0x258>
   28266:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   2826a:	f013 0f02 	tst.w	r3, #2
   2826e:	d00e      	beq.n	2828e <cbor_internal_read_object+0x272>
   28270:	2300      	movs	r3, #0
   28272:	e000      	b.n	28276 <cbor_internal_read_object+0x25a>
   28274:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   28276:	b163      	cbz	r3, 28292 <cbor_internal_read_object+0x276>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   28278:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   2827c:	f013 0f01 	tst.w	r3, #1
   28280:	d111      	bne.n	282a6 <cbor_internal_read_object+0x28a>
   28282:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   28286:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   28288:	e9c5 0100 	strd	r0, r1, [r5]
                break;
   2828c:	e79c      	b.n	281c8 <cbor_internal_read_object+0x1ac>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   2828e:	2301      	movs	r3, #1
   28290:	e7f1      	b.n	28276 <cbor_internal_read_object+0x25a>
    assert(cbor_value_is_unsigned_integer(value));
   28292:	f7df ff95 	bl	81c0 <hal_debugger_connected>
   28296:	b100      	cbz	r0, 2829a <cbor_internal_read_object+0x27e>
   28298:	be01      	bkpt	0x0001
   2829a:	2300      	movs	r3, #0
   2829c:	461a      	mov	r2, r3
   2829e:	4619      	mov	r1, r3
   282a0:	4618      	mov	r0, r3
   282a2:	f7e1 fb95 	bl	99d0 <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   282a6:	a805      	add	r0, sp, #20
   282a8:	f7f1 fb9a 	bl	199e0 <_cbor_value_decode_int64_internal>
   282ac:	e7ec      	b.n	28288 <cbor_internal_read_object+0x26c>
{ return value->type == CborFloatType; }
   282ae:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_float(value));
   282b2:	2bfa      	cmp	r3, #250	; 0xfa
   282b4:	d109      	bne.n	282ca <cbor_internal_read_object+0x2ae>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   282b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   282ba:	f013 0f01 	tst.w	r3, #1
   282be:	d00e      	beq.n	282de <cbor_internal_read_object+0x2c2>
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   282c0:	a805      	add	r0, sp, #20
   282c2:	f7f1 fb8d 	bl	199e0 <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   282c6:	6028      	str	r0, [r5, #0]
                break;
   282c8:	e77e      	b.n	281c8 <cbor_internal_read_object+0x1ac>
    assert(cbor_value_is_float(value));
   282ca:	f7df ff79 	bl	81c0 <hal_debugger_connected>
   282ce:	b100      	cbz	r0, 282d2 <cbor_internal_read_object+0x2b6>
   282d0:	be01      	bkpt	0x0001
   282d2:	2300      	movs	r3, #0
   282d4:	461a      	mov	r2, r3
   282d6:	4619      	mov	r1, r3
   282d8:	4618      	mov	r0, r3
   282da:	f7e1 fb79 	bl	99d0 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   282de:	f7df ff6f 	bl	81c0 <hal_debugger_connected>
   282e2:	b100      	cbz	r0, 282e6 <cbor_internal_read_object+0x2ca>
   282e4:	be01      	bkpt	0x0001
   282e6:	2300      	movs	r3, #0
   282e8:	461a      	mov	r2, r3
   282ea:	4619      	mov	r1, r3
   282ec:	4618      	mov	r0, r3
   282ee:	f7e1 fb6f 	bl	99d0 <__assert_func>
{ return value->type == CborDoubleType; }
   282f2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_double(value));
   282f6:	2bfb      	cmp	r3, #251	; 0xfb
   282f8:	d10e      	bne.n	28318 <cbor_internal_read_object+0x2fc>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   282fa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   282fe:	f013 0f01 	tst.w	r3, #1
   28302:	d013      	beq.n	2832c <cbor_internal_read_object+0x310>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   28304:	a805      	add	r0, sp, #20
   28306:	f7f1 fb6b 	bl	199e0 <_cbor_value_decode_int64_internal>
   2830a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   2830e:	ab02      	add	r3, sp, #8
   28310:	cb03      	ldmia	r3!, {r0, r1}
   28312:	6028      	str	r0, [r5, #0]
   28314:	6069      	str	r1, [r5, #4]
                break;
   28316:	e757      	b.n	281c8 <cbor_internal_read_object+0x1ac>
    assert(cbor_value_is_double(value));
   28318:	f7df ff52 	bl	81c0 <hal_debugger_connected>
   2831c:	b100      	cbz	r0, 28320 <cbor_internal_read_object+0x304>
   2831e:	be01      	bkpt	0x0001
   28320:	2300      	movs	r3, #0
   28322:	461a      	mov	r2, r3
   28324:	4619      	mov	r1, r3
   28326:	4618      	mov	r0, r3
   28328:	f7e1 fb52 	bl	99d0 <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   2832c:	f7df ff48 	bl	81c0 <hal_debugger_connected>
   28330:	b100      	cbz	r0, 28334 <cbor_internal_read_object+0x318>
   28332:	be01      	bkpt	0x0001
   28334:	2300      	movs	r3, #0
   28336:	461a      	mov	r2, r3
   28338:	4619      	mov	r1, r3
   2833a:	4618      	mov	r0, r3
   2833c:	f7e1 fb48 	bl	99d0 <__assert_func>
                size_t len = cursor->len;
   28340:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   28342:	9302      	str	r3, [sp, #8]
{ return value->type == CborByteStringType; }
   28344:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_byte_string(value));
   28348:	2b40      	cmp	r3, #64	; 0x40
   2834a:	d10a      	bne.n	28362 <cbor_internal_read_object+0x346>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   2834c:	2300      	movs	r3, #0
   2834e:	aa02      	add	r2, sp, #8
   28350:	4601      	mov	r1, r0
   28352:	a805      	add	r0, sp, #20
   28354:	f7f1 fc6a 	bl	19c2c <_cbor_value_copy_string>
                err |= cbor_value_copy_byte_string(&cur_value, lptr,
   28358:	4307      	orrs	r7, r0
                *cursor->addr.bytestring.len = len;
   2835a:	68e3      	ldr	r3, [r4, #12]
   2835c:	9a02      	ldr	r2, [sp, #8]
   2835e:	601a      	str	r2, [r3, #0]
   28360:	e732      	b.n	281c8 <cbor_internal_read_object+0x1ac>
    assert(cbor_value_is_byte_string(value));
   28362:	f7df ff2d 	bl	81c0 <hal_debugger_connected>
   28366:	b100      	cbz	r0, 2836a <cbor_internal_read_object+0x34e>
   28368:	be01      	bkpt	0x0001
   2836a:	2300      	movs	r3, #0
   2836c:	461a      	mov	r2, r3
   2836e:	4619      	mov	r1, r3
   28370:	4618      	mov	r0, r3
   28372:	f7e1 fb2d 	bl	99d0 <__assert_func>
                size_t len = cursor->len;
   28376:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   28378:	9302      	str	r3, [sp, #8]
{ return value->type == CborTextStringType; }
   2837a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   2837e:	2b60      	cmp	r3, #96	; 0x60
   28380:	d107      	bne.n	28392 <cbor_internal_read_object+0x376>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   28382:	2300      	movs	r3, #0
   28384:	aa02      	add	r2, sp, #8
   28386:	4601      	mov	r1, r0
   28388:	a805      	add	r0, sp, #20
   2838a:	f7f1 fc4f 	bl	19c2c <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, lptr,
   2838e:	4307      	orrs	r7, r0
   28390:	e71a      	b.n	281c8 <cbor_internal_read_object+0x1ac>
    assert(cbor_value_is_text_string(value));
   28392:	f7df ff15 	bl	81c0 <hal_debugger_connected>
   28396:	b100      	cbz	r0, 2839a <cbor_internal_read_object+0x37e>
   28398:	be01      	bkpt	0x0001
   2839a:	2300      	movs	r3, #0
   2839c:	461a      	mov	r2, r3
   2839e:	4619      	mov	r1, r3
   283a0:	4618      	mov	r0, r3
   283a2:	f7e1 fb15 	bl	99d0 <__assert_func>
                err |= cbor_read_array(&cur_value, &cursor->addr.array);
   283a6:	f104 0108 	add.w	r1, r4, #8
   283aa:	a805      	add	r0, sp, #20
   283ac:	f7ff fd1c 	bl	27de8 <cbor_read_array>
   283b0:	4307      	orrs	r7, r0
                continue;
   283b2:	e70c      	b.n	281ce <cbor_internal_read_object+0x1b2>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   283b4:	2300      	movs	r3, #0
   283b6:	461a      	mov	r2, r3
   283b8:	68a1      	ldr	r1, [r4, #8]
   283ba:	a805      	add	r0, sp, #20
   283bc:	f7ff fe2e 	bl	2801c <cbor_internal_read_object>
   283c0:	4307      	orrs	r7, r0
                continue;
   283c2:	e704      	b.n	281ce <cbor_internal_read_object+0x1b2>
                err |= CborErrorIllegalType;
   283c4:	f447 7782 	orr.w	r7, r7, #260	; 0x104
   283c8:	e6fe      	b.n	281c8 <cbor_internal_read_object+0x1ac>
{ return value && value->type != CborInvalidType; }
   283ca:	2300      	movs	r3, #0
   283cc:	e705      	b.n	281da <cbor_internal_read_object+0x1be>
        err |= cbor_value_leave_container(root_value, &cur_value);
   283ce:	a905      	add	r1, sp, #20
   283d0:	4658      	mov	r0, fp
   283d2:	f7f1 fc02 	bl	19bda <cbor_value_leave_container>
   283d6:	4307      	orrs	r7, r0
   283d8:	e69f      	b.n	2811a <cbor_internal_read_object+0xfe>
   283da:	bf00      	nop

000283dc <cbor_read_object>:

int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
   283dc:	b508      	push	{r3, lr}
    int st;

    st = cbor_internal_read_object(value, attrs, NULL, 0);
   283de:	2300      	movs	r3, #0
   283e0:	461a      	mov	r2, r3
   283e2:	f7ff fe1b 	bl	2801c <cbor_internal_read_object>
    return st;
}
   283e6:	bd08      	pop	{r3, pc}

000283e8 <cbor_buf_writer>:
    return (remaining < 0);
}

int
cbor_buf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   283e8:	b538      	push	{r3, r4, r5, lr}
   283ea:	4604      	mov	r4, r0
    ptrdiff_t remaining = (ptrdiff_t)cb->end;
   283ec:	68c3      	ldr	r3, [r0, #12]
    remaining -= (ptrdiff_t)cb->ptr;
   283ee:	6880      	ldr	r0, [r0, #8]
   283f0:	1a1b      	subs	r3, r3, r0
    remaining -= (ptrdiff_t)len;
   283f2:	1a9b      	subs	r3, r3, r2
    struct cbor_buf_writer *cb = (struct cbor_buf_writer *) arg;

    if (would_overflow(cb, len)) {
   283f4:	2b00      	cmp	r3, #0
   283f6:	db0a      	blt.n	2840e <cbor_buf_writer+0x26>
   283f8:	4615      	mov	r5, r2
        return CborErrorOutOfMemory;
    }

    memcpy(cb->ptr, data, len);
   283fa:	f7e3 fa49 	bl	b890 <memcpy>
    cb->ptr += len;
   283fe:	68a3      	ldr	r3, [r4, #8]
   28400:	442b      	add	r3, r5
   28402:	60a3      	str	r3, [r4, #8]
    cb->enc.bytes_written += len;
   28404:	6862      	ldr	r2, [r4, #4]
   28406:	442a      	add	r2, r5
   28408:	6062      	str	r2, [r4, #4]
    return CborNoError;
   2840a:	2000      	movs	r0, #0
}
   2840c:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   2840e:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   28412:	e7fb      	b.n	2840c <cbor_buf_writer+0x24>

00028414 <cbor_buf_writer_init>:

void
cbor_buf_writer_init(struct cbor_buf_writer *cb, uint8_t *buffer, size_t size)
{
    cb->ptr = buffer;
   28414:	6081      	str	r1, [r0, #8]
    cb->end = buffer + size;
   28416:	440a      	add	r2, r1
   28418:	60c2      	str	r2, [r0, #12]
    cb->enc.bytes_written = 0;
   2841a:	2300      	movs	r3, #0
   2841c:	6043      	str	r3, [r0, #4]
    cb->enc.write = cbor_buf_writer;
   2841e:	4b01      	ldr	r3, [pc, #4]	; (28424 <cbor_buf_writer_init+0x10>)
   28420:	6003      	str	r3, [r0, #0]
}
   28422:	4770      	bx	lr
   28424:	000283e9 	.word	0x000283e9

00028428 <cbor_buf_writer_buffer_size>:

size_t
cbor_buf_writer_buffer_size(struct cbor_buf_writer *cb, const uint8_t *buffer)
{
    return (size_t)(cb->ptr - buffer);
   28428:	6880      	ldr	r0, [r0, #8]
}
   2842a:	1a40      	subs	r0, r0, r1
   2842c:	4770      	bx	lr

0002842e <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
   2842e:	b538      	push	{r3, r4, r5, lr}
   28430:	461d      	mov	r5, r3
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   28432:	69c3      	ldr	r3, [r0, #28]
   28434:	189c      	adds	r4, r3, r2
   28436:	460b      	mov	r3, r1
   28438:	462a      	mov	r2, r5
   2843a:	4621      	mov	r1, r4
   2843c:	6a00      	ldr	r0, [r0, #32]
   2843e:	f7e2 f843 	bl	a4c8 <os_mbuf_copydata>
    if (rc == 0) {
   28442:	b108      	cbz	r0, 28448 <cbor_mbuf_reader_cpy+0x1a>
        return true;
    }
    return false;
   28444:	2000      	movs	r0, #0
}
   28446:	bd38      	pop	{r3, r4, r5, pc}
        return true;
   28448:	2001      	movs	r0, #1
   2844a:	e7fc      	b.n	28446 <cbor_mbuf_reader_cpy+0x18>

0002844c <cbor_mbuf_reader_get8>:
{
   2844c:	b510      	push	{r4, lr}
   2844e:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   28450:	69c4      	ldr	r4, [r0, #28]
   28452:	f10d 0307 	add.w	r3, sp, #7
   28456:	2201      	movs	r2, #1
   28458:	4421      	add	r1, r4
   2845a:	6a00      	ldr	r0, [r0, #32]
   2845c:	f7e2 f834 	bl	a4c8 <os_mbuf_copydata>
}
   28460:	f89d 0007 	ldrb.w	r0, [sp, #7]
   28464:	b002      	add	sp, #8
   28466:	bd10      	pop	{r4, pc}

00028468 <cbor_mbuf_reader_cmp>:
{
   28468:	b510      	push	{r4, lr}
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   2846a:	69c4      	ldr	r4, [r0, #28]
   2846c:	4414      	add	r4, r2
   2846e:	460a      	mov	r2, r1
   28470:	4621      	mov	r1, r4
   28472:	6a00      	ldr	r0, [r0, #32]
   28474:	f7e2 f8a7 	bl	a5c6 <os_mbuf_cmpf>
}
   28478:	fab0 f080 	clz	r0, r0
   2847c:	0940      	lsrs	r0, r0, #5
   2847e:	bd10      	pop	{r4, pc}

00028480 <cbor_mbuf_reader_get64>:
{
   28480:	b510      	push	{r4, lr}
   28482:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   28484:	69c4      	ldr	r4, [r0, #28]
   28486:	466b      	mov	r3, sp
   28488:	2208      	movs	r2, #8
   2848a:	4421      	add	r1, r4
   2848c:	6a00      	ldr	r0, [r0, #32]
   2848e:	f7e2 f81b 	bl	a4c8 <os_mbuf_copydata>
}
   28492:	9801      	ldr	r0, [sp, #4]
   28494:	ba00      	rev	r0, r0
   28496:	9900      	ldr	r1, [sp, #0]
   28498:	ba09      	rev	r1, r1
   2849a:	b002      	add	sp, #8
   2849c:	bd10      	pop	{r4, pc}

0002849e <cbor_mbuf_reader_get32>:
{
   2849e:	b510      	push	{r4, lr}
   284a0:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   284a2:	69c4      	ldr	r4, [r0, #28]
   284a4:	ab01      	add	r3, sp, #4
   284a6:	2204      	movs	r2, #4
   284a8:	4421      	add	r1, r4
   284aa:	6a00      	ldr	r0, [r0, #32]
   284ac:	f7e2 f80c 	bl	a4c8 <os_mbuf_copydata>
}
   284b0:	9801      	ldr	r0, [sp, #4]
   284b2:	ba00      	rev	r0, r0
   284b4:	b002      	add	sp, #8
   284b6:	bd10      	pop	{r4, pc}

000284b8 <cbor_mbuf_reader_get16>:
{
   284b8:	b510      	push	{r4, lr}
   284ba:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   284bc:	69c4      	ldr	r4, [r0, #28]
   284be:	f10d 0306 	add.w	r3, sp, #6
   284c2:	2202      	movs	r2, #2
   284c4:	4421      	add	r1, r4
   284c6:	6a00      	ldr	r0, [r0, #32]
   284c8:	f7e1 fffe 	bl	a4c8 <os_mbuf_copydata>
    return cbor_ntohs(val);
   284cc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   284d0:	ba40      	rev16	r0, r0
}
   284d2:	b280      	uxth	r0, r0
   284d4:	b002      	add	sp, #8
   284d6:	bd10      	pop	{r4, pc}

000284d8 <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
   284d8:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
   284da:	4b0f      	ldr	r3, [pc, #60]	; (28518 <cbor_mbuf_reader_init+0x40>)
   284dc:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
   284de:	4b0f      	ldr	r3, [pc, #60]	; (2851c <cbor_mbuf_reader_init+0x44>)
   284e0:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
   284e2:	4b0f      	ldr	r3, [pc, #60]	; (28520 <cbor_mbuf_reader_init+0x48>)
   284e4:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
   284e6:	4b0f      	ldr	r3, [pc, #60]	; (28524 <cbor_mbuf_reader_init+0x4c>)
   284e8:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
   284ea:	4b0f      	ldr	r3, [pc, #60]	; (28528 <cbor_mbuf_reader_init+0x50>)
   284ec:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
   284ee:	4b0f      	ldr	r3, [pc, #60]	; (2852c <cbor_mbuf_reader_init+0x54>)
   284f0:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
   284f2:	794b      	ldrb	r3, [r1, #5]
   284f4:	2b07      	cmp	r3, #7
   284f6:	d905      	bls.n	28504 <cbor_mbuf_reader_init+0x2c>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
   284f8:	6201      	str	r1, [r0, #32]
    cb->init_off = initial_offset;
   284fa:	61c2      	str	r2, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
   284fc:	8a0b      	ldrh	r3, [r1, #16]
   284fe:	1a9a      	subs	r2, r3, r2
   28500:	6182      	str	r2, [r0, #24]
}
   28502:	bd08      	pop	{r3, pc}
    assert(OS_MBUF_IS_PKTHDR(m));
   28504:	f7df fe5c 	bl	81c0 <hal_debugger_connected>
   28508:	b100      	cbz	r0, 2850c <cbor_mbuf_reader_init+0x34>
   2850a:	be01      	bkpt	0x0001
   2850c:	2300      	movs	r3, #0
   2850e:	461a      	mov	r2, r3
   28510:	4619      	mov	r1, r3
   28512:	4618      	mov	r0, r3
   28514:	f7e1 fa5c 	bl	99d0 <__assert_func>
   28518:	0002844d 	.word	0x0002844d
   2851c:	000284b9 	.word	0x000284b9
   28520:	0002849f 	.word	0x0002849f
   28524:	00028481 	.word	0x00028481
   28528:	00028469 	.word	0x00028469
   2852c:	0002842f 	.word	0x0002842f

00028530 <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   28530:	b538      	push	{r3, r4, r5, lr}
   28532:	4604      	mov	r4, r0
   28534:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
   28536:	b292      	uxth	r2, r2
   28538:	6880      	ldr	r0, [r0, #8]
   2853a:	f7e1 fed5 	bl	a2e8 <os_mbuf_append>
    if (rc) {
   2853e:	b928      	cbnz	r0, 2854c <cbor_mbuf_writer+0x1c>
   28540:	4603      	mov	r3, r0
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
   28542:	6862      	ldr	r2, [r4, #4]
   28544:	442a      	add	r2, r5
   28546:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
   28548:	4618      	mov	r0, r3
   2854a:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   2854c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   28550:	e7fa      	b.n	28548 <cbor_mbuf_writer+0x18>
	...

00028554 <cbor_mbuf_writer_init>:


void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
   28554:	6081      	str	r1, [r0, #8]
    cb->enc.bytes_written = 0;
   28556:	2300      	movs	r3, #0
   28558:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
   2855a:	4b01      	ldr	r3, [pc, #4]	; (28560 <cbor_mbuf_writer_init+0xc>)
   2855c:	6003      	str	r3, [r0, #0]
}
   2855e:	4770      	bx	lr
   28560:	00028531 	.word	0x00028531

00028564 <nrf52_clock_hfxo_request>:
 *
 * @return int 0: hfxo was already on. 1: hfxo was turned on.
 */
int
nrf52_clock_hfxo_request(void)
{
   28564:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   28566:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2856a:	b672      	cpsid	i
    assert(0);
#endif

    started = 0;
    __HAL_DISABLE_INTERRUPTS(ctx);
    assert(nrf52_clock_hfxo_refcnt < 0xff);
   2856c:	4b0d      	ldr	r3, [pc, #52]	; (285a4 <nrf52_clock_hfxo_request+0x40>)
   2856e:	781b      	ldrb	r3, [r3, #0]
   28570:	2bff      	cmp	r3, #255	; 0xff
   28572:	d00b      	beq.n	2858c <nrf52_clock_hfxo_request+0x28>
    if (nrf52_clock_hfxo_refcnt == 0) {
   28574:	b9a3      	cbnz	r3, 285a0 <nrf52_clock_hfxo_request+0x3c>
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   28576:	2001      	movs	r0, #1
   28578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2857c:	6018      	str	r0, [r3, #0]
        started = 1;
    }
    ++nrf52_clock_hfxo_refcnt;
   2857e:	4a09      	ldr	r2, [pc, #36]	; (285a4 <nrf52_clock_hfxo_request+0x40>)
   28580:	7813      	ldrb	r3, [r2, #0]
   28582:	3301      	adds	r3, #1
   28584:	7013      	strb	r3, [r2, #0]
    __HAL_ENABLE_INTERRUPTS(ctx);
   28586:	b901      	cbnz	r1, 2858a <nrf52_clock_hfxo_request+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
   28588:	b662      	cpsie	i

    return started;
}
   2858a:	bd08      	pop	{r3, pc}
    assert(nrf52_clock_hfxo_refcnt < 0xff);
   2858c:	f7df fe18 	bl	81c0 <hal_debugger_connected>
   28590:	b100      	cbz	r0, 28594 <nrf52_clock_hfxo_request+0x30>
   28592:	be01      	bkpt	0x0001
   28594:	2300      	movs	r3, #0
   28596:	461a      	mov	r2, r3
   28598:	4619      	mov	r1, r3
   2859a:	4618      	mov	r0, r3
   2859c:	f7e1 fa18 	bl	99d0 <__assert_func>
    started = 0;
   285a0:	2000      	movs	r0, #0
   285a2:	e7ec      	b.n	2857e <nrf52_clock_hfxo_request+0x1a>
   285a4:	200094e4 	.word	0x200094e4

000285a8 <nrf52_clock_hfxo_release>:
 * @return int 0: HFXO not stopped by this call (others using it) 1: HFXO
 *         stopped.
 */
int
nrf52_clock_hfxo_release(void)
{
   285a8:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   285aa:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   285ae:	b672      	cpsid	i
    assert(0);
#endif

    stopped = 0;
    __HAL_DISABLE_INTERRUPTS(ctx);
    assert(nrf52_clock_hfxo_refcnt != 0);
   285b0:	4b0d      	ldr	r3, [pc, #52]	; (285e8 <nrf52_clock_hfxo_release+0x40>)
   285b2:	781b      	ldrb	r3, [r3, #0]
   285b4:	b15b      	cbz	r3, 285ce <nrf52_clock_hfxo_release+0x26>
    --nrf52_clock_hfxo_refcnt;
   285b6:	3b01      	subs	r3, #1
   285b8:	b2db      	uxtb	r3, r3
   285ba:	490b      	ldr	r1, [pc, #44]	; (285e8 <nrf52_clock_hfxo_release+0x40>)
   285bc:	700b      	strb	r3, [r1, #0]
    if (nrf52_clock_hfxo_refcnt == 0) {
   285be:	b983      	cbnz	r3, 285e2 <nrf52_clock_hfxo_release+0x3a>
        NRF_CLOCK->TASKS_HFCLKSTOP = 1;
   285c0:	2001      	movs	r0, #1
   285c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   285c6:	6058      	str	r0, [r3, #4]
        stopped = 1;
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   285c8:	b902      	cbnz	r2, 285cc <nrf52_clock_hfxo_release+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
   285ca:	b662      	cpsie	i

    return stopped;
}
   285cc:	bd08      	pop	{r3, pc}
    assert(nrf52_clock_hfxo_refcnt != 0);
   285ce:	f7df fdf7 	bl	81c0 <hal_debugger_connected>
   285d2:	b100      	cbz	r0, 285d6 <nrf52_clock_hfxo_release+0x2e>
   285d4:	be01      	bkpt	0x0001
   285d6:	2300      	movs	r3, #0
   285d8:	461a      	mov	r2, r3
   285da:	4619      	mov	r1, r3
   285dc:	4618      	mov	r0, r3
   285de:	f7e1 f9f7 	bl	99d0 <__assert_func>
    stopped = 0;
   285e2:	2000      	movs	r0, #0
   285e4:	e7f0      	b.n	285c8 <nrf52_clock_hfxo_release+0x20>
   285e6:	bf00      	nop
   285e8:	200094e4 	.word	0x200094e4

000285ec <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   285ec:	2010      	movs	r0, #16
   285ee:	4770      	bx	lr

000285f0 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   285f0:	b570      	push	{r4, r5, r6, lr}
   285f2:	4606      	mov	r6, r0
   285f4:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   285f6:	460d      	mov	r5, r1
   285f8:	2908      	cmp	r1, #8
   285fa:	bf28      	it	cs
   285fc:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   285fe:	462a      	mov	r2, r5
   28600:	4906      	ldr	r1, [pc, #24]	; (2861c <hal_bsp_hw_id+0x2c>)
   28602:	f7e3 f945 	bl	b890 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   28606:	1b64      	subs	r4, r4, r5
   28608:	2c08      	cmp	r4, #8
   2860a:	bf28      	it	cs
   2860c:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   2860e:	4622      	mov	r2, r4
   28610:	4903      	ldr	r1, [pc, #12]	; (28620 <hal_bsp_hw_id+0x30>)
   28612:	1970      	adds	r0, r6, r5
   28614:	f7e3 f93c 	bl	b890 <memcpy>

    return len + cnt;
}
   28618:	1928      	adds	r0, r5, r4
   2861a:	bd70      	pop	{r4, r5, r6, pc}
   2861c:	10000060 	.word	0x10000060
   28620:	100000a4 	.word	0x100000a4

00028624 <os_error_to_sys>:
#include "os/os_error.h"

int
os_error_to_sys(os_error_t os_error)
{
    switch (os_error) {
   28624:	280b      	cmp	r0, #11
   28626:	d818      	bhi.n	2865a <os_error_to_sys+0x36>
   28628:	e8df f000 	tbb	[pc, r0]
   2862c:	0b081a06 	.word	0x0b081a06
   28630:	170e1717 	.word	0x170e1717
   28634:	14111717 	.word	0x14111717
        case OS_OK:             return SYS_EOK;
   28638:	2000      	movs	r0, #0
   2863a:	4770      	bx	lr
        case OS_ENOMEM:         return SYS_ENOMEM; 
        case OS_EINVAL:         return SYS_EINVAL; 
   2863c:	f06f 0001 	mvn.w	r0, #1
   28640:	4770      	bx	lr
        case OS_INVALID_PARM:   return SYS_EINVAL; 
   28642:	f06f 0001 	mvn.w	r0, #1
   28646:	4770      	bx	lr
        case OS_TIMEOUT:        return SYS_ETIMEOUT; 
   28648:	f06f 0002 	mvn.w	r0, #2
   2864c:	4770      	bx	lr
        case OS_ENOENT:         return SYS_ENOENT; 
   2864e:	f06f 0003 	mvn.w	r0, #3
   28652:	4770      	bx	lr
        case OS_EBUSY:          return SYS_EBUSY; 
   28654:	f06f 0007 	mvn.w	r0, #7
   28658:	4770      	bx	lr
        default:                return SYS_EUNKNOWN;
   2865a:	f06f 000c 	mvn.w	r0, #12
   2865e:	4770      	bx	lr
        case OS_ENOMEM:         return SYS_ENOMEM; 
   28660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   28664:	4770      	bx	lr
   28666:	0000      	movs	r0, r0
   28668:	00008653 	.word	0x00008653
   2866c:	00000004 	.word	0x00000004
   28670:	00000004 	.word	0x00000004
   28674:	0000875b 	.word	0x0000875b
   28678:	000087e7 	.word	0x000087e7
   2867c:	00000000 	.word	0x00000000
   28680:	00000001 	.word	0x00000001
   28684:	000087e9 	.word	0x000087e9
   28688:	00028678 	.word	0x00028678
   2868c:	00000000 	.word	0x00000000
   28690:	00028698 	.word	0x00028698
   28694:	00000002 	.word	0x00000002
   28698:	203a      	.short	0x203a
   2869a:	4c42      	.short	0x4c42
   2869c:	61662045 	.word	0x61662045
   286a0:	45476c69 	.word	0x45476c69
   286a4:	61662054 	.word	0x61662054
   286a8:	55526c69 	.word	0x55526c69
   286ac:	6166204e 	.word	0x6166204e
   286b0:	00006c69 	.word	0x00006c69
   286b4:	000286e4 	.word	0x000286e4
   286b8:	00000013 	.word	0x00000013
   286bc:	00000081 	.word	0x00000081
   286c0:	00000005 	.word	0x00000005
   286c4:	000286e4 	.word	0x000286e4
   286c8:	00000013 	.word	0x00000013
   286cc:	000000a8 	.word	0x000000a8
   286d0:	00000012 	.word	0x00000012
   286d4:	000286e4 	.word	0x000286e4
   286d8:	00000013 	.word	0x00000013
   286dc:	000000a9 	.word	0x000000a9
   286e0:	0000000b 	.word	0x0000000b
   286e4:	74737572 	.word	0x74737572
   286e8:	7070612f 	.word	0x7070612f
   286ec:	6372732f 	.word	0x6372732f
   286f0:	62696c2f 	.word	0x62696c2f
   286f4:	0073722e 	.word	0x0073722e
   286f8:	0000900b 	.word	0x0000900b
   286fc:	00000004 	.word	0x00000004
   28700:	00000004 	.word	0x00000004
   28704:	0000875b 	.word	0x0000875b
   28708:	696e6170 	.word	0x696e6170
   2870c:	2063      	.short	0x2063
   2870e:	6f6e      	.short	0x6f6e
   28710:	636f6c20 	.word	0x636f6c20
   28714:	0a          	.byte	0x0a
   28715:	61          	.byte	0x61
   28716:	2074      	.short	0x2074
   28718:	6e696c20 	.word	0x6e696c20
   2871c:	2065      	.short	0x2065
   2871e:	000a      	.short	0x000a
   28720:	000286e4 	.word	0x000286e4
   28724:	00000013 	.word	0x00000013
   28728:	000000c1 	.word	0x000000c1
   2872c:	0000003a 	.word	0x0000003a
   28730:	6c6c6163 	.word	0x6c6c6163
   28734:	60206465 	.word	0x60206465
   28738:	6974704f 	.word	0x6974704f
   2873c:	3a3a6e6f 	.word	0x3a3a6e6f
   28740:	72776e75 	.word	0x72776e75
   28744:	29287061 	.word	0x29287061
   28748:	6e6f2060 	.word	0x6e6f2060
   2874c:	60206120 	.word	0x60206120
   28750:	656e6f4e 	.word	0x656e6f4e
   28754:	61762060 	.word	0x61762060
   28758:	0065756c 	.word	0x0065756c
   2875c:	6c363025 	.word	0x6c363025
   28760:	00002075 	.word	0x00002075
   28764:	18110010 	.word	0x18110010
   28768:	6f727265 	.word	0x6f727265
   2876c:	65642072 	.word	0x65642072
   28770:	6d726574 	.word	0x6d726574
   28774:	6e696e69 	.word	0x6e696e69
   28778:	64612067 	.word	0x64612067
   2877c:	73657264 	.word	0x73657264
   28780:	79742073 	.word	0x79742073
   28784:	203b6570 	.word	0x203b6570
   28788:	253d6372 	.word	0x253d6372
   2878c:	00000a64 	.word	0x00000a64
   28790:	6f727265 	.word	0x6f727265
   28794:	65732072 	.word	0x65732072
   28798:	6e697474 	.word	0x6e697474
   2879c:	64612067 	.word	0x64612067
   287a0:	74726576 	.word	0x74726576
   287a4:	6d657369 	.word	0x6d657369
   287a8:	20746e65 	.word	0x20746e65
   287ac:	61746164 	.word	0x61746164
   287b0:	6372203b 	.word	0x6372203b
   287b4:	0a64253d 	.word	0x0a64253d
   287b8:	00000000 	.word	0x00000000
   287bc:	6f727265 	.word	0x6f727265
   287c0:	6e652072 	.word	0x6e652072
   287c4:	696c6261 	.word	0x696c6261
   287c8:	6120676e 	.word	0x6120676e
   287cc:	72657664 	.word	0x72657664
   287d0:	65736974 	.word	0x65736974
   287d4:	746e656d 	.word	0x746e656d
   287d8:	6372203b 	.word	0x6372203b
   287dc:	0a64253d 	.word	0x0a64253d
   287e0:	00000000 	.word	0x00000000
   287e4:	61747365 	.word	0x61747365
   287e8:	73696c62 	.word	0x73696c62
   287ec:	00646568 	.word	0x00646568
   287f0:	6c696166 	.word	0x6c696166
   287f4:	00006465 	.word	0x00006465
   287f8:	6e6e6f63 	.word	0x6e6e6f63
   287fc:	69746365 	.word	0x69746365
   28800:	25206e6f 	.word	0x25206e6f
   28804:	73203b73 	.word	0x73203b73
   28808:	75746174 	.word	0x75746174
   2880c:	64253d73 	.word	0x64253d73
   28810:	00000020 	.word	0x00000020
   28814:	63736964 	.word	0x63736964
   28818:	656e6e6f 	.word	0x656e6e6f
   2881c:	203b7463 	.word	0x203b7463
   28820:	73616572 	.word	0x73616572
   28824:	253d6e6f 	.word	0x253d6e6f
   28828:	00002064 	.word	0x00002064
   2882c:	6e6e6f63 	.word	0x6e6e6f63
   28830:	69746365 	.word	0x69746365
   28834:	75206e6f 	.word	0x75206e6f
   28838:	74616470 	.word	0x74616470
   2883c:	203b6465 	.word	0x203b6465
   28840:	74617473 	.word	0x74617473
   28844:	253d7375 	.word	0x253d7375
   28848:	00002064 	.word	0x00002064
   2884c:	65766461 	.word	0x65766461
   28850:	73697472 	.word	0x73697472
   28854:	6f632065 	.word	0x6f632065
   28858:	656c706d 	.word	0x656c706d
   2885c:	203b6574 	.word	0x203b6574
   28860:	73616572 	.word	0x73616572
   28864:	253d6e6f 	.word	0x253d6e6f
   28868:	00000064 	.word	0x00000064
   2886c:	72636e65 	.word	0x72636e65
   28870:	69747079 	.word	0x69747079
   28874:	63206e6f 	.word	0x63206e6f
   28878:	676e6168 	.word	0x676e6168
   2887c:	76652065 	.word	0x76652065
   28880:	3b746e65 	.word	0x3b746e65
   28884:	61747320 	.word	0x61747320
   28888:	3d737574 	.word	0x3d737574
   2888c:	00206425 	.word	0x00206425
   28890:	73627573 	.word	0x73627573
   28894:	62697263 	.word	0x62697263
   28898:	76652065 	.word	0x76652065
   2889c:	3b746e65 	.word	0x3b746e65
   288a0:	6e6f6320 	.word	0x6e6f6320
   288a4:	61685f6e 	.word	0x61685f6e
   288a8:	656c646e 	.word	0x656c646e
   288ac:	2064253d 	.word	0x2064253d
   288b0:	72747461 	.word	0x72747461
   288b4:	6e61685f 	.word	0x6e61685f
   288b8:	3d656c64 	.word	0x3d656c64
   288bc:	72206425 	.word	0x72206425
   288c0:	6f736165 	.word	0x6f736165
   288c4:	64253d6e 	.word	0x64253d6e
   288c8:	65727020 	.word	0x65727020
   288cc:	253d6e76 	.word	0x253d6e76
   288d0:	75632064 	.word	0x75632064
   288d4:	253d6e72 	.word	0x253d6e72
   288d8:	72702064 	.word	0x72702064
   288dc:	3d697665 	.word	0x3d697665
   288e0:	63206425 	.word	0x63206425
   288e4:	3d697275 	.word	0x3d697275
   288e8:	000a6425 	.word	0x000a6425
   288ec:	2075746d 	.word	0x2075746d
   288f0:	61647075 	.word	0x61647075
   288f4:	65206574 	.word	0x65206574
   288f8:	746e6576 	.word	0x746e6576
   288fc:	6f63203b 	.word	0x6f63203b
   28900:	685f6e6e 	.word	0x685f6e6e
   28904:	6c646e61 	.word	0x6c646e61
   28908:	64253d65 	.word	0x64253d65
   2890c:	64696320 	.word	0x64696320
   28910:	2064253d 	.word	0x2064253d
   28914:	3d75746d 	.word	0x3d75746d
   28918:	000a6425 	.word	0x000a6425
   2891c:	65736552 	.word	0x65736552
   28920:	6e697474 	.word	0x6e697474
   28924:	74732067 	.word	0x74732067
   28928:	3b657461 	.word	0x3b657461
   2892c:	61657220 	.word	0x61657220
   28930:	3d6e6f73 	.word	0x3d6e6f73
   28934:	000a6425 	.word	0x000a6425
   28938:	646e6168 	.word	0x646e6168
   2893c:	253d656c 	.word	0x253d656c
   28940:	756f2064 	.word	0x756f2064
   28944:	746f5f72 	.word	0x746f5f72
   28948:	64615f61 	.word	0x64615f61
   2894c:	745f7264 	.word	0x745f7264
   28950:	3d657079 	.word	0x3d657079
   28954:	6f206425 	.word	0x6f206425
   28958:	6f5f7275 	.word	0x6f5f7275
   2895c:	615f6174 	.word	0x615f6174
   28960:	3d726464 	.word	0x3d726464
   28964:	00000000 	.word	0x00000000
   28968:	72756f20 	.word	0x72756f20
   2896c:	5f64695f 	.word	0x5f64695f
   28970:	72646461 	.word	0x72646461
   28974:	7079745f 	.word	0x7079745f
   28978:	64253d65 	.word	0x64253d65
   2897c:	72756f20 	.word	0x72756f20
   28980:	5f64695f 	.word	0x5f64695f
   28984:	72646461 	.word	0x72646461
   28988:	0000003d 	.word	0x0000003d
   2898c:	65657020 	.word	0x65657020
   28990:	746f5f72 	.word	0x746f5f72
   28994:	64615f61 	.word	0x64615f61
   28998:	745f7264 	.word	0x745f7264
   2899c:	3d657079 	.word	0x3d657079
   289a0:	70206425 	.word	0x70206425
   289a4:	5f726565 	.word	0x5f726565
   289a8:	5f61746f 	.word	0x5f61746f
   289ac:	72646461 	.word	0x72646461
   289b0:	0000003d 	.word	0x0000003d
   289b4:	65657020 	.word	0x65657020
   289b8:	64695f72 	.word	0x64695f72
   289bc:	6464615f 	.word	0x6464615f
   289c0:	79745f72 	.word	0x79745f72
   289c4:	253d6570 	.word	0x253d6570
   289c8:	65702064 	.word	0x65702064
   289cc:	695f7265 	.word	0x695f7265
   289d0:	64615f64 	.word	0x64615f64
   289d4:	003d7264 	.word	0x003d7264
   289d8:	6e6f6320 	.word	0x6e6f6320
   289dc:	74695f6e 	.word	0x74695f6e
   289e0:	253d6c76 	.word	0x253d6c76
   289e4:	6f632064 	.word	0x6f632064
   289e8:	6c5f6e6e 	.word	0x6c5f6e6e
   289ec:	6e657461 	.word	0x6e657461
   289f0:	253d7963 	.word	0x253d7963
   289f4:	75732064 	.word	0x75732064
   289f8:	76726570 	.word	0x76726570
   289fc:	6f697369 	.word	0x6f697369
   28a00:	69745f6e 	.word	0x69745f6e
   28a04:	756f656d 	.word	0x756f656d
   28a08:	64253d74 	.word	0x64253d74
   28a0c:	636e6520 	.word	0x636e6520
   28a10:	74707972 	.word	0x74707972
   28a14:	253d6465 	.word	0x253d6465
   28a18:	75612064 	.word	0x75612064
   28a1c:	6e656874 	.word	0x6e656874
   28a20:	61636974 	.word	0x61636974
   28a24:	3d646574 	.word	0x3d646574
   28a28:	62206425 	.word	0x62206425
   28a2c:	65646e6f 	.word	0x65646e6f
   28a30:	64253d64 	.word	0x64253d64
   28a34:	0000000a 	.word	0x0000000a
   28a38:	72617453 	.word	0x72617453
   28a3c:	676e6974 	.word	0x676e6974
   28a40:	454c4220 	.word	0x454c4220
   28a44:	0a2e2e2e 	.word	0x0a2e2e2e
   28a48:	00000000 	.word	0x00000000
   28a4c:	656e6970 	.word	0x656e6970
   28a50:	656d6974 	.word	0x656d6974
   28a54:	00000000 	.word	0x00000000
   28a58:	20454c42 	.word	0x20454c42
   28a5c:	72617473 	.word	0x72617473
   28a60:	0a646574 	.word	0x0a646574
   28a64:	00000000 	.word	0x00000000

00028a68 <gatt_svr_chr_sec_test_rand_uuid>:
   28a68:	c96df680 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   28a78:	0000005c                                \...

00028a7c <gatt_svr_chr_sec_test_static_uuid>:
   28a7c:	c96df780 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   28a8c:	0000005c                                \...

00028a90 <gatt_svr_svc_sec_test_uuid>:
   28a90:	a2712d80 c858b459 43999912 462f1295     .-q.Y.X....C../F
   28aa0:	00000059                                Y...

00028aa4 <gatt_svr_svcs>:
   28aa4:	00000001 00028a90 00000000 200000f0     ............... 
	...
   28ac4:	65737341 40207472 25783020 00000a78     Assert @ 0x%x...
   28ad4:	65737341 40207472 25783020 202d2078     Assert @ 0x%x - 
   28ae4:	253a7325 00000a64 61686e55 656c646e     %s:%d...Unhandle
   28af4:	6e692064 72726574 20747075 646c2528     d interrupt (%ld
   28b04:	65202c29 70656378 6e6f6974 20707320     ), exception sp 
   28b14:	30257830 0a786c38 00000000 3a307220     0x%08lx..... r0:
   28b24:	30257830 20786c38 3a317220 30257830     0x%08lx  r1:0x%0
   28b34:	20786c38 3a327220 30257830 20786c38     8lx  r2:0x%08lx 
   28b44:	3a337220 30257830 0a786c38 00000000      r3:0x%08lx.....
   28b54:	3a347220 30257830 20786c38 3a357220      r4:0x%08lx  r5:
   28b64:	30257830 20786c38 3a367220 30257830     0x%08lx  r6:0x%0
   28b74:	20786c38 3a377220 30257830 0a786c38     8lx  r7:0x%08lx.
   28b84:	00000000 3a387220 30257830 20786c38     .... r8:0x%08lx 
   28b94:	3a397220 30257830 20786c38 3a303172      r9:0x%08lx r10:
   28ba4:	30257830 20786c38 3a313172 30257830     0x%08lx r11:0x%0
   28bb4:	0a786c38 00000000 3a323172 30257830     8lx.....r12:0x%0
   28bc4:	20786c38 3a726c20 30257830 20786c38     8lx  lr:0x%08lx 
   28bd4:	3a637020 30257830 20786c38 3a727370      pc:0x%08lx psr:
   28be4:	30257830 0a786c38 00000000 52534349     0x%08lx.....ICSR
   28bf4:	2578303a 786c3830 53464820 78303a52     :0x%08lx HFSR:0x
   28c04:	6c383025 46432078 303a5253 38302578     %08lx CFSR:0x%08
   28c14:	000a786c 52414642 2578303a 786c3830     lx..BFAR:0x%08lx
   28c24:	464d4d20 303a5241 38302578 000a786c      MMFAR:0x%08lx..
   28c34:	6e69616d 00000000 656c6469 00000000     main....idle....
   28c44:	7379736d 0000315f                       msys_1..

00028c4c <MemFile_methods>:
   28c4c:	0000c02d 00000000                       -.......

00028c54 <stdout>:
   28c54:	20000150 00006372                       P.. rc..

00028c5c <imgr_mgmt_handlers>:
	...
   28c90:	0000c549 252e7525 75252e75 756c252e     I...%u.%u.%u.%lu
   28ca0:	00000000 252e7525 75252e75 00000000     ....%u.%u.%u....
   28cb0:	5f656c62 5f706167 61647075 00006574     ble_gap_update..
   28cc0:	28030010 28020010 28000010              ...(...(...(

00028ccc <ble_gattc_err_dispatch>:
   28ccc:	0000ddfb 0000de3f 0000de8f 0000dedd     ....?...........
   28cdc:	0000df2f 0000df7d 0000dfd3 0000e021     /...}.......!...
   28cec:	0000e065 0000e0a9 0000e103 0000e351     e...........Q...
   28cfc:	0000e3fb 0000e3db 0000e801 5f656c62     ............ble_
   28d0c:	74746167 72705f63 705f636f 006c6f6f     gattc_proc_pool.

00028d1c <ble_gattc_resume_dispatch>:
   28d1c:	00000000 0000e759 0000e709 0000e6a9     ....Y...........
   28d2c:	0000e651 0000e601 0000e5b1 00000000     Q...............
   28d3c:	00000000 0000e579 00000000 00000000     ....y...........
   28d4c:	0000e53b 0000e4a9 00000000              ;...........

00028d58 <ble_gattc_tmo_dispatch>:
   28d58:	0000dded 0000de31 0000de81 0000decf     ....1...........
   28d68:	0000df21 0000df6f 0000dfc5 0000e013     !...o...........
   28d78:	0000e057 0000e09b 0000e0f5 0000e345     W...........E...
   28d88:	0000e133 0000e16f 0000e2fd 28030010     3...o..........(
   28d98:	5f656c62 74746167 6c635f73 66635f74     ble_gatts_clt_cf
   28da8:	6f705f67 00006c6f 5f656c62 685f7368     g_pool..ble_hs_h
   28db8:	655f6963 6f705f76 00006c6f 5f656c62     ci_ev_pool..ble_
   28dc8:	635f7368 5f6e6e6f 6c6f6f70 00000000     hs_conn_pool....
   28dd8:	5f656c62 685f7368 665f6963 00676172     ble_hs_hci_frag.

00028de8 <ble_hs_hci_evt_dispatch>:
   28de8:	0000003e 00010ec9 00000013 00010fcb     >...............
   28df8:	00000005 00010f99 00000008 00010f85     ................
   28e08:	00000030 00010f71 00000010 00010f5d     0...q.......]...

00028e18 <ble_hs_hci_evt_le_dispatch>:
   28e18:	00000000 000111c3 000110bf 00011265     ............e...
   28e28:	00011251 0001123d 00011229 00000000     Q...=...).......
	...
   28e40:	0001113d 00011041 0001102d 00010f3d     =...A...-...=...
   28e50:	00010f41 00010f45 00010f49 00010f51     A...E...I...Q...
   28e60:	00010f55 00010f59 00000000 00000000     U...Y...........
	...
   28e78:	00010f4d                                M...

00028e7c <priv_addr_types.12672>:
   28e7c:	00000203                                ....

00028e80 <pub_addr_types.12671>:
   28e80:	00000001                                ....

00028e84 <ble_hs_pvcy_default_irk>:
   28e84:	16e28def 0d43ec4f 34dd5bbf b81e53c0     ....O.C..[.4.S..
   28e94:	5f656c62 6163326c 68635f70 705f6e61     ble_l2cap_chan_p
   28ea4:	006c6f6f                                ool.

00028ea8 <ble_l2cap_sig_dispatch>:
   28ea8:	00000000 00012101 00000000 00011faf     .....!..........
   28eb8:	00000000 00011faf 00011faf 00011faf     ................
   28ec8:	00000000 00011faf 00000000 00011faf     ................
   28ed8:	00000000 00011faf 00000000 00011faf     ................
   28ee8:	00000000 00011faf 000121d7 00012115     .........!...!..
   28ef8:	00011faf 00011faf 00011faf 00011faf     ................
   28f08:	00011faf 00011faf 00011faf 5f656c62     ............ble_
   28f18:	6163326c 69735f70 72705f67 705f636f     l2cap_sig_proc_p
   28f28:	006c6f6f                                ool.

00028f2c <ble_sm_dispatch>:
   28f2c:	00000000 0001338f 000135cb 0001351d     .....3...5...5..
   28f3c:	00013ab3 00012f59 00013309 0001328f     .:..Y/...3...2..
   28f4c:	0001320f 00013195 00013115 00013c85     .2...1...1...<..
   28f5c:	00012541 00012541 00012541 5f656c62     A%..A%..A%..ble_
   28f6c:	705f6d73 5f636f72 6c6f6f70 00000000     sm_proc_pool....

00028f7c <ble_sm_state_dispatch>:
   28f7c:	000139ff 00012d61 00012d4f 00012cad     .9..a-..O-...,..
   28f8c:	00012d01 00012c1f 00012c11 00012939     .-...,...,..9)..
   28f9c:	00012785 00000000 00000000              .'..........

00028fa8 <ble_sm_lgcy_init_ioa>:
   28fa8:	00020000 02000002 03030200 00030002     ................
   28fb8:	00000000 00020303 00000003              ............

00028fc4 <ble_sm_lgcy_resp_ioa>:
   28fc4:	00030000 03000003 02020300 00020002     ................
   28fd4:	00000000 00030202 00000002              ............

00028fe0 <ble_uuid_base>:
   28fe0:	5f9b34fb 80000080 00001000 00000000     .4._............
   28ff0:	30257830 00786834 30257830 00786c38     0x%04hx.0x%08lx.
   29000:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   29010:	3230252d 32302578 30252d78 30257832     -%02x%02x-%02x%0
   29020:	252d7832 25783230 2d783230 78323025     2x-%02x%02x-%02x
   29030:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   29040:	78323025 00000000                       %02x....

00029048 <ble_att_rx_dispatch>:
   29048:	00000001 00014819 00000002 000158bb     .....H.......X..
   29058:	00000003 00014841 00000004 0001594f     ....AH......OY..
   29068:	00000005 000148a9 00000006 000159b9     .....H.......Y..
   29078:	00000007 000148b1 00000008 00015a31     .....H......1Z..
   29088:	00000009 000148b9 0000000a 00015ad9     .....H.......Z..
   29098:	0000000b 000148c1 0000000c 00015b55     .....H......U[..
   290a8:	0000000d 000148c9 0000000e 00015bd5     .....H.......[..
   290b8:	0000000f 000148cd 00000010 00015c11     .....H.......\..
   290c8:	00000011 000148d5 00000012 00015cd3     .....H.......\..
   290d8:	00000013 000148d9 00000016 00015d95     .....H.......]..
   290e8:	00000017 000148e1 00000018 00015e47     .....H......G^..
   290f8:	00000019 000148e9 0000001b 00015efb     .....H.......^..
   29108:	0000001d 00015f39 0000001e 0001496d     ....9_......mI..
   29118:	00000052 00015d3f 5f656c62 5f747461     R...?]..ble_att_
   29128:	5f727673 70657270 746e655f 705f7972     svr_prep_entry_p
   29138:	006c6f6f 5f656c62 5f747461 5f727673     ool.ble_att_svr_
   29148:	72746e65 6f705f79 00006c6f              entry_pool..

00029154 <ble_svc_dis_defs>:
   29154:	00000001 200001a4 00000000 200001b0     ....... ....... 
	...
   29174:	63617041 4d206568 77656e79 694e2074     Apache Mynewt Ni
   29184:	454c426d 00000000                       mBLE....

0002918c <ble_svc_gap_defs>:
   2918c:	00000001 20000214 00000000 20000220     ....... .... .. 
	...
   291ac:	5f656c62 5f696368 5f6d6172 5f646d63     ble_hci_ram_cmd_
   291bc:	6c6f6f70 00000000 5f656c62 5f696368     pool....ble_hci_
   291cc:	5f6d6172 5f747665 705f6968 006c6f6f     ram_evt_hi_pool.
   291dc:	5f656c62 5f696368 5f6d6172 5f747665     ble_hci_ram_evt_
   291ec:	705f6f6c 006c6f6f 0000002f 646c6c25     lo_pool./...%lld
   291fc:	00000000 756c6c25 00000000              ....%llu....

00029208 <sysflash_map_dflt>:
	...
   29210:	00007000 00000001 00008000 00074000     .p...........@..
   29220:	00000102 00040000 00074000 00000003     .........@......
   29230:	0007c000 00001000 00000010 00007000     .............p..
   29240:	00001000 00000111 000b4000 0034c000     .........@....4.

00029250 <boot_img_magic>:
   29250:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00029260 <boot_swap_tables>:
   29260:	03040104 01040204 03040104 04030301     ................
   29270:	00000401                                ....

00029274 <__compound_literal.0>:
   29274:	0002929c 20008005 00000000 00000002     ....... ........
	...
   29294:	696c7073 00000074 74617473 00007375     split...status..

000292a4 <img_mgmt_handlers>:
   292a4:	00017e01 00017f99 00000000 00017a91     .~...........z..
	...
   292d0:	0001783d 61746164 00000000 006e656c     =x..data....len.
   292e0:	00616873 72677075 00656461 0066666f     sha.upgrade.off.
   292f0:	67616d69 00007365 746f6c73 00000000     images..slot....
   29300:	73726576 006e6f69 68736168 00000000     version.hash....
   29310:	746f6f62 656c6261 00000000 646e6570     bootable....pend
   29320:	00676e69 666e6f63 656d7269 00000064     ing.confirmed...
   29330:	69746361 00006576 6d726570 6e656e61     active..permanen
   29340:	00000074 696c7073 61745374 00737574     t...splitStatus.
   29350:	666e6f63 006d7269 666e6f63 00000000     confirm.conf....
   29360:	646e6570 00000000 6f647075 0000656e     pend....updone..
   29370:	74737075 00747261 00000072              upstart.r...

0002937c <os_mgmt_group_handlers>:
   2937c:	000186c1 000186c1 00000000 00000000     ................
   2938c:	00018655 00000000 00000000 00000000     U...............
	...
   293a8:	00018505 6f697270 00000000 00646974     ....prio....tid.
   293b8:	74617473 00000065 756b7473 00006573     state...stkuse..
   293c8:	736b7473 00007a69 63777363 0000746e     stksiz..cswcnt..
   293d8:	746e7572 00656d69 7473616c 6568635f     runtime.last_che
   293e8:	6e696b63 00000000 7478656e 6568635f     ckin....next_che
   293f8:	6e696b63 00000000 6b736174 00000073     ckin....tasks...
   29408:	00000000 01000000 02000000 04000000     ................
   29418:	08000000 10000000 20000000 40000000     ........... ...@
   29428:	80000000 1b000000 36000000              ...........6

00029434 <sbox>:
   29434:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
   29444:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
   29454:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
   29464:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
   29474:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
   29484:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
   29494:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
   294a4:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
   294b4:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
   294c4:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
   294d4:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
   294e4:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
   294f4:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
   29504:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
   29514:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
   29524:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

00029534 <base64_chars>:
   29534:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   29544:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   29554:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   29564:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   29574:	00000000                                ....

00029578 <flash_devs>:
   29578:	000295cc 200002d4                       ....... 

00029580 <spiflash_characteristics>:
   29580:	00007530 00061a80 0001d4c0 000c3500     0u...........5..
   29590:	000249f0 000f4240 002dc6c0 00989680     .I..@B....-.....
   295a0:	000002bc 00000bb8 00000014 00000032     ............2...

000295b0 <spiflash_flash_funcs>:
   295b0:	00019f1b 00019fd1 0001a187 00019d4d     ............M...
   295c0:	00000000 0001a2e5 0001a259              ........Y...

000295cc <nrf52k_flash_dev>:
   295cc:	000295e4 00000000 00080000 00000080     ................
   295dc:	00000001 000000ff                       ........

000295e4 <nrf52k_flash_funcs>:
   295e4:	0001a765 0001a695 0001a615 0001a66d     e...........m...
   295f4:	00000000 0001a669 00000000              ....i.......

00029600 <nrf52_hal_spis>:
   29600:	20008074 00000000 00000000 00000000     t.. ............

00029610 <hal_i2c1_cfg>:
   29610:	00000007 00000006 00000064              ........d...

0002961c <os_bsp_spi0m_cfg>:
   2961c:	00040302                                ....

00029620 <nrf52_hal_i2cs>:
   29620:	00000000 20000330                       ....0.. 

00029628 <nrf52_hal_timers>:
	...
   2963c:	2000809c 736e6573 6e5f726f 6669746f     ... sensor_notif
   2964c:	7476655f 00000073 74696e49 47564c20     _evts...Init LVG
   2965c:	2e2e2e4c 00000000                       L.......

00029664 <COLLECTOR_NODE_HW_ID>:
   29664:	066aff57 50547878 67242949              W.j.xxTPI)$g

00029670 <SENSOR_NODE_HW_IDS>:
   29670:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   29680:	08070605 020b0a09 04030201 08070605     ................
   29690:	030b0a09 04030201 08070605 040b0a09     ................
   296a0:	04030201 08070605 050b0a09 77687325     ............%shw
   296b0:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   296c0:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   296d0:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   296e0:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   296f0:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   29700:	0a732520 00000000                        %s.....

00029708 <sensor_node_addresses>:
   29708:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   29718:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   29728:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   29738:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   29748:	00000a73                                s...

0002974c <g_temp_stub_sensor_driver>:
   2974c:	0001c6dd 0001c5cd 00000000 00000000     ................
	...
   29774:	20425453 64616572 6d657420 65732070     STB read temp se
   29784:	726f736e 0000000a                       nsor....

0002978c <g_smp_cbor_cfg>:
   2978c:	0001c803 0001c7fb 0001c7eb 0001c7bf     ................
   2979c:	0001c7ad 0001c79d 0001c791              ............

000297a8 <gatt_svr_chr_smp>:
   297a8:	997c4880 9e261174 ce4e01ae 2e7828fb     .H|.t.&...N..(x.
   297b8:	000000da                                ....

000297bc <gatt_svr_svc_smp>:
   297bc:	60aa8480 8b8a5274 b74cd386 53dc1d1d     ...`tR....L....S
   297cc:	0000008d                                ....

000297d0 <gatt_svr_svcs>:
   297d0:	00000001 000297bc 00000000 20000368     ............h.. 
	...
   297f0:	635f636f 62635f6c 00000073 725f636f     oc_cl_cbs...oc_r
   29800:	6f5f7065 00000000 5f656c62 00006c6c     ep_o....ble_ll..

00029810 <g_ble_ll_pdu_header_tx_time>:
   29810:	005001ce 02d0002c                       ..P.,...

00029818 <g_ble_ll_ctrl_pkt_lengths>:
   29818:	1601070b 0100000c 00000808 17080105     ................
   29828:	00000217 02020808 00010204 2a010122     ............"..*
   29838:	00030f08 5f656c62 735f6c6c 5f6e6163     ....ble_ll_scan_
   29848:	5f707564 6c6f6f70 00000000              dup_pool....

00029854 <g_ble_ll_supp_cmds>:
   29854:	00000020 00004000 00000000 22280000      ....@........("
	...
   2986c:	fffff700 0000000f 0ff9f000 07800000     ................
	...

00029884 <g_ble_sca_ppm_tbl>:
   29884:	00fa01f4 00640096 0032004b 0014001e     ......d.K.2.....

00029894 <g_ble_phy_chan_freq>:
   29894:	0a080604 12100e0c 1c181614 2422201e     ............. "$
   298a4:	2c2a2826 3432302e 3c3a3836 4442403e     &(*,.02468:<>@BD
   298b4:	4c4a4846 501a024e                       FHJLN..P

000298bc <g_ble_phy_t_rxaddrdelay>:
   298bc:	11020611                                ....

000298c0 <g_ble_phy_t_rxenddelay>:
   298c0:	1b020616                                ....

000298c4 <g_ble_phy_t_txdelay>:
   298c4:	05030405                                ....

000298c8 <g_ble_phy_t_txenddelay>:
   298c8:	09030403                                ....

000298cc <ble_svc_ans_defs>:
   298cc:	00000001 20000398 00000000 200003b0     ....... ....... 
	...

000298ec <ble_svc_gatt_defs>:
   298ec:	00000001 20000440 00000000 20000448     ....@.. ....H.. 
	...
   2990c:	5f656c62 6f2f7368 735f7275 00006365     ble_hs/our_sec..
   2991c:	5f656c62 702f7368 5f726565 00636573     ble_hs/peer_sec.
   2992c:	5f656c62 632f7368 00646363 5f72756f     ble_hs/cccd.our_
   2993c:	00636573 72656570 6365735f 00000000     sec.peer_sec....
   2994c:	64636363 00000000 5f656c62 00007368     cccd....ble_hs..
   2995c:	00000031 44524148 00000000 45534552     1...HARD....RESE
   2996c:	49505f54 0000004e 474f4457 00000000     T_PIN...WDOG....
   2997c:	54464f53 00000000 574f5242 54554f4e     SOFT....BROWNOUT
   2998c:	00000000 55514552 45545345 00000044     ....REQUESTED...
   2999c:	54535953 4f5f4d45 495f4646 0000544e     SYSTEM_OFF_INT..
   299ac:	00554644 4548544f 30203a52 00582578     DFU.OTHER: 0x%X.
   299bc:	4e4b4e55 204e574f 00006425 006e7372     UNKNOWN %d..rsn.
   299cc:	00746e63 00676d69 252e7525 75252e75     cnt.img.%u.%u.%u
   299dc:	0075252e 00656964 253a7325 00000064     .%u.die.%s:%d...
   299ec:	00006370 67616c66 00000073 00207325     pc..flags...%s .
   299fc:	6f626572 722f746f 6f6f6265 6e635f74     reboot/reboot_cn
   29a0c:	00000074 6f626572 772f746f 74746972     t...reboot/writt
   29a1c:	00006e65 6f626572 635f746f 0000746e     en..reboot_cnt..
   29a2c:	74697277 006e6574 6f626572 0000746f     written.reboot..
   29a3c:	7465733c 0000003e 70616f63 6365725f     <set>...coap_rec
   29a4c:	65766965 544f4e20 504d4920 454d454c     eive NOT IMPLEME
   29a5c:	4445544e 0000000a                       NTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 137820	    992	  37156	 175968	  2af60	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
