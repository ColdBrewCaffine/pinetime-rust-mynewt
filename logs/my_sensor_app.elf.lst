
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00029a5c vaddr 0x00029a5c paddr 0x00029a5c align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00029a74 memsz 0x00029a74 flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x00029a74 align 2**16
         filesz 0x000003e0 memsz 0x00000404 flags rw-
    LOAD off    0x000304e0 vaddr 0x200004e0 paddr 0x00029e54 align 2**16
         filesz 0x00000000 memsz 0x00009008 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              00021a3c  00008020  00008020  00008020  2**3  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00029a5c  00029a5c  000304b8  2**0  CONTENTS
  3 .ARM.exidx         00000018  00029a5c  00029a5c  00029a5c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  000304b8  2**0  CONTENTS
  6 .data              000003e0  200000d8  00029a74  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000024  200004b8  00029e54  000304b8  2**2  ALLOC
  8 .bss               00009008  200004e0  00029e54  000304e0  2**3  ALLOC
  9 .stack_dummy       000001b0  200094e8  200094e8  000304b8  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  00030668  2**0  CONTENTS, READONLY
 11 .comment           000000fe  00000000  00000000  000306a3  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000307a1  2**0  CONTENTS, READONLY
 13 .debug_line        000512fe  00000000  00000000  000307a5  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        000fd27c  00000000  00000000  00081aa3  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0001e6ca  00000000  00000000  0017ed1f  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005cb8  00000000  00000000  0019d3f0  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         00025766  00000000  00000000  001a30a8  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00050b56  00000000  00000000  001c880e  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      00005f38  00000000  00000000  00219364  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       000101bc  00000000  00000000  0021f29c  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_pubnames    0000148a  00000000  00000000  0022f458  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubtypes    00005687  00000000  00000000  002308e2  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00029a5c l    d  .ARM.extab	00000000 .ARM.extab
00029a5c l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
200004b8 l    d  .bssnz	00000000 .bssnz
200004e0 l    d  .bss	00000000 .bss
200094e8 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
00008248 l     F .text	0000003c errata_16
00008284 l     F .text	0000004c errata_31
000082d0 l     F .text	0000003c errata_32
0000830c l     F .text	0000004c errata_36
00008358 l     F .text	0000003c errata_37
00008394 l     F .text	0000003c errata_57
000083d0 l     F .text	0000003c errata_66
0000840c l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 41zlgfyhb9r73787
00006bb9 l       .debug_str	00000000 
000079a5 l       .debug_str	00000000 
000079b3 l       .debug_str	00000000 
00007a11 l       .debug_str	00000000 
00007a23 l       .debug_str	00000000 
00007a2f l       .debug_str	00000000 
00007a63 l       .debug_str	00000000 
0000872a l       .debug_str	00000000 
00007aab l       .debug_str	00000000 
00007ace l       .debug_str	00000000 
00007b16 l       .debug_str	00000000 
00007b1a l       .debug_str	00000000 
00007b44 l       .debug_str	00000000 
00007b49 l       .debug_str	00000000 
00007b4f l       .debug_str	00000000 
000096d5 l       .debug_str	00000000 
00008760 l       .debug_str	00000000 
00007b5d l       .debug_str	00000000 
00007b8d l       .debug_str	00000000 
00007bb8 l       .debug_str	00000000 
00007bf4 l       .debug_str	00000000 
00007c33 l       .debug_str	00000000 
00007c3a l       .debug_str	00000000 
00007c7a l       .debug_str	00000000 
00007ca1 l       .debug_str	00000000 
00007cd2 l       .debug_str	00000000 
00007cd8 l       .debug_str	00000000 
00007d19 l       .debug_str	00000000 
00007d2e l       .debug_str	00000000 
00007d60 l       .debug_str	00000000 
00008973 l       .debug_str	00000000 
00007d94 l       .debug_str	00000000 
00008907 l       .debug_str	00000000 
00007dc5 l       .debug_str	00000000 
0000bab6 l       .debug_str	00000000 
00007dec l       .debug_str	00000000 
00007e4a l       .debug_str	00000000 
0000a46e l       .debug_str	00000000 
00007e7f l       .debug_str	00000000 
000130c6 l       .debug_str	00000000 
00007eb9 l       .debug_str	00000000 
00007ee6 l       .debug_str	00000000 
00007f17 l       .debug_str	00000000 
00007f21 l       .debug_str	00000000 
00007f51 l       .debug_str	00000000 
00007fb5 l       .debug_str	00000000 
00007ffb l       .debug_str	00000000 
0000803b l       .debug_str	00000000 
00018531 l       .debug_str	00000000 
0000806a l       .debug_str	00000000 
000080b4 l       .debug_str	00000000 
000080bd l       .debug_str	00000000 
000080f5 l       .debug_str	00000000 
00008108 l       .debug_str	00000000 
00008150 l       .debug_str	00000000 
0000815b l       .debug_str	00000000 
00009d57 l       .debug_str	00000000 
00008191 l       .debug_str	00000000 
000097f8 l       .debug_str	00000000 
000081c2 l       .debug_str	00000000 
0001c411 l       .debug_str	00000000 
000081f3 l       .debug_str	00000000 
00008239 l       .debug_str	00000000 
0000a466 l       .debug_str	00000000 
00008241 l       .debug_str	00000000 
00008281 l       .debug_str	00000000 
000082c8 l       .debug_str	00000000 
000082f8 l       .debug_str	00000000 
0000830a l       .debug_str	00000000 
00008368 l       .debug_str	00000000 
0000837b l       .debug_str	00000000 
000083b7 l       .debug_str	00000000 
000083c5 l       .debug_str	00000000 
0000840c l       .debug_str	00000000 
00008448 l       .debug_str	00000000 
00008451 l       .debug_str	00000000 
0000847c l       .debug_str	00000000 
00008485 l       .debug_str	00000000 
00014c14 l       .debug_str	00000000 
000084dc l       .debug_str	00000000 
000084fd l       .debug_str	00000000 
00009ac4 l       .debug_str	00000000 
00019254 l       .debug_str	00000000 
0000c709 l       .debug_str	00000000 
0000e2ac l       .debug_str	00000000 
0000c708 l       .debug_str	00000000 
0002394d l       .debug_str	00000000 
00008501 l       .debug_str	00000000 
00007f1c l       .debug_str	00000000 
000138f4 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000851e l       .debug_str	00000000 
00008524 l       .debug_str	00000000 
00008532 l       .debug_str	00000000 
0000853c l       .debug_str	00000000 
00008544 l       .debug_str	00000000 
00008550 l       .debug_str	00000000 
0000855b l       .debug_str	00000000 
0001e785 l       .debug_str	00000000 
00008575 l       .debug_str	00000000 
00013926 l       .debug_str	00000000 
00013a7d l       .debug_str	00000000 
00024e83 l       .debug_str	00000000 
00008582 l       .debug_str	00000000 
0001d473 l       .debug_str	00000000 
00008587 l       .debug_str	00000000 
0000858e l       .debug_str	00000000 
0000859a l       .debug_str	00000000 
0001bf9c l       .debug_str	00000000 
00014a1a l       .debug_str	00000000 
000085a2 l       .debug_str	00000000 
000085a5 l       .debug_str	00000000 
000085ab l       .debug_str	00000000 
000085b3 l       .debug_str	00000000 
000085b9 l       .debug_str	00000000 
000085de l       .debug_str	00000000 
000085c4 l       .debug_str	00000000 
000085e7 l       .debug_str	00000000 
00008606 l       .debug_str	00000000 
000093fa l       .debug_str	00000000 
0000863b l       .debug_str	00000000 
0000862d l       .debug_str	00000000 
00008642 l       .debug_str	00000000 
0000864c l       .debug_str	00000000 
000086c0 l       .debug_str	00000000 
000086ae l       .debug_str	00000000 
000086cb l       .debug_str	00000000 
000086e4 l       .debug_str	00000000 
000086fa l       .debug_str	00000000 
00008718 l       .debug_str	00000000 
0000871c l       .debug_str	00000000 
00008733 l       .debug_str	00000000 
0000874b l       .debug_str	00000000 
00008754 l       .debug_str	00000000 
00008767 l       .debug_str	00000000 
0000876d l       .debug_str	00000000 
00008778 l       .debug_str	00000000 
0000877d l       .debug_str	00000000 
00000b70 l       .debug_str	00000000 
00000bb1 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bc8 l       .debug_str	00000000 
00000c0c l       .debug_str	00000000 
00000bd0 l       .debug_str	00000000 
00000bcf l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0001a1f7 l       .debug_str	00000000 
00002c16 l       .debug_str	00000000 
00000bd4 l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
0001eb49 l       .debug_str	00000000 
00000bf0 l       .debug_str	00000000 
00000bf8 l       .debug_str	00000000 
00000bfc l       .debug_str	00000000 
00000c05 l       .debug_str	00000000 
0001c01f l       .debug_str	00000000 
00000c0f l       .debug_str	00000000 
00000c15 l       .debug_str	00000000 
00000c1b l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c31 l       .debug_str	00000000 
00000c28 l       .debug_str	00000000 
00000e25 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c48 l       .debug_str	00000000 
000141b0 l       .debug_str	00000000 
000011d8 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
00000c50 l       .debug_str	00000000 
000002a6 l       .debug_str	00000000 
00000f94 l       .debug_str	00000000 
00000c53 l       .debug_str	00000000 
00000c5b l       .debug_str	00000000 
00000c66 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c7e l       .debug_str	00000000 
00000c89 l       .debug_str	00000000 
00000c91 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca7 l       .debug_str	00000000 
00000cb1 l       .debug_str	00000000 
00000cbc l       .debug_str	00000000 
00000cc7 l       .debug_str	00000000 
00000cd4 l       .debug_str	00000000 
00000ce0 l       .debug_str	00000000 
00000ced l       .debug_str	00000000 
00000cfb l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d26 l       .debug_str	00000000 
00000d38 l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d62 l       .debug_str	00000000 
000084f1 l       .debug_str	00000000 
0000818f l       .debug_str	00000000 
00000d78 l       .debug_str	00000000 
00000df1 l       .debug_str	00000000 
0001066c l       .debug_str	00000000 
00009872 l       .debug_str	00000000 
00000d7c l       .debug_str	00000000 
00000d81 l       .debug_str	00000000 
00000d86 l       .debug_str	00000000 
00000d96 l       .debug_str	00000000 
00000daf l       .debug_str	00000000 
00000d9a l       .debug_str	00000000 
00000dbb l       .debug_str	00000000 
0000b007 l       .debug_str	00000000 
00000e19 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
00000e31 l       .debug_str	00000000 
0001d101 l       .debug_str	00000000 
000011bb l       .debug_str	00000000 
00000e39 l       .debug_str	00000000 
0001c0f3 l       .debug_str	00000000 
00000e40 l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e54 l       .debug_str	00000000 
00000e58 l       .debug_str	00000000 
00000e63 l       .debug_str	00000000 
00000e7e l       .debug_str	00000000 
00000e6e l       .debug_str	00000000 
00000e85 l       .debug_str	00000000 
00000edf l       .debug_str	00000000 
00000ee4 l       .debug_str	00000000 
00000f46 l       .debug_str	00000000 
00000f51 l       .debug_str	00000000 
00000f98 l       .debug_str	00000000 
00000fe7 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000102e l       .debug_str	00000000 
00001073 l       .debug_str	00000000 
0000107c l       .debug_str	00000000 
0000108c l       .debug_str	00000000 
00001094 l       .debug_str	00000000 
000010e9 l       .debug_str	00000000 
00001146 l       .debug_str	00000000 
00001152 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001167 l       .debug_str	00000000 
00001173 l       .debug_str	00000000 
0000117c l       .debug_str	00000000 
00001184 l       .debug_str	00000000 
0000097d l       .debug_str	00000000 
0000118c l       .debug_str	00000000 
000011ba l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
0000e0de l       .debug_str	00000000 
000011c1 l       .debug_str	00000000 
000011c9 l       .debug_str	00000000 
00000b3b l       .debug_str	00000000 
000011d3 l       .debug_str	00000000 
000011dc l       .debug_str	00000000 
00000a92 l       .debug_str	00000000 
000108d0 l       .debug_str	00000000 
00000a7c l       .debug_str	00000000 
00000a4a l       .debug_str	00000000 
00013a5a l       .debug_str	00000000 
000116a7 l       .debug_str	00000000 
00000a05 l       .debug_str	00000000 
000008b9 l       .debug_str	00000000 
0000088b l       .debug_str	00000000 
00008ccf l       .debug_str	00000000 
000011e7 l       .debug_str	00000000 
00001214 l       .debug_str	00000000 
00011257 l       .debug_str	00000000 
0001e166 l       .debug_str	00000000 
0000090f l       .debug_str	00000000 
00000a9e l       .debug_str	00000000 
000009ee l       .debug_str	00000000 
000008ca l       .debug_str	00000000 
00001249 l       .debug_str	00000000 
00001272 l       .debug_str	00000000 
000012d0 l       .debug_str	00000000 
000009ce l       .debug_str	00000000 
00000afe l       .debug_str	00000000 
00000acc l       .debug_str	00000000 
00001336 l       .debug_str	00000000 
00001262 l       .debug_str	00000000 
00000b2d l       .debug_str	00000000 
00000880 l       .debug_str	00000000 
00000a85 l       .debug_str	00000000 
00000b06 l       .debug_str	00000000 
00001354 l       .debug_str	00000000 
00000a62 l       .debug_str	00000000 
0000097e l       .debug_str	00000000 
000008f7 l       .debug_str	00000000 
0000136a l       .debug_str	00000000 
00001390 l       .debug_str	00000000 
00000892 l       .debug_str	00000000 
000013a6 l       .debug_str	00000000 
00001388 l       .debug_str	00000000 
0000136f l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00018530 l       .debug_str	00000000 
000013d3 l       .debug_str	00000000 
000013db l       .debug_str	00000000 
000013e4 l       .debug_str	00000000 
0000280d l       .debug_str	00000000 
000013ed l       .debug_str	00000000 
0001dba5 l       .debug_str	00000000 
000013f5 l       .debug_str	00000000 
00001401 l       .debug_str	00000000 
0000140c l       .debug_str	00000000 
00001414 l       .debug_str	00000000 
0000141c l       .debug_str	00000000 
00001518 l       .debug_str	00000000 
0000161c l       .debug_str	00000000 
0000162a l       .debug_str	00000000 
00001635 l       .debug_str	00000000 
0000163f l       .debug_str	00000000 
00001676 l       .debug_str	00000000 
00001653 l       .debug_str	00000000 
00001681 l       .debug_str	00000000 
000016fc l       .debug_str	00000000 
0000177f l       .debug_str	00000000 
0000178d l       .debug_str	00000000 
000017ec l       .debug_str	00000000 
00001853 l       .debug_str	00000000 
00001869 l       .debug_str	00000000 
00001879 l       .debug_str	00000000 
0001b743 l       .debug_str	00000000 
0000336a l       .debug_str	00000000 
00001888 l       .debug_str	00000000 
0000188e l       .debug_str	00000000 
00001892 l       .debug_str	00000000 
00001898 l       .debug_str	00000000 
0000189e l       .debug_str	00000000 
000163b9 l       .debug_str	00000000 
00016900 l       .debug_str	00000000 
000018aa l       .debug_str	00000000 
000018b2 l       .debug_str	00000000 
000018b8 l       .debug_str	00000000 
000018fe l       .debug_str	00000000 
000018db l       .debug_str	00000000 
0000190e l       .debug_str	00000000 
0000194e l       .debug_str	00000000 
0001b2e2 l       .debug_str	00000000 
00001996 l       .debug_str	00000000 
0000199c l       .debug_str	00000000 
000019a2 l       .debug_str	00000000 
000019cb l       .debug_str	00000000 
000019a8 l       .debug_str	00000000 
000019dd l       .debug_str	00000000 
00001a1f l       .debug_str	00000000 
0001b1cb l       .debug_str	00000000 
00001a69 l       .debug_str	00000000 
00001a6f l       .debug_str	00000000 
00001a75 l       .debug_str	00000000 
00001a9e l       .debug_str	00000000 
00001a7b l       .debug_str	00000000 
00001ab0 l       .debug_str	00000000 
00001af2 l       .debug_str	00000000 
0001a65a l       .debug_str	00000000 
00001b3c l       .debug_str	00000000 
00001b42 l       .debug_str	00000000 
00001b48 l       .debug_str	00000000 
00001b4e l       .debug_str	00000000 
00001b77 l       .debug_str	00000000 
00001b54 l       .debug_str	00000000 
00001b88 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
00001c12 l       .debug_str	00000000 
00001c17 l       .debug_str	00000000 
0001b519 l       .debug_str	00000000 
00001c1c l       .debug_str	00000000 
00001c22 l       .debug_str	00000000 
00001c28 l       .debug_str	00000000 
00001c51 l       .debug_str	00000000 
00001c2e l       .debug_str	00000000 
00001c62 l       .debug_str	00000000 
00001ca3 l       .debug_str	00000000 
0001a712 l       .debug_str	00000000 
00001cec l       .debug_str	00000000 
00001d18 l       .debug_str	00000000 
00001cf5 l       .debug_str	00000000 
00001d29 l       .debug_str	00000000 
00001d6a l       .debug_str	00000000 
00001db3 l       .debug_str	00000000 
0001b6db l       .debug_str	00000000 
00001db8 l       .debug_str	00000000 
00001dc1 l       .debug_str	00000000 
00001dc8 l       .debug_str	00000000 
00001df3 l       .debug_str	00000000 
00001dd0 l       .debug_str	00000000 
00001e05 l       .debug_str	00000000 
00001e47 l       .debug_str	00000000 
0001b3b5 l       .debug_str	00000000 
00001e91 l       .debug_str	00000000 
00001e97 l       .debug_str	00000000 
00001e9d l       .debug_str	00000000 
00001ea3 l       .debug_str	00000000 
00001ea9 l       .debug_str	00000000 
00001eb1 l       .debug_str	00000000 
00001ebf l       .debug_str	00000000 
00001ece l       .debug_str	00000000 
00001edf l       .debug_str	00000000 
00001eea l       .debug_str	00000000 
00001ef5 l       .debug_str	00000000 
00001f00 l       .debug_str	00000000 
00001f07 l       .debug_str	00000000 
00001f4d l       .debug_str	00000000 
00001f2a l       .debug_str	00000000 
00001f5f l       .debug_str	00000000 
00001fa1 l       .debug_str	00000000 
0001a829 l       .debug_str	00000000 
00001feb l       .debug_str	00000000 
00002018 l       .debug_str	00000000 
00001ff5 l       .debug_str	00000000 
0000202a l       .debug_str	00000000 
0000206c l       .debug_str	00000000 
000020b6 l       .debug_str	00000000 
000020bb l       .debug_str	00000000 
000020e8 l       .debug_str	00000000 
000020c5 l       .debug_str	00000000 
000020fa l       .debug_str	00000000 
0000213c l       .debug_str	00000000 
00002186 l       .debug_str	00000000 
00008779 l       .debug_str	00000000 
00002205 l       .debug_str	00000000 
0000219a l       .debug_str	00000000 
000021aa l       .debug_str	00000000 
000021b3 l       .debug_str	00000000 
000021be l       .debug_str	00000000 
000021cd l       .debug_str	00000000 
000021e2 l       .debug_str	00000000 
00002213 l       .debug_str	00000000 
000022b0 l       .debug_str	00000000 
00002355 l       .debug_str	00000000 
00002360 l       .debug_str	00000000 
00002369 l       .debug_str	00000000 
000023ad l       .debug_str	00000000 
0000238a l       .debug_str	00000000 
000023c0 l       .debug_str	00000000 
00002443 l       .debug_str	00000000 
000024ce l       .debug_str	00000000 
000024ea l       .debug_str	00000000 
00002536 l       .debug_str	00000000 
0000258a l       .debug_str	00000000 
000025a7 l       .debug_str	00000000 
000025bb l       .debug_str	00000000 
00002607 l       .debug_str	00000000 
0000265b l       .debug_str	00000000 
00002671 l       .debug_str	00000000 
00002685 l       .debug_str	00000000 
000026cc l       .debug_str	00000000 
0000271b l       .debug_str	00000000 
00002747 l       .debug_str	00000000 
00002724 l       .debug_str	00000000 
00002755 l       .debug_str	00000000 
0000275b l       .debug_str	00000000 
00002763 l       .debug_str	00000000 
0000276a l       .debug_str	00000000 
00002772 l       .debug_str	00000000 
0000277d l       .debug_str	00000000 
00002785 l       .debug_str	00000000 
00002794 l       .debug_str	00000000 
00002798 l       .debug_str	00000000 
000027a3 l       .debug_str	00000000 
000027af l       .debug_str	00000000 
000027ba l       .debug_str	00000000 
0001657a l       .debug_str	00000000 
000027cb l       .debug_str	00000000 
000027d3 l       .debug_str	00000000 
000027da l       .debug_str	00000000 
000027e4 l       .debug_str	00000000 
000027ec l       .debug_str	00000000 
000027f4 l       .debug_str	00000000 
00002816 l       .debug_str	00000000 
00002821 l       .debug_str	00000000 
0000282d l       .debug_str	00000000 
00002835 l       .debug_str	00000000 
0000283e l       .debug_str	00000000 
0000da1e l       .debug_str	00000000 
00002849 l       .debug_str	00000000 
00002854 l       .debug_str	00000000 
0000285f l       .debug_str	00000000 
0000286f l       .debug_str	00000000 
0001a79a l       .debug_str	00000000 
0000613c l       .debug_str	00000000 
00002879 l       .debug_str	00000000 
000028b1 l       .debug_str	00000000 
000028f1 l       .debug_str	00000000 
000028f8 l       .debug_str	00000000 
00002900 l       .debug_str	00000000 
00006155 l       .debug_str	00000000 
00002917 l       .debug_str	00000000 
00002927 l       .debug_str	00000000 
0000295a l       .debug_str	00000000 
0000296f l       .debug_str	00000000 
00002978 l       .debug_str	00000000 
000029d5 l       .debug_str	00000000 
00002a3a l       .debug_str	00000000 
00002a44 l       .debug_str	00000000 
00002a54 l       .debug_str	00000000 
00002a69 l       .debug_str	00000000 
00002a71 l       .debug_str	00000000 
00002ad5 l       .debug_str	00000000 
00002b41 l       .debug_str	00000000 
00002b48 l       .debug_str	00000000 
00002b50 l       .debug_str	00000000 
00002b91 l       .debug_str	00000000 
00002b6e l       .debug_str	00000000 
00002ba1 l       .debug_str	00000000 
00002bb6 l       .debug_str	00000000 
00002bc9 l       .debug_str	00000000 
00016589 l       .debug_str	00000000 
00002bde l       .debug_str	00000000 
00002bf3 l       .debug_str	00000000 
00002c1d l       .debug_str	00000000 
00002c99 l       .debug_str	00000000 
00002d1d l       .debug_str	00000000 
00002d24 l       .debug_str	00000000 
00002d2c l       .debug_str	00000000 
0000294a l       .debug_str	00000000 
00002d4a l       .debug_str	00000000 
00002d5f l       .debug_str	00000000 
00002d9a l       .debug_str	00000000 
00002dac l       .debug_str	00000000 
0001dadb l       .debug_str	00000000 
00002de8 l       .debug_str	00000000 
00002df5 l       .debug_str	00000000 
00002e02 l       .debug_str	00000000 
00002e0d l       .debug_str	00000000 
00002e1a l       .debug_str	00000000 
00002e26 l       .debug_str	00000000 
00002e6a l       .debug_str	00000000 
00002e78 l       .debug_str	00000000 
0001eac4 l       .debug_str	00000000 
00016abc l       .debug_str	00000000 
00002e81 l       .debug_str	00000000 
00002ee3 l       .debug_str	00000000 
00024e3b l       .debug_str	00000000 
00002f6e l       .debug_str	00000000 
00002f4d l       .debug_str	00000000 
00002f82 l       .debug_str	00000000 
00002f8d l       .debug_str	00000000 
000108a8 l       .debug_str	00000000 
00002f93 l       .debug_str	00000000 
00002f9f l       .debug_str	00000000 
00002fe4 l       .debug_str	00000000 
00002ff2 l       .debug_str	00000000 
00019e68 l       .debug_str	00000000 
00003037 l       .debug_str	00000000 
00003044 l       .debug_str	00000000 
00003048 l       .debug_str	00000000 
00003052 l       .debug_str	00000000 
0000305d l       .debug_str	00000000 
00003067 l       .debug_str	00000000 
00003070 l       .debug_str	00000000 
00003081 l       .debug_str	00000000 
000030b2 l       .debug_str	00000000 
000030be l       .debug_str	00000000 
0001886a l       .debug_str	00000000 
0000b9d2 l       .debug_str	00000000 
0001e08e l       .debug_str	00000000 
0000fdb0 l       .debug_str	00000000 
000030c7 l       .debug_str	00000000 
000030cd l       .debug_str	00000000 
000030d4 l       .debug_str	00000000 
000030e2 l       .debug_str	00000000 
0000ab5b l       .debug_str	00000000 
000030f0 l       .debug_str	00000000 
000030f8 l       .debug_str	00000000 
0000eed0 l       .debug_str	00000000 
00003100 l       .debug_str	00000000 
0000311c l       .debug_str	00000000 
00018004 l       .debug_str	00000000 
00003124 l       .debug_str	00000000 
00003128 l       .debug_str	00000000 
0000312e l       .debug_str	00000000 
000243eb l       .debug_str	00000000 
00003132 l       .debug_str	00000000 
0001a22f l       .debug_str	00000000 
00003135 l       .debug_str	00000000 
00003162 l       .debug_str	00000000 
000031b0 l       .debug_str	00000000 
0000321b l       .debug_str	00000000 
000093b2 l       .debug_str	00000000 
0001a1ad l       .debug_str	00000000 
00003285 l       .debug_str	00000000 
000002ee l       .debug_str	00000000 
000032e7 l       .debug_str	00000000 
0000332c l       .debug_str	00000000 
0000335c l       .debug_str	00000000 
00003369 l       .debug_str	00000000 
00003371 l       .debug_str	00000000 
00003381 l       .debug_str	00000000 
000033c6 l       .debug_str	00000000 
00003434 l       .debug_str	00000000 
000034cb l       .debug_str	00000000 
0000358b l       .debug_str	00000000 
00003674 l       .debug_str	00000000 
00003786 l       .debug_str	00000000 
000038c1 l       .debug_str	00000000 
00003a25 l       .debug_str	00000000 
00003bb2 l       .debug_str	00000000 
00003d68 l       .debug_str	00000000 
00003f47 l       .debug_str	00000000 
0000414f l       .debug_str	00000000 
00004380 l       .debug_str	00000000 
00004383 l       .debug_str	00000000 
000043d7 l       .debug_str	00000000 
00004452 l       .debug_str	00000000 
000044f4 l       .debug_str	00000000 
000045bd l       .debug_str	00000000 
000046ad l       .debug_str	00000000 
000047c4 l       .debug_str	00000000 
00004902 l       .debug_str	00000000 
00004a67 l       .debug_str	00000000 
00004bf3 l       .debug_str	00000000 
00004da6 l       .debug_str	00000000 
00004f80 l       .debug_str	00000000 
00005181 l       .debug_str	00000000 
000053a9 l       .debug_str	00000000 
000055f2 l       .debug_str	00000000 
00005858 l       .debug_str	00000000 
00005abd l       .debug_str	00000000 
00005d1a l       .debug_str	00000000 
00005f5a l       .debug_str	00000000 
00005f8b l       .debug_str	00000000 
00005f93 l       .debug_str	00000000 
00005f9c l       .debug_str	00000000 
00005fb1 l       .debug_str	00000000 
00005fbc l       .debug_str	00000000 
00005fc3 l       .debug_str	00000000 
00005fee l       .debug_str	00000000 
00005fff l       .debug_str	00000000 
00006034 l       .debug_str	00000000 
00006043 l       .debug_str	00000000 
0000089d l       .debug_str	00000000 
0000604b l       .debug_str	00000000 
00006053 l       .debug_str	00000000 
0000605d l       .debug_str	00000000 
00006066 l       .debug_str	00000000 
000060a1 l       .debug_str	00000000 
00006088 l       .debug_str	00000000 
00000b23 l       .debug_str	00000000 
00006083 l       .debug_str	00000000 
000060b0 l       .debug_str	00000000 
000060c8 l       .debug_str	00000000 
000060ce l       .debug_str	00000000 
000060d8 l       .debug_str	00000000 
0000610b l       .debug_str	00000000 
0000611b l       .debug_str	00000000 
00006125 l       .debug_str	00000000 
0000612e l       .debug_str	00000000 
00006137 l       .debug_str	00000000 
0000615e l       .debug_str	00000000 
00007ac4 l       .debug_str	00000000 
00006176 l       .debug_str	00000000 
000061aa l       .debug_str	00000000 
000061b3 l       .debug_str	00000000 
000061df l       .debug_str	00000000 
000061ee l       .debug_str	00000000 
00006221 l       .debug_str	00000000 
0000622e l       .debug_str	00000000 
0000623a l       .debug_str	00000000 
0000626b l       .debug_str	00000000 
00007f1d l       .debug_str	00000000 
00020c59 l       .debug_str	00000000 
00006f90 l       .debug_str	00000000 
00006272 l       .debug_str	00000000 
00006277 l       .debug_str	00000000 
0000627d l       .debug_str	00000000 
00006284 l       .debug_str	00000000 
0000628c l       .debug_str	00000000 
00023d15 l       .debug_str	00000000 
00006296 l       .debug_str	00000000 
000062a5 l       .debug_str	00000000 
000062af l       .debug_str	00000000 
00006307 l       .debug_str	00000000 
00006354 l       .debug_str	00000000 
000063ab l       .debug_str	00000000 
000063f7 l       .debug_str	00000000 
00006400 l       .debug_str	00000000 
0000640b l       .debug_str	00000000 
0000641c l       .debug_str	00000000 
00006422 l       .debug_str	00000000 
00006427 l       .debug_str	00000000 
0000645a l       .debug_str	00000000 
0000645e l       .debug_str	00000000 
0000646d l       .debug_str	00000000 
00006477 l       .debug_str	00000000 
00006488 l       .debug_str	00000000 
00006491 l       .debug_str	00000000 
0000649c l       .debug_str	00000000 
000064a3 l       .debug_str	00000000 
000064b0 l       .debug_str	00000000 
000064b7 l       .debug_str	00000000 
000064bf l       .debug_str	00000000 
000064c9 l       .debug_str	00000000 
000064d7 l       .debug_str	00000000 
000064dd l       .debug_str	00000000 
000064eb l       .debug_str	00000000 
000064f7 l       .debug_str	00000000 
00006507 l       .debug_str	00000000 
00006510 l       .debug_str	00000000 
00006518 l       .debug_str	00000000 
00006523 l       .debug_str	00000000 
00006531 l       .debug_str	00000000 
00006536 l       .debug_str	00000000 
0000653b l       .debug_str	00000000 
00006544 l       .debug_str	00000000 
00016407 l       .debug_str	00000000 
00006552 l       .debug_str	00000000 
0000655a l       .debug_str	00000000 
00006567 l       .debug_str	00000000 
0000656d l       .debug_str	00000000 
00006571 l       .debug_str	00000000 
00006575 l       .debug_str	00000000 
0000657e l       .debug_str	00000000 
0000657b l       .debug_str	00000000 
00006585 l       .debug_str	00000000 
0000658a l       .debug_str	00000000 
00006594 l       .debug_str	00000000 
0000659d l       .debug_str	00000000 
000065a7 l       .debug_str	00000000 
000065af l       .debug_str	00000000 
000065b7 l       .debug_str	00000000 
0000660f l       .debug_str	00000000 
00009cc1 l       .debug_str	00000000 
0000665c l       .debug_str	00000000 
0000665f l       .debug_str	00000000 
00006664 l       .debug_str	00000000 
0000666a l       .debug_str	00000000 
00006672 l       .debug_str	00000000 
0000667b l       .debug_str	00000000 
000066d8 l       .debug_str	00000000 
00008989 l       .debug_str	00000000 
0000672a l       .debug_str	00000000 
00006736 l       .debug_str	00000000 
0000676e l       .debug_str	00000000 
0000677a l       .debug_str	00000000 
000067b2 l       .debug_str	00000000 
0000680f l       .debug_str	00000000 
00006861 l       .debug_str	00000000 
00006899 l       .debug_str	00000000 
000068d1 l       .debug_str	00000000 
00006926 l       .debug_str	00000000 
00006970 l       .debug_str	00000000 
00006977 l       .debug_str	00000000 
00008785 l       .debug_str	00000000 
0001b100 l       .debug_str	00000000 
0001b11b l       .debug_str	00000000 
0001b136 l       .debug_str	00000000 
0000697f l       .debug_str	00000000 
00006985 l       .debug_str	00000000 
000069dc l       .debug_str	00000000 
00009596 l       .debug_str	00000000 
00006a28 l       .debug_str	00000000 
00006a2f l       .debug_str	00000000 
00006a37 l       .debug_str	00000000 
00006a3f l       .debug_str	00000000 
00006a47 l       .debug_str	00000000 
00006a4e l       .debug_str	00000000 
00006a55 l       .debug_str	00000000 
00006aaa l       .debug_str	00000000 
00006af4 l       .debug_str	00000000 
0001766a l       .debug_str	00000000 
00006b08 l       .debug_str	00000000 
00006b13 l       .debug_str	00000000 
00006b21 l       .debug_str	00000000 
00006b58 l       .debug_str	00000000 
00006b65 l       .debug_str	00000000 
00019fd5 l       .debug_str	00000000 
00006b71 l       .debug_str	00000000 
00006b76 l       .debug_str	00000000 
00006bad l       .debug_str	00000000 
00006bbf l       .debug_str	00000000 
00006bf6 l       .debug_str	00000000 
00006c01 l       .debug_str	00000000 
0000199a l       .debug_str	00000000 
000019a0 l       .debug_str	00000000 
00017707 l       .debug_str	00000000 
00006c09 l       .debug_str	00000000 
00006c10 l       .debug_str	00000000 
0001e204 l       .debug_str	00000000 
00006c19 l       .debug_str	00000000 
000092ad l       .debug_str	00000000 
00006c23 l       .debug_str	00000000 
00006c2d l       .debug_str	00000000 
00006c3c l       .debug_str	00000000 
00006c72 l       .debug_str	00000000 
00006c76 l       .debug_str	00000000 
00006ca4 l       .debug_str	00000000 
00006cb0 l       .debug_str	00000000 
00006ce7 l       .debug_str	00000000 
0001dac4 l       .debug_str	00000000 
00006cf0 l       .debug_str	00000000 
00006cf8 l       .debug_str	00000000 
00006d0c l       .debug_str	00000000 
00006d3f l       .debug_str	00000000 
00006d4a l       .debug_str	00000000 
00006d80 l       .debug_str	00000000 
00006dd7 l       .debug_str	00000000 
00006e23 l       .debug_str	00000000 
00006e76 l       .debug_str	00000000 
000126a0 l       .debug_str	00000000 
00008596 l       .debug_str	00000000 
00006ebe l       .debug_str	00000000 
00006ec7 l       .debug_str	00000000 
00006f08 l       .debug_str	00000000 
00006f11 l       .debug_str	00000000 
00008595 l       .debug_str	00000000 
0002517a l       .debug_str	00000000 
0000883d l       .debug_str	00000000 
00006f16 l       .debug_str	00000000 
00006f29 l       .debug_str	00000000 
000086f0 l       .debug_str	00000000 
00006f5a l       .debug_str	00000000 
00006f8c l       .debug_str	00000000 
00006f93 l       .debug_str	00000000 
00006f9d l       .debug_str	00000000 
00008741 l       .debug_str	00000000 
00006fa3 l       .debug_str	00000000 
00006fe6 l       .debug_str	00000000 
00022e9b l       .debug_str	00000000 
00006ffb l       .debug_str	00000000 
00007002 l       .debug_str	00000000 
0000703f l       .debug_str	00000000 
0000704e l       .debug_str	00000000 
0000708b l       .debug_str	00000000 
0000709a l       .debug_str	00000000 
000070a0 l       .debug_str	00000000 
000070e9 l       .debug_str	00000000 
000070f4 l       .debug_str	00000000 
0000713b l       .debug_str	00000000 
00007144 l       .debug_str	00000000 
000184c8 l       .debug_str	00000000 
00007182 l       .debug_str	00000000 
000071c8 l       .debug_str	00000000 
000071d5 l       .debug_str	00000000 
000071df l       .debug_str	00000000 
00007234 l       .debug_str	00000000 
0000723f l       .debug_str	00000000 
00007291 l       .debug_str	00000000 
00007299 l       .debug_str	00000000 
0000730d l       .debug_str	00000000 
00007316 l       .debug_str	00000000 
00007348 l       .debug_str	00000000 
0000736f l       .debug_str	00000000 
00010868 l       .debug_str	00000000 
000073d9 l       .debug_str	00000000 
0001eac6 l       .debug_str	00000000 
000023b9 l       .debug_str	00000000 
00007449 l       .debug_str	00000000 
00007452 l       .debug_str	00000000 
0000745b l       .debug_str	00000000 
0000749a l       .debug_str	00000000 
000074b6 l       .debug_str	00000000 
000074be l       .debug_str	00000000 
0000750f l       .debug_str	00000000 
00007514 l       .debug_str	00000000 
00007556 l       .debug_str	00000000 
00007569 l       .debug_str	00000000 
0000759b l       .debug_str	00000000 
000075ab l       .debug_str	00000000 
000075d9 l       .debug_str	00000000 
000075e5 l       .debug_str	00000000 
0000761a l       .debug_str	00000000 
0000762d l       .debug_str	00000000 
00007677 l       .debug_str	00000000 
00007688 l       .debug_str	00000000 
0002217b l       .debug_str	00000000 
0000771e l       .debug_str	00000000 
0000775a l       .debug_str	00000000 
00007780 l       .debug_str	00000000 
000077bf l       .debug_str	00000000 
000077cf l       .debug_str	00000000 
0000783a l       .debug_str	00000000 
0000786e l       .debug_str	00000000 
0000856b l       .debug_str	00000000 
00007880 l       .debug_str	00000000 
000078b3 l       .debug_str	00000000 
000108e5 l       .debug_str	00000000 
000078bb l       .debug_str	00000000 
00007950 l       .debug_str	00000000 
0001c91c l       .debug_str	00000000 
0000795c l       .debug_str	00000000 
0000911e l     F .text	00000028 _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17hc90ab95f8fe9867cE
00009146 l     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17h78f536f6529d6acdE
000087e8 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17hed9a745734db4e1eE
00008f0e l     F .text	00000012 _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hfa4813af48620bbbE
00008ea8 l     F .text	00000014 _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h7fbf59b3963cac8fE
00009174 l     F .text	00000026 _ZN4core3any6TypeId2of17h678dcf5e90be79cdE
000087fc l     F .text	000006ac _ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E
000087e6 l     F .text	00000002 _ZN4core3ptr13drop_in_place17h00770497a4e91b46E
00009002 l     F .text	00000008 _ZN4core3ptr13drop_in_place17h6ae1af1416118836E
00008652 l     F .text	00000008 _ZN4core3ptr13drop_in_place17hbc0c1fc2aa8b6ff3E
0000865a l     F .text	0000001e _ZN4core3str21_$LT$impl$u20$str$GT$3len17he841da45b9c69883E
00008678 l     F .text	0000000a _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h022c0f523ccad626E
00008f24 l     F .text	00000010 _ZN4core5panic8Location4file17hfc9aa9a4958c9c3aE
00008f34 l     F .text	00000004 _ZN4core5panic8Location4line17h81a396f742303977E
00008f24 l     F .text	00000010 _ZN4core5panic9PanicInfo7payload17h692e6fef9ccf48e9E
00008f20 l     F .text	00000004 _ZN4core5panic9PanicInfo8location17h6e90b1f5ec8cea30E
00008f38 l     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha89a753dca6cd9f4E
000090f2 l     F .text	0000002c _ZN4core6option15Option$LT$T$GT$6unwrap17h2738ac118120fc1fE
00008ebc l     F .text	00000052 _ZN4core6option18expect_none_failed17h6759d4401d28ac1fE
00008ebc l     F .text	00000052 _ZN4core6result13unwrap_failed17hf61210966f5a0bdbE
00008682 l     F .text	0000003c _ZN4core6result19Result$LT$T$C$E$GT$6expect17h56061f5b534d43a3E
00008fb8 l     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8475276e04d22ec4E
00008792 l     F .text	0000002e _ZN4core9panicking5panic17h692a68e116a8c946E
000087c0 l     F .text	00000026 _ZN4core9panicking9panic_fmt17h1abf46b1849e1e64E
000090e0 l     F .text	00000012 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h0816bf0a0366a198E
0000919a l     F .text	00000024 _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17hea2831b1242142eeE
0000875a l     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h331d487878438b91E
000086fa l     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h77ed9d6357c846ceE
00008742 l     F .text	0000000a _ZN6mynewt3sys7console5flush17h8491f76cc7401f62E
000086be l     F .text	0000003c _ZN6mynewt3sys7console5print17h7763e54cd0d26396E
00008704 l     F .text	0000002e _ZN6mynewt3sys7console6buffer17h35108561f938a421E
00008732 l     F .text	00000010 _ZN6mynewt3sys7console8printint17hbf799f23e9896db3E
00008766 l     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h315affb69d21582dE
00008778 l     F .text	0000001a _ZN6mynewt6kernel2os15eventq_dflt_get17hee2ec5f38871c7e2E
0000874c l     F .text	0000000e _ZN6mynewt7sysinit17h1b1620554f4add73E
0000900a l     F .text	000000d6 rust_begin_unwind
00000000 l    df *ABS*	00000000 semihosting_console.c
200004e0 l     O .bss	00000004 semihost_mbuf
200000e8 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
200004e4 l     O .bss	00000010 avail_queue
200004f8 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20000505 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00009354 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 ble_main.c
00009374 l     F .text	00000014 bleprph_on_reset
00009388 l     F .text	000000dc bleprph_advertise
00009508 l     F .text	000001b8 bleprph_gap_event
00009464 l     F .text	00000024 bleprph_on_sync
00009488 l     F .text	00000080 bleprph_print_conn_desc
20000508 l     O .bss	00000019 ver_str.11833
00000000 l    df *ABS*	00000000 ble_misc.c
00000000 l    df *ABS*	00000000 ble_gatt_svr.c
00009766 l     F .text	00000026 gatt_svr_chr_write
0000978c l     F .text	000000bc gatt_svr_chr_access_sec_test
20000521 l     O .bss	00000001 gatt_svr_sec_test_static_val
200000f0 l     O .data	00000048 __compound_literal.0
00028a5c l     O .text	00000011 gatt_svr_chr_sec_test_rand_uuid
00028a70 l     O .text	00000011 gatt_svr_chr_sec_test_static_uuid
00028a84 l     O .text	00000011 gatt_svr_svc_sec_test_uuid
00028a98 l     O .text	00000020 gatt_svr_svcs
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00009a4c l     F .text	0000001e os_main
20000680 l     O .bss	00002000 g_os_main_stack
20000578 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_dev.c
00009dac l     F .text	00000060 os_dev_add
00009e0c l     F .text	00000026 os_dev_initialize
00009e32 l     F .text	00000020 os_dev_init
200026dc l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
200026e4 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0000a97c l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0000ab04 l     F .text	00000010 os_msys_find_biggest_pool
0000ab14 l     F .text	0000002c os_msys_find_pool
0000ab8c l     F .text	00000058 os_msys_init_once
200026fc l     O .bss	00004900 os_msys_1_data
20006ffc l     O .bss	0000000c os_msys_1_mbuf_pool
20007008 l     O .bss	0000001c os_msys_1_mempool
20000138 l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0000ae24 l     F .text	00000020 os_sanity_check_list_lock
0000ae44 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_task.c
0000b1bc l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0000b324 l     F .text	0000004c os_deltatime
0000b370 l     F .text	00000064 os_time_tick
20007048 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
0000b4ae l     F .text	00000002 os_arch_task_return_handler
00000000 l    df *ABS*	00000000 HAL_CM4.o
0000b6ac l       .text	00000000 SVC_User
0000b6ca l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 lrand48.c
00000000 l    df *ABS*	00000000 memcmp.c
0000b77c l       .text	00000000 test1
0000b770 l       .text	00000000 loop1
0000b782 l       .text	00000000 res1
0000b79e l       .text	00000000 test2
0000b7a6 l       .text	00000000 done
0000b792 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0000b7b2 l       .text	00000000 test1
0000b7ae l       .text	00000000 loop1
0000b7c0 l       .text	00000000 test2
0000b7bc l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 srand48.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncat.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0000b8a4 l     F .text	000000ec ui2a
0000b990 l     F .text	00000020 i2a
0000b9b0 l     F .text	00000030 a2d
0000b9e0 l     F .text	00000036 a2i
0000ba16 l     F .text	0000002a putf
0000ba40 l     F .text	0000011c putchw
0000bb5c l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 jrand48.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0000bf90 l     F .text	00000004 stdin_read
0000bf94 l     F .text	00000010 stdout_write
20000150 l     O .data	00000004 _stdin
20000154 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 compiler_builtins.28t0v07i-cgu.10
00000b70 l       .debug_str	00000000 
0000babe l       .debug_str	00000000 
0000bb12 l       .debug_str	00000000 
0000bb5b l       .debug_str	00000000 
0000bb6d l       .debug_str	00000000 
0000fdb0 l       .debug_str	00000000 
0000bc18 l       .debug_str	00000000 
00000c48 l       .debug_str	00000000 
000126a0 l       .debug_str	00000000 
000074b6 l       .debug_str	00000000 
00006ebe l       .debug_str	00000000 
0000bb71 l       .debug_str	00000000 
0000bbc2 l       .debug_str	00000000 
0000bc47 l       .debug_str	00000000 
0000bc68 l       .debug_str	00000000 
0000bbce l       .debug_str	00000000 
0000bbdf l       .debug_str	00000000 
0000bbf0 l       .debug_str	00000000 
0000bc00 l       .debug_str	00000000 
0000bc10 l       .debug_str	00000000 
0000bc1f l       .debug_str	00000000 
0000bc2f l       .debug_str	00000000 
0000bc3f l       .debug_str	00000000 
0000bc4f l       .debug_str	00000000 
0000bc60 l       .debug_str	00000000 
0000bc6f l       .debug_str	00000000 
0000bc7f l       .debug_str	00000000 
0000bc8f l       .debug_str	00000000 
0000bc9e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 compiler_builtins.28t0v07i-cgu.98
00000b70 l       .debug_str	00000000 
0000babe l       .debug_str	00000000 
0000bb12 l       .debug_str	00000000 
0000bb5b l       .debug_str	00000000 
000000e1 l       .debug_str	00000000 
0000bcae l       .debug_str	00000000 
0000bcb3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 compiler_builtins.28t0v07i-cgu.120
00000b70 l       .debug_str	00000000 
0000babe l       .debug_str	00000000 
0000bb12 l       .debug_str	00000000 
0000bb5b l       .debug_str	00000000 
000000e1 l       .debug_str	00000000 
0000bcae l       .debug_str	00000000 
00000c48 l       .debug_str	00000000 
0001c91c l       .debug_str	00000000 
00006ebe l       .debug_str	00000000 
0000bcc0 l       .debug_str	00000000 
0000bd07 l       .debug_str	00000000 
0000bd15 l       .debug_str	00000000 
0000bd5b l       .debug_str	00000000 
0000bd68 l       .debug_str	00000000 
0000bdad l       .debug_str	00000000 
0000bdb9 l       .debug_str	00000000 
0000be14 l       .debug_str	00000000 
0000be21 l       .debug_str	00000000 
0000be65 l       .debug_str	00000000 
0000be70 l       .debug_str	00000000 
0000beb9 l       .debug_str	00000000 
0000bec9 l       .debug_str	00000000 
0000bf11 l       .debug_str	00000000 
0000bf20 l       .debug_str	00000000 
0000bf65 l       .debug_str	00000000 
0000bf71 l       .debug_str	00000000 
0000bfcc l       .debug_str	00000000 
0000bfd9 l       .debug_str	00000000 
0000c01f l       .debug_str	00000000 
0000c066 l       .debug_str	00000000 
0000c0ab l       .debug_str	00000000 
0000c106 l       .debug_str	00000000 
0000c14f l       .debug_str	00000000 
0000c197 l       .debug_str	00000000 
0000c1dc l       .debug_str	00000000 
0000c237 l       .debug_str	00000000 
0000c27e l       .debug_str	00000000 
0000c2bc l       .debug_str	00000000 
0000c2c6 l       .debug_str	00000000 
0000c304 l       .debug_str	00000000 
0000c30e l       .debug_str	00000000 
0000c350 l       .debug_str	00000000 
0000c35d l       .debug_str	00000000 
0000c39b l       .debug_str	00000000 
0000c3a5 l       .debug_str	00000000 
0000c3e3 l       .debug_str	00000000 
0000c3ed l       .debug_str	00000000 
0000c42b l       .debug_str	00000000 
0000c435 l       .debug_str	00000000 
0000c473 l       .debug_str	00000000 
0000c47d l       .debug_str	00000000 
0000bcb3 l       .debug_str	00000000 
0000c4bf l       .debug_str	00000000 
0000c501 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 imgmgr.c
0000c464 l     F .text	0000005c imgr_erase_state
2000015c l     O .data	0000000c imgr_mgmt_group
00028c50 l     O .text	00000038 imgr_mgmt_handlers
00000000 l    df *ABS*	00000000 imgmgr_util.c
00000000 l    df *ABS*	00000000 mgmt.c
0000c528 l     F .text	00000054 mgmt_find_group
20007088 l     O .bss	00000004 evt_cb
2000708c l     O .bss	00000004 mgmt_group_list
20007090 l     O .bss	00000004 mgmt_group_list_end
00000000 l    df *ABS*	00000000 ble_gap.c
0000c6c8 l     F .text	0000002a ble_gap_call_event_cb
0000c6f4 l     F .text	0000002c ble_gap_is_preempted
0000c720 l     F .text	00000010 ble_gap_has_client
0000c730 l     F .text	00000012 ble_gap_update_to_l2cap
0000c744 l     F .text	00000018 ble_gap_adv_active_instance
0000c75c l     F .text	00000014 ble_gap_accept_master_conn
0000c770 l     F .text	00000030 ble_gap_accept_slave_conn
0000c7a0 l     F .text	00000028 ble_gap_adv_type
0000c7c8 l     F .text	00000032 ble_gap_adv_dflt_itvls
0000c7fc l     F .text	00000028 ble_gap_update_entry_find
0000c824 l     F .text	00000046 ble_gap_validate_conn_params
0000c86c l     F .text	00000020 ble_gap_event_listener_call
0000c88c l     F .text	00000034 ble_gap_extract_conn_cb
0000c8c0 l     F .text	00000028 ble_gap_call_conn_event_cb
0000c8e8 l     F .text	00000094 ble_gap_fill_conn_desc
0000c97c l     F .text	00000016 ble_gap_conn_to_snapshot
0000c992 l     F .text	00000028 ble_gap_find_snapshot
0000c9ba l     F .text	0000001e ble_gap_rd_rem_sup_feat_tx
0000c9d8 l     F .text	0000001a ble_gap_conn_cancel_tx
0000c9f2 l     F .text	00000024 ble_gap_adv_enable_tx
0000ca16 l     F .text	00000094 ble_gap_adv_params_tx
0000caaa l     F .text	00000042 ble_gap_tx_param_pos_reply
0000caec l     F .text	00000022 ble_gap_tx_param_neg_reply
0000cb0e l     F .text	00000042 ble_gap_update_tx
0000cb50 l     F .text	00000030 ble_gap_update_entry_remove
0000cb80 l     F .text	00000020 ble_gap_slave_reset_state
0000cba0 l     F .text	0000002c ble_gap_slave_extract_cb
0000cbcc l     F .text	00000038 ble_gap_adv_finished
0000cc04 l     F .text	00000024 ble_gap_master_reset_state
0000cc28 l     F .text	00000030 ble_gap_master_extract_state
0000cc58 l     F .text	00000032 ble_gap_master_connect_failure
0000cc8c l     F .text	00000018 ble_gap_master_failed
0000cca4 l     F .text	00000040 ble_gap_master_connect_cancelled
0000cce4 l     F .text	00000014 ble_gap_update_entry_free
0000ccf8 l     F .text	00000038 ble_gap_master_ticks_until_exp
0000cd30 l     F .text	0000003c ble_gap_update_next_exp
0000cd6c l     F .text	0000003a ble_gap_update_timer
0000cda8 l     F .text	00000038 ble_gap_slave_ticks_until_exp
0000cde0 l     F .text	0000002c ble_gap_slave_timer
0000ce0c l     F .text	00000020 ble_gap_slave_set_timer
0000ce2c l     F .text	0000004c ble_gap_master_timer
0000ce78 l     F .text	00000084 ble_gap_adv_validate
0000cefc l     F .text	00000024 ble_gap_update_entry_alloc
0000d308 l     F .text	00000022 ble_gap_adv_stop_no_lock
0000d354 l     F .text	00000028 ble_gap_conn_cancel_no_lock
0000d3e8 l     F .text	0000003e ble_gap_update_notify
0000d5f0 l     F .text	0000002c ble_gap_update_l2cap_cb
0000d61c l     F .text	00000026 ble_gap_update_failed
20007094 l     O .bss	00000004 ble_gap_event_listener_list
20007098 l     O .bss	00000004 ble_gap_update_entries
2000709c l     O .bss	00000018 ble_gap_update_entry_mem
200070b4 l     O .bss	0000001c ble_gap_update_entry_pool
200004b8 l     O .bssnz	00000014 ble_gap_master
200004cc l     O .bssnz	00000010 ble_gap_slave
200070d0 l     O .bss	0000000c preempt_done_mutex
200070dc l     O .bss	00000008 slaves.13545
00000000 l    df *ABS*	00000000 ble_gattc.c
0000dc3c l     F .text	0000000c ble_gattc_err_dispatch_get
0000dc48 l     F .text	0000000c ble_gattc_resume_dispatch_get
0000dc54 l     F .text	0000000c ble_gattc_tmo_dispatch_get
0000dc60 l     F .text	00000024 ble_gattc_proc_matches_conn_op
0000dc84 l     F .text	0000001e ble_gattc_proc_matches_expired
0000dca2 l     F .text	00000008 ble_gattc_proc_matches_stalled
0000dcaa l     F .text	00000014 ble_gattc_proc_timeout
0000dcc0 l     F .text	0000001c ble_gattc_error
0000dcdc l     F .text	0000002c ble_gattc_mtu_cb
0000dd08 l     F .text	0000000e ble_gattc_mtu_tmo
0000dd16 l     F .text	0000000a ble_gattc_mtu_err
0000dd20 l     F .text	0000002c ble_gattc_disc_all_svcs_cb
0000dd4c l     F .text	0000000e ble_gattc_disc_all_svcs_tmo
0000dd5a l     F .text	00000016 ble_gattc_disc_all_svcs_err
0000dd70 l     F .text	0000002c ble_gattc_disc_svc_uuid_cb
0000dd9c l     F .text	0000000e ble_gattc_disc_svc_uuid_tmo
0000ddaa l     F .text	00000014 ble_gattc_disc_svc_uuid_err
0000ddbe l     F .text	0000002c ble_gattc_find_inc_svcs_cb
0000ddea l     F .text	0000000e ble_gattc_find_inc_svcs_tmo
0000ddf8 l     F .text	00000018 ble_gattc_find_inc_svcs_err
0000de10 l     F .text	0000002c ble_gattc_disc_all_chrs_cb
0000de3c l     F .text	0000000e ble_gattc_disc_all_chrs_tmo
0000de4a l     F .text	00000014 ble_gattc_disc_all_chrs_err
0000de5e l     F .text	0000002c ble_gattc_disc_chr_uuid_cb
0000de8a l     F .text	0000000e ble_gattc_disc_chr_uuid_tmo
0000de98 l     F .text	00000014 ble_gattc_disc_chr_uuid_err
0000deac l     F .text	00000034 ble_gattc_disc_all_dscs_cb
0000dee0 l     F .text	0000000e ble_gattc_disc_all_dscs_tmo
0000deee l     F .text	00000014 ble_gattc_disc_all_dscs_err
0000df02 l     F .text	0000002c ble_gattc_read_cb
0000df2e l     F .text	0000000e ble_gattc_read_tmo
0000df3c l     F .text	0000000a ble_gattc_read_err
0000df46 l     F .text	0000002c ble_gattc_read_uuid_cb
0000df72 l     F .text	0000000e ble_gattc_read_uuid_tmo
0000df80 l     F .text	0000000a ble_gattc_read_uuid_err
0000df8a l     F .text	0000002c ble_gattc_read_long_cb
0000dfb6 l     F .text	0000000e ble_gattc_read_long_tmo
0000dfc4 l     F .text	0000000a ble_gattc_read_long_err
0000dfce l     F .text	00000042 ble_gattc_read_mult_cb
0000e010 l     F .text	0000000e ble_gattc_read_mult_tmo
0000e01e l     F .text	0000000a ble_gattc_read_mult_err
0000e028 l     F .text	00000026 ble_gattc_write_long_cb
0000e04e l     F .text	0000000c ble_gattc_write_long_tmo
0000e05a l     F .text	00000030 ble_gattc_write_reliable_cb
0000e08a l     F .text	0000000c ble_gattc_write_reliable_tmo
0000e098 l     F .text	0000002c ble_gattc_proc_set_resume_timer
0000e0c4 l     F .text	00000014 ble_gattc_process_resume_status
0000e0d8 l     F .text	00000010 ble_gattc_proc_set_exp_timer
0000e0e8 l     F .text	00000024 ble_gattc_ticks_until_resume
0000e10c l     F .text	00000078 ble_gattc_extract
0000e184 l     F .text	0000002c ble_gattc_extract_expired
0000e1b0 l     F .text	00000014 ble_gattc_extract_stalled
0000e1c4 l     F .text	00000020 ble_gattc_extract_by_conn_op
0000e1e4 l     F .text	00000014 ble_gattc_extract_first_by_conn_op
0000e1f8 l     F .text	00000020 ble_gattc_proc_insert
0000e218 l     F .text	00000010 ble_gattc_indicate_tmo
0000e228 l     F .text	00000038 ble_gattc_write_cb
0000e260 l     F .text	0000000c ble_gattc_write_tmo
0000e26c l     F .text	00000008 ble_gattc_write_err
0000e274 l     F .text	00000044 ble_gattc_proc_free
0000e2b8 l     F .text	0000003e ble_gattc_fail_procs
0000e2f6 l     F .text	00000020 ble_gattc_write_reliable_err
0000e316 l     F .text	0000002a ble_gattc_write_long_err
0000e340 l     F .text	00000084 ble_gattc_write_reliable_tx
0000e3c4 l     F .text	00000024 ble_gattc_write_reliable_resume
0000e3e8 l     F .text	0000006e ble_gattc_write_long_tx
0000e456 l     F .text	00000024 ble_gattc_write_long_resume
0000e47a l     F .text	0000001a ble_gattc_read_long_tx
0000e494 l     F .text	00000026 ble_gattc_read_long_resume
0000e4ba l     F .text	00000012 ble_gattc_disc_all_dscs_tx
0000e4cc l     F .text	00000026 ble_gattc_disc_all_dscs_resume
0000e4f4 l     F .text	00000028 ble_gattc_disc_chr_uuid_tx
0000e51c l     F .text	00000026 ble_gattc_disc_chr_uuid_resume
0000e544 l     F .text	00000028 ble_gattc_disc_all_chrs_tx
0000e56c l     F .text	00000026 ble_gattc_disc_all_chrs_resume
0000e594 l     F .text	00000030 ble_gattc_find_inc_svcs_tx
0000e5c4 l     F .text	00000026 ble_gattc_find_inc_svcs_resume
0000e5ea l     F .text	0000003a ble_gattc_disc_svc_uuid_tx
0000e624 l     F .text	00000026 ble_gattc_disc_svc_uuid_resume
0000e64c l     F .text	00000028 ble_gattc_disc_all_svcs_tx
0000e674 l     F .text	00000026 ble_gattc_disc_all_svcs_resume
0000e69a l     F .text	00000026 ble_gattc_process_status
0000e6c0 l     F .text	00000040 ble_gattc_resume_procs
0000e700 l     F .text	0000001c ble_gattc_proc_alloc
0000e71c l     F .text	00000028 ble_gattc_indicate_err
0000e744 l     F .text	00000024 ble_gattc_indicate_rx_rsp
200070e4 l     O .bss	000000e0 ble_gattc_proc_mem
200071c4 l     O .bss	0000001c ble_gattc_proc_pool
200071e0 l     O .bss	00000008 ble_gattc_procs
200071e8 l     O .bss	00000004 ble_gattc_resume_at
200071ec l     O .bss	00000004 error.13279
00028cc0 l     O .text	0000003c ble_gattc_err_dispatch
00028d10 l     O .text	0000003c ble_gattc_resume_dispatch
00028d4c l     O .text	0000003c ble_gattc_tmo_dispatch
00000000 l    df *ABS*	00000000 ble_gatts.c
0000e970 l     F .text	0000001a ble_gatts_chr_clt_cfg_allowed
0000e98a l     F .text	00000056 ble_gatts_att_flags_from_chr_flags
0000e9e0 l     F .text	00000056 ble_gatts_chr_properties
0000ea36 l     F .text	00000014 ble_gatts_chr_is_sane
0000ea4a l     F .text	0000000c ble_gatts_chr_op
0000ea58 l     F .text	0000002c ble_gatts_find_svc_entry_idx
0000ea84 l     F .text	0000003c ble_gatts_svc_incs_satisfied
0000eac0 l     F .text	0000000c ble_gatts_dsc_op
0000eacc l     F .text	00000014 ble_gatts_dsc_is_sane
0000eae0 l     F .text	00000024 ble_gatts_clt_cfg_find_idx
0000eb04 l     F .text	00000018 ble_gatts_clt_cfg_find
0000eb1c l     F .text	00000024 ble_gatts_svc_type_to_uuid
0000eb40 l     F .text	0000001a ble_gatts_svc_is_sane
0000eb5c l     F .text	0000000c ble_gatts_clt_cfg_size
0000eb68 l     F .text	00000034 ble_gatts_schedule_update
0000eb9c l     F .text	000000e2 ble_gatts_count_resources
0000ec7e l     F .text	000000dc ble_gatts_clt_cfg_access_locked
0000ed5a l     F .text	00000032 ble_gatts_subscribe_event
0000ee20 l     F .text	00000028 ble_gatts_register_inc
0000f162 l     F .text	0000004c ble_gatts_inc_access
0000ee48 l     F .text	00000024 ble_gatts_register_clt_cfg_dsc
0000ee6c l     F .text	00000058 ble_gatts_register_dsc
0000f280 l     F .text	00000034 ble_gatts_dsc_access
0000eec4 l     F .text	000000fc ble_gatts_register_chr
0000f114 l     F .text	0000004e ble_gatts_chr_def_access
0000f24c l     F .text	00000034 ble_gatts_chr_val_access
0000efc0 l     F .text	000000b8 ble_gatts_register_svc
0000f0ec l     F .text	00000028 ble_gatts_svc_access
0000f078 l     F .text	00000074 ble_gatts_register_round
0000f1ae l     F .text	0000009e ble_gatts_val_access
0000f2b4 l     F .text	0000002e ble_gatts_mutable
0000f2e4 l     F .text	00000024 ble_gatts_free_mem
0000f308 l     F .text	0000001c ble_gatts_free_svc_defs
0000f324 l     F .text	0000006c ble_gatts_tx_notifications_one_chr
200071f0 l     O .bss	00000004 ble_gatts_clt_cfg_mem
200071f4 l     O .bss	0000001c ble_gatts_clt_cfg_pool
20007210 l     O .bss	00000004 ble_gatts_clt_cfgs
20007214 l     O .bss	00000004 ble_gatts_num_cfgable_chrs
20007218 l     O .bss	00000004 ble_gatts_num_svc_defs
2000721c l     O .bss	00000002 ble_gatts_num_svc_entries
20007220 l     O .bss	00000004 ble_gatts_svc_defs
20007224 l     O .bss	00000004 ble_gatts_svc_entries
20000168 l     O .data	00000004 __compound_literal.0
2000016c l     O .data	00000004 __compound_literal.1
20000170 l     O .data	00000004 __compound_literal.2
20000174 l     O .data	00000004 __compound_literal.3
20000178 l     O .data	00000004 __compound_literal.4
00000000 l    df *ABS*	00000000 ble_hs.c
0000f970 l     F .text	0000004a ble_hs_wakeup_tx_conn
0000f9bc l     F .text	00000018 ble_hs_event_rx_hci_ev
0000f9d4 l     F .text	0000001c ble_hs_clear_rx_queue
0000f9f0 l     F .text	00000030 ble_hs_rx_data
0000fa20 l     F .text	00000008 ble_hs_event_tx_notify
0000fa34 l     F .text	00000014 ble_hs_sched_start_stage2
0000fa48 l     F .text	00000008 ble_hs_event_start_stage1
0000fad0 l     F .text	00000008 ble_hs_event_rx_data
0000fb28 l     F .text	00000020 ble_hs_timer_reset
0000fb48 l     F .text	00000030 ble_hs_timer_sched
0000fb78 l     F .text	00000044 ble_hs_sync
0000fbbc l     F .text	00000044 ble_hs_reset
0000fc00 l     F .text	00000008 ble_hs_event_reset
0000fc08 l     F .text	00000054 ble_hs_timer_exp
0000fd50 l     F .text	0000001e ble_hs_event_start_stage2
2000722c l     O .bss	00000010 ble_hs_ev_reset
2000723c l     O .bss	00000010 ble_hs_ev_start_stage1
2000724c l     O .bss	00000010 ble_hs_ev_start_stage2
2000725c l     O .bss	00000010 ble_hs_ev_tx_notifications
2000726c l     O .bss	00000004 ble_hs_evq
2000728c l     O .bss	000000a0 ble_hs_hci_os_event_buf
20007334 l     O .bss	0000000c ble_hs_mutex
20007340 l     O .bss	00000004 ble_hs_parent_task
20007344 l     O .bss	00000004 ble_hs_reset_reason
20007348 l     O .bss	00000018 ble_hs_rx_q
20007364 l     O .bss	00000020 ble_hs_timer
00000000 l    df *ABS*	00000000 ble_hs_adv.c
0000ff9c l     F .text	00000068 ble_hs_adv_set_hdr
00010004 l     F .text	0000004e ble_hs_adv_set_flat_mbuf
00010052 l     F .text	0000005e ble_hs_adv_set_array_uuid16
000100b0 l     F .text	00000062 ble_hs_adv_set_array_uuid128
00010112 l     F .text	0000006a ble_hs_adv_set_array_uuid32
0001017c l     F .text	00000066 ble_hs_adv_set_array16
000101e2 l     F .text	000002d0 adv_set_fields
00000000 l    df *ABS*	00000000 ble_hs_atomic.c
00000000 l    df *ABS*	00000000 ble_hs_conn.c
20007384 l     O .bss	00000064 ble_hs_conn_elem_mem
200073e8 l     O .bss	00000006 ble_hs_conn_null_addr
200073f0 l     O .bss	0000001c ble_hs_conn_pool
2000740c l     O .bss	00000004 ble_hs_conns
00000000 l    df *ABS*	00000000 ble_hs_flow.c
00000000 l    df *ABS*	00000000 ble_hs_hci.c
00010938 l     F .text	0000004a ble_hs_hci_rx_cmd_complete
00010982 l     F .text	00000024 ble_hs_hci_rx_cmd_status
000109a8 l     F .text	0000000c ble_hs_hci_max_acl_payload_sz
000109b4 l     F .text	00000014 ble_hs_hci_lock
000109c8 l     F .text	00000024 ble_hs_hci_wait_for_ack
000109ec l     F .text	0000007c ble_hs_hci_process_ack
00010a68 l     F .text	00000010 ble_hs_hci_unlock
00010a78 l     F .text	00000024 ble_hs_hci_rx_ack
00010a9c l     F .text	00000024 ble_hs_hci_frag_alloc
00010ac0 l     F .text	0000004c ble_hs_hci_acl_hdr_prepend
20007410 l     O .bss	00000004 ble_hs_hci_ack
20007416 l     O .bss	00000002 ble_hs_hci_buf_sz
20007418 l     O .bss	0000011c ble_hs_hci_frag_data
20007534 l     O .bss	0000000c ble_hs_hci_frag_mbuf_pool
20007540 l     O .bss	0000001c ble_hs_hci_frag_mempool
2000755c l     O .bss	0000000c ble_hs_hci_mutex
20007568 l     O .bss	00000008 ble_hs_hci_sem
20007570 l     O .bss	00000004 ble_hs_hci_sup_feat
20007574 l     O .bss	00000001 ble_hs_hci_version
00000000 l    df *ABS*	00000000 ble_hs_hci_cmd.c
00010d30 l     F .text	00000018 ble_hs_hci_cmd_transport
00010d48 l     F .text	0000002a ble_hs_hci_cmd_send
00000000 l    df *ABS*	00000000 ble_hs_hci_evt.c
00010dac l     F .text	00000024 ble_hs_hci_evt_dispatch_find
00010dd0 l     F .text	00000014 ble_hs_hci_evt_le_dispatch_find
00010de4 l     F .text	00000026 ble_hs_hci_evt_le_meta
00010e0a l     F .text	0000004e ble_hs_hci_evt_le_adv_rpt_first_pass
00010e58 l     F .text	00000004 ble_hs_hci_evt_le_ext_adv_rpt
00010e5c l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_estab
00010e60 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_rpt
00010e64 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_lost
00010e68 l     F .text	00000004 ble_hs_hci_evt_le_periodic_adv_sync_transfer
00010e6c l     F .text	00000004 ble_hs_hci_evt_le_scan_timeout
00010e70 l     F .text	00000004 ble_hs_hci_evt_le_adv_set_terminated
00010e74 l     F .text	00000004 ble_hs_hci_evt_le_scan_req_rcvd
00010e78 l     F .text	00000014 ble_hs_hci_evt_hw_error
00010e8c l     F .text	00000014 ble_hs_hci_evt_enc_key_refresh
00010ea0 l     F .text	00000014 ble_hs_hci_evt_encrypt_change
00010eb4 l     F .text	00000032 ble_hs_hci_evt_disconn_complete
00010ee6 l     F .text	00000062 ble_hs_hci_evt_num_completed_pkts
00010f48 l     F .text	00000014 ble_hs_hci_evt_le_phy_update_complete
00010f5c l     F .text	0000007e ble_hs_hci_evt_le_dir_adv_rpt
00010fda l     F .text	0000007e ble_hs_hci_evt_le_adv_rpt
00011058 l     F .text	00000086 ble_hs_hci_evt_le_enh_conn_complete
000110de l     F .text	00000066 ble_hs_hci_evt_le_conn_complete
00011144 l     F .text	00000014 ble_hs_hci_evt_le_conn_parm_req
00011158 l     F .text	00000014 ble_hs_hci_evt_le_lt_key_req
0001116c l     F .text	00000014 ble_hs_hci_evt_le_rd_rem_used_feat_complete
00011180 l     F .text	00000014 ble_hs_hci_evt_le_conn_upd_complete
00028ddc l     O .text	00000030 ble_hs_hci_evt_dispatch
00028e0c l     O .text	00000064 ble_hs_hci_evt_le_dispatch
00000000 l    df *ABS*	00000000 ble_hs_hci_util.c
00000000 l    df *ABS*	00000000 ble_hs_id.c
00011418 l     F .text	00000042 ble_hs_id_addr_type_usable
20007578 l     O .bss	00000006 ble_hs_id_pub
20007580 l     O .bss	00000006 ble_hs_id_rnd
00028e70 l     O .text	00000002 priv_addr_types.12672
00028e74 l     O .text	00000002 pub_addr_types.12671
00000000 l    df *ABS*	00000000 ble_hs_log.c
00000000 l    df *ABS*	00000000 ble_hs_mbuf.c
0001153c l     F .text	0000002a ble_hs_mbuf_gen_pkt
00000000 l    df *ABS*	00000000 ble_hs_misc.c
000115d6 l     F .text	00000020 ble_hs_misc_restore_one_irk
00000000 l    df *ABS*	00000000 ble_hs_mqueue.c
00000000 l    df *ABS*	00000000 ble_hs_pvcy.c
000116f8 l     F .text	0000002e ble_hs_pvcy_set_addr_timeout
00011726 l     F .text	0000001a ble_hs_pvcy_clear_entries
00011740 l     F .text	0000001e ble_hs_pvcy_set_resolve_enabled
00011804 l     F .text	0000008c ble_hs_pvcy_add_entry_hci
20007590 l     O .bss	00000010 ble_hs_pvcy_irk
200075a0 l     O .bss	00000001 ble_hs_pvcy_started
00000000 l    df *ABS*	00000000 ble_hs_startup.c
00011934 l     F .text	0000001a ble_hs_startup_reset_tx
0001194e l     F .text	00000030 ble_hs_startup_le_read_buf_sz_tx
0001197e l     F .text	00000030 ble_hs_startup_read_buf_sz_tx
000119ae l     F .text	0000002a ble_hs_startup_read_local_ver_tx
000119d8 l     F .text	00000058 ble_hs_startup_set_evmask_tx
00011a30 l     F .text	00000048 ble_hs_startup_le_set_evmask_tx
00011a78 l     F .text	0000005e ble_hs_startup_read_buf_sz
00011ad6 l     F .text	00000028 ble_hs_startup_le_read_sup_f_tx
00011afe l     F .text	00000028 ble_hs_startup_read_bd_addr
00000000 l    df *ABS*	00000000 ble_hs_stop.c
00011b7c l     F .text	00000048 ble_hs_stop_done
00011bc4 l     F .text	0000000a ble_hs_stop_terminate_timeout_cb
200075a4 l     O .bss	0000000c ble_hs_stop_gap_listener
200075b0 l     O .bss	00000004 ble_hs_stop_listeners
200075b4 l     O .bss	00000020 ble_hs_stop_terminate_tmo
00000000 l    df *ABS*	00000000 ble_l2cap.c
00011bec l     F .text	00000012 ble_l2cap_get_mtu
00011bfe l     F .text	00000020 ble_l2cap_append_rx
00011cea l     F .text	0000004c ble_l2cap_rx_payload
200075d4 l     O .bss	00000054 ble_l2cap_chan_mem
00000000 l    df *ABS*	00000000 ble_l2cap_sig.c
00011e68 l     F .text	0000001c ble_l2cap_sig_next_id
00011e84 l     F .text	00000014 ble_l2cap_sig_dispatch_get
00011e98 l     F .text	0000002e ble_l2cap_sig_proc_matches
00011ec6 l     F .text	00000004 ble_l2cap_sig_rx_noop
00011eca l     F .text	0000000e ble_l2cap_sig_update_call_cb
00011ed8 l     F .text	00000024 ble_l2cap_sig_proc_insert
00011efc l     F .text	00000060 ble_l2cap_sig_proc_extract
00011f5c l     F .text	00000020 ble_l2cap_sig_proc_alloc
00011f7c l     F .text	00000014 ble_l2cap_sig_proc_set_timer
00011f90 l     F .text	0000005c ble_l2cap_sig_extract_expired
00011fec l     F .text	00000014 ble_l2cap_sig_proc_free
00012000 l     F .text	00000018 ble_l2cap_sig_process_status
00012018 l     F .text	00000014 ble_l2cap_sig_rx_reject
0001202c l     F .text	0000004a ble_l2cap_sig_update_rsp_rx
00012076 l     F .text	00000078 ble_l2cap_sig_rx
000120ee l     F .text	0000009c ble_l2cap_sig_update_req_rx
20007644 l     O .bss	00000001 ble_l2cap_sig_cur_id
20007648 l     O .bss	00000014 ble_l2cap_sig_proc_mem
2000765c l     O .bss	0000001c ble_l2cap_sig_proc_pool
20007678 l     O .bss	00000008 ble_l2cap_sig_procs
00028e9c l     O .text	0000006c ble_l2cap_sig_dispatch
00000000 l    df *ABS*	00000000 ble_l2cap_sig_cmd.c
00000000 l    df *ABS*	00000000 ble_sm.c
000123c8 l     F .text	00000014 ble_sm_dispatch_get
000123dc l     F .text	00000028 ble_sm_proc_remove
00012404 l     F .text	0000003a ble_sm_proc_matches
00012440 l     F .text	00000018 ble_sm_insert
00012458 l     F .text	0000000c ble_sm_rx_noop
00012464 l     F .text	00000028 ble_sm_build_authreq
0001248c l     F .text	00000022 ble_sm_key_dist
000124ae l     F .text	00000004 ble_sm_chk_store_overflow_by_type
000124b2 l     F .text	0000001e ble_sm_chk_store_overflow
000124d0 l     F .text	00000010 ble_sm_state_after_pair
000124e0 l     F .text	00000024 ble_sm_pair_base_fill
00012504 l     F .text	00000020 ble_sm_pair_req_fill
00012524 l     F .text	00000028 ble_sm_pair_rsp_fill
0001254c l     F .text	00000004 ble_sm_verify_auth_requirements
00012550 l     F .text	0000000a ble_sm_gen_ediv
0001255a l     F .text	0000000c ble_sm_gen_master_id_rand
00012566 l     F .text	0000000c ble_sm_gen_csrk
00012572 l     F .text	00000014 ble_sm_io_action
00012586 l     F .text	000000b2 ble_sm_pair_cfg
00012638 l     F .text	00000026 ble_sm_gen_ltk
00012660 l     F .text	0000003c ble_sm_exec
0001269c l     F .text	00000032 ble_sm_sec_req_exec
000126ce l     F .text	00000022 ble_sm_pair_fail_tx
000126f0 l     F .text	000000e6 ble_sm_fill_store_value
000127d6 l     F .text	00000048 ble_sm_update_sec_state
0001281e l     F .text	00000032 ble_sm_key_exch_success
00012850 l     F .text	0000027a ble_sm_key_exch_exec
00012aca l     F .text	0000001e ble_sm_key_rxed
00012ae8 l     F .text	00000040 ble_sm_start_encrypt_tx
00012b28 l     F .text	0000000e ble_sm_enc_restore_exec
00012b36 l     F .text	00000044 ble_sm_enc_start_exec
00012b7a l     F .text	0000004a ble_sm_ltk_req_reply_tx
00012bc4 l     F .text	00000024 ble_sm_ltk_start_exec
00012be8 l     F .text	00000030 ble_sm_ltk_req_neg_reply_tx
00012c18 l     F .text	0000004e ble_sm_ltk_restore_exec
00012c66 l     F .text	00000012 ble_sm_random_exec
00012c78 l     F .text	00000012 ble_sm_confirm_exec
00012c8a l     F .text	00000014 ble_sm_proc_set_timer
00012ca0 l     F .text	00000070 ble_sm_extract_expired
00012d10 l     F .text	000000e6 ble_sm_persist_keys
00012df8 l     F .text	00000014 ble_sm_proc_free
00012e0c l     F .text	00000020 ble_sm_proc_alloc
00012e2c l     F .text	00000044 ble_sm_retrieve_ltk
00012e70 l     F .text	0000002a ble_sm_fail_rx
00012e9a l     F .text	00000054 ble_sm_read_bond
00012eee l     F .text	0000007c ble_sm_chk_repeat_pairing
0001302c l     F .text	00000080 ble_sm_sign_info_rx
000130ac l     F .text	0000007a ble_sm_id_addr_info_rx
00013126 l     F .text	00000080 ble_sm_id_info_rx
000131a6 l     F .text	0000007a ble_sm_master_id_rx
00013220 l     F .text	00000086 ble_sm_enc_info_rx
000132a6 l     F .text	0000013a ble_sm_pair_req_rx
00013434 l     F .text	000000ae ble_sm_confirm_rx
000134e2 l     F .text	000000c0 ble_sm_pair_rsp_rx
00013686 l     F .text	00000102 ble_sm_enc_event_rx
00013788 l     F .text	0000006c ble_sm_rx
00013916 l     F .text	000000a4 ble_sm_pair_exec
000139ca l     F .text	0000006c ble_sm_random_rx
00013b9c l     F .text	000000ec ble_sm_sec_req_rx
20007680 l     O .bss	00000100 ble_sm_proc_mem
20007780 l     O .bss	0000001c ble_sm_proc_pool
2000779c l     O .bss	00000008 ble_sm_procs
00028f20 l     O .text	0000003c ble_sm_dispatch
00028f70 l     O .text	0000002c ble_sm_state_dispatch
00000000 l    df *ABS*	00000000 ble_sm_cmd.c
00000000 l    df *ABS*	00000000 ble_sm_lgcy.c
00013d60 l     F .text	0000003e ble_sm_gen_stk
00028f9c l     O .text	00000019 ble_sm_lgcy_init_ioa
00028fb8 l     O .text	00000019 ble_sm_lgcy_resp_ioa
00000000 l    df *ABS*	00000000 ble_store.c
00013ffc l     F .text	00000018 ble_store_status
000140c0 l     F .text	00000008 ble_store_persist_sec
00000000 l    df *ABS*	00000000 ble_store_util.c
00014222 l     F .text	0000005c ble_store_util_iter_unique_peer
00000000 l    df *ABS*	00000000 ble_uuid.c
00028fd4 l     O .text	00000010 ble_uuid_base
00000000 l    df *ABS*	00000000 ble_att.c
000145a0 l     F .text	00000028 ble_att_rx_dispatch_entry_find
000145c8 l     F .text	00000032 ble_att_rx_handle_unknown_request
000145fa l     F .text	0000007c ble_att_rx
200077a4 l     O .bss	00000002 ble_att_preferred_mtu_val
0002903c l     O .text	000000d8 ble_att_rx_dispatch
00000000 l    df *ABS*	00000000 ble_att_clt.c
00000000 l    df *ABS*	00000000 ble_att_cmd.c
00000000 l    df *ABS*	00000000 ble_att_svr.c
00014920 l     F .text	00000010 ble_att_svr_next_id
00014930 l     F .text	00000026 ble_att_svr_prep_find_prev
00014956 l     F .text	0000005e ble_att_svr_prep_validate
000149b4 l     F .text	00000020 ble_att_svr_entry_alloc
000149d4 l     F .text	0000001a ble_att_svr_get_sec_state
000149ee l     F .text	00000116 ble_att_svr_check_perms
00014b04 l     F .text	0000005e ble_att_svr_read
00014b62 l     F .text	00000062 ble_att_svr_write
00014bc4 l     F .text	00000018 ble_att_svr_pullup_req_base
00014bdc l     F .text	00000068 ble_att_svr_build_mtu_rsp
00014c44 l     F .text	00000024 ble_att_svr_pkt
00014c68 l     F .text	00000032 ble_att_svr_build_write_rsp
00014c9a l     F .text	00000032 ble_att_svr_build_indicate_rsp
00014ccc l     F .text	000000b0 ble_att_svr_fill_info
00014d7c l     F .text	00000060 ble_att_svr_build_find_info_rsp
00014ddc l     F .text	00000048 ble_att_svr_read_group_type_entry_write
00014e24 l     F .text	00000024 ble_att_svr_is_valid_find_group_type
00014e48 l     F .text	00000054 ble_att_svr_is_valid_group_end
00014e9c l     F .text	00000016 ble_att_svr_is_valid_read_group_type
00014eb2 l     F .text	0000005c ble_att_svr_read_flat
00014f0e l     F .text	0000005c ble_att_svr_fill_type_value_entry
00014f6c l     F .text	000000e8 ble_att_svr_fill_type_value
00015054 l     F .text	00000062 ble_att_svr_build_find_type_value_rsp
000150b6 l     F .text	0000003a ble_att_svr_service_uuid
000150f0 l     F .text	00000184 ble_att_svr_build_read_group_type_rsp
00015274 l     F .text	0000001c ble_att_svr_prep_free
00015290 l     F .text	0000003c ble_att_svr_prep_alloc
000152cc l     F .text	0000007c ble_att_svr_insert_prep_entry
00015348 l     F .text	00000048 ble_att_svr_prep_extract
00015390 l     F .text	00000014 ble_att_svr_free_start_mem
00015418 l     F .text	00000034 ble_att_svr_write_handle
0001544c l     F .text	00000064 ble_att_svr_prep_write
000154e4 l     F .text	00000136 ble_att_svr_build_read_type_rsp
00015664 l     F .text	000000a6 ble_att_svr_build_read_mult_rsp
0001573a l     F .text	00000098 ble_att_svr_tx_rsp
200077a8 l     O .bss	00000004 ble_att_svr_entry_mem
200077ac l     O .bss	0000001c ble_att_svr_entry_pool
200077c8 l     O .bss	00000008 ble_att_svr_hidden_list
200077d0 l     O .bss	00000002 ble_att_svr_id
200077d4 l     O .bss	00000008 ble_att_svr_list
200077dc l     O .bss	00000300 ble_att_svr_prep_entry_mem
20007adc l     O .bss	0000001c ble_att_svr_prep_entry_pool
00000000 l    df *ABS*	00000000 ble_sm_alg.c
00015f5c l     F .text	0000001c ble_sm_alg_xor_128
00015f78 l     F .text	00000048 ble_sm_alg_encrypt
00000000 l    df *ABS*	00000000 ble_svc_dis.c
000160f8 l     F .text	00000064 ble_svc_dis_access
200001a4 l     O .data	00000004 __compound_literal.0
200001a8 l     O .data	00000004 __compound_literal.1
200001ac l     O .data	00000004 __compound_literal.2
200001b0 l     O .data	00000048 __compound_literal.3
00029148 l     O .text	00000020 ble_svc_dis_defs
00000000 l    df *ABS*	00000000 ble_svc_gap.c
000161dc l     F .text	00000016 ble_svc_gap_device_name_write_access
000161f2 l     F .text	00000016 ble_svc_gap_appearance_write_access
00016208 l     F .text	00000028 ble_svc_gap_device_name_read_access
00016230 l     F .text	0000002c ble_svc_gap_appearance_read_access
0001625c l     F .text	00000098 ble_svc_gap_access
20007af8 l     O .bss	00000002 ble_svc_gap_appearance
20000214 l     O .data	00000004 __compound_literal.0
20000218 l     O .data	00000004 __compound_literal.1
2000021c l     O .data	00000004 __compound_literal.2
20000220 l     O .data	00000048 __compound_literal.3
20000268 l     O .data	00000020 ble_svc_gap_name
00029180 l     O .text	00000020 ble_svc_gap_defs
00000000 l    df *ABS*	00000000 addr.c
00016398 l     F .text	00000012 ble_hs_util_load_rand_addr
000163aa l     F .text	00000032 ble_hs_util_ensure_rand_addr
00000000 l    df *ABS*	00000000 ble_hci_ram.c
20007afc l     O .bss	00000104 ble_hci_ram_cmd_buf
20007c00 l     O .bss	0000001c ble_hci_ram_cmd_pool
20007c1c l     O .bss	00000090 ble_hci_ram_evt_hi_buf
20007cac l     O .bss	0000001c ble_hci_ram_evt_hi_pool
20007cc8 l     O .bss	00000240 ble_hci_ram_evt_lo_buf
20007f08 l     O .bss	0000001c ble_hci_ram_evt_lo_pool
20007f24 l     O .bss	00000004 ble_hci_ram_rx_acl_hs_arg
20007f28 l     O .bss	00000004 ble_hci_ram_rx_acl_hs_cb
20007f2c l     O .bss	00000004 ble_hci_ram_rx_acl_ll_arg
20007f30 l     O .bss	00000004 ble_hci_ram_rx_acl_ll_cb
20007f34 l     O .bss	00000004 ble_hci_ram_rx_cmd_hs_arg
20007f38 l     O .bss	00000004 ble_hci_ram_rx_cmd_hs_cb
20007f3c l     O .bss	00000004 ble_hci_ram_rx_cmd_ll_arg
20007f40 l     O .bss	00000004 ble_hci_ram_rx_cmd_ll_cb
00000000 l    df *ABS*	00000000 config_store.c
000166e4 l     F .text	0000003c conf_dup_check_cb
00016720 l     F .text	0000001c conf_load_cb
20007f48 l     O .bss	00000001 conf_loaded
20007f49 l     O .bss	00000001 conf_loading
00000000 l    df *ABS*	00000000 config.c
00016824 l     F .text	0000002a conf_set_cb
0001684e l     F .text	00000020 conf_commit_cb
0001686e l     F .text	00000008 conf_ev_fn_load
20007f54 l     O .bss	0000000c conf_mtx
20000288 l     O .data	00000010 conf_ev_load
00000000 l    df *ABS*	00000000 flash_map.c
00016be0 l     F .text	0000003c flash_area_find_idx
00016c1c l     F .text	00000058 flash_map_area_overlaps
00016c74 l     F .text	0000007c flash_map_add_new_dflt_areas
00016cf0 l     F .text	00000078 flash_map_read_mfg
20007f68 l     O .bss	00000078 mfg_areas.9303
00000000 l    df *ABS*	00000000 mfg.c
00016f04 l     F .text	00000094 mfg_seek_next_aux
00016f98 l     F .text	00000070 mfg_read_mmr
00017008 l     F .text	00000054 mfg_read_next_mmr
0001705c l     F .text	00000044 mfg_open_flash_area
000170a0 l     F .text	00000044 mfg_read_tlv_body
00017174 l     F .text	0000004e mfg_read_mmr_refs
20007fe0 l     O .bss	00000001 mfg_initialized
20007fe4 l     O .bss	00000018 mfg_mmrs
20007ffc l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 bootutil_misc.c
000172ca l     F .text	0000000c boot_flag_decode
000172d8 l     F .text	00000018 boot_magic_decode
000172f0 l     F .text	0000006a boot_write_trailer
0001735a l     F .text	00000016 boot_write_trailer_flag
00029254 l     O .text	00000012 boot_swap_tables
00000000 l    df *ABS*	00000000 split.c
20008004 l     O .bss	00000001 split_app_active
20008005 l     O .bss	00000001 split_mode_cur
20000298 l     O .data	00000024 split_scfg
00029268 l     O .text	00000020 __compound_literal.0
00000000 l    df *ABS*	00000000 img_mgmt.c
00017714 l     F .text	0000003e img_mgmt_find_tlvs
00017754 l     F .text	00000040 img_mgmt_erase
00017794 l     F .text	0000004c img_mgmt_upload_good_rsp
000178f8 l     F .text	00000036 img_mgmt_upload_log
000179a8 l     F .text	0000020c img_mgmt_upload
2000803c l     O .bss	00000004 img_mgmt_upload_arg
20008040 l     O .bss	00000004 img_mgmt_upload_cb
200002bc l     O .data	0000000c img_mgmt_group
00029298 l     O .text	00000030 img_mgmt_handlers
00000000 l    df *ABS*	00000000 img_mgmt_state.c
00000000 l    df *ABS*	00000000 img_mgmt_util.c
00000000 l    df *ABS*	00000000 mynewt_img_mgmt.c
00017fa6 l     F .text	00000040 img_mgmt_vercmp
00017fe6 l     F .text	00000046 img_mgmt_find_best_area_id
00000000 l    df *ABS*	00000000 mynewt_img_mgmt_log.c
000183c8 l     F .text	00000004 img_mgmt_log_gen
00000000 l    df *ABS*	00000000 os_mgmt.c
0001841c l     F .text	0000000a os_mgmt_reset
00018428 l     F .text	00000144 os_mgmt_taskstat_encode_one
0001856c l     F .text	0000006c os_mgmt_taskstat_read
000185d8 l     F .text	00000074 os_mgmt_echo
200002c8 l     O .data	0000000c os_mgmt_group
00029370 l     O .text	00000030 os_mgmt_group_handlers
00000000 l    df *ABS*	00000000 mynewt_os_mgmt.c
00018664 l     F .text	0000001c mynewt_os_mgmt_task_at
00018680 l     F .text	00000014 mynewt_os_mgmt_stack_usage
00018694 l     F .text	0000000a mynewt_os_mgmt_reset_tmo
20008044 l     O .bss	00000020 mynewt_os_mgmt_reset_callout
00000000 l    df *ABS*	00000000 aes_encrypt.c
00029428 l     O .text	00000100 sbox
00000000 l    df *ABS*	00000000 utils.c
00000000 l    df *ABS*	00000000 base64.c
00018f18 l     F .text	00000020 pos
00018f38 l     F .text	00000048 token_decode
00029528 l     O .text	00000041 base64_chars
00000000 l    df *ABS*	00000000 cborencoder.c
00019146 l     F .text	00000096 create_container
000191dc l     F .text	00000076 encode_string
00000000 l    df *ABS*	00000000 cborparser.c
0001942e l     F .text	00000024 is_fixed_type
00019452 l     F .text	00000004 iterate_noop
00019456 l     F .text	00000144 preparse_value
0001959a l     F .text	0000004c preparse_next_value
000195e6 l     F .text	000000aa extract_length
00019690 l     F .text	00000178 iterate_string_chunks
00019808 l     F .text	000000f0 advance_internal
00019b80 l     F .text	00000084 advance_recursive
00000000 l    df *ABS*	00000000 hal_bsp.c
0002956c l     O .text	00000008 flash_devs
00000000 l    df *ABS*	00000000 spiflash.c
00019c64 l     F .text	00000016 hal_spiflash_sector_info
00019c7a l     F .text	0000002e spiflash_release_power_down_generic
00019ca8 l     F .text	00000030 spiflash_delay_us
00019dac l     F .text	00000070 spiflash_wait_ready_till
00019e32 l     F .text	00000080 hal_spiflash_read
00019ee8 l     F .text	000000e0 hal_spiflash_write
00019fc8 l     F .text	0000009c spiflash_execute_erase
0001a064 l     F .text	0000002c spiflash_erase_cmd
0001a09e l     F .text	00000008 hal_spiflash_erase_sector
0001a170 l     F .text	00000008 hal_spiflash_erase
0001a1fc l     F .text	0000003e hal_spiflash_init
000295a4 l     O .text	0000001c spiflash_flash_funcs
20000320 l     O .data	00000010 supported_chips
00029574 l     O .text	00000030 spiflash_characteristics
00000000 l    df *ABS*	00000000 hal_flash.c
0001a23a l     F .text	0000001e hal_flash_check_addr
20008064 l     O .bss	00000001 protected_flash
00000000 l    df *ABS*	00000000 hal_flash.c
0001a504 l     F .text	00000028 nrf52k_flash_wait_ready
0001a52c l     F .text	00000054 nrf52k_flash_erase_sector
0001a580 l     F .text	00000004 nrf52k_flash_init
0001a584 l     F .text	00000028 nrf52k_flash_sector_info
0001a5ac l     F .text	000000d0 nrf52k_flash_write
0001a67c l     F .text	0000000e nrf52k_flash_read
000295d8 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_gpio.c
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001a6e4 l     F .text	000000f4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_spi.c
0001a930 l     F .text	0000006e nrf52_irqm_handler
0001a9b8 l     F .text	00000014 hal_spi_stop_transfer
0001a9cc l     F .text	0000004c hal_spi_config_slave
0001aa18 l     F .text	000000b8 hal_spi_init_master
0001aad0 l     F .text	000000e0 hal_spi_config_master
000295f4 l     O .text	00000010 nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
0001ae24 l     F .text	00000016 nrf52_hal_wdt_default_handler
0001ae3c l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001af00 l     F .text	00000040 nrf52_periph_create_timers
0001af40 l     F .text	00000028 nrf52_periph_create_i2c
0001af68 l     F .text	00000028 nrf52_periph_create_spi
00029604 l     O .text	0000000c hal_i2c1_cfg
00029610 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 hal_i2c.c
0001afa0 l     F .text	0000007a hal_i2c_delay_us
0001b01c l     F .text	00000024 hal_i2c_resolve
0001b040 l     F .text	00000012 read_gpio_inbuffer
0001b052 l     F .text	000000a2 hal_i2c_clear_bus
00029614 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_timer.c
0001b194 l     F .text	0000000a nrf_read_timer_cntr
0001b1a0 l     F .text	000000f4 nrf_timer_set_ocmp
0001b294 l     F .text	0000000a nrf_timer_disable_ocmp
0001b29e l     F .text	00000010 nrf_rtc_disable_ocmp
0001b2b0 l     F .text	00000054 hal_timer_read_bsptimer
0001b304 l     F .text	00000070 hal_timer_chk_queue
0001b374 l     F .text	00000040 hal_rtc_timer_irq_handler
0002961c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001b6f4 l     F .text	00000028 sensor_mgr_remove
0001b71c l     F .text	00000060 sensor_mgr_insert
0001b77c l     F .text	0000000a sensor_type_traits_empty
0001b788 l     F .text	0000000c sensor_mgr_evq_set
0001b7c2 l     F .text	0000005c sensor_read_data_func
0001b820 l     F .text	00000048 sensor_base_ts_update_event
0001b868 l     F .text	00000050 sensor_up_timestamp
0001b8f0 l     F .text	000000a8 sensor_mgr_init
0001bb64 l     F .text	0000007c sensor_mgr_wakeup_event
0001b9c2 l     F .text	00000032 sensor_update_nextrun
0001b9f4 l     F .text	0000001e sensor_calc_nextrun_delta
0001ba14 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001baec l     F .text	0000004a sensor_mgr_poll_bytype
0001bb36 l     F .text	0000002e sensor_poll_per_type_trait
20008104 l     O .bss	00000078 sensor_notify_evt_area
2000817c l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 endian.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_cputime_pwr2.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 malloc.c
0001bed0 l     F .text	00000004 malloc_lock_nop
0001bed4 l     F .text	00000002 malloc_unlock_nop
0001bed6 l     F .text	00000048 __malloc_from_block
0001bf20 l     F .text	00000068 __free_block
20000334 l     O .data	00000018 __malloc_head
2000034c l     O .data	00000004 malloc_lock
20000350 l     O .data	00000004 malloc_unlock
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strncpy.c
00000000 l    df *ABS*	00000000 strsep.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoll.c
00000000 l    df *ABS*	00000000 strtoull.c
00000000 l    df *ABS*	00000000 strntoumax.c
00000000 l    df *ABS*	00000000 strpbrk.c
00000000 l    df *ABS*	00000000 lvgl.c
00000000 l    df *ABS*	00000000 popcountsi2.c
00000000 l    df *ABS*	00000000 sensor_coap.c
200081b8 l     O .bss	00000008 oc_sem
200081c0 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
200081c4 l     O .bss	0000000c hw_id
200081d0 l     O .bss	00000004 hw_id_len
200081d8 l     O .bss	00000008 sensor_node_address
200081e0 l     O .bss	00000037 sensor_node_names_buf
20000354 l     O .data	00000014 sensor_node_names
00029658 l     O .text	0000000c COLLECTOR_NODE_HW_ID
00029664 l     O .text	0000003c SENSOR_NODE_HW_IDS
00029700 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001c4f0 l     F .text	00000060 config_device
20008218 l     O .bss	00000014 adc_1_itf_temp_stub
20008230 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001c5bc l     F .text	00000004 temp_stub_close
0001c5c0 l     F .text	0000001c temp_stub_sensor_get_config
0001c5dc l     F .text	00000036 temp_stub_open
0001c6d0 l     F .text	00000084 temp_stub_sensor_read
00029744 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 smp.c
0001c784 l     F .text	0000000c smp_free_buf
0001c790 l     F .text	00000010 smp_init_writer
0001c7a0 l     F .text	00000012 smp_init_reader
0001c7b2 l     F .text	0000002c smp_write_at
0001c7de l     F .text	00000010 smp_reset_buf
0001c7ee l     F .text	00000008 smp_trim_front
0001c7f6 l     F .text	00000030 smp_alloc_rsp
0001c826 l     F .text	00000024 smp_rsp_frag_alloc
0001c890 l     F .text	0000004c smp_process_packet
0001c8dc l     F .text	0000000a smp_event_data_in
00000000 l    df *ABS*	00000000 smp_ble.c
0001c974 l     F .text	00000028 smp_ble_out
0001c99c l     F .text	00000040 smp_ble_event_data_in
0001c9dc l     F .text	00000094 gatt_svr_chr_access_smp
20000368 l     O .data	00000030 __compound_literal.0
000297a0 l     O .text	00000011 gatt_svr_chr_smp
000297b4 l     O .text	00000011 gatt_svr_svc_smp
000297c8 l     O .text	00000020 gatt_svr_svcs
00000000 l    df *ABS*	00000000 oc_buffer.c
0001cb08 l     F .text	00000030 oc_buffer_tx
0001cb38 l     F .text	0000002c oc_buffer_rx
20008344 l     O .bss	00000018 oc_inq
2000835c l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
20008374 l     O .bss	000000d8 oc_client_cb_area
2000844c l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
20008468 l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 tcp4_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000848c l     O .bss	0000001c oc_rep_objects
200084a8 l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 ble_ll.c
0001cc98 l     F .text	00000020 ble_ll_flush_pkt_queue
0001cd08 l     F .text	0000001c ble_ll_hw_err_timer_cb
0001cd24 l     F .text	0000000a ble_ll_event_comp_pkts
0001cd2e l     F .text	00000008 ble_ll_event_dbuf_overflow
0001cd38 l     F .text	0000006c ble_ll_tx_pkt_in
0001cda4 l     F .text	00000008 ble_ll_event_tx_pkt
0001cdac l     F .text	00000084 ble_ll_rx_pkt_in
0001ce30 l     F .text	00000008 ble_ll_event_rx_pkt
0001ce38 l     F .text	00000020 ble_ll_seed_prng
20008580 l     O .bss	00000180 g_ble_ll_stack
00029808 l     O .text	00000008 g_ble_ll_pdu_header_tx_time
00000000 l    df *ABS*	00000000 ble_ll_adv.c
0001d4d8 l     F .text	0000001a ble_ll_adv_first_chan
0001d4f2 l     F .text	0000001a ble_ll_adv_final_chan
0001d50c l     F .text	00000016 ble_ll_adv_flags_set
0001d522 l     F .text	00000018 ble_ll_adv_flags_clear
0001d53a l     F .text	0000007c ble_ll_adv_rpa_update
0001d5b6 l     F .text	00000016 ble_ll_adv_active_chanset_clear
0001d5cc l     F .text	00000030 ble_ll_adv_tx_done
0001d5fc l     F .text	0000004c ble_ll_adv_sm_find_configured
0001d648 l     F .text	00000034 ble_ll_adv_active_chanset_set_pri
0001d67c l     F .text	0000002c ble_ll_adv_scheduled
0001d6a8 l     F .text	00000054 ble_ll_adv_set_sched
0001d814 l     F .text	000000d4 ble_ll_adv_tx_start_cb
0001d6fc l     F .text	00000118 ble_ll_adv_sm_start
0001d8e8 l     F .text	000000aa ble_ll_adv_legacy_pdu_make
0001d992 l     F .text	0000005a ble_ll_adv_scan_rsp_legacy_pdu_make
0001d9ec l     F .text	00000024 ble_ll_adv_drop_event
0001da10 l     F .text	00000052 ble_ll_adv_update_adv_scan_rsp_data
0001da64 l     F .text	00000070 ble_ll_adv_sm_stop
0001dad4 l     F .text	0000002e ble_ll_adv_set_enable
0001db02 l     F .text	00000068 ble_ll_adv_update_data_mbuf
0001db6a l     F .text	000000b0 ble_ll_adv_set_scan_rsp_data
0001dc1a l     F .text	000000ca ble_ll_adv_set_adv_data
0001dce4 l     F .text	0000004c ble_ll_adv_already_connected
0001dd30 l     F .text	00000148 ble_ll_adv_rx_req
0001de78 l     F .text	000000fc ble_ll_adv_conn_req_rxd
0001df74 l     F .text	00000026 ble_ll_adv_sm_stop_timeout
0001df9c l     F .text	00000064 ble_ll_adv_reschedule_event
0001e000 l     F .text	00000034 ble_ll_adv_sm_init
0001e16c l     F .text	0000000a ble_ll_adv_event_done
0001e058 l     F .text	00000104 ble_ll_adv_done
0001e15c l     F .text	00000010 ble_ll_adv_make_done
00000000 l    df *ABS*	00000000 ble_ll_conn.c
0001e538 l     F .text	0000001a ble_ll_conn_is_empty_pdu
0001e552 l     F .text	0000004c ble_ll_conn_calc_dci_csa1
0001e5a0 l     F .text	00000018 ble_ll_conn_halt
0001e5b8 l     F .text	00000014 ble_ll_conn_current_sm_over
0001e5cc l     F .text	00000010 ble_ll_conn_rxend_unencrypt
0001e5dc l     F .text	00000010 ble_ll_conn_txend_encrypt
0001e5ec l     F .text	00000008 ble_ll_conn_wait_txend
0001e5f4 l     F .text	0000000a ble_ll_conn_connect_ind_txend_to_init
0001e5fe l     F .text	0000000a ble_ll_conn_connect_ind_txend_to_standby
0001e608 l     F .text	00000028 ble_ll_init_get_conn_comp_ev
0001e630 l     F .text	00000032 ble_ll_conn_start_rx_encrypt
0001e662 l     F .text	00000010 ble_ll_conn_start_rx_unencrypt
0001e672 l     F .text	00000018 ble_ll_conn_continue_rx_encrypt
0001e68a l     F .text	00000020 ble_ll_conn_adjust_pyld_len
0001e6aa l     F .text	00000030 ble_ll_update_max_tx_octets_phy_mode
0001e6dc l     F .text	00000040 ble_ll_conn_get_next_sched_time
0001e71c l     F .text	00000414 ble_ll_conn_tx_pdu
0001eb30 l     F .text	00000128 ble_ll_conn_event_start_cb
0001ec58 l     F .text	00000070 ble_ll_conn_master_common_init
0001ecc8 l     F .text	00000036 ble_ll_conn_calc_itvl_ticks
0001ecfe l     F .text	0000006e ble_ll_conn_can_send_next_pdu
0001ed6c l     F .text	0000006c ble_ll_conn_chk_csm_flags
0001edd8 l     F .text	000000a0 ble_ll_conn_connect_ind_tx_pducb
0001ee78 l     F .text	00000108 ble_ll_conn_is_peer_adv
0001ef80 l     F .text	000000c0 ble_ll_conn_connect_ind_prepare
0001f0c8 l     F .text	00000268 ble_ll_conn_next_event
0001f330 l     F .text	00000110 ble_ll_conn_created
0001f440 l     F .text	00000016 ble_ll_conn_set_csa
0001f794 l     F .text	0000012c ble_ll_conn_event_end
00000000 l    df *ABS*	00000000 ble_ll_conn_hci.c
0002056c l     F .text	0000002e ble_ll_conn_hci_chk_scan_params
0002059c l     F .text	00000028 ble_ll_init_alloc_conn_comp_ev
0002061a l     F .text	00000066 ble_ll_conn_process_conn_params
000207e0 l     F .text	00000034 ble_ll_conn_hci_cancel_conn_complete_event
200089b8 l     O .bss	00000004 g_ble_ll_last_num_comp_pkt_evt
00000000 l    df *ABS*	00000000 ble_ll_ctrl.c
000210e0 l     F .text	00000038 ble_ll_ctrl_enc_allowed_pdu
00021118 l     F .text	00000020 ble_ll_ctrl_rx_start_enc_req
00021138 l     F .text	0000001a ble_ll_ctrl_rx_pause_enc_req
00021152 l     F .text	00000020 ble_ll_ctrl_rx_pause_enc_rsp
00021172 l     F .text	0000000c ble_ll_ctrl_proc_rsp_timer_cb
00021180 l     F .text	00000028 ble_ll_ctrl_start_rsp_timer
000211a8 l     F .text	00000114 ble_ll_ctrl_conn_upd_make
000212bc l     F .text	00000026 ble_ll_ctrl_version_ind_make
000212e2 l     F .text	00000028 ble_ll_ctrl_datalen_upd_make
0002130a l     F .text	000000cc ble_ll_ctrl_conn_param_pdu_make
000213d8 l     F .text	00000044 ble_ll_ctrl_chanmap_req_make
0002141c l     F .text	0000002e ble_ll_ctrl_update_features
0002144a l     F .text	00000052 ble_ll_ctrl_rx_feature_req
0002149c l     F .text	0000004c ble_ll_ctrl_enc_req_make
000214e8 l     F .text	000000e0 ble_ll_ctrl_proc_init
000215c8 l     F .text	00000088 ble_ll_ctrl_rx_conn_update
00021650 l     F .text	0000004c ble_ll_ctrl_rx_chanmap_req
0002169c l     F .text	00000066 ble_ll_ctrl_len_proc
00021702 l     F .text	0000007e ble_ll_ctrl_rx_enc_req
00021792 l     F .text	0000003c ble_ll_ctrl_rx_enc_rsp
00021886 l     F .text	00000164 ble_ll_ctrl_conn_param_pdu_proc
000219ea l     F .text	00000034 ble_ll_ctrl_rx_conn_param_rsp
00021ba6 l     F .text	000000cc ble_ll_ctrl_proc_unk_rsp
00021c72 l     F .text	00000038 ble_ll_ctrl_rx_feature_rsp
00021caa l     F .text	00000060 ble_ll_ctrl_rx_version_ind
00021d0a l     F .text	0000004c ble_ll_ctrl_rx_start_enc_rsp
00021d56 l     F .text	0000000a ble_ll_ctrl_rx_ping_rsp
00021d60 l     F .text	00000068 ble_ll_ctrl_rx_conn_param_req
00021dc8 l     F .text	0000007c ble_ll_ctrl_rx_reject_ind
00000000 l    df *ABS*	00000000 ble_ll_hci.c
000222da l     F .text	00000004 ble_ll_hci_get_num_cmd_pkts
000222de l     F .text	00000020 ble_ll_hci_rd_local_version
000222fe l     F .text	0000001c ble_ll_hci_rd_local_supp_feat
0002231c l     F .text	00000018 ble_ll_hci_rd_bd_addr
00022334 l     F .text	0000001c ble_ll_hci_set_le_event_mask
00022350 l     F .text	00000018 ble_ll_hci_le_read_bufsize
00022368 l     F .text	00000018 ble_ll_hci_le_rd_sugg_data_len
00022380 l     F .text	00000020 ble_ll_hci_le_rd_max_data_len
000223a0 l     F .text	0000004a ble_ll_hci_le_cmd_send_cmd_status
000223ec l     F .text	0000001c ble_ll_read_rf_path_compensation
00022408 l     F .text	0000001c ble_ll_hci_cb_set_event_mask
00022424 l     F .text	0000001c ble_ll_hci_cb_set_event_mask2
00022440 l     F .text	00000010 ble_ll_hci_disconnect
00022450 l     F .text	00000022 ble_ll_hci_link_ctrl_cmd_proc
00022472 l     F .text	0000004a ble_ll_hci_ctlr_bb_cmd_proc
000224bc l     F .text	0000004c ble_ll_hci_rd_local_supp_cmd
00022508 l     F .text	0000005a ble_ll_hci_info_params_cmd_proc
00022562 l     F .text	00000014 ble_ll_hci_status_params_cmd_proc
00022576 l     F .text	00000016 ble_ll_hci_le_read_local_features
0002258c l     F .text	00000042 ble_ll_hci_le_encrypt
000225ce l     F .text	00000012 ble_ll_hci_le_rand
000225e0 l     F .text	00000016 ble_ll_hci_le_read_supp_states
000225f8 l     F .text	00000058 ble_ll_hci_le_wr_sugg_data_len
00022650 l     F .text	00000020 ble_ll_read_tx_power
00022670 l     F .text	00000064 ble_ll_write_rf_path_compensation
000226d4 l     F .text	000002b6 ble_ll_hci_le_cmd_proc
000229b2 l     F .text	000000f8 ble_ll_hci_cmd_proc
200089bc l     O .bss	00000010 g_ble_ll_hci_cmd_ev
200089d0 l     O .bss	00000008 g_ble_ll_hci_event_mask
200089d8 l     O .bss	00000008 g_ble_ll_hci_event_mask2
200089e0 l     O .bss	00000008 g_ble_ll_hci_le_event_mask
200089e8 l     O .bss	00000002 rx_path_pwr_compensation
200089ea l     O .bss	00000002 tx_path_pwr_compensation
00000000 l    df *ABS*	00000000 ble_ll_hci_ev.c
00000000 l    df *ABS*	00000000 ble_ll_rand.c
00000000 l    df *ABS*	00000000 ble_ll_resolv.c
00023000 l     F .text	00000018 ble_ll_resolv_irk_nonzero
00023018 l     F .text	0000002c ble_ll_is_controller_busy
00023044 l     F .text	00000020 ble_ll_resolv_list_chg_allowed
00023064 l     F .text	00000040 ble_ll_is_on_resolv_list
000230a4 l     F .text	00000078 ble_ll_resolv_gen_priv_addr
0002311c l     F .text	00000064 ble_ll_resolv_rpa_timer_cb
00000000 l    df *ABS*	00000000 ble_ll_rfmgmt.c
000236c4 l     F .text	00000034 ble_ll_rfmgmt_disable
000236f8 l     F .text	0000004c ble_ll_rfmgmt_release_ev
00023744 l     F .text	0000003c ble_ll_rfmgmt_enable
00023780 l     F .text	00000014 ble_ll_rfmgmt_timer_exp
00023794 l     F .text	00000084 ble_ll_rfmgmt_timer_reschedule
20008b18 l     O .bss	00000044 g_ble_ll_rfmgmt_data
00000000 l    df *ABS*	00000000 ble_ll_scan.c
0002394c l     F .text	0000000c ble_ll_get_chan_to_scan
00023958 l     F .text	0000000e ble_ll_scan_get_next_adv_prim_chan
00023966 l     F .text	0000002a ble_ll_scan_move_window_to
00023990 l     F .text	00000030 ble_ll_scan_is_inside_window
000239c0 l     F .text	00000056 ble_ll_scan_get_addr_data_from_legacy
00023a16 l     F .text	000000a6 ble_ll_scan_req_backoff
00023abc l     F .text	00000074 ble_ll_scan_have_rxd_scan_rsp
00023b30 l     F .text	00000060 ble_ll_scan_dup_update_legacy
00023b90 l     F .text	0000012c ble_ll_scan_rx_filter
00023cbc l     F .text	000000b0 ble_ll_scan_rx_isr_on_legacy
00023d6c l     F .text	00000028 ble_ll_scan_req_tx_pdu_cb
00023d94 l     F .text	0000002e ble_ll_scan_refresh_nrpa
00023dc4 l     F .text	00000070 ble_ll_scan_req_pdu_prepare
00023e34 l     F .text	0000007c ble_ll_scan_send_scan_req
00023ebc l     F .text	00000118 ble_ll_scan_start
00023fd4 l     F .text	00000058 ble_ll_scan_rx_pkt_in_restore_addr_data
0002402c l     F .text	000000f8 ble_ll_scan_dup_check_legacy
00024124 l     F .text	0000005e ble_ll_hci_send_dir_adv_report
00024182 l     F .text	00000084 ble_ll_hci_send_adv_report
00024206 l     F .text	000000c4 ble_ll_scan_send_adv_report
000242cc l     F .text	0000008c ble_ll_scan_rx_pkt_in_on_legacy
00024358 l     F .text	00000098 ble_ll_scan_sm_start
000243f0 l     F .text	00000084 ble_ll_scan_common_init
00024474 l     F .text	000000d0 ble_ll_scan_event_proc
00024818 l     F .text	00000024 ble_ll_scan_interrupted_event_cb
000245e0 l     F .text	00000128 ble_ll_scan_set_enable
20008b5c l     O .bss	00000001 g_ble_ll_scan_num_rsp_advs
20008b60 l     O .bss	00000014 g_ble_ll_scan_params
20008bc4 l     O .bss	00000088 g_ble_ll_scan_sm
20008c4c l     O .bss	00000008 g_scan_dup_list
20008c54 l     O .bss	00000080 g_scan_dup_mem
20008cd4 l     O .bss	0000001c g_scan_dup_pool
00000000 l    df *ABS*	00000000 ble_ll_sched.c
00024b74 l     F .text	00000030 ble_ll_sched_is_overlap
00024ba4 l     F .text	00000024 ble_ll_sched_insert_if_empty
00024bc8 l     F .text	0000003c ble_ll_sched_conn_overlap
00024c04 l     F .text	00000024 ble_ll_sched_overlaps_current
00024c28 l     F .text	00000072 ble_ll_sched_execute_item
00024c9c l     F .text	00000048 ble_ll_sched_run
00000000 l    df *ABS*	00000000 ble_ll_utils.c
0002987c l     O .text	00000010 g_ble_sca_ppm_tbl
00000000 l    df *ABS*	00000000 ble_ll_whitelist.c
000255fc l     F .text	0000001c ble_ll_whitelist_chg_allowed
00025618 l     F .text	0000003c ble_ll_whitelist_search
00000000 l    df *ABS*	00000000 ble_hw.c
00025748 l     F .text	00000040 ble_rng_isr
20008d54 l     O .bss	00000001 g_ble_hw_whitelist_mask
00000000 l    df *ABS*	00000000 ble_phy.c
00025ab0 l     F .text	00000018 ble_phy_apply_errata_102_106_107
00025ac8 l     F .text	00000020 nrf_wait_disabled
00025ae8 l     F .text	000000ac ble_phy_set_start_time
00025b94 l     F .text	00000004 ble_phy_get_ccm_datarate
00025b98 l     F .text	00000100 ble_phy_rx_xcvr_setup
00025c98 l     F .text	00000030 ble_phy_set_access_addr
00025cc8 l     F .text	0000001c ble_phy_stop_usec_timer
00025ce4 l     F .text	0000003c ble_phy_disable_irq_and_ppi
00025d20 l     F .text	00000058 ble_phy_set_start_now
00025e8c l     F .text	000000d8 ble_phy_tx_end_isr
00026454 l     F .text	0000008c ble_phy_isr
00026204 l     F .text	0000012c ble_phy_rx_start_isr
00026330 l     F .text	00000124 ble_phy_rx_end_isr
20008dd4 l     O .bss	00000104 g_ble_phy_enc_buf
20008ed8 l     O .bss	00000104 g_ble_phy_rx_buf
20008fdc l     O .bss	00000104 g_ble_phy_tx_buf
0002988c l     O .text	00000028 g_ble_phy_chan_freq
000298b4 l     O .text	00000004 g_ble_phy_t_rxaddrdelay
000298b8 l     O .text	00000004 g_ble_phy_t_rxenddelay
000298bc l     O .text	00000004 g_ble_phy_t_txdelay
000298c0 l     O .text	00000004 g_ble_phy_t_txenddelay
00000000 l    df *ABS*	00000000 ble_svc_ans.c
00026744 l     F .text	0000007c ble_svc_ans_new_alert_notify
000267c0 l     F .text	0000002c ble_svc_ans_unr_alert_notify
000267ec l     F .text	00000026 ble_svc_ans_chr_write
00026814 l     F .text	00000208 ble_svc_ans_access
20009210 l     O .bss	00000002 ble_svc_ans_alert_not_ctrl_pt
20009212 l     O .bss	00000002 ble_svc_ans_conn_handle
20009214 l     O .bss	00000001 ble_svc_ans_new_alert_cat
20009218 l     O .bss	00000008 ble_svc_ans_new_alert_cnt
20009220 l     O .bss	00000014 ble_svc_ans_new_alert_val
20009234 l     O .bss	00000002 ble_svc_ans_new_alert_val_handle
20009236 l     O .bss	00000002 ble_svc_ans_new_alert_val_len
20009238 l     O .bss	00000001 ble_svc_ans_unr_alert_cat
2000923c l     O .bss	00000008 ble_svc_ans_unr_alert_cnt
20009244 l     O .bss	00000002 ble_svc_ans_unr_alert_stat
20009246 l     O .bss	00000002 ble_svc_ans_unr_alert_val_handle
20000398 l     O .data	00000004 __compound_literal.0
2000039c l     O .data	00000004 __compound_literal.1
200003a0 l     O .data	00000004 __compound_literal.2
200003a4 l     O .data	00000004 __compound_literal.3
200003a8 l     O .data	00000004 __compound_literal.4
200003ac l     O .data	00000004 __compound_literal.5
200003b0 l     O .data	00000090 __compound_literal.6
000298c4 l     O .text	00000020 ble_svc_ans_defs
00000000 l    df *ABS*	00000000 ble_svc_gatt.c
00026aa0 l     F .text	00000068 ble_svc_gatt_access
20009248 l     O .bss	00000002 ble_svc_gatt_changed_val_handle
2000924a l     O .bss	00000002 ble_svc_gatt_end_handle
2000924c l     O .bss	00000002 ble_svc_gatt_start_handle
20000440 l     O .data	00000004 __compound_literal.0
20000444 l     O .data	00000004 __compound_literal.1
20000448 l     O .data	00000030 __compound_literal.2
000298e4 l     O .text	00000020 ble_svc_gatt_defs
00000000 l    df *ABS*	00000000 ble_store_config.c
00026b7c l     F .text	00000094 ble_store_config_find_sec
00026c10 l     F .text	00000038 ble_store_config_read_peer_sec
00026c48 l     F .text	00000038 ble_store_config_read_our_sec
00026c80 l     F .text	00000084 ble_store_config_find_cccd
00026d04 l     F .text	00000028 ble_store_config_read_cccd
00026d2c l     F .text	0000002e ble_store_config_print_key_sec
00026d9a l     F .text	00000046 ble_store_config_print_value_sec
00026de0 l     F .text	00000058 ble_store_config_write_peer_sec
00026e38 l     F .text	00000058 ble_store_config_write_our_sec
00026e90 l     F .text	0000004c ble_store_config_write_cccd
00026f06 l     F .text	00000022 ble_store_config_delete_obj
00026f28 l     F .text	00000024 ble_store_config_delete_sec
00026f4c l     F .text	00000024 ble_store_config_delete_peer_sec
00026f70 l     F .text	00000024 ble_store_config_delete_our_sec
00026f94 l     F .text	00000034 ble_store_config_delete_cccd
00000000 l    df *ABS*	00000000 ble_store_config_conf.c
00027054 l     F .text	0000002c ble_store_config_serialize_arr
00027080 l     F .text	0000002c ble_store_config_persist_sec_set
000270ac l     F .text	00000078 ble_store_config_conf_export
00027124 l     F .text	0000001c ble_store_config_deserialize_arr
00027140 l     F .text	00000080 ble_store_config_conf_set
20000478 l     O .data	00000020 ble_store_config_conf_handler
00000000 l    df *ABS*	00000000 smp.c
00027268 l     F .text	00000016 smp_align4
0002727e l     F .text	0000000a smp_rsp_op
00027288 l     F .text	0000002a smp_init_rsp_hdr
000272b2 l     F .text	0000001a smp_read_hdr
000272cc l     F .text	00000074 smp_handle_single_payload
00027340 l     F .text	00000012 smp_write_hdr
00027352 l     F .text	0000005e smp_handle_single_req
000273b0 l     F .text	0000007c smp_build_err_rsp
0002742c l     F .text	0000004c smp_on_err
00000000 l    df *ABS*	00000000 config_init.c
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 log_reboot.c
000275b0 l     F .text	00000004 log_reboot_init_console
000275b4 l     F .text	00000048 reboot_conf_export
000275fc l     F .text	00000054 reboot_conf_get
00027650 l     F .text	00000054 reboot_conf_set
00027730 l     F .text	00000264 log_reboot_write
200094c0 l     O .bss	00000001 log_reboot_written
200094c4 l     O .bss	00000020 str_reason.9974
00000000 l    df *ABS*	00000000 scfg.c
00027a48 l     F .text	00000014 scfg_find_setting_by_val
00027a5c l     F .text	00000054 scfg_setting_id
00027ab0 l     F .text	00000040 scfg_handler_export
00027af0 l     F .text	0000001c scfg_find_setting_by_name
00027b0c l     F .text	0000002a scfg_handler_get
00027b36 l     F .text	0000003e scfg_handler_set
00000000 l    df *ABS*	00000000 mcumgr_util.c
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 cborattr.c
00027cfa l     F .text	00000084 valid_attr_type
00027d7e l     F .text	0000005e cbor_target_address
00028010 l     F .text	000003be cbor_internal_read_object
00000000 l    df *ABS*	00000000 cbor_buf_writer.c
00000000 l    df *ABS*	00000000 cbor_mbuf_reader.c
00028422 l     F .text	0000001e cbor_mbuf_reader_cpy
00028440 l     F .text	0000001c cbor_mbuf_reader_get8
0002845c l     F .text	00000018 cbor_mbuf_reader_cmp
00028474 l     F .text	0000001e cbor_mbuf_reader_get64
00028492 l     F .text	0000001a cbor_mbuf_reader_get32
000284ac l     F .text	00000020 cbor_mbuf_reader_get16
00000000 l    df *ABS*	00000000 cbor_mbuf_writer.c
00000000 l    df *ABS*	00000000 nrf52_clock.c
200094e4 l     O .bss	00000001 nrf52_clock_hfxo_refcnt
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 os_error.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 ble_ll_supp_cmd.c
00000000 l    df *ABS*	00000000 ble_hs_cfg.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000198f8 g     F .text	00000090 _cbor_value_decode_int64_internal
0000a874 g     F .text	00000058 os_mbuf_trim_front
200093d0 g     O .bss	000000f0 ble_store_config_peer_secs
00020e46 g     F .text	00000054 ble_ll_conn_hci_rd_chan_map
000147e8 g     F .text	00000004 ble_att_clt_tx_read_group_type
00027bd4 g     F .text	000000a0 scfg_register
000183a0 g     F .text	00000028 img_mgmt_module_init
000106f0 g     F .text	0000001c ble_hs_conn_find_by_idx
00009204 g     F .text	00000002 console_buffer
00028558 g     F .text	00000044 nrf52_clock_hfxo_request
000111bc g     F .text	000000a0 ble_hs_hci_evt_acl_process
0001e178 g     F .text	0000002c ble_ll_adv_rpa_timeout
00028548 g     F .text	00000010 cbor_mbuf_writer_init
0001802c g     F .text	000001a4 img_mgmt_impl_upload_inspect
000114ac g     F .text	00000048 ble_hs_id_infer_auto
20008cf0 g     O .bss	00000001 g_ble_ll_sched_offset_ticks
000147ec g     F .text	00000004 ble_att_clt_rx_read_group_type
0000b5e0 g     F .text	00000030 os_arch_start
00016e56 g     F .text	00000024 flash_area_id_from_image_slot
200094e8 g       .bss	00000000 __HeapBase
2000703c g     O .bss	00000008 g_os_task_list
000099c8 g     F .text	00000084 os_idle_task
000147dc g     F .text	00000004 ble_att_clt_tx_read_blob
0001c104 g     F .text	00000010 strcpy
0002024c g     F .text	00000044 ble_ll_conn_set_global_chanmap
20007080 g     O .bss	00000006 __rand48_seed
00000000 g       .svc_table	00000000 SVC_Count
00008164  w    F .text	00000002 TIMER2_IRQHandler
0000bf78 g     F .text	00000018 fmemopen_w
00017eb0 g     F .text	0000009c img_mgmt_state_write
000171f2 g     F .text	00000048 mem_split_frag
00013400 g     F .text	00000034 ble_sm_proc_can_advance
00009764 g     F .text	00000002 print_addr
0000a3e4 g     F .text	0000005a os_mbuf_copydata
200026f4 g     O .bss	00000008 g_os_mempool_list
00009c3c g     F .text	0000001a os_callout_init
00009c58 g     F .text	0000003c os_callout_stop
0000d966 g     F .text	0000004a ble_gap_notify_rx_event
00008164  w    F .text	00000002 RTC0_IRQHandler
00025338 g     F .text	00000078 ble_ll_sched_adv_resched_pdu
0001e3f0 g     F .text	00000040 ble_ll_adv_rx_isr_start
000265dc g     F .text	00000100 ble_phy_tx
00017396 g     F .text	000000c0 boot_read_swap_state
00026b08 g     F .text	00000074 ble_svc_gatt_init
00021a82 g     F .text	0000004e ble_ll_ctrl_proc_start
0001bf88 g     F .text	00000050 add_malloc_block
20008d14 g     O .bss	00000040 g_ble_ll_whitelist
00024950 g     F .text	00000014 ble_ll_scan_rx_pkt_in
0000e8c6 g     F .text	0000002c ble_gattc_rx_err
00010930 g     F .text	00000002 ble_hs_flow_connection_broken
0000c624 g     F .text	00000028 mgmt_write_rsp_status
00020ec8 g     F .text	00000072 ble_ll_conn_hci_set_data_len
000235a0 g     F .text	0000002c ble_ll_resolv_set_local_rpa
0001d2a8 g     F .text	00000068 ble_ll_reset
00009f86 g     F .text	00000070 os_eventq_put
00011334 g     F .text	0000001c ble_hs_id_set_pub
000231fc g     F .text	0000012c ble_ll_resolv_list_add
200000d8 g       .data	00000000 __data_start__
00014166 g     F .text	0000001e ble_store_key_from_value_cccd
0000a6f0 g     F .text	00000062 os_mbuf_extend
0001c158 g     F .text	00000020 strtok_r
000295c0 g     O .text	00000018 nrf52k_flash_dev
00012280 g     F .text	0000003c ble_l2cap_sig_timer
20007270 g     O .bss	0000001c ble_hs_hci_ev_pool
00028408 g     F .text	00000014 cbor_buf_writer_init
0000be60 g     F .text	00000024 printf
0001ba84 g     F .text	00000068 sensor_read
00028c48 g     O .text	00000004 stdout
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
0001a6c2 g     F .text	00000022 hal_gpio_write
000141ae g     F .text	00000074 ble_store_iterate
20007628 g     O .bss	0000001c ble_l2cap_chan_pool
00020ff6 g     F .text	0000004c ble_ll_conn_hci_le_ltk_neg_reply
0000b550 g     F .text	0000008c os_arch_os_init
00027994 g     F .text	00000044 log_reboot
00008156  w    F .text	00000002 HardFault_Handler
00015948 g     F .text	000000a8 ble_att_svr_rx_read_type
0001b3c4 g     F .text	00000068 hal_timer_init
000170f6 g     F .text	0000001a mfg_seek_next_with_type
0000f75c g     F .text	00000080 ble_gatts_bonding_established
00015b28 g     F .text	000000c2 ble_att_svr_rx_read_group_type
0000e93c g     F .text	00000034 ble_gattc_init
0001bd46 g     F .text	00000008 os_cputime_timer_stop
000192c6 g     F .text	00000094 cbor_encode_int
00026548 g     F .text	00000040 ble_phy_rx_set_start_time
000174a6 g     F .text	00000054 boot_write_swap_info
0000b610 g     F .text	0000005c os_arch_os_start
20000330 g     O .data	00000004 hal_twi_i2c1
0000cf4c g     F .text	00000010 ble_gap_master_in_progress
0001645c g     F .text	0000002c ble_hci_trans_hs_cmd_tx
000104c2 g     F .text	0000002a ble_hs_atomic_conn_delete
00009848 g     F .text	0000004e gatt_svr_register_cb
00015f14 g     F .text	00000048 ble_att_svr_init
0001a280 g     F .text	00000010 hal_flash_align
00027ce4 g     F .text	00000014 __wrap_coap_receive
0000f95c g     F .text	00000014 ble_gatts_init
0001d274 g     F .text	0000000c ble_ll_state_get
000133e0 g     F .text	00000020 ble_sm_ioact_state
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00017370 g     F .text	00000020 boot_magic_compatible_check
00017bc8 g     F .text	00000018 img_mgmt_my_version
00024848 g     F .text	00000088 ble_ll_scan_rx_isr_end
0001b0f4 g     F .text	000000a0 hal_i2c_init
00014140 g     F .text	0000000e ble_store_read_cccd
0000e8f2 g     F .text	00000024 ble_gattc_rx_mtu
0000b716 g     F .text	0000000c SysTick_Handler
000122f0 g     F .text	00000034 ble_l2cap_sig_tx
00022cda g     F .text	00000044 ble_ll_hci_ev_conn_update
00008164  w    F .text	00000002 GPIOTE_IRQHandler
00022f18 g     F .text	0000007c ble_ll_rand_data_get
00015866 g     F .text	0000006a ble_att_svr_rx_find_info
00014080 g     F .text	00000040 ble_store_write
0001cc34 g     F .text	00000030 oc_init
00015aec g     F .text	0000003c ble_att_svr_rx_read_mult
00012228 g     F .text	00000020 ble_l2cap_sig_create_chan
00025968 g     F .text	00000048 ble_hw_rng_init
0001d0a8 g     F .text	00000028 ble_ll_rx_pdu_in
000283d0 g     F .text	0000000c cbor_read_object
00028524 g     F .text	00000022 cbor_mbuf_writer
0000aace g     F .text	00000026 os_memblock_put
00008164  w    F .text	00000002 PWM1_IRQHandler
0000ac12 g     F .text	00000028 os_msys_get_pkthdr
20007f60 g     O .bss	00000004 flash_map
0000b7c6 g     F .text	00000038 memmove
00023458 g     F .text	00000054 ble_ll_resolv_set_rpa_tmo
000147d8 g     F .text	00000004 ble_att_clt_rx_read
0001a440 g     F .text	00000030 hal_flash_is_erased
0000faa4 g     F .text	00000008 ble_hs_lock
00023424 g     F .text	00000034 ble_ll_resolv_local_addr_rd
00014068 g     F .text	00000018 ble_store_overflow_event
0000b6d0 g     F .text	00000046 PendSV_Handler
0000bebe g     F .text	0000001c snprintf
0000aa08 g     F .text	00000036 os_mempool_clear
00011cd6 g     F .text	00000014 ble_l2cap_remove_rx
00008154  w    F .text	00000002 NMI_Handler
0000f404 g     F .text	0000005c ble_gatts_connection_broken
0001c2e0 g     F .text	00000014 pinetime_lvgl_mynewt_init
00029a74 g       .ARM.exidx	00000000 __exidx_end
00025a08 g     F .text	0000000c ble_hw_resolv_list_clear
00009898 g     F .text	00000020 gatt_svr_init
00008020 g       .text	00000000 __isr_vector_start
0002483c g     F .text	0000000a ble_ll_scan_interrupted
000271dc g     F .text	0000001c ble_store_config_persist_peer_secs
00020d3c g     F .text	00000098 ble_ll_conn_hci_disconnect_cmd
0000bf48 g     F .text	0000002e memfile_write
0000b4bc g     F .text	00000014 os_arch_ctx_sw
00024ac8 g     F .text	00000008 ble_ll_scan_get_pdu_data
0001935a g     F .text	0000005e cbor_encode_simple_value
000081d0 g     F .text	0000002c hal_system_reset
00028618 g     F .text	00000042 os_error_to_sys
00023674 g     F .text	00000034 ble_ll_resolv_init
00009a78 g     F .text	00000088 os_init_idle_task
00013a36 g     F .text	0000003a ble_sm_timer
20000150 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000afb8 g     F .text	0000000c os_sched_set_current_task
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001f618 g     F .text	00000074 ble_ll_conn_update_eff_data_len
00011c6c g     F .text	0000002c ble_l2cap_parse_hdr
00029a74 g       .ARM.exidx	00000000 __etext
0000cf84 g     F .text	0000002a ble_gap_rx_l2cap_update_req
00029810 g     O .text	00000023 g_ble_ll_ctrl_pkt_lengths
0001cfdc g     F .text	00000054 ble_ll_set_random_addr
000117c4 g     F .text	0000003e ble_hs_pvcy_set_mode
0000e8bc g     F .text	0000000a ble_gattc_indicate
0001f46a g     F .text	00000002 ble_ll_conn_init_wfr_timer_exp
0000fd78 g     F .text	00000224 ble_hs_init
00025a84 g     F .text	00000004 ble_hw_resolv_list_size
0000d6dc g     F .text	000000e0 ble_gap_update_params
00020900 g     F .text	0000002a ble_ll_auth_pyld_tmo_event_send
0000abf4 g     F .text	0000001e os_msys_get
00008164  w    F .text	00000002 RADIO_IRQHandler
00016dc2 g     F .text	00000026 flash_area_write
000105dc g     F .text	00000048 ble_hs_conn_free
0001e1f4 g     F .text	00000104 ble_ll_adv_set_adv_params
0000a752 g     F .text	0000010a os_mbuf_pullup
0000e768 g     F .text	00000056 ble_gattc_timer
00020960 g     F .text	00000150 ble_ll_conn_create
0000ac84 g     F .text	000000c0 os_mutex_release
0000c5d2 g     F .text	0000000e mgmt_streamer_init_writer
000115b2 g     F .text	00000024 ble_hs_mbuf_pullup_base
0000e916 g     F .text	0000001a ble_gattc_rx_indicate_rsp
0000ae70 g     F .text	00000024 os_sanity_check_register
20008cfc g     O .bss	00000018 g_ble_ll_sched_timer
200004b8 g       .bssnz	00000000 __bssnz_start__
0001a0e2 g     F .text	0000008e spiflash_erase
20007f44 g     O .bss	00000004 conf_load_srcs
0001e4cc g     F .text	00000030 ble_ll_adv_reset
0000b428 g     F .text	00000026 os_time_delay
0000d9b0 g     F .text	00000044 ble_gap_notify_tx_event
00017594 g     F .text	0000000a boot_swap_type
20008da0 g     O .bss	00000034 g_ble_phy_data
0001660c g     F .text	00000004 ble_hci_trans_reset
0000a622 g     F .text	00000088 os_mbuf_copyinto
0001070c g     F .text	0000000e ble_hs_conn_exists
00021a36 g     F .text	0000004c ble_ll_ctrl_terminate_start
00008164  w    F .text	00000002 PDM_IRQHandler
0000d122 g     F .text	0000002a ble_gap_adv_set_fields
00017110 g     F .text	0000000a mfg_read_tlv_flash_area
00009348 g     F .text	0000000c console_get_ticks
00013906 g     F .text	00000010 ble_sm_our_pair_rand
00026134 g     F .text	0000004e ble_phy_txpower_round
20008310 g     O .bss	00000034 g_smp_ble_transport
0001e4fc g     F .text	00000020 ble_ll_adv_enabled
00019988 g     F .text	00000020 cbor_parser_init
00010cd0 g     F .text	0000000c ble_hs_hci_set_hci_version
0000a55c g     F .text	000000c6 os_mbuf_prepend
0001d0d0 g     F .text	00000034 ble_ll_acl_data_in
2000017c g     O .data	00000028 ble_hs_cfg
00015c96 g     F .text	00000016 ble_att_svr_prep_clear
00014336 g     F .text	00000034 ble_store_util_status_rr
0001b6f0 g     F .text	00000002 sensor_dev_create
00025930 g     F .text	00000038 ble_hw_encrypt_block
20008a40 g     O .bss	000000d8 g_ble_ll_resolv_list
00013818 g     F .text	000000ee ble_sm_ltk_req_rx
0000aaf4 g     F .text	00000010 os_mempool_module_init
0001c8e8 g     F .text	0000000c mgmt_evq_set
0001cf04 g     F .text	0000001c ble_ll_addr_subtype
00008164  w    F .text	00000002 TEMP_IRQHandler
0000b4e2 g     F .text	0000000a os_arch_in_critical
000144a4 g     F .text	0000000e ble_uuid_u16
00008164  w    F .text	00000002 QDEC_IRQHandler
0001f46c g     F .text	00000028 ble_ll_conn_auth_pyld_timer_start
0001c370 g     F .text	00000080 get_hardware_id
0001c620 g     F .text	0000007c temp_stub_init
00008164  w    F .text	00000002 TIMER3_IRQHandler
000107fc g     F .text	00000084 ble_hs_conn_find_by_addr
0000c6b8 g     F .text	00000010 mgmt_evt
000259e4 g     F .text	00000024 ble_hw_rng_stop
0001cf38 g     F .text	0000007c ble_ll_is_valid_random_addr
0001fde0 g     F .text	00000146 ble_ll_conn_rx_data_pdu
0001f4ae g     F .text	00000064 ble_ll_conn_master_init
0000b4b0 g     F .text	0000000a timer_handler
00009ec0 g     F .text	00000020 os_dev_lookup
0000afc4 g     F .text	00000090 os_sched_sleep
00010932 g     F .text	00000002 ble_hs_flow_track_data_mbuf
00009274 g     F .text	00000004 semihosting_console_init
0001fa20 g     F .text	00000028 ble_ll_init_rx_isr_start
0000c59e g     F .text	00000010 mgmt_streamer_reset_buf
0000b7ac g     F .text	0000001a memcpy
000257b8 g     F .text	0000003c ble_hw_get_static_addr
0000fa28 g     F .text	0000000c ble_hs_evq_get
00024b28 g     F .text	0000004c ble_ll_scan_init
0000c64c g     F .text	00000010 mgmt_err_from_cbor
000106e8 g     F .text	00000008 ble_hs_conn_find_assert
0001e484 g     F .text	0000002e ble_ll_adv_get_local_rpa
00016904 g     F .text	00000034 conf_parse_name
000234ac g     F .text	00000038 ble_ll_resolve_set_priv_mode
0001ae5c g     F .text	00000080 hal_watchdog_init
000231a8 g     F .text	00000014 ble_ll_resolv_list_read_size
00017caa g     F .text	0000004a img_mgmt_state_set_pending
000233c0 g     F .text	00000030 ble_ll_resolv_enable_cmd
00018744 g     F .text	000000bc tc_aes128_set_encrypt_key
0001673c g     F .text	00000054 conf_load
00025e04 g     F .text	00000088 ble_phy_wfr_enable
0001833a g     F .text	0000002e img_mgmt_impl_erase_image_data
0000f390 g     F .text	00000074 ble_gatts_register_svcs
00020c8c g     F .text	00000066 ble_ll_conn_hci_param_nrr
00024aac g     F .text	00000008 ble_ll_scan_get_local_rpa
0001bcf6 g     F .text	0000000c os_cputime_init
20007f50 g     O .bss	00000004 conf_handlers
0001b5d4 g     F .text	0000002c hal_timer_set_cb
00015d5e g     F .text	000000b4 ble_att_svr_rx_exec_write
0000d37c g     F .text	00000046 ble_gap_terminate_with_conn
00011350 g     F .text	00000078 ble_hs_id_set_rnd
00021ad0 g     F .text	00000030 ble_ll_ctrl_initiate_dle
0000bfb4 g     F .text	00000016 .hidden __aeabi_uldivmod
00017684 g     F .text	00000048 split_app_init
0001a470 g     F .text	00000062 hal_flash_isempty
00014844 g     F .text	00000040 ble_att_clt_tx_indicate
00000020 g       *ABS*	00000000 _imghdr_size
0000af7c g     F .text	00000030 os_sched_ctx_sw_hook
200004f4 g     O .bss	00000004 console_is_midline
0000a1cc g     F .text	00000014 os_mbuf_free
0000da62 g     F .text	00000038 ble_gap_mtu_event
0001488e g     F .text	00000026 ble_att_cmd_prepare
200000e4 g     O .data	00000004 SystemCoreClock
00026588 g     F .text	00000024 ble_phy_restart_rx
200080d0 g     O .bss	00000034 sensor_mgr
000081b4 g     F .text	0000000c hal_system_init
00013d38 g     F .text	00000028 ble_sm_tx
00011c48 g     F .text	0000001c ble_l2cap_chan_free
000193b8 g     F .text	00000010 cbor_encode_byte_string
0001cc68 g     F .text	00000002 oc_register_ip6
20008b74 g     O .bss	00000050 g_ble_ll_scan_rsp_advs
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0000d914 g     F .text	00000026 ble_gap_identity_event
0000b4ec g     F .text	0000004c os_arch_task_stack_init
0002092a g     F .text	00000034 ble_ll_disconn_comp_event_send
000144b2 g     F .text	0000003e ble_uuid_init_from_att_buf
0001bfd8 g     F .text	0000006c malloc
00015630 g     F .text	00000034 ble_att_svr_read_handle
00016d9c g     F .text	00000026 flash_area_read
000183cc g     F .text	00000014 img_mgmt_impl_log_upload_start
000098ec g     F .text	00000044 __assert_func
000231bc g     F .text	00000040 ble_ll_resolv_list_find
0000f670 g     F .text	000000c4 ble_gatts_rx_indicate_ack
0001a9a0 g     F .text	00000018 nrf52_spi0_irq_handler
0000c404 g     F .text	00000018 imgr_my_version
00014684 g     F .text	00000002 ble_att_inc_tx_stat
000182d2 g     F .text	00000036 img_mgmt_impl_read
0000b118 g     F .text	00000048 os_sched_wakeup_ticks
000092a0 g     F .text	00000060 console_pkg_init
0000c4c0 g     F .text	0000002c imgmgr_module_init
0001f91c g     F .text	00000104 ble_ll_init_rx_pkt_in
0000815c  w    F .text	00000002 UsageFault_Handler
0001f090 g     F .text	0000001c ble_ll_conn_sm_get
0001c178 g     F .text	0000000c strtoll
0000be84 g     F .text	0000003a vsnprintf
0001c40c g     F .text	0000001a is_standalone_node
200026d4 g     O .bss	00000008 g_callout_list
00011890 g     F .text	00000020 ble_hs_pvcy_add_entry
000144f0 g     F .text	0000002c ble_uuid_init_from_att_mbuf
00024a20 g     F .text	00000020 ble_ll_scan_can_chg_whitelist
000259b0 g     F .text	00000034 ble_hw_rng_start
00010cc4 g     F .text	0000000c ble_hs_hci_set_le_supported_feat
0000f734 g     F .text	00000028 ble_gatts_tx_notifications
00024708 g     F .text	00000058 ble_ll_scan_rx_isr_start
0001cebe g     F .text	00000016 ble_ll_chk_txrx_time
0001a0c6 g     F .text	0000001c spiflash_chip_erase
200087fc g     O .bss	00000016 g_ble_ll_conn_params
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0001865c g     F .text	00000008 os_mgmt_module_init
00017d18 g     F .text	00000198 img_mgmt_state_read
0000bbc0 g     F .text	00000298 tfp_format
2000fe50 g       *ABS*	00000000 __HeapLimit
200004e0 g       .bss	00000000 __bss_start__
0000faac g     F .text	00000008 ble_hs_unlock
000081c0 g     F .text	00000010 hal_debugger_connected
00014574 g     F .text	00000006 ble_uuid_length
000147fc g     F .text	00000004 ble_att_clt_tx_exec_write
0001a2f4 g     F .text	00000074 hal_flash_write
000147c0 g     F .text	00000004 ble_att_clt_rx_find_info
00008164  w    F .text	00000002 TIMER4_IRQHandler
0000e82a g     F .text	00000092 ble_gattc_indicate_custom
00025788 g     F .text	00000030 ble_hw_get_public_addr
00024760 g     F .text	00000058 ble_ll_scan_adv_decode_addr
0000d9f4 g     F .text	0000006e ble_gap_subscribe_event
0000bfca g     F .text	00000004 .hidden __udivmoddi4
00013da0 g     F .text	000000a4 ble_sm_lgcy_io_action
00022b2c g     F .text	0000007c ble_ll_hci_is_event_enabled
0001c428 g     F .text	000000c8 sensor_network_init
00026098 g     F .text	00000054 ble_phy_encrypt_enable
00019b44 g     F .text	0000003c _cbor_value_copy_string
000271f8 g     F .text	0000003c ble_store_config_persist_cccds
00026128 g     F .text	0000000c ble_phy_set_txend_cb
00025a14 g     F .text	00000038 ble_hw_resolv_list_add
00022f94 g     F .text	0000002c ble_ll_rand_prand_get
0001125c g     F .text	0000000e ble_hs_hci_util_handle_pb_bc_join
000266f4 g     F .text	00000010 ble_phy_xcvr_state_get
00010728 g     F .text	000000d4 ble_hs_conn_addrs
20007034 g     O .bss	00000004 g_current_task
0000ae94 g     F .text	00000084 os_sanity_run
000261a0 g     F .text	0000000c ble_phy_set_rx_pwr_compensation
0001fd40 g     F .text	0000003c ble_ll_conn_timeout
200087e0 g     O .bss	00000004 g_ble_ll_cur_adv_sm
00019404 g     F .text	0000002a cbor_encoder_close_container
0000b4d0 g     F .text	0000000c os_arch_save_sr
0001165c g     F .text	00000010 ble_hs_misc_peer_addr_type_to_id
0000f7dc g     F .text	000000e6 ble_gatts_bonding_restored
00023180 g     F .text	00000028 ble_ll_resolv_list_clr
00017478 g     F .text	00000020 boot_write_magic
0000a9f4 g     F .text	00000014 os_mempool_init
00027584 g     F .text	00000028 config_pkg_init
00017c66 g     F .text	00000026 img_mgmt_state_any_pending
0001a178 g     F .text	00000084 spiflash_identify
0000b450 g     F .text	00000038 os_gettimeofday
20007044 g     O .bss	00000001 g_task_id
00016938 g     F .text	00000016 conf_parse_and_lookup
00020e9a g     F .text	0000002e ble_ll_conn_hci_set_chan_class
0001bd58 g     F .text	00000016 os_cputime_delay_ticks
20007360 g     O .bss	00000001 ble_hs_sync_state
000177e0 g     F .text	00000118 img_mgmt_read_info
0000d014 g     F .text	000000d0 ble_gap_adv_start
00014804 g     F .text	00000040 ble_att_clt_tx_notify
000168e4 g     F .text	00000020 conf_handler_lookup
0001d318 g     F .text	00000070 ble_ll_pdu_max_tx_octets_get
0000c5ae g     F .text	00000016 mgmt_streamer_write_at
00010cb4 g     F .text	00000010 ble_hs_hci_acl_tx
20008a0c g     O .bss	0000000c g_ble_ll_rnum_data
0001864c g     F .text	00000010 os_mgmt_register_group
000159f0 g     F .text	0000007c ble_att_svr_rx_read
0001bc2c g     F .text	00000016 get_le32
0001fa48 g     F .text	000002f6 ble_ll_init_rx_isr_end
0002180a g     F .text	0000001e ble_ll_ctrl_is_start_enc_rsp
00029a5c g       .text	00000000 __exidx_start
0001c190 g     F .text	0000011a strntoumax
0000d32c g     F .text	00000014 ble_gap_disc_active
0000af18 g     F .text	00000010 os_sanity_init
200087f0 g     O .bss	00000004 g_ble_ll_conn_cur_sm
00029784 g     O .text	0000001c g_smp_cbor_cfg
0000a204 g     F .text	000000a8 os_mbuf_append
0001711a g     F .text	0000000a mfg_read_tlv_mmr_ref
000147d4 g     F .text	00000004 ble_att_clt_tx_read
0000b670 g     F .text	00000014 os_set_env
000147f8 g     F .text	00000004 ble_att_clt_rx_prep_write
00019c44 g     F .text	00000014 hal_bsp_flash_dev
0001af90 g     F .text	00000010 nrf52_periph_create
000117b8 g     F .text	0000000c ble_hs_pvcy_our_irk
00028c40 g     O .text	00000008 MemFile_methods
20007028 g     O .bss	0000000c g_os_sanity_check_mu
0000fab4 g     F .text	0000001c ble_hs_process_rx_data_queue
00015fc0 g     F .text	00000050 ble_sm_alg_s1
20007588 g     O .bss	00000006 ble_hs_misc_null_addr
00016e0e g     F .text	0000000a flash_area_align
20008cf4 g     O .bss	00000008 g_ble_ll_sched_q
0000b2c4 g     F .text	00000060 os_task_info_get
00008178 g     F .text	0000003c _sbrk
000260ec g     F .text	00000010 ble_phy_encrypt_set_pkt_cntr
00019c30 g     F .text	00000014 cbor_value_calculate_string_length
0001415a g     F .text	0000000c ble_store_delete_cccd
000091fc g     F .text	00000008 disable_buffer
0001a7d8 g     F .text	000000b0 os_tick_idle
0001f68c g     F .text	00000108 ble_ll_conn_end
00009300 g     F .text	00000048 console_printf
0001175e g     F .text	00000032 ble_hs_pvcy_remove_entry
0000922c g     F .text	0000001e console_dump
000255c4 g     F .text	00000038 ble_ll_utils_calc_window_widening
0001c3f0 g     F .text	0000001c is_collector_node
00009296 g     F .text	00000008 console_blocking_mode
00016790 g     F .text	00000018 conf_ensure_loaded
000199a8 g     F .text	0000014a cbor_value_enter_container
00008164  w    F .text	00000002 I2S_IRQHandler
0000d14c g     F .text	0000000a ble_gap_adv_active
00008650 g     F .text	00000002 _init
0001e33e g     F .text	00000020 ble_ll_hci_set_adv_data
000148d4 g     F .text	0000004a ble_att_tx
0000f90c g     F .text	00000050 ble_gatts_count_cfg
0001a368 g     F .text	000000d8 hal_flash_erase
000257f4 g     F .text	00000018 ble_hw_whitelist_clear
00017390 g     F .text	00000006 boot_swap_info_off
0001e304 g     F .text	0000001a ble_ll_hci_adv_set_enable
0001145a g     F .text	00000032 ble_hs_id_copy_addr
0001e3ac g     F .text	00000044 ble_ll_adv_rx_pkt_in
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
0000e814 g     F .text	0000000a ble_gattc_notify
00027bb8 g     F .text	0000001a scfg_save_val
0000db9c g     F .text	00000038 ble_gap_event_listener_unregister
00011d36 g     F .text	000000b8 ble_l2cap_rx
0001c8f4 g     F .text	00000026 smp_rx_req
0001a888 g     F .text	000000a8 os_tick_init
00025d7c g     F .text	00000088 ble_phy_rxpdu_copy
00024ff8 g     F .text	00000100 ble_ll_sched_slave_new
0000d93a g     F .text	0000002c ble_gap_repeat_pairing_event
0001b8b8 g     F .text	0000001c sensor_mgr_lock
00026d5a g     F .text	00000040 ble_store_config_read
00011566 g     F .text	0000000a ble_hs_mbuf_acl_pkt
00014800 g     F .text	00000004 ble_att_clt_rx_exec_write
00017994 g     F .text	00000014 img_mgmt_dfu_pending
0001650c g     F .text	0000005c ble_hci_trans_buf_alloc
00012f6a g     F .text	0000000a ble_sm_gen_pair_rand
00008164  w    F .text	00000002 TIMER0_IRQHandler
00009b00 g     F .text	000000d0 os_init
000174fc g     F .text	00000098 boot_swap_type_multi
0000f460 g     F .text	00000148 ble_gatts_start
000080f8 g     F .text	0000005c Reset_Handler
00024aa4 g     F .text	00000008 ble_ll_scan_get_peer_rpa
00010b0c g     F .text	00000020 ble_hs_hci_set_buf_sz
0001bd8c g     F .text	00000016 os_cputime_ticks_to_usecs
0001cbbc g     F .text	0000000c oc_evq_set
0001cabc g     F .text	0000004c smp_ble_pkg_init
20007414 g     O .bss	00000002 ble_hs_hci_avail_pkts
0001ff28 g     F .text	00000248 ble_ll_conn_rx_isr_end
00018ee4 g     F .text	00000018 _copy
00013af6 g     F .text	000000a6 ble_sm_enc_initiate
20000506 g     O .bss	00000001 sysinit_active
00025910 g     F .text	00000014 ble_hw_whitelist_disable
000250f8 g     F .text	000000cc ble_ll_sched_adv_new
00025924 g     F .text	0000000c ble_hw_whitelist_match
00020dd4 g     F .text	00000042 ble_ll_conn_hci_rd_rem_ver_cmd
0000f618 g     F .text	00000056 ble_gatts_send_next_indicate
000176cc g     F .text	0000000c split_app_active_get
0001bbe0 g     F .text	00000008 put_le16
0000d808 g     F .text	0000002a ble_gap_unpair_oldest_peer
20007330 g     O .bss	00000002 ble_hs_max_services
000217ea g     F .text	00000020 ble_ll_ctrl_enc_allowed_pdu_tx
0000a15a g     F .text	0000000a os_mbuf_pool_init
000154b0 g     F .text	00000034 ble_att_svr_find_by_uuid
000193d8 g     F .text	0000000a cbor_encoder_create_array
0000b722 g     F .text	0000001e os_default_irq_asm
0000b160 g     F .text	0000000c os_sched_next_task
0000d426 g     F .text	00000086 ble_gap_conn_broken
0000af28 g     F .text	00000054 os_sched_insert
00009c94 g     F .text	00000080 os_callout_reset
00017124 g     F .text	00000040 mfg_init
000146ca g     F .text	0000002c ble_att_mtu
0002859c g     F .text	00000044 nrf52_clock_hfxo_release
00009f5c g     F .text	00000010 os_dev_reset
00014730 g     F .text	00000028 ble_att_clt_rx_error
00024544 g     F .text	0000001c ble_ll_scan_halt
00012248 g     F .text	00000038 ble_l2cap_sig_conn_broken
00024e88 g     F .text	00000170 ble_ll_sched_master_new
000285e0 g     F .text	00000004 hal_bsp_hw_id_len
00010880 g     F .text	0000007c ble_hs_conn_timer
0001164c g     F .text	00000010 ble_hs_misc_own_addr_type_to_id
0000fcc4 g     F .text	0000000c ble_hs_hw_error
00011194 g     F .text	00000028 ble_hs_hci_evt_process
0000ac70 g     F .text	00000014 os_mutex_init
000181d0 g     F .text	00000046 img_mgmt_impl_erase_slot
00008168 g     F .text	00000010 _sbrkInit
00023918 g     F .text	00000034 ble_ll_rfmgmt_enable_now
0000f5c8 g     F .text	00000050 ble_gatts_conn_init
0000c57c g     F .text	00000010 mgmt_streamer_alloc_rsp
000148b4 g     F .text	00000020 ble_att_cmd_get
200004dc g       .bssnz	00000000 __bssnz_end__
0001d030 g     F .text	00000028 ble_ll_is_our_devaddr
00016e7c g     F .text	00000088 flash_map_init
0002568c g     F .text	00000010 ble_ll_whitelist_match
0001615c g     F .text	0000000c ble_svc_dis_firmware_revision_set
0000bedc g     F .text	00000014 vprintf
00013f48 g     F .text	000000b2 ble_sm_lgcy_random_rx
0001c2f4 g     F .text	00000034 .hidden __popcountsi2
00009a6c g     F .text	0000000c os_started
00008164  w    F .text	00000002 TIMER1_IRQHandler
20000000 g       .bss	00000000 _ram_start
000143bc g     F .text	0000003c ble_uuid_cmp
20000498 g     O .data	00000020 reboot_conf_handler
200082f0 g     O .bss	00000004 g_smp_evq
000168b8 g     F .text	00000010 conf_unlock
00013808 g     F .text	00000010 ble_sm_enc_key_refresh_rx
00010ce8 g     F .text	00000048 ble_hs_hci_init
0000b0dc g     F .text	0000003c os_sched_os_timer_exp
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00022ba8 g     F .text	0000003c ble_ll_hci_cmd_rx
0000fa5c g     F .text	00000024 ble_hs_is_parent_task
00017be0 g     F .text	00000010 img_mgmt_register_group
00022e70 g     F .text	00000030 ble_ll_hci_ev_hw_err
00025680 g     F .text	0000000c ble_ll_whitelist_read_size
000233f0 g     F .text	00000034 ble_ll_resolv_peer_addr_rd
00027b74 g     F .text	00000044 scfg_save_setting
0001792e g     F .text	0000003c img_mgmt_find_by_hash
00019c04 g     F .text	0000002c cbor_value_advance
0000a390 g     F .text	00000054 os_mbuf_appendfrom
00008164  w    F .text	00000002 PWM2_IRQHandler
0000fca4 g     F .text	00000020 ble_hs_sched_reset
00021b70 g     F .text	00000036 ble_ll_ctrl_proc_stop
0000c4ec g     F .text	0000003c imgr_ver_str
000158d0 g     F .text	00000078 ble_att_svr_rx_find_type_value
00023600 g     F .text	00000068 ble_ll_resolv_rpa
20008758 g     O .bss	00000006 g_random_addr
0001c358 g     F .text	00000018 is_sensor_node
200004b8 g       .data	00000000 __data_end__
000283dc g     F .text	0000002c cbor_buf_writer
000112fa g     F .text	00000038 ble_hs_hci_util_data_hdr_strip
0000e7be g     F .text	00000056 ble_gattc_notify_custom
00008164  w    F .text	00000002 ECB_IRQHandler
00025448 g     F .text	00000010 ble_ll_sched_stop
0001c960 g     F .text	00000014 smp_ble_get_mtu
0001451c g     F .text	00000058 ble_uuid_flat
00020680 g     F .text	00000160 ble_ll_conn_comp_event_send
200092d8 g     O .bss	00000004 ble_store_config_num_peer_secs
00013ce4 g     F .text	00000020 ble_sm_create_chan
00013cb0 g     F .text	00000034 ble_sm_init
00026708 g     F .text	00000020 ble_phy_resolv_list_enable
00022bf0 g     F .text	00000058 ble_ll_hci_init
000157d2 g     F .text	00000094 ble_att_svr_rx_mtu
0001d104 g     F .text	0000004c ble_ll_rx_start
000153f4 g     F .text	0000000c ble_att_svr_prev_handle
000265ac g     F .text	00000030 ble_phy_tx_set_start_time
00014014 g     F .text	0000002c ble_store_read
20007078 g     O .bss	00000004 g_os_time
00014686 g     F .text	0000000a ble_att_set_peer_mtu
0001ac9c g     F .text	00000068 hal_spi_init
00023850 g     F .text	00000038 ble_ll_rfmgmt_reset
000146f8 g     F .text	00000028 ble_att_create_chan
0001aeec g     F .text	00000014 hal_watchdog_tickle
0000c58c g     F .text	00000012 mgmt_streamer_trim_front
200094e8 g       .bss	00000000 __bss_end__
0001f458 g     F .text	00000010 ble_ll_conn_wfr_timer_exp
0001cb64 g     F .text	00000028 oc_buffer_init
0000a164 g     F .text	00000032 os_mbuf_get
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0001166c g     F .text	00000014 ble_hs_misc_restore_irks
000142d0 g     F .text	00000066 ble_store_util_delete_peer
000258f4 g     F .text	0000001c ble_hw_whitelist_enable
000276a4 g     F .text	0000008c log_reboot_reason_str
0000cf5e g     F .text	00000026 ble_gap_rx_rd_rem_sup_feat_complete
000146b0 g     F .text	0000001a ble_att_truncate_to_mtu
000139ba g     F .text	00000010 ble_sm_peer_pair_rand
0000bfce g     F .text	00000436 .hidden _ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE
0001d388 g     F .text	00000150 ble_ll_init
0001057a g     F .text	00000034 ble_hs_conn_chan_insert
2000732c g     O .bss	00000002 ble_hs_max_attrs
20009250 g     O .bss	00000080 ble_store_config_cccds
00019d96 g     F .text	00000016 spiflash_device_ready
00025a4c g     F .text	00000038 ble_hw_resolv_list_rmv
0000abe4 g     F .text	00000010 os_msys_reset
00008164 g     F .text	00000002 Default_Handler
0000863c g     F .text	00000014 _start
00015ebc g     F .text	00000058 ble_att_svr_start
00025874 g     F .text	00000080 ble_hw_whitelist_rmv
00009206 g     F .text	00000014 console_printhex
0001e31e g     F .text	00000020 ble_ll_hci_set_scan_rsp_data
0001ceec g     F .text	00000018 ble_ll_addr_is_id
0001869e g     F .text	0000004a os_mgmt_impl_task_info
00026a1c g     F .text	00000084 ble_svc_ans_init
00017cf4 g     F .text	00000024 img_mgmt_state_confirm
200087e8 g     O .bss	00000004 g_ble_ll_conn_comp_ev
00018f80 g     F .text	0000008c base64_encode
0000b684 g     F .text	00000006 os_arch_init_task_stack
0000a2ac g     F .text	000000c0 os_mbuf_dup
200092d4 g     O .bss	00000004 ble_store_config_num_our_secs
0002186a g     F .text	0000001c ble_ll_ctrl_conn_param_reply
0000a078 g     F .text	00000022 os_eventq_run
00020be0 g     F .text	000000ac ble_ll_conn_hci_param_rr
0001bd7c g     F .text	00000010 os_cputime_usecs_to_ticks
0001bcb8 g     F .text	00000022 swap_in_place
000168a4 g     F .text	00000014 conf_lock
0000aa3e g     F .text	00000040 os_memblock_from
00029244 g     O .text	00000010 boot_img_magic
0001c69c g     F .text	00000034 temp_stub_get_raw_temperature
20008750 g     O .bss	00000006 g_dev_addr
00025534 g     F .text	00000052 ble_ll_utils_remapped_channel
000176f0 g     F .text	00000024 split_write_split
0000c68c g     F .text	00000016 mgmt_ntoh_hdr
0001d280 g     F .text	00000010 ble_ll_event_send
00024a40 g     F .text	00000058 ble_ll_scan_initiator_start
20007f4c g     O .bss	00000004 conf_save_dst
20009104 g     O .bss	0000010c g_nrf_encrypt_scratchpad
00025480 g     F .text	000000b4 ble_ll_utils_calc_access_addr
00013a70 g     F .text	00000086 ble_sm_pair_initiate
00012332 g     F .text	00000040 ble_l2cap_sig_cmd_get
00014280 g     F .text	00000030 ble_store_util_bonded_peers
000251c4 g     F .text	00000174 ble_ll_sched_adv_reschedule
00017bb4 g     F .text	00000014 img_mgmt_dfu_confirmed
20000524 g     O .bss	00000050 g_idle_task
0001a68a g     F .text	00000038 hal_gpio_init_out
200000ec g     O .data	00000004 sysinit_panic_cb
00025586 g     F .text	0000003e ble_ll_utils_calc_num_used_chans
0001b600 g     F .text	0000008c hal_timer_start_at
0001d268 g     F .text	0000000c ble_ll_state_set
00011680 g     F .text	00000014 ble_mqueue_init
0000c5c4 g     F .text	0000000e mgmt_streamer_init_reader
20007024 g     O .bss	00000004 g_os_sanity_check_list
00016488 g     F .text	0000002c ble_hci_trans_ll_evt_tx
000106b8 g     F .text	00000018 ble_hs_conn_find
000113c8 g     F .text	00000050 ble_hs_id_addr
0001c114 g     F .text	00000024 strncpy
0001b998 g     F .text	00000008 sensor_pkg_init
00014040 g     F .text	00000028 ble_store_delete
0000aa7e g     F .text	00000032 os_memblock_get
0000b054 g     F .text	00000088 os_sched_wakeup
00026ff4 g     F .text	00000060 ble_store_config_init
000248d0 g     F .text	00000080 ble_ll_scan_wfr_timer_exp
0000a0f6 g     F .text	00000026 os_mqueue_get
0001bda2 g     F .text	00000010 os_sem_init
0000fa50 g     F .text	0000000c ble_hs_evq_set
0000da9c g     F .text	00000024 ble_gap_preempt_no_lock
000162fc g     F .text	00000028 ble_svc_gap_device_name_set
0001c070 g     F .text	00000060 realloc
000171c2 g     F .text	00000030 mem_init_mbuf_pool
0001071c g     F .text	0000000c ble_hs_conn_first
000261f8 g     F .text	0000000c ble_phy_disable
00009930 g     F .text	00000098 os_default_irq
0001a090 g     F .text	0000000e spiflash_sector_erase
0001c934 g     F .text	0000002c smp_pkg_init
20008d9c g     O .bss	00000001 g_nrf_num_irks
00016e18 g     F .text	0000000a flash_area_erased_val
00020e16 g     F .text	00000030 ble_ll_conn_hci_rd_rssi
20007228 g     O .bss	00000001 ble_hs_enabled_state
0001f06c g     F .text	00000024 ble_ll_conn_find_active_conn
0000cfee g     F .text	00000026 ble_gap_timer
00010bfc g     F .text	000000b8 ble_hs_hci_acl_tx_now
00013c88 g     F .text	00000026 ble_sm_connection_broken
20007038 g     O .bss	00000004 g_os_last_ctx_sw_time
200087f4 g     O .bss	00000008 g_ble_ll_conn_free_list
0001bdb4 g     F .text	00000064 os_sem_release
00025424 g     F .text	00000024 ble_ll_sched_next_time
00017c8c g     F .text	0000001e img_mgmt_slot_in_use
0001d290 g     F .text	0000000a ble_ll_read_supp_states
0000b764 g     F .text	00000048 memcmp
0000b538 g     F .text	00000018 os_arch_init
0000c5f0 g     F .text	0000001c mgmt_register_group
00026184 g     F .text	0000001c ble_phy_txpwr_set
0001bc42 g     F .text	00000076 get_le64
00016b8c g     F .text	00000054 conf_commit
0000935c g     F .text	0000000c sysinit_start
0001b42c g     F .text	00000170 hal_timer_config
00009ee0 g     F .text	00000044 os_dev_open
00026edc g     F .text	0000002a ble_store_config_write
0000b878 g     F .text	0000002c strncat
00020290 g     F .text	000001d0 ble_ll_conn_slave_start
0001e430 g     F .text	00000028 ble_ll_adv_can_chg_whitelist
0000d8ca g     F .text	0000004a ble_gap_enc_event
000176d8 g     F .text	00000018 split_mode_set
0001f040 g     F .text	00000012 ble_ll_conn_is_lru
0000a8cc g     F .text	000000ae os_mbuf_pack_chains
0001ca70 g     F .text	0000004c smp_ble_gatt_svr_init
00010b50 g     F .text	0000007c ble_hs_hci_cmd_tx
0000b838 g     F .text	00000014 srand48
0002569c g     F .text	00000060 ble_ll_whitelist_add
0001f494 g     F .text	0000001a ble_ll_conn_auth_pyld_timer_cb
0001be18 g     F .text	000000b8 os_sem_pend
0001aedc g     F .text	00000010 hal_watchdog_enable
000183e0 g     F .text	00000014 img_mgmt_impl_log_upload_done
0001e458 g     F .text	0000002c ble_ll_adv_send_conn_comp_ev
00011b26 g     F .text	00000054 ble_hs_startup_go
0000fcd0 g     F .text	00000080 ble_hs_start
0001e1c0 g     F .text	00000034 ble_ll_adv_halt
0001bd3e g     F .text	00000008 os_cputime_timer_start
0001e034 g     F .text	00000024 ble_ll_adv_chk_rpa_timeout
000217ce g     F .text	0000001c ble_ll_ctrl_enc_allowed_pdu_rx
000260fc g     F .text	0000002c ble_phy_encrypt_disable
00020f3a g     F .text	00000060 ble_ll_conn_hci_le_start_encrypt
0001c328 g     F .text	00000030 init_sensor_coap
0000a11c g     F .text	0000003e os_mqueue_put
0000fc5c g     F .text	0000000a ble_hs_timer_resched
00022aaa g     F .text	00000028 ble_ll_hci_send_noop
0000ab40 g     F .text	0000004c os_msys_register
00024ab4 g     F .text	00000014 ble_ll_scan_set_peer_rpa
20000678 g     O .bss	00000004 g_os_idle_ctr
00016d68 g     F .text	00000034 flash_area_open
00021074 g     F .text	0000006c ble_ll_conn_hci_wr_auth_pyld_tmo
0001900c g     F .text	0000011c base64_decoder_go
0001c184 g     F .text	0000000c strtoull
0000a4e2 g     F .text	0000007a os_mbuf_cmpf
200002d4 g     O .data	0000004c spiflash_dev
00008164  w    F .text	00000002 SAADC_IRQHandler
00017456 g     F .text	00000020 boot_read_swap_state_by_id
00021780 g     F .text	00000012 ble_ll_calc_session_key
000164e0 g     F .text	0000002c ble_hci_trans_ll_acl_tx
000143f8 g     F .text	000000ac ble_uuid_to_str
0000ed8c g     F .text	00000092 ble_gatts_clt_cfg_access
00017980 g     F .text	00000014 img_mgmt_dfu_started
000266e8 g     F .text	0000000c ble_phy_rx_started
0000b7fe g     F .text	00000038 memset
00008020 g       .text	000000d8 __isr_vector
20008008 g     O .bss	00000030 g_img_mgmt_state
00015bea g     F .text	0000006c ble_att_svr_rx_write
00008f48 g     F .text	00000070 main
0001ad4c g     F .text	0000002c hal_spi_set_txrx_cb
00015e50 g     F .text	0000006c ble_att_svr_rx_indicate
00020f9a g     F .text	0000005c ble_ll_conn_hci_le_ltk_reply
000142b0 g     F .text	00000020 ble_store_util_delete_all
00025458 g     F .text	00000028 ble_ll_sched_init
00022fdc g     F .text	00000024 ble_ll_rand_init
200082f8 g     O .bss	00000018 g_smp_ble_mq
0000924c g     F .text	00000028 console_out_nolock
00022d90 g     F .text	00000050 ble_ll_hci_ev_ltk_req
0001925c g     F .text	0000006a cbor_encode_uint
00023eb0 g     F .text	0000000a ble_ll_scan_timer_cb
00019cd8 g     F .text	00000080 spiflash_read_jedec_id
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 WDT_IRQHandler
0001ccb8 g     F .text	00000050 ble_ll_task
00011cca g     F .text	0000000c ble_l2cap_get_conn_handle
0000bfa4 g     F .text	00000010 rust_sysinit
000205c4 g     F .text	00000056 ble_ll_conn_hci_chk_conn_params
20008700 g     O .bss	00000050 g_ble_ll_task
0001cbc8 g     F .text	00000020 oc_send_buffer
00022e2e g     F .text	00000042 ble_ll_hci_ev_rd_rem_ver
00009368 g     F .text	0000000c sysinit_end
0000d3c2 g     F .text	00000026 ble_gap_terminate
000275ae g     F .text	00000002 modlog_init
0000b68a g     F .text	00000046 SVC_Handler
0000dbd4 g     F .text	00000068 ble_gap_init
00022ad4 g     F .text	00000058 ble_ll_hci_is_le_event_enabled
00013ee0 g     F .text	00000068 ble_sm_lgcy_random_exec
0000d340 g     F .text	00000014 ble_gap_conn_active
00022ea0 g     F .text	00000026 ble_ll_hci_ev_databuf_overflow
00027234 g     F .text	00000034 ble_store_config_conf_init
0002298a g     F .text	00000004 ble_ll_hci_adv_mode_ext
00009f7c g     F .text	0000000a os_eventq_inited
00023328 g     F .text	00000098 ble_ll_resolv_list_rmv
00022c90 g     F .text	0000004a ble_ll_hci_ev_rem_conn_parm_req
000186e8 g     F .text	0000005c os_mgmt_impl_reset
0000c65c g     F .text	00000030 mgmt_ctxt_init
2000846c g     O .bss	00000020 oc_transports
00020ab0 g     F .text	00000060 ble_ll_conn_hci_read_rem_features
0001a2a0 g     F .text	00000054 hal_flash_read
000114f4 g     F .text	00000018 ble_hs_id_reset
0000a0dc g     F .text	00000008 os_eventq_dflt_get
00028e78 g     O .text	00000010 ble_hs_pvcy_default_irk
0001b59c g     F .text	00000038 hal_timer_read
2000809c g     O .bss	0000001c nrf52_hal_timer5
0001cc64 g     F .text	00000002 oc_register_gatt
00009ff6 g     F .text	00000082 os_eventq_get
00016de8 g     F .text	00000026 flash_area_erase
20008074 g     O .bss	00000028 nrf52_hal_spi0
0000b488 g     F .text	00000026 os_time_ms_to_ticks
20000504 g     O .bss	00000001 g_silence_console
00024a98 g     F .text	0000000c ble_ll_scan_enabled
00009d70 g     F .text	0000003c os_callout_wakeup_ticks
0000cf5c g     F .text	00000002 ble_gap_rx_adv_report
00011c98 g     F .text	00000032 ble_l2cap_prepend_hdr
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
0001b9a0 g     F .text	00000018 sensor_lock
0001e51c g     F .text	0000001c ble_ll_adv_init
00016610 g     F .text	000000d4 ble_hci_ram_init
0001157a g     F .text	0000000a ble_hs_mbuf_att_pkt
20007f64 g     O .bss	00000004 flash_map_entries
0000a43e g     F .text	000000a4 os_mbuf_adj
00024ad0 g     F .text	00000010 ble_ll_scan_whitelist_enabled
0000d504 g     F .text	00000036 ble_gap_reset_state
0000c6a2 g     F .text	00000016 mgmt_hton_hdr
200094c2 g     O .bss	00000002 reboot_cnt
000168c8 g     F .text	0000001c conf_register
00008020 g       .imghdr	00000000 __text
20008038 g     O .bss	00000004 img_mgmt_dfu_callbacks_fn
000170e4 g     F .text	00000012 mfg_seek_next
00024560 g     F .text	00000080 ble_ll_scan_sm_stop
0000fd6e g     F .text	00000008 ble_hs_tx_data
0000b84c g     F .text	0000001c strcmp
00016e48 g     F .text	0000000e flash_area_read_is_empty
000137f4 g     F .text	00000014 ble_sm_enc_change_rx
0000afac g     F .text	0000000c os_sched_get_current_task
000193e4 g     F .text	00000020 cbor_encoder_create_map
00009278 g     F .text	0000001e console_write
0001e4b8 g     F .text	00000014 ble_ll_adv_wfr_timer_exp
20008a18 g     O .bss	00000028 g_ble_ll_resolv_data
0000d898 g     F .text	00000032 ble_gap_passkey_event
00011c64 g     F .text	00000008 ble_l2cap_is_mtu_req_sent
0000b754 g     F .text	00000010 lrand48
000285e4 g     F .text	00000034 hal_bsp_hw_id
00025f64 g     F .text	00000134 ble_phy_init
000147cc g     F .text	00000004 ble_att_clt_tx_read_type
00008468 g     F .text	000001d4 SystemInit
0001bd4e g     F .text	0000000a os_cputime_get32
0001cf20 g     F .text	00000016 ble_ll_is_valid_public_addr
0001436a g     F .text	00000052 ble_uuid_init_from_buf
00008164  w    F .text	00000002 RNG_IRQHandler
000135a2 g     F .text	000000e4 ble_sm_process_result
0001150c g     F .text	00000024 ble_hs_log_mbuf
0000a09a g     F .text	00000040 os_eventq_remove
000256fc g     F .text	0000003c ble_ll_whitelist_rmv
200084d8 g     O .bss	000000a8 g_ble_ll_data
00027cf8 g     F .text	00000002 _fini
00026704 g     F .text	00000004 ble_phy_max_data_pdu_pyld
000106d0 g     F .text	00000018 ble_hs_conn_insert
000167a8 g     F .text	00000068 conf_save_one
0001218a g     F .text	0000009c ble_l2cap_sig_update
0001694e g     F .text	0000015e conf_value_from_str
00016324 g     F .text	00000074 ble_svc_gap_init
000147f0 g     F .text	00000004 ble_att_clt_rx_write
0001bbe8 g     F .text	00000014 put_le32
0001796c g     F .text	00000014 img_mgmt_dfu_stopped
0001b8e4 g     F .text	0000000c sensor_mgr_evq_get
00024ce4 g     F .text	000001a4 ble_ll_sched_conn_reschedule
0000f8c4 g     F .text	00000048 ble_gatts_add_svcs
00018368 g     F .text	00000038 img_mgmt_impl_swap_type
0001c0d0 g     F .text	00000020 sprintf
0001d236 g     F .text	00000030 ble_ll_tx_mbuf_pducb
200087ec g     O .bss	00000004 g_ble_ll_conn_create_sm
00010d74 g     F .text	00000038 ble_hs_hci_cmd_send_buf
00014884 g     F .text	0000000a ble_att_clt_rx_indicate
000147c4 g     F .text	00000004 ble_att_clt_tx_find_type_value
000147e0 g     F .text	00000004 ble_att_clt_rx_read_blob
0000b16c g     F .text	00000022 os_sched
000147c8 g     F .text	00000004 ble_att_clt_rx_find_type_value
00010564 g     F .text	00000016 ble_hs_conn_chan_find_by_scid
0001cbe8 g     F .text	0000004c oc_send_multicast_message
200001f8 g     O .data	0000001c ble_svc_dis_data
0001a290 g     F .text	00000010 hal_flash_erased_val
0002673c g     F .text	00000008 ble_phy_rfclk_disable
000147d0 g     F .text	00000004 ble_att_clt_rx_read_type
000183f4 g     F .text	00000014 img_mgmt_impl_log_pending
00011584 g     F .text	0000002e ble_hs_mbuf_to_flat
00020216 g     F .text	00000034 ble_ll_conn_tx_pkt_in
200092d0 g     O .bss	00000004 ble_store_config_num_cccds
20008760 g     O .bss	00000080 g_ble_ll_adv_sm
0000ad44 g     F .text	000000e0 os_mutex_pend
00000000 g       .svc_table	00000000 SVC_Table
00011570 g     F .text	0000000a ble_hs_mbuf_l2cap_pkt
00008164  w    F .text	00000002 RTC2_IRQHandler
00023578 g     F .text	00000028 ble_ll_resolv_set_peer_rpa
0001ad04 g     F .text	00000048 hal_spi_tx_val
00012fec g     F .text	00000040 ble_sm_proc_find
00023668 g     F .text	0000000c ble_ll_resolv_enabled
00019eb2 g     F .text	00000034 spiflash_write_enable
20010000 g       .bss	00000000 __StackTop
00014690 g     F .text	00000020 ble_att_chan_mtu
000193c8 g     F .text	00000010 cbor_encode_text_string
0001126a g     F .text	00000028 ble_hs_hci_util_read_adv_tx_pwr
0001b9b8 g     F .text	0000000a sensor_unlock
00027ddc g     F .text	00000234 cbor_read_array
20008d5c g     O .bss	00000040 g_nrf_irk_list
00022de0 g     F .text	0000004e ble_ll_hci_ev_rd_rem_used_feat
000275ac g     F .text	00000002 config_pkg_init_stage2
0000a0e4 g     F .text	00000012 os_mqueue_init
00018f04 g     F .text	00000012 _double_byte
000140d6 g     F .text	0000000c ble_store_write_our_sec
0002220e g     F .text	000000cc ble_ll_ctrl_tx_done
00011626 g     F .text	00000026 ble_hs_misc_conn_chan_find_reqd
000091c0 g     F .text	0000003c console_flush
00008164  w    F .text	00000002 PWM0_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00021a1e g     F .text	00000018 ble_ll_ctrl_is_terminate_ind
0001abb0 g     F .text	00000038 hal_spi_config
0001c138 g     F .text	00000020 strsep
00022c48 g     F .text	00000048 ble_ll_hci_ev_datalen_chg
00017bf0 g     F .text	00000076 img_mgmt_state_flags
00015e12 g     F .text	0000003e ble_att_svr_rx_notify
00014720 g     F .text	00000010 ble_att_init
0001561a g     F .text	00000016 ble_att_svr_ticks_until_tmo
0001148c g     F .text	00000020 ble_hs_id_use_addr
0001d06c g     F .text	0000003c ble_ll_wfr_timer_exp
00010534 g     F .text	00000030 ble_hs_conn_can_alloc
000104ec g     F .text	0000002c ble_hs_atomic_conn_flags
000162f4 g     F .text	00000008 ble_svc_gap_device_name
000116ba g     F .text	0000003e ble_mqueue_put
000112d4 g     F .text	00000026 ble_hs_hci_util_set_random_addr
00019128 g     F .text	0000001e base64_decode
0000d0e4 g     F .text	0000003e ble_gap_adv_set_data
00023888 g     F .text	00000028 ble_ll_rfmgmt_scan_changed
0002580c g     F .text	00000068 ble_hw_whitelist_add
00010934 g     F .text	00000004 ble_hs_flow_startup
000122bc g     F .text	00000034 ble_l2cap_sig_init
20008198 g     O .bss	00000020 st_up_osco
0001fd7c g     F .text	00000064 ble_ll_conn_rx_isr_start
00009d14 g     F .text	0000005c os_callout_tick
000108fc g     F .text	00000034 ble_hs_conn_init
000291fc g     O .text	00000048 sysflash_map_dflt
0000dac0 g     F .text	00000018 ble_gap_preempt
000080f8 g       .text	00000000 __isr_vector_end
00009bd0 g     F .text	00000022 os_start
0001cfb4 g     F .text	00000028 ble_ll_is_valid_own_addr_type
000123a8 g     F .text	0000001e ble_l2cap_sig_reject_invalid_cid_tx
000221c0 g     F .text	0000004e ble_ll_ctrl_reject_ind_send
0001ced4 g     F .text	00000018 ble_ll_is_rpa
0001bcda g     F .text	0000001c swap_buf
0000d642 g     F .text	00000098 ble_gap_rx_param_req
00021828 g     F .text	00000042 ble_ll_ctrl_start_enc_send
0001d29c g     F .text	0000000c ble_ll_read_supp_features
0001f514 g     F .text	00000104 ble_ll_conn_sm_new
0001e360 g     F .text	0000004c ble_ll_adv_rx_isr_end
00020cf4 g     F .text	00000048 ble_ll_conn_create_cancel
00020b10 g     F .text	000000d0 ble_ll_conn_hci_update
00022ec8 g     F .text	00000050 ble_ll_rand_sample
000140e2 g     F .text	0000000e ble_store_read_peer_sec
00008164  w    F .text	00000002 RTC1_IRQHandler
00018efc g     F .text	00000008 _set
0001759e g     F .text	00000092 boot_set_pending
0001abe8 g     F .text	0000004c hal_spi_enable
0000b1d4 g     F .text	0000000a os_task_stacktop_get
00011292 g     F .text	00000042 ble_hs_hci_util_rand
0001bd6e g     F .text	0000000c os_cputime_delay_usecs
0001d310 g     F .text	00000006 ble_ll_pdu_tx_time_get
0001bd02 g     F .text	0000003c os_cputime_timer_init
00012324 g     F .text	0000000e ble_l2cap_sig_hdr_parse
0001570a g     F .text	00000030 ble_att_svr_tx_error_rsp
0001f0ac g     F .text	0000001c ble_ll_conn_calc_dci
0001ba38 g     F .text	0000002e sensor_mgr_register
0000c5e0 g     F .text	00000010 mgmt_streamer_free_buf
00016810 g     F .text	00000014 conf_store_init
00025740 g     F .text	00000008 ble_ll_whitelist_disable
0001d058 g     F .text	00000014 ble_ll_get_our_devaddr
00018216 g     F .text	00000088 img_mgmt_impl_write_pending
000118b0 g     F .text	00000084 ble_hs_pvcy_set_our_irk
00024964 g     F .text	0000009c ble_ll_scan_set_scan_params
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
000266dc g     F .text	0000000c ble_phy_access_addr_get
0000d53c g     F .text	000000b4 ble_gap_rx_update_complete
0000a6aa g     F .text	00000046 os_mbuf_concat
000140f0 g     F .text	00000050 ble_store_write_peer_sec
000247b8 g     F .text	00000060 ble_ll_scan_chk_resume
0001c91c g     F .text	00000018 smp_transport_init
00019e1c g     F .text	00000016 spiflash_wait_ready
0001a0b6 g     F .text	00000010 spiflash_block_64k_erase
0001c550 g     F .text	0000006c temp_stub_create
00013e44 g     F .text	0000009c ble_sm_lgcy_confirm_exec
00017164 g     F .text	00000010 mfg_open
20000140 g     O .data	00000008 g_os_run_list
00023818 g     F .text	00000038 ble_ll_rfmgmt_init
00027478 g     F .text	0000010a smp_process_request_packet
000098b8 g     F .text	00000034 NVIC_Relocate
0000fa94 g     F .text	00000010 ble_hs_unlock_nested
0001cc66 g     F .text	00000002 oc_register_ip4
00019252 g     F .text	0000000a cbor_encoder_init
0001723a g     F .text	00000090 sysinit_app
0001b8d4 g     F .text	00000010 sensor_mgr_unlock
00011c20 g     F .text	00000028 ble_l2cap_chan_alloc
000147bc g     F .text	00000004 ble_att_clt_tx_find_info
2000707c g     O .bss	00000004 os_flags
0002841c g     F .text	00000006 cbor_buf_writer_buffer_size
0001829e g     F .text	00000034 img_mgmt_impl_write_confirmed
0001cb8c g     F .text	00000030 oc_ri_mem_init
0000b4dc g     F .text	00000006 os_arch_restore_sr
20008068 g     O .bss	0000000c g_hal_os_tick
00011e2c g     F .text	0000003c ble_l2cap_init
0001c84c g     F .text	00000044 smp_tx_rsp
00024ae0 g     F .text	00000048 ble_ll_scan_reset
0001ce58 g     F .text	00000056 ble_ll_rxpdu_alloc
0002298e g     F .text	00000024 ble_ll_hci_event_send
000279d8 g     F .text	00000070 log_reboot_pkg_init
0001e4b2 g     F .text	00000004 ble_ll_adv_get_peer_rpa
000163dc g     F .text	0000002e ble_hs_util_ensure_addr
2000fe50 g       *ABS*	000001b0 __StackLimit
00016e22 g     F .text	00000026 flash_area_is_empty
200026d0 g     O .bss	00000004 g_os_started
000264e0 g     F .text	00000068 ble_phy_rx
00009f24 g     F .text	00000036 os_dev_close
0000d158 g     F .text	000001b0 ble_gap_rx_conn_complete
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00024a00 g     F .text	00000020 ble_ll_hci_scan_set_enable
00016568 g     F .text	000000a4 ble_hci_trans_buf_free
00011dee g     F .text	0000003e ble_l2cap_tx
0001640c g     F .text	00000028 ble_hci_trans_cfg_hs
00008164  w    F .text	00000002 NFCT_IRQHandler
00022be4 g     F .text	0000000a ble_ll_hci_acl_rx
20008d58 g     O .bss	00000004 g_ble_rng_isr_cb
20008818 g     O .bss	000001a0 g_ble_ll_conn_sm
00019af2 g     F .text	00000050 cbor_value_leave_container
0000d832 g     F .text	00000066 ble_gap_unpair_oldest_except
0001cc70 g     F .text	00000028 oc_rep_init
0001bbfc g     F .text	00000026 put_le64
000271c0 g     F .text	0000001c ble_store_config_persist_our_secs
0001ceae g     F .text	00000010 ble_ll_chk_txrx_octets
0001414e g     F .text	0000000c ble_store_write_cccd
00018308 g     F .text	00000032 img_mgmt_impl_write_image_data
00008458 g     F .text	00000010 SystemCoreClockUpdate
00018800 g     F .text	000006e4 tc_aes_encrypt
200090e0 g     O .bss	00000021 g_nrf_ccm_data
0000a1e0 g     F .text	00000024 os_mbuf_free_chain
00026fc8 g     F .text	0000002a ble_store_config_delete
00017f4c g     F .text	0000005a img_mgmt_ver_str
0001c612 g     F .text	0000000e temp_stub_default_cfg
0000fad8 g     F .text	0000003a ble_hs_wakeup_tx
0001f468 g     F .text	00000002 ble_ll_conn_reset_pending_aux_conn_rsp
0000ac3c g     F .text	00000034 os_msys_init
00010698 g     F .text	00000020 ble_hs_conn_remove
00015400 g     F .text	00000018 ble_att_svr_find_by_handle
0000a36c g     F .text	00000024 os_mbuf_off
0001d150 g     F .text	000000e6 ble_ll_rx_end
00010b2c g     F .text	00000024 ble_hs_hci_add_avail_pkts
000096c0 g     F .text	000000a4 start_ble
0000b3d4 g     F .text	0000000c os_time_get
00016434 g     F .text	00000028 ble_hci_trans_cfg_ll
0001ad78 g     F .text	000000ac hal_spi_txrx
0000921c g     F .text	00000010 console_printint
000140c8 g     F .text	0000000e ble_store_read_our_sec
00015cac g     F .text	000000b2 ble_att_svr_rx_prep_write
0001b68c g     F .text	00000064 hal_timer_stop
200080b8 g     O .bss	00000018 sensor_base_ts
000234e4 g     F .text	0000000c ble_ll_resolv_get_rpa_tmo
0001b794 g     F .text	0000002e sensor_mgr_match_bytype
000234f0 g     F .text	00000086 ble_ll_resolv_get_priv_addr
000238e4 g     F .text	00000034 ble_ll_rfmgmt_release
000147f4 g     F .text	00000004 ble_att_clt_tx_prep_write
0000a196 g     F .text	00000036 os_mbuf_get_pkthdr
200092e0 g     O .bss	000000f0 ble_store_config_our_secs
00016aac g     F .text	000000ac conf_str_from_value
00026734 g     F .text	00000008 ble_phy_rfclk_enable
000284cc g     F .text	00000058 cbor_mbuf_reader_init
00015a6c g     F .text	00000080 ble_att_svr_rx_read_blob
2000732e g     O .bss	00000002 ble_hs_max_client_configs
0000f5a8 g     F .text	00000020 ble_gatts_conn_can_alloc
00027c74 g     F .text	00000070 ull_to_s
00016168 g     F .text	00000074 ble_svc_dis_init
00016b58 g     F .text	00000034 conf_set_value
00025738 g     F .text	00000008 ble_ll_whitelist_enable
0000fa80 g     F .text	00000014 ble_hs_lock_nested
000104b2 g     F .text	00000010 ble_hs_adv_set_fields
0002984c g     O .text	0000002d g_ble_ll_supp_cmds
0000b1e0 g     F .text	000000e4 os_task_init
000081fc g     F .text	0000004c hal_system_clock_start
00014184 g     F .text	0000002a ble_store_key_from_value_sec
0000815a  w    F .text	00000002 BusFault_Handler
00011bd0 g     F .text	0000001c ble_hs_stop_init
00012f74 g     F .text	00000078 ble_sm_ia_ra
0000fc68 g     F .text	0000003c ble_hs_enqueue_hci_event
00022d1e g     F .text	00000072 ble_ll_hci_ev_encrypt_chg
0000b868 g     F .text	00000010 strlen
00009e54 g     F .text	00000040 os_dev_create
00019d58 g     F .text	0000003e spiflash_read_status
000105ae g     F .text	0000002c ble_hs_conn_delete_chan
0000aab0 g     F .text	0000001e os_memblock_put_from_cb
00026728 g     F .text	0000000c ble_phy_resolv_list_disable
200089ec g     O .bss	00000020 g_ble_ll_rnum_buf
00009f6c g     F .text	00000010 os_eventq_init
000147e4 g     F .text	00000004 ble_att_clt_rx_read_mult
0000b3e0 g     F .text	00000048 os_time_advance
00021042 g     F .text	00000032 ble_ll_conn_hci_rd_auth_pyld_tmo
0001f054 g     F .text	00000018 ble_ll_conn_get_ce_end_time
0000b190 g     F .text	0000002c os_sched_resort
20008000 g     O .bss	00000004 boot_current_slot
0001457a g     F .text	00000024 ble_uuid_to_mbuf
0000cf20 g     F .text	0000002a ble_gap_conn_find
0000a85c g     F .text	00000018 os_mbuf_prepend_pullup
00014676 g     F .text	0000000e ble_att_conn_chan_find
0001a258 g     F .text	00000028 hal_flash_init
0001bc22 g     F .text	0000000a get_le16
0001f8c0 g     F .text	00000030 ble_ll_conn_connect_ind_send
0001c0f0 g     F .text	00000014 strchr
00008164  w    F .text	00000002 MWU_IRQHandler
0000cfae g     F .text	00000040 ble_gap_rx_phy_update_complete
00020460 g     F .text	000000b8 ble_ll_conn_module_reset
0000c60c g     F .text	00000016 mgmt_find_handler
00016010 g     F .text	000000e6 ble_sm_alg_c1
00008158  w    F .text	00000002 MemoryManagement_Handler
0000dad8 g     F .text	000000c4 ble_gap_preempt_done
0001e2f8 g     F .text	0000000c ble_ll_adv_read_txpwr
00013d04 g     F .text	00000034 ble_sm_cmd_get
00014758 g     F .text	00000064 ble_att_clt_rx_mtu
00010cdc g     F .text	0000000c ble_hs_hci_get_hci_version
000164b4 g     F .text	0000002c ble_hci_trans_hs_acl_tx
0000fb14 g     F .text	00000014 ble_hs_is_enabled
0001b3b4 g     F .text	00000010 nrf52_timer5_irq_handler
00020170 g     F .text	000000a6 ble_ll_conn_enqueue_pkt
0001e1a4 g     F .text	0000001c ble_ll_adv_event_rmvd_from_sched
00011530 g     F .text	0000000c ble_hs_log_flat_buf
00017630 g     F .text	00000054 boot_set_confirmed
00021b00 g     F .text	00000070 ble_ll_ctrl_chk_proc_start
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0001ba66 g     F .text	0000001e sensor_init
00012372 g     F .text	00000036 ble_l2cap_sig_reject_tx
00025a88 g     F .text	00000028 ble_hw_resolv_list_match
0001a4d2 g     F .text	00000032 hal_flash_isempty_no_buf
00015c56 g     F .text	00000040 ble_att_svr_rx_write_no_rsp
0001cc6e g     F .text	00000002 oc_register_tcp4
000153a4 g     F .text	00000050 ble_att_svr_register
00009e94 g     F .text	0000002c os_dev_initialize_all
00011694 g     F .text	00000026 ble_mqueue_get
000238b0 g     F .text	00000034 ble_ll_rfmgmt_sched_changed
00020518 g     F .text	00000054 ble_ll_conn_module_init
0000d7bc g     F .text	0000004c ble_gap_unpair
000253b0 g     F .text	00000074 ble_ll_sched_rmv_elem
000115f6 g     F .text	00000030 ble_hs_misc_conn_chan_find
0000e81e g     F .text	0000000c ble_gatts_indicate_fail_notconn
00010518 g     F .text	0000001c ble_hs_atomic_first_conn_handle
0000c41c g     F .text	00000046 imgmgr_find_best_area_id
00025d78 g     F .text	00000004 ble_phy_get_cur_phy
20000148 g     O .data	00000008 g_os_sleep_list
0000bef0 g     F .text	00000058 jrand48
00011790 g     F .text	00000028 ble_hs_pvcy_ensure_started
00021e44 g     F .text	0000037c ble_ll_ctrl_rx_pdu
00019c58 g     F .text	0000000c hal_bsp_init
0000e930 g     F .text	0000000c ble_gattc_connection_broken
00009bf4 g     F .text	00000048 os_pkg_init
000261ac g     F .text	0000004c ble_phy_setchan
200087e4 g     O .bss	00000004 g_ble_ll_conn_active_list
00020814 g     F .text	000000ec ble_ll_conn_num_comp_pkts_event_send
0001ac34 g     F .text	00000068 hal_spi_disable
00018408 g     F .text	00000014 img_mgmt_impl_log_confirm
00022fc0 g     F .text	0000001c ble_ll_rand_start
0000d4ac g     F .text	00000058 ble_gap_rx_disconn_complete
00016878 g     F .text	0000002c conf_init
0000ae60 g     F .text	00000010 os_sanity_check_init
000236a8 g     F .text	0000001c ble_ll_resolv_list_reset
00025654 g     F .text	0000002c ble_ll_whitelist_clear
00010624 g     F .text	00000074 ble_hs_conn_alloc
00010bcc g     F .text	00000030 ble_hs_hci_rx_evt
0001a0a6 g     F .text	00000010 spiflash_block_32k_erase
0001f8f0 g     F .text	0000002c ble_ll_conn_event_halt
200082f4 g     O .bss	00000002 g_ble_smp_attr_handle
0000be58 g     F .text	00000008 vfprintf
0001c2aa g     F .text	00000034 strpbrk
0001cc6c g     F .text	00000002 oc_register_serial
000235cc g     F .text	00000034 ble_ll_resolv_gen_rpa
20002680 g     O .bss	00000050 g_os_main_task
0001c044 g     F .text	0000002c free
00017498 g     F .text	0000000e boot_write_image_ok
0001cc6a g     F .text	00000002 oc_register_lora
0001c754 g     F .text	00000030 temp_stub_config



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0000b68b 	.word	0x0000b68b
	...
    8058:	0000b6d1 	.word	0x0000b6d1
    805c:	0000b717 	.word	0x0000b717
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f844 	bl	81b4 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	200004e0 	.word	0x200004e0
    ldr     r3, =__bss_end__
    8134:	200094e8 	.word	0x200094e8
    ldr    r1, =__etext
    8138:	00029a74 	.word	0x00029a74
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	200004b8 	.word	0x200004b8
    LDR     R0, =__HeapBase
    8144:	200094e8 	.word	0x200094e8
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	00008469 	.word	0x00008469
    LDR     R0, =_start
    8150:	0000863d 	.word	0x0000863d

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <_sbrk>:
void *
_sbrk(int incr)
{
    void *prev_brk;

    if (incr < 0) {
    8178:	1e03      	subs	r3, r0, #0
    817a:	db09      	blt.n	8190 <_sbrk+0x18>
            prev_brk = brk;
            brk -= incr;
        }
    } else {
        /* Allocating memory from the heap. */
        if (sbrkLimit - brk >= incr) {
    817c:	4a0c      	ldr	r2, [pc, #48]	; (81b0 <_sbrk+0x38>)
    817e:	6890      	ldr	r0, [r2, #8]
    8180:	6852      	ldr	r2, [r2, #4]
    8182:	1a12      	subs	r2, r2, r0
    8184:	429a      	cmp	r2, r3
    8186:	db0f      	blt.n	81a8 <_sbrk+0x30>
            prev_brk = brk;
            brk += incr;
    8188:	4403      	add	r3, r0
    818a:	4a09      	ldr	r2, [pc, #36]	; (81b0 <_sbrk+0x38>)
    818c:	6093      	str	r3, [r2, #8]
    818e:	4770      	bx	lr
        if (brk - incr < sbrkBase) {
    8190:	4a07      	ldr	r2, [pc, #28]	; (81b0 <_sbrk+0x38>)
    8192:	6890      	ldr	r0, [r2, #8]
    8194:	4403      	add	r3, r0
    8196:	6812      	ldr	r2, [r2, #0]
    8198:	4293      	cmp	r3, r2
    819a:	d302      	bcc.n	81a2 <_sbrk+0x2a>
            brk -= incr;
    819c:	4a04      	ldr	r2, [pc, #16]	; (81b0 <_sbrk+0x38>)
    819e:	6093      	str	r3, [r2, #8]
    81a0:	4770      	bx	lr
            prev_brk = (void *)-1;
    81a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    81a6:	4770      	bx	lr
        } else {
            prev_brk = (void *)-1;
    81a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        }
    }

    return prev_brk;
}
    81ac:	4770      	bx	lr
    81ae:	bf00      	nop
    81b0:	200000d8 	.word	0x200000d8

000081b4 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    81b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81b8:	2201      	movs	r2, #1
    81ba:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    81be:	4770      	bx	lr

000081c0 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    81c0:	4b02      	ldr	r3, [pc, #8]	; (81cc <hal_debugger_connected+0xc>)
    81c2:	6818      	ldr	r0, [r3, #0]
}
    81c4:	f000 0001 	and.w	r0, r0, #1
    81c8:	4770      	bx	lr
    81ca:	bf00      	nop
    81cc:	e000edf0 	.word	0xe000edf0

000081d0 <hal_system_reset>:
{
    81d0:	b508      	push	{r3, lr}
        HAL_DEBUG_BREAK();
    81d2:	f7ff fff5 	bl	81c0 <hal_debugger_connected>
    81d6:	b100      	cbz	r0, 81da <hal_system_reset+0xa>

static inline void
hal_debug_break(void)
{
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
    __BKPT(1);
    81d8:	be01      	bkpt	0x0001
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    81da:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81de:	4905      	ldr	r1, [pc, #20]	; (81f4 <hal_system_reset+0x24>)
    81e0:	68ca      	ldr	r2, [r1, #12]
    81e2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81e6:	4b04      	ldr	r3, [pc, #16]	; (81f8 <hal_system_reset+0x28>)
    81e8:	4313      	orrs	r3, r2
    81ea:	60cb      	str	r3, [r1, #12]
    81ec:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81f0:	bf00      	nop
    81f2:	e7fd      	b.n	81f0 <hal_system_reset+0x20>
    81f4:	e000ed00 	.word	0xe000ed00
    81f8:	05fa0004 	.word	0x05fa0004

000081fc <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8200:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8204:	4b0f      	ldr	r3, [pc, #60]	; (8244 <hal_system_clock_start+0x48>)
    8206:	4013      	ands	r3, r2
    8208:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    820c:	d018      	beq.n	8240 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    820e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8212:	2201      	movs	r2, #1
    8214:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    8216:	2100      	movs	r1, #0
    8218:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    821c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    8220:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    8222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8226:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    822a:	2b00      	cmp	r3, #0
    822c:	d0f9      	beq.n	8222 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    822e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8232:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    8236:	4b03      	ldr	r3, [pc, #12]	; (8244 <hal_system_clock_start+0x48>)
    8238:	4013      	ands	r3, r2
    823a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    823e:	d1f0      	bne.n	8222 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8240:	4770      	bx	lr
    8242:	bf00      	nop
    8244:	00010003 	.word	0x00010003

00008248 <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0b      	ldr	r3, [pc, #44]	; (8278 <errata_16+0x30>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b09      	ldr	r3, [pc, #36]	; (827c <errata_16+0x34>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d107      	bne.n	826e <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b08      	ldr	r3, [pc, #32]	; (8280 <errata_16+0x38>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d003      	beq.n	8272 <errata_16+0x2a>
    return false;
    826a:	2000      	movs	r0, #0
    826c:	4770      	bx	lr
    826e:	2000      	movs	r0, #0
    8270:	4770      	bx	lr
            return true;
    8272:	2001      	movs	r0, #1
}
    8274:	4770      	bx	lr
    8276:	bf00      	nop
    8278:	f0000fe0 	.word	0xf0000fe0
    827c:	f0000fe4 	.word	0xf0000fe4
    8280:	f0000fe8 	.word	0xf0000fe8

00008284 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8284:	4b0f      	ldr	r3, [pc, #60]	; (82c4 <errata_31+0x40>)
    8286:	781b      	ldrb	r3, [r3, #0]
    8288:	2b06      	cmp	r3, #6
    828a:	d001      	beq.n	8290 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    828c:	2000      	movs	r0, #0
    828e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8290:	4b0d      	ldr	r3, [pc, #52]	; (82c8 <errata_31+0x44>)
    8292:	681b      	ldr	r3, [r3, #0]
    8294:	f013 0f0f 	tst.w	r3, #15
    8298:	d10b      	bne.n	82b2 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    829a:	4b0c      	ldr	r3, [pc, #48]	; (82cc <errata_31+0x48>)
    829c:	681b      	ldr	r3, [r3, #0]
    829e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82a2:	2b30      	cmp	r3, #48	; 0x30
    82a4:	d007      	beq.n	82b6 <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82a6:	2b40      	cmp	r3, #64	; 0x40
    82a8:	d007      	beq.n	82ba <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82aa:	2b50      	cmp	r3, #80	; 0x50
    82ac:	d007      	beq.n	82be <errata_31+0x3a>
    return false;
    82ae:	2000      	movs	r0, #0
    82b0:	4770      	bx	lr
    82b2:	2000      	movs	r0, #0
    82b4:	4770      	bx	lr
            return true;
    82b6:	2001      	movs	r0, #1
    82b8:	4770      	bx	lr
            return true;
    82ba:	2001      	movs	r0, #1
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0b      	ldr	r3, [pc, #44]	; (8300 <errata_32+0x30>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b09      	ldr	r3, [pc, #36]	; (8304 <errata_32+0x34>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d107      	bne.n	82f6 <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b08      	ldr	r3, [pc, #32]	; (8308 <errata_32+0x38>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d003      	beq.n	82fa <errata_32+0x2a>
    return false;
    82f2:	2000      	movs	r0, #0
    82f4:	4770      	bx	lr
    82f6:	2000      	movs	r0, #0
    82f8:	4770      	bx	lr
            return true;
    82fa:	2001      	movs	r0, #1
}
    82fc:	4770      	bx	lr
    82fe:	bf00      	nop
    8300:	f0000fe0 	.word	0xf0000fe0
    8304:	f0000fe4 	.word	0xf0000fe4
    8308:	f0000fe8 	.word	0xf0000fe8

0000830c <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    830c:	4b0f      	ldr	r3, [pc, #60]	; (834c <errata_36+0x40>)
    830e:	781b      	ldrb	r3, [r3, #0]
    8310:	2b06      	cmp	r3, #6
    8312:	d001      	beq.n	8318 <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8314:	2000      	movs	r0, #0
    8316:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8318:	4b0d      	ldr	r3, [pc, #52]	; (8350 <errata_36+0x44>)
    831a:	681b      	ldr	r3, [r3, #0]
    831c:	f013 0f0f 	tst.w	r3, #15
    8320:	d10b      	bne.n	833a <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8322:	4b0c      	ldr	r3, [pc, #48]	; (8354 <errata_36+0x48>)
    8324:	681b      	ldr	r3, [r3, #0]
    8326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    832a:	2b30      	cmp	r3, #48	; 0x30
    832c:	d007      	beq.n	833e <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    832e:	2b40      	cmp	r3, #64	; 0x40
    8330:	d007      	beq.n	8342 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8332:	2b50      	cmp	r3, #80	; 0x50
    8334:	d007      	beq.n	8346 <errata_36+0x3a>
    return false;
    8336:	2000      	movs	r0, #0
    8338:	4770      	bx	lr
    833a:	2000      	movs	r0, #0
    833c:	4770      	bx	lr
            return true;
    833e:	2001      	movs	r0, #1
    8340:	4770      	bx	lr
            return true;
    8342:	2001      	movs	r0, #1
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_37+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_37+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_37+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_37+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_57+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_57+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_57+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b30      	cmp	r3, #48	; 0x30
    83b4:	d003      	beq.n	83be <errata_57+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0b      	ldr	r3, [pc, #44]	; (8400 <errata_66+0x30>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b09      	ldr	r3, [pc, #36]	; (8404 <errata_66+0x34>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d107      	bne.n	83f6 <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83e6:	4b08      	ldr	r3, [pc, #32]	; (8408 <errata_66+0x38>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b50      	cmp	r3, #80	; 0x50
    83f0:	d003      	beq.n	83fa <errata_66+0x2a>
    return false;
    83f2:	2000      	movs	r0, #0
    83f4:	4770      	bx	lr
    83f6:	2000      	movs	r0, #0
    83f8:	4770      	bx	lr
            return true;
    83fa:	2001      	movs	r0, #1
}
    83fc:	4770      	bx	lr
    83fe:	bf00      	nop
    8400:	f0000fe0 	.word	0xf0000fe0
    8404:	f0000fe4 	.word	0xf0000fe4
    8408:	f0000fe8 	.word	0xf0000fe8

0000840c <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    840c:	4b0f      	ldr	r3, [pc, #60]	; (844c <errata_108+0x40>)
    840e:	781b      	ldrb	r3, [r3, #0]
    8410:	2b06      	cmp	r3, #6
    8412:	d001      	beq.n	8418 <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8414:	2000      	movs	r0, #0
    8416:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8418:	4b0d      	ldr	r3, [pc, #52]	; (8450 <errata_108+0x44>)
    841a:	681b      	ldr	r3, [r3, #0]
    841c:	f013 0f0f 	tst.w	r3, #15
    8420:	d10b      	bne.n	843a <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8422:	4b0c      	ldr	r3, [pc, #48]	; (8454 <errata_108+0x48>)
    8424:	681b      	ldr	r3, [r3, #0]
    8426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    842a:	2b30      	cmp	r3, #48	; 0x30
    842c:	d007      	beq.n	843e <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    842e:	2b40      	cmp	r3, #64	; 0x40
    8430:	d007      	beq.n	8442 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    8432:	2b50      	cmp	r3, #80	; 0x50
    8434:	d007      	beq.n	8446 <errata_108+0x3a>
    return false;
    8436:	2000      	movs	r0, #0
    8438:	4770      	bx	lr
    843a:	2000      	movs	r0, #0
    843c:	4770      	bx	lr
            return true;
    843e:	2001      	movs	r0, #1
    8440:	4770      	bx	lr
            return true;
    8442:	2001      	movs	r0, #1
    8444:	4770      	bx	lr
            return true;
    8446:	2001      	movs	r0, #1
}
    8448:	4770      	bx	lr
    844a:	bf00      	nop
    844c:	f0000fe0 	.word	0xf0000fe0
    8450:	f0000fe4 	.word	0xf0000fe4
    8454:	f0000fe8 	.word	0xf0000fe8

00008458 <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    8458:	4b01      	ldr	r3, [pc, #4]	; (8460 <SystemCoreClockUpdate+0x8>)
    845a:	4a02      	ldr	r2, [pc, #8]	; (8464 <SystemCoreClockUpdate+0xc>)
    845c:	601a      	str	r2, [r3, #0]
}
    845e:	4770      	bx	lr
    8460:	200000e4 	.word	0x200000e4
    8464:	03d09000 	.word	0x03d09000

00008468 <SystemInit>:
{
    8468:	b508      	push	{r3, lr}
    if (errata_16()){
    846a:	f7ff feed 	bl	8248 <errata_16>
    846e:	b110      	cbz	r0, 8476 <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8470:	4b65      	ldr	r3, [pc, #404]	; (8608 <SystemInit+0x1a0>)
    8472:	4a66      	ldr	r2, [pc, #408]	; (860c <SystemInit+0x1a4>)
    8474:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    8476:	f7ff ff05 	bl	8284 <errata_31>
    847a:	b128      	cbz	r0, 8488 <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    847c:	4b64      	ldr	r3, [pc, #400]	; (8610 <SystemInit+0x1a8>)
    847e:	681b      	ldr	r3, [r3, #0]
    8480:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8484:	4a63      	ldr	r2, [pc, #396]	; (8614 <SystemInit+0x1ac>)
    8486:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    8488:	f7ff ff22 	bl	82d0 <errata_32>
    848c:	b120      	cbz	r0, 8498 <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    848e:	4a62      	ldr	r2, [pc, #392]	; (8618 <SystemInit+0x1b0>)
    8490:	68d3      	ldr	r3, [r2, #12]
    8492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    8496:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    8498:	f7ff ff38 	bl	830c <errata_36>
    849c:	b140      	cbz	r0, 84b0 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    849e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    84a2:	2200      	movs	r2, #0
    84a4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    84a8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    84ac:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    84b0:	f7ff ff52 	bl	8358 <errata_37>
    84b4:	b110      	cbz	r0, 84bc <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    84b6:	4b59      	ldr	r3, [pc, #356]	; (861c <SystemInit+0x1b4>)
    84b8:	2203      	movs	r2, #3
    84ba:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    84bc:	f7ff ff6a 	bl	8394 <errata_57>
    84c0:	b158      	cbz	r0, 84da <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    84c2:	4b57      	ldr	r3, [pc, #348]	; (8620 <SystemInit+0x1b8>)
    84c4:	2205      	movs	r2, #5
    84c6:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    84c8:	3378      	adds	r3, #120	; 0x78
    84ca:	2201      	movs	r2, #1
    84cc:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    84ce:	3b70      	subs	r3, #112	; 0x70
    84d0:	2200      	movs	r2, #0
    84d2:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    84d4:	3b04      	subs	r3, #4
    84d6:	223f      	movs	r2, #63	; 0x3f
    84d8:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    84da:	f7ff ff79 	bl	83d0 <errata_66>
    84de:	2800      	cmp	r0, #0
    84e0:	d046      	beq.n	8570 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84e6:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ea:	4b4e      	ldr	r3, [pc, #312]	; (8624 <SystemInit+0x1bc>)
    84ec:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84f0:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84f4:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84f8:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84fc:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8500:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8504:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    8508:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    850c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8510:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8514:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    8518:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    851c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8520:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8524:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    8528:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    852c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8530:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8534:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    8538:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    853c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8540:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8544:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    8548:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    854c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8550:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8554:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    8558:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    855c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8560:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8564:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    8568:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    856c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8570:	f7ff ff4c 	bl	840c <errata_108>
    8574:	b128      	cbz	r0, 8582 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    8576:	4b2c      	ldr	r3, [pc, #176]	; (8628 <SystemInit+0x1c0>)
    8578:	681b      	ldr	r3, [r3, #0]
    857a:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    857e:	4a2b      	ldr	r2, [pc, #172]	; (862c <SystemInit+0x1c4>)
    8580:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8582:	4a2b      	ldr	r2, [pc, #172]	; (8630 <SystemInit+0x1c8>)
    8584:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    8588:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    858c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8590:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8594:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    8598:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    859c:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    85a0:	f013 0f01 	tst.w	r3, #1
    85a4:	d104      	bne.n	85b0 <SystemInit+0x148>
    SystemCoreClockUpdate();
    85a6:	f7ff ff57 	bl	8458 <SystemCoreClockUpdate>
    NVIC_Relocate();
    85aa:	f001 f985 	bl	98b8 <NVIC_Relocate>
}
    85ae:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    85b0:	4b20      	ldr	r3, [pc, #128]	; (8634 <SystemInit+0x1cc>)
    85b2:	2201      	movs	r2, #1
    85b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85b8:	4b1e      	ldr	r3, [pc, #120]	; (8634 <SystemInit+0x1cc>)
    85ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85be:	2b00      	cmp	r3, #0
    85c0:	d0fa      	beq.n	85b8 <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    85c2:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    85c6:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    85ca:	f023 0301 	bic.w	r3, r3, #1
    85ce:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85d2:	4b18      	ldr	r3, [pc, #96]	; (8634 <SystemInit+0x1cc>)
    85d4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85d8:	2b00      	cmp	r3, #0
    85da:	d0fa      	beq.n	85d2 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85dc:	4b15      	ldr	r3, [pc, #84]	; (8634 <SystemInit+0x1cc>)
    85de:	2200      	movs	r2, #0
    85e0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85e4:	4b13      	ldr	r3, [pc, #76]	; (8634 <SystemInit+0x1cc>)
    85e6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ea:	2b00      	cmp	r3, #0
    85ec:	d0fa      	beq.n	85e4 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85ee:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85f2:	490f      	ldr	r1, [pc, #60]	; (8630 <SystemInit+0x1c8>)
    85f4:	68ca      	ldr	r2, [r1, #12]
    85f6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85fa:	4b0f      	ldr	r3, [pc, #60]	; (8638 <SystemInit+0x1d0>)
    85fc:	4313      	orrs	r3, r2
    85fe:	60cb      	str	r3, [r1, #12]
    8600:	f3bf 8f4f 	dsb	sy
    __NOP();
    8604:	bf00      	nop
    8606:	e7fd      	b.n	8604 <SystemInit+0x19c>
    8608:	4007c074 	.word	0x4007c074
    860c:	baadf00d 	.word	0xbaadf00d
    8610:	10000244 	.word	0x10000244
    8614:	4000053c 	.word	0x4000053c
    8618:	e000edf0 	.word	0xe000edf0
    861c:	400005a0 	.word	0x400005a0
    8620:	40005610 	.word	0x40005610
    8624:	4000c000 	.word	0x4000c000
    8628:	10000258 	.word	0x10000258
    862c:	40000ee4 	.word	0x40000ee4
    8630:	e000ed00 	.word	0xe000ed00
    8634:	4001e000 	.word	0x4001e000
    8638:	05fa0004 	.word	0x05fa0004

0000863c <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    863c:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    863e:	4803      	ldr	r0, [pc, #12]	; (864c <_start+0x10>)
    8640:	f001 fa5e 	bl	9b00 <os_init>
    os_start();
    8644:	f001 fac4 	bl	9bd0 <os_start>
#endif
}
    8648:	bd08      	pop	{r3, pc}
    864a:	bf00      	nop
    864c:	00008f49 	.word	0x00008f49

00008650 <_init>:

void
_init(void)
{
}
    8650:	4770      	bx	lr

00008652 <_ZN4core3ptr13drop_in_place17hbc0c1fc2aa8b6ff3E>:
/// i.e., you do not usually have to worry about such issues unless you call `drop_in_place`
/// manually.
#[stable(feature = "drop_in_place", since = "1.8.0")]
#[lang = "drop_in_place"]
#[allow(unconditional_recursion)]
pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {
    8652:	b082      	sub	sp, #8
    8654:	9001      	str	r0, [sp, #4]
    8656:	b002      	add	sp, #8
    8658:	4770      	bx	lr

0000865a <_ZN4core3str21_$LT$impl$u20$str$GT$3len17he841da45b9c69883E>:
    /// assert_eq!("ƒoo".chars().count(), 3);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "const_str_len", since = "1.32.0")]
    #[inline]
    pub const fn len(&self) -> usize {
    865a:	b580      	push	{r7, lr}
    865c:	466f      	mov	r7, sp
    865e:	b086      	sub	sp, #24
    8660:	9000      	str	r0, [sp, #0]
    8662:	9101      	str	r1, [sp, #4]
    8664:	9004      	str	r0, [sp, #16]
    8666:	9105      	str	r1, [sp, #20]
        union Slices<'a> {
            str: &'a str,
            slice: &'a [u8],
        }
        // SAFETY: const sound because we transmute two types with the same layout
        unsafe { Slices { str: self }.slice }
    8668:	9002      	str	r0, [sp, #8]
    866a:	9103      	str	r1, [sp, #12]
    866c:	9802      	ldr	r0, [sp, #8]
    866e:	9903      	ldr	r1, [sp, #12]
        self.as_bytes().len()
    8670:	f000 fc62 	bl	8f38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha89a753dca6cd9f4E>
    }
    8674:	b006      	add	sp, #24
    8676:	bd80      	pop	{r7, pc}

00008678 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h022c0f523ccad626E>:
    /// let ptr = s.as_ptr();
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_stable(feature = "rustc_str_as_ptr", since = "1.32.0")]
    #[inline]
    pub const fn as_ptr(&self) -> *const u8 {
    8678:	b082      	sub	sp, #8
    867a:	9000      	str	r0, [sp, #0]
    867c:	9101      	str	r1, [sp, #4]
        self as *const str as *const u8
    }
    867e:	b002      	add	sp, #8
    8680:	4770      	bx	lr

00008682 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h56061f5b534d43a3E>:
    /// x.expect("Testing expect"); // panics with `Testing expect: emergency failure`
    /// ```
    #[inline]
    #[track_caller]
    #[stable(feature = "result_expect", since = "1.4.0")]
    pub fn expect(self, msg: &str) -> T {
    8682:	b580      	push	{r7, lr}
    8684:	466f      	mov	r7, sp
    8686:	b08a      	sub	sp, #40	; 0x28
    8688:	9005      	str	r0, [sp, #20]
    868a:	9108      	str	r1, [sp, #32]
    868c:	9209      	str	r2, [sp, #36]	; 0x24
        match self {
            Ok(t) => t,
    868e:	9805      	ldr	r0, [sp, #20]
    8690:	2801      	cmp	r0, #1
    8692:	9304      	str	r3, [sp, #16]
    8694:	9203      	str	r2, [sp, #12]
    8696:	9102      	str	r1, [sp, #8]
    8698:	d00f      	beq.n	86ba <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h56061f5b534d43a3E+0x38>
    869a:	e7ff      	b.n	869c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h56061f5b534d43a3E+0x1a>
            Err(e) => unwrap_failed(msg, &e),
    869c:	9805      	ldr	r0, [sp, #20]
    869e:	9006      	str	r0, [sp, #24]
    86a0:	4668      	mov	r0, sp
    86a2:	9904      	ldr	r1, [sp, #16]
    86a4:	6001      	str	r1, [r0, #0]
    86a6:	f248 635c 	movw	r3, #34396	; 0x865c
    86aa:	f2c0 0302 	movt	r3, #2
    86ae:	aa06      	add	r2, sp, #24
    86b0:	9802      	ldr	r0, [sp, #8]
    86b2:	9903      	ldr	r1, [sp, #12]
    86b4:	f000 fc02 	bl	8ebc <_ZN4core6option18expect_none_failed17h6759d4401d28ac1fE>
    86b8:	defe      	udf	#254	; 0xfe
        }
    }
    86ba:	b00a      	add	sp, #40	; 0x28
    86bc:	bd80      	pop	{r7, pc}

000086be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    86be:	b580      	push	{r7, lr}
    86c0:	466f      	mov	r7, sp
    86c2:	b08a      	sub	sp, #40	; 0x28
    86c4:	9004      	str	r0, [sp, #16]
    86c6:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    86c8:	9003      	str	r0, [sp, #12]
    86ca:	9102      	str	r1, [sp, #8]
    86cc:	f7ff ffd4 	bl	8678 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h022c0f523ccad626E>
    86d0:	9006      	str	r0, [sp, #24]
    let len = msg.len() as u32;
    86d2:	9903      	ldr	r1, [sp, #12]
    86d4:	9001      	str	r0, [sp, #4]
    86d6:	4608      	mov	r0, r1
    86d8:	9902      	ldr	r1, [sp, #8]
    86da:	f7ff ffbe 	bl	865a <_ZN4core3str21_$LT$impl$u20$str$GT$3len17he841da45b9c69883E>
    86de:	9007      	str	r0, [sp, #28]
    86e0:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    86e2:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    86e4:	9000      	str	r0, [sp, #0]
    86e6:	4608      	mov	r0, r1
    86e8:	f000 f807 	bl	86fa <_ZN6mynewt3sys7console20get_dispatch_address17h77ed9d6357c846ceE>
    86ec:	9009      	str	r0, [sp, #36]	; 0x24
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    86ee:	9801      	ldr	r0, [sp, #4]
    86f0:	9900      	ldr	r1, [sp, #0]
    86f2:	f000 fd87 	bl	9204 <console_buffer>
}
    86f6:	b00a      	add	sp, #40	; 0x28
    86f8:	bd80      	pop	{r7, pc}

000086fa <_ZN6mynewt3sys7console20get_dispatch_address17h77ed9d6357c846ceE>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    86fa:	b081      	sub	sp, #4
    86fc:	9000      	str	r0, [sp, #0]
    86fe:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    8700:	b001      	add	sp, #4
    8702:	4770      	bx	lr

00008704 <_ZN6mynewt3sys7console6buffer17h35108561f938a421E>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    8704:	b580      	push	{r7, lr}
    8706:	466f      	mov	r7, sp
    8708:	b086      	sub	sp, #24
    870a:	9004      	str	r0, [sp, #16]
    870c:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    870e:	9003      	str	r0, [sp, #12]
    8710:	9102      	str	r1, [sp, #8]
    8712:	f7ff ffb1 	bl	8678 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h022c0f523ccad626E>
    8716:	9903      	ldr	r1, [sp, #12]
    8718:	9001      	str	r0, [sp, #4]
    871a:	4608      	mov	r0, r1
    871c:	9902      	ldr	r1, [sp, #8]
    871e:	f7ff ff9c 	bl	865a <_ZN4core3str21_$LT$impl$u20$str$GT$3len17he841da45b9c69883E>
    8722:	9901      	ldr	r1, [sp, #4]
    8724:	9000      	str	r0, [sp, #0]
    8726:	4608      	mov	r0, r1
    8728:	9900      	ldr	r1, [sp, #0]
    872a:	f000 fd6b 	bl	9204 <console_buffer>
}
    872e:	b006      	add	sp, #24
    8730:	bd80      	pop	{r7, pc}

00008732 <_ZN6mynewt3sys7console8printint17hbf799f23e9896db3E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    8732:	b580      	push	{r7, lr}
    8734:	466f      	mov	r7, sp
    8736:	b082      	sub	sp, #8
    8738:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    873a:	f000 fd6f 	bl	921c <console_printint>
}
    873e:	b002      	add	sp, #8
    8740:	bd80      	pop	{r7, pc}

00008742 <_ZN6mynewt3sys7console5flush17h8491f76cc7401f62E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    8742:	b580      	push	{r7, lr}
    8744:	466f      	mov	r7, sp
    unsafe { console_flush(); }
    8746:	f000 fd3b 	bl	91c0 <console_flush>
}
    874a:	bd80      	pop	{r7, pc}

0000874c <_ZN6mynewt7sysinit17h1b1620554f4add73E>:
pub use hal::{ Delay, GPIO, SPI, I2C };  //  Export `hal` types GPIO, SPI and I2C

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    874c:	b580      	push	{r7, lr}
    874e:	466f      	mov	r7, sp
    unsafe { rust_sysinit(); }
    8750:	f003 fc28 	bl	bfa4 <rust_sysinit>
    sys::console::flush();
    8754:	f7ff fff5 	bl	8742 <_ZN6mynewt3sys7console5flush17h8491f76cc7401f62E>
}
    8758:	bd80      	pop	{r7, pc}

0000875a <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17h331d487878438b91E>:
        }
    }

    /// Implement formatted output for MynewtError
    impl core::fmt::Debug for MynewtError {
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    875a:	b082      	sub	sp, #8
    875c:	9000      	str	r0, [sp, #0]
    875e:	9101      	str	r1, [sp, #4]
    8760:	2000      	movs	r0, #0
            //  TODO
            Ok(())
        }
    8762:	b002      	add	sp, #8
    8764:	4770      	bx	lr

00008766 <_ZN6mynewt6kernel2os10eventq_run17h315affb69d21582dE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8766:	b580      	push	{r7, lr}
    8768:	466f      	mov	r7, sp
    876a:	b082      	sub	sp, #8
    876c:	9001      	str	r0, [sp, #4]
    876e:	f001 fc83 	bl	a078 <os_eventq_run>
    8772:	2001      	movs	r0, #1
    8774:	b002      	add	sp, #8
    8776:	bd80      	pop	{r7, pc}

00008778 <_ZN6mynewt6kernel2os15eventq_dflt_get17hee2ec5f38871c7e2E>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8778:	b580      	push	{r7, lr}
    877a:	466f      	mov	r7, sp
    877c:	b082      	sub	sp, #8
    877e:	9000      	str	r0, [sp, #0]
    8780:	f001 fcac 	bl	a0dc <os_eventq_dflt_get>
    8784:	9001      	str	r0, [sp, #4]
    8786:	9900      	ldr	r1, [sp, #0]
    8788:	6048      	str	r0, [r1, #4]
    878a:	2000      	movs	r0, #0
    878c:	6008      	str	r0, [r1, #0]
    878e:	b002      	add	sp, #8
    8790:	bd80      	pop	{r7, pc}

00008792 <_ZN4core9panicking5panic17h692a68e116a8c946E>:
    8792:	b580      	push	{r7, lr}
    8794:	466f      	mov	r7, sp
    8796:	b088      	sub	sp, #32
    8798:	9006      	str	r0, [sp, #24]
    879a:	9107      	str	r1, [sp, #28]
    879c:	a806      	add	r0, sp, #24
    879e:	9000      	str	r0, [sp, #0]
    87a0:	2001      	movs	r0, #1
    87a2:	9001      	str	r0, [sp, #4]
    87a4:	2000      	movs	r0, #0
    87a6:	9002      	str	r0, [sp, #8]
    87a8:	9003      	str	r0, [sp, #12]
    87aa:	f248 616c 	movw	r1, #34412	; 0x866c
    87ae:	f2c0 0102 	movt	r1, #2
    87b2:	9104      	str	r1, [sp, #16]
    87b4:	9005      	str	r0, [sp, #20]
    87b6:	4668      	mov	r0, sp
    87b8:	4611      	mov	r1, r2
    87ba:	f000 f801 	bl	87c0 <_ZN4core9panicking9panic_fmt17h1abf46b1849e1e64E>
    87be:	defe      	udf	#254	; 0xfe

000087c0 <_ZN4core9panicking9panic_fmt17h1abf46b1849e1e64E>:
    87c0:	b580      	push	{r7, lr}
    87c2:	466f      	mov	r7, sp
    87c4:	b084      	sub	sp, #16
    87c6:	f248 626c 	movw	r2, #34412	; 0x866c
    87ca:	f2c0 0202 	movt	r2, #2
    87ce:	9200      	str	r2, [sp, #0]
    87d0:	f248 626c 	movw	r2, #34412	; 0x866c
    87d4:	f2c0 0202 	movt	r2, #2
    87d8:	9201      	str	r2, [sp, #4]
    87da:	9002      	str	r0, [sp, #8]
    87dc:	9103      	str	r1, [sp, #12]
    87de:	4668      	mov	r0, sp
    87e0:	f000 fc13 	bl	900a <rust_begin_unwind>
    87e4:	defe      	udf	#254	; 0xfe

000087e6 <_ZN4core3ptr13drop_in_place17h00770497a4e91b46E>:
    87e6:	4770      	bx	lr

000087e8 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17hed9a745734db4e1eE>:
    87e8:	f646 7073 	movw	r0, #28531	; 0x6f73
    87ec:	f2ce 50c7 	movt	r0, #58823	; 0xe5c7
    87f0:	f24b 313d 	movw	r1, #45885	; 0xb33d
    87f4:	f2ca 711d 	movt	r1, #42781	; 0xa71d
    87f8:	4770      	bx	lr
	...

000087fc <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E>:
    87fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    87fe:	af03      	add	r7, sp, #12
    8800:	f84d 8d04 	str.w	r8, [sp, #-4]!
    8804:	b0e4      	sub	sp, #400	; 0x190
    8806:	6883      	ldr	r3, [r0, #8]
    8808:	f8d0 c010 	ldr.w	ip, [r0, #16]
    880c:	f1a3 0e01 	sub.w	lr, r3, #1
    8810:	fabe fe8e 	clz	lr, lr
    8814:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
    8818:	f1ac 0c01 	sub.w	ip, ip, #1
    881c:	fabc fc8c 	clz	ip, ip
    8820:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    8824:	2b01      	cmp	r3, #1
    8826:	9263      	str	r2, [sp, #396]	; 0x18c
    8828:	9162      	str	r1, [sp, #392]	; 0x188
    882a:	9061      	str	r0, [sp, #388]	; 0x184
    882c:	f8cd e180 	str.w	lr, [sp, #384]	; 0x180
    8830:	f8cd c17c 	str.w	ip, [sp, #380]	; 0x17c
    8834:	d005      	beq.n	8842 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x46>
    8836:	e7ff      	b.n	8838 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3c>
    8838:	985f      	ldr	r0, [sp, #380]	; 0x17c
    883a:	07c1      	lsls	r1, r0, #31
    883c:	2900      	cmp	r1, #0
    883e:	d11e      	bne.n	887e <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x82>
    8840:	e008      	b.n	8854 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x58>
    8842:	985f      	ldr	r0, [sp, #380]	; 0x17c
    8844:	07c1      	lsls	r1, r0, #31
    8846:	2900      	cmp	r1, #0
    8848:	9963      	ldr	r1, [sp, #396]	; 0x18c
    884a:	9a62      	ldr	r2, [sp, #392]	; 0x188
    884c:	915e      	str	r1, [sp, #376]	; 0x178
    884e:	925d      	str	r2, [sp, #372]	; 0x174
    8850:	d115      	bne.n	887e <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x82>
    8852:	e14c      	b.n	8aee <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2f2>
    8854:	9861      	ldr	r0, [sp, #388]	; 0x184
    8856:	6980      	ldr	r0, [r0, #24]
    8858:	9961      	ldr	r1, [sp, #388]	; 0x184
    885a:	69ca      	ldr	r2, [r1, #28]
    885c:	68d2      	ldr	r2, [r2, #12]
    885e:	9962      	ldr	r1, [sp, #392]	; 0x188
    8860:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    8862:	925c      	str	r2, [sp, #368]	; 0x170
    8864:	461a      	mov	r2, r3
    8866:	f8dd c170 	ldr.w	ip, [sp, #368]	; 0x170
    886a:	47e0      	blx	ip
    886c:	905b      	str	r0, [sp, #364]	; 0x16c
    886e:	e7ff      	b.n	8870 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x74>
    8870:	985b      	ldr	r0, [sp, #364]	; 0x16c
    8872:	f000 0001 	and.w	r0, r0, #1
    8876:	b064      	add	sp, #400	; 0x190
    8878:	f85d 8b04 	ldr.w	r8, [sp], #4
    887c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    887e:	9862      	ldr	r0, [sp, #392]	; 0x188
    8880:	9962      	ldr	r1, [sp, #392]	; 0x188
    8882:	9a63      	ldr	r2, [sp, #396]	; 0x18c
    8884:	188b      	adds	r3, r1, r2
    8886:	f04f 0c00 	mov.w	ip, #0
    888a:	2a00      	cmp	r2, #0
    888c:	905a      	str	r0, [sp, #360]	; 0x168
    888e:	9359      	str	r3, [sp, #356]	; 0x164
    8890:	9158      	str	r1, [sp, #352]	; 0x160
    8892:	f8cd c15c 	str.w	ip, [sp, #348]	; 0x15c
    8896:	f000 810e 	beq.w	8ab6 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2ba>
    889a:	e7ff      	b.n	889c <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0xa0>
    889c:	9862      	ldr	r0, [sp, #392]	; 0x188
    889e:	9961      	ldr	r1, [sp, #388]	; 0x184
    88a0:	694a      	ldr	r2, [r1, #20]
    88a2:	2300      	movs	r3, #0
    88a4:	f8dd c168 	ldr.w	ip, [sp, #360]	; 0x168
    88a8:	9356      	str	r3, [sp, #344]	; 0x158
    88aa:	f8cd c154 	str.w	ip, [sp, #340]	; 0x154
    88ae:	9054      	str	r0, [sp, #336]	; 0x150
    88b0:	9253      	str	r2, [sp, #332]	; 0x14c
    88b2:	e019      	b.n	88e8 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0xec>
    88b4:	9852      	ldr	r0, [sp, #328]	; 0x148
    88b6:	9951      	ldr	r1, [sp, #324]	; 0x144
    88b8:	1a42      	subs	r2, r0, r1
    88ba:	9b50      	ldr	r3, [sp, #320]	; 0x140
    88bc:	441a      	add	r2, r3
    88be:	f8dd c13c 	ldr.w	ip, [sp, #316]	; 0x13c
    88c2:	f1ac 0e01 	sub.w	lr, ip, #1
    88c6:	9c59      	ldr	r4, [sp, #356]	; 0x164
    88c8:	9d50      	ldr	r5, [sp, #320]	; 0x140
    88ca:	42ac      	cmp	r4, r5
    88cc:	9e62      	ldr	r6, [sp, #392]	; 0x188
    88ce:	f8dd 818c 	ldr.w	r8, [sp, #396]	; 0x18c
    88d2:	9256      	str	r2, [sp, #344]	; 0x158
    88d4:	9355      	str	r3, [sp, #340]	; 0x154
    88d6:	9554      	str	r5, [sp, #336]	; 0x150
    88d8:	f8cd e14c 	str.w	lr, [sp, #332]	; 0x14c
    88dc:	9658      	str	r6, [sp, #352]	; 0x160
    88de:	f8cd 815c 	str.w	r8, [sp, #348]	; 0x15c
    88e2:	f000 80e8 	beq.w	8ab6 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2ba>
    88e6:	e7ff      	b.n	88e8 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0xec>
    88e8:	9853      	ldr	r0, [sp, #332]	; 0x14c
    88ea:	9954      	ldr	r1, [sp, #336]	; 0x150
    88ec:	9a55      	ldr	r2, [sp, #340]	; 0x154
    88ee:	9b56      	ldr	r3, [sp, #344]	; 0x158
    88f0:	4694      	mov	ip, r2
    88f2:	f91c eb01 	ldrsb.w	lr, [ip], #1
    88f6:	4664      	mov	r4, ip
    88f8:	fa5f f58e 	uxtb.w	r5, lr
    88fc:	f1be 3fff 	cmp.w	lr, #4294967295	; 0xffffffff
    8900:	904f      	str	r0, [sp, #316]	; 0x13c
    8902:	9151      	str	r1, [sp, #324]	; 0x144
    8904:	924e      	str	r2, [sp, #312]	; 0x138
    8906:	9352      	str	r3, [sp, #328]	; 0x148
    8908:	f8cd c134 	str.w	ip, [sp, #308]	; 0x134
    890c:	944c      	str	r4, [sp, #304]	; 0x130
    890e:	954b      	str	r5, [sp, #300]	; 0x12c
    8910:	dc33      	bgt.n	897a <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x17e>
    8912:	e7ff      	b.n	8914 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x118>
    8914:	984b      	ldr	r0, [sp, #300]	; 0x12c
    8916:	f000 011f 	and.w	r1, r0, #31
    891a:	2200      	movs	r2, #0
    891c:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    891e:	f8dd c164 	ldr.w	ip, [sp, #356]	; 0x164
    8922:	4563      	cmp	r3, ip
    8924:	f8dd e134 	ldr.w	lr, [sp, #308]	; 0x134
    8928:	914a      	str	r1, [sp, #296]	; 0x128
    892a:	f8cd e124 	str.w	lr, [sp, #292]	; 0x124
    892e:	f8cd c120 	str.w	ip, [sp, #288]	; 0x120
    8932:	9247      	str	r2, [sp, #284]	; 0x11c
    8934:	d00d      	beq.n	8952 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x156>
    8936:	e7ff      	b.n	8938 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x13c>
    8938:	984e      	ldr	r0, [sp, #312]	; 0x138
    893a:	1c81      	adds	r1, r0, #2
    893c:	460a      	mov	r2, r1
    893e:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    8940:	f893 c000 	ldrb.w	ip, [r3]
    8944:	f00c 0c3f 	and.w	ip, ip, #63	; 0x3f
    8948:	9149      	str	r1, [sp, #292]	; 0x124
    894a:	9248      	str	r2, [sp, #288]	; 0x120
    894c:	f8cd c11c 	str.w	ip, [sp, #284]	; 0x11c
    8950:	e7ff      	b.n	8952 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x156>
    8952:	9847      	ldr	r0, [sp, #284]	; 0x11c
    8954:	9948      	ldr	r1, [sp, #288]	; 0x120
    8956:	9a49      	ldr	r2, [sp, #292]	; 0x124
    8958:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    895a:	ea40 1c83 	orr.w	ip, r0, r3, lsl #6
    895e:	f8dd e12c 	ldr.w	lr, [sp, #300]	; 0x12c
    8962:	fa5f f48e 	uxtb.w	r4, lr
    8966:	2cdf      	cmp	r4, #223	; 0xdf
    8968:	4614      	mov	r4, r2
    896a:	9046      	str	r0, [sp, #280]	; 0x118
    896c:	9145      	str	r1, [sp, #276]	; 0x114
    896e:	9244      	str	r2, [sp, #272]	; 0x110
    8970:	9443      	str	r4, [sp, #268]	; 0x10c
    8972:	f8cd c108 	str.w	ip, [sp, #264]	; 0x108
    8976:	d806      	bhi.n	8986 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x18a>
    8978:	e05a      	b.n	8a30 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x234>
    897a:	984b      	ldr	r0, [sp, #300]	; 0x12c
    897c:	b2c1      	uxtb	r1, r0
    897e:	9a4d      	ldr	r2, [sp, #308]	; 0x134
    8980:	9243      	str	r2, [sp, #268]	; 0x10c
    8982:	9142      	str	r1, [sp, #264]	; 0x108
    8984:	e054      	b.n	8a30 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x234>
    8986:	2000      	movs	r0, #0
    8988:	9945      	ldr	r1, [sp, #276]	; 0x114
    898a:	9a59      	ldr	r2, [sp, #356]	; 0x164
    898c:	4291      	cmp	r1, r2
    898e:	9b44      	ldr	r3, [sp, #272]	; 0x110
    8990:	9341      	str	r3, [sp, #260]	; 0x104
    8992:	9240      	str	r2, [sp, #256]	; 0x100
    8994:	903f      	str	r0, [sp, #252]	; 0xfc
    8996:	d00a      	beq.n	89ae <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x1b2>
    8998:	e7ff      	b.n	899a <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x19e>
    899a:	9845      	ldr	r0, [sp, #276]	; 0x114
    899c:	f810 1b01 	ldrb.w	r1, [r0], #1
    89a0:	4602      	mov	r2, r0
    89a2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    89a6:	9041      	str	r0, [sp, #260]	; 0x104
    89a8:	9240      	str	r2, [sp, #256]	; 0x100
    89aa:	913f      	str	r1, [sp, #252]	; 0xfc
    89ac:	e7ff      	b.n	89ae <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x1b2>
    89ae:	983f      	ldr	r0, [sp, #252]	; 0xfc
    89b0:	9940      	ldr	r1, [sp, #256]	; 0x100
    89b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
    89b4:	9b46      	ldr	r3, [sp, #280]	; 0x118
    89b6:	ea40 1083 	orr.w	r0, r0, r3, lsl #6
    89ba:	4684      	mov	ip, r0
    89bc:	f8dd e128 	ldr.w	lr, [sp, #296]	; 0x128
    89c0:	ea40 300e 	orr.w	r0, r0, lr, lsl #12
    89c4:	9c4b      	ldr	r4, [sp, #300]	; 0x12c
    89c6:	b2e5      	uxtb	r5, r4
    89c8:	2df0      	cmp	r5, #240	; 0xf0
    89ca:	4615      	mov	r5, r2
    89cc:	913e      	str	r1, [sp, #248]	; 0xf8
    89ce:	923d      	str	r2, [sp, #244]	; 0xf4
    89d0:	f8cd c0f0 	str.w	ip, [sp, #240]	; 0xf0
    89d4:	9543      	str	r5, [sp, #268]	; 0x10c
    89d6:	9042      	str	r0, [sp, #264]	; 0x108
    89d8:	d32a      	bcc.n	8a30 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x234>
    89da:	e7ff      	b.n	89dc <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x1e0>
    89dc:	2000      	movs	r0, #0
    89de:	993e      	ldr	r1, [sp, #248]	; 0xf8
    89e0:	9a59      	ldr	r2, [sp, #356]	; 0x164
    89e2:	4291      	cmp	r1, r2
    89e4:	9b3d      	ldr	r3, [sp, #244]	; 0xf4
    89e6:	933b      	str	r3, [sp, #236]	; 0xec
    89e8:	903a      	str	r0, [sp, #232]	; 0xe8
    89ea:	d008      	beq.n	89fe <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x202>
    89ec:	e7ff      	b.n	89ee <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x1f2>
    89ee:	983e      	ldr	r0, [sp, #248]	; 0xf8
    89f0:	f810 1b01 	ldrb.w	r1, [r0], #1
    89f4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
    89f8:	903b      	str	r0, [sp, #236]	; 0xec
    89fa:	913a      	str	r1, [sp, #232]	; 0xe8
    89fc:	e7ff      	b.n	89fe <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x202>
    89fe:	983a      	ldr	r0, [sp, #232]	; 0xe8
    8a00:	993b      	ldr	r1, [sp, #236]	; 0xec
    8a02:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
    8a06:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    8a08:	ea02 4283 	and.w	r2, r2, r3, lsl #18
    8a0c:	f8dd c0f0 	ldr.w	ip, [sp, #240]	; 0xf0
    8a10:	ea42 128c 	orr.w	r2, r2, ip, lsl #6
    8a14:	4310      	orrs	r0, r2
    8a16:	4602      	mov	r2, r0
    8a18:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
    8a1c:	9862      	ldr	r0, [sp, #392]	; 0x188
    8a1e:	f8dd e18c 	ldr.w	lr, [sp, #396]	; 0x18c
    8a22:	9143      	str	r1, [sp, #268]	; 0x10c
    8a24:	9242      	str	r2, [sp, #264]	; 0x108
    8a26:	9058      	str	r0, [sp, #352]	; 0x160
    8a28:	f8cd e15c 	str.w	lr, [sp, #348]	; 0x15c
    8a2c:	d043      	beq.n	8ab6 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2ba>
    8a2e:	e7ff      	b.n	8a30 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x234>
    8a30:	9842      	ldr	r0, [sp, #264]	; 0x108
    8a32:	9943      	ldr	r1, [sp, #268]	; 0x10c
    8a34:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
    8a36:	2a00      	cmp	r2, #0
    8a38:	9039      	str	r0, [sp, #228]	; 0xe4
    8a3a:	9150      	str	r1, [sp, #320]	; 0x140
    8a3c:	f47f af3a 	bne.w	88b4 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0xb8>
    8a40:	e7ff      	b.n	8a42 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x246>
    8a42:	9839      	ldr	r0, [sp, #228]	; 0xe4
    8a44:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
    8a48:	9962      	ldr	r1, [sp, #392]	; 0x188
    8a4a:	9a63      	ldr	r2, [sp, #396]	; 0x18c
    8a4c:	9158      	str	r1, [sp, #352]	; 0x160
    8a4e:	9257      	str	r2, [sp, #348]	; 0x15c
    8a50:	d031      	beq.n	8ab6 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2ba>
    8a52:	e7ff      	b.n	8a54 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x258>
    8a54:	9852      	ldr	r0, [sp, #328]	; 0x148
    8a56:	2800      	cmp	r0, #0
    8a58:	d01a      	beq.n	8a90 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x294>
    8a5a:	e7ff      	b.n	8a5c <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x260>
    8a5c:	9852      	ldr	r0, [sp, #328]	; 0x148
    8a5e:	9963      	ldr	r1, [sp, #396]	; 0x18c
    8a60:	4288      	cmp	r0, r1
    8a62:	d015      	beq.n	8a90 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x294>
    8a64:	e7ff      	b.n	8a66 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x26a>
    8a66:	2000      	movs	r0, #0
    8a68:	4601      	mov	r1, r0
    8a6a:	9a52      	ldr	r2, [sp, #328]	; 0x148
    8a6c:	9b63      	ldr	r3, [sp, #396]	; 0x18c
    8a6e:	429a      	cmp	r2, r3
    8a70:	9038      	str	r0, [sp, #224]	; 0xe0
    8a72:	9137      	str	r1, [sp, #220]	; 0xdc
    8a74:	d211      	bcs.n	8a9a <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x29e>
    8a76:	e7ff      	b.n	8a78 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x27c>
    8a78:	9862      	ldr	r0, [sp, #392]	; 0x188
    8a7a:	9952      	ldr	r1, [sp, #328]	; 0x148
    8a7c:	5642      	ldrsb	r2, [r0, r1]
    8a7e:	2300      	movs	r3, #0
    8a80:	469c      	mov	ip, r3
    8a82:	f112 0f40 	cmn.w	r2, #64	; 0x40
    8a86:	9338      	str	r3, [sp, #224]	; 0xe0
    8a88:	f8cd c0dc 	str.w	ip, [sp, #220]	; 0xdc
    8a8c:	db05      	blt.n	8a9a <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x29e>
    8a8e:	e7ff      	b.n	8a90 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x294>
    8a90:	985a      	ldr	r0, [sp, #360]	; 0x168
    8a92:	9952      	ldr	r1, [sp, #328]	; 0x148
    8a94:	9038      	str	r0, [sp, #224]	; 0xe0
    8a96:	9137      	str	r1, [sp, #220]	; 0xdc
    8a98:	e7ff      	b.n	8a9a <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x29e>
    8a9a:	9837      	ldr	r0, [sp, #220]	; 0xdc
    8a9c:	9938      	ldr	r1, [sp, #224]	; 0xe0
    8a9e:	2900      	cmp	r1, #0
    8aa0:	460a      	mov	r2, r1
    8aa2:	9b62      	ldr	r3, [sp, #392]	; 0x188
    8aa4:	bf08      	it	eq
    8aa6:	461a      	moveq	r2, r3
    8aa8:	2900      	cmp	r1, #0
    8aaa:	9963      	ldr	r1, [sp, #396]	; 0x18c
    8aac:	bf08      	it	eq
    8aae:	4608      	moveq	r0, r1
    8ab0:	9258      	str	r2, [sp, #352]	; 0x160
    8ab2:	9057      	str	r0, [sp, #348]	; 0x15c
    8ab4:	e7ff      	b.n	8ab6 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2ba>
    8ab6:	9857      	ldr	r0, [sp, #348]	; 0x15c
    8ab8:	9958      	ldr	r1, [sp, #352]	; 0x160
    8aba:	9a60      	ldr	r2, [sp, #384]	; 0x180
    8abc:	07d3      	lsls	r3, r2, #31
    8abe:	2b00      	cmp	r3, #0
    8ac0:	4603      	mov	r3, r0
    8ac2:	468c      	mov	ip, r1
    8ac4:	9036      	str	r0, [sp, #216]	; 0xd8
    8ac6:	9135      	str	r1, [sp, #212]	; 0xd4
    8ac8:	935e      	str	r3, [sp, #376]	; 0x178
    8aca:	f8cd c174 	str.w	ip, [sp, #372]	; 0x174
    8ace:	d10e      	bne.n	8aee <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2f2>
    8ad0:	e7ff      	b.n	8ad2 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x2d6>
    8ad2:	9861      	ldr	r0, [sp, #388]	; 0x184
    8ad4:	6980      	ldr	r0, [r0, #24]
    8ad6:	9961      	ldr	r1, [sp, #388]	; 0x184
    8ad8:	69ca      	ldr	r2, [r1, #28]
    8ada:	68d2      	ldr	r2, [r2, #12]
    8adc:	9935      	ldr	r1, [sp, #212]	; 0xd4
    8ade:	9b36      	ldr	r3, [sp, #216]	; 0xd8
    8ae0:	9234      	str	r2, [sp, #208]	; 0xd0
    8ae2:	461a      	mov	r2, r3
    8ae4:	f8dd c0d0 	ldr.w	ip, [sp, #208]	; 0xd0
    8ae8:	47e0      	blx	ip
    8aea:	905b      	str	r0, [sp, #364]	; 0x16c
    8aec:	e6c0      	b.n	8870 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x74>
    8aee:	985d      	ldr	r0, [sp, #372]	; 0x174
    8af0:	995e      	ldr	r1, [sp, #376]	; 0x178
    8af2:	9a61      	ldr	r2, [sp, #388]	; 0x184
    8af4:	f102 030c 	add.w	r3, r2, #12
    8af8:	4684      	mov	ip, r0
    8afa:	fab1 fe81 	clz	lr, r1
    8afe:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
    8b02:	2400      	movs	r4, #0
    8b04:	2900      	cmp	r1, #0
    8b06:	9033      	str	r0, [sp, #204]	; 0xcc
    8b08:	9132      	str	r1, [sp, #200]	; 0xc8
    8b0a:	9331      	str	r3, [sp, #196]	; 0xc4
    8b0c:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
    8b10:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
    8b14:	942e      	str	r4, [sp, #184]	; 0xb8
    8b16:	d06c      	beq.n	8bf2 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3f6>
    8b18:	e7ff      	b.n	8b1a <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x31e>
    8b1a:	9832      	ldr	r0, [sp, #200]	; 0xc8
    8b1c:	1e41      	subs	r1, r0, #1
    8b1e:	f000 0203 	and.w	r2, r0, #3
    8b22:	2300      	movs	r3, #0
    8b24:	2903      	cmp	r1, #3
    8b26:	f8dd c0c0 	ldr.w	ip, [sp, #192]	; 0xc0
    8b2a:	922d      	str	r2, [sp, #180]	; 0xb4
    8b2c:	912c      	str	r1, [sp, #176]	; 0xb0
    8b2e:	932b      	str	r3, [sp, #172]	; 0xac
    8b30:	f8cd c0a8 	str.w	ip, [sp, #168]	; 0xa8
    8b34:	d342      	bcc.n	8bbc <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3c0>
    8b36:	e7ff      	b.n	8b38 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x33c>
    8b38:	9832      	ldr	r0, [sp, #200]	; 0xc8
    8b3a:	992d      	ldr	r1, [sp, #180]	; 0xb4
    8b3c:	1a42      	subs	r2, r0, r1
    8b3e:	2300      	movs	r3, #0
    8b40:	f8dd c0c0 	ldr.w	ip, [sp, #192]	; 0xc0
    8b44:	9329      	str	r3, [sp, #164]	; 0xa4
    8b46:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
    8b4a:	9227      	str	r2, [sp, #156]	; 0x9c
    8b4c:	e7ff      	b.n	8b4e <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x352>
    8b4e:	9827      	ldr	r0, [sp, #156]	; 0x9c
    8b50:	9928      	ldr	r1, [sp, #160]	; 0xa0
    8b52:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    8b54:	780b      	ldrb	r3, [r1, #0]
    8b56:	f891 c001 	ldrb.w	ip, [r1, #1]
    8b5a:	f891 e002 	ldrb.w	lr, [r1, #2]
    8b5e:	78cc      	ldrb	r4, [r1, #3]
    8b60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8b64:	1c55      	adds	r5, r2, #1
    8b66:	2b80      	cmp	r3, #128	; 0x80
    8b68:	bf08      	it	eq
    8b6a:	462a      	moveq	r2, r5
    8b6c:	f00c 03c0 	and.w	r3, ip, #192	; 0xc0
    8b70:	f102 0c01 	add.w	ip, r2, #1
    8b74:	2b80      	cmp	r3, #128	; 0x80
    8b76:	bf08      	it	eq
    8b78:	4662      	moveq	r2, ip
    8b7a:	f00e 03c0 	and.w	r3, lr, #192	; 0xc0
    8b7e:	f102 0c01 	add.w	ip, r2, #1
    8b82:	2b80      	cmp	r3, #128	; 0x80
    8b84:	bf08      	it	eq
    8b86:	4662      	moveq	r2, ip
    8b88:	f101 0104 	add.w	r1, r1, #4
    8b8c:	f004 03c0 	and.w	r3, r4, #192	; 0xc0
    8b90:	f102 0c01 	add.w	ip, r2, #1
    8b94:	2b80      	cmp	r3, #128	; 0x80
    8b96:	bf08      	it	eq
    8b98:	4662      	moveq	r2, ip
    8b9a:	f1a0 0004 	sub.w	r0, r0, #4
    8b9e:	4603      	mov	r3, r0
    8ba0:	2800      	cmp	r0, #0
    8ba2:	4610      	mov	r0, r2
    8ba4:	468c      	mov	ip, r1
    8ba6:	4696      	mov	lr, r2
    8ba8:	9327      	str	r3, [sp, #156]	; 0x9c
    8baa:	f8cd c0a0 	str.w	ip, [sp, #160]	; 0xa0
    8bae:	9029      	str	r0, [sp, #164]	; 0xa4
    8bb0:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
    8bb4:	922b      	str	r2, [sp, #172]	; 0xac
    8bb6:	912a      	str	r1, [sp, #168]	; 0xa8
    8bb8:	d1c9      	bne.n	8b4e <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x352>
    8bba:	e7ff      	b.n	8bbc <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3c0>
    8bbc:	982a      	ldr	r0, [sp, #168]	; 0xa8
    8bbe:	992b      	ldr	r1, [sp, #172]	; 0xac
    8bc0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
    8bc2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    8bc4:	2b00      	cmp	r3, #0
    8bc6:	9026      	str	r0, [sp, #152]	; 0x98
    8bc8:	9125      	str	r1, [sp, #148]	; 0x94
    8bca:	922e      	str	r2, [sp, #184]	; 0xb8
    8bcc:	d011      	beq.n	8bf2 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3f6>
    8bce:	e7ff      	b.n	8bd0 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3d4>
    8bd0:	9826      	ldr	r0, [sp, #152]	; 0x98
    8bd2:	7801      	ldrb	r1, [r0, #0]
    8bd4:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8bd8:	9a25      	ldr	r2, [sp, #148]	; 0x94
    8bda:	1c53      	adds	r3, r2, #1
    8bdc:	2980      	cmp	r1, #128	; 0x80
    8bde:	bf08      	it	eq
    8be0:	461a      	moveq	r2, r3
    8be2:	992d      	ldr	r1, [sp, #180]	; 0xb4
    8be4:	2901      	cmp	r1, #1
    8be6:	4613      	mov	r3, r2
    8be8:	9224      	str	r2, [sp, #144]	; 0x90
    8bea:	932e      	str	r3, [sp, #184]	; 0xb8
    8bec:	f040 8140 	bne.w	8e70 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x674>
    8bf0:	e7ff      	b.n	8bf2 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3f6>
    8bf2:	982e      	ldr	r0, [sp, #184]	; 0xb8
    8bf4:	9932      	ldr	r1, [sp, #200]	; 0xc8
    8bf6:	1a08      	subs	r0, r1, r0
    8bf8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    8bfa:	6813      	ldr	r3, [r2, #0]
    8bfc:	4298      	cmp	r0, r3
    8bfe:	9323      	str	r3, [sp, #140]	; 0x8c
    8c00:	d30e      	bcc.n	8c20 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x424>
    8c02:	e7ff      	b.n	8c04 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x408>
    8c04:	9861      	ldr	r0, [sp, #388]	; 0x184
    8c06:	6980      	ldr	r0, [r0, #24]
    8c08:	9961      	ldr	r1, [sp, #388]	; 0x184
    8c0a:	69ca      	ldr	r2, [r1, #28]
    8c0c:	68d2      	ldr	r2, [r2, #12]
    8c0e:	9933      	ldr	r1, [sp, #204]	; 0xcc
    8c10:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    8c12:	9222      	str	r2, [sp, #136]	; 0x88
    8c14:	461a      	mov	r2, r3
    8c16:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
    8c1a:	47e0      	blx	ip
    8c1c:	905b      	str	r0, [sp, #364]	; 0x16c
    8c1e:	e627      	b.n	8870 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x74>
    8c20:	2000      	movs	r0, #0
    8c22:	992f      	ldr	r1, [sp, #188]	; 0xbc
    8c24:	07ca      	lsls	r2, r1, #31
    8c26:	2a00      	cmp	r2, #0
    8c28:	9021      	str	r0, [sp, #132]	; 0x84
    8c2a:	d16c      	bne.n	8d06 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x50a>
    8c2c:	e7ff      	b.n	8c2e <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x432>
    8c2e:	9832      	ldr	r0, [sp, #200]	; 0xc8
    8c30:	1e41      	subs	r1, r0, #1
    8c32:	f000 0203 	and.w	r2, r0, #3
    8c36:	2300      	movs	r3, #0
    8c38:	2903      	cmp	r1, #3
    8c3a:	f8dd c0c0 	ldr.w	ip, [sp, #192]	; 0xc0
    8c3e:	9220      	str	r2, [sp, #128]	; 0x80
    8c40:	911f      	str	r1, [sp, #124]	; 0x7c
    8c42:	931e      	str	r3, [sp, #120]	; 0x78
    8c44:	f8cd c074 	str.w	ip, [sp, #116]	; 0x74
    8c48:	d342      	bcc.n	8cd0 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x4d4>
    8c4a:	e7ff      	b.n	8c4c <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x450>
    8c4c:	9832      	ldr	r0, [sp, #200]	; 0xc8
    8c4e:	9920      	ldr	r1, [sp, #128]	; 0x80
    8c50:	1a42      	subs	r2, r0, r1
    8c52:	2300      	movs	r3, #0
    8c54:	f8dd c0c0 	ldr.w	ip, [sp, #192]	; 0xc0
    8c58:	931c      	str	r3, [sp, #112]	; 0x70
    8c5a:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
    8c5e:	921a      	str	r2, [sp, #104]	; 0x68
    8c60:	e7ff      	b.n	8c62 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x466>
    8c62:	981a      	ldr	r0, [sp, #104]	; 0x68
    8c64:	991b      	ldr	r1, [sp, #108]	; 0x6c
    8c66:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    8c68:	780b      	ldrb	r3, [r1, #0]
    8c6a:	f891 c001 	ldrb.w	ip, [r1, #1]
    8c6e:	f891 e002 	ldrb.w	lr, [r1, #2]
    8c72:	78cc      	ldrb	r4, [r1, #3]
    8c74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    8c78:	1c55      	adds	r5, r2, #1
    8c7a:	2b80      	cmp	r3, #128	; 0x80
    8c7c:	bf08      	it	eq
    8c7e:	462a      	moveq	r2, r5
    8c80:	f00c 03c0 	and.w	r3, ip, #192	; 0xc0
    8c84:	f102 0c01 	add.w	ip, r2, #1
    8c88:	2b80      	cmp	r3, #128	; 0x80
    8c8a:	bf08      	it	eq
    8c8c:	4662      	moveq	r2, ip
    8c8e:	f00e 03c0 	and.w	r3, lr, #192	; 0xc0
    8c92:	f102 0c01 	add.w	ip, r2, #1
    8c96:	2b80      	cmp	r3, #128	; 0x80
    8c98:	bf08      	it	eq
    8c9a:	4662      	moveq	r2, ip
    8c9c:	f101 0104 	add.w	r1, r1, #4
    8ca0:	f004 03c0 	and.w	r3, r4, #192	; 0xc0
    8ca4:	f102 0c01 	add.w	ip, r2, #1
    8ca8:	2b80      	cmp	r3, #128	; 0x80
    8caa:	bf08      	it	eq
    8cac:	4662      	moveq	r2, ip
    8cae:	f1a0 0004 	sub.w	r0, r0, #4
    8cb2:	4603      	mov	r3, r0
    8cb4:	2800      	cmp	r0, #0
    8cb6:	4610      	mov	r0, r2
    8cb8:	468c      	mov	ip, r1
    8cba:	4696      	mov	lr, r2
    8cbc:	931a      	str	r3, [sp, #104]	; 0x68
    8cbe:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
    8cc2:	901c      	str	r0, [sp, #112]	; 0x70
    8cc4:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    8cc8:	921e      	str	r2, [sp, #120]	; 0x78
    8cca:	911d      	str	r1, [sp, #116]	; 0x74
    8ccc:	d1c9      	bne.n	8c62 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x466>
    8cce:	e7ff      	b.n	8cd0 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x4d4>
    8cd0:	981d      	ldr	r0, [sp, #116]	; 0x74
    8cd2:	991e      	ldr	r1, [sp, #120]	; 0x78
    8cd4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8cd6:	9b20      	ldr	r3, [sp, #128]	; 0x80
    8cd8:	2b00      	cmp	r3, #0
    8cda:	9019      	str	r0, [sp, #100]	; 0x64
    8cdc:	9118      	str	r1, [sp, #96]	; 0x60
    8cde:	9221      	str	r2, [sp, #132]	; 0x84
    8ce0:	d011      	beq.n	8d06 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x50a>
    8ce2:	e7ff      	b.n	8ce4 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x4e8>
    8ce4:	9819      	ldr	r0, [sp, #100]	; 0x64
    8ce6:	7801      	ldrb	r1, [r0, #0]
    8ce8:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8cec:	9a18      	ldr	r2, [sp, #96]	; 0x60
    8cee:	1c53      	adds	r3, r2, #1
    8cf0:	2980      	cmp	r1, #128	; 0x80
    8cf2:	bf08      	it	eq
    8cf4:	461a      	moveq	r2, r3
    8cf6:	9920      	ldr	r1, [sp, #128]	; 0x80
    8cf8:	2901      	cmp	r1, #1
    8cfa:	4613      	mov	r3, r2
    8cfc:	9217      	str	r2, [sp, #92]	; 0x5c
    8cfe:	9321      	str	r3, [sp, #132]	; 0x84
    8d00:	f040 809a 	bne.w	8e38 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x63c>
    8d04:	e7ff      	b.n	8d06 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x50a>
    8d06:	9821      	ldr	r0, [sp, #132]	; 0x84
    8d08:	9932      	ldr	r1, [sp, #200]	; 0xc8
    8d0a:	1a40      	subs	r0, r0, r1
    8d0c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    8d0e:	4410      	add	r0, r2
    8d10:	9b61      	ldr	r3, [sp, #388]	; 0x184
    8d12:	f893 c020 	ldrb.w	ip, [r3, #32]
    8d16:	f04f 0e00 	mov.w	lr, #0
    8d1a:	f10c 0402 	add.w	r4, ip, #2
    8d1e:	f1bc 0f03 	cmp.w	ip, #3
    8d22:	bf08      	it	eq
    8d24:	2402      	moveq	r4, #2
    8d26:	f004 0c03 	and.w	ip, r4, #3
    8d2a:	9016      	str	r0, [sp, #88]	; 0x58
    8d2c:	f8cd e054 	str.w	lr, [sp, #84]	; 0x54
    8d30:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
    8d34:	9914      	ldr	r1, [sp, #80]	; 0x50
    8d36:	9a16      	ldr	r2, [sp, #88]	; 0x58
    8d38:	9b15      	ldr	r3, [sp, #84]	; 0x54
    8d3a:	9213      	str	r2, [sp, #76]	; 0x4c
    8d3c:	9312      	str	r3, [sp, #72]	; 0x48
    8d3e:	e8df f001 	tbb	[pc, r1]
    8d42:	0a02      	.short	0x0a02
    8d44:	0a0f      	.short	0x0a0f
    8d46:	9816      	ldr	r0, [sp, #88]	; 0x58
    8d48:	0841      	lsrs	r1, r0, #1
    8d4a:	1c42      	adds	r2, r0, #1
    8d4c:	0852      	lsrs	r2, r2, #1
    8d4e:	9213      	str	r2, [sp, #76]	; 0x4c
    8d50:	9112      	str	r1, [sp, #72]	; 0x48
    8d52:	e005      	b.n	8d60 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x564>
    8d54:	defe      	udf	#254	; 0xfe
    8d56:	2000      	movs	r0, #0
    8d58:	9916      	ldr	r1, [sp, #88]	; 0x58
    8d5a:	9013      	str	r0, [sp, #76]	; 0x4c
    8d5c:	9112      	str	r1, [sp, #72]	; 0x48
    8d5e:	e7ff      	b.n	8d60 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x564>
    8d60:	9812      	ldr	r0, [sp, #72]	; 0x48
    8d62:	9913      	ldr	r1, [sp, #76]	; 0x4c
    8d64:	9a61      	ldr	r2, [sp, #388]	; 0x184
    8d66:	f102 0318 	add.w	r3, r2, #24
    8d6a:	f102 0c1c 	add.w	ip, r2, #28
    8d6e:	46e6      	mov	lr, ip
    8d70:	1d14      	adds	r4, r2, #4
    8d72:	2500      	movs	r5, #0
    8d74:	9011      	str	r0, [sp, #68]	; 0x44
    8d76:	9110      	str	r1, [sp, #64]	; 0x40
    8d78:	930f      	str	r3, [sp, #60]	; 0x3c
    8d7a:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    8d7e:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8d82:	940c      	str	r4, [sp, #48]	; 0x30
    8d84:	950b      	str	r5, [sp, #44]	; 0x2c
    8d86:	e7ff      	b.n	8d88 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x58c>
    8d88:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8d8a:	9911      	ldr	r1, [sp, #68]	; 0x44
    8d8c:	4288      	cmp	r0, r1
    8d8e:	900a      	str	r0, [sp, #40]	; 0x28
    8d90:	d018      	beq.n	8dc4 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x5c8>
    8d92:	e7ff      	b.n	8d94 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x598>
    8d94:	980a      	ldr	r0, [sp, #40]	; 0x28
    8d96:	1c41      	adds	r1, r0, #1
    8d98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8d9a:	6810      	ldr	r0, [r2, #0]
    8d9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8d9e:	f8d3 c000 	ldr.w	ip, [r3]
    8da2:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    8da6:	f8de 4000 	ldr.w	r4, [lr]
    8daa:	f8dc c010 	ldr.w	ip, [ip, #16]
    8dae:	9109      	str	r1, [sp, #36]	; 0x24
    8db0:	4621      	mov	r1, r4
    8db2:	47e0      	blx	ip
    8db4:	2101      	movs	r1, #1
    8db6:	2800      	cmp	r0, #0
    8db8:	9809      	ldr	r0, [sp, #36]	; 0x24
    8dba:	915b      	str	r1, [sp, #364]	; 0x16c
    8dbc:	900b      	str	r0, [sp, #44]	; 0x2c
    8dbe:	f47f ad57 	bne.w	8870 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x74>
    8dc2:	e7e1      	b.n	8d88 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x58c>
    8dc4:	980c      	ldr	r0, [sp, #48]	; 0x30
    8dc6:	6801      	ldr	r1, [r0, #0]
    8dc8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8dca:	6810      	ldr	r0, [r2, #0]
    8dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    8dce:	f8d3 c000 	ldr.w	ip, [r3]
    8dd2:	f8dc c00c 	ldr.w	ip, [ip, #12]
    8dd6:	f8dd e0cc 	ldr.w	lr, [sp, #204]	; 0xcc
    8dda:	9108      	str	r1, [sp, #32]
    8ddc:	4671      	mov	r1, lr
    8dde:	9a32      	ldr	r2, [sp, #200]	; 0xc8
    8de0:	47e0      	blx	ip
    8de2:	2101      	movs	r1, #1
    8de4:	2800      	cmp	r0, #0
    8de6:	915b      	str	r1, [sp, #364]	; 0x16c
    8de8:	f47f ad42 	bne.w	8870 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x74>
    8dec:	e7ff      	b.n	8dee <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x5f2>
    8dee:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8df0:	6800      	ldr	r0, [r0, #0]
    8df2:	990e      	ldr	r1, [sp, #56]	; 0x38
    8df4:	680a      	ldr	r2, [r1, #0]
    8df6:	3210      	adds	r2, #16
    8df8:	2300      	movs	r3, #0
    8dfa:	9007      	str	r0, [sp, #28]
    8dfc:	9206      	str	r2, [sp, #24]
    8dfe:	9305      	str	r3, [sp, #20]
    8e00:	e7ff      	b.n	8e02 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x606>
    8e02:	9805      	ldr	r0, [sp, #20]
    8e04:	2100      	movs	r1, #0
    8e06:	9a10      	ldr	r2, [sp, #64]	; 0x40
    8e08:	4290      	cmp	r0, r2
    8e0a:	9004      	str	r0, [sp, #16]
    8e0c:	915b      	str	r1, [sp, #364]	; 0x16c
    8e0e:	f43f ad2f 	beq.w	8870 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x74>
    8e12:	e7ff      	b.n	8e14 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x618>
    8e14:	9804      	ldr	r0, [sp, #16]
    8e16:	1c41      	adds	r1, r0, #1
    8e18:	9a06      	ldr	r2, [sp, #24]
    8e1a:	6813      	ldr	r3, [r2, #0]
    8e1c:	9807      	ldr	r0, [sp, #28]
    8e1e:	f8dd c020 	ldr.w	ip, [sp, #32]
    8e22:	9103      	str	r1, [sp, #12]
    8e24:	4661      	mov	r1, ip
    8e26:	4798      	blx	r3
    8e28:	2101      	movs	r1, #1
    8e2a:	2800      	cmp	r0, #0
    8e2c:	9803      	ldr	r0, [sp, #12]
    8e2e:	915b      	str	r1, [sp, #364]	; 0x16c
    8e30:	9005      	str	r0, [sp, #20]
    8e32:	f47f ad1d 	bne.w	8870 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x74>
    8e36:	e7e4      	b.n	8e02 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x606>
    8e38:	9819      	ldr	r0, [sp, #100]	; 0x64
    8e3a:	7841      	ldrb	r1, [r0, #1]
    8e3c:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8e40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    8e42:	1c53      	adds	r3, r2, #1
    8e44:	2980      	cmp	r1, #128	; 0x80
    8e46:	bf08      	it	eq
    8e48:	461a      	moveq	r2, r3
    8e4a:	9920      	ldr	r1, [sp, #128]	; 0x80
    8e4c:	2902      	cmp	r1, #2
    8e4e:	4613      	mov	r3, r2
    8e50:	9202      	str	r2, [sp, #8]
    8e52:	9321      	str	r3, [sp, #132]	; 0x84
    8e54:	f43f af57 	beq.w	8d06 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x50a>
    8e58:	e7ff      	b.n	8e5a <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x65e>
    8e5a:	9819      	ldr	r0, [sp, #100]	; 0x64
    8e5c:	7881      	ldrb	r1, [r0, #2]
    8e5e:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8e62:	9a02      	ldr	r2, [sp, #8]
    8e64:	1c53      	adds	r3, r2, #1
    8e66:	2980      	cmp	r1, #128	; 0x80
    8e68:	bf08      	it	eq
    8e6a:	461a      	moveq	r2, r3
    8e6c:	9221      	str	r2, [sp, #132]	; 0x84
    8e6e:	e74a      	b.n	8d06 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x50a>
    8e70:	9826      	ldr	r0, [sp, #152]	; 0x98
    8e72:	7841      	ldrb	r1, [r0, #1]
    8e74:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8e78:	9a24      	ldr	r2, [sp, #144]	; 0x90
    8e7a:	1c53      	adds	r3, r2, #1
    8e7c:	2980      	cmp	r1, #128	; 0x80
    8e7e:	bf08      	it	eq
    8e80:	461a      	moveq	r2, r3
    8e82:	992d      	ldr	r1, [sp, #180]	; 0xb4
    8e84:	2902      	cmp	r1, #2
    8e86:	4613      	mov	r3, r2
    8e88:	9201      	str	r2, [sp, #4]
    8e8a:	932e      	str	r3, [sp, #184]	; 0xb8
    8e8c:	f43f aeb1 	beq.w	8bf2 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3f6>
    8e90:	e7ff      	b.n	8e92 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x696>
    8e92:	9826      	ldr	r0, [sp, #152]	; 0x98
    8e94:	7881      	ldrb	r1, [r0, #2]
    8e96:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    8e9a:	9a01      	ldr	r2, [sp, #4]
    8e9c:	1c53      	adds	r3, r2, #1
    8e9e:	2980      	cmp	r1, #128	; 0x80
    8ea0:	bf08      	it	eq
    8ea2:	461a      	moveq	r2, r3
    8ea4:	922e      	str	r2, [sp, #184]	; 0xb8
    8ea6:	e6a4      	b.n	8bf2 <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E+0x3f6>

00008ea8 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h7fbf59b3963cac8fE>:
    8ea8:	b081      	sub	sp, #4
    8eaa:	6802      	ldr	r2, [r0, #0]
    8eac:	6840      	ldr	r0, [r0, #4]
    8eae:	9000      	str	r0, [sp, #0]
    8eb0:	4608      	mov	r0, r1
    8eb2:	4611      	mov	r1, r2
    8eb4:	9a00      	ldr	r2, [sp, #0]
    8eb6:	b001      	add	sp, #4
    8eb8:	f7ff bca0 	b.w	87fc <_ZN4core3fmt9Formatter3pad17h30a0701a50ac9df4E>

00008ebc <_ZN4core6option18expect_none_failed17h6759d4401d28ac1fE>:
    8ebc:	b580      	push	{r7, lr}
    8ebe:	466f      	mov	r7, sp
    8ec0:	b08e      	sub	sp, #56	; 0x38
    8ec2:	f8d7 c008 	ldr.w	ip, [r7, #8]
    8ec6:	9000      	str	r0, [sp, #0]
    8ec8:	9101      	str	r1, [sp, #4]
    8eca:	9202      	str	r2, [sp, #8]
    8ecc:	9303      	str	r3, [sp, #12]
    8ece:	4668      	mov	r0, sp
    8ed0:	900a      	str	r0, [sp, #40]	; 0x28
    8ed2:	f648 60a9 	movw	r0, #36521	; 0x8ea9
    8ed6:	f2c0 0000 	movt	r0, #0
    8eda:	900b      	str	r0, [sp, #44]	; 0x2c
    8edc:	a802      	add	r0, sp, #8
    8ede:	900c      	str	r0, [sp, #48]	; 0x30
    8ee0:	f648 700f 	movw	r0, #36623	; 0x8f0f
    8ee4:	f2c0 0000 	movt	r0, #0
    8ee8:	900d      	str	r0, [sp, #52]	; 0x34
    8eea:	f248 607c 	movw	r0, #34428	; 0x867c
    8eee:	f2c0 0002 	movt	r0, #2
    8ef2:	9004      	str	r0, [sp, #16]
    8ef4:	2002      	movs	r0, #2
    8ef6:	9005      	str	r0, [sp, #20]
    8ef8:	2100      	movs	r1, #0
    8efa:	9106      	str	r1, [sp, #24]
    8efc:	9107      	str	r1, [sp, #28]
    8efe:	a90a      	add	r1, sp, #40	; 0x28
    8f00:	9108      	str	r1, [sp, #32]
    8f02:	9009      	str	r0, [sp, #36]	; 0x24
    8f04:	a804      	add	r0, sp, #16
    8f06:	4661      	mov	r1, ip
    8f08:	f7ff fc5a 	bl	87c0 <_ZN4core9panicking9panic_fmt17h1abf46b1849e1e64E>
    8f0c:	defe      	udf	#254	; 0xfe

00008f0e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hfa4813af48620bbbE>:
    8f0e:	b081      	sub	sp, #4
    8f10:	6802      	ldr	r2, [r0, #0]
    8f12:	6840      	ldr	r0, [r0, #4]
    8f14:	68c0      	ldr	r0, [r0, #12]
    8f16:	9000      	str	r0, [sp, #0]
    8f18:	4610      	mov	r0, r2
    8f1a:	9a00      	ldr	r2, [sp, #0]
    8f1c:	b001      	add	sp, #4
    8f1e:	4710      	bx	r2

00008f20 <_ZN4core5panic9PanicInfo8location17h6e90b1f5ec8cea30E>:
    8f20:	68c0      	ldr	r0, [r0, #12]
    8f22:	4770      	bx	lr

00008f24 <_ZN4core5panic8Location4file17hfc9aa9a4958c9c3aE>:
    8f24:	b081      	sub	sp, #4
    8f26:	6801      	ldr	r1, [r0, #0]
    8f28:	6840      	ldr	r0, [r0, #4]
    8f2a:	9000      	str	r0, [sp, #0]
    8f2c:	4608      	mov	r0, r1
    8f2e:	9900      	ldr	r1, [sp, #0]
    8f30:	b001      	add	sp, #4
    8f32:	4770      	bx	lr

00008f34 <_ZN4core5panic8Location4line17h81a396f742303977E>:
    8f34:	6880      	ldr	r0, [r0, #8]
    8f36:	4770      	bx	lr

00008f38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha89a753dca6cd9f4E>:
    #[rustc_const_stable(feature = "const_slice_len", since = "1.32.0")]
    #[inline]
    // SAFETY: const sound because we transmute out the length field as a usize (which it must be)
    #[allow(unused_attributes)]
    #[allow_internal_unstable(const_fn_union)]
    pub const fn len(&self) -> usize {
    8f38:	b084      	sub	sp, #16
    8f3a:	9002      	str	r0, [sp, #8]
    8f3c:	9103      	str	r1, [sp, #12]
        unsafe { crate::ptr::Repr { rust: self }.raw.len }
    8f3e:	9000      	str	r0, [sp, #0]
    8f40:	9101      	str	r1, [sp, #4]
    8f42:	9801      	ldr	r0, [sp, #4]
    }
    8f44:	b004      	add	sp, #16
    8f46:	4770      	bx	lr

00008f48 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8f48:	b580      	push	{r7, lr}
    8f4a:	466f      	mov	r7, sp
    8f4c:	b086      	sub	sp, #24
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8f4e:	f7ff fbfd 	bl	874c <_ZN6mynewt7sysinit17h1b1620554f4add73E>
    }
    */
    
    //  Start Bluetooth LE, including over-the-air firmware upgrade.  TODO: Create a safe wrapper for starting Bluetooth LE.
    extern { fn start_ble() -> i32; }
    let rc = unsafe { start_ble() };
    8f52:	f000 fbb5 	bl	96c0 <start_ble>
    8f56:	9005      	str	r0, [sp, #20]
    assert!(rc == 0, "BLE fail");
    8f58:	2800      	cmp	r0, #0
    8f5a:	d00c      	beq.n	8f76 <main+0x2e>
    8f5c:	e7ff      	b.n	8f5e <main+0x16>
    8f5e:	f248 608e 	movw	r0, #34446	; 0x868e
    8f62:	f2c0 0002 	movt	r0, #2
    8f66:	f248 62a8 	movw	r2, #34472	; 0x86a8
    8f6a:	f2c0 0202 	movt	r2, #2
    8f6e:	2108      	movs	r1, #8
    8f70:	f7ff fc0f 	bl	8792 <_ZN4core9panicking5panic17h692a68e116a8c946E>
    8f74:	defe      	udf	#254	; 0xfe
    8f76:	a803      	add	r0, sp, #12
    //      .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8f78:	9002      	str	r0, [sp, #8]
    8f7a:	f7ff fbfd 	bl	8778 <_ZN6mynewt6kernel2os15eventq_dflt_get17hee2ec5f38871c7e2E>
    8f7e:	f248 6196 	movw	r1, #34454	; 0x8696
    8f82:	f2c0 0102 	movt	r1, #2
    8f86:	f248 63b8 	movw	r3, #34488	; 0x86b8
    8f8a:	f2c0 0302 	movt	r3, #2
    8f8e:	2008      	movs	r0, #8
    8f90:	9a02      	ldr	r2, [sp, #8]
    8f92:	9001      	str	r0, [sp, #4]
    8f94:	4610      	mov	r0, r2
    8f96:	9a01      	ldr	r2, [sp, #4]
    8f98:	f000 f80e 	bl	8fb8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8475276e04d22ec4E>
        os::eventq_run(               //  Processing events...
    8f9c:	f7ff fbe3 	bl	8766 <_ZN6mynewt6kernel2os10eventq_run17h315affb69d21582dE>
    8fa0:	f248 619e 	movw	r1, #34462	; 0x869e
    8fa4:	f2c0 0102 	movt	r1, #2
    8fa8:	f248 63c8 	movw	r3, #34504	; 0x86c8
    8fac:	f2c0 0302 	movt	r3, #2
    8fb0:	9a01      	ldr	r2, [sp, #4]
    8fb2:	f7ff fb66 	bl	8682 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h56061f5b534d43a3E>
    loop {                            //  Loop forever...
    8fb6:	e7de      	b.n	8f76 <main+0x2e>

00008fb8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8475276e04d22ec4E>:
    pub fn expect(self, msg: &str) -> T {
    8fb8:	b580      	push	{r7, lr}
    8fba:	466f      	mov	r7, sp
    8fbc:	b08a      	sub	sp, #40	; 0x28
    8fbe:	9107      	str	r1, [sp, #28]
    8fc0:	9208      	str	r2, [sp, #32]
            Ok(t) => t,
    8fc2:	f8d0 c000 	ldr.w	ip, [r0]
    8fc6:	f1bc 0f00 	cmp.w	ip, #0
    8fca:	9305      	str	r3, [sp, #20]
    8fcc:	9204      	str	r2, [sp, #16]
    8fce:	9103      	str	r1, [sp, #12]
    8fd0:	9002      	str	r0, [sp, #8]
    8fd2:	d010      	beq.n	8ff6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8475276e04d22ec4E+0x3e>
    8fd4:	e7ff      	b.n	8fd6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8475276e04d22ec4E+0x1e>
            Err(e) => unwrap_failed(msg, &e),
    8fd6:	9802      	ldr	r0, [sp, #8]
    8fd8:	6841      	ldr	r1, [r0, #4]
    8fda:	9106      	str	r1, [sp, #24]
    8fdc:	4669      	mov	r1, sp
    8fde:	9a05      	ldr	r2, [sp, #20]
    8fe0:	600a      	str	r2, [r1, #0]
    8fe2:	f248 63ec 	movw	r3, #34540	; 0x86ec
    8fe6:	f2c0 0302 	movt	r3, #2
    8fea:	aa06      	add	r2, sp, #24
    8fec:	9803      	ldr	r0, [sp, #12]
    8fee:	9904      	ldr	r1, [sp, #16]
    8ff0:	f7ff ff64 	bl	8ebc <_ZN4core6option18expect_none_failed17h6759d4401d28ac1fE>
    8ff4:	defe      	udf	#254	; 0xfe
            Ok(t) => t,
    8ff6:	9802      	ldr	r0, [sp, #8]
    8ff8:	6841      	ldr	r1, [r0, #4]
    8ffa:	9109      	str	r1, [sp, #36]	; 0x24
    }
    8ffc:	4608      	mov	r0, r1
    8ffe:	b00a      	add	sp, #40	; 0x28
    9000:	bd80      	pop	{r7, pc}

00009002 <_ZN4core3ptr13drop_in_place17h6ae1af1416118836E>:
    9002:	b082      	sub	sp, #8
    9004:	9001      	str	r0, [sp, #4]
    9006:	b002      	add	sp, #8
    9008:	4770      	bx	lr

0000900a <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    900a:	b580      	push	{r7, lr}
    900c:	466f      	mov	r7, sp
    900e:	b08a      	sub	sp, #40	; 0x28
    9010:	9007      	str	r0, [sp, #28]
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    9012:	f248 61fc 	movw	r1, #34556	; 0x86fc
    9016:	f2c0 0102 	movt	r1, #2
    901a:	2206      	movs	r2, #6
    901c:	9003      	str	r0, [sp, #12]
    901e:	4608      	mov	r0, r1
    9020:	4611      	mov	r1, r2
    9022:	f7ff fb4c 	bl	86be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>
    if let Some(location) = info.location() {
    9026:	9803      	ldr	r0, [sp, #12]
    9028:	f7ff ff7a 	bl	8f20 <_ZN4core5panic9PanicInfo8location17h6e90b1f5ec8cea30E>
    902c:	9004      	str	r0, [sp, #16]
    902e:	9804      	ldr	r0, [sp, #16]
    9030:	2800      	cmp	r0, #0
    9032:	d10a      	bne.n	904a <rust_begin_unwind+0x40>
    9034:	e7ff      	b.n	9036 <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    9036:	f248 7002 	movw	r0, #34562	; 0x8702
    903a:	f2c0 0002 	movt	r0, #2
    903e:	2107      	movs	r1, #7
    9040:	f7ff fb3d 	bl	86be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>
    9044:	f7ff fb7d 	bl	8742 <_ZN6mynewt3sys7console5flush17h8491f76cc7401f62E>
    if let Some(location) = info.location() {
    9048:	e02c      	b.n	90a4 <rust_begin_unwind+0x9a>
    904a:	9804      	ldr	r0, [sp, #16]
    904c:	9008      	str	r0, [sp, #32]
        let file = location.file();
    904e:	9002      	str	r0, [sp, #8]
    9050:	f7ff ff68 	bl	8f24 <_ZN4core5panic8Location4file17hfc9aa9a4958c9c3aE>
    9054:	9106      	str	r1, [sp, #24]
    9056:	9005      	str	r0, [sp, #20]
        let line = location.line();
    9058:	9802      	ldr	r0, [sp, #8]
    905a:	f7ff ff6b 	bl	8f34 <_ZN4core5panic8Location4line17h81a396f742303977E>
    905e:	9009      	str	r0, [sp, #36]	; 0x24
        console::print("at ");       console::buffer(&file);
    9060:	f248 7109 	movw	r1, #34569	; 0x8709
    9064:	f2c0 0102 	movt	r1, #2
    9068:	2203      	movs	r2, #3
    906a:	9001      	str	r0, [sp, #4]
    906c:	4608      	mov	r0, r1
    906e:	4611      	mov	r1, r2
    9070:	f7ff fb25 	bl	86be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>
    9074:	9805      	ldr	r0, [sp, #20]
    9076:	9906      	ldr	r1, [sp, #24]
    9078:	f7ff fb44 	bl	8704 <_ZN6mynewt3sys7console6buffer17h35108561f938a421E>
        console::print(" line ");    console::printint(line as i32);
    907c:	f248 700c 	movw	r0, #34572	; 0x870c
    9080:	f2c0 0002 	movt	r0, #2
    9084:	2106      	movs	r1, #6
    9086:	f7ff fb1a 	bl	86be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>
    908a:	9801      	ldr	r0, [sp, #4]
    908c:	f7ff fb51 	bl	8732 <_ZN6mynewt3sys7console8printint17hbf799f23e9896db3E>
        console::print("\n");        console::flush();
    9090:	f248 7012 	movw	r0, #34578	; 0x8712
    9094:	f2c0 0002 	movt	r0, #2
    9098:	2101      	movs	r1, #1
    909a:	f7ff fb10 	bl	86be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>
    909e:	f7ff fb50 	bl	8742 <_ZN6mynewt3sys7console5flush17h8491f76cc7401f62E>
    if let Some(location) = info.location() {
    90a2:	e7ff      	b.n	90a4 <rust_begin_unwind+0x9a>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { llvm_asm!("bkpt" :::: "volatile") },
    90a4:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    90a6:	9803      	ldr	r0, [sp, #12]
    90a8:	f7ff ff3c 	bl	8f24 <_ZN4core5panic8Location4file17hfc9aa9a4958c9c3aE>
    90ac:	f000 f818 	bl	90e0 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h0816bf0a0366a198E>
    90b0:	f248 7114 	movw	r1, #34580	; 0x8714
    90b4:	f2c0 0102 	movt	r1, #2
    90b8:	f000 f81b 	bl	90f2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2738ac118120fc1fE>
    90bc:	6801      	ldr	r1, [r0, #0]
    90be:	6840      	ldr	r0, [r0, #4]
    90c0:	9000      	str	r0, [sp, #0]
    90c2:	4608      	mov	r0, r1
    90c4:	9900      	ldr	r1, [sp, #0]
    90c6:	f7ff fafa 	bl	86be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>
    console::print("\n");  console::flush();
    90ca:	f248 7012 	movw	r0, #34578	; 0x8712
    90ce:	f2c0 0002 	movt	r0, #2
    90d2:	2101      	movs	r1, #1
    90d4:	f7ff faf3 	bl	86be <_ZN6mynewt3sys7console5print17h7763e54cd0d26396E>
    90d8:	f7ff fb33 	bl	8742 <_ZN6mynewt3sys7console5flush17h8491f76cc7401f62E>
    //  Loop forever so that device won't restart.
    loop {}
    90dc:	e7ff      	b.n	90de <rust_begin_unwind+0xd4>
    90de:	e7fe      	b.n	90de <rust_begin_unwind+0xd4>

000090e0 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17h0816bf0a0366a198E>:
    /// print_if_string(&0);
    /// print_if_string(&"cookie monster".to_string());
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[inline]
    pub fn downcast_ref<T: Any>(&self) -> Option<&T> {
    90e0:	b580      	push	{r7, lr}
    90e2:	466f      	mov	r7, sp
    90e4:	b082      	sub	sp, #8
    90e6:	9000      	str	r0, [sp, #0]
    90e8:	9101      	str	r1, [sp, #4]
        Any::downcast_ref::<T>(self)
    90ea:	f000 f818 	bl	911e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17hc90ab95f8fe9867cE>
    }
    90ee:	b002      	add	sp, #8
    90f0:	bd80      	pop	{r7, pc}

000090f2 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2738ac118120fc1fE>:
    /// assert_eq!(x.unwrap(), "air"); // fails
    /// ```
    #[inline]
    #[track_caller]
    #[stable(feature = "rust1", since = "1.0.0")]
    pub fn unwrap(self) -> T {
    90f2:	b580      	push	{r7, lr}
    90f4:	466f      	mov	r7, sp
    90f6:	b084      	sub	sp, #16
    90f8:	9002      	str	r0, [sp, #8]
        match self {
            Some(val) => val,
    90fa:	9802      	ldr	r0, [sp, #8]
    90fc:	2800      	cmp	r0, #0
    90fe:	9101      	str	r1, [sp, #4]
    9100:	d109      	bne.n	9116 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2738ac118120fc1fE+0x24>
    9102:	e7ff      	b.n	9104 <_ZN4core6option15Option$LT$T$GT$6unwrap17h2738ac118120fc1fE+0x12>
macro_rules! panic {
    () => (
        $crate::panic!("explicit panic")
    );
    ($msg:literal) => (
        $crate::panicking::panic($msg)
    9104:	f248 7024 	movw	r0, #34596	; 0x8724
    9108:	f2c0 0002 	movt	r0, #2
    910c:	212b      	movs	r1, #43	; 0x2b
    910e:	9a01      	ldr	r2, [sp, #4]
    9110:	f7ff fb3f 	bl	8792 <_ZN4core9panicking5panic17h692a68e116a8c946E>
    9114:	defe      	udf	#254	; 0xfe
    9116:	9802      	ldr	r0, [sp, #8]
    9118:	9003      	str	r0, [sp, #12]
            None => panic!("called `Option::unwrap()` on a `None` value"),
        }
    }
    911a:	b004      	add	sp, #16
    911c:	bd80      	pop	{r7, pc}

0000911e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17hc90ab95f8fe9867cE>:
    pub fn downcast_ref<T: Any>(&self) -> Option<&T> {
    911e:	b580      	push	{r7, lr}
    9120:	466f      	mov	r7, sp
    9122:	b084      	sub	sp, #16
    9124:	9002      	str	r0, [sp, #8]
    9126:	9103      	str	r1, [sp, #12]
        if self.is::<T>() {
    9128:	9000      	str	r0, [sp, #0]
    912a:	f000 f80c 	bl	9146 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17h78f536f6529d6acdE>
    912e:	2800      	cmp	r0, #0
    9130:	d103      	bne.n	913a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17hc90ab95f8fe9867cE+0x1c>
    9132:	e7ff      	b.n	9134 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17hc90ab95f8fe9867cE+0x16>
    9134:	2000      	movs	r0, #0
            None
    9136:	9001      	str	r0, [sp, #4]
        if self.is::<T>() {
    9138:	e002      	b.n	9140 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17hc90ab95f8fe9867cE+0x22>
            unsafe { Some(&*(self as *const dyn Any as *const T)) }
    913a:	9800      	ldr	r0, [sp, #0]
    913c:	9001      	str	r0, [sp, #4]
        if self.is::<T>() {
    913e:	e7ff      	b.n	9140 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17hc90ab95f8fe9867cE+0x22>
    }
    9140:	9801      	ldr	r0, [sp, #4]
    9142:	b004      	add	sp, #16
    9144:	bd80      	pop	{r7, pc}

00009146 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17h78f536f6529d6acdE>:
    pub fn is<T: Any>(&self) -> bool {
    9146:	b580      	push	{r7, lr}
    9148:	466f      	mov	r7, sp
    914a:	b088      	sub	sp, #32
    914c:	9006      	str	r0, [sp, #24]
    914e:	9107      	str	r1, [sp, #28]
        let t = TypeId::of::<T>();
    9150:	9101      	str	r1, [sp, #4]
    9152:	9000      	str	r0, [sp, #0]
    9154:	f000 f80e 	bl	9174 <_ZN4core3any6TypeId2of17h678dcf5e90be79cdE>
    9158:	9103      	str	r1, [sp, #12]
    915a:	9002      	str	r0, [sp, #8]
        let concrete = self.type_id();
    915c:	9801      	ldr	r0, [sp, #4]
    915e:	68c1      	ldr	r1, [r0, #12]
    9160:	9800      	ldr	r0, [sp, #0]
    9162:	4788      	blx	r1
    9164:	9105      	str	r1, [sp, #20]
    9166:	9004      	str	r0, [sp, #16]
    9168:	a802      	add	r0, sp, #8
    916a:	a904      	add	r1, sp, #16
        t == concrete
    916c:	f000 f815 	bl	919a <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17hea2831b1242142eeE>
    }
    9170:	b008      	add	sp, #32
    9172:	bd80      	pop	{r7, pc}

00009174 <_ZN4core3any6TypeId2of17h678dcf5e90be79cdE>:
    /// assert_eq!(is_string(&0), false);
    /// assert_eq!(is_string(&"cookie monster".to_string()), true);
    /// ```
    #[stable(feature = "rust1", since = "1.0.0")]
    #[rustc_const_unstable(feature = "const_type_id", issue = "41875")]
    pub const fn of<T: ?Sized + 'static>() -> TypeId {
    9174:	b084      	sub	sp, #16
    9176:	f64a 101e 	movw	r0, #43294	; 0xa91e
    917a:	f6c7 60f2 	movt	r0, #32498	; 0x7ef2
        TypeId { t: intrinsics::type_id::<T>() }
    917e:	9003      	str	r0, [sp, #12]
    9180:	f64b 40f4 	movw	r0, #48372	; 0xbcf4
    9184:	f6ce 40c7 	movt	r0, #60615	; 0xecc7
    9188:	9002      	str	r0, [sp, #8]
    918a:	9802      	ldr	r0, [sp, #8]
    918c:	9903      	ldr	r1, [sp, #12]
    918e:	9101      	str	r1, [sp, #4]
    9190:	9000      	str	r0, [sp, #0]
    }
    9192:	9800      	ldr	r0, [sp, #0]
    9194:	9901      	ldr	r1, [sp, #4]
    9196:	b004      	add	sp, #16
    9198:	4770      	bx	lr

0000919a <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17hea2831b1242142eeE>:
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]
    919a:	b084      	sub	sp, #16
    919c:	9000      	str	r0, [sp, #0]
    919e:	9101      	str	r1, [sp, #4]
    t: u64,
    91a0:	9102      	str	r1, [sp, #8]
    91a2:	9003      	str	r0, [sp, #12]
    91a4:	6802      	ldr	r2, [r0, #0]
    91a6:	6840      	ldr	r0, [r0, #4]
    91a8:	680b      	ldr	r3, [r1, #0]
    91aa:	6849      	ldr	r1, [r1, #4]
    91ac:	4048      	eors	r0, r1
    91ae:	ea82 0103 	eor.w	r1, r2, r3
    91b2:	4308      	orrs	r0, r1
    91b4:	fab0 f080 	clz	r0, r0
    91b8:	0940      	lsrs	r0, r0, #5
#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]
    91ba:	b004      	add	sp, #16
    91bc:	4770      	bx	lr
	...

000091c0 <console_flush>:
#endif  //  DISABLE_SEMIHOSTING
}

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
    91c0:	b508      	push	{r3, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
    91c2:	4b0b      	ldr	r3, [pc, #44]	; (91f0 <console_flush+0x30>)
    91c4:	781b      	ldrb	r3, [r3, #0]
    91c6:	b18b      	cbz	r3, 91ec <console_flush+0x2c>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
    91c8:	4b0a      	ldr	r3, [pc, #40]	; (91f4 <console_flush+0x34>)
    91ca:	6818      	ldr	r0, [r3, #0]
    91cc:	b170      	cbz	r0, 91ec <console_flush+0x2c>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
    91ce:	4b0a      	ldr	r3, [pc, #40]	; (91f8 <console_flush+0x38>)
    91d0:	685b      	ldr	r3, [r3, #4]
    91d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
    91d6:	b94b      	cbnz	r3, 91ec <console_flush+0x2c>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
    91d8:	4b06      	ldr	r3, [pc, #24]	; (91f4 <console_flush+0x34>)
    91da:	2200      	movs	r2, #0
    91dc:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
    91de:	4603      	mov	r3, r0
    while (m) {  //  For each mbuf in the chain...
    91e0:	e000      	b.n	91e4 <console_flush+0x24>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
    91e2:	68db      	ldr	r3, [r3, #12]
    while (m) {  //  For each mbuf in the chain...
    91e4:	2b00      	cmp	r3, #0
    91e6:	d1fc      	bne.n	91e2 <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
    91e8:	f000 fffa 	bl	a1e0 <os_mbuf_free_chain>
}
    91ec:	bd08      	pop	{r3, pc}
    91ee:	bf00      	nop
    91f0:	200000e8 	.word	0x200000e8
    91f4:	200004e0 	.word	0x200004e0
    91f8:	e000ed00 	.word	0xe000ed00

000091fc <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
    91fc:	b508      	push	{r3, lr}
    91fe:	f7ff ffdf 	bl	91c0 <console_flush>
    9202:	bd08      	pop	{r3, pc}

00009204 <console_buffer>:
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
    9204:	4770      	bx	lr

00009206 <console_printhex>:
    #define MAX_BYTE_LENGTH 2
    char buffer[MAX_BYTE_LENGTH + 1];
    int size = MAX_BYTE_LENGTH + 1;
    bool prefixByZero = true;
    int length = 0;
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
    9206:	2310      	movs	r3, #16
    int length = 0;
    9208:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
    920a:	e000      	b.n	920e <console_printhex+0x8>
    920c:	091b      	lsrs	r3, r3, #4
    920e:	b11b      	cbz	r3, 9218 <console_printhex+0x12>
        char digit = '0' + (char)(v / divisor);
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
        if (digit > '0' || length > 0 || prefixByZero) {
            if (length < size) {
    9210:	2a02      	cmp	r2, #2
    9212:	dcfb      	bgt.n	920c <console_printhex+0x6>
                buffer[length++] = digit;
    9214:	3201      	adds	r2, #1
    9216:	e7f9      	b.n	920c <console_printhex+0x6>
    }
    if (length == 0) { buffer[length++] = '0'; };
    if (length < size) buffer[length] = 0;
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
    console_buffer(buffer, strlen(buffer));
}
    9218:	4770      	bx	lr
	...

0000921c <console_printint>:

void console_printint(int i) {
    921c:	b508      	push	{r3, lr}
    //  Write an int i the output buffer.
    console_printf("%d", i);
    921e:	4601      	mov	r1, r0
    9220:	4801      	ldr	r0, [pc, #4]	; (9228 <console_printint+0xc>)
    9222:	f000 f86d 	bl	9300 <console_printf>
}
    9226:	bd08      	pop	{r3, pc}
    9228:	000299bc 	.word	0x000299bc

0000922c <console_dump>:
    console_printf("%s%d.%06d", neg ? "-" : "", i, d);   //  Combine the sign, integer and decimal parts
}

void console_dump(const uint8_t *buffer, unsigned int len) {
	//  Append "length" number of bytes from "buffer" to the output buffer in hex format.
    if (buffer == NULL || len == 0) { return; }
    922c:	b160      	cbz	r0, 9248 <console_dump+0x1c>
void console_dump(const uint8_t *buffer, unsigned int len) {
    922e:	b570      	push	{r4, r5, r6, lr}
    9230:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
    9232:	b141      	cbz	r1, 9246 <console_dump+0x1a>
    9234:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
    9236:	2400      	movs	r4, #0
    9238:	e003      	b.n	9242 <console_dump+0x16>
    923a:	5d30      	ldrb	r0, [r6, r4]
    923c:	f7ff ffe3 	bl	9206 <console_printhex>
    9240:	3401      	adds	r4, #1
    9242:	42ac      	cmp	r4, r5
    9244:	d3f9      	bcc.n	923a <console_dump+0xe>
}
    9246:	bd70      	pop	{r4, r5, r6, pc}
    9248:	4770      	bx	lr
	...

0000924c <console_out_nolock>:
    console_buffer(&c, 1);  //  Append the char to the output buffer.
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}

int console_out_nolock(int character) {
    char c = (char)character;
    924c:	b2c2      	uxtb	r2, r0
    if (g_silence_console) { return c; }
    924e:	4b07      	ldr	r3, [pc, #28]	; (926c <console_out_nolock+0x20>)
    9250:	781b      	ldrb	r3, [r3, #0]
    9252:	b92b      	cbnz	r3, 9260 <console_out_nolock+0x14>
    if ('\n' == c) {
    9254:	2a0a      	cmp	r2, #10
    9256:	d005      	beq.n	9264 <console_out_nolock+0x18>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
    9258:	4b05      	ldr	r3, [pc, #20]	; (9270 <console_out_nolock+0x24>)
    925a:	2201      	movs	r2, #1
    925c:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
    return character;
}
    925e:	4770      	bx	lr
    9260:	4610      	mov	r0, r2
    if (g_silence_console) { return c; }
    9262:	4770      	bx	lr
        console_is_midline = 0;
    9264:	4b02      	ldr	r3, [pc, #8]	; (9270 <console_out_nolock+0x24>)
    9266:	2200      	movs	r2, #0
    9268:	601a      	str	r2, [r3, #0]
    926a:	4770      	bx	lr
    926c:	20000504 	.word	0x20000504
    9270:	200004f4 	.word	0x200004f4

00009274 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
    9274:	2000      	movs	r0, #0
    9276:	4770      	bx	lr

00009278 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
    9278:	b570      	push	{r4, r5, r6, lr}
    927a:	4606      	mov	r6, r0
    927c:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
    927e:	2400      	movs	r4, #0
    9280:	42ac      	cmp	r4, r5
    9282:	da07      	bge.n	9294 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
    9284:	5d30      	ldrb	r0, [r6, r4]
    9286:	f7ff ffe1 	bl	924c <console_out_nolock>
    928a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    928e:	d001      	beq.n	9294 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
    9290:	3401      	adds	r4, #1
    9292:	e7f5      	b.n	9280 <console_write+0x8>
    }
}
    9294:	bd70      	pop	{r4, r5, r6, pc}

00009296 <console_blocking_mode>:

void console_blocking_mode(void) {
    9296:	b508      	push	{r3, lr}
    disable_buffer();
    9298:	f7ff ffb0 	bl	91fc <disable_buffer>
}
    929c:	bd08      	pop	{r3, pc}
	...

000092a0 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
    92a0:	b510      	push	{r4, lr}
    92a2:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    92a4:	4b12      	ldr	r3, [pc, #72]	; (92f0 <console_pkg_init+0x50>)
    92a6:	781b      	ldrb	r3, [r3, #0]
    92a8:	b153      	cbz	r3, 92c0 <console_pkg_init+0x20>

    os_eventq_init(&avail_queue);
    92aa:	4812      	ldr	r0, [pc, #72]	; (92f4 <console_pkg_init+0x54>)
    92ac:	f000 fe5e 	bl	9f6c <os_eventq_init>
    os_mutex_init(&console_write_lock);
    92b0:	4811      	ldr	r0, [pc, #68]	; (92f8 <console_pkg_init+0x58>)
    92b2:	f001 fcdd 	bl	ac70 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
    92b6:	f7ff ffdd 	bl	9274 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
    92ba:	b958      	cbnz	r0, 92d4 <console_pkg_init+0x34>
}
    92bc:	b002      	add	sp, #8
    92be:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    92c0:	f7fe ff7e 	bl	81c0 <hal_debugger_connected>
    92c4:	b100      	cbz	r0, 92c8 <console_pkg_init+0x28>
    92c6:	be01      	bkpt	0x0001
    92c8:	2300      	movs	r3, #0
    92ca:	461a      	mov	r2, r3
    92cc:	4619      	mov	r1, r3
    92ce:	4618      	mov	r0, r3
    92d0:	f000 fb0c 	bl	98ec <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
    92d4:	f7fe ff74 	bl	81c0 <hal_debugger_connected>
    92d8:	b100      	cbz	r0, 92dc <console_pkg_init+0x3c>
    92da:	be01      	bkpt	0x0001
    92dc:	2000      	movs	r0, #0
    92de:	9000      	str	r0, [sp, #0]
    92e0:	4b06      	ldr	r3, [pc, #24]	; (92fc <console_pkg_init+0x5c>)
    92e2:	681c      	ldr	r4, [r3, #0]
    92e4:	4603      	mov	r3, r0
    92e6:	4602      	mov	r2, r0
    92e8:	4601      	mov	r1, r0
    92ea:	47a0      	blx	r4
}
    92ec:	e7e6      	b.n	92bc <console_pkg_init+0x1c>
    92ee:	bf00      	nop
    92f0:	20000506 	.word	0x20000506
    92f4:	200004e4 	.word	0x200004e4
    92f8:	200004f8 	.word	0x200004f8
    92fc:	200000ec 	.word	0x200000ec

00009300 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
    9300:	b40f      	push	{r0, r1, r2, r3}
    9302:	b510      	push	{r4, lr}
    9304:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
    9306:	f000 f81f 	bl	9348 <console_get_ticks>
    930a:	b160      	cbz	r0, 9326 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
    930c:	4b0c      	ldr	r3, [pc, #48]	; (9340 <console_printf+0x40>)
    930e:	681b      	ldr	r3, [r3, #0]
    9310:	b10b      	cbz	r3, 9316 <console_printf+0x16>
    num_chars = 0;
    9312:	2400      	movs	r4, #0
    9314:	e008      	b.n	9328 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
    9316:	f002 f85d 	bl	b3d4 <os_time_get>
    931a:	4601      	mov	r1, r0
    931c:	4809      	ldr	r0, [pc, #36]	; (9344 <console_printf+0x44>)
    931e:	f002 fd9f 	bl	be60 <printf>
    9322:	4604      	mov	r4, r0
    9324:	e000      	b.n	9328 <console_printf+0x28>
    num_chars = 0;
    9326:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
    9328:	a905      	add	r1, sp, #20
    932a:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
    932c:	9804      	ldr	r0, [sp, #16]
    932e:	f002 fdd5 	bl	bedc <vprintf>
    va_end(args);

    return num_chars;
}
    9332:	4420      	add	r0, r4
    9334:	b002      	add	sp, #8
    9336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    933a:	b004      	add	sp, #16
    933c:	4770      	bx	lr
    933e:	bf00      	nop
    9340:	200004f4 	.word	0x200004f4
    9344:	00028750 	.word	0x00028750

00009348 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
    9348:	4b01      	ldr	r3, [pc, #4]	; (9350 <console_get_ticks+0x8>)
    934a:	7818      	ldrb	r0, [r3, #0]
    934c:	4770      	bx	lr
    934e:	bf00      	nop
    9350:	20000505 	.word	0x20000505

00009354 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
    9354:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
    9356:	f000 fac9 	bl	98ec <__assert_func>
	...

0000935c <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
    935c:	4b01      	ldr	r3, [pc, #4]	; (9364 <sysinit_start+0x8>)
    935e:	2201      	movs	r2, #1
    9360:	701a      	strb	r2, [r3, #0]
}
    9362:	4770      	bx	lr
    9364:	20000506 	.word	0x20000506

00009368 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
    9368:	4b01      	ldr	r3, [pc, #4]	; (9370 <sysinit_end+0x8>)
    936a:	2200      	movs	r2, #0
    936c:	701a      	strb	r2, [r3, #0]
}
    936e:	4770      	bx	lr
    9370:	20000506 	.word	0x20000506

00009374 <bleprph_on_reset>:
    return 0;
}

static void
bleprph_on_reset(int reason)
{
    9374:	b508      	push	{r3, lr}
    MODLOG_DFLT_ERROR("Resetting state; reason=%d\n", reason);
    9376:	4601      	mov	r1, r0
    9378:	4802      	ldr	r0, [pc, #8]	; (9384 <bleprph_on_reset+0x10>)
    937a:	f7ff ffc1 	bl	9300 <console_printf>
    MODLOG_DFLT_FLUSH();
    937e:	f7ff ff1f 	bl	91c0 <console_flush>
}
    9382:	bd08      	pop	{r3, pc}
    9384:	00028910 	.word	0x00028910

00009388 <bleprph_advertise>:
{
    9388:	b500      	push	{lr}
    938a:	b09f      	sub	sp, #124	; 0x7c
    rc = ble_hs_id_infer_auto(0, &own_addr_type);
    938c:	f10d 0173 	add.w	r1, sp, #115	; 0x73
    9390:	2000      	movs	r0, #0
    9392:	f008 f88b 	bl	114ac <ble_hs_id_infer_auto>
    if (rc != 0) {
    9396:	b140      	cbz	r0, 93aa <bleprph_advertise+0x22>
    9398:	4601      	mov	r1, r0
        MODLOG_DFLT_ERROR("error determining address type; rc=%d\n", rc);
    939a:	482d      	ldr	r0, [pc, #180]	; (9450 <bleprph_advertise+0xc8>)
    939c:	f7ff ffb0 	bl	9300 <console_printf>
        MODLOG_DFLT_FLUSH();
    93a0:	f7ff ff0e 	bl	91c0 <console_flush>
}
    93a4:	b01f      	add	sp, #124	; 0x7c
    93a6:	f85d fb04 	ldr.w	pc, [sp], #4
    memset(&fields, 0, sizeof fields);
    93aa:	2260      	movs	r2, #96	; 0x60
    93ac:	2100      	movs	r1, #0
    93ae:	a802      	add	r0, sp, #8
    93b0:	f002 fa25 	bl	b7fe <memset>
    fields.flags = BLE_HS_ADV_F_DISC_GEN |
    93b4:	2306      	movs	r3, #6
    93b6:	f88d 3008 	strb.w	r3, [sp, #8]
    fields.tx_pwr_lvl_is_present = 1;
    93ba:	2301      	movs	r3, #1
    93bc:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    fields.tx_pwr_lvl = BLE_HS_ADV_TX_PWR_LVL_AUTO;
    93c0:	2380      	movs	r3, #128	; 0x80
    93c2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    name = ble_svc_gap_device_name();
    93c6:	f00c ff95 	bl	162f4 <ble_svc_gap_device_name>
    fields.name = (uint8_t *)name;
    93ca:	9009      	str	r0, [sp, #36]	; 0x24
    fields.name_len = strlen(name);
    93cc:	f002 fa4c 	bl	b868 <strlen>
    93d0:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
    fields.name_is_complete = 1;
    93d4:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
    93d8:	f043 0301 	orr.w	r3, r3, #1
    93dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
    fields.uuids16 = (ble_uuid16_t[]){
    93e0:	4b1c      	ldr	r3, [pc, #112]	; (9454 <bleprph_advertise+0xcc>)
    93e2:	681a      	ldr	r2, [r3, #0]
    93e4:	ab1e      	add	r3, sp, #120	; 0x78
    93e6:	f843 2d04 	str.w	r2, [r3, #-4]!
    93ea:	9303      	str	r3, [sp, #12]
    fields.num_uuids16 = 1;
    93ec:	2301      	movs	r3, #1
    93ee:	f88d 3010 	strb.w	r3, [sp, #16]
    fields.uuids16_is_complete = 1;
    93f2:	f89d 3011 	ldrb.w	r3, [sp, #17]
    93f6:	f043 0301 	orr.w	r3, r3, #1
    93fa:	f88d 3011 	strb.w	r3, [sp, #17]
    rc = ble_gap_adv_set_fields(&fields);
    93fe:	a802      	add	r0, sp, #8
    9400:	f003 fe8f 	bl	d122 <ble_gap_adv_set_fields>
    if (rc != 0) {
    9404:	4601      	mov	r1, r0
    9406:	b128      	cbz	r0, 9414 <bleprph_advertise+0x8c>
        MODLOG_DFLT_ERROR("error setting advertisement data; rc=%d\n", rc);
    9408:	4813      	ldr	r0, [pc, #76]	; (9458 <bleprph_advertise+0xd0>)
    940a:	f7ff ff79 	bl	9300 <console_printf>
        MODLOG_DFLT_FLUSH();
    940e:	f7ff fed7 	bl	91c0 <console_flush>
        return;
    9412:	e7c7      	b.n	93a4 <bleprph_advertise+0x1c>
    memset(&adv_params, 0, sizeof adv_params);
    9414:	2100      	movs	r1, #0
    9416:	f8cd 106a 	str.w	r1, [sp, #106]	; 0x6a
    941a:	f8cd 106e 	str.w	r1, [sp, #110]	; 0x6e
    adv_params.conn_mode = BLE_GAP_CONN_MODE_UND;
    941e:	2302      	movs	r3, #2
    9420:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
    adv_params.disc_mode = BLE_GAP_DISC_MODE_GEN;
    9424:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
    rc = ble_gap_adv_start(own_addr_type, NULL, BLE_HS_FOREVER,
    9428:	f89d 0073 	ldrb.w	r0, [sp, #115]	; 0x73
    942c:	9101      	str	r1, [sp, #4]
    942e:	4b0b      	ldr	r3, [pc, #44]	; (945c <bleprph_advertise+0xd4>)
    9430:	9300      	str	r3, [sp, #0]
    9432:	ab1a      	add	r3, sp, #104	; 0x68
    9434:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    9438:	f003 fdec 	bl	d014 <ble_gap_adv_start>
    if (rc != 0) {
    943c:	4601      	mov	r1, r0
    943e:	2800      	cmp	r0, #0
    9440:	d0b0      	beq.n	93a4 <bleprph_advertise+0x1c>
        MODLOG_DFLT_ERROR("error enabling advertisement; rc=%d\n", rc);
    9442:	4807      	ldr	r0, [pc, #28]	; (9460 <bleprph_advertise+0xd8>)
    9444:	f7ff ff5c 	bl	9300 <console_printf>
        MODLOG_DFLT_FLUSH();
    9448:	f7ff feba 	bl	91c0 <console_flush>
        return;
    944c:	e7aa      	b.n	93a4 <bleprph_advertise+0x1c>
    944e:	bf00      	nop
    9450:	0002875c 	.word	0x0002875c
    9454:	00028758 	.word	0x00028758
    9458:	00028784 	.word	0x00028784
    945c:	00009509 	.word	0x00009509
    9460:	000287b0 	.word	0x000287b0

00009464 <bleprph_on_sync>:

static void
bleprph_on_sync(void)
{
    9464:	b508      	push	{r3, lr}
    int rc;

    /* Make sure we have proper identity address set (public preferred) */
    rc = ble_hs_util_ensure_addr(0);
    9466:	2000      	movs	r0, #0
    9468:	f00c ffb8 	bl	163dc <ble_hs_util_ensure_addr>
    assert(rc == 0);
    946c:	b910      	cbnz	r0, 9474 <bleprph_on_sync+0x10>

    /* Begin advertising. */
    bleprph_advertise();
    946e:	f7ff ff8b 	bl	9388 <bleprph_advertise>
}
    9472:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    9474:	f7fe fea4 	bl	81c0 <hal_debugger_connected>
    9478:	b100      	cbz	r0, 947c <bleprph_on_sync+0x18>
    947a:	be01      	bkpt	0x0001
    947c:	2300      	movs	r3, #0
    947e:	461a      	mov	r2, r3
    9480:	4619      	mov	r1, r3
    9482:	4618      	mov	r0, r3
    9484:	f000 fa32 	bl	98ec <__assert_func>

00009488 <bleprph_print_conn_desc>:
{
    9488:	b530      	push	{r4, r5, lr}
    948a:	b085      	sub	sp, #20
    948c:	4604      	mov	r4, r0
    MODLOG_DFLT_INFO("handle=%d our_ota_addr_type=%d our_ota_addr=",
    948e:	7c82      	ldrb	r2, [r0, #18]
    9490:	8c01      	ldrh	r1, [r0, #32]
    9492:	4818      	ldr	r0, [pc, #96]	; (94f4 <bleprph_print_conn_desc+0x6c>)
    9494:	f7ff ff34 	bl	9300 <console_printf>
    print_addr(desc->our_ota_addr.val);
    9498:	f104 0013 	add.w	r0, r4, #19
    949c:	f000 f962 	bl	9764 <print_addr>
    MODLOG_DFLT_INFO(" our_id_addr_type=%d our_id_addr=",
    94a0:	7921      	ldrb	r1, [r4, #4]
    94a2:	4815      	ldr	r0, [pc, #84]	; (94f8 <bleprph_print_conn_desc+0x70>)
    94a4:	f7ff ff2c 	bl	9300 <console_printf>
    print_addr(desc->our_id_addr.val);
    94a8:	1d60      	adds	r0, r4, #5
    94aa:	f000 f95b 	bl	9764 <print_addr>
    MODLOG_DFLT_INFO(" peer_ota_addr_type=%d peer_ota_addr=",
    94ae:	7e61      	ldrb	r1, [r4, #25]
    94b0:	4812      	ldr	r0, [pc, #72]	; (94fc <bleprph_print_conn_desc+0x74>)
    94b2:	f7ff ff25 	bl	9300 <console_printf>
    print_addr(desc->peer_ota_addr.val);
    94b6:	f104 001a 	add.w	r0, r4, #26
    94ba:	f000 f953 	bl	9764 <print_addr>
    MODLOG_DFLT_INFO(" peer_id_addr_type=%d peer_id_addr=",
    94be:	7ae1      	ldrb	r1, [r4, #11]
    94c0:	480f      	ldr	r0, [pc, #60]	; (9500 <bleprph_print_conn_desc+0x78>)
    94c2:	f7ff ff1d 	bl	9300 <console_printf>
    print_addr(desc->peer_id_addr.val);
    94c6:	f104 000c 	add.w	r0, r4, #12
    94ca:	f000 f94b 	bl	9764 <print_addr>
                desc->conn_itvl, desc->conn_latency,
    94ce:	8c61      	ldrh	r1, [r4, #34]	; 0x22
    94d0:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
                desc->supervision_timeout,
    94d2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
                desc->sec_state.encrypted,
    94d4:	7820      	ldrb	r0, [r4, #0]
    94d6:	f000 0401 	and.w	r4, r0, #1
                desc->sec_state.authenticated,
    94da:	f3c0 0540 	ubfx	r5, r0, #1, #1
                desc->sec_state.bonded);
    94de:	f3c0 0080 	ubfx	r0, r0, #2, #1
    MODLOG_DFLT_INFO(" conn_itvl=%d conn_latency=%d supervision_timeout=%d "
    94e2:	9002      	str	r0, [sp, #8]
    94e4:	9501      	str	r5, [sp, #4]
    94e6:	9400      	str	r4, [sp, #0]
    94e8:	4806      	ldr	r0, [pc, #24]	; (9504 <bleprph_print_conn_desc+0x7c>)
    94ea:	f7ff ff09 	bl	9300 <console_printf>
}
    94ee:	b005      	add	sp, #20
    94f0:	bd30      	pop	{r4, r5, pc}
    94f2:	bf00      	nop
    94f4:	0002892c 	.word	0x0002892c
    94f8:	0002895c 	.word	0x0002895c
    94fc:	00028980 	.word	0x00028980
    9500:	000289a8 	.word	0x000289a8
    9504:	000289cc 	.word	0x000289cc

00009508 <bleprph_gap_event>:
{
    9508:	b570      	push	{r4, r5, r6, lr}
    950a:	b090      	sub	sp, #64	; 0x40
    950c:	4604      	mov	r4, r0
    switch (event->type) {
    950e:	7803      	ldrb	r3, [r0, #0]
    9510:	2b11      	cmp	r3, #17
    9512:	f200 80bf 	bhi.w	9694 <bleprph_gap_event+0x18c>
    9516:	e8df f003 	tbb	[pc, r3]
    951a:	2e09      	.short	0x2e09
    951c:	bdbd41bd 	.word	0xbdbd41bd
    9520:	5ebdbdbd 	.word	0x5ebdbdbd
    9524:	bdbdbd68 	.word	0xbdbdbd68
    9528:	a6bd9c85 	.word	0xa6bd9c85
                    event->connect.status == 0 ? "established" : "failed",
    952c:	6842      	ldr	r2, [r0, #4]
        MODLOG_DFLT_INFO("connection %s; status=%d ",
    952e:	b9b2      	cbnz	r2, 955e <bleprph_gap_event+0x56>
    9530:	4959      	ldr	r1, [pc, #356]	; (9698 <bleprph_gap_event+0x190>)
    9532:	485a      	ldr	r0, [pc, #360]	; (969c <bleprph_gap_event+0x194>)
    9534:	f7ff fee4 	bl	9300 <console_printf>
        if (event->connect.status == 0) {
    9538:	6863      	ldr	r3, [r4, #4]
    953a:	b93b      	cbnz	r3, 954c <bleprph_gap_event+0x44>
            rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
    953c:	a905      	add	r1, sp, #20
    953e:	8920      	ldrh	r0, [r4, #8]
    9540:	f003 fcee 	bl	cf20 <ble_gap_conn_find>
            assert(rc == 0);
    9544:	b968      	cbnz	r0, 9562 <bleprph_gap_event+0x5a>
            bleprph_print_conn_desc(&desc);
    9546:	a805      	add	r0, sp, #20
    9548:	f7ff ff9e 	bl	9488 <bleprph_print_conn_desc>
        MODLOG_DFLT_INFO("\n");
    954c:	4854      	ldr	r0, [pc, #336]	; (96a0 <bleprph_gap_event+0x198>)
    954e:	f7ff fed7 	bl	9300 <console_printf>
        if (event->connect.status != 0) {
    9552:	6864      	ldr	r4, [r4, #4]
    9554:	b1fc      	cbz	r4, 9596 <bleprph_gap_event+0x8e>
            bleprph_advertise();
    9556:	f7ff ff17 	bl	9388 <bleprph_advertise>
        return 0;
    955a:	2400      	movs	r4, #0
    955c:	e01b      	b.n	9596 <bleprph_gap_event+0x8e>
        MODLOG_DFLT_INFO("connection %s; status=%d ",
    955e:	4951      	ldr	r1, [pc, #324]	; (96a4 <bleprph_gap_event+0x19c>)
    9560:	e7e7      	b.n	9532 <bleprph_gap_event+0x2a>
            assert(rc == 0);
    9562:	f7fe fe2d 	bl	81c0 <hal_debugger_connected>
    9566:	b100      	cbz	r0, 956a <bleprph_gap_event+0x62>
    9568:	be01      	bkpt	0x0001
    956a:	2300      	movs	r3, #0
    956c:	461a      	mov	r2, r3
    956e:	4619      	mov	r1, r3
    9570:	4618      	mov	r0, r3
    9572:	f000 f9bb 	bl	98ec <__assert_func>
        MODLOG_DFLT_INFO("disconnect; reason=%d ", event->disconnect.reason);
    9576:	6841      	ldr	r1, [r0, #4]
    9578:	484b      	ldr	r0, [pc, #300]	; (96a8 <bleprph_gap_event+0x1a0>)
    957a:	f7ff fec1 	bl	9300 <console_printf>
        bleprph_print_conn_desc(&event->disconnect.conn);
    957e:	f104 0008 	add.w	r0, r4, #8
    9582:	f7ff ff81 	bl	9488 <bleprph_print_conn_desc>
        MODLOG_DFLT_INFO("\n");
    9586:	4846      	ldr	r0, [pc, #280]	; (96a0 <bleprph_gap_event+0x198>)
    9588:	f7ff feba 	bl	9300 <console_printf>
        bleprph_advertise();
    958c:	f7ff fefc 	bl	9388 <bleprph_advertise>
        MODLOG_DFLT_FLUSH();
    9590:	f7ff fe16 	bl	91c0 <console_flush>
        return 0;
    9594:	2400      	movs	r4, #0
}
    9596:	4620      	mov	r0, r4
    9598:	b010      	add	sp, #64	; 0x40
    959a:	bd70      	pop	{r4, r5, r6, pc}
        MODLOG_DFLT_INFO("connection updated; status=%d ",
    959c:	6841      	ldr	r1, [r0, #4]
    959e:	4843      	ldr	r0, [pc, #268]	; (96ac <bleprph_gap_event+0x1a4>)
    95a0:	f7ff feae 	bl	9300 <console_printf>
        rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
    95a4:	a905      	add	r1, sp, #20
    95a6:	8920      	ldrh	r0, [r4, #8]
    95a8:	f003 fcba 	bl	cf20 <ble_gap_conn_find>
        assert(rc == 0);
    95ac:	4604      	mov	r4, r0
    95ae:	b940      	cbnz	r0, 95c2 <bleprph_gap_event+0xba>
        bleprph_print_conn_desc(&desc);
    95b0:	a805      	add	r0, sp, #20
    95b2:	f7ff ff69 	bl	9488 <bleprph_print_conn_desc>
        MODLOG_DFLT_INFO("\n");
    95b6:	483a      	ldr	r0, [pc, #232]	; (96a0 <bleprph_gap_event+0x198>)
    95b8:	f7ff fea2 	bl	9300 <console_printf>
        MODLOG_DFLT_FLUSH();
    95bc:	f7ff fe00 	bl	91c0 <console_flush>
        return 0;
    95c0:	e7e9      	b.n	9596 <bleprph_gap_event+0x8e>
        assert(rc == 0);
    95c2:	f7fe fdfd 	bl	81c0 <hal_debugger_connected>
    95c6:	b100      	cbz	r0, 95ca <bleprph_gap_event+0xc2>
    95c8:	be01      	bkpt	0x0001
    95ca:	2300      	movs	r3, #0
    95cc:	461a      	mov	r2, r3
    95ce:	4619      	mov	r1, r3
    95d0:	4618      	mov	r0, r3
    95d2:	f000 f98b 	bl	98ec <__assert_func>
        MODLOG_DFLT_INFO("advertise complete; reason=%d",
    95d6:	6841      	ldr	r1, [r0, #4]
    95d8:	4835      	ldr	r0, [pc, #212]	; (96b0 <bleprph_gap_event+0x1a8>)
    95da:	f7ff fe91 	bl	9300 <console_printf>
        bleprph_advertise();
    95de:	f7ff fed3 	bl	9388 <bleprph_advertise>
        MODLOG_DFLT_FLUSH();
    95e2:	f7ff fded 	bl	91c0 <console_flush>
        return 0;
    95e6:	2400      	movs	r4, #0
    95e8:	e7d5      	b.n	9596 <bleprph_gap_event+0x8e>
        MODLOG_DFLT_INFO("encryption change event; status=%d ",
    95ea:	6841      	ldr	r1, [r0, #4]
    95ec:	4831      	ldr	r0, [pc, #196]	; (96b4 <bleprph_gap_event+0x1ac>)
    95ee:	f7ff fe87 	bl	9300 <console_printf>
        rc = ble_gap_conn_find(event->connect.conn_handle, &desc);
    95f2:	a905      	add	r1, sp, #20
    95f4:	8920      	ldrh	r0, [r4, #8]
    95f6:	f003 fc93 	bl	cf20 <ble_gap_conn_find>
        assert(rc == 0);
    95fa:	4604      	mov	r4, r0
    95fc:	b940      	cbnz	r0, 9610 <bleprph_gap_event+0x108>
        bleprph_print_conn_desc(&desc);
    95fe:	a805      	add	r0, sp, #20
    9600:	f7ff ff42 	bl	9488 <bleprph_print_conn_desc>
        MODLOG_DFLT_INFO("\n");
    9604:	4826      	ldr	r0, [pc, #152]	; (96a0 <bleprph_gap_event+0x198>)
    9606:	f7ff fe7b 	bl	9300 <console_printf>
        MODLOG_DFLT_FLUSH();
    960a:	f7ff fdd9 	bl	91c0 <console_flush>
        return 0;
    960e:	e7c2      	b.n	9596 <bleprph_gap_event+0x8e>
        assert(rc == 0);
    9610:	f7fe fdd6 	bl	81c0 <hal_debugger_connected>
    9614:	b100      	cbz	r0, 9618 <bleprph_gap_event+0x110>
    9616:	be01      	bkpt	0x0001
    9618:	2300      	movs	r3, #0
    961a:	461a      	mov	r2, r3
    961c:	4619      	mov	r1, r3
    961e:	4618      	mov	r0, r3
    9620:	f000 f964 	bl	98ec <__assert_func>
                    event->subscribe.conn_handle,
    9624:	8881      	ldrh	r1, [r0, #4]
                    event->subscribe.attr_handle,
    9626:	88c2      	ldrh	r2, [r0, #6]
                    event->subscribe.reason,
    9628:	7a03      	ldrb	r3, [r0, #8]
                    event->subscribe.prev_notify,
    962a:	7a40      	ldrb	r0, [r0, #9]
    962c:	f000 0401 	and.w	r4, r0, #1
                    event->subscribe.cur_notify,
    9630:	f3c0 0540 	ubfx	r5, r0, #1, #1
                    event->subscribe.prev_indicate,
    9634:	f3c0 0680 	ubfx	r6, r0, #2, #1
                    event->subscribe.cur_indicate);
    9638:	f3c0 00c0 	ubfx	r0, r0, #3, #1
        MODLOG_DFLT_INFO("subscribe event; conn_handle=%d attr_handle=%d "
    963c:	9003      	str	r0, [sp, #12]
    963e:	9602      	str	r6, [sp, #8]
    9640:	9501      	str	r5, [sp, #4]
    9642:	9400      	str	r4, [sp, #0]
    9644:	481c      	ldr	r0, [pc, #112]	; (96b8 <bleprph_gap_event+0x1b0>)
    9646:	f7ff fe5b 	bl	9300 <console_printf>
        MODLOG_DFLT_FLUSH();
    964a:	f7ff fdb9 	bl	91c0 <console_flush>
        return 0;
    964e:	2400      	movs	r4, #0
    9650:	e7a1      	b.n	9596 <bleprph_gap_event+0x8e>
        MODLOG_DFLT_INFO("mtu update event; conn_handle=%d cid=%d mtu=%d\n",
    9652:	8903      	ldrh	r3, [r0, #8]
    9654:	88c2      	ldrh	r2, [r0, #6]
    9656:	8881      	ldrh	r1, [r0, #4]
    9658:	4818      	ldr	r0, [pc, #96]	; (96bc <bleprph_gap_event+0x1b4>)
    965a:	f7ff fe51 	bl	9300 <console_printf>
        MODLOG_DFLT_FLUSH();
    965e:	f7ff fdaf 	bl	91c0 <console_flush>
        return 0;
    9662:	2400      	movs	r4, #0
    9664:	e797      	b.n	9596 <bleprph_gap_event+0x8e>
        rc = ble_gap_conn_find(event->repeat_pairing.conn_handle, &desc);
    9666:	a905      	add	r1, sp, #20
    9668:	8880      	ldrh	r0, [r0, #4]
    966a:	f003 fc59 	bl	cf20 <ble_gap_conn_find>
        assert(rc == 0);
    966e:	b938      	cbnz	r0, 9680 <bleprph_gap_event+0x178>
        ble_store_util_delete_peer(&desc.peer_id_addr);
    9670:	f10d 001f 	add.w	r0, sp, #31
    9674:	f00a fe2c 	bl	142d0 <ble_store_util_delete_peer>
        MODLOG_DFLT_FLUSH();
    9678:	f7ff fda2 	bl	91c0 <console_flush>
        return BLE_GAP_REPEAT_PAIRING_RETRY;
    967c:	2401      	movs	r4, #1
    967e:	e78a      	b.n	9596 <bleprph_gap_event+0x8e>
        assert(rc == 0);
    9680:	f7fe fd9e 	bl	81c0 <hal_debugger_connected>
    9684:	b100      	cbz	r0, 9688 <bleprph_gap_event+0x180>
    9686:	be01      	bkpt	0x0001
    9688:	2300      	movs	r3, #0
    968a:	461a      	mov	r2, r3
    968c:	4619      	mov	r1, r3
    968e:	4618      	mov	r0, r3
    9690:	f000 f92c 	bl	98ec <__assert_func>
    return 0;
    9694:	2400      	movs	r4, #0
    9696:	e77e      	b.n	9596 <bleprph_gap_event+0x8e>
    9698:	000287d8 	.word	0x000287d8
    969c:	000287ec 	.word	0x000287ec
    96a0:	00029a58 	.word	0x00029a58
    96a4:	000287e4 	.word	0x000287e4
    96a8:	00028808 	.word	0x00028808
    96ac:	00028820 	.word	0x00028820
    96b0:	00028840 	.word	0x00028840
    96b4:	00028860 	.word	0x00028860
    96b8:	00028884 	.word	0x00028884
    96bc:	000288e0 	.word	0x000288e0

000096c0 <start_ble>:
 *
 * @return int 0
 */
int
start_ble(void)
{
    96c0:	b510      	push	{r4, lr}
    96c2:	b082      	sub	sp, #8
    MODLOG_DFLT_INFO("Starting BLE...\n");
    96c4:	481e      	ldr	r0, [pc, #120]	; (9740 <start_ble+0x80>)
    96c6:	f7ff fe1b 	bl	9300 <console_printf>
    MODLOG_DFLT_FLUSH();
    96ca:	f7ff fd79 	bl	91c0 <console_flush>
    static char ver_str[IMGMGR_NMGR_MAX_VER];
#endif
    int rc;

    /* Initialize the NimBLE host configuration. */
    ble_hs_cfg.reset_cb = bleprph_on_reset;
    96ce:	4b1d      	ldr	r3, [pc, #116]	; (9744 <start_ble+0x84>)
    96d0:	4a1d      	ldr	r2, [pc, #116]	; (9748 <start_ble+0x88>)
    96d2:	60da      	str	r2, [r3, #12]
    ble_hs_cfg.sync_cb = bleprph_on_sync;
    96d4:	4a1d      	ldr	r2, [pc, #116]	; (974c <start_ble+0x8c>)
    96d6:	611a      	str	r2, [r3, #16]
    ble_hs_cfg.gatts_register_cb = gatt_svr_register_cb;
    96d8:	4a1d      	ldr	r2, [pc, #116]	; (9750 <start_ble+0x90>)
    96da:	601a      	str	r2, [r3, #0]
    ble_hs_cfg.store_status_cb = ble_store_util_status_rr;
    96dc:	4a1d      	ldr	r2, [pc, #116]	; (9754 <start_ble+0x94>)
    96de:	621a      	str	r2, [r3, #32]

    rc = gatt_svr_init();
    96e0:	f000 f8da 	bl	9898 <gatt_svr_init>
    assert(rc == 0);
    96e4:	b9c0      	cbnz	r0, 9718 <start_ble+0x58>

    /* Set the default device name. */
    rc = ble_svc_gap_device_name_set("pinetime");
    96e6:	481c      	ldr	r0, [pc, #112]	; (9758 <start_ble+0x98>)
    96e8:	f00c fe08 	bl	162fc <ble_svc_gap_device_name_set>
    assert(rc == 0);
    96ec:	b9f0      	cbnz	r0, 972c <start_ble+0x6c>

#if MYNEWT_VAL(BLE_SVC_DIS_FIRMWARE_REVISION_READ_PERM) >= 0
    /* Set firmware version in DIS */
    imgr_my_version(&ver);
    96ee:	4668      	mov	r0, sp
    96f0:	f002 fe88 	bl	c404 <imgr_my_version>
    imgr_ver_str(&ver, ver_str);
    96f4:	4c19      	ldr	r4, [pc, #100]	; (975c <start_ble+0x9c>)
    96f6:	4621      	mov	r1, r4
    96f8:	4668      	mov	r0, sp
    96fa:	f002 fef7 	bl	c4ec <imgr_ver_str>
    ble_svc_dis_firmware_revision_set(ver_str);
    96fe:	4620      	mov	r0, r4
    9700:	f00c fd2c 	bl	1615c <ble_svc_dis_firmware_revision_set>

#if MYNEWT_VAL(BLEPRPH_LE_PHY_SUPPORT)
    phy_init();
#endif

    conf_load();
    9704:	f00d f81a 	bl	1673c <conf_load>
        if (rc == 0) {
            hal_system_start(entry);
        }
    }
#endif
    MODLOG_DFLT_INFO("BLE started\n");
    9708:	4815      	ldr	r0, [pc, #84]	; (9760 <start_ble+0xa0>)
    970a:	f7ff fdf9 	bl	9300 <console_printf>
    MODLOG_DFLT_FLUSH();
    970e:	f7ff fd57 	bl	91c0 <console_flush>
    return 0;
}
    9712:	2000      	movs	r0, #0
    9714:	b002      	add	sp, #8
    9716:	bd10      	pop	{r4, pc}
    assert(rc == 0);
    9718:	f7fe fd52 	bl	81c0 <hal_debugger_connected>
    971c:	b100      	cbz	r0, 9720 <start_ble+0x60>
    971e:	be01      	bkpt	0x0001
    9720:	2300      	movs	r3, #0
    9722:	461a      	mov	r2, r3
    9724:	4619      	mov	r1, r3
    9726:	4618      	mov	r0, r3
    9728:	f000 f8e0 	bl	98ec <__assert_func>
    assert(rc == 0);
    972c:	f7fe fd48 	bl	81c0 <hal_debugger_connected>
    9730:	b100      	cbz	r0, 9734 <start_ble+0x74>
    9732:	be01      	bkpt	0x0001
    9734:	2300      	movs	r3, #0
    9736:	461a      	mov	r2, r3
    9738:	4619      	mov	r1, r3
    973a:	4618      	mov	r0, r3
    973c:	f000 f8d6 	bl	98ec <__assert_func>
    9740:	00028a2c 	.word	0x00028a2c
    9744:	2000017c 	.word	0x2000017c
    9748:	00009375 	.word	0x00009375
    974c:	00009465 	.word	0x00009465
    9750:	00009849 	.word	0x00009849
    9754:	00014337 	.word	0x00014337
    9758:	00028a40 	.word	0x00028a40
    975c:	20000508 	.word	0x20000508
    9760:	00028a4c 	.word	0x00028a4c

00009764 <print_addr>:
    const uint8_t *u8p;

    u8p = addr;
    MODLOG_DFLT(INFO, "%02x:%02x:%02x:%02x:%02x:%02x",
                u8p[5], u8p[4], u8p[3], u8p[2], u8p[1], u8p[0]);
}
    9764:	4770      	bx	lr

00009766 <gatt_svr_chr_write>:
};

static int
gatt_svr_chr_write(struct os_mbuf *om, uint16_t min_len, uint16_t max_len,
                   void *dst, uint16_t *len)
{
    9766:	b510      	push	{r4, lr}
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
    9768:	8a04      	ldrh	r4, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
    976a:	428c      	cmp	r4, r1
    976c:	d309      	bcc.n	9782 <gatt_svr_chr_write+0x1c>
    976e:	4294      	cmp	r4, r2
    9770:	d809      	bhi.n	9786 <gatt_svr_chr_write+0x20>
    9772:	4619      	mov	r1, r3
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
    9774:	9b02      	ldr	r3, [sp, #8]
    9776:	f007 ff05 	bl	11584 <ble_hs_mbuf_to_flat>
    if (rc != 0) {
    977a:	4603      	mov	r3, r0
    977c:	b120      	cbz	r0, 9788 <gatt_svr_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
    977e:	230e      	movs	r3, #14
    9780:	e002      	b.n	9788 <gatt_svr_chr_write+0x22>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    9782:	230d      	movs	r3, #13
    9784:	e000      	b.n	9788 <gatt_svr_chr_write+0x22>
    9786:	230d      	movs	r3, #13
    }

    return 0;
}
    9788:	4618      	mov	r0, r3
    978a:	bd10      	pop	{r4, pc}

0000978c <gatt_svr_chr_access_sec_test>:

static int
gatt_svr_chr_access_sec_test(uint16_t conn_handle, uint16_t attr_handle,
                             struct ble_gatt_access_ctxt *ctxt,
                             void *arg)
{
    978c:	b530      	push	{r4, r5, lr}
    978e:	b085      	sub	sp, #20
    9790:	4614      	mov	r4, r2
    const ble_uuid_t *uuid;
    int rand_num;
    int rc;

    uuid = ctxt->chr->uuid;
    9792:	6893      	ldr	r3, [r2, #8]
    9794:	681d      	ldr	r5, [r3, #0]

    /* Determine which characteristic is being accessed by examining its
     * 128-bit UUID.
     */

    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_rand_uuid.u) == 0) {
    9796:	4929      	ldr	r1, [pc, #164]	; (983c <gatt_svr_chr_access_sec_test+0xb0>)
    9798:	4628      	mov	r0, r5
    979a:	f00a fe0f 	bl	143bc <ble_uuid_cmp>
    979e:	b9d8      	cbnz	r0, 97d8 <gatt_svr_chr_access_sec_test+0x4c>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
    97a0:	7823      	ldrb	r3, [r4, #0]
    97a2:	b96b      	cbnz	r3, 97c0 <gatt_svr_chr_access_sec_test+0x34>
}

#define RAND_MAX 0x7fffffff
__extern_inline int rand(void)
{
	return (int)lrand48();
    97a4:	f001 ffd6 	bl	b754 <lrand48>

        /* Respond with a 32-bit random number. */
        rand_num = rand();
    97a8:	a904      	add	r1, sp, #16
    97aa:	f841 0d04 	str.w	r0, [r1, #-4]!
        rc = os_mbuf_append(ctxt->om, &rand_num, sizeof rand_num);
    97ae:	2204      	movs	r2, #4
    97b0:	6860      	ldr	r0, [r4, #4]
    97b2:	f000 fd27 	bl	a204 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    97b6:	4603      	mov	r3, r0
    97b8:	b960      	cbnz	r0, 97d4 <gatt_svr_chr_access_sec_test+0x48>
    /* Unknown characteristic; the nimble stack should not have called this
     * function.
     */
    assert(0);
    return BLE_ATT_ERR_UNLIKELY;
}
    97ba:	4618      	mov	r0, r3
    97bc:	b005      	add	sp, #20
    97be:	bd30      	pop	{r4, r5, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
    97c0:	f7fe fcfe 	bl	81c0 <hal_debugger_connected>
    97c4:	b100      	cbz	r0, 97c8 <gatt_svr_chr_access_sec_test+0x3c>
    97c6:	be01      	bkpt	0x0001
    97c8:	2300      	movs	r3, #0
    97ca:	461a      	mov	r2, r3
    97cc:	4619      	mov	r1, r3
    97ce:	4618      	mov	r0, r3
    97d0:	f000 f88c 	bl	98ec <__assert_func>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    97d4:	2311      	movs	r3, #17
    97d6:	e7f0      	b.n	97ba <gatt_svr_chr_access_sec_test+0x2e>
    if (ble_uuid_cmp(uuid, &gatt_svr_chr_sec_test_static_uuid.u) == 0) {
    97d8:	4919      	ldr	r1, [pc, #100]	; (9840 <gatt_svr_chr_access_sec_test+0xb4>)
    97da:	4628      	mov	r0, r5
    97dc:	f00a fdee 	bl	143bc <ble_uuid_cmp>
    97e0:	bb08      	cbnz	r0, 9826 <gatt_svr_chr_access_sec_test+0x9a>
        switch (ctxt->op) {
    97e2:	7823      	ldrb	r3, [r4, #0]
    97e4:	b15b      	cbz	r3, 97fe <gatt_svr_chr_access_sec_test+0x72>
    97e6:	2b01      	cmp	r3, #1
    97e8:	d113      	bne.n	9812 <gatt_svr_chr_access_sec_test+0x86>
            rc = gatt_svr_chr_write(ctxt->om,
    97ea:	6860      	ldr	r0, [r4, #4]
    97ec:	2300      	movs	r3, #0
    97ee:	9300      	str	r3, [sp, #0]
    97f0:	4b14      	ldr	r3, [pc, #80]	; (9844 <gatt_svr_chr_access_sec_test+0xb8>)
    97f2:	2201      	movs	r2, #1
    97f4:	4611      	mov	r1, r2
    97f6:	f7ff ffb6 	bl	9766 <gatt_svr_chr_write>
    97fa:	4603      	mov	r3, r0
            return rc;
    97fc:	e7dd      	b.n	97ba <gatt_svr_chr_access_sec_test+0x2e>
            rc = os_mbuf_append(ctxt->om, &gatt_svr_sec_test_static_val,
    97fe:	2201      	movs	r2, #1
    9800:	4910      	ldr	r1, [pc, #64]	; (9844 <gatt_svr_chr_access_sec_test+0xb8>)
    9802:	6860      	ldr	r0, [r4, #4]
    9804:	f000 fcfe 	bl	a204 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    9808:	4603      	mov	r3, r0
    980a:	2800      	cmp	r0, #0
    980c:	d0d5      	beq.n	97ba <gatt_svr_chr_access_sec_test+0x2e>
    980e:	2311      	movs	r3, #17
    9810:	e7d3      	b.n	97ba <gatt_svr_chr_access_sec_test+0x2e>
            assert(0);
    9812:	f7fe fcd5 	bl	81c0 <hal_debugger_connected>
    9816:	b100      	cbz	r0, 981a <gatt_svr_chr_access_sec_test+0x8e>
    9818:	be01      	bkpt	0x0001
    981a:	2300      	movs	r3, #0
    981c:	461a      	mov	r2, r3
    981e:	4619      	mov	r1, r3
    9820:	4618      	mov	r0, r3
    9822:	f000 f863 	bl	98ec <__assert_func>
    assert(0);
    9826:	f7fe fccb 	bl	81c0 <hal_debugger_connected>
    982a:	b100      	cbz	r0, 982e <gatt_svr_chr_access_sec_test+0xa2>
    982c:	be01      	bkpt	0x0001
    982e:	2300      	movs	r3, #0
    9830:	461a      	mov	r2, r3
    9832:	4619      	mov	r1, r3
    9834:	4618      	mov	r0, r3
    9836:	f000 f859 	bl	98ec <__assert_func>
    983a:	bf00      	nop
    983c:	00028a5c 	.word	0x00028a5c
    9840:	00028a70 	.word	0x00028a70
    9844:	20000521 	.word	0x20000521

00009848 <gatt_svr_register_cb>:

void
gatt_svr_register_cb(struct ble_gatt_register_ctxt *ctxt, void *arg)
{
    9848:	b500      	push	{lr}
    984a:	b08b      	sub	sp, #44	; 0x2c
    char buf[BLE_UUID_STR_LEN];

    switch (ctxt->op) {
    984c:	7803      	ldrb	r3, [r0, #0]
    984e:	2b02      	cmp	r3, #2
    9850:	d015      	beq.n	987e <gatt_svr_register_cb+0x36>
    9852:	2b03      	cmp	r3, #3
    9854:	d019      	beq.n	988a <gatt_svr_register_cb+0x42>
    9856:	2b01      	cmp	r3, #1
    9858:	d009      	beq.n	986e <gatt_svr_register_cb+0x26>
                    ble_uuid_to_str(ctxt->dsc.dsc_def->uuid, buf),
                    ctxt->dsc.handle);
        break;

    default:
        assert(0);
    985a:	f7fe fcb1 	bl	81c0 <hal_debugger_connected>
    985e:	b100      	cbz	r0, 9862 <gatt_svr_register_cb+0x1a>
    9860:	be01      	bkpt	0x0001
    9862:	2300      	movs	r3, #0
    9864:	461a      	mov	r2, r3
    9866:	4619      	mov	r1, r3
    9868:	4618      	mov	r0, r3
    986a:	f000 f83f 	bl	98ec <__assert_func>
        MODLOG_DFLT(DEBUG, "registered service %s with handle=%d\n",
    986e:	6883      	ldr	r3, [r0, #8]
    9870:	4669      	mov	r1, sp
    9872:	6858      	ldr	r0, [r3, #4]
    9874:	f00a fdc0 	bl	143f8 <ble_uuid_to_str>
        break;
    }
}
    9878:	b00b      	add	sp, #44	; 0x2c
    987a:	f85d fb04 	ldr.w	pc, [sp], #4
        MODLOG_DFLT(DEBUG, "registering characteristic %s with "
    987e:	6883      	ldr	r3, [r0, #8]
    9880:	4669      	mov	r1, sp
    9882:	6818      	ldr	r0, [r3, #0]
    9884:	f00a fdb8 	bl	143f8 <ble_uuid_to_str>
        break;
    9888:	e7f6      	b.n	9878 <gatt_svr_register_cb+0x30>
        MODLOG_DFLT(DEBUG, "registering descriptor %s with handle=%d\n",
    988a:	6883      	ldr	r3, [r0, #8]
    988c:	4669      	mov	r1, sp
    988e:	6818      	ldr	r0, [r3, #0]
    9890:	f00a fdb2 	bl	143f8 <ble_uuid_to_str>
        break;
    9894:	e7f0      	b.n	9878 <gatt_svr_register_cb+0x30>
	...

00009898 <gatt_svr_init>:

int
gatt_svr_init(void)
{
    9898:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
    989a:	4806      	ldr	r0, [pc, #24]	; (98b4 <gatt_svr_init+0x1c>)
    989c:	f006 f836 	bl	f90c <ble_gatts_count_cfg>
    if (rc != 0) {
    98a0:	4603      	mov	r3, r0
    98a2:	b108      	cbz	r0, 98a8 <gatt_svr_init+0x10>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    98a4:	4618      	mov	r0, r3
    98a6:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
    98a8:	4802      	ldr	r0, [pc, #8]	; (98b4 <gatt_svr_init+0x1c>)
    98aa:	f006 f80b 	bl	f8c4 <ble_gatts_add_svcs>
    98ae:	4603      	mov	r3, r0
    98b0:	e7f8      	b.n	98a4 <gatt_svr_init+0xc>
    98b2:	bf00      	nop
    98b4:	00028a98 	.word	0x00028a98

000098b8 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
    98b8:	4a09      	ldr	r2, [pc, #36]	; (98e0 <NVIC_Relocate+0x28>)
    98ba:	4b0a      	ldr	r3, [pc, #40]	; (98e4 <NVIC_Relocate+0x2c>)
    98bc:	429a      	cmp	r2, r3
    98be:	d00a      	beq.n	98d6 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    98c0:	2300      	movs	r3, #0
    98c2:	e006      	b.n	98d2 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
    98c4:	4a07      	ldr	r2, [pc, #28]	; (98e4 <NVIC_Relocate+0x2c>)
    98c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
    98ca:	4a05      	ldr	r2, [pc, #20]	; (98e0 <NVIC_Relocate+0x28>)
    98cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
    98d0:	3301      	adds	r3, #1
    98d2:	2b35      	cmp	r3, #53	; 0x35
    98d4:	ddf6      	ble.n	98c4 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
    98d6:	4a02      	ldr	r2, [pc, #8]	; (98e0 <NVIC_Relocate+0x28>)
    98d8:	4b03      	ldr	r3, [pc, #12]	; (98e8 <NVIC_Relocate+0x30>)
    98da:	609a      	str	r2, [r3, #8]
#endif
}
    98dc:	4770      	bx	lr
    98de:	bf00      	nop
    98e0:	20000000 	.word	0x20000000
    98e4:	00008020 	.word	0x00008020
    98e8:	e000ed00 	.word	0xe000ed00

000098ec <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
    98ec:	b508      	push	{r3, lr}
    98ee:	4675      	mov	r5, lr
    98f0:	4604      	mov	r4, r0
    98f2:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
    98f4:	f001 fdec 	bl	b4d0 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
    98f8:	f7ff fccd 	bl	9296 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
    98fc:	b16c      	cbz	r4, 991a <__assert_func+0x2e>
    98fe:	4633      	mov	r3, r6
    9900:	4622      	mov	r2, r4
    9902:	4629      	mov	r1, r5
    9904:	4807      	ldr	r0, [pc, #28]	; (9924 <__assert_func+0x38>)
    9906:	f7ff fcfb 	bl	9300 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
    990a:	4b07      	ldr	r3, [pc, #28]	; (9928 <__assert_func+0x3c>)
    990c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    9910:	605a      	str	r2, [r3, #4]
    asm("isb");
    9912:	f3bf 8f6f 	isb	sy
    hal_system_reset();
    9916:	f7fe fc5b 	bl	81d0 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
    991a:	4629      	mov	r1, r5
    991c:	4803      	ldr	r0, [pc, #12]	; (992c <__assert_func+0x40>)
    991e:	f7ff fcef 	bl	9300 <console_printf>
    9922:	e7f2      	b.n	990a <__assert_func+0x1e>
    9924:	00028ac8 	.word	0x00028ac8
    9928:	e000ed00 	.word	0xe000ed00
    992c:	00028ab8 	.word	0x00028ab8

00009930 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
    9930:	b500      	push	{lr}
    9932:	b083      	sub	sp, #12
    9934:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
    9936:	f7ff fcae 	bl	9296 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
    993a:	4d1b      	ldr	r5, [pc, #108]	; (99a8 <os_default_irq+0x78>)
    993c:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
    993e:	6822      	ldr	r2, [r4, #0]
    9940:	f3c1 0108 	ubfx	r1, r1, #0, #9
    9944:	4819      	ldr	r0, [pc, #100]	; (99ac <os_default_irq+0x7c>)
    9946:	f7ff fcdb 	bl	9300 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
    994a:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
    994c:	6883      	ldr	r3, [r0, #8]
    994e:	6842      	ldr	r2, [r0, #4]
    9950:	6801      	ldr	r1, [r0, #0]
    9952:	68c0      	ldr	r0, [r0, #12]
    9954:	9000      	str	r0, [sp, #0]
    9956:	4816      	ldr	r0, [pc, #88]	; (99b0 <os_default_irq+0x80>)
    9958:	f7ff fcd2 	bl	9300 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
    995c:	6923      	ldr	r3, [r4, #16]
    995e:	9300      	str	r3, [sp, #0]
    9960:	68e3      	ldr	r3, [r4, #12]
    9962:	68a2      	ldr	r2, [r4, #8]
    9964:	6861      	ldr	r1, [r4, #4]
    9966:	4813      	ldr	r0, [pc, #76]	; (99b4 <os_default_irq+0x84>)
    9968:	f7ff fcca 	bl	9300 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
    996c:	6a23      	ldr	r3, [r4, #32]
    996e:	9300      	str	r3, [sp, #0]
    9970:	69e3      	ldr	r3, [r4, #28]
    9972:	69a2      	ldr	r2, [r4, #24]
    9974:	6961      	ldr	r1, [r4, #20]
    9976:	4810      	ldr	r0, [pc, #64]	; (99b8 <os_default_irq+0x88>)
    9978:	f7ff fcc2 	bl	9300 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
    997c:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
    997e:	6983      	ldr	r3, [r0, #24]
    9980:	6942      	ldr	r2, [r0, #20]
    9982:	6901      	ldr	r1, [r0, #16]
    9984:	69c0      	ldr	r0, [r0, #28]
    9986:	9000      	str	r0, [sp, #0]
    9988:	480c      	ldr	r0, [pc, #48]	; (99bc <os_default_irq+0x8c>)
    998a:	f7ff fcb9 	bl	9300 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
    998e:	6869      	ldr	r1, [r5, #4]
    9990:	6aea      	ldr	r2, [r5, #44]	; 0x2c
    9992:	6aab      	ldr	r3, [r5, #40]	; 0x28
    9994:	480a      	ldr	r0, [pc, #40]	; (99c0 <os_default_irq+0x90>)
    9996:	f7ff fcb3 	bl	9300 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
    999a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    999c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
    999e:	4809      	ldr	r0, [pc, #36]	; (99c4 <os_default_irq+0x94>)
    99a0:	f7ff fcae 	bl	9300 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
    99a4:	f7fe fc14 	bl	81d0 <hal_system_reset>
    99a8:	e000ed00 	.word	0xe000ed00
    99ac:	00028ae0 	.word	0x00028ae0
    99b0:	00028b14 	.word	0x00028b14
    99b4:	00028b48 	.word	0x00028b48
    99b8:	00028b7c 	.word	0x00028b7c
    99bc:	00028bb0 	.word	0x00028bb0
    99c0:	00028be4 	.word	0x00028be4
    99c4:	00028c0c 	.word	0x00028c0c

000099c8 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
    99c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    hal_watchdog_tickle();
    99ca:	f011 fa8f 	bl	1aeec <hal_watchdog_tickle>
    sanity_last = 0;
    99ce:	2500      	movs	r5, #0
    99d0:	e00e      	b.n	99f0 <os_idle_task+0x28>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
    99d2:	f001 fa5f 	bl	ae94 <os_sanity_run>
#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
    99d6:	f011 fa89 	bl	1aeec <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
            sanity_last = now;
    99da:	4625      	mov	r5, r4
    99dc:	e014      	b.n	9a08 <os_idle_task+0x40>
         * happens on next interval in case it was already performed on current
         * tick.
         */
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
        if ((int)sanity_to_next <= 0) {
            sanity_to_next += sanity_itvl_ticks;
    99de:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
    99e2:	e025      	b.n	9a30 <os_idle_task+0x68>
        }
        iticks = min(iticks, sanity_to_next);

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
    99e4:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
    99e6:	f010 fef7 	bl	1a7d8 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
    99ea:	4638      	mov	r0, r7
    99ec:	f001 fd76 	bl	b4dc <os_arch_restore_sr>
        ++g_os_idle_ctr;
    99f0:	4a15      	ldr	r2, [pc, #84]	; (9a48 <os_idle_task+0x80>)
    99f2:	6813      	ldr	r3, [r2, #0]
    99f4:	3301      	adds	r3, #1
    99f6:	6013      	str	r3, [r2, #0]
        now = os_time_get();
    99f8:	f001 fcec 	bl	b3d4 <os_time_get>
    99fc:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GEQ(now, sanity_last + sanity_itvl_ticks)) {
    99fe:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
    9a02:	1ac3      	subs	r3, r0, r3
    9a04:	2b00      	cmp	r3, #0
    9a06:	dae4      	bge.n	99d2 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
    9a08:	f001 fd62 	bl	b4d0 <os_arch_save_sr>
    9a0c:	4607      	mov	r7, r0
        now = os_time_get();
    9a0e:	f001 fce1 	bl	b3d4 <os_time_get>
    9a12:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
    9a14:	f001 fb80 	bl	b118 <os_sched_wakeup_ticks>
    9a18:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
    9a1a:	4630      	mov	r0, r6
    9a1c:	f000 f9a8 	bl	9d70 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
    9a20:	42a0      	cmp	r0, r4
    9a22:	bf28      	it	cs
    9a24:	4620      	movcs	r0, r4
        sanity_to_next = sanity_last + sanity_itvl_ticks - now;
    9a26:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
    9a2a:	1b9b      	subs	r3, r3, r6
        if ((int)sanity_to_next <= 0) {
    9a2c:	2b00      	cmp	r3, #0
    9a2e:	ddd6      	ble.n	99de <os_idle_task+0x16>
        iticks = min(iticks, sanity_to_next);
    9a30:	4298      	cmp	r0, r3
    9a32:	bf28      	it	cs
    9a34:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
    9a36:	280b      	cmp	r0, #11
    9a38:	d9d4      	bls.n	99e4 <os_idle_task+0x1c>
        } else if (iticks > MAX_IDLE_TICKS) {
    9a3a:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
    9a3e:	d9d2      	bls.n	99e6 <os_idle_task+0x1e>
            iticks = MAX_IDLE_TICKS;
    9a40:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
    9a44:	e7cf      	b.n	99e6 <os_idle_task+0x1e>
    9a46:	bf00      	nop
    9a48:	20000678 	.word	0x20000678

00009a4c <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
    9a4c:	b508      	push	{r3, lr}
    9a4e:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
    9a50:	2100      	movs	r1, #0
    9a52:	4608      	mov	r0, r1
    9a54:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
    9a56:	f7fe fbb3 	bl	81c0 <hal_debugger_connected>
    9a5a:	b100      	cbz	r0, 9a5e <os_main+0x12>
    9a5c:	be01      	bkpt	0x0001
    9a5e:	2300      	movs	r3, #0
    9a60:	461a      	mov	r2, r3
    9a62:	4619      	mov	r1, r3
    9a64:	4618      	mov	r0, r3
    9a66:	f7ff ff41 	bl	98ec <__assert_func>
	...

00009a6c <os_started>:
}
    9a6c:	4b01      	ldr	r3, [pc, #4]	; (9a74 <os_started+0x8>)
    9a6e:	6818      	ldr	r0, [r3, #0]
    9a70:	4770      	bx	lr
    9a72:	bf00      	nop
    9a74:	200026d0 	.word	0x200026d0

00009a78 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
    9a78:	b500      	push	{lr}
    9a7a:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
    9a7c:	2340      	movs	r3, #64	; 0x40
    9a7e:	9303      	str	r3, [sp, #12]
    9a80:	4b1b      	ldr	r3, [pc, #108]	; (9af0 <os_init_idle_task+0x78>)
    9a82:	9302      	str	r3, [sp, #8]
    9a84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9a88:	9301      	str	r3, [sp, #4]
    9a8a:	23ff      	movs	r3, #255	; 0xff
    9a8c:	9300      	str	r3, [sp, #0]
    9a8e:	2300      	movs	r3, #0
    9a90:	4a18      	ldr	r2, [pc, #96]	; (9af4 <os_init_idle_task+0x7c>)
    9a92:	4919      	ldr	r1, [pc, #100]	; (9af8 <os_init_idle_task+0x80>)
    9a94:	4819      	ldr	r0, [pc, #100]	; (9afc <os_init_idle_task+0x84>)
    9a96:	f001 fba3 	bl	b1e0 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
    9a9a:	b950      	cbnz	r0, 9ab2 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
    9a9c:	f001 fa3c 	bl	af18 <os_sanity_init>
    assert(rc == 0);
    9aa0:	b988      	cbnz	r0, 9ac6 <os_init_idle_task+0x4e>

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
    9aa2:	f247 5030 	movw	r0, #30000	; 0x7530
    9aa6:	f011 f9d9 	bl	1ae5c <hal_watchdog_init>
    assert(rc == 0);
    9aaa:	b9b0      	cbnz	r0, 9ada <os_init_idle_task+0x62>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
#endif
}
    9aac:	b005      	add	sp, #20
    9aae:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
    9ab2:	f7fe fb85 	bl	81c0 <hal_debugger_connected>
    9ab6:	b100      	cbz	r0, 9aba <os_init_idle_task+0x42>
    9ab8:	be01      	bkpt	0x0001
    9aba:	2300      	movs	r3, #0
    9abc:	461a      	mov	r2, r3
    9abe:	4619      	mov	r1, r3
    9ac0:	4618      	mov	r0, r3
    9ac2:	f7ff ff13 	bl	98ec <__assert_func>
    assert(rc == 0);
    9ac6:	f7fe fb7b 	bl	81c0 <hal_debugger_connected>
    9aca:	b100      	cbz	r0, 9ace <os_init_idle_task+0x56>
    9acc:	be01      	bkpt	0x0001
    9ace:	2300      	movs	r3, #0
    9ad0:	461a      	mov	r2, r3
    9ad2:	4619      	mov	r1, r3
    9ad4:	4618      	mov	r0, r3
    9ad6:	f7ff ff09 	bl	98ec <__assert_func>
    assert(rc == 0);
    9ada:	f7fe fb71 	bl	81c0 <hal_debugger_connected>
    9ade:	b100      	cbz	r0, 9ae2 <os_init_idle_task+0x6a>
    9ae0:	be01      	bkpt	0x0001
    9ae2:	2300      	movs	r3, #0
    9ae4:	461a      	mov	r2, r3
    9ae6:	4619      	mov	r1, r3
    9ae8:	4618      	mov	r0, r3
    9aea:	f7ff feff 	bl	98ec <__assert_func>
    9aee:	bf00      	nop
    9af0:	20000578 	.word	0x20000578
    9af4:	000099c9 	.word	0x000099c9
    9af8:	00028c30 	.word	0x00028c30
    9afc:	20000524 	.word	0x20000524

00009b00 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
    9b00:	b510      	push	{r4, lr}
    9b02:	b084      	sub	sp, #16
    9b04:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
    9b06:	4b2c      	ldr	r3, [pc, #176]	; (9bb8 <os_init+0xb8>)
    9b08:	2200      	movs	r2, #0
    9b0a:	601a      	str	r2, [r3, #0]
    9b0c:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
    9b0e:	4b2b      	ldr	r3, [pc, #172]	; (9bbc <os_init+0xbc>)
    9b10:	601a      	str	r2, [r3, #0]
    9b12:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
    9b14:	f000 fae2 	bl	a0dc <os_eventq_dflt_get>
    9b18:	f000 fa28 	bl	9f6c <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
    9b1c:	f000 fa1e 	bl	9f5c <os_dev_reset>

    err = os_arch_os_init();
    9b20:	f001 fd16 	bl	b550 <os_arch_os_init>
    assert(err == OS_OK);
    9b24:	bb00      	cbnz	r0, 9b68 <os_init+0x68>

    if (main_fn) {
    9b26:	b18c      	cbz	r4, 9b4c <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
    9b28:	f44f 6300 	mov.w	r3, #2048	; 0x800
    9b2c:	9303      	str	r3, [sp, #12]
    9b2e:	4b24      	ldr	r3, [pc, #144]	; (9bc0 <os_init+0xc0>)
    9b30:	9302      	str	r3, [sp, #8]
    9b32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9b36:	9301      	str	r3, [sp, #4]
    9b38:	237f      	movs	r3, #127	; 0x7f
    9b3a:	9300      	str	r3, [sp, #0]
    9b3c:	4623      	mov	r3, r4
    9b3e:	4a21      	ldr	r2, [pc, #132]	; (9bc4 <os_init+0xc4>)
    9b40:	4921      	ldr	r1, [pc, #132]	; (9bc8 <os_init+0xc8>)
    9b42:	4822      	ldr	r0, [pc, #136]	; (9bcc <os_init+0xcc>)
    9b44:	f001 fb4c 	bl	b1e0 <os_task_init>
    9b48:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
    9b4a:	b9b8      	cbnz	r0, 9b7c <os_init+0x7c>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
    9b4c:	f010 f884 	bl	19c58 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
    9b50:	2001      	movs	r0, #1
    9b52:	f000 f99f 	bl	9e94 <os_dev_initialize_all>
    9b56:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    9b58:	b9d0      	cbnz	r0, 9b90 <os_init+0x90>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
    9b5a:	2002      	movs	r0, #2
    9b5c:	f000 f99a 	bl	9e94 <os_dev_initialize_all>
    9b60:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    9b62:	b9f8      	cbnz	r0, 9ba4 <os_init+0xa4>
}
    9b64:	b004      	add	sp, #16
    9b66:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
    9b68:	f7fe fb2a 	bl	81c0 <hal_debugger_connected>
    9b6c:	b100      	cbz	r0, 9b70 <os_init+0x70>
    9b6e:	be01      	bkpt	0x0001
    9b70:	2300      	movs	r3, #0
    9b72:	461a      	mov	r2, r3
    9b74:	4619      	mov	r1, r3
    9b76:	4618      	mov	r0, r3
    9b78:	f7ff feb8 	bl	98ec <__assert_func>
        assert(err == 0);
    9b7c:	f7fe fb20 	bl	81c0 <hal_debugger_connected>
    9b80:	b100      	cbz	r0, 9b84 <os_init+0x84>
    9b82:	be01      	bkpt	0x0001
    9b84:	2300      	movs	r3, #0
    9b86:	461a      	mov	r2, r3
    9b88:	4619      	mov	r1, r3
    9b8a:	4618      	mov	r0, r3
    9b8c:	f7ff feae 	bl	98ec <__assert_func>
    assert(err == OS_OK);
    9b90:	f7fe fb16 	bl	81c0 <hal_debugger_connected>
    9b94:	b100      	cbz	r0, 9b98 <os_init+0x98>
    9b96:	be01      	bkpt	0x0001
    9b98:	2300      	movs	r3, #0
    9b9a:	461a      	mov	r2, r3
    9b9c:	4619      	mov	r1, r3
    9b9e:	4618      	mov	r0, r3
    9ba0:	f7ff fea4 	bl	98ec <__assert_func>
    assert(err == OS_OK);
    9ba4:	f7fe fb0c 	bl	81c0 <hal_debugger_connected>
    9ba8:	b100      	cbz	r0, 9bac <os_init+0xac>
    9baa:	be01      	bkpt	0x0001
    9bac:	2300      	movs	r3, #0
    9bae:	461a      	mov	r2, r3
    9bb0:	4619      	mov	r1, r3
    9bb2:	4618      	mov	r0, r3
    9bb4:	f7ff fe9a 	bl	98ec <__assert_func>
    9bb8:	200026d4 	.word	0x200026d4
    9bbc:	2000703c 	.word	0x2000703c
    9bc0:	20000680 	.word	0x20000680
    9bc4:	00009a4d 	.word	0x00009a4d
    9bc8:	00028c28 	.word	0x00028c28
    9bcc:	20002680 	.word	0x20002680

00009bd0 <os_start>:

void
os_start(void)
{
    9bd0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

#if MYNEWT_VAL(WATCHDOG_INTERVAL) > 0
    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
    9bd2:	f011 f983 	bl	1aedc <hal_watchdog_enable>
#endif

    err = os_arch_os_start();
    9bd6:	f001 fd1b 	bl	b610 <os_arch_os_start>
    assert(err == OS_OK);
    9bda:	b900      	cbnz	r0, 9bde <os_start+0xe>
#else
    assert(0);
#endif
}
    9bdc:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
    9bde:	f7fe faef 	bl	81c0 <hal_debugger_connected>
    9be2:	b100      	cbz	r0, 9be6 <os_start+0x16>
    9be4:	be01      	bkpt	0x0001
    9be6:	2300      	movs	r3, #0
    9be8:	461a      	mov	r2, r3
    9bea:	4619      	mov	r1, r3
    9bec:	4618      	mov	r0, r3
    9bee:	f7ff fe7d 	bl	98ec <__assert_func>
	...

00009bf4 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
    9bf4:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    9bf6:	4b10      	ldr	r3, [pc, #64]	; (9c38 <os_pkg_init+0x44>)
    9bf8:	781b      	ldrb	r3, [r3, #0]
    9bfa:	b14b      	cbz	r3, 9c10 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
    9bfc:	2003      	movs	r0, #3
    9bfe:	f000 f949 	bl	9e94 <os_dev_initialize_all>
    9c02:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
    9c04:	b970      	cbnz	r0, 9c24 <os_pkg_init+0x30>

    os_mempool_module_init();
    9c06:	f000 ff75 	bl	aaf4 <os_mempool_module_init>
    os_msys_init();
    9c0a:	f001 f817 	bl	ac3c <os_msys_init>
}
    9c0e:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    9c10:	f7fe fad6 	bl	81c0 <hal_debugger_connected>
    9c14:	b100      	cbz	r0, 9c18 <os_pkg_init+0x24>
    9c16:	be01      	bkpt	0x0001
    9c18:	2300      	movs	r3, #0
    9c1a:	461a      	mov	r2, r3
    9c1c:	4619      	mov	r1, r3
    9c1e:	4618      	mov	r0, r3
    9c20:	f7ff fe64 	bl	98ec <__assert_func>
    assert(err == OS_OK);
    9c24:	f7fe facc 	bl	81c0 <hal_debugger_connected>
    9c28:	b100      	cbz	r0, 9c2c <os_pkg_init+0x38>
    9c2a:	be01      	bkpt	0x0001
    9c2c:	2300      	movs	r3, #0
    9c2e:	461a      	mov	r2, r3
    9c30:	4619      	mov	r1, r3
    9c32:	4618      	mov	r0, r3
    9c34:	f7ff fe5a 	bl	98ec <__assert_func>
    9c38:	20000506 	.word	0x20000506

00009c3c <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
    9c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9c3e:	4604      	mov	r4, r0
    9c40:	460d      	mov	r5, r1
    9c42:	4617      	mov	r7, r2
    9c44:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
    9c46:	2220      	movs	r2, #32
    9c48:	2100      	movs	r1, #0
    9c4a:	f001 fdd8 	bl	b7fe <memset>
    c->c_ev.ev_cb = ev_cb;
    9c4e:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
    9c50:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
    9c52:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
    9c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00009c58 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
    9c58:	b538      	push	{r3, r4, r5, lr}
    9c5a:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
    9c5c:	f001 fc38 	bl	b4d0 <os_arch_save_sr>
    9c60:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
    9c62:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
    9c64:	b13b      	cbz	r3, 9c76 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    9c66:	69a2      	ldr	r2, [r4, #24]
    9c68:	b172      	cbz	r2, 9c88 <os_callout_stop+0x30>
    9c6a:	61d3      	str	r3, [r2, #28]
    9c6c:	69e3      	ldr	r3, [r4, #28]
    9c6e:	69a2      	ldr	r2, [r4, #24]
    9c70:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
    9c72:	2300      	movs	r3, #0
    9c74:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
    9c76:	6920      	ldr	r0, [r4, #16]
    9c78:	b110      	cbz	r0, 9c80 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
    9c7a:	4621      	mov	r1, r4
    9c7c:	f000 fa0d 	bl	a09a <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
    9c80:	4628      	mov	r0, r5
    9c82:	f001 fc2b 	bl	b4dc <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
    9c86:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
    9c88:	4a01      	ldr	r2, [pc, #4]	; (9c90 <os_callout_stop+0x38>)
    9c8a:	6053      	str	r3, [r2, #4]
    9c8c:	e7ee      	b.n	9c6c <os_callout_stop+0x14>
    9c8e:	bf00      	nop
    9c90:	200026d4 	.word	0x200026d4

00009c94 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
    9c94:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
    9c96:	6903      	ldr	r3, [r0, #16]
    9c98:	b1c3      	cbz	r3, 9ccc <os_callout_reset+0x38>
    9c9a:	4605      	mov	r5, r0
    9c9c:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
    9c9e:	2900      	cmp	r1, #0
    9ca0:	db34      	blt.n	9d0c <os_callout_reset+0x78>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
    9ca2:	f001 fc15 	bl	b4d0 <os_arch_save_sr>
    9ca6:	4606      	mov	r6, r0

    os_callout_stop(c);
    9ca8:	4628      	mov	r0, r5
    9caa:	f7ff ffd5 	bl	9c58 <os_callout_stop>

    if (ticks == 0) {
    9cae:	b904      	cbnz	r4, 9cb2 <os_callout_reset+0x1e>
        ticks = 1;
    9cb0:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
    9cb2:	f001 fb8f 	bl	b3d4 <os_time_get>
    9cb6:	4420      	add	r0, r4
    9cb8:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    9cba:	4b15      	ldr	r3, [pc, #84]	; (9d10 <os_callout_reset+0x7c>)
    9cbc:	681b      	ldr	r3, [r3, #0]
    9cbe:	b17b      	cbz	r3, 9ce0 <os_callout_reset+0x4c>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
    9cc0:	695a      	ldr	r2, [r3, #20]
    9cc2:	1a82      	subs	r2, r0, r2
    9cc4:	2a00      	cmp	r2, #0
    9cc6:	db0b      	blt.n	9ce0 <os_callout_reset+0x4c>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
    9cc8:	699b      	ldr	r3, [r3, #24]
    9cca:	e7f8      	b.n	9cbe <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
    9ccc:	f7fe fa78 	bl	81c0 <hal_debugger_connected>
    9cd0:	b100      	cbz	r0, 9cd4 <os_callout_reset+0x40>
    9cd2:	be01      	bkpt	0x0001
    9cd4:	2300      	movs	r3, #0
    9cd6:	461a      	mov	r2, r3
    9cd8:	4619      	mov	r1, r3
    9cda:	4618      	mov	r0, r3
    9cdc:	f7ff fe06 	bl	98ec <__assert_func>
            break;
        }
    }

    if (entry) {
    9ce0:	b15b      	cbz	r3, 9cfa <os_callout_reset+0x66>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
    9ce2:	69da      	ldr	r2, [r3, #28]
    9ce4:	61ea      	str	r2, [r5, #28]
    9ce6:	61ab      	str	r3, [r5, #24]
    9ce8:	69da      	ldr	r2, [r3, #28]
    9cea:	6015      	str	r5, [r2, #0]
    9cec:	3518      	adds	r5, #24
    9cee:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
    9cf0:	4630      	mov	r0, r6
    9cf2:	f001 fbf3 	bl	b4dc <os_arch_restore_sr>

    ret = OS_OK;
    9cf6:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
    9cf8:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    9cfa:	2300      	movs	r3, #0
    9cfc:	61ab      	str	r3, [r5, #24]
    9cfe:	4b04      	ldr	r3, [pc, #16]	; (9d10 <os_callout_reset+0x7c>)
    9d00:	685a      	ldr	r2, [r3, #4]
    9d02:	61ea      	str	r2, [r5, #28]
    9d04:	6015      	str	r5, [r2, #0]
    9d06:	3518      	adds	r5, #24
    9d08:	605d      	str	r5, [r3, #4]
    9d0a:	e7f1      	b.n	9cf0 <os_callout_reset+0x5c>
        ret = OS_EINVAL;
    9d0c:	2002      	movs	r0, #2
    return ret;
    9d0e:	e7f3      	b.n	9cf8 <os_callout_reset+0x64>
    9d10:	200026d4 	.word	0x200026d4

00009d14 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
    9d14:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
    9d16:	f001 fb5d 	bl	b3d4 <os_time_get>
    9d1a:	4605      	mov	r5, r0
    9d1c:	e00f      	b.n	9d3e <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    9d1e:	69e2      	ldr	r2, [r4, #28]
    9d20:	4b12      	ldr	r3, [pc, #72]	; (9d6c <os_callout_tick+0x58>)
    9d22:	605a      	str	r2, [r3, #4]
    9d24:	69e3      	ldr	r3, [r4, #28]
    9d26:	69a2      	ldr	r2, [r4, #24]
    9d28:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
    9d2a:	2300      	movs	r3, #0
    9d2c:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
    9d2e:	f001 fbd5 	bl	b4dc <os_arch_restore_sr>

        if (c) {
    9d32:	b1d4      	cbz	r4, 9d6a <os_callout_tick+0x56>
            if (c->c_evq) {
    9d34:	6920      	ldr	r0, [r4, #16]
    9d36:	b9a0      	cbnz	r0, 9d62 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
    9d38:	6863      	ldr	r3, [r4, #4]
    9d3a:	4620      	mov	r0, r4
    9d3c:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
    9d3e:	f001 fbc7 	bl	b4d0 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
    9d42:	4b0a      	ldr	r3, [pc, #40]	; (9d6c <os_callout_tick+0x58>)
    9d44:	681c      	ldr	r4, [r3, #0]
        if (c) {
    9d46:	2c00      	cmp	r4, #0
    9d48:	d0f1      	beq.n	9d2e <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
    9d4a:	6963      	ldr	r3, [r4, #20]
    9d4c:	1aeb      	subs	r3, r5, r3
    9d4e:	2b00      	cmp	r3, #0
    9d50:	db05      	blt.n	9d5e <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
    9d52:	69a3      	ldr	r3, [r4, #24]
    9d54:	2b00      	cmp	r3, #0
    9d56:	d0e2      	beq.n	9d1e <os_callout_tick+0xa>
    9d58:	69e2      	ldr	r2, [r4, #28]
    9d5a:	61da      	str	r2, [r3, #28]
    9d5c:	e7e2      	b.n	9d24 <os_callout_tick+0x10>
                c = NULL;
    9d5e:	2400      	movs	r4, #0
    9d60:	e7e5      	b.n	9d2e <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
    9d62:	4621      	mov	r1, r4
    9d64:	f000 f90f 	bl	9f86 <os_eventq_put>
    9d68:	e7e9      	b.n	9d3e <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
    9d6a:	bd38      	pop	{r3, r4, r5, pc}
    9d6c:	200026d4 	.word	0x200026d4

00009d70 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
    9d70:	b510      	push	{r4, lr}
    9d72:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
    9d74:	f001 fbb5 	bl	b4e2 <os_arch_in_critical>
    9d78:	b130      	cbz	r0, 9d88 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
    9d7a:	4b0b      	ldr	r3, [pc, #44]	; (9da8 <os_callout_wakeup_ticks+0x38>)
    9d7c:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
    9d7e:	b17b      	cbz	r3, 9da0 <os_callout_wakeup_ticks+0x30>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
    9d80:	6958      	ldr	r0, [r3, #20]
    9d82:	1b00      	subs	r0, r0, r4
    9d84:	d40a      	bmi.n	9d9c <os_callout_wakeup_ticks+0x2c>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
    9d86:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    9d88:	f7fe fa1a 	bl	81c0 <hal_debugger_connected>
    9d8c:	b100      	cbz	r0, 9d90 <os_callout_wakeup_ticks+0x20>
    9d8e:	be01      	bkpt	0x0001
    9d90:	2300      	movs	r3, #0
    9d92:	461a      	mov	r2, r3
    9d94:	4619      	mov	r1, r3
    9d96:	4618      	mov	r0, r3
    9d98:	f7ff fda8 	bl	98ec <__assert_func>
            rt = 0;     /* callout time is in the past */
    9d9c:	2000      	movs	r0, #0
    9d9e:	e7f2      	b.n	9d86 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
    9da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    9da4:	e7ef      	b.n	9d86 <os_callout_wakeup_ticks+0x16>
    9da6:	bf00      	nop
    9da8:	200026d4 	.word	0x200026d4

00009dac <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
    9dac:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
    9dae:	4b16      	ldr	r3, [pc, #88]	; (9e08 <os_dev_add+0x5c>)
    9db0:	681d      	ldr	r5, [r3, #0]
    9db2:	b115      	cbz	r5, 9dba <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    9db4:	462b      	mov	r3, r5
    prev_dev = NULL;
    9db6:	2400      	movs	r4, #0
    9db8:	e008      	b.n	9dcc <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    9dba:	4603      	mov	r3, r0
    9dbc:	f843 5f20 	str.w	r5, [r3, #32]!
    9dc0:	4a11      	ldr	r2, [pc, #68]	; (9e08 <os_dev_add+0x5c>)
    9dc2:	6053      	str	r3, [r2, #4]
    9dc4:	6010      	str	r0, [r2, #0]
        return (0);
    9dc6:	e012      	b.n	9dee <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
                   ((dev->od_stage == cur_dev->od_stage) &&
                    (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
    9dc8:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
    9dca:	6a1b      	ldr	r3, [r3, #32]
    9dcc:	b153      	cbz	r3, 9de4 <os_dev_add+0x38>
        if (dev == cur_dev) {
    9dce:	4283      	cmp	r3, r0
    9dd0:	d00d      	beq.n	9dee <os_dev_add+0x42>
        } else if (dev->od_stage < cur_dev->od_stage ||
    9dd2:	7e01      	ldrb	r1, [r0, #24]
    9dd4:	7e1a      	ldrb	r2, [r3, #24]
    9dd6:	4291      	cmp	r1, r2
    9dd8:	d304      	bcc.n	9de4 <os_dev_add+0x38>
    9dda:	d1f5      	bne.n	9dc8 <os_dev_add+0x1c>
                    (dev->od_priority < cur_dev->od_priority))) {
    9ddc:	7e41      	ldrb	r1, [r0, #25]
    9dde:	7e5a      	ldrb	r2, [r3, #25]
                   ((dev->od_stage == cur_dev->od_stage) &&
    9de0:	4291      	cmp	r1, r2
    9de2:	d2f1      	bcs.n	9dc8 <os_dev_add+0x1c>
    }

    if (prev_dev) {
    9de4:	b15c      	cbz	r4, 9dfe <os_dev_add+0x52>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    9de6:	6a23      	ldr	r3, [r4, #32]
    9de8:	6203      	str	r3, [r0, #32]
    9dea:	b11b      	cbz	r3, 9df4 <os_dev_add+0x48>
    9dec:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
    9dee:	2000      	movs	r0, #0
    9df0:	bc30      	pop	{r4, r5}
    9df2:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
    9df4:	f100 0320 	add.w	r3, r0, #32
    9df8:	4a03      	ldr	r2, [pc, #12]	; (9e08 <os_dev_add+0x5c>)
    9dfa:	6053      	str	r3, [r2, #4]
    9dfc:	e7f6      	b.n	9dec <os_dev_add+0x40>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    9dfe:	6205      	str	r5, [r0, #32]
    9e00:	4b01      	ldr	r3, [pc, #4]	; (9e08 <os_dev_add+0x5c>)
    9e02:	6018      	str	r0, [r3, #0]
    9e04:	e7f3      	b.n	9dee <os_dev_add+0x42>
    9e06:	bf00      	nop
    9e08:	200026dc 	.word	0x200026dc

00009e0c <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
    9e0c:	b510      	push	{r4, lr}
    9e0e:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
    9e10:	6903      	ldr	r3, [r0, #16]
    9e12:	6941      	ldr	r1, [r0, #20]
    9e14:	4798      	blx	r3
    if (rc != 0) {
    9e16:	4603      	mov	r3, r0
    9e18:	b128      	cbz	r0, 9e26 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
    9e1a:	7ee2      	ldrb	r2, [r4, #27]
    9e1c:	f012 0f08 	tst.w	r2, #8
    9e20:	d105      	bne.n	9e2e <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
    9e22:	2300      	movs	r3, #0
    9e24:	e003      	b.n	9e2e <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    9e26:	7ee2      	ldrb	r2, [r4, #27]
    9e28:	f042 0201 	orr.w	r2, r2, #1
    9e2c:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
    9e2e:	4618      	mov	r0, r3
    9e30:	bd10      	pop	{r4, pc}

00009e32 <os_dev_init>:
    dev->od_name = name;
    9e32:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
    9e34:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
    9e36:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
    9e38:	2300      	movs	r3, #0
    9e3a:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
    9e3c:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
    9e3e:	9a00      	ldr	r2, [sp, #0]
    9e40:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
    9e42:	9a01      	ldr	r2, [sp, #4]
    9e44:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
    9e46:	6003      	str	r3, [r0, #0]
    9e48:	6043      	str	r3, [r0, #4]
    9e4a:	6083      	str	r3, [r0, #8]
    9e4c:	60c3      	str	r3, [r0, #12]
}
    9e4e:	4618      	mov	r0, r3
    9e50:	4770      	bx	lr
	...

00009e54 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
    9e54:	b530      	push	{r4, r5, lr}
    9e56:	b083      	sub	sp, #12
    9e58:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
    9e5a:	9c07      	ldr	r4, [sp, #28]
    9e5c:	9401      	str	r4, [sp, #4]
    9e5e:	9c06      	ldr	r4, [sp, #24]
    9e60:	9400      	str	r4, [sp, #0]
    9e62:	f7ff ffe6 	bl	9e32 <os_dev_init>
    if (rc != 0) {
    9e66:	4603      	mov	r3, r0
    9e68:	b110      	cbz	r0, 9e70 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
    9e6a:	4618      	mov	r0, r3
    9e6c:	b003      	add	sp, #12
    9e6e:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
    9e70:	4628      	mov	r0, r5
    9e72:	f7ff ff9b 	bl	9dac <os_dev_add>
    if (rc != 0) {
    9e76:	4603      	mov	r3, r0
    9e78:	2800      	cmp	r0, #0
    9e7a:	d1f6      	bne.n	9e6a <os_dev_create+0x16>
    if (g_os_started) {
    9e7c:	4a04      	ldr	r2, [pc, #16]	; (9e90 <os_dev_create+0x3c>)
    9e7e:	6812      	ldr	r2, [r2, #0]
    9e80:	2a00      	cmp	r2, #0
    9e82:	d0f2      	beq.n	9e6a <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
    9e84:	4628      	mov	r0, r5
    9e86:	f7ff ffc1 	bl	9e0c <os_dev_initialize>
    9e8a:	4603      	mov	r3, r0
    return (rc);
    9e8c:	e7ed      	b.n	9e6a <os_dev_create+0x16>
    9e8e:	bf00      	nop
    9e90:	200026d0 	.word	0x200026d0

00009e94 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
    9e94:	b538      	push	{r3, r4, r5, lr}
    9e96:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9e98:	4b08      	ldr	r3, [pc, #32]	; (9ebc <os_dev_initialize_all+0x28>)
    9e9a:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
    9e9c:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9e9e:	e000      	b.n	9ea2 <os_dev_initialize_all+0xe>
    9ea0:	6a24      	ldr	r4, [r4, #32]
    9ea2:	b144      	cbz	r4, 9eb6 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
    9ea4:	7e23      	ldrb	r3, [r4, #24]
    9ea6:	42ab      	cmp	r3, r5
    9ea8:	d1fa      	bne.n	9ea0 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
    9eaa:	4620      	mov	r0, r4
    9eac:	f7ff ffae 	bl	9e0c <os_dev_initialize>
            if (rc) {
    9eb0:	4602      	mov	r2, r0
    9eb2:	2800      	cmp	r0, #0
    9eb4:	d0f4      	beq.n	9ea0 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
    9eb6:	4610      	mov	r0, r2
    9eb8:	bd38      	pop	{r3, r4, r5, pc}
    9eba:	bf00      	nop
    9ebc:	200026dc 	.word	0x200026dc

00009ec0 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
    9ec0:	b538      	push	{r3, r4, r5, lr}
    9ec2:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9ec4:	4b05      	ldr	r3, [pc, #20]	; (9edc <os_dev_lookup+0x1c>)
    9ec6:	681c      	ldr	r4, [r3, #0]
    9ec8:	b134      	cbz	r4, 9ed8 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
    9eca:	4629      	mov	r1, r5
    9ecc:	69e0      	ldr	r0, [r4, #28]
    9ece:	f001 fcbd 	bl	b84c <strcmp>
    9ed2:	b108      	cbz	r0, 9ed8 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
    9ed4:	6a24      	ldr	r4, [r4, #32]
    9ed6:	e7f7      	b.n	9ec8 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
    9ed8:	4620      	mov	r0, r4
    9eda:	bd38      	pop	{r3, r4, r5, pc}
    9edc:	200026dc 	.word	0x200026dc

00009ee0 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
    9ee0:	b570      	push	{r4, r5, r6, lr}
    9ee2:	460d      	mov	r5, r1
    9ee4:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
    9ee6:	f7ff ffeb 	bl	9ec0 <os_dev_lookup>
    if (dev == NULL) {
    9eea:	4604      	mov	r4, r0
    9eec:	b1a0      	cbz	r0, 9f18 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
    9eee:	7ec3      	ldrb	r3, [r0, #27]
    9ef0:	f013 0f01 	tst.w	r3, #1
    9ef4:	d012      	beq.n	9f1c <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
    9ef6:	6803      	ldr	r3, [r0, #0]
    9ef8:	b11b      	cbz	r3, 9f02 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
    9efa:	4632      	mov	r2, r6
    9efc:	4629      	mov	r1, r5
    9efe:	4798      	blx	r3
        if (rc != 0) {
    9f00:	b970      	cbnz	r0, 9f20 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
    9f02:	f001 fae5 	bl	b4d0 <os_arch_save_sr>
    ++dev->od_open_ref;
    9f06:	7ea3      	ldrb	r3, [r4, #26]
    9f08:	3301      	adds	r3, #1
    9f0a:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
    9f0c:	7ee3      	ldrb	r3, [r4, #27]
    9f0e:	f043 0302 	orr.w	r3, r3, #2
    9f12:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
    9f14:	f001 fae2 	bl	b4dc <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
    9f18:	4620      	mov	r0, r4
    9f1a:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
    9f1c:	2400      	movs	r4, #0
    9f1e:	e7fb      	b.n	9f18 <os_dev_open+0x38>
    return (NULL);
    9f20:	2400      	movs	r4, #0
    9f22:	e7f9      	b.n	9f18 <os_dev_open+0x38>

00009f24 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
    9f24:	b1b0      	cbz	r0, 9f54 <os_dev_close+0x30>
{
    9f26:	b510      	push	{r4, lr}
    9f28:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
    9f2a:	68c3      	ldr	r3, [r0, #12]
    9f2c:	b113      	cbz	r3, 9f34 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
    9f2e:	4798      	blx	r3
        if (rc != 0) {
    9f30:	4603      	mov	r3, r0
    9f32:	b968      	cbnz	r0, 9f50 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
    9f34:	f001 facc 	bl	b4d0 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
    9f38:	7ea3      	ldrb	r3, [r4, #26]
    9f3a:	3b01      	subs	r3, #1
    9f3c:	b2db      	uxtb	r3, r3
    9f3e:	76a3      	strb	r3, [r4, #26]
    9f40:	b91b      	cbnz	r3, 9f4a <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
    9f42:	7ee3      	ldrb	r3, [r4, #27]
    9f44:	f023 0306 	bic.w	r3, r3, #6
    9f48:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
    9f4a:	f001 fac7 	bl	b4dc <os_arch_restore_sr>

    return (0);
    9f4e:	2300      	movs	r3, #0
err:
    return (rc);
}
    9f50:	4618      	mov	r0, r3
    9f52:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
    9f54:	2302      	movs	r3, #2
}
    9f56:	4618      	mov	r0, r3
    9f58:	4770      	bx	lr
	...

00009f5c <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
    9f5c:	4b02      	ldr	r3, [pc, #8]	; (9f68 <os_dev_reset+0xc>)
    9f5e:	2200      	movs	r2, #0
    9f60:	601a      	str	r2, [r3, #0]
    9f62:	605b      	str	r3, [r3, #4]
}
    9f64:	4770      	bx	lr
    9f66:	bf00      	nop
    9f68:	200026dc 	.word	0x200026dc

00009f6c <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
    9f6c:	2200      	movs	r2, #0
    9f6e:	6002      	str	r2, [r0, #0]
    9f70:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
    9f72:	4603      	mov	r3, r0
    9f74:	f843 2f08 	str.w	r2, [r3, #8]!
    9f78:	60c3      	str	r3, [r0, #12]
}
    9f7a:	4770      	bx	lr

00009f7c <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
    9f7c:	68c0      	ldr	r0, [r0, #12]
}
    9f7e:	3000      	adds	r0, #0
    9f80:	bf18      	it	ne
    9f82:	2001      	movne	r0, #1
    9f84:	4770      	bx	lr

00009f86 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
    9f86:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
    9f88:	b1f0      	cbz	r0, 9fc8 <os_eventq_put+0x42>
    9f8a:	460c      	mov	r4, r1
    9f8c:	4605      	mov	r5, r0
    9f8e:	f7ff fff5 	bl	9f7c <os_eventq_inited>
    9f92:	b1c8      	cbz	r0, 9fc8 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    9f94:	f001 fa9c 	bl	b4d0 <os_arch_save_sr>
    9f98:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
    9f9a:	7823      	ldrb	r3, [r4, #0]
    9f9c:	b9f3      	cbnz	r3, 9fdc <os_eventq_put+0x56>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
    9f9e:	2301      	movs	r3, #1
    9fa0:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
    9fa2:	2300      	movs	r3, #0
    9fa4:	60e3      	str	r3, [r4, #12]
    9fa6:	68eb      	ldr	r3, [r5, #12]
    9fa8:	601c      	str	r4, [r3, #0]
    9faa:	340c      	adds	r4, #12
    9fac:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
    9fae:	6868      	ldr	r0, [r5, #4]
    9fb0:	b1d8      	cbz	r0, 9fea <os_eventq_put+0x64>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
    9fb2:	7b03      	ldrb	r3, [r0, #12]
    9fb4:	2b02      	cmp	r3, #2
    9fb6:	d014      	beq.n	9fe2 <os_eventq_put+0x5c>
    resched = 0;
    9fb8:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
    9fba:	2300      	movs	r3, #0
    9fbc:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
    9fbe:	4630      	mov	r0, r6
    9fc0:	f001 fa8c 	bl	b4dc <os_arch_restore_sr>

    if (resched) {
    9fc4:	b99c      	cbnz	r4, 9fee <os_eventq_put+0x68>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
    9fc6:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
    9fc8:	f7fe f8fa 	bl	81c0 <hal_debugger_connected>
    9fcc:	b100      	cbz	r0, 9fd0 <os_eventq_put+0x4a>
    9fce:	be01      	bkpt	0x0001
    9fd0:	2300      	movs	r3, #0
    9fd2:	461a      	mov	r2, r3
    9fd4:	4619      	mov	r1, r3
    9fd6:	4618      	mov	r0, r3
    9fd8:	f7ff fc88 	bl	98ec <__assert_func>
        OS_EXIT_CRITICAL(sr);
    9fdc:	f001 fa7e 	bl	b4dc <os_arch_restore_sr>
    9fe0:	e7f1      	b.n	9fc6 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
    9fe2:	f001 f837 	bl	b054 <os_sched_wakeup>
            resched = 1;
    9fe6:	2401      	movs	r4, #1
    9fe8:	e7e7      	b.n	9fba <os_eventq_put+0x34>
    resched = 0;
    9fea:	2400      	movs	r4, #0
    9fec:	e7e7      	b.n	9fbe <os_eventq_put+0x38>
        os_sched(NULL);
    9fee:	2000      	movs	r0, #0
    9ff0:	f001 f8bc 	bl	b16c <os_sched>
    9ff4:	e7e7      	b.n	9fc6 <os_eventq_put+0x40>

00009ff6 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
    9ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ff8:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
    9ffa:	f000 ffd7 	bl	afac <os_sched_get_current_task>
    9ffe:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
    a000:	682b      	ldr	r3, [r5, #0]
    a002:	4283      	cmp	r3, r0
    a004:	d001      	beq.n	a00a <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
    a006:	b9db      	cbnz	r3, a040 <os_eventq_get+0x4a>
            evq->evq_owner = t;
    a008:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
    a00a:	f001 fa61 	bl	b4d0 <os_arch_save_sr>
    a00e:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
    a010:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
    a012:	b9fe      	cbnz	r6, a054 <os_eventq_get+0x5e>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
    a014:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
    a016:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    a01a:	4620      	mov	r0, r4
    a01c:	f000 ffd2 	bl	afc4 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
    a020:	7b63      	ldrb	r3, [r4, #13]
    a022:	f043 0308 	orr.w	r3, r3, #8
    a026:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
    a028:	4638      	mov	r0, r7
    a02a:	f001 fa57 	bl	b4dc <os_arch_restore_sr>

        os_sched(NULL);
    a02e:	2000      	movs	r0, #0
    a030:	f001 f89c 	bl	b16c <os_sched>

        OS_ENTER_CRITICAL(sr);
    a034:	f001 fa4c 	bl	b4d0 <os_arch_save_sr>
    a038:	4607      	mov	r7, r0
        evq->evq_task = NULL;
    a03a:	2300      	movs	r3, #0
    a03c:	606b      	str	r3, [r5, #4]
        goto pull_one;
    a03e:	e7e7      	b.n	a010 <os_eventq_get+0x1a>
            assert(0);
    a040:	f7fe f8be 	bl	81c0 <hal_debugger_connected>
    a044:	b100      	cbz	r0, a048 <os_eventq_get+0x52>
    a046:	be01      	bkpt	0x0001
    a048:	2300      	movs	r3, #0
    a04a:	461a      	mov	r2, r3
    a04c:	4619      	mov	r1, r3
    a04e:	4618      	mov	r0, r3
    a050:	f7ff fc4c 	bl	98ec <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    a054:	68f3      	ldr	r3, [r6, #12]
    a056:	60ab      	str	r3, [r5, #8]
    a058:	b153      	cbz	r3, a070 <os_eventq_get+0x7a>
        ev->ev_queued = 0;
    a05a:	2300      	movs	r3, #0
    a05c:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    a05e:	7b63      	ldrb	r3, [r4, #13]
    a060:	f023 0308 	bic.w	r3, r3, #8
    a064:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
    a066:	4638      	mov	r0, r7
    a068:	f001 fa38 	bl	b4dc <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
    a06c:	4630      	mov	r0, r6
    a06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    a070:	f105 0308 	add.w	r3, r5, #8
    a074:	60eb      	str	r3, [r5, #12]
    a076:	e7f0      	b.n	a05a <os_eventq_get+0x64>

0000a078 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
    a078:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
    a07a:	f7ff ffbc 	bl	9ff6 <os_eventq_get>
    assert(ev->ev_cb != NULL);
    a07e:	6843      	ldr	r3, [r0, #4]
    a080:	b10b      	cbz	r3, a086 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
    a082:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
    a084:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
    a086:	f7fe f89b 	bl	81c0 <hal_debugger_connected>
    a08a:	b100      	cbz	r0, a08e <os_eventq_run+0x16>
    a08c:	be01      	bkpt	0x0001
    a08e:	2300      	movs	r3, #0
    a090:	461a      	mov	r2, r3
    a092:	4619      	mov	r1, r3
    a094:	4618      	mov	r0, r3
    a096:	f7ff fc29 	bl	98ec <__assert_func>

0000a09a <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
    a09a:	b538      	push	{r3, r4, r5, lr}
    a09c:	4605      	mov	r5, r0
    a09e:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
    a0a0:	f001 fa16 	bl	b4d0 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
    a0a4:	7823      	ldrb	r3, [r4, #0]
    a0a6:	b183      	cbz	r3, a0ca <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    a0a8:	68aa      	ldr	r2, [r5, #8]
    a0aa:	42a2      	cmp	r2, r4
    a0ac:	d107      	bne.n	a0be <os_eventq_remove+0x24>
    a0ae:	68d3      	ldr	r3, [r2, #12]
    a0b0:	60ab      	str	r3, [r5, #8]
    a0b2:	b953      	cbnz	r3, a0ca <os_eventq_remove+0x30>
    a0b4:	f105 0308 	add.w	r3, r5, #8
    a0b8:	60eb      	str	r3, [r5, #12]
    a0ba:	e006      	b.n	a0ca <os_eventq_remove+0x30>
    a0bc:	461a      	mov	r2, r3
    a0be:	68d3      	ldr	r3, [r2, #12]
    a0c0:	42a3      	cmp	r3, r4
    a0c2:	d1fb      	bne.n	a0bc <os_eventq_remove+0x22>
    a0c4:	68db      	ldr	r3, [r3, #12]
    a0c6:	60d3      	str	r3, [r2, #12]
    a0c8:	b123      	cbz	r3, a0d4 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
    a0ca:	2300      	movs	r3, #0
    a0cc:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
    a0ce:	f001 fa05 	bl	b4dc <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
    a0d2:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
    a0d4:	320c      	adds	r2, #12
    a0d6:	60ea      	str	r2, [r5, #12]
    a0d8:	e7f7      	b.n	a0ca <os_eventq_remove+0x30>
	...

0000a0dc <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
    a0dc:	4800      	ldr	r0, [pc, #0]	; (a0e0 <os_eventq_dflt_get+0x4>)
    a0de:	4770      	bx	lr
    a0e0:	200026e4 	.word	0x200026e4

0000a0e4 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
    a0e4:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
    a0e6:	2000      	movs	r0, #0
    a0e8:	6018      	str	r0, [r3, #0]
    a0ea:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
    a0ec:	6098      	str	r0, [r3, #8]
    a0ee:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
    a0f0:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
    a0f2:	611a      	str	r2, [r3, #16]

    return (0);
}
    a0f4:	4770      	bx	lr

0000a0f6 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
    a0f6:	b538      	push	{r3, r4, r5, lr}
    a0f8:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
    a0fa:	f001 f9e9 	bl	b4d0 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
    a0fe:	682c      	ldr	r4, [r5, #0]
    if (mp) {
    a100:	b114      	cbz	r4, a108 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a102:	6863      	ldr	r3, [r4, #4]
    a104:	602b      	str	r3, [r5, #0]
    a106:	b12b      	cbz	r3, a114 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
    a108:	f001 f9e8 	bl	b4dc <os_arch_restore_sr>

    if (mp) {
    a10c:	b124      	cbz	r4, a118 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
    a10e:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
    a112:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
    a114:	606d      	str	r5, [r5, #4]
    a116:	e7f7      	b.n	a108 <os_mqueue_get+0x12>
        m = NULL;
    a118:	2000      	movs	r0, #0
    return (m);
    a11a:	e7fa      	b.n	a112 <os_mqueue_get+0x1c>

0000a11c <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
    a11c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
    a11e:	7953      	ldrb	r3, [r2, #5]
    a120:	2b07      	cmp	r3, #7
    a122:	d916      	bls.n	a152 <os_mqueue_put+0x36>
    a124:	4614      	mov	r4, r2
    a126:	460e      	mov	r6, r1
    a128:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
    a12a:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
    a12e:	f001 f9cf 	bl	b4d0 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
    a132:	2300      	movs	r3, #0
    a134:	f844 3f14 	str.w	r3, [r4, #20]!
    a138:	686b      	ldr	r3, [r5, #4]
    a13a:	601f      	str	r7, [r3, #0]
    a13c:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
    a13e:	f001 f9cd 	bl	b4dc <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
    a142:	b146      	cbz	r6, a156 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
    a144:	f105 0108 	add.w	r1, r5, #8
    a148:	4630      	mov	r0, r6
    a14a:	f7ff ff1c 	bl	9f86 <os_eventq_put>
    }

    return (0);
    a14e:	2000      	movs	r0, #0
    a150:	e000      	b.n	a154 <os_mqueue_put+0x38>
err:
    return (rc);
    a152:	2002      	movs	r0, #2
}
    a154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
    a156:	2000      	movs	r0, #0
    a158:	e7fc      	b.n	a154 <os_mqueue_put+0x38>

0000a15a <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
    a15a:	3a10      	subs	r2, #16
    a15c:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
    a15e:	6041      	str	r1, [r0, #4]

    return (0);
}
    a160:	2000      	movs	r0, #0
    a162:	4770      	bx	lr

0000a164 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
    a164:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
    a166:	8803      	ldrh	r3, [r0, #0]
    a168:	428b      	cmp	r3, r1
    a16a:	d312      	bcc.n	a192 <os_mbuf_get+0x2e>
    a16c:	460d      	mov	r5, r1
    a16e:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
    a170:	6840      	ldr	r0, [r0, #4]
    a172:	f000 fc84 	bl	aa7e <os_memblock_get>
    if (!om) {
    a176:	4603      	mov	r3, r0
    a178:	b148      	cbz	r0, a18e <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
    a17a:	2200      	movs	r2, #0
    a17c:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
    a17e:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
    a180:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
    a182:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
    a184:	f100 0110 	add.w	r1, r0, #16
    a188:	4429      	add	r1, r5
    a18a:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
    a18c:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
    a18e:	4618      	mov	r0, r3
    a190:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a192:	2300      	movs	r3, #0
    return om;
    a194:	e7fb      	b.n	a18e <os_mbuf_get+0x2a>

0000a196 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
    a196:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
    a198:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
    a19c:	8803      	ldrh	r3, [r0, #0]
    a19e:	42ab      	cmp	r3, r5
    a1a0:	d310      	bcc.n	a1c4 <os_mbuf_get_pkthdr+0x2e>
    a1a2:	2dff      	cmp	r5, #255	; 0xff
    a1a4:	d810      	bhi.n	a1c8 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
    a1a6:	2100      	movs	r1, #0
    a1a8:	f7ff ffdc 	bl	a164 <os_mbuf_get>
    if (om) {
    a1ac:	4603      	mov	r3, r0
    a1ae:	b138      	cbz	r0, a1c0 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
    a1b0:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
    a1b2:	6802      	ldr	r2, [r0, #0]
    a1b4:	4415      	add	r5, r2
    a1b6:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
    a1b8:	2200      	movs	r2, #0
    a1ba:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
    a1bc:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
    a1be:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
    a1c0:	4618      	mov	r0, r3
    a1c2:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
    a1c4:	2300      	movs	r3, #0
    a1c6:	e7fb      	b.n	a1c0 <os_mbuf_get_pkthdr+0x2a>
    a1c8:	2300      	movs	r3, #0
    return om;
    a1ca:	e7f9      	b.n	a1c0 <os_mbuf_get_pkthdr+0x2a>

0000a1cc <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
    a1cc:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
    a1ce:	6883      	ldr	r3, [r0, #8]
    a1d0:	b123      	cbz	r3, a1dc <os_mbuf_free+0x10>
    a1d2:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
    a1d4:	6858      	ldr	r0, [r3, #4]
    a1d6:	f000 fc7a 	bl	aace <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
    a1da:	bd08      	pop	{r3, pc}
    rc = 0;
    a1dc:	2000      	movs	r0, #0
    return (rc);
    a1de:	e7fc      	b.n	a1da <os_mbuf_free+0xe>

0000a1e0 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
    a1e0:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
    a1e2:	b160      	cbz	r0, a1fe <os_mbuf_free_chain+0x1e>
{
    a1e4:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
    a1e6:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
    a1e8:	4618      	mov	r0, r3
    a1ea:	f7ff ffef 	bl	a1cc <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
    a1ee:	4623      	mov	r3, r4
        if (rc != 0) {
    a1f0:	4602      	mov	r2, r0
    a1f2:	b910      	cbnz	r0, a1fa <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
    a1f4:	2c00      	cmp	r4, #0
    a1f6:	d1f6      	bne.n	a1e6 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
    a1f8:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
    a1fa:	4610      	mov	r0, r2
    a1fc:	bd10      	pop	{r4, pc}
    rc = 0;
    a1fe:	2200      	movs	r2, #0
}
    a200:	4610      	mov	r0, r2
    a202:	4770      	bx	lr

0000a204 <os_mbuf_append>:
    return len;
}

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
    a204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
    a208:	2800      	cmp	r0, #0
    a20a:	d04d      	beq.n	a2a8 <os_mbuf_append+0xa4>
    a20c:	460f      	mov	r7, r1
    a20e:	4691      	mov	r9, r2
    a210:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
    a212:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
    a216:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
    a218:	e000      	b.n	a21c <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
    a21a:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
    a21c:	68eb      	ldr	r3, [r5, #12]
    a21e:	2b00      	cmp	r3, #0
    a220:	d1fb      	bne.n	a21a <os_mbuf_append+0x16>
    }

    remainder = len;
    a222:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
    a224:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a226:	f105 0410 	add.w	r4, r5, #16
    a22a:	881b      	ldrh	r3, [r3, #0]
    a22c:	441c      	add	r4, r3
      (om->om_data + om->om_len);
    a22e:	6828      	ldr	r0, [r5, #0]
    a230:	88eb      	ldrh	r3, [r5, #6]
    a232:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a234:	1a24      	subs	r4, r4, r0
    a236:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
    a238:	b164      	cbz	r4, a254 <os_mbuf_append+0x50>
        if (space > remainder) {
    a23a:	454c      	cmp	r4, r9
    a23c:	dd00      	ble.n	a240 <os_mbuf_append+0x3c>
            space = remainder;
    a23e:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
    a240:	4622      	mov	r2, r4
    a242:	4639      	mov	r1, r7
    a244:	f001 fab2 	bl	b7ac <memcpy>

        last->om_len += space;
    a248:	88eb      	ldrh	r3, [r5, #6]
    a24a:	4423      	add	r3, r4
    a24c:	80eb      	strh	r3, [r5, #6]
        data += space;
    a24e:	4427      	add	r7, r4
        remainder -= space;
    a250:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
    a254:	2e00      	cmp	r6, #0
    a256:	dd16      	ble.n	a286 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
    a258:	2100      	movs	r1, #0
    a25a:	4640      	mov	r0, r8
    a25c:	f7ff ff82 	bl	a164 <os_mbuf_get>
        if (!new) {
    a260:	4604      	mov	r4, r0
    a262:	b180      	cbz	r0, a286 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
    a264:	f8b8 2000 	ldrh.w	r2, [r8]
    a268:	42b2      	cmp	r2, r6
    a26a:	bfa8      	it	ge
    a26c:	4632      	movge	r2, r6
    a26e:	b292      	uxth	r2, r2
    a270:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
    a272:	4639      	mov	r1, r7
    a274:	6800      	ldr	r0, [r0, #0]
    a276:	f001 fa99 	bl	b7ac <memcpy>
        data += new->om_len;
    a27a:	88e3      	ldrh	r3, [r4, #6]
    a27c:	441f      	add	r7, r3
        remainder -= new->om_len;
    a27e:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
    a280:	60ec      	str	r4, [r5, #12]
        last = new;
    a282:	4625      	mov	r5, r4
    a284:	e7e6      	b.n	a254 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
    a286:	f89a 3005 	ldrb.w	r3, [sl, #5]
    a28a:	2b07      	cmp	r3, #7
    a28c:	d907      	bls.n	a29e <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
    a28e:	eba9 0906 	sub.w	r9, r9, r6
    a292:	f8ba 3010 	ldrh.w	r3, [sl, #16]
    a296:	fa13 f989 	uxtah	r9, r3, r9
    a29a:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
    a29e:	b106      	cbz	r6, a2a2 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
    a2a0:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
    a2a2:	4630      	mov	r0, r6
    a2a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
    a2a8:	2602      	movs	r6, #2
    a2aa:	e7fa      	b.n	a2a2 <os_mbuf_append+0x9e>

0000a2ac <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
    a2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2b0:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
    a2b2:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
    a2b6:	2700      	movs	r7, #0
    head = NULL;
    a2b8:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
    a2ba:	e017      	b.n	a2ec <os_mbuf_dup+0x40>
    startoff = 0;
    a2bc:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a2be:	4623      	mov	r3, r4
    a2c0:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    a2c4:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a2c6:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
    a2c8:	b299      	uxth	r1, r3
    a2ca:	4640      	mov	r0, r8
    a2cc:	f7ff ff4a 	bl	a164 <os_mbuf_get>
    a2d0:	4605      	mov	r5, r0
    a2d2:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
    a2d4:	b188      	cbz	r0, a2fa <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
    a2d6:	7923      	ldrb	r3, [r4, #4]
    a2d8:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
    a2da:	88e3      	ldrh	r3, [r4, #6]
    a2dc:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
    a2de:	88e2      	ldrh	r2, [r4, #6]
    a2e0:	6821      	ldr	r1, [r4, #0]
    a2e2:	6828      	ldr	r0, [r5, #0]
    a2e4:	f001 fa62 	bl	b7ac <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
    a2e8:	68e4      	ldr	r4, [r4, #12]
    a2ea:	462f      	mov	r7, r5
    a2ec:	b14c      	cbz	r4, a302 <os_mbuf_dup+0x56>
        if (head) {
    a2ee:	b15e      	cbz	r6, a308 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
    a2f0:	7963      	ldrb	r3, [r4, #5]
    a2f2:	2b07      	cmp	r3, #7
    a2f4:	d9e2      	bls.n	a2bc <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
    a2f6:	b299      	uxth	r1, r3
    a2f8:	e7e1      	b.n	a2be <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
    a2fa:	4630      	mov	r0, r6
    a2fc:	f7ff ff70 	bl	a1e0 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
    a300:	462e      	mov	r6, r5
}
    a302:	4630      	mov	r0, r6
    a304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
    a308:	7963      	ldrb	r3, [r4, #5]
    a30a:	2b07      	cmp	r3, #7
    a30c:	d911      	bls.n	a332 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
    a30e:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a310:	4623      	mov	r3, r4
    a312:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    a316:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a318:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
    a31a:	b299      	uxth	r1, r3
    a31c:	4640      	mov	r0, r8
    a31e:	f7ff ff21 	bl	a164 <os_mbuf_get>
            if (!head) {
    a322:	4606      	mov	r6, r0
    a324:	2800      	cmp	r0, #0
    a326:	d0ec      	beq.n	a302 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
    a328:	7963      	ldrb	r3, [r4, #5]
    a32a:	2b07      	cmp	r3, #7
    a32c:	d803      	bhi.n	a336 <os_mbuf_dup+0x8a>
            copy = head;
    a32e:	4605      	mov	r5, r0
    a330:	e7d1      	b.n	a2d6 <os_mbuf_dup+0x2a>
    startoff = 0;
    a332:	2100      	movs	r1, #0
    a334:	e7ec      	b.n	a310 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
    a336:	88c3      	ldrh	r3, [r0, #6]
    a338:	b973      	cbnz	r3, a358 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
    a33a:	f100 0510 	add.w	r5, r0, #16
    a33e:	7962      	ldrb	r2, [r4, #5]
    a340:	f104 0110 	add.w	r1, r4, #16
    a344:	4628      	mov	r0, r5
    a346:	f001 fa31 	bl	b7ac <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
    a34a:	7963      	ldrb	r3, [r4, #5]
    a34c:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
    a34e:	7963      	ldrb	r3, [r4, #5]
    a350:	441d      	add	r5, r3
    a352:	6035      	str	r5, [r6, #0]
            copy = head;
    a354:	4635      	mov	r5, r6
    a356:	e7be      	b.n	a2d6 <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
    a358:	f7fd ff32 	bl	81c0 <hal_debugger_connected>
    a35c:	b100      	cbz	r0, a360 <os_mbuf_dup+0xb4>
    a35e:	be01      	bkpt	0x0001
    a360:	2300      	movs	r3, #0
    a362:	461a      	mov	r2, r3
    a364:	4619      	mov	r1, r3
    a366:	4618      	mov	r0, r3
    a368:	f7ff fac0 	bl	98ec <__assert_func>

0000a36c <os_mbuf_off>:

    /* Cast away const. */
    cur = (struct os_mbuf *)om;

    while (1) {
        if (cur == NULL) {
    a36c:	b178      	cbz	r0, a38e <os_mbuf_off+0x22>
{
    a36e:	b410      	push	{r4}
    a370:	e002      	b.n	a378 <os_mbuf_off+0xc>

            *out_off = off;
            return cur;
        }

        off -= cur->om_len;
    a372:	1ac9      	subs	r1, r1, r3
        cur = next;
    a374:	4620      	mov	r0, r4
        if (cur == NULL) {
    a376:	b13c      	cbz	r4, a388 <os_mbuf_off+0x1c>
        next = SLIST_NEXT(cur, om_next);
    a378:	68c4      	ldr	r4, [r0, #12]
        if (cur->om_len > off ||
    a37a:	88c3      	ldrh	r3, [r0, #6]
    a37c:	428b      	cmp	r3, r1
    a37e:	dc02      	bgt.n	a386 <os_mbuf_off+0x1a>
    a380:	d1f7      	bne.n	a372 <os_mbuf_off+0x6>
            (cur->om_len == off && next == NULL)) {
    a382:	2c00      	cmp	r4, #0
    a384:	d1f5      	bne.n	a372 <os_mbuf_off+0x6>
            *out_off = off;
    a386:	8011      	strh	r1, [r2, #0]
    }
}
    a388:	f85d 4b04 	ldr.w	r4, [sp], #4
    a38c:	4770      	bx	lr
    a38e:	4770      	bx	lr

0000a390 <os_mbuf_appendfrom>:
{
    a390:	b5f0      	push	{r4, r5, r6, r7, lr}
    a392:	b083      	sub	sp, #12
    a394:	4607      	mov	r7, r0
    a396:	4608      	mov	r0, r1
    a398:	4611      	mov	r1, r2
    a39a:	461e      	mov	r6, r3
    src_cur_om = os_mbuf_off(src, src_off, &src_cur_off);
    a39c:	f10d 0206 	add.w	r2, sp, #6
    a3a0:	f7ff ffe4 	bl	a36c <os_mbuf_off>
    a3a4:	4605      	mov	r5, r0
    while (len > 0) {
    a3a6:	b1be      	cbz	r6, a3d8 <os_mbuf_appendfrom+0x48>
        if (src_cur_om == NULL) {
    a3a8:	b1d5      	cbz	r5, a3e0 <os_mbuf_appendfrom+0x50>
        chunk_sz = min(len, src_cur_om->om_len - src_cur_off);
    a3aa:	88ec      	ldrh	r4, [r5, #6]
    a3ac:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a3b0:	1ae4      	subs	r4, r4, r3
    a3b2:	42b4      	cmp	r4, r6
    a3b4:	bfa8      	it	ge
    a3b6:	4634      	movge	r4, r6
    a3b8:	b2a4      	uxth	r4, r4
        rc = os_mbuf_append(dst, src_cur_om->om_data + src_cur_off, chunk_sz);
    a3ba:	6829      	ldr	r1, [r5, #0]
    a3bc:	4622      	mov	r2, r4
    a3be:	4419      	add	r1, r3
    a3c0:	4638      	mov	r0, r7
    a3c2:	f7ff ff1f 	bl	a204 <os_mbuf_append>
        if (rc != 0) {
    a3c6:	4603      	mov	r3, r0
    a3c8:	b938      	cbnz	r0, a3da <os_mbuf_appendfrom+0x4a>
        len -= chunk_sz;
    a3ca:	1b34      	subs	r4, r6, r4
    a3cc:	b2a6      	uxth	r6, r4
        src_cur_om = SLIST_NEXT(src_cur_om, om_next);
    a3ce:	68ed      	ldr	r5, [r5, #12]
        src_cur_off = 0;
    a3d0:	2300      	movs	r3, #0
    a3d2:	f8ad 3006 	strh.w	r3, [sp, #6]
    a3d6:	e7e6      	b.n	a3a6 <os_mbuf_appendfrom+0x16>
    return 0;
    a3d8:	2300      	movs	r3, #0
}
    a3da:	4618      	mov	r0, r3
    a3dc:	b003      	add	sp, #12
    a3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
            return OS_EINVAL;
    a3e0:	2302      	movs	r3, #2
    a3e2:	e7fa      	b.n	a3da <os_mbuf_appendfrom+0x4a>

0000a3e4 <os_mbuf_copydata>:

int
os_mbuf_copydata(const struct os_mbuf *m, int off, int len, void *dst)
{
    a3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a3e6:	4604      	mov	r4, r0
    a3e8:	461f      	mov	r7, r3
    unsigned int count;
    uint8_t *udst;

    if (!len) {
    a3ea:	4616      	mov	r6, r2
    a3ec:	b312      	cbz	r2, a434 <os_mbuf_copydata+0x50>
        return 0;
    }

    udst = dst;

    while (off > 0) {
    a3ee:	2900      	cmp	r1, #0
    a3f0:	dd06      	ble.n	a400 <os_mbuf_copydata+0x1c>
        if (!m) {
    a3f2:	b30c      	cbz	r4, a438 <os_mbuf_copydata+0x54>
            return (-1);
        }

        if (off < m->om_len)
    a3f4:	88e3      	ldrh	r3, [r4, #6]
    a3f6:	428b      	cmp	r3, r1
    a3f8:	dc02      	bgt.n	a400 <os_mbuf_copydata+0x1c>
            break;
        off -= m->om_len;
    a3fa:	1ac9      	subs	r1, r1, r3
        m = SLIST_NEXT(m, om_next);
    a3fc:	68e4      	ldr	r4, [r4, #12]
    a3fe:	e7f6      	b.n	a3ee <os_mbuf_copydata+0xa>
    }
    while (len > 0 && m != NULL) {
    a400:	2e00      	cmp	r6, #0
    a402:	dd10      	ble.n	a426 <os_mbuf_copydata+0x42>
    a404:	b17c      	cbz	r4, a426 <os_mbuf_copydata+0x42>
        count = min(m->om_len - off, len);
    a406:	88e5      	ldrh	r5, [r4, #6]
    a408:	1a6d      	subs	r5, r5, r1
    a40a:	42b5      	cmp	r5, r6
    a40c:	bfa8      	it	ge
    a40e:	4635      	movge	r5, r6
        memcpy(udst, m->om_data + off, count);
    a410:	6823      	ldr	r3, [r4, #0]
    a412:	462a      	mov	r2, r5
    a414:	4419      	add	r1, r3
    a416:	4638      	mov	r0, r7
    a418:	f001 f9c8 	bl	b7ac <memcpy>
        len -= count;
    a41c:	1b76      	subs	r6, r6, r5
        udst += count;
    a41e:	442f      	add	r7, r5
        off = 0;
        m = SLIST_NEXT(m, om_next);
    a420:	68e4      	ldr	r4, [r4, #12]
        off = 0;
    a422:	2100      	movs	r1, #0
    a424:	e7ec      	b.n	a400 <os_mbuf_copydata+0x1c>
    }

    return (len > 0 ? -1 : 0);
    a426:	2e00      	cmp	r6, #0
    a428:	dc01      	bgt.n	a42e <os_mbuf_copydata+0x4a>
    a42a:	2000      	movs	r0, #0
    a42c:	e003      	b.n	a436 <os_mbuf_copydata+0x52>
    a42e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a432:	e000      	b.n	a436 <os_mbuf_copydata+0x52>
        return 0;
    a434:	4610      	mov	r0, r2
}
    a436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return (-1);
    a438:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    a43c:	e7fb      	b.n	a436 <os_mbuf_copydata+0x52>

0000a43e <os_mbuf_adj>:
{
    int len = req_len;
    struct os_mbuf *m;
    int count;

    if ((m = mp) == NULL)
    a43e:	2800      	cmp	r0, #0
    a440:	d04e      	beq.n	a4e0 <os_mbuf_adj+0xa2>
{
    a442:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a444:	4604      	mov	r4, r0
        return;
    if (len >= 0) {
    a446:	2900      	cmp	r1, #0
    a448:	db1c      	blt.n	a484 <os_mbuf_adj+0x46>
    if ((m = mp) == NULL)
    a44a:	4603      	mov	r3, r0
    int len = req_len;
    a44c:	460a      	mov	r2, r1
    a44e:	e005      	b.n	a45c <os_mbuf_adj+0x1e>
            if (m->om_len <= len) {
                len -= m->om_len;
                m->om_len = 0;
                m = SLIST_NEXT(m, om_next);
            } else {
                m->om_len -= len;
    a450:	1a80      	subs	r0, r0, r2
    a452:	80d8      	strh	r0, [r3, #6]
                m->om_data += len;
    a454:	6818      	ldr	r0, [r3, #0]
    a456:	4402      	add	r2, r0
    a458:	601a      	str	r2, [r3, #0]
                len = 0;
    a45a:	2200      	movs	r2, #0
        while (m != NULL && len > 0) {
    a45c:	b14b      	cbz	r3, a472 <os_mbuf_adj+0x34>
    a45e:	2a00      	cmp	r2, #0
    a460:	dd07      	ble.n	a472 <os_mbuf_adj+0x34>
            if (m->om_len <= len) {
    a462:	88d8      	ldrh	r0, [r3, #6]
    a464:	4290      	cmp	r0, r2
    a466:	dcf3      	bgt.n	a450 <os_mbuf_adj+0x12>
                len -= m->om_len;
    a468:	1a12      	subs	r2, r2, r0
                m->om_len = 0;
    a46a:	2000      	movs	r0, #0
    a46c:	80d8      	strh	r0, [r3, #6]
                m = SLIST_NEXT(m, om_next);
    a46e:	68db      	ldr	r3, [r3, #12]
    a470:	e7f4      	b.n	a45c <os_mbuf_adj+0x1e>
            }
        }
        if (OS_MBUF_IS_PKTHDR(mp))
    a472:	7963      	ldrb	r3, [r4, #5]
    a474:	2b07      	cmp	r3, #7
    a476:	d904      	bls.n	a482 <os_mbuf_adj+0x44>
            OS_MBUF_PKTHDR(mp)->omp_len -= (req_len - len);
    a478:	1a52      	subs	r2, r2, r1
    a47a:	8a21      	ldrh	r1, [r4, #16]
    a47c:	fa11 f282 	uxtah	r2, r1, r2
    a480:	8222      	strh	r2, [r4, #16]
                break;
            }
            count -= m->om_len;
        }
    }
}
    a482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        len = -len;
    a484:	424f      	negs	r7, r1
        count = 0;
    a486:	2200      	movs	r2, #0
    a488:	e000      	b.n	a48c <os_mbuf_adj+0x4e>
            m = SLIST_NEXT(m, om_next);
    a48a:	4628      	mov	r0, r5
            count += m->om_len;
    a48c:	88c3      	ldrh	r3, [r0, #6]
    a48e:	441a      	add	r2, r3
            if (SLIST_NEXT(m, om_next) == (struct os_mbuf *)0)
    a490:	68c5      	ldr	r5, [r0, #12]
    a492:	2d00      	cmp	r5, #0
    a494:	d1f9      	bne.n	a48a <os_mbuf_adj+0x4c>
        if (m->om_len >= len) {
    a496:	42bb      	cmp	r3, r7
    a498:	db09      	blt.n	a4ae <os_mbuf_adj+0x70>
            m->om_len -= len;
    a49a:	b2bf      	uxth	r7, r7
    a49c:	1bdb      	subs	r3, r3, r7
    a49e:	80c3      	strh	r3, [r0, #6]
            if (OS_MBUF_IS_PKTHDR(mp))
    a4a0:	7963      	ldrb	r3, [r4, #5]
    a4a2:	2b07      	cmp	r3, #7
    a4a4:	d9ed      	bls.n	a482 <os_mbuf_adj+0x44>
                OS_MBUF_PKTHDR(mp)->omp_len -= len;
    a4a6:	8a23      	ldrh	r3, [r4, #16]
    a4a8:	1bdf      	subs	r7, r3, r7
    a4aa:	8227      	strh	r7, [r4, #16]
    a4ac:	e7e9      	b.n	a482 <os_mbuf_adj+0x44>
        if (count < 0)
    a4ae:	188a      	adds	r2, r1, r2
    a4b0:	d40b      	bmi.n	a4ca <os_mbuf_adj+0x8c>
        if (OS_MBUF_IS_PKTHDR(m))
    a4b2:	7963      	ldrb	r3, [r4, #5]
    a4b4:	2b07      	cmp	r3, #7
    a4b6:	d900      	bls.n	a4ba <os_mbuf_adj+0x7c>
            OS_MBUF_PKTHDR(m)->omp_len = count;
    a4b8:	8222      	strh	r2, [r4, #16]
        for (; m; m = SLIST_NEXT(m, om_next)) {
    a4ba:	2c00      	cmp	r4, #0
    a4bc:	d0e1      	beq.n	a482 <os_mbuf_adj+0x44>
            if (m->om_len >= count) {
    a4be:	88e3      	ldrh	r3, [r4, #6]
    a4c0:	4293      	cmp	r3, r2
    a4c2:	da04      	bge.n	a4ce <os_mbuf_adj+0x90>
            count -= m->om_len;
    a4c4:	1ad2      	subs	r2, r2, r3
        for (; m; m = SLIST_NEXT(m, om_next)) {
    a4c6:	68e4      	ldr	r4, [r4, #12]
    a4c8:	e7f7      	b.n	a4ba <os_mbuf_adj+0x7c>
            count = 0;
    a4ca:	2200      	movs	r2, #0
    a4cc:	e7f1      	b.n	a4b2 <os_mbuf_adj+0x74>
                m->om_len = count;
    a4ce:	80e2      	strh	r2, [r4, #6]
                if (SLIST_NEXT(m, om_next) != NULL) {
    a4d0:	68e0      	ldr	r0, [r4, #12]
    a4d2:	2800      	cmp	r0, #0
    a4d4:	d0d5      	beq.n	a482 <os_mbuf_adj+0x44>
                    os_mbuf_free_chain(SLIST_NEXT(m, om_next));
    a4d6:	f7ff fe83 	bl	a1e0 <os_mbuf_free_chain>
                    SLIST_NEXT(m, om_next) = NULL;
    a4da:	2300      	movs	r3, #0
    a4dc:	60e3      	str	r3, [r4, #12]
    a4de:	e7d0      	b.n	a482 <os_mbuf_adj+0x44>
    a4e0:	4770      	bx	lr

0000a4e2 <os_mbuf_cmpf>:

int
os_mbuf_cmpf(const struct os_mbuf *om, int off, const void *data, int len)
{
    a4e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4e6:	b082      	sub	sp, #8
    uint16_t chunk_sz;
    uint16_t data_off;
    uint16_t om_off;
    int rc;

    if (len <= 0) {
    a4e8:	1e1e      	subs	r6, r3, #0
    a4ea:	dd2d      	ble.n	a548 <os_mbuf_cmpf+0x66>
    a4ec:	4617      	mov	r7, r2
        return 0;
    }

    data_off = 0;
    om = os_mbuf_off(om, off, &om_off);
    a4ee:	f10d 0206 	add.w	r2, sp, #6
    a4f2:	f7ff ff3b 	bl	a36c <os_mbuf_off>
    a4f6:	4604      	mov	r4, r0
    data_off = 0;
    a4f8:	f04f 0800 	mov.w	r8, #0
    a4fc:	e009      	b.n	a512 <os_mbuf_cmpf+0x30>
            if (rc != 0) {
                return rc;
            }
        }

        data_off += chunk_sz;
    a4fe:	4445      	add	r5, r8
    a500:	fa1f f885 	uxth.w	r8, r5
        if (data_off == len) {
    a504:	45b0      	cmp	r8, r6
    a506:	d027      	beq.n	a558 <os_mbuf_cmpf+0x76>
            return 0;
        }

        om = SLIST_NEXT(om, om_next);
    a508:	68e4      	ldr	r4, [r4, #12]
        om_off = 0;
    a50a:	2300      	movs	r3, #0
    a50c:	f8ad 3006 	strh.w	r3, [sp, #6]

        if (om == NULL) {
    a510:	b1bc      	cbz	r4, a542 <os_mbuf_cmpf+0x60>
        if (om == NULL) {
    a512:	b1f4      	cbz	r4, a552 <os_mbuf_cmpf+0x70>
        chunk_sz = min(om->om_len - om_off, len - data_off);
    a514:	eba6 0208 	sub.w	r2, r6, r8
    a518:	88e3      	ldrh	r3, [r4, #6]
    a51a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a51e:	1a1b      	subs	r3, r3, r0
    a520:	429a      	cmp	r2, r3
    a522:	bfa8      	it	ge
    a524:	461a      	movge	r2, r3
    a526:	b295      	uxth	r5, r2
        if (chunk_sz > 0) {
    a528:	2d00      	cmp	r5, #0
    a52a:	d0e8      	beq.n	a4fe <os_mbuf_cmpf+0x1c>
            rc = memcmp(om->om_data + om_off, data + data_off, chunk_sz);
    a52c:	6823      	ldr	r3, [r4, #0]
    a52e:	462a      	mov	r2, r5
    a530:	eb07 0108 	add.w	r1, r7, r8
    a534:	4418      	add	r0, r3
    a536:	f001 f915 	bl	b764 <memcmp>
            if (rc != 0) {
    a53a:	4603      	mov	r3, r0
    a53c:	2800      	cmp	r0, #0
    a53e:	d0de      	beq.n	a4fe <os_mbuf_cmpf+0x1c>
    a540:	e003      	b.n	a54a <os_mbuf_cmpf+0x68>
            return INT_MAX;
    a542:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    a546:	e000      	b.n	a54a <os_mbuf_cmpf+0x68>
        return 0;
    a548:	2300      	movs	r3, #0
        }
    }
}
    a54a:	4618      	mov	r0, r3
    a54c:	b002      	add	sp, #8
    a54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return INT_MAX;
    a552:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    a556:	e7f8      	b.n	a54a <os_mbuf_cmpf+0x68>
            return 0;
    a558:	2300      	movs	r3, #0
    a55a:	e7f6      	b.n	a54a <os_mbuf_cmpf+0x68>

0000a55c <os_mbuf_prepend>:
    }
}

struct os_mbuf *
os_mbuf_prepend(struct os_mbuf *om, int len)
{
    a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a55e:	4604      	mov	r4, r0
    a560:	460e      	mov	r6, r1
    a562:	e019      	b.n	a598 <os_mbuf_prepend+0x3c>
    a564:	2000      	movs	r0, #0
    a566:	e01b      	b.n	a5a0 <os_mbuf_prepend+0x44>
        /* The current head didn't have enough space; allocate a new head. */
        if (OS_MBUF_IS_PKTHDR(om)) {
            p = os_mbuf_get_pkthdr(om->om_omp,
                om->om_pkthdr_len - sizeof (struct os_mbuf_pkthdr));
        } else {
            p = os_mbuf_get(om->om_omp, 0);
    a568:	2100      	movs	r1, #0
    a56a:	68a0      	ldr	r0, [r4, #8]
    a56c:	f7ff fdfa 	bl	a164 <os_mbuf_get>
    a570:	4605      	mov	r5, r0
        }
        if (p == NULL) {
    a572:	2d00      	cmp	r5, #0
    a574:	d033      	beq.n	a5de <os_mbuf_prepend+0x82>
            os_mbuf_free_chain(om);
            om = NULL;
            break;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
    a576:	7963      	ldrb	r3, [r4, #5]
    a578:	2b07      	cmp	r3, #7
    a57a:	d836      	bhi.n	a5ea <os_mbuf_prepend+0x8e>
    omp = om->om_omp;
    a57c:	68aa      	ldr	r2, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a57e:	f105 0310 	add.w	r3, r5, #16
    a582:	8812      	ldrh	r2, [r2, #0]
    a584:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    a586:	6829      	ldr	r1, [r5, #0]
    a588:	88ea      	ldrh	r2, [r5, #6]
    a58a:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a58c:	1a9b      	subs	r3, r3, r2
        }

        /* Move the new head's data pointer to the end so that data can be
         * prepended.
         */
        p->om_data += OS_MBUF_TRAILINGSPACE(p);
    a58e:	fa11 f383 	uxtah	r3, r1, r3
    a592:	602b      	str	r3, [r5, #0]

        SLIST_NEXT(p, om_next) = om;
    a594:	60ec      	str	r4, [r5, #12]
        om = p;
    a596:	462c      	mov	r4, r5
    if (OS_MBUF_IS_PKTHDR(om)) {
    a598:	7961      	ldrb	r1, [r4, #5]
    a59a:	2907      	cmp	r1, #7
    a59c:	d9e2      	bls.n	a564 <os_mbuf_prepend+0x8>
        startoff = om->om_pkthdr_len;
    a59e:	b288      	uxth	r0, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a5a0:	4623      	mov	r3, r4
    a5a2:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    a5a6:	4403      	add	r3, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a5a8:	1ad3      	subs	r3, r2, r3
    a5aa:	b29b      	uxth	r3, r3
        leading = min(len, OS_MBUF_LEADINGSPACE(om));
    a5ac:	429e      	cmp	r6, r3
    a5ae:	da00      	bge.n	a5b2 <os_mbuf_prepend+0x56>
    a5b0:	4633      	mov	r3, r6
        om->om_data -= leading;
    a5b2:	1ad2      	subs	r2, r2, r3
    a5b4:	6022      	str	r2, [r4, #0]
        om->om_len += leading;
    a5b6:	b298      	uxth	r0, r3
    a5b8:	88e2      	ldrh	r2, [r4, #6]
    a5ba:	4402      	add	r2, r0
    a5bc:	80e2      	strh	r2, [r4, #6]
        if (OS_MBUF_IS_PKTHDR(om)) {
    a5be:	2907      	cmp	r1, #7
    a5c0:	d902      	bls.n	a5c8 <os_mbuf_prepend+0x6c>
            OS_MBUF_PKTHDR(om)->omp_len += leading;
    a5c2:	8a22      	ldrh	r2, [r4, #16]
    a5c4:	4410      	add	r0, r2
    a5c6:	8220      	strh	r0, [r4, #16]
        if (len == 0) {
    a5c8:	1af6      	subs	r6, r6, r3
    a5ca:	d00c      	beq.n	a5e6 <os_mbuf_prepend+0x8a>
        if (OS_MBUF_IS_PKTHDR(om)) {
    a5cc:	2907      	cmp	r1, #7
    a5ce:	d9cb      	bls.n	a568 <os_mbuf_prepend+0xc>
            p = os_mbuf_get_pkthdr(om->om_omp,
    a5d0:	3908      	subs	r1, #8
    a5d2:	b2c9      	uxtb	r1, r1
    a5d4:	68a0      	ldr	r0, [r4, #8]
    a5d6:	f7ff fdde 	bl	a196 <os_mbuf_get_pkthdr>
    a5da:	4605      	mov	r5, r0
    a5dc:	e7c9      	b.n	a572 <os_mbuf_prepend+0x16>
            os_mbuf_free_chain(om);
    a5de:	4620      	mov	r0, r4
    a5e0:	f7ff fdfe 	bl	a1e0 <os_mbuf_free_chain>
            om = NULL;
    a5e4:	462c      	mov	r4, r5
    }

    return om;
}
    a5e6:	4620      	mov	r0, r4
    a5e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert(new_buf->om_len == 0);
    a5ea:	88eb      	ldrh	r3, [r5, #6]
    a5ec:	b97b      	cbnz	r3, a60e <os_mbuf_prepend+0xb2>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
    a5ee:	f105 0710 	add.w	r7, r5, #16
    a5f2:	7962      	ldrb	r2, [r4, #5]
    a5f4:	f104 0110 	add.w	r1, r4, #16
    a5f8:	4638      	mov	r0, r7
    a5fa:	f001 f8d7 	bl	b7ac <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
    a5fe:	7963      	ldrb	r3, [r4, #5]
    a600:	716b      	strb	r3, [r5, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
    a602:	7963      	ldrb	r3, [r4, #5]
    a604:	441f      	add	r7, r3
    a606:	602f      	str	r7, [r5, #0]
            om->om_pkthdr_len = 0;
    a608:	2300      	movs	r3, #0
    a60a:	7163      	strb	r3, [r4, #5]
    a60c:	e7b6      	b.n	a57c <os_mbuf_prepend+0x20>
    assert(new_buf->om_len == 0);
    a60e:	f7fd fdd7 	bl	81c0 <hal_debugger_connected>
    a612:	b100      	cbz	r0, a616 <os_mbuf_prepend+0xba>
    a614:	be01      	bkpt	0x0001
    a616:	2300      	movs	r3, #0
    a618:	461a      	mov	r2, r3
    a61a:	4619      	mov	r1, r3
    a61c:	4618      	mov	r0, r3
    a61e:	f7ff f965 	bl	98ec <__assert_func>

0000a622 <os_mbuf_copyinto>:
    return om;
}

int
os_mbuf_copyinto(struct os_mbuf *om, int off, const void *src, int len)
{
    a622:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a626:	b083      	sub	sp, #12
    a628:	4681      	mov	r9, r0
    a62a:	4688      	mov	r8, r1
    a62c:	4617      	mov	r7, r2
    a62e:	461e      	mov	r6, r3
    uint16_t cur_off;
    int copylen;
    int rc;

    /* Find the mbuf,offset pair for the start of the destination. */
    cur = os_mbuf_off(om, off, &cur_off);
    a630:	f10d 0206 	add.w	r2, sp, #6
    a634:	f7ff fe9a 	bl	a36c <os_mbuf_off>
    if (cur == NULL) {
    a638:	4605      	mov	r5, r0
    a63a:	b948      	cbnz	r0, a650 <os_mbuf_copyinto+0x2e>
        return -1;
    a63c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
    a640:	e02d      	b.n	a69e <os_mbuf_copyinto+0x7c>
            len -= copylen;

            copylen = 0;
        }

        if (len == 0) {
    a642:	b366      	cbz	r6, a69e <os_mbuf_copyinto+0x7c>
            /* All the source data fit in the existing mbuf chain. */
            return 0;
        }

        next = SLIST_NEXT(cur, om_next);
    a644:	68eb      	ldr	r3, [r5, #12]
        if (next == NULL) {
    a646:	b1ab      	cbz	r3, a674 <os_mbuf_copyinto+0x52>
            break;
        }

        cur = next;
        cur_off = 0;
    a648:	2200      	movs	r2, #0
    a64a:	f8ad 2006 	strh.w	r2, [sp, #6]
        cur = next;
    a64e:	461d      	mov	r5, r3
        copylen = min(cur->om_len - cur_off, len);
    a650:	88ec      	ldrh	r4, [r5, #6]
    a652:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    a656:	1ae4      	subs	r4, r4, r3
    a658:	42b4      	cmp	r4, r6
    a65a:	bfa8      	it	ge
    a65c:	4634      	movge	r4, r6
        if (copylen > 0) {
    a65e:	2c00      	cmp	r4, #0
    a660:	ddef      	ble.n	a642 <os_mbuf_copyinto+0x20>
            memcpy(cur->om_data + cur_off, sptr, copylen);
    a662:	6828      	ldr	r0, [r5, #0]
    a664:	4622      	mov	r2, r4
    a666:	4639      	mov	r1, r7
    a668:	4418      	add	r0, r3
    a66a:	f001 f89f 	bl	b7ac <memcpy>
            sptr += copylen;
    a66e:	4427      	add	r7, r4
            len -= copylen;
    a670:	1b36      	subs	r6, r6, r4
    a672:	e7e6      	b.n	a642 <os_mbuf_copyinto+0x20>
    }

    /* Append the remaining data to the end of the chain. */
    rc = os_mbuf_append(cur, sptr, len);
    a674:	b2b2      	uxth	r2, r6
    a676:	4639      	mov	r1, r7
    a678:	4628      	mov	r0, r5
    a67a:	f7ff fdc3 	bl	a204 <os_mbuf_append>
    if (rc != 0) {
    a67e:	b968      	cbnz	r0, a69c <os_mbuf_copyinto+0x7a>
        return rc;
    }

    /* Fix up the packet header, if one is present. */
    if (OS_MBUF_IS_PKTHDR(om)) {
    a680:	f899 2005 	ldrb.w	r2, [r9, #5]
    a684:	2a07      	cmp	r2, #7
    a686:	d90e      	bls.n	a6a6 <os_mbuf_copyinto+0x84>
        OS_MBUF_PKTHDR(om)->omp_len =
            max(OS_MBUF_PKTHDR(om)->omp_len, off + len);
    a688:	4446      	add	r6, r8
    a68a:	f8b9 8010 	ldrh.w	r8, [r9, #16]
    a68e:	4546      	cmp	r6, r8
    a690:	bfb8      	it	lt
    a692:	4646      	movlt	r6, r8
        OS_MBUF_PKTHDR(om)->omp_len =
    a694:	f8a9 6010 	strh.w	r6, [r9, #16]
    }

    return 0;
    a698:	4606      	mov	r6, r0
    a69a:	e000      	b.n	a69e <os_mbuf_copyinto+0x7c>
        return rc;
    a69c:	4606      	mov	r6, r0
}
    a69e:	4630      	mov	r0, r6
    a6a0:	b003      	add	sp, #12
    a6a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    a6a6:	4606      	mov	r6, r0
    a6a8:	e7f9      	b.n	a69e <os_mbuf_copyinto+0x7c>

0000a6aa <os_mbuf_concat>:
{
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Point 'cur' to the last buffer in the first chain. */
    cur = first;
    a6aa:	4602      	mov	r2, r0
    a6ac:	e000      	b.n	a6b0 <os_mbuf_concat+0x6>
        next = SLIST_NEXT(cur, om_next);
        if (next == NULL) {
            break;
        }

        cur = next;
    a6ae:	461a      	mov	r2, r3
        next = SLIST_NEXT(cur, om_next);
    a6b0:	68d3      	ldr	r3, [r2, #12]
        if (next == NULL) {
    a6b2:	2b00      	cmp	r3, #0
    a6b4:	d1fb      	bne.n	a6ae <os_mbuf_concat+0x4>
    }

    /* Attach the second chain to the end of the first. */
    SLIST_NEXT(cur, om_next) = second;
    a6b6:	60d1      	str	r1, [r2, #12]

    /* If the first chain has a packet header, calculate the length of the
     * second chain and add it to the header length.
     */
    if (OS_MBUF_IS_PKTHDR(first)) {
    a6b8:	7943      	ldrb	r3, [r0, #5]
    a6ba:	2b07      	cmp	r3, #7
    a6bc:	d915      	bls.n	a6ea <os_mbuf_concat+0x40>
        if (OS_MBUF_IS_PKTHDR(second)) {
    a6be:	794b      	ldrb	r3, [r1, #5]
    a6c0:	2b07      	cmp	r3, #7
    a6c2:	d80e      	bhi.n	a6e2 <os_mbuf_concat+0x38>
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
        } else {
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
    a6c4:	460b      	mov	r3, r1
    a6c6:	b181      	cbz	r1, a6ea <os_mbuf_concat+0x40>
{
    a6c8:	b410      	push	{r4}
                OS_MBUF_PKTHDR(first)->omp_len += cur->om_len;
    a6ca:	88da      	ldrh	r2, [r3, #6]
    a6cc:	8a04      	ldrh	r4, [r0, #16]
    a6ce:	4422      	add	r2, r4
    a6d0:	8202      	strh	r2, [r0, #16]
            for (cur = second; cur != NULL; cur = SLIST_NEXT(cur, om_next)) {
    a6d2:	68db      	ldr	r3, [r3, #12]
    a6d4:	2b00      	cmp	r3, #0
    a6d6:	d1f8      	bne.n	a6ca <os_mbuf_concat+0x20>
            }
        }
    }

    second->om_pkthdr_len = 0;
    a6d8:	2300      	movs	r3, #0
    a6da:	714b      	strb	r3, [r1, #5]
}
    a6dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    a6e0:	4770      	bx	lr
            OS_MBUF_PKTHDR(first)->omp_len += OS_MBUF_PKTHDR(second)->omp_len;
    a6e2:	8a0b      	ldrh	r3, [r1, #16]
    a6e4:	8a02      	ldrh	r2, [r0, #16]
    a6e6:	4413      	add	r3, r2
    a6e8:	8203      	strh	r3, [r0, #16]
    second->om_pkthdr_len = 0;
    a6ea:	2300      	movs	r3, #0
    a6ec:	714b      	strb	r3, [r1, #5]
    a6ee:	4770      	bx	lr

0000a6f0 <os_mbuf_extend>:

void *
os_mbuf_extend(struct os_mbuf *om, uint16_t len)
{
    a6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf *newm;
    struct os_mbuf *last;
    void *data;

    if (len > om->om_omp->omp_databuf_len) {
    a6f2:	6887      	ldr	r7, [r0, #8]
    a6f4:	883b      	ldrh	r3, [r7, #0]
    a6f6:	428b      	cmp	r3, r1
    a6f8:	d327      	bcc.n	a74a <os_mbuf_extend+0x5a>
        return NULL;
    }

    /* Scroll to last mbuf in the chain */
    last = om;
    a6fa:	4604      	mov	r4, r0
    a6fc:	e000      	b.n	a700 <os_mbuf_extend+0x10>
    while (SLIST_NEXT(last, om_next) != NULL) {
        last = SLIST_NEXT(last, om_next);
    a6fe:	461c      	mov	r4, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
    a700:	68e3      	ldr	r3, [r4, #12]
    a702:	2b00      	cmp	r3, #0
    a704:	d1fb      	bne.n	a6fe <os_mbuf_extend+0xe>
    a706:	460d      	mov	r5, r1
    a708:	4606      	mov	r6, r0
    omp = om->om_omp;
    a70a:	68a2      	ldr	r2, [r4, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a70c:	f104 0310 	add.w	r3, r4, #16
    a710:	8812      	ldrh	r2, [r2, #0]
    a712:	4413      	add	r3, r2
      (om->om_data + om->om_len);
    a714:	6822      	ldr	r2, [r4, #0]
    a716:	88e1      	ldrh	r1, [r4, #6]
    a718:	440a      	add	r2, r1
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a71a:	1a9b      	subs	r3, r3, r2
    a71c:	b29b      	uxth	r3, r3
    }

    if (OS_MBUF_TRAILINGSPACE(last) < len) {
    a71e:	429d      	cmp	r5, r3
    a720:	d80b      	bhi.n	a73a <os_mbuf_extend+0x4a>

        SLIST_NEXT(last, om_next) = newm;
        last = newm;
    }

    data = last->om_data + last->om_len;
    a722:	6820      	ldr	r0, [r4, #0]
    a724:	88e3      	ldrh	r3, [r4, #6]
    a726:	4418      	add	r0, r3
    last->om_len += len;
    a728:	442b      	add	r3, r5
    a72a:	80e3      	strh	r3, [r4, #6]

    if (OS_MBUF_IS_PKTHDR(om)) {
    a72c:	7973      	ldrb	r3, [r6, #5]
    a72e:	2b07      	cmp	r3, #7
    a730:	d902      	bls.n	a738 <os_mbuf_extend+0x48>
        OS_MBUF_PKTHDR(om)->omp_len += len;
    a732:	8a31      	ldrh	r1, [r6, #16]
    a734:	440d      	add	r5, r1
    a736:	8235      	strh	r5, [r6, #16]
    }

    return data;
}
    a738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        newm = os_mbuf_get(om->om_omp, 0);
    a73a:	2100      	movs	r1, #0
    a73c:	4638      	mov	r0, r7
    a73e:	f7ff fd11 	bl	a164 <os_mbuf_get>
        if (newm == NULL) {
    a742:	b120      	cbz	r0, a74e <os_mbuf_extend+0x5e>
        SLIST_NEXT(last, om_next) = newm;
    a744:	60e0      	str	r0, [r4, #12]
        last = newm;
    a746:	4604      	mov	r4, r0
    a748:	e7eb      	b.n	a722 <os_mbuf_extend+0x32>
        return NULL;
    a74a:	2000      	movs	r0, #0
    a74c:	e7f4      	b.n	a738 <os_mbuf_extend+0x48>
            return NULL;
    a74e:	2000      	movs	r0, #0
    a750:	e7f2      	b.n	a738 <os_mbuf_extend+0x48>

0000a752 <os_mbuf_pullup>:


struct os_mbuf *
os_mbuf_pullup(struct os_mbuf *om, uint16_t len)
{
    a752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a756:	4604      	mov	r4, r0
    struct os_mbuf *next;
    struct os_mbuf *om2;
    int count;
    int space;

    omp = om->om_omp;
    a758:	6880      	ldr	r0, [r0, #8]
    /*
     * If first mbuf has no cluster, and has room for len bytes
     * without shifting current data, pullup into it,
     * otherwise allocate a new mbuf to prepend to the chain.
     */
    if (om->om_len >= len) {
    a75a:	88e2      	ldrh	r2, [r4, #6]
    a75c:	428a      	cmp	r2, r1
    a75e:	d279      	bcs.n	a854 <os_mbuf_pullup+0x102>
    a760:	460d      	mov	r5, r1
    a762:	f104 0310 	add.w	r3, r4, #16
    a766:	8806      	ldrh	r6, [r0, #0]
    a768:	4433      	add	r3, r6
      (om->om_data + om->om_len);
    a76a:	6821      	ldr	r1, [r4, #0]
    a76c:	4411      	add	r1, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a76e:	1a5b      	subs	r3, r3, r1
        return (om);
    }
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
    a770:	fa12 f383 	uxtah	r3, r2, r3
    a774:	4629      	mov	r1, r5
    a776:	42ab      	cmp	r3, r5
    a778:	db12      	blt.n	a7a0 <os_mbuf_pullup+0x4e>
        SLIST_NEXT(om, om_next)) {
    a77a:	68e3      	ldr	r3, [r4, #12]
    if (om->om_len + OS_MBUF_TRAILINGSPACE(om) >= len &&
    a77c:	b183      	cbz	r3, a7a0 <os_mbuf_pullup+0x4e>
        om2 = om;
        om = SLIST_NEXT(om, om_next);
        len -= om2->om_len;
    a77e:	1aad      	subs	r5, r5, r2
    a780:	b2ad      	uxth	r5, r5
        om2 = om;
    a782:	4627      	mov	r7, r4
        om = SLIST_NEXT(om, om_next);
    a784:	461c      	mov	r4, r3
    omp = om->om_omp;
    a786:	68bb      	ldr	r3, [r7, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a788:	f107 0810 	add.w	r8, r7, #16
    a78c:	881b      	ldrh	r3, [r3, #0]
    a78e:	4498      	add	r8, r3
      (om->om_data + om->om_len);
    a790:	683b      	ldr	r3, [r7, #0]
    a792:	88fa      	ldrh	r2, [r7, #6]
    a794:	4413      	add	r3, r2
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a796:	eba8 0803 	sub.w	r8, r8, r3
    a79a:	fa1f f888 	uxth.w	r8, r8
    a79e:	e02d      	b.n	a7fc <os_mbuf_pullup+0xaa>
    } else {
        if (len > omp->omp_databuf_len - om->om_pkthdr_len) {
    a7a0:	7963      	ldrb	r3, [r4, #5]
    a7a2:	1af6      	subs	r6, r6, r3
    a7a4:	42b1      	cmp	r1, r6
    a7a6:	dc50      	bgt.n	a84a <os_mbuf_pullup+0xf8>
            goto bad;
        }

        om2 = os_mbuf_get(omp, 0);
    a7a8:	2100      	movs	r1, #0
    a7aa:	f7ff fcdb 	bl	a164 <os_mbuf_get>
        if (om2 == NULL) {
    a7ae:	4607      	mov	r7, r0
    a7b0:	2800      	cmp	r0, #0
    a7b2:	d04a      	beq.n	a84a <os_mbuf_pullup+0xf8>
            goto bad;
        }

        if (OS_MBUF_IS_PKTHDR(om)) {
    a7b4:	7963      	ldrb	r3, [r4, #5]
    a7b6:	2b07      	cmp	r3, #7
    a7b8:	d9e5      	bls.n	a786 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
    a7ba:	88c3      	ldrh	r3, [r0, #6]
    a7bc:	b96b      	cbnz	r3, a7da <os_mbuf_pullup+0x88>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
    a7be:	f100 0610 	add.w	r6, r0, #16
    a7c2:	7962      	ldrb	r2, [r4, #5]
    a7c4:	f104 0110 	add.w	r1, r4, #16
    a7c8:	4630      	mov	r0, r6
    a7ca:	f000 ffef 	bl	b7ac <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
    a7ce:	7963      	ldrb	r3, [r4, #5]
    a7d0:	717b      	strb	r3, [r7, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
    a7d2:	7963      	ldrb	r3, [r4, #5]
    a7d4:	441e      	add	r6, r3
    a7d6:	603e      	str	r6, [r7, #0]
    a7d8:	e7d5      	b.n	a786 <os_mbuf_pullup+0x34>
    assert(new_buf->om_len == 0);
    a7da:	f7fd fcf1 	bl	81c0 <hal_debugger_connected>
    a7de:	b100      	cbz	r0, a7e2 <os_mbuf_pullup+0x90>
    a7e0:	be01      	bkpt	0x0001
    a7e2:	2300      	movs	r3, #0
    a7e4:	461a      	mov	r2, r3
    a7e6:	4619      	mov	r1, r3
    a7e8:	4618      	mov	r0, r3
    a7ea:	f7ff f87f 	bl	98ec <__assert_func>
        om->om_len -= count;
        space -= count;
        if (om->om_len) {
            om->om_data += count;
        } else {
            next = SLIST_NEXT(om, om_next);
    a7ee:	68e6      	ldr	r6, [r4, #12]
            os_mbuf_free(om);
    a7f0:	4620      	mov	r0, r4
    a7f2:	f7ff fceb 	bl	a1cc <os_mbuf_free>
            om = next;
    a7f6:	4634      	mov	r4, r6
        }
    } while (len > 0 && om);
    a7f8:	b30d      	cbz	r5, a83e <os_mbuf_pullup+0xec>
    a7fa:	b304      	cbz	r4, a83e <os_mbuf_pullup+0xec>
        count = min(min(len, space), om->om_len);
    a7fc:	88e6      	ldrh	r6, [r4, #6]
    a7fe:	462b      	mov	r3, r5
    a800:	4545      	cmp	r5, r8
    a802:	bfa8      	it	ge
    a804:	4643      	movge	r3, r8
    a806:	429e      	cmp	r6, r3
    a808:	bfa8      	it	ge
    a80a:	461e      	movge	r6, r3
        memcpy(om2->om_data + om2->om_len, om->om_data, count);
    a80c:	6838      	ldr	r0, [r7, #0]
    a80e:	88fb      	ldrh	r3, [r7, #6]
    a810:	4632      	mov	r2, r6
    a812:	6821      	ldr	r1, [r4, #0]
    a814:	4418      	add	r0, r3
    a816:	f000 ffc9 	bl	b7ac <memcpy>
        len -= count;
    a81a:	b2b2      	uxth	r2, r6
    a81c:	1aad      	subs	r5, r5, r2
    a81e:	b2ad      	uxth	r5, r5
        om2->om_len += count;
    a820:	88fb      	ldrh	r3, [r7, #6]
    a822:	4413      	add	r3, r2
    a824:	80fb      	strh	r3, [r7, #6]
        om->om_len -= count;
    a826:	88e3      	ldrh	r3, [r4, #6]
    a828:	1a9b      	subs	r3, r3, r2
    a82a:	b29b      	uxth	r3, r3
    a82c:	80e3      	strh	r3, [r4, #6]
        space -= count;
    a82e:	eba8 0806 	sub.w	r8, r8, r6
        if (om->om_len) {
    a832:	2b00      	cmp	r3, #0
    a834:	d0db      	beq.n	a7ee <os_mbuf_pullup+0x9c>
            om->om_data += count;
    a836:	6823      	ldr	r3, [r4, #0]
    a838:	441e      	add	r6, r3
    a83a:	6026      	str	r6, [r4, #0]
    a83c:	e7dc      	b.n	a7f8 <os_mbuf_pullup+0xa6>
    if (len > 0) {
    a83e:	b90d      	cbnz	r5, a844 <os_mbuf_pullup+0xf2>
        os_mbuf_free(om2);
        goto bad;
    }
    SLIST_NEXT(om2, om_next) = om;
    a840:	60fc      	str	r4, [r7, #12]
    return (om2);
    a842:	e008      	b.n	a856 <os_mbuf_pullup+0x104>
        os_mbuf_free(om2);
    a844:	4638      	mov	r0, r7
    a846:	f7ff fcc1 	bl	a1cc <os_mbuf_free>
bad:
    os_mbuf_free_chain(om);
    a84a:	4620      	mov	r0, r4
    a84c:	f7ff fcc8 	bl	a1e0 <os_mbuf_free_chain>
    return (NULL);
    a850:	2700      	movs	r7, #0
    a852:	e000      	b.n	a856 <os_mbuf_pullup+0x104>
        return (om);
    a854:	4627      	mov	r7, r4
}
    a856:	4638      	mov	r0, r7
    a858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a85c <os_mbuf_prepend_pullup>:
{
    a85c:	b510      	push	{r4, lr}
    a85e:	460c      	mov	r4, r1
    om = os_mbuf_prepend(om, len);
    a860:	f7ff fe7c 	bl	a55c <os_mbuf_prepend>
    if (om == NULL) {
    a864:	4603      	mov	r3, r0
    a866:	b118      	cbz	r0, a870 <os_mbuf_prepend_pullup+0x14>
    om = os_mbuf_pullup(om, len);
    a868:	4621      	mov	r1, r4
    a86a:	f7ff ff72 	bl	a752 <os_mbuf_pullup>
    a86e:	4603      	mov	r3, r0
}
    a870:	4618      	mov	r0, r3
    a872:	bd10      	pop	{r4, pc}

0000a874 <os_mbuf_trim_front>:

struct os_mbuf *
os_mbuf_trim_front(struct os_mbuf *om)
{
    a874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a876:	4606      	mov	r6, r0
    struct os_mbuf *next;
    struct os_mbuf *cur;

    /* Abort early if there is nothing to trim. */
    if (om->om_len != 0) {
    a878:	88c7      	ldrh	r7, [r0, #6]
    a87a:	b9d7      	cbnz	r7, a8b2 <os_mbuf_trim_front+0x3e>
    }

    /* Starting with the second mbuf in the chain, continue removing and
     * freeing mbufs until an non-empty one is encountered.
     */
    cur = SLIST_NEXT(om, om_next);
    a87c:	68c4      	ldr	r4, [r0, #12]
    while (cur != NULL && cur->om_len == 0) {
    a87e:	e005      	b.n	a88c <os_mbuf_trim_front+0x18>
        next = SLIST_NEXT(cur, om_next);
    a880:	68e5      	ldr	r5, [r4, #12]

        SLIST_NEXT(om, om_next) = next;
    a882:	60f5      	str	r5, [r6, #12]
        os_mbuf_free(cur);
    a884:	4620      	mov	r0, r4
    a886:	f7ff fca1 	bl	a1cc <os_mbuf_free>

        cur = next;
    a88a:	462c      	mov	r4, r5
    while (cur != NULL && cur->om_len == 0) {
    a88c:	b114      	cbz	r4, a894 <os_mbuf_trim_front+0x20>
    a88e:	88e3      	ldrh	r3, [r4, #6]
    a890:	2b00      	cmp	r3, #0
    a892:	d0f5      	beq.n	a880 <os_mbuf_trim_front+0xc>
    }

    if (cur == NULL) {
    a894:	b16c      	cbz	r4, a8b2 <os_mbuf_trim_front+0x3e>
    if (OS_MBUF_IS_PKTHDR(om)) {
    a896:	7963      	ldrb	r3, [r4, #5]
    a898:	2b07      	cmp	r3, #7
    a89a:	d900      	bls.n	a89e <os_mbuf_trim_front+0x2a>
        startoff = om->om_pkthdr_len;
    a89c:	b29f      	uxth	r7, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a89e:	4620      	mov	r0, r4
    a8a0:	f850 3b10 	ldr.w	r3, [r0], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    a8a4:	4407      	add	r7, r0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a8a6:	1bdf      	subs	r7, r3, r7
    a8a8:	b2bf      	uxth	r7, r7
    }

    /* Try to remove the first mbuf in the chain.  If this buffer contains a
     * packet header, make sure the second buffer can accommodate it.
     */
    if (OS_MBUF_LEADINGSPACE(cur) >= om->om_pkthdr_len) {
    a8aa:	7973      	ldrb	r3, [r6, #5]
    a8ac:	b29a      	uxth	r2, r3
    a8ae:	42ba      	cmp	r2, r7
    a8b0:	d901      	bls.n	a8b6 <os_mbuf_trim_front+0x42>
        os_mbuf_free(om);
        om = cur;
    }

    return om;
}
    a8b2:	4630      	mov	r0, r6
    a8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        cur->om_pkthdr_len = om->om_pkthdr_len;
    a8b6:	7163      	strb	r3, [r4, #5]
        memcpy(OS_MBUF_PKTHDR(cur), OS_MBUF_PKTHDR(om), om->om_pkthdr_len);
    a8b8:	7972      	ldrb	r2, [r6, #5]
    a8ba:	f106 0110 	add.w	r1, r6, #16
    a8be:	f000 ff75 	bl	b7ac <memcpy>
        os_mbuf_free(om);
    a8c2:	4630      	mov	r0, r6
    a8c4:	f7ff fc82 	bl	a1cc <os_mbuf_free>
        om = cur;
    a8c8:	4626      	mov	r6, r4
    a8ca:	e7f2      	b.n	a8b2 <os_mbuf_trim_front+0x3e>

0000a8cc <os_mbuf_pack_chains>:
    return 0;
}

struct os_mbuf *
os_mbuf_pack_chains(struct os_mbuf *m1, struct os_mbuf *m2)
{
    a8cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t *dptr;
    struct os_mbuf *cur;
    struct os_mbuf *next;

    /* If m1 is NULL, return NULL */
    if (m1 == NULL) {
    a8d0:	4681      	mov	r9, r0
    a8d2:	2800      	cmp	r0, #0
    a8d4:	d04e      	beq.n	a974 <os_mbuf_pack_chains+0xa8>

    /*
     * Concatenate the two chains to start. This will discard packet header in
     * m2 and adjust packet length in m1 if m1 has a packet header.
     */
    if (m2 != NULL) {
    a8d6:	b109      	cbz	r1, a8dc <os_mbuf_pack_chains+0x10>
        os_mbuf_concat(m1, m2);
    a8d8:	f7ff fee7 	bl	a6aa <os_mbuf_concat>
{
    a8dc:	464d      	mov	r5, r9
    a8de:	e006      	b.n	a8ee <os_mbuf_pack_chains+0x22>
    startoff = 0;
    a8e0:	2300      	movs	r3, #0
    a8e2:	e008      	b.n	a8f6 <os_mbuf_pack_chains+0x2a>

    cur = m1;
    while (1) {
        /* If there is leading space in the mbuf, move data up */
        if (OS_MBUF_LEADINGSPACE(cur)) {
            dptr = &cur->om_databuf[0];
    a8e4:	4634      	mov	r4, r6
    a8e6:	e010      	b.n	a90a <os_mbuf_pack_chains+0x3e>
        if (next == NULL) {
            break;
        }

        /* Move cur to next as we filled up current */
        cur = next;
    a8e8:	4625      	mov	r5, r4
        if (next == NULL) {
    a8ea:	2c00      	cmp	r4, #0
    a8ec:	d042      	beq.n	a974 <os_mbuf_pack_chains+0xa8>
    if (OS_MBUF_IS_PKTHDR(om)) {
    a8ee:	796a      	ldrb	r2, [r5, #5]
    a8f0:	2a07      	cmp	r2, #7
    a8f2:	d9f5      	bls.n	a8e0 <os_mbuf_pack_chains+0x14>
        startoff = om->om_pkthdr_len;
    a8f4:	b293      	uxth	r3, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a8f6:	462e      	mov	r6, r5
    a8f8:	f856 1b10 	ldr.w	r1, [r6], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
    a8fc:	4433      	add	r3, r6
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
    a8fe:	1acb      	subs	r3, r1, r3
    a900:	b29b      	uxth	r3, r3
        if (OS_MBUF_LEADINGSPACE(cur)) {
    a902:	b13b      	cbz	r3, a914 <os_mbuf_pack_chains+0x48>
            if (OS_MBUF_IS_PKTHDR(cur)) {
    a904:	2a07      	cmp	r2, #7
    a906:	d9ed      	bls.n	a8e4 <os_mbuf_pack_chains+0x18>
                dptr += cur->om_pkthdr_len;
    a908:	18b4      	adds	r4, r6, r2
            memmove(dptr, cur->om_data, cur->om_len);
    a90a:	88ea      	ldrh	r2, [r5, #6]
    a90c:	4620      	mov	r0, r4
    a90e:	f000 ff5a 	bl	b7c6 <memmove>
            cur->om_data = dptr;
    a912:	602c      	str	r4, [r5, #0]
        dptr = cur->om_data + cur->om_len;
    a914:	682b      	ldr	r3, [r5, #0]
    a916:	f8b5 8006 	ldrh.w	r8, [r5, #6]
    a91a:	4498      	add	r8, r3
        next = SLIST_NEXT(cur, om_next);
    a91c:	68ec      	ldr	r4, [r5, #12]
    omp = om->om_omp;
    a91e:	68ab      	ldr	r3, [r5, #8]
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
    a920:	881f      	ldrh	r7, [r3, #0]
    a922:	4437      	add	r7, r6
    a924:	eba7 0708 	sub.w	r7, r7, r8
    a928:	b2bf      	uxth	r7, r7
        while (rem_len && next) {
    a92a:	2f00      	cmp	r7, #0
    a92c:	d0dc      	beq.n	a8e8 <os_mbuf_pack_chains+0x1c>
    a92e:	2c00      	cmp	r4, #0
    a930:	d0da      	beq.n	a8e8 <os_mbuf_pack_chains+0x1c>
            copylen = min(rem_len, next->om_len);
    a932:	88e6      	ldrh	r6, [r4, #6]
    a934:	42be      	cmp	r6, r7
    a936:	bf28      	it	cs
    a938:	463e      	movcs	r6, r7
            memcpy(dptr, next->om_data, copylen);
    a93a:	4632      	mov	r2, r6
    a93c:	6821      	ldr	r1, [r4, #0]
    a93e:	4640      	mov	r0, r8
    a940:	f000 ff34 	bl	b7ac <memcpy>
            cur->om_len += copylen;
    a944:	88eb      	ldrh	r3, [r5, #6]
    a946:	4433      	add	r3, r6
    a948:	80eb      	strh	r3, [r5, #6]
            dptr += copylen;
    a94a:	44b0      	add	r8, r6
            rem_len -= copylen;
    a94c:	1bbf      	subs	r7, r7, r6
    a94e:	b2bf      	uxth	r7, r7
            next->om_data += copylen;
    a950:	6823      	ldr	r3, [r4, #0]
    a952:	4433      	add	r3, r6
    a954:	6023      	str	r3, [r4, #0]
            next->om_len -= copylen;
    a956:	88e3      	ldrh	r3, [r4, #6]
    a958:	1b9e      	subs	r6, r3, r6
    a95a:	80e6      	strh	r6, [r4, #6]
            while (next->om_len == 0) {
    a95c:	88e3      	ldrh	r3, [r4, #6]
    a95e:	2b00      	cmp	r3, #0
    a960:	d1e3      	bne.n	a92a <os_mbuf_pack_chains+0x5e>
                SLIST_NEXT(cur, om_next) = SLIST_NEXT(next, om_next);
    a962:	68e3      	ldr	r3, [r4, #12]
    a964:	60eb      	str	r3, [r5, #12]
                os_mbuf_free(next);
    a966:	4620      	mov	r0, r4
    a968:	f7ff fc30 	bl	a1cc <os_mbuf_free>
                next = SLIST_NEXT(cur, om_next);
    a96c:	68ec      	ldr	r4, [r5, #12]
                if (next == NULL) {
    a96e:	2c00      	cmp	r4, #0
    a970:	d1f4      	bne.n	a95c <os_mbuf_pack_chains+0x90>
    a972:	e7da      	b.n	a92a <os_mbuf_pack_chains+0x5e>
    }

    return m1;
}
    a974:	4648      	mov	r0, r9
    a976:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000a97c <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
    a97c:	2800      	cmp	r0, #0
    a97e:	d031      	beq.n	a9e4 <os_mempool_init_internal+0x68>
{
    a980:	b430      	push	{r4, r5}
    a982:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
    a984:	2a00      	cmp	r2, #0
    a986:	d02f      	beq.n	a9e8 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
    a988:	b1bb      	cbz	r3, a9ba <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
    a98a:	b113      	cbz	r3, a992 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
    a98c:	f013 0f03 	tst.w	r3, #3
    a990:	d12c      	bne.n	a9ec <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
    a992:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
    a994:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
    a996:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
    a998:	f89d 000c 	ldrb.w	r0, [sp, #12]
    a99c:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
    a99e:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
    a9a0:	60e3      	str	r3, [r4, #12]
    mp->name = name;
    a9a2:	9802      	ldr	r0, [sp, #8]
    a9a4:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
    a9a6:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
    a9a8:	b199      	cbz	r1, a9d2 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    a9aa:	f012 0f03 	tst.w	r2, #3
    a9ae:	d002      	beq.n	a9b6 <os_mempool_init_internal+0x3a>
    a9b0:	f022 0203 	bic.w	r2, r2, #3
    a9b4:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
    a9b6:	2001      	movs	r0, #1
    a9b8:	e007      	b.n	a9ca <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
    a9ba:	2900      	cmp	r1, #0
    a9bc:	d0e5      	beq.n	a98a <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
    a9be:	2003      	movs	r0, #3
    a9c0:	e00e      	b.n	a9e0 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
    a9c2:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    a9c4:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
    a9c6:	3001      	adds	r0, #1
            block_addr += true_block_size;
    a9c8:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
    a9ca:	4281      	cmp	r1, r0
    a9cc:	dcf9      	bgt.n	a9c2 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
    a9ce:	2200      	movs	r2, #0
    a9d0:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
    a9d2:	2000      	movs	r0, #0
    a9d4:	6120      	str	r0, [r4, #16]
    a9d6:	4b06      	ldr	r3, [pc, #24]	; (a9f0 <os_mempool_init_internal+0x74>)
    a9d8:	685a      	ldr	r2, [r3, #4]
    a9da:	6014      	str	r4, [r2, #0]
    a9dc:	3410      	adds	r4, #16
    a9de:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
    a9e0:	bc30      	pop	{r4, r5}
    a9e2:	4770      	bx	lr
        return OS_INVALID_PARM;
    a9e4:	2003      	movs	r0, #3
}
    a9e6:	4770      	bx	lr
        return OS_INVALID_PARM;
    a9e8:	2003      	movs	r0, #3
    a9ea:	e7f9      	b.n	a9e0 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
    a9ec:	2004      	movs	r0, #4
    a9ee:	e7f7      	b.n	a9e0 <os_mempool_init_internal+0x64>
    a9f0:	200026f4 	.word	0x200026f4

0000a9f4 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
    a9f4:	b510      	push	{r4, lr}
    a9f6:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
    a9f8:	2400      	movs	r4, #0
    a9fa:	9401      	str	r4, [sp, #4]
    a9fc:	9c04      	ldr	r4, [sp, #16]
    a9fe:	9400      	str	r4, [sp, #0]
    aa00:	f7ff ffbc 	bl	a97c <os_mempool_init_internal>
}
    aa04:	b002      	add	sp, #8
    aa06:	bd10      	pop	{r4, pc}

0000aa08 <os_mempool_clear>:
    struct os_memblock *block_ptr;
    int true_block_size;
    uint8_t *block_addr;
    uint16_t blocks;

    if (!mp) {
    aa08:	4601      	mov	r1, r0
    aa0a:	b1b0      	cbz	r0, aa3a <os_mempool_clear+0x32>
        return OS_INVALID_PARM;
    }

    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    aa0c:	6800      	ldr	r0, [r0, #0]
    aa0e:	f010 0f03 	tst.w	r0, #3
    aa12:	d002      	beq.n	aa1a <os_mempool_clear+0x12>
    aa14:	f020 0003 	bic.w	r0, r0, #3
    aa18:	3004      	adds	r0, #4

    /* cleanup the memory pool structure */
    mp->mp_num_free = mp->mp_num_blocks;
    aa1a:	888b      	ldrh	r3, [r1, #4]
    aa1c:	80cb      	strh	r3, [r1, #6]
    mp->mp_min_free = mp->mp_num_blocks;
    aa1e:	810b      	strh	r3, [r1, #8]
    os_mempool_poison(mp, (void *)mp->mp_membuf_addr);
    os_mempool_guard(mp, (void *)mp->mp_membuf_addr);
    SLIST_FIRST(mp) = (void *)mp->mp_membuf_addr;
    aa20:	68ca      	ldr	r2, [r1, #12]
    aa22:	614a      	str	r2, [r1, #20]
    /* Chain the memory blocks to the free list */
    block_addr = (uint8_t *)mp->mp_membuf_addr;
    block_ptr = (struct os_memblock *)block_addr;
    blocks = mp->mp_num_blocks;

    while (blocks > 1) {
    aa24:	e004      	b.n	aa30 <os_mempool_clear+0x28>
        block_addr += true_block_size;
    aa26:	1811      	adds	r1, r2, r0
        os_mempool_poison(mp, block_addr);
        os_mempool_guard(mp, block_addr);
        SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
    aa28:	6011      	str	r1, [r2, #0]
        block_ptr = (struct os_memblock *)block_addr;
        --blocks;
    aa2a:	3b01      	subs	r3, #1
    aa2c:	b29b      	uxth	r3, r3
        block_ptr = (struct os_memblock *)block_addr;
    aa2e:	460a      	mov	r2, r1
    while (blocks > 1) {
    aa30:	2b01      	cmp	r3, #1
    aa32:	d8f8      	bhi.n	aa26 <os_mempool_clear+0x1e>
    }

    /* Last one in the list should be NULL */
    SLIST_NEXT(block_ptr, mb_next) = NULL;
    aa34:	2000      	movs	r0, #0
    aa36:	6010      	str	r0, [r2, #0]

    return OS_OK;
    aa38:	4770      	bx	lr
        return OS_INVALID_PARM;
    aa3a:	2003      	movs	r0, #3
}
    aa3c:	4770      	bx	lr

0000aa3e <os_memblock_from>:
    return true;
}

int
os_memblock_from(const struct os_mempool *mp, const void *block_addr)
{
    aa3e:	b410      	push	{r4}

    static_assert(sizeof block_addr == sizeof baddr32,
                  "Pointer to void must be 32-bits.");

    baddr32 = (uint32_t)block_addr;
    true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
    aa40:	6803      	ldr	r3, [r0, #0]
    aa42:	f013 0f03 	tst.w	r3, #3
    aa46:	d002      	beq.n	aa4e <os_memblock_from+0x10>
    aa48:	f023 0303 	bic.w	r3, r3, #3
    aa4c:	3304      	adds	r3, #4
    end = mp->mp_membuf_addr + (mp->mp_num_blocks * true_block_size);
    aa4e:	68c4      	ldr	r4, [r0, #12]
    aa50:	8882      	ldrh	r2, [r0, #4]
    aa52:	fb03 4202 	mla	r2, r3, r2, r4

    /* Check that the block is in the memory buffer range. */
    if ((baddr32 < mp->mp_membuf_addr) || (baddr32 >= end)) {
    aa56:	428c      	cmp	r4, r1
    aa58:	d80b      	bhi.n	aa72 <os_memblock_from+0x34>
    aa5a:	4291      	cmp	r1, r2
    aa5c:	d20d      	bcs.n	aa7a <os_memblock_from+0x3c>
        return 0;
    }

    /* All freed blocks should be on true block size boundaries! */
    if (((baddr32 - mp->mp_membuf_addr) % true_block_size) != 0) {
    aa5e:	1b09      	subs	r1, r1, r4
    aa60:	fbb1 f2f3 	udiv	r2, r1, r3
    aa64:	fb03 1112 	mls	r1, r3, r2, r1
    aa68:	b909      	cbnz	r1, aa6e <os_memblock_from+0x30>
        return 0;
    }

    return 1;
    aa6a:	2001      	movs	r0, #1
    aa6c:	e002      	b.n	aa74 <os_memblock_from+0x36>
        return 0;
    aa6e:	2000      	movs	r0, #0
    aa70:	e000      	b.n	aa74 <os_memblock_from+0x36>
        return 0;
    aa72:	2000      	movs	r0, #0
}
    aa74:	f85d 4b04 	ldr.w	r4, [sp], #4
    aa78:	4770      	bx	lr
        return 0;
    aa7a:	2000      	movs	r0, #0
    aa7c:	e7fa      	b.n	aa74 <os_memblock_from+0x36>

0000aa7e <os_memblock_get>:

void *
os_memblock_get(struct os_mempool *mp)
{
    aa7e:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
    aa80:	b1a0      	cbz	r0, aaac <os_memblock_get+0x2e>
    aa82:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    aa84:	f000 fd24 	bl	b4d0 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
    aa88:	88e3      	ldrh	r3, [r4, #6]
    aa8a:	b153      	cbz	r3, aaa2 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
    aa8c:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
    aa8e:	682a      	ldr	r2, [r5, #0]
    aa90:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
    aa92:	3b01      	subs	r3, #1
    aa94:	b29b      	uxth	r3, r3
    aa96:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
    aa98:	8922      	ldrh	r2, [r4, #8]
    aa9a:	4293      	cmp	r3, r2
    aa9c:	d202      	bcs.n	aaa4 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
    aa9e:	8123      	strh	r3, [r4, #8]
    aaa0:	e000      	b.n	aaa4 <os_memblock_get+0x26>
    block = NULL;
    aaa2:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
    aaa4:	f000 fd1a 	bl	b4dc <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
    aaa8:	4628      	mov	r0, r5
    aaaa:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
    aaac:	2500      	movs	r5, #0
    return (void *)block;
    aaae:	e7fb      	b.n	aaa8 <os_memblock_get+0x2a>

0000aab0 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
    aab0:	b538      	push	{r3, r4, r5, lr}
    aab2:	4604      	mov	r4, r0
    aab4:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
    aab6:	f000 fd0b 	bl	b4d0 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
    aaba:	6963      	ldr	r3, [r4, #20]
    aabc:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
    aabe:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
    aac0:	88e3      	ldrh	r3, [r4, #6]
    aac2:	3301      	adds	r3, #1
    aac4:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
    aac6:	f000 fd09 	bl	b4dc <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
    aaca:	2000      	movs	r0, #0
    aacc:	bd38      	pop	{r3, r4, r5, pc}

0000aace <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
    aace:	b168      	cbz	r0, aaec <os_memblock_put+0x1e>
{
    aad0:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
    aad2:	b169      	cbz	r1, aaf0 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
    aad4:	7a83      	ldrb	r3, [r0, #10]
    aad6:	f013 0f01 	tst.w	r3, #1
    aada:	d004      	beq.n	aae6 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
    aadc:	69c3      	ldr	r3, [r0, #28]
    aade:	b113      	cbz	r3, aae6 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
    aae0:	6a02      	ldr	r2, [r0, #32]
    aae2:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
    aae4:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
    aae6:	f7ff ffe3 	bl	aab0 <os_memblock_put_from_cb>
    aaea:	e7fb      	b.n	aae4 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
    aaec:	2003      	movs	r0, #3
}
    aaee:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    aaf0:	2003      	movs	r0, #3
    aaf2:	e7f7      	b.n	aae4 <os_memblock_put+0x16>

0000aaf4 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
    aaf4:	4b02      	ldr	r3, [pc, #8]	; (ab00 <os_mempool_module_init+0xc>)
    aaf6:	2200      	movs	r2, #0
    aaf8:	601a      	str	r2, [r3, #0]
    aafa:	605b      	str	r3, [r3, #4]
}
    aafc:	4770      	bx	lr
    aafe:	bf00      	nop
    ab00:	200026f4 	.word	0x200026f4

0000ab04 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    ab04:	4b02      	ldr	r3, [pc, #8]	; (ab10 <os_msys_find_biggest_pool+0xc>)
    ab06:	6818      	ldr	r0, [r3, #0]
    ab08:	b108      	cbz	r0, ab0e <os_msys_find_biggest_pool+0xa>
    ab0a:	6858      	ldr	r0, [r3, #4]
    ab0c:	3808      	subs	r0, #8
}
    ab0e:	4770      	bx	lr
    ab10:	20000138 	.word	0x20000138

0000ab14 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    ab14:	4b09      	ldr	r3, [pc, #36]	; (ab3c <os_msys_find_pool+0x28>)
    ab16:	6819      	ldr	r1, [r3, #0]
    ab18:	460b      	mov	r3, r1
    ab1a:	b123      	cbz	r3, ab26 <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
    ab1c:	881a      	ldrh	r2, [r3, #0]
    ab1e:	4282      	cmp	r2, r0
    ab20:	d201      	bcs.n	ab26 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    ab22:	689b      	ldr	r3, [r3, #8]
    ab24:	e7f9      	b.n	ab1a <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
    ab26:	b10b      	cbz	r3, ab2c <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
    ab28:	4618      	mov	r0, r3
    ab2a:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    ab2c:	b119      	cbz	r1, ab36 <os_msys_find_pool+0x22>
    ab2e:	4b03      	ldr	r3, [pc, #12]	; (ab3c <os_msys_find_pool+0x28>)
    ab30:	685b      	ldr	r3, [r3, #4]
    ab32:	3b08      	subs	r3, #8
    ab34:	e7f8      	b.n	ab28 <os_msys_find_pool+0x14>
    ab36:	460b      	mov	r3, r1
    return (pool);
    ab38:	e7f6      	b.n	ab28 <os_msys_find_pool+0x14>
    ab3a:	bf00      	nop
    ab3c:	20000138 	.word	0x20000138

0000ab40 <os_msys_register>:
{
    ab40:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    ab42:	4b11      	ldr	r3, [pc, #68]	; (ab88 <os_msys_register+0x48>)
    ab44:	681d      	ldr	r5, [r3, #0]
    ab46:	462b      	mov	r3, r5
    prev = NULL;
    ab48:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    ab4a:	b133      	cbz	r3, ab5a <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
    ab4c:	8801      	ldrh	r1, [r0, #0]
    ab4e:	881a      	ldrh	r2, [r3, #0]
    ab50:	4291      	cmp	r1, r2
    ab52:	d302      	bcc.n	ab5a <os_msys_register+0x1a>
        prev = pool;
    ab54:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
    ab56:	689b      	ldr	r3, [r3, #8]
    ab58:	e7f7      	b.n	ab4a <os_msys_register+0xa>
    if (prev) {
    ab5a:	b15c      	cbz	r4, ab74 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    ab5c:	68a3      	ldr	r3, [r4, #8]
    ab5e:	6083      	str	r3, [r0, #8]
    ab60:	b11b      	cbz	r3, ab6a <os_msys_register+0x2a>
    ab62:	60a0      	str	r0, [r4, #8]
}
    ab64:	2000      	movs	r0, #0
    ab66:	bc30      	pop	{r4, r5}
    ab68:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
    ab6a:	f100 0308 	add.w	r3, r0, #8
    ab6e:	4a06      	ldr	r2, [pc, #24]	; (ab88 <os_msys_register+0x48>)
    ab70:	6053      	str	r3, [r2, #4]
    ab72:	e7f6      	b.n	ab62 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
    ab74:	6085      	str	r5, [r0, #8]
    ab76:	b115      	cbz	r5, ab7e <os_msys_register+0x3e>
    ab78:	4b03      	ldr	r3, [pc, #12]	; (ab88 <os_msys_register+0x48>)
    ab7a:	6018      	str	r0, [r3, #0]
    ab7c:	e7f2      	b.n	ab64 <os_msys_register+0x24>
    ab7e:	f100 0308 	add.w	r3, r0, #8
    ab82:	4a01      	ldr	r2, [pc, #4]	; (ab88 <os_msys_register+0x48>)
    ab84:	6053      	str	r3, [r2, #4]
    ab86:	e7f7      	b.n	ab78 <os_msys_register+0x38>
    ab88:	20000138 	.word	0x20000138

0000ab8c <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
    ab8c:	b530      	push	{r4, r5, lr}
    ab8e:	b083      	sub	sp, #12
    ab90:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
    ab92:	9d07      	ldr	r5, [sp, #28]
    ab94:	9501      	str	r5, [sp, #4]
    ab96:	9d06      	ldr	r5, [sp, #24]
    ab98:	9500      	str	r5, [sp, #0]
    ab9a:	f00c fb12 	bl	171c2 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
    ab9e:	b928      	cbnz	r0, abac <os_msys_init_once+0x20>

    rc = os_msys_register(mbuf_pool);
    aba0:	4620      	mov	r0, r4
    aba2:	f7ff ffcd 	bl	ab40 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
    aba6:	b970      	cbnz	r0, abc6 <os_msys_init_once+0x3a>
}
    aba8:	b003      	add	sp, #12
    abaa:	bd30      	pop	{r4, r5, pc}
    SYSINIT_PANIC_ASSERT(rc == 0);
    abac:	f7fd fb08 	bl	81c0 <hal_debugger_connected>
    abb0:	b100      	cbz	r0, abb4 <os_msys_init_once+0x28>
    abb2:	be01      	bkpt	0x0001
    abb4:	2000      	movs	r0, #0
    abb6:	9000      	str	r0, [sp, #0]
    abb8:	4b09      	ldr	r3, [pc, #36]	; (abe0 <os_msys_init_once+0x54>)
    abba:	681d      	ldr	r5, [r3, #0]
    abbc:	4603      	mov	r3, r0
    abbe:	4602      	mov	r2, r0
    abc0:	4601      	mov	r1, r0
    abc2:	47a8      	blx	r5
    abc4:	e7ec      	b.n	aba0 <os_msys_init_once+0x14>
    SYSINIT_PANIC_ASSERT(rc == 0);
    abc6:	f7fd fafb 	bl	81c0 <hal_debugger_connected>
    abca:	b100      	cbz	r0, abce <os_msys_init_once+0x42>
    abcc:	be01      	bkpt	0x0001
    abce:	2000      	movs	r0, #0
    abd0:	9000      	str	r0, [sp, #0]
    abd2:	4b03      	ldr	r3, [pc, #12]	; (abe0 <os_msys_init_once+0x54>)
    abd4:	681c      	ldr	r4, [r3, #0]
    abd6:	4603      	mov	r3, r0
    abd8:	4602      	mov	r2, r0
    abda:	4601      	mov	r1, r0
    abdc:	47a0      	blx	r4
}
    abde:	e7e3      	b.n	aba8 <os_msys_init_once+0x1c>
    abe0:	200000ec 	.word	0x200000ec

0000abe4 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
    abe4:	4b02      	ldr	r3, [pc, #8]	; (abf0 <os_msys_reset+0xc>)
    abe6:	2200      	movs	r2, #0
    abe8:	601a      	str	r2, [r3, #0]
    abea:	605b      	str	r3, [r3, #4]
}
    abec:	4770      	bx	lr
    abee:	bf00      	nop
    abf0:	20000138 	.word	0x20000138

0000abf4 <os_msys_get>:
{
    abf4:	b510      	push	{r4, lr}
    abf6:	460c      	mov	r4, r1
    if (dsize == 0) {
    abf8:	b930      	cbnz	r0, ac08 <os_msys_get+0x14>
        pool = os_msys_find_biggest_pool();
    abfa:	f7ff ff83 	bl	ab04 <os_msys_find_biggest_pool>
    if (!pool) {
    abfe:	b130      	cbz	r0, ac0e <os_msys_get+0x1a>
    m = os_mbuf_get(pool, leadingspace);
    ac00:	4621      	mov	r1, r4
    ac02:	f7ff faaf 	bl	a164 <os_mbuf_get>
}
    ac06:	bd10      	pop	{r4, pc}
        pool = os_msys_find_pool(dsize);
    ac08:	f7ff ff84 	bl	ab14 <os_msys_find_pool>
    ac0c:	e7f7      	b.n	abfe <os_msys_get+0xa>
    return (NULL);
    ac0e:	2000      	movs	r0, #0
    ac10:	e7f9      	b.n	ac06 <os_msys_get+0x12>

0000ac12 <os_msys_get_pkthdr>:
{
    ac12:	b510      	push	{r4, lr}
    ac14:	460c      	mov	r4, r1
    if (dsize == 0) {
    ac16:	b930      	cbnz	r0, ac26 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
    ac18:	f7ff ff74 	bl	ab04 <os_msys_find_biggest_pool>
    if (!pool) {
    ac1c:	b158      	cbz	r0, ac36 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
    ac1e:	b2e1      	uxtb	r1, r4
    ac20:	f7ff fab9 	bl	a196 <os_mbuf_get_pkthdr>
}
    ac24:	bd10      	pop	{r4, pc}
    ac26:	f101 0308 	add.w	r3, r1, #8
    ac2a:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
    ac2c:	4403      	add	r3, r0
    ac2e:	b298      	uxth	r0, r3
    ac30:	f7ff ff70 	bl	ab14 <os_msys_find_pool>
    ac34:	e7f2      	b.n	ac1c <os_msys_get_pkthdr+0xa>
    return (NULL);
    ac36:	2000      	movs	r0, #0
    ac38:	e7f4      	b.n	ac24 <os_msys_get_pkthdr+0x12>
	...

0000ac3c <os_msys_init>:

void
os_msys_init(void)
{
    ac3c:	b500      	push	{lr}
    ac3e:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
    ac40:	f7ff ffd0 	bl	abe4 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
    ac44:	4b06      	ldr	r3, [pc, #24]	; (ac60 <os_msys_init+0x24>)
    ac46:	9301      	str	r3, [sp, #4]
    ac48:	f44f 7392 	mov.w	r3, #292	; 0x124
    ac4c:	9300      	str	r3, [sp, #0]
    ac4e:	2340      	movs	r3, #64	; 0x40
    ac50:	4a04      	ldr	r2, [pc, #16]	; (ac64 <os_msys_init+0x28>)
    ac52:	4905      	ldr	r1, [pc, #20]	; (ac68 <os_msys_init+0x2c>)
    ac54:	4805      	ldr	r0, [pc, #20]	; (ac6c <os_msys_init+0x30>)
    ac56:	f7ff ff99 	bl	ab8c <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
    ac5a:	b003      	add	sp, #12
    ac5c:	f85d fb04 	ldr.w	pc, [sp], #4
    ac60:	00028c38 	.word	0x00028c38
    ac64:	20006ffc 	.word	0x20006ffc
    ac68:	20007008 	.word	0x20007008
    ac6c:	200026fc 	.word	0x200026fc

0000ac70 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
    ac70:	4603      	mov	r3, r0
    ac72:	b128      	cbz	r0, ac80 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
    ac74:	2000      	movs	r0, #0
    ac76:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
    ac78:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
    ac7a:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
    ac7c:	6018      	str	r0, [r3, #0]
    ac7e:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    ac80:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
    ac82:	4770      	bx	lr

0000ac84 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
    ac84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
    ac86:	4b2e      	ldr	r3, [pc, #184]	; (ad40 <os_mutex_release+0xbc>)
    ac88:	681b      	ldr	r3, [r3, #0]
    ac8a:	2b00      	cmp	r3, #0
    ac8c:	d052      	beq.n	ad34 <os_mutex_release+0xb0>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    ac8e:	2800      	cmp	r0, #0
    ac90:	d052      	beq.n	ad38 <os_mutex_release+0xb4>
    ac92:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
    ac94:	f000 f98a 	bl	afac <os_sched_get_current_task>
    ac98:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
    ac9a:	88e3      	ldrh	r3, [r4, #6]
    ac9c:	2b00      	cmp	r3, #0
    ac9e:	d04d      	beq.n	ad3c <os_mutex_release+0xb8>
    aca0:	68a2      	ldr	r2, [r4, #8]
    aca2:	4282      	cmp	r2, r0
    aca4:	d001      	beq.n	acaa <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
    aca6:	2005      	movs	r0, #5
    aca8:	e045      	b.n	ad36 <os_mutex_release+0xb2>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
    acaa:	2b01      	cmp	r3, #1
    acac:	d003      	beq.n	acb6 <os_mutex_release+0x32>
        --mu->mu_level;
    acae:	3b01      	subs	r3, #1
    acb0:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
    acb2:	2000      	movs	r0, #0
        goto done;
    acb4:	e03f      	b.n	ad36 <os_mutex_release+0xb2>
    }

    OS_ENTER_CRITICAL(sr);
    acb6:	f000 fc0b 	bl	b4d0 <os_arch_save_sr>
    acba:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
    acbc:	88e3      	ldrh	r3, [r4, #6]
    acbe:	3b01      	subs	r3, #1
    acc0:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
    acc2:	7aea      	ldrb	r2, [r5, #11]
    acc4:	7963      	ldrb	r3, [r4, #5]
    acc6:	429a      	cmp	r2, r3
    acc8:	d11e      	bne.n	ad08 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
    acca:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
    accc:	b146      	cbz	r6, ace0 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
    acce:	69f3      	ldr	r3, [r6, #28]
    acd0:	b1fb      	cbz	r3, ad12 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
    acd2:	4630      	mov	r0, r6
    acd4:	f000 f9be 	bl	b054 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
    acd8:	2301      	movs	r3, #1
    acda:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
    acdc:	7af3      	ldrb	r3, [r6, #11]
    acde:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
    ace0:	60a6      	str	r6, [r4, #8]
    if (rdy) {
    ace2:	b116      	cbz	r6, acea <os_mutex_release+0x66>
        rdy->t_lockcnt++;
    ace4:	7bb3      	ldrb	r3, [r6, #14]
    ace6:	3301      	adds	r3, #1
    ace8:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
    acea:	7bab      	ldrb	r3, [r5, #14]
    acec:	3b01      	subs	r3, #1
    acee:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
    acf0:	f000 fa36 	bl	b160 <os_sched_next_task>
    acf4:	4604      	mov	r4, r0
    if (rdy != current) {
    acf6:	4285      	cmp	r5, r0
    acf8:	d015      	beq.n	ad26 <os_mutex_release+0xa2>
        resched = 1;
    acfa:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
    acfc:	4638      	mov	r0, r7
    acfe:	f000 fbed 	bl	b4dc <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
    ad02:	b995      	cbnz	r5, ad2a <os_mutex_release+0xa6>
        os_sched(rdy);
    }

    ret = OS_OK;
    ad04:	2000      	movs	r0, #0
    ad06:	e016      	b.n	ad36 <os_mutex_release+0xb2>
        current->t_prio = mu->mu_prio;
    ad08:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
    ad0a:	4628      	mov	r0, r5
    ad0c:	f000 fa40 	bl	b190 <os_sched_resort>
    ad10:	e7db      	b.n	acca <os_mutex_release+0x46>
        assert(rdy->t_obj);
    ad12:	f7fd fa55 	bl	81c0 <hal_debugger_connected>
    ad16:	b100      	cbz	r0, ad1a <os_mutex_release+0x96>
    ad18:	be01      	bkpt	0x0001
    ad1a:	2300      	movs	r3, #0
    ad1c:	461a      	mov	r2, r3
    ad1e:	4619      	mov	r1, r3
    ad20:	4618      	mov	r0, r3
    ad22:	f7fe fde3 	bl	98ec <__assert_func>
    resched = 0;
    ad26:	2500      	movs	r5, #0
    ad28:	e7e8      	b.n	acfc <os_mutex_release+0x78>
        os_sched(rdy);
    ad2a:	4620      	mov	r0, r4
    ad2c:	f000 fa1e 	bl	b16c <os_sched>
    ret = OS_OK;
    ad30:	2000      	movs	r0, #0
    ad32:	e000      	b.n	ad36 <os_mutex_release+0xb2>
        ret = OS_NOT_STARTED;
    ad34:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
    ad36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
    ad38:	2003      	movs	r0, #3
    ad3a:	e7fc      	b.n	ad36 <os_mutex_release+0xb2>
        ret = OS_BAD_MUTEX;
    ad3c:	2005      	movs	r0, #5
    ad3e:	e7fa      	b.n	ad36 <os_mutex_release+0xb2>
    ad40:	200026d0 	.word	0x200026d0

0000ad44 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
    ad44:	4b36      	ldr	r3, [pc, #216]	; (ae20 <os_mutex_pend+0xdc>)
    ad46:	681b      	ldr	r3, [r3, #0]
    ad48:	2b00      	cmp	r3, #0
    ad4a:	d065      	beq.n	ae18 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
    ad4c:	2800      	cmp	r0, #0
    ad4e:	d065      	beq.n	ae1c <os_mutex_pend+0xd8>
{
    ad50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ad54:	460f      	mov	r7, r1
    ad56:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
    ad58:	f000 fbba 	bl	b4d0 <os_arch_save_sr>
    ad5c:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
    ad5e:	f000 f925 	bl	afac <os_sched_get_current_task>
    ad62:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
    ad64:	88e3      	ldrh	r3, [r4, #6]
    ad66:	b19b      	cbz	r3, ad90 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
    ad68:	68a2      	ldr	r2, [r4, #8]
    ad6a:	4282      	cmp	r2, r0
    ad6c:	d01e      	beq.n	adac <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
    ad6e:	b327      	cbz	r7, adba <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
    ad70:	7ad1      	ldrb	r1, [r2, #11]
    ad72:	7ac3      	ldrb	r3, [r0, #11]
    ad74:	4299      	cmp	r1, r3
    ad76:	d825      	bhi.n	adc4 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
    ad78:	6821      	ldr	r1, [r4, #0]
    ad7a:	b369      	cbz	r1, add8 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ad7c:	460b      	mov	r3, r1
    last = NULL;
    ad7e:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ad80:	b32b      	cbz	r3, adce <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
    ad82:	7ae8      	ldrb	r0, [r5, #11]
    ad84:	7ada      	ldrb	r2, [r3, #11]
    ad86:	4290      	cmp	r0, r2
    ad88:	d321      	bcc.n	adce <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
    ad8a:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
    ad8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    ad8e:	e7f7      	b.n	ad80 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
    ad90:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
    ad92:	7ac3      	ldrb	r3, [r0, #11]
    ad94:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
    ad96:	7b83      	ldrb	r3, [r0, #14]
    ad98:	3301      	adds	r3, #1
    ad9a:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
    ad9c:	2301      	movs	r3, #1
    ad9e:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
    ada0:	4640      	mov	r0, r8
    ada2:	f000 fb9b 	bl	b4dc <os_arch_restore_sr>
        ret = OS_OK;
    ada6:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
    ada8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
    adac:	3301      	adds	r3, #1
    adae:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
    adb0:	4640      	mov	r0, r8
    adb2:	f000 fb93 	bl	b4dc <os_arch_restore_sr>
        ret = OS_OK;
    adb6:	2000      	movs	r0, #0
        goto done;
    adb8:	e7f6      	b.n	ada8 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
    adba:	4640      	mov	r0, r8
    adbc:	f000 fb8e 	bl	b4dc <os_arch_restore_sr>
        ret = OS_TIMEOUT;
    adc0:	2006      	movs	r0, #6
        goto done;
    adc2:	e7f1      	b.n	ada8 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
    adc4:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
    adc6:	68a0      	ldr	r0, [r4, #8]
    adc8:	f000 f9e2 	bl	b190 <os_sched_resort>
    adcc:	e7d4      	b.n	ad78 <os_mutex_pend+0x34>
    if (last) {
    adce:	b11e      	cbz	r6, add8 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
    add0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
    add2:	64eb      	str	r3, [r5, #76]	; 0x4c
    add4:	64f5      	str	r5, [r6, #76]	; 0x4c
    add6:	e001      	b.n	addc <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
    add8:	64e9      	str	r1, [r5, #76]	; 0x4c
    adda:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
    addc:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
    adde:	7b6b      	ldrb	r3, [r5, #13]
    ade0:	f043 0304 	orr.w	r3, r3, #4
    ade4:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
    ade6:	4639      	mov	r1, r7
    ade8:	4628      	mov	r0, r5
    adea:	f000 f8eb 	bl	afc4 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
    adee:	4640      	mov	r0, r8
    adf0:	f000 fb74 	bl	b4dc <os_arch_restore_sr>
    os_sched(NULL);
    adf4:	2000      	movs	r0, #0
    adf6:	f000 f9b9 	bl	b16c <os_sched>
    OS_ENTER_CRITICAL(sr);
    adfa:	f000 fb69 	bl	b4d0 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
    adfe:	7b6b      	ldrb	r3, [r5, #13]
    ae00:	f023 0304 	bic.w	r3, r3, #4
    ae04:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
    ae06:	f000 fb69 	bl	b4dc <os_arch_restore_sr>
    if (mu->mu_owner == current) {
    ae0a:	68a3      	ldr	r3, [r4, #8]
    ae0c:	42ab      	cmp	r3, r5
    ae0e:	d001      	beq.n	ae14 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
    ae10:	2006      	movs	r0, #6
    ae12:	e7c9      	b.n	ada8 <os_mutex_pend+0x64>
        ret = OS_OK;
    ae14:	2000      	movs	r0, #0
    ae16:	e7c7      	b.n	ada8 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
    ae18:	2009      	movs	r0, #9
    ae1a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
    ae1c:	2003      	movs	r0, #3
}
    ae1e:	4770      	bx	lr
    ae20:	200026d0 	.word	0x200026d0

0000ae24 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
    ae24:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    ae26:	4b05      	ldr	r3, [pc, #20]	; (ae3c <os_sanity_check_list_lock+0x18>)
    ae28:	6818      	ldr	r0, [r3, #0]
    ae2a:	b900      	cbnz	r0, ae2e <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
    ae2c:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
    ae2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ae32:	4803      	ldr	r0, [pc, #12]	; (ae40 <os_sanity_check_list_lock+0x1c>)
    ae34:	f7ff ff86 	bl	ad44 <os_mutex_pend>
err:
    ae38:	e7f8      	b.n	ae2c <os_sanity_check_list_lock+0x8>
    ae3a:	bf00      	nop
    ae3c:	200026d0 	.word	0x200026d0
    ae40:	20007028 	.word	0x20007028

0000ae44 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
    ae44:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
    ae46:	4b04      	ldr	r3, [pc, #16]	; (ae58 <os_sanity_check_list_unlock+0x14>)
    ae48:	6818      	ldr	r0, [r3, #0]
    ae4a:	b900      	cbnz	r0, ae4e <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
    ae4c:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
    ae4e:	4803      	ldr	r0, [pc, #12]	; (ae5c <os_sanity_check_list_unlock+0x18>)
    ae50:	f7ff ff18 	bl	ac84 <os_mutex_release>
err:
    ae54:	e7fa      	b.n	ae4c <os_sanity_check_list_unlock+0x8>
    ae56:	bf00      	nop
    ae58:	200026d0 	.word	0x200026d0
    ae5c:	20007028 	.word	0x20007028

0000ae60 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
    ae60:	2300      	movs	r3, #0
    ae62:	6003      	str	r3, [r0, #0]
    ae64:	6043      	str	r3, [r0, #4]
    ae66:	6083      	str	r3, [r0, #8]
    ae68:	60c3      	str	r3, [r0, #12]
    ae6a:	6103      	str	r3, [r0, #16]
}
    ae6c:	4618      	mov	r0, r3
    ae6e:	4770      	bx	lr

0000ae70 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
    ae70:	b510      	push	{r4, lr}
    ae72:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
    ae74:	f7ff ffd6 	bl	ae24 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
    ae78:	4603      	mov	r3, r0
    ae7a:	b108      	cbz	r0, ae80 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
    ae7c:	4618      	mov	r0, r3
    ae7e:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
    ae80:	4b03      	ldr	r3, [pc, #12]	; (ae90 <os_sanity_check_register+0x20>)
    ae82:	681a      	ldr	r2, [r3, #0]
    ae84:	6122      	str	r2, [r4, #16]
    ae86:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
    ae88:	f7ff ffdc 	bl	ae44 <os_sanity_check_list_unlock>
    ae8c:	4603      	mov	r3, r0
err:
    ae8e:	e7f5      	b.n	ae7c <os_sanity_check_register+0xc>
    ae90:	20007024 	.word	0x20007024

0000ae94 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
    ae94:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
    ae96:	f7ff ffc5 	bl	ae24 <os_sanity_check_list_lock>
    if (rc != 0) {
    ae9a:	b910      	cbnz	r0, aea2 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    ae9c:	4b1d      	ldr	r3, [pc, #116]	; (af14 <os_sanity_run+0x80>)
    ae9e:	681c      	ldr	r4, [r3, #0]
    aea0:	e012      	b.n	aec8 <os_sanity_run+0x34>
        assert(0);
    aea2:	f7fd f98d 	bl	81c0 <hal_debugger_connected>
    aea6:	b100      	cbz	r0, aeaa <os_sanity_run+0x16>
    aea8:	be01      	bkpt	0x0001
    aeaa:	2300      	movs	r3, #0
    aeac:	461a      	mov	r2, r3
    aeae:	4619      	mov	r1, r3
    aeb0:	4618      	mov	r0, r3
    aeb2:	f7fe fd1b 	bl	98ec <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
    aeb6:	f000 fa8d 	bl	b3d4 <os_time_get>
    aeba:	6823      	ldr	r3, [r4, #0]
    aebc:	6862      	ldr	r2, [r4, #4]
    aebe:	4413      	add	r3, r2
    aec0:	1ac3      	subs	r3, r0, r3
    aec2:	2b00      	cmp	r3, #0
    aec4:	dc0d      	bgt.n	aee2 <os_sanity_run+0x4e>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
    aec6:	6924      	ldr	r4, [r4, #16]
    aec8:	b1ac      	cbz	r4, aef6 <os_sanity_run+0x62>
        if (sc->sc_func) {
    aeca:	68a3      	ldr	r3, [r4, #8]
    aecc:	2b00      	cmp	r3, #0
    aece:	d0f2      	beq.n	aeb6 <os_sanity_run+0x22>
            rc = sc->sc_func(sc, sc->sc_arg);
    aed0:	68e1      	ldr	r1, [r4, #12]
    aed2:	4620      	mov	r0, r4
    aed4:	4798      	blx	r3
            if (rc == OS_OK) {
    aed6:	2800      	cmp	r0, #0
    aed8:	d1ed      	bne.n	aeb6 <os_sanity_run+0x22>
                sc->sc_checkin_last = os_time_get();
    aeda:	f000 fa7b 	bl	b3d4 <os_time_get>
    aede:	6020      	str	r0, [r4, #0]
                continue;
    aee0:	e7f1      	b.n	aec6 <os_sanity_run+0x32>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
    aee2:	f7fd f96d 	bl	81c0 <hal_debugger_connected>
    aee6:	b100      	cbz	r0, aeea <os_sanity_run+0x56>
    aee8:	be01      	bkpt	0x0001
    aeea:	2300      	movs	r3, #0
    aeec:	461a      	mov	r2, r3
    aeee:	4619      	mov	r1, r3
    aef0:	4618      	mov	r0, r3
    aef2:	f7fe fcfb 	bl	98ec <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
    aef6:	f7ff ffa5 	bl	ae44 <os_sanity_check_list_unlock>
    if (rc != 0) {
    aefa:	b900      	cbnz	r0, aefe <os_sanity_run+0x6a>
        assert(0);
    }
}
    aefc:	bd10      	pop	{r4, pc}
        assert(0);
    aefe:	f7fd f95f 	bl	81c0 <hal_debugger_connected>
    af02:	b100      	cbz	r0, af06 <os_sanity_run+0x72>
    af04:	be01      	bkpt	0x0001
    af06:	2300      	movs	r3, #0
    af08:	461a      	mov	r2, r3
    af0a:	4619      	mov	r1, r3
    af0c:	4618      	mov	r0, r3
    af0e:	f7fe fced 	bl	98ec <__assert_func>
    af12:	bf00      	nop
    af14:	20007024 	.word	0x20007024

0000af18 <os_sanity_init>:

int
os_sanity_init(void)
{
    af18:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
    af1a:	4802      	ldr	r0, [pc, #8]	; (af24 <os_sanity_init+0xc>)
    af1c:	f7ff fea8 	bl	ac70 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
    af20:	bd08      	pop	{r3, pc}
    af22:	bf00      	nop
    af24:	20007028 	.word	0x20007028

0000af28 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
    af28:	7b03      	ldrb	r3, [r0, #12]
    af2a:	2b01      	cmp	r3, #1
    af2c:	d001      	beq.n	af32 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
    af2e:	2002      	movs	r0, #2
}
    af30:	4770      	bx	lr
{
    af32:	b510      	push	{r4, lr}
    af34:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    af36:	f000 facb 	bl	b4d0 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    af3a:	4b0f      	ldr	r3, [pc, #60]	; (af78 <os_sched_insert+0x50>)
    af3c:	681b      	ldr	r3, [r3, #0]
    af3e:	b12b      	cbz	r3, af4c <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
    af40:	7ae1      	ldrb	r1, [r4, #11]
    af42:	7ada      	ldrb	r2, [r3, #11]
    af44:	4291      	cmp	r1, r2
    af46:	d301      	bcc.n	af4c <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
    af48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    af4a:	e7f8      	b.n	af3e <os_sched_insert+0x16>
    if (entry) {
    af4c:	b153      	cbz	r3, af64 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
    af4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    af50:	64a2      	str	r2, [r4, #72]	; 0x48
    af52:	6463      	str	r3, [r4, #68]	; 0x44
    af54:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    af56:	6014      	str	r4, [r2, #0]
    af58:	3444      	adds	r4, #68	; 0x44
    af5a:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
    af5c:	f000 fabe 	bl	b4dc <os_arch_restore_sr>
    return (0);
    af60:	2000      	movs	r0, #0
}
    af62:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
    af64:	2300      	movs	r3, #0
    af66:	6463      	str	r3, [r4, #68]	; 0x44
    af68:	4b03      	ldr	r3, [pc, #12]	; (af78 <os_sched_insert+0x50>)
    af6a:	685a      	ldr	r2, [r3, #4]
    af6c:	64a2      	str	r2, [r4, #72]	; 0x48
    af6e:	6014      	str	r4, [r2, #0]
    af70:	3444      	adds	r4, #68	; 0x44
    af72:	605c      	str	r4, [r3, #4]
    af74:	e7f2      	b.n	af5c <os_sched_insert+0x34>
    af76:	bf00      	nop
    af78:	20000140 	.word	0x20000140

0000af7c <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
    af7c:	b410      	push	{r4}
    stack = g_current_task->t_stackbottom;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(stack[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
    af7e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    af80:	3301      	adds	r3, #1
    af82:	63c3      	str	r3, [r0, #60]	; 0x3c
#if MYNEWT_VAL(OS_TASK_RUN_TIME_CPUTIME)
    ticks = os_cputime_get32();
#else
    ticks = g_os_time;
    af84:	4b06      	ldr	r3, [pc, #24]	; (afa0 <os_sched_ctx_sw_hook+0x24>)
    af86:	6818      	ldr	r0, [r3, #0]
#endif
    g_current_task->t_run_time += ticks - g_os_last_ctx_sw_time;
    af88:	4b06      	ldr	r3, [pc, #24]	; (afa4 <os_sched_ctx_sw_hook+0x28>)
    af8a:	681c      	ldr	r4, [r3, #0]
    af8c:	4906      	ldr	r1, [pc, #24]	; (afa8 <os_sched_ctx_sw_hook+0x2c>)
    af8e:	680b      	ldr	r3, [r1, #0]
    af90:	1ac2      	subs	r2, r0, r3
    af92:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    af94:	4413      	add	r3, r2
    af96:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = ticks;
    af98:	6008      	str	r0, [r1, #0]
}
    af9a:	f85d 4b04 	ldr.w	r4, [sp], #4
    af9e:	4770      	bx	lr
    afa0:	20007078 	.word	0x20007078
    afa4:	20007034 	.word	0x20007034
    afa8:	20007038 	.word	0x20007038

0000afac <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
    afac:	4b01      	ldr	r3, [pc, #4]	; (afb4 <os_sched_get_current_task+0x8>)
    afae:	6818      	ldr	r0, [r3, #0]
    afb0:	4770      	bx	lr
    afb2:	bf00      	nop
    afb4:	20007034 	.word	0x20007034

0000afb8 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
    afb8:	4b01      	ldr	r3, [pc, #4]	; (afc0 <os_sched_set_current_task+0x8>)
    afba:	6018      	str	r0, [r3, #0]
}
    afbc:	4770      	bx	lr
    afbe:	bf00      	nop
    afc0:	20007034 	.word	0x20007034

0000afc4 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
    afc4:	b538      	push	{r3, r4, r5, lr}
    afc6:	4604      	mov	r4, r0
    afc8:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    afca:	6c43      	ldr	r3, [r0, #68]	; 0x44
    afcc:	b1d3      	cbz	r3, b004 <os_sched_sleep+0x40>
    afce:	6c82      	ldr	r2, [r0, #72]	; 0x48
    afd0:	649a      	str	r2, [r3, #72]	; 0x48
    afd2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    afd4:	6c62      	ldr	r2, [r4, #68]	; 0x44
    afd6:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
    afd8:	2302      	movs	r3, #2
    afda:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
    afdc:	f000 f9fa 	bl	b3d4 <os_time_get>
    afe0:	4428      	add	r0, r5
    afe2:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
    afe4:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    afe8:	d010      	beq.n	b00c <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    afea:	4b18      	ldr	r3, [pc, #96]	; (b04c <os_sched_sleep+0x88>)
    afec:	681b      	ldr	r3, [r3, #0]
    afee:	b1d3      	cbz	r3, b026 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    aff0:	7b5a      	ldrb	r2, [r3, #13]
    aff2:	f012 0f01 	tst.w	r2, #1
    aff6:	d116      	bne.n	b026 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
    aff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    affa:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
    affc:	2a00      	cmp	r2, #0
    affe:	dc12      	bgt.n	b026 <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
    b000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    b002:	e7f4      	b.n	afee <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    b004:	6c82      	ldr	r2, [r0, #72]	; 0x48
    b006:	4b12      	ldr	r3, [pc, #72]	; (b050 <os_sched_sleep+0x8c>)
    b008:	605a      	str	r2, [r3, #4]
    b00a:	e7e2      	b.n	afd2 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
    b00c:	7b63      	ldrb	r3, [r4, #13]
    b00e:	f043 0301 	orr.w	r3, r3, #1
    b012:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    b014:	2300      	movs	r3, #0
    b016:	6463      	str	r3, [r4, #68]	; 0x44
    b018:	4b0c      	ldr	r3, [pc, #48]	; (b04c <os_sched_sleep+0x88>)
    b01a:	685a      	ldr	r2, [r3, #4]
    b01c:	64a2      	str	r2, [r4, #72]	; 0x48
    b01e:	6014      	str	r4, [r2, #0]
    b020:	3444      	adds	r4, #68	; 0x44
    b022:	605c      	str	r4, [r3, #4]
    b024:	e007      	b.n	b036 <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
    b026:	b143      	cbz	r3, b03a <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
    b028:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b02a:	64a2      	str	r2, [r4, #72]	; 0x48
    b02c:	6463      	str	r3, [r4, #68]	; 0x44
    b02e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    b030:	6014      	str	r4, [r2, #0]
    b032:	3444      	adds	r4, #68	; 0x44
    b034:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
    b036:	2000      	movs	r0, #0
    b038:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    b03a:	2300      	movs	r3, #0
    b03c:	6463      	str	r3, [r4, #68]	; 0x44
    b03e:	4b03      	ldr	r3, [pc, #12]	; (b04c <os_sched_sleep+0x88>)
    b040:	685a      	ldr	r2, [r3, #4]
    b042:	64a2      	str	r2, [r4, #72]	; 0x48
    b044:	6014      	str	r4, [r2, #0]
    b046:	3444      	adds	r4, #68	; 0x44
    b048:	605c      	str	r4, [r3, #4]
    b04a:	e7f4      	b.n	b036 <os_sched_sleep+0x72>
    b04c:	20000148 	.word	0x20000148
    b050:	20000140 	.word	0x20000140

0000b054 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
    b054:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
    b056:	7b03      	ldrb	r3, [r0, #12]
    b058:	2b02      	cmp	r3, #2
    b05a:	d108      	bne.n	b06e <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
    b05c:	69c3      	ldr	r3, [r0, #28]
    b05e:	b31b      	cbz	r3, b0a8 <os_sched_wakeup+0x54>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    b060:	681a      	ldr	r2, [r3, #0]
    b062:	b172      	cbz	r2, b082 <os_sched_wakeup+0x2e>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    b064:	4282      	cmp	r2, r0
    b066:	d117      	bne.n	b098 <os_sched_wakeup+0x44>
    b068:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
    b06a:	601a      	str	r2, [r3, #0]
    b06c:	e019      	b.n	b0a2 <os_sched_wakeup+0x4e>
    assert(t->t_state == OS_TASK_SLEEP);
    b06e:	f7fd f8a7 	bl	81c0 <hal_debugger_connected>
    b072:	b100      	cbz	r0, b076 <os_sched_wakeup+0x22>
    b074:	be01      	bkpt	0x0001
    b076:	2300      	movs	r3, #0
    b078:	461a      	mov	r2, r3
    b07a:	4619      	mov	r1, r3
    b07c:	4618      	mov	r0, r3
    b07e:	f7fe fc35 	bl	98ec <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
    b082:	f7fd f89d 	bl	81c0 <hal_debugger_connected>
    b086:	b100      	cbz	r0, b08a <os_sched_wakeup+0x36>
    b088:	be01      	bkpt	0x0001
    b08a:	2300      	movs	r3, #0
    b08c:	461a      	mov	r2, r3
    b08e:	4619      	mov	r1, r3
    b090:	4618      	mov	r0, r3
    b092:	f7fe fc2b 	bl	98ec <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
    b096:	461a      	mov	r2, r3
    b098:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    b09a:	4283      	cmp	r3, r0
    b09c:	d1fb      	bne.n	b096 <os_sched_wakeup+0x42>
    b09e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    b0a0:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
    b0a2:	2300      	movs	r3, #0
    b0a4:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
    b0a6:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
    b0a8:	2301      	movs	r3, #1
    b0aa:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
    b0ac:	2300      	movs	r3, #0
    b0ae:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
    b0b0:	7b43      	ldrb	r3, [r0, #13]
    b0b2:	f023 0301 	bic.w	r3, r3, #1
    b0b6:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    b0b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    b0ba:	b143      	cbz	r3, b0ce <os_sched_wakeup+0x7a>
    b0bc:	6c82      	ldr	r2, [r0, #72]	; 0x48
    b0be:	649a      	str	r2, [r3, #72]	; 0x48
    b0c0:	6c83      	ldr	r3, [r0, #72]	; 0x48
    b0c2:	6c42      	ldr	r2, [r0, #68]	; 0x44
    b0c4:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
    b0c6:	f7ff ff2f 	bl	af28 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
    b0ca:	2000      	movs	r0, #0
    b0cc:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
    b0ce:	6c82      	ldr	r2, [r0, #72]	; 0x48
    b0d0:	4b01      	ldr	r3, [pc, #4]	; (b0d8 <os_sched_wakeup+0x84>)
    b0d2:	605a      	str	r2, [r3, #4]
    b0d4:	e7f4      	b.n	b0c0 <os_sched_wakeup+0x6c>
    b0d6:	bf00      	nop
    b0d8:	20000148 	.word	0x20000148

0000b0dc <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
    b0dc:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
    b0de:	f000 f979 	bl	b3d4 <os_time_get>
    b0e2:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
    b0e4:	f000 f9f4 	bl	b4d0 <os_arch_save_sr>
    b0e8:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
    b0ea:	4b0a      	ldr	r3, [pc, #40]	; (b114 <os_sched_os_timer_exp+0x38>)
    b0ec:	6818      	ldr	r0, [r3, #0]
    while (t) {
    b0ee:	b160      	cbz	r0, b10a <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
    b0f0:	7b43      	ldrb	r3, [r0, #13]
    b0f2:	f013 0f01 	tst.w	r3, #1
    b0f6:	d108      	bne.n	b10a <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
    b0f8:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
    b0fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
    b0fc:	1aeb      	subs	r3, r5, r3
    b0fe:	2b00      	cmp	r3, #0
    b100:	db03      	blt.n	b10a <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
    b102:	f7ff ffa7 	bl	b054 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
    b106:	4620      	mov	r0, r4
    b108:	e7f1      	b.n	b0ee <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
    b10a:	4630      	mov	r0, r6
    b10c:	f000 f9e6 	bl	b4dc <os_arch_restore_sr>
}
    b110:	bd70      	pop	{r4, r5, r6, pc}
    b112:	bf00      	nop
    b114:	20000148 	.word	0x20000148

0000b118 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
    b118:	b510      	push	{r4, lr}
    b11a:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
    b11c:	f000 f9e1 	bl	b4e2 <os_arch_in_critical>
    b120:	b150      	cbz	r0, b138 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
    b122:	4b0e      	ldr	r3, [pc, #56]	; (b15c <os_sched_wakeup_ticks+0x44>)
    b124:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
    b126:	b19b      	cbz	r3, b150 <os_sched_wakeup_ticks+0x38>
    b128:	7b5a      	ldrb	r2, [r3, #13]
    b12a:	f012 0f01 	tst.w	r2, #1
    b12e:	d112      	bne.n	b156 <os_sched_wakeup_ticks+0x3e>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
    b130:	6b58      	ldr	r0, [r3, #52]	; 0x34
    b132:	1b00      	subs	r0, r0, r4
    b134:	d40a      	bmi.n	b14c <os_sched_wakeup_ticks+0x34>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
    b136:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
    b138:	f7fd f842 	bl	81c0 <hal_debugger_connected>
    b13c:	b100      	cbz	r0, b140 <os_sched_wakeup_ticks+0x28>
    b13e:	be01      	bkpt	0x0001
    b140:	2300      	movs	r3, #0
    b142:	461a      	mov	r2, r3
    b144:	4619      	mov	r1, r3
    b146:	4618      	mov	r0, r3
    b148:	f7fe fbd0 	bl	98ec <__assert_func>
        rt = 0;     /* wakeup time was in the past */
    b14c:	2000      	movs	r0, #0
    b14e:	e7f2      	b.n	b136 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
    b150:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b154:	e7ef      	b.n	b136 <os_sched_wakeup_ticks+0x1e>
    b156:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
    b15a:	e7ec      	b.n	b136 <os_sched_wakeup_ticks+0x1e>
    b15c:	20000148 	.word	0x20000148

0000b160 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
    b160:	4b01      	ldr	r3, [pc, #4]	; (b168 <os_sched_next_task+0x8>)
    b162:	6818      	ldr	r0, [r3, #0]
    b164:	4770      	bx	lr
    b166:	bf00      	nop
    b168:	20000140 	.word	0x20000140

0000b16c <os_sched>:
{
    b16c:	b538      	push	{r3, r4, r5, lr}
    b16e:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
    b170:	f000 f9ae 	bl	b4d0 <os_arch_save_sr>
    b174:	4605      	mov	r5, r0
    if (!next_t) {
    b176:	b134      	cbz	r4, b186 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
    b178:	4620      	mov	r0, r4
    b17a:	f000 f99f 	bl	b4bc <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
    b17e:	4628      	mov	r0, r5
    b180:	f000 f9ac 	bl	b4dc <os_arch_restore_sr>
}
    b184:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
    b186:	f7ff ffeb 	bl	b160 <os_sched_next_task>
    b18a:	4604      	mov	r4, r0
    b18c:	e7f4      	b.n	b178 <os_sched+0xc>
	...

0000b190 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
    b190:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
    b192:	7b03      	ldrb	r3, [r0, #12]
    b194:	2b01      	cmp	r3, #1
    b196:	d000      	beq.n	b19a <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
    b198:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    b19a:	6c43      	ldr	r3, [r0, #68]	; 0x44
    b19c:	b13b      	cbz	r3, b1ae <os_sched_resort+0x1e>
    b19e:	6c82      	ldr	r2, [r0, #72]	; 0x48
    b1a0:	649a      	str	r2, [r3, #72]	; 0x48
    b1a2:	6c83      	ldr	r3, [r0, #72]	; 0x48
    b1a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
    b1a6:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
    b1a8:	f7ff febe 	bl	af28 <os_sched_insert>
}
    b1ac:	e7f4      	b.n	b198 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
    b1ae:	6c82      	ldr	r2, [r0, #72]	; 0x48
    b1b0:	4b01      	ldr	r3, [pc, #4]	; (b1b8 <os_sched_resort+0x28>)
    b1b2:	605a      	str	r2, [r3, #4]
    b1b4:	e7f5      	b.n	b1a2 <os_sched_resort+0x12>
    b1b6:	bf00      	nop
    b1b8:	20000140 	.word	0x20000140

0000b1bc <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
    b1bc:	2300      	movs	r3, #0
    b1be:	e003      	b.n	b1c8 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
    b1c0:	4a03      	ldr	r2, [pc, #12]	; (b1d0 <_clear_stack+0x14>)
    b1c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
    b1c6:	3301      	adds	r3, #1
    b1c8:	428b      	cmp	r3, r1
    b1ca:	dbf9      	blt.n	b1c0 <_clear_stack+0x4>
    }
}
    b1cc:	4770      	bx	lr
    b1ce:	bf00      	nop
    b1d0:	deadbeef 	.word	0xdeadbeef

0000b1d4 <os_task_stacktop_get>:
}

os_stack_t *
os_task_stacktop_get(struct os_task *t)
{
    return &t->t_stackbottom[t->t_stacksize];
    b1d4:	6843      	ldr	r3, [r0, #4]
    b1d6:	8900      	ldrh	r0, [r0, #8]
}
    b1d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    b1dc:	4770      	bx	lr
	...

0000b1e0 <os_task_init>:
{
    b1e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1e4:	4604      	mov	r4, r0
    b1e6:	460e      	mov	r6, r1
    b1e8:	4690      	mov	r8, r2
    b1ea:	461d      	mov	r5, r3
    b1ec:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
    memset(t, 0, sizeof(*t));
    b1f0:	2250      	movs	r2, #80	; 0x50
    b1f2:	2100      	movs	r1, #0
    b1f4:	f000 fb03 	bl	b7fe <memset>
    t->t_func = func;
    b1f8:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
    b1fc:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
    b1fe:	f000 f967 	bl	b4d0 <os_arch_save_sr>
    rc = g_task_id;
    b202:	4b2e      	ldr	r3, [pc, #184]	; (b2bc <os_task_init+0xdc>)
    b204:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
    b206:	1c6a      	adds	r2, r5, #1
    b208:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
    b20a:	f000 f967 	bl	b4dc <os_arch_restore_sr>
    t->t_taskid = os_task_next_id();
    b20e:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
    b210:	f89d 3018 	ldrb.w	r3, [sp, #24]
    b214:	72e3      	strb	r3, [r4, #11]
    t->t_state = OS_TASK_READY;
    b216:	2301      	movs	r3, #1
    b218:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
    b21a:	6126      	str	r6, [r4, #16]
    t->t_next_wakeup = 0;
    b21c:	2300      	movs	r3, #0
    b21e:	6363      	str	r3, [r4, #52]	; 0x34
    rc = os_sanity_check_init(&t->t_sanity_check);
    b220:	f104 0620 	add.w	r6, r4, #32
    b224:	4630      	mov	r0, r6
    b226:	f7ff fe1b 	bl	ae60 <os_sanity_check_init>
    if (rc != OS_OK) {
    b22a:	4605      	mov	r5, r0
    b22c:	2800      	cmp	r0, #0
    b22e:	d138      	bne.n	b2a2 <os_task_init+0xc2>
    if (sanity_itvl != OS_WAIT_FOREVER) {
    b230:	9b07      	ldr	r3, [sp, #28]
    b232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    b236:	d005      	beq.n	b244 <os_task_init+0x64>
        sc->sc_checkin_itvl = sanity_itvl;
    b238:	6263      	str	r3, [r4, #36]	; 0x24
        rc = os_sanity_check_register(sc);
    b23a:	4630      	mov	r0, r6
    b23c:	f7ff fe18 	bl	ae70 <os_sanity_check_register>
        if (rc != OS_OK) {
    b240:	4605      	mov	r5, r0
    b242:	bb70      	cbnz	r0, b2a2 <os_task_init+0xc2>
    _clear_stack(stack_bottom, stack_size);
    b244:	4639      	mov	r1, r7
    b246:	9808      	ldr	r0, [sp, #32]
    b248:	f7ff ffb8 	bl	b1bc <_clear_stack>
    t->t_stackbottom = stack_bottom;
    b24c:	9b08      	ldr	r3, [sp, #32]
    b24e:	6063      	str	r3, [r4, #4]
    t->t_stacksize = stack_size;
    b250:	8127      	strh	r7, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, os_task_stacktop_get(t),
    b252:	4620      	mov	r0, r4
    b254:	f7ff ffbe 	bl	b1d4 <os_task_stacktop_get>
    b258:	463a      	mov	r2, r7
    b25a:	4601      	mov	r1, r0
    b25c:	4620      	mov	r0, r4
    b25e:	f000 f945 	bl	b4ec <os_arch_task_stack_init>
    b262:	6020      	str	r0, [r4, #0]
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    b264:	4b16      	ldr	r3, [pc, #88]	; (b2c0 <os_task_init+0xe0>)
    b266:	681b      	ldr	r3, [r3, #0]
    b268:	b17b      	cbz	r3, b28a <os_task_init+0xaa>
        assert(t->t_prio != task->t_prio);
    b26a:	7ae1      	ldrb	r1, [r4, #11]
    b26c:	7ada      	ldrb	r2, [r3, #11]
    b26e:	4291      	cmp	r1, r2
    b270:	d001      	beq.n	b276 <os_task_init+0x96>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
    b272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b274:	e7f8      	b.n	b268 <os_task_init+0x88>
        assert(t->t_prio != task->t_prio);
    b276:	f7fc ffa3 	bl	81c0 <hal_debugger_connected>
    b27a:	b100      	cbz	r0, b27e <os_task_init+0x9e>
    b27c:	be01      	bkpt	0x0001
    b27e:	2300      	movs	r3, #0
    b280:	461a      	mov	r2, r3
    b282:	4619      	mov	r1, r3
    b284:	4618      	mov	r0, r3
    b286:	f7fe fb31 	bl	98ec <__assert_func>
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
    b28a:	6423      	str	r3, [r4, #64]	; 0x40
    b28c:	4b0c      	ldr	r3, [pc, #48]	; (b2c0 <os_task_init+0xe0>)
    b28e:	685a      	ldr	r2, [r3, #4]
    b290:	6014      	str	r4, [r2, #0]
    b292:	f104 0240 	add.w	r2, r4, #64	; 0x40
    b296:	605a      	str	r2, [r3, #4]
    rc = os_sched_insert(t);
    b298:	4620      	mov	r0, r4
    b29a:	f7ff fe45 	bl	af28 <os_sched_insert>
    b29e:	4605      	mov	r5, r0
    if (rc != OS_OK) {
    b2a0:	b110      	cbz	r0, b2a8 <os_task_init+0xc8>
}
    b2a2:	4628      	mov	r0, r5
    b2a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
    b2a8:	f7fe fbe0 	bl	9a6c <os_started>
    b2ac:	b908      	cbnz	r0, b2b2 <os_task_init+0xd2>
    return (0);
    b2ae:	4605      	mov	r5, r0
    b2b0:	e7f7      	b.n	b2a2 <os_task_init+0xc2>
        os_sched(NULL);
    b2b2:	2000      	movs	r0, #0
    b2b4:	f7ff ff5a 	bl	b16c <os_sched>
    b2b8:	e7f3      	b.n	b2a2 <os_task_init+0xc2>
    b2ba:	bf00      	nop
    b2bc:	20007044 	.word	0x20007044
    b2c0:	2000703c 	.word	0x2000703c

0000b2c4 <os_task_info_get>:
    return rc;
}

void
os_task_info_get(const struct os_task *task, struct os_task_info *oti)
{
    b2c4:	b538      	push	{r3, r4, r5, lr}
    b2c6:	4604      	mov	r4, r0
    os_stack_t *bottom;
    os_stack_t *top;

    oti->oti_prio = task->t_prio;
    b2c8:	7ac3      	ldrb	r3, [r0, #11]
    b2ca:	700b      	strb	r3, [r1, #0]
    oti->oti_taskid = task->t_taskid;
    b2cc:	7a83      	ldrb	r3, [r0, #10]
    b2ce:	704b      	strb	r3, [r1, #1]
    oti->oti_state = task->t_state;
    b2d0:	7b03      	ldrb	r3, [r0, #12]
    b2d2:	708b      	strb	r3, [r1, #2]

    bottom = task->t_stackbottom;
    b2d4:	6843      	ldr	r3, [r0, #4]
    top = bottom + task->t_stacksize;
    b2d6:	8902      	ldrh	r2, [r0, #8]
    b2d8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    while (bottom < top) {
    b2dc:	4293      	cmp	r3, r2
    b2de:	d205      	bcs.n	b2ec <os_task_info_get+0x28>
        if (*bottom != OS_STACK_PATTERN) {
    b2e0:	681d      	ldr	r5, [r3, #0]
    b2e2:	480f      	ldr	r0, [pc, #60]	; (b320 <os_task_info_get+0x5c>)
    b2e4:	4285      	cmp	r5, r0
    b2e6:	d101      	bne.n	b2ec <os_task_info_get+0x28>
            break;
        }
        ++bottom;
    b2e8:	3304      	adds	r3, #4
    b2ea:	e7f7      	b.n	b2dc <os_task_info_get+0x18>
    }

    oti->oti_stkusage = (uint16_t) (top - bottom);
    b2ec:	1ad3      	subs	r3, r2, r3
    b2ee:	f3c3 038f 	ubfx	r3, r3, #2, #16
    b2f2:	808b      	strh	r3, [r1, #4]
    oti->oti_stksize = task->t_stacksize;
    b2f4:	8923      	ldrh	r3, [r4, #8]
    b2f6:	80cb      	strh	r3, [r1, #6]
    oti->oti_cswcnt = task->t_ctx_sw_cnt;
    b2f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    b2fa:	608b      	str	r3, [r1, #8]
    oti->oti_runtime = task->t_run_time;
    b2fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    b2fe:	60cb      	str	r3, [r1, #12]
    oti->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
    b300:	6a23      	ldr	r3, [r4, #32]
    b302:	610b      	str	r3, [r1, #16]
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
    b304:	6a23      	ldr	r3, [r4, #32]
                            task->t_sanity_check.sc_checkin_itvl;
    b306:	6a62      	ldr	r2, [r4, #36]	; 0x24
    oti->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
    b308:	4413      	add	r3, r2
    b30a:	614b      	str	r3, [r1, #20]
    oti->oti_name[0] = '\0';
    b30c:	4608      	mov	r0, r1
    b30e:	2300      	movs	r3, #0
    b310:	f800 3f18 	strb.w	r3, [r0, #24]!
    strncat(oti->oti_name, task->t_name, sizeof(oti->oti_name) - 1);
    b314:	221f      	movs	r2, #31
    b316:	6921      	ldr	r1, [r4, #16]
    b318:	f000 faae 	bl	b878 <strncat>
}
    b31c:	bd38      	pop	{r3, r4, r5, pc}
    b31e:	bf00      	nop
    b320:	deadbeef 	.word	0xdeadbeef

0000b324 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
    b324:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
    b328:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
    b32a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
    b32e:	e9d1 4500 	ldrd	r4, r5, [r1]
    b332:	eb14 0b03 	adds.w	fp, r4, r3
    b336:	f145 0c00 	adc.w	ip, r5, #0
    b33a:	e9c2 bc00 	strd	fp, ip, [r2]
    b33e:	688b      	ldr	r3, [r1, #8]
    b340:	f641 6184 	movw	r1, #7812	; 0x1e84
    b344:	fb01 3000 	mla	r0, r1, r0, r3
    b348:	6090      	str	r0, [r2, #8]
    b34a:	4b08      	ldr	r3, [pc, #32]	; (b36c <os_deltatime+0x48>)
    b34c:	4298      	cmp	r0, r3
    b34e:	dd0a      	ble.n	b366 <os_deltatime+0x42>
    b350:	f11b 0401 	adds.w	r4, fp, #1
    b354:	f14c 0500 	adc.w	r5, ip, #0
    b358:	e9c2 4500 	strd	r4, r5, [r2]
    b35c:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
    b360:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
    b364:	6090      	str	r0, [r2, #8]
}
    b366:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
    b36a:	4770      	bx	lr
    b36c:	000f423f 	.word	0x000f423f

0000b370 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
    b370:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
    b372:	1e04      	subs	r4, r0, #0
    b374:	db0d      	blt.n	b392 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
    b376:	f000 f8ab 	bl	b4d0 <os_arch_save_sr>
    b37a:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
    b37c:	4a13      	ldr	r2, [pc, #76]	; (b3cc <os_time_tick+0x5c>)
    b37e:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
    b380:	18e0      	adds	r0, r4, r3
    b382:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
    b384:	ea90 0f03 	teq	r0, r3
    b388:	d40d      	bmi.n	b3a6 <os_time_tick+0x36>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
    b38a:	4628      	mov	r0, r5
    b38c:	f000 f8a6 	bl	b4dc <os_arch_restore_sr>
}
    b390:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
    b392:	f7fc ff15 	bl	81c0 <hal_debugger_connected>
    b396:	b100      	cbz	r0, b39a <os_time_tick+0x2a>
    b398:	be01      	bkpt	0x0001
    b39a:	2300      	movs	r3, #0
    b39c:	461a      	mov	r2, r3
    b39e:	4619      	mov	r1, r3
    b3a0:	4618      	mov	r0, r3
    b3a2:	f7fe faa3 	bl	98ec <__assert_func>
        delta = g_os_time - basetod.ostime;
    b3a6:	4e0a      	ldr	r6, [pc, #40]	; (b3d0 <os_time_tick+0x60>)
    b3a8:	4631      	mov	r1, r6
    b3aa:	f851 4b08 	ldr.w	r4, [r1], #8
    b3ae:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
    b3b0:	460a      	mov	r2, r1
    b3b2:	4620      	mov	r0, r4
    b3b4:	f7ff ffb6 	bl	b324 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
    b3b8:	f106 0118 	add.w	r1, r6, #24
    b3bc:	460a      	mov	r2, r1
    b3be:	4620      	mov	r0, r4
    b3c0:	f7ff ffb0 	bl	b324 <os_deltatime>
        basetod.ostime = g_os_time;
    b3c4:	4b01      	ldr	r3, [pc, #4]	; (b3cc <os_time_tick+0x5c>)
    b3c6:	681b      	ldr	r3, [r3, #0]
    b3c8:	6033      	str	r3, [r6, #0]
    b3ca:	e7de      	b.n	b38a <os_time_tick+0x1a>
    b3cc:	20007078 	.word	0x20007078
    b3d0:	20007048 	.word	0x20007048

0000b3d4 <os_time_get>:
}
    b3d4:	4b01      	ldr	r3, [pc, #4]	; (b3dc <os_time_get+0x8>)
    b3d6:	6818      	ldr	r0, [r3, #0]
    b3d8:	4770      	bx	lr
    b3da:	bf00      	nop
    b3dc:	20007078 	.word	0x20007078

0000b3e0 <os_time_advance>:

void
os_time_advance(int ticks)
{
    b3e0:	b510      	push	{r4, lr}
    assert(ticks >= 0);
    b3e2:	1e04      	subs	r4, r0, #0
    b3e4:	db09      	blt.n	b3fa <os_time_advance+0x1a>

    if (ticks > 0) {
    b3e6:	2c00      	cmp	r4, #0
    b3e8:	dd06      	ble.n	b3f8 <os_time_advance+0x18>
        if (!os_started()) {
    b3ea:	f7fe fb3f 	bl	9a6c <os_started>
    b3ee:	b970      	cbnz	r0, b40e <os_time_advance+0x2e>
            g_os_time += ticks;
    b3f0:	4a0c      	ldr	r2, [pc, #48]	; (b424 <os_time_advance+0x44>)
    b3f2:	6813      	ldr	r3, [r2, #0]
    b3f4:	441c      	add	r4, r3
    b3f6:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
    b3f8:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
    b3fa:	f7fc fee1 	bl	81c0 <hal_debugger_connected>
    b3fe:	b100      	cbz	r0, b402 <os_time_advance+0x22>
    b400:	be01      	bkpt	0x0001
    b402:	2300      	movs	r3, #0
    b404:	461a      	mov	r2, r3
    b406:	4619      	mov	r1, r3
    b408:	4618      	mov	r0, r3
    b40a:	f7fe fa6f 	bl	98ec <__assert_func>
            os_time_tick(ticks);
    b40e:	4620      	mov	r0, r4
    b410:	f7ff ffae 	bl	b370 <os_time_tick>
            os_callout_tick();
    b414:	f7fe fc7e 	bl	9d14 <os_callout_tick>
            os_sched_os_timer_exp();
    b418:	f7ff fe60 	bl	b0dc <os_sched_os_timer_exp>
            os_sched(NULL);
    b41c:	2000      	movs	r0, #0
    b41e:	f7ff fea5 	bl	b16c <os_sched>
}
    b422:	e7e9      	b.n	b3f8 <os_time_advance+0x18>
    b424:	20007078 	.word	0x20007078

0000b428 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
    b428:	b900      	cbnz	r0, b42c <os_time_delay+0x4>
    b42a:	4770      	bx	lr
{
    b42c:	b538      	push	{r3, r4, r5, lr}
    b42e:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
    b430:	f000 f84e 	bl	b4d0 <os_arch_save_sr>
    b434:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
    b436:	f7ff fdb9 	bl	afac <os_sched_get_current_task>
    b43a:	4621      	mov	r1, r4
    b43c:	f7ff fdc2 	bl	afc4 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
    b440:	4628      	mov	r0, r5
    b442:	f000 f84b 	bl	b4dc <os_arch_restore_sr>
        os_sched(NULL);
    b446:	2000      	movs	r0, #0
    b448:	f7ff fe90 	bl	b16c <os_sched>
    }
}
    b44c:	bd38      	pop	{r3, r4, r5, pc}
	...

0000b450 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
    b450:	b570      	push	{r4, r5, r6, lr}
    b452:	4605      	mov	r5, r0
    b454:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
    b456:	f000 f83b 	bl	b4d0 <os_arch_save_sr>
    b45a:	4606      	mov	r6, r0
    if (tv != NULL) {
    b45c:	b145      	cbz	r5, b470 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
    b45e:	f7ff ffb9 	bl	b3d4 <os_time_get>
    b462:	4908      	ldr	r1, [pc, #32]	; (b484 <os_gettimeofday+0x34>)
    b464:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
    b468:	462a      	mov	r2, r5
    b46a:	1ac0      	subs	r0, r0, r3
    b46c:	f7ff ff5a 	bl	b324 <os_deltatime>
    }

    if (tz != NULL) {
    b470:	b114      	cbz	r4, b478 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
    b472:	4b04      	ldr	r3, [pc, #16]	; (b484 <os_gettimeofday+0x34>)
    b474:	6a98      	ldr	r0, [r3, #40]	; 0x28
    b476:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
    b478:	4630      	mov	r0, r6
    b47a:	f000 f82f 	bl	b4dc <os_arch_restore_sr>

    return (0);
}
    b47e:	2000      	movs	r0, #0
    b480:	bd70      	pop	{r4, r5, r6, pc}
    b482:	bf00      	nop
    b484:	20007048 	.word	0x20007048

0000b488 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
    b488:	b538      	push	{r3, r4, r5, lr}
    b48a:	4604      	mov	r4, r0
    b48c:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
    b48e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b492:	2300      	movs	r3, #0
    b494:	01c0      	lsls	r0, r0, #7
    b496:	0e61      	lsrs	r1, r4, #25
    b498:	f000 fd8c 	bl	bfb4 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
    b49c:	2901      	cmp	r1, #1
    b49e:	bf08      	it	eq
    b4a0:	2800      	cmpeq	r0, #0
    b4a2:	d202      	bcs.n	b4aa <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
    b4a4:	6028      	str	r0, [r5, #0]
    return 0;
    b4a6:	2000      	movs	r0, #0
}
    b4a8:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
    b4aa:	2002      	movs	r0, #2
    b4ac:	e7fc      	b.n	b4a8 <os_time_ms_to_ticks+0x20>

0000b4ae <os_arch_task_return_handler>:
    return ret;
}

static void
os_arch_task_return_handler(void)
{
    b4ae:	e7fe      	b.n	b4ae <os_arch_task_return_handler>

0000b4b0 <timer_handler>:
{
    b4b0:	b508      	push	{r3, lr}
    os_time_advance(1);
    b4b2:	2001      	movs	r0, #1
    b4b4:	f7ff ff94 	bl	b3e0 <os_time_advance>
}
    b4b8:	bd08      	pop	{r3, pc}
	...

0000b4bc <os_arch_ctx_sw>:
{
    b4bc:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
    b4be:	f7ff fd5d 	bl	af7c <os_sched_ctx_sw_hook>
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
    b4c2:	4b02      	ldr	r3, [pc, #8]	; (b4cc <os_arch_ctx_sw+0x10>)
    b4c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b4c8:	605a      	str	r2, [r3, #4]
}
    b4ca:	bd08      	pop	{r3, pc}
    b4cc:	e000ed00 	.word	0xe000ed00

0000b4d0 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b4d0:	f3ef 8010 	mrs	r0, PRIMASK
    isr_ctx = __get_PRIMASK() & 1;
    b4d4:	f000 0001 	and.w	r0, r0, #1
  __ASM volatile ("cpsid i" : : : "memory");
    b4d8:	b672      	cpsid	i
}
    b4da:	4770      	bx	lr

0000b4dc <os_arch_restore_sr>:
    if (!isr_ctx) {
    b4dc:	b900      	cbnz	r0, b4e0 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
    b4de:	b662      	cpsie	i
}
    b4e0:	4770      	bx	lr

0000b4e2 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
    b4e2:	f3ef 8010 	mrs	r0, PRIMASK
}
    b4e6:	f000 0001 	and.w	r0, r0, #1
    b4ea:	4770      	bx	lr

0000b4ec <os_arch_task_stack_init>:
    while (1);
}

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
    b4ec:	b570      	push	{r4, r5, r6, lr}
    b4ee:	4606      	mov	r6, r0
    b4f0:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
    b4f2:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12 */
    for (i = 9; i < 13; ++i) {
    b4f6:	2309      	movs	r3, #9
    b4f8:	e003      	b.n	b502 <os_arch_task_stack_init+0x16>
        s[i] = 0;
    b4fa:	2200      	movs	r2, #0
    b4fc:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 13; ++i) {
    b500:	3301      	adds	r3, #1
    b502:	2b0c      	cmp	r3, #12
    b504:	ddf9      	ble.n	b4fa <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
    b506:	4620      	mov	r0, r4
    b508:	f000 f8bc 	bl	b684 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
    b50c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    b510:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
    b514:	6973      	ldr	r3, [r6, #20]
    b516:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
    b51a:	69b3      	ldr	r3, [r6, #24]
    b51c:	f845 3c20 	str.w	r3, [r5, #-32]
    /* Set function to cache returns from tasks. */
    sf->lr = (uint32_t)os_arch_task_return_handler;
    b520:	4b04      	ldr	r3, [pc, #16]	; (b534 <os_arch_task_stack_init+0x48>)
    b522:	f845 3c0c 	str.w	r3, [r5, #-12]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
    b526:	f06f 0302 	mvn.w	r3, #2
    b52a:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
    b52e:	4620      	mov	r0, r4
    b530:	bd70      	pop	{r4, r5, r6, pc}
    b532:	bf00      	nop
    b534:	0000b4af 	.word	0x0000b4af

0000b538 <os_arch_init>:

void
os_arch_init(void)
{
    b538:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    b53a:	4a04      	ldr	r2, [pc, #16]	; (b54c <os_arch_init+0x14>)
    b53c:	6953      	ldr	r3, [r2, #20]
    b53e:	f043 0310 	orr.w	r3, r3, #16
    b542:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
    b544:	f7fe fa98 	bl	9a78 <os_init_idle_task>
}
    b548:	bd08      	pop	{r3, pc}
    b54a:	bf00      	nop
    b54c:	e000ed00 	.word	0xe000ed00

0000b550 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
    b550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b552:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    b556:	b90c      	cbnz	r4, b55c <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    b558:	2400      	movs	r4, #0
    b55a:	e009      	b.n	b570 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
    b55c:	2007      	movs	r0, #7
    b55e:	e02e      	b.n	b5be <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
    b560:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
    b564:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
    b568:	26ff      	movs	r6, #255	; 0xff
    b56a:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
    b56e:	3401      	adds	r4, #1
    b570:	2cef      	cmp	r4, #239	; 0xef
    b572:	d9f5      	bls.n	b560 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    b574:	f06f 040d 	mvn.w	r4, #13
    b578:	e007      	b.n	b58a <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
    b57a:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
    b57c:	4e12      	ldr	r6, [pc, #72]	; (b5c8 <os_arch_os_init+0x78>)
    b57e:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    b580:	3510      	adds	r5, #16
    b582:	4f12      	ldr	r7, [pc, #72]	; (b5cc <os_arch_os_init+0x7c>)
    b584:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
    b588:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
    b58a:	2c25      	cmp	r4, #37	; 0x25
    b58c:	ddf5      	ble.n	b57a <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
    b58e:	4c0e      	ldr	r4, [pc, #56]	; (b5c8 <os_arch_os_init+0x78>)
    b590:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    b592:	4e0f      	ldr	r6, [pc, #60]	; (b5d0 <os_arch_os_init+0x80>)
    b594:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
    b596:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    b598:	4e0e      	ldr	r6, [pc, #56]	; (b5d4 <os_arch_os_init+0x84>)
    b59a:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
    b59c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
    b59e:	4e0e      	ldr	r6, [pc, #56]	; (b5d8 <os_arch_os_init+0x88>)
    b5a0:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b5a2:	25e0      	movs	r5, #224	; 0xe0
    b5a4:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
    b5a8:	2520      	movs	r5, #32
    b5aa:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    b5ac:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
    b5b0:	f014 0f01 	tst.w	r4, #1
    b5b4:	d004      	beq.n	b5c0 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
    b5b6:	f8df c024 	ldr.w	ip, [pc, #36]	; b5dc <os_arch_os_init+0x8c>
    b5ba:	df00      	svc	0
        err = OS_OK;
    b5bc:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
    b5be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
    b5c0:	f7ff ffba 	bl	b538 <os_arch_init>
        err = OS_OK;
    b5c4:	2000      	movs	r0, #0
    b5c6:	e7fa      	b.n	b5be <os_arch_os_init+0x6e>
    b5c8:	e000ed00 	.word	0xe000ed00
    b5cc:	0000b723 	.word	0x0000b723
    b5d0:	0000b68b 	.word	0x0000b68b
    b5d4:	0000b6d1 	.word	0x0000b6d1
    b5d8:	0000b717 	.word	0x0000b717
    b5dc:	0000b539 	.word	0x0000b539

0000b5e0 <os_arch_start>:

uint32_t
os_arch_start(void)
{
    b5e0:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
    b5e2:	f7ff fdbd 	bl	b160 <os_sched_next_task>
    b5e6:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
    b5e8:	f7ff fce6 	bl	afb8 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
    b5ec:	6823      	ldr	r3, [r4, #0]
    b5ee:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    b5f0:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
    b5f4:	2106      	movs	r1, #6
    b5f6:	2080      	movs	r0, #128	; 0x80
    b5f8:	f00f f946 	bl	1a888 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
    b5fc:	4b03      	ldr	r3, [pc, #12]	; (b60c <os_arch_start+0x2c>)
    b5fe:	2201      	movs	r2, #1
    b600:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
    b602:	4620      	mov	r0, r4
    b604:	f7ff ff5a 	bl	b4bc <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
    b608:	69a0      	ldr	r0, [r4, #24]
    b60a:	bd10      	pop	{r4, pc}
    b60c:	200026d0 	.word	0x200026d0

0000b610 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
    b610:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
    b612:	4814      	ldr	r0, [pc, #80]	; (b664 <os_arch_os_start+0x54>)
    b614:	6800      	ldr	r0, [r0, #0]
    b616:	3804      	subs	r0, #4
    b618:	f000 f82a 	bl	b670 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b61c:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
    b620:	b9d4      	cbnz	r4, b658 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    b622:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
    b626:	f004 0403 	and.w	r4, r4, #3
    b62a:	2c03      	cmp	r4, #3
    b62c:	d808      	bhi.n	b640 <os_arch_os_start+0x30>
    b62e:	e8df f004 	tbb	[pc, r4]
    b632:	1515      	.short	0x1515
    b634:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
    b636:	4c0c      	ldr	r4, [pc, #48]	; (b668 <os_arch_os_start+0x58>)
    b638:	6824      	ldr	r4, [r4, #0]
    b63a:	f014 0f01 	tst.w	r4, #1
    b63e:	d10f      	bne.n	b660 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
    b640:	f8df c028 	ldr.w	ip, [pc, #40]	; b66c <os_arch_os_start+0x5c>
    b644:	df00      	svc	0
    b646:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
    b648:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
    b64a:	4c07      	ldr	r4, [pc, #28]	; (b668 <os_arch_os_start+0x58>)
    b64c:	6824      	ldr	r4, [r4, #0]
    b64e:	f014 0f01 	tst.w	r4, #1
    b652:	d1f5      	bne.n	b640 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
    b654:	2008      	movs	r0, #8
    b656:	e7f7      	b.n	b648 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
    b658:	2007      	movs	r0, #7
    b65a:	e7f5      	b.n	b648 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
    b65c:	2008      	movs	r0, #8
    b65e:	e7f3      	b.n	b648 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
    b660:	2008      	movs	r0, #8
    b662:	e7f1      	b.n	b648 <os_arch_os_start+0x38>
    b664:	20000524 	.word	0x20000524
    b668:	2000707c 	.word	0x2000707c
    b66c:	0000b5e1 	.word	0x0000b5e1

0000b670 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
    b670:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
    b674:	4832      	ldr	r0, [pc, #200]	; (b740 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
    b676:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
    b678:	3002      	adds	r0, #2
        MSR     CONTROL,R0
    b67a:	f380 8814 	msr	CONTROL, r0
        ISB
    b67e:	f3bf 8f6f 	isb	sy
        BX      LR
    b682:	4770      	bx	lr

0000b684 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
    b684:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
    b688:	4770      	bx	lr

0000b68a <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
    b68a:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
    b68e:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
    b690:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
    b694:	b951      	cbnz	r1, b6ac <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    b696:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    b69a:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
    b69c:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    b69e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
    b6a2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
    b6a6:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
    b6aa:	4770      	bx	lr

0000b6ac <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    b6ac:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
    b6ae:	4a25      	ldr	r2, [pc, #148]	; (b744 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
    b6b0:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
    b6b2:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
    b6b4:	d809      	bhi.n	b6ca <SVC_Done>

        LDR     R4,=SVC_Table-4
    b6b6:	4c24      	ldr	r4, [pc, #144]	; (b748 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
    b6b8:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
    b6bc:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
    b6c0:	47a0      	blx	r4

        MRS     R12,PSP
    b6c2:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
    b6c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0000b6ca <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    b6ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
    b6ce:	4770      	bx	lr

0000b6d0 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    b6d0:	4b1e      	ldr	r3, [pc, #120]	; (b74c <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
    b6d2:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
    b6d4:	4b1e      	ldr	r3, [pc, #120]	; (b750 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
    b6d6:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
    b6d8:	4291      	cmp	r1, r2
        IT      EQ
    b6da:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
    b6dc:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
    b6de:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
    b6e2:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
    b6e6:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
    b6e8:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
    b6ec:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
    b6f0:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
    b6f4:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
    b6f6:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
    b6fa:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
    b6fe:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
    b702:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
    b704:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
    b708:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
    b70c:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
    b710:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
    b714:	4770      	bx	lr

0000b716 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
    b716:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
    b718:	f7ff feca 	bl	b4b0 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
    b71c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
    b720:	4770      	bx	lr

0000b722 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
    b722:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
    b726:	bf0c      	ite	eq
        MRSEQ   R3,MSP
    b728:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
    b72c:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
    b730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
    b734:	4668      	mov	r0, sp
        BL      os_default_irq
    b736:	f7fe f8fb 	bl	9930 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
    b73a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
    b73e:	4770      	bx	lr
        LDR     R0,=os_flags
    b740:	2000707c 	.word	0x2000707c
        LDR     R2,=SVC_Count
    b744:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
    b748:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
    b74c:	20000140 	.word	0x20000140
        LDR     R3,=g_current_task      /* Get current task */
    b750:	20007034 	.word	0x20007034

0000b754 <lrand48>:
#include <stdint.h>

extern unsigned short __rand48_seed[3];	/* Common with mrand48.c, srand48.c */

long lrand48(void)
{
    b754:	b508      	push	{r3, lr}
	return (uint32_t) jrand48(__rand48_seed) >> 1;
    b756:	4802      	ldr	r0, [pc, #8]	; (b760 <lrand48+0xc>)
    b758:	f000 fbca 	bl	bef0 <jrand48>
}
    b75c:	0840      	lsrs	r0, r0, #1
    b75e:	bd08      	pop	{r3, pc}
    b760:	20007080 	.word	0x20007080

0000b764 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
    b764:	b470      	push	{r4, r5, r6}
    b766:	f04f 0500 	mov.w	r5, #0
    b76a:	f022 0603 	bic.w	r6, r2, #3
    b76e:	e005      	b.n	b77c <test1>

0000b770 <loop1>:
    b770:	5943      	ldr	r3, [r0, r5]
    b772:	594c      	ldr	r4, [r1, r5]
    b774:	42a3      	cmp	r3, r4
    b776:	d104      	bne.n	b782 <res1>
    b778:	f105 0504 	add.w	r5, r5, #4

0000b77c <test1>:
    b77c:	42b5      	cmp	r5, r6
    b77e:	d1f7      	bne.n	b770 <loop1>
    b780:	e00d      	b.n	b79e <test2>

0000b782 <res1>:
    b782:	ba1b      	rev	r3, r3
    b784:	ba24      	rev	r4, r4
    b786:	1b1b      	subs	r3, r3, r4
    b788:	bf8c      	ite	hi
    b78a:	2301      	movhi	r3, #1
    b78c:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
    b790:	e009      	b.n	b7a6 <done>

0000b792 <loop2>:
    b792:	5d43      	ldrb	r3, [r0, r5]
    b794:	5d4c      	ldrb	r4, [r1, r5]
    b796:	1b1b      	subs	r3, r3, r4
    b798:	d105      	bne.n	b7a6 <done>
    b79a:	f105 0501 	add.w	r5, r5, #1

0000b79e <test2>:
    b79e:	4295      	cmp	r5, r2
    b7a0:	d1f7      	bne.n	b792 <loop2>
    b7a2:	f04f 0300 	mov.w	r3, #0

0000b7a6 <done>:
    b7a6:	4618      	mov	r0, r3
    b7a8:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
    b7aa:	4770      	bx	lr

0000b7ac <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
    b7ac:	e001      	b.n	b7b2 <test1>

0000b7ae <loop1>:
    b7ae:	588b      	ldr	r3, [r1, r2]
    b7b0:	5083      	str	r3, [r0, r2]

0000b7b2 <test1>:
    b7b2:	3a04      	subs	r2, #4
    b7b4:	d5fb      	bpl.n	b7ae <loop1>
    b7b6:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
    b7ba:	e001      	b.n	b7c0 <test2>

0000b7bc <loop2>:
    b7bc:	5c8b      	ldrb	r3, [r1, r2]
    b7be:	5483      	strb	r3, [r0, r2]

0000b7c0 <test2>:
    b7c0:	3a01      	subs	r2, #1
    b7c2:	d5fb      	bpl.n	b7bc <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
    b7c4:	4770      	bx	lr

0000b7c6 <memmove>:
 */

#include <string.h>

void *memmove(void *dst, const void *src, size_t n)
{
    b7c6:	b410      	push	{r4}
		q += (n - 1);
		asm volatile("std; rep; movsb; cld"
			     : "+c" (n), "+S"(p), "+D"(q));
	}
#else
	if (q < p) {
    b7c8:	4281      	cmp	r1, r0
    b7ca:	d80d      	bhi.n	b7e8 <memmove+0x22>
		while (n--) {
			*q++ = *p++;
		}
	} else {
		p += n;
    b7cc:	4411      	add	r1, r2
		q += n;
    b7ce:	1883      	adds	r3, r0, r2
		while (n--) {
    b7d0:	e011      	b.n	b7f6 <memmove+0x30>
			*q++ = *p++;
    b7d2:	780a      	ldrb	r2, [r1, #0]
    b7d4:	701a      	strb	r2, [r3, #0]
    b7d6:	3301      	adds	r3, #1
    b7d8:	3101      	adds	r1, #1
		while (n--) {
    b7da:	4622      	mov	r2, r4
    b7dc:	1e54      	subs	r4, r2, #1
    b7de:	2a00      	cmp	r2, #0
    b7e0:	d1f7      	bne.n	b7d2 <memmove+0xc>
		}
	}
#endif

	return dst;
}
    b7e2:	f85d 4b04 	ldr.w	r4, [sp], #4
    b7e6:	4770      	bx	lr
	char *q = dst;
    b7e8:	4603      	mov	r3, r0
    b7ea:	e7f7      	b.n	b7dc <memmove+0x16>
			*--q = *--p;
    b7ec:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    b7f0:	f803 2d01 	strb.w	r2, [r3, #-1]!
		while (n--) {
    b7f4:	4622      	mov	r2, r4
    b7f6:	1e54      	subs	r4, r2, #1
    b7f8:	2a00      	cmp	r2, #0
    b7fa:	d1f7      	bne.n	b7ec <memmove+0x26>
    b7fc:	e7f1      	b.n	b7e2 <memmove+0x1c>

0000b7fe <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
    b7fe:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
    b800:	4605      	mov	r5, r0
    b802:	b2c9      	uxtb	r1, r1
    b804:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b808:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    b80c:	18ab      	adds	r3, r5, r2
    b80e:	2403      	movs	r4, #3
    b810:	4023      	ands	r3, r4
    b812:	1ad3      	subs	r3, r2, r3
    b814:	d40b      	bmi.n	b82e <memset+0x30>
    b816:	e001      	b.n	b81c <memset+0x1e>
    b818:	3a01      	subs	r2, #1
    b81a:	54a9      	strb	r1, [r5, r2]
    b81c:	429a      	cmp	r2, r3
    b81e:	d1fb      	bne.n	b818 <memset+0x1a>
    b820:	e000      	b.n	b824 <memset+0x26>
    b822:	50a9      	str	r1, [r5, r2]
    b824:	3a04      	subs	r2, #4
    b826:	d5fc      	bpl.n	b822 <memset+0x24>
    b828:	3204      	adds	r2, #4
    b82a:	e000      	b.n	b82e <memset+0x30>
    b82c:	54a9      	strb	r1, [r5, r2]
    b82e:	3a01      	subs	r2, #1
    b830:	d5fc      	bpl.n	b82c <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
    b832:	bc30      	pop	{r4, r5}
    b834:	4770      	bx	lr
	...

0000b838 <srand48>:

unsigned short __rand48_seed[3];	/* Common with mrand48.c, lrand48.c */

void srand48(long seedval)
{
	__rand48_seed[0] = 0x330e;
    b838:	4b03      	ldr	r3, [pc, #12]	; (b848 <srand48+0x10>)
    b83a:	f243 320e 	movw	r2, #13070	; 0x330e
    b83e:	801a      	strh	r2, [r3, #0]
	__rand48_seed[1] = (unsigned short)seedval;
    b840:	8058      	strh	r0, [r3, #2]
	__rand48_seed[2] = (unsigned short)((uint32_t) seedval >> 16);
    b842:	0c00      	lsrs	r0, r0, #16
    b844:	8098      	strh	r0, [r3, #4]
}
    b846:	4770      	bx	lr
    b848:	20007080 	.word	0x20007080

0000b84c <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
    b84c:	b430      	push	{r4, r5}
    b84e:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
    b850:	1c55      	adds	r5, r2, #1
    b852:	7813      	ldrb	r3, [r2, #0]
    b854:	1c4c      	adds	r4, r1, #1
    b856:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
    b858:	1a18      	subs	r0, r3, r0
    b85a:	d103      	bne.n	b864 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
    b85c:	462a      	mov	r2, r5
    b85e:	4621      	mov	r1, r4
		if (d || !ch)
    b860:	2b00      	cmp	r3, #0
    b862:	d1f5      	bne.n	b850 <strcmp+0x4>
			break;
	}

	return d;
}
    b864:	bc30      	pop	{r4, r5}
    b866:	4770      	bx	lr

0000b868 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
    b868:	4603      	mov	r3, r0
	while (*ss)
    b86a:	e000      	b.n	b86e <strlen+0x6>
		ss++;
    b86c:	3301      	adds	r3, #1
	while (*ss)
    b86e:	781a      	ldrb	r2, [r3, #0]
    b870:	2a00      	cmp	r2, #0
    b872:	d1fb      	bne.n	b86c <strlen+0x4>
	return ss - s;
}
    b874:	1a18      	subs	r0, r3, r0
    b876:	4770      	bx	lr

0000b878 <strncat>:
 */

#include <string.h>

char *strncat(char *dst, const char *src, size_t n)
{
    b878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b87a:	4607      	mov	r7, r0
    b87c:	460d      	mov	r5, r1
    b87e:	4614      	mov	r4, r2
	char *q = strchr(dst, '\0');
    b880:	f7ff fff2 	bl	b868 <strlen>
    b884:	4438      	add	r0, r7
	const char *p = src;
	char ch;

	while (n--) {
    b886:	1e62      	subs	r2, r4, #1
    b888:	b144      	cbz	r4, b89c <strncat+0x24>
		*q++ = ch = *p++;
    b88a:	1c6e      	adds	r6, r5, #1
    b88c:	782b      	ldrb	r3, [r5, #0]
    b88e:	1c41      	adds	r1, r0, #1
    b890:	7003      	strb	r3, [r0, #0]
	while (n--) {
    b892:	4614      	mov	r4, r2
		if (!ch)
    b894:	b123      	cbz	r3, b8a0 <strncat+0x28>
		*q++ = ch = *p++;
    b896:	4635      	mov	r5, r6
    b898:	4608      	mov	r0, r1
    b89a:	e7f4      	b.n	b886 <strncat+0xe>
			return dst;
	}
	*q = '\0';
    b89c:	2300      	movs	r3, #0
    b89e:	7003      	strb	r3, [r0, #0]

	return dst;
}
    b8a0:	4638      	mov	r0, r7
    b8a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b8a4 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
    b8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b8a8:	b082      	sub	sp, #8
    b8aa:	e9cd 0100 	strd	r0, r1, [sp]
    b8ae:	4690      	mov	r8, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
    b8b0:	f8d2 9004 	ldr.w	r9, [r2, #4]

    if (p->hh == 1) {
    b8b4:	7893      	ldrb	r3, [r2, #2]
    b8b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
    b8ba:	2b10      	cmp	r3, #16
    b8bc:	d004      	beq.n	b8c8 <ui2a+0x24>
        num = (unsigned short int)num;
    } else if (p->hh == 2) {
    b8be:	2b20      	cmp	r3, #32
    b8c0:	d009      	beq.n	b8d6 <ui2a+0x32>
{
    b8c2:	2401      	movs	r4, #1
    b8c4:	2500      	movs	r5, #0
    b8c6:	e013      	b.n	b8f0 <ui2a+0x4c>
    b8c8:	f8bd 2000 	ldrh.w	r2, [sp]
    b8cc:	b293      	uxth	r3, r2
    b8ce:	2400      	movs	r4, #0
    b8d0:	e9cd 3400 	strd	r3, r4, [sp]
    b8d4:	e7f5      	b.n	b8c2 <ui2a+0x1e>
    b8d6:	e9dd 3400 	ldrd	r3, r4, [sp]
    b8da:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    b8de:	2400      	movs	r4, #0
    b8e0:	e9cd 3400 	strd	r3, r4, [sp]
    b8e4:	e7ed      	b.n	b8c2 <ui2a+0x1e>
        num = (unsigned char)num;
    }

    while (num / d >= p->base)
        d *= p->base;
    b8e6:	fb06 f305 	mul.w	r3, r6, r5
    b8ea:	fba4 4506 	umull	r4, r5, r4, r6
    b8ee:	441d      	add	r5, r3
    while (num / d >= p->base)
    b8f0:	4622      	mov	r2, r4
    b8f2:	462b      	mov	r3, r5
    b8f4:	e9dd 0100 	ldrd	r0, r1, [sp]
    b8f8:	f000 fb5c 	bl	bfb4 <__aeabi_uldivmod>
    b8fc:	f898 6003 	ldrb.w	r6, [r8, #3]
    b900:	2700      	movs	r7, #0
    b902:	42b9      	cmp	r1, r7
    b904:	bf08      	it	eq
    b906:	42b0      	cmpeq	r0, r6
    b908:	d2ed      	bcs.n	b8e6 <ui2a+0x42>
    int n = 0;
    b90a:	f04f 0a00 	mov.w	sl, #0
    b90e:	e007      	b.n	b920 <ui2a+0x7c>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    b910:	2330      	movs	r3, #48	; 0x30
    b912:	441e      	add	r6, r3
    b914:	f889 6000 	strb.w	r6, [r9]
            ++n;
    b918:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    b91c:	f109 0901 	add.w	r9, r9, #1
    while (d != 0) {
    b920:	ea54 0305 	orrs.w	r3, r4, r5
    b924:	d02e      	beq.n	b984 <ui2a+0xe0>
        unsigned long long  dgt = num / d;
    b926:	4622      	mov	r2, r4
    b928:	462b      	mov	r3, r5
    b92a:	e9dd 0100 	ldrd	r0, r1, [sp]
    b92e:	f000 fb41 	bl	bfb4 <__aeabi_uldivmod>
    b932:	4606      	mov	r6, r0
    b934:	460f      	mov	r7, r1
        num %= d;
    b936:	4622      	mov	r2, r4
    b938:	462b      	mov	r3, r5
    b93a:	e9dd 0100 	ldrd	r0, r1, [sp]
    b93e:	f000 fb39 	bl	bfb4 <__aeabi_uldivmod>
    b942:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
    b946:	f898 2003 	ldrb.w	r2, [r8, #3]
    b94a:	2300      	movs	r3, #0
    b94c:	4620      	mov	r0, r4
    b94e:	4629      	mov	r1, r5
    b950:	f000 fb30 	bl	bfb4 <__aeabi_uldivmod>
    b954:	4604      	mov	r4, r0
    b956:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
    b958:	f1ba 0f00 	cmp.w	sl, #0
    b95c:	d105      	bne.n	b96a <ui2a+0xc6>
    b95e:	ea56 0307 	orrs.w	r3, r6, r7
    b962:	d102      	bne.n	b96a <ui2a+0xc6>
    b964:	ea54 0305 	orrs.w	r3, r4, r5
    b968:	d1da      	bne.n	b920 <ui2a+0x7c>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
    b96a:	2f00      	cmp	r7, #0
    b96c:	bf08      	it	eq
    b96e:	2e0a      	cmpeq	r6, #10
    b970:	d3ce      	bcc.n	b910 <ui2a+0x6c>
    b972:	f898 3002 	ldrb.w	r3, [r8, #2]
    b976:	f013 0f04 	tst.w	r3, #4
    b97a:	d001      	beq.n	b980 <ui2a+0xdc>
    b97c:	2337      	movs	r3, #55	; 0x37
    b97e:	e7c8      	b.n	b912 <ui2a+0x6e>
    b980:	2357      	movs	r3, #87	; 0x57
    b982:	e7c6      	b.n	b912 <ui2a+0x6e>
        }
    }
    *bf = 0;
    b984:	2300      	movs	r3, #0
    b986:	f889 3000 	strb.w	r3, [r9]
}
    b98a:	b002      	add	sp, #8
    b98c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000b990 <i2a>:

static void i2a(long long int num, struct param *p)
{
    b990:	b508      	push	{r3, lr}
    if (num < 0) {
    b992:	2800      	cmp	r0, #0
    b994:	f171 0300 	sbcs.w	r3, r1, #0
    b998:	db02      	blt.n	b9a0 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
    b99a:	f7ff ff83 	bl	b8a4 <ui2a>
}
    b99e:	bd08      	pop	{r3, pc}
        num = -num;
    b9a0:	4240      	negs	r0, r0
    b9a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
    b9a6:	7893      	ldrb	r3, [r2, #2]
    b9a8:	f043 0301 	orr.w	r3, r3, #1
    b9ac:	7093      	strb	r3, [r2, #2]
    b9ae:	e7f4      	b.n	b99a <i2a+0xa>

0000b9b0 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
    b9b0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    b9b4:	b2db      	uxtb	r3, r3
    b9b6:	2b09      	cmp	r3, #9
    b9b8:	d90b      	bls.n	b9d2 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
    b9ba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
    b9be:	b2db      	uxtb	r3, r3
    b9c0:	2b05      	cmp	r3, #5
    b9c2:	d908      	bls.n	b9d6 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
    b9c4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
    b9c8:	b2db      	uxtb	r3, r3
    b9ca:	2b05      	cmp	r3, #5
    b9cc:	d805      	bhi.n	b9da <a2d+0x2a>
        return ch - 'A' + 10;
    b9ce:	3837      	subs	r0, #55	; 0x37
    b9d0:	4770      	bx	lr
        return ch - '0';
    b9d2:	3830      	subs	r0, #48	; 0x30
    b9d4:	4770      	bx	lr
        return ch - 'a' + 10;
    b9d6:	3857      	subs	r0, #87	; 0x57
    b9d8:	4770      	bx	lr
    else
        return -1;
    b9da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    b9de:	4770      	bx	lr

0000b9e0 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
    b9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b9e4:	4605      	mov	r5, r0
    b9e6:	4688      	mov	r8, r1
    b9e8:	4617      	mov	r7, r2
    b9ea:	4699      	mov	r9, r3
    const char *p = *src;
    b9ec:	680c      	ldr	r4, [r1, #0]
    int num = 0;
    b9ee:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
    b9f0:	4628      	mov	r0, r5
    b9f2:	f7ff ffdd 	bl	b9b0 <a2d>
    b9f6:	2800      	cmp	r0, #0
    b9f8:	db06      	blt.n	ba08 <a2i+0x28>
        if (digit > base)
    b9fa:	42b8      	cmp	r0, r7
    b9fc:	dc04      	bgt.n	ba08 <a2i+0x28>
            break;
        num = num * base + digit;
    b9fe:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
    ba02:	7825      	ldrb	r5, [r4, #0]
    ba04:	3401      	adds	r4, #1
    ba06:	e7f3      	b.n	b9f0 <a2i+0x10>
    }
    *src = p;
    ba08:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
    ba0c:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
    ba10:	4628      	mov	r0, r5
    ba12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ba16 <putf>:

static int putf(FILE *putp, char c)
{
    ba16:	b500      	push	{lr}
    ba18:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
    ba1a:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
    ba1e:	6803      	ldr	r3, [r0, #0]
    ba20:	681b      	ldr	r3, [r3, #0]
    ba22:	b14b      	cbz	r3, ba38 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
    ba24:	2201      	movs	r2, #1
    ba26:	f10d 0107 	add.w	r1, sp, #7
    ba2a:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
    ba2c:	2801      	cmp	r0, #1
    ba2e:	d005      	beq.n	ba3c <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
    ba30:	2000      	movs	r0, #0
    else
        return 1;
}
    ba32:	b003      	add	sp, #12
    ba34:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
    ba38:	2000      	movs	r0, #0
    ba3a:	e7fa      	b.n	ba32 <putf+0x1c>
        return 1;
    ba3c:	2001      	movs	r0, #1
    ba3e:	e7f8      	b.n	ba32 <putf+0x1c>

0000ba40 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
    ba40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ba44:	4606      	mov	r6, r0
    ba46:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
    ba48:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
    ba4a:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
    ba4c:	e001      	b.n	ba52 <putchw+0x12>
        n--;
    ba4e:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
    ba50:	4613      	mov	r3, r2
    ba52:	1c5a      	adds	r2, r3, #1
    ba54:	781b      	ldrb	r3, [r3, #0]
    ba56:	b10b      	cbz	r3, ba5c <putchw+0x1c>
    ba58:	2c00      	cmp	r4, #0
    ba5a:	dcf8      	bgt.n	ba4e <putchw+0xe>
    if (p->sign)
    ba5c:	78bb      	ldrb	r3, [r7, #2]
    ba5e:	f013 0f01 	tst.w	r3, #1
    ba62:	d000      	beq.n	ba66 <putchw+0x26>
        n--;
    ba64:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
    ba66:	887b      	ldrh	r3, [r7, #2]
    ba68:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    ba6c:	b29b      	uxth	r3, r3
    ba6e:	f241 0202 	movw	r2, #4098	; 0x1002
    ba72:	4293      	cmp	r3, r2
    ba74:	d01c      	beq.n	bab0 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
    ba76:	f640 0202 	movw	r2, #2050	; 0x802
    ba7a:	4293      	cmp	r3, r2
    ba7c:	d01a      	beq.n	bab4 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
    ba7e:	683b      	ldr	r3, [r7, #0]
    ba80:	4d35      	ldr	r5, [pc, #212]	; (bb58 <putchw+0x118>)
    ba82:	401d      	ands	r5, r3
    ba84:	b1f5      	cbz	r5, bac4 <putchw+0x84>
    unsigned written = 0;
    ba86:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
    ba88:	78bb      	ldrb	r3, [r7, #2]
    ba8a:	f013 0f01 	tst.w	r3, #1
    ba8e:	d11f      	bne.n	bad0 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
    ba90:	887b      	ldrh	r3, [r7, #2]
    ba92:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
    ba96:	b29b      	uxth	r3, r3
    ba98:	f241 0202 	movw	r2, #4098	; 0x1002
    ba9c:	4293      	cmp	r3, r2
    ba9e:	d01d      	beq.n	badc <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
    baa0:	f640 0202 	movw	r2, #2050	; 0x802
    baa4:	4293      	cmp	r3, r2
    baa6:	d02a      	beq.n	bafe <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
    baa8:	787b      	ldrb	r3, [r7, #1]
    baaa:	bba3      	cbnz	r3, bb16 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
    baac:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
    baae:	e03d      	b.n	bb2c <putchw+0xec>
        n -= 2;
    bab0:	3c02      	subs	r4, #2
    bab2:	e7e4      	b.n	ba7e <putchw+0x3e>
        n--;
    bab4:	3c01      	subs	r4, #1
    bab6:	e7e2      	b.n	ba7e <putchw+0x3e>
            written += putf(putp, ' ');
    bab8:	2120      	movs	r1, #32
    baba:	4630      	mov	r0, r6
    babc:	f7ff ffab 	bl	ba16 <putf>
    bac0:	4405      	add	r5, r0
        while (n-- > 0)
    bac2:	4644      	mov	r4, r8
    bac4:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    bac8:	2c00      	cmp	r4, #0
    baca:	dcf5      	bgt.n	bab8 <putchw+0x78>
    bacc:	4644      	mov	r4, r8
    bace:	e7db      	b.n	ba88 <putchw+0x48>
        written += putf(putp, '-');
    bad0:	212d      	movs	r1, #45	; 0x2d
    bad2:	4630      	mov	r0, r6
    bad4:	f7ff ff9f 	bl	ba16 <putf>
    bad8:	4405      	add	r5, r0
    bada:	e7d9      	b.n	ba90 <putchw+0x50>
        written += putf(putp, '0');
    badc:	2130      	movs	r1, #48	; 0x30
    bade:	4630      	mov	r0, r6
    bae0:	f7ff ff99 	bl	ba16 <putf>
    bae4:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
    bae6:	78bb      	ldrb	r3, [r7, #2]
    bae8:	f013 0f04 	tst.w	r3, #4
    baec:	d005      	beq.n	bafa <putchw+0xba>
    baee:	2158      	movs	r1, #88	; 0x58
    baf0:	4630      	mov	r0, r6
    baf2:	f7ff ff90 	bl	ba16 <putf>
    baf6:	4405      	add	r5, r0
    baf8:	e7d6      	b.n	baa8 <putchw+0x68>
    bafa:	2178      	movs	r1, #120	; 0x78
    bafc:	e7f8      	b.n	baf0 <putchw+0xb0>
        written += putf(putp, '0');
    bafe:	2130      	movs	r1, #48	; 0x30
    bb00:	4630      	mov	r0, r6
    bb02:	f7ff ff88 	bl	ba16 <putf>
    bb06:	4405      	add	r5, r0
    bb08:	e7ce      	b.n	baa8 <putchw+0x68>
            written += putf(putp, '0');
    bb0a:	2130      	movs	r1, #48	; 0x30
    bb0c:	4630      	mov	r0, r6
    bb0e:	f7ff ff82 	bl	ba16 <putf>
    bb12:	4405      	add	r5, r0
        while (n-- > 0)
    bb14:	4644      	mov	r4, r8
    bb16:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
    bb1a:	2c00      	cmp	r4, #0
    bb1c:	dcf5      	bgt.n	bb0a <putchw+0xca>
    bb1e:	4644      	mov	r4, r8
    bb20:	e7c4      	b.n	baac <putchw+0x6c>
        written += putf(putp, ch);
    bb22:	4630      	mov	r0, r6
    bb24:	f7ff ff77 	bl	ba16 <putf>
    bb28:	4405      	add	r5, r0
    while ((ch = *bf++))
    bb2a:	4643      	mov	r3, r8
    bb2c:	f103 0801 	add.w	r8, r3, #1
    bb30:	7819      	ldrb	r1, [r3, #0]
    bb32:	2900      	cmp	r1, #0
    bb34:	d1f5      	bne.n	bb22 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
    bb36:	78bb      	ldrb	r3, [r7, #2]
    bb38:	f013 0f08 	tst.w	r3, #8
    bb3c:	d106      	bne.n	bb4c <putchw+0x10c>
    bb3e:	e008      	b.n	bb52 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
    bb40:	2120      	movs	r1, #32
    bb42:	4630      	mov	r0, r6
    bb44:	f7ff ff67 	bl	ba16 <putf>
    bb48:	4405      	add	r5, r0
        while (n-- > 0)
    bb4a:	463c      	mov	r4, r7
    bb4c:	1e67      	subs	r7, r4, #1
    bb4e:	2c00      	cmp	r4, #0
    bb50:	dcf6      	bgt.n	bb40 <putchw+0x100>
    }
    
    return written;
}
    bb52:	4628      	mov	r0, r5
    bb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bb58:	0008ff00 	.word	0x0008ff00

0000bb5c <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
    bb5c:	b160      	cbz	r0, bb78 <intarg+0x1c>
    bb5e:	2801      	cmp	r0, #1
    bb60:	d017      	beq.n	bb92 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
    bb62:	bb19      	cbnz	r1, bbac <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
    bb64:	6813      	ldr	r3, [r2, #0]
    bb66:	3307      	adds	r3, #7
    bb68:	f023 0307 	bic.w	r3, r3, #7
    bb6c:	f103 0108 	add.w	r1, r3, #8
    bb70:	6011      	str	r1, [r2, #0]
    bb72:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
    bb76:	4770      	bx	lr
        if (sign) {
    bb78:	b129      	cbz	r1, bb86 <intarg+0x2a>
            val = va_arg(*va, int);
    bb7a:	6813      	ldr	r3, [r2, #0]
    bb7c:	1d19      	adds	r1, r3, #4
    bb7e:	6011      	str	r1, [r2, #0]
    bb80:	6818      	ldr	r0, [r3, #0]
    bb82:	17c1      	asrs	r1, r0, #31
    bb84:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
    bb86:	6813      	ldr	r3, [r2, #0]
    bb88:	1d19      	adds	r1, r3, #4
    bb8a:	6011      	str	r1, [r2, #0]
    bb8c:	6818      	ldr	r0, [r3, #0]
    bb8e:	2100      	movs	r1, #0
    bb90:	4770      	bx	lr
        if (sign) {
    bb92:	b129      	cbz	r1, bba0 <intarg+0x44>
            val = va_arg(*va, long);
    bb94:	6813      	ldr	r3, [r2, #0]
    bb96:	1d19      	adds	r1, r3, #4
    bb98:	6011      	str	r1, [r2, #0]
    bb9a:	6818      	ldr	r0, [r3, #0]
    bb9c:	17c1      	asrs	r1, r0, #31
    bb9e:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
    bba0:	6813      	ldr	r3, [r2, #0]
    bba2:	1d19      	adds	r1, r3, #4
    bba4:	6011      	str	r1, [r2, #0]
    bba6:	6818      	ldr	r0, [r3, #0]
    bba8:	2100      	movs	r1, #0
    bbaa:	4770      	bx	lr
            val = va_arg(*va, long long);
    bbac:	6813      	ldr	r3, [r2, #0]
    bbae:	3307      	adds	r3, #7
    bbb0:	f023 0307 	bic.w	r3, r3, #7
    bbb4:	f103 0108 	add.w	r1, r3, #8
    bbb8:	6011      	str	r1, [r2, #0]
    bbba:	e9d3 0100 	ldrd	r0, r1, [r3]
    bbbe:	4770      	bx	lr

0000bbc0 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
    bbc0:	b570      	push	{r4, r5, r6, lr}
    bbc2:	b08a      	sub	sp, #40	; 0x28
    bbc4:	4605      	mov	r5, r0
    bbc6:	9101      	str	r1, [sp, #4]
    bbc8:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
    bbca:	ab02      	add	r3, sp, #8
    bbcc:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
    bbce:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
    bbd0:	9b01      	ldr	r3, [sp, #4]
    bbd2:	1c5a      	adds	r2, r3, #1
    bbd4:	9201      	str	r2, [sp, #4]
    bbd6:	7819      	ldrb	r1, [r3, #0]
    bbd8:	2900      	cmp	r1, #0
    bbda:	f000 813a 	beq.w	be52 <tfp_format+0x292>
        if (ch != '%') {
    bbde:	2925      	cmp	r1, #37	; 0x25
    bbe0:	d004      	beq.n	bbec <tfp_format+0x2c>
            written += putf(putp, ch);
    bbe2:	4628      	mov	r0, r5
    bbe4:	f7ff ff17 	bl	ba16 <putf>
    bbe8:	4404      	add	r4, r0
    bbea:	e7f1      	b.n	bbd0 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
    bbec:	2200      	movs	r2, #0
    bbee:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
    bbf2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
    bbf6:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
            p.hh = 0;
    bbfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    bbfe:	f362 1305 	bfi	r3, r2, #4, #2
    bc02:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
    bc06:	9b01      	ldr	r3, [sp, #4]
    bc08:	1c5a      	adds	r2, r3, #1
    bc0a:	9201      	str	r2, [sp, #4]
    bc0c:	7818      	ldrb	r0, [r3, #0]
    bc0e:	b128      	cbz	r0, bc1c <tfp_format+0x5c>
                switch (ch) {
    bc10:	282d      	cmp	r0, #45	; 0x2d
    bc12:	d052      	beq.n	bcba <tfp_format+0xfa>
    bc14:	2830      	cmp	r0, #48	; 0x30
    bc16:	d040      	beq.n	bc9a <tfp_format+0xda>
    bc18:	2823      	cmp	r0, #35	; 0x23
    bc1a:	d047      	beq.n	bcac <tfp_format+0xec>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
    bc1c:	282a      	cmp	r0, #42	; 0x2a
    bc1e:	d056      	beq.n	bcce <tfp_format+0x10e>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
    bc20:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    bc24:	b2db      	uxtb	r3, r3
    bc26:	2b09      	cmp	r3, #9
    bc28:	d965      	bls.n	bcf6 <tfp_format+0x136>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
    bc2a:	286c      	cmp	r0, #108	; 0x6c
    bc2c:	d069      	beq.n	bd02 <tfp_format+0x142>

                if (ch == 'l') {
                    ch = *(fmt++);
                    lng = 2;
                }
            } else if (ch == 'h') {
    bc2e:	2868      	cmp	r0, #104	; 0x68
    bc30:	d074      	beq.n	bd1c <tfp_format+0x15c>
            lng = 0;
    bc32:	2300      	movs	r3, #0
                    ch = *(fmt++);
                    p.hh = 2;
                }
            }

            if (ch == 'z') {
    bc34:	287a      	cmp	r0, #122	; 0x7a
    bc36:	f000 808b 	beq.w	bd50 <tfp_format+0x190>
                ch = *(fmt++);
            }

            switch (ch) {
    bc3a:	2869      	cmp	r0, #105	; 0x69
    bc3c:	f000 80a9 	beq.w	bd92 <tfp_format+0x1d2>
    bc40:	f240 808b 	bls.w	bd5a <tfp_format+0x19a>
    bc44:	2873      	cmp	r0, #115	; 0x73
    bc46:	f000 80f7 	beq.w	be38 <tfp_format+0x278>
    bc4a:	f200 80b3 	bhi.w	bdb4 <tfp_format+0x1f4>
    bc4e:	286f      	cmp	r0, #111	; 0x6f
    bc50:	f000 80e1 	beq.w	be16 <tfp_format+0x256>
    bc54:	2870      	cmp	r0, #112	; 0x70
    bc56:	d1bb      	bne.n	bbd0 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
    bc58:	9b00      	ldr	r3, [sp, #0]
    bc5a:	1d1a      	adds	r2, r3, #4
    bc5c:	9200      	str	r2, [sp, #0]
    bc5e:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
    bc60:	2310      	movs	r3, #16
    bc62:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
    bc66:	aa08      	add	r2, sp, #32
    bc68:	2100      	movs	r1, #0
    bc6a:	f7ff fe1b 	bl	b8a4 <ui2a>
                p.width = 2 * sizeof(void*);
    bc6e:	2308      	movs	r3, #8
    bc70:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
    bc74:	2301      	movs	r3, #1
    bc76:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
    bc7a:	2130      	movs	r1, #48	; 0x30
    bc7c:	4628      	mov	r0, r5
    bc7e:	f7ff feca 	bl	ba16 <putf>
    bc82:	4404      	add	r4, r0
                written += putf(putp, 'x');
    bc84:	2178      	movs	r1, #120	; 0x78
    bc86:	4628      	mov	r0, r5
    bc88:	f7ff fec5 	bl	ba16 <putf>
    bc8c:	4404      	add	r4, r0
                written += putchw(putp, &p);
    bc8e:	a908      	add	r1, sp, #32
    bc90:	4628      	mov	r0, r5
    bc92:	f7ff fed5 	bl	ba40 <putchw>
    bc96:	4404      	add	r4, r0
                break;
    bc98:	e79a      	b.n	bbd0 <tfp_format+0x10>
                    if (!p.left) {
    bc9a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    bc9e:	f013 0f08 	tst.w	r3, #8
    bca2:	d1b0      	bne.n	bc06 <tfp_format+0x46>
                        p.lz = 1;
    bca4:	2301      	movs	r3, #1
    bca6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    bcaa:	e7ac      	b.n	bc06 <tfp_format+0x46>
                    p.alt = 1;
    bcac:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    bcb0:	f043 0302 	orr.w	r3, r3, #2
    bcb4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
    bcb8:	e7a5      	b.n	bc06 <tfp_format+0x46>
                    p.left = 1;
    bcba:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    bcbe:	f043 0308 	orr.w	r3, r3, #8
    bcc2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
    bcc6:	2300      	movs	r3, #0
    bcc8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
    bccc:	e79b      	b.n	bc06 <tfp_format+0x46>
                i = intarg(0, 1, &va);
    bcce:	466a      	mov	r2, sp
    bcd0:	2101      	movs	r1, #1
    bcd2:	2000      	movs	r0, #0
    bcd4:	f7ff ff42 	bl	bb5c <intarg>
                if (i > UCHAR_MAX) {
    bcd8:	28ff      	cmp	r0, #255	; 0xff
    bcda:	dd07      	ble.n	bcec <tfp_format+0x12c>
                    p.width = UCHAR_MAX;
    bcdc:	23ff      	movs	r3, #255	; 0xff
    bcde:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
    bce2:	9b01      	ldr	r3, [sp, #4]
    bce4:	1c5a      	adds	r2, r3, #1
    bce6:	9201      	str	r2, [sp, #4]
    bce8:	7818      	ldrb	r0, [r3, #0]
    bcea:	e79e      	b.n	bc2a <tfp_format+0x6a>
                } else if (i > 0) {
    bcec:	2800      	cmp	r0, #0
    bcee:	ddf8      	ble.n	bce2 <tfp_format+0x122>
                    p.width = i;
    bcf0:	f88d 0020 	strb.w	r0, [sp, #32]
    bcf4:	e7f5      	b.n	bce2 <tfp_format+0x122>
                ch = a2i(ch, &fmt, 10, &(p.width));
    bcf6:	ab08      	add	r3, sp, #32
    bcf8:	220a      	movs	r2, #10
    bcfa:	a901      	add	r1, sp, #4
    bcfc:	f7ff fe70 	bl	b9e0 <a2i>
    bd00:	e793      	b.n	bc2a <tfp_format+0x6a>
                ch = *(fmt++);
    bd02:	9b01      	ldr	r3, [sp, #4]
    bd04:	1c5a      	adds	r2, r3, #1
    bd06:	9201      	str	r2, [sp, #4]
    bd08:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
    bd0a:	286c      	cmp	r0, #108	; 0x6c
    bd0c:	d001      	beq.n	bd12 <tfp_format+0x152>
                lng = 1;
    bd0e:	2301      	movs	r3, #1
    bd10:	e790      	b.n	bc34 <tfp_format+0x74>
                    ch = *(fmt++);
    bd12:	1c9a      	adds	r2, r3, #2
    bd14:	9201      	str	r2, [sp, #4]
    bd16:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
    bd18:	2302      	movs	r3, #2
    bd1a:	e78b      	b.n	bc34 <tfp_format+0x74>
                ch = *(fmt++);
    bd1c:	9b01      	ldr	r3, [sp, #4]
    bd1e:	1c5a      	adds	r2, r3, #1
    bd20:	9201      	str	r2, [sp, #4]
    bd22:	7818      	ldrb	r0, [r3, #0]
                p.hh = 1;
    bd24:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    bd28:	2601      	movs	r6, #1
    bd2a:	f366 1105 	bfi	r1, r6, #4, #2
    bd2e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
                if (ch == 'h') {
    bd32:	2868      	cmp	r0, #104	; 0x68
    bd34:	d001      	beq.n	bd3a <tfp_format+0x17a>
            lng = 0;
    bd36:	2300      	movs	r3, #0
    bd38:	e77c      	b.n	bc34 <tfp_format+0x74>
                    ch = *(fmt++);
    bd3a:	4432      	add	r2, r6
    bd3c:	9201      	str	r2, [sp, #4]
    bd3e:	7858      	ldrb	r0, [r3, #1]
                    p.hh = 2;
    bd40:	b2cb      	uxtb	r3, r1
    bd42:	2202      	movs	r2, #2
    bd44:	f362 1305 	bfi	r3, r2, #4, #2
    bd48:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;
    bd4c:	2300      	movs	r3, #0
    bd4e:	e771      	b.n	bc34 <tfp_format+0x74>
                ch = *(fmt++);
    bd50:	9a01      	ldr	r2, [sp, #4]
    bd52:	1c51      	adds	r1, r2, #1
    bd54:	9101      	str	r1, [sp, #4]
    bd56:	7810      	ldrb	r0, [r2, #0]
    bd58:	e76f      	b.n	bc3a <tfp_format+0x7a>
            switch (ch) {
    bd5a:	2858      	cmp	r0, #88	; 0x58
    bd5c:	d040      	beq.n	bde0 <tfp_format+0x220>
    bd5e:	d80a      	bhi.n	bd76 <tfp_format+0x1b6>
    bd60:	2800      	cmp	r0, #0
    bd62:	d076      	beq.n	be52 <tfp_format+0x292>
    bd64:	2825      	cmp	r0, #37	; 0x25
    bd66:	f47f af33 	bne.w	bbd0 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
    bd6a:	4601      	mov	r1, r0
    bd6c:	4628      	mov	r0, r5
    bd6e:	f7ff fe52 	bl	ba16 <putf>
    bd72:	4404      	add	r4, r0
                break;
    bd74:	e72c      	b.n	bbd0 <tfp_format+0x10>
            switch (ch) {
    bd76:	2863      	cmp	r0, #99	; 0x63
    bd78:	d108      	bne.n	bd8c <tfp_format+0x1cc>
                written += putf(putp, (char)(va_arg(va, int)));
    bd7a:	9b00      	ldr	r3, [sp, #0]
    bd7c:	1d1a      	adds	r2, r3, #4
    bd7e:	9200      	str	r2, [sp, #0]
    bd80:	7819      	ldrb	r1, [r3, #0]
    bd82:	4628      	mov	r0, r5
    bd84:	f7ff fe47 	bl	ba16 <putf>
    bd88:	4404      	add	r4, r0
                break;
    bd8a:	e721      	b.n	bbd0 <tfp_format+0x10>
            switch (ch) {
    bd8c:	2864      	cmp	r0, #100	; 0x64
    bd8e:	f47f af1f 	bne.w	bbd0 <tfp_format+0x10>
                p.base = 10;
    bd92:	220a      	movs	r2, #10
    bd94:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
    bd98:	466a      	mov	r2, sp
    bd9a:	2101      	movs	r1, #1
    bd9c:	4618      	mov	r0, r3
    bd9e:	f7ff fedd 	bl	bb5c <intarg>
    bda2:	aa08      	add	r2, sp, #32
    bda4:	f7ff fdf4 	bl	b990 <i2a>
                written += putchw(putp, &p);
    bda8:	a908      	add	r1, sp, #32
    bdaa:	4628      	mov	r0, r5
    bdac:	f7ff fe48 	bl	ba40 <putchw>
    bdb0:	4404      	add	r4, r0
                break;
    bdb2:	e70d      	b.n	bbd0 <tfp_format+0x10>
            switch (ch) {
    bdb4:	2875      	cmp	r0, #117	; 0x75
    bdb6:	d110      	bne.n	bdda <tfp_format+0x21a>
                p.base = 10;
    bdb8:	220a      	movs	r2, #10
    bdba:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    bdbe:	466a      	mov	r2, sp
    bdc0:	2100      	movs	r1, #0
    bdc2:	4618      	mov	r0, r3
    bdc4:	f7ff feca 	bl	bb5c <intarg>
    bdc8:	aa08      	add	r2, sp, #32
    bdca:	f7ff fd6b 	bl	b8a4 <ui2a>
                written += putchw(putp, &p);
    bdce:	a908      	add	r1, sp, #32
    bdd0:	4628      	mov	r0, r5
    bdd2:	f7ff fe35 	bl	ba40 <putchw>
    bdd6:	4404      	add	r4, r0
                break;
    bdd8:	e6fa      	b.n	bbd0 <tfp_format+0x10>
            switch (ch) {
    bdda:	2878      	cmp	r0, #120	; 0x78
    bddc:	f47f aef8 	bne.w	bbd0 <tfp_format+0x10>
                p.base = 16;
    bde0:	2210      	movs	r2, #16
    bde2:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
    bde6:	2858      	cmp	r0, #88	; 0x58
    bde8:	bf14      	ite	ne
    bdea:	2000      	movne	r0, #0
    bdec:	2001      	moveq	r0, #1
    bdee:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    bdf2:	f360 0282 	bfi	r2, r0, #2, #1
    bdf6:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
    bdfa:	466a      	mov	r2, sp
    bdfc:	2100      	movs	r1, #0
    bdfe:	4618      	mov	r0, r3
    be00:	f7ff feac 	bl	bb5c <intarg>
    be04:	aa08      	add	r2, sp, #32
    be06:	f7ff fd4d 	bl	b8a4 <ui2a>
                written += putchw(putp, &p);
    be0a:	a908      	add	r1, sp, #32
    be0c:	4628      	mov	r0, r5
    be0e:	f7ff fe17 	bl	ba40 <putchw>
    be12:	4404      	add	r4, r0
                break;
    be14:	e6dc      	b.n	bbd0 <tfp_format+0x10>
                p.base = 8;
    be16:	2208      	movs	r2, #8
    be18:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
    be1c:	466a      	mov	r2, sp
    be1e:	2100      	movs	r1, #0
    be20:	4618      	mov	r0, r3
    be22:	f7ff fe9b 	bl	bb5c <intarg>
    be26:	aa08      	add	r2, sp, #32
    be28:	f7ff fd3c 	bl	b8a4 <ui2a>
                written += putchw(putp, &p);
    be2c:	a908      	add	r1, sp, #32
    be2e:	4628      	mov	r0, r5
    be30:	f7ff fe06 	bl	ba40 <putchw>
    be34:	4404      	add	r4, r0
                break;
    be36:	e6cb      	b.n	bbd0 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
    be38:	9b00      	ldr	r3, [sp, #0]
    be3a:	1d1a      	adds	r2, r3, #4
    be3c:	9200      	str	r2, [sp, #0]
    be3e:	681b      	ldr	r3, [r3, #0]
    be40:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
    be42:	a908      	add	r1, sp, #32
    be44:	4628      	mov	r0, r5
    be46:	f7ff fdfb 	bl	ba40 <putchw>
    be4a:	4404      	add	r4, r0
                p.bf = bf;
    be4c:	ab02      	add	r3, sp, #8
    be4e:	9309      	str	r3, [sp, #36]	; 0x24
                break;
    be50:	e6be      	b.n	bbd0 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
    be52:	4620      	mov	r0, r4
    be54:	b00a      	add	sp, #40	; 0x28
    be56:	bd70      	pop	{r4, r5, r6, pc}

0000be58 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
    be58:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
    be5a:	f7ff feb1 	bl	bbc0 <tfp_format>
}
    be5e:	bd08      	pop	{r3, pc}

0000be60 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
    be60:	b40f      	push	{r0, r1, r2, r3}
    be62:	b500      	push	{lr}
    be64:	b083      	sub	sp, #12
    be66:	aa04      	add	r2, sp, #16
    be68:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
    be6c:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
    be6e:	4b04      	ldr	r3, [pc, #16]	; (be80 <printf+0x20>)
    be70:	6818      	ldr	r0, [r3, #0]
    be72:	f7ff fff1 	bl	be58 <vfprintf>
    va_end(va);
    return rv;
}
    be76:	b003      	add	sp, #12
    be78:	f85d eb04 	ldr.w	lr, [sp], #4
    be7c:	b004      	add	sp, #16
    be7e:	4770      	bx	lr
    be80:	00028c48 	.word	0x00028c48

0000be84 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
    be84:	b5f0      	push	{r4, r5, r6, r7, lr}
    be86:	b085      	sub	sp, #20
    be88:	4605      	mov	r5, r0
    be8a:	460c      	mov	r4, r1
    be8c:	4616      	mov	r6, r2
    be8e:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
    be90:	460a      	mov	r2, r1
    be92:	4601      	mov	r1, r0
    be94:	4668      	mov	r0, sp
    be96:	f000 f86f 	bl	bf78 <fmemopen_w>
    tfp_format(f, fmt, va);
    be9a:	463a      	mov	r2, r7
    be9c:	4631      	mov	r1, r6
    be9e:	f7ff fe8f 	bl	bbc0 <tfp_format>
    if (size > 0) {
    bea2:	b12c      	cbz	r4, beb0 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
    bea4:	9b02      	ldr	r3, [sp, #8]
    bea6:	42a3      	cmp	r3, r4
    bea8:	d305      	bcc.n	beb6 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
    beaa:	3c01      	subs	r4, #1
    beac:	2300      	movs	r3, #0
    beae:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
    beb0:	9802      	ldr	r0, [sp, #8]
    beb2:	b005      	add	sp, #20
    beb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
    beb6:	9b01      	ldr	r3, [sp, #4]
    beb8:	2200      	movs	r2, #0
    beba:	701a      	strb	r2, [r3, #0]
    bebc:	e7f8      	b.n	beb0 <vsnprintf+0x2c>

0000bebe <snprintf>:

int snprintf(char *str, size_t size, const char *fmt, ...)
{
    bebe:	b40c      	push	{r2, r3}
    bec0:	b500      	push	{lr}
    bec2:	b083      	sub	sp, #12
    bec4:	ab04      	add	r3, sp, #16
    bec6:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list va;
    va_start(va, fmt);
    beca:	9301      	str	r3, [sp, #4]
    int rv = vsnprintf(str, size, fmt, va);
    becc:	f7ff ffda 	bl	be84 <vsnprintf>
    va_end(va);
    return rv;
}
    bed0:	b003      	add	sp, #12
    bed2:	f85d eb04 	ldr.w	lr, [sp], #4
    bed6:	b002      	add	sp, #8
    bed8:	4770      	bx	lr
	...

0000bedc <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
    bedc:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
    bede:	460a      	mov	r2, r1
    bee0:	4601      	mov	r1, r0
    bee2:	4b02      	ldr	r3, [pc, #8]	; (beec <vprintf+0x10>)
    bee4:	6818      	ldr	r0, [r3, #0]
    bee6:	f7ff ffb7 	bl	be58 <vfprintf>
}
    beea:	bd08      	pop	{r3, pc}
    beec:	00028c48 	.word	0x00028c48

0000bef0 <jrand48>:

#include <stdlib.h>
#include <stdint.h>

long jrand48(unsigned short xsubi[3])
{
    bef0:	e92d 08f0 	stmdb	sp!, {r4, r5, r6, r7, fp}
    bef4:	4601      	mov	r1, r0
	uint64_t x;

	/* The xsubi[] array is littleendian by spec */
	x = (uint64_t) (uint16_t) xsubi[0] +
    bef6:	f8b0 b000 	ldrh.w	fp, [r0]
    befa:	f04f 0c00 	mov.w	ip, #0
	    ((uint64_t) (uint16_t) xsubi[1] << 16) +
    befe:	8846      	ldrh	r6, [r0, #2]
    bf00:	0c35      	lsrs	r5, r6, #16
    bf02:	0434      	lsls	r4, r6, #16
	x = (uint64_t) (uint16_t) xsubi[0] +
    bf04:	eb1b 0204 	adds.w	r2, fp, r4
    bf08:	eb4c 0305 	adc.w	r3, ip, r5
	    ((uint64_t) (uint16_t) xsubi[2] << 32);
    bf0c:	2400      	movs	r4, #0
    bf0e:	8885      	ldrh	r5, [r0, #4]
	x = (uint64_t) (uint16_t) xsubi[0] +
    bf10:	1916      	adds	r6, r2, r4
    bf12:	eb43 0705 	adc.w	r7, r3, r5

	x = (0x5deece66dULL * x) + 0xb;
    bf16:	4c0b      	ldr	r4, [pc, #44]	; (bf44 <jrand48+0x54>)
    bf18:	2005      	movs	r0, #5
    bf1a:	fb00 f006 	mul.w	r0, r0, r6
    bf1e:	fb04 0007 	mla	r0, r4, r7, r0
    bf22:	fba6 2304 	umull	r2, r3, r6, r4
    bf26:	4403      	add	r3, r0
    bf28:	f112 040b 	adds.w	r4, r2, #11
    bf2c:	f143 0500 	adc.w	r5, r3, #0

	xsubi[0] = (unsigned short)(uint16_t) x;
    bf30:	800c      	strh	r4, [r1, #0]
	xsubi[1] = (unsigned short)(uint16_t) (x >> 16);
    bf32:	0c20      	lsrs	r0, r4, #16
    bf34:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
    bf38:	8048      	strh	r0, [r1, #2]
	xsubi[2] = (unsigned short)(uint16_t) (x >> 32);
    bf3a:	808d      	strh	r5, [r1, #4]

	return (long)(int32_t) (x >> 16);
}
    bf3c:	e8bd 08f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp}
    bf40:	4770      	bx	lr
    bf42:	bf00      	nop
    bf44:	deece66d 	.word	0xdeece66d

0000bf48 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
    bf48:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
    bf4a:	2500      	movs	r5, #0
    
    while (n--)
    bf4c:	e000      	b.n	bf50 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
    bf4e:	4622      	mov	r2, r4
    while (n--)
    bf50:	1e54      	subs	r4, r2, #1
    bf52:	b16a      	cbz	r2, bf70 <memfile_write+0x28>
        f->bytes_written++;
    bf54:	6883      	ldr	r3, [r0, #8]
    bf56:	3301      	adds	r3, #1
    bf58:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
    bf5a:	68c2      	ldr	r2, [r0, #12]
    bf5c:	4293      	cmp	r3, r2
    bf5e:	d8f6      	bhi.n	bf4e <memfile_write+0x6>
            *f->buffer++ = *bp++;
    bf60:	6843      	ldr	r3, [r0, #4]
    bf62:	1c5a      	adds	r2, r3, #1
    bf64:	6042      	str	r2, [r0, #4]
    bf66:	780a      	ldrb	r2, [r1, #0]
    bf68:	701a      	strb	r2, [r3, #0]
            i++;
    bf6a:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
    bf6c:	3101      	adds	r1, #1
    bf6e:	e7ee      	b.n	bf4e <memfile_write+0x6>
        }
    }
    
    return i;
}
    bf70:	4628      	mov	r0, r5
    bf72:	bc30      	pop	{r4, r5}
    bf74:	4770      	bx	lr
	...

0000bf78 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
    bf78:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
    bf7a:	4c04      	ldr	r4, [pc, #16]	; (bf8c <fmemopen_w+0x14>)
    bf7c:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
    bf7e:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
    bf80:	2100      	movs	r1, #0
    bf82:	6081      	str	r1, [r0, #8]
    storage->size = size;
    bf84:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
    bf86:	f85d 4b04 	ldr.w	r4, [sp], #4
    bf8a:	4770      	bx	lr
    bf8c:	00028c40 	.word	0x00028c40

0000bf90 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
    bf90:	2000      	movs	r0, #0
    bf92:	4770      	bx	lr

0000bf94 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
    bf94:	b510      	push	{r4, lr}
    bf96:	4608      	mov	r0, r1
    bf98:	4614      	mov	r4, r2
    console_write(bp, n);
    bf9a:	4611      	mov	r1, r2
    bf9c:	f7fd f96c 	bl	9278 <console_write>
    return n;
}
    bfa0:	4620      	mov	r0, r4
    bfa2:	bd10      	pop	{r4, pc}

0000bfa4 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
    bfa4:	b508      	push	{r3, lr}
    sysinit();
    bfa6:	f7fd f9d9 	bl	935c <sysinit_start>
    bfaa:	f00b f946 	bl	1723a <sysinit_app>
    bfae:	f7fd f9db 	bl	9368 <sysinit_end>
}
    bfb2:	bd08      	pop	{r3, pc}

0000bfb4 <__aeabi_uldivmod>:
    bfb4:	b510      	push	{r4, lr}
    bfb6:	b084      	sub	sp, #16
    bfb8:	ac02      	add	r4, sp, #8
    bfba:	9400      	str	r4, [sp, #0]
    bfbc:	f000 f805 	bl	bfca <__udivmoddi4>
    bfc0:	9a02      	ldr	r2, [sp, #8]
    bfc2:	9b03      	ldr	r3, [sp, #12]
    bfc4:	b004      	add	sp, #16
    bfc6:	bd10      	pop	{r4, pc}
    bfc8:	defe      	udf	#254	; 0xfe

0000bfca <__udivmoddi4>:
    bfca:	f000 b800 	b.w	bfce <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE>

0000bfce <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE>:
    bfce:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfd0:	af03      	add	r7, sp, #12
    bfd2:	e92d 0f00 	stmdb	sp!, {r8, r9, sl, fp}
    bfd6:	b087      	sub	sp, #28
    bfd8:	f8d7 b008 	ldr.w	fp, [r7, #8]
    bfdc:	b159      	cbz	r1, bff6 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x28>
    bfde:	b1e2      	cbz	r2, c01a <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x4c>
    bfe0:	2b00      	cmp	r3, #0
    bfe2:	d048      	beq.n	c076 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0xa8>
    bfe4:	fab1 f681 	clz	r6, r1
    bfe8:	fab3 f583 	clz	r5, r3
    bfec:	1bae      	subs	r6, r5, r6
    bfee:	2e1f      	cmp	r6, #31
    bff0:	f200 809c 	bhi.w	c12c <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x15e>
    bff4:	e0a5      	b.n	c142 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x174>
    bff6:	2b00      	cmp	r3, #0
    bff8:	f040 8098 	bne.w	c12c <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x15e>
    bffc:	f1bb 0f00 	cmp.w	fp, #0
    c000:	f000 819f 	beq.w	c342 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x374>
    c004:	2a00      	cmp	r2, #0
    c006:	f000 81fb 	beq.w	c400 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x432>
    c00a:	fbb0 f1f2 	udiv	r1, r0, r2
    c00e:	2300      	movs	r3, #0
    c010:	fb01 0112 	mls	r1, r1, r2, r0
    c014:	e9cb 1300 	strd	r1, r3, [fp]
    c018:	e195      	b.n	c346 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x378>
    c01a:	2b00      	cmp	r3, #0
    c01c:	f000 81f0 	beq.w	c400 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x432>
    c020:	2800      	cmp	r0, #0
    c022:	d060      	beq.n	c0e6 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x118>
    c024:	f04f 3655 	mov.w	r6, #1431655765	; 0x55555555
    c028:	f04f 3533 	mov.w	r5, #858993459	; 0x33333333
    c02c:	ea06 0653 	and.w	r6, r6, r3, lsr #1
    c030:	1b9e      	subs	r6, r3, r6
    c032:	ea05 0596 	and.w	r5, r5, r6, lsr #2
    c036:	f026 36cc 	bic.w	r6, r6, #3435973836	; 0xcccccccc
    c03a:	442e      	add	r6, r5
    c03c:	f04f 3501 	mov.w	r5, #16843009	; 0x1010101
    c040:	eb06 1616 	add.w	r6, r6, r6, lsr #4
    c044:	f026 36f0 	bic.w	r6, r6, #4042322160	; 0xf0f0f0f0
    c048:	436e      	muls	r6, r5
    c04a:	2501      	movs	r5, #1
    c04c:	ebb5 6f16 	cmp.w	r5, r6, lsr #24
    c050:	d165      	bne.n	c11e <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x150>
    c052:	f1bb 0f00 	cmp.w	fp, #0
    c056:	bf1e      	ittt	ne
    c058:	1e5a      	subne	r2, r3, #1
    c05a:	400a      	andne	r2, r1
    c05c:	e9cb 0200 	strdne	r0, r2, [fp]
    c060:	fa93 f0a3 	rbit	r0, r3
    c064:	fab0 f080 	clz	r0, r0
    c068:	fa21 f000 	lsr.w	r0, r1, r0
    c06c:	2100      	movs	r1, #0
    c06e:	b007      	add	sp, #28
    c070:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    c074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c076:	f04f 3655 	mov.w	r6, #1431655765	; 0x55555555
    c07a:	f04f 3533 	mov.w	r5, #858993459	; 0x33333333
    c07e:	ea06 0652 	and.w	r6, r6, r2, lsr #1
    c082:	1b96      	subs	r6, r2, r6
    c084:	ea05 0596 	and.w	r5, r5, r6, lsr #2
    c088:	f026 36cc 	bic.w	r6, r6, #3435973836	; 0xcccccccc
    c08c:	442e      	add	r6, r5
    c08e:	f04f 3501 	mov.w	r5, #16843009	; 0x1010101
    c092:	eb06 1616 	add.w	r6, r6, r6, lsr #4
    c096:	f026 36f0 	bic.w	r6, r6, #4042322160	; 0xf0f0f0f0
    c09a:	436e      	muls	r6, r5
    c09c:	2501      	movs	r5, #1
    c09e:	ebb5 6f16 	cmp.w	r5, r6, lsr #24
    c0a2:	d131      	bne.n	c108 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x13a>
    c0a4:	f1bb 0f00 	cmp.w	fp, #0
    c0a8:	bf1f      	itttt	ne
    c0aa:	2300      	movne	r3, #0
    c0ac:	1e56      	subne	r6, r2, #1
    c0ae:	4006      	andne	r6, r0
    c0b0:	e9cb 6300 	strdne	r6, r3, [fp]
    c0b4:	2a01      	cmp	r2, #1
    c0b6:	d012      	beq.n	c0de <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x110>
    c0b8:	fa92 f2a2 	rbit	r2, r2
    c0bc:	fab2 f282 	clz	r2, r2
    c0c0:	f1c2 0320 	rsb	r3, r2, #32
    c0c4:	40d0      	lsrs	r0, r2
    c0c6:	fa01 f303 	lsl.w	r3, r1, r3
    c0ca:	4318      	orrs	r0, r3
    c0cc:	f1b2 0320 	subs.w	r3, r2, #32
    c0d0:	bf58      	it	pl
    c0d2:	fa21 f003 	lsrpl.w	r0, r1, r3
    c0d6:	fa21 f102 	lsr.w	r1, r1, r2
    c0da:	bf58      	it	pl
    c0dc:	2100      	movpl	r1, #0
    c0de:	b007      	add	sp, #28
    c0e0:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    c0e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0e6:	f1bb 0f00 	cmp.w	fp, #0
    c0ea:	bf1f      	itttt	ne
    c0ec:	fbb1 f0f3 	udivne	r0, r1, r3
    c0f0:	fb00 1013 	mlsne	r0, r0, r3, r1
    c0f4:	2200      	movne	r2, #0
    c0f6:	e9cb 2000 	strdne	r2, r0, [fp]
    c0fa:	fbb1 f0f3 	udiv	r0, r1, r3
    c0fe:	2100      	movs	r1, #0
    c100:	b007      	add	sp, #28
    c102:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    c106:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c108:	fab1 f681 	clz	r6, r1
    c10c:	fab2 f582 	clz	r5, r2
    c110:	1bae      	subs	r6, r5, r6
    c112:	f06f 0520 	mvn.w	r5, #32
    c116:	1bad      	subs	r5, r5, r6
    c118:	f106 0c21 	add.w	ip, r6, #33	; 0x21
    c11c:	e015      	b.n	c14a <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x17c>
    c11e:	fab1 f681 	clz	r6, r1
    c122:	fab3 f583 	clz	r5, r3
    c126:	1bae      	subs	r6, r5, r6
    c128:	2e1e      	cmp	r6, #30
    c12a:	d90a      	bls.n	c142 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x174>
    c12c:	f1bb 0f00 	cmp.w	fp, #0
    c130:	bf18      	it	ne
    c132:	e9cb 0100 	strdne	r0, r1, [fp]
    c136:	2000      	movs	r0, #0
    c138:	2100      	movs	r1, #0
    c13a:	b007      	add	sp, #28
    c13c:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    c140:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c142:	f1c6 053f 	rsb	r5, r6, #63	; 0x3f
    c146:	f106 0c01 	add.w	ip, r6, #1
    c14a:	f005 043f 	and.w	r4, r5, #63	; 0x3f
    c14e:	f1c4 0620 	rsb	r6, r4, #32
    c152:	f1b4 0820 	subs.w	r8, r4, #32
    c156:	fa01 f504 	lsl.w	r5, r1, r4
    c15a:	fa20 f606 	lsr.w	r6, r0, r6
    c15e:	ea46 0e05 	orr.w	lr, r6, r5
    c162:	f00c 063f 	and.w	r6, ip, #63	; 0x3f
    c166:	bf58      	it	pl
    c168:	fa00 fe08 	lslpl.w	lr, r0, r8
    c16c:	f1c6 0520 	rsb	r5, r6, #32
    c170:	f1b6 0a20 	subs.w	sl, r6, #32
    c174:	fa01 f905 	lsl.w	r9, r1, r5
    c178:	fa20 f506 	lsr.w	r5, r0, r6
    c17c:	ea49 0905 	orr.w	r9, r9, r5
    c180:	fa00 f504 	lsl.w	r5, r0, r4
    c184:	bf58      	it	pl
    c186:	fa21 f90a 	lsrpl.w	r9, r1, sl
    c18a:	f1b8 0f00 	cmp.w	r8, #0
    c18e:	bf58      	it	pl
    c190:	2500      	movpl	r5, #0
    c192:	fa21 f606 	lsr.w	r6, r1, r6
    c196:	f1ba 0f00 	cmp.w	sl, #0
    c19a:	bf58      	it	pl
    c19c:	2600      	movpl	r6, #0
    c19e:	f1bc 0f00 	cmp.w	ip, #0
    c1a2:	d00c      	beq.n	c1be <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x1f0>
    c1a4:	f00c 0103 	and.w	r1, ip, #3
    c1a8:	f1ac 0001 	sub.w	r0, ip, #1
    c1ac:	2803      	cmp	r0, #3
    c1ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
    c1b2:	9100      	str	r1, [sp, #0]
    c1b4:	d207      	bcs.n	c1c6 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x1f8>
    c1b6:	2400      	movs	r4, #0
    c1b8:	2200      	movs	r2, #0
    c1ba:	46f2      	mov	sl, lr
    c1bc:	e08c      	b.n	c2d8 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x30a>
    c1be:	2400      	movs	r4, #0
    c1c0:	2200      	movs	r2, #0
    c1c2:	46f2      	mov	sl, lr
    c1c4:	e10c      	b.n	c3e0 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x412>
    c1c6:	e9dd 3801 	ldrd	r3, r8, [sp, #4]
    c1ca:	eba1 000c 	sub.w	r0, r1, ip
    c1ce:	2100      	movs	r1, #0
    c1d0:	2200      	movs	r2, #0
    c1d2:	46f2      	mov	sl, lr
    c1d4:	e9cd 5004 	strd	r5, r0, [sp, #16]
    c1d8:	ea4f 75da 	mov.w	r5, sl, lsr #31
    c1dc:	ea45 0549 	orr.w	r5, r5, r9, lsl #1
    c1e0:	0076      	lsls	r6, r6, #1
    c1e2:	ea46 76d9 	orr.w	r6, r6, r9, lsr #31
    c1e6:	9206      	str	r2, [sp, #24]
    c1e8:	43e8      	mvns	r0, r5
    c1ea:	460a      	mov	r2, r1
    c1ec:	eb10 0008 	adds.w	r0, r0, r8
    c1f0:	ea6f 0406 	mvn.w	r4, r6
    c1f4:	eb44 0c03 	adc.w	ip, r4, r3
    c1f8:	ea08 70ec 	and.w	r0, r8, ip, asr #31
    c1fc:	ea03 74ec 	and.w	r4, r3, ip, asr #31
    c200:	1a28      	subs	r0, r5, r0
    c202:	f3ca 7580 	ubfx	r5, sl, #30, #1
    c206:	eb66 0404 	sbc.w	r4, r6, r4
    c20a:	0064      	lsls	r4, r4, #1
    c20c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
    c210:	ea45 0040 	orr.w	r0, r5, r0, lsl #1
    c214:	43c5      	mvns	r5, r0
    c216:	eb15 0508 	adds.w	r5, r5, r8
    c21a:	ea6f 0504 	mvn.w	r5, r4
    c21e:	eb45 0e03 	adc.w	lr, r5, r3
    c222:	ea08 75ee 	and.w	r5, r8, lr, asr #31
    c226:	1b40      	subs	r0, r0, r5
    c228:	ea03 75ee 	and.w	r5, r3, lr, asr #31
    c22c:	41ac      	sbcs	r4, r5
    c22e:	f3ca 7540 	ubfx	r5, sl, #29, #1
    c232:	0064      	lsls	r4, r4, #1
    c234:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
    c238:	ea45 0040 	orr.w	r0, r5, r0, lsl #1
    c23c:	43c5      	mvns	r5, r0
    c23e:	eb15 0508 	adds.w	r5, r5, r8
    c242:	ea6f 0504 	mvn.w	r5, r4
    c246:	eb45 0b03 	adc.w	fp, r5, r3
    c24a:	ea08 75eb 	and.w	r5, r8, fp, asr #31
    c24e:	1b40      	subs	r0, r0, r5
    c250:	ea03 75eb 	and.w	r5, r3, fp, asr #31
    c254:	41ac      	sbcs	r4, r5
    c256:	f3ca 7500 	ubfx	r5, sl, #28, #1
    c25a:	0064      	lsls	r4, r4, #1
    c25c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
    c260:	ea45 0040 	orr.w	r0, r5, r0, lsl #1
    c264:	43c5      	mvns	r5, r0
    c266:	eb15 0508 	adds.w	r5, r5, r8
    c26a:	ea6f 0504 	mvn.w	r5, r4
    c26e:	415d      	adcs	r5, r3
    c270:	ea08 71e5 	and.w	r1, r8, r5, asr #31
    c274:	ea03 76e5 	and.w	r6, r3, r5, asr #31
    c278:	1a40      	subs	r0, r0, r1
    c27a:	9003      	str	r0, [sp, #12]
    c27c:	f04f 0001 	mov.w	r0, #1
    c280:	eb64 0906 	sbc.w	r9, r4, r6
    c284:	ea00 74e5 	and.w	r4, r0, r5, asr #31
    c288:	9806      	ldr	r0, [sp, #24]
    c28a:	9d04      	ldr	r5, [sp, #16]
    c28c:	ea4f 018a 	mov.w	r1, sl, lsl #2
    c290:	2602      	movs	r6, #2
    c292:	0040      	lsls	r0, r0, #1
    c294:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    c298:	ea41 7195 	orr.w	r1, r1, r5, lsr #30
    c29c:	4308      	orrs	r0, r1
    c29e:	00a9      	lsls	r1, r5, #2
    c2a0:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    c2a4:	ea4f 75ee 	mov.w	r5, lr, asr #31
    c2a8:	ebb1 71ec 	subs.w	r1, r1, ip, asr #31
    c2ac:	ea06 0545 	and.w	r5, r6, r5, lsl #1
    c2b0:	eb60 70ec 	sbc.w	r0, r0, ip, asr #31
    c2b4:	464e      	mov	r6, r9
    c2b6:	f8dd 900c 	ldr.w	r9, [sp, #12]
    c2ba:	2200      	movs	r2, #0
    c2bc:	0080      	lsls	r0, r0, #2
    c2be:	ea40 7091 	orr.w	r0, r0, r1, lsr #30
    c2c2:	ea45 0181 	orr.w	r1, r5, r1, lsl #2
    c2c6:	ebb1 75eb 	subs.w	r5, r1, fp, asr #31
    c2ca:	4621      	mov	r1, r4
    c2cc:	eb60 7aeb 	sbc.w	sl, r0, fp, asr #31
    c2d0:	9805      	ldr	r0, [sp, #20]
    c2d2:	3004      	adds	r0, #4
    c2d4:	f47f af7e 	bne.w	c1d4 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x206>
    c2d8:	f8dd c000 	ldr.w	ip, [sp]
    c2dc:	f8d7 b008 	ldr.w	fp, [r7, #8]
    c2e0:	f1bc 0f00 	cmp.w	ip, #0
    c2e4:	d07c      	beq.n	c3e0 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x412>
    c2e6:	ea4f 71da 	mov.w	r1, sl, lsr #31
    c2ea:	0070      	lsls	r0, r6, #1
    c2ec:	ea41 0149 	orr.w	r1, r1, r9, lsl #1
    c2f0:	ea40 76d9 	orr.w	r6, r0, r9, lsr #31
    c2f4:	f8dd 8008 	ldr.w	r8, [sp, #8]
    c2f8:	46ae      	mov	lr, r5
    c2fa:	43cd      	mvns	r5, r1
    c2fc:	9b01      	ldr	r3, [sp, #4]
    c2fe:	43f0      	mvns	r0, r6
    c300:	eb15 0508 	adds.w	r5, r5, r8
    c304:	4158      	adcs	r0, r3
    c306:	9206      	str	r2, [sp, #24]
    c308:	ea08 75e0 	and.w	r5, r8, r0, asr #31
    c30c:	ea03 72e0 	and.w	r2, r3, r0, asr #31
    c310:	ebb1 0905 	subs.w	r9, r1, r5
    c314:	f04f 0101 	mov.w	r1, #1
    c318:	ea01 70e0 	and.w	r0, r1, r0, asr #31
    c31c:	4196      	sbcs	r6, r2
    c31e:	9005      	str	r0, [sp, #20]
    c320:	ea4f 004a 	mov.w	r0, sl, lsl #1
    c324:	9a06      	ldr	r2, [sp, #24]
    c326:	ea40 70de 	orr.w	r0, r0, lr, lsr #31
    c32a:	ea44 014e 	orr.w	r1, r4, lr, lsl #1
    c32e:	f1bc 0f01 	cmp.w	ip, #1
    c332:	ea40 0e02 	orr.w	lr, r0, r2
    c336:	d10d      	bne.n	c354 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x386>
    c338:	9c05      	ldr	r4, [sp, #20]
    c33a:	2200      	movs	r2, #0
    c33c:	460d      	mov	r5, r1
    c33e:	46f2      	mov	sl, lr
    c340:	e04e      	b.n	c3e0 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x412>
    c342:	2a00      	cmp	r2, #0
    c344:	d05c      	beq.n	c400 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x432>
    c346:	fbb0 f0f2 	udiv	r0, r0, r2
    c34a:	2100      	movs	r1, #0
    c34c:	b007      	add	sp, #28
    c34e:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    c352:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c354:	0074      	lsls	r4, r6, #1
    c356:	f3ca 7680 	ubfx	r6, sl, #30, #1
    c35a:	ea46 0649 	orr.w	r6, r6, r9, lsl #1
    c35e:	ea44 74d9 	orr.w	r4, r4, r9, lsr #31
    c362:	4662      	mov	r2, ip
    c364:	43f5      	mvns	r5, r6
    c366:	43e0      	mvns	r0, r4
    c368:	eb15 0508 	adds.w	r5, r5, r8
    c36c:	eb40 0503 	adc.w	r5, r0, r3
    c370:	ea08 70e5 	and.w	r0, r8, r5, asr #31
    c374:	ea03 7ce5 	and.w	ip, r3, r5, asr #31
    c378:	ebb6 0900 	subs.w	r9, r6, r0
    c37c:	f04f 0001 	mov.w	r0, #1
    c380:	eb64 060c 	sbc.w	r6, r4, ip
    c384:	ea00 74e5 	and.w	r4, r0, r5, asr #31
    c388:	9805      	ldr	r0, [sp, #20]
    c38a:	2a02      	cmp	r2, #2
    c38c:	ea40 0541 	orr.w	r5, r0, r1, lsl #1
    c390:	ea4f 004e 	mov.w	r0, lr, lsl #1
    c394:	ea40 7cd1 	orr.w	ip, r0, r1, lsr #31
    c398:	d102      	bne.n	c3a0 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x3d2>
    c39a:	46e2      	mov	sl, ip
    c39c:	2200      	movs	r2, #0
    c39e:	e01f      	b.n	c3e0 <_ZN17compiler_builtins3int4udiv12__udivmoddi417hb19392486b58714dE+0x412>
    c3a0:	46ae      	mov	lr, r5
    c3a2:	f3ca 7540 	ubfx	r5, sl, #29, #1
    c3a6:	0071      	lsls	r1, r6, #1
    c3a8:	ea45 0549 	orr.w	r5, r5, r9, lsl #1
    c3ac:	ea41 71d9 	orr.w	r1, r1, r9, lsr #31
    c3b0:	43ee      	mvns	r6, r5
    c3b2:	43c8      	mvns	r0, r1
    c3b4:	eb16 0608 	adds.w	r6, r6, r8
    c3b8:	4158      	adcs	r0, r3
    c3ba:	ea08 72e0 	and.w	r2, r8, r0, asr #31
    c3be:	ea03 73e0 	and.w	r3, r3, r0, asr #31
    c3c2:	ebb5 0902 	subs.w	r9, r5, r2
    c3c6:	ea4f 024c 	mov.w	r2, ip, lsl #1
    c3ca:	eb61 0603 	sbc.w	r6, r1, r3
    c3ce:	2101      	movs	r1, #1
    c3d0:	ea01 70e0 	and.w	r0, r1, r0, asr #31
    c3d4:	ea44 054e 	orr.w	r5, r4, lr, lsl #1
    c3d8:	ea42 7ade 	orr.w	sl, r2, lr, lsr #31
    c3dc:	2200      	movs	r2, #0
    c3de:	4604      	mov	r4, r0
    c3e0:	ea4f 014a 	mov.w	r1, sl, lsl #1
    c3e4:	f1bb 0f00 	cmp.w	fp, #0
    c3e8:	ea41 71d5 	orr.w	r1, r1, r5, lsr #31
    c3ec:	bf18      	it	ne
    c3ee:	e9cb 9600 	strdne	r9, r6, [fp]
    c3f2:	ea44 0045 	orr.w	r0, r4, r5, lsl #1
    c3f6:	4311      	orrs	r1, r2
    c3f8:	b007      	add	sp, #28
    c3fa:	e8bd 0f00 	ldmia.w	sp!, {r8, r9, sl, fp}
    c3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c400:	defe      	udf	#254	; 0xfe
    c402:	defe      	udf	#254	; 0xfe

0000c404 <imgr_my_version>:
    return 0;
}

int
imgr_my_version(struct image_version *ver)
{
    c404:	b508      	push	{r3, lr}
    return img_mgmt_read_info(boot_current_slot, ver, NULL, NULL);
    c406:	2300      	movs	r3, #0
    c408:	461a      	mov	r2, r3
    c40a:	4601      	mov	r1, r0
    c40c:	4802      	ldr	r0, [pc, #8]	; (c418 <imgr_my_version+0x14>)
    c40e:	6800      	ldr	r0, [r0, #0]
    c410:	f00b f9e6 	bl	177e0 <img_mgmt_read_info>
}
    c414:	bd08      	pop	{r3, pc}
    c416:	bf00      	nop
    c418:	20008000 	.word	0x20008000

0000c41c <imgmgr_find_best_area_id>:
    return -1;
}

int
imgmgr_find_best_area_id(void)
{
    c41c:	b530      	push	{r4, r5, lr}
    c41e:	b083      	sub	sp, #12
    struct image_version ver;
    int best = -1;
    int i;
    int rc;

    for (i = 0; i < 2; i++) {
    c420:	2400      	movs	r4, #0
    int best = -1;
    c422:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
    c426:	e000      	b.n	c42a <imgmgr_find_best_area_id+0xe>
    c428:	3401      	adds	r4, #1
    c42a:	2c01      	cmp	r4, #1
    c42c:	dc10      	bgt.n	c450 <imgmgr_find_best_area_id+0x34>
        rc = img_mgmt_read_info(i, &ver, NULL, NULL);
    c42e:	2300      	movs	r3, #0
    c430:	461a      	mov	r2, r3
    c432:	4669      	mov	r1, sp
    c434:	4620      	mov	r0, r4
    c436:	f00b f9d3 	bl	177e0 <img_mgmt_read_info>
        if (rc < 0) {
    c43a:	2800      	cmp	r0, #0
    c43c:	dbf4      	blt.n	c428 <imgmgr_find_best_area_id+0xc>
            continue;
        }
        if (rc == 0) {
    c43e:	b930      	cbnz	r0, c44e <imgmgr_find_best_area_id+0x32>
            /* Image in slot is ok. */
            if (img_mgmt_slot_in_use(i)) {
    c440:	4620      	mov	r0, r4
    c442:	f00b fc23 	bl	17c8c <img_mgmt_slot_in_use>
    c446:	2800      	cmp	r0, #0
    c448:	d1ee      	bne.n	c428 <imgmgr_find_best_area_id+0xc>
            } else {
                /*
                 * Not active slot, but image is ok. Use it if there are
                 * no better candidates.
                 */
                best = i;
    c44a:	4625      	mov	r5, r4
    c44c:	e7ec      	b.n	c428 <imgmgr_find_best_area_id+0xc>
            }
            continue;
        }
        best = i;
    c44e:	4625      	mov	r5, r4
        break;
    }
    if (best >= 0) {
    c450:	2d00      	cmp	r5, #0
    c452:	db03      	blt.n	c45c <imgmgr_find_best_area_id+0x40>
        best = flash_area_id_from_image_slot(best);
    c454:	4628      	mov	r0, r5
    c456:	f00a fcfe 	bl	16e56 <flash_area_id_from_image_slot>
    c45a:	4605      	mov	r5, r0
    }
    return best;
}
    c45c:	4628      	mov	r0, r5
    c45e:	b003      	add	sp, #12
    c460:	bd30      	pop	{r4, r5, pc}
	...

0000c464 <imgr_erase_state>:

static int
imgr_erase_state(struct mgmt_ctxt *ctxt)
{
    c464:	b570      	push	{r4, r5, r6, lr}
    c466:	b082      	sub	sp, #8
    c468:	4605      	mov	r5, r0
    const struct flash_area *fa;
    int area_id;
    int rc;
    CborError g_err = CborNoError;

    area_id = imgmgr_find_best_area_id();
    c46a:	f7ff ffd7 	bl	c41c <imgmgr_find_best_area_id>
    if (area_id >= 0) {
    c46e:	2800      	cmp	r0, #0
    c470:	db1b      	blt.n	c4aa <imgr_erase_state+0x46>
        rc = flash_area_open(area_id, &fa);
    c472:	a901      	add	r1, sp, #4
    c474:	b2c0      	uxtb	r0, r0
    c476:	f00a fc77 	bl	16d68 <flash_area_open>
        if (rc) {
    c47a:	b9d0      	cbnz	r0, c4b2 <imgr_erase_state+0x4e>
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
                                      img_mgmt_err_str_flash_open_failed);
        }

        rc = flash_area_erase(fa, 0, sizeof(struct image_header));
    c47c:	2220      	movs	r2, #32
    c47e:	2100      	movs	r1, #0
    c480:	9801      	ldr	r0, [sp, #4]
    c482:	f00a fcb1 	bl	16de8 <flash_area_erase>
        if (rc) {
    c486:	4604      	mov	r4, r0
    c488:	b9a8      	cbnz	r0, c4b6 <imgr_erase_state+0x52>
CBOR_API CborError cbor_encode_negative_int(CborEncoder *encoder, uint64_t absolute_value);
CBOR_API CborError cbor_encode_simple_value(CborEncoder *encoder, uint8_t value);
CBOR_API CborError cbor_encode_tag(CborEncoder *encoder, CborTag tag);
CBOR_API CborError cbor_encode_text_string(CborEncoder *encoder, const char *string, size_t length);
CBOR_INLINE_API CborError cbor_encode_text_stringz(CborEncoder *encoder, const char *string)
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
    c48a:	2202      	movs	r2, #2
    c48c:	490b      	ldr	r1, [pc, #44]	; (c4bc <imgr_erase_state+0x58>)
    c48e:	4628      	mov	r0, r5
    c490:	f00c ff9a 	bl	193c8 <cbor_encode_text_string>
    c494:	4606      	mov	r6, r0
    } else {
        return img_mgmt_error_rsp(ctxt, MGMT_ERR_ENOMEM, img_mgmt_err_str_no_slot);
    }

    g_err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    g_err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
    c496:	2200      	movs	r2, #0
    c498:	2300      	movs	r3, #0
    c49a:	4628      	mov	r0, r5
    c49c:	f00c ff13 	bl	192c6 <cbor_encode_int>

    if (g_err) {
    c4a0:	ea50 0306 	orrs.w	r3, r0, r6
    c4a4:	d002      	beq.n	c4ac <imgr_erase_state+0x48>
        return MGMT_ERR_ENOMEM;
    c4a6:	2402      	movs	r4, #2
    c4a8:	e000      	b.n	c4ac <imgr_erase_state+0x48>
        return img_mgmt_error_rsp(ctxt, MGMT_ERR_ENOMEM, img_mgmt_err_str_no_slot);
    c4aa:	2402      	movs	r4, #2
    }

    return 0;
}
    c4ac:	4620      	mov	r0, r4
    c4ae:	b002      	add	sp, #8
    c4b0:	bd70      	pop	{r4, r5, r6, pc}
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
    c4b2:	2403      	movs	r4, #3
    c4b4:	e7fa      	b.n	c4ac <imgr_erase_state+0x48>
            return img_mgmt_error_rsp(ctxt, MGMT_ERR_EINVAL,
    c4b6:	2403      	movs	r4, #3
    c4b8:	e7f8      	b.n	c4ac <imgr_erase_state+0x48>
    c4ba:	bf00      	nop
    c4bc:	00028c4c 	.word	0x00028c4c

0000c4c0 <imgmgr_module_init>:

void
imgmgr_module_init(void)
{
    c4c0:	b508      	push	{r3, lr}
    int rc;
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    c4c2:	4b08      	ldr	r3, [pc, #32]	; (c4e4 <imgmgr_module_init+0x24>)
    c4c4:	781b      	ldrb	r3, [r3, #0]
    c4c6:	b11b      	cbz	r3, c4d0 <imgmgr_module_init+0x10>

    mgmt_register_group(&imgr_mgmt_group);
    c4c8:	4807      	ldr	r0, [pc, #28]	; (c4e8 <imgmgr_module_init+0x28>)
    c4ca:	f000 f891 	bl	c5f0 <mgmt_register_group>
    rc = imgr_cli_register();
    SYSINIT_PANIC_ASSERT(rc == 0);
#else
    (void) rc;
#endif
}
    c4ce:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
    c4d0:	f7fb fe76 	bl	81c0 <hal_debugger_connected>
    c4d4:	b100      	cbz	r0, c4d8 <imgmgr_module_init+0x18>
    c4d6:	be01      	bkpt	0x0001
    c4d8:	2300      	movs	r3, #0
    c4da:	461a      	mov	r2, r3
    c4dc:	4619      	mov	r1, r3
    c4de:	4618      	mov	r0, r3
    c4e0:	f7fd fa04 	bl	98ec <__assert_func>
    c4e4:	20000506 	.word	0x20000506
    c4e8:	2000015c 	.word	0x2000015c

0000c4ec <imgr_ver_str>:
    return 0;
}

int
imgr_ver_str(struct image_version *ver, char *dst)
{
    c4ec:	b510      	push	{r4, lr}
    c4ee:	b082      	sub	sp, #8
    c4f0:	460c      	mov	r4, r1
    if (ver->iv_build_num) {
    c4f2:	6841      	ldr	r1, [r0, #4]
    c4f4:	b949      	cbnz	r1, c50a <imgr_ver_str+0x1e>
        return sprintf(dst, "%u.%u.%u.%lu",
          ver->iv_major, ver->iv_minor, ver->iv_revision,
          (unsigned long)ver->iv_build_num);
    } else {
        return sprintf(dst, "%u.%u.%u",
          ver->iv_major, ver->iv_minor, ver->iv_revision);
    c4f6:	7802      	ldrb	r2, [r0, #0]
    c4f8:	7843      	ldrb	r3, [r0, #1]
    c4fa:	8841      	ldrh	r1, [r0, #2]
        return sprintf(dst, "%u.%u.%u",
    c4fc:	9100      	str	r1, [sp, #0]
    c4fe:	4908      	ldr	r1, [pc, #32]	; (c520 <imgr_ver_str+0x34>)
    c500:	4620      	mov	r0, r4
    c502:	f00f fde5 	bl	1c0d0 <sprintf>
    }
}
    c506:	b002      	add	sp, #8
    c508:	bd10      	pop	{r4, pc}
          ver->iv_major, ver->iv_minor, ver->iv_revision,
    c50a:	7802      	ldrb	r2, [r0, #0]
    c50c:	7843      	ldrb	r3, [r0, #1]
    c50e:	8840      	ldrh	r0, [r0, #2]
        return sprintf(dst, "%u.%u.%u.%lu",
    c510:	9101      	str	r1, [sp, #4]
    c512:	9000      	str	r0, [sp, #0]
    c514:	4903      	ldr	r1, [pc, #12]	; (c524 <imgr_ver_str+0x38>)
    c516:	4620      	mov	r0, r4
    c518:	f00f fdda 	bl	1c0d0 <sprintf>
    c51c:	e7f3      	b.n	c506 <imgr_ver_str+0x1a>
    c51e:	bf00      	nop
    c520:	00028c98 	.word	0x00028c98
    c524:	00028c88 	.word	0x00028c88

0000c528 <mgmt_find_group>:
     * Find the group with the specified group id, if one exists
     * check the handler for the command id and make sure
     * that is not NULL. If that is not set, look for the group
     * with a command id that is set
     */
    for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
    c528:	4b13      	ldr	r3, [pc, #76]	; (c578 <mgmt_find_group+0x50>)
    c52a:	681b      	ldr	r3, [r3, #0]
    c52c:	b30b      	cbz	r3, c572 <mgmt_find_group+0x4a>
        if (group->mg_group_id == group_id) {
    c52e:	895a      	ldrh	r2, [r3, #10]
    c530:	4282      	cmp	r2, r0
    c532:	d018      	beq.n	c566 <mgmt_find_group+0x3e>
    for (group = mgmt_group_list; group != NULL; group = group->mg_next) {
    c534:	681b      	ldr	r3, [r3, #0]
    c536:	e7f9      	b.n	c52c <mgmt_find_group+0x4>
    c538:	681b      	ldr	r3, [r3, #0]
    c53a:	b173      	cbz	r3, c55a <mgmt_find_group+0x32>
        if (group->mg_group_id == group_id) {
    c53c:	895a      	ldrh	r2, [r3, #10]
    c53e:	4282      	cmp	r2, r0
    c540:	d1fa      	bne.n	c538 <mgmt_find_group+0x10>
            if (command_id >= group->mg_handlers_count) {
    c542:	891a      	ldrh	r2, [r3, #8]
    c544:	428a      	cmp	r2, r1
    c546:	d90c      	bls.n	c562 <mgmt_find_group+0x3a>
                return NULL;
            }

            if (!group->mg_handlers[command_id].mh_read &&
    c548:	685a      	ldr	r2, [r3, #4]
    c54a:	eb02 04c1 	add.w	r4, r2, r1, lsl #3
    c54e:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    c552:	b912      	cbnz	r2, c55a <mgmt_find_group+0x32>
                !group->mg_handlers[command_id].mh_write) {
    c554:	6862      	ldr	r2, [r4, #4]
            if (!group->mg_handlers[command_id].mh_read &&
    c556:	2a00      	cmp	r2, #0
    c558:	d0ee      	beq.n	c538 <mgmt_find_group+0x10>
            break;
        }
    }

    return group;
}
    c55a:	4618      	mov	r0, r3
    c55c:	f85d 4b04 	ldr.w	r4, [sp], #4
    c560:	4770      	bx	lr
                return NULL;
    c562:	2300      	movs	r3, #0
    c564:	e7f9      	b.n	c55a <mgmt_find_group+0x32>
            if (command_id >= group->mg_handlers_count) {
    c566:	891a      	ldrh	r2, [r3, #8]
    c568:	428a      	cmp	r2, r1
    c56a:	d901      	bls.n	c570 <mgmt_find_group+0x48>
{
    c56c:	b410      	push	{r4}
    c56e:	e7eb      	b.n	c548 <mgmt_find_group+0x20>
                return NULL;
    c570:	2300      	movs	r3, #0
}
    c572:	4618      	mov	r0, r3
    c574:	4770      	bx	lr
    c576:	bf00      	nop
    c578:	2000708c 	.word	0x2000708c

0000c57c <mgmt_streamer_alloc_rsp>:
{
    c57c:	b508      	push	{r3, lr}
    c57e:	4603      	mov	r3, r0
    c580:	4608      	mov	r0, r1
    return streamer->cfg->alloc_rsp(req, streamer->cb_arg);
    c582:	681a      	ldr	r2, [r3, #0]
    c584:	6812      	ldr	r2, [r2, #0]
    c586:	6859      	ldr	r1, [r3, #4]
    c588:	4790      	blx	r2
}
    c58a:	bd08      	pop	{r3, pc}

0000c58c <mgmt_streamer_trim_front>:
{
    c58c:	b510      	push	{r4, lr}
    c58e:	4603      	mov	r3, r0
    c590:	4608      	mov	r0, r1
    c592:	4611      	mov	r1, r2
    streamer->cfg->trim_front(buf, len, streamer->cb_arg);
    c594:	681a      	ldr	r2, [r3, #0]
    c596:	6854      	ldr	r4, [r2, #4]
    c598:	685a      	ldr	r2, [r3, #4]
    c59a:	47a0      	blx	r4
}
    c59c:	bd10      	pop	{r4, pc}

0000c59e <mgmt_streamer_reset_buf>:
{
    c59e:	b508      	push	{r3, lr}
    c5a0:	4603      	mov	r3, r0
    c5a2:	4608      	mov	r0, r1
    streamer->cfg->reset_buf(buf, streamer->cb_arg);
    c5a4:	681a      	ldr	r2, [r3, #0]
    c5a6:	6892      	ldr	r2, [r2, #8]
    c5a8:	6859      	ldr	r1, [r3, #4]
    c5aa:	4790      	blx	r2
}
    c5ac:	bd08      	pop	{r3, pc}

0000c5ae <mgmt_streamer_write_at>:
{
    c5ae:	b530      	push	{r4, r5, lr}
    c5b0:	b083      	sub	sp, #12
    return streamer->cfg->write_at(streamer->writer, offset, data, len,
    c5b2:	6804      	ldr	r4, [r0, #0]
    c5b4:	68e4      	ldr	r4, [r4, #12]
    c5b6:	68c5      	ldr	r5, [r0, #12]
    c5b8:	6840      	ldr	r0, [r0, #4]
    c5ba:	9000      	str	r0, [sp, #0]
    c5bc:	4628      	mov	r0, r5
    c5be:	47a0      	blx	r4
}
    c5c0:	b003      	add	sp, #12
    c5c2:	bd30      	pop	{r4, r5, pc}

0000c5c4 <mgmt_streamer_init_reader>:
{
    c5c4:	b508      	push	{r3, lr}
    return streamer->cfg->init_reader(streamer->reader, buf, streamer->cb_arg);
    c5c6:	6803      	ldr	r3, [r0, #0]
    c5c8:	691b      	ldr	r3, [r3, #16]
    c5ca:	6842      	ldr	r2, [r0, #4]
    c5cc:	6880      	ldr	r0, [r0, #8]
    c5ce:	4798      	blx	r3
}
    c5d0:	bd08      	pop	{r3, pc}

0000c5d2 <mgmt_streamer_init_writer>:
{
    c5d2:	b508      	push	{r3, lr}
    return streamer->cfg->init_writer(streamer->writer, buf, streamer->cb_arg);
    c5d4:	6803      	ldr	r3, [r0, #0]
    c5d6:	695b      	ldr	r3, [r3, #20]
    c5d8:	6842      	ldr	r2, [r0, #4]
    c5da:	68c0      	ldr	r0, [r0, #12]
    c5dc:	4798      	blx	r3
}
    c5de:	bd08      	pop	{r3, pc}

0000c5e0 <mgmt_streamer_free_buf>:
{
    c5e0:	b508      	push	{r3, lr}
    c5e2:	4603      	mov	r3, r0
    c5e4:	4608      	mov	r0, r1
    streamer->cfg->free_buf(buf, streamer->cb_arg);
    c5e6:	681a      	ldr	r2, [r3, #0]
    c5e8:	6992      	ldr	r2, [r2, #24]
    c5ea:	6859      	ldr	r1, [r3, #4]
    c5ec:	4790      	blx	r2
}
    c5ee:	bd08      	pop	{r3, pc}

0000c5f0 <mgmt_register_group>:

void
mgmt_register_group(struct mgmt_group *group)
{
    if (mgmt_group_list_end == NULL) {
    c5f0:	4b04      	ldr	r3, [pc, #16]	; (c604 <mgmt_register_group+0x14>)
    c5f2:	681b      	ldr	r3, [r3, #0]
    c5f4:	b11b      	cbz	r3, c5fe <mgmt_register_group+0xe>
        mgmt_group_list = group;
    } else {
        mgmt_group_list_end->mg_next = group;
    c5f6:	6018      	str	r0, [r3, #0]
    }
    mgmt_group_list_end = group;
    c5f8:	4b02      	ldr	r3, [pc, #8]	; (c604 <mgmt_register_group+0x14>)
    c5fa:	6018      	str	r0, [r3, #0]
}
    c5fc:	4770      	bx	lr
        mgmt_group_list = group;
    c5fe:	4b02      	ldr	r3, [pc, #8]	; (c608 <mgmt_register_group+0x18>)
    c600:	6018      	str	r0, [r3, #0]
    c602:	e7f9      	b.n	c5f8 <mgmt_register_group+0x8>
    c604:	20007090 	.word	0x20007090
    c608:	2000708c 	.word	0x2000708c

0000c60c <mgmt_find_handler>:

const struct mgmt_handler *
mgmt_find_handler(uint16_t group_id, uint16_t command_id)
{
    c60c:	b510      	push	{r4, lr}
    c60e:	460c      	mov	r4, r1
    const struct mgmt_group *group;

    group = mgmt_find_group(group_id, command_id);
    c610:	f7ff ff8a 	bl	c528 <mgmt_find_group>
    if (!group) {
    c614:	b118      	cbz	r0, c61e <mgmt_find_handler+0x12>
        return NULL;
    }

    return &group->mg_handlers[command_id];
    c616:	6840      	ldr	r0, [r0, #4]
    c618:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
}
    c61c:	bd10      	pop	{r4, pc}
        return NULL;
    c61e:	2000      	movs	r0, #0
    c620:	e7fc      	b.n	c61c <mgmt_find_handler+0x10>
	...

0000c624 <mgmt_write_rsp_status>:

int
mgmt_write_rsp_status(struct mgmt_ctxt *ctxt, int errcode)
{
    c624:	b538      	push	{r3, r4, r5, lr}
    c626:	4604      	mov	r4, r0
    c628:	460d      	mov	r5, r1
    c62a:	2202      	movs	r2, #2
    c62c:	4906      	ldr	r1, [pc, #24]	; (c648 <mgmt_write_rsp_status+0x24>)
    c62e:	f00c fecb 	bl	193c8 <cbor_encode_text_string>
    int rc;

    rc = cbor_encode_text_stringz(&ctxt->encoder, "rc");
    if (rc != 0) {
    c632:	4603      	mov	r3, r0
    c634:	b108      	cbz	r0, c63a <mgmt_write_rsp_status+0x16>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
    c636:	4618      	mov	r0, r3
    c638:	bd38      	pop	{r3, r4, r5, pc}
    rc = cbor_encode_int(&ctxt->encoder, errcode);
    c63a:	462a      	mov	r2, r5
    c63c:	17eb      	asrs	r3, r5, #31
    c63e:	4620      	mov	r0, r4
    c640:	f00c fe41 	bl	192c6 <cbor_encode_int>
    c644:	4603      	mov	r3, r0
    c646:	e7f6      	b.n	c636 <mgmt_write_rsp_status+0x12>
    c648:	00028c4c 	.word	0x00028c4c

0000c64c <mgmt_err_from_cbor>:

int
mgmt_err_from_cbor(int cbor_status)
{
    switch (cbor_status) {
    c64c:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    c650:	d002      	beq.n	c658 <mgmt_err_from_cbor+0xc>
    c652:	b110      	cbz	r0, c65a <mgmt_err_from_cbor+0xe>
        case CborNoError:           return MGMT_ERR_EOK;
        case CborErrorOutOfMemory:  return MGMT_ERR_ENOMEM;
        default:                    return MGMT_ERR_EUNKNOWN;
    c654:	2001      	movs	r0, #1
    c656:	4770      	bx	lr
        case CborErrorOutOfMemory:  return MGMT_ERR_ENOMEM;
    c658:	2002      	movs	r0, #2
    }
}
    c65a:	4770      	bx	lr

0000c65c <mgmt_ctxt_init>:

int
mgmt_ctxt_init(struct mgmt_ctxt *ctxt, struct mgmt_streamer *streamer)
{
    c65c:	b570      	push	{r4, r5, r6, lr}
    c65e:	4604      	mov	r4, r0
    c660:	460e      	mov	r6, r1
    int rc;

    rc = cbor_parser_init(streamer->reader, 0, &ctxt->parser, &ctxt->it);
    c662:	f100 031c 	add.w	r3, r0, #28
    c666:	f100 0210 	add.w	r2, r0, #16
    c66a:	2100      	movs	r1, #0
    c66c:	68b0      	ldr	r0, [r6, #8]
    c66e:	f00d f98b 	bl	19988 <cbor_parser_init>
    if (rc != CborNoError) {
    c672:	4605      	mov	r5, r0
    c674:	b120      	cbz	r0, c680 <mgmt_ctxt_init+0x24>
        return mgmt_err_from_cbor(rc);
    c676:	f7ff ffe9 	bl	c64c <mgmt_err_from_cbor>
    c67a:	4605      	mov	r5, r0
    }

    cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);

    return 0;
}
    c67c:	4628      	mov	r0, r5
    c67e:	bd70      	pop	{r4, r5, r6, pc}
    cbor_encoder_init(&ctxt->encoder, streamer->writer, 0);
    c680:	2200      	movs	r2, #0
    c682:	68f1      	ldr	r1, [r6, #12]
    c684:	4620      	mov	r0, r4
    c686:	f00c fde4 	bl	19252 <cbor_encoder_init>
    return 0;
    c68a:	e7f7      	b.n	c67c <mgmt_ctxt_init+0x20>

0000c68c <mgmt_ntoh_hdr>:

void
mgmt_ntoh_hdr(struct mgmt_hdr *hdr)
{
    hdr->nh_len = ntohs(hdr->nh_len);
    c68c:	8842      	ldrh	r2, [r0, #2]
    c68e:	0213      	lsls	r3, r2, #8
    c690:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    c694:	8043      	strh	r3, [r0, #2]
    hdr->nh_group = ntohs(hdr->nh_group);
    c696:	8882      	ldrh	r2, [r0, #4]
    c698:	0213      	lsls	r3, r2, #8
    c69a:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    c69e:	8083      	strh	r3, [r0, #4]
}
    c6a0:	4770      	bx	lr

0000c6a2 <mgmt_hton_hdr>:

void
mgmt_hton_hdr(struct mgmt_hdr *hdr)
{
    hdr->nh_len = htons(hdr->nh_len);
    c6a2:	8842      	ldrh	r2, [r0, #2]
    c6a4:	0213      	lsls	r3, r2, #8
    c6a6:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    c6aa:	8043      	strh	r3, [r0, #2]
    hdr->nh_group = htons(hdr->nh_group);
    c6ac:	8882      	ldrh	r2, [r0, #4]
    c6ae:	0213      	lsls	r3, r2, #8
    c6b0:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
    c6b4:	8083      	strh	r3, [r0, #4]
}
    c6b6:	4770      	bx	lr

0000c6b8 <mgmt_evt>:
    evt_cb = cb;
}

void
mgmt_evt(uint8_t opcode, uint16_t group, uint8_t id, void *arg)
{
    c6b8:	b510      	push	{r4, lr}
    if (evt_cb) {
    c6ba:	4c02      	ldr	r4, [pc, #8]	; (c6c4 <mgmt_evt+0xc>)
    c6bc:	6824      	ldr	r4, [r4, #0]
    c6be:	b104      	cbz	r4, c6c2 <mgmt_evt+0xa>
        evt_cb(opcode, group, id, arg);
    c6c0:	47a0      	blx	r4
    }
}
    c6c2:	bd10      	pop	{r4, pc}
    c6c4:	20007088 	.word	0x20007088

0000c6c8 <ble_gap_call_event_cb>:
ble_gap_event_listener_call(struct ble_gap_event *event);

static int
ble_gap_call_event_cb(struct ble_gap_event *event,
                      ble_gap_event_fn *cb, void *cb_arg)
{
    c6c8:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (cb != NULL) {
    c6ca:	b119      	cbz	r1, c6d4 <ble_gap_call_event_cb+0xc>
    c6cc:	460b      	mov	r3, r1
    c6ce:	4611      	mov	r1, r2
        rc = cb(event, cb_arg);
    c6d0:	4798      	blx	r3
        }
        rc = 0;
    }

    return rc;
}
    c6d2:	bd08      	pop	{r3, pc}
        if (event->type == BLE_GAP_EVENT_CONN_UPDATE_REQ) {
    c6d4:	7803      	ldrb	r3, [r0, #0]
    c6d6:	2b04      	cmp	r3, #4
    c6d8:	d001      	beq.n	c6de <ble_gap_call_event_cb+0x16>
        rc = 0;
    c6da:	2000      	movs	r0, #0
    return rc;
    c6dc:	e7f9      	b.n	c6d2 <ble_gap_call_event_cb+0xa>
                *event->conn_update_req.peer_params;
    c6de:	6842      	ldr	r2, [r0, #4]
            *event->conn_update_req.self_params =
    c6e0:	6883      	ldr	r3, [r0, #8]
    c6e2:	6810      	ldr	r0, [r2, #0]
    c6e4:	6851      	ldr	r1, [r2, #4]
    c6e6:	6892      	ldr	r2, [r2, #8]
    c6e8:	6018      	str	r0, [r3, #0]
    c6ea:	6059      	str	r1, [r3, #4]
    c6ec:	609a      	str	r2, [r3, #8]
        rc = 0;
    c6ee:	2000      	movs	r0, #0
    c6f0:	e7ef      	b.n	c6d2 <ble_gap_call_event_cb+0xa>
	...

0000c6f4 <ble_gap_is_preempted>:
{
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    if (ble_gap_master.preempted_op != BLE_GAP_OP_NULL) {
    c6f4:	4b09      	ldr	r3, [pc, #36]	; (c71c <ble_gap_is_preempted+0x28>)
    c6f6:	7c1b      	ldrb	r3, [r3, #16]
    c6f8:	b963      	cbnz	r3, c714 <ble_gap_is_preempted+0x20>
        return true;
    }

    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
    c6fa:	2b00      	cmp	r3, #0
    c6fc:	dd01      	ble.n	c702 <ble_gap_is_preempted+0xe>
        if (ble_gap_slave[i].preempted) {
            return true;
        }
    }

    return false;
    c6fe:	2000      	movs	r0, #0
    c700:	4770      	bx	lr
        if (ble_gap_slave[i].preempted) {
    c702:	4a06      	ldr	r2, [pc, #24]	; (c71c <ble_gap_is_preempted+0x28>)
    c704:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    c708:	7d52      	ldrb	r2, [r2, #21]
    c70a:	f012 0f04 	tst.w	r2, #4
    c70e:	d103      	bne.n	c718 <ble_gap_is_preempted+0x24>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
    c710:	3301      	adds	r3, #1
    c712:	e7f2      	b.n	c6fa <ble_gap_is_preempted+0x6>
        return true;
    c714:	2001      	movs	r0, #1
    c716:	4770      	bx	lr
            return true;
    c718:	2001      	movs	r0, #1
}
    c71a:	4770      	bx	lr
    c71c:	200004b8 	.word	0x200004b8

0000c720 <ble_gap_has_client>:

#if NIMBLE_BLE_CONNECT
static bool
ble_gap_has_client(struct ble_gap_master_state *out_state)
{
    if (!out_state) {
    c720:	b120      	cbz	r0, c72c <ble_gap_has_client+0xc>
        return 0;
    }

    return out_state->cb;
    c722:	6880      	ldr	r0, [r0, #8]
    c724:	3000      	adds	r0, #0
    c726:	bf18      	it	ne
    c728:	2001      	movne	r0, #1
    c72a:	4770      	bx	lr
        return 0;
    c72c:	2000      	movs	r0, #0
}
    c72e:	4770      	bx	lr

0000c730 <ble_gap_update_to_l2cap>:
#if NIMBLE_BLE_CONNECT
static void
ble_gap_update_to_l2cap(const struct ble_gap_upd_params *params,
                        struct ble_l2cap_sig_update_params *l2cap_params)
{
    l2cap_params->itvl_min = params->itvl_min;
    c730:	8803      	ldrh	r3, [r0, #0]
    c732:	800b      	strh	r3, [r1, #0]
    l2cap_params->itvl_max = params->itvl_max;
    c734:	8843      	ldrh	r3, [r0, #2]
    c736:	804b      	strh	r3, [r1, #2]
    l2cap_params->slave_latency = params->latency;
    c738:	8883      	ldrh	r3, [r0, #4]
    c73a:	808b      	strh	r3, [r1, #4]
    l2cap_params->timeout_multiplier = params->supervision_timeout;
    c73c:	88c3      	ldrh	r3, [r0, #6]
    c73e:	80cb      	strh	r3, [r1, #6]
}
    c740:	4770      	bx	lr
	...

0000c744 <ble_gap_adv_active_instance>:

static int
ble_gap_adv_active_instance(uint8_t instance)
{
    /* Assume read is atomic; mutex not necessary. */
    return ble_gap_slave[instance].op == BLE_GAP_OP_S_ADV;
    c744:	4b04      	ldr	r3, [pc, #16]	; (c758 <ble_gap_adv_active_instance+0x14>)
    c746:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    c74a:	7d00      	ldrb	r0, [r0, #20]
}
    c74c:	2801      	cmp	r0, #1
    c74e:	bf14      	ite	ne
    c750:	2000      	movne	r0, #0
    c752:	2001      	moveq	r0, #1
    c754:	4770      	bx	lr
    c756:	bf00      	nop
    c758:	200004b8 	.word	0x200004b8

0000c75c <ble_gap_accept_master_conn>:
static int
ble_gap_accept_master_conn(void)
{
    int rc;

    switch (ble_gap_master.op) {
    c75c:	4b03      	ldr	r3, [pc, #12]	; (c76c <ble_gap_accept_master_conn+0x10>)
    c75e:	781b      	ldrb	r3, [r3, #0]
    c760:	2b02      	cmp	r3, #2
    c762:	d001      	beq.n	c768 <ble_gap_accept_master_conn+0xc>
    case BLE_GAP_OP_NULL:
    case BLE_GAP_OP_M_DISC:
        rc = BLE_HS_ENOENT;
    c764:	2005      	movs	r0, #5
    c766:	4770      	bx	lr
        break;

    case BLE_GAP_OP_M_CONN:
        rc = 0;
    c768:	2000      	movs	r0, #0
    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_mst);
    }

    return rc;
}
    c76a:	4770      	bx	lr
    c76c:	200004b8 	.word	0x200004b8

0000c770 <ble_gap_accept_slave_conn>:
static int
ble_gap_accept_slave_conn(uint8_t instance)
{
    int rc;

    if (instance >= BLE_ADV_INSTANCES) {
    c770:	b968      	cbnz	r0, c78e <ble_gap_accept_slave_conn+0x1e>
{
    c772:	b510      	push	{r4, lr}
    c774:	4604      	mov	r4, r0
       rc = BLE_HS_ENOENT;
    } else if (!ble_gap_adv_active_instance(instance)) {
    c776:	f7ff ffe5 	bl	c744 <ble_gap_adv_active_instance>
    c77a:	b150      	cbz	r0, c792 <ble_gap_accept_slave_conn+0x22>
        rc = BLE_HS_ENOENT;
    } else {
        if (ble_gap_slave[instance].connectable) {
    c77c:	4b07      	ldr	r3, [pc, #28]	; (c79c <ble_gap_accept_slave_conn+0x2c>)
    c77e:	eb03 1404 	add.w	r4, r3, r4, lsl #4
    c782:	7d63      	ldrb	r3, [r4, #21]
    c784:	f013 0f08 	tst.w	r3, #8
    c788:	d005      	beq.n	c796 <ble_gap_accept_slave_conn+0x26>
            rc = 0;
    c78a:	2000      	movs	r0, #0
    if (rc == 0) {
        STATS_INC(ble_gap_stats, connect_slv);
    }

    return rc;
}
    c78c:	bd10      	pop	{r4, pc}
       rc = BLE_HS_ENOENT;
    c78e:	2005      	movs	r0, #5
}
    c790:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
    c792:	2005      	movs	r0, #5
    c794:	e7fa      	b.n	c78c <ble_gap_accept_slave_conn+0x1c>
            rc = BLE_HS_ENOENT;
    c796:	2005      	movs	r0, #5
    return rc;
    c798:	e7f8      	b.n	c78c <ble_gap_accept_slave_conn+0x1c>
    c79a:	bf00      	nop
    c79c:	200004b8 	.word	0x200004b8

0000c7a0 <ble_gap_adv_type>:
 *****************************************************************************/
#if NIMBLE_BLE_ADVERTISE && !MYNEWT_VAL(BLE_EXT_ADV)
static int
ble_gap_adv_type(const struct ble_gap_adv_params *adv_params)
{
    switch (adv_params->conn_mode) {
    c7a0:	7803      	ldrb	r3, [r0, #0]
    c7a2:	b11b      	cbz	r3, c7ac <ble_gap_adv_type+0xc>
    c7a4:	2b01      	cmp	r3, #1
    c7a6:	d005      	beq.n	c7b4 <ble_gap_adv_type+0x14>
        } else {
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
        }

    case BLE_GAP_CONN_MODE_UND:
        return BLE_HCI_ADV_TYPE_ADV_IND;
    c7a8:	2000      	movs	r0, #0
    c7aa:	4770      	bx	lr
        if (adv_params->disc_mode == BLE_GAP_DISC_MODE_NON) {
    c7ac:	7843      	ldrb	r3, [r0, #1]
    c7ae:	b93b      	cbnz	r3, c7c0 <ble_gap_adv_type+0x20>
            return BLE_HCI_ADV_TYPE_ADV_NONCONN_IND;
    c7b0:	2003      	movs	r0, #3
    c7b2:	4770      	bx	lr

    case BLE_GAP_CONN_MODE_DIR:
        if (adv_params->high_duty_cycle) {
    c7b4:	7a03      	ldrb	r3, [r0, #8]
    c7b6:	f013 0f01 	tst.w	r3, #1
    c7ba:	d003      	beq.n	c7c4 <ble_gap_adv_type+0x24>
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_HD;
    c7bc:	2001      	movs	r0, #1
    c7be:	4770      	bx	lr
            return BLE_HCI_ADV_TYPE_ADV_SCAN_IND;
    c7c0:	2002      	movs	r0, #2
    c7c2:	4770      	bx	lr
        } else {
            return BLE_HCI_ADV_TYPE_ADV_DIRECT_IND_LD;
    c7c4:	2004      	movs	r0, #4

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HCI_ADV_TYPE_ADV_IND;
    }
}
    c7c6:	4770      	bx	lr

0000c7c8 <ble_gap_adv_dflt_itvls>:

static void
ble_gap_adv_dflt_itvls(uint8_t conn_mode,
                       uint16_t *out_itvl_min, uint16_t *out_itvl_max)
{
    switch (conn_mode) {
    c7c8:	2801      	cmp	r0, #1
    c7ca:	d011      	beq.n	c7f0 <ble_gap_adv_dflt_itvls+0x28>
    c7cc:	b130      	cbz	r0, c7dc <ble_gap_adv_dflt_itvls+0x14>
    c7ce:	2802      	cmp	r0, #2
    c7d0:	d009      	beq.n	c7e6 <ble_gap_adv_dflt_itvls+0x1e>
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
    c7d2:	2330      	movs	r3, #48	; 0x30
    c7d4:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
    c7d6:	2360      	movs	r3, #96	; 0x60
    c7d8:	8013      	strh	r3, [r2, #0]
        break;
    }
}
    c7da:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL2_MIN;
    c7dc:	23a0      	movs	r3, #160	; 0xa0
    c7de:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL2_MAX;
    c7e0:	23f0      	movs	r3, #240	; 0xf0
    c7e2:	8013      	strh	r3, [r2, #0]
        break;
    c7e4:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
    c7e6:	2330      	movs	r3, #48	; 0x30
    c7e8:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
    c7ea:	2360      	movs	r3, #96	; 0x60
    c7ec:	8013      	strh	r3, [r2, #0]
        break;
    c7ee:	4770      	bx	lr
        *out_itvl_min = BLE_GAP_ADV_FAST_INTERVAL1_MIN;
    c7f0:	2330      	movs	r3, #48	; 0x30
    c7f2:	800b      	strh	r3, [r1, #0]
        *out_itvl_max = BLE_GAP_ADV_FAST_INTERVAL1_MAX;
    c7f4:	2360      	movs	r3, #96	; 0x60
    c7f6:	8013      	strh	r3, [r2, #0]
        break;
    c7f8:	4770      	bx	lr
	...

0000c7fc <ble_gap_update_entry_find>:
}

static struct ble_gap_update_entry *
ble_gap_update_entry_find(uint16_t conn_handle,
                          struct ble_gap_update_entry **out_prev)
{
    c7fc:	b410      	push	{r4}
    struct ble_gap_update_entry *prev;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    prev = NULL;
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
    c7fe:	4b08      	ldr	r3, [pc, #32]	; (c820 <ble_gap_update_entry_find+0x24>)
    c800:	681b      	ldr	r3, [r3, #0]
    prev = NULL;
    c802:	2400      	movs	r4, #0
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
    c804:	b12b      	cbz	r3, c812 <ble_gap_update_entry_find+0x16>
        if (entry->conn_handle == conn_handle) {
    c806:	8a9a      	ldrh	r2, [r3, #20]
    c808:	4282      	cmp	r2, r0
    c80a:	d002      	beq.n	c812 <ble_gap_update_entry_find+0x16>
            break;
        }

        prev = entry;
    c80c:	461c      	mov	r4, r3
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
    c80e:	681b      	ldr	r3, [r3, #0]
    c810:	e7f8      	b.n	c804 <ble_gap_update_entry_find+0x8>
    }

    if (out_prev != NULL) {
    c812:	b101      	cbz	r1, c816 <ble_gap_update_entry_find+0x1a>
        *out_prev = prev;
    c814:	600c      	str	r4, [r1, #0]
    }

    return entry;
}
    c816:	4618      	mov	r0, r3
    c818:	f85d 4b04 	ldr.w	r4, [sp], #4
    c81c:	4770      	bx	lr
    c81e:	bf00      	nop
    c820:	20007098 	.word	0x20007098

0000c824 <ble_gap_validate_conn_params>:
static bool
ble_gap_validate_conn_params(const struct ble_gap_upd_params *params)
{

    /* Requirements from Bluetooth spec. v4.2 [Vol 2, Part E], 7.8.18 */
    if (params->itvl_min > params->itvl_max) {
    c824:	8802      	ldrh	r2, [r0, #0]
    c826:	8843      	ldrh	r3, [r0, #2]
    c828:	429a      	cmp	r2, r3
    c82a:	d816      	bhi.n	c85a <ble_gap_validate_conn_params+0x36>
        return false;
    }

    if (params->itvl_min < 0x0006 || params->itvl_max > 0x0C80) {
    c82c:	2a05      	cmp	r2, #5
    c82e:	d916      	bls.n	c85e <ble_gap_validate_conn_params+0x3a>
    c830:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    c834:	d815      	bhi.n	c862 <ble_gap_validate_conn_params+0x3e>
        return false;
    }

    if (params->latency > 0x01F3) {
    c836:	8882      	ldrh	r2, [r0, #4]
    c838:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
    c83c:	d213      	bcs.n	c866 <ble_gap_validate_conn_params+0x42>
    /* According to specification mentioned above we should make sure that:
     * supervision_timeout_ms > (1 + latency) * 2 * max_interval_ms
     *    =>
     * supervision_timeout * 10 ms > (1 + latency) * 2 * itvl_max * 1.25ms
     */
    if (params->supervision_timeout <=
    c83e:	88c1      	ldrh	r1, [r0, #6]
                   (((1 + params->latency) * params->itvl_max) / 4)) {
    c840:	fb02 3303 	mla	r3, r2, r3, r3
    c844:	2b00      	cmp	r3, #0
    c846:	db04      	blt.n	c852 <ble_gap_validate_conn_params+0x2e>
    if (params->supervision_timeout <=
    c848:	ebb1 0fa3 	cmp.w	r1, r3, asr #2
    c84c:	dd03      	ble.n	c856 <ble_gap_validate_conn_params+0x32>
        return false;
    }

    return true;
    c84e:	2001      	movs	r0, #1
}
    c850:	4770      	bx	lr
                   (((1 + params->latency) * params->itvl_max) / 4)) {
    c852:	3303      	adds	r3, #3
    c854:	e7f8      	b.n	c848 <ble_gap_validate_conn_params+0x24>
        return false;
    c856:	2000      	movs	r0, #0
    c858:	4770      	bx	lr
        return false;
    c85a:	2000      	movs	r0, #0
    c85c:	4770      	bx	lr
        return false;
    c85e:	2000      	movs	r0, #0
    c860:	4770      	bx	lr
    c862:	2000      	movs	r0, #0
    c864:	4770      	bx	lr
        return false;
    c866:	2000      	movs	r0, #0
    c868:	4770      	bx	lr
	...

0000c86c <ble_gap_event_listener_call>:
    return rc;
}

static int
ble_gap_event_listener_call(struct ble_gap_event *event)
{
    c86c:	b538      	push	{r3, r4, r5, lr}
    c86e:	4605      	mov	r5, r0
    struct ble_gap_event_listener *evl = NULL;

    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
    c870:	4b05      	ldr	r3, [pc, #20]	; (c888 <ble_gap_event_listener_call+0x1c>)
    c872:	681c      	ldr	r4, [r3, #0]
    c874:	e004      	b.n	c880 <ble_gap_event_listener_call+0x14>
        evl->fn(event, evl->arg);
    c876:	6823      	ldr	r3, [r4, #0]
    c878:	6861      	ldr	r1, [r4, #4]
    c87a:	4628      	mov	r0, r5
    c87c:	4798      	blx	r3
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
    c87e:	68a4      	ldr	r4, [r4, #8]
    c880:	2c00      	cmp	r4, #0
    c882:	d1f8      	bne.n	c876 <ble_gap_event_listener_call+0xa>
    }

    return 0;
}
    c884:	2000      	movs	r0, #0
    c886:	bd38      	pop	{r3, r4, r5, pc}
    c888:	20007094 	.word	0x20007094

0000c88c <ble_gap_extract_conn_cb>:
{
    c88c:	b570      	push	{r4, r5, r6, lr}
    c88e:	4604      	mov	r4, r0
    c890:	460e      	mov	r6, r1
    c892:	4615      	mov	r5, r2
    ble_hs_lock();
    c894:	f003 f906 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    c898:	4620      	mov	r0, r4
    c89a:	f003 ff0d 	bl	106b8 <ble_hs_conn_find>
    if (conn != NULL) {
    c89e:	4604      	mov	r4, r0
    c8a0:	b140      	cbz	r0, c8b4 <ble_gap_extract_conn_cb+0x28>
        *out_cb = conn->bhc_cb;
    c8a2:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    c8a4:	6033      	str	r3, [r6, #0]
        *out_cb_arg = conn->bhc_cb_arg;
    c8a6:	6e03      	ldr	r3, [r0, #96]	; 0x60
    c8a8:	602b      	str	r3, [r5, #0]
    ble_hs_unlock();
    c8aa:	f003 f8ff 	bl	faac <ble_hs_unlock>
    if (conn == NULL) {
    c8ae:	b12c      	cbz	r4, c8bc <ble_gap_extract_conn_cb+0x30>
        return 0;
    c8b0:	2000      	movs	r0, #0
}
    c8b2:	bd70      	pop	{r4, r5, r6, pc}
        *out_cb = NULL;
    c8b4:	2300      	movs	r3, #0
    c8b6:	6033      	str	r3, [r6, #0]
        *out_cb_arg = NULL;
    c8b8:	602b      	str	r3, [r5, #0]
    c8ba:	e7f6      	b.n	c8aa <ble_gap_extract_conn_cb+0x1e>
        return BLE_HS_ENOTCONN;
    c8bc:	2007      	movs	r0, #7
    c8be:	e7f8      	b.n	c8b2 <ble_gap_extract_conn_cb+0x26>

0000c8c0 <ble_gap_call_conn_event_cb>:
{
    c8c0:	b510      	push	{r4, lr}
    c8c2:	b082      	sub	sp, #8
    c8c4:	4604      	mov	r4, r0
    c8c6:	4608      	mov	r0, r1
    rc = ble_gap_extract_conn_cb(conn_handle, &cb, &cb_arg);
    c8c8:	466a      	mov	r2, sp
    c8ca:	a901      	add	r1, sp, #4
    c8cc:	f7ff ffde 	bl	c88c <ble_gap_extract_conn_cb>
    if (rc != 0) {
    c8d0:	4603      	mov	r3, r0
    c8d2:	b110      	cbz	r0, c8da <ble_gap_call_conn_event_cb+0x1a>
}
    c8d4:	4618      	mov	r0, r3
    c8d6:	b002      	add	sp, #8
    c8d8:	bd10      	pop	{r4, pc}
    rc = ble_gap_call_event_cb(event, cb, cb_arg);
    c8da:	9a00      	ldr	r2, [sp, #0]
    c8dc:	9901      	ldr	r1, [sp, #4]
    c8de:	4620      	mov	r0, r4
    c8e0:	f7ff fef2 	bl	c6c8 <ble_gap_call_event_cb>
    c8e4:	4603      	mov	r3, r0
    c8e6:	e7f5      	b.n	c8d4 <ble_gap_call_conn_event_cb+0x14>

0000c8e8 <ble_gap_fill_conn_desc>:
{
    c8e8:	b570      	push	{r4, r5, r6, lr}
    c8ea:	b088      	sub	sp, #32
    c8ec:	4605      	mov	r5, r0
    c8ee:	460c      	mov	r4, r1
    ble_hs_conn_addrs(conn, &addrs);
    c8f0:	ae01      	add	r6, sp, #4
    c8f2:	4631      	mov	r1, r6
    c8f4:	f003 ff18 	bl	10728 <ble_hs_conn_addrs>
    desc->our_id_addr = addrs.our_id_addr;
    c8f8:	e896 0003 	ldmia.w	r6, {r0, r1}
    c8fc:	6060      	str	r0, [r4, #4]
    c8fe:	f104 0308 	add.w	r3, r4, #8
    c902:	f823 1b02 	strh.w	r1, [r3], #2
    c906:	0c09      	lsrs	r1, r1, #16
    c908:	7019      	strb	r1, [r3, #0]
    desc->peer_id_addr = addrs.peer_id_addr;
    c90a:	ab08      	add	r3, sp, #32
    c90c:	f853 1d15 	ldr.w	r1, [r3, #-21]!
    c910:	f8c4 100b 	str.w	r1, [r4, #11]
    c914:	8899      	ldrh	r1, [r3, #4]
    c916:	799b      	ldrb	r3, [r3, #6]
    c918:	f8a4 100f 	strh.w	r1, [r4, #15]
    c91c:	7463      	strb	r3, [r4, #17]
    desc->our_ota_addr = addrs.our_ota_addr;
    c91e:	ab08      	add	r3, sp, #32
    c920:	f853 1d0e 	ldr.w	r1, [r3, #-14]!
    c924:	f8c4 1012 	str.w	r1, [r4, #18]
    c928:	8899      	ldrh	r1, [r3, #4]
    c92a:	799b      	ldrb	r3, [r3, #6]
    c92c:	82e1      	strh	r1, [r4, #22]
    c92e:	7623      	strb	r3, [r4, #24]
    desc->peer_ota_addr = addrs.peer_ota_addr;
    c930:	ab08      	add	r3, sp, #32
    c932:	f853 1d07 	ldr.w	r1, [r3, #-7]!
    c936:	f8c4 1019 	str.w	r1, [r4, #25]
    c93a:	8899      	ldrh	r1, [r3, #4]
    c93c:	799b      	ldrb	r3, [r3, #6]
    c93e:	f8a4 101d 	strh.w	r1, [r4, #29]
    c942:	77e3      	strb	r3, [r4, #31]
    desc->conn_handle = conn->bhc_handle;
    c944:	88ab      	ldrh	r3, [r5, #4]
    c946:	8423      	strh	r3, [r4, #32]
    desc->conn_itvl = conn->bhc_itvl;
    c948:	8bab      	ldrh	r3, [r5, #28]
    c94a:	8463      	strh	r3, [r4, #34]	; 0x22
    desc->conn_latency = conn->bhc_latency;
    c94c:	8beb      	ldrh	r3, [r5, #30]
    c94e:	84a3      	strh	r3, [r4, #36]	; 0x24
    desc->supervision_timeout = conn->bhc_supervision_timeout;
    c950:	8c2b      	ldrh	r3, [r5, #32]
    c952:	84e3      	strh	r3, [r4, #38]	; 0x26
    desc->master_clock_accuracy = conn->bhc_master_clock_accuracy;
    c954:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
    c958:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    desc->sec_state = conn->bhc_sec_state;
    c95c:	6dab      	ldr	r3, [r5, #88]	; 0x58
    c95e:	6023      	str	r3, [r4, #0]
    if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
    c960:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    c964:	f013 0f01 	tst.w	r3, #1
    c968:	d104      	bne.n	c974 <ble_gap_fill_conn_desc+0x8c>
        desc->role = BLE_GAP_ROLE_SLAVE;
    c96a:	2301      	movs	r3, #1
    c96c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
    c970:	b008      	add	sp, #32
    c972:	bd70      	pop	{r4, r5, r6, pc}
        desc->role = BLE_GAP_ROLE_MASTER;
    c974:	2300      	movs	r3, #0
    c976:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    c97a:	e7f9      	b.n	c970 <ble_gap_fill_conn_desc+0x88>

0000c97c <ble_gap_conn_to_snapshot>:
{
    c97c:	b538      	push	{r3, r4, r5, lr}
    c97e:	4605      	mov	r5, r0
    c980:	460c      	mov	r4, r1
    ble_gap_fill_conn_desc(conn, snap->desc);
    c982:	6809      	ldr	r1, [r1, #0]
    c984:	f7ff ffb0 	bl	c8e8 <ble_gap_fill_conn_desc>
    snap->cb = conn->bhc_cb;
    c988:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    c98a:	6063      	str	r3, [r4, #4]
    snap->cb_arg = conn->bhc_cb_arg;
    c98c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    c98e:	60a3      	str	r3, [r4, #8]
}
    c990:	bd38      	pop	{r3, r4, r5, pc}

0000c992 <ble_gap_find_snapshot>:
{
    c992:	b538      	push	{r3, r4, r5, lr}
    c994:	4604      	mov	r4, r0
    c996:	460d      	mov	r5, r1
    ble_hs_lock();
    c998:	f003 f884 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
    c99c:	4620      	mov	r0, r4
    c99e:	f003 fe8b 	bl	106b8 <ble_hs_conn_find>
    if (conn != NULL) {
    c9a2:	4604      	mov	r4, r0
    c9a4:	b110      	cbz	r0, c9ac <ble_gap_find_snapshot+0x1a>
        ble_gap_conn_to_snapshot(conn, snap);
    c9a6:	4629      	mov	r1, r5
    c9a8:	f7ff ffe8 	bl	c97c <ble_gap_conn_to_snapshot>
    ble_hs_unlock();
    c9ac:	f003 f87e 	bl	faac <ble_hs_unlock>
    if (conn == NULL) {
    c9b0:	b10c      	cbz	r4, c9b6 <ble_gap_find_snapshot+0x24>
        return 0;
    c9b2:	2000      	movs	r0, #0
}
    c9b4:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
    c9b6:	2007      	movs	r0, #7
    c9b8:	e7fc      	b.n	c9b4 <ble_gap_find_snapshot+0x22>

0000c9ba <ble_gap_rd_rem_sup_feat_tx>:
{
    c9ba:	b500      	push	{lr}
    c9bc:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(handle);
    c9be:	a904      	add	r1, sp, #16
    c9c0:	f821 0d04 	strh.w	r0, [r1, #-4]!
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
    c9c4:	2300      	movs	r3, #0
    c9c6:	9300      	str	r3, [sp, #0]
    c9c8:	2202      	movs	r2, #2
    c9ca:	f242 0016 	movw	r0, #8214	; 0x2016
    c9ce:	f004 f8bf 	bl	10b50 <ble_hs_hci_cmd_tx>
}
    c9d2:	b005      	add	sp, #20
    c9d4:	f85d fb04 	ldr.w	pc, [sp], #4

0000c9d8 <ble_gap_conn_cancel_tx>:
{
    c9d8:	b500      	push	{lr}
    c9da:	b083      	sub	sp, #12
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
    c9dc:	2100      	movs	r1, #0
    c9de:	9100      	str	r1, [sp, #0]
    c9e0:	460b      	mov	r3, r1
    c9e2:	460a      	mov	r2, r1
    c9e4:	f242 000e 	movw	r0, #8206	; 0x200e
    c9e8:	f004 f8b2 	bl	10b50 <ble_hs_hci_cmd_tx>
}
    c9ec:	b003      	add	sp, #12
    c9ee:	f85d fb04 	ldr.w	pc, [sp], #4

0000c9f2 <ble_gap_adv_enable_tx>:
{
    c9f2:	b500      	push	{lr}
    c9f4:	b085      	sub	sp, #20
    cmd.enable = !!enable;
    c9f6:	3000      	adds	r0, #0
    c9f8:	bf18      	it	ne
    c9fa:	2001      	movne	r0, #1
    c9fc:	a904      	add	r1, sp, #16
    c9fe:	f801 0d04 	strb.w	r0, [r1, #-4]!
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
    ca02:	2300      	movs	r3, #0
    ca04:	9300      	str	r3, [sp, #0]
    ca06:	2201      	movs	r2, #1
    ca08:	f242 000a 	movw	r0, #8202	; 0x200a
    ca0c:	f004 f8a0 	bl	10b50 <ble_hs_hci_cmd_tx>
}
    ca10:	b005      	add	sp, #20
    ca12:	f85d fb04 	ldr.w	pc, [sp], #4

0000ca16 <ble_gap_adv_params_tx>:
{
    ca16:	b570      	push	{r4, r5, r6, lr}
    ca18:	b08a      	sub	sp, #40	; 0x28
    ca1a:	4606      	mov	r6, r0
    ca1c:	460c      	mov	r4, r1
    ca1e:	4615      	mov	r5, r2
    const ble_addr_t *peer_any = BLE_ADDR_ANY;
    ca20:	2300      	movs	r3, #0
    ca22:	9308      	str	r3, [sp, #32]
    ca24:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    if ((adv_params->itvl_min == 0) && (adv_params->itvl_max == 0)) {
    ca28:	8853      	ldrh	r3, [r2, #2]
    ca2a:	b90b      	cbnz	r3, ca30 <ble_gap_adv_params_tx+0x1a>
    ca2c:	8892      	ldrh	r2, [r2, #4]
    ca2e:	b33a      	cbz	r2, ca80 <ble_gap_adv_params_tx+0x6a>
        cmd.min_interval = htole16(adv_params->itvl_min);
    ca30:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(adv_params->itvl_max);
    ca34:	88ab      	ldrh	r3, [r5, #4]
    ca36:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.type = ble_gap_adv_type(adv_params);
    ca3a:	4628      	mov	r0, r5
    ca3c:	f7ff feb0 	bl	c7a0 <ble_gap_adv_type>
    ca40:	f88d 0014 	strb.w	r0, [sp, #20]
    cmd.own_addr_type = own_addr_type;
    ca44:	f88d 6015 	strb.w	r6, [sp, #21]
    if (peer_addr == NULL) {
    ca48:	b34c      	cbz	r4, ca9e <ble_gap_adv_params_tx+0x88>
    cmd.peer_addr_type = peer_addr->type;
    ca4a:	7823      	ldrb	r3, [r4, #0]
    ca4c:	f88d 3016 	strb.w	r3, [sp, #22]
    memcpy(&cmd.peer_addr, peer_addr->val, sizeof(cmd.peer_addr));
    ca50:	f854 3f01 	ldr.w	r3, [r4, #1]!
    ca54:	f8cd 3017 	str.w	r3, [sp, #23]
    ca58:	88a3      	ldrh	r3, [r4, #4]
    ca5a:	f8ad 301b 	strh.w	r3, [sp, #27]
    if (adv_params->channel_map == 0) {
    ca5e:	79ab      	ldrb	r3, [r5, #6]
    ca60:	b1fb      	cbz	r3, caa2 <ble_gap_adv_params_tx+0x8c>
        cmd.chan_map = adv_params->channel_map;
    ca62:	f88d 301d 	strb.w	r3, [sp, #29]
    cmd.filter_policy = adv_params->filter_policy;
    ca66:	79eb      	ldrb	r3, [r5, #7]
    ca68:	f88d 301e 	strb.w	r3, [sp, #30]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
    ca6c:	2300      	movs	r3, #0
    ca6e:	9300      	str	r3, [sp, #0]
    ca70:	220f      	movs	r2, #15
    ca72:	a904      	add	r1, sp, #16
    ca74:	f242 0006 	movw	r0, #8198	; 0x2006
    ca78:	f004 f86a 	bl	10b50 <ble_hs_hci_cmd_tx>
}
    ca7c:	b00a      	add	sp, #40	; 0x28
    ca7e:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_adv_dflt_itvls(adv_params->conn_mode, &min, &max);
    ca80:	aa03      	add	r2, sp, #12
    ca82:	f10d 010e 	add.w	r1, sp, #14
    ca86:	7828      	ldrb	r0, [r5, #0]
    ca88:	f7ff fe9e 	bl	c7c8 <ble_gap_adv_dflt_itvls>
        cmd.min_interval = htole16(min);
    ca8c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    ca90:	f8ad 3010 	strh.w	r3, [sp, #16]
        cmd.max_interval = htole16(max);
    ca94:	f8bd 300c 	ldrh.w	r3, [sp, #12]
    ca98:	f8ad 3012 	strh.w	r3, [sp, #18]
    ca9c:	e7cd      	b.n	ca3a <ble_gap_adv_params_tx+0x24>
        peer_addr = peer_any;
    ca9e:	ac08      	add	r4, sp, #32
    caa0:	e7d3      	b.n	ca4a <ble_gap_adv_params_tx+0x34>
        cmd.chan_map = BLE_GAP_ADV_DFLT_CHANNEL_MAP;
    caa2:	2307      	movs	r3, #7
    caa4:	f88d 301d 	strb.w	r3, [sp, #29]
    caa8:	e7dd      	b.n	ca66 <ble_gap_adv_params_tx+0x50>

0000caaa <ble_gap_tx_param_pos_reply>:
{
    caaa:	b500      	push	{lr}
    caac:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
    caae:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
    cab2:	880b      	ldrh	r3, [r1, #0]
    cab4:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
    cab8:	884b      	ldrh	r3, [r1, #2]
    caba:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
    cabe:	888b      	ldrh	r3, [r1, #4]
    cac0:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
    cac4:	88cb      	ldrh	r3, [r1, #6]
    cac6:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce = htole16(params->min_ce_len);
    caca:	890b      	ldrh	r3, [r1, #8]
    cacc:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce = htole16(params->max_ce_len);
    cad0:	894b      	ldrh	r3, [r1, #10]
    cad2:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
    cad6:	2300      	movs	r3, #0
    cad8:	9300      	str	r3, [sp, #0]
    cada:	220e      	movs	r2, #14
    cadc:	a902      	add	r1, sp, #8
    cade:	f242 0020 	movw	r0, #8224	; 0x2020
    cae2:	f004 f835 	bl	10b50 <ble_hs_hci_cmd_tx>
}
    cae6:	b007      	add	sp, #28
    cae8:	f85d fb04 	ldr.w	pc, [sp], #4

0000caec <ble_gap_tx_param_neg_reply>:
{
    caec:	b500      	push	{lr}
    caee:	b085      	sub	sp, #20
    cmd.conn_handle = htole16(conn_handle);
    caf0:	f8ad 000c 	strh.w	r0, [sp, #12]
    cmd.reason = reject_reason;
    caf4:	f88d 100e 	strb.w	r1, [sp, #14]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
    caf8:	2300      	movs	r3, #0
    cafa:	9300      	str	r3, [sp, #0]
    cafc:	2203      	movs	r2, #3
    cafe:	a903      	add	r1, sp, #12
    cb00:	f242 0021 	movw	r0, #8225	; 0x2021
    cb04:	f004 f824 	bl	10b50 <ble_hs_hci_cmd_tx>
}
    cb08:	b005      	add	sp, #20
    cb0a:	f85d fb04 	ldr.w	pc, [sp], #4

0000cb0e <ble_gap_update_tx>:
{
    cb0e:	b500      	push	{lr}
    cb10:	b087      	sub	sp, #28
    cmd.conn_handle = htole16(conn_handle);
    cb12:	f8ad 0008 	strh.w	r0, [sp, #8]
    cmd.conn_itvl_min = htole16(params->itvl_min);
    cb16:	880b      	ldrh	r3, [r1, #0]
    cb18:	f8ad 300a 	strh.w	r3, [sp, #10]
    cmd.conn_itvl_max = htole16(params->itvl_max);
    cb1c:	884b      	ldrh	r3, [r1, #2]
    cb1e:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.conn_latency = htole16(params->latency);
    cb22:	888b      	ldrh	r3, [r1, #4]
    cb24:	f8ad 300e 	strh.w	r3, [sp, #14]
    cmd.supervision_timeout = htole16(params->supervision_timeout);
    cb28:	88cb      	ldrh	r3, [r1, #6]
    cb2a:	f8ad 3010 	strh.w	r3, [sp, #16]
    cmd.min_ce_len = htole16(params->min_ce_len);
    cb2e:	890b      	ldrh	r3, [r1, #8]
    cb30:	f8ad 3012 	strh.w	r3, [sp, #18]
    cmd.max_ce_len = htole16(params->max_ce_len);
    cb34:	894b      	ldrh	r3, [r1, #10]
    cb36:	f8ad 3014 	strh.w	r3, [sp, #20]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
    cb3a:	2300      	movs	r3, #0
    cb3c:	9300      	str	r3, [sp, #0]
    cb3e:	220e      	movs	r2, #14
    cb40:	a902      	add	r1, sp, #8
    cb42:	f242 0013 	movw	r0, #8211	; 0x2013
    cb46:	f004 f803 	bl	10b50 <ble_hs_hci_cmd_tx>
}
    cb4a:	b007      	add	sp, #28
    cb4c:	f85d fb04 	ldr.w	pc, [sp], #4

0000cb50 <ble_gap_update_entry_remove>:
{
    cb50:	b510      	push	{r4, lr}
    cb52:	b082      	sub	sp, #8
    entry = ble_gap_update_entry_find(conn_handle, &prev);
    cb54:	a901      	add	r1, sp, #4
    cb56:	f7ff fe51 	bl	c7fc <ble_gap_update_entry_find>
    if (entry != NULL) {
    cb5a:	4604      	mov	r4, r0
    cb5c:	b128      	cbz	r0, cb6a <ble_gap_update_entry_remove+0x1a>
        if (prev == NULL) {
    cb5e:	9b01      	ldr	r3, [sp, #4]
    cb60:	b133      	cbz	r3, cb70 <ble_gap_update_entry_remove+0x20>
            SLIST_NEXT(prev, next) = SLIST_NEXT(entry, next);
    cb62:	6802      	ldr	r2, [r0, #0]
    cb64:	601a      	str	r2, [r3, #0]
        ble_hs_timer_resched();
    cb66:	f003 f879 	bl	fc5c <ble_hs_timer_resched>
}
    cb6a:	4620      	mov	r0, r4
    cb6c:	b002      	add	sp, #8
    cb6e:	bd10      	pop	{r4, pc}
            SLIST_REMOVE_HEAD(&ble_gap_update_entries, next);
    cb70:	4b02      	ldr	r3, [pc, #8]	; (cb7c <ble_gap_update_entry_remove+0x2c>)
    cb72:	681a      	ldr	r2, [r3, #0]
    cb74:	6812      	ldr	r2, [r2, #0]
    cb76:	601a      	str	r2, [r3, #0]
    cb78:	e7f5      	b.n	cb66 <ble_gap_update_entry_remove+0x16>
    cb7a:	bf00      	nop
    cb7c:	20007098 	.word	0x20007098

0000cb80 <ble_gap_slave_reset_state>:
{
    cb80:	b508      	push	{r3, lr}
    ble_gap_slave[instance].op = BLE_GAP_OP_NULL;
    cb82:	4b06      	ldr	r3, [pc, #24]	; (cb9c <ble_gap_slave_reset_state+0x1c>)
    cb84:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    cb88:	2100      	movs	r1, #0
    cb8a:	7501      	strb	r1, [r0, #20]
    ble_gap_slave[instance].exp_set = 0;
    cb8c:	7d42      	ldrb	r2, [r0, #21]
    cb8e:	f361 1204 	bfi	r2, r1, #4, #1
    cb92:	7542      	strb	r2, [r0, #21]
    ble_hs_timer_resched();
    cb94:	f003 f862 	bl	fc5c <ble_hs_timer_resched>
}
    cb98:	bd08      	pop	{r3, pc}
    cb9a:	bf00      	nop
    cb9c:	200004b8 	.word	0x200004b8

0000cba0 <ble_gap_slave_extract_cb>:
{
    cba0:	b570      	push	{r4, r5, r6, lr}
    cba2:	4604      	mov	r4, r0
    cba4:	460e      	mov	r6, r1
    cba6:	4615      	mov	r5, r2
    ble_hs_lock();
    cba8:	f002 ff7c 	bl	faa4 <ble_hs_lock>
    *out_cb = ble_gap_slave[instance].cb;
    cbac:	4b06      	ldr	r3, [pc, #24]	; (cbc8 <ble_gap_slave_extract_cb+0x28>)
    cbae:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    cbb2:	69da      	ldr	r2, [r3, #28]
    cbb4:	6032      	str	r2, [r6, #0]
    *out_cb_arg = ble_gap_slave[instance].cb_arg;
    cbb6:	6a1b      	ldr	r3, [r3, #32]
    cbb8:	602b      	str	r3, [r5, #0]
    ble_gap_slave_reset_state(instance);
    cbba:	4620      	mov	r0, r4
    cbbc:	f7ff ffe0 	bl	cb80 <ble_gap_slave_reset_state>
    ble_hs_unlock();
    cbc0:	f002 ff74 	bl	faac <ble_hs_unlock>
}
    cbc4:	bd70      	pop	{r4, r5, r6, pc}
    cbc6:	bf00      	nop
    cbc8:	200004b8 	.word	0x200004b8

0000cbcc <ble_gap_adv_finished>:
{
    cbcc:	b530      	push	{r4, r5, lr}
    cbce:	b091      	sub	sp, #68	; 0x44
    cbd0:	4604      	mov	r4, r0
    cbd2:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
    cbd4:	2234      	movs	r2, #52	; 0x34
    cbd6:	2100      	movs	r1, #0
    cbd8:	a803      	add	r0, sp, #12
    cbda:	f7fe fe10 	bl	b7fe <memset>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
    cbde:	2309      	movs	r3, #9
    cbe0:	f88d 300c 	strb.w	r3, [sp, #12]
    event.adv_complete.reason = reason;
    cbe4:	9504      	str	r5, [sp, #16]
    ble_gap_event_listener_call(&event);
    cbe6:	a803      	add	r0, sp, #12
    cbe8:	f7ff fe40 	bl	c86c <ble_gap_event_listener_call>
    ble_gap_slave_extract_cb(instance, &cb, &cb_arg);
    cbec:	aa01      	add	r2, sp, #4
    cbee:	a902      	add	r1, sp, #8
    cbf0:	4620      	mov	r0, r4
    cbf2:	f7ff ffd5 	bl	cba0 <ble_gap_slave_extract_cb>
    if (cb != NULL) {
    cbf6:	9b02      	ldr	r3, [sp, #8]
    cbf8:	b113      	cbz	r3, cc00 <ble_gap_adv_finished+0x34>
        cb(&event, cb_arg);
    cbfa:	9901      	ldr	r1, [sp, #4]
    cbfc:	a803      	add	r0, sp, #12
    cbfe:	4798      	blx	r3
}
    cc00:	b011      	add	sp, #68	; 0x44
    cc02:	bd30      	pop	{r4, r5, pc}

0000cc04 <ble_gap_master_reset_state>:
{
    cc04:	b508      	push	{r3, lr}
    ble_gap_master.op = BLE_GAP_OP_NULL;
    cc06:	4b07      	ldr	r3, [pc, #28]	; (cc24 <ble_gap_master_reset_state+0x20>)
    cc08:	2200      	movs	r2, #0
    cc0a:	701a      	strb	r2, [r3, #0]
    ble_gap_master.exp_set = 0;
    cc0c:	7859      	ldrb	r1, [r3, #1]
    cc0e:	f362 0100 	bfi	r1, r2, #0, #1
    cc12:	7059      	strb	r1, [r3, #1]
    ble_gap_master.conn.cancel = 0;
    cc14:	7c59      	ldrb	r1, [r3, #17]
    cc16:	f362 01c3 	bfi	r1, r2, #3, #1
    cc1a:	7459      	strb	r1, [r3, #17]
    ble_hs_timer_resched();
    cc1c:	f003 f81e 	bl	fc5c <ble_hs_timer_resched>
}
    cc20:	bd08      	pop	{r3, pc}
    cc22:	bf00      	nop
    cc24:	200004b8 	.word	0x200004b8

0000cc28 <ble_gap_master_extract_state>:
{
    cc28:	b570      	push	{r4, r5, r6, lr}
    cc2a:	4604      	mov	r4, r0
    cc2c:	460e      	mov	r6, r1
    ble_hs_lock();
    cc2e:	f002 ff39 	bl	faa4 <ble_hs_lock>
    *out_state = ble_gap_master;
    cc32:	4d08      	ldr	r5, [pc, #32]	; (cc54 <ble_gap_master_extract_state+0x2c>)
    cc34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cc36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cc38:	682b      	ldr	r3, [r5, #0]
    cc3a:	6023      	str	r3, [r4, #0]
    if (reset_state) {
    cc3c:	b916      	cbnz	r6, cc44 <ble_gap_master_extract_state+0x1c>
    ble_hs_unlock();
    cc3e:	f002 ff35 	bl	faac <ble_hs_unlock>
}
    cc42:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_master_reset_state();
    cc44:	f7ff ffde 	bl	cc04 <ble_gap_master_reset_state>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
    cc48:	f1a5 0310 	sub.w	r3, r5, #16
    cc4c:	2200      	movs	r2, #0
    cc4e:	741a      	strb	r2, [r3, #16]
    cc50:	e7f5      	b.n	cc3e <ble_gap_master_extract_state+0x16>
    cc52:	bf00      	nop
    cc54:	200004b8 	.word	0x200004b8

0000cc58 <ble_gap_master_connect_failure>:
{
    cc58:	b510      	push	{r4, lr}
    cc5a:	b092      	sub	sp, #72	; 0x48
    cc5c:	4604      	mov	r4, r0
    ble_gap_master_extract_state(&state, 1);
    cc5e:	2101      	movs	r1, #1
    cc60:	a80d      	add	r0, sp, #52	; 0x34
    cc62:	f7ff ffe1 	bl	cc28 <ble_gap_master_extract_state>
    if (ble_gap_has_client(&state)) {
    cc66:	a80d      	add	r0, sp, #52	; 0x34
    cc68:	f7ff fd5a 	bl	c720 <ble_gap_has_client>
    cc6c:	b910      	cbnz	r0, cc74 <ble_gap_master_connect_failure+0x1c>
        rc = 0;
    cc6e:	2000      	movs	r0, #0
}
    cc70:	b012      	add	sp, #72	; 0x48
    cc72:	bd10      	pop	{r4, pc}
        memset(&event, 0, sizeof event);
    cc74:	2234      	movs	r2, #52	; 0x34
    cc76:	2100      	movs	r1, #0
    cc78:	4668      	mov	r0, sp
    cc7a:	f7fe fdc0 	bl	b7fe <memset>
        event.connect.status = status;
    cc7e:	9401      	str	r4, [sp, #4]
        rc = state.cb(&event, state.cb_arg);
    cc80:	9910      	ldr	r1, [sp, #64]	; 0x40
    cc82:	4668      	mov	r0, sp
    cc84:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    cc86:	4798      	blx	r3
    cc88:	e7f2      	b.n	cc70 <ble_gap_master_connect_failure+0x18>
	...

0000cc8c <ble_gap_master_failed>:
{
    cc8c:	b508      	push	{r3, lr}
    switch (ble_gap_master.op) {
    cc8e:	4b04      	ldr	r3, [pc, #16]	; (cca0 <ble_gap_master_failed+0x14>)
    cc90:	781b      	ldrb	r3, [r3, #0]
    cc92:	2b02      	cmp	r3, #2
    cc94:	d000      	beq.n	cc98 <ble_gap_master_failed+0xc>
}
    cc96:	bd08      	pop	{r3, pc}
        ble_gap_master_connect_failure(status);
    cc98:	f7ff ffde 	bl	cc58 <ble_gap_master_connect_failure>
}
    cc9c:	e7fb      	b.n	cc96 <ble_gap_master_failed+0xa>
    cc9e:	bf00      	nop
    cca0:	200004b8 	.word	0x200004b8

0000cca4 <ble_gap_master_connect_cancelled>:
{
    cca4:	b510      	push	{r4, lr}
    cca6:	b092      	sub	sp, #72	; 0x48
    ble_gap_master_extract_state(&state, 1);
    cca8:	2101      	movs	r1, #1
    ccaa:	a80d      	add	r0, sp, #52	; 0x34
    ccac:	f7ff ffbc 	bl	cc28 <ble_gap_master_extract_state>
    if (state.cb != NULL) {
    ccb0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    ccb2:	b194      	cbz	r4, ccda <ble_gap_master_connect_cancelled+0x36>
        memset(&event, 0, sizeof event);
    ccb4:	2234      	movs	r2, #52	; 0x34
    ccb6:	2100      	movs	r1, #0
    ccb8:	4668      	mov	r0, sp
    ccba:	f7fe fda0 	bl	b7fe <memset>
        event.connect.conn_handle = BLE_HS_CONN_HANDLE_NONE;
    ccbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    ccc2:	f8ad 3008 	strh.w	r3, [sp, #8]
        if (state.conn.cancel) {
    ccc6:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
    ccca:	f013 0f08 	tst.w	r3, #8
    ccce:	d006      	beq.n	ccde <ble_gap_master_connect_cancelled+0x3a>
            event.connect.status = BLE_HS_EAPP;
    ccd0:	2309      	movs	r3, #9
    ccd2:	9301      	str	r3, [sp, #4]
        state.cb(&event, state.cb_arg);
    ccd4:	9910      	ldr	r1, [sp, #64]	; 0x40
    ccd6:	4668      	mov	r0, sp
    ccd8:	47a0      	blx	r4
}
    ccda:	b012      	add	sp, #72	; 0x48
    ccdc:	bd10      	pop	{r4, pc}
            event.connect.status = BLE_HS_ETIMEOUT;
    ccde:	230d      	movs	r3, #13
    cce0:	9301      	str	r3, [sp, #4]
    cce2:	e7f7      	b.n	ccd4 <ble_gap_master_connect_cancelled+0x30>

0000cce4 <ble_gap_update_entry_free>:
    if (entry != NULL) {
    cce4:	b128      	cbz	r0, ccf2 <ble_gap_update_entry_free+0xe>
{
    cce6:	b508      	push	{r3, lr}
    cce8:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_gap_update_entry_pool, entry);
    ccea:	4802      	ldr	r0, [pc, #8]	; (ccf4 <ble_gap_update_entry_free+0x10>)
    ccec:	f7fd feef 	bl	aace <os_memblock_put>
}
    ccf0:	bd08      	pop	{r3, pc}
    ccf2:	4770      	bx	lr
    ccf4:	200070b4 	.word	0x200070b4

0000ccf8 <ble_gap_master_ticks_until_exp>:
    if (ble_gap_master.op == BLE_GAP_OP_NULL || !ble_gap_master.exp_set) {
    ccf8:	4b0c      	ldr	r3, [pc, #48]	; (cd2c <ble_gap_master_ticks_until_exp+0x34>)
    ccfa:	781b      	ldrb	r3, [r3, #0]
    ccfc:	b16b      	cbz	r3, cd1a <ble_gap_master_ticks_until_exp+0x22>
    ccfe:	4b0b      	ldr	r3, [pc, #44]	; (cd2c <ble_gap_master_ticks_until_exp+0x34>)
    cd00:	785b      	ldrb	r3, [r3, #1]
    cd02:	f013 0f01 	tst.w	r3, #1
    cd06:	d00b      	beq.n	cd20 <ble_gap_master_ticks_until_exp+0x28>
{
    cd08:	b510      	push	{r4, lr}
    ticks = ble_gap_master.exp_os_ticks - ble_npl_time_get();
    cd0a:	4b08      	ldr	r3, [pc, #32]	; (cd2c <ble_gap_master_ticks_until_exp+0x34>)
    cd0c:	685c      	ldr	r4, [r3, #4]
}

static inline uint32_t
ble_npl_time_get(void)
{
    return os_time_get();
    cd0e:	f7fe fb61 	bl	b3d4 <os_time_get>
    cd12:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
    cd14:	2800      	cmp	r0, #0
    cd16:	dd06      	ble.n	cd26 <ble_gap_master_ticks_until_exp+0x2e>
}
    cd18:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
    cd1a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cd1e:	4770      	bx	lr
    cd20:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
    cd24:	4770      	bx	lr
    return 0;
    cd26:	2000      	movs	r0, #0
    cd28:	e7f6      	b.n	cd18 <ble_gap_master_ticks_until_exp+0x20>
    cd2a:	bf00      	nop
    cd2c:	200004b8 	.word	0x200004b8

0000cd30 <ble_gap_update_next_exp>:
{
    cd30:	b538      	push	{r3, r4, r5, lr}
    cd32:	4605      	mov	r5, r0
    cd34:	f7fe fb4e 	bl	b3d4 <os_time_get>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
    cd38:	4b0b      	ldr	r3, [pc, #44]	; (cd68 <ble_gap_update_next_exp+0x38>)
    cd3a:	681a      	ldr	r2, [r3, #0]
    best_ticks = BLE_HS_FOREVER;
    cd3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    conn_handle = BLE_HS_CONN_HANDLE_NONE;
    cd40:	f64f 74ff 	movw	r4, #65535	; 0xffff
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
    cd44:	e002      	b.n	cd4c <ble_gap_update_next_exp+0x1c>
            ticks = 0;
    cd46:	2300      	movs	r3, #0
    cd48:	e005      	b.n	cd56 <ble_gap_update_next_exp+0x26>
    SLIST_FOREACH(entry, &ble_gap_update_entries, next) {
    cd4a:	6812      	ldr	r2, [r2, #0]
    cd4c:	b142      	cbz	r2, cd60 <ble_gap_update_next_exp+0x30>
        ticks = entry->exp_os_ticks - now;
    cd4e:	6913      	ldr	r3, [r2, #16]
    cd50:	1a1b      	subs	r3, r3, r0
        if (ticks <= 0) {
    cd52:	2b00      	cmp	r3, #0
    cd54:	ddf7      	ble.n	cd46 <ble_gap_update_next_exp+0x16>
        if (ticks < best_ticks) {
    cd56:	4299      	cmp	r1, r3
    cd58:	ddf7      	ble.n	cd4a <ble_gap_update_next_exp+0x1a>
            conn_handle = entry->conn_handle;
    cd5a:	8a94      	ldrh	r4, [r2, #20]
            best_ticks = ticks;
    cd5c:	4619      	mov	r1, r3
    cd5e:	e7f4      	b.n	cd4a <ble_gap_update_next_exp+0x1a>
    if (out_ticks_from_now != NULL) {
    cd60:	b105      	cbz	r5, cd64 <ble_gap_update_next_exp+0x34>
        *out_ticks_from_now = best_ticks;
    cd62:	6029      	str	r1, [r5, #0]
}
    cd64:	4620      	mov	r0, r4
    cd66:	bd38      	pop	{r3, r4, r5, pc}
    cd68:	20007098 	.word	0x20007098

0000cd6c <ble_gap_update_timer>:
{
    cd6c:	b510      	push	{r4, lr}
    cd6e:	b082      	sub	sp, #8
    cd70:	e003      	b.n	cd7a <ble_gap_update_timer+0xe>
        ble_hs_unlock();
    cd72:	f002 fe9b 	bl	faac <ble_hs_unlock>
            entry = NULL;
    cd76:	2400      	movs	r4, #0
    } while (entry != NULL);
    cd78:	b194      	cbz	r4, cda0 <ble_gap_update_timer+0x34>
        ble_hs_lock();
    cd7a:	f002 fe93 	bl	faa4 <ble_hs_lock>
        conn_handle = ble_gap_update_next_exp(&ticks_until_exp);
    cd7e:	a801      	add	r0, sp, #4
    cd80:	f7ff ffd6 	bl	cd30 <ble_gap_update_next_exp>
        if (ticks_until_exp == 0) {
    cd84:	9b01      	ldr	r3, [sp, #4]
    cd86:	2b00      	cmp	r3, #0
    cd88:	d1f3      	bne.n	cd72 <ble_gap_update_timer+0x6>
            entry = ble_gap_update_entry_remove(conn_handle);
    cd8a:	f7ff fee1 	bl	cb50 <ble_gap_update_entry_remove>
    cd8e:	4604      	mov	r4, r0
        ble_hs_unlock();
    cd90:	f002 fe8c 	bl	faac <ble_hs_unlock>
        if (entry != NULL) {
    cd94:	2c00      	cmp	r4, #0
    cd96:	d0ef      	beq.n	cd78 <ble_gap_update_timer+0xc>
            ble_gap_update_entry_free(entry);
    cd98:	4620      	mov	r0, r4
    cd9a:	f7ff ffa3 	bl	cce4 <ble_gap_update_entry_free>
    cd9e:	e7eb      	b.n	cd78 <ble_gap_update_timer+0xc>
}
    cda0:	9801      	ldr	r0, [sp, #4]
    cda2:	b002      	add	sp, #8
    cda4:	bd10      	pop	{r4, pc}
	...

0000cda8 <ble_gap_slave_ticks_until_exp>:
    if (ble_gap_slave[0].op == BLE_GAP_OP_NULL || !ble_gap_slave[0].exp_set) {
    cda8:	4b0c      	ldr	r3, [pc, #48]	; (cddc <ble_gap_slave_ticks_until_exp+0x34>)
    cdaa:	7d1b      	ldrb	r3, [r3, #20]
    cdac:	b16b      	cbz	r3, cdca <ble_gap_slave_ticks_until_exp+0x22>
    cdae:	4b0b      	ldr	r3, [pc, #44]	; (cddc <ble_gap_slave_ticks_until_exp+0x34>)
    cdb0:	7d5b      	ldrb	r3, [r3, #21]
    cdb2:	f013 0f10 	tst.w	r3, #16
    cdb6:	d00b      	beq.n	cdd0 <ble_gap_slave_ticks_until_exp+0x28>
{
    cdb8:	b510      	push	{r4, lr}
    ticks = ble_gap_slave[0].exp_os_ticks - ble_npl_time_get();
    cdba:	4b08      	ldr	r3, [pc, #32]	; (cddc <ble_gap_slave_ticks_until_exp+0x34>)
    cdbc:	699c      	ldr	r4, [r3, #24]
    cdbe:	f7fe fb09 	bl	b3d4 <os_time_get>
    cdc2:	1a20      	subs	r0, r4, r0
    if (ticks > 0) {
    cdc4:	2800      	cmp	r0, #0
    cdc6:	dd06      	ble.n	cdd6 <ble_gap_slave_ticks_until_exp+0x2e>
}
    cdc8:	bd10      	pop	{r4, pc}
        return BLE_HS_FOREVER;
    cdca:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    cdce:	4770      	bx	lr
    cdd0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
    cdd4:	4770      	bx	lr
    return 0;
    cdd6:	2000      	movs	r0, #0
    cdd8:	e7f6      	b.n	cdc8 <ble_gap_slave_ticks_until_exp+0x20>
    cdda:	bf00      	nop
    cddc:	200004b8 	.word	0x200004b8

0000cde0 <ble_gap_slave_timer>:
{
    cde0:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_slave_ticks_until_exp();
    cde2:	f7ff ffe1 	bl	cda8 <ble_gap_slave_ticks_until_exp>
    if (ticks_until_exp != 0) {
    cde6:	b100      	cbz	r0, cdea <ble_gap_slave_timer+0xa>
}
    cde8:	bd08      	pop	{r3, pc}
    rc = ble_gap_adv_enable_tx(0);
    cdea:	2000      	movs	r0, #0
    cdec:	f7ff fe01 	bl	c9f2 <ble_gap_adv_enable_tx>
    if (rc != 0) {
    cdf0:	b108      	cbz	r0, cdf6 <ble_gap_slave_timer+0x16>
        return 100;
    cdf2:	2064      	movs	r0, #100	; 0x64
    cdf4:	e7f8      	b.n	cde8 <ble_gap_slave_timer+0x8>
    ble_gap_slave_reset_state(0);
    cdf6:	f7ff fec3 	bl	cb80 <ble_gap_slave_reset_state>
    ble_gap_adv_finished(0, BLE_HS_ETIMEOUT, 0, 0);
    cdfa:	2300      	movs	r3, #0
    cdfc:	461a      	mov	r2, r3
    cdfe:	210d      	movs	r1, #13
    ce00:	4618      	mov	r0, r3
    ce02:	f7ff fee3 	bl	cbcc <ble_gap_adv_finished>
    return BLE_HS_FOREVER;
    ce06:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ce0a:	e7ed      	b.n	cde8 <ble_gap_slave_timer+0x8>

0000ce0c <ble_gap_slave_set_timer>:
{
    ce0c:	b510      	push	{r4, lr}
    ce0e:	4604      	mov	r4, r0
    ce10:	f7fe fae0 	bl	b3d4 <os_time_get>
    ble_gap_slave[0].exp_os_ticks = ble_npl_time_get() + ticks_from_now;
    ce14:	4420      	add	r0, r4
    ce16:	4b04      	ldr	r3, [pc, #16]	; (ce28 <ble_gap_slave_set_timer+0x1c>)
    ce18:	6198      	str	r0, [r3, #24]
    ble_gap_slave[0].exp_set = 1;
    ce1a:	7d5a      	ldrb	r2, [r3, #21]
    ce1c:	f042 0210 	orr.w	r2, r2, #16
    ce20:	755a      	strb	r2, [r3, #21]
    ble_hs_timer_resched();
    ce22:	f002 ff1b 	bl	fc5c <ble_hs_timer_resched>
}
    ce26:	bd10      	pop	{r4, pc}
    ce28:	200004b8 	.word	0x200004b8

0000ce2c <ble_gap_master_timer>:
{
    ce2c:	b508      	push	{r3, lr}
    ticks_until_exp = ble_gap_master_ticks_until_exp();
    ce2e:	f7ff ff63 	bl	ccf8 <ble_gap_master_ticks_until_exp>
    if (ticks_until_exp != 0) {
    ce32:	b9e0      	cbnz	r0, ce6e <ble_gap_master_timer+0x42>
    switch (ble_gap_master.op) {
    ce34:	4b0f      	ldr	r3, [pc, #60]	; (ce74 <ble_gap_master_timer+0x48>)
    ce36:	781b      	ldrb	r3, [r3, #0]
    ce38:	2b01      	cmp	r3, #1
    ce3a:	d00c      	beq.n	ce56 <ble_gap_master_timer+0x2a>
    ce3c:	2b02      	cmp	r3, #2
    ce3e:	d114      	bne.n	ce6a <ble_gap_master_timer+0x3e>
        rc = ble_gap_conn_cancel_tx();
    ce40:	f7ff fdca 	bl	c9d8 <ble_gap_conn_cancel_tx>
        if (rc != 0) {
    ce44:	b9a0      	cbnz	r0, ce70 <ble_gap_master_timer+0x44>
            ble_gap_master.exp_set = 0;
    ce46:	4b0b      	ldr	r3, [pc, #44]	; (ce74 <ble_gap_master_timer+0x48>)
    ce48:	785a      	ldrb	r2, [r3, #1]
    ce4a:	f36f 0200 	bfc	r2, #0, #1
    ce4e:	705a      	strb	r2, [r3, #1]
    return BLE_HS_FOREVER;
    ce50:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
        break;
    ce54:	e00b      	b.n	ce6e <ble_gap_master_timer+0x42>
        assert(0);
    ce56:	f7fb f9b3 	bl	81c0 <hal_debugger_connected>
    ce5a:	b100      	cbz	r0, ce5e <ble_gap_master_timer+0x32>
    ce5c:	be01      	bkpt	0x0001
    ce5e:	2300      	movs	r3, #0
    ce60:	461a      	mov	r2, r3
    ce62:	4619      	mov	r1, r3
    ce64:	4618      	mov	r0, r3
    ce66:	f7fc fd41 	bl	98ec <__assert_func>
    return BLE_HS_FOREVER;
    ce6a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
    ce6e:	bd08      	pop	{r3, pc}
            return ble_npl_time_ms_to_ticks32(BLE_GAP_CANCEL_RETRY_TIMEOUT_MS);
    ce70:	200c      	movs	r0, #12
    ce72:	e7fc      	b.n	ce6e <ble_gap_master_timer+0x42>
    ce74:	200004b8 	.word	0x200004b8

0000ce78 <ble_gap_adv_validate>:
    if (adv_params == NULL) {
    ce78:	b37a      	cbz	r2, ceda <ble_gap_adv_validate+0x62>
{
    ce7a:	b508      	push	{r3, lr}
    ce7c:	4613      	mov	r3, r2
    if (own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
    ce7e:	2803      	cmp	r0, #3
    ce80:	d82d      	bhi.n	cede <ble_gap_adv_validate+0x66>
    if (adv_params->disc_mode >= BLE_GAP_DISC_MODE_MAX) {
    ce82:	7852      	ldrb	r2, [r2, #1]
    ce84:	2a02      	cmp	r2, #2
    ce86:	d82c      	bhi.n	cee2 <ble_gap_adv_validate+0x6a>
    if (ble_gap_slave[0].op != BLE_GAP_OP_NULL) {
    ce88:	4a1b      	ldr	r2, [pc, #108]	; (cef8 <ble_gap_adv_validate+0x80>)
    ce8a:	7d12      	ldrb	r2, [r2, #20]
    ce8c:	bb5a      	cbnz	r2, cee6 <ble_gap_adv_validate+0x6e>
    switch (adv_params->conn_mode) {
    ce8e:	781a      	ldrb	r2, [r3, #0]
    ce90:	2a01      	cmp	r2, #1
    ce92:	d017      	beq.n	cec4 <ble_gap_adv_validate+0x4c>
    ce94:	b11a      	cbz	r2, ce9e <ble_gap_adv_validate+0x26>
    ce96:	2a02      	cmp	r2, #2
    ce98:	d009      	beq.n	ceae <ble_gap_adv_validate+0x36>
        return BLE_HS_EINVAL;
    ce9a:	2003      	movs	r0, #3
    ce9c:	e020      	b.n	cee0 <ble_gap_adv_validate+0x68>
        if (adv_params->high_duty_cycle) {
    ce9e:	7a1b      	ldrb	r3, [r3, #8]
    cea0:	f013 0f01 	tst.w	r3, #1
    cea4:	d101      	bne.n	ceaa <ble_gap_adv_validate+0x32>
    return 0;
    cea6:	2000      	movs	r0, #0
    cea8:	e01a      	b.n	cee0 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
    ceaa:	2003      	movs	r0, #3
    ceac:	e018      	b.n	cee0 <ble_gap_adv_validate+0x68>
        if (adv_params->high_duty_cycle) {
    ceae:	7a1b      	ldrb	r3, [r3, #8]
    ceb0:	f013 0f01 	tst.w	r3, #1
    ceb4:	d119      	bne.n	ceea <ble_gap_adv_validate+0x72>
        if (!ble_hs_conn_can_alloc()) {
    ceb6:	f003 fb3d 	bl	10534 <ble_hs_conn_can_alloc>
    ceba:	b108      	cbz	r0, cec0 <ble_gap_adv_validate+0x48>
    return 0;
    cebc:	2000      	movs	r0, #0
    cebe:	e00f      	b.n	cee0 <ble_gap_adv_validate+0x68>
            return BLE_HS_ENOMEM;
    cec0:	2006      	movs	r0, #6
    cec2:	e00d      	b.n	cee0 <ble_gap_adv_validate+0x68>
        if (peer_addr == NULL) {
    cec4:	b199      	cbz	r1, ceee <ble_gap_adv_validate+0x76>
        if (peer_addr->type != BLE_ADDR_PUBLIC &&
    cec6:	780b      	ldrb	r3, [r1, #0]
    cec8:	2b03      	cmp	r3, #3
    ceca:	d812      	bhi.n	cef2 <ble_gap_adv_validate+0x7a>
        if (!ble_hs_conn_can_alloc()) {
    cecc:	f003 fb32 	bl	10534 <ble_hs_conn_can_alloc>
    ced0:	b108      	cbz	r0, ced6 <ble_gap_adv_validate+0x5e>
    return 0;
    ced2:	2000      	movs	r0, #0
    ced4:	e004      	b.n	cee0 <ble_gap_adv_validate+0x68>
            return BLE_HS_ENOMEM;
    ced6:	2006      	movs	r0, #6
    ced8:	e002      	b.n	cee0 <ble_gap_adv_validate+0x68>
        return BLE_HS_EINVAL;
    ceda:	2003      	movs	r0, #3
}
    cedc:	4770      	bx	lr
        return BLE_HS_EINVAL;
    cede:	2003      	movs	r0, #3
}
    cee0:	bd08      	pop	{r3, pc}
        return BLE_HS_EINVAL;
    cee2:	2003      	movs	r0, #3
    cee4:	e7fc      	b.n	cee0 <ble_gap_adv_validate+0x68>
        return BLE_HS_EALREADY;
    cee6:	2002      	movs	r0, #2
    cee8:	e7fa      	b.n	cee0 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
    ceea:	2003      	movs	r0, #3
    ceec:	e7f8      	b.n	cee0 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
    ceee:	2003      	movs	r0, #3
    cef0:	e7f6      	b.n	cee0 <ble_gap_adv_validate+0x68>
            return BLE_HS_EINVAL;
    cef2:	2003      	movs	r0, #3
    cef4:	e7f4      	b.n	cee0 <ble_gap_adv_validate+0x68>
    cef6:	bf00      	nop
    cef8:	200004b8 	.word	0x200004b8

0000cefc <ble_gap_update_entry_alloc>:
{
    cefc:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_gap_update_entry_pool);
    cefe:	4807      	ldr	r0, [pc, #28]	; (cf1c <ble_gap_update_entry_alloc+0x20>)
    cf00:	f7fd fdbd 	bl	aa7e <os_memblock_get>
    if (entry != NULL) {
    cf04:	4603      	mov	r3, r0
    cf06:	b130      	cbz	r0, cf16 <ble_gap_update_entry_alloc+0x1a>
        memset(entry, 0, sizeof *entry);
    cf08:	2200      	movs	r2, #0
    cf0a:	6002      	str	r2, [r0, #0]
    cf0c:	6042      	str	r2, [r0, #4]
    cf0e:	6082      	str	r2, [r0, #8]
    cf10:	60c2      	str	r2, [r0, #12]
    cf12:	6102      	str	r2, [r0, #16]
    cf14:	6142      	str	r2, [r0, #20]
}
    cf16:	4618      	mov	r0, r3
    cf18:	bd08      	pop	{r3, pc}
    cf1a:	bf00      	nop
    cf1c:	200070b4 	.word	0x200070b4

0000cf20 <ble_gap_conn_find>:
{
    cf20:	b538      	push	{r3, r4, r5, lr}
    cf22:	4604      	mov	r4, r0
    cf24:	460d      	mov	r5, r1
    ble_hs_lock();
    cf26:	f002 fdbd 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(handle);
    cf2a:	4620      	mov	r0, r4
    cf2c:	f003 fbc4 	bl	106b8 <ble_hs_conn_find>
    if (conn != NULL && out_desc != NULL) {
    cf30:	4604      	mov	r4, r0
    cf32:	b118      	cbz	r0, cf3c <ble_gap_conn_find+0x1c>
    cf34:	b115      	cbz	r5, cf3c <ble_gap_conn_find+0x1c>
        ble_gap_fill_conn_desc(conn, out_desc);
    cf36:	4629      	mov	r1, r5
    cf38:	f7ff fcd6 	bl	c8e8 <ble_gap_fill_conn_desc>
    ble_hs_unlock();
    cf3c:	f002 fdb6 	bl	faac <ble_hs_unlock>
    if (conn == NULL) {
    cf40:	b10c      	cbz	r4, cf46 <ble_gap_conn_find+0x26>
        return 0;
    cf42:	2000      	movs	r0, #0
}
    cf44:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOTCONN;
    cf46:	2007      	movs	r0, #7
    cf48:	e7fc      	b.n	cf44 <ble_gap_conn_find+0x24>
	...

0000cf4c <ble_gap_master_in_progress>:
    return ble_gap_master.op != BLE_GAP_OP_NULL;
    cf4c:	4b02      	ldr	r3, [pc, #8]	; (cf58 <ble_gap_master_in_progress+0xc>)
    cf4e:	7818      	ldrb	r0, [r3, #0]
}
    cf50:	3000      	adds	r0, #0
    cf52:	bf18      	it	ne
    cf54:	2001      	movne	r0, #1
    cf56:	4770      	bx	lr
    cf58:	200004b8 	.word	0x200004b8

0000cf5c <ble_gap_rx_adv_report>:
}
    cf5c:	4770      	bx	lr

0000cf5e <ble_gap_rx_rd_rem_sup_feat_complete>:
{
    cf5e:	b538      	push	{r3, r4, r5, lr}
    cf60:	4604      	mov	r4, r0
    ble_hs_lock();
    cf62:	f002 fd9f 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
    cf66:	8860      	ldrh	r0, [r4, #2]
    cf68:	f003 fba6 	bl	106b8 <ble_hs_conn_find>
    if ((conn != NULL) && (ev->status == 0)) {
    cf6c:	b110      	cbz	r0, cf74 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>
    cf6e:	4605      	mov	r5, r0
    cf70:	7863      	ldrb	r3, [r4, #1]
    cf72:	b113      	cbz	r3, cf7a <ble_gap_rx_rd_rem_sup_feat_complete+0x1c>
    ble_hs_unlock();
    cf74:	f002 fd9a 	bl	faac <ble_hs_unlock>
}
    cf78:	bd38      	pop	{r3, r4, r5, pc}
        conn->supported_feat = get_le32(ev->features);
    cf7a:	1d20      	adds	r0, r4, #4
    cf7c:	f00e fe56 	bl	1bc2c <get_le32>
    cf80:	6268      	str	r0, [r5, #36]	; 0x24
    cf82:	e7f7      	b.n	cf74 <ble_gap_rx_rd_rem_sup_feat_complete+0x16>

0000cf84 <ble_gap_rx_l2cap_update_req>:
{
    cf84:	b530      	push	{r4, r5, lr}
    cf86:	b08f      	sub	sp, #60	; 0x3c
    cf88:	4604      	mov	r4, r0
    cf8a:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
    cf8c:	2234      	movs	r2, #52	; 0x34
    cf8e:	2100      	movs	r1, #0
    cf90:	a801      	add	r0, sp, #4
    cf92:	f7fe fc34 	bl	b7fe <memset>
    event.type = BLE_GAP_EVENT_L2CAP_UPDATE_REQ;
    cf96:	2305      	movs	r3, #5
    cf98:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
    cf9c:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.conn_update_req.peer_params = params;
    cfa0:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
    cfa2:	4621      	mov	r1, r4
    cfa4:	a801      	add	r0, sp, #4
    cfa6:	f7ff fc8b 	bl	c8c0 <ble_gap_call_conn_event_cb>
}
    cfaa:	b00f      	add	sp, #60	; 0x3c
    cfac:	bd30      	pop	{r4, r5, pc}

0000cfae <ble_gap_rx_phy_update_complete>:
{
    cfae:	b570      	push	{r4, r5, r6, lr}
    cfb0:	b08e      	sub	sp, #56	; 0x38
    cfb2:	4604      	mov	r4, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
    cfb4:	8845      	ldrh	r5, [r0, #2]
    cfb6:	b2ae      	uxth	r6, r5
    memset(&event, 0, sizeof event);
    cfb8:	2234      	movs	r2, #52	; 0x34
    cfba:	2100      	movs	r1, #0
    cfbc:	a801      	add	r0, sp, #4
    cfbe:	f7fe fc1e 	bl	b7fe <memset>
    event.type = BLE_GAP_EVENT_PHY_UPDATE_COMPLETE;
    cfc2:	2312      	movs	r3, #18
    cfc4:	f88d 3004 	strb.w	r3, [sp, #4]
    event.phy_updated.status = ev->status;
    cfc8:	7863      	ldrb	r3, [r4, #1]
    cfca:	9302      	str	r3, [sp, #8]
    event.phy_updated.conn_handle = conn_handle;
    cfcc:	f8ad 500c 	strh.w	r5, [sp, #12]
    event.phy_updated.tx_phy = ev->tx_phy;
    cfd0:	7923      	ldrb	r3, [r4, #4]
    cfd2:	f88d 300e 	strb.w	r3, [sp, #14]
    event.phy_updated.rx_phy = ev->rx_phy;
    cfd6:	7963      	ldrb	r3, [r4, #5]
    cfd8:	f88d 300f 	strb.w	r3, [sp, #15]
    ble_gap_event_listener_call(&event);
    cfdc:	a801      	add	r0, sp, #4
    cfde:	f7ff fc45 	bl	c86c <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
    cfe2:	4631      	mov	r1, r6
    cfe4:	a801      	add	r0, sp, #4
    cfe6:	f7ff fc6b 	bl	c8c0 <ble_gap_call_conn_event_cb>
}
    cfea:	b00e      	add	sp, #56	; 0x38
    cfec:	bd70      	pop	{r4, r5, r6, pc}

0000cfee <ble_gap_timer>:
{
    cfee:	b510      	push	{r4, lr}
    master_ticks = ble_gap_master_timer();
    cff0:	f7ff ff1c 	bl	ce2c <ble_gap_master_timer>
    cff4:	4604      	mov	r4, r0
    update_ticks = ble_gap_update_timer();
    cff6:	f7ff feb9 	bl	cd6c <ble_gap_update_timer>
    min_ticks = min(master_ticks, update_ticks);
    cffa:	4284      	cmp	r4, r0
    cffc:	bfa8      	it	ge
    cffe:	4604      	movge	r4, r0
    min_ticks = min(min_ticks, ble_gap_slave_timer());
    d000:	f7ff feee 	bl	cde0 <ble_gap_slave_timer>
    d004:	42a0      	cmp	r0, r4
    d006:	dd01      	ble.n	d00c <ble_gap_timer+0x1e>
}
    d008:	4620      	mov	r0, r4
    d00a:	bd10      	pop	{r4, pc}
    min_ticks = min(min_ticks, ble_gap_slave_timer());
    d00c:	f7ff fee8 	bl	cde0 <ble_gap_slave_timer>
    d010:	4604      	mov	r4, r0
    return min_ticks;
    d012:	e7f9      	b.n	d008 <ble_gap_timer+0x1a>

0000d014 <ble_gap_adv_start>:
{
    d014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d018:	b082      	sub	sp, #8
    d01a:	4605      	mov	r5, r0
    d01c:	460f      	mov	r7, r1
    d01e:	4690      	mov	r8, r2
    d020:	461e      	mov	r6, r3
    ble_hs_lock();
    d022:	f002 fd3f 	bl	faa4 <ble_hs_lock>
    rc = ble_gap_adv_validate(own_addr_type, direct_addr, adv_params);
    d026:	4632      	mov	r2, r6
    d028:	4639      	mov	r1, r7
    d02a:	4628      	mov	r0, r5
    d02c:	f7ff ff24 	bl	ce78 <ble_gap_adv_validate>
    if (rc != 0) {
    d030:	4604      	mov	r4, r0
    d032:	2800      	cmp	r0, #0
    d034:	d14d      	bne.n	d0d2 <ble_gap_adv_start+0xbe>
    if (duration_ms != BLE_HS_FOREVER) {
    d036:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    d03a:	4598      	cmp	r8, r3
    d03c:	d006      	beq.n	d04c <ble_gap_adv_start+0x38>
}

static inline ble_npl_error_t
ble_npl_time_ms_to_ticks(uint32_t ms, ble_npl_time_t *out_ticks)
{
    return (ble_npl_error_t)os_time_ms_to_ticks(ms, out_ticks);
    d03e:	a901      	add	r1, sp, #4
    d040:	4640      	mov	r0, r8
    d042:	f7fe fa21 	bl	b488 <os_time_ms_to_ticks>
        if (rc != 0) {
    d046:	b2c0      	uxtb	r0, r0
    d048:	2800      	cmp	r0, #0
    d04a:	d13d      	bne.n	d0c8 <ble_gap_adv_start+0xb4>
    if (!ble_hs_is_enabled()) {
    d04c:	f002 fd62 	bl	fb14 <ble_hs_is_enabled>
    d050:	2800      	cmp	r0, #0
    d052:	d03b      	beq.n	d0cc <ble_gap_adv_start+0xb8>
    if (ble_gap_is_preempted()) {
    d054:	f7ff fb4e 	bl	c6f4 <ble_gap_is_preempted>
    d058:	2800      	cmp	r0, #0
    d05a:	d139      	bne.n	d0d0 <ble_gap_adv_start+0xbc>
    rc = ble_hs_id_use_addr(own_addr_type);
    d05c:	4628      	mov	r0, r5
    d05e:	f004 fa15 	bl	1148c <ble_hs_id_use_addr>
    if (rc != 0) {
    d062:	4604      	mov	r4, r0
    d064:	2800      	cmp	r0, #0
    d066:	d134      	bne.n	d0d2 <ble_gap_adv_start+0xbe>
    ble_gap_slave[0].cb = cb;
    d068:	4b1d      	ldr	r3, [pc, #116]	; (d0e0 <ble_gap_adv_start+0xcc>)
    d06a:	9a08      	ldr	r2, [sp, #32]
    d06c:	61da      	str	r2, [r3, #28]
    ble_gap_slave[0].cb_arg = cb_arg;
    d06e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d070:	621a      	str	r2, [r3, #32]
    ble_gap_slave[0].our_addr_type = own_addr_type;
    d072:	7d5a      	ldrb	r2, [r3, #21]
    d074:	f365 0201 	bfi	r2, r5, #0, #2
    d078:	755a      	strb	r2, [r3, #21]
    if (adv_params->conn_mode != BLE_GAP_CONN_MODE_NON) {
    d07a:	7833      	ldrb	r3, [r6, #0]
    d07c:	b1d3      	cbz	r3, d0b4 <ble_gap_adv_start+0xa0>
        ble_gap_slave[0].connectable = 1;
    d07e:	4a18      	ldr	r2, [pc, #96]	; (d0e0 <ble_gap_adv_start+0xcc>)
    d080:	7d53      	ldrb	r3, [r2, #21]
    d082:	f043 0308 	orr.w	r3, r3, #8
    d086:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_adv_params_tx(own_addr_type, direct_addr, adv_params);
    d088:	4632      	mov	r2, r6
    d08a:	4639      	mov	r1, r7
    d08c:	4628      	mov	r0, r5
    d08e:	f7ff fcc2 	bl	ca16 <ble_gap_adv_params_tx>
    if (rc != 0) {
    d092:	4604      	mov	r4, r0
    d094:	b9e8      	cbnz	r0, d0d2 <ble_gap_adv_start+0xbe>
    ble_gap_slave[0].op = BLE_GAP_OP_S_ADV;
    d096:	2001      	movs	r0, #1
    d098:	4b11      	ldr	r3, [pc, #68]	; (d0e0 <ble_gap_adv_start+0xcc>)
    d09a:	7518      	strb	r0, [r3, #20]
    rc = ble_gap_adv_enable_tx(1);
    d09c:	f7ff fca9 	bl	c9f2 <ble_gap_adv_enable_tx>
    if (rc != 0) {
    d0a0:	4604      	mov	r4, r0
    d0a2:	b968      	cbnz	r0, d0c0 <ble_gap_adv_start+0xac>
    if (duration_ms != BLE_HS_FOREVER) {
    d0a4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    d0a8:	4598      	cmp	r8, r3
    d0aa:	d012      	beq.n	d0d2 <ble_gap_adv_start+0xbe>
        ble_gap_slave_set_timer(duration_ticks);
    d0ac:	9801      	ldr	r0, [sp, #4]
    d0ae:	f7ff fead 	bl	ce0c <ble_gap_slave_set_timer>
    d0b2:	e00e      	b.n	d0d2 <ble_gap_adv_start+0xbe>
        ble_gap_slave[0].connectable = 0;
    d0b4:	4b0a      	ldr	r3, [pc, #40]	; (d0e0 <ble_gap_adv_start+0xcc>)
    d0b6:	7d5a      	ldrb	r2, [r3, #21]
    d0b8:	f36f 02c3 	bfc	r2, #3, #1
    d0bc:	755a      	strb	r2, [r3, #21]
    d0be:	e7e3      	b.n	d088 <ble_gap_adv_start+0x74>
        ble_gap_slave_reset_state(0);
    d0c0:	2000      	movs	r0, #0
    d0c2:	f7ff fd5d 	bl	cb80 <ble_gap_slave_reset_state>
        goto done;
    d0c6:	e004      	b.n	d0d2 <ble_gap_adv_start+0xbe>
            rc = BLE_HS_EINVAL;
    d0c8:	2403      	movs	r4, #3
    d0ca:	e002      	b.n	d0d2 <ble_gap_adv_start+0xbe>
        rc = BLE_HS_EDISABLED;
    d0cc:	241e      	movs	r4, #30
    d0ce:	e000      	b.n	d0d2 <ble_gap_adv_start+0xbe>
        rc = BLE_HS_EPREEMPTED;
    d0d0:	241d      	movs	r4, #29
    ble_hs_unlock();
    d0d2:	f002 fceb 	bl	faac <ble_hs_unlock>
}
    d0d6:	4620      	mov	r0, r4
    d0d8:	b002      	add	sp, #8
    d0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d0de:	bf00      	nop
    d0e0:	200004b8 	.word	0x200004b8

0000d0e4 <ble_gap_adv_set_data>:
    if (((data == NULL) && (data_len != 0)) ||
    d0e4:	4603      	mov	r3, r0
    d0e6:	b1b0      	cbz	r0, d116 <ble_gap_adv_set_data+0x32>
    d0e8:	291f      	cmp	r1, #31
    d0ea:	dc18      	bgt.n	d11e <ble_gap_adv_set_data+0x3a>
{
    d0ec:	b510      	push	{r4, lr}
    d0ee:	b08a      	sub	sp, #40	; 0x28
    d0f0:	460c      	mov	r4, r1
    memcpy(cmd.adv_data, data, data_len);
    d0f2:	460a      	mov	r2, r1
    d0f4:	4619      	mov	r1, r3
    d0f6:	f10d 0009 	add.w	r0, sp, #9
    d0fa:	f7fe fb57 	bl	b7ac <memcpy>
    cmd.adv_data_len = data_len;
    d0fe:	f88d 4008 	strb.w	r4, [sp, #8]
    return ble_hs_hci_cmd_tx(opcode, &cmd, sizeof(cmd), NULL, 0);
    d102:	2300      	movs	r3, #0
    d104:	9300      	str	r3, [sp, #0]
    d106:	2220      	movs	r2, #32
    d108:	a902      	add	r1, sp, #8
    d10a:	f242 0008 	movw	r0, #8200	; 0x2008
    d10e:	f003 fd1f 	bl	10b50 <ble_hs_hci_cmd_tx>
}
    d112:	b00a      	add	sp, #40	; 0x28
    d114:	bd10      	pop	{r4, pc}
    if (((data == NULL) && (data_len != 0)) ||
    d116:	2900      	cmp	r1, #0
    d118:	d0e6      	beq.n	d0e8 <ble_gap_adv_set_data+0x4>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    d11a:	2012      	movs	r0, #18
    d11c:	4770      	bx	lr
    d11e:	2012      	movs	r0, #18
}
    d120:	4770      	bx	lr

0000d122 <ble_gap_adv_set_fields>:
{
    d122:	b500      	push	{lr}
    d124:	b08b      	sub	sp, #44	; 0x2c
    rc = ble_hs_adv_set_fields(adv_fields, buf, &buf_sz, sizeof buf);
    d126:	231f      	movs	r3, #31
    d128:	f10d 0207 	add.w	r2, sp, #7
    d12c:	a902      	add	r1, sp, #8
    d12e:	f003 f9c0 	bl	104b2 <ble_hs_adv_set_fields>
    if (rc != 0) {
    d132:	4603      	mov	r3, r0
    d134:	b118      	cbz	r0, d13e <ble_gap_adv_set_fields+0x1c>
}
    d136:	4618      	mov	r0, r3
    d138:	b00b      	add	sp, #44	; 0x2c
    d13a:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_gap_adv_set_data(buf, buf_sz);
    d13e:	f89d 1007 	ldrb.w	r1, [sp, #7]
    d142:	a802      	add	r0, sp, #8
    d144:	f7ff ffce 	bl	d0e4 <ble_gap_adv_set_data>
    d148:	4603      	mov	r3, r0
    d14a:	e7f4      	b.n	d136 <ble_gap_adv_set_fields+0x14>

0000d14c <ble_gap_adv_active>:
{
    d14c:	b508      	push	{r3, lr}
    return ble_gap_adv_active_instance(0);
    d14e:	2000      	movs	r0, #0
    d150:	f7ff faf8 	bl	c744 <ble_gap_adv_active_instance>
}
    d154:	bd08      	pop	{r3, pc}
	...

0000d158 <ble_gap_rx_conn_complete>:
{
    d158:	b5f0      	push	{r4, r5, r6, r7, lr}
    d15a:	b091      	sub	sp, #68	; 0x44
    if (evt->status != BLE_ERR_SUCCESS) {
    d15c:	7803      	ldrb	r3, [r0, #0]
    d15e:	b373      	cbz	r3, d1be <ble_gap_rx_conn_complete+0x66>
        switch (evt->status) {
    d160:	2b02      	cmp	r3, #2
    d162:	d010      	beq.n	d186 <ble_gap_rx_conn_complete+0x2e>
    d164:	2b3c      	cmp	r3, #60	; 0x3c
    d166:	d120      	bne.n	d1aa <ble_gap_rx_conn_complete+0x52>
            if (ble_gap_adv_active()) {
    d168:	f7ff fff0 	bl	d14c <ble_gap_adv_active>
    d16c:	4605      	mov	r5, r0
    d16e:	b910      	cbnz	r0, d176 <ble_gap_rx_conn_complete+0x1e>
}
    d170:	4628      	mov	r0, r5
    d172:	b011      	add	sp, #68	; 0x44
    d174:	bdf0      	pop	{r4, r5, r6, r7, pc}
                ble_gap_adv_finished(0, 0, 0, 0);
    d176:	2300      	movs	r3, #0
    d178:	461a      	mov	r2, r3
    d17a:	4619      	mov	r1, r3
    d17c:	4618      	mov	r0, r3
    d17e:	f7ff fd25 	bl	cbcc <ble_gap_adv_finished>
        return 0;
    d182:	2500      	movs	r5, #0
    d184:	e7f4      	b.n	d170 <ble_gap_rx_conn_complete+0x18>
            if (ble_gap_master_in_progress()) {
    d186:	f7ff fee1 	bl	cf4c <ble_gap_master_in_progress>
    d18a:	4605      	mov	r5, r0
    d18c:	2800      	cmp	r0, #0
    d18e:	d0ef      	beq.n	d170 <ble_gap_rx_conn_complete+0x18>
                if (ble_gap_master.preempted_op == BLE_GAP_OP_M_CONN) {
    d190:	4b5c      	ldr	r3, [pc, #368]	; (d304 <ble_gap_rx_conn_complete+0x1ac>)
    d192:	7c1b      	ldrb	r3, [r3, #16]
    d194:	2b02      	cmp	r3, #2
    d196:	d003      	beq.n	d1a0 <ble_gap_rx_conn_complete+0x48>
                    ble_gap_master_connect_cancelled();
    d198:	f7ff fd84 	bl	cca4 <ble_gap_master_connect_cancelled>
        return 0;
    d19c:	2500      	movs	r5, #0
    d19e:	e7e7      	b.n	d170 <ble_gap_rx_conn_complete+0x18>
                    ble_gap_master_failed(BLE_HS_EPREEMPTED);
    d1a0:	201d      	movs	r0, #29
    d1a2:	f7ff fd73 	bl	cc8c <ble_gap_master_failed>
        return 0;
    d1a6:	2500      	movs	r5, #0
    d1a8:	e7e2      	b.n	d170 <ble_gap_rx_conn_complete+0x18>
            assert(0);
    d1aa:	f7fb f809 	bl	81c0 <hal_debugger_connected>
    d1ae:	b100      	cbz	r0, d1b2 <ble_gap_rx_conn_complete+0x5a>
    d1b0:	be01      	bkpt	0x0001
    d1b2:	2300      	movs	r3, #0
    d1b4:	461a      	mov	r2, r3
    d1b6:	4619      	mov	r1, r3
    d1b8:	4618      	mov	r0, r3
    d1ba:	f7fc fb97 	bl	98ec <__assert_func>
    d1be:	4604      	mov	r4, r0
    d1c0:	460e      	mov	r6, r1
    if (ble_hs_atomic_conn_flags(evt->connection_handle, NULL) == 0) {
    d1c2:	2100      	movs	r1, #0
    d1c4:	8840      	ldrh	r0, [r0, #2]
    d1c6:	f003 f991 	bl	104ec <ble_hs_atomic_conn_flags>
    d1ca:	4605      	mov	r5, r0
    d1cc:	2800      	cmp	r0, #0
    d1ce:	d0cf      	beq.n	d170 <ble_gap_rx_conn_complete+0x18>
    switch (evt->role) {
    d1d0:	7923      	ldrb	r3, [r4, #4]
    d1d2:	2b00      	cmp	r3, #0
    d1d4:	d062      	beq.n	d29c <ble_gap_rx_conn_complete+0x144>
    d1d6:	2b01      	cmp	r3, #1
    d1d8:	d066      	beq.n	d2a8 <ble_gap_rx_conn_complete+0x150>
    conn = ble_hs_conn_alloc(evt->connection_handle);
    d1da:	8860      	ldrh	r0, [r4, #2]
    d1dc:	f003 fa22 	bl	10624 <ble_hs_conn_alloc>
    d1e0:	4605      	mov	r5, r0
    conn->bhc_itvl = evt->conn_itvl;
    d1e2:	89a3      	ldrh	r3, [r4, #12]
    d1e4:	8383      	strh	r3, [r0, #28]
    conn->bhc_latency = evt->conn_latency;
    d1e6:	89e3      	ldrh	r3, [r4, #14]
    d1e8:	83c3      	strh	r3, [r0, #30]
    conn->bhc_supervision_timeout = evt->supervision_timeout;
    d1ea:	8a23      	ldrh	r3, [r4, #16]
    d1ec:	8403      	strh	r3, [r0, #32]
    conn->bhc_master_clock_accuracy = evt->master_clk_acc;
    d1ee:	7ca3      	ldrb	r3, [r4, #18]
    d1f0:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    if (evt->role == BLE_HCI_LE_CONN_COMPLETE_ROLE_MASTER) {
    d1f4:	7923      	ldrb	r3, [r4, #4]
    d1f6:	2b00      	cmp	r3, #0
    d1f8:	d15d      	bne.n	d2b6 <ble_gap_rx_conn_complete+0x15e>
        conn->bhc_cb = ble_gap_master.cb;
    d1fa:	4b42      	ldr	r3, [pc, #264]	; (d304 <ble_gap_rx_conn_complete+0x1ac>)
    d1fc:	689a      	ldr	r2, [r3, #8]
    d1fe:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_master.cb_arg;
    d200:	68da      	ldr	r2, [r3, #12]
    d202:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_flags |= BLE_HS_CONN_F_MASTER;
    d204:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
    d208:	f042 0201 	orr.w	r2, r2, #1
    d20c:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
        conn->bhc_our_addr_type = ble_gap_master.conn.our_addr_type;
    d210:	7c5b      	ldrb	r3, [r3, #17]
    d212:	f3c3 0341 	ubfx	r3, r3, #1, #2
    d216:	7183      	strb	r3, [r0, #6]
        ble_gap_master_reset_state();
    d218:	f7ff fcf4 	bl	cc04 <ble_gap_master_reset_state>
    conn->bhc_peer_addr.type = evt->peer_addr_type;
    d21c:	7966      	ldrb	r6, [r4, #5]
    d21e:	71ee      	strb	r6, [r5, #7]
    memcpy(conn->bhc_peer_addr.val, evt->peer_addr, 6);
    d220:	4623      	mov	r3, r4
    d222:	f853 2f06 	ldr.w	r2, [r3, #6]!
    d226:	60aa      	str	r2, [r5, #8]
    d228:	889b      	ldrh	r3, [r3, #4]
    d22a:	81ab      	strh	r3, [r5, #12]
    conn->bhc_our_rpa_addr.type = BLE_ADDR_RANDOM;
    d22c:	2301      	movs	r3, #1
    d22e:	73ab      	strb	r3, [r5, #14]
    memcpy(conn->bhc_our_rpa_addr.val, evt->local_rpa, 6);
    d230:	4623      	mov	r3, r4
    d232:	f853 2f13 	ldr.w	r2, [r3, #19]!
    d236:	f8c5 200f 	str.w	r2, [r5, #15]
    d23a:	889b      	ldrh	r3, [r3, #4]
    d23c:	f8a5 3013 	strh.w	r3, [r5, #19]
    if (memcmp(BLE_ADDR_ANY->val, evt->peer_rpa, 6) == 0) {
    d240:	2300      	movs	r3, #0
    d242:	930e      	str	r3, [sp, #56]	; 0x38
    d244:	f8cd 303b 	str.w	r3, [sp, #59]	; 0x3b
    d248:	f104 0719 	add.w	r7, r4, #25
    d24c:	2206      	movs	r2, #6
    d24e:	4639      	mov	r1, r7
    d250:	f10d 0039 	add.w	r0, sp, #57	; 0x39
    d254:	f7fe fa86 	bl	b764 <memcmp>
    d258:	2800      	cmp	r0, #0
    d25a:	d14b      	bne.n	d2f4 <ble_gap_rx_conn_complete+0x19c>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
    d25c:	2e01      	cmp	r6, #1
    d25e:	d039      	beq.n	d2d4 <ble_gap_rx_conn_complete+0x17c>
    ble_hs_lock();
    d260:	f002 fc20 	bl	faa4 <ble_hs_lock>
    memset(&event, 0, sizeof event);
    d264:	2234      	movs	r2, #52	; 0x34
    d266:	2100      	movs	r1, #0
    d268:	a801      	add	r0, sp, #4
    d26a:	f7fe fac8 	bl	b7fe <memset>
    ble_hs_conn_insert(conn);
    d26e:	4628      	mov	r0, r5
    d270:	f003 fa2e 	bl	106d0 <ble_hs_conn_insert>
    ble_hs_unlock();
    d274:	f002 fc1a 	bl	faac <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_CONNECT;
    d278:	2500      	movs	r5, #0
    d27a:	f88d 5004 	strb.w	r5, [sp, #4]
    event.connect.conn_handle = evt->connection_handle;
    d27e:	8863      	ldrh	r3, [r4, #2]
    d280:	f8ad 300c 	strh.w	r3, [sp, #12]
    event.connect.status = 0;
    d284:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
    d286:	a801      	add	r0, sp, #4
    d288:	f7ff faf0 	bl	c86c <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, evt->connection_handle);
    d28c:	8861      	ldrh	r1, [r4, #2]
    d28e:	a801      	add	r0, sp, #4
    d290:	f7ff fb16 	bl	c8c0 <ble_gap_call_conn_event_cb>
    ble_gap_rd_rem_sup_feat_tx(evt->connection_handle);
    d294:	8860      	ldrh	r0, [r4, #2]
    d296:	f7ff fb90 	bl	c9ba <ble_gap_rd_rem_sup_feat_tx>
    return 0;
    d29a:	e769      	b.n	d170 <ble_gap_rx_conn_complete+0x18>
        rc = ble_gap_accept_master_conn();
    d29c:	f7ff fa5e 	bl	c75c <ble_gap_accept_master_conn>
        if (rc != 0) {
    d2a0:	4605      	mov	r5, r0
    d2a2:	2800      	cmp	r0, #0
    d2a4:	d099      	beq.n	d1da <ble_gap_rx_conn_complete+0x82>
    d2a6:	e763      	b.n	d170 <ble_gap_rx_conn_complete+0x18>
        rc = ble_gap_accept_slave_conn(instance);
    d2a8:	4630      	mov	r0, r6
    d2aa:	f7ff fa61 	bl	c770 <ble_gap_accept_slave_conn>
        if (rc != 0) {
    d2ae:	4605      	mov	r5, r0
    d2b0:	2800      	cmp	r0, #0
    d2b2:	d092      	beq.n	d1da <ble_gap_rx_conn_complete+0x82>
    d2b4:	e75c      	b.n	d170 <ble_gap_rx_conn_complete+0x18>
        conn->bhc_cb = ble_gap_slave[instance].cb;
    d2b6:	4b13      	ldr	r3, [pc, #76]	; (d304 <ble_gap_rx_conn_complete+0x1ac>)
    d2b8:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    d2bc:	69da      	ldr	r2, [r3, #28]
    d2be:	65c2      	str	r2, [r0, #92]	; 0x5c
        conn->bhc_cb_arg = ble_gap_slave[instance].cb_arg;
    d2c0:	6a1a      	ldr	r2, [r3, #32]
    d2c2:	6602      	str	r2, [r0, #96]	; 0x60
        conn->bhc_our_addr_type = ble_gap_slave[instance].our_addr_type;
    d2c4:	7d5b      	ldrb	r3, [r3, #21]
    d2c6:	f3c3 0301 	ubfx	r3, r3, #0, #2
    d2ca:	7183      	strb	r3, [r0, #6]
        ble_gap_slave_reset_state(instance);
    d2cc:	4630      	mov	r0, r6
    d2ce:	f7ff fc57 	bl	cb80 <ble_gap_slave_reset_state>
    d2d2:	e7a3      	b.n	d21c <ble_gap_rx_conn_complete+0xc4>
        if (BLE_ADDR_IS_RPA(&conn->bhc_peer_addr)) {
    d2d4:	7b6b      	ldrb	r3, [r5, #13]
    d2d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d2da:	2b40      	cmp	r3, #64	; 0x40
    d2dc:	d1c0      	bne.n	d260 <ble_gap_rx_conn_complete+0x108>
            conn->bhc_peer_rpa_addr = conn->bhc_peer_addr;
    d2de:	462a      	mov	r2, r5
    d2e0:	f852 1f07 	ldr.w	r1, [r2, #7]!
    d2e4:	f8c5 1015 	str.w	r1, [r5, #21]
    d2e8:	8891      	ldrh	r1, [r2, #4]
    d2ea:	7992      	ldrb	r2, [r2, #6]
    d2ec:	f8a5 1019 	strh.w	r1, [r5, #25]
    d2f0:	76ea      	strb	r2, [r5, #27]
    d2f2:	e7b5      	b.n	d260 <ble_gap_rx_conn_complete+0x108>
        conn->bhc_peer_rpa_addr.type = BLE_ADDR_RANDOM;
    d2f4:	2301      	movs	r3, #1
    d2f6:	756b      	strb	r3, [r5, #21]
        memcpy(conn->bhc_peer_rpa_addr.val, evt->peer_rpa, 6);
    d2f8:	683b      	ldr	r3, [r7, #0]
    d2fa:	f8c5 3016 	str.w	r3, [r5, #22]
    d2fe:	88bb      	ldrh	r3, [r7, #4]
    d300:	836b      	strh	r3, [r5, #26]
    d302:	e7ad      	b.n	d260 <ble_gap_rx_conn_complete+0x108>
    d304:	200004b8 	.word	0x200004b8

0000d308 <ble_gap_adv_stop_no_lock>:
{
    d308:	b538      	push	{r3, r4, r5, lr}
    active = ble_gap_adv_active();
    d30a:	f7ff ff1f 	bl	d14c <ble_gap_adv_active>
    d30e:	4605      	mov	r5, r0
    rc = ble_gap_adv_enable_tx(0);
    d310:	2000      	movs	r0, #0
    d312:	f7ff fb6e 	bl	c9f2 <ble_gap_adv_enable_tx>
    if (rc != 0) {
    d316:	4604      	mov	r4, r0
    d318:	b108      	cbz	r0, d31e <ble_gap_adv_stop_no_lock+0x16>
}
    d31a:	4620      	mov	r0, r4
    d31c:	bd38      	pop	{r3, r4, r5, pc}
    ble_gap_slave_reset_state(0);
    d31e:	f7ff fc2f 	bl	cb80 <ble_gap_slave_reset_state>
    if (!active) {
    d322:	2d00      	cmp	r5, #0
    d324:	d1f9      	bne.n	d31a <ble_gap_adv_stop_no_lock+0x12>
        rc = BLE_HS_EALREADY;
    d326:	2402      	movs	r4, #2
    return rc;
    d328:	e7f7      	b.n	d31a <ble_gap_adv_stop_no_lock+0x12>
	...

0000d32c <ble_gap_disc_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_DISC;
    d32c:	4b03      	ldr	r3, [pc, #12]	; (d33c <ble_gap_disc_active+0x10>)
    d32e:	7818      	ldrb	r0, [r3, #0]
}
    d330:	2801      	cmp	r0, #1
    d332:	bf14      	ite	ne
    d334:	2000      	movne	r0, #0
    d336:	2001      	moveq	r0, #1
    d338:	4770      	bx	lr
    d33a:	bf00      	nop
    d33c:	200004b8 	.word	0x200004b8

0000d340 <ble_gap_conn_active>:
    return ble_gap_master.op == BLE_GAP_OP_M_CONN;
    d340:	4b03      	ldr	r3, [pc, #12]	; (d350 <ble_gap_conn_active+0x10>)
    d342:	7818      	ldrb	r0, [r3, #0]
}
    d344:	2802      	cmp	r0, #2
    d346:	bf14      	ite	ne
    d348:	2000      	movne	r0, #0
    d34a:	2001      	moveq	r0, #1
    d34c:	4770      	bx	lr
    d34e:	bf00      	nop
    d350:	200004b8 	.word	0x200004b8

0000d354 <ble_gap_conn_cancel_no_lock>:
{
    d354:	b508      	push	{r3, lr}
    if (!ble_gap_conn_active()) {
    d356:	f7ff fff3 	bl	d340 <ble_gap_conn_active>
    d35a:	b148      	cbz	r0, d370 <ble_gap_conn_cancel_no_lock+0x1c>
    rc = ble_gap_conn_cancel_tx();
    d35c:	f7ff fb3c 	bl	c9d8 <ble_gap_conn_cancel_tx>
    if (rc != 0) {
    d360:	4603      	mov	r3, r0
    d362:	b930      	cbnz	r0, d372 <ble_gap_conn_cancel_no_lock+0x1e>
    ble_gap_master.conn.cancel = 1;
    d364:	4904      	ldr	r1, [pc, #16]	; (d378 <ble_gap_conn_cancel_no_lock+0x24>)
    d366:	7c4a      	ldrb	r2, [r1, #17]
    d368:	f042 0208 	orr.w	r2, r2, #8
    d36c:	744a      	strb	r2, [r1, #17]
    d36e:	e000      	b.n	d372 <ble_gap_conn_cancel_no_lock+0x1e>
        rc = BLE_HS_EALREADY;
    d370:	2302      	movs	r3, #2
}
    d372:	4618      	mov	r0, r3
    d374:	bd08      	pop	{r3, pc}
    d376:	bf00      	nop
    d378:	200004b8 	.word	0x200004b8

0000d37c <ble_gap_terminate_with_conn>:
    if (conn->bhc_flags & BLE_HS_CONN_F_TERMINATING) {
    d37c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    d380:	f013 0f02 	tst.w	r3, #2
    d384:	d11a      	bne.n	d3bc <ble_gap_terminate_with_conn+0x40>
{
    d386:	b510      	push	{r4, lr}
    d388:	b084      	sub	sp, #16
    d38a:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn->bhc_handle);
    d38c:	8883      	ldrh	r3, [r0, #4]
    d38e:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.reason = hci_reason;
    d392:	f88d 100e 	strb.w	r1, [sp, #14]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LINK_CTRL,
    d396:	2300      	movs	r3, #0
    d398:	9300      	str	r3, [sp, #0]
    d39a:	2203      	movs	r2, #3
    d39c:	a903      	add	r1, sp, #12
    d39e:	f240 4006 	movw	r0, #1030	; 0x406
    d3a2:	f003 fbd5 	bl	10b50 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
    d3a6:	4603      	mov	r3, r0
    d3a8:	b928      	cbnz	r0, d3b6 <ble_gap_terminate_with_conn+0x3a>
    conn->bhc_flags |= BLE_HS_CONN_F_TERMINATING;
    d3aa:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
    d3ae:	f042 0202 	orr.w	r2, r2, #2
    d3b2:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
}
    d3b6:	4618      	mov	r0, r3
    d3b8:	b004      	add	sp, #16
    d3ba:	bd10      	pop	{r4, pc}
        return BLE_HS_EALREADY;
    d3bc:	2302      	movs	r3, #2
}
    d3be:	4618      	mov	r0, r3
    d3c0:	4770      	bx	lr

0000d3c2 <ble_gap_terminate>:
{
    d3c2:	b538      	push	{r3, r4, r5, lr}
    d3c4:	4604      	mov	r4, r0
    d3c6:	460d      	mov	r5, r1
    ble_hs_lock();
    d3c8:	f002 fb6c 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    d3cc:	4620      	mov	r0, r4
    d3ce:	f003 f973 	bl	106b8 <ble_hs_conn_find>
    if (conn == NULL) {
    d3d2:	b138      	cbz	r0, d3e4 <ble_gap_terminate+0x22>
    rc = ble_gap_terminate_with_conn(conn, hci_reason);
    d3d4:	4629      	mov	r1, r5
    d3d6:	f7ff ffd1 	bl	d37c <ble_gap_terminate_with_conn>
    d3da:	4604      	mov	r4, r0
    ble_hs_unlock();
    d3dc:	f002 fb66 	bl	faac <ble_hs_unlock>
}
    d3e0:	4620      	mov	r0, r4
    d3e2:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
    d3e4:	2407      	movs	r4, #7
    d3e6:	e7f9      	b.n	d3dc <ble_gap_terminate+0x1a>

0000d3e8 <ble_gap_update_notify>:
{
    d3e8:	b530      	push	{r4, r5, lr}
    d3ea:	b08f      	sub	sp, #60	; 0x3c
    d3ec:	4604      	mov	r4, r0
    d3ee:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
    d3f0:	2234      	movs	r2, #52	; 0x34
    d3f2:	2100      	movs	r1, #0
    d3f4:	a801      	add	r0, sp, #4
    d3f6:	f7fe fa02 	bl	b7fe <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE;
    d3fa:	2303      	movs	r3, #3
    d3fc:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update.conn_handle = conn_handle;
    d400:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.conn_update.status = status;
    d404:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
    d406:	a801      	add	r0, sp, #4
    d408:	f7ff fa30 	bl	c86c <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
    d40c:	4621      	mov	r1, r4
    d40e:	a801      	add	r0, sp, #4
    d410:	f7ff fa56 	bl	c8c0 <ble_gap_call_conn_event_cb>
    if (status == BLE_HS_ETIMEOUT) {
    d414:	2d0d      	cmp	r5, #13
    d416:	d001      	beq.n	d41c <ble_gap_update_notify+0x34>
}
    d418:	b00f      	add	sp, #60	; 0x3c
    d41a:	bd30      	pop	{r4, r5, pc}
        ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
    d41c:	2113      	movs	r1, #19
    d41e:	4620      	mov	r0, r4
    d420:	f7ff ffcf 	bl	d3c2 <ble_gap_terminate>
}
    d424:	e7f8      	b.n	d418 <ble_gap_update_notify+0x30>

0000d426 <ble_gap_conn_broken>:
{
    d426:	b570      	push	{r4, r5, r6, lr}
    d428:	b090      	sub	sp, #64	; 0x40
    d42a:	4604      	mov	r4, r0
    d42c:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
    d42e:	2234      	movs	r2, #52	; 0x34
    d430:	2100      	movs	r1, #0
    d432:	4668      	mov	r0, sp
    d434:	f7fe f9e3 	bl	b7fe <memset>
    snap.desc = &event.disconnect.conn;
    d438:	a910      	add	r1, sp, #64	; 0x40
    d43a:	ab02      	add	r3, sp, #8
    d43c:	f841 3d0c 	str.w	r3, [r1, #-12]!
    rc = ble_gap_find_snapshot(conn_handle, &snap);
    d440:	4620      	mov	r0, r4
    d442:	f7ff faa6 	bl	c992 <ble_gap_find_snapshot>
    if (rc != 0) {
    d446:	b108      	cbz	r0, d44c <ble_gap_conn_broken+0x26>
}
    d448:	b010      	add	sp, #64	; 0x40
    d44a:	bd70      	pop	{r4, r5, r6, pc}
    ble_hs_lock();
    d44c:	f002 fb2a 	bl	faa4 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
    d450:	4620      	mov	r0, r4
    d452:	f7ff fb7d 	bl	cb50 <ble_gap_update_entry_remove>
    d456:	4606      	mov	r6, r0
    ble_hs_unlock();
    d458:	f002 fb28 	bl	faac <ble_hs_unlock>
    if (entry != NULL) {
    d45c:	b136      	cbz	r6, d46c <ble_gap_conn_broken+0x46>
        ble_gap_update_notify(conn_handle, reason);
    d45e:	4629      	mov	r1, r5
    d460:	4620      	mov	r0, r4
    d462:	f7ff ffc1 	bl	d3e8 <ble_gap_update_notify>
        ble_gap_update_entry_free(entry);
    d466:	4630      	mov	r0, r6
    d468:	f7ff fc3c 	bl	cce4 <ble_gap_update_entry_free>
    ble_l2cap_sig_conn_broken(conn_handle, reason);
    d46c:	4629      	mov	r1, r5
    d46e:	4620      	mov	r0, r4
    d470:	f004 feea 	bl	12248 <ble_l2cap_sig_conn_broken>
    ble_sm_connection_broken(conn_handle);
    d474:	4620      	mov	r0, r4
    d476:	f006 fc07 	bl	13c88 <ble_sm_connection_broken>
    ble_gatts_connection_broken(conn_handle);
    d47a:	4620      	mov	r0, r4
    d47c:	f001 ffc2 	bl	f404 <ble_gatts_connection_broken>
    ble_gattc_connection_broken(conn_handle);
    d480:	4620      	mov	r0, r4
    d482:	f001 fa55 	bl	e930 <ble_gattc_connection_broken>
    ble_hs_flow_connection_broken(conn_handle);;
    d486:	4620      	mov	r0, r4
    d488:	f003 fa52 	bl	10930 <ble_hs_flow_connection_broken>
    ble_hs_atomic_conn_delete(conn_handle);
    d48c:	4620      	mov	r0, r4
    d48e:	f003 f818 	bl	104c2 <ble_hs_atomic_conn_delete>
    event.type = BLE_GAP_EVENT_DISCONNECT;
    d492:	2301      	movs	r3, #1
    d494:	f88d 3000 	strb.w	r3, [sp]
    event.disconnect.reason = reason;
    d498:	9501      	str	r5, [sp, #4]
    ble_gap_event_listener_call(&event);
    d49a:	4668      	mov	r0, sp
    d49c:	f7ff f9e6 	bl	c86c <ble_gap_event_listener_call>
    ble_gap_call_event_cb(&event, snap.cb, snap.cb_arg);
    d4a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    d4a2:	990e      	ldr	r1, [sp, #56]	; 0x38
    d4a4:	4668      	mov	r0, sp
    d4a6:	f7ff f90f 	bl	c6c8 <ble_gap_call_event_cb>
    d4aa:	e7cd      	b.n	d448 <ble_gap_conn_broken+0x22>

0000d4ac <ble_gap_rx_disconn_complete>:
{
    d4ac:	b570      	push	{r4, r5, r6, lr}
    d4ae:	b08e      	sub	sp, #56	; 0x38
    d4b0:	4604      	mov	r4, r0
    uint16_t handle = le16toh(ev->conn_handle);
    d4b2:	f8b0 5001 	ldrh.w	r5, [r0, #1]
    d4b6:	b2ae      	uxth	r6, r5
    if (ev->status == 0) {
    d4b8:	7803      	ldrb	r3, [r0, #0]
    d4ba:	b953      	cbnz	r3, d4d2 <ble_gap_rx_disconn_complete+0x26>
        ble_gap_conn_broken(handle, BLE_HS_HCI_ERR(ev->reason));
    d4bc:	78c1      	ldrb	r1, [r0, #3]
    d4be:	b131      	cbz	r1, d4ce <ble_gap_rx_disconn_complete+0x22>
    d4c0:	f501 7100 	add.w	r1, r1, #512	; 0x200
    d4c4:	4630      	mov	r0, r6
    d4c6:	f7ff ffae 	bl	d426 <ble_gap_conn_broken>
}
    d4ca:	b00e      	add	sp, #56	; 0x38
    d4cc:	bd70      	pop	{r4, r5, r6, pc}
        ble_gap_conn_broken(handle, BLE_HS_HCI_ERR(ev->reason));
    d4ce:	2100      	movs	r1, #0
    d4d0:	e7f8      	b.n	d4c4 <ble_gap_rx_disconn_complete+0x18>
        memset(&event, 0, sizeof event);
    d4d2:	2234      	movs	r2, #52	; 0x34
    d4d4:	2100      	movs	r1, #0
    d4d6:	a801      	add	r0, sp, #4
    d4d8:	f7fe f991 	bl	b7fe <memset>
        event.type = BLE_GAP_EVENT_TERM_FAILURE;
    d4dc:	2306      	movs	r3, #6
    d4de:	f88d 3004 	strb.w	r3, [sp, #4]
        event.term_failure.conn_handle = handle;
    d4e2:	f8ad 500c 	strh.w	r5, [sp, #12]
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
    d4e6:	7823      	ldrb	r3, [r4, #0]
    d4e8:	b153      	cbz	r3, d500 <ble_gap_rx_disconn_complete+0x54>
    d4ea:	f503 7300 	add.w	r3, r3, #512	; 0x200
    d4ee:	9302      	str	r3, [sp, #8]
        ble_gap_event_listener_call(&event);
    d4f0:	a801      	add	r0, sp, #4
    d4f2:	f7ff f9bb 	bl	c86c <ble_gap_event_listener_call>
        ble_gap_call_conn_event_cb(&event, handle);
    d4f6:	4631      	mov	r1, r6
    d4f8:	a801      	add	r0, sp, #4
    d4fa:	f7ff f9e1 	bl	c8c0 <ble_gap_call_conn_event_cb>
}
    d4fe:	e7e4      	b.n	d4ca <ble_gap_rx_disconn_complete+0x1e>
        event.term_failure.status = BLE_HS_HCI_ERR(ev->status);
    d500:	2300      	movs	r3, #0
    d502:	e7f4      	b.n	d4ee <ble_gap_rx_disconn_complete+0x42>

0000d504 <ble_gap_reset_state>:
{
    d504:	b510      	push	{r4, lr}
    d506:	4604      	mov	r4, r0
        conn_handle = ble_hs_atomic_first_conn_handle();
    d508:	f003 f806 	bl	10518 <ble_hs_atomic_first_conn_handle>
        if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
    d50c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    d510:	4298      	cmp	r0, r3
    d512:	d003      	beq.n	d51c <ble_gap_reset_state+0x18>
        ble_gap_conn_broken(conn_handle, reason);
    d514:	4621      	mov	r1, r4
    d516:	f7ff ff86 	bl	d426 <ble_gap_conn_broken>
        conn_handle = ble_hs_atomic_first_conn_handle();
    d51a:	e7f5      	b.n	d508 <ble_gap_reset_state+0x4>
    if (ble_gap_adv_active_instance(0)) {
    d51c:	2000      	movs	r0, #0
    d51e:	f7ff f911 	bl	c744 <ble_gap_adv_active_instance>
    d522:	b918      	cbnz	r0, d52c <ble_gap_reset_state+0x28>
    ble_gap_master_failed(reason);
    d524:	4620      	mov	r0, r4
    d526:	f7ff fbb1 	bl	cc8c <ble_gap_master_failed>
}
    d52a:	bd10      	pop	{r4, pc}
        ble_gap_adv_finished(0, reason, 0, 0);
    d52c:	2300      	movs	r3, #0
    d52e:	461a      	mov	r2, r3
    d530:	4621      	mov	r1, r4
    d532:	4618      	mov	r0, r3
    d534:	f7ff fb4a 	bl	cbcc <ble_gap_adv_finished>
    d538:	e7f4      	b.n	d524 <ble_gap_reset_state+0x20>
	...

0000d53c <ble_gap_rx_update_complete>:
{
    d53c:	b5f0      	push	{r4, r5, r6, r7, lr}
    d53e:	b091      	sub	sp, #68	; 0x44
    d540:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
    d542:	2234      	movs	r2, #52	; 0x34
    d544:	2100      	movs	r1, #0
    d546:	a801      	add	r0, sp, #4
    d548:	f7fe f959 	bl	b7fe <memset>
    memset(&l2cap_params, 0, sizeof l2cap_params);
    d54c:	2300      	movs	r3, #0
    d54e:	930e      	str	r3, [sp, #56]	; 0x38
    d550:	930f      	str	r3, [sp, #60]	; 0x3c
    ble_hs_lock();
    d552:	f002 faa7 	bl	faa4 <ble_hs_lock>
    conn_handle = le16toh(ev->conn_handle);
    d556:	8865      	ldrh	r5, [r4, #2]
    conn = ble_hs_conn_find(conn_handle);
    d558:	4628      	mov	r0, r5
    d55a:	f003 f8ad 	bl	106b8 <ble_hs_conn_find>
    if (conn != NULL) {
    d55e:	b120      	cbz	r0, d56a <ble_gap_rx_update_complete+0x2e>
    d560:	4606      	mov	r6, r0
        switch (ev->status) {
    d562:	7863      	ldrb	r3, [r4, #1]
    d564:	b193      	cbz	r3, d58c <ble_gap_rx_update_complete+0x50>
    d566:	2b1a      	cmp	r3, #26
    d568:	d017      	beq.n	d59a <ble_gap_rx_update_complete+0x5e>
    if (l2cap_params.itvl_min == 0) {
    d56a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    d56e:	b353      	cbz	r3, d5c6 <ble_gap_rx_update_complete+0x8a>
    ble_hs_unlock();
    d570:	f002 fa9c 	bl	faac <ble_hs_unlock>
    if (l2cap_params.itvl_min != 0) {
    d574:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    d578:	bb5b      	cbnz	r3, d5d2 <ble_gap_rx_update_complete+0x96>
        cb_status = BLE_HS_HCI_ERR(ev->status);
    d57a:	7861      	ldrb	r1, [r4, #1]
    d57c:	b399      	cbz	r1, d5e6 <ble_gap_rx_update_complete+0xaa>
    d57e:	f501 7100 	add.w	r1, r1, #512	; 0x200
        ble_gap_update_notify(conn_handle, cb_status);
    d582:	4628      	mov	r0, r5
    d584:	f7ff ff30 	bl	d3e8 <ble_gap_update_notify>
}
    d588:	b011      	add	sp, #68	; 0x44
    d58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            conn->bhc_itvl = le16toh(ev->conn_itvl);
    d58c:	88a3      	ldrh	r3, [r4, #4]
    d58e:	8383      	strh	r3, [r0, #28]
            conn->bhc_latency = le16toh(ev->conn_latency);
    d590:	88e3      	ldrh	r3, [r4, #6]
    d592:	83c3      	strh	r3, [r0, #30]
            conn->bhc_supervision_timeout = le16toh(ev->supervision_timeout);
    d594:	8923      	ldrh	r3, [r4, #8]
    d596:	8403      	strh	r3, [r0, #32]
            break;
    d598:	e7e7      	b.n	d56a <ble_gap_rx_update_complete+0x2e>
            entry = ble_gap_update_entry_find(conn_handle, NULL);
    d59a:	2100      	movs	r1, #0
    d59c:	4628      	mov	r0, r5
    d59e:	f7ff f92d 	bl	c7fc <ble_gap_update_entry_find>
            if (entry != NULL && !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
    d5a2:	4607      	mov	r7, r0
    d5a4:	2800      	cmp	r0, #0
    d5a6:	d0e0      	beq.n	d56a <ble_gap_rx_update_complete+0x2e>
    d5a8:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
    d5ac:	f013 0f01 	tst.w	r3, #1
    d5b0:	d1db      	bne.n	d56a <ble_gap_rx_update_complete+0x2e>
                ble_gap_update_to_l2cap(&entry->params, &l2cap_params);
    d5b2:	a90e      	add	r1, sp, #56	; 0x38
    d5b4:	3004      	adds	r0, #4
    d5b6:	f7ff f8bb 	bl	c730 <ble_gap_update_to_l2cap>
    return os_time_get();
    d5ba:	f7fd ff0b 	bl	b3d4 <os_time_get>
                entry->exp_os_ticks = ble_npl_time_get() +
    d5be:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
    d5c2:	6138      	str	r0, [r7, #16]
    d5c4:	e7d1      	b.n	d56a <ble_gap_rx_update_complete+0x2e>
        entry = ble_gap_update_entry_remove(conn_handle);
    d5c6:	4628      	mov	r0, r5
    d5c8:	f7ff fac2 	bl	cb50 <ble_gap_update_entry_remove>
        ble_gap_update_entry_free(entry);
    d5cc:	f7ff fb8a 	bl	cce4 <ble_gap_update_entry_free>
    d5d0:	e7ce      	b.n	d570 <ble_gap_rx_update_complete+0x34>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
    d5d2:	2300      	movs	r3, #0
    d5d4:	4a05      	ldr	r2, [pc, #20]	; (d5ec <ble_gap_rx_update_complete+0xb0>)
    d5d6:	a90e      	add	r1, sp, #56	; 0x38
    d5d8:	4628      	mov	r0, r5
    d5da:	f004 fdd6 	bl	1218a <ble_l2cap_sig_update>
        if (rc == 0) {
    d5de:	4601      	mov	r1, r0
    d5e0:	2800      	cmp	r0, #0
    d5e2:	d1ce      	bne.n	d582 <ble_gap_rx_update_complete+0x46>
    d5e4:	e7d0      	b.n	d588 <ble_gap_rx_update_complete+0x4c>
        cb_status = BLE_HS_HCI_ERR(ev->status);
    d5e6:	2100      	movs	r1, #0
    d5e8:	e7cb      	b.n	d582 <ble_gap_rx_update_complete+0x46>
    d5ea:	bf00      	nop
    d5ec:	0000d5f1 	.word	0x0000d5f1

0000d5f0 <ble_gap_update_l2cap_cb>:
{
    d5f0:	b570      	push	{r4, r5, r6, lr}
    d5f2:	4605      	mov	r5, r0
    d5f4:	460e      	mov	r6, r1
    ble_hs_lock();
    d5f6:	f002 fa55 	bl	faa4 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
    d5fa:	4628      	mov	r0, r5
    d5fc:	f7ff faa8 	bl	cb50 <ble_gap_update_entry_remove>
    d600:	4604      	mov	r4, r0
    ble_hs_unlock();
    d602:	f002 fa53 	bl	faac <ble_hs_unlock>
    if (entry != NULL) {
    d606:	b11c      	cbz	r4, d610 <ble_gap_update_l2cap_cb+0x20>
        ble_gap_update_entry_free(entry);
    d608:	4620      	mov	r0, r4
    d60a:	f7ff fb6b 	bl	cce4 <ble_gap_update_entry_free>
        if (status != 0) {
    d60e:	b906      	cbnz	r6, d612 <ble_gap_update_l2cap_cb+0x22>
}
    d610:	bd70      	pop	{r4, r5, r6, pc}
            ble_gap_update_notify(conn_handle, status);
    d612:	4631      	mov	r1, r6
    d614:	4628      	mov	r0, r5
    d616:	f7ff fee7 	bl	d3e8 <ble_gap_update_notify>
}
    d61a:	e7f9      	b.n	d610 <ble_gap_update_l2cap_cb+0x20>

0000d61c <ble_gap_update_failed>:
{
    d61c:	b570      	push	{r4, r5, r6, lr}
    d61e:	4604      	mov	r4, r0
    d620:	460d      	mov	r5, r1
    ble_hs_lock();
    d622:	f002 fa3f 	bl	faa4 <ble_hs_lock>
    entry = ble_gap_update_entry_remove(conn_handle);
    d626:	4620      	mov	r0, r4
    d628:	f7ff fa92 	bl	cb50 <ble_gap_update_entry_remove>
    d62c:	4606      	mov	r6, r0
    ble_hs_unlock();
    d62e:	f002 fa3d 	bl	faac <ble_hs_unlock>
    ble_gap_update_entry_free(entry);
    d632:	4630      	mov	r0, r6
    d634:	f7ff fb56 	bl	cce4 <ble_gap_update_entry_free>
    ble_gap_update_notify(conn_handle, status);
    d638:	4629      	mov	r1, r5
    d63a:	4620      	mov	r0, r4
    d63c:	f7ff fed4 	bl	d3e8 <ble_gap_update_notify>
}
    d640:	bd70      	pop	{r4, r5, r6, pc}

0000d642 <ble_gap_rx_param_req>:
{
    d642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d646:	b094      	sub	sp, #80	; 0x50
    d648:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
    d64a:	f04f 0834 	mov.w	r8, #52	; 0x34
    d64e:	4642      	mov	r2, r8
    d650:	2100      	movs	r1, #0
    d652:	a801      	add	r0, sp, #4
    d654:	f7fe f8d3 	bl	b7fe <memset>
    peer_params.itvl_min = le16toh(ev->min_interval);
    d658:	f8b4 3003 	ldrh.w	r3, [r4, #3]
    d65c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
    peer_params.itvl_max = le16toh(ev->max_interval);
    d660:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    d664:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
    peer_params.latency = le16toh(ev->latency);
    d668:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    d66c:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
    peer_params.supervision_timeout = le16toh(ev->timeout);
    d670:	f8b4 3009 	ldrh.w	r3, [r4, #9]
    d674:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
    peer_params.min_ce_len = 0;
    d678:	2300      	movs	r3, #0
    d67a:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
    peer_params.max_ce_len = 0;
    d67e:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    self_params = peer_params;
    d682:	ae0e      	add	r6, sp, #56	; 0x38
    d684:	ad11      	add	r5, sp, #68	; 0x44
    d686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    d68a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    conn_handle = le16toh(ev->conn_handle);
    d68e:	f8b4 7001 	ldrh.w	r7, [r4, #1]
    d692:	b2bc      	uxth	r4, r7
    memset(&event, 0, sizeof event);
    d694:	4642      	mov	r2, r8
    d696:	4619      	mov	r1, r3
    d698:	a801      	add	r0, sp, #4
    d69a:	f7fe f8b0 	bl	b7fe <memset>
    event.type = BLE_GAP_EVENT_CONN_UPDATE_REQ;
    d69e:	2304      	movs	r3, #4
    d6a0:	f88d 3004 	strb.w	r3, [sp, #4]
    event.conn_update_req.conn_handle = conn_handle;
    d6a4:	f8ad 7010 	strh.w	r7, [sp, #16]
    event.conn_update_req.self_params = &self_params;
    d6a8:	9603      	str	r6, [sp, #12]
    event.conn_update_req.peer_params = &peer_params;
    d6aa:	9502      	str	r5, [sp, #8]
    rc = ble_gap_call_conn_event_cb(&event, conn_handle);
    d6ac:	4621      	mov	r1, r4
    d6ae:	eb0d 0003 	add.w	r0, sp, r3
    d6b2:	f7ff f905 	bl	c8c0 <ble_gap_call_conn_event_cb>
    if (rc == 0) {
    d6b6:	b948      	cbnz	r0, d6cc <ble_gap_rx_param_req+0x8a>
        rc = ble_gap_tx_param_pos_reply(conn_handle, &self_params);
    d6b8:	a90e      	add	r1, sp, #56	; 0x38
    d6ba:	4620      	mov	r0, r4
    d6bc:	f7ff f9f5 	bl	caaa <ble_gap_tx_param_pos_reply>
        if (rc != 0) {
    d6c0:	4601      	mov	r1, r0
    d6c2:	b138      	cbz	r0, d6d4 <ble_gap_rx_param_req+0x92>
            ble_gap_update_failed(conn_handle, rc);
    d6c4:	4620      	mov	r0, r4
    d6c6:	f7ff ffa9 	bl	d61c <ble_gap_update_failed>
    d6ca:	e003      	b.n	d6d4 <ble_gap_rx_param_req+0x92>
        ble_gap_tx_param_neg_reply(conn_handle, rc);
    d6cc:	b2c1      	uxtb	r1, r0
    d6ce:	4620      	mov	r0, r4
    d6d0:	f7ff fa0c 	bl	caec <ble_gap_tx_param_neg_reply>
}
    d6d4:	b014      	add	sp, #80	; 0x50
    d6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0000d6dc <ble_gap_update_params>:
{
    d6dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6e0:	b082      	sub	sp, #8
    d6e2:	4606      	mov	r6, r0
    d6e4:	460d      	mov	r5, r1
    if (!ble_gap_validate_conn_params(params)) {
    d6e6:	4608      	mov	r0, r1
    d6e8:	f7ff f89c 	bl	c824 <ble_gap_validate_conn_params>
    d6ec:	2800      	cmp	r0, #0
    d6ee:	d05f      	beq.n	d7b0 <ble_gap_update_params+0xd4>
    memset(&l2cap_params, 0, sizeof l2cap_params);
    d6f0:	2300      	movs	r3, #0
    d6f2:	9300      	str	r3, [sp, #0]
    d6f4:	9301      	str	r3, [sp, #4]
    ble_hs_lock();
    d6f6:	f002 f9d5 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    d6fa:	4630      	mov	r0, r6
    d6fc:	f002 ffdc 	bl	106b8 <ble_hs_conn_find>
    if (conn == NULL) {
    d700:	4604      	mov	r4, r0
    d702:	b340      	cbz	r0, d756 <ble_gap_update_params+0x7a>
    dup = ble_gap_update_entry_find(conn_handle, NULL);
    d704:	2100      	movs	r1, #0
    d706:	4630      	mov	r0, r6
    d708:	f7ff f878 	bl	c7fc <ble_gap_update_entry_find>
    if (dup != NULL) {
    d70c:	b118      	cbz	r0, d716 <ble_gap_update_params+0x3a>
        rc = BLE_HS_EALREADY;
    d70e:	2402      	movs	r4, #2
    l2cap_update = 0;
    d710:	2700      	movs	r7, #0
    entry = NULL;
    d712:	46b8      	mov	r8, r7
    d714:	e022      	b.n	d75c <ble_gap_update_params+0x80>
    entry = ble_gap_update_entry_alloc();
    d716:	f7ff fbf1 	bl	cefc <ble_gap_update_entry_alloc>
    if (entry == NULL) {
    d71a:	4680      	mov	r8, r0
    d71c:	b390      	cbz	r0, d784 <ble_gap_update_params+0xa8>
    entry->conn_handle = conn_handle;
    d71e:	8286      	strh	r6, [r0, #20]
    entry->params = *params;
    d720:	1d03      	adds	r3, r0, #4
    d722:	6828      	ldr	r0, [r5, #0]
    d724:	6869      	ldr	r1, [r5, #4]
    d726:	68aa      	ldr	r2, [r5, #8]
    d728:	c307      	stmia	r3!, {r0, r1, r2}
    d72a:	f7fd fe53 	bl	b3d4 <os_time_get>
    entry->exp_os_ticks = ble_npl_time_get() +
    d72e:	f500 50a0 	add.w	r0, r0, #5120	; 0x1400
    d732:	f8c8 0010 	str.w	r0, [r8, #16]
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
    d736:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d738:	f013 0f02 	tst.w	r3, #2
    d73c:	d104      	bne.n	d748 <ble_gap_update_params+0x6c>
            !(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
    d73e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if ((conn->supported_feat & BLE_HS_HCI_LE_FEAT_CONN_PARAM_REQUEST) == 0 &&
    d742:	f013 0f01 	tst.w	r3, #1
    d746:	d020      	beq.n	d78a <ble_gap_update_params+0xae>
        rc = ble_gap_update_tx(conn_handle, params);
    d748:	4629      	mov	r1, r5
    d74a:	4630      	mov	r0, r6
    d74c:	f7ff f9df 	bl	cb0e <ble_gap_update_tx>
    d750:	4604      	mov	r4, r0
    l2cap_update = 0;
    d752:	2700      	movs	r7, #0
    d754:	e002      	b.n	d75c <ble_gap_update_params+0x80>
        rc = BLE_HS_ENOTCONN;
    d756:	2407      	movs	r4, #7
    l2cap_update = 0;
    d758:	2700      	movs	r7, #0
    entry = NULL;
    d75a:	46b8      	mov	r8, r7
    ble_hs_unlock();
    d75c:	f002 f9a6 	bl	faac <ble_hs_unlock>
    if (!l2cap_update) {
    d760:	b9b7      	cbnz	r7, d790 <ble_gap_update_params+0xb4>
        ble_hs_timer_resched();
    d762:	f002 fa7b 	bl	fc5c <ble_hs_timer_resched>
    ble_hs_lock();
    d766:	f002 f99d 	bl	faa4 <ble_hs_lock>
    if (rc == 0) {
    d76a:	b9ec      	cbnz	r4, d7a8 <ble_gap_update_params+0xcc>
        SLIST_INSERT_HEAD(&ble_gap_update_entries, entry, next);
    d76c:	4b11      	ldr	r3, [pc, #68]	; (d7b4 <ble_gap_update_params+0xd8>)
    d76e:	681a      	ldr	r2, [r3, #0]
    d770:	f8c8 2000 	str.w	r2, [r8]
    d774:	f8c3 8000 	str.w	r8, [r3]
    ble_hs_unlock();
    d778:	f002 f998 	bl	faac <ble_hs_unlock>
}
    d77c:	4620      	mov	r0, r4
    d77e:	b002      	add	sp, #8
    d780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOMEM;
    d784:	2406      	movs	r4, #6
    l2cap_update = 0;
    d786:	2700      	movs	r7, #0
    d788:	e7e8      	b.n	d75c <ble_gap_update_params+0x80>
        rc = 0;
    d78a:	2400      	movs	r4, #0
        l2cap_update = 1;
    d78c:	2701      	movs	r7, #1
    d78e:	e7e5      	b.n	d75c <ble_gap_update_params+0x80>
        ble_gap_update_to_l2cap(params, &l2cap_params);
    d790:	4669      	mov	r1, sp
    d792:	4628      	mov	r0, r5
    d794:	f7fe ffcc 	bl	c730 <ble_gap_update_to_l2cap>
        rc = ble_l2cap_sig_update(conn_handle, &l2cap_params,
    d798:	2300      	movs	r3, #0
    d79a:	4a07      	ldr	r2, [pc, #28]	; (d7b8 <ble_gap_update_params+0xdc>)
    d79c:	4669      	mov	r1, sp
    d79e:	4630      	mov	r0, r6
    d7a0:	f004 fcf3 	bl	1218a <ble_l2cap_sig_update>
    d7a4:	4604      	mov	r4, r0
    d7a6:	e7de      	b.n	d766 <ble_gap_update_params+0x8a>
        ble_gap_update_entry_free(entry);
    d7a8:	4640      	mov	r0, r8
    d7aa:	f7ff fa9b 	bl	cce4 <ble_gap_update_entry_free>
    d7ae:	e7e3      	b.n	d778 <ble_gap_update_params+0x9c>
        return BLE_HS_EINVAL;
    d7b0:	2403      	movs	r4, #3
    d7b2:	e7e3      	b.n	d77c <ble_gap_update_params+0xa0>
    d7b4:	20007098 	.word	0x20007098
    d7b8:	0000d5f1 	.word	0x0000d5f1

0000d7bc <ble_gap_unpair>:
{
    d7bc:	b510      	push	{r4, lr}
    d7be:	b082      	sub	sp, #8
    d7c0:	4604      	mov	r4, r0
    if (ble_addr_cmp(peer_addr, BLE_ADDR_ANY) == 0) {
    d7c2:	2300      	movs	r3, #0
    d7c4:	9300      	str	r3, [sp, #0]
    d7c6:	f8cd 3003 	str.w	r3, [sp, #3]

static inline int ble_addr_cmp(const ble_addr_t *a, const ble_addr_t *b)
{
    int type_diff;

    type_diff = a->type - b->type;
    d7ca:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
    d7cc:	b928      	cbnz	r0, d7da <ble_gap_unpair+0x1e>
        return type_diff;
    }

    return memcmp(a->val, b->val, sizeof(a->val));
    d7ce:	2206      	movs	r2, #6
    d7d0:	f10d 0101 	add.w	r1, sp, #1
    d7d4:	1c60      	adds	r0, r4, #1
    d7d6:	f7fd ffc5 	bl	b764 <memcmp>
    d7da:	b198      	cbz	r0, d804 <ble_gap_unpair+0x48>
    ble_hs_lock();
    d7dc:	f002 f962 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find_by_addr(peer_addr);
    d7e0:	4620      	mov	r0, r4
    d7e2:	f003 f80b 	bl	107fc <ble_hs_conn_find_by_addr>
    if (conn != NULL) {
    d7e6:	b110      	cbz	r0, d7ee <ble_gap_unpair+0x32>
        ble_gap_terminate_with_conn(conn, BLE_ERR_REM_USER_CONN_TERM);
    d7e8:	2113      	movs	r1, #19
    d7ea:	f7ff fdc7 	bl	d37c <ble_gap_terminate_with_conn>
    ble_hs_unlock();
    d7ee:	f002 f95d 	bl	faac <ble_hs_unlock>
    ble_hs_pvcy_remove_entry(peer_addr->type,
    d7f2:	1c61      	adds	r1, r4, #1
    d7f4:	7820      	ldrb	r0, [r4, #0]
    d7f6:	f003 ffb2 	bl	1175e <ble_hs_pvcy_remove_entry>
    return ble_store_util_delete_peer(peer_addr);
    d7fa:	4620      	mov	r0, r4
    d7fc:	f006 fd68 	bl	142d0 <ble_store_util_delete_peer>
}
    d800:	b002      	add	sp, #8
    d802:	bd10      	pop	{r4, pc}
        return BLE_HS_EINVAL;
    d804:	2003      	movs	r0, #3
    d806:	e7fb      	b.n	d800 <ble_gap_unpair+0x44>

0000d808 <ble_gap_unpair_oldest_peer>:
{
    d808:	b500      	push	{lr}
    d80a:	b085      	sub	sp, #20
    rc = ble_store_util_bonded_peers(
    d80c:	2201      	movs	r2, #1
    d80e:	a901      	add	r1, sp, #4
    d810:	a802      	add	r0, sp, #8
    d812:	f006 fd35 	bl	14280 <ble_store_util_bonded_peers>
    if (rc != 0) {
    d816:	4603      	mov	r3, r0
    d818:	b928      	cbnz	r0, d826 <ble_gap_unpair_oldest_peer+0x1e>
    if (num_peers == 0) {
    d81a:	9b01      	ldr	r3, [sp, #4]
    d81c:	b13b      	cbz	r3, d82e <ble_gap_unpair_oldest_peer+0x26>
    rc = ble_gap_unpair(&oldest_peer_id_addr);
    d81e:	a802      	add	r0, sp, #8
    d820:	f7ff ffcc 	bl	d7bc <ble_gap_unpair>
    d824:	4603      	mov	r3, r0
}
    d826:	4618      	mov	r0, r3
    d828:	b005      	add	sp, #20
    d82a:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_ENOENT;
    d82e:	2305      	movs	r3, #5
    d830:	e7f9      	b.n	d826 <ble_gap_unpair_oldest_peer+0x1e>

0000d832 <ble_gap_unpair_oldest_except>:
{
    d832:	b570      	push	{r4, r5, r6, lr}
    d834:	b088      	sub	sp, #32
    d836:	4605      	mov	r5, r0
    rc = ble_store_util_bonded_peers(
    d838:	2203      	movs	r2, #3
    d83a:	a901      	add	r1, sp, #4
    d83c:	a802      	add	r0, sp, #8
    d83e:	f006 fd1f 	bl	14280 <ble_store_util_bonded_peers>
    if (rc != 0) {
    d842:	4604      	mov	r4, r0
    d844:	bb18      	cbnz	r0, d88e <ble_gap_unpair_oldest_except+0x5c>
    if (num_peers == 0) {
    d846:	9e01      	ldr	r6, [sp, #4]
    d848:	b91e      	cbnz	r6, d852 <ble_gap_unpair_oldest_except+0x20>
        return BLE_HS_ENOENT;
    d84a:	2405      	movs	r4, #5
    d84c:	e01f      	b.n	d88e <ble_gap_unpair_oldest_except+0x5c>
        if (ble_addr_cmp(peer_addr, &peer_id_addrs[i]) != 0) {
    d84e:	b9a8      	cbnz	r0, d87c <ble_gap_unpair_oldest_except+0x4a>
    for (i = 0; i < num_peers; i++) {
    d850:	3401      	adds	r4, #1
    d852:	42a6      	cmp	r6, r4
    d854:	dd12      	ble.n	d87c <ble_gap_unpair_oldest_except+0x4a>
    type_diff = a->type - b->type;
    d856:	7828      	ldrb	r0, [r5, #0]
    d858:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
    d85c:	aa08      	add	r2, sp, #32
    d85e:	4413      	add	r3, r2
    d860:	f813 3c18 	ldrb.w	r3, [r3, #-24]
    if (type_diff != 0) {
    d864:	1ac0      	subs	r0, r0, r3
    d866:	d1f2      	bne.n	d84e <ble_gap_unpair_oldest_except+0x1c>
    return memcmp(a->val, b->val, sizeof(a->val));
    d868:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    d86c:	ab02      	add	r3, sp, #8
    d86e:	4419      	add	r1, r3
    d870:	2206      	movs	r2, #6
    d872:	3101      	adds	r1, #1
    d874:	1c68      	adds	r0, r5, #1
    d876:	f7fd ff75 	bl	b764 <memcmp>
    d87a:	e7e8      	b.n	d84e <ble_gap_unpair_oldest_except+0x1c>
    if (i >= num_peers) {
    d87c:	42a6      	cmp	r6, r4
    d87e:	dd09      	ble.n	d894 <ble_gap_unpair_oldest_except+0x62>
    return ble_gap_unpair(&peer_id_addrs[i]);
    d880:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
    d884:	ab02      	add	r3, sp, #8
    d886:	1918      	adds	r0, r3, r4
    d888:	f7ff ff98 	bl	d7bc <ble_gap_unpair>
    d88c:	4604      	mov	r4, r0
}
    d88e:	4620      	mov	r0, r4
    d890:	b008      	add	sp, #32
    d892:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOMEM;
    d894:	2406      	movs	r4, #6
    d896:	e7fa      	b.n	d88e <ble_gap_unpair_oldest_except+0x5c>

0000d898 <ble_gap_passkey_event>:
{
    d898:	b530      	push	{r4, r5, lr}
    d89a:	b08f      	sub	sp, #60	; 0x3c
    d89c:	4604      	mov	r4, r0
    d89e:	460d      	mov	r5, r1
    memset(&event, 0, sizeof event);
    d8a0:	2234      	movs	r2, #52	; 0x34
    d8a2:	2100      	movs	r1, #0
    d8a4:	a801      	add	r0, sp, #4
    d8a6:	f7fd ffaa 	bl	b7fe <memset>
    event.type = BLE_GAP_EVENT_PASSKEY_ACTION;
    d8aa:	230b      	movs	r3, #11
    d8ac:	f88d 3004 	strb.w	r3, [sp, #4]
    event.passkey.conn_handle = conn_handle;
    d8b0:	f8ad 4010 	strh.w	r4, [sp, #16]
    event.passkey.params = *passkey_params;
    d8b4:	ab02      	add	r3, sp, #8
    d8b6:	e895 0003 	ldmia.w	r5, {r0, r1}
    d8ba:	e883 0003 	stmia.w	r3, {r0, r1}
    ble_gap_call_conn_event_cb(&event, conn_handle);
    d8be:	4621      	mov	r1, r4
    d8c0:	a801      	add	r0, sp, #4
    d8c2:	f7fe fffd 	bl	c8c0 <ble_gap_call_conn_event_cb>
}
    d8c6:	b00f      	add	sp, #60	; 0x3c
    d8c8:	bd30      	pop	{r4, r5, pc}

0000d8ca <ble_gap_enc_event>:
{
    d8ca:	b5f0      	push	{r4, r5, r6, r7, lr}
    d8cc:	b08f      	sub	sp, #60	; 0x3c
    d8ce:	4604      	mov	r4, r0
    d8d0:	460d      	mov	r5, r1
    d8d2:	4616      	mov	r6, r2
    d8d4:	461f      	mov	r7, r3
    memset(&event, 0, sizeof event);
    d8d6:	2234      	movs	r2, #52	; 0x34
    d8d8:	2100      	movs	r1, #0
    d8da:	a801      	add	r0, sp, #4
    d8dc:	f7fd ff8f 	bl	b7fe <memset>
    event.type = BLE_GAP_EVENT_ENC_CHANGE;
    d8e0:	230a      	movs	r3, #10
    d8e2:	f88d 3004 	strb.w	r3, [sp, #4]
    event.enc_change.conn_handle = conn_handle;
    d8e6:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.enc_change.status = status;
    d8ea:	9502      	str	r5, [sp, #8]
    ble_gap_event_listener_call(&event);
    d8ec:	a801      	add	r0, sp, #4
    d8ee:	f7fe ffbd 	bl	c86c <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
    d8f2:	4621      	mov	r1, r4
    d8f4:	a801      	add	r0, sp, #4
    d8f6:	f7fe ffe3 	bl	c8c0 <ble_gap_call_conn_event_cb>
    if (status != 0) {
    d8fa:	b90d      	cbnz	r5, d900 <ble_gap_enc_event+0x36>
    if (security_restored) {
    d8fc:	b916      	cbnz	r6, d904 <ble_gap_enc_event+0x3a>
    if (bonded) {
    d8fe:	b92f      	cbnz	r7, d90c <ble_gap_enc_event+0x42>
}
    d900:	b00f      	add	sp, #60	; 0x3c
    d902:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ble_gatts_bonding_restored(conn_handle);
    d904:	4620      	mov	r0, r4
    d906:	f001 ff69 	bl	f7dc <ble_gatts_bonding_restored>
        return;
    d90a:	e7f9      	b.n	d900 <ble_gap_enc_event+0x36>
        ble_gatts_bonding_established(conn_handle);
    d90c:	4620      	mov	r0, r4
    d90e:	f001 ff25 	bl	f75c <ble_gatts_bonding_established>
    d912:	e7f5      	b.n	d900 <ble_gap_enc_event+0x36>

0000d914 <ble_gap_identity_event>:
{
    d914:	b510      	push	{r4, lr}
    d916:	b08e      	sub	sp, #56	; 0x38
    d918:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
    d91a:	2234      	movs	r2, #52	; 0x34
    d91c:	2100      	movs	r1, #0
    d91e:	a801      	add	r0, sp, #4
    d920:	f7fd ff6d 	bl	b7fe <memset>
    event.type = BLE_GAP_EVENT_IDENTITY_RESOLVED;
    d924:	2310      	movs	r3, #16
    d926:	f88d 3004 	strb.w	r3, [sp, #4]
    event.identity_resolved.conn_handle = conn_handle;
    d92a:	f8ad 4008 	strh.w	r4, [sp, #8]
    ble_gap_call_conn_event_cb(&event, conn_handle);
    d92e:	4621      	mov	r1, r4
    d930:	a801      	add	r0, sp, #4
    d932:	f7fe ffc5 	bl	c8c0 <ble_gap_call_conn_event_cb>
}
    d936:	b00e      	add	sp, #56	; 0x38
    d938:	bd10      	pop	{r4, pc}

0000d93a <ble_gap_repeat_pairing_event>:
{
    d93a:	b510      	push	{r4, lr}
    d93c:	b08e      	sub	sp, #56	; 0x38
    d93e:	4604      	mov	r4, r0
    memset(&event, 0, sizeof event);
    d940:	2234      	movs	r2, #52	; 0x34
    d942:	2100      	movs	r1, #0
    d944:	a801      	add	r0, sp, #4
    d946:	f7fd ff5a 	bl	b7fe <memset>
    event.type = BLE_GAP_EVENT_REPEAT_PAIRING;
    d94a:	2311      	movs	r3, #17
    d94c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.repeat_pairing = *rp;
    d950:	6820      	ldr	r0, [r4, #0]
    d952:	9002      	str	r0, [sp, #8]
    d954:	88a3      	ldrh	r3, [r4, #4]
    d956:	f8ad 300c 	strh.w	r3, [sp, #12]
    rc = ble_gap_call_conn_event_cb(&event, rp->conn_handle);
    d95a:	8821      	ldrh	r1, [r4, #0]
    d95c:	a801      	add	r0, sp, #4
    d95e:	f7fe ffaf 	bl	c8c0 <ble_gap_call_conn_event_cb>
}
    d962:	b00e      	add	sp, #56	; 0x38
    d964:	bd10      	pop	{r4, pc}

0000d966 <ble_gap_notify_rx_event>:
{
    d966:	b5f0      	push	{r4, r5, r6, r7, lr}
    d968:	b08f      	sub	sp, #60	; 0x3c
    d96a:	4604      	mov	r4, r0
    d96c:	460f      	mov	r7, r1
    d96e:	4616      	mov	r6, r2
    d970:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
    d972:	2234      	movs	r2, #52	; 0x34
    d974:	2100      	movs	r1, #0
    d976:	a801      	add	r0, sp, #4
    d978:	f7fd ff41 	bl	b7fe <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_RX;
    d97c:	230c      	movs	r3, #12
    d97e:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_rx.conn_handle = conn_handle;
    d982:	f8ad 400e 	strh.w	r4, [sp, #14]
    event.notify_rx.attr_handle = attr_handle;
    d986:	f8ad 700c 	strh.w	r7, [sp, #12]
    event.notify_rx.om = om;
    d98a:	9602      	str	r6, [sp, #8]
    event.notify_rx.indication = is_indication;
    d98c:	f04f 0300 	mov.w	r3, #0
    d990:	f365 0300 	bfi	r3, r5, #0, #1
    d994:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
    d998:	a801      	add	r0, sp, #4
    d99a:	f7fe ff67 	bl	c86c <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
    d99e:	4621      	mov	r1, r4
    d9a0:	a801      	add	r0, sp, #4
    d9a2:	f7fe ff8d 	bl	c8c0 <ble_gap_call_conn_event_cb>
    os_mbuf_free_chain(event.notify_rx.om);
    d9a6:	9802      	ldr	r0, [sp, #8]
    d9a8:	f7fc fc1a 	bl	a1e0 <os_mbuf_free_chain>
}
    d9ac:	b00f      	add	sp, #60	; 0x3c
    d9ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d9b0 <ble_gap_notify_tx_event>:
{
    d9b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9b2:	b08f      	sub	sp, #60	; 0x3c
    d9b4:	4607      	mov	r7, r0
    d9b6:	460c      	mov	r4, r1
    d9b8:	4616      	mov	r6, r2
    d9ba:	461d      	mov	r5, r3
    memset(&event, 0, sizeof event);
    d9bc:	2234      	movs	r2, #52	; 0x34
    d9be:	2100      	movs	r1, #0
    d9c0:	a801      	add	r0, sp, #4
    d9c2:	f7fd ff1c 	bl	b7fe <memset>
    event.type = BLE_GAP_EVENT_NOTIFY_TX;
    d9c6:	230d      	movs	r3, #13
    d9c8:	f88d 3004 	strb.w	r3, [sp, #4]
    event.notify_tx.conn_handle = conn_handle;
    d9cc:	f8ad 400c 	strh.w	r4, [sp, #12]
    event.notify_tx.status = status;
    d9d0:	9702      	str	r7, [sp, #8]
    event.notify_tx.attr_handle = attr_handle;
    d9d2:	f8ad 600e 	strh.w	r6, [sp, #14]
    event.notify_tx.indication = is_indication;
    d9d6:	f04f 0300 	mov.w	r3, #0
    d9da:	f365 0300 	bfi	r3, r5, #0, #1
    d9de:	f88d 3010 	strb.w	r3, [sp, #16]
    ble_gap_event_listener_call(&event);
    d9e2:	a801      	add	r0, sp, #4
    d9e4:	f7fe ff42 	bl	c86c <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
    d9e8:	4621      	mov	r1, r4
    d9ea:	a801      	add	r0, sp, #4
    d9ec:	f7fe ff68 	bl	c8c0 <ble_gap_call_conn_event_cb>
}
    d9f0:	b00f      	add	sp, #60	; 0x3c
    d9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d9f4 <ble_gap_subscribe_event>:
{
    d9f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9f6:	b08f      	sub	sp, #60	; 0x3c
    d9f8:	4605      	mov	r5, r0
    d9fa:	460f      	mov	r7, r1
    d9fc:	4616      	mov	r6, r2
    d9fe:	461c      	mov	r4, r3
    memset(&event, 0, sizeof event);
    da00:	2234      	movs	r2, #52	; 0x34
    da02:	2100      	movs	r1, #0
    da04:	a801      	add	r0, sp, #4
    da06:	f7fd fefa 	bl	b7fe <memset>
    event.type = BLE_GAP_EVENT_SUBSCRIBE;
    da0a:	230e      	movs	r3, #14
    da0c:	f88d 3004 	strb.w	r3, [sp, #4]
    event.subscribe.conn_handle = conn_handle;
    da10:	f8ad 5008 	strh.w	r5, [sp, #8]
    event.subscribe.attr_handle = attr_handle;
    da14:	f8ad 700a 	strh.w	r7, [sp, #10]
    event.subscribe.reason = reason;
    da18:	f88d 600c 	strb.w	r6, [sp, #12]
    event.subscribe.cur_notify = !!cur_notify;
    da1c:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
    da20:	3200      	adds	r2, #0
    da22:	bf18      	it	ne
    da24:	2201      	movne	r2, #1
    da26:	1c23      	adds	r3, r4, #0
    da28:	bf18      	it	ne
    da2a:	2301      	movne	r3, #1
    da2c:	f362 0341 	bfi	r3, r2, #1, #1
    event.subscribe.prev_indicate = !!prev_indicate;
    da30:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
    da34:	3200      	adds	r2, #0
    da36:	bf18      	it	ne
    da38:	2201      	movne	r2, #1
    da3a:	f362 0382 	bfi	r3, r2, #2, #1
    event.subscribe.cur_indicate = !!cur_indicate;
    da3e:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
    da42:	3200      	adds	r2, #0
    da44:	bf18      	it	ne
    da46:	2201      	movne	r2, #1
    da48:	f362 03c3 	bfi	r3, r2, #3, #1
    da4c:	f88d 300d 	strb.w	r3, [sp, #13]
    ble_gap_event_listener_call(&event);
    da50:	a801      	add	r0, sp, #4
    da52:	f7fe ff0b 	bl	c86c <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
    da56:	4629      	mov	r1, r5
    da58:	a801      	add	r0, sp, #4
    da5a:	f7fe ff31 	bl	c8c0 <ble_gap_call_conn_event_cb>
}
    da5e:	b00f      	add	sp, #60	; 0x3c
    da60:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000da62 <ble_gap_mtu_event>:
{
    da62:	b570      	push	{r4, r5, r6, lr}
    da64:	b08e      	sub	sp, #56	; 0x38
    da66:	4604      	mov	r4, r0
    da68:	460e      	mov	r6, r1
    da6a:	4615      	mov	r5, r2
    memset(&event, 0, sizeof event);
    da6c:	2234      	movs	r2, #52	; 0x34
    da6e:	2100      	movs	r1, #0
    da70:	a801      	add	r0, sp, #4
    da72:	f7fd fec4 	bl	b7fe <memset>
    event.type = BLE_GAP_EVENT_MTU;
    da76:	230f      	movs	r3, #15
    da78:	f88d 3004 	strb.w	r3, [sp, #4]
    event.mtu.conn_handle = conn_handle;
    da7c:	f8ad 4008 	strh.w	r4, [sp, #8]
    event.mtu.channel_id = cid;
    da80:	f8ad 600a 	strh.w	r6, [sp, #10]
    event.mtu.value = mtu;
    da84:	f8ad 500c 	strh.w	r5, [sp, #12]
    ble_gap_event_listener_call(&event);
    da88:	a801      	add	r0, sp, #4
    da8a:	f7fe feef 	bl	c86c <ble_gap_event_listener_call>
    ble_gap_call_conn_event_cb(&event, conn_handle);
    da8e:	4621      	mov	r1, r4
    da90:	a801      	add	r0, sp, #4
    da92:	f7fe ff15 	bl	c8c0 <ble_gap_call_conn_event_cb>
}
    da96:	b00e      	add	sp, #56	; 0x38
    da98:	bd70      	pop	{r4, r5, r6, pc}
	...

0000da9c <ble_gap_preempt_no_lock>:
{
    da9c:	b508      	push	{r3, lr}
    rc = ble_gap_adv_stop_no_lock();
    da9e:	f7ff fc33 	bl	d308 <ble_gap_adv_stop_no_lock>
    if (rc == 0) {
    daa2:	b920      	cbnz	r0, daae <ble_gap_preempt_no_lock+0x12>
        ble_gap_slave[0].preempted = 1;
    daa4:	4a05      	ldr	r2, [pc, #20]	; (dabc <ble_gap_preempt_no_lock+0x20>)
    daa6:	7d53      	ldrb	r3, [r2, #21]
    daa8:	f043 0304 	orr.w	r3, r3, #4
    daac:	7553      	strb	r3, [r2, #21]
    rc = ble_gap_conn_cancel_no_lock();
    daae:	f7ff fc51 	bl	d354 <ble_gap_conn_cancel_no_lock>
    if (rc == 0) {
    dab2:	b910      	cbnz	r0, daba <ble_gap_preempt_no_lock+0x1e>
        ble_gap_master.preempted_op = BLE_GAP_OP_M_CONN;
    dab4:	4b01      	ldr	r3, [pc, #4]	; (dabc <ble_gap_preempt_no_lock+0x20>)
    dab6:	2202      	movs	r2, #2
    dab8:	741a      	strb	r2, [r3, #16]
}
    daba:	bd08      	pop	{r3, pc}
    dabc:	200004b8 	.word	0x200004b8

0000dac0 <ble_gap_preempt>:
{
    dac0:	b508      	push	{r3, lr}
    ble_hs_lock();
    dac2:	f001 ffef 	bl	faa4 <ble_hs_lock>
    if (!ble_gap_is_preempted()) {
    dac6:	f7fe fe15 	bl	c6f4 <ble_gap_is_preempted>
    daca:	b110      	cbz	r0, dad2 <ble_gap_preempt+0x12>
    ble_hs_unlock();
    dacc:	f001 ffee 	bl	faac <ble_hs_unlock>
}
    dad0:	bd08      	pop	{r3, pc}
        ble_gap_preempt_no_lock();
    dad2:	f7ff ffe3 	bl	da9c <ble_gap_preempt_no_lock>
    dad6:	e7f9      	b.n	dacc <ble_gap_preempt+0xc>

0000dad8 <ble_gap_preempt_done>:
{
    dad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    dada:	b08f      	sub	sp, #60	; 0x3c
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
    dadc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dae0:	482b      	ldr	r0, [pc, #172]	; (db90 <ble_gap_preempt_done+0xb8>)
    dae2:	f7fd f92f 	bl	ad44 <os_mutex_pend>
    memset(slaves, 0, sizeof(slaves));
    dae6:	4b2b      	ldr	r3, [pc, #172]	; (db94 <ble_gap_preempt_done+0xbc>)
    dae8:	2400      	movs	r4, #0
    daea:	601c      	str	r4, [r3, #0]
    daec:	605c      	str	r4, [r3, #4]
    ble_hs_lock();
    daee:	f001 ffd9 	bl	faa4 <ble_hs_lock>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
    daf2:	4623      	mov	r3, r4
    daf4:	2b00      	cmp	r3, #0
    daf6:	dd14      	ble.n	db22 <ble_gap_preempt_done+0x4a>
    if (ble_gap_master.preempted_op == BLE_GAP_OP_M_DISC) {
    daf8:	4b27      	ldr	r3, [pc, #156]	; (db98 <ble_gap_preempt_done+0xc0>)
    dafa:	7c1b      	ldrb	r3, [r3, #16]
    dafc:	2b01      	cmp	r3, #1
    dafe:	d028      	beq.n	db52 <ble_gap_preempt_done+0x7a>
    disc_preempted = 0;
    db00:	2700      	movs	r7, #0
    ble_hs_unlock();
    db02:	f001 ffd3 	bl	faac <ble_hs_unlock>
    event.type = BLE_GAP_EVENT_ADV_COMPLETE;
    db06:	2309      	movs	r3, #9
    db08:	f88d 3004 	strb.w	r3, [sp, #4]
    event.adv_complete.reason = BLE_HS_EPREEMPTED;
    db0c:	231d      	movs	r3, #29
    db0e:	9302      	str	r3, [sp, #8]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
    db10:	2400      	movs	r4, #0
    db12:	2c00      	cmp	r4, #0
    db14:	dd24      	ble.n	db60 <ble_gap_preempt_done+0x88>
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
    db16:	481e      	ldr	r0, [pc, #120]	; (db90 <ble_gap_preempt_done+0xb8>)
    db18:	f7fd f8b4 	bl	ac84 <os_mutex_release>
    if (disc_preempted) {
    db1c:	bb67      	cbnz	r7, db78 <ble_gap_preempt_done+0xa0>
}
    db1e:	b00f      	add	sp, #60	; 0x3c
    db20:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_gap_slave[i].preempted) {
    db22:	4a1d      	ldr	r2, [pc, #116]	; (db98 <ble_gap_preempt_done+0xc0>)
    db24:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    db28:	7d52      	ldrb	r2, [r2, #21]
    db2a:	f012 0f04 	tst.w	r2, #4
    db2e:	d00e      	beq.n	db4e <ble_gap_preempt_done+0x76>
            ble_gap_slave[i].preempted = 0;
    db30:	4a19      	ldr	r2, [pc, #100]	; (db98 <ble_gap_preempt_done+0xc0>)
    db32:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    db36:	7d50      	ldrb	r0, [r2, #21]
    db38:	f36f 0082 	bfc	r0, #2, #1
    db3c:	7550      	strb	r0, [r2, #21]
            slaves[i].cb = ble_gap_slave[i].cb;
    db3e:	69d0      	ldr	r0, [r2, #28]
    db40:	4914      	ldr	r1, [pc, #80]	; (db94 <ble_gap_preempt_done+0xbc>)
    db42:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
            slaves[i].arg = ble_gap_slave[i].cb_arg;
    db46:	6a12      	ldr	r2, [r2, #32]
    db48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    db4c:	604a      	str	r2, [r1, #4]
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
    db4e:	3301      	adds	r3, #1
    db50:	e7d0      	b.n	daf4 <ble_gap_preempt_done+0x1c>
        ble_gap_master.preempted_op = BLE_GAP_OP_NULL;
    db52:	4b11      	ldr	r3, [pc, #68]	; (db98 <ble_gap_preempt_done+0xc0>)
    db54:	2200      	movs	r2, #0
    db56:	741a      	strb	r2, [r3, #16]
        master_cb = ble_gap_master.cb;
    db58:	689d      	ldr	r5, [r3, #8]
        master_arg = ble_gap_master.cb_arg;
    db5a:	68de      	ldr	r6, [r3, #12]
        disc_preempted = 1;
    db5c:	2701      	movs	r7, #1
    db5e:	e7d0      	b.n	db02 <ble_gap_preempt_done+0x2a>
        if (slaves[i].cb) {
    db60:	4b0c      	ldr	r3, [pc, #48]	; (db94 <ble_gap_preempt_done+0xbc>)
    db62:	f853 1034 	ldr.w	r1, [r3, r4, lsl #3]
    db66:	b129      	cbz	r1, db74 <ble_gap_preempt_done+0x9c>
            ble_gap_call_event_cb(&event, slaves[i].cb, slaves[i].arg);
    db68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
    db6c:	685a      	ldr	r2, [r3, #4]
    db6e:	a801      	add	r0, sp, #4
    db70:	f7fe fdaa 	bl	c6c8 <ble_gap_call_event_cb>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
    db74:	3401      	adds	r4, #1
    db76:	e7cc      	b.n	db12 <ble_gap_preempt_done+0x3a>
        event.type = BLE_GAP_EVENT_DISC_COMPLETE;
    db78:	2308      	movs	r3, #8
    db7a:	f88d 3004 	strb.w	r3, [sp, #4]
        event.disc_complete.reason = BLE_HS_EPREEMPTED;
    db7e:	231d      	movs	r3, #29
    db80:	9302      	str	r3, [sp, #8]
        ble_gap_call_event_cb(&event, master_cb, master_arg);
    db82:	4632      	mov	r2, r6
    db84:	4629      	mov	r1, r5
    db86:	a801      	add	r0, sp, #4
    db88:	f7fe fd9e 	bl	c6c8 <ble_gap_call_event_cb>
}
    db8c:	e7c7      	b.n	db1e <ble_gap_preempt_done+0x46>
    db8e:	bf00      	nop
    db90:	200070d0 	.word	0x200070d0
    db94:	200070dc 	.word	0x200070dc
    db98:	200004b8 	.word	0x200004b8

0000db9c <ble_gap_event_listener_unregister>:
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
    db9c:	4b0c      	ldr	r3, [pc, #48]	; (dbd0 <ble_gap_event_listener_unregister+0x34>)
    db9e:	681a      	ldr	r2, [r3, #0]
    dba0:	4613      	mov	r3, r2
    dba2:	b11b      	cbz	r3, dbac <ble_gap_event_listener_unregister+0x10>
        if (evl == listener) {
    dba4:	4283      	cmp	r3, r0
    dba6:	d001      	beq.n	dbac <ble_gap_event_listener_unregister+0x10>
    SLIST_FOREACH(evl, &ble_gap_event_listener_list, link) {
    dba8:	689b      	ldr	r3, [r3, #8]
    dbaa:	e7fa      	b.n	dba2 <ble_gap_event_listener_unregister+0x6>
    if (!evl) {
    dbac:	b173      	cbz	r3, dbcc <ble_gap_event_listener_unregister+0x30>
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
    dbae:	4282      	cmp	r2, r0
    dbb0:	d105      	bne.n	dbbe <ble_gap_event_listener_unregister+0x22>
    dbb2:	6892      	ldr	r2, [r2, #8]
    dbb4:	4b06      	ldr	r3, [pc, #24]	; (dbd0 <ble_gap_event_listener_unregister+0x34>)
    dbb6:	601a      	str	r2, [r3, #0]
        rc = 0;
    dbb8:	2000      	movs	r0, #0
    dbba:	4770      	bx	lr
        SLIST_REMOVE(&ble_gap_event_listener_list, listener,
    dbbc:	461a      	mov	r2, r3
    dbbe:	6893      	ldr	r3, [r2, #8]
    dbc0:	4283      	cmp	r3, r0
    dbc2:	d1fb      	bne.n	dbbc <ble_gap_event_listener_unregister+0x20>
    dbc4:	689b      	ldr	r3, [r3, #8]
    dbc6:	6093      	str	r3, [r2, #8]
        rc = 0;
    dbc8:	2000      	movs	r0, #0
    dbca:	4770      	bx	lr
        rc = BLE_HS_ENOENT;
    dbcc:	2005      	movs	r0, #5
}
    dbce:	4770      	bx	lr
    dbd0:	20007094 	.word	0x20007094

0000dbd4 <ble_gap_init>:
 * $init                                                                     *
 *****************************************************************************/

int
ble_gap_init(void)
{
    dbd4:	b510      	push	{r4, lr}
    dbd6:	b082      	sub	sp, #8
    int rc;

    memset(&ble_gap_master, 0, sizeof(ble_gap_master));
    dbd8:	4b11      	ldr	r3, [pc, #68]	; (dc20 <ble_gap_init+0x4c>)
    dbda:	2400      	movs	r4, #0
    dbdc:	601c      	str	r4, [r3, #0]
    dbde:	605c      	str	r4, [r3, #4]
    dbe0:	609c      	str	r4, [r3, #8]
    dbe2:	60dc      	str	r4, [r3, #12]
    dbe4:	611c      	str	r4, [r3, #16]
    memset(ble_gap_slave, 0, sizeof(ble_gap_slave));
    dbe6:	615c      	str	r4, [r3, #20]
    dbe8:	619c      	str	r4, [r3, #24]
    dbea:	61dc      	str	r4, [r3, #28]
    dbec:	621c      	str	r4, [r3, #32]
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
    dbee:	480d      	ldr	r0, [pc, #52]	; (dc24 <ble_gap_init+0x50>)
    dbf0:	f7fd f83e 	bl	ac70 <os_mutex_init>
    memset(&ble_gap_sync, 0, sizeof(ble_gap_sync));
#endif

    ble_npl_mutex_init(&preempt_done_mutex);

    SLIST_INIT(&ble_gap_update_entries);
    dbf4:	4b0c      	ldr	r3, [pc, #48]	; (dc28 <ble_gap_init+0x54>)
    dbf6:	601c      	str	r4, [r3, #0]
    SLIST_INIT(&ble_gap_event_listener_list);
    dbf8:	4b0c      	ldr	r3, [pc, #48]	; (dc2c <ble_gap_init+0x58>)
    dbfa:	601c      	str	r4, [r3, #0]

    rc = os_mempool_init(&ble_gap_update_entry_pool,
    dbfc:	4b0c      	ldr	r3, [pc, #48]	; (dc30 <ble_gap_init+0x5c>)
    dbfe:	9300      	str	r3, [sp, #0]
    dc00:	4b0c      	ldr	r3, [pc, #48]	; (dc34 <ble_gap_init+0x60>)
    dc02:	2218      	movs	r2, #24
    dc04:	2101      	movs	r1, #1
    dc06:	480c      	ldr	r0, [pc, #48]	; (dc38 <ble_gap_init+0x64>)
    dc08:	f7fc fef4 	bl	a9f4 <os_mempool_init>
                         MYNEWT_VAL(BLE_GAP_MAX_PENDING_CONN_PARAM_UPDATE),
                         sizeof (struct ble_gap_update_entry),
                         ble_gap_update_entry_mem,
                         "ble_gap_update");
    switch (rc) {
    dc0c:	b118      	cbz	r0, dc16 <ble_gap_init+0x42>
    dc0e:	2801      	cmp	r0, #1
    dc10:	d004      	beq.n	dc1c <ble_gap_init+0x48>
        break;
    case OS_ENOMEM:
        rc = BLE_HS_ENOMEM;
        goto err;
    default:
        rc = BLE_HS_EOS;
    dc12:	200b      	movs	r0, #11
        goto err;
    dc14:	e000      	b.n	dc18 <ble_gap_init+0x44>
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_gap_stats), "ble_gap");
    if (rc != 0) {
        goto err;
    }

    return 0;
    dc16:	2000      	movs	r0, #0

err:
    return rc;
}
    dc18:	b002      	add	sp, #8
    dc1a:	bd10      	pop	{r4, pc}
        rc = BLE_HS_ENOMEM;
    dc1c:	2006      	movs	r0, #6
    dc1e:	e7fb      	b.n	dc18 <ble_gap_init+0x44>
    dc20:	200004b8 	.word	0x200004b8
    dc24:	200070d0 	.word	0x200070d0
    dc28:	20007098 	.word	0x20007098
    dc2c:	20007094 	.word	0x20007094
    dc30:	00028ca4 	.word	0x00028ca4
    dc34:	2000709c 	.word	0x2000709c
    dc38:	200070b4 	.word	0x200070b4

0000dc3c <ble_gattc_err_dispatch_get>:
static ble_gattc_err_fn *
ble_gattc_err_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_err_dispatch[op];
}
    dc3c:	4b01      	ldr	r3, [pc, #4]	; (dc44 <ble_gattc_err_dispatch_get+0x8>)
    dc3e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    dc42:	4770      	bx	lr
    dc44:	00028cc0 	.word	0x00028cc0

0000dc48 <ble_gattc_resume_dispatch_get>:
static ble_gattc_resume_fn *
ble_gattc_resume_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_resume_dispatch[op];
}
    dc48:	4b01      	ldr	r3, [pc, #4]	; (dc50 <ble_gattc_resume_dispatch_get+0x8>)
    dc4a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    dc4e:	4770      	bx	lr
    dc50:	00028d10 	.word	0x00028d10

0000dc54 <ble_gattc_tmo_dispatch_get>:
static ble_gattc_tmo_fn *
ble_gattc_tmo_dispatch_get(uint8_t op)
{
    BLE_HS_DBG_ASSERT(op < BLE_GATT_OP_CNT);
    return ble_gattc_tmo_dispatch[op];
}
    dc54:	4b01      	ldr	r3, [pc, #4]	; (dc5c <ble_gattc_tmo_dispatch_get+0x8>)
    dc56:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    dc5a:	4770      	bx	lr
    dc5c:	00028d4c 	.word	0x00028d4c

0000dc60 <ble_gattc_proc_matches_conn_op>:
{
    const struct ble_gattc_criteria_conn_op *criteria;

    criteria = arg;

    if (criteria->conn_handle != proc->conn_handle) {
    dc60:	880a      	ldrh	r2, [r1, #0]
    dc62:	8903      	ldrh	r3, [r0, #8]
    dc64:	429a      	cmp	r2, r3
    dc66:	d001      	beq.n	dc6c <ble_gattc_proc_matches_conn_op+0xc>
        return 0;
    dc68:	2000      	movs	r0, #0
    dc6a:	4770      	bx	lr
    }

    if (criteria->op != proc->op && criteria->op != BLE_GATT_OP_NONE) {
    dc6c:	788b      	ldrb	r3, [r1, #2]
    dc6e:	7a82      	ldrb	r2, [r0, #10]
    dc70:	4293      	cmp	r3, r2
    dc72:	d005      	beq.n	dc80 <ble_gattc_proc_matches_conn_op+0x20>
    dc74:	2bff      	cmp	r3, #255	; 0xff
    dc76:	d001      	beq.n	dc7c <ble_gattc_proc_matches_conn_op+0x1c>
        return 0;
    dc78:	2000      	movs	r0, #0
    }

    return 1;
}
    dc7a:	4770      	bx	lr
    return 1;
    dc7c:	2001      	movs	r0, #1
    dc7e:	4770      	bx	lr
    dc80:	2001      	movs	r0, #1
    dc82:	4770      	bx	lr

0000dc84 <ble_gattc_proc_matches_expired>:
    struct ble_gattc_criteria_exp *criteria;
    int32_t time_diff;

    criteria = arg;

    time_diff = proc->exp_os_ticks - criteria->now;
    dc84:	6843      	ldr	r3, [r0, #4]
    dc86:	680a      	ldr	r2, [r1, #0]
    dc88:	1a9b      	subs	r3, r3, r2

    if (time_diff <= 0) {
    dc8a:	2b00      	cmp	r3, #0
    dc8c:	dd05      	ble.n	dc9a <ble_gattc_proc_matches_expired+0x16>
        /* Procedure is expired. */
        return 1;
    }

    /* Procedure isn't expired; determine if it is the next to expire. */
    if (time_diff < criteria->next_exp_in) {
    dc8e:	684a      	ldr	r2, [r1, #4]
    dc90:	429a      	cmp	r2, r3
    dc92:	dd04      	ble.n	dc9e <ble_gattc_proc_matches_expired+0x1a>
        criteria->next_exp_in = time_diff;
    dc94:	604b      	str	r3, [r1, #4]
    }
    return 0;
    dc96:	2000      	movs	r0, #0
    dc98:	4770      	bx	lr
        return 1;
    dc9a:	2001      	movs	r0, #1
    dc9c:	4770      	bx	lr
    return 0;
    dc9e:	2000      	movs	r0, #0
}
    dca0:	4770      	bx	lr

0000dca2 <ble_gattc_proc_matches_stalled>:
}

static int
ble_gattc_proc_matches_stalled(struct ble_gattc_proc *proc, void *unused)
{
    return proc->flags & BLE_GATTC_PROC_F_STALLED;
    dca2:	7ac0      	ldrb	r0, [r0, #11]
}
    dca4:	f000 0001 	and.w	r0, r0, #1
    dca8:	4770      	bx	lr

0000dcaa <ble_gattc_proc_timeout>:
    return diff;
}

static void
ble_gattc_proc_timeout(struct ble_gattc_proc *proc)
{
    dcaa:	b510      	push	{r4, lr}
    dcac:	4604      	mov	r4, r0
    ble_gattc_tmo_fn *cb;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    cb = ble_gattc_tmo_dispatch_get(proc->op);
    dcae:	7a80      	ldrb	r0, [r0, #10]
    dcb0:	f7ff ffd0 	bl	dc54 <ble_gattc_tmo_dispatch_get>
    if (cb != NULL) {
    dcb4:	b110      	cbz	r0, dcbc <ble_gattc_proc_timeout+0x12>
    dcb6:	4603      	mov	r3, r0
        cb(proc);
    dcb8:	4620      	mov	r0, r4
    dcba:	4798      	blx	r3
    }
}
    dcbc:	bd10      	pop	{r4, pc}
	...

0000dcc0 <ble_gattc_error>:
ble_gattc_error(int status, uint16_t att_handle)
{
    static struct ble_gatt_error error;

    /* For consistency, always indicate a handle of 0 on success. */
    if (status == 0 || status == BLE_HS_EDONE) {
    dcc0:	4603      	mov	r3, r0
    dcc2:	b118      	cbz	r0, dccc <ble_gattc_error+0xc>
    dcc4:	280e      	cmp	r0, #14
    dcc6:	d102      	bne.n	dcce <ble_gattc_error+0xe>
        att_handle = 0;
    dcc8:	2100      	movs	r1, #0
    dcca:	e000      	b.n	dcce <ble_gattc_error+0xe>
    dccc:	2100      	movs	r1, #0
    }

    error.status = status;
    dcce:	4802      	ldr	r0, [pc, #8]	; (dcd8 <ble_gattc_error+0x18>)
    dcd0:	8003      	strh	r3, [r0, #0]
    error.att_handle = att_handle;
    dcd2:	8041      	strh	r1, [r0, #2]
    return &error;
}
    dcd4:	4770      	bx	lr
    dcd6:	bf00      	nop
    dcd8:	200071ec 	.word	0x200071ec

0000dcdc <ble_gattc_mtu_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_mtu_cb(struct ble_gattc_proc *proc, int status, uint16_t att_handle,
                 uint16_t mtu)
{
    dcdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, mtu_fail);
    }

    if (proc->mtu.cb == NULL) {
    dce0:	68c6      	ldr	r6, [r0, #12]
    dce2:	b17e      	cbz	r6, dd04 <ble_gattc_mtu_cb+0x28>
    dce4:	461f      	mov	r7, r3
    dce6:	460d      	mov	r5, r1
    dce8:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->mtu.cb(proc->conn_handle,
    dcea:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                          ble_gattc_error(status, att_handle),
    dcee:	4611      	mov	r1, r2
    dcf0:	4628      	mov	r0, r5
    dcf2:	f7ff ffe5 	bl	dcc0 <ble_gattc_error>
        rc = proc->mtu.cb(proc->conn_handle,
    dcf6:	6923      	ldr	r3, [r4, #16]
    dcf8:	463a      	mov	r2, r7
    dcfa:	4601      	mov	r1, r0
    dcfc:	4640      	mov	r0, r8
    dcfe:	47b0      	blx	r6
                          mtu, proc->mtu.cb_arg);
    }

    return rc;
}
    dd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    dd04:	2000      	movs	r0, #0
    return rc;
    dd06:	e7fb      	b.n	dd00 <ble_gattc_mtu_cb+0x24>

0000dd08 <ble_gattc_mtu_tmo>:

static void
ble_gattc_mtu_tmo(struct ble_gattc_proc *proc)
{
    dd08:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_mtu_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
    dd0a:	2300      	movs	r3, #0
    dd0c:	461a      	mov	r2, r3
    dd0e:	210d      	movs	r1, #13
    dd10:	f7ff ffe4 	bl	dcdc <ble_gattc_mtu_cb>
}
    dd14:	bd08      	pop	{r3, pc}

0000dd16 <ble_gattc_mtu_err>:
/**
 * Handles an incoming ATT error response for the specified mtu-exchange proc.
 */
static void
ble_gattc_mtu_err(struct ble_gattc_proc *proc, int status, uint16_t att_handle)
{
    dd16:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_mtu_cb(proc, status, att_handle, 0);
    dd18:	2300      	movs	r3, #0
    dd1a:	f7ff ffdf 	bl	dcdc <ble_gattc_mtu_cb>
}
    dd1e:	bd08      	pop	{r3, pc}

0000dd20 <ble_gattc_disc_all_svcs_cb>:
 */
static int
ble_gattc_disc_all_svcs_cb(struct ble_gattc_proc *proc,
                           uint16_t status, uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
    dd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_all_svcs_fail);
    }

    if (proc->disc_all_svcs.cb == NULL) {
    dd24:	6906      	ldr	r6, [r0, #16]
    dd26:	b17e      	cbz	r6, dd48 <ble_gattc_disc_all_svcs_cb+0x28>
    dd28:	461f      	mov	r7, r3
    dd2a:	460d      	mov	r5, r1
    dd2c:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
    dd2e:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
    dd32:	4611      	mov	r1, r2
    dd34:	4628      	mov	r0, r5
    dd36:	f7ff ffc3 	bl	dcc0 <ble_gattc_error>
        rc = proc->disc_all_svcs.cb(proc->conn_handle,
    dd3a:	6963      	ldr	r3, [r4, #20]
    dd3c:	463a      	mov	r2, r7
    dd3e:	4601      	mov	r1, r0
    dd40:	4640      	mov	r0, r8
    dd42:	47b0      	blx	r6
                                    service, proc->disc_all_svcs.cb_arg);
    }

    return rc;
}
    dd44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    dd48:	2000      	movs	r0, #0
    return rc;
    dd4a:	e7fb      	b.n	dd44 <ble_gattc_disc_all_svcs_cb+0x24>

0000dd4c <ble_gattc_disc_all_svcs_tmo>:

static void
ble_gattc_disc_all_svcs_tmo(struct ble_gattc_proc *proc)
{
    dd4c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
    dd4e:	2300      	movs	r3, #0
    dd50:	461a      	mov	r2, r3
    dd52:	210d      	movs	r1, #13
    dd54:	f7ff ffe4 	bl	dd20 <ble_gattc_disc_all_svcs_cb>
}
    dd58:	bd08      	pop	{r3, pc}

0000dd5a <ble_gattc_disc_all_svcs_err>:
 * discover-all-services proc.
 */
static void
ble_gattc_disc_all_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
    dd5a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
    dd5c:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
    dd60:	d004      	beq.n	dd6c <ble_gattc_disc_all_svcs_err+0x12>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_svcs_cb(proc, status, att_handle, NULL);
    dd62:	2300      	movs	r3, #0
    dd64:	b289      	uxth	r1, r1
    dd66:	f7ff ffdb 	bl	dd20 <ble_gattc_disc_all_svcs_cb>
}
    dd6a:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
    dd6c:	210e      	movs	r1, #14
    dd6e:	e7f8      	b.n	dd62 <ble_gattc_disc_all_svcs_err+0x8>

0000dd70 <ble_gattc_disc_svc_uuid_cb>:
 */
static int
ble_gattc_disc_svc_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
    dd70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_svc_uuid_fail);
    }

    if (proc->disc_svc_uuid.cb == NULL) {
    dd74:	6a46      	ldr	r6, [r0, #36]	; 0x24
    dd76:	b17e      	cbz	r6, dd98 <ble_gattc_disc_svc_uuid_cb+0x28>
    dd78:	461f      	mov	r7, r3
    dd7a:	460d      	mov	r5, r1
    dd7c:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
    dd7e:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
    dd82:	4611      	mov	r1, r2
    dd84:	4628      	mov	r0, r5
    dd86:	f7ff ff9b 	bl	dcc0 <ble_gattc_error>
        rc = proc->disc_svc_uuid.cb(proc->conn_handle,
    dd8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dd8c:	463a      	mov	r2, r7
    dd8e:	4601      	mov	r1, r0
    dd90:	4640      	mov	r0, r8
    dd92:	47b0      	blx	r6
                                    service, proc->disc_svc_uuid.cb_arg);
    }

    return rc;
}
    dd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    dd98:	2000      	movs	r0, #0
    return rc;
    dd9a:	e7fb      	b.n	dd94 <ble_gattc_disc_svc_uuid_cb+0x24>

0000dd9c <ble_gattc_disc_svc_uuid_tmo>:

static void
ble_gattc_disc_svc_uuid_tmo(struct ble_gattc_proc *proc)
{
    dd9c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_svc_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
    dd9e:	2300      	movs	r3, #0
    dda0:	461a      	mov	r2, r3
    dda2:	210d      	movs	r1, #13
    dda4:	f7ff ffe4 	bl	dd70 <ble_gattc_disc_svc_uuid_cb>
}
    dda8:	bd08      	pop	{r3, pc}

0000ddaa <ble_gattc_disc_svc_uuid_err>:
 * discover-service-by-uuid proc.
 */
static void
ble_gattc_disc_svc_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
    ddaa:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
    ddac:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
    ddb0:	d003      	beq.n	ddba <ble_gattc_disc_svc_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_svc_uuid_cb(proc, status, att_handle, NULL);
    ddb2:	2300      	movs	r3, #0
    ddb4:	f7ff ffdc 	bl	dd70 <ble_gattc_disc_svc_uuid_cb>
}
    ddb8:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
    ddba:	210e      	movs	r1, #14
    ddbc:	e7f9      	b.n	ddb2 <ble_gattc_disc_svc_uuid_err+0x8>

0000ddbe <ble_gattc_find_inc_svcs_cb>:
 */
static int
ble_gattc_find_inc_svcs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle,
                           struct ble_gatt_svc *service)
{
    ddbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, find_inc_svcs_fail);
    }

    if (proc->find_inc_svcs.cb == NULL) {
    ddc2:	6946      	ldr	r6, [r0, #20]
    ddc4:	b17e      	cbz	r6, dde6 <ble_gattc_find_inc_svcs_cb+0x28>
    ddc6:	461f      	mov	r7, r3
    ddc8:	460d      	mov	r5, r1
    ddca:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
    ddcc:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
    ddd0:	4611      	mov	r1, r2
    ddd2:	4628      	mov	r0, r5
    ddd4:	f7ff ff74 	bl	dcc0 <ble_gattc_error>
        rc = proc->find_inc_svcs.cb(proc->conn_handle,
    ddd8:	69a3      	ldr	r3, [r4, #24]
    ddda:	463a      	mov	r2, r7
    dddc:	4601      	mov	r1, r0
    ddde:	4640      	mov	r0, r8
    dde0:	47b0      	blx	r6
                                    service, proc->find_inc_svcs.cb_arg);
    }

    return rc;
}
    dde2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    dde6:	2000      	movs	r0, #0
    return rc;
    dde8:	e7fb      	b.n	dde2 <ble_gattc_find_inc_svcs_cb+0x24>

0000ddea <ble_gattc_find_inc_svcs_tmo>:

static void
ble_gattc_find_inc_svcs_tmo(struct ble_gattc_proc *proc)
{
    ddea:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_find_inc_svcs_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
    ddec:	2300      	movs	r3, #0
    ddee:	461a      	mov	r2, r3
    ddf0:	210d      	movs	r1, #13
    ddf2:	f7ff ffe4 	bl	ddbe <ble_gattc_find_inc_svcs_cb>
}
    ddf6:	bd08      	pop	{r3, pc}

0000ddf8 <ble_gattc_find_inc_svcs_err>:
 * find-included-services proc.
 */
static void
ble_gattc_find_inc_svcs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
    ddf8:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (proc->find_inc_svcs.cur_start == 0 &&
    ddfa:	8a03      	ldrh	r3, [r0, #16]
    ddfc:	b913      	cbnz	r3, de04 <ble_gattc_find_inc_svcs_err+0xc>
    ddfe:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
    de02:	d003      	beq.n	de0c <ble_gattc_find_inc_svcs_err+0x14>

        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_find_inc_svcs_cb(proc, status, att_handle, NULL);
    de04:	2300      	movs	r3, #0
    de06:	f7ff ffda 	bl	ddbe <ble_gattc_find_inc_svcs_cb>
}
    de0a:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
    de0c:	210e      	movs	r1, #14
    de0e:	e7f9      	b.n	de04 <ble_gattc_find_inc_svcs_err+0xc>

0000de10 <ble_gattc_disc_all_chrs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_chrs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
    de10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_all_chrs_fail);
    }

    if (proc->disc_all_chrs.cb == NULL) {
    de14:	6906      	ldr	r6, [r0, #16]
    de16:	b17e      	cbz	r6, de38 <ble_gattc_disc_all_chrs_cb+0x28>
    de18:	461f      	mov	r7, r3
    de1a:	460d      	mov	r5, r1
    de1c:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
    de1e:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle), chr,
    de22:	4611      	mov	r1, r2
    de24:	4628      	mov	r0, r5
    de26:	f7ff ff4b 	bl	dcc0 <ble_gattc_error>
        rc = proc->disc_all_chrs.cb(proc->conn_handle,
    de2a:	6963      	ldr	r3, [r4, #20]
    de2c:	463a      	mov	r2, r7
    de2e:	4601      	mov	r1, r0
    de30:	4640      	mov	r0, r8
    de32:	47b0      	blx	r6
                                    proc->disc_all_chrs.cb_arg);
    }

    return rc;
}
    de34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    de38:	2000      	movs	r0, #0
    return rc;
    de3a:	e7fb      	b.n	de34 <ble_gattc_disc_all_chrs_cb+0x24>

0000de3c <ble_gattc_disc_all_chrs_tmo>:

static void
ble_gattc_disc_all_chrs_tmo(struct ble_gattc_proc *proc)
{
    de3c:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_chrs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
    de3e:	2300      	movs	r3, #0
    de40:	461a      	mov	r2, r3
    de42:	210d      	movs	r1, #13
    de44:	f7ff ffe4 	bl	de10 <ble_gattc_disc_all_chrs_cb>
}
    de48:	bd08      	pop	{r3, pc}

0000de4a <ble_gattc_disc_all_chrs_err>:
 * discover-all-characteristics proc.
 */
static void
ble_gattc_disc_all_chrs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
    de4a:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
    de4c:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
    de50:	d003      	beq.n	de5a <ble_gattc_disc_all_chrs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_chrs_cb(proc, status, att_handle, NULL);
    de52:	2300      	movs	r3, #0
    de54:	f7ff ffdc 	bl	de10 <ble_gattc_disc_all_chrs_cb>
}
    de58:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
    de5a:	210e      	movs	r1, #14
    de5c:	e7f9      	b.n	de52 <ble_gattc_disc_all_chrs_err+0x8>

0000de5e <ble_gattc_disc_chr_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_chr_uuid_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_chr *chr)
{
    de5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_chrs_uuid_fail);
    }

    if (proc->disc_chr_uuid.cb == NULL) {
    de62:	6a46      	ldr	r6, [r0, #36]	; 0x24
    de64:	b17e      	cbz	r6, de86 <ble_gattc_disc_chr_uuid_cb+0x28>
    de66:	461f      	mov	r7, r3
    de68:	460d      	mov	r5, r1
    de6a:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
    de6c:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle), chr,
    de70:	4611      	mov	r1, r2
    de72:	4628      	mov	r0, r5
    de74:	f7ff ff24 	bl	dcc0 <ble_gattc_error>
        rc = proc->disc_chr_uuid.cb(proc->conn_handle,
    de78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    de7a:	463a      	mov	r2, r7
    de7c:	4601      	mov	r1, r0
    de7e:	4640      	mov	r0, r8
    de80:	47b0      	blx	r6
                                    proc->disc_chr_uuid.cb_arg);
    }

    return rc;
}
    de82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    de86:	2000      	movs	r0, #0
    return rc;
    de88:	e7fb      	b.n	de82 <ble_gattc_disc_chr_uuid_cb+0x24>

0000de8a <ble_gattc_disc_chr_uuid_tmo>:

static void
ble_gattc_disc_chr_uuid_tmo(struct ble_gattc_proc *proc)
{
    de8a:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_chr_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
    de8c:	2300      	movs	r3, #0
    de8e:	461a      	mov	r2, r3
    de90:	210d      	movs	r1, #13
    de92:	f7ff ffe4 	bl	de5e <ble_gattc_disc_chr_uuid_cb>
}
    de96:	bd08      	pop	{r3, pc}

0000de98 <ble_gattc_disc_chr_uuid_err>:
 * discover-characteristic-by-uuid proc.
 */
static void
ble_gattc_disc_chr_uuid_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
    de98:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
    de9a:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
    de9e:	d003      	beq.n	dea8 <ble_gattc_disc_chr_uuid_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_chr_uuid_cb(proc, status, att_handle, NULL);
    dea0:	2300      	movs	r3, #0
    dea2:	f7ff ffdc 	bl	de5e <ble_gattc_disc_chr_uuid_cb>
}
    dea6:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
    dea8:	210e      	movs	r1, #14
    deaa:	e7f9      	b.n	dea0 <ble_gattc_disc_chr_uuid_err+0x8>

0000deac <ble_gattc_disc_all_dscs_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_disc_all_dscs_cb(struct ble_gattc_proc *proc, int status,
                           uint16_t att_handle, struct ble_gatt_dsc *dsc)
{
    deac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    deb0:	b082      	sub	sp, #8

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, disc_all_dscs_fail);
    }

    if (proc->disc_all_dscs.cb == NULL) {
    deb2:	6946      	ldr	r6, [r0, #20]
    deb4:	b196      	cbz	r6, dedc <ble_gattc_disc_all_dscs_cb+0x30>
    deb6:	461f      	mov	r7, r3
    deb8:	460d      	mov	r5, r1
    deba:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
    debc:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                    ble_gattc_error(status, att_handle),
    dec0:	4611      	mov	r1, r2
    dec2:	4628      	mov	r0, r5
    dec4:	f7ff fefc 	bl	dcc0 <ble_gattc_error>
        rc = proc->disc_all_dscs.cb(proc->conn_handle,
    dec8:	89a2      	ldrh	r2, [r4, #12]
    deca:	69a3      	ldr	r3, [r4, #24]
    decc:	9300      	str	r3, [sp, #0]
    dece:	463b      	mov	r3, r7
    ded0:	4601      	mov	r1, r0
    ded2:	4640      	mov	r0, r8
    ded4:	47b0      	blx	r6
                                    proc->disc_all_dscs.chr_val_handle,
                                    dsc, proc->disc_all_dscs.cb_arg);
    }

    return rc;
}
    ded6:	b002      	add	sp, #8
    ded8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    dedc:	2000      	movs	r0, #0
    return rc;
    dede:	e7fa      	b.n	ded6 <ble_gattc_disc_all_dscs_cb+0x2a>

0000dee0 <ble_gattc_disc_all_dscs_tmo>:

static void
ble_gattc_disc_all_dscs_tmo(struct ble_gattc_proc *proc)
{
    dee0:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_disc_all_dscs_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
    dee2:	2300      	movs	r3, #0
    dee4:	461a      	mov	r2, r3
    dee6:	210d      	movs	r1, #13
    dee8:	f7ff ffe0 	bl	deac <ble_gattc_disc_all_dscs_cb>
}
    deec:	bd08      	pop	{r3, pc}

0000deee <ble_gattc_disc_all_dscs_err>:
 * discover-all-descriptors proc.
 */
static void
ble_gattc_disc_all_dscs_err(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
    deee:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    if (status == BLE_HS_ATT_ERR(BLE_ATT_ERR_ATTR_NOT_FOUND)) {
    def0:	f5b1 7f85 	cmp.w	r1, #266	; 0x10a
    def4:	d003      	beq.n	defe <ble_gattc_disc_all_dscs_err+0x10>
        /* Discovery is complete. */
        status = BLE_HS_EDONE;
    }

    ble_gattc_disc_all_dscs_cb(proc, status, att_handle, NULL);
    def6:	2300      	movs	r3, #0
    def8:	f7ff ffd8 	bl	deac <ble_gattc_disc_all_dscs_cb>
}
    defc:	bd08      	pop	{r3, pc}
        status = BLE_HS_EDONE;
    defe:	210e      	movs	r1, #14
    df00:	e7f9      	b.n	def6 <ble_gattc_disc_all_dscs_err+0x8>

0000df02 <ble_gattc_read_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_cb(struct ble_gattc_proc *proc, int status,
                  uint16_t att_handle, struct ble_gatt_attr *attr)
{
    df02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, read_fail);
    }

    if (proc->read.cb == NULL) {
    df06:	6906      	ldr	r6, [r0, #16]
    df08:	b17e      	cbz	r6, df2a <ble_gattc_read_cb+0x28>
    df0a:	461f      	mov	r7, r3
    df0c:	460d      	mov	r5, r1
    df0e:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read.cb(proc->conn_handle,
    df10:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                           ble_gattc_error(status, att_handle), attr,
    df14:	4611      	mov	r1, r2
    df16:	4628      	mov	r0, r5
    df18:	f7ff fed2 	bl	dcc0 <ble_gattc_error>
        rc = proc->read.cb(proc->conn_handle,
    df1c:	6963      	ldr	r3, [r4, #20]
    df1e:	463a      	mov	r2, r7
    df20:	4601      	mov	r1, r0
    df22:	4640      	mov	r0, r8
    df24:	47b0      	blx	r6
                           proc->read.cb_arg);
    }

    return rc;
}
    df26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    df2a:	2000      	movs	r0, #0
    return rc;
    df2c:	e7fb      	b.n	df26 <ble_gattc_read_cb+0x24>

0000df2e <ble_gattc_read_tmo>:

static void
ble_gattc_read_tmo(struct ble_gattc_proc *proc)
{
    df2e:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
    df30:	2300      	movs	r3, #0
    df32:	461a      	mov	r2, r3
    df34:	210d      	movs	r1, #13
    df36:	f7ff ffe4 	bl	df02 <ble_gattc_read_cb>
}
    df3a:	bd08      	pop	{r3, pc}

0000df3c <ble_gattc_read_err>:
 * read-characteristic-value proc.
 */
static void
ble_gattc_read_err(struct ble_gattc_proc *proc, int status,
                   uint16_t att_handle)
{
    df3c:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_cb(proc, status, att_handle, NULL);
    df3e:	2300      	movs	r3, #0
    df40:	f7ff ffdf 	bl	df02 <ble_gattc_read_cb>
}
    df44:	bd08      	pop	{r3, pc}

0000df46 <ble_gattc_read_uuid_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_uuid_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
    df46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, read_uuid_fail);
    }

    if (proc->read_uuid.cb == NULL) {
    df4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
    df4c:	b17e      	cbz	r6, df6e <ble_gattc_read_uuid_cb+0x28>
    df4e:	461f      	mov	r7, r3
    df50:	460d      	mov	r5, r1
    df52:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read_uuid.cb(proc->conn_handle,
    df54:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                ble_gattc_error(status, att_handle), attr,
    df58:	4611      	mov	r1, r2
    df5a:	4628      	mov	r0, r5
    df5c:	f7ff feb0 	bl	dcc0 <ble_gattc_error>
        rc = proc->read_uuid.cb(proc->conn_handle,
    df60:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    df62:	463a      	mov	r2, r7
    df64:	4601      	mov	r1, r0
    df66:	4640      	mov	r0, r8
    df68:	47b0      	blx	r6
                                proc->read_uuid.cb_arg);
    }

    return rc;
}
    df6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    df6e:	2000      	movs	r0, #0
    return rc;
    df70:	e7fb      	b.n	df6a <ble_gattc_read_uuid_cb+0x24>

0000df72 <ble_gattc_read_uuid_tmo>:

static void
ble_gattc_read_uuid_tmo(struct ble_gattc_proc *proc)
{
    df72:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
    df74:	2300      	movs	r3, #0
    df76:	461a      	mov	r2, r3
    df78:	210d      	movs	r1, #13
    df7a:	f7ff ffe4 	bl	df46 <ble_gattc_read_uuid_cb>
}
    df7e:	bd08      	pop	{r3, pc}

0000df80 <ble_gattc_read_uuid_err>:
 * read-using-characteristic-uuid proc.
 */
static void
ble_gattc_read_uuid_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
    df80:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_uuid_cb(proc, status, att_handle, NULL);
    df82:	2300      	movs	r3, #0
    df84:	f7ff ffdf 	bl	df46 <ble_gattc_read_uuid_cb>
}
    df88:	bd08      	pop	{r3, pc}

0000df8a <ble_gattc_read_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_long_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct ble_gatt_attr *attr)
{
    df8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, read_long_fail);
    }

    if (proc->read_long.cb == NULL) {
    df8e:	6906      	ldr	r6, [r0, #16]
    df90:	b17e      	cbz	r6, dfb2 <ble_gattc_read_long_cb+0x28>
    df92:	461f      	mov	r7, r3
    df94:	460d      	mov	r5, r1
    df96:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->read_long.cb(proc->conn_handle,
    df98:	f8b0 8008 	ldrh.w	r8, [r0, #8]
                                ble_gattc_error(status, att_handle), attr,
    df9c:	4611      	mov	r1, r2
    df9e:	4628      	mov	r0, r5
    dfa0:	f7ff fe8e 	bl	dcc0 <ble_gattc_error>
        rc = proc->read_long.cb(proc->conn_handle,
    dfa4:	6963      	ldr	r3, [r4, #20]
    dfa6:	463a      	mov	r2, r7
    dfa8:	4601      	mov	r1, r0
    dfaa:	4640      	mov	r0, r8
    dfac:	47b0      	blx	r6
                                proc->read_long.cb_arg);
    }

    return rc;
}
    dfae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 0;
    dfb2:	2000      	movs	r0, #0
    return rc;
    dfb4:	e7fb      	b.n	dfae <ble_gattc_read_long_cb+0x24>

0000dfb6 <ble_gattc_read_long_tmo>:

static void
ble_gattc_read_long_tmo(struct ble_gattc_proc *proc)
{
    dfb6:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_long_cb(proc, BLE_HS_ETIMEOUT, 0, NULL);
    dfb8:	2300      	movs	r3, #0
    dfba:	461a      	mov	r2, r3
    dfbc:	210d      	movs	r1, #13
    dfbe:	f7ff ffe4 	bl	df8a <ble_gattc_read_long_cb>
}
    dfc2:	bd08      	pop	{r3, pc}

0000dfc4 <ble_gattc_read_long_err>:
 * read-long-characteristic proc.
 */
static void
ble_gattc_read_long_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
    dfc4:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_long_cb(proc, status, att_handle, NULL);
    dfc6:	2300      	movs	r3, #0
    dfc8:	f7ff ffdf 	bl	df8a <ble_gattc_read_long_cb>
}
    dfcc:	bd08      	pop	{r3, pc}

0000dfce <ble_gattc_read_mult_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_read_mult_cb(struct ble_gattc_proc *proc, int status,
                       uint16_t att_handle, struct os_mbuf **om)
{
    dfce:	b5f0      	push	{r4, r5, r6, r7, lr}
    dfd0:	b083      	sub	sp, #12
    dfd2:	4605      	mov	r5, r0
    dfd4:	4608      	mov	r0, r1

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, read_mult_fail);
    }

    attr.handle = 0;
    dfd6:	2400      	movs	r4, #0
    dfd8:	f8ad 4000 	strh.w	r4, [sp]
    attr.offset = 0;
    dfdc:	f8ad 4002 	strh.w	r4, [sp, #2]
    if (om == NULL) {
    dfe0:	461c      	mov	r4, r3
    dfe2:	b18b      	cbz	r3, e008 <ble_gattc_read_mult_cb+0x3a>
        attr.om = NULL;
    } else {
        attr.om = *om;
    dfe4:	681b      	ldr	r3, [r3, #0]
    dfe6:	9301      	str	r3, [sp, #4]
    }

    if (proc->read_mult.cb == NULL) {
    dfe8:	6a2e      	ldr	r6, [r5, #32]
    dfea:	b17e      	cbz	r6, e00c <ble_gattc_read_mult_cb+0x3e>
        rc = 0;
    } else {
        rc = proc->read_mult.cb(proc->conn_handle,
    dfec:	892f      	ldrh	r7, [r5, #8]
                                ble_gattc_error(status, att_handle), &attr,
    dfee:	4611      	mov	r1, r2
    dff0:	f7ff fe66 	bl	dcc0 <ble_gattc_error>
        rc = proc->read_mult.cb(proc->conn_handle,
    dff4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    dff6:	466a      	mov	r2, sp
    dff8:	4601      	mov	r1, r0
    dffa:	4638      	mov	r0, r7
    dffc:	47b0      	blx	r6
                                proc->read_mult.cb_arg);
    }

    /* Indicate to the caller whether the application consumed the mbuf. */
    if (om != NULL) {
    dffe:	b10c      	cbz	r4, e004 <ble_gattc_read_mult_cb+0x36>
        *om = attr.om;
    e000:	9b01      	ldr	r3, [sp, #4]
    e002:	6023      	str	r3, [r4, #0]
    }

    return rc;
}
    e004:	b003      	add	sp, #12
    e006:	bdf0      	pop	{r4, r5, r6, r7, pc}
        attr.om = NULL;
    e008:	9301      	str	r3, [sp, #4]
    e00a:	e7ed      	b.n	dfe8 <ble_gattc_read_mult_cb+0x1a>
        rc = 0;
    e00c:	2000      	movs	r0, #0
    e00e:	e7f6      	b.n	dffe <ble_gattc_read_mult_cb+0x30>

0000e010 <ble_gattc_read_mult_tmo>:

static void
ble_gattc_read_mult_tmo(struct ble_gattc_proc *proc)
{
    e010:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_read_mult_cb(proc, BLE_HS_ETIMEOUT, 0, 0);
    e012:	2300      	movs	r3, #0
    e014:	461a      	mov	r2, r3
    e016:	210d      	movs	r1, #13
    e018:	f7ff ffd9 	bl	dfce <ble_gattc_read_mult_cb>
}
    e01c:	bd08      	pop	{r3, pc}

0000e01e <ble_gattc_read_mult_err>:
 * read-multiple-characteristics proc.
 */
static void
ble_gattc_read_mult_err(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
    e01e:	b508      	push	{r3, lr}
    ble_gattc_dbg_assert_proc_not_inserted(proc);
    ble_gattc_read_mult_cb(proc, status, att_handle, NULL);
    e020:	2300      	movs	r3, #0
    e022:	f7ff ffd4 	bl	dfce <ble_gattc_read_mult_cb>
}
    e026:	bd08      	pop	{r3, pc}

0000e028 <ble_gattc_write_long_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_long_cb(struct ble_gattc_proc *proc, int status,
                        uint16_t att_handle)
{
    e028:	b570      	push	{r4, r5, r6, lr}

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, write_long_fail);
    }

    if (proc->write_long.cb == NULL) {
    e02a:	6985      	ldr	r5, [r0, #24]
    e02c:	b16d      	cbz	r5, e04a <ble_gattc_write_long_cb+0x22>
    e02e:	460b      	mov	r3, r1
    e030:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->write_long.cb(proc->conn_handle,
    e032:	8906      	ldrh	r6, [r0, #8]
                                 ble_gattc_error(status, att_handle),
    e034:	4611      	mov	r1, r2
    e036:	4618      	mov	r0, r3
    e038:	f7ff fe42 	bl	dcc0 <ble_gattc_error>
        rc = proc->write_long.cb(proc->conn_handle,
    e03c:	69e3      	ldr	r3, [r4, #28]
    e03e:	f104 020c 	add.w	r2, r4, #12
    e042:	4601      	mov	r1, r0
    e044:	4630      	mov	r0, r6
    e046:	47a8      	blx	r5
                                 &proc->write_long.attr,
                                 proc->write_long.cb_arg);
    }

    return rc;
}
    e048:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
    e04a:	2000      	movs	r0, #0
    return rc;
    e04c:	e7fc      	b.n	e048 <ble_gattc_write_long_cb+0x20>

0000e04e <ble_gattc_write_long_tmo>:

static void
ble_gattc_write_long_tmo(struct ble_gattc_proc *proc)
{
    e04e:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_long_cb(proc, BLE_HS_ETIMEOUT, 0);
    e050:	2200      	movs	r2, #0
    e052:	210d      	movs	r1, #13
    e054:	f7ff ffe8 	bl	e028 <ble_gattc_write_long_cb>
}
    e058:	bd08      	pop	{r3, pc}

0000e05a <ble_gattc_write_reliable_cb>:
 *                                  is no callback).
 */
static int
ble_gattc_write_reliable_cb(struct ble_gattc_proc *proc, int status,
                            uint16_t att_handle)
{
    e05a:	b570      	push	{r4, r5, r6, lr}
    e05c:	b082      	sub	sp, #8

    if (status != 0 && status != BLE_HS_EDONE) {
        STATS_INC(ble_gattc_stats, write_reliable_fail);
    }

    if (proc->write_reliable.cb == NULL) {
    e05e:	6b05      	ldr	r5, [r0, #48]	; 0x30
    e060:	b18d      	cbz	r5, e086 <ble_gattc_write_reliable_cb+0x2c>
    e062:	460b      	mov	r3, r1
    e064:	4604      	mov	r4, r0
        rc = 0;
    } else {
        rc = proc->write_reliable.cb(proc->conn_handle,
    e066:	8906      	ldrh	r6, [r0, #8]
                                     ble_gattc_error(status, att_handle),
    e068:	4611      	mov	r1, r2
    e06a:	4618      	mov	r0, r3
    e06c:	f7ff fe28 	bl	dcc0 <ble_gattc_error>
        rc = proc->write_reliable.cb(proc->conn_handle,
    e070:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e074:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e076:	9200      	str	r2, [sp, #0]
    e078:	f104 020c 	add.w	r2, r4, #12
    e07c:	4601      	mov	r1, r0
    e07e:	4630      	mov	r0, r6
    e080:	47a8      	blx	r5
                                     proc->write_reliable.num_attrs,
                                     proc->write_reliable.cb_arg);
    }

    return rc;
}
    e082:	b002      	add	sp, #8
    e084:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
    e086:	2000      	movs	r0, #0
    return rc;
    e088:	e7fb      	b.n	e082 <ble_gattc_write_reliable_cb+0x28>

0000e08a <ble_gattc_write_reliable_tmo>:

static void
ble_gattc_write_reliable_tmo(struct ble_gattc_proc *proc)
{
    e08a:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gattc_write_reliable_cb(proc, BLE_HS_ETIMEOUT, 0);
    e08c:	2200      	movs	r2, #0
    e08e:	210d      	movs	r1, #13
    e090:	f7ff ffe3 	bl	e05a <ble_gattc_write_reliable_cb>
}
    e094:	bd08      	pop	{r3, pc}
	...

0000e098 <ble_gattc_proc_set_resume_timer>:
{
    e098:	b508      	push	{r3, lr}
    proc->flags |= BLE_GATTC_PROC_F_STALLED;
    e09a:	7ac3      	ldrb	r3, [r0, #11]
    e09c:	f043 0301 	orr.w	r3, r3, #1
    e0a0:	72c3      	strb	r3, [r0, #11]
    if (ble_gattc_resume_at == 0) {
    e0a2:	4b07      	ldr	r3, [pc, #28]	; (e0c0 <ble_gattc_proc_set_resume_timer+0x28>)
    e0a4:	681b      	ldr	r3, [r3, #0]
    e0a6:	b103      	cbz	r3, e0aa <ble_gattc_proc_set_resume_timer+0x12>
}
    e0a8:	bd08      	pop	{r3, pc}
    return os_time_get();
    e0aa:	f7fd f993 	bl	b3d4 <os_time_get>
        ble_gattc_resume_at = ble_npl_time_get() +
    e0ae:	3080      	adds	r0, #128	; 0x80
    e0b0:	4b03      	ldr	r3, [pc, #12]	; (e0c0 <ble_gattc_proc_set_resume_timer+0x28>)
    e0b2:	6018      	str	r0, [r3, #0]
        if (ble_gattc_resume_at == 0) {
    e0b4:	2800      	cmp	r0, #0
    e0b6:	d1f7      	bne.n	e0a8 <ble_gattc_proc_set_resume_timer+0x10>
            ble_gattc_resume_at++;
    e0b8:	3001      	adds	r0, #1
    e0ba:	6018      	str	r0, [r3, #0]
}
    e0bc:	e7f4      	b.n	e0a8 <ble_gattc_proc_set_resume_timer+0x10>
    e0be:	bf00      	nop
    e0c0:	200071e8 	.word	0x200071e8

0000e0c4 <ble_gattc_process_resume_status>:
    switch (status) {
    e0c4:	2906      	cmp	r1, #6
    e0c6:	d001      	beq.n	e0cc <ble_gattc_process_resume_status+0x8>
}
    e0c8:	4608      	mov	r0, r1
    e0ca:	4770      	bx	lr
{
    e0cc:	b508      	push	{r3, lr}
        ble_gattc_proc_set_resume_timer(proc);
    e0ce:	f7ff ffe3 	bl	e098 <ble_gattc_proc_set_resume_timer>
        return 0;
    e0d2:	2100      	movs	r1, #0
}
    e0d4:	4608      	mov	r0, r1
    e0d6:	bd08      	pop	{r3, pc}

0000e0d8 <ble_gattc_proc_set_exp_timer>:
{
    e0d8:	b510      	push	{r4, lr}
    e0da:	4604      	mov	r4, r0
    e0dc:	f7fd f97a 	bl	b3d4 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
    e0e0:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
    e0e4:	6060      	str	r0, [r4, #4]
}
    e0e6:	bd10      	pop	{r4, pc}

0000e0e8 <ble_gattc_ticks_until_resume>:
{
    e0e8:	b508      	push	{r3, lr}
    if (ble_gattc_resume_at == 0) {
    e0ea:	4b07      	ldr	r3, [pc, #28]	; (e108 <ble_gattc_ticks_until_resume+0x20>)
    e0ec:	681b      	ldr	r3, [r3, #0]
    e0ee:	b143      	cbz	r3, e102 <ble_gattc_ticks_until_resume+0x1a>
    e0f0:	f7fd f970 	bl	b3d4 <os_time_get>
    diff = ble_gattc_resume_at - now;
    e0f4:	4b04      	ldr	r3, [pc, #16]	; (e108 <ble_gattc_ticks_until_resume+0x20>)
    e0f6:	681b      	ldr	r3, [r3, #0]
    e0f8:	1a18      	subs	r0, r3, r0
    if (diff <= 0) {
    e0fa:	2800      	cmp	r0, #0
    e0fc:	dc03      	bgt.n	e106 <ble_gattc_ticks_until_resume+0x1e>
        return 0;
    e0fe:	2000      	movs	r0, #0
    e100:	e001      	b.n	e106 <ble_gattc_ticks_until_resume+0x1e>
        return BLE_HS_FOREVER;
    e102:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
}
    e106:	bd08      	pop	{r3, pc}
    e108:	200071e8 	.word	0x200071e8

0000e10c <ble_gattc_extract>:
{
    e10c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e110:	4681      	mov	r9, r0
    e112:	4688      	mov	r8, r1
    e114:	4693      	mov	fp, r2
    e116:	461f      	mov	r7, r3
    STAILQ_INIT(dst_list);
    e118:	2500      	movs	r5, #0
    e11a:	601d      	str	r5, [r3, #0]
    e11c:	605b      	str	r3, [r3, #4]
    ble_hs_lock();
    e11e:	f001 fcc1 	bl	faa4 <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_gattc_procs);
    e122:	4b17      	ldr	r3, [pc, #92]	; (e180 <ble_gattc_extract+0x74>)
    e124:	681c      	ldr	r4, [r3, #0]
    num_extracted = 0;
    e126:	46aa      	mov	sl, r5
    while (proc != NULL) {
    e128:	e00c      	b.n	e144 <ble_gattc_extract+0x38>
                STAILQ_REMOVE_HEAD(&ble_gattc_procs, next);
    e12a:	4a15      	ldr	r2, [pc, #84]	; (e180 <ble_gattc_extract+0x74>)
    e12c:	6813      	ldr	r3, [r2, #0]
    e12e:	681b      	ldr	r3, [r3, #0]
    e130:	6013      	str	r3, [r2, #0]
    e132:	b9ab      	cbnz	r3, e160 <ble_gattc_extract+0x54>
    e134:	4613      	mov	r3, r2
    e136:	605a      	str	r2, [r3, #4]
    e138:	e012      	b.n	e160 <ble_gattc_extract+0x54>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
    e13a:	4b11      	ldr	r3, [pc, #68]	; (e180 <ble_gattc_extract+0x74>)
    e13c:	605d      	str	r5, [r3, #4]
    e13e:	e00f      	b.n	e160 <ble_gattc_extract+0x54>
            prev = proc;
    e140:	4625      	mov	r5, r4
    e142:	4634      	mov	r4, r6
    while (proc != NULL) {
    e144:	b1c4      	cbz	r4, e178 <ble_gattc_extract+0x6c>
        next = STAILQ_NEXT(proc, next);
    e146:	6826      	ldr	r6, [r4, #0]
        if (cb(proc, arg)) {
    e148:	4641      	mov	r1, r8
    e14a:	4620      	mov	r0, r4
    e14c:	47c8      	blx	r9
    e14e:	2800      	cmp	r0, #0
    e150:	d0f6      	beq.n	e140 <ble_gattc_extract+0x34>
            if (prev == NULL) {
    e152:	2d00      	cmp	r5, #0
    e154:	d0e9      	beq.n	e12a <ble_gattc_extract+0x1e>
                STAILQ_REMOVE_AFTER(&ble_gattc_procs, prev, next);
    e156:	682b      	ldr	r3, [r5, #0]
    e158:	681b      	ldr	r3, [r3, #0]
    e15a:	602b      	str	r3, [r5, #0]
    e15c:	2b00      	cmp	r3, #0
    e15e:	d0ec      	beq.n	e13a <ble_gattc_extract+0x2e>
            STAILQ_INSERT_TAIL(dst_list, proc, next);
    e160:	2300      	movs	r3, #0
    e162:	6023      	str	r3, [r4, #0]
    e164:	687b      	ldr	r3, [r7, #4]
    e166:	601c      	str	r4, [r3, #0]
    e168:	607c      	str	r4, [r7, #4]
            if (max_procs > 0) {
    e16a:	f1bb 0f00 	cmp.w	fp, #0
    e16e:	dde8      	ble.n	e142 <ble_gattc_extract+0x36>
                num_extracted++;
    e170:	f10a 0a01 	add.w	sl, sl, #1
                if (num_extracted >= max_procs) {
    e174:	45d3      	cmp	fp, sl
    e176:	dce4      	bgt.n	e142 <ble_gattc_extract+0x36>
    ble_hs_unlock();
    e178:	f001 fc98 	bl	faac <ble_hs_unlock>
}
    e17c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e180:	200071e0 	.word	0x200071e0

0000e184 <ble_gattc_extract_expired>:
{
    e184:	b510      	push	{r4, lr}
    e186:	b082      	sub	sp, #8
    e188:	4604      	mov	r4, r0
    e18a:	f7fd f923 	bl	b3d4 <os_time_get>
    criteria.now = ble_npl_time_get();
    e18e:	9000      	str	r0, [sp, #0]
    criteria.next_exp_in = BLE_HS_FOREVER;
    e190:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    e194:	9301      	str	r3, [sp, #4]
    STAILQ_INIT(dst_list);
    e196:	2200      	movs	r2, #0
    e198:	6022      	str	r2, [r4, #0]
    e19a:	6064      	str	r4, [r4, #4]
    ble_gattc_extract(ble_gattc_proc_matches_expired, &criteria, 0, dst_list);
    e19c:	4623      	mov	r3, r4
    e19e:	4669      	mov	r1, sp
    e1a0:	4802      	ldr	r0, [pc, #8]	; (e1ac <ble_gattc_extract_expired+0x28>)
    e1a2:	f7ff ffb3 	bl	e10c <ble_gattc_extract>
}
    e1a6:	9801      	ldr	r0, [sp, #4]
    e1a8:	b002      	add	sp, #8
    e1aa:	bd10      	pop	{r4, pc}
    e1ac:	0000dc85 	.word	0x0000dc85

0000e1b0 <ble_gattc_extract_stalled>:
{
    e1b0:	b508      	push	{r3, lr}
    ble_gattc_extract(ble_gattc_proc_matches_stalled, NULL, 0, dst_list);
    e1b2:	4603      	mov	r3, r0
    e1b4:	2200      	movs	r2, #0
    e1b6:	4611      	mov	r1, r2
    e1b8:	4801      	ldr	r0, [pc, #4]	; (e1c0 <ble_gattc_extract_stalled+0x10>)
    e1ba:	f7ff ffa7 	bl	e10c <ble_gattc_extract>
}
    e1be:	bd08      	pop	{r3, pc}
    e1c0:	0000dca3 	.word	0x0000dca3

0000e1c4 <ble_gattc_extract_by_conn_op>:
{
    e1c4:	b500      	push	{lr}
    e1c6:	b083      	sub	sp, #12
    criteria.conn_handle = conn_handle;
    e1c8:	f8ad 0004 	strh.w	r0, [sp, #4]
    criteria.op = op;
    e1cc:	f88d 1006 	strb.w	r1, [sp, #6]
    ble_gattc_extract(ble_gattc_proc_matches_conn_op, &criteria, max_procs, dst_list);
    e1d0:	a901      	add	r1, sp, #4
    e1d2:	4803      	ldr	r0, [pc, #12]	; (e1e0 <ble_gattc_extract_by_conn_op+0x1c>)
    e1d4:	f7ff ff9a 	bl	e10c <ble_gattc_extract>
}
    e1d8:	b003      	add	sp, #12
    e1da:	f85d fb04 	ldr.w	pc, [sp], #4
    e1de:	bf00      	nop
    e1e0:	0000dc61 	.word	0x0000dc61

0000e1e4 <ble_gattc_extract_first_by_conn_op>:
{
    e1e4:	b500      	push	{lr}
    e1e6:	b083      	sub	sp, #12
    ble_gattc_extract_by_conn_op(conn_handle, op, 1, &dst_list);
    e1e8:	466b      	mov	r3, sp
    e1ea:	2201      	movs	r2, #1
    e1ec:	f7ff ffea 	bl	e1c4 <ble_gattc_extract_by_conn_op>
}
    e1f0:	9800      	ldr	r0, [sp, #0]
    e1f2:	b003      	add	sp, #12
    e1f4:	f85d fb04 	ldr.w	pc, [sp], #4

0000e1f8 <ble_gattc_proc_insert>:
{
    e1f8:	b510      	push	{r4, lr}
    e1fa:	4604      	mov	r4, r0
    ble_hs_lock();
    e1fc:	f001 fc52 	bl	faa4 <ble_hs_lock>
    STAILQ_INSERT_TAIL(&ble_gattc_procs, proc, next);
    e200:	2300      	movs	r3, #0
    e202:	6023      	str	r3, [r4, #0]
    e204:	4b03      	ldr	r3, [pc, #12]	; (e214 <ble_gattc_proc_insert+0x1c>)
    e206:	685a      	ldr	r2, [r3, #4]
    e208:	6014      	str	r4, [r2, #0]
    e20a:	605c      	str	r4, [r3, #4]
    ble_hs_unlock();
    e20c:	f001 fc4e 	bl	faac <ble_hs_unlock>
}
    e210:	bd10      	pop	{r4, pc}
    e212:	bf00      	nop
    e214:	200071e0 	.word	0x200071e0

0000e218 <ble_gattc_indicate_tmo>:
    ble_gatts_send_next_indicate(proc->conn_handle);
}

static void
ble_gattc_indicate_tmo(struct ble_gattc_proc *proc)
{
    e218:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());
    ble_gattc_dbg_assert_proc_not_inserted(proc);

    ble_gap_notify_tx_event(BLE_HS_ETIMEOUT, proc->conn_handle,
    e21a:	2301      	movs	r3, #1
    e21c:	8982      	ldrh	r2, [r0, #12]
    e21e:	8901      	ldrh	r1, [r0, #8]
    e220:	200d      	movs	r0, #13
    e222:	f7ff fbc5 	bl	d9b0 <ble_gap_notify_tx_event>
                            proc->indicate.chr_val_handle, 1);
}
    e226:	bd08      	pop	{r3, pc}

0000e228 <ble_gattc_write_cb>:
{
    e228:	b570      	push	{r4, r5, r6, lr}
    e22a:	b082      	sub	sp, #8
    if (proc->write.cb == NULL) {
    e22c:	6905      	ldr	r5, [r0, #16]
    e22e:	b1ad      	cbz	r5, e25c <ble_gattc_write_cb+0x34>
    e230:	460b      	mov	r3, r1
    e232:	4604      	mov	r4, r0
        memset(&attr, 0, sizeof attr);
    e234:	2100      	movs	r1, #0
    e236:	f8cd 1002 	str.w	r1, [sp, #2]
    e23a:	f8ad 1006 	strh.w	r1, [sp, #6]
        attr.handle = proc->write.att_handle;
    e23e:	8981      	ldrh	r1, [r0, #12]
    e240:	f8ad 1000 	strh.w	r1, [sp]
        rc = proc->write.cb(proc->conn_handle,
    e244:	8906      	ldrh	r6, [r0, #8]
                            ble_gattc_error(status, att_handle),
    e246:	4611      	mov	r1, r2
    e248:	4618      	mov	r0, r3
    e24a:	f7ff fd39 	bl	dcc0 <ble_gattc_error>
        rc = proc->write.cb(proc->conn_handle,
    e24e:	6963      	ldr	r3, [r4, #20]
    e250:	466a      	mov	r2, sp
    e252:	4601      	mov	r1, r0
    e254:	4630      	mov	r0, r6
    e256:	47a8      	blx	r5
}
    e258:	b002      	add	sp, #8
    e25a:	bd70      	pop	{r4, r5, r6, pc}
        rc = 0;
    e25c:	2000      	movs	r0, #0
    return rc;
    e25e:	e7fb      	b.n	e258 <ble_gattc_write_cb+0x30>

0000e260 <ble_gattc_write_tmo>:
{
    e260:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, BLE_HS_ETIMEOUT, 0);
    e262:	2200      	movs	r2, #0
    e264:	210d      	movs	r1, #13
    e266:	f7ff ffdf 	bl	e228 <ble_gattc_write_cb>
}
    e26a:	bd08      	pop	{r3, pc}

0000e26c <ble_gattc_write_err>:
{
    e26c:	b508      	push	{r3, lr}
    ble_gattc_write_cb(proc, status, att_handle);
    e26e:	f7ff ffdb 	bl	e228 <ble_gattc_write_cb>
}
    e272:	bd08      	pop	{r3, pc}

0000e274 <ble_gattc_proc_free>:
    if (proc != NULL) {
    e274:	b1e8      	cbz	r0, e2b2 <ble_gattc_proc_free+0x3e>
{
    e276:	b538      	push	{r3, r4, r5, lr}
    e278:	4604      	mov	r4, r0
        switch (proc->op) {
    e27a:	7a83      	ldrb	r3, [r0, #10]
    e27c:	2b0c      	cmp	r3, #12
    e27e:	d006      	beq.n	e28e <ble_gattc_proc_free+0x1a>
    e280:	2b0d      	cmp	r3, #13
    e282:	d014      	beq.n	e2ae <ble_gattc_proc_free+0x3a>
        rc = os_memblock_put(&ble_gattc_proc_pool, proc);
    e284:	4621      	mov	r1, r4
    e286:	480b      	ldr	r0, [pc, #44]	; (e2b4 <ble_gattc_proc_free+0x40>)
    e288:	f7fc fc21 	bl	aace <os_memblock_put>
}
    e28c:	bd38      	pop	{r3, r4, r5, pc}
            os_mbuf_free_chain(proc->write_long.attr.om);
    e28e:	6900      	ldr	r0, [r0, #16]
    e290:	f7fb ffa6 	bl	a1e0 <os_mbuf_free_chain>
            break;
    e294:	e7f6      	b.n	e284 <ble_gattc_proc_free+0x10>
                os_mbuf_free_chain(proc->write_reliable.attrs[i].om);
    e296:	1c5d      	adds	r5, r3, #1
    e298:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    e29c:	6898      	ldr	r0, [r3, #8]
    e29e:	f7fb ff9f 	bl	a1e0 <os_mbuf_free_chain>
            for (i = 0; i < proc->write_reliable.num_attrs; i++) {
    e2a2:	462b      	mov	r3, r5
    e2a4:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    e2a8:	429a      	cmp	r2, r3
    e2aa:	dcf4      	bgt.n	e296 <ble_gattc_proc_free+0x22>
    e2ac:	e7ea      	b.n	e284 <ble_gattc_proc_free+0x10>
    e2ae:	2300      	movs	r3, #0
    e2b0:	e7f8      	b.n	e2a4 <ble_gattc_proc_free+0x30>
    e2b2:	4770      	bx	lr
    e2b4:	200071c4 	.word	0x200071c4

0000e2b8 <ble_gattc_fail_procs>:
{
    e2b8:	b530      	push	{r4, r5, lr}
    e2ba:	b083      	sub	sp, #12
    e2bc:	4615      	mov	r5, r2
    ble_gattc_extract_by_conn_op(conn_handle, op, 0, &temp_list);
    e2be:	466b      	mov	r3, sp
    e2c0:	2200      	movs	r2, #0
    e2c2:	f7ff ff7f 	bl	e1c4 <ble_gattc_extract_by_conn_op>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
    e2c6:	e002      	b.n	e2ce <ble_gattc_fail_procs+0x16>
        ble_gattc_proc_free(proc);
    e2c8:	4620      	mov	r0, r4
    e2ca:	f7ff ffd3 	bl	e274 <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
    e2ce:	9c00      	ldr	r4, [sp, #0]
    e2d0:	b17c      	cbz	r4, e2f2 <ble_gattc_fail_procs+0x3a>
        err_cb = ble_gattc_err_dispatch_get(proc->op);
    e2d2:	7aa0      	ldrb	r0, [r4, #10]
    e2d4:	f7ff fcb2 	bl	dc3c <ble_gattc_err_dispatch_get>
    e2d8:	4603      	mov	r3, r0
        err_cb(proc, status, 0);
    e2da:	2200      	movs	r2, #0
    e2dc:	4629      	mov	r1, r5
    e2de:	4620      	mov	r0, r4
    e2e0:	4798      	blx	r3
        STAILQ_REMOVE_HEAD(&temp_list, next);
    e2e2:	9b00      	ldr	r3, [sp, #0]
    e2e4:	681b      	ldr	r3, [r3, #0]
    e2e6:	9300      	str	r3, [sp, #0]
    e2e8:	2b00      	cmp	r3, #0
    e2ea:	d1ed      	bne.n	e2c8 <ble_gattc_fail_procs+0x10>
    e2ec:	f8cd d004 	str.w	sp, [sp, #4]
    e2f0:	e7ea      	b.n	e2c8 <ble_gattc_fail_procs+0x10>
}
    e2f2:	b003      	add	sp, #12
    e2f4:	bd30      	pop	{r4, r5, pc}

0000e2f6 <ble_gattc_write_reliable_err>:
{
    e2f6:	b510      	push	{r4, lr}
    e2f8:	4604      	mov	r4, r0
    ble_gattc_write_reliable_cb(proc, status, att_handle);
    e2fa:	f7ff feae 	bl	e05a <ble_gattc_write_reliable_cb>
    if (proc->write_reliable.cur_attr < proc->write_reliable.num_attrs) {
    e2fe:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
    e302:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
    e306:	429a      	cmp	r2, r3
    e308:	d300      	bcc.n	e30c <ble_gattc_write_reliable_err+0x16>
}
    e30a:	bd10      	pop	{r4, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
    e30c:	2100      	movs	r1, #0
    e30e:	8920      	ldrh	r0, [r4, #8]
    e310:	f006 fa74 	bl	147fc <ble_att_clt_tx_exec_write>
}
    e314:	e7f9      	b.n	e30a <ble_gattc_write_reliable_err+0x14>

0000e316 <ble_gattc_write_long_err>:
{
    e316:	b570      	push	{r4, r5, r6, lr}
    e318:	4604      	mov	r4, r0
    e31a:	460d      	mov	r5, r1
    e31c:	4616      	mov	r6, r2
    if (proc->write_long.attr.offset > 0 &&
    e31e:	89c3      	ldrh	r3, [r0, #14]
    e320:	b11b      	cbz	r3, e32a <ble_gattc_write_long_err+0x14>
            OS_MBUF_PKTLEN(proc->write_long.attr.om)) {
    e322:	6902      	ldr	r2, [r0, #16]
    e324:	8a12      	ldrh	r2, [r2, #16]
    if (proc->write_long.attr.offset > 0 &&
    e326:	4293      	cmp	r3, r2
    e328:	d305      	bcc.n	e336 <ble_gattc_write_long_err+0x20>
    ble_gattc_write_long_cb(proc, status, att_handle);
    e32a:	4632      	mov	r2, r6
    e32c:	4629      	mov	r1, r5
    e32e:	4620      	mov	r0, r4
    e330:	f7ff fe7a 	bl	e028 <ble_gattc_write_long_cb>
}
    e334:	bd70      	pop	{r4, r5, r6, pc}
        ble_att_clt_tx_exec_write(proc->conn_handle,
    e336:	2100      	movs	r1, #0
    e338:	8900      	ldrh	r0, [r0, #8]
    e33a:	f006 fa5f 	bl	147fc <ble_att_clt_tx_exec_write>
    e33e:	e7f4      	b.n	e32a <ble_gattc_write_long_err+0x14>

0000e340 <ble_gattc_write_reliable_tx>:
{
    e340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e344:	4604      	mov	r4, r0
    attr_idx = proc->write_reliable.cur_attr;
    e346:	f890 502d 	ldrb.w	r5, [r0, #45]	; 0x2d
    if (attr_idx >= proc->write_reliable.num_attrs) {
    e34a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
    e34e:	429d      	cmp	r5, r3
    e350:	d225      	bcs.n	e39e <ble_gattc_write_reliable_tx+0x5e>
    attr = proc->write_reliable.attrs + attr_idx;
    e352:	f100 080c 	add.w	r8, r0, #12
    e356:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
    e35a:	8900      	ldrh	r0, [r0, #8]
    e35c:	f006 f9b5 	bl	146ca <ble_att_mtu>
    e360:	3805      	subs	r0, #5
    e362:	b280      	uxth	r0, r0
    if (max_sz <= 0) {
    e364:	b338      	cbz	r0, e3b6 <ble_gattc_write_reliable_tx+0x76>
        min(max_sz, OS_MBUF_PKTLEN(attr->om) - attr->offset);
    e366:	687b      	ldr	r3, [r7, #4]
    e368:	8a1b      	ldrh	r3, [r3, #16]
    e36a:	887a      	ldrh	r2, [r7, #2]
    e36c:	1a9b      	subs	r3, r3, r2
    e36e:	4298      	cmp	r0, r3
    e370:	bfa8      	it	ge
    e372:	4618      	movge	r0, r3
    proc->write_reliable.length =
    e374:	85e0      	strh	r0, [r4, #46]	; 0x2e
    om = ble_hs_mbuf_att_pkt();
    e376:	f003 f900 	bl	1157a <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
    e37a:	4606      	mov	r6, r0
    e37c:	b1f0      	cbz	r0, e3bc <ble_gattc_write_reliable_tx+0x7c>
    rc = os_mbuf_appendfrom(om, attr->om, attr->offset,
    e37e:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
    e380:	887a      	ldrh	r2, [r7, #2]
    e382:	6879      	ldr	r1, [r7, #4]
    e384:	f7fc f804 	bl	a390 <os_mbuf_appendfrom>
    if (rc != 0) {
    e388:	b9d0      	cbnz	r0, e3c0 <ble_gattc_write_reliable_tx+0x80>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle, attr->handle,
    e38a:	4633      	mov	r3, r6
    e38c:	887a      	ldrh	r2, [r7, #2]
    e38e:	f838 1035 	ldrh.w	r1, [r8, r5, lsl #3]
    e392:	8920      	ldrh	r0, [r4, #8]
    e394:	f006 fa2e 	bl	147f4 <ble_att_clt_tx_prep_write>
    e398:	4604      	mov	r4, r0
    om = NULL;
    e39a:	2600      	movs	r6, #0
done:
    e39c:	e005      	b.n	e3aa <ble_gattc_write_reliable_tx+0x6a>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
    e39e:	2101      	movs	r1, #1
    e3a0:	8900      	ldrh	r0, [r0, #8]
    e3a2:	f006 fa2b 	bl	147fc <ble_att_clt_tx_exec_write>
    e3a6:	4604      	mov	r4, r0
    om = NULL;
    e3a8:	2600      	movs	r6, #0
    os_mbuf_free_chain(om);
    e3aa:	4630      	mov	r0, r6
    e3ac:	f7fb ff18 	bl	a1e0 <os_mbuf_free_chain>
}
    e3b0:	4620      	mov	r0, r4
    e3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = BLE_HS_ENOTCONN;
    e3b6:	2407      	movs	r4, #7
    om = NULL;
    e3b8:	2600      	movs	r6, #0
    e3ba:	e7f6      	b.n	e3aa <ble_gattc_write_reliable_tx+0x6a>
        rc = BLE_HS_ENOMEM;
    e3bc:	2406      	movs	r4, #6
    e3be:	e7f4      	b.n	e3aa <ble_gattc_write_reliable_tx+0x6a>
        rc = BLE_HS_ENOMEM;
    e3c0:	2406      	movs	r4, #6
    e3c2:	e7f2      	b.n	e3aa <ble_gattc_write_reliable_tx+0x6a>

0000e3c4 <ble_gattc_write_reliable_resume>:
{
    e3c4:	b538      	push	{r3, r4, r5, lr}
    e3c6:	4605      	mov	r5, r0
    status = ble_gattc_write_reliable_tx(proc);
    e3c8:	f7ff ffba 	bl	e340 <ble_gattc_write_reliable_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e3cc:	4601      	mov	r1, r0
    e3ce:	4628      	mov	r0, r5
    e3d0:	f7ff fe78 	bl	e0c4 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e3d4:	4604      	mov	r4, r0
    e3d6:	b908      	cbnz	r0, e3dc <ble_gattc_write_reliable_resume+0x18>
}
    e3d8:	4620      	mov	r0, r4
    e3da:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_reliable_cb(proc, rc, 0);
    e3dc:	2200      	movs	r2, #0
    e3de:	4601      	mov	r1, r0
    e3e0:	4628      	mov	r0, r5
    e3e2:	f7ff fe3a 	bl	e05a <ble_gattc_write_reliable_cb>
        return rc;
    e3e6:	e7f7      	b.n	e3d8 <ble_gattc_write_reliable_resume+0x14>

0000e3e8 <ble_gattc_write_long_tx>:
{
    e3e8:	b538      	push	{r3, r4, r5, lr}
    e3ea:	4604      	mov	r4, r0
    max_sz = ble_att_mtu(proc->conn_handle) - BLE_ATT_PREP_WRITE_CMD_BASE_SZ;
    e3ec:	8900      	ldrh	r0, [r0, #8]
    e3ee:	f006 f96c 	bl	146ca <ble_att_mtu>
    e3f2:	1f42      	subs	r2, r0, #5
    if (max_sz <= 0) {
    e3f4:	2a00      	cmp	r2, #0
    e3f6:	dd27      	ble.n	e448 <ble_gattc_write_long_tx+0x60>
    write_len = min(max_sz,
    e3f8:	6923      	ldr	r3, [r4, #16]
    e3fa:	8a1b      	ldrh	r3, [r3, #16]
    e3fc:	89e0      	ldrh	r0, [r4, #14]
    e3fe:	1a18      	subs	r0, r3, r0
    e400:	4290      	cmp	r0, r2
    e402:	bfa8      	it	ge
    e404:	4610      	movge	r0, r2
    if (write_len <= 0) {
    e406:	2800      	cmp	r0, #0
    e408:	dd13      	ble.n	e432 <ble_gattc_write_long_tx+0x4a>
    proc->write_long.length = write_len;
    e40a:	82a0      	strh	r0, [r4, #20]
    om = ble_hs_mbuf_att_pkt();
    e40c:	f003 f8b5 	bl	1157a <ble_hs_mbuf_att_pkt>
    if (om == NULL) {
    e410:	4605      	mov	r5, r0
    e412:	b1e0      	cbz	r0, e44e <ble_gattc_write_long_tx+0x66>
    rc = os_mbuf_appendfrom(om, proc->write_long.attr.om,
    e414:	8aa3      	ldrh	r3, [r4, #20]
    e416:	89e2      	ldrh	r2, [r4, #14]
    e418:	6921      	ldr	r1, [r4, #16]
    e41a:	f7fb ffb9 	bl	a390 <os_mbuf_appendfrom>
    if (rc != 0) {
    e41e:	b9c0      	cbnz	r0, e452 <ble_gattc_write_long_tx+0x6a>
    rc = ble_att_clt_tx_prep_write(proc->conn_handle,
    e420:	462b      	mov	r3, r5
    e422:	89e2      	ldrh	r2, [r4, #14]
    e424:	89a1      	ldrh	r1, [r4, #12]
    e426:	8920      	ldrh	r0, [r4, #8]
    e428:	f006 f9e4 	bl	147f4 <ble_att_clt_tx_prep_write>
    e42c:	4604      	mov	r4, r0
    om = NULL;
    e42e:	2500      	movs	r5, #0
done:
    e430:	e005      	b.n	e43e <ble_gattc_write_long_tx+0x56>
        rc = ble_att_clt_tx_exec_write(proc->conn_handle,
    e432:	2101      	movs	r1, #1
    e434:	8920      	ldrh	r0, [r4, #8]
    e436:	f006 f9e1 	bl	147fc <ble_att_clt_tx_exec_write>
    e43a:	4604      	mov	r4, r0
    om = NULL;
    e43c:	2500      	movs	r5, #0
    os_mbuf_free_chain(om);
    e43e:	4628      	mov	r0, r5
    e440:	f7fb fece 	bl	a1e0 <os_mbuf_free_chain>
}
    e444:	4620      	mov	r0, r4
    e446:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
    e448:	2407      	movs	r4, #7
    om = NULL;
    e44a:	2500      	movs	r5, #0
    e44c:	e7f7      	b.n	e43e <ble_gattc_write_long_tx+0x56>
        rc = BLE_HS_ENOMEM;
    e44e:	2406      	movs	r4, #6
    e450:	e7f5      	b.n	e43e <ble_gattc_write_long_tx+0x56>
        rc = BLE_HS_ENOMEM;
    e452:	2406      	movs	r4, #6
    e454:	e7f3      	b.n	e43e <ble_gattc_write_long_tx+0x56>

0000e456 <ble_gattc_write_long_resume>:
{
    e456:	b538      	push	{r3, r4, r5, lr}
    e458:	4605      	mov	r5, r0
    status = ble_gattc_write_long_tx(proc);
    e45a:	f7ff ffc5 	bl	e3e8 <ble_gattc_write_long_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e45e:	4601      	mov	r1, r0
    e460:	4628      	mov	r0, r5
    e462:	f7ff fe2f 	bl	e0c4 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e466:	4604      	mov	r4, r0
    e468:	b908      	cbnz	r0, e46e <ble_gattc_write_long_resume+0x18>
}
    e46a:	4620      	mov	r0, r4
    e46c:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_write_long_cb(proc, rc, 0);
    e46e:	2200      	movs	r2, #0
    e470:	4601      	mov	r1, r0
    e472:	4628      	mov	r0, r5
    e474:	f7ff fdd8 	bl	e028 <ble_gattc_write_long_cb>
        return rc;
    e478:	e7f7      	b.n	e46a <ble_gattc_write_long_resume+0x14>

0000e47a <ble_gattc_read_long_tx>:
{
    e47a:	b508      	push	{r3, lr}
    if (proc->read_long.offset == 0) {
    e47c:	89c2      	ldrh	r2, [r0, #14]
    e47e:	b922      	cbnz	r2, e48a <ble_gattc_read_long_tx+0x10>
        rc = ble_att_clt_tx_read(proc->conn_handle, proc->read_long.handle);
    e480:	8981      	ldrh	r1, [r0, #12]
    e482:	8900      	ldrh	r0, [r0, #8]
    e484:	f006 f9a6 	bl	147d4 <ble_att_clt_tx_read>
}
    e488:	bd08      	pop	{r3, pc}
        rc = ble_att_clt_tx_read_blob(proc->conn_handle,
    e48a:	8981      	ldrh	r1, [r0, #12]
    e48c:	8900      	ldrh	r0, [r0, #8]
    e48e:	f006 f9a5 	bl	147dc <ble_att_clt_tx_read_blob>
    e492:	e7f9      	b.n	e488 <ble_gattc_read_long_tx+0xe>

0000e494 <ble_gattc_read_long_resume>:
{
    e494:	b538      	push	{r3, r4, r5, lr}
    e496:	4605      	mov	r5, r0
    status = ble_gattc_read_long_tx(proc);
    e498:	f7ff ffef 	bl	e47a <ble_gattc_read_long_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e49c:	4601      	mov	r1, r0
    e49e:	4628      	mov	r0, r5
    e4a0:	f7ff fe10 	bl	e0c4 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e4a4:	4604      	mov	r4, r0
    e4a6:	b908      	cbnz	r0, e4ac <ble_gattc_read_long_resume+0x18>
}
    e4a8:	4620      	mov	r0, r4
    e4aa:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_read_long_cb(proc, rc, 0, NULL);
    e4ac:	2300      	movs	r3, #0
    e4ae:	461a      	mov	r2, r3
    e4b0:	4601      	mov	r1, r0
    e4b2:	4628      	mov	r0, r5
    e4b4:	f7ff fd69 	bl	df8a <ble_gattc_read_long_cb>
        return rc;
    e4b8:	e7f6      	b.n	e4a8 <ble_gattc_read_long_resume+0x14>

0000e4ba <ble_gattc_disc_all_dscs_tx>:
{
    e4ba:	b508      	push	{r3, lr}
                                  proc->disc_all_dscs.prev_handle + 1,
    e4bc:	89c1      	ldrh	r1, [r0, #14]
    rc = ble_att_clt_tx_find_info(proc->conn_handle,
    e4be:	3101      	adds	r1, #1
    e4c0:	8a02      	ldrh	r2, [r0, #16]
    e4c2:	b289      	uxth	r1, r1
    e4c4:	8900      	ldrh	r0, [r0, #8]
    e4c6:	f006 f979 	bl	147bc <ble_att_clt_tx_find_info>
}
    e4ca:	bd08      	pop	{r3, pc}

0000e4cc <ble_gattc_disc_all_dscs_resume>:
{
    e4cc:	b538      	push	{r3, r4, r5, lr}
    e4ce:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_dscs_tx(proc);
    e4d0:	f7ff fff3 	bl	e4ba <ble_gattc_disc_all_dscs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e4d4:	4601      	mov	r1, r0
    e4d6:	4628      	mov	r0, r5
    e4d8:	f7ff fdf4 	bl	e0c4 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e4dc:	4604      	mov	r4, r0
    e4de:	b908      	cbnz	r0, e4e4 <ble_gattc_disc_all_dscs_resume+0x18>
}
    e4e0:	4620      	mov	r0, r4
    e4e2:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_dscs_cb(proc, rc, 0, NULL);
    e4e4:	2300      	movs	r3, #0
    e4e6:	461a      	mov	r2, r3
    e4e8:	4601      	mov	r1, r0
    e4ea:	4628      	mov	r0, r5
    e4ec:	f7ff fcde 	bl	deac <ble_gattc_disc_all_dscs_cb>
        return rc;
    e4f0:	e7f6      	b.n	e4e0 <ble_gattc_disc_all_dscs_resume+0x14>
	...

0000e4f4 <ble_gattc_disc_chr_uuid_tx>:
{
    e4f4:	b500      	push	{lr}
    e4f6:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
    e4f8:	4b07      	ldr	r3, [pc, #28]	; (e518 <ble_gattc_disc_chr_uuid_tx+0x24>)
    e4fa:	681a      	ldr	r2, [r3, #0]
    e4fc:	ab02      	add	r3, sp, #8
    e4fe:	f843 2d04 	str.w	r2, [r3, #-4]!
                                  proc->disc_chr_uuid.prev_handle + 1,
    e502:	8c01      	ldrh	r1, [r0, #32]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
    e504:	3101      	adds	r1, #1
    e506:	8c42      	ldrh	r2, [r0, #34]	; 0x22
    e508:	b289      	uxth	r1, r1
    e50a:	8900      	ldrh	r0, [r0, #8]
    e50c:	f006 f95e 	bl	147cc <ble_att_clt_tx_read_type>
}
    e510:	b003      	add	sp, #12
    e512:	f85d fb04 	ldr.w	pc, [sp], #4
    e516:	bf00      	nop
    e518:	00028cb4 	.word	0x00028cb4

0000e51c <ble_gattc_disc_chr_uuid_resume>:
{
    e51c:	b538      	push	{r3, r4, r5, lr}
    e51e:	4605      	mov	r5, r0
    status = ble_gattc_disc_chr_uuid_tx(proc);
    e520:	f7ff ffe8 	bl	e4f4 <ble_gattc_disc_chr_uuid_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e524:	4601      	mov	r1, r0
    e526:	4628      	mov	r0, r5
    e528:	f7ff fdcc 	bl	e0c4 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e52c:	4604      	mov	r4, r0
    e52e:	b908      	cbnz	r0, e534 <ble_gattc_disc_chr_uuid_resume+0x18>
}
    e530:	4620      	mov	r0, r4
    e532:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_chr_uuid_cb(proc, rc, 0, NULL);
    e534:	2300      	movs	r3, #0
    e536:	461a      	mov	r2, r3
    e538:	4601      	mov	r1, r0
    e53a:	4628      	mov	r0, r5
    e53c:	f7ff fc8f 	bl	de5e <ble_gattc_disc_chr_uuid_cb>
        return rc;
    e540:	e7f6      	b.n	e530 <ble_gattc_disc_chr_uuid_resume+0x14>
	...

0000e544 <ble_gattc_disc_all_chrs_tx>:
{
    e544:	b500      	push	{lr}
    e546:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
    e548:	4b07      	ldr	r3, [pc, #28]	; (e568 <ble_gattc_disc_all_chrs_tx+0x24>)
    e54a:	681a      	ldr	r2, [r3, #0]
    e54c:	ab02      	add	r3, sp, #8
    e54e:	f843 2d04 	str.w	r2, [r3, #-4]!
                                  proc->disc_all_chrs.prev_handle + 1,
    e552:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_type(proc->conn_handle,
    e554:	3101      	adds	r1, #1
    e556:	89c2      	ldrh	r2, [r0, #14]
    e558:	b289      	uxth	r1, r1
    e55a:	8900      	ldrh	r0, [r0, #8]
    e55c:	f006 f936 	bl	147cc <ble_att_clt_tx_read_type>
}
    e560:	b003      	add	sp, #12
    e562:	f85d fb04 	ldr.w	pc, [sp], #4
    e566:	bf00      	nop
    e568:	00028cb4 	.word	0x00028cb4

0000e56c <ble_gattc_disc_all_chrs_resume>:
{
    e56c:	b538      	push	{r3, r4, r5, lr}
    e56e:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_chrs_tx(proc);
    e570:	f7ff ffe8 	bl	e544 <ble_gattc_disc_all_chrs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e574:	4601      	mov	r1, r0
    e576:	4628      	mov	r0, r5
    e578:	f7ff fda4 	bl	e0c4 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e57c:	4604      	mov	r4, r0
    e57e:	b908      	cbnz	r0, e584 <ble_gattc_disc_all_chrs_resume+0x18>
}
    e580:	4620      	mov	r0, r4
    e582:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_chrs_cb(proc, rc, 0, NULL);
    e584:	2300      	movs	r3, #0
    e586:	461a      	mov	r2, r3
    e588:	4601      	mov	r1, r0
    e58a:	4628      	mov	r0, r5
    e58c:	f7ff fc40 	bl	de10 <ble_gattc_disc_all_chrs_cb>
        return rc;
    e590:	e7f6      	b.n	e580 <ble_gattc_disc_all_chrs_resume+0x14>
	...

0000e594 <ble_gattc_find_inc_svcs_tx>:
{
    e594:	b500      	push	{lr}
    e596:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_INCLUDE);
    e598:	4b09      	ldr	r3, [pc, #36]	; (e5c0 <ble_gattc_find_inc_svcs_tx+0x2c>)
    e59a:	685b      	ldr	r3, [r3, #4]
    e59c:	9301      	str	r3, [sp, #4]
    if (proc->find_inc_svcs.cur_start == 0) {
    e59e:	8a01      	ldrh	r1, [r0, #16]
    e5a0:	b951      	cbnz	r1, e5b8 <ble_gattc_find_inc_svcs_tx+0x24>
                                      proc->find_inc_svcs.prev_handle + 1,
    e5a2:	8981      	ldrh	r1, [r0, #12]
        rc = ble_att_clt_tx_read_type(proc->conn_handle,
    e5a4:	3101      	adds	r1, #1
    e5a6:	ab01      	add	r3, sp, #4
    e5a8:	89c2      	ldrh	r2, [r0, #14]
    e5aa:	b289      	uxth	r1, r1
    e5ac:	8900      	ldrh	r0, [r0, #8]
    e5ae:	f006 f90d 	bl	147cc <ble_att_clt_tx_read_type>
}
    e5b2:	b003      	add	sp, #12
    e5b4:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_att_clt_tx_read(proc->conn_handle,
    e5b8:	8900      	ldrh	r0, [r0, #8]
    e5ba:	f006 f90b 	bl	147d4 <ble_att_clt_tx_read>
    e5be:	e7f8      	b.n	e5b2 <ble_gattc_find_inc_svcs_tx+0x1e>
    e5c0:	00028cb4 	.word	0x00028cb4

0000e5c4 <ble_gattc_find_inc_svcs_resume>:
{
    e5c4:	b538      	push	{r3, r4, r5, lr}
    e5c6:	4605      	mov	r5, r0
    status = ble_gattc_find_inc_svcs_tx(proc);
    e5c8:	f7ff ffe4 	bl	e594 <ble_gattc_find_inc_svcs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e5cc:	4601      	mov	r1, r0
    e5ce:	4628      	mov	r0, r5
    e5d0:	f7ff fd78 	bl	e0c4 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e5d4:	4604      	mov	r4, r0
    e5d6:	b908      	cbnz	r0, e5dc <ble_gattc_find_inc_svcs_resume+0x18>
}
    e5d8:	4620      	mov	r0, r4
    e5da:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_find_inc_svcs_cb(proc, rc, 0, NULL);
    e5dc:	2300      	movs	r3, #0
    e5de:	461a      	mov	r2, r3
    e5e0:	4601      	mov	r1, r0
    e5e2:	4628      	mov	r0, r5
    e5e4:	f7ff fbeb 	bl	ddbe <ble_gattc_find_inc_svcs_cb>
        return rc;
    e5e8:	e7f6      	b.n	e5d8 <ble_gattc_find_inc_svcs_resume+0x14>

0000e5ea <ble_gattc_disc_svc_uuid_tx>:
{
    e5ea:	b5f0      	push	{r4, r5, r6, r7, lr}
    e5ec:	b087      	sub	sp, #28
    e5ee:	4604      	mov	r4, r0
    ble_uuid_flat(&proc->disc_svc_uuid.service_uuid.u, val);
    e5f0:	f100 060c 	add.w	r6, r0, #12
    e5f4:	ad02      	add	r5, sp, #8
    e5f6:	4629      	mov	r1, r5
    e5f8:	4630      	mov	r0, r6
    e5fa:	f005 ff8f 	bl	1451c <ble_uuid_flat>
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
    e5fe:	8927      	ldrh	r7, [r4, #8]
                                        proc->disc_svc_uuid.prev_handle + 1,
    e600:	8c24      	ldrh	r4, [r4, #32]
    rc = ble_att_clt_tx_find_type_value(proc->conn_handle,
    e602:	3401      	adds	r4, #1
    e604:	b2a4      	uxth	r4, r4
    e606:	4630      	mov	r0, r6
    e608:	f005 ffb4 	bl	14574 <ble_uuid_length>
    e60c:	9001      	str	r0, [sp, #4]
    e60e:	9500      	str	r5, [sp, #0]
    e610:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    e614:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e618:	4621      	mov	r1, r4
    e61a:	4638      	mov	r0, r7
    e61c:	f006 f8d2 	bl	147c4 <ble_att_clt_tx_find_type_value>
}
    e620:	b007      	add	sp, #28
    e622:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e624 <ble_gattc_disc_svc_uuid_resume>:
{
    e624:	b538      	push	{r3, r4, r5, lr}
    e626:	4605      	mov	r5, r0
    status = ble_gattc_disc_svc_uuid_tx(proc);
    e628:	f7ff ffdf 	bl	e5ea <ble_gattc_disc_svc_uuid_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e62c:	4601      	mov	r1, r0
    e62e:	4628      	mov	r0, r5
    e630:	f7ff fd48 	bl	e0c4 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e634:	4604      	mov	r4, r0
    e636:	b908      	cbnz	r0, e63c <ble_gattc_disc_svc_uuid_resume+0x18>
}
    e638:	4620      	mov	r0, r4
    e63a:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_svc_uuid_cb(proc, rc, 0, NULL);
    e63c:	2300      	movs	r3, #0
    e63e:	461a      	mov	r2, r3
    e640:	4601      	mov	r1, r0
    e642:	4628      	mov	r0, r5
    e644:	f7ff fb94 	bl	dd70 <ble_gattc_disc_svc_uuid_cb>
        return rc;
    e648:	e7f6      	b.n	e638 <ble_gattc_disc_svc_uuid_resume+0x14>
	...

0000e64c <ble_gattc_disc_all_svcs_tx>:
{
    e64c:	b500      	push	{lr}
    e64e:	b083      	sub	sp, #12
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_PRIMARY_SERVICE);
    e650:	4b07      	ldr	r3, [pc, #28]	; (e670 <ble_gattc_disc_all_svcs_tx+0x24>)
    e652:	689a      	ldr	r2, [r3, #8]
    e654:	ab02      	add	r3, sp, #8
    e656:	f843 2d04 	str.w	r2, [r3, #-4]!
                                        proc->disc_all_svcs.prev_handle + 1,
    e65a:	8981      	ldrh	r1, [r0, #12]
    rc = ble_att_clt_tx_read_group_type(proc->conn_handle,
    e65c:	3101      	adds	r1, #1
    e65e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    e662:	b289      	uxth	r1, r1
    e664:	8900      	ldrh	r0, [r0, #8]
    e666:	f006 f8bf 	bl	147e8 <ble_att_clt_tx_read_group_type>
}
    e66a:	b003      	add	sp, #12
    e66c:	f85d fb04 	ldr.w	pc, [sp], #4
    e670:	00028cb4 	.word	0x00028cb4

0000e674 <ble_gattc_disc_all_svcs_resume>:
{
    e674:	b538      	push	{r3, r4, r5, lr}
    e676:	4605      	mov	r5, r0
    status = ble_gattc_disc_all_svcs_tx(proc);
    e678:	f7ff ffe8 	bl	e64c <ble_gattc_disc_all_svcs_tx>
    rc = ble_gattc_process_resume_status(proc, status);
    e67c:	4601      	mov	r1, r0
    e67e:	4628      	mov	r0, r5
    e680:	f7ff fd20 	bl	e0c4 <ble_gattc_process_resume_status>
    if (rc != 0) {
    e684:	4604      	mov	r4, r0
    e686:	b908      	cbnz	r0, e68c <ble_gattc_disc_all_svcs_resume+0x18>
}
    e688:	4620      	mov	r0, r4
    e68a:	bd38      	pop	{r3, r4, r5, pc}
        ble_gattc_disc_all_svcs_cb(proc, rc, 0, NULL);
    e68c:	2300      	movs	r3, #0
    e68e:	461a      	mov	r2, r3
    e690:	b281      	uxth	r1, r0
    e692:	4628      	mov	r0, r5
    e694:	f7ff fb44 	bl	dd20 <ble_gattc_disc_all_svcs_cb>
        return rc;
    e698:	e7f6      	b.n	e688 <ble_gattc_disc_all_svcs_resume+0x14>

0000e69a <ble_gattc_process_status>:
{
    e69a:	b510      	push	{r4, lr}
    e69c:	4604      	mov	r4, r0
    switch (status) {
    e69e:	b961      	cbnz	r1, e6ba <ble_gattc_process_status+0x20>
        if (!(proc->flags & BLE_GATTC_PROC_F_STALLED)) {
    e6a0:	7ac3      	ldrb	r3, [r0, #11]
    e6a2:	f013 0f01 	tst.w	r3, #1
    e6a6:	d005      	beq.n	e6b4 <ble_gattc_process_status+0x1a>
        ble_gattc_proc_insert(proc);
    e6a8:	4620      	mov	r0, r4
    e6aa:	f7ff fda5 	bl	e1f8 <ble_gattc_proc_insert>
        ble_hs_timer_resched();
    e6ae:	f001 fad5 	bl	fc5c <ble_hs_timer_resched>
}
    e6b2:	bd10      	pop	{r4, pc}
            ble_gattc_proc_set_exp_timer(proc);
    e6b4:	f7ff fd10 	bl	e0d8 <ble_gattc_proc_set_exp_timer>
    e6b8:	e7f6      	b.n	e6a8 <ble_gattc_process_status+0xe>
        ble_gattc_proc_free(proc);
    e6ba:	f7ff fddb 	bl	e274 <ble_gattc_proc_free>
}
    e6be:	e7f8      	b.n	e6b2 <ble_gattc_process_status+0x18>

0000e6c0 <ble_gattc_resume_procs>:
{
    e6c0:	b510      	push	{r4, lr}
    e6c2:	b082      	sub	sp, #8
    ble_gattc_resume_at = 0;
    e6c4:	4b0d      	ldr	r3, [pc, #52]	; (e6fc <ble_gattc_resume_procs+0x3c>)
    e6c6:	2200      	movs	r2, #0
    e6c8:	601a      	str	r2, [r3, #0]
    ble_gattc_extract_stalled(&stall_list);
    e6ca:	4668      	mov	r0, sp
    e6cc:	f7ff fd70 	bl	e1b0 <ble_gattc_extract_stalled>
    STAILQ_FOREACH(proc, &stall_list, next) {
    e6d0:	9c00      	ldr	r4, [sp, #0]
    e6d2:	e00e      	b.n	e6f2 <ble_gattc_resume_procs+0x32>
        resume_cb = ble_gattc_resume_dispatch_get(proc->op);
    e6d4:	7aa0      	ldrb	r0, [r4, #10]
    e6d6:	f7ff fab7 	bl	dc48 <ble_gattc_resume_dispatch_get>
    e6da:	4602      	mov	r2, r0
        proc->flags &= ~BLE_GATTC_PROC_F_STALLED;
    e6dc:	7ae3      	ldrb	r3, [r4, #11]
    e6de:	f023 0301 	bic.w	r3, r3, #1
    e6e2:	72e3      	strb	r3, [r4, #11]
        rc = resume_cb(proc);
    e6e4:	4620      	mov	r0, r4
    e6e6:	4790      	blx	r2
        ble_gattc_process_status(proc, rc);
    e6e8:	4601      	mov	r1, r0
    e6ea:	4620      	mov	r0, r4
    e6ec:	f7ff ffd5 	bl	e69a <ble_gattc_process_status>
    STAILQ_FOREACH(proc, &stall_list, next) {
    e6f0:	6824      	ldr	r4, [r4, #0]
    e6f2:	2c00      	cmp	r4, #0
    e6f4:	d1ee      	bne.n	e6d4 <ble_gattc_resume_procs+0x14>
}
    e6f6:	b002      	add	sp, #8
    e6f8:	bd10      	pop	{r4, pc}
    e6fa:	bf00      	nop
    e6fc:	200071e8 	.word	0x200071e8

0000e700 <ble_gattc_proc_alloc>:
{
    e700:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_gattc_proc_pool);
    e702:	4805      	ldr	r0, [pc, #20]	; (e718 <ble_gattc_proc_alloc+0x18>)
    e704:	f7fc f9bb 	bl	aa7e <os_memblock_get>
    if (proc != NULL) {
    e708:	4604      	mov	r4, r0
    e70a:	b118      	cbz	r0, e714 <ble_gattc_proc_alloc+0x14>
        memset(proc, 0, sizeof *proc);
    e70c:	2238      	movs	r2, #56	; 0x38
    e70e:	2100      	movs	r1, #0
    e710:	f7fd f875 	bl	b7fe <memset>
}
    e714:	4620      	mov	r0, r4
    e716:	bd10      	pop	{r4, pc}
    e718:	200071c4 	.word	0x200071c4

0000e71c <ble_gattc_indicate_err>:
{
    e71c:	b538      	push	{r3, r4, r5, lr}
    e71e:	4604      	mov	r4, r0
    e720:	460d      	mov	r5, r1
    if (status != BLE_HS_ENOTCONN) {
    e722:	2907      	cmp	r1, #7
    e724:	d004      	beq.n	e730 <ble_gattc_indicate_err+0x14>
        rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
    e726:	8981      	ldrh	r1, [r0, #12]
    e728:	8900      	ldrh	r0, [r0, #8]
    e72a:	f000 ffa1 	bl	f670 <ble_gatts_rx_indicate_ack>
        if (rc != 0) {
    e72e:	b940      	cbnz	r0, e742 <ble_gattc_indicate_err+0x26>
    ble_gap_notify_tx_event(status, proc->conn_handle,
    e730:	2301      	movs	r3, #1
    e732:	89a2      	ldrh	r2, [r4, #12]
    e734:	8921      	ldrh	r1, [r4, #8]
    e736:	4628      	mov	r0, r5
    e738:	f7ff f93a 	bl	d9b0 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
    e73c:	8920      	ldrh	r0, [r4, #8]
    e73e:	f000 ff6b 	bl	f618 <ble_gatts_send_next_indicate>
}
    e742:	bd38      	pop	{r3, r4, r5, pc}

0000e744 <ble_gattc_indicate_rx_rsp>:
 * Handles an incoming handle-value-confirmation for the specified indication
 * proc.
 */
static void
ble_gattc_indicate_rx_rsp(struct ble_gattc_proc *proc)
{
    e744:	b510      	push	{r4, lr}
    e746:	4604      	mov	r4, r0
    int rc;

    ble_gattc_dbg_assert_proc_not_inserted(proc);

    rc = ble_gatts_rx_indicate_ack(proc->conn_handle,
    e748:	8981      	ldrh	r1, [r0, #12]
    e74a:	8900      	ldrh	r0, [r0, #8]
    e74c:	f000 ff90 	bl	f670 <ble_gatts_rx_indicate_ack>
                                   proc->indicate.chr_val_handle);
    if (rc != 0) {
    e750:	b100      	cbz	r0, e754 <ble_gattc_indicate_rx_rsp+0x10>
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
                            proc->indicate.chr_val_handle, 1);

    /* Send the next indication if one is pending. */
    ble_gatts_send_next_indicate(proc->conn_handle);
}
    e752:	bd10      	pop	{r4, pc}
    ble_gap_notify_tx_event(BLE_HS_EDONE, proc->conn_handle,
    e754:	2301      	movs	r3, #1
    e756:	89a2      	ldrh	r2, [r4, #12]
    e758:	8921      	ldrh	r1, [r4, #8]
    e75a:	200e      	movs	r0, #14
    e75c:	f7ff f928 	bl	d9b0 <ble_gap_notify_tx_event>
    ble_gatts_send_next_indicate(proc->conn_handle);
    e760:	8920      	ldrh	r0, [r4, #8]
    e762:	f000 ff59 	bl	f618 <ble_gatts_send_next_indicate>
    e766:	e7f4      	b.n	e752 <ble_gattc_indicate_rx_rsp+0xe>

0000e768 <ble_gattc_timer>:
{
    e768:	b530      	push	{r4, r5, lr}
    e76a:	b083      	sub	sp, #12
    ticks_until_exp = ble_gattc_extract_expired(&exp_list);
    e76c:	4668      	mov	r0, sp
    e76e:	f7ff fd09 	bl	e184 <ble_gattc_extract_expired>
    e772:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
    e774:	e002      	b.n	e77c <ble_gattc_timer+0x14>
        ble_gattc_proc_free(proc);
    e776:	4620      	mov	r0, r4
    e778:	f7ff fd7c 	bl	e274 <ble_gattc_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
    e77c:	9c00      	ldr	r4, [sp, #0]
    e77e:	b174      	cbz	r4, e79e <ble_gattc_timer+0x36>
        ble_gattc_proc_timeout(proc);
    e780:	4620      	mov	r0, r4
    e782:	f7ff fa92 	bl	dcaa <ble_gattc_proc_timeout>
        ble_gap_terminate(proc->conn_handle, BLE_ERR_REM_USER_CONN_TERM);
    e786:	2113      	movs	r1, #19
    e788:	8920      	ldrh	r0, [r4, #8]
    e78a:	f7fe fe1a 	bl	d3c2 <ble_gap_terminate>
        STAILQ_REMOVE_HEAD(&exp_list, next);
    e78e:	9b00      	ldr	r3, [sp, #0]
    e790:	681b      	ldr	r3, [r3, #0]
    e792:	9300      	str	r3, [sp, #0]
    e794:	2b00      	cmp	r3, #0
    e796:	d1ee      	bne.n	e776 <ble_gattc_timer+0xe>
    e798:	f8cd d004 	str.w	sp, [sp, #4]
    e79c:	e7eb      	b.n	e776 <ble_gattc_timer+0xe>
    ticks_until_resume = ble_gattc_ticks_until_resume();
    e79e:	f7ff fca3 	bl	e0e8 <ble_gattc_ticks_until_resume>
    if (ticks_until_resume == 0) {
    e7a2:	4603      	mov	r3, r0
    e7a4:	b128      	cbz	r0, e7b2 <ble_gattc_timer+0x4a>
}
    e7a6:	42ab      	cmp	r3, r5
    e7a8:	bfa8      	it	ge
    e7aa:	462b      	movge	r3, r5
    e7ac:	4618      	mov	r0, r3
    e7ae:	b003      	add	sp, #12
    e7b0:	bd30      	pop	{r4, r5, pc}
        ble_gattc_resume_procs();
    e7b2:	f7ff ff85 	bl	e6c0 <ble_gattc_resume_procs>
        ticks_until_resume = ble_gattc_ticks_until_resume();
    e7b6:	f7ff fc97 	bl	e0e8 <ble_gattc_ticks_until_resume>
    e7ba:	4603      	mov	r3, r0
    e7bc:	e7f3      	b.n	e7a6 <ble_gattc_timer+0x3e>

0000e7be <ble_gattc_notify_custom>:
{
    e7be:	b5f0      	push	{r4, r5, r6, r7, lr}
    e7c0:	b083      	sub	sp, #12
    e7c2:	4607      	mov	r7, r0
    e7c4:	460d      	mov	r5, r1
    if (txom == NULL) {
    e7c6:	4614      	mov	r4, r2
    e7c8:	b192      	cbz	r2, e7f0 <ble_gattc_notify_custom+0x32>
    rc = ble_att_clt_tx_notify(conn_handle, chr_val_handle, txom);
    e7ca:	4622      	mov	r2, r4
    e7cc:	4629      	mov	r1, r5
    e7ce:	4638      	mov	r0, r7
    e7d0:	f006 f818 	bl	14804 <ble_att_clt_tx_notify>
    e7d4:	4606      	mov	r6, r0
    txom = NULL;
    e7d6:	2400      	movs	r4, #0
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 0);
    e7d8:	2300      	movs	r3, #0
    e7da:	462a      	mov	r2, r5
    e7dc:	4639      	mov	r1, r7
    e7de:	4630      	mov	r0, r6
    e7e0:	f7ff f8e6 	bl	d9b0 <ble_gap_notify_tx_event>
    os_mbuf_free_chain(txom);
    e7e4:	4620      	mov	r0, r4
    e7e6:	f7fb fcfb 	bl	a1e0 <os_mbuf_free_chain>
}
    e7ea:	4630      	mov	r0, r6
    e7ec:	b003      	add	sp, #12
    e7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txom = ble_hs_mbuf_att_pkt();
    e7f0:	f002 fec3 	bl	1157a <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
    e7f4:	4604      	mov	r4, r0
    e7f6:	b158      	cbz	r0, e810 <ble_gattc_notify_custom+0x52>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE,
    e7f8:	2200      	movs	r2, #0
    e7fa:	9200      	str	r2, [sp, #0]
    e7fc:	4603      	mov	r3, r0
    e7fe:	4629      	mov	r1, r5
    e800:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e804:	f006 ff14 	bl	15630 <ble_att_svr_read_handle>
        if (rc != 0) {
    e808:	2800      	cmp	r0, #0
    e80a:	d0de      	beq.n	e7ca <ble_gattc_notify_custom+0xc>
            rc = BLE_HS_EAPP;
    e80c:	2609      	movs	r6, #9
    e80e:	e7e3      	b.n	e7d8 <ble_gattc_notify_custom+0x1a>
            rc = BLE_HS_ENOMEM;
    e810:	2606      	movs	r6, #6
    e812:	e7e1      	b.n	e7d8 <ble_gattc_notify_custom+0x1a>

0000e814 <ble_gattc_notify>:
{
    e814:	b508      	push	{r3, lr}
    rc = ble_gattc_notify_custom(conn_handle, chr_val_handle, NULL);
    e816:	2200      	movs	r2, #0
    e818:	f7ff ffd1 	bl	e7be <ble_gattc_notify_custom>
}
    e81c:	bd08      	pop	{r3, pc}

0000e81e <ble_gatts_indicate_fail_notconn>:
 * Causes the indication in progress for the specified connection (if any) to
 * fail with a status code of BLE_HS_ENOTCONN;
 */
void
ble_gatts_indicate_fail_notconn(uint16_t conn_handle)
{
    e81e:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_INDICATE, BLE_HS_ENOTCONN);
    e820:	2207      	movs	r2, #7
    e822:	210e      	movs	r1, #14
    e824:	f7ff fd48 	bl	e2b8 <ble_gattc_fail_procs>
}
    e828:	bd08      	pop	{r3, pc}

0000e82a <ble_gattc_indicate_custom>:

int
ble_gattc_indicate_custom(uint16_t conn_handle, uint16_t chr_val_handle,
                          struct os_mbuf *txom)
{
    e82a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e82e:	b082      	sub	sp, #8
    e830:	4680      	mov	r8, r0
    e832:	460f      	mov	r7, r1
    e834:	4614      	mov	r4, r2
    struct ble_hs_conn *conn;
    int rc;

    STATS_INC(ble_gattc_stats, indicate);

    proc = ble_gattc_proc_alloc();
    e836:	f7ff ff63 	bl	e700 <ble_gattc_proc_alloc>
    if (proc == NULL) {
    e83a:	4605      	mov	r5, r0
    e83c:	b3d0      	cbz	r0, e8b4 <ble_gattc_indicate_custom+0x8a>
        rc = BLE_HS_ENOMEM;
        goto done;
    }

    proc->op = BLE_GATT_OP_INDICATE;
    e83e:	230e      	movs	r3, #14
    e840:	7283      	strb	r3, [r0, #10]
    proc->conn_handle = conn_handle;
    e842:	f8a0 8008 	strh.w	r8, [r0, #8]
    proc->indicate.chr_val_handle = chr_val_handle;
    e846:	8187      	strh	r7, [r0, #12]

    ble_gattc_log_indicate(chr_val_handle);

    if (txom == NULL) {
    e848:	b1c4      	cbz	r4, e87c <ble_gattc_indicate_custom+0x52>
            rc = BLE_HS_EAPP;
            goto done;
        }
    }

    rc = ble_att_clt_tx_indicate(conn_handle, chr_val_handle, txom);
    e84a:	4622      	mov	r2, r4
    e84c:	4639      	mov	r1, r7
    e84e:	4640      	mov	r0, r8
    e850:	f005 fff8 	bl	14844 <ble_att_clt_tx_indicate>
    txom = NULL;
    if (rc != 0) {
    e854:	4606      	mov	r6, r0
    e856:	b308      	cbz	r0, e89c <ble_gattc_indicate_custom+0x72>
    txom = NULL;
    e858:	2400      	movs	r4, #0
    if (rc != 0) {
        STATS_INC(ble_gattc_stats, indicate_fail);
    }

    /* Tell the application that an indication transmission was attempted. */
    ble_gap_notify_tx_event(rc, conn_handle, chr_val_handle, 1);
    e85a:	2301      	movs	r3, #1
    e85c:	463a      	mov	r2, r7
    e85e:	4641      	mov	r1, r8
    e860:	4630      	mov	r0, r6
    e862:	f7ff f8a5 	bl	d9b0 <ble_gap_notify_tx_event>

    ble_gattc_process_status(proc, rc);
    e866:	4631      	mov	r1, r6
    e868:	4628      	mov	r0, r5
    e86a:	f7ff ff16 	bl	e69a <ble_gattc_process_status>
    os_mbuf_free_chain(txom);
    e86e:	4620      	mov	r0, r4
    e870:	f7fb fcb6 	bl	a1e0 <os_mbuf_free_chain>
    return rc;
}
    e874:	4630      	mov	r0, r6
    e876:	b002      	add	sp, #8
    e878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        txom = ble_hs_mbuf_att_pkt();
    e87c:	f002 fe7d 	bl	1157a <ble_hs_mbuf_att_pkt>
        if (txom == NULL) {
    e880:	4604      	mov	r4, r0
    e882:	b1c8      	cbz	r0, e8b8 <ble_gattc_indicate_custom+0x8e>
        rc = ble_att_svr_read_handle(BLE_HS_CONN_HANDLE_NONE, chr_val_handle,
    e884:	2200      	movs	r2, #0
    e886:	9200      	str	r2, [sp, #0]
    e888:	4603      	mov	r3, r0
    e88a:	4639      	mov	r1, r7
    e88c:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e890:	f006 fece 	bl	15630 <ble_att_svr_read_handle>
        if (rc != 0) {
    e894:	2800      	cmp	r0, #0
    e896:	d0d8      	beq.n	e84a <ble_gattc_indicate_custom+0x20>
            rc = BLE_HS_EAPP;
    e898:	2609      	movs	r6, #9
    e89a:	e7de      	b.n	e85a <ble_gattc_indicate_custom+0x30>
    ble_hs_lock();
    e89c:	f001 f902 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    e8a0:	4640      	mov	r0, r8
    e8a2:	f001 ff09 	bl	106b8 <ble_hs_conn_find>
    if (conn != NULL) {
    e8a6:	b108      	cbz	r0, e8ac <ble_gattc_indicate_custom+0x82>
        conn->bhc_gatt_svr.indicate_val_handle = chr_val_handle;
    e8a8:	f8a0 7054 	strh.w	r7, [r0, #84]	; 0x54
    ble_hs_unlock();
    e8ac:	f001 f8fe 	bl	faac <ble_hs_unlock>
    txom = NULL;
    e8b0:	2400      	movs	r4, #0
    e8b2:	e7d2      	b.n	e85a <ble_gattc_indicate_custom+0x30>
        rc = BLE_HS_ENOMEM;
    e8b4:	2606      	movs	r6, #6
    e8b6:	e7d0      	b.n	e85a <ble_gattc_indicate_custom+0x30>
            rc = BLE_HS_ENOMEM;
    e8b8:	2606      	movs	r6, #6
    e8ba:	e7ce      	b.n	e85a <ble_gattc_indicate_custom+0x30>

0000e8bc <ble_gattc_indicate>:

int
ble_gattc_indicate(uint16_t conn_handle, uint16_t chr_val_handle)
{
    e8bc:	b508      	push	{r3, lr}
    return ble_gattc_indicate_custom(conn_handle, chr_val_handle, NULL);
    e8be:	2200      	movs	r2, #0
    e8c0:	f7ff ffb3 	bl	e82a <ble_gattc_indicate_custom>
}
    e8c4:	bd08      	pop	{r3, pc}

0000e8c6 <ble_gattc_rx_err>:
 * Dispatches an incoming ATT error-response to the appropriate active GATT
 * procedure.
 */
void
ble_gattc_rx_err(uint16_t conn_handle, uint16_t handle, uint16_t status)
{
    e8c6:	b570      	push	{r4, r5, r6, lr}
    e8c8:	460e      	mov	r6, r1
    e8ca:	4615      	mov	r5, r2
    struct ble_gattc_proc *proc;
    ble_gattc_err_fn *err_cb;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_NONE);
    e8cc:	21ff      	movs	r1, #255	; 0xff
    e8ce:	f7ff fc89 	bl	e1e4 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
    e8d2:	b168      	cbz	r0, e8f0 <ble_gattc_rx_err+0x2a>
    e8d4:	4604      	mov	r4, r0
        err_cb = ble_gattc_err_dispatch_get(proc->op);
    e8d6:	7a80      	ldrb	r0, [r0, #10]
    e8d8:	f7ff f9b0 	bl	dc3c <ble_gattc_err_dispatch_get>
        if (err_cb != NULL) {
    e8dc:	4603      	mov	r3, r0
    e8de:	b120      	cbz	r0, e8ea <ble_gattc_rx_err+0x24>
            err_cb(proc, BLE_HS_ERR_ATT_BASE + status, handle);
    e8e0:	4632      	mov	r2, r6
    e8e2:	f505 7180 	add.w	r1, r5, #256	; 0x100
    e8e6:	4620      	mov	r0, r4
    e8e8:	4798      	blx	r3
        }
        ble_gattc_proc_free(proc);
    e8ea:	4620      	mov	r0, r4
    e8ec:	f7ff fcc2 	bl	e274 <ble_gattc_proc_free>
    }
}
    e8f0:	bd70      	pop	{r4, r5, r6, pc}

0000e8f2 <ble_gattc_rx_mtu>:
 * Dispatches an incoming ATT exchange-mtu-response to the appropriate active
 * GATT procedure.
 */
void
ble_gattc_rx_mtu(uint16_t conn_handle, int status, uint16_t chan_mtu)
{
    e8f2:	b570      	push	{r4, r5, r6, lr}
    e8f4:	460d      	mov	r5, r1
    e8f6:	4616      	mov	r6, r2
    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle, BLE_GATT_OP_MTU);
    e8f8:	2100      	movs	r1, #0
    e8fa:	f7ff fc73 	bl	e1e4 <ble_gattc_extract_first_by_conn_op>
    if (proc != NULL) {
    e8fe:	b148      	cbz	r0, e914 <ble_gattc_rx_mtu+0x22>
    e900:	4604      	mov	r4, r0
        ble_gattc_mtu_cb(proc, status, 0, chan_mtu);
    e902:	4633      	mov	r3, r6
    e904:	2200      	movs	r2, #0
    e906:	4629      	mov	r1, r5
    e908:	f7ff f9e8 	bl	dcdc <ble_gattc_mtu_cb>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
    e90c:	210e      	movs	r1, #14
    e90e:	4620      	mov	r0, r4
    e910:	f7ff fec3 	bl	e69a <ble_gattc_process_status>
    }
}
    e914:	bd70      	pop	{r4, r5, r6, pc}

0000e916 <ble_gattc_rx_indicate_rsp>:
 * Dispatches an incoming ATT handle-value-confirmation to the appropriate
 * active GATT procedure.
 */
void
ble_gattc_rx_indicate_rsp(uint16_t conn_handle)
{
    e916:	b510      	push	{r4, lr}
    return;
#endif

    struct ble_gattc_proc *proc;

    proc = ble_gattc_extract_first_by_conn_op(conn_handle,
    e918:	210e      	movs	r1, #14
    e91a:	f7ff fc63 	bl	e1e4 <ble_gattc_extract_first_by_conn_op>
                                              BLE_GATT_OP_INDICATE);
    if (proc != NULL) {
    e91e:	b130      	cbz	r0, e92e <ble_gattc_rx_indicate_rsp+0x18>
    e920:	4604      	mov	r4, r0
        ble_gattc_indicate_rx_rsp(proc);
    e922:	f7ff ff0f 	bl	e744 <ble_gattc_indicate_rx_rsp>
        ble_gattc_process_status(proc, BLE_HS_EDONE);
    e926:	210e      	movs	r1, #14
    e928:	4620      	mov	r0, r4
    e92a:	f7ff feb6 	bl	e69a <ble_gattc_process_status>
    }
}
    e92e:	bd10      	pop	{r4, pc}

0000e930 <ble_gattc_connection_broken>:
 * @param conn_handle           The handle of the connection that was
 *                                  terminated.
 */
void
ble_gattc_connection_broken(uint16_t conn_handle)
{
    e930:	b508      	push	{r3, lr}
    ble_gattc_fail_procs(conn_handle, BLE_GATT_OP_NONE, BLE_HS_ENOTCONN);
    e932:	2207      	movs	r2, #7
    e934:	21ff      	movs	r1, #255	; 0xff
    e936:	f7ff fcbf 	bl	e2b8 <ble_gattc_fail_procs>
}
    e93a:	bd08      	pop	{r3, pc}

0000e93c <ble_gattc_init>:
    return !STAILQ_EMPTY(&ble_gattc_procs);
}

int
ble_gattc_init(void)
{
    e93c:	b500      	push	{lr}
    e93e:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_gattc_procs);
    e940:	4b07      	ldr	r3, [pc, #28]	; (e960 <ble_gattc_init+0x24>)
    e942:	2200      	movs	r2, #0
    e944:	601a      	str	r2, [r3, #0]
    e946:	605b      	str	r3, [r3, #4]

    if (MYNEWT_VAL(BLE_GATT_MAX_PROCS) > 0) {
        rc = os_mempool_init(&ble_gattc_proc_pool,
    e948:	4b06      	ldr	r3, [pc, #24]	; (e964 <ble_gattc_init+0x28>)
    e94a:	9300      	str	r3, [sp, #0]
    e94c:	4b06      	ldr	r3, [pc, #24]	; (e968 <ble_gattc_init+0x2c>)
    e94e:	2238      	movs	r2, #56	; 0x38
    e950:	2104      	movs	r1, #4
    e952:	4806      	ldr	r0, [pc, #24]	; (e96c <ble_gattc_init+0x30>)
    e954:	f7fc f84e 	bl	a9f4 <os_mempool_init>
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
    e958:	b003      	add	sp, #12
    e95a:	f85d fb04 	ldr.w	pc, [sp], #4
    e95e:	bf00      	nop
    e960:	200071e0 	.word	0x200071e0
    e964:	00028cfc 	.word	0x00028cfc
    e968:	200070e4 	.word	0x200070e4
    e96c:	200071c4 	.word	0x200071c4

0000e970 <ble_gatts_chr_clt_cfg_allowed>:
ble_gatts_chr_clt_cfg_allowed(const struct ble_gatt_chr_def *chr)
{
    uint16_t flags;

    flags = 0;
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
    e970:	8a03      	ldrh	r3, [r0, #16]
    e972:	f013 0f10 	tst.w	r3, #16
    e976:	d106      	bne.n	e986 <ble_gatts_chr_clt_cfg_allowed+0x16>
    flags = 0;
    e978:	2000      	movs	r0, #0
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
    e97a:	f013 0f20 	tst.w	r3, #32
    e97e:	d001      	beq.n	e984 <ble_gatts_chr_clt_cfg_allowed+0x14>
        flags |= BLE_GATTS_CLT_CFG_F_INDICATE;
    e980:	f040 0002 	orr.w	r0, r0, #2
    }

    return flags;
}
    e984:	4770      	bx	lr
        flags |= BLE_GATTS_CLT_CFG_F_NOTIFY;
    e986:	2001      	movs	r0, #1
    e988:	e7f7      	b.n	e97a <ble_gatts_chr_clt_cfg_allowed+0xa>

0000e98a <ble_gatts_att_flags_from_chr_flags>:
ble_gatts_att_flags_from_chr_flags(ble_gatt_chr_flags chr_flags)
{
    uint8_t att_flags;

    att_flags = 0;
    if (chr_flags & BLE_GATT_CHR_F_READ) {
    e98a:	f010 0f02 	tst.w	r0, #2
    e98e:	d125      	bne.n	e9dc <ble_gatts_att_flags_from_chr_flags+0x52>
    att_flags = 0;
    e990:	2300      	movs	r3, #0
        att_flags |= BLE_ATT_F_READ;
    }
    if (chr_flags & (BLE_GATT_CHR_F_WRITE_NO_RSP | BLE_GATT_CHR_F_WRITE)) {
    e992:	f010 0f0c 	tst.w	r0, #12
    e996:	d001      	beq.n	e99c <ble_gatts_att_flags_from_chr_flags+0x12>
        att_flags |= BLE_ATT_F_WRITE;
    e998:	f043 0302 	orr.w	r3, r3, #2
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_ENC) {
    e99c:	f410 7f00 	tst.w	r0, #512	; 0x200
    e9a0:	d001      	beq.n	e9a6 <ble_gatts_att_flags_from_chr_flags+0x1c>
        att_flags |= BLE_ATT_F_READ_ENC;
    e9a2:	f043 0304 	orr.w	r3, r3, #4
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHEN) {
    e9a6:	f410 6f80 	tst.w	r0, #1024	; 0x400
    e9aa:	d001      	beq.n	e9b0 <ble_gatts_att_flags_from_chr_flags+0x26>
        att_flags |= BLE_ATT_F_READ_AUTHEN;
    e9ac:	f043 0308 	orr.w	r3, r3, #8
    }
    if (chr_flags & BLE_GATT_CHR_F_READ_AUTHOR) {
    e9b0:	f410 6f00 	tst.w	r0, #2048	; 0x800
    e9b4:	d001      	beq.n	e9ba <ble_gatts_att_flags_from_chr_flags+0x30>
        att_flags |= BLE_ATT_F_READ_AUTHOR;
    e9b6:	f043 0310 	orr.w	r3, r3, #16
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_ENC) {
    e9ba:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    e9be:	d001      	beq.n	e9c4 <ble_gatts_att_flags_from_chr_flags+0x3a>
        att_flags |= BLE_ATT_F_WRITE_ENC;
    e9c0:	f043 0320 	orr.w	r3, r3, #32
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHEN) {
    e9c4:	f410 5f00 	tst.w	r0, #8192	; 0x2000
    e9c8:	d001      	beq.n	e9ce <ble_gatts_att_flags_from_chr_flags+0x44>
        att_flags |= BLE_ATT_F_WRITE_AUTHEN;
    e9ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    }
    if (chr_flags & BLE_GATT_CHR_F_WRITE_AUTHOR) {
    e9ce:	f410 4f80 	tst.w	r0, #16384	; 0x4000
    e9d2:	d001      	beq.n	e9d8 <ble_gatts_att_flags_from_chr_flags+0x4e>
        att_flags |= BLE_ATT_F_WRITE_AUTHOR;
    e9d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    }

    return att_flags;
}
    e9d8:	4618      	mov	r0, r3
    e9da:	4770      	bx	lr
        att_flags |= BLE_ATT_F_READ;
    e9dc:	2301      	movs	r3, #1
    e9de:	e7d8      	b.n	e992 <ble_gatts_att_flags_from_chr_flags+0x8>

0000e9e0 <ble_gatts_chr_properties>:
{
    uint8_t properties;

    properties = 0;

    if (chr->flags & BLE_GATT_CHR_F_BROADCAST) {
    e9e0:	8a03      	ldrh	r3, [r0, #16]
    e9e2:	f013 0f01 	tst.w	r3, #1
    e9e6:	d124      	bne.n	ea32 <ble_gatts_chr_properties+0x52>
    properties = 0;
    e9e8:	2000      	movs	r0, #0
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
    }
    if (chr->flags & BLE_GATT_CHR_F_READ) {
    e9ea:	f013 0f02 	tst.w	r3, #2
    e9ee:	d001      	beq.n	e9f4 <ble_gatts_chr_properties+0x14>
        properties |= BLE_GATT_CHR_PROP_READ;
    e9f0:	f040 0002 	orr.w	r0, r0, #2
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE_NO_RSP) {
    e9f4:	f013 0f04 	tst.w	r3, #4
    e9f8:	d001      	beq.n	e9fe <ble_gatts_chr_properties+0x1e>
        properties |= BLE_GATT_CHR_PROP_WRITE_NO_RSP;
    e9fa:	f040 0004 	orr.w	r0, r0, #4
    }
    if (chr->flags & BLE_GATT_CHR_F_WRITE) {
    e9fe:	f013 0f08 	tst.w	r3, #8
    ea02:	d001      	beq.n	ea08 <ble_gatts_chr_properties+0x28>
        properties |= BLE_GATT_CHR_PROP_WRITE;
    ea04:	f040 0008 	orr.w	r0, r0, #8
    }
    if (chr->flags & BLE_GATT_CHR_F_NOTIFY) {
    ea08:	f013 0f10 	tst.w	r3, #16
    ea0c:	d001      	beq.n	ea12 <ble_gatts_chr_properties+0x32>
        properties |= BLE_GATT_CHR_PROP_NOTIFY;
    ea0e:	f040 0010 	orr.w	r0, r0, #16
    }
    if (chr->flags & BLE_GATT_CHR_F_INDICATE) {
    ea12:	f013 0f20 	tst.w	r3, #32
    ea16:	d001      	beq.n	ea1c <ble_gatts_chr_properties+0x3c>
        properties |= BLE_GATT_CHR_PROP_INDICATE;
    ea18:	f040 0020 	orr.w	r0, r0, #32
    }
    if (chr->flags & BLE_GATT_CHR_F_AUTH_SIGN_WRITE) {
    ea1c:	f013 0f40 	tst.w	r3, #64	; 0x40
    ea20:	d001      	beq.n	ea26 <ble_gatts_chr_properties+0x46>
        properties |= BLE_GATT_CHR_PROP_AUTH_SIGN_WRITE;
    ea22:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    }
    if (chr->flags &
    ea26:	f413 7fc0 	tst.w	r3, #384	; 0x180
    ea2a:	d001      	beq.n	ea30 <ble_gatts_chr_properties+0x50>
        (BLE_GATT_CHR_F_RELIABLE_WRITE | BLE_GATT_CHR_F_AUX_WRITE)) {

        properties |= BLE_GATT_CHR_PROP_EXTENDED;
    ea2c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    }

    return properties;
}
    ea30:	4770      	bx	lr
        properties |= BLE_GATT_CHR_PROP_BROADCAST;
    ea32:	2001      	movs	r0, #1
    ea34:	e7d9      	b.n	e9ea <ble_gatts_chr_properties+0xa>

0000ea36 <ble_gatts_chr_is_sane>:
}

static int
ble_gatts_chr_is_sane(const struct ble_gatt_chr_def *chr)
{
    if (chr->uuid == NULL) {
    ea36:	6803      	ldr	r3, [r0, #0]
    ea38:	b12b      	cbz	r3, ea46 <ble_gatts_chr_is_sane+0x10>
        return 0;
    }

    if (chr->access_cb == NULL) {
    ea3a:	6843      	ldr	r3, [r0, #4]
    ea3c:	b10b      	cbz	r3, ea42 <ble_gatts_chr_is_sane+0xc>
        return 0;
    }

    /* XXX: Check properties. */

    return 1;
    ea3e:	2001      	movs	r0, #1
}
    ea40:	4770      	bx	lr
        return 0;
    ea42:	2000      	movs	r0, #0
    ea44:	4770      	bx	lr
        return 0;
    ea46:	2000      	movs	r0, #0
    ea48:	4770      	bx	lr

0000ea4a <ble_gatts_chr_op>:

static uint8_t
ble_gatts_chr_op(uint8_t att_op)
{
    switch (att_op) {
    ea4a:	2802      	cmp	r0, #2
    ea4c:	d001      	beq.n	ea52 <ble_gatts_chr_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_CHR;
    ea4e:	2000      	movs	r0, #0
    ea50:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_CHR;
    ea52:	2001      	movs	r0, #1

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_CHR;
    }
}
    ea54:	4770      	bx	lr
	...

0000ea58 <ble_gatts_find_svc_entry_idx>:
static int
ble_gatts_find_svc_entry_idx(const struct ble_gatt_svc_def *svc)
{
    int i;

    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
    ea58:	2300      	movs	r3, #0
    ea5a:	4a08      	ldr	r2, [pc, #32]	; (ea7c <ble_gatts_find_svc_entry_idx+0x24>)
    ea5c:	8812      	ldrh	r2, [r2, #0]
    ea5e:	429a      	cmp	r2, r3
    ea60:	dd07      	ble.n	ea72 <ble_gatts_find_svc_entry_idx+0x1a>
        if (ble_gatts_svc_entries[i].svc == svc) {
    ea62:	4a07      	ldr	r2, [pc, #28]	; (ea80 <ble_gatts_find_svc_entry_idx+0x28>)
    ea64:	6812      	ldr	r2, [r2, #0]
    ea66:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    ea6a:	4282      	cmp	r2, r0
    ea6c:	d003      	beq.n	ea76 <ble_gatts_find_svc_entry_idx+0x1e>
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
    ea6e:	3301      	adds	r3, #1
    ea70:	e7f3      	b.n	ea5a <ble_gatts_find_svc_entry_idx+0x2>
            return i;
        }
    }

    return -1;
    ea72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    ea76:	4618      	mov	r0, r3
    ea78:	4770      	bx	lr
    ea7a:	bf00      	nop
    ea7c:	2000721c 	.word	0x2000721c
    ea80:	20007224 	.word	0x20007224

0000ea84 <ble_gatts_svc_incs_satisfied>:

static int
ble_gatts_svc_incs_satisfied(const struct ble_gatt_svc_def *svc)
{
    ea84:	b538      	push	{r3, r4, r5, lr}
    int idx;
    int i;

    if (svc->includes == NULL) {
    ea86:	6885      	ldr	r5, [r0, #8]
    ea88:	b195      	cbz	r5, eab0 <ble_gatts_svc_incs_satisfied+0x2c>
        /* No included services. */
        return 1;
    }

    for (i = 0; svc->includes[i] != NULL; i++) {
    ea8a:	2400      	movs	r4, #0
    ea8c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
    ea90:	b160      	cbz	r0, eaac <ble_gatts_svc_incs_satisfied+0x28>
        idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
    ea92:	f7ff ffe1 	bl	ea58 <ble_gatts_find_svc_entry_idx>
        if (idx == -1 || ble_gatts_svc_entries[idx].handle == 0) {
    ea96:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    ea9a:	d00b      	beq.n	eab4 <ble_gatts_svc_incs_satisfied+0x30>
    ea9c:	4b07      	ldr	r3, [pc, #28]	; (eabc <ble_gatts_svc_incs_satisfied+0x38>)
    ea9e:	681b      	ldr	r3, [r3, #0]
    eaa0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    eaa4:	8883      	ldrh	r3, [r0, #4]
    eaa6:	b13b      	cbz	r3, eab8 <ble_gatts_svc_incs_satisfied+0x34>
    for (i = 0; svc->includes[i] != NULL; i++) {
    eaa8:	3401      	adds	r4, #1
    eaaa:	e7ef      	b.n	ea8c <ble_gatts_svc_incs_satisfied+0x8>
            return 0;
        }
    }

    return 1;
    eaac:	2001      	movs	r0, #1
    eaae:	e000      	b.n	eab2 <ble_gatts_svc_incs_satisfied+0x2e>
        return 1;
    eab0:	2001      	movs	r0, #1
}
    eab2:	bd38      	pop	{r3, r4, r5, pc}
            return 0;
    eab4:	2000      	movs	r0, #0
    eab6:	e7fc      	b.n	eab2 <ble_gatts_svc_incs_satisfied+0x2e>
    eab8:	2000      	movs	r0, #0
    eaba:	e7fa      	b.n	eab2 <ble_gatts_svc_incs_satisfied+0x2e>
    eabc:	20007224 	.word	0x20007224

0000eac0 <ble_gatts_dsc_op>:
}

static uint8_t
ble_gatts_dsc_op(uint8_t att_op)
{
    switch (att_op) {
    eac0:	2802      	cmp	r0, #2
    eac2:	d001      	beq.n	eac8 <ble_gatts_dsc_op+0x8>
    case BLE_ATT_ACCESS_OP_READ:
        return BLE_GATT_ACCESS_OP_READ_DSC;
    eac4:	2002      	movs	r0, #2
    eac6:	4770      	bx	lr

    case BLE_ATT_ACCESS_OP_WRITE:
        return BLE_GATT_ACCESS_OP_WRITE_DSC;
    eac8:	2003      	movs	r0, #3

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_GATT_ACCESS_OP_READ_DSC;
    }
}
    eaca:	4770      	bx	lr

0000eacc <ble_gatts_dsc_is_sane>:
}

static int
ble_gatts_dsc_is_sane(const struct ble_gatt_dsc_def *dsc)
{
    if (dsc->uuid == NULL) {
    eacc:	6803      	ldr	r3, [r0, #0]
    eace:	b12b      	cbz	r3, eadc <ble_gatts_dsc_is_sane+0x10>
        return 0;
    }

    if (dsc->access_cb == NULL) {
    ead0:	6883      	ldr	r3, [r0, #8]
    ead2:	b10b      	cbz	r3, ead8 <ble_gatts_dsc_is_sane+0xc>
        return 0;
    }

    return 1;
    ead4:	2001      	movs	r0, #1
}
    ead6:	4770      	bx	lr
        return 0;
    ead8:	2000      	movs	r0, #0
    eada:	4770      	bx	lr
        return 0;
    eadc:	2000      	movs	r0, #0
    eade:	4770      	bx	lr

0000eae0 <ble_gatts_clt_cfg_find_idx>:
                           uint16_t chr_val_handle)
{
    struct ble_gatts_clt_cfg *cfg;
    int i;

    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
    eae0:	2300      	movs	r3, #0
    eae2:	4a07      	ldr	r2, [pc, #28]	; (eb00 <ble_gatts_clt_cfg_find_idx+0x20>)
    eae4:	6812      	ldr	r2, [r2, #0]
    eae6:	429a      	cmp	r2, r3
    eae8:	dd05      	ble.n	eaf6 <ble_gatts_clt_cfg_find_idx+0x16>
        cfg = cfgs + i;
        if (cfg->chr_val_handle == chr_val_handle) {
    eaea:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
    eaee:	428a      	cmp	r2, r1
    eaf0:	d003      	beq.n	eafa <ble_gatts_clt_cfg_find_idx+0x1a>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
    eaf2:	3301      	adds	r3, #1
    eaf4:	e7f5      	b.n	eae2 <ble_gatts_clt_cfg_find_idx+0x2>
            return i;
        }
    }

    return -1;
    eaf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
    eafa:	4618      	mov	r0, r3
    eafc:	4770      	bx	lr
    eafe:	bf00      	nop
    eb00:	20007214 	.word	0x20007214

0000eb04 <ble_gatts_clt_cfg_find>:

static struct ble_gatts_clt_cfg *
ble_gatts_clt_cfg_find(struct ble_gatts_clt_cfg *cfgs,
                       uint16_t chr_val_handle)
{
    eb04:	b510      	push	{r4, lr}
    eb06:	4604      	mov	r4, r0
    int idx;

    idx = ble_gatts_clt_cfg_find_idx(cfgs, chr_val_handle);
    eb08:	f7ff ffea 	bl	eae0 <ble_gatts_clt_cfg_find_idx>
    if (idx == -1) {
    eb0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    eb10:	d002      	beq.n	eb18 <ble_gatts_clt_cfg_find+0x14>
        return NULL;
    } else {
        return cfgs + idx;
    eb12:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    }
}
    eb16:	bd10      	pop	{r4, pc}
        return NULL;
    eb18:	2000      	movs	r0, #0
    eb1a:	e7fc      	b.n	eb16 <ble_gatts_clt_cfg_find+0x12>

0000eb1c <ble_gatts_svc_type_to_uuid>:
}

static int
ble_gatts_svc_type_to_uuid(uint8_t svc_type, const ble_uuid_t **uuid)
{
    switch (svc_type) {
    eb1c:	2801      	cmp	r0, #1
    eb1e:	d003      	beq.n	eb28 <ble_gatts_svc_type_to_uuid+0xc>
    eb20:	2802      	cmp	r0, #2
    eb22:	d005      	beq.n	eb30 <ble_gatts_svc_type_to_uuid+0x14>
    case BLE_GATT_SVC_TYPE_SECONDARY:
        *uuid = uuid_sec;
        return 0;

    default:
        return BLE_HS_EINVAL;
    eb24:	2003      	movs	r0, #3
    }
}
    eb26:	4770      	bx	lr
        *uuid = uuid_pri;
    eb28:	4b03      	ldr	r3, [pc, #12]	; (eb38 <ble_gatts_svc_type_to_uuid+0x1c>)
    eb2a:	600b      	str	r3, [r1, #0]
        return 0;
    eb2c:	2000      	movs	r0, #0
    eb2e:	4770      	bx	lr
        *uuid = uuid_sec;
    eb30:	4b02      	ldr	r3, [pc, #8]	; (eb3c <ble_gatts_svc_type_to_uuid+0x20>)
    eb32:	600b      	str	r3, [r1, #0]
        return 0;
    eb34:	2000      	movs	r0, #0
    eb36:	4770      	bx	lr
    eb38:	20000168 	.word	0x20000168
    eb3c:	2000016c 	.word	0x2000016c

0000eb40 <ble_gatts_svc_is_sane>:

static int
ble_gatts_svc_is_sane(const struct ble_gatt_svc_def *svc)
{
    if (svc->type != BLE_GATT_SVC_TYPE_PRIMARY &&
    eb40:	7803      	ldrb	r3, [r0, #0]
    eb42:	3b01      	subs	r3, #1
    eb44:	b2db      	uxtb	r3, r3
    eb46:	2b01      	cmp	r3, #1
    eb48:	d901      	bls.n	eb4e <ble_gatts_svc_is_sane+0xe>
        svc->type != BLE_GATT_SVC_TYPE_SECONDARY) {

        return 0;
    eb4a:	2000      	movs	r0, #0
    eb4c:	4770      	bx	lr
    }

    if (svc->uuid == NULL) {
    eb4e:	6843      	ldr	r3, [r0, #4]
    eb50:	b10b      	cbz	r3, eb56 <ble_gatts_svc_is_sane+0x16>
        return 0;
    }

    return 1;
    eb52:	2001      	movs	r0, #1
}
    eb54:	4770      	bx	lr
        return 0;
    eb56:	2000      	movs	r0, #0
    eb58:	4770      	bx	lr
	...

0000eb5c <ble_gatts_clt_cfg_size>:
}

static int
ble_gatts_clt_cfg_size(void)
{
    return ble_gatts_num_cfgable_chrs * sizeof (struct ble_gatts_clt_cfg);
    eb5c:	4b01      	ldr	r3, [pc, #4]	; (eb64 <ble_gatts_clt_cfg_size+0x8>)
    eb5e:	6818      	ldr	r0, [r3, #0]
}
    eb60:	0080      	lsls	r0, r0, #2
    eb62:	4770      	bx	lr
    eb64:	20007214 	.word	0x20007214

0000eb68 <ble_gatts_schedule_update>:
ble_gatts_schedule_update(struct ble_hs_conn *conn,
                          struct ble_gatts_clt_cfg *clt_cfg)
{
    uint8_t att_op;

    if (!(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED)) {
    eb68:	788b      	ldrb	r3, [r1, #2]
    eb6a:	f013 0f80 	tst.w	r3, #128	; 0x80
    eb6e:	d101      	bne.n	eb74 <ble_gatts_schedule_update+0xc>
        /* Characteristic not modified.  Nothing to send. */
        att_op = 0;
    eb70:	2000      	movs	r0, #0
    eb72:	4770      	bx	lr
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_NOTIFY) {
    eb74:	f013 0f01 	tst.w	r3, #1
    eb78:	d107      	bne.n	eb8a <ble_gatts_schedule_update+0x22>
        /* Notifications always get sent immediately. */
        att_op = BLE_ATT_OP_NOTIFY_REQ;
    } else if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_INDICATE) {
    eb7a:	f013 0f02 	tst.w	r3, #2
    eb7e:	d009      	beq.n	eb94 <ble_gatts_schedule_update+0x2c>
        /* Only one outstanding indication per peer is allowed.  If we
         * are still awaiting an ack, mark this CCCD as updated so that
         * we know to send the indication upon receiving the expected ack.
         * If there isn't an outstanding indication, send this one now.
         */
        if (conn->bhc_gatt_svr.indicate_val_handle != 0) {
    eb80:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
    eb84:	b942      	cbnz	r2, eb98 <ble_gatts_schedule_update+0x30>
            att_op = 0;
        } else {
            att_op = BLE_ATT_OP_INDICATE_REQ;
    eb86:	201d      	movs	r0, #29
    eb88:	e000      	b.n	eb8c <ble_gatts_schedule_update+0x24>
        att_op = BLE_ATT_OP_NOTIFY_REQ;
    eb8a:	201b      	movs	r0, #27

    /* If we will be sending an update, clear the modified flag so that we
     * don't double-send.
     */
    if (att_op != 0) {
        clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
    eb8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    eb90:	708b      	strb	r3, [r1, #2]
    eb92:	4770      	bx	lr
        att_op = 0;
    eb94:	2000      	movs	r0, #0
    eb96:	4770      	bx	lr
            att_op = 0;
    eb98:	2000      	movs	r0, #0
    }

    return att_op;
}
    eb9a:	4770      	bx	lr

0000eb9c <ble_gatts_count_resources>:
 *                                  invalid resource definition.
 */
static int
ble_gatts_count_resources(const struct ble_gatt_svc_def *svcs,
                          struct ble_gatt_resources *res)
{
    eb9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eba0:	4681      	mov	r9, r0
    eba2:	460c      	mov	r4, r1
    int s;
    int i;
    int c;
    int d;

    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
    eba4:	f04f 0a00 	mov.w	sl, #0
    eba8:	ea4f 130a 	mov.w	r3, sl, lsl #4
    ebac:	eb09 0703 	add.w	r7, r9, r3
    ebb0:	f819 3003 	ldrb.w	r3, [r9, r3]
    ebb4:	2b00      	cmp	r3, #0
    ebb6:	d059      	beq.n	ec6c <ble_gatts_count_resources+0xd0>
        svc = svcs + s;

        if (!ble_gatts_svc_is_sane(svc)) {
    ebb8:	4638      	mov	r0, r7
    ebba:	f7ff ffc1 	bl	eb40 <ble_gatts_svc_is_sane>
    ebbe:	2800      	cmp	r0, #0
    ebc0:	d056      	beq.n	ec70 <ble_gatts_count_resources+0xd4>

        /* Each service requires:
         *     o 1 service
         *     o 1 attribute
         */
        res->svcs++;
    ebc2:	8823      	ldrh	r3, [r4, #0]
    ebc4:	3301      	adds	r3, #1
    ebc6:	8023      	strh	r3, [r4, #0]
        res->attrs++;
    ebc8:	8963      	ldrh	r3, [r4, #10]
    ebca:	3301      	adds	r3, #1
    ebcc:	8163      	strh	r3, [r4, #10]

        if (svc->includes != NULL) {
    ebce:	68bb      	ldr	r3, [r7, #8]
    ebd0:	b163      	cbz	r3, ebec <ble_gatts_count_resources+0x50>
            for (i = 0; svc->includes[i] != NULL; i++) {
    ebd2:	2200      	movs	r2, #0
    ebd4:	68bb      	ldr	r3, [r7, #8]
    ebd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    ebda:	b13b      	cbz	r3, ebec <ble_gatts_count_resources+0x50>
                /* Each include requires:
                 *     o 1 include
                 *     o 1 attribute
                 */
                res->incs++;
    ebdc:	8863      	ldrh	r3, [r4, #2]
    ebde:	3301      	adds	r3, #1
    ebe0:	8063      	strh	r3, [r4, #2]
                res->attrs++;
    ebe2:	8963      	ldrh	r3, [r4, #10]
    ebe4:	3301      	adds	r3, #1
    ebe6:	8163      	strh	r3, [r4, #10]
            for (i = 0; svc->includes[i] != NULL; i++) {
    ebe8:	3201      	adds	r2, #1
    ebea:	e7f3      	b.n	ebd4 <ble_gatts_count_resources+0x38>
            }
        }

        if (svc->characteristics != NULL) {
    ebec:	68fb      	ldr	r3, [r7, #12]
    ebee:	2b00      	cmp	r3, #0
    ebf0:	d039      	beq.n	ec66 <ble_gatts_count_resources+0xca>
            for (c = 0; svc->characteristics[c].uuid != NULL; c++) {
    ebf2:	f04f 0800 	mov.w	r8, #0
    ebf6:	e001      	b.n	ebfc <ble_gatts_count_resources+0x60>
    ebf8:	f108 0801 	add.w	r8, r8, #1
    ebfc:	68fa      	ldr	r2, [r7, #12]
    ebfe:	eb08 0148 	add.w	r1, r8, r8, lsl #1
    ec02:	00cb      	lsls	r3, r1, #3
    ec04:	18d6      	adds	r6, r2, r3
    ec06:	58d3      	ldr	r3, [r2, r3]
    ec08:	2b00      	cmp	r3, #0
    ec0a:	d02c      	beq.n	ec66 <ble_gatts_count_resources+0xca>
                chr = svc->characteristics + c;

                if (!ble_gatts_chr_is_sane(chr)) {
    ec0c:	4630      	mov	r0, r6
    ec0e:	f7ff ff12 	bl	ea36 <ble_gatts_chr_is_sane>
    ec12:	2800      	cmp	r0, #0
    ec14:	d02e      	beq.n	ec74 <ble_gatts_count_resources+0xd8>

                /* Each characteristic requires:
                 *     o 1 characteristic
                 *     o 2 attributes
                 */
                res->chrs++;
    ec16:	88a3      	ldrh	r3, [r4, #4]
    ec18:	3301      	adds	r3, #1
    ec1a:	80a3      	strh	r3, [r4, #4]
                res->attrs += 2;
    ec1c:	8963      	ldrh	r3, [r4, #10]
    ec1e:	3302      	adds	r3, #2
    ec20:	b29b      	uxth	r3, r3
    ec22:	8163      	strh	r3, [r4, #10]

                /* If the characteristic permits notifications or indications,
                 * it has a CCCD.
                 */
                if (chr->flags & BLE_GATT_CHR_F_NOTIFY ||
    ec24:	8a32      	ldrh	r2, [r6, #16]
    ec26:	f012 0f30 	tst.w	r2, #48	; 0x30
    ec2a:	d007      	beq.n	ec3c <ble_gatts_count_resources+0xa0>
                    /* Each CCCD requires:
                     *     o 1 descriptor
                     *     o 1 CCCD
                     *     o 1 attribute
                     */
                    res->dscs++;
    ec2c:	88e2      	ldrh	r2, [r4, #6]
    ec2e:	3201      	adds	r2, #1
    ec30:	80e2      	strh	r2, [r4, #6]
                    res->cccds++;
    ec32:	8922      	ldrh	r2, [r4, #8]
    ec34:	3201      	adds	r2, #1
    ec36:	8122      	strh	r2, [r4, #8]
                    res->attrs++;
    ec38:	3301      	adds	r3, #1
    ec3a:	8163      	strh	r3, [r4, #10]
                }

                if (chr->descriptors != NULL) {
    ec3c:	68f3      	ldr	r3, [r6, #12]
    ec3e:	2b00      	cmp	r3, #0
    ec40:	d0da      	beq.n	ebf8 <ble_gatts_count_resources+0x5c>
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
    ec42:	2500      	movs	r5, #0
    ec44:	68f2      	ldr	r2, [r6, #12]
    ec46:	012b      	lsls	r3, r5, #4
    ec48:	18d0      	adds	r0, r2, r3
    ec4a:	58d3      	ldr	r3, [r2, r3]
    ec4c:	2b00      	cmp	r3, #0
    ec4e:	d0d3      	beq.n	ebf8 <ble_gatts_count_resources+0x5c>
                        if (!ble_gatts_dsc_is_sane(chr->descriptors + d)) {
    ec50:	f7ff ff3c 	bl	eacc <ble_gatts_dsc_is_sane>
    ec54:	b180      	cbz	r0, ec78 <ble_gatts_count_resources+0xdc>

                        /* Each descriptor requires:
                         *     o 1 descriptor
                         *     o 1 attribute
                         */
                        res->dscs++;
    ec56:	88e3      	ldrh	r3, [r4, #6]
    ec58:	3301      	adds	r3, #1
    ec5a:	80e3      	strh	r3, [r4, #6]
                        res->attrs++;
    ec5c:	8963      	ldrh	r3, [r4, #10]
    ec5e:	3301      	adds	r3, #1
    ec60:	8163      	strh	r3, [r4, #10]
                    for (d = 0; chr->descriptors[d].uuid != NULL; d++) {
    ec62:	3501      	adds	r5, #1
    ec64:	e7ee      	b.n	ec44 <ble_gatts_count_resources+0xa8>
    for (s = 0; svcs[s].type != BLE_GATT_SVC_TYPE_END; s++) {
    ec66:	f10a 0a01 	add.w	sl, sl, #1
    ec6a:	e79d      	b.n	eba8 <ble_gatts_count_resources+0xc>
                }
            }
        }
    }

    return 0;
    ec6c:	2000      	movs	r0, #0
    ec6e:	e004      	b.n	ec7a <ble_gatts_count_resources+0xde>
            return BLE_HS_EINVAL;
    ec70:	2003      	movs	r0, #3
    ec72:	e002      	b.n	ec7a <ble_gatts_count_resources+0xde>
                    return BLE_HS_EINVAL;
    ec74:	2003      	movs	r0, #3
    ec76:	e000      	b.n	ec7a <ble_gatts_count_resources+0xde>
                            return BLE_HS_EINVAL;
    ec78:	2003      	movs	r0, #3
}
    ec7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ec7e <ble_gatts_clt_cfg_access_locked>:
{
    ec7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec82:	9e07      	ldr	r6, [sp, #28]
    out_cccd->chr_val_handle = 0;
    ec84:	2300      	movs	r3, #0
    ec86:	8133      	strh	r3, [r6, #8]
    chr_val_handle = attr_handle - 1;
    ec88:	1e4c      	subs	r4, r1, #1
    ec8a:	b2a4      	uxth	r4, r4
    if (chr_val_handle > attr_handle) {
    ec8c:	42a1      	cmp	r1, r4
    ec8e:	d35a      	bcc.n	ed46 <ble_gatts_clt_cfg_access_locked+0xc8>
    ec90:	4615      	mov	r5, r2
    ec92:	4607      	mov	r7, r0
    clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
    ec94:	4621      	mov	r1, r4
    ec96:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    ec98:	f7ff ff34 	bl	eb04 <ble_gatts_clt_cfg_find>
    if (clt_cfg == NULL) {
    ec9c:	4680      	mov	r8, r0
    ec9e:	2800      	cmp	r0, #0
    eca0:	d055      	beq.n	ed4e <ble_gatts_clt_cfg_access_locked+0xd0>
    *out_prev_clt_cfg_flags = clt_cfg->flags;
    eca2:	7882      	ldrb	r2, [r0, #2]
    eca4:	9b08      	ldr	r3, [sp, #32]
    eca6:	701a      	strb	r2, [r3, #0]
    *out_cur_clt_cfg_flags = clt_cfg->flags;
    eca8:	7883      	ldrb	r3, [r0, #2]
    ecaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ecac:	7013      	strb	r3, [r2, #0]
    gatt_op = ble_gatts_dsc_op(att_op);
    ecae:	4628      	mov	r0, r5
    ecb0:	f7ff ff06 	bl	eac0 <ble_gatts_dsc_op>
    switch (gatt_op) {
    ecb4:	2802      	cmp	r0, #2
    ecb6:	d003      	beq.n	ecc0 <ble_gatts_clt_cfg_access_locked+0x42>
    ecb8:	2803      	cmp	r0, #3
    ecba:	d00f      	beq.n	ecdc <ble_gatts_clt_cfg_access_locked+0x5e>
        return BLE_ATT_ERR_UNLIKELY;
    ecbc:	250e      	movs	r5, #14
    ecbe:	e043      	b.n	ed48 <ble_gatts_clt_cfg_access_locked+0xca>
        buf = os_mbuf_extend(om, 2);
    ecc0:	2102      	movs	r1, #2
    ecc2:	9806      	ldr	r0, [sp, #24]
    ecc4:	f7fb fd14 	bl	a6f0 <os_mbuf_extend>
        if (buf == NULL) {
    ecc8:	2800      	cmp	r0, #0
    ecca:	d042      	beq.n	ed52 <ble_gatts_clt_cfg_access_locked+0xd4>
        put_le16(buf, clt_cfg->flags & ~BLE_GATTS_CLT_CFG_F_RESERVED);
    eccc:	f898 1002 	ldrb.w	r1, [r8, #2]
    ecd0:	f001 0103 	and.w	r1, r1, #3
    ecd4:	f00c ff84 	bl	1bbe0 <put_le16>
    return 0;
    ecd8:	2500      	movs	r5, #0
        break;
    ecda:	e035      	b.n	ed48 <ble_gatts_clt_cfg_access_locked+0xca>
        if (OS_MBUF_PKTLEN(om) != 2) {
    ecdc:	9b06      	ldr	r3, [sp, #24]
    ecde:	8a1b      	ldrh	r3, [r3, #16]
    ece0:	2b02      	cmp	r3, #2
    ece2:	d001      	beq.n	ece8 <ble_gatts_clt_cfg_access_locked+0x6a>
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    ece4:	250d      	movs	r5, #13
    ece6:	e02f      	b.n	ed48 <ble_gatts_clt_cfg_access_locked+0xca>
        om = os_mbuf_pullup(om, 2);
    ece8:	2102      	movs	r1, #2
    ecea:	9806      	ldr	r0, [sp, #24]
    ecec:	f7fb fd31 	bl	a752 <os_mbuf_pullup>
        flags = get_le16(om->om_data);
    ecf0:	6800      	ldr	r0, [r0, #0]
    ecf2:	f00c ff96 	bl	1bc22 <get_le16>
        if ((flags & ~clt_cfg->allowed) != 0) {
    ecf6:	f898 5003 	ldrb.w	r5, [r8, #3]
    ecfa:	ea30 0505 	bics.w	r5, r0, r5
    ecfe:	d12a      	bne.n	ed56 <ble_gatts_clt_cfg_access_locked+0xd8>
        if (clt_cfg->flags != flags) {
    ed00:	f898 3002 	ldrb.w	r3, [r8, #2]
    ed04:	4283      	cmp	r3, r0
    ed06:	d01f      	beq.n	ed48 <ble_gatts_clt_cfg_access_locked+0xca>
            clt_cfg->flags = flags;
    ed08:	b2c0      	uxtb	r0, r0
    ed0a:	f888 0002 	strb.w	r0, [r8, #2]
            *out_cur_clt_cfg_flags = flags;
    ed0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ed10:	7018      	strb	r0, [r3, #0]
            if (conn->bhc_sec_state.bonded) {
    ed12:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    ed16:	f013 0f04 	tst.w	r3, #4
    ed1a:	d015      	beq.n	ed48 <ble_gatts_clt_cfg_access_locked+0xca>
                out_cccd->peer_addr = conn->bhc_peer_addr;
    ed1c:	463b      	mov	r3, r7
    ed1e:	f853 0f07 	ldr.w	r0, [r3, #7]!
    ed22:	6030      	str	r0, [r6, #0]
    ed24:	889a      	ldrh	r2, [r3, #4]
    ed26:	799b      	ldrb	r3, [r3, #6]
    ed28:	80b2      	strh	r2, [r6, #4]
    ed2a:	71b3      	strb	r3, [r6, #6]
                    ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
    ed2c:	79f8      	ldrb	r0, [r7, #7]
    ed2e:	f002 fc95 	bl	1165c <ble_hs_misc_peer_addr_type_to_id>
                out_cccd->peer_addr.type =
    ed32:	7030      	strb	r0, [r6, #0]
                out_cccd->chr_val_handle = chr_val_handle;
    ed34:	8134      	strh	r4, [r6, #8]
                out_cccd->flags = clt_cfg->flags;
    ed36:	f898 3002 	ldrb.w	r3, [r8, #2]
    ed3a:	8173      	strh	r3, [r6, #10]
                out_cccd->value_changed = 0;
    ed3c:	7b33      	ldrb	r3, [r6, #12]
    ed3e:	f36f 0300 	bfc	r3, #0, #1
    ed42:	7333      	strb	r3, [r6, #12]
    ed44:	e000      	b.n	ed48 <ble_gatts_clt_cfg_access_locked+0xca>
        return BLE_ATT_ERR_UNLIKELY;
    ed46:	250e      	movs	r5, #14
}
    ed48:	4628      	mov	r0, r5
    ed4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_ATT_ERR_UNLIKELY;
    ed4e:	250e      	movs	r5, #14
    ed50:	e7fa      	b.n	ed48 <ble_gatts_clt_cfg_access_locked+0xca>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
    ed52:	2511      	movs	r5, #17
    ed54:	e7f8      	b.n	ed48 <ble_gatts_clt_cfg_access_locked+0xca>
            return BLE_ATT_ERR_REQ_NOT_SUPPORTED;
    ed56:	2506      	movs	r5, #6
    ed58:	e7f6      	b.n	ed48 <ble_gatts_clt_cfg_access_locked+0xca>

0000ed5a <ble_gatts_subscribe_event>:
{
    ed5a:	b530      	push	{r4, r5, lr}
    ed5c:	b085      	sub	sp, #20
    ed5e:	f89d 4020 	ldrb.w	r4, [sp, #32]
    if ((prev_flags ^ cur_flags) & ~BLE_GATTS_CLT_CFG_F_RESERVED) {
    ed62:	ea83 0504 	eor.w	r5, r3, r4
    ed66:	f035 05fc 	bics.w	r5, r5, #252	; 0xfc
    ed6a:	d101      	bne.n	ed70 <ble_gatts_subscribe_event+0x16>
}
    ed6c:	b005      	add	sp, #20
    ed6e:	bd30      	pop	{r4, r5, pc}
        ble_gap_subscribe_event(conn_handle,
    ed70:	f004 0502 	and.w	r5, r4, #2
    ed74:	9502      	str	r5, [sp, #8]
    ed76:	f003 0502 	and.w	r5, r3, #2
    ed7a:	9501      	str	r5, [sp, #4]
    ed7c:	f004 0401 	and.w	r4, r4, #1
    ed80:	9400      	str	r4, [sp, #0]
    ed82:	f003 0301 	and.w	r3, r3, #1
    ed86:	f7fe fe35 	bl	d9f4 <ble_gap_subscribe_event>
}
    ed8a:	e7ef      	b.n	ed6c <ble_gatts_subscribe_event+0x12>

0000ed8c <ble_gatts_clt_cfg_access>:
{
    ed8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ed90:	b08c      	sub	sp, #48	; 0x30
    ed92:	4606      	mov	r6, r0
    ed94:	460d      	mov	r5, r1
    ed96:	4617      	mov	r7, r2
    ed98:	4698      	mov	r8, r3
    ble_hs_lock();
    ed9a:	f000 fe83 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    ed9e:	4630      	mov	r0, r6
    eda0:	f001 fc8a 	bl	106b8 <ble_hs_conn_find>
    if (conn == NULL) {
    eda4:	b1b8      	cbz	r0, edd6 <ble_gatts_clt_cfg_access+0x4a>
        rc = ble_gatts_clt_cfg_access_locked(conn, attr_handle, op, offset,
    eda6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    eda8:	681b      	ldr	r3, [r3, #0]
    edaa:	f10d 0212 	add.w	r2, sp, #18
    edae:	9203      	str	r2, [sp, #12]
    edb0:	f10d 0213 	add.w	r2, sp, #19
    edb4:	9202      	str	r2, [sp, #8]
    edb6:	aa08      	add	r2, sp, #32
    edb8:	9201      	str	r2, [sp, #4]
    edba:	9300      	str	r3, [sp, #0]
    edbc:	4643      	mov	r3, r8
    edbe:	463a      	mov	r2, r7
    edc0:	4629      	mov	r1, r5
    edc2:	f7ff ff5c 	bl	ec7e <ble_gatts_clt_cfg_access_locked>
    edc6:	4604      	mov	r4, r0
    ble_hs_unlock();
    edc8:	f000 fe70 	bl	faac <ble_hs_unlock>
    if (rc != 0) {
    edcc:	b13c      	cbz	r4, edde <ble_gatts_clt_cfg_access+0x52>
}
    edce:	4620      	mov	r0, r4
    edd0:	b00c      	add	sp, #48	; 0x30
    edd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_unlock();
    edd6:	f000 fe69 	bl	faac <ble_hs_unlock>
        rc = BLE_ATT_ERR_UNLIKELY;
    edda:	240e      	movs	r4, #14
    eddc:	e7f7      	b.n	edce <ble_gatts_clt_cfg_access+0x42>
    chr_val_handle = attr_handle - 1;
    edde:	1e69      	subs	r1, r5, #1
    ble_gatts_subscribe_event(conn_handle, chr_val_handle,
    ede0:	f89d 3013 	ldrb.w	r3, [sp, #19]
    ede4:	f89d 2012 	ldrb.w	r2, [sp, #18]
    ede8:	9200      	str	r2, [sp, #0]
    edea:	2201      	movs	r2, #1
    edec:	b289      	uxth	r1, r1
    edee:	4630      	mov	r0, r6
    edf0:	f7ff ffb3 	bl	ed5a <ble_gatts_subscribe_event>
    if (cccd_value.chr_val_handle != 0) {
    edf4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    edf8:	2b00      	cmp	r3, #0
    edfa:	d0e8      	beq.n	edce <ble_gatts_clt_cfg_access+0x42>
        if (cccd_value.flags == 0) {
    edfc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
    ee00:	b123      	cbz	r3, ee0c <ble_gatts_clt_cfg_access+0x80>
            rc = ble_store_write_cccd(&cccd_value);
    ee02:	a808      	add	r0, sp, #32
    ee04:	f005 f9a3 	bl	1414e <ble_store_write_cccd>
    ee08:	4604      	mov	r4, r0
    ee0a:	e7e0      	b.n	edce <ble_gatts_clt_cfg_access+0x42>
            ble_store_key_from_value_cccd(&cccd_key, &cccd_value);
    ee0c:	a908      	add	r1, sp, #32
    ee0e:	a805      	add	r0, sp, #20
    ee10:	f005 f9a9 	bl	14166 <ble_store_key_from_value_cccd>
            rc = ble_store_delete_cccd(&cccd_key);
    ee14:	a805      	add	r0, sp, #20
    ee16:	f005 f9a0 	bl	1415a <ble_store_delete_cccd>
    ee1a:	4604      	mov	r4, r0
    ee1c:	e7d7      	b.n	edce <ble_gatts_clt_cfg_access+0x42>
	...

0000ee20 <ble_gatts_register_inc>:
{
    ee20:	b500      	push	{lr}
    ee22:	b085      	sub	sp, #20
    rc = ble_att_svr_register(uuid_inc, BLE_ATT_F_READ, 0, &handle,
    ee24:	9001      	str	r0, [sp, #4]
    ee26:	4b06      	ldr	r3, [pc, #24]	; (ee40 <ble_gatts_register_inc+0x20>)
    ee28:	9300      	str	r3, [sp, #0]
    ee2a:	f10d 030e 	add.w	r3, sp, #14
    ee2e:	2200      	movs	r2, #0
    ee30:	2101      	movs	r1, #1
    ee32:	4804      	ldr	r0, [pc, #16]	; (ee44 <ble_gatts_register_inc+0x24>)
    ee34:	f006 fab6 	bl	153a4 <ble_att_svr_register>
}
    ee38:	b005      	add	sp, #20
    ee3a:	f85d fb04 	ldr.w	pc, [sp], #4
    ee3e:	bf00      	nop
    ee40:	0000f163 	.word	0x0000f163
    ee44:	20000170 	.word	0x20000170

0000ee48 <ble_gatts_register_clt_cfg_dsc>:
{
    ee48:	b500      	push	{lr}
    ee4a:	b083      	sub	sp, #12
    rc = ble_att_svr_register(uuid_ccc, BLE_ATT_F_READ | BLE_ATT_F_WRITE, 0,
    ee4c:	2200      	movs	r2, #0
    ee4e:	9201      	str	r2, [sp, #4]
    ee50:	4b04      	ldr	r3, [pc, #16]	; (ee64 <ble_gatts_register_clt_cfg_dsc+0x1c>)
    ee52:	9300      	str	r3, [sp, #0]
    ee54:	4603      	mov	r3, r0
    ee56:	2103      	movs	r1, #3
    ee58:	4803      	ldr	r0, [pc, #12]	; (ee68 <ble_gatts_register_clt_cfg_dsc+0x20>)
    ee5a:	f006 faa3 	bl	153a4 <ble_att_svr_register>
}
    ee5e:	b003      	add	sp, #12
    ee60:	f85d fb04 	ldr.w	pc, [sp], #4
    ee64:	0000ed8d 	.word	0x0000ed8d
    ee68:	20000178 	.word	0x20000178

0000ee6c <ble_gatts_register_dsc>:
{
    ee6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ee6e:	b089      	sub	sp, #36	; 0x24
    ee70:	4607      	mov	r7, r0
    ee72:	460e      	mov	r6, r1
    ee74:	4614      	mov	r4, r2
    if (!ble_gatts_dsc_is_sane(dsc)) {
    ee76:	4610      	mov	r0, r2
    ee78:	f7ff fe28 	bl	eacc <ble_gatts_dsc_is_sane>
    ee7c:	b1e0      	cbz	r0, eeb8 <ble_gatts_register_dsc+0x4c>
    rc = ble_att_svr_register(dsc->uuid, dsc->att_flags, dsc->min_key_size,
    ee7e:	7921      	ldrb	r1, [r4, #4]
    ee80:	7962      	ldrb	r2, [r4, #5]
    ee82:	9401      	str	r4, [sp, #4]
    ee84:	4b0e      	ldr	r3, [pc, #56]	; (eec0 <ble_gatts_register_dsc+0x54>)
    ee86:	9300      	str	r3, [sp, #0]
    ee88:	f10d 030a 	add.w	r3, sp, #10
    ee8c:	6820      	ldr	r0, [r4, #0]
    ee8e:	f006 fa89 	bl	153a4 <ble_att_svr_register>
    if (rc != 0) {
    ee92:	4605      	mov	r5, r0
    ee94:	b988      	cbnz	r0, eeba <ble_gatts_register_dsc+0x4e>
    if (register_cb != NULL) {
    ee96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ee98:	b17b      	cbz	r3, eeba <ble_gatts_register_dsc+0x4e>
        register_ctxt.op = BLE_GATT_REGISTER_OP_DSC;
    ee9a:	2303      	movs	r3, #3
    ee9c:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.dsc.handle = dsc_handle;
    eea0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
    eea4:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.dsc.svc_def = svc;
    eea8:	9707      	str	r7, [sp, #28]
        register_ctxt.dsc.chr_def = chr;
    eeaa:	9606      	str	r6, [sp, #24]
        register_ctxt.dsc.dsc_def = dsc;
    eeac:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
    eeae:	990f      	ldr	r1, [sp, #60]	; 0x3c
    eeb0:	a803      	add	r0, sp, #12
    eeb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    eeb4:	4798      	blx	r3
    eeb6:	e000      	b.n	eeba <ble_gatts_register_dsc+0x4e>
        return BLE_HS_EINVAL;
    eeb8:	2503      	movs	r5, #3
}
    eeba:	4628      	mov	r0, r5
    eebc:	b009      	add	sp, #36	; 0x24
    eebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    eec0:	0000f281 	.word	0x0000f281

0000eec4 <ble_gatts_register_chr>:
{
    eec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    eec8:	b08b      	sub	sp, #44	; 0x2c
    eeca:	4680      	mov	r8, r0
    eecc:	460c      	mov	r4, r1
    eece:	4617      	mov	r7, r2
    eed0:	4699      	mov	r9, r3
    if (!ble_gatts_chr_is_sane(chr)) {
    eed2:	4608      	mov	r0, r1
    eed4:	f7ff fdaf 	bl	ea36 <ble_gatts_chr_is_sane>
    eed8:	2800      	cmp	r0, #0
    eeda:	d061      	beq.n	efa0 <ble_gatts_register_chr+0xdc>
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
    eedc:	4620      	mov	r0, r4
    eede:	f7ff fd47 	bl	e970 <ble_gatts_chr_clt_cfg_allowed>
    eee2:	b140      	cbz	r0, eef6 <ble_gatts_register_chr+0x32>
        if (ble_gatts_num_cfgable_chrs > ble_hs_max_client_configs) {
    eee4:	4b31      	ldr	r3, [pc, #196]	; (efac <ble_gatts_register_chr+0xe8>)
    eee6:	881a      	ldrh	r2, [r3, #0]
    eee8:	4b31      	ldr	r3, [pc, #196]	; (efb0 <ble_gatts_register_chr+0xec>)
    eeea:	681b      	ldr	r3, [r3, #0]
    eeec:	429a      	cmp	r2, r3
    eeee:	db59      	blt.n	efa4 <ble_gatts_register_chr+0xe0>
        ble_gatts_num_cfgable_chrs++;
    eef0:	3301      	adds	r3, #1
    eef2:	4a2f      	ldr	r2, [pc, #188]	; (efb0 <ble_gatts_register_chr+0xec>)
    eef4:	6013      	str	r3, [r2, #0]
    rc = ble_att_svr_register(uuid_chr, BLE_ATT_F_READ, 0, &def_handle,
    eef6:	9401      	str	r4, [sp, #4]
    eef8:	4b2e      	ldr	r3, [pc, #184]	; (efb4 <ble_gatts_register_chr+0xf0>)
    eefa:	9300      	str	r3, [sp, #0]
    eefc:	f10d 0312 	add.w	r3, sp, #18
    ef00:	2200      	movs	r2, #0
    ef02:	2101      	movs	r1, #1
    ef04:	482c      	ldr	r0, [pc, #176]	; (efb8 <ble_gatts_register_chr+0xf4>)
    ef06:	f006 fa4d 	bl	153a4 <ble_att_svr_register>
    if (rc != 0) {
    ef0a:	4605      	mov	r5, r0
    ef0c:	b118      	cbz	r0, ef16 <ble_gatts_register_chr+0x52>
}
    ef0e:	4628      	mov	r0, r5
    ef10:	b00b      	add	sp, #44	; 0x2c
    ef12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    att_flags = ble_gatts_att_flags_from_chr_flags(chr->flags);
    ef16:	8a20      	ldrh	r0, [r4, #16]
    ef18:	f7ff fd37 	bl	e98a <ble_gatts_att_flags_from_chr_flags>
    rc = ble_att_svr_register(chr->uuid, att_flags, chr->min_key_size,
    ef1c:	7ca2      	ldrb	r2, [r4, #18]
    ef1e:	9401      	str	r4, [sp, #4]
    ef20:	4b26      	ldr	r3, [pc, #152]	; (efbc <ble_gatts_register_chr+0xf8>)
    ef22:	9300      	str	r3, [sp, #0]
    ef24:	ab04      	add	r3, sp, #16
    ef26:	4601      	mov	r1, r0
    ef28:	6820      	ldr	r0, [r4, #0]
    ef2a:	f006 fa3b 	bl	153a4 <ble_att_svr_register>
    if (rc != 0) {
    ef2e:	4605      	mov	r5, r0
    ef30:	2800      	cmp	r0, #0
    ef32:	d1ec      	bne.n	ef0e <ble_gatts_register_chr+0x4a>
    if (chr->val_handle != NULL) {
    ef34:	6963      	ldr	r3, [r4, #20]
    ef36:	b113      	cbz	r3, ef3e <ble_gatts_register_chr+0x7a>
        *chr->val_handle = val_handle;
    ef38:	f8bd 2010 	ldrh.w	r2, [sp, #16]
    ef3c:	801a      	strh	r2, [r3, #0]
    if (register_cb != NULL) {
    ef3e:	b187      	cbz	r7, ef62 <ble_gatts_register_chr+0x9e>
        register_ctxt.op = BLE_GATT_REGISTER_OP_CHR;
    ef40:	2302      	movs	r3, #2
    ef42:	f88d 3014 	strb.w	r3, [sp, #20]
        register_ctxt.chr.def_handle = def_handle;
    ef46:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    ef4a:	f8ad 3018 	strh.w	r3, [sp, #24]
        register_ctxt.chr.val_handle = val_handle;
    ef4e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    ef52:	f8ad 301a 	strh.w	r3, [sp, #26]
        register_ctxt.chr.svc_def = svc;
    ef56:	f8cd 8020 	str.w	r8, [sp, #32]
        register_ctxt.chr.chr_def = chr;
    ef5a:	9407      	str	r4, [sp, #28]
        register_cb(&register_ctxt, cb_arg);
    ef5c:	4649      	mov	r1, r9
    ef5e:	a805      	add	r0, sp, #20
    ef60:	47b8      	blx	r7
    if (ble_gatts_chr_clt_cfg_allowed(chr) != 0) {
    ef62:	4620      	mov	r0, r4
    ef64:	f7ff fd04 	bl	e970 <ble_gatts_chr_clt_cfg_allowed>
    ef68:	b990      	cbnz	r0, ef90 <ble_gatts_register_chr+0xcc>
    if (chr->descriptors != NULL) {
    ef6a:	68e6      	ldr	r6, [r4, #12]
    ef6c:	2e00      	cmp	r6, #0
    ef6e:	d0ce      	beq.n	ef0e <ble_gatts_register_chr+0x4a>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
    ef70:	6833      	ldr	r3, [r6, #0]
    ef72:	2b00      	cmp	r3, #0
    ef74:	d0cb      	beq.n	ef0e <ble_gatts_register_chr+0x4a>
            rc = ble_gatts_register_dsc(svc, chr, dsc, def_handle, register_cb,
    ef76:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    ef7a:	f8cd 9004 	str.w	r9, [sp, #4]
    ef7e:	9700      	str	r7, [sp, #0]
    ef80:	4632      	mov	r2, r6
    ef82:	4621      	mov	r1, r4
    ef84:	4640      	mov	r0, r8
    ef86:	f7ff ff71 	bl	ee6c <ble_gatts_register_dsc>
            if (rc != 0) {
    ef8a:	b968      	cbnz	r0, efa8 <ble_gatts_register_chr+0xe4>
        for (dsc = chr->descriptors; dsc->uuid != NULL; dsc++) {
    ef8c:	3610      	adds	r6, #16
    ef8e:	e7ef      	b.n	ef70 <ble_gatts_register_chr+0xac>
        rc = ble_gatts_register_clt_cfg_dsc(&dsc_handle);
    ef90:	f10d 000e 	add.w	r0, sp, #14
    ef94:	f7ff ff58 	bl	ee48 <ble_gatts_register_clt_cfg_dsc>
        if (rc != 0) {
    ef98:	2800      	cmp	r0, #0
    ef9a:	d0e6      	beq.n	ef6a <ble_gatts_register_chr+0xa6>
            return rc;
    ef9c:	4605      	mov	r5, r0
    ef9e:	e7b6      	b.n	ef0e <ble_gatts_register_chr+0x4a>
        return BLE_HS_EINVAL;
    efa0:	2503      	movs	r5, #3
    efa2:	e7b4      	b.n	ef0e <ble_gatts_register_chr+0x4a>
            return BLE_HS_ENOMEM;
    efa4:	2506      	movs	r5, #6
    efa6:	e7b2      	b.n	ef0e <ble_gatts_register_chr+0x4a>
                return rc;
    efa8:	4605      	mov	r5, r0
    efaa:	e7b0      	b.n	ef0e <ble_gatts_register_chr+0x4a>
    efac:	2000732e 	.word	0x2000732e
    efb0:	20007214 	.word	0x20007214
    efb4:	0000f115 	.word	0x0000f115
    efb8:	20000174 	.word	0x20000174
    efbc:	0000f24d 	.word	0x0000f24d

0000efc0 <ble_gatts_register_svc>:
{
    efc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    efc4:	b088      	sub	sp, #32
    efc6:	4604      	mov	r4, r0
    efc8:	460e      	mov	r6, r1
    efca:	4617      	mov	r7, r2
    efcc:	4698      	mov	r8, r3
    if (!ble_gatts_svc_incs_satisfied(svc)) {
    efce:	f7ff fd59 	bl	ea84 <ble_gatts_svc_incs_satisfied>
    efd2:	2800      	cmp	r0, #0
    efd4:	d040      	beq.n	f058 <ble_gatts_register_svc+0x98>
    if (!ble_gatts_svc_is_sane(svc)) {
    efd6:	4620      	mov	r0, r4
    efd8:	f7ff fdb2 	bl	eb40 <ble_gatts_svc_is_sane>
    efdc:	2800      	cmp	r0, #0
    efde:	d040      	beq.n	f062 <ble_gatts_register_svc+0xa2>
    uuid = NULL;
    efe0:	2500      	movs	r5, #0
    efe2:	a908      	add	r1, sp, #32
    efe4:	f841 5d18 	str.w	r5, [r1, #-24]!
    rc = ble_gatts_svc_type_to_uuid(svc->type, &uuid);
    efe8:	7820      	ldrb	r0, [r4, #0]
    efea:	f7ff fd97 	bl	eb1c <ble_gatts_svc_type_to_uuid>
    rc = ble_att_svr_register(uuid, BLE_ATT_F_READ, 0, out_handle,
    efee:	9401      	str	r4, [sp, #4]
    eff0:	4b1f      	ldr	r3, [pc, #124]	; (f070 <ble_gatts_register_svc+0xb0>)
    eff2:	9300      	str	r3, [sp, #0]
    eff4:	4633      	mov	r3, r6
    eff6:	462a      	mov	r2, r5
    eff8:	2101      	movs	r1, #1
    effa:	9802      	ldr	r0, [sp, #8]
    effc:	f006 f9d2 	bl	153a4 <ble_att_svr_register>
    if (rc != 0) {
    f000:	4605      	mov	r5, r0
    f002:	bb50      	cbnz	r0, f05a <ble_gatts_register_svc+0x9a>
    if (register_cb != NULL) {
    f004:	b14f      	cbz	r7, f01a <ble_gatts_register_svc+0x5a>
        register_ctxt.op = BLE_GATT_REGISTER_OP_SVC;
    f006:	2301      	movs	r3, #1
    f008:	f88d 300c 	strb.w	r3, [sp, #12]
        register_ctxt.svc.handle = *out_handle;
    f00c:	8833      	ldrh	r3, [r6, #0]
    f00e:	f8ad 3010 	strh.w	r3, [sp, #16]
        register_ctxt.svc.svc_def = svc;
    f012:	9405      	str	r4, [sp, #20]
        register_cb(&register_ctxt, cb_arg);
    f014:	4641      	mov	r1, r8
    f016:	a803      	add	r0, sp, #12
    f018:	47b8      	blx	r7
    if (svc->includes != NULL) {
    f01a:	68a3      	ldr	r3, [r4, #8]
    f01c:	b17b      	cbz	r3, f03e <ble_gatts_register_svc+0x7e>
        for (i = 0; svc->includes[i] != NULL; i++) {
    f01e:	462e      	mov	r6, r5
    f020:	68a3      	ldr	r3, [r4, #8]
    f022:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
    f026:	b150      	cbz	r0, f03e <ble_gatts_register_svc+0x7e>
            idx = ble_gatts_find_svc_entry_idx(svc->includes[i]);
    f028:	f7ff fd16 	bl	ea58 <ble_gatts_find_svc_entry_idx>
            rc = ble_gatts_register_inc(ble_gatts_svc_entries + idx);
    f02c:	4b11      	ldr	r3, [pc, #68]	; (f074 <ble_gatts_register_svc+0xb4>)
    f02e:	681b      	ldr	r3, [r3, #0]
    f030:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    f034:	f7ff fef4 	bl	ee20 <ble_gatts_register_inc>
            if (rc != 0) {
    f038:	b9a8      	cbnz	r0, f066 <ble_gatts_register_svc+0xa6>
        for (i = 0; svc->includes[i] != NULL; i++) {
    f03a:	3601      	adds	r6, #1
    f03c:	e7f0      	b.n	f020 <ble_gatts_register_svc+0x60>
    if (svc->characteristics != NULL) {
    f03e:	68e6      	ldr	r6, [r4, #12]
    f040:	b15e      	cbz	r6, f05a <ble_gatts_register_svc+0x9a>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
    f042:	6833      	ldr	r3, [r6, #0]
    f044:	b14b      	cbz	r3, f05a <ble_gatts_register_svc+0x9a>
            rc = ble_gatts_register_chr(svc, chr, register_cb, cb_arg);
    f046:	4643      	mov	r3, r8
    f048:	463a      	mov	r2, r7
    f04a:	4631      	mov	r1, r6
    f04c:	4620      	mov	r0, r4
    f04e:	f7ff ff39 	bl	eec4 <ble_gatts_register_chr>
            if (rc != 0) {
    f052:	b950      	cbnz	r0, f06a <ble_gatts_register_svc+0xaa>
        for (chr = svc->characteristics; chr->uuid != NULL; chr++) {
    f054:	3618      	adds	r6, #24
    f056:	e7f4      	b.n	f042 <ble_gatts_register_svc+0x82>
        return BLE_HS_EAGAIN;
    f058:	2501      	movs	r5, #1
}
    f05a:	4628      	mov	r0, r5
    f05c:	b008      	add	sp, #32
    f05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EINVAL;
    f062:	2503      	movs	r5, #3
    f064:	e7f9      	b.n	f05a <ble_gatts_register_svc+0x9a>
                return rc;
    f066:	4605      	mov	r5, r0
    f068:	e7f7      	b.n	f05a <ble_gatts_register_svc+0x9a>
                return rc;
    f06a:	4605      	mov	r5, r0
    f06c:	e7f5      	b.n	f05a <ble_gatts_register_svc+0x9a>
    f06e:	bf00      	nop
    f070:	0000f0ed 	.word	0x0000f0ed
    f074:	20007224 	.word	0x20007224

0000f078 <ble_gatts_register_round>:
{
    f078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f07c:	b082      	sub	sp, #8
    f07e:	4606      	mov	r6, r0
    f080:	4688      	mov	r8, r1
    f082:	4617      	mov	r7, r2
    *out_num_registered = 0;
    f084:	2400      	movs	r4, #0
    f086:	6004      	str	r4, [r0, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
    f088:	e009      	b.n	f09e <ble_gatts_register_round+0x26>
                entry->handle = handle;
    f08a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    f08e:	80ab      	strh	r3, [r5, #4]
                entry->end_group_handle = ble_att_svr_prev_handle();
    f090:	f006 f9b0 	bl	153f4 <ble_att_svr_prev_handle>
    f094:	80e8      	strh	r0, [r5, #6]
                (*out_num_registered)++;
    f096:	6833      	ldr	r3, [r6, #0]
    f098:	3301      	adds	r3, #1
    f09a:	6033      	str	r3, [r6, #0]
    for (i = 0; i < ble_gatts_num_svc_entries; i++) {
    f09c:	3401      	adds	r4, #1
    f09e:	4b11      	ldr	r3, [pc, #68]	; (f0e4 <ble_gatts_register_round+0x6c>)
    f0a0:	881b      	ldrh	r3, [r3, #0]
    f0a2:	42a3      	cmp	r3, r4
    f0a4:	dd17      	ble.n	f0d6 <ble_gatts_register_round+0x5e>
        entry = ble_gatts_svc_entries + i;
    f0a6:	4b10      	ldr	r3, [pc, #64]	; (f0e8 <ble_gatts_register_round+0x70>)
    f0a8:	6818      	ldr	r0, [r3, #0]
    f0aa:	eb00 05c4 	add.w	r5, r0, r4, lsl #3
        if (entry->handle == 0) {
    f0ae:	88ab      	ldrh	r3, [r5, #4]
    f0b0:	2b00      	cmp	r3, #0
    f0b2:	d1f3      	bne.n	f09c <ble_gatts_register_round+0x24>
            rc = ble_gatts_register_svc(entry->svc, &handle, cb, cb_arg);
    f0b4:	463b      	mov	r3, r7
    f0b6:	4642      	mov	r2, r8
    f0b8:	f10d 0106 	add.w	r1, sp, #6
    f0bc:	f850 0034 	ldr.w	r0, [r0, r4, lsl #3]
    f0c0:	f7ff ff7e 	bl	efc0 <ble_gatts_register_svc>
            switch (rc) {
    f0c4:	4603      	mov	r3, r0
    f0c6:	2800      	cmp	r0, #0
    f0c8:	d0df      	beq.n	f08a <ble_gatts_register_round+0x12>
    f0ca:	2801      	cmp	r0, #1
    f0cc:	d0e6      	beq.n	f09c <ble_gatts_register_round+0x24>
}
    f0ce:	4618      	mov	r0, r3
    f0d0:	b002      	add	sp, #8
    f0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (*out_num_registered == 0) {
    f0d6:	6833      	ldr	r3, [r6, #0]
    f0d8:	b10b      	cbz	r3, f0de <ble_gatts_register_round+0x66>
    return 0;
    f0da:	2300      	movs	r3, #0
    f0dc:	e7f7      	b.n	f0ce <ble_gatts_register_round+0x56>
        return BLE_HS_EINVAL;
    f0de:	2303      	movs	r3, #3
    f0e0:	e7f5      	b.n	f0ce <ble_gatts_register_round+0x56>
    f0e2:	bf00      	nop
    f0e4:	2000721c 	.word	0x2000721c
    f0e8:	20007224 	.word	0x20007224

0000f0ec <ble_gatts_svc_access>:
{
    f0ec:	b538      	push	{r3, r4, r5, lr}
    f0ee:	9c05      	ldr	r4, [sp, #20]
    buf = os_mbuf_extend(*om, ble_uuid_length(svc->uuid));
    f0f0:	9b04      	ldr	r3, [sp, #16]
    f0f2:	681d      	ldr	r5, [r3, #0]
    f0f4:	6860      	ldr	r0, [r4, #4]
    f0f6:	f005 fa3d 	bl	14574 <ble_uuid_length>
    f0fa:	b281      	uxth	r1, r0
    f0fc:	4628      	mov	r0, r5
    f0fe:	f7fb faf7 	bl	a6f0 <os_mbuf_extend>
    if (buf == NULL) {
    f102:	b128      	cbz	r0, f110 <ble_gatts_svc_access+0x24>
    f104:	4601      	mov	r1, r0
    ble_uuid_flat(svc->uuid, buf);
    f106:	6860      	ldr	r0, [r4, #4]
    f108:	f005 fa08 	bl	1451c <ble_uuid_flat>
    return 0;
    f10c:	2000      	movs	r0, #0
}
    f10e:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
    f110:	2011      	movs	r0, #17
    f112:	e7fc      	b.n	f10e <ble_gatts_svc_access+0x22>

0000f114 <ble_gatts_chr_def_access>:
{
    f114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f116:	460d      	mov	r5, r1
    f118:	9f06      	ldr	r7, [sp, #24]
    f11a:	9e07      	ldr	r6, [sp, #28]
    buf = os_mbuf_extend(*om, 3);
    f11c:	2103      	movs	r1, #3
    f11e:	6838      	ldr	r0, [r7, #0]
    f120:	f7fb fae6 	bl	a6f0 <os_mbuf_extend>
    if (buf == NULL) {
    f124:	b1c8      	cbz	r0, f15a <ble_gatts_chr_def_access+0x46>
    f126:	4604      	mov	r4, r0
    buf[0] = ble_gatts_chr_properties(chr);
    f128:	4630      	mov	r0, r6
    f12a:	f7ff fc59 	bl	e9e0 <ble_gatts_chr_properties>
    f12e:	f804 0b01 	strb.w	r0, [r4], #1
    put_le16(buf + 1, attr_handle + 1);
    f132:	1c69      	adds	r1, r5, #1
    f134:	b289      	uxth	r1, r1
    f136:	4620      	mov	r0, r4
    f138:	f00c fd52 	bl	1bbe0 <put_le16>
    buf = os_mbuf_extend(*om, ble_uuid_length(chr->uuid));
    f13c:	683c      	ldr	r4, [r7, #0]
    f13e:	6830      	ldr	r0, [r6, #0]
    f140:	f005 fa18 	bl	14574 <ble_uuid_length>
    f144:	b281      	uxth	r1, r0
    f146:	4620      	mov	r0, r4
    f148:	f7fb fad2 	bl	a6f0 <os_mbuf_extend>
    if (buf == NULL) {
    f14c:	4601      	mov	r1, r0
    f14e:	b130      	cbz	r0, f15e <ble_gatts_chr_def_access+0x4a>
    ble_uuid_flat(chr->uuid, buf);
    f150:	6830      	ldr	r0, [r6, #0]
    f152:	f005 f9e3 	bl	1451c <ble_uuid_flat>
    return 0;
    f156:	2000      	movs	r0, #0
}
    f158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ATT_ERR_INSUFFICIENT_RES;
    f15a:	2011      	movs	r0, #17
    f15c:	e7fc      	b.n	f158 <ble_gatts_chr_def_access+0x44>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
    f15e:	2011      	movs	r0, #17
    f160:	e7fa      	b.n	f158 <ble_gatts_chr_def_access+0x44>

0000f162 <ble_gatts_inc_access>:
{
    f162:	b570      	push	{r4, r5, r6, lr}
    f164:	9e04      	ldr	r6, [sp, #16]
    f166:	9c05      	ldr	r4, [sp, #20]
    buf = os_mbuf_extend(*om, 4);
    f168:	2104      	movs	r1, #4
    f16a:	6830      	ldr	r0, [r6, #0]
    f16c:	f7fb fac0 	bl	a6f0 <os_mbuf_extend>
    if (buf == NULL) {
    f170:	b1c8      	cbz	r0, f1a6 <ble_gatts_inc_access+0x44>
    f172:	4605      	mov	r5, r0
    put_le16(buf + 0, entry->handle);
    f174:	88a1      	ldrh	r1, [r4, #4]
    f176:	f00c fd33 	bl	1bbe0 <put_le16>
    put_le16(buf + 2, entry->end_group_handle);
    f17a:	88e1      	ldrh	r1, [r4, #6]
    f17c:	1ca8      	adds	r0, r5, #2
    f17e:	f00c fd2f 	bl	1bbe0 <put_le16>
    uuid16 = ble_uuid_u16(entry->svc->uuid);
    f182:	6823      	ldr	r3, [r4, #0]
    f184:	6858      	ldr	r0, [r3, #4]
    f186:	f005 f98d 	bl	144a4 <ble_uuid_u16>
    if (uuid16 != 0) {
    f18a:	4604      	mov	r4, r0
    f18c:	b908      	cbnz	r0, f192 <ble_gatts_inc_access+0x30>
    return 0;
    f18e:	2000      	movs	r0, #0
}
    f190:	bd70      	pop	{r4, r5, r6, pc}
        buf = os_mbuf_extend(*om, 2);
    f192:	2102      	movs	r1, #2
    f194:	6830      	ldr	r0, [r6, #0]
    f196:	f7fb faab 	bl	a6f0 <os_mbuf_extend>
        if (buf == NULL) {
    f19a:	b130      	cbz	r0, f1aa <ble_gatts_inc_access+0x48>
        put_le16(buf, uuid16);
    f19c:	4621      	mov	r1, r4
    f19e:	f00c fd1f 	bl	1bbe0 <put_le16>
    return 0;
    f1a2:	2000      	movs	r0, #0
    f1a4:	e7f4      	b.n	f190 <ble_gatts_inc_access+0x2e>
        return BLE_ATT_ERR_INSUFFICIENT_RES;
    f1a6:	2011      	movs	r0, #17
    f1a8:	e7f2      	b.n	f190 <ble_gatts_inc_access+0x2e>
            return BLE_ATT_ERR_INSUFFICIENT_RES;
    f1aa:	2011      	movs	r0, #17
    f1ac:	e7f0      	b.n	f190 <ble_gatts_inc_access+0x2e>

0000f1ae <ble_gatts_val_access>:
{
    f1ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f1b2:	4606      	mov	r6, r0
    f1b4:	4688      	mov	r8, r1
    f1b6:	4617      	mov	r7, r2
    f1b8:	461c      	mov	r4, r3
    f1ba:	9d08      	ldr	r5, [sp, #32]
    switch (gatt_ctxt->op) {
    f1bc:	781b      	ldrb	r3, [r3, #0]
    f1be:	2b03      	cmp	r3, #3
    f1c0:	d840      	bhi.n	f244 <ble_gatts_val_access+0x96>
    f1c2:	e8df f003 	tbb	[pc, r3]
    f1c6:	3302      	.short	0x3302
    f1c8:	3302      	.short	0x3302
        if (offset == 0) {
    f1ca:	b9f7      	cbnz	r7, f20a <ble_gatts_val_access+0x5c>
            gatt_ctxt->om = *om;
    f1cc:	682b      	ldr	r3, [r5, #0]
    f1ce:	6063      	str	r3, [r4, #4]
            new_om = 0;
    f1d0:	f04f 0900 	mov.w	r9, #0
        initial_len = OS_MBUF_PKTLEN(gatt_ctxt->om);
    f1d4:	6863      	ldr	r3, [r4, #4]
    f1d6:	f8b3 a010 	ldrh.w	sl, [r3, #16]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
    f1da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f1dc:	4622      	mov	r2, r4
    f1de:	4641      	mov	r1, r8
    f1e0:	4630      	mov	r0, r6
    f1e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
    f1e4:	47b0      	blx	r6
        if (rc == 0) {
    f1e6:	4606      	mov	r6, r0
    f1e8:	b940      	cbnz	r0, f1fc <ble_gatts_val_access+0x4e>
            attr_len = OS_MBUF_PKTLEN(gatt_ctxt->om) - initial_len - offset;
    f1ea:	6861      	ldr	r1, [r4, #4]
    f1ec:	8a0b      	ldrh	r3, [r1, #16]
    f1ee:	eba3 030a 	sub.w	r3, r3, sl
            if (attr_len >= 0) {
    f1f2:	1bdb      	subs	r3, r3, r7
    f1f4:	d418      	bmi.n	f228 <ble_gatts_val_access+0x7a>
                if (new_om) {
    f1f6:	f1b9 0f00 	cmp.w	r9, #0
    f1fa:	d10f      	bne.n	f21c <ble_gatts_val_access+0x6e>
        if (new_om) {
    f1fc:	f1b9 0f00 	cmp.w	r9, #0
    f200:	d01d      	beq.n	f23e <ble_gatts_val_access+0x90>
            os_mbuf_free_chain(gatt_ctxt->om);
    f202:	6860      	ldr	r0, [r4, #4]
    f204:	f7fa ffec 	bl	a1e0 <os_mbuf_free_chain>
    f208:	e019      	b.n	f23e <ble_gatts_val_access+0x90>
            gatt_ctxt->om = os_msys_get_pkthdr(0, 0);
    f20a:	2100      	movs	r1, #0
    f20c:	4608      	mov	r0, r1
    f20e:	f7fb fd00 	bl	ac12 <os_msys_get_pkthdr>
    f212:	6060      	str	r0, [r4, #4]
            if (gatt_ctxt->om == NULL) {
    f214:	b1c0      	cbz	r0, f248 <ble_gatts_val_access+0x9a>
            new_om = 1;
    f216:	f04f 0901 	mov.w	r9, #1
    f21a:	e7db      	b.n	f1d4 <ble_gatts_val_access+0x26>
                    os_mbuf_appendfrom(*om, gatt_ctxt->om, offset, attr_len);
    f21c:	b29b      	uxth	r3, r3
    f21e:	463a      	mov	r2, r7
    f220:	6828      	ldr	r0, [r5, #0]
    f222:	f7fb f8b5 	bl	a390 <os_mbuf_appendfrom>
    f226:	e7e9      	b.n	f1fc <ble_gatts_val_access+0x4e>
                rc = BLE_ATT_ERR_INVALID_OFFSET;
    f228:	2607      	movs	r6, #7
    f22a:	e7e7      	b.n	f1fc <ble_gatts_val_access+0x4e>
        gatt_ctxt->om = *om;
    f22c:	682b      	ldr	r3, [r5, #0]
    f22e:	6063      	str	r3, [r4, #4]
        rc = access_cb(conn_handle, attr_handle, gatt_ctxt, cb_arg);
    f230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f232:	4622      	mov	r2, r4
    f234:	9e09      	ldr	r6, [sp, #36]	; 0x24
    f236:	47b0      	blx	r6
    f238:	4606      	mov	r6, r0
        *om = gatt_ctxt->om;
    f23a:	6863      	ldr	r3, [r4, #4]
    f23c:	602b      	str	r3, [r5, #0]
}
    f23e:	4630      	mov	r0, r6
    f240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return BLE_ATT_ERR_UNLIKELY;
    f244:	260e      	movs	r6, #14
    f246:	e7fa      	b.n	f23e <ble_gatts_val_access+0x90>
                return BLE_ATT_ERR_INSUFFICIENT_RES;
    f248:	2611      	movs	r6, #17
    f24a:	e7f8      	b.n	f23e <ble_gatts_val_access+0x90>

0000f24c <ble_gatts_chr_val_access>:
{
    f24c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f24e:	b089      	sub	sp, #36	; 0x24
    f250:	4605      	mov	r5, r0
    f252:	460e      	mov	r6, r1
    f254:	461f      	mov	r7, r3
    f256:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_chr_op(att_op);
    f258:	4610      	mov	r0, r2
    f25a:	f7ff fbf6 	bl	ea4a <ble_gatts_chr_op>
    f25e:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.chr = chr_def;
    f262:	9407      	str	r4, [sp, #28]
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
    f264:	6863      	ldr	r3, [r4, #4]
    f266:	68a2      	ldr	r2, [r4, #8]
    f268:	9202      	str	r2, [sp, #8]
    f26a:	9301      	str	r3, [sp, #4]
    f26c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f26e:	9300      	str	r3, [sp, #0]
    f270:	ab05      	add	r3, sp, #20
    f272:	463a      	mov	r2, r7
    f274:	4631      	mov	r1, r6
    f276:	4628      	mov	r0, r5
    f278:	f7ff ff99 	bl	f1ae <ble_gatts_val_access>
}
    f27c:	b009      	add	sp, #36	; 0x24
    f27e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f280 <ble_gatts_dsc_access>:
{
    f280:	b5f0      	push	{r4, r5, r6, r7, lr}
    f282:	b089      	sub	sp, #36	; 0x24
    f284:	4605      	mov	r5, r0
    f286:	460e      	mov	r6, r1
    f288:	461f      	mov	r7, r3
    f28a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    gatt_ctxt.op = ble_gatts_dsc_op(att_op);
    f28c:	4610      	mov	r0, r2
    f28e:	f7ff fc17 	bl	eac0 <ble_gatts_dsc_op>
    f292:	f88d 0014 	strb.w	r0, [sp, #20]
    gatt_ctxt.dsc = dsc_def;
    f296:	9407      	str	r4, [sp, #28]
    rc = ble_gatts_val_access(conn_handle, attr_handle, offset, &gatt_ctxt, om,
    f298:	68a3      	ldr	r3, [r4, #8]
    f29a:	68e2      	ldr	r2, [r4, #12]
    f29c:	9202      	str	r2, [sp, #8]
    f29e:	9301      	str	r3, [sp, #4]
    f2a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f2a2:	9300      	str	r3, [sp, #0]
    f2a4:	ab05      	add	r3, sp, #20
    f2a6:	463a      	mov	r2, r7
    f2a8:	4631      	mov	r1, r6
    f2aa:	4628      	mov	r0, r5
    f2ac:	f7ff ff7f 	bl	f1ae <ble_gatts_val_access>
}
    f2b0:	b009      	add	sp, #36	; 0x24
    f2b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f2b4 <ble_gatts_mutable>:
{
    f2b4:	b508      	push	{r3, lr}
    if (ble_gap_adv_active() ||
    f2b6:	f7fd ff49 	bl	d14c <ble_gap_adv_active>
    f2ba:	b108      	cbz	r0, f2c0 <ble_gatts_mutable+0xc>
        return false;
    f2bc:	2000      	movs	r0, #0
}
    f2be:	bd08      	pop	{r3, pc}
        ble_gap_disc_active() ||
    f2c0:	f7fe f834 	bl	d32c <ble_gap_disc_active>
    if (ble_gap_adv_active() ||
    f2c4:	b108      	cbz	r0, f2ca <ble_gatts_mutable+0x16>
        return false;
    f2c6:	2000      	movs	r0, #0
    f2c8:	e7f9      	b.n	f2be <ble_gatts_mutable+0xa>
        ble_gap_conn_active()) {
    f2ca:	f7fe f839 	bl	d340 <ble_gap_conn_active>
        ble_gap_disc_active() ||
    f2ce:	b108      	cbz	r0, f2d4 <ble_gatts_mutable+0x20>
        return false;
    f2d0:	2000      	movs	r0, #0
    f2d2:	e7f4      	b.n	f2be <ble_gatts_mutable+0xa>
    if (ble_hs_conn_first() != NULL) {
    f2d4:	f001 fa22 	bl	1071c <ble_hs_conn_first>
    f2d8:	b108      	cbz	r0, f2de <ble_gatts_mutable+0x2a>
        return false;
    f2da:	2000      	movs	r0, #0
    f2dc:	e7ef      	b.n	f2be <ble_gatts_mutable+0xa>
    return true;
    f2de:	2001      	movs	r0, #1
    f2e0:	e7ed      	b.n	f2be <ble_gatts_mutable+0xa>
	...

0000f2e4 <ble_gatts_free_mem>:
{
    f2e4:	b538      	push	{r3, r4, r5, lr}
    free(ble_gatts_clt_cfg_mem);
    f2e6:	4c06      	ldr	r4, [pc, #24]	; (f300 <ble_gatts_free_mem+0x1c>)
    f2e8:	6820      	ldr	r0, [r4, #0]
    f2ea:	f00c feab 	bl	1c044 <free>
    ble_gatts_clt_cfg_mem = NULL;
    f2ee:	2500      	movs	r5, #0
    f2f0:	6025      	str	r5, [r4, #0]
    free(ble_gatts_svc_entries);
    f2f2:	4c04      	ldr	r4, [pc, #16]	; (f304 <ble_gatts_free_mem+0x20>)
    f2f4:	6820      	ldr	r0, [r4, #0]
    f2f6:	f00c fea5 	bl	1c044 <free>
    ble_gatts_svc_entries = NULL;
    f2fa:	6025      	str	r5, [r4, #0]
}
    f2fc:	bd38      	pop	{r3, r4, r5, pc}
    f2fe:	bf00      	nop
    f300:	200071f0 	.word	0x200071f0
    f304:	20007224 	.word	0x20007224

0000f308 <ble_gatts_free_svc_defs>:
{
    f308:	b510      	push	{r4, lr}
    free(ble_gatts_svc_defs);
    f30a:	4c04      	ldr	r4, [pc, #16]	; (f31c <ble_gatts_free_svc_defs+0x14>)
    f30c:	6820      	ldr	r0, [r4, #0]
    f30e:	f00c fe99 	bl	1c044 <free>
    ble_gatts_svc_defs = NULL;
    f312:	2300      	movs	r3, #0
    f314:	6023      	str	r3, [r4, #0]
    ble_gatts_num_svc_defs = 0;
    f316:	4a02      	ldr	r2, [pc, #8]	; (f320 <ble_gatts_free_svc_defs+0x18>)
    f318:	6013      	str	r3, [r2, #0]
}
    f31a:	bd10      	pop	{r4, pc}
    f31c:	20007220 	.word	0x20007220
    f320:	20007218 	.word	0x20007218

0000f324 <ble_gatts_tx_notifications_one_chr>:
{
    f324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f328:	4680      	mov	r8, r0
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
    f32a:	4601      	mov	r1, r0
    f32c:	4b17      	ldr	r3, [pc, #92]	; (f38c <ble_gatts_tx_notifications_one_chr+0x68>)
    f32e:	6818      	ldr	r0, [r3, #0]
    f330:	f7ff fbd6 	bl	eae0 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
    f334:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f338:	d026      	beq.n	f388 <ble_gatts_tx_notifications_one_chr+0x64>
    f33a:	4681      	mov	r9, r0
    for (i = 0; ; i++) {
    f33c:	2500      	movs	r5, #0
    f33e:	e008      	b.n	f352 <ble_gatts_tx_notifications_one_chr+0x2e>
            att_op = 0;
    f340:	2600      	movs	r6, #0
            conn_handle = BLE_HS_CONN_HANDLE_NONE;
    f342:	f64f 77ff 	movw	r7, #65535	; 0xffff
    f346:	e013      	b.n	f370 <ble_gatts_tx_notifications_one_chr+0x4c>
            ble_gattc_notify(conn_handle, chr_val_handle);
    f348:	4641      	mov	r1, r8
    f34a:	4638      	mov	r0, r7
    f34c:	f7ff fa62 	bl	e814 <ble_gattc_notify>
    for (i = 0; ; i++) {
    f350:	3501      	adds	r5, #1
        ble_hs_lock();
    f352:	f000 fba7 	bl	faa4 <ble_hs_lock>
        conn = ble_hs_conn_find_by_idx(i);
    f356:	4628      	mov	r0, r5
    f358:	f001 f9ca 	bl	106f0 <ble_hs_conn_find_by_idx>
        if (conn != NULL) {
    f35c:	4604      	mov	r4, r0
    f35e:	2800      	cmp	r0, #0
    f360:	d0ee      	beq.n	f340 <ble_gatts_tx_notifications_one_chr+0x1c>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
    f362:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
            att_op = ble_gatts_schedule_update(conn, clt_cfg);
    f364:	eb01 0189 	add.w	r1, r1, r9, lsl #2
    f368:	f7ff fbfe 	bl	eb68 <ble_gatts_schedule_update>
    f36c:	4606      	mov	r6, r0
            conn_handle = conn->bhc_handle;
    f36e:	88a7      	ldrh	r7, [r4, #4]
        ble_hs_unlock();
    f370:	f000 fb9c 	bl	faac <ble_hs_unlock>
        if (conn == NULL) {
    f374:	b144      	cbz	r4, f388 <ble_gatts_tx_notifications_one_chr+0x64>
        switch (att_op) {
    f376:	2e1b      	cmp	r6, #27
    f378:	d0e6      	beq.n	f348 <ble_gatts_tx_notifications_one_chr+0x24>
    f37a:	2e1d      	cmp	r6, #29
    f37c:	d1e8      	bne.n	f350 <ble_gatts_tx_notifications_one_chr+0x2c>
            ble_gattc_indicate(conn_handle, chr_val_handle);
    f37e:	4641      	mov	r1, r8
    f380:	4638      	mov	r0, r7
    f382:	f7ff fa9b 	bl	e8bc <ble_gattc_indicate>
            break;
    f386:	e7e3      	b.n	f350 <ble_gatts_tx_notifications_one_chr+0x2c>
}
    f388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f38c:	20007210 	.word	0x20007210

0000f390 <ble_gatts_register_svcs>:
{
    f390:	b5f0      	push	{r4, r5, r6, r7, lr}
    f392:	b083      	sub	sp, #12
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
    f394:	2400      	movs	r4, #0
    f396:	0123      	lsls	r3, r4, #4
    f398:	18c7      	adds	r7, r0, r3
    f39a:	5cc3      	ldrb	r3, [r0, r3]
    f39c:	b19b      	cbz	r3, f3c6 <ble_gatts_register_svcs+0x36>
        idx = ble_gatts_num_svc_entries + i;
    f39e:	4b16      	ldr	r3, [pc, #88]	; (f3f8 <ble_gatts_register_svcs+0x68>)
    f3a0:	881b      	ldrh	r3, [r3, #0]
    f3a2:	4423      	add	r3, r4
        if (idx >= ble_hs_max_services) {
    f3a4:	4d15      	ldr	r5, [pc, #84]	; (f3fc <ble_gatts_register_svcs+0x6c>)
    f3a6:	882d      	ldrh	r5, [r5, #0]
    f3a8:	429d      	cmp	r5, r3
    f3aa:	dd21      	ble.n	f3f0 <ble_gatts_register_svcs+0x60>
        ble_gatts_svc_entries[idx].svc = svcs + i;
    f3ac:	4d14      	ldr	r5, [pc, #80]	; (f400 <ble_gatts_register_svcs+0x70>)
    f3ae:	682e      	ldr	r6, [r5, #0]
    f3b0:	eb06 05c3 	add.w	r5, r6, r3, lsl #3
    f3b4:	f846 7033 	str.w	r7, [r6, r3, lsl #3]
        ble_gatts_svc_entries[idx].handle = 0;
    f3b8:	2300      	movs	r3, #0
    f3ba:	80ab      	strh	r3, [r5, #4]
        ble_gatts_svc_entries[idx].end_group_handle = 0xffff;
    f3bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
    f3c0:	80eb      	strh	r3, [r5, #6]
    for (i = 0; svcs[i].type != BLE_GATT_SVC_TYPE_END; i++) {
    f3c2:	3401      	adds	r4, #1
    f3c4:	e7e7      	b.n	f396 <ble_gatts_register_svcs+0x6>
    f3c6:	4617      	mov	r7, r2
    f3c8:	460e      	mov	r6, r1
    ble_gatts_num_svc_entries += num_svcs;
    f3ca:	4a0b      	ldr	r2, [pc, #44]	; (f3f8 <ble_gatts_register_svcs+0x68>)
    f3cc:	8813      	ldrh	r3, [r2, #0]
    f3ce:	4423      	add	r3, r4
    f3d0:	8013      	strh	r3, [r2, #0]
    total_registered = 0;
    f3d2:	2500      	movs	r5, #0
    while (total_registered < num_svcs) {
    f3d4:	42a5      	cmp	r5, r4
    f3d6:	da09      	bge.n	f3ec <ble_gatts_register_svcs+0x5c>
        rc = ble_gatts_register_round(&cur_registered, cb, cb_arg);
    f3d8:	463a      	mov	r2, r7
    f3da:	4631      	mov	r1, r6
    f3dc:	a801      	add	r0, sp, #4
    f3de:	f7ff fe4b 	bl	f078 <ble_gatts_register_round>
        if (rc != 0) {
    f3e2:	4603      	mov	r3, r0
    f3e4:	b928      	cbnz	r0, f3f2 <ble_gatts_register_svcs+0x62>
        total_registered += cur_registered;
    f3e6:	9b01      	ldr	r3, [sp, #4]
    f3e8:	441d      	add	r5, r3
    f3ea:	e7f3      	b.n	f3d4 <ble_gatts_register_svcs+0x44>
    return 0;
    f3ec:	2300      	movs	r3, #0
    f3ee:	e000      	b.n	f3f2 <ble_gatts_register_svcs+0x62>
            return BLE_HS_ENOMEM;
    f3f0:	2306      	movs	r3, #6
}
    f3f2:	4618      	mov	r0, r3
    f3f4:	b003      	add	sp, #12
    f3f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f3f8:	2000721c 	.word	0x2000721c
    f3fc:	20007330 	.word	0x20007330
    f400:	20007224 	.word	0x20007224

0000f404 <ble_gatts_connection_broken>:
{
    f404:	b5f0      	push	{r4, r5, r6, r7, lr}
    f406:	b083      	sub	sp, #12
    f408:	4606      	mov	r6, r0
    ble_hs_lock();
    f40a:	f000 fb4b 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    f40e:	4630      	mov	r0, r6
    f410:	f001 f952 	bl	106b8 <ble_hs_conn_find>
    if (conn != NULL) {
    f414:	4604      	mov	r4, r0
    f416:	b120      	cbz	r0, f422 <ble_gatts_connection_broken+0x1e>
        clt_cfgs = conn->bhc_gatt_svr.clt_cfgs;
    f418:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
        num_clt_cfgs = conn->bhc_gatt_svr.num_clt_cfgs;
    f41a:	6d07      	ldr	r7, [r0, #80]	; 0x50
        conn->bhc_gatt_svr.clt_cfgs = NULL;
    f41c:	2300      	movs	r3, #0
    f41e:	64c3      	str	r3, [r0, #76]	; 0x4c
        conn->bhc_gatt_svr.num_clt_cfgs = 0;
    f420:	6503      	str	r3, [r0, #80]	; 0x50
    ble_hs_unlock();
    f422:	f000 fb43 	bl	faac <ble_hs_unlock>
    if (conn == NULL) {
    f426:	b1bc      	cbz	r4, f458 <ble_gatts_connection_broken+0x54>
    ble_gatts_indicate_fail_notconn(conn_handle);
    f428:	4630      	mov	r0, r6
    f42a:	f7ff f9f8 	bl	e81e <ble_gatts_indicate_fail_notconn>
    if (clt_cfgs != NULL) {
    f42e:	b19d      	cbz	r5, f458 <ble_gatts_connection_broken+0x54>
        for (i = 0; i < num_clt_cfgs; i++) {
    f430:	2400      	movs	r4, #0
    f432:	e00b      	b.n	f44c <ble_gatts_connection_broken+0x48>
            ble_gatts_subscribe_event(conn_handle, clt_cfgs[i].chr_val_handle,
    f434:	eb05 0384 	add.w	r3, r5, r4, lsl #2
    f438:	789b      	ldrb	r3, [r3, #2]
    f43a:	f835 1024 	ldrh.w	r1, [r5, r4, lsl #2]
    f43e:	2200      	movs	r2, #0
    f440:	9200      	str	r2, [sp, #0]
    f442:	2202      	movs	r2, #2
    f444:	4630      	mov	r0, r6
    f446:	f7ff fc88 	bl	ed5a <ble_gatts_subscribe_event>
        for (i = 0; i < num_clt_cfgs; i++) {
    f44a:	3401      	adds	r4, #1
    f44c:	42a7      	cmp	r7, r4
    f44e:	dcf1      	bgt.n	f434 <ble_gatts_connection_broken+0x30>
        rc = os_memblock_put(&ble_gatts_clt_cfg_pool, clt_cfgs);
    f450:	4629      	mov	r1, r5
    f452:	4802      	ldr	r0, [pc, #8]	; (f45c <ble_gatts_connection_broken+0x58>)
    f454:	f7fb fb3b 	bl	aace <os_memblock_put>
}
    f458:	b003      	add	sp, #12
    f45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f45c:	200071f4 	.word	0x200071f4

0000f460 <ble_gatts_start>:
{
    f460:	b570      	push	{r4, r5, r6, lr}
    f462:	b084      	sub	sp, #16
    ble_uuid16_t uuid = BLE_UUID16_INIT(BLE_ATT_UUID_CHARACTERISTIC);
    f464:	4b43      	ldr	r3, [pc, #268]	; (f574 <ble_gatts_start+0x114>)
    f466:	681b      	ldr	r3, [r3, #0]
    f468:	9303      	str	r3, [sp, #12]
    ble_hs_lock();
    f46a:	f000 fb1b 	bl	faa4 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
    f46e:	f7ff ff21 	bl	f2b4 <ble_gatts_mutable>
    f472:	2800      	cmp	r0, #0
    f474:	d071      	beq.n	f55a <ble_gatts_start+0xfa>
    ble_gatts_free_mem();
    f476:	f7ff ff35 	bl	f2e4 <ble_gatts_free_mem>
    rc = ble_att_svr_start();
    f47a:	f006 fd1f 	bl	15ebc <ble_att_svr_start>
    if (rc != 0) {
    f47e:	4604      	mov	r4, r0
    f480:	2800      	cmp	r0, #0
    f482:	d168      	bne.n	f556 <ble_gatts_start+0xf6>
    if (ble_hs_max_client_configs > 0) {
    f484:	4b3c      	ldr	r3, [pc, #240]	; (f578 <ble_gatts_start+0x118>)
    f486:	8818      	ldrh	r0, [r3, #0]
    f488:	b9b0      	cbnz	r0, f4b8 <ble_gatts_start+0x58>
    if (ble_hs_max_services > 0) {
    f48a:	4b3c      	ldr	r3, [pc, #240]	; (f57c <ble_gatts_start+0x11c>)
    f48c:	8818      	ldrh	r0, [r3, #0]
    f48e:	b9e0      	cbnz	r0, f4ca <ble_gatts_start+0x6a>
    ble_gatts_num_svc_entries = 0;
    f490:	4b3b      	ldr	r3, [pc, #236]	; (f580 <ble_gatts_start+0x120>)
    f492:	2200      	movs	r2, #0
    f494:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
    f496:	4b3b      	ldr	r3, [pc, #236]	; (f584 <ble_gatts_start+0x124>)
    f498:	681b      	ldr	r3, [r3, #0]
    f49a:	42a3      	cmp	r3, r4
    f49c:	dd1e      	ble.n	f4dc <ble_gatts_start+0x7c>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
    f49e:	4b3a      	ldr	r3, [pc, #232]	; (f588 <ble_gatts_start+0x128>)
    f4a0:	6818      	ldr	r0, [r3, #0]
    f4a2:	4b3a      	ldr	r3, [pc, #232]	; (f58c <ble_gatts_start+0x12c>)
    f4a4:	685a      	ldr	r2, [r3, #4]
    f4a6:	6819      	ldr	r1, [r3, #0]
    f4a8:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    f4ac:	f7ff ff70 	bl	f390 <ble_gatts_register_svcs>
        if (rc != 0) {
    f4b0:	2800      	cmp	r0, #0
    f4b2:	d14f      	bne.n	f554 <ble_gatts_start+0xf4>
    for (i = 0; i < ble_gatts_num_svc_defs; i++) {
    f4b4:	3401      	adds	r4, #1
    f4b6:	e7ee      	b.n	f496 <ble_gatts_start+0x36>
        ble_gatts_clt_cfg_mem = malloc(
    f4b8:	0080      	lsls	r0, r0, #2
    f4ba:	f00c fd8d 	bl	1bfd8 <malloc>
    f4be:	4b34      	ldr	r3, [pc, #208]	; (f590 <ble_gatts_start+0x130>)
    f4c0:	6018      	str	r0, [r3, #0]
        if (ble_gatts_clt_cfg_mem == NULL) {
    f4c2:	2800      	cmp	r0, #0
    f4c4:	d1e1      	bne.n	f48a <ble_gatts_start+0x2a>
            rc = BLE_HS_ENOMEM;
    f4c6:	2406      	movs	r4, #6
    f4c8:	e048      	b.n	f55c <ble_gatts_start+0xfc>
            malloc(ble_hs_max_services * sizeof *ble_gatts_svc_entries);
    f4ca:	00c0      	lsls	r0, r0, #3
    f4cc:	f00c fd84 	bl	1bfd8 <malloc>
        ble_gatts_svc_entries =
    f4d0:	4b30      	ldr	r3, [pc, #192]	; (f594 <ble_gatts_start+0x134>)
    f4d2:	6018      	str	r0, [r3, #0]
        if (ble_gatts_svc_entries == NULL) {
    f4d4:	2800      	cmp	r0, #0
    f4d6:	d1db      	bne.n	f490 <ble_gatts_start+0x30>
            rc = BLE_HS_ENOMEM;
    f4d8:	2406      	movs	r4, #6
    f4da:	e03f      	b.n	f55c <ble_gatts_start+0xfc>
    ble_gatts_free_svc_defs();
    f4dc:	f7ff ff14 	bl	f308 <ble_gatts_free_svc_defs>
    if (ble_gatts_num_cfgable_chrs == 0) {
    f4e0:	4b2d      	ldr	r3, [pc, #180]	; (f598 <ble_gatts_start+0x138>)
    f4e2:	681c      	ldr	r4, [r3, #0]
    f4e4:	2c00      	cmp	r4, #0
    f4e6:	d03d      	beq.n	f564 <ble_gatts_start+0x104>
    num_elems = ble_hs_max_client_configs / ble_gatts_num_cfgable_chrs;
    f4e8:	4b23      	ldr	r3, [pc, #140]	; (f578 <ble_gatts_start+0x118>)
    f4ea:	881b      	ldrh	r3, [r3, #0]
    f4ec:	fb93 f4f4 	sdiv	r4, r3, r4
                         ble_gatts_clt_cfg_size(), ble_gatts_clt_cfg_mem,
    f4f0:	f7ff fb34 	bl	eb5c <ble_gatts_clt_cfg_size>
    rc = os_mempool_init(&ble_gatts_clt_cfg_pool, num_elems,
    f4f4:	4b26      	ldr	r3, [pc, #152]	; (f590 <ble_gatts_start+0x130>)
    f4f6:	681b      	ldr	r3, [r3, #0]
    f4f8:	4a28      	ldr	r2, [pc, #160]	; (f59c <ble_gatts_start+0x13c>)
    f4fa:	9200      	str	r2, [sp, #0]
    f4fc:	4602      	mov	r2, r0
    f4fe:	b2a1      	uxth	r1, r4
    f500:	4827      	ldr	r0, [pc, #156]	; (f5a0 <ble_gatts_start+0x140>)
    f502:	f7fb fa77 	bl	a9f4 <os_mempool_init>
    f506:	4606      	mov	r6, r0
    f508:	4604      	mov	r4, r0
    if (rc != 0) {
    f50a:	b108      	cbz	r0, f510 <ble_gatts_start+0xb0>
        rc = BLE_HS_EOS;
    f50c:	240b      	movs	r4, #11
    f50e:	e025      	b.n	f55c <ble_gatts_start+0xfc>
    ble_gatts_clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
    f510:	4823      	ldr	r0, [pc, #140]	; (f5a0 <ble_gatts_start+0x140>)
    f512:	f7fb fab4 	bl	aa7e <os_memblock_get>
    f516:	4b23      	ldr	r3, [pc, #140]	; (f5a4 <ble_gatts_start+0x144>)
    f518:	6018      	str	r0, [r3, #0]
    if (ble_gatts_clt_cfgs == NULL) {
    f51a:	b340      	cbz	r0, f56e <ble_gatts_start+0x10e>
    ha = NULL;
    f51c:	2500      	movs	r5, #0
    while ((ha = ble_att_svr_find_by_uuid(ha, &uuid.u, 0xffff)) != NULL) {
    f51e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f522:	a903      	add	r1, sp, #12
    f524:	4628      	mov	r0, r5
    f526:	f005 ffc3 	bl	154b0 <ble_att_svr_find_by_uuid>
    f52a:	4605      	mov	r5, r0
    f52c:	b198      	cbz	r0, f556 <ble_gatts_start+0xf6>
        allowed_flags = ble_gatts_chr_clt_cfg_allowed(chr);
    f52e:	6928      	ldr	r0, [r5, #16]
    f530:	f7ff fa1e 	bl	e970 <ble_gatts_chr_clt_cfg_allowed>
        if (allowed_flags != 0) {
    f534:	4601      	mov	r1, r0
    f536:	2800      	cmp	r0, #0
    f538:	d0f1      	beq.n	f51e <ble_gatts_start+0xbe>
            ble_gatts_clt_cfgs[idx].chr_val_handle = ha->ha_handle_id + 1;
    f53a:	896b      	ldrh	r3, [r5, #10]
    f53c:	4a19      	ldr	r2, [pc, #100]	; (f5a4 <ble_gatts_start+0x144>)
    f53e:	6810      	ldr	r0, [r2, #0]
    f540:	eb00 0286 	add.w	r2, r0, r6, lsl #2
    f544:	3301      	adds	r3, #1
    f546:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
            ble_gatts_clt_cfgs[idx].allowed = allowed_flags;
    f54a:	70d1      	strb	r1, [r2, #3]
            ble_gatts_clt_cfgs[idx].flags = 0;
    f54c:	2300      	movs	r3, #0
    f54e:	7093      	strb	r3, [r2, #2]
            idx++;
    f550:	3601      	adds	r6, #1
    f552:	e7e4      	b.n	f51e <ble_gatts_start+0xbe>
        rc = ble_gatts_register_svcs(ble_gatts_svc_defs[i],
    f554:	4604      	mov	r4, r0
    if (rc != 0) {
    f556:	b90c      	cbnz	r4, f55c <ble_gatts_start+0xfc>
    f558:	e004      	b.n	f564 <ble_gatts_start+0x104>
        rc = BLE_HS_EBUSY;
    f55a:	240f      	movs	r4, #15
        ble_gatts_free_mem();
    f55c:	f7ff fec2 	bl	f2e4 <ble_gatts_free_mem>
        ble_gatts_free_svc_defs();
    f560:	f7ff fed2 	bl	f308 <ble_gatts_free_svc_defs>
    ble_hs_unlock();
    f564:	f000 faa2 	bl	faac <ble_hs_unlock>
}
    f568:	4620      	mov	r0, r4
    f56a:	b004      	add	sp, #16
    f56c:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOMEM;
    f56e:	2406      	movs	r4, #6
    f570:	e7f4      	b.n	f55c <ble_gatts_start+0xfc>
    f572:	bf00      	nop
    f574:	00028d88 	.word	0x00028d88
    f578:	2000732e 	.word	0x2000732e
    f57c:	20007330 	.word	0x20007330
    f580:	2000721c 	.word	0x2000721c
    f584:	20007218 	.word	0x20007218
    f588:	20007220 	.word	0x20007220
    f58c:	2000017c 	.word	0x2000017c
    f590:	200071f0 	.word	0x200071f0
    f594:	20007224 	.word	0x20007224
    f598:	20007214 	.word	0x20007214
    f59c:	00028d8c 	.word	0x00028d8c
    f5a0:	200071f4 	.word	0x200071f4
    f5a4:	20007210 	.word	0x20007210

0000f5a8 <ble_gatts_conn_can_alloc>:
    return ble_gatts_num_cfgable_chrs == 0 ||
    f5a8:	4b05      	ldr	r3, [pc, #20]	; (f5c0 <ble_gatts_conn_can_alloc+0x18>)
    f5aa:	681b      	ldr	r3, [r3, #0]
    f5ac:	b133      	cbz	r3, f5bc <ble_gatts_conn_can_alloc+0x14>
           ble_gatts_clt_cfg_pool.mp_num_free > 0;
    f5ae:	4b05      	ldr	r3, [pc, #20]	; (f5c4 <ble_gatts_conn_can_alloc+0x1c>)
    f5b0:	88db      	ldrh	r3, [r3, #6]
    return ble_gatts_num_cfgable_chrs == 0 ||
    f5b2:	b90b      	cbnz	r3, f5b8 <ble_gatts_conn_can_alloc+0x10>
    f5b4:	2000      	movs	r0, #0
}
    f5b6:	4770      	bx	lr
    return ble_gatts_num_cfgable_chrs == 0 ||
    f5b8:	2001      	movs	r0, #1
    f5ba:	4770      	bx	lr
    f5bc:	2001      	movs	r0, #1
    f5be:	4770      	bx	lr
    f5c0:	20007214 	.word	0x20007214
    f5c4:	200071f4 	.word	0x200071f4

0000f5c8 <ble_gatts_conn_init>:
    if (ble_gatts_num_cfgable_chrs > 0) {
    f5c8:	4b10      	ldr	r3, [pc, #64]	; (f60c <ble_gatts_conn_init+0x44>)
    f5ca:	681b      	ldr	r3, [r3, #0]
    f5cc:	2b00      	cmp	r3, #0
    f5ce:	dc04      	bgt.n	f5da <ble_gatts_conn_init+0x12>
        gatts_conn->clt_cfgs = NULL;
    f5d0:	2300      	movs	r3, #0
    f5d2:	6003      	str	r3, [r0, #0]
        gatts_conn->num_clt_cfgs = 0;
    f5d4:	6043      	str	r3, [r0, #4]
    return 0;
    f5d6:	4618      	mov	r0, r3
}
    f5d8:	4770      	bx	lr
{
    f5da:	b570      	push	{r4, r5, r6, lr}
    f5dc:	4604      	mov	r4, r0
        gatts_conn->clt_cfgs = os_memblock_get(&ble_gatts_clt_cfg_pool);
    f5de:	480c      	ldr	r0, [pc, #48]	; (f610 <ble_gatts_conn_init+0x48>)
    f5e0:	f7fb fa4d 	bl	aa7e <os_memblock_get>
    f5e4:	4605      	mov	r5, r0
    f5e6:	6020      	str	r0, [r4, #0]
        if (gatts_conn->clt_cfgs == NULL) {
    f5e8:	b168      	cbz	r0, f606 <ble_gatts_conn_init+0x3e>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
    f5ea:	4b0a      	ldr	r3, [pc, #40]	; (f614 <ble_gatts_conn_init+0x4c>)
    f5ec:	681e      	ldr	r6, [r3, #0]
               ble_gatts_clt_cfg_size());
    f5ee:	f7ff fab5 	bl	eb5c <ble_gatts_clt_cfg_size>
        memcpy(gatts_conn->clt_cfgs, ble_gatts_clt_cfgs,
    f5f2:	4602      	mov	r2, r0
    f5f4:	4631      	mov	r1, r6
    f5f6:	4628      	mov	r0, r5
    f5f8:	f7fc f8d8 	bl	b7ac <memcpy>
        gatts_conn->num_clt_cfgs = ble_gatts_num_cfgable_chrs;
    f5fc:	4b03      	ldr	r3, [pc, #12]	; (f60c <ble_gatts_conn_init+0x44>)
    f5fe:	681b      	ldr	r3, [r3, #0]
    f600:	6063      	str	r3, [r4, #4]
    return 0;
    f602:	2000      	movs	r0, #0
}
    f604:	bd70      	pop	{r4, r5, r6, pc}
            return BLE_HS_ENOMEM;
    f606:	2006      	movs	r0, #6
    f608:	e7fc      	b.n	f604 <ble_gatts_conn_init+0x3c>
    f60a:	bf00      	nop
    f60c:	20007214 	.word	0x20007214
    f610:	200071f4 	.word	0x200071f4
    f614:	20007210 	.word	0x20007210

0000f618 <ble_gatts_send_next_indicate>:
{
    f618:	b570      	push	{r4, r5, r6, lr}
    f61a:	4605      	mov	r5, r0
    ble_hs_lock();
    f61c:	f000 fa42 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    f620:	4628      	mov	r0, r5
    f622:	f001 f849 	bl	106b8 <ble_hs_conn_find>
    if (conn != NULL) {
    f626:	4604      	mov	r4, r0
    f628:	b160      	cbz	r0, f644 <ble_gatts_send_next_indicate+0x2c>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
    f62a:	2200      	movs	r2, #0
    f62c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    f62e:	4293      	cmp	r3, r2
    f630:	dd0f      	ble.n	f652 <ble_gatts_send_next_indicate+0x3a>
            clt_cfg = conn->bhc_gatt_svr.clt_cfgs + i;
    f632:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    f634:	eb03 0382 	add.w	r3, r3, r2, lsl #2
            if (clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED) {
    f638:	7899      	ldrb	r1, [r3, #2]
    f63a:	f011 0f80 	tst.w	r1, #128	; 0x80
    f63e:	d103      	bne.n	f648 <ble_gatts_send_next_indicate+0x30>
        for (i = 0; i < conn->bhc_gatt_svr.num_clt_cfgs; i++) {
    f640:	3201      	adds	r2, #1
    f642:	e7f3      	b.n	f62c <ble_gatts_send_next_indicate+0x14>
    chr_val_handle = 0;
    f644:	2600      	movs	r6, #0
    f646:	e005      	b.n	f654 <ble_gatts_send_next_indicate+0x3c>
                chr_val_handle = clt_cfg->chr_val_handle;
    f648:	881e      	ldrh	r6, [r3, #0]
                clt_cfg->flags &= ~BLE_GATTS_CLT_CFG_F_MODIFIED;
    f64a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    f64e:	7099      	strb	r1, [r3, #2]
                break;
    f650:	e000      	b.n	f654 <ble_gatts_send_next_indicate+0x3c>
    chr_val_handle = 0;
    f652:	2600      	movs	r6, #0
    ble_hs_unlock();
    f654:	f000 fa2a 	bl	faac <ble_hs_unlock>
    if (conn == NULL) {
    f658:	b12c      	cbz	r4, f666 <ble_gatts_send_next_indicate+0x4e>
    if (chr_val_handle == 0) {
    f65a:	b136      	cbz	r6, f66a <ble_gatts_send_next_indicate+0x52>
    rc = ble_gattc_indicate(conn_handle, chr_val_handle);
    f65c:	4631      	mov	r1, r6
    f65e:	4628      	mov	r0, r5
    f660:	f7ff f92c 	bl	e8bc <ble_gattc_indicate>
}
    f664:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ENOTCONN;
    f666:	2007      	movs	r0, #7
    f668:	e7fc      	b.n	f664 <ble_gatts_send_next_indicate+0x4c>
        return BLE_HS_ENOENT;
    f66a:	2005      	movs	r0, #5
    f66c:	e7fa      	b.n	f664 <ble_gatts_send_next_indicate+0x4c>
	...

0000f670 <ble_gatts_rx_indicate_ack>:
{
    f670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f674:	b084      	sub	sp, #16
    f676:	4680      	mov	r8, r0
    f678:	460e      	mov	r6, r1
    clt_cfg_idx = ble_gatts_clt_cfg_find_idx(ble_gatts_clt_cfgs,
    f67a:	4b2d      	ldr	r3, [pc, #180]	; (f730 <ble_gatts_rx_indicate_ack+0xc0>)
    f67c:	681c      	ldr	r4, [r3, #0]
    f67e:	4620      	mov	r0, r4
    f680:	f7ff fa2e 	bl	eae0 <ble_gatts_clt_cfg_find_idx>
    if (clt_cfg_idx == -1) {
    f684:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    f688:	d04b      	beq.n	f722 <ble_gatts_rx_indicate_ack+0xb2>
    clt_cfg = ble_gatts_clt_cfgs + clt_cfg_idx;
    f68a:	0085      	lsls	r5, r0, #2
    f68c:	442c      	add	r4, r5
    if (!(clt_cfg->allowed & BLE_GATTS_CLT_CFG_F_INDICATE)) {
    f68e:	78e3      	ldrb	r3, [r4, #3]
    f690:	f013 0f02 	tst.w	r3, #2
    f694:	d047      	beq.n	f726 <ble_gatts_rx_indicate_ack+0xb6>
    ble_hs_lock();
    f696:	f000 fa05 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    f69a:	4640      	mov	r0, r8
    f69c:	f001 f80c 	bl	106b8 <ble_hs_conn_find>
    f6a0:	4603      	mov	r3, r0
    if (conn->bhc_gatt_svr.indicate_val_handle == chr_val_handle) {
    f6a2:	f8b0 2054 	ldrh.w	r2, [r0, #84]	; 0x54
    f6a6:	42b2      	cmp	r2, r6
    f6a8:	d006      	beq.n	f6b8 <ble_gatts_rx_indicate_ack+0x48>
        rc = BLE_HS_ENOENT;
    f6aa:	2405      	movs	r4, #5
    ble_hs_unlock();
    f6ac:	f000 f9fe 	bl	faac <ble_hs_unlock>
    if (rc != 0) {
    f6b0:	bbd4      	cbnz	r4, f728 <ble_gatts_rx_indicate_ack+0xb8>
    if (persist) {
    f6b2:	bb97      	cbnz	r7, f71a <ble_gatts_rx_indicate_ack+0xaa>
    return 0;
    f6b4:	463c      	mov	r4, r7
    f6b6:	e037      	b.n	f728 <ble_gatts_rx_indicate_ack+0xb8>
        conn->bhc_gatt_svr.indicate_val_handle = 0;
    f6b8:	2200      	movs	r2, #0
    f6ba:	f8a0 2054 	strh.w	r2, [r0, #84]	; 0x54
        clt_cfg = conn->bhc_gatt_svr.clt_cfgs + clt_cfg_idx;
    f6be:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    f6c0:	4405      	add	r5, r0
        persist = conn->bhc_sec_state.bonded &&
    f6c2:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
    f6c6:	f012 0f04 	tst.w	r2, #4
    f6ca:	d023      	beq.n	f714 <ble_gatts_rx_indicate_ack+0xa4>
                  !(clt_cfg->flags & BLE_GATTS_CLT_CFG_F_MODIFIED);
    f6cc:	f995 2002 	ldrsb.w	r2, [r5, #2]
        persist = conn->bhc_sec_state.bonded &&
    f6d0:	2a00      	cmp	r2, #0
    f6d2:	da02      	bge.n	f6da <ble_gatts_rx_indicate_ack+0x6a>
        rc = 0;
    f6d4:	2400      	movs	r4, #0
    f6d6:	4627      	mov	r7, r4
    f6d8:	e7e8      	b.n	f6ac <ble_gatts_rx_indicate_ack+0x3c>
            cccd_value.peer_addr = conn->bhc_peer_addr;
    f6da:	461a      	mov	r2, r3
    f6dc:	f852 0f07 	ldr.w	r0, [r2, #7]!
    f6e0:	9000      	str	r0, [sp, #0]
    f6e2:	8891      	ldrh	r1, [r2, #4]
    f6e4:	7992      	ldrb	r2, [r2, #6]
    f6e6:	f8ad 1004 	strh.w	r1, [sp, #4]
    f6ea:	f88d 2006 	strb.w	r2, [sp, #6]
                ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
    f6ee:	79d8      	ldrb	r0, [r3, #7]
    f6f0:	f001 ffb4 	bl	1165c <ble_hs_misc_peer_addr_type_to_id>
            cccd_value.peer_addr.type =
    f6f4:	f88d 0000 	strb.w	r0, [sp]
            cccd_value.chr_val_handle = chr_val_handle;
    f6f8:	f8ad 6008 	strh.w	r6, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
    f6fc:	78ab      	ldrb	r3, [r5, #2]
    f6fe:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
    f702:	f89d 300c 	ldrb.w	r3, [sp, #12]
    f706:	f36f 0300 	bfc	r3, #0, #1
    f70a:	f88d 300c 	strb.w	r3, [sp, #12]
        rc = 0;
    f70e:	2400      	movs	r4, #0
        persist = conn->bhc_sec_state.bonded &&
    f710:	2701      	movs	r7, #1
    f712:	e7cb      	b.n	f6ac <ble_gatts_rx_indicate_ack+0x3c>
        rc = 0;
    f714:	2400      	movs	r4, #0
    f716:	4627      	mov	r7, r4
    f718:	e7c8      	b.n	f6ac <ble_gatts_rx_indicate_ack+0x3c>
        rc = ble_store_write_cccd(&cccd_value);
    f71a:	4668      	mov	r0, sp
    f71c:	f004 fd17 	bl	1414e <ble_store_write_cccd>
    f720:	e002      	b.n	f728 <ble_gatts_rx_indicate_ack+0xb8>
        return BLE_HS_ENOENT;
    f722:	2405      	movs	r4, #5
    f724:	e000      	b.n	f728 <ble_gatts_rx_indicate_ack+0xb8>
        return BLE_HS_ENOENT;
    f726:	2405      	movs	r4, #5
}
    f728:	4620      	mov	r0, r4
    f72a:	b004      	add	sp, #16
    f72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f730:	20007210 	.word	0x20007210

0000f734 <ble_gatts_tx_notifications>:
{
    f734:	b510      	push	{r4, lr}
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
    f736:	2400      	movs	r4, #0
    f738:	e006      	b.n	f748 <ble_gatts_tx_notifications+0x14>
        chr_val_handle = ble_gatts_clt_cfgs[i].chr_val_handle;
    f73a:	4b06      	ldr	r3, [pc, #24]	; (f754 <ble_gatts_tx_notifications+0x20>)
    f73c:	681b      	ldr	r3, [r3, #0]
        ble_gatts_tx_notifications_one_chr(chr_val_handle);
    f73e:	f833 0024 	ldrh.w	r0, [r3, r4, lsl #2]
    f742:	f7ff fdef 	bl	f324 <ble_gatts_tx_notifications_one_chr>
    for (i = 0; i < ble_gatts_num_cfgable_chrs; i++) {
    f746:	3401      	adds	r4, #1
    f748:	4b03      	ldr	r3, [pc, #12]	; (f758 <ble_gatts_tx_notifications+0x24>)
    f74a:	681b      	ldr	r3, [r3, #0]
    f74c:	42a3      	cmp	r3, r4
    f74e:	dcf4      	bgt.n	f73a <ble_gatts_tx_notifications+0x6>
}
    f750:	bd10      	pop	{r4, pc}
    f752:	bf00      	nop
    f754:	20007210 	.word	0x20007210
    f758:	20007214 	.word	0x20007214

0000f75c <ble_gatts_bonding_established>:
{
    f75c:	b570      	push	{r4, r5, r6, lr}
    f75e:	b084      	sub	sp, #16
    f760:	4606      	mov	r6, r0
    ble_hs_lock();
    f762:	f000 f99f 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    f766:	4630      	mov	r0, r6
    f768:	f000 ffa6 	bl	106b8 <ble_hs_conn_find>
    f76c:	4605      	mov	r5, r0
    cccd_value.peer_addr = conn->bhc_peer_addr;
    f76e:	4603      	mov	r3, r0
    f770:	f853 0f07 	ldr.w	r0, [r3, #7]!
    f774:	9000      	str	r0, [sp, #0]
    f776:	889a      	ldrh	r2, [r3, #4]
    f778:	799b      	ldrb	r3, [r3, #6]
    f77a:	f8ad 2004 	strh.w	r2, [sp, #4]
    f77e:	f88d 3006 	strb.w	r3, [sp, #6]
        ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
    f782:	79e8      	ldrb	r0, [r5, #7]
    f784:	f001 ff6a 	bl	1165c <ble_hs_misc_peer_addr_type_to_id>
    cccd_value.peer_addr.type =
    f788:	f88d 0000 	strb.w	r0, [sp]
    for (i = 0; i < gatt_srv->num_clt_cfgs; ++i) {
    f78c:	2400      	movs	r4, #0
    f78e:	e000      	b.n	f792 <ble_gatts_bonding_established+0x36>
    f790:	3401      	adds	r4, #1
    f792:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    f794:	42a3      	cmp	r3, r4
    f796:	dd1d      	ble.n	f7d4 <ble_gatts_bonding_established+0x78>
        clt_cfg = &gatt_srv->clt_cfgs[i];
    f798:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    f79a:	eb02 0384 	add.w	r3, r2, r4, lsl #2
        if (clt_cfg->flags != 0) {
    f79e:	7899      	ldrb	r1, [r3, #2]
    f7a0:	2900      	cmp	r1, #0
    f7a2:	d0f5      	beq.n	f790 <ble_gatts_bonding_established+0x34>
            cccd_value.chr_val_handle = clt_cfg->chr_val_handle;
    f7a4:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
    f7a8:	f8ad 2008 	strh.w	r2, [sp, #8]
            cccd_value.flags = clt_cfg->flags;
    f7ac:	789b      	ldrb	r3, [r3, #2]
    f7ae:	f8ad 300a 	strh.w	r3, [sp, #10]
            cccd_value.value_changed = 0;
    f7b2:	f89d 300c 	ldrb.w	r3, [sp, #12]
    f7b6:	f36f 0300 	bfc	r3, #0, #1
    f7ba:	f88d 300c 	strb.w	r3, [sp, #12]
            ble_hs_unlock();
    f7be:	f000 f975 	bl	faac <ble_hs_unlock>
            ble_store_write_cccd(&cccd_value);
    f7c2:	4668      	mov	r0, sp
    f7c4:	f004 fcc3 	bl	1414e <ble_store_write_cccd>
            ble_hs_lock();
    f7c8:	f000 f96c 	bl	faa4 <ble_hs_lock>
            conn = ble_hs_conn_find(conn_handle);
    f7cc:	4630      	mov	r0, r6
    f7ce:	f000 ff73 	bl	106b8 <ble_hs_conn_find>
    f7d2:	e7dd      	b.n	f790 <ble_gatts_bonding_established+0x34>
    ble_hs_unlock();
    f7d4:	f000 f96a 	bl	faac <ble_hs_unlock>
}
    f7d8:	b004      	add	sp, #16
    f7da:	bd70      	pop	{r4, r5, r6, pc}

0000f7dc <ble_gatts_bonding_restored>:
{
    f7dc:	b530      	push	{r4, r5, lr}
    f7de:	b08b      	sub	sp, #44	; 0x2c
    f7e0:	4604      	mov	r4, r0
    ble_hs_lock();
    f7e2:	f000 f95f 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
    f7e6:	4620      	mov	r0, r4
    f7e8:	f000 ff66 	bl	106b8 <ble_hs_conn_find>
    f7ec:	4602      	mov	r2, r0
    cccd_key.peer_addr = conn->bhc_peer_addr;
    f7ee:	4603      	mov	r3, r0
    f7f0:	f853 0f07 	ldr.w	r0, [r3, #7]!
    f7f4:	9003      	str	r0, [sp, #12]
    f7f6:	8899      	ldrh	r1, [r3, #4]
    f7f8:	799b      	ldrb	r3, [r3, #6]
    f7fa:	f8ad 1010 	strh.w	r1, [sp, #16]
    f7fe:	f88d 3012 	strb.w	r3, [sp, #18]
        ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
    f802:	79d0      	ldrb	r0, [r2, #7]
    f804:	f001 ff2a 	bl	1165c <ble_hs_misc_peer_addr_type_to_id>
    cccd_key.peer_addr.type =
    f808:	f88d 000c 	strb.w	r0, [sp, #12]
    cccd_key.chr_val_handle = 0;
    f80c:	2300      	movs	r3, #0
    f80e:	f8ad 3014 	strh.w	r3, [sp, #20]
    cccd_key.idx = 0;
    f812:	f88d 3016 	strb.w	r3, [sp, #22]
    ble_hs_unlock();
    f816:	f000 f949 	bl	faac <ble_hs_unlock>
    f81a:	e014      	b.n	f846 <ble_gatts_bonding_restored+0x6a>
                clt_cfg->flags |= BLE_GATTS_CLT_CFG_F_MODIFIED;
    f81c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    f820:	7083      	strb	r3, [r0, #2]
                att_op = ble_gatts_schedule_update(conn, clt_cfg);
    f822:	4628      	mov	r0, r5
    f824:	f7ff f9a0 	bl	eb68 <ble_gatts_schedule_update>
    f828:	4605      	mov	r5, r0
    f82a:	e028      	b.n	f87e <ble_gatts_bonding_restored+0xa2>
        att_op = 0;
    f82c:	2500      	movs	r5, #0
    f82e:	e026      	b.n	f87e <ble_gatts_bonding_restored+0xa2>
            rc = ble_gattc_notify(conn_handle, cccd_value.chr_val_handle);
    f830:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    f834:	4620      	mov	r0, r4
    f836:	f7fe ffed 	bl	e814 <ble_gattc_notify>
            if (rc == 0) {
    f83a:	b3b0      	cbz	r0, f8aa <ble_gatts_bonding_restored+0xce>
        cccd_key.idx++;
    f83c:	f89d 3016 	ldrb.w	r3, [sp, #22]
    f840:	3301      	adds	r3, #1
    f842:	f88d 3016 	strb.w	r3, [sp, #22]
        rc = ble_store_read_cccd(&cccd_key, &cccd_value);
    f846:	a906      	add	r1, sp, #24
    f848:	a803      	add	r0, sp, #12
    f84a:	f004 fc79 	bl	14140 <ble_store_read_cccd>
        if (rc != 0) {
    f84e:	bbb0      	cbnz	r0, f8be <ble_gatts_bonding_restored+0xe2>
        ble_hs_lock();
    f850:	f000 f928 	bl	faa4 <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
    f854:	4620      	mov	r0, r4
    f856:	f000 ff2f 	bl	106b8 <ble_hs_conn_find>
    f85a:	4605      	mov	r5, r0
        clt_cfg = ble_gatts_clt_cfg_find(conn->bhc_gatt_svr.clt_cfgs,
    f85c:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    f860:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    f862:	f7ff f94f 	bl	eb04 <ble_gatts_clt_cfg_find>
        if (clt_cfg != NULL) {
    f866:	4601      	mov	r1, r0
    f868:	2800      	cmp	r0, #0
    f86a:	d0df      	beq.n	f82c <ble_gatts_bonding_restored+0x50>
            clt_cfg->flags = cccd_value.flags;
    f86c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    f870:	7083      	strb	r3, [r0, #2]
            if (cccd_value.value_changed) {
    f872:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
    f876:	f012 0f01 	tst.w	r2, #1
    f87a:	d1cf      	bne.n	f81c <ble_gatts_bonding_restored+0x40>
        att_op = 0;
    f87c:	2500      	movs	r5, #0
        ble_hs_unlock();
    f87e:	f000 f915 	bl	faac <ble_hs_unlock>
        ble_gatts_subscribe_event(conn_handle, cccd_value.chr_val_handle,
    f882:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    f886:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    f88a:	9300      	str	r3, [sp, #0]
    f88c:	2300      	movs	r3, #0
    f88e:	2203      	movs	r2, #3
    f890:	4620      	mov	r0, r4
    f892:	f7ff fa62 	bl	ed5a <ble_gatts_subscribe_event>
        switch (att_op) {
    f896:	2d1b      	cmp	r5, #27
    f898:	d0ca      	beq.n	f830 <ble_gatts_bonding_restored+0x54>
    f89a:	2d1d      	cmp	r5, #29
    f89c:	d1ce      	bne.n	f83c <ble_gatts_bonding_restored+0x60>
            ble_gattc_indicate(conn_handle, cccd_value.chr_val_handle);
    f89e:	f8bd 1020 	ldrh.w	r1, [sp, #32]
    f8a2:	4620      	mov	r0, r4
    f8a4:	f7ff f80a 	bl	e8bc <ble_gattc_indicate>
            break;
    f8a8:	e7c8      	b.n	f83c <ble_gatts_bonding_restored+0x60>
                cccd_value.value_changed = 0;
    f8aa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
    f8ae:	f36f 0300 	bfc	r3, #0, #1
    f8b2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                ble_store_write_cccd(&cccd_value);
    f8b6:	a806      	add	r0, sp, #24
    f8b8:	f004 fc49 	bl	1414e <ble_store_write_cccd>
    f8bc:	e7be      	b.n	f83c <ble_gatts_bonding_restored+0x60>
}
    f8be:	b00b      	add	sp, #44	; 0x2c
    f8c0:	bd30      	pop	{r4, r5, pc}
	...

0000f8c4 <ble_gatts_add_svcs>:
{
    f8c4:	b570      	push	{r4, r5, r6, lr}
    f8c6:	4606      	mov	r6, r0
    ble_hs_lock();
    f8c8:	f000 f8ec 	bl	faa4 <ble_hs_lock>
    if (!ble_gatts_mutable()) {
    f8cc:	f7ff fcf2 	bl	f2b4 <ble_gatts_mutable>
    f8d0:	b180      	cbz	r0, f8f4 <ble_gatts_add_svcs+0x30>
                (ble_gatts_num_svc_defs + 1) * sizeof *ble_gatts_svc_defs);
    f8d2:	4b0c      	ldr	r3, [pc, #48]	; (f904 <ble_gatts_add_svcs+0x40>)
    f8d4:	681d      	ldr	r5, [r3, #0]
    f8d6:	1c6c      	adds	r4, r5, #1
    p = realloc(ble_gatts_svc_defs,
    f8d8:	00a1      	lsls	r1, r4, #2
    f8da:	4b0b      	ldr	r3, [pc, #44]	; (f908 <ble_gatts_add_svcs+0x44>)
    f8dc:	6818      	ldr	r0, [r3, #0]
    f8de:	f00c fbc7 	bl	1c070 <realloc>
    if (p == NULL) {
    f8e2:	b160      	cbz	r0, f8fe <ble_gatts_add_svcs+0x3a>
    ble_gatts_svc_defs = p;
    f8e4:	4a08      	ldr	r2, [pc, #32]	; (f908 <ble_gatts_add_svcs+0x44>)
    f8e6:	6010      	str	r0, [r2, #0]
    ble_gatts_svc_defs[ble_gatts_num_svc_defs] = svcs;
    f8e8:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
    ble_gatts_num_svc_defs++;
    f8ec:	4b05      	ldr	r3, [pc, #20]	; (f904 <ble_gatts_add_svcs+0x40>)
    f8ee:	601c      	str	r4, [r3, #0]
    rc = 0;
    f8f0:	2400      	movs	r4, #0
    f8f2:	e000      	b.n	f8f6 <ble_gatts_add_svcs+0x32>
        rc = BLE_HS_EBUSY;
    f8f4:	240f      	movs	r4, #15
    ble_hs_unlock();
    f8f6:	f000 f8d9 	bl	faac <ble_hs_unlock>
}
    f8fa:	4620      	mov	r0, r4
    f8fc:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOMEM;
    f8fe:	2406      	movs	r4, #6
    f900:	e7f9      	b.n	f8f6 <ble_gatts_add_svcs+0x32>
    f902:	bf00      	nop
    f904:	20007218 	.word	0x20007218
    f908:	20007220 	.word	0x20007220

0000f90c <ble_gatts_count_cfg>:
int
ble_gatts_count_cfg(const struct ble_gatt_svc_def *defs)
{
    f90c:	b500      	push	{lr}
    f90e:	b085      	sub	sp, #20
    struct ble_gatt_resources res = { 0 };
    f910:	2300      	movs	r3, #0
    f912:	9301      	str	r3, [sp, #4]
    f914:	9302      	str	r3, [sp, #8]
    f916:	9303      	str	r3, [sp, #12]
    int rc;

    rc = ble_gatts_count_resources(defs, &res);
    f918:	a901      	add	r1, sp, #4
    f91a:	f7ff f93f 	bl	eb9c <ble_gatts_count_resources>
    if (rc != 0) {
    f91e:	4602      	mov	r2, r0
    f920:	b990      	cbnz	r0, f948 <ble_gatts_count_cfg+0x3c>
        return rc;
    }

    ble_hs_max_services += res.svcs;
    f922:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    f926:	490a      	ldr	r1, [pc, #40]	; (f950 <ble_gatts_count_cfg+0x44>)
    f928:	8808      	ldrh	r0, [r1, #0]
    f92a:	4403      	add	r3, r0
    f92c:	800b      	strh	r3, [r1, #0]
    ble_hs_max_attrs += res.attrs;
    f92e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    f932:	4908      	ldr	r1, [pc, #32]	; (f954 <ble_gatts_count_cfg+0x48>)
    f934:	8808      	ldrh	r0, [r1, #0]
    f936:	4403      	add	r3, r0
    f938:	800b      	strh	r3, [r1, #0]

    /* Reserve an extra CCCD for the cache. */
    ble_hs_max_client_configs +=
        res.cccds * (MYNEWT_VAL(BLE_MAX_CONNECTIONS) + 1);
    f93a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    ble_hs_max_client_configs +=
    f93e:	4906      	ldr	r1, [pc, #24]	; (f958 <ble_gatts_count_cfg+0x4c>)
    f940:	880b      	ldrh	r3, [r1, #0]
    f942:	eb03 0340 	add.w	r3, r3, r0, lsl #1
    f946:	800b      	strh	r3, [r1, #0]

    return 0;
}
    f948:	4610      	mov	r0, r2
    f94a:	b005      	add	sp, #20
    f94c:	f85d fb04 	ldr.w	pc, [sp], #4
    f950:	20007330 	.word	0x20007330
    f954:	2000732c 	.word	0x2000732c
    f958:	2000732e 	.word	0x2000732e

0000f95c <ble_gatts_init>:
int
ble_gatts_init(void)
{
    int rc;

    ble_gatts_num_cfgable_chrs = 0;
    f95c:	2000      	movs	r0, #0
    f95e:	4b02      	ldr	r3, [pc, #8]	; (f968 <ble_gatts_init+0xc>)
    f960:	6018      	str	r0, [r3, #0]
    ble_gatts_clt_cfgs = NULL;
    f962:	4b02      	ldr	r3, [pc, #8]	; (f96c <ble_gatts_init+0x10>)
    f964:	6018      	str	r0, [r3, #0]
        return BLE_HS_EOS;
    }

    return 0;

}
    f966:	4770      	bx	lr
    f968:	20007214 	.word	0x20007214
    f96c:	20007210 	.word	0x20007210

0000f970 <ble_hs_wakeup_tx_conn>:
    }
}

static int
ble_hs_wakeup_tx_conn(struct ble_hs_conn *conn)
{
    f970:	b510      	push	{r4, lr}
    f972:	b082      	sub	sp, #8
    f974:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *omp;
    struct os_mbuf *om;
    int rc;

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
    f976:	e008      	b.n	f98a <ble_hs_wakeup_tx_conn+0x1a>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);

        om = OS_MBUF_PKTHDR_TO_MBUF(omp);
    f978:	3b10      	subs	r3, #16
    f97a:	a902      	add	r1, sp, #8
    f97c:	f841 3d04 	str.w	r3, [r1, #-4]!
        rc = ble_hs_hci_acl_tx_now(conn, &om);
    f980:	4620      	mov	r0, r4
    f982:	f001 f93b 	bl	10bfc <ble_hs_hci_acl_tx_now>
        if (rc == BLE_HS_EAGAIN) {
    f986:	2801      	cmp	r0, #1
    f988:	d009      	beq.n	f99e <ble_hs_wakeup_tx_conn+0x2e>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
    f98a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    f98c:	b193      	cbz	r3, f9b4 <ble_hs_wakeup_tx_conn+0x44>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
    f98e:	685a      	ldr	r2, [r3, #4]
    f990:	63e2      	str	r2, [r4, #60]	; 0x3c
    f992:	2a00      	cmp	r2, #0
    f994:	d1f0      	bne.n	f978 <ble_hs_wakeup_tx_conn+0x8>
    f996:	f104 023c 	add.w	r2, r4, #60	; 0x3c
    f99a:	6422      	str	r2, [r4, #64]	; 0x40
    f99c:	e7ec      	b.n	f978 <ble_hs_wakeup_tx_conn+0x8>
            /* Controller is at capacity.  This packet will be the first to
             * get transmitted next time around.
             */
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
    f99e:	9b01      	ldr	r3, [sp, #4]
    f9a0:	f103 0110 	add.w	r1, r3, #16
    f9a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    f9a6:	615a      	str	r2, [r3, #20]
    f9a8:	b10a      	cbz	r2, f9ae <ble_hs_wakeup_tx_conn+0x3e>
    f9aa:	63e1      	str	r1, [r4, #60]	; 0x3c
            return BLE_HS_EAGAIN;
    f9ac:	e003      	b.n	f9b6 <ble_hs_wakeup_tx_conn+0x46>
            STAILQ_INSERT_HEAD(&conn->bhc_tx_q, OS_MBUF_PKTHDR(om), omp_next);
    f9ae:	3314      	adds	r3, #20
    f9b0:	6423      	str	r3, [r4, #64]	; 0x40
    f9b2:	e7fa      	b.n	f9aa <ble_hs_wakeup_tx_conn+0x3a>
        }
    }

    return 0;
    f9b4:	2000      	movs	r0, #0
}
    f9b6:	b002      	add	sp, #8
    f9b8:	bd10      	pop	{r4, pc}
	...

0000f9bc <ble_hs_event_rx_hci_ev>:
#endif
}

static void
ble_hs_event_rx_hci_ev(struct ble_npl_event *ev)
{
    f9bc:	b510      	push	{r4, lr}
    f9be:	4601      	mov	r1, r0
    return ev->ev.ev_arg;
    f9c0:	6884      	ldr	r4, [r0, #8]
    const struct ble_hci_ev *hci_ev;
    int rc;

    hci_ev = ble_npl_event_get_arg(ev);

    rc = os_memblock_put(&ble_hs_hci_ev_pool, ev);
    f9c2:	4803      	ldr	r0, [pc, #12]	; (f9d0 <ble_hs_event_rx_hci_ev+0x14>)
    f9c4:	f7fb f883 	bl	aace <os_memblock_put>
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_EVENT_PKT, hci_ev,
                     hci_ev->length + sizeof(*hci_ev));
#endif

    ble_hs_hci_evt_process(hci_ev);
    f9c8:	4620      	mov	r0, r4
    f9ca:	f001 fbe3 	bl	11194 <ble_hs_hci_evt_process>
}
    f9ce:	bd10      	pop	{r4, pc}
    f9d0:	20007270 	.word	0x20007270

0000f9d4 <ble_hs_clear_rx_queue>:
{
    f9d4:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
    f9d6:	e002      	b.n	f9de <ble_hs_clear_rx_queue+0xa>
        os_mbuf_free_chain(om);
    f9d8:	4618      	mov	r0, r3
    f9da:	f7fa fc01 	bl	a1e0 <os_mbuf_free_chain>
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
    f9de:	4803      	ldr	r0, [pc, #12]	; (f9ec <ble_hs_clear_rx_queue+0x18>)
    f9e0:	f001 fe58 	bl	11694 <ble_mqueue_get>
    f9e4:	4603      	mov	r3, r0
    f9e6:	2800      	cmp	r0, #0
    f9e8:	d1f6      	bne.n	f9d8 <ble_hs_clear_rx_queue+0x4>
}
    f9ea:	bd08      	pop	{r3, pc}
    f9ec:	20007348 	.word	0x20007348

0000f9f0 <ble_hs_rx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_hs_rx_data(struct os_mbuf *om, void *arg)
{
    f9f0:	b510      	push	{r4, lr}
    f9f2:	4604      	mov	r4, r0
    int rc;

    /* If flow control is enabled, mark this packet with its corresponding
     * connection handle.
     */
    ble_hs_flow_track_data_mbuf(om);
    f9f4:	f000 ff9d 	bl	10932 <ble_hs_flow_track_data_mbuf>

    rc = ble_mqueue_put(&ble_hs_rx_q, ble_hs_evq, om);
    f9f8:	4622      	mov	r2, r4
    f9fa:	4b07      	ldr	r3, [pc, #28]	; (fa18 <ble_hs_rx_data+0x28>)
    f9fc:	6819      	ldr	r1, [r3, #0]
    f9fe:	4807      	ldr	r0, [pc, #28]	; (fa1c <ble_hs_rx_data+0x2c>)
    fa00:	f001 fe5b 	bl	116ba <ble_mqueue_put>
    if (rc != 0) {
    fa04:	4603      	mov	r3, r0
    fa06:	b908      	cbnz	r0, fa0c <ble_hs_rx_data+0x1c>
        os_mbuf_free_chain(om);
        return BLE_HS_EOS;
    }

    return 0;
}
    fa08:	4618      	mov	r0, r3
    fa0a:	bd10      	pop	{r4, pc}
        os_mbuf_free_chain(om);
    fa0c:	4620      	mov	r0, r4
    fa0e:	f7fa fbe7 	bl	a1e0 <os_mbuf_free_chain>
        return BLE_HS_EOS;
    fa12:	230b      	movs	r3, #11
    fa14:	e7f8      	b.n	fa08 <ble_hs_rx_data+0x18>
    fa16:	bf00      	nop
    fa18:	2000726c 	.word	0x2000726c
    fa1c:	20007348 	.word	0x20007348

0000fa20 <ble_hs_event_tx_notify>:
{
    fa20:	b508      	push	{r3, lr}
    ble_gatts_tx_notifications();
    fa22:	f7ff fe87 	bl	f734 <ble_gatts_tx_notifications>
}
    fa26:	bd08      	pop	{r3, pc}

0000fa28 <ble_hs_evq_get>:
}
    fa28:	4b01      	ldr	r3, [pc, #4]	; (fa30 <ble_hs_evq_get+0x8>)
    fa2a:	6818      	ldr	r0, [r3, #0]
    fa2c:	4770      	bx	lr
    fa2e:	bf00      	nop
    fa30:	2000726c 	.word	0x2000726c

0000fa34 <ble_hs_sched_start_stage2>:
{
    fa34:	b508      	push	{r3, lr}
    ble_npl_eventq_put((struct ble_npl_eventq *)ble_hs_evq_get(),
    fa36:	f7ff fff7 	bl	fa28 <ble_hs_evq_get>
    os_eventq_put(&evq->evq, &ev->ev);
    fa3a:	4902      	ldr	r1, [pc, #8]	; (fa44 <ble_hs_sched_start_stage2+0x10>)
    fa3c:	f7fa faa3 	bl	9f86 <os_eventq_put>
}
    fa40:	bd08      	pop	{r3, pc}
    fa42:	bf00      	nop
    fa44:	2000724c 	.word	0x2000724c

0000fa48 <ble_hs_event_start_stage1>:
{
    fa48:	b508      	push	{r3, lr}
    ble_hs_sched_start_stage2();
    fa4a:	f7ff fff3 	bl	fa34 <ble_hs_sched_start_stage2>
}
    fa4e:	bd08      	pop	{r3, pc}

0000fa50 <ble_hs_evq_set>:
    ble_hs_evq = evq;
    fa50:	4b01      	ldr	r3, [pc, #4]	; (fa58 <ble_hs_evq_set+0x8>)
    fa52:	6018      	str	r0, [r3, #0]
}
    fa54:	4770      	bx	lr
    fa56:	bf00      	nop
    fa58:	2000726c 	.word	0x2000726c

0000fa5c <ble_hs_is_parent_task>:
{
    fa5c:	b508      	push	{r3, lr}
    return os_started();
    fa5e:	f7fa f805 	bl	9a6c <os_started>
    return !ble_npl_os_started() ||
    fa62:	b908      	cbnz	r0, fa68 <ble_hs_is_parent_task+0xc>
    fa64:	2001      	movs	r0, #1
}
    fa66:	bd08      	pop	{r3, pc}
    return os_sched_get_current_task();
    fa68:	f7fb faa0 	bl	afac <os_sched_get_current_task>
           ble_npl_get_current_task_id() == ble_hs_parent_task;
    fa6c:	4b03      	ldr	r3, [pc, #12]	; (fa7c <ble_hs_is_parent_task+0x20>)
    fa6e:	681b      	ldr	r3, [r3, #0]
    return !ble_npl_os_started() ||
    fa70:	4283      	cmp	r3, r0
    fa72:	d001      	beq.n	fa78 <ble_hs_is_parent_task+0x1c>
    fa74:	2000      	movs	r0, #0
    fa76:	e7f6      	b.n	fa66 <ble_hs_is_parent_task+0xa>
    fa78:	2001      	movs	r0, #1
    fa7a:	e7f4      	b.n	fa66 <ble_hs_is_parent_task+0xa>
    fa7c:	20007340 	.word	0x20007340

0000fa80 <ble_hs_lock_nested>:
{
    fa80:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
    fa82:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    fa86:	4802      	ldr	r0, [pc, #8]	; (fa90 <ble_hs_lock_nested+0x10>)
    fa88:	f7fb f95c 	bl	ad44 <os_mutex_pend>
}
    fa8c:	bd08      	pop	{r3, pc}
    fa8e:	bf00      	nop
    fa90:	20007334 	.word	0x20007334

0000fa94 <ble_hs_unlock_nested>:
{
    fa94:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
    fa96:	4802      	ldr	r0, [pc, #8]	; (faa0 <ble_hs_unlock_nested+0xc>)
    fa98:	f7fb f8f4 	bl	ac84 <os_mutex_release>
}
    fa9c:	bd08      	pop	{r3, pc}
    fa9e:	bf00      	nop
    faa0:	20007334 	.word	0x20007334

0000faa4 <ble_hs_lock>:
{
    faa4:	b508      	push	{r3, lr}
    ble_hs_lock_nested();
    faa6:	f7ff ffeb 	bl	fa80 <ble_hs_lock_nested>
}
    faaa:	bd08      	pop	{r3, pc}

0000faac <ble_hs_unlock>:
{
    faac:	b508      	push	{r3, lr}
    ble_hs_unlock_nested();
    faae:	f7ff fff1 	bl	fa94 <ble_hs_unlock_nested>
}
    fab2:	bd08      	pop	{r3, pc}

0000fab4 <ble_hs_process_rx_data_queue>:
{
    fab4:	b508      	push	{r3, lr}
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
    fab6:	e002      	b.n	fabe <ble_hs_process_rx_data_queue+0xa>
        ble_hs_hci_evt_acl_process(om);
    fab8:	4618      	mov	r0, r3
    faba:	f001 fb7f 	bl	111bc <ble_hs_hci_evt_acl_process>
    while ((om = ble_mqueue_get(&ble_hs_rx_q)) != NULL) {
    fabe:	4803      	ldr	r0, [pc, #12]	; (facc <ble_hs_process_rx_data_queue+0x18>)
    fac0:	f001 fde8 	bl	11694 <ble_mqueue_get>
    fac4:	4603      	mov	r3, r0
    fac6:	2800      	cmp	r0, #0
    fac8:	d1f6      	bne.n	fab8 <ble_hs_process_rx_data_queue+0x4>
}
    faca:	bd08      	pop	{r3, pc}
    facc:	20007348 	.word	0x20007348

0000fad0 <ble_hs_event_rx_data>:
{
    fad0:	b508      	push	{r3, lr}
    ble_hs_process_rx_data_queue();
    fad2:	f7ff ffef 	bl	fab4 <ble_hs_process_rx_data_queue>
}
    fad6:	bd08      	pop	{r3, pc}

0000fad8 <ble_hs_wakeup_tx>:
{
    fad8:	b510      	push	{r4, lr}
    ble_hs_lock();
    fada:	f7ff ffe3 	bl	faa4 <ble_hs_lock>
    for (conn = ble_hs_conn_first();
    fade:	f000 fe1d 	bl	1071c <ble_hs_conn_first>
    fae2:	b148      	cbz	r0, faf8 <ble_hs_wakeup_tx+0x20>
        if (conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG) {
    fae4:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    fae8:	f013 0f04 	tst.w	r3, #4
    faec:	d101      	bne.n	faf2 <ble_hs_wakeup_tx+0x1a>
         conn = SLIST_NEXT(conn, bhc_next)) {
    faee:	6800      	ldr	r0, [r0, #0]
    faf0:	e7f7      	b.n	fae2 <ble_hs_wakeup_tx+0xa>
            rc = ble_hs_wakeup_tx_conn(conn);
    faf2:	f7ff ff3d 	bl	f970 <ble_hs_wakeup_tx_conn>
            if (rc != 0) {
    faf6:	b948      	cbnz	r0, fb0c <ble_hs_wakeup_tx+0x34>
    for (conn = ble_hs_conn_first();
    faf8:	f000 fe10 	bl	1071c <ble_hs_conn_first>
    fafc:	4604      	mov	r4, r0
    fafe:	b12c      	cbz	r4, fb0c <ble_hs_wakeup_tx+0x34>
        rc = ble_hs_wakeup_tx_conn(conn);
    fb00:	4620      	mov	r0, r4
    fb02:	f7ff ff35 	bl	f970 <ble_hs_wakeup_tx_conn>
        if (rc != 0) {
    fb06:	b908      	cbnz	r0, fb0c <ble_hs_wakeup_tx+0x34>
         conn = SLIST_NEXT(conn, bhc_next)) {
    fb08:	6824      	ldr	r4, [r4, #0]
    fb0a:	e7f8      	b.n	fafe <ble_hs_wakeup_tx+0x26>
    ble_hs_unlock();
    fb0c:	f7ff ffce 	bl	faac <ble_hs_unlock>
}
    fb10:	bd10      	pop	{r4, pc}
	...

0000fb14 <ble_hs_is_enabled>:
    return ble_hs_enabled_state == BLE_HS_ENABLED_STATE_ON;
    fb14:	4b03      	ldr	r3, [pc, #12]	; (fb24 <ble_hs_is_enabled+0x10>)
    fb16:	7818      	ldrb	r0, [r3, #0]
}
    fb18:	2802      	cmp	r0, #2
    fb1a:	bf14      	ite	ne
    fb1c:	2000      	movne	r0, #0
    fb1e:	2001      	moveq	r0, #1
    fb20:	4770      	bx	lr
    fb22:	bf00      	nop
    fb24:	20007228 	.word	0x20007228

0000fb28 <ble_hs_timer_reset>:
{
    fb28:	b510      	push	{r4, lr}
    fb2a:	4604      	mov	r4, r0
    if (!ble_hs_is_enabled()) {
    fb2c:	f7ff fff2 	bl	fb14 <ble_hs_is_enabled>
    fb30:	b120      	cbz	r0, fb3c <ble_hs_timer_reset+0x14>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
    fb32:	4621      	mov	r1, r4
    fb34:	4803      	ldr	r0, [pc, #12]	; (fb44 <ble_hs_timer_reset+0x1c>)
    fb36:	f7fa f8ad 	bl	9c94 <os_callout_reset>
}
    fb3a:	bd10      	pop	{r4, pc}
    os_callout_stop(&co->co);
    fb3c:	4801      	ldr	r0, [pc, #4]	; (fb44 <ble_hs_timer_reset+0x1c>)
    fb3e:	f7fa f88b 	bl	9c58 <os_callout_stop>
    fb42:	e7fa      	b.n	fb3a <ble_hs_timer_reset+0x12>
    fb44:	20007364 	.word	0x20007364

0000fb48 <ble_hs_timer_sched>:
    if (ticks_from_now == BLE_HS_FOREVER) {
    fb48:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
    fb4c:	4298      	cmp	r0, r3
    fb4e:	d010      	beq.n	fb72 <ble_hs_timer_sched+0x2a>
{
    fb50:	b510      	push	{r4, lr}
    fb52:	4604      	mov	r4, r0
    return os_time_get();
    fb54:	f7fb fc3e 	bl	b3d4 <os_time_get>
    abs_time = ble_npl_time_get() + ticks_from_now;
    fb58:	4420      	add	r0, r4
    fb5a:	4b06      	ldr	r3, [pc, #24]	; (fb74 <ble_hs_timer_sched+0x2c>)
    fb5c:	69db      	ldr	r3, [r3, #28]
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
    fb5e:	b123      	cbz	r3, fb6a <ble_hs_timer_sched+0x22>
    return co->co.c_ticks;
    fb60:	4b04      	ldr	r3, [pc, #16]	; (fb74 <ble_hs_timer_sched+0x2c>)
    fb62:	695b      	ldr	r3, [r3, #20]
            ((ble_npl_stime_t)(abs_time -
    fb64:	1ac0      	subs	r0, r0, r3
    if (!ble_npl_callout_is_active(&ble_hs_timer) ||
    fb66:	2800      	cmp	r0, #0
    fb68:	da02      	bge.n	fb70 <ble_hs_timer_sched+0x28>
        ble_hs_timer_reset(ticks_from_now);
    fb6a:	4620      	mov	r0, r4
    fb6c:	f7ff ffdc 	bl	fb28 <ble_hs_timer_reset>
}
    fb70:	bd10      	pop	{r4, pc}
    fb72:	4770      	bx	lr
    fb74:	20007364 	.word	0x20007364

0000fb78 <ble_hs_sync>:
{
    fb78:	b510      	push	{r4, lr}
    ble_hs_sync_state = BLE_HS_SYNC_STATE_BRINGUP;
    fb7a:	4b0e      	ldr	r3, [pc, #56]	; (fbb4 <ble_hs_sync+0x3c>)
    fb7c:	2201      	movs	r2, #1
    fb7e:	701a      	strb	r2, [r3, #0]
    rc = ble_hs_startup_go();
    fb80:	f001 ffd1 	bl	11b26 <ble_hs_startup_go>
    if (rc == 0) {
    fb84:	4604      	mov	r4, r0
    fb86:	b940      	cbnz	r0, fb9a <ble_hs_sync+0x22>
        ble_hs_sync_state = BLE_HS_SYNC_STATE_GOOD;
    fb88:	4b0a      	ldr	r3, [pc, #40]	; (fbb4 <ble_hs_sync+0x3c>)
    fb8a:	2202      	movs	r2, #2
    fb8c:	701a      	strb	r2, [r3, #0]
    ble_hs_timer_sched(retry_tmo_ticks);
    fb8e:	200c      	movs	r0, #12
    fb90:	f7ff ffda 	bl	fb48 <ble_hs_timer_sched>
    if (rc == 0) {
    fb94:	b12c      	cbz	r4, fba2 <ble_hs_sync+0x2a>
}
    fb96:	4620      	mov	r0, r4
    fb98:	bd10      	pop	{r4, pc}
        ble_hs_sync_state = BLE_HS_SYNC_STATE_BAD;
    fb9a:	4b06      	ldr	r3, [pc, #24]	; (fbb4 <ble_hs_sync+0x3c>)
    fb9c:	2200      	movs	r2, #0
    fb9e:	701a      	strb	r2, [r3, #0]
    fba0:	e7f5      	b.n	fb8e <ble_hs_sync+0x16>
        rc = ble_hs_misc_restore_irks();
    fba2:	f001 fd63 	bl	1166c <ble_hs_misc_restore_irks>
    fba6:	4604      	mov	r4, r0
        if (ble_hs_cfg.sync_cb != NULL) {
    fba8:	4b03      	ldr	r3, [pc, #12]	; (fbb8 <ble_hs_sync+0x40>)
    fbaa:	691b      	ldr	r3, [r3, #16]
    fbac:	2b00      	cmp	r3, #0
    fbae:	d0f2      	beq.n	fb96 <ble_hs_sync+0x1e>
            ble_hs_cfg.sync_cb();
    fbb0:	4798      	blx	r3
    return rc;
    fbb2:	e7f0      	b.n	fb96 <ble_hs_sync+0x1e>
    fbb4:	20007360 	.word	0x20007360
    fbb8:	2000017c 	.word	0x2000017c

0000fbbc <ble_hs_reset>:
{
    fbbc:	b508      	push	{r3, lr}
    ble_hs_sync_state = 0;
    fbbe:	4b0d      	ldr	r3, [pc, #52]	; (fbf4 <ble_hs_reset+0x38>)
    fbc0:	2200      	movs	r2, #0
    fbc2:	701a      	strb	r2, [r3, #0]
    (void)ble_hci_trans_reset();
    fbc4:	f006 fd22 	bl	1660c <ble_hci_trans_reset>
    ble_hs_clear_rx_queue();
    fbc8:	f7ff ff04 	bl	f9d4 <ble_hs_clear_rx_queue>
    ble_gap_reset_state(ble_hs_reset_reason);
    fbcc:	4b0a      	ldr	r3, [pc, #40]	; (fbf8 <ble_hs_reset+0x3c>)
    fbce:	6818      	ldr	r0, [r3, #0]
    fbd0:	f7fd fc98 	bl	d504 <ble_gap_reset_state>
    ble_hs_id_reset();
    fbd4:	f001 fc8e 	bl	114f4 <ble_hs_id_reset>
    if (ble_hs_cfg.reset_cb != NULL && ble_hs_reset_reason != 0) {
    fbd8:	4b08      	ldr	r3, [pc, #32]	; (fbfc <ble_hs_reset+0x40>)
    fbda:	68db      	ldr	r3, [r3, #12]
    fbdc:	b11b      	cbz	r3, fbe6 <ble_hs_reset+0x2a>
    fbde:	4a06      	ldr	r2, [pc, #24]	; (fbf8 <ble_hs_reset+0x3c>)
    fbe0:	6810      	ldr	r0, [r2, #0]
    fbe2:	b100      	cbz	r0, fbe6 <ble_hs_reset+0x2a>
        ble_hs_cfg.reset_cb(ble_hs_reset_reason);
    fbe4:	4798      	blx	r3
    ble_hs_reset_reason = 0;
    fbe6:	4b04      	ldr	r3, [pc, #16]	; (fbf8 <ble_hs_reset+0x3c>)
    fbe8:	2200      	movs	r2, #0
    fbea:	601a      	str	r2, [r3, #0]
    rc = ble_hs_sync();
    fbec:	f7ff ffc4 	bl	fb78 <ble_hs_sync>
}
    fbf0:	bd08      	pop	{r3, pc}
    fbf2:	bf00      	nop
    fbf4:	20007360 	.word	0x20007360
    fbf8:	20007344 	.word	0x20007344
    fbfc:	2000017c 	.word	0x2000017c

0000fc00 <ble_hs_event_reset>:
{
    fc00:	b508      	push	{r3, lr}
    ble_hs_reset();
    fc02:	f7ff ffdb 	bl	fbbc <ble_hs_reset>
}
    fc06:	bd08      	pop	{r3, pc}

0000fc08 <ble_hs_timer_exp>:
{
    fc08:	b508      	push	{r3, lr}
    switch (ble_hs_sync_state) {
    fc0a:	4b13      	ldr	r3, [pc, #76]	; (fc58 <ble_hs_timer_exp+0x50>)
    fc0c:	781b      	ldrb	r3, [r3, #0]
    fc0e:	b1b3      	cbz	r3, fc3e <ble_hs_timer_exp+0x36>
    fc10:	2b02      	cmp	r3, #2
    fc12:	d117      	bne.n	fc44 <ble_hs_timer_exp+0x3c>
        ticks_until_next = ble_gattc_timer();
    fc14:	f7fe fda8 	bl	e768 <ble_gattc_timer>
        ble_hs_timer_sched(ticks_until_next);
    fc18:	f7ff ff96 	bl	fb48 <ble_hs_timer_sched>
        ticks_until_next = ble_gap_timer();
    fc1c:	f7fd f9e7 	bl	cfee <ble_gap_timer>
        ble_hs_timer_sched(ticks_until_next);
    fc20:	f7ff ff92 	bl	fb48 <ble_hs_timer_sched>
        ticks_until_next = ble_l2cap_sig_timer();
    fc24:	f002 fb2c 	bl	12280 <ble_l2cap_sig_timer>
        ble_hs_timer_sched(ticks_until_next);
    fc28:	f7ff ff8e 	bl	fb48 <ble_hs_timer_sched>
        ticks_until_next = ble_sm_timer();
    fc2c:	f003 ff03 	bl	13a36 <ble_sm_timer>
        ble_hs_timer_sched(ticks_until_next);
    fc30:	f7ff ff8a 	bl	fb48 <ble_hs_timer_sched>
        ticks_until_next = ble_hs_conn_timer();
    fc34:	f000 fe24 	bl	10880 <ble_hs_conn_timer>
        ble_hs_timer_sched(ticks_until_next);
    fc38:	f7ff ff86 	bl	fb48 <ble_hs_timer_sched>
}
    fc3c:	bd08      	pop	{r3, pc}
        ble_hs_reset();
    fc3e:	f7ff ffbd 	bl	fbbc <ble_hs_reset>
        break;
    fc42:	e7fb      	b.n	fc3c <ble_hs_timer_exp+0x34>
        assert(0);
    fc44:	f7f8 fabc 	bl	81c0 <hal_debugger_connected>
    fc48:	b100      	cbz	r0, fc4c <ble_hs_timer_exp+0x44>
    fc4a:	be01      	bkpt	0x0001
    fc4c:	2300      	movs	r3, #0
    fc4e:	461a      	mov	r2, r3
    fc50:	4619      	mov	r1, r3
    fc52:	4618      	mov	r0, r3
    fc54:	f7f9 fe4a 	bl	98ec <__assert_func>
    fc58:	20007360 	.word	0x20007360

0000fc5c <ble_hs_timer_resched>:
{
    fc5c:	b508      	push	{r3, lr}
    ble_hs_timer_reset(0);
    fc5e:	2000      	movs	r0, #0
    fc60:	f7ff ff62 	bl	fb28 <ble_hs_timer_reset>
}
    fc64:	bd08      	pop	{r3, pc}
	...

0000fc68 <ble_hs_enqueue_hci_event>:
{
    fc68:	b510      	push	{r4, lr}
    fc6a:	4604      	mov	r4, r0
    ev = os_memblock_get(&ble_hs_hci_ev_pool);
    fc6c:	480a      	ldr	r0, [pc, #40]	; (fc98 <ble_hs_enqueue_hci_event+0x30>)
    fc6e:	f7fa ff06 	bl	aa7e <os_memblock_get>
    if (ev == NULL) {
    fc72:	b160      	cbz	r0, fc8e <ble_hs_enqueue_hci_event+0x26>
    fc74:	4601      	mov	r1, r0
    memset(ev, 0, sizeof(*ev));
    fc76:	2300      	movs	r3, #0
    fc78:	6003      	str	r3, [r0, #0]
    fc7a:	60c3      	str	r3, [r0, #12]
    ev->ev.ev_queued = 0;
    fc7c:	7003      	strb	r3, [r0, #0]
    ev->ev.ev_cb = (os_event_fn *)fn;
    fc7e:	4b07      	ldr	r3, [pc, #28]	; (fc9c <ble_hs_enqueue_hci_event+0x34>)
    fc80:	6043      	str	r3, [r0, #4]
    ev->ev.ev_arg = arg;
    fc82:	6084      	str	r4, [r0, #8]
    os_eventq_put(&evq->evq, &ev->ev);
    fc84:	4b06      	ldr	r3, [pc, #24]	; (fca0 <ble_hs_enqueue_hci_event+0x38>)
    fc86:	6818      	ldr	r0, [r3, #0]
    fc88:	f7fa f97d 	bl	9f86 <os_eventq_put>
}
    fc8c:	bd10      	pop	{r4, pc}
        ble_hci_trans_buf_free(hci_evt);
    fc8e:	4620      	mov	r0, r4
    fc90:	f006 fc6a 	bl	16568 <ble_hci_trans_buf_free>
    fc94:	e7fa      	b.n	fc8c <ble_hs_enqueue_hci_event+0x24>
    fc96:	bf00      	nop
    fc98:	20007270 	.word	0x20007270
    fc9c:	0000f9bd 	.word	0x0000f9bd
    fca0:	2000726c 	.word	0x2000726c

0000fca4 <ble_hs_sched_reset>:
{
    fca4:	b508      	push	{r3, lr}
    ble_hs_reset_reason = reason;
    fca6:	4b04      	ldr	r3, [pc, #16]	; (fcb8 <ble_hs_sched_reset+0x14>)
    fca8:	6018      	str	r0, [r3, #0]
    fcaa:	4904      	ldr	r1, [pc, #16]	; (fcbc <ble_hs_sched_reset+0x18>)
    fcac:	4b04      	ldr	r3, [pc, #16]	; (fcc0 <ble_hs_sched_reset+0x1c>)
    fcae:	6818      	ldr	r0, [r3, #0]
    fcb0:	f7fa f969 	bl	9f86 <os_eventq_put>
}
    fcb4:	bd08      	pop	{r3, pc}
    fcb6:	bf00      	nop
    fcb8:	20007344 	.word	0x20007344
    fcbc:	2000722c 	.word	0x2000722c
    fcc0:	2000726c 	.word	0x2000726c

0000fcc4 <ble_hs_hw_error>:
{
    fcc4:	b508      	push	{r3, lr}
    ble_hs_sched_reset(BLE_HS_HW_ERR(hw_code));
    fcc6:	f500 60c0 	add.w	r0, r0, #1536	; 0x600
    fcca:	f7ff ffeb 	bl	fca4 <ble_hs_sched_reset>
}
    fcce:	bd08      	pop	{r3, pc}

0000fcd0 <ble_hs_start>:
{
    fcd0:	b510      	push	{r4, lr}
    ble_hs_lock();
    fcd2:	f7ff fee7 	bl	faa4 <ble_hs_lock>
    switch (ble_hs_enabled_state) {
    fcd6:	4b19      	ldr	r3, [pc, #100]	; (fd3c <ble_hs_start+0x6c>)
    fcd8:	781b      	ldrb	r3, [r3, #0]
    fcda:	2b01      	cmp	r3, #1
    fcdc:	d029      	beq.n	fd32 <ble_hs_start+0x62>
    fcde:	b133      	cbz	r3, fcee <ble_hs_start+0x1e>
    fce0:	2b02      	cmp	r3, #2
    fce2:	d11c      	bne.n	fd1e <ble_hs_start+0x4e>
    ble_hs_unlock();
    fce4:	f7ff fee2 	bl	faac <ble_hs_unlock>
        rc = BLE_HS_EALREADY;
    fce8:	2402      	movs	r4, #2
}
    fcea:	4620      	mov	r0, r4
    fcec:	bd10      	pop	{r4, pc}
        ble_hs_enabled_state = BLE_HS_ENABLED_STATE_ON;
    fcee:	4b13      	ldr	r3, [pc, #76]	; (fd3c <ble_hs_start+0x6c>)
    fcf0:	2202      	movs	r2, #2
    fcf2:	701a      	strb	r2, [r3, #0]
    ble_hs_unlock();
    fcf4:	f7ff feda 	bl	faac <ble_hs_unlock>
    return os_sched_get_current_task();
    fcf8:	f7fb f958 	bl	afac <os_sched_get_current_task>
    ble_hs_parent_task = ble_npl_get_current_task_id();
    fcfc:	4b10      	ldr	r3, [pc, #64]	; (fd40 <ble_hs_start+0x70>)
    fcfe:	6018      	str	r0, [r3, #0]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
    fd00:	2300      	movs	r3, #0
    fd02:	4a10      	ldr	r2, [pc, #64]	; (fd44 <ble_hs_start+0x74>)
    fd04:	4910      	ldr	r1, [pc, #64]	; (fd48 <ble_hs_start+0x78>)
    fd06:	6809      	ldr	r1, [r1, #0]
    fd08:	4810      	ldr	r0, [pc, #64]	; (fd4c <ble_hs_start+0x7c>)
    fd0a:	f7f9 ff97 	bl	9c3c <os_callout_init>
    rc = ble_gatts_start();
    fd0e:	f7ff fba7 	bl	f460 <ble_gatts_start>
    if (rc != 0) {
    fd12:	4604      	mov	r4, r0
    fd14:	2800      	cmp	r0, #0
    fd16:	d1e8      	bne.n	fcea <ble_hs_start+0x1a>
    ble_hs_sync();
    fd18:	f7ff ff2e 	bl	fb78 <ble_hs_sync>
    return 0;
    fd1c:	e7e5      	b.n	fcea <ble_hs_start+0x1a>
        assert(0);
    fd1e:	f7f8 fa4f 	bl	81c0 <hal_debugger_connected>
    fd22:	b100      	cbz	r0, fd26 <ble_hs_start+0x56>
    fd24:	be01      	bkpt	0x0001
    fd26:	2300      	movs	r3, #0
    fd28:	461a      	mov	r2, r3
    fd2a:	4619      	mov	r1, r3
    fd2c:	4618      	mov	r0, r3
    fd2e:	f7f9 fddd 	bl	98ec <__assert_func>
    ble_hs_unlock();
    fd32:	f7ff febb 	bl	faac <ble_hs_unlock>
        rc = BLE_HS_EBUSY;
    fd36:	240f      	movs	r4, #15
    fd38:	e7d7      	b.n	fcea <ble_hs_start+0x1a>
    fd3a:	bf00      	nop
    fd3c:	20007228 	.word	0x20007228
    fd40:	20007340 	.word	0x20007340
    fd44:	0000fc09 	.word	0x0000fc09
    fd48:	2000726c 	.word	0x2000726c
    fd4c:	20007364 	.word	0x20007364

0000fd50 <ble_hs_event_start_stage2>:
{
    fd50:	b508      	push	{r3, lr}
    rc = ble_hs_start();
    fd52:	f7ff ffbd 	bl	fcd0 <ble_hs_start>
    assert(rc == 0);
    fd56:	b900      	cbnz	r0, fd5a <ble_hs_event_start_stage2+0xa>
}
    fd58:	bd08      	pop	{r3, pc}
    assert(rc == 0);
    fd5a:	f7f8 fa31 	bl	81c0 <hal_debugger_connected>
    fd5e:	b100      	cbz	r0, fd62 <ble_hs_event_start_stage2+0x12>
    fd60:	be01      	bkpt	0x0001
    fd62:	2300      	movs	r3, #0
    fd64:	461a      	mov	r2, r3
    fd66:	4619      	mov	r1, r3
    fd68:	4618      	mov	r0, r3
    fd6a:	f7f9 fdbf 	bl	98ec <__assert_func>

0000fd6e <ble_hs_tx_data>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_tx_data(struct os_mbuf *om)
{
    fd6e:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send_om(BLE_MONITOR_OPCODE_ACL_TX_PKT, om);
#endif

    return ble_hci_trans_hs_acl_tx(om);
    fd70:	f006 fba0 	bl	164b4 <ble_hci_trans_hs_acl_tx>
}
    fd74:	bd08      	pop	{r3, pc}
	...

0000fd78 <ble_hs_init>:

void
ble_hs_init(void)
{
    fd78:	b510      	push	{r4, lr}
    fd7a:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
    fd7c:	4b73      	ldr	r3, [pc, #460]	; (ff4c <ble_hs_init+0x1d4>)
    fd7e:	781b      	ldrb	r3, [r3, #0]
    fd80:	2b00      	cmp	r3, #0
    fd82:	d063      	beq.n	fe4c <ble_hs_init+0xd4>

    /* Create memory pool of OS events */
    rc = os_mempool_init(&ble_hs_hci_ev_pool, BLE_HS_HCI_EVT_COUNT,
    fd84:	4b72      	ldr	r3, [pc, #456]	; (ff50 <ble_hs_init+0x1d8>)
    fd86:	9300      	str	r3, [sp, #0]
    fd88:	4b72      	ldr	r3, [pc, #456]	; (ff54 <ble_hs_init+0x1dc>)
    fd8a:	2210      	movs	r2, #16
    fd8c:	210a      	movs	r1, #10
    fd8e:	4872      	ldr	r0, [pc, #456]	; (ff58 <ble_hs_init+0x1e0>)
    fd90:	f7fa fe30 	bl	a9f4 <os_mempool_init>
                         sizeof (struct ble_npl_event), ble_hs_hci_os_event_buf,
                         "ble_hs_hci_ev_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
    fd94:	2800      	cmp	r0, #0
    fd96:	d163      	bne.n	fe60 <ble_hs_init+0xe8>

    /* These get initialized here to allow unit tests to run without a zeroed
     * bss.
     */
    ble_hs_reset_reason = 0;
    fd98:	2300      	movs	r3, #0
    fd9a:	4a70      	ldr	r2, [pc, #448]	; (ff5c <ble_hs_init+0x1e4>)
    fd9c:	6013      	str	r3, [r2, #0]
    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
    fd9e:	4a70      	ldr	r2, [pc, #448]	; (ff60 <ble_hs_init+0x1e8>)
    fda0:	7013      	strb	r3, [r2, #0]
    memset(ev, 0, sizeof(*ev));
    fda2:	4a70      	ldr	r2, [pc, #448]	; (ff64 <ble_hs_init+0x1ec>)
    fda4:	6013      	str	r3, [r2, #0]
    fda6:	6093      	str	r3, [r2, #8]
    fda8:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    fdaa:	496f      	ldr	r1, [pc, #444]	; (ff68 <ble_hs_init+0x1f0>)
    fdac:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
    fdae:	4a6f      	ldr	r2, [pc, #444]	; (ff6c <ble_hs_init+0x1f4>)
    fdb0:	6013      	str	r3, [r2, #0]
    fdb2:	6093      	str	r3, [r2, #8]
    fdb4:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    fdb6:	496e      	ldr	r1, [pc, #440]	; (ff70 <ble_hs_init+0x1f8>)
    fdb8:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
    fdba:	4a6e      	ldr	r2, [pc, #440]	; (ff74 <ble_hs_init+0x1fc>)
    fdbc:	6013      	str	r3, [r2, #0]
    fdbe:	6093      	str	r3, [r2, #8]
    fdc0:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    fdc2:	496d      	ldr	r1, [pc, #436]	; (ff78 <ble_hs_init+0x200>)
    fdc4:	6051      	str	r1, [r2, #4]
    memset(ev, 0, sizeof(*ev));
    fdc6:	4a6d      	ldr	r2, [pc, #436]	; (ff7c <ble_hs_init+0x204>)
    fdc8:	6013      	str	r3, [r2, #0]
    fdca:	6093      	str	r3, [r2, #8]
    fdcc:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
    fdce:	4b6c      	ldr	r3, [pc, #432]	; (ff80 <ble_hs_init+0x208>)
    fdd0:	6053      	str	r3, [r2, #4]
    ble_npl_event_init(&ble_hs_ev_start_stage1, ble_hs_event_start_stage1,
                       NULL);
    ble_npl_event_init(&ble_hs_ev_start_stage2, ble_hs_event_start_stage2,
                       NULL);

    ble_hs_hci_init();
    fdd2:	f000 ff89 	bl	10ce8 <ble_hs_hci_init>

    rc = ble_hs_conn_init();
    fdd6:	f000 fd91 	bl	108fc <ble_hs_conn_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fdda:	2800      	cmp	r0, #0
    fddc:	d14d      	bne.n	fe7a <ble_hs_init+0x102>
#if MYNEWT_VAL(BLE_PERIODIC_ADV)
    rc = ble_hs_periodic_sync_init();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif

    rc = ble_l2cap_init();
    fdde:	f002 f825 	bl	11e2c <ble_l2cap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fde2:	2800      	cmp	r0, #0
    fde4:	d156      	bne.n	fe94 <ble_hs_init+0x11c>

    rc = ble_att_init();
    fde6:	f004 fc9b 	bl	14720 <ble_att_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fdea:	2800      	cmp	r0, #0
    fdec:	d15f      	bne.n	feae <ble_hs_init+0x136>

    rc = ble_att_svr_init();
    fdee:	f006 f891 	bl	15f14 <ble_att_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fdf2:	2800      	cmp	r0, #0
    fdf4:	d168      	bne.n	fec8 <ble_hs_init+0x150>

    rc = ble_gap_init();
    fdf6:	f7fd feed 	bl	dbd4 <ble_gap_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fdfa:	2800      	cmp	r0, #0
    fdfc:	d171      	bne.n	fee2 <ble_hs_init+0x16a>

    rc = ble_gattc_init();
    fdfe:	f7fe fd9d 	bl	e93c <ble_gattc_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fe02:	2800      	cmp	r0, #0
    fe04:	d17a      	bne.n	fefc <ble_hs_init+0x184>

    rc = ble_gatts_init();
    fe06:	f7ff fda9 	bl	f95c <ble_gatts_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fe0a:	2800      	cmp	r0, #0
    fe0c:	f040 8083 	bne.w	ff16 <ble_hs_init+0x19e>

    ble_hs_stop_init();
    fe10:	f001 fede 	bl	11bd0 <ble_hs_stop_init>

    ble_mqueue_init(&ble_hs_rx_q, ble_hs_event_rx_data, NULL);
    fe14:	2200      	movs	r2, #0
    fe16:	495b      	ldr	r1, [pc, #364]	; (ff84 <ble_hs_init+0x20c>)
    fe18:	485b      	ldr	r0, [pc, #364]	; (ff88 <ble_hs_init+0x210>)
    fe1a:	f001 fc31 	bl	11680 <ble_mqueue_init>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
    fe1e:	485b      	ldr	r0, [pc, #364]	; (ff8c <ble_hs_init+0x214>)
    fe20:	f7fa ff26 	bl	ac70 <os_mutex_init>
        STATS_HDR(ble_hs_stats), STATS_SIZE_INIT_PARMS(ble_hs_stats,
        STATS_SIZE_32), STATS_NAME_INIT_PARMS(ble_hs_stats), "ble_hs");
    SYSINIT_PANIC_ASSERT(rc == 0);

    rc = ble_npl_mutex_init(&ble_hs_mutex);
    SYSINIT_PANIC_ASSERT(rc == 0);
    fe24:	2800      	cmp	r0, #0
    fe26:	f040 8083 	bne.w	ff30 <ble_hs_init+0x1b8>
#if MYNEWT_VAL(BLE_HS_DEBUG)
    ble_hs_dbg_mutex_locked = 0;
#endif

#ifdef MYNEWT
    ble_hs_evq_set((struct ble_npl_eventq *)os_eventq_dflt_get());
    fe2a:	f7fa f957 	bl	a0dc <os_eventq_dflt_get>
    fe2e:	f7ff fe0f 	bl	fa50 <ble_hs_evq_set>
#else
    ble_hs_evq_set(nimble_port_get_dflt_eventq());
#endif

    /* Configure the HCI transport to communicate with a host. */
    ble_hci_trans_cfg_hs(ble_hs_hci_rx_evt, NULL, ble_hs_rx_data, NULL);
    fe32:	2300      	movs	r3, #0
    fe34:	4a56      	ldr	r2, [pc, #344]	; (ff90 <ble_hs_init+0x218>)
    fe36:	4619      	mov	r1, r3
    fe38:	4856      	ldr	r0, [pc, #344]	; (ff94 <ble_hs_init+0x21c>)
    fe3a:	f006 fae7 	bl	1640c <ble_hci_trans_cfg_hs>
     * queue ensures the event won't run until the end of main().  This allows
     * the application to configure this package in the meantime.
     */
#if MYNEWT_VAL(BLE_HS_AUTO_START)
#ifdef MYNEWT
    ble_npl_eventq_put((struct ble_npl_eventq *)os_eventq_dflt_get(),
    fe3e:	f7fa f94d 	bl	a0dc <os_eventq_dflt_get>
    os_eventq_put(&evq->evq, &ev->ev);
    fe42:	494c      	ldr	r1, [pc, #304]	; (ff74 <ble_hs_init+0x1fc>)
    fe44:	f7fa f89f 	bl	9f86 <os_eventq_put>
#endif

#if BLE_MONITOR
    ble_monitor_new_index(0, (uint8_t[6]){ }, "nimble0");
#endif
}
    fe48:	b002      	add	sp, #8
    fe4a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
    fe4c:	f7f8 f9b8 	bl	81c0 <hal_debugger_connected>
    fe50:	b100      	cbz	r0, fe54 <ble_hs_init+0xdc>
    fe52:	be01      	bkpt	0x0001
    fe54:	2300      	movs	r3, #0
    fe56:	461a      	mov	r2, r3
    fe58:	4619      	mov	r1, r3
    fe5a:	4618      	mov	r0, r3
    fe5c:	f7f9 fd46 	bl	98ec <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fe60:	f7f8 f9ae 	bl	81c0 <hal_debugger_connected>
    fe64:	b100      	cbz	r0, fe68 <ble_hs_init+0xf0>
    fe66:	be01      	bkpt	0x0001
    fe68:	2000      	movs	r0, #0
    fe6a:	9000      	str	r0, [sp, #0]
    fe6c:	4b4a      	ldr	r3, [pc, #296]	; (ff98 <ble_hs_init+0x220>)
    fe6e:	681c      	ldr	r4, [r3, #0]
    fe70:	4603      	mov	r3, r0
    fe72:	4602      	mov	r2, r0
    fe74:	4601      	mov	r1, r0
    fe76:	47a0      	blx	r4
    fe78:	e78e      	b.n	fd98 <ble_hs_init+0x20>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fe7a:	f7f8 f9a1 	bl	81c0 <hal_debugger_connected>
    fe7e:	b100      	cbz	r0, fe82 <ble_hs_init+0x10a>
    fe80:	be01      	bkpt	0x0001
    fe82:	2000      	movs	r0, #0
    fe84:	9000      	str	r0, [sp, #0]
    fe86:	4b44      	ldr	r3, [pc, #272]	; (ff98 <ble_hs_init+0x220>)
    fe88:	681c      	ldr	r4, [r3, #0]
    fe8a:	4603      	mov	r3, r0
    fe8c:	4602      	mov	r2, r0
    fe8e:	4601      	mov	r1, r0
    fe90:	47a0      	blx	r4
    fe92:	e7a4      	b.n	fdde <ble_hs_init+0x66>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fe94:	f7f8 f994 	bl	81c0 <hal_debugger_connected>
    fe98:	b100      	cbz	r0, fe9c <ble_hs_init+0x124>
    fe9a:	be01      	bkpt	0x0001
    fe9c:	2000      	movs	r0, #0
    fe9e:	9000      	str	r0, [sp, #0]
    fea0:	4b3d      	ldr	r3, [pc, #244]	; (ff98 <ble_hs_init+0x220>)
    fea2:	681c      	ldr	r4, [r3, #0]
    fea4:	4603      	mov	r3, r0
    fea6:	4602      	mov	r2, r0
    fea8:	4601      	mov	r1, r0
    feaa:	47a0      	blx	r4
    feac:	e79b      	b.n	fde6 <ble_hs_init+0x6e>
    SYSINIT_PANIC_ASSERT(rc == 0);
    feae:	f7f8 f987 	bl	81c0 <hal_debugger_connected>
    feb2:	b100      	cbz	r0, feb6 <ble_hs_init+0x13e>
    feb4:	be01      	bkpt	0x0001
    feb6:	2000      	movs	r0, #0
    feb8:	9000      	str	r0, [sp, #0]
    feba:	4b37      	ldr	r3, [pc, #220]	; (ff98 <ble_hs_init+0x220>)
    febc:	681c      	ldr	r4, [r3, #0]
    febe:	4603      	mov	r3, r0
    fec0:	4602      	mov	r2, r0
    fec2:	4601      	mov	r1, r0
    fec4:	47a0      	blx	r4
    fec6:	e792      	b.n	fdee <ble_hs_init+0x76>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fec8:	f7f8 f97a 	bl	81c0 <hal_debugger_connected>
    fecc:	b100      	cbz	r0, fed0 <ble_hs_init+0x158>
    fece:	be01      	bkpt	0x0001
    fed0:	2000      	movs	r0, #0
    fed2:	9000      	str	r0, [sp, #0]
    fed4:	4b30      	ldr	r3, [pc, #192]	; (ff98 <ble_hs_init+0x220>)
    fed6:	681c      	ldr	r4, [r3, #0]
    fed8:	4603      	mov	r3, r0
    feda:	4602      	mov	r2, r0
    fedc:	4601      	mov	r1, r0
    fede:	47a0      	blx	r4
    fee0:	e789      	b.n	fdf6 <ble_hs_init+0x7e>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fee2:	f7f8 f96d 	bl	81c0 <hal_debugger_connected>
    fee6:	b100      	cbz	r0, feea <ble_hs_init+0x172>
    fee8:	be01      	bkpt	0x0001
    feea:	2000      	movs	r0, #0
    feec:	9000      	str	r0, [sp, #0]
    feee:	4b2a      	ldr	r3, [pc, #168]	; (ff98 <ble_hs_init+0x220>)
    fef0:	681c      	ldr	r4, [r3, #0]
    fef2:	4603      	mov	r3, r0
    fef4:	4602      	mov	r2, r0
    fef6:	4601      	mov	r1, r0
    fef8:	47a0      	blx	r4
    fefa:	e780      	b.n	fdfe <ble_hs_init+0x86>
    SYSINIT_PANIC_ASSERT(rc == 0);
    fefc:	f7f8 f960 	bl	81c0 <hal_debugger_connected>
    ff00:	b100      	cbz	r0, ff04 <ble_hs_init+0x18c>
    ff02:	be01      	bkpt	0x0001
    ff04:	2000      	movs	r0, #0
    ff06:	9000      	str	r0, [sp, #0]
    ff08:	4b23      	ldr	r3, [pc, #140]	; (ff98 <ble_hs_init+0x220>)
    ff0a:	681c      	ldr	r4, [r3, #0]
    ff0c:	4603      	mov	r3, r0
    ff0e:	4602      	mov	r2, r0
    ff10:	4601      	mov	r1, r0
    ff12:	47a0      	blx	r4
    ff14:	e777      	b.n	fe06 <ble_hs_init+0x8e>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ff16:	f7f8 f953 	bl	81c0 <hal_debugger_connected>
    ff1a:	b100      	cbz	r0, ff1e <ble_hs_init+0x1a6>
    ff1c:	be01      	bkpt	0x0001
    ff1e:	2000      	movs	r0, #0
    ff20:	9000      	str	r0, [sp, #0]
    ff22:	4b1d      	ldr	r3, [pc, #116]	; (ff98 <ble_hs_init+0x220>)
    ff24:	681c      	ldr	r4, [r3, #0]
    ff26:	4603      	mov	r3, r0
    ff28:	4602      	mov	r2, r0
    ff2a:	4601      	mov	r1, r0
    ff2c:	47a0      	blx	r4
    ff2e:	e76f      	b.n	fe10 <ble_hs_init+0x98>
    SYSINIT_PANIC_ASSERT(rc == 0);
    ff30:	f7f8 f946 	bl	81c0 <hal_debugger_connected>
    ff34:	b100      	cbz	r0, ff38 <ble_hs_init+0x1c0>
    ff36:	be01      	bkpt	0x0001
    ff38:	2000      	movs	r0, #0
    ff3a:	9000      	str	r0, [sp, #0]
    ff3c:	4b16      	ldr	r3, [pc, #88]	; (ff98 <ble_hs_init+0x220>)
    ff3e:	681c      	ldr	r4, [r3, #0]
    ff40:	4603      	mov	r3, r0
    ff42:	4602      	mov	r2, r0
    ff44:	4601      	mov	r1, r0
    ff46:	47a0      	blx	r4
    ff48:	e76f      	b.n	fe2a <ble_hs_init+0xb2>
    ff4a:	bf00      	nop
    ff4c:	20000506 	.word	0x20000506
    ff50:	00028da4 	.word	0x00028da4
    ff54:	2000728c 	.word	0x2000728c
    ff58:	20007270 	.word	0x20007270
    ff5c:	20007344 	.word	0x20007344
    ff60:	20007228 	.word	0x20007228
    ff64:	2000725c 	.word	0x2000725c
    ff68:	0000fa21 	.word	0x0000fa21
    ff6c:	2000722c 	.word	0x2000722c
    ff70:	0000fc01 	.word	0x0000fc01
    ff74:	2000723c 	.word	0x2000723c
    ff78:	0000fa49 	.word	0x0000fa49
    ff7c:	2000724c 	.word	0x2000724c
    ff80:	0000fd51 	.word	0x0000fd51
    ff84:	0000fad1 	.word	0x0000fad1
    ff88:	20007348 	.word	0x20007348
    ff8c:	20007334 	.word	0x20007334
    ff90:	0000f9f1 	.word	0x0000f9f1
    ff94:	00010bcd 	.word	0x00010bcd
    ff98:	200000ec 	.word	0x200000ec

0000ff9c <ble_hs_adv_set_hdr>:
static ble_uuid128_t ble_hs_adv_uuids128[BLE_HS_ADV_MAX_FIELD_SZ / 16];

static int
ble_hs_adv_set_hdr(uint8_t type, uint8_t data_len, uint8_t max_len,
                   uint8_t *dst, uint8_t *dst_len, struct os_mbuf *om)
{
    ff9c:	b530      	push	{r4, r5, lr}
    ff9e:	b083      	sub	sp, #12
    ffa0:	9d06      	ldr	r5, [sp, #24]
    ffa2:	9c07      	ldr	r4, [sp, #28]
    ffa4:	f88d 0007 	strb.w	r0, [sp, #7]
    ffa8:	f88d 1006 	strb.w	r1, [sp, #6]
    int rc;

    if (om ) {
    ffac:	b1ac      	cbz	r4, ffda <ble_hs_adv_set_hdr+0x3e>
        data_len++;
    ffae:	b2cb      	uxtb	r3, r1
    ffb0:	3301      	adds	r3, #1
    ffb2:	a902      	add	r1, sp, #8
    ffb4:	f801 3d02 	strb.w	r3, [r1, #-2]!
        rc = os_mbuf_append(om, &data_len, sizeof(data_len));
    ffb8:	2201      	movs	r2, #1
    ffba:	4620      	mov	r0, r4
    ffbc:	f7fa f922 	bl	a204 <os_mbuf_append>
        if (rc) {
    ffc0:	4603      	mov	r3, r0
    ffc2:	b110      	cbz	r0, ffca <ble_hs_adv_set_hdr+0x2e>
    dst[*dst_len + 1] = type;

    *dst_len += 2;

    return 0;
}
    ffc4:	4618      	mov	r0, r3
    ffc6:	b003      	add	sp, #12
    ffc8:	bd30      	pop	{r4, r5, pc}
        return os_mbuf_append(om, &type, sizeof(type));
    ffca:	2201      	movs	r2, #1
    ffcc:	f10d 0107 	add.w	r1, sp, #7
    ffd0:	4620      	mov	r0, r4
    ffd2:	f7fa f917 	bl	a204 <os_mbuf_append>
    ffd6:	4603      	mov	r3, r0
    ffd8:	e7f4      	b.n	ffc4 <ble_hs_adv_set_hdr+0x28>
    if (*dst_len + 2 + data_len > max_len) {
    ffda:	782c      	ldrb	r4, [r5, #0]
    ffdc:	1ca0      	adds	r0, r4, #2
    ffde:	f89d 1006 	ldrb.w	r1, [sp, #6]
    ffe2:	4408      	add	r0, r1
    ffe4:	4290      	cmp	r0, r2
    ffe6:	dc0b      	bgt.n	10000 <ble_hs_adv_set_hdr+0x64>
    dst[*dst_len] = data_len + 1;
    ffe8:	3101      	adds	r1, #1
    ffea:	5519      	strb	r1, [r3, r4]
    dst[*dst_len + 1] = type;
    ffec:	782a      	ldrb	r2, [r5, #0]
    ffee:	3201      	adds	r2, #1
    fff0:	f89d 1007 	ldrb.w	r1, [sp, #7]
    fff4:	5499      	strb	r1, [r3, r2]
    *dst_len += 2;
    fff6:	782b      	ldrb	r3, [r5, #0]
    fff8:	3302      	adds	r3, #2
    fffa:	702b      	strb	r3, [r5, #0]
    return 0;
    fffc:	2300      	movs	r3, #0
    fffe:	e7e1      	b.n	ffc4 <ble_hs_adv_set_hdr+0x28>
        return BLE_HS_EMSGSIZE;
   10000:	2304      	movs	r3, #4
   10002:	e7df      	b.n	ffc4 <ble_hs_adv_set_hdr+0x28>

00010004 <ble_hs_adv_set_flat_mbuf>:

static int
ble_hs_adv_set_flat_mbuf(uint8_t type, int data_len, const void *data,
                         uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                         struct os_mbuf *om)
{
   10004:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10008:	b082      	sub	sp, #8
   1000a:	460f      	mov	r7, r1
   1000c:	4691      	mov	r9, r2
   1000e:	469a      	mov	sl, r3
   10010:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10012:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    int rc;

    BLE_HS_DBG_ASSERT(data_len > 0);

    rc = ble_hs_adv_set_hdr(type, data_len, max_len, dst, dst_len, om);
   10014:	b2ce      	uxtb	r6, r1
   10016:	9401      	str	r4, [sp, #4]
   10018:	9500      	str	r5, [sp, #0]
   1001a:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   1001e:	4631      	mov	r1, r6
   10020:	f7ff ffbc 	bl	ff9c <ble_hs_adv_set_hdr>
    if (rc != 0) {
   10024:	4680      	mov	r8, r0
   10026:	b930      	cbnz	r0, 10036 <ble_hs_adv_set_flat_mbuf+0x32>
        return rc;
    }

    if (om) {
   10028:	b14c      	cbz	r4, 1003e <ble_hs_adv_set_flat_mbuf+0x3a>
        return os_mbuf_append(om, data, data_len);
   1002a:	b2ba      	uxth	r2, r7
   1002c:	4649      	mov	r1, r9
   1002e:	4620      	mov	r0, r4
   10030:	f7fa f8e8 	bl	a204 <os_mbuf_append>
   10034:	4680      	mov	r8, r0

    memcpy(dst + *dst_len, data, data_len);
    *dst_len += data_len;

    return 0;
}
   10036:	4640      	mov	r0, r8
   10038:	b002      	add	sp, #8
   1003a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    memcpy(dst + *dst_len, data, data_len);
   1003e:	7828      	ldrb	r0, [r5, #0]
   10040:	463a      	mov	r2, r7
   10042:	4649      	mov	r1, r9
   10044:	4450      	add	r0, sl
   10046:	f7fb fbb1 	bl	b7ac <memcpy>
    *dst_len += data_len;
   1004a:	782b      	ldrb	r3, [r5, #0]
   1004c:	441e      	add	r6, r3
   1004e:	702e      	strb	r6, [r5, #0]
    return 0;
   10050:	e7f1      	b.n	10036 <ble_hs_adv_set_flat_mbuf+0x32>

00010052 <ble_hs_adv_set_array_uuid16>:
static int
ble_hs_adv_set_array_uuid16(uint8_t type, uint8_t num_elems,
                            const ble_uuid16_t *elems, uint8_t *dst,
                            uint8_t *dst_len, uint8_t max_len,
                            struct os_mbuf *om)
{
   10052:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10056:	b082      	sub	sp, #8
   10058:	460e      	mov	r6, r1
   1005a:	4690      	mov	r8, r2
   1005c:	469a      	mov	sl, r3
   1005e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   10060:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * 2, max_len, dst,
   10062:	0049      	lsls	r1, r1, #1
   10064:	9501      	str	r5, [sp, #4]
   10066:	9700      	str	r7, [sp, #0]
   10068:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   1006c:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   10070:	f7ff ff94 	bl	ff9c <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   10074:	4681      	mov	r9, r0
   10076:	b9b8      	cbnz	r0, 100a8 <ble_hs_adv_set_array_uuid16+0x56>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   10078:	4604      	mov	r4, r0
   1007a:	e009      	b.n	10090 <ble_hs_adv_set_array_uuid16+0x3e>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
            if (rc) {
                return rc;
            }
        } else {
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   1007c:	7839      	ldrb	r1, [r7, #0]
   1007e:	4451      	add	r1, sl
   10080:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   10084:	f004 fa4a 	bl	1451c <ble_uuid_flat>
            *dst_len += 2;
   10088:	783b      	ldrb	r3, [r7, #0]
   1008a:	3302      	adds	r3, #2
   1008c:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   1008e:	3401      	adds	r4, #1
   10090:	42a6      	cmp	r6, r4
   10092:	dd09      	ble.n	100a8 <ble_hs_adv_set_array_uuid16+0x56>
        if (om) {
   10094:	2d00      	cmp	r5, #0
   10096:	d0f1      	beq.n	1007c <ble_hs_adv_set_array_uuid16+0x2a>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   10098:	4629      	mov	r1, r5
   1009a:	eb08 0084 	add.w	r0, r8, r4, lsl #2
   1009e:	f004 fa6c 	bl	1457a <ble_uuid_to_mbuf>
            if (rc) {
   100a2:	2800      	cmp	r0, #0
   100a4:	d0f3      	beq.n	1008e <ble_hs_adv_set_array_uuid16+0x3c>
                return rc;
   100a6:	4681      	mov	r9, r0
        }
    }

    return 0;
}
   100a8:	4648      	mov	r0, r9
   100aa:	b002      	add	sp, #8
   100ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000100b0 <ble_hs_adv_set_array_uuid128>:
static int
ble_hs_adv_set_array_uuid128(uint8_t type, uint8_t num_elems,
                             const ble_uuid128_t *elems, uint8_t *dst,
                             uint8_t *dst_len, uint8_t max_len,
                             struct os_mbuf *om)
{
   100b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   100b4:	b082      	sub	sp, #8
   100b6:	460e      	mov	r6, r1
   100b8:	4690      	mov	r8, r2
   100ba:	469a      	mov	sl, r3
   100bc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   100be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * 16, max_len, dst,
   100c0:	0109      	lsls	r1, r1, #4
   100c2:	9501      	str	r5, [sp, #4]
   100c4:	9700      	str	r7, [sp, #0]
   100c6:	f89d 202c 	ldrb.w	r2, [sp, #44]	; 0x2c
   100ca:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
   100ce:	f7ff ff65 	bl	ff9c <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   100d2:	4681      	mov	r9, r0
   100d4:	b9c8      	cbnz	r0, 1010a <ble_hs_adv_set_array_uuid128+0x5a>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   100d6:	4604      	mov	r4, r0
   100d8:	e00a      	b.n	100f0 <ble_hs_adv_set_array_uuid128+0x40>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
            if (rc) {
                return rc;
            }
        } else {
            ble_uuid_flat(&elems[i].u, dst + *dst_len);
   100da:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   100de:	7839      	ldrb	r1, [r7, #0]
   100e0:	4451      	add	r1, sl
   100e2:	4440      	add	r0, r8
   100e4:	f004 fa1a 	bl	1451c <ble_uuid_flat>
            *dst_len += 16;
   100e8:	783b      	ldrb	r3, [r7, #0]
   100ea:	3310      	adds	r3, #16
   100ec:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   100ee:	3401      	adds	r4, #1
   100f0:	42a6      	cmp	r6, r4
   100f2:	dd0a      	ble.n	1010a <ble_hs_adv_set_array_uuid128+0x5a>
        if (om) {
   100f4:	2d00      	cmp	r5, #0
   100f6:	d0f0      	beq.n	100da <ble_hs_adv_set_array_uuid128+0x2a>
            rc = ble_uuid_to_mbuf(&elems[i].u, om);
   100f8:	eb04 1004 	add.w	r0, r4, r4, lsl #4
   100fc:	4629      	mov	r1, r5
   100fe:	4440      	add	r0, r8
   10100:	f004 fa3b 	bl	1457a <ble_uuid_to_mbuf>
            if (rc) {
   10104:	2800      	cmp	r0, #0
   10106:	d0f2      	beq.n	100ee <ble_hs_adv_set_array_uuid128+0x3e>
                return rc;
   10108:	4681      	mov	r9, r0
        }
    }

    return 0;
}
   1010a:	4648      	mov	r0, r9
   1010c:	b002      	add	sp, #8
   1010e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00010112 <ble_hs_adv_set_array_uuid32>:
{
   10112:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10116:	b084      	sub	sp, #16
   10118:	460e      	mov	r6, r1
   1011a:	4690      	mov	r8, r2
   1011c:	469a      	mov	sl, r3
   1011e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   10120:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    rc = ble_hs_adv_set_hdr(type, num_elems * 4, max_len, dst,
   10122:	0089      	lsls	r1, r1, #2
   10124:	9501      	str	r5, [sp, #4]
   10126:	9700      	str	r7, [sp, #0]
   10128:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   1012c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   10130:	f7ff ff34 	bl	ff9c <ble_hs_adv_set_hdr>
    if (rc != 0) {
   10134:	4681      	mov	r9, r0
   10136:	b9e8      	cbnz	r0, 10174 <ble_hs_adv_set_array_uuid32+0x62>
    for (i = 0; i < num_elems; i++) {
   10138:	4604      	mov	r4, r0
   1013a:	e00a      	b.n	10152 <ble_hs_adv_set_array_uuid32+0x40>
            put_le32(dst + *dst_len, elems[i].value);
   1013c:	7838      	ldrb	r0, [r7, #0]
   1013e:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   10142:	6859      	ldr	r1, [r3, #4]
   10144:	4450      	add	r0, sl
   10146:	f00b fd4f 	bl	1bbe8 <put_le32>
            *dst_len += 4;
   1014a:	783b      	ldrb	r3, [r7, #0]
   1014c:	3304      	adds	r3, #4
   1014e:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   10150:	3401      	adds	r4, #1
   10152:	42a6      	cmp	r6, r4
   10154:	dd0e      	ble.n	10174 <ble_hs_adv_set_array_uuid32+0x62>
        if (om) {
   10156:	2d00      	cmp	r5, #0
   10158:	d0f0      	beq.n	1013c <ble_hs_adv_set_array_uuid32+0x2a>
            uuid_le = htole32(elems[i].value);
   1015a:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   1015e:	685b      	ldr	r3, [r3, #4]
   10160:	a904      	add	r1, sp, #16
   10162:	f841 3d04 	str.w	r3, [r1, #-4]!
            rc = os_mbuf_append(om, &uuid_le, sizeof(uuid_le));
   10166:	2204      	movs	r2, #4
   10168:	4628      	mov	r0, r5
   1016a:	f7fa f84b 	bl	a204 <os_mbuf_append>
            if (rc) {
   1016e:	2800      	cmp	r0, #0
   10170:	d0ee      	beq.n	10150 <ble_hs_adv_set_array_uuid32+0x3e>
                return rc;
   10172:	4681      	mov	r9, r0
}
   10174:	4648      	mov	r0, r9
   10176:	b004      	add	sp, #16
   10178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001017c <ble_hs_adv_set_array16>:

static int
ble_hs_adv_set_array16(uint8_t type, uint8_t num_elems, const uint16_t *elems,
                       uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                       struct os_mbuf *om)
{
   1017c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10180:	b084      	sub	sp, #16
   10182:	460e      	mov	r6, r1
   10184:	4690      	mov	r8, r2
   10186:	469a      	mov	sl, r3
   10188:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   1018a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    uint16_t tmp;
    int rc;
    int i;

    rc = ble_hs_adv_set_hdr(type, num_elems * sizeof *elems, max_len, dst,
   1018c:	0049      	lsls	r1, r1, #1
   1018e:	9501      	str	r5, [sp, #4]
   10190:	9700      	str	r7, [sp, #0]
   10192:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
   10196:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
   1019a:	f7ff feff 	bl	ff9c <ble_hs_adv_set_hdr>
                            dst_len, om);
    if (rc != 0) {
   1019e:	4681      	mov	r9, r0
   101a0:	b9d8      	cbnz	r0, 101da <ble_hs_adv_set_array16+0x5e>
        return rc;
    }

    for (i = 0; i < num_elems; i++) {
   101a2:	4604      	mov	r4, r0
   101a4:	e009      	b.n	101ba <ble_hs_adv_set_array16+0x3e>
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
            if (rc) {
                return rc;
            }
        } else {
            put_le16(dst + *dst_len, elems[i]);
   101a6:	7838      	ldrb	r0, [r7, #0]
   101a8:	f838 1014 	ldrh.w	r1, [r8, r4, lsl #1]
   101ac:	4450      	add	r0, sl
   101ae:	f00b fd17 	bl	1bbe0 <put_le16>
            *dst_len += sizeof elems[i];
   101b2:	783b      	ldrb	r3, [r7, #0]
   101b4:	3302      	adds	r3, #2
   101b6:	703b      	strb	r3, [r7, #0]
    for (i = 0; i < num_elems; i++) {
   101b8:	3401      	adds	r4, #1
   101ba:	42a6      	cmp	r6, r4
   101bc:	dd0d      	ble.n	101da <ble_hs_adv_set_array16+0x5e>
        if (om) {
   101be:	2d00      	cmp	r5, #0
   101c0:	d0f1      	beq.n	101a6 <ble_hs_adv_set_array16+0x2a>
            tmp = htole16(elems[i]);
   101c2:	f838 3014 	ldrh.w	r3, [r8, r4, lsl #1]
   101c6:	a904      	add	r1, sp, #16
   101c8:	f821 3d02 	strh.w	r3, [r1, #-2]!
            rc = os_mbuf_append(om, &tmp, sizeof(tmp));
   101cc:	2202      	movs	r2, #2
   101ce:	4628      	mov	r0, r5
   101d0:	f7fa f818 	bl	a204 <os_mbuf_append>
            if (rc) {
   101d4:	2800      	cmp	r0, #0
   101d6:	d0ef      	beq.n	101b8 <ble_hs_adv_set_array16+0x3c>
                return rc;
   101d8:	4681      	mov	r9, r0
        }
    }

    return 0;
}
   101da:	4648      	mov	r0, r9
   101dc:	b004      	add	sp, #16
   101de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000101e2 <adv_set_fields>:

static int
adv_set_fields(const struct ble_hs_adv_fields *adv_fields,
                      uint8_t *dst, uint8_t *dst_len, uint8_t max_len,
                      struct os_mbuf *om)
{
   101e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   101e6:	b086      	sub	sp, #24
   101e8:	4604      	mov	r4, r0
   101ea:	460d      	mov	r5, r1
   101ec:	4690      	mov	r8, r2
   101ee:	461e      	mov	r6, r3
   101f0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    uint8_t type;
    int8_t tx_pwr_lvl;
    uint8_t dst_len_local;
    int rc;

    dst_len_local = 0;
   101f2:	2300      	movs	r3, #0
   101f4:	f88d 3016 	strb.w	r3, [sp, #22]
     * 2. Explicitly specify the value (flags != 0).
     *
     * Note: The CSS prohibits advertising a flags value of 0, so this method
     * of specifying option 1 vs. 2 is sound.
     */
    if (adv_fields->flags != 0) {
   101f8:	7803      	ldrb	r3, [r0, #0]
   101fa:	2b00      	cmp	r3, #0
   101fc:	f040 80be 	bne.w	1037c <adv_set_fields+0x19a>
            return rc;
        }
    }

    /*** 0x02,0x03 - 16-bit service class UUIDs. */
    if (adv_fields->uuids16 != NULL && adv_fields->num_uuids16) {
   10200:	6862      	ldr	r2, [r4, #4]
   10202:	b19a      	cbz	r2, 1022c <adv_set_fields+0x4a>
   10204:	7a21      	ldrb	r1, [r4, #8]
   10206:	b189      	cbz	r1, 1022c <adv_set_fields+0x4a>
        if (adv_fields->uuids16_is_complete) {
   10208:	7a63      	ldrb	r3, [r4, #9]
   1020a:	f013 0f01 	tst.w	r3, #1
   1020e:	f000 80c8 	beq.w	103a2 <adv_set_fields+0x1c0>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS16;
   10212:	2003      	movs	r0, #3
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
        }

        rc = ble_hs_adv_set_array_uuid16(type, adv_fields->num_uuids16,
   10214:	9702      	str	r7, [sp, #8]
   10216:	9601      	str	r6, [sp, #4]
   10218:	f10d 0316 	add.w	r3, sp, #22
   1021c:	9300      	str	r3, [sp, #0]
   1021e:	462b      	mov	r3, r5
   10220:	f7ff ff17 	bl	10052 <ble_hs_adv_set_array_uuid16>
                                         adv_fields->uuids16, dst, &dst_len_local,
                                         max_len, om);
        if (rc != 0) {
   10224:	4603      	mov	r3, r0
   10226:	2800      	cmp	r0, #0
   10228:	f040 80b7 	bne.w	1039a <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x04,0x05 - 32-bit service class UUIDs. */
    if (adv_fields->uuids32 != NULL && adv_fields->num_uuids32) {
   1022c:	68e2      	ldr	r2, [r4, #12]
   1022e:	b19a      	cbz	r2, 10258 <adv_set_fields+0x76>
   10230:	7c21      	ldrb	r1, [r4, #16]
   10232:	b189      	cbz	r1, 10258 <adv_set_fields+0x76>
        if (adv_fields->uuids32_is_complete) {
   10234:	7c63      	ldrb	r3, [r4, #17]
   10236:	f013 0f01 	tst.w	r3, #1
   1023a:	f000 80b4 	beq.w	103a6 <adv_set_fields+0x1c4>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS32;
   1023e:	2005      	movs	r0, #5
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
        }

        rc = ble_hs_adv_set_array_uuid32(type, adv_fields->num_uuids32,
   10240:	9702      	str	r7, [sp, #8]
   10242:	9601      	str	r6, [sp, #4]
   10244:	f10d 0316 	add.w	r3, sp, #22
   10248:	9300      	str	r3, [sp, #0]
   1024a:	462b      	mov	r3, r5
   1024c:	f7ff ff61 	bl	10112 <ble_hs_adv_set_array_uuid32>
                                         adv_fields->uuids32, dst, &dst_len_local,
                                         max_len, om);
        if (rc != 0) {
   10250:	4603      	mov	r3, r0
   10252:	2800      	cmp	r0, #0
   10254:	f040 80a1 	bne.w	1039a <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x06,0x07 - 128-bit service class UUIDs. */
    if (adv_fields->uuids128 != NULL && adv_fields->num_uuids128 > 0) {
   10258:	6962      	ldr	r2, [r4, #20]
   1025a:	b19a      	cbz	r2, 10284 <adv_set_fields+0xa2>
   1025c:	7e21      	ldrb	r1, [r4, #24]
   1025e:	b189      	cbz	r1, 10284 <adv_set_fields+0xa2>
        if (adv_fields->uuids128_is_complete) {
   10260:	7e63      	ldrb	r3, [r4, #25]
   10262:	f013 0f01 	tst.w	r3, #1
   10266:	f000 80a0 	beq.w	103aa <adv_set_fields+0x1c8>
            type = BLE_HS_ADV_TYPE_COMP_UUIDS128;
   1026a:	2007      	movs	r0, #7
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
        }

        rc = ble_hs_adv_set_array_uuid128(type, adv_fields->num_uuids128,
   1026c:	9702      	str	r7, [sp, #8]
   1026e:	9601      	str	r6, [sp, #4]
   10270:	f10d 0316 	add.w	r3, sp, #22
   10274:	9300      	str	r3, [sp, #0]
   10276:	462b      	mov	r3, r5
   10278:	f7ff ff1a 	bl	100b0 <ble_hs_adv_set_array_uuid128>
                                          adv_fields->uuids128, dst, &dst_len_local,
                                          max_len, om);
        if (rc != 0) {
   1027c:	4603      	mov	r3, r0
   1027e:	2800      	cmp	r0, #0
   10280:	f040 808b 	bne.w	1039a <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x08,0x09 - Local name. */
    if (adv_fields->name != NULL && adv_fields->name_len > 0) {
   10284:	69e2      	ldr	r2, [r4, #28]
   10286:	b1a2      	cbz	r2, 102b2 <adv_set_fields+0xd0>
   10288:	f894 1020 	ldrb.w	r1, [r4, #32]
   1028c:	b189      	cbz	r1, 102b2 <adv_set_fields+0xd0>
        if (adv_fields->name_is_complete) {
   1028e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
   10292:	f013 0f01 	tst.w	r3, #1
   10296:	f000 808a 	beq.w	103ae <adv_set_fields+0x1cc>
            type = BLE_HS_ADV_TYPE_COMP_NAME;
   1029a:	2009      	movs	r0, #9
        } else {
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
        }

        rc = ble_hs_adv_set_flat_mbuf(type, adv_fields->name_len,
   1029c:	9702      	str	r7, [sp, #8]
   1029e:	9601      	str	r6, [sp, #4]
   102a0:	f10d 0316 	add.w	r3, sp, #22
   102a4:	9300      	str	r3, [sp, #0]
   102a6:	462b      	mov	r3, r5
   102a8:	f7ff feac 	bl	10004 <ble_hs_adv_set_flat_mbuf>
                                      adv_fields->name, dst, &dst_len_local, max_len,
                                      om);
        if (rc != 0) {
   102ac:	4603      	mov	r3, r0
   102ae:	2800      	cmp	r0, #0
   102b0:	d173      	bne.n	1039a <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x0a - Tx power level. */
    if (adv_fields->tx_pwr_lvl_is_present) {
   102b2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
   102b6:	f013 0f01 	tst.w	r3, #1
   102ba:	d015      	beq.n	102e8 <adv_set_fields+0x106>
        /* Read the power level from the controller if requested; otherwise use
         * the explicitly specified value.
         */
        if (adv_fields->tx_pwr_lvl == BLE_HS_ADV_TX_PWR_LVL_AUTO) {
   102bc:	f994 3022 	ldrsb.w	r3, [r4, #34]	; 0x22
   102c0:	f113 0f80 	cmn.w	r3, #128	; 0x80
   102c4:	d075      	beq.n	103b2 <adv_set_fields+0x1d0>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
            if (rc != 0) {
                return rc;
            }
        } else {
            tx_pwr_lvl = adv_fields->tx_pwr_lvl;
   102c6:	f88d 3017 	strb.w	r3, [sp, #23]
        }

        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_TX_PWR_LVL, 1,
   102ca:	9702      	str	r7, [sp, #8]
   102cc:	9601      	str	r6, [sp, #4]
   102ce:	f10d 0316 	add.w	r3, sp, #22
   102d2:	9300      	str	r3, [sp, #0]
   102d4:	462b      	mov	r3, r5
   102d6:	f10d 0217 	add.w	r2, sp, #23
   102da:	2101      	movs	r1, #1
   102dc:	200a      	movs	r0, #10
   102de:	f7ff fe91 	bl	10004 <ble_hs_adv_set_flat_mbuf>
                                      &tx_pwr_lvl, dst, &dst_len_local, max_len, om);
        if (rc != 0) {
   102e2:	4603      	mov	r3, r0
   102e4:	2800      	cmp	r0, #0
   102e6:	d158      	bne.n	1039a <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x12 - Slave connection interval range. */
    if (adv_fields->slave_itvl_range != NULL) {
   102e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   102ea:	b162      	cbz	r2, 10306 <adv_set_fields+0x124>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SLAVE_ITVL_RANGE,
   102ec:	9702      	str	r7, [sp, #8]
   102ee:	9601      	str	r6, [sp, #4]
   102f0:	f10d 0316 	add.w	r3, sp, #22
   102f4:	9300      	str	r3, [sp, #0]
   102f6:	462b      	mov	r3, r5
   102f8:	2104      	movs	r1, #4
   102fa:	2012      	movs	r0, #18
   102fc:	f7ff fe82 	bl	10004 <ble_hs_adv_set_flat_mbuf>
                                      BLE_HS_ADV_SLAVE_ITVL_RANGE_LEN,
                                      adv_fields->slave_itvl_range, dst,
                                      &dst_len_local, max_len, om);
        if (rc != 0) {
   10300:	4603      	mov	r3, r0
   10302:	2800      	cmp	r0, #0
   10304:	d149      	bne.n	1039a <adv_set_fields+0x1b8>
            return rc;
        }
    }

    /*** 0x16 - Service data - 16-bit UUID. */
    if (adv_fields->svc_data_uuid16 != NULL && adv_fields->svc_data_uuid16_len) {
   10306:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10308:	b11a      	cbz	r2, 10312 <adv_set_fields+0x130>
   1030a:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
   1030e:	2900      	cmp	r1, #0
   10310:	d157      	bne.n	103c2 <adv_set_fields+0x1e0>
            return rc;
        }
    }

    /*** 0x17 - Public target address. */
    if (adv_fields->public_tgt_addr != NULL &&
   10312:	6b22      	ldr	r2, [r4, #48]	; 0x30
   10314:	b11a      	cbz	r2, 1031e <adv_set_fields+0x13c>
        adv_fields->num_public_tgt_addrs != 0) {
   10316:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
    if (adv_fields->public_tgt_addr != NULL &&
   1031a:	2b00      	cmp	r3, #0
   1031c:	d15e      	bne.n	103dc <adv_set_fields+0x1fa>
            return rc;
        }
    }

    /*** 0x19 - Appearance. */
    if (adv_fields->appearance_is_present) {
   1031e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   10322:	f013 0f01 	tst.w	r3, #1
   10326:	d169      	bne.n	103fc <adv_set_fields+0x21a>
            return rc;
        }
    }

    /*** 0x1a - Advertising interval. */
    if (adv_fields->adv_itvl_is_present) {
   10328:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1032c:	f013 0f01 	tst.w	r3, #1
   10330:	d174      	bne.n	1041c <adv_set_fields+0x23a>
            return rc;
        }
    }

    /*** 0x20 - Service data - 32-bit UUID. */
    if (adv_fields->svc_data_uuid32 != NULL && adv_fields->svc_data_uuid32_len) {
   10332:	6c22      	ldr	r2, [r4, #64]	; 0x40
   10334:	b11a      	cbz	r2, 1033e <adv_set_fields+0x15c>
   10336:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
   1033a:	2900      	cmp	r1, #0
   1033c:	d17f      	bne.n	1043e <adv_set_fields+0x25c>
            return rc;
        }
    }

    /*** 0x21 - Service data - 128-bit UUID. */
    if (adv_fields->svc_data_uuid128 != NULL && adv_fields->svc_data_uuid128_len) {
   1033e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   10340:	b122      	cbz	r2, 1034c <adv_set_fields+0x16a>
   10342:	f894 104c 	ldrb.w	r1, [r4, #76]	; 0x4c
   10346:	2900      	cmp	r1, #0
   10348:	f040 8087 	bne.w	1045a <adv_set_fields+0x278>
            return rc;
        }
    }

    /*** 0x24 - URI. */
    if (adv_fields->uri != NULL && adv_fields->uri_len) {
   1034c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1034e:	b122      	cbz	r2, 1035a <adv_set_fields+0x178>
   10350:	f894 1054 	ldrb.w	r1, [r4, #84]	; 0x54
   10354:	2900      	cmp	r1, #0
   10356:	f040 808e 	bne.w	10476 <adv_set_fields+0x294>
            return rc;
        }
    }

    /*** 0xff - Manufacturer specific data. */
    if ((adv_fields->mfg_data != NULL) && (adv_fields->mfg_data_len >= 2)) {
   1035a:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1035c:	b122      	cbz	r2, 10368 <adv_set_fields+0x186>
   1035e:	f894 105c 	ldrb.w	r1, [r4, #92]	; 0x5c
   10362:	2901      	cmp	r1, #1
   10364:	f200 8095 	bhi.w	10492 <adv_set_fields+0x2b0>
        if (rc != 0) {
            return rc;
        }
    }

    if (dst_len) {
   10368:	f1b8 0f00 	cmp.w	r8, #0
   1036c:	f000 809f 	beq.w	104ae <adv_set_fields+0x2cc>
        *dst_len = dst_len_local;
   10370:	f89d 3016 	ldrb.w	r3, [sp, #22]
   10374:	f888 3000 	strb.w	r3, [r8]
    }

    return 0;
   10378:	2300      	movs	r3, #0
   1037a:	e00e      	b.n	1039a <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_FLAGS, 1,
   1037c:	9702      	str	r7, [sp, #8]
   1037e:	9601      	str	r6, [sp, #4]
   10380:	f10d 0316 	add.w	r3, sp, #22
   10384:	9300      	str	r3, [sp, #0]
   10386:	460b      	mov	r3, r1
   10388:	4602      	mov	r2, r0
   1038a:	2101      	movs	r1, #1
   1038c:	4608      	mov	r0, r1
   1038e:	f7ff fe39 	bl	10004 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   10392:	4603      	mov	r3, r0
   10394:	2800      	cmp	r0, #0
   10396:	f43f af33 	beq.w	10200 <adv_set_fields+0x1e>
}
   1039a:	4618      	mov	r0, r3
   1039c:	b006      	add	sp, #24
   1039e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS16;
   103a2:	2002      	movs	r0, #2
   103a4:	e736      	b.n	10214 <adv_set_fields+0x32>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS32;
   103a6:	2004      	movs	r0, #4
   103a8:	e74a      	b.n	10240 <adv_set_fields+0x5e>
            type = BLE_HS_ADV_TYPE_INCOMP_UUIDS128;
   103aa:	2006      	movs	r0, #6
   103ac:	e75e      	b.n	1026c <adv_set_fields+0x8a>
            type = BLE_HS_ADV_TYPE_INCOMP_NAME;
   103ae:	2008      	movs	r0, #8
   103b0:	e774      	b.n	1029c <adv_set_fields+0xba>
            rc = ble_hs_hci_util_read_adv_tx_pwr(&tx_pwr_lvl);
   103b2:	f10d 0017 	add.w	r0, sp, #23
   103b6:	f000 ff58 	bl	1126a <ble_hs_hci_util_read_adv_tx_pwr>
            if (rc != 0) {
   103ba:	4603      	mov	r3, r0
   103bc:	2800      	cmp	r0, #0
   103be:	d084      	beq.n	102ca <adv_set_fields+0xe8>
   103c0:	e7eb      	b.n	1039a <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID16,
   103c2:	9702      	str	r7, [sp, #8]
   103c4:	9601      	str	r6, [sp, #4]
   103c6:	f10d 0316 	add.w	r3, sp, #22
   103ca:	9300      	str	r3, [sp, #0]
   103cc:	462b      	mov	r3, r5
   103ce:	2016      	movs	r0, #22
   103d0:	f7ff fe18 	bl	10004 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   103d4:	4603      	mov	r3, r0
   103d6:	2800      	cmp	r0, #0
   103d8:	d09b      	beq.n	10312 <adv_set_fields+0x130>
   103da:	e7de      	b.n	1039a <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_PUBLIC_TGT_ADDR,
   103dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   103e0:	0059      	lsls	r1, r3, #1
   103e2:	9702      	str	r7, [sp, #8]
   103e4:	9601      	str	r6, [sp, #4]
   103e6:	f10d 0316 	add.w	r3, sp, #22
   103ea:	9300      	str	r3, [sp, #0]
   103ec:	462b      	mov	r3, r5
   103ee:	2017      	movs	r0, #23
   103f0:	f7ff fe08 	bl	10004 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   103f4:	4603      	mov	r3, r0
   103f6:	2800      	cmp	r0, #0
   103f8:	d091      	beq.n	1031e <adv_set_fields+0x13c>
   103fa:	e7ce      	b.n	1039a <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_APPEARANCE,
   103fc:	9702      	str	r7, [sp, #8]
   103fe:	9601      	str	r6, [sp, #4]
   10400:	f10d 0316 	add.w	r3, sp, #22
   10404:	9300      	str	r3, [sp, #0]
   10406:	462b      	mov	r3, r5
   10408:	f104 0236 	add.w	r2, r4, #54	; 0x36
   1040c:	2102      	movs	r1, #2
   1040e:	2019      	movs	r0, #25
   10410:	f7ff fdf8 	bl	10004 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   10414:	4603      	mov	r3, r0
   10416:	2800      	cmp	r0, #0
   10418:	d086      	beq.n	10328 <adv_set_fields+0x146>
   1041a:	e7be      	b.n	1039a <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_array16(BLE_HS_ADV_TYPE_ADV_ITVL, 1,
   1041c:	9702      	str	r7, [sp, #8]
   1041e:	9601      	str	r6, [sp, #4]
   10420:	f10d 0316 	add.w	r3, sp, #22
   10424:	9300      	str	r3, [sp, #0]
   10426:	462b      	mov	r3, r5
   10428:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   1042c:	2101      	movs	r1, #1
   1042e:	201a      	movs	r0, #26
   10430:	f7ff fea4 	bl	1017c <ble_hs_adv_set_array16>
        if (rc != 0) {
   10434:	4603      	mov	r3, r0
   10436:	2800      	cmp	r0, #0
   10438:	f43f af7b 	beq.w	10332 <adv_set_fields+0x150>
   1043c:	e7ad      	b.n	1039a <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID32,
   1043e:	9702      	str	r7, [sp, #8]
   10440:	9601      	str	r6, [sp, #4]
   10442:	f10d 0316 	add.w	r3, sp, #22
   10446:	9300      	str	r3, [sp, #0]
   10448:	462b      	mov	r3, r5
   1044a:	2020      	movs	r0, #32
   1044c:	f7ff fdda 	bl	10004 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   10450:	4603      	mov	r3, r0
   10452:	2800      	cmp	r0, #0
   10454:	f43f af73 	beq.w	1033e <adv_set_fields+0x15c>
   10458:	e79f      	b.n	1039a <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_SVC_DATA_UUID128,
   1045a:	9702      	str	r7, [sp, #8]
   1045c:	9601      	str	r6, [sp, #4]
   1045e:	f10d 0316 	add.w	r3, sp, #22
   10462:	9300      	str	r3, [sp, #0]
   10464:	462b      	mov	r3, r5
   10466:	2021      	movs	r0, #33	; 0x21
   10468:	f7ff fdcc 	bl	10004 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   1046c:	4603      	mov	r3, r0
   1046e:	2800      	cmp	r0, #0
   10470:	f43f af6c 	beq.w	1034c <adv_set_fields+0x16a>
   10474:	e791      	b.n	1039a <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_URI, adv_fields->uri_len,
   10476:	9702      	str	r7, [sp, #8]
   10478:	9601      	str	r6, [sp, #4]
   1047a:	f10d 0316 	add.w	r3, sp, #22
   1047e:	9300      	str	r3, [sp, #0]
   10480:	462b      	mov	r3, r5
   10482:	2024      	movs	r0, #36	; 0x24
   10484:	f7ff fdbe 	bl	10004 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   10488:	4603      	mov	r3, r0
   1048a:	2800      	cmp	r0, #0
   1048c:	f43f af65 	beq.w	1035a <adv_set_fields+0x178>
   10490:	e783      	b.n	1039a <adv_set_fields+0x1b8>
        rc = ble_hs_adv_set_flat_mbuf(BLE_HS_ADV_TYPE_MFG_DATA,
   10492:	9702      	str	r7, [sp, #8]
   10494:	9601      	str	r6, [sp, #4]
   10496:	f10d 0316 	add.w	r3, sp, #22
   1049a:	9300      	str	r3, [sp, #0]
   1049c:	462b      	mov	r3, r5
   1049e:	20ff      	movs	r0, #255	; 0xff
   104a0:	f7ff fdb0 	bl	10004 <ble_hs_adv_set_flat_mbuf>
        if (rc != 0) {
   104a4:	4603      	mov	r3, r0
   104a6:	2800      	cmp	r0, #0
   104a8:	f43f af5e 	beq.w	10368 <adv_set_fields+0x186>
   104ac:	e775      	b.n	1039a <adv_set_fields+0x1b8>
    return 0;
   104ae:	2300      	movs	r3, #0
   104b0:	e773      	b.n	1039a <adv_set_fields+0x1b8>

000104b2 <ble_hs_adv_set_fields>:
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_adv_set_fields(const struct ble_hs_adv_fields *adv_fields,
                      uint8_t *dst, uint8_t *dst_len, uint8_t max_len)
{
   104b2:	b510      	push	{r4, lr}
   104b4:	b082      	sub	sp, #8
#if !NIMBLE_BLE_ADVERTISE
    return BLE_HS_ENOTSUP;
#endif

    return adv_set_fields(adv_fields, dst, dst_len, max_len, NULL);
   104b6:	2400      	movs	r4, #0
   104b8:	9400      	str	r4, [sp, #0]
   104ba:	f7ff fe92 	bl	101e2 <adv_set_fields>
}
   104be:	b002      	add	sp, #8
   104c0:	bd10      	pop	{r4, pc}

000104c2 <ble_hs_atomic_conn_delete>:

#include "ble_hs_priv.h"

int
ble_hs_atomic_conn_delete(uint16_t conn_handle)
{
   104c2:	b510      	push	{r4, lr}
   104c4:	4604      	mov	r4, r0
    struct ble_hs_conn *conn;

    ble_hs_lock();
   104c6:	f7ff faed 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   104ca:	4620      	mov	r0, r4
   104cc:	f000 f8f4 	bl	106b8 <ble_hs_conn_find>
    if (conn != NULL) {
   104d0:	4604      	mov	r4, r0
   104d2:	b120      	cbz	r0, 104de <ble_hs_atomic_conn_delete+0x1c>
        ble_hs_conn_remove(conn);
   104d4:	f000 f8e0 	bl	10698 <ble_hs_conn_remove>
#if MYNEWT_VAL(BLE_PERIODIC_ADV_SYNC_TRANSFER)
        if (conn->psync) {
            ble_hs_periodic_sync_free(conn->psync);
        }
#endif
        ble_hs_conn_free(conn);
   104d8:	4620      	mov	r0, r4
   104da:	f000 f87f 	bl	105dc <ble_hs_conn_free>

    }
    ble_hs_unlock();
   104de:	f7ff fae5 	bl	faac <ble_hs_unlock>

    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   104e2:	b10c      	cbz	r4, 104e8 <ble_hs_atomic_conn_delete+0x26>
   104e4:	2000      	movs	r0, #0
}
   104e6:	bd10      	pop	{r4, pc}
    return conn != NULL ? 0 : BLE_HS_ENOTCONN;
   104e8:	2007      	movs	r0, #7
   104ea:	e7fc      	b.n	104e6 <ble_hs_atomic_conn_delete+0x24>

000104ec <ble_hs_atomic_conn_flags>:
    ble_hs_unlock();
}

int
ble_hs_atomic_conn_flags(uint16_t conn_handle, ble_hs_conn_flags_t *out_flags)
{
   104ec:	b538      	push	{r3, r4, r5, lr}
   104ee:	4605      	mov	r5, r0
   104f0:	460c      	mov	r4, r1
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   104f2:	f7ff fad7 	bl	faa4 <ble_hs_lock>

    conn = ble_hs_conn_find(conn_handle);
   104f6:	4628      	mov	r0, r5
   104f8:	f000 f8de 	bl	106b8 <ble_hs_conn_find>
    if (conn == NULL) {
   104fc:	b140      	cbz	r0, 10510 <ble_hs_atomic_conn_flags+0x24>
        rc = BLE_HS_ENOTCONN;
    } else {
        rc = 0;
        if (out_flags != NULL) {
   104fe:	b14c      	cbz	r4, 10514 <ble_hs_atomic_conn_flags+0x28>
            *out_flags = conn->bhc_flags;
   10500:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   10504:	7023      	strb	r3, [r4, #0]
        rc = 0;
   10506:	2400      	movs	r4, #0
        }
    }

    ble_hs_unlock();
   10508:	f7ff fad0 	bl	faac <ble_hs_unlock>

    return rc;
}
   1050c:	4620      	mov	r0, r4
   1050e:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTCONN;
   10510:	2407      	movs	r4, #7
   10512:	e7f9      	b.n	10508 <ble_hs_atomic_conn_flags+0x1c>
        rc = 0;
   10514:	2400      	movs	r4, #0
   10516:	e7f7      	b.n	10508 <ble_hs_atomic_conn_flags+0x1c>

00010518 <ble_hs_atomic_first_conn_handle>:
    return rc;
}

uint16_t
ble_hs_atomic_first_conn_handle(void)
{
   10518:	b510      	push	{r4, lr}
    const struct ble_hs_conn *conn;
    uint16_t conn_handle;

    ble_hs_lock();
   1051a:	f7ff fac3 	bl	faa4 <ble_hs_lock>

    conn = ble_hs_conn_first();
   1051e:	f000 f8fd 	bl	1071c <ble_hs_conn_first>
    if (conn != NULL) {
   10522:	b120      	cbz	r0, 1052e <ble_hs_atomic_first_conn_handle+0x16>
        conn_handle = conn->bhc_handle;
   10524:	8884      	ldrh	r4, [r0, #4]
    } else {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
    }

    ble_hs_unlock();
   10526:	f7ff fac1 	bl	faac <ble_hs_unlock>

    return conn_handle;
}
   1052a:	4620      	mov	r0, r4
   1052c:	bd10      	pop	{r4, pc}
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   1052e:	f64f 74ff 	movw	r4, #65535	; 0xffff
   10532:	e7f8      	b.n	10526 <ble_hs_atomic_first_conn_handle+0xe>

00010534 <ble_hs_conn_can_alloc>:

static const uint8_t ble_hs_conn_null_addr[6];

int
ble_hs_conn_can_alloc(void)
{
   10534:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif

    return ble_hs_conn_pool.mp_num_free >= 1 &&
   10536:	4b09      	ldr	r3, [pc, #36]	; (1055c <ble_hs_conn_can_alloc+0x28>)
   10538:	88db      	ldrh	r3, [r3, #6]
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   1053a:	b15b      	cbz	r3, 10554 <ble_hs_conn_can_alloc+0x20>
   1053c:	4b08      	ldr	r3, [pc, #32]	; (10560 <ble_hs_conn_can_alloc+0x2c>)
   1053e:	88db      	ldrh	r3, [r3, #6]
    return ble_hs_conn_pool.mp_num_free >= 1 &&
   10540:	2b02      	cmp	r3, #2
   10542:	d801      	bhi.n	10548 <ble_hs_conn_can_alloc+0x14>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   10544:	2300      	movs	r3, #0
   10546:	e006      	b.n	10556 <ble_hs_conn_can_alloc+0x22>
           ble_gatts_conn_can_alloc();
   10548:	f7ff f82e 	bl	f5a8 <ble_gatts_conn_can_alloc>
           ble_l2cap_chan_pool.mp_num_free >= BLE_HS_CONN_MIN_CHANS &&
   1054c:	4603      	mov	r3, r0
   1054e:	b110      	cbz	r0, 10556 <ble_hs_conn_can_alloc+0x22>
   10550:	2301      	movs	r3, #1
   10552:	e000      	b.n	10556 <ble_hs_conn_can_alloc+0x22>
   10554:	2300      	movs	r3, #0
}
   10556:	4618      	mov	r0, r3
   10558:	bd08      	pop	{r3, pc}
   1055a:	bf00      	nop
   1055c:	200073f0 	.word	0x200073f0
   10560:	20007628 	.word	0x20007628

00010564 <ble_hs_conn_chan_find_by_scid>:
    return NULL;
#endif

    struct ble_l2cap_chan *chan;

    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   10564:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   10566:	b128      	cbz	r0, 10574 <ble_hs_conn_chan_find_by_scid+0x10>
        if (chan->scid == cid) {
   10568:	8903      	ldrh	r3, [r0, #8]
   1056a:	428b      	cmp	r3, r1
   1056c:	d004      	beq.n	10578 <ble_hs_conn_chan_find_by_scid+0x14>
            return chan;
        }
        if (chan->scid > cid) {
   1056e:	d802      	bhi.n	10576 <ble_hs_conn_chan_find_by_scid+0x12>
    SLIST_FOREACH(chan, &conn->bhc_channels, next) {
   10570:	6800      	ldr	r0, [r0, #0]
   10572:	e7f8      	b.n	10566 <ble_hs_conn_chan_find_by_scid+0x2>
   10574:	4770      	bx	lr
            return NULL;
   10576:	2000      	movs	r0, #0
        }
    }

    return NULL;
}
   10578:	4770      	bx	lr

0001057a <ble_hs_conn_chan_insert>:
    return false;
}

int
ble_hs_conn_chan_insert(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   1057a:	b470      	push	{r4, r5, r6}

    struct ble_l2cap_chan *prev;
    struct ble_l2cap_chan *cur;

    prev = NULL;
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   1057c:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
   1057e:	4633      	mov	r3, r6
    prev = NULL;
   10580:	2500      	movs	r5, #0
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   10582:	b13b      	cbz	r3, 10594 <ble_hs_conn_chan_insert+0x1a>
        if (cur->scid == chan->scid) {
   10584:	891c      	ldrh	r4, [r3, #8]
   10586:	890a      	ldrh	r2, [r1, #8]
   10588:	4294      	cmp	r4, r2
   1058a:	d00e      	beq.n	105aa <ble_hs_conn_chan_insert+0x30>
            return BLE_HS_EALREADY;
        }
        if (cur->scid > chan->scid) {
   1058c:	d802      	bhi.n	10594 <ble_hs_conn_chan_insert+0x1a>
            break;
        }

        prev = cur;
   1058e:	461d      	mov	r5, r3
    SLIST_FOREACH(cur, &conn->bhc_channels, next) {
   10590:	681b      	ldr	r3, [r3, #0]
   10592:	e7f6      	b.n	10582 <ble_hs_conn_chan_insert+0x8>
    }

    if (prev == NULL) {
   10594:	b12d      	cbz	r5, 105a2 <ble_hs_conn_chan_insert+0x28>
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
    } else {
        SLIST_INSERT_AFTER(prev, chan, next);
   10596:	682b      	ldr	r3, [r5, #0]
   10598:	600b      	str	r3, [r1, #0]
   1059a:	6029      	str	r1, [r5, #0]
    }

    return 0;
   1059c:	2000      	movs	r0, #0
}
   1059e:	bc70      	pop	{r4, r5, r6}
   105a0:	4770      	bx	lr
        SLIST_INSERT_HEAD(&conn->bhc_channels, chan, next);
   105a2:	600e      	str	r6, [r1, #0]
   105a4:	62c1      	str	r1, [r0, #44]	; 0x2c
    return 0;
   105a6:	2000      	movs	r0, #0
   105a8:	e7f9      	b.n	1059e <ble_hs_conn_chan_insert+0x24>
            return BLE_HS_EALREADY;
   105aa:	2002      	movs	r0, #2
   105ac:	e7f7      	b.n	1059e <ble_hs_conn_chan_insert+0x24>

000105ae <ble_hs_conn_delete_chan>:
    return NULL;
}

void
ble_hs_conn_delete_chan(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan)
{
   105ae:	b508      	push	{r3, lr}
    if (conn->bhc_rx_chan == chan) {
   105b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
   105b2:	428b      	cmp	r3, r1
   105b4:	d005      	beq.n	105c2 <ble_hs_conn_delete_chan+0x14>
        conn->bhc_rx_chan = NULL;
    }

    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   105b6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   105b8:	428a      	cmp	r2, r1
   105ba:	d106      	bne.n	105ca <ble_hs_conn_delete_chan+0x1c>
   105bc:	6813      	ldr	r3, [r2, #0]
   105be:	62c3      	str	r3, [r0, #44]	; 0x2c
   105c0:	e008      	b.n	105d4 <ble_hs_conn_delete_chan+0x26>
        conn->bhc_rx_chan = NULL;
   105c2:	2300      	movs	r3, #0
   105c4:	6303      	str	r3, [r0, #48]	; 0x30
   105c6:	e7f6      	b.n	105b6 <ble_hs_conn_delete_chan+0x8>
    SLIST_REMOVE(&conn->bhc_channels, chan, ble_l2cap_chan, next);
   105c8:	461a      	mov	r2, r3
   105ca:	6813      	ldr	r3, [r2, #0]
   105cc:	428b      	cmp	r3, r1
   105ce:	d1fb      	bne.n	105c8 <ble_hs_conn_delete_chan+0x1a>
   105d0:	681b      	ldr	r3, [r3, #0]
   105d2:	6013      	str	r3, [r2, #0]
    ble_l2cap_chan_free(conn, chan);
   105d4:	f001 fb38 	bl	11c48 <ble_l2cap_chan_free>
}
   105d8:	bd08      	pop	{r3, pc}
	...

000105dc <ble_hs_conn_free>:

    struct ble_l2cap_chan *chan;
    struct os_mbuf_pkthdr *omp;
    int rc;

    if (conn == NULL) {
   105dc:	b1f0      	cbz	r0, 1061c <ble_hs_conn_free+0x40>
{
   105de:	b510      	push	{r4, lr}
   105e0:	4604      	mov	r4, r0
        return;
    }

    ble_att_svr_prep_clear(&conn->bhc_att_svr.basc_prep_list);
   105e2:	3044      	adds	r0, #68	; 0x44
   105e4:	f005 fb57 	bl	15c96 <ble_att_svr_prep_clear>

    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   105e8:	e002      	b.n	105f0 <ble_hs_conn_free+0x14>
        ble_hs_conn_delete_chan(conn, chan);
   105ea:	4620      	mov	r0, r4
   105ec:	f7ff ffdf 	bl	105ae <ble_hs_conn_delete_chan>
    while ((chan = SLIST_FIRST(&conn->bhc_channels)) != NULL) {
   105f0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   105f2:	2900      	cmp	r1, #0
   105f4:	d1f9      	bne.n	105ea <ble_hs_conn_free+0xe>
   105f6:	e002      	b.n	105fe <ble_hs_conn_free+0x22>
    }

    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
        os_mbuf_free_chain(OS_MBUF_PKTHDR_TO_MBUF(omp));
   105f8:	3810      	subs	r0, #16
   105fa:	f7f9 fdf1 	bl	a1e0 <os_mbuf_free_chain>
    while ((omp = STAILQ_FIRST(&conn->bhc_tx_q)) != NULL) {
   105fe:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   10600:	b138      	cbz	r0, 10612 <ble_hs_conn_free+0x36>
        STAILQ_REMOVE_HEAD(&conn->bhc_tx_q, omp_next);
   10602:	6843      	ldr	r3, [r0, #4]
   10604:	63e3      	str	r3, [r4, #60]	; 0x3c
   10606:	2b00      	cmp	r3, #0
   10608:	d1f6      	bne.n	105f8 <ble_hs_conn_free+0x1c>
   1060a:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   1060e:	6423      	str	r3, [r4, #64]	; 0x40
   10610:	e7f2      	b.n	105f8 <ble_hs_conn_free+0x1c>
    }

#if MYNEWT_VAL(BLE_HS_DEBUG)
    memset(conn, 0xff, sizeof *conn);
#endif
    rc = os_memblock_put(&ble_hs_conn_pool, conn);
   10612:	4621      	mov	r1, r4
   10614:	4802      	ldr	r0, [pc, #8]	; (10620 <ble_hs_conn_free+0x44>)
   10616:	f7fa fa5a 	bl	aace <os_memblock_put>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    STATS_INC(ble_hs_stats, conn_delete);
}
   1061a:	bd10      	pop	{r4, pc}
   1061c:	4770      	bx	lr
   1061e:	bf00      	nop
   10620:	200073f0 	.word	0x200073f0

00010624 <ble_hs_conn_alloc>:
{
   10624:	b538      	push	{r3, r4, r5, lr}
   10626:	4605      	mov	r5, r0
    conn = os_memblock_get(&ble_hs_conn_pool);
   10628:	481a      	ldr	r0, [pc, #104]	; (10694 <ble_hs_conn_alloc+0x70>)
   1062a:	f7fa fa28 	bl	aa7e <os_memblock_get>
    if (conn == NULL) {
   1062e:	4604      	mov	r4, r0
   10630:	b350      	cbz	r0, 10688 <ble_hs_conn_alloc+0x64>
    memset(conn, 0, sizeof *conn);
   10632:	2264      	movs	r2, #100	; 0x64
   10634:	2100      	movs	r1, #0
   10636:	f7fb f8e2 	bl	b7fe <memset>
    conn->bhc_handle = conn_handle;
   1063a:	80a5      	strh	r5, [r4, #4]
    chan = ble_att_create_chan(conn_handle);
   1063c:	4628      	mov	r0, r5
   1063e:	f004 f85b 	bl	146f8 <ble_att_create_chan>
    if (chan == NULL) {
   10642:	4601      	mov	r1, r0
   10644:	b300      	cbz	r0, 10688 <ble_hs_conn_alloc+0x64>
    rc = ble_hs_conn_chan_insert(conn, chan);
   10646:	4620      	mov	r0, r4
   10648:	f7ff ff97 	bl	1057a <ble_hs_conn_chan_insert>
    if (rc != 0) {
   1064c:	b9e0      	cbnz	r0, 10688 <ble_hs_conn_alloc+0x64>
    chan = ble_l2cap_sig_create_chan(conn_handle);
   1064e:	4628      	mov	r0, r5
   10650:	f001 fdea 	bl	12228 <ble_l2cap_sig_create_chan>
    if (chan == NULL) {
   10654:	4601      	mov	r1, r0
   10656:	b1b8      	cbz	r0, 10688 <ble_hs_conn_alloc+0x64>
    rc = ble_hs_conn_chan_insert(conn, chan);
   10658:	4620      	mov	r0, r4
   1065a:	f7ff ff8e 	bl	1057a <ble_hs_conn_chan_insert>
    if (rc != 0) {
   1065e:	b998      	cbnz	r0, 10688 <ble_hs_conn_alloc+0x64>
    chan = ble_sm_create_chan(conn_handle);
   10660:	4628      	mov	r0, r5
   10662:	f003 fb3f 	bl	13ce4 <ble_sm_create_chan>
    if (chan == NULL) {
   10666:	4601      	mov	r1, r0
   10668:	b170      	cbz	r0, 10688 <ble_hs_conn_alloc+0x64>
    rc = ble_hs_conn_chan_insert(conn, chan);
   1066a:	4620      	mov	r0, r4
   1066c:	f7ff ff85 	bl	1057a <ble_hs_conn_chan_insert>
    if (rc != 0) {
   10670:	b950      	cbnz	r0, 10688 <ble_hs_conn_alloc+0x64>
    rc = ble_gatts_conn_init(&conn->bhc_gatt_svr);
   10672:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   10676:	f7fe ffa7 	bl	f5c8 <ble_gatts_conn_init>
    if (rc != 0) {
   1067a:	b928      	cbnz	r0, 10688 <ble_hs_conn_alloc+0x64>
    STAILQ_INIT(&conn->bhc_tx_q);
   1067c:	4623      	mov	r3, r4
   1067e:	2200      	movs	r2, #0
   10680:	f843 2f3c 	str.w	r2, [r3, #60]!
   10684:	6423      	str	r3, [r4, #64]	; 0x40
    return conn;
   10686:	e003      	b.n	10690 <ble_hs_conn_alloc+0x6c>
    ble_hs_conn_free(conn);
   10688:	4620      	mov	r0, r4
   1068a:	f7ff ffa7 	bl	105dc <ble_hs_conn_free>
    return NULL;
   1068e:	2400      	movs	r4, #0
}
   10690:	4620      	mov	r0, r4
   10692:	bd38      	pop	{r3, r4, r5, pc}
   10694:	200073f0 	.word	0x200073f0

00010698 <ble_hs_conn_remove>:
    return;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_REMOVE(&ble_hs_conns, conn, ble_hs_conn, bhc_next);
   10698:	4b06      	ldr	r3, [pc, #24]	; (106b4 <ble_hs_conn_remove+0x1c>)
   1069a:	681a      	ldr	r2, [r3, #0]
   1069c:	4282      	cmp	r2, r0
   1069e:	d103      	bne.n	106a8 <ble_hs_conn_remove+0x10>
   106a0:	6812      	ldr	r2, [r2, #0]
   106a2:	601a      	str	r2, [r3, #0]
   106a4:	4770      	bx	lr
   106a6:	461a      	mov	r2, r3
   106a8:	6813      	ldr	r3, [r2, #0]
   106aa:	4283      	cmp	r3, r0
   106ac:	d1fb      	bne.n	106a6 <ble_hs_conn_remove+0xe>
   106ae:	681b      	ldr	r3, [r3, #0]
   106b0:	6013      	str	r3, [r2, #0]
}
   106b2:	4770      	bx	lr
   106b4:	2000740c 	.word	0x2000740c

000106b8 <ble_hs_conn_find>:

    struct ble_hs_conn *conn;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   106b8:	4b04      	ldr	r3, [pc, #16]	; (106cc <ble_hs_conn_find+0x14>)
   106ba:	681b      	ldr	r3, [r3, #0]
   106bc:	b123      	cbz	r3, 106c8 <ble_hs_conn_find+0x10>
        if (conn->bhc_handle == conn_handle) {
   106be:	889a      	ldrh	r2, [r3, #4]
   106c0:	4282      	cmp	r2, r0
   106c2:	d001      	beq.n	106c8 <ble_hs_conn_find+0x10>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   106c4:	681b      	ldr	r3, [r3, #0]
   106c6:	e7f9      	b.n	106bc <ble_hs_conn_find+0x4>
            return conn;
        }
    }

    return NULL;
}
   106c8:	4618      	mov	r0, r3
   106ca:	4770      	bx	lr
   106cc:	2000740c 	.word	0x2000740c

000106d0 <ble_hs_conn_insert>:
{
   106d0:	b510      	push	{r4, lr}
   106d2:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT_EVAL(ble_hs_conn_find(conn->bhc_handle) == NULL);
   106d4:	8880      	ldrh	r0, [r0, #4]
   106d6:	f7ff ffef 	bl	106b8 <ble_hs_conn_find>
    SLIST_INSERT_HEAD(&ble_hs_conns, conn, bhc_next);
   106da:	4b02      	ldr	r3, [pc, #8]	; (106e4 <ble_hs_conn_insert+0x14>)
   106dc:	681a      	ldr	r2, [r3, #0]
   106de:	6022      	str	r2, [r4, #0]
   106e0:	601c      	str	r4, [r3, #0]
}
   106e2:	bd10      	pop	{r4, pc}
   106e4:	2000740c 	.word	0x2000740c

000106e8 <ble_hs_conn_find_assert>:

struct ble_hs_conn *
ble_hs_conn_find_assert(uint16_t conn_handle)
{
   106e8:	b508      	push	{r3, lr}
    struct ble_hs_conn *conn;

    conn = ble_hs_conn_find(conn_handle);
   106ea:	f7ff ffe5 	bl	106b8 <ble_hs_conn_find>
    BLE_HS_DBG_ASSERT(conn != NULL);

    return conn;
}
   106ee:	bd08      	pop	{r3, pc}

000106f0 <ble_hs_conn_find_by_idx>:
    int i;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    i = 0;
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   106f0:	4b05      	ldr	r3, [pc, #20]	; (10708 <ble_hs_conn_find_by_idx+0x18>)
   106f2:	681b      	ldr	r3, [r3, #0]
    i = 0;
   106f4:	2200      	movs	r2, #0
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   106f6:	b123      	cbz	r3, 10702 <ble_hs_conn_find_by_idx+0x12>
        if (i == idx) {
   106f8:	4282      	cmp	r2, r0
   106fa:	d002      	beq.n	10702 <ble_hs_conn_find_by_idx+0x12>
            return conn;
        }

        i++;
   106fc:	3201      	adds	r2, #1
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   106fe:	681b      	ldr	r3, [r3, #0]
   10700:	e7f9      	b.n	106f6 <ble_hs_conn_find_by_idx+0x6>
    }

    return NULL;
}
   10702:	4618      	mov	r0, r3
   10704:	4770      	bx	lr
   10706:	bf00      	nop
   10708:	2000740c 	.word	0x2000740c

0001070c <ble_hs_conn_exists>:

int
ble_hs_conn_exists(uint16_t conn_handle)
{
   1070c:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_CONNECT
    return 0;
#endif
    return ble_hs_conn_find(conn_handle) != NULL;
   1070e:	f7ff ffd3 	bl	106b8 <ble_hs_conn_find>
}
   10712:	3000      	adds	r0, #0
   10714:	bf18      	it	ne
   10716:	2001      	movne	r0, #1
   10718:	bd08      	pop	{r3, pc}
	...

0001071c <ble_hs_conn_first>:
    return NULL;
#endif

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());
    return SLIST_FIRST(&ble_hs_conns);
}
   1071c:	4b01      	ldr	r3, [pc, #4]	; (10724 <ble_hs_conn_first+0x8>)
   1071e:	6818      	ldr	r0, [r3, #0]
   10720:	4770      	bx	lr
   10722:	bf00      	nop
   10724:	2000740c 	.word	0x2000740c

00010728 <ble_hs_conn_addrs>:

void
ble_hs_conn_addrs(const struct ble_hs_conn *conn,
                  struct ble_hs_conn_addrs *addrs)
{
   10728:	b570      	push	{r4, r5, r6, lr}
   1072a:	b082      	sub	sp, #8
   1072c:	4605      	mov	r5, r0
   1072e:	460c      	mov	r4, r1
    const uint8_t *our_id_addr_val;
    int rc;

    /* Determine our address information. */
    addrs->our_id_addr.type =
        ble_hs_misc_own_addr_type_to_id(conn->bhc_our_addr_type);
   10730:	7980      	ldrb	r0, [r0, #6]
   10732:	f000 ff8b 	bl	1164c <ble_hs_misc_own_addr_type_to_id>
    addrs->our_id_addr.type =
   10736:	7020      	strb	r0, [r4, #0]
    } else {
        rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
        assert(rc == 0);
    }
#else
    rc = ble_hs_id_addr(addrs->our_id_addr.type, &our_id_addr_val, NULL);
   10738:	2200      	movs	r2, #0
   1073a:	a901      	add	r1, sp, #4
   1073c:	f000 fe44 	bl	113c8 <ble_hs_id_addr>
    assert(rc == 0);
   10740:	bb70      	cbnz	r0, 107a0 <ble_hs_conn_addrs+0x78>
#endif

    memcpy(addrs->our_id_addr.val, our_id_addr_val, 6);
   10742:	9b01      	ldr	r3, [sp, #4]
   10744:	681a      	ldr	r2, [r3, #0]
   10746:	f8c4 2001 	str.w	r2, [r4, #1]
   1074a:	889b      	ldrh	r3, [r3, #4]
   1074c:	f8a4 3005 	strh.w	r3, [r4, #5]

    if (memcmp(conn->bhc_our_rpa_addr.val, ble_hs_conn_null_addr, 6) == 0) {
   10750:	2206      	movs	r2, #6
   10752:	4929      	ldr	r1, [pc, #164]	; (107f8 <ble_hs_conn_addrs+0xd0>)
   10754:	f105 000f 	add.w	r0, r5, #15
   10758:	f7fb f804 	bl	b764 <memcmp>
   1075c:	bb50      	cbnz	r0, 107b4 <ble_hs_conn_addrs+0x8c>
        addrs->our_ota_addr = addrs->our_id_addr;
   1075e:	6822      	ldr	r2, [r4, #0]
   10760:	f8c4 200e 	str.w	r2, [r4, #14]
   10764:	88a1      	ldrh	r1, [r4, #4]
   10766:	79a2      	ldrb	r2, [r4, #6]
   10768:	8261      	strh	r1, [r4, #18]
   1076a:	7522      	strb	r2, [r4, #20]
    } else {
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
    }

    /* Determine peer address information. */
    addrs->peer_id_addr = conn->bhc_peer_addr;
   1076c:	462b      	mov	r3, r5
   1076e:	f853 1f07 	ldr.w	r1, [r3, #7]!
   10772:	f8c4 1007 	str.w	r1, [r4, #7]
   10776:	8898      	ldrh	r0, [r3, #4]
   10778:	7999      	ldrb	r1, [r3, #6]
   1077a:	f8a4 000b 	strh.w	r0, [r4, #11]
   1077e:	7361      	strb	r1, [r4, #13]
    addrs->peer_ota_addr = conn->bhc_peer_addr;
   10780:	f104 0215 	add.w	r2, r4, #21
   10784:	6819      	ldr	r1, [r3, #0]
   10786:	f8c4 1015 	str.w	r1, [r4, #21]
   1078a:	8898      	ldrh	r0, [r3, #4]
   1078c:	7999      	ldrb	r1, [r3, #6]
   1078e:	8090      	strh	r0, [r2, #4]
   10790:	7191      	strb	r1, [r2, #6]
    switch (conn->bhc_peer_addr.type) {
   10792:	79eb      	ldrb	r3, [r5, #7]
   10794:	2b02      	cmp	r3, #2
   10796:	d017      	beq.n	107c8 <ble_hs_conn_addrs+0xa0>
   10798:	2b03      	cmp	r3, #3
   1079a:	d021      	beq.n	107e0 <ble_hs_conn_addrs+0xb8>

    default:
        BLE_HS_DBG_ASSERT(0);
        break;
    }
}
   1079c:	b002      	add	sp, #8
   1079e:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == 0);
   107a0:	f7f7 fd0e 	bl	81c0 <hal_debugger_connected>
   107a4:	b100      	cbz	r0, 107a8 <ble_hs_conn_addrs+0x80>
   107a6:	be01      	bkpt	0x0001
   107a8:	2300      	movs	r3, #0
   107aa:	461a      	mov	r2, r3
   107ac:	4619      	mov	r1, r3
   107ae:	4618      	mov	r0, r3
   107b0:	f7f9 f89c 	bl	98ec <__assert_func>
        addrs->our_ota_addr = conn->bhc_our_rpa_addr;
   107b4:	462a      	mov	r2, r5
   107b6:	f852 1f0e 	ldr.w	r1, [r2, #14]!
   107ba:	f8c4 100e 	str.w	r1, [r4, #14]
   107be:	8891      	ldrh	r1, [r2, #4]
   107c0:	7992      	ldrb	r2, [r2, #6]
   107c2:	8261      	strh	r1, [r4, #18]
   107c4:	7522      	strb	r2, [r4, #20]
   107c6:	e7d1      	b.n	1076c <ble_hs_conn_addrs+0x44>
        addrs->peer_id_addr.type = BLE_ADDR_PUBLIC;
   107c8:	2300      	movs	r3, #0
   107ca:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   107cc:	f855 2f15 	ldr.w	r2, [r5, #21]!
   107d0:	f8c4 2015 	str.w	r2, [r4, #21]
   107d4:	88a9      	ldrh	r1, [r5, #4]
   107d6:	79aa      	ldrb	r2, [r5, #6]
   107d8:	f8a4 1019 	strh.w	r1, [r4, #25]
   107dc:	76e2      	strb	r2, [r4, #27]
        break;
   107de:	e7dd      	b.n	1079c <ble_hs_conn_addrs+0x74>
        addrs->peer_id_addr.type = BLE_ADDR_RANDOM;
   107e0:	2301      	movs	r3, #1
   107e2:	71e3      	strb	r3, [r4, #7]
        addrs->peer_ota_addr = conn->bhc_peer_rpa_addr;
   107e4:	f855 2f15 	ldr.w	r2, [r5, #21]!
   107e8:	f8c4 2015 	str.w	r2, [r4, #21]
   107ec:	88a9      	ldrh	r1, [r5, #4]
   107ee:	79aa      	ldrb	r2, [r5, #6]
   107f0:	f8a4 1019 	strh.w	r1, [r4, #25]
   107f4:	76e2      	strb	r2, [r4, #27]
}
   107f6:	e7d1      	b.n	1079c <ble_hs_conn_addrs+0x74>
   107f8:	200073e8 	.word	0x200073e8

000107fc <ble_hs_conn_find_by_addr>:
{
   107fc:	b570      	push	{r4, r5, r6, lr}
   107fe:	b088      	sub	sp, #32
    if (!addr) {
   10800:	2800      	cmp	r0, #0
   10802:	d039      	beq.n	10878 <ble_hs_conn_find_by_addr+0x7c>
   10804:	4606      	mov	r6, r0
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   10806:	4b1d      	ldr	r3, [pc, #116]	; (1087c <ble_hs_conn_find_by_addr+0x80>)
   10808:	681c      	ldr	r4, [r3, #0]
   1080a:	e014      	b.n	10836 <ble_hs_conn_find_by_addr+0x3a>
        if (BLE_ADDR_IS_RPA(addr)) {
   1080c:	79b3      	ldrb	r3, [r6, #6]
   1080e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   10812:	2b40      	cmp	r3, #64	; 0x40
   10814:	d114      	bne.n	10840 <ble_hs_conn_find_by_addr+0x44>
    type_diff = a->type - b->type;
   10816:	7d63      	ldrb	r3, [r4, #21]
    if (type_diff != 0) {
   10818:	1a18      	subs	r0, r3, r0
   1081a:	d105      	bne.n	10828 <ble_hs_conn_find_by_addr+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   1081c:	2206      	movs	r2, #6
   1081e:	1c71      	adds	r1, r6, #1
   10820:	f104 0016 	add.w	r0, r4, #22
   10824:	f7fa ff9e 	bl	b764 <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_rpa_addr, addr) == 0) {
   10828:	b920      	cbnz	r0, 10834 <ble_hs_conn_find_by_addr+0x38>
}
   1082a:	4620      	mov	r0, r4
   1082c:	b008      	add	sp, #32
   1082e:	bd70      	pop	{r4, r5, r6, pc}
            if (ble_addr_cmp(&addrs.peer_id_addr, addr) == 0) {
   10830:	2800      	cmp	r0, #0
   10832:	d0fa      	beq.n	1082a <ble_hs_conn_find_by_addr+0x2e>
    SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   10834:	6824      	ldr	r4, [r4, #0]
   10836:	2c00      	cmp	r4, #0
   10838:	d0f7      	beq.n	1082a <ble_hs_conn_find_by_addr+0x2e>
        if (BLE_ADDR_IS_RPA(addr)) {
   1083a:	7830      	ldrb	r0, [r6, #0]
   1083c:	2801      	cmp	r0, #1
   1083e:	d0e5      	beq.n	1080c <ble_hs_conn_find_by_addr+0x10>
    type_diff = a->type - b->type;
   10840:	79e5      	ldrb	r5, [r4, #7]
    if (type_diff != 0) {
   10842:	1a28      	subs	r0, r5, r0
   10844:	d105      	bne.n	10852 <ble_hs_conn_find_by_addr+0x56>
    return memcmp(a->val, b->val, sizeof(a->val));
   10846:	2206      	movs	r2, #6
   10848:	1c71      	adds	r1, r6, #1
   1084a:	f104 0008 	add.w	r0, r4, #8
   1084e:	f7fa ff89 	bl	b764 <memcmp>
            if (ble_addr_cmp(&conn->bhc_peer_addr, addr) == 0) {
   10852:	2800      	cmp	r0, #0
   10854:	d0e9      	beq.n	1082a <ble_hs_conn_find_by_addr+0x2e>
            if (conn->bhc_peer_addr.type < BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT) {
   10856:	2d01      	cmp	r5, #1
   10858:	d9ec      	bls.n	10834 <ble_hs_conn_find_by_addr+0x38>
            ble_hs_conn_addrs(conn, &addrs);
   1085a:	a901      	add	r1, sp, #4
   1085c:	4620      	mov	r0, r4
   1085e:	f7ff ff63 	bl	10728 <ble_hs_conn_addrs>
    type_diff = a->type - b->type;
   10862:	f89d 000b 	ldrb.w	r0, [sp, #11]
   10866:	7833      	ldrb	r3, [r6, #0]
    if (type_diff != 0) {
   10868:	1ac0      	subs	r0, r0, r3
   1086a:	d1e1      	bne.n	10830 <ble_hs_conn_find_by_addr+0x34>
    return memcmp(a->val, b->val, sizeof(a->val));
   1086c:	2206      	movs	r2, #6
   1086e:	1c71      	adds	r1, r6, #1
   10870:	a803      	add	r0, sp, #12
   10872:	f7fa ff77 	bl	b764 <memcmp>
   10876:	e7db      	b.n	10830 <ble_hs_conn_find_by_addr+0x34>
        return NULL;
   10878:	2400      	movs	r4, #0
   1087a:	e7d6      	b.n	1082a <ble_hs_conn_find_by_addr+0x2e>
   1087c:	2000740c 	.word	0x2000740c

00010880 <ble_hs_conn_timer>:

int32_t
ble_hs_conn_timer(void)
{
   10880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return os_time_get();
   10882:	f7fa fda7 	bl	b3d4 <os_time_get>
   10886:	4607      	mov	r7, r0
    for (;;) {
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
        next_exp_in = BLE_HS_FOREVER;
        now = ble_npl_time_get();

        ble_hs_lock();
   10888:	f7ff f90c 	bl	faa4 <ble_hs_lock>
         * 1. Determine if any connections need to be terminated due to timeout.
         *    If so, break out of the loop and terminate the connection.  This
         *    function will need to be executed again.
         * 2. Otherwise, determine when the next timeout will occur.
         */
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   1088c:	4b1a      	ldr	r3, [pc, #104]	; (108f8 <ble_hs_conn_timer+0x78>)
   1088e:	681c      	ldr	r4, [r3, #0]
        next_exp_in = BLE_HS_FOREVER;
   10890:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   10894:	e00d      	b.n	108b2 <ble_hs_conn_timer+0x32>
                    if (time_diff <= 0) {
                        /* ACL reassembly has timed out.  Remember the connection
                         * handle so it can be terminated after the mutex is
                         * unlocked.
                         */
                        conn_handle = conn->bhc_handle;
   10896:	88a4      	ldrh	r4, [r4, #4]
                        break;
   10898:	e021      	b.n	108de <ble_hs_conn_timer+0x5e>
   1089a:	4635      	mov	r5, r6
#if BLE_HS_ATT_SVR_QUEUED_WRITE_TMO
                /* Check each connection's rx queued write timer.  If too much
                 * time passes after a prep write is received, the queue is
                 * cleared.
                 */
                time_diff = ble_att_svr_ticks_until_tmo(&conn->bhc_att_svr, now);
   1089c:	4639      	mov	r1, r7
   1089e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   108a2:	f004 feba 	bl	1561a <ble_att_svr_ticks_until_tmo>
                if (time_diff <= 0) {
   108a6:	1e06      	subs	r6, r0, #0
   108a8:	dd14      	ble.n	108d4 <ble_hs_conn_timer+0x54>
                    conn_handle = conn->bhc_handle;
                    break;
                }

                /* Determine if this connection is the soonest to time out. */
                if (time_diff < next_exp_in) {
   108aa:	42b5      	cmp	r5, r6
   108ac:	dc00      	bgt.n	108b0 <ble_hs_conn_timer+0x30>
   108ae:	462e      	mov	r6, r5
        SLIST_FOREACH(conn, &ble_hs_conns, bhc_next) {
   108b0:	6824      	ldr	r4, [r4, #0]
   108b2:	b194      	cbz	r4, 108da <ble_hs_conn_timer+0x5a>
            if (!(conn->bhc_flags & BLE_HS_CONN_F_TERMINATING)) {
   108b4:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   108b8:	f013 0f02 	tst.w	r3, #2
   108bc:	d1f8      	bne.n	108b0 <ble_hs_conn_timer+0x30>
                if (conn->bhc_rx_chan != NULL) {
   108be:	6b23      	ldr	r3, [r4, #48]	; 0x30
   108c0:	2b00      	cmp	r3, #0
   108c2:	d0ea      	beq.n	1089a <ble_hs_conn_timer+0x1a>
                    time_diff = conn->bhc_rx_timeout - now;
   108c4:	6b65      	ldr	r5, [r4, #52]	; 0x34
   108c6:	1bed      	subs	r5, r5, r7
                    if (time_diff <= 0) {
   108c8:	2d00      	cmp	r5, #0
   108ca:	dde4      	ble.n	10896 <ble_hs_conn_timer+0x16>
                    if (time_diff < next_exp_in) {
   108cc:	42ae      	cmp	r6, r5
   108ce:	dce5      	bgt.n	1089c <ble_hs_conn_timer+0x1c>
   108d0:	4635      	mov	r5, r6
   108d2:	e7e3      	b.n	1089c <ble_hs_conn_timer+0x1c>
                    conn_handle = conn->bhc_handle;
   108d4:	88a4      	ldrh	r4, [r4, #4]
                    break;
   108d6:	462e      	mov	r6, r5
   108d8:	e001      	b.n	108de <ble_hs_conn_timer+0x5e>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   108da:	f64f 74ff 	movw	r4, #65535	; 0xffff
                }
#endif
            }
        }

        ble_hs_unlock();
   108de:	f7ff f8e5 	bl	faac <ble_hs_unlock>

        /* If a connection has timed out, terminate it.  We need to repeatedly
         * call this function again to determine when the next timeout is.
         */
        if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   108e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   108e6:	429c      	cmp	r4, r3
   108e8:	d101      	bne.n	108ee <ble_hs_conn_timer+0x6e>
            continue;
        }

        return next_exp_in;
    }
}
   108ea:	4630      	mov	r0, r6
   108ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_gap_terminate(conn_handle, BLE_ERR_REM_USER_CONN_TERM);
   108ee:	2113      	movs	r1, #19
   108f0:	4620      	mov	r0, r4
   108f2:	f7fc fd66 	bl	d3c2 <ble_gap_terminate>
        conn_handle = BLE_HS_CONN_HANDLE_NONE;
   108f6:	e7c4      	b.n	10882 <ble_hs_conn_timer+0x2>
   108f8:	2000740c 	.word	0x2000740c

000108fc <ble_hs_conn_init>:

int
ble_hs_conn_init(void)
{
   108fc:	b500      	push	{lr}
   108fe:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_hs_conn_pool, MYNEWT_VAL(BLE_MAX_CONNECTIONS),
   10900:	4b07      	ldr	r3, [pc, #28]	; (10920 <ble_hs_conn_init+0x24>)
   10902:	9300      	str	r3, [sp, #0]
   10904:	4b07      	ldr	r3, [pc, #28]	; (10924 <ble_hs_conn_init+0x28>)
   10906:	2264      	movs	r2, #100	; 0x64
   10908:	2101      	movs	r1, #1
   1090a:	4807      	ldr	r0, [pc, #28]	; (10928 <ble_hs_conn_init+0x2c>)
   1090c:	f7fa f872 	bl	a9f4 <os_mempool_init>
                         sizeof (struct ble_hs_conn),
                         ble_hs_conn_elem_mem, "ble_hs_conn_pool");
    if (rc != 0) {
   10910:	b920      	cbnz	r0, 1091c <ble_hs_conn_init+0x20>
        return BLE_HS_EOS;
    }

    SLIST_INIT(&ble_hs_conns);
   10912:	4b06      	ldr	r3, [pc, #24]	; (1092c <ble_hs_conn_init+0x30>)
   10914:	6018      	str	r0, [r3, #0]

    return 0;
}
   10916:	b003      	add	sp, #12
   10918:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_EOS;
   1091c:	200b      	movs	r0, #11
   1091e:	e7fa      	b.n	10916 <ble_hs_conn_init+0x1a>
   10920:	00028db8 	.word	0x00028db8
   10924:	20007384 	.word	0x20007384
   10928:	200073f0 	.word	0x200073f0
   1092c:	2000740c 	.word	0x2000740c

00010930 <ble_hs_flow_connection_broken>:
    MYNEWT_VAL(BLE_HS_FLOW_CTRL_TX_ON_DISCONNECT)
    ble_hs_lock();
    ble_hs_flow_tx_num_comp_pkts();
    ble_hs_unlock();
#endif
}
   10930:	4770      	bx	lr

00010932 <ble_hs_flow_track_data_mbuf>:
    int idx = ble_hs_flow_mbuf_index(om);

    hdr = (void *)om->om_data;
    ble_hs_flow_mbuf_conn_handle[idx] = BLE_HCI_DATA_HANDLE(hdr->hdh_handle_pb_bc);
#endif
}
   10932:	4770      	bx	lr

00010934 <ble_hs_flow_startup>:
    ble_npl_callout_init(&ble_hs_flow_timer, ble_hs_evq_get(),
                         ble_hs_flow_event_cb, NULL);
#endif

    return 0;
}
   10934:	2000      	movs	r0, #0
   10936:	4770      	bx	lr

00010938 <ble_hs_hci_rx_cmd_complete>:
{
    const struct ble_hci_ev_command_complete *ev = data;
    const struct ble_hci_ev_command_complete_nop *nop = data;
    uint16_t opcode;

    if (len < sizeof(*ev)) {
   10938:	2903      	cmp	r1, #3
   1093a:	d809      	bhi.n	10950 <ble_hs_hci_rx_cmd_complete+0x18>
        if (len < sizeof(*nop)) {
   1093c:	2902      	cmp	r1, #2
   1093e:	d91c      	bls.n	1097a <ble_hs_hci_rx_cmd_complete+0x42>
            return BLE_HS_ECONTROLLER;
        }

        /* nop is special as it doesn't have status and response */

        opcode = le16toh(nop->opcode);
   10940:	f8b0 3001 	ldrh.w	r3, [r0, #1]
        if (opcode != BLE_HCI_OPCODE_NOP) {
   10944:	b9db      	cbnz	r3, 1097e <ble_hs_hci_rx_cmd_complete+0x46>
            return BLE_HS_ECONTROLLER;
        }

        /* TODO Process num_pkts field. */

        out_ack->bha_status = 0;
   10946:	2100      	movs	r1, #0
   10948:	6011      	str	r1, [r2, #0]
        out_ack->bha_params = NULL;
   1094a:	6051      	str	r1, [r2, #4]
        out_ack->bha_params_len = 0;
   1094c:	6091      	str	r1, [r2, #8]
        return 0;
   1094e:	e00c      	b.n	1096a <ble_hs_hci_rx_cmd_complete+0x32>
    }

    opcode = le16toh(ev->opcode);
   10950:	f8b0 3001 	ldrh.w	r3, [r0, #1]

    /* TODO Process num_pkts field. */

    out_ack->bha_opcode = opcode;
   10954:	8193      	strh	r3, [r2, #12]

    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   10956:	78c3      	ldrb	r3, [r0, #3]
   10958:	b14b      	cbz	r3, 1096e <ble_hs_hci_rx_cmd_complete+0x36>
   1095a:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1095e:	6013      	str	r3, [r2, #0]
    out_ack->bha_params_len = len - sizeof(*ev);
   10960:	3904      	subs	r1, #4
   10962:	6091      	str	r1, [r2, #8]
    if (out_ack->bha_params_len) {
   10964:	b929      	cbnz	r1, 10972 <ble_hs_hci_rx_cmd_complete+0x3a>
        out_ack->bha_params = ev->return_params;
    } else {
        out_ack->bha_params = NULL;
   10966:	2300      	movs	r3, #0
   10968:	6053      	str	r3, [r2, #4]
    }

    return 0;
}
   1096a:	4608      	mov	r0, r1
   1096c:	4770      	bx	lr
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   1096e:	2300      	movs	r3, #0
   10970:	e7f5      	b.n	1095e <ble_hs_hci_rx_cmd_complete+0x26>
        out_ack->bha_params = ev->return_params;
   10972:	3004      	adds	r0, #4
   10974:	6050      	str	r0, [r2, #4]
    return 0;
   10976:	2100      	movs	r1, #0
   10978:	e7f7      	b.n	1096a <ble_hs_hci_rx_cmd_complete+0x32>
            return BLE_HS_ECONTROLLER;
   1097a:	210c      	movs	r1, #12
   1097c:	e7f5      	b.n	1096a <ble_hs_hci_rx_cmd_complete+0x32>
            return BLE_HS_ECONTROLLER;
   1097e:	210c      	movs	r1, #12
   10980:	e7f3      	b.n	1096a <ble_hs_hci_rx_cmd_complete+0x32>

00010982 <ble_hs_hci_rx_cmd_status>:
ble_hs_hci_rx_cmd_status(const void *data, int len,
                         struct ble_hs_hci_ack *out_ack)
{
    const struct ble_hci_ev_command_status *ev = data;

    if (len != sizeof(*ev)) {
   10982:	2904      	cmp	r1, #4
   10984:	d10d      	bne.n	109a2 <ble_hs_hci_rx_cmd_status+0x20>
        return BLE_HS_ECONTROLLER;
    }

    /* XXX: Process num_pkts field. */

    out_ack->bha_opcode = le16toh(ev->opcode);
   10986:	8843      	ldrh	r3, [r0, #2]
   10988:	8193      	strh	r3, [r2, #12]
    out_ack->bha_params = NULL;
   1098a:	2300      	movs	r3, #0
   1098c:	6053      	str	r3, [r2, #4]
    out_ack->bha_params_len = 0;
   1098e:	6093      	str	r3, [r2, #8]
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   10990:	7803      	ldrb	r3, [r0, #0]
   10992:	b123      	cbz	r3, 1099e <ble_hs_hci_rx_cmd_status+0x1c>
   10994:	f503 7300 	add.w	r3, r3, #512	; 0x200
   10998:	6013      	str	r3, [r2, #0]

    return 0;
   1099a:	2000      	movs	r0, #0
   1099c:	4770      	bx	lr
    out_ack->bha_status = BLE_HS_HCI_ERR(ev->status);
   1099e:	2300      	movs	r3, #0
   109a0:	e7fa      	b.n	10998 <ble_hs_hci_rx_cmd_status+0x16>
        return BLE_HS_ECONTROLLER;
   109a2:	200c      	movs	r0, #12
}
   109a4:	4770      	bx	lr
	...

000109a8 <ble_hs_hci_max_acl_payload_sz>:
     * The LE_Read_Buffer_Size command is used to read the maximum size of the
     * data portion of HCI LE ACL Data Packets sent from the Host to the
     * Controller.
     */
    return ble_hs_hci_buf_sz;
}
   109a8:	4b01      	ldr	r3, [pc, #4]	; (109b0 <ble_hs_hci_max_acl_payload_sz+0x8>)
   109aa:	8818      	ldrh	r0, [r3, #0]
   109ac:	4770      	bx	lr
   109ae:	bf00      	nop
   109b0:	20007416 	.word	0x20007416

000109b4 <ble_hs_hci_lock>:
{
   109b4:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_pend(&mu->mu, timeout);
   109b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   109ba:	4802      	ldr	r0, [pc, #8]	; (109c4 <ble_hs_hci_lock+0x10>)
   109bc:	f7fa f9c2 	bl	ad44 <os_mutex_pend>
}
   109c0:	bd08      	pop	{r3, pc}
   109c2:	bf00      	nop
   109c4:	2000755c 	.word	0x2000755c

000109c8 <ble_hs_hci_wait_for_ack>:
{
   109c8:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_sem_pend(&sem->sem, timeout);
   109ca:	f44f 7180 	mov.w	r1, #256	; 0x100
   109ce:	4806      	ldr	r0, [pc, #24]	; (109e8 <ble_hs_hci_wait_for_ack+0x20>)
   109d0:	f00b fa22 	bl	1be18 <os_sem_pend>
    rc = ble_npl_sem_pend(&ble_hs_hci_sem,
   109d4:	4603      	mov	r3, r0
    switch (rc) {
   109d6:	b110      	cbz	r0, 109de <ble_hs_hci_wait_for_ack+0x16>
   109d8:	2806      	cmp	r0, #6
   109da:	d002      	beq.n	109e2 <ble_hs_hci_wait_for_ack+0x1a>
        rc = BLE_HS_EOS;
   109dc:	230b      	movs	r3, #11
}
   109de:	4618      	mov	r0, r3
   109e0:	bd08      	pop	{r3, pc}
        rc = BLE_HS_ETIMEOUT_HCI;
   109e2:	2313      	movs	r3, #19
    return rc;
   109e4:	e7fb      	b.n	109de <ble_hs_hci_wait_for_ack+0x16>
   109e6:	bf00      	nop
   109e8:	20007568 	.word	0x20007568

000109ec <ble_hs_hci_process_ack>:
{
   109ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   109f0:	4607      	mov	r7, r0
   109f2:	460e      	mov	r6, r1
   109f4:	4690      	mov	r8, r2
   109f6:	461c      	mov	r4, r3
    memset(out_ack, 0, sizeof *out_ack);
   109f8:	2300      	movs	r3, #0
   109fa:	6023      	str	r3, [r4, #0]
   109fc:	6063      	str	r3, [r4, #4]
   109fe:	60a3      	str	r3, [r4, #8]
   10a00:	60e3      	str	r3, [r4, #12]
    switch (ble_hs_hci_ack->opcode) {
   10a02:	4b18      	ldr	r3, [pc, #96]	; (10a64 <ble_hs_hci_process_ack+0x78>)
   10a04:	6818      	ldr	r0, [r3, #0]
   10a06:	7803      	ldrb	r3, [r0, #0]
   10a08:	2b0e      	cmp	r3, #14
   10a0a:	d005      	beq.n	10a18 <ble_hs_hci_process_ack+0x2c>
   10a0c:	2b0f      	cmp	r3, #15
   10a0e:	d019      	beq.n	10a44 <ble_hs_hci_process_ack+0x58>
        rc = BLE_HS_EUNKNOWN;
   10a10:	2511      	movs	r5, #17
}
   10a12:	4628      	mov	r0, r5
   10a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = ble_hs_hci_rx_cmd_complete(ble_hs_hci_ack->data,
   10a18:	4622      	mov	r2, r4
   10a1a:	7841      	ldrb	r1, [r0, #1]
   10a1c:	3002      	adds	r0, #2
   10a1e:	f7ff ff8b 	bl	10938 <ble_hs_hci_rx_cmd_complete>
   10a22:	4605      	mov	r5, r0
    if (rc == 0) {
   10a24:	2d00      	cmp	r5, #0
   10a26:	d1f4      	bne.n	10a12 <ble_hs_hci_process_ack+0x26>
        if (params_buf == NULL || out_ack->bha_params == NULL) {
   10a28:	b19e      	cbz	r6, 10a52 <ble_hs_hci_process_ack+0x66>
   10a2a:	6861      	ldr	r1, [r4, #4]
   10a2c:	b189      	cbz	r1, 10a52 <ble_hs_hci_process_ack+0x66>
            if (out_ack->bha_params_len > params_buf_len) {
   10a2e:	68a3      	ldr	r3, [r4, #8]
   10a30:	4543      	cmp	r3, r8
   10a32:	dd02      	ble.n	10a3a <ble_hs_hci_process_ack+0x4e>
                out_ack->bha_params_len = params_buf_len;
   10a34:	f8c4 8008 	str.w	r8, [r4, #8]
                rc = BLE_HS_ECONTROLLER;
   10a38:	250c      	movs	r5, #12
            memcpy(params_buf, out_ack->bha_params, out_ack->bha_params_len);
   10a3a:	68a2      	ldr	r2, [r4, #8]
   10a3c:	4630      	mov	r0, r6
   10a3e:	f7fa feb5 	bl	b7ac <memcpy>
   10a42:	e008      	b.n	10a56 <ble_hs_hci_process_ack+0x6a>
        rc = ble_hs_hci_rx_cmd_status(ble_hs_hci_ack->data,
   10a44:	4622      	mov	r2, r4
   10a46:	7841      	ldrb	r1, [r0, #1]
   10a48:	3002      	adds	r0, #2
   10a4a:	f7ff ff9a 	bl	10982 <ble_hs_hci_rx_cmd_status>
   10a4e:	4605      	mov	r5, r0
        break;
   10a50:	e7e8      	b.n	10a24 <ble_hs_hci_process_ack+0x38>
            out_ack->bha_params_len = 0;
   10a52:	2300      	movs	r3, #0
   10a54:	60a3      	str	r3, [r4, #8]
        out_ack->bha_params = params_buf;
   10a56:	6066      	str	r6, [r4, #4]
        if (out_ack->bha_opcode != expected_opcode) {
   10a58:	89a3      	ldrh	r3, [r4, #12]
   10a5a:	42bb      	cmp	r3, r7
   10a5c:	d0d9      	beq.n	10a12 <ble_hs_hci_process_ack+0x26>
            rc = BLE_HS_ECONTROLLER;
   10a5e:	250c      	movs	r5, #12
    return rc;
   10a60:	e7d7      	b.n	10a12 <ble_hs_hci_process_ack+0x26>
   10a62:	bf00      	nop
   10a64:	20007410 	.word	0x20007410

00010a68 <ble_hs_hci_unlock>:
{
   10a68:	b508      	push	{r3, lr}
    return (ble_npl_error_t)os_mutex_release(&mu->mu);
   10a6a:	4802      	ldr	r0, [pc, #8]	; (10a74 <ble_hs_hci_unlock+0xc>)
   10a6c:	f7fa f90a 	bl	ac84 <os_mutex_release>
}
   10a70:	bd08      	pop	{r3, pc}
   10a72:	bf00      	nop
   10a74:	2000755c 	.word	0x2000755c

00010a78 <ble_hs_hci_rx_ack>:
{
   10a78:	b508      	push	{r3, lr}
/**
 * Get current semaphore's count
 */
static inline uint16_t os_sem_get_count(struct os_sem *sem)
{
    return sem->sem_tokens;
   10a7a:	4b06      	ldr	r3, [pc, #24]	; (10a94 <ble_hs_hci_rx_ack+0x1c>)
   10a7c:	88db      	ldrh	r3, [r3, #6]
    if (ble_npl_sem_get_count(&ble_hs_hci_sem) > 0) {
   10a7e:	b92b      	cbnz	r3, 10a8c <ble_hs_hci_rx_ack+0x14>
    ble_hs_hci_ack = (struct ble_hci_ev *) ack_ev;
   10a80:	4b05      	ldr	r3, [pc, #20]	; (10a98 <ble_hs_hci_rx_ack+0x20>)
   10a82:	6018      	str	r0, [r3, #0]
    return (ble_npl_error_t)os_sem_release(&sem->sem);
   10a84:	4803      	ldr	r0, [pc, #12]	; (10a94 <ble_hs_hci_rx_ack+0x1c>)
   10a86:	f00b f995 	bl	1bdb4 <os_sem_release>
}
   10a8a:	bd08      	pop	{r3, pc}
        ble_hci_trans_buf_free(ack_ev);
   10a8c:	f005 fd6c 	bl	16568 <ble_hci_trans_buf_free>
        return;
   10a90:	e7fb      	b.n	10a8a <ble_hs_hci_rx_ack+0x12>
   10a92:	bf00      	nop
   10a94:	20007568 	.word	0x20007568
   10a98:	20007410 	.word	0x20007410

00010a9c <ble_hs_hci_frag_alloc>:
/**
 * Allocates an mbuf to contain an outgoing ACL data fragment.
 */
static struct os_mbuf *
ble_hs_hci_frag_alloc(uint16_t frag_size, void *arg)
{
   10a9c:	b508      	push	{r3, lr}
    struct os_mbuf *om;

    /* Prefer the dedicated one-element fragment pool. */
    om = os_mbuf_get_pkthdr(&ble_hs_hci_frag_mbuf_pool, 0);
   10a9e:	2100      	movs	r1, #0
   10aa0:	4806      	ldr	r0, [pc, #24]	; (10abc <ble_hs_hci_frag_alloc+0x20>)
   10aa2:	f7f9 fb78 	bl	a196 <os_mbuf_get_pkthdr>
    if (om != NULL) {
   10aa6:	b128      	cbz	r0, 10ab4 <ble_hs_hci_frag_alloc+0x18>
   10aa8:	4603      	mov	r3, r0
        om->om_data += BLE_HCI_DATA_HDR_SZ;
   10aaa:	6802      	ldr	r2, [r0, #0]
   10aac:	3204      	adds	r2, #4
   10aae:	6002      	str	r2, [r0, #0]
    if (om != NULL) {
        return om;
    }

    return NULL;
}
   10ab0:	4618      	mov	r0, r3
   10ab2:	bd08      	pop	{r3, pc}
    om = ble_hs_mbuf_acl_pkt();
   10ab4:	f000 fd57 	bl	11566 <ble_hs_mbuf_acl_pkt>
   10ab8:	4603      	mov	r3, r0
   10aba:	e7f9      	b.n	10ab0 <ble_hs_hci_frag_alloc+0x14>
   10abc:	20007534 	.word	0x20007534

00010ac0 <ble_hs_hci_acl_hdr_prepend>:
}

static struct os_mbuf *
ble_hs_hci_acl_hdr_prepend(struct os_mbuf *om, uint16_t handle,
                           uint8_t pb_flag)
{
   10ac0:	b510      	push	{r4, lr}
   10ac2:	b082      	sub	sp, #8
   10ac4:	4604      	mov	r4, r0
   10ac6:	4608      	mov	r0, r1
   10ac8:	4611      	mov	r1, r2
    struct hci_data_hdr hci_hdr;
    struct os_mbuf *om2;

    put_le16(&hci_hdr.hdh_handle_pb_bc,
   10aca:	2200      	movs	r2, #0
   10acc:	f000 fbc6 	bl	1125c <ble_hs_hci_util_handle_pb_bc_join>
   10ad0:	4601      	mov	r1, r0
   10ad2:	a801      	add	r0, sp, #4
   10ad4:	f00b f884 	bl	1bbe0 <put_le16>
             ble_hs_hci_util_handle_pb_bc_join(handle, pb_flag, 0));
    put_le16(&hci_hdr.hdh_len, OS_MBUF_PKTHDR(om)->omp_len);
   10ad8:	8a21      	ldrh	r1, [r4, #16]
   10ada:	f10d 0006 	add.w	r0, sp, #6
   10ade:	f00b f87f 	bl	1bbe0 <put_le16>

    om2 = os_mbuf_prepend(om, sizeof hci_hdr);
   10ae2:	2104      	movs	r1, #4
   10ae4:	4620      	mov	r0, r4
   10ae6:	f7f9 fd39 	bl	a55c <os_mbuf_prepend>
    if (om2 == NULL) {
   10aea:	4604      	mov	r4, r0
   10aec:	b158      	cbz	r0, 10b06 <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    om = om2;
    om = os_mbuf_pullup(om, sizeof hci_hdr);
   10aee:	2104      	movs	r1, #4
   10af0:	f7f9 fe2f 	bl	a752 <os_mbuf_pullup>
    if (om == NULL) {
   10af4:	4604      	mov	r4, r0
   10af6:	b130      	cbz	r0, 10b06 <ble_hs_hci_acl_hdr_prepend+0x46>
        return NULL;
    }

    memcpy(om->om_data, &hci_hdr, sizeof hci_hdr);
   10af8:	6803      	ldr	r3, [r0, #0]
   10afa:	9a01      	ldr	r2, [sp, #4]
   10afc:	601a      	str	r2, [r3, #0]

#if !BLE_MONITOR
    BLE_HS_LOG(DEBUG, "host tx hci data; handle=%d length=%d\n", handle,
   10afe:	f10d 0006 	add.w	r0, sp, #6
   10b02:	f00b f88e 	bl	1bc22 <get_le16>
               get_le16(&hci_hdr.hdh_len));
#endif

    return om;
}
   10b06:	4620      	mov	r0, r4
   10b08:	b002      	add	sp, #8
   10b0a:	bd10      	pop	{r4, pc}

00010b0c <ble_hs_hci_set_buf_sz>:
    if (pktlen == 0 || max_pkts == 0) {
   10b0c:	b130      	cbz	r0, 10b1c <ble_hs_hci_set_buf_sz+0x10>
   10b0e:	b139      	cbz	r1, 10b20 <ble_hs_hci_set_buf_sz+0x14>
    ble_hs_hci_buf_sz = pktlen;
   10b10:	4a04      	ldr	r2, [pc, #16]	; (10b24 <ble_hs_hci_set_buf_sz+0x18>)
   10b12:	8010      	strh	r0, [r2, #0]
    ble_hs_hci_avail_pkts = max_pkts;
   10b14:	4b04      	ldr	r3, [pc, #16]	; (10b28 <ble_hs_hci_set_buf_sz+0x1c>)
   10b16:	8019      	strh	r1, [r3, #0]
    return 0;
   10b18:	2000      	movs	r0, #0
   10b1a:	4770      	bx	lr
        return BLE_HS_EINVAL;
   10b1c:	2003      	movs	r0, #3
   10b1e:	4770      	bx	lr
   10b20:	2003      	movs	r0, #3
}
   10b22:	4770      	bx	lr
   10b24:	20007416 	.word	0x20007416
   10b28:	20007414 	.word	0x20007414

00010b2c <ble_hs_hci_add_avail_pkts>:
{
   10b2c:	b508      	push	{r3, lr}
    if (ble_hs_hci_avail_pkts + delta > UINT16_MAX) {
   10b2e:	4b07      	ldr	r3, [pc, #28]	; (10b4c <ble_hs_hci_add_avail_pkts+0x20>)
   10b30:	881b      	ldrh	r3, [r3, #0]
   10b32:	181a      	adds	r2, r3, r0
   10b34:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
   10b38:	da03      	bge.n	10b42 <ble_hs_hci_add_avail_pkts+0x16>
        ble_hs_hci_avail_pkts += delta;
   10b3a:	4403      	add	r3, r0
   10b3c:	4a03      	ldr	r2, [pc, #12]	; (10b4c <ble_hs_hci_add_avail_pkts+0x20>)
   10b3e:	8013      	strh	r3, [r2, #0]
}
   10b40:	bd08      	pop	{r3, pc}
        ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   10b42:	200c      	movs	r0, #12
   10b44:	f7ff f8ae 	bl	fca4 <ble_hs_sched_reset>
   10b48:	e7fa      	b.n	10b40 <ble_hs_hci_add_avail_pkts+0x14>
   10b4a:	bf00      	nop
   10b4c:	20007414 	.word	0x20007414

00010b50 <ble_hs_hci_cmd_tx>:
{
   10b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10b54:	b084      	sub	sp, #16
   10b56:	4605      	mov	r5, r0
   10b58:	460c      	mov	r4, r1
   10b5a:	4616      	mov	r6, r2
   10b5c:	4698      	mov	r8, r3
   10b5e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
    ble_hs_hci_lock();
   10b62:	f7ff ff27 	bl	109b4 <ble_hs_hci_lock>
    rc = ble_hs_hci_cmd_send_buf(opcode, cmd, cmd_len);
   10b66:	4632      	mov	r2, r6
   10b68:	4621      	mov	r1, r4
   10b6a:	4628      	mov	r0, r5
   10b6c:	f000 f902 	bl	10d74 <ble_hs_hci_cmd_send_buf>
    if (rc != 0) {
   10b70:	4604      	mov	r4, r0
   10b72:	b168      	cbz	r0, 10b90 <ble_hs_hci_cmd_tx+0x40>
    if (ble_hs_hci_ack != NULL) {
   10b74:	4b14      	ldr	r3, [pc, #80]	; (10bc8 <ble_hs_hci_cmd_tx+0x78>)
   10b76:	6818      	ldr	r0, [r3, #0]
   10b78:	b120      	cbz	r0, 10b84 <ble_hs_hci_cmd_tx+0x34>
        ble_hci_trans_buf_free((uint8_t *) ble_hs_hci_ack);
   10b7a:	f005 fcf5 	bl	16568 <ble_hci_trans_buf_free>
        ble_hs_hci_ack = NULL;
   10b7e:	4b12      	ldr	r3, [pc, #72]	; (10bc8 <ble_hs_hci_cmd_tx+0x78>)
   10b80:	2200      	movs	r2, #0
   10b82:	601a      	str	r2, [r3, #0]
    ble_hs_hci_unlock();
   10b84:	f7ff ff70 	bl	10a68 <ble_hs_hci_unlock>
}
   10b88:	4620      	mov	r0, r4
   10b8a:	b004      	add	sp, #16
   10b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_hs_hci_wait_for_ack();
   10b90:	f7ff ff1a 	bl	109c8 <ble_hs_hci_wait_for_ack>
    if (rc != 0) {
   10b94:	4604      	mov	r4, r0
   10b96:	b110      	cbz	r0, 10b9e <ble_hs_hci_cmd_tx+0x4e>
        ble_hs_sched_reset(rc);
   10b98:	f7ff f884 	bl	fca4 <ble_hs_sched_reset>
        goto done;
   10b9c:	e7ea      	b.n	10b74 <ble_hs_hci_cmd_tx+0x24>
    rc = ble_hs_hci_process_ack(opcode, rsp, rsp_len, &ack);
   10b9e:	466b      	mov	r3, sp
   10ba0:	463a      	mov	r2, r7
   10ba2:	4641      	mov	r1, r8
   10ba4:	4628      	mov	r0, r5
   10ba6:	f7ff ff21 	bl	109ec <ble_hs_hci_process_ack>
    if (rc != 0) {
   10baa:	4604      	mov	r4, r0
   10bac:	b948      	cbnz	r0, 10bc2 <ble_hs_hci_cmd_tx+0x72>
    rc = ack.bha_status;
   10bae:	9c00      	ldr	r4, [sp, #0]
    if (!rc && (ack.bha_params_len != rsp_len)) {
   10bb0:	2c00      	cmp	r4, #0
   10bb2:	d1df      	bne.n	10b74 <ble_hs_hci_cmd_tx+0x24>
   10bb4:	9b02      	ldr	r3, [sp, #8]
   10bb6:	42bb      	cmp	r3, r7
   10bb8:	d0dc      	beq.n	10b74 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   10bba:	4620      	mov	r0, r4
   10bbc:	f7ff f872 	bl	fca4 <ble_hs_sched_reset>
        goto done;
   10bc0:	e7d8      	b.n	10b74 <ble_hs_hci_cmd_tx+0x24>
        ble_hs_sched_reset(rc);
   10bc2:	f7ff f86f 	bl	fca4 <ble_hs_sched_reset>
        goto done;
   10bc6:	e7d5      	b.n	10b74 <ble_hs_hci_cmd_tx+0x24>
   10bc8:	20007410 	.word	0x20007410

00010bcc <ble_hs_hci_rx_evt>:
{
   10bcc:	b508      	push	{r3, lr}
    switch (ev->opcode) {
   10bce:	7803      	ldrb	r3, [r0, #0]
   10bd0:	2b0e      	cmp	r3, #14
   10bd2:	d006      	beq.n	10be2 <ble_hs_hci_rx_evt+0x16>
   10bd4:	2b0f      	cmp	r3, #15
   10bd6:	d10a      	bne.n	10bee <ble_hs_hci_rx_evt+0x22>
        enqueue = (cmd_status->opcode == BLE_HCI_OPCODE_NOP);
   10bd8:	8883      	ldrh	r3, [r0, #4]
   10bda:	fab3 f383 	clz	r3, r3
   10bde:	095b      	lsrs	r3, r3, #5
        break;
   10be0:	e004      	b.n	10bec <ble_hs_hci_rx_evt+0x20>
        enqueue = (cmd_complete->opcode == BLE_HCI_OPCODE_NOP);
   10be2:	f8b0 3003 	ldrh.w	r3, [r0, #3]
   10be6:	fab3 f383 	clz	r3, r3
   10bea:	095b      	lsrs	r3, r3, #5
    if (enqueue) {
   10bec:	b11b      	cbz	r3, 10bf6 <ble_hs_hci_rx_evt+0x2a>
        ble_hs_enqueue_hci_event(hci_ev);
   10bee:	f7ff f83b 	bl	fc68 <ble_hs_enqueue_hci_event>
}
   10bf2:	2000      	movs	r0, #0
   10bf4:	bd08      	pop	{r3, pc}
        ble_hs_hci_rx_ack(hci_ev);
   10bf6:	f7ff ff3f 	bl	10a78 <ble_hs_hci_rx_ack>
   10bfa:	e7fa      	b.n	10bf2 <ble_hs_hci_rx_evt+0x26>

00010bfc <ble_hs_hci_acl_tx_now>:

int
ble_hs_hci_acl_tx_now(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   10bfc:	b570      	push	{r4, r5, r6, lr}
   10bfe:	b082      	sub	sp, #8
   10c00:	4604      	mov	r4, r0
   10c02:	460d      	mov	r5, r1
    uint8_t pb;
    int rc;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    txom = *om;
   10c04:	680b      	ldr	r3, [r1, #0]
   10c06:	9301      	str	r3, [sp, #4]
    *om = NULL;
   10c08:	2300      	movs	r3, #0
   10c0a:	600b      	str	r3, [r1, #0]

    if (!(conn->bhc_flags & BLE_HS_CONN_F_TX_FRAG)) {
   10c0c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   10c10:	f013 0f04 	tst.w	r3, #4
   10c14:	d02e      	beq.n	10c74 <ble_hs_hci_acl_tx_now+0x78>
         * After sending the first fragment, pb gets set appropriately for all
         * subsequent fragments in this packet.
         */
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
    } else {
        pb = BLE_HCI_PB_MIDDLE;
   10c16:	2601      	movs	r6, #1
    }

    /* Send fragments until the entire packet has been sent. */
    while (txom != NULL && ble_hs_hci_avail_pkts > 0) {
   10c18:	9b01      	ldr	r3, [sp, #4]
   10c1a:	b36b      	cbz	r3, 10c78 <ble_hs_hci_acl_tx_now+0x7c>
   10c1c:	4a23      	ldr	r2, [pc, #140]	; (10cac <ble_hs_hci_acl_tx_now+0xb0>)
   10c1e:	8812      	ldrh	r2, [r2, #0]
   10c20:	b352      	cbz	r2, 10c78 <ble_hs_hci_acl_tx_now+0x7c>
        frag = mem_split_frag(&txom, ble_hs_hci_max_acl_payload_sz(),
   10c22:	f7ff fec1 	bl	109a8 <ble_hs_hci_max_acl_payload_sz>
   10c26:	2300      	movs	r3, #0
   10c28:	4a21      	ldr	r2, [pc, #132]	; (10cb0 <ble_hs_hci_acl_tx_now+0xb4>)
   10c2a:	4601      	mov	r1, r0
   10c2c:	a801      	add	r0, sp, #4
   10c2e:	f006 fae0 	bl	171f2 <mem_split_frag>
                              ble_hs_hci_frag_alloc, NULL);
        if (frag == NULL) {
   10c32:	b1d8      	cbz	r0, 10c6c <ble_hs_hci_acl_tx_now+0x70>
            *om = txom;
            return BLE_HS_EAGAIN;
        }

        frag = ble_hs_hci_acl_hdr_prepend(frag, conn->bhc_handle, pb);
   10c34:	4632      	mov	r2, r6
   10c36:	88a1      	ldrh	r1, [r4, #4]
   10c38:	f7ff ff42 	bl	10ac0 <ble_hs_hci_acl_hdr_prepend>
        if (frag == NULL) {
   10c3c:	4606      	mov	r6, r0
   10c3e:	b338      	cbz	r0, 10c90 <ble_hs_hci_acl_tx_now+0x94>
            goto err;
        }

#if !BLE_MONITOR
        BLE_HS_LOG(DEBUG, "ble_hs_hci_acl_tx(): ");
        ble_hs_log_mbuf(frag);
   10c40:	f000 fc64 	bl	1150c <ble_hs_log_mbuf>
        BLE_HS_LOG(DEBUG, "\n");
#endif

        rc = ble_hs_tx_data(frag);
   10c44:	4630      	mov	r0, r6
   10c46:	f7ff f892 	bl	fd6e <ble_hs_tx_data>
        if (rc != 0) {
   10c4a:	4606      	mov	r6, r0
   10c4c:	bb08      	cbnz	r0, 10c92 <ble_hs_hci_acl_tx_now+0x96>
        }

        /* If any fragments remain, they should be marked as 'middle'
         * fragments.
         */
        conn->bhc_flags |= BLE_HS_CONN_F_TX_FRAG;
   10c4e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10c52:	f043 0304 	orr.w	r3, r3, #4
   10c56:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        pb = BLE_HCI_PB_MIDDLE;

        /* Account for the controller buf that will hold the txed fragment. */
        conn->bhc_outstanding_pkts++;
   10c5a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   10c5c:	3301      	adds	r3, #1
   10c5e:	8723      	strh	r3, [r4, #56]	; 0x38
        ble_hs_hci_avail_pkts--;
   10c60:	4a12      	ldr	r2, [pc, #72]	; (10cac <ble_hs_hci_acl_tx_now+0xb0>)
   10c62:	8813      	ldrh	r3, [r2, #0]
   10c64:	3b01      	subs	r3, #1
   10c66:	8013      	strh	r3, [r2, #0]
        pb = BLE_HCI_PB_MIDDLE;
   10c68:	2601      	movs	r6, #1
   10c6a:	e7d5      	b.n	10c18 <ble_hs_hci_acl_tx_now+0x1c>
            *om = txom;
   10c6c:	9b01      	ldr	r3, [sp, #4]
   10c6e:	602b      	str	r3, [r5, #0]
            return BLE_HS_EAGAIN;
   10c70:	2601      	movs	r6, #1
   10c72:	e017      	b.n	10ca4 <ble_hs_hci_acl_tx_now+0xa8>
        pb = BLE_HCI_PB_FIRST_NON_FLUSH;
   10c74:	2600      	movs	r6, #0
   10c76:	e7cf      	b.n	10c18 <ble_hs_hci_acl_tx_now+0x1c>
    }

    if (txom != NULL) {
   10c78:	b113      	cbz	r3, 10c80 <ble_hs_hci_acl_tx_now+0x84>
        /* The controller couldn't accommodate some or all of the packet. */
        *om = txom;
   10c7a:	602b      	str	r3, [r5, #0]
        return BLE_HS_EAGAIN;
   10c7c:	2601      	movs	r6, #1
   10c7e:	e011      	b.n	10ca4 <ble_hs_hci_acl_tx_now+0xa8>
    }

    /* The entire packet was transmitted. */
    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   10c80:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10c84:	f023 0304 	bic.w	r3, r3, #4
   10c88:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28

    return 0;
   10c8c:	2600      	movs	r6, #0
   10c8e:	e009      	b.n	10ca4 <ble_hs_hci_acl_tx_now+0xa8>
            rc = BLE_HS_ENOMEM;
   10c90:	2606      	movs	r6, #6

err:
    BLE_HS_DBG_ASSERT(rc != 0);

    conn->bhc_flags &= ~BLE_HS_CONN_F_TX_FRAG;
   10c92:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   10c96:	f023 0304 	bic.w	r3, r3, #4
   10c9a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    os_mbuf_free_chain(txom);
   10c9e:	9801      	ldr	r0, [sp, #4]
   10ca0:	f7f9 fa9e 	bl	a1e0 <os_mbuf_free_chain>
    return rc;
}
   10ca4:	4630      	mov	r0, r6
   10ca6:	b002      	add	sp, #8
   10ca8:	bd70      	pop	{r4, r5, r6, pc}
   10caa:	bf00      	nop
   10cac:	20007414 	.word	0x20007414
   10cb0:	00010a9d 	.word	0x00010a9d

00010cb4 <ble_hs_hci_acl_tx>:
 *                                  error.
 *
 */
int
ble_hs_hci_acl_tx(struct ble_hs_conn *conn, struct os_mbuf **om)
{
   10cb4:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    /* If this conn is already backed up, don't even try to send. */
    if (STAILQ_FIRST(&conn->bhc_tx_q) != NULL) {
   10cb6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   10cb8:	b10b      	cbz	r3, 10cbe <ble_hs_hci_acl_tx+0xa>
        return BLE_HS_EAGAIN;
   10cba:	2001      	movs	r0, #1
    }

    return ble_hs_hci_acl_tx_now(conn, om);
}
   10cbc:	bd08      	pop	{r3, pc}
    return ble_hs_hci_acl_tx_now(conn, om);
   10cbe:	f7ff ff9d 	bl	10bfc <ble_hs_hci_acl_tx_now>
   10cc2:	e7fb      	b.n	10cbc <ble_hs_hci_acl_tx+0x8>

00010cc4 <ble_hs_hci_set_le_supported_feat>:

void
ble_hs_hci_set_le_supported_feat(uint32_t feat)
{
    ble_hs_hci_sup_feat = feat;
   10cc4:	4b01      	ldr	r3, [pc, #4]	; (10ccc <ble_hs_hci_set_le_supported_feat+0x8>)
   10cc6:	6018      	str	r0, [r3, #0]
}
   10cc8:	4770      	bx	lr
   10cca:	bf00      	nop
   10ccc:	20007570 	.word	0x20007570

00010cd0 <ble_hs_hci_set_hci_version>:
}

void
ble_hs_hci_set_hci_version(uint8_t hci_version)
{
    ble_hs_hci_version = hci_version;
   10cd0:	4b01      	ldr	r3, [pc, #4]	; (10cd8 <ble_hs_hci_set_hci_version+0x8>)
   10cd2:	7018      	strb	r0, [r3, #0]
}
   10cd4:	4770      	bx	lr
   10cd6:	bf00      	nop
   10cd8:	20007574 	.word	0x20007574

00010cdc <ble_hs_hci_get_hci_version>:

uint8_t
ble_hs_hci_get_hci_version(void)
{
    return ble_hs_hci_version;
}
   10cdc:	4b01      	ldr	r3, [pc, #4]	; (10ce4 <ble_hs_hci_get_hci_version+0x8>)
   10cde:	7818      	ldrb	r0, [r3, #0]
   10ce0:	4770      	bx	lr
   10ce2:	bf00      	nop
   10ce4:	20007574 	.word	0x20007574

00010ce8 <ble_hs_hci_init>:

void
ble_hs_hci_init(void)
{
   10ce8:	b500      	push	{lr}
   10cea:	b083      	sub	sp, #12
    return (ble_npl_error_t)os_sem_init(&sem->sem, tokens);
   10cec:	2100      	movs	r1, #0
   10cee:	480a      	ldr	r0, [pc, #40]	; (10d18 <ble_hs_hci_init+0x30>)
   10cf0:	f00b f857 	bl	1bda2 <os_sem_init>
    return (ble_npl_error_t)os_mutex_init(&mu->mu);
   10cf4:	4809      	ldr	r0, [pc, #36]	; (10d1c <ble_hs_hci_init+0x34>)
   10cf6:	f7f9 ffbb 	bl	ac70 <os_mutex_init>
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = ble_npl_mutex_init(&ble_hs_hci_mutex);
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);

    rc = mem_init_mbuf_pool(ble_hs_hci_frag_data,
   10cfa:	4b09      	ldr	r3, [pc, #36]	; (10d20 <ble_hs_hci_init+0x38>)
   10cfc:	9301      	str	r3, [sp, #4]
   10cfe:	f44f 738e 	mov.w	r3, #284	; 0x11c
   10d02:	9300      	str	r3, [sp, #0]
   10d04:	2301      	movs	r3, #1
   10d06:	4a07      	ldr	r2, [pc, #28]	; (10d24 <ble_hs_hci_init+0x3c>)
   10d08:	4907      	ldr	r1, [pc, #28]	; (10d28 <ble_hs_hci_init+0x40>)
   10d0a:	4808      	ldr	r0, [pc, #32]	; (10d2c <ble_hs_hci_init+0x44>)
   10d0c:	f006 fa59 	bl	171c2 <mem_init_mbuf_pool>
                            &ble_hs_hci_frag_mbuf_pool,
                            1,
                            BLE_HS_HCI_FRAG_MEMBLOCK_SIZE,
                            "ble_hs_hci_frag");
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}
   10d10:	b003      	add	sp, #12
   10d12:	f85d fb04 	ldr.w	pc, [sp], #4
   10d16:	bf00      	nop
   10d18:	20007568 	.word	0x20007568
   10d1c:	2000755c 	.word	0x2000755c
   10d20:	00028dcc 	.word	0x00028dcc
   10d24:	20007534 	.word	0x20007534
   10d28:	20007540 	.word	0x20007540
   10d2c:	20007418 	.word	0x20007418

00010d30 <ble_hs_hci_cmd_transport>:
#include "ble_hs_priv.h"
#include "ble_monitor_priv.h"

static int
ble_hs_hci_cmd_transport(struct ble_hci_cmd *cmd)
{
   10d30:	b508      	push	{r3, lr}
#if BLE_MONITOR
    ble_monitor_send(BLE_MONITOR_OPCODE_COMMAND_PKT, cmd,
                     cmd->length + sizeof(*cmd));
#endif

    rc = ble_hci_trans_hs_cmd_tx((uint8_t *) cmd);
   10d32:	f005 fb93 	bl	1645c <ble_hci_trans_hs_cmd_tx>
    switch (rc) {
   10d36:	4603      	mov	r3, r0
   10d38:	b110      	cbz	r0, 10d40 <ble_hs_hci_cmd_transport+0x10>
   10d3a:	2807      	cmp	r0, #7
   10d3c:	d002      	beq.n	10d44 <ble_hs_hci_cmd_transport+0x14>

    case BLE_ERR_MEM_CAPACITY:
        return BLE_HS_ENOMEM_EVT;

    default:
        return BLE_HS_EUNKNOWN;
   10d3e:	2311      	movs	r3, #17
    }
}
   10d40:	4618      	mov	r0, r3
   10d42:	bd08      	pop	{r3, pc}
        return BLE_HS_ENOMEM_EVT;
   10d44:	2314      	movs	r3, #20
   10d46:	e7fb      	b.n	10d40 <ble_hs_hci_cmd_transport+0x10>

00010d48 <ble_hs_hci_cmd_send>:

static int
ble_hs_hci_cmd_send(uint16_t opcode, uint8_t len, const void *cmddata)
{
   10d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d4a:	4606      	mov	r6, r0
   10d4c:	460d      	mov	r5, r1
   10d4e:	4617      	mov	r7, r2
    struct ble_hci_cmd *cmd;
    int rc;

    cmd = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_CMD);
   10d50:	2003      	movs	r0, #3
   10d52:	f005 fbdb 	bl	1650c <ble_hci_trans_buf_alloc>
   10d56:	4604      	mov	r4, r0
    BLE_HS_DBG_ASSERT(cmd != NULL);

    cmd->opcode = htole16(opcode);
   10d58:	8006      	strh	r6, [r0, #0]
    cmd->length = len;
   10d5a:	7085      	strb	r5, [r0, #2]
    if (len != 0) {
   10d5c:	b91d      	cbnz	r5, 10d66 <ble_hs_hci_cmd_send+0x1e>
        memcpy(cmd->data, cmddata, len);
    }

    rc = ble_hs_hci_cmd_transport(cmd);
   10d5e:	4620      	mov	r0, r4
   10d60:	f7ff ffe6 	bl	10d30 <ble_hs_hci_cmd_transport>
    } else {
        BLE_HS_LOG(DEBUG, "ble_hs_hci_cmd_send failure; rc=%d\n", rc);
    }

    return rc;
}
   10d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(cmd->data, cmddata, len);
   10d66:	462a      	mov	r2, r5
   10d68:	4639      	mov	r1, r7
   10d6a:	3003      	adds	r0, #3
   10d6c:	f7fa fd1e 	bl	b7ac <memcpy>
   10d70:	e7f5      	b.n	10d5e <ble_hs_hci_cmd_send+0x16>
	...

00010d74 <ble_hs_hci_cmd_send_buf>:

int
ble_hs_hci_cmd_send_buf(uint16_t opcode, const void *buf, uint8_t buf_len)
{
   10d74:	b570      	push	{r4, r5, r6, lr}
   10d76:	4604      	mov	r4, r0
   10d78:	460e      	mov	r6, r1
   10d7a:	4615      	mov	r5, r2
    switch (ble_hs_sync_state) {
   10d7c:	4b0a      	ldr	r3, [pc, #40]	; (10da8 <ble_hs_hci_cmd_send_buf+0x34>)
   10d7e:	781b      	ldrb	r3, [r3, #0]
   10d80:	2b01      	cmp	r3, #1
   10d82:	d006      	beq.n	10d92 <ble_hs_hci_cmd_send_buf+0x1e>
   10d84:	b11b      	cbz	r3, 10d8e <ble_hs_hci_cmd_send_buf+0x1a>
   10d86:	2b02      	cmp	r3, #2
   10d88:	d006      	beq.n	10d98 <ble_hs_hci_cmd_send_buf+0x24>
    case BLE_HS_SYNC_STATE_GOOD:
        break;

    default:
        BLE_HS_DBG_ASSERT(0);
        return BLE_HS_EUNKNOWN;
   10d8a:	2011      	movs	r0, #17
   10d8c:	e009      	b.n	10da2 <ble_hs_hci_cmd_send_buf+0x2e>
        return BLE_HS_ENOTSYNCED;
   10d8e:	2016      	movs	r0, #22
   10d90:	e007      	b.n	10da2 <ble_hs_hci_cmd_send_buf+0x2e>
        if (!ble_hs_is_parent_task()) {
   10d92:	f7fe fe63 	bl	fa5c <ble_hs_is_parent_task>
   10d96:	b128      	cbz	r0, 10da4 <ble_hs_hci_cmd_send_buf+0x30>
    }

    return ble_hs_hci_cmd_send(opcode, buf_len, buf);
   10d98:	4632      	mov	r2, r6
   10d9a:	4629      	mov	r1, r5
   10d9c:	4620      	mov	r0, r4
   10d9e:	f7ff ffd3 	bl	10d48 <ble_hs_hci_cmd_send>
}
   10da2:	bd70      	pop	{r4, r5, r6, pc}
            return BLE_HS_ENOTSYNCED;
   10da4:	2016      	movs	r0, #22
   10da6:	e7fc      	b.n	10da2 <ble_hs_hci_cmd_send_buf+0x2e>
   10da8:	20007360 	.word	0x20007360

00010dac <ble_hs_hci_evt_dispatch_find>:
ble_hs_hci_evt_dispatch_find(uint8_t event_code)
{
    const struct ble_hs_hci_evt_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   10dac:	2300      	movs	r3, #0
   10dae:	2b05      	cmp	r3, #5
   10db0:	d808      	bhi.n	10dc4 <ble_hs_hci_evt_dispatch_find+0x18>
        entry = ble_hs_hci_evt_dispatch + i;
   10db2:	4a06      	ldr	r2, [pc, #24]	; (10dcc <ble_hs_hci_evt_dispatch_find+0x20>)
   10db4:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
        if (entry->event_code == event_code) {
   10db8:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   10dbc:	4282      	cmp	r2, r0
   10dbe:	d002      	beq.n	10dc6 <ble_hs_hci_evt_dispatch_find+0x1a>
    for (i = 0; i < BLE_HS_HCI_EVT_DISPATCH_SZ; i++) {
   10dc0:	3301      	adds	r3, #1
   10dc2:	e7f4      	b.n	10dae <ble_hs_hci_evt_dispatch_find+0x2>
            return entry;
        }
    }

    return NULL;
   10dc4:	2100      	movs	r1, #0
}
   10dc6:	4608      	mov	r0, r1
   10dc8:	4770      	bx	lr
   10dca:	bf00      	nop
   10dcc:	00028ddc 	.word	0x00028ddc

00010dd0 <ble_hs_hci_evt_le_dispatch_find>:

static ble_hs_hci_evt_le_fn *
ble_hs_hci_evt_le_dispatch_find(uint8_t event_code)
{
    if (event_code >= BLE_HS_HCI_EVT_LE_DISPATCH_SZ) {
   10dd0:	2818      	cmp	r0, #24
   10dd2:	d803      	bhi.n	10ddc <ble_hs_hci_evt_le_dispatch_find+0xc>
        return NULL;
    }

    return ble_hs_hci_evt_le_dispatch[event_code];
   10dd4:	4b02      	ldr	r3, [pc, #8]	; (10de0 <ble_hs_hci_evt_le_dispatch_find+0x10>)
   10dd6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   10dda:	4770      	bx	lr
        return NULL;
   10ddc:	2000      	movs	r0, #0
}
   10dde:	4770      	bx	lr
   10de0:	00028e0c 	.word	0x00028e0c

00010de4 <ble_hs_hci_evt_le_meta>:
ble_hs_hci_evt_le_meta(uint8_t event_code, const void *data, unsigned int len)
{
    const struct ble_hci_ev_le_meta *ev = data;
    ble_hs_hci_evt_le_fn *fn;

    if (len < sizeof(*ev)) {
   10de4:	b16a      	cbz	r2, 10e02 <ble_hs_hci_evt_le_meta+0x1e>
{
   10de6:	b570      	push	{r4, r5, r6, lr}
   10de8:	4615      	mov	r5, r2
   10dea:	460c      	mov	r4, r1
        return BLE_HS_ECONTROLLER;
    }

    fn = ble_hs_hci_evt_le_dispatch_find(ev->subevent);
   10dec:	780e      	ldrb	r6, [r1, #0]
   10dee:	4630      	mov	r0, r6
   10df0:	f7ff ffee 	bl	10dd0 <ble_hs_hci_evt_le_dispatch_find>
    if (fn) {
   10df4:	4603      	mov	r3, r0
   10df6:	b130      	cbz	r0, 10e06 <ble_hs_hci_evt_le_meta+0x22>
        return fn(ev->subevent, data, len);
   10df8:	462a      	mov	r2, r5
   10dfa:	4621      	mov	r1, r4
   10dfc:	4630      	mov	r0, r6
   10dfe:	4798      	blx	r3
    }

    return 0;
}
   10e00:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   10e02:	200c      	movs	r0, #12
}
   10e04:	4770      	bx	lr
    return 0;
   10e06:	2000      	movs	r0, #0
   10e08:	e7fa      	b.n	10e00 <ble_hs_hci_evt_le_meta+0x1c>

00010e0a <ble_hs_hci_evt_le_adv_rpt_first_pass>:
{
    const struct ble_hci_ev_le_subev_adv_rpt *ev = data;
    const struct adv_report *rpt;
    int i;

    if (len < sizeof(*ev)) {
   10e0a:	2901      	cmp	r1, #1
   10e0c:	d91a      	bls.n	10e44 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3a>
{
   10e0e:	b410      	push	{r4}
        return BLE_HS_ECONTROLLER;
    }

    len -= sizeof(*ev);
   10e10:	3902      	subs	r1, #2
    data += sizeof(*ev);
   10e12:	1c84      	adds	r4, r0, #2

    if (ev->num_reports < BLE_HCI_LE_ADV_RPT_NUM_RPTS_MIN ||
   10e14:	7840      	ldrb	r0, [r0, #1]
   10e16:	1e43      	subs	r3, r0, #1
   10e18:	b2db      	uxtb	r3, r3
   10e1a:	2b18      	cmp	r3, #24
   10e1c:	d814      	bhi.n	10e48 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x3e>
        ev->num_reports > BLE_HCI_LE_ADV_RPT_NUM_RPTS_MAX) {
        return BLE_HS_EBADDATA;
    }

    for (i = 0; i < ev->num_reports; i++) {
   10e1e:	2200      	movs	r2, #0
   10e20:	4290      	cmp	r0, r2
   10e22:	dd0a      	ble.n	10e3a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x30>
        /* extra byte for RSSI after adv data */
        if (len < sizeof(*rpt) + 1) {
   10e24:	2909      	cmp	r1, #9
   10e26:	d913      	bls.n	10e50 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x46>
            return BLE_HS_ECONTROLLER;
        }

        rpt = data;

        len -= sizeof(*rpt) + 1;
   10e28:	390a      	subs	r1, #10
        data += sizeof(rpt) + 1;

        if (rpt->data_len > len) {
   10e2a:	7a23      	ldrb	r3, [r4, #8]
   10e2c:	428b      	cmp	r3, r1
   10e2e:	d811      	bhi.n	10e54 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x4a>
            return BLE_HS_ECONTROLLER;
        }

        len -= rpt->data_len;
   10e30:	1ac9      	subs	r1, r1, r3
        data += rpt->data_len;
   10e32:	3305      	adds	r3, #5
   10e34:	441c      	add	r4, r3
    for (i = 0; i < ev->num_reports; i++) {
   10e36:	3201      	adds	r2, #1
   10e38:	e7f2      	b.n	10e20 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x16>
    }

    /* Make sure length was correct */
    if (len) {
   10e3a:	b909      	cbnz	r1, 10e40 <ble_hs_hci_evt_le_adv_rpt_first_pass+0x36>
        return BLE_HS_ECONTROLLER;
    }

    return 0;
   10e3c:	2000      	movs	r0, #0
   10e3e:	e004      	b.n	10e4a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>
        return BLE_HS_ECONTROLLER;
   10e40:	200c      	movs	r0, #12
   10e42:	e002      	b.n	10e4a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>
        return BLE_HS_ECONTROLLER;
   10e44:	200c      	movs	r0, #12
}
   10e46:	4770      	bx	lr
        return BLE_HS_EBADDATA;
   10e48:	200a      	movs	r0, #10
}
   10e4a:	f85d 4b04 	ldr.w	r4, [sp], #4
   10e4e:	4770      	bx	lr
            return BLE_HS_ECONTROLLER;
   10e50:	200c      	movs	r0, #12
   10e52:	e7fa      	b.n	10e4a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>
            return BLE_HS_ECONTROLLER;
   10e54:	200c      	movs	r0, #12
   10e56:	e7f8      	b.n	10e4a <ble_hs_hci_evt_le_adv_rpt_first_pass+0x40>

00010e58 <ble_hs_hci_evt_le_ext_adv_rpt>:

        report = (const void *) &report->data[report->data_len];
    }
#endif
    return 0;
}
   10e58:	2000      	movs	r0, #0
   10e5a:	4770      	bx	lr

00010e5c <ble_hs_hci_evt_le_periodic_adv_sync_estab>:

    ble_gap_rx_peroidic_adv_sync_estab(ev);
#endif

    return 0;
}
   10e5c:	2000      	movs	r0, #0
   10e5e:	4770      	bx	lr

00010e60 <ble_hs_hci_evt_le_periodic_adv_rpt>:

    ble_gap_rx_periodic_adv_rpt(ev);
#endif

return 0;
}
   10e60:	2000      	movs	r0, #0
   10e62:	4770      	bx	lr

00010e64 <ble_hs_hci_evt_le_periodic_adv_sync_lost>:

    ble_gap_rx_periodic_adv_sync_lost(ev);

#endif
    return 0;
}
   10e64:	2000      	movs	r0, #0
   10e66:	4770      	bx	lr

00010e68 <ble_hs_hci_evt_le_periodic_adv_sync_transfer>:

    ble_gap_rx_periodic_adv_sync_transfer(ev);

#endif
    return 0;
}
   10e68:	2000      	movs	r0, #0
   10e6a:	4770      	bx	lr

00010e6c <ble_hs_hci_evt_le_scan_timeout>:
    }

    ble_gap_rx_le_scan_timeout();
#endif
    return 0;
}
   10e6c:	2000      	movs	r0, #0
   10e6e:	4770      	bx	lr

00010e70 <ble_hs_hci_evt_le_adv_set_terminated>:
    }
    ble_gap_rx_adv_set_terminated(ev);
#endif

    return 0;
}
   10e70:	2000      	movs	r0, #0
   10e72:	4770      	bx	lr

00010e74 <ble_hs_hci_evt_le_scan_req_rcvd>:

    ble_gap_rx_scan_req_rcvd(ev);
#endif

    return 0;
}
   10e74:	2000      	movs	r0, #0
   10e76:	4770      	bx	lr

00010e78 <ble_hs_hci_evt_hw_error>:
    if (len != sizeof(*ev)) {
   10e78:	2a01      	cmp	r2, #1
   10e7a:	d001      	beq.n	10e80 <ble_hs_hci_evt_hw_error+0x8>
        return BLE_HS_ECONTROLLER;
   10e7c:	200c      	movs	r0, #12
}
   10e7e:	4770      	bx	lr
{
   10e80:	b508      	push	{r3, lr}
    ble_hs_hw_error(ev->hw_code);
   10e82:	7808      	ldrb	r0, [r1, #0]
   10e84:	f7fe ff1e 	bl	fcc4 <ble_hs_hw_error>
    return 0;
   10e88:	2000      	movs	r0, #0
}
   10e8a:	bd08      	pop	{r3, pc}

00010e8c <ble_hs_hci_evt_enc_key_refresh>:
    if (len != sizeof(*ev)) {
   10e8c:	2a03      	cmp	r2, #3
   10e8e:	d001      	beq.n	10e94 <ble_hs_hci_evt_enc_key_refresh+0x8>
        return BLE_HS_ECONTROLLER;
   10e90:	200c      	movs	r0, #12
}
   10e92:	4770      	bx	lr
{
   10e94:	b508      	push	{r3, lr}
   10e96:	4608      	mov	r0, r1
    ble_sm_enc_key_refresh_rx(ev);
   10e98:	f002 fcb6 	bl	13808 <ble_sm_enc_key_refresh_rx>
    return 0;
   10e9c:	2000      	movs	r0, #0
}
   10e9e:	bd08      	pop	{r3, pc}

00010ea0 <ble_hs_hci_evt_encrypt_change>:
    if (len != sizeof (*ev)) {
   10ea0:	2a04      	cmp	r2, #4
   10ea2:	d001      	beq.n	10ea8 <ble_hs_hci_evt_encrypt_change+0x8>
        return BLE_HS_ECONTROLLER;
   10ea4:	200c      	movs	r0, #12
}
   10ea6:	4770      	bx	lr
{
   10ea8:	b508      	push	{r3, lr}
   10eaa:	4608      	mov	r0, r1
    ble_sm_enc_change_rx(ev);
   10eac:	f002 fca2 	bl	137f4 <ble_sm_enc_change_rx>
    return 0;
   10eb0:	2000      	movs	r0, #0
}
   10eb2:	bd08      	pop	{r3, pc}

00010eb4 <ble_hs_hci_evt_disconn_complete>:
    if (len != sizeof(*ev)) {
   10eb4:	2a04      	cmp	r2, #4
   10eb6:	d001      	beq.n	10ebc <ble_hs_hci_evt_disconn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   10eb8:	200c      	movs	r0, #12
}
   10eba:	4770      	bx	lr
{
   10ebc:	b510      	push	{r4, lr}
   10ebe:	460c      	mov	r4, r1
    ble_hs_lock();
   10ec0:	f7fe fdf0 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(le16toh(ev->conn_handle));
   10ec4:	f8b4 0001 	ldrh.w	r0, [r4, #1]
   10ec8:	f7ff fbf6 	bl	106b8 <ble_hs_conn_find>
    if (conn != NULL) {
   10ecc:	b110      	cbz	r0, 10ed4 <ble_hs_hci_evt_disconn_complete+0x20>
        ble_hs_hci_add_avail_pkts(conn->bhc_outstanding_pkts);
   10ece:	8f00      	ldrh	r0, [r0, #56]	; 0x38
   10ed0:	f7ff fe2c 	bl	10b2c <ble_hs_hci_add_avail_pkts>
    ble_hs_unlock();
   10ed4:	f7fe fdea 	bl	faac <ble_hs_unlock>
    ble_gap_rx_disconn_complete(ev);
   10ed8:	4620      	mov	r0, r4
   10eda:	f7fc fae7 	bl	d4ac <ble_gap_rx_disconn_complete>
    ble_hs_wakeup_tx();
   10ede:	f7fe fdfb 	bl	fad8 <ble_hs_wakeup_tx>
    return 0;
   10ee2:	2000      	movs	r0, #0
}
   10ee4:	bd10      	pop	{r4, pc}

00010ee6 <ble_hs_hci_evt_num_completed_pkts>:
    if (len != sizeof(*ev) + (ev->count * sizeof(ev->completed[0]))) {
   10ee6:	780b      	ldrb	r3, [r1, #0]
   10ee8:	009b      	lsls	r3, r3, #2
   10eea:	3301      	adds	r3, #1
   10eec:	4293      	cmp	r3, r2
   10eee:	d129      	bne.n	10f44 <ble_hs_hci_evt_num_completed_pkts+0x5e>
{
   10ef0:	b570      	push	{r4, r5, r6, lr}
   10ef2:	460d      	mov	r5, r1
    for (i = 0; i < ev->count; i++) {
   10ef4:	2400      	movs	r4, #0
   10ef6:	e007      	b.n	10f08 <ble_hs_hci_evt_num_completed_pkts+0x22>
                    conn->bhc_outstanding_pkts -= num_pkts;
   10ef8:	1b9b      	subs	r3, r3, r6
   10efa:	8703      	strh	r3, [r0, #56]	; 0x38
                ble_hs_hci_add_avail_pkts(num_pkts);
   10efc:	4630      	mov	r0, r6
   10efe:	f7ff fe15 	bl	10b2c <ble_hs_hci_add_avail_pkts>
            ble_hs_unlock();
   10f02:	f7fe fdd3 	bl	faac <ble_hs_unlock>
    for (i = 0; i < ev->count; i++) {
   10f06:	3401      	adds	r4, #1
   10f08:	782b      	ldrb	r3, [r5, #0]
   10f0a:	42a3      	cmp	r3, r4
   10f0c:	dd16      	ble.n	10f3c <ble_hs_hci_evt_num_completed_pkts+0x56>
        num_pkts = le16toh(ev->completed[i].packets);
   10f0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   10f12:	f8b3 6003 	ldrh.w	r6, [r3, #3]
        if (num_pkts > 0) {
   10f16:	2e00      	cmp	r6, #0
   10f18:	d0f5      	beq.n	10f06 <ble_hs_hci_evt_num_completed_pkts+0x20>
            ble_hs_lock();
   10f1a:	f7fe fdc3 	bl	faa4 <ble_hs_lock>
            conn = ble_hs_conn_find(le16toh(ev->completed[i].handle));
   10f1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
   10f22:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   10f26:	f7ff fbc7 	bl	106b8 <ble_hs_conn_find>
            if (conn != NULL) {
   10f2a:	2800      	cmp	r0, #0
   10f2c:	d0e9      	beq.n	10f02 <ble_hs_hci_evt_num_completed_pkts+0x1c>
                if (conn->bhc_outstanding_pkts < num_pkts) {
   10f2e:	8f03      	ldrh	r3, [r0, #56]	; 0x38
   10f30:	42b3      	cmp	r3, r6
   10f32:	d2e1      	bcs.n	10ef8 <ble_hs_hci_evt_num_completed_pkts+0x12>
                    ble_hs_sched_reset(BLE_HS_ECONTROLLER);
   10f34:	200c      	movs	r0, #12
   10f36:	f7fe feb5 	bl	fca4 <ble_hs_sched_reset>
   10f3a:	e7df      	b.n	10efc <ble_hs_hci_evt_num_completed_pkts+0x16>
    ble_hs_wakeup_tx();
   10f3c:	f7fe fdcc 	bl	fad8 <ble_hs_wakeup_tx>
    return 0;
   10f40:	2000      	movs	r0, #0
}
   10f42:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   10f44:	200c      	movs	r0, #12
}
   10f46:	4770      	bx	lr

00010f48 <ble_hs_hci_evt_le_phy_update_complete>:
ble_hs_hci_evt_le_phy_update_complete(uint8_t subevent, const void *data,
                                      unsigned int len)
{
    const struct ble_hci_ev_le_subev_phy_update_complete *ev = data;

    if (len != sizeof(*ev)) {
   10f48:	2a06      	cmp	r2, #6
   10f4a:	d001      	beq.n	10f50 <ble_hs_hci_evt_le_phy_update_complete+0x8>
        return BLE_HS_ECONTROLLER;
   10f4c:	200c      	movs	r0, #12
    }

    ble_gap_rx_phy_update_complete(ev);

    return 0;
}
   10f4e:	4770      	bx	lr
{
   10f50:	b508      	push	{r3, lr}
   10f52:	4608      	mov	r0, r1
    ble_gap_rx_phy_update_complete(ev);
   10f54:	f7fc f82b 	bl	cfae <ble_gap_rx_phy_update_complete>
    return 0;
   10f58:	2000      	movs	r0, #0
}
   10f5a:	bd08      	pop	{r3, pc}

00010f5c <ble_hs_hci_evt_le_dir_adv_rpt>:
{
   10f5c:	b530      	push	{r4, r5, lr}
   10f5e:	b087      	sub	sp, #28
    struct ble_gap_disc_desc desc = {0};
   10f60:	2300      	movs	r3, #0
   10f62:	9300      	str	r3, [sp, #0]
   10f64:	9301      	str	r3, [sp, #4]
   10f66:	9302      	str	r3, [sp, #8]
   10f68:	9303      	str	r3, [sp, #12]
   10f6a:	9304      	str	r3, [sp, #16]
   10f6c:	9305      	str	r3, [sp, #20]
    if (len < sizeof(*ev) || len != ev->num_reports * sizeof(ev->reports[0])) {
   10f6e:	2a01      	cmp	r2, #1
   10f70:	d92f      	bls.n	10fd2 <ble_hs_hci_evt_le_dir_adv_rpt+0x76>
   10f72:	784b      	ldrb	r3, [r1, #1]
   10f74:	ebb2 1f03 	cmp.w	r2, r3, lsl #4
   10f78:	d12d      	bne.n	10fd6 <ble_hs_hci_evt_le_dir_adv_rpt+0x7a>
   10f7a:	460d      	mov	r5, r1
    for (i = 0; i < ev->num_reports; i++) {
   10f7c:	2400      	movs	r4, #0
   10f7e:	e022      	b.n	10fc6 <ble_hs_hci_evt_le_dir_adv_rpt+0x6a>
        desc.event_type = ev->reports[i].type;
   10f80:	eb05 1304 	add.w	r3, r5, r4, lsl #4
   10f84:	789a      	ldrb	r2, [r3, #2]
   10f86:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = ev->reports[i].addr_type;
   10f8a:	78da      	ldrb	r2, [r3, #3]
   10f8c:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, ev->reports[i].addr, BLE_DEV_ADDR_LEN);
   10f90:	461a      	mov	r2, r3
   10f92:	f852 1f04 	ldr.w	r1, [r2, #4]!
   10f96:	f8cd 1003 	str.w	r1, [sp, #3]
   10f9a:	8892      	ldrh	r2, [r2, #4]
   10f9c:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.direct_addr.type = ev->reports[i].dir_addr_type;
   10fa0:	7a9a      	ldrb	r2, [r3, #10]
   10fa2:	f88d 2010 	strb.w	r2, [sp, #16]
        memcpy(desc.direct_addr.val, ev->reports[i].dir_addr, BLE_DEV_ADDR_LEN);
   10fa6:	461a      	mov	r2, r3
   10fa8:	f852 1f0b 	ldr.w	r1, [r2, #11]!
   10fac:	f8cd 1011 	str.w	r1, [sp, #17]
   10fb0:	8892      	ldrh	r2, [r2, #4]
   10fb2:	f8ad 2015 	strh.w	r2, [sp, #21]
        desc.rssi = ev->reports[i].rssi;
   10fb6:	f993 3011 	ldrsb.w	r3, [r3, #17]
   10fba:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   10fbe:	4668      	mov	r0, sp
   10fc0:	f7fb ffcc 	bl	cf5c <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   10fc4:	3401      	adds	r4, #1
   10fc6:	786b      	ldrb	r3, [r5, #1]
   10fc8:	42a3      	cmp	r3, r4
   10fca:	dcd9      	bgt.n	10f80 <ble_hs_hci_evt_le_dir_adv_rpt+0x24>
    return 0;
   10fcc:	2000      	movs	r0, #0
}
   10fce:	b007      	add	sp, #28
   10fd0:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   10fd2:	200c      	movs	r0, #12
   10fd4:	e7fb      	b.n	10fce <ble_hs_hci_evt_le_dir_adv_rpt+0x72>
   10fd6:	200c      	movs	r0, #12
   10fd8:	e7f9      	b.n	10fce <ble_hs_hci_evt_le_dir_adv_rpt+0x72>

00010fda <ble_hs_hci_evt_le_adv_rpt>:
{
   10fda:	b5f0      	push	{r4, r5, r6, r7, lr}
   10fdc:	b087      	sub	sp, #28
   10fde:	460e      	mov	r6, r1
    struct ble_gap_disc_desc desc = {0};
   10fe0:	2300      	movs	r3, #0
   10fe2:	9300      	str	r3, [sp, #0]
   10fe4:	9301      	str	r3, [sp, #4]
   10fe6:	9302      	str	r3, [sp, #8]
   10fe8:	9303      	str	r3, [sp, #12]
   10fea:	9304      	str	r3, [sp, #16]
   10fec:	9305      	str	r3, [sp, #20]
    rc = ble_hs_hci_evt_le_adv_rpt_first_pass(data, len);
   10fee:	4611      	mov	r1, r2
   10ff0:	4630      	mov	r0, r6
   10ff2:	f7ff ff0a 	bl	10e0a <ble_hs_hci_evt_le_adv_rpt_first_pass>
    if (rc != 0) {
   10ff6:	4607      	mov	r7, r0
   10ff8:	bb58      	cbnz	r0, 11052 <ble_hs_hci_evt_le_adv_rpt+0x78>
    data += sizeof(*ev);
   10ffa:	1cb3      	adds	r3, r6, #2
    desc.direct_addr = *BLE_ADDR_ANY;
   10ffc:	2200      	movs	r2, #0
   10ffe:	9204      	str	r2, [sp, #16]
   11000:	f8cd 2013 	str.w	r2, [sp, #19]
    for (i = 0; i < ev->num_reports; i++) {
   11004:	4605      	mov	r5, r0
   11006:	e021      	b.n	1104c <ble_hs_hci_evt_le_adv_rpt+0x72>
        data += sizeof(rpt) + rpt->data_len + 1;
   11008:	7a1c      	ldrb	r4, [r3, #8]
   1100a:	3405      	adds	r4, #5
   1100c:	441c      	add	r4, r3
        desc.event_type = rpt->type;
   1100e:	781a      	ldrb	r2, [r3, #0]
   11010:	f88d 2000 	strb.w	r2, [sp]
        desc.addr.type = rpt->addr_type;
   11014:	785a      	ldrb	r2, [r3, #1]
   11016:	f88d 2002 	strb.w	r2, [sp, #2]
        memcpy(desc.addr.val, rpt->addr, BLE_DEV_ADDR_LEN);
   1101a:	461a      	mov	r2, r3
   1101c:	f852 1f02 	ldr.w	r1, [r2, #2]!
   11020:	f8cd 1003 	str.w	r1, [sp, #3]
   11024:	8892      	ldrh	r2, [r2, #4]
   11026:	f8ad 2007 	strh.w	r2, [sp, #7]
        desc.length_data = rpt->data_len;
   1102a:	7a1a      	ldrb	r2, [r3, #8]
   1102c:	f88d 2001 	strb.w	r2, [sp, #1]
        desc.data = rpt->data;
   11030:	f103 0209 	add.w	r2, r3, #9
   11034:	9203      	str	r2, [sp, #12]
        desc.rssi = rpt->data[rpt->data_len];
   11036:	7a1a      	ldrb	r2, [r3, #8]
   11038:	4413      	add	r3, r2
   1103a:	f993 3009 	ldrsb.w	r3, [r3, #9]
   1103e:	f88d 3009 	strb.w	r3, [sp, #9]
        ble_gap_rx_adv_report(&desc);
   11042:	4668      	mov	r0, sp
   11044:	f7fb ff8a 	bl	cf5c <ble_gap_rx_adv_report>
    for (i = 0; i < ev->num_reports; i++) {
   11048:	3501      	adds	r5, #1
        data += sizeof(rpt) + rpt->data_len + 1;
   1104a:	4623      	mov	r3, r4
    for (i = 0; i < ev->num_reports; i++) {
   1104c:	7872      	ldrb	r2, [r6, #1]
   1104e:	42aa      	cmp	r2, r5
   11050:	dcda      	bgt.n	11008 <ble_hs_hci_evt_le_adv_rpt+0x2e>
}
   11052:	4638      	mov	r0, r7
   11054:	b007      	add	sp, #28
   11056:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011058 <ble_hs_hci_evt_le_enh_conn_complete>:
    if (len != sizeof(*ev)) {
   11058:	2a1f      	cmp	r2, #31
   1105a:	d001      	beq.n	11060 <ble_hs_hci_evt_le_enh_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   1105c:	200c      	movs	r0, #12
}
   1105e:	4770      	bx	lr
{
   11060:	b510      	push	{r4, lr}
   11062:	b088      	sub	sp, #32
   11064:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   11066:	2220      	movs	r2, #32
   11068:	2100      	movs	r1, #0
   1106a:	4668      	mov	r0, sp
   1106c:	f7fa fbc7 	bl	b7fe <memset>
    evt.status = ev->status;
   11070:	7863      	ldrb	r3, [r4, #1]
   11072:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   11076:	bb63      	cbnz	r3, 110d2 <ble_hs_hci_evt_le_enh_conn_complete+0x7a>
        evt.connection_handle = le16toh(ev->conn_handle);
   11078:	8863      	ldrh	r3, [r4, #2]
   1107a:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   1107e:	7923      	ldrb	r3, [r4, #4]
   11080:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   11084:	7963      	ldrb	r3, [r4, #5]
   11086:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   1108a:	4623      	mov	r3, r4
   1108c:	f853 2f06 	ldr.w	r2, [r3, #6]!
   11090:	f8cd 2006 	str.w	r2, [sp, #6]
   11094:	889b      	ldrh	r3, [r3, #4]
   11096:	f8ad 300a 	strh.w	r3, [sp, #10]
        memcpy(evt.local_rpa, ev->local_rpa, BLE_DEV_ADDR_LEN);
   1109a:	4623      	mov	r3, r4
   1109c:	f853 2f0c 	ldr.w	r2, [r3, #12]!
   110a0:	f8cd 2013 	str.w	r2, [sp, #19]
   110a4:	889b      	ldrh	r3, [r3, #4]
   110a6:	f8ad 3017 	strh.w	r3, [sp, #23]
        memcpy(evt.peer_rpa,ev->peer_rpa, BLE_DEV_ADDR_LEN);
   110aa:	4623      	mov	r3, r4
   110ac:	f853 2f12 	ldr.w	r2, [r3, #18]!
   110b0:	f8cd 2019 	str.w	r2, [sp, #25]
   110b4:	889b      	ldrh	r3, [r3, #4]
   110b6:	f8ad 301d 	strh.w	r3, [sp, #29]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   110ba:	8b23      	ldrh	r3, [r4, #24]
   110bc:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   110c0:	8b63      	ldrh	r3, [r4, #26]
   110c2:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   110c6:	8ba3      	ldrh	r3, [r4, #28]
   110c8:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   110cc:	7fa3      	ldrb	r3, [r4, #30]
   110ce:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   110d2:	2100      	movs	r1, #0
   110d4:	4668      	mov	r0, sp
   110d6:	f7fc f83f 	bl	d158 <ble_gap_rx_conn_complete>
}
   110da:	b008      	add	sp, #32
   110dc:	bd10      	pop	{r4, pc}

000110de <ble_hs_hci_evt_le_conn_complete>:
    if (len != sizeof(*ev)) {
   110de:	2a13      	cmp	r2, #19
   110e0:	d001      	beq.n	110e6 <ble_hs_hci_evt_le_conn_complete+0x8>
        return BLE_HS_ECONTROLLER;
   110e2:	200c      	movs	r0, #12
}
   110e4:	4770      	bx	lr
{
   110e6:	b510      	push	{r4, lr}
   110e8:	b088      	sub	sp, #32
   110ea:	460c      	mov	r4, r1
    memset(&evt, 0, sizeof(evt));
   110ec:	2220      	movs	r2, #32
   110ee:	2100      	movs	r1, #0
   110f0:	4668      	mov	r0, sp
   110f2:	f7fa fb84 	bl	b7fe <memset>
    evt.status = ev->status;
   110f6:	7863      	ldrb	r3, [r4, #1]
   110f8:	f88d 3000 	strb.w	r3, [sp]
    if (evt.status == BLE_ERR_SUCCESS) {
   110fc:	b9e3      	cbnz	r3, 11138 <ble_hs_hci_evt_le_conn_complete+0x5a>
        evt.connection_handle = le16toh(ev->conn_handle);
   110fe:	8863      	ldrh	r3, [r4, #2]
   11100:	f8ad 3002 	strh.w	r3, [sp, #2]
        evt.role = ev->role;
   11104:	7923      	ldrb	r3, [r4, #4]
   11106:	f88d 3004 	strb.w	r3, [sp, #4]
        evt.peer_addr_type = ev->peer_addr_type;
   1110a:	7963      	ldrb	r3, [r4, #5]
   1110c:	f88d 3005 	strb.w	r3, [sp, #5]
        memcpy(evt.peer_addr, ev->peer_addr, BLE_DEV_ADDR_LEN);
   11110:	4623      	mov	r3, r4
   11112:	f853 2f06 	ldr.w	r2, [r3, #6]!
   11116:	f8cd 2006 	str.w	r2, [sp, #6]
   1111a:	889b      	ldrh	r3, [r3, #4]
   1111c:	f8ad 300a 	strh.w	r3, [sp, #10]
        evt.conn_itvl = le16toh(ev->conn_itvl);
   11120:	89a3      	ldrh	r3, [r4, #12]
   11122:	f8ad 300c 	strh.w	r3, [sp, #12]
        evt.conn_latency = le16toh(ev->conn_latency);
   11126:	89e3      	ldrh	r3, [r4, #14]
   11128:	f8ad 300e 	strh.w	r3, [sp, #14]
        evt.supervision_timeout = le16toh(ev->supervision_timeout);
   1112c:	8a23      	ldrh	r3, [r4, #16]
   1112e:	f8ad 3010 	strh.w	r3, [sp, #16]
        evt.master_clk_acc = ev->mca;
   11132:	7ca3      	ldrb	r3, [r4, #18]
   11134:	f88d 3012 	strb.w	r3, [sp, #18]
    return ble_gap_rx_conn_complete(&evt, 0);
   11138:	2100      	movs	r1, #0
   1113a:	4668      	mov	r0, sp
   1113c:	f7fc f80c 	bl	d158 <ble_gap_rx_conn_complete>
}
   11140:	b008      	add	sp, #32
   11142:	bd10      	pop	{r4, pc}

00011144 <ble_hs_hci_evt_le_conn_parm_req>:
    if (len != sizeof(*ev)) {
   11144:	2a0b      	cmp	r2, #11
   11146:	d001      	beq.n	1114c <ble_hs_hci_evt_le_conn_parm_req+0x8>
        return BLE_HS_ECONTROLLER;
   11148:	200c      	movs	r0, #12
}
   1114a:	4770      	bx	lr
{
   1114c:	b508      	push	{r3, lr}
   1114e:	4608      	mov	r0, r1
    ble_gap_rx_param_req(ev);
   11150:	f7fc fa77 	bl	d642 <ble_gap_rx_param_req>
    return 0;
   11154:	2000      	movs	r0, #0
}
   11156:	bd08      	pop	{r3, pc}

00011158 <ble_hs_hci_evt_le_lt_key_req>:
    if (len != sizeof(*ev)) {
   11158:	2a0d      	cmp	r2, #13
   1115a:	d001      	beq.n	11160 <ble_hs_hci_evt_le_lt_key_req+0x8>
        return BLE_HS_ECONTROLLER;
   1115c:	200c      	movs	r0, #12
}
   1115e:	4770      	bx	lr
{
   11160:	b508      	push	{r3, lr}
   11162:	4608      	mov	r0, r1
    ble_sm_ltk_req_rx(ev);
   11164:	f002 fb58 	bl	13818 <ble_sm_ltk_req_rx>
    return 0;
   11168:	2000      	movs	r0, #0
}
   1116a:	bd08      	pop	{r3, pc}

0001116c <ble_hs_hci_evt_le_rd_rem_used_feat_complete>:
    if (len != sizeof(*ev)) {
   1116c:	2a0c      	cmp	r2, #12
   1116e:	d001      	beq.n	11174 <ble_hs_hci_evt_le_rd_rem_used_feat_complete+0x8>
        return BLE_HS_ECONTROLLER;
   11170:	200c      	movs	r0, #12
}
   11172:	4770      	bx	lr
{
   11174:	b508      	push	{r3, lr}
   11176:	4608      	mov	r0, r1
    ble_gap_rx_rd_rem_sup_feat_complete(ev);
   11178:	f7fb fef1 	bl	cf5e <ble_gap_rx_rd_rem_sup_feat_complete>
    return 0;
   1117c:	2000      	movs	r0, #0
}
   1117e:	bd08      	pop	{r3, pc}

00011180 <ble_hs_hci_evt_le_conn_upd_complete>:
    if (len != sizeof(*ev)) {
   11180:	2a0a      	cmp	r2, #10
   11182:	d001      	beq.n	11188 <ble_hs_hci_evt_le_conn_upd_complete+0x8>
        return BLE_HS_ECONTROLLER;
   11184:	200c      	movs	r0, #12
}
   11186:	4770      	bx	lr
{
   11188:	b508      	push	{r3, lr}
   1118a:	4608      	mov	r0, r1
    ble_gap_rx_update_complete(ev);
   1118c:	f7fc f9d6 	bl	d53c <ble_gap_rx_update_complete>
    return 0;
   11190:	2000      	movs	r0, #0
}
   11192:	bd08      	pop	{r3, pc}

00011194 <ble_hs_hci_evt_process>:

int
ble_hs_hci_evt_process(const struct ble_hci_ev *ev)
{
   11194:	b538      	push	{r3, r4, r5, lr}
   11196:	4604      	mov	r4, r0

    /* Count events received */
    STATS_INC(ble_hs_stats, hci_event);


    entry = ble_hs_hci_evt_dispatch_find(ev->opcode);
   11198:	7805      	ldrb	r5, [r0, #0]
   1119a:	4628      	mov	r0, r5
   1119c:	f7ff fe06 	bl	10dac <ble_hs_hci_evt_dispatch_find>
    if (entry == NULL) {
   111a0:	b150      	cbz	r0, 111b8 <ble_hs_hci_evt_process+0x24>
        STATS_INC(ble_hs_stats, hci_unknown_event);
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = entry->cb(ev->opcode, ev->data, ev->length);
   111a2:	6843      	ldr	r3, [r0, #4]
   111a4:	7862      	ldrb	r2, [r4, #1]
   111a6:	1ca1      	adds	r1, r4, #2
   111a8:	4628      	mov	r0, r5
   111aa:	4798      	blx	r3
   111ac:	4605      	mov	r5, r0
    }

    ble_hci_trans_buf_free((uint8_t *) ev);
   111ae:	4620      	mov	r0, r4
   111b0:	f005 f9da 	bl	16568 <ble_hci_trans_buf_free>

    return rc;
}
   111b4:	4628      	mov	r0, r5
   111b6:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTSUP;
   111b8:	2508      	movs	r5, #8
   111ba:	e7f8      	b.n	111ae <ble_hs_hci_evt_process+0x1a>

000111bc <ble_hs_hci_evt_acl_process>:
 *
 * @return                      0 on success; nonzero on failure.
 */
int
ble_hs_hci_evt_acl_process(struct os_mbuf *om)
{
   111bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   111c0:	b086      	sub	sp, #24
   111c2:	4604      	mov	r4, r0
    ble_l2cap_rx_fn *rx_cb;
    uint16_t conn_handle;
    int reject_cid;
    int rc;

    rc = ble_hs_hci_util_data_hdr_strip(om, &hci_hdr);
   111c4:	a905      	add	r1, sp, #20
   111c6:	f000 f898 	bl	112fa <ble_hs_hci_util_data_hdr_strip>
    if (rc != 0) {
   111ca:	4605      	mov	r5, r0
   111cc:	b940      	cbnz	r0, 111e0 <ble_hs_hci_evt_acl_process+0x24>
    BLE_HS_LOG(DEBUG, "ble_hs_hci_evt_acl_process(): conn_handle=%u pb=%x "
                      "len=%u data=",
               BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc),
               BLE_HCI_DATA_PB(hci_hdr.hdh_handle_pb_bc),
               hci_hdr.hdh_len);
    ble_hs_log_mbuf(om);
   111ce:	4620      	mov	r0, r4
   111d0:	f000 f99c 	bl	1150c <ble_hs_log_mbuf>
    BLE_HS_LOG(DEBUG, "\n");
#endif
#endif

    if (hci_hdr.hdh_len != OS_MBUF_PKTHDR(om)->omp_len) {
   111d4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   111d8:	8a23      	ldrh	r3, [r4, #16]
   111da:	429a      	cmp	r2, r3
   111dc:	d007      	beq.n	111ee <ble_hs_hci_evt_acl_process+0x32>
        rc = BLE_HS_EBADDATA;
   111de:	250a      	movs	r5, #10
    }

    return 0;

err:
    os_mbuf_free_chain(om);
   111e0:	4620      	mov	r0, r4
   111e2:	f7f8 fffd 	bl	a1e0 <os_mbuf_free_chain>
    return rc;
}
   111e6:	4628      	mov	r0, r5
   111e8:	b006      	add	sp, #24
   111ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    conn_handle = BLE_HCI_DATA_HANDLE(hci_hdr.hdh_handle_pb_bc);
   111ee:	f8bd 6014 	ldrh.w	r6, [sp, #20]
   111f2:	f3c6 060b 	ubfx	r6, r6, #0, #12
    ble_hs_lock();
   111f6:	f7fe fc55 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(conn_handle);
   111fa:	4630      	mov	r0, r6
   111fc:	f7ff fa5c 	bl	106b8 <ble_hs_conn_find>
    if (conn == NULL) {
   11200:	4680      	mov	r8, r0
   11202:	b198      	cbz	r0, 1122c <ble_hs_hci_evt_acl_process+0x70>
        rc = ble_l2cap_rx(conn, &hci_hdr, om, &rx_cb, &reject_cid);
   11204:	ab03      	add	r3, sp, #12
   11206:	9300      	str	r3, [sp, #0]
   11208:	ab04      	add	r3, sp, #16
   1120a:	4622      	mov	r2, r4
   1120c:	a905      	add	r1, sp, #20
   1120e:	f000 fd92 	bl	11d36 <ble_l2cap_rx>
   11212:	4607      	mov	r7, r0
        om = NULL;
   11214:	2400      	movs	r4, #0
    ble_hs_unlock();
   11216:	f7fe fc49 	bl	faac <ble_hs_unlock>
    switch (rc) {
   1121a:	b167      	cbz	r7, 11236 <ble_hs_hci_evt_acl_process+0x7a>
   1121c:	2f01      	cmp	r7, #1
   1121e:	d0e2      	beq.n	111e6 <ble_hs_hci_evt_acl_process+0x2a>
        if (reject_cid != -1) {
   11220:	9b03      	ldr	r3, [sp, #12]
   11222:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   11226:	d111      	bne.n	1124c <ble_hs_hci_evt_acl_process+0x90>
   11228:	463d      	mov	r5, r7
   1122a:	e7d9      	b.n	111e0 <ble_hs_hci_evt_acl_process+0x24>
        reject_cid = -1;
   1122c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11230:	9303      	str	r3, [sp, #12]
        rc = BLE_HS_ENOTCONN;
   11232:	2707      	movs	r7, #7
   11234:	e7ef      	b.n	11216 <ble_hs_hci_evt_acl_process+0x5a>
        rc = rx_cb(conn->bhc_rx_chan);
   11236:	f8d8 0030 	ldr.w	r0, [r8, #48]	; 0x30
   1123a:	9b04      	ldr	r3, [sp, #16]
   1123c:	4798      	blx	r3
        ble_l2cap_remove_rx(conn, conn->bhc_rx_chan);
   1123e:	f8d8 1030 	ldr.w	r1, [r8, #48]	; 0x30
   11242:	4640      	mov	r0, r8
   11244:	f000 fd47 	bl	11cd6 <ble_l2cap_remove_rx>
    return 0;
   11248:	463d      	mov	r5, r7
        break;
   1124a:	e7cc      	b.n	111e6 <ble_hs_hci_evt_acl_process+0x2a>
            ble_l2cap_sig_reject_invalid_cid_tx(conn_handle, 0, 0, reject_cid);
   1124c:	b29b      	uxth	r3, r3
   1124e:	2200      	movs	r2, #0
   11250:	4611      	mov	r1, r2
   11252:	4630      	mov	r0, r6
   11254:	f001 f8a8 	bl	123a8 <ble_l2cap_sig_reject_invalid_cid_tx>
   11258:	463d      	mov	r5, r7
   1125a:	e7c1      	b.n	111e0 <ble_hs_hci_evt_acl_process+0x24>

0001125c <ble_hs_hci_util_handle_pb_bc_join>:
{
    BLE_HS_DBG_ASSERT(handle <= 0x0fff);
    BLE_HS_DBG_ASSERT(pb <= 0x03);
    BLE_HS_DBG_ASSERT(bc <= 0x03);

    return (handle  << 0)   |
   1125c:	ea40 3001 	orr.w	r0, r0, r1, lsl #12
   11260:	b200      	sxth	r0, r0
           (pb      << 12)  |
   11262:	ea40 3082 	orr.w	r0, r0, r2, lsl #14
           (bc      << 14);
}
   11266:	b280      	uxth	r0, r0
   11268:	4770      	bx	lr

0001126a <ble_hs_hci_util_read_adv_tx_pwr>:

int
ble_hs_hci_util_read_adv_tx_pwr(int8_t *out_tx_pwr)
{
   1126a:	b510      	push	{r4, lr}
   1126c:	b084      	sub	sp, #16
   1126e:	4604      	mov	r4, r0
    struct ble_hci_le_rd_adv_chan_txpwr_rp rsp;
    int rc;

    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   11270:	2301      	movs	r3, #1
   11272:	9300      	str	r3, [sp, #0]
   11274:	ab03      	add	r3, sp, #12
   11276:	2200      	movs	r2, #0
   11278:	4611      	mov	r1, r2
   1127a:	f242 0007 	movw	r0, #8199	; 0x2007
   1127e:	f7ff fc67 	bl	10b50 <ble_hs_hci_cmd_tx>
                                      BLE_HCI_OCF_LE_RD_ADV_CHAN_TXPWR),
                           NULL, 0, &rsp, sizeof(rsp));
    if (rc != 0) {
   11282:	4603      	mov	r3, r0
   11284:	b910      	cbnz	r0, 1128c <ble_hs_hci_util_read_adv_tx_pwr+0x22>
        return rc;
    }

    *out_tx_pwr = rsp.power_level;
   11286:	f99d 200c 	ldrsb.w	r2, [sp, #12]
   1128a:	7022      	strb	r2, [r4, #0]
        *out_tx_pwr > BLE_HCI_ADV_CHAN_TXPWR_MAX) {
        BLE_HS_LOG(WARN, "advertiser txpwr out of range\n");
    }

    return 0;
}
   1128c:	4618      	mov	r0, r3
   1128e:	b004      	add	sp, #16
   11290:	bd10      	pop	{r4, pc}

00011292 <ble_hs_hci_util_rand>:

int
ble_hs_hci_util_rand(void *dst, int len)
{
   11292:	b570      	push	{r4, r5, r6, lr}
   11294:	b084      	sub	sp, #16
   11296:	4606      	mov	r6, r0
   11298:	460c      	mov	r4, r1
    uint8_t *u8ptr;
    int chunk_sz;
    int rc;

    u8ptr = dst;
    while (len > 0) {
   1129a:	2c00      	cmp	r4, #0
   1129c:	dd16      	ble.n	112cc <ble_hs_hci_util_rand+0x3a>
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE, BLE_HCI_OCF_LE_RAND),
   1129e:	2308      	movs	r3, #8
   112a0:	9300      	str	r3, [sp, #0]
   112a2:	446b      	add	r3, sp
   112a4:	2200      	movs	r2, #0
   112a6:	4611      	mov	r1, r2
   112a8:	f242 0018 	movw	r0, #8216	; 0x2018
   112ac:	f7ff fc50 	bl	10b50 <ble_hs_hci_cmd_tx>
                               NULL, 0, &rsp, sizeof(rsp));
        if (rc != 0) {
   112b0:	4603      	mov	r3, r0
   112b2:	b960      	cbnz	r0, 112ce <ble_hs_hci_util_rand+0x3c>
            return rc;
        }

        chunk_sz = min(len, sizeof(rsp));
   112b4:	4625      	mov	r5, r4
   112b6:	2c08      	cmp	r4, #8
   112b8:	bf28      	it	cs
   112ba:	2508      	movcs	r5, #8
        memcpy(u8ptr, &rsp.random_number, chunk_sz);
   112bc:	462a      	mov	r2, r5
   112be:	a902      	add	r1, sp, #8
   112c0:	4630      	mov	r0, r6
   112c2:	f7fa fa73 	bl	b7ac <memcpy>

        len -= chunk_sz;
   112c6:	1b64      	subs	r4, r4, r5
        u8ptr += chunk_sz;
   112c8:	442e      	add	r6, r5
   112ca:	e7e6      	b.n	1129a <ble_hs_hci_util_rand+0x8>
    }

    return 0;
   112cc:	2300      	movs	r3, #0
}
   112ce:	4618      	mov	r0, r3
   112d0:	b004      	add	sp, #16
   112d2:	bd70      	pop	{r4, r5, r6, pc}

000112d4 <ble_hs_hci_util_set_random_addr>:
    return 0;
}

int
ble_hs_hci_util_set_random_addr(const uint8_t *addr)
{
   112d4:	b500      	push	{lr}
   112d6:	b085      	sub	sp, #20
   112d8:	4603      	mov	r3, r0
    struct ble_hci_le_set_rand_addr_cp cmd;

    memcpy(cmd.addr, addr, BLE_DEV_ADDR_LEN);
   112da:	6800      	ldr	r0, [r0, #0]
   112dc:	9002      	str	r0, [sp, #8]
   112de:	889b      	ldrh	r3, [r3, #4]
   112e0:	f8ad 300c 	strh.w	r3, [sp, #12]

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   112e4:	2300      	movs	r3, #0
   112e6:	9300      	str	r3, [sp, #0]
   112e8:	2206      	movs	r2, #6
   112ea:	a902      	add	r1, sp, #8
   112ec:	f242 0005 	movw	r0, #8197	; 0x2005
   112f0:	f7ff fc2e 	bl	10b50 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RAND_ADDR),
                             &cmd, sizeof(cmd), NULL, 0);
}
   112f4:	b005      	add	sp, #20
   112f6:	f85d fb04 	ldr.w	pc, [sp], #4

000112fa <ble_hs_hci_util_data_hdr_strip>:
}

int
ble_hs_hci_util_data_hdr_strip(struct os_mbuf *om,
                               struct hci_data_hdr *out_hdr)
{
   112fa:	b570      	push	{r4, r5, r6, lr}
   112fc:	4606      	mov	r6, r0
   112fe:	460c      	mov	r4, r1
    int rc;

    rc = os_mbuf_copydata(om, 0, BLE_HCI_DATA_HDR_SZ, out_hdr);
   11300:	460b      	mov	r3, r1
   11302:	2204      	movs	r2, #4
   11304:	2100      	movs	r1, #0
   11306:	f7f9 f86d 	bl	a3e4 <os_mbuf_copydata>
    if (rc != 0) {
   1130a:	b980      	cbnz	r0, 1132e <ble_hs_hci_util_data_hdr_strip+0x34>
   1130c:	4605      	mov	r5, r0
        return BLE_HS_ECONTROLLER;
    }

    /* Strip HCI ACL data header from the front of the packet. */
    os_mbuf_adj(om, BLE_HCI_DATA_HDR_SZ);
   1130e:	2104      	movs	r1, #4
   11310:	4630      	mov	r0, r6
   11312:	f7f9 f894 	bl	a43e <os_mbuf_adj>

    out_hdr->hdh_handle_pb_bc = get_le16(&out_hdr->hdh_handle_pb_bc);
   11316:	4620      	mov	r0, r4
   11318:	f00a fc83 	bl	1bc22 <get_le16>
   1131c:	4623      	mov	r3, r4
   1131e:	f823 0b02 	strh.w	r0, [r3], #2
    out_hdr->hdh_len = get_le16(&out_hdr->hdh_len);
   11322:	4618      	mov	r0, r3
   11324:	f00a fc7d 	bl	1bc22 <get_le16>
   11328:	8060      	strh	r0, [r4, #2]

    return 0;
}
   1132a:	4628      	mov	r0, r5
   1132c:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_ECONTROLLER;
   1132e:	250c      	movs	r5, #12
   11330:	e7fb      	b.n	1132a <ble_hs_hci_util_data_hdr_strip+0x30>
	...

00011334 <ble_hs_id_set_pub>:
static uint8_t ble_hs_id_pub[6];
static uint8_t ble_hs_id_rnd[6];

void
ble_hs_id_set_pub(const uint8_t *pub_addr)
{
   11334:	b510      	push	{r4, lr}
   11336:	4604      	mov	r4, r0
    ble_hs_lock();
   11338:	f7fe fbb4 	bl	faa4 <ble_hs_lock>
    memcpy(ble_hs_id_pub, pub_addr, 6);
   1133c:	4b03      	ldr	r3, [pc, #12]	; (1134c <ble_hs_id_set_pub+0x18>)
   1133e:	6820      	ldr	r0, [r4, #0]
   11340:	6018      	str	r0, [r3, #0]
   11342:	88a2      	ldrh	r2, [r4, #4]
   11344:	809a      	strh	r2, [r3, #4]
    ble_hs_unlock();
   11346:	f7fe fbb1 	bl	faac <ble_hs_unlock>
}
   1134a:	bd10      	pop	{r4, pc}
   1134c:	20007578 	.word	0x20007578

00011350 <ble_hs_id_set_rnd>:
    return 0;
}

int
ble_hs_id_set_rnd(const uint8_t *rnd_addr)
{
   11350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11352:	4605      	mov	r5, r0
    uint8_t addr_type_byte;
    int rc;
    int ones;

    ble_hs_lock();
   11354:	f7fe fba6 	bl	faa4 <ble_hs_lock>

    /* Make sure random part of rnd_addr is not all ones or zeros. Reference:
     * Core v5.0, Vol 6, Part B, section 1.3.2.1 */
    addr_type_byte = rnd_addr[5] & 0xc0;
   11358:	796f      	ldrb	r7, [r5, #5]
   1135a:	f007 06c0 	and.w	r6, r7, #192	; 0xc0

    /* count bits set to 1 in random part of address */
    ones = __builtin_popcount(rnd_addr[0]);
   1135e:	7828      	ldrb	r0, [r5, #0]
   11360:	f00a ffc8 	bl	1c2f4 <__popcountsi2>
   11364:	4604      	mov	r4, r0
    ones += __builtin_popcount(rnd_addr[1]);
   11366:	7868      	ldrb	r0, [r5, #1]
   11368:	f00a ffc4 	bl	1c2f4 <__popcountsi2>
   1136c:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[2]);
   1136e:	78a8      	ldrb	r0, [r5, #2]
   11370:	f00a ffc0 	bl	1c2f4 <__popcountsi2>
   11374:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[3]);
   11376:	78e8      	ldrb	r0, [r5, #3]
   11378:	f00a ffbc 	bl	1c2f4 <__popcountsi2>
   1137c:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[4]);
   1137e:	7928      	ldrb	r0, [r5, #4]
   11380:	f00a ffb8 	bl	1c2f4 <__popcountsi2>
   11384:	4404      	add	r4, r0
    ones += __builtin_popcount(rnd_addr[5] & 0x3f);
   11386:	f007 003f 	and.w	r0, r7, #63	; 0x3f
   1138a:	f00a ffb3 	bl	1c2f4 <__popcountsi2>
   1138e:	4420      	add	r0, r4

    if ((addr_type_byte != 0x00 && addr_type_byte != 0xc0) ||
   11390:	b10e      	cbz	r6, 11396 <ble_hs_id_set_rnd+0x46>
   11392:	2ec0      	cmp	r6, #192	; 0xc0
   11394:	d10d      	bne.n	113b2 <ble_hs_id_set_rnd+0x62>
   11396:	b170      	cbz	r0, 113b6 <ble_hs_id_set_rnd+0x66>
            (ones == 0 || ones == 46)) {
   11398:	282e      	cmp	r0, #46	; 0x2e
   1139a:	d011      	beq.n	113c0 <ble_hs_id_set_rnd+0x70>
        rc = BLE_HS_EINVAL;
        goto done;
    }

    rc = ble_hs_hci_util_set_random_addr(rnd_addr);
   1139c:	4628      	mov	r0, r5
   1139e:	f7ff ff99 	bl	112d4 <ble_hs_hci_util_set_random_addr>
    if (rc != 0) {
   113a2:	4604      	mov	r4, r0
   113a4:	b940      	cbnz	r0, 113b8 <ble_hs_id_set_rnd+0x68>
        goto done;
    }

    memcpy(ble_hs_id_rnd, rnd_addr, 6);
   113a6:	4b07      	ldr	r3, [pc, #28]	; (113c4 <ble_hs_id_set_rnd+0x74>)
   113a8:	6828      	ldr	r0, [r5, #0]
   113aa:	6018      	str	r0, [r3, #0]
   113ac:	88aa      	ldrh	r2, [r5, #4]
   113ae:	809a      	strh	r2, [r3, #4]
   113b0:	e002      	b.n	113b8 <ble_hs_id_set_rnd+0x68>
        rc = BLE_HS_EINVAL;
   113b2:	2403      	movs	r4, #3
   113b4:	e000      	b.n	113b8 <ble_hs_id_set_rnd+0x68>
   113b6:	2403      	movs	r4, #3

done:
    ble_hs_unlock();
   113b8:	f7fe fb78 	bl	faac <ble_hs_unlock>
    return rc;
}
   113bc:	4620      	mov	r0, r4
   113be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_HS_EINVAL;
   113c0:	2403      	movs	r4, #3
   113c2:	e7f9      	b.n	113b8 <ble_hs_id_set_rnd+0x68>
   113c4:	20007580 	.word	0x20007580

000113c8 <ble_hs_id_addr>:
 *                              Other BLE host core code on error.
 */
int
ble_hs_id_addr(uint8_t id_addr_type, const uint8_t **out_id_addr,
               int *out_is_nrpa)
{
   113c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    const uint8_t *id_addr;
    int nrpa;

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    switch (id_addr_type) {
   113ca:	b1b0      	cbz	r0, 113fa <ble_hs_id_addr+0x32>
   113cc:	2801      	cmp	r0, #1
   113ce:	d117      	bne.n	11400 <ble_hs_id_addr+0x38>
        nrpa = 0;
        break;

    case BLE_ADDR_RANDOM:
        id_addr = ble_hs_id_rnd;
        nrpa = (ble_hs_id_rnd[5] & 0xc0) == 0;
   113d0:	4e0e      	ldr	r6, [pc, #56]	; (1140c <ble_hs_id_addr+0x44>)
   113d2:	7973      	ldrb	r3, [r6, #5]
   113d4:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   113d8:	bf0c      	ite	eq
   113da:	2701      	moveq	r7, #1
   113dc:	2700      	movne	r7, #0
   113de:	4614      	mov	r4, r2
   113e0:	460d      	mov	r5, r1

    default:
        return BLE_HS_EINVAL;
    }

    if (memcmp(id_addr, ble_hs_misc_null_addr, 6) == 0) {
   113e2:	2206      	movs	r2, #6
   113e4:	490a      	ldr	r1, [pc, #40]	; (11410 <ble_hs_id_addr+0x48>)
   113e6:	4630      	mov	r0, r6
   113e8:	f7fa f9bc 	bl	b764 <memcmp>
   113ec:	b150      	cbz	r0, 11404 <ble_hs_id_addr+0x3c>
        return BLE_HS_ENOADDR;
    }

    if (out_id_addr != NULL) {
   113ee:	b105      	cbz	r5, 113f2 <ble_hs_id_addr+0x2a>
        *out_id_addr = id_addr;
   113f0:	602e      	str	r6, [r5, #0]
    }
    if (out_is_nrpa != NULL) {
   113f2:	b14c      	cbz	r4, 11408 <ble_hs_id_addr+0x40>
        *out_is_nrpa = nrpa;
   113f4:	6027      	str	r7, [r4, #0]
    }

    return 0;
   113f6:	2000      	movs	r0, #0
}
   113f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        nrpa = 0;
   113fa:	2700      	movs	r7, #0
        id_addr = ble_hs_id_pub;
   113fc:	4e05      	ldr	r6, [pc, #20]	; (11414 <ble_hs_id_addr+0x4c>)
   113fe:	e7ee      	b.n	113de <ble_hs_id_addr+0x16>
        return BLE_HS_EINVAL;
   11400:	2003      	movs	r0, #3
   11402:	e7f9      	b.n	113f8 <ble_hs_id_addr+0x30>
        return BLE_HS_ENOADDR;
   11404:	2015      	movs	r0, #21
   11406:	e7f7      	b.n	113f8 <ble_hs_id_addr+0x30>
    return 0;
   11408:	2000      	movs	r0, #0
   1140a:	e7f5      	b.n	113f8 <ble_hs_id_addr+0x30>
   1140c:	20007580 	.word	0x20007580
   11410:	20007588 	.word	0x20007588
   11414:	20007578 	.word	0x20007578

00011418 <ble_hs_id_addr_type_usable>:
    return rc;
}

static int
ble_hs_id_addr_type_usable(uint8_t own_addr_type)
{
   11418:	b500      	push	{lr}
   1141a:	b083      	sub	sp, #12
    uint8_t id_addr_type;
    int nrpa;
    int rc;

    switch (own_addr_type) {
   1141c:	2803      	cmp	r0, #3
   1141e:	d81a      	bhi.n	11456 <ble_hs_id_addr_type_usable+0x3e>
   11420:	e8df f000 	tbb	[pc, r0]
   11424:	0b0b0202 	.word	0x0b0b0202
    case BLE_OWN_ADDR_PUBLIC:
    case BLE_OWN_ADDR_RANDOM:
        rc = ble_hs_id_addr(own_addr_type, NULL, NULL);
   11428:	2200      	movs	r2, #0
   1142a:	4611      	mov	r1, r2
   1142c:	f7ff ffcc 	bl	113c8 <ble_hs_id_addr>
   11430:	4603      	mov	r3, r0
    default:
        return BLE_HS_EINVAL;
    }

    return 0;
}
   11432:	4618      	mov	r0, r3
   11434:	b003      	add	sp, #12
   11436:	f85d fb04 	ldr.w	pc, [sp], #4
        id_addr_type = ble_hs_misc_own_addr_type_to_id(own_addr_type);
   1143a:	f000 f907 	bl	1164c <ble_hs_misc_own_addr_type_to_id>
        rc = ble_hs_id_addr(id_addr_type, NULL, &nrpa);
   1143e:	aa01      	add	r2, sp, #4
   11440:	2100      	movs	r1, #0
   11442:	f7ff ffc1 	bl	113c8 <ble_hs_id_addr>
        if (rc != 0) {
   11446:	4603      	mov	r3, r0
   11448:	2800      	cmp	r0, #0
   1144a:	d1f2      	bne.n	11432 <ble_hs_id_addr_type_usable+0x1a>
        if (nrpa) {
   1144c:	9b01      	ldr	r3, [sp, #4]
   1144e:	2b00      	cmp	r3, #0
   11450:	d0ef      	beq.n	11432 <ble_hs_id_addr_type_usable+0x1a>
            return BLE_HS_ENOADDR;
   11452:	2315      	movs	r3, #21
   11454:	e7ed      	b.n	11432 <ble_hs_id_addr_type_usable+0x1a>
        return BLE_HS_EINVAL;
   11456:	2303      	movs	r3, #3
   11458:	e7eb      	b.n	11432 <ble_hs_id_addr_type_usable+0x1a>

0001145a <ble_hs_id_copy_addr>:
{
   1145a:	b570      	push	{r4, r5, r6, lr}
   1145c:	b082      	sub	sp, #8
   1145e:	4605      	mov	r5, r0
   11460:	460c      	mov	r4, r1
   11462:	4616      	mov	r6, r2
    ble_hs_lock();
   11464:	f7fe fb1e 	bl	faa4 <ble_hs_lock>
    rc = ble_hs_id_addr(id_addr_type, &addr, out_is_nrpa);
   11468:	4632      	mov	r2, r6
   1146a:	a901      	add	r1, sp, #4
   1146c:	4628      	mov	r0, r5
   1146e:	f7ff ffab 	bl	113c8 <ble_hs_id_addr>
    if (rc == 0 && out_id_addr != NULL) {
   11472:	4605      	mov	r5, r0
   11474:	b928      	cbnz	r0, 11482 <ble_hs_id_copy_addr+0x28>
   11476:	b124      	cbz	r4, 11482 <ble_hs_id_copy_addr+0x28>
        memcpy(out_id_addr, addr, 6);
   11478:	9b01      	ldr	r3, [sp, #4]
   1147a:	681a      	ldr	r2, [r3, #0]
   1147c:	6022      	str	r2, [r4, #0]
   1147e:	889b      	ldrh	r3, [r3, #4]
   11480:	80a3      	strh	r3, [r4, #4]
    ble_hs_unlock();
   11482:	f7fe fb13 	bl	faac <ble_hs_unlock>
}
   11486:	4628      	mov	r0, r5
   11488:	b002      	add	sp, #8
   1148a:	bd70      	pop	{r4, r5, r6, pc}

0001148c <ble_hs_id_use_addr>:

int
ble_hs_id_use_addr(uint8_t own_addr_type)
{
   1148c:	b510      	push	{r4, lr}
   1148e:	4604      	mov	r4, r0
    int rc;

    rc = ble_hs_id_addr_type_usable(own_addr_type);
   11490:	f7ff ffc2 	bl	11418 <ble_hs_id_addr_type_usable>
    if (rc != 0) {
   11494:	4603      	mov	r3, r0
   11496:	b918      	cbnz	r0, 114a0 <ble_hs_id_use_addr+0x14>
        return rc;
    }

    /* If privacy is being used, make sure RPA rotation is in effect. */
    if (own_addr_type == BLE_OWN_ADDR_RPA_PUBLIC_DEFAULT ||
   11498:	3c02      	subs	r4, #2
   1149a:	b2e4      	uxtb	r4, r4
   1149c:	2c01      	cmp	r4, #1
   1149e:	d901      	bls.n	114a4 <ble_hs_id_use_addr+0x18>
            return rc;
        }
    }

    return 0;
}
   114a0:	4618      	mov	r0, r3
   114a2:	bd10      	pop	{r4, pc}
        rc = ble_hs_pvcy_ensure_started();
   114a4:	f000 f974 	bl	11790 <ble_hs_pvcy_ensure_started>
   114a8:	4603      	mov	r3, r0
   114aa:	e7f9      	b.n	114a0 <ble_hs_id_use_addr+0x14>

000114ac <ble_hs_id_infer_auto>:

int
ble_hs_id_infer_auto(int privacy, uint8_t *out_addr_type)
{
   114ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   114b0:	4604      	mov	r4, r0
   114b2:	4688      	mov	r8, r1
    uint8_t addr_type;
    int num_addr_types;
    int rc;
    int i;

    ble_hs_lock();
   114b4:	f7fe faf6 	bl	faa4 <ble_hs_lock>

    if (privacy) {
   114b8:	b16c      	cbz	r4, 114d6 <ble_hs_id_infer_auto+0x2a>
        addr_types = priv_addr_types;
   114ba:	4f0c      	ldr	r7, [pc, #48]	; (114ec <ble_hs_id_infer_auto+0x40>)
    } else {
        addr_types = pub_addr_types;
        num_addr_types = sizeof pub_addr_types / sizeof pub_addr_types[0];
    }

    for (i = 0; i < num_addr_types; i++) {
   114bc:	2400      	movs	r4, #0
   114be:	2c01      	cmp	r4, #1
   114c0:	dc0e      	bgt.n	114e0 <ble_hs_id_infer_auto+0x34>
        addr_type = addr_types[i];
   114c2:	5d3e      	ldrb	r6, [r7, r4]

        rc = ble_hs_id_addr_type_usable(addr_type);
   114c4:	4630      	mov	r0, r6
   114c6:	f7ff ffa7 	bl	11418 <ble_hs_id_addr_type_usable>
        switch (rc) {
   114ca:	4605      	mov	r5, r0
   114cc:	b128      	cbz	r0, 114da <ble_hs_id_infer_auto+0x2e>
   114ce:	2815      	cmp	r0, #21
   114d0:	d107      	bne.n	114e2 <ble_hs_id_infer_auto+0x36>
    for (i = 0; i < num_addr_types; i++) {
   114d2:	3401      	adds	r4, #1
   114d4:	e7f3      	b.n	114be <ble_hs_id_infer_auto+0x12>
        addr_types = pub_addr_types;
   114d6:	4f06      	ldr	r7, [pc, #24]	; (114f0 <ble_hs_id_infer_auto+0x44>)
   114d8:	e7f0      	b.n	114bc <ble_hs_id_infer_auto+0x10>
        case 0:
            *out_addr_type = addr_type;
   114da:	f888 6000 	strb.w	r6, [r8]
            goto done;
   114de:	e000      	b.n	114e2 <ble_hs_id_infer_auto+0x36>
        default:
            goto done;
        }
    }

    rc = BLE_HS_ENOADDR;
   114e0:	2515      	movs	r5, #21

done:
    ble_hs_unlock();
   114e2:	f7fe fae3 	bl	faac <ble_hs_unlock>
    return rc;
}
   114e6:	4628      	mov	r0, r5
   114e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   114ec:	00028e70 	.word	0x00028e70
   114f0:	00028e74 	.word	0x00028e74

000114f4 <ble_hs_id_reset>:
 * when the controller loses its random address (e.g., on a stack reset).
 */
void
ble_hs_id_reset(void)
{
    memset(ble_hs_id_pub, 0, sizeof ble_hs_id_pub);
   114f4:	4a03      	ldr	r2, [pc, #12]	; (11504 <ble_hs_id_reset+0x10>)
   114f6:	2300      	movs	r3, #0
   114f8:	6013      	str	r3, [r2, #0]
   114fa:	8093      	strh	r3, [r2, #4]
    memset(ble_hs_id_rnd, 0, sizeof ble_hs_id_pub);
   114fc:	4a02      	ldr	r2, [pc, #8]	; (11508 <ble_hs_id_reset+0x14>)
   114fe:	6013      	str	r3, [r2, #0]
   11500:	8093      	strh	r3, [r2, #4]
}
   11502:	4770      	bx	lr
   11504:	20007578 	.word	0x20007578
   11508:	20007580 	.word	0x20007580

0001150c <ble_hs_log_mbuf>:

struct log ble_hs_log;

void
ble_hs_log_mbuf(const struct os_mbuf *om)
{
   1150c:	b530      	push	{r4, r5, lr}
   1150e:	b083      	sub	sp, #12
   11510:	4605      	mov	r5, r0
    uint8_t u8;
    int i;

    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   11512:	2400      	movs	r4, #0
   11514:	e007      	b.n	11526 <ble_hs_log_mbuf+0x1a>
        os_mbuf_copydata(om, i, 1, &u8);
   11516:	f10d 0307 	add.w	r3, sp, #7
   1151a:	2201      	movs	r2, #1
   1151c:	4621      	mov	r1, r4
   1151e:	4628      	mov	r0, r5
   11520:	f7f8 ff60 	bl	a3e4 <os_mbuf_copydata>
    for (i = 0; i < OS_MBUF_PKTLEN(om); i++) {
   11524:	3401      	adds	r4, #1
   11526:	8a2b      	ldrh	r3, [r5, #16]
   11528:	42a3      	cmp	r3, r4
   1152a:	dcf4      	bgt.n	11516 <ble_hs_log_mbuf+0xa>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8);
    }
}
   1152c:	b003      	add	sp, #12
   1152e:	bd30      	pop	{r4, r5, pc}

00011530 <ble_hs_log_flat_buf>:
{
    const uint8_t *u8ptr;
    int i;

    u8ptr = data;
    for (i = 0; i < len; i++) {
   11530:	2300      	movs	r3, #0
   11532:	e000      	b.n	11536 <ble_hs_log_flat_buf+0x6>
   11534:	3301      	adds	r3, #1
   11536:	428b      	cmp	r3, r1
   11538:	dbfc      	blt.n	11534 <ble_hs_log_flat_buf+0x4>
        BLE_HS_LOG(DEBUG, "0x%02x ", u8ptr[i]);
    }
}
   1153a:	4770      	bx	lr

0001153c <ble_hs_mbuf_gen_pkt>:
/**
 * Allocates an mbuf for use by the nimble host.
 */
static struct os_mbuf *
ble_hs_mbuf_gen_pkt(uint16_t leading_space)
{
   1153c:	b510      	push	{r4, lr}
   1153e:	4604      	mov	r4, r0
    struct os_mbuf *om;
    int rc;

    om = os_msys_get_pkthdr(0, 0);
   11540:	2100      	movs	r1, #0
   11542:	4608      	mov	r0, r1
   11544:	f7f9 fb65 	bl	ac12 <os_msys_get_pkthdr>
    if (om == NULL) {
   11548:	4603      	mov	r3, r0
   1154a:	b130      	cbz	r0, 1155a <ble_hs_mbuf_gen_pkt+0x1e>
        return NULL;
    }

    if (om->om_omp->omp_databuf_len < leading_space) {
   1154c:	6882      	ldr	r2, [r0, #8]
   1154e:	8812      	ldrh	r2, [r2, #0]
   11550:	42a2      	cmp	r2, r4
   11552:	d304      	bcc.n	1155e <ble_hs_mbuf_gen_pkt+0x22>
        rc = os_mbuf_free_chain(om);
        BLE_HS_DBG_ASSERT_EVAL(rc == 0);
        return NULL;
    }

    om->om_data += leading_space;
   11554:	6800      	ldr	r0, [r0, #0]
   11556:	4420      	add	r0, r4
   11558:	6018      	str	r0, [r3, #0]

    return om;
}
   1155a:	4618      	mov	r0, r3
   1155c:	bd10      	pop	{r4, pc}
        rc = os_mbuf_free_chain(om);
   1155e:	f7f8 fe3f 	bl	a1e0 <os_mbuf_free_chain>
        return NULL;
   11562:	2300      	movs	r3, #0
   11564:	e7f9      	b.n	1155a <ble_hs_mbuf_gen_pkt+0x1e>

00011566 <ble_hs_mbuf_acl_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_acl_pkt(void)
{
   11566:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ);
   11568:	2004      	movs	r0, #4
   1156a:	f7ff ffe7 	bl	1153c <ble_hs_mbuf_gen_pkt>
}
   1156e:	bd08      	pop	{r3, pc}

00011570 <ble_hs_mbuf_l2cap_pkt>:
 * @return                  An empty mbuf on success; null on memory
 *                              exhaustion.
 */
struct os_mbuf *
ble_hs_mbuf_l2cap_pkt(void)
{
   11570:	b508      	push	{r3, lr}
    return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ + BLE_L2CAP_HDR_SZ);
   11572:	2008      	movs	r0, #8
   11574:	f7ff ffe2 	bl	1153c <ble_hs_mbuf_gen_pkt>
}
   11578:	bd08      	pop	{r3, pc}

0001157a <ble_hs_mbuf_att_pkt>:

struct os_mbuf *
ble_hs_mbuf_att_pkt(void)
{
   1157a:	b508      	push	{r3, lr}
    /* Prepare write request and response are the larget ATT commands which
     * contain attribute data.
     */
     return ble_hs_mbuf_gen_pkt(BLE_HCI_DATA_HDR_SZ +
   1157c:	200d      	movs	r0, #13
   1157e:	f7ff ffdd 	bl	1153c <ble_hs_mbuf_gen_pkt>
                                BLE_L2CAP_HDR_SZ +
                                BLE_ATT_PREP_WRITE_CMD_BASE_SZ);
}
   11582:	bd08      	pop	{r3, pc}

00011584 <ble_hs_mbuf_to_flat>:
}

int
ble_hs_mbuf_to_flat(const struct os_mbuf *om, void *flat, uint16_t max_len,
                    uint16_t *out_copy_len)
{
   11584:	b570      	push	{r4, r5, r6, lr}
   11586:	4615      	mov	r5, r2
   11588:	461e      	mov	r6, r3
    uint16_t copy_len;
    int rc;

    if (OS_MBUF_PKTLEN(om) <= max_len) {
   1158a:	8a04      	ldrh	r4, [r0, #16]
   1158c:	4294      	cmp	r4, r2
   1158e:	d900      	bls.n	11592 <ble_hs_mbuf_to_flat+0xe>
        copy_len = OS_MBUF_PKTLEN(om);
    } else {
        copy_len = max_len;
   11590:	4614      	mov	r4, r2
    }

    rc = os_mbuf_copydata(om, 0, copy_len, flat);
   11592:	460b      	mov	r3, r1
   11594:	4622      	mov	r2, r4
   11596:	2100      	movs	r1, #0
   11598:	f7f8 ff24 	bl	a3e4 <os_mbuf_copydata>
    if (rc != 0) {
   1159c:	4603      	mov	r3, r0
   1159e:	b930      	cbnz	r0, 115ae <ble_hs_mbuf_to_flat+0x2a>
        return BLE_HS_EUNKNOWN;
    }

    if (copy_len > max_len) {
   115a0:	42ac      	cmp	r4, r5
   115a2:	d900      	bls.n	115a6 <ble_hs_mbuf_to_flat+0x22>
        rc = BLE_HS_EMSGSIZE;
   115a4:	2304      	movs	r3, #4
    } else {
        rc = 0;
    }

    if (out_copy_len != NULL) {
   115a6:	b106      	cbz	r6, 115aa <ble_hs_mbuf_to_flat+0x26>
        *out_copy_len = copy_len;
   115a8:	8034      	strh	r4, [r6, #0]
    }
    return rc;
}
   115aa:	4618      	mov	r0, r3
   115ac:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EUNKNOWN;
   115ae:	2311      	movs	r3, #17
   115b0:	e7fb      	b.n	115aa <ble_hs_mbuf_to_flat+0x26>

000115b2 <ble_hs_mbuf_pullup_base>:

int
ble_hs_mbuf_pullup_base(struct os_mbuf **om, int base_len)
{
    if (OS_MBUF_PKTLEN(*om) < base_len) {
   115b2:	6803      	ldr	r3, [r0, #0]
   115b4:	8a1a      	ldrh	r2, [r3, #16]
   115b6:	428a      	cmp	r2, r1
   115b8:	db0b      	blt.n	115d2 <ble_hs_mbuf_pullup_base+0x20>
{
   115ba:	b510      	push	{r4, lr}
   115bc:	4604      	mov	r4, r0
        return BLE_HS_EBADDATA;
    }

    *om = os_mbuf_pullup(*om, base_len);
   115be:	b289      	uxth	r1, r1
   115c0:	4618      	mov	r0, r3
   115c2:	f7f9 f8c6 	bl	a752 <os_mbuf_pullup>
   115c6:	6020      	str	r0, [r4, #0]
    if (*om == NULL) {
   115c8:	b108      	cbz	r0, 115ce <ble_hs_mbuf_pullup_base+0x1c>
        return BLE_HS_ENOMEM;
    }

    return 0;
   115ca:	2000      	movs	r0, #0
}
   115cc:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOMEM;
   115ce:	2006      	movs	r0, #6
   115d0:	e7fc      	b.n	115cc <ble_hs_mbuf_pullup_base+0x1a>
        return BLE_HS_EBADDATA;
   115d2:	200a      	movs	r0, #10
}
   115d4:	4770      	bx	lr

000115d6 <ble_hs_misc_restore_one_irk>:
}

static int
ble_hs_misc_restore_one_irk(int obj_type, union ble_store_value *val,
                            void *cookie)
{
   115d6:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    sec = &val->sec;
    if (sec->irk_present) {
   115d8:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
   115dc:	f013 0f01 	tst.w	r3, #1
   115e0:	d101      	bne.n	115e6 <ble_hs_misc_restore_one_irk+0x10>
            BLE_HS_LOG(ERROR, "failed to configure restored IRK\n");
        }
    }

    return 0;
}
   115e2:	2000      	movs	r0, #0
   115e4:	bd08      	pop	{r3, pc}
   115e6:	4608      	mov	r0, r1
        rc = ble_hs_pvcy_add_entry(sec->peer_addr.val, sec->peer_addr.type,
   115e8:	460a      	mov	r2, r1
   115ea:	f812 1b29 	ldrb.w	r1, [r2], #41
   115ee:	3001      	adds	r0, #1
   115f0:	f000 f94e 	bl	11890 <ble_hs_pvcy_add_entry>
   115f4:	e7f5      	b.n	115e2 <ble_hs_misc_restore_one_irk+0xc>

000115f6 <ble_hs_misc_conn_chan_find>:
{
   115f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   115f8:	460f      	mov	r7, r1
   115fa:	4615      	mov	r5, r2
   115fc:	461c      	mov	r4, r3
    conn = ble_hs_conn_find(conn_handle);
   115fe:	f7ff f85b 	bl	106b8 <ble_hs_conn_find>
    if (conn == NULL) {
   11602:	4606      	mov	r6, r0
   11604:	b160      	cbz	r0, 11620 <ble_hs_misc_conn_chan_find+0x2a>
        chan = ble_hs_conn_chan_find_by_scid(conn, cid);
   11606:	4639      	mov	r1, r7
   11608:	f7fe ffac 	bl	10564 <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   1160c:	4603      	mov	r3, r0
   1160e:	b128      	cbz	r0, 1161c <ble_hs_misc_conn_chan_find+0x26>
            rc = 0;
   11610:	2000      	movs	r0, #0
    if (out_conn != NULL) {
   11612:	b105      	cbz	r5, 11616 <ble_hs_misc_conn_chan_find+0x20>
        *out_conn = conn;
   11614:	602e      	str	r6, [r5, #0]
    if (out_chan != NULL) {
   11616:	b104      	cbz	r4, 1161a <ble_hs_misc_conn_chan_find+0x24>
        *out_chan = chan;
   11618:	6023      	str	r3, [r4, #0]
}
   1161a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = BLE_HS_ENOTCONN;
   1161c:	2007      	movs	r0, #7
   1161e:	e7f8      	b.n	11612 <ble_hs_misc_conn_chan_find+0x1c>
        rc = BLE_HS_ENOTCONN;
   11620:	2007      	movs	r0, #7
        chan = NULL;
   11622:	2300      	movs	r3, #0
   11624:	e7f5      	b.n	11612 <ble_hs_misc_conn_chan_find+0x1c>

00011626 <ble_hs_misc_conn_chan_find_reqd>:
{
   11626:	b530      	push	{r4, r5, lr}
   11628:	b083      	sub	sp, #12
   1162a:	4615      	mov	r5, r2
   1162c:	461c      	mov	r4, r3
    rc = ble_hs_misc_conn_chan_find(conn_handle, cid, &conn, &chan);
   1162e:	ab01      	add	r3, sp, #4
   11630:	466a      	mov	r2, sp
   11632:	f7ff ffe0 	bl	115f6 <ble_hs_misc_conn_chan_find>
    if (rc != 0) {
   11636:	4603      	mov	r3, r0
   11638:	b928      	cbnz	r0, 11646 <ble_hs_misc_conn_chan_find_reqd+0x20>
    if (out_conn != NULL) {
   1163a:	b10d      	cbz	r5, 11640 <ble_hs_misc_conn_chan_find_reqd+0x1a>
        *out_conn = conn;
   1163c:	9a00      	ldr	r2, [sp, #0]
   1163e:	602a      	str	r2, [r5, #0]
    if (out_chan != NULL) {
   11640:	b10c      	cbz	r4, 11646 <ble_hs_misc_conn_chan_find_reqd+0x20>
        *out_chan = chan;
   11642:	9a01      	ldr	r2, [sp, #4]
   11644:	6022      	str	r2, [r4, #0]
}
   11646:	4618      	mov	r0, r3
   11648:	b003      	add	sp, #12
   1164a:	bd30      	pop	{r4, r5, pc}

0001164c <ble_hs_misc_own_addr_type_to_id>:
    switch (own_addr_type) {
   1164c:	2801      	cmp	r0, #1
   1164e:	d003      	beq.n	11658 <ble_hs_misc_own_addr_type_to_id+0xc>
   11650:	2803      	cmp	r0, #3
   11652:	d001      	beq.n	11658 <ble_hs_misc_own_addr_type_to_id+0xc>
         return BLE_ADDR_PUBLIC;
   11654:	2000      	movs	r0, #0
   11656:	4770      	bx	lr
         return BLE_ADDR_RANDOM;
   11658:	2001      	movs	r0, #1
}
   1165a:	4770      	bx	lr

0001165c <ble_hs_misc_peer_addr_type_to_id>:
    switch (peer_addr_type) {
   1165c:	2801      	cmp	r0, #1
   1165e:	d003      	beq.n	11668 <ble_hs_misc_peer_addr_type_to_id+0xc>
   11660:	2803      	cmp	r0, #3
   11662:	d001      	beq.n	11668 <ble_hs_misc_peer_addr_type_to_id+0xc>
            return BLE_ADDR_PUBLIC;
   11664:	2000      	movs	r0, #0
   11666:	4770      	bx	lr
            return BLE_ADDR_RANDOM;
   11668:	2001      	movs	r0, #1
}
   1166a:	4770      	bx	lr

0001166c <ble_hs_misc_restore_irks>:

int
ble_hs_misc_restore_irks(void)
{
   1166c:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_PEER_SEC,
   1166e:	2200      	movs	r2, #0
   11670:	4902      	ldr	r1, [pc, #8]	; (1167c <ble_hs_misc_restore_irks+0x10>)
   11672:	2002      	movs	r0, #2
   11674:	f002 fd9b 	bl	141ae <ble_store_iterate>
                           ble_hs_misc_restore_one_irk,
                           NULL);
    return rc;
}
   11678:	bd08      	pop	{r3, pc}
   1167a:	bf00      	nop
   1167c:	000115d7 	.word	0x000115d7

00011680 <ble_mqueue_init>:

#include "ble_hs_priv.h"

int
ble_mqueue_init(struct ble_mqueue *mq, ble_npl_event_fn *ev_fn, void *ev_arg)
{
   11680:	4603      	mov	r3, r0
    STAILQ_INIT(&mq->head);
   11682:	2000      	movs	r0, #0
   11684:	6018      	str	r0, [r3, #0]
   11686:	605b      	str	r3, [r3, #4]
    memset(ev, 0, sizeof(*ev));
   11688:	6098      	str	r0, [r3, #8]
   1168a:	6158      	str	r0, [r3, #20]
    ev->ev.ev_queued = 0;
   1168c:	7218      	strb	r0, [r3, #8]
    ev->ev.ev_cb = (os_event_fn *)fn;
   1168e:	60d9      	str	r1, [r3, #12]
    ev->ev.ev_arg = arg;
   11690:	611a      	str	r2, [r3, #16]

    ble_npl_event_init(&mq->ev, ev_fn, ev_arg);

    return (0);
}
   11692:	4770      	bx	lr

00011694 <ble_mqueue_get>:

struct os_mbuf *
ble_mqueue_get(struct ble_mqueue *mq)
{
   11694:	b538      	push	{r3, r4, r5, lr}
   11696:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *om;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   11698:	f7f9 ff1a 	bl	b4d0 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->head);
   1169c:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   1169e:	b114      	cbz	r4, 116a6 <ble_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   116a0:	6863      	ldr	r3, [r4, #4]
   116a2:	602b      	str	r3, [r5, #0]
   116a4:	b12b      	cbz	r3, 116b2 <ble_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   116a6:	f7f9 ff19 	bl	b4dc <os_arch_restore_sr>

    if (mp) {
   116aa:	b124      	cbz	r4, 116b6 <ble_mqueue_get+0x22>
        om = OS_MBUF_PKTHDR_TO_MBUF(mp);
   116ac:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        om = NULL;
    }

    return (om);
}
   116b0:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->head, omp_next);
   116b2:	606d      	str	r5, [r5, #4]
   116b4:	e7f7      	b.n	116a6 <ble_mqueue_get+0x12>
        om = NULL;
   116b6:	2000      	movs	r0, #0
    return (om);
   116b8:	e7fa      	b.n	116b0 <ble_mqueue_get+0x1c>

000116ba <ble_mqueue_put>:

int
ble_mqueue_put(struct ble_mqueue *mq, struct ble_npl_eventq *evq, struct os_mbuf *om)
{
   116ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(om)) {
   116bc:	7953      	ldrb	r3, [r2, #5]
   116be:	2b07      	cmp	r3, #7
   116c0:	d916      	bls.n	116f0 <ble_mqueue_put+0x36>
   116c2:	4614      	mov	r4, r2
   116c4:	460e      	mov	r6, r1
   116c6:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(om);
   116c8:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   116cc:	f7f9 ff00 	bl	b4d0 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->head, mp, omp_next);
   116d0:	2300      	movs	r3, #0
   116d2:	f844 3f14 	str.w	r3, [r4, #20]!
   116d6:	686b      	ldr	r3, [r5, #4]
   116d8:	601f      	str	r7, [r3, #0]
   116da:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   116dc:	f7f9 fefe 	bl	b4dc <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   116e0:	b146      	cbz	r6, 116f4 <ble_mqueue_put+0x3a>
    os_eventq_put(&evq->evq, &ev->ev);
   116e2:	f105 0108 	add.w	r1, r5, #8
   116e6:	4630      	mov	r0, r6
   116e8:	f7f8 fc4d 	bl	9f86 <os_eventq_put>
        ble_npl_eventq_put(evq, &mq->ev);
    }

    return (0);
   116ec:	2000      	movs	r0, #0
   116ee:	e000      	b.n	116f2 <ble_mqueue_put+0x38>
err:
    return (rc);
   116f0:	2002      	movs	r0, #2
}
   116f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   116f4:	2000      	movs	r0, #0
   116f6:	e7fc      	b.n	116f2 <ble_mqueue_put+0x38>

000116f8 <ble_hs_pvcy_set_addr_timeout>:
static int
ble_hs_pvcy_set_addr_timeout(uint16_t timeout)
{
    struct ble_hci_le_set_rpa_tmo_cp cmd;

    if (timeout == 0 || timeout > 0xA1B8) {
   116f8:	1e43      	subs	r3, r0, #1
   116fa:	b29b      	uxth	r3, r3
   116fc:	f24a 12b7 	movw	r2, #41399	; 0xa1b7
   11700:	4293      	cmp	r3, r2
   11702:	d80e      	bhi.n	11722 <ble_hs_pvcy_set_addr_timeout+0x2a>
{
   11704:	b500      	push	{lr}
   11706:	b085      	sub	sp, #20
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    cmd.rpa_timeout = htole16(timeout);
   11708:	a904      	add	r1, sp, #16
   1170a:	f821 0d04 	strh.w	r0, [r1, #-4]!

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1170e:	2300      	movs	r3, #0
   11710:	9300      	str	r3, [sp, #0]
   11712:	2202      	movs	r2, #2
   11714:	f242 002e 	movw	r0, #8238	; 0x202e
   11718:	f7ff fa1a 	bl	10b50 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_SET_RPA_TMO),
                             &cmd, sizeof(cmd), NULL, 0);
}
   1171c:	b005      	add	sp, #20
   1171e:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_ERR_INV_HCI_CMD_PARMS;
   11722:	2012      	movs	r0, #18
}
   11724:	4770      	bx	lr

00011726 <ble_hs_pvcy_clear_entries>:
                             &cmd, sizeof(cmd), NULL, 0);
}

static int
ble_hs_pvcy_clear_entries(void)
{
   11726:	b500      	push	{lr}
   11728:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1172a:	2100      	movs	r1, #0
   1172c:	9100      	str	r1, [sp, #0]
   1172e:	460b      	mov	r3, r1
   11730:	460a      	mov	r2, r1
   11732:	f242 0029 	movw	r0, #8233	; 0x2029
   11736:	f7ff fa0b 	bl	10b50 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_LE_CLR_RESOLV_LIST),
                             NULL, 0, NULL, 0);
}
   1173a:	b003      	add	sp, #12
   1173c:	f85d fb04 	ldr.w	pc, [sp], #4

00011740 <ble_hs_pvcy_set_resolve_enabled>:
{
   11740:	b500      	push	{lr}
   11742:	b085      	sub	sp, #20
    cmd.enable = enable;
   11744:	a904      	add	r1, sp, #16
   11746:	f801 0d04 	strb.w	r0, [r1, #-4]!
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1174a:	2300      	movs	r3, #0
   1174c:	9300      	str	r3, [sp, #0]
   1174e:	2201      	movs	r2, #1
   11750:	f242 002d 	movw	r0, #8237	; 0x202d
   11754:	f7ff f9fc 	bl	10b50 <ble_hs_hci_cmd_tx>
}
   11758:	b005      	add	sp, #20
   1175a:	f85d fb04 	ldr.w	pc, [sp], #4

0001175e <ble_hs_pvcy_remove_entry>:
{
   1175e:	b500      	push	{lr}
   11760:	b085      	sub	sp, #20
    if (addr_type > BLE_ADDR_RANDOM) {
   11762:	2801      	cmp	r0, #1
   11764:	d901      	bls.n	1176a <ble_hs_pvcy_remove_entry+0xc>
        addr_type = addr_type % 2;
   11766:	f000 0001 	and.w	r0, r0, #1
    cmd.peer_addr_type = addr_type;
   1176a:	f88d 0008 	strb.w	r0, [sp, #8]
    memcpy(cmd.peer_id_addr, addr, BLE_DEV_ADDR_LEN);
   1176e:	680b      	ldr	r3, [r1, #0]
   11770:	f8cd 3009 	str.w	r3, [sp, #9]
   11774:	888b      	ldrh	r3, [r1, #4]
   11776:	f8ad 300d 	strh.w	r3, [sp, #13]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   1177a:	2300      	movs	r3, #0
   1177c:	9300      	str	r3, [sp, #0]
   1177e:	2207      	movs	r2, #7
   11780:	a902      	add	r1, sp, #8
   11782:	f242 0028 	movw	r0, #8232	; 0x2028
   11786:	f7ff f9e3 	bl	10b50 <ble_hs_hci_cmd_tx>
}
   1178a:	b005      	add	sp, #20
   1178c:	f85d fb04 	ldr.w	pc, [sp], #4

00011790 <ble_hs_pvcy_ensure_started>:
    return rc;
}

int
ble_hs_pvcy_ensure_started(void)
{
   11790:	b508      	push	{r3, lr}
    int rc;

    if (ble_hs_pvcy_started) {
   11792:	4b08      	ldr	r3, [pc, #32]	; (117b4 <ble_hs_pvcy_ensure_started+0x24>)
   11794:	781b      	ldrb	r3, [r3, #0]
   11796:	b113      	cbz	r3, 1179e <ble_hs_pvcy_ensure_started+0xe>
        return 0;
   11798:	2300      	movs	r3, #0
    }

    ble_hs_pvcy_started = 1;

    return 0;
}
   1179a:	4618      	mov	r0, r3
   1179c:	bd08      	pop	{r3, pc}
    rc = ble_hs_pvcy_set_addr_timeout(MYNEWT_VAL(BLE_RPA_TIMEOUT));
   1179e:	f44f 7096 	mov.w	r0, #300	; 0x12c
   117a2:	f7ff ffa9 	bl	116f8 <ble_hs_pvcy_set_addr_timeout>
    if (rc != 0) {
   117a6:	4603      	mov	r3, r0
   117a8:	2800      	cmp	r0, #0
   117aa:	d1f6      	bne.n	1179a <ble_hs_pvcy_ensure_started+0xa>
    ble_hs_pvcy_started = 1;
   117ac:	4a01      	ldr	r2, [pc, #4]	; (117b4 <ble_hs_pvcy_ensure_started+0x24>)
   117ae:	2101      	movs	r1, #1
   117b0:	7011      	strb	r1, [r2, #0]
    return 0;
   117b2:	e7f2      	b.n	1179a <ble_hs_pvcy_ensure_started+0xa>
   117b4:	200075a0 	.word	0x200075a0

000117b8 <ble_hs_pvcy_our_irk>:
int
ble_hs_pvcy_our_irk(const uint8_t **out_irk)
{
    /* XXX: Return error if privacy not supported. */

    *out_irk = ble_hs_pvcy_irk;
   117b8:	4b01      	ldr	r3, [pc, #4]	; (117c0 <ble_hs_pvcy_our_irk+0x8>)
   117ba:	6003      	str	r3, [r0, #0]
    return 0;
}
   117bc:	2000      	movs	r0, #0
   117be:	4770      	bx	lr
   117c0:	20007590 	.word	0x20007590

000117c4 <ble_hs_pvcy_set_mode>:
int
ble_hs_pvcy_set_mode(const ble_addr_t *addr, uint8_t priv_mode)
{
    struct ble_hci_le_set_privacy_mode_cp cmd;

    if (addr->type > BLE_ADDR_RANDOM) {
   117c4:	7803      	ldrb	r3, [r0, #0]
   117c6:	2b01      	cmp	r3, #1
   117c8:	d901      	bls.n	117ce <ble_hs_pvcy_set_mode+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   117ca:	2012      	movs	r0, #18
    memcpy(cmd.peer_id_addr, addr->val, BLE_DEV_ADDR_LEN);

    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
                                        BLE_HCI_OCF_LE_SET_PRIVACY_MODE),
                             &cmd, sizeof(cmd), NULL, 0);
}
   117cc:	4770      	bx	lr
{
   117ce:	b500      	push	{lr}
   117d0:	b085      	sub	sp, #20
    cmd.mode = priv_mode;
   117d2:	f88d 100f 	strb.w	r1, [sp, #15]
    cmd.peer_id_addr_type = addr->type;
   117d6:	7803      	ldrb	r3, [r0, #0]
   117d8:	f88d 3008 	strb.w	r3, [sp, #8]
    memcpy(cmd.peer_id_addr, addr->val, BLE_DEV_ADDR_LEN);
   117dc:	f850 3f01 	ldr.w	r3, [r0, #1]!
   117e0:	f8cd 3009 	str.w	r3, [sp, #9]
   117e4:	8883      	ldrh	r3, [r0, #4]
   117e6:	f8ad 300d 	strh.w	r3, [sp, #13]
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   117ea:	2300      	movs	r3, #0
   117ec:	9300      	str	r3, [sp, #0]
   117ee:	2208      	movs	r2, #8
   117f0:	eb0d 0102 	add.w	r1, sp, r2
   117f4:	f242 004e 	movw	r0, #8270	; 0x204e
   117f8:	f7ff f9aa 	bl	10b50 <ble_hs_hci_cmd_tx>
}
   117fc:	b005      	add	sp, #20
   117fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00011804 <ble_hs_pvcy_add_entry_hci>:
    if (addr_type > BLE_ADDR_RANDOM) {
   11804:	2901      	cmp	r1, #1
   11806:	d902      	bls.n	1180e <ble_hs_pvcy_add_entry_hci+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   11808:	2312      	movs	r3, #18
}
   1180a:	4618      	mov	r0, r3
   1180c:	4770      	bx	lr
{
   1180e:	b5f0      	push	{r4, r5, r6, r7, lr}
   11810:	b08f      	sub	sp, #60	; 0x3c
   11812:	4614      	mov	r4, r2
   11814:	460e      	mov	r6, r1
   11816:	4607      	mov	r7, r0
    cmd.peer_addr_type = addr_type;
   11818:	f88d 1010 	strb.w	r1, [sp, #16]
    memcpy(cmd.peer_id_addr, addr, 6);
   1181c:	6803      	ldr	r3, [r0, #0]
   1181e:	f8cd 3011 	str.w	r3, [sp, #17]
   11822:	8883      	ldrh	r3, [r0, #4]
   11824:	f8ad 3015 	strh.w	r3, [sp, #21]
    memcpy(cmd.local_irk, ble_hs_pvcy_irk, 16);
   11828:	4d18      	ldr	r5, [pc, #96]	; (1188c <ble_hs_pvcy_add_entry_hci+0x88>)
   1182a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1182c:	f8cd 0027 	str.w	r0, [sp, #39]	; 0x27
   11830:	f8cd 102b 	str.w	r1, [sp, #43]	; 0x2b
   11834:	f8cd 202f 	str.w	r2, [sp, #47]	; 0x2f
   11838:	f8cd 3033 	str.w	r3, [sp, #51]	; 0x33
    memcpy(cmd.peer_irk, irk, 16);
   1183c:	6820      	ldr	r0, [r4, #0]
   1183e:	6861      	ldr	r1, [r4, #4]
   11840:	68a2      	ldr	r2, [r4, #8]
   11842:	68e3      	ldr	r3, [r4, #12]
   11844:	f8cd 0017 	str.w	r0, [sp, #23]
   11848:	f8cd 101b 	str.w	r1, [sp, #27]
   1184c:	f8cd 201f 	str.w	r2, [sp, #31]
   11850:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   11854:	2300      	movs	r3, #0
   11856:	9300      	str	r3, [sp, #0]
   11858:	2227      	movs	r2, #39	; 0x27
   1185a:	a904      	add	r1, sp, #16
   1185c:	f242 0027 	movw	r0, #8231	; 0x2027
   11860:	f7ff f976 	bl	10b50 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   11864:	4603      	mov	r3, r0
   11866:	b110      	cbz	r0, 1186e <ble_hs_pvcy_add_entry_hci+0x6a>
}
   11868:	4618      	mov	r0, r3
   1186a:	b00f      	add	sp, #60	; 0x3c
   1186c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    peer_addr.type = addr_type;
   1186e:	f88d 6008 	strb.w	r6, [sp, #8]
    memcpy(peer_addr.val, addr, sizeof peer_addr.val);
   11872:	683b      	ldr	r3, [r7, #0]
   11874:	f8cd 3009 	str.w	r3, [sp, #9]
   11878:	88bb      	ldrh	r3, [r7, #4]
   1187a:	f8ad 300d 	strh.w	r3, [sp, #13]
    rc = ble_hs_pvcy_set_mode(&peer_addr, BLE_GAP_PRIVATE_MODE_DEVICE);
   1187e:	2101      	movs	r1, #1
   11880:	a802      	add	r0, sp, #8
   11882:	f7ff ff9f 	bl	117c4 <ble_hs_pvcy_set_mode>
   11886:	4603      	mov	r3, r0
   11888:	e7ee      	b.n	11868 <ble_hs_pvcy_add_entry_hci+0x64>
   1188a:	bf00      	nop
   1188c:	20007590 	.word	0x20007590

00011890 <ble_hs_pvcy_add_entry>:
{
   11890:	b570      	push	{r4, r5, r6, lr}
   11892:	4604      	mov	r4, r0
   11894:	460d      	mov	r5, r1
   11896:	4616      	mov	r6, r2
    ble_gap_preempt();
   11898:	f7fc f912 	bl	dac0 <ble_gap_preempt>
    rc = ble_hs_pvcy_add_entry_hci(addr, addr_type, irk);
   1189c:	4632      	mov	r2, r6
   1189e:	4629      	mov	r1, r5
   118a0:	4620      	mov	r0, r4
   118a2:	f7ff ffaf 	bl	11804 <ble_hs_pvcy_add_entry_hci>
   118a6:	4604      	mov	r4, r0
    ble_gap_preempt_done();
   118a8:	f7fc f916 	bl	dad8 <ble_gap_preempt_done>
}
   118ac:	4620      	mov	r0, r4
   118ae:	bd70      	pop	{r4, r5, r6, pc}

000118b0 <ble_hs_pvcy_set_our_irk>:
{
   118b0:	b510      	push	{r4, lr}
   118b2:	b086      	sub	sp, #24
    if (irk != NULL) {
   118b4:	b180      	cbz	r0, 118d8 <ble_hs_pvcy_set_our_irk+0x28>
   118b6:	4603      	mov	r3, r0
        memcpy(new_irk, irk, 16);
   118b8:	466c      	mov	r4, sp
   118ba:	6800      	ldr	r0, [r0, #0]
   118bc:	6859      	ldr	r1, [r3, #4]
   118be:	689a      	ldr	r2, [r3, #8]
   118c0:	68db      	ldr	r3, [r3, #12]
   118c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    if (memcmp(ble_hs_pvcy_irk, new_irk, 16) != 0) {
   118c4:	2210      	movs	r2, #16
   118c6:	4669      	mov	r1, sp
   118c8:	4818      	ldr	r0, [pc, #96]	; (1192c <ble_hs_pvcy_set_our_irk+0x7c>)
   118ca:	f7f9 ff4b 	bl	b764 <memcmp>
   118ce:	4603      	mov	r3, r0
   118d0:	b940      	cbnz	r0, 118e4 <ble_hs_pvcy_set_our_irk+0x34>
}
   118d2:	4618      	mov	r0, r3
   118d4:	b006      	add	sp, #24
   118d6:	bd10      	pop	{r4, pc}
        memcpy(new_irk, ble_hs_pvcy_default_irk, 16);
   118d8:	4b15      	ldr	r3, [pc, #84]	; (11930 <ble_hs_pvcy_set_our_irk+0x80>)
   118da:	466c      	mov	r4, sp
   118dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   118de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   118e2:	e7ef      	b.n	118c4 <ble_hs_pvcy_set_our_irk+0x14>
        memcpy(ble_hs_pvcy_irk, new_irk, 16);
   118e4:	4c11      	ldr	r4, [pc, #68]	; (1192c <ble_hs_pvcy_set_our_irk+0x7c>)
   118e6:	466b      	mov	r3, sp
   118e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   118ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        rc = ble_hs_pvcy_set_resolve_enabled(0);
   118ee:	2000      	movs	r0, #0
   118f0:	f7ff ff26 	bl	11740 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   118f4:	4603      	mov	r3, r0
   118f6:	2800      	cmp	r0, #0
   118f8:	d1eb      	bne.n	118d2 <ble_hs_pvcy_set_our_irk+0x22>
        rc = ble_hs_pvcy_clear_entries();
   118fa:	f7ff ff14 	bl	11726 <ble_hs_pvcy_clear_entries>
        if (rc != 0) {
   118fe:	4603      	mov	r3, r0
   11900:	2800      	cmp	r0, #0
   11902:	d1e6      	bne.n	118d2 <ble_hs_pvcy_set_our_irk+0x22>
        rc = ble_hs_pvcy_set_resolve_enabled(1);
   11904:	2001      	movs	r0, #1
   11906:	f7ff ff1b 	bl	11740 <ble_hs_pvcy_set_resolve_enabled>
        if (rc != 0) {
   1190a:	4603      	mov	r3, r0
   1190c:	2800      	cmp	r0, #0
   1190e:	d1e0      	bne.n	118d2 <ble_hs_pvcy_set_our_irk+0x22>
        memset(tmp_addr, 0, 6);
   11910:	2100      	movs	r1, #0
   11912:	9104      	str	r1, [sp, #16]
   11914:	f8ad 1014 	strh.w	r1, [sp, #20]
        memset(new_irk, 0, 16);
   11918:	9100      	str	r1, [sp, #0]
   1191a:	9101      	str	r1, [sp, #4]
   1191c:	9102      	str	r1, [sp, #8]
   1191e:	9103      	str	r1, [sp, #12]
        rc = ble_hs_pvcy_add_entry(tmp_addr, 0, new_irk);
   11920:	466a      	mov	r2, sp
   11922:	a804      	add	r0, sp, #16
   11924:	f7ff ffb4 	bl	11890 <ble_hs_pvcy_add_entry>
   11928:	4603      	mov	r3, r0
   1192a:	e7d2      	b.n	118d2 <ble_hs_pvcy_set_our_irk+0x22>
   1192c:	20007590 	.word	0x20007590
   11930:	00028e78 	.word	0x00028e78

00011934 <ble_hs_startup_reset_tx>:
    return 0;
}

static int
ble_hs_startup_reset_tx(void)
{
   11934:	b500      	push	{lr}
   11936:	b083      	sub	sp, #12
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   11938:	2100      	movs	r1, #0
   1193a:	9100      	str	r1, [sp, #0]
   1193c:	460b      	mov	r3, r1
   1193e:	460a      	mov	r2, r1
   11940:	f640 4003 	movw	r0, #3075	; 0xc03
   11944:	f7ff f904 	bl	10b50 <ble_hs_hci_cmd_tx>
                                        BLE_HCI_OCF_CB_RESET),
                             NULL, 0, NULL, 0);
}
   11948:	b003      	add	sp, #12
   1194a:	f85d fb04 	ldr.w	pc, [sp], #4

0001194e <ble_hs_startup_le_read_buf_sz_tx>:
{
   1194e:	b530      	push	{r4, r5, lr}
   11950:	b085      	sub	sp, #20
   11952:	4605      	mov	r5, r0
   11954:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   11956:	2303      	movs	r3, #3
   11958:	9300      	str	r3, [sp, #0]
   1195a:	ab03      	add	r3, sp, #12
   1195c:	2200      	movs	r2, #0
   1195e:	4611      	mov	r1, r2
   11960:	f242 0002 	movw	r0, #8194	; 0x2002
   11964:	f7ff f8f4 	bl	10b50 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   11968:	4603      	mov	r3, r0
   1196a:	b928      	cbnz	r0, 11978 <ble_hs_startup_le_read_buf_sz_tx+0x2a>
    *out_pktlen = le16toh(rsp.data_len);
   1196c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   11970:	802a      	strh	r2, [r5, #0]
    *out_max_pkts = rsp.data_packets;
   11972:	f89d 200e 	ldrb.w	r2, [sp, #14]
   11976:	7022      	strb	r2, [r4, #0]
}
   11978:	4618      	mov	r0, r3
   1197a:	b005      	add	sp, #20
   1197c:	bd30      	pop	{r4, r5, pc}

0001197e <ble_hs_startup_read_buf_sz_tx>:
{
   1197e:	b530      	push	{r4, r5, lr}
   11980:	b085      	sub	sp, #20
   11982:	4605      	mov	r5, r0
   11984:	460c      	mov	r4, r1
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   11986:	2307      	movs	r3, #7
   11988:	9300      	str	r3, [sp, #0]
   1198a:	ab02      	add	r3, sp, #8
   1198c:	2200      	movs	r2, #0
   1198e:	4611      	mov	r1, r2
   11990:	f241 0005 	movw	r0, #4101	; 0x1005
   11994:	f7ff f8dc 	bl	10b50 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   11998:	4603      	mov	r3, r0
   1199a:	b928      	cbnz	r0, 119a8 <ble_hs_startup_read_buf_sz_tx+0x2a>
    *out_pktlen = le16toh(rsp.acl_data_len);
   1199c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   119a0:	802a      	strh	r2, [r5, #0]
    *out_max_pkts = le16toh(rsp.acl_num);
   119a2:	f8bd 200b 	ldrh.w	r2, [sp, #11]
   119a6:	8022      	strh	r2, [r4, #0]
}
   119a8:	4618      	mov	r0, r3
   119aa:	b005      	add	sp, #20
   119ac:	bd30      	pop	{r4, r5, pc}

000119ae <ble_hs_startup_read_local_ver_tx>:
{
   119ae:	b510      	push	{r4, lr}
   119b0:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   119b2:	2308      	movs	r3, #8
   119b4:	9300      	str	r3, [sp, #0]
   119b6:	446b      	add	r3, sp
   119b8:	2200      	movs	r2, #0
   119ba:	4611      	mov	r1, r2
   119bc:	f241 0001 	movw	r0, #4097	; 0x1001
   119c0:	f7ff f8c6 	bl	10b50 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   119c4:	4604      	mov	r4, r0
   119c6:	b110      	cbz	r0, 119ce <ble_hs_startup_read_local_ver_tx+0x20>
}
   119c8:	4620      	mov	r0, r4
   119ca:	b004      	add	sp, #16
   119cc:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_hci_version(rsp.hci_ver);
   119ce:	f89d 0008 	ldrb.w	r0, [sp, #8]
   119d2:	f7ff f97d 	bl	10cd0 <ble_hs_hci_set_hci_version>
    return 0;
   119d6:	e7f7      	b.n	119c8 <ble_hs_startup_read_local_ver_tx+0x1a>

000119d8 <ble_hs_startup_set_evmask_tx>:
{
   119d8:	b510      	push	{r4, lr}
   119da:	b086      	sub	sp, #24
    version = ble_hs_hci_get_hci_version();
   119dc:	f7ff f97e 	bl	10cdc <ble_hs_hci_get_hci_version>
   119e0:	4604      	mov	r4, r0
    cmd.event_mask = htole64(0x2000800002008090);
   119e2:	a906      	add	r1, sp, #24
   119e4:	a310      	add	r3, pc, #64	; (adr r3, 11a28 <ble_hs_startup_set_evmask_tx+0x50>)
   119e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   119ea:	e961 2302 	strd	r2, r3, [r1, #-8]!
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   119ee:	2300      	movs	r3, #0
   119f0:	9300      	str	r3, [sp, #0]
   119f2:	2208      	movs	r2, #8
   119f4:	f640 4001 	movw	r0, #3073	; 0xc01
   119f8:	f7ff f8aa 	bl	10b50 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   119fc:	4603      	mov	r3, r0
   119fe:	b908      	cbnz	r0, 11a04 <ble_hs_startup_set_evmask_tx+0x2c>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   11a00:	2c06      	cmp	r4, #6
   11a02:	d802      	bhi.n	11a0a <ble_hs_startup_set_evmask_tx+0x32>
}
   11a04:	4618      	mov	r0, r3
   11a06:	b006      	add	sp, #24
   11a08:	bd10      	pop	{r4, pc}
        cmd2.event_mask2 = htole64(0x0000000000800000);
   11a0a:	a906      	add	r1, sp, #24
   11a0c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   11a10:	2300      	movs	r3, #0
   11a12:	e961 2304 	strd	r2, r3, [r1, #-16]!
        rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_CTLR_BASEBAND,
   11a16:	2300      	movs	r3, #0
   11a18:	9300      	str	r3, [sp, #0]
   11a1a:	2208      	movs	r2, #8
   11a1c:	f640 4063 	movw	r0, #3171	; 0xc63
   11a20:	f7ff f896 	bl	10b50 <ble_hs_hci_cmd_tx>
   11a24:	4603      	mov	r3, r0
   11a26:	e7ed      	b.n	11a04 <ble_hs_startup_set_evmask_tx+0x2c>
   11a28:	02008090 	.word	0x02008090
   11a2c:	20008000 	.word	0x20008000

00011a30 <ble_hs_startup_le_set_evmask_tx>:
{
   11a30:	b500      	push	{lr}
   11a32:	b085      	sub	sp, #20
    version = ble_hs_hci_get_hci_version();
   11a34:	f7ff f952 	bl	10cdc <ble_hs_hci_get_hci_version>
    if (version >= BLE_HCI_VER_BCS_4_1) {
   11a38:	2806      	cmp	r0, #6
   11a3a:	d818      	bhi.n	11a6e <ble_hs_startup_le_set_evmask_tx+0x3e>
    mask = 0x000000000000001f;
   11a3c:	221f      	movs	r2, #31
   11a3e:	2300      	movs	r3, #0
    if (version >= BLE_HCI_VER_BCS_4_2) {
   11a40:	2807      	cmp	r0, #7
   11a42:	d901      	bls.n	11a48 <ble_hs_startup_le_set_evmask_tx+0x18>
        mask |= 0x0000000000000640;
   11a44:	f442 62c8 	orr.w	r2, r2, #1600	; 0x640
    if (version >= BLE_HCI_VER_BCS_5_0) {
   11a48:	2808      	cmp	r0, #8
   11a4a:	d903      	bls.n	11a54 <ble_hs_startup_le_set_evmask_tx+0x24>
        mask |= 0x00000000000ff800;
   11a4c:	4809      	ldr	r0, [pc, #36]	; (11a74 <ble_hs_startup_le_set_evmask_tx+0x44>)
   11a4e:	2100      	movs	r1, #0
   11a50:	4302      	orrs	r2, r0
   11a52:	430b      	orrs	r3, r1
    cmd.event_mask = htole64(mask);
   11a54:	a904      	add	r1, sp, #16
   11a56:	e961 2302 	strd	r2, r3, [r1, #-8]!
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   11a5a:	2300      	movs	r3, #0
   11a5c:	9300      	str	r3, [sp, #0]
   11a5e:	2208      	movs	r2, #8
   11a60:	f242 0001 	movw	r0, #8193	; 0x2001
   11a64:	f7ff f874 	bl	10b50 <ble_hs_hci_cmd_tx>
}
   11a68:	b005      	add	sp, #20
   11a6a:	f85d fb04 	ldr.w	pc, [sp], #4
        mask |= 0x0000000000000020;
   11a6e:	223f      	movs	r2, #63	; 0x3f
   11a70:	2300      	movs	r3, #0
   11a72:	e7e5      	b.n	11a40 <ble_hs_startup_le_set_evmask_tx+0x10>
   11a74:	000ff800 	.word	0x000ff800

00011a78 <ble_hs_startup_read_buf_sz>:
{
   11a78:	b500      	push	{lr}
   11a7a:	b083      	sub	sp, #12
    uint16_t le_pktlen = 0;
   11a7c:	2300      	movs	r3, #0
   11a7e:	f8ad 3006 	strh.w	r3, [sp, #6]
    uint16_t max_pkts = 0;
   11a82:	f8ad 3004 	strh.w	r3, [sp, #4]
    uint16_t pktlen = 0;
   11a86:	f8ad 3002 	strh.w	r3, [sp, #2]
    uint8_t le_max_pkts = 0;
   11a8a:	a902      	add	r1, sp, #8
   11a8c:	f801 3d07 	strb.w	r3, [r1, #-7]!
    rc = ble_hs_startup_le_read_buf_sz_tx(&le_pktlen, &le_max_pkts);
   11a90:	f10d 0006 	add.w	r0, sp, #6
   11a94:	f7ff ff5b 	bl	1194e <ble_hs_startup_le_read_buf_sz_tx>
    if (rc != 0) {
   11a98:	4603      	mov	r3, r0
   11a9a:	b978      	cbnz	r0, 11abc <ble_hs_startup_read_buf_sz+0x44>
    if (le_pktlen != 0) {
   11a9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11aa0:	b183      	cbz	r3, 11ac4 <ble_hs_startup_read_buf_sz+0x4c>
        pktlen = le_pktlen;
   11aa2:	f8ad 3002 	strh.w	r3, [sp, #2]
        max_pkts = le_max_pkts;
   11aa6:	f89d 3001 	ldrb.w	r3, [sp, #1]
   11aaa:	f8ad 3004 	strh.w	r3, [sp, #4]
    rc = ble_hs_hci_set_buf_sz(pktlen, max_pkts);
   11aae:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   11ab2:	f8bd 0002 	ldrh.w	r0, [sp, #2]
   11ab6:	f7ff f829 	bl	10b0c <ble_hs_hci_set_buf_sz>
   11aba:	4603      	mov	r3, r0
}
   11abc:	4618      	mov	r0, r3
   11abe:	b003      	add	sp, #12
   11ac0:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = ble_hs_startup_read_buf_sz_tx(&pktlen, &max_pkts);
   11ac4:	a901      	add	r1, sp, #4
   11ac6:	f10d 0002 	add.w	r0, sp, #2
   11aca:	f7ff ff58 	bl	1197e <ble_hs_startup_read_buf_sz_tx>
        if (rc != 0) {
   11ace:	4603      	mov	r3, r0
   11ad0:	2800      	cmp	r0, #0
   11ad2:	d0ec      	beq.n	11aae <ble_hs_startup_read_buf_sz+0x36>
   11ad4:	e7f2      	b.n	11abc <ble_hs_startup_read_buf_sz+0x44>

00011ad6 <ble_hs_startup_le_read_sup_f_tx>:
{
   11ad6:	b510      	push	{r4, lr}
   11ad8:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   11ada:	2308      	movs	r3, #8
   11adc:	9300      	str	r3, [sp, #0]
   11ade:	446b      	add	r3, sp
   11ae0:	2200      	movs	r2, #0
   11ae2:	4611      	mov	r1, r2
   11ae4:	f242 0003 	movw	r0, #8195	; 0x2003
   11ae8:	f7ff f832 	bl	10b50 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   11aec:	4604      	mov	r4, r0
   11aee:	b110      	cbz	r0, 11af6 <ble_hs_startup_le_read_sup_f_tx+0x20>
}
   11af0:	4620      	mov	r0, r4
   11af2:	b004      	add	sp, #16
   11af4:	bd10      	pop	{r4, pc}
    ble_hs_hci_set_le_supported_feat(le64toh(rsp.features));
   11af6:	9802      	ldr	r0, [sp, #8]
   11af8:	f7ff f8e4 	bl	10cc4 <ble_hs_hci_set_le_supported_feat>
    return 0;
   11afc:	e7f8      	b.n	11af0 <ble_hs_startup_le_read_sup_f_tx+0x1a>

00011afe <ble_hs_startup_read_bd_addr>:
{
   11afe:	b510      	push	{r4, lr}
   11b00:	b084      	sub	sp, #16
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_INFO_PARAMS,
   11b02:	2306      	movs	r3, #6
   11b04:	9300      	str	r3, [sp, #0]
   11b06:	ab02      	add	r3, sp, #8
   11b08:	2200      	movs	r2, #0
   11b0a:	4611      	mov	r1, r2
   11b0c:	f241 0009 	movw	r0, #4105	; 0x1009
   11b10:	f7ff f81e 	bl	10b50 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   11b14:	4604      	mov	r4, r0
   11b16:	b110      	cbz	r0, 11b1e <ble_hs_startup_read_bd_addr+0x20>
}
   11b18:	4620      	mov	r0, r4
   11b1a:	b004      	add	sp, #16
   11b1c:	bd10      	pop	{r4, pc}
    ble_hs_id_set_pub(rsp.addr);
   11b1e:	a802      	add	r0, sp, #8
   11b20:	f7ff fc08 	bl	11334 <ble_hs_id_set_pub>
    return 0;
   11b24:	e7f8      	b.n	11b18 <ble_hs_startup_read_bd_addr+0x1a>

00011b26 <ble_hs_startup_go>:

int
ble_hs_startup_go(void)
{
   11b26:	b510      	push	{r4, lr}
    int rc;

    rc = ble_hs_startup_reset_tx();
   11b28:	f7ff ff04 	bl	11934 <ble_hs_startup_reset_tx>
    if (rc != 0) {
   11b2c:	4604      	mov	r4, r0
   11b2e:	b108      	cbz	r0, 11b34 <ble_hs_startup_go+0xe>

    /* If flow control is enabled, configure the controller to use it. */
    ble_hs_flow_startup();

    return 0;
}
   11b30:	4620      	mov	r0, r4
   11b32:	bd10      	pop	{r4, pc}
    rc = ble_hs_startup_read_local_ver_tx();
   11b34:	f7ff ff3b 	bl	119ae <ble_hs_startup_read_local_ver_tx>
    if (rc != 0) {
   11b38:	4604      	mov	r4, r0
   11b3a:	2800      	cmp	r0, #0
   11b3c:	d1f8      	bne.n	11b30 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_set_evmask_tx();
   11b3e:	f7ff ff4b 	bl	119d8 <ble_hs_startup_set_evmask_tx>
    if (rc != 0) {
   11b42:	4604      	mov	r4, r0
   11b44:	2800      	cmp	r0, #0
   11b46:	d1f3      	bne.n	11b30 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_set_evmask_tx();
   11b48:	f7ff ff72 	bl	11a30 <ble_hs_startup_le_set_evmask_tx>
    if (rc != 0) {
   11b4c:	4604      	mov	r4, r0
   11b4e:	2800      	cmp	r0, #0
   11b50:	d1ee      	bne.n	11b30 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_buf_sz();
   11b52:	f7ff ff91 	bl	11a78 <ble_hs_startup_read_buf_sz>
    if (rc != 0) {
   11b56:	4604      	mov	r4, r0
   11b58:	2800      	cmp	r0, #0
   11b5a:	d1e9      	bne.n	11b30 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_le_read_sup_f_tx();
   11b5c:	f7ff ffbb 	bl	11ad6 <ble_hs_startup_le_read_sup_f_tx>
    if (rc != 0) {
   11b60:	4604      	mov	r4, r0
   11b62:	2800      	cmp	r0, #0
   11b64:	d1e4      	bne.n	11b30 <ble_hs_startup_go+0xa>
    rc = ble_hs_startup_read_bd_addr();
   11b66:	f7ff ffca 	bl	11afe <ble_hs_startup_read_bd_addr>
    if (rc != 0) {
   11b6a:	4604      	mov	r4, r0
   11b6c:	2800      	cmp	r0, #0
   11b6e:	d1df      	bne.n	11b30 <ble_hs_startup_go+0xa>
    ble_hs_pvcy_set_our_irk(NULL);
   11b70:	f7ff fe9e 	bl	118b0 <ble_hs_pvcy_set_our_irk>
    ble_hs_flow_startup();
   11b74:	f7fe fede 	bl	10934 <ble_hs_flow_startup>
    return 0;
   11b78:	e7da      	b.n	11b30 <ble_hs_startup_go+0xa>
	...

00011b7c <ble_hs_stop_done>:
/**
 * Called when a stop procedure has completed.
 */
static void
ble_hs_stop_done(int status)
{
   11b7c:	b538      	push	{r3, r4, r5, lr}
   11b7e:	4605      	mov	r5, r0
    os_callout_stop(&co->co);
   11b80:	480c      	ldr	r0, [pc, #48]	; (11bb4 <ble_hs_stop_done+0x38>)
   11b82:	f7f8 f869 	bl	9c58 <os_callout_stop>
    struct ble_hs_stop_listener_slist slist;
    struct ble_hs_stop_listener *listener;

    ble_npl_callout_stop(&ble_hs_stop_terminate_tmo);

    ble_hs_lock();
   11b86:	f7fd ff8d 	bl	faa4 <ble_hs_lock>

    ble_gap_event_listener_unregister(&ble_hs_stop_gap_listener);
   11b8a:	480b      	ldr	r0, [pc, #44]	; (11bb8 <ble_hs_stop_done+0x3c>)
   11b8c:	f7fc f806 	bl	db9c <ble_gap_event_listener_unregister>

    slist = ble_hs_stop_listeners;
   11b90:	4a0a      	ldr	r2, [pc, #40]	; (11bbc <ble_hs_stop_done+0x40>)
   11b92:	6814      	ldr	r4, [r2, #0]
    SLIST_INIT(&ble_hs_stop_listeners);
   11b94:	2300      	movs	r3, #0
   11b96:	6013      	str	r3, [r2, #0]

    ble_hs_enabled_state = BLE_HS_ENABLED_STATE_OFF;
   11b98:	4a09      	ldr	r2, [pc, #36]	; (11bc0 <ble_hs_stop_done+0x44>)
   11b9a:	7013      	strb	r3, [r2, #0]

    ble_hs_unlock();
   11b9c:	f7fd ff86 	bl	faac <ble_hs_unlock>

    SLIST_FOREACH(listener, &slist, link) {
   11ba0:	e004      	b.n	11bac <ble_hs_stop_done+0x30>
        listener->fn(status, listener->arg);
   11ba2:	6823      	ldr	r3, [r4, #0]
   11ba4:	6861      	ldr	r1, [r4, #4]
   11ba6:	4628      	mov	r0, r5
   11ba8:	4798      	blx	r3
    SLIST_FOREACH(listener, &slist, link) {
   11baa:	68a4      	ldr	r4, [r4, #8]
   11bac:	2c00      	cmp	r4, #0
   11bae:	d1f8      	bne.n	11ba2 <ble_hs_stop_done+0x26>
    }
}
   11bb0:	bd38      	pop	{r3, r4, r5, pc}
   11bb2:	bf00      	nop
   11bb4:	200075b4 	.word	0x200075b4
   11bb8:	200075a4 	.word	0x200075a4
   11bbc:	200075b0 	.word	0x200075b0
   11bc0:	20007228 	.word	0x20007228

00011bc4 <ble_hs_stop_terminate_timeout_cb>:
 * This is called when host graceful disconnect timeout fires. That means some devices
 * are out of range and disconnection completed did no happen yet.
 */
static void
ble_hs_stop_terminate_timeout_cb(struct ble_npl_event *ev)
{
   11bc4:	b508      	push	{r3, lr}
    BLE_HS_LOG(ERROR, "ble_hs_stop_terminate_timeout_cb,"
                      "%d connection(s) still up \n", ble_hs_stop_conn_cnt);

    /* TODO: Shall we send error here? */
    ble_hs_stop_done(0);
   11bc6:	2000      	movs	r0, #0
   11bc8:	f7ff ffd8 	bl	11b7c <ble_hs_stop_done>
}
   11bcc:	bd08      	pop	{r3, pc}
	...

00011bd0 <ble_hs_stop_init>:
    return 0;
}

void
ble_hs_stop_init(void)
{
   11bd0:	b508      	push	{r3, lr}
    return (struct ble_npl_eventq *) os_eventq_dflt_get();
   11bd2:	f7f8 fa83 	bl	a0dc <os_eventq_dflt_get>
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   11bd6:	2300      	movs	r3, #0
   11bd8:	4a02      	ldr	r2, [pc, #8]	; (11be4 <ble_hs_stop_init+0x14>)
   11bda:	4601      	mov	r1, r0
   11bdc:	4802      	ldr	r0, [pc, #8]	; (11be8 <ble_hs_stop_init+0x18>)
   11bde:	f7f8 f82d 	bl	9c3c <os_callout_init>
                         ble_hs_stop_terminate_timeout_cb, NULL);
#else
    ble_npl_callout_init(&ble_hs_stop_terminate_tmo, nimble_port_get_dflt_eventq(),
                         ble_hs_stop_terminate_timeout_cb, NULL);
#endif
}
   11be2:	bd08      	pop	{r3, pc}
   11be4:	00011bc5 	.word	0x00011bc5
   11be8:	200075b4 	.word	0x200075b4

00011bec <ble_l2cap_get_mtu>:
    return rc;
}

static uint16_t
ble_l2cap_get_mtu(struct ble_l2cap_chan *chan)
{
   11bec:	b508      	push	{r3, lr}
    if (chan->scid == BLE_L2CAP_CID_ATT) {
   11bee:	8903      	ldrh	r3, [r0, #8]
   11bf0:	2b04      	cmp	r3, #4
   11bf2:	d001      	beq.n	11bf8 <ble_l2cap_get_mtu+0xc>
         * done
         */
        return ble_att_chan_mtu(chan);
    }

    return chan->my_mtu;
   11bf4:	8940      	ldrh	r0, [r0, #10]
}
   11bf6:	bd08      	pop	{r3, pc}
        return ble_att_chan_mtu(chan);
   11bf8:	f002 fd4a 	bl	14690 <ble_att_chan_mtu>
   11bfc:	e7fb      	b.n	11bf6 <ble_l2cap_get_mtu+0xa>

00011bfe <ble_l2cap_append_rx>:
{
   11bfe:	b508      	push	{r3, lr}
    m = os_mbuf_pack_chains(chan->rx_buf, frag);
   11c00:	6900      	ldr	r0, [r0, #16]
   11c02:	f7f8 fe63 	bl	a8cc <os_mbuf_pack_chains>
    assert(m);
   11c06:	b100      	cbz	r0, 11c0a <ble_l2cap_append_rx+0xc>
}
   11c08:	bd08      	pop	{r3, pc}
    assert(m);
   11c0a:	f7f6 fad9 	bl	81c0 <hal_debugger_connected>
   11c0e:	b100      	cbz	r0, 11c12 <ble_l2cap_append_rx+0x14>
   11c10:	be01      	bkpt	0x0001
   11c12:	2300      	movs	r3, #0
   11c14:	461a      	mov	r2, r3
   11c16:	4619      	mov	r1, r3
   11c18:	4618      	mov	r0, r3
   11c1a:	f7f7 fe67 	bl	98ec <__assert_func>
	...

00011c20 <ble_l2cap_chan_alloc>:
{
   11c20:	b510      	push	{r4, lr}
   11c22:	4604      	mov	r4, r0
    chan = os_memblock_get(&ble_l2cap_chan_pool);
   11c24:	4807      	ldr	r0, [pc, #28]	; (11c44 <ble_l2cap_chan_alloc+0x24>)
   11c26:	f7f8 ff2a 	bl	aa7e <os_memblock_get>
    if (chan == NULL) {
   11c2a:	4603      	mov	r3, r0
   11c2c:	b140      	cbz	r0, 11c40 <ble_l2cap_chan_alloc+0x20>
    memset(chan, 0, sizeof *chan);
   11c2e:	2200      	movs	r2, #0
   11c30:	6002      	str	r2, [r0, #0]
   11c32:	6042      	str	r2, [r0, #4]
   11c34:	6082      	str	r2, [r0, #8]
   11c36:	60c2      	str	r2, [r0, #12]
   11c38:	6102      	str	r2, [r0, #16]
   11c3a:	6142      	str	r2, [r0, #20]
   11c3c:	6182      	str	r2, [r0, #24]
    chan->conn_handle = conn_handle;
   11c3e:	8084      	strh	r4, [r0, #4]
}
   11c40:	4618      	mov	r0, r3
   11c42:	bd10      	pop	{r4, pc}
   11c44:	20007628 	.word	0x20007628

00011c48 <ble_l2cap_chan_free>:
    if (chan == NULL) {
   11c48:	b149      	cbz	r1, 11c5e <ble_l2cap_chan_free+0x16>
{
   11c4a:	b510      	push	{r4, lr}
   11c4c:	460c      	mov	r4, r1
    os_mbuf_free_chain(chan->rx_buf);
   11c4e:	6908      	ldr	r0, [r1, #16]
   11c50:	f7f8 fac6 	bl	a1e0 <os_mbuf_free_chain>
    rc = os_memblock_put(&ble_l2cap_chan_pool, chan);
   11c54:	4621      	mov	r1, r4
   11c56:	4802      	ldr	r0, [pc, #8]	; (11c60 <ble_l2cap_chan_free+0x18>)
   11c58:	f7f8 ff39 	bl	aace <os_memblock_put>
}
   11c5c:	bd10      	pop	{r4, pc}
   11c5e:	4770      	bx	lr
   11c60:	20007628 	.word	0x20007628

00011c64 <ble_l2cap_is_mtu_req_sent>:
    return (chan->flags & BLE_L2CAP_CHAN_F_TXED_MTU);
   11c64:	7b80      	ldrb	r0, [r0, #14]
}
   11c66:	f000 0001 	and.w	r0, r0, #1
   11c6a:	4770      	bx	lr

00011c6c <ble_l2cap_parse_hdr>:
{
   11c6c:	b538      	push	{r3, r4, r5, lr}
   11c6e:	4614      	mov	r4, r2
    rc = os_mbuf_copydata(om, off, sizeof *l2cap_hdr, l2cap_hdr);
   11c70:	4613      	mov	r3, r2
   11c72:	2204      	movs	r2, #4
   11c74:	f7f8 fbb6 	bl	a3e4 <os_mbuf_copydata>
    if (rc != 0) {
   11c78:	b960      	cbnz	r0, 11c94 <ble_l2cap_parse_hdr+0x28>
   11c7a:	4605      	mov	r5, r0
    l2cap_hdr->len = get_le16(&l2cap_hdr->len);
   11c7c:	4620      	mov	r0, r4
   11c7e:	f009 ffd0 	bl	1bc22 <get_le16>
   11c82:	4623      	mov	r3, r4
   11c84:	f823 0b02 	strh.w	r0, [r3], #2
    l2cap_hdr->cid = get_le16(&l2cap_hdr->cid);
   11c88:	4618      	mov	r0, r3
   11c8a:	f009 ffca 	bl	1bc22 <get_le16>
   11c8e:	8060      	strh	r0, [r4, #2]
}
   11c90:	4628      	mov	r0, r5
   11c92:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_EMSGSIZE;
   11c94:	2504      	movs	r5, #4
   11c96:	e7fb      	b.n	11c90 <ble_l2cap_parse_hdr+0x24>

00011c98 <ble_l2cap_prepend_hdr>:
{
   11c98:	b530      	push	{r4, r5, lr}
   11c9a:	b083      	sub	sp, #12
   11c9c:	4604      	mov	r4, r0
   11c9e:	460d      	mov	r5, r1
    put_le16(&hdr.len, len);
   11ca0:	4611      	mov	r1, r2
   11ca2:	a801      	add	r0, sp, #4
   11ca4:	f009 ff9c 	bl	1bbe0 <put_le16>
    put_le16(&hdr.cid, cid);
   11ca8:	4629      	mov	r1, r5
   11caa:	f10d 0006 	add.w	r0, sp, #6
   11cae:	f009 ff97 	bl	1bbe0 <put_le16>
    om = os_mbuf_prepend_pullup(om, sizeof hdr);
   11cb2:	2104      	movs	r1, #4
   11cb4:	4620      	mov	r0, r4
   11cb6:	f7f8 fdd1 	bl	a85c <os_mbuf_prepend_pullup>
    if (om == NULL) {
   11cba:	4603      	mov	r3, r0
   11cbc:	b110      	cbz	r0, 11cc4 <ble_l2cap_prepend_hdr+0x2c>
    memcpy(om->om_data, &hdr, sizeof hdr);
   11cbe:	6802      	ldr	r2, [r0, #0]
   11cc0:	9901      	ldr	r1, [sp, #4]
   11cc2:	6011      	str	r1, [r2, #0]
}
   11cc4:	4618      	mov	r0, r3
   11cc6:	b003      	add	sp, #12
   11cc8:	bd30      	pop	{r4, r5, pc}

00011cca <ble_l2cap_get_conn_handle>:
    if (!chan) {
   11cca:	b108      	cbz	r0, 11cd0 <ble_l2cap_get_conn_handle+0x6>
    return chan->conn_handle;
   11ccc:	8880      	ldrh	r0, [r0, #4]
   11cce:	4770      	bx	lr
        return BLE_HS_CONN_HANDLE_NONE;
   11cd0:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   11cd4:	4770      	bx	lr

00011cd6 <ble_l2cap_remove_rx>:
{
   11cd6:	b538      	push	{r3, r4, r5, lr}
   11cd8:	460c      	mov	r4, r1
    conn->bhc_rx_chan = NULL;
   11cda:	2500      	movs	r5, #0
   11cdc:	6305      	str	r5, [r0, #48]	; 0x30
    os_mbuf_free_chain(chan->rx_buf);
   11cde:	6908      	ldr	r0, [r1, #16]
   11ce0:	f7f8 fa7e 	bl	a1e0 <os_mbuf_free_chain>
    chan->rx_buf = NULL;
   11ce4:	6125      	str	r5, [r4, #16]
    chan->rx_len = 0;
   11ce6:	82a5      	strh	r5, [r4, #20]
}
   11ce8:	bd38      	pop	{r3, r4, r5, pc}

00011cea <ble_l2cap_rx_payload>:
{
   11cea:	b570      	push	{r4, r5, r6, lr}
   11cec:	4605      	mov	r5, r0
   11cee:	460c      	mov	r4, r1
   11cf0:	461e      	mov	r6, r3
    if (chan->rx_buf == NULL) {
   11cf2:	690b      	ldr	r3, [r1, #16]
   11cf4:	b16b      	cbz	r3, 11d12 <ble_l2cap_rx_payload+0x28>
        ble_l2cap_append_rx(chan, om);
   11cf6:	4611      	mov	r1, r2
   11cf8:	4620      	mov	r0, r4
   11cfa:	f7ff ff80 	bl	11bfe <ble_l2cap_append_rx>
    len_diff = OS_MBUF_PKTLEN(chan->rx_buf) - chan->rx_len;
   11cfe:	6923      	ldr	r3, [r4, #16]
   11d00:	8a18      	ldrh	r0, [r3, #16]
   11d02:	8aa3      	ldrh	r3, [r4, #20]
   11d04:	1ac0      	subs	r0, r0, r3
    if (len_diff > 0) {
   11d06:	2800      	cmp	r0, #0
   11d08:	dc05      	bgt.n	11d16 <ble_l2cap_rx_payload+0x2c>
    } else if (len_diff == 0) {
   11d0a:	b950      	cbnz	r0, 11d22 <ble_l2cap_rx_payload+0x38>
        *out_rx_cb = chan->rx_fn;
   11d0c:	69a3      	ldr	r3, [r4, #24]
   11d0e:	6033      	str	r3, [r6, #0]
}
   11d10:	bd70      	pop	{r4, r5, r6, pc}
        chan->rx_buf = om;
   11d12:	610a      	str	r2, [r1, #16]
   11d14:	e7f3      	b.n	11cfe <ble_l2cap_rx_payload+0x14>
        ble_l2cap_remove_rx(conn, chan);
   11d16:	4621      	mov	r1, r4
   11d18:	4628      	mov	r0, r5
   11d1a:	f7ff ffdc 	bl	11cd6 <ble_l2cap_remove_rx>
        rc = BLE_HS_EBADDATA;
   11d1e:	200a      	movs	r0, #10
   11d20:	e7f6      	b.n	11d10 <ble_l2cap_rx_payload+0x26>
    return os_time_get();
   11d22:	f7f9 fb57 	bl	b3d4 <os_time_get>
            ble_npl_time_get() + MYNEWT_VAL(BLE_L2CAP_RX_FRAG_TIMEOUT);
   11d26:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   11d2a:	3030      	adds	r0, #48	; 0x30
        conn->bhc_rx_timeout =
   11d2c:	6368      	str	r0, [r5, #52]	; 0x34
        ble_hs_timer_resched();
   11d2e:	f7fd ff95 	bl	fc5c <ble_hs_timer_resched>
        rc = BLE_HS_EAGAIN;
   11d32:	2001      	movs	r0, #1
    return rc;
   11d34:	e7ec      	b.n	11d10 <ble_l2cap_rx_payload+0x26>

00011d36 <ble_l2cap_rx>:
ble_l2cap_rx(struct ble_hs_conn *conn,
             struct hci_data_hdr *hci_hdr,
             struct os_mbuf *om,
             ble_l2cap_rx_fn **out_rx_cb,
             int *out_reject_cid)
{
   11d36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d3a:	b082      	sub	sp, #8
   11d3c:	4607      	mov	r7, r0
   11d3e:	4614      	mov	r4, r2
   11d40:	4698      	mov	r8, r3
   11d42:	9d08      	ldr	r5, [sp, #32]
    struct ble_l2cap_chan *chan;
    struct ble_l2cap_hdr l2cap_hdr;
    uint8_t pb;
    int rc;

    *out_reject_cid = -1;
   11d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11d48:	602b      	str	r3, [r5, #0]

    pb = BLE_HCI_DATA_PB(hci_hdr->hdh_handle_pb_bc);
   11d4a:	880b      	ldrh	r3, [r1, #0]
   11d4c:	f3c3 3301 	ubfx	r3, r3, #12, #2
    switch (pb) {
   11d50:	2b01      	cmp	r3, #1
   11d52:	d02e      	beq.n	11db2 <ble_l2cap_rx+0x7c>
   11d54:	2b02      	cmp	r3, #2
   11d56:	d13a      	bne.n	11dce <ble_l2cap_rx+0x98>
    case BLE_HCI_PB_FIRST_FLUSH:
        /* First fragment. */
        rc = ble_l2cap_parse_hdr(om, 0, &l2cap_hdr);
   11d58:	aa01      	add	r2, sp, #4
   11d5a:	2100      	movs	r1, #0
   11d5c:	4620      	mov	r0, r4
   11d5e:	f7ff ff85 	bl	11c6c <ble_l2cap_parse_hdr>
        if (rc != 0) {
   11d62:	4606      	mov	r6, r0
   11d64:	bba0      	cbnz	r0, 11dd0 <ble_l2cap_rx+0x9a>
            goto err;
        }

        /* Strip L2CAP header from the front of the mbuf. */
        os_mbuf_adj(om, BLE_L2CAP_HDR_SZ);
   11d66:	2104      	movs	r1, #4
   11d68:	4620      	mov	r0, r4
   11d6a:	f7f8 fb68 	bl	a43e <os_mbuf_adj>

        chan = ble_hs_conn_chan_find_by_scid(conn, l2cap_hdr.cid);
   11d6e:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   11d72:	4638      	mov	r0, r7
   11d74:	f7fe fbf6 	bl	10564 <ble_hs_conn_chan_find_by_scid>
        if (chan == NULL) {
   11d78:	4606      	mov	r6, r0
   11d7a:	b188      	cbz	r0, 11da0 <ble_l2cap_rx+0x6a>
                *out_reject_cid = l2cap_hdr.cid;
            }
            goto err;
        }

        if (chan->rx_buf != NULL) {
   11d7c:	6903      	ldr	r3, [r0, #16]
   11d7e:	b11b      	cbz	r3, 11d88 <ble_l2cap_rx+0x52>
            /* Previous data packet never completed.  Discard old packet. */
            ble_l2cap_remove_rx(conn, chan);
   11d80:	4601      	mov	r1, r0
   11d82:	4638      	mov	r0, r7
   11d84:	f7ff ffa7 	bl	11cd6 <ble_l2cap_remove_rx>
        }

        if (l2cap_hdr.len > ble_l2cap_get_mtu(chan)) {
   11d88:	f8bd 5004 	ldrh.w	r5, [sp, #4]
   11d8c:	4630      	mov	r0, r6
   11d8e:	f7ff ff2d 	bl	11bec <ble_l2cap_get_mtu>
   11d92:	4285      	cmp	r5, r0
   11d94:	d825      	bhi.n	11de2 <ble_l2cap_rx+0xac>
            rc = BLE_HS_EBADDATA;
            goto err;
        }

        /* Remember channel and length of L2CAP data for reassembly. */
        conn->bhc_rx_chan = chan;
   11d96:	633e      	str	r6, [r7, #48]	; 0x30
        chan->rx_len = l2cap_hdr.len;
   11d98:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   11d9c:	82b3      	strh	r3, [r6, #20]
        break;
   11d9e:	e00c      	b.n	11dba <ble_l2cap_rx+0x84>
            if (l2cap_hdr.cid != BLE_L2CAP_CID_BLACK_HOLE) {
   11da0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   11da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
   11da8:	4293      	cmp	r3, r2
   11daa:	d018      	beq.n	11dde <ble_l2cap_rx+0xa8>
                *out_reject_cid = l2cap_hdr.cid;
   11dac:	602b      	str	r3, [r5, #0]
            rc = BLE_HS_ENOENT;
   11dae:	2605      	movs	r6, #5
   11db0:	e00e      	b.n	11dd0 <ble_l2cap_rx+0x9a>

    case BLE_HCI_PB_MIDDLE:
        chan = conn->bhc_rx_chan;
   11db2:	6b06      	ldr	r6, [r0, #48]	; 0x30
        if (chan == NULL || chan->rx_buf == NULL) {
   11db4:	b1be      	cbz	r6, 11de6 <ble_l2cap_rx+0xb0>
   11db6:	6933      	ldr	r3, [r6, #16]
   11db8:	b1bb      	cbz	r3, 11dea <ble_l2cap_rx+0xb4>
    default:
        rc = BLE_HS_EBADDATA;
        goto err;
    }

    rc = ble_l2cap_rx_payload(conn, chan, om, out_rx_cb);
   11dba:	4643      	mov	r3, r8
   11dbc:	4622      	mov	r2, r4
   11dbe:	4631      	mov	r1, r6
   11dc0:	4638      	mov	r0, r7
   11dc2:	f7ff ff92 	bl	11cea <ble_l2cap_rx_payload>
    om = NULL;
    if (rc != 0) {
   11dc6:	4606      	mov	r6, r0
   11dc8:	b128      	cbz	r0, 11dd6 <ble_l2cap_rx+0xa0>
    om = NULL;
   11dca:	2400      	movs	r4, #0
        goto err;
    }

    return 0;

err:
   11dcc:	e000      	b.n	11dd0 <ble_l2cap_rx+0x9a>
        rc = BLE_HS_EBADDATA;
   11dce:	260a      	movs	r6, #10
    os_mbuf_free_chain(om);
   11dd0:	4620      	mov	r0, r4
   11dd2:	f7f8 fa05 	bl	a1e0 <os_mbuf_free_chain>
    return rc;
}
   11dd6:	4630      	mov	r0, r6
   11dd8:	b002      	add	sp, #8
   11dda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOENT;
   11dde:	2605      	movs	r6, #5
   11de0:	e7f6      	b.n	11dd0 <ble_l2cap_rx+0x9a>
            rc = BLE_HS_EBADDATA;
   11de2:	260a      	movs	r6, #10
   11de4:	e7f4      	b.n	11dd0 <ble_l2cap_rx+0x9a>
            rc = BLE_HS_EBADDATA;
   11de6:	260a      	movs	r6, #10
   11de8:	e7f2      	b.n	11dd0 <ble_l2cap_rx+0x9a>
   11dea:	260a      	movs	r6, #10
   11dec:	e7f0      	b.n	11dd0 <ble_l2cap_rx+0x9a>

00011dee <ble_l2cap_tx>:
 * @return                      0 on success; nonzero on error.
 */
int
ble_l2cap_tx(struct ble_hs_conn *conn, struct ble_l2cap_chan *chan,
             struct os_mbuf *txom)
{
   11dee:	b510      	push	{r4, lr}
   11df0:	b082      	sub	sp, #8
   11df2:	4604      	mov	r4, r0
   11df4:	9201      	str	r2, [sp, #4]
    int rc;

    txom = ble_l2cap_prepend_hdr(txom, chan->dcid, OS_MBUF_PKTLEN(txom));
   11df6:	4610      	mov	r0, r2
   11df8:	8a12      	ldrh	r2, [r2, #16]
   11dfa:	88c9      	ldrh	r1, [r1, #6]
   11dfc:	f7ff ff4c 	bl	11c98 <ble_l2cap_prepend_hdr>
   11e00:	9001      	str	r0, [sp, #4]
    if (txom == NULL) {
   11e02:	b188      	cbz	r0, 11e28 <ble_l2cap_tx+0x3a>
        return BLE_HS_ENOMEM;
    }

    rc = ble_hs_hci_acl_tx(conn, &txom);
   11e04:	a901      	add	r1, sp, #4
   11e06:	4620      	mov	r0, r4
   11e08:	f7fe ff54 	bl	10cb4 <ble_hs_hci_acl_tx>
    switch (rc) {
   11e0c:	2801      	cmp	r0, #1
   11e0e:	d001      	beq.n	11e14 <ble_l2cap_tx+0x26>

    default:
        /* Error. */
        return rc;
    }
}
   11e10:	b002      	add	sp, #8
   11e12:	bd10      	pop	{r4, pc}
        STAILQ_INSERT_TAIL(&conn->bhc_tx_q, OS_MBUF_PKTHDR(txom), omp_next);
   11e14:	9b01      	ldr	r3, [sp, #4]
   11e16:	2000      	movs	r0, #0
   11e18:	6158      	str	r0, [r3, #20]
   11e1a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   11e1c:	3310      	adds	r3, #16
   11e1e:	6013      	str	r3, [r2, #0]
   11e20:	9b01      	ldr	r3, [sp, #4]
   11e22:	3314      	adds	r3, #20
   11e24:	6423      	str	r3, [r4, #64]	; 0x40
        return 0;
   11e26:	e7f3      	b.n	11e10 <ble_l2cap_tx+0x22>
        return BLE_HS_ENOMEM;
   11e28:	2006      	movs	r0, #6
   11e2a:	e7f1      	b.n	11e10 <ble_l2cap_tx+0x22>

00011e2c <ble_l2cap_init>:

int
ble_l2cap_init(void)
{
   11e2c:	b500      	push	{lr}
   11e2e:	b083      	sub	sp, #12
    int rc;

    rc = os_mempool_init(&ble_l2cap_chan_pool,
   11e30:	4b0a      	ldr	r3, [pc, #40]	; (11e5c <ble_l2cap_init+0x30>)
   11e32:	9300      	str	r3, [sp, #0]
   11e34:	4b0a      	ldr	r3, [pc, #40]	; (11e60 <ble_l2cap_init+0x34>)
   11e36:	221c      	movs	r2, #28
   11e38:	2103      	movs	r1, #3
   11e3a:	480a      	ldr	r0, [pc, #40]	; (11e64 <ble_l2cap_init+0x38>)
   11e3c:	f7f8 fdda 	bl	a9f4 <os_mempool_init>
                         MYNEWT_VAL(BLE_L2CAP_MAX_CHANS) +
                         MYNEWT_VAL(BLE_L2CAP_COC_MAX_NUM),
                         sizeof (struct ble_l2cap_chan),
                         ble_l2cap_chan_mem, "ble_l2cap_chan_pool");
    if (rc != 0) {
   11e40:	b938      	cbnz	r0, 11e52 <ble_l2cap_init+0x26>
        return BLE_HS_EOS;
    }

    rc = ble_l2cap_sig_init();
   11e42:	f000 fa3b 	bl	122bc <ble_l2cap_sig_init>
    if (rc != 0) {
   11e46:	4603      	mov	r3, r0
   11e48:	b920      	cbnz	r0, 11e54 <ble_l2cap_init+0x28>
    rc = ble_l2cap_coc_init();
    if (rc != 0) {
        return rc;
    }

    rc = ble_sm_init();
   11e4a:	f001 ff31 	bl	13cb0 <ble_sm_init>
   11e4e:	4603      	mov	r3, r0
   11e50:	e000      	b.n	11e54 <ble_l2cap_init+0x28>
        return BLE_HS_EOS;
   11e52:	230b      	movs	r3, #11
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   11e54:	4618      	mov	r0, r3
   11e56:	b003      	add	sp, #12
   11e58:	f85d fb04 	ldr.w	pc, [sp], #4
   11e5c:	00028e88 	.word	0x00028e88
   11e60:	200075d4 	.word	0x200075d4
   11e64:	20007628 	.word	0x20007628

00011e68 <ble_l2cap_sig_next_id>:
 *****************************************************************************/

static uint8_t
ble_l2cap_sig_next_id(void)
{
    ble_l2cap_sig_cur_id++;
   11e68:	4a05      	ldr	r2, [pc, #20]	; (11e80 <ble_l2cap_sig_next_id+0x18>)
   11e6a:	7813      	ldrb	r3, [r2, #0]
   11e6c:	3301      	adds	r3, #1
   11e6e:	b2db      	uxtb	r3, r3
   11e70:	7013      	strb	r3, [r2, #0]
    if (ble_l2cap_sig_cur_id == 0) {
   11e72:	b913      	cbnz	r3, 11e7a <ble_l2cap_sig_next_id+0x12>
        /* An ID of 0 is illegal. */
        ble_l2cap_sig_cur_id = 1;
   11e74:	4613      	mov	r3, r2
   11e76:	2201      	movs	r2, #1
   11e78:	701a      	strb	r2, [r3, #0]
    }

    return ble_l2cap_sig_cur_id;
}
   11e7a:	4b01      	ldr	r3, [pc, #4]	; (11e80 <ble_l2cap_sig_next_id+0x18>)
   11e7c:	7818      	ldrb	r0, [r3, #0]
   11e7e:	4770      	bx	lr
   11e80:	20007644 	.word	0x20007644

00011e84 <ble_l2cap_sig_dispatch_get>:

static ble_l2cap_sig_rx_fn *
ble_l2cap_sig_dispatch_get(uint8_t op)
{
    if (op >= BLE_L2CAP_SIG_OP_MAX) {
   11e84:	281a      	cmp	r0, #26
   11e86:	d803      	bhi.n	11e90 <ble_l2cap_sig_dispatch_get+0xc>
        return NULL;
    }

    return ble_l2cap_sig_dispatch[op];
   11e88:	4b02      	ldr	r3, [pc, #8]	; (11e94 <ble_l2cap_sig_dispatch_get+0x10>)
   11e8a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   11e8e:	4770      	bx	lr
        return NULL;
   11e90:	2000      	movs	r0, #0
}
   11e92:	4770      	bx	lr
   11e94:	00028e9c 	.word	0x00028e9c

00011e98 <ble_l2cap_sig_proc_matches>:
 * @return                      1 if the proc matches; 0 otherwise.
 */
static int
ble_l2cap_sig_proc_matches(struct ble_l2cap_sig_proc *proc,
                           uint16_t conn_handle, uint8_t op, uint8_t id)
{
   11e98:	b410      	push	{r4}
    if (conn_handle != proc->conn_handle) {
   11e9a:	8904      	ldrh	r4, [r0, #8]
   11e9c:	428c      	cmp	r4, r1
   11e9e:	d003      	beq.n	11ea8 <ble_l2cap_sig_proc_matches+0x10>
        return 0;
   11ea0:	2000      	movs	r0, #0
    if (id != 0 && id != proc->id) {
        return 0;
    }

    return 1;
}
   11ea2:	f85d 4b04 	ldr.w	r4, [sp], #4
   11ea6:	4770      	bx	lr
    if (op != proc->op) {
   11ea8:	7a81      	ldrb	r1, [r0, #10]
   11eaa:	4291      	cmp	r1, r2
   11eac:	d001      	beq.n	11eb2 <ble_l2cap_sig_proc_matches+0x1a>
        return 0;
   11eae:	2000      	movs	r0, #0
   11eb0:	e7f7      	b.n	11ea2 <ble_l2cap_sig_proc_matches+0xa>
    if (id != 0 && id != proc->id) {
   11eb2:	b133      	cbz	r3, 11ec2 <ble_l2cap_sig_proc_matches+0x2a>
   11eb4:	7ac2      	ldrb	r2, [r0, #11]
   11eb6:	429a      	cmp	r2, r3
   11eb8:	d001      	beq.n	11ebe <ble_l2cap_sig_proc_matches+0x26>
        return 0;
   11eba:	2000      	movs	r0, #0
   11ebc:	e7f1      	b.n	11ea2 <ble_l2cap_sig_proc_matches+0xa>
    return 1;
   11ebe:	2001      	movs	r0, #1
   11ec0:	e7ef      	b.n	11ea2 <ble_l2cap_sig_proc_matches+0xa>
   11ec2:	2001      	movs	r0, #1
   11ec4:	e7ed      	b.n	11ea2 <ble_l2cap_sig_proc_matches+0xa>

00011ec6 <ble_l2cap_sig_rx_noop>:
ble_l2cap_sig_rx_noop(uint16_t conn_handle,
                      struct ble_l2cap_sig_hdr *hdr,
                      struct os_mbuf **om)
{
    return BLE_HS_ENOTSUP;
}
   11ec6:	2008      	movs	r0, #8
   11ec8:	4770      	bx	lr

00011eca <ble_l2cap_sig_update_call_cb>:
 * $update                                                                   *
 *****************************************************************************/

static void
ble_l2cap_sig_update_call_cb(struct ble_l2cap_sig_proc *proc, int status)
{
   11eca:	b508      	push	{r3, lr}

    if (status != 0) {
        STATS_INC(ble_l2cap_stats, update_fail);
    }

    if (proc->update.cb != NULL) {
   11ecc:	68c3      	ldr	r3, [r0, #12]
   11ece:	b113      	cbz	r3, 11ed6 <ble_l2cap_sig_update_call_cb+0xc>
        proc->update.cb(proc->conn_handle, status, proc->update.cb_arg);
   11ed0:	6902      	ldr	r2, [r0, #16]
   11ed2:	8900      	ldrh	r0, [r0, #8]
   11ed4:	4798      	blx	r3
    }
}
   11ed6:	bd08      	pop	{r3, pc}

00011ed8 <ble_l2cap_sig_proc_insert>:
{
   11ed8:	b510      	push	{r4, lr}
   11eda:	4604      	mov	r4, r0
    ble_hs_lock();
   11edc:	f7fd fde2 	bl	faa4 <ble_hs_lock>
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   11ee0:	4b05      	ldr	r3, [pc, #20]	; (11ef8 <ble_l2cap_sig_proc_insert+0x20>)
   11ee2:	681b      	ldr	r3, [r3, #0]
   11ee4:	6023      	str	r3, [r4, #0]
   11ee6:	b123      	cbz	r3, 11ef2 <ble_l2cap_sig_proc_insert+0x1a>
   11ee8:	4b03      	ldr	r3, [pc, #12]	; (11ef8 <ble_l2cap_sig_proc_insert+0x20>)
   11eea:	601c      	str	r4, [r3, #0]
    ble_hs_unlock();
   11eec:	f7fd fdde 	bl	faac <ble_hs_unlock>
}
   11ef0:	bd10      	pop	{r4, pc}
    STAILQ_INSERT_HEAD(&ble_l2cap_sig_procs, proc, next);
   11ef2:	4b01      	ldr	r3, [pc, #4]	; (11ef8 <ble_l2cap_sig_proc_insert+0x20>)
   11ef4:	605c      	str	r4, [r3, #4]
   11ef6:	e7f7      	b.n	11ee8 <ble_l2cap_sig_proc_insert+0x10>
   11ef8:	20007678 	.word	0x20007678

00011efc <ble_l2cap_sig_proc_extract>:
{
   11efc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11f00:	4680      	mov	r8, r0
   11f02:	460f      	mov	r7, r1
   11f04:	4616      	mov	r6, r2
    ble_hs_lock();
   11f06:	f7fd fdcd 	bl	faa4 <ble_hs_lock>
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   11f0a:	4b13      	ldr	r3, [pc, #76]	; (11f58 <ble_l2cap_sig_proc_extract+0x5c>)
   11f0c:	f8d3 9000 	ldr.w	r9, [r3]
   11f10:	464c      	mov	r4, r9
    prev = NULL;
   11f12:	2500      	movs	r5, #0
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   11f14:	b174      	cbz	r4, 11f34 <ble_l2cap_sig_proc_extract+0x38>
        if (ble_l2cap_sig_proc_matches(proc, conn_handle, op, identifier)) {
   11f16:	4633      	mov	r3, r6
   11f18:	463a      	mov	r2, r7
   11f1a:	4641      	mov	r1, r8
   11f1c:	4620      	mov	r0, r4
   11f1e:	f7ff ffbb 	bl	11e98 <ble_l2cap_sig_proc_matches>
   11f22:	b910      	cbnz	r0, 11f2a <ble_l2cap_sig_proc_extract+0x2e>
        prev = proc;
   11f24:	4625      	mov	r5, r4
    STAILQ_FOREACH(proc, &ble_l2cap_sig_procs, next) {
   11f26:	6824      	ldr	r4, [r4, #0]
   11f28:	e7f4      	b.n	11f14 <ble_l2cap_sig_proc_extract+0x18>
            if (prev == NULL) {
   11f2a:	b145      	cbz	r5, 11f3e <ble_l2cap_sig_proc_extract+0x42>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   11f2c:	682b      	ldr	r3, [r5, #0]
   11f2e:	681b      	ldr	r3, [r3, #0]
   11f30:	602b      	str	r3, [r5, #0]
   11f32:	b16b      	cbz	r3, 11f50 <ble_l2cap_sig_proc_extract+0x54>
    ble_hs_unlock();
   11f34:	f7fd fdba 	bl	faac <ble_hs_unlock>
}
   11f38:	4620      	mov	r0, r4
   11f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   11f3e:	f8d9 3000 	ldr.w	r3, [r9]
   11f42:	4a05      	ldr	r2, [pc, #20]	; (11f58 <ble_l2cap_sig_proc_extract+0x5c>)
   11f44:	6013      	str	r3, [r2, #0]
   11f46:	2b00      	cmp	r3, #0
   11f48:	d1f4      	bne.n	11f34 <ble_l2cap_sig_proc_extract+0x38>
   11f4a:	4613      	mov	r3, r2
   11f4c:	605a      	str	r2, [r3, #4]
   11f4e:	e7f1      	b.n	11f34 <ble_l2cap_sig_proc_extract+0x38>
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
   11f50:	4b01      	ldr	r3, [pc, #4]	; (11f58 <ble_l2cap_sig_proc_extract+0x5c>)
   11f52:	605d      	str	r5, [r3, #4]
   11f54:	e7ee      	b.n	11f34 <ble_l2cap_sig_proc_extract+0x38>
   11f56:	bf00      	nop
   11f58:	20007678 	.word	0x20007678

00011f5c <ble_l2cap_sig_proc_alloc>:
{
   11f5c:	b508      	push	{r3, lr}
    proc = os_memblock_get(&ble_l2cap_sig_proc_pool);
   11f5e:	4806      	ldr	r0, [pc, #24]	; (11f78 <ble_l2cap_sig_proc_alloc+0x1c>)
   11f60:	f7f8 fd8d 	bl	aa7e <os_memblock_get>
    if (proc != NULL) {
   11f64:	4603      	mov	r3, r0
   11f66:	b128      	cbz	r0, 11f74 <ble_l2cap_sig_proc_alloc+0x18>
        memset(proc, 0, sizeof *proc);
   11f68:	2200      	movs	r2, #0
   11f6a:	6002      	str	r2, [r0, #0]
   11f6c:	6042      	str	r2, [r0, #4]
   11f6e:	6082      	str	r2, [r0, #8]
   11f70:	60c2      	str	r2, [r0, #12]
   11f72:	6102      	str	r2, [r0, #16]
}
   11f74:	4618      	mov	r0, r3
   11f76:	bd08      	pop	{r3, pc}
   11f78:	2000765c 	.word	0x2000765c

00011f7c <ble_l2cap_sig_proc_set_timer>:
{
   11f7c:	b510      	push	{r4, lr}
   11f7e:	4604      	mov	r4, r0
   11f80:	f7f9 fa28 	bl	b3d4 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   11f84:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   11f88:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   11f8a:	f7fd fe67 	bl	fc5c <ble_hs_timer_resched>
}
   11f8e:	bd10      	pop	{r4, pc}

00011f90 <ble_l2cap_sig_extract_expired>:
 * @return                      The number of ticks until the next expiration
 *                                  occurs.
 */
static int32_t
ble_l2cap_sig_extract_expired(struct ble_l2cap_sig_proc_list *dst_list)
{
   11f90:	b570      	push	{r4, r5, r6, lr}
   11f92:	4604      	mov	r4, r0
   11f94:	f7f9 fa1e 	bl	b3d4 <os_time_get>
   11f98:	4606      	mov	r6, r0
    ble_npl_time_t now;
    ble_npl_stime_t next_exp_in;
    ble_npl_stime_t time_diff;

    now = ble_npl_time_get();
    STAILQ_INIT(dst_list);
   11f9a:	2300      	movs	r3, #0
   11f9c:	6023      	str	r3, [r4, #0]
   11f9e:	6064      	str	r4, [r4, #4]

    /* Assume each event is either expired or has infinite duration. */
    next_exp_in = BLE_HS_FOREVER;

    ble_hs_lock();
   11fa0:	f7fd fd80 	bl	faa4 <ble_hs_lock>

    prev = NULL;
    proc = STAILQ_FIRST(&ble_l2cap_sig_procs);
   11fa4:	4b10      	ldr	r3, [pc, #64]	; (11fe8 <ble_l2cap_sig_extract_expired+0x58>)
   11fa6:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   11fa8:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
    while (proc != NULL) {
   11fac:	e00a      	b.n	11fc4 <ble_l2cap_sig_extract_expired+0x34>

        time_diff = proc->exp_os_ticks - now;
        if (time_diff <= 0) {
            /* Procedure has expired; move it to the destination list. */
            if (prev == NULL) {
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   11fae:	480e      	ldr	r0, [pc, #56]	; (11fe8 <ble_l2cap_sig_extract_expired+0x58>)
   11fb0:	6802      	ldr	r2, [r0, #0]
   11fb2:	6812      	ldr	r2, [r2, #0]
   11fb4:	6002      	str	r2, [r0, #0]
   11fb6:	b17a      	cbz	r2, 11fd8 <ble_l2cap_sig_extract_expired+0x48>
            } else {
                STAILQ_REMOVE_AFTER(&ble_l2cap_sig_procs, prev, next);
            }
            STAILQ_INSERT_TAIL(dst_list, proc, next);
   11fb8:	2200      	movs	r2, #0
   11fba:	601a      	str	r2, [r3, #0]
   11fbc:	6862      	ldr	r2, [r4, #4]
   11fbe:	6013      	str	r3, [r2, #0]
   11fc0:	6063      	str	r3, [r4, #4]
        } else {
            if (time_diff < next_exp_in) {
                next_exp_in = time_diff;
   11fc2:	460b      	mov	r3, r1
    while (proc != NULL) {
   11fc4:	b15b      	cbz	r3, 11fde <ble_l2cap_sig_extract_expired+0x4e>
        next = STAILQ_NEXT(proc, next);
   11fc6:	6819      	ldr	r1, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   11fc8:	685a      	ldr	r2, [r3, #4]
   11fca:	1b92      	subs	r2, r2, r6
        if (time_diff <= 0) {
   11fcc:	2a00      	cmp	r2, #0
   11fce:	ddee      	ble.n	11fae <ble_l2cap_sig_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   11fd0:	4295      	cmp	r5, r2
   11fd2:	ddf6      	ble.n	11fc2 <ble_l2cap_sig_extract_expired+0x32>
                next_exp_in = time_diff;
   11fd4:	4615      	mov	r5, r2
   11fd6:	e7f4      	b.n	11fc2 <ble_l2cap_sig_extract_expired+0x32>
                STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   11fd8:	4602      	mov	r2, r0
   11fda:	6050      	str	r0, [r2, #4]
   11fdc:	e7ec      	b.n	11fb8 <ble_l2cap_sig_extract_expired+0x28>
        }

        proc = next;
    }

    ble_hs_unlock();
   11fde:	f7fd fd65 	bl	faac <ble_hs_unlock>

    return next_exp_in;
}
   11fe2:	4628      	mov	r0, r5
   11fe4:	bd70      	pop	{r4, r5, r6, pc}
   11fe6:	bf00      	nop
   11fe8:	20007678 	.word	0x20007678

00011fec <ble_l2cap_sig_proc_free>:
    if (proc != NULL) {
   11fec:	b128      	cbz	r0, 11ffa <ble_l2cap_sig_proc_free+0xe>
{
   11fee:	b508      	push	{r3, lr}
   11ff0:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_l2cap_sig_proc_pool, proc);
   11ff2:	4802      	ldr	r0, [pc, #8]	; (11ffc <ble_l2cap_sig_proc_free+0x10>)
   11ff4:	f7f8 fd6b 	bl	aace <os_memblock_put>
}
   11ff8:	bd08      	pop	{r3, pc}
   11ffa:	4770      	bx	lr
   11ffc:	2000765c 	.word	0x2000765c

00012000 <ble_l2cap_sig_process_status>:
{
   12000:	b510      	push	{r4, lr}
   12002:	4604      	mov	r4, r0
    if (status == 0) {
   12004:	b111      	cbz	r1, 1200c <ble_l2cap_sig_process_status+0xc>
        ble_l2cap_sig_proc_free(proc);
   12006:	f7ff fff1 	bl	11fec <ble_l2cap_sig_proc_free>
}
   1200a:	bd10      	pop	{r4, pc}
        ble_l2cap_sig_proc_set_timer(proc);
   1200c:	f7ff ffb6 	bl	11f7c <ble_l2cap_sig_proc_set_timer>
        ble_l2cap_sig_proc_insert(proc);
   12010:	4620      	mov	r0, r4
   12012:	f7ff ff61 	bl	11ed8 <ble_l2cap_sig_proc_insert>
   12016:	e7f8      	b.n	1200a <ble_l2cap_sig_process_status+0xa>

00012018 <ble_l2cap_sig_rx_reject>:
{
   12018:	b508      	push	{r3, lr}
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   1201a:	784a      	ldrb	r2, [r1, #1]
   1201c:	2101      	movs	r1, #1
   1201e:	f7ff ff6d 	bl	11efc <ble_l2cap_sig_proc_extract>
   if (!proc) {
   12022:	b108      	cbz	r0, 12028 <ble_l2cap_sig_rx_reject+0x10>
   ble_l2cap_sig_proc_free(proc);
   12024:	f7ff ffe2 	bl	11fec <ble_l2cap_sig_proc_free>
}
   12028:	2000      	movs	r0, #0
   1202a:	bd08      	pop	{r3, pc}

0001202c <ble_l2cap_sig_update_rsp_rx>:
{
   1202c:	b570      	push	{r4, r5, r6, lr}
   1202e:	4616      	mov	r6, r2
    proc = ble_l2cap_sig_proc_extract(conn_handle,
   12030:	784a      	ldrb	r2, [r1, #1]
   12032:	2100      	movs	r1, #0
   12034:	f7ff ff62 	bl	11efc <ble_l2cap_sig_proc_extract>
    if (proc == NULL) {
   12038:	b1d8      	cbz	r0, 12072 <ble_l2cap_sig_update_rsp_rx+0x46>
   1203a:	4605      	mov	r5, r0
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_RSP_SZ);
   1203c:	2102      	movs	r1, #2
   1203e:	4630      	mov	r0, r6
   12040:	f7ff fab7 	bl	115b2 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   12044:	4604      	mov	r4, r0
   12046:	b948      	cbnz	r0, 1205c <ble_l2cap_sig_update_rsp_rx+0x30>
    rsp = (struct ble_l2cap_sig_update_rsp *)(*om)->om_data;
   12048:	6833      	ldr	r3, [r6, #0]
   1204a:	681b      	ldr	r3, [r3, #0]
    switch (le16toh(rsp->result)) {
   1204c:	881b      	ldrh	r3, [r3, #0]
   1204e:	b11b      	cbz	r3, 12058 <ble_l2cap_sig_update_rsp_rx+0x2c>
   12050:	2b01      	cmp	r3, #1
   12052:	d00c      	beq.n	1206e <ble_l2cap_sig_update_rsp_rx+0x42>
        cb_status = BLE_HS_EBADDATA;
   12054:	210a      	movs	r1, #10
        break;
   12056:	e002      	b.n	1205e <ble_l2cap_sig_update_rsp_rx+0x32>
        cb_status = 0;
   12058:	4601      	mov	r1, r0
   1205a:	e000      	b.n	1205e <ble_l2cap_sig_update_rsp_rx+0x32>
        cb_status = rc;
   1205c:	4601      	mov	r1, r0
    ble_l2cap_sig_update_call_cb(proc, cb_status);
   1205e:	4628      	mov	r0, r5
   12060:	f7ff ff33 	bl	11eca <ble_l2cap_sig_update_call_cb>
    ble_l2cap_sig_proc_free(proc);
   12064:	4628      	mov	r0, r5
   12066:	f7ff ffc1 	bl	11fec <ble_l2cap_sig_proc_free>
}
   1206a:	4620      	mov	r0, r4
   1206c:	bd70      	pop	{r4, r5, r6, pc}
        cb_status = BLE_HS_EREJECT;
   1206e:	2110      	movs	r1, #16
   12070:	e7f5      	b.n	1205e <ble_l2cap_sig_update_rsp_rx+0x32>
        return 0;
   12072:	2400      	movs	r4, #0
   12074:	e7f9      	b.n	1206a <ble_l2cap_sig_update_rsp_rx+0x3e>

00012076 <ble_l2cap_sig_rx>:
{
   12076:	b5f0      	push	{r4, r5, r6, r7, lr}
   12078:	b085      	sub	sp, #20
   1207a:	4604      	mov	r4, r0
    conn_handle = chan->conn_handle;
   1207c:	8887      	ldrh	r7, [r0, #4]
    om = &chan->rx_buf;
   1207e:	f100 0610 	add.w	r6, r0, #16
    ble_hs_log_mbuf(*om);
   12082:	6900      	ldr	r0, [r0, #16]
   12084:	f7ff fa42 	bl	1150c <ble_hs_log_mbuf>
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_HDR_SZ);
   12088:	2104      	movs	r1, #4
   1208a:	4630      	mov	r0, r6
   1208c:	f7ff fa91 	bl	115b2 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   12090:	4605      	mov	r5, r0
   12092:	b110      	cbz	r0, 1209a <ble_l2cap_sig_rx+0x24>
}
   12094:	4628      	mov	r0, r5
   12096:	b005      	add	sp, #20
   12098:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_l2cap_sig_hdr_parse((*om)->om_data, (*om)->om_len, &hdr);
   1209a:	6923      	ldr	r3, [r4, #16]
   1209c:	aa03      	add	r2, sp, #12
   1209e:	88d9      	ldrh	r1, [r3, #6]
   120a0:	6818      	ldr	r0, [r3, #0]
   120a2:	f000 f93f 	bl	12324 <ble_l2cap_sig_hdr_parse>
    os_mbuf_adj(*om, BLE_L2CAP_SIG_HDR_SZ);
   120a6:	2104      	movs	r1, #4
   120a8:	6920      	ldr	r0, [r4, #16]
   120aa:	f7f8 f9c8 	bl	a43e <os_mbuf_adj>
    if (OS_MBUF_PKTLEN(*om) != hdr.length) {
   120ae:	6923      	ldr	r3, [r4, #16]
   120b0:	8a1a      	ldrh	r2, [r3, #16]
   120b2:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   120b6:	429a      	cmp	r2, r3
   120b8:	d117      	bne.n	120ea <ble_l2cap_sig_rx+0x74>
    rx_cb = ble_l2cap_sig_dispatch_get(hdr.op);
   120ba:	f89d 000c 	ldrb.w	r0, [sp, #12]
   120be:	f7ff fee1 	bl	11e84 <ble_l2cap_sig_dispatch_get>
    if (rx_cb == NULL) {
   120c2:	4603      	mov	r3, r0
   120c4:	b178      	cbz	r0, 120e6 <ble_l2cap_sig_rx+0x70>
        rc = rx_cb(conn_handle, &hdr, om);
   120c6:	4632      	mov	r2, r6
   120c8:	a903      	add	r1, sp, #12
   120ca:	4638      	mov	r0, r7
   120cc:	4798      	blx	r3
    if (rc) {
   120ce:	4605      	mov	r5, r0
   120d0:	2800      	cmp	r0, #0
   120d2:	d0df      	beq.n	12094 <ble_l2cap_sig_rx+0x1e>
        ble_l2cap_sig_reject_tx(conn_handle, hdr.identifier,
   120d4:	f89d 100d 	ldrb.w	r1, [sp, #13]
   120d8:	2200      	movs	r2, #0
   120da:	9200      	str	r2, [sp, #0]
   120dc:	4613      	mov	r3, r2
   120de:	4638      	mov	r0, r7
   120e0:	f000 f947 	bl	12372 <ble_l2cap_sig_reject_tx>
   120e4:	e7d6      	b.n	12094 <ble_l2cap_sig_rx+0x1e>
        rc = BLE_HS_EREJECT;
   120e6:	2510      	movs	r5, #16
   120e8:	e7f4      	b.n	120d4 <ble_l2cap_sig_rx+0x5e>
        return BLE_HS_EBADDATA;
   120ea:	250a      	movs	r5, #10
   120ec:	e7d2      	b.n	12094 <ble_l2cap_sig_rx+0x1e>

000120ee <ble_l2cap_sig_update_req_rx>:
{
   120ee:	b5f0      	push	{r4, r5, r6, r7, lr}
   120f0:	b087      	sub	sp, #28
   120f2:	4606      	mov	r6, r0
   120f4:	460f      	mov	r7, r1
   120f6:	4615      	mov	r5, r2
    rc = ble_hs_mbuf_pullup_base(om, BLE_L2CAP_SIG_UPDATE_REQ_SZ);
   120f8:	2108      	movs	r1, #8
   120fa:	4610      	mov	r0, r2
   120fc:	f7ff fa59 	bl	115b2 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   12100:	4604      	mov	r4, r0
   12102:	b110      	cbz	r0, 1210a <ble_l2cap_sig_update_req_rx+0x1c>
}
   12104:	4620      	mov	r0, r4
   12106:	b007      	add	sp, #28
   12108:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rc = ble_hs_atomic_conn_flags(conn_handle, &conn_flags);
   1210a:	f10d 0107 	add.w	r1, sp, #7
   1210e:	4630      	mov	r0, r6
   12110:	f7fe f9ec 	bl	104ec <ble_hs_atomic_conn_flags>
    if (rc != 0) {
   12114:	4604      	mov	r4, r0
   12116:	2800      	cmp	r0, #0
   12118:	d1f4      	bne.n	12104 <ble_l2cap_sig_update_req_rx+0x16>
    sig_err = !(conn_flags & BLE_HS_CONN_F_MASTER);
   1211a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (sig_err) {
   1211e:	f013 0f01 	tst.w	r3, #1
   12122:	d030      	beq.n	12186 <ble_l2cap_sig_update_req_rx+0x98>
    req = (struct ble_l2cap_sig_update_req *)(*om)->om_data;
   12124:	682b      	ldr	r3, [r5, #0]
   12126:	681b      	ldr	r3, [r3, #0]
    params.itvl_min = le16toh(req->itvl_min);
   12128:	881a      	ldrh	r2, [r3, #0]
   1212a:	f8ad 2008 	strh.w	r2, [sp, #8]
    params.itvl_max = le16toh(req->itvl_max);
   1212e:	885a      	ldrh	r2, [r3, #2]
   12130:	f8ad 200a 	strh.w	r2, [sp, #10]
    params.latency = le16toh(req->slave_latency);
   12134:	889a      	ldrh	r2, [r3, #4]
   12136:	f8ad 200c 	strh.w	r2, [sp, #12]
    params.supervision_timeout = le16toh(req->timeout_multiplier);
   1213a:	88db      	ldrh	r3, [r3, #6]
   1213c:	f8ad 300e 	strh.w	r3, [sp, #14]
    params.min_ce_len = BLE_GAP_INITIAL_CONN_MIN_CE_LEN;
   12140:	2300      	movs	r3, #0
   12142:	f8ad 3010 	strh.w	r3, [sp, #16]
    params.max_ce_len = BLE_GAP_INITIAL_CONN_MAX_CE_LEN;
   12146:	f8ad 3012 	strh.w	r3, [sp, #18]
    rc = ble_gap_rx_l2cap_update_req(conn_handle, &params);
   1214a:	a902      	add	r1, sp, #8
   1214c:	4630      	mov	r0, r6
   1214e:	f7fa ff19 	bl	cf84 <ble_gap_rx_l2cap_update_req>
    if (rc == 0) {
   12152:	4603      	mov	r3, r0
   12154:	b178      	cbz	r0, 12176 <ble_l2cap_sig_update_req_rx+0x88>
    if (rc == 0) {
   12156:	b9a3      	cbnz	r3, 12182 <ble_l2cap_sig_update_req_rx+0x94>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_ACCEPT;
   12158:	2500      	movs	r5, #0
    rsp = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_RSP, hdr->identifier,
   1215a:	ab05      	add	r3, sp, #20
   1215c:	2202      	movs	r2, #2
   1215e:	7879      	ldrb	r1, [r7, #1]
   12160:	2013      	movs	r0, #19
   12162:	f000 f8e6 	bl	12332 <ble_l2cap_sig_cmd_get>
    if (!rsp) {
   12166:	2800      	cmp	r0, #0
   12168:	d0cc      	beq.n	12104 <ble_l2cap_sig_update_req_rx+0x16>
    rsp->result = htole16(l2cap_result);
   1216a:	8005      	strh	r5, [r0, #0]
    ble_l2cap_sig_tx(conn_handle, txom);
   1216c:	9905      	ldr	r1, [sp, #20]
   1216e:	4630      	mov	r0, r6
   12170:	f000 f8be 	bl	122f0 <ble_l2cap_sig_tx>
    return 0;
   12174:	e7c6      	b.n	12104 <ble_l2cap_sig_update_req_rx+0x16>
        rc = ble_gap_update_params(conn_handle, &params);
   12176:	a902      	add	r1, sp, #8
   12178:	4630      	mov	r0, r6
   1217a:	f7fb faaf 	bl	d6dc <ble_gap_update_params>
   1217e:	4603      	mov	r3, r0
   12180:	e7e9      	b.n	12156 <ble_l2cap_sig_update_req_rx+0x68>
        l2cap_result = BLE_L2CAP_SIG_UPDATE_RSP_RESULT_REJECT;
   12182:	2501      	movs	r5, #1
   12184:	e7e9      	b.n	1215a <ble_l2cap_sig_update_req_rx+0x6c>
        return BLE_HS_EREJECT;
   12186:	2410      	movs	r4, #16
   12188:	e7bc      	b.n	12104 <ble_l2cap_sig_update_req_rx+0x16>

0001218a <ble_l2cap_sig_update>:
{
   1218a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1218e:	b085      	sub	sp, #20
   12190:	4606      	mov	r6, r0
   12192:	460f      	mov	r7, r1
   12194:	4691      	mov	r9, r2
   12196:	4698      	mov	r8, r3
    ble_hs_lock();
   12198:	f7fd fc84 	bl	faa4 <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   1219c:	ab02      	add	r3, sp, #8
   1219e:	aa01      	add	r2, sp, #4
   121a0:	2105      	movs	r1, #5
   121a2:	4630      	mov	r0, r6
   121a4:	f7ff fa3f 	bl	11626 <ble_hs_misc_conn_chan_find_reqd>
    if (rc != 0) {
   121a8:	bb50      	cbnz	r0, 12200 <ble_l2cap_sig_update+0x76>
    master = conn->bhc_flags & BLE_HS_CONN_F_MASTER;
   121aa:	9b01      	ldr	r3, [sp, #4]
   121ac:	f893 4028 	ldrb.w	r4, [r3, #40]	; 0x28
    ble_hs_unlock();
   121b0:	f7fd fc7c 	bl	faac <ble_hs_unlock>
    if (master) {
   121b4:	f014 0f01 	tst.w	r4, #1
   121b8:	d12e      	bne.n	12218 <ble_l2cap_sig_update+0x8e>
    proc = ble_l2cap_sig_proc_alloc();
   121ba:	f7ff fecf 	bl	11f5c <ble_l2cap_sig_proc_alloc>
    if (proc == NULL) {
   121be:	4605      	mov	r5, r0
   121c0:	b368      	cbz	r0, 1221e <ble_l2cap_sig_update+0x94>
    proc->op = BLE_L2CAP_SIG_PROC_OP_UPDATE;
   121c2:	2300      	movs	r3, #0
   121c4:	7283      	strb	r3, [r0, #10]
    proc->id = ble_l2cap_sig_next_id();
   121c6:	f7ff fe4f 	bl	11e68 <ble_l2cap_sig_next_id>
   121ca:	4601      	mov	r1, r0
   121cc:	72e8      	strb	r0, [r5, #11]
    proc->conn_handle = conn_handle;
   121ce:	812e      	strh	r6, [r5, #8]
    proc->update.cb = cb;
   121d0:	f8c5 900c 	str.w	r9, [r5, #12]
    proc->update.cb_arg = cb_arg;
   121d4:	f8c5 8010 	str.w	r8, [r5, #16]
    req = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_UPDATE_REQ, proc->id,
   121d8:	ab03      	add	r3, sp, #12
   121da:	2208      	movs	r2, #8
   121dc:	2012      	movs	r0, #18
   121de:	f000 f8a8 	bl	12332 <ble_l2cap_sig_cmd_get>
    if (!req) {
   121e2:	b1f0      	cbz	r0, 12222 <ble_l2cap_sig_update+0x98>
    req->itvl_min = htole16(params->itvl_min);
   121e4:	883a      	ldrh	r2, [r7, #0]
   121e6:	8002      	strh	r2, [r0, #0]
    req->itvl_max = htole16(params->itvl_max);
   121e8:	887a      	ldrh	r2, [r7, #2]
   121ea:	8042      	strh	r2, [r0, #2]
    req->slave_latency = htole16(params->slave_latency);
   121ec:	88ba      	ldrh	r2, [r7, #4]
   121ee:	8082      	strh	r2, [r0, #4]
    req->timeout_multiplier = htole16(params->timeout_multiplier);
   121f0:	88fa      	ldrh	r2, [r7, #6]
   121f2:	80c2      	strh	r2, [r0, #6]
    rc = ble_l2cap_sig_tx(conn_handle, txom);
   121f4:	9903      	ldr	r1, [sp, #12]
   121f6:	4630      	mov	r0, r6
   121f8:	f000 f87a 	bl	122f0 <ble_l2cap_sig_tx>
   121fc:	4604      	mov	r4, r0
   121fe:	e003      	b.n	12208 <ble_l2cap_sig_update+0x7e>
   12200:	4604      	mov	r4, r0
        ble_hs_unlock();
   12202:	f7fd fc53 	bl	faac <ble_hs_unlock>
    proc = NULL;
   12206:	2500      	movs	r5, #0
    ble_l2cap_sig_process_status(proc, rc);
   12208:	4621      	mov	r1, r4
   1220a:	4628      	mov	r0, r5
   1220c:	f7ff fef8 	bl	12000 <ble_l2cap_sig_process_status>
}
   12210:	4620      	mov	r0, r4
   12212:	b005      	add	sp, #20
   12214:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = BLE_HS_EINVAL;
   12218:	2403      	movs	r4, #3
    proc = NULL;
   1221a:	2500      	movs	r5, #0
   1221c:	e7f4      	b.n	12208 <ble_l2cap_sig_update+0x7e>
        rc = BLE_HS_ENOMEM;
   1221e:	2406      	movs	r4, #6
   12220:	e7f2      	b.n	12208 <ble_l2cap_sig_update+0x7e>
        rc = BLE_HS_ENOMEM;
   12222:	2406      	movs	r4, #6
   12224:	e7f0      	b.n	12208 <ble_l2cap_sig_update+0x7e>
	...

00012228 <ble_l2cap_sig_create_chan>:
{
   12228:	b508      	push	{r3, lr}
    chan = ble_l2cap_chan_alloc(conn_handle);
   1222a:	f7ff fcf9 	bl	11c20 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   1222e:	4603      	mov	r3, r0
   12230:	b130      	cbz	r0, 12240 <ble_l2cap_sig_create_chan+0x18>
    chan->scid = BLE_L2CAP_CID_SIG;
   12232:	2205      	movs	r2, #5
   12234:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SIG;
   12236:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_L2CAP_SIG_MTU;
   12238:	2264      	movs	r2, #100	; 0x64
   1223a:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_l2cap_sig_rx;
   1223c:	4a01      	ldr	r2, [pc, #4]	; (12244 <ble_l2cap_sig_create_chan+0x1c>)
   1223e:	6182      	str	r2, [r0, #24]
}
   12240:	4618      	mov	r0, r3
   12242:	bd08      	pop	{r3, pc}
   12244:	00012077 	.word	0x00012077

00012248 <ble_l2cap_sig_conn_broken>:

void
ble_l2cap_sig_conn_broken(uint16_t conn_handle, int reason)
{
   12248:	b538      	push	{r3, r4, r5, lr}
   1224a:	460d      	mov	r5, r1
    struct ble_l2cap_sig_proc *proc;

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   1224c:	e007      	b.n	1225e <ble_l2cap_sig_conn_broken+0x16>
            break;
#endif
#endif
            }

            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   1224e:	4a0b      	ldr	r2, [pc, #44]	; (1227c <ble_l2cap_sig_conn_broken+0x34>)
   12250:	6813      	ldr	r3, [r2, #0]
   12252:	681b      	ldr	r3, [r3, #0]
   12254:	6013      	str	r3, [r2, #0]
   12256:	b16b      	cbz	r3, 12274 <ble_l2cap_sig_conn_broken+0x2c>
            ble_l2cap_sig_proc_free(proc);
   12258:	4620      	mov	r0, r4
   1225a:	f7ff fec7 	bl	11fec <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&ble_l2cap_sig_procs)) != NULL) {
   1225e:	4b07      	ldr	r3, [pc, #28]	; (1227c <ble_l2cap_sig_conn_broken+0x34>)
   12260:	681c      	ldr	r4, [r3, #0]
   12262:	b154      	cbz	r4, 1227a <ble_l2cap_sig_conn_broken+0x32>
        switch(proc->op) {
   12264:	7aa3      	ldrb	r3, [r4, #10]
   12266:	2b00      	cmp	r3, #0
   12268:	d1f1      	bne.n	1224e <ble_l2cap_sig_conn_broken+0x6>
                ble_l2cap_sig_update_call_cb(proc, reason);
   1226a:	4629      	mov	r1, r5
   1226c:	4620      	mov	r0, r4
   1226e:	f7ff fe2c 	bl	11eca <ble_l2cap_sig_update_call_cb>
                break;
   12272:	e7ec      	b.n	1224e <ble_l2cap_sig_conn_broken+0x6>
            STAILQ_REMOVE_HEAD(&ble_l2cap_sig_procs, next);
   12274:	4613      	mov	r3, r2
   12276:	605a      	str	r2, [r3, #4]
   12278:	e7ee      	b.n	12258 <ble_l2cap_sig_conn_broken+0x10>
    }

}
   1227a:	bd38      	pop	{r3, r4, r5, pc}
   1227c:	20007678 	.word	0x20007678

00012280 <ble_l2cap_sig_timer>:
 * @return                      The number of ticks until this function should
 *                                  be called again.
 */
int32_t
ble_l2cap_sig_timer(void)
{
   12280:	b530      	push	{r4, r5, lr}
   12282:	b083      	sub	sp, #12

    /* Remove timed-out procedures from the main list and insert them into a
     * temporary list.  This function also calculates the number of ticks until
     * the next expiration will occur.
     */
    ticks_until_exp = ble_l2cap_sig_extract_expired(&temp_list);
   12284:	4668      	mov	r0, sp
   12286:	f7ff fe83 	bl	11f90 <ble_l2cap_sig_extract_expired>
   1228a:	4605      	mov	r5, r0

    /* Report a failure for each timed out procedure. */
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   1228c:	e006      	b.n	1229c <ble_l2cap_sig_timer+0x1c>
                ble_l2cap_sig_coc_disconnect_cb(proc, BLE_HS_ETIMEOUT);
            break;
#endif
        }

        STAILQ_REMOVE_HEAD(&temp_list, next);
   1228e:	9b00      	ldr	r3, [sp, #0]
   12290:	681b      	ldr	r3, [r3, #0]
   12292:	9300      	str	r3, [sp, #0]
   12294:	b163      	cbz	r3, 122b0 <ble_l2cap_sig_timer+0x30>
        ble_l2cap_sig_proc_free(proc);
   12296:	4620      	mov	r0, r4
   12298:	f7ff fea8 	bl	11fec <ble_l2cap_sig_proc_free>
    while ((proc = STAILQ_FIRST(&temp_list)) != NULL) {
   1229c:	9c00      	ldr	r4, [sp, #0]
   1229e:	b154      	cbz	r4, 122b6 <ble_l2cap_sig_timer+0x36>
        switch(proc->op) {
   122a0:	7aa3      	ldrb	r3, [r4, #10]
   122a2:	2b00      	cmp	r3, #0
   122a4:	d1f3      	bne.n	1228e <ble_l2cap_sig_timer+0xe>
                ble_l2cap_sig_update_call_cb(proc, BLE_HS_ETIMEOUT);
   122a6:	210d      	movs	r1, #13
   122a8:	4620      	mov	r0, r4
   122aa:	f7ff fe0e 	bl	11eca <ble_l2cap_sig_update_call_cb>
                break;
   122ae:	e7ee      	b.n	1228e <ble_l2cap_sig_timer+0xe>
        STAILQ_REMOVE_HEAD(&temp_list, next);
   122b0:	f8cd d004 	str.w	sp, [sp, #4]
   122b4:	e7ef      	b.n	12296 <ble_l2cap_sig_timer+0x16>
    }

    return ticks_until_exp;
}
   122b6:	4628      	mov	r0, r5
   122b8:	b003      	add	sp, #12
   122ba:	bd30      	pop	{r4, r5, pc}

000122bc <ble_l2cap_sig_init>:

int
ble_l2cap_sig_init(void)
{
   122bc:	b500      	push	{lr}
   122be:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_l2cap_sig_procs);
   122c0:	4b07      	ldr	r3, [pc, #28]	; (122e0 <ble_l2cap_sig_init+0x24>)
   122c2:	2200      	movs	r2, #0
   122c4:	601a      	str	r2, [r3, #0]
   122c6:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_l2cap_sig_proc_pool,
   122c8:	4b06      	ldr	r3, [pc, #24]	; (122e4 <ble_l2cap_sig_init+0x28>)
   122ca:	9300      	str	r3, [sp, #0]
   122cc:	4b06      	ldr	r3, [pc, #24]	; (122e8 <ble_l2cap_sig_init+0x2c>)
   122ce:	2214      	movs	r2, #20
   122d0:	2101      	movs	r1, #1
   122d2:	4806      	ldr	r0, [pc, #24]	; (122ec <ble_l2cap_sig_init+0x30>)
   122d4:	f7f8 fb8e 	bl	a9f4 <os_mempool_init>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   122d8:	b003      	add	sp, #12
   122da:	f85d fb04 	ldr.w	pc, [sp], #4
   122de:	bf00      	nop
   122e0:	20007678 	.word	0x20007678
   122e4:	00028f08 	.word	0x00028f08
   122e8:	20007648 	.word	0x20007648
   122ec:	2000765c 	.word	0x2000765c

000122f0 <ble_l2cap_sig_tx>:
#include <string.h>
#include "ble_hs_priv.h"

int
ble_l2cap_sig_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   122f0:	b530      	push	{r4, r5, lr}
   122f2:	b083      	sub	sp, #12
   122f4:	4604      	mov	r4, r0
   122f6:	460d      	mov	r5, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    ble_hs_lock();
   122f8:	f7fd fbd4 	bl	faa4 <ble_hs_lock>
    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SIG,
   122fc:	ab01      	add	r3, sp, #4
   122fe:	466a      	mov	r2, sp
   12300:	2105      	movs	r1, #5
   12302:	4620      	mov	r0, r4
   12304:	f7ff f98f 	bl	11626 <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   12308:	4604      	mov	r4, r0
   1230a:	b120      	cbz	r0, 12316 <ble_l2cap_sig_tx+0x26>
        rc = ble_l2cap_tx(conn, chan, txom);
    }
    ble_hs_unlock();
   1230c:	f7fd fbce 	bl	faac <ble_hs_unlock>

    return rc;
}
   12310:	4620      	mov	r0, r4
   12312:	b003      	add	sp, #12
   12314:	bd30      	pop	{r4, r5, pc}
        rc = ble_l2cap_tx(conn, chan, txom);
   12316:	462a      	mov	r2, r5
   12318:	9901      	ldr	r1, [sp, #4]
   1231a:	9800      	ldr	r0, [sp, #0]
   1231c:	f7ff fd67 	bl	11dee <ble_l2cap_tx>
   12320:	4604      	mov	r4, r0
   12322:	e7f3      	b.n	1230c <ble_l2cap_sig_tx+0x1c>

00012324 <ble_l2cap_sig_hdr_parse>:
{
    struct ble_l2cap_sig_hdr *src = payload;

    BLE_HS_DBG_ASSERT(len >= BLE_L2CAP_SIG_HDR_SZ);

    dst->op = src->op;
   12324:	7803      	ldrb	r3, [r0, #0]
   12326:	7013      	strb	r3, [r2, #0]
    dst->identifier = src->identifier;
   12328:	7843      	ldrb	r3, [r0, #1]
   1232a:	7053      	strb	r3, [r2, #1]
    dst->length = le16toh(src->length);
   1232c:	8843      	ldrh	r3, [r0, #2]
   1232e:	8053      	strh	r3, [r2, #2]
}
   12330:	4770      	bx	lr

00012332 <ble_l2cap_sig_cmd_get>:
}

void *
ble_l2cap_sig_cmd_get(uint8_t opcode, uint8_t id, uint16_t len,
                      struct os_mbuf **txom)
{
   12332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12336:	4680      	mov	r8, r0
   12338:	460f      	mov	r7, r1
   1233a:	4616      	mov	r6, r2
   1233c:	461d      	mov	r5, r3
    struct ble_l2cap_sig_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   1233e:	f7ff f917 	bl	11570 <ble_hs_mbuf_l2cap_pkt>
   12342:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   12344:	b198      	cbz	r0, 1236e <ble_l2cap_sig_cmd_get+0x3c>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   12346:	1d31      	adds	r1, r6, #4
   12348:	b289      	uxth	r1, r1
   1234a:	f7f8 f9d1 	bl	a6f0 <os_mbuf_extend>
   1234e:	4604      	mov	r4, r0
   12350:	b148      	cbz	r0, 12366 <ble_l2cap_sig_cmd_get+0x34>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_l2cap_sig_hdr *)(*txom)->om_data;
   12352:	682b      	ldr	r3, [r5, #0]
   12354:	681c      	ldr	r4, [r3, #0]

    hdr->op = opcode;
   12356:	f884 8000 	strb.w	r8, [r4]
    hdr->identifier = id;
   1235a:	7067      	strb	r7, [r4, #1]
    hdr->length = htole16(len);
   1235c:	8066      	strh	r6, [r4, #2]

    return hdr->data;
   1235e:	3404      	adds	r4, #4
}
   12360:	4620      	mov	r0, r4
   12362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        os_mbuf_free_chain(*txom);
   12366:	6828      	ldr	r0, [r5, #0]
   12368:	f7f7 ff3a 	bl	a1e0 <os_mbuf_free_chain>
        return NULL;
   1236c:	e7f8      	b.n	12360 <ble_l2cap_sig_cmd_get+0x2e>
        return NULL;
   1236e:	2400      	movs	r4, #0
   12370:	e7f6      	b.n	12360 <ble_l2cap_sig_cmd_get+0x2e>

00012372 <ble_l2cap_sig_reject_tx>:
{
   12372:	b5f0      	push	{r4, r5, r6, r7, lr}
   12374:	b083      	sub	sp, #12
   12376:	4605      	mov	r5, r0
   12378:	4617      	mov	r7, r2
   1237a:	461e      	mov	r6, r3
   1237c:	9c08      	ldr	r4, [sp, #32]
    cmd = ble_l2cap_sig_cmd_get(BLE_L2CAP_SIG_OP_REJECT, id,
   1237e:	1ca2      	adds	r2, r4, #2
   12380:	ab01      	add	r3, sp, #4
   12382:	b292      	uxth	r2, r2
   12384:	2001      	movs	r0, #1
   12386:	f7ff ffd4 	bl	12332 <ble_l2cap_sig_cmd_get>
    if (!cmd) {
   1238a:	b158      	cbz	r0, 123a4 <ble_l2cap_sig_reject_tx+0x32>
    cmd->reason = htole16(reason);
   1238c:	f820 7b02 	strh.w	r7, [r0], #2
    memcpy(cmd->data, data, data_len);
   12390:	4622      	mov	r2, r4
   12392:	4631      	mov	r1, r6
   12394:	f7f9 fa0a 	bl	b7ac <memcpy>
    return ble_l2cap_sig_tx(conn_handle, txom);
   12398:	9901      	ldr	r1, [sp, #4]
   1239a:	4628      	mov	r0, r5
   1239c:	f7ff ffa8 	bl	122f0 <ble_l2cap_sig_tx>
}
   123a0:	b003      	add	sp, #12
   123a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   123a4:	2006      	movs	r0, #6
   123a6:	e7fb      	b.n	123a0 <ble_l2cap_sig_reject_tx+0x2e>

000123a8 <ble_l2cap_sig_reject_invalid_cid_tx>:
{
   123a8:	b500      	push	{lr}
   123aa:	b085      	sub	sp, #20
    } data = {
   123ac:	f8ad 300c 	strh.w	r3, [sp, #12]
   123b0:	f8ad 200e 	strh.w	r2, [sp, #14]
    return ble_l2cap_sig_reject_tx(conn_handle, id,
   123b4:	2304      	movs	r3, #4
   123b6:	9300      	str	r3, [sp, #0]
   123b8:	ab03      	add	r3, sp, #12
   123ba:	2202      	movs	r2, #2
   123bc:	f7ff ffd9 	bl	12372 <ble_l2cap_sig_reject_tx>
}
   123c0:	b005      	add	sp, #20
   123c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000123c8 <ble_sm_dispatch_get>:
}

static ble_sm_rx_fn *
ble_sm_dispatch_get(uint8_t op)
{
    if (op >= sizeof ble_sm_dispatch / sizeof ble_sm_dispatch[0]) {
   123c8:	280e      	cmp	r0, #14
   123ca:	d803      	bhi.n	123d4 <ble_sm_dispatch_get+0xc>
        return NULL;
    }

    return ble_sm_dispatch[op];
   123cc:	4b02      	ldr	r3, [pc, #8]	; (123d8 <ble_sm_dispatch_get+0x10>)
   123ce:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   123d2:	4770      	bx	lr
        return NULL;
   123d4:	2000      	movs	r0, #0
}
   123d6:	4770      	bx	lr
   123d8:	00028f20 	.word	0x00028f20

000123dc <ble_sm_proc_remove>:

static void
ble_sm_proc_remove(struct ble_sm_proc *proc,
                         struct ble_sm_proc *prev)
{
    if (prev == NULL) {
   123dc:	b121      	cbz	r1, 123e8 <ble_sm_proc_remove+0xc>
        BLE_HS_DBG_ASSERT(STAILQ_FIRST(&ble_sm_procs) == proc);
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
    } else {
        BLE_HS_DBG_ASSERT(STAILQ_NEXT(prev, next) == proc);
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   123de:	680a      	ldr	r2, [r1, #0]
   123e0:	6812      	ldr	r2, [r2, #0]
   123e2:	600a      	str	r2, [r1, #0]
   123e4:	b14a      	cbz	r2, 123fa <ble_sm_proc_remove+0x1e>
    }

    ble_sm_dbg_assert_no_cycles();
}
   123e6:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   123e8:	4a05      	ldr	r2, [pc, #20]	; (12400 <ble_sm_proc_remove+0x24>)
   123ea:	6813      	ldr	r3, [r2, #0]
   123ec:	681b      	ldr	r3, [r3, #0]
   123ee:	6013      	str	r3, [r2, #0]
   123f0:	2b00      	cmp	r3, #0
   123f2:	d1f8      	bne.n	123e6 <ble_sm_proc_remove+0xa>
   123f4:	4613      	mov	r3, r2
   123f6:	605a      	str	r2, [r3, #4]
   123f8:	4770      	bx	lr
        STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   123fa:	4a01      	ldr	r2, [pc, #4]	; (12400 <ble_sm_proc_remove+0x24>)
   123fc:	6051      	str	r1, [r2, #4]
}
   123fe:	e7f2      	b.n	123e6 <ble_sm_proc_remove+0xa>
   12400:	2000779c 	.word	0x2000779c

00012404 <ble_sm_proc_matches>:
}

static int
ble_sm_proc_matches(struct ble_sm_proc *proc, uint16_t conn_handle,
                    uint8_t state, int is_initiator)
{
   12404:	b410      	push	{r4}
    int proc_is_initiator;

    if (conn_handle != proc->conn_handle) {
   12406:	8944      	ldrh	r4, [r0, #10]
   12408:	428c      	cmp	r4, r1
   1240a:	d003      	beq.n	12414 <ble_sm_proc_matches+0x10>
        return 0;
   1240c:	2000      	movs	r0, #0
    if (is_initiator != -1 && is_initiator != proc_is_initiator) {
        return 0;
    }

    return 1;
}
   1240e:	f85d 4b04 	ldr.w	r4, [sp], #4
   12412:	4770      	bx	lr
    if (state != BLE_SM_PROC_STATE_NONE && state != proc->state) {
   12414:	2aff      	cmp	r2, #255	; 0xff
   12416:	d004      	beq.n	12422 <ble_sm_proc_matches+0x1e>
   12418:	7b41      	ldrb	r1, [r0, #13]
   1241a:	4291      	cmp	r1, r2
   1241c:	d001      	beq.n	12422 <ble_sm_proc_matches+0x1e>
        return 0;
   1241e:	2000      	movs	r0, #0
   12420:	e7f5      	b.n	1240e <ble_sm_proc_matches+0xa>
    proc_is_initiator = !!(proc->flags & BLE_SM_PROC_F_INITIATOR);
   12422:	7a02      	ldrb	r2, [r0, #8]
   12424:	f002 0201 	and.w	r2, r2, #1
    if (is_initiator != -1 && is_initiator != proc_is_initiator) {
   12428:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1242c:	d005      	beq.n	1243a <ble_sm_proc_matches+0x36>
   1242e:	429a      	cmp	r2, r3
   12430:	d001      	beq.n	12436 <ble_sm_proc_matches+0x32>
        return 0;
   12432:	2000      	movs	r0, #0
   12434:	e7eb      	b.n	1240e <ble_sm_proc_matches+0xa>
    return 1;
   12436:	2001      	movs	r0, #1
   12438:	e7e9      	b.n	1240e <ble_sm_proc_matches+0xa>
   1243a:	2001      	movs	r0, #1
   1243c:	e7e7      	b.n	1240e <ble_sm_proc_matches+0xa>
	...

00012440 <ble_sm_insert>:
    STAILQ_FOREACH(cur, &ble_sm_procs, next) {
        BLE_HS_DBG_ASSERT(cur != proc);
    }
#endif

    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   12440:	4b04      	ldr	r3, [pc, #16]	; (12454 <ble_sm_insert+0x14>)
   12442:	681b      	ldr	r3, [r3, #0]
   12444:	6003      	str	r3, [r0, #0]
   12446:	b113      	cbz	r3, 1244e <ble_sm_insert+0xe>
   12448:	4b02      	ldr	r3, [pc, #8]	; (12454 <ble_sm_insert+0x14>)
   1244a:	6018      	str	r0, [r3, #0]
}
   1244c:	4770      	bx	lr
    STAILQ_INSERT_HEAD(&ble_sm_procs, proc, next);
   1244e:	4b01      	ldr	r3, [pc, #4]	; (12454 <ble_sm_insert+0x14>)
   12450:	6058      	str	r0, [r3, #4]
   12452:	e7f9      	b.n	12448 <ble_sm_insert+0x8>
   12454:	2000779c 	.word	0x2000779c

00012458 <ble_sm_rx_noop>:

static void
ble_sm_rx_noop(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
    res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   12458:	f240 4307 	movw	r3, #1031	; 0x407
   1245c:	6013      	str	r3, [r2, #0]
    res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   1245e:	2307      	movs	r3, #7
   12460:	7113      	strb	r3, [r2, #4]
}
   12462:	4770      	bx	lr

00012464 <ble_sm_build_authreq>:

static uint8_t
ble_sm_build_authreq(void)
{
    return ble_hs_cfg.sm_bonding << 0  |
   12464:	4b08      	ldr	r3, [pc, #32]	; (12488 <ble_sm_build_authreq+0x24>)
   12466:	7a5b      	ldrb	r3, [r3, #9]
   12468:	f3c3 0040 	ubfx	r0, r3, #1, #1
           ble_hs_cfg.sm_mitm << 2     |
   1246c:	f3c3 0280 	ubfx	r2, r3, #2, #1
    return ble_hs_cfg.sm_bonding << 0  |
   12470:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
           ble_hs_cfg.sm_sc << 3       |
   12474:	f3c3 02c0 	ubfx	r2, r3, #3, #1
           ble_hs_cfg.sm_mitm << 2     |
   12478:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
           ble_hs_cfg.sm_keypress << 4;
   1247c:	f3c3 1300 	ubfx	r3, r3, #4, #1
}
   12480:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
   12484:	4770      	bx	lr
   12486:	bf00      	nop
   12488:	2000017c 	.word	0x2000017c

0001248c <ble_sm_key_dist>:
{
    struct ble_sm_pair_cmd *pair_rsp;

    pair_rsp = (struct ble_sm_pair_cmd *) &proc->pair_rsp[1];

    *out_init_key_dist = pair_rsp->init_key_dist;
   1248c:	7f03      	ldrb	r3, [r0, #28]
   1248e:	700b      	strb	r3, [r1, #0]
    *out_resp_key_dist = pair_rsp->resp_key_dist;
   12490:	7f43      	ldrb	r3, [r0, #29]
   12492:	7013      	strb	r3, [r2, #0]

    /* Encryption info and master ID are only sent in legacy pairing. */
    if (proc->flags & BLE_SM_PROC_F_SC) {
   12494:	7a03      	ldrb	r3, [r0, #8]
   12496:	f013 0f10 	tst.w	r3, #16
   1249a:	d007      	beq.n	124ac <ble_sm_key_dist+0x20>
        *out_init_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   1249c:	780b      	ldrb	r3, [r1, #0]
   1249e:	f023 0301 	bic.w	r3, r3, #1
   124a2:	700b      	strb	r3, [r1, #0]
        *out_resp_key_dist &= ~BLE_SM_PAIR_KEY_DIST_ENC;
   124a4:	7813      	ldrb	r3, [r2, #0]
   124a6:	f023 0301 	bic.w	r3, r3, #1
   124aa:	7013      	strb	r3, [r2, #0]
    }
}
   124ac:	4770      	bx	lr

000124ae <ble_sm_chk_store_overflow_by_type>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   124ae:	2000      	movs	r0, #0
   124b0:	4770      	bx	lr

000124b2 <ble_sm_chk_store_overflow>:

static int
ble_sm_chk_store_overflow(uint16_t conn_handle)
{
   124b2:	b510      	push	{r4, lr}
   124b4:	4604      	mov	r4, r0
    int rc;

    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_PEER_SEC,
   124b6:	4601      	mov	r1, r0
   124b8:	2002      	movs	r0, #2
   124ba:	f7ff fff8 	bl	124ae <ble_sm_chk_store_overflow_by_type>
                                           conn_handle);
    if (rc != 0) {
   124be:	4603      	mov	r3, r0
   124c0:	b920      	cbnz	r0, 124cc <ble_sm_chk_store_overflow+0x1a>
        return rc;
    }

    rc = ble_sm_chk_store_overflow_by_type(BLE_STORE_OBJ_TYPE_OUR_SEC,
   124c2:	4621      	mov	r1, r4
   124c4:	2001      	movs	r0, #1
   124c6:	f7ff fff2 	bl	124ae <ble_sm_chk_store_overflow_by_type>
   124ca:	4603      	mov	r3, r0
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   124cc:	4618      	mov	r0, r3
   124ce:	bd10      	pop	{r4, pc}

000124d0 <ble_sm_state_after_pair>:
 *****************************************************************************/

static uint8_t
ble_sm_state_after_pair(struct ble_sm_proc *proc)
{
    if (proc->flags & BLE_SM_PROC_F_SC) {
   124d0:	7a03      	ldrb	r3, [r0, #8]
   124d2:	f013 0f10 	tst.w	r3, #16
   124d6:	d101      	bne.n	124dc <ble_sm_state_after_pair+0xc>
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
    } else {
        return BLE_SM_PROC_STATE_CONFIRM;
   124d8:	2001      	movs	r0, #1
    }
}
   124da:	4770      	bx	lr
        return BLE_SM_PROC_STATE_PUBLIC_KEY;
   124dc:	2009      	movs	r0, #9
   124de:	4770      	bx	lr

000124e0 <ble_sm_pair_base_fill>:
    BLE_HS_DBG_ASSERT_EVAL(rc == 0);
}

static void
ble_sm_pair_base_fill(struct ble_sm_pair_cmd *cmd)
{
   124e0:	b510      	push	{r4, lr}
   124e2:	4604      	mov	r4, r0
    cmd->io_cap = ble_hs_cfg.sm_io_cap;
   124e4:	4b06      	ldr	r3, [pc, #24]	; (12500 <ble_sm_pair_base_fill+0x20>)
   124e6:	7a1a      	ldrb	r2, [r3, #8]
   124e8:	7002      	strb	r2, [r0, #0]
    cmd->oob_data_flag = ble_hs_cfg.sm_oob_data_flag;
   124ea:	7a5b      	ldrb	r3, [r3, #9]
   124ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
   124f0:	7043      	strb	r3, [r0, #1]
    cmd->authreq = ble_sm_build_authreq();
   124f2:	f7ff ffb7 	bl	12464 <ble_sm_build_authreq>
   124f6:	70a0      	strb	r0, [r4, #2]
    cmd->max_enc_key_size = BLE_SM_PAIR_KEY_SZ_MAX;
   124f8:	2310      	movs	r3, #16
   124fa:	70e3      	strb	r3, [r4, #3]
}
   124fc:	bd10      	pop	{r4, pc}
   124fe:	bf00      	nop
   12500:	2000017c 	.word	0x2000017c

00012504 <ble_sm_pair_req_fill>:

static void
ble_sm_pair_req_fill(struct ble_sm_proc *proc)
{
   12504:	b510      	push	{r4, lr}
   12506:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *req;

    req = (void *)(proc->pair_req + 1);

    proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   12508:	2301      	movs	r3, #1
   1250a:	7403      	strb	r3, [r0, #16]
    ble_sm_pair_base_fill(req);
   1250c:	3011      	adds	r0, #17
   1250e:	f7ff ffe7 	bl	124e0 <ble_sm_pair_base_fill>
    req->init_key_dist = ble_hs_cfg.sm_our_key_dist;
   12512:	4b03      	ldr	r3, [pc, #12]	; (12520 <ble_sm_pair_req_fill+0x1c>)
   12514:	7a9a      	ldrb	r2, [r3, #10]
   12516:	7562      	strb	r2, [r4, #21]
    req->resp_key_dist = ble_hs_cfg.sm_their_key_dist;
   12518:	7adb      	ldrb	r3, [r3, #11]
   1251a:	75a3      	strb	r3, [r4, #22]
}
   1251c:	bd10      	pop	{r4, pc}
   1251e:	bf00      	nop
   12520:	2000017c 	.word	0x2000017c

00012524 <ble_sm_pair_rsp_fill>:

static void
ble_sm_pair_rsp_fill(struct ble_sm_proc *proc)
{
   12524:	b510      	push	{r4, lr}
   12526:	4604      	mov	r4, r0
    struct ble_sm_pair_cmd *rsp;

    req = (void *)(proc->pair_req + 1);
    rsp = (void *)(proc->pair_rsp + 1);

    proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   12528:	2302      	movs	r3, #2
   1252a:	75c3      	strb	r3, [r0, #23]
    ble_sm_pair_base_fill(rsp);
   1252c:	3018      	adds	r0, #24
   1252e:	f7ff ffd7 	bl	124e0 <ble_sm_pair_base_fill>

    /* The response's key distribution flags field is the intersection of
     * the peer's preferences and our capabilities.
     */
    rsp->init_key_dist = req->init_key_dist &
   12532:	7d63      	ldrb	r3, [r4, #21]
                         ble_hs_cfg.sm_their_key_dist;
   12534:	4a04      	ldr	r2, [pc, #16]	; (12548 <ble_sm_pair_rsp_fill+0x24>)
   12536:	7ad1      	ldrb	r1, [r2, #11]
    rsp->init_key_dist = req->init_key_dist &
   12538:	400b      	ands	r3, r1
   1253a:	7723      	strb	r3, [r4, #28]
    rsp->resp_key_dist = req->resp_key_dist &
   1253c:	7da3      	ldrb	r3, [r4, #22]
                         ble_hs_cfg.sm_our_key_dist;
   1253e:	7a92      	ldrb	r2, [r2, #10]
    rsp->resp_key_dist = req->resp_key_dist &
   12540:	4013      	ands	r3, r2
   12542:	7763      	strb	r3, [r4, #29]
}
   12544:	bd10      	pop	{r4, pc}
   12546:	bf00      	nop
   12548:	2000017c 	.word	0x2000017c

0001254c <ble_sm_verify_auth_requirements>:
        if (MYNEWT_VAL(BLE_SM_LEGACY) == 0) {
            return false;
        }
    }
    return true;
}
   1254c:	2001      	movs	r0, #1
   1254e:	4770      	bx	lr

00012550 <ble_sm_gen_ediv>:
{
   12550:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->ediv, sizeof master_id->ediv);
   12552:	2102      	movs	r1, #2
   12554:	f7fe fe9d 	bl	11292 <ble_hs_hci_util_rand>
}
   12558:	bd08      	pop	{r3, pc}

0001255a <ble_sm_gen_master_id_rand>:
{
   1255a:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(&master_id->rand_val, sizeof master_id->rand_val);
   1255c:	2108      	movs	r1, #8
   1255e:	3002      	adds	r0, #2
   12560:	f7fe fe97 	bl	11292 <ble_hs_hci_util_rand>
}
   12564:	bd08      	pop	{r3, pc}

00012566 <ble_sm_gen_csrk>:
{
   12566:	b508      	push	{r3, lr}
   12568:	4608      	mov	r0, r1
    rc = ble_hs_hci_util_rand(csrk, 16);
   1256a:	2110      	movs	r1, #16
   1256c:	f7fe fe91 	bl	11292 <ble_hs_hci_util_rand>
}
   12570:	bd08      	pop	{r3, pc}

00012572 <ble_sm_io_action>:
{
   12572:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   12574:	7a03      	ldrb	r3, [r0, #8]
   12576:	f013 0f10 	tst.w	r3, #16
   1257a:	d102      	bne.n	12582 <ble_sm_io_action+0x10>
        return ble_sm_lgcy_io_action(proc, action);
   1257c:	f001 fc10 	bl	13da0 <ble_sm_lgcy_io_action>
}
   12580:	bd08      	pop	{r3, pc}
        return ble_sm_sc_io_action(proc, action);
   12582:	2008      	movs	r0, #8
   12584:	e7fc      	b.n	12580 <ble_sm_io_action+0xe>

00012586 <ble_sm_pair_cfg>:
{
   12586:	b510      	push	{r4, lr}
   12588:	b082      	sub	sp, #8
   1258a:	4604      	mov	r4, r0
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   1258c:	7cc3      	ldrb	r3, [r0, #19]
   1258e:	f013 0f08 	tst.w	r3, #8
   12592:	d007      	beq.n	125a4 <ble_sm_pair_cfg+0x1e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_SC) {
   12594:	7e83      	ldrb	r3, [r0, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_SC &&
   12596:	f013 0f08 	tst.w	r3, #8
   1259a:	d003      	beq.n	125a4 <ble_sm_pair_cfg+0x1e>
        proc->flags |= BLE_SM_PROC_F_SC;
   1259c:	7a03      	ldrb	r3, [r0, #8]
   1259e:	f043 0310 	orr.w	r3, r3, #16
   125a2:	7203      	strb	r3, [r0, #8]
    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   125a4:	f10d 0206 	add.w	r2, sp, #6
   125a8:	f10d 0107 	add.w	r1, sp, #7
   125ac:	4620      	mov	r0, r4
   125ae:	f7ff ff6d 	bl	1248c <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   125b2:	7a22      	ldrb	r2, [r4, #8]
   125b4:	f012 0f01 	tst.w	r2, #1
   125b8:	d03b      	beq.n	12632 <ble_sm_pair_cfg+0xac>
        rx_key_dist = resp_key_dist;
   125ba:	f89d 3006 	ldrb.w	r3, [sp, #6]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   125be:	7ce1      	ldrb	r1, [r4, #19]
   125c0:	f011 0f01 	tst.w	r1, #1
   125c4:	d006      	beq.n	125d4 <ble_sm_pair_cfg+0x4e>
        pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   125c6:	7ea1      	ldrb	r1, [r4, #26]
    if (pair_req->authreq & BLE_SM_PAIR_AUTHREQ_BOND &&
   125c8:	f011 0f01 	tst.w	r1, #1
   125cc:	d002      	beq.n	125d4 <ble_sm_pair_cfg+0x4e>
        proc->flags |= BLE_SM_PROC_F_BONDING;
   125ce:	f042 0220 	orr.w	r2, r2, #32
   125d2:	7222      	strb	r2, [r4, #8]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   125d4:	7a22      	ldrb	r2, [r4, #8]
   125d6:	f012 0f10 	tst.w	r2, #16
   125da:	d108      	bne.n	125ee <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   125dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
    if (!(proc->flags & BLE_SM_PROC_F_SC) &&
   125e0:	b929      	cbnz	r1, 125ee <ble_sm_pair_cfg+0x68>
        (init_key_dist == 0 && resp_key_dist == 0)) {
   125e2:	f89d 1006 	ldrb.w	r1, [sp, #6]
   125e6:	b911      	cbnz	r1, 125ee <ble_sm_pair_cfg+0x68>
        proc->flags &= ~BLE_SM_PROC_F_BONDING;
   125e8:	f022 0220 	bic.w	r2, r2, #32
   125ec:	7222      	strb	r2, [r4, #8]
    proc->rx_key_flags = 0;
   125ee:	2200      	movs	r2, #0
   125f0:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   125f2:	f013 0f01 	tst.w	r3, #1
   125f6:	d001      	beq.n	125fc <ble_sm_pair_cfg+0x76>
        proc->rx_key_flags |= BLE_SM_KE_F_ENC_INFO |
   125f8:	2203      	movs	r2, #3
   125fa:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   125fc:	f013 0f02 	tst.w	r3, #2
   12600:	d003      	beq.n	1260a <ble_sm_pair_cfg+0x84>
        proc->rx_key_flags |= BLE_SM_KE_F_ID_INFO |
   12602:	7ba2      	ldrb	r2, [r4, #14]
   12604:	f042 020c 	orr.w	r2, r2, #12
   12608:	73a2      	strb	r2, [r4, #14]
    if (rx_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   1260a:	f013 0f04 	tst.w	r3, #4
   1260e:	d003      	beq.n	12618 <ble_sm_pair_cfg+0x92>
        proc->rx_key_flags |= BLE_SM_KE_F_SIGN_INFO;
   12610:	7ba3      	ldrb	r3, [r4, #14]
   12612:	f043 0310 	orr.w	r3, r3, #16
   12616:	73a3      	strb	r3, [r4, #14]
    proc->key_size = min(pair_req->max_enc_key_size,
   12618:	7ee3      	ldrb	r3, [r4, #27]
   1261a:	7d22      	ldrb	r2, [r4, #20]
   1261c:	4293      	cmp	r3, r2
   1261e:	bf28      	it	cs
   12620:	4613      	movcs	r3, r2
   12622:	73e3      	strb	r3, [r4, #15]
    rc = ble_sm_io_action(proc, &ioact);
   12624:	f10d 0105 	add.w	r1, sp, #5
   12628:	4620      	mov	r0, r4
   1262a:	f7ff ffa2 	bl	12572 <ble_sm_io_action>
}
   1262e:	b002      	add	sp, #8
   12630:	bd10      	pop	{r4, pc}
        rx_key_dist = init_key_dist;
   12632:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12636:	e7c2      	b.n	125be <ble_sm_pair_cfg+0x38>

00012638 <ble_sm_gen_ltk>:
{
   12638:	b570      	push	{r4, r5, r6, lr}
   1263a:	4605      	mov	r5, r0
   1263c:	460c      	mov	r4, r1
    rc = ble_hs_hci_util_rand(ltk, proc->key_size);
   1263e:	7bc1      	ldrb	r1, [r0, #15]
   12640:	4620      	mov	r0, r4
   12642:	f7fe fe26 	bl	11292 <ble_hs_hci_util_rand>
    if (rc != 0) {
   12646:	4606      	mov	r6, r0
   12648:	b108      	cbz	r0, 1264e <ble_sm_gen_ltk+0x16>
}
   1264a:	4630      	mov	r0, r6
   1264c:	bd70      	pop	{r4, r5, r6, pc}
    memset(ltk + proc->key_size, 0, sizeof proc->ltk - proc->key_size);
   1264e:	7be8      	ldrb	r0, [r5, #15]
   12650:	f1c0 0210 	rsb	r2, r0, #16
   12654:	2100      	movs	r1, #0
   12656:	4420      	add	r0, r4
   12658:	f7f9 f8d1 	bl	b7fe <memset>
    return 0;
   1265c:	e7f5      	b.n	1264a <ble_sm_gen_ltk+0x12>
	...

00012660 <ble_sm_exec>:
{
   12660:	b570      	push	{r4, r5, r6, lr}
   12662:	4605      	mov	r5, r0
   12664:	460c      	mov	r4, r1
   12666:	4616      	mov	r6, r2
    memset(res, 0, sizeof *res);
   12668:	2300      	movs	r3, #0
   1266a:	600b      	str	r3, [r1, #0]
   1266c:	604b      	str	r3, [r1, #4]
   1266e:	608b      	str	r3, [r1, #8]
   12670:	60cb      	str	r3, [r1, #12]
   12672:	610b      	str	r3, [r1, #16]
   12674:	614b      	str	r3, [r1, #20]
    if (!ble_hs_conn_exists(proc->conn_handle)) {
   12676:	8940      	ldrh	r0, [r0, #10]
   12678:	f7fe f848 	bl	1070c <ble_hs_conn_exists>
   1267c:	b140      	cbz	r0, 12690 <ble_sm_exec+0x30>
        cb = ble_sm_state_dispatch[proc->state];
   1267e:	7b6a      	ldrb	r2, [r5, #13]
   12680:	4b05      	ldr	r3, [pc, #20]	; (12698 <ble_sm_exec+0x38>)
   12682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
        cb(proc, res, arg);
   12686:	4632      	mov	r2, r6
   12688:	4621      	mov	r1, r4
   1268a:	4628      	mov	r0, r5
   1268c:	4798      	blx	r3
}
   1268e:	bd70      	pop	{r4, r5, r6, pc}
        res->app_status = BLE_HS_ENOTCONN;
   12690:	2307      	movs	r3, #7
   12692:	6023      	str	r3, [r4, #0]
   12694:	e7fb      	b.n	1268e <ble_sm_exec+0x2e>
   12696:	bf00      	nop
   12698:	00028f70 	.word	0x00028f70

0001269c <ble_sm_sec_req_exec>:
 *****************************************************************************/

static void
ble_sm_sec_req_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                    void *arg)
{
   1269c:	b570      	push	{r4, r5, r6, lr}
   1269e:	b082      	sub	sp, #8
   126a0:	4605      	mov	r5, r0
   126a2:	460c      	mov	r4, r1
    struct ble_sm_sec_req *cmd;
    struct os_mbuf *txom;
    int rc;

    cmd = ble_sm_cmd_get(BLE_SM_OP_SEC_REQ, sizeof(*cmd), &txom);
   126a4:	aa01      	add	r2, sp, #4
   126a6:	2101      	movs	r1, #1
   126a8:	200b      	movs	r0, #11
   126aa:	f001 fb2b 	bl	13d04 <ble_sm_cmd_get>
    if (!cmd) {
   126ae:	b150      	cbz	r0, 126c6 <ble_sm_sec_req_exec+0x2a>
   126b0:	4606      	mov	r6, r0
        res->app_status = BLE_HS_ENOMEM;
        return;
    }

    cmd->authreq = ble_sm_build_authreq();
   126b2:	f7ff fed7 	bl	12464 <ble_sm_build_authreq>
   126b6:	7030      	strb	r0, [r6, #0]
    rc = ble_sm_tx(proc->conn_handle, txom);
   126b8:	9901      	ldr	r1, [sp, #4]
   126ba:	8968      	ldrh	r0, [r5, #10]
   126bc:	f001 fb3c 	bl	13d38 <ble_sm_tx>
    if (rc != 0) {
   126c0:	b118      	cbz	r0, 126ca <ble_sm_sec_req_exec+0x2e>
        res->app_status = rc;
   126c2:	6020      	str	r0, [r4, #0]
        return;
   126c4:	e001      	b.n	126ca <ble_sm_sec_req_exec+0x2e>
        res->app_status = BLE_HS_ENOMEM;
   126c6:	2306      	movs	r3, #6
   126c8:	6023      	str	r3, [r4, #0]
    }
}
   126ca:	b002      	add	sp, #8
   126cc:	bd70      	pop	{r4, r5, r6, pc}

000126ce <ble_sm_pair_fail_tx>:
{
   126ce:	b530      	push	{r4, r5, lr}
   126d0:	b083      	sub	sp, #12
   126d2:	4604      	mov	r4, r0
   126d4:	460d      	mov	r5, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_FAIL, sizeof(*cmd), &txom);
   126d6:	aa01      	add	r2, sp, #4
   126d8:	2101      	movs	r1, #1
   126da:	2005      	movs	r0, #5
   126dc:	f001 fb12 	bl	13d04 <ble_sm_cmd_get>
    if (cmd) {
   126e0:	b120      	cbz	r0, 126ec <ble_sm_pair_fail_tx+0x1e>
        cmd->reason = reason;
   126e2:	7005      	strb	r5, [r0, #0]
        rc = ble_sm_tx(conn_handle, txom);
   126e4:	9901      	ldr	r1, [sp, #4]
   126e6:	4620      	mov	r0, r4
   126e8:	f001 fb26 	bl	13d38 <ble_sm_tx>
}
   126ec:	b003      	add	sp, #12
   126ee:	bd30      	pop	{r4, r5, pc}

000126f0 <ble_sm_fill_store_value>:
{
   126f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   126f4:	4606      	mov	r6, r0
   126f6:	4688      	mov	r8, r1
   126f8:	4617      	mov	r7, r2
   126fa:	461d      	mov	r5, r3
   126fc:	9c06      	ldr	r4, [sp, #24]
    memset(value_sec, 0, sizeof *value_sec);
   126fe:	2250      	movs	r2, #80	; 0x50
   12700:	2100      	movs	r1, #0
   12702:	4620      	mov	r0, r4
   12704:	f7f9 f87b 	bl	b7fe <memset>
    value_sec->peer_addr = *peer_addr;
   12708:	6830      	ldr	r0, [r6, #0]
   1270a:	6020      	str	r0, [r4, #0]
   1270c:	88b2      	ldrh	r2, [r6, #4]
   1270e:	79b3      	ldrb	r3, [r6, #6]
   12710:	80a2      	strh	r2, [r4, #4]
   12712:	71a3      	strb	r3, [r4, #6]
    if (keys->ediv_rand_valid && keys->ltk_valid) {
   12714:	782b      	ldrb	r3, [r5, #0]
   12716:	f003 0303 	and.w	r3, r3, #3
   1271a:	2b03      	cmp	r3, #3
   1271c:	d009      	beq.n	12732 <ble_sm_fill_store_value+0x42>
    if (keys->irk_valid) {
   1271e:	782b      	ldrb	r3, [r5, #0]
   12720:	f013 0f04 	tst.w	r3, #4
   12724:	d12e      	bne.n	12784 <ble_sm_fill_store_value+0x94>
    if (keys->csrk_valid) {
   12726:	782b      	ldrb	r3, [r5, #0]
   12728:	f013 0f08 	tst.w	r3, #8
   1272c:	d13f      	bne.n	127ae <ble_sm_fill_store_value+0xbe>
}
   1272e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        value_sec->key_size = keys->key_size;
   12732:	7c6b      	ldrb	r3, [r5, #17]
   12734:	71e3      	strb	r3, [r4, #7]
        value_sec->ediv = keys->ediv;
   12736:	886b      	ldrh	r3, [r5, #2]
   12738:	8123      	strh	r3, [r4, #8]
        value_sec->rand_num = keys->rand_val;
   1273a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
   1273e:	e9c4 2304 	strd	r2, r3, [r4, #16]
        memcpy(value_sec->ltk, keys->ltk, sizeof value_sec->ltk);
   12742:	462b      	mov	r3, r5
   12744:	f853 6f12 	ldr.w	r6, [r3, #18]!
   12748:	6858      	ldr	r0, [r3, #4]
   1274a:	6899      	ldr	r1, [r3, #8]
   1274c:	68db      	ldr	r3, [r3, #12]
   1274e:	61a6      	str	r6, [r4, #24]
   12750:	61e0      	str	r0, [r4, #28]
   12752:	6221      	str	r1, [r4, #32]
   12754:	6263      	str	r3, [r4, #36]	; 0x24
        value_sec->ltk_present = 1;
   12756:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1275a:	f043 0301 	orr.w	r3, r3, #1
   1275e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        value_sec->authenticated = !!authenticated;
   12762:	f118 0800 	adds.w	r8, r8, #0
   12766:	bf18      	it	ne
   12768:	f04f 0801 	movne.w	r8, #1
   1276c:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   12770:	f368 0341 	bfi	r3, r8, #1, #1
        value_sec->sc = !!sc;
   12774:	3700      	adds	r7, #0
   12776:	bf18      	it	ne
   12778:	2701      	movne	r7, #1
   1277a:	f367 0382 	bfi	r3, r7, #2, #1
   1277e:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
   12782:	e7cc      	b.n	1271e <ble_sm_fill_store_value+0x2e>
        memcpy(value_sec->irk, keys->irk, sizeof value_sec->irk);
   12784:	462b      	mov	r3, r5
   12786:	f853 6f22 	ldr.w	r6, [r3, #34]!
   1278a:	6858      	ldr	r0, [r3, #4]
   1278c:	6899      	ldr	r1, [r3, #8]
   1278e:	68db      	ldr	r3, [r3, #12]
   12790:	f8c4 6029 	str.w	r6, [r4, #41]	; 0x29
   12794:	f8c4 002d 	str.w	r0, [r4, #45]	; 0x2d
   12798:	f8c4 1031 	str.w	r1, [r4, #49]	; 0x31
   1279c:	f8c4 3035 	str.w	r3, [r4, #53]	; 0x35
        value_sec->irk_present = 1;
   127a0:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   127a4:	f043 0301 	orr.w	r3, r3, #1
   127a8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
   127ac:	e7bb      	b.n	12726 <ble_sm_fill_store_value+0x36>
        memcpy(value_sec->csrk, keys->csrk, sizeof value_sec->csrk);
   127ae:	f855 6f32 	ldr.w	r6, [r5, #50]!
   127b2:	6868      	ldr	r0, [r5, #4]
   127b4:	68a9      	ldr	r1, [r5, #8]
   127b6:	68ea      	ldr	r2, [r5, #12]
   127b8:	f8c4 603a 	str.w	r6, [r4, #58]	; 0x3a
   127bc:	f8c4 003e 	str.w	r0, [r4, #62]	; 0x3e
   127c0:	f8c4 1042 	str.w	r1, [r4, #66]	; 0x42
   127c4:	f8c4 2046 	str.w	r2, [r4, #70]	; 0x46
        value_sec->csrk_present = 1;
   127c8:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   127cc:	f043 0301 	orr.w	r3, r3, #1
   127d0:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
}
   127d4:	e7ab      	b.n	1272e <ble_sm_fill_store_value+0x3e>

000127d6 <ble_sm_update_sec_state>:
{
   127d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   127d8:	460f      	mov	r7, r1
   127da:	4616      	mov	r6, r2
   127dc:	461d      	mov	r5, r3
   127de:	9c06      	ldr	r4, [sp, #24]
    conn = ble_hs_conn_find(conn_handle);
   127e0:	f7fd ff6a 	bl	106b8 <ble_hs_conn_find>
    if (conn != NULL) {
   127e4:	b1d0      	cbz	r0, 1281c <ble_sm_update_sec_state+0x46>
   127e6:	4603      	mov	r3, r0
        conn->bhc_sec_state.encrypted = encrypted;
   127e8:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
   127ec:	f367 0200 	bfi	r2, r7, #0, #1
   127f0:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
        if (authenticated) {
   127f4:	b126      	cbz	r6, 12800 <ble_sm_update_sec_state+0x2a>
            conn->bhc_sec_state.authenticated = 1;
   127f6:	b2d2      	uxtb	r2, r2
   127f8:	f042 0202 	orr.w	r2, r2, #2
   127fc:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
        if (bonded) {
   12800:	b12d      	cbz	r5, 1280e <ble_sm_update_sec_state+0x38>
            conn->bhc_sec_state.bonded = 1;
   12802:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   12806:	f042 0204 	orr.w	r2, r2, #4
   1280a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
        if (key_size) {
   1280e:	b12c      	cbz	r4, 1281c <ble_sm_update_sec_state+0x46>
            conn->bhc_sec_state.key_size = key_size;
   12810:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
   12814:	f364 02c7 	bfi	r2, r4, #3, #5
   12818:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
   1281c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001281e <ble_sm_key_exch_success>:
 * $key exchange                                                             *
 *****************************************************************************/

static void
ble_sm_key_exch_success(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   1281e:	b530      	push	{r4, r5, lr}
   12820:	b083      	sub	sp, #12
   12822:	4604      	mov	r4, r0
   12824:	460d      	mov	r5, r1
    /* The procedure is now complete.  Update connection bonded state and
     * terminate procedure.
     */
    ble_sm_update_sec_state(proc->conn_handle, 1,
                            !!(proc->flags & BLE_SM_PROC_F_AUTHENTICATED),
   12826:	7a02      	ldrb	r2, [r0, #8]
                            !!(proc->flags & BLE_SM_PROC_F_BONDING),
                            proc->key_size);
   12828:	7bc3      	ldrb	r3, [r0, #15]
    ble_sm_update_sec_state(proc->conn_handle, 1,
   1282a:	8940      	ldrh	r0, [r0, #10]
   1282c:	9300      	str	r3, [sp, #0]
   1282e:	f3c2 1340 	ubfx	r3, r2, #5, #1
   12832:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   12836:	2101      	movs	r1, #1
   12838:	f7ff ffcd 	bl	127d6 <ble_sm_update_sec_state>
    proc->state = BLE_SM_PROC_STATE_NONE;
   1283c:	23ff      	movs	r3, #255	; 0xff
   1283e:	7363      	strb	r3, [r4, #13]

    res->app_status = 0;
   12840:	2300      	movs	r3, #0
   12842:	602b      	str	r3, [r5, #0]
    res->enc_cb = 1;
   12844:	7d2b      	ldrb	r3, [r5, #20]
   12846:	f043 0302 	orr.w	r3, r3, #2
   1284a:	752b      	strb	r3, [r5, #20]
}
   1284c:	b003      	add	sp, #12
   1284e:	bd30      	pop	{r4, r5, pc}

00012850 <ble_sm_key_exch_exec>:

static void
ble_sm_key_exch_exec(struct ble_sm_proc *proc, struct ble_sm_result *res,
                     void *arg)
{
   12850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12854:	b08a      	sub	sp, #40	; 0x28
   12856:	4604      	mov	r4, r0
   12858:	460d      	mov	r5, r1
    uint8_t our_key_dist;
    struct os_mbuf *txom;
    const uint8_t *irk;
    int rc;

    ble_sm_key_dist(proc, &init_key_dist, &resp_key_dist);
   1285a:	f10d 020a 	add.w	r2, sp, #10
   1285e:	f10d 010b 	add.w	r1, sp, #11
   12862:	f7ff fe13 	bl	1248c <ble_sm_key_dist>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   12866:	7a23      	ldrb	r3, [r4, #8]
   12868:	f013 0f01 	tst.w	r3, #1
   1286c:	d018      	beq.n	128a0 <ble_sm_key_exch_exec+0x50>
        our_key_dist = init_key_dist;
   1286e:	f89d 600b 	ldrb.w	r6, [sp, #11]
    } else {
        our_key_dist = resp_key_dist;
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ENC) {
   12872:	f016 0f01 	tst.w	r6, #1
   12876:	d116      	bne.n	128a6 <ble_sm_key_exch_exec+0x56>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_ID) {
   12878:	f016 0f02 	tst.w	r6, #2
   1287c:	d179      	bne.n	12972 <ble_sm_key_exch_exec+0x122>
        if (rc != 0) {
            goto err;
        }
    }

    if (our_key_dist & BLE_SM_PAIR_KEY_DIST_SIGN) {
   1287e:	f016 0f04 	tst.w	r6, #4
   12882:	f040 80e3 	bne.w	12a4c <ble_sm_key_exch_exec+0x1fc>
        if (rc != 0) {
            goto err;
        }
    }

    if (proc->flags & BLE_SM_PROC_F_INITIATOR || proc->rx_key_flags == 0) {
   12886:	7a23      	ldrb	r3, [r4, #8]
   12888:	f013 0f01 	tst.w	r3, #1
   1288c:	d103      	bne.n	12896 <ble_sm_key_exch_exec+0x46>
   1288e:	7ba3      	ldrb	r3, [r4, #14]
   12890:	2b00      	cmp	r3, #0
   12892:	f040 810f 	bne.w	12ab4 <ble_sm_key_exch_exec+0x264>
        /* The procedure is now complete. */
        ble_sm_key_exch_success(proc, res);
   12896:	4629      	mov	r1, r5
   12898:	4620      	mov	r0, r4
   1289a:	f7ff ffc0 	bl	1281e <ble_sm_key_exch_success>
   1289e:	e109      	b.n	12ab4 <ble_sm_key_exch_exec+0x264>
        our_key_dist = resp_key_dist;
   128a0:	f89d 600a 	ldrb.w	r6, [sp, #10]
   128a4:	e7e5      	b.n	12872 <ble_sm_key_exch_exec+0x22>
        enc_info = ble_sm_cmd_get(BLE_SM_OP_ENC_INFO, sizeof(*enc_info), &txom);
   128a6:	aa01      	add	r2, sp, #4
   128a8:	2110      	movs	r1, #16
   128aa:	2006      	movs	r0, #6
   128ac:	f001 fa2a 	bl	13d04 <ble_sm_cmd_get>
        if (!enc_info) {
   128b0:	4601      	mov	r1, r0
   128b2:	2800      	cmp	r0, #0
   128b4:	f000 80f6 	beq.w	12aa4 <ble_sm_key_exch_exec+0x254>
        rc = ble_sm_gen_ltk(proc, enc_info->ltk);
   128b8:	4680      	mov	r8, r0
   128ba:	4620      	mov	r0, r4
   128bc:	f7ff febc 	bl	12638 <ble_sm_gen_ltk>
        if (rc != 0) {
   128c0:	4607      	mov	r7, r0
   128c2:	b118      	cbz	r0, 128cc <ble_sm_key_exch_exec+0x7c>
            os_mbuf_free_chain(txom);
   128c4:	9801      	ldr	r0, [sp, #4]
   128c6:	f7f7 fc8b 	bl	a1e0 <os_mbuf_free_chain>
            goto err;
   128ca:	e0ec      	b.n	12aa6 <ble_sm_key_exch_exec+0x256>
        memcpy(proc->our_keys.ltk, enc_info->ltk, 16);
   128cc:	f8d8 7000 	ldr.w	r7, [r8]
   128d0:	f8d8 0004 	ldr.w	r0, [r8, #4]
   128d4:	f8d8 1008 	ldr.w	r1, [r8, #8]
   128d8:	f8d8 200c 	ldr.w	r2, [r8, #12]
   128dc:	f8c4 7082 	str.w	r7, [r4, #130]	; 0x82
   128e0:	f8c4 0086 	str.w	r0, [r4, #134]	; 0x86
   128e4:	f8c4 108a 	str.w	r1, [r4, #138]	; 0x8a
   128e8:	f8c4 208e 	str.w	r2, [r4, #142]	; 0x8e
        proc->our_keys.key_size = proc->key_size;
   128ec:	7be3      	ldrb	r3, [r4, #15]
   128ee:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        proc->our_keys.ltk_valid = 1;
   128f2:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   128f6:	f043 0301 	orr.w	r3, r3, #1
   128fa:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   128fe:	9901      	ldr	r1, [sp, #4]
   12900:	8960      	ldrh	r0, [r4, #10]
   12902:	f001 fa19 	bl	13d38 <ble_sm_tx>
        if (rc != 0) {
   12906:	4607      	mov	r7, r0
   12908:	2800      	cmp	r0, #0
   1290a:	f040 80cc 	bne.w	12aa6 <ble_sm_key_exch_exec+0x256>
        master_id = ble_sm_cmd_get(BLE_SM_OP_MASTER_ID, sizeof(*master_id),
   1290e:	aa01      	add	r2, sp, #4
   12910:	210a      	movs	r1, #10
   12912:	2007      	movs	r0, #7
   12914:	f001 f9f6 	bl	13d04 <ble_sm_cmd_get>
        if (!master_id) {
   12918:	4680      	mov	r8, r0
   1291a:	2800      	cmp	r0, #0
   1291c:	f000 80cd 	beq.w	12aba <ble_sm_key_exch_exec+0x26a>
        rc = ble_sm_gen_ediv(master_id);
   12920:	f7ff fe16 	bl	12550 <ble_sm_gen_ediv>
        if (rc != 0) {
   12924:	4607      	mov	r7, r0
   12926:	b118      	cbz	r0, 12930 <ble_sm_key_exch_exec+0xe0>
            os_mbuf_free_chain(txom);
   12928:	9801      	ldr	r0, [sp, #4]
   1292a:	f7f7 fc59 	bl	a1e0 <os_mbuf_free_chain>
            goto err;
   1292e:	e0ba      	b.n	12aa6 <ble_sm_key_exch_exec+0x256>
        rc = ble_sm_gen_master_id_rand(master_id);
   12930:	4640      	mov	r0, r8
   12932:	f7ff fe12 	bl	1255a <ble_sm_gen_master_id_rand>
        if (rc != 0) {
   12936:	4607      	mov	r7, r0
   12938:	b118      	cbz	r0, 12942 <ble_sm_key_exch_exec+0xf2>
            os_mbuf_free_chain(txom);
   1293a:	9801      	ldr	r0, [sp, #4]
   1293c:	f7f7 fc50 	bl	a1e0 <os_mbuf_free_chain>
            goto err;
   12940:	e0b1      	b.n	12aa6 <ble_sm_key_exch_exec+0x256>
        proc->our_keys.ediv_rand_valid = 1;
   12942:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   12946:	f043 0302 	orr.w	r3, r3, #2
   1294a:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        proc->our_keys.rand_val = master_id->rand_val;
   1294e:	f8d8 2002 	ldr.w	r2, [r8, #2]
   12952:	f8d8 3006 	ldr.w	r3, [r8, #6]
   12956:	67a2      	str	r2, [r4, #120]	; 0x78
   12958:	67e3      	str	r3, [r4, #124]	; 0x7c
        proc->our_keys.ediv = master_id->ediv;
   1295a:	f8b8 3000 	ldrh.w	r3, [r8]
   1295e:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        rc = ble_sm_tx(proc->conn_handle, txom);
   12962:	9901      	ldr	r1, [sp, #4]
   12964:	8960      	ldrh	r0, [r4, #10]
   12966:	f001 f9e7 	bl	13d38 <ble_sm_tx>
        if (rc != 0) {
   1296a:	4607      	mov	r7, r0
   1296c:	2800      	cmp	r0, #0
   1296e:	d083      	beq.n	12878 <ble_sm_key_exch_exec+0x28>
    }

    return;

err:
   12970:	e099      	b.n	12aa6 <ble_sm_key_exch_exec+0x256>
        id_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_INFO, sizeof(*id_info),
   12972:	aa01      	add	r2, sp, #4
   12974:	2110      	movs	r1, #16
   12976:	2008      	movs	r0, #8
   12978:	f001 f9c4 	bl	13d04 <ble_sm_cmd_get>
        if (!id_info) {
   1297c:	4680      	mov	r8, r0
   1297e:	2800      	cmp	r0, #0
   12980:	f000 809d 	beq.w	12abe <ble_sm_key_exch_exec+0x26e>
        rc = ble_hs_pvcy_our_irk(&irk);
   12984:	4668      	mov	r0, sp
   12986:	f7fe ff17 	bl	117b8 <ble_hs_pvcy_our_irk>
        if (rc != 0) {
   1298a:	4607      	mov	r7, r0
   1298c:	b118      	cbz	r0, 12996 <ble_sm_key_exch_exec+0x146>
            os_mbuf_free_chain(txom);
   1298e:	9801      	ldr	r0, [sp, #4]
   12990:	f7f7 fc26 	bl	a1e0 <os_mbuf_free_chain>
            goto err;
   12994:	e087      	b.n	12aa6 <ble_sm_key_exch_exec+0x256>
        memcpy(id_info->irk, irk, 16);
   12996:	9b00      	ldr	r3, [sp, #0]
   12998:	6818      	ldr	r0, [r3, #0]
   1299a:	6859      	ldr	r1, [r3, #4]
   1299c:	689a      	ldr	r2, [r3, #8]
   1299e:	68db      	ldr	r3, [r3, #12]
   129a0:	f8c8 0000 	str.w	r0, [r8]
   129a4:	f8c8 1004 	str.w	r1, [r8, #4]
   129a8:	f8c8 2008 	str.w	r2, [r8, #8]
   129ac:	f8c8 300c 	str.w	r3, [r8, #12]
        proc->our_keys.irk_valid = 1;
   129b0:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   129b4:	f043 0304 	orr.w	r3, r3, #4
   129b8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        rc = ble_sm_tx(proc->conn_handle, txom);
   129bc:	9901      	ldr	r1, [sp, #4]
   129be:	8960      	ldrh	r0, [r4, #10]
   129c0:	f001 f9ba 	bl	13d38 <ble_sm_tx>
        if (rc != 0) {
   129c4:	4607      	mov	r7, r0
   129c6:	2800      	cmp	r0, #0
   129c8:	d16d      	bne.n	12aa6 <ble_sm_key_exch_exec+0x256>
        addr_info = ble_sm_cmd_get(BLE_SM_OP_IDENTITY_ADDR_INFO,
   129ca:	aa01      	add	r2, sp, #4
   129cc:	2107      	movs	r1, #7
   129ce:	2009      	movs	r0, #9
   129d0:	f001 f998 	bl	13d04 <ble_sm_cmd_get>
        if (!addr_info) {
   129d4:	4607      	mov	r7, r0
   129d6:	2800      	cmp	r0, #0
   129d8:	d073      	beq.n	12ac2 <ble_sm_key_exch_exec+0x272>
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   129da:	8960      	ldrh	r0, [r4, #10]
   129dc:	f7fd fe84 	bl	106e8 <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   129e0:	a903      	add	r1, sp, #12
   129e2:	f7fd fea1 	bl	10728 <ble_hs_conn_addrs>
        addr_info->addr_type = addrs.our_id_addr.type;
   129e6:	f89d 200c 	ldrb.w	r2, [sp, #12]
   129ea:	463b      	mov	r3, r7
   129ec:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(addr_info->bd_addr, addrs.our_id_addr.val, 6);
   129f0:	aa0a      	add	r2, sp, #40	; 0x28
   129f2:	f852 1d1b 	ldr.w	r1, [r2, #-27]!
   129f6:	f8c7 1001 	str.w	r1, [r7, #1]
   129fa:	8892      	ldrh	r2, [r2, #4]
   129fc:	809a      	strh	r2, [r3, #4]
        proc->our_keys.addr_valid = 1;
   129fe:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
   12a02:	f042 0210 	orr.w	r2, r2, #16
   12a06:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
        memcpy(proc->our_keys.irk, irk, 16);
   12a0a:	9900      	ldr	r1, [sp, #0]
   12a0c:	f8d1 e000 	ldr.w	lr, [r1]
   12a10:	f8d1 c004 	ldr.w	ip, [r1, #4]
   12a14:	6888      	ldr	r0, [r1, #8]
   12a16:	68c9      	ldr	r1, [r1, #12]
   12a18:	f8c4 e092 	str.w	lr, [r4, #146]	; 0x92
   12a1c:	f8c4 c096 	str.w	ip, [r4, #150]	; 0x96
   12a20:	f8c4 009a 	str.w	r0, [r4, #154]	; 0x9a
   12a24:	f8c4 109e 	str.w	r1, [r4, #158]	; 0x9e
        proc->our_keys.addr_type = addr_info->addr_type;
   12a28:	783a      	ldrb	r2, [r7, #0]
   12a2a:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
        memcpy(proc->our_keys.addr, addr_info->bd_addr, 6);
   12a2e:	681a      	ldr	r2, [r3, #0]
   12a30:	f8c4 20b2 	str.w	r2, [r4, #178]	; 0xb2
   12a34:	889b      	ldrh	r3, [r3, #4]
   12a36:	f8a4 30b6 	strh.w	r3, [r4, #182]	; 0xb6
        rc = ble_sm_tx(proc->conn_handle, txom);
   12a3a:	9901      	ldr	r1, [sp, #4]
   12a3c:	8960      	ldrh	r0, [r4, #10]
   12a3e:	f001 f97b 	bl	13d38 <ble_sm_tx>
        if (rc != 0) {
   12a42:	4607      	mov	r7, r0
   12a44:	2800      	cmp	r0, #0
   12a46:	f43f af1a 	beq.w	1287e <ble_sm_key_exch_exec+0x2e>
err:
   12a4a:	e02c      	b.n	12aa6 <ble_sm_key_exch_exec+0x256>
        sign_info = ble_sm_cmd_get(BLE_SM_OP_SIGN_INFO, sizeof(*sign_info),
   12a4c:	aa01      	add	r2, sp, #4
   12a4e:	2110      	movs	r1, #16
   12a50:	200a      	movs	r0, #10
   12a52:	f001 f957 	bl	13d04 <ble_sm_cmd_get>
        if (!sign_info) {
   12a56:	4601      	mov	r1, r0
   12a58:	b3a8      	cbz	r0, 12ac6 <ble_sm_key_exch_exec+0x276>
        rc = ble_sm_gen_csrk(proc, sign_info->sig_key);
   12a5a:	4606      	mov	r6, r0
   12a5c:	4620      	mov	r0, r4
   12a5e:	f7ff fd82 	bl	12566 <ble_sm_gen_csrk>
        if (rc != 0) {
   12a62:	4607      	mov	r7, r0
   12a64:	b118      	cbz	r0, 12a6e <ble_sm_key_exch_exec+0x21e>
            os_mbuf_free_chain(txom);
   12a66:	9801      	ldr	r0, [sp, #4]
   12a68:	f7f7 fbba 	bl	a1e0 <os_mbuf_free_chain>
            goto err;
   12a6c:	e01b      	b.n	12aa6 <ble_sm_key_exch_exec+0x256>
        proc->our_keys.csrk_valid = 1;
   12a6e:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
   12a72:	f043 0308 	orr.w	r3, r3, #8
   12a76:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        memcpy(proc->our_keys.csrk, sign_info->sig_key, 16);
   12a7a:	6837      	ldr	r7, [r6, #0]
   12a7c:	6870      	ldr	r0, [r6, #4]
   12a7e:	68b1      	ldr	r1, [r6, #8]
   12a80:	68f2      	ldr	r2, [r6, #12]
   12a82:	f8c4 70a2 	str.w	r7, [r4, #162]	; 0xa2
   12a86:	f8c4 00a6 	str.w	r0, [r4, #166]	; 0xa6
   12a8a:	f8c4 10aa 	str.w	r1, [r4, #170]	; 0xaa
   12a8e:	f8c4 20ae 	str.w	r2, [r4, #174]	; 0xae
        rc = ble_sm_tx(proc->conn_handle, txom);
   12a92:	9901      	ldr	r1, [sp, #4]
   12a94:	8960      	ldrh	r0, [r4, #10]
   12a96:	f001 f94f 	bl	13d38 <ble_sm_tx>
        if (rc != 0) {
   12a9a:	4607      	mov	r7, r0
   12a9c:	2800      	cmp	r0, #0
   12a9e:	f43f aef2 	beq.w	12886 <ble_sm_key_exch_exec+0x36>
err:
   12aa2:	e000      	b.n	12aa6 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   12aa4:	2706      	movs	r7, #6
    res->app_status = rc;
   12aa6:	602f      	str	r7, [r5, #0]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   12aa8:	2308      	movs	r3, #8
   12aaa:	712b      	strb	r3, [r5, #4]
    res->enc_cb = 1;
   12aac:	7d2b      	ldrb	r3, [r5, #20]
   12aae:	f043 0302 	orr.w	r3, r3, #2
   12ab2:	752b      	strb	r3, [r5, #20]
}
   12ab4:	b00a      	add	sp, #40	; 0x28
   12ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            rc = BLE_HS_ENOMEM;
   12aba:	2706      	movs	r7, #6
   12abc:	e7f3      	b.n	12aa6 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   12abe:	2706      	movs	r7, #6
   12ac0:	e7f1      	b.n	12aa6 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   12ac2:	2706      	movs	r7, #6
   12ac4:	e7ef      	b.n	12aa6 <ble_sm_key_exch_exec+0x256>
            rc = BLE_HS_ENOMEM;
   12ac6:	2706      	movs	r7, #6
   12ac8:	e7ed      	b.n	12aa6 <ble_sm_key_exch_exec+0x256>

00012aca <ble_sm_key_rxed>:

static void
ble_sm_key_rxed(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   12aca:	b508      	push	{r3, lr}
    BLE_HS_LOG(DEBUG, "rx_key_flags=0x%02x\n", proc->rx_key_flags);

    if (proc->rx_key_flags == 0) {
   12acc:	7b83      	ldrb	r3, [r0, #14]
   12ace:	b93b      	cbnz	r3, 12ae0 <ble_sm_key_rxed+0x16>
        /* The peer is done sending keys.  If we are the initiator, we need to
         * send ours.  If we are the responder, the procedure is complete.
         */
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   12ad0:	7a03      	ldrb	r3, [r0, #8]
   12ad2:	f013 0f01 	tst.w	r3, #1
   12ad6:	d004      	beq.n	12ae2 <ble_sm_key_rxed+0x18>
            res->execute = 1;
   12ad8:	7d0b      	ldrb	r3, [r1, #20]
   12ada:	f043 0301 	orr.w	r3, r3, #1
   12ade:	750b      	strb	r3, [r1, #20]
        } else {
            ble_sm_key_exch_success(proc, res);
        }
    }
}
   12ae0:	bd08      	pop	{r3, pc}
            ble_sm_key_exch_success(proc, res);
   12ae2:	f7ff fe9c 	bl	1281e <ble_sm_key_exch_success>
}
   12ae6:	e7fb      	b.n	12ae0 <ble_sm_key_rxed+0x16>

00012ae8 <ble_sm_start_encrypt_tx>:
{
   12ae8:	b510      	push	{r4, lr}
   12aea:	b08a      	sub	sp, #40	; 0x28
    cmd.conn_handle = htole16(params->connection_handle);
   12aec:	8803      	ldrh	r3, [r0, #0]
   12aee:	f8ad 300c 	strh.w	r3, [sp, #12]
    cmd.div = htole16(params->encrypted_diversifier);
   12af2:	8843      	ldrh	r3, [r0, #2]
   12af4:	f8ad 3016 	strh.w	r3, [sp, #22]
    cmd.rand = htole64(params->random_number);
   12af8:	6882      	ldr	r2, [r0, #8]
   12afa:	68c3      	ldr	r3, [r0, #12]
   12afc:	f8cd 200e 	str.w	r2, [sp, #14]
   12b00:	f8cd 3012 	str.w	r3, [sp, #18]
    memcpy(cmd.ltk, params->long_term_key, sizeof(cmd.ltk));
   12b04:	ac06      	add	r4, sp, #24
   12b06:	4603      	mov	r3, r0
   12b08:	f853 0f10 	ldr.w	r0, [r3, #16]!
   12b0c:	6859      	ldr	r1, [r3, #4]
   12b0e:	689a      	ldr	r2, [r3, #8]
   12b10:	68db      	ldr	r3, [r3, #12]
   12b12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    return ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   12b14:	2300      	movs	r3, #0
   12b16:	9300      	str	r3, [sp, #0]
   12b18:	221c      	movs	r2, #28
   12b1a:	a903      	add	r1, sp, #12
   12b1c:	f242 0019 	movw	r0, #8217	; 0x2019
   12b20:	f7fe f816 	bl	10b50 <ble_hs_hci_cmd_tx>
}
   12b24:	b00a      	add	sp, #40	; 0x28
   12b26:	bd10      	pop	{r4, pc}

00012b28 <ble_sm_enc_restore_exec>:
{
   12b28:	b510      	push	{r4, lr}
   12b2a:	460c      	mov	r4, r1
    res->app_status = ble_sm_start_encrypt_tx(cmd);
   12b2c:	4610      	mov	r0, r2
   12b2e:	f7ff ffdb 	bl	12ae8 <ble_sm_start_encrypt_tx>
   12b32:	6020      	str	r0, [r4, #0]
}
   12b34:	bd10      	pop	{r4, pc}

00012b36 <ble_sm_enc_start_exec>:
{
   12b36:	b530      	push	{r4, r5, lr}
   12b38:	b089      	sub	sp, #36	; 0x24
   12b3a:	460d      	mov	r5, r1
    cmd.connection_handle = proc->conn_handle;
   12b3c:	8943      	ldrh	r3, [r0, #10]
   12b3e:	f8ad 3000 	strh.w	r3, [sp]
    cmd.encrypted_diversifier = 0;
   12b42:	2300      	movs	r3, #0
   12b44:	f8ad 3002 	strh.w	r3, [sp, #2]
    cmd.random_number = 0;
   12b48:	2200      	movs	r2, #0
   12b4a:	2300      	movs	r3, #0
   12b4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    memcpy(cmd.long_term_key, proc->ltk, sizeof cmd.long_term_key);
   12b50:	ac04      	add	r4, sp, #16
   12b52:	4603      	mov	r3, r0
   12b54:	f853 0f5e 	ldr.w	r0, [r3, #94]!
   12b58:	6859      	ldr	r1, [r3, #4]
   12b5a:	689a      	ldr	r2, [r3, #8]
   12b5c:	68db      	ldr	r3, [r3, #12]
   12b5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    rc = ble_sm_start_encrypt_tx(&cmd);
   12b60:	4668      	mov	r0, sp
   12b62:	f7ff ffc1 	bl	12ae8 <ble_sm_start_encrypt_tx>
    if (rc != 0) {
   12b66:	b130      	cbz	r0, 12b76 <ble_sm_enc_start_exec+0x40>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   12b68:	2208      	movs	r2, #8
   12b6a:	712a      	strb	r2, [r5, #4]
        res->app_status = rc;
   12b6c:	6028      	str	r0, [r5, #0]
        res->enc_cb = 1;
   12b6e:	7d2b      	ldrb	r3, [r5, #20]
   12b70:	f043 0302 	orr.w	r3, r3, #2
   12b74:	752b      	strb	r3, [r5, #20]
}
   12b76:	b009      	add	sp, #36	; 0x24
   12b78:	bd30      	pop	{r4, r5, pc}

00012b7a <ble_sm_ltk_req_reply_tx>:
{
   12b7a:	b530      	push	{r4, r5, lr}
   12b7c:	b089      	sub	sp, #36	; 0x24
   12b7e:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn_handle);
   12b80:	f8ad 000c 	strh.w	r0, [sp, #12]
    memcpy(cmd.ltk, ltk, 16);
   12b84:	680d      	ldr	r5, [r1, #0]
   12b86:	6848      	ldr	r0, [r1, #4]
   12b88:	688a      	ldr	r2, [r1, #8]
   12b8a:	68cb      	ldr	r3, [r1, #12]
   12b8c:	f8cd 500e 	str.w	r5, [sp, #14]
   12b90:	f8cd 0012 	str.w	r0, [sp, #18]
   12b94:	f8cd 2016 	str.w	r2, [sp, #22]
   12b98:	f8cd 301a 	str.w	r3, [sp, #26]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   12b9c:	2302      	movs	r3, #2
   12b9e:	9300      	str	r3, [sp, #0]
   12ba0:	ab02      	add	r3, sp, #8
   12ba2:	2212      	movs	r2, #18
   12ba4:	a903      	add	r1, sp, #12
   12ba6:	f242 001a 	movw	r0, #8218	; 0x201a
   12baa:	f7fd ffd1 	bl	10b50 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   12bae:	4603      	mov	r3, r0
   12bb0:	b918      	cbnz	r0, 12bba <ble_sm_ltk_req_reply_tx+0x40>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   12bb2:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   12bb6:	42a2      	cmp	r2, r4
   12bb8:	d102      	bne.n	12bc0 <ble_sm_ltk_req_reply_tx+0x46>
}
   12bba:	4618      	mov	r0, r3
   12bbc:	b009      	add	sp, #36	; 0x24
   12bbe:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_ECONTROLLER;
   12bc0:	230c      	movs	r3, #12
   12bc2:	e7fa      	b.n	12bba <ble_sm_ltk_req_reply_tx+0x40>

00012bc4 <ble_sm_ltk_start_exec>:
{
   12bc4:	b538      	push	{r3, r4, r5, lr}
   12bc6:	4604      	mov	r4, r0
   12bc8:	460d      	mov	r5, r1
    res->app_status = ble_sm_ltk_req_reply_tx(proc->conn_handle, proc->ltk);
   12bca:	f100 015e 	add.w	r1, r0, #94	; 0x5e
   12bce:	8940      	ldrh	r0, [r0, #10]
   12bd0:	f7ff ffd3 	bl	12b7a <ble_sm_ltk_req_reply_tx>
   12bd4:	6028      	str	r0, [r5, #0]
    if (res->app_status == 0) {
   12bd6:	b120      	cbz	r0, 12be2 <ble_sm_ltk_start_exec+0x1e>
        res->enc_cb = 1;
   12bd8:	7d2b      	ldrb	r3, [r5, #20]
   12bda:	f043 0302 	orr.w	r3, r3, #2
   12bde:	752b      	strb	r3, [r5, #20]
}
   12be0:	bd38      	pop	{r3, r4, r5, pc}
        proc->state = BLE_SM_PROC_STATE_ENC_START;
   12be2:	2305      	movs	r3, #5
   12be4:	7363      	strb	r3, [r4, #13]
   12be6:	e7fb      	b.n	12be0 <ble_sm_ltk_start_exec+0x1c>

00012be8 <ble_sm_ltk_req_neg_reply_tx>:
{
   12be8:	b510      	push	{r4, lr}
   12bea:	b084      	sub	sp, #16
   12bec:	4604      	mov	r4, r0
    cmd.conn_handle = htole16(conn_handle);
   12bee:	f8ad 000c 	strh.w	r0, [sp, #12]
    rc = ble_hs_hci_cmd_tx(BLE_HCI_OP(BLE_HCI_OGF_LE,
   12bf2:	2202      	movs	r2, #2
   12bf4:	9200      	str	r2, [sp, #0]
   12bf6:	ab02      	add	r3, sp, #8
   12bf8:	a903      	add	r1, sp, #12
   12bfa:	f242 001b 	movw	r0, #8219	; 0x201b
   12bfe:	f7fd ffa7 	bl	10b50 <ble_hs_hci_cmd_tx>
    if (rc != 0) {
   12c02:	4603      	mov	r3, r0
   12c04:	b918      	cbnz	r0, 12c0e <ble_sm_ltk_req_neg_reply_tx+0x26>
    if (le16toh(rsp.conn_handle) != conn_handle) {
   12c06:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   12c0a:	42a2      	cmp	r2, r4
   12c0c:	d102      	bne.n	12c14 <ble_sm_ltk_req_neg_reply_tx+0x2c>
}
   12c0e:	4618      	mov	r0, r3
   12c10:	b004      	add	sp, #16
   12c12:	bd10      	pop	{r4, pc}
        return BLE_HS_ECONTROLLER;
   12c14:	230c      	movs	r3, #12
   12c16:	e7fa      	b.n	12c0e <ble_sm_ltk_req_neg_reply_tx+0x26>

00012c18 <ble_sm_ltk_restore_exec>:
{
   12c18:	b570      	push	{r4, r5, r6, lr}
   12c1a:	4605      	mov	r5, r0
   12c1c:	460c      	mov	r4, r1
    if (value_sec != NULL) {
   12c1e:	b1e2      	cbz	r2, 12c5a <ble_sm_ltk_restore_exec+0x42>
   12c20:	4616      	mov	r6, r2
        res->app_status = ble_sm_ltk_req_reply_tx(
   12c22:	f102 0118 	add.w	r1, r2, #24
   12c26:	8940      	ldrh	r0, [r0, #10]
   12c28:	f7ff ffa7 	bl	12b7a <ble_sm_ltk_req_reply_tx>
   12c2c:	6020      	str	r0, [r4, #0]
        if (res->app_status == 0) {
   12c2e:	b958      	cbnz	r0, 12c48 <ble_sm_ltk_restore_exec+0x30>
            proc->key_size = value_sec->key_size;
   12c30:	79f3      	ldrb	r3, [r6, #7]
   12c32:	73eb      	strb	r3, [r5, #15]
            if (value_sec->authenticated) {
   12c34:	f896 304a 	ldrb.w	r3, [r6, #74]	; 0x4a
   12c38:	f013 0f02 	tst.w	r3, #2
   12c3c:	d008      	beq.n	12c50 <ble_sm_ltk_restore_exec+0x38>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   12c3e:	7a2b      	ldrb	r3, [r5, #8]
   12c40:	f043 0308 	orr.w	r3, r3, #8
   12c44:	722b      	strb	r3, [r5, #8]
   12c46:	e003      	b.n	12c50 <ble_sm_ltk_restore_exec+0x38>
            res->enc_cb = 1;
   12c48:	7d23      	ldrb	r3, [r4, #20]
   12c4a:	f043 0302 	orr.w	r3, r3, #2
   12c4e:	7523      	strb	r3, [r4, #20]
    if (res->app_status == 0) {
   12c50:	6823      	ldr	r3, [r4, #0]
   12c52:	b90b      	cbnz	r3, 12c58 <ble_sm_ltk_restore_exec+0x40>
        proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   12c54:	2306      	movs	r3, #6
   12c56:	736b      	strb	r3, [r5, #13]
}
   12c58:	bd70      	pop	{r4, r5, r6, pc}
        ble_sm_ltk_req_neg_reply_tx(proc->conn_handle);
   12c5a:	8940      	ldrh	r0, [r0, #10]
   12c5c:	f7ff ffc4 	bl	12be8 <ble_sm_ltk_req_neg_reply_tx>
        res->app_status = BLE_HS_ENOENT;
   12c60:	2305      	movs	r3, #5
   12c62:	6023      	str	r3, [r4, #0]
   12c64:	e7f4      	b.n	12c50 <ble_sm_ltk_restore_exec+0x38>

00012c66 <ble_sm_random_exec>:
{
   12c66:	b508      	push	{r3, lr}
    if (proc->flags & BLE_SM_PROC_F_SC) {
   12c68:	7a03      	ldrb	r3, [r0, #8]
   12c6a:	f013 0f10 	tst.w	r3, #16
   12c6e:	d000      	beq.n	12c72 <ble_sm_random_exec+0xc>
}
   12c70:	bd08      	pop	{r3, pc}
        ble_sm_lgcy_random_exec(proc, res);
   12c72:	f001 f935 	bl	13ee0 <ble_sm_lgcy_random_exec>
}
   12c76:	e7fb      	b.n	12c70 <ble_sm_random_exec+0xa>

00012c78 <ble_sm_confirm_exec>:
{
   12c78:	b508      	push	{r3, lr}
    if (!(proc->flags & BLE_SM_PROC_F_SC)) {
   12c7a:	7a03      	ldrb	r3, [r0, #8]
   12c7c:	f013 0f10 	tst.w	r3, #16
   12c80:	d000      	beq.n	12c84 <ble_sm_confirm_exec+0xc>
}
   12c82:	bd08      	pop	{r3, pc}
        ble_sm_lgcy_confirm_exec(proc, res);
   12c84:	f001 f8de 	bl	13e44 <ble_sm_lgcy_confirm_exec>
}
   12c88:	e7fb      	b.n	12c82 <ble_sm_confirm_exec+0xa>

00012c8a <ble_sm_proc_set_timer>:
{
   12c8a:	b510      	push	{r4, lr}
   12c8c:	4604      	mov	r4, r0
   12c8e:	f7f8 fba1 	bl	b3d4 <os_time_get>
    proc->exp_os_ticks = ble_npl_time_get() +
   12c92:	f500 6070 	add.w	r0, r0, #3840	; 0xf00
   12c96:	6060      	str	r0, [r4, #4]
    ble_hs_timer_resched();
   12c98:	f7fc ffe0 	bl	fc5c <ble_hs_timer_resched>
}
   12c9c:	bd10      	pop	{r4, pc}
	...

00012ca0 <ble_sm_extract_expired>:
{
   12ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12ca2:	4605      	mov	r5, r0
   12ca4:	f7f8 fb96 	bl	b3d4 <os_time_get>
   12ca8:	4607      	mov	r7, r0
    STAILQ_INIT(dst_list);
   12caa:	2400      	movs	r4, #0
   12cac:	602c      	str	r4, [r5, #0]
   12cae:	606d      	str	r5, [r5, #4]
    ble_hs_lock();
   12cb0:	f7fc fef8 	bl	faa4 <ble_hs_lock>
    proc = STAILQ_FIRST(&ble_sm_procs);
   12cb4:	4b15      	ldr	r3, [pc, #84]	; (12d0c <ble_sm_extract_expired+0x6c>)
   12cb6:	681b      	ldr	r3, [r3, #0]
    next_exp_in = BLE_HS_FOREVER;
   12cb8:	f06f 4600 	mvn.w	r6, #2147483648	; 0x80000000
    while (proc != NULL) {
   12cbc:	e00a      	b.n	12cd4 <ble_sm_extract_expired+0x34>
            if (prev == NULL) {
   12cbe:	b19c      	cbz	r4, 12ce8 <ble_sm_extract_expired+0x48>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   12cc0:	6822      	ldr	r2, [r4, #0]
   12cc2:	6812      	ldr	r2, [r2, #0]
   12cc4:	6022      	str	r2, [r4, #0]
   12cc6:	b1c2      	cbz	r2, 12cfa <ble_sm_extract_expired+0x5a>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   12cc8:	682a      	ldr	r2, [r5, #0]
   12cca:	601a      	str	r2, [r3, #0]
   12ccc:	b1c2      	cbz	r2, 12d00 <ble_sm_extract_expired+0x60>
   12cce:	602b      	str	r3, [r5, #0]
                next_exp_in = time_diff;
   12cd0:	461c      	mov	r4, r3
   12cd2:	4603      	mov	r3, r0
    while (proc != NULL) {
   12cd4:	b1b3      	cbz	r3, 12d04 <ble_sm_extract_expired+0x64>
        next = STAILQ_NEXT(proc, next);
   12cd6:	6818      	ldr	r0, [r3, #0]
        time_diff = proc->exp_os_ticks - now;
   12cd8:	685a      	ldr	r2, [r3, #4]
   12cda:	1bd2      	subs	r2, r2, r7
        if (time_diff <= 0) {
   12cdc:	2a00      	cmp	r2, #0
   12cde:	ddee      	ble.n	12cbe <ble_sm_extract_expired+0x1e>
            if (time_diff < next_exp_in) {
   12ce0:	4296      	cmp	r6, r2
   12ce2:	ddf5      	ble.n	12cd0 <ble_sm_extract_expired+0x30>
                next_exp_in = time_diff;
   12ce4:	4616      	mov	r6, r2
   12ce6:	e7f3      	b.n	12cd0 <ble_sm_extract_expired+0x30>
                STAILQ_REMOVE_HEAD(&ble_sm_procs, next);
   12ce8:	4908      	ldr	r1, [pc, #32]	; (12d0c <ble_sm_extract_expired+0x6c>)
   12cea:	680a      	ldr	r2, [r1, #0]
   12cec:	6812      	ldr	r2, [r2, #0]
   12cee:	600a      	str	r2, [r1, #0]
   12cf0:	2a00      	cmp	r2, #0
   12cf2:	d1e9      	bne.n	12cc8 <ble_sm_extract_expired+0x28>
   12cf4:	460a      	mov	r2, r1
   12cf6:	6051      	str	r1, [r2, #4]
   12cf8:	e7e6      	b.n	12cc8 <ble_sm_extract_expired+0x28>
                STAILQ_REMOVE_AFTER(&ble_sm_procs, prev, next);
   12cfa:	4a04      	ldr	r2, [pc, #16]	; (12d0c <ble_sm_extract_expired+0x6c>)
   12cfc:	6054      	str	r4, [r2, #4]
   12cfe:	e7e3      	b.n	12cc8 <ble_sm_extract_expired+0x28>
            STAILQ_INSERT_HEAD(dst_list, proc, next);
   12d00:	606b      	str	r3, [r5, #4]
   12d02:	e7e4      	b.n	12cce <ble_sm_extract_expired+0x2e>
    ble_hs_unlock();
   12d04:	f7fc fed2 	bl	faac <ble_hs_unlock>
}
   12d08:	4630      	mov	r0, r6
   12d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12d0c:	2000779c 	.word	0x2000779c

00012d10 <ble_sm_persist_keys>:
{
   12d10:	b5f0      	push	{r4, r5, r6, r7, lr}
   12d12:	b09b      	sub	sp, #108	; 0x6c
   12d14:	4604      	mov	r4, r0
    ble_hs_lock();
   12d16:	f7fc fec5 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find(proc->conn_handle);
   12d1a:	8960      	ldrh	r0, [r4, #10]
   12d1c:	f7fd fccc 	bl	106b8 <ble_hs_conn_find>
   12d20:	4605      	mov	r5, r0
    if (proc->peer_keys.addr_valid) {
   12d22:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
   12d26:	f013 0f10 	tst.w	r3, #16
   12d2a:	d052      	beq.n	12dd2 <ble_sm_persist_keys+0xc2>
        peer_addr.type = proc->peer_keys.addr_type;
   12d2c:	f894 60c8 	ldrb.w	r6, [r4, #200]	; 0xc8
   12d30:	f88d 6008 	strb.w	r6, [sp, #8]
        memcpy(peer_addr.val, proc->peer_keys.addr, sizeof peer_addr.val);
   12d34:	4623      	mov	r3, r4
   12d36:	f853 2ffa 	ldr.w	r2, [r3, #250]!
   12d3a:	f8cd 2009 	str.w	r2, [sp, #9]
   12d3e:	889b      	ldrh	r3, [r3, #4]
   12d40:	f8ad 300d 	strh.w	r3, [sp, #13]
        conn->bhc_peer_addr = peer_addr;
   12d44:	9802      	ldr	r0, [sp, #8]
   12d46:	f8c5 0007 	str.w	r0, [r5, #7]
   12d4a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   12d4e:	f89d 200e 	ldrb.w	r2, [sp, #14]
   12d52:	f8a5 100b 	strh.w	r1, [r5, #11]
   12d56:	736a      	strb	r2, [r5, #13]
        if (memcmp(BLE_ADDR_ANY->val, &conn->bhc_peer_rpa_addr.val, 6) != 0) {
   12d58:	2300      	movs	r3, #0
   12d5a:	9318      	str	r3, [sp, #96]	; 0x60
   12d5c:	f8cd 3063 	str.w	r3, [sp, #99]	; 0x63
   12d60:	2206      	movs	r2, #6
   12d62:	f105 0116 	add.w	r1, r5, #22
   12d66:	f10d 0061 	add.w	r0, sp, #97	; 0x61
   12d6a:	f7f8 fcfb 	bl	b764 <memcmp>
   12d6e:	b128      	cbz	r0, 12d7c <ble_sm_persist_keys+0x6c>
            switch (peer_addr.type) {
   12d70:	2e03      	cmp	r6, #3
   12d72:	d808      	bhi.n	12d86 <ble_sm_persist_keys+0x76>
   12d74:	e8df f006 	tbb	[pc, r6]
   12d78:	2a052a05 	.word	0x2a052a05
    ble_hs_unlock();
   12d7c:	f7fc fe96 	bl	faac <ble_hs_unlock>
   12d80:	e006      	b.n	12d90 <ble_sm_persist_keys+0x80>
                conn->bhc_peer_addr.type = BLE_ADDR_PUBLIC_ID;
   12d82:	2302      	movs	r3, #2
   12d84:	71eb      	strb	r3, [r5, #7]
    ble_hs_unlock();
   12d86:	f7fc fe91 	bl	faac <ble_hs_unlock>
        ble_gap_identity_event(proc->conn_handle);
   12d8a:	8960      	ldrh	r0, [r4, #10]
   12d8c:	f7fa fdc2 	bl	d914 <ble_gap_identity_event>
    authenticated = proc->flags & BLE_SM_PROC_F_AUTHENTICATED;
   12d90:	7a25      	ldrb	r5, [r4, #8]
   12d92:	f005 0708 	and.w	r7, r5, #8
    sc = proc->flags & BLE_SM_PROC_F_SC;
   12d96:	f005 0510 	and.w	r5, r5, #16
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->our_keys,
   12d9a:	ae04      	add	r6, sp, #16
   12d9c:	9600      	str	r6, [sp, #0]
   12d9e:	f104 0370 	add.w	r3, r4, #112	; 0x70
   12da2:	462a      	mov	r2, r5
   12da4:	4639      	mov	r1, r7
   12da6:	a802      	add	r0, sp, #8
   12da8:	f7ff fca2 	bl	126f0 <ble_sm_fill_store_value>
    ble_store_write_our_sec(&value_sec);
   12dac:	4630      	mov	r0, r6
   12dae:	f001 f992 	bl	140d6 <ble_store_write_our_sec>
    ble_sm_fill_store_value(&peer_addr, authenticated, sc, &proc->peer_keys,
   12db2:	9600      	str	r6, [sp, #0]
   12db4:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   12db8:	462a      	mov	r2, r5
   12dba:	4639      	mov	r1, r7
   12dbc:	a802      	add	r0, sp, #8
   12dbe:	f7ff fc97 	bl	126f0 <ble_sm_fill_store_value>
    ble_store_write_peer_sec(&value_sec);
   12dc2:	4630      	mov	r0, r6
   12dc4:	f001 f994 	bl	140f0 <ble_store_write_peer_sec>
}
   12dc8:	b01b      	add	sp, #108	; 0x6c
   12dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
                conn->bhc_peer_addr.type = BLE_ADDR_RANDOM_ID;
   12dcc:	2303      	movs	r3, #3
   12dce:	71eb      	strb	r3, [r5, #7]
                break;
   12dd0:	e7d9      	b.n	12d86 <ble_sm_persist_keys+0x76>
        peer_addr = conn->bhc_peer_addr;
   12dd2:	4603      	mov	r3, r0
   12dd4:	f853 0f07 	ldr.w	r0, [r3, #7]!
   12dd8:	9002      	str	r0, [sp, #8]
   12dda:	889a      	ldrh	r2, [r3, #4]
   12ddc:	799b      	ldrb	r3, [r3, #6]
   12dde:	f8ad 200c 	strh.w	r2, [sp, #12]
   12de2:	f88d 300e 	strb.w	r3, [sp, #14]
            ble_hs_misc_peer_addr_type_to_id(conn->bhc_peer_addr.type);
   12de6:	79e8      	ldrb	r0, [r5, #7]
   12de8:	f7fe fc38 	bl	1165c <ble_hs_misc_peer_addr_type_to_id>
        peer_addr.type =
   12dec:	f88d 0008 	strb.w	r0, [sp, #8]
    ble_hs_unlock();
   12df0:	f7fc fe5c 	bl	faac <ble_hs_unlock>
   12df4:	e7cc      	b.n	12d90 <ble_sm_persist_keys+0x80>
	...

00012df8 <ble_sm_proc_free>:
    if (proc != NULL) {
   12df8:	b128      	cbz	r0, 12e06 <ble_sm_proc_free+0xe>
{
   12dfa:	b508      	push	{r3, lr}
   12dfc:	4601      	mov	r1, r0
        rc = os_memblock_put(&ble_sm_proc_pool, proc);
   12dfe:	4802      	ldr	r0, [pc, #8]	; (12e08 <ble_sm_proc_free+0x10>)
   12e00:	f7f7 fe65 	bl	aace <os_memblock_put>
}
   12e04:	bd08      	pop	{r3, pc}
   12e06:	4770      	bx	lr
   12e08:	20007780 	.word	0x20007780

00012e0c <ble_sm_proc_alloc>:
{
   12e0c:	b510      	push	{r4, lr}
    proc = os_memblock_get(&ble_sm_proc_pool);
   12e0e:	4806      	ldr	r0, [pc, #24]	; (12e28 <ble_sm_proc_alloc+0x1c>)
   12e10:	f7f7 fe35 	bl	aa7e <os_memblock_get>
    if (proc != NULL) {
   12e14:	4604      	mov	r4, r0
   12e16:	b120      	cbz	r0, 12e22 <ble_sm_proc_alloc+0x16>
        memset(proc, 0, sizeof *proc);
   12e18:	f44f 7280 	mov.w	r2, #256	; 0x100
   12e1c:	2100      	movs	r1, #0
   12e1e:	f7f8 fcee 	bl	b7fe <memset>
}
   12e22:	4620      	mov	r0, r4
   12e24:	bd10      	pop	{r4, pc}
   12e26:	bf00      	nop
   12e28:	20007780 	.word	0x20007780

00012e2c <ble_sm_retrieve_ltk>:
{
   12e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12e2e:	b089      	sub	sp, #36	; 0x24
   12e30:	4605      	mov	r5, r0
   12e32:	4616      	mov	r6, r2
   12e34:	461f      	mov	r7, r3
   12e36:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    memset(&key_sec, 0, sizeof key_sec);
   12e38:	2220      	movs	r2, #32
   12e3a:	2100      	movs	r1, #0
   12e3c:	4668      	mov	r0, sp
   12e3e:	f7f8 fcde 	bl	b7fe <memset>
    key_sec.peer_addr.type = peer_addr_type;
   12e42:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12e46:	f88d 3000 	strb.w	r3, [sp]
    memcpy(key_sec.peer_addr.val, peer_addr, 6);
   12e4a:	6823      	ldr	r3, [r4, #0]
   12e4c:	f8cd 3001 	str.w	r3, [sp, #1]
   12e50:	88a3      	ldrh	r3, [r4, #4]
   12e52:	f8ad 3005 	strh.w	r3, [sp, #5]
    key_sec.ediv = ediv;
   12e56:	f8ad 5008 	strh.w	r5, [sp, #8]
    key_sec.rand_num = rand;
   12e5a:	e9cd 6704 	strd	r6, r7, [sp, #16]
    key_sec.ediv_rand_present = 1;
   12e5e:	2301      	movs	r3, #1
   12e60:	f88d 3018 	strb.w	r3, [sp, #24]
    rc = ble_store_read_our_sec(&key_sec, value_sec);
   12e64:	9910      	ldr	r1, [sp, #64]	; 0x40
   12e66:	4668      	mov	r0, sp
   12e68:	f001 f92e 	bl	140c8 <ble_store_read_our_sec>
}
   12e6c:	b009      	add	sp, #36	; 0x24
   12e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012e70 <ble_sm_fail_rx>:
 *****************************************************************************/

static void
ble_sm_fail_rx(uint16_t conn_handle, struct os_mbuf **om,
               struct ble_sm_result *res)
{
   12e70:	b538      	push	{r3, r4, r5, lr}
   12e72:	460d      	mov	r5, r1
   12e74:	4614      	mov	r4, r2
    struct ble_sm_pair_fail *cmd;

    res->enc_cb = 1;
   12e76:	7d13      	ldrb	r3, [r2, #20]
   12e78:	f043 0302 	orr.w	r3, r3, #2
   12e7c:	7513      	strb	r3, [r2, #20]

    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   12e7e:	2101      	movs	r1, #1
   12e80:	4628      	mov	r0, r5
   12e82:	f7fe fb96 	bl	115b2 <ble_hs_mbuf_pullup_base>
   12e86:	6020      	str	r0, [r4, #0]
    if (res->app_status == 0) {
   12e88:	b930      	cbnz	r0, 12e98 <ble_sm_fail_rx+0x28>
        cmd = (struct ble_sm_pair_fail *)(*om)->om_data;
   12e8a:	682b      	ldr	r3, [r5, #0]
   12e8c:	681b      	ldr	r3, [r3, #0]

        res->app_status = BLE_HS_SM_PEER_ERR(cmd->reason);
   12e8e:	781b      	ldrb	r3, [r3, #0]
   12e90:	b10b      	cbz	r3, 12e96 <ble_sm_fail_rx+0x26>
   12e92:	f503 60a0 	add.w	r0, r3, #1280	; 0x500
   12e96:	6020      	str	r0, [r4, #0]
    }
}
   12e98:	bd38      	pop	{r3, r4, r5, pc}

00012e9a <ble_sm_read_bond>:
{
   12e9a:	b510      	push	{r4, lr}
   12e9c:	b094      	sub	sp, #80	; 0x50
   12e9e:	460c      	mov	r4, r1
    rc = ble_gap_conn_find(conn_handle, &desc);
   12ea0:	a901      	add	r1, sp, #4
   12ea2:	f7fa f83d 	bl	cf20 <ble_gap_conn_find>
    if (rc != 0) {
   12ea6:	4603      	mov	r3, r0
   12ea8:	b110      	cbz	r0, 12eb0 <ble_sm_read_bond+0x16>
}
   12eaa:	4618      	mov	r0, r3
   12eac:	b014      	add	sp, #80	; 0x50
   12eae:	bd10      	pop	{r4, pc}
    memset(&key_sec, 0, sizeof key_sec);
   12eb0:	2300      	movs	r3, #0
   12eb2:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   12eb6:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   12eba:	f8cd 303e 	str.w	r3, [sp, #62]	; 0x3e
   12ebe:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
   12ec2:	f8cd 3046 	str.w	r3, [sp, #70]	; 0x46
   12ec6:	f8cd 304a 	str.w	r3, [sp, #74]	; 0x4a
   12eca:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
    key_sec.peer_addr = desc.peer_id_addr;
   12ece:	ab14      	add	r3, sp, #80	; 0x50
   12ed0:	f853 0d41 	ldr.w	r0, [r3, #-65]!
   12ed4:	900c      	str	r0, [sp, #48]	; 0x30
   12ed6:	889a      	ldrh	r2, [r3, #4]
   12ed8:	799b      	ldrb	r3, [r3, #6]
   12eda:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   12ede:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
    rc = ble_store_read_peer_sec(&key_sec, out_bond);
   12ee2:	4621      	mov	r1, r4
   12ee4:	a80c      	add	r0, sp, #48	; 0x30
   12ee6:	f001 f8fc 	bl	140e2 <ble_store_read_peer_sec>
   12eea:	4603      	mov	r3, r0
    return rc;
   12eec:	e7dd      	b.n	12eaa <ble_sm_read_bond+0x10>

00012eee <ble_sm_chk_repeat_pairing>:
{
   12eee:	b570      	push	{r4, r5, r6, lr}
   12ef0:	b096      	sub	sp, #88	; 0x58
   12ef2:	4604      	mov	r4, r0
   12ef4:	460d      	mov	r5, r1
   12ef6:	4616      	mov	r6, r2
        rc = ble_sm_read_bond(conn_handle, &bond);
   12ef8:	4669      	mov	r1, sp
   12efa:	4620      	mov	r0, r4
   12efc:	f7ff ffcd 	bl	12e9a <ble_sm_read_bond>
        switch (rc) {
   12f00:	4603      	mov	r3, r0
   12f02:	b128      	cbz	r0, 12f10 <ble_sm_chk_repeat_pairing+0x22>
   12f04:	2805      	cmp	r0, #5
   12f06:	d100      	bne.n	12f0a <ble_sm_chk_repeat_pairing+0x1c>
            return 0;
   12f08:	2300      	movs	r3, #0
}
   12f0a:	4618      	mov	r0, r3
   12f0c:	b016      	add	sp, #88	; 0x58
   12f0e:	bd70      	pop	{r4, r5, r6, pc}
        rp.conn_handle = conn_handle;
   12f10:	f8ad 4050 	strh.w	r4, [sp, #80]	; 0x50
        rp.cur_key_size = bond.key_size;
   12f14:	f89d 3007 	ldrb.w	r3, [sp, #7]
   12f18:	f88d 3052 	strb.w	r3, [sp, #82]	; 0x52
        rp.cur_authenticated = bond.authenticated;
   12f1c:	f89d 204a 	ldrb.w	r2, [sp, #74]	; 0x4a
   12f20:	f3c2 0140 	ubfx	r1, r2, #1, #1
   12f24:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
   12f28:	f361 0300 	bfi	r3, r1, #0, #1
        rp.cur_sc = bond.sc;
   12f2c:	f3c2 0280 	ubfx	r2, r2, #2, #1
   12f30:	f362 0341 	bfi	r3, r2, #1, #1
   12f34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
        rp.new_key_size = key_size;
   12f38:	f88d 6054 	strb.w	r6, [sp, #84]	; 0x54
        rp.new_authenticated = !!(proc_flags & BLE_SM_PROC_F_AUTHENTICATED);
   12f3c:	f3c5 02c0 	ubfx	r2, r5, #3, #1
   12f40:	f89d 3055 	ldrb.w	r3, [sp, #85]	; 0x55
   12f44:	f362 0300 	bfi	r3, r2, #0, #1
        rp.new_sc = !!(proc_flags & BLE_SM_PROC_F_SC);
   12f48:	f3c5 1200 	ubfx	r2, r5, #4, #1
   12f4c:	f362 0341 	bfi	r3, r2, #1, #1
        rp.new_bonding = !!(proc_flags & BLE_SM_PROC_F_BONDING);
   12f50:	f3c5 1240 	ubfx	r2, r5, #5, #1
   12f54:	f362 0382 	bfi	r3, r2, #2, #1
   12f58:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
        rc = ble_gap_repeat_pairing_event(&rp);
   12f5c:	a814      	add	r0, sp, #80	; 0x50
   12f5e:	f7fa fcec 	bl	d93a <ble_gap_repeat_pairing_event>
    } while (rc == BLE_GAP_REPEAT_PAIRING_RETRY);
   12f62:	2801      	cmp	r0, #1
   12f64:	d0c8      	beq.n	12ef8 <ble_sm_chk_repeat_pairing+0xa>
    return BLE_HS_EALREADY;
   12f66:	2302      	movs	r3, #2
   12f68:	e7cf      	b.n	12f0a <ble_sm_chk_repeat_pairing+0x1c>

00012f6a <ble_sm_gen_pair_rand>:
{
   12f6a:	b508      	push	{r3, lr}
    rc = ble_hs_hci_util_rand(pair_rand, 16);
   12f6c:	2110      	movs	r1, #16
   12f6e:	f7fe f990 	bl	11292 <ble_hs_hci_util_rand>
}
   12f72:	bd08      	pop	{r3, pc}

00012f74 <ble_sm_ia_ra>:
{
   12f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f78:	b088      	sub	sp, #32
   12f7a:	4606      	mov	r6, r0
   12f7c:	4688      	mov	r8, r1
   12f7e:	4615      	mov	r5, r2
   12f80:	461f      	mov	r7, r3
   12f82:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    conn = ble_hs_conn_find_assert(proc->conn_handle);
   12f84:	8940      	ldrh	r0, [r0, #10]
   12f86:	f7fd fbaf 	bl	106e8 <ble_hs_conn_find_assert>
    ble_hs_conn_addrs(conn, &addrs);
   12f8a:	a901      	add	r1, sp, #4
   12f8c:	f7fd fbcc 	bl	10728 <ble_hs_conn_addrs>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   12f90:	7a33      	ldrb	r3, [r6, #8]
   12f92:	f013 0f01 	tst.w	r3, #1
   12f96:	d115      	bne.n	12fc4 <ble_sm_ia_ra+0x50>
        *out_iat = addrs.peer_ota_addr.type;
   12f98:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12f9c:	f888 3000 	strb.w	r3, [r8]
        memcpy(out_ia, addrs.peer_ota_addr.val, 6);
   12fa0:	ab08      	add	r3, sp, #32
   12fa2:	f853 2d06 	ldr.w	r2, [r3, #-6]!
   12fa6:	602a      	str	r2, [r5, #0]
   12fa8:	889b      	ldrh	r3, [r3, #4]
   12faa:	80ab      	strh	r3, [r5, #4]
        *out_rat = addrs.our_ota_addr.type;
   12fac:	f89d 3012 	ldrb.w	r3, [sp, #18]
   12fb0:	703b      	strb	r3, [r7, #0]
        memcpy(out_ra, addrs.our_ota_addr.val, 6);
   12fb2:	ab08      	add	r3, sp, #32
   12fb4:	f853 2d0d 	ldr.w	r2, [r3, #-13]!
   12fb8:	6022      	str	r2, [r4, #0]
   12fba:	889b      	ldrh	r3, [r3, #4]
   12fbc:	80a3      	strh	r3, [r4, #4]
}
   12fbe:	b008      	add	sp, #32
   12fc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *out_iat = addrs.our_ota_addr.type;
   12fc4:	f89d 3012 	ldrb.w	r3, [sp, #18]
   12fc8:	f888 3000 	strb.w	r3, [r8]
        memcpy(out_ia, addrs.our_ota_addr.val, 6);
   12fcc:	ab08      	add	r3, sp, #32
   12fce:	f853 2d0d 	ldr.w	r2, [r3, #-13]!
   12fd2:	602a      	str	r2, [r5, #0]
   12fd4:	889b      	ldrh	r3, [r3, #4]
   12fd6:	80ab      	strh	r3, [r5, #4]
        *out_rat = addrs.peer_ota_addr.type;
   12fd8:	f89d 3019 	ldrb.w	r3, [sp, #25]
   12fdc:	703b      	strb	r3, [r7, #0]
        memcpy(out_ra, addrs.peer_ota_addr.val, 6);
   12fde:	ab08      	add	r3, sp, #32
   12fe0:	f853 2d06 	ldr.w	r2, [r3, #-6]!
   12fe4:	6022      	str	r2, [r4, #0]
   12fe6:	889b      	ldrh	r3, [r3, #4]
   12fe8:	80a3      	strh	r3, [r4, #4]
   12fea:	e7e8      	b.n	12fbe <ble_sm_ia_ra+0x4a>

00012fec <ble_sm_proc_find>:
{
   12fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12ff0:	4607      	mov	r7, r0
   12ff2:	460e      	mov	r6, r1
   12ff4:	4615      	mov	r5, r2
   12ff6:	4699      	mov	r9, r3
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   12ff8:	4b0b      	ldr	r3, [pc, #44]	; (13028 <ble_sm_proc_find+0x3c>)
   12ffa:	681c      	ldr	r4, [r3, #0]
    prev = NULL;
   12ffc:	f04f 0800 	mov.w	r8, #0
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   13000:	b174      	cbz	r4, 13020 <ble_sm_proc_find+0x34>
        if (ble_sm_proc_matches(proc, conn_handle, state, is_initiator)) {
   13002:	462b      	mov	r3, r5
   13004:	4632      	mov	r2, r6
   13006:	4639      	mov	r1, r7
   13008:	4620      	mov	r0, r4
   1300a:	f7ff f9fb 	bl	12404 <ble_sm_proc_matches>
   1300e:	b910      	cbnz	r0, 13016 <ble_sm_proc_find+0x2a>
        prev = proc;
   13010:	46a0      	mov	r8, r4
    STAILQ_FOREACH(proc, &ble_sm_procs, next) {
   13012:	6824      	ldr	r4, [r4, #0]
   13014:	e7f4      	b.n	13000 <ble_sm_proc_find+0x14>
            if (out_prev != NULL) {
   13016:	f1b9 0f00 	cmp.w	r9, #0
   1301a:	d001      	beq.n	13020 <ble_sm_proc_find+0x34>
                *out_prev = prev;
   1301c:	f8c9 8000 	str.w	r8, [r9]
}
   13020:	4620      	mov	r0, r4
   13022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   13026:	bf00      	nop
   13028:	2000779c 	.word	0x2000779c

0001302c <ble_sm_sign_info_rx>:
{
   1302c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1302e:	4606      	mov	r6, r0
   13030:	460d      	mov	r5, r1
   13032:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   13034:	2110      	movs	r1, #16
   13036:	4628      	mov	r0, r5
   13038:	f7fe fabb 	bl	115b2 <ble_hs_mbuf_pullup_base>
   1303c:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   1303e:	b130      	cbz	r0, 1304e <ble_sm_sign_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13040:	2308      	movs	r3, #8
   13042:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   13044:	7d23      	ldrb	r3, [r4, #20]
   13046:	f043 0302 	orr.w	r3, r3, #2
   1304a:	7523      	strb	r3, [r4, #20]
}
   1304c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_sign_info *)(*om)->om_data;
   1304e:	682b      	ldr	r3, [r5, #0]
   13050:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   13052:	f7fc fd27 	bl	faa4 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   13056:	2300      	movs	r3, #0
   13058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1305c:	2107      	movs	r1, #7
   1305e:	4630      	mov	r0, r6
   13060:	f7ff ffc4 	bl	12fec <ble_sm_proc_find>
    if (proc == NULL) {
   13064:	4603      	mov	r3, r0
   13066:	b1e0      	cbz	r0, 130a2 <ble_sm_sign_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_SIGN_INFO;
   13068:	7b82      	ldrb	r2, [r0, #14]
   1306a:	f022 0210 	bic.w	r2, r2, #16
   1306e:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.csrk, cmd->sig_key, 16);
   13070:	682f      	ldr	r7, [r5, #0]
   13072:	686e      	ldr	r6, [r5, #4]
   13074:	68a8      	ldr	r0, [r5, #8]
   13076:	68e9      	ldr	r1, [r5, #12]
   13078:	f8c3 70ea 	str.w	r7, [r3, #234]	; 0xea
   1307c:	f8c3 60ee 	str.w	r6, [r3, #238]	; 0xee
   13080:	f8c3 00f2 	str.w	r0, [r3, #242]	; 0xf2
   13084:	f8c3 10f6 	str.w	r1, [r3, #246]	; 0xf6
        proc->peer_keys.csrk_valid = 1;
   13088:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   1308c:	f042 0208 	orr.w	r2, r2, #8
   13090:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   13094:	4621      	mov	r1, r4
   13096:	4618      	mov	r0, r3
   13098:	f7ff fd17 	bl	12aca <ble_sm_key_rxed>
    ble_hs_unlock();
   1309c:	f7fc fd06 	bl	faac <ble_hs_unlock>
   130a0:	e7d4      	b.n	1304c <ble_sm_sign_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   130a2:	2305      	movs	r3, #5
   130a4:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   130a6:	2308      	movs	r3, #8
   130a8:	7123      	strb	r3, [r4, #4]
   130aa:	e7f7      	b.n	1309c <ble_sm_sign_info_rx+0x70>

000130ac <ble_sm_id_addr_info_rx>:
{
   130ac:	b570      	push	{r4, r5, r6, lr}
   130ae:	4606      	mov	r6, r0
   130b0:	460d      	mov	r5, r1
   130b2:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   130b4:	2107      	movs	r1, #7
   130b6:	4628      	mov	r0, r5
   130b8:	f7fe fa7b 	bl	115b2 <ble_hs_mbuf_pullup_base>
   130bc:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   130be:	b130      	cbz	r0, 130ce <ble_sm_id_addr_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   130c0:	2308      	movs	r3, #8
   130c2:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   130c4:	7d23      	ldrb	r3, [r4, #20]
   130c6:	f043 0302 	orr.w	r3, r3, #2
   130ca:	7523      	strb	r3, [r4, #20]
}
   130cc:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_id_addr_info *)(*om)->om_data;
   130ce:	682b      	ldr	r3, [r5, #0]
   130d0:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   130d2:	f7fc fce7 	bl	faa4 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   130d6:	2300      	movs	r3, #0
   130d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   130dc:	2107      	movs	r1, #7
   130de:	4630      	mov	r0, r6
   130e0:	f7ff ff84 	bl	12fec <ble_sm_proc_find>
    if (proc == NULL) {
   130e4:	b1d0      	cbz	r0, 1311c <ble_sm_id_addr_info_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ADDR_INFO;
   130e6:	7b82      	ldrb	r2, [r0, #14]
   130e8:	f022 0208 	bic.w	r2, r2, #8
   130ec:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.addr_valid = 1;
   130ee:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   130f2:	f042 0210 	orr.w	r2, r2, #16
   130f6:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.addr_type = cmd->addr_type;
   130fa:	782a      	ldrb	r2, [r5, #0]
   130fc:	f880 20c8 	strb.w	r2, [r0, #200]	; 0xc8
        memcpy(proc->peer_keys.addr, cmd->bd_addr, 6);
   13100:	462a      	mov	r2, r5
   13102:	f852 1f01 	ldr.w	r1, [r2, #1]!
   13106:	f8c0 10fa 	str.w	r1, [r0, #250]	; 0xfa
   1310a:	8892      	ldrh	r2, [r2, #4]
   1310c:	f8a0 20fe 	strh.w	r2, [r0, #254]	; 0xfe
        ble_sm_key_rxed(proc, res);
   13110:	4621      	mov	r1, r4
   13112:	f7ff fcda 	bl	12aca <ble_sm_key_rxed>
    ble_hs_unlock();
   13116:	f7fc fcc9 	bl	faac <ble_hs_unlock>
   1311a:	e7d7      	b.n	130cc <ble_sm_id_addr_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   1311c:	2305      	movs	r3, #5
   1311e:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13120:	2308      	movs	r3, #8
   13122:	7123      	strb	r3, [r4, #4]
   13124:	e7f7      	b.n	13116 <ble_sm_id_addr_info_rx+0x6a>

00013126 <ble_sm_id_info_rx>:
{
   13126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13128:	4606      	mov	r6, r0
   1312a:	460d      	mov	r5, r1
   1312c:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   1312e:	2110      	movs	r1, #16
   13130:	4628      	mov	r0, r5
   13132:	f7fe fa3e 	bl	115b2 <ble_hs_mbuf_pullup_base>
   13136:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   13138:	b130      	cbz	r0, 13148 <ble_sm_id_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1313a:	2308      	movs	r3, #8
   1313c:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   1313e:	7d23      	ldrb	r3, [r4, #20]
   13140:	f043 0302 	orr.w	r3, r3, #2
   13144:	7523      	strb	r3, [r4, #20]
}
   13146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_id_info *)(*om)->om_data;
   13148:	682b      	ldr	r3, [r5, #0]
   1314a:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   1314c:	f7fc fcaa 	bl	faa4 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   13150:	2300      	movs	r3, #0
   13152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13156:	2107      	movs	r1, #7
   13158:	4630      	mov	r0, r6
   1315a:	f7ff ff47 	bl	12fec <ble_sm_proc_find>
    if (proc == NULL) {
   1315e:	4603      	mov	r3, r0
   13160:	b1e0      	cbz	r0, 1319c <ble_sm_id_info_rx+0x76>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ID_INFO;
   13162:	7b82      	ldrb	r2, [r0, #14]
   13164:	f022 0204 	bic.w	r2, r2, #4
   13168:	7382      	strb	r2, [r0, #14]
        memcpy(proc->peer_keys.irk, cmd->irk, 16);
   1316a:	682f      	ldr	r7, [r5, #0]
   1316c:	686e      	ldr	r6, [r5, #4]
   1316e:	68a8      	ldr	r0, [r5, #8]
   13170:	68e9      	ldr	r1, [r5, #12]
   13172:	f8c3 70da 	str.w	r7, [r3, #218]	; 0xda
   13176:	f8c3 60de 	str.w	r6, [r3, #222]	; 0xde
   1317a:	f8c3 00e2 	str.w	r0, [r3, #226]	; 0xe2
   1317e:	f8c3 10e6 	str.w	r1, [r3, #230]	; 0xe6
        proc->peer_keys.irk_valid = 1;
   13182:	f893 20b8 	ldrb.w	r2, [r3, #184]	; 0xb8
   13186:	f042 0204 	orr.w	r2, r2, #4
   1318a:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        ble_sm_key_rxed(proc, res);
   1318e:	4621      	mov	r1, r4
   13190:	4618      	mov	r0, r3
   13192:	f7ff fc9a 	bl	12aca <ble_sm_key_rxed>
    ble_hs_unlock();
   13196:	f7fc fc89 	bl	faac <ble_hs_unlock>
   1319a:	e7d4      	b.n	13146 <ble_sm_id_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   1319c:	2305      	movs	r3, #5
   1319e:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   131a0:	2308      	movs	r3, #8
   131a2:	7123      	strb	r3, [r4, #4]
   131a4:	e7f7      	b.n	13196 <ble_sm_id_info_rx+0x70>

000131a6 <ble_sm_master_id_rx>:
{
   131a6:	b570      	push	{r4, r5, r6, lr}
   131a8:	4606      	mov	r6, r0
   131aa:	460d      	mov	r5, r1
   131ac:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   131ae:	210a      	movs	r1, #10
   131b0:	4628      	mov	r0, r5
   131b2:	f7fe f9fe 	bl	115b2 <ble_hs_mbuf_pullup_base>
   131b6:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   131b8:	b130      	cbz	r0, 131c8 <ble_sm_master_id_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   131ba:	2308      	movs	r3, #8
   131bc:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   131be:	7d23      	ldrb	r3, [r4, #20]
   131c0:	f043 0302 	orr.w	r3, r3, #2
   131c4:	7523      	strb	r3, [r4, #20]
}
   131c6:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_sm_master_id *)(*om)->om_data;
   131c8:	682b      	ldr	r3, [r5, #0]
   131ca:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   131cc:	f7fc fc6a 	bl	faa4 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   131d0:	2300      	movs	r3, #0
   131d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   131d6:	2107      	movs	r1, #7
   131d8:	4630      	mov	r0, r6
   131da:	f7ff ff07 	bl	12fec <ble_sm_proc_find>
    if (proc == NULL) {
   131de:	b1d0      	cbz	r0, 13216 <ble_sm_master_id_rx+0x70>
        proc->rx_key_flags &= ~BLE_SM_KE_F_MASTER_ID;
   131e0:	7b82      	ldrb	r2, [r0, #14]
   131e2:	f022 0202 	bic.w	r2, r2, #2
   131e6:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ediv_rand_valid = 1;
   131e8:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   131ec:	f042 0202 	orr.w	r2, r2, #2
   131f0:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        proc->peer_keys.ediv = le16toh(cmd->ediv);
   131f4:	882a      	ldrh	r2, [r5, #0]
   131f6:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
        proc->peer_keys.rand_val = le64toh(cmd->rand_val);
   131fa:	f8d5 1002 	ldr.w	r1, [r5, #2]
   131fe:	f8d5 2006 	ldr.w	r2, [r5, #6]
   13202:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
   13206:	f8c0 20c4 	str.w	r2, [r0, #196]	; 0xc4
        ble_sm_key_rxed(proc, res);
   1320a:	4621      	mov	r1, r4
   1320c:	f7ff fc5d 	bl	12aca <ble_sm_key_rxed>
    ble_hs_unlock();
   13210:	f7fc fc4c 	bl	faac <ble_hs_unlock>
   13214:	e7d7      	b.n	131c6 <ble_sm_master_id_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   13216:	2305      	movs	r3, #5
   13218:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1321a:	2308      	movs	r3, #8
   1321c:	7123      	strb	r3, [r4, #4]
   1321e:	e7f7      	b.n	13210 <ble_sm_master_id_rx+0x6a>

00013220 <ble_sm_enc_info_rx>:
{
   13220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13222:	4606      	mov	r6, r0
   13224:	460d      	mov	r5, r1
   13226:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   13228:	2110      	movs	r1, #16
   1322a:	4628      	mov	r0, r5
   1322c:	f7fe f9c1 	bl	115b2 <ble_hs_mbuf_pullup_base>
   13230:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   13232:	b130      	cbz	r0, 13242 <ble_sm_enc_info_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13234:	2308      	movs	r3, #8
   13236:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   13238:	7d23      	ldrb	r3, [r4, #20]
   1323a:	f043 0302 	orr.w	r3, r3, #2
   1323e:	7523      	strb	r3, [r4, #20]
}
   13240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_enc_info *)(*om)->om_data;
   13242:	682b      	ldr	r3, [r5, #0]
   13244:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   13246:	f7fc fc2d 	bl	faa4 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_KEY_EXCH, -1, NULL);
   1324a:	2300      	movs	r3, #0
   1324c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13250:	2107      	movs	r1, #7
   13252:	4630      	mov	r0, r6
   13254:	f7ff feca 	bl	12fec <ble_sm_proc_find>
    if (proc == NULL) {
   13258:	4603      	mov	r3, r0
   1325a:	b1f8      	cbz	r0, 1329c <ble_sm_enc_info_rx+0x7c>
        proc->rx_key_flags &= ~BLE_SM_KE_F_ENC_INFO;
   1325c:	7b82      	ldrb	r2, [r0, #14]
   1325e:	f022 0201 	bic.w	r2, r2, #1
   13262:	7382      	strb	r2, [r0, #14]
        proc->peer_keys.ltk_valid = 1;
   13264:	f890 20b8 	ldrb.w	r2, [r0, #184]	; 0xb8
   13268:	f042 0201 	orr.w	r2, r2, #1
   1326c:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
        memcpy(proc->peer_keys.ltk, cmd->ltk, 16);
   13270:	682f      	ldr	r7, [r5, #0]
   13272:	686e      	ldr	r6, [r5, #4]
   13274:	68a8      	ldr	r0, [r5, #8]
   13276:	68e9      	ldr	r1, [r5, #12]
   13278:	f8c3 70ca 	str.w	r7, [r3, #202]	; 0xca
   1327c:	f8c3 60ce 	str.w	r6, [r3, #206]	; 0xce
   13280:	f8c3 00d2 	str.w	r0, [r3, #210]	; 0xd2
   13284:	f8c3 10d6 	str.w	r1, [r3, #214]	; 0xd6
        proc->peer_keys.key_size = proc->key_size;
   13288:	7bda      	ldrb	r2, [r3, #15]
   1328a:	f883 20c9 	strb.w	r2, [r3, #201]	; 0xc9
        ble_sm_key_rxed(proc, res);
   1328e:	4621      	mov	r1, r4
   13290:	4618      	mov	r0, r3
   13292:	f7ff fc1a 	bl	12aca <ble_sm_key_rxed>
    ble_hs_unlock();
   13296:	f7fc fc09 	bl	faac <ble_hs_unlock>
   1329a:	e7d1      	b.n	13240 <ble_sm_enc_info_rx+0x20>
        res->app_status = BLE_HS_ENOENT;
   1329c:	2305      	movs	r3, #5
   1329e:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   132a0:	2308      	movs	r3, #8
   132a2:	7123      	strb	r3, [r4, #4]
   132a4:	e7f7      	b.n	13296 <ble_sm_enc_info_rx+0x76>

000132a6 <ble_sm_pair_req_rx>:
{
   132a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   132a8:	b083      	sub	sp, #12
   132aa:	4606      	mov	r6, r0
   132ac:	460d      	mov	r5, r1
   132ae:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*req));
   132b0:	2106      	movs	r1, #6
   132b2:	4628      	mov	r0, r5
   132b4:	f7fe f97d 	bl	115b2 <ble_hs_mbuf_pullup_base>
   132b8:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   132ba:	b108      	cbz	r0, 132c0 <ble_sm_pair_req_rx+0x1a>
}
   132bc:	b003      	add	sp, #12
   132be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    req = (struct ble_sm_pair_cmd *)(*om)->om_data;
   132c0:	682b      	ldr	r3, [r5, #0]
   132c2:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   132c4:	f7fc fbee 	bl	faa4 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, &prev);
   132c8:	ab01      	add	r3, sp, #4
   132ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   132ce:	21ff      	movs	r1, #255	; 0xff
   132d0:	4630      	mov	r0, r6
   132d2:	f7ff fe8b 	bl	12fec <ble_sm_proc_find>
    if (proc != NULL) {
   132d6:	4605      	mov	r5, r0
   132d8:	b180      	cbz	r0, 132fc <ble_sm_pair_req_rx+0x56>
        if (proc->state != BLE_SM_PROC_STATE_SEC_REQ) {
   132da:	7b43      	ldrb	r3, [r0, #13]
   132dc:	2b08      	cmp	r3, #8
   132de:	d007      	beq.n	132f0 <ble_sm_pair_req_rx+0x4a>
            res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   132e0:	2308      	movs	r3, #8
   132e2:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_UNSPECIFIED);
   132e4:	f44f 6381 	mov.w	r3, #1032	; 0x408
   132e8:	6023      	str	r3, [r4, #0]
            ble_hs_unlock();
   132ea:	f7fc fbdf 	bl	faac <ble_hs_unlock>
            return;
   132ee:	e7e5      	b.n	132bc <ble_sm_pair_req_rx+0x16>
        ble_sm_proc_remove(proc, prev);
   132f0:	9901      	ldr	r1, [sp, #4]
   132f2:	f7ff f873 	bl	123dc <ble_sm_proc_remove>
        ble_sm_proc_free(proc);
   132f6:	4628      	mov	r0, r5
   132f8:	f7ff fd7e 	bl	12df8 <ble_sm_proc_free>
    ble_hs_unlock();
   132fc:	f7fc fbd6 	bl	faac <ble_hs_unlock>
    rc = ble_sm_chk_store_overflow(conn_handle);
   13300:	4630      	mov	r0, r6
   13302:	f7ff f8d6 	bl	124b2 <ble_sm_chk_store_overflow>
    if (rc != 0) {
   13306:	b118      	cbz	r0, 13310 <ble_sm_pair_req_rx+0x6a>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13308:	2208      	movs	r2, #8
   1330a:	7122      	strb	r2, [r4, #4]
        res->app_status = rc;
   1330c:	6020      	str	r0, [r4, #0]
        return;
   1330e:	e7d5      	b.n	132bc <ble_sm_pair_req_rx+0x16>
    ble_hs_lock();
   13310:	f7fc fbc8 	bl	faa4 <ble_hs_lock>
    proc = ble_sm_proc_alloc();
   13314:	f7ff fd7a 	bl	12e0c <ble_sm_proc_alloc>
    if (proc != NULL) {
   13318:	4605      	mov	r5, r0
   1331a:	2800      	cmp	r0, #0
   1331c:	d04a      	beq.n	133b4 <ble_sm_pair_req_rx+0x10e>
        proc->conn_handle = conn_handle;
   1331e:	8146      	strh	r6, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   13320:	2300      	movs	r3, #0
   13322:	7343      	strb	r3, [r0, #13]
        ble_sm_insert(proc);
   13324:	f7ff f88c 	bl	12440 <ble_sm_insert>
        proc->pair_req[0] = BLE_SM_OP_PAIR_REQ;
   13328:	2301      	movs	r3, #1
   1332a:	742b      	strb	r3, [r5, #16]
        memcpy(proc->pair_req + 1, req, sizeof(*req));
   1332c:	683b      	ldr	r3, [r7, #0]
   1332e:	f8c5 3011 	str.w	r3, [r5, #17]
   13332:	88bb      	ldrh	r3, [r7, #4]
   13334:	f8a5 3015 	strh.w	r3, [r5, #21]
        conn = ble_hs_conn_find_assert(proc->conn_handle);
   13338:	8968      	ldrh	r0, [r5, #10]
   1333a:	f7fd f9d5 	bl	106e8 <ble_hs_conn_find_assert>
        if (conn->bhc_flags & BLE_HS_CONN_F_MASTER) {
   1333e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   13342:	f013 0f01 	tst.w	r3, #1
   13346:	d007      	beq.n	13358 <ble_sm_pair_req_rx+0xb2>
            res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   13348:	2307      	movs	r3, #7
   1334a:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   1334c:	f240 4307 	movw	r3, #1031	; 0x407
   13350:	6023      	str	r3, [r4, #0]
    key_size = 0;
   13352:	2500      	movs	r5, #0
    proc_flags = 0;
   13354:	462f      	mov	r7, r5
   13356:	e02f      	b.n	133b8 <ble_sm_pair_req_rx+0x112>
        } else if (req->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   13358:	78fb      	ldrb	r3, [r7, #3]
   1335a:	2b06      	cmp	r3, #6
   1335c:	d807      	bhi.n	1336e <ble_sm_pair_req_rx+0xc8>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   1335e:	2306      	movs	r3, #6
   13360:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   13362:	f240 4306 	movw	r3, #1030	; 0x406
   13366:	6023      	str	r3, [r4, #0]
    key_size = 0;
   13368:	2500      	movs	r5, #0
    proc_flags = 0;
   1336a:	462f      	mov	r7, r5
   1336c:	e024      	b.n	133b8 <ble_sm_pair_req_rx+0x112>
        } else if (req->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   1336e:	2b10      	cmp	r3, #16
   13370:	d907      	bls.n	13382 <ble_sm_pair_req_rx+0xdc>
            res->sm_err = BLE_SM_ERR_INVAL;
   13372:	230a      	movs	r3, #10
   13374:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   13376:	f240 430a 	movw	r3, #1034	; 0x40a
   1337a:	6023      	str	r3, [r4, #0]
    key_size = 0;
   1337c:	2500      	movs	r5, #0
    proc_flags = 0;
   1337e:	462f      	mov	r7, r5
   13380:	e01a      	b.n	133b8 <ble_sm_pair_req_rx+0x112>
        } else if (!ble_sm_verify_auth_requirements(req->authreq)) {
   13382:	78b8      	ldrb	r0, [r7, #2]
   13384:	f7ff f8e2 	bl	1254c <ble_sm_verify_auth_requirements>
   13388:	b938      	cbnz	r0, 1339a <ble_sm_pair_req_rx+0xf4>
            res->sm_err = BLE_SM_ERR_AUTHREQ;
   1338a:	2303      	movs	r3, #3
   1338c:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   1338e:	f240 4303 	movw	r3, #1027	; 0x403
   13392:	6023      	str	r3, [r4, #0]
    key_size = 0;
   13394:	2500      	movs	r5, #0
    proc_flags = 0;
   13396:	462f      	mov	r7, r5
   13398:	e00e      	b.n	133b8 <ble_sm_pair_req_rx+0x112>
            ble_sm_pair_rsp_fill(proc);
   1339a:	4628      	mov	r0, r5
   1339c:	f7ff f8c2 	bl	12524 <ble_sm_pair_rsp_fill>
            ble_sm_pair_cfg(proc);
   133a0:	4628      	mov	r0, r5
   133a2:	f7ff f8f0 	bl	12586 <ble_sm_pair_cfg>
            proc_flags = proc->flags;
   133a6:	7a2f      	ldrb	r7, [r5, #8]
            key_size = proc->key_size;
   133a8:	7bed      	ldrb	r5, [r5, #15]
            res->execute = 1;
   133aa:	7d23      	ldrb	r3, [r4, #20]
   133ac:	f043 0301 	orr.w	r3, r3, #1
   133b0:	7523      	strb	r3, [r4, #20]
   133b2:	e001      	b.n	133b8 <ble_sm_pair_req_rx+0x112>
    key_size = 0;
   133b4:	2500      	movs	r5, #0
    proc_flags = 0;
   133b6:	462f      	mov	r7, r5
    ble_hs_unlock();
   133b8:	f7fc fb78 	bl	faac <ble_hs_unlock>
    if (res->app_status == 0) {
   133bc:	6823      	ldr	r3, [r4, #0]
   133be:	2b00      	cmp	r3, #0
   133c0:	f47f af7c 	bne.w	132bc <ble_sm_pair_req_rx+0x16>
        rc = ble_sm_chk_repeat_pairing(conn_handle, proc_flags, key_size);
   133c4:	462a      	mov	r2, r5
   133c6:	4639      	mov	r1, r7
   133c8:	4630      	mov	r0, r6
   133ca:	f7ff fd90 	bl	12eee <ble_sm_chk_repeat_pairing>
        if (rc != 0) {
   133ce:	2800      	cmp	r0, #0
   133d0:	f43f af74 	beq.w	132bc <ble_sm_pair_req_rx+0x16>
            res->app_status = rc;
   133d4:	6020      	str	r0, [r4, #0]
            res->execute = 0;
   133d6:	7d23      	ldrb	r3, [r4, #20]
   133d8:	f36f 0300 	bfc	r3, #0, #1
   133dc:	7523      	strb	r3, [r4, #20]
   133de:	e76d      	b.n	132bc <ble_sm_pair_req_rx+0x16>

000133e0 <ble_sm_ioact_state>:
    switch (action) {
   133e0:	3801      	subs	r0, #1
   133e2:	2804      	cmp	r0, #4
   133e4:	d804      	bhi.n	133f0 <ble_sm_ioact_state+0x10>
   133e6:	e8df f000 	tbb	[pc, r0]
   133ea:	0707      	.short	0x0707
   133ec:	0907      	.short	0x0907
   133ee:	05          	.byte	0x05
   133ef:	00          	.byte	0x00
        return BLE_SM_PROC_STATE_NONE;
   133f0:	20ff      	movs	r0, #255	; 0xff
   133f2:	4770      	bx	lr
        return BLE_SM_PROC_STATE_RANDOM;
   133f4:	2002      	movs	r0, #2
   133f6:	4770      	bx	lr
        return BLE_SM_PROC_STATE_CONFIRM;
   133f8:	2001      	movs	r0, #1
   133fa:	4770      	bx	lr
        return BLE_SM_PROC_STATE_DHKEY_CHECK;
   133fc:	200a      	movs	r0, #10
}
   133fe:	4770      	bx	lr

00013400 <ble_sm_proc_can_advance>:
{
   13400:	b510      	push	{r4, lr}
   13402:	b082      	sub	sp, #8
   13404:	4604      	mov	r4, r0
    rc = ble_sm_io_action(proc, &ioact);
   13406:	f10d 0107 	add.w	r1, sp, #7
   1340a:	f7ff f8b2 	bl	12572 <ble_sm_io_action>
    if (ble_sm_ioact_state(ioact) != proc->state) {
   1340e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   13412:	f7ff ffe5 	bl	133e0 <ble_sm_ioact_state>
   13416:	7b63      	ldrb	r3, [r4, #13]
   13418:	4298      	cmp	r0, r3
   1341a:	d002      	beq.n	13422 <ble_sm_proc_can_advance+0x22>
        return 1;
   1341c:	2001      	movs	r0, #1
}
   1341e:	b002      	add	sp, #8
   13420:	bd10      	pop	{r4, pc}
    if (proc->flags & BLE_SM_PROC_F_IO_INJECTED &&
   13422:	7a23      	ldrb	r3, [r4, #8]
   13424:	f003 0306 	and.w	r3, r3, #6
   13428:	2b06      	cmp	r3, #6
   1342a:	d001      	beq.n	13430 <ble_sm_proc_can_advance+0x30>
    return 0;
   1342c:	2000      	movs	r0, #0
   1342e:	e7f6      	b.n	1341e <ble_sm_proc_can_advance+0x1e>
        return 1;
   13430:	2001      	movs	r0, #1
   13432:	e7f4      	b.n	1341e <ble_sm_proc_can_advance+0x1e>

00013434 <ble_sm_confirm_rx>:
{
   13434:	b5f0      	push	{r4, r5, r6, r7, lr}
   13436:	b083      	sub	sp, #12
   13438:	4606      	mov	r6, r0
   1343a:	460d      	mov	r5, r1
   1343c:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   1343e:	2110      	movs	r1, #16
   13440:	4628      	mov	r0, r5
   13442:	f7fe f8b6 	bl	115b2 <ble_hs_mbuf_pullup_base>
   13446:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   13448:	b138      	cbz	r0, 1345a <ble_sm_confirm_rx+0x26>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1344a:	2308      	movs	r3, #8
   1344c:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   1344e:	7d23      	ldrb	r3, [r4, #20]
   13450:	f043 0302 	orr.w	r3, r3, #2
   13454:	7523      	strb	r3, [r4, #20]
}
   13456:	b003      	add	sp, #12
   13458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_confirm *)(*om)->om_data;
   1345a:	682b      	ldr	r3, [r5, #0]
   1345c:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   1345e:	f7fc fb21 	bl	faa4 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_CONFIRM, -1, NULL);
   13462:	2300      	movs	r3, #0
   13464:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13468:	2101      	movs	r1, #1
   1346a:	4630      	mov	r0, r6
   1346c:	f7ff fdbe 	bl	12fec <ble_sm_proc_find>
    if (proc == NULL) {
   13470:	4605      	mov	r5, r0
   13472:	b1b0      	cbz	r0, 134a2 <ble_sm_confirm_rx+0x6e>
        memcpy(proc->confirm_peer, cmd->value, 16);
   13474:	683e      	ldr	r6, [r7, #0]
   13476:	6878      	ldr	r0, [r7, #4]
   13478:	68b9      	ldr	r1, [r7, #8]
   1347a:	68fa      	ldr	r2, [r7, #12]
   1347c:	f8c5 602e 	str.w	r6, [r5, #46]	; 0x2e
   13480:	f8c5 0032 	str.w	r0, [r5, #50]	; 0x32
   13484:	f8c5 1036 	str.w	r1, [r5, #54]	; 0x36
   13488:	f8c5 203a 	str.w	r2, [r5, #58]	; 0x3a
        if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   1348c:	7a2b      	ldrb	r3, [r5, #8]
   1348e:	f013 0f01 	tst.w	r3, #1
   13492:	d00b      	beq.n	134ac <ble_sm_confirm_rx+0x78>
            proc->state = BLE_SM_PROC_STATE_RANDOM;
   13494:	2302      	movs	r3, #2
   13496:	736b      	strb	r3, [r5, #13]
            res->execute = 1;
   13498:	7d23      	ldrb	r3, [r4, #20]
   1349a:	f043 0301 	orr.w	r3, r3, #1
   1349e:	7523      	strb	r3, [r4, #20]
   134a0:	e001      	b.n	134a6 <ble_sm_confirm_rx+0x72>
        res->app_status = BLE_HS_ENOENT;
   134a2:	2305      	movs	r3, #5
   134a4:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   134a6:	f7fc fb01 	bl	faac <ble_hs_unlock>
   134aa:	e7d4      	b.n	13456 <ble_sm_confirm_rx+0x22>
            rc = ble_sm_io_action(proc, &ioact);
   134ac:	f10d 0107 	add.w	r1, sp, #7
   134b0:	4628      	mov	r0, r5
   134b2:	f7ff f85e 	bl	12572 <ble_sm_io_action>
            if (ble_sm_ioact_state(ioact) == proc->state) {
   134b6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   134ba:	f7ff ff91 	bl	133e0 <ble_sm_ioact_state>
   134be:	7b6b      	ldrb	r3, [r5, #13]
   134c0:	4298      	cmp	r0, r3
   134c2:	d009      	beq.n	134d8 <ble_sm_confirm_rx+0xa4>
            if (ble_sm_proc_can_advance(proc)) {
   134c4:	4628      	mov	r0, r5
   134c6:	f7ff ff9b 	bl	13400 <ble_sm_proc_can_advance>
   134ca:	2800      	cmp	r0, #0
   134cc:	d0eb      	beq.n	134a6 <ble_sm_confirm_rx+0x72>
                res->execute = 1;
   134ce:	7d23      	ldrb	r3, [r4, #20]
   134d0:	f043 0301 	orr.w	r3, r3, #1
   134d4:	7523      	strb	r3, [r4, #20]
   134d6:	e7e6      	b.n	134a6 <ble_sm_confirm_rx+0x72>
                proc->flags |= BLE_SM_PROC_F_ADVANCE_ON_IO;
   134d8:	7a2b      	ldrb	r3, [r5, #8]
   134da:	f043 0304 	orr.w	r3, r3, #4
   134de:	722b      	strb	r3, [r5, #8]
   134e0:	e7f0      	b.n	134c4 <ble_sm_confirm_rx+0x90>

000134e2 <ble_sm_pair_rsp_rx>:
{
   134e2:	b5f0      	push	{r4, r5, r6, r7, lr}
   134e4:	b083      	sub	sp, #12
   134e6:	4606      	mov	r6, r0
   134e8:	460d      	mov	r5, r1
   134ea:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*rsp));
   134ec:	2106      	movs	r1, #6
   134ee:	4628      	mov	r0, r5
   134f0:	f7fe f85f 	bl	115b2 <ble_hs_mbuf_pullup_base>
   134f4:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   134f6:	b128      	cbz	r0, 13504 <ble_sm_pair_rsp_rx+0x22>
        res->enc_cb = 1;
   134f8:	7d23      	ldrb	r3, [r4, #20]
   134fa:	f043 0302 	orr.w	r3, r3, #2
   134fe:	7523      	strb	r3, [r4, #20]
}
   13500:	b003      	add	sp, #12
   13502:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rsp = (struct ble_sm_pair_cmd *)(*om)->om_data;
   13504:	682b      	ldr	r3, [r5, #0]
   13506:	681f      	ldr	r7, [r3, #0]
    ble_hs_lock();
   13508:	f7fc facc 	bl	faa4 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_PAIR, 1, NULL);
   1350c:	2300      	movs	r3, #0
   1350e:	2201      	movs	r2, #1
   13510:	4619      	mov	r1, r3
   13512:	4630      	mov	r0, r6
   13514:	f7ff fd6a 	bl	12fec <ble_sm_proc_find>
    if (proc != NULL) {
   13518:	4605      	mov	r5, r0
   1351a:	b168      	cbz	r0, 13538 <ble_sm_pair_rsp_rx+0x56>
        proc->pair_rsp[0] = BLE_SM_OP_PAIR_RSP;
   1351c:	2302      	movs	r3, #2
   1351e:	75c3      	strb	r3, [r0, #23]
        memcpy(proc->pair_rsp + 1, rsp, sizeof(*rsp));
   13520:	683b      	ldr	r3, [r7, #0]
   13522:	6183      	str	r3, [r0, #24]
   13524:	88bb      	ldrh	r3, [r7, #4]
   13526:	8383      	strh	r3, [r0, #28]
        if (rsp->max_enc_key_size < BLE_SM_PAIR_KEY_SZ_MIN) {
   13528:	78fb      	ldrb	r3, [r7, #3]
   1352a:	2b06      	cmp	r3, #6
   1352c:	d807      	bhi.n	1353e <ble_sm_pair_rsp_rx+0x5c>
            res->sm_err = BLE_SM_ERR_ENC_KEY_SZ;
   1352e:	2306      	movs	r3, #6
   13530:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_ENC_KEY_SZ);
   13532:	f240 4306 	movw	r3, #1030	; 0x406
   13536:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   13538:	f7fc fab8 	bl	faac <ble_hs_unlock>
   1353c:	e7e0      	b.n	13500 <ble_sm_pair_rsp_rx+0x1e>
        } else if (rsp->max_enc_key_size > BLE_SM_PAIR_KEY_SZ_MAX) {
   1353e:	2b10      	cmp	r3, #16
   13540:	d905      	bls.n	1354e <ble_sm_pair_rsp_rx+0x6c>
            res->sm_err = BLE_SM_ERR_INVAL;
   13542:	230a      	movs	r3, #10
   13544:	7123      	strb	r3, [r4, #4]
            res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_INVAL);
   13546:	f240 430a 	movw	r3, #1034	; 0x40a
   1354a:	6023      	str	r3, [r4, #0]
   1354c:	e7f4      	b.n	13538 <ble_sm_pair_rsp_rx+0x56>
            ble_sm_pair_cfg(proc);
   1354e:	f7ff f81a 	bl	12586 <ble_sm_pair_cfg>
            rc = ble_sm_io_action(proc, &ioact);
   13552:	f10d 0107 	add.w	r1, sp, #7
   13556:	4628      	mov	r0, r5
   13558:	f7ff f80b 	bl	12572 <ble_sm_io_action>
            if (rc != 0) {
   1355c:	b148      	cbz	r0, 13572 <ble_sm_pair_rsp_rx+0x90>
                res->sm_err = BLE_SM_ERR_AUTHREQ;
   1355e:	2303      	movs	r3, #3
   13560:	7123      	strb	r3, [r4, #4]
                res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_AUTHREQ);
   13562:	f240 4303 	movw	r3, #1027	; 0x403
   13566:	6023      	str	r3, [r4, #0]
                res->enc_cb = 1;
   13568:	7d23      	ldrb	r3, [r4, #20]
   1356a:	f043 0302 	orr.w	r3, r3, #2
   1356e:	7523      	strb	r3, [r4, #20]
   13570:	e7e2      	b.n	13538 <ble_sm_pair_rsp_rx+0x56>
                proc->state = ble_sm_state_after_pair(proc);
   13572:	4628      	mov	r0, r5
   13574:	f7fe ffac 	bl	124d0 <ble_sm_state_after_pair>
   13578:	4606      	mov	r6, r0
   1357a:	7368      	strb	r0, [r5, #13]
                if (ble_sm_ioact_state(ioact) == proc->state) {
   1357c:	f89d 7007 	ldrb.w	r7, [sp, #7]
   13580:	4638      	mov	r0, r7
   13582:	f7ff ff2d 	bl	133e0 <ble_sm_ioact_state>
   13586:	42b0      	cmp	r0, r6
   13588:	d009      	beq.n	1359e <ble_sm_pair_rsp_rx+0xbc>
                if (ble_sm_proc_can_advance(proc)) {
   1358a:	4628      	mov	r0, r5
   1358c:	f7ff ff38 	bl	13400 <ble_sm_proc_can_advance>
   13590:	2800      	cmp	r0, #0
   13592:	d0d1      	beq.n	13538 <ble_sm_pair_rsp_rx+0x56>
                    res->execute = 1;
   13594:	7d23      	ldrb	r3, [r4, #20]
   13596:	f043 0301 	orr.w	r3, r3, #1
   1359a:	7523      	strb	r3, [r4, #20]
   1359c:	e7cc      	b.n	13538 <ble_sm_pair_rsp_rx+0x56>
                    res->passkey_params.action = ioact;
   1359e:	7227      	strb	r7, [r4, #8]
   135a0:	e7f3      	b.n	1358a <ble_sm_pair_rsp_rx+0xa8>

000135a2 <ble_sm_process_result>:
{
   135a2:	b5f0      	push	{r4, r5, r6, r7, lr}
   135a4:	b083      	sub	sp, #12
   135a6:	4607      	mov	r7, r0
   135a8:	460c      	mov	r4, r1
    rm = 0;
   135aa:	2600      	movs	r6, #0
   135ac:	e02f      	b.n	1360e <ble_sm_process_result+0x6c>
                ble_sm_exec(proc, res, res->state_arg);
   135ae:	6922      	ldr	r2, [r4, #16]
   135b0:	4621      	mov	r1, r4
   135b2:	f7ff f855 	bl	12660 <ble_sm_exec>
   135b6:	e039      	b.n	1362c <ble_sm_process_result+0x8a>
                rm = 1;
   135b8:	2601      	movs	r6, #1
   135ba:	e03f      	b.n	1363c <ble_sm_process_result+0x9a>
                ble_sm_proc_set_timer(proc);
   135bc:	4628      	mov	r0, r5
   135be:	f7ff fb64 	bl	12c8a <ble_sm_proc_set_timer>
   135c2:	e03f      	b.n	13644 <ble_sm_process_result+0xa2>
            ble_sm_pair_fail_tx(conn_handle, res->sm_err);
   135c4:	4638      	mov	r0, r7
   135c6:	f7ff f882 	bl	126ce <ble_sm_pair_fail_tx>
   135ca:	e03e      	b.n	1364a <ble_sm_process_result+0xa8>
            ble_gap_enc_event(conn_handle, res->app_status, res->restore, res->bonded);
   135cc:	461a      	mov	r2, r3
   135ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
   135d2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   135d6:	6821      	ldr	r1, [r4, #0]
   135d8:	4638      	mov	r0, r7
   135da:	f7fa f976 	bl	d8ca <ble_gap_enc_event>
   135de:	e03b      	b.n	13658 <ble_sm_process_result+0xb6>
            ble_gap_passkey_event(conn_handle, &res->passkey_params);
   135e0:	f104 0108 	add.w	r1, r4, #8
   135e4:	4638      	mov	r0, r7
   135e6:	f7fa f957 	bl	d898 <ble_gap_passkey_event>
   135ea:	e03a      	b.n	13662 <ble_sm_process_result+0xc0>
        if (rm) {
   135ec:	2e00      	cmp	r6, #0
   135ee:	d145      	bne.n	1367c <ble_sm_process_result+0xda>
        if (!res->execute) {
   135f0:	7d23      	ldrb	r3, [r4, #20]
   135f2:	f013 0f01 	tst.w	r3, #1
   135f6:	d044      	beq.n	13682 <ble_sm_process_result+0xe0>
        memset(res, 0, sizeof *res);
   135f8:	2300      	movs	r3, #0
   135fa:	6023      	str	r3, [r4, #0]
   135fc:	6063      	str	r3, [r4, #4]
   135fe:	60a3      	str	r3, [r4, #8]
   13600:	60e3      	str	r3, [r4, #12]
   13602:	6123      	str	r3, [r4, #16]
   13604:	6163      	str	r3, [r4, #20]
        res->execute = 1;
   13606:	7d23      	ldrb	r3, [r4, #20]
   13608:	f043 0301 	orr.w	r3, r3, #1
   1360c:	7523      	strb	r3, [r4, #20]
        ble_hs_lock();
   1360e:	f7fc fa49 	bl	faa4 <ble_hs_lock>
        proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1,
   13612:	ab01      	add	r3, sp, #4
   13614:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13618:	21ff      	movs	r1, #255	; 0xff
   1361a:	4638      	mov	r0, r7
   1361c:	f7ff fce6 	bl	12fec <ble_sm_proc_find>
        if (proc != NULL) {
   13620:	4605      	mov	r5, r0
   13622:	b178      	cbz	r0, 13644 <ble_sm_process_result+0xa2>
            if (res->execute) {
   13624:	7d23      	ldrb	r3, [r4, #20]
   13626:	f013 0f01 	tst.w	r3, #1
   1362a:	d1c0      	bne.n	135ae <ble_sm_process_result+0xc>
            if (res->app_status != 0) {
   1362c:	6823      	ldr	r3, [r4, #0]
   1362e:	b103      	cbz	r3, 13632 <ble_sm_process_result+0x90>
                rm = 1;
   13630:	2601      	movs	r6, #1
            if (proc->state == BLE_SM_PROC_STATE_NONE) {
   13632:	7b6b      	ldrb	r3, [r5, #13]
   13634:	2bff      	cmp	r3, #255	; 0xff
   13636:	d0bf      	beq.n	135b8 <ble_sm_process_result+0x16>
            if (rm) {
   13638:	2e00      	cmp	r6, #0
   1363a:	d0bf      	beq.n	135bc <ble_sm_process_result+0x1a>
                ble_sm_proc_remove(proc, prev);
   1363c:	9901      	ldr	r1, [sp, #4]
   1363e:	4628      	mov	r0, r5
   13640:	f7fe fecc 	bl	123dc <ble_sm_proc_remove>
        if (res->sm_err != 0) {
   13644:	7921      	ldrb	r1, [r4, #4]
   13646:	2900      	cmp	r1, #0
   13648:	d1bc      	bne.n	135c4 <ble_sm_process_result+0x22>
        ble_hs_unlock();
   1364a:	f7fc fa2f 	bl	faac <ble_hs_unlock>
        if (proc == NULL) {
   1364e:	b1c5      	cbz	r5, 13682 <ble_sm_process_result+0xe0>
        if (res->enc_cb) {
   13650:	7d23      	ldrb	r3, [r4, #20]
   13652:	f013 0f02 	tst.w	r3, #2
   13656:	d1b9      	bne.n	135cc <ble_sm_process_result+0x2a>
        if (res->app_status == 0 &&
   13658:	6823      	ldr	r3, [r4, #0]
   1365a:	b913      	cbnz	r3, 13662 <ble_sm_process_result+0xc0>
            res->passkey_params.action != BLE_SM_IOACT_NONE) {
   1365c:	7a23      	ldrb	r3, [r4, #8]
        if (res->app_status == 0 &&
   1365e:	2b00      	cmp	r3, #0
   13660:	d1be      	bne.n	135e0 <ble_sm_process_result+0x3e>
        if (res->app_status == 0    &&
   13662:	6823      	ldr	r3, [r4, #0]
   13664:	2b00      	cmp	r3, #0
   13666:	d1c1      	bne.n	135ec <ble_sm_process_result+0x4a>
   13668:	2e00      	cmp	r6, #0
   1366a:	d0bf      	beq.n	135ec <ble_sm_process_result+0x4a>
            proc->flags & BLE_SM_PROC_F_BONDING) {
   1366c:	7a2b      	ldrb	r3, [r5, #8]
            rm                      &&
   1366e:	f013 0f20 	tst.w	r3, #32
   13672:	d0bb      	beq.n	135ec <ble_sm_process_result+0x4a>
            ble_sm_persist_keys(proc);
   13674:	4628      	mov	r0, r5
   13676:	f7ff fb4b 	bl	12d10 <ble_sm_persist_keys>
   1367a:	e7b7      	b.n	135ec <ble_sm_process_result+0x4a>
            ble_sm_proc_free(proc);
   1367c:	4628      	mov	r0, r5
   1367e:	f7ff fbbb 	bl	12df8 <ble_sm_proc_free>
}
   13682:	b003      	add	sp, #12
   13684:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013686 <ble_sm_enc_event_rx>:
{
   13686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1368a:	b088      	sub	sp, #32
   1368c:	4606      	mov	r6, r0
   1368e:	460d      	mov	r5, r1
   13690:	4690      	mov	r8, r2
    memset(&res, 0, sizeof res);
   13692:	2400      	movs	r4, #0
   13694:	9402      	str	r4, [sp, #8]
   13696:	9403      	str	r4, [sp, #12]
   13698:	9404      	str	r4, [sp, #16]
   1369a:	9405      	str	r4, [sp, #20]
   1369c:	9406      	str	r4, [sp, #24]
   1369e:	9407      	str	r4, [sp, #28]
    ble_hs_lock();
   136a0:	f7fc fa00 	bl	faa4 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   136a4:	4623      	mov	r3, r4
   136a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   136aa:	21ff      	movs	r1, #255	; 0xff
   136ac:	4630      	mov	r0, r6
   136ae:	f7ff fc9d 	bl	12fec <ble_sm_proc_find>
    if (proc != NULL) {
   136b2:	4604      	mov	r4, r0
   136b4:	2800      	cmp	r0, #0
   136b6:	d03a      	beq.n	1372e <ble_sm_enc_event_rx+0xa8>
        switch (proc->state) {
   136b8:	7b43      	ldrb	r3, [r0, #13]
   136ba:	2b05      	cmp	r3, #5
   136bc:	d00a      	beq.n	136d4 <ble_sm_enc_event_rx+0x4e>
   136be:	2b06      	cmp	r3, #6
   136c0:	d023      	beq.n	1370a <ble_sm_enc_event_rx+0x84>
            proc->state = BLE_SM_PROC_STATE_NONE;
   136c2:	23ff      	movs	r3, #255	; 0xff
   136c4:	7343      	strb	r3, [r0, #13]
            res.sm_err = BLE_SM_ERR_UNSPECIFIED;
   136c6:	2308      	movs	r3, #8
   136c8:	f88d 300c 	strb.w	r3, [sp, #12]
    key_size = 0;
   136cc:	2300      	movs	r3, #0
    bonded = 0;
   136ce:	461f      	mov	r7, r3
    authenticated = 0;
   136d0:	461a      	mov	r2, r3
            break;
   136d2:	e02f      	b.n	13734 <ble_sm_enc_event_rx+0xae>
            if (evt_status == 0) {
   136d4:	b9ad      	cbnz	r5, 13702 <ble_sm_enc_event_rx+0x7c>
                proc->state = BLE_SM_PROC_STATE_KEY_EXCH;
   136d6:	2307      	movs	r3, #7
   136d8:	7343      	strb	r3, [r0, #13]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   136da:	7a03      	ldrb	r3, [r0, #8]
   136dc:	f013 0f01 	tst.w	r3, #1
   136e0:	d001      	beq.n	136e6 <ble_sm_enc_event_rx+0x60>
                    proc->rx_key_flags == 0) {
   136e2:	7b83      	ldrb	r3, [r0, #14]
                if (!(proc->flags & BLE_SM_PROC_F_INITIATOR) ||
   136e4:	b92b      	cbnz	r3, 136f2 <ble_sm_enc_event_rx+0x6c>
                    res.execute = 1;
   136e6:	f89d 301c 	ldrb.w	r3, [sp, #28]
   136ea:	f043 0301 	orr.w	r3, r3, #1
   136ee:	f88d 301c 	strb.w	r3, [sp, #28]
                key_size = proc->key_size;
   136f2:	7be3      	ldrb	r3, [r4, #15]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   136f4:	7a22      	ldrb	r2, [r4, #8]
   136f6:	f012 0f08 	tst.w	r2, #8
   136fa:	d139      	bne.n	13770 <ble_sm_enc_event_rx+0xea>
    bonded = 0;
   136fc:	2700      	movs	r7, #0
    authenticated = 0;
   136fe:	463a      	mov	r2, r7
   13700:	e018      	b.n	13734 <ble_sm_enc_event_rx+0xae>
                proc->state = BLE_SM_PROC_STATE_NONE;
   13702:	23ff      	movs	r3, #255	; 0xff
   13704:	7343      	strb	r3, [r0, #13]
    key_size = 0;
   13706:	2300      	movs	r3, #0
   13708:	e7f4      	b.n	136f4 <ble_sm_enc_event_rx+0x6e>
            proc->state = BLE_SM_PROC_STATE_NONE;
   1370a:	23ff      	movs	r3, #255	; 0xff
   1370c:	7343      	strb	r3, [r0, #13]
            if (proc->flags & BLE_SM_PROC_F_AUTHENTICATED) {
   1370e:	7a03      	ldrb	r3, [r0, #8]
   13710:	f013 0f08 	tst.w	r3, #8
   13714:	d109      	bne.n	1372a <ble_sm_enc_event_rx+0xa4>
    authenticated = 0;
   13716:	2200      	movs	r2, #0
            res.restore = 1;
   13718:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1371c:	f043 0308 	orr.w	r3, r3, #8
   13720:	f88d 301c 	strb.w	r3, [sp, #28]
            key_size = proc->key_size;
   13724:	7be3      	ldrb	r3, [r4, #15]
            bonded = 1;
   13726:	2701      	movs	r7, #1
            break;
   13728:	e004      	b.n	13734 <ble_sm_enc_event_rx+0xae>
                authenticated = 1;
   1372a:	2201      	movs	r2, #1
   1372c:	e7f4      	b.n	13718 <ble_sm_enc_event_rx+0x92>
    key_size = 0;
   1372e:	2300      	movs	r3, #0
    bonded = 0;
   13730:	461f      	mov	r7, r3
    authenticated = 0;
   13732:	461a      	mov	r2, r3
    if (evt_status == 0) {
   13734:	b1fd      	cbz	r5, 13776 <ble_sm_enc_event_rx+0xf0>
    if (proc == NULL || proc->state == BLE_SM_PROC_STATE_NONE) {
   13736:	b114      	cbz	r4, 1373e <ble_sm_enc_event_rx+0xb8>
   13738:	7b63      	ldrb	r3, [r4, #13]
   1373a:	2bff      	cmp	r3, #255	; 0xff
   1373c:	d109      	bne.n	13752 <ble_sm_enc_event_rx+0xcc>
        res.enc_cb = 1;
   1373e:	f89d 301c 	ldrb.w	r3, [sp, #28]
   13742:	f043 0302 	orr.w	r3, r3, #2
   13746:	f88d 301c 	strb.w	r3, [sp, #28]
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   1374a:	b1dd      	cbz	r5, 13784 <ble_sm_enc_event_rx+0xfe>
   1374c:	f505 7500 	add.w	r5, r5, #512	; 0x200
   13750:	9502      	str	r5, [sp, #8]
    ble_hs_unlock();
   13752:	f7fc f9ab 	bl	faac <ble_hs_unlock>
    res.bonded = bonded;
   13756:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1375a:	f367 0382 	bfi	r3, r7, #2, #1
   1375e:	f88d 301c 	strb.w	r3, [sp, #28]
    ble_sm_process_result(conn_handle, &res);
   13762:	a902      	add	r1, sp, #8
   13764:	4630      	mov	r0, r6
   13766:	f7ff ff1c 	bl	135a2 <ble_sm_process_result>
}
   1376a:	b008      	add	sp, #32
   1376c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bonded = 0;
   13770:	2700      	movs	r7, #0
                authenticated = 1;
   13772:	2201      	movs	r2, #1
   13774:	e7de      	b.n	13734 <ble_sm_enc_event_rx+0xae>
        ble_sm_update_sec_state(conn_handle, encrypted, authenticated, bonded,
   13776:	9300      	str	r3, [sp, #0]
   13778:	463b      	mov	r3, r7
   1377a:	4641      	mov	r1, r8
   1377c:	4630      	mov	r0, r6
   1377e:	f7ff f82a 	bl	127d6 <ble_sm_update_sec_state>
   13782:	e7d8      	b.n	13736 <ble_sm_enc_event_rx+0xb0>
        res.app_status = BLE_HS_HCI_ERR(evt_status);
   13784:	2500      	movs	r5, #0
   13786:	e7e3      	b.n	13750 <ble_sm_enc_event_rx+0xca>

00013788 <ble_sm_rx>:
    return res.app_status;
}

static int
ble_sm_rx(struct ble_l2cap_chan *chan)
{
   13788:	b570      	push	{r4, r5, r6, lr}
   1378a:	b088      	sub	sp, #32
   1378c:	4604      	mov	r4, r0
    struct os_mbuf **om;
    int rc;

    STATS_INC(ble_l2cap_stats, sm_rx);

    conn_handle = ble_l2cap_get_conn_handle(chan);
   1378e:	f7fe fa9c 	bl	11cca <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   13792:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13796:	4298      	cmp	r0, r3
   13798:	d025      	beq.n	137e6 <ble_sm_rx+0x5e>
   1379a:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   1379c:	f104 0610 	add.w	r6, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   137a0:	f10d 0307 	add.w	r3, sp, #7
   137a4:	2201      	movs	r2, #1
   137a6:	2100      	movs	r1, #0
   137a8:	6920      	ldr	r0, [r4, #16]
   137aa:	f7f6 fe1b 	bl	a3e4 <os_mbuf_copydata>
    if (rc != 0) {
   137ae:	b9e0      	cbnz	r0, 137ea <ble_sm_rx+0x62>
        return BLE_HS_EBADDATA;
    }

    /* Strip L2CAP SM header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   137b0:	2101      	movs	r1, #1
   137b2:	6920      	ldr	r0, [r4, #16]
   137b4:	f7f6 fe43 	bl	a43e <os_mbuf_adj>

    rx_cb = ble_sm_dispatch_get(op);
   137b8:	f89d 0007 	ldrb.w	r0, [sp, #7]
   137bc:	f7fe fe04 	bl	123c8 <ble_sm_dispatch_get>
    if (rx_cb != NULL) {
   137c0:	4604      	mov	r4, r0
   137c2:	b1a8      	cbz	r0, 137f0 <ble_sm_rx+0x68>
        memset(&res, 0, sizeof res);
   137c4:	2300      	movs	r3, #0
   137c6:	9302      	str	r3, [sp, #8]
   137c8:	9303      	str	r3, [sp, #12]
   137ca:	9304      	str	r3, [sp, #16]
   137cc:	9305      	str	r3, [sp, #20]
   137ce:	9306      	str	r3, [sp, #24]
   137d0:	9307      	str	r3, [sp, #28]

        rx_cb(conn_handle, om, &res);
   137d2:	aa02      	add	r2, sp, #8
   137d4:	4631      	mov	r1, r6
   137d6:	4628      	mov	r0, r5
   137d8:	47a0      	blx	r4
        ble_sm_process_result(conn_handle, &res);
   137da:	a902      	add	r1, sp, #8
   137dc:	4628      	mov	r0, r5
   137de:	f7ff fee0 	bl	135a2 <ble_sm_process_result>
        rc = res.app_status;
   137e2:	9802      	ldr	r0, [sp, #8]
   137e4:	e002      	b.n	137ec <ble_sm_rx+0x64>
        return BLE_HS_ENOTCONN;
   137e6:	2007      	movs	r0, #7
   137e8:	e000      	b.n	137ec <ble_sm_rx+0x64>
        return BLE_HS_EBADDATA;
   137ea:	200a      	movs	r0, #10
    } else {
        rc = BLE_HS_ENOTSUP;
    }

    return rc;
}
   137ec:	b008      	add	sp, #32
   137ee:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   137f0:	2008      	movs	r0, #8
   137f2:	e7fb      	b.n	137ec <ble_sm_rx+0x64>

000137f4 <ble_sm_enc_change_rx>:
{
   137f4:	b508      	push	{r3, lr}
                        ev->enabled & 0x01);
   137f6:	78c2      	ldrb	r2, [r0, #3]
    ble_sm_enc_event_rx(le16toh(ev->connection_handle), ev->status,
   137f8:	f002 0201 	and.w	r2, r2, #1
   137fc:	7801      	ldrb	r1, [r0, #0]
   137fe:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   13802:	f7ff ff40 	bl	13686 <ble_sm_enc_event_rx>
}
   13806:	bd08      	pop	{r3, pc}

00013808 <ble_sm_enc_key_refresh_rx>:
{
   13808:	b508      	push	{r3, lr}
    ble_sm_enc_event_rx(le16toh(ev->conn_handle), ev->status, 1);
   1380a:	2201      	movs	r2, #1
   1380c:	7801      	ldrb	r1, [r0, #0]
   1380e:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   13812:	f7ff ff38 	bl	13686 <ble_sm_enc_event_rx>
}
   13816:	bd08      	pop	{r3, pc}

00013818 <ble_sm_ltk_req_rx>:
{
   13818:	b5f0      	push	{r4, r5, r6, r7, lr}
   1381a:	b0a9      	sub	sp, #164	; 0xa4
   1381c:	4606      	mov	r6, r0
    uint16_t conn_handle = le16toh(ev->conn_handle);
   1381e:	f8b0 7001 	ldrh.w	r7, [r0, #1]
   13822:	b2bd      	uxth	r5, r7
    memset(&res, 0, sizeof res);
   13824:	2400      	movs	r4, #0
   13826:	9407      	str	r4, [sp, #28]
   13828:	9408      	str	r4, [sp, #32]
   1382a:	9409      	str	r4, [sp, #36]	; 0x24
   1382c:	940a      	str	r4, [sp, #40]	; 0x28
   1382e:	940b      	str	r4, [sp, #44]	; 0x2c
   13830:	940c      	str	r4, [sp, #48]	; 0x30
    ble_hs_lock();
   13832:	f7fc f937 	bl	faa4 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, 0, NULL);
   13836:	4623      	mov	r3, r4
   13838:	4622      	mov	r2, r4
   1383a:	21ff      	movs	r1, #255	; 0xff
   1383c:	4628      	mov	r0, r5
   1383e:	f7ff fbd5 	bl	12fec <ble_sm_proc_find>
    if (proc == NULL) {
   13842:	b168      	cbz	r0, 13860 <ble_sm_ltk_req_rx+0x48>
   13844:	4604      	mov	r4, r0
    } else if (proc->state == BLE_SM_PROC_STATE_SEC_REQ) {
   13846:	7b43      	ldrb	r3, [r0, #13]
   13848:	2b08      	cmp	r3, #8
   1384a:	d01c      	beq.n	13886 <ble_sm_ltk_req_rx+0x6e>
    } else if (proc->state == BLE_SM_PROC_STATE_LTK_START) {
   1384c:	2b03      	cmp	r3, #3
   1384e:	d13c      	bne.n	138ca <ble_sm_ltk_req_rx+0xb2>
        res.execute = 1;
   13850:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13854:	f043 0301 	orr.w	r3, r3, #1
   13858:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        restore = 0;
   1385c:	2700      	movs	r7, #0
   1385e:	e027      	b.n	138b0 <ble_sm_ltk_req_rx+0x98>
        proc = ble_sm_proc_alloc();
   13860:	f7ff fad4 	bl	12e0c <ble_sm_proc_alloc>
        if (proc == NULL) {
   13864:	4604      	mov	r4, r0
   13866:	b158      	cbz	r0, 13880 <ble_sm_ltk_req_rx+0x68>
            proc->conn_handle = conn_handle;
   13868:	8147      	strh	r7, [r0, #10]
            proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   1386a:	2304      	movs	r3, #4
   1386c:	7343      	strb	r3, [r0, #13]
            ble_sm_insert(proc);
   1386e:	f7fe fde7 	bl	12440 <ble_sm_insert>
            res.execute = 1;
   13872:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   13876:	f043 0301 	orr.w	r3, r3, #1
   1387a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
   1387e:	e00a      	b.n	13896 <ble_sm_ltk_req_rx+0x7e>
            res.app_status = BLE_HS_ENOMEM;
   13880:	2306      	movs	r3, #6
   13882:	9307      	str	r3, [sp, #28]
   13884:	e007      	b.n	13896 <ble_sm_ltk_req_rx+0x7e>
        proc->state = BLE_SM_PROC_STATE_LTK_RESTORE;
   13886:	2304      	movs	r3, #4
   13888:	7343      	strb	r3, [r0, #13]
        res.execute = 1;
   1388a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
   1388e:	f043 0301 	orr.w	r3, r3, #1
   13892:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
        conn = ble_hs_conn_find_assert(conn_handle);
   13896:	4628      	mov	r0, r5
   13898:	f7fc ff26 	bl	106e8 <ble_hs_conn_find_assert>
        ble_hs_conn_addrs(conn, &addrs);
   1389c:	a90d      	add	r1, sp, #52	; 0x34
   1389e:	f7fc ff43 	bl	10728 <ble_hs_conn_addrs>
        memcpy(peer_id_addr, addrs.peer_id_addr.val, 6);
   138a2:	ab0f      	add	r3, sp, #60	; 0x3c
   138a4:	e893 0003 	ldmia.w	r3, {r0, r1}
   138a8:	9005      	str	r0, [sp, #20]
   138aa:	f8ad 1018 	strh.w	r1, [sp, #24]
   138ae:	2701      	movs	r7, #1
    ble_hs_unlock();
   138b0:	f7fc f8fc 	bl	faac <ble_hs_unlock>
    if (proc == NULL) {
   138b4:	b17c      	cbz	r4, 138d6 <ble_sm_ltk_req_rx+0xbe>
    if (res.app_status == 0) {
   138b6:	9b07      	ldr	r3, [sp, #28]
   138b8:	b903      	cbnz	r3, 138bc <ble_sm_ltk_req_rx+0xa4>
        if (restore) {
   138ba:	b977      	cbnz	r7, 138da <ble_sm_ltk_req_rx+0xc2>
    ble_sm_process_result(conn_handle, &res);
   138bc:	a907      	add	r1, sp, #28
   138be:	4628      	mov	r0, r5
   138c0:	f7ff fe6f 	bl	135a2 <ble_sm_process_result>
    return 0;
   138c4:	2000      	movs	r0, #0
}
   138c6:	b029      	add	sp, #164	; 0xa4
   138c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ble_sm_ltk_req_neg_reply_tx(conn_handle);
   138ca:	4628      	mov	r0, r5
   138cc:	f7ff f98c 	bl	12be8 <ble_sm_ltk_req_neg_reply_tx>
        restore = 0;
   138d0:	2700      	movs	r7, #0
        proc = NULL;
   138d2:	463c      	mov	r4, r7
   138d4:	e7ec      	b.n	138b0 <ble_sm_ltk_req_rx+0x98>
        return res.app_status;
   138d6:	9807      	ldr	r0, [sp, #28]
   138d8:	e7f5      	b.n	138c6 <ble_sm_ltk_req_rx+0xae>
            store_rc = ble_sm_retrieve_ltk(le16toh(ev->div), le64toh(ev->rand),
   138da:	f8b6 000b 	ldrh.w	r0, [r6, #11]
   138de:	f8d6 2003 	ldr.w	r2, [r6, #3]
   138e2:	f8d6 3007 	ldr.w	r3, [r6, #7]
   138e6:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   138ea:	ac14      	add	r4, sp, #80	; 0x50
   138ec:	9402      	str	r4, [sp, #8]
   138ee:	ac05      	add	r4, sp, #20
   138f0:	9401      	str	r4, [sp, #4]
   138f2:	9100      	str	r1, [sp, #0]
   138f4:	f7ff fa9a 	bl	12e2c <ble_sm_retrieve_ltk>
            if (store_rc == 0) {
   138f8:	b910      	cbnz	r0, 13900 <ble_sm_ltk_req_rx+0xe8>
                res.state_arg = &value_sec;
   138fa:	ab14      	add	r3, sp, #80	; 0x50
   138fc:	930b      	str	r3, [sp, #44]	; 0x2c
   138fe:	e7dd      	b.n	138bc <ble_sm_ltk_req_rx+0xa4>
                res.state_arg = NULL;
   13900:	2300      	movs	r3, #0
   13902:	930b      	str	r3, [sp, #44]	; 0x2c
   13904:	e7da      	b.n	138bc <ble_sm_ltk_req_rx+0xa4>

00013906 <ble_sm_our_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   13906:	7a03      	ldrb	r3, [r0, #8]
   13908:	f013 0f01 	tst.w	r3, #1
   1390c:	d101      	bne.n	13912 <ble_sm_our_pair_rand+0xc>
        return proc->rands;
   1390e:	304e      	adds	r0, #78	; 0x4e
}
   13910:	4770      	bx	lr
        return proc->randm;
   13912:	303e      	adds	r0, #62	; 0x3e
   13914:	4770      	bx	lr

00013916 <ble_sm_pair_exec>:
{
   13916:	b5f0      	push	{r4, r5, r6, r7, lr}
   13918:	b083      	sub	sp, #12
   1391a:	4605      	mov	r5, r0
   1391c:	460e      	mov	r6, r1
    is_req = proc->flags & BLE_SM_PROC_F_INITIATOR;
   1391e:	7a03      	ldrb	r3, [r0, #8]
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   13920:	f013 0401 	ands.w	r4, r3, #1
   13924:	d01d      	beq.n	13962 <ble_sm_pair_exec+0x4c>
   13926:	2001      	movs	r0, #1
   13928:	aa01      	add	r2, sp, #4
   1392a:	2106      	movs	r1, #6
   1392c:	f000 f9ea 	bl	13d04 <ble_sm_cmd_get>
    if (cmd == NULL) {
   13930:	4607      	mov	r7, r0
   13932:	2800      	cmp	r0, #0
   13934:	d03f      	beq.n	139b6 <ble_sm_pair_exec+0xa0>
    if (is_req) {
   13936:	b1b4      	cbz	r4, 13966 <ble_sm_pair_exec+0x50>
        ble_sm_pair_req_fill(proc);
   13938:	4628      	mov	r0, r5
   1393a:	f7fe fde3 	bl	12504 <ble_sm_pair_req_fill>
        memcpy(cmd, proc->pair_req + 1, sizeof(*cmd));
   1393e:	462b      	mov	r3, r5
   13940:	f853 2f11 	ldr.w	r2, [r3, #17]!
   13944:	603a      	str	r2, [r7, #0]
   13946:	889b      	ldrh	r3, [r3, #4]
   13948:	80bb      	strh	r3, [r7, #4]
    rc = ble_sm_tx(proc->conn_handle, txom);
   1394a:	9901      	ldr	r1, [sp, #4]
   1394c:	8968      	ldrh	r0, [r5, #10]
   1394e:	f000 f9f3 	bl	13d38 <ble_sm_tx>
    if (rc != 0) {
   13952:	4603      	mov	r3, r0
   13954:	b300      	cbz	r0, 13998 <ble_sm_pair_exec+0x82>
    res->app_status = rc;
   13956:	6033      	str	r3, [r6, #0]
    if (!is_req) {
   13958:	b90c      	cbnz	r4, 1395e <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   1395a:	2308      	movs	r3, #8
   1395c:	7133      	strb	r3, [r6, #4]
}
   1395e:	b003      	add	sp, #12
   13960:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cmd = ble_sm_cmd_get(is_req ? BLE_SM_OP_PAIR_REQ : BLE_SM_OP_PAIR_RSP,
   13962:	2002      	movs	r0, #2
   13964:	e7e0      	b.n	13928 <ble_sm_pair_exec+0x12>
        memcpy(cmd, proc->pair_rsp + 1, sizeof(*cmd));
   13966:	462b      	mov	r3, r5
   13968:	f853 2f18 	ldr.w	r2, [r3, #24]!
   1396c:	6002      	str	r2, [r0, #0]
   1396e:	889b      	ldrh	r3, [r3, #4]
   13970:	8083      	strh	r3, [r0, #4]
        proc->state = ble_sm_state_after_pair(proc);
   13972:	4628      	mov	r0, r5
   13974:	f7fe fdac 	bl	124d0 <ble_sm_state_after_pair>
   13978:	7368      	strb	r0, [r5, #13]
        rc = ble_sm_io_action(proc, &ioact);
   1397a:	f10d 0103 	add.w	r1, sp, #3
   1397e:	4628      	mov	r0, r5
   13980:	f7fe fdf7 	bl	12572 <ble_sm_io_action>
        if (ble_sm_ioact_state(ioact) == proc->state) {
   13984:	f89d 7003 	ldrb.w	r7, [sp, #3]
   13988:	4638      	mov	r0, r7
   1398a:	f7ff fd29 	bl	133e0 <ble_sm_ioact_state>
   1398e:	7b6b      	ldrb	r3, [r5, #13]
   13990:	4298      	cmp	r0, r3
   13992:	d1da      	bne.n	1394a <ble_sm_pair_exec+0x34>
            res->passkey_params.action = ioact;
   13994:	7237      	strb	r7, [r6, #8]
   13996:	e7d8      	b.n	1394a <ble_sm_pair_exec+0x34>
    res->app_status = ble_sm_gen_pair_rand(ble_sm_our_pair_rand(proc));
   13998:	4628      	mov	r0, r5
   1399a:	f7ff ffb4 	bl	13906 <ble_sm_our_pair_rand>
   1399e:	f7ff fae4 	bl	12f6a <ble_sm_gen_pair_rand>
   139a2:	6030      	str	r0, [r6, #0]
    if (res->app_status != 0) {
   139a4:	2800      	cmp	r0, #0
   139a6:	d0da      	beq.n	1395e <ble_sm_pair_exec+0x48>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   139a8:	2308      	movs	r3, #8
   139aa:	7133      	strb	r3, [r6, #4]
        res->enc_cb = 1;
   139ac:	7d33      	ldrb	r3, [r6, #20]
   139ae:	f043 0302 	orr.w	r3, r3, #2
   139b2:	7533      	strb	r3, [r6, #20]
        return;
   139b4:	e7d3      	b.n	1395e <ble_sm_pair_exec+0x48>
        rc = BLE_HS_ENOMEM;
   139b6:	2306      	movs	r3, #6
   139b8:	e7cd      	b.n	13956 <ble_sm_pair_exec+0x40>

000139ba <ble_sm_peer_pair_rand>:
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   139ba:	7a03      	ldrb	r3, [r0, #8]
   139bc:	f013 0f01 	tst.w	r3, #1
   139c0:	d101      	bne.n	139c6 <ble_sm_peer_pair_rand+0xc>
        return proc->randm;
   139c2:	303e      	adds	r0, #62	; 0x3e
}
   139c4:	4770      	bx	lr
        return proc->rands;
   139c6:	304e      	adds	r0, #78	; 0x4e
   139c8:	4770      	bx	lr

000139ca <ble_sm_random_rx>:
{
   139ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139cc:	4606      	mov	r6, r0
   139ce:	460d      	mov	r5, r1
   139d0:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   139d2:	2110      	movs	r1, #16
   139d4:	4628      	mov	r0, r5
   139d6:	f7fd fdec 	bl	115b2 <ble_hs_mbuf_pullup_base>
   139da:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   139dc:	b130      	cbz	r0, 139ec <ble_sm_random_rx+0x22>
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   139de:	2308      	movs	r3, #8
   139e0:	7123      	strb	r3, [r4, #4]
        res->enc_cb = 1;
   139e2:	7d23      	ldrb	r3, [r4, #20]
   139e4:	f043 0302 	orr.w	r3, r3, #2
   139e8:	7523      	strb	r3, [r4, #20]
}
   139ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cmd = (struct ble_sm_pair_random *)(*om)->om_data;
   139ec:	682b      	ldr	r3, [r5, #0]
   139ee:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   139f0:	f7fc f858 	bl	faa4 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_RANDOM, -1, NULL);
   139f4:	2300      	movs	r3, #0
   139f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   139fa:	2102      	movs	r1, #2
   139fc:	4630      	mov	r0, r6
   139fe:	f7ff faf5 	bl	12fec <ble_sm_proc_find>
    if (proc == NULL) {
   13a02:	4606      	mov	r6, r0
   13a04:	b190      	cbz	r0, 13a2c <ble_sm_random_rx+0x62>
        memcpy(ble_sm_peer_pair_rand(proc), cmd->value, 16);
   13a06:	f7ff ffd8 	bl	139ba <ble_sm_peer_pair_rand>
   13a0a:	682f      	ldr	r7, [r5, #0]
   13a0c:	6869      	ldr	r1, [r5, #4]
   13a0e:	68aa      	ldr	r2, [r5, #8]
   13a10:	68eb      	ldr	r3, [r5, #12]
   13a12:	6007      	str	r7, [r0, #0]
   13a14:	6041      	str	r1, [r0, #4]
   13a16:	6082      	str	r2, [r0, #8]
   13a18:	60c3      	str	r3, [r0, #12]
        if (proc->flags & BLE_SM_PROC_F_SC) {
   13a1a:	7a33      	ldrb	r3, [r6, #8]
   13a1c:	f013 0f10 	tst.w	r3, #16
   13a20:	d106      	bne.n	13a30 <ble_sm_random_rx+0x66>
            ble_sm_lgcy_random_rx(proc, res);
   13a22:	4621      	mov	r1, r4
   13a24:	4630      	mov	r0, r6
   13a26:	f000 fa8f 	bl	13f48 <ble_sm_lgcy_random_rx>
   13a2a:	e001      	b.n	13a30 <ble_sm_random_rx+0x66>
        res->app_status = BLE_HS_ENOENT;
   13a2c:	2305      	movs	r3, #5
   13a2e:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   13a30:	f7fc f83c 	bl	faac <ble_hs_unlock>
   13a34:	e7d9      	b.n	139ea <ble_sm_random_rx+0x20>

00013a36 <ble_sm_timer>:
{
   13a36:	b530      	push	{r4, r5, lr}
   13a38:	b083      	sub	sp, #12
    ticks_until_exp = ble_sm_extract_expired(&exp_list);
   13a3a:	4668      	mov	r0, sp
   13a3c:	f7ff f930 	bl	12ca0 <ble_sm_extract_expired>
   13a40:	4605      	mov	r5, r0
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   13a42:	e002      	b.n	13a4a <ble_sm_timer+0x14>
        ble_sm_proc_free(proc);
   13a44:	4620      	mov	r0, r4
   13a46:	f7ff f9d7 	bl	12df8 <ble_sm_proc_free>
    while ((proc = STAILQ_FIRST(&exp_list)) != NULL) {
   13a4a:	9c00      	ldr	r4, [sp, #0]
   13a4c:	b16c      	cbz	r4, 13a6a <ble_sm_timer+0x34>
        ble_gap_enc_event(proc->conn_handle, BLE_HS_ETIMEOUT, 0, 0);
   13a4e:	2300      	movs	r3, #0
   13a50:	461a      	mov	r2, r3
   13a52:	210d      	movs	r1, #13
   13a54:	8960      	ldrh	r0, [r4, #10]
   13a56:	f7f9 ff38 	bl	d8ca <ble_gap_enc_event>
        STAILQ_REMOVE_HEAD(&exp_list, next);
   13a5a:	9b00      	ldr	r3, [sp, #0]
   13a5c:	681b      	ldr	r3, [r3, #0]
   13a5e:	9300      	str	r3, [sp, #0]
   13a60:	2b00      	cmp	r3, #0
   13a62:	d1ef      	bne.n	13a44 <ble_sm_timer+0xe>
   13a64:	f8cd d004 	str.w	sp, [sp, #4]
   13a68:	e7ec      	b.n	13a44 <ble_sm_timer+0xe>
}
   13a6a:	4628      	mov	r0, r5
   13a6c:	b003      	add	sp, #12
   13a6e:	bd30      	pop	{r4, r5, pc}

00013a70 <ble_sm_pair_initiate>:
{
   13a70:	b530      	push	{r4, r5, lr}
   13a72:	b087      	sub	sp, #28
   13a74:	4605      	mov	r5, r0
    memset(&res, 0, sizeof(res));
   13a76:	2400      	movs	r4, #0
   13a78:	9400      	str	r4, [sp, #0]
   13a7a:	9401      	str	r4, [sp, #4]
   13a7c:	9402      	str	r4, [sp, #8]
   13a7e:	9403      	str	r4, [sp, #12]
   13a80:	9404      	str	r4, [sp, #16]
   13a82:	9405      	str	r4, [sp, #20]
    ble_hs_lock();
   13a84:	f7fc f80e 	bl	faa4 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   13a88:	4623      	mov	r3, r4
   13a8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13a8e:	21ff      	movs	r1, #255	; 0xff
   13a90:	4628      	mov	r0, r5
   13a92:	f7ff faab 	bl	12fec <ble_sm_proc_find>
   13a96:	4604      	mov	r4, r0
    ble_hs_unlock();
   13a98:	f7fc f808 	bl	faac <ble_hs_unlock>
    if (proc != NULL) {
   13a9c:	b11c      	cbz	r4, 13aa6 <ble_sm_pair_initiate+0x36>
        return BLE_HS_EALREADY;
   13a9e:	2302      	movs	r3, #2
}
   13aa0:	4618      	mov	r0, r3
   13aa2:	b007      	add	sp, #28
   13aa4:	bd30      	pop	{r4, r5, pc}
    rc = ble_sm_chk_store_overflow(conn_handle);
   13aa6:	4628      	mov	r0, r5
   13aa8:	f7fe fd03 	bl	124b2 <ble_sm_chk_store_overflow>
    if (rc != 0) {
   13aac:	4603      	mov	r3, r0
   13aae:	2800      	cmp	r0, #0
   13ab0:	d1f6      	bne.n	13aa0 <ble_sm_pair_initiate+0x30>
    proc = ble_sm_proc_alloc();
   13ab2:	f7ff f9ab 	bl	12e0c <ble_sm_proc_alloc>
    if (proc == NULL) {
   13ab6:	4604      	mov	r4, r0
   13ab8:	b1d0      	cbz	r0, 13af0 <ble_sm_pair_initiate+0x80>
        proc->conn_handle = conn_handle;
   13aba:	8145      	strh	r5, [r0, #10]
        proc->state = BLE_SM_PROC_STATE_PAIR;
   13abc:	2300      	movs	r3, #0
   13abe:	7343      	strb	r3, [r0, #13]
        proc->flags |= BLE_SM_PROC_F_INITIATOR;
   13ac0:	7a03      	ldrb	r3, [r0, #8]
   13ac2:	f043 0301 	orr.w	r3, r3, #1
   13ac6:	7203      	strb	r3, [r0, #8]
        ble_hs_lock();
   13ac8:	f7fb ffec 	bl	faa4 <ble_hs_lock>
        ble_sm_insert(proc);
   13acc:	4620      	mov	r0, r4
   13ace:	f7fe fcb7 	bl	12440 <ble_sm_insert>
        ble_hs_unlock();
   13ad2:	f7fb ffeb 	bl	faac <ble_hs_unlock>
        res.execute = 1;
   13ad6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   13ada:	f043 0301 	orr.w	r3, r3, #1
   13ade:	f88d 3014 	strb.w	r3, [sp, #20]
    if (proc != NULL) {
   13ae2:	b11c      	cbz	r4, 13aec <ble_sm_pair_initiate+0x7c>
        ble_sm_process_result(conn_handle, &res);
   13ae4:	4669      	mov	r1, sp
   13ae6:	4628      	mov	r0, r5
   13ae8:	f7ff fd5b 	bl	135a2 <ble_sm_process_result>
    return res.app_status;
   13aec:	9b00      	ldr	r3, [sp, #0]
   13aee:	e7d7      	b.n	13aa0 <ble_sm_pair_initiate+0x30>
        res.app_status = BLE_HS_ENOMEM;
   13af0:	2306      	movs	r3, #6
   13af2:	9300      	str	r3, [sp, #0]
   13af4:	e7f5      	b.n	13ae2 <ble_sm_pair_initiate+0x72>

00013af6 <ble_sm_enc_initiate>:
{
   13af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13afa:	b08e      	sub	sp, #56	; 0x38
   13afc:	4605      	mov	r5, r0
   13afe:	4688      	mov	r8, r1
   13b00:	4616      	mov	r6, r2
   13b02:	461f      	mov	r7, r3
    memset(&res, 0, sizeof res);
   13b04:	2400      	movs	r4, #0
   13b06:	9408      	str	r4, [sp, #32]
   13b08:	9409      	str	r4, [sp, #36]	; 0x24
   13b0a:	940a      	str	r4, [sp, #40]	; 0x28
   13b0c:	940b      	str	r4, [sp, #44]	; 0x2c
   13b0e:	940c      	str	r4, [sp, #48]	; 0x30
   13b10:	940d      	str	r4, [sp, #52]	; 0x34
    ble_hs_lock();
   13b12:	f7fb ffc7 	bl	faa4 <ble_hs_lock>
    proc = ble_sm_proc_find(conn_handle, BLE_SM_PROC_STATE_NONE, -1, NULL);
   13b16:	4623      	mov	r3, r4
   13b18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   13b1c:	21ff      	movs	r1, #255	; 0xff
   13b1e:	4628      	mov	r0, r5
   13b20:	f7ff fa64 	bl	12fec <ble_sm_proc_find>
    if (proc != NULL) {
   13b24:	b158      	cbz	r0, 13b3e <ble_sm_enc_initiate+0x48>
        res.app_status = BLE_HS_EALREADY;
   13b26:	2302      	movs	r3, #2
   13b28:	9308      	str	r3, [sp, #32]
    ble_hs_unlock();
   13b2a:	f7fb ffbf 	bl	faac <ble_hs_unlock>
    ble_sm_process_result(conn_handle, &res);
   13b2e:	a908      	add	r1, sp, #32
   13b30:	4628      	mov	r0, r5
   13b32:	f7ff fd36 	bl	135a2 <ble_sm_process_result>
}
   13b36:	9808      	ldr	r0, [sp, #32]
   13b38:	b00e      	add	sp, #56	; 0x38
   13b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        proc = ble_sm_proc_alloc();
   13b3e:	f7ff f965 	bl	12e0c <ble_sm_proc_alloc>
        if (proc == NULL) {
   13b42:	4603      	mov	r3, r0
   13b44:	b338      	cbz	r0, 13b96 <ble_sm_enc_initiate+0xa0>
            proc->conn_handle = conn_handle;
   13b46:	8145      	strh	r5, [r0, #10]
            proc->key_size = key_size;
   13b48:	f880 800f 	strb.w	r8, [r0, #15]
            proc->state = BLE_SM_PROC_STATE_ENC_RESTORE;
   13b4c:	2206      	movs	r2, #6
   13b4e:	7342      	strb	r2, [r0, #13]
            proc->flags |= BLE_SM_PROC_F_INITIATOR;
   13b50:	7a02      	ldrb	r2, [r0, #8]
   13b52:	f042 0201 	orr.w	r2, r2, #1
   13b56:	7202      	strb	r2, [r0, #8]
            if (auth) {
   13b58:	9916      	ldr	r1, [sp, #88]	; 0x58
   13b5a:	b111      	cbz	r1, 13b62 <ble_sm_enc_initiate+0x6c>
                proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   13b5c:	f042 0208 	orr.w	r2, r2, #8
   13b60:	7202      	strb	r2, [r0, #8]
            ble_sm_insert(proc);
   13b62:	4618      	mov	r0, r3
   13b64:	f7fe fc6c 	bl	12440 <ble_sm_insert>
            cmd.connection_handle = conn_handle;
   13b68:	f8ad 5000 	strh.w	r5, [sp]
            cmd.encrypted_diversifier = ediv;
   13b6c:	f8ad 7002 	strh.w	r7, [sp, #2]
            cmd.random_number = rand_val;
   13b70:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   13b74:	e9cd 2302 	strd	r2, r3, [sp, #8]
            memcpy(cmd.long_term_key, ltk, sizeof cmd.long_term_key);
   13b78:	ac04      	add	r4, sp, #16
   13b7a:	6830      	ldr	r0, [r6, #0]
   13b7c:	6871      	ldr	r1, [r6, #4]
   13b7e:	68b2      	ldr	r2, [r6, #8]
   13b80:	68f3      	ldr	r3, [r6, #12]
   13b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            res.execute = 1;
   13b84:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
   13b88:	f043 0301 	orr.w	r3, r3, #1
   13b8c:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
            res.state_arg = &cmd;
   13b90:	f8cd d030 	str.w	sp, [sp, #48]	; 0x30
   13b94:	e7c9      	b.n	13b2a <ble_sm_enc_initiate+0x34>
            res.app_status = BLE_HS_ENOMEM;
   13b96:	2306      	movs	r3, #6
   13b98:	9308      	str	r3, [sp, #32]
   13b9a:	e7c6      	b.n	13b2a <ble_sm_enc_initiate+0x34>

00013b9c <ble_sm_sec_req_rx>:
{
   13b9c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
   13ba0:	b0a8      	sub	sp, #160	; 0xa0
   13ba2:	4606      	mov	r6, r0
   13ba4:	460d      	mov	r5, r1
   13ba6:	4614      	mov	r4, r2
    res->app_status = ble_hs_mbuf_pullup_base(om, sizeof(*cmd));
   13ba8:	2101      	movs	r1, #1
   13baa:	4628      	mov	r0, r5
   13bac:	f7fd fd01 	bl	115b2 <ble_hs_mbuf_pullup_base>
   13bb0:	6020      	str	r0, [r4, #0]
    if (res->app_status != 0) {
   13bb2:	b110      	cbz	r0, 13bba <ble_sm_sec_req_rx+0x1e>
}
   13bb4:	b028      	add	sp, #160	; 0xa0
   13bb6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    cmd = (struct ble_sm_sec_req *)(*om)->om_data;
   13bba:	682b      	ldr	r3, [r5, #0]
   13bbc:	681d      	ldr	r5, [r3, #0]
    ble_hs_lock();
   13bbe:	f7fb ff71 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   13bc2:	4630      	mov	r0, r6
   13bc4:	f7fc fd90 	bl	106e8 <ble_hs_conn_find_assert>
    if (!(conn->bhc_flags & BLE_HS_CONN_F_MASTER)) {
   13bc8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   13bcc:	f013 0f01 	tst.w	r3, #1
   13bd0:	d132      	bne.n	13c38 <ble_sm_sec_req_rx+0x9c>
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CMD_NOT_SUPP);
   13bd2:	f240 4307 	movw	r3, #1031	; 0x407
   13bd6:	6023      	str	r3, [r4, #0]
        res->sm_err = BLE_SM_ERR_CMD_NOT_SUPP;
   13bd8:	2307      	movs	r3, #7
   13bda:	7123      	strb	r3, [r4, #4]
    ble_hs_unlock();
   13bdc:	f7fb ff66 	bl	faac <ble_hs_unlock>
    if (res->app_status == 0) {
   13be0:	6823      	ldr	r3, [r4, #0]
   13be2:	2b00      	cmp	r3, #0
   13be4:	d1e6      	bne.n	13bb4 <ble_sm_sec_req_rx+0x18>
        if (cmd->authreq & BLE_SM_PAIR_AUTHREQ_BOND) {
   13be6:	782b      	ldrb	r3, [r5, #0]
   13be8:	f013 0f01 	tst.w	r3, #1
   13bec:	d141      	bne.n	13c72 <ble_sm_sec_req_rx+0xd6>
            res->app_status = BLE_HS_ENOENT;
   13bee:	2305      	movs	r3, #5
   13bf0:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   13bf2:	6823      	ldr	r3, [r4, #0]
   13bf4:	b953      	cbnz	r3, 13c0c <ble_sm_sec_req_rx+0x70>
            authreq_mitm = cmd->authreq & BLE_SM_PAIR_AUTHREQ_MITM;
   13bf6:	782b      	ldrb	r3, [r5, #0]
            if (authreq_mitm && !value_sec.authenticated) {
   13bf8:	f013 0f04 	tst.w	r3, #4
   13bfc:	d006      	beq.n	13c0c <ble_sm_sec_req_rx+0x70>
   13bfe:	f89d 309a 	ldrb.w	r3, [sp, #154]	; 0x9a
   13c02:	f013 0f02 	tst.w	r3, #2
   13c06:	d101      	bne.n	13c0c <ble_sm_sec_req_rx+0x70>
                res->app_status = BLE_HS_EREJECT;
   13c08:	2310      	movs	r3, #16
   13c0a:	6023      	str	r3, [r4, #0]
        if (res->app_status == 0) {
   13c0c:	6823      	ldr	r3, [r4, #0]
   13c0e:	2b00      	cmp	r3, #0
   13c10:	d135      	bne.n	13c7e <ble_sm_sec_req_rx+0xe2>
                                                  value_sec.authenticated);
   13c12:	f89d 209a 	ldrb.w	r2, [sp, #154]	; 0x9a
   13c16:	f3c2 0240 	ubfx	r2, r2, #1, #1
            res->app_status = ble_sm_enc_initiate(conn_handle,
   13c1a:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
   13c1e:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
   13c22:	9202      	str	r2, [sp, #8]
   13c24:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
   13c28:	e9cd 8900 	strd	r8, r9, [sp]
   13c2c:	aa1a      	add	r2, sp, #104	; 0x68
   13c2e:	4630      	mov	r0, r6
   13c30:	f7ff ff61 	bl	13af6 <ble_sm_enc_initiate>
   13c34:	6020      	str	r0, [r4, #0]
   13c36:	e7bd      	b.n	13bb4 <ble_sm_sec_req_rx+0x18>
        ble_hs_conn_addrs(conn, &addrs);
   13c38:	a905      	add	r1, sp, #20
   13c3a:	f7fc fd75 	bl	10728 <ble_hs_conn_addrs>
        memset(&key_sec, 0, sizeof key_sec);
   13c3e:	2300      	movs	r3, #0
   13c40:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   13c44:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   13c48:	f8cd 303e 	str.w	r3, [sp, #62]	; 0x3e
   13c4c:	f8cd 3042 	str.w	r3, [sp, #66]	; 0x42
   13c50:	f8cd 3046 	str.w	r3, [sp, #70]	; 0x46
   13c54:	f8cd 304a 	str.w	r3, [sp, #74]	; 0x4a
   13c58:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
        key_sec.peer_addr = addrs.peer_id_addr;
   13c5c:	ab28      	add	r3, sp, #160	; 0xa0
   13c5e:	f853 0d85 	ldr.w	r0, [r3, #-133]!
   13c62:	900c      	str	r0, [sp, #48]	; 0x30
   13c64:	889a      	ldrh	r2, [r3, #4]
   13c66:	799b      	ldrb	r3, [r3, #6]
   13c68:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
   13c6c:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
   13c70:	e7b4      	b.n	13bdc <ble_sm_sec_req_rx+0x40>
            res->app_status = ble_store_read_peer_sec(&key_sec, &value_sec);
   13c72:	a914      	add	r1, sp, #80	; 0x50
   13c74:	a80c      	add	r0, sp, #48	; 0x30
   13c76:	f000 fa34 	bl	140e2 <ble_store_read_peer_sec>
   13c7a:	6020      	str	r0, [r4, #0]
   13c7c:	e7b9      	b.n	13bf2 <ble_sm_sec_req_rx+0x56>
            res->app_status = ble_sm_pair_initiate(conn_handle);
   13c7e:	4630      	mov	r0, r6
   13c80:	f7ff fef6 	bl	13a70 <ble_sm_pair_initiate>
   13c84:	6020      	str	r0, [r4, #0]
   13c86:	e795      	b.n	13bb4 <ble_sm_sec_req_rx+0x18>

00013c88 <ble_sm_connection_broken>:
    return res.app_status;
}

void
ble_sm_connection_broken(uint16_t conn_handle)
{
   13c88:	b500      	push	{lr}
   13c8a:	b087      	sub	sp, #28
    struct ble_sm_result res;

    memset(&res, 0, sizeof res);
   13c8c:	2300      	movs	r3, #0
   13c8e:	9301      	str	r3, [sp, #4]
   13c90:	9302      	str	r3, [sp, #8]
   13c92:	9303      	str	r3, [sp, #12]
   13c94:	9304      	str	r3, [sp, #16]
   13c96:	9305      	str	r3, [sp, #20]
    res.app_status = BLE_HS_ENOTCONN;
   13c98:	2307      	movs	r3, #7
   13c9a:	9300      	str	r3, [sp, #0]
    res.enc_cb = 1;
   13c9c:	2302      	movs	r3, #2
   13c9e:	f88d 3014 	strb.w	r3, [sp, #20]

    ble_sm_process_result(conn_handle, &res);
   13ca2:	4669      	mov	r1, sp
   13ca4:	f7ff fc7d 	bl	135a2 <ble_sm_process_result>
}
   13ca8:	b007      	add	sp, #28
   13caa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

00013cb0 <ble_sm_init>:

int
ble_sm_init(void)
{
   13cb0:	b500      	push	{lr}
   13cb2:	b083      	sub	sp, #12
    int rc;

    STAILQ_INIT(&ble_sm_procs);
   13cb4:	4b07      	ldr	r3, [pc, #28]	; (13cd4 <ble_sm_init+0x24>)
   13cb6:	2200      	movs	r2, #0
   13cb8:	601a      	str	r2, [r3, #0]
   13cba:	605b      	str	r3, [r3, #4]

    rc = os_mempool_init(&ble_sm_proc_pool,
   13cbc:	4b06      	ldr	r3, [pc, #24]	; (13cd8 <ble_sm_init+0x28>)
   13cbe:	9300      	str	r3, [sp, #0]
   13cc0:	4b06      	ldr	r3, [pc, #24]	; (13cdc <ble_sm_init+0x2c>)
   13cc2:	f44f 7280 	mov.w	r2, #256	; 0x100
   13cc6:	2101      	movs	r1, #1
   13cc8:	4805      	ldr	r0, [pc, #20]	; (13ce0 <ble_sm_init+0x30>)
   13cca:	f7f6 fe93 	bl	a9f4 <os_mempool_init>
    }

    ble_sm_sc_init();

    return 0;
}
   13cce:	b003      	add	sp, #12
   13cd0:	f85d fb04 	ldr.w	pc, [sp], #4
   13cd4:	2000779c 	.word	0x2000779c
   13cd8:	00028f5c 	.word	0x00028f5c
   13cdc:	20007680 	.word	0x20007680
   13ce0:	20007780 	.word	0x20007780

00013ce4 <ble_sm_create_chan>:
}
#endif

struct ble_l2cap_chan *
ble_sm_create_chan(uint16_t conn_handle)
{
   13ce4:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   13ce6:	f7fd ff9b 	bl	11c20 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   13cea:	4603      	mov	r3, r0
   13cec:	b130      	cbz	r0, 13cfc <ble_sm_create_chan+0x18>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_SM;
   13cee:	2206      	movs	r2, #6
   13cf0:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_SM;
   13cf2:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = BLE_SM_MTU;
   13cf4:	2241      	movs	r2, #65	; 0x41
   13cf6:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_sm_rx;
   13cf8:	4a01      	ldr	r2, [pc, #4]	; (13d00 <ble_sm_create_chan+0x1c>)
   13cfa:	6182      	str	r2, [r0, #24]

    return chan;
}
   13cfc:	4618      	mov	r0, r3
   13cfe:	bd08      	pop	{r3, pc}
   13d00:	00013789 	.word	0x00013789

00013d04 <ble_sm_cmd_get>:
#include "host/ble_sm.h"
#include "ble_hs_priv.h"

void *
ble_sm_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   13d04:	b570      	push	{r4, r5, r6, lr}
   13d06:	4606      	mov	r6, r0
   13d08:	460c      	mov	r4, r1
   13d0a:	4615      	mov	r5, r2
    struct ble_sm_hdr *hdr;

    *txom = ble_hs_mbuf_l2cap_pkt();
   13d0c:	f7fd fc30 	bl	11570 <ble_hs_mbuf_l2cap_pkt>
   13d10:	6028      	str	r0, [r5, #0]
    if (*txom == NULL) {
   13d12:	b178      	cbz	r0, 13d34 <ble_sm_cmd_get+0x30>
        return NULL;
    }

    if (os_mbuf_extend(*txom, sizeof(*hdr) + len) == NULL) {
   13d14:	1c61      	adds	r1, r4, #1
   13d16:	b289      	uxth	r1, r1
   13d18:	f7f6 fcea 	bl	a6f0 <os_mbuf_extend>
   13d1c:	4604      	mov	r4, r0
   13d1e:	b128      	cbz	r0, 13d2c <ble_sm_cmd_get+0x28>
        os_mbuf_free_chain(*txom);
        return NULL;
    }

    hdr = (struct ble_sm_hdr *)(*txom)->om_data;
   13d20:	682b      	ldr	r3, [r5, #0]

    hdr->opcode = opcode;
   13d22:	681c      	ldr	r4, [r3, #0]
   13d24:	f804 6b01 	strb.w	r6, [r4], #1

    return hdr->data;
}
   13d28:	4620      	mov	r0, r4
   13d2a:	bd70      	pop	{r4, r5, r6, pc}
        os_mbuf_free_chain(*txom);
   13d2c:	6828      	ldr	r0, [r5, #0]
   13d2e:	f7f6 fa57 	bl	a1e0 <os_mbuf_free_chain>
        return NULL;
   13d32:	e7f9      	b.n	13d28 <ble_sm_cmd_get+0x24>
        return NULL;
   13d34:	2400      	movs	r4, #0
   13d36:	e7f7      	b.n	13d28 <ble_sm_cmd_get+0x24>

00013d38 <ble_sm_tx>:

/* this function consumes tx os_mbuf */
int
ble_sm_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   13d38:	b510      	push	{r4, lr}
   13d3a:	b082      	sub	sp, #8
   13d3c:	460c      	mov	r4, r1

    BLE_HS_DBG_ASSERT(ble_hs_locked_by_cur_task());

    STATS_INC(ble_l2cap_stats, sm_tx);

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_SM,
   13d3e:	ab01      	add	r3, sp, #4
   13d40:	466a      	mov	r2, sp
   13d42:	2106      	movs	r1, #6
   13d44:	f7fd fc6f 	bl	11626 <ble_hs_misc_conn_chan_find_reqd>
                                         &conn, &chan);
    if (rc == 0) {
   13d48:	4603      	mov	r3, r0
   13d4a:	b110      	cbz	r0, 13d52 <ble_sm_tx+0x1a>
        rc = ble_l2cap_tx(conn, chan, txom);
    }

    return rc;
}
   13d4c:	4618      	mov	r0, r3
   13d4e:	b002      	add	sp, #8
   13d50:	bd10      	pop	{r4, pc}
        rc = ble_l2cap_tx(conn, chan, txom);
   13d52:	4622      	mov	r2, r4
   13d54:	9901      	ldr	r1, [sp, #4]
   13d56:	9800      	ldr	r0, [sp, #0]
   13d58:	f7fe f849 	bl	11dee <ble_l2cap_tx>
   13d5c:	4603      	mov	r3, r0
    return rc;
   13d5e:	e7f5      	b.n	13d4c <ble_sm_tx+0x14>

00013d60 <ble_sm_gen_stk>:
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
}

static int
ble_sm_gen_stk(struct ble_sm_proc *proc)
{
   13d60:	b570      	push	{r4, r5, r6, lr}
   13d62:	b084      	sub	sp, #16
   13d64:	4604      	mov	r4, r0
    uint8_t key[16];
    int rc;

    rc = ble_sm_alg_s1(proc->tk, proc->rands, proc->randm, key);
   13d66:	466b      	mov	r3, sp
   13d68:	f100 023e 	add.w	r2, r0, #62	; 0x3e
   13d6c:	f100 014e 	add.w	r1, r0, #78	; 0x4e
   13d70:	301e      	adds	r0, #30
   13d72:	f002 f925 	bl	15fc0 <ble_sm_alg_s1>
    if (rc != 0) {
   13d76:	4605      	mov	r5, r0
   13d78:	b110      	cbz	r0, 13d80 <ble_sm_gen_stk+0x20>

    /* Ensure proper key size */
    memset(proc->ltk + proc->key_size, 0, sizeof key - proc->key_size);

    return 0;
}
   13d7a:	4628      	mov	r0, r5
   13d7c:	b004      	add	sp, #16
   13d7e:	bd70      	pop	{r4, r5, r6, pc}
    memcpy(proc->ltk, key, proc->key_size);
   13d80:	f104 065e 	add.w	r6, r4, #94	; 0x5e
   13d84:	7be4      	ldrb	r4, [r4, #15]
   13d86:	4622      	mov	r2, r4
   13d88:	4669      	mov	r1, sp
   13d8a:	4630      	mov	r0, r6
   13d8c:	f7f7 fd0e 	bl	b7ac <memcpy>
    memset(proc->ltk + proc->key_size, 0, sizeof key - proc->key_size);
   13d90:	f1c4 0210 	rsb	r2, r4, #16
   13d94:	2100      	movs	r1, #0
   13d96:	1930      	adds	r0, r6, r4
   13d98:	f7f7 fd31 	bl	b7fe <memset>
    return 0;
   13d9c:	e7ed      	b.n	13d7a <ble_sm_gen_stk+0x1a>
	...

00013da0 <ble_sm_lgcy_io_action>:
{
   13da0:	b410      	push	{r4}
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES &&
   13da2:	7c83      	ldrb	r3, [r0, #18]
   13da4:	2b01      	cmp	r3, #1
   13da6:	d00a      	beq.n	13dbe <ble_sm_lgcy_io_action+0x1e>
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   13da8:	7cc3      	ldrb	r3, [r0, #19]
   13daa:	f013 0f04 	tst.w	r3, #4
   13dae:	d10b      	bne.n	13dc8 <ble_sm_lgcy_io_action+0x28>
               !(pair_rsp->authreq & BLE_SM_PAIR_AUTHREQ_MITM)) {
   13db0:	7e83      	ldrb	r3, [r0, #26]
    } else if (!(pair_req->authreq & BLE_SM_PAIR_AUTHREQ_MITM) &&
   13db2:	f013 0f04 	tst.w	r3, #4
   13db6:	d107      	bne.n	13dc8 <ble_sm_lgcy_io_action+0x28>
        *action = BLE_SM_IOACT_NONE;
   13db8:	2300      	movs	r3, #0
   13dba:	700b      	strb	r3, [r1, #0]
   13dbc:	e00c      	b.n	13dd8 <ble_sm_lgcy_io_action+0x38>
        pair_rsp->oob_data_flag == BLE_SM_PAIR_OOB_YES) {
   13dbe:	7e43      	ldrb	r3, [r0, #25]
    if (pair_req->oob_data_flag == BLE_SM_PAIR_OOB_YES &&
   13dc0:	2b01      	cmp	r3, #1
   13dc2:	d1f1      	bne.n	13da8 <ble_sm_lgcy_io_action+0x8>
        *action = BLE_SM_IOACT_OOB;
   13dc4:	700b      	strb	r3, [r1, #0]
   13dc6:	e007      	b.n	13dd8 <ble_sm_lgcy_io_action+0x38>
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   13dc8:	7c43      	ldrb	r3, [r0, #17]
   13dca:	2b04      	cmp	r3, #4
   13dcc:	d802      	bhi.n	13dd4 <ble_sm_lgcy_io_action+0x34>
               pair_rsp->io_cap >= BLE_SM_IO_CAP_RESERVED) {
   13dce:	7e02      	ldrb	r2, [r0, #24]
    } else if (pair_req->io_cap >= BLE_SM_IO_CAP_RESERVED ||
   13dd0:	2a04      	cmp	r2, #4
   13dd2:	d908      	bls.n	13de6 <ble_sm_lgcy_io_action+0x46>
        *action = BLE_SM_IOACT_NONE;
   13dd4:	2300      	movs	r3, #0
   13dd6:	700b      	strb	r3, [r1, #0]
    switch (*action) {
   13dd8:	780b      	ldrb	r3, [r1, #0]
   13dda:	2b03      	cmp	r3, #3
   13ddc:	d82b      	bhi.n	13e36 <ble_sm_lgcy_io_action+0x96>
   13dde:	e8df f003 	tbb	[pc, r3]
   13de2:	1a14      	.short	0x1a14
   13de4:	2222      	.short	0x2222
    } else if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   13de6:	7a04      	ldrb	r4, [r0, #8]
   13de8:	f014 0f01 	tst.w	r4, #1
   13dec:	d006      	beq.n	13dfc <ble_sm_lgcy_io_action+0x5c>
        *action = ble_sm_lgcy_init_ioa[pair_rsp->io_cap][pair_req->io_cap];
   13dee:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   13df2:	4c12      	ldr	r4, [pc, #72]	; (13e3c <ble_sm_lgcy_io_action+0x9c>)
   13df4:	4422      	add	r2, r4
   13df6:	5cd3      	ldrb	r3, [r2, r3]
   13df8:	700b      	strb	r3, [r1, #0]
   13dfa:	e7ed      	b.n	13dd8 <ble_sm_lgcy_io_action+0x38>
        *action = ble_sm_lgcy_resp_ioa[pair_rsp->io_cap][pair_req->io_cap];
   13dfc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   13e00:	4c0f      	ldr	r4, [pc, #60]	; (13e40 <ble_sm_lgcy_io_action+0xa0>)
   13e02:	4422      	add	r2, r4
   13e04:	5cd3      	ldrb	r3, [r2, r3]
   13e06:	700b      	strb	r3, [r1, #0]
   13e08:	e7e6      	b.n	13dd8 <ble_sm_lgcy_io_action+0x38>
        proc->pair_alg = BLE_SM_PAIR_ALG_JW;
   13e0a:	2300      	movs	r3, #0
   13e0c:	7303      	strb	r3, [r0, #12]
    return 0;
   13e0e:	4618      	mov	r0, r3
}
   13e10:	f85d 4b04 	ldr.w	r4, [sp], #4
   13e14:	4770      	bx	lr
        proc->pair_alg = BLE_SM_PAIR_ALG_OOB;
   13e16:	2302      	movs	r3, #2
   13e18:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   13e1a:	7a03      	ldrb	r3, [r0, #8]
   13e1c:	f043 0308 	orr.w	r3, r3, #8
   13e20:	7203      	strb	r3, [r0, #8]
    return 0;
   13e22:	2000      	movs	r0, #0
        break;
   13e24:	e7f4      	b.n	13e10 <ble_sm_lgcy_io_action+0x70>
        proc->pair_alg = BLE_SM_PAIR_ALG_PASSKEY;
   13e26:	2301      	movs	r3, #1
   13e28:	7303      	strb	r3, [r0, #12]
        proc->flags |= BLE_SM_PROC_F_AUTHENTICATED;
   13e2a:	7a03      	ldrb	r3, [r0, #8]
   13e2c:	f043 0308 	orr.w	r3, r3, #8
   13e30:	7203      	strb	r3, [r0, #8]
    return 0;
   13e32:	2000      	movs	r0, #0
        break;
   13e34:	e7ec      	b.n	13e10 <ble_sm_lgcy_io_action+0x70>
        return BLE_HS_EINVAL;
   13e36:	2003      	movs	r0, #3
   13e38:	e7ea      	b.n	13e10 <ble_sm_lgcy_io_action+0x70>
   13e3a:	bf00      	nop
   13e3c:	00028f9c 	.word	0x00028f9c
   13e40:	00028fb8 	.word	0x00028fb8

00013e44 <ble_sm_lgcy_confirm_exec>:
{
   13e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13e48:	b08d      	sub	sp, #52	; 0x34
   13e4a:	4605      	mov	r5, r0
   13e4c:	460c      	mov	r4, r1
    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_CONFIRM, sizeof(*cmd), &txom);
   13e4e:	aa0b      	add	r2, sp, #44	; 0x2c
   13e50:	2110      	movs	r1, #16
   13e52:	2003      	movs	r0, #3
   13e54:	f7ff ff56 	bl	13d04 <ble_sm_cmd_get>
    if (cmd == NULL) {
   13e58:	b398      	cbz	r0, 13ec2 <ble_sm_lgcy_confirm_exec+0x7e>
   13e5a:	4681      	mov	r9, r0
    ble_sm_ia_ra(proc, &iat, ia, &rat, ra);
   13e5c:	f10d 0824 	add.w	r8, sp, #36	; 0x24
   13e60:	af07      	add	r7, sp, #28
   13e62:	9700      	str	r7, [sp, #0]
   13e64:	f10d 031a 	add.w	r3, sp, #26
   13e68:	4642      	mov	r2, r8
   13e6a:	f10d 011b 	add.w	r1, sp, #27
   13e6e:	4628      	mov	r0, r5
   13e70:	f7ff f880 	bl	12f74 <ble_sm_ia_ra>
    rc = ble_sm_alg_c1(proc->tk, ble_sm_our_pair_rand(proc), proc->pair_req,
   13e74:	f105 061e 	add.w	r6, r5, #30
   13e78:	4628      	mov	r0, r5
   13e7a:	f7ff fd44 	bl	13906 <ble_sm_our_pair_rand>
   13e7e:	f89d 301b 	ldrb.w	r3, [sp, #27]
   13e82:	f89d 201a 	ldrb.w	r2, [sp, #26]
   13e86:	f8cd 9010 	str.w	r9, [sp, #16]
   13e8a:	9703      	str	r7, [sp, #12]
   13e8c:	f8cd 8008 	str.w	r8, [sp, #8]
   13e90:	9201      	str	r2, [sp, #4]
   13e92:	9300      	str	r3, [sp, #0]
   13e94:	f105 0317 	add.w	r3, r5, #23
   13e98:	f105 0210 	add.w	r2, r5, #16
   13e9c:	4601      	mov	r1, r0
   13e9e:	4630      	mov	r0, r6
   13ea0:	f002 f8b6 	bl	16010 <ble_sm_alg_c1>
    if (rc != 0) {
   13ea4:	4606      	mov	r6, r0
   13ea6:	b968      	cbnz	r0, 13ec4 <ble_sm_lgcy_confirm_exec+0x80>
    rc = ble_sm_tx(proc->conn_handle, txom);
   13ea8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13eaa:	8968      	ldrh	r0, [r5, #10]
   13eac:	f7ff ff44 	bl	13d38 <ble_sm_tx>
    if (rc != 0) {
   13eb0:	4606      	mov	r6, r0
   13eb2:	b938      	cbnz	r0, 13ec4 <ble_sm_lgcy_confirm_exec+0x80>
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   13eb4:	7a2b      	ldrb	r3, [r5, #8]
   13eb6:	f013 0f01 	tst.w	r3, #1
   13eba:	d10e      	bne.n	13eda <ble_sm_lgcy_confirm_exec+0x96>
        proc->state = BLE_SM_PROC_STATE_RANDOM;
   13ebc:	2302      	movs	r3, #2
   13ebe:	736b      	strb	r3, [r5, #13]
   13ec0:	e00b      	b.n	13eda <ble_sm_lgcy_confirm_exec+0x96>
        rc = BLE_HS_ENOMEM;
   13ec2:	2606      	movs	r6, #6
    if (txom) {
   13ec4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   13ec6:	b108      	cbz	r0, 13ecc <ble_sm_lgcy_confirm_exec+0x88>
        os_mbuf_free_chain(txom);
   13ec8:	f7f6 f98a 	bl	a1e0 <os_mbuf_free_chain>
    res->app_status = rc;
   13ecc:	6026      	str	r6, [r4, #0]
    res->enc_cb = 1;
   13ece:	7d23      	ldrb	r3, [r4, #20]
   13ed0:	f043 0302 	orr.w	r3, r3, #2
   13ed4:	7523      	strb	r3, [r4, #20]
    res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13ed6:	2308      	movs	r3, #8
   13ed8:	7123      	strb	r3, [r4, #4]
}
   13eda:	b00d      	add	sp, #52	; 0x34
   13edc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00013ee0 <ble_sm_lgcy_random_exec>:

void
ble_sm_lgcy_random_exec(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   13ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13ee2:	b083      	sub	sp, #12
   13ee4:	4606      	mov	r6, r0
   13ee6:	460c      	mov	r4, r1
    struct ble_sm_pair_random *cmd;
    struct os_mbuf *txom;
    int rc;

    cmd = ble_sm_cmd_get(BLE_SM_OP_PAIR_RANDOM, sizeof(*cmd), &txom);
   13ee8:	aa01      	add	r2, sp, #4
   13eea:	2110      	movs	r1, #16
   13eec:	2004      	movs	r0, #4
   13eee:	f7ff ff09 	bl	13d04 <ble_sm_cmd_get>
    if (cmd == NULL) {
   13ef2:	b1c0      	cbz	r0, 13f26 <ble_sm_lgcy_random_exec+0x46>
   13ef4:	4605      	mov	r5, r0
        res->enc_cb = 1;
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
        return;
    }

    memcpy(cmd->value, ble_sm_our_pair_rand(proc), 16);
   13ef6:	4630      	mov	r0, r6
   13ef8:	f7ff fd05 	bl	13906 <ble_sm_our_pair_rand>
   13efc:	6807      	ldr	r7, [r0, #0]
   13efe:	6841      	ldr	r1, [r0, #4]
   13f00:	6882      	ldr	r2, [r0, #8]
   13f02:	68c3      	ldr	r3, [r0, #12]
   13f04:	602f      	str	r7, [r5, #0]
   13f06:	6069      	str	r1, [r5, #4]
   13f08:	60aa      	str	r2, [r5, #8]
   13f0a:	60eb      	str	r3, [r5, #12]

    rc = ble_sm_tx(proc->conn_handle, txom);
   13f0c:	9901      	ldr	r1, [sp, #4]
   13f0e:	8970      	ldrh	r0, [r6, #10]
   13f10:	f7ff ff12 	bl	13d38 <ble_sm_tx>
    if (rc != 0) {
   13f14:	b188      	cbz	r0, 13f3a <ble_sm_lgcy_random_exec+0x5a>
        res->app_status = rc;
   13f16:	6020      	str	r0, [r4, #0]
        res->enc_cb = 1;
   13f18:	7d23      	ldrb	r3, [r4, #20]
   13f1a:	f043 0302 	orr.w	r3, r3, #2
   13f1e:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13f20:	2308      	movs	r3, #8
   13f22:	7123      	strb	r3, [r4, #4]
        return;
   13f24:	e007      	b.n	13f36 <ble_sm_lgcy_random_exec+0x56>
        res->app_status = BLE_HS_ENOMEM;
   13f26:	2306      	movs	r3, #6
   13f28:	6023      	str	r3, [r4, #0]
        res->enc_cb = 1;
   13f2a:	7d23      	ldrb	r3, [r4, #20]
   13f2c:	f043 0302 	orr.w	r3, r3, #2
   13f30:	7523      	strb	r3, [r4, #20]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13f32:	2308      	movs	r3, #8
   13f34:	7123      	strb	r3, [r4, #4]
    }

    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
        proc->state = BLE_SM_PROC_STATE_LTK_START;
    }
}
   13f36:	b003      	add	sp, #12
   13f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!(proc->flags & BLE_SM_PROC_F_INITIATOR)) {
   13f3a:	7a33      	ldrb	r3, [r6, #8]
   13f3c:	f013 0f01 	tst.w	r3, #1
   13f40:	d1f9      	bne.n	13f36 <ble_sm_lgcy_random_exec+0x56>
        proc->state = BLE_SM_PROC_STATE_LTK_START;
   13f42:	2303      	movs	r3, #3
   13f44:	7373      	strb	r3, [r6, #13]
   13f46:	e7f6      	b.n	13f36 <ble_sm_lgcy_random_exec+0x56>

00013f48 <ble_sm_lgcy_random_rx>:

void
ble_sm_lgcy_random_rx(struct ble_sm_proc *proc, struct ble_sm_result *res)
{
   13f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f4c:	b090      	sub	sp, #64	; 0x40
   13f4e:	4604      	mov	r4, r0
   13f50:	460d      	mov	r5, r1
    uint8_t ra[6];
    uint8_t iat;
    uint8_t rat;
    int rc;

    ble_sm_ia_ra(proc, &iat, ia, &rat, ra);
   13f52:	ae0a      	add	r6, sp, #40	; 0x28
   13f54:	af08      	add	r7, sp, #32
   13f56:	9700      	str	r7, [sp, #0]
   13f58:	f10d 031e 	add.w	r3, sp, #30
   13f5c:	4632      	mov	r2, r6
   13f5e:	f10d 011f 	add.w	r1, sp, #31
   13f62:	f7ff f807 	bl	12f74 <ble_sm_ia_ra>

    rc = ble_sm_alg_c1(proc->tk, ble_sm_peer_pair_rand(proc), proc->pair_req,
   13f66:	f104 081e 	add.w	r8, r4, #30
   13f6a:	4620      	mov	r0, r4
   13f6c:	f7ff fd25 	bl	139ba <ble_sm_peer_pair_rand>
   13f70:	f89d 301f 	ldrb.w	r3, [sp, #31]
   13f74:	f89d 201e 	ldrb.w	r2, [sp, #30]
   13f78:	a90c      	add	r1, sp, #48	; 0x30
   13f7a:	9104      	str	r1, [sp, #16]
   13f7c:	9703      	str	r7, [sp, #12]
   13f7e:	9602      	str	r6, [sp, #8]
   13f80:	9201      	str	r2, [sp, #4]
   13f82:	9300      	str	r3, [sp, #0]
   13f84:	f104 0317 	add.w	r3, r4, #23
   13f88:	f104 0210 	add.w	r2, r4, #16
   13f8c:	4601      	mov	r1, r0
   13f8e:	4640      	mov	r0, r8
   13f90:	f002 f83e 	bl	16010 <ble_sm_alg_c1>
                       proc->pair_rsp, iat, rat, ia, ra, confirm_val);
    if (rc != 0) {
   13f94:	b148      	cbz	r0, 13faa <ble_sm_lgcy_random_rx+0x62>
        res->app_status = rc;
   13f96:	6028      	str	r0, [r5, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13f98:	2308      	movs	r3, #8
   13f9a:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   13f9c:	7d2b      	ldrb	r3, [r5, #20]
   13f9e:	f043 0302 	orr.w	r3, r3, #2
   13fa2:	752b      	strb	r3, [r5, #20]
         */
        proc->state = BLE_SM_PROC_STATE_ENC_START;
    }

    res->execute = 1;
}
   13fa4:	b010      	add	sp, #64	; 0x40
   13fa6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (memcmp(proc->confirm_peer, confirm_val, 16) != 0) {
   13faa:	2210      	movs	r2, #16
   13fac:	a90c      	add	r1, sp, #48	; 0x30
   13fae:	f104 002e 	add.w	r0, r4, #46	; 0x2e
   13fb2:	f7f7 fbd7 	bl	b764 <memcmp>
   13fb6:	b148      	cbz	r0, 13fcc <ble_sm_lgcy_random_rx+0x84>
        res->app_status = BLE_HS_SM_US_ERR(BLE_SM_ERR_CONFIRM_MISMATCH);
   13fb8:	f240 4304 	movw	r3, #1028	; 0x404
   13fbc:	602b      	str	r3, [r5, #0]
        res->sm_err = BLE_SM_ERR_CONFIRM_MISMATCH;
   13fbe:	2304      	movs	r3, #4
   13fc0:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   13fc2:	7d2b      	ldrb	r3, [r5, #20]
   13fc4:	f043 0302 	orr.w	r3, r3, #2
   13fc8:	752b      	strb	r3, [r5, #20]
        return;
   13fca:	e7eb      	b.n	13fa4 <ble_sm_lgcy_random_rx+0x5c>
    rc = ble_sm_gen_stk(proc);
   13fcc:	4620      	mov	r0, r4
   13fce:	f7ff fec7 	bl	13d60 <ble_sm_gen_stk>
    if (rc != 0) {
   13fd2:	b138      	cbz	r0, 13fe4 <ble_sm_lgcy_random_rx+0x9c>
        res->app_status = rc;
   13fd4:	6028      	str	r0, [r5, #0]
        res->sm_err = BLE_SM_ERR_UNSPECIFIED;
   13fd6:	2308      	movs	r3, #8
   13fd8:	712b      	strb	r3, [r5, #4]
        res->enc_cb = 1;
   13fda:	7d2b      	ldrb	r3, [r5, #20]
   13fdc:	f043 0302 	orr.w	r3, r3, #2
   13fe0:	752b      	strb	r3, [r5, #20]
        return;
   13fe2:	e7df      	b.n	13fa4 <ble_sm_lgcy_random_rx+0x5c>
    if (proc->flags & BLE_SM_PROC_F_INITIATOR) {
   13fe4:	7a23      	ldrb	r3, [r4, #8]
   13fe6:	f013 0f01 	tst.w	r3, #1
   13fea:	d001      	beq.n	13ff0 <ble_sm_lgcy_random_rx+0xa8>
        proc->state = BLE_SM_PROC_STATE_ENC_START;
   13fec:	2305      	movs	r3, #5
   13fee:	7363      	strb	r3, [r4, #13]
    res->execute = 1;
   13ff0:	7d2b      	ldrb	r3, [r5, #20]
   13ff2:	f043 0301 	orr.w	r3, r3, #1
   13ff6:	752b      	strb	r3, [r5, #20]
   13ff8:	e7d4      	b.n	13fa4 <ble_sm_lgcy_random_rx+0x5c>
	...

00013ffc <ble_store_status>:
    return rc;
}

static int
ble_store_status(struct ble_store_status_event *event)
{
   13ffc:	b508      	push	{r3, lr}
    int rc;

    BLE_HS_DBG_ASSERT(!ble_hs_locked_by_cur_task());

    if (ble_hs_cfg.store_status_cb == NULL) {
   13ffe:	4b04      	ldr	r3, [pc, #16]	; (14010 <ble_store_status+0x14>)
   14000:	6a1b      	ldr	r3, [r3, #32]
   14002:	b11b      	cbz	r3, 1400c <ble_store_status+0x10>
        rc = BLE_HS_ENOTSUP;
    } else {
        rc = ble_hs_cfg.store_status_cb(event, ble_hs_cfg.store_status_arg);
   14004:	4a02      	ldr	r2, [pc, #8]	; (14010 <ble_store_status+0x14>)
   14006:	6a51      	ldr	r1, [r2, #36]	; 0x24
   14008:	4798      	blx	r3
    }

    return rc;
}
   1400a:	bd08      	pop	{r3, pc}
        rc = BLE_HS_ENOTSUP;
   1400c:	2008      	movs	r0, #8
    return rc;
   1400e:	e7fc      	b.n	1400a <ble_store_status+0xe>
   14010:	2000017c 	.word	0x2000017c

00014014 <ble_store_read>:
{
   14014:	b570      	push	{r4, r5, r6, lr}
   14016:	4604      	mov	r4, r0
   14018:	460d      	mov	r5, r1
   1401a:	4616      	mov	r6, r2
    ble_hs_lock();
   1401c:	f7fb fd42 	bl	faa4 <ble_hs_lock>
    if (ble_hs_cfg.store_read_cb == NULL) {
   14020:	4b06      	ldr	r3, [pc, #24]	; (1403c <ble_store_read+0x28>)
   14022:	695b      	ldr	r3, [r3, #20]
   14024:	b143      	cbz	r3, 14038 <ble_store_read+0x24>
        rc = ble_hs_cfg.store_read_cb(obj_type, key, val);
   14026:	4632      	mov	r2, r6
   14028:	4629      	mov	r1, r5
   1402a:	4620      	mov	r0, r4
   1402c:	4798      	blx	r3
   1402e:	4604      	mov	r4, r0
    ble_hs_unlock();
   14030:	f7fb fd3c 	bl	faac <ble_hs_unlock>
}
   14034:	4620      	mov	r0, r4
   14036:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_HS_ENOTSUP;
   14038:	2408      	movs	r4, #8
   1403a:	e7f9      	b.n	14030 <ble_store_read+0x1c>
   1403c:	2000017c 	.word	0x2000017c

00014040 <ble_store_delete>:
{
   14040:	b538      	push	{r3, r4, r5, lr}
   14042:	4604      	mov	r4, r0
   14044:	460d      	mov	r5, r1
    ble_hs_lock();
   14046:	f7fb fd2d 	bl	faa4 <ble_hs_lock>
    if (ble_hs_cfg.store_delete_cb == NULL) {
   1404a:	4b06      	ldr	r3, [pc, #24]	; (14064 <ble_store_delete+0x24>)
   1404c:	69db      	ldr	r3, [r3, #28]
   1404e:	b13b      	cbz	r3, 14060 <ble_store_delete+0x20>
        rc = ble_hs_cfg.store_delete_cb(obj_type, key);
   14050:	4629      	mov	r1, r5
   14052:	4620      	mov	r0, r4
   14054:	4798      	blx	r3
   14056:	4604      	mov	r4, r0
    ble_hs_unlock();
   14058:	f7fb fd28 	bl	faac <ble_hs_unlock>
}
   1405c:	4620      	mov	r0, r4
   1405e:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_HS_ENOTSUP;
   14060:	2408      	movs	r4, #8
   14062:	e7f9      	b.n	14058 <ble_store_delete+0x18>
   14064:	2000017c 	.word	0x2000017c

00014068 <ble_store_overflow_event>:

int
ble_store_overflow_event(int obj_type, const union ble_store_value *value)
{
   14068:	b500      	push	{lr}
   1406a:	b085      	sub	sp, #20
    struct ble_store_status_event event;

    event.event_code = BLE_STORE_EVENT_OVERFLOW;
   1406c:	2301      	movs	r3, #1
   1406e:	9301      	str	r3, [sp, #4]
    event.overflow.obj_type = obj_type;
   14070:	9002      	str	r0, [sp, #8]
    event.overflow.value = value;
   14072:	9103      	str	r1, [sp, #12]

    return ble_store_status(&event);
   14074:	a801      	add	r0, sp, #4
   14076:	f7ff ffc1 	bl	13ffc <ble_store_status>
}
   1407a:	b005      	add	sp, #20
   1407c:	f85d fb04 	ldr.w	pc, [sp], #4

00014080 <ble_store_write>:
{
   14080:	b570      	push	{r4, r5, r6, lr}
   14082:	4606      	mov	r6, r0
   14084:	460d      	mov	r5, r1
    if (ble_hs_cfg.store_write_cb == NULL) {
   14086:	4b0d      	ldr	r3, [pc, #52]	; (140bc <ble_store_write+0x3c>)
   14088:	699b      	ldr	r3, [r3, #24]
   1408a:	b1ab      	cbz	r3, 140b8 <ble_store_write+0x38>
        ble_hs_lock();
   1408c:	f7fb fd0a 	bl	faa4 <ble_hs_lock>
        rc = ble_hs_cfg.store_write_cb(obj_type, val);
   14090:	4b0a      	ldr	r3, [pc, #40]	; (140bc <ble_store_write+0x3c>)
   14092:	699b      	ldr	r3, [r3, #24]
   14094:	4629      	mov	r1, r5
   14096:	4630      	mov	r0, r6
   14098:	4798      	blx	r3
   1409a:	4604      	mov	r4, r0
        ble_hs_unlock();
   1409c:	f7fb fd06 	bl	faac <ble_hs_unlock>
        switch (rc) {
   140a0:	2c1b      	cmp	r4, #27
   140a2:	d001      	beq.n	140a8 <ble_store_write+0x28>
}
   140a4:	4620      	mov	r0, r4
   140a6:	bd70      	pop	{r4, r5, r6, pc}
            rc = ble_store_overflow_event(obj_type, val);
   140a8:	4629      	mov	r1, r5
   140aa:	4630      	mov	r0, r6
   140ac:	f7ff ffdc 	bl	14068 <ble_store_overflow_event>
            if (rc != 0) {
   140b0:	4604      	mov	r4, r0
   140b2:	2800      	cmp	r0, #0
   140b4:	d0ea      	beq.n	1408c <ble_store_write+0xc>
   140b6:	e7f5      	b.n	140a4 <ble_store_write+0x24>
        return BLE_HS_ENOTSUP;
   140b8:	2408      	movs	r4, #8
   140ba:	e7f3      	b.n	140a4 <ble_store_write+0x24>
   140bc:	2000017c 	.word	0x2000017c

000140c0 <ble_store_persist_sec>:
}

static int
ble_store_persist_sec(int obj_type,
                      const struct ble_store_value_sec *value_sec)
{
   140c0:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(value_sec->ltk_present ||
                      value_sec->irk_present ||
                      value_sec->csrk_present);

    store_value = (void *)value_sec;
    rc = ble_store_write(obj_type, store_value);
   140c2:	f7ff ffdd 	bl	14080 <ble_store_write>
    return rc;
}
   140c6:	bd08      	pop	{r3, pc}

000140c8 <ble_store_read_our_sec>:
{
   140c8:	b508      	push	{r3, lr}
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_OUR_SEC, store_key, store_value);
   140ca:	460a      	mov	r2, r1
   140cc:	4601      	mov	r1, r0
   140ce:	2001      	movs	r0, #1
   140d0:	f7ff ffa0 	bl	14014 <ble_store_read>
}
   140d4:	bd08      	pop	{r3, pc}

000140d6 <ble_store_write_our_sec>:

int
ble_store_write_our_sec(const struct ble_store_value_sec *value_sec)
{
   140d6:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_OUR_SEC, value_sec);
   140d8:	4601      	mov	r1, r0
   140da:	2001      	movs	r0, #1
   140dc:	f7ff fff0 	bl	140c0 <ble_store_persist_sec>
    return rc;
}
   140e0:	bd08      	pop	{r3, pc}

000140e2 <ble_store_read_peer_sec>:
}

int
ble_store_read_peer_sec(const struct ble_store_key_sec *key_sec,
                        struct ble_store_value_sec *value_sec)
{
   140e2:	b508      	push	{r3, lr}
    BLE_HS_DBG_ASSERT(key_sec->peer_addr.type == BLE_ADDR_PUBLIC ||
                      key_sec->peer_addr.type == BLE_ADDR_RANDOM);

    store_key = (void *)key_sec;
    store_value = (void *)value_sec;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_PEER_SEC, store_key, store_value);
   140e4:	460a      	mov	r2, r1
   140e6:	4601      	mov	r1, r0
   140e8:	2002      	movs	r0, #2
   140ea:	f7ff ff93 	bl	14014 <ble_store_read>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   140ee:	bd08      	pop	{r3, pc}

000140f0 <ble_store_write_peer_sec>:

int
ble_store_write_peer_sec(const struct ble_store_value_sec *value_sec)
{
   140f0:	b570      	push	{r4, r5, r6, lr}
   140f2:	b082      	sub	sp, #8
   140f4:	4604      	mov	r4, r0
    int rc;

    rc = ble_store_persist_sec(BLE_STORE_OBJ_TYPE_PEER_SEC, value_sec);
   140f6:	4601      	mov	r1, r0
   140f8:	2002      	movs	r0, #2
   140fa:	f7ff ffe1 	bl	140c0 <ble_store_persist_sec>
    if (rc != 0) {
   140fe:	4605      	mov	r5, r0
   14100:	b9d8      	cbnz	r0, 1413a <ble_store_write_peer_sec+0x4a>
        return rc;
    }

    if (ble_addr_cmp(&value_sec->peer_addr, BLE_ADDR_ANY) &&
   14102:	2300      	movs	r3, #0
   14104:	9300      	str	r3, [sp, #0]
   14106:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   1410a:	7826      	ldrb	r6, [r4, #0]
   1410c:	4630      	mov	r0, r6
    if (type_diff != 0) {
   1410e:	b92e      	cbnz	r6, 1411c <ble_store_write_peer_sec+0x2c>
    return memcmp(a->val, b->val, sizeof(a->val));
   14110:	2206      	movs	r2, #6
   14112:	f10d 0101 	add.w	r1, sp, #1
   14116:	1c60      	adds	r0, r4, #1
   14118:	f7f7 fb24 	bl	b764 <memcmp>
   1411c:	b160      	cbz	r0, 14138 <ble_store_write_peer_sec+0x48>
   1411e:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   14122:	f013 0f01 	tst.w	r3, #1
   14126:	d008      	beq.n	1413a <ble_store_write_peer_sec+0x4a>
        value_sec->irk_present) {

        /* Write the peer IRK to the controller keycache
         * There is not much to do here if it fails */
        rc = ble_hs_pvcy_add_entry(value_sec->peer_addr.val,
   14128:	f104 0229 	add.w	r2, r4, #41	; 0x29
   1412c:	4631      	mov	r1, r6
   1412e:	1c60      	adds	r0, r4, #1
   14130:	f7fd fbae 	bl	11890 <ble_hs_pvcy_add_entry>
   14134:	4605      	mov	r5, r0
   14136:	e000      	b.n	1413a <ble_store_write_peer_sec+0x4a>
        if (rc != 0) {
            return rc;
        }
    }

    return 0;
   14138:	4605      	mov	r5, r0
}
   1413a:	4628      	mov	r0, r5
   1413c:	b002      	add	sp, #8
   1413e:	bd70      	pop	{r4, r5, r6, pc}

00014140 <ble_store_read_cccd>:

int
ble_store_read_cccd(const struct ble_store_key_cccd *key,
                    struct ble_store_value_cccd *out_value)
{
   14140:	b508      	push	{r3, lr}
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    store_value = (void *)out_value;
    rc = ble_store_read(BLE_STORE_OBJ_TYPE_CCCD, store_key, store_value);
   14142:	460a      	mov	r2, r1
   14144:	4601      	mov	r1, r0
   14146:	2003      	movs	r0, #3
   14148:	f7ff ff64 	bl	14014 <ble_store_read>
    return rc;
}
   1414c:	bd08      	pop	{r3, pc}

0001414e <ble_store_write_cccd>:

int
ble_store_write_cccd(const struct ble_store_value_cccd *value)
{
   1414e:	b508      	push	{r3, lr}
    union ble_store_value *store_value;
    int rc;

    store_value = (void *)value;
    rc = ble_store_write(BLE_STORE_OBJ_TYPE_CCCD, store_value);
   14150:	4601      	mov	r1, r0
   14152:	2003      	movs	r0, #3
   14154:	f7ff ff94 	bl	14080 <ble_store_write>
    return rc;
}
   14158:	bd08      	pop	{r3, pc}

0001415a <ble_store_delete_cccd>:

int
ble_store_delete_cccd(const struct ble_store_key_cccd *key)
{
   1415a:	b508      	push	{r3, lr}
    union ble_store_key *store_key;
    int rc;

    store_key = (void *)key;
    rc = ble_store_delete(BLE_STORE_OBJ_TYPE_CCCD, store_key);
   1415c:	4601      	mov	r1, r0
   1415e:	2003      	movs	r0, #3
   14160:	f7ff ff6e 	bl	14040 <ble_store_delete>
    return rc;
}
   14164:	bd08      	pop	{r3, pc}

00014166 <ble_store_key_from_value_cccd>:

void
ble_store_key_from_value_cccd(struct ble_store_key_cccd *out_key,
                              const struct ble_store_value_cccd *value)
{
   14166:	b410      	push	{r4}
   14168:	4603      	mov	r3, r0
    out_key->peer_addr = value->peer_addr;
   1416a:	6808      	ldr	r0, [r1, #0]
   1416c:	6018      	str	r0, [r3, #0]
   1416e:	8888      	ldrh	r0, [r1, #4]
   14170:	798a      	ldrb	r2, [r1, #6]
   14172:	8098      	strh	r0, [r3, #4]
   14174:	719a      	strb	r2, [r3, #6]
    out_key->chr_val_handle = value->chr_val_handle;
   14176:	890a      	ldrh	r2, [r1, #8]
   14178:	811a      	strh	r2, [r3, #8]
    out_key->idx = 0;
   1417a:	2200      	movs	r2, #0
   1417c:	729a      	strb	r2, [r3, #10]
}
   1417e:	f85d 4b04 	ldr.w	r4, [sp], #4
   14182:	4770      	bx	lr

00014184 <ble_store_key_from_value_sec>:

void
ble_store_key_from_value_sec(struct ble_store_key_sec *out_key,
                             const struct ble_store_value_sec *value)
{
   14184:	4603      	mov	r3, r0
   14186:	460a      	mov	r2, r1
    out_key->peer_addr = value->peer_addr;
   14188:	e9d1 0100 	ldrd	r0, r1, [r1]
   1418c:	6018      	str	r0, [r3, #0]
   1418e:	8099      	strh	r1, [r3, #4]
   14190:	0c09      	lsrs	r1, r1, #16
   14192:	7199      	strb	r1, [r3, #6]

    out_key->ediv = value->ediv;
   14194:	8911      	ldrh	r1, [r2, #8]
   14196:	8119      	strh	r1, [r3, #8]
    out_key->rand_num = value->rand_num;
   14198:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
   1419c:	e9c3 0104 	strd	r0, r1, [r3, #16]
    out_key->ediv_rand_present = 1;
   141a0:	7e1a      	ldrb	r2, [r3, #24]
   141a2:	f042 0201 	orr.w	r2, r2, #1
   141a6:	761a      	strb	r2, [r3, #24]
    out_key->idx = 0;
   141a8:	2200      	movs	r2, #0
   141aa:	765a      	strb	r2, [r3, #25]
}
   141ac:	4770      	bx	lr

000141ae <ble_store_iterate>:

int
ble_store_iterate(int obj_type,
                  ble_store_iterator_fn *callback,
                  void *cookie)
{
   141ae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   141b2:	b09d      	sub	sp, #116	; 0x74
   141b4:	4604      	mov	r4, r0
   141b6:	4688      	mov	r8, r1
   141b8:	4691      	mov	r9, r2
    int idx = 0;
    uint8_t *pidx;
    int rc;

    /* a magic value to retrieve anything */
    memset(&key, 0, sizeof(key));
   141ba:	2220      	movs	r2, #32
   141bc:	2100      	movs	r1, #0
   141be:	a814      	add	r0, sp, #80	; 0x50
   141c0:	f7f7 fb1d 	bl	b7fe <memset>
    switch(obj_type) {
   141c4:	2c01      	cmp	r4, #1
   141c6:	db27      	blt.n	14218 <ble_store_iterate+0x6a>
   141c8:	2c02      	cmp	r4, #2
   141ca:	dd08      	ble.n	141de <ble_store_iterate+0x30>
   141cc:	2c03      	cmp	r4, #3
   141ce:	d123      	bne.n	14218 <ble_store_iterate+0x6a>
        case BLE_STORE_OBJ_TYPE_OUR_SEC:
            key.sec.peer_addr = *BLE_ADDR_ANY;
            pidx = &key.sec.idx;
            break;
        case BLE_STORE_OBJ_TYPE_CCCD:
            key.cccd.peer_addr = *BLE_ADDR_ANY;
   141d0:	2300      	movs	r3, #0
   141d2:	9314      	str	r3, [sp, #80]	; 0x50
   141d4:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.cccd.idx;
   141d8:	f10d 075a 	add.w	r7, sp, #90	; 0x5a
            break;
   141dc:	e005      	b.n	141ea <ble_store_iterate+0x3c>
            key.sec.peer_addr = *BLE_ADDR_ANY;
   141de:	2300      	movs	r3, #0
   141e0:	9314      	str	r3, [sp, #80]	; 0x50
   141e2:	f8cd 3053 	str.w	r3, [sp, #83]	; 0x53
            pidx = &key.sec.idx;
   141e6:	f10d 0769 	add.w	r7, sp, #105	; 0x69
            pidx = &key.cccd.idx;
   141ea:	2600      	movs	r6, #0
            BLE_HS_DBG_ASSERT(0);
            return BLE_HS_EINVAL;
    }

    while (1) {
        *pidx = idx;
   141ec:	703e      	strb	r6, [r7, #0]
        rc = ble_store_read(obj_type, &key, &value);
   141ee:	466a      	mov	r2, sp
   141f0:	a914      	add	r1, sp, #80	; 0x50
   141f2:	4620      	mov	r0, r4
   141f4:	f7ff ff0e 	bl	14014 <ble_store_read>
        switch (rc) {
   141f8:	4605      	mov	r5, r0
   141fa:	b118      	cbz	r0, 14204 <ble_store_iterate+0x56>
   141fc:	2805      	cmp	r0, #5
   141fe:	d10c      	bne.n	1421a <ble_store_iterate+0x6c>
            }
            break;

        case BLE_HS_ENOENT:
            /* No more entries. */
            return 0;
   14200:	2500      	movs	r5, #0
   14202:	e00a      	b.n	1421a <ble_store_iterate+0x6c>
            if (callback != NULL) {
   14204:	f1b8 0f00 	cmp.w	r8, #0
   14208:	d004      	beq.n	14214 <ble_store_iterate+0x66>
                rc = callback(obj_type, &value, cookie);
   1420a:	464a      	mov	r2, r9
   1420c:	4669      	mov	r1, sp
   1420e:	4620      	mov	r0, r4
   14210:	47c0      	blx	r8
                if (rc != 0) {
   14212:	b910      	cbnz	r0, 1421a <ble_store_iterate+0x6c>
        default:
            /* Read error. */
            return rc;
        }

        idx++;
   14214:	3601      	adds	r6, #1
        *pidx = idx;
   14216:	e7e9      	b.n	141ec <ble_store_iterate+0x3e>
            return BLE_HS_EINVAL;
   14218:	2503      	movs	r5, #3
    }
}
   1421a:	4628      	mov	r0, r5
   1421c:	b01d      	add	sp, #116	; 0x74
   1421e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00014222 <ble_store_util_iter_unique_peer>:

static int
ble_store_util_iter_unique_peer(int obj_type,
                                union ble_store_value *val,
                                void *arg)
{
   14222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14224:	460e      	mov	r6, r1
   14226:	4615      	mov	r5, r2
                      obj_type == BLE_STORE_OBJ_TYPE_PEER_SEC);

    set = arg;

    /* Do nothing if this peer is a duplicate. */
    for (i = 0; i < set->num_peers; i++) {
   14228:	2400      	movs	r4, #0
   1422a:	e001      	b.n	14230 <ble_store_util_iter_unique_peer+0xe>
        if (ble_addr_cmp(set->peer_id_addrs + i, &val->sec.peer_addr) == 0) {
   1422c:	b310      	cbz	r0, 14274 <ble_store_util_iter_unique_peer+0x52>
    for (i = 0; i < set->num_peers; i++) {
   1422e:	3401      	adds	r4, #1
   14230:	686b      	ldr	r3, [r5, #4]
   14232:	42a3      	cmp	r3, r4
   14234:	dd0d      	ble.n	14252 <ble_store_util_iter_unique_peer+0x30>
        if (ble_addr_cmp(set->peer_id_addrs + i, &val->sec.peer_addr) == 0) {
   14236:	682a      	ldr	r2, [r5, #0]
   14238:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   1423c:	18d7      	adds	r7, r2, r3
    type_diff = a->type - b->type;
   1423e:	5cd3      	ldrb	r3, [r2, r3]
   14240:	7830      	ldrb	r0, [r6, #0]
    if (type_diff != 0) {
   14242:	1a18      	subs	r0, r3, r0
   14244:	d1f2      	bne.n	1422c <ble_store_util_iter_unique_peer+0xa>
    return memcmp(a->val, b->val, sizeof(a->val));
   14246:	2206      	movs	r2, #6
   14248:	1c71      	adds	r1, r6, #1
   1424a:	1c78      	adds	r0, r7, #1
   1424c:	f7f7 fa8a 	bl	b764 <memcmp>
   14250:	e7ec      	b.n	1422c <ble_store_util_iter_unique_peer+0xa>
            return 0;
        }
    }

    if (set->num_peers >= set->max_peers) {
   14252:	68aa      	ldr	r2, [r5, #8]
   14254:	4293      	cmp	r3, r2
   14256:	da0e      	bge.n	14276 <ble_store_util_iter_unique_peer+0x54>
        /* Overflow; abort the iterate procedure. */
        set->status = BLE_HS_ENOMEM;
        return 1;
    }

    set->peer_id_addrs[set->num_peers] = val->sec.peer_addr;
   14258:	6829      	ldr	r1, [r5, #0]
   1425a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1425e:	18ca      	adds	r2, r1, r3
   14260:	6830      	ldr	r0, [r6, #0]
   14262:	50c8      	str	r0, [r1, r3]
   14264:	88b1      	ldrh	r1, [r6, #4]
   14266:	79b3      	ldrb	r3, [r6, #6]
   14268:	8091      	strh	r1, [r2, #4]
   1426a:	7193      	strb	r3, [r2, #6]
    set->num_peers++;
   1426c:	686b      	ldr	r3, [r5, #4]
   1426e:	3301      	adds	r3, #1
   14270:	606b      	str	r3, [r5, #4]

    return 0;
   14272:	2000      	movs	r0, #0
}
   14274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        set->status = BLE_HS_ENOMEM;
   14276:	2306      	movs	r3, #6
   14278:	60eb      	str	r3, [r5, #12]
        return 1;
   1427a:	2001      	movs	r0, #1
   1427c:	e7fa      	b.n	14274 <ble_store_util_iter_unique_peer+0x52>
	...

00014280 <ble_store_util_bonded_peers>:
 *                              Other nonzero on error.
 */
int
ble_store_util_bonded_peers(ble_addr_t *out_peer_id_addrs, int *out_num_peers,
                            int max_peers)
{
   14280:	b510      	push	{r4, lr}
   14282:	b084      	sub	sp, #16
   14284:	460c      	mov	r4, r1
    struct ble_store_util_peer_set set = {
   14286:	9000      	str	r0, [sp, #0]
   14288:	2300      	movs	r3, #0
   1428a:	9301      	str	r3, [sp, #4]
   1428c:	9202      	str	r2, [sp, #8]
   1428e:	9303      	str	r3, [sp, #12]
        .max_peers = max_peers,
        .status = 0,
    };
    int rc;

    rc = ble_store_iterate(BLE_STORE_OBJ_TYPE_OUR_SEC,
   14290:	466a      	mov	r2, sp
   14292:	4906      	ldr	r1, [pc, #24]	; (142ac <ble_store_util_bonded_peers+0x2c>)
   14294:	2001      	movs	r0, #1
   14296:	f7ff ff8a 	bl	141ae <ble_store_iterate>
                           ble_store_util_iter_unique_peer,
                           &set);
    if (rc != 0) {
   1429a:	4603      	mov	r3, r0
   1429c:	b918      	cbnz	r0, 142a6 <ble_store_util_bonded_peers+0x26>
        return rc;
    }
    if (set.status != 0) {
   1429e:	9b03      	ldr	r3, [sp, #12]
   142a0:	b90b      	cbnz	r3, 142a6 <ble_store_util_bonded_peers+0x26>
        return set.status;
    }

    *out_num_peers = set.num_peers;
   142a2:	9a01      	ldr	r2, [sp, #4]
   142a4:	6022      	str	r2, [r4, #0]
    return 0;
}
   142a6:	4618      	mov	r0, r3
   142a8:	b004      	add	sp, #16
   142aa:	bd10      	pop	{r4, pc}
   142ac:	00014223 	.word	0x00014223

000142b0 <ble_store_util_delete_all>:
 * @return                      0 on success;
 *                              Other nonzero on error.
 */
int
ble_store_util_delete_all(int type, const union ble_store_key *key)
{
   142b0:	b538      	push	{r3, r4, r5, lr}
   142b2:	4605      	mov	r5, r0
   142b4:	460c      	mov	r4, r1
    int rc;

    do {
        rc = ble_store_delete(type, key);
   142b6:	4621      	mov	r1, r4
   142b8:	4628      	mov	r0, r5
   142ba:	f7ff fec1 	bl	14040 <ble_store_delete>
    } while (rc == 0);
   142be:	4603      	mov	r3, r0
   142c0:	2800      	cmp	r0, #0
   142c2:	d0f8      	beq.n	142b6 <ble_store_util_delete_all+0x6>

    if (rc != BLE_HS_ENOENT) {
   142c4:	2805      	cmp	r0, #5
   142c6:	d001      	beq.n	142cc <ble_store_util_delete_all+0x1c>
        return rc;
    }

    return 0;
}
   142c8:	4618      	mov	r0, r3
   142ca:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   142cc:	2300      	movs	r3, #0
   142ce:	e7fb      	b.n	142c8 <ble_store_util_delete_all+0x18>

000142d0 <ble_store_util_delete_peer>:
{
   142d0:	b510      	push	{r4, lr}
   142d2:	b088      	sub	sp, #32
   142d4:	4604      	mov	r4, r0
    memset(&key, 0, sizeof key);
   142d6:	2220      	movs	r2, #32
   142d8:	2100      	movs	r1, #0
   142da:	4668      	mov	r0, sp
   142dc:	f7f7 fa8f 	bl	b7fe <memset>
    key.sec.peer_addr = *peer_id_addr;
   142e0:	6820      	ldr	r0, [r4, #0]
   142e2:	9000      	str	r0, [sp, #0]
   142e4:	88a2      	ldrh	r2, [r4, #4]
   142e6:	79a3      	ldrb	r3, [r4, #6]
   142e8:	f8ad 2004 	strh.w	r2, [sp, #4]
   142ec:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_OUR_SEC, &key);
   142f0:	4669      	mov	r1, sp
   142f2:	2001      	movs	r0, #1
   142f4:	f7ff ffdc 	bl	142b0 <ble_store_util_delete_all>
    if (rc != 0) {
   142f8:	4603      	mov	r3, r0
   142fa:	b110      	cbz	r0, 14302 <ble_store_util_delete_peer+0x32>
}
   142fc:	4618      	mov	r0, r3
   142fe:	b008      	add	sp, #32
   14300:	bd10      	pop	{r4, pc}
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_PEER_SEC, &key);
   14302:	4669      	mov	r1, sp
   14304:	2002      	movs	r0, #2
   14306:	f7ff ffd3 	bl	142b0 <ble_store_util_delete_all>
    if (rc != 0) {
   1430a:	4603      	mov	r3, r0
   1430c:	2800      	cmp	r0, #0
   1430e:	d1f5      	bne.n	142fc <ble_store_util_delete_peer+0x2c>
    memset(&key, 0, sizeof key);
   14310:	2220      	movs	r2, #32
   14312:	2100      	movs	r1, #0
   14314:	4668      	mov	r0, sp
   14316:	f7f7 fa72 	bl	b7fe <memset>
    key.cccd.peer_addr = *peer_id_addr;
   1431a:	6820      	ldr	r0, [r4, #0]
   1431c:	9000      	str	r0, [sp, #0]
   1431e:	88a2      	ldrh	r2, [r4, #4]
   14320:	79a3      	ldrb	r3, [r4, #6]
   14322:	f8ad 2004 	strh.w	r2, [sp, #4]
   14326:	f88d 3006 	strb.w	r3, [sp, #6]
    rc = ble_store_util_delete_all(BLE_STORE_OBJ_TYPE_CCCD, &key);
   1432a:	4669      	mov	r1, sp
   1432c:	2003      	movs	r0, #3
   1432e:	f7ff ffbf 	bl	142b0 <ble_store_util_delete_all>
   14332:	4603      	mov	r3, r0
   14334:	e7e2      	b.n	142fc <ble_store_util_delete_peer+0x2c>

00014336 <ble_store_util_status_rr>:
 * uninteresting peers could cause important bonds to be deleted.  This is
 * useful for demonstrations and sample apps.
 */
int
ble_store_util_status_rr(struct ble_store_status_event *event, void *arg)
{
   14336:	b508      	push	{r3, lr}
    switch (event->event_code) {
   14338:	6803      	ldr	r3, [r0, #0]
   1433a:	2b01      	cmp	r3, #1
   1433c:	d003      	beq.n	14346 <ble_store_util_status_rr+0x10>
   1433e:	2b02      	cmp	r3, #2
   14340:	d10f      	bne.n	14362 <ble_store_util_status_rr+0x2c>

    case BLE_STORE_EVENT_FULL:
        /* Just proceed with the operation.  If it results in an overflow,
         * we'll delete a record when the overflow occurs.
         */
        return 0;
   14342:	2000      	movs	r0, #0

    default:
        return BLE_HS_EUNKNOWN;
    }
}
   14344:	bd08      	pop	{r3, pc}
        switch (event->overflow.obj_type) {
   14346:	6843      	ldr	r3, [r0, #4]
   14348:	2b01      	cmp	r3, #1
   1434a:	db0c      	blt.n	14366 <ble_store_util_status_rr+0x30>
   1434c:	2b02      	cmp	r3, #2
   1434e:	dd05      	ble.n	1435c <ble_store_util_status_rr+0x26>
   14350:	2b03      	cmp	r3, #3
   14352:	d108      	bne.n	14366 <ble_store_util_status_rr+0x30>
            return ble_gap_unpair_oldest_except(&event->overflow.value->cccd.peer_addr);
   14354:	6880      	ldr	r0, [r0, #8]
   14356:	f7f9 fa6c 	bl	d832 <ble_gap_unpair_oldest_except>
   1435a:	e7f3      	b.n	14344 <ble_store_util_status_rr+0xe>
            return ble_gap_unpair_oldest_peer();
   1435c:	f7f9 fa54 	bl	d808 <ble_gap_unpair_oldest_peer>
   14360:	e7f0      	b.n	14344 <ble_store_util_status_rr+0xe>
        return BLE_HS_EUNKNOWN;
   14362:	2011      	movs	r0, #17
   14364:	e7ee      	b.n	14344 <ble_store_util_status_rr+0xe>
            return BLE_HS_EUNKNOWN;
   14366:	2011      	movs	r0, #17
   14368:	e7ec      	b.n	14344 <ble_store_util_status_rr+0xe>

0001436a <ble_uuid_init_from_buf>:
#define VERIFY_UUID(uuid)
#endif

int
ble_uuid_init_from_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   1436a:	b570      	push	{r4, r5, r6, lr}
   1436c:	4604      	mov	r4, r0
    switch (len) {
   1436e:	2a04      	cmp	r2, #4
   14370:	d00d      	beq.n	1438e <ble_uuid_init_from_buf+0x24>
   14372:	2a10      	cmp	r2, #16
   14374:	d013      	beq.n	1439e <ble_uuid_init_from_buf+0x34>
   14376:	2a02      	cmp	r2, #2
   14378:	d001      	beq.n	1437e <ble_uuid_init_from_buf+0x14>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
        return 0;
    }

    return BLE_HS_EINVAL;
   1437a:	2003      	movs	r0, #3
   1437c:	e006      	b.n	1438c <ble_uuid_init_from_buf+0x22>
        uuid->u.type = BLE_UUID_TYPE_16;
   1437e:	2310      	movs	r3, #16
   14380:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   14382:	4608      	mov	r0, r1
   14384:	f007 fc4d 	bl	1bc22 <get_le16>
   14388:	8060      	strh	r0, [r4, #2]
        return 0;
   1438a:	2000      	movs	r0, #0
}
   1438c:	bd70      	pop	{r4, r5, r6, pc}
        uuid->u.type = BLE_UUID_TYPE_32;
   1438e:	2320      	movs	r3, #32
   14390:	7003      	strb	r3, [r0, #0]
        uuid->u32.value = get_le32(buf);
   14392:	4608      	mov	r0, r1
   14394:	f007 fc4a 	bl	1bc2c <get_le32>
   14398:	6060      	str	r0, [r4, #4]
        return 0;
   1439a:	2000      	movs	r0, #0
   1439c:	e7f6      	b.n	1438c <ble_uuid_init_from_buf+0x22>
        uuid->u.type = BLE_UUID_TYPE_128;
   1439e:	4603      	mov	r3, r0
   143a0:	2280      	movs	r2, #128	; 0x80
   143a2:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   143a6:	680e      	ldr	r6, [r1, #0]
   143a8:	684d      	ldr	r5, [r1, #4]
   143aa:	6888      	ldr	r0, [r1, #8]
   143ac:	68ca      	ldr	r2, [r1, #12]
   143ae:	f8c4 6001 	str.w	r6, [r4, #1]
   143b2:	605d      	str	r5, [r3, #4]
   143b4:	6098      	str	r0, [r3, #8]
   143b6:	60da      	str	r2, [r3, #12]
        return 0;
   143b8:	2000      	movs	r0, #0
   143ba:	e7e7      	b.n	1438c <ble_uuid_init_from_buf+0x22>

000143bc <ble_uuid_cmp>:

int
ble_uuid_cmp(const ble_uuid_t *uuid1, const ble_uuid_t *uuid2)
{
   143bc:	b508      	push	{r3, lr}
    VERIFY_UUID(uuid1);
    VERIFY_UUID(uuid2);

    if (uuid1->type != uuid2->type) {
   143be:	7803      	ldrb	r3, [r0, #0]
   143c0:	780a      	ldrb	r2, [r1, #0]
   143c2:	4293      	cmp	r3, r2
   143c4:	d001      	beq.n	143ca <ble_uuid_cmp+0xe>
      return uuid1->type - uuid2->type;
   143c6:	1a98      	subs	r0, r3, r2
    }

    BLE_HS_DBG_ASSERT(0);

    return -1;
}
   143c8:	bd08      	pop	{r3, pc}
    switch (uuid1->type) {
   143ca:	2b20      	cmp	r3, #32
   143cc:	d00a      	beq.n	143e4 <ble_uuid_cmp+0x28>
   143ce:	2b80      	cmp	r3, #128	; 0x80
   143d0:	d00c      	beq.n	143ec <ble_uuid_cmp+0x30>
   143d2:	2b10      	cmp	r3, #16
   143d4:	d002      	beq.n	143dc <ble_uuid_cmp+0x20>
    return -1;
   143d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   143da:	e7f5      	b.n	143c8 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID16(uuid1)->value - (int) BLE_UUID16(uuid2)->value;
   143dc:	8840      	ldrh	r0, [r0, #2]
   143de:	884b      	ldrh	r3, [r1, #2]
   143e0:	1ac0      	subs	r0, r0, r3
   143e2:	e7f1      	b.n	143c8 <ble_uuid_cmp+0xc>
        return (int) BLE_UUID32(uuid1)->value - (int) BLE_UUID32(uuid2)->value;
   143e4:	6840      	ldr	r0, [r0, #4]
   143e6:	684b      	ldr	r3, [r1, #4]
   143e8:	1ac0      	subs	r0, r0, r3
   143ea:	e7ed      	b.n	143c8 <ble_uuid_cmp+0xc>
        return memcmp(BLE_UUID128(uuid1)->value, BLE_UUID128(uuid2)->value, 16);
   143ec:	2210      	movs	r2, #16
   143ee:	3101      	adds	r1, #1
   143f0:	3001      	adds	r0, #1
   143f2:	f7f7 f9b7 	bl	b764 <memcmp>
   143f6:	e7e7      	b.n	143c8 <ble_uuid_cmp+0xc>

000143f8 <ble_uuid_to_str>:
    }
}

char *
ble_uuid_to_str(const ble_uuid_t *uuid, char *dst)
{
   143f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143fc:	b091      	sub	sp, #68	; 0x44
   143fe:	460c      	mov	r4, r1
    const uint8_t *u8p;

    switch (uuid->type) {
   14400:	7803      	ldrb	r3, [r0, #0]
   14402:	2b20      	cmp	r3, #32
   14404:	d00f      	beq.n	14426 <ble_uuid_to_str+0x2e>
   14406:	2b80      	cmp	r3, #128	; 0x80
   14408:	d013      	beq.n	14432 <ble_uuid_to_str+0x3a>
   1440a:	2b10      	cmp	r3, #16
   1440c:	d002      	beq.n	14414 <ble_uuid_to_str+0x1c>
                u8p[11], u8p[10],  u8p[9],  u8p[8],
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
        break;
    default:
        dst[0] = '\0';
   1440e:	2300      	movs	r3, #0
   14410:	700b      	strb	r3, [r1, #0]
        break;
   14412:	e004      	b.n	1441e <ble_uuid_to_str+0x26>
        sprintf(dst, "0x%04" PRIx16, BLE_UUID16(uuid)->value);
   14414:	8842      	ldrh	r2, [r0, #2]
   14416:	4920      	ldr	r1, [pc, #128]	; (14498 <ble_uuid_to_str+0xa0>)
   14418:	4620      	mov	r0, r4
   1441a:	f007 fe59 	bl	1c0d0 <sprintf>
    }

    return dst;
}
   1441e:	4620      	mov	r0, r4
   14420:	b011      	add	sp, #68	; 0x44
   14422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sprintf(dst, "0x%08" PRIx32, BLE_UUID32(uuid)->value);
   14426:	6842      	ldr	r2, [r0, #4]
   14428:	491c      	ldr	r1, [pc, #112]	; (1449c <ble_uuid_to_str+0xa4>)
   1442a:	4620      	mov	r0, r4
   1442c:	f007 fe50 	bl	1c0d0 <sprintf>
        break;
   14430:	e7f5      	b.n	1441e <ble_uuid_to_str+0x26>
                u8p[15], u8p[14], u8p[13], u8p[12],
   14432:	7c03      	ldrb	r3, [r0, #16]
   14434:	930e      	str	r3, [sp, #56]	; 0x38
   14436:	7bc1      	ldrb	r1, [r0, #15]
   14438:	910f      	str	r1, [sp, #60]	; 0x3c
   1443a:	7b85      	ldrb	r5, [r0, #14]
   1443c:	9500      	str	r5, [sp, #0]
   1443e:	7b43      	ldrb	r3, [r0, #13]
                u8p[11], u8p[10],  u8p[9],  u8p[8],
   14440:	7b02      	ldrb	r2, [r0, #12]
   14442:	7ac1      	ldrb	r1, [r0, #11]
   14444:	7a85      	ldrb	r5, [r0, #10]
   14446:	7a46      	ldrb	r6, [r0, #9]
                 u8p[7],  u8p[6],  u8p[5],  u8p[4],
   14448:	7a07      	ldrb	r7, [r0, #8]
   1444a:	f890 c007 	ldrb.w	ip, [r0, #7]
   1444e:	f890 e006 	ldrb.w	lr, [r0, #6]
   14452:	f890 8005 	ldrb.w	r8, [r0, #5]
                 u8p[3],  u8p[2],  u8p[1],  u8p[0]);
   14456:	f890 9004 	ldrb.w	r9, [r0, #4]
   1445a:	f890 a003 	ldrb.w	sl, [r0, #3]
   1445e:	f890 b002 	ldrb.w	fp, [r0, #2]
   14462:	7840      	ldrb	r0, [r0, #1]
        sprintf(dst, "%02x%02x%02x%02x-%02x%02x-%02x%02x-%02x%02x-"
   14464:	900d      	str	r0, [sp, #52]	; 0x34
   14466:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
   1446a:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   1446e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   14472:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
   14476:	f8cd e020 	str.w	lr, [sp, #32]
   1447a:	f8cd c01c 	str.w	ip, [sp, #28]
   1447e:	9706      	str	r7, [sp, #24]
   14480:	9605      	str	r6, [sp, #20]
   14482:	9504      	str	r5, [sp, #16]
   14484:	9103      	str	r1, [sp, #12]
   14486:	9202      	str	r2, [sp, #8]
   14488:	9301      	str	r3, [sp, #4]
   1448a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1448c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1448e:	4904      	ldr	r1, [pc, #16]	; (144a0 <ble_uuid_to_str+0xa8>)
   14490:	4620      	mov	r0, r4
   14492:	f007 fe1d 	bl	1c0d0 <sprintf>
        break;
   14496:	e7c2      	b.n	1441e <ble_uuid_to_str+0x26>
   14498:	00028fe4 	.word	0x00028fe4
   1449c:	00028fec 	.word	0x00028fec
   144a0:	00028ff4 	.word	0x00028ff4

000144a4 <ble_uuid_u16>:
uint16_t
ble_uuid_u16(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   144a4:	7803      	ldrb	r3, [r0, #0]
   144a6:	2b10      	cmp	r3, #16
   144a8:	d001      	beq.n	144ae <ble_uuid_u16+0xa>
   144aa:	2000      	movs	r0, #0
}
   144ac:	4770      	bx	lr
    return uuid->type == BLE_UUID_TYPE_16 ? BLE_UUID16(uuid)->value : 0;
   144ae:	8840      	ldrh	r0, [r0, #2]
   144b0:	4770      	bx	lr

000144b2 <ble_uuid_init_from_att_buf>:
    return rc;
}

int
ble_uuid_init_from_att_buf(ble_uuid_any_t *uuid, const void *buf, size_t len)
{
   144b2:	b570      	push	{r4, r5, r6, lr}
    int rc = 0;

    if (len == 2) {
   144b4:	2a02      	cmp	r2, #2
   144b6:	d003      	beq.n	144c0 <ble_uuid_init_from_att_buf+0xe>
        uuid->u.type = BLE_UUID_TYPE_16;
        uuid->u16.value = get_le16(buf);
    } else if (len == 16) {
   144b8:	2a10      	cmp	r2, #16
   144ba:	d00a      	beq.n	144d2 <ble_uuid_init_from_att_buf+0x20>
        uuid->u.type = BLE_UUID_TYPE_128;
        memcpy(uuid->u128.value, buf, 16);
    } else {
        rc = BLE_HS_EINVAL;
   144bc:	2003      	movs	r0, #3
    }

    return rc;
}
   144be:	bd70      	pop	{r4, r5, r6, pc}
   144c0:	4604      	mov	r4, r0
        uuid->u.type = BLE_UUID_TYPE_16;
   144c2:	2310      	movs	r3, #16
   144c4:	7003      	strb	r3, [r0, #0]
        uuid->u16.value = get_le16(buf);
   144c6:	4608      	mov	r0, r1
   144c8:	f007 fbab 	bl	1bc22 <get_le16>
   144cc:	8060      	strh	r0, [r4, #2]
    int rc = 0;
   144ce:	2000      	movs	r0, #0
   144d0:	e7f5      	b.n	144be <ble_uuid_init_from_att_buf+0xc>
        uuid->u.type = BLE_UUID_TYPE_128;
   144d2:	4603      	mov	r3, r0
   144d4:	2280      	movs	r2, #128	; 0x80
   144d6:	f803 2b01 	strb.w	r2, [r3], #1
        memcpy(uuid->u128.value, buf, 16);
   144da:	680e      	ldr	r6, [r1, #0]
   144dc:	684d      	ldr	r5, [r1, #4]
   144de:	688c      	ldr	r4, [r1, #8]
   144e0:	68ca      	ldr	r2, [r1, #12]
   144e2:	f8c0 6001 	str.w	r6, [r0, #1]
   144e6:	605d      	str	r5, [r3, #4]
   144e8:	609c      	str	r4, [r3, #8]
   144ea:	60da      	str	r2, [r3, #12]
    int rc = 0;
   144ec:	2000      	movs	r0, #0
   144ee:	e7e6      	b.n	144be <ble_uuid_init_from_att_buf+0xc>

000144f0 <ble_uuid_init_from_att_mbuf>:
{
   144f0:	b530      	push	{r4, r5, lr}
   144f2:	b085      	sub	sp, #20
   144f4:	4605      	mov	r5, r0
   144f6:	4608      	mov	r0, r1
   144f8:	4611      	mov	r1, r2
   144fa:	461c      	mov	r4, r3
    rc = os_mbuf_copydata(om, off, len, val);
   144fc:	466b      	mov	r3, sp
   144fe:	4622      	mov	r2, r4
   14500:	f7f5 ff70 	bl	a3e4 <os_mbuf_copydata>
    if (rc != 0) {
   14504:	4603      	mov	r3, r0
   14506:	b110      	cbz	r0, 1450e <ble_uuid_init_from_att_mbuf+0x1e>
}
   14508:	4618      	mov	r0, r3
   1450a:	b005      	add	sp, #20
   1450c:	bd30      	pop	{r4, r5, pc}
    rc = ble_uuid_init_from_att_buf(uuid, val, len);
   1450e:	4622      	mov	r2, r4
   14510:	4669      	mov	r1, sp
   14512:	4628      	mov	r0, r5
   14514:	f7ff ffcd 	bl	144b2 <ble_uuid_init_from_att_buf>
   14518:	4603      	mov	r3, r0
    return rc;
   1451a:	e7f5      	b.n	14508 <ble_uuid_init_from_att_mbuf+0x18>

0001451c <ble_uuid_flat>:
    return 0;
}

int
ble_uuid_flat(const ble_uuid_t *uuid, void *dst)
{
   1451c:	b570      	push	{r4, r5, r6, lr}
   1451e:	4605      	mov	r5, r0
   14520:	460c      	mov	r4, r1
    VERIFY_UUID(uuid);

    switch (uuid->type) {
   14522:	7803      	ldrb	r3, [r0, #0]
   14524:	2b20      	cmp	r3, #32
   14526:	d00b      	beq.n	14540 <ble_uuid_flat+0x24>
   14528:	2b80      	cmp	r3, #128	; 0x80
   1452a:	d016      	beq.n	1455a <ble_uuid_flat+0x3e>
   1452c:	2b10      	cmp	r3, #16
   1452e:	d001      	beq.n	14534 <ble_uuid_flat+0x18>
        break;
    case BLE_UUID_TYPE_128:
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
        break;
    default:
        return BLE_HS_EINVAL;
   14530:	2003      	movs	r0, #3
   14532:	e004      	b.n	1453e <ble_uuid_flat+0x22>
        put_le16(dst, BLE_UUID16(uuid)->value);
   14534:	8841      	ldrh	r1, [r0, #2]
   14536:	4620      	mov	r0, r4
   14538:	f007 fb52 	bl	1bbe0 <put_le16>
    }

    return 0;
   1453c:	2000      	movs	r0, #0
}
   1453e:	bd70      	pop	{r4, r5, r6, pc}
        memcpy(dst, ble_uuid_base, 16);
   14540:	4e0b      	ldr	r6, [pc, #44]	; (14570 <ble_uuid_flat+0x54>)
   14542:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   14544:	6020      	str	r0, [r4, #0]
   14546:	6061      	str	r1, [r4, #4]
   14548:	60a2      	str	r2, [r4, #8]
   1454a:	4620      	mov	r0, r4
   1454c:	f840 3f0c 	str.w	r3, [r0, #12]!
        put_le32(dst + 12, BLE_UUID32(uuid)->value);
   14550:	6869      	ldr	r1, [r5, #4]
   14552:	f007 fb49 	bl	1bbe8 <put_le32>
    return 0;
   14556:	2000      	movs	r0, #0
        break;
   14558:	e7f1      	b.n	1453e <ble_uuid_flat+0x22>
        memcpy(dst, BLE_UUID128(uuid)->value, 16);
   1455a:	f855 0f01 	ldr.w	r0, [r5, #1]!
   1455e:	6869      	ldr	r1, [r5, #4]
   14560:	68aa      	ldr	r2, [r5, #8]
   14562:	68eb      	ldr	r3, [r5, #12]
   14564:	6020      	str	r0, [r4, #0]
   14566:	6061      	str	r1, [r4, #4]
   14568:	60a2      	str	r2, [r4, #8]
   1456a:	60e3      	str	r3, [r4, #12]
    return 0;
   1456c:	2000      	movs	r0, #0
        break;
   1456e:	e7e6      	b.n	1453e <ble_uuid_flat+0x22>
   14570:	00028fd4 	.word	0x00028fd4

00014574 <ble_uuid_length>:
int
ble_uuid_length(const ble_uuid_t *uuid)
{
    VERIFY_UUID(uuid);

    return uuid->type >> 3;
   14574:	7800      	ldrb	r0, [r0, #0]
}
   14576:	08c0      	lsrs	r0, r0, #3
   14578:	4770      	bx	lr

0001457a <ble_uuid_to_mbuf>:
{
   1457a:	b538      	push	{r3, r4, r5, lr}
   1457c:	4605      	mov	r5, r0
   1457e:	460c      	mov	r4, r1
    len = ble_uuid_length(uuid);
   14580:	f7ff fff8 	bl	14574 <ble_uuid_length>
    buf = os_mbuf_extend(om, len);
   14584:	b281      	uxth	r1, r0
   14586:	4620      	mov	r0, r4
   14588:	f7f6 f8b2 	bl	a6f0 <os_mbuf_extend>
    if (buf == NULL) {
   1458c:	b128      	cbz	r0, 1459a <ble_uuid_to_mbuf+0x20>
   1458e:	4601      	mov	r1, r0
    ble_uuid_flat(uuid, buf);
   14590:	4628      	mov	r0, r5
   14592:	f7ff ffc3 	bl	1451c <ble_uuid_flat>
    return 0;
   14596:	2000      	movs	r0, #0
}
   14598:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOMEM;
   1459a:	2006      	movs	r0, #6
   1459c:	e7fc      	b.n	14598 <ble_uuid_to_mbuf+0x1e>
	...

000145a0 <ble_att_rx_dispatch_entry_find>:
    STATS_NAME(ble_att_stats, write_cmd_tx)
STATS_NAME_END(ble_att_stats)

static const struct ble_att_rx_dispatch_entry *
ble_att_rx_dispatch_entry_find(uint8_t op)
{
   145a0:	4601      	mov	r1, r0
    const struct ble_att_rx_dispatch_entry *entry;
    int i;

    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   145a2:	2300      	movs	r3, #0
   145a4:	2b1a      	cmp	r3, #26
   145a6:	d809      	bhi.n	145bc <ble_att_rx_dispatch_entry_find+0x1c>
        entry = ble_att_rx_dispatch + i;
   145a8:	4a06      	ldr	r2, [pc, #24]	; (145c4 <ble_att_rx_dispatch_entry_find+0x24>)
   145aa:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
        if (entry->bde_op == op) {
   145ae:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
   145b2:	428a      	cmp	r2, r1
   145b4:	d005      	beq.n	145c2 <ble_att_rx_dispatch_entry_find+0x22>
            return entry;
        }

        if (entry->bde_op > op) {
   145b6:	d803      	bhi.n	145c0 <ble_att_rx_dispatch_entry_find+0x20>
    for (i = 0; i < BLE_ATT_RX_DISPATCH_SZ; i++) {
   145b8:	3301      	adds	r3, #1
   145ba:	e7f3      	b.n	145a4 <ble_att_rx_dispatch_entry_find+0x4>
            break;
        }
    }

    return NULL;
   145bc:	2000      	movs	r0, #0
   145be:	4770      	bx	lr
   145c0:	2000      	movs	r0, #0
}
   145c2:	4770      	bx	lr
   145c4:	0002903c 	.word	0x0002903c

000145c8 <ble_att_rx_handle_unknown_request>:
static void
ble_att_rx_handle_unknown_request(uint8_t op, uint16_t conn_handle,
                                  struct os_mbuf **om)
{
    /* If this is command (bit6 is set to 1), do nothing */
    if (op & 0x40) {
   145c8:	f010 0f40 	tst.w	r0, #64	; 0x40
   145cc:	d000      	beq.n	145d0 <ble_att_rx_handle_unknown_request+0x8>
   145ce:	4770      	bx	lr
{
   145d0:	b570      	push	{r4, r5, r6, lr}
   145d2:	b082      	sub	sp, #8
   145d4:	4615      	mov	r5, r2
   145d6:	460e      	mov	r6, r1
   145d8:	4604      	mov	r4, r0
        return;
    }

    os_mbuf_adj(*om, OS_MBUF_PKTLEN(*om));
   145da:	6810      	ldr	r0, [r2, #0]
   145dc:	8a01      	ldrh	r1, [r0, #16]
   145de:	f7f5 ff2e 	bl	a43e <os_mbuf_adj>
    ble_att_svr_tx_error_rsp(conn_handle, *om, op, 0,
   145e2:	2306      	movs	r3, #6
   145e4:	9300      	str	r3, [sp, #0]
   145e6:	2300      	movs	r3, #0
   145e8:	4622      	mov	r2, r4
   145ea:	6829      	ldr	r1, [r5, #0]
   145ec:	4630      	mov	r0, r6
   145ee:	f001 f88c 	bl	1570a <ble_att_svr_tx_error_rsp>
                             BLE_ATT_ERR_REQ_NOT_SUPPORTED);

    *om = NULL;
   145f2:	2300      	movs	r3, #0
   145f4:	602b      	str	r3, [r5, #0]
}
   145f6:	b002      	add	sp, #8
   145f8:	bd70      	pop	{r4, r5, r6, pc}

000145fa <ble_att_rx>:

static int
ble_att_rx(struct ble_l2cap_chan *chan)
{
   145fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   145fe:	b082      	sub	sp, #8
   14600:	4604      	mov	r4, r0
    uint8_t op;
    uint16_t conn_handle;
    struct os_mbuf **om;
    int rc;

    conn_handle = ble_l2cap_get_conn_handle(chan);
   14602:	f7fd fb62 	bl	11cca <ble_l2cap_get_conn_handle>
    if (conn_handle == BLE_HS_CONN_HANDLE_NONE) {
   14606:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1460a:	4298      	cmp	r0, r3
   1460c:	d02c      	beq.n	14668 <ble_att_rx+0x6e>
   1460e:	4605      	mov	r5, r0
        return BLE_HS_ENOTCONN;
    }

    om = &chan->rx_buf;
   14610:	f104 0610 	add.w	r6, r4, #16
    BLE_HS_DBG_ASSERT(*om != NULL);

    rc = os_mbuf_copydata(*om, 0, 1, &op);
   14614:	f10d 0307 	add.w	r3, sp, #7
   14618:	2201      	movs	r2, #1
   1461a:	2100      	movs	r1, #0
   1461c:	6920      	ldr	r0, [r4, #16]
   1461e:	f7f5 fee1 	bl	a3e4 <os_mbuf_copydata>
    if (rc != 0) {
   14622:	bb30      	cbnz	r0, 14672 <ble_att_rx+0x78>
        return BLE_HS_EMSGSIZE;
    }

    entry = ble_att_rx_dispatch_entry_find(op);
   14624:	f89d 7007 	ldrb.w	r7, [sp, #7]
   14628:	4638      	mov	r0, r7
   1462a:	f7ff ffb9 	bl	145a0 <ble_att_rx_dispatch_entry_find>
    if (entry == NULL) {
   1462e:	4680      	mov	r8, r0
   14630:	b198      	cbz	r0, 1465a <ble_att_rx+0x60>
    }

    ble_att_inc_rx_stat(op);

    /* Strip L2CAP ATT header from the front of the mbuf. */
    os_mbuf_adj(*om, 1);
   14632:	2101      	movs	r1, #1
   14634:	6920      	ldr	r0, [r4, #16]
   14636:	f7f5 ff02 	bl	a43e <os_mbuf_adj>

    rc = entry->bde_fn(conn_handle, om);
   1463a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1463e:	4631      	mov	r1, r6
   14640:	4628      	mov	r0, r5
   14642:	4798      	blx	r3
    if (rc != 0) {
   14644:	4604      	mov	r4, r0
   14646:	b180      	cbz	r0, 1466a <ble_att_rx+0x70>
        if (rc == BLE_HS_ENOTSUP) {
   14648:	2808      	cmp	r0, #8
   1464a:	d10e      	bne.n	1466a <ble_att_rx+0x70>
            ble_att_rx_handle_unknown_request(op, conn_handle, om);
   1464c:	4632      	mov	r2, r6
   1464e:	4629      	mov	r1, r5
   14650:	f89d 0007 	ldrb.w	r0, [sp, #7]
   14654:	f7ff ffb8 	bl	145c8 <ble_att_rx_handle_unknown_request>
   14658:	e007      	b.n	1466a <ble_att_rx+0x70>
        ble_att_rx_handle_unknown_request(op, conn_handle, om);
   1465a:	4632      	mov	r2, r6
   1465c:	4629      	mov	r1, r5
   1465e:	4638      	mov	r0, r7
   14660:	f7ff ffb2 	bl	145c8 <ble_att_rx_handle_unknown_request>
        return BLE_HS_ENOTSUP;
   14664:	2408      	movs	r4, #8
   14666:	e000      	b.n	1466a <ble_att_rx+0x70>
        return BLE_HS_ENOTCONN;
   14668:	2407      	movs	r4, #7
        }
        return rc;
    }

    return 0;
}
   1466a:	4620      	mov	r0, r4
   1466c:	b002      	add	sp, #8
   1466e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_EMSGSIZE;
   14672:	2404      	movs	r4, #4
   14674:	e7f9      	b.n	1466a <ble_att_rx+0x70>

00014676 <ble_att_conn_chan_find>:
{
   14676:	b508      	push	{r3, lr}
    return ble_hs_misc_conn_chan_find(conn_handle, BLE_L2CAP_CID_ATT,
   14678:	4613      	mov	r3, r2
   1467a:	460a      	mov	r2, r1
   1467c:	2104      	movs	r1, #4
   1467e:	f7fc ffba 	bl	115f6 <ble_hs_misc_conn_chan_find>
}
   14682:	bd08      	pop	{r3, pc}

00014684 <ble_att_inc_tx_stat>:
}
   14684:	4770      	bx	lr

00014686 <ble_att_set_peer_mtu>:
    if (peer_mtu < BLE_ATT_MTU_DFLT) {
   14686:	2916      	cmp	r1, #22
   14688:	d800      	bhi.n	1468c <ble_att_set_peer_mtu+0x6>
        peer_mtu = BLE_ATT_MTU_DFLT;
   1468a:	2117      	movs	r1, #23
    chan->peer_mtu = peer_mtu;
   1468c:	8181      	strh	r1, [r0, #12]
}
   1468e:	4770      	bx	lr

00014690 <ble_att_chan_mtu>:
{
   14690:	b510      	push	{r4, lr}
   14692:	4604      	mov	r4, r0
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   14694:	f7fd fae6 	bl	11c64 <ble_l2cap_is_mtu_req_sent>
   14698:	b130      	cbz	r0, 146a8 <ble_att_chan_mtu+0x18>
        chan->peer_mtu == 0) {
   1469a:	89a0      	ldrh	r0, [r4, #12]
    if (!(ble_l2cap_is_mtu_req_sent(chan)) ||
   1469c:	b130      	cbz	r0, 146ac <ble_att_chan_mtu+0x1c>
        mtu = min(chan->my_mtu, chan->peer_mtu);
   1469e:	8963      	ldrh	r3, [r4, #10]
   146a0:	4298      	cmp	r0, r3
   146a2:	bf28      	it	cs
   146a4:	4618      	movcs	r0, r3
}
   146a6:	bd10      	pop	{r4, pc}
        mtu = BLE_ATT_MTU_DFLT;
   146a8:	2017      	movs	r0, #23
   146aa:	e7fc      	b.n	146a6 <ble_att_chan_mtu+0x16>
   146ac:	2017      	movs	r0, #23
   146ae:	e7fa      	b.n	146a6 <ble_att_chan_mtu+0x16>

000146b0 <ble_att_truncate_to_mtu>:
{
   146b0:	b510      	push	{r4, lr}
   146b2:	460c      	mov	r4, r1
    mtu = ble_att_chan_mtu(att_chan);
   146b4:	f7ff ffec 	bl	14690 <ble_att_chan_mtu>
    extra_len = OS_MBUF_PKTLEN(txom) - mtu;
   146b8:	8a21      	ldrh	r1, [r4, #16]
   146ba:	1a09      	subs	r1, r1, r0
    if (extra_len > 0) {
   146bc:	2900      	cmp	r1, #0
   146be:	dd03      	ble.n	146c8 <ble_att_truncate_to_mtu+0x18>
        os_mbuf_adj(txom, -extra_len);
   146c0:	4249      	negs	r1, r1
   146c2:	4620      	mov	r0, r4
   146c4:	f7f5 febb 	bl	a43e <os_mbuf_adj>
}
   146c8:	bd10      	pop	{r4, pc}

000146ca <ble_att_mtu>:
{
   146ca:	b510      	push	{r4, lr}
   146cc:	b082      	sub	sp, #8
   146ce:	4604      	mov	r4, r0
    ble_hs_lock();
   146d0:	f7fb f9e8 	bl	faa4 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   146d4:	aa01      	add	r2, sp, #4
   146d6:	4669      	mov	r1, sp
   146d8:	4620      	mov	r0, r4
   146da:	f7ff ffcc 	bl	14676 <ble_att_conn_chan_find>
    if (rc == 0) {
   146de:	b128      	cbz	r0, 146ec <ble_att_mtu+0x22>
        mtu = 0;
   146e0:	2400      	movs	r4, #0
    ble_hs_unlock();
   146e2:	f7fb f9e3 	bl	faac <ble_hs_unlock>
}
   146e6:	4620      	mov	r0, r4
   146e8:	b002      	add	sp, #8
   146ea:	bd10      	pop	{r4, pc}
        mtu = ble_att_chan_mtu(chan);
   146ec:	9801      	ldr	r0, [sp, #4]
   146ee:	f7ff ffcf 	bl	14690 <ble_att_chan_mtu>
   146f2:	4604      	mov	r4, r0
   146f4:	e7f5      	b.n	146e2 <ble_att_mtu+0x18>
	...

000146f8 <ble_att_create_chan>:
    return 0;
}

struct ble_l2cap_chan *
ble_att_create_chan(uint16_t conn_handle)
{
   146f8:	b508      	push	{r3, lr}
    struct ble_l2cap_chan *chan;

    chan = ble_l2cap_chan_alloc(conn_handle);
   146fa:	f7fd fa91 	bl	11c20 <ble_l2cap_chan_alloc>
    if (chan == NULL) {
   146fe:	4603      	mov	r3, r0
   14700:	b138      	cbz	r0, 14712 <ble_att_create_chan+0x1a>
        return NULL;
    }

    chan->scid = BLE_L2CAP_CID_ATT;
   14702:	2204      	movs	r2, #4
   14704:	8102      	strh	r2, [r0, #8]
    chan->dcid = BLE_L2CAP_CID_ATT;
   14706:	80c2      	strh	r2, [r0, #6]
    chan->my_mtu = ble_att_preferred_mtu_val;
   14708:	4a03      	ldr	r2, [pc, #12]	; (14718 <ble_att_create_chan+0x20>)
   1470a:	8812      	ldrh	r2, [r2, #0]
   1470c:	8142      	strh	r2, [r0, #10]
    chan->rx_fn = ble_att_rx;
   1470e:	4a03      	ldr	r2, [pc, #12]	; (1471c <ble_att_create_chan+0x24>)
   14710:	6182      	str	r2, [r0, #24]

    return chan;
}
   14712:	4618      	mov	r0, r3
   14714:	bd08      	pop	{r3, pc}
   14716:	bf00      	nop
   14718:	200077a4 	.word	0x200077a4
   1471c:	000145fb 	.word	0x000145fb

00014720 <ble_att_init>:
int
ble_att_init(void)
{
    int rc;

    ble_att_preferred_mtu_val = MYNEWT_VAL(BLE_ATT_PREFERRED_MTU);
   14720:	4b02      	ldr	r3, [pc, #8]	; (1472c <ble_att_init+0xc>)
   14722:	f44f 7280 	mov.w	r2, #256	; 0x100
   14726:	801a      	strh	r2, [r3, #0]
    if (rc != 0) {
        return BLE_HS_EOS;
    }

    return 0;
}
   14728:	2000      	movs	r0, #0
   1472a:	4770      	bx	lr
   1472c:	200077a4 	.word	0x200077a4

00014730 <ble_att_clt_rx_error>:
 * $error response                                                           *
 *****************************************************************************/

int
ble_att_clt_rx_error(uint16_t conn_handle, struct os_mbuf **rxom)
{
   14730:	b570      	push	{r4, r5, r6, lr}
   14732:	4606      	mov	r6, r0
   14734:	460c      	mov	r4, r1
    struct ble_att_error_rsp *rsp;
    int rc;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*rsp));
   14736:	2104      	movs	r1, #4
   14738:	4620      	mov	r0, r4
   1473a:	f7fc ff3a 	bl	115b2 <ble_hs_mbuf_pullup_base>
    if (rc != 0) {
   1473e:	4605      	mov	r5, r0
   14740:	b108      	cbz	r0, 14746 <ble_att_clt_rx_error+0x16>

    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
                     le16toh(rsp->baep_error_code));

    return 0;
}
   14742:	4628      	mov	r0, r5
   14744:	bd70      	pop	{r4, r5, r6, pc}
    rsp = (struct ble_att_error_rsp *)(*rxom)->om_data;
   14746:	6823      	ldr	r3, [r4, #0]
   14748:	681b      	ldr	r3, [r3, #0]
    ble_gattc_rx_err(conn_handle, le16toh(rsp->baep_handle),
   1474a:	78da      	ldrb	r2, [r3, #3]
   1474c:	f8b3 1001 	ldrh.w	r1, [r3, #1]
   14750:	4630      	mov	r0, r6
   14752:	f7fa f8b8 	bl	e8c6 <ble_gattc_rx_err>
    return 0;
   14756:	e7f4      	b.n	14742 <ble_att_clt_rx_error+0x12>

00014758 <ble_att_clt_rx_mtu>:
    return rc;
}

int
ble_att_clt_rx_mtu(uint16_t conn_handle, struct os_mbuf **rxom)
{
   14758:	b570      	push	{r4, r5, r6, lr}
   1475a:	b082      	sub	sp, #8
   1475c:	4605      	mov	r5, r0
   1475e:	460e      	mov	r6, r1
    uint16_t mtu;
    int rc;

    mtu = 0;

    rc = ble_hs_mbuf_pullup_base(rxom, sizeof(*cmd));
   14760:	2102      	movs	r1, #2
   14762:	4630      	mov	r0, r6
   14764:	f7fc ff25 	bl	115b2 <ble_hs_mbuf_pullup_base>
    if (rc == 0) {
   14768:	b148      	cbz	r0, 1477e <ble_att_clt_rx_mtu+0x26>
   1476a:	4604      	mov	r4, r0
    mtu = 0;
   1476c:	2600      	movs	r6, #0
        if (rc == 0) {
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
        }
    }

    ble_gattc_rx_mtu(conn_handle, rc, mtu);
   1476e:	4632      	mov	r2, r6
   14770:	4621      	mov	r1, r4
   14772:	4628      	mov	r0, r5
   14774:	f7fa f8bd 	bl	e8f2 <ble_gattc_rx_mtu>
    return rc;
}
   14778:	4620      	mov	r0, r4
   1477a:	b002      	add	sp, #8
   1477c:	bd70      	pop	{r4, r5, r6, pc}
        cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   1477e:	6833      	ldr	r3, [r6, #0]
   14780:	681e      	ldr	r6, [r3, #0]
        ble_hs_lock();
   14782:	f7fb f98f 	bl	faa4 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   14786:	aa01      	add	r2, sp, #4
   14788:	2100      	movs	r1, #0
   1478a:	4628      	mov	r0, r5
   1478c:	f7ff ff73 	bl	14676 <ble_att_conn_chan_find>
        if (rc == 0) {
   14790:	4604      	mov	r4, r0
   14792:	b150      	cbz	r0, 147aa <ble_att_clt_rx_mtu+0x52>
    mtu = 0;
   14794:	2600      	movs	r6, #0
        ble_hs_unlock();
   14796:	f7fb f989 	bl	faac <ble_hs_unlock>
        if (rc == 0) {
   1479a:	2c00      	cmp	r4, #0
   1479c:	d1e7      	bne.n	1476e <ble_att_clt_rx_mtu+0x16>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   1479e:	4632      	mov	r2, r6
   147a0:	2104      	movs	r1, #4
   147a2:	4628      	mov	r0, r5
   147a4:	f7f9 f95d 	bl	da62 <ble_gap_mtu_event>
   147a8:	e7e1      	b.n	1476e <ble_att_clt_rx_mtu+0x16>
            ble_att_set_peer_mtu(chan, le16toh(cmd->bamc_mtu));
   147aa:	8831      	ldrh	r1, [r6, #0]
   147ac:	9801      	ldr	r0, [sp, #4]
   147ae:	f7ff ff6a 	bl	14686 <ble_att_set_peer_mtu>
            mtu = ble_att_chan_mtu(chan);
   147b2:	9801      	ldr	r0, [sp, #4]
   147b4:	f7ff ff6c 	bl	14690 <ble_att_chan_mtu>
   147b8:	4606      	mov	r6, r0
   147ba:	e7ec      	b.n	14796 <ble_att_clt_rx_mtu+0x3e>

000147bc <ble_att_clt_tx_find_info>:

    req->bafq_start_handle = htole16(start_handle);
    req->bafq_end_handle = htole16(end_handle);

    return ble_att_tx(conn_handle, txom);
}
   147bc:	2008      	movs	r0, #8
   147be:	4770      	bx	lr

000147c0 <ble_att_clt_rx_find_info>:

done:
    /* Notify GATT that response processing is done. */
    ble_gattc_rx_find_info_complete(conn_handle, rc);
    return rc;
}
   147c0:	2008      	movs	r0, #8
   147c2:	4770      	bx	lr

000147c4 <ble_att_clt_tx_find_type_value>:
    req->bavq_end_handle = htole16(end_handle);
    req->bavq_attr_type = htole16(attribute_type);
    memcpy(req->bavq_value, attribute_value, value_len);

    return ble_att_tx(conn_handle, txom);
}
   147c4:	2008      	movs	r0, #8
   147c6:	4770      	bx	lr

000147c8 <ble_att_clt_rx_find_type_value>:

    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_find_type_value_complete(conn_handle, rc);

    return 0;
}
   147c8:	2008      	movs	r0, #8
   147ca:	4770      	bx	lr

000147cc <ble_att_clt_tx_read_type>:
    req->batq_end_handle = htole16(end_handle);

    ble_uuid_flat(uuid, req->uuid);

    return ble_att_tx(conn_handle, txom);
}
   147cc:	2008      	movs	r0, #8
   147ce:	4770      	bx	lr

000147d0 <ble_att_clt_rx_read_type>:
done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_type_complete(conn_handle, rc);
    return rc;

}
   147d0:	2008      	movs	r0, #8
   147d2:	4770      	bx	lr

000147d4 <ble_att_clt_tx_read>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   147d4:	2008      	movs	r0, #8
   147d6:	4770      	bx	lr

000147d8 <ble_att_clt_rx_read>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_rsp(conn_handle, 0, rxom);
    return 0;
}
   147d8:	2008      	movs	r0, #8
   147da:	4770      	bx	lr

000147dc <ble_att_clt_tx_read_blob>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   147dc:	2008      	movs	r0, #8
   147de:	4770      	bx	lr

000147e0 <ble_att_clt_rx_read_blob>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_blob_rsp(conn_handle, 0, rxom);
    return 0;
}
   147e0:	2008      	movs	r0, #8
   147e2:	4770      	bx	lr

000147e4 <ble_att_clt_rx_read_mult>:
#endif

    /* Pass the Attribute Value field to GATT. */
    ble_gattc_rx_read_mult_rsp(conn_handle, 0, rxom);
    return 0;
}
   147e4:	2008      	movs	r0, #8
   147e6:	4770      	bx	lr

000147e8 <ble_att_clt_tx_read_group_type>:
    req->bagq_start_handle = htole16(start_handle);
    req->bagq_end_handle = htole16(end_handle);
    ble_uuid_flat(uuid, req->uuid);

    return ble_att_tx(conn_handle, txom);
}
   147e8:	2008      	movs	r0, #8
   147ea:	4770      	bx	lr

000147ec <ble_att_clt_rx_read_group_type>:

done:
    /* Notify GATT that the response is done being parsed. */
    ble_gattc_rx_read_group_type_complete(conn_handle, rc);
    return rc;
}
   147ec:	2008      	movs	r0, #8
   147ee:	4770      	bx	lr

000147f0 <ble_att_clt_rx_write>:
#endif

    /* No payload. */
    ble_gattc_rx_write_rsp(conn_handle);
    return 0;
}
   147f0:	2008      	movs	r0, #8
   147f2:	4770      	bx	lr

000147f4 <ble_att_clt_tx_prep_write>:
    return ble_att_tx(conn_handle, txom2);

err:
    os_mbuf_free_chain(txom);
    return rc;
}
   147f4:	2008      	movs	r0, #8
   147f6:	4770      	bx	lr

000147f8 <ble_att_clt_rx_prep_write>:

done:
    /* Notify GATT client that the full response has been parsed. */
    ble_gattc_rx_prep_write_rsp(conn_handle, rc, handle, offset, rxom);
    return rc;
}
   147f8:	2008      	movs	r0, #8
   147fa:	4770      	bx	lr

000147fc <ble_att_clt_tx_exec_write>:
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   147fc:	2008      	movs	r0, #8
   147fe:	4770      	bx	lr

00014800 <ble_att_clt_rx_exec_write>:
    return BLE_HS_ENOTSUP;
#endif

    ble_gattc_rx_exec_write_rsp(conn_handle, 0);
    return 0;
}
   14800:	2008      	movs	r0, #8
   14802:	4770      	bx	lr

00014804 <ble_att_clt_tx_notify>:
 *****************************************************************************/

int
ble_att_clt_tx_notify(uint16_t conn_handle, uint16_t handle,
                      struct os_mbuf *txom)
{
   14804:	b570      	push	{r4, r5, r6, lr}
   14806:	b082      	sub	sp, #8
   14808:	4615      	mov	r5, r2

    struct ble_att_notify_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1480a:	b1a1      	cbz	r1, 14836 <ble_att_clt_tx_notify+0x32>
   1480c:	4604      	mov	r4, r0
   1480e:	460e      	mov	r6, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    req = ble_att_cmd_get(BLE_ATT_OP_NOTIFY_REQ, sizeof(*req), &txom2);
   14810:	aa01      	add	r2, sp, #4
   14812:	2102      	movs	r1, #2
   14814:	201b      	movs	r0, #27
   14816:	f000 f84d 	bl	148b4 <ble_att_cmd_get>
    if (req == NULL) {
   1481a:	b908      	cbnz	r0, 14820 <ble_att_clt_tx_notify+0x1c>
        rc = BLE_HS_ENOMEM;
   1481c:	2406      	movs	r4, #6
   1481e:	e00b      	b.n	14838 <ble_att_clt_tx_notify+0x34>
        goto err;
    }

    req->banq_handle = htole16(handle);
   14820:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   14822:	4629      	mov	r1, r5
   14824:	9801      	ldr	r0, [sp, #4]
   14826:	f7f5 ff40 	bl	a6aa <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   1482a:	9901      	ldr	r1, [sp, #4]
   1482c:	4620      	mov	r0, r4
   1482e:	f000 f851 	bl	148d4 <ble_att_tx>
   14832:	4604      	mov	r4, r0
   14834:	e003      	b.n	1483e <ble_att_clt_tx_notify+0x3a>
        rc = BLE_HS_EINVAL;
   14836:	2403      	movs	r4, #3

err:
    os_mbuf_free_chain(txom);
   14838:	4628      	mov	r0, r5
   1483a:	f7f5 fcd1 	bl	a1e0 <os_mbuf_free_chain>
    return rc;
}
   1483e:	4620      	mov	r0, r4
   14840:	b002      	add	sp, #8
   14842:	bd70      	pop	{r4, r5, r6, pc}

00014844 <ble_att_clt_tx_indicate>:
 *****************************************************************************/

int
ble_att_clt_tx_indicate(uint16_t conn_handle, uint16_t handle,
                        struct os_mbuf *txom)
{
   14844:	b570      	push	{r4, r5, r6, lr}
   14846:	b082      	sub	sp, #8
   14848:	4615      	mov	r5, r2

    struct ble_att_indicate_req *req;
    struct os_mbuf *txom2;
    int rc;

    if (handle == 0) {
   1484a:	b1a1      	cbz	r1, 14876 <ble_att_clt_tx_indicate+0x32>
   1484c:	4604      	mov	r4, r0
   1484e:	460e      	mov	r6, r1
        rc = BLE_HS_EINVAL;
        goto err;
    }

    req = ble_att_cmd_get(BLE_ATT_OP_INDICATE_REQ, sizeof(*req), &txom2);
   14850:	aa01      	add	r2, sp, #4
   14852:	2102      	movs	r1, #2
   14854:	201d      	movs	r0, #29
   14856:	f000 f82d 	bl	148b4 <ble_att_cmd_get>
    if (req == NULL) {
   1485a:	b908      	cbnz	r0, 14860 <ble_att_clt_tx_indicate+0x1c>
        rc = BLE_HS_ENOMEM;
   1485c:	2406      	movs	r4, #6
   1485e:	e00b      	b.n	14878 <ble_att_clt_tx_indicate+0x34>
        goto err;
    }

    req->baiq_handle = htole16(handle);
   14860:	8006      	strh	r6, [r0, #0]
    os_mbuf_concat(txom2, txom);
   14862:	4629      	mov	r1, r5
   14864:	9801      	ldr	r0, [sp, #4]
   14866:	f7f5 ff20 	bl	a6aa <os_mbuf_concat>

    return ble_att_tx(conn_handle, txom2);
   1486a:	9901      	ldr	r1, [sp, #4]
   1486c:	4620      	mov	r0, r4
   1486e:	f000 f831 	bl	148d4 <ble_att_tx>
   14872:	4604      	mov	r4, r0
   14874:	e003      	b.n	1487e <ble_att_clt_tx_indicate+0x3a>
        rc = BLE_HS_EINVAL;
   14876:	2403      	movs	r4, #3

err:
    os_mbuf_free_chain(txom);
   14878:	4628      	mov	r0, r5
   1487a:	f7f5 fcb1 	bl	a1e0 <os_mbuf_free_chain>
    return rc;
}
   1487e:	4620      	mov	r0, r4
   14880:	b002      	add	sp, #8
   14882:	bd70      	pop	{r4, r5, r6, pc}

00014884 <ble_att_clt_rx_indicate>:

int
ble_att_clt_rx_indicate(uint16_t conn_handle, struct os_mbuf **rxom)
{
   14884:	b508      	push	{r3, lr}
#if !NIMBLE_BLE_ATT_CLT_INDICATE
    return BLE_HS_ENOTSUP;
#endif

    /* No payload. */
    ble_gattc_rx_indicate_rsp(conn_handle);
   14886:	f7fa f846 	bl	e916 <ble_gattc_rx_indicate_rsp>
    return 0;
}
   1488a:	2000      	movs	r0, #0
   1488c:	bd08      	pop	{r3, pc}

0001488e <ble_att_cmd_prepare>:
#include "host/ble_uuid.h"
#include "ble_hs_priv.h"

void *
ble_att_cmd_prepare(uint8_t opcode, size_t len, struct os_mbuf *txom)
{
   1488e:	b570      	push	{r4, r5, r6, lr}
   14890:	4606      	mov	r6, r0
   14892:	4615      	mov	r5, r2
    struct ble_att_hdr *hdr;

    if (os_mbuf_extend(txom, sizeof(*hdr) + len) == NULL) {
   14894:	3101      	adds	r1, #1
   14896:	b289      	uxth	r1, r1
   14898:	4610      	mov	r0, r2
   1489a:	f7f5 ff29 	bl	a6f0 <os_mbuf_extend>
   1489e:	b120      	cbz	r0, 148aa <ble_att_cmd_prepare+0x1c>
        return NULL;
    }

    hdr = (struct ble_att_hdr *)(txom)->om_data;

    hdr->opcode = opcode;
   148a0:	682c      	ldr	r4, [r5, #0]
   148a2:	f804 6b01 	strb.w	r6, [r4], #1

    return hdr->data;
}
   148a6:	4620      	mov	r0, r4
   148a8:	bd70      	pop	{r4, r5, r6, pc}
   148aa:	4604      	mov	r4, r0
        os_mbuf_free_chain(txom);
   148ac:	4628      	mov	r0, r5
   148ae:	f7f5 fc97 	bl	a1e0 <os_mbuf_free_chain>
        return NULL;
   148b2:	e7f8      	b.n	148a6 <ble_att_cmd_prepare+0x18>

000148b4 <ble_att_cmd_get>:

void *
ble_att_cmd_get(uint8_t opcode, size_t len, struct os_mbuf **txom)
{
   148b4:	b570      	push	{r4, r5, r6, lr}
   148b6:	4605      	mov	r5, r0
   148b8:	460e      	mov	r6, r1
   148ba:	4614      	mov	r4, r2
    *txom = ble_hs_mbuf_l2cap_pkt();
   148bc:	f7fc fe58 	bl	11570 <ble_hs_mbuf_l2cap_pkt>
   148c0:	6020      	str	r0, [r4, #0]
    if (*txom == NULL) {
   148c2:	b128      	cbz	r0, 148d0 <ble_att_cmd_get+0x1c>
        return NULL;
    }

    return ble_att_cmd_prepare(opcode, len, *txom);
   148c4:	4602      	mov	r2, r0
   148c6:	4631      	mov	r1, r6
   148c8:	4628      	mov	r0, r5
   148ca:	f7ff ffe0 	bl	1488e <ble_att_cmd_prepare>
}
   148ce:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   148d0:	2000      	movs	r0, #0
   148d2:	e7fc      	b.n	148ce <ble_att_cmd_get+0x1a>

000148d4 <ble_att_tx>:

int
ble_att_tx(uint16_t conn_handle, struct os_mbuf *txom)
{
   148d4:	b530      	push	{r4, r5, lr}
   148d6:	b083      	sub	sp, #12
   148d8:	4605      	mov	r5, r0
   148da:	460c      	mov	r4, r1
    struct ble_l2cap_chan *chan;
    struct ble_hs_conn *conn;
    int rc;

    BLE_HS_DBG_ASSERT_EVAL(txom->om_len >= 1);
    ble_att_inc_tx_stat(txom->om_data[0]);
   148dc:	680b      	ldr	r3, [r1, #0]
   148de:	7818      	ldrb	r0, [r3, #0]
   148e0:	f7ff fed0 	bl	14684 <ble_att_inc_tx_stat>

    ble_hs_lock();
   148e4:	f7fb f8de 	bl	faa4 <ble_hs_lock>

    rc = ble_hs_misc_conn_chan_find_reqd(conn_handle, BLE_L2CAP_CID_ATT, &conn,
   148e8:	ab01      	add	r3, sp, #4
   148ea:	466a      	mov	r2, sp
   148ec:	2104      	movs	r1, #4
   148ee:	4628      	mov	r0, r5
   148f0:	f7fc fe99 	bl	11626 <ble_hs_misc_conn_chan_find_reqd>
                                         &chan);
    if (rc != 0) {
   148f4:	b970      	cbnz	r0, 14914 <ble_att_tx+0x40>
        os_mbuf_free_chain(txom);
    } else {
        ble_att_truncate_to_mtu(chan, txom);
   148f6:	4621      	mov	r1, r4
   148f8:	9801      	ldr	r0, [sp, #4]
   148fa:	f7ff fed9 	bl	146b0 <ble_att_truncate_to_mtu>
        rc = ble_l2cap_tx(conn, chan, txom);
   148fe:	4622      	mov	r2, r4
   14900:	9901      	ldr	r1, [sp, #4]
   14902:	9800      	ldr	r0, [sp, #0]
   14904:	f7fd fa73 	bl	11dee <ble_l2cap_tx>
   14908:	4605      	mov	r5, r0
    }

    ble_hs_unlock();
   1490a:	f7fb f8cf 	bl	faac <ble_hs_unlock>

    return rc;
}
   1490e:	4628      	mov	r0, r5
   14910:	b003      	add	sp, #12
   14912:	bd30      	pop	{r4, r5, pc}
   14914:	4605      	mov	r5, r0
        os_mbuf_free_chain(txom);
   14916:	4620      	mov	r0, r4
   14918:	f7f5 fc62 	bl	a1e0 <os_mbuf_free_chain>
   1491c:	e7f5      	b.n	1490a <ble_att_tx+0x36>
	...

00014920 <ble_att_svr_next_id>:
static uint16_t
ble_att_svr_next_id(void)
{
    /* Rollover is fatal. */
    BLE_HS_DBG_ASSERT(ble_att_svr_id != UINT16_MAX);
    return ++ble_att_svr_id;
   14920:	4b02      	ldr	r3, [pc, #8]	; (1492c <ble_att_svr_next_id+0xc>)
   14922:	8818      	ldrh	r0, [r3, #0]
   14924:	3001      	adds	r0, #1
   14926:	b280      	uxth	r0, r0
   14928:	8018      	strh	r0, [r3, #0]
}
   1492a:	4770      	bx	lr
   1492c:	200077d0 	.word	0x200077d0

00014930 <ble_att_svr_prep_find_prev>:
{
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;

    prev = NULL;
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   14930:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   14932:	2000      	movs	r0, #0
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   14934:	b173      	cbz	r3, 14954 <ble_att_svr_prep_find_prev+0x24>
{
   14936:	b410      	push	{r4}
   14938:	e002      	b.n	14940 <ble_att_svr_prep_find_prev+0x10>

        if (entry->bape_handle == handle && entry->bape_offset > offset) {
            break;
        }

        prev = entry;
   1493a:	4618      	mov	r0, r3
    SLIST_FOREACH(entry, &basc->basc_prep_list, bape_next) {
   1493c:	681b      	ldr	r3, [r3, #0]
   1493e:	b133      	cbz	r3, 1494e <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle > handle) {
   14940:	889c      	ldrh	r4, [r3, #4]
   14942:	428c      	cmp	r4, r1
   14944:	d803      	bhi.n	1494e <ble_att_svr_prep_find_prev+0x1e>
        if (entry->bape_handle == handle && entry->bape_offset > offset) {
   14946:	d1f8      	bne.n	1493a <ble_att_svr_prep_find_prev+0xa>
   14948:	88dc      	ldrh	r4, [r3, #6]
   1494a:	4294      	cmp	r4, r2
   1494c:	d9f5      	bls.n	1493a <ble_att_svr_prep_find_prev+0xa>
    }

    return prev;
}
   1494e:	f85d 4b04 	ldr.w	r4, [sp], #4
   14952:	4770      	bx	lr
   14954:	4770      	bx	lr

00014956 <ble_att_svr_prep_validate>:
    struct ble_att_prep_entry *entry;
    struct ble_att_prep_entry *prev;
    int cur_len;

    prev = NULL;
    SLIST_FOREACH(entry, prep_list, bape_next) {
   14956:	6803      	ldr	r3, [r0, #0]
    prev = NULL;
   14958:	2200      	movs	r2, #0
    SLIST_FOREACH(entry, prep_list, bape_next) {
   1495a:	b34b      	cbz	r3, 149b0 <ble_att_svr_prep_validate+0x5a>
{
   1495c:	b410      	push	{r4}
   1495e:	e00b      	b.n	14978 <ble_att_svr_prep_validate+0x22>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
            /* Ensure attribute write starts at offset 0. */
            if (entry->bape_offset != 0) {
   14960:	88da      	ldrh	r2, [r3, #6]
   14962:	b9ca      	cbnz	r2, 14998 <ble_att_svr_prep_validate+0x42>
                *err_handle = entry->bape_handle;
                return BLE_ATT_ERR_INVALID_OFFSET;
            }
        }

        cur_len = entry->bape_offset + OS_MBUF_PKTLEN(entry->bape_value);
   14964:	88da      	ldrh	r2, [r3, #6]
   14966:	6898      	ldr	r0, [r3, #8]
   14968:	8a00      	ldrh	r0, [r0, #16]
   1496a:	4402      	add	r2, r0
        if (cur_len > BLE_ATT_ATTR_MAX_LEN) {
   1496c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   14970:	dc16      	bgt.n	149a0 <ble_att_svr_prep_validate+0x4a>
            *err_handle = entry->bape_handle;
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
        }

        prev = entry;
   14972:	461a      	mov	r2, r3
    SLIST_FOREACH(entry, prep_list, bape_next) {
   14974:	681b      	ldr	r3, [r3, #0]
   14976:	b1bb      	cbz	r3, 149a8 <ble_att_svr_prep_validate+0x52>
        if (prev == NULL || prev->bape_handle != entry->bape_handle) {
   14978:	2a00      	cmp	r2, #0
   1497a:	d0f1      	beq.n	14960 <ble_att_svr_prep_validate+0xa>
   1497c:	8894      	ldrh	r4, [r2, #4]
   1497e:	8898      	ldrh	r0, [r3, #4]
   14980:	4284      	cmp	r4, r0
   14982:	d1ed      	bne.n	14960 <ble_att_svr_prep_validate+0xa>
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   14984:	88d4      	ldrh	r4, [r2, #6]
   14986:	6892      	ldr	r2, [r2, #8]
   14988:	8a12      	ldrh	r2, [r2, #16]
   1498a:	4422      	add	r2, r4
                entry->bape_offset) {
   1498c:	88dc      	ldrh	r4, [r3, #6]
            if (prev->bape_offset + OS_MBUF_PKTLEN(prev->bape_value) !=
   1498e:	42a2      	cmp	r2, r4
   14990:	d0e8      	beq.n	14964 <ble_att_svr_prep_validate+0xe>
                *err_handle = entry->bape_handle;
   14992:	8008      	strh	r0, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   14994:	2007      	movs	r0, #7
   14996:	e008      	b.n	149aa <ble_att_svr_prep_validate+0x54>
                *err_handle = entry->bape_handle;
   14998:	889b      	ldrh	r3, [r3, #4]
   1499a:	800b      	strh	r3, [r1, #0]
                return BLE_ATT_ERR_INVALID_OFFSET;
   1499c:	2007      	movs	r0, #7
   1499e:	e004      	b.n	149aa <ble_att_svr_prep_validate+0x54>
            *err_handle = entry->bape_handle;
   149a0:	889b      	ldrh	r3, [r3, #4]
   149a2:	800b      	strh	r3, [r1, #0]
            return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   149a4:	200d      	movs	r0, #13
   149a6:	e000      	b.n	149aa <ble_att_svr_prep_validate+0x54>
    }

    return 0;
   149a8:	2000      	movs	r0, #0
}
   149aa:	f85d 4b04 	ldr.w	r4, [sp], #4
   149ae:	4770      	bx	lr
    return 0;
   149b0:	2000      	movs	r0, #0
}
   149b2:	4770      	bx	lr

000149b4 <ble_att_svr_entry_alloc>:
{
   149b4:	b508      	push	{r3, lr}
    entry = os_memblock_get(&ble_att_svr_entry_pool);
   149b6:	4806      	ldr	r0, [pc, #24]	; (149d0 <ble_att_svr_entry_alloc+0x1c>)
   149b8:	f7f6 f861 	bl	aa7e <os_memblock_get>
    if (entry != NULL) {
   149bc:	4603      	mov	r3, r0
   149be:	b128      	cbz	r0, 149cc <ble_att_svr_entry_alloc+0x18>
        memset(entry, 0, sizeof *entry);
   149c0:	2200      	movs	r2, #0
   149c2:	6002      	str	r2, [r0, #0]
   149c4:	6042      	str	r2, [r0, #4]
   149c6:	6082      	str	r2, [r0, #8]
   149c8:	60c2      	str	r2, [r0, #12]
   149ca:	6102      	str	r2, [r0, #16]
}
   149cc:	4618      	mov	r0, r3
   149ce:	bd08      	pop	{r3, pc}
   149d0:	200077ac 	.word	0x200077ac

000149d4 <ble_att_svr_get_sec_state>:
{
   149d4:	b538      	push	{r3, r4, r5, lr}
   149d6:	4605      	mov	r5, r0
   149d8:	460c      	mov	r4, r1
    ble_hs_lock();
   149da:	f7fb f863 	bl	faa4 <ble_hs_lock>
    conn = ble_hs_conn_find_assert(conn_handle);
   149de:	4628      	mov	r0, r5
   149e0:	f7fb fe82 	bl	106e8 <ble_hs_conn_find_assert>
    *out_sec_state = conn->bhc_sec_state;
   149e4:	6d83      	ldr	r3, [r0, #88]	; 0x58
   149e6:	6023      	str	r3, [r4, #0]
    ble_hs_unlock();
   149e8:	f7fb f860 	bl	faac <ble_hs_unlock>
}
   149ec:	bd38      	pop	{r3, r4, r5, pc}

000149ee <ble_att_svr_check_perms>:
{
   149ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   149f2:	b0a6      	sub	sp, #152	; 0x98
    if (is_read) {
   149f4:	b371      	cbz	r1, 14a54 <ble_att_svr_check_perms+0x66>
        if (!(entry->ha_flags & BLE_ATT_F_READ)) {
   149f6:	7a11      	ldrb	r1, [r2, #8]
   149f8:	f011 0f01 	tst.w	r1, #1
   149fc:	d026      	beq.n	14a4c <ble_att_svr_check_perms+0x5e>
        enc = entry->ha_flags & BLE_ATT_F_READ_ENC;
   149fe:	f001 0504 	and.w	r5, r1, #4
        authen = entry->ha_flags & BLE_ATT_F_READ_AUTHEN;
   14a02:	f001 0608 	and.w	r6, r1, #8
        author = entry->ha_flags & BLE_ATT_F_READ_AUTHOR;
   14a06:	f001 0110 	and.w	r1, r1, #16
    if (!enc && !authen && !author) {
   14a0a:	b90d      	cbnz	r5, 14a10 <ble_att_svr_check_perms+0x22>
   14a0c:	b906      	cbnz	r6, 14a10 <ble_att_svr_check_perms+0x22>
   14a0e:	b1c9      	cbz	r1, 14a44 <ble_att_svr_check_perms+0x56>
   14a10:	4698      	mov	r8, r3
   14a12:	4614      	mov	r4, r2
   14a14:	4607      	mov	r7, r0
    ble_att_svr_get_sec_state(conn_handle, &sec_state);
   14a16:	a925      	add	r1, sp, #148	; 0x94
   14a18:	f7ff ffdc 	bl	149d4 <ble_att_svr_get_sec_state>
    if ((enc || authen) && !sec_state.encrypted) {
   14a1c:	b905      	cbnz	r5, 14a20 <ble_att_svr_check_perms+0x32>
   14a1e:	b126      	cbz	r6, 14a2a <ble_att_svr_check_perms+0x3c>
   14a20:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   14a24:	f013 0f01 	tst.w	r3, #1
   14a28:	d023      	beq.n	14a72 <ble_att_svr_check_perms+0x84>
    if (authen && !sec_state.authenticated) {
   14a2a:	b126      	cbz	r6, 14a36 <ble_att_svr_check_perms+0x48>
   14a2c:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
   14a30:	f013 0f02 	tst.w	r3, #2
   14a34:	d058      	beq.n	14ae8 <ble_att_svr_check_perms+0xfa>
    if (entry->ha_min_key_size > sec_state.key_size) {
   14a36:	7a63      	ldrb	r3, [r4, #9]
   14a38:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
   14a3c:	ebb3 0fd2 	cmp.w	r3, r2, lsr #3
   14a40:	d858      	bhi.n	14af4 <ble_att_svr_check_perms+0x106>
    return 0;
   14a42:	2100      	movs	r1, #0
}
   14a44:	4608      	mov	r0, r1
   14a46:	b026      	add	sp, #152	; 0x98
   14a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *out_att_err = BLE_ATT_ERR_READ_NOT_PERMITTED;
   14a4c:	2202      	movs	r2, #2
   14a4e:	701a      	strb	r2, [r3, #0]
            return BLE_HS_EREJECT;
   14a50:	2110      	movs	r1, #16
   14a52:	e7f7      	b.n	14a44 <ble_att_svr_check_perms+0x56>
        if (!(entry->ha_flags & BLE_ATT_F_WRITE)) {
   14a54:	7a11      	ldrb	r1, [r2, #8]
   14a56:	f011 0f02 	tst.w	r1, #2
   14a5a:	d006      	beq.n	14a6a <ble_att_svr_check_perms+0x7c>
        enc = entry->ha_flags & BLE_ATT_F_WRITE_ENC;
   14a5c:	f001 0520 	and.w	r5, r1, #32
        authen = entry->ha_flags & BLE_ATT_F_WRITE_AUTHEN;
   14a60:	f001 0640 	and.w	r6, r1, #64	; 0x40
        author = entry->ha_flags & BLE_ATT_F_WRITE_AUTHOR;
   14a64:	f001 0180 	and.w	r1, r1, #128	; 0x80
   14a68:	e7cf      	b.n	14a0a <ble_att_svr_check_perms+0x1c>
            *out_att_err = BLE_ATT_ERR_WRITE_NOT_PERMITTED;
   14a6a:	2203      	movs	r2, #3
   14a6c:	701a      	strb	r2, [r3, #0]
            return BLE_HS_EREJECT;
   14a6e:	2110      	movs	r1, #16
   14a70:	e7e8      	b.n	14a44 <ble_att_svr_check_perms+0x56>
        ble_hs_lock();
   14a72:	f7fb f817 	bl	faa4 <ble_hs_lock>
        conn = ble_hs_conn_find(conn_handle);
   14a76:	4638      	mov	r0, r7
   14a78:	f7fb fe1e 	bl	106b8 <ble_hs_conn_find>
        if (conn != NULL) {
   14a7c:	b1d8      	cbz	r0, 14ab6 <ble_att_svr_check_perms+0xc8>
            ble_hs_conn_addrs(conn, &addrs);
   14a7e:	a901      	add	r1, sp, #4
   14a80:	f7fb fe52 	bl	10728 <ble_hs_conn_addrs>
            memset(&key_sec, 0, sizeof key_sec);
   14a84:	2300      	movs	r3, #0
   14a86:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
   14a8a:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
   14a8e:	f8cd 302e 	str.w	r3, [sp, #46]	; 0x2e
   14a92:	f8cd 3032 	str.w	r3, [sp, #50]	; 0x32
   14a96:	f8cd 3036 	str.w	r3, [sp, #54]	; 0x36
   14a9a:	f8cd 303a 	str.w	r3, [sp, #58]	; 0x3a
   14a9e:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
            key_sec.peer_addr = addrs.peer_id_addr;
   14aa2:	ab26      	add	r3, sp, #152	; 0x98
   14aa4:	f853 0d8d 	ldr.w	r0, [r3, #-141]!
   14aa8:	9008      	str	r0, [sp, #32]
   14aaa:	889a      	ldrh	r2, [r3, #4]
   14aac:	799b      	ldrb	r3, [r3, #6]
   14aae:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
   14ab2:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
        ble_hs_unlock();
   14ab6:	f7fa fff9 	bl	faac <ble_hs_unlock>
        rc = ble_store_read_peer_sec(&key_sec, &value_sec);
   14aba:	a910      	add	r1, sp, #64	; 0x40
   14abc:	a808      	add	r0, sp, #32
   14abe:	f7ff fb10 	bl	140e2 <ble_store_read_peer_sec>
        if (rc == 0 && value_sec.ltk_present) {
   14ac2:	b940      	cbnz	r0, 14ad6 <ble_att_svr_check_perms+0xe8>
   14ac4:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
   14ac8:	f013 0f01 	tst.w	r3, #1
   14acc:	d003      	beq.n	14ad6 <ble_att_svr_check_perms+0xe8>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_ENC;
   14ace:	230f      	movs	r3, #15
   14ad0:	f888 3000 	strb.w	r3, [r8]
   14ad4:	e002      	b.n	14adc <ble_att_svr_check_perms+0xee>
            *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   14ad6:	2305      	movs	r3, #5
   14ad8:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   14adc:	f898 1000 	ldrb.w	r1, [r8]
   14ae0:	b171      	cbz	r1, 14b00 <ble_att_svr_check_perms+0x112>
   14ae2:	f501 7180 	add.w	r1, r1, #256	; 0x100
   14ae6:	e7ad      	b.n	14a44 <ble_att_svr_check_perms+0x56>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_AUTHEN;
   14ae8:	2305      	movs	r3, #5
   14aea:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   14aee:	f240 1105 	movw	r1, #261	; 0x105
   14af2:	e7a7      	b.n	14a44 <ble_att_svr_check_perms+0x56>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_KEY_SZ;
   14af4:	230c      	movs	r3, #12
   14af6:	f888 3000 	strb.w	r3, [r8]
        return BLE_HS_ATT_ERR(*out_att_err);
   14afa:	f44f 7186 	mov.w	r1, #268	; 0x10c
   14afe:	e7a1      	b.n	14a44 <ble_att_svr_check_perms+0x56>
        return BLE_HS_ATT_ERR(*out_att_err);
   14b00:	2100      	movs	r1, #0
   14b02:	e79f      	b.n	14a44 <ble_att_svr_check_perms+0x56>

00014b04 <ble_att_svr_read>:
{
   14b04:	b5f0      	push	{r4, r5, r6, r7, lr}
   14b06:	b087      	sub	sp, #28
   14b08:	4605      	mov	r5, r0
   14b0a:	460c      	mov	r4, r1
   14b0c:	4616      	mov	r6, r2
   14b0e:	9303      	str	r3, [sp, #12]
    att_err = 0;    /* Silence gcc warning. */
   14b10:	2300      	movs	r3, #0
   14b12:	f88d 3017 	strb.w	r3, [sp, #23]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   14b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14b1a:	4298      	cmp	r0, r3
   14b1c:	d117      	bne.n	14b4e <ble_att_svr_read+0x4a>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   14b1e:	68e7      	ldr	r7, [r4, #12]
   14b20:	8961      	ldrh	r1, [r4, #10]
   14b22:	6923      	ldr	r3, [r4, #16]
   14b24:	9301      	str	r3, [sp, #4]
   14b26:	ab03      	add	r3, sp, #12
   14b28:	9300      	str	r3, [sp, #0]
   14b2a:	4633      	mov	r3, r6
   14b2c:	2201      	movs	r2, #1
   14b2e:	4628      	mov	r0, r5
   14b30:	47b8      	blx	r7
    if (rc != 0) {
   14b32:	4603      	mov	r3, r0
   14b34:	b140      	cbz	r0, 14b48 <ble_att_svr_read+0x44>
        att_err = rc;
   14b36:	f88d 0017 	strb.w	r0, [sp, #23]
        rc = BLE_HS_EAPP;
   14b3a:	2309      	movs	r3, #9
    if (out_att_err != NULL) {
   14b3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14b3e:	b11a      	cbz	r2, 14b48 <ble_att_svr_read+0x44>
        *out_att_err = att_err;
   14b40:	f89d 2017 	ldrb.w	r2, [sp, #23]
   14b44:	990c      	ldr	r1, [sp, #48]	; 0x30
   14b46:	700a      	strb	r2, [r1, #0]
}
   14b48:	4618      	mov	r0, r3
   14b4a:	b007      	add	sp, #28
   14b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = ble_att_svr_check_perms(conn_handle, 1, entry, &att_err);
   14b4e:	f10d 0317 	add.w	r3, sp, #23
   14b52:	460a      	mov	r2, r1
   14b54:	2101      	movs	r1, #1
   14b56:	f7ff ff4a 	bl	149ee <ble_att_svr_check_perms>
        if (rc != 0) {
   14b5a:	4603      	mov	r3, r0
   14b5c:	2800      	cmp	r0, #0
   14b5e:	d1ed      	bne.n	14b3c <ble_att_svr_read+0x38>
   14b60:	e7dd      	b.n	14b1e <ble_att_svr_read+0x1a>

00014b62 <ble_att_svr_write>:
{
   14b62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14b66:	b085      	sub	sp, #20
   14b68:	4605      	mov	r5, r0
   14b6a:	460c      	mov	r4, r1
   14b6c:	4691      	mov	r9, r2
   14b6e:	4698      	mov	r8, r3
   14b70:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    uint8_t att_err = 0;
   14b72:	2300      	movs	r3, #0
   14b74:	f88d 300f 	strb.w	r3, [sp, #15]
    if (conn_handle != BLE_HS_CONN_HANDLE_NONE) {
   14b78:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14b7c:	4298      	cmp	r0, r3
   14b7e:	d113      	bne.n	14ba8 <ble_att_svr_write+0x46>
    rc = entry->ha_cb(conn_handle, entry->ha_handle_id,
   14b80:	68e7      	ldr	r7, [r4, #12]
   14b82:	8961      	ldrh	r1, [r4, #10]
   14b84:	6923      	ldr	r3, [r4, #16]
   14b86:	9301      	str	r3, [sp, #4]
   14b88:	f8cd 8000 	str.w	r8, [sp]
   14b8c:	464b      	mov	r3, r9
   14b8e:	2202      	movs	r2, #2
   14b90:	4628      	mov	r0, r5
   14b92:	47b8      	blx	r7
    if (rc != 0) {
   14b94:	4603      	mov	r3, r0
   14b96:	b988      	cbnz	r0, 14bbc <ble_att_svr_write+0x5a>
    if (out_att_err != NULL) {
   14b98:	b116      	cbz	r6, 14ba0 <ble_att_svr_write+0x3e>
        *out_att_err = att_err;
   14b9a:	f89d 200f 	ldrb.w	r2, [sp, #15]
   14b9e:	7032      	strb	r2, [r6, #0]
}
   14ba0:	4618      	mov	r0, r3
   14ba2:	b005      	add	sp, #20
   14ba4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = ble_att_svr_check_perms(conn_handle, 0, entry, &att_err);
   14ba8:	f10d 030f 	add.w	r3, sp, #15
   14bac:	460a      	mov	r2, r1
   14bae:	2100      	movs	r1, #0
   14bb0:	f7ff ff1d 	bl	149ee <ble_att_svr_check_perms>
        if (rc != 0) {
   14bb4:	4603      	mov	r3, r0
   14bb6:	2800      	cmp	r0, #0
   14bb8:	d1ee      	bne.n	14b98 <ble_att_svr_write+0x36>
   14bba:	e7e1      	b.n	14b80 <ble_att_svr_write+0x1e>
        att_err = rc;
   14bbc:	f88d 000f 	strb.w	r0, [sp, #15]
        rc = BLE_HS_EAPP;
   14bc0:	2309      	movs	r3, #9
        goto done;
   14bc2:	e7e9      	b.n	14b98 <ble_att_svr_write+0x36>

00014bc4 <ble_att_svr_pullup_req_base>:
{
   14bc4:	b510      	push	{r4, lr}
   14bc6:	4614      	mov	r4, r2
    rc = ble_hs_mbuf_pullup_base(om, base_len);
   14bc8:	f7fc fcf3 	bl	115b2 <ble_hs_mbuf_pullup_base>
    if (rc == BLE_HS_ENOMEM) {
   14bcc:	2806      	cmp	r0, #6
   14bce:	d003      	beq.n	14bd8 <ble_att_svr_pullup_req_base+0x14>
        att_err = 0;
   14bd0:	2300      	movs	r3, #0
    if (out_att_err != NULL) {
   14bd2:	b104      	cbz	r4, 14bd6 <ble_att_svr_pullup_req_base+0x12>
        *out_att_err = att_err;
   14bd4:	7023      	strb	r3, [r4, #0]
}
   14bd6:	bd10      	pop	{r4, pc}
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   14bd8:	2311      	movs	r3, #17
   14bda:	e7fa      	b.n	14bd2 <ble_att_svr_pullup_req_base+0xe>

00014bdc <ble_att_svr_build_mtu_rsp>:
{
   14bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14be0:	b083      	sub	sp, #12
   14be2:	4605      	mov	r5, r0
   14be4:	4688      	mov	r8, r1
   14be6:	4617      	mov	r7, r2
   14be8:	461e      	mov	r6, r3
    *att_err = 0; /* Silence unnecessary warning. */
   14bea:	2400      	movs	r4, #0
   14bec:	701c      	strb	r4, [r3, #0]
    ble_hs_lock();
   14bee:	f7fa ff59 	bl	faa4 <ble_hs_lock>
    rc = ble_att_conn_chan_find(conn_handle, NULL, &chan);
   14bf2:	aa01      	add	r2, sp, #4
   14bf4:	4621      	mov	r1, r4
   14bf6:	4628      	mov	r0, r5
   14bf8:	f7ff fd3d 	bl	14676 <ble_att_conn_chan_find>
    if (rc == 0) {
   14bfc:	4605      	mov	r5, r0
   14bfe:	b910      	cbnz	r0, 14c06 <ble_att_svr_build_mtu_rsp+0x2a>
        mtu = chan->my_mtu;
   14c00:	9b01      	ldr	r3, [sp, #4]
   14c02:	f8b3 900a 	ldrh.w	r9, [r3, #10]
    ble_hs_unlock();
   14c06:	f7fa ff51 	bl	faac <ble_hs_unlock>
    if (rc != 0) {
   14c0a:	b12d      	cbz	r5, 14c18 <ble_att_svr_build_mtu_rsp+0x3c>
    txom = NULL;
   14c0c:	2400      	movs	r4, #0
    *out_txom = txom;
   14c0e:	603c      	str	r4, [r7, #0]
}
   14c10:	4628      	mov	r0, r5
   14c12:	b003      	add	sp, #12
   14c14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    txom = *rxom;
   14c18:	f8d8 4000 	ldr.w	r4, [r8]
    *rxom = NULL;
   14c1c:	2300      	movs	r3, #0
   14c1e:	f8c8 3000 	str.w	r3, [r8]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   14c22:	8a21      	ldrh	r1, [r4, #16]
   14c24:	4620      	mov	r0, r4
   14c26:	f7f5 fc0a 	bl	a43e <os_mbuf_adj>
    cmd = ble_att_cmd_prepare(BLE_ATT_OP_MTU_RSP, sizeof(*cmd), txom);
   14c2a:	4622      	mov	r2, r4
   14c2c:	2102      	movs	r1, #2
   14c2e:	2003      	movs	r0, #3
   14c30:	f7ff fe2d 	bl	1488e <ble_att_cmd_prepare>
    if (cmd == NULL) {
   14c34:	b110      	cbz	r0, 14c3c <ble_att_svr_build_mtu_rsp+0x60>
    cmd->bamc_mtu = htole16(mtu);
   14c36:	f8a0 9000 	strh.w	r9, [r0]
   14c3a:	e7e8      	b.n	14c0e <ble_att_svr_build_mtu_rsp+0x32>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   14c3c:	2311      	movs	r3, #17
   14c3e:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   14c40:	2506      	movs	r5, #6
        goto done;
   14c42:	e7e4      	b.n	14c0e <ble_att_svr_build_mtu_rsp+0x32>

00014c44 <ble_att_svr_pkt>:
{
   14c44:	b570      	push	{r4, r5, r6, lr}
   14c46:	4605      	mov	r5, r0
   14c48:	460c      	mov	r4, r1
   14c4a:	4616      	mov	r6, r2
    *out_txom = ble_hs_mbuf_l2cap_pkt();
   14c4c:	f7fc fc90 	bl	11570 <ble_hs_mbuf_l2cap_pkt>
   14c50:	6020      	str	r0, [r4, #0]
    if (*out_txom != NULL) {
   14c52:	b108      	cbz	r0, 14c58 <ble_att_svr_pkt+0x14>
        return 0;
   14c54:	2000      	movs	r0, #0
}
   14c56:	bd70      	pop	{r4, r5, r6, pc}
    *out_txom = *rxom;
   14c58:	682b      	ldr	r3, [r5, #0]
   14c5a:	6023      	str	r3, [r4, #0]
    *rxom = NULL;
   14c5c:	2300      	movs	r3, #0
   14c5e:	602b      	str	r3, [r5, #0]
    *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   14c60:	2311      	movs	r3, #17
   14c62:	7033      	strb	r3, [r6, #0]
    return BLE_HS_ENOMEM;
   14c64:	2006      	movs	r0, #6
   14c66:	e7f6      	b.n	14c56 <ble_att_svr_pkt+0x12>

00014c68 <ble_att_svr_build_write_rsp>:
{
   14c68:	b570      	push	{r4, r5, r6, lr}
   14c6a:	b082      	sub	sp, #8
   14c6c:	460d      	mov	r5, r1
   14c6e:	4616      	mov	r6, r2
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   14c70:	a901      	add	r1, sp, #4
   14c72:	f7ff ffe7 	bl	14c44 <ble_att_svr_pkt>
    if (rc != 0) {
   14c76:	4604      	mov	r4, r0
   14c78:	b120      	cbz	r0, 14c84 <ble_att_svr_build_write_rsp+0x1c>
    *out_txom = txom;
   14c7a:	9b01      	ldr	r3, [sp, #4]
   14c7c:	602b      	str	r3, [r5, #0]
}
   14c7e:	4620      	mov	r0, r4
   14c80:	b002      	add	sp, #8
   14c82:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_WRITE_RSP, 0, txom) == NULL) {
   14c84:	9a01      	ldr	r2, [sp, #4]
   14c86:	2100      	movs	r1, #0
   14c88:	2013      	movs	r0, #19
   14c8a:	f7ff fe00 	bl	1488e <ble_att_cmd_prepare>
   14c8e:	2800      	cmp	r0, #0
   14c90:	d1f3      	bne.n	14c7a <ble_att_svr_build_write_rsp+0x12>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   14c92:	2311      	movs	r3, #17
   14c94:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   14c96:	2406      	movs	r4, #6
        goto done;
   14c98:	e7ef      	b.n	14c7a <ble_att_svr_build_write_rsp+0x12>

00014c9a <ble_att_svr_build_indicate_rsp>:
 * @return                      0 on success; nonzero on failure.
 */
static int
ble_att_svr_build_indicate_rsp(struct os_mbuf **rxom,
                               struct os_mbuf **out_txom, uint8_t *out_att_err)
{
   14c9a:	b570      	push	{r4, r5, r6, lr}
   14c9c:	b082      	sub	sp, #8
   14c9e:	460d      	mov	r5, r1
   14ca0:	4616      	mov	r6, r2

    /* Allocate a new buffer for the response.  An indicate response never
     * reuses the request buffer.  See the note at the top of this file for
     * details.
     */
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   14ca2:	a901      	add	r1, sp, #4
   14ca4:	f7ff ffce 	bl	14c44 <ble_att_svr_pkt>
    if (rc != 0) {
   14ca8:	4604      	mov	r4, r0
   14caa:	b120      	cbz	r0, 14cb6 <ble_att_svr_build_indicate_rsp+0x1c>
    }

    rc = 0;

done:
    *out_txom = txom;
   14cac:	9b01      	ldr	r3, [sp, #4]
   14cae:	602b      	str	r3, [r5, #0]
    return rc;
}
   14cb0:	4620      	mov	r0, r4
   14cb2:	b002      	add	sp, #8
   14cb4:	bd70      	pop	{r4, r5, r6, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_INDICATE_RSP, 0, txom) == NULL) {
   14cb6:	9a01      	ldr	r2, [sp, #4]
   14cb8:	2100      	movs	r1, #0
   14cba:	201e      	movs	r0, #30
   14cbc:	f7ff fde7 	bl	1488e <ble_att_cmd_prepare>
   14cc0:	2800      	cmp	r0, #0
   14cc2:	d1f3      	bne.n	14cac <ble_att_svr_build_indicate_rsp+0x12>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   14cc4:	2311      	movs	r3, #17
   14cc6:	7033      	strb	r3, [r6, #0]
        rc = BLE_HS_ENOMEM;
   14cc8:	2406      	movs	r4, #6
        goto done;
   14cca:	e7ef      	b.n	14cac <ble_att_svr_build_indicate_rsp+0x12>

00014ccc <ble_att_svr_fill_info>:
{
   14ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cd0:	4607      	mov	r7, r0
   14cd2:	460e      	mov	r6, r1
   14cd4:	4690      	mov	r8, r2
   14cd6:	469a      	mov	sl, r3
   14cd8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    *format = 0;
   14cdc:	2500      	movs	r5, #0
   14cde:	f889 5000 	strb.w	r5, [r9]
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   14ce2:	4b25      	ldr	r3, [pc, #148]	; (14d78 <ble_att_svr_fill_info+0xac>)
   14ce4:	681c      	ldr	r4, [r3, #0]
   14ce6:	e022      	b.n	14d2e <ble_att_svr_fill_info+0x62>
                if (*format == 0) {
   14ce8:	f899 3000 	ldrb.w	r3, [r9]
   14cec:	b923      	cbnz	r3, 14cf8 <ble_att_svr_fill_info+0x2c>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT;
   14cee:	2301      	movs	r3, #1
   14cf0:	f889 3000 	strb.w	r3, [r9]
                entry_sz = 4;
   14cf4:	2104      	movs	r1, #4
   14cf6:	e006      	b.n	14d06 <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_16BIT) {
   14cf8:	2b01      	cmp	r3, #1
   14cfa:	d132      	bne.n	14d62 <ble_att_svr_fill_info+0x96>
                entry_sz = 4;
   14cfc:	2104      	movs	r1, #4
   14cfe:	e002      	b.n	14d06 <ble_att_svr_fill_info+0x3a>
                } else if (*format != BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT) {
   14d00:	2b02      	cmp	r3, #2
   14d02:	d130      	bne.n	14d66 <ble_att_svr_fill_info+0x9a>
                entry_sz = 18;
   14d04:	2112      	movs	r1, #18
            if (OS_MBUF_PKTLEN(om) + entry_sz > mtu) {
   14d06:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   14d0a:	440b      	add	r3, r1
   14d0c:	4553      	cmp	r3, sl
   14d0e:	dc2c      	bgt.n	14d6a <ble_att_svr_fill_info+0x9e>
            buf = os_mbuf_extend(om, entry_sz);
   14d10:	4640      	mov	r0, r8
   14d12:	f7f5 fced 	bl	a6f0 <os_mbuf_extend>
            if (buf == NULL) {
   14d16:	4683      	mov	fp, r0
   14d18:	b348      	cbz	r0, 14d6e <ble_att_svr_fill_info+0xa2>
            put_le16(buf + 0, ha->ha_handle_id);
   14d1a:	8961      	ldrh	r1, [r4, #10]
   14d1c:	f006 ff60 	bl	1bbe0 <put_le16>
            ble_uuid_flat(ha->ha_uuid, buf + 2);
   14d20:	f10b 0102 	add.w	r1, fp, #2
   14d24:	6860      	ldr	r0, [r4, #4]
   14d26:	f7ff fbf9 	bl	1451c <ble_uuid_flat>
            num_entries++;
   14d2a:	3501      	adds	r5, #1
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   14d2c:	6824      	ldr	r4, [r4, #0]
   14d2e:	b18c      	cbz	r4, 14d54 <ble_att_svr_fill_info+0x88>
        if (ha->ha_handle_id > end_handle) {
   14d30:	8963      	ldrh	r3, [r4, #10]
   14d32:	42b3      	cmp	r3, r6
   14d34:	d813      	bhi.n	14d5e <ble_att_svr_fill_info+0x92>
        if (ha->ha_handle_id >= start_handle) {
   14d36:	42bb      	cmp	r3, r7
   14d38:	d3f8      	bcc.n	14d2c <ble_att_svr_fill_info+0x60>
            if (ha->ha_uuid->type == BLE_UUID_TYPE_16) {
   14d3a:	6863      	ldr	r3, [r4, #4]
   14d3c:	781b      	ldrb	r3, [r3, #0]
   14d3e:	2b10      	cmp	r3, #16
   14d40:	d0d2      	beq.n	14ce8 <ble_att_svr_fill_info+0x1c>
                if (*format == 0) {
   14d42:	f899 3000 	ldrb.w	r3, [r9]
   14d46:	2b00      	cmp	r3, #0
   14d48:	d1da      	bne.n	14d00 <ble_att_svr_fill_info+0x34>
                    *format = BLE_ATT_FIND_INFO_RSP_FORMAT_128BIT;
   14d4a:	2302      	movs	r3, #2
   14d4c:	f889 3000 	strb.w	r3, [r9]
                entry_sz = 18;
   14d50:	2112      	movs	r1, #18
   14d52:	e7d8      	b.n	14d06 <ble_att_svr_fill_info+0x3a>
    rc = 0;
   14d54:	2000      	movs	r0, #0
    if (rc == 0 && num_entries == 0) {
   14d56:	b900      	cbnz	r0, 14d5a <ble_att_svr_fill_info+0x8e>
   14d58:	b15d      	cbz	r5, 14d72 <ble_att_svr_fill_info+0xa6>
}
   14d5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            rc = 0;
   14d5e:	2000      	movs	r0, #0
   14d60:	e7f9      	b.n	14d56 <ble_att_svr_fill_info+0x8a>
                    rc = 0;
   14d62:	2000      	movs	r0, #0
   14d64:	e7f7      	b.n	14d56 <ble_att_svr_fill_info+0x8a>
                    rc = 0;
   14d66:	2000      	movs	r0, #0
   14d68:	e7f5      	b.n	14d56 <ble_att_svr_fill_info+0x8a>
                rc = 0;
   14d6a:	2000      	movs	r0, #0
   14d6c:	e7f3      	b.n	14d56 <ble_att_svr_fill_info+0x8a>
                rc = BLE_HS_ENOMEM;
   14d6e:	2006      	movs	r0, #6
   14d70:	e7f1      	b.n	14d56 <ble_att_svr_fill_info+0x8a>
        return BLE_HS_ENOENT;
   14d72:	2005      	movs	r0, #5
   14d74:	e7f1      	b.n	14d5a <ble_att_svr_fill_info+0x8e>
   14d76:	bf00      	nop
   14d78:	200077d4 	.word	0x200077d4

00014d7c <ble_att_svr_build_find_info_rsp>:
{
   14d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d80:	b082      	sub	sp, #8
   14d82:	4680      	mov	r8, r0
   14d84:	460d      	mov	r5, r1
   14d86:	4616      	mov	r6, r2
    txom = *rxom;
   14d88:	681c      	ldr	r4, [r3, #0]
    *rxom = NULL;
   14d8a:	2200      	movs	r2, #0
   14d8c:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   14d8e:	8a21      	ldrh	r1, [r4, #16]
   14d90:	4620      	mov	r0, r4
   14d92:	f7f5 fb54 	bl	a43e <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_FIND_INFO_RSP, sizeof(*rsp), txom);
   14d96:	4622      	mov	r2, r4
   14d98:	2101      	movs	r1, #1
   14d9a:	2005      	movs	r0, #5
   14d9c:	f7ff fd77 	bl	1488e <ble_att_cmd_prepare>
    if (rsp == NULL) {
   14da0:	b190      	cbz	r0, 14dc8 <ble_att_svr_build_find_info_rsp+0x4c>
   14da2:	4607      	mov	r7, r0
    mtu = ble_att_mtu(conn_handle);
   14da4:	4640      	mov	r0, r8
   14da6:	f7ff fc90 	bl	146ca <ble_att_mtu>
    rc = ble_att_svr_fill_info(start_handle, end_handle, txom, mtu,
   14daa:	9700      	str	r7, [sp, #0]
   14dac:	4603      	mov	r3, r0
   14dae:	4622      	mov	r2, r4
   14db0:	4631      	mov	r1, r6
   14db2:	4628      	mov	r0, r5
   14db4:	f7ff ff8a 	bl	14ccc <ble_att_svr_fill_info>
    if (rc != 0) {
   14db8:	4603      	mov	r3, r0
   14dba:	b950      	cbnz	r0, 14dd2 <ble_att_svr_build_find_info_rsp+0x56>
    *out_txom = txom;
   14dbc:	9a08      	ldr	r2, [sp, #32]
   14dbe:	6014      	str	r4, [r2, #0]
}
   14dc0:	4618      	mov	r0, r3
   14dc2:	b002      	add	sp, #8
   14dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   14dc8:	2311      	movs	r3, #17
   14dca:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14dcc:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   14dce:	2306      	movs	r3, #6
        goto done;
   14dd0:	e7f4      	b.n	14dbc <ble_att_svr_build_find_info_rsp+0x40>
        *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   14dd2:	230a      	movs	r3, #10
   14dd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14dd6:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOENT;
   14dd8:	2305      	movs	r3, #5
        goto done;
   14dda:	e7ef      	b.n	14dbc <ble_att_svr_build_find_info_rsp+0x40>

00014ddc <ble_att_svr_read_group_type_entry_write>:
{
   14ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14dde:	9d06      	ldr	r5, [sp, #24]
    if (service_uuid->type == BLE_UUID_TYPE_16) {
   14de0:	782c      	ldrb	r4, [r5, #0]
   14de2:	2c10      	cmp	r4, #16
   14de4:	d018      	beq.n	14e18 <ble_att_svr_read_group_type_entry_write+0x3c>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   14de6:	2614      	movs	r6, #20
    if (OS_MBUF_PKTLEN(om) + len > mtu) {
   14de8:	8a04      	ldrh	r4, [r0, #16]
   14dea:	4434      	add	r4, r6
   14dec:	428c      	cmp	r4, r1
   14dee:	dc15      	bgt.n	14e1c <ble_att_svr_read_group_type_entry_write+0x40>
   14df0:	461c      	mov	r4, r3
   14df2:	4617      	mov	r7, r2
    buf = os_mbuf_extend(om, len);
   14df4:	4631      	mov	r1, r6
   14df6:	f7f5 fc7b 	bl	a6f0 <os_mbuf_extend>
    if (buf == NULL) {
   14dfa:	4606      	mov	r6, r0
   14dfc:	b180      	cbz	r0, 14e20 <ble_att_svr_read_group_type_entry_write+0x44>
    put_le16(buf + 0, start_group_handle);
   14dfe:	4639      	mov	r1, r7
   14e00:	f006 feee 	bl	1bbe0 <put_le16>
    put_le16(buf + 2, end_group_handle);
   14e04:	4621      	mov	r1, r4
   14e06:	1cb0      	adds	r0, r6, #2
   14e08:	f006 feea 	bl	1bbe0 <put_le16>
    ble_uuid_flat(service_uuid, buf + 4);
   14e0c:	1d31      	adds	r1, r6, #4
   14e0e:	4628      	mov	r0, r5
   14e10:	f7ff fb84 	bl	1451c <ble_uuid_flat>
    return 0;
   14e14:	2000      	movs	r0, #0
   14e16:	e002      	b.n	14e1e <ble_att_svr_read_group_type_entry_write+0x42>
        len = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   14e18:	2606      	movs	r6, #6
   14e1a:	e7e5      	b.n	14de8 <ble_att_svr_read_group_type_entry_write+0xc>
        return BLE_HS_EMSGSIZE;
   14e1c:	2004      	movs	r0, #4
}
   14e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   14e20:	2006      	movs	r0, #6
   14e22:	e7fc      	b.n	14e1e <ble_att_svr_read_group_type_entry_write+0x42>

00014e24 <ble_att_svr_is_valid_find_group_type>:
{
   14e24:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   14e26:	f7ff fb3d 	bl	144a4 <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   14e2a:	f5a0 5320 	sub.w	r3, r0, #10240	; 0x2800
   14e2e:	b29b      	uxth	r3, r3
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   14e30:	2b01      	cmp	r3, #1
   14e32:	d907      	bls.n	14e44 <ble_att_svr_is_valid_find_group_type+0x20>
   14e34:	f642 0303 	movw	r3, #10243	; 0x2803
   14e38:	4298      	cmp	r0, r3
   14e3a:	d001      	beq.n	14e40 <ble_att_svr_is_valid_find_group_type+0x1c>
   14e3c:	2000      	movs	r0, #0
}
   14e3e:	bd08      	pop	{r3, pc}
           uuid16 == BLE_ATT_UUID_SECONDARY_SERVICE ||
   14e40:	2001      	movs	r0, #1
   14e42:	e7fc      	b.n	14e3e <ble_att_svr_is_valid_find_group_type+0x1a>
   14e44:	2001      	movs	r0, #1
   14e46:	e7fa      	b.n	14e3e <ble_att_svr_is_valid_find_group_type+0x1a>

00014e48 <ble_att_svr_is_valid_group_end>:
    if (uuid_group->type != BLE_UUID_TYPE_16) {
   14e48:	7803      	ldrb	r3, [r0, #0]
   14e4a:	2b10      	cmp	r3, #16
   14e4c:	d001      	beq.n	14e52 <ble_att_svr_is_valid_group_end+0xa>
        return 1;
   14e4e:	2001      	movs	r0, #1
   14e50:	4770      	bx	lr
    if (uuid->type != BLE_UUID_TYPE_16) {
   14e52:	780b      	ldrb	r3, [r1, #0]
   14e54:	2b10      	cmp	r3, #16
   14e56:	d001      	beq.n	14e5c <ble_att_svr_is_valid_group_end+0x14>
        return 0;
   14e58:	2000      	movs	r0, #0
}
   14e5a:	4770      	bx	lr
{
   14e5c:	b510      	push	{r4, lr}
   14e5e:	460c      	mov	r4, r1
    switch (ble_uuid_u16(uuid_group)) {
   14e60:	f7ff fb20 	bl	144a4 <ble_uuid_u16>
   14e64:	f5b0 5f20 	cmp.w	r0, #10240	; 0x2800
   14e68:	d316      	bcc.n	14e98 <ble_att_svr_is_valid_group_end+0x50>
   14e6a:	f642 0301 	movw	r3, #10241	; 0x2801
   14e6e:	4298      	cmp	r0, r3
   14e70:	d907      	bls.n	14e82 <ble_att_svr_is_valid_group_end+0x3a>
   14e72:	f642 0303 	movw	r3, #10243	; 0x2803
   14e76:	4298      	cmp	r0, r3
   14e78:	d10e      	bne.n	14e98 <ble_att_svr_is_valid_group_end+0x50>
        return ble_att_svr_is_valid_find_group_type(uuid);
   14e7a:	4620      	mov	r0, r4
   14e7c:	f7ff ffd2 	bl	14e24 <ble_att_svr_is_valid_find_group_type>
   14e80:	e009      	b.n	14e96 <ble_att_svr_is_valid_group_end+0x4e>
        uuid16 = ble_uuid_u16(uuid);
   14e82:	4620      	mov	r0, r4
   14e84:	f7ff fb0e 	bl	144a4 <ble_uuid_u16>
        return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   14e88:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   14e8c:	b280      	uxth	r0, r0
   14e8e:	2801      	cmp	r0, #1
   14e90:	bf8c      	ite	hi
   14e92:	2000      	movhi	r0, #0
   14e94:	2001      	movls	r0, #1
}
   14e96:	bd10      	pop	{r4, pc}
        return 1;
   14e98:	2001      	movs	r0, #1
   14e9a:	e7fc      	b.n	14e96 <ble_att_svr_is_valid_group_end+0x4e>

00014e9c <ble_att_svr_is_valid_read_group_type>:
{
   14e9c:	b508      	push	{r3, lr}
    uuid16 = ble_uuid_u16(uuid);
   14e9e:	f7ff fb01 	bl	144a4 <ble_uuid_u16>
    return uuid16 == BLE_ATT_UUID_PRIMARY_SERVICE ||
   14ea2:	f5a0 5020 	sub.w	r0, r0, #10240	; 0x2800
   14ea6:	b280      	uxth	r0, r0
}
   14ea8:	2801      	cmp	r0, #1
   14eaa:	bf8c      	ite	hi
   14eac:	2000      	movhi	r0, #0
   14eae:	2001      	movls	r0, #1
   14eb0:	bd08      	pop	{r3, pc}

00014eb2 <ble_att_svr_read_flat>:
{
   14eb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14eb6:	b082      	sub	sp, #8
   14eb8:	4605      	mov	r5, r0
   14eba:	460e      	mov	r6, r1
   14ebc:	4617      	mov	r7, r2
   14ebe:	4698      	mov	r8, r3
    om = ble_hs_mbuf_l2cap_pkt();
   14ec0:	f7fc fb56 	bl	11570 <ble_hs_mbuf_l2cap_pkt>
    if (om == NULL) {
   14ec4:	4604      	mov	r4, r0
   14ec6:	b1d0      	cbz	r0, 14efe <ble_att_svr_read_flat+0x4c>
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   14ec8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14eca:	9300      	str	r3, [sp, #0]
   14ecc:	4603      	mov	r3, r0
   14ece:	463a      	mov	r2, r7
   14ed0:	4631      	mov	r1, r6
   14ed2:	4628      	mov	r0, r5
   14ed4:	f7ff fe16 	bl	14b04 <ble_att_svr_read>
    if (rc != 0) {
   14ed8:	4605      	mov	r5, r0
   14eda:	b988      	cbnz	r0, 14f00 <ble_att_svr_read_flat+0x4e>
    len = OS_MBUF_PKTLEN(om);
   14edc:	8a26      	ldrh	r6, [r4, #16]
    if (len > max_len) {
   14ede:	4546      	cmp	r6, r8
   14ee0:	d808      	bhi.n	14ef4 <ble_att_svr_read_flat+0x42>
    rc = os_mbuf_copydata(om, 0, len, dst);
   14ee2:	9b08      	ldr	r3, [sp, #32]
   14ee4:	4632      	mov	r2, r6
   14ee6:	2100      	movs	r1, #0
   14ee8:	4620      	mov	r0, r4
   14eea:	f7f5 fa7b 	bl	a3e4 <os_mbuf_copydata>
    *out_len = len;
   14eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14ef0:	801e      	strh	r6, [r3, #0]
   14ef2:	e005      	b.n	14f00 <ble_att_svr_read_flat+0x4e>
        *out_att_err = BLE_ATT_ERR_UNLIKELY;
   14ef4:	230e      	movs	r3, #14
   14ef6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   14ef8:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_EMSGSIZE;
   14efa:	2504      	movs	r5, #4
        goto done;
   14efc:	e000      	b.n	14f00 <ble_att_svr_read_flat+0x4e>
        rc = BLE_HS_ENOMEM;
   14efe:	2506      	movs	r5, #6
    os_mbuf_free_chain(om);
   14f00:	4620      	mov	r0, r4
   14f02:	f7f5 f96d 	bl	a1e0 <os_mbuf_free_chain>
}
   14f06:	4628      	mov	r0, r5
   14f08:	b002      	add	sp, #8
   14f0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00014f0e <ble_att_svr_fill_type_value_entry>:
{
   14f0e:	b530      	push	{r4, r5, lr}
   14f10:	b083      	sub	sp, #12
    rsp_sz = OS_MBUF_PKTHDR(om)->omp_len + 4;
   14f12:	8a04      	ldrh	r4, [r0, #16]
   14f14:	3404      	adds	r4, #4
    if (rsp_sz > mtu) {
   14f16:	429c      	cmp	r4, r3
   14f18:	dd02      	ble.n	14f20 <ble_att_svr_fill_type_value_entry+0x12>
        return 0;
   14f1a:	2000      	movs	r0, #0
}
   14f1c:	b003      	add	sp, #12
   14f1e:	bd30      	pop	{r4, r5, pc}
   14f20:	4615      	mov	r5, r2
   14f22:	4604      	mov	r4, r0
    put_le16(&u16, first);
   14f24:	f10d 0006 	add.w	r0, sp, #6
   14f28:	f006 fe5a 	bl	1bbe0 <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   14f2c:	2202      	movs	r2, #2
   14f2e:	f10d 0106 	add.w	r1, sp, #6
   14f32:	4620      	mov	r0, r4
   14f34:	f7f5 f966 	bl	a204 <os_mbuf_append>
    if (rc != 0) {
   14f38:	b968      	cbnz	r0, 14f56 <ble_att_svr_fill_type_value_entry+0x48>
    put_le16(&u16, last);
   14f3a:	4629      	mov	r1, r5
   14f3c:	f10d 0006 	add.w	r0, sp, #6
   14f40:	f006 fe4e 	bl	1bbe0 <put_le16>
    rc = os_mbuf_append(om, &u16, 2);
   14f44:	2202      	movs	r2, #2
   14f46:	f10d 0106 	add.w	r1, sp, #6
   14f4a:	4620      	mov	r0, r4
   14f4c:	f7f5 f95a 	bl	a204 <os_mbuf_append>
    if (rc != 0) {
   14f50:	b930      	cbnz	r0, 14f60 <ble_att_svr_fill_type_value_entry+0x52>
    return BLE_HS_EAGAIN;
   14f52:	2001      	movs	r0, #1
   14f54:	e7e2      	b.n	14f1c <ble_att_svr_fill_type_value_entry+0xe>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   14f56:	2311      	movs	r3, #17
   14f58:	9a06      	ldr	r2, [sp, #24]
   14f5a:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   14f5c:	2006      	movs	r0, #6
   14f5e:	e7dd      	b.n	14f1c <ble_att_svr_fill_type_value_entry+0xe>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   14f60:	2311      	movs	r3, #17
   14f62:	9a06      	ldr	r2, [sp, #24]
   14f64:	7013      	strb	r3, [r2, #0]
        return BLE_HS_ENOMEM;
   14f66:	2006      	movs	r0, #6
   14f68:	e7d8      	b.n	14f1c <ble_att_svr_fill_type_value_entry+0xe>
	...

00014f6c <ble_att_svr_fill_type_value>:
{
   14f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f70:	b08d      	sub	sp, #52	; 0x34
   14f72:	4683      	mov	fp, r0
   14f74:	460e      	mov	r6, r1
   14f76:	4690      	mov	r8, r2
   14f78:	9305      	str	r3, [sp, #20]
   14f7a:	f8bd a060 	ldrh.w	sl, [sp, #96]	; 0x60
   14f7e:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   14f82:	4b33      	ldr	r3, [pc, #204]	; (15050 <ble_att_svr_fill_type_value+0xe4>)
   14f84:	681c      	ldr	r4, [r3, #0]
    prev = 0;
   14f86:	2700      	movs	r7, #0
    first = 0;
   14f88:	463d      	mov	r5, r7
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   14f8a:	e015      	b.n	14fb8 <ble_att_svr_fill_type_value+0x4c>
            rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   14f8c:	f8cd 9000 	str.w	r9, [sp]
   14f90:	4653      	mov	r3, sl
   14f92:	463a      	mov	r2, r7
   14f94:	4629      	mov	r1, r5
   14f96:	9817      	ldr	r0, [sp, #92]	; 0x5c
   14f98:	f7ff ffb9 	bl	14f0e <ble_att_svr_fill_type_value_entry>
   14f9c:	4603      	mov	r3, r0
            if (rc != BLE_HS_EAGAIN) {
   14f9e:	2801      	cmp	r0, #1
   14fa0:	d13a      	bne.n	15018 <ble_att_svr_fill_type_value+0xac>
            if (ha->ha_handle_id > end_handle) {
   14fa2:	8963      	ldrh	r3, [r4, #10]
   14fa4:	4543      	cmp	r3, r8
   14fa6:	d833      	bhi.n	15010 <ble_att_svr_fill_type_value+0xa4>
            prev = 0;
   14fa8:	2700      	movs	r7, #0
            first = 0;
   14faa:	463d      	mov	r5, r7
        if (ble_uuid_cmp(ha->ha_uuid, &attr_type.u) == 0) {
   14fac:	a905      	add	r1, sp, #20
   14fae:	6860      	ldr	r0, [r4, #4]
   14fb0:	f7ff fa04 	bl	143bc <ble_uuid_cmp>
   14fb4:	b188      	cbz	r0, 14fda <ble_att_svr_fill_type_value+0x6e>
    STAILQ_FOREACH(ha, &ble_att_svr_list, ha_next) {
   14fb6:	6824      	ldr	r4, [r4, #0]
   14fb8:	b364      	cbz	r4, 15014 <ble_att_svr_fill_type_value+0xa8>
        if (ha->ha_handle_id < start_handle) {
   14fba:	8963      	ldrh	r3, [r4, #10]
   14fbc:	42b3      	cmp	r3, r6
   14fbe:	d3fa      	bcc.n	14fb6 <ble_att_svr_fill_type_value+0x4a>
        if (!first && ha->ha_handle_id > end_handle) {
   14fc0:	b90d      	cbnz	r5, 14fc6 <ble_att_svr_fill_type_value+0x5a>
   14fc2:	4543      	cmp	r3, r8
   14fc4:	d826      	bhi.n	15014 <ble_att_svr_fill_type_value+0xa8>
        if (first) {
   14fc6:	2d00      	cmp	r5, #0
   14fc8:	d0f0      	beq.n	14fac <ble_att_svr_fill_type_value+0x40>
            if (!ble_att_svr_is_valid_group_end(&attr_type.u, ha->ha_uuid)) {
   14fca:	6861      	ldr	r1, [r4, #4]
   14fcc:	a805      	add	r0, sp, #20
   14fce:	f7ff ff3b 	bl	14e48 <ble_att_svr_is_valid_group_end>
   14fd2:	2800      	cmp	r0, #0
   14fd4:	d1da      	bne.n	14f8c <ble_att_svr_fill_type_value+0x20>
                prev = ha->ha_handle_id;
   14fd6:	8967      	ldrh	r7, [r4, #10]
                continue;
   14fd8:	e7ed      	b.n	14fb6 <ble_att_svr_fill_type_value+0x4a>
            rc = ble_att_svr_read_flat(conn_handle, ha, 0, sizeof buf, buf,
   14fda:	f8cd 9008 	str.w	r9, [sp, #8]
   14fde:	f10d 031e 	add.w	r3, sp, #30
   14fe2:	9301      	str	r3, [sp, #4]
   14fe4:	ab08      	add	r3, sp, #32
   14fe6:	9300      	str	r3, [sp, #0]
   14fe8:	2310      	movs	r3, #16
   14fea:	2200      	movs	r2, #0
   14fec:	4621      	mov	r1, r4
   14fee:	4658      	mov	r0, fp
   14ff0:	f7ff ff5f 	bl	14eb2 <ble_att_svr_read_flat>
            if (rc != 0) {
   14ff4:	4603      	mov	r3, r0
   14ff6:	b978      	cbnz	r0, 15018 <ble_att_svr_fill_type_value+0xac>
            rc = os_mbuf_cmpf(rxom, sizeof(struct ble_att_find_type_value_req),
   14ff8:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   14ffc:	aa08      	add	r2, sp, #32
   14ffe:	2106      	movs	r1, #6
   15000:	9816      	ldr	r0, [sp, #88]	; 0x58
   15002:	f7f5 fa6e 	bl	a4e2 <os_mbuf_cmpf>
            if (rc == 0) {
   15006:	2800      	cmp	r0, #0
   15008:	d1d5      	bne.n	14fb6 <ble_att_svr_fill_type_value+0x4a>
                first = ha->ha_handle_id;
   1500a:	8965      	ldrh	r5, [r4, #10]
                prev = ha->ha_handle_id;
   1500c:	462f      	mov	r7, r5
   1500e:	e7d2      	b.n	14fb6 <ble_att_svr_fill_type_value+0x4a>
            prev = 0;
   15010:	2700      	movs	r7, #0
            first = 0;
   15012:	463d      	mov	r5, r7
    if (first) {
   15014:	b94d      	cbnz	r5, 1502a <ble_att_svr_fill_type_value+0xbe>
        rc = 0;
   15016:	2300      	movs	r3, #0
    any_entries = OS_MBUF_PKTHDR(txom)->omp_len >
   15018:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1501a:	8a12      	ldrh	r2, [r2, #16]
    if (rc == 0 && !any_entries) {
   1501c:	b90b      	cbnz	r3, 15022 <ble_att_svr_fill_type_value+0xb6>
   1501e:	2a01      	cmp	r2, #1
   15020:	d910      	bls.n	15044 <ble_att_svr_fill_type_value+0xd8>
}
   15022:	4618      	mov	r0, r3
   15024:	b00d      	add	sp, #52	; 0x34
   15026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = ble_att_svr_fill_type_value_entry(txom, first, prev, mtu,
   1502a:	f8cd 9000 	str.w	r9, [sp]
   1502e:	4653      	mov	r3, sl
   15030:	463a      	mov	r2, r7
   15032:	4629      	mov	r1, r5
   15034:	9817      	ldr	r0, [sp, #92]	; 0x5c
   15036:	f7ff ff6a 	bl	14f0e <ble_att_svr_fill_type_value_entry>
   1503a:	4603      	mov	r3, r0
        if (rc == BLE_HS_EAGAIN) {
   1503c:	2801      	cmp	r0, #1
   1503e:	d1eb      	bne.n	15018 <ble_att_svr_fill_type_value+0xac>
            rc = 0;
   15040:	2300      	movs	r3, #0
   15042:	e7e9      	b.n	15018 <ble_att_svr_fill_type_value+0xac>
        *out_att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   15044:	230a      	movs	r3, #10
   15046:	f889 3000 	strb.w	r3, [r9]
        return BLE_HS_ENOENT;
   1504a:	2305      	movs	r3, #5
   1504c:	e7e9      	b.n	15022 <ble_att_svr_fill_type_value+0xb6>
   1504e:	bf00      	nop
   15050:	200077d4 	.word	0x200077d4

00015054 <ble_att_svr_build_find_type_value_rsp>:
{
   15054:	b570      	push	{r4, r5, r6, lr}
   15056:	b088      	sub	sp, #32
   15058:	4604      	mov	r4, r0
   1505a:	460d      	mov	r5, r1
   1505c:	4616      	mov	r6, r2
   1505e:	9305      	str	r3, [sp, #20]
    rc = ble_att_svr_pkt(rxom, &txom, out_att_err);
   15060:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15062:	a907      	add	r1, sp, #28
   15064:	980c      	ldr	r0, [sp, #48]	; 0x30
   15066:	f7ff fded 	bl	14c44 <ble_att_svr_pkt>
    if (rc != 0) {
   1506a:	4603      	mov	r3, r0
   1506c:	b128      	cbz	r0, 1507a <ble_att_svr_build_find_type_value_rsp+0x26>
    *out_txom = txom;
   1506e:	9907      	ldr	r1, [sp, #28]
   15070:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   15072:	6011      	str	r1, [r2, #0]
}
   15074:	4618      	mov	r0, r3
   15076:	b008      	add	sp, #32
   15078:	bd70      	pop	{r4, r5, r6, pc}
    buf = ble_att_cmd_prepare(BLE_ATT_OP_FIND_TYPE_VALUE_RSP, 0, txom);
   1507a:	9a07      	ldr	r2, [sp, #28]
   1507c:	2100      	movs	r1, #0
   1507e:	2007      	movs	r0, #7
   15080:	f7ff fc05 	bl	1488e <ble_att_cmd_prepare>
    if (buf == NULL) {
   15084:	b190      	cbz	r0, 150ac <ble_att_svr_build_find_type_value_rsp+0x58>
    mtu = ble_att_mtu(conn_handle);
   15086:	4620      	mov	r0, r4
   15088:	f7ff fb1f 	bl	146ca <ble_att_mtu>
    rc = ble_att_svr_fill_type_value(conn_handle, start_handle, end_handle,
   1508c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1508e:	681b      	ldr	r3, [r3, #0]
   15090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   15092:	9203      	str	r2, [sp, #12]
   15094:	9002      	str	r0, [sp, #8]
   15096:	9a07      	ldr	r2, [sp, #28]
   15098:	9201      	str	r2, [sp, #4]
   1509a:	9300      	str	r3, [sp, #0]
   1509c:	9b05      	ldr	r3, [sp, #20]
   1509e:	4632      	mov	r2, r6
   150a0:	4629      	mov	r1, r5
   150a2:	4620      	mov	r0, r4
   150a4:	f7ff ff62 	bl	14f6c <ble_att_svr_fill_type_value>
   150a8:	4603      	mov	r3, r0
   150aa:	e7e0      	b.n	1506e <ble_att_svr_build_find_type_value_rsp+0x1a>
        *out_att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   150ac:	2311      	movs	r3, #17
   150ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   150b0:	7013      	strb	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   150b2:	2306      	movs	r3, #6
        goto done;
   150b4:	e7db      	b.n	1506e <ble_att_svr_build_find_type_value_rsp+0x1a>

000150b6 <ble_att_svr_service_uuid>:
{
   150b6:	b510      	push	{r4, lr}
   150b8:	b08a      	sub	sp, #40	; 0x28
   150ba:	460c      	mov	r4, r1
    rc = ble_att_svr_read_flat(BLE_HS_CONN_HANDLE_NONE, entry, 0, sizeof(val), val,
   150bc:	9202      	str	r2, [sp, #8]
   150be:	f10d 0316 	add.w	r3, sp, #22
   150c2:	9301      	str	r3, [sp, #4]
   150c4:	ab06      	add	r3, sp, #24
   150c6:	9300      	str	r3, [sp, #0]
   150c8:	2310      	movs	r3, #16
   150ca:	2200      	movs	r2, #0
   150cc:	4601      	mov	r1, r0
   150ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
   150d2:	f7ff feee 	bl	14eb2 <ble_att_svr_read_flat>
    if (rc != 0) {
   150d6:	4603      	mov	r3, r0
   150d8:	b110      	cbz	r0, 150e0 <ble_att_svr_service_uuid+0x2a>
}
   150da:	4618      	mov	r0, r3
   150dc:	b00a      	add	sp, #40	; 0x28
   150de:	bd10      	pop	{r4, pc}
    rc = ble_uuid_init_from_buf(uuid, val, attr_len);
   150e0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   150e4:	a906      	add	r1, sp, #24
   150e6:	4620      	mov	r0, r4
   150e8:	f7ff f93f 	bl	1436a <ble_uuid_init_from_buf>
   150ec:	4603      	mov	r3, r0
    return rc;
   150ee:	e7f4      	b.n	150da <ble_att_svr_service_uuid+0x24>

000150f0 <ble_att_svr_build_read_group_type_rsp>:
{
   150f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150f4:	b08b      	sub	sp, #44	; 0x2c
   150f6:	460e      	mov	r6, r1
   150f8:	4617      	mov	r7, r2
   150fa:	9302      	str	r3, [sp, #8]
   150fc:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   15100:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
    *att_err = 0;
   15104:	f04f 0b00 	mov.w	fp, #0
   15108:	f88a b000 	strb.w	fp, [sl]
    *err_handle = start_handle;
   1510c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1510e:	8019      	strh	r1, [r3, #0]
    mtu = ble_att_mtu(conn_handle);
   15110:	f7ff fadb 	bl	146ca <ble_att_mtu>
   15114:	9003      	str	r0, [sp, #12]
    txom = *rxom;
   15116:	f8d9 8000 	ldr.w	r8, [r9]
    *rxom = NULL;
   1511a:	f8c9 b000 	str.w	fp, [r9]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   1511e:	f8b8 1010 	ldrh.w	r1, [r8, #16]
   15122:	4640      	mov	r0, r8
   15124:	f7f5 f98b 	bl	a43e <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_GROUP_TYPE_RSP, sizeof(*rsp),
   15128:	4642      	mov	r2, r8
   1512a:	2101      	movs	r1, #1
   1512c:	2011      	movs	r0, #17
   1512e:	f7ff fbae 	bl	1488e <ble_att_cmd_prepare>
    if (rsp == NULL) {
   15132:	b130      	cbz	r0, 15142 <ble_att_svr_build_read_group_type_rsp+0x52>
   15134:	4683      	mov	fp, r0
    rsp->bagp_length = 0;
   15136:	2500      	movs	r5, #0
   15138:	7005      	strb	r5, [r0, #0]
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   1513a:	4b4d      	ldr	r3, [pc, #308]	; (15270 <ble_att_svr_build_read_group_type_rsp+0x180>)
   1513c:	681c      	ldr	r4, [r3, #0]
    end_group_handle = 0;
   1513e:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   15140:	e042      	b.n	151c8 <ble_att_svr_build_read_group_type_rsp+0xd8>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   15142:	2311      	movs	r3, #17
   15144:	f88a 3000 	strb.w	r3, [sl]
        rc = BLE_HS_ENOMEM;
   15148:	2306      	movs	r3, #6
    end_group_handle = 0;
   1514a:	f04f 0900 	mov.w	r9, #0
        goto done;
   1514e:	e05c      	b.n	1520a <ble_att_svr_build_read_group_type_rsp+0x11a>
            if (!ble_att_svr_is_valid_read_group_type(entry->ha_uuid)) {
   15150:	6860      	ldr	r0, [r4, #4]
   15152:	f7ff fea3 	bl	14e9c <ble_att_svr_is_valid_read_group_type>
   15156:	b910      	cbnz	r0, 1515e <ble_att_svr_build_read_group_type_rsp+0x6e>
                end_group_handle = entry->ha_handle_id;
   15158:	f8b4 900a 	ldrh.w	r9, [r4, #10]
   1515c:	e03d      	b.n	151da <ble_att_svr_build_read_group_type_rsp+0xea>
                rc = ble_att_svr_read_group_type_entry_write(
   1515e:	ab05      	add	r3, sp, #20
   15160:	9300      	str	r3, [sp, #0]
   15162:	464b      	mov	r3, r9
   15164:	462a      	mov	r2, r5
   15166:	9903      	ldr	r1, [sp, #12]
   15168:	4640      	mov	r0, r8
   1516a:	f7ff fe37 	bl	14ddc <ble_att_svr_read_group_type_entry_write>
                if (rc != 0) {
   1516e:	4603      	mov	r3, r0
   15170:	b918      	cbnz	r0, 1517a <ble_att_svr_build_read_group_type_rsp+0x8a>
                end_group_handle = 0;
   15172:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   15176:	464d      	mov	r5, r9
   15178:	e031      	b.n	151de <ble_att_svr_build_read_group_type_rsp+0xee>
                    *err_handle = entry->ha_handle_id;
   1517a:	8962      	ldrh	r2, [r4, #10]
   1517c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1517e:	800a      	strh	r2, [r1, #0]
                    if (rc == BLE_HS_ENOMEM) {
   15180:	2806      	cmp	r0, #6
   15182:	d003      	beq.n	1518c <ble_att_svr_build_read_group_type_rsp+0x9c>
                end_group_handle = 0;
   15184:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   15188:	464d      	mov	r5, r9
   1518a:	e03e      	b.n	1520a <ble_att_svr_build_read_group_type_rsp+0x11a>
                        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1518c:	2211      	movs	r2, #17
   1518e:	f88a 2000 	strb.w	r2, [sl]
                end_group_handle = 0;
   15192:	f04f 0900 	mov.w	r9, #0
                start_group_handle = 0;
   15196:	464d      	mov	r5, r9
   15198:	e037      	b.n	1520a <ble_att_svr_build_read_group_type_rsp+0x11a>
                    *err_handle = entry->ha_handle_id;
   1519a:	8962      	ldrh	r2, [r4, #10]
   1519c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   1519e:	800a      	strh	r2, [r1, #0]
                    goto done;
   151a0:	e033      	b.n	1520a <ble_att_svr_build_read_group_type_rsp+0x11a>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   151a2:	f89d 3014 	ldrb.w	r3, [sp, #20]
   151a6:	2b10      	cmp	r3, #16
   151a8:	d003      	beq.n	151b2 <ble_att_svr_build_read_group_type_rsp+0xc2>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_128;
   151aa:	2314      	movs	r3, #20
   151ac:	f88b 3000 	strb.w	r3, [fp]
   151b0:	e007      	b.n	151c2 <ble_att_svr_build_read_group_type_rsp+0xd2>
                        rsp->bagp_length = BLE_ATT_READ_GROUP_TYPE_ADATA_SZ_16;
   151b2:	2306      	movs	r3, #6
   151b4:	f88b 3000 	strb.w	r3, [fp]
   151b8:	e003      	b.n	151c2 <ble_att_svr_build_read_group_type_rsp+0xd2>
                    if (service_uuid.u.type != BLE_UUID_TYPE_16) {
   151ba:	f89d 2014 	ldrb.w	r2, [sp, #20]
   151be:	2a10      	cmp	r2, #16
   151c0:	d123      	bne.n	1520a <ble_att_svr_build_read_group_type_rsp+0x11a>
                start_group_handle = entry->ha_handle_id;
   151c2:	8965      	ldrh	r5, [r4, #10]
                end_group_handle = entry->ha_handle_id;
   151c4:	46a9      	mov	r9, r5
    STAILQ_FOREACH(entry, &ble_att_svr_list, ha_next) {
   151c6:	6824      	ldr	r4, [r4, #0]
   151c8:	2c00      	cmp	r4, #0
   151ca:	d03a      	beq.n	15242 <ble_att_svr_build_read_group_type_rsp+0x152>
        if (entry->ha_handle_id < start_handle) {
   151cc:	8963      	ldrh	r3, [r4, #10]
   151ce:	42b3      	cmp	r3, r6
   151d0:	d3f9      	bcc.n	151c6 <ble_att_svr_build_read_group_type_rsp+0xd6>
        if (entry->ha_handle_id > end_handle) {
   151d2:	42bb      	cmp	r3, r7
   151d4:	d837      	bhi.n	15246 <ble_att_svr_build_read_group_type_rsp+0x156>
        if (start_group_handle != 0) {
   151d6:	2d00      	cmp	r5, #0
   151d8:	d1ba      	bne.n	15150 <ble_att_svr_build_read_group_type_rsp+0x60>
        if (start_group_handle == 0) {
   151da:	2d00      	cmp	r5, #0
   151dc:	d1f3      	bne.n	151c6 <ble_att_svr_build_read_group_type_rsp+0xd6>
            if (ble_uuid_cmp(entry->ha_uuid, group_uuid) == 0) {
   151de:	9902      	ldr	r1, [sp, #8]
   151e0:	6860      	ldr	r0, [r4, #4]
   151e2:	f7ff f8eb 	bl	143bc <ble_uuid_cmp>
   151e6:	2800      	cmp	r0, #0
   151e8:	d1ed      	bne.n	151c6 <ble_att_svr_build_read_group_type_rsp+0xd6>
                rc = ble_att_svr_service_uuid(entry, &service_uuid, att_err);
   151ea:	4652      	mov	r2, sl
   151ec:	a905      	add	r1, sp, #20
   151ee:	4620      	mov	r0, r4
   151f0:	f7ff ff61 	bl	150b6 <ble_att_svr_service_uuid>
                if (rc != 0) {
   151f4:	4603      	mov	r3, r0
   151f6:	2800      	cmp	r0, #0
   151f8:	d1cf      	bne.n	1519a <ble_att_svr_build_read_group_type_rsp+0xaa>
                switch (rsp->bagp_length) {
   151fa:	f89b 2000 	ldrb.w	r2, [fp]
   151fe:	2a06      	cmp	r2, #6
   15200:	d0db      	beq.n	151ba <ble_att_svr_build_read_group_type_rsp+0xca>
   15202:	2a14      	cmp	r2, #20
   15204:	d018      	beq.n	15238 <ble_att_svr_build_read_group_type_rsp+0x148>
   15206:	2a00      	cmp	r2, #0
   15208:	d0cb      	beq.n	151a2 <ble_att_svr_build_read_group_type_rsp+0xb2>
    if (rc == 0) {
   1520a:	bb2b      	cbnz	r3, 15258 <ble_att_svr_build_read_group_type_rsp+0x168>
        if (start_group_handle != 0) {
   1520c:	b15d      	cbz	r5, 15226 <ble_att_svr_build_read_group_type_rsp+0x136>
            if (entry == NULL) {
   1520e:	b1e4      	cbz	r4, 1524a <ble_att_svr_build_read_group_type_rsp+0x15a>
            rc = ble_att_svr_read_group_type_entry_write(txom, mtu,
   15210:	ab05      	add	r3, sp, #20
   15212:	9300      	str	r3, [sp, #0]
   15214:	464b      	mov	r3, r9
   15216:	462a      	mov	r2, r5
   15218:	9903      	ldr	r1, [sp, #12]
   1521a:	4640      	mov	r0, r8
   1521c:	f7ff fdde 	bl	14ddc <ble_att_svr_read_group_type_entry_write>
   15220:	4603      	mov	r3, r0
            if (rc == BLE_HS_ENOMEM) {
   15222:	2806      	cmp	r0, #6
   15224:	d014      	beq.n	15250 <ble_att_svr_build_read_group_type_rsp+0x160>
        if (OS_MBUF_PKTLEN(txom) <= BLE_ATT_READ_GROUP_TYPE_RSP_BASE_SZ) {
   15226:	f8b8 2010 	ldrh.w	r2, [r8, #16]
   1522a:	2a02      	cmp	r2, #2
   1522c:	d814      	bhi.n	15258 <ble_att_svr_build_read_group_type_rsp+0x168>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1522e:	230a      	movs	r3, #10
   15230:	f88a 3000 	strb.w	r3, [sl]
            rc = BLE_HS_ENOENT;
   15234:	2305      	movs	r3, #5
   15236:	e010      	b.n	1525a <ble_att_svr_build_read_group_type_rsp+0x16a>
                    if (service_uuid.u.type == BLE_UUID_TYPE_16) {
   15238:	f89d 2014 	ldrb.w	r2, [sp, #20]
   1523c:	2a10      	cmp	r2, #16
   1523e:	d1c0      	bne.n	151c2 <ble_att_svr_build_read_group_type_rsp+0xd2>
   15240:	e7e3      	b.n	1520a <ble_att_svr_build_read_group_type_rsp+0x11a>
    rc = 0;
   15242:	2300      	movs	r3, #0
   15244:	e7e1      	b.n	1520a <ble_att_svr_build_read_group_type_rsp+0x11a>
            rc = 0;
   15246:	2300      	movs	r3, #0
   15248:	e7df      	b.n	1520a <ble_att_svr_build_read_group_type_rsp+0x11a>
                end_group_handle = 0xffff;
   1524a:	f64f 79ff 	movw	r9, #65535	; 0xffff
   1524e:	e7df      	b.n	15210 <ble_att_svr_build_read_group_type_rsp+0x120>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   15250:	2211      	movs	r2, #17
   15252:	f88a 2000 	strb.w	r2, [sl]
   15256:	e7e6      	b.n	15226 <ble_att_svr_build_read_group_type_rsp+0x136>
    if (rc == 0 || rc == BLE_HS_EMSGSIZE) {
   15258:	b10b      	cbz	r3, 1525e <ble_att_svr_build_read_group_type_rsp+0x16e>
   1525a:	2b04      	cmp	r3, #4
   1525c:	d006      	beq.n	1526c <ble_att_svr_build_read_group_type_rsp+0x17c>
    *out_txom = txom;
   1525e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   15260:	f8c2 8000 	str.w	r8, [r2]
}
   15264:	4618      	mov	r0, r3
   15266:	b00b      	add	sp, #44	; 0x2c
   15268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rc = 0;
   1526c:	2300      	movs	r3, #0
   1526e:	e7f6      	b.n	1525e <ble_att_svr_build_read_group_type_rsp+0x16e>
   15270:	200077d4 	.word	0x200077d4

00015274 <ble_att_svr_prep_free>:
    if (entry != NULL) {
   15274:	b148      	cbz	r0, 1528a <ble_att_svr_prep_free+0x16>
{
   15276:	b510      	push	{r4, lr}
   15278:	4604      	mov	r4, r0
        os_mbuf_free_chain(entry->bape_value);
   1527a:	6880      	ldr	r0, [r0, #8]
   1527c:	f7f4 ffb0 	bl	a1e0 <os_mbuf_free_chain>
        os_memblock_put(&ble_att_svr_prep_entry_pool, entry);
   15280:	4621      	mov	r1, r4
   15282:	4802      	ldr	r0, [pc, #8]	; (1528c <ble_att_svr_prep_free+0x18>)
   15284:	f7f5 fc23 	bl	aace <os_memblock_put>
}
   15288:	bd10      	pop	{r4, pc}
   1528a:	4770      	bx	lr
   1528c:	20007adc 	.word	0x20007adc

00015290 <ble_att_svr_prep_alloc>:
{
   15290:	b538      	push	{r3, r4, r5, lr}
   15292:	4605      	mov	r5, r0
    entry = os_memblock_get(&ble_att_svr_prep_entry_pool);
   15294:	480c      	ldr	r0, [pc, #48]	; (152c8 <ble_att_svr_prep_alloc+0x38>)
   15296:	f7f5 fbf2 	bl	aa7e <os_memblock_get>
    if (entry == NULL) {
   1529a:	4604      	mov	r4, r0
   1529c:	b148      	cbz	r0, 152b2 <ble_att_svr_prep_alloc+0x22>
    memset(entry, 0, sizeof *entry);
   1529e:	2300      	movs	r3, #0
   152a0:	6003      	str	r3, [r0, #0]
   152a2:	6043      	str	r3, [r0, #4]
   152a4:	6083      	str	r3, [r0, #8]
    entry->bape_value = ble_hs_mbuf_l2cap_pkt();
   152a6:	f7fc f963 	bl	11570 <ble_hs_mbuf_l2cap_pkt>
   152aa:	60a0      	str	r0, [r4, #8]
    if (entry->bape_value == NULL) {
   152ac:	b120      	cbz	r0, 152b8 <ble_att_svr_prep_alloc+0x28>
}
   152ae:	4620      	mov	r0, r4
   152b0:	bd38      	pop	{r3, r4, r5, pc}
        *att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   152b2:	2309      	movs	r3, #9
   152b4:	702b      	strb	r3, [r5, #0]
        return NULL;
   152b6:	e7fa      	b.n	152ae <ble_att_svr_prep_alloc+0x1e>
        ble_att_svr_prep_free(entry);
   152b8:	4620      	mov	r0, r4
   152ba:	f7ff ffdb 	bl	15274 <ble_att_svr_prep_free>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   152be:	2311      	movs	r3, #17
   152c0:	702b      	strb	r3, [r5, #0]
        return NULL;
   152c2:	2400      	movs	r4, #0
   152c4:	e7f3      	b.n	152ae <ble_att_svr_prep_alloc+0x1e>
   152c6:	bf00      	nop
   152c8:	20007adc 	.word	0x20007adc

000152cc <ble_att_svr_insert_prep_entry>:
{
   152cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   152d0:	460e      	mov	r6, r1
   152d2:	4617      	mov	r7, r2
   152d4:	461d      	mov	r5, r3
    conn = ble_hs_conn_find_assert(conn_handle);
   152d6:	f7fb fa07 	bl	106e8 <ble_hs_conn_find_assert>
   152da:	4680      	mov	r8, r0
    prep_entry = ble_att_svr_prep_alloc(out_att_err);
   152dc:	9806      	ldr	r0, [sp, #24]
   152de:	f7ff ffd7 	bl	15290 <ble_att_svr_prep_alloc>
    if (prep_entry == NULL) {
   152e2:	b378      	cbz	r0, 15344 <ble_att_svr_insert_prep_entry+0x78>
   152e4:	4604      	mov	r4, r0
    prep_entry->bape_handle = handle;
   152e6:	8086      	strh	r6, [r0, #4]
    prep_entry->bape_offset = offset;
   152e8:	80c7      	strh	r7, [r0, #6]
        OS_MBUF_PKTLEN(rxom) - sizeof(struct ble_att_prep_write_cmd));
   152ea:	8a2b      	ldrh	r3, [r5, #16]
    rc = os_mbuf_appendfrom(
   152ec:	3b04      	subs	r3, #4
   152ee:	b29b      	uxth	r3, r3
   152f0:	2204      	movs	r2, #4
   152f2:	4629      	mov	r1, r5
   152f4:	6880      	ldr	r0, [r0, #8]
   152f6:	f7f5 f84b 	bl	a390 <os_mbuf_appendfrom>
    if (rc != 0) {
   152fa:	4605      	mov	r5, r0
   152fc:	b9a8      	cbnz	r0, 1532a <ble_att_svr_insert_prep_entry+0x5e>
    prep_prev = ble_att_svr_prep_find_prev(&conn->bhc_att_svr,
   152fe:	463a      	mov	r2, r7
   15300:	4631      	mov	r1, r6
   15302:	f108 0044 	add.w	r0, r8, #68	; 0x44
   15306:	f7ff fb13 	bl	14930 <ble_att_svr_prep_find_prev>
    if (prep_prev == NULL) {
   1530a:	b1a8      	cbz	r0, 15338 <ble_att_svr_insert_prep_entry+0x6c>
        SLIST_INSERT_AFTER(prep_prev, prep_entry, bape_next);
   1530c:	6802      	ldr	r2, [r0, #0]
   1530e:	6022      	str	r2, [r4, #0]
   15310:	6004      	str	r4, [r0, #0]
   15312:	f7f6 f85f 	bl	b3d4 <os_time_get>
        ble_npl_time_get() + BLE_HS_ATT_SVR_QUEUED_WRITE_TMO;
   15316:	f500 40ea 	add.w	r0, r0, #29952	; 0x7500
   1531a:	3030      	adds	r0, #48	; 0x30
    conn->bhc_att_svr.basc_prep_timeout_at =
   1531c:	f8c8 0048 	str.w	r0, [r8, #72]	; 0x48
    ble_hs_timer_resched();
   15320:	f7fa fc9c 	bl	fc5c <ble_hs_timer_resched>
}
   15324:	4628      	mov	r0, r5
   15326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_att_svr_prep_free(prep_entry);
   1532a:	4620      	mov	r0, r4
   1532c:	f7ff ffa2 	bl	15274 <ble_att_svr_prep_free>
        *out_att_err = BLE_ATT_ERR_PREPARE_QUEUE_FULL;
   15330:	2309      	movs	r3, #9
   15332:	9a06      	ldr	r2, [sp, #24]
   15334:	7013      	strb	r3, [r2, #0]
        return rc;
   15336:	e7f5      	b.n	15324 <ble_att_svr_insert_prep_entry+0x58>
        SLIST_INSERT_HEAD(&conn->bhc_att_svr.basc_prep_list, prep_entry,
   15338:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
   1533c:	6023      	str	r3, [r4, #0]
   1533e:	f8c8 4044 	str.w	r4, [r8, #68]	; 0x44
   15342:	e7e6      	b.n	15312 <ble_att_svr_insert_prep_entry+0x46>
        return BLE_HS_ENOMEM;
   15344:	2506      	movs	r5, #6
   15346:	e7ed      	b.n	15324 <ble_att_svr_insert_prep_entry+0x58>

00015348 <ble_att_svr_prep_extract>:
{
   15348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1534c:	4605      	mov	r5, r0
   1534e:	4689      	mov	r9, r1
   15350:	4690      	mov	r8, r2
    first = SLIST_FIRST(prep_list);
   15352:	6803      	ldr	r3, [r0, #0]
    attr_handle = first->bape_handle;
   15354:	889f      	ldrh	r7, [r3, #4]
    om = NULL;
   15356:	2600      	movs	r6, #0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   15358:	e008      	b.n	1536c <ble_att_svr_prep_extract+0x24>
            om = entry->bape_value;
   1535a:	68a6      	ldr	r6, [r4, #8]
        entry->bape_value = NULL;
   1535c:	2300      	movs	r3, #0
   1535e:	60a3      	str	r3, [r4, #8]
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   15360:	682b      	ldr	r3, [r5, #0]
   15362:	681b      	ldr	r3, [r3, #0]
   15364:	602b      	str	r3, [r5, #0]
        ble_att_svr_prep_free(entry);
   15366:	4620      	mov	r0, r4
   15368:	f7ff ff84 	bl	15274 <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   1536c:	682c      	ldr	r4, [r5, #0]
   1536e:	b14c      	cbz	r4, 15384 <ble_att_svr_prep_extract+0x3c>
        if (entry->bape_handle != attr_handle) {
   15370:	88a3      	ldrh	r3, [r4, #4]
   15372:	42bb      	cmp	r3, r7
   15374:	d106      	bne.n	15384 <ble_att_svr_prep_extract+0x3c>
        if (om == NULL) {
   15376:	2e00      	cmp	r6, #0
   15378:	d0ef      	beq.n	1535a <ble_att_svr_prep_extract+0x12>
            os_mbuf_concat(om, entry->bape_value);
   1537a:	68a1      	ldr	r1, [r4, #8]
   1537c:	4630      	mov	r0, r6
   1537e:	f7f5 f994 	bl	a6aa <os_mbuf_concat>
   15382:	e7eb      	b.n	1535c <ble_att_svr_prep_extract+0x14>
    *out_attr_handle = attr_handle;
   15384:	f8a9 7000 	strh.w	r7, [r9]
    *out_om = om;
   15388:	f8c8 6000 	str.w	r6, [r8]
}
   1538c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015390 <ble_att_svr_free_start_mem>:
     */
}

static void
ble_att_svr_free_start_mem(void)
{
   15390:	b510      	push	{r4, lr}
    free(ble_att_svr_entry_mem);
   15392:	4c03      	ldr	r4, [pc, #12]	; (153a0 <ble_att_svr_free_start_mem+0x10>)
   15394:	6820      	ldr	r0, [r4, #0]
   15396:	f006 fe55 	bl	1c044 <free>
    ble_att_svr_entry_mem = NULL;
   1539a:	2300      	movs	r3, #0
   1539c:	6023      	str	r3, [r4, #0]
}
   1539e:	bd10      	pop	{r4, pc}
   153a0:	200077a8 	.word	0x200077a8

000153a4 <ble_att_svr_register>:
{
   153a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   153a8:	4680      	mov	r8, r0
   153aa:	460f      	mov	r7, r1
   153ac:	4616      	mov	r6, r2
   153ae:	461d      	mov	r5, r3
    entry = ble_att_svr_entry_alloc();
   153b0:	f7ff fb00 	bl	149b4 <ble_att_svr_entry_alloc>
    if (entry == NULL) {
   153b4:	b1b8      	cbz	r0, 153e6 <ble_att_svr_register+0x42>
   153b6:	4604      	mov	r4, r0
    entry->ha_uuid = uuid;
   153b8:	f8c0 8004 	str.w	r8, [r0, #4]
    entry->ha_flags = flags;
   153bc:	7207      	strb	r7, [r0, #8]
    entry->ha_min_key_size = min_key_size;
   153be:	7246      	strb	r6, [r0, #9]
    entry->ha_handle_id = ble_att_svr_next_id();
   153c0:	f7ff faae 	bl	14920 <ble_att_svr_next_id>
   153c4:	8160      	strh	r0, [r4, #10]
    entry->ha_cb = cb;
   153c6:	9b06      	ldr	r3, [sp, #24]
   153c8:	60e3      	str	r3, [r4, #12]
    entry->ha_cb_arg = cb_arg;
   153ca:	9b07      	ldr	r3, [sp, #28]
   153cc:	6123      	str	r3, [r4, #16]
    STAILQ_INSERT_TAIL(&ble_att_svr_list, entry, ha_next);
   153ce:	2300      	movs	r3, #0
   153d0:	6023      	str	r3, [r4, #0]
   153d2:	4b07      	ldr	r3, [pc, #28]	; (153f0 <ble_att_svr_register+0x4c>)
   153d4:	685a      	ldr	r2, [r3, #4]
   153d6:	6014      	str	r4, [r2, #0]
   153d8:	605c      	str	r4, [r3, #4]
    if (handle_id != NULL) {
   153da:	b135      	cbz	r5, 153ea <ble_att_svr_register+0x46>
        *handle_id = entry->ha_handle_id;
   153dc:	8963      	ldrh	r3, [r4, #10]
   153de:	802b      	strh	r3, [r5, #0]
    return 0;
   153e0:	2000      	movs	r0, #0
}
   153e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return BLE_HS_ENOMEM;
   153e6:	2006      	movs	r0, #6
   153e8:	e7fb      	b.n	153e2 <ble_att_svr_register+0x3e>
    return 0;
   153ea:	2000      	movs	r0, #0
   153ec:	e7f9      	b.n	153e2 <ble_att_svr_register+0x3e>
   153ee:	bf00      	nop
   153f0:	200077d4 	.word	0x200077d4

000153f4 <ble_att_svr_prev_handle>:
}
   153f4:	4b01      	ldr	r3, [pc, #4]	; (153fc <ble_att_svr_prev_handle+0x8>)
   153f6:	8818      	ldrh	r0, [r3, #0]
   153f8:	4770      	bx	lr
   153fa:	bf00      	nop
   153fc:	200077d0 	.word	0x200077d0

00015400 <ble_att_svr_find_by_handle>:
    for (entry = STAILQ_FIRST(&ble_att_svr_list);
   15400:	4b04      	ldr	r3, [pc, #16]	; (15414 <ble_att_svr_find_by_handle+0x14>)
   15402:	681b      	ldr	r3, [r3, #0]
   15404:	b123      	cbz	r3, 15410 <ble_att_svr_find_by_handle+0x10>
        if (entry->ha_handle_id == handle_id) {
   15406:	895a      	ldrh	r2, [r3, #10]
   15408:	4282      	cmp	r2, r0
   1540a:	d001      	beq.n	15410 <ble_att_svr_find_by_handle+0x10>
         entry = STAILQ_NEXT(entry, ha_next)) {
   1540c:	681b      	ldr	r3, [r3, #0]
   1540e:	e7f9      	b.n	15404 <ble_att_svr_find_by_handle+0x4>
}
   15410:	4618      	mov	r0, r3
   15412:	4770      	bx	lr
   15414:	200077d4 	.word	0x200077d4

00015418 <ble_att_svr_write_handle>:
{
   15418:	b5f0      	push	{r4, r5, r6, r7, lr}
   1541a:	b083      	sub	sp, #12
   1541c:	4605      	mov	r5, r0
   1541e:	4616      	mov	r6, r2
   15420:	461f      	mov	r7, r3
   15422:	9c08      	ldr	r4, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   15424:	4608      	mov	r0, r1
   15426:	f7ff ffeb 	bl	15400 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   1542a:	b140      	cbz	r0, 1543e <ble_att_svr_write_handle+0x26>
   1542c:	4601      	mov	r1, r0
    rc = ble_att_svr_write(conn_handle, entry, offset, om, out_att_err);
   1542e:	9400      	str	r4, [sp, #0]
   15430:	463b      	mov	r3, r7
   15432:	4632      	mov	r2, r6
   15434:	4628      	mov	r0, r5
   15436:	f7ff fb94 	bl	14b62 <ble_att_svr_write>
}
   1543a:	b003      	add	sp, #12
   1543c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   1543e:	b11c      	cbz	r4, 15448 <ble_att_svr_write_handle+0x30>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   15440:	2301      	movs	r3, #1
   15442:	7023      	strb	r3, [r4, #0]
        return BLE_HS_ENOENT;
   15444:	2005      	movs	r0, #5
   15446:	e7f8      	b.n	1543a <ble_att_svr_write_handle+0x22>
   15448:	2005      	movs	r0, #5
   1544a:	e7f6      	b.n	1543a <ble_att_svr_write_handle+0x22>

0001544c <ble_att_svr_prep_write>:
{
   1544c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15450:	b084      	sub	sp, #16
   15452:	4606      	mov	r6, r0
   15454:	460c      	mov	r4, r1
   15456:	4617      	mov	r7, r2
    *err_handle = 0; /* Silence unnecessary warning. */
   15458:	2300      	movs	r3, #0
   1545a:	8013      	strh	r3, [r2, #0]
    rc = ble_att_svr_prep_validate(prep_list, err_handle);
   1545c:	4611      	mov	r1, r2
   1545e:	4620      	mov	r0, r4
   15460:	f7ff fa79 	bl	14956 <ble_att_svr_prep_validate>
    if (rc != 0) {
   15464:	4680      	mov	r8, r0
   15466:	b9f8      	cbnz	r0, 154a8 <ble_att_svr_prep_write+0x5c>
    while (!SLIST_EMPTY(prep_list)) {
   15468:	6823      	ldr	r3, [r4, #0]
   1546a:	b1eb      	cbz	r3, 154a8 <ble_att_svr_prep_write+0x5c>
        ble_att_svr_prep_extract(prep_list, &attr_handle, &om);
   1546c:	aa03      	add	r2, sp, #12
   1546e:	f10d 010a 	add.w	r1, sp, #10
   15472:	4620      	mov	r0, r4
   15474:	f7ff ff68 	bl	15348 <ble_att_svr_prep_extract>
        attr = ble_att_svr_find_by_handle(attr_handle);
   15478:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1547c:	f7ff ffc0 	bl	15400 <ble_att_svr_find_by_handle>
        rc = ble_att_svr_write(conn_handle, attr, 0, &om, &att_err);
   15480:	f10d 0309 	add.w	r3, sp, #9
   15484:	9300      	str	r3, [sp, #0]
   15486:	ab03      	add	r3, sp, #12
   15488:	2200      	movs	r2, #0
   1548a:	4601      	mov	r1, r0
   1548c:	4630      	mov	r0, r6
   1548e:	f7ff fb68 	bl	14b62 <ble_att_svr_write>
   15492:	4605      	mov	r5, r0
        os_mbuf_free_chain(om);
   15494:	9803      	ldr	r0, [sp, #12]
   15496:	f7f4 fea3 	bl	a1e0 <os_mbuf_free_chain>
        if (rc != 0) {
   1549a:	2d00      	cmp	r5, #0
   1549c:	d0e4      	beq.n	15468 <ble_att_svr_prep_write+0x1c>
            *err_handle = attr_handle;
   1549e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   154a2:	803b      	strh	r3, [r7, #0]
            return att_err;
   154a4:	f89d 8009 	ldrb.w	r8, [sp, #9]
}
   154a8:	4640      	mov	r0, r8
   154aa:	b004      	add	sp, #16
   154ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000154b0 <ble_att_svr_find_by_uuid>:
{
   154b0:	b570      	push	{r4, r5, r6, lr}
   154b2:	460d      	mov	r5, r1
   154b4:	4616      	mov	r6, r2
    if (prev == NULL) {
   154b6:	b160      	cbz	r0, 154d2 <ble_att_svr_find_by_uuid+0x22>
        entry = STAILQ_NEXT(prev, ha_next);
   154b8:	6804      	ldr	r4, [r0, #0]
    for (;
   154ba:	b174      	cbz	r4, 154da <ble_att_svr_find_by_uuid+0x2a>
         entry != NULL && entry->ha_handle_id <= end_handle;
   154bc:	8963      	ldrh	r3, [r4, #10]
   154be:	42b3      	cmp	r3, r6
   154c0:	d80a      	bhi.n	154d8 <ble_att_svr_find_by_uuid+0x28>
        if (uuid == NULL || ble_uuid_cmp(entry->ha_uuid, uuid) == 0) {
   154c2:	b155      	cbz	r5, 154da <ble_att_svr_find_by_uuid+0x2a>
   154c4:	4629      	mov	r1, r5
   154c6:	6860      	ldr	r0, [r4, #4]
   154c8:	f7fe ff78 	bl	143bc <ble_uuid_cmp>
   154cc:	b128      	cbz	r0, 154da <ble_att_svr_find_by_uuid+0x2a>
         entry = STAILQ_NEXT(entry, ha_next)) {
   154ce:	6824      	ldr	r4, [r4, #0]
   154d0:	e7f3      	b.n	154ba <ble_att_svr_find_by_uuid+0xa>
        entry = STAILQ_FIRST(&ble_att_svr_list);
   154d2:	4b03      	ldr	r3, [pc, #12]	; (154e0 <ble_att_svr_find_by_uuid+0x30>)
   154d4:	681c      	ldr	r4, [r3, #0]
   154d6:	e7f0      	b.n	154ba <ble_att_svr_find_by_uuid+0xa>
    return NULL;
   154d8:	2400      	movs	r4, #0
}
   154da:	4620      	mov	r0, r4
   154dc:	bd70      	pop	{r4, r5, r6, pc}
   154de:	bf00      	nop
   154e0:	200077d4 	.word	0x200077d4

000154e4 <ble_att_svr_build_read_type_rsp>:
{
   154e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154e8:	b08f      	sub	sp, #60	; 0x3c
   154ea:	9006      	str	r0, [sp, #24]
   154ec:	460d      	mov	r5, r1
   154ee:	4617      	mov	r7, r2
   154f0:	9305      	str	r3, [sp, #20]
   154f2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   154f4:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
    *att_err = 0;    /* Silence unnecessary warning. */
   154f8:	2200      	movs	r2, #0
   154fa:	f88a 2000 	strb.w	r2, [sl]
    *err_handle = start_handle;
   154fe:	991b      	ldr	r1, [sp, #108]	; 0x6c
   15500:	800d      	strh	r5, [r1, #0]
    txom = *rxom;
   15502:	681e      	ldr	r6, [r3, #0]
    *rxom = NULL;
   15504:	601a      	str	r2, [r3, #0]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   15506:	8a31      	ldrh	r1, [r6, #16]
   15508:	4630      	mov	r0, r6
   1550a:	f7f4 ff98 	bl	a43e <os_mbuf_adj>
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_READ_TYPE_RSP, sizeof(*rsp), txom);
   1550e:	4632      	mov	r2, r6
   15510:	2101      	movs	r1, #1
   15512:	2009      	movs	r0, #9
   15514:	f7ff f9bb 	bl	1488e <ble_att_cmd_prepare>
    if (rsp == NULL) {
   15518:	9007      	str	r0, [sp, #28]
   1551a:	b140      	cbz	r0, 1552e <ble_att_svr_build_read_type_rsp+0x4a>
    mtu = ble_att_mtu(conn_handle);
   1551c:	9806      	ldr	r0, [sp, #24]
   1551e:	f7ff f8d4 	bl	146ca <ble_att_mtu>
   15522:	4681      	mov	r9, r0
    prev_attr_len = 0;
   15524:	f04f 0800 	mov.w	r8, #0
    entry_written = 0;
   15528:	46c3      	mov	fp, r8
    entry = NULL;
   1552a:	4644      	mov	r4, r8
   1552c:	e035      	b.n	1559a <ble_att_svr_build_read_type_rsp+0xb6>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   1552e:	2311      	movs	r3, #17
   15530:	f88a 3000 	strb.w	r3, [sl]
        *err_handle = 0;
   15534:	f04f 0b00 	mov.w	fp, #0
   15538:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   1553a:	f8a3 b000 	strh.w	fp, [r3]
        rc = BLE_HS_ENOMEM;
   1553e:	2206      	movs	r2, #6
    prev_attr_len = 0;
   15540:	46d8      	mov	r8, fp
    if (!entry_written) {
   15542:	f1bb 0f00 	cmp.w	fp, #0
   15546:	d15a      	bne.n	155fe <ble_att_svr_build_read_type_rsp+0x11a>
        if (*att_err == 0) {
   15548:	f89a 3000 	ldrb.w	r3, [sl]
   1554c:	b913      	cbnz	r3, 15554 <ble_att_svr_build_read_type_rsp+0x70>
            *att_err = BLE_ATT_ERR_ATTR_NOT_FOUND;
   1554e:	230a      	movs	r3, #10
   15550:	f88a 3000 	strb.w	r3, [sl]
        if (rc == 0) {
   15554:	2a00      	cmp	r2, #0
   15556:	d15a      	bne.n	1560e <ble_att_svr_build_read_type_rsp+0x12a>
            rc = BLE_HS_ENOENT;
   15558:	2205      	movs	r2, #5
   1555a:	e058      	b.n	1560e <ble_att_svr_build_read_type_rsp+0x12a>
                *err_handle = entry->ha_handle_id;
   1555c:	8963      	ldrh	r3, [r4, #10]
   1555e:	991b      	ldr	r1, [sp, #108]	; 0x6c
   15560:	800b      	strh	r3, [r1, #0]
                goto done;
   15562:	e7ee      	b.n	15542 <ble_att_svr_build_read_type_rsp+0x5e>
            } else if (prev_attr_len != attr_len) {
   15564:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
   15568:	4543      	cmp	r3, r8
   1556a:	d1ea      	bne.n	15542 <ble_att_svr_build_read_type_rsp+0x5e>
            txomlen = OS_MBUF_PKTHDR(txom)->omp_len + 2 + attr_len;
   1556c:	8a33      	ldrh	r3, [r6, #16]
   1556e:	3302      	adds	r3, #2
   15570:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   15574:	440b      	add	r3, r1
            if (txomlen > mtu) {
   15576:	4599      	cmp	r9, r3
   15578:	dbe3      	blt.n	15542 <ble_att_svr_build_read_type_rsp+0x5e>
            data = os_mbuf_extend(txom, 2 + attr_len);
   1557a:	3102      	adds	r1, #2
   1557c:	b289      	uxth	r1, r1
   1557e:	4630      	mov	r0, r6
   15580:	f7f5 f8b6 	bl	a6f0 <os_mbuf_extend>
            if (data == NULL) {
   15584:	b388      	cbz	r0, 155ea <ble_att_svr_build_read_type_rsp+0x106>
            data->handle = htole16(entry->ha_handle_id);
   15586:	8962      	ldrh	r2, [r4, #10]
   15588:	f820 2b02 	strh.w	r2, [r0], #2
            memcpy(data->value, buf, attr_len);
   1558c:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
   15590:	a908      	add	r1, sp, #32
   15592:	f7f6 f90b 	bl	b7ac <memcpy>
            entry_written = 1;
   15596:	f04f 0b01 	mov.w	fp, #1
        entry = ble_att_svr_find_by_uuid(entry, uuid, end_handle);
   1559a:	463a      	mov	r2, r7
   1559c:	9905      	ldr	r1, [sp, #20]
   1559e:	4620      	mov	r0, r4
   155a0:	f7ff ff86 	bl	154b0 <ble_att_svr_find_by_uuid>
        if (entry == NULL) {
   155a4:	4604      	mov	r4, r0
   155a6:	b340      	cbz	r0, 155fa <ble_att_svr_build_read_type_rsp+0x116>
        if (entry->ha_handle_id >= start_handle) {
   155a8:	8943      	ldrh	r3, [r0, #10]
   155aa:	42ab      	cmp	r3, r5
   155ac:	d3f5      	bcc.n	1559a <ble_att_svr_build_read_type_rsp+0xb6>
            rc = ble_att_svr_read_flat(conn_handle, entry, 0, sizeof buf, buf,
   155ae:	f8cd a008 	str.w	sl, [sp, #8]
   155b2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
   155b6:	9301      	str	r3, [sp, #4]
   155b8:	ab08      	add	r3, sp, #32
   155ba:	9300      	str	r3, [sp, #0]
   155bc:	2313      	movs	r3, #19
   155be:	2200      	movs	r2, #0
   155c0:	4601      	mov	r1, r0
   155c2:	9806      	ldr	r0, [sp, #24]
   155c4:	f7ff fc75 	bl	14eb2 <ble_att_svr_read_flat>
            if (rc != 0) {
   155c8:	4602      	mov	r2, r0
   155ca:	2800      	cmp	r0, #0
   155cc:	d1c6      	bne.n	1555c <ble_att_svr_build_read_type_rsp+0x78>
            if (attr_len > mtu - 4) {
   155ce:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
   155d2:	f1a9 0304 	sub.w	r3, r9, #4
   155d6:	4299      	cmp	r1, r3
   155d8:	dd01      	ble.n	155de <ble_att_svr_build_read_type_rsp+0xfa>
                attr_len = mtu - 4;
   155da:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
            if (prev_attr_len == 0) {
   155de:	f1b8 0f00 	cmp.w	r8, #0
   155e2:	d1bf      	bne.n	15564 <ble_att_svr_build_read_type_rsp+0x80>
                prev_attr_len = attr_len;
   155e4:	f8bd 8036 	ldrh.w	r8, [sp, #54]	; 0x36
   155e8:	e7c0      	b.n	1556c <ble_att_svr_build_read_type_rsp+0x88>
                *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   155ea:	2311      	movs	r3, #17
   155ec:	f88a 3000 	strb.w	r3, [sl]
                *err_handle = entry->ha_handle_id;
   155f0:	8963      	ldrh	r3, [r4, #10]
   155f2:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   155f4:	8013      	strh	r3, [r2, #0]
                rc = BLE_HS_ENOMEM;
   155f6:	2206      	movs	r2, #6
                goto done;
   155f8:	e7a3      	b.n	15542 <ble_att_svr_build_read_type_rsp+0x5e>
            rc = BLE_HS_ENOENT;
   155fa:	2205      	movs	r2, #5
   155fc:	e7a1      	b.n	15542 <ble_att_svr_build_read_type_rsp+0x5e>
        *att_err = 0;
   155fe:	2200      	movs	r2, #0
   15600:	f88a 2000 	strb.w	r2, [sl]
        rsp->batp_length = sizeof(*data) + prev_attr_len;
   15604:	f108 0802 	add.w	r8, r8, #2
   15608:	9b07      	ldr	r3, [sp, #28]
   1560a:	f883 8000 	strb.w	r8, [r3]
    *out_txom = txom;
   1560e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   15610:	601e      	str	r6, [r3, #0]
}
   15612:	4610      	mov	r0, r2
   15614:	b00f      	add	sp, #60	; 0x3c
   15616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001561a <ble_att_svr_ticks_until_tmo>:
    if (SLIST_EMPTY(&svr->basc_prep_list)) {
   1561a:	6803      	ldr	r3, [r0, #0]
   1561c:	b12b      	cbz	r3, 1562a <ble_att_svr_ticks_until_tmo+0x10>
    time_diff = svr->basc_prep_timeout_at - now;
   1561e:	6840      	ldr	r0, [r0, #4]
    if (time_diff < 0) {
   15620:	1a40      	subs	r0, r0, r1
   15622:	d400      	bmi.n	15626 <ble_att_svr_ticks_until_tmo+0xc>
}
   15624:	4770      	bx	lr
        return 0;
   15626:	2000      	movs	r0, #0
   15628:	4770      	bx	lr
        return BLE_HS_FOREVER;
   1562a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   1562e:	e7f9      	b.n	15624 <ble_att_svr_ticks_until_tmo+0xa>

00015630 <ble_att_svr_read_handle>:
{
   15630:	b5f0      	push	{r4, r5, r6, r7, lr}
   15632:	b083      	sub	sp, #12
   15634:	4605      	mov	r5, r0
   15636:	4616      	mov	r6, r2
   15638:	461f      	mov	r7, r3
   1563a:	9c08      	ldr	r4, [sp, #32]
    entry = ble_att_svr_find_by_handle(attr_handle);
   1563c:	4608      	mov	r0, r1
   1563e:	f7ff fedf 	bl	15400 <ble_att_svr_find_by_handle>
    if (entry == NULL) {
   15642:	b140      	cbz	r0, 15656 <ble_att_svr_read_handle+0x26>
   15644:	4601      	mov	r1, r0
    rc = ble_att_svr_read(conn_handle, entry, offset, om, out_att_err);
   15646:	9400      	str	r4, [sp, #0]
   15648:	463b      	mov	r3, r7
   1564a:	4632      	mov	r2, r6
   1564c:	4628      	mov	r0, r5
   1564e:	f7ff fa59 	bl	14b04 <ble_att_svr_read>
}
   15652:	b003      	add	sp, #12
   15654:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (out_att_err != NULL) {
   15656:	b11c      	cbz	r4, 15660 <ble_att_svr_read_handle+0x30>
            *out_att_err = BLE_ATT_ERR_INVALID_HANDLE;
   15658:	2301      	movs	r3, #1
   1565a:	7023      	strb	r3, [r4, #0]
        return BLE_HS_ENOENT;
   1565c:	2005      	movs	r0, #5
   1565e:	e7f8      	b.n	15652 <ble_att_svr_read_handle+0x22>
   15660:	2005      	movs	r0, #5
   15662:	e7f6      	b.n	15652 <ble_att_svr_read_handle+0x22>

00015664 <ble_att_svr_build_read_mult_rsp>:
{
   15664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15668:	b084      	sub	sp, #16
   1566a:	4607      	mov	r7, r0
   1566c:	460c      	mov	r4, r1
   1566e:	4691      	mov	r9, r2
   15670:	461d      	mov	r5, r3
    mtu = ble_att_mtu(conn_handle);
   15672:	f7ff f82a 	bl	146ca <ble_att_mtu>
   15676:	4606      	mov	r6, r0
    rc = ble_att_svr_pkt(rxom, &txom, att_err);
   15678:	462a      	mov	r2, r5
   1567a:	a903      	add	r1, sp, #12
   1567c:	4620      	mov	r0, r4
   1567e:	f7ff fae1 	bl	14c44 <ble_att_svr_pkt>
    if (rc != 0) {
   15682:	4680      	mov	r8, r0
   15684:	b148      	cbz	r0, 1569a <ble_att_svr_build_read_mult_rsp+0x36>
        *err_handle = 0;
   15686:	2300      	movs	r3, #0
   15688:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1568a:	8013      	strh	r3, [r2, #0]
    *out_txom = txom;
   1568c:	9b03      	ldr	r3, [sp, #12]
   1568e:	f8c9 3000 	str.w	r3, [r9]
}
   15692:	4640      	mov	r0, r8
   15694:	b004      	add	sp, #16
   15696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_MULT_RSP, 0, txom) == NULL) {
   1569a:	9a03      	ldr	r2, [sp, #12]
   1569c:	2100      	movs	r1, #0
   1569e:	200f      	movs	r0, #15
   156a0:	f7ff f8f5 	bl	1488e <ble_att_cmd_prepare>
   156a4:	b320      	cbz	r0, 156f0 <ble_att_svr_build_read_mult_rsp+0x8c>
    while (OS_MBUF_PKTLEN(*rxom) >= 2 && OS_MBUF_PKTLEN(txom) < mtu) {
   156a6:	6823      	ldr	r3, [r4, #0]
   156a8:	8a1b      	ldrh	r3, [r3, #16]
   156aa:	2b01      	cmp	r3, #1
   156ac:	d9ee      	bls.n	1568c <ble_att_svr_build_read_mult_rsp+0x28>
   156ae:	9b03      	ldr	r3, [sp, #12]
   156b0:	8a1b      	ldrh	r3, [r3, #16]
   156b2:	42b3      	cmp	r3, r6
   156b4:	d2ea      	bcs.n	1568c <ble_att_svr_build_read_mult_rsp+0x28>
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   156b6:	462a      	mov	r2, r5
   156b8:	2102      	movs	r1, #2
   156ba:	4620      	mov	r0, r4
   156bc:	f7ff fa82 	bl	14bc4 <ble_att_svr_pullup_req_base>
        if (rc != 0) {
   156c0:	b9f0      	cbnz	r0, 15700 <ble_att_svr_build_read_mult_rsp+0x9c>
        handle = get_le16((*rxom)->om_data);
   156c2:	6823      	ldr	r3, [r4, #0]
   156c4:	6818      	ldr	r0, [r3, #0]
   156c6:	f006 faac 	bl	1bc22 <get_le16>
   156ca:	4682      	mov	sl, r0
        os_mbuf_adj(*rxom, 2);
   156cc:	2102      	movs	r1, #2
   156ce:	6820      	ldr	r0, [r4, #0]
   156d0:	f7f4 feb5 	bl	a43e <os_mbuf_adj>
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   156d4:	9500      	str	r5, [sp, #0]
   156d6:	9b03      	ldr	r3, [sp, #12]
   156d8:	2200      	movs	r2, #0
   156da:	4651      	mov	r1, sl
   156dc:	4638      	mov	r0, r7
   156de:	f7ff ffa7 	bl	15630 <ble_att_svr_read_handle>
        if (rc != 0) {
   156e2:	2800      	cmp	r0, #0
   156e4:	d0df      	beq.n	156a6 <ble_att_svr_build_read_mult_rsp+0x42>
            *err_handle = handle;
   156e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   156e8:	f8a2 a000 	strh.w	sl, [r2]
        rc = ble_att_svr_read_handle(conn_handle, handle, 0, txom, att_err);
   156ec:	4680      	mov	r8, r0
            goto done;
   156ee:	e7cd      	b.n	1568c <ble_att_svr_build_read_mult_rsp+0x28>
        *att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   156f0:	2311      	movs	r3, #17
   156f2:	702b      	strb	r3, [r5, #0]
        *err_handle = 0;
   156f4:	2300      	movs	r3, #0
   156f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   156f8:	8013      	strh	r3, [r2, #0]
        rc = BLE_HS_ENOMEM;
   156fa:	f04f 0806 	mov.w	r8, #6
        goto done;
   156fe:	e7c5      	b.n	1568c <ble_att_svr_build_read_mult_rsp+0x28>
            *err_handle = 0;
   15700:	2200      	movs	r2, #0
   15702:	990c      	ldr	r1, [sp, #48]	; 0x30
   15704:	800a      	strh	r2, [r1, #0]
        rc = ble_att_svr_pullup_req_base(rxom, 2, att_err);
   15706:	4680      	mov	r8, r0
            goto done;
   15708:	e7c0      	b.n	1568c <ble_att_svr_build_read_mult_rsp+0x28>

0001570a <ble_att_svr_tx_error_rsp>:
{
   1570a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1570c:	4605      	mov	r5, r0
   1570e:	460c      	mov	r4, r1
   15710:	4617      	mov	r7, r2
   15712:	461e      	mov	r6, r3
    rsp = ble_att_cmd_prepare(BLE_ATT_OP_ERROR_RSP, sizeof(*rsp), txom);
   15714:	460a      	mov	r2, r1
   15716:	2104      	movs	r1, #4
   15718:	2001      	movs	r0, #1
   1571a:	f7ff f8b8 	bl	1488e <ble_att_cmd_prepare>
    if (rsp == NULL) {
   1571e:	b150      	cbz	r0, 15736 <ble_att_svr_tx_error_rsp+0x2c>
    rsp->baep_req_op = req_op;
   15720:	7007      	strb	r7, [r0, #0]
    rsp->baep_handle = htole16(handle);
   15722:	f8a0 6001 	strh.w	r6, [r0, #1]
    rsp->baep_error_code = error_code;
   15726:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1572a:	70c2      	strb	r2, [r0, #3]
    return ble_att_tx(conn_handle, txom);
   1572c:	4621      	mov	r1, r4
   1572e:	4628      	mov	r0, r5
   15730:	f7ff f8d0 	bl	148d4 <ble_att_tx>
}
   15734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   15736:	2006      	movs	r0, #6
   15738:	e7fc      	b.n	15734 <ble_att_svr_tx_error_rsp+0x2a>

0001573a <ble_att_svr_tx_rsp>:
{
   1573a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1573e:	b085      	sub	sp, #20
   15740:	4607      	mov	r7, r0
   15742:	4614      	mov	r4, r2
   15744:	4699      	mov	r9, r3
   15746:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    if (hs_status != 0 && err_status == 0) {
   1574a:	4688      	mov	r8, r1
   1574c:	b109      	cbz	r1, 15752 <ble_att_svr_tx_rsp+0x18>
   1574e:	2e00      	cmp	r6, #0
   15750:	d037      	beq.n	157c2 <ble_att_svr_tx_rsp+0x88>
        ble_hs_lock();
   15752:	f7fa f9a7 	bl	faa4 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   15756:	aa03      	add	r2, sp, #12
   15758:	a902      	add	r1, sp, #8
   1575a:	4638      	mov	r0, r7
   1575c:	f7fe ff8b 	bl	14676 <ble_att_conn_chan_find>
        if (rc != 0) {
   15760:	4605      	mov	r5, r0
   15762:	b918      	cbnz	r0, 1576c <ble_att_svr_tx_rsp+0x32>
            if (hs_status == 0) {
   15764:	f1b8 0f00 	cmp.w	r8, #0
   15768:	d013      	beq.n	15792 <ble_att_svr_tx_rsp+0x58>
   1576a:	4645      	mov	r5, r8
        ble_hs_unlock();
   1576c:	f7fa f99e 	bl	faac <ble_hs_unlock>
        if (hs_status != 0) {
   15770:	b345      	cbz	r5, 157c4 <ble_att_svr_tx_rsp+0x8a>
            if (om == NULL) {
   15772:	b314      	cbz	r4, 157ba <ble_att_svr_tx_rsp+0x80>
                os_mbuf_adj(om, OS_MBUF_PKTLEN(om));
   15774:	8a21      	ldrh	r1, [r4, #16]
   15776:	4620      	mov	r0, r4
   15778:	f7f4 fe61 	bl	a43e <os_mbuf_adj>
            if (om != NULL) {
   1577c:	b314      	cbz	r4, 157c4 <ble_att_svr_tx_rsp+0x8a>
                ble_att_svr_tx_error_rsp(conn_handle, om, att_op,
   1577e:	9600      	str	r6, [sp, #0]
   15780:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   15784:	464a      	mov	r2, r9
   15786:	4621      	mov	r1, r4
   15788:	4638      	mov	r0, r7
   1578a:	f7ff ffbe 	bl	1570a <ble_att_svr_tx_error_rsp>
                om = NULL;
   1578e:	2400      	movs	r4, #0
   15790:	e018      	b.n	157c4 <ble_att_svr_tx_rsp+0x8a>
                ble_att_inc_tx_stat(om->om_data[0]);
   15792:	6823      	ldr	r3, [r4, #0]
   15794:	7818      	ldrb	r0, [r3, #0]
   15796:	f7fe ff75 	bl	14684 <ble_att_inc_tx_stat>
                ble_att_truncate_to_mtu(chan, om);
   1579a:	4621      	mov	r1, r4
   1579c:	9803      	ldr	r0, [sp, #12]
   1579e:	f7fe ff87 	bl	146b0 <ble_att_truncate_to_mtu>
                hs_status = ble_l2cap_tx(conn, chan, om);
   157a2:	4622      	mov	r2, r4
   157a4:	9903      	ldr	r1, [sp, #12]
   157a6:	9802      	ldr	r0, [sp, #8]
   157a8:	f7fc fb21 	bl	11dee <ble_l2cap_tx>
                if (hs_status != 0) {
   157ac:	4605      	mov	r5, r0
   157ae:	b908      	cbnz	r0, 157b4 <ble_att_svr_tx_rsp+0x7a>
                om = NULL;
   157b0:	2400      	movs	r4, #0
   157b2:	e7db      	b.n	1576c <ble_att_svr_tx_rsp+0x32>
                    err_status = BLE_ATT_ERR_UNLIKELY;
   157b4:	260e      	movs	r6, #14
                om = NULL;
   157b6:	2400      	movs	r4, #0
   157b8:	e7d8      	b.n	1576c <ble_att_svr_tx_rsp+0x32>
                om = ble_hs_mbuf_l2cap_pkt();
   157ba:	f7fb fed9 	bl	11570 <ble_hs_mbuf_l2cap_pkt>
   157be:	4604      	mov	r4, r0
   157c0:	e7dc      	b.n	1577c <ble_att_svr_tx_rsp+0x42>
   157c2:	460d      	mov	r5, r1
    os_mbuf_free_chain(om);
   157c4:	4620      	mov	r0, r4
   157c6:	f7f4 fd0b 	bl	a1e0 <os_mbuf_free_chain>
}
   157ca:	4628      	mov	r0, r5
   157cc:	b005      	add	sp, #20
   157ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000157d2 <ble_att_svr_rx_mtu>:
{
   157d2:	b570      	push	{r4, r5, r6, lr}
   157d4:	b086      	sub	sp, #24
   157d6:	4604      	mov	r4, r0
   157d8:	460d      	mov	r5, r1
    txom = NULL;
   157da:	2300      	movs	r3, #0
   157dc:	9303      	str	r3, [sp, #12]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*cmd), &att_err);
   157de:	f10d 020b 	add.w	r2, sp, #11
   157e2:	2102      	movs	r1, #2
   157e4:	4628      	mov	r0, r5
   157e6:	f7ff f9ed 	bl	14bc4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   157ea:	b180      	cbz	r0, 1580e <ble_att_svr_rx_mtu+0x3c>
   157ec:	4601      	mov	r1, r0
    mtu = 0;
   157ee:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_MTU_REQ,
   157f0:	f89d 300b 	ldrb.w	r3, [sp, #11]
   157f4:	2200      	movs	r2, #0
   157f6:	9201      	str	r2, [sp, #4]
   157f8:	9300      	str	r3, [sp, #0]
   157fa:	2302      	movs	r3, #2
   157fc:	9a03      	ldr	r2, [sp, #12]
   157fe:	4620      	mov	r0, r4
   15800:	f7ff ff9b 	bl	1573a <ble_att_svr_tx_rsp>
    if (rc == 0) {
   15804:	4605      	mov	r5, r0
   15806:	b170      	cbz	r0, 15826 <ble_att_svr_rx_mtu+0x54>
}
   15808:	4628      	mov	r0, r5
   1580a:	b006      	add	sp, #24
   1580c:	bd70      	pop	{r4, r5, r6, pc}
    cmd = (struct ble_att_mtu_cmd *)(*rxom)->om_data;
   1580e:	682b      	ldr	r3, [r5, #0]
   15810:	681b      	ldr	r3, [r3, #0]
    mtu = le16toh(cmd->bamc_mtu);
   15812:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_mtu_rsp(conn_handle, rxom, &txom, &att_err);
   15814:	f10d 030b 	add.w	r3, sp, #11
   15818:	aa03      	add	r2, sp, #12
   1581a:	4629      	mov	r1, r5
   1581c:	4620      	mov	r0, r4
   1581e:	f7ff f9dd 	bl	14bdc <ble_att_svr_build_mtu_rsp>
   15822:	4601      	mov	r1, r0
   15824:	e7e4      	b.n	157f0 <ble_att_svr_rx_mtu+0x1e>
        ble_hs_lock();
   15826:	f7fa f93d 	bl	faa4 <ble_hs_lock>
        rc = ble_att_conn_chan_find(conn_handle, &conn, &chan);
   1582a:	aa05      	add	r2, sp, #20
   1582c:	a904      	add	r1, sp, #16
   1582e:	4620      	mov	r0, r4
   15830:	f7fe ff21 	bl	14676 <ble_att_conn_chan_find>
        if (rc == 0) {
   15834:	4605      	mov	r5, r0
   15836:	b148      	cbz	r0, 1584c <ble_att_svr_rx_mtu+0x7a>
        ble_hs_unlock();
   15838:	f7fa f938 	bl	faac <ble_hs_unlock>
        if (rc == 0) {
   1583c:	2d00      	cmp	r5, #0
   1583e:	d1e3      	bne.n	15808 <ble_att_svr_rx_mtu+0x36>
            ble_gap_mtu_event(conn_handle, BLE_L2CAP_CID_ATT, mtu);
   15840:	4632      	mov	r2, r6
   15842:	2104      	movs	r1, #4
   15844:	4620      	mov	r0, r4
   15846:	f7f8 f90c 	bl	da62 <ble_gap_mtu_event>
    return rc;
   1584a:	e7dd      	b.n	15808 <ble_att_svr_rx_mtu+0x36>
            ble_att_set_peer_mtu(chan, mtu);
   1584c:	4631      	mov	r1, r6
   1584e:	9805      	ldr	r0, [sp, #20]
   15850:	f7fe ff19 	bl	14686 <ble_att_set_peer_mtu>
            chan->flags |= BLE_L2CAP_CHAN_F_TXED_MTU;
   15854:	9805      	ldr	r0, [sp, #20]
   15856:	7b83      	ldrb	r3, [r0, #14]
   15858:	f043 0301 	orr.w	r3, r3, #1
   1585c:	7383      	strb	r3, [r0, #14]
            mtu = ble_att_chan_mtu(chan);
   1585e:	f7fe ff17 	bl	14690 <ble_att_chan_mtu>
   15862:	4606      	mov	r6, r0
   15864:	e7e8      	b.n	15838 <ble_att_svr_rx_mtu+0x66>

00015866 <ble_att_svr_rx_find_info>:
{
   15866:	b570      	push	{r4, r5, r6, lr}
   15868:	b084      	sub	sp, #16
   1586a:	4606      	mov	r6, r0
   1586c:	460d      	mov	r5, r1
    txom = NULL;
   1586e:	2300      	movs	r3, #0
   15870:	9303      	str	r3, [sp, #12]
    att_err = 0;
   15872:	aa04      	add	r2, sp, #16
   15874:	f802 3d05 	strb.w	r3, [r2, #-5]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   15878:	2104      	movs	r1, #4
   1587a:	4628      	mov	r0, r5
   1587c:	f7ff f9a2 	bl	14bc4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15880:	b9c8      	cbnz	r0, 158b6 <ble_att_svr_rx_find_info+0x50>
    req = (struct ble_att_find_info_req *)(*rxom)->om_data;
   15882:	682b      	ldr	r3, [r5, #0]
   15884:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bafq_start_handle);
   15886:	881c      	ldrh	r4, [r3, #0]
    end_handle = le16toh(req->bafq_end_handle);
   15888:	885a      	ldrh	r2, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   1588a:	4294      	cmp	r4, r2
   1588c:	d800      	bhi.n	15890 <ble_att_svr_rx_find_info+0x2a>
   1588e:	b924      	cbnz	r4, 1589a <ble_att_svr_rx_find_info+0x34>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   15890:	2301      	movs	r3, #1
   15892:	f88d 300b 	strb.w	r3, [sp, #11]
        rc = BLE_HS_EBADDATA;
   15896:	210a      	movs	r1, #10
        goto done;
   15898:	e00f      	b.n	158ba <ble_att_svr_rx_find_info+0x54>
    rc = ble_att_svr_build_find_info_rsp(conn_handle,
   1589a:	f10d 030b 	add.w	r3, sp, #11
   1589e:	9301      	str	r3, [sp, #4]
   158a0:	ab03      	add	r3, sp, #12
   158a2:	9300      	str	r3, [sp, #0]
   158a4:	462b      	mov	r3, r5
   158a6:	4621      	mov	r1, r4
   158a8:	4630      	mov	r0, r6
   158aa:	f7ff fa67 	bl	14d7c <ble_att_svr_build_find_info_rsp>
    if (rc != 0) {
   158ae:	4601      	mov	r1, r0
   158b0:	b918      	cbnz	r0, 158ba <ble_att_svr_rx_find_info+0x54>
    err_handle = 0;
   158b2:	2400      	movs	r4, #0
   158b4:	e001      	b.n	158ba <ble_att_svr_rx_find_info+0x54>
   158b6:	4601      	mov	r1, r0
        err_handle = 0;
   158b8:	2400      	movs	r4, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_FIND_INFO_REQ,
   158ba:	f89d 300b 	ldrb.w	r3, [sp, #11]
   158be:	9401      	str	r4, [sp, #4]
   158c0:	9300      	str	r3, [sp, #0]
   158c2:	2304      	movs	r3, #4
   158c4:	9a03      	ldr	r2, [sp, #12]
   158c6:	4630      	mov	r0, r6
   158c8:	f7ff ff37 	bl	1573a <ble_att_svr_tx_rsp>
}
   158cc:	b004      	add	sp, #16
   158ce:	bd70      	pop	{r4, r5, r6, pc}

000158d0 <ble_att_svr_rx_find_type_value>:
{
   158d0:	b570      	push	{r4, r5, r6, lr}
   158d2:	b088      	sub	sp, #32
   158d4:	4606      	mov	r6, r0
   158d6:	460d      	mov	r5, r1
    txom = NULL;
   158d8:	2300      	movs	r3, #0
   158da:	9306      	str	r3, [sp, #24]
    att_err = 0;
   158dc:	aa08      	add	r2, sp, #32
   158de:	f802 3d09 	strb.w	r3, [r2, #-9]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   158e2:	2106      	movs	r1, #6
   158e4:	4628      	mov	r0, r5
   158e6:	f7ff f96d 	bl	14bc4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   158ea:	bb00      	cbnz	r0, 1592e <ble_att_svr_rx_find_type_value+0x5e>
    req = (struct ble_att_find_type_value_req *)(*rxom)->om_data;
   158ec:	682b      	ldr	r3, [r5, #0]
   158ee:	681b      	ldr	r3, [r3, #0]
    start_handle = le16toh(req->bavq_start_handle);
   158f0:	881c      	ldrh	r4, [r3, #0]
    end_handle = le16toh(req->bavq_end_handle);
   158f2:	885a      	ldrh	r2, [r3, #2]
    attr_type = (ble_uuid16_t) BLE_UUID16_INIT(le16toh(req->bavq_attr_type));
   158f4:	889b      	ldrh	r3, [r3, #4]
   158f6:	2110      	movs	r1, #16
   158f8:	f88d 101c 	strb.w	r1, [sp, #28]
   158fc:	f8ad 301e 	strh.w	r3, [sp, #30]
    if (start_handle > end_handle || start_handle == 0) {
   15900:	4294      	cmp	r4, r2
   15902:	d800      	bhi.n	15906 <ble_att_svr_rx_find_type_value+0x36>
   15904:	b924      	cbnz	r4, 15910 <ble_att_svr_rx_find_type_value+0x40>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   15906:	2301      	movs	r3, #1
   15908:	f88d 3017 	strb.w	r3, [sp, #23]
        rc = BLE_HS_EBADDATA;
   1590c:	210a      	movs	r1, #10
        goto done;
   1590e:	e010      	b.n	15932 <ble_att_svr_rx_find_type_value+0x62>
    rc = ble_att_svr_build_find_type_value_rsp(conn_handle, start_handle,
   15910:	f10d 0317 	add.w	r3, sp, #23
   15914:	9302      	str	r3, [sp, #8]
   15916:	ab06      	add	r3, sp, #24
   15918:	9301      	str	r3, [sp, #4]
   1591a:	9500      	str	r5, [sp, #0]
   1591c:	9b07      	ldr	r3, [sp, #28]
   1591e:	4621      	mov	r1, r4
   15920:	4630      	mov	r0, r6
   15922:	f7ff fb97 	bl	15054 <ble_att_svr_build_find_type_value_rsp>
    if (rc != 0) {
   15926:	4601      	mov	r1, r0
   15928:	b918      	cbnz	r0, 15932 <ble_att_svr_rx_find_type_value+0x62>
    err_handle = 0;
   1592a:	2400      	movs	r4, #0
   1592c:	e001      	b.n	15932 <ble_att_svr_rx_find_type_value+0x62>
   1592e:	4601      	mov	r1, r0
   15930:	2400      	movs	r4, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   15932:	f89d 3017 	ldrb.w	r3, [sp, #23]
   15936:	9401      	str	r4, [sp, #4]
   15938:	9300      	str	r3, [sp, #0]
   1593a:	2306      	movs	r3, #6
   1593c:	9a06      	ldr	r2, [sp, #24]
   1593e:	4630      	mov	r0, r6
   15940:	f7ff fefb 	bl	1573a <ble_att_svr_tx_rsp>
}
   15944:	b008      	add	sp, #32
   15946:	bd70      	pop	{r4, r5, r6, pc}

00015948 <ble_att_svr_rx_read_type>:
{
   15948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1594c:	b08c      	sub	sp, #48	; 0x30
   1594e:	4606      	mov	r6, r0
   15950:	460d      	mov	r5, r1
    txom = NULL;
   15952:	2300      	movs	r3, #0
   15954:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   15956:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
    att_err = 0;
   1595a:	f88d 3013 	strb.w	r3, [sp, #19]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   1595e:	680b      	ldr	r3, [r1, #0]
   15960:	8a1c      	ldrh	r4, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   15962:	2c06      	cmp	r4, #6
   15964:	d010      	beq.n	15988 <ble_att_svr_rx_read_type+0x40>
   15966:	2c14      	cmp	r4, #20
   15968:	d00e      	beq.n	15988 <ble_att_svr_rx_read_type+0x40>
        rc = BLE_HS_EBADDATA;
   1596a:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_TYPE_REQ,
   1596c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   15970:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
   15974:	9201      	str	r2, [sp, #4]
   15976:	9300      	str	r3, [sp, #0]
   15978:	2308      	movs	r3, #8
   1597a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1597c:	4630      	mov	r0, r6
   1597e:	f7ff fedc 	bl	1573a <ble_att_svr_tx_rsp>
}
   15982:	b00c      	add	sp, #48	; 0x30
   15984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   15988:	f10d 0213 	add.w	r2, sp, #19
   1598c:	4621      	mov	r1, r4
   1598e:	4628      	mov	r0, r5
   15990:	f7ff f918 	bl	14bc4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15994:	4601      	mov	r1, r0
   15996:	2800      	cmp	r0, #0
   15998:	d1e8      	bne.n	1596c <ble_att_svr_rx_read_type+0x24>
    req = (struct ble_att_read_type_req *)(*rxom)->om_data;
   1599a:	6829      	ldr	r1, [r5, #0]
   1599c:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->batq_start_handle);
   1599e:	881a      	ldrh	r2, [r3, #0]
   159a0:	b297      	uxth	r7, r2
    end_handle = le16toh(req->batq_end_handle);
   159a2:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   159a6:	4547      	cmp	r7, r8
   159a8:	d800      	bhi.n	159ac <ble_att_svr_rx_read_type+0x64>
   159aa:	b937      	cbnz	r7, 159ba <ble_att_svr_rx_read_type+0x72>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   159ac:	2301      	movs	r3, #1
   159ae:	f88d 3013 	strb.w	r3, [sp, #19]
        err_handle = start_handle;
   159b2:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
        rc = BLE_HS_EBADDATA;
   159b6:	210a      	movs	r1, #10
        goto done;
   159b8:	e7d8      	b.n	1596c <ble_att_svr_rx_read_type+0x24>
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req),
   159ba:	1f23      	subs	r3, r4, #4
   159bc:	2204      	movs	r2, #4
   159be:	a805      	add	r0, sp, #20
   159c0:	f7fe fd96 	bl	144f0 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   159c4:	b118      	cbz	r0, 159ce <ble_att_svr_rx_read_type+0x86>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   159c6:	2104      	movs	r1, #4
   159c8:	f88d 1013 	strb.w	r1, [sp, #19]
        goto done;
   159cc:	e7ce      	b.n	1596c <ble_att_svr_rx_read_type+0x24>
    rc = ble_att_svr_build_read_type_rsp(conn_handle, start_handle, end_handle,
   159ce:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   159d2:	9303      	str	r3, [sp, #12]
   159d4:	f10d 0313 	add.w	r3, sp, #19
   159d8:	9302      	str	r3, [sp, #8]
   159da:	ab0b      	add	r3, sp, #44	; 0x2c
   159dc:	9301      	str	r3, [sp, #4]
   159de:	9500      	str	r5, [sp, #0]
   159e0:	ab05      	add	r3, sp, #20
   159e2:	4642      	mov	r2, r8
   159e4:	4639      	mov	r1, r7
   159e6:	4630      	mov	r0, r6
   159e8:	f7ff fd7c 	bl	154e4 <ble_att_svr_build_read_type_rsp>
   159ec:	4601      	mov	r1, r0
   159ee:	e7bd      	b.n	1596c <ble_att_svr_rx_read_type+0x24>

000159f0 <ble_att_svr_rx_read>:
{
   159f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   159f4:	b084      	sub	sp, #16
   159f6:	4607      	mov	r7, r0
   159f8:	460e      	mov	r6, r1
    att_err = 0;
   159fa:	aa04      	add	r2, sp, #16
   159fc:	2300      	movs	r3, #0
   159fe:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   15a02:	2102      	movs	r1, #2
   15a04:	4630      	mov	r0, r6
   15a06:	f7ff f8dd 	bl	14bc4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15a0a:	b170      	cbz	r0, 15a2a <ble_att_svr_rx_read+0x3a>
   15a0c:	4601      	mov	r1, r0
    err_handle = 0;
   15a0e:	2500      	movs	r5, #0
    txom = NULL;
   15a10:	462c      	mov	r4, r5
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_REQ,
   15a12:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15a16:	9501      	str	r5, [sp, #4]
   15a18:	9300      	str	r3, [sp, #0]
   15a1a:	230a      	movs	r3, #10
   15a1c:	4622      	mov	r2, r4
   15a1e:	4638      	mov	r0, r7
   15a20:	f7ff fe8b 	bl	1573a <ble_att_svr_tx_rsp>
}
   15a24:	b004      	add	sp, #16
   15a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_read_req *)(*rxom)->om_data;
   15a2a:	6834      	ldr	r4, [r6, #0]
   15a2c:	6823      	ldr	r3, [r4, #0]
    err_handle = le16toh(req->barq_handle);
   15a2e:	881d      	ldrh	r5, [r3, #0]
    *rxom = NULL;
   15a30:	f04f 0800 	mov.w	r8, #0
   15a34:	f8c6 8000 	str.w	r8, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   15a38:	8a21      	ldrh	r1, [r4, #16]
   15a3a:	4620      	mov	r0, r4
   15a3c:	f7f4 fcff 	bl	a43e <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_RSP, 0, txom) == NULL) {
   15a40:	4622      	mov	r2, r4
   15a42:	4641      	mov	r1, r8
   15a44:	200b      	movs	r0, #11
   15a46:	f7fe ff22 	bl	1488e <ble_att_cmd_prepare>
   15a4a:	b150      	cbz	r0, 15a62 <ble_att_svr_rx_read+0x72>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, 0, txom, &att_err);
   15a4c:	f10d 030f 	add.w	r3, sp, #15
   15a50:	9300      	str	r3, [sp, #0]
   15a52:	4623      	mov	r3, r4
   15a54:	2200      	movs	r2, #0
   15a56:	4629      	mov	r1, r5
   15a58:	4638      	mov	r0, r7
   15a5a:	f7ff fde9 	bl	15630 <ble_att_svr_read_handle>
   15a5e:	4601      	mov	r1, r0
done:
   15a60:	e7d7      	b.n	15a12 <ble_att_svr_rx_read+0x22>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   15a62:	2311      	movs	r3, #17
   15a64:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   15a68:	2106      	movs	r1, #6
        goto done;
   15a6a:	e7d2      	b.n	15a12 <ble_att_svr_rx_read+0x22>

00015a6c <ble_att_svr_rx_read_blob>:
{
   15a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15a70:	b085      	sub	sp, #20
   15a72:	4607      	mov	r7, r0
   15a74:	460e      	mov	r6, r1
    att_err = 0;
   15a76:	aa04      	add	r2, sp, #16
   15a78:	2300      	movs	r3, #0
   15a7a:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   15a7e:	2104      	movs	r1, #4
   15a80:	4630      	mov	r0, r6
   15a82:	f7ff f89f 	bl	14bc4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15a86:	b170      	cbz	r0, 15aa6 <ble_att_svr_rx_read_blob+0x3a>
   15a88:	4601      	mov	r1, r0
    err_handle = 0;
   15a8a:	2500      	movs	r5, #0
    txom = NULL;
   15a8c:	462c      	mov	r4, r5
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_BLOB_REQ,
   15a8e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15a92:	9501      	str	r5, [sp, #4]
   15a94:	9300      	str	r3, [sp, #0]
   15a96:	230c      	movs	r3, #12
   15a98:	4622      	mov	r2, r4
   15a9a:	4638      	mov	r0, r7
   15a9c:	f7ff fe4d 	bl	1573a <ble_att_svr_tx_rsp>
}
   15aa0:	b005      	add	sp, #20
   15aa2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_read_blob_req *)(*rxom)->om_data;
   15aa6:	6834      	ldr	r4, [r6, #0]
   15aa8:	6823      	ldr	r3, [r4, #0]
    err_handle = le16toh(req->babq_handle);
   15aaa:	881d      	ldrh	r5, [r3, #0]
    offset = le16toh(req->babq_offset);
   15aac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
    *rxom = NULL;
   15ab0:	f04f 0800 	mov.w	r8, #0
   15ab4:	f8c6 8000 	str.w	r8, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   15ab8:	8a21      	ldrh	r1, [r4, #16]
   15aba:	4620      	mov	r0, r4
   15abc:	f7f4 fcbf 	bl	a43e <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_READ_BLOB_RSP, 0, txom) == NULL) {
   15ac0:	4622      	mov	r2, r4
   15ac2:	4641      	mov	r1, r8
   15ac4:	200d      	movs	r0, #13
   15ac6:	f7fe fee2 	bl	1488e <ble_att_cmd_prepare>
   15aca:	b150      	cbz	r0, 15ae2 <ble_att_svr_rx_read_blob+0x76>
    rc = ble_att_svr_read_handle(conn_handle, err_handle, offset,
   15acc:	f10d 030f 	add.w	r3, sp, #15
   15ad0:	9300      	str	r3, [sp, #0]
   15ad2:	4623      	mov	r3, r4
   15ad4:	464a      	mov	r2, r9
   15ad6:	4629      	mov	r1, r5
   15ad8:	4638      	mov	r0, r7
   15ada:	f7ff fda9 	bl	15630 <ble_att_svr_read_handle>
   15ade:	4601      	mov	r1, r0
   15ae0:	e7d5      	b.n	15a8e <ble_att_svr_rx_read_blob+0x22>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   15ae2:	2311      	movs	r3, #17
   15ae4:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOMEM;
   15ae8:	2106      	movs	r1, #6
        goto done;
   15aea:	e7d0      	b.n	15a8e <ble_att_svr_rx_read_blob+0x22>

00015aec <ble_att_svr_rx_read_mult>:
{
   15aec:	b510      	push	{r4, lr}
   15aee:	b084      	sub	sp, #16
   15af0:	4604      	mov	r4, r0
    txom = NULL;
   15af2:	2200      	movs	r2, #0
   15af4:	9203      	str	r2, [sp, #12]
    err_handle = 0;
   15af6:	f8ad 200a 	strh.w	r2, [sp, #10]
    att_err = 0;
   15afa:	ab04      	add	r3, sp, #16
   15afc:	f803 2d07 	strb.w	r2, [r3, #-7]!
    rc = ble_att_svr_build_read_mult_rsp(conn_handle, rxom, &txom, &att_err,
   15b00:	f10d 020a 	add.w	r2, sp, #10
   15b04:	9200      	str	r2, [sp, #0]
   15b06:	aa03      	add	r2, sp, #12
   15b08:	f7ff fdac 	bl	15664 <ble_att_svr_build_read_mult_rsp>
    return ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_READ_MULT_REQ,
   15b0c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
   15b10:	9301      	str	r3, [sp, #4]
   15b12:	f89d 3009 	ldrb.w	r3, [sp, #9]
   15b16:	9300      	str	r3, [sp, #0]
   15b18:	230e      	movs	r3, #14
   15b1a:	9a03      	ldr	r2, [sp, #12]
   15b1c:	4601      	mov	r1, r0
   15b1e:	4620      	mov	r0, r4
   15b20:	f7ff fe0b 	bl	1573a <ble_att_svr_tx_rsp>
}
   15b24:	b004      	add	sp, #16
   15b26:	bd10      	pop	{r4, pc}

00015b28 <ble_att_svr_rx_read_group_type>:
{
   15b28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15b2c:	b08c      	sub	sp, #48	; 0x30
   15b2e:	4605      	mov	r5, r0
   15b30:	460c      	mov	r4, r1
    txom = NULL;
   15b32:	2300      	movs	r3, #0
   15b34:	930b      	str	r3, [sp, #44]	; 0x2c
    err_handle = 0;
   15b36:	f8ad 3016 	strh.w	r3, [sp, #22]
    att_err = 0;
   15b3a:	f88d 3015 	strb.w	r3, [sp, #21]
    pktlen = OS_MBUF_PKTLEN(*rxom);
   15b3e:	680b      	ldr	r3, [r1, #0]
   15b40:	8a19      	ldrh	r1, [r3, #16]
    if (pktlen != sizeof(*req) + 2 && pktlen != sizeof(*req) + 16) {
   15b42:	2906      	cmp	r1, #6
   15b44:	d010      	beq.n	15b68 <ble_att_svr_rx_read_group_type+0x40>
   15b46:	2914      	cmp	r1, #20
   15b48:	d00e      	beq.n	15b68 <ble_att_svr_rx_read_group_type+0x40>
        rc = BLE_HS_EBADDATA;
   15b4a:	210a      	movs	r1, #10
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom,
   15b4c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   15b50:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   15b54:	9201      	str	r2, [sp, #4]
   15b56:	9300      	str	r3, [sp, #0]
   15b58:	2310      	movs	r3, #16
   15b5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   15b5c:	4628      	mov	r0, r5
   15b5e:	f7ff fdec 	bl	1573a <ble_att_svr_tx_rsp>
}
   15b62:	b00c      	add	sp, #48	; 0x30
   15b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    rc = ble_att_svr_pullup_req_base(rxom, pktlen, &att_err);
   15b68:	f10d 0215 	add.w	r2, sp, #21
   15b6c:	4620      	mov	r0, r4
   15b6e:	f7ff f829 	bl	14bc4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15b72:	4601      	mov	r1, r0
   15b74:	2800      	cmp	r0, #0
   15b76:	d1e9      	bne.n	15b4c <ble_att_svr_rx_read_group_type+0x24>
    req = (struct ble_att_read_group_type_req *)(*rxom)->om_data;
   15b78:	6821      	ldr	r1, [r4, #0]
   15b7a:	680b      	ldr	r3, [r1, #0]
    start_handle = le16toh(req->bagq_start_handle);
   15b7c:	881e      	ldrh	r6, [r3, #0]
   15b7e:	b2b7      	uxth	r7, r6
    end_handle = le16toh(req->bagq_end_handle);
   15b80:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    if (start_handle > end_handle || start_handle == 0) {
   15b84:	4547      	cmp	r7, r8
   15b86:	d800      	bhi.n	15b8a <ble_att_svr_rx_read_group_type+0x62>
   15b88:	b937      	cbnz	r7, 15b98 <ble_att_svr_rx_read_group_type+0x70>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   15b8a:	2301      	movs	r3, #1
   15b8c:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   15b90:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   15b94:	210a      	movs	r1, #10
        goto done;
   15b96:	e7d9      	b.n	15b4c <ble_att_svr_rx_read_group_type+0x24>
    om_uuid_len = OS_MBUF_PKTHDR(*rxom)->omp_len - sizeof(*req);
   15b98:	8a0b      	ldrh	r3, [r1, #16]
    rc = ble_uuid_init_from_att_mbuf(&uuid, *rxom, sizeof(*req), om_uuid_len);
   15b9a:	3b04      	subs	r3, #4
   15b9c:	2204      	movs	r2, #4
   15b9e:	a806      	add	r0, sp, #24
   15ba0:	f7fe fca6 	bl	144f0 <ble_uuid_init_from_att_mbuf>
    if (rc != 0) {
   15ba4:	b130      	cbz	r0, 15bb4 <ble_att_svr_rx_read_group_type+0x8c>
        att_err = BLE_ATT_ERR_INVALID_PDU;
   15ba6:	2304      	movs	r3, #4
   15ba8:	f88d 3015 	strb.w	r3, [sp, #21]
        err_handle = start_handle;
   15bac:	f8ad 6016 	strh.w	r6, [sp, #22]
        rc = BLE_HS_EBADDATA;
   15bb0:	210a      	movs	r1, #10
        goto done;
   15bb2:	e7cb      	b.n	15b4c <ble_att_svr_rx_read_group_type+0x24>
    if (!ble_att_svr_is_valid_read_group_type(&uuid.u)) {
   15bb4:	a806      	add	r0, sp, #24
   15bb6:	f7ff f971 	bl	14e9c <ble_att_svr_is_valid_read_group_type>
   15bba:	b928      	cbnz	r0, 15bc8 <ble_att_svr_rx_read_group_type+0xa0>
        att_err = BLE_ATT_ERR_UNSUPPORTED_GROUP;
   15bbc:	2110      	movs	r1, #16
   15bbe:	f88d 1015 	strb.w	r1, [sp, #21]
        err_handle = start_handle;
   15bc2:	f8ad 6016 	strh.w	r6, [sp, #22]
        goto done;
   15bc6:	e7c1      	b.n	15b4c <ble_att_svr_rx_read_group_type+0x24>
    rc = ble_att_svr_build_read_group_type_rsp(conn_handle, start_handle,
   15bc8:	f10d 0316 	add.w	r3, sp, #22
   15bcc:	9303      	str	r3, [sp, #12]
   15bce:	f10d 0315 	add.w	r3, sp, #21
   15bd2:	9302      	str	r3, [sp, #8]
   15bd4:	ab0b      	add	r3, sp, #44	; 0x2c
   15bd6:	9301      	str	r3, [sp, #4]
   15bd8:	9400      	str	r4, [sp, #0]
   15bda:	ab06      	add	r3, sp, #24
   15bdc:	4642      	mov	r2, r8
   15bde:	4639      	mov	r1, r7
   15be0:	4628      	mov	r0, r5
   15be2:	f7ff fa85 	bl	150f0 <ble_att_svr_build_read_group_type_rsp>
   15be6:	4601      	mov	r1, r0
   15be8:	e7b0      	b.n	15b4c <ble_att_svr_rx_read_group_type+0x24>

00015bea <ble_att_svr_rx_write>:
{
   15bea:	b570      	push	{r4, r5, r6, lr}
   15bec:	b084      	sub	sp, #16
   15bee:	4605      	mov	r5, r0
   15bf0:	460c      	mov	r4, r1
    txom = NULL;
   15bf2:	2300      	movs	r3, #0
   15bf4:	9303      	str	r3, [sp, #12]
    att_err = 0;
   15bf6:	aa04      	add	r2, sp, #16
   15bf8:	f802 3d05 	strb.w	r3, [r2, #-5]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   15bfc:	2102      	movs	r1, #2
   15bfe:	4620      	mov	r0, r4
   15c00:	f7fe ffe0 	bl	14bc4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15c04:	b160      	cbz	r0, 15c20 <ble_att_svr_rx_write+0x36>
   15c06:	4601      	mov	r1, r0
    handle = 0;
   15c08:	2600      	movs	r6, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_WRITE_REQ,
   15c0a:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15c0e:	9601      	str	r6, [sp, #4]
   15c10:	9300      	str	r3, [sp, #0]
   15c12:	2312      	movs	r3, #18
   15c14:	9a03      	ldr	r2, [sp, #12]
   15c16:	4628      	mov	r0, r5
   15c18:	f7ff fd8f 	bl	1573a <ble_att_svr_tx_rsp>
}
   15c1c:	b004      	add	sp, #16
   15c1e:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   15c20:	6823      	ldr	r3, [r4, #0]
   15c22:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->bawq_handle);
   15c24:	881e      	ldrh	r6, [r3, #0]
    rc = ble_att_svr_build_write_rsp(rxom, &txom, &att_err);
   15c26:	f10d 020b 	add.w	r2, sp, #11
   15c2a:	a903      	add	r1, sp, #12
   15c2c:	4620      	mov	r0, r4
   15c2e:	f7ff f81b 	bl	14c68 <ble_att_svr_build_write_rsp>
    if (rc != 0) {
   15c32:	4601      	mov	r1, r0
   15c34:	2800      	cmp	r0, #0
   15c36:	d1e8      	bne.n	15c0a <ble_att_svr_rx_write+0x20>
    os_mbuf_adj(*rxom, sizeof(*req));
   15c38:	2102      	movs	r1, #2
   15c3a:	6820      	ldr	r0, [r4, #0]
   15c3c:	f7f4 fbff 	bl	a43e <os_mbuf_adj>
    rc = ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   15c40:	f10d 030b 	add.w	r3, sp, #11
   15c44:	9300      	str	r3, [sp, #0]
   15c46:	4623      	mov	r3, r4
   15c48:	2200      	movs	r2, #0
   15c4a:	4631      	mov	r1, r6
   15c4c:	4628      	mov	r0, r5
   15c4e:	f7ff fbe3 	bl	15418 <ble_att_svr_write_handle>
   15c52:	4601      	mov	r1, r0
   15c54:	e7d9      	b.n	15c0a <ble_att_svr_rx_write+0x20>

00015c56 <ble_att_svr_rx_write_no_rsp>:
{
   15c56:	b570      	push	{r4, r5, r6, lr}
   15c58:	b084      	sub	sp, #16
   15c5a:	4605      	mov	r5, r0
   15c5c:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   15c5e:	f10d 020f 	add.w	r2, sp, #15
   15c62:	2102      	movs	r1, #2
   15c64:	4620      	mov	r0, r4
   15c66:	f7fe ffad 	bl	14bc4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15c6a:	4603      	mov	r3, r0
   15c6c:	b110      	cbz	r0, 15c74 <ble_att_svr_rx_write_no_rsp+0x1e>
}
   15c6e:	4618      	mov	r0, r3
   15c70:	b004      	add	sp, #16
   15c72:	bd70      	pop	{r4, r5, r6, pc}
    req = (struct ble_att_write_req *)(*rxom)->om_data;
   15c74:	6820      	ldr	r0, [r4, #0]
   15c76:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->bawq_handle);
   15c78:	881e      	ldrh	r6, [r3, #0]
    os_mbuf_adj(*rxom, sizeof(*req));
   15c7a:	2102      	movs	r1, #2
   15c7c:	f7f4 fbdf 	bl	a43e <os_mbuf_adj>
    return ble_att_svr_write_handle(conn_handle, handle, 0, rxom, &att_err);
   15c80:	f10d 030f 	add.w	r3, sp, #15
   15c84:	9300      	str	r3, [sp, #0]
   15c86:	4623      	mov	r3, r4
   15c88:	2200      	movs	r2, #0
   15c8a:	4631      	mov	r1, r6
   15c8c:	4628      	mov	r0, r5
   15c8e:	f7ff fbc3 	bl	15418 <ble_att_svr_write_handle>
   15c92:	4603      	mov	r3, r0
   15c94:	e7eb      	b.n	15c6e <ble_att_svr_rx_write_no_rsp+0x18>

00015c96 <ble_att_svr_prep_clear>:
{
   15c96:	b510      	push	{r4, lr}
   15c98:	4604      	mov	r4, r0
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   15c9a:	e003      	b.n	15ca4 <ble_att_svr_prep_clear+0xe>
        SLIST_REMOVE_HEAD(prep_list, bape_next);
   15c9c:	6803      	ldr	r3, [r0, #0]
   15c9e:	6023      	str	r3, [r4, #0]
        ble_att_svr_prep_free(entry);
   15ca0:	f7ff fae8 	bl	15274 <ble_att_svr_prep_free>
    while ((entry = SLIST_FIRST(prep_list)) != NULL) {
   15ca4:	6820      	ldr	r0, [r4, #0]
   15ca6:	2800      	cmp	r0, #0
   15ca8:	d1f8      	bne.n	15c9c <ble_att_svr_prep_clear+0x6>
}
   15caa:	bd10      	pop	{r4, pc}

00015cac <ble_att_svr_rx_prep_write>:
{
   15cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15cb0:	b084      	sub	sp, #16
   15cb2:	4607      	mov	r7, r0
   15cb4:	460d      	mov	r5, r1
    att_err = 0;
   15cb6:	aa04      	add	r2, sp, #16
   15cb8:	2300      	movs	r3, #0
   15cba:	f802 3d01 	strb.w	r3, [r2, #-1]!
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   15cbe:	2104      	movs	r1, #4
   15cc0:	4628      	mov	r0, r5
   15cc2:	f7fe ff7f 	bl	14bc4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15cc6:	b178      	cbz	r0, 15ce8 <ble_att_svr_rx_prep_write+0x3c>
   15cc8:	4606      	mov	r6, r0
    err_handle = 0;
   15cca:	2400      	movs	r4, #0
    txom = NULL;
   15ccc:	46a0      	mov	r8, r4
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_PREP_WRITE_REQ,
   15cce:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15cd2:	9401      	str	r4, [sp, #4]
   15cd4:	9300      	str	r3, [sp, #0]
   15cd6:	2316      	movs	r3, #22
   15cd8:	4642      	mov	r2, r8
   15cda:	4631      	mov	r1, r6
   15cdc:	4638      	mov	r0, r7
   15cde:	f7ff fd2c 	bl	1573a <ble_att_svr_tx_rsp>
}
   15ce2:	b004      	add	sp, #16
   15ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    req = (struct ble_att_prep_write_cmd *)(*rxom)->om_data;
   15ce8:	682b      	ldr	r3, [r5, #0]
   15cea:	f8d3 8000 	ldr.w	r8, [r3]
    err_handle = le16toh(req->bapc_handle);
   15cee:	f8b8 4000 	ldrh.w	r4, [r8]
    attr_entry = ble_att_svr_find_by_handle(le16toh(req->bapc_handle));
   15cf2:	4620      	mov	r0, r4
   15cf4:	f7ff fb84 	bl	15400 <ble_att_svr_find_by_handle>
    if (attr_entry == NULL) {
   15cf8:	4602      	mov	r2, r0
   15cfa:	b150      	cbz	r0, 15d12 <ble_att_svr_rx_prep_write+0x66>
    rc = ble_att_svr_check_perms(conn_handle, 0, attr_entry, &att_err);
   15cfc:	f10d 030f 	add.w	r3, sp, #15
   15d00:	2100      	movs	r1, #0
   15d02:	4638      	mov	r0, r7
   15d04:	f7fe fe73 	bl	149ee <ble_att_svr_check_perms>
    if (rc != 0) {
   15d08:	4606      	mov	r6, r0
   15d0a:	b148      	cbz	r0, 15d20 <ble_att_svr_rx_prep_write+0x74>
    txom = NULL;
   15d0c:	f04f 0800 	mov.w	r8, #0
   15d10:	e7dd      	b.n	15cce <ble_att_svr_rx_prep_write+0x22>
        att_err = BLE_ATT_ERR_INVALID_HANDLE;
   15d12:	2301      	movs	r3, #1
   15d14:	f88d 300f 	strb.w	r3, [sp, #15]
        rc = BLE_HS_ENOENT;
   15d18:	2605      	movs	r6, #5
    txom = NULL;
   15d1a:	f04f 0800 	mov.w	r8, #0
        goto done;
   15d1e:	e7d6      	b.n	15cce <ble_att_svr_rx_prep_write+0x22>
    ble_hs_lock();
   15d20:	f7f9 fec0 	bl	faa4 <ble_hs_lock>
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   15d24:	f8b8 1000 	ldrh.w	r1, [r8]
                                       le16toh(req->bapc_offset), *rxom,
   15d28:	f8b8 2002 	ldrh.w	r2, [r8, #2]
    rc = ble_att_svr_insert_prep_entry(conn_handle, le16toh(req->bapc_handle),
   15d2c:	f10d 030f 	add.w	r3, sp, #15
   15d30:	9300      	str	r3, [sp, #0]
   15d32:	682b      	ldr	r3, [r5, #0]
   15d34:	4638      	mov	r0, r7
   15d36:	f7ff fac9 	bl	152cc <ble_att_svr_insert_prep_entry>
   15d3a:	4606      	mov	r6, r0
    ble_hs_unlock();
   15d3c:	f7f9 feb6 	bl	faac <ble_hs_unlock>
    txom = *rxom;
   15d40:	f8d5 8000 	ldr.w	r8, [r5]
    *rxom = NULL;
   15d44:	2300      	movs	r3, #0
   15d46:	602b      	str	r3, [r5, #0]
    if (rc != 0) {
   15d48:	2e00      	cmp	r6, #0
   15d4a:	d1c0      	bne.n	15cce <ble_att_svr_rx_prep_write+0x22>
    os_mbuf_prepend(txom, 1);
   15d4c:	2101      	movs	r1, #1
   15d4e:	4640      	mov	r0, r8
   15d50:	f7f4 fc04 	bl	a55c <os_mbuf_prepend>
    txom->om_data[0] = BLE_ATT_OP_PREP_WRITE_RSP;
   15d54:	f8d8 3000 	ldr.w	r3, [r8]
   15d58:	2217      	movs	r2, #23
   15d5a:	701a      	strb	r2, [r3, #0]
   15d5c:	e7b7      	b.n	15cce <ble_att_svr_rx_prep_write+0x22>

00015d5e <ble_att_svr_rx_exec_write>:
{
   15d5e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15d62:	b085      	sub	sp, #20
   15d64:	4607      	mov	r7, r0
   15d66:	460e      	mov	r6, r1
    err_handle = 0;
   15d68:	2300      	movs	r3, #0
   15d6a:	f8ad 300a 	strh.w	r3, [sp, #10]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), &att_err);
   15d6e:	f10d 0209 	add.w	r2, sp, #9
   15d72:	2101      	movs	r1, #1
   15d74:	4630      	mov	r0, r6
   15d76:	f7fe ff25 	bl	14bc4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15d7a:	4605      	mov	r5, r0
   15d7c:	b190      	cbz	r0, 15da4 <ble_att_svr_rx_exec_write+0x46>
        flags = 0;
   15d7e:	f04f 0800 	mov.w	r8, #0
    txom = NULL;
   15d82:	4644      	mov	r4, r8
    if (rc == 0) {
   15d84:	b335      	cbz	r5, 15dd4 <ble_att_svr_rx_exec_write+0x76>
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_EXEC_WRITE_REQ,
   15d86:	f89d 3009 	ldrb.w	r3, [sp, #9]
   15d8a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   15d8e:	9201      	str	r2, [sp, #4]
   15d90:	9300      	str	r3, [sp, #0]
   15d92:	2318      	movs	r3, #24
   15d94:	4622      	mov	r2, r4
   15d96:	4629      	mov	r1, r5
   15d98:	4638      	mov	r0, r7
   15d9a:	f7ff fcce 	bl	1573a <ble_att_svr_tx_rsp>
}
   15d9e:	b005      	add	sp, #20
   15da0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    req = (struct ble_att_exec_write_req *)(*rxom)->om_data;
   15da4:	6834      	ldr	r4, [r6, #0]
   15da6:	6823      	ldr	r3, [r4, #0]
    flags = req->baeq_flags;
   15da8:	f893 8000 	ldrb.w	r8, [r3]
    *rxom = NULL;
   15dac:	f04f 0900 	mov.w	r9, #0
   15db0:	f8c6 9000 	str.w	r9, [r6]
    os_mbuf_adj(txom, OS_MBUF_PKTLEN(txom));
   15db4:	8a21      	ldrh	r1, [r4, #16]
   15db6:	4620      	mov	r0, r4
   15db8:	f7f4 fb41 	bl	a43e <os_mbuf_adj>
    if (ble_att_cmd_prepare(BLE_ATT_OP_EXEC_WRITE_RSP, 0, txom) == NULL) {
   15dbc:	4622      	mov	r2, r4
   15dbe:	4649      	mov	r1, r9
   15dc0:	2019      	movs	r0, #25
   15dc2:	f7fe fd64 	bl	1488e <ble_att_cmd_prepare>
   15dc6:	2800      	cmp	r0, #0
   15dc8:	d1dc      	bne.n	15d84 <ble_att_svr_rx_exec_write+0x26>
        att_err = BLE_ATT_ERR_INSUFFICIENT_RES;
   15dca:	2311      	movs	r3, #17
   15dcc:	f88d 3009 	strb.w	r3, [sp, #9]
        rc = BLE_HS_ENOMEM;
   15dd0:	2506      	movs	r5, #6
        goto done;
   15dd2:	e7d7      	b.n	15d84 <ble_att_svr_rx_exec_write+0x26>
        ble_hs_lock();
   15dd4:	f7f9 fe66 	bl	faa4 <ble_hs_lock>
        conn = ble_hs_conn_find_assert(conn_handle);
   15dd8:	4638      	mov	r0, r7
   15dda:	f7fa fc85 	bl	106e8 <ble_hs_conn_find_assert>
        prep_list = conn->bhc_att_svr.basc_prep_list;
   15dde:	6c43      	ldr	r3, [r0, #68]	; 0x44
   15de0:	9303      	str	r3, [sp, #12]
        SLIST_INIT(&conn->bhc_att_svr.basc_prep_list);
   15de2:	2300      	movs	r3, #0
   15de4:	6443      	str	r3, [r0, #68]	; 0x44
        ble_hs_unlock();
   15de6:	f7f9 fe61 	bl	faac <ble_hs_unlock>
        if (flags) {
   15dea:	f1b8 0f00 	cmp.w	r8, #0
   15dee:	d103      	bne.n	15df8 <ble_att_svr_rx_exec_write+0x9a>
        ble_att_svr_prep_clear(&prep_list);
   15df0:	a803      	add	r0, sp, #12
   15df2:	f7ff ff50 	bl	15c96 <ble_att_svr_prep_clear>
   15df6:	e7c6      	b.n	15d86 <ble_att_svr_rx_exec_write+0x28>
            att_err = ble_att_svr_prep_write(conn_handle, &prep_list,
   15df8:	f10d 020a 	add.w	r2, sp, #10
   15dfc:	a903      	add	r1, sp, #12
   15dfe:	4638      	mov	r0, r7
   15e00:	f7ff fb24 	bl	1544c <ble_att_svr_prep_write>
   15e04:	b2c0      	uxtb	r0, r0
   15e06:	f88d 0009 	strb.w	r0, [sp, #9]
            if (att_err != 0) {
   15e0a:	2800      	cmp	r0, #0
   15e0c:	d0f0      	beq.n	15df0 <ble_att_svr_rx_exec_write+0x92>
                rc = BLE_HS_EAPP;
   15e0e:	2509      	movs	r5, #9
   15e10:	e7ee      	b.n	15df0 <ble_att_svr_rx_exec_write+0x92>

00015e12 <ble_att_svr_rx_notify>:
{
   15e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15e14:	4607      	mov	r7, r0
   15e16:	460c      	mov	r4, r1
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   15e18:	2200      	movs	r2, #0
   15e1a:	2102      	movs	r1, #2
   15e1c:	4620      	mov	r0, r4
   15e1e:	f7fe fed1 	bl	14bc4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15e22:	b988      	cbnz	r0, 15e48 <ble_att_svr_rx_notify+0x36>
   15e24:	4605      	mov	r5, r0
    req = (struct ble_att_notify_req *)(*rxom)->om_data;
   15e26:	6820      	ldr	r0, [r4, #0]
   15e28:	6803      	ldr	r3, [r0, #0]
    handle = le16toh(req->banq_handle);
   15e2a:	881e      	ldrh	r6, [r3, #0]
    if (handle == 0) {
   15e2c:	b176      	cbz	r6, 15e4c <ble_att_svr_rx_notify+0x3a>
    os_mbuf_adj(*rxom, sizeof(*req));
   15e2e:	2102      	movs	r1, #2
   15e30:	f7f4 fb05 	bl	a43e <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 0);
   15e34:	2300      	movs	r3, #0
   15e36:	6822      	ldr	r2, [r4, #0]
   15e38:	4631      	mov	r1, r6
   15e3a:	4638      	mov	r0, r7
   15e3c:	f7f7 fd93 	bl	d966 <ble_gap_notify_rx_event>
    *rxom = NULL;
   15e40:	2300      	movs	r3, #0
   15e42:	6023      	str	r3, [r4, #0]
}
   15e44:	4628      	mov	r0, r5
   15e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_HS_ENOMEM;
   15e48:	2506      	movs	r5, #6
   15e4a:	e7fb      	b.n	15e44 <ble_att_svr_rx_notify+0x32>
        return BLE_HS_EBADDATA;
   15e4c:	250a      	movs	r5, #10
   15e4e:	e7f9      	b.n	15e44 <ble_att_svr_rx_notify+0x32>

00015e50 <ble_att_svr_rx_indicate>:
{
   15e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   15e52:	b085      	sub	sp, #20
   15e54:	4607      	mov	r7, r0
   15e56:	460c      	mov	r4, r1
    txom = NULL;
   15e58:	2200      	movs	r2, #0
   15e5a:	9203      	str	r2, [sp, #12]
    att_err = 0;
   15e5c:	f88d 200b 	strb.w	r2, [sp, #11]
    rc = ble_att_svr_pullup_req_base(rxom, sizeof(*req), NULL);
   15e60:	2102      	movs	r1, #2
   15e62:	4620      	mov	r0, r4
   15e64:	f7fe feae 	bl	14bc4 <ble_att_svr_pullup_req_base>
    if (rc != 0) {
   15e68:	b9d0      	cbnz	r0, 15ea0 <ble_att_svr_rx_indicate+0x50>
    req = (struct ble_att_indicate_req *)(*rxom)->om_data;
   15e6a:	6823      	ldr	r3, [r4, #0]
   15e6c:	681b      	ldr	r3, [r3, #0]
    handle = le16toh(req->baiq_handle);
   15e6e:	881d      	ldrh	r5, [r3, #0]
    if (handle == 0) {
   15e70:	b90d      	cbnz	r5, 15e76 <ble_att_svr_rx_indicate+0x26>
        rc = BLE_HS_EBADDATA;
   15e72:	260a      	movs	r6, #10
   15e74:	e016      	b.n	15ea4 <ble_att_svr_rx_indicate+0x54>
    rc = ble_att_svr_build_indicate_rsp(rxom, &txom, &att_err);
   15e76:	f10d 020b 	add.w	r2, sp, #11
   15e7a:	a903      	add	r1, sp, #12
   15e7c:	4620      	mov	r0, r4
   15e7e:	f7fe ff0c 	bl	14c9a <ble_att_svr_build_indicate_rsp>
    if (rc != 0) {
   15e82:	4606      	mov	r6, r0
   15e84:	b970      	cbnz	r0, 15ea4 <ble_att_svr_rx_indicate+0x54>
    os_mbuf_adj(*rxom, sizeof(*req));
   15e86:	2102      	movs	r1, #2
   15e88:	6820      	ldr	r0, [r4, #0]
   15e8a:	f7f4 fad8 	bl	a43e <os_mbuf_adj>
    ble_gap_notify_rx_event(conn_handle, handle, *rxom, 1);
   15e8e:	2301      	movs	r3, #1
   15e90:	6822      	ldr	r2, [r4, #0]
   15e92:	4629      	mov	r1, r5
   15e94:	4638      	mov	r0, r7
   15e96:	f7f7 fd66 	bl	d966 <ble_gap_notify_rx_event>
    *rxom = NULL;
   15e9a:	2300      	movs	r3, #0
   15e9c:	6023      	str	r3, [r4, #0]
   15e9e:	e001      	b.n	15ea4 <ble_att_svr_rx_indicate+0x54>
   15ea0:	4606      	mov	r6, r0
    handle = 0;
   15ea2:	2500      	movs	r5, #0
    rc = ble_att_svr_tx_rsp(conn_handle, rc, txom, BLE_ATT_OP_INDICATE_REQ,
   15ea4:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15ea8:	9501      	str	r5, [sp, #4]
   15eaa:	9300      	str	r3, [sp, #0]
   15eac:	231d      	movs	r3, #29
   15eae:	9a03      	ldr	r2, [sp, #12]
   15eb0:	4631      	mov	r1, r6
   15eb2:	4638      	mov	r0, r7
   15eb4:	f7ff fc41 	bl	1573a <ble_att_svr_tx_rsp>
}
   15eb8:	b005      	add	sp, #20
   15eba:	bdf0      	pop	{r4, r5, r6, r7, pc}

00015ebc <ble_att_svr_start>:

int
ble_att_svr_start(void)
{
   15ebc:	b510      	push	{r4, lr}
   15ebe:	b082      	sub	sp, #8
    int rc;

    ble_att_svr_free_start_mem();
   15ec0:	f7ff fa66 	bl	15390 <ble_att_svr_free_start_mem>

    if (ble_hs_max_attrs > 0) {
   15ec4:	4b0f      	ldr	r3, [pc, #60]	; (15f04 <ble_att_svr_start+0x48>)
   15ec6:	881c      	ldrh	r4, [r3, #0]
   15ec8:	b91c      	cbnz	r4, 15ed2 <ble_att_svr_start+0x16>
            rc = BLE_HS_EOS;
            goto err;
        }
    }

    return 0;
   15eca:	2400      	movs	r4, #0

err:
    ble_att_svr_free_start_mem();
    return rc;
}
   15ecc:	4620      	mov	r0, r4
   15ece:	b002      	add	sp, #8
   15ed0:	bd10      	pop	{r4, pc}
        ble_att_svr_entry_mem = malloc(
   15ed2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   15ed6:	0098      	lsls	r0, r3, #2
   15ed8:	f006 f87e 	bl	1bfd8 <malloc>
   15edc:	4b0a      	ldr	r3, [pc, #40]	; (15f08 <ble_att_svr_start+0x4c>)
   15ede:	6018      	str	r0, [r3, #0]
        if (ble_att_svr_entry_mem == NULL) {
   15ee0:	b160      	cbz	r0, 15efc <ble_att_svr_start+0x40>
        rc = os_mempool_init(&ble_att_svr_entry_pool, ble_hs_max_attrs,
   15ee2:	4b0a      	ldr	r3, [pc, #40]	; (15f0c <ble_att_svr_start+0x50>)
   15ee4:	9300      	str	r3, [sp, #0]
   15ee6:	4603      	mov	r3, r0
   15ee8:	2214      	movs	r2, #20
   15eea:	4621      	mov	r1, r4
   15eec:	4808      	ldr	r0, [pc, #32]	; (15f10 <ble_att_svr_start+0x54>)
   15eee:	f7f4 fd81 	bl	a9f4 <os_mempool_init>
        if (rc != 0) {
   15ef2:	b128      	cbz	r0, 15f00 <ble_att_svr_start+0x44>
            rc = BLE_HS_EOS;
   15ef4:	240b      	movs	r4, #11
    ble_att_svr_free_start_mem();
   15ef6:	f7ff fa4b 	bl	15390 <ble_att_svr_free_start_mem>
    return rc;
   15efa:	e7e7      	b.n	15ecc <ble_att_svr_start+0x10>
            rc = BLE_HS_ENOMEM;
   15efc:	2406      	movs	r4, #6
   15efe:	e7fa      	b.n	15ef6 <ble_att_svr_start+0x3a>
    return 0;
   15f00:	2400      	movs	r4, #0
   15f02:	e7e3      	b.n	15ecc <ble_att_svr_start+0x10>
   15f04:	2000732c 	.word	0x2000732c
   15f08:	200077a8 	.word	0x200077a8
   15f0c:	00029130 	.word	0x00029130
   15f10:	200077ac 	.word	0x200077ac

00015f14 <ble_att_svr_init>:

int
ble_att_svr_init(void)
{
   15f14:	b500      	push	{lr}
   15f16:	b083      	sub	sp, #12
    int rc;

    if (MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES) > 0) {
        rc = os_mempool_init(&ble_att_svr_prep_entry_pool,
   15f18:	4b0a      	ldr	r3, [pc, #40]	; (15f44 <ble_att_svr_init+0x30>)
   15f1a:	9300      	str	r3, [sp, #0]
   15f1c:	4b0a      	ldr	r3, [pc, #40]	; (15f48 <ble_att_svr_init+0x34>)
   15f1e:	220c      	movs	r2, #12
   15f20:	2140      	movs	r1, #64	; 0x40
   15f22:	480a      	ldr	r0, [pc, #40]	; (15f4c <ble_att_svr_init+0x38>)
   15f24:	f7f4 fd66 	bl	a9f4 <os_mempool_init>
                             MYNEWT_VAL(BLE_ATT_SVR_MAX_PREP_ENTRIES),
                             sizeof (struct ble_att_prep_entry),
                             ble_att_svr_prep_entry_mem,
                             "ble_att_svr_prep_entry_pool");
        if (rc != 0) {
   15f28:	b950      	cbnz	r0, 15f40 <ble_att_svr_init+0x2c>
            return BLE_HS_EOS;
        }
    }

    STAILQ_INIT(&ble_att_svr_list);
   15f2a:	4b09      	ldr	r3, [pc, #36]	; (15f50 <ble_att_svr_init+0x3c>)
   15f2c:	6018      	str	r0, [r3, #0]
   15f2e:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&ble_att_svr_hidden_list);
   15f30:	4b08      	ldr	r3, [pc, #32]	; (15f54 <ble_att_svr_init+0x40>)
   15f32:	6018      	str	r0, [r3, #0]
   15f34:	605b      	str	r3, [r3, #4]

    ble_att_svr_id = 0;
   15f36:	4b08      	ldr	r3, [pc, #32]	; (15f58 <ble_att_svr_init+0x44>)
   15f38:	8018      	strh	r0, [r3, #0]

    return 0;
}
   15f3a:	b003      	add	sp, #12
   15f3c:	f85d fb04 	ldr.w	pc, [sp], #4
            return BLE_HS_EOS;
   15f40:	200b      	movs	r0, #11
   15f42:	e7fa      	b.n	15f3a <ble_att_svr_init+0x26>
   15f44:	00029114 	.word	0x00029114
   15f48:	200077dc 	.word	0x200077dc
   15f4c:	20007adc 	.word	0x20007adc
   15f50:	200077d4 	.word	0x200077d4
   15f54:	200077c8 	.word	0x200077c8
   15f58:	200077d0 	.word	0x200077d0

00015f5c <ble_sm_alg_xor_128>:
static void
ble_sm_alg_xor_128(const uint8_t *p, const uint8_t *q, uint8_t *r)
{
    int i;

    for (i = 0; i < 16; i++) {
   15f5c:	2300      	movs	r3, #0
   15f5e:	2b0f      	cmp	r3, #15
   15f60:	dc09      	bgt.n	15f76 <ble_sm_alg_xor_128+0x1a>
{
   15f62:	b430      	push	{r4, r5}
        r[i] = p[i] ^ q[i];
   15f64:	5cc4      	ldrb	r4, [r0, r3]
   15f66:	5ccd      	ldrb	r5, [r1, r3]
   15f68:	406c      	eors	r4, r5
   15f6a:	54d4      	strb	r4, [r2, r3]
    for (i = 0; i < 16; i++) {
   15f6c:	3301      	adds	r3, #1
   15f6e:	2b0f      	cmp	r3, #15
   15f70:	ddf8      	ble.n	15f64 <ble_sm_alg_xor_128+0x8>
    }
}
   15f72:	bc30      	pop	{r4, r5}
   15f74:	4770      	bx	lr
   15f76:	4770      	bx	lr

00015f78 <ble_sm_alg_encrypt>:

static int
ble_sm_alg_encrypt(const uint8_t *key, const uint8_t *plaintext,
                   uint8_t *enc_data)
{
   15f78:	b530      	push	{r4, r5, lr}
   15f7a:	b0b1      	sub	sp, #196	; 0xc4
   15f7c:	460d      	mov	r5, r1
   15f7e:	4614      	mov	r4, r2
    struct tc_aes_key_sched_struct s;
    uint8_t tmp[16];

    swap_buf(tmp, key, 16);
   15f80:	2210      	movs	r2, #16
   15f82:	4601      	mov	r1, r0
   15f84:	4668      	mov	r0, sp
   15f86:	f005 fea8 	bl	1bcda <swap_buf>

    if (tc_aes128_set_encrypt_key(&s, tmp) == TC_CRYPTO_FAIL) {
   15f8a:	4669      	mov	r1, sp
   15f8c:	a804      	add	r0, sp, #16
   15f8e:	f002 fbd9 	bl	18744 <tc_aes128_set_encrypt_key>
   15f92:	b180      	cbz	r0, 15fb6 <ble_sm_alg_encrypt+0x3e>
        return BLE_HS_EUNKNOWN;
    }

    swap_buf(tmp, plaintext, 16);
   15f94:	2210      	movs	r2, #16
   15f96:	4629      	mov	r1, r5
   15f98:	4668      	mov	r0, sp
   15f9a:	f005 fe9e 	bl	1bcda <swap_buf>

    if (tc_aes_encrypt(enc_data, tmp, &s) == TC_CRYPTO_FAIL) {
   15f9e:	aa04      	add	r2, sp, #16
   15fa0:	4669      	mov	r1, sp
   15fa2:	4620      	mov	r0, r4
   15fa4:	f002 fc2c 	bl	18800 <tc_aes_encrypt>
   15fa8:	b140      	cbz	r0, 15fbc <ble_sm_alg_encrypt+0x44>
        return BLE_HS_EUNKNOWN;
    }

    swap_in_place(enc_data, 16);
   15faa:	2110      	movs	r1, #16
   15fac:	4620      	mov	r0, r4
   15fae:	f005 fe83 	bl	1bcb8 <swap_in_place>

    return 0;
   15fb2:	2000      	movs	r0, #0
   15fb4:	e000      	b.n	15fb8 <ble_sm_alg_encrypt+0x40>
        return BLE_HS_EUNKNOWN;
   15fb6:	2011      	movs	r0, #17
}
   15fb8:	b031      	add	sp, #196	; 0xc4
   15fba:	bd30      	pop	{r4, r5, pc}
        return BLE_HS_EUNKNOWN;
   15fbc:	2011      	movs	r0, #17
   15fbe:	e7fb      	b.n	15fb8 <ble_sm_alg_encrypt+0x40>

00015fc0 <ble_sm_alg_s1>:

int
ble_sm_alg_s1(const uint8_t *k, const uint8_t *r1, const uint8_t *r2,
              uint8_t *out)
{
   15fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15fc4:	4680      	mov	r8, r0
   15fc6:	460e      	mov	r6, r1
   15fc8:	4615      	mov	r5, r2
   15fca:	461c      	mov	r4, r3
     * r1' is concatenated with r2' to generate r' which is used as
     * the 128-bit input parameter plaintextData to security function e:
     *
     *    r' = r1' || r2'
     */
    memcpy(out, r2, 8);
   15fcc:	6812      	ldr	r2, [r2, #0]
   15fce:	686b      	ldr	r3, [r5, #4]
   15fd0:	6022      	str	r2, [r4, #0]
   15fd2:	6063      	str	r3, [r4, #4]
    memcpy(out + 8, r1, 8);
   15fd4:	680a      	ldr	r2, [r1, #0]
   15fd6:	684b      	ldr	r3, [r1, #4]
   15fd8:	60a2      	str	r2, [r4, #8]
   15fda:	60e3      	str	r3, [r4, #12]

    /* s1(k, r1 , r2) = e(k, r') */
    rc = ble_sm_alg_encrypt(k, out, out);
   15fdc:	4622      	mov	r2, r4
   15fde:	4621      	mov	r1, r4
   15fe0:	f7ff ffca 	bl	15f78 <ble_sm_alg_encrypt>
    if (rc != 0) {
   15fe4:	4607      	mov	r7, r0
   15fe6:	b110      	cbz	r0, 15fee <ble_sm_alg_s1+0x2e>
    BLE_HS_LOG(DEBUG, "\n    out=");
    ble_hs_log_flat_buf(out, 16);
    BLE_HS_LOG(DEBUG, "\n");

    return 0;
}
   15fe8:	4638      	mov	r0, r7
   15fea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ble_hs_log_flat_buf(k, 16);
   15fee:	2110      	movs	r1, #16
   15ff0:	4640      	mov	r0, r8
   15ff2:	f7fb fa9d 	bl	11530 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(r1, 16);
   15ff6:	2110      	movs	r1, #16
   15ff8:	4630      	mov	r0, r6
   15ffa:	f7fb fa99 	bl	11530 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(r2, 16);
   15ffe:	2110      	movs	r1, #16
   16000:	4628      	mov	r0, r5
   16002:	f7fb fa95 	bl	11530 <ble_hs_log_flat_buf>
    ble_hs_log_flat_buf(out, 16);
   16006:	2110      	movs	r1, #16
   16008:	4620      	mov	r0, r4
   1600a:	f7fb fa91 	bl	11530 <ble_hs_log_flat_buf>
    return 0;
   1600e:	e7eb      	b.n	15fe8 <ble_sm_alg_s1+0x28>

00016010 <ble_sm_alg_c1>:
ble_sm_alg_c1(const uint8_t *k, const uint8_t *r,
              const uint8_t *preq, const uint8_t *pres,
              uint8_t iat, uint8_t rat,
              const uint8_t *ia, const uint8_t *ra,
              uint8_t *out_enc_data)
{
   16010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16014:	b089      	sub	sp, #36	; 0x24
   16016:	4681      	mov	r9, r0
   16018:	4688      	mov	r8, r1
   1601a:	4615      	mov	r5, r2
   1601c:	461c      	mov	r4, r3
   1601e:	9e12      	ldr	r6, [sp, #72]	; 0x48
   16020:	9f13      	ldr	r7, [sp, #76]	; 0x4c
    uint8_t p1[16], p2[16];
    int rc;

    BLE_HS_LOG(DEBUG, "ble_sm_alg_c1()\n    k=");
    ble_hs_log_flat_buf(k, 16);
   16022:	2110      	movs	r1, #16
   16024:	f7fb fa84 	bl	11530 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    r=");
    ble_hs_log_flat_buf(r, 16);
   16028:	2110      	movs	r1, #16
   1602a:	4640      	mov	r0, r8
   1602c:	f7fb fa80 	bl	11530 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    iat=%d rat=%d", iat, rat);
    BLE_HS_LOG(DEBUG, "\n    ia=");
    ble_hs_log_flat_buf(ia, 6);
   16030:	2106      	movs	r1, #6
   16032:	4630      	mov	r0, r6
   16034:	f7fb fa7c 	bl	11530 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    ra=");
    ble_hs_log_flat_buf(ra, 6);
   16038:	2106      	movs	r1, #6
   1603a:	4638      	mov	r0, r7
   1603c:	f7fb fa78 	bl	11530 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    preq=");
    ble_hs_log_flat_buf(preq, 7);
   16040:	2107      	movs	r1, #7
   16042:	4628      	mov	r0, r5
   16044:	f7fb fa74 	bl	11530 <ble_hs_log_flat_buf>
    BLE_HS_LOG(DEBUG, "\n    pres=");
    ble_hs_log_flat_buf(pres, 7);
   16048:	2107      	movs	r1, #7
   1604a:	4620      	mov	r0, r4
   1604c:	f7fb fa70 	bl	11530 <ble_hs_log_flat_buf>

    /* pres, preq, rat and iat are concatenated to generate p1 */
    p1[0] = iat;
   16050:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   16054:	f88d 3010 	strb.w	r3, [sp, #16]
    p1[1] = rat;
   16058:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   1605c:	f88d 3011 	strb.w	r3, [sp, #17]
    memcpy(p1 + 2, preq, 7);
   16060:	682b      	ldr	r3, [r5, #0]
   16062:	f8cd 3012 	str.w	r3, [sp, #18]
   16066:	88aa      	ldrh	r2, [r5, #4]
   16068:	79ab      	ldrb	r3, [r5, #6]
   1606a:	f8ad 2016 	strh.w	r2, [sp, #22]
   1606e:	f88d 3018 	strb.w	r3, [sp, #24]
    memcpy(p1 + 9, pres, 7);
   16072:	6823      	ldr	r3, [r4, #0]
   16074:	f8cd 3019 	str.w	r3, [sp, #25]
   16078:	88a2      	ldrh	r2, [r4, #4]
   1607a:	79a3      	ldrb	r3, [r4, #6]
   1607c:	f8ad 201d 	strh.w	r2, [sp, #29]
   16080:	f88d 301f 	strb.w	r3, [sp, #31]

    BLE_HS_LOG(DEBUG, "\n    p1=");
    ble_hs_log_flat_buf(p1, sizeof p1);
   16084:	2110      	movs	r1, #16
   16086:	eb0d 0001 	add.w	r0, sp, r1
   1608a:	f7fb fa51 	bl	11530 <ble_hs_log_flat_buf>

    /* c1 = e(k, e(k, r XOR p1) XOR p2) */

    /* Using out_enc_data as temporary output buffer */
    ble_sm_alg_xor_128(r, p1, out_enc_data);
   1608e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16090:	a904      	add	r1, sp, #16
   16092:	4640      	mov	r0, r8
   16094:	f7ff ff62 	bl	15f5c <ble_sm_alg_xor_128>

    rc = ble_sm_alg_encrypt(k, out_enc_data, out_enc_data);
   16098:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1609a:	4611      	mov	r1, r2
   1609c:	4648      	mov	r0, r9
   1609e:	f7ff ff6b 	bl	15f78 <ble_sm_alg_encrypt>
    if (rc != 0) {
   160a2:	bb08      	cbnz	r0, 160e8 <ble_sm_alg_c1+0xd8>
        rc = BLE_HS_EUNKNOWN;
        goto done;
    }

    /* ra is concatenated with ia and padding to generate p2 */
    memcpy(p2, ra, 6);
   160a4:	6838      	ldr	r0, [r7, #0]
   160a6:	9000      	str	r0, [sp, #0]
   160a8:	88bb      	ldrh	r3, [r7, #4]
   160aa:	f8ad 3004 	strh.w	r3, [sp, #4]
    memcpy(p2 + 6, ia, 6);
   160ae:	6833      	ldr	r3, [r6, #0]
   160b0:	f8cd 3006 	str.w	r3, [sp, #6]
   160b4:	88b3      	ldrh	r3, [r6, #4]
   160b6:	f8ad 300a 	strh.w	r3, [sp, #10]
    memset(p2 + 12, 0, 4);
   160ba:	2300      	movs	r3, #0
   160bc:	9303      	str	r3, [sp, #12]

    BLE_HS_LOG(DEBUG, "\n    p2=");
    ble_hs_log_flat_buf(p2, sizeof p2);
   160be:	2110      	movs	r1, #16
   160c0:	4668      	mov	r0, sp
   160c2:	f7fb fa35 	bl	11530 <ble_hs_log_flat_buf>

    ble_sm_alg_xor_128(out_enc_data, p2, out_enc_data);
   160c6:	9a14      	ldr	r2, [sp, #80]	; 0x50
   160c8:	4669      	mov	r1, sp
   160ca:	4610      	mov	r0, r2
   160cc:	f7ff ff46 	bl	15f5c <ble_sm_alg_xor_128>

    rc = ble_sm_alg_encrypt(k, out_enc_data, out_enc_data);
   160d0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   160d2:	4611      	mov	r1, r2
   160d4:	4648      	mov	r0, r9
   160d6:	f7ff ff4f 	bl	15f78 <ble_sm_alg_encrypt>
    if (rc != 0) {
   160da:	4604      	mov	r4, r0
   160dc:	b948      	cbnz	r0, 160f2 <ble_sm_alg_c1+0xe2>
        rc = BLE_HS_EUNKNOWN;
        goto done;
    }

    BLE_HS_LOG(DEBUG, "\n    out_enc_data=");
    ble_hs_log_flat_buf(out_enc_data, 16);
   160de:	2110      	movs	r1, #16
   160e0:	9814      	ldr	r0, [sp, #80]	; 0x50
   160e2:	f7fb fa25 	bl	11530 <ble_hs_log_flat_buf>
   160e6:	e000      	b.n	160ea <ble_sm_alg_c1+0xda>
        rc = BLE_HS_EUNKNOWN;
   160e8:	2411      	movs	r4, #17
    rc = 0;

done:
    BLE_HS_LOG(DEBUG, "\n    rc=%d\n", rc);
    return rc;
}
   160ea:	4620      	mov	r0, r4
   160ec:	b009      	add	sp, #36	; 0x24
   160ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        rc = BLE_HS_EUNKNOWN;
   160f2:	2411      	movs	r4, #17
    return rc;
   160f4:	e7f9      	b.n	160ea <ble_sm_alg_c1+0xda>
	...

000160f8 <ble_svc_dis_access>:
    (MYNEWT_VAL(BLE_SVC_DIS_MANUFACTURER_NAME_READ_PERM) >= 0) || \
    (MYNEWT_VAL(BLE_SVC_DIS_SYSTEM_ID_READ_PERM) >= 0)
static int
ble_svc_dis_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   160f8:	b538      	push	{r3, r4, r5, lr}
   160fa:	4615      	mov	r5, r2
    uint16_t uuid    = ble_uuid_u16(ctxt->chr->uuid);
   160fc:	6893      	ldr	r3, [r2, #8]
   160fe:	6818      	ldr	r0, [r3, #0]
   16100:	f7fe f9d0 	bl	144a4 <ble_uuid_u16>
    const char *info = NULL;

    switch(uuid) {
   16104:	f642 2324 	movw	r3, #10788	; 0x2a24
   16108:	4298      	cmp	r0, r3
   1610a:	d008      	beq.n	1611e <ble_svc_dis_access+0x26>
   1610c:	f642 2326 	movw	r3, #10790	; 0x2a26
   16110:	4298      	cmp	r0, r3
   16112:	d114      	bne.n	1613e <ble_svc_dis_access+0x46>
#endif
        break;
#endif
#if (MYNEWT_VAL(BLE_SVC_DIS_FIRMWARE_REVISION_READ_PERM) >= 0)
    case BLE_SVC_DIS_CHR_UUID16_FIRMWARE_REVISION:
        info = ble_svc_dis_data.firmware_revision;
   16114:	4b10      	ldr	r3, [pc, #64]	; (16158 <ble_svc_dis_access+0x60>)
   16116:	689c      	ldr	r4, [r3, #8]
#ifdef MYNEWT_VAL_BLE_SVC_DIS_FIRMWARE_REVISION_DEFAULT
        if (info == NULL) {
   16118:	b91c      	cbnz	r4, 16122 <ble_svc_dis_access+0x2a>
    if (info != NULL) {
       int rc = os_mbuf_append(ctxt->om, info, strlen(info));
       return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
    }

    return 0;
   1611a:	2300      	movs	r3, #0
   1611c:	e01a      	b.n	16154 <ble_svc_dis_access+0x5c>
        info = ble_svc_dis_data.model_number;
   1611e:	4b0e      	ldr	r3, [pc, #56]	; (16158 <ble_svc_dis_access+0x60>)
   16120:	681c      	ldr	r4, [r3, #0]
    if (info != NULL) {
   16122:	b1b4      	cbz	r4, 16152 <ble_svc_dis_access+0x5a>
       int rc = os_mbuf_append(ctxt->om, info, strlen(info));
   16124:	686d      	ldr	r5, [r5, #4]
   16126:	4620      	mov	r0, r4
   16128:	f7f5 fb9e 	bl	b868 <strlen>
   1612c:	b282      	uxth	r2, r0
   1612e:	4621      	mov	r1, r4
   16130:	4628      	mov	r0, r5
   16132:	f7f4 f867 	bl	a204 <os_mbuf_append>
       return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   16136:	4603      	mov	r3, r0
   16138:	b160      	cbz	r0, 16154 <ble_svc_dis_access+0x5c>
   1613a:	2311      	movs	r3, #17
   1613c:	e00a      	b.n	16154 <ble_svc_dis_access+0x5c>
        assert(0);
   1613e:	f7f2 f83f 	bl	81c0 <hal_debugger_connected>
   16142:	b100      	cbz	r0, 16146 <ble_svc_dis_access+0x4e>
   16144:	be01      	bkpt	0x0001
   16146:	2300      	movs	r3, #0
   16148:	461a      	mov	r2, r3
   1614a:	4619      	mov	r1, r3
   1614c:	4618      	mov	r0, r3
   1614e:	f7f3 fbcd 	bl	98ec <__assert_func>
    return 0;
   16152:	2300      	movs	r3, #0
}
   16154:	4618      	mov	r0, r3
   16156:	bd38      	pop	{r3, r4, r5, pc}
   16158:	200001f8 	.word	0x200001f8

0001615c <ble_svc_dis_firmware_revision_set>:
}

int
ble_svc_dis_firmware_revision_set(const char *value)
{
    ble_svc_dis_data.firmware_revision = value;
   1615c:	4b01      	ldr	r3, [pc, #4]	; (16164 <ble_svc_dis_firmware_revision_set+0x8>)
   1615e:	6098      	str	r0, [r3, #8]
    return 0;
}
   16160:	2000      	movs	r0, #0
   16162:	4770      	bx	lr
   16164:	200001f8 	.word	0x200001f8

00016168 <ble_svc_dis_init>:
/**
 * Initialize the DIS package.
 */
void
ble_svc_dis_init(void)
{
   16168:	b510      	push	{r4, lr}
   1616a:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1616c:	4b18      	ldr	r3, [pc, #96]	; (161d0 <ble_svc_dis_init+0x68>)
   1616e:	781b      	ldrb	r3, [r3, #0]
   16170:	b14b      	cbz	r3, 16186 <ble_svc_dis_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_dis_defs);
   16172:	4818      	ldr	r0, [pc, #96]	; (161d4 <ble_svc_dis_init+0x6c>)
   16174:	f7f9 fbca 	bl	f90c <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16178:	b978      	cbnz	r0, 1619a <ble_svc_dis_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_dis_defs);
   1617a:	4816      	ldr	r0, [pc, #88]	; (161d4 <ble_svc_dis_init+0x6c>)
   1617c:	f7f9 fba2 	bl	f8c4 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16180:	b9c0      	cbnz	r0, 161b4 <ble_svc_dis_init+0x4c>
}
   16182:	b002      	add	sp, #8
   16184:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16186:	f7f2 f81b 	bl	81c0 <hal_debugger_connected>
   1618a:	b100      	cbz	r0, 1618e <ble_svc_dis_init+0x26>
   1618c:	be01      	bkpt	0x0001
   1618e:	2300      	movs	r3, #0
   16190:	461a      	mov	r2, r3
   16192:	4619      	mov	r1, r3
   16194:	4618      	mov	r0, r3
   16196:	f7f3 fba9 	bl	98ec <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1619a:	f7f2 f811 	bl	81c0 <hal_debugger_connected>
   1619e:	b100      	cbz	r0, 161a2 <ble_svc_dis_init+0x3a>
   161a0:	be01      	bkpt	0x0001
   161a2:	2000      	movs	r0, #0
   161a4:	9000      	str	r0, [sp, #0]
   161a6:	4b0c      	ldr	r3, [pc, #48]	; (161d8 <ble_svc_dis_init+0x70>)
   161a8:	681c      	ldr	r4, [r3, #0]
   161aa:	4603      	mov	r3, r0
   161ac:	4602      	mov	r2, r0
   161ae:	4601      	mov	r1, r0
   161b0:	47a0      	blx	r4
   161b2:	e7e2      	b.n	1617a <ble_svc_dis_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   161b4:	f7f2 f804 	bl	81c0 <hal_debugger_connected>
   161b8:	b100      	cbz	r0, 161bc <ble_svc_dis_init+0x54>
   161ba:	be01      	bkpt	0x0001
   161bc:	2000      	movs	r0, #0
   161be:	9000      	str	r0, [sp, #0]
   161c0:	4b05      	ldr	r3, [pc, #20]	; (161d8 <ble_svc_dis_init+0x70>)
   161c2:	681c      	ldr	r4, [r3, #0]
   161c4:	4603      	mov	r3, r0
   161c6:	4602      	mov	r2, r0
   161c8:	4601      	mov	r1, r0
   161ca:	47a0      	blx	r4
}
   161cc:	e7d9      	b.n	16182 <ble_svc_dis_init+0x1a>
   161ce:	bf00      	nop
   161d0:	20000506 	.word	0x20000506
   161d4:	00029148 	.word	0x00029148
   161d8:	200000ec 	.word	0x200000ec

000161dc <ble_svc_gap_device_name_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_device_name_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   161dc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_DEVICE_NAME_WRITE_PERM) < 0
    assert(0);
   161de:	f7f1 ffef 	bl	81c0 <hal_debugger_connected>
   161e2:	b100      	cbz	r0, 161e6 <ble_svc_gap_device_name_write_access+0xa>
   161e4:	be01      	bkpt	0x0001
   161e6:	2300      	movs	r3, #0
   161e8:	461a      	mov	r2, r3
   161ea:	4619      	mov	r1, r3
   161ec:	4618      	mov	r0, r3
   161ee:	f7f3 fb7d 	bl	98ec <__assert_func>

000161f2 <ble_svc_gap_appearance_write_access>:
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
}

static int
ble_svc_gap_appearance_write_access(struct ble_gatt_access_ctxt *ctxt)
{
   161f2:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BLE_SVC_GAP_APPEARANCE_WRITE_PERM) < 0
    assert(0);
   161f4:	f7f1 ffe4 	bl	81c0 <hal_debugger_connected>
   161f8:	b100      	cbz	r0, 161fc <ble_svc_gap_appearance_write_access+0xa>
   161fa:	be01      	bkpt	0x0001
   161fc:	2300      	movs	r3, #0
   161fe:	461a      	mov	r2, r3
   16200:	4619      	mov	r1, r3
   16202:	4618      	mov	r0, r3
   16204:	f7f3 fb72 	bl	98ec <__assert_func>

00016208 <ble_svc_gap_device_name_read_access>:
{
   16208:	b538      	push	{r3, r4, r5, lr}
    rc = os_mbuf_append(ctxt->om, ble_svc_gap_name, strlen(ble_svc_gap_name));
   1620a:	6845      	ldr	r5, [r0, #4]
   1620c:	4c07      	ldr	r4, [pc, #28]	; (1622c <ble_svc_gap_device_name_read_access+0x24>)
   1620e:	4620      	mov	r0, r4
   16210:	f7f5 fb2a 	bl	b868 <strlen>
   16214:	b282      	uxth	r2, r0
   16216:	4621      	mov	r1, r4
   16218:	4628      	mov	r0, r5
   1621a:	f7f3 fff3 	bl	a204 <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   1621e:	4603      	mov	r3, r0
   16220:	b908      	cbnz	r0, 16226 <ble_svc_gap_device_name_read_access+0x1e>
}
   16222:	4618      	mov	r0, r3
   16224:	bd38      	pop	{r3, r4, r5, pc}
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   16226:	2311      	movs	r3, #17
   16228:	e7fb      	b.n	16222 <ble_svc_gap_device_name_read_access+0x1a>
   1622a:	bf00      	nop
   1622c:	20000268 	.word	0x20000268

00016230 <ble_svc_gap_appearance_read_access>:
{
   16230:	b500      	push	{lr}
   16232:	b083      	sub	sp, #12
    uint16_t appearance = htole16(ble_svc_gap_appearance);
   16234:	4b08      	ldr	r3, [pc, #32]	; (16258 <ble_svc_gap_appearance_read_access+0x28>)
   16236:	881b      	ldrh	r3, [r3, #0]
   16238:	a902      	add	r1, sp, #8
   1623a:	f821 3d02 	strh.w	r3, [r1, #-2]!
    rc = os_mbuf_append(ctxt->om, &appearance, sizeof(appearance));
   1623e:	2202      	movs	r2, #2
   16240:	6840      	ldr	r0, [r0, #4]
   16242:	f7f3 ffdf 	bl	a204 <os_mbuf_append>
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   16246:	4603      	mov	r3, r0
   16248:	b918      	cbnz	r0, 16252 <ble_svc_gap_appearance_read_access+0x22>
}
   1624a:	4618      	mov	r0, r3
   1624c:	b003      	add	sp, #12
   1624e:	f85d fb04 	ldr.w	pc, [sp], #4
    return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   16252:	2311      	movs	r3, #17
   16254:	e7f9      	b.n	1624a <ble_svc_gap_appearance_read_access+0x1a>
   16256:	bf00      	nop
   16258:	20007af8 	.word	0x20007af8

0001625c <ble_svc_gap_access>:
}

static int
ble_svc_gap_access(uint16_t conn_handle, uint16_t attr_handle,
                   struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   1625c:	b510      	push	{r4, lr}
   1625e:	4614      	mov	r4, r2
        htole16(MYNEWT_VAL(BLE_SVC_GAP_PPCP_SUPERVISION_TMO))
    };
#endif
    int rc;

    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   16260:	6893      	ldr	r3, [r2, #8]
   16262:	6818      	ldr	r0, [r3, #0]
   16264:	f7fe f91e 	bl	144a4 <ble_uuid_u16>
    assert(uuid16 != 0);
   16268:	b1a0      	cbz	r0, 16294 <ble_svc_gap_access+0x38>

    switch (uuid16) {
   1626a:	f5b0 5f28 	cmp.w	r0, #10752	; 0x2a00
   1626e:	d01b      	beq.n	162a8 <ble_svc_gap_access+0x4c>
   16270:	f642 2201 	movw	r2, #10753	; 0x2a01
   16274:	4290      	cmp	r0, r2
   16276:	d133      	bne.n	162e0 <ble_svc_gap_access+0x84>
            rc = BLE_ATT_ERR_UNLIKELY;
        }
        return rc;

    case BLE_SVC_GAP_CHR_UUID16_APPEARANCE:
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   16278:	7823      	ldrb	r3, [r4, #0]
   1627a:	b353      	cbz	r3, 162d2 <ble_svc_gap_access+0x76>
            rc = ble_svc_gap_appearance_read_access(ctxt);
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   1627c:	2b01      	cmp	r3, #1
   1627e:	d02c      	beq.n	162da <ble_svc_gap_access+0x7e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
        } else {
            assert(0);
   16280:	f7f1 ff9e 	bl	81c0 <hal_debugger_connected>
   16284:	b100      	cbz	r0, 16288 <ble_svc_gap_access+0x2c>
   16286:	be01      	bkpt	0x0001
   16288:	2300      	movs	r3, #0
   1628a:	461a      	mov	r2, r3
   1628c:	4619      	mov	r1, r3
   1628e:	4618      	mov	r0, r3
   16290:	f7f3 fb2c 	bl	98ec <__assert_func>
    assert(uuid16 != 0);
   16294:	f7f1 ff94 	bl	81c0 <hal_debugger_connected>
   16298:	b100      	cbz	r0, 1629c <ble_svc_gap_access+0x40>
   1629a:	be01      	bkpt	0x0001
   1629c:	2300      	movs	r3, #0
   1629e:	461a      	mov	r2, r3
   162a0:	4619      	mov	r1, r3
   162a2:	4618      	mov	r0, r3
   162a4:	f7f3 fb22 	bl	98ec <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   162a8:	7823      	ldrb	r3, [r4, #0]
   162aa:	b15b      	cbz	r3, 162c4 <ble_svc_gap_access+0x68>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   162ac:	2b01      	cmp	r3, #1
   162ae:	d00d      	beq.n	162cc <ble_svc_gap_access+0x70>
            assert(0);
   162b0:	f7f1 ff86 	bl	81c0 <hal_debugger_connected>
   162b4:	b100      	cbz	r0, 162b8 <ble_svc_gap_access+0x5c>
   162b6:	be01      	bkpt	0x0001
   162b8:	2300      	movs	r3, #0
   162ba:	461a      	mov	r2, r3
   162bc:	4619      	mov	r1, r3
   162be:	4618      	mov	r0, r3
   162c0:	f7f3 fb14 	bl	98ec <__assert_func>
            rc = ble_svc_gap_device_name_read_access(ctxt);
   162c4:	4620      	mov	r0, r4
   162c6:	f7ff ff9f 	bl	16208 <ble_svc_gap_device_name_read_access>

    default:
        assert(0);
        return BLE_ATT_ERR_UNLIKELY;
    }
}
   162ca:	bd10      	pop	{r4, pc}
            rc = ble_svc_gap_device_name_write_access(ctxt);
   162cc:	4620      	mov	r0, r4
   162ce:	f7ff ff85 	bl	161dc <ble_svc_gap_device_name_write_access>
            rc = ble_svc_gap_appearance_read_access(ctxt);
   162d2:	4620      	mov	r0, r4
   162d4:	f7ff ffac 	bl	16230 <ble_svc_gap_appearance_read_access>
        return rc;
   162d8:	e7f7      	b.n	162ca <ble_svc_gap_access+0x6e>
            rc = ble_svc_gap_appearance_write_access(ctxt);
   162da:	4620      	mov	r0, r4
   162dc:	f7ff ff89 	bl	161f2 <ble_svc_gap_appearance_write_access>
        assert(0);
   162e0:	f7f1 ff6e 	bl	81c0 <hal_debugger_connected>
   162e4:	b100      	cbz	r0, 162e8 <ble_svc_gap_access+0x8c>
   162e6:	be01      	bkpt	0x0001
   162e8:	2300      	movs	r3, #0
   162ea:	461a      	mov	r2, r3
   162ec:	4619      	mov	r1, r3
   162ee:	4618      	mov	r0, r3
   162f0:	f7f3 fafc 	bl	98ec <__assert_func>

000162f4 <ble_svc_gap_device_name>:

const char *
ble_svc_gap_device_name(void)
{
    return ble_svc_gap_name;
}
   162f4:	4800      	ldr	r0, [pc, #0]	; (162f8 <ble_svc_gap_device_name+0x4>)
   162f6:	4770      	bx	lr
   162f8:	20000268 	.word	0x20000268

000162fc <ble_svc_gap_device_name_set>:

int
ble_svc_gap_device_name_set(const char *name)
{
   162fc:	b570      	push	{r4, r5, r6, lr}
   162fe:	4606      	mov	r6, r0
    int len;

    len = strlen(name);
   16300:	f7f5 fab2 	bl	b868 <strlen>
    if (len > BLE_SVC_GAP_NAME_MAX_LEN) {
   16304:	281f      	cmp	r0, #31
   16306:	dc09      	bgt.n	1631c <ble_svc_gap_device_name_set+0x20>
   16308:	4604      	mov	r4, r0
        return BLE_HS_EINVAL;
    }

    memcpy(ble_svc_gap_name, name, len);
   1630a:	4d05      	ldr	r5, [pc, #20]	; (16320 <ble_svc_gap_device_name_set+0x24>)
   1630c:	4602      	mov	r2, r0
   1630e:	4631      	mov	r1, r6
   16310:	4628      	mov	r0, r5
   16312:	f7f5 fa4b 	bl	b7ac <memcpy>
    ble_svc_gap_name[len] = '\0';
   16316:	2000      	movs	r0, #0
   16318:	5528      	strb	r0, [r5, r4]

    return 0;
}
   1631a:	bd70      	pop	{r4, r5, r6, pc}
        return BLE_HS_EINVAL;
   1631c:	2003      	movs	r0, #3
   1631e:	e7fc      	b.n	1631a <ble_svc_gap_device_name_set+0x1e>
   16320:	20000268 	.word	0x20000268

00016324 <ble_svc_gap_init>:
    ble_svc_gap_chr_changed_cb_fn = cb;
}

void
ble_svc_gap_init(void)
{
   16324:	b510      	push	{r4, lr}
   16326:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16328:	4b18      	ldr	r3, [pc, #96]	; (1638c <ble_svc_gap_init+0x68>)
   1632a:	781b      	ldrb	r3, [r3, #0]
   1632c:	b14b      	cbz	r3, 16342 <ble_svc_gap_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_gap_defs);
   1632e:	4818      	ldr	r0, [pc, #96]	; (16390 <ble_svc_gap_init+0x6c>)
   16330:	f7f9 faec 	bl	f90c <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16334:	b978      	cbnz	r0, 16356 <ble_svc_gap_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gap_defs);
   16336:	4816      	ldr	r0, [pc, #88]	; (16390 <ble_svc_gap_init+0x6c>)
   16338:	f7f9 fac4 	bl	f8c4 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1633c:	b9c0      	cbnz	r0, 16370 <ble_svc_gap_init+0x4c>
}
   1633e:	b002      	add	sp, #8
   16340:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16342:	f7f1 ff3d 	bl	81c0 <hal_debugger_connected>
   16346:	b100      	cbz	r0, 1634a <ble_svc_gap_init+0x26>
   16348:	be01      	bkpt	0x0001
   1634a:	2300      	movs	r3, #0
   1634c:	461a      	mov	r2, r3
   1634e:	4619      	mov	r1, r3
   16350:	4618      	mov	r0, r3
   16352:	f7f3 facb 	bl	98ec <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16356:	f7f1 ff33 	bl	81c0 <hal_debugger_connected>
   1635a:	b100      	cbz	r0, 1635e <ble_svc_gap_init+0x3a>
   1635c:	be01      	bkpt	0x0001
   1635e:	2000      	movs	r0, #0
   16360:	9000      	str	r0, [sp, #0]
   16362:	4b0c      	ldr	r3, [pc, #48]	; (16394 <ble_svc_gap_init+0x70>)
   16364:	681c      	ldr	r4, [r3, #0]
   16366:	4603      	mov	r3, r0
   16368:	4602      	mov	r2, r0
   1636a:	4601      	mov	r1, r0
   1636c:	47a0      	blx	r4
   1636e:	e7e2      	b.n	16336 <ble_svc_gap_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16370:	f7f1 ff26 	bl	81c0 <hal_debugger_connected>
   16374:	b100      	cbz	r0, 16378 <ble_svc_gap_init+0x54>
   16376:	be01      	bkpt	0x0001
   16378:	2000      	movs	r0, #0
   1637a:	9000      	str	r0, [sp, #0]
   1637c:	4b05      	ldr	r3, [pc, #20]	; (16394 <ble_svc_gap_init+0x70>)
   1637e:	681c      	ldr	r4, [r3, #0]
   16380:	4603      	mov	r3, r0
   16382:	4602      	mov	r2, r0
   16384:	4601      	mov	r1, r0
   16386:	47a0      	blx	r4
}
   16388:	e7d9      	b.n	1633e <ble_svc_gap_init+0x1a>
   1638a:	bf00      	nop
   1638c:	20000506 	.word	0x20000506
   16390:	00029180 	.word	0x00029180
   16394:	200000ec 	.word	0x200000ec

00016398 <ble_hs_util_load_rand_addr>:
#include "controller/ble_hw.h"
#endif

static int
ble_hs_util_load_rand_addr(ble_addr_t *addr)
{
   16398:	b508      	push	{r3, lr}
     * automically restore a random address.
     */
#if MYNEWT_VAL(BLE_CONTROLLER)
    int rc;

    rc = ble_hw_get_static_addr(addr);
   1639a:	f00f fa0d 	bl	257b8 <ble_hw_get_static_addr>
    if (rc == 0) {
   1639e:	4603      	mov	r3, r0
   163a0:	b908      	cbnz	r0, 163a6 <ble_hs_util_load_rand_addr+0xe>
        return 0;
    }
#endif

    return BLE_HS_ENOADDR;
}
   163a2:	4618      	mov	r0, r3
   163a4:	bd08      	pop	{r3, pc}
    return BLE_HS_ENOADDR;
   163a6:	2315      	movs	r3, #21
   163a8:	e7fb      	b.n	163a2 <ble_hs_util_load_rand_addr+0xa>

000163aa <ble_hs_util_ensure_rand_addr>:

static int
ble_hs_util_ensure_rand_addr(void)
{
   163aa:	b500      	push	{lr}
   163ac:	b083      	sub	sp, #12
    ble_addr_t addr;
    int rc;

    /* If we already have a random address, then we are done. */
    rc = ble_hs_id_copy_addr(BLE_ADDR_RANDOM, NULL, NULL);
   163ae:	2200      	movs	r2, #0
   163b0:	4611      	mov	r1, r2
   163b2:	2001      	movs	r0, #1
   163b4:	f7fb f851 	bl	1145a <ble_hs_id_copy_addr>
    if (rc == 0) {
   163b8:	4603      	mov	r3, r0
   163ba:	b918      	cbnz	r0, 163c4 <ble_hs_util_ensure_rand_addr+0x1a>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   163bc:	4618      	mov	r0, r3
   163be:	b003      	add	sp, #12
   163c0:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = ble_hs_util_load_rand_addr(&addr);
   163c4:	4668      	mov	r0, sp
   163c6:	f7ff ffe7 	bl	16398 <ble_hs_util_load_rand_addr>
    if (rc != 0) {
   163ca:	4603      	mov	r3, r0
   163cc:	2800      	cmp	r0, #0
   163ce:	d1f5      	bne.n	163bc <ble_hs_util_ensure_rand_addr+0x12>
    rc = ble_hs_id_set_rnd(addr.val);
   163d0:	f10d 0001 	add.w	r0, sp, #1
   163d4:	f7fa ffbc 	bl	11350 <ble_hs_id_set_rnd>
   163d8:	4603      	mov	r3, r0
   163da:	e7ef      	b.n	163bc <ble_hs_util_ensure_rand_addr+0x12>

000163dc <ble_hs_util_ensure_addr>:

int
ble_hs_util_ensure_addr(int prefer_random)
{
   163dc:	b508      	push	{r3, lr}
    int rc;

    if (prefer_random) {
   163de:	b150      	cbz	r0, 163f6 <ble_hs_util_ensure_addr+0x1a>
        /* Try to load a random address. */
        rc = ble_hs_util_ensure_rand_addr();
   163e0:	f7ff ffe3 	bl	163aa <ble_hs_util_ensure_rand_addr>
        if (rc == BLE_HS_ENOADDR) {
   163e4:	2815      	cmp	r0, #21
   163e6:	d000      	beq.n	163ea <ble_hs_util_ensure_addr+0xe>
            rc = ble_hs_util_ensure_rand_addr();
        }
    }

    return rc;
}
   163e8:	bd08      	pop	{r3, pc}
            rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   163ea:	2200      	movs	r2, #0
   163ec:	4611      	mov	r1, r2
   163ee:	4610      	mov	r0, r2
   163f0:	f7fb f833 	bl	1145a <ble_hs_id_copy_addr>
   163f4:	e7f8      	b.n	163e8 <ble_hs_util_ensure_addr+0xc>
        rc = ble_hs_id_copy_addr(BLE_ADDR_PUBLIC, NULL, NULL);
   163f6:	2200      	movs	r2, #0
   163f8:	4611      	mov	r1, r2
   163fa:	4610      	mov	r0, r2
   163fc:	f7fb f82d 	bl	1145a <ble_hs_id_copy_addr>
        if (rc == BLE_HS_ENOADDR) {
   16400:	2815      	cmp	r0, #21
   16402:	d1f1      	bne.n	163e8 <ble_hs_util_ensure_addr+0xc>
            rc = ble_hs_util_ensure_rand_addr();
   16404:	f7ff ffd1 	bl	163aa <ble_hs_util_ensure_rand_addr>
    return rc;
   16408:	e7ee      	b.n	163e8 <ble_hs_util_ensure_addr+0xc>
	...

0001640c <ble_hci_trans_cfg_hs>:
void
ble_hci_trans_cfg_hs(ble_hci_trans_rx_cmd_fn *cmd_cb,
                     void *cmd_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb,
                     void *acl_arg)
{
   1640c:	b410      	push	{r4}
    ble_hci_ram_rx_cmd_hs_cb = cmd_cb;
   1640e:	4c05      	ldr	r4, [pc, #20]	; (16424 <ble_hci_trans_cfg_hs+0x18>)
   16410:	6020      	str	r0, [r4, #0]
    ble_hci_ram_rx_cmd_hs_arg = cmd_arg;
   16412:	4805      	ldr	r0, [pc, #20]	; (16428 <ble_hci_trans_cfg_hs+0x1c>)
   16414:	6001      	str	r1, [r0, #0]
    ble_hci_ram_rx_acl_hs_cb = acl_cb;
   16416:	4905      	ldr	r1, [pc, #20]	; (1642c <ble_hci_trans_cfg_hs+0x20>)
   16418:	600a      	str	r2, [r1, #0]
    ble_hci_ram_rx_acl_hs_arg = acl_arg;
   1641a:	4a05      	ldr	r2, [pc, #20]	; (16430 <ble_hci_trans_cfg_hs+0x24>)
   1641c:	6013      	str	r3, [r2, #0]
}
   1641e:	f85d 4b04 	ldr.w	r4, [sp], #4
   16422:	4770      	bx	lr
   16424:	20007f38 	.word	0x20007f38
   16428:	20007f34 	.word	0x20007f34
   1642c:	20007f28 	.word	0x20007f28
   16430:	20007f24 	.word	0x20007f24

00016434 <ble_hci_trans_cfg_ll>:
void
ble_hci_trans_cfg_ll(ble_hci_trans_rx_cmd_fn *cmd_cb,
                     void *cmd_arg,
                     ble_hci_trans_rx_acl_fn *acl_cb,
                     void *acl_arg)
{
   16434:	b410      	push	{r4}
    ble_hci_ram_rx_cmd_ll_cb = cmd_cb;
   16436:	4c05      	ldr	r4, [pc, #20]	; (1644c <ble_hci_trans_cfg_ll+0x18>)
   16438:	6020      	str	r0, [r4, #0]
    ble_hci_ram_rx_cmd_ll_arg = cmd_arg;
   1643a:	4805      	ldr	r0, [pc, #20]	; (16450 <ble_hci_trans_cfg_ll+0x1c>)
   1643c:	6001      	str	r1, [r0, #0]
    ble_hci_ram_rx_acl_ll_cb = acl_cb;
   1643e:	4905      	ldr	r1, [pc, #20]	; (16454 <ble_hci_trans_cfg_ll+0x20>)
   16440:	600a      	str	r2, [r1, #0]
    ble_hci_ram_rx_acl_ll_arg = acl_arg;
   16442:	4a05      	ldr	r2, [pc, #20]	; (16458 <ble_hci_trans_cfg_ll+0x24>)
   16444:	6013      	str	r3, [r2, #0]
}
   16446:	f85d 4b04 	ldr.w	r4, [sp], #4
   1644a:	4770      	bx	lr
   1644c:	20007f40 	.word	0x20007f40
   16450:	20007f3c 	.word	0x20007f3c
   16454:	20007f30 	.word	0x20007f30
   16458:	20007f2c 	.word	0x20007f2c

0001645c <ble_hci_trans_hs_cmd_tx>:

int
ble_hci_trans_hs_cmd_tx(uint8_t *cmd)
{
   1645c:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_cmd_ll_cb != NULL);
   1645e:	4b08      	ldr	r3, [pc, #32]	; (16480 <ble_hci_trans_hs_cmd_tx+0x24>)
   16460:	681b      	ldr	r3, [r3, #0]
   16462:	b11b      	cbz	r3, 1646c <ble_hci_trans_hs_cmd_tx+0x10>

    rc = ble_hci_ram_rx_cmd_ll_cb(cmd, ble_hci_ram_rx_cmd_ll_arg);
   16464:	4a07      	ldr	r2, [pc, #28]	; (16484 <ble_hci_trans_hs_cmd_tx+0x28>)
   16466:	6811      	ldr	r1, [r2, #0]
   16468:	4798      	blx	r3
    return rc;
}
   1646a:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_cmd_ll_cb != NULL);
   1646c:	f7f1 fea8 	bl	81c0 <hal_debugger_connected>
   16470:	b100      	cbz	r0, 16474 <ble_hci_trans_hs_cmd_tx+0x18>
   16472:	be01      	bkpt	0x0001
   16474:	2300      	movs	r3, #0
   16476:	461a      	mov	r2, r3
   16478:	4619      	mov	r1, r3
   1647a:	4618      	mov	r0, r3
   1647c:	f7f3 fa36 	bl	98ec <__assert_func>
   16480:	20007f40 	.word	0x20007f40
   16484:	20007f3c 	.word	0x20007f3c

00016488 <ble_hci_trans_ll_evt_tx>:

int
ble_hci_trans_ll_evt_tx(uint8_t *hci_ev)
{
   16488:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_cmd_hs_cb != NULL);
   1648a:	4b08      	ldr	r3, [pc, #32]	; (164ac <ble_hci_trans_ll_evt_tx+0x24>)
   1648c:	681b      	ldr	r3, [r3, #0]
   1648e:	b11b      	cbz	r3, 16498 <ble_hci_trans_ll_evt_tx+0x10>

    rc = ble_hci_ram_rx_cmd_hs_cb(hci_ev, ble_hci_ram_rx_cmd_hs_arg);
   16490:	4a07      	ldr	r2, [pc, #28]	; (164b0 <ble_hci_trans_ll_evt_tx+0x28>)
   16492:	6811      	ldr	r1, [r2, #0]
   16494:	4798      	blx	r3
    return rc;
}
   16496:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_cmd_hs_cb != NULL);
   16498:	f7f1 fe92 	bl	81c0 <hal_debugger_connected>
   1649c:	b100      	cbz	r0, 164a0 <ble_hci_trans_ll_evt_tx+0x18>
   1649e:	be01      	bkpt	0x0001
   164a0:	2300      	movs	r3, #0
   164a2:	461a      	mov	r2, r3
   164a4:	4619      	mov	r1, r3
   164a6:	4618      	mov	r0, r3
   164a8:	f7f3 fa20 	bl	98ec <__assert_func>
   164ac:	20007f38 	.word	0x20007f38
   164b0:	20007f34 	.word	0x20007f34

000164b4 <ble_hci_trans_hs_acl_tx>:

int
ble_hci_trans_hs_acl_tx(struct os_mbuf *om)
{
   164b4:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_acl_ll_cb != NULL);
   164b6:	4b08      	ldr	r3, [pc, #32]	; (164d8 <ble_hci_trans_hs_acl_tx+0x24>)
   164b8:	681b      	ldr	r3, [r3, #0]
   164ba:	b11b      	cbz	r3, 164c4 <ble_hci_trans_hs_acl_tx+0x10>

    rc = ble_hci_ram_rx_acl_ll_cb(om, ble_hci_ram_rx_acl_ll_arg);
   164bc:	4a07      	ldr	r2, [pc, #28]	; (164dc <ble_hci_trans_hs_acl_tx+0x28>)
   164be:	6811      	ldr	r1, [r2, #0]
   164c0:	4798      	blx	r3
    return rc;
}
   164c2:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_acl_ll_cb != NULL);
   164c4:	f7f1 fe7c 	bl	81c0 <hal_debugger_connected>
   164c8:	b100      	cbz	r0, 164cc <ble_hci_trans_hs_acl_tx+0x18>
   164ca:	be01      	bkpt	0x0001
   164cc:	2300      	movs	r3, #0
   164ce:	461a      	mov	r2, r3
   164d0:	4619      	mov	r1, r3
   164d2:	4618      	mov	r0, r3
   164d4:	f7f3 fa0a 	bl	98ec <__assert_func>
   164d8:	20007f30 	.word	0x20007f30
   164dc:	20007f2c 	.word	0x20007f2c

000164e0 <ble_hci_trans_ll_acl_tx>:

int
ble_hci_trans_ll_acl_tx(struct os_mbuf *om)
{
   164e0:	b508      	push	{r3, lr}
    int rc;

    assert(ble_hci_ram_rx_acl_hs_cb != NULL);
   164e2:	4b08      	ldr	r3, [pc, #32]	; (16504 <ble_hci_trans_ll_acl_tx+0x24>)
   164e4:	681b      	ldr	r3, [r3, #0]
   164e6:	b11b      	cbz	r3, 164f0 <ble_hci_trans_ll_acl_tx+0x10>

    rc = ble_hci_ram_rx_acl_hs_cb(om, ble_hci_ram_rx_acl_hs_arg);
   164e8:	4a07      	ldr	r2, [pc, #28]	; (16508 <ble_hci_trans_ll_acl_tx+0x28>)
   164ea:	6811      	ldr	r1, [r2, #0]
   164ec:	4798      	blx	r3
    return rc;
}
   164ee:	bd08      	pop	{r3, pc}
    assert(ble_hci_ram_rx_acl_hs_cb != NULL);
   164f0:	f7f1 fe66 	bl	81c0 <hal_debugger_connected>
   164f4:	b100      	cbz	r0, 164f8 <ble_hci_trans_ll_acl_tx+0x18>
   164f6:	be01      	bkpt	0x0001
   164f8:	2300      	movs	r3, #0
   164fa:	461a      	mov	r2, r3
   164fc:	4619      	mov	r1, r3
   164fe:	4618      	mov	r0, r3
   16500:	f7f3 f9f4 	bl	98ec <__assert_func>
   16504:	20007f28 	.word	0x20007f28
   16508:	20007f24 	.word	0x20007f24

0001650c <ble_hci_trans_buf_alloc>:

uint8_t *
ble_hci_trans_buf_alloc(int type)
{
   1650c:	b508      	push	{r3, lr}
    uint8_t *buf;

    switch (type) {
   1650e:	2802      	cmp	r0, #2
   16510:	d013      	beq.n	1653a <ble_hci_trans_buf_alloc+0x2e>
   16512:	2803      	cmp	r0, #3
   16514:	d00b      	beq.n	1652e <ble_hci_trans_buf_alloc+0x22>
   16516:	2801      	cmp	r0, #1
   16518:	d01a      	beq.n	16550 <ble_hci_trans_buf_alloc+0x44>
    case BLE_HCI_TRANS_BUF_EVT_LO:
        buf = os_memblock_get(&ble_hci_ram_evt_lo_pool);
        break;

    default:
        assert(0);
   1651a:	f7f1 fe51 	bl	81c0 <hal_debugger_connected>
   1651e:	b100      	cbz	r0, 16522 <ble_hci_trans_buf_alloc+0x16>
   16520:	be01      	bkpt	0x0001
   16522:	2300      	movs	r3, #0
   16524:	461a      	mov	r2, r3
   16526:	4619      	mov	r1, r3
   16528:	4618      	mov	r0, r3
   1652a:	f7f3 f9df 	bl	98ec <__assert_func>
        buf = os_memblock_get(&ble_hci_ram_cmd_pool);
   1652e:	480b      	ldr	r0, [pc, #44]	; (1655c <ble_hci_trans_buf_alloc+0x50>)
   16530:	f7f4 faa5 	bl	aa7e <os_memblock_get>
   16534:	4603      	mov	r3, r0
        buf = NULL;
    }

    return buf;
}
   16536:	4618      	mov	r0, r3
   16538:	bd08      	pop	{r3, pc}
        buf = os_memblock_get(&ble_hci_ram_evt_hi_pool);
   1653a:	4809      	ldr	r0, [pc, #36]	; (16560 <ble_hci_trans_buf_alloc+0x54>)
   1653c:	f7f4 fa9f 	bl	aa7e <os_memblock_get>
        if (buf == NULL) {
   16540:	4603      	mov	r3, r0
   16542:	2800      	cmp	r0, #0
   16544:	d1f7      	bne.n	16536 <ble_hci_trans_buf_alloc+0x2a>
            buf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   16546:	2001      	movs	r0, #1
   16548:	f7ff ffe0 	bl	1650c <ble_hci_trans_buf_alloc>
   1654c:	4603      	mov	r3, r0
   1654e:	e7f2      	b.n	16536 <ble_hci_trans_buf_alloc+0x2a>
        buf = os_memblock_get(&ble_hci_ram_evt_lo_pool);
   16550:	4804      	ldr	r0, [pc, #16]	; (16564 <ble_hci_trans_buf_alloc+0x58>)
   16552:	f7f4 fa94 	bl	aa7e <os_memblock_get>
   16556:	4603      	mov	r3, r0
        break;
   16558:	e7ed      	b.n	16536 <ble_hci_trans_buf_alloc+0x2a>
   1655a:	bf00      	nop
   1655c:	20007c00 	.word	0x20007c00
   16560:	20007cac 	.word	0x20007cac
   16564:	20007f08 	.word	0x20007f08

00016568 <ble_hci_trans_buf_free>:

void
ble_hci_trans_buf_free(uint8_t *buf)
{
   16568:	b510      	push	{r4, lr}
   1656a:	4604      	mov	r4, r0
    * response to the command. This was done to insure that the controller
    * could always send back one of these events when a command was received.
    * Thus, we check to see which pool the buffer came from so we can free
    * it to the appropriate pool
    */
    if (os_memblock_from(&ble_hci_ram_evt_hi_pool, buf)) {
   1656c:	4601      	mov	r1, r0
   1656e:	4824      	ldr	r0, [pc, #144]	; (16600 <ble_hci_trans_buf_free+0x98>)
   16570:	f7f4 fa65 	bl	aa3e <os_memblock_from>
   16574:	b178      	cbz	r0, 16596 <ble_hci_trans_buf_free+0x2e>
        rc = os_memblock_put(&ble_hci_ram_evt_hi_pool, buf);
   16576:	4621      	mov	r1, r4
   16578:	4821      	ldr	r0, [pc, #132]	; (16600 <ble_hci_trans_buf_free+0x98>)
   1657a:	f7f4 faa8 	bl	aace <os_memblock_put>
        assert(rc == 0);
   1657e:	b900      	cbnz	r0, 16582 <ble_hci_trans_buf_free+0x1a>
    } else {
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
        rc = os_memblock_put(&ble_hci_ram_cmd_pool, buf);
        assert(rc == 0);
    }
}
   16580:	bd10      	pop	{r4, pc}
        assert(rc == 0);
   16582:	f7f1 fe1d 	bl	81c0 <hal_debugger_connected>
   16586:	b100      	cbz	r0, 1658a <ble_hci_trans_buf_free+0x22>
   16588:	be01      	bkpt	0x0001
   1658a:	2300      	movs	r3, #0
   1658c:	461a      	mov	r2, r3
   1658e:	4619      	mov	r1, r3
   16590:	4618      	mov	r0, r3
   16592:	f7f3 f9ab 	bl	98ec <__assert_func>
    } else if (os_memblock_from(&ble_hci_ram_evt_lo_pool, buf)) {
   16596:	4621      	mov	r1, r4
   16598:	481a      	ldr	r0, [pc, #104]	; (16604 <ble_hci_trans_buf_free+0x9c>)
   1659a:	f7f4 fa50 	bl	aa3e <os_memblock_from>
   1659e:	b178      	cbz	r0, 165c0 <ble_hci_trans_buf_free+0x58>
        rc = os_memblock_put(&ble_hci_ram_evt_lo_pool, buf);
   165a0:	4621      	mov	r1, r4
   165a2:	4818      	ldr	r0, [pc, #96]	; (16604 <ble_hci_trans_buf_free+0x9c>)
   165a4:	f7f4 fa93 	bl	aace <os_memblock_put>
        assert(rc == 0);
   165a8:	2800      	cmp	r0, #0
   165aa:	d0e9      	beq.n	16580 <ble_hci_trans_buf_free+0x18>
   165ac:	f7f1 fe08 	bl	81c0 <hal_debugger_connected>
   165b0:	b100      	cbz	r0, 165b4 <ble_hci_trans_buf_free+0x4c>
   165b2:	be01      	bkpt	0x0001
   165b4:	2300      	movs	r3, #0
   165b6:	461a      	mov	r2, r3
   165b8:	4619      	mov	r1, r3
   165ba:	4618      	mov	r0, r3
   165bc:	f7f3 f996 	bl	98ec <__assert_func>
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
   165c0:	4621      	mov	r1, r4
   165c2:	4811      	ldr	r0, [pc, #68]	; (16608 <ble_hci_trans_buf_free+0xa0>)
   165c4:	f7f4 fa3b 	bl	aa3e <os_memblock_from>
   165c8:	b178      	cbz	r0, 165ea <ble_hci_trans_buf_free+0x82>
        rc = os_memblock_put(&ble_hci_ram_cmd_pool, buf);
   165ca:	4621      	mov	r1, r4
   165cc:	480e      	ldr	r0, [pc, #56]	; (16608 <ble_hci_trans_buf_free+0xa0>)
   165ce:	f7f4 fa7e 	bl	aace <os_memblock_put>
        assert(rc == 0);
   165d2:	2800      	cmp	r0, #0
   165d4:	d0d4      	beq.n	16580 <ble_hci_trans_buf_free+0x18>
   165d6:	f7f1 fdf3 	bl	81c0 <hal_debugger_connected>
   165da:	b100      	cbz	r0, 165de <ble_hci_trans_buf_free+0x76>
   165dc:	be01      	bkpt	0x0001
   165de:	2300      	movs	r3, #0
   165e0:	461a      	mov	r2, r3
   165e2:	4619      	mov	r1, r3
   165e4:	4618      	mov	r0, r3
   165e6:	f7f3 f981 	bl	98ec <__assert_func>
        assert(os_memblock_from(&ble_hci_ram_cmd_pool, buf));
   165ea:	f7f1 fde9 	bl	81c0 <hal_debugger_connected>
   165ee:	b100      	cbz	r0, 165f2 <ble_hci_trans_buf_free+0x8a>
   165f0:	be01      	bkpt	0x0001
   165f2:	2300      	movs	r3, #0
   165f4:	461a      	mov	r2, r3
   165f6:	4619      	mov	r1, r3
   165f8:	4618      	mov	r0, r3
   165fa:	f7f3 f977 	bl	98ec <__assert_func>
   165fe:	bf00      	nop
   16600:	20007cac 	.word	0x20007cac
   16604:	20007f08 	.word	0x20007f08
   16608:	20007c00 	.word	0x20007c00

0001660c <ble_hci_trans_reset>:
{
    /* No work to do.  All allocated buffers are owned by the host or
     * controller, and they will get freed by their owners.
     */
    return 0;
}
   1660c:	2000      	movs	r0, #0
   1660e:	4770      	bx	lr

00016610 <ble_hci_ram_init>:

void
ble_hci_ram_init(void)
{
   16610:	b510      	push	{r4, lr}
   16612:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16614:	4b28      	ldr	r3, [pc, #160]	; (166b8 <ble_hci_ram_init+0xa8>)
   16616:	781b      	ldrb	r3, [r3, #0]
   16618:	b1eb      	cbz	r3, 16656 <ble_hci_ram_init+0x46>
     * Create memory pool of HCI command buffers. NOTE: we currently dont
     * allow this to be configured. The controller will only allow one
     * outstanding command. We decided to keep this a pool in case we allow
     * allow the controller to handle more than one outstanding command.
     */
    rc = os_mempool_init(&ble_hci_ram_cmd_pool,
   1661a:	4b28      	ldr	r3, [pc, #160]	; (166bc <ble_hci_ram_init+0xac>)
   1661c:	9300      	str	r3, [sp, #0]
   1661e:	4b28      	ldr	r3, [pc, #160]	; (166c0 <ble_hci_ram_init+0xb0>)
   16620:	f44f 7282 	mov.w	r2, #260	; 0x104
   16624:	2101      	movs	r1, #1
   16626:	4827      	ldr	r0, [pc, #156]	; (166c4 <ble_hci_ram_init+0xb4>)
   16628:	f7f4 f9e4 	bl	a9f4 <os_mempool_init>
                         1,
                         BLE_HCI_TRANS_CMD_SZ,
                         ble_hci_ram_cmd_buf,
                         "ble_hci_ram_cmd_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1662c:	b9e8      	cbnz	r0, 1666a <ble_hci_ram_init+0x5a>

    rc = os_mempool_init(&ble_hci_ram_evt_hi_pool,
   1662e:	4b26      	ldr	r3, [pc, #152]	; (166c8 <ble_hci_ram_init+0xb8>)
   16630:	9300      	str	r3, [sp, #0]
   16632:	4b26      	ldr	r3, [pc, #152]	; (166cc <ble_hci_ram_init+0xbc>)
   16634:	2246      	movs	r2, #70	; 0x46
   16636:	2102      	movs	r1, #2
   16638:	4825      	ldr	r0, [pc, #148]	; (166d0 <ble_hci_ram_init+0xc0>)
   1663a:	f7f4 f9db 	bl	a9f4 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_HI_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         ble_hci_ram_evt_hi_buf,
                         "ble_hci_ram_evt_hi_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   1663e:	bb08      	cbnz	r0, 16684 <ble_hci_ram_init+0x74>

    rc = os_mempool_init(&ble_hci_ram_evt_lo_pool,
   16640:	4b24      	ldr	r3, [pc, #144]	; (166d4 <ble_hci_ram_init+0xc4>)
   16642:	9300      	str	r3, [sp, #0]
   16644:	4b24      	ldr	r3, [pc, #144]	; (166d8 <ble_hci_ram_init+0xc8>)
   16646:	2246      	movs	r2, #70	; 0x46
   16648:	2108      	movs	r1, #8
   1664a:	4824      	ldr	r0, [pc, #144]	; (166dc <ble_hci_ram_init+0xcc>)
   1664c:	f7f4 f9d2 	bl	a9f4 <os_mempool_init>
                         MYNEWT_VAL(BLE_HCI_EVT_LO_BUF_COUNT),
                         MYNEWT_VAL(BLE_HCI_EVT_BUF_SIZE),
                         ble_hci_ram_evt_lo_buf,
                         "ble_hci_ram_evt_lo_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);
   16650:	bb28      	cbnz	r0, 1669e <ble_hci_ram_init+0x8e>
}
   16652:	b002      	add	sp, #8
   16654:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16656:	f7f1 fdb3 	bl	81c0 <hal_debugger_connected>
   1665a:	b100      	cbz	r0, 1665e <ble_hci_ram_init+0x4e>
   1665c:	be01      	bkpt	0x0001
   1665e:	2300      	movs	r3, #0
   16660:	461a      	mov	r2, r3
   16662:	4619      	mov	r1, r3
   16664:	4618      	mov	r0, r3
   16666:	f7f3 f941 	bl	98ec <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1666a:	f7f1 fda9 	bl	81c0 <hal_debugger_connected>
   1666e:	b100      	cbz	r0, 16672 <ble_hci_ram_init+0x62>
   16670:	be01      	bkpt	0x0001
   16672:	2000      	movs	r0, #0
   16674:	9000      	str	r0, [sp, #0]
   16676:	4b1a      	ldr	r3, [pc, #104]	; (166e0 <ble_hci_ram_init+0xd0>)
   16678:	681c      	ldr	r4, [r3, #0]
   1667a:	4603      	mov	r3, r0
   1667c:	4602      	mov	r2, r0
   1667e:	4601      	mov	r1, r0
   16680:	47a0      	blx	r4
   16682:	e7d4      	b.n	1662e <ble_hci_ram_init+0x1e>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16684:	f7f1 fd9c 	bl	81c0 <hal_debugger_connected>
   16688:	b100      	cbz	r0, 1668c <ble_hci_ram_init+0x7c>
   1668a:	be01      	bkpt	0x0001
   1668c:	2000      	movs	r0, #0
   1668e:	9000      	str	r0, [sp, #0]
   16690:	4b13      	ldr	r3, [pc, #76]	; (166e0 <ble_hci_ram_init+0xd0>)
   16692:	681c      	ldr	r4, [r3, #0]
   16694:	4603      	mov	r3, r0
   16696:	4602      	mov	r2, r0
   16698:	4601      	mov	r1, r0
   1669a:	47a0      	blx	r4
   1669c:	e7d0      	b.n	16640 <ble_hci_ram_init+0x30>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1669e:	f7f1 fd8f 	bl	81c0 <hal_debugger_connected>
   166a2:	b100      	cbz	r0, 166a6 <ble_hci_ram_init+0x96>
   166a4:	be01      	bkpt	0x0001
   166a6:	2000      	movs	r0, #0
   166a8:	9000      	str	r0, [sp, #0]
   166aa:	4b0d      	ldr	r3, [pc, #52]	; (166e0 <ble_hci_ram_init+0xd0>)
   166ac:	681c      	ldr	r4, [r3, #0]
   166ae:	4603      	mov	r3, r0
   166b0:	4602      	mov	r2, r0
   166b2:	4601      	mov	r1, r0
   166b4:	47a0      	blx	r4
}
   166b6:	e7cc      	b.n	16652 <ble_hci_ram_init+0x42>
   166b8:	20000506 	.word	0x20000506
   166bc:	000291a0 	.word	0x000291a0
   166c0:	20007afc 	.word	0x20007afc
   166c4:	20007c00 	.word	0x20007c00
   166c8:	000291b8 	.word	0x000291b8
   166cc:	20007c1c 	.word	0x20007c1c
   166d0:	20007cac 	.word	0x20007cac
   166d4:	000291d0 	.word	0x000291d0
   166d8:	20007cc8 	.word	0x20007cc8
   166dc:	20007f08 	.word	0x20007f08
   166e0:	200000ec 	.word	0x200000ec

000166e4 <conf_dup_check_cb>:
    return 0;
}

static void
conf_dup_check_cb(char *name, char *val, void *cb_arg)
{
   166e4:	b538      	push	{r3, r4, r5, lr}
   166e6:	460d      	mov	r5, r1
   166e8:	4614      	mov	r4, r2
    struct conf_dup_check_arg *cdca = (struct conf_dup_check_arg *)cb_arg;

    if (strcmp(name, cdca->name)) {
   166ea:	6811      	ldr	r1, [r2, #0]
   166ec:	f7f5 f8ae 	bl	b84c <strcmp>
   166f0:	b940      	cbnz	r0, 16704 <conf_dup_check_cb+0x20>
        return;
    }
    if (!val) {
   166f2:	b145      	cbz	r5, 16706 <conf_dup_check_cb+0x22>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
        }
    } else {
        if (cdca->val && !strcmp(val, cdca->val)) {
   166f4:	6861      	ldr	r1, [r4, #4]
   166f6:	b119      	cbz	r1, 16700 <conf_dup_check_cb+0x1c>
   166f8:	4628      	mov	r0, r5
   166fa:	f7f5 f8a7 	bl	b84c <strcmp>
   166fe:	b160      	cbz	r0, 1671a <conf_dup_check_cb+0x36>
            cdca->is_dup = 1;
        } else {
            cdca->is_dup = 0;
   16700:	2300      	movs	r3, #0
   16702:	60a3      	str	r3, [r4, #8]
        }
    }
}
   16704:	bd38      	pop	{r3, r4, r5, pc}
        if (!cdca->val || cdca->val[0] == '\0') {
   16706:	6863      	ldr	r3, [r4, #4]
   16708:	b10b      	cbz	r3, 1670e <conf_dup_check_cb+0x2a>
   1670a:	781b      	ldrb	r3, [r3, #0]
   1670c:	b913      	cbnz	r3, 16714 <conf_dup_check_cb+0x30>
            cdca->is_dup = 1;
   1670e:	2301      	movs	r3, #1
   16710:	60a3      	str	r3, [r4, #8]
   16712:	e7f7      	b.n	16704 <conf_dup_check_cb+0x20>
            cdca->is_dup = 0;
   16714:	2300      	movs	r3, #0
   16716:	60a3      	str	r3, [r4, #8]
   16718:	e7f4      	b.n	16704 <conf_dup_check_cb+0x20>
            cdca->is_dup = 1;
   1671a:	2301      	movs	r3, #1
   1671c:	60a3      	str	r3, [r4, #8]
   1671e:	e7f1      	b.n	16704 <conf_dup_check_cb+0x20>

00016720 <conf_load_cb>:
{
   16720:	b538      	push	{r3, r4, r5, lr}
   16722:	4604      	mov	r4, r0
   16724:	460d      	mov	r5, r1
    if (!cb_arg || !strcmp((char*)cb_arg, name)) {
   16726:	b122      	cbz	r2, 16732 <conf_load_cb+0x12>
   16728:	4610      	mov	r0, r2
   1672a:	4621      	mov	r1, r4
   1672c:	f7f5 f88e 	bl	b84c <strcmp>
   16730:	b918      	cbnz	r0, 1673a <conf_load_cb+0x1a>
        conf_set_value(name, val);
   16732:	4629      	mov	r1, r5
   16734:	4620      	mov	r0, r4
   16736:	f000 fa0f 	bl	16b58 <conf_set_value>
}
   1673a:	bd38      	pop	{r3, r4, r5, pc}

0001673c <conf_load>:
{
   1673c:	b510      	push	{r4, lr}
    conf_lock();
   1673e:	f000 f8b1 	bl	168a4 <conf_lock>
    conf_loaded = true;
   16742:	2301      	movs	r3, #1
   16744:	4a0e      	ldr	r2, [pc, #56]	; (16780 <conf_load+0x44>)
   16746:	7013      	strb	r3, [r2, #0]
    conf_loading = true;
   16748:	4a0e      	ldr	r2, [pc, #56]	; (16784 <conf_load+0x48>)
   1674a:	7013      	strb	r3, [r2, #0]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   1674c:	4b0e      	ldr	r3, [pc, #56]	; (16788 <conf_load+0x4c>)
   1674e:	681c      	ldr	r4, [r3, #0]
   16750:	e000      	b.n	16754 <conf_load+0x18>
   16752:	6824      	ldr	r4, [r4, #0]
   16754:	b164      	cbz	r4, 16770 <conf_load+0x34>
        cs->cs_itf->csi_load(cs, conf_load_cb, NULL);
   16756:	6863      	ldr	r3, [r4, #4]
   16758:	681b      	ldr	r3, [r3, #0]
   1675a:	2200      	movs	r2, #0
   1675c:	490b      	ldr	r1, [pc, #44]	; (1678c <conf_load+0x50>)
   1675e:	4620      	mov	r0, r4
   16760:	4798      	blx	r3
        if (SLIST_NEXT(cs, cs_next)) {
   16762:	6823      	ldr	r3, [r4, #0]
   16764:	2b00      	cmp	r3, #0
   16766:	d0f4      	beq.n	16752 <conf_load+0x16>
            conf_commit(NULL);
   16768:	2000      	movs	r0, #0
   1676a:	f000 fa0f 	bl	16b8c <conf_commit>
   1676e:	e7f0      	b.n	16752 <conf_load+0x16>
    conf_loading = false;
   16770:	4b04      	ldr	r3, [pc, #16]	; (16784 <conf_load+0x48>)
   16772:	701c      	strb	r4, [r3, #0]
    conf_unlock();
   16774:	f000 f8a0 	bl	168b8 <conf_unlock>
    return conf_commit(NULL);
   16778:	4620      	mov	r0, r4
   1677a:	f000 fa07 	bl	16b8c <conf_commit>
}
   1677e:	bd10      	pop	{r4, pc}
   16780:	20007f48 	.word	0x20007f48
   16784:	20007f49 	.word	0x20007f49
   16788:	20007f44 	.word	0x20007f44
   1678c:	00016721 	.word	0x00016721

00016790 <conf_ensure_loaded>:
{
   16790:	b508      	push	{r3, lr}
    if (conf_loaded) {
   16792:	4b04      	ldr	r3, [pc, #16]	; (167a4 <conf_ensure_loaded+0x14>)
   16794:	781b      	ldrb	r3, [r3, #0]
   16796:	b10b      	cbz	r3, 1679c <conf_ensure_loaded+0xc>
        return 0;
   16798:	2000      	movs	r0, #0
}
   1679a:	bd08      	pop	{r3, pc}
    return conf_load();
   1679c:	f7ff ffce 	bl	1673c <conf_load>
   167a0:	e7fb      	b.n	1679a <conf_ensure_loaded+0xa>
   167a2:	bf00      	nop
   167a4:	20007f48 	.word	0x20007f48

000167a8 <conf_save_one>:
/*
 * Append a single value to persisted config. Don't store duplicate value.
 */
int
conf_save_one(const char *name, char *value)
{
   167a8:	b570      	push	{r4, r5, r6, lr}
   167aa:	b084      	sub	sp, #16
   167ac:	4605      	mov	r5, r0
   167ae:	460e      	mov	r6, r1
    struct conf_store *cs;
    struct conf_dup_check_arg cdca;
    int rc;

    conf_lock();
   167b0:	f000 f878 	bl	168a4 <conf_lock>
    if (!conf_save_dst) {
   167b4:	4b13      	ldr	r3, [pc, #76]	; (16804 <conf_save_one+0x5c>)
   167b6:	681b      	ldr	r3, [r3, #0]
   167b8:	b1fb      	cbz	r3, 167fa <conf_save_one+0x52>
    }

    /*
     * Check if we're writing the same value again.
     */
    cdca.name = name;
   167ba:	9501      	str	r5, [sp, #4]
    cdca.val = value;
   167bc:	9602      	str	r6, [sp, #8]
    cdca.is_dup = 0;
   167be:	2300      	movs	r3, #0
   167c0:	9303      	str	r3, [sp, #12]
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   167c2:	4b11      	ldr	r3, [pc, #68]	; (16808 <conf_save_one+0x60>)
   167c4:	681c      	ldr	r4, [r3, #0]
   167c6:	e006      	b.n	167d6 <conf_save_one+0x2e>
        cs->cs_itf->csi_load(cs, conf_dup_check_cb, &cdca);
   167c8:	6863      	ldr	r3, [r4, #4]
   167ca:	681b      	ldr	r3, [r3, #0]
   167cc:	aa01      	add	r2, sp, #4
   167ce:	490f      	ldr	r1, [pc, #60]	; (1680c <conf_save_one+0x64>)
   167d0:	4620      	mov	r0, r4
   167d2:	4798      	blx	r3
    SLIST_FOREACH(cs, &conf_load_srcs, cs_next) {
   167d4:	6824      	ldr	r4, [r4, #0]
   167d6:	2c00      	cmp	r4, #0
   167d8:	d1f6      	bne.n	167c8 <conf_save_one+0x20>
    }
    if (cdca.is_dup == 1) {
   167da:	9b03      	ldr	r3, [sp, #12]
   167dc:	2b01      	cmp	r3, #1
   167de:	d00e      	beq.n	167fe <conf_save_one+0x56>
        rc = 0;
        goto out;
    }
    cs = conf_save_dst;
   167e0:	4b08      	ldr	r3, [pc, #32]	; (16804 <conf_save_one+0x5c>)
   167e2:	6818      	ldr	r0, [r3, #0]
    rc = cs->cs_itf->csi_save(cs, name, value);
   167e4:	6843      	ldr	r3, [r0, #4]
   167e6:	689b      	ldr	r3, [r3, #8]
   167e8:	4632      	mov	r2, r6
   167ea:	4629      	mov	r1, r5
   167ec:	4798      	blx	r3
   167ee:	4604      	mov	r4, r0
out:
    conf_unlock();
   167f0:	f000 f862 	bl	168b8 <conf_unlock>
    return rc;
}
   167f4:	4620      	mov	r0, r4
   167f6:	b004      	add	sp, #16
   167f8:	bd70      	pop	{r4, r5, r6, pc}
        rc = OS_ENOENT;
   167fa:	240a      	movs	r4, #10
   167fc:	e7f8      	b.n	167f0 <conf_save_one+0x48>
        rc = 0;
   167fe:	2400      	movs	r4, #0
   16800:	e7f6      	b.n	167f0 <conf_save_one+0x48>
   16802:	bf00      	nop
   16804:	20007f4c 	.word	0x20007f4c
   16808:	20007f44 	.word	0x20007f44
   1680c:	000166e5 	.word	0x000166e5

00016810 <conf_store_init>:
}

void
conf_store_init(void)
{
    conf_loaded = false;
   16810:	2300      	movs	r3, #0
   16812:	4a02      	ldr	r2, [pc, #8]	; (1681c <conf_store_init+0xc>)
   16814:	7013      	strb	r3, [r2, #0]
    SLIST_INIT(&conf_load_srcs);
   16816:	4a02      	ldr	r2, [pc, #8]	; (16820 <conf_store_init+0x10>)
   16818:	6013      	str	r3, [r2, #0]
}
   1681a:	4770      	bx	lr
   1681c:	20007f48 	.word	0x20007f48
   16820:	20007f44 	.word	0x20007f44

00016824 <conf_set_cb>:
/**
 * Executes a conf_handler's "set" callback and returns the result.
 */
static int
conf_set_cb(struct conf_handler *ch, int argc, char **argv, char *val)
{
   16824:	b538      	push	{r3, r4, r5, lr}
   16826:	460c      	mov	r4, r1
   16828:	4611      	mov	r1, r2
   1682a:	461a      	mov	r2, r3
    if (ch->ch_ext) {
   1682c:	7a03      	ldrb	r3, [r0, #8]
   1682e:	b12b      	cbz	r3, 1683c <conf_set_cb+0x18>
        if (ch->ch_set_ext != NULL) {
   16830:	6905      	ldr	r5, [r0, #16]
   16832:	b145      	cbz	r5, 16846 <conf_set_cb+0x22>
            return ch->ch_set_ext(argc, argv, val, ch->ch_arg);
   16834:	69c3      	ldr	r3, [r0, #28]
   16836:	4620      	mov	r0, r4
   16838:	47a8      	blx	r5
            return ch->ch_set(argc, argv, val);
        }
    }

    return OS_ERROR;
}
   1683a:	bd38      	pop	{r3, r4, r5, pc}
        if (ch->ch_set != NULL) {
   1683c:	6903      	ldr	r3, [r0, #16]
   1683e:	b123      	cbz	r3, 1684a <conf_set_cb+0x26>
            return ch->ch_set(argc, argv, val);
   16840:	4620      	mov	r0, r4
   16842:	4798      	blx	r3
   16844:	e7f9      	b.n	1683a <conf_set_cb+0x16>
    return OS_ERROR;
   16846:	200c      	movs	r0, #12
   16848:	e7f7      	b.n	1683a <conf_set_cb+0x16>
   1684a:	200c      	movs	r0, #12
   1684c:	e7f5      	b.n	1683a <conf_set_cb+0x16>

0001684e <conf_commit_cb>:
/**
 * Executes a conf_handler's "commit" callback and returns the result.
 */
static int
conf_commit_cb(struct conf_handler *ch)
{
   1684e:	b508      	push	{r3, lr}
    if (ch->ch_ext) {
   16850:	7a03      	ldrb	r3, [r0, #8]
   16852:	b123      	cbz	r3, 1685e <conf_commit_cb+0x10>
        if (ch->ch_commit_ext != NULL) {
   16854:	6943      	ldr	r3, [r0, #20]
   16856:	b133      	cbz	r3, 16866 <conf_commit_cb+0x18>
            return ch->ch_commit_ext(ch->ch_arg);
   16858:	69c0      	ldr	r0, [r0, #28]
   1685a:	4798      	blx	r3
   1685c:	e002      	b.n	16864 <conf_commit_cb+0x16>
        }
    } else {
        if (ch->ch_commit != NULL) {
   1685e:	6943      	ldr	r3, [r0, #20]
   16860:	b11b      	cbz	r3, 1686a <conf_commit_cb+0x1c>
            return ch->ch_commit();
   16862:	4798      	blx	r3
        }
    }

    return 0;
}
   16864:	bd08      	pop	{r3, pc}
    return 0;
   16866:	2000      	movs	r0, #0
   16868:	e7fc      	b.n	16864 <conf_commit_cb+0x16>
   1686a:	2000      	movs	r0, #0
   1686c:	e7fa      	b.n	16864 <conf_commit_cb+0x16>

0001686e <conf_ev_fn_load>:
{
   1686e:	b508      	push	{r3, lr}
    conf_ensure_loaded();
   16870:	f7ff ff8e 	bl	16790 <conf_ensure_loaded>
}
   16874:	bd08      	pop	{r3, pc}
	...

00016878 <conf_init>:
{
   16878:	b508      	push	{r3, lr}
    os_mutex_init(&conf_mtx);
   1687a:	4807      	ldr	r0, [pc, #28]	; (16898 <conf_init+0x20>)
   1687c:	f7f4 f9f8 	bl	ac70 <os_mutex_init>
    SLIST_INIT(&conf_handlers);
   16880:	4b06      	ldr	r3, [pc, #24]	; (1689c <conf_init+0x24>)
   16882:	2200      	movs	r2, #0
   16884:	601a      	str	r2, [r3, #0]
    conf_store_init();
   16886:	f7ff ffc3 	bl	16810 <conf_store_init>
    os_eventq_put(os_eventq_dflt_get(), &conf_ev_load);
   1688a:	f7f3 fc27 	bl	a0dc <os_eventq_dflt_get>
   1688e:	4904      	ldr	r1, [pc, #16]	; (168a0 <conf_init+0x28>)
   16890:	f7f3 fb79 	bl	9f86 <os_eventq_put>
}
   16894:	bd08      	pop	{r3, pc}
   16896:	bf00      	nop
   16898:	20007f54 	.word	0x20007f54
   1689c:	20007f50 	.word	0x20007f50
   168a0:	20000288 	.word	0x20000288

000168a4 <conf_lock>:
{
   168a4:	b508      	push	{r3, lr}
    os_mutex_pend(&conf_mtx, 0xFFFFFFFF);
   168a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   168aa:	4802      	ldr	r0, [pc, #8]	; (168b4 <conf_lock+0x10>)
   168ac:	f7f4 fa4a 	bl	ad44 <os_mutex_pend>
}
   168b0:	bd08      	pop	{r3, pc}
   168b2:	bf00      	nop
   168b4:	20007f54 	.word	0x20007f54

000168b8 <conf_unlock>:
{
   168b8:	b508      	push	{r3, lr}
    os_mutex_release(&conf_mtx);
   168ba:	4802      	ldr	r0, [pc, #8]	; (168c4 <conf_unlock+0xc>)
   168bc:	f7f4 f9e2 	bl	ac84 <os_mutex_release>
}
   168c0:	bd08      	pop	{r3, pc}
   168c2:	bf00      	nop
   168c4:	20007f54 	.word	0x20007f54

000168c8 <conf_register>:
{
   168c8:	b510      	push	{r4, lr}
   168ca:	4604      	mov	r4, r0
    conf_lock();
   168cc:	f7ff ffea 	bl	168a4 <conf_lock>
    SLIST_INSERT_HEAD(&conf_handlers, handler, ch_list);
   168d0:	4b03      	ldr	r3, [pc, #12]	; (168e0 <conf_register+0x18>)
   168d2:	681a      	ldr	r2, [r3, #0]
   168d4:	6022      	str	r2, [r4, #0]
   168d6:	601c      	str	r4, [r3, #0]
    conf_unlock();
   168d8:	f7ff ffee 	bl	168b8 <conf_unlock>
}
   168dc:	2000      	movs	r0, #0
   168de:	bd10      	pop	{r4, pc}
   168e0:	20007f50 	.word	0x20007f50

000168e4 <conf_handler_lookup>:
{
   168e4:	b538      	push	{r3, r4, r5, lr}
   168e6:	4605      	mov	r5, r0
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   168e8:	4b05      	ldr	r3, [pc, #20]	; (16900 <conf_handler_lookup+0x1c>)
   168ea:	681c      	ldr	r4, [r3, #0]
   168ec:	b134      	cbz	r4, 168fc <conf_handler_lookup+0x18>
        if (!strcmp(name, ch->ch_name)) {
   168ee:	6861      	ldr	r1, [r4, #4]
   168f0:	4628      	mov	r0, r5
   168f2:	f7f4 ffab 	bl	b84c <strcmp>
   168f6:	b108      	cbz	r0, 168fc <conf_handler_lookup+0x18>
    SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   168f8:	6824      	ldr	r4, [r4, #0]
   168fa:	e7f7      	b.n	168ec <conf_handler_lookup+0x8>
}
   168fc:	4620      	mov	r0, r4
   168fe:	bd38      	pop	{r3, r4, r5, pc}
   16900:	20007f50 	.word	0x20007f50

00016904 <conf_parse_name>:
{
   16904:	b570      	push	{r4, r5, r6, lr}
   16906:	b082      	sub	sp, #8
   16908:	460e      	mov	r6, r1
   1690a:	4615      	mov	r5, r2
    tok = strtok_r(name, sep, &tok_ptr);
   1690c:	aa01      	add	r2, sp, #4
   1690e:	4909      	ldr	r1, [pc, #36]	; (16934 <conf_parse_name+0x30>)
   16910:	f005 fc22 	bl	1c158 <strtok_r>
    i = 0;
   16914:	2300      	movs	r3, #0
    while (tok) {
   16916:	e008      	b.n	1692a <conf_parse_name+0x26>
        name_argv[i++] = tok;
   16918:	1c5c      	adds	r4, r3, #1
   1691a:	f845 0023 	str.w	r0, [r5, r3, lsl #2]
        tok = strtok_r(NULL, sep, &tok_ptr);
   1691e:	aa01      	add	r2, sp, #4
   16920:	4904      	ldr	r1, [pc, #16]	; (16934 <conf_parse_name+0x30>)
   16922:	2000      	movs	r0, #0
   16924:	f005 fc18 	bl	1c158 <strtok_r>
        name_argv[i++] = tok;
   16928:	4623      	mov	r3, r4
    while (tok) {
   1692a:	2800      	cmp	r0, #0
   1692c:	d1f4      	bne.n	16918 <conf_parse_name+0x14>
    *name_argc = i;
   1692e:	6033      	str	r3, [r6, #0]
}
   16930:	b002      	add	sp, #8
   16932:	bd70      	pop	{r4, r5, r6, pc}
   16934:	000291e8 	.word	0x000291e8

00016938 <conf_parse_and_lookup>:
{
   16938:	b510      	push	{r4, lr}
   1693a:	4614      	mov	r4, r2
    rc = conf_parse_name(name, name_argc, name_argv);
   1693c:	f7ff ffe2 	bl	16904 <conf_parse_name>
    if (rc) {
   16940:	b918      	cbnz	r0, 1694a <conf_parse_and_lookup+0x12>
    return conf_handler_lookup(name_argv[0]);
   16942:	6820      	ldr	r0, [r4, #0]
   16944:	f7ff ffce 	bl	168e4 <conf_handler_lookup>
}
   16948:	bd10      	pop	{r4, pc}
        return NULL;
   1694a:	2000      	movs	r0, #0
   1694c:	e7fc      	b.n	16948 <conf_parse_and_lookup+0x10>

0001694e <conf_value_from_str>:
    if (!val_str) {
   1694e:	2800      	cmp	r0, #0
   16950:	f000 8092 	beq.w	16a78 <conf_value_from_str+0x12a>
{
   16954:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   16958:	b082      	sub	sp, #8
   1695a:	4605      	mov	r5, r0
   1695c:	461e      	mov	r6, r3
   1695e:	4617      	mov	r7, r2
   16960:	460c      	mov	r4, r1
    switch (type) {
   16962:	3902      	subs	r1, #2
   16964:	290c      	cmp	r1, #12
   16966:	f200 8089 	bhi.w	16a7c <conf_value_from_str+0x12e>
   1696a:	e8df f001 	tbb	[pc, r1]
   1696e:	0707      	.short	0x0707
   16970:	87730707 	.word	0x87730707
   16974:	4a078787 	.word	0x4a078787
   16978:	4a4a      	.short	0x4a4a
   1697a:	4a          	.byte	0x4a
   1697b:	00          	.byte	0x00
        val = strtoll(val_str, &eptr, 0);
   1697c:	2200      	movs	r2, #0
   1697e:	a901      	add	r1, sp, #4
   16980:	f005 fbfa 	bl	1c178 <strtoll>
        if (*eptr != '\0') {
   16984:	9b01      	ldr	r3, [sp, #4]
   16986:	781b      	ldrb	r3, [r3, #0]
   16988:	2b00      	cmp	r3, #0
   1698a:	d17b      	bne.n	16a84 <conf_value_from_str+0x136>
        if (type == CONF_BOOL) {
   1698c:	2c0a      	cmp	r4, #10
   1698e:	d009      	beq.n	169a4 <conf_value_from_str+0x56>
        } else if (type == CONF_INT8) {
   16990:	2c02      	cmp	r4, #2
   16992:	d013      	beq.n	169bc <conf_value_from_str+0x6e>
        } else if (type == CONF_INT16) {
   16994:	2c03      	cmp	r4, #3
   16996:	d01d      	beq.n	169d4 <conf_value_from_str+0x86>
        } else if (type == CONF_INT32) {
   16998:	2c04      	cmp	r4, #4
   1699a:	d027      	beq.n	169ec <conf_value_from_str+0x9e>
            *(int64_t *)vp = val;
   1699c:	e9c7 0100 	strd	r0, r1, [r7]
    return 0;
   169a0:	2000      	movs	r0, #0
   169a2:	e06c      	b.n	16a7e <conf_value_from_str+0x130>
            if (val < 0 || val > 1) {
   169a4:	2900      	cmp	r1, #0
   169a6:	bf08      	it	eq
   169a8:	2802      	cmpeq	r0, #2
   169aa:	d26d      	bcs.n	16a88 <conf_value_from_str+0x13a>
            *(bool *)vp = val;
   169ac:	ea50 0301 	orrs.w	r3, r0, r1
   169b0:	bf14      	ite	ne
   169b2:	2301      	movne	r3, #1
   169b4:	2300      	moveq	r3, #0
   169b6:	703b      	strb	r3, [r7, #0]
    return 0;
   169b8:	2000      	movs	r0, #0
   169ba:	e060      	b.n	16a7e <conf_value_from_str+0x130>
            if (val < INT8_MIN || val > INT8_MAX) {
   169bc:	f110 0280 	adds.w	r2, r0, #128	; 0x80
   169c0:	f141 0300 	adc.w	r3, r1, #0
   169c4:	2b00      	cmp	r3, #0
   169c6:	bf08      	it	eq
   169c8:	f5b2 7f80 	cmpeq.w	r2, #256	; 0x100
   169cc:	d25e      	bcs.n	16a8c <conf_value_from_str+0x13e>
            *(int8_t *)vp = val;
   169ce:	7038      	strb	r0, [r7, #0]
    return 0;
   169d0:	2000      	movs	r0, #0
   169d2:	e054      	b.n	16a7e <conf_value_from_str+0x130>
            if (val < INT16_MIN || val > INT16_MAX) {
   169d4:	f510 4200 	adds.w	r2, r0, #32768	; 0x8000
   169d8:	f141 0300 	adc.w	r3, r1, #0
   169dc:	2b00      	cmp	r3, #0
   169de:	bf08      	it	eq
   169e0:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
   169e4:	d254      	bcs.n	16a90 <conf_value_from_str+0x142>
            *(int16_t *)vp = val;
   169e6:	8038      	strh	r0, [r7, #0]
    return 0;
   169e8:	2000      	movs	r0, #0
   169ea:	e048      	b.n	16a7e <conf_value_from_str+0x130>
            if (val < INT32_MIN || val > INT32_MAX) {
   169ec:	f110 4200 	adds.w	r2, r0, #2147483648	; 0x80000000
   169f0:	f141 0300 	adc.w	r3, r1, #0
   169f4:	2b01      	cmp	r3, #1
   169f6:	bf08      	it	eq
   169f8:	2a00      	cmpeq	r2, #0
   169fa:	d24b      	bcs.n	16a94 <conf_value_from_str+0x146>
            *(int32_t *)vp = val;
   169fc:	6038      	str	r0, [r7, #0]
    return 0;
   169fe:	2000      	movs	r0, #0
   16a00:	e03d      	b.n	16a7e <conf_value_from_str+0x130>
        uval = strtoull(val_str, &eptr, 0);
   16a02:	2200      	movs	r2, #0
   16a04:	a901      	add	r1, sp, #4
   16a06:	f005 fbbd 	bl	1c184 <strtoull>
        if (*eptr != '\0') {
   16a0a:	9b01      	ldr	r3, [sp, #4]
   16a0c:	781b      	ldrb	r3, [r3, #0]
   16a0e:	2b00      	cmp	r3, #0
   16a10:	d142      	bne.n	16a98 <conf_value_from_str+0x14a>
        if (type == CONF_UINT8) {
   16a12:	2c0b      	cmp	r4, #11
   16a14:	d007      	beq.n	16a26 <conf_value_from_str+0xd8>
        } else if (type == CONF_UINT16) {
   16a16:	2c0c      	cmp	r4, #12
   16a18:	d00d      	beq.n	16a36 <conf_value_from_str+0xe8>
        } else if (type == CONF_UINT32) {
   16a1a:	2c0d      	cmp	r4, #13
   16a1c:	d013      	beq.n	16a46 <conf_value_from_str+0xf8>
            *(uint64_t *)vp = uval;
   16a1e:	e9c7 0100 	strd	r0, r1, [r7]
    return 0;
   16a22:	2000      	movs	r0, #0
   16a24:	e02b      	b.n	16a7e <conf_value_from_str+0x130>
            if (uval > UINT8_MAX) {
   16a26:	2900      	cmp	r1, #0
   16a28:	bf08      	it	eq
   16a2a:	f5b0 7f80 	cmpeq.w	r0, #256	; 0x100
   16a2e:	d235      	bcs.n	16a9c <conf_value_from_str+0x14e>
            *(uint8_t *)vp = uval;
   16a30:	7038      	strb	r0, [r7, #0]
    return 0;
   16a32:	2000      	movs	r0, #0
   16a34:	e023      	b.n	16a7e <conf_value_from_str+0x130>
            if (uval > UINT16_MAX) {
   16a36:	2900      	cmp	r1, #0
   16a38:	bf08      	it	eq
   16a3a:	f5b0 3f80 	cmpeq.w	r0, #65536	; 0x10000
   16a3e:	d22f      	bcs.n	16aa0 <conf_value_from_str+0x152>
            *(uint16_t *)vp = uval;
   16a40:	8038      	strh	r0, [r7, #0]
    return 0;
   16a42:	2000      	movs	r0, #0
   16a44:	e01b      	b.n	16a7e <conf_value_from_str+0x130>
            if (uval > UINT32_MAX) {
   16a46:	2901      	cmp	r1, #1
   16a48:	bf08      	it	eq
   16a4a:	2800      	cmpeq	r0, #0
   16a4c:	d22a      	bcs.n	16aa4 <conf_value_from_str+0x156>
            *(uint32_t *)vp = uval;
   16a4e:	6038      	str	r0, [r7, #0]
    return 0;
   16a50:	2000      	movs	r0, #0
   16a52:	e014      	b.n	16a7e <conf_value_from_str+0x130>
        val = strlen(val_str);
   16a54:	f7f4 ff08 	bl	b868 <strlen>
   16a58:	2100      	movs	r1, #0
        if (val + 1 > maxlen) {
   16a5a:	f110 0b01 	adds.w	fp, r0, #1
   16a5e:	f141 0c00 	adc.w	ip, r1, #0
   16a62:	17f3      	asrs	r3, r6, #31
   16a64:	455e      	cmp	r6, fp
   16a66:	eb73 030c 	sbcs.w	r3, r3, ip
   16a6a:	db1d      	blt.n	16aa8 <conf_value_from_str+0x15a>
        strcpy(vp, val_str);
   16a6c:	4629      	mov	r1, r5
   16a6e:	4638      	mov	r0, r7
   16a70:	f005 fb48 	bl	1c104 <strcpy>
    return 0;
   16a74:	2000      	movs	r0, #0
        break;
   16a76:	e002      	b.n	16a7e <conf_value_from_str+0x130>
    return OS_INVALID_PARM;
   16a78:	2003      	movs	r0, #3
}
   16a7a:	4770      	bx	lr
    return OS_INVALID_PARM;
   16a7c:	2003      	movs	r0, #3
}
   16a7e:	b002      	add	sp, #8
   16a80:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
    return OS_INVALID_PARM;
   16a84:	2003      	movs	r0, #3
   16a86:	e7fa      	b.n	16a7e <conf_value_from_str+0x130>
   16a88:	2003      	movs	r0, #3
   16a8a:	e7f8      	b.n	16a7e <conf_value_from_str+0x130>
   16a8c:	2003      	movs	r0, #3
   16a8e:	e7f6      	b.n	16a7e <conf_value_from_str+0x130>
   16a90:	2003      	movs	r0, #3
   16a92:	e7f4      	b.n	16a7e <conf_value_from_str+0x130>
   16a94:	2003      	movs	r0, #3
   16a96:	e7f2      	b.n	16a7e <conf_value_from_str+0x130>
   16a98:	2003      	movs	r0, #3
   16a9a:	e7f0      	b.n	16a7e <conf_value_from_str+0x130>
   16a9c:	2003      	movs	r0, #3
   16a9e:	e7ee      	b.n	16a7e <conf_value_from_str+0x130>
   16aa0:	2003      	movs	r0, #3
   16aa2:	e7ec      	b.n	16a7e <conf_value_from_str+0x130>
   16aa4:	2003      	movs	r0, #3
   16aa6:	e7ea      	b.n	16a7e <conf_value_from_str+0x130>
   16aa8:	2003      	movs	r0, #3
   16aaa:	e7e8      	b.n	16a7e <conf_value_from_str+0x130>

00016aac <conf_str_from_value>:
    if (type == CONF_STRING) {
   16aac:	2806      	cmp	r0, #6
   16aae:	d04b      	beq.n	16b48 <conf_str_from_value+0x9c>
{
   16ab0:	b570      	push	{r4, r5, r6, lr}
   16ab2:	b082      	sub	sp, #8
   16ab4:	4616      	mov	r6, r2
   16ab6:	460c      	mov	r4, r1
    switch (type) {
   16ab8:	1e85      	subs	r5, r0, #2
   16aba:	2d0c      	cmp	r5, #12
   16abc:	d846      	bhi.n	16b4c <conf_str_from_value+0xa0>
   16abe:	e8df f005 	tbb	[pc, r5]
   16ac2:	0707      	.short	0x0707
   16ac4:	45450707 	.word	0x45450707
   16ac8:	29074545 	.word	0x29074545
   16acc:	2929      	.short	0x2929
   16ace:	29          	.byte	0x29
   16acf:	00          	.byte	0x00
        if (type == CONF_BOOL) {
   16ad0:	280a      	cmp	r0, #10
   16ad2:	d008      	beq.n	16ae6 <conf_str_from_value+0x3a>
        } else if (type == CONF_INT8) {
   16ad4:	2802      	cmp	r0, #2
   16ad6:	d012      	beq.n	16afe <conf_str_from_value+0x52>
        } else if (type == CONF_INT16) {
   16ad8:	2803      	cmp	r0, #3
   16ada:	d014      	beq.n	16b06 <conf_str_from_value+0x5a>
        } else if (type == CONF_INT32) {
   16adc:	2804      	cmp	r0, #4
   16ade:	d016      	beq.n	16b0e <conf_str_from_value+0x62>
            val = *(int64_t *)vp;
   16ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
   16ae4:	e001      	b.n	16aea <conf_str_from_value+0x3e>
            val = *(bool *)vp;
   16ae6:	7820      	ldrb	r0, [r4, #0]
   16ae8:	2100      	movs	r1, #0
        snprintf(buf, buf_len, "%lld", val);
   16aea:	e9cd 0100 	strd	r0, r1, [sp]
   16aee:	4a18      	ldr	r2, [pc, #96]	; (16b50 <conf_str_from_value+0xa4>)
   16af0:	4619      	mov	r1, r3
   16af2:	4630      	mov	r0, r6
   16af4:	f7f5 f9e3 	bl	bebe <snprintf>
        return buf;
   16af8:	4630      	mov	r0, r6
}
   16afa:	b002      	add	sp, #8
   16afc:	bd70      	pop	{r4, r5, r6, pc}
            val = *(int8_t *)vp;
   16afe:	f994 0000 	ldrsb.w	r0, [r4]
   16b02:	17c1      	asrs	r1, r0, #31
   16b04:	e7f1      	b.n	16aea <conf_str_from_value+0x3e>
            val = *(int16_t *)vp;
   16b06:	f9b4 0000 	ldrsh.w	r0, [r4]
   16b0a:	17c1      	asrs	r1, r0, #31
   16b0c:	e7ed      	b.n	16aea <conf_str_from_value+0x3e>
            val = *(int32_t *)vp;
   16b0e:	6808      	ldr	r0, [r1, #0]
   16b10:	17c1      	asrs	r1, r0, #31
   16b12:	e7ea      	b.n	16aea <conf_str_from_value+0x3e>
        if (type == CONF_UINT8) {
   16b14:	280b      	cmp	r0, #11
   16b16:	d006      	beq.n	16b26 <conf_str_from_value+0x7a>
        } else if (type == CONF_UINT16) {
   16b18:	280c      	cmp	r0, #12
   16b1a:	d00f      	beq.n	16b3c <conf_str_from_value+0x90>
        } else if (type == CONF_UINT32) {
   16b1c:	280d      	cmp	r0, #13
   16b1e:	d010      	beq.n	16b42 <conf_str_from_value+0x96>
            uval = *(uint64_t *)vp;
   16b20:	e9d1 0100 	ldrd	r0, r1, [r1]
   16b24:	e001      	b.n	16b2a <conf_str_from_value+0x7e>
            uval = *(uint8_t *)vp;
   16b26:	7820      	ldrb	r0, [r4, #0]
   16b28:	2100      	movs	r1, #0
        snprintf(buf, buf_len, "%llu", uval);
   16b2a:	e9cd 0100 	strd	r0, r1, [sp]
   16b2e:	4a09      	ldr	r2, [pc, #36]	; (16b54 <conf_str_from_value+0xa8>)
   16b30:	4619      	mov	r1, r3
   16b32:	4630      	mov	r0, r6
   16b34:	f7f5 f9c3 	bl	bebe <snprintf>
        return buf;
   16b38:	4630      	mov	r0, r6
   16b3a:	e7de      	b.n	16afa <conf_str_from_value+0x4e>
            uval = *(uint16_t *)vp;
   16b3c:	8820      	ldrh	r0, [r4, #0]
   16b3e:	2100      	movs	r1, #0
   16b40:	e7f3      	b.n	16b2a <conf_str_from_value+0x7e>
            uval = *(uint32_t *)vp;
   16b42:	6808      	ldr	r0, [r1, #0]
   16b44:	2100      	movs	r1, #0
   16b46:	e7f0      	b.n	16b2a <conf_str_from_value+0x7e>
        return vp;
   16b48:	4608      	mov	r0, r1
}
   16b4a:	4770      	bx	lr
        return NULL;
   16b4c:	2000      	movs	r0, #0
   16b4e:	e7d4      	b.n	16afa <conf_str_from_value+0x4e>
   16b50:	000291ec 	.word	0x000291ec
   16b54:	000291f4 	.word	0x000291f4

00016b58 <conf_set_value>:
    return 0;
}

int
conf_set_value(char *name, char *val_str)
{
   16b58:	b530      	push	{r4, r5, lr}
   16b5a:	b08b      	sub	sp, #44	; 0x2c
   16b5c:	4604      	mov	r4, r0
   16b5e:	460d      	mov	r5, r1
    int name_argc;
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;

    conf_lock();
   16b60:	f7ff fea0 	bl	168a4 <conf_lock>
    ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   16b64:	aa01      	add	r2, sp, #4
   16b66:	a909      	add	r1, sp, #36	; 0x24
   16b68:	4620      	mov	r0, r4
   16b6a:	f7ff fee5 	bl	16938 <conf_parse_and_lookup>
    if (!ch) {
   16b6e:	b158      	cbz	r0, 16b88 <conf_set_value+0x30>
        rc = OS_INVALID_PARM;
        goto out;
    }

    rc = conf_set_cb(ch, name_argc - 1, &name_argv[1], val_str);
   16b70:	462b      	mov	r3, r5
   16b72:	aa02      	add	r2, sp, #8
   16b74:	9909      	ldr	r1, [sp, #36]	; 0x24
   16b76:	3901      	subs	r1, #1
   16b78:	f7ff fe54 	bl	16824 <conf_set_cb>
   16b7c:	4604      	mov	r4, r0

out:
    conf_unlock();
   16b7e:	f7ff fe9b 	bl	168b8 <conf_unlock>
    return rc;
}
   16b82:	4620      	mov	r0, r4
   16b84:	b00b      	add	sp, #44	; 0x2c
   16b86:	bd30      	pop	{r4, r5, pc}
        rc = OS_INVALID_PARM;
   16b88:	2403      	movs	r4, #3
   16b8a:	e7f8      	b.n	16b7e <conf_set_value+0x26>

00016b8c <conf_commit>:
}


int
conf_commit(char *name)
{
   16b8c:	b530      	push	{r4, r5, lr}
   16b8e:	b08b      	sub	sp, #44	; 0x2c
   16b90:	4604      	mov	r4, r0
    char *name_argv[CONF_MAX_DIR_DEPTH];
    struct conf_handler *ch;
    int rc;
    int rc2;

    conf_lock();
   16b92:	f7ff fe87 	bl	168a4 <conf_lock>
    if (name) {
   16b96:	b16c      	cbz	r4, 16bb4 <conf_commit+0x28>
        ch = conf_parse_and_lookup(name, &name_argc, name_argv);
   16b98:	aa01      	add	r2, sp, #4
   16b9a:	a909      	add	r1, sp, #36	; 0x24
   16b9c:	4620      	mov	r0, r4
   16b9e:	f7ff fecb 	bl	16938 <conf_parse_and_lookup>
        if (!ch) {
   16ba2:	b1c0      	cbz	r0, 16bd6 <conf_commit+0x4a>
            rc = OS_INVALID_PARM;
            goto out;
        }
        rc = conf_commit_cb(ch);
   16ba4:	f7ff fe53 	bl	1684e <conf_commit_cb>
   16ba8:	4605      	mov	r5, r0
                }
            }
        }
    }
out:
    conf_unlock();
   16baa:	f7ff fe85 	bl	168b8 <conf_unlock>
    return rc;
}
   16bae:	4628      	mov	r0, r5
   16bb0:	b00b      	add	sp, #44	; 0x2c
   16bb2:	bd30      	pop	{r4, r5, pc}
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   16bb4:	4b09      	ldr	r3, [pc, #36]	; (16bdc <conf_commit+0x50>)
   16bb6:	681c      	ldr	r4, [r3, #0]
        rc = 0;
   16bb8:	2500      	movs	r5, #0
        SLIST_FOREACH(ch, &conf_handlers, ch_list) {
   16bba:	e000      	b.n	16bbe <conf_commit+0x32>
   16bbc:	6824      	ldr	r4, [r4, #0]
   16bbe:	2c00      	cmp	r4, #0
   16bc0:	d0f3      	beq.n	16baa <conf_commit+0x1e>
            if (ch->ch_commit) {
   16bc2:	6963      	ldr	r3, [r4, #20]
   16bc4:	2b00      	cmp	r3, #0
   16bc6:	d0f9      	beq.n	16bbc <conf_commit+0x30>
                rc2 = conf_commit_cb(ch);
   16bc8:	4620      	mov	r0, r4
   16bca:	f7ff fe40 	bl	1684e <conf_commit_cb>
                if (!rc) {
   16bce:	2d00      	cmp	r5, #0
   16bd0:	d1f4      	bne.n	16bbc <conf_commit+0x30>
                    rc = rc2;
   16bd2:	4605      	mov	r5, r0
   16bd4:	e7f2      	b.n	16bbc <conf_commit+0x30>
            rc = OS_INVALID_PARM;
   16bd6:	2503      	movs	r5, #3
   16bd8:	e7e7      	b.n	16baa <conf_commit+0x1e>
   16bda:	bf00      	nop
   16bdc:	20007f50 	.word	0x20007f50

00016be0 <flash_area_find_idx>:
const struct flash_area *flash_map;
int flash_map_entries;

static int
flash_area_find_idx(uint8_t id)
{
   16be0:	b410      	push	{r4}
    int i;

    if (flash_map == NULL) {
   16be2:	4b0c      	ldr	r3, [pc, #48]	; (16c14 <flash_area_find_idx+0x34>)
   16be4:	681c      	ldr	r4, [r3, #0]
   16be6:	b194      	cbz	r4, 16c0e <flash_area_find_idx+0x2e>
        return -1;
    }

    for (i = 0; i < flash_map_entries; i++) {
   16be8:	2300      	movs	r3, #0
   16bea:	4a0b      	ldr	r2, [pc, #44]	; (16c18 <flash_area_find_idx+0x38>)
   16bec:	6812      	ldr	r2, [r2, #0]
   16bee:	429a      	cmp	r2, r3
   16bf0:	dd07      	ble.n	16c02 <flash_area_find_idx+0x22>
        if (flash_map[i].fa_id == id) {
   16bf2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   16bf6:	008a      	lsls	r2, r1, #2
   16bf8:	5ca2      	ldrb	r2, [r4, r2]
   16bfa:	4282      	cmp	r2, r0
   16bfc:	d003      	beq.n	16c06 <flash_area_find_idx+0x26>
    for (i = 0; i < flash_map_entries; i++) {
   16bfe:	3301      	adds	r3, #1
   16c00:	e7f3      	b.n	16bea <flash_area_find_idx+0xa>
            return i;
        }
    }

    return -1;
   16c02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   16c06:	4618      	mov	r0, r3
   16c08:	f85d 4b04 	ldr.w	r4, [sp], #4
   16c0c:	4770      	bx	lr
        return -1;
   16c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16c12:	e7f8      	b.n	16c06 <flash_area_find_idx+0x26>
   16c14:	20007f60 	.word	0x20007f60
   16c18:	20007f64 	.word	0x20007f64

00016c1c <flash_map_area_overlaps>:
    const struct flash_area *area2;
    uint32_t end1;
    uint32_t end2;
    int i;

    for (i = 0; i < flash_map_entries; i++) {
   16c1c:	2300      	movs	r3, #0
   16c1e:	4a13      	ldr	r2, [pc, #76]	; (16c6c <flash_map_area_overlaps+0x50>)
   16c20:	6812      	ldr	r2, [r2, #0]
   16c22:	429a      	cmp	r2, r3
   16c24:	dd1f      	ble.n	16c66 <flash_map_area_overlaps+0x4a>
{
   16c26:	b430      	push	{r4, r5}
   16c28:	e004      	b.n	16c34 <flash_map_area_overlaps+0x18>
    for (i = 0; i < flash_map_entries; i++) {
   16c2a:	3301      	adds	r3, #1
   16c2c:	4a0f      	ldr	r2, [pc, #60]	; (16c6c <flash_map_area_overlaps+0x50>)
   16c2e:	6812      	ldr	r2, [r2, #0]
   16c30:	429a      	cmp	r2, r3
   16c32:	dd15      	ble.n	16c60 <flash_map_area_overlaps+0x44>
        area2 = &flash_map[i];
   16c34:	4a0e      	ldr	r2, [pc, #56]	; (16c70 <flash_map_area_overlaps+0x54>)
   16c36:	6812      	ldr	r2, [r2, #0]
   16c38:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   16c3c:	00a1      	lsls	r1, r4, #2
   16c3e:	440a      	add	r2, r1

        if (area1->fa_device_id == area2->fa_device_id) {
   16c40:	7844      	ldrb	r4, [r0, #1]
   16c42:	7851      	ldrb	r1, [r2, #1]
   16c44:	428c      	cmp	r4, r1
   16c46:	d1f0      	bne.n	16c2a <flash_map_area_overlaps+0xe>
            end1 = area1->fa_off + area1->fa_size;
   16c48:	6845      	ldr	r5, [r0, #4]
   16c4a:	6881      	ldr	r1, [r0, #8]
   16c4c:	4429      	add	r1, r5
            end2 = area2->fa_off + area2->fa_size;
   16c4e:	6854      	ldr	r4, [r2, #4]
   16c50:	6892      	ldr	r2, [r2, #8]
   16c52:	4422      	add	r2, r4

            if (end1 > area2->fa_off && area1->fa_off < end2) {
   16c54:	428c      	cmp	r4, r1
   16c56:	d2e8      	bcs.n	16c2a <flash_map_area_overlaps+0xe>
   16c58:	4295      	cmp	r5, r2
   16c5a:	d2e6      	bcs.n	16c2a <flash_map_area_overlaps+0xe>
                return true;
   16c5c:	2001      	movs	r0, #1
   16c5e:	e000      	b.n	16c62 <flash_map_area_overlaps+0x46>
            }
        }
    }

    return false;
   16c60:	2000      	movs	r0, #0
}
   16c62:	bc30      	pop	{r4, r5}
   16c64:	4770      	bx	lr
    return false;
   16c66:	2000      	movs	r0, #0
}
   16c68:	4770      	bx	lr
   16c6a:	bf00      	nop
   16c6c:	20007f64 	.word	0x20007f64
   16c70:	20007f60 	.word	0x20007f60

00016c74 <flash_map_add_new_dflt_areas>:
 * Adds areas from the hardcoded flash map that aren't present in, and don't
 * overlap with, the manufacturing flash map.
 */
static void
flash_map_add_new_dflt_areas(void)
{
   16c74:	b570      	push	{r4, r5, r6, lr}

    const struct flash_area *dflt_area;
    struct flash_area *dst_area;
    int i;
    
    for (i = 0; i < num_dflt_entries; i++) {
   16c76:	2400      	movs	r4, #0
   16c78:	e00a      	b.n	16c90 <flash_map_add_new_dflt_areas+0x1c>
            /* Default flash map contains a new entry. */
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "no room: id=%d",
                               dflt_area->fa_id);
                DEBUG_PANIC();
   16c7a:	f7f1 faa1 	bl	81c0 <hal_debugger_connected>
   16c7e:	b100      	cbz	r0, 16c82 <flash_map_add_new_dflt_areas+0xe>
   16c80:	be01      	bkpt	0x0001
   16c82:	2300      	movs	r3, #0
   16c84:	461a      	mov	r2, r3
   16c86:	4619      	mov	r1, r3
   16c88:	4618      	mov	r0, r3
   16c8a:	f7f2 fe2f 	bl	98ec <__assert_func>
    for (i = 0; i < num_dflt_entries; i++) {
   16c8e:	3401      	adds	r4, #1
   16c90:	2c05      	cmp	r4, #5
   16c92:	dc26      	bgt.n	16ce2 <flash_map_add_new_dflt_areas+0x6e>
        dflt_area = &sysflash_map_dflt[i];
   16c94:	0063      	lsls	r3, r4, #1
   16c96:	4423      	add	r3, r4
   16c98:	009a      	lsls	r2, r3, #2
   16c9a:	4b12      	ldr	r3, [pc, #72]	; (16ce4 <flash_map_add_new_dflt_areas+0x70>)
   16c9c:	18d6      	adds	r6, r2, r3
        if (flash_area_find_idx(dflt_area->fa_id) == -1) {
   16c9e:	5c98      	ldrb	r0, [r3, r2]
   16ca0:	f7ff ff9e 	bl	16be0 <flash_area_find_idx>
   16ca4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16ca8:	d1f1      	bne.n	16c8e <flash_map_add_new_dflt_areas+0x1a>
            if (flash_map_entries >= MYNEWT_VAL(FLASH_MAP_MAX_AREAS)) {
   16caa:	4b0f      	ldr	r3, [pc, #60]	; (16ce8 <flash_map_add_new_dflt_areas+0x74>)
   16cac:	681d      	ldr	r5, [r3, #0]
   16cae:	2d09      	cmp	r5, #9
   16cb0:	dce3      	bgt.n	16c7a <flash_map_add_new_dflt_areas+0x6>
                return;
            } 

            /* Add the default entry if it doesn't cause any overlaps. */
            if (flash_map_area_overlaps(dflt_area)) {
   16cb2:	4630      	mov	r0, r6
   16cb4:	f7ff ffb2 	bl	16c1c <flash_map_area_overlaps>
   16cb8:	2800      	cmp	r0, #0
   16cba:	d1e8      	bne.n	16c8e <flash_map_add_new_dflt_areas+0x1a>
                DFLT_LOG_DEBUG("failed to add default flash area: "
                               "overlap: id=%d",
                               dflt_area->fa_id);
            } else {
                /* Cast away const. */
                dst_area = (struct flash_area *) &flash_map[flash_map_entries];
   16cbc:	4b0b      	ldr	r3, [pc, #44]	; (16cec <flash_map_add_new_dflt_areas+0x78>)
   16cbe:	681b      	ldr	r3, [r3, #0]
   16cc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   16cc4:	00aa      	lsls	r2, r5, #2
   16cc6:	4413      	add	r3, r2

                *dst_area = *dflt_area;
   16cc8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   16ccc:	0091      	lsls	r1, r2, #2
   16cce:	4a05      	ldr	r2, [pc, #20]	; (16ce4 <flash_map_add_new_dflt_areas+0x70>)
   16cd0:	440a      	add	r2, r1
   16cd2:	ca07      	ldmia	r2, {r0, r1, r2}
   16cd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                flash_map_entries++;
   16cd8:	4a03      	ldr	r2, [pc, #12]	; (16ce8 <flash_map_add_new_dflt_areas+0x74>)
   16cda:	6813      	ldr	r3, [r2, #0]
   16cdc:	3301      	adds	r3, #1
   16cde:	6013      	str	r3, [r2, #0]
   16ce0:	e7d5      	b.n	16c8e <flash_map_add_new_dflt_areas+0x1a>
            }
        }
    }
}
   16ce2:	bd70      	pop	{r4, r5, r6, pc}
   16ce4:	000291fc 	.word	0x000291fc
   16ce8:	20007f64 	.word	0x20007f64
   16cec:	20007f60 	.word	0x20007f60

00016cf0 <flash_map_read_mfg>:
{
   16cf0:	b570      	push	{r4, r5, r6, lr}
   16cf2:	b086      	sub	sp, #24
   16cf4:	4605      	mov	r5, r0
   16cf6:	460e      	mov	r6, r1
   16cf8:	4614      	mov	r4, r2
    *out_num_areas = 0;
   16cfa:	2300      	movs	r3, #0
   16cfc:	6013      	str	r3, [r2, #0]
    mfg_init();
   16cfe:	f000 fa11 	bl	17124 <mfg_init>
    mfg_open(&reader);
   16d02:	a801      	add	r0, sp, #4
   16d04:	f000 fa2e 	bl	17164 <mfg_open>
        if (*out_num_areas >= max_areas) {
   16d08:	6823      	ldr	r3, [r4, #0]
   16d0a:	42ab      	cmp	r3, r5
   16d0c:	da29      	bge.n	16d62 <flash_map_read_mfg+0x72>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   16d0e:	2102      	movs	r1, #2
   16d10:	a801      	add	r0, sp, #4
   16d12:	f000 f9f0 	bl	170f6 <mfg_seek_next_with_type>
   16d16:	4603      	mov	r3, r0
        switch (rc) {
   16d18:	f110 0f0f 	cmn.w	r0, #15
   16d1c:	d003      	beq.n	16d26 <flash_map_read_mfg+0x36>
   16d1e:	b120      	cbz	r0, 16d2a <flash_map_read_mfg+0x3a>
}
   16d20:	4618      	mov	r0, r3
   16d22:	b006      	add	sp, #24
   16d24:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   16d26:	2300      	movs	r3, #0
   16d28:	e7fa      	b.n	16d20 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   16d2a:	a903      	add	r1, sp, #12
   16d2c:	a801      	add	r0, sp, #4
   16d2e:	f000 f9ef 	bl	17110 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   16d32:	4603      	mov	r3, r0
   16d34:	2800      	cmp	r0, #0
   16d36:	d1f3      	bne.n	16d20 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   16d38:	6823      	ldr	r3, [r4, #0]
   16d3a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   16d3e:	009a      	lsls	r2, r3, #2
   16d40:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   16d42:	f89d 100c 	ldrb.w	r1, [sp, #12]
   16d46:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   16d48:	f89d 200d 	ldrb.w	r2, [sp, #13]
   16d4c:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   16d4e:	f8dd 200e 	ldr.w	r2, [sp, #14]
   16d52:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   16d54:	f8dd 2012 	ldr.w	r2, [sp, #18]
   16d58:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   16d5a:	6823      	ldr	r3, [r4, #0]
   16d5c:	3301      	adds	r3, #1
   16d5e:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   16d60:	e7d2      	b.n	16d08 <flash_map_read_mfg+0x18>
            return -1;
   16d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   16d66:	e7db      	b.n	16d20 <flash_map_read_mfg+0x30>

00016d68 <flash_area_open>:
{
   16d68:	b538      	push	{r3, r4, r5, lr}
    if (flash_map == NULL) {
   16d6a:	4b0b      	ldr	r3, [pc, #44]	; (16d98 <flash_area_open+0x30>)
   16d6c:	681c      	ldr	r4, [r3, #0]
   16d6e:	b164      	cbz	r4, 16d8a <flash_area_open+0x22>
   16d70:	460d      	mov	r5, r1
    idx = flash_area_find_idx(id);
   16d72:	f7ff ff35 	bl	16be0 <flash_area_find_idx>
    if (idx == -1) {
   16d76:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   16d7a:	d009      	beq.n	16d90 <flash_area_open+0x28>
    *fap = &flash_map[idx];
   16d7c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   16d80:	0083      	lsls	r3, r0, #2
   16d82:	441c      	add	r4, r3
   16d84:	602c      	str	r4, [r5, #0]
    return 0;
   16d86:	2000      	movs	r0, #0
}
   16d88:	bd38      	pop	{r3, r4, r5, pc}
        return SYS_EACCES;
   16d8a:	f06f 0006 	mvn.w	r0, #6
   16d8e:	e7fb      	b.n	16d88 <flash_area_open+0x20>
        return SYS_ENOENT;
   16d90:	f06f 0003 	mvn.w	r0, #3
   16d94:	e7f8      	b.n	16d88 <flash_area_open+0x20>
   16d96:	bf00      	nop
   16d98:	20007f60 	.word	0x20007f60

00016d9c <flash_area_read>:
{
   16d9c:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   16d9e:	6884      	ldr	r4, [r0, #8]
   16da0:	428c      	cmp	r4, r1
   16da2:	d308      	bcc.n	16db6 <flash_area_read+0x1a>
   16da4:	18cd      	adds	r5, r1, r3
   16da6:	42ac      	cmp	r4, r5
   16da8:	d308      	bcc.n	16dbc <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   16daa:	6844      	ldr	r4, [r0, #4]
   16dac:	4421      	add	r1, r4
   16dae:	7840      	ldrb	r0, [r0, #1]
   16db0:	f003 fa76 	bl	1a2a0 <hal_flash_read>
}
   16db4:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   16db6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16dba:	e7fb      	b.n	16db4 <flash_area_read+0x18>
   16dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16dc0:	e7f8      	b.n	16db4 <flash_area_read+0x18>

00016dc2 <flash_area_write>:
{
   16dc2:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   16dc4:	6884      	ldr	r4, [r0, #8]
   16dc6:	428c      	cmp	r4, r1
   16dc8:	d308      	bcc.n	16ddc <flash_area_write+0x1a>
   16dca:	18cd      	adds	r5, r1, r3
   16dcc:	42ac      	cmp	r4, r5
   16dce:	d308      	bcc.n	16de2 <flash_area_write+0x20>
    return hal_flash_write(fa->fa_device_id, fa->fa_off + off,
   16dd0:	6844      	ldr	r4, [r0, #4]
   16dd2:	4421      	add	r1, r4
   16dd4:	7840      	ldrb	r0, [r0, #1]
   16dd6:	f003 fa8d 	bl	1a2f4 <hal_flash_write>
}
   16dda:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   16ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16de0:	e7fb      	b.n	16dda <flash_area_write+0x18>
   16de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16de6:	e7f8      	b.n	16dda <flash_area_write+0x18>

00016de8 <flash_area_erase>:
    if (off > fa->fa_size || off + len > fa->fa_size) {
   16de8:	6883      	ldr	r3, [r0, #8]
   16dea:	428b      	cmp	r3, r1
   16dec:	d309      	bcc.n	16e02 <flash_area_erase+0x1a>
{
   16dee:	b510      	push	{r4, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   16df0:	188c      	adds	r4, r1, r2
   16df2:	42a3      	cmp	r3, r4
   16df4:	d308      	bcc.n	16e08 <flash_area_erase+0x20>
    return hal_flash_erase(fa->fa_device_id, fa->fa_off + off, len);
   16df6:	6843      	ldr	r3, [r0, #4]
   16df8:	4419      	add	r1, r3
   16dfa:	7840      	ldrb	r0, [r0, #1]
   16dfc:	f003 fab4 	bl	1a368 <hal_flash_erase>
}
   16e00:	bd10      	pop	{r4, pc}
        return -1;
   16e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   16e06:	4770      	bx	lr
        return -1;
   16e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   16e0c:	e7f8      	b.n	16e00 <flash_area_erase+0x18>

00016e0e <flash_area_align>:
{
   16e0e:	b508      	push	{r3, lr}
    return hal_flash_align(fa->fa_device_id);
   16e10:	7840      	ldrb	r0, [r0, #1]
   16e12:	f003 fa35 	bl	1a280 <hal_flash_align>
}
   16e16:	bd08      	pop	{r3, pc}

00016e18 <flash_area_erased_val>:
{
   16e18:	b508      	push	{r3, lr}
    return hal_flash_erased_val(fa->fa_device_id);
   16e1a:	7840      	ldrb	r0, [r0, #1]
   16e1c:	f003 fa38 	bl	1a290 <hal_flash_erased_val>
}
   16e20:	bd08      	pop	{r3, pc}

00016e22 <flash_area_is_empty>:
{
   16e22:	b510      	push	{r4, lr}
   16e24:	460c      	mov	r4, r1
    *empty = false;
   16e26:	2300      	movs	r3, #0
   16e28:	700b      	strb	r3, [r1, #0]
    rc = hal_flash_isempty_no_buf(fa->fa_device_id, fa->fa_off, fa->fa_size);
   16e2a:	6882      	ldr	r2, [r0, #8]
   16e2c:	6841      	ldr	r1, [r0, #4]
   16e2e:	7840      	ldrb	r0, [r0, #1]
   16e30:	f003 fb4f 	bl	1a4d2 <hal_flash_isempty_no_buf>
    if (rc < 0) {
   16e34:	2800      	cmp	r0, #0
   16e36:	db02      	blt.n	16e3e <flash_area_is_empty+0x1c>
    } else if (rc == 1) {
   16e38:	2801      	cmp	r0, #1
   16e3a:	d001      	beq.n	16e40 <flash_area_is_empty+0x1e>
    return 0;
   16e3c:	2000      	movs	r0, #0
}
   16e3e:	bd10      	pop	{r4, pc}
        *empty = true;
   16e40:	2301      	movs	r3, #1
   16e42:	7023      	strb	r3, [r4, #0]
    return 0;
   16e44:	2000      	movs	r0, #0
   16e46:	e7fa      	b.n	16e3e <flash_area_is_empty+0x1c>

00016e48 <flash_area_read_is_empty>:
{
   16e48:	b510      	push	{r4, lr}
    return hal_flash_isempty(fa->fa_device_id, fa->fa_off + off, dst, len);
   16e4a:	6844      	ldr	r4, [r0, #4]
   16e4c:	4421      	add	r1, r4
   16e4e:	7840      	ldrb	r0, [r0, #1]
   16e50:	f003 fb0e 	bl	1a470 <hal_flash_isempty>
}
   16e54:	bd10      	pop	{r4, pc}

00016e56 <flash_area_id_from_image_slot>:
    switch (slot) {
   16e56:	b170      	cbz	r0, 16e76 <flash_area_id_from_image_slot+0x20>
{
   16e58:	b508      	push	{r3, lr}
    switch (slot) {
   16e5a:	2801      	cmp	r0, #1
   16e5c:	d101      	bne.n	16e62 <flash_area_id_from_image_slot+0xc>
        return FLASH_AREA_IMAGE_1;
   16e5e:	2002      	movs	r0, #2
}
   16e60:	bd08      	pop	{r3, pc}
        assert(0);
   16e62:	f7f1 f9ad 	bl	81c0 <hal_debugger_connected>
   16e66:	b100      	cbz	r0, 16e6a <flash_area_id_from_image_slot+0x14>
   16e68:	be01      	bkpt	0x0001
   16e6a:	2300      	movs	r3, #0
   16e6c:	461a      	mov	r2, r3
   16e6e:	4619      	mov	r1, r3
   16e70:	4618      	mov	r0, r3
   16e72:	f7f2 fd3b 	bl	98ec <__assert_func>
        return FLASH_AREA_IMAGE_0;
   16e76:	2001      	movs	r0, #1
}
   16e78:	4770      	bx	lr
	...

00016e7c <flash_map_init>:

void
flash_map_init(void)
{
   16e7c:	b510      	push	{r4, lr}
   16e7e:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   16e80:	4b1a      	ldr	r3, [pc, #104]	; (16eec <flash_map_init+0x70>)
   16e82:	781b      	ldrb	r3, [r3, #0]
   16e84:	b193      	cbz	r3, 16eac <flash_map_init+0x30>

    rc = hal_flash_init();
   16e86:	f003 f9e7 	bl	1a258 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16e8a:	b9c8      	cbnz	r0, 16ec0 <flash_map_init+0x44>
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   16e8c:	4b18      	ldr	r3, [pc, #96]	; (16ef0 <flash_map_init+0x74>)
   16e8e:	4a19      	ldr	r2, [pc, #100]	; (16ef4 <flash_map_init+0x78>)
   16e90:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   16e92:	4b19      	ldr	r3, [pc, #100]	; (16ef8 <flash_map_init+0x7c>)
   16e94:	2206      	movs	r2, #6
   16e96:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   16e98:	aa03      	add	r2, sp, #12
   16e9a:	4918      	ldr	r1, [pc, #96]	; (16efc <flash_map_init+0x80>)
   16e9c:	200a      	movs	r0, #10
   16e9e:	f7ff ff27 	bl	16cf0 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc != 0 || num_areas == 0) {
   16ea2:	b908      	cbnz	r0, 16ea8 <flash_map_init+0x2c>
   16ea4:	9b03      	ldr	r3, [sp, #12]
   16ea6:	b9c3      	cbnz	r3, 16eda <flash_map_init+0x5e>
    /* The hardcoded flash map may contain new areas that aren't present in the
     * manufacturing flash map.  Try including them if they don't overlap with
     * any mfg areas.
     */
    flash_map_add_new_dflt_areas();
}
   16ea8:	b004      	add	sp, #16
   16eaa:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   16eac:	f7f1 f988 	bl	81c0 <hal_debugger_connected>
   16eb0:	b100      	cbz	r0, 16eb4 <flash_map_init+0x38>
   16eb2:	be01      	bkpt	0x0001
   16eb4:	2300      	movs	r3, #0
   16eb6:	461a      	mov	r2, r3
   16eb8:	4619      	mov	r1, r3
   16eba:	4618      	mov	r0, r3
   16ebc:	f7f2 fd16 	bl	98ec <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   16ec0:	f7f1 f97e 	bl	81c0 <hal_debugger_connected>
   16ec4:	b100      	cbz	r0, 16ec8 <flash_map_init+0x4c>
   16ec6:	be01      	bkpt	0x0001
   16ec8:	2000      	movs	r0, #0
   16eca:	9000      	str	r0, [sp, #0]
   16ecc:	4b0c      	ldr	r3, [pc, #48]	; (16f00 <flash_map_init+0x84>)
   16ece:	681c      	ldr	r4, [r3, #0]
   16ed0:	4603      	mov	r3, r0
   16ed2:	4602      	mov	r2, r0
   16ed4:	4601      	mov	r1, r0
   16ed6:	47a0      	blx	r4
   16ed8:	e7d8      	b.n	16e8c <flash_map_init+0x10>
    flash_map = mfg_areas;
   16eda:	4a05      	ldr	r2, [pc, #20]	; (16ef0 <flash_map_init+0x74>)
   16edc:	4907      	ldr	r1, [pc, #28]	; (16efc <flash_map_init+0x80>)
   16ede:	6011      	str	r1, [r2, #0]
    flash_map_entries = num_areas;
   16ee0:	4a05      	ldr	r2, [pc, #20]	; (16ef8 <flash_map_init+0x7c>)
   16ee2:	6013      	str	r3, [r2, #0]
    flash_map_add_new_dflt_areas();
   16ee4:	f7ff fec6 	bl	16c74 <flash_map_add_new_dflt_areas>
   16ee8:	e7de      	b.n	16ea8 <flash_map_init+0x2c>
   16eea:	bf00      	nop
   16eec:	20000506 	.word	0x20000506
   16ef0:	20007f60 	.word	0x20007f60
   16ef4:	000291fc 	.word	0x000291fc
   16ef8:	20007f64 	.word	0x20007f64
   16efc:	20007f68 	.word	0x20007f68
   16f00:	200000ec 	.word	0x200000ec

00016f04 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   16f04:	b530      	push	{r4, r5, lr}
   16f06:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   16f08:	7885      	ldrb	r5, [r0, #2]
   16f0a:	4b21      	ldr	r3, [pc, #132]	; (16f90 <mfg_seek_next_aux+0x8c>)
   16f0c:	681b      	ldr	r3, [r3, #0]
   16f0e:	429d      	cmp	r5, r3
   16f10:	da32      	bge.n	16f78 <mfg_seek_next_aux+0x74>
   16f12:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   16f14:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   16f18:	0093      	lsls	r3, r2, #2
   16f1a:	a901      	add	r1, sp, #4
   16f1c:	4a1d      	ldr	r2, [pc, #116]	; (16f94 <mfg_seek_next_aux+0x90>)
   16f1e:	5cd0      	ldrb	r0, [r2, r3]
   16f20:	f7ff ff22 	bl	16d68 <flash_area_open>
    if (rc != 0) {
   16f24:	bb58      	cbnz	r0, 16f7e <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   16f26:	6862      	ldr	r2, [r4, #4]
   16f28:	b9c2      	cbnz	r2, 16f5c <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   16f2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   16f2e:	00aa      	lsls	r2, r5, #2
   16f30:	4b18      	ldr	r3, [pc, #96]	; (16f94 <mfg_seek_next_aux+0x90>)
   16f32:	4413      	add	r3, r2
   16f34:	685b      	ldr	r3, [r3, #4]
   16f36:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   16f38:	6861      	ldr	r1, [r4, #4]
   16f3a:	9801      	ldr	r0, [sp, #4]
   16f3c:	6883      	ldr	r3, [r0, #8]
   16f3e:	3b08      	subs	r3, #8
   16f40:	4299      	cmp	r1, r3
   16f42:	d310      	bcc.n	16f66 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   16f44:	78a3      	ldrb	r3, [r4, #2]
   16f46:	1c59      	adds	r1, r3, #1
   16f48:	4a11      	ldr	r2, [pc, #68]	; (16f90 <mfg_seek_next_aux+0x8c>)
   16f4a:	6812      	ldr	r2, [r2, #0]
   16f4c:	4291      	cmp	r1, r2
   16f4e:	da19      	bge.n	16f84 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   16f50:	2200      	movs	r2, #0
   16f52:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   16f54:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   16f56:	f06f 0305 	mvn.w	r3, #5
   16f5a:	e015      	b.n	16f88 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   16f5c:	7863      	ldrb	r3, [r4, #1]
   16f5e:	4413      	add	r3, r2
   16f60:	3302      	adds	r3, #2
   16f62:	6063      	str	r3, [r4, #4]
   16f64:	e7e8      	b.n	16f38 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   16f66:	2302      	movs	r3, #2
   16f68:	4622      	mov	r2, r4
   16f6a:	f7ff ff17 	bl	16d9c <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   16f6e:	4603      	mov	r3, r0
   16f70:	b150      	cbz	r0, 16f88 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   16f72:	f06f 0304 	mvn.w	r3, #4
   16f76:	e007      	b.n	16f88 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   16f78:	f06f 0301 	mvn.w	r3, #1
   16f7c:	e004      	b.n	16f88 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   16f7e:	f06f 0304 	mvn.w	r3, #4
   16f82:	e001      	b.n	16f88 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   16f84:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   16f88:	4618      	mov	r0, r3
   16f8a:	b003      	add	sp, #12
   16f8c:	bd30      	pop	{r4, r5, pc}
   16f8e:	bf00      	nop
   16f90:	20007ffc 	.word	0x20007ffc
   16f94:	20007fe4 	.word	0x20007fe4

00016f98 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   16f98:	b530      	push	{r4, r5, lr}
   16f9a:	b085      	sub	sp, #20
   16f9c:	4605      	mov	r5, r0
   16f9e:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   16fa0:	a903      	add	r1, sp, #12
   16fa2:	f7ff fee1 	bl	16d68 <flash_area_open>
    if (rc != 0) {
   16fa6:	b9e8      	cbnz	r0, 16fe4 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   16fa8:	9803      	ldr	r0, [sp, #12]
   16faa:	6881      	ldr	r1, [r0, #8]
   16fac:	2308      	movs	r3, #8
   16fae:	aa01      	add	r2, sp, #4
   16fb0:	3908      	subs	r1, #8
   16fb2:	f7ff fef3 	bl	16d9c <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   16fb6:	4601      	mov	r1, r0
   16fb8:	b9b8      	cbnz	r0, 16fea <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   16fba:	9a02      	ldr	r2, [sp, #8]
   16fbc:	4b11      	ldr	r3, [pc, #68]	; (17004 <mfg_read_mmr+0x6c>)
   16fbe:	429a      	cmp	r2, r3
   16fc0:	d116      	bne.n	16ff0 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   16fc2:	f89d 3006 	ldrb.w	r3, [sp, #6]
   16fc6:	2b02      	cmp	r3, #2
   16fc8:	d115      	bne.n	16ff6 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   16fca:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   16fce:	9b03      	ldr	r3, [sp, #12]
   16fd0:	689b      	ldr	r3, [r3, #8]
   16fd2:	429a      	cmp	r2, r3
   16fd4:	d812      	bhi.n	16ffc <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   16fd6:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   16fd8:	7025      	strb	r5, [r4, #0]
   16fda:	6063      	str	r3, [r4, #4]
   16fdc:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   16fde:	4608      	mov	r0, r1
   16fe0:	b005      	add	sp, #20
   16fe2:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   16fe4:	f06f 0104 	mvn.w	r1, #4
   16fe8:	e7f9      	b.n	16fde <mfg_read_mmr+0x46>
        return SYS_EIO;
   16fea:	f06f 0104 	mvn.w	r1, #4
   16fee:	e7f6      	b.n	16fde <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   16ff0:	f06f 0108 	mvn.w	r1, #8
   16ff4:	e7f3      	b.n	16fde <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   16ff6:	f06f 010b 	mvn.w	r1, #11
   16ffa:	e7f0      	b.n	16fde <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   16ffc:	f06f 0108 	mvn.w	r1, #8
   17000:	e7ed      	b.n	16fde <mfg_read_mmr+0x46>
   17002:	bf00      	nop
   17004:	3bb2a269 	.word	0x3bb2a269

00017008 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   17008:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1700a:	2300      	movs	r3, #0
   1700c:	4a11      	ldr	r2, [pc, #68]	; (17054 <mfg_read_next_mmr+0x4c>)
   1700e:	6812      	ldr	r2, [r2, #0]
   17010:	429a      	cmp	r2, r3
   17012:	dd08      	ble.n	17026 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   17014:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   17018:	008a      	lsls	r2, r1, #2
   1701a:	490f      	ldr	r1, [pc, #60]	; (17058 <mfg_read_next_mmr+0x50>)
   1701c:	5c8a      	ldrb	r2, [r1, r2]
   1701e:	4282      	cmp	r2, r0
   17020:	d011      	beq.n	17046 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   17022:	3301      	adds	r3, #1
   17024:	e7f2      	b.n	1700c <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   17026:	2a01      	cmp	r2, #1
   17028:	dc11      	bgt.n	1704e <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1702a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1702e:	0093      	lsls	r3, r2, #2
   17030:	4909      	ldr	r1, [pc, #36]	; (17058 <mfg_read_next_mmr+0x50>)
   17032:	4419      	add	r1, r3
   17034:	f7ff ffb0 	bl	16f98 <mfg_read_mmr>
    if (rc != 0) {
   17038:	4603      	mov	r3, r0
   1703a:	b930      	cbnz	r0, 1704a <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1703c:	4905      	ldr	r1, [pc, #20]	; (17054 <mfg_read_next_mmr+0x4c>)
   1703e:	680a      	ldr	r2, [r1, #0]
   17040:	3201      	adds	r2, #1
   17042:	600a      	str	r2, [r1, #0]
    return 0;
   17044:	e001      	b.n	1704a <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   17046:	f06f 030a 	mvn.w	r3, #10
}
   1704a:	4618      	mov	r0, r3
   1704c:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1704e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17052:	e7fa      	b.n	1704a <mfg_read_next_mmr+0x42>
   17054:	20007ffc 	.word	0x20007ffc
   17058:	20007fe4 	.word	0x20007fe4

0001705c <mfg_open_flash_area>:
{
   1705c:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1705e:	7883      	ldrb	r3, [r0, #2]
   17060:	4a0d      	ldr	r2, [pc, #52]	; (17098 <mfg_open_flash_area+0x3c>)
   17062:	6812      	ldr	r2, [r2, #0]
   17064:	4293      	cmp	r3, r2
   17066:	da0a      	bge.n	1707e <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   17068:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1706c:	009a      	lsls	r2, r3, #2
   1706e:	4b0b      	ldr	r3, [pc, #44]	; (1709c <mfg_open_flash_area+0x40>)
   17070:	5c98      	ldrb	r0, [r3, r2]
   17072:	f7ff fe79 	bl	16d68 <flash_area_open>
    if (rc != 0) {
   17076:	4603      	mov	r3, r0
   17078:	b958      	cbnz	r0, 17092 <mfg_open_flash_area+0x36>
}
   1707a:	4618      	mov	r0, r3
   1707c:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1707e:	f7f1 f89f 	bl	81c0 <hal_debugger_connected>
   17082:	b100      	cbz	r0, 17086 <mfg_open_flash_area+0x2a>
   17084:	be01      	bkpt	0x0001
   17086:	2300      	movs	r3, #0
   17088:	461a      	mov	r2, r3
   1708a:	4619      	mov	r1, r3
   1708c:	4618      	mov	r0, r3
   1708e:	f7f2 fc2d 	bl	98ec <__assert_func>
        return SYS_EIO;
   17092:	f06f 0304 	mvn.w	r3, #4
   17096:	e7f0      	b.n	1707a <mfg_open_flash_area+0x1e>
   17098:	20007ffc 	.word	0x20007ffc
   1709c:	20007fe4 	.word	0x20007fe4

000170a0 <mfg_read_tlv_body>:
{
   170a0:	b570      	push	{r4, r5, r6, lr}
   170a2:	b082      	sub	sp, #8
   170a4:	4606      	mov	r6, r0
   170a6:	460c      	mov	r4, r1
   170a8:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   170aa:	a901      	add	r1, sp, #4
   170ac:	f7ff ffd6 	bl	1705c <mfg_open_flash_area>
    if (rc != 0) {
   170b0:	4603      	mov	r3, r0
   170b2:	b110      	cbz	r0, 170ba <mfg_read_tlv_body+0x1a>
}
   170b4:	4618      	mov	r0, r3
   170b6:	b002      	add	sp, #8
   170b8:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   170ba:	462a      	mov	r2, r5
   170bc:	2100      	movs	r1, #0
   170be:	4620      	mov	r0, r4
   170c0:	f7f4 fb9d 	bl	b7fe <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   170c4:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   170c6:	6871      	ldr	r1, [r6, #4]
   170c8:	42ab      	cmp	r3, r5
   170ca:	bfa8      	it	ge
   170cc:	462b      	movge	r3, r5
   170ce:	4622      	mov	r2, r4
   170d0:	3102      	adds	r1, #2
   170d2:	9801      	ldr	r0, [sp, #4]
   170d4:	f7ff fe62 	bl	16d9c <flash_area_read>
    if (rc != 0) {
   170d8:	4603      	mov	r3, r0
   170da:	2800      	cmp	r0, #0
   170dc:	d0ea      	beq.n	170b4 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   170de:	f06f 0304 	mvn.w	r3, #4
   170e2:	e7e7      	b.n	170b4 <mfg_read_tlv_body+0x14>

000170e4 <mfg_seek_next>:
{
   170e4:	b510      	push	{r4, lr}
   170e6:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   170e8:	4620      	mov	r0, r4
   170ea:	f7ff ff0b 	bl	16f04 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   170ee:	f110 0f06 	cmn.w	r0, #6
   170f2:	d0f9      	beq.n	170e8 <mfg_seek_next+0x4>
}
   170f4:	bd10      	pop	{r4, pc}

000170f6 <mfg_seek_next_with_type>:
{
   170f6:	b538      	push	{r3, r4, r5, lr}
   170f8:	4604      	mov	r4, r0
   170fa:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   170fc:	4620      	mov	r0, r4
   170fe:	f7ff fff1 	bl	170e4 <mfg_seek_next>
        if (rc != 0) {
   17102:	4602      	mov	r2, r0
   17104:	b910      	cbnz	r0, 1710c <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   17106:	7823      	ldrb	r3, [r4, #0]
   17108:	42ab      	cmp	r3, r5
   1710a:	d1f7      	bne.n	170fc <mfg_seek_next_with_type+0x6>
}
   1710c:	4610      	mov	r0, r2
   1710e:	bd38      	pop	{r3, r4, r5, pc}

00017110 <mfg_read_tlv_flash_area>:
{
   17110:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   17112:	220a      	movs	r2, #10
   17114:	f7ff ffc4 	bl	170a0 <mfg_read_tlv_body>
}
   17118:	bd08      	pop	{r3, pc}

0001711a <mfg_read_tlv_mmr_ref>:
{
   1711a:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1711c:	2201      	movs	r2, #1
   1711e:	f7ff ffbf 	bl	170a0 <mfg_read_tlv_body>
}
   17122:	bd08      	pop	{r3, pc}

00017124 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   17124:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   17126:	4b0d      	ldr	r3, [pc, #52]	; (1715c <mfg_init+0x38>)
   17128:	781b      	ldrb	r3, [r3, #0]
   1712a:	b94b      	cbnz	r3, 17140 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1712c:	4b0b      	ldr	r3, [pc, #44]	; (1715c <mfg_init+0x38>)
   1712e:	2201      	movs	r2, #1
   17130:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   17132:	4b0b      	ldr	r3, [pc, #44]	; (17160 <mfg_init+0x3c>)
   17134:	781b      	ldrb	r3, [r3, #0]
   17136:	b123      	cbz	r3, 17142 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   17138:	2000      	movs	r0, #0
   1713a:	f7ff ff65 	bl	17008 <mfg_read_next_mmr>
    if (rc != 0) {
   1713e:	b150      	cbz	r0, 17156 <mfg_init+0x32>

    return;

err:
    MFG_LOG_ERROR("failed to read MMRs: rc=%d", rc);
}
   17140:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   17142:	f7f1 f83d 	bl	81c0 <hal_debugger_connected>
   17146:	b100      	cbz	r0, 1714a <mfg_init+0x26>
   17148:	be01      	bkpt	0x0001
   1714a:	2300      	movs	r3, #0
   1714c:	461a      	mov	r2, r3
   1714e:	4619      	mov	r1, r3
   17150:	4618      	mov	r0, r3
   17152:	f7f2 fbcb 	bl	98ec <__assert_func>
    rc = mfg_read_mmr_refs();
   17156:	f000 f80d 	bl	17174 <mfg_read_mmr_refs>
err:
   1715a:	e7f1      	b.n	17140 <mfg_init+0x1c>
   1715c:	20007fe0 	.word	0x20007fe0
   17160:	20000506 	.word	0x20000506

00017164 <mfg_open>:
{
   17164:	b510      	push	{r4, lr}
   17166:	4604      	mov	r4, r0
    mfg_init();
   17168:	f7ff ffdc 	bl	17124 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1716c:	2300      	movs	r3, #0
   1716e:	6023      	str	r3, [r4, #0]
   17170:	6063      	str	r3, [r4, #4]
}
   17172:	bd10      	pop	{r4, pc}

00017174 <mfg_read_mmr_refs>:
{
   17174:	b500      	push	{lr}
   17176:	b085      	sub	sp, #20
    mfg_open(&reader);
   17178:	a801      	add	r0, sp, #4
   1717a:	f7ff fff3 	bl	17164 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1717e:	2104      	movs	r1, #4
   17180:	eb0d 0001 	add.w	r0, sp, r1
   17184:	f7ff ffb7 	bl	170f6 <mfg_seek_next_with_type>
   17188:	4603      	mov	r3, r0
        switch (rc) {
   1718a:	f110 0f0f 	cmn.w	r0, #15
   1718e:	d004      	beq.n	1719a <mfg_read_mmr_refs+0x26>
   17190:	b128      	cbz	r0, 1719e <mfg_read_mmr_refs+0x2a>
}
   17192:	4618      	mov	r0, r3
   17194:	b005      	add	sp, #20
   17196:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1719a:	2300      	movs	r3, #0
   1719c:	e7f9      	b.n	17192 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1719e:	a903      	add	r1, sp, #12
   171a0:	a801      	add	r0, sp, #4
   171a2:	f7ff ffba 	bl	1711a <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   171a6:	4603      	mov	r3, r0
   171a8:	2800      	cmp	r0, #0
   171aa:	d1f2      	bne.n	17192 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   171ac:	f89d 000c 	ldrb.w	r0, [sp, #12]
   171b0:	f7ff ff2a 	bl	17008 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   171b4:	4603      	mov	r3, r0
   171b6:	2800      	cmp	r0, #0
   171b8:	d0e1      	beq.n	1717e <mfg_read_mmr_refs+0xa>
   171ba:	f110 0f0b 	cmn.w	r0, #11
   171be:	d0de      	beq.n	1717e <mfg_read_mmr_refs+0xa>
   171c0:	e7e7      	b.n	17192 <mfg_read_mmr_refs+0x1e>

000171c2 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   171c2:	b570      	push	{r4, r5, r6, lr}
   171c4:	b082      	sub	sp, #8
   171c6:	460c      	mov	r4, r1
   171c8:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   171ca:	b29d      	uxth	r5, r3
   171cc:	9b07      	ldr	r3, [sp, #28]
   171ce:	9300      	str	r3, [sp, #0]
   171d0:	4603      	mov	r3, r0
   171d2:	9a06      	ldr	r2, [sp, #24]
   171d4:	4629      	mov	r1, r5
   171d6:	4620      	mov	r0, r4
   171d8:	f7f3 fc0c 	bl	a9f4 <os_mempool_init>
    if (rc != 0) {
   171dc:	b108      	cbz	r0, 171e2 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   171de:	b002      	add	sp, #8
   171e0:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   171e2:	462b      	mov	r3, r5
   171e4:	9a06      	ldr	r2, [sp, #24]
   171e6:	b292      	uxth	r2, r2
   171e8:	4621      	mov	r1, r4
   171ea:	4630      	mov	r0, r6
   171ec:	f7f2 ffb5 	bl	a15a <os_mbuf_pool_init>
   171f0:	e7f5      	b.n	171de <mem_init_mbuf_pool+0x1c>

000171f2 <mem_split_frag>:
 *                              NULL on failure.
 */
struct os_mbuf *
mem_split_frag(struct os_mbuf **om, uint16_t max_frag_sz,
               mem_frag_alloc_fn *alloc_cb, void *cb_arg)
{
   171f2:	b570      	push	{r4, r5, r6, lr}
   171f4:	460d      	mov	r5, r1
    struct os_mbuf *frag;
    int rc;

    if (OS_MBUF_PKTLEN(*om) <= max_frag_sz) {
   171f6:	6806      	ldr	r6, [r0, #0]
   171f8:	8a31      	ldrh	r1, [r6, #16]
   171fa:	42a9      	cmp	r1, r5
   171fc:	d915      	bls.n	1722a <mem_split_frag+0x38>
   171fe:	4619      	mov	r1, r3
   17200:	4604      	mov	r4, r0
        *om = NULL;
        return frag;
    }

    /* Packet needs to be split.  Allocate a new buffer for the fragment. */
    frag = alloc_cb(max_frag_sz, cb_arg);
   17202:	4628      	mov	r0, r5
   17204:	4790      	blx	r2
    if (frag == NULL) {
   17206:	4606      	mov	r6, r0
   17208:	b190      	cbz	r0, 17230 <mem_split_frag+0x3e>
        goto err;
    }

    /* Move data from the front of the packet into the fragment mbuf. */
    rc = os_mbuf_appendfrom(frag, *om, 0, max_frag_sz);
   1720a:	462b      	mov	r3, r5
   1720c:	2200      	movs	r2, #0
   1720e:	6821      	ldr	r1, [r4, #0]
   17210:	f7f3 f8be 	bl	a390 <os_mbuf_appendfrom>
    if (rc != 0) {
   17214:	b960      	cbnz	r0, 17230 <mem_split_frag+0x3e>
        goto err;
    }
    os_mbuf_adj(*om, max_frag_sz);
   17216:	4629      	mov	r1, r5
   17218:	6820      	ldr	r0, [r4, #0]
   1721a:	f7f3 f910 	bl	a43e <os_mbuf_adj>

    /* Free unused portion of of source mbuf chain, if possible. */
    *om = os_mbuf_trim_front(*om);
   1721e:	6820      	ldr	r0, [r4, #0]
   17220:	f7f3 fb28 	bl	a874 <os_mbuf_trim_front>
   17224:	6020      	str	r0, [r4, #0]
    return frag;

err:
    os_mbuf_free_chain(frag);
    return NULL;
}
   17226:	4630      	mov	r0, r6
   17228:	bd70      	pop	{r4, r5, r6, pc}
        *om = NULL;
   1722a:	2300      	movs	r3, #0
   1722c:	6003      	str	r3, [r0, #0]
        return frag;
   1722e:	e7fa      	b.n	17226 <mem_split_frag+0x34>
    os_mbuf_free_chain(frag);
   17230:	4630      	mov	r0, r6
   17232:	f7f2 ffd5 	bl	a1e0 <os_mbuf_free_chain>
    return NULL;
   17236:	2600      	movs	r6, #0
   17238:	e7f5      	b.n	17226 <mem_split_frag+0x34>

0001723a <sysinit_app>:
void init_sensor_coap(void);
void pinetime_lvgl_mynewt_init(void);

void
sysinit_app(void)
{
   1723a:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1723c:	f7f2 fcda 	bl	9bf4 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   17240:	f7ff fe1c 	bl	16e7c <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   17244:	f7f2 f82c 	bl	92a0 <console_pkg_init>

    /*** Stage 50 */
    /* 50.0: config_pkg_init (sys/config) */
    config_pkg_init();
   17248:	f010 f99c 	bl	27584 <config_pkg_init>

    /*** Stage 100 */
    /* 100.0: ble_hci_ram_init (nimble/transport/ram) */
    ble_hci_ram_init();
   1724c:	f7ff f9e0 	bl	16610 <ble_hci_ram_init>
    /* 100.1: mfg_init (sys/mfg) */
    mfg_init();
   17250:	f7ff ff68 	bl	17124 <mfg_init>
    /* 100.2: modlog_init (sys/log/modlog) */
    modlog_init();
   17254:	f010 f9ab 	bl	275ae <modlog_init>

    /*** Stage 200 */
    /* 200.0: ble_hs_init (nimble/host) */
    ble_hs_init();
   17258:	f7f8 fd8e 	bl	fd78 <ble_hs_init>
    /* 200.1: log_reboot_pkg_init (sys/reboot) */
    log_reboot_pkg_init();
   1725c:	f010 fbbc 	bl	279d8 <log_reboot_pkg_init>

    /*** Stage 220 */
    /* 220.0: config_pkg_init_stage2 (sys/config) */
    config_pkg_init_stage2();
   17260:	f010 f9a4 	bl	275ac <config_pkg_init_stage2>

    /*** Stage 250 */
    /* 250.0: ble_ll_init (nimble/controller) */
    ble_ll_init();
   17264:	f006 f890 	bl	1d388 <ble_ll_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   17268:	f005 fce4 	bl	1cc34 <oc_init>

    /*** Stage 301 */
    /* 301.0: ble_svc_gap_init (nimble/host/services/gap) */
    ble_svc_gap_init();
   1726c:	f7ff f85a 	bl	16324 <ble_svc_gap_init>
    /* 301.1: oc_register_gatt (net/oic) */
    oc_register_gatt();
   17270:	f005 fcf8 	bl	1cc64 <oc_register_gatt>
    /* 301.2: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   17274:	f005 fcf7 	bl	1cc66 <oc_register_ip4>
    /* 301.3: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   17278:	f005 fcf6 	bl	1cc68 <oc_register_ip6>
    /* 301.4: oc_register_lora (net/oic) */
    oc_register_lora();
   1727c:	f005 fcf5 	bl	1cc6a <oc_register_lora>
    /* 301.5: oc_register_serial (net/oic) */
    oc_register_serial();
   17280:	f005 fcf4 	bl	1cc6c <oc_register_serial>
    /* 301.6: oc_register_tcp4 (net/oic) */
    oc_register_tcp4();
   17284:	f005 fcf3 	bl	1cc6e <oc_register_tcp4>

    /*** Stage 302 */
    /* 302.0: ble_svc_gatt_init (nimble/host/services/gatt) */
    ble_svc_gatt_init();
   17288:	f00f fc3e 	bl	26b08 <ble_svc_gatt_init>

    /*** Stage 303 */
    /* 303.0: ble_svc_ans_init (nimble/host/services/ans) */
    ble_svc_ans_init();
   1728c:	f00f fbc6 	bl	26a1c <ble_svc_ans_init>
    /* 303.1: ble_svc_dis_init (nimble/host/services/dis) */
    ble_svc_dis_init();
   17290:	f7fe ff6a 	bl	16168 <ble_svc_dis_init>

    /*** Stage 500 */
    /* 500.0: ble_store_config_init (nimble/host/store/config) */
    ble_store_config_init();
   17294:	f00f feae 	bl	26ff4 <ble_store_config_init>
    /* 500.1: imgmgr_module_init (mgmt/imgmgr) */
    imgmgr_module_init();
   17298:	f7f5 f912 	bl	c4c0 <imgmgr_module_init>
    /* 500.2: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1729c:	f004 fa28 	bl	1b6f0 <sensor_dev_create>
    /* 500.3: smp_pkg_init (mgmt/smp) */
    smp_pkg_init();
   172a0:	f005 fb48 	bl	1c934 <smp_pkg_init>
    /* 500.4: split_app_init (boot/split) */
    split_app_init();
   172a4:	f000 f9ee 	bl	17684 <split_app_init>

    /*** Stage 501 */
    /* 501.0: img_mgmt_module_init (cmd/img_mgmt/port/mynewt) */
    img_mgmt_module_init();
   172a8:	f001 f87a 	bl	183a0 <img_mgmt_module_init>
    /* 501.1: os_mgmt_module_init (cmd/os_mgmt) */
    os_mgmt_module_init();
   172ac:	f001 f9d6 	bl	1865c <os_mgmt_module_init>
    /* 501.2: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   172b0:	f004 fb72 	bl	1b998 <sensor_pkg_init>
    /* 501.3: smp_ble_pkg_init (mgmt/smp/transport/ble) */
    smp_ble_pkg_init();
   172b4:	f005 fc02 	bl	1cabc <smp_ble_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   172b8:	f005 f94a 	bl	1c550 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   172bc:	f005 f8b4 	bl	1c428 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   172c0:	f005 f832 	bl	1c328 <init_sensor_coap>

    /*** Stage 900 */
    /* 900.0: pinetime_lvgl_mynewt_init (libs/pinetime_lvgl_mynewt) */
    pinetime_lvgl_mynewt_init();
   172c4:	f005 f80c 	bl	1c2e0 <pinetime_lvgl_mynewt_init>
}
   172c8:	bd08      	pop	{r3, pc}

000172ca <boot_flag_decode>:
}

static int
boot_flag_decode(uint8_t flag)
{
    if (flag != BOOT_FLAG_SET) {
   172ca:	2801      	cmp	r0, #1
   172cc:	d101      	bne.n	172d2 <boot_flag_decode+0x8>
        return BOOT_FLAG_BAD;
    }
    return BOOT_FLAG_SET;
   172ce:	2001      	movs	r0, #1
}
   172d0:	4770      	bx	lr
        return BOOT_FLAG_BAD;
   172d2:	2002      	movs	r0, #2
   172d4:	4770      	bx	lr
	...

000172d8 <boot_magic_decode>:
{
   172d8:	b508      	push	{r3, lr}
    if (memcmp(magic, boot_img_magic, BOOT_MAGIC_SZ) == 0) {
   172da:	2210      	movs	r2, #16
   172dc:	4903      	ldr	r1, [pc, #12]	; (172ec <boot_magic_decode+0x14>)
   172de:	f7f4 fa41 	bl	b764 <memcmp>
   172e2:	b908      	cbnz	r0, 172e8 <boot_magic_decode+0x10>
        return BOOT_MAGIC_GOOD;
   172e4:	2001      	movs	r0, #1
}
   172e6:	bd08      	pop	{r3, pc}
    return BOOT_MAGIC_BAD;
   172e8:	2002      	movs	r0, #2
   172ea:	e7fc      	b.n	172e6 <boot_magic_decode+0xe>
   172ec:	00029244 	.word	0x00029244

000172f0 <boot_write_trailer>:
 * @returns 0 on success, != 0 on error.
 */
static int
boot_write_trailer(const struct flash_area *fap, uint32_t off,
        const uint8_t *inbuf, uint8_t inlen)
{
   172f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   172f4:	b083      	sub	sp, #12
   172f6:	4606      	mov	r6, r0
   172f8:	460f      	mov	r7, r1
   172fa:	4690      	mov	r8, r2
   172fc:	461c      	mov	r4, r3
    uint8_t buf[BOOT_MAX_ALIGN];
    uint8_t align;
    uint8_t erased_val;
    int rc;

    align = flash_area_align(fap);
   172fe:	f7ff fd86 	bl	16e0e <flash_area_align>
    if (inlen > BOOT_MAX_ALIGN || align > BOOT_MAX_ALIGN) {
   17302:	2c08      	cmp	r4, #8
   17304:	d823      	bhi.n	1734e <boot_write_trailer+0x5e>
   17306:	4605      	mov	r5, r0
   17308:	2808      	cmp	r0, #8
   1730a:	d823      	bhi.n	17354 <boot_write_trailer+0x64>
        return -1;
    }
    erased_val = flash_area_erased_val(fap);
   1730c:	4630      	mov	r0, r6
   1730e:	f7ff fd83 	bl	16e18 <flash_area_erased_val>
   17312:	4681      	mov	r9, r0
    if (align < inlen) {
   17314:	42a5      	cmp	r5, r4
   17316:	d200      	bcs.n	1731a <boot_write_trailer+0x2a>
        align = inlen;
   17318:	4625      	mov	r5, r4
    }
    memcpy(buf, inbuf, inlen);
   1731a:	4622      	mov	r2, r4
   1731c:	4641      	mov	r1, r8
   1731e:	4668      	mov	r0, sp
   17320:	f7f4 fa44 	bl	b7ac <memcpy>
    memset(&buf[inlen], erased_val, align - inlen);
   17324:	1b2a      	subs	r2, r5, r4
   17326:	fa5f f189 	uxtb.w	r1, r9
   1732a:	eb0d 0004 	add.w	r0, sp, r4
   1732e:	f7f4 fa66 	bl	b7fe <memset>

    rc = flash_area_write(fap, off, buf, align);
   17332:	462b      	mov	r3, r5
   17334:	466a      	mov	r2, sp
   17336:	4639      	mov	r1, r7
   17338:	4630      	mov	r0, r6
   1733a:	f7ff fd42 	bl	16dc2 <flash_area_write>
    if (rc != 0) {
   1733e:	4603      	mov	r3, r0
   17340:	b918      	cbnz	r0, 1734a <boot_write_trailer+0x5a>
        return BOOT_EFLASH;
    }

    return 0;
}
   17342:	4618      	mov	r0, r3
   17344:	b003      	add	sp, #12
   17346:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return BOOT_EFLASH;
   1734a:	2301      	movs	r3, #1
   1734c:	e7f9      	b.n	17342 <boot_write_trailer+0x52>
        return -1;
   1734e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17352:	e7f6      	b.n	17342 <boot_write_trailer+0x52>
   17354:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17358:	e7f3      	b.n	17342 <boot_write_trailer+0x52>

0001735a <boot_write_trailer_flag>:

static int
boot_write_trailer_flag(const struct flash_area *fap, uint32_t off,
        uint8_t flag_val)
{
   1735a:	b510      	push	{r4, lr}
   1735c:	b082      	sub	sp, #8
    const uint8_t buf[1] = { flag_val };
   1735e:	ac02      	add	r4, sp, #8
   17360:	f804 2d04 	strb.w	r2, [r4, #-4]!
    return boot_write_trailer(fap, off, buf, 1);
   17364:	2301      	movs	r3, #1
   17366:	4622      	mov	r2, r4
   17368:	f7ff ffc2 	bl	172f0 <boot_write_trailer>
}
   1736c:	b002      	add	sp, #8
   1736e:	bd10      	pop	{r4, pc}

00017370 <boot_magic_compatible_check>:
    switch (tbl_val) {
   17370:	2804      	cmp	r0, #4
   17372:	d00b      	beq.n	1738c <boot_magic_compatible_check+0x1c>
   17374:	2805      	cmp	r0, #5
   17376:	d104      	bne.n	17382 <boot_magic_compatible_check+0x12>
        return val != BOOT_MAGIC_GOOD;
   17378:	f111 30ff 	adds.w	r0, r1, #4294967295	; 0xffffffff
   1737c:	bf18      	it	ne
   1737e:	2001      	movne	r0, #1
   17380:	4770      	bx	lr
        return tbl_val == val;
   17382:	4288      	cmp	r0, r1
   17384:	bf14      	ite	ne
   17386:	2000      	movne	r0, #0
   17388:	2001      	moveq	r0, #1
   1738a:	4770      	bx	lr
        return 1;
   1738c:	2001      	movs	r0, #1
}
   1738e:	4770      	bx	lr

00017390 <boot_swap_info_off>:
    return fap->fa_size - BOOT_MAGIC_SZ;
   17390:	6880      	ldr	r0, [r0, #8]
}
   17392:	3828      	subs	r0, #40	; 0x28
   17394:	4770      	bx	lr

00017396 <boot_read_swap_state>:
{
   17396:	b530      	push	{r4, r5, lr}
   17398:	b087      	sub	sp, #28
   1739a:	4604      	mov	r4, r0
   1739c:	460d      	mov	r5, r1
    return fap->fa_size - BOOT_MAGIC_SZ;
   1739e:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_read_is_empty(fap, off, magic, BOOT_MAGIC_SZ);
   173a0:	2310      	movs	r3, #16
   173a2:	aa02      	add	r2, sp, #8
   173a4:	3910      	subs	r1, #16
   173a6:	f7ff fd4f 	bl	16e48 <flash_area_read_is_empty>
    if (rc < 0) {
   173aa:	2800      	cmp	r0, #0
   173ac:	db4a      	blt.n	17444 <boot_read_swap_state+0xae>
    if (rc == 1) {
   173ae:	2801      	cmp	r0, #1
   173b0:	d03e      	beq.n	17430 <boot_read_swap_state+0x9a>
        state->magic = boot_magic_decode(magic);
   173b2:	a802      	add	r0, sp, #8
   173b4:	f7ff ff90 	bl	172d8 <boot_magic_decode>
   173b8:	7028      	strb	r0, [r5, #0]
    off = boot_swap_info_off(fap);
   173ba:	4620      	mov	r0, r4
   173bc:	f7ff ffe8 	bl	17390 <boot_swap_info_off>
    rc = flash_area_read_is_empty(fap, off, &swap_info, sizeof swap_info);
   173c0:	2301      	movs	r3, #1
   173c2:	f10d 0207 	add.w	r2, sp, #7
   173c6:	4601      	mov	r1, r0
   173c8:	4620      	mov	r0, r4
   173ca:	f7ff fd3d 	bl	16e48 <flash_area_read_is_empty>
    if (rc < 0) {
   173ce:	2800      	cmp	r0, #0
   173d0:	db3b      	blt.n	1744a <boot_read_swap_state+0xb4>
    state->swap_type = BOOT_GET_SWAP_TYPE(swap_info);
   173d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   173d6:	f003 020f 	and.w	r2, r3, #15
   173da:	706a      	strb	r2, [r5, #1]
    state->image_num = BOOT_GET_IMAGE_NUM(swap_info);
   173dc:	091b      	lsrs	r3, r3, #4
   173de:	712b      	strb	r3, [r5, #4]
    if (rc == 1 || state->swap_type > BOOT_SWAP_TYPE_REVERT) {
   173e0:	2801      	cmp	r0, #1
   173e2:	d001      	beq.n	173e8 <boot_read_swap_state+0x52>
   173e4:	2a04      	cmp	r2, #4
   173e6:	d903      	bls.n	173f0 <boot_read_swap_state+0x5a>
        state->swap_type = BOOT_SWAP_TYPE_NONE;
   173e8:	2301      	movs	r3, #1
   173ea:	706b      	strb	r3, [r5, #1]
        state->image_num = 0;
   173ec:	2300      	movs	r3, #0
   173ee:	712b      	strb	r3, [r5, #4]
    return fap->fa_size - BOOT_MAGIC_SZ;
   173f0:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->copy_done,
   173f2:	2301      	movs	r3, #1
   173f4:	1caa      	adds	r2, r5, #2
   173f6:	3920      	subs	r1, #32
   173f8:	4620      	mov	r0, r4
   173fa:	f7ff fd25 	bl	16e48 <flash_area_read_is_empty>
    if (rc < 0) {
   173fe:	2800      	cmp	r0, #0
   17400:	db25      	blt.n	1744e <boot_read_swap_state+0xb8>
    if (rc == 1) {
   17402:	2801      	cmp	r0, #1
   17404:	d017      	beq.n	17436 <boot_read_swap_state+0xa0>
        state->copy_done = boot_flag_decode(state->copy_done);
   17406:	78a8      	ldrb	r0, [r5, #2]
   17408:	f7ff ff5f 	bl	172ca <boot_flag_decode>
   1740c:	70a8      	strb	r0, [r5, #2]
    return fap->fa_size - BOOT_MAGIC_SZ;
   1740e:	68a1      	ldr	r1, [r4, #8]
    rc = flash_area_read_is_empty(fap, off, &state->image_ok,
   17410:	2301      	movs	r3, #1
   17412:	1cea      	adds	r2, r5, #3
   17414:	3918      	subs	r1, #24
   17416:	4620      	mov	r0, r4
   17418:	f7ff fd16 	bl	16e48 <flash_area_read_is_empty>
    if (rc < 0) {
   1741c:	2800      	cmp	r0, #0
   1741e:	db18      	blt.n	17452 <boot_read_swap_state+0xbc>
    if (rc == 1) {
   17420:	2801      	cmp	r0, #1
   17422:	d00b      	beq.n	1743c <boot_read_swap_state+0xa6>
        state->image_ok = boot_flag_decode(state->image_ok);
   17424:	78e8      	ldrb	r0, [r5, #3]
   17426:	f7ff ff50 	bl	172ca <boot_flag_decode>
   1742a:	70e8      	strb	r0, [r5, #3]
    return 0;
   1742c:	2000      	movs	r0, #0
   1742e:	e00a      	b.n	17446 <boot_read_swap_state+0xb0>
        state->magic = BOOT_MAGIC_UNSET;
   17430:	2303      	movs	r3, #3
   17432:	702b      	strb	r3, [r5, #0]
   17434:	e7c1      	b.n	173ba <boot_read_swap_state+0x24>
        state->copy_done = BOOT_FLAG_UNSET;
   17436:	2303      	movs	r3, #3
   17438:	70ab      	strb	r3, [r5, #2]
   1743a:	e7e8      	b.n	1740e <boot_read_swap_state+0x78>
        state->image_ok = BOOT_FLAG_UNSET;
   1743c:	2303      	movs	r3, #3
   1743e:	70eb      	strb	r3, [r5, #3]
    return 0;
   17440:	2000      	movs	r0, #0
   17442:	e000      	b.n	17446 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
   17444:	2001      	movs	r0, #1
}
   17446:	b007      	add	sp, #28
   17448:	bd30      	pop	{r4, r5, pc}
        return BOOT_EFLASH;
   1744a:	2001      	movs	r0, #1
   1744c:	e7fb      	b.n	17446 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
   1744e:	2001      	movs	r0, #1
   17450:	e7f9      	b.n	17446 <boot_read_swap_state+0xb0>
        return BOOT_EFLASH;
   17452:	2001      	movs	r0, #1
   17454:	e7f7      	b.n	17446 <boot_read_swap_state+0xb0>

00017456 <boot_read_swap_state_by_id>:
{
   17456:	b510      	push	{r4, lr}
   17458:	b082      	sub	sp, #8
   1745a:	460c      	mov	r4, r1
    rc = flash_area_open(flash_area_id, &fap);
   1745c:	a901      	add	r1, sp, #4
   1745e:	b2c0      	uxtb	r0, r0
   17460:	f7ff fc82 	bl	16d68 <flash_area_open>
    if (rc != 0) {
   17464:	b110      	cbz	r0, 1746c <boot_read_swap_state_by_id+0x16>
        return BOOT_EFLASH;
   17466:	2001      	movs	r0, #1
}
   17468:	b002      	add	sp, #8
   1746a:	bd10      	pop	{r4, pc}
    rc = boot_read_swap_state(fap, state);
   1746c:	4621      	mov	r1, r4
   1746e:	9801      	ldr	r0, [sp, #4]
   17470:	f7ff ff91 	bl	17396 <boot_read_swap_state>
    return rc;
   17474:	e7f8      	b.n	17468 <boot_read_swap_state_by_id+0x12>
	...

00017478 <boot_write_magic>:
{
   17478:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   1747a:	6881      	ldr	r1, [r0, #8]
    rc = flash_area_write(fap, off, boot_img_magic, BOOT_MAGIC_SZ);
   1747c:	2310      	movs	r3, #16
   1747e:	4a05      	ldr	r2, [pc, #20]	; (17494 <boot_write_magic+0x1c>)
   17480:	3910      	subs	r1, #16
   17482:	f7ff fc9e 	bl	16dc2 <flash_area_write>
    if (rc != 0) {
   17486:	4603      	mov	r3, r0
   17488:	b908      	cbnz	r0, 1748e <boot_write_magic+0x16>
}
   1748a:	4618      	mov	r0, r3
   1748c:	bd08      	pop	{r3, pc}
        return BOOT_EFLASH;
   1748e:	2301      	movs	r3, #1
   17490:	e7fb      	b.n	1748a <boot_write_magic+0x12>
   17492:	bf00      	nop
   17494:	00029244 	.word	0x00029244

00017498 <boot_write_image_ok>:
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
}

int
boot_write_image_ok(const struct flash_area *fap)
{
   17498:	b508      	push	{r3, lr}
    return fap->fa_size - BOOT_MAGIC_SZ;
   1749a:	6881      	ldr	r1, [r0, #8]

    off = boot_image_ok_off(fap);
    BOOT_LOG_DBG("writing image_ok; fa_id=%d off=0x%lx (0x%lx)",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off));
    return boot_write_trailer_flag(fap, off, BOOT_FLAG_SET);
   1749c:	2201      	movs	r2, #1
   1749e:	3918      	subs	r1, #24
   174a0:	f7ff ff5b 	bl	1735a <boot_write_trailer_flag>
}
   174a4:	bd08      	pop	{r3, pc}

000174a6 <boot_write_swap_info>:
 * resume in case of an unexpected reset.
 */
int
boot_write_swap_info(const struct flash_area *fap, uint8_t swap_type,
                     uint8_t image_num)
{
   174a6:	b530      	push	{r4, r5, lr}
   174a8:	b083      	sub	sp, #12
    uint32_t off;
    uint8_t swap_info;

    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   174aa:	2a0e      	cmp	r2, #14
   174ac:	d811      	bhi.n	174d2 <boot_write_swap_info+0x2c>
   174ae:	4605      	mov	r5, r0
   174b0:	290e      	cmp	r1, #14
   174b2:	d818      	bhi.n	174e6 <boot_write_swap_info+0x40>
   174b4:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
   174b8:	ac02      	add	r4, sp, #8
   174ba:	f804 1d01 	strb.w	r1, [r4, #-1]!
    off = boot_swap_info_off(fap);
   174be:	f7ff ff67 	bl	17390 <boot_swap_info_off>
    BOOT_LOG_DBG("writing swap_info; fa_id=%d off=0x%lx (0x%lx), swap_type=0x%x"
                 " image_num=0x%x",
                 fap->fa_id, (unsigned long)off,
                 (unsigned long)(fap->fa_off + off), swap_type, image_num);
    return boot_write_trailer(fap, off, (const uint8_t *) &swap_info, 1);
   174c2:	2301      	movs	r3, #1
   174c4:	4622      	mov	r2, r4
   174c6:	4601      	mov	r1, r0
   174c8:	4628      	mov	r0, r5
   174ca:	f7ff ff11 	bl	172f0 <boot_write_trailer>
}
   174ce:	b003      	add	sp, #12
   174d0:	bd30      	pop	{r4, r5, pc}
    BOOT_SET_SWAP_INFO(swap_info, image_num, swap_type);
   174d2:	f7f0 fe75 	bl	81c0 <hal_debugger_connected>
   174d6:	b100      	cbz	r0, 174da <boot_write_swap_info+0x34>
   174d8:	be01      	bkpt	0x0001
   174da:	2300      	movs	r3, #0
   174dc:	461a      	mov	r2, r3
   174de:	4619      	mov	r1, r3
   174e0:	4618      	mov	r0, r3
   174e2:	f7f2 fa03 	bl	98ec <__assert_func>
   174e6:	f7f0 fe6b 	bl	81c0 <hal_debugger_connected>
   174ea:	b100      	cbz	r0, 174ee <boot_write_swap_info+0x48>
   174ec:	be01      	bkpt	0x0001
   174ee:	2300      	movs	r3, #0
   174f0:	461a      	mov	r2, r3
   174f2:	4619      	mov	r1, r3
   174f4:	4618      	mov	r0, r3
   174f6:	f7f2 f9f9 	bl	98ec <__assert_func>
	...

000174fc <boot_swap_type_multi>:
}
#endif

int
boot_swap_type_multi(int image_index)
{
   174fc:	b530      	push	{r4, r5, lr}
   174fe:	b085      	sub	sp, #20
    struct boot_swap_state primary_slot;
    struct boot_swap_state secondary_slot;
    int rc;
    size_t i;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(image_index),
   17500:	a902      	add	r1, sp, #8
   17502:	2001      	movs	r0, #1
   17504:	f7ff ffa7 	bl	17456 <boot_read_swap_state_by_id>
                                    &primary_slot);
    if (rc) {
   17508:	2800      	cmp	r0, #0
   1750a:	d13c      	bne.n	17586 <boot_swap_type_multi+0x8a>
        return BOOT_SWAP_TYPE_PANIC;
    }

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(image_index),
   1750c:	4669      	mov	r1, sp
   1750e:	2002      	movs	r0, #2
   17510:	f7ff ffa1 	bl	17456 <boot_read_swap_state_by_id>
                                    &secondary_slot);
    if (rc) {
   17514:	2800      	cmp	r0, #0
   17516:	d139      	bne.n	1758c <boot_swap_type_multi+0x90>
        return BOOT_SWAP_TYPE_PANIC;
    }

    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   17518:	2400      	movs	r4, #0
   1751a:	e007      	b.n	1752c <boot_swap_type_multi+0x30>
                                        secondary_slot.magic) &&
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
                table->image_ok_primary_slot == primary_slot.image_ok) &&
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   1751c:	792b      	ldrb	r3, [r5, #4]
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   1751e:	2b04      	cmp	r3, #4
   17520:	d028      	beq.n	17574 <boot_swap_type_multi+0x78>
                table->copy_done_primary_slot == primary_slot.copy_done)) {
   17522:	f89d 200a 	ldrb.w	r2, [sp, #10]
            (table->copy_done_primary_slot == BOOT_FLAG_ANY  ||
   17526:	4293      	cmp	r3, r2
   17528:	d024      	beq.n	17574 <boot_swap_type_multi+0x78>
    for (i = 0; i < BOOT_SWAP_TABLES_COUNT; i++) {
   1752a:	3401      	adds	r4, #1
   1752c:	2c02      	cmp	r4, #2
   1752e:	d828      	bhi.n	17582 <boot_swap_type_multi+0x86>
        table = boot_swap_tables + i;
   17530:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   17534:	0053      	lsls	r3, r2, #1
   17536:	4a16      	ldr	r2, [pc, #88]	; (17590 <boot_swap_type_multi+0x94>)
   17538:	18d5      	adds	r5, r2, r3
        if (boot_magic_compatible_check(table->magic_primary_slot,
   1753a:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1753e:	5cd0      	ldrb	r0, [r2, r3]
   17540:	f7ff ff16 	bl	17370 <boot_magic_compatible_check>
   17544:	2800      	cmp	r0, #0
   17546:	d0f0      	beq.n	1752a <boot_swap_type_multi+0x2e>
            boot_magic_compatible_check(table->magic_secondary_slot,
   17548:	f89d 1000 	ldrb.w	r1, [sp]
   1754c:	7868      	ldrb	r0, [r5, #1]
   1754e:	f7ff ff0f 	bl	17370 <boot_magic_compatible_check>
                                        primary_slot.magic) &&
   17552:	2800      	cmp	r0, #0
   17554:	d0e9      	beq.n	1752a <boot_swap_type_multi+0x2e>
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   17556:	78ab      	ldrb	r3, [r5, #2]
                                        secondary_slot.magic) &&
   17558:	2b04      	cmp	r3, #4
   1755a:	d003      	beq.n	17564 <boot_swap_type_multi+0x68>
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   1755c:	f89d 200b 	ldrb.w	r2, [sp, #11]
            (table->image_ok_primary_slot == BOOT_FLAG_ANY   ||
   17560:	4293      	cmp	r3, r2
   17562:	d1e2      	bne.n	1752a <boot_swap_type_multi+0x2e>
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   17564:	78eb      	ldrb	r3, [r5, #3]
                table->image_ok_primary_slot == primary_slot.image_ok) &&
   17566:	2b04      	cmp	r3, #4
   17568:	d0d8      	beq.n	1751c <boot_swap_type_multi+0x20>
                table->image_ok_secondary_slot == secondary_slot.image_ok) &&
   1756a:	f89d 2003 	ldrb.w	r2, [sp, #3]
            (table->image_ok_secondary_slot == BOOT_FLAG_ANY ||
   1756e:	4293      	cmp	r3, r2
   17570:	d1db      	bne.n	1752a <boot_swap_type_multi+0x2e>
   17572:	e7d3      	b.n	1751c <boot_swap_type_multi+0x20>
            BOOT_LOG_INF("Swap type: %s",
   17574:	7968      	ldrb	r0, [r5, #5]
                         table->swap_type == BOOT_SWAP_TYPE_TEST   ? "test"   :
                         table->swap_type == BOOT_SWAP_TYPE_PERM   ? "perm"   :
                         table->swap_type == BOOT_SWAP_TYPE_REVERT ? "revert" :
                         "BUG; can't happen");
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
                    table->swap_type != BOOT_SWAP_TYPE_PERM &&
   17576:	1e83      	subs	r3, r0, #2
   17578:	b2db      	uxtb	r3, r3
            if (table->swap_type != BOOT_SWAP_TYPE_TEST &&
   1757a:	2b02      	cmp	r3, #2
   1757c:	d904      	bls.n	17588 <boot_swap_type_multi+0x8c>
                    table->swap_type != BOOT_SWAP_TYPE_REVERT) {
                return BOOT_SWAP_TYPE_PANIC;
   1757e:	20ff      	movs	r0, #255	; 0xff
   17580:	e002      	b.n	17588 <boot_swap_type_multi+0x8c>
            return table->swap_type;
        }
    }

    BOOT_LOG_INF("Swap type: none");
    return BOOT_SWAP_TYPE_NONE;
   17582:	2001      	movs	r0, #1
   17584:	e000      	b.n	17588 <boot_swap_type_multi+0x8c>
        return BOOT_SWAP_TYPE_PANIC;
   17586:	20ff      	movs	r0, #255	; 0xff
}
   17588:	b005      	add	sp, #20
   1758a:	bd30      	pop	{r4, r5, pc}
        return BOOT_SWAP_TYPE_PANIC;
   1758c:	20ff      	movs	r0, #255	; 0xff
   1758e:	e7fb      	b.n	17588 <boot_swap_type_multi+0x8c>
   17590:	00029254 	.word	0x00029254

00017594 <boot_swap_type>:
 * This function is not used by the bootloader itself, but its required API
 * by external tooling like mcumgr.
 */
int
boot_swap_type(void)
{
   17594:	b508      	push	{r3, lr}
    return boot_swap_type_multi(0);
   17596:	2000      	movs	r0, #0
   17598:	f7ff ffb0 	bl	174fc <boot_swap_type_multi>
}
   1759c:	bd08      	pop	{r3, pc}

0001759e <boot_set_pending>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_pending(int permanent)
{
   1759e:	b510      	push	{r4, lr}
   175a0:	b084      	sub	sp, #16
   175a2:	4604      	mov	r4, r0
    const struct flash_area *fap;
    struct boot_swap_state state_secondary_slot;
    uint8_t swap_type;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_SECONDARY(0),
   175a4:	a901      	add	r1, sp, #4
   175a6:	2002      	movs	r0, #2
   175a8:	f7ff ff55 	bl	17456 <boot_read_swap_state_by_id>
                                    &state_secondary_slot);
    if (rc != 0) {
   175ac:	4603      	mov	r3, r0
   175ae:	bba8      	cbnz	r0, 1761c <boot_set_pending+0x7e>
        return rc;
    }

    switch (state_secondary_slot.magic) {
   175b0:	f89d 2004 	ldrb.w	r2, [sp, #4]
   175b4:	2a02      	cmp	r2, #2
   175b6:	d02b      	beq.n	17610 <boot_set_pending+0x72>
   175b8:	2a03      	cmp	r2, #3
   175ba:	d00b      	beq.n	175d4 <boot_set_pending+0x36>
   175bc:	2a01      	cmp	r2, #1
   175be:	d02d      	beq.n	1761c <boot_set_pending+0x7e>
        flash_area_erase(fap, 0, fap->fa_size);
        flash_area_close(fap);
        return BOOT_EBADIMAGE;

    default:
        assert(0);
   175c0:	f7f0 fdfe 	bl	81c0 <hal_debugger_connected>
   175c4:	b100      	cbz	r0, 175c8 <boot_set_pending+0x2a>
   175c6:	be01      	bkpt	0x0001
   175c8:	2300      	movs	r3, #0
   175ca:	461a      	mov	r2, r3
   175cc:	4619      	mov	r1, r3
   175ce:	4618      	mov	r0, r3
   175d0:	f7f2 f98c 	bl	98ec <__assert_func>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
   175d4:	a903      	add	r1, sp, #12
   175d6:	2002      	movs	r0, #2
   175d8:	f7ff fbc6 	bl	16d68 <flash_area_open>
        if (rc != 0) {
   175dc:	b148      	cbz	r0, 175f2 <boot_set_pending+0x54>
            rc = BOOT_EFLASH;
   175de:	2301      	movs	r3, #1
        if (rc == 0) {
   175e0:	b9e3      	cbnz	r3, 1761c <boot_set_pending+0x7e>
            if (permanent) {
   175e2:	b99c      	cbnz	r4, 1760c <boot_set_pending+0x6e>
                swap_type = BOOT_SWAP_TYPE_TEST;
   175e4:	2102      	movs	r1, #2
            rc = boot_write_swap_info(fap, swap_type, 0);
   175e6:	2200      	movs	r2, #0
   175e8:	9803      	ldr	r0, [sp, #12]
   175ea:	f7ff ff5c 	bl	174a6 <boot_write_swap_info>
   175ee:	4603      	mov	r3, r0
   175f0:	e014      	b.n	1761c <boot_set_pending+0x7e>
            rc = boot_write_magic(fap);
   175f2:	9803      	ldr	r0, [sp, #12]
   175f4:	f7ff ff40 	bl	17478 <boot_write_magic>
        if (rc == 0 && permanent) {
   175f8:	4603      	mov	r3, r0
   175fa:	2800      	cmp	r0, #0
   175fc:	d1f0      	bne.n	175e0 <boot_set_pending+0x42>
   175fe:	2c00      	cmp	r4, #0
   17600:	d0ee      	beq.n	175e0 <boot_set_pending+0x42>
            rc = boot_write_image_ok(fap);
   17602:	9803      	ldr	r0, [sp, #12]
   17604:	f7ff ff48 	bl	17498 <boot_write_image_ok>
   17608:	4603      	mov	r3, r0
   1760a:	e7e9      	b.n	175e0 <boot_set_pending+0x42>
                swap_type = BOOT_SWAP_TYPE_PERM;
   1760c:	2103      	movs	r1, #3
   1760e:	e7ea      	b.n	175e6 <boot_set_pending+0x48>
        rc = flash_area_open(FLASH_AREA_IMAGE_SECONDARY(0), &fap);
   17610:	a903      	add	r1, sp, #12
   17612:	2002      	movs	r0, #2
   17614:	f7ff fba8 	bl	16d68 <flash_area_open>
        if (rc != 0) {
   17618:	b118      	cbz	r0, 17622 <boot_set_pending+0x84>
            return BOOT_EFLASH;
   1761a:	2301      	movs	r3, #1
        return BOOT_EBADIMAGE;
    }
}
   1761c:	4618      	mov	r0, r3
   1761e:	b004      	add	sp, #16
   17620:	bd10      	pop	{r4, pc}
        flash_area_erase(fap, 0, fap->fa_size);
   17622:	9803      	ldr	r0, [sp, #12]
   17624:	6882      	ldr	r2, [r0, #8]
   17626:	2100      	movs	r1, #0
   17628:	f7ff fbde 	bl	16de8 <flash_area_erase>
        return BOOT_EBADIMAGE;
   1762c:	2303      	movs	r3, #3
   1762e:	e7f5      	b.n	1761c <boot_set_pending+0x7e>

00017630 <boot_set_confirmed>:
 *
 * @return                  0 on success; nonzero on failure.
 */
int
boot_set_confirmed(void)
{
   17630:	b500      	push	{lr}
   17632:	b085      	sub	sp, #20
    const struct flash_area *fap;
    struct boot_swap_state state_primary_slot;
    int rc;

    rc = boot_read_swap_state_by_id(FLASH_AREA_IMAGE_PRIMARY(0),
   17634:	a901      	add	r1, sp, #4
   17636:	2001      	movs	r0, #1
   17638:	f7ff ff0d 	bl	17456 <boot_read_swap_state_by_id>
                                    &state_primary_slot);
    if (rc != 0) {
   1763c:	4603      	mov	r3, r0
   1763e:	b9c8      	cbnz	r0, 17674 <boot_set_confirmed+0x44>
        return rc;
    }

    switch (state_primary_slot.magic) {
   17640:	f89d 2004 	ldrb.w	r2, [sp, #4]
   17644:	2a02      	cmp	r2, #2
   17646:	d014      	beq.n	17672 <boot_set_confirmed+0x42>
   17648:	2a03      	cmp	r2, #3
   1764a:	d013      	beq.n	17674 <boot_set_confirmed+0x44>
    case BOOT_MAGIC_BAD:
        /* Unexpected state. */
        return BOOT_EBADVECT;
    }

    rc = flash_area_open(FLASH_AREA_IMAGE_PRIMARY(0), &fap);
   1764c:	a903      	add	r1, sp, #12
   1764e:	2001      	movs	r0, #1
   17650:	f7ff fb8a 	bl	16d68 <flash_area_open>
    if (rc) {
   17654:	4603      	mov	r3, r0
   17656:	b988      	cbnz	r0, 1767c <boot_set_confirmed+0x4c>
        rc = BOOT_EFLASH;
        goto done;
    }

    if (state_primary_slot.copy_done == BOOT_FLAG_UNSET) {
   17658:	f89d 2006 	ldrb.w	r2, [sp, #6]
   1765c:	2a03      	cmp	r2, #3
   1765e:	d00f      	beq.n	17680 <boot_set_confirmed+0x50>
        /* Swap never completed.  This is unexpected. */
        rc = BOOT_EBADVECT;
        goto done;
    }

    if (state_primary_slot.image_ok != BOOT_FLAG_UNSET) {
   17660:	f89d 2007 	ldrb.w	r2, [sp, #7]
   17664:	2a03      	cmp	r2, #3
   17666:	d105      	bne.n	17674 <boot_set_confirmed+0x44>
        /* Already confirmed. */
        goto done;
    }

    rc = boot_write_image_ok(fap);
   17668:	9803      	ldr	r0, [sp, #12]
   1766a:	f7ff ff15 	bl	17498 <boot_write_image_ok>
   1766e:	4603      	mov	r3, r0
   17670:	e000      	b.n	17674 <boot_set_confirmed+0x44>
        return BOOT_EBADVECT;
   17672:	2304      	movs	r3, #4

done:
    flash_area_close(fap);
    return rc;
}
   17674:	4618      	mov	r0, r3
   17676:	b005      	add	sp, #20
   17678:	f85d fb04 	ldr.w	pc, [sp], #4
        rc = BOOT_EFLASH;
   1767c:	2301      	movs	r3, #1
   1767e:	e7f9      	b.n	17674 <boot_set_confirmed+0x44>
        rc = BOOT_EBADVECT;
   17680:	2304      	movs	r3, #4
   17682:	e7f7      	b.n	17674 <boot_set_confirmed+0x44>

00017684 <split_app_init>:
    },
};

void
split_app_init(void)
{
   17684:	b508      	push	{r3, lr}
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   17686:	4b0e      	ldr	r3, [pc, #56]	; (176c0 <split_app_init+0x3c>)
   17688:	781b      	ldrb	r3, [r3, #0]
   1768a:	b12b      	cbz	r3, 17698 <split_app_init+0x14>

    rc = scfg_register(&split_scfg, "split");
   1768c:	490d      	ldr	r1, [pc, #52]	; (176c4 <split_app_init+0x40>)
   1768e:	480e      	ldr	r0, [pc, #56]	; (176c8 <split_app_init+0x44>)
   17690:	f010 faa0 	bl	27bd4 <scfg_register>
    assert(rc == 0);
   17694:	b950      	cbnz	r0, 176ac <split_app_init+0x28>
}
   17696:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   17698:	f7f0 fd92 	bl	81c0 <hal_debugger_connected>
   1769c:	b100      	cbz	r0, 176a0 <split_app_init+0x1c>
   1769e:	be01      	bkpt	0x0001
   176a0:	2300      	movs	r3, #0
   176a2:	461a      	mov	r2, r3
   176a4:	4619      	mov	r1, r3
   176a6:	4618      	mov	r0, r3
   176a8:	f7f2 f920 	bl	98ec <__assert_func>
    assert(rc == 0);
   176ac:	f7f0 fd88 	bl	81c0 <hal_debugger_connected>
   176b0:	b100      	cbz	r0, 176b4 <split_app_init+0x30>
   176b2:	be01      	bkpt	0x0001
   176b4:	2300      	movs	r3, #0
   176b6:	461a      	mov	r2, r3
   176b8:	4619      	mov	r1, r3
   176ba:	4618      	mov	r0, r3
   176bc:	f7f2 f916 	bl	98ec <__assert_func>
   176c0:	20000506 	.word	0x20000506
   176c4:	00029288 	.word	0x00029288
   176c8:	20000298 	.word	0x20000298

000176cc <split_app_active_get>:

int
split_app_active_get(void)
{
    return split_app_active;
}
   176cc:	4b01      	ldr	r3, [pc, #4]	; (176d4 <split_app_active_get+0x8>)
   176ce:	f993 0000 	ldrsb.w	r0, [r3]
   176d2:	4770      	bx	lr
   176d4:	20008004 	.word	0x20008004

000176d8 <split_mode_set>:
    /* XXX: For now, cast this as an integer.  This value should either be
     * treated as an enumeration generally (i.e. not read directly and assigned
     * from values in flash), or switched to a native type of integer.  However,
     * this is not a high priority change, so just cast it for now.
     */
    if ((int) split_mode < 0 || (int) split_mode >= SPLIT_MODE_CNT) {
   176d8:	2803      	cmp	r0, #3
   176da:	d803      	bhi.n	176e4 <split_mode_set+0xc>
        return SYS_EINVAL;
    }

    split_mode_cur = split_mode;
   176dc:	4b03      	ldr	r3, [pc, #12]	; (176ec <split_mode_set+0x14>)
   176de:	7018      	strb	r0, [r3, #0]
    return 0;
   176e0:	2000      	movs	r0, #0
   176e2:	4770      	bx	lr
        return SYS_EINVAL;
   176e4:	f06f 0001 	mvn.w	r0, #1
}
   176e8:	4770      	bx	lr
   176ea:	bf00      	nop
   176ec:	20008005 	.word	0x20008005

000176f0 <split_write_split>:

int
split_write_split(split_mode_t split_mode)
{
   176f0:	b508      	push	{r3, lr}
    int rc;

    rc = split_mode_set(split_mode);
   176f2:	f7ff fff1 	bl	176d8 <split_mode_set>
    if (rc != 0) {
   176f6:	4603      	mov	r3, r0
   176f8:	b108      	cbz	r0, 176fe <split_write_split+0xe>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   176fa:	4618      	mov	r0, r3
   176fc:	bd08      	pop	{r3, pc}
    rc = scfg_save_val(&split_scfg, &split_mode_cur);
   176fe:	4903      	ldr	r1, [pc, #12]	; (1770c <split_write_split+0x1c>)
   17700:	4803      	ldr	r0, [pc, #12]	; (17710 <split_write_split+0x20>)
   17702:	f010 fa59 	bl	27bb8 <scfg_save_val>
   17706:	4603      	mov	r3, r0
   17708:	e7f7      	b.n	176fa <split_write_split+0xa>
   1770a:	bf00      	nop
   1770c:	20008005 	.word	0x20008005
   17710:	20000298 	.word	0x20000298

00017714 <img_mgmt_find_tlvs>:
 * Finds the TLVs in the specified image slot, if any.
 */
static int
img_mgmt_find_tlvs(int slot, size_t *start_off, size_t *end_off,
                   uint16_t magic)
{
   17714:	b570      	push	{r4, r5, r6, lr}
   17716:	b082      	sub	sp, #8
   17718:	460c      	mov	r4, r1
   1771a:	4616      	mov	r6, r2
   1771c:	461d      	mov	r5, r3
    struct image_tlv_info tlv_info;
    int rc;

    rc = img_mgmt_impl_read(slot, *start_off, &tlv_info, sizeof tlv_info);
   1771e:	2304      	movs	r3, #4
   17720:	eb0d 0203 	add.w	r2, sp, r3
   17724:	6809      	ldr	r1, [r1, #0]
   17726:	f000 fdd4 	bl	182d2 <img_mgmt_impl_read>
    if (rc != 0) {
   1772a:	b960      	cbnz	r0, 17746 <img_mgmt_find_tlvs+0x32>
   1772c:	4603      	mov	r3, r0
        /* Read error. */
        return MGMT_ERR_EUNKNOWN;
    }

    if (tlv_info.it_magic != magic) {
   1772e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   17732:	42aa      	cmp	r2, r5
   17734:	d10b      	bne.n	1774e <img_mgmt_find_tlvs+0x3a>
        /* No TLVs. */
        return MGMT_ERR_ENOENT;
    }

    *start_off += sizeof tlv_info;
   17736:	6822      	ldr	r2, [r4, #0]
   17738:	3204      	adds	r2, #4
   1773a:	6022      	str	r2, [r4, #0]
    *end_off = *start_off + tlv_info.it_tlv_tot;
   1773c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   17740:	440a      	add	r2, r1
   17742:	6032      	str	r2, [r6, #0]

    return 0;
   17744:	e000      	b.n	17748 <img_mgmt_find_tlvs+0x34>
        return MGMT_ERR_EUNKNOWN;
   17746:	2301      	movs	r3, #1
}
   17748:	4618      	mov	r0, r3
   1774a:	b002      	add	sp, #8
   1774c:	bd70      	pop	{r4, r5, r6, pc}
        return MGMT_ERR_ENOENT;
   1774e:	2305      	movs	r3, #5
   17750:	e7fa      	b.n	17748 <img_mgmt_find_tlvs+0x34>
	...

00017754 <img_mgmt_erase>:
/**
 * Command handler: image erase
 */
static int
img_mgmt_erase(struct mgmt_ctxt *ctxt)
{
   17754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17756:	4605      	mov	r5, r0
    CborError err;
    int rc;

    if (img_mgmt_slot_in_use(1)) {
   17758:	2001      	movs	r0, #1
   1775a:	f000 fa97 	bl	17c8c <img_mgmt_slot_in_use>
   1775e:	b998      	cbnz	r0, 17788 <img_mgmt_erase+0x34>
   17760:	4604      	mov	r4, r0
        /* No free slot. */
        return MGMT_ERR_EBADSTATE;
    }
    
    rc = img_mgmt_impl_erase_slot();
   17762:	f000 fd35 	bl	181d0 <img_mgmt_impl_erase_slot>
   17766:	4607      	mov	r7, r0
   17768:	2202      	movs	r2, #2
   1776a:	4909      	ldr	r1, [pc, #36]	; (17790 <img_mgmt_erase+0x3c>)
   1776c:	4628      	mov	r0, r5
   1776e:	f001 fe2b 	bl	193c8 <cbor_encode_text_string>
   17772:	4606      	mov	r6, r0

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, rc);
   17774:	463a      	mov	r2, r7
   17776:	17fb      	asrs	r3, r7, #31
   17778:	4628      	mov	r0, r5
   1777a:	f001 fda4 	bl	192c6 <cbor_encode_int>

    if (err != 0) {
   1777e:	ea50 0306 	orrs.w	r3, r0, r6
   17782:	d002      	beq.n	1778a <img_mgmt_erase+0x36>
        return MGMT_ERR_ENOMEM;
   17784:	2402      	movs	r4, #2
   17786:	e000      	b.n	1778a <img_mgmt_erase+0x36>
        return MGMT_ERR_EBADSTATE;
   17788:	2406      	movs	r4, #6
    }

    return 0;
}
   1778a:	4620      	mov	r0, r4
   1778c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1778e:	bf00      	nop
   17790:	00028c4c 	.word	0x00028c4c

00017794 <img_mgmt_upload_good_rsp>:

static int
img_mgmt_upload_good_rsp(struct mgmt_ctxt *ctxt)
{
   17794:	b538      	push	{r3, r4, r5, lr}
   17796:	4605      	mov	r5, r0
   17798:	2202      	movs	r2, #2
   1779a:	490e      	ldr	r1, [pc, #56]	; (177d4 <img_mgmt_upload_good_rsp+0x40>)
   1779c:	f001 fe14 	bl	193c8 <cbor_encode_text_string>
   177a0:	4604      	mov	r4, r0
    CborError err = CborNoError;

    err |= cbor_encode_text_stringz(&ctxt->encoder, "rc");
    err |= cbor_encode_int(&ctxt->encoder, MGMT_ERR_EOK);
   177a2:	2200      	movs	r2, #0
   177a4:	2300      	movs	r3, #0
   177a6:	4628      	mov	r0, r5
   177a8:	f001 fd8d 	bl	192c6 <cbor_encode_int>
   177ac:	4304      	orrs	r4, r0
   177ae:	2203      	movs	r2, #3
   177b0:	4909      	ldr	r1, [pc, #36]	; (177d8 <img_mgmt_upload_good_rsp+0x44>)
   177b2:	4628      	mov	r0, r5
   177b4:	f001 fe08 	bl	193c8 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "off");
   177b8:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&ctxt->encoder, g_img_mgmt_state.off);
   177ba:	4b08      	ldr	r3, [pc, #32]	; (177dc <img_mgmt_upload_good_rsp+0x48>)
   177bc:	685a      	ldr	r2, [r3, #4]
   177be:	2300      	movs	r3, #0
   177c0:	4628      	mov	r0, r5
   177c2:	f001 fd80 	bl	192c6 <cbor_encode_int>

    if (err != 0) {
   177c6:	ea54 0300 	orrs.w	r3, r4, r0
   177ca:	d101      	bne.n	177d0 <img_mgmt_upload_good_rsp+0x3c>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   177cc:	2000      	movs	r0, #0
}
   177ce:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   177d0:	2002      	movs	r0, #2
   177d2:	e7fc      	b.n	177ce <img_mgmt_upload_good_rsp+0x3a>
   177d4:	00028c4c 	.word	0x00028c4c
   177d8:	000292e0 	.word	0x000292e0
   177dc:	20008008 	.word	0x20008008

000177e0 <img_mgmt_read_info>:
{
   177e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   177e2:	b08d      	sub	sp, #52	; 0x34
   177e4:	4604      	mov	r4, r0
   177e6:	460d      	mov	r5, r1
   177e8:	4616      	mov	r6, r2
   177ea:	461f      	mov	r7, r3
    rc = img_mgmt_impl_read(image_slot, 0, &hdr, sizeof hdr);
   177ec:	2320      	movs	r3, #32
   177ee:	aa04      	add	r2, sp, #16
   177f0:	2100      	movs	r1, #0
   177f2:	f000 fd6e 	bl	182d2 <img_mgmt_impl_read>
    if (rc != 0) {
   177f6:	2800      	cmp	r0, #0
   177f8:	d16d      	bne.n	178d6 <img_mgmt_read_info+0xf6>
    if (ver != NULL) {
   177fa:	b11d      	cbz	r5, 17804 <img_mgmt_read_info+0x24>
        memset(ver, 0xff, sizeof(*ver));
   177fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17800:	602b      	str	r3, [r5, #0]
   17802:	606b      	str	r3, [r5, #4]
    if (hdr.ih_magic == IMAGE_MAGIC) {
   17804:	9b04      	ldr	r3, [sp, #16]
   17806:	4a3b      	ldr	r2, [pc, #236]	; (178f4 <img_mgmt_read_info+0x114>)
   17808:	4293      	cmp	r3, r2
   1780a:	d004      	beq.n	17816 <img_mgmt_read_info+0x36>
    } else if (hdr.ih_magic == 0xffffffff) {
   1780c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   17810:	d025      	beq.n	1785e <img_mgmt_read_info+0x7e>
        return MGMT_ERR_EUNKNOWN;
   17812:	2501      	movs	r5, #1
   17814:	e060      	b.n	178d8 <img_mgmt_read_info+0xf8>
        if (ver != NULL) {
   17816:	b11d      	cbz	r5, 17820 <img_mgmt_read_info+0x40>
            memcpy(ver, &hdr.ih_ver, sizeof(*ver));
   17818:	ab09      	add	r3, sp, #36	; 0x24
   1781a:	cb03      	ldmia	r3!, {r0, r1}
   1781c:	6028      	str	r0, [r5, #0]
   1781e:	6069      	str	r1, [r5, #4]
    if (flags != NULL) {
   17820:	b10f      	cbz	r7, 17826 <img_mgmt_read_info+0x46>
        *flags = hdr.ih_flags;
   17822:	9b08      	ldr	r3, [sp, #32]
   17824:	603b      	str	r3, [r7, #0]
    data_off = hdr.ih_hdr_size + hdr.ih_img_size;
   17826:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1782a:	9a07      	ldr	r2, [sp, #28]
   1782c:	4413      	add	r3, r2
   1782e:	9302      	str	r3, [sp, #8]
    rc = img_mgmt_find_tlvs(image_slot, &data_off, &data_end, IMAGE_TLV_PROT_INFO_MAGIC);
   17830:	f646 1308 	movw	r3, #26888	; 0x6908
   17834:	aa01      	add	r2, sp, #4
   17836:	a902      	add	r1, sp, #8
   17838:	4620      	mov	r0, r4
   1783a:	f7ff ff6b 	bl	17714 <img_mgmt_find_tlvs>
    if (!rc) {
   1783e:	b910      	cbnz	r0, 17846 <img_mgmt_read_info+0x66>
        data_off = data_end - sizeof(struct image_tlv_info);
   17840:	9b01      	ldr	r3, [sp, #4]
   17842:	3b04      	subs	r3, #4
   17844:	9302      	str	r3, [sp, #8]
    rc = img_mgmt_find_tlvs(image_slot, &data_off, &data_end, IMAGE_TLV_INFO_MAGIC);
   17846:	f646 1307 	movw	r3, #26887	; 0x6907
   1784a:	aa01      	add	r2, sp, #4
   1784c:	a902      	add	r1, sp, #8
   1784e:	4620      	mov	r0, r4
   17850:	f7ff ff60 	bl	17714 <img_mgmt_find_tlvs>
    if (rc != 0) {
   17854:	4605      	mov	r5, r0
   17856:	2800      	cmp	r0, #0
   17858:	d141      	bne.n	178de <img_mgmt_read_info+0xfe>
    hash_found = false;
   1785a:	2700      	movs	r7, #0
   1785c:	e00f      	b.n	1787e <img_mgmt_read_info+0x9e>
        return MGMT_ERR_ENOENT;
   1785e:	2505      	movs	r5, #5
   17860:	e03a      	b.n	178d8 <img_mgmt_read_info+0xf8>
        if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   17862:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   17866:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1786a:	4291      	cmp	r1, r2
   1786c:	d116      	bne.n	1789c <img_mgmt_read_info+0xbc>
            return MGMT_ERR_EUNKNOWN;
   1786e:	2501      	movs	r5, #1
   17870:	e032      	b.n	178d8 <img_mgmt_read_info+0xf8>
            data_off += sizeof tlv + tlv.it_len;
   17872:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   17876:	9a02      	ldr	r2, [sp, #8]
   17878:	4413      	add	r3, r2
   1787a:	3304      	adds	r3, #4
   1787c:	9302      	str	r3, [sp, #8]
    while (data_off + sizeof tlv <= data_end) {
   1787e:	9902      	ldr	r1, [sp, #8]
   17880:	1d0a      	adds	r2, r1, #4
   17882:	9b01      	ldr	r3, [sp, #4]
   17884:	429a      	cmp	r2, r3
   17886:	d823      	bhi.n	178d0 <img_mgmt_read_info+0xf0>
        rc = img_mgmt_impl_read(image_slot, data_off, &tlv, sizeof tlv);
   17888:	2304      	movs	r3, #4
   1788a:	aa03      	add	r2, sp, #12
   1788c:	4620      	mov	r0, r4
   1788e:	f000 fd20 	bl	182d2 <img_mgmt_impl_read>
        if (rc != 0) {
   17892:	bb30      	cbnz	r0, 178e2 <img_mgmt_read_info+0x102>
        if (tlv.it_type == 0xff && tlv.it_len == 0xffff) {
   17894:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17898:	2bff      	cmp	r3, #255	; 0xff
   1789a:	d0e2      	beq.n	17862 <img_mgmt_read_info+0x82>
        if (tlv.it_type != IMAGE_TLV_SHA256 || tlv.it_len != IMAGE_HASH_LEN) {
   1789c:	2b10      	cmp	r3, #16
   1789e:	d1e8      	bne.n	17872 <img_mgmt_read_info+0x92>
   178a0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   178a4:	2b20      	cmp	r3, #32
   178a6:	d1e4      	bne.n	17872 <img_mgmt_read_info+0x92>
        if (hash_found) {
   178a8:	b9ef      	cbnz	r7, 178e6 <img_mgmt_read_info+0x106>
        data_off += sizeof tlv;
   178aa:	9902      	ldr	r1, [sp, #8]
   178ac:	3104      	adds	r1, #4
   178ae:	9102      	str	r1, [sp, #8]
        if (hash != NULL) {
   178b0:	b166      	cbz	r6, 178cc <img_mgmt_read_info+0xec>
            if (data_off + IMAGE_HASH_LEN > data_end) {
   178b2:	f101 0320 	add.w	r3, r1, #32
   178b6:	9a01      	ldr	r2, [sp, #4]
   178b8:	4293      	cmp	r3, r2
   178ba:	d816      	bhi.n	178ea <img_mgmt_read_info+0x10a>
            rc = img_mgmt_impl_read(image_slot, data_off, hash,
   178bc:	2320      	movs	r3, #32
   178be:	4632      	mov	r2, r6
   178c0:	4620      	mov	r0, r4
   178c2:	f000 fd06 	bl	182d2 <img_mgmt_impl_read>
            if (rc != 0) {
   178c6:	b990      	cbnz	r0, 178ee <img_mgmt_read_info+0x10e>
        hash_found = true;
   178c8:	2701      	movs	r7, #1
   178ca:	e7d8      	b.n	1787e <img_mgmt_read_info+0x9e>
   178cc:	2701      	movs	r7, #1
   178ce:	e7d6      	b.n	1787e <img_mgmt_read_info+0x9e>
    if (!hash_found) {
   178d0:	b917      	cbnz	r7, 178d8 <img_mgmt_read_info+0xf8>
        return MGMT_ERR_EUNKNOWN;
   178d2:	2501      	movs	r5, #1
   178d4:	e000      	b.n	178d8 <img_mgmt_read_info+0xf8>
        return MGMT_ERR_EUNKNOWN;
   178d6:	2501      	movs	r5, #1
}
   178d8:	4628      	mov	r0, r5
   178da:	b00d      	add	sp, #52	; 0x34
   178dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_EUNKNOWN;
   178de:	2501      	movs	r5, #1
   178e0:	e7fa      	b.n	178d8 <img_mgmt_read_info+0xf8>
            return MGMT_ERR_EUNKNOWN;
   178e2:	2501      	movs	r5, #1
   178e4:	e7f8      	b.n	178d8 <img_mgmt_read_info+0xf8>
            return MGMT_ERR_EUNKNOWN;
   178e6:	2501      	movs	r5, #1
   178e8:	e7f6      	b.n	178d8 <img_mgmt_read_info+0xf8>
                return MGMT_ERR_EUNKNOWN;
   178ea:	2501      	movs	r5, #1
   178ec:	e7f4      	b.n	178d8 <img_mgmt_read_info+0xf8>
                return MGMT_ERR_EUNKNOWN;
   178ee:	2501      	movs	r5, #1
   178f0:	e7f2      	b.n	178d8 <img_mgmt_read_info+0xf8>
   178f2:	bf00      	nop
   178f4:	96f3b83d 	.word	0x96f3b83d

000178f8 <img_mgmt_upload_log>:
 *
 * @return                      0 on success; nonzero on failure.
 */
static int
img_mgmt_upload_log(bool is_first, bool is_last, int status)
{
   178f8:	b510      	push	{r4, lr}
   178fa:	b088      	sub	sp, #32
   178fc:	4614      	mov	r4, r2
    uint8_t hash[IMAGE_HASH_LEN];
    const uint8_t *hashp;
    int rc;

    if (is_first) {
   178fe:	b970      	cbnz	r0, 1791e <img_mgmt_upload_log+0x26>
        return img_mgmt_impl_log_upload_start(status);
    }

    if (is_last || status != 0) {
   17900:	b901      	cbnz	r1, 17904 <img_mgmt_upload_log+0xc>
   17902:	b192      	cbz	r2, 1792a <img_mgmt_upload_log+0x32>
        /* Log the image hash if we know it. */
        rc = img_mgmt_read_info(1, NULL, hash, NULL);
   17904:	2300      	movs	r3, #0
   17906:	466a      	mov	r2, sp
   17908:	4619      	mov	r1, r3
   1790a:	2001      	movs	r0, #1
   1790c:	f7ff ff68 	bl	177e0 <img_mgmt_read_info>
        if (rc != 0) {
   17910:	b148      	cbz	r0, 17926 <img_mgmt_upload_log+0x2e>
            hashp = NULL;
   17912:	2100      	movs	r1, #0
        } else {
            hashp = hash;
        }

        return img_mgmt_impl_log_upload_done(status, hashp);
   17914:	4620      	mov	r0, r4
   17916:	f000 fd63 	bl	183e0 <img_mgmt_impl_log_upload_done>
    }

    /* Nothing to log. */
    return 0;
}
   1791a:	b008      	add	sp, #32
   1791c:	bd10      	pop	{r4, pc}
        return img_mgmt_impl_log_upload_start(status);
   1791e:	4610      	mov	r0, r2
   17920:	f000 fd54 	bl	183cc <img_mgmt_impl_log_upload_start>
   17924:	e7f9      	b.n	1791a <img_mgmt_upload_log+0x22>
            hashp = hash;
   17926:	4669      	mov	r1, sp
   17928:	e7f4      	b.n	17914 <img_mgmt_upload_log+0x1c>
    return 0;
   1792a:	4610      	mov	r0, r2
   1792c:	e7f5      	b.n	1791a <img_mgmt_upload_log+0x22>

0001792e <img_mgmt_find_by_hash>:
{
   1792e:	b570      	push	{r4, r5, r6, lr}
   17930:	b088      	sub	sp, #32
   17932:	4606      	mov	r6, r0
   17934:	460d      	mov	r5, r1
    for (i = 0; i < 2; i++) {
   17936:	2400      	movs	r4, #0
   17938:	e000      	b.n	1793c <img_mgmt_find_by_hash+0xe>
   1793a:	3401      	adds	r4, #1
   1793c:	2c01      	cmp	r4, #1
   1793e:	dc0f      	bgt.n	17960 <img_mgmt_find_by_hash+0x32>
        if (img_mgmt_read_info(i, ver, hash, NULL) != 0) {
   17940:	2300      	movs	r3, #0
   17942:	466a      	mov	r2, sp
   17944:	4629      	mov	r1, r5
   17946:	4620      	mov	r0, r4
   17948:	f7ff ff4a 	bl	177e0 <img_mgmt_read_info>
   1794c:	2800      	cmp	r0, #0
   1794e:	d1f4      	bne.n	1793a <img_mgmt_find_by_hash+0xc>
        if (!memcmp(hash, find, IMAGE_HASH_LEN)) {
   17950:	2220      	movs	r2, #32
   17952:	4631      	mov	r1, r6
   17954:	4668      	mov	r0, sp
   17956:	f7f3 ff05 	bl	b764 <memcmp>
   1795a:	2800      	cmp	r0, #0
   1795c:	d1ed      	bne.n	1793a <img_mgmt_find_by_hash+0xc>
   1795e:	e001      	b.n	17964 <img_mgmt_find_by_hash+0x36>
    return -1;
   17960:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   17964:	4620      	mov	r0, r4
   17966:	b008      	add	sp, #32
   17968:	bd70      	pop	{r4, r5, r6, pc}
	...

0001796c <img_mgmt_dfu_stopped>:
    return img_mgmt_upload_good_rsp(ctxt);
}

void
img_mgmt_dfu_stopped(void)
{
   1796c:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_stopped_cb) {
   1796e:	4b03      	ldr	r3, [pc, #12]	; (1797c <img_mgmt_dfu_stopped+0x10>)
   17970:	681b      	ldr	r3, [r3, #0]
   17972:	b113      	cbz	r3, 1797a <img_mgmt_dfu_stopped+0xe>
   17974:	685b      	ldr	r3, [r3, #4]
   17976:	b103      	cbz	r3, 1797a <img_mgmt_dfu_stopped+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_stopped_cb();
   17978:	4798      	blx	r3
    }
}
   1797a:	bd08      	pop	{r3, pc}
   1797c:	20008038 	.word	0x20008038

00017980 <img_mgmt_dfu_started>:

void
img_mgmt_dfu_started(void)
{
   17980:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_started_cb) {
   17982:	4b03      	ldr	r3, [pc, #12]	; (17990 <img_mgmt_dfu_started+0x10>)
   17984:	681b      	ldr	r3, [r3, #0]
   17986:	b113      	cbz	r3, 1798e <img_mgmt_dfu_started+0xe>
   17988:	681b      	ldr	r3, [r3, #0]
   1798a:	b103      	cbz	r3, 1798e <img_mgmt_dfu_started+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_started_cb();
   1798c:	4798      	blx	r3
    }
}
   1798e:	bd08      	pop	{r3, pc}
   17990:	20008038 	.word	0x20008038

00017994 <img_mgmt_dfu_pending>:

void
img_mgmt_dfu_pending(void)
{
   17994:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_pending_cb) {
   17996:	4b03      	ldr	r3, [pc, #12]	; (179a4 <img_mgmt_dfu_pending+0x10>)
   17998:	681b      	ldr	r3, [r3, #0]
   1799a:	b113      	cbz	r3, 179a2 <img_mgmt_dfu_pending+0xe>
   1799c:	689b      	ldr	r3, [r3, #8]
   1799e:	b103      	cbz	r3, 179a2 <img_mgmt_dfu_pending+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_pending_cb();
   179a0:	4798      	blx	r3
    }
}
   179a2:	bd08      	pop	{r3, pc}
   179a4:	20008038 	.word	0x20008038

000179a8 <img_mgmt_upload>:
{
   179a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   179ac:	f5ad 7d63 	sub.w	sp, sp, #908	; 0x38c
   179b0:	4605      	mov	r5, r0
    struct img_mgmt_upload_req req = {
   179b2:	ac50      	add	r4, sp, #320	; 0x140
   179b4:	f44f 7210 	mov.w	r2, #576	; 0x240
   179b8:	2100      	movs	r1, #0
   179ba:	4620      	mov	r0, r4
   179bc:	f7f3 ff1f 	bl	b7fe <memset>
   179c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   179c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   179c8:	e9c4 2300 	strd	r2, r3, [r4]
   179cc:	e9c4 2302 	strd	r2, r3, [r4, #8]
    const struct cbor_attr_t off_attr[] = {
   179d0:	f44f 7290 	mov.w	r2, #288	; 0x120
   179d4:	2100      	movs	r1, #0
   179d6:	a808      	add	r0, sp, #32
   179d8:	f7f3 ff11 	bl	b7fe <memset>
   179dc:	4b6d      	ldr	r3, [pc, #436]	; (17b94 <img_mgmt_upload+0x1ec>)
   179de:	9308      	str	r3, [sp, #32]
   179e0:	2303      	movs	r3, #3
   179e2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
   179e6:	aa56      	add	r2, sp, #344	; 0x158
   179e8:	920a      	str	r2, [sp, #40]	; 0x28
   179ea:	aa54      	add	r2, sp, #336	; 0x150
   179ec:	920b      	str	r2, [sp, #44]	; 0x2c
   179ee:	f44f 7200 	mov.w	r2, #512	; 0x200
   179f2:	9212      	str	r2, [sp, #72]	; 0x48
   179f4:	4a68      	ldr	r2, [pc, #416]	; (17b98 <img_mgmt_upload+0x1f0>)
   179f6:	9214      	str	r2, [sp, #80]	; 0x50
   179f8:	2102      	movs	r1, #2
   179fa:	f88d 1054 	strb.w	r1, [sp, #84]	; 0x54
   179fe:	aa52      	add	r2, sp, #328	; 0x148
   17a00:	9216      	str	r2, [sp, #88]	; 0x58
   17a02:	2201      	movs	r2, #1
   17a04:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
   17a08:	4864      	ldr	r0, [pc, #400]	; (17b9c <img_mgmt_upload+0x1f4>)
   17a0a:	9020      	str	r0, [sp, #128]	; 0x80
   17a0c:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   17a10:	9422      	str	r4, [sp, #136]	; 0x88
   17a12:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   17a16:	4a62      	ldr	r2, [pc, #392]	; (17ba0 <img_mgmt_upload+0x1f8>)
   17a18:	922c      	str	r2, [sp, #176]	; 0xb0
   17a1a:	f88d 30b4 	strb.w	r3, [sp, #180]	; 0xb4
   17a1e:	abd6      	add	r3, sp, #856	; 0x358
   17a20:	932e      	str	r3, [sp, #184]	; 0xb8
   17a22:	ab55      	add	r3, sp, #340	; 0x154
   17a24:	932f      	str	r3, [sp, #188]	; 0xbc
   17a26:	2320      	movs	r3, #32
   17a28:	9336      	str	r3, [sp, #216]	; 0xd8
   17a2a:	4b5e      	ldr	r3, [pc, #376]	; (17ba4 <img_mgmt_upload+0x1fc>)
   17a2c:	9338      	str	r3, [sp, #224]	; 0xe0
   17a2e:	2305      	movs	r3, #5
   17a30:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
   17a34:	abde      	add	r3, sp, #888	; 0x378
   17a36:	933a      	str	r3, [sp, #232]	; 0xe8
    const char *errstr = NULL;
   17a38:	2300      	movs	r3, #0
   17a3a:	9307      	str	r3, [sp, #28]
    rc = cbor_read_object(&ctxt->it, off_attr);
   17a3c:	a908      	add	r1, sp, #32
   17a3e:	f105 001c 	add.w	r0, r5, #28
   17a42:	f010 fcc5 	bl	283d0 <cbor_read_object>
    if (rc != 0) {
   17a46:	2800      	cmp	r0, #0
   17a48:	f040 809d 	bne.w	17b86 <img_mgmt_upload+0x1de>
    rc = img_mgmt_impl_upload_inspect(&req, &action, &errstr);
   17a4c:	aa07      	add	r2, sp, #28
   17a4e:	4669      	mov	r1, sp
   17a50:	a850      	add	r0, sp, #320	; 0x140
   17a52:	f000 faeb 	bl	1802c <img_mgmt_impl_upload_inspect>
    if (rc != 0) {
   17a56:	4604      	mov	r4, r0
   17a58:	2800      	cmp	r0, #0
   17a5a:	d12d      	bne.n	17ab8 <img_mgmt_upload+0x110>
    if (!action.proceed) {
   17a5c:	f89d 6010 	ldrb.w	r6, [sp, #16]
   17a60:	2e00      	cmp	r6, #0
   17a62:	d02c      	beq.n	17abe <img_mgmt_upload+0x116>
    if (img_mgmt_upload_cb != NULL) {
   17a64:	4b50      	ldr	r3, [pc, #320]	; (17ba8 <img_mgmt_upload+0x200>)
   17a66:	681b      	ldr	r3, [r3, #0]
   17a68:	2b00      	cmp	r3, #0
   17a6a:	d02d      	beq.n	17ac8 <img_mgmt_upload+0x120>
        rc = img_mgmt_upload_cb(req.off, action.size, img_mgmt_upload_arg);
   17a6c:	4a4f      	ldr	r2, [pc, #316]	; (17bac <img_mgmt_upload+0x204>)
   17a6e:	6812      	ldr	r2, [r2, #0]
   17a70:	9900      	ldr	r1, [sp, #0]
   17a72:	9850      	ldr	r0, [sp, #320]	; 0x140
   17a74:	4798      	blx	r3
        if (rc != 0) {
   17a76:	4604      	mov	r4, r0
   17a78:	b330      	cbz	r0, 17ac8 <img_mgmt_upload+0x120>
            errstr = img_mgmt_err_str_app_reject;
   17a7a:	2300      	movs	r3, #0
   17a7c:	9307      	str	r3, [sp, #28]
    img_mgmt_upload_log(req.off == 0, g_img_mgmt_state.off == g_img_mgmt_state.size, rc);
   17a7e:	9850      	ldr	r0, [sp, #320]	; 0x140
   17a80:	9a51      	ldr	r2, [sp, #324]	; 0x144
   17a82:	4b4b      	ldr	r3, [pc, #300]	; (17bb0 <img_mgmt_upload+0x208>)
   17a84:	6859      	ldr	r1, [r3, #4]
   17a86:	689b      	ldr	r3, [r3, #8]
   17a88:	4302      	orrs	r2, r0
   17a8a:	bf0c      	ite	eq
   17a8c:	2001      	moveq	r0, #1
   17a8e:	2000      	movne	r0, #0
   17a90:	4622      	mov	r2, r4
   17a92:	4299      	cmp	r1, r3
   17a94:	bf14      	ite	ne
   17a96:	2100      	movne	r1, #0
   17a98:	2101      	moveq	r1, #1
   17a9a:	f7ff ff2d 	bl	178f8 <img_mgmt_upload_log>
    mgmt_evt(MGMT_EVT_OP_CMD_STATUS, MGMT_GROUP_ID_IMAGE, IMG_MGMT_ID_UPLOAD,
   17a9e:	abe1      	add	r3, sp, #900	; 0x384
   17aa0:	2201      	movs	r2, #1
   17aa2:	4611      	mov	r1, r2
   17aa4:	2002      	movs	r0, #2
   17aa6:	f7f4 fe07 	bl	c6b8 <mgmt_evt>
    if (rc != 0) {
   17aaa:	2c00      	cmp	r4, #0
   17aac:	d168      	bne.n	17b80 <img_mgmt_upload+0x1d8>
    return img_mgmt_upload_good_rsp(ctxt);
   17aae:	4628      	mov	r0, r5
   17ab0:	f7ff fe70 	bl	17794 <img_mgmt_upload_good_rsp>
   17ab4:	4604      	mov	r4, r0
   17ab6:	e067      	b.n	17b88 <img_mgmt_upload+0x1e0>
        img_mgmt_dfu_stopped();
   17ab8:	f7ff ff58 	bl	1796c <img_mgmt_dfu_stopped>
        return rc;
   17abc:	e064      	b.n	17b88 <img_mgmt_upload+0x1e0>
        return img_mgmt_upload_good_rsp(ctxt);
   17abe:	4628      	mov	r0, r5
   17ac0:	f7ff fe68 	bl	17794 <img_mgmt_upload_good_rsp>
   17ac4:	4604      	mov	r4, r0
   17ac6:	e05f      	b.n	17b88 <img_mgmt_upload+0x1e0>
    g_img_mgmt_state.area_id = action.area_id;
   17ac8:	9a03      	ldr	r2, [sp, #12]
   17aca:	4b39      	ldr	r3, [pc, #228]	; (17bb0 <img_mgmt_upload+0x208>)
   17acc:	601a      	str	r2, [r3, #0]
    g_img_mgmt_state.size = action.size;
   17ace:	9a00      	ldr	r2, [sp, #0]
   17ad0:	609a      	str	r2, [r3, #8]
    if (req.off == 0) {
   17ad2:	ab50      	add	r3, sp, #320	; 0x140
   17ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
   17ad8:	4313      	orrs	r3, r2
   17ada:	d015      	beq.n	17b08 <img_mgmt_upload+0x160>
    if (req.data_len != 0) {
   17adc:	9b54      	ldr	r3, [sp, #336]	; 0x150
   17ade:	2b00      	cmp	r3, #0
   17ae0:	d0cd      	beq.n	17a7e <img_mgmt_upload+0xd6>
        if (g_img_mgmt_state.off + req.data_len == g_img_mgmt_state.size) {
   17ae2:	4a33      	ldr	r2, [pc, #204]	; (17bb0 <img_mgmt_upload+0x208>)
   17ae4:	6851      	ldr	r1, [r2, #4]
   17ae6:	440b      	add	r3, r1
   17ae8:	6892      	ldr	r2, [r2, #8]
   17aea:	4293      	cmp	r3, r2
   17aec:	d000      	beq.n	17af0 <img_mgmt_upload+0x148>
    bool last = false;
   17aee:	2600      	movs	r6, #0
        rc = img_mgmt_impl_write_image_data(req.off, req.img_data, action.write_bytes, last);
   17af0:	4633      	mov	r3, r6
   17af2:	9a02      	ldr	r2, [sp, #8]
   17af4:	a956      	add	r1, sp, #344	; 0x158
   17af6:	9850      	ldr	r0, [sp, #320]	; 0x140
   17af8:	f000 fc06 	bl	18308 <img_mgmt_impl_write_image_data>
        if (rc != 0) {
   17afc:	4604      	mov	r4, r0
   17afe:	b370      	cbz	r0, 17b5e <img_mgmt_upload+0x1b6>
            errstr = img_mgmt_err_str_flash_write_failed;
   17b00:	2300      	movs	r3, #0
   17b02:	9307      	str	r3, [sp, #28]
            rc = MGMT_ERR_EUNKNOWN;
   17b04:	2401      	movs	r4, #1
            goto end;
   17b06:	e7ba      	b.n	17a7e <img_mgmt_upload+0xd6>
        g_img_mgmt_state.off = 0;
   17b08:	4f29      	ldr	r7, [pc, #164]	; (17bb0 <img_mgmt_upload+0x208>)
   17b0a:	f04f 0900 	mov.w	r9, #0
   17b0e:	f8c7 9004 	str.w	r9, [r7, #4]
        img_mgmt_dfu_started();
   17b12:	f7ff ff35 	bl	17980 <img_mgmt_dfu_started>
        cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_START;
   17b16:	f8cd 9384 	str.w	r9, [sp, #900]	; 0x384
        g_img_mgmt_state.data_sha_len = req.data_sha_len;
   17b1a:	f8dd 8154 	ldr.w	r8, [sp, #340]	; 0x154
   17b1e:	f887 800c 	strb.w	r8, [r7, #12]
        memcpy(g_img_mgmt_state.data_sha, req.data_sha, req.data_sha_len);
   17b22:	4642      	mov	r2, r8
   17b24:	a9d6      	add	r1, sp, #856	; 0x358
   17b26:	f107 000d 	add.w	r0, r7, #13
   17b2a:	f7f3 fe3f 	bl	b7ac <memcpy>
        memset(&g_img_mgmt_state.data_sha[req.data_sha_len], 0,
   17b2e:	f108 0008 	add.w	r0, r8, #8
   17b32:	4438      	add	r0, r7
   17b34:	f1c8 0220 	rsb	r2, r8, #32
   17b38:	4649      	mov	r1, r9
   17b3a:	3005      	adds	r0, #5
   17b3c:	f7f3 fe5f 	bl	b7fe <memset>
        if (action.erase) {
   17b40:	f89d 3011 	ldrb.w	r3, [sp, #17]
   17b44:	2b00      	cmp	r3, #0
   17b46:	d0c9      	beq.n	17adc <img_mgmt_upload+0x134>
            rc = img_mgmt_impl_erase_image_data(0, req.size);
   17b48:	9952      	ldr	r1, [sp, #328]	; 0x148
   17b4a:	4648      	mov	r0, r9
   17b4c:	f000 fbf5 	bl	1833a <img_mgmt_impl_erase_image_data>
            if (rc != 0) {
   17b50:	4604      	mov	r4, r0
   17b52:	2800      	cmp	r0, #0
   17b54:	d0c2      	beq.n	17adc <img_mgmt_upload+0x134>
                errstr = img_mgmt_err_str_flash_erase_failed;
   17b56:	f8cd 901c 	str.w	r9, [sp, #28]
                rc = MGMT_ERR_EUNKNOWN;
   17b5a:	2401      	movs	r4, #1
                goto end;
   17b5c:	e78f      	b.n	17a7e <img_mgmt_upload+0xd6>
            g_img_mgmt_state.off += action.write_bytes;
   17b5e:	9b02      	ldr	r3, [sp, #8]
   17b60:	4a13      	ldr	r2, [pc, #76]	; (17bb0 <img_mgmt_upload+0x208>)
   17b62:	6851      	ldr	r1, [r2, #4]
   17b64:	440b      	add	r3, r1
   17b66:	6053      	str	r3, [r2, #4]
            if (g_img_mgmt_state.off == g_img_mgmt_state.size) {
   17b68:	6892      	ldr	r2, [r2, #8]
   17b6a:	4293      	cmp	r3, r2
   17b6c:	d187      	bne.n	17a7e <img_mgmt_upload+0xd6>
                img_mgmt_dfu_pending();
   17b6e:	f7ff ff11 	bl	17994 <img_mgmt_dfu_pending>
                cmd_status_arg.status = IMG_MGMT_ID_UPLOAD_STATUS_ONGOING;
   17b72:	2301      	movs	r3, #1
   17b74:	93e1      	str	r3, [sp, #900]	; 0x384
                g_img_mgmt_state.area_id = -1;
   17b76:	4b0e      	ldr	r3, [pc, #56]	; (17bb0 <img_mgmt_upload+0x208>)
   17b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17b7c:	601a      	str	r2, [r3, #0]
   17b7e:	e77e      	b.n	17a7e <img_mgmt_upload+0xd6>
        img_mgmt_dfu_stopped();
   17b80:	f7ff fef4 	bl	1796c <img_mgmt_dfu_stopped>
        return img_mgmt_error_rsp(ctxt, rc, errstr);
   17b84:	e000      	b.n	17b88 <img_mgmt_upload+0x1e0>
        return MGMT_ERR_EINVAL;
   17b86:	2403      	movs	r4, #3
}
   17b88:	4620      	mov	r0, r4
   17b8a:	f50d 7d63 	add.w	sp, sp, #908	; 0x38c
   17b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   17b92:	bf00      	nop
   17b94:	000292c8 	.word	0x000292c8
   17b98:	000292d0 	.word	0x000292d0
   17b9c:	000292e0 	.word	0x000292e0
   17ba0:	000292d4 	.word	0x000292d4
   17ba4:	000292d8 	.word	0x000292d8
   17ba8:	20008040 	.word	0x20008040
   17bac:	2000803c 	.word	0x2000803c
   17bb0:	20008008 	.word	0x20008008

00017bb4 <img_mgmt_dfu_confirmed>:

void
img_mgmt_dfu_confirmed(void)
{
   17bb4:	b508      	push	{r3, lr}
    if (img_mgmt_dfu_callbacks_fn && img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb) {
   17bb6:	4b03      	ldr	r3, [pc, #12]	; (17bc4 <img_mgmt_dfu_confirmed+0x10>)
   17bb8:	681b      	ldr	r3, [r3, #0]
   17bba:	b113      	cbz	r3, 17bc2 <img_mgmt_dfu_confirmed+0xe>
   17bbc:	68db      	ldr	r3, [r3, #12]
   17bbe:	b103      	cbz	r3, 17bc2 <img_mgmt_dfu_confirmed+0xe>
        img_mgmt_dfu_callbacks_fn->dfu_confirmed_cb();
   17bc0:	4798      	blx	r3
    }
}
   17bc2:	bd08      	pop	{r3, pc}
   17bc4:	20008038 	.word	0x20008038

00017bc8 <img_mgmt_my_version>:
}


int
img_mgmt_my_version(struct image_version *ver)
{
   17bc8:	b508      	push	{r3, lr}
    return img_mgmt_read_info(IMG_MGMT_BOOT_CURR_SLOT, ver, NULL, NULL);
   17bca:	2300      	movs	r3, #0
   17bcc:	461a      	mov	r2, r3
   17bce:	4601      	mov	r1, r0
   17bd0:	4802      	ldr	r0, [pc, #8]	; (17bdc <img_mgmt_my_version+0x14>)
   17bd2:	6800      	ldr	r0, [r0, #0]
   17bd4:	f7ff fe04 	bl	177e0 <img_mgmt_read_info>
}
   17bd8:	bd08      	pop	{r3, pc}
   17bda:	bf00      	nop
   17bdc:	20008000 	.word	0x20008000

00017be0 <img_mgmt_register_group>:

void
img_mgmt_register_group(void)
{
   17be0:	b508      	push	{r3, lr}
    mgmt_register_group(&img_mgmt_group);
   17be2:	4802      	ldr	r0, [pc, #8]	; (17bec <img_mgmt_register_group+0xc>)
   17be4:	f7f4 fd04 	bl	c5f0 <mgmt_register_group>
}
   17be8:	bd08      	pop	{r3, pc}
   17bea:	bf00      	nop
   17bec:	200002bc 	.word	0x200002bc

00017bf0 <img_mgmt_state_flags>:
/**
 * Collects information about the specified image slot.
 */
uint8_t
img_mgmt_state_flags(int query_slot)
{
   17bf0:	b510      	push	{r4, lr}
    uint8_t flags;
    int swap_type;

    assert(query_slot == 0 || query_slot == 1);
   17bf2:	2801      	cmp	r0, #1
   17bf4:	d808      	bhi.n	17c08 <img_mgmt_state_flags+0x18>
   17bf6:	4604      	mov	r4, r0
    flags = 0;

    /* Determine if this is is pending or confirmed (only applicable for
     * unified images and loaders.
     */
    swap_type = img_mgmt_impl_swap_type();
   17bf8:	f000 fbb6 	bl	18368 <img_mgmt_impl_swap_type>
    switch (swap_type) {
   17bfc:	2803      	cmp	r0, #3
   17bfe:	d822      	bhi.n	17c46 <img_mgmt_state_flags+0x56>
   17c00:	e8df f000 	tbb	[pc, r0]
   17c04:	1c17120c 	.word	0x1c17120c
    assert(query_slot == 0 || query_slot == 1);
   17c08:	f7f0 fada 	bl	81c0 <hal_debugger_connected>
   17c0c:	b100      	cbz	r0, 17c10 <img_mgmt_state_flags+0x20>
   17c0e:	be01      	bkpt	0x0001
   17c10:	2300      	movs	r3, #0
   17c12:	461a      	mov	r2, r3
   17c14:	4619      	mov	r1, r3
   17c16:	4618      	mov	r0, r3
   17c18:	f7f1 fe68 	bl	98ec <__assert_func>
    case IMG_MGMT_SWAP_TYPE_NONE:
        if (query_slot == 0) {
   17c1c:	b1ac      	cbz	r4, 17c4a <img_mgmt_state_flags+0x5a>
    flags = 0;
   17c1e:	2000      	movs	r0, #0
        break;
    }

    /* Slot 0 is always active. */
    /* XXX: The slot 0 assumption only holds when running from flash. */
    if (query_slot == 0) {
   17c20:	b90c      	cbnz	r4, 17c26 <img_mgmt_state_flags+0x36>
        flags |= IMG_MGMT_STATE_F_ACTIVE;
   17c22:	f040 0004 	orr.w	r0, r0, #4
    }

    return flags;
}
   17c26:	bd10      	pop	{r4, pc}
        if (query_slot == 0) {
   17c28:	b18c      	cbz	r4, 17c4e <img_mgmt_state_flags+0x5e>
        } else if (query_slot == 1) {
   17c2a:	2c01      	cmp	r4, #1
   17c2c:	d011      	beq.n	17c52 <img_mgmt_state_flags+0x62>
    flags = 0;
   17c2e:	2000      	movs	r0, #0
   17c30:	e7f6      	b.n	17c20 <img_mgmt_state_flags+0x30>
        if (query_slot == 0) {
   17c32:	b184      	cbz	r4, 17c56 <img_mgmt_state_flags+0x66>
        } else if (query_slot == 1) {
   17c34:	2c01      	cmp	r4, #1
   17c36:	d010      	beq.n	17c5a <img_mgmt_state_flags+0x6a>
    flags = 0;
   17c38:	2000      	movs	r0, #0
   17c3a:	e7f1      	b.n	17c20 <img_mgmt_state_flags+0x30>
        if (query_slot == 0) {
   17c3c:	b17c      	cbz	r4, 17c5e <img_mgmt_state_flags+0x6e>
        } else if (query_slot == 1) {
   17c3e:	2c01      	cmp	r4, #1
   17c40:	d00f      	beq.n	17c62 <img_mgmt_state_flags+0x72>
    flags = 0;
   17c42:	2000      	movs	r0, #0
   17c44:	e7ec      	b.n	17c20 <img_mgmt_state_flags+0x30>
   17c46:	2000      	movs	r0, #0
   17c48:	e7ea      	b.n	17c20 <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_ACTIVE;
   17c4a:	2006      	movs	r0, #6
   17c4c:	e7e8      	b.n	17c20 <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   17c4e:	2002      	movs	r0, #2
   17c50:	e7e6      	b.n	17c20 <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_PENDING;
   17c52:	2001      	movs	r0, #1
   17c54:	e7e4      	b.n	17c20 <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   17c56:	2002      	movs	r0, #2
   17c58:	e7e2      	b.n	17c20 <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_PENDING | IMG_MGMT_STATE_F_PERMANENT;
   17c5a:	2009      	movs	r0, #9
   17c5c:	e7e0      	b.n	17c20 <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_ACTIVE;
   17c5e:	2004      	movs	r0, #4
   17c60:	e7de      	b.n	17c20 <img_mgmt_state_flags+0x30>
            flags |= IMG_MGMT_STATE_F_CONFIRMED;
   17c62:	2002      	movs	r0, #2
   17c64:	e7dc      	b.n	17c20 <img_mgmt_state_flags+0x30>

00017c66 <img_mgmt_state_any_pending>:
 * Indicates whether any image slot is pending (i.e., whether a test swap will
 * happen on the next reboot.
 */
int
img_mgmt_state_any_pending(void)
{
   17c66:	b508      	push	{r3, lr}
    return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   17c68:	2000      	movs	r0, #0
   17c6a:	f7ff ffc1 	bl	17bf0 <img_mgmt_state_flags>
   17c6e:	f010 0f01 	tst.w	r0, #1
   17c72:	d001      	beq.n	17c78 <img_mgmt_state_any_pending+0x12>
   17c74:	2001      	movs	r0, #1
           img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
}
   17c76:	bd08      	pop	{r3, pc}
           img_mgmt_state_flags(1) & IMG_MGMT_STATE_F_PENDING;
   17c78:	2001      	movs	r0, #1
   17c7a:	f7ff ffb9 	bl	17bf0 <img_mgmt_state_flags>
    return img_mgmt_state_flags(0) & IMG_MGMT_STATE_F_PENDING ||
   17c7e:	f010 0f01 	tst.w	r0, #1
   17c82:	d001      	beq.n	17c88 <img_mgmt_state_any_pending+0x22>
   17c84:	2001      	movs	r0, #1
   17c86:	e7f6      	b.n	17c76 <img_mgmt_state_any_pending+0x10>
   17c88:	2000      	movs	r0, #0
   17c8a:	e7f4      	b.n	17c76 <img_mgmt_state_any_pending+0x10>

00017c8c <img_mgmt_slot_in_use>:
 * Indicates whether the specified slot has any flags.  If no flags are set,
 * the slot can be freely erased.
 */
int
img_mgmt_slot_in_use(int slot)
{
   17c8c:	b508      	push	{r3, lr}
    uint8_t state_flags;

    state_flags = img_mgmt_state_flags(slot);
   17c8e:	f7ff ffaf 	bl	17bf0 <img_mgmt_state_flags>
    return state_flags & IMG_MGMT_STATE_F_ACTIVE       ||
           state_flags & IMG_MGMT_STATE_F_CONFIRMED    ||
   17c92:	f010 0f06 	tst.w	r0, #6
   17c96:	d106      	bne.n	17ca6 <img_mgmt_slot_in_use+0x1a>
   17c98:	f010 0f01 	tst.w	r0, #1
   17c9c:	d101      	bne.n	17ca2 <img_mgmt_slot_in_use+0x16>
   17c9e:	2000      	movs	r0, #0
   17ca0:	e002      	b.n	17ca8 <img_mgmt_slot_in_use+0x1c>
   17ca2:	2001      	movs	r0, #1
   17ca4:	e000      	b.n	17ca8 <img_mgmt_slot_in_use+0x1c>
   17ca6:	2001      	movs	r0, #1
           state_flags & IMG_MGMT_STATE_F_PENDING;
}
   17ca8:	bd08      	pop	{r3, pc}

00017caa <img_mgmt_state_set_pending>:
 * argument is specified, the system doesn't require a confirm after the swap
 * occurs.
 */
int
img_mgmt_state_set_pending(int slot, int permanent)
{
   17caa:	b530      	push	{r4, r5, lr}
   17cac:	b089      	sub	sp, #36	; 0x24
   17cae:	4604      	mov	r4, r0
   17cb0:	460d      	mov	r5, r1
    uint8_t hash[IMAGE_HASH_LEN];
    uint8_t state_flags;
    const uint8_t *hashp;
    int rc;

    state_flags = img_mgmt_state_flags(slot);
   17cb2:	f7ff ff9d 	bl	17bf0 <img_mgmt_state_flags>

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED && slot != 0) {
   17cb6:	f010 0f02 	tst.w	r0, #2
   17cba:	d000      	beq.n	17cbe <img_mgmt_state_set_pending+0x14>
   17cbc:	b92c      	cbnz	r4, 17cca <img_mgmt_state_set_pending+0x20>
        rc = MGMT_ERR_EBADSTATE;
        goto done;
    }

    rc = img_mgmt_impl_write_pending(slot, permanent);
   17cbe:	1c29      	adds	r1, r5, #0
   17cc0:	bf18      	it	ne
   17cc2:	2101      	movne	r1, #1
   17cc4:	4620      	mov	r0, r4
   17cc6:	f000 faa6 	bl	18216 <img_mgmt_impl_write_pending>
        rc = MGMT_ERR_EUNKNOWN;
    }

done:
    /* Log the image hash if we know it. */
    rc = img_mgmt_read_info(slot, NULL, hash, NULL);
   17cca:	2300      	movs	r3, #0
   17ccc:	466a      	mov	r2, sp
   17cce:	4619      	mov	r1, r3
   17cd0:	4620      	mov	r0, r4
   17cd2:	f7ff fd85 	bl	177e0 <img_mgmt_read_info>
    if (rc != 0) {
   17cd6:	4603      	mov	r3, r0
   17cd8:	b130      	cbz	r0, 17ce8 <img_mgmt_state_set_pending+0x3e>
        hashp = NULL;
   17cda:	2100      	movs	r1, #0
    } else {
        hashp = hash;
    }

    if (permanent) {
   17cdc:	b935      	cbnz	r5, 17cec <img_mgmt_state_set_pending+0x42>
        return img_mgmt_impl_log_confirm(rc, hashp);
    } else {
        return img_mgmt_impl_log_pending(rc, hashp);
   17cde:	4618      	mov	r0, r3
   17ce0:	f000 fb88 	bl	183f4 <img_mgmt_impl_log_pending>
    }
}
   17ce4:	b009      	add	sp, #36	; 0x24
   17ce6:	bd30      	pop	{r4, r5, pc}
        hashp = hash;
   17ce8:	4669      	mov	r1, sp
   17cea:	e7f7      	b.n	17cdc <img_mgmt_state_set_pending+0x32>
        return img_mgmt_impl_log_confirm(rc, hashp);
   17cec:	4618      	mov	r0, r3
   17cee:	f000 fb8b 	bl	18408 <img_mgmt_impl_log_confirm>
   17cf2:	e7f7      	b.n	17ce4 <img_mgmt_state_set_pending+0x3a>

00017cf4 <img_mgmt_state_confirm>:
 * Confirms the current image state.  Prevents a fallback from occurring on the
 * next reboot if the active image is currently being tested.
 */
int
img_mgmt_state_confirm(void)
{
   17cf4:	b510      	push	{r4, lr}
    int rc;

    /* Confirm disallowed if a test is pending. */
    if (img_mgmt_state_any_pending()) {
   17cf6:	f7ff ffb6 	bl	17c66 <img_mgmt_state_any_pending>
   17cfa:	b128      	cbz	r0, 17d08 <img_mgmt_state_confirm+0x14>
        rc = MGMT_ERR_EBADSTATE;
   17cfc:	2406      	movs	r4, #6
        rc = MGMT_ERR_EUNKNOWN;
    }

     img_mgmt_dfu_confirmed();
err:
    return img_mgmt_impl_log_confirm(rc, NULL);
   17cfe:	2100      	movs	r1, #0
   17d00:	4620      	mov	r0, r4
   17d02:	f000 fb81 	bl	18408 <img_mgmt_impl_log_confirm>
}
   17d06:	bd10      	pop	{r4, pc}
    rc = img_mgmt_impl_write_confirmed();
   17d08:	f000 fac9 	bl	1829e <img_mgmt_impl_write_confirmed>
    if (rc != 0) {
   17d0c:	4604      	mov	r4, r0
   17d0e:	b100      	cbz	r0, 17d12 <img_mgmt_state_confirm+0x1e>
        rc = MGMT_ERR_EUNKNOWN;
   17d10:	2401      	movs	r4, #1
     img_mgmt_dfu_confirmed();
   17d12:	f7ff ff4f 	bl	17bb4 <img_mgmt_dfu_confirmed>
   17d16:	e7f2      	b.n	17cfe <img_mgmt_state_confirm+0xa>

00017d18 <img_mgmt_state_read>:
/**
 * Command handler: image state read
 */
int
img_mgmt_state_read(struct mgmt_ctxt *ctxt)
{
   17d18:	b5f0      	push	{r4, r5, r6, r7, lr}
   17d1a:	b09b      	sub	sp, #108	; 0x6c
   17d1c:	4605      	mov	r5, r0
   17d1e:	2206      	movs	r2, #6
   17d20:	4959      	ldr	r1, [pc, #356]	; (17e88 <img_mgmt_state_read+0x170>)
   17d22:	f001 fb51 	bl	193c8 <cbor_encode_text_string>
   17d26:	4604      	mov	r4, r0
    int i;

    err = 0;
    err |= cbor_encode_text_stringz(&ctxt->encoder, "images");

    err |= cbor_encoder_create_array(&ctxt->encoder, &images,
   17d28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17d2c:	a905      	add	r1, sp, #20
   17d2e:	4628      	mov	r0, r5
   17d30:	f001 fb52 	bl	193d8 <cbor_encoder_create_array>
   17d34:	4304      	orrs	r4, r0
                                       CborIndefiniteLength);
    for (i = 0; i < 2; i++) {
   17d36:	2600      	movs	r6, #0
   17d38:	e000      	b.n	17d3c <img_mgmt_state_read+0x24>
   17d3a:	3601      	adds	r6, #1
   17d3c:	2e01      	cmp	r6, #1
   17d3e:	f300 808a 	bgt.w	17e56 <img_mgmt_state_read+0x13e>
        rc = img_mgmt_read_info(i, &ver, hash, &flags);
   17d42:	466b      	mov	r3, sp
   17d44:	aa0b      	add	r2, sp, #44	; 0x2c
   17d46:	a909      	add	r1, sp, #36	; 0x24
   17d48:	4630      	mov	r0, r6
   17d4a:	f7ff fd49 	bl	177e0 <img_mgmt_read_info>
        if (rc != 0) {
   17d4e:	2800      	cmp	r0, #0
   17d50:	d1f3      	bne.n	17d3a <img_mgmt_state_read+0x22>
            continue;
        }

        state_flags = img_mgmt_state_flags(i);
   17d52:	4630      	mov	r0, r6
   17d54:	f7ff ff4c 	bl	17bf0 <img_mgmt_state_flags>
   17d58:	4607      	mov	r7, r0

        err |= cbor_encoder_create_map(&images, &image,
   17d5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17d5e:	a901      	add	r1, sp, #4
   17d60:	a805      	add	r0, sp, #20
   17d62:	f001 fb3f 	bl	193e4 <cbor_encoder_create_map>
   17d66:	4304      	orrs	r4, r0
   17d68:	2204      	movs	r2, #4
   17d6a:	4948      	ldr	r1, [pc, #288]	; (17e8c <img_mgmt_state_read+0x174>)
   17d6c:	eb0d 0002 	add.w	r0, sp, r2
   17d70:	f001 fb2a 	bl	193c8 <cbor_encode_text_string>
                                         CborIndefiniteLength);
        err |= cbor_encode_text_stringz(&image, "slot");
   17d74:	4304      	orrs	r4, r0
        err |= cbor_encode_int(&image, i);
   17d76:	4632      	mov	r2, r6
   17d78:	17f3      	asrs	r3, r6, #31
   17d7a:	a801      	add	r0, sp, #4
   17d7c:	f001 faa3 	bl	192c6 <cbor_encode_int>
   17d80:	4304      	orrs	r4, r0
   17d82:	2207      	movs	r2, #7
   17d84:	4942      	ldr	r1, [pc, #264]	; (17e90 <img_mgmt_state_read+0x178>)
   17d86:	a801      	add	r0, sp, #4
   17d88:	f001 fb1e 	bl	193c8 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "version");
   17d8c:	4304      	orrs	r4, r0
        img_mgmt_ver_str(&ver, vers_str);
   17d8e:	a913      	add	r1, sp, #76	; 0x4c
   17d90:	a809      	add	r0, sp, #36	; 0x24
   17d92:	f000 f8db 	bl	17f4c <img_mgmt_ver_str>
   17d96:	a813      	add	r0, sp, #76	; 0x4c
   17d98:	f7f3 fd66 	bl	b868 <strlen>
   17d9c:	4602      	mov	r2, r0
   17d9e:	a913      	add	r1, sp, #76	; 0x4c
   17da0:	a801      	add	r0, sp, #4
   17da2:	f001 fb11 	bl	193c8 <cbor_encode_text_string>
        err |= cbor_encode_text_stringz(&image, vers_str);
   17da6:	4304      	orrs	r4, r0
   17da8:	2204      	movs	r2, #4
   17daa:	493a      	ldr	r1, [pc, #232]	; (17e94 <img_mgmt_state_read+0x17c>)
   17dac:	eb0d 0002 	add.w	r0, sp, r2
   17db0:	f001 fb0a 	bl	193c8 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "hash");
   17db4:	4304      	orrs	r4, r0
        err |= cbor_encode_byte_string(&image, hash, IMAGE_HASH_LEN);
   17db6:	2220      	movs	r2, #32
   17db8:	a90b      	add	r1, sp, #44	; 0x2c
   17dba:	a801      	add	r0, sp, #4
   17dbc:	f001 fafc 	bl	193b8 <cbor_encode_byte_string>
   17dc0:	4304      	orrs	r4, r0
   17dc2:	2208      	movs	r2, #8
   17dc4:	4934      	ldr	r1, [pc, #208]	; (17e98 <img_mgmt_state_read+0x180>)
   17dc6:	a801      	add	r0, sp, #4
   17dc8:	f001 fafe 	bl	193c8 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "bootable");
   17dcc:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image, !(flags & IMAGE_F_NON_BOOTABLE));
   17dce:	9b00      	ldr	r3, [sp, #0]
   17dd0:	f013 0f10 	tst.w	r3, #16
                                          int iov_len);
CBOR_API CborError cbor_encode_floating_point(CborEncoder *encoder, CborType fpType, const void *value);
CBOR_INLINE_API int cbor_encode_bytes_written(CborEncoder *encoder)
{   return encoder->writer->bytes_written; }
CBOR_INLINE_API CborError cbor_encode_boolean(CborEncoder *encoder, bool value)
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   17dd4:	bf14      	ite	ne
   17dd6:	2114      	movne	r1, #20
   17dd8:	2115      	moveq	r1, #21
   17dda:	a801      	add	r0, sp, #4
   17ddc:	f001 fabd 	bl	1935a <cbor_encode_simple_value>
   17de0:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   17de2:	2207      	movs	r2, #7
   17de4:	492d      	ldr	r1, [pc, #180]	; (17e9c <img_mgmt_state_read+0x184>)
   17de6:	a801      	add	r0, sp, #4
   17de8:	f001 faee 	bl	193c8 <cbor_encode_text_string>

        err |= cbor_encode_text_stringz(&image, "pending");
   17dec:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image,
   17dee:	f007 0101 	and.w	r1, r7, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   17df2:	3114      	adds	r1, #20
   17df4:	a801      	add	r0, sp, #4
   17df6:	f001 fab0 	bl	1935a <cbor_encode_simple_value>
   17dfa:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   17dfc:	2209      	movs	r2, #9
   17dfe:	4928      	ldr	r1, [pc, #160]	; (17ea0 <img_mgmt_state_read+0x188>)
   17e00:	a801      	add	r0, sp, #4
   17e02:	f001 fae1 	bl	193c8 <cbor_encode_text_string>
                                     state_flags & IMG_MGMT_STATE_F_PENDING);

        err |= cbor_encode_text_stringz(&image, "confirmed");
   17e06:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image,
   17e08:	f3c7 0140 	ubfx	r1, r7, #1, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   17e0c:	3114      	adds	r1, #20
   17e0e:	a801      	add	r0, sp, #4
   17e10:	f001 faa3 	bl	1935a <cbor_encode_simple_value>
   17e14:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   17e16:	2206      	movs	r2, #6
   17e18:	4922      	ldr	r1, [pc, #136]	; (17ea4 <img_mgmt_state_read+0x18c>)
   17e1a:	a801      	add	r0, sp, #4
   17e1c:	f001 fad4 	bl	193c8 <cbor_encode_text_string>
                                     state_flags & IMG_MGMT_STATE_F_CONFIRMED);

        err |= cbor_encode_text_stringz(&image, "active");
   17e20:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image,
   17e22:	f3c7 0180 	ubfx	r1, r7, #2, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   17e26:	3114      	adds	r1, #20
   17e28:	a801      	add	r0, sp, #4
   17e2a:	f001 fa96 	bl	1935a <cbor_encode_simple_value>
   17e2e:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   17e30:	2209      	movs	r2, #9
   17e32:	491d      	ldr	r1, [pc, #116]	; (17ea8 <img_mgmt_state_read+0x190>)
   17e34:	a801      	add	r0, sp, #4
   17e36:	f001 fac7 	bl	193c8 <cbor_encode_text_string>
                                     state_flags & IMG_MGMT_STATE_F_ACTIVE);

        err |= cbor_encode_text_stringz(&image, "permanent");
   17e3a:	4304      	orrs	r4, r0
        err |= cbor_encode_boolean(&image,
   17e3c:	f3c7 01c0 	ubfx	r1, r7, #3, #1
{ return cbor_encode_simple_value(encoder, (int)value - 1 + (CborBooleanType & 0x1f)); }
   17e40:	3114      	adds	r1, #20
   17e42:	a801      	add	r0, sp, #4
   17e44:	f001 fa89 	bl	1935a <cbor_encode_simple_value>
   17e48:	4304      	orrs	r4, r0
                                     state_flags & IMG_MGMT_STATE_F_PERMANENT);

        err |= cbor_encoder_close_container(&images, &image);
   17e4a:	a901      	add	r1, sp, #4
   17e4c:	a805      	add	r0, sp, #20
   17e4e:	f001 fad9 	bl	19404 <cbor_encoder_close_container>
   17e52:	4304      	orrs	r4, r0
   17e54:	e771      	b.n	17d3a <img_mgmt_state_read+0x22>
    }

    err |= cbor_encoder_close_container(&ctxt->encoder, &images);
   17e56:	a905      	add	r1, sp, #20
   17e58:	4628      	mov	r0, r5
   17e5a:	f001 fad3 	bl	19404 <cbor_encoder_close_container>
   17e5e:	4304      	orrs	r4, r0
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   17e60:	220b      	movs	r2, #11
   17e62:	4912      	ldr	r1, [pc, #72]	; (17eac <img_mgmt_state_read+0x194>)
   17e64:	4628      	mov	r0, r5
   17e66:	f001 faaf 	bl	193c8 <cbor_encode_text_string>

    err |= cbor_encode_text_stringz(&ctxt->encoder, "splitStatus");
   17e6a:	4304      	orrs	r4, r0
    err |= cbor_encode_int(&ctxt->encoder, 0);
   17e6c:	2200      	movs	r2, #0
   17e6e:	2300      	movs	r3, #0
   17e70:	4628      	mov	r0, r5
   17e72:	f001 fa28 	bl	192c6 <cbor_encode_int>

    if (err != 0) {
   17e76:	ea54 0300 	orrs.w	r3, r4, r0
   17e7a:	d102      	bne.n	17e82 <img_mgmt_state_read+0x16a>
        return MGMT_ERR_ENOMEM;
    }

    return 0;
   17e7c:	2000      	movs	r0, #0
}
   17e7e:	b01b      	add	sp, #108	; 0x6c
   17e80:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   17e82:	2002      	movs	r0, #2
   17e84:	e7fb      	b.n	17e7e <img_mgmt_state_read+0x166>
   17e86:	bf00      	nop
   17e88:	000292e4 	.word	0x000292e4
   17e8c:	000292ec 	.word	0x000292ec
   17e90:	000292f4 	.word	0x000292f4
   17e94:	000292fc 	.word	0x000292fc
   17e98:	00029304 	.word	0x00029304
   17e9c:	00029310 	.word	0x00029310
   17ea0:	00029318 	.word	0x00029318
   17ea4:	00029324 	.word	0x00029324
   17ea8:	0002932c 	.word	0x0002932c
   17eac:	00029338 	.word	0x00029338

00017eb0 <img_mgmt_state_write>:
/**
 * Command handler: image state write
 */
int
img_mgmt_state_write(struct mgmt_ctxt *ctxt)
{
   17eb0:	b510      	push	{r4, lr}
   17eb2:	b0b0      	sub	sp, #192	; 0xc0
   17eb4:	4604      	mov	r4, r0
    size_t hash_len;
    bool confirm;
    int slot;
    int rc;

    const struct cbor_attr_t write_attr[] = {
   17eb6:	228c      	movs	r2, #140	; 0x8c
   17eb8:	2100      	movs	r1, #0
   17eba:	a801      	add	r0, sp, #4
   17ebc:	f7f3 fc9f 	bl	b7fe <memset>
   17ec0:	4b20      	ldr	r3, [pc, #128]	; (17f44 <img_mgmt_state_write+0x94>)
   17ec2:	9300      	str	r3, [sp, #0]
   17ec4:	2303      	movs	r3, #3
   17ec6:	f88d 3004 	strb.w	r3, [sp, #4]
   17eca:	ab27      	add	r3, sp, #156	; 0x9c
   17ecc:	9302      	str	r3, [sp, #8]
   17ece:	ab26      	add	r3, sp, #152	; 0x98
   17ed0:	9303      	str	r3, [sp, #12]
   17ed2:	2321      	movs	r3, #33	; 0x21
   17ed4:	930a      	str	r3, [sp, #40]	; 0x28
   17ed6:	4b1c      	ldr	r3, [pc, #112]	; (17f48 <img_mgmt_state_write+0x98>)
   17ed8:	930c      	str	r3, [sp, #48]	; 0x30
   17eda:	2305      	movs	r3, #5
   17edc:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
   17ee0:	f10d 0397 	add.w	r3, sp, #151	; 0x97
   17ee4:	930e      	str	r3, [sp, #56]	; 0x38
            .dflt.boolean = false,
        },
        [2] = { 0 },
    };

    hash_len = 0;
   17ee6:	2300      	movs	r3, #0
   17ee8:	9326      	str	r3, [sp, #152]	; 0x98
    rc = cbor_read_object(&ctxt->it, write_attr);
   17eea:	4669      	mov	r1, sp
   17eec:	f104 001c 	add.w	r0, r4, #28
   17ef0:	f010 fa6e 	bl	283d0 <cbor_read_object>
    if (rc != 0) {
   17ef4:	bb10      	cbnz	r0, 17f3c <img_mgmt_state_write+0x8c>
   17ef6:	4603      	mov	r3, r0
        return MGMT_ERR_EINVAL;
    }

    /* Determine which slot is being operated on. */
    if (hash_len == 0) {
   17ef8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   17efa:	b97a      	cbnz	r2, 17f1c <img_mgmt_state_write+0x6c>
        if (confirm) {
   17efc:	f89d 2097 	ldrb.w	r2, [sp, #151]	; 0x97
   17f00:	b152      	cbz	r2, 17f18 <img_mgmt_state_write+0x68>
        if (slot < 0) {
            return MGMT_ERR_EINVAL;
        }
    }

    if (slot == 0 && confirm) {
   17f02:	f89d 2097 	ldrb.w	r2, [sp, #151]	; 0x97
   17f06:	b992      	cbnz	r2, 17f2e <img_mgmt_state_write+0x7e>
        /* Confirm current setup. */
        rc = img_mgmt_state_confirm();
    } else {
        rc = img_mgmt_state_set_pending(slot, confirm);
   17f08:	f89d 1097 	ldrb.w	r1, [sp, #151]	; 0x97
   17f0c:	4618      	mov	r0, r3
   17f0e:	f7ff fecc 	bl	17caa <img_mgmt_state_set_pending>
    }
    if (rc != 0) {
   17f12:	b178      	cbz	r0, 17f34 <img_mgmt_state_write+0x84>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   17f14:	b030      	add	sp, #192	; 0xc0
   17f16:	bd10      	pop	{r4, pc}
            return MGMT_ERR_EINVAL;
   17f18:	2003      	movs	r0, #3
   17f1a:	e7fb      	b.n	17f14 <img_mgmt_state_write+0x64>
        slot = img_mgmt_find_by_hash(hash, NULL);
   17f1c:	2100      	movs	r1, #0
   17f1e:	a827      	add	r0, sp, #156	; 0x9c
   17f20:	f7ff fd05 	bl	1792e <img_mgmt_find_by_hash>
        if (slot < 0) {
   17f24:	1e03      	subs	r3, r0, #0
   17f26:	db0b      	blt.n	17f40 <img_mgmt_state_write+0x90>
    if (slot == 0 && confirm) {
   17f28:	2b00      	cmp	r3, #0
   17f2a:	d1ed      	bne.n	17f08 <img_mgmt_state_write+0x58>
   17f2c:	e7e9      	b.n	17f02 <img_mgmt_state_write+0x52>
        rc = img_mgmt_state_confirm();
   17f2e:	f7ff fee1 	bl	17cf4 <img_mgmt_state_confirm>
   17f32:	e7ee      	b.n	17f12 <img_mgmt_state_write+0x62>
    rc = img_mgmt_state_read(ctxt);
   17f34:	4620      	mov	r0, r4
   17f36:	f7ff feef 	bl	17d18 <img_mgmt_state_read>
   17f3a:	e7eb      	b.n	17f14 <img_mgmt_state_write+0x64>
        return MGMT_ERR_EINVAL;
   17f3c:	2003      	movs	r0, #3
   17f3e:	e7e9      	b.n	17f14 <img_mgmt_state_write+0x64>
            return MGMT_ERR_EINVAL;
   17f40:	2003      	movs	r0, #3
   17f42:	e7e7      	b.n	17f14 <img_mgmt_state_write+0x64>
   17f44:	000292fc 	.word	0x000292fc
   17f48:	00029344 	.word	0x00029344

00017f4c <img_mgmt_ver_str>:
#include "img_mgmt/image.h"
#include "img_mgmt/img_mgmt.h"

int
img_mgmt_ver_str(const struct image_version *ver, char *dst)
{
   17f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17f4e:	4606      	mov	r6, r0
   17f50:	460c      	mov	r4, r1
    int off;

    off = 0;

    off += ull_to_s(ver->iv_major, INT_MAX, dst + off);
   17f52:	460b      	mov	r3, r1
   17f54:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   17f58:	7830      	ldrb	r0, [r6, #0]
   17f5a:	2100      	movs	r1, #0
   17f5c:	f00f fe8a 	bl	27c74 <ull_to_s>

    dst[off++] = '.';
   17f60:	1c45      	adds	r5, r0, #1
   17f62:	272e      	movs	r7, #46	; 0x2e
   17f64:	5427      	strb	r7, [r4, r0]
    off += ull_to_s(ver->iv_minor, INT_MAX, dst + off);
   17f66:	1963      	adds	r3, r4, r5
   17f68:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   17f6c:	7870      	ldrb	r0, [r6, #1]
   17f6e:	2100      	movs	r1, #0
   17f70:	f00f fe80 	bl	27c74 <ull_to_s>
   17f74:	4428      	add	r0, r5

    dst[off++] = '.';
   17f76:	1c45      	adds	r5, r0, #1
   17f78:	5427      	strb	r7, [r4, r0]
    off += ull_to_s(ver->iv_revision, INT_MAX, dst + off);
   17f7a:	1963      	adds	r3, r4, r5
   17f7c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   17f80:	8870      	ldrh	r0, [r6, #2]
   17f82:	2100      	movs	r1, #0
   17f84:	f00f fe76 	bl	27c74 <ull_to_s>
   17f88:	4428      	add	r0, r5

    if (ver->iv_build_num != 0) {
   17f8a:	6873      	ldr	r3, [r6, #4]
   17f8c:	b90b      	cbnz	r3, 17f92 <img_mgmt_ver_str+0x46>
        dst[off++] = '.';
        off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
    }

    return 0;
}
   17f8e:	2000      	movs	r0, #0
   17f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dst[off++] = '.';
   17f92:	1c43      	adds	r3, r0, #1
   17f94:	5427      	strb	r7, [r4, r0]
        off += ull_to_s(ver->iv_build_num, INT_MAX, dst + off);
   17f96:	4423      	add	r3, r4
   17f98:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   17f9c:	6870      	ldr	r0, [r6, #4]
   17f9e:	2100      	movs	r1, #0
   17fa0:	f00f fe68 	bl	27c74 <ull_to_s>
   17fa4:	e7f3      	b.n	17f8e <img_mgmt_ver_str+0x42>

00017fa6 <img_mgmt_vercmp>:
 * @return                       1 if a > b
 */
static int
img_mgmt_vercmp(const struct image_version *a, const struct image_version *b)
{
    if (a->iv_major < b->iv_major) {
   17fa6:	7802      	ldrb	r2, [r0, #0]
   17fa8:	780b      	ldrb	r3, [r1, #0]
   17faa:	429a      	cmp	r2, r3
   17fac:	d30e      	bcc.n	17fcc <img_mgmt_vercmp+0x26>
        return -1;
    } else if (a->iv_major > b->iv_major) {
   17fae:	d810      	bhi.n	17fd2 <img_mgmt_vercmp+0x2c>
        return 1;
    }

    if (a->iv_minor < b->iv_minor) {
   17fb0:	7842      	ldrb	r2, [r0, #1]
   17fb2:	784b      	ldrb	r3, [r1, #1]
   17fb4:	429a      	cmp	r2, r3
   17fb6:	d30e      	bcc.n	17fd6 <img_mgmt_vercmp+0x30>
        return -1;
    } else if (a->iv_minor > b->iv_minor) {
   17fb8:	d810      	bhi.n	17fdc <img_mgmt_vercmp+0x36>
        return 1;
    }

    if (a->iv_revision < b->iv_revision) {
   17fba:	8842      	ldrh	r2, [r0, #2]
   17fbc:	884b      	ldrh	r3, [r1, #2]
   17fbe:	429a      	cmp	r2, r3
   17fc0:	d30e      	bcc.n	17fe0 <img_mgmt_vercmp+0x3a>
        return -1;
    } else if (a->iv_revision > b->iv_revision) {
   17fc2:	d801      	bhi.n	17fc8 <img_mgmt_vercmp+0x22>
        return 1;
    }

    /* Note: For semver compatibility, don't compare the 32-bit build num. */

    return 0;
   17fc4:	2000      	movs	r0, #0
}
   17fc6:	4770      	bx	lr
        return 1;
   17fc8:	2001      	movs	r0, #1
   17fca:	4770      	bx	lr
        return -1;
   17fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17fd0:	4770      	bx	lr
        return 1;
   17fd2:	2001      	movs	r0, #1
   17fd4:	4770      	bx	lr
        return -1;
   17fd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17fda:	4770      	bx	lr
        return 1;
   17fdc:	2001      	movs	r0, #1
   17fde:	4770      	bx	lr
        return -1;
   17fe0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17fe4:	4770      	bx	lr

00017fe6 <img_mgmt_find_best_area_id>:
{
   17fe6:	b530      	push	{r4, r5, lr}
   17fe8:	b083      	sub	sp, #12
    for (i = 0; i < 2; i++) {
   17fea:	2400      	movs	r4, #0
    int best = -1;
   17fec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    for (i = 0; i < 2; i++) {
   17ff0:	e000      	b.n	17ff4 <img_mgmt_find_best_area_id+0xe>
   17ff2:	3401      	adds	r4, #1
   17ff4:	2c01      	cmp	r4, #1
   17ff6:	dc10      	bgt.n	1801a <img_mgmt_find_best_area_id+0x34>
        rc = img_mgmt_read_info(i, &ver, NULL, NULL);
   17ff8:	2300      	movs	r3, #0
   17ffa:	461a      	mov	r2, r3
   17ffc:	4669      	mov	r1, sp
   17ffe:	4620      	mov	r0, r4
   18000:	f7ff fbee 	bl	177e0 <img_mgmt_read_info>
        if (rc < 0) {
   18004:	2800      	cmp	r0, #0
   18006:	dbf4      	blt.n	17ff2 <img_mgmt_find_best_area_id+0xc>
        if (rc == 0) {
   18008:	b930      	cbnz	r0, 18018 <img_mgmt_find_best_area_id+0x32>
            if (img_mgmt_slot_in_use(i)) {
   1800a:	4620      	mov	r0, r4
   1800c:	f7ff fe3e 	bl	17c8c <img_mgmt_slot_in_use>
   18010:	2800      	cmp	r0, #0
   18012:	d1ee      	bne.n	17ff2 <img_mgmt_find_best_area_id+0xc>
                best = i;
   18014:	4625      	mov	r5, r4
   18016:	e7ec      	b.n	17ff2 <img_mgmt_find_best_area_id+0xc>
        best = i;
   18018:	4625      	mov	r5, r4
    if (best >= 0) {
   1801a:	2d00      	cmp	r5, #0
   1801c:	db03      	blt.n	18026 <img_mgmt_find_best_area_id+0x40>
        best = flash_area_id_from_image_slot(best);
   1801e:	4628      	mov	r0, r5
   18020:	f7fe ff19 	bl	16e56 <flash_area_id_from_image_slot>
   18024:	4605      	mov	r5, r0
}
   18026:	4628      	mov	r0, r5
   18028:	b003      	add	sp, #12
   1802a:	bd30      	pop	{r4, r5, pc}

0001802c <img_mgmt_impl_upload_inspect>:
 */
int
img_mgmt_impl_upload_inspect(const struct img_mgmt_upload_req *req,
                             struct img_mgmt_upload_action *action,
                             const char **errstr)
{
   1802c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18030:	b084      	sub	sp, #16
    struct image_version cur_ver;
    uint8_t rem_bytes;
    bool empty;
    int rc;

    memset(action, 0, sizeof *action);
   18032:	2300      	movs	r3, #0
   18034:	600b      	str	r3, [r1, #0]
   18036:	604b      	str	r3, [r1, #4]
   18038:	608b      	str	r3, [r1, #8]
   1803a:	60cb      	str	r3, [r1, #12]
   1803c:	610b      	str	r3, [r1, #16]
   1803e:	614b      	str	r3, [r1, #20]

    if (req->off == -1) {
   18040:	e9d0 6700 	ldrd	r6, r7, [r0]
   18044:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   18048:	bf08      	it	eq
   1804a:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   1804e:	d043      	beq.n	180d8 <img_mgmt_impl_upload_inspect+0xac>
   18050:	4690      	mov	r8, r2
   18052:	460c      	mov	r4, r1
   18054:	4605      	mov	r5, r0
        /* Request did not include an `off` field. */
        *errstr = img_mgmt_err_str_hdr_malformed;
        return MGMT_ERR_EINVAL;
    }

    if (req->off == 0) {
   18056:	ea56 0307 	orrs.w	r3, r6, r7
   1805a:	d17f      	bne.n	1815c <img_mgmt_impl_upload_inspect+0x130>
        /* First upload chunk. */
        if (req->data_len < sizeof(struct image_header)) {
   1805c:	6903      	ldr	r3, [r0, #16]
   1805e:	2b1f      	cmp	r3, #31
   18060:	d93d      	bls.n	180de <img_mgmt_impl_upload_inspect+0xb2>
             */
            *errstr = img_mgmt_err_str_hdr_malformed;
            return MGMT_ERR_EINVAL;
        }

        if (req->size == -1) {
   18062:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   18066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1806a:	bf08      	it	eq
   1806c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
   18070:	d039      	beq.n	180e6 <img_mgmt_impl_upload_inspect+0xba>
            /* Request did not include a `len` field. */
            *errstr = img_mgmt_err_str_hdr_malformed;
            return MGMT_ERR_EINVAL;
        }
        action->size = req->size;
   18072:	e9c1 2300 	strd	r2, r3, [r1]

        hdr = (struct image_header *)req->img_data;
        if (hdr->ih_magic != IMAGE_MAGIC) {
   18076:	6982      	ldr	r2, [r0, #24]
   18078:	4b52      	ldr	r3, [pc, #328]	; (181c4 <img_mgmt_impl_upload_inspect+0x198>)
   1807a:	429a      	cmp	r2, r3
   1807c:	d138      	bne.n	180f0 <img_mgmt_impl_upload_inspect+0xc4>
            *errstr = img_mgmt_err_str_magic_mismatch;
            return MGMT_ERR_EINVAL;
        }

        if (req->data_sha_len > IMG_MGMT_DATA_SHA_LEN) {
   1807e:	6942      	ldr	r2, [r0, #20]
   18080:	2a20      	cmp	r2, #32
   18082:	f200 8099 	bhi.w	181b8 <img_mgmt_impl_upload_inspect+0x18c>
         * If request includes proper data hash we can check whether there is
         * upload in progress (interrupted due to e.g. link disconnection) with
         * the same data hash so we can just resume it by simply including
         * current upload offset in response.
         */
        if ((req->data_sha_len > 0) && (g_img_mgmt_state.area_id != -1)) {
   18086:	b142      	cbz	r2, 1809a <img_mgmt_impl_upload_inspect+0x6e>
   18088:	4b4f      	ldr	r3, [pc, #316]	; (181c8 <img_mgmt_impl_upload_inspect+0x19c>)
   1808a:	681b      	ldr	r3, [r3, #0]
   1808c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   18090:	d003      	beq.n	1809a <img_mgmt_impl_upload_inspect+0x6e>
            if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   18092:	4b4d      	ldr	r3, [pc, #308]	; (181c8 <img_mgmt_impl_upload_inspect+0x19c>)
   18094:	7b1b      	ldrb	r3, [r3, #12]
   18096:	429a      	cmp	r2, r3
   18098:	d02f      	beq.n	180fa <img_mgmt_impl_upload_inspect+0xce>
                                                        req->data_sha_len)) {
                return 0;
            }
        }

        action->area_id = img_mgmt_find_best_area_id();
   1809a:	f7ff ffa4 	bl	17fe6 <img_mgmt_find_best_area_id>
   1809e:	60e0      	str	r0, [r4, #12]
        if (action->area_id < 0) {
   180a0:	2800      	cmp	r0, #0
   180a2:	db33      	blt.n	1810c <img_mgmt_impl_upload_inspect+0xe0>
            /* No slot where to upload! */
            *errstr = img_mgmt_err_str_no_slot;
            return MGMT_ERR_ENOMEM;
        }

        if (req->upgrade) {
   180a4:	f895 3238 	ldrb.w	r3, [r5, #568]	; 0x238
   180a8:	b163      	cbz	r3, 180c4 <img_mgmt_impl_upload_inspect+0x98>
            /* User specified upgrade-only.  Make sure new image version is
             * greater than that of the currently running image.
             */
            rc = img_mgmt_my_version(&cur_ver);
   180aa:	a801      	add	r0, sp, #4
   180ac:	f7ff fd8c 	bl	17bc8 <img_mgmt_my_version>
            if (rc != 0) {
   180b0:	2800      	cmp	r0, #0
   180b2:	f040 8083 	bne.w	181bc <img_mgmt_impl_upload_inspect+0x190>
                return MGMT_ERR_EUNKNOWN;
            }

            if (img_mgmt_vercmp(&cur_ver, &hdr->ih_ver) >= 0) {
   180b6:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   180ba:	a801      	add	r0, sp, #4
   180bc:	f7ff ff73 	bl	17fa6 <img_mgmt_vercmp>
   180c0:	2800      	cmp	r0, #0
   180c2:	da28      	bge.n	18116 <img_mgmt_impl_upload_inspect+0xea>
        }

#if MYNEWT_VAL(IMG_MGMT_LAZY_ERASE)
        (void) empty;
#else
        rc = flash_area_open(action->area_id, &fa);
   180c4:	a903      	add	r1, sp, #12
   180c6:	7b20      	ldrb	r0, [r4, #12]
   180c8:	f7fe fe4e 	bl	16d68 <flash_area_open>
        if (rc) {
   180cc:	b340      	cbz	r0, 18120 <img_mgmt_impl_upload_inspect+0xf4>
            *errstr = img_mgmt_err_str_flash_open_failed;
   180ce:	2300      	movs	r3, #0
   180d0:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_EUNKNOWN;
   180d4:	2301      	movs	r3, #1
   180d6:	e051      	b.n	1817c <img_mgmt_impl_upload_inspect+0x150>
        *errstr = img_mgmt_err_str_hdr_malformed;
   180d8:	6013      	str	r3, [r2, #0]
        return MGMT_ERR_EINVAL;
   180da:	2303      	movs	r3, #3
   180dc:	e04e      	b.n	1817c <img_mgmt_impl_upload_inspect+0x150>
            *errstr = img_mgmt_err_str_hdr_malformed;
   180de:	2300      	movs	r3, #0
   180e0:	6013      	str	r3, [r2, #0]
            return MGMT_ERR_EINVAL;
   180e2:	2303      	movs	r3, #3
   180e4:	e04a      	b.n	1817c <img_mgmt_impl_upload_inspect+0x150>
            *errstr = img_mgmt_err_str_hdr_malformed;
   180e6:	2300      	movs	r3, #0
   180e8:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_EINVAL;
   180ec:	2303      	movs	r3, #3
   180ee:	e045      	b.n	1817c <img_mgmt_impl_upload_inspect+0x150>
            *errstr = img_mgmt_err_str_magic_mismatch;
   180f0:	2300      	movs	r3, #0
   180f2:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_EINVAL;
   180f6:	2303      	movs	r3, #3
   180f8:	e040      	b.n	1817c <img_mgmt_impl_upload_inspect+0x150>
                            !memcmp(g_img_mgmt_state.data_sha, req->data_sha,
   180fa:	f500 7106 	add.w	r1, r0, #536	; 0x218
   180fe:	4833      	ldr	r0, [pc, #204]	; (181cc <img_mgmt_impl_upload_inspect+0x1a0>)
   18100:	f7f3 fb30 	bl	b764 <memcmp>
            if ((g_img_mgmt_state.data_sha_len == req->data_sha_len) &&
   18104:	4603      	mov	r3, r0
   18106:	2800      	cmp	r0, #0
   18108:	d1c7      	bne.n	1809a <img_mgmt_impl_upload_inspect+0x6e>
   1810a:	e037      	b.n	1817c <img_mgmt_impl_upload_inspect+0x150>
            *errstr = img_mgmt_err_str_no_slot;
   1810c:	2300      	movs	r3, #0
   1810e:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_ENOMEM;
   18112:	2302      	movs	r3, #2
   18114:	e032      	b.n	1817c <img_mgmt_impl_upload_inspect+0x150>
                *errstr = img_mgmt_err_str_downgrade;
   18116:	2300      	movs	r3, #0
   18118:	f8c8 3000 	str.w	r3, [r8]
                return MGMT_ERR_EBADSTATE;
   1811c:	2306      	movs	r3, #6
   1811e:	e02d      	b.n	1817c <img_mgmt_impl_upload_inspect+0x150>
        }

        rc = flash_area_is_empty(fa, &empty);
   18120:	f10d 0103 	add.w	r1, sp, #3
   18124:	9803      	ldr	r0, [sp, #12]
   18126:	f7fe fe7c 	bl	16e22 <flash_area_is_empty>
        flash_area_close(fa);
        if (rc) {
   1812a:	2800      	cmp	r0, #0
   1812c:	d148      	bne.n	181c0 <img_mgmt_impl_upload_inspect+0x194>
            return MGMT_ERR_EUNKNOWN;
        }

        action->erase = !empty;
   1812e:	f89d 3003 	ldrb.w	r3, [sp, #3]
   18132:	f083 0301 	eor.w	r3, r3, #1
   18136:	7463      	strb	r3, [r4, #17]
            return 0;
        }
    }

    /* Calculate size of flash write. */
    action->write_bytes = req->data_len;
   18138:	692b      	ldr	r3, [r5, #16]
   1813a:	60a3      	str	r3, [r4, #8]
    if (req->off + req->data_len < action->size) {
   1813c:	e9d5 6700 	ldrd	r6, r7, [r5]
   18140:	6929      	ldr	r1, [r5, #16]
   18142:	1872      	adds	r2, r6, r1
   18144:	f147 0300 	adc.w	r3, r7, #0
   18148:	e9d4 0100 	ldrd	r0, r1, [r4]
   1814c:	428b      	cmp	r3, r1
   1814e:	bf08      	it	eq
   18150:	4282      	cmpeq	r2, r0
   18152:	d317      	bcc.n	18184 <img_mgmt_impl_upload_inspect+0x158>
        if (rem_bytes) {
            action->write_bytes -= rem_bytes;
        }
    }

    action->proceed = true;
   18154:	2301      	movs	r3, #1
   18156:	7423      	strb	r3, [r4, #16]
    return 0;
   18158:	2300      	movs	r3, #0
   1815a:	e00f      	b.n	1817c <img_mgmt_impl_upload_inspect+0x150>
        action->area_id = g_img_mgmt_state.area_id;
   1815c:	491a      	ldr	r1, [pc, #104]	; (181c8 <img_mgmt_impl_upload_inspect+0x19c>)
   1815e:	680b      	ldr	r3, [r1, #0]
   18160:	60e3      	str	r3, [r4, #12]
        action->size = g_img_mgmt_state.size;
   18162:	688b      	ldr	r3, [r1, #8]
   18164:	6023      	str	r3, [r4, #0]
   18166:	2300      	movs	r3, #0
   18168:	6063      	str	r3, [r4, #4]
        if (req->off != g_img_mgmt_state.off) {
   1816a:	e9d0 2300 	ldrd	r2, r3, [r0]
   1816e:	6848      	ldr	r0, [r1, #4]
   18170:	2100      	movs	r1, #0
   18172:	428b      	cmp	r3, r1
   18174:	bf08      	it	eq
   18176:	4282      	cmpeq	r2, r0
   18178:	d0de      	beq.n	18138 <img_mgmt_impl_upload_inspect+0x10c>
            return 0;
   1817a:	2300      	movs	r3, #0
}
   1817c:	4618      	mov	r0, r3
   1817e:	b004      	add	sp, #16
   18180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = flash_area_open(action->area_id, &fa);
   18184:	a903      	add	r1, sp, #12
   18186:	7b20      	ldrb	r0, [r4, #12]
   18188:	f7fe fdee 	bl	16d68 <flash_area_open>
        if (rc) {
   1818c:	b120      	cbz	r0, 18198 <img_mgmt_impl_upload_inspect+0x16c>
            *errstr = img_mgmt_err_str_flash_open_failed;
   1818e:	2300      	movs	r3, #0
   18190:	f8c8 3000 	str.w	r3, [r8]
            return MGMT_ERR_EUNKNOWN;
   18194:	2301      	movs	r3, #1
   18196:	e7f1      	b.n	1817c <img_mgmt_impl_upload_inspect+0x150>
        rem_bytes = req->data_len % flash_area_align(fa);
   18198:	692d      	ldr	r5, [r5, #16]
   1819a:	9803      	ldr	r0, [sp, #12]
   1819c:	f7fe fe37 	bl	16e0e <flash_area_align>
   181a0:	fbb5 f3f0 	udiv	r3, r5, r0
   181a4:	fb00 5013 	mls	r0, r0, r3, r5
        if (rem_bytes) {
   181a8:	f010 0fff 	tst.w	r0, #255	; 0xff
   181ac:	d0d2      	beq.n	18154 <img_mgmt_impl_upload_inspect+0x128>
            action->write_bytes -= rem_bytes;
   181ae:	b2c0      	uxtb	r0, r0
   181b0:	68a3      	ldr	r3, [r4, #8]
   181b2:	1a18      	subs	r0, r3, r0
   181b4:	60a0      	str	r0, [r4, #8]
   181b6:	e7cd      	b.n	18154 <img_mgmt_impl_upload_inspect+0x128>
            return MGMT_ERR_EINVAL;
   181b8:	2303      	movs	r3, #3
   181ba:	e7df      	b.n	1817c <img_mgmt_impl_upload_inspect+0x150>
                return MGMT_ERR_EUNKNOWN;
   181bc:	2301      	movs	r3, #1
   181be:	e7dd      	b.n	1817c <img_mgmt_impl_upload_inspect+0x150>
            return MGMT_ERR_EUNKNOWN;
   181c0:	2301      	movs	r3, #1
   181c2:	e7db      	b.n	1817c <img_mgmt_impl_upload_inspect+0x150>
   181c4:	96f3b83d 	.word	0x96f3b83d
   181c8:	20008008 	.word	0x20008008
   181cc:	20008015 	.word	0x20008015

000181d0 <img_mgmt_impl_erase_slot>:

int
img_mgmt_impl_erase_slot(void)
{
   181d0:	b500      	push	{lr}
   181d2:	b083      	sub	sp, #12
    const struct flash_area *fa;
    bool empty;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   181d4:	a901      	add	r1, sp, #4
   181d6:	2002      	movs	r0, #2
   181d8:	f7fe fdc6 	bl	16d68 <flash_area_open>
    if (rc != 0) {
   181dc:	b120      	cbz	r0, 181e8 <img_mgmt_impl_erase_slot+0x18>
        return MGMT_ERR_EUNKNOWN;
   181de:	2301      	movs	r3, #1
            return MGMT_ERR_EUNKNOWN;
        }
    }

    return 0;
}
   181e0:	4618      	mov	r0, r3
   181e2:	b003      	add	sp, #12
   181e4:	f85d fb04 	ldr.w	pc, [sp], #4
    rc = flash_area_is_empty(fa, &empty);
   181e8:	f10d 0103 	add.w	r1, sp, #3
   181ec:	9801      	ldr	r0, [sp, #4]
   181ee:	f7fe fe18 	bl	16e22 <flash_area_is_empty>
    if (rc != 0) {
   181f2:	4603      	mov	r3, r0
   181f4:	b968      	cbnz	r0, 18212 <img_mgmt_impl_erase_slot+0x42>
    if (!empty) {
   181f6:	f89d 2003 	ldrb.w	r2, [sp, #3]
   181fa:	2a00      	cmp	r2, #0
   181fc:	d1f0      	bne.n	181e0 <img_mgmt_impl_erase_slot+0x10>
        rc = flash_area_erase(fa, 0, fa->fa_size);
   181fe:	9801      	ldr	r0, [sp, #4]
   18200:	6882      	ldr	r2, [r0, #8]
   18202:	2100      	movs	r1, #0
   18204:	f7fe fdf0 	bl	16de8 <flash_area_erase>
        if (rc != 0) {
   18208:	4603      	mov	r3, r0
   1820a:	2800      	cmp	r0, #0
   1820c:	d0e8      	beq.n	181e0 <img_mgmt_impl_erase_slot+0x10>
            return MGMT_ERR_EUNKNOWN;
   1820e:	2301      	movs	r3, #1
   18210:	e7e6      	b.n	181e0 <img_mgmt_impl_erase_slot+0x10>
        return MGMT_ERR_EUNKNOWN;
   18212:	2301      	movs	r3, #1
   18214:	e7e4      	b.n	181e0 <img_mgmt_impl_erase_slot+0x10>

00018216 <img_mgmt_impl_write_pending>:

int
img_mgmt_impl_write_pending(int slot, bool permanent)
{
   18216:	b5f0      	push	{r4, r5, r6, r7, lr}
   18218:	b083      	sub	sp, #12
   1821a:	4604      	mov	r4, r0
   1821c:	460f      	mov	r7, r1
    uint32_t image_flags;
    uint8_t state_flags;
    int split_app_active;
    int rc;

    state_flags = img_mgmt_state_flags(slot);
   1821e:	f7ff fce7 	bl	17bf0 <img_mgmt_state_flags>
   18222:	4605      	mov	r5, r0
    split_app_active = split_app_active_get();
   18224:	f7ff fa52 	bl	176cc <split_app_active_get>
   18228:	4606      	mov	r6, r0

    /* Unconfirmed slots are always runable.  A confirmed slot can only be
     * run if it is a loader in a split image setup.
     */
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED &&
   1822a:	f015 0f02 	tst.w	r5, #2
   1822e:	d001      	beq.n	18234 <img_mgmt_impl_write_pending+0x1e>
   18230:	bb6c      	cbnz	r4, 1828e <img_mgmt_impl_write_pending+0x78>
        (slot != 0 || !split_app_active)) {
   18232:	b370      	cbz	r0, 18292 <img_mgmt_impl_write_pending+0x7c>

        return MGMT_ERR_EBADSTATE;
    }

    rc = img_mgmt_read_info(slot, NULL, NULL, &image_flags);
   18234:	ab01      	add	r3, sp, #4
   18236:	2200      	movs	r2, #0
   18238:	4611      	mov	r1, r2
   1823a:	4620      	mov	r0, r4
   1823c:	f7ff fad0 	bl	177e0 <img_mgmt_read_info>
    if (rc != 0) {
   18240:	bb48      	cbnz	r0, 18296 <img_mgmt_impl_write_pending+0x80>
        return MGMT_ERR_EUNKNOWN;
    }

    if (!(image_flags & IMAGE_F_NON_BOOTABLE)) {
   18242:	9b01      	ldr	r3, [sp, #4]
   18244:	f013 0f10 	tst.w	r3, #16
   18248:	d114      	bne.n	18274 <img_mgmt_impl_write_pending+0x5e>
        /* Unified image or loader. */
        if (!split_app_active) {
   1824a:	b13e      	cbz	r6, 1825c <img_mgmt_impl_write_pending+0x46>
            if (rc != 0) {
                return MGMT_ERR_EUNKNOWN;
            }
        } else {
            /* Currently loader + app; testing loader-only. */
            if (permanent) {
   1824c:	b16f      	cbz	r7, 1826a <img_mgmt_impl_write_pending+0x54>
                rc = split_write_split(SPLIT_MODE_LOADER);
   1824e:	2000      	movs	r0, #0
   18250:	f7ff fa4e 	bl	176f0 <split_write_split>
   18254:	4603      	mov	r3, r0
            } else {
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
            }
            if (rc != 0) {
   18256:	b1fb      	cbz	r3, 18298 <img_mgmt_impl_write_pending+0x82>
                return MGMT_ERR_EUNKNOWN;
   18258:	2301      	movs	r3, #1
   1825a:	e01d      	b.n	18298 <img_mgmt_impl_write_pending+0x82>
            rc = boot_set_pending(permanent);
   1825c:	4638      	mov	r0, r7
   1825e:	f7ff f99e 	bl	1759e <boot_set_pending>
            if (rc != 0) {
   18262:	4603      	mov	r3, r0
   18264:	b1c0      	cbz	r0, 18298 <img_mgmt_impl_write_pending+0x82>
                return MGMT_ERR_EUNKNOWN;
   18266:	2301      	movs	r3, #1
   18268:	e016      	b.n	18298 <img_mgmt_impl_write_pending+0x82>
                rc = split_write_split(SPLIT_MODE_TEST_LOADER);
   1826a:	2003      	movs	r0, #3
   1826c:	f7ff fa40 	bl	176f0 <split_write_split>
   18270:	4603      	mov	r3, r0
   18272:	e7f0      	b.n	18256 <img_mgmt_impl_write_pending+0x40>
            }
        }
    } else {
        /* Testing split app. */
        if (permanent) {
   18274:	b137      	cbz	r7, 18284 <img_mgmt_impl_write_pending+0x6e>
            rc = split_write_split(SPLIT_MODE_APP);
   18276:	2002      	movs	r0, #2
   18278:	f7ff fa3a 	bl	176f0 <split_write_split>
   1827c:	4603      	mov	r3, r0
        } else {
            rc = split_write_split(SPLIT_MODE_TEST_APP);
        }
        if (rc != 0) {
   1827e:	b15b      	cbz	r3, 18298 <img_mgmt_impl_write_pending+0x82>
            return MGMT_ERR_EUNKNOWN;
   18280:	2301      	movs	r3, #1
   18282:	e009      	b.n	18298 <img_mgmt_impl_write_pending+0x82>
            rc = split_write_split(SPLIT_MODE_TEST_APP);
   18284:	2001      	movs	r0, #1
   18286:	f7ff fa33 	bl	176f0 <split_write_split>
   1828a:	4603      	mov	r3, r0
   1828c:	e7f7      	b.n	1827e <img_mgmt_impl_write_pending+0x68>
        return MGMT_ERR_EBADSTATE;
   1828e:	2306      	movs	r3, #6
   18290:	e002      	b.n	18298 <img_mgmt_impl_write_pending+0x82>
   18292:	2306      	movs	r3, #6
   18294:	e000      	b.n	18298 <img_mgmt_impl_write_pending+0x82>
        return MGMT_ERR_EUNKNOWN;
   18296:	2301      	movs	r3, #1
        }
    }

    return 0;
}
   18298:	4618      	mov	r0, r3
   1829a:	b003      	add	sp, #12
   1829c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001829e <img_mgmt_impl_write_confirmed>:

int
img_mgmt_impl_write_confirmed(void)
{
   1829e:	b508      	push	{r3, lr}
    int rc;

    /* Confirm the unified image or loader in slot 0. */
    rc = boot_set_confirmed();
   182a0:	f7ff f9c6 	bl	17630 <boot_set_confirmed>
    if (rc != 0) {
   182a4:	b110      	cbz	r0, 182ac <img_mgmt_impl_write_confirmed+0xe>
        return MGMT_ERR_EUNKNOWN;
   182a6:	2301      	movs	r3, #1
            return MGMT_ERR_EUNKNOWN;
        }
    }

    return 0;
}
   182a8:	4618      	mov	r0, r3
   182aa:	bd08      	pop	{r3, pc}
    if (split_app_active_get()) {
   182ac:	f7ff fa0e 	bl	176cc <split_app_active_get>
   182b0:	b138      	cbz	r0, 182c2 <img_mgmt_impl_write_confirmed+0x24>
        rc = split_write_split(SPLIT_MODE_APP);
   182b2:	2002      	movs	r0, #2
   182b4:	f7ff fa1c 	bl	176f0 <split_write_split>
        if (rc != 0) {
   182b8:	4603      	mov	r3, r0
   182ba:	2800      	cmp	r0, #0
   182bc:	d0f4      	beq.n	182a8 <img_mgmt_impl_write_confirmed+0xa>
            return MGMT_ERR_EUNKNOWN;
   182be:	2301      	movs	r3, #1
   182c0:	e7f2      	b.n	182a8 <img_mgmt_impl_write_confirmed+0xa>
        rc = split_write_split(SPLIT_MODE_LOADER);
   182c2:	2000      	movs	r0, #0
   182c4:	f7ff fa14 	bl	176f0 <split_write_split>
        if (rc != 0) {
   182c8:	4603      	mov	r3, r0
   182ca:	2800      	cmp	r0, #0
   182cc:	d0ec      	beq.n	182a8 <img_mgmt_impl_write_confirmed+0xa>
            return MGMT_ERR_EUNKNOWN;
   182ce:	2301      	movs	r3, #1
   182d0:	e7ea      	b.n	182a8 <img_mgmt_impl_write_confirmed+0xa>

000182d2 <img_mgmt_impl_read>:

int
img_mgmt_impl_read(int slot, unsigned int offset, void *dst,
                   unsigned int num_bytes)
{
   182d2:	b570      	push	{r4, r5, r6, lr}
   182d4:	b082      	sub	sp, #8
   182d6:	460c      	mov	r4, r1
   182d8:	4615      	mov	r5, r2
   182da:	461e      	mov	r6, r3
    const struct flash_area *fa;
    int area_id;
    int rc;

    area_id = flash_area_id_from_image_slot(slot);
   182dc:	f7fe fdbb 	bl	16e56 <flash_area_id_from_image_slot>
    rc = flash_area_open(area_id, &fa);
   182e0:	a901      	add	r1, sp, #4
   182e2:	b2c0      	uxtb	r0, r0
   182e4:	f7fe fd40 	bl	16d68 <flash_area_open>
    if (rc != 0) {
   182e8:	b118      	cbz	r0, 182f2 <img_mgmt_impl_read+0x20>
        return MGMT_ERR_EUNKNOWN;
   182ea:	2301      	movs	r3, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   182ec:	4618      	mov	r0, r3
   182ee:	b002      	add	sp, #8
   182f0:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_read(fa, offset, dst, num_bytes);
   182f2:	4633      	mov	r3, r6
   182f4:	462a      	mov	r2, r5
   182f6:	4621      	mov	r1, r4
   182f8:	9801      	ldr	r0, [sp, #4]
   182fa:	f7fe fd4f 	bl	16d9c <flash_area_read>
    if (rc != 0) {
   182fe:	4603      	mov	r3, r0
   18300:	2800      	cmp	r0, #0
   18302:	d0f3      	beq.n	182ec <img_mgmt_impl_read+0x1a>
        return MGMT_ERR_EUNKNOWN;
   18304:	2301      	movs	r3, #1
   18306:	e7f1      	b.n	182ec <img_mgmt_impl_read+0x1a>

00018308 <img_mgmt_impl_write_image_data>:

#else
int
img_mgmt_impl_write_image_data(unsigned int offset, const void *data,
                               unsigned int num_bytes, bool last)
{
   18308:	b570      	push	{r4, r5, r6, lr}
   1830a:	b082      	sub	sp, #8
   1830c:	4604      	mov	r4, r0
   1830e:	460d      	mov	r5, r1
   18310:	4616      	mov	r6, r2
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   18312:	a901      	add	r1, sp, #4
   18314:	2002      	movs	r0, #2
   18316:	f7fe fd27 	bl	16d68 <flash_area_open>
    if (rc != 0) {
   1831a:	b118      	cbz	r0, 18324 <img_mgmt_impl_write_image_data+0x1c>
        return MGMT_ERR_EUNKNOWN;
   1831c:	2301      	movs	r3, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1831e:	4618      	mov	r0, r3
   18320:	b002      	add	sp, #8
   18322:	bd70      	pop	{r4, r5, r6, pc}
    rc = flash_area_write(fa, offset, data, num_bytes);
   18324:	4633      	mov	r3, r6
   18326:	462a      	mov	r2, r5
   18328:	4621      	mov	r1, r4
   1832a:	9801      	ldr	r0, [sp, #4]
   1832c:	f7fe fd49 	bl	16dc2 <flash_area_write>
    if (rc != 0) {
   18330:	4603      	mov	r3, r0
   18332:	2800      	cmp	r0, #0
   18334:	d0f3      	beq.n	1831e <img_mgmt_impl_write_image_data+0x16>
        return MGMT_ERR_EUNKNOWN;
   18336:	2301      	movs	r3, #1
   18338:	e7f1      	b.n	1831e <img_mgmt_impl_write_image_data+0x16>

0001833a <img_mgmt_impl_erase_image_data>:
#endif

int
img_mgmt_impl_erase_image_data(unsigned int off, unsigned int num_bytes)
{
   1833a:	b530      	push	{r4, r5, lr}
   1833c:	b083      	sub	sp, #12
   1833e:	4604      	mov	r4, r0
   18340:	460d      	mov	r5, r1
    const struct flash_area *fa;
    int rc;

    rc = flash_area_open(FLASH_AREA_IMAGE_1, &fa);
   18342:	a901      	add	r1, sp, #4
   18344:	2002      	movs	r0, #2
   18346:	f7fe fd0f 	bl	16d68 <flash_area_open>
    if (rc != 0) {
   1834a:	b118      	cbz	r0, 18354 <img_mgmt_impl_erase_image_data+0x1a>
        return MGMT_ERR_EUNKNOWN;
   1834c:	2301      	movs	r3, #1
    if (rc != 0) {
        return MGMT_ERR_EUNKNOWN;
    }

    return 0;
}
   1834e:	4618      	mov	r0, r3
   18350:	b003      	add	sp, #12
   18352:	bd30      	pop	{r4, r5, pc}
    rc = flash_area_erase(fa, off, num_bytes);
   18354:	462a      	mov	r2, r5
   18356:	4621      	mov	r1, r4
   18358:	9801      	ldr	r0, [sp, #4]
   1835a:	f7fe fd45 	bl	16de8 <flash_area_erase>
    if (rc != 0) {
   1835e:	4603      	mov	r3, r0
   18360:	2800      	cmp	r0, #0
   18362:	d0f4      	beq.n	1834e <img_mgmt_impl_erase_image_data+0x14>
        return MGMT_ERR_EUNKNOWN;
   18364:	2301      	movs	r3, #1
   18366:	e7f2      	b.n	1834e <img_mgmt_impl_erase_image_data+0x14>

00018368 <img_mgmt_impl_swap_type>:
}
#endif

int
img_mgmt_impl_swap_type(void)
{
   18368:	b508      	push	{r3, lr}
    switch (boot_swap_type()) {
   1836a:	f7ff f913 	bl	17594 <boot_swap_type>
   1836e:	3801      	subs	r0, #1
   18370:	2803      	cmp	r0, #3
   18372:	d807      	bhi.n	18384 <img_mgmt_impl_swap_type+0x1c>
   18374:	e8df f000 	tbb	[pc, r0]
   18378:	04021210 	.word	0x04021210
    case BOOT_SWAP_TYPE_NONE:
        return IMG_MGMT_SWAP_TYPE_NONE;
    case BOOT_SWAP_TYPE_TEST:
        return IMG_MGMT_SWAP_TYPE_TEST;
    case BOOT_SWAP_TYPE_PERM:
        return IMG_MGMT_SWAP_TYPE_PERM;
   1837c:	2002      	movs	r0, #2
        return IMG_MGMT_SWAP_TYPE_REVERT;
    default:
        assert(0);
        return IMG_MGMT_SWAP_TYPE_NONE;
    }
}
   1837e:	bd08      	pop	{r3, pc}
        return IMG_MGMT_SWAP_TYPE_REVERT;
   18380:	2003      	movs	r0, #3
   18382:	e7fc      	b.n	1837e <img_mgmt_impl_swap_type+0x16>
        assert(0);
   18384:	f7ef ff1c 	bl	81c0 <hal_debugger_connected>
   18388:	b100      	cbz	r0, 1838c <img_mgmt_impl_swap_type+0x24>
   1838a:	be01      	bkpt	0x0001
   1838c:	2300      	movs	r3, #0
   1838e:	461a      	mov	r2, r3
   18390:	4619      	mov	r1, r3
   18392:	4618      	mov	r0, r3
   18394:	f7f1 faaa 	bl	98ec <__assert_func>
        return IMG_MGMT_SWAP_TYPE_NONE;
   18398:	2000      	movs	r0, #0
   1839a:	e7f0      	b.n	1837e <img_mgmt_impl_swap_type+0x16>
        return IMG_MGMT_SWAP_TYPE_TEST;
   1839c:	2001      	movs	r0, #1
   1839e:	e7ee      	b.n	1837e <img_mgmt_impl_swap_type+0x16>

000183a0 <img_mgmt_module_init>:

void
img_mgmt_module_init(void)
{
   183a0:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   183a2:	4b08      	ldr	r3, [pc, #32]	; (183c4 <img_mgmt_module_init+0x24>)
   183a4:	781b      	ldrb	r3, [r3, #0]
   183a6:	b113      	cbz	r3, 183ae <img_mgmt_module_init+0xe>

    img_mgmt_register_group();
   183a8:	f7ff fc1a 	bl	17be0 <img_mgmt_register_group>
}
   183ac:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   183ae:	f7ef ff07 	bl	81c0 <hal_debugger_connected>
   183b2:	b100      	cbz	r0, 183b6 <img_mgmt_module_init+0x16>
   183b4:	be01      	bkpt	0x0001
   183b6:	2300      	movs	r3, #0
   183b8:	461a      	mov	r2, r3
   183ba:	4619      	mov	r1, r3
   183bc:	4618      	mov	r0, r3
   183be:	f7f1 fa95 	bl	98ec <__assert_func>
   183c2:	bf00      	nop
   183c4:	20000506 	.word	0x20000506

000183c8 <img_mgmt_log_gen>:
    modlog_append_mbuf(MYNEWT_VAL(IMG_MGMT_LOG_MOD), LOG_LEVEL_INFO,
                       LOG_ETYPE_CBOR, om);
#endif

    return 0;
}
   183c8:	2000      	movs	r0, #0
   183ca:	4770      	bx	lr

000183cc <img_mgmt_impl_log_upload_start>:

int
img_mgmt_impl_log_upload_start(int status)
{
   183cc:	b508      	push	{r3, lr}
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_UPSTART, status, NULL);
   183ce:	2200      	movs	r2, #0
   183d0:	4601      	mov	r1, r0
   183d2:	4802      	ldr	r0, [pc, #8]	; (183dc <img_mgmt_impl_log_upload_start+0x10>)
   183d4:	f7ff fff8 	bl	183c8 <img_mgmt_log_gen>
}
   183d8:	bd08      	pop	{r3, pc}
   183da:	bf00      	nop
   183dc:	00029364 	.word	0x00029364

000183e0 <img_mgmt_impl_log_upload_done>:

int
img_mgmt_impl_log_upload_done(int status, const uint8_t *hash)
{
   183e0:	b508      	push	{r3, lr}
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_UPDONE, 0, hash);
   183e2:	460a      	mov	r2, r1
   183e4:	2100      	movs	r1, #0
   183e6:	4802      	ldr	r0, [pc, #8]	; (183f0 <img_mgmt_impl_log_upload_done+0x10>)
   183e8:	f7ff ffee 	bl	183c8 <img_mgmt_log_gen>
}
   183ec:	bd08      	pop	{r3, pc}
   183ee:	bf00      	nop
   183f0:	0002935c 	.word	0x0002935c

000183f4 <img_mgmt_impl_log_pending>:

int
img_mgmt_impl_log_pending(int status, const uint8_t *hash)
{
   183f4:	b508      	push	{r3, lr}
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_PEND, status, hash);
   183f6:	460a      	mov	r2, r1
   183f8:	4601      	mov	r1, r0
   183fa:	4802      	ldr	r0, [pc, #8]	; (18404 <img_mgmt_impl_log_pending+0x10>)
   183fc:	f7ff ffe4 	bl	183c8 <img_mgmt_log_gen>
}
   18400:	bd08      	pop	{r3, pc}
   18402:	bf00      	nop
   18404:	00029354 	.word	0x00029354

00018408 <img_mgmt_impl_log_confirm>:

int
img_mgmt_impl_log_confirm(int status, const uint8_t *hash)
{
   18408:	b508      	push	{r3, lr}
    return img_mgmt_log_gen(IMG_MGMT_LOG_EV_CONF, status, hash);
   1840a:	460a      	mov	r2, r1
   1840c:	4601      	mov	r1, r0
   1840e:	4802      	ldr	r0, [pc, #8]	; (18418 <img_mgmt_impl_log_confirm+0x10>)
   18410:	f7ff ffda 	bl	183c8 <img_mgmt_log_gen>
}
   18414:	bd08      	pop	{r3, pc}
   18416:	bf00      	nop
   18418:	0002934c 	.word	0x0002934c

0001841c <os_mgmt_reset>:
/**
 * Command handler: os reset
 */
static int
os_mgmt_reset(struct mgmt_ctxt *ctxt)
{
   1841c:	b508      	push	{r3, lr}
    return os_mgmt_impl_reset(OS_MGMT_RESET_MS);
   1841e:	20fa      	movs	r0, #250	; 0xfa
   18420:	f000 f962 	bl	186e8 <os_mgmt_impl_reset>
}
   18424:	bd08      	pop	{r3, pc}
	...

00018428 <os_mgmt_taskstat_encode_one>:
{
   18428:	b5f0      	push	{r4, r5, r6, r7, lr}
   1842a:	b085      	sub	sp, #20
   1842c:	4606      	mov	r6, r0
   1842e:	460d      	mov	r5, r1
    err |= cbor_encode_text_stringz(encoder, task_info->oti_name);
   18430:	f101 0418 	add.w	r4, r1, #24
   18434:	4620      	mov	r0, r4
   18436:	f7f3 fa17 	bl	b868 <strlen>
   1843a:	4602      	mov	r2, r0
   1843c:	4621      	mov	r1, r4
   1843e:	4630      	mov	r0, r6
   18440:	f000 ffc2 	bl	193c8 <cbor_encode_text_string>
   18444:	4604      	mov	r4, r0
    err |= cbor_encoder_create_map(encoder, &task_map, CborIndefiniteLength);
   18446:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1844a:	4669      	mov	r1, sp
   1844c:	4630      	mov	r0, r6
   1844e:	f000 ffc9 	bl	193e4 <cbor_encoder_create_map>
   18452:	4304      	orrs	r4, r0
   18454:	2204      	movs	r2, #4
   18456:	493c      	ldr	r1, [pc, #240]	; (18548 <os_mgmt_taskstat_encode_one+0x120>)
   18458:	4668      	mov	r0, sp
   1845a:	f000 ffb5 	bl	193c8 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "prio");
   1845e:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_prio);
   18460:	782a      	ldrb	r2, [r5, #0]
   18462:	2300      	movs	r3, #0
   18464:	4668      	mov	r0, sp
   18466:	f000 fef9 	bl	1925c <cbor_encode_uint>
   1846a:	4304      	orrs	r4, r0
   1846c:	2203      	movs	r2, #3
   1846e:	4937      	ldr	r1, [pc, #220]	; (1854c <os_mgmt_taskstat_encode_one+0x124>)
   18470:	4668      	mov	r0, sp
   18472:	f000 ffa9 	bl	193c8 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "tid");
   18476:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_taskid);
   18478:	786a      	ldrb	r2, [r5, #1]
   1847a:	2300      	movs	r3, #0
   1847c:	4668      	mov	r0, sp
   1847e:	f000 feed 	bl	1925c <cbor_encode_uint>
   18482:	4304      	orrs	r4, r0
   18484:	2205      	movs	r2, #5
   18486:	4932      	ldr	r1, [pc, #200]	; (18550 <os_mgmt_taskstat_encode_one+0x128>)
   18488:	4668      	mov	r0, sp
   1848a:	f000 ff9d 	bl	193c8 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "state");
   1848e:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_state);
   18490:	78aa      	ldrb	r2, [r5, #2]
   18492:	2300      	movs	r3, #0
   18494:	4668      	mov	r0, sp
   18496:	f000 fee1 	bl	1925c <cbor_encode_uint>
   1849a:	4304      	orrs	r4, r0
   1849c:	2206      	movs	r2, #6
   1849e:	492d      	ldr	r1, [pc, #180]	; (18554 <os_mgmt_taskstat_encode_one+0x12c>)
   184a0:	4668      	mov	r0, sp
   184a2:	f000 ff91 	bl	193c8 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "stkuse");
   184a6:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_stkusage);
   184a8:	88aa      	ldrh	r2, [r5, #4]
   184aa:	2300      	movs	r3, #0
   184ac:	4668      	mov	r0, sp
   184ae:	f000 fed5 	bl	1925c <cbor_encode_uint>
   184b2:	4304      	orrs	r4, r0
   184b4:	2206      	movs	r2, #6
   184b6:	4928      	ldr	r1, [pc, #160]	; (18558 <os_mgmt_taskstat_encode_one+0x130>)
   184b8:	4668      	mov	r0, sp
   184ba:	f000 ff85 	bl	193c8 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "stksiz");
   184be:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_stksize);
   184c0:	88ea      	ldrh	r2, [r5, #6]
   184c2:	2300      	movs	r3, #0
   184c4:	4668      	mov	r0, sp
   184c6:	f000 fec9 	bl	1925c <cbor_encode_uint>
   184ca:	4304      	orrs	r4, r0
   184cc:	2206      	movs	r2, #6
   184ce:	4923      	ldr	r1, [pc, #140]	; (1855c <os_mgmt_taskstat_encode_one+0x134>)
   184d0:	4668      	mov	r0, sp
   184d2:	f000 ff79 	bl	193c8 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "cswcnt");
   184d6:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_cswcnt);
   184d8:	2700      	movs	r7, #0
   184da:	68aa      	ldr	r2, [r5, #8]
   184dc:	463b      	mov	r3, r7
   184de:	4668      	mov	r0, sp
   184e0:	f000 febc 	bl	1925c <cbor_encode_uint>
   184e4:	4304      	orrs	r4, r0
   184e6:	2207      	movs	r2, #7
   184e8:	491d      	ldr	r1, [pc, #116]	; (18560 <os_mgmt_taskstat_encode_one+0x138>)
   184ea:	4668      	mov	r0, sp
   184ec:	f000 ff6c 	bl	193c8 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "runtime");
   184f0:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_runtime);
   184f2:	68ea      	ldr	r2, [r5, #12]
   184f4:	463b      	mov	r3, r7
   184f6:	4668      	mov	r0, sp
   184f8:	f000 feb0 	bl	1925c <cbor_encode_uint>
   184fc:	4304      	orrs	r4, r0
   184fe:	220c      	movs	r2, #12
   18500:	4918      	ldr	r1, [pc, #96]	; (18564 <os_mgmt_taskstat_encode_one+0x13c>)
   18502:	4668      	mov	r0, sp
   18504:	f000 ff60 	bl	193c8 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "last_checkin");
   18508:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_last_checkin);
   1850a:	692a      	ldr	r2, [r5, #16]
   1850c:	463b      	mov	r3, r7
   1850e:	4668      	mov	r0, sp
   18510:	f000 fea4 	bl	1925c <cbor_encode_uint>
   18514:	4304      	orrs	r4, r0
   18516:	220c      	movs	r2, #12
   18518:	4913      	ldr	r1, [pc, #76]	; (18568 <os_mgmt_taskstat_encode_one+0x140>)
   1851a:	4668      	mov	r0, sp
   1851c:	f000 ff54 	bl	193c8 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&task_map, "next_checkin");
   18520:	4304      	orrs	r4, r0
    err |= cbor_encode_uint(&task_map, task_info->oti_next_checkin);
   18522:	696a      	ldr	r2, [r5, #20]
   18524:	463b      	mov	r3, r7
   18526:	4668      	mov	r0, sp
   18528:	f000 fe98 	bl	1925c <cbor_encode_uint>
   1852c:	4304      	orrs	r4, r0
    err |= cbor_encoder_close_container(encoder, &task_map);
   1852e:	4669      	mov	r1, sp
   18530:	4630      	mov	r0, r6
   18532:	f000 ff67 	bl	19404 <cbor_encoder_close_container>
    if (err != 0) {
   18536:	ea54 0300 	orrs.w	r3, r4, r0
   1853a:	d102      	bne.n	18542 <os_mgmt_taskstat_encode_one+0x11a>
    return 0;
   1853c:	2000      	movs	r0, #0
}
   1853e:	b005      	add	sp, #20
   18540:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return MGMT_ERR_ENOMEM;
   18542:	2002      	movs	r0, #2
   18544:	e7fb      	b.n	1853e <os_mgmt_taskstat_encode_one+0x116>
   18546:	bf00      	nop
   18548:	000293a0 	.word	0x000293a0
   1854c:	000293a8 	.word	0x000293a8
   18550:	000293ac 	.word	0x000293ac
   18554:	000293b4 	.word	0x000293b4
   18558:	000293bc 	.word	0x000293bc
   1855c:	000293c4 	.word	0x000293c4
   18560:	000293cc 	.word	0x000293cc
   18564:	000293d4 	.word	0x000293d4
   18568:	000293e4 	.word	0x000293e4

0001856c <os_mgmt_taskstat_read>:
{
   1856c:	b570      	push	{r4, r5, r6, lr}
   1856e:	b092      	sub	sp, #72	; 0x48
   18570:	4606      	mov	r6, r0
   18572:	2205      	movs	r2, #5
   18574:	4917      	ldr	r1, [pc, #92]	; (185d4 <os_mgmt_taskstat_read+0x68>)
   18576:	f000 ff27 	bl	193c8 <cbor_encode_text_string>
   1857a:	4604      	mov	r4, r0
    err |= cbor_encoder_create_map(&ctxt->encoder, &tasks_map,
   1857c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   18580:	4669      	mov	r1, sp
   18582:	4630      	mov	r0, r6
   18584:	f000 ff2e 	bl	193e4 <cbor_encoder_create_map>
    if (err != 0) {
   18588:	ea50 0304 	orrs.w	r3, r0, r4
   1858c:	d11e      	bne.n	185cc <os_mgmt_taskstat_read+0x60>
    for (task_idx = 0; ; task_idx++) {
   1858e:	2500      	movs	r5, #0
        rc = os_mgmt_impl_task_info(task_idx, &task_info);
   18590:	a904      	add	r1, sp, #16
   18592:	4628      	mov	r0, r5
   18594:	f000 f883 	bl	1869e <os_mgmt_impl_task_info>
   18598:	4604      	mov	r4, r0
        if (rc == MGMT_ERR_ENOENT) {
   1859a:	2805      	cmp	r0, #5
   1859c:	d00d      	beq.n	185ba <os_mgmt_taskstat_read+0x4e>
        } else if (rc != 0) {
   1859e:	b9b0      	cbnz	r0, 185ce <os_mgmt_taskstat_read+0x62>
        rc = os_mgmt_taskstat_encode_one(&tasks_map, &task_info);
   185a0:	a904      	add	r1, sp, #16
   185a2:	4668      	mov	r0, sp
   185a4:	f7ff ff40 	bl	18428 <os_mgmt_taskstat_encode_one>
        if (rc != 0) {
   185a8:	4604      	mov	r4, r0
   185aa:	b908      	cbnz	r0, 185b0 <os_mgmt_taskstat_read+0x44>
    for (task_idx = 0; ; task_idx++) {
   185ac:	3501      	adds	r5, #1
        rc = os_mgmt_impl_task_info(task_idx, &task_info);
   185ae:	e7ef      	b.n	18590 <os_mgmt_taskstat_read+0x24>
            cbor_encoder_close_container(&ctxt->encoder, &tasks_map);
   185b0:	4669      	mov	r1, sp
   185b2:	4630      	mov	r0, r6
   185b4:	f000 ff26 	bl	19404 <cbor_encoder_close_container>
            return rc;
   185b8:	e009      	b.n	185ce <os_mgmt_taskstat_read+0x62>
    err = cbor_encoder_close_container(&ctxt->encoder, &tasks_map);
   185ba:	4669      	mov	r1, sp
   185bc:	4630      	mov	r0, r6
   185be:	f000 ff21 	bl	19404 <cbor_encoder_close_container>
    if (err != 0) {
   185c2:	b908      	cbnz	r0, 185c8 <os_mgmt_taskstat_read+0x5c>
    return 0;
   185c4:	2400      	movs	r4, #0
   185c6:	e002      	b.n	185ce <os_mgmt_taskstat_read+0x62>
        return MGMT_ERR_ENOMEM;
   185c8:	2402      	movs	r4, #2
   185ca:	e000      	b.n	185ce <os_mgmt_taskstat_read+0x62>
        return MGMT_ERR_ENOMEM;
   185cc:	2402      	movs	r4, #2
}
   185ce:	4620      	mov	r0, r4
   185d0:	b012      	add	sp, #72	; 0x48
   185d2:	bd70      	pop	{r4, r5, r6, pc}
   185d4:	000293f4 	.word	0x000293f4

000185d8 <os_mgmt_echo>:
{
   185d8:	b530      	push	{r4, r5, lr}
   185da:	b0b9      	sub	sp, #228	; 0xe4
   185dc:	4604      	mov	r4, r0
    const struct cbor_attr_t attrs[2] = {
   185de:	225c      	movs	r2, #92	; 0x5c
   185e0:	2100      	movs	r1, #0
   185e2:	a801      	add	r0, sp, #4
   185e4:	f7f3 f90b 	bl	b7fe <memset>
   185e8:	4b16      	ldr	r3, [pc, #88]	; (18644 <os_mgmt_echo+0x6c>)
   185ea:	9300      	str	r3, [sp, #0]
   185ec:	2304      	movs	r3, #4
   185ee:	f88d 3004 	strb.w	r3, [sp, #4]
   185f2:	ab18      	add	r3, sp, #96	; 0x60
   185f4:	9302      	str	r3, [sp, #8]
   185f6:	2380      	movs	r3, #128	; 0x80
   185f8:	930a      	str	r3, [sp, #40]	; 0x28
   185fa:	2301      	movs	r3, #1
   185fc:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    echo_buf[0] = '\0';
   18600:	2300      	movs	r3, #0
   18602:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
    err = cbor_read_object(&ctxt->it, attrs);
   18606:	4669      	mov	r1, sp
   18608:	f104 001c 	add.w	r0, r4, #28
   1860c:	f00f fee0 	bl	283d0 <cbor_read_object>
    if (err != 0) {
   18610:	b9a8      	cbnz	r0, 1863e <os_mgmt_echo+0x66>
   18612:	4605      	mov	r5, r0
   18614:	2201      	movs	r2, #1
   18616:	490c      	ldr	r1, [pc, #48]	; (18648 <os_mgmt_echo+0x70>)
   18618:	4620      	mov	r0, r4
   1861a:	f000 fed5 	bl	193c8 <cbor_encode_text_string>
    err |= cbor_encode_text_stringz(&ctxt->encoder, "r");
   1861e:	4305      	orrs	r5, r0
    err |= cbor_encode_text_string(&ctxt->encoder, echo_buf, strlen(echo_buf));
   18620:	a818      	add	r0, sp, #96	; 0x60
   18622:	f7f3 f921 	bl	b868 <strlen>
   18626:	4602      	mov	r2, r0
   18628:	a918      	add	r1, sp, #96	; 0x60
   1862a:	4620      	mov	r0, r4
   1862c:	f000 fecc 	bl	193c8 <cbor_encode_text_string>
    if (err != 0) {
   18630:	ea55 0300 	orrs.w	r3, r5, r0
   18634:	d101      	bne.n	1863a <os_mgmt_echo+0x62>
    return 0;
   18636:	2000      	movs	r0, #0
   18638:	e002      	b.n	18640 <os_mgmt_echo+0x68>
        return MGMT_ERR_ENOMEM;
   1863a:	2002      	movs	r0, #2
   1863c:	e000      	b.n	18640 <os_mgmt_echo+0x68>
        return MGMT_ERR_EINVAL;
   1863e:	2003      	movs	r0, #3
}
   18640:	b039      	add	sp, #228	; 0xe4
   18642:	bd30      	pop	{r4, r5, pc}
   18644:	000299e0 	.word	0x000299e0
   18648:	0002936c 	.word	0x0002936c

0001864c <os_mgmt_register_group>:

void
os_mgmt_register_group(void)
{
   1864c:	b508      	push	{r3, lr}
    mgmt_register_group(&os_mgmt_group);
   1864e:	4802      	ldr	r0, [pc, #8]	; (18658 <os_mgmt_register_group+0xc>)
   18650:	f7f3 ffce 	bl	c5f0 <mgmt_register_group>
}
   18654:	bd08      	pop	{r3, pc}
   18656:	bf00      	nop
   18658:	200002c8 	.word	0x200002c8

0001865c <os_mgmt_module_init>:

void
os_mgmt_module_init(void)
{
   1865c:	b508      	push	{r3, lr}
    os_mgmt_register_group();
   1865e:	f7ff fff5 	bl	1864c <os_mgmt_register_group>
}
   18662:	bd08      	pop	{r3, pc}

00018664 <mynewt_os_mgmt_task_at>:
mynewt_os_mgmt_task_at(int idx)
{
    const struct os_task *task;
    int i;

    task = STAILQ_FIRST(&g_os_task_list);
   18664:	4b05      	ldr	r3, [pc, #20]	; (1867c <mynewt_os_mgmt_task_at+0x18>)
   18666:	681b      	ldr	r3, [r3, #0]
    for (i = 0; i < idx; i++) {
   18668:	2200      	movs	r2, #0
   1866a:	4282      	cmp	r2, r0
   1866c:	da03      	bge.n	18676 <mynewt_os_mgmt_task_at+0x12>
        if (task == NULL) {
   1866e:	b113      	cbz	r3, 18676 <mynewt_os_mgmt_task_at+0x12>
            break;
        }

        task = STAILQ_NEXT(task, t_os_task_list);
   18670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    for (i = 0; i < idx; i++) {
   18672:	3201      	adds	r2, #1
   18674:	e7f9      	b.n	1866a <mynewt_os_mgmt_task_at+0x6>
    }

    return task;
}
   18676:	4618      	mov	r0, r3
   18678:	4770      	bx	lr
   1867a:	bf00      	nop
   1867c:	2000703c 	.word	0x2000703c

00018680 <mynewt_os_mgmt_stack_usage>:
{
   18680:	b500      	push	{lr}
   18682:	b08f      	sub	sp, #60	; 0x3c
    os_task_info_get(task, &oti);
   18684:	4669      	mov	r1, sp
   18686:	f7f2 fe1d 	bl	b2c4 <os_task_info_get>
}
   1868a:	f8bd 0004 	ldrh.w	r0, [sp, #4]
   1868e:	b00f      	add	sp, #60	; 0x3c
   18690:	f85d fb04 	ldr.w	pc, [sp], #4

00018694 <mynewt_os_mgmt_reset_tmo>:
{
   18694:	b508      	push	{r3, lr}
    hal_watchdog_tickle();
   18696:	f002 fc29 	bl	1aeec <hal_watchdog_tickle>
    hal_system_reset();
   1869a:	f7ef fd99 	bl	81d0 <hal_system_reset>

0001869e <os_mgmt_impl_task_info>:

int
os_mgmt_impl_task_info(int idx, struct os_mgmt_task_info *out_info)
{
   1869e:	b538      	push	{r3, r4, r5, lr}
   186a0:	460d      	mov	r5, r1
    const struct os_task *task;

    task = mynewt_os_mgmt_task_at(idx);
   186a2:	f7ff ffdf 	bl	18664 <mynewt_os_mgmt_task_at>
    if (task == NULL) {
   186a6:	b1e8      	cbz	r0, 186e4 <os_mgmt_impl_task_info+0x46>
   186a8:	4604      	mov	r4, r0
        return MGMT_ERR_ENOENT;
    }

    out_info->oti_prio = task->t_prio;
   186aa:	7ac3      	ldrb	r3, [r0, #11]
   186ac:	702b      	strb	r3, [r5, #0]
    out_info->oti_taskid = task->t_taskid;
   186ae:	7a83      	ldrb	r3, [r0, #10]
   186b0:	706b      	strb	r3, [r5, #1]
    out_info->oti_state = task->t_state;
   186b2:	7b03      	ldrb	r3, [r0, #12]
   186b4:	70ab      	strb	r3, [r5, #2]
    out_info->oti_stkusage = mynewt_os_mgmt_stack_usage(task);
   186b6:	f7ff ffe3 	bl	18680 <mynewt_os_mgmt_stack_usage>
   186ba:	80a8      	strh	r0, [r5, #4]
    out_info->oti_stksize = task->t_stacksize;
   186bc:	8923      	ldrh	r3, [r4, #8]
   186be:	80eb      	strh	r3, [r5, #6]
    out_info->oti_cswcnt = task->t_ctx_sw_cnt;
   186c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   186c2:	60ab      	str	r3, [r5, #8]
    out_info->oti_runtime = task->t_run_time;
   186c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   186c6:	60eb      	str	r3, [r5, #12]
    out_info->oti_last_checkin = task->t_sanity_check.sc_checkin_last;
   186c8:	6a23      	ldr	r3, [r4, #32]
   186ca:	612b      	str	r3, [r5, #16]
    out_info->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
   186cc:	6a23      	ldr	r3, [r4, #32]
                                 task->t_sanity_check.sc_checkin_itvl;
   186ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
    out_info->oti_next_checkin = task->t_sanity_check.sc_checkin_last +
   186d0:	4413      	add	r3, r2
   186d2:	616b      	str	r3, [r5, #20]
    strncpy(out_info->oti_name, task->t_name, sizeof out_info->oti_name);
   186d4:	2220      	movs	r2, #32
   186d6:	6921      	ldr	r1, [r4, #16]
   186d8:	f105 0018 	add.w	r0, r5, #24
   186dc:	f003 fd1a 	bl	1c114 <strncpy>

    return 0;
   186e0:	2000      	movs	r0, #0
}
   186e2:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOENT;
   186e4:	2005      	movs	r0, #5
   186e6:	e7fc      	b.n	186e2 <os_mgmt_impl_task_info+0x44>

000186e8 <os_mgmt_impl_reset>:

int
os_mgmt_impl_reset(unsigned int delay_ms)
{
   186e8:	b530      	push	{r4, r5, lr}
   186ea:	b085      	sub	sp, #20
   186ec:	4604      	mov	r4, r0
#if MYNEWT_VAL(LOG_SOFT_RESET)
    struct log_reboot_info info = {
   186ee:	2306      	movs	r3, #6
   186f0:	f8ad 3000 	strh.w	r3, [sp]
   186f4:	2300      	movs	r3, #0
   186f6:	9301      	str	r3, [sp, #4]
   186f8:	9302      	str	r3, [sp, #8]
   186fa:	9303      	str	r3, [sp, #12]
        .file = NULL,
        .line = 0,
        .pc = 0,
    };

    if (img_mgmt_state_any_pending()) {
   186fc:	f7ff fab3 	bl	17c66 <img_mgmt_state_any_pending>
   18700:	b110      	cbz	r0, 18708 <os_mgmt_impl_reset+0x20>
        info.reason = HAL_RESET_DFU;
   18702:	2308      	movs	r3, #8
   18704:	f8ad 3000 	strh.w	r3, [sp]
    }
#endif
    os_callout_init(&mynewt_os_mgmt_reset_callout, os_eventq_dflt_get(),
   18708:	f7f1 fce8 	bl	a0dc <os_eventq_dflt_get>
   1870c:	4d0a      	ldr	r5, [pc, #40]	; (18738 <os_mgmt_impl_reset+0x50>)
   1870e:	2300      	movs	r3, #0
   18710:	4a0a      	ldr	r2, [pc, #40]	; (1873c <os_mgmt_impl_reset+0x54>)
   18712:	4601      	mov	r1, r0
   18714:	4628      	mov	r0, r5
   18716:	f7f1 fa91 	bl	9c3c <os_callout_init>
                    mynewt_os_mgmt_reset_tmo, NULL);

#if MYNEWT_VAL(LOG_SOFT_RESET)
    log_reboot(&info);
   1871a:	4668      	mov	r0, sp
   1871c:	f00f f93a 	bl	27994 <log_reboot>
#endif
    os_callout_reset(&mynewt_os_mgmt_reset_callout,
                     delay_ms * OS_TICKS_PER_SEC / 1000);
   18720:	01e4      	lsls	r4, r4, #7
   18722:	4907      	ldr	r1, [pc, #28]	; (18740 <os_mgmt_impl_reset+0x58>)
   18724:	fba1 3104 	umull	r3, r1, r1, r4
    os_callout_reset(&mynewt_os_mgmt_reset_callout,
   18728:	0989      	lsrs	r1, r1, #6
   1872a:	4628      	mov	r0, r5
   1872c:	f7f1 fab2 	bl	9c94 <os_callout_reset>

    return 0;
}
   18730:	2000      	movs	r0, #0
   18732:	b005      	add	sp, #20
   18734:	bd30      	pop	{r4, r5, pc}
   18736:	bf00      	nop
   18738:	20008044 	.word	0x20008044
   1873c:	00018695 	.word	0x00018695
   18740:	10624dd3 	.word	0x10624dd3

00018744 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   18744:	b4f0      	push	{r4, r5, r6, r7}
   18746:	b08c      	sub	sp, #48	; 0x30
   18748:	4604      	mov	r4, r0
   1874a:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
   1874c:	ad01      	add	r5, sp, #4
   1874e:	4e2a      	ldr	r6, [pc, #168]	; (187f8 <tc_aes128_set_encrypt_key+0xb4>)
   18750:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   18752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   18754:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   18756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   18758:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   1875c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   18760:	2c00      	cmp	r4, #0
   18762:	d044      	beq.n	187ee <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   18764:	2f00      	cmp	r7, #0
   18766:	d044      	beq.n	187f2 <tc_aes128_set_encrypt_key+0xae>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
   18768:	2300      	movs	r3, #0
   1876a:	e00f      	b.n	1878c <tc_aes128_set_encrypt_key+0x48>
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1876c:	f817 0023 	ldrb.w	r0, [r7, r3, lsl #2]
   18770:	eb07 0183 	add.w	r1, r7, r3, lsl #2
   18774:	784a      	ldrb	r2, [r1, #1]
   18776:	0412      	lsls	r2, r2, #16
   18778:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   1877c:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   1877e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   18782:	78c9      	ldrb	r1, [r1, #3]
   18784:	430a      	orrs	r2, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   18786:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	for (i = 0; i < Nk; ++i) {
   1878a:	3301      	adds	r3, #1
   1878c:	2b03      	cmp	r3, #3
   1878e:	d9ed      	bls.n	1876c <tc_aes128_set_encrypt_key+0x28>
   18790:	e006      	b.n	187a0 <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
   18792:	1f19      	subs	r1, r3, #4
   18794:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
   18798:	404a      	eors	r2, r1
   1879a:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
   1879e:	3301      	adds	r3, #1
   187a0:	2b2b      	cmp	r3, #43	; 0x2b
   187a2:	d820      	bhi.n	187e6 <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
   187a4:	1e5a      	subs	r2, r3, #1
   187a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
		if ((i % Nk) == 0) {
   187aa:	f013 0f03 	tst.w	r3, #3
   187ae:	d1f0      	bne.n	18792 <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
   187b0:	ea4f 6232 	mov.w	r2, r2, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
   187b4:	0e11      	lsrs	r1, r2, #24
   187b6:	4811      	ldr	r0, [pc, #68]	; (187fc <tc_aes128_set_encrypt_key+0xb8>)
   187b8:	5c45      	ldrb	r5, [r0, r1]
   187ba:	f3c2 4107 	ubfx	r1, r2, #16, #8
   187be:	5c41      	ldrb	r1, [r0, r1]
   187c0:	0409      	lsls	r1, r1, #16
   187c2:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
   187c6:	f3c2 2507 	ubfx	r5, r2, #8, #8
   187ca:	5d45      	ldrb	r5, [r0, r5]
   187cc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
   187d0:	b2d2      	uxtb	r2, r2
   187d2:	5c82      	ldrb	r2, [r0, r2]
   187d4:	4311      	orrs	r1, r2
   187d6:	f023 0203 	bic.w	r2, r3, #3
   187da:	a80c      	add	r0, sp, #48	; 0x30
   187dc:	4402      	add	r2, r0
   187de:	f852 2c2c 	ldr.w	r2, [r2, #-44]
   187e2:	404a      	eors	r2, r1
   187e4:	e7d5      	b.n	18792 <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
   187e6:	2001      	movs	r0, #1
}
   187e8:	b00c      	add	sp, #48	; 0x30
   187ea:	bcf0      	pop	{r4, r5, r6, r7}
   187ec:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   187ee:	2000      	movs	r0, #0
   187f0:	e7fa      	b.n	187e8 <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
   187f2:	2000      	movs	r0, #0
   187f4:	e7f8      	b.n	187e8 <tc_aes128_set_encrypt_key+0xa4>
   187f6:	bf00      	nop
   187f8:	000293fc 	.word	0x000293fc
   187fc:	00029428 	.word	0x00029428

00018800 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   18800:	2800      	cmp	r0, #0
   18802:	f000 8367 	beq.w	18ed4 <tc_aes_encrypt+0x6d4>
{
   18806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1880a:	b088      	sub	sp, #32
   1880c:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   1880e:	2900      	cmp	r1, #0
   18810:	f000 8362 	beq.w	18ed8 <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   18814:	2a00      	cmp	r2, #0
   18816:	f000 8361 	beq.w	18edc <tc_aes_encrypt+0x6dc>
   1881a:	4617      	mov	r7, r2
   1881c:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   1881e:	2310      	movs	r3, #16
   18820:	4619      	mov	r1, r3
   18822:	eb0d 0003 	add.w	r0, sp, r3
   18826:	f000 fb5d 	bl	18ee4 <_copy>
	add_round_key(state, s->words);
   1882a:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1882c:	683b      	ldr	r3, [r7, #0]
   1882e:	f89d 2010 	ldrb.w	r2, [sp, #16]
   18832:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   18836:	f88d 2010 	strb.w	r2, [sp, #16]
   1883a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1883e:	f89d 1011 	ldrb.w	r1, [sp, #17]
   18842:	404a      	eors	r2, r1
   18844:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   18848:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1884c:	f89d 1012 	ldrb.w	r1, [sp, #18]
   18850:	404a      	eors	r2, r1
   18852:	f88d 2012 	strb.w	r2, [sp, #18]
   18856:	b2db      	uxtb	r3, r3
   18858:	f89d 2013 	ldrb.w	r2, [sp, #19]
   1885c:	4053      	eors	r3, r2
   1885e:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   18862:	687b      	ldr	r3, [r7, #4]
   18864:	f89d 2014 	ldrb.w	r2, [sp, #20]
   18868:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   1886c:	f88d 2014 	strb.w	r2, [sp, #20]
   18870:	f3c3 4207 	ubfx	r2, r3, #16, #8
   18874:	f89d 1015 	ldrb.w	r1, [sp, #21]
   18878:	404a      	eors	r2, r1
   1887a:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1887e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   18882:	f89d 1016 	ldrb.w	r1, [sp, #22]
   18886:	404a      	eors	r2, r1
   18888:	f88d 2016 	strb.w	r2, [sp, #22]
   1888c:	b2db      	uxtb	r3, r3
   1888e:	f89d 2017 	ldrb.w	r2, [sp, #23]
   18892:	4053      	eors	r3, r2
   18894:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   18898:	68bb      	ldr	r3, [r7, #8]
   1889a:	f89d 2018 	ldrb.w	r2, [sp, #24]
   1889e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   188a2:	f88d 2018 	strb.w	r2, [sp, #24]
   188a6:	f3c3 4207 	ubfx	r2, r3, #16, #8
   188aa:	f89d 1019 	ldrb.w	r1, [sp, #25]
   188ae:	404a      	eors	r2, r1
   188b0:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   188b4:	f3c3 2207 	ubfx	r2, r3, #8, #8
   188b8:	f89d 101a 	ldrb.w	r1, [sp, #26]
   188bc:	404a      	eors	r2, r1
   188be:	f88d 201a 	strb.w	r2, [sp, #26]
   188c2:	b2db      	uxtb	r3, r3
   188c4:	f89d 201b 	ldrb.w	r2, [sp, #27]
   188c8:	4053      	eors	r3, r2
   188ca:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   188ce:	68fb      	ldr	r3, [r7, #12]
   188d0:	f89d 201c 	ldrb.w	r2, [sp, #28]
   188d4:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   188d8:	f88d 201c 	strb.w	r2, [sp, #28]
   188dc:	f3c3 4207 	ubfx	r2, r3, #16, #8
   188e0:	f89d 101d 	ldrb.w	r1, [sp, #29]
   188e4:	404a      	eors	r2, r1
   188e6:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   188ea:	f3c3 2207 	ubfx	r2, r3, #8, #8
   188ee:	f89d 101e 	ldrb.w	r1, [sp, #30]
   188f2:	404a      	eors	r2, r1
   188f4:	f88d 201e 	strb.w	r2, [sp, #30]
   188f8:	b2db      	uxtb	r3, r3
   188fa:	f89d 201f 	ldrb.w	r2, [sp, #31]
   188fe:	4053      	eors	r3, r2
   18900:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
   18904:	2500      	movs	r5, #0
   18906:	e210      	b.n	18d2a <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
   18908:	a904      	add	r1, sp, #16
   1890a:	5ccc      	ldrb	r4, [r1, r3]
   1890c:	4a02      	ldr	r2, [pc, #8]	; (18918 <tc_aes_encrypt+0x118>)
   1890e:	5d14      	ldrb	r4, [r2, r4]
   18910:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   18912:	3301      	adds	r3, #1
   18914:	e002      	b.n	1891c <tc_aes_encrypt+0x11c>
   18916:	bf00      	nop
   18918:	00029428 	.word	0x00029428
   1891c:	2b0f      	cmp	r3, #15
   1891e:	d9f3      	bls.n	18908 <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   18920:	f89d 3010 	ldrb.w	r3, [sp, #16]
   18924:	f88d 3000 	strb.w	r3, [sp]
   18928:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1892c:	f88d 3001 	strb.w	r3, [sp, #1]
   18930:	f89d 301a 	ldrb.w	r3, [sp, #26]
   18934:	f88d 3002 	strb.w	r3, [sp, #2]
   18938:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1893c:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   18940:	f89d 3014 	ldrb.w	r3, [sp, #20]
   18944:	f88d 3004 	strb.w	r3, [sp, #4]
   18948:	f89d 3019 	ldrb.w	r3, [sp, #25]
   1894c:	f88d 3005 	strb.w	r3, [sp, #5]
   18950:	f89d 301e 	ldrb.w	r3, [sp, #30]
   18954:	f88d 3006 	strb.w	r3, [sp, #6]
   18958:	f89d 3013 	ldrb.w	r3, [sp, #19]
   1895c:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   18960:	f89d 3018 	ldrb.w	r3, [sp, #24]
   18964:	f88d 3008 	strb.w	r3, [sp, #8]
   18968:	f89d 301d 	ldrb.w	r3, [sp, #29]
   1896c:	f88d 3009 	strb.w	r3, [sp, #9]
   18970:	f89d 3012 	ldrb.w	r3, [sp, #18]
   18974:	f88d 300a 	strb.w	r3, [sp, #10]
   18978:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1897c:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   18980:	f89d 301c 	ldrb.w	r3, [sp, #28]
   18984:	f88d 300c 	strb.w	r3, [sp, #12]
   18988:	f89d 3011 	ldrb.w	r3, [sp, #17]
   1898c:	f88d 300d 	strb.w	r3, [sp, #13]
   18990:	f89d 3016 	ldrb.w	r3, [sp, #22]
   18994:	f88d 300e 	strb.w	r3, [sp, #14]
   18998:	f89d 301b 	ldrb.w	r3, [sp, #27]
   1899c:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   189a0:	2310      	movs	r3, #16
   189a2:	466a      	mov	r2, sp
   189a4:	4619      	mov	r1, r3
   189a6:	eb0d 0003 	add.w	r0, sp, r3
   189aa:	f000 fa9b 	bl	18ee4 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   189ae:	f89d 0010 	ldrb.w	r0, [sp, #16]
   189b2:	f000 faa7 	bl	18f04 <_double_byte>
   189b6:	4604      	mov	r4, r0
   189b8:	f89d 0011 	ldrb.w	r0, [sp, #17]
   189bc:	f000 faa2 	bl	18f04 <_double_byte>
   189c0:	f89d 1011 	ldrb.w	r1, [sp, #17]
   189c4:	f89d 2012 	ldrb.w	r2, [sp, #18]
   189c8:	f89d 3013 	ldrb.w	r3, [sp, #19]
   189cc:	4048      	eors	r0, r1
   189ce:	4044      	eors	r4, r0
   189d0:	4062      	eors	r2, r4
   189d2:	4053      	eors	r3, r2
   189d4:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   189d8:	f89d 4010 	ldrb.w	r4, [sp, #16]
   189dc:	4608      	mov	r0, r1
   189de:	f000 fa91 	bl	18f04 <_double_byte>
   189e2:	4044      	eors	r4, r0
   189e4:	b2e4      	uxtb	r4, r4
   189e6:	f89d 0012 	ldrb.w	r0, [sp, #18]
   189ea:	f000 fa8b 	bl	18f04 <_double_byte>
   189ee:	f89d 2012 	ldrb.w	r2, [sp, #18]
   189f2:	f89d 3013 	ldrb.w	r3, [sp, #19]
   189f6:	4050      	eors	r0, r2
   189f8:	4044      	eors	r4, r0
   189fa:	405c      	eors	r4, r3
   189fc:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   18a00:	f89d 4010 	ldrb.w	r4, [sp, #16]
   18a04:	f89d 0011 	ldrb.w	r0, [sp, #17]
   18a08:	4044      	eors	r4, r0
   18a0a:	4610      	mov	r0, r2
   18a0c:	f000 fa7a 	bl	18f04 <_double_byte>
   18a10:	4044      	eors	r4, r0
   18a12:	b2e4      	uxtb	r4, r4
   18a14:	f89d 0013 	ldrb.w	r0, [sp, #19]
   18a18:	f000 fa74 	bl	18f04 <_double_byte>
   18a1c:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18a20:	4058      	eors	r0, r3
   18a22:	4044      	eors	r4, r0
   18a24:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   18a28:	f89d 0010 	ldrb.w	r0, [sp, #16]
   18a2c:	f000 fa6a 	bl	18f04 <_double_byte>
   18a30:	f89d 2010 	ldrb.w	r2, [sp, #16]
   18a34:	f89d 3011 	ldrb.w	r3, [sp, #17]
   18a38:	f89d 4012 	ldrb.w	r4, [sp, #18]
   18a3c:	4050      	eors	r0, r2
   18a3e:	4043      	eors	r3, r0
   18a40:	405c      	eors	r4, r3
   18a42:	b2e4      	uxtb	r4, r4
   18a44:	f89d 0013 	ldrb.w	r0, [sp, #19]
   18a48:	f000 fa5c 	bl	18f04 <_double_byte>
   18a4c:	4060      	eors	r0, r4
   18a4e:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   18a52:	f89d 0014 	ldrb.w	r0, [sp, #20]
   18a56:	f000 fa55 	bl	18f04 <_double_byte>
   18a5a:	4604      	mov	r4, r0
   18a5c:	f89d 0015 	ldrb.w	r0, [sp, #21]
   18a60:	f000 fa50 	bl	18f04 <_double_byte>
   18a64:	f89d 1015 	ldrb.w	r1, [sp, #21]
   18a68:	f89d 2016 	ldrb.w	r2, [sp, #22]
   18a6c:	f89d 3017 	ldrb.w	r3, [sp, #23]
   18a70:	4048      	eors	r0, r1
   18a72:	4044      	eors	r4, r0
   18a74:	4062      	eors	r2, r4
   18a76:	4053      	eors	r3, r2
   18a78:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   18a7c:	f89d 4014 	ldrb.w	r4, [sp, #20]
   18a80:	4608      	mov	r0, r1
   18a82:	f000 fa3f 	bl	18f04 <_double_byte>
   18a86:	4044      	eors	r4, r0
   18a88:	b2e4      	uxtb	r4, r4
   18a8a:	f89d 0016 	ldrb.w	r0, [sp, #22]
   18a8e:	f000 fa39 	bl	18f04 <_double_byte>
   18a92:	f89d 2016 	ldrb.w	r2, [sp, #22]
   18a96:	f89d 3017 	ldrb.w	r3, [sp, #23]
   18a9a:	4050      	eors	r0, r2
   18a9c:	4044      	eors	r4, r0
   18a9e:	405c      	eors	r4, r3
   18aa0:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   18aa4:	f89d 4014 	ldrb.w	r4, [sp, #20]
   18aa8:	f89d 0015 	ldrb.w	r0, [sp, #21]
   18aac:	4044      	eors	r4, r0
   18aae:	4610      	mov	r0, r2
   18ab0:	f000 fa28 	bl	18f04 <_double_byte>
   18ab4:	4044      	eors	r4, r0
   18ab6:	b2e4      	uxtb	r4, r4
   18ab8:	f89d 0017 	ldrb.w	r0, [sp, #23]
   18abc:	f000 fa22 	bl	18f04 <_double_byte>
   18ac0:	f89d 3017 	ldrb.w	r3, [sp, #23]
   18ac4:	4058      	eors	r0, r3
   18ac6:	4044      	eors	r4, r0
   18ac8:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   18acc:	f89d 0014 	ldrb.w	r0, [sp, #20]
   18ad0:	f000 fa18 	bl	18f04 <_double_byte>
   18ad4:	f89d 2014 	ldrb.w	r2, [sp, #20]
   18ad8:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18adc:	f89d 4016 	ldrb.w	r4, [sp, #22]
   18ae0:	4050      	eors	r0, r2
   18ae2:	4043      	eors	r3, r0
   18ae4:	405c      	eors	r4, r3
   18ae6:	b2e4      	uxtb	r4, r4
   18ae8:	f89d 0017 	ldrb.w	r0, [sp, #23]
   18aec:	f000 fa0a 	bl	18f04 <_double_byte>
   18af0:	4060      	eors	r0, r4
   18af2:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   18af6:	f89d 0018 	ldrb.w	r0, [sp, #24]
   18afa:	f000 fa03 	bl	18f04 <_double_byte>
   18afe:	4604      	mov	r4, r0
   18b00:	f89d 0019 	ldrb.w	r0, [sp, #25]
   18b04:	f000 f9fe 	bl	18f04 <_double_byte>
   18b08:	f89d 1019 	ldrb.w	r1, [sp, #25]
   18b0c:	f89d 201a 	ldrb.w	r2, [sp, #26]
   18b10:	f89d 301b 	ldrb.w	r3, [sp, #27]
   18b14:	4048      	eors	r0, r1
   18b16:	4044      	eors	r4, r0
   18b18:	4062      	eors	r2, r4
   18b1a:	4053      	eors	r3, r2
   18b1c:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   18b20:	f89d 4018 	ldrb.w	r4, [sp, #24]
   18b24:	4608      	mov	r0, r1
   18b26:	f000 f9ed 	bl	18f04 <_double_byte>
   18b2a:	4044      	eors	r4, r0
   18b2c:	b2e4      	uxtb	r4, r4
   18b2e:	f89d 001a 	ldrb.w	r0, [sp, #26]
   18b32:	f000 f9e7 	bl	18f04 <_double_byte>
   18b36:	f89d 201a 	ldrb.w	r2, [sp, #26]
   18b3a:	f89d 301b 	ldrb.w	r3, [sp, #27]
   18b3e:	4050      	eors	r0, r2
   18b40:	4044      	eors	r4, r0
   18b42:	405c      	eors	r4, r3
   18b44:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   18b48:	f89d 4018 	ldrb.w	r4, [sp, #24]
   18b4c:	f89d 0019 	ldrb.w	r0, [sp, #25]
   18b50:	4044      	eors	r4, r0
   18b52:	4610      	mov	r0, r2
   18b54:	f000 f9d6 	bl	18f04 <_double_byte>
   18b58:	4044      	eors	r4, r0
   18b5a:	b2e4      	uxtb	r4, r4
   18b5c:	f89d 001b 	ldrb.w	r0, [sp, #27]
   18b60:	f000 f9d0 	bl	18f04 <_double_byte>
   18b64:	f89d 301b 	ldrb.w	r3, [sp, #27]
   18b68:	4058      	eors	r0, r3
   18b6a:	4044      	eors	r4, r0
   18b6c:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   18b70:	f89d 0018 	ldrb.w	r0, [sp, #24]
   18b74:	f000 f9c6 	bl	18f04 <_double_byte>
   18b78:	f89d 2018 	ldrb.w	r2, [sp, #24]
   18b7c:	f89d 3019 	ldrb.w	r3, [sp, #25]
   18b80:	f89d 401a 	ldrb.w	r4, [sp, #26]
   18b84:	4050      	eors	r0, r2
   18b86:	4043      	eors	r3, r0
   18b88:	405c      	eors	r4, r3
   18b8a:	b2e4      	uxtb	r4, r4
   18b8c:	f89d 001b 	ldrb.w	r0, [sp, #27]
   18b90:	f000 f9b8 	bl	18f04 <_double_byte>
   18b94:	4060      	eors	r0, r4
   18b96:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   18b9a:	f89d 001c 	ldrb.w	r0, [sp, #28]
   18b9e:	f000 f9b1 	bl	18f04 <_double_byte>
   18ba2:	4604      	mov	r4, r0
   18ba4:	f89d 001d 	ldrb.w	r0, [sp, #29]
   18ba8:	f000 f9ac 	bl	18f04 <_double_byte>
   18bac:	f89d 101d 	ldrb.w	r1, [sp, #29]
   18bb0:	f89d 201e 	ldrb.w	r2, [sp, #30]
   18bb4:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18bb8:	4048      	eors	r0, r1
   18bba:	4044      	eors	r4, r0
   18bbc:	4062      	eors	r2, r4
   18bbe:	4053      	eors	r3, r2
   18bc0:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   18bc4:	f89d 401c 	ldrb.w	r4, [sp, #28]
   18bc8:	4608      	mov	r0, r1
   18bca:	f000 f99b 	bl	18f04 <_double_byte>
   18bce:	4044      	eors	r4, r0
   18bd0:	b2e4      	uxtb	r4, r4
   18bd2:	f89d 001e 	ldrb.w	r0, [sp, #30]
   18bd6:	f000 f995 	bl	18f04 <_double_byte>
   18bda:	f89d 201e 	ldrb.w	r2, [sp, #30]
   18bde:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18be2:	4050      	eors	r0, r2
   18be4:	4044      	eors	r4, r0
   18be6:	405c      	eors	r4, r3
   18be8:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   18bec:	f89d 401c 	ldrb.w	r4, [sp, #28]
   18bf0:	f89d 001d 	ldrb.w	r0, [sp, #29]
   18bf4:	4044      	eors	r4, r0
   18bf6:	4610      	mov	r0, r2
   18bf8:	f000 f984 	bl	18f04 <_double_byte>
   18bfc:	4044      	eors	r4, r0
   18bfe:	b2e4      	uxtb	r4, r4
   18c00:	f89d 001f 	ldrb.w	r0, [sp, #31]
   18c04:	f000 f97e 	bl	18f04 <_double_byte>
   18c08:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18c0c:	4058      	eors	r0, r3
   18c0e:	4044      	eors	r4, r0
   18c10:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   18c14:	f89d 001c 	ldrb.w	r0, [sp, #28]
   18c18:	f000 f974 	bl	18f04 <_double_byte>
   18c1c:	f89d 201c 	ldrb.w	r2, [sp, #28]
   18c20:	f89d 301d 	ldrb.w	r3, [sp, #29]
   18c24:	f89d 401e 	ldrb.w	r4, [sp, #30]
   18c28:	4050      	eors	r0, r2
   18c2a:	4043      	eors	r3, r0
   18c2c:	405c      	eors	r4, r3
   18c2e:	b2e4      	uxtb	r4, r4
   18c30:	f89d 001f 	ldrb.w	r0, [sp, #31]
   18c34:	f000 f966 	bl	18f04 <_double_byte>
   18c38:	4060      	eors	r0, r4
   18c3a:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   18c3e:	2310      	movs	r3, #16
   18c40:	466a      	mov	r2, sp
   18c42:	4619      	mov	r1, r3
   18c44:	eb0d 0003 	add.w	r0, sp, r3
   18c48:	f000 f94c 	bl	18ee4 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   18c4c:	3501      	adds	r5, #1
   18c4e:	012b      	lsls	r3, r5, #4
   18c50:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   18c52:	58f3      	ldr	r3, [r6, r3]
   18c54:	f89d 1010 	ldrb.w	r1, [sp, #16]
   18c58:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   18c5c:	f88d 1010 	strb.w	r1, [sp, #16]
   18c60:	f3c3 4107 	ubfx	r1, r3, #16, #8
   18c64:	f89d 0011 	ldrb.w	r0, [sp, #17]
   18c68:	4041      	eors	r1, r0
   18c6a:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   18c6e:	f3c3 2107 	ubfx	r1, r3, #8, #8
   18c72:	f89d 0012 	ldrb.w	r0, [sp, #18]
   18c76:	4041      	eors	r1, r0
   18c78:	f88d 1012 	strb.w	r1, [sp, #18]
   18c7c:	b2db      	uxtb	r3, r3
   18c7e:	f89d 1013 	ldrb.w	r1, [sp, #19]
   18c82:	404b      	eors	r3, r1
   18c84:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   18c88:	6853      	ldr	r3, [r2, #4]
   18c8a:	f89d 1014 	ldrb.w	r1, [sp, #20]
   18c8e:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   18c92:	f88d 1014 	strb.w	r1, [sp, #20]
   18c96:	f3c3 4107 	ubfx	r1, r3, #16, #8
   18c9a:	f89d 0015 	ldrb.w	r0, [sp, #21]
   18c9e:	4041      	eors	r1, r0
   18ca0:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   18ca4:	f3c3 2107 	ubfx	r1, r3, #8, #8
   18ca8:	f89d 0016 	ldrb.w	r0, [sp, #22]
   18cac:	4041      	eors	r1, r0
   18cae:	f88d 1016 	strb.w	r1, [sp, #22]
   18cb2:	b2db      	uxtb	r3, r3
   18cb4:	f89d 1017 	ldrb.w	r1, [sp, #23]
   18cb8:	404b      	eors	r3, r1
   18cba:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   18cbe:	6893      	ldr	r3, [r2, #8]
   18cc0:	f89d 1018 	ldrb.w	r1, [sp, #24]
   18cc4:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   18cc8:	f88d 1018 	strb.w	r1, [sp, #24]
   18ccc:	f3c3 4107 	ubfx	r1, r3, #16, #8
   18cd0:	f89d 0019 	ldrb.w	r0, [sp, #25]
   18cd4:	4041      	eors	r1, r0
   18cd6:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   18cda:	f3c3 2107 	ubfx	r1, r3, #8, #8
   18cde:	f89d 001a 	ldrb.w	r0, [sp, #26]
   18ce2:	4041      	eors	r1, r0
   18ce4:	f88d 101a 	strb.w	r1, [sp, #26]
   18ce8:	b2db      	uxtb	r3, r3
   18cea:	f89d 101b 	ldrb.w	r1, [sp, #27]
   18cee:	404b      	eors	r3, r1
   18cf0:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   18cf4:	68d3      	ldr	r3, [r2, #12]
   18cf6:	f89d 201c 	ldrb.w	r2, [sp, #28]
   18cfa:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   18cfe:	f88d 201c 	strb.w	r2, [sp, #28]
   18d02:	f3c3 4207 	ubfx	r2, r3, #16, #8
   18d06:	f89d 101d 	ldrb.w	r1, [sp, #29]
   18d0a:	404a      	eors	r2, r1
   18d0c:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   18d10:	f3c3 2207 	ubfx	r2, r3, #8, #8
   18d14:	f89d 101e 	ldrb.w	r1, [sp, #30]
   18d18:	404a      	eors	r2, r1
   18d1a:	f88d 201e 	strb.w	r2, [sp, #30]
   18d1e:	b2db      	uxtb	r3, r3
   18d20:	f89d 201f 	ldrb.w	r2, [sp, #31]
   18d24:	4053      	eors	r3, r2
   18d26:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
   18d2a:	2d08      	cmp	r5, #8
   18d2c:	d801      	bhi.n	18d32 <tc_aes_encrypt+0x532>
	for (i = 0; i < (Nb * Nk); ++i) {
   18d2e:	2300      	movs	r3, #0
   18d30:	e5f4      	b.n	1891c <tc_aes_encrypt+0x11c>
   18d32:	2300      	movs	r3, #0
   18d34:	e005      	b.n	18d42 <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
   18d36:	aa04      	add	r2, sp, #16
   18d38:	5cd1      	ldrb	r1, [r2, r3]
   18d3a:	4869      	ldr	r0, [pc, #420]	; (18ee0 <tc_aes_encrypt+0x6e0>)
   18d3c:	5c41      	ldrb	r1, [r0, r1]
   18d3e:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
   18d40:	3301      	adds	r3, #1
   18d42:	2b0f      	cmp	r3, #15
   18d44:	d9f7      	bls.n	18d36 <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   18d46:	f89d 3010 	ldrb.w	r3, [sp, #16]
   18d4a:	f88d 3000 	strb.w	r3, [sp]
   18d4e:	f89d 3015 	ldrb.w	r3, [sp, #21]
   18d52:	f88d 3001 	strb.w	r3, [sp, #1]
   18d56:	f89d 301a 	ldrb.w	r3, [sp, #26]
   18d5a:	f88d 3002 	strb.w	r3, [sp, #2]
   18d5e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   18d62:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   18d66:	f89d 3014 	ldrb.w	r3, [sp, #20]
   18d6a:	f88d 3004 	strb.w	r3, [sp, #4]
   18d6e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   18d72:	f88d 3005 	strb.w	r3, [sp, #5]
   18d76:	f89d 301e 	ldrb.w	r3, [sp, #30]
   18d7a:	f88d 3006 	strb.w	r3, [sp, #6]
   18d7e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   18d82:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   18d86:	f89d 3018 	ldrb.w	r3, [sp, #24]
   18d8a:	f88d 3008 	strb.w	r3, [sp, #8]
   18d8e:	f89d 301d 	ldrb.w	r3, [sp, #29]
   18d92:	f88d 3009 	strb.w	r3, [sp, #9]
   18d96:	f89d 3012 	ldrb.w	r3, [sp, #18]
   18d9a:	f88d 300a 	strb.w	r3, [sp, #10]
   18d9e:	f89d 3017 	ldrb.w	r3, [sp, #23]
   18da2:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   18da6:	f89d 301c 	ldrb.w	r3, [sp, #28]
   18daa:	f88d 300c 	strb.w	r3, [sp, #12]
   18dae:	f89d 3011 	ldrb.w	r3, [sp, #17]
   18db2:	f88d 300d 	strb.w	r3, [sp, #13]
   18db6:	f89d 3016 	ldrb.w	r3, [sp, #22]
   18dba:	f88d 300e 	strb.w	r3, [sp, #14]
   18dbe:	f89d 301b 	ldrb.w	r3, [sp, #27]
   18dc2:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   18dc6:	2310      	movs	r3, #16
   18dc8:	466a      	mov	r2, sp
   18dca:	4619      	mov	r1, r3
   18dcc:	eb0d 0003 	add.w	r0, sp, r3
   18dd0:	f000 f888 	bl	18ee4 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
   18dd4:	1c6b      	adds	r3, r5, #1
   18dd6:	011b      	lsls	r3, r3, #4
   18dd8:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   18dda:	58fb      	ldr	r3, [r7, r3]
   18ddc:	f89d 1010 	ldrb.w	r1, [sp, #16]
   18de0:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   18de4:	f88d 1010 	strb.w	r1, [sp, #16]
   18de8:	f3c3 4107 	ubfx	r1, r3, #16, #8
   18dec:	f89d 0011 	ldrb.w	r0, [sp, #17]
   18df0:	4041      	eors	r1, r0
   18df2:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   18df6:	f3c3 2107 	ubfx	r1, r3, #8, #8
   18dfa:	f89d 0012 	ldrb.w	r0, [sp, #18]
   18dfe:	4041      	eors	r1, r0
   18e00:	f88d 1012 	strb.w	r1, [sp, #18]
   18e04:	b2db      	uxtb	r3, r3
   18e06:	f89d 1013 	ldrb.w	r1, [sp, #19]
   18e0a:	404b      	eors	r3, r1
   18e0c:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   18e10:	6853      	ldr	r3, [r2, #4]
   18e12:	f89d 1014 	ldrb.w	r1, [sp, #20]
   18e16:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   18e1a:	f88d 1014 	strb.w	r1, [sp, #20]
   18e1e:	f3c3 4107 	ubfx	r1, r3, #16, #8
   18e22:	f89d 0015 	ldrb.w	r0, [sp, #21]
   18e26:	4041      	eors	r1, r0
   18e28:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   18e2c:	f3c3 2107 	ubfx	r1, r3, #8, #8
   18e30:	f89d 0016 	ldrb.w	r0, [sp, #22]
   18e34:	4041      	eors	r1, r0
   18e36:	f88d 1016 	strb.w	r1, [sp, #22]
   18e3a:	b2db      	uxtb	r3, r3
   18e3c:	f89d 1017 	ldrb.w	r1, [sp, #23]
   18e40:	404b      	eors	r3, r1
   18e42:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   18e46:	6893      	ldr	r3, [r2, #8]
   18e48:	f89d 1018 	ldrb.w	r1, [sp, #24]
   18e4c:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
   18e50:	f88d 1018 	strb.w	r1, [sp, #24]
   18e54:	f3c3 4107 	ubfx	r1, r3, #16, #8
   18e58:	f89d 0019 	ldrb.w	r0, [sp, #25]
   18e5c:	4041      	eors	r1, r0
   18e5e:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   18e62:	f3c3 2107 	ubfx	r1, r3, #8, #8
   18e66:	f89d 001a 	ldrb.w	r0, [sp, #26]
   18e6a:	4041      	eors	r1, r0
   18e6c:	f88d 101a 	strb.w	r1, [sp, #26]
   18e70:	b2db      	uxtb	r3, r3
   18e72:	f89d 101b 	ldrb.w	r1, [sp, #27]
   18e76:	404b      	eors	r3, r1
   18e78:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   18e7c:	68d3      	ldr	r3, [r2, #12]
   18e7e:	f89d 201c 	ldrb.w	r2, [sp, #28]
   18e82:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
   18e86:	f88d 201c 	strb.w	r2, [sp, #28]
   18e8a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   18e8e:	f89d 101d 	ldrb.w	r1, [sp, #29]
   18e92:	404a      	eors	r2, r1
   18e94:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   18e98:	f3c3 2207 	ubfx	r2, r3, #8, #8
   18e9c:	f89d 101e 	ldrb.w	r1, [sp, #30]
   18ea0:	404a      	eors	r2, r1
   18ea2:	f88d 201e 	strb.w	r2, [sp, #30]
   18ea6:	b2db      	uxtb	r3, r3
   18ea8:	f89d 201f 	ldrb.w	r2, [sp, #31]
   18eac:	4053      	eors	r3, r2
   18eae:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
   18eb2:	2310      	movs	r3, #16
   18eb4:	eb0d 0203 	add.w	r2, sp, r3
   18eb8:	4619      	mov	r1, r3
   18eba:	4640      	mov	r0, r8
   18ebc:	f000 f812 	bl	18ee4 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   18ec0:	2210      	movs	r2, #16
   18ec2:	2100      	movs	r1, #0
   18ec4:	eb0d 0002 	add.w	r0, sp, r2
   18ec8:	f000 f818 	bl	18efc <_set>

	return TC_CRYPTO_SUCCESS;
   18ecc:	2001      	movs	r0, #1
}
   18ece:	b008      	add	sp, #32
   18ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
   18ed4:	2000      	movs	r0, #0
}
   18ed6:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
   18ed8:	2000      	movs	r0, #0
   18eda:	e7f8      	b.n	18ece <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
   18edc:	2000      	movs	r0, #0
   18ede:	e7f6      	b.n	18ece <tc_aes_encrypt+0x6ce>
   18ee0:	00029428 	.word	0x00029428

00018ee4 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
   18ee4:	428b      	cmp	r3, r1
   18ee6:	d901      	bls.n	18eec <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
   18ee8:	2000      	movs	r0, #0
	}
}
   18eea:	4770      	bx	lr
{
   18eec:	b510      	push	{r4, lr}
   18eee:	461c      	mov	r4, r3
   18ef0:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
   18ef2:	461a      	mov	r2, r3
   18ef4:	f7f2 fc5a 	bl	b7ac <memcpy>
		return from_len;
   18ef8:	4620      	mov	r0, r4
}
   18efa:	bd10      	pop	{r4, pc}

00018efc <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
   18efc:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
   18efe:	f7f2 fc7e 	bl	b7fe <memset>
}
   18f02:	bd08      	pop	{r3, pc}

00018f04 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   18f04:	09c3      	lsrs	r3, r0, #7
   18f06:	005a      	lsls	r2, r3, #1
   18f08:	4413      	add	r3, r2
   18f0a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   18f0e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   18f12:	b2c0      	uxtb	r0, r0
   18f14:	4770      	bx	lr
	...

00018f18 <pos>:

static int
pos(char c)
{
    const char *p;
    for (p = base64_chars; *p; p++)
   18f18:	4b06      	ldr	r3, [pc, #24]	; (18f34 <pos+0x1c>)
   18f1a:	781a      	ldrb	r2, [r3, #0]
   18f1c:	b132      	cbz	r2, 18f2c <pos+0x14>
        if (*p == c)
   18f1e:	4282      	cmp	r2, r0
   18f20:	d001      	beq.n	18f26 <pos+0xe>
    for (p = base64_chars; *p; p++)
   18f22:	3301      	adds	r3, #1
   18f24:	e7f9      	b.n	18f1a <pos+0x2>
            return p - base64_chars;
   18f26:	4803      	ldr	r0, [pc, #12]	; (18f34 <pos+0x1c>)
   18f28:	1a18      	subs	r0, r3, r0
   18f2a:	4770      	bx	lr
    return -1;
   18f2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18f30:	4770      	bx	lr
   18f32:	bf00      	nop
   18f34:	00029528 	.word	0x00029528

00018f38 <token_decode>:
{
    int i;
    unsigned int val = 0;
    int marker = 0;

    if (len < 4) {
   18f38:	2903      	cmp	r1, #3
   18f3a:	dd18      	ble.n	18f6e <token_decode+0x36>
{
   18f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f3e:	4607      	mov	r7, r0
    int marker = 0;
   18f40:	2600      	movs	r6, #0
    unsigned int val = 0;
   18f42:	4634      	mov	r4, r6
        return DECODE_ERROR;
    }

    for (i = 0; i < 4; i++) {
   18f44:	4635      	mov	r5, r6
   18f46:	e001      	b.n	18f4c <token_decode+0x14>
        val *= 64;
        if (token[i] == '=') {
            marker++;
   18f48:	3601      	adds	r6, #1
    for (i = 0; i < 4; i++) {
   18f4a:	3501      	adds	r5, #1
   18f4c:	2d03      	cmp	r5, #3
   18f4e:	dc09      	bgt.n	18f64 <token_decode+0x2c>
        val *= 64;
   18f50:	01a4      	lsls	r4, r4, #6
        if (token[i] == '=') {
   18f52:	5d78      	ldrb	r0, [r7, r5]
   18f54:	283d      	cmp	r0, #61	; 0x3d
   18f56:	d0f7      	beq.n	18f48 <token_decode+0x10>
        } else if (marker > 0) {
   18f58:	2e00      	cmp	r6, #0
   18f5a:	dc0b      	bgt.n	18f74 <token_decode+0x3c>
            return DECODE_ERROR;
        } else {
            val += pos(token[i]);
   18f5c:	f7ff ffdc 	bl	18f18 <pos>
   18f60:	4404      	add	r4, r0
   18f62:	e7f2      	b.n	18f4a <token_decode+0x12>
        }
    }

    if (marker > 2) {
   18f64:	2e02      	cmp	r6, #2
   18f66:	dc08      	bgt.n	18f7a <token_decode+0x42>
        return DECODE_ERROR;
    }

    return (marker << 24) | val;
   18f68:	ea44 6006 	orr.w	r0, r4, r6, lsl #24
}
   18f6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return DECODE_ERROR;
   18f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18f72:	4770      	bx	lr
            return DECODE_ERROR;
   18f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18f78:	e7f8      	b.n	18f6c <token_decode+0x34>
        return DECODE_ERROR;
   18f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18f7e:	e7f5      	b.n	18f6c <token_decode+0x34>

00018f80 <base64_encode>:
{
   18f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18f82:	4616      	mov	r6, r2
    p = s;
   18f84:	4615      	mov	r5, r2
    last = NULL;
   18f86:	2400      	movs	r4, #0
    i = 0;
   18f88:	4622      	mov	r2, r4
    while (i < size) {
   18f8a:	e019      	b.n	18fc0 <base64_encode+0x40>
        i++;
   18f8c:	3203      	adds	r2, #3
        p[0] = base64_chars[(c & 0x00fc0000) >> 18];
   18f8e:	f3c4 4c85 	ubfx	ip, r4, #18, #6
   18f92:	4f1d      	ldr	r7, [pc, #116]	; (19008 <base64_encode+0x88>)
   18f94:	f817 c00c 	ldrb.w	ip, [r7, ip]
   18f98:	f885 c000 	strb.w	ip, [r5]
        p[1] = base64_chars[(c & 0x0003f000) >> 12];
   18f9c:	f3c4 3c05 	ubfx	ip, r4, #12, #6
   18fa0:	f817 c00c 	ldrb.w	ip, [r7, ip]
   18fa4:	f885 c001 	strb.w	ip, [r5, #1]
        p[2] = base64_chars[(c & 0x00000fc0) >> 6];
   18fa8:	f3c4 1c85 	ubfx	ip, r4, #6, #6
   18fac:	f817 c00c 	ldrb.w	ip, [r7, ip]
   18fb0:	f885 c002 	strb.w	ip, [r5, #2]
        p[3] = base64_chars[(c & 0x0000003f) >> 0];
   18fb4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   18fb8:	5d3c      	ldrb	r4, [r7, r4]
   18fba:	70ec      	strb	r4, [r5, #3]
        last = p;
   18fbc:	462c      	mov	r4, r5
        p += 4;
   18fbe:	3504      	adds	r5, #4
    while (i < size) {
   18fc0:	428a      	cmp	r2, r1
   18fc2:	da0d      	bge.n	18fe0 <base64_encode+0x60>
        c = q[i++];
   18fc4:	1c57      	adds	r7, r2, #1
   18fc6:	5c84      	ldrb	r4, [r0, r2]
        c *= 256;
   18fc8:	0224      	lsls	r4, r4, #8
        if (i < size)
   18fca:	42b9      	cmp	r1, r7
   18fcc:	dd01      	ble.n	18fd2 <base64_encode+0x52>
            c += q[i];
   18fce:	5dc7      	ldrb	r7, [r0, r7]
   18fd0:	443c      	add	r4, r7
        i++;
   18fd2:	1c97      	adds	r7, r2, #2
        c *= 256;
   18fd4:	0224      	lsls	r4, r4, #8
        if (i < size)
   18fd6:	42b9      	cmp	r1, r7
   18fd8:	ddd8      	ble.n	18f8c <base64_encode+0xc>
            c += q[i];
   18fda:	5dc7      	ldrb	r7, [r0, r7]
   18fdc:	443c      	add	r4, r7
   18fde:	e7d5      	b.n	18f8c <base64_encode+0xc>
    if (last) {
   18fe0:	b134      	cbz	r4, 18ff0 <base64_encode+0x70>
        diff = i - size;
   18fe2:	1a52      	subs	r2, r2, r1
        if (diff > 0) {
   18fe4:	2a00      	cmp	r2, #0
   18fe6:	dd03      	ble.n	18ff0 <base64_encode+0x70>
            if (should_pad) {
   18fe8:	b933      	cbnz	r3, 18ff8 <base64_encode+0x78>
                p = last + (4 - diff);
   18fea:	f1c2 0204 	rsb	r2, r2, #4
   18fee:	18a5      	adds	r5, r4, r2
    *p = 0;
   18ff0:	2300      	movs	r3, #0
   18ff2:	702b      	strb	r3, [r5, #0]
}
   18ff4:	1ba8      	subs	r0, r5, r6
   18ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                memset(last + (4 - diff), '=', diff);
   18ff8:	f1c2 0004 	rsb	r0, r2, #4
   18ffc:	213d      	movs	r1, #61	; 0x3d
   18ffe:	4420      	add	r0, r4
   19000:	f7f2 fbfd 	bl	b7fe <memset>
   19004:	e7f4      	b.n	18ff0 <base64_encode+0x70>
   19006:	bf00      	nop
   19008:	00029528 	.word	0x00029528

0001900c <base64_decoder_go>:
    return len * 3 / 4;
}

int
base64_decoder_go(struct base64_decoder *dec)
{
   1900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19010:	b085      	sub	sp, #20
   19012:	4680      	mov	r8, r0
    int src_off;
    int dst_len;
    int dst_off;
    int i;

    dst = dec->dst;
   19014:	6843      	ldr	r3, [r0, #4]
   19016:	9303      	str	r3, [sp, #12]
    dst_off = 0;
    src_off = 0;

    /* A length <= 0 means "unbounded". */
    if (dec->src_len <= 0) {
   19018:	f8d0 a008 	ldr.w	sl, [r0, #8]
   1901c:	f1ba 0f00 	cmp.w	sl, #0
   19020:	dd18      	ble.n	19054 <base64_decoder_go+0x48>
        src_len = INT_MAX;
    } else {
        src_len = dec->src_len;
    }
    if (dec->dst_len <= 0) {
   19022:	f8d8 300c 	ldr.w	r3, [r8, #12]
   19026:	9300      	str	r3, [sp, #0]
   19028:	2b00      	cmp	r3, #0
   1902a:	dd16      	ble.n	1905a <base64_decoder_go+0x4e>
        dst_len = INT_MAX;
   1902c:	f04f 0900 	mov.w	r9, #0
   19030:	464d      	mov	r5, r9
        dst_len = dec->dst_len;
    }

    while (1) {
        src_rem = src_len - src_off;
        if (src_rem == 0) {
   19032:	ebba 0305 	subs.w	r3, sl, r5
   19036:	9301      	str	r3, [sp, #4]
   19038:	d068      	beq.n	1910c <base64_decoder_go+0x100>
            /* End of source input. */
            break;
        }

        if (dec->src[src_off] == '\0') {
   1903a:	f8d8 6000 	ldr.w	r6, [r8]
   1903e:	1973      	adds	r3, r6, r5
   19040:	9302      	str	r3, [sp, #8]
   19042:	5d73      	ldrb	r3, [r6, r5]
   19044:	2b00      	cmp	r3, #0
   19046:	d061      	beq.n	1910c <base64_decoder_go+0x100>
            /* End of source string. */
            break;
        }

        /* Account for possibility of partial token from previous call. */
        read_len = 4 - dec->buf_len;
   19048:	f8d8 b014 	ldr.w	fp, [r8, #20]
   1904c:	f1cb 0704 	rsb	r7, fp, #4

        /* Detect invalid input. */
        for (i = 0; i < read_len; i++) {
   19050:	2400      	movs	r4, #0
   19052:	e007      	b.n	19064 <base64_decoder_go+0x58>
        src_len = INT_MAX;
   19054:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
   19058:	e7e3      	b.n	19022 <base64_decoder_go+0x16>
        dst_len = INT_MAX;
   1905a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   1905e:	9300      	str	r3, [sp, #0]
   19060:	e7e4      	b.n	1902c <base64_decoder_go+0x20>
        for (i = 0; i < read_len; i++) {
   19062:	3401      	adds	r4, #1
   19064:	42bc      	cmp	r4, r7
   19066:	da0d      	bge.n	19084 <base64_decoder_go+0x78>
            sval = dec->src[src_off + i];
   19068:	192b      	adds	r3, r5, r4
   1906a:	5cf1      	ldrb	r1, [r6, r3]
            if (sval == '\0') {
   1906c:	2900      	cmp	r1, #0
   1906e:	d04b      	beq.n	19108 <base64_decoder_go+0xfc>
                /* Incomplete input. */
                return -1;
            }
            if (sval != '=' && strchr(base64_chars, sval) == NULL) {
   19070:	293d      	cmp	r1, #61	; 0x3d
   19072:	d0f6      	beq.n	19062 <base64_decoder_go+0x56>
   19074:	482b      	ldr	r0, [pc, #172]	; (19124 <base64_decoder_go+0x118>)
   19076:	f003 f83b 	bl	1c0f0 <strchr>
   1907a:	2800      	cmp	r0, #0
   1907c:	d1f1      	bne.n	19062 <base64_decoder_go+0x56>
                /* Invalid base64 character. */
                return -1;
   1907e:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   19082:	e043      	b.n	1910c <base64_decoder_go+0x100>
            }
        }

        if (src_rem < read_len) {
   19084:	9b01      	ldr	r3, [sp, #4]
   19086:	42bb      	cmp	r3, r7
   19088:	db27      	blt.n	190da <base64_decoder_go+0xce>
            dec->buf_len += src_rem;
            break;
        }

        /* Copy full token into buf and decode it. */
        memcpy(&dec->buf[dec->buf_len], &dec->src[src_off], read_len);
   1908a:	f10b 0010 	add.w	r0, fp, #16
   1908e:	463a      	mov	r2, r7
   19090:	9902      	ldr	r1, [sp, #8]
   19092:	4440      	add	r0, r8
   19094:	f7f2 fb8a 	bl	b7ac <memcpy>
        val = token_decode(dec->buf, read_len);
   19098:	4639      	mov	r1, r7
   1909a:	f108 0010 	add.w	r0, r8, #16
   1909e:	f7ff ff4b 	bl	18f38 <token_decode>
        if (val == DECODE_ERROR) {
   190a2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   190a6:	d035      	beq.n	19114 <base64_decoder_go+0x108>
            return -1;
        }
        src_off += read_len;
   190a8:	443d      	add	r5, r7
        dec->buf_len = 0;
   190aa:	2300      	movs	r3, #0
   190ac:	f8c8 3014 	str.w	r3, [r8, #20]

        marker = (val >> 24) & 0xff;
   190b0:	0e02      	lsrs	r2, r0, #24

        if (dst_off >= dst_len) {
   190b2:	9b00      	ldr	r3, [sp, #0]
   190b4:	4599      	cmp	r9, r3
   190b6:	da29      	bge.n	1910c <base64_decoder_go+0x100>
            break;
        }
        dst[dst_off] = (val >> 16) & 0xff;
   190b8:	0c03      	lsrs	r3, r0, #16
   190ba:	9903      	ldr	r1, [sp, #12]
   190bc:	f801 3009 	strb.w	r3, [r1, r9]
        dst_off++;
   190c0:	f109 0301 	add.w	r3, r9, #1

        if (marker < 2) {
   190c4:	2a01      	cmp	r2, #1
   190c6:	d916      	bls.n	190f6 <base64_decoder_go+0xea>
            }
            dst[dst_off] = (val >> 8) & 0xff;
            dst_off++;
        }

        if (marker < 1) {
   190c8:	b92a      	cbnz	r2, 190d6 <base64_decoder_go+0xca>
            if (dst_off >= dst_len) {
   190ca:	9a00      	ldr	r2, [sp, #0]
   190cc:	4293      	cmp	r3, r2
   190ce:	da26      	bge.n	1911e <base64_decoder_go+0x112>
                break;
            }
            dst[dst_off] = val & 0xff;
   190d0:	9a03      	ldr	r2, [sp, #12]
   190d2:	54d0      	strb	r0, [r2, r3]
            dst_off++;
   190d4:	3301      	adds	r3, #1
        dst_len = INT_MAX;
   190d6:	4699      	mov	r9, r3
   190d8:	e7ab      	b.n	19032 <base64_decoder_go+0x26>
            memcpy(&dec->buf[dec->buf_len], &dec->src[src_off], src_rem);
   190da:	f10b 0010 	add.w	r0, fp, #16
   190de:	461c      	mov	r4, r3
   190e0:	461a      	mov	r2, r3
   190e2:	9902      	ldr	r1, [sp, #8]
   190e4:	4440      	add	r0, r8
   190e6:	f7f2 fb61 	bl	b7ac <memcpy>
            dec->buf_len += src_rem;
   190ea:	f8d8 3014 	ldr.w	r3, [r8, #20]
   190ee:	4423      	add	r3, r4
   190f0:	f8c8 3014 	str.w	r3, [r8, #20]
            break;
   190f4:	e00a      	b.n	1910c <base64_decoder_go+0x100>
            if (dst_off >= dst_len) {
   190f6:	9900      	ldr	r1, [sp, #0]
   190f8:	428b      	cmp	r3, r1
   190fa:	da0e      	bge.n	1911a <base64_decoder_go+0x10e>
            dst[dst_off] = (val >> 8) & 0xff;
   190fc:	0a01      	lsrs	r1, r0, #8
   190fe:	9c03      	ldr	r4, [sp, #12]
   19100:	54e1      	strb	r1, [r4, r3]
            dst_off++;
   19102:	f109 0302 	add.w	r3, r9, #2
   19106:	e7df      	b.n	190c8 <base64_decoder_go+0xbc>
                return -1;
   19108:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
        }
    }

    return dst_off;
}
   1910c:	4648      	mov	r0, r9
   1910e:	b005      	add	sp, #20
   19110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            return -1;
   19114:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   19118:	e7f8      	b.n	1910c <base64_decoder_go+0x100>
        dst_off++;
   1911a:	4699      	mov	r9, r3
   1911c:	e7f6      	b.n	1910c <base64_decoder_go+0x100>
   1911e:	4699      	mov	r9, r3
   19120:	e7f4      	b.n	1910c <base64_decoder_go+0x100>
   19122:	bf00      	nop
   19124:	00029528 	.word	0x00029528

00019128 <base64_decode>:
{
   19128:	b500      	push	{lr}
   1912a:	b087      	sub	sp, #28
    struct base64_decoder dec = {
   1912c:	2300      	movs	r3, #0
   1912e:	9302      	str	r3, [sp, #8]
   19130:	9303      	str	r3, [sp, #12]
   19132:	9304      	str	r3, [sp, #16]
   19134:	9305      	str	r3, [sp, #20]
   19136:	9000      	str	r0, [sp, #0]
   19138:	9101      	str	r1, [sp, #4]
    return base64_decoder_go(&dec);
   1913a:	4668      	mov	r0, sp
   1913c:	f7ff ff66 	bl	1900c <base64_decoder_go>
}
   19140:	b007      	add	sp, #28
   19142:	f85d fb04 	ldr.w	pc, [sp], #4

00019146 <create_container>:

#ifdef __GNUC__
__attribute__((noinline))
#endif
static CborError create_container(CborEncoder *encoder, CborEncoder *container, size_t length, uint8_t shiftedMajorType)
{
   19146:	b530      	push	{r4, r5, lr}
   19148:	b085      	sub	sp, #20
   1914a:	460c      	mov	r4, r1
    CborError err;
    container->writer = encoder->writer;
   1914c:	6801      	ldr	r1, [r0, #0]
   1914e:	6021      	str	r1, [r4, #0]
    ++encoder->added;
   19150:	6881      	ldr	r1, [r0, #8]
   19152:	3101      	adds	r1, #1
   19154:	6081      	str	r1, [r0, #8]
    container->added = 0;
   19156:	2100      	movs	r1, #0
   19158:	60a1      	str	r1, [r4, #8]

    cbor_static_assert(((MapType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == CborIteratorFlag_ContainerIsMap);
    cbor_static_assert(((ArrayType << MajorTypeShift) & CborIteratorFlag_ContainerIsMap) == 0);
    container->flags = shiftedMajorType & CborIteratorFlag_ContainerIsMap;
   1915a:	f003 0120 	and.w	r1, r3, #32
   1915e:	60e1      	str	r1, [r4, #12]

    if (length == CborIndefiniteLength) {
   19160:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   19164:	d10d      	bne.n	19182 <create_container+0x3c>
        container->flags |= CborIteratorFlag_UnknownLength;
   19166:	f041 0104 	orr.w	r1, r1, #4
   1916a:	60e1      	str	r1, [r4, #12]
        err = append_byte_to_buffer(container, shiftedMajorType + IndefiniteLength);
   1916c:	331f      	adds	r3, #31
   1916e:	a904      	add	r1, sp, #16
   19170:	f801 3d10 	strb.w	r3, [r1, #-16]!
    return encoder->writer->write(encoder->writer, data, len);
   19174:	6820      	ldr	r0, [r4, #0]
   19176:	6803      	ldr	r3, [r0, #0]
   19178:	2201      	movs	r2, #1
   1917a:	4798      	blx	r3
    }
    if (err && !isOomError(err))
        return err;

    return CborNoError;
}
   1917c:	2000      	movs	r0, #0
   1917e:	b005      	add	sp, #20
   19180:	bd30      	pop	{r4, r5, pc}
        err = encode_number_no_update(container, length, shiftedMajorType);
   19182:	4610      	mov	r0, r2
   19184:	2100      	movs	r1, #0
    v = cbor_htonll(v);
   19186:	ba12      	rev	r2, r2
   19188:	2500      	movs	r5, #0
    memcpy(where, &v, sizeof(v));
   1918a:	9502      	str	r5, [sp, #8]
   1918c:	9203      	str	r2, [sp, #12]
    if (ui < Value8Bit) {
   1918e:	2900      	cmp	r1, #0
   19190:	bf08      	it	eq
   19192:	2818      	cmpeq	r0, #24
   19194:	d31a      	bcc.n	191cc <create_container+0x86>
        if (ui > 0xffU)
   19196:	2900      	cmp	r1, #0
   19198:	bf08      	it	eq
   1919a:	f5b0 7f80 	cmpeq.w	r0, #256	; 0x100
   1919e:	d21b      	bcs.n	191d8 <create_container+0x92>
        unsigned more = 0;
   191a0:	2500      	movs	r5, #0
        if (ui > 0xffffU)
   191a2:	2900      	cmp	r1, #0
   191a4:	bf08      	it	eq
   191a6:	f5b0 3f80 	cmpeq.w	r0, #65536	; 0x10000
   191aa:	d300      	bcc.n	191ae <create_container+0x68>
            ++more;
   191ac:	3501      	adds	r5, #1
        bufstart -= (size_t)1 << more;
   191ae:	2101      	movs	r1, #1
   191b0:	fa01 f205 	lsl.w	r2, r1, r5
   191b4:	f10d 010f 	add.w	r1, sp, #15
   191b8:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   191ba:	442b      	add	r3, r5
   191bc:	3318      	adds	r3, #24
   191be:	700b      	strb	r3, [r1, #0]
    return encoder->writer->write(encoder->writer, data, len);
   191c0:	6820      	ldr	r0, [r4, #0]
   191c2:	6803      	ldr	r3, [r0, #0]
   191c4:	aa04      	add	r2, sp, #16
   191c6:	1a52      	subs	r2, r2, r1
   191c8:	4798      	blx	r3
   191ca:	e7d7      	b.n	1917c <create_container+0x36>
        *bufstart += shiftedMajorType;
   191cc:	eb03 6212 	add.w	r2, r3, r2, lsr #24
   191d0:	a904      	add	r1, sp, #16
   191d2:	f801 2d01 	strb.w	r2, [r1, #-1]!
   191d6:	e7f3      	b.n	191c0 <create_container+0x7a>
            ++more;
   191d8:	2501      	movs	r5, #1
   191da:	e7e2      	b.n	191a2 <create_container+0x5c>

000191dc <encode_string>:
{
   191dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   191de:	b085      	sub	sp, #20
   191e0:	4604      	mov	r4, r0
   191e2:	460d      	mov	r5, r1
   191e4:	461e      	mov	r6, r3
    CborError err = encode_number(encoder, length, shiftedMajorType);
   191e6:	2100      	movs	r1, #0
    ++encoder->added;
   191e8:	68a3      	ldr	r3, [r4, #8]
   191ea:	3301      	adds	r3, #1
   191ec:	60a3      	str	r3, [r4, #8]
    v = cbor_htonll(v);
   191ee:	ba2b      	rev	r3, r5
   191f0:	2700      	movs	r7, #0
    memcpy(where, &v, sizeof(v));
   191f2:	9702      	str	r7, [sp, #8]
   191f4:	9303      	str	r3, [sp, #12]
    if (ui < Value8Bit) {
   191f6:	2900      	cmp	r1, #0
   191f8:	bf08      	it	eq
   191fa:	2d18      	cmpeq	r5, #24
   191fc:	d321      	bcc.n	19242 <encode_string+0x66>
   191fe:	4628      	mov	r0, r5
        if (ui > 0xffU)
   19200:	2900      	cmp	r1, #0
   19202:	bf08      	it	eq
   19204:	f5b5 7f80 	cmpeq.w	r5, #256	; 0x100
   19208:	d221      	bcs.n	1924e <encode_string+0x72>
        unsigned more = 0;
   1920a:	2300      	movs	r3, #0
        if (ui > 0xffffU)
   1920c:	2900      	cmp	r1, #0
   1920e:	bf08      	it	eq
   19210:	f5b0 3f80 	cmpeq.w	r0, #65536	; 0x10000
   19214:	d300      	bcc.n	19218 <encode_string+0x3c>
            ++more;
   19216:	3301      	adds	r3, #1
        bufstart -= (size_t)1 << more;
   19218:	2101      	movs	r1, #1
   1921a:	fa01 f003 	lsl.w	r0, r1, r3
   1921e:	f10d 010f 	add.w	r1, sp, #15
   19222:	1a09      	subs	r1, r1, r0
        *bufstart = shiftedMajorType + Value8Bit + more;
   19224:	441a      	add	r2, r3
   19226:	3218      	adds	r2, #24
   19228:	700a      	strb	r2, [r1, #0]
    return encoder->writer->write(encoder->writer, data, len);
   1922a:	6820      	ldr	r0, [r4, #0]
   1922c:	6803      	ldr	r3, [r0, #0]
   1922e:	aa04      	add	r2, sp, #16
   19230:	1a52      	subs	r2, r2, r1
   19232:	4798      	blx	r3
   19234:	6820      	ldr	r0, [r4, #0]
   19236:	6803      	ldr	r3, [r0, #0]
   19238:	462a      	mov	r2, r5
   1923a:	4631      	mov	r1, r6
   1923c:	4798      	blx	r3
}
   1923e:	b005      	add	sp, #20
   19240:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *bufstart += shiftedMajorType;
   19242:	eb02 6213 	add.w	r2, r2, r3, lsr #24
   19246:	a904      	add	r1, sp, #16
   19248:	f801 2d01 	strb.w	r2, [r1, #-1]!
   1924c:	e7ed      	b.n	1922a <encode_string+0x4e>
            ++more;
   1924e:	2301      	movs	r3, #1
   19250:	e7dc      	b.n	1920c <encode_string+0x30>

00019252 <cbor_encoder_init>:
    encoder->writer = writer;
   19252:	6001      	str	r1, [r0, #0]
    encoder->added = 0;
   19254:	2300      	movs	r3, #0
   19256:	6083      	str	r3, [r0, #8]
    encoder->flags = flags;
   19258:	60c2      	str	r2, [r0, #12]
}
   1925a:	4770      	bx	lr

0001925c <cbor_encode_uint>:
{
   1925c:	b510      	push	{r4, lr}
   1925e:	b084      	sub	sp, #16
    ++encoder->added;
   19260:	6881      	ldr	r1, [r0, #8]
   19262:	3101      	adds	r1, #1
   19264:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   19266:	ba11      	rev	r1, r2
   19268:	ba1c      	rev	r4, r3
    memcpy(where, &v, sizeof(v));
   1926a:	9402      	str	r4, [sp, #8]
   1926c:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   1926e:	2b00      	cmp	r3, #0
   19270:	bf08      	it	eq
   19272:	2a18      	cmpeq	r2, #24
   19274:	d31f      	bcc.n	192b6 <cbor_encode_uint+0x5a>
        if (ui > 0xffU)
   19276:	2b00      	cmp	r3, #0
   19278:	bf08      	it	eq
   1927a:	f5b2 7f80 	cmpeq.w	r2, #256	; 0x100
   1927e:	d220      	bcs.n	192c2 <cbor_encode_uint+0x66>
        unsigned more = 0;
   19280:	2400      	movs	r4, #0
        if (ui > 0xffffU)
   19282:	2b00      	cmp	r3, #0
   19284:	bf08      	it	eq
   19286:	f5b2 3f80 	cmpeq.w	r2, #65536	; 0x10000
   1928a:	d300      	bcc.n	1928e <cbor_encode_uint+0x32>
            ++more;
   1928c:	3401      	adds	r4, #1
        if (ui > 0xffffffffU)
   1928e:	2b01      	cmp	r3, #1
   19290:	bf08      	it	eq
   19292:	2a00      	cmpeq	r2, #0
   19294:	d300      	bcc.n	19298 <cbor_encode_uint+0x3c>
            ++more;
   19296:	3401      	adds	r4, #1
        bufstart -= (size_t)1 << more;
   19298:	2101      	movs	r1, #1
   1929a:	fa01 f304 	lsl.w	r3, r1, r4
   1929e:	f10d 010f 	add.w	r1, sp, #15
   192a2:	1ac9      	subs	r1, r1, r3
        *bufstart = shiftedMajorType + Value8Bit + more;
   192a4:	3418      	adds	r4, #24
   192a6:	700c      	strb	r4, [r1, #0]
    return encoder->writer->write(encoder->writer, data, len);
   192a8:	6800      	ldr	r0, [r0, #0]
   192aa:	6803      	ldr	r3, [r0, #0]
   192ac:	aa04      	add	r2, sp, #16
   192ae:	1a52      	subs	r2, r2, r1
   192b0:	4798      	blx	r3
}
   192b2:	b004      	add	sp, #16
   192b4:	bd10      	pop	{r4, pc}
        *bufstart += shiftedMajorType;
   192b6:	f3c1 6307 	ubfx	r3, r1, #24, #8
   192ba:	a904      	add	r1, sp, #16
   192bc:	f801 3d01 	strb.w	r3, [r1, #-1]!
   192c0:	e7f2      	b.n	192a8 <cbor_encode_uint+0x4c>
            ++more;
   192c2:	2401      	movs	r4, #1
   192c4:	e7dd      	b.n	19282 <cbor_encode_uint+0x26>

000192c6 <cbor_encode_int>:
{
   192c6:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
   192ca:	b084      	sub	sp, #16
   192cc:	461f      	mov	r7, r3
    uint64_t ui = value >> 63;              /* extend sign to whole length */
   192ce:	17db      	asrs	r3, r3, #31
   192d0:	461c      	mov	r4, r3
    uint8_t majorType = ui & 0x20;          /* extract major type */
   192d2:	b2db      	uxtb	r3, r3
   192d4:	f003 0320 	and.w	r3, r3, #32
    ui ^= value;                            /* complement negatives */
   192d8:	ea84 0b02 	eor.w	fp, r4, r2
   192dc:	ea84 0c07 	eor.w	ip, r4, r7
    ++encoder->added;
   192e0:	6882      	ldr	r2, [r0, #8]
   192e2:	3201      	adds	r2, #1
   192e4:	6082      	str	r2, [r0, #8]
    v = cbor_htonll(v);
   192e6:	fa9b f28b 	rev.w	r2, fp
   192ea:	fa9c f18c 	rev.w	r1, ip
    memcpy(where, &v, sizeof(v));
   192ee:	9102      	str	r1, [sp, #8]
   192f0:	9203      	str	r2, [sp, #12]
    if (ui < Value8Bit) {
   192f2:	f1bc 0f00 	cmp.w	ip, #0
   192f6:	bf08      	it	eq
   192f8:	f1bb 0f18 	cmpeq.w	fp, #24
   192fc:	d325      	bcc.n	1934a <cbor_encode_int+0x84>
        if (ui > 0xffU)
   192fe:	f1bc 0f00 	cmp.w	ip, #0
   19302:	bf08      	it	eq
   19304:	f5bb 7f80 	cmpeq.w	fp, #256	; 0x100
   19308:	d225      	bcs.n	19356 <cbor_encode_int+0x90>
        unsigned more = 0;
   1930a:	2200      	movs	r2, #0
        if (ui > 0xffffU)
   1930c:	f1bc 0f00 	cmp.w	ip, #0
   19310:	bf08      	it	eq
   19312:	f5bb 3f80 	cmpeq.w	fp, #65536	; 0x10000
   19316:	d300      	bcc.n	1931a <cbor_encode_int+0x54>
            ++more;
   19318:	3201      	adds	r2, #1
        if (ui > 0xffffffffU)
   1931a:	f1bc 0f01 	cmp.w	ip, #1
   1931e:	bf08      	it	eq
   19320:	f1bb 0f00 	cmpeq.w	fp, #0
   19324:	d300      	bcc.n	19328 <cbor_encode_int+0x62>
            ++more;
   19326:	3201      	adds	r2, #1
        bufstart -= (size_t)1 << more;
   19328:	2101      	movs	r1, #1
   1932a:	fa01 f402 	lsl.w	r4, r1, r2
   1932e:	f10d 010f 	add.w	r1, sp, #15
   19332:	1b09      	subs	r1, r1, r4
        *bufstart = shiftedMajorType + Value8Bit + more;
   19334:	4413      	add	r3, r2
   19336:	3318      	adds	r3, #24
   19338:	700b      	strb	r3, [r1, #0]
    return encoder->writer->write(encoder->writer, data, len);
   1933a:	6800      	ldr	r0, [r0, #0]
   1933c:	6803      	ldr	r3, [r0, #0]
   1933e:	aa04      	add	r2, sp, #16
   19340:	1a52      	subs	r2, r2, r1
   19342:	4798      	blx	r3
}
   19344:	b004      	add	sp, #16
   19346:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
        *bufstart += shiftedMajorType;
   1934a:	eb03 6312 	add.w	r3, r3, r2, lsr #24
   1934e:	a904      	add	r1, sp, #16
   19350:	f801 3d01 	strb.w	r3, [r1, #-1]!
   19354:	e7f1      	b.n	1933a <cbor_encode_int+0x74>
            ++more;
   19356:	2201      	movs	r2, #1
   19358:	e7d8      	b.n	1930c <cbor_encode_int+0x46>

0001935a <cbor_encode_simple_value>:
    if (value >= HalfPrecisionFloat && value <= Break)
   1935a:	f1a1 0319 	sub.w	r3, r1, #25
   1935e:	b2db      	uxtb	r3, r3
   19360:	2b06      	cmp	r3, #6
   19362:	d926      	bls.n	193b2 <cbor_encode_simple_value+0x58>
{
   19364:	b510      	push	{r4, lr}
   19366:	b084      	sub	sp, #16
    return encode_number(encoder, value, SimpleTypesType << MajorTypeShift);
   19368:	b2ca      	uxtb	r2, r1
   1936a:	2300      	movs	r3, #0
    ++encoder->added;
   1936c:	6881      	ldr	r1, [r0, #8]
   1936e:	3101      	adds	r1, #1
   19370:	6081      	str	r1, [r0, #8]
    v = cbor_htonll(v);
   19372:	ba11      	rev	r1, r2
   19374:	2400      	movs	r4, #0
    memcpy(where, &v, sizeof(v));
   19376:	9402      	str	r4, [sp, #8]
   19378:	9103      	str	r1, [sp, #12]
    if (ui < Value8Bit) {
   1937a:	2b00      	cmp	r3, #0
   1937c:	bf08      	it	eq
   1937e:	2a18      	cmpeq	r2, #24
   19380:	d309      	bcc.n	19396 <cbor_encode_simple_value+0x3c>
        unsigned more = 0;
   19382:	2300      	movs	r3, #0
        bufstart -= (size_t)1 << more;
   19384:	2101      	movs	r1, #1
   19386:	fa01 f203 	lsl.w	r2, r1, r3
   1938a:	f10d 010f 	add.w	r1, sp, #15
   1938e:	1a89      	subs	r1, r1, r2
        *bufstart = shiftedMajorType + Value8Bit + more;
   19390:	3b08      	subs	r3, #8
   19392:	700b      	strb	r3, [r1, #0]
   19394:	e006      	b.n	193a4 <cbor_encode_simple_value+0x4a>
        *bufstart += shiftedMajorType;
   19396:	f3c1 6107 	ubfx	r1, r1, #24, #8
   1939a:	f1a1 0320 	sub.w	r3, r1, #32
   1939e:	a904      	add	r1, sp, #16
   193a0:	f801 3d01 	strb.w	r3, [r1, #-1]!
    return encoder->writer->write(encoder->writer, data, len);
   193a4:	6800      	ldr	r0, [r0, #0]
   193a6:	6803      	ldr	r3, [r0, #0]
   193a8:	aa04      	add	r2, sp, #16
   193aa:	1a52      	subs	r2, r2, r1
   193ac:	4798      	blx	r3
}
   193ae:	b004      	add	sp, #16
   193b0:	bd10      	pop	{r4, pc}
        return CborErrorIllegalSimpleType;
   193b2:	f44f 7083 	mov.w	r0, #262	; 0x106
}
   193b6:	4770      	bx	lr

000193b8 <cbor_encode_byte_string>:
{
   193b8:	b510      	push	{r4, lr}
   193ba:	4614      	mov	r4, r2
    return encode_string(encoder, length, ByteStringType << MajorTypeShift, string);
   193bc:	460b      	mov	r3, r1
   193be:	2240      	movs	r2, #64	; 0x40
   193c0:	4621      	mov	r1, r4
   193c2:	f7ff ff0b 	bl	191dc <encode_string>
}
   193c6:	bd10      	pop	{r4, pc}

000193c8 <cbor_encode_text_string>:
{
   193c8:	b510      	push	{r4, lr}
   193ca:	4614      	mov	r4, r2
    return encode_string(encoder, length, TextStringType << MajorTypeShift, string);
   193cc:	460b      	mov	r3, r1
   193ce:	2260      	movs	r2, #96	; 0x60
   193d0:	4621      	mov	r1, r4
   193d2:	f7ff ff03 	bl	191dc <encode_string>
}
   193d6:	bd10      	pop	{r4, pc}

000193d8 <cbor_encoder_create_array>:
 * length instead.
 *
 * \sa cbor_encoder_create_map
 */
CborError cbor_encoder_create_array(CborEncoder *encoder, CborEncoder *arrayEncoder, size_t length)
{
   193d8:	b508      	push	{r3, lr}
    return create_container(encoder, arrayEncoder, length, ArrayType << MajorTypeShift);
   193da:	2380      	movs	r3, #128	; 0x80
   193dc:	f7ff feb3 	bl	19146 <create_container>
}
   193e0:	bd08      	pop	{r3, pc}
	...

000193e4 <cbor_encoder_create_map>:
 * value, this function returns error CborErrorDataTooLarge.
 *
 * \sa cbor_encoder_create_array
 */
CborError cbor_encoder_create_map(CborEncoder *encoder, CborEncoder *mapEncoder, size_t length)
{
   193e4:	b510      	push	{r4, lr}
    if (length != CborIndefiniteLength && length > SIZE_MAX / 2)
   193e6:	f102 4400 	add.w	r4, r2, #2147483648	; 0x80000000
   193ea:	4b05      	ldr	r3, [pc, #20]	; (19400 <cbor_encoder_create_map+0x1c>)
   193ec:	429c      	cmp	r4, r3
   193ee:	d903      	bls.n	193f8 <cbor_encoder_create_map+0x14>
        return CborErrorDataTooLarge;
    return create_container(encoder, mapEncoder, length, MapType << MajorTypeShift);
   193f0:	23a0      	movs	r3, #160	; 0xa0
   193f2:	f7ff fea8 	bl	19146 <create_container>
}
   193f6:	bd10      	pop	{r4, pc}
        return CborErrorDataTooLarge;
   193f8:	f44f 6080 	mov.w	r0, #1024	; 0x400
   193fc:	e7fb      	b.n	193f6 <cbor_encoder_create_map+0x12>
   193fe:	bf00      	nop
   19400:	7ffffffe 	.word	0x7ffffffe

00019404 <cbor_encoder_close_container>:
 *
 * \sa cbor_encoder_create_array(), cbor_encoder_create_map()
 */
CborError cbor_encoder_close_container(CborEncoder *encoder, const CborEncoder *containerEncoder)
{
    encoder->writer = containerEncoder->writer;
   19404:	680b      	ldr	r3, [r1, #0]
   19406:	6003      	str	r3, [r0, #0]

    if (containerEncoder->flags & CborIteratorFlag_UnknownLength)
   19408:	68cb      	ldr	r3, [r1, #12]
   1940a:	f013 0f04 	tst.w	r3, #4
   1940e:	d00c      	beq.n	1942a <cbor_encoder_close_container+0x26>
{
   19410:	b500      	push	{lr}
   19412:	b083      	sub	sp, #12
   19414:	a902      	add	r1, sp, #8
   19416:	23ff      	movs	r3, #255	; 0xff
   19418:	f801 3d01 	strb.w	r3, [r1, #-1]!
    return encoder->writer->write(encoder->writer, data, len);
   1941c:	6800      	ldr	r0, [r0, #0]
   1941e:	6803      	ldr	r3, [r0, #0]
   19420:	2201      	movs	r2, #1
   19422:	4798      	blx	r3
        return append_byte_to_buffer(encoder, BreakByte);
    return CborNoError;
}
   19424:	b003      	add	sp, #12
   19426:	f85d fb04 	ldr.w	pc, [sp], #4
    return CborNoError;
   1942a:	2000      	movs	r0, #0
}
   1942c:	4770      	bx	lr

0001942e <is_fixed_type>:
    return CborNoError;
}

static bool is_fixed_type(uint8_t type)
{
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   1942e:	2860      	cmp	r0, #96	; 0x60
   19430:	d009      	beq.n	19446 <is_fixed_type+0x18>
   19432:	2840      	cmp	r0, #64	; 0x40
   19434:	d009      	beq.n	1944a <is_fixed_type+0x1c>
   19436:	2880      	cmp	r0, #128	; 0x80
   19438:	d009      	beq.n	1944e <is_fixed_type+0x20>
   1943a:	28a0      	cmp	r0, #160	; 0xa0
   1943c:	d001      	beq.n	19442 <is_fixed_type+0x14>
   1943e:	2001      	movs	r0, #1
           type != CborMapType;
}
   19440:	4770      	bx	lr
    return type != CborTextStringType && type != CborByteStringType && type != CborArrayType &&
   19442:	2000      	movs	r0, #0
   19444:	4770      	bx	lr
   19446:	2000      	movs	r0, #0
   19448:	4770      	bx	lr
   1944a:	2000      	movs	r0, #0
   1944c:	4770      	bx	lr
   1944e:	2000      	movs	r0, #0
   19450:	4770      	bx	lr

00019452 <iterate_noop>:
    (void)d;
    (void)dst;
    (void)src_offset;
    (void)len;
    return true;
}
   19452:	2001      	movs	r0, #1
   19454:	4770      	bx	lr

00019456 <preparse_value>:
{
   19456:	b570      	push	{r4, r5, r6, lr}
    const CborParser *parser = it->parser;
   19458:	6806      	ldr	r6, [r0, #0]
    it->type = CborInvalidType;
   1945a:	23ff      	movs	r3, #255	; 0xff
   1945c:	7383      	strb	r3, [r0, #14]
    if (it->offset == parser->end)
   1945e:	6841      	ldr	r1, [r0, #4]
   19460:	6873      	ldr	r3, [r6, #4]
   19462:	4299      	cmp	r1, r3
   19464:	f000 808f 	beq.w	19586 <preparse_value+0x130>
   19468:	4604      	mov	r4, r0
    uint8_t descriptor = parser->d->get8(parser->d, it->offset);
   1946a:	6830      	ldr	r0, [r6, #0]
   1946c:	6803      	ldr	r3, [r0, #0]
   1946e:	4798      	blx	r3
    uint8_t type = descriptor & MajorTypeMask;
   19470:	f000 05e0 	and.w	r5, r0, #224	; 0xe0
    it->type = type;
   19474:	73a5      	strb	r5, [r4, #14]
    it->flags = 0;
   19476:	2300      	movs	r3, #0
   19478:	73e3      	strb	r3, [r4, #15]
    it->extra = (descriptor &= SmallValueMask);
   1947a:	f000 001f 	and.w	r0, r0, #31
   1947e:	81a0      	strh	r0, [r4, #12]
    if (descriptor > Value64Bit) {
   19480:	281b      	cmp	r0, #27
   19482:	d91d      	bls.n	194c0 <preparse_value+0x6a>
        if (unlikely(descriptor != IndefiniteLength))
   19484:	281f      	cmp	r0, #31
   19486:	d10b      	bne.n	194a0 <preparse_value+0x4a>
        if (likely(!is_fixed_type(type))) {
   19488:	4628      	mov	r0, r5
   1948a:	f7ff ffd0 	bl	1942e <is_fixed_type>
   1948e:	f080 0001 	eor.w	r0, r0, #1
   19492:	f010 0fff 	tst.w	r0, #255	; 0xff
   19496:	d00b      	beq.n	194b0 <preparse_value+0x5a>
            it->flags |= CborIteratorFlag_UnknownLength;
   19498:	2304      	movs	r3, #4
   1949a:	73e3      	strb	r3, [r4, #15]
            return CborNoError;
   1949c:	2000      	movs	r0, #0
}
   1949e:	bd70      	pop	{r4, r5, r6, pc}
            return type == CborSimpleType ? CborErrorUnknownType : CborErrorIllegalNumber;
   194a0:	2de0      	cmp	r5, #224	; 0xe0
   194a2:	d002      	beq.n	194aa <preparse_value+0x54>
   194a4:	f240 1005 	movw	r0, #261	; 0x105
   194a8:	e7f9      	b.n	1949e <preparse_value+0x48>
   194aa:	f240 1003 	movw	r0, #259	; 0x103
   194ae:	e7f6      	b.n	1949e <preparse_value+0x48>
        return type == CborSimpleType ? CborErrorUnexpectedBreak : CborErrorIllegalNumber;
   194b0:	2de0      	cmp	r5, #224	; 0xe0
   194b2:	d002      	beq.n	194ba <preparse_value+0x64>
   194b4:	f240 1005 	movw	r0, #261	; 0x105
   194b8:	e7f1      	b.n	1949e <preparse_value+0x48>
   194ba:	f44f 7081 	mov.w	r0, #258	; 0x102
   194be:	e7ee      	b.n	1949e <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   194c0:	2817      	cmp	r0, #23
   194c2:	d919      	bls.n	194f8 <preparse_value+0xa2>
   194c4:	f1a0 0218 	sub.w	r2, r0, #24
   194c8:	2301      	movs	r3, #1
   194ca:	4093      	lsls	r3, r2
    if (bytesNeeded + 1 > (size_t)(parser->end - it->offset))
   194cc:	3301      	adds	r3, #1
   194ce:	6872      	ldr	r2, [r6, #4]
   194d0:	6861      	ldr	r1, [r4, #4]
   194d2:	1a52      	subs	r2, r2, r1
   194d4:	4293      	cmp	r3, r2
   194d6:	d859      	bhi.n	1958c <preparse_value+0x136>
    uint8_t majortype = type >> MajorTypeShift;
   194d8:	096d      	lsrs	r5, r5, #5
    if (majortype == NegativeIntegerType) {
   194da:	2d01      	cmp	r5, #1
   194dc:	d00e      	beq.n	194fc <preparse_value+0xa6>
    } else if (majortype == SimpleTypesType) {
   194de:	2d07      	cmp	r5, #7
   194e0:	d011      	beq.n	19506 <preparse_value+0xb0>
    if (descriptor < Value8Bit)
   194e2:	2817      	cmp	r0, #23
   194e4:	d957      	bls.n	19596 <preparse_value+0x140>
    if (descriptor == Value8Bit)
   194e6:	2818      	cmp	r0, #24
   194e8:	d13e      	bne.n	19568 <preparse_value+0x112>
        it->extra = parser->d->get8(parser->d, it->offset + 1);
   194ea:	6830      	ldr	r0, [r6, #0]
   194ec:	6803      	ldr	r3, [r0, #0]
   194ee:	3101      	adds	r1, #1
   194f0:	4798      	blx	r3
   194f2:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   194f4:	2000      	movs	r0, #0
   194f6:	e7d2      	b.n	1949e <preparse_value+0x48>
    size_t bytesNeeded = descriptor < Value8Bit ? 0 : (1 << (descriptor - Value8Bit));
   194f8:	2300      	movs	r3, #0
   194fa:	e7e7      	b.n	194cc <preparse_value+0x76>
        it->flags |= CborIteratorFlag_NegativeInteger;
   194fc:	2302      	movs	r3, #2
   194fe:	73e3      	strb	r3, [r4, #15]
        it->type = CborIntegerType;
   19500:	2300      	movs	r3, #0
   19502:	73a3      	strb	r3, [r4, #14]
   19504:	e7ed      	b.n	194e2 <preparse_value+0x8c>
        switch (descriptor) {
   19506:	3814      	subs	r0, #20
   19508:	280b      	cmp	r0, #11
   1950a:	d842      	bhi.n	19592 <preparse_value+0x13c>
   1950c:	e8df f000 	tbb	[pc, r0]
   19510:	0d0d0d06 	.word	0x0d0d0d06
   19514:	0b0b0d13 	.word	0x0b0b0d13
   19518:	22222222 	.word	0x22222222
            it->extra = false;
   1951c:	2000      	movs	r0, #0
   1951e:	81a0      	strh	r0, [r4, #12]
            it->type = CborBooleanType;
   19520:	23f5      	movs	r3, #245	; 0xf5
   19522:	73a3      	strb	r3, [r4, #14]
            break;
   19524:	e7bb      	b.n	1949e <preparse_value+0x48>
            it->flags |= CborIteratorFlag_IntegerValueTooLarge;
   19526:	2301      	movs	r3, #1
   19528:	73e3      	strb	r3, [r4, #15]
            it->type = parser->d->get8(parser->d, it->offset);
   1952a:	6830      	ldr	r0, [r6, #0]
   1952c:	6803      	ldr	r3, [r0, #0]
   1952e:	4798      	blx	r3
   19530:	73a0      	strb	r0, [r4, #14]
        return CborNoError;
   19532:	2000      	movs	r0, #0
            break;
   19534:	e7b3      	b.n	1949e <preparse_value+0x48>
            it->extra = parser->d->get8(parser->d, it->offset + 1);
   19536:	6830      	ldr	r0, [r6, #0]
   19538:	6803      	ldr	r3, [r0, #0]
   1953a:	3101      	adds	r1, #1
   1953c:	4798      	blx	r3
   1953e:	b280      	uxth	r0, r0
   19540:	81a0      	strh	r0, [r4, #12]
            if (unlikely(it->extra < 32)) {
   19542:	281f      	cmp	r0, #31
   19544:	d901      	bls.n	1954a <preparse_value+0xf4>
        return CborNoError;
   19546:	2000      	movs	r0, #0
   19548:	e7a9      	b.n	1949e <preparse_value+0x48>
                it->type = CborInvalidType;
   1954a:	23ff      	movs	r3, #255	; 0xff
   1954c:	73a3      	strb	r3, [r4, #14]
                return CborErrorIllegalSimpleType;
   1954e:	f44f 7083 	mov.w	r0, #262	; 0x106
   19552:	e7a4      	b.n	1949e <preparse_value+0x48>
            assert(false);  /* these conditions can't be reached */
   19554:	f7ee fe34 	bl	81c0 <hal_debugger_connected>
   19558:	b100      	cbz	r0, 1955c <preparse_value+0x106>
   1955a:	be01      	bkpt	0x0001
   1955c:	2300      	movs	r3, #0
   1955e:	461a      	mov	r2, r3
   19560:	4619      	mov	r1, r3
   19562:	4618      	mov	r0, r3
   19564:	f7f0 f9c2 	bl	98ec <__assert_func>
    else if (descriptor == Value16Bit)
   19568:	2819      	cmp	r0, #25
   1956a:	d106      	bne.n	1957a <preparse_value+0x124>
        it->extra = parser->d->get16(parser->d, it->offset + 1);
   1956c:	6830      	ldr	r0, [r6, #0]
   1956e:	6843      	ldr	r3, [r0, #4]
   19570:	3101      	adds	r1, #1
   19572:	4798      	blx	r3
   19574:	81a0      	strh	r0, [r4, #12]
    return CborNoError;
   19576:	2000      	movs	r0, #0
   19578:	e791      	b.n	1949e <preparse_value+0x48>
        it->flags |= CborIteratorFlag_IntegerValueTooLarge;     /* Value32Bit or Value64Bit */
   1957a:	7be3      	ldrb	r3, [r4, #15]
   1957c:	f043 0301 	orr.w	r3, r3, #1
   19580:	73e3      	strb	r3, [r4, #15]
    return CborNoError;
   19582:	2000      	movs	r0, #0
   19584:	e78b      	b.n	1949e <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   19586:	f240 1001 	movw	r0, #257	; 0x101
   1958a:	e788      	b.n	1949e <preparse_value+0x48>
        return CborErrorUnexpectedEOF;
   1958c:	f240 1001 	movw	r0, #257	; 0x101
   19590:	e785      	b.n	1949e <preparse_value+0x48>
        return CborNoError;
   19592:	2000      	movs	r0, #0
   19594:	e783      	b.n	1949e <preparse_value+0x48>
        return CborNoError;
   19596:	2000      	movs	r0, #0
   19598:	e781      	b.n	1949e <preparse_value+0x48>

0001959a <preparse_next_value>:
{
   1959a:	b510      	push	{r4, lr}
   1959c:	4604      	mov	r4, r0
    if (it->remaining != UINT32_MAX) {
   1959e:	6883      	ldr	r3, [r0, #8]
   195a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   195a4:	d00d      	beq.n	195c2 <preparse_next_value+0x28>
        if (it->type != CborTagType && !--it->remaining) {
   195a6:	7b82      	ldrb	r2, [r0, #14]
   195a8:	2ac0      	cmp	r2, #192	; 0xc0
   195aa:	d002      	beq.n	195b2 <preparse_next_value+0x18>
   195ac:	3b01      	subs	r3, #1
   195ae:	6083      	str	r3, [r0, #8]
   195b0:	b11b      	cbz	r3, 195ba <preparse_next_value+0x20>
    return preparse_value(it);
   195b2:	4620      	mov	r0, r4
   195b4:	f7ff ff4f 	bl	19456 <preparse_value>
}
   195b8:	bd10      	pop	{r4, pc}
            it->type = CborInvalidType;
   195ba:	23ff      	movs	r3, #255	; 0xff
   195bc:	7383      	strb	r3, [r0, #14]
            return CborNoError;
   195be:	2000      	movs	r0, #0
   195c0:	e7fa      	b.n	195b8 <preparse_next_value+0x1e>
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   195c2:	6841      	ldr	r1, [r0, #4]
   195c4:	6803      	ldr	r3, [r0, #0]
   195c6:	685a      	ldr	r2, [r3, #4]
   195c8:	4291      	cmp	r1, r2
   195ca:	d0f2      	beq.n	195b2 <preparse_next_value+0x18>
        it->parser->d->get8(it->parser->d, it->offset) == (uint8_t)BreakByte) {
   195cc:	6818      	ldr	r0, [r3, #0]
   195ce:	6803      	ldr	r3, [r0, #0]
   195d0:	4798      	blx	r3
    } else if (it->remaining == UINT32_MAX && it->offset != it->parser->end &&
   195d2:	28ff      	cmp	r0, #255	; 0xff
   195d4:	d1ed      	bne.n	195b2 <preparse_next_value+0x18>
        ++it->offset;
   195d6:	6863      	ldr	r3, [r4, #4]
   195d8:	3301      	adds	r3, #1
   195da:	6063      	str	r3, [r4, #4]
        it->type = CborInvalidType;
   195dc:	23ff      	movs	r3, #255	; 0xff
   195de:	73a3      	strb	r3, [r4, #14]
        it->remaining = 0;
   195e0:	2000      	movs	r0, #0
   195e2:	60a0      	str	r0, [r4, #8]
        return CborNoError;
   195e4:	e7e8      	b.n	195b8 <preparse_next_value+0x1e>

000195e6 <extract_length>:
{
   195e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   195e8:	4606      	mov	r6, r0
   195ea:	460c      	mov	r4, r1
   195ec:	4615      	mov	r5, r2
    return cbor_ntohll(result);
}

static inline CborError extract_number(const CborParser *p, int *offset, uint64_t *len)
{
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   195ee:	6800      	ldr	r0, [r0, #0]
   195f0:	6803      	ldr	r3, [r0, #0]
   195f2:	6809      	ldr	r1, [r1, #0]
   195f4:	4798      	blx	r3
   195f6:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   195fa:	6823      	ldr	r3, [r4, #0]
   195fc:	3301      	adds	r3, #1
   195fe:	6023      	str	r3, [r4, #0]
    *len = 1;
    if (additional_information < Value8Bit) {
   19600:	2817      	cmp	r0, #23
   19602:	d915      	bls.n	19630 <extract_length+0x4a>
        *len = additional_information;
        return CborNoError;
    }
    if (unlikely(additional_information > Value64Bit))
   19604:	281b      	cmp	r0, #27
   19606:	d836      	bhi.n	19676 <extract_length+0x90>
        return CborErrorIllegalNumber;

    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   19608:	3818      	subs	r0, #24
   1960a:	2701      	movs	r7, #1
   1960c:	4087      	lsls	r7, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   1960e:	6873      	ldr	r3, [r6, #4]
   19610:	6821      	ldr	r1, [r4, #0]
   19612:	1a5b      	subs	r3, r3, r1
   19614:	429f      	cmp	r7, r3
   19616:	d833      	bhi.n	19680 <extract_length+0x9a>
        return CborErrorUnexpectedEOF;
    } else if (bytesNeeded == 1) {
   19618:	2f01      	cmp	r7, #1
   1961a:	d116      	bne.n	1964a <extract_length+0x64>
        *len = p->d->get8(p->d, *offset);
   1961c:	6830      	ldr	r0, [r6, #0]
   1961e:	6803      	ldr	r3, [r0, #0]
   19620:	4798      	blx	r3
   19622:	b2c2      	uxtb	r2, r0
   19624:	2300      	movs	r3, #0
    } else if (bytesNeeded == 4) {
        *len =  p->d->get32(p->d, *offset);
    } else {
        *len =  p->d->get64(p->d, *offset);
    }
    *offset += bytesNeeded;
   19626:	6820      	ldr	r0, [r4, #0]
   19628:	4438      	add	r0, r7
   1962a:	6020      	str	r0, [r4, #0]
    return CborNoError;
   1962c:	2000      	movs	r0, #0
   1962e:	e002      	b.n	19636 <extract_length+0x50>
        *len = additional_information;
   19630:	b2c2      	uxtb	r2, r0
   19632:	2300      	movs	r3, #0
        return CborNoError;
   19634:	2000      	movs	r0, #0
    if (err) {
   19636:	bb40      	cbnz	r0, 1968a <extract_length+0xa4>
    *len = v;
   19638:	602a      	str	r2, [r5, #0]
    if (v != *len)
   1963a:	2500      	movs	r5, #0
   1963c:	429d      	cmp	r5, r3
   1963e:	bf08      	it	eq
   19640:	4292      	cmpeq	r2, r2
   19642:	d024      	beq.n	1968e <extract_length+0xa8>
        return CborErrorDataTooLarge;
   19644:	f44f 6080 	mov.w	r0, #1024	; 0x400
   19648:	e021      	b.n	1968e <extract_length+0xa8>
    } else if (bytesNeeded == 2) {
   1964a:	2f02      	cmp	r7, #2
   1964c:	d105      	bne.n	1965a <extract_length+0x74>
        *len =  p->d->get16(p->d, *offset);
   1964e:	6830      	ldr	r0, [r6, #0]
   19650:	6843      	ldr	r3, [r0, #4]
   19652:	4798      	blx	r3
   19654:	b282      	uxth	r2, r0
   19656:	2300      	movs	r3, #0
   19658:	e7e5      	b.n	19626 <extract_length+0x40>
    } else if (bytesNeeded == 4) {
   1965a:	2f04      	cmp	r7, #4
   1965c:	d005      	beq.n	1966a <extract_length+0x84>
        *len =  p->d->get64(p->d, *offset);
   1965e:	6830      	ldr	r0, [r6, #0]
   19660:	68c3      	ldr	r3, [r0, #12]
   19662:	4798      	blx	r3
   19664:	4602      	mov	r2, r0
   19666:	460b      	mov	r3, r1
   19668:	e7dd      	b.n	19626 <extract_length+0x40>
        *len =  p->d->get32(p->d, *offset);
   1966a:	6830      	ldr	r0, [r6, #0]
   1966c:	6883      	ldr	r3, [r0, #8]
   1966e:	4798      	blx	r3
   19670:	4602      	mov	r2, r0
   19672:	2300      	movs	r3, #0
   19674:	e7d7      	b.n	19626 <extract_length+0x40>
    *len = 1;
   19676:	2201      	movs	r2, #1
   19678:	2300      	movs	r3, #0
        return CborErrorIllegalNumber;
   1967a:	f240 1005 	movw	r0, #261	; 0x105
   1967e:	e7da      	b.n	19636 <extract_length+0x50>
    *len = 1;
   19680:	2201      	movs	r2, #1
   19682:	2300      	movs	r3, #0
        return CborErrorUnexpectedEOF;
   19684:	f240 1001 	movw	r0, #257	; 0x101
   19688:	e7d5      	b.n	19636 <extract_length+0x50>
        *len = 0;
   1968a:	2300      	movs	r3, #0
   1968c:	602b      	str	r3, [r5, #0]
}
   1968e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00019690 <iterate_string_chunks>:

static CborError iterate_string_chunks(const CborValue *value, char *buffer, size_t *buflen,
                                       bool *result, CborValue *next, IterateFunction func)
{
   19690:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19694:	b085      	sub	sp, #20
   19696:	4604      	mov	r4, r0
   19698:	4688      	mov	r8, r1
   1969a:	4691      	mov	r9, r2
   1969c:	461e      	mov	r6, r3
}
CBOR_API CborError cbor_value_skip_tag(CborValue *it);

/* Strings */
CBOR_INLINE_API bool cbor_value_is_byte_string(const CborValue *value)
{ return value->type == CborByteStringType; }
   1969e:	7b83      	ldrb	r3, [r0, #14]
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   196a0:	2b40      	cmp	r3, #64	; 0x40
   196a2:	d001      	beq.n	196a8 <iterate_string_chunks+0x18>
   196a4:	2b60      	cmp	r3, #96	; 0x60
   196a6:	d10c      	bne.n	196c2 <iterate_string_chunks+0x32>

    size_t total;
    CborError err;
    int offset = value->offset;
   196a8:	6863      	ldr	r3, [r4, #4]
   196aa:	9302      	str	r3, [sp, #8]
{ return (value->flags & CborIteratorFlag_UnknownLength) == 0; }
   196ac:	7be2      	ldrb	r2, [r4, #15]
    if (cbor_value_is_length_known(value)) {
   196ae:	f012 0f04 	tst.w	r2, #4
   196b2:	d010      	beq.n	196d6 <iterate_string_chunks+0x46>
        else
            *result = false;
        offset += total;
    } else {
        /* chunked */
        ++offset;
   196b4:	3301      	adds	r3, #1
   196b6:	9302      	str	r3, [sp, #8]
        total = 0;
   196b8:	2300      	movs	r3, #0
   196ba:	9303      	str	r3, [sp, #12]
        *result = true;
   196bc:	2301      	movs	r3, #1
   196be:	7033      	strb	r3, [r6, #0]
   196c0:	e059      	b.n	19776 <iterate_string_chunks+0xe6>
    assert(cbor_value_is_byte_string(value) || cbor_value_is_text_string(value));
   196c2:	f7ee fd7d 	bl	81c0 <hal_debugger_connected>
   196c6:	b100      	cbz	r0, 196ca <iterate_string_chunks+0x3a>
   196c8:	be01      	bkpt	0x0001
   196ca:	2300      	movs	r3, #0
   196cc:	461a      	mov	r2, r3
   196ce:	4619      	mov	r1, r3
   196d0:	4618      	mov	r0, r3
   196d2:	f7f0 f90b 	bl	98ec <__assert_func>
        err = extract_length(value->parser, &offset, &total);
   196d6:	aa03      	add	r2, sp, #12
   196d8:	a902      	add	r1, sp, #8
   196da:	6820      	ldr	r0, [r4, #0]
   196dc:	f7ff ff83 	bl	195e6 <extract_length>
        if (err)
   196e0:	4603      	mov	r3, r0
   196e2:	2800      	cmp	r0, #0
   196e4:	f040 8084 	bne.w	197f0 <iterate_string_chunks+0x160>
        if (total > (size_t)(value->parser->end - offset))
   196e8:	6820      	ldr	r0, [r4, #0]
   196ea:	6843      	ldr	r3, [r0, #4]
   196ec:	9a02      	ldr	r2, [sp, #8]
   196ee:	1a99      	subs	r1, r3, r2
   196f0:	9b03      	ldr	r3, [sp, #12]
   196f2:	4299      	cmp	r1, r3
   196f4:	f0c0 8083 	bcc.w	197fe <iterate_string_chunks+0x16e>
        if (total <= *buflen)
   196f8:	f8d9 1000 	ldr.w	r1, [r9]
   196fc:	428b      	cmp	r3, r1
   196fe:	d82a      	bhi.n	19756 <iterate_string_chunks+0xc6>
            *result = !!func(value->parser->d, buffer, offset, total);
   19700:	4641      	mov	r1, r8
   19702:	6800      	ldr	r0, [r0, #0]
   19704:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   19706:	47a8      	blx	r5
   19708:	3000      	adds	r0, #0
   1970a:	bf18      	it	ne
   1970c:	2001      	movne	r0, #1
   1970e:	7030      	strb	r0, [r6, #0]
        offset += total;
   19710:	9b02      	ldr	r3, [sp, #8]
   19712:	9a03      	ldr	r2, [sp, #12]
   19714:	4413      	add	r3, r2
   19716:	9302      	str	r3, [sp, #8]
            total = newTotal;
        }
    }

    /* is there enough room for the ending NUL byte? */
    if (*result && *buflen > total) {
   19718:	7833      	ldrb	r3, [r6, #0]
   1971a:	b153      	cbz	r3, 19732 <iterate_string_chunks+0xa2>
   1971c:	f8d9 2000 	ldr.w	r2, [r9]
   19720:	9b03      	ldr	r3, [sp, #12]
   19722:	429a      	cmp	r2, r3
   19724:	d905      	bls.n	19732 <iterate_string_chunks+0xa2>
        /* we are just trying to write a NULL byte here,, but this is hard
         * because this is called by function pointer with an abstract
         * reader.  Since this is the output buffer, we can assume that if
         * we have a valid buffer its ok to write a NULL here  */
        if(buffer) {
   19726:	f1b8 0f00 	cmp.w	r8, #0
   1972a:	d002      	beq.n	19732 <iterate_string_chunks+0xa2>
            *(buffer + total) = '\0';
   1972c:	2200      	movs	r2, #0
   1972e:	f808 2003 	strb.w	r2, [r8, r3]
        }
    }
    *buflen = total;
   19732:	9b03      	ldr	r3, [sp, #12]
   19734:	f8c9 3000 	str.w	r3, [r9]

    if (next) {
   19738:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1973a:	2b00      	cmp	r3, #0
   1973c:	d062      	beq.n	19804 <iterate_string_chunks+0x174>
        *next = *value;
   1973e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
   19742:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   19744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        next->offset = offset;
   19748:	9b02      	ldr	r3, [sp, #8]
   1974a:	6063      	str	r3, [r4, #4]
        return preparse_next_value(next);
   1974c:	4620      	mov	r0, r4
   1974e:	f7ff ff24 	bl	1959a <preparse_next_value>
   19752:	4603      	mov	r3, r0
   19754:	e04c      	b.n	197f0 <iterate_string_chunks+0x160>
            *result = false;
   19756:	2300      	movs	r3, #0
   19758:	7033      	strb	r3, [r6, #0]
   1975a:	e7d9      	b.n	19710 <iterate_string_chunks+0x80>
                ++offset;
   1975c:	9b02      	ldr	r3, [sp, #8]
   1975e:	3301      	adds	r3, #1
   19760:	9302      	str	r3, [sp, #8]
   19762:	e7d9      	b.n	19718 <iterate_string_chunks+0x88>
#endif

static inline bool add_check_overflow(size_t v1, size_t v2, size_t *r)
{
#if ((defined(__GNUC__) && (__GNUC__ >= 5)) && !defined(__INTEL_COMPILER)) || __has_builtin(__builtin_add_overflow)
    return __builtin_add_overflow(v1, v2, r);
   19764:	2201      	movs	r2, #1
   19766:	e021      	b.n	197ac <iterate_string_chunks+0x11c>
                *result = false;
   19768:	2300      	movs	r3, #0
   1976a:	7033      	strb	r3, [r6, #0]
            offset += chunkLen;
   1976c:	9b02      	ldr	r3, [sp, #8]
   1976e:	9a01      	ldr	r2, [sp, #4]
   19770:	4413      	add	r3, r2
   19772:	9302      	str	r3, [sp, #8]
            total = newTotal;
   19774:	9503      	str	r5, [sp, #12]
            if (offset == value->parser->end)
   19776:	6823      	ldr	r3, [r4, #0]
   19778:	685a      	ldr	r2, [r3, #4]
   1977a:	9902      	ldr	r1, [sp, #8]
   1977c:	428a      	cmp	r2, r1
   1977e:	d02f      	beq.n	197e0 <iterate_string_chunks+0x150>
            val = value->parser->d->get8(value->parser->d, offset);
   19780:	6818      	ldr	r0, [r3, #0]
   19782:	6803      	ldr	r3, [r0, #0]
   19784:	4798      	blx	r3
            if (val == (uint8_t)BreakByte) {
   19786:	28ff      	cmp	r0, #255	; 0xff
   19788:	d0e8      	beq.n	1975c <iterate_string_chunks+0xcc>
            if ((val & MajorTypeMask) != value->type)
   1978a:	f020 001f 	bic.w	r0, r0, #31
   1978e:	7ba3      	ldrb	r3, [r4, #14]
   19790:	4298      	cmp	r0, r3
   19792:	d128      	bne.n	197e6 <iterate_string_chunks+0x156>
            err = extract_length(value->parser, &offset, &chunkLen);
   19794:	aa01      	add	r2, sp, #4
   19796:	a902      	add	r1, sp, #8
   19798:	6820      	ldr	r0, [r4, #0]
   1979a:	f7ff ff24 	bl	195e6 <extract_length>
            if (err)
   1979e:	4603      	mov	r3, r0
   197a0:	bb30      	cbnz	r0, 197f0 <iterate_string_chunks+0x160>
            if (unlikely(add_check_overflow(total, chunkLen, &newTotal)))
   197a2:	9903      	ldr	r1, [sp, #12]
   197a4:	9b01      	ldr	r3, [sp, #4]
   197a6:	2200      	movs	r2, #0
   197a8:	18cd      	adds	r5, r1, r3
   197aa:	d2db      	bcs.n	19764 <iterate_string_chunks+0xd4>
   197ac:	b9f2      	cbnz	r2, 197ec <iterate_string_chunks+0x15c>
            if (chunkLen > (size_t)(value->parser->end - offset))
   197ae:	f8d4 c000 	ldr.w	ip, [r4]
   197b2:	f8dc 0004 	ldr.w	r0, [ip, #4]
   197b6:	9a02      	ldr	r2, [sp, #8]
   197b8:	1a80      	subs	r0, r0, r2
   197ba:	4283      	cmp	r3, r0
   197bc:	d81c      	bhi.n	197f8 <iterate_string_chunks+0x168>
            if (*result && *buflen >= newTotal)
   197be:	7830      	ldrb	r0, [r6, #0]
   197c0:	2800      	cmp	r0, #0
   197c2:	d0d1      	beq.n	19768 <iterate_string_chunks+0xd8>
   197c4:	f8d9 0000 	ldr.w	r0, [r9]
   197c8:	42a8      	cmp	r0, r5
   197ca:	d3cd      	bcc.n	19768 <iterate_string_chunks+0xd8>
                *result = !!func(value->parser->d, buffer + total, offset, chunkLen);
   197cc:	4441      	add	r1, r8
   197ce:	f8dc 0000 	ldr.w	r0, [ip]
   197d2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   197d4:	47b8      	blx	r7
   197d6:	3000      	adds	r0, #0
   197d8:	bf18      	it	ne
   197da:	2001      	movne	r0, #1
   197dc:	7030      	strb	r0, [r6, #0]
   197de:	e7c5      	b.n	1976c <iterate_string_chunks+0xdc>
                return CborErrorUnexpectedEOF;
   197e0:	f240 1301 	movw	r3, #257	; 0x101
   197e4:	e004      	b.n	197f0 <iterate_string_chunks+0x160>
                return CborErrorIllegalType;
   197e6:	f44f 7382 	mov.w	r3, #260	; 0x104
   197ea:	e001      	b.n	197f0 <iterate_string_chunks+0x160>
                return CborErrorDataTooLarge;
   197ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
    }
    return CborNoError;
}
   197f0:	4618      	mov	r0, r3
   197f2:	b005      	add	sp, #20
   197f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return CborErrorUnexpectedEOF;
   197f8:	f240 1301 	movw	r3, #257	; 0x101
   197fc:	e7f8      	b.n	197f0 <iterate_string_chunks+0x160>
            return CborErrorUnexpectedEOF;
   197fe:	f240 1301 	movw	r3, #257	; 0x101
   19802:	e7f5      	b.n	197f0 <iterate_string_chunks+0x160>
    return CborNoError;
   19804:	2300      	movs	r3, #0
   19806:	e7f3      	b.n	197f0 <iterate_string_chunks+0x160>

00019808 <advance_internal>:
{
   19808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1980a:	4604      	mov	r4, r0
    CborError err = extract_number(it->parser, &it->offset,  &length);
   1980c:	6806      	ldr	r6, [r0, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   1980e:	6830      	ldr	r0, [r6, #0]
   19810:	6803      	ldr	r3, [r0, #0]
   19812:	6861      	ldr	r1, [r4, #4]
   19814:	4798      	blx	r3
   19816:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   1981a:	6863      	ldr	r3, [r4, #4]
   1981c:	3301      	adds	r3, #1
   1981e:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   19820:	2817      	cmp	r0, #23
   19822:	d915      	bls.n	19850 <advance_internal+0x48>
    if (unlikely(additional_information > Value64Bit))
   19824:	281b      	cmp	r0, #27
   19826:	d83f      	bhi.n	198a8 <advance_internal+0xa0>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   19828:	3818      	subs	r0, #24
   1982a:	2501      	movs	r5, #1
   1982c:	4085      	lsls	r5, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   1982e:	6873      	ldr	r3, [r6, #4]
   19830:	6861      	ldr	r1, [r4, #4]
   19832:	1a5b      	subs	r3, r3, r1
   19834:	429d      	cmp	r5, r3
   19836:	d83c      	bhi.n	198b2 <advance_internal+0xaa>
    } else if (bytesNeeded == 1) {
   19838:	2d01      	cmp	r5, #1
   1983a:	d122      	bne.n	19882 <advance_internal+0x7a>
        *len = p->d->get8(p->d, *offset);
   1983c:	6830      	ldr	r0, [r6, #0]
   1983e:	6803      	ldr	r3, [r0, #0]
   19840:	4798      	blx	r3
   19842:	b2c0      	uxtb	r0, r0
   19844:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   19846:	6863      	ldr	r3, [r4, #4]
   19848:	441d      	add	r5, r3
   1984a:	6065      	str	r5, [r4, #4]
    return CborNoError;
   1984c:	2300      	movs	r3, #0
   1984e:	e002      	b.n	19856 <advance_internal+0x4e>
        *len = additional_information;
   19850:	b2c0      	uxtb	r0, r0
   19852:	2100      	movs	r1, #0
        return CborNoError;
   19854:	2300      	movs	r3, #0
    assert(err == CborNoError);
   19856:	bb8b      	cbnz	r3, 198bc <advance_internal+0xb4>
    if (it->type == CborByteStringType || it->type == CborTextStringType) {
   19858:	7ba3      	ldrb	r3, [r4, #14]
   1985a:	2b40      	cmp	r3, #64	; 0x40
   1985c:	d001      	beq.n	19862 <advance_internal+0x5a>
   1985e:	2b60      	cmp	r3, #96	; 0x60
   19860:	d10b      	bne.n	1987a <advance_internal+0x72>
        assert(length == (size_t)length);
   19862:	2700      	movs	r7, #0
   19864:	428f      	cmp	r7, r1
   19866:	bf08      	it	eq
   19868:	4280      	cmpeq	r0, r0
   1986a:	d131      	bne.n	198d0 <advance_internal+0xc8>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   1986c:	7be3      	ldrb	r3, [r4, #15]
   1986e:	f013 0f04 	tst.w	r3, #4
   19872:	d137      	bne.n	198e4 <advance_internal+0xdc>
        it->offset += length;
   19874:	6863      	ldr	r3, [r4, #4]
   19876:	4403      	add	r3, r0
   19878:	6063      	str	r3, [r4, #4]
    return preparse_next_value(it);
   1987a:	4620      	mov	r0, r4
   1987c:	f7ff fe8d 	bl	1959a <preparse_next_value>
}
   19880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (bytesNeeded == 2) {
   19882:	2d02      	cmp	r5, #2
   19884:	d105      	bne.n	19892 <advance_internal+0x8a>
        *len =  p->d->get16(p->d, *offset);
   19886:	6830      	ldr	r0, [r6, #0]
   19888:	6843      	ldr	r3, [r0, #4]
   1988a:	4798      	blx	r3
   1988c:	b280      	uxth	r0, r0
   1988e:	2100      	movs	r1, #0
   19890:	e7d9      	b.n	19846 <advance_internal+0x3e>
    } else if (bytesNeeded == 4) {
   19892:	2d04      	cmp	r5, #4
   19894:	d003      	beq.n	1989e <advance_internal+0x96>
        *len =  p->d->get64(p->d, *offset);
   19896:	6830      	ldr	r0, [r6, #0]
   19898:	68c3      	ldr	r3, [r0, #12]
   1989a:	4798      	blx	r3
   1989c:	e7d3      	b.n	19846 <advance_internal+0x3e>
        *len =  p->d->get32(p->d, *offset);
   1989e:	6830      	ldr	r0, [r6, #0]
   198a0:	6883      	ldr	r3, [r0, #8]
   198a2:	4798      	blx	r3
   198a4:	2100      	movs	r1, #0
   198a6:	e7ce      	b.n	19846 <advance_internal+0x3e>
    *len = 1;
   198a8:	2001      	movs	r0, #1
   198aa:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   198ac:	f240 1305 	movw	r3, #261	; 0x105
   198b0:	e7d1      	b.n	19856 <advance_internal+0x4e>
    *len = 1;
   198b2:	2001      	movs	r0, #1
   198b4:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   198b6:	f240 1301 	movw	r3, #257	; 0x101
   198ba:	e7cc      	b.n	19856 <advance_internal+0x4e>
    assert(err == CborNoError);
   198bc:	f7ee fc80 	bl	81c0 <hal_debugger_connected>
   198c0:	b100      	cbz	r0, 198c4 <advance_internal+0xbc>
   198c2:	be01      	bkpt	0x0001
   198c4:	2300      	movs	r3, #0
   198c6:	461a      	mov	r2, r3
   198c8:	4619      	mov	r1, r3
   198ca:	4618      	mov	r0, r3
   198cc:	f7f0 f80e 	bl	98ec <__assert_func>
        assert(length == (size_t)length);
   198d0:	f7ee fc76 	bl	81c0 <hal_debugger_connected>
   198d4:	b100      	cbz	r0, 198d8 <advance_internal+0xd0>
   198d6:	be01      	bkpt	0x0001
   198d8:	2300      	movs	r3, #0
   198da:	461a      	mov	r2, r3
   198dc:	4619      	mov	r1, r3
   198de:	4618      	mov	r0, r3
   198e0:	f7f0 f804 	bl	98ec <__assert_func>
        assert((it->flags & CborIteratorFlag_UnknownLength) == 0);
   198e4:	f7ee fc6c 	bl	81c0 <hal_debugger_connected>
   198e8:	b100      	cbz	r0, 198ec <advance_internal+0xe4>
   198ea:	be01      	bkpt	0x0001
   198ec:	2300      	movs	r3, #0
   198ee:	461a      	mov	r2, r3
   198f0:	4619      	mov	r1, r3
   198f2:	4618      	mov	r0, r3
   198f4:	f7ef fffa 	bl	98ec <__assert_func>

000198f8 <_cbor_value_decode_int64_internal>:
{
   198f8:	b510      	push	{r4, lr}
   198fa:	4604      	mov	r4, r0
    uint8_t val = value->parser->d->get8(value->parser->d, value->offset);
   198fc:	6803      	ldr	r3, [r0, #0]
   198fe:	6818      	ldr	r0, [r3, #0]
   19900:	6803      	ldr	r3, [r0, #0]
   19902:	6861      	ldr	r1, [r4, #4]
   19904:	4798      	blx	r3
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   19906:	7be3      	ldrb	r3, [r4, #15]
   19908:	f013 0f01 	tst.w	r3, #1
   1990c:	d104      	bne.n	19918 <_cbor_value_decode_int64_internal+0x20>
   1990e:	7ba3      	ldrb	r3, [r4, #14]
   19910:	2bfa      	cmp	r3, #250	; 0xfa
   19912:	d001      	beq.n	19918 <_cbor_value_decode_int64_internal+0x20>
   19914:	2bfb      	cmp	r3, #251	; 0xfb
   19916:	d110      	bne.n	1993a <_cbor_value_decode_int64_internal+0x42>
   19918:	f000 031f 	and.w	r3, r0, #31
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   1991c:	f1a3 021a 	sub.w	r2, r3, #26
   19920:	2a01      	cmp	r2, #1
   19922:	d814      	bhi.n	1994e <_cbor_value_decode_int64_internal+0x56>
    if ((val & 1) == (Value32Bit & 1))
   19924:	f010 0f01 	tst.w	r0, #1
   19928:	d11b      	bne.n	19962 <_cbor_value_decode_int64_internal+0x6a>
        return value->parser->d->get32(value->parser->d, value->offset + 1);
   1992a:	6823      	ldr	r3, [r4, #0]
   1992c:	6818      	ldr	r0, [r3, #0]
   1992e:	6883      	ldr	r3, [r0, #8]
   19930:	6861      	ldr	r1, [r4, #4]
   19932:	3101      	adds	r1, #1
   19934:	4798      	blx	r3
   19936:	2100      	movs	r1, #0
}
   19938:	bd10      	pop	{r4, pc}
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge ||
   1993a:	f7ee fc41 	bl	81c0 <hal_debugger_connected>
   1993e:	b100      	cbz	r0, 19942 <_cbor_value_decode_int64_internal+0x4a>
   19940:	be01      	bkpt	0x0001
   19942:	2300      	movs	r3, #0
   19944:	461a      	mov	r2, r3
   19946:	4619      	mov	r1, r3
   19948:	4618      	mov	r0, r3
   1994a:	f7ef ffcf 	bl	98ec <__assert_func>
    assert((val & SmallValueMask) == Value32Bit || (val & SmallValueMask) == Value64Bit);
   1994e:	f7ee fc37 	bl	81c0 <hal_debugger_connected>
   19952:	b100      	cbz	r0, 19956 <_cbor_value_decode_int64_internal+0x5e>
   19954:	be01      	bkpt	0x0001
   19956:	2300      	movs	r3, #0
   19958:	461a      	mov	r2, r3
   1995a:	4619      	mov	r1, r3
   1995c:	4618      	mov	r0, r3
   1995e:	f7ef ffc5 	bl	98ec <__assert_func>
    assert((val & SmallValueMask) == Value64Bit);
   19962:	2b1b      	cmp	r3, #27
   19964:	d106      	bne.n	19974 <_cbor_value_decode_int64_internal+0x7c>
        return value->parser->d->get64(value->parser->d, value->offset + 1);
   19966:	6823      	ldr	r3, [r4, #0]
   19968:	6818      	ldr	r0, [r3, #0]
   1996a:	68c3      	ldr	r3, [r0, #12]
   1996c:	6861      	ldr	r1, [r4, #4]
   1996e:	3101      	adds	r1, #1
   19970:	4798      	blx	r3
   19972:	e7e1      	b.n	19938 <_cbor_value_decode_int64_internal+0x40>
    assert((val & SmallValueMask) == Value64Bit);
   19974:	f7ee fc24 	bl	81c0 <hal_debugger_connected>
   19978:	b100      	cbz	r0, 1997c <_cbor_value_decode_int64_internal+0x84>
   1997a:	be01      	bkpt	0x0001
   1997c:	2300      	movs	r3, #0
   1997e:	461a      	mov	r2, r3
   19980:	4619      	mov	r1, r3
   19982:	4618      	mov	r0, r3
   19984:	f7ef ffb2 	bl	98ec <__assert_func>

00019988 <cbor_parser_init>:
{
   19988:	b510      	push	{r4, lr}
    memset(parser, 0, sizeof(*parser));
   1998a:	2400      	movs	r4, #0
   1998c:	6054      	str	r4, [r2, #4]
   1998e:	6094      	str	r4, [r2, #8]
    parser->d = d;
   19990:	6010      	str	r0, [r2, #0]
    parser->end = d->message_size;
   19992:	6980      	ldr	r0, [r0, #24]
   19994:	6050      	str	r0, [r2, #4]
    parser->flags = flags;
   19996:	6091      	str	r1, [r2, #8]
    it->parser = parser;
   19998:	601a      	str	r2, [r3, #0]
    it->offset = 0;
   1999a:	605c      	str	r4, [r3, #4]
    it->remaining = 1;/* there's one type altogether, usually an array or map */
   1999c:	2201      	movs	r2, #1
   1999e:	609a      	str	r2, [r3, #8]
    return preparse_value(it);
   199a0:	4618      	mov	r0, r3
   199a2:	f7ff fd58 	bl	19456 <preparse_value>
}
   199a6:	bd10      	pop	{r4, pc}

000199a8 <cbor_value_enter_container>:
{
   199a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   199aa:	4605      	mov	r5, r0
   199ac:	460c      	mov	r4, r1
{ return it->type == CborArrayType || it->type == CborMapType; }
   199ae:	7b83      	ldrb	r3, [r0, #14]
   199b0:	2b80      	cmp	r3, #128	; 0x80
   199b2:	d021      	beq.n	199f8 <cbor_value_enter_container+0x50>
   199b4:	2ba0      	cmp	r3, #160	; 0xa0
   199b6:	d01d      	beq.n	199f4 <cbor_value_enter_container+0x4c>
   199b8:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   199ba:	b1fb      	cbz	r3, 199fc <cbor_value_enter_container+0x54>
    *recursed = *it;
   199bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   199c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (it->flags & CborIteratorFlag_UnknownLength) {
   199c4:	7beb      	ldrb	r3, [r5, #15]
   199c6:	f013 0f04 	tst.w	r3, #4
   199ca:	d021      	beq.n	19a10 <cbor_value_enter_container+0x68>
        recursed->remaining = UINT32_MAX;
   199cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   199d0:	60a3      	str	r3, [r4, #8]
        ++recursed->offset;
   199d2:	460b      	mov	r3, r1
   199d4:	3301      	adds	r3, #1
   199d6:	6063      	str	r3, [r4, #4]
        err = preparse_value(recursed);
   199d8:	4620      	mov	r0, r4
   199da:	f7ff fd3c 	bl	19456 <preparse_value>
        if (err != CborErrorUnexpectedBreak)
   199de:	f5b0 7f81 	cmp.w	r0, #258	; 0x102
   199e2:	d145      	bne.n	19a70 <cbor_value_enter_container+0xc8>
        ++recursed->offset;
   199e4:	6863      	ldr	r3, [r4, #4]
   199e6:	3301      	adds	r3, #1
   199e8:	6063      	str	r3, [r4, #4]
    recursed->type = CborInvalidType;
   199ea:	23ff      	movs	r3, #255	; 0xff
   199ec:	73a3      	strb	r3, [r4, #14]
    recursed->remaining = 0;
   199ee:	2000      	movs	r0, #0
   199f0:	60a0      	str	r0, [r4, #8]
    return CborNoError;
   199f2:	e03d      	b.n	19a70 <cbor_value_enter_container+0xc8>
   199f4:	2301      	movs	r3, #1
   199f6:	e7e0      	b.n	199ba <cbor_value_enter_container+0x12>
   199f8:	2301      	movs	r3, #1
   199fa:	e7de      	b.n	199ba <cbor_value_enter_container+0x12>
    assert(cbor_value_is_container(it));
   199fc:	f7ee fbe0 	bl	81c0 <hal_debugger_connected>
   19a00:	b100      	cbz	r0, 19a04 <cbor_value_enter_container+0x5c>
   19a02:	be01      	bkpt	0x0001
   19a04:	2300      	movs	r3, #0
   19a06:	461a      	mov	r2, r3
   19a08:	4619      	mov	r1, r3
   19a0a:	4618      	mov	r0, r3
   19a0c:	f7ef ff6e 	bl	98ec <__assert_func>
        err = extract_number(recursed->parser, &recursed->offset, &len);
   19a10:	6826      	ldr	r6, [r4, #0]
    uint8_t additional_information = p->d->get8(p->d, *offset) & SmallValueMask;
   19a12:	6830      	ldr	r0, [r6, #0]
   19a14:	6803      	ldr	r3, [r0, #0]
   19a16:	6861      	ldr	r1, [r4, #4]
   19a18:	4798      	blx	r3
   19a1a:	f000 001f 	and.w	r0, r0, #31
    ++*offset;
   19a1e:	6863      	ldr	r3, [r4, #4]
   19a20:	3301      	adds	r3, #1
   19a22:	6063      	str	r3, [r4, #4]
    if (additional_information < Value8Bit) {
   19a24:	2817      	cmp	r0, #23
   19a26:	d915      	bls.n	19a54 <cbor_value_enter_container+0xac>
    if (unlikely(additional_information > Value64Bit))
   19a28:	281b      	cmp	r0, #27
   19a2a:	d835      	bhi.n	19a98 <cbor_value_enter_container+0xf0>
    size_t bytesNeeded = (size_t)(1 << (additional_information - Value8Bit));
   19a2c:	3818      	subs	r0, #24
   19a2e:	2701      	movs	r7, #1
   19a30:	4087      	lsls	r7, r0
    if (unlikely(bytesNeeded > (size_t)(p->end - *offset))) {
   19a32:	6873      	ldr	r3, [r6, #4]
   19a34:	6861      	ldr	r1, [r4, #4]
   19a36:	1a5b      	subs	r3, r3, r1
   19a38:	429f      	cmp	r7, r3
   19a3a:	d832      	bhi.n	19aa2 <cbor_value_enter_container+0xfa>
    } else if (bytesNeeded == 1) {
   19a3c:	2f01      	cmp	r7, #1
   19a3e:	d118      	bne.n	19a72 <cbor_value_enter_container+0xca>
        *len = p->d->get8(p->d, *offset);
   19a40:	6830      	ldr	r0, [r6, #0]
   19a42:	6803      	ldr	r3, [r0, #0]
   19a44:	4798      	blx	r3
   19a46:	b2c0      	uxtb	r0, r0
   19a48:	2100      	movs	r1, #0
    *offset += bytesNeeded;
   19a4a:	6863      	ldr	r3, [r4, #4]
   19a4c:	441f      	add	r7, r3
   19a4e:	6067      	str	r7, [r4, #4]
    return CborNoError;
   19a50:	2300      	movs	r3, #0
   19a52:	e002      	b.n	19a5a <cbor_value_enter_container+0xb2>
        *len = additional_information;
   19a54:	b2c0      	uxtb	r0, r0
   19a56:	2100      	movs	r1, #0
        return CborNoError;
   19a58:	2300      	movs	r3, #0
        assert(err == CborNoError);
   19a5a:	bb3b      	cbnz	r3, 19aac <cbor_value_enter_container+0x104>
        recursed->remaining = (uint32_t)len;
   19a5c:	60a0      	str	r0, [r4, #8]
        if (recursed->remaining != len || len == UINT32_MAX) {
   19a5e:	2300      	movs	r3, #0
   19a60:	428b      	cmp	r3, r1
   19a62:	bf08      	it	eq
   19a64:	4280      	cmpeq	r0, r0
   19a66:	d02b      	beq.n	19ac0 <cbor_value_enter_container+0x118>
            recursed->offset = it->offset;
   19a68:	686b      	ldr	r3, [r5, #4]
   19a6a:	6063      	str	r3, [r4, #4]
            return CborErrorDataTooLarge;
   19a6c:	f44f 6080 	mov.w	r0, #1024	; 0x400
}
   19a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (bytesNeeded == 2) {
   19a72:	2f02      	cmp	r7, #2
   19a74:	d105      	bne.n	19a82 <cbor_value_enter_container+0xda>
        *len =  p->d->get16(p->d, *offset);
   19a76:	6830      	ldr	r0, [r6, #0]
   19a78:	6843      	ldr	r3, [r0, #4]
   19a7a:	4798      	blx	r3
   19a7c:	b280      	uxth	r0, r0
   19a7e:	2100      	movs	r1, #0
   19a80:	e7e3      	b.n	19a4a <cbor_value_enter_container+0xa2>
    } else if (bytesNeeded == 4) {
   19a82:	2f04      	cmp	r7, #4
   19a84:	d003      	beq.n	19a8e <cbor_value_enter_container+0xe6>
        *len =  p->d->get64(p->d, *offset);
   19a86:	6830      	ldr	r0, [r6, #0]
   19a88:	68c3      	ldr	r3, [r0, #12]
   19a8a:	4798      	blx	r3
   19a8c:	e7dd      	b.n	19a4a <cbor_value_enter_container+0xa2>
        *len =  p->d->get32(p->d, *offset);
   19a8e:	6830      	ldr	r0, [r6, #0]
   19a90:	6883      	ldr	r3, [r0, #8]
   19a92:	4798      	blx	r3
   19a94:	2100      	movs	r1, #0
   19a96:	e7d8      	b.n	19a4a <cbor_value_enter_container+0xa2>
    *len = 1;
   19a98:	2001      	movs	r0, #1
   19a9a:	2100      	movs	r1, #0
        return CborErrorIllegalNumber;
   19a9c:	f240 1305 	movw	r3, #261	; 0x105
   19aa0:	e7db      	b.n	19a5a <cbor_value_enter_container+0xb2>
    *len = 1;
   19aa2:	2001      	movs	r0, #1
   19aa4:	2100      	movs	r1, #0
        return CborErrorUnexpectedEOF;
   19aa6:	f240 1301 	movw	r3, #257	; 0x101
   19aaa:	e7d6      	b.n	19a5a <cbor_value_enter_container+0xb2>
        assert(err == CborNoError);
   19aac:	f7ee fb88 	bl	81c0 <hal_debugger_connected>
   19ab0:	b100      	cbz	r0, 19ab4 <cbor_value_enter_container+0x10c>
   19ab2:	be01      	bkpt	0x0001
   19ab4:	2300      	movs	r3, #0
   19ab6:	461a      	mov	r2, r3
   19ab8:	4619      	mov	r1, r3
   19aba:	4618      	mov	r0, r3
   19abc:	f7ef ff16 	bl	98ec <__assert_func>
        if (recursed->remaining != len || len == UINT32_MAX) {
   19ac0:	2900      	cmp	r1, #0
   19ac2:	bf08      	it	eq
   19ac4:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   19ac8:	d0ce      	beq.n	19a68 <cbor_value_enter_container+0xc0>
        if (recursed->type == CborMapType) {
   19aca:	7ba3      	ldrb	r3, [r4, #14]
   19acc:	2ba0      	cmp	r3, #160	; 0xa0
   19ace:	d006      	beq.n	19ade <cbor_value_enter_container+0x136>
        if (len != 0)
   19ad0:	ea50 0301 	orrs.w	r3, r0, r1
   19ad4:	d089      	beq.n	199ea <cbor_value_enter_container+0x42>
            return preparse_value(recursed);
   19ad6:	4620      	mov	r0, r4
   19ad8:	f7ff fcbd 	bl	19456 <preparse_value>
   19adc:	e7c8      	b.n	19a70 <cbor_value_enter_container+0xc8>
            if (recursed->remaining > UINT32_MAX / 2) {
   19ade:	2800      	cmp	r0, #0
   19ae0:	db02      	blt.n	19ae8 <cbor_value_enter_container+0x140>
            recursed->remaining *= 2;
   19ae2:	0046      	lsls	r6, r0, #1
   19ae4:	60a6      	str	r6, [r4, #8]
   19ae6:	e7f3      	b.n	19ad0 <cbor_value_enter_container+0x128>
                recursed->offset = it->offset;
   19ae8:	686b      	ldr	r3, [r5, #4]
   19aea:	6063      	str	r3, [r4, #4]
                return CborErrorDataTooLarge;
   19aec:	f44f 6080 	mov.w	r0, #1024	; 0x400
   19af0:	e7be      	b.n	19a70 <cbor_value_enter_container+0xc8>

00019af2 <cbor_value_leave_container>:
{
   19af2:	b508      	push	{r3, lr}
   19af4:	7b83      	ldrb	r3, [r0, #14]
   19af6:	2b80      	cmp	r3, #128	; 0x80
   19af8:	d00d      	beq.n	19b16 <cbor_value_leave_container+0x24>
   19afa:	2ba0      	cmp	r3, #160	; 0xa0
   19afc:	d009      	beq.n	19b12 <cbor_value_leave_container+0x20>
   19afe:	2300      	movs	r3, #0
    assert(cbor_value_is_container(it));
   19b00:	b15b      	cbz	r3, 19b1a <cbor_value_leave_container+0x28>
    assert(recursed->type == CborInvalidType);
   19b02:	7b8b      	ldrb	r3, [r1, #14]
   19b04:	2bff      	cmp	r3, #255	; 0xff
   19b06:	d112      	bne.n	19b2e <cbor_value_leave_container+0x3c>
    it->offset = recursed->offset;
   19b08:	684b      	ldr	r3, [r1, #4]
   19b0a:	6043      	str	r3, [r0, #4]
    return preparse_next_value(it);
   19b0c:	f7ff fd45 	bl	1959a <preparse_next_value>
}
   19b10:	bd08      	pop	{r3, pc}
   19b12:	2301      	movs	r3, #1
   19b14:	e7f4      	b.n	19b00 <cbor_value_leave_container+0xe>
   19b16:	2301      	movs	r3, #1
   19b18:	e7f2      	b.n	19b00 <cbor_value_leave_container+0xe>
    assert(cbor_value_is_container(it));
   19b1a:	f7ee fb51 	bl	81c0 <hal_debugger_connected>
   19b1e:	b100      	cbz	r0, 19b22 <cbor_value_leave_container+0x30>
   19b20:	be01      	bkpt	0x0001
   19b22:	2300      	movs	r3, #0
   19b24:	461a      	mov	r2, r3
   19b26:	4619      	mov	r1, r3
   19b28:	4618      	mov	r0, r3
   19b2a:	f7ef fedf 	bl	98ec <__assert_func>
    assert(recursed->type == CborInvalidType);
   19b2e:	f7ee fb47 	bl	81c0 <hal_debugger_connected>
   19b32:	b100      	cbz	r0, 19b36 <cbor_value_leave_container+0x44>
   19b34:	be01      	bkpt	0x0001
   19b36:	2300      	movs	r3, #0
   19b38:	461a      	mov	r2, r3
   19b3a:	4619      	mov	r1, r3
   19b3c:	4618      	mov	r0, r3
   19b3e:	f7ef fed5 	bl	98ec <__assert_func>
	...

00019b44 <_cbor_value_copy_string>:
 * \sa cbor_value_dup_text_string(), cbor_value_copy_text_string(), cbor_value_get_string_length(), cbor_value_calculate_string_length()
 */

CborError _cbor_value_copy_string(const CborValue *value, void *buffer,
                                 size_t *buflen, CborValue *next)
{
   19b44:	b510      	push	{r4, lr}
   19b46:	b084      	sub	sp, #16
    bool copied_all;
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   19b48:	460c      	mov	r4, r1
   19b4a:	b189      	cbz	r1, 19b70 <_cbor_value_copy_string+0x2c>
                                          buffer ? (IterateFunction) value->parser->d->cpy : iterate_noop);
   19b4c:	6801      	ldr	r1, [r0, #0]
   19b4e:	6809      	ldr	r1, [r1, #0]
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   19b50:	6949      	ldr	r1, [r1, #20]
   19b52:	9101      	str	r1, [sp, #4]
   19b54:	9300      	str	r3, [sp, #0]
   19b56:	f10d 030f 	add.w	r3, sp, #15
   19b5a:	4621      	mov	r1, r4
   19b5c:	f7ff fd98 	bl	19690 <iterate_string_chunks>
    return err ? err :
   19b60:	4603      	mov	r3, r0
   19b62:	b910      	cbnz	r0, 19b6a <_cbor_value_copy_string+0x26>
                 copied_all ? CborNoError : CborErrorOutOfMemory;
   19b64:	f89d 200f 	ldrb.w	r2, [sp, #15]
    return err ? err :
   19b68:	b122      	cbz	r2, 19b74 <_cbor_value_copy_string+0x30>
}
   19b6a:	4618      	mov	r0, r3
   19b6c:	b004      	add	sp, #16
   19b6e:	bd10      	pop	{r4, pc}
    CborError err = iterate_string_chunks(value, (char*)buffer, buflen, &copied_all, next,
   19b70:	4902      	ldr	r1, [pc, #8]	; (19b7c <_cbor_value_copy_string+0x38>)
   19b72:	e7ee      	b.n	19b52 <_cbor_value_copy_string+0xe>
    return err ? err :
   19b74:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   19b78:	e7f7      	b.n	19b6a <_cbor_value_copy_string+0x26>
   19b7a:	bf00      	nop
   19b7c:	00019453 	.word	0x00019453

00019b80 <advance_recursive>:
{
   19b80:	b570      	push	{r4, r5, r6, lr}
   19b82:	b086      	sub	sp, #24
   19b84:	4605      	mov	r5, r0
   19b86:	460e      	mov	r6, r1
    if (is_fixed_type(it->type))
   19b88:	7b84      	ldrb	r4, [r0, #14]
   19b8a:	4620      	mov	r0, r4
   19b8c:	f7ff fc4f 	bl	1942e <is_fixed_type>
   19b90:	b9c0      	cbnz	r0, 19bc4 <advance_recursive+0x44>
   19b92:	2c80      	cmp	r4, #128	; 0x80
   19b94:	d01f      	beq.n	19bd6 <advance_recursive+0x56>
   19b96:	2ca0      	cmp	r4, #160	; 0xa0
   19b98:	d01b      	beq.n	19bd2 <advance_recursive+0x52>
   19b9a:	2300      	movs	r3, #0
    if (!cbor_value_is_container(it)) {
   19b9c:	b1eb      	cbz	r3, 19bda <advance_recursive+0x5a>
    if (nestingLevel == CBOR_PARSER_MAX_RECURSIONS)
   19b9e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
   19ba2:	d02c      	beq.n	19bfe <advance_recursive+0x7e>
    err = cbor_value_enter_container(it, &recursed);
   19ba4:	a902      	add	r1, sp, #8
   19ba6:	4628      	mov	r0, r5
   19ba8:	f7ff fefe 	bl	199a8 <cbor_value_enter_container>
    if (err)
   19bac:	4603      	mov	r3, r0
   19bae:	b968      	cbnz	r0, 19bcc <advance_recursive+0x4c>
{ return it->remaining == 0; }
   19bb0:	9b04      	ldr	r3, [sp, #16]
    while (!cbor_value_at_end(&recursed)) {
   19bb2:	b1f3      	cbz	r3, 19bf2 <advance_recursive+0x72>
        err = advance_recursive(&recursed, nestingLevel + 1);
   19bb4:	1c71      	adds	r1, r6, #1
   19bb6:	a802      	add	r0, sp, #8
   19bb8:	f7ff ffe2 	bl	19b80 <advance_recursive>
        if (err)
   19bbc:	4603      	mov	r3, r0
   19bbe:	2800      	cmp	r0, #0
   19bc0:	d0f6      	beq.n	19bb0 <advance_recursive+0x30>
   19bc2:	e003      	b.n	19bcc <advance_recursive+0x4c>
        return advance_internal(it);
   19bc4:	4628      	mov	r0, r5
   19bc6:	f7ff fe1f 	bl	19808 <advance_internal>
   19bca:	4603      	mov	r3, r0
}
   19bcc:	4618      	mov	r0, r3
   19bce:	b006      	add	sp, #24
   19bd0:	bd70      	pop	{r4, r5, r6, pc}
{ return it->type == CborArrayType || it->type == CborMapType; }
   19bd2:	2301      	movs	r3, #1
   19bd4:	e7e2      	b.n	19b9c <advance_recursive+0x1c>
   19bd6:	2301      	movs	r3, #1
   19bd8:	e7e0      	b.n	19b9c <advance_recursive+0x1c>
        size_t len = SIZE_MAX;
   19bda:	aa06      	add	r2, sp, #24
   19bdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19be0:	f842 3d14 	str.w	r3, [r2, #-20]!
        return _cbor_value_copy_string(it, NULL, &len, it);
   19be4:	462b      	mov	r3, r5
   19be6:	2100      	movs	r1, #0
   19be8:	4628      	mov	r0, r5
   19bea:	f7ff ffab 	bl	19b44 <_cbor_value_copy_string>
   19bee:	4603      	mov	r3, r0
   19bf0:	e7ec      	b.n	19bcc <advance_recursive+0x4c>
    return cbor_value_leave_container(it, &recursed);
   19bf2:	a902      	add	r1, sp, #8
   19bf4:	4628      	mov	r0, r5
   19bf6:	f7ff ff7c 	bl	19af2 <cbor_value_leave_container>
   19bfa:	4603      	mov	r3, r0
   19bfc:	e7e6      	b.n	19bcc <advance_recursive+0x4c>
        return CborErrorNestingTooDeep;
   19bfe:	f240 4301 	movw	r3, #1025	; 0x401
   19c02:	e7e3      	b.n	19bcc <advance_recursive+0x4c>

00019c04 <cbor_value_advance>:
{
   19c04:	b508      	push	{r3, lr}
    assert(it->type != CborInvalidType);
   19c06:	7b83      	ldrb	r3, [r0, #14]
   19c08:	2bff      	cmp	r3, #255	; 0xff
   19c0a:	d005      	beq.n	19c18 <cbor_value_advance+0x14>
    if (!it->remaining)
   19c0c:	6883      	ldr	r3, [r0, #8]
   19c0e:	b16b      	cbz	r3, 19c2c <cbor_value_advance+0x28>
    return advance_recursive(it, 0);
   19c10:	2100      	movs	r1, #0
   19c12:	f7ff ffb5 	bl	19b80 <advance_recursive>
}
   19c16:	bd08      	pop	{r3, pc}
    assert(it->type != CborInvalidType);
   19c18:	f7ee fad2 	bl	81c0 <hal_debugger_connected>
   19c1c:	b100      	cbz	r0, 19c20 <cbor_value_advance+0x1c>
   19c1e:	be01      	bkpt	0x0001
   19c20:	2300      	movs	r3, #0
   19c22:	461a      	mov	r2, r3
   19c24:	4619      	mov	r1, r3
   19c26:	4618      	mov	r0, r3
   19c28:	f7ef fe60 	bl	98ec <__assert_func>
        return CborErrorAdvancePastEOF;
   19c2c:	2003      	movs	r0, #3
   19c2e:	e7f2      	b.n	19c16 <cbor_value_advance+0x12>

00019c30 <cbor_value_calculate_string_length>:
{
   19c30:	b508      	push	{r3, lr}
   19c32:	460a      	mov	r2, r1
    *len = SIZE_MAX;
   19c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19c38:	600b      	str	r3, [r1, #0]
    return _cbor_value_copy_string(value, NULL, len, NULL);
   19c3a:	2300      	movs	r3, #0
   19c3c:	4619      	mov	r1, r3
   19c3e:	f7ff ff81 	bl	19b44 <_cbor_value_copy_string>
}
   19c42:	bd08      	pop	{r3, pc}

00019c44 <hal_bsp_flash_dev>:

/// Return the Flash Device for the ID. 0 for Internal Flash ROM, 1 for External SPI Flash
const struct hal_flash *
hal_bsp_flash_dev(uint8_t id)
{
    if (id >= ARRAY_SIZE(flash_devs)) {
   19c44:	2801      	cmp	r0, #1
   19c46:	d803      	bhi.n	19c50 <hal_bsp_flash_dev+0xc>
        return NULL;
    }
    return flash_devs[id];
   19c48:	4b02      	ldr	r3, [pc, #8]	; (19c54 <hal_bsp_flash_dev+0x10>)
   19c4a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19c4e:	4770      	bx	lr
        return NULL;
   19c50:	2000      	movs	r0, #0
}
   19c52:	4770      	bx	lr
   19c54:	0002956c 	.word	0x0002956c

00019c58 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   19c58:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   19c5a:	f7ee facf 	bl	81fc <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   19c5e:	f001 f997 	bl	1af90 <nrf52_periph_create>
}
   19c62:	bd08      	pop	{r3, pc}

00019c64 <hal_spiflash_sector_info>:
}

static int
hal_spiflash_sector_info(const struct hal_flash *hal_flash_dev, int idx,
        uint32_t *address, uint32_t *sz)
{
   19c64:	b410      	push	{r4}
    const struct spiflash_dev *dev = (const struct spiflash_dev *)hal_flash_dev;

    *address = idx * dev->sector_size;
   19c66:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   19c68:	fb01 f104 	mul.w	r1, r1, r4
   19c6c:	6011      	str	r1, [r2, #0]
    *sz = dev->sector_size;
   19c6e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   19c70:	601a      	str	r2, [r3, #0]
    return 0;
}
   19c72:	2000      	movs	r0, #0
   19c74:	f85d 4b04 	ldr.w	r4, [sp], #4
   19c78:	4770      	bx	lr

00019c7a <spiflash_release_power_down_generic>:
{
   19c7a:	b530      	push	{r4, r5, lr}
   19c7c:	b083      	sub	sp, #12
   19c7e:	4605      	mov	r5, r0
    uint8_t cmd[1] = { SPIFLASH_RELEASE_POWER_DOWN };
   19c80:	ac02      	add	r4, sp, #8
   19c82:	23ab      	movs	r3, #171	; 0xab
   19c84:	f804 3d04 	strb.w	r3, [r4, #-4]!
    hal_gpio_write(dev->ss_pin, 0);
   19c88:	2100      	movs	r1, #0
   19c8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   19c8c:	f000 fd19 	bl	1a6c2 <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
   19c90:	2301      	movs	r3, #1
   19c92:	4622      	mov	r2, r4
   19c94:	4621      	mov	r1, r4
   19c96:	6a28      	ldr	r0, [r5, #32]
   19c98:	f001 f86e 	bl	1ad78 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
   19c9c:	2101      	movs	r1, #1
   19c9e:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   19ca0:	f000 fd0f 	bl	1a6c2 <hal_gpio_write>
}
   19ca4:	b003      	add	sp, #12
   19ca6:	bd30      	pop	{r4, r5, pc}

00019ca8 <spiflash_delay_us>:
{
   19ca8:	b510      	push	{r4, lr}
   19caa:	4604      	mov	r4, r0
    uint32_t ticks = os_time_ms_to_ticks32(usecs / 1000);
   19cac:	4809      	ldr	r0, [pc, #36]	; (19cd4 <spiflash_delay_us+0x2c>)
   19cae:	fba0 3004 	umull	r3, r0, r0, r4
   19cb2:	0980      	lsrs	r0, r0, #6
os_time_ms_to_ticks32(uint32_t ms)
{
#if OS_TICKS_PER_SEC == 1000
    return ms;
#else
    return ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   19cb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19cb8:	2300      	movs	r3, #0
   19cba:	01c0      	lsls	r0, r0, #7
   19cbc:	2100      	movs	r1, #0
   19cbe:	f7f2 f979 	bl	bfb4 <__aeabi_uldivmod>
    if (ticks > 1) {
   19cc2:	2801      	cmp	r0, #1
   19cc4:	d902      	bls.n	19ccc <spiflash_delay_us+0x24>
        os_time_delay(ticks);
   19cc6:	f7f1 fbaf 	bl	b428 <os_time_delay>
}
   19cca:	bd10      	pop	{r4, pc}
        os_cputime_delay_usecs(usecs);
   19ccc:	4620      	mov	r0, r4
   19cce:	f002 f84e 	bl	1bd6e <os_cputime_delay_usecs>
}
   19cd2:	e7fa      	b.n	19cca <spiflash_delay_us+0x22>
   19cd4:	10624dd3 	.word	0x10624dd3

00019cd8 <spiflash_read_jedec_id>:
{
   19cd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19cdc:	b083      	sub	sp, #12
   19cde:	4604      	mov	r4, r0
   19ce0:	4689      	mov	r9, r1
   19ce2:	4690      	mov	r8, r2
   19ce4:	461f      	mov	r7, r3
    uint8_t cmd[4] = { SPIFLASH_READ_JEDEC_ID, 0, 0, 0 };
   19ce6:	239f      	movs	r3, #159	; 0x9f
   19ce8:	f88d 3004 	strb.w	r3, [sp, #4]
   19cec:	2500      	movs	r5, #0
   19cee:	f88d 5005 	strb.w	r5, [sp, #5]
   19cf2:	f88d 5006 	strb.w	r5, [sp, #6]
   19cf6:	f88d 5007 	strb.w	r5, [sp, #7]
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   19cfa:	f100 0640 	add.w	r6, r0, #64	; 0x40
   19cfe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19d02:	4630      	mov	r0, r6
   19d04:	f7f1 f81e 	bl	ad44 <os_mutex_pend>
    hal_gpio_write(dev->ss_pin, 0);
   19d08:	4629      	mov	r1, r5
   19d0a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19d0c:	f000 fcd9 	bl	1a6c2 <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, cmd, cmd, sizeof cmd);
   19d10:	2304      	movs	r3, #4
   19d12:	eb0d 0203 	add.w	r2, sp, r3
   19d16:	4611      	mov	r1, r2
   19d18:	6a20      	ldr	r0, [r4, #32]
   19d1a:	f001 f82d 	bl	1ad78 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
   19d1e:	2101      	movs	r1, #1
   19d20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19d22:	f000 fcce 	bl	1a6c2 <hal_gpio_write>
    if (manufacturer) {
   19d26:	f1b9 0f00 	cmp.w	r9, #0
   19d2a:	d003      	beq.n	19d34 <spiflash_read_jedec_id+0x5c>
        *manufacturer = cmd[1];
   19d2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
   19d30:	f889 3000 	strb.w	r3, [r9]
    if (memory_type) {
   19d34:	f1b8 0f00 	cmp.w	r8, #0
   19d38:	d003      	beq.n	19d42 <spiflash_read_jedec_id+0x6a>
        *memory_type = cmd[2];
   19d3a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   19d3e:	f888 3000 	strb.w	r3, [r8]
    if (capacity) {
   19d42:	b117      	cbz	r7, 19d4a <spiflash_read_jedec_id+0x72>
        *capacity = cmd[3];
   19d44:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19d48:	703b      	strb	r3, [r7, #0]
    os_mutex_release(&dev->lock);
   19d4a:	4630      	mov	r0, r6
   19d4c:	f7f0 ff9a 	bl	ac84 <os_mutex_release>
}
   19d50:	2000      	movs	r0, #0
   19d52:	b003      	add	sp, #12
   19d54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

00019d58 <spiflash_read_status>:
{
   19d58:	b570      	push	{r4, r5, r6, lr}
   19d5a:	4604      	mov	r4, r0
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   19d5c:	f100 0540 	add.w	r5, r0, #64	; 0x40
   19d60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19d64:	4628      	mov	r0, r5
   19d66:	f7f0 ffed 	bl	ad44 <os_mutex_pend>
    hal_gpio_write(dev->ss_pin, 0);
   19d6a:	2100      	movs	r1, #0
   19d6c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19d6e:	f000 fca8 	bl	1a6c2 <hal_gpio_write>
    hal_spi_tx_val(dev->spi_num, cmd);
   19d72:	2105      	movs	r1, #5
   19d74:	6a20      	ldr	r0, [r4, #32]
   19d76:	f000 ffc5 	bl	1ad04 <hal_spi_tx_val>
    val = hal_spi_tx_val(dev->spi_num, 0xFF);
   19d7a:	21ff      	movs	r1, #255	; 0xff
   19d7c:	6a20      	ldr	r0, [r4, #32]
   19d7e:	f000 ffc1 	bl	1ad04 <hal_spi_tx_val>
   19d82:	b2c6      	uxtb	r6, r0
    hal_gpio_write(dev->ss_pin, 1);
   19d84:	2101      	movs	r1, #1
   19d86:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19d88:	f000 fc9b 	bl	1a6c2 <hal_gpio_write>
    os_mutex_release(&dev->lock);
   19d8c:	4628      	mov	r0, r5
   19d8e:	f7f0 ff79 	bl	ac84 <os_mutex_release>
}
   19d92:	4630      	mov	r0, r6
   19d94:	bd70      	pop	{r4, r5, r6, pc}

00019d96 <spiflash_device_ready>:
{
   19d96:	b510      	push	{r4, lr}
   19d98:	4604      	mov	r4, r0
    dev->ready = !(spiflash_read_status(dev) & SPIFLASH_STATUS_BUSY);
   19d9a:	f7ff ffdd 	bl	19d58 <spiflash_read_status>
   19d9e:	f080 0001 	eor.w	r0, r0, #1
   19da2:	f000 0001 	and.w	r0, r0, #1
   19da6:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
}
   19daa:	bd10      	pop	{r4, pc}

00019dac <spiflash_wait_ready_till>:
{
   19dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (dev->ready) {
   19db0:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   19db4:	bb73      	cbnz	r3, 19e14 <spiflash_wait_ready_till+0x68>
   19db6:	4604      	mov	r4, r0
   19db8:	4688      	mov	r8, r1
   19dba:	4615      	mov	r5, r2
    if (step_us < MYNEWT_VAL(SPIFLASH_READ_STATUS_INTERVAL)) {
   19dbc:	2a09      	cmp	r2, #9
   19dbe:	d904      	bls.n	19dca <spiflash_wait_ready_till+0x1e>
    } else if (step_us > 1000000) {
   19dc0:	4b15      	ldr	r3, [pc, #84]	; (19e18 <spiflash_wait_ready_till+0x6c>)
   19dc2:	429a      	cmp	r2, r3
   19dc4:	d902      	bls.n	19dcc <spiflash_wait_ready_till+0x20>
        step_us = 1000000;
   19dc6:	4d14      	ldr	r5, [pc, #80]	; (19e18 <spiflash_wait_ready_till+0x6c>)
   19dc8:	e000      	b.n	19dcc <spiflash_wait_ready_till+0x20>
        step_us = MYNEWT_VAL(SPIFLASH_READ_STATUS_INTERVAL);
   19dca:	250a      	movs	r5, #10
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   19dcc:	f104 0740 	add.w	r7, r4, #64	; 0x40
   19dd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19dd4:	4638      	mov	r0, r7
   19dd6:	f7f0 ffb5 	bl	ad44 <os_mutex_pend>
    limit = os_cputime_get32() + os_cputime_usecs_to_ticks(timeout_us);
   19dda:	f001 ffb8 	bl	1bd4e <os_cputime_get32>
   19dde:	4606      	mov	r6, r0
   19de0:	4640      	mov	r0, r8
   19de2:	f001 ffcb 	bl	1bd7c <os_cputime_usecs_to_ticks>
   19de6:	4406      	add	r6, r0
        if (spiflash_device_ready(dev)) {
   19de8:	4620      	mov	r0, r4
   19dea:	f7ff ffd4 	bl	19d96 <spiflash_device_ready>
   19dee:	b950      	cbnz	r0, 19e06 <spiflash_wait_ready_till+0x5a>
        spiflash_delay_us(step_us);
   19df0:	4628      	mov	r0, r5
   19df2:	f7ff ff59 	bl	19ca8 <spiflash_delay_us>
    } while (CPUTIME_LT(os_cputime_get32(), limit));
   19df6:	f001 ffaa 	bl	1bd4e <os_cputime_get32>
   19dfa:	1b80      	subs	r0, r0, r6
   19dfc:	2800      	cmp	r0, #0
   19dfe:	dbf3      	blt.n	19de8 <spiflash_wait_ready_till+0x3c>
    int rc = -1;
   19e00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   19e04:	e000      	b.n	19e08 <spiflash_wait_ready_till+0x5c>
            rc = 0;
   19e06:	2400      	movs	r4, #0
    os_mutex_release(&dev->lock);
   19e08:	4638      	mov	r0, r7
   19e0a:	f7f0 ff3b 	bl	ac84 <os_mutex_release>
}
   19e0e:	4620      	mov	r0, r4
   19e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return 0;
   19e14:	2400      	movs	r4, #0
   19e16:	e7fa      	b.n	19e0e <spiflash_wait_ready_till+0x62>
   19e18:	000f4240 	.word	0x000f4240

00019e1c <spiflash_wait_ready>:
{
   19e1c:	b508      	push	{r3, lr}
    return spiflash_wait_ready_till(dev, timeout_ms * 1000, timeout_ms * 10);
   19e1e:	eb01 0381 	add.w	r3, r1, r1, lsl #2
   19e22:	005a      	lsls	r2, r3, #1
   19e24:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19e28:	fb03 f101 	mul.w	r1, r3, r1
   19e2c:	f7ff ffbe 	bl	19dac <spiflash_wait_ready_till>
}
   19e30:	bd08      	pop	{r3, pc}

00019e32 <hal_spiflash_read>:
{
   19e32:	b5f0      	push	{r4, r5, r6, r7, lr}
   19e34:	b083      	sub	sp, #12
   19e36:	4604      	mov	r4, r0
   19e38:	4617      	mov	r7, r2
   19e3a:	461e      	mov	r6, r3
    uint8_t cmd[] = { SPIFLASH_READ,
   19e3c:	2303      	movs	r3, #3
   19e3e:	f88d 3004 	strb.w	r3, [sp, #4]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
   19e42:	f3c1 4307 	ubfx	r3, r1, #16, #8
    uint8_t cmd[] = { SPIFLASH_READ,
   19e46:	f88d 3005 	strb.w	r3, [sp, #5]
        (uint8_t)(addr >> 16), (uint8_t)(addr >> 8), (uint8_t)(addr) };
   19e4a:	f3c1 2307 	ubfx	r3, r1, #8, #8
    uint8_t cmd[] = { SPIFLASH_READ,
   19e4e:	f88d 3006 	strb.w	r3, [sp, #6]
   19e52:	f88d 1007 	strb.w	r1, [sp, #7]
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   19e56:	f100 0540 	add.w	r5, r0, #64	; 0x40
   19e5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19e5e:	4628      	mov	r0, r5
   19e60:	f7f0 ff70 	bl	ad44 <os_mutex_pend>
    err = spiflash_wait_ready(dev, 100);
   19e64:	2164      	movs	r1, #100	; 0x64
   19e66:	4620      	mov	r0, r4
   19e68:	f7ff ffd8 	bl	19e1c <spiflash_wait_ready>
    if (!err) {
   19e6c:	b900      	cbnz	r0, 19e70 <hal_spiflash_read+0x3e>
        if (len > 0) {
   19e6e:	b92e      	cbnz	r6, 19e7c <hal_spiflash_read+0x4a>
    os_mutex_release(&dev->lock);
   19e70:	4628      	mov	r0, r5
   19e72:	f7f0 ff07 	bl	ac84 <os_mutex_release>
}
   19e76:	2000      	movs	r0, #0
   19e78:	b003      	add	sp, #12
   19e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hal_gpio_write(dev->ss_pin, 0);
   19e7c:	2100      	movs	r1, #0
   19e7e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19e80:	f000 fc1f 	bl	1a6c2 <hal_gpio_write>
            hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
   19e84:	2304      	movs	r3, #4
   19e86:	2200      	movs	r2, #0
   19e88:	eb0d 0103 	add.w	r1, sp, r3
   19e8c:	6a20      	ldr	r0, [r4, #32]
   19e8e:	f000 ff73 	bl	1ad78 <hal_spi_txrx>
            memset(buf, 0xFF, len);
   19e92:	4632      	mov	r2, r6
   19e94:	21ff      	movs	r1, #255	; 0xff
   19e96:	4638      	mov	r0, r7
   19e98:	f7f1 fcb1 	bl	b7fe <memset>
            hal_spi_txrx(dev->spi_num, buf, buf, len);
   19e9c:	4633      	mov	r3, r6
   19e9e:	463a      	mov	r2, r7
   19ea0:	4639      	mov	r1, r7
   19ea2:	6a20      	ldr	r0, [r4, #32]
   19ea4:	f000 ff68 	bl	1ad78 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
   19ea8:	2101      	movs	r1, #1
   19eaa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19eac:	f000 fc09 	bl	1a6c2 <hal_gpio_write>
   19eb0:	e7de      	b.n	19e70 <hal_spiflash_read+0x3e>

00019eb2 <spiflash_write_enable>:
{
   19eb2:	b538      	push	{r3, r4, r5, lr}
   19eb4:	4604      	mov	r4, r0
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   19eb6:	f100 0540 	add.w	r5, r0, #64	; 0x40
   19eba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19ebe:	4628      	mov	r0, r5
   19ec0:	f7f0 ff40 	bl	ad44 <os_mutex_pend>
    hal_gpio_write(dev->ss_pin, 0);
   19ec4:	2100      	movs	r1, #0
   19ec6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19ec8:	f000 fbfb 	bl	1a6c2 <hal_gpio_write>
    hal_spi_tx_val(dev->spi_num, cmd);
   19ecc:	2106      	movs	r1, #6
   19ece:	6a20      	ldr	r0, [r4, #32]
   19ed0:	f000 ff18 	bl	1ad04 <hal_spi_tx_val>
    hal_gpio_write(dev->ss_pin, 1);
   19ed4:	2101      	movs	r1, #1
   19ed6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19ed8:	f000 fbf3 	bl	1a6c2 <hal_gpio_write>
    os_mutex_release(&dev->lock);
   19edc:	4628      	mov	r0, r5
   19ede:	f7f0 fed1 	bl	ac84 <os_mutex_release>
}
   19ee2:	2000      	movs	r0, #0
   19ee4:	bd38      	pop	{r3, r4, r5, pc}
	...

00019ee8 <hal_spiflash_write>:
{
   19ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19eec:	b085      	sub	sp, #20
   19eee:	4605      	mov	r5, r0
   19ef0:	460e      	mov	r6, r1
   19ef2:	4690      	mov	r8, r2
   19ef4:	461f      	mov	r7, r3
    uint8_t cmd[4] = { SPIFLASH_PAGE_PROGRAM };
   19ef6:	2300      	movs	r3, #0
   19ef8:	9303      	str	r3, [sp, #12]
   19efa:	2302      	movs	r3, #2
   19efc:	f88d 300c 	strb.w	r3, [sp, #12]
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   19f00:	f100 0b40 	add.w	fp, r0, #64	; 0x40
   19f04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19f08:	4658      	mov	r0, fp
   19f0a:	f7f0 ff1b 	bl	ad44 <os_mutex_pend>
    if (spiflash_wait_ready(dev, 100) != 0) {
   19f0e:	2164      	movs	r1, #100	; 0x64
   19f10:	4628      	mov	r0, r5
   19f12:	f7ff ff83 	bl	19e1c <spiflash_wait_ready>
   19f16:	9001      	str	r0, [sp, #4]
   19f18:	2800      	cmp	r0, #0
   19f1a:	d148      	bne.n	19fae <hal_spiflash_write+0xc6>
    pp_time_typical = dev->characteristics->tbp1.typical;
   19f1c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   19f1e:	f8d3 9028 	ldr.w	r9, [r3, #40]	; 0x28
    pp_time_maximum = dev->characteristics->tpp.maximum;
   19f22:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
    if (pp_time_maximum < pp_time_typical) {
   19f26:	45d1      	cmp	r9, sl
   19f28:	d83f      	bhi.n	19faa <hal_spiflash_write+0xc2>
    while (len) {
   19f2a:	2f00      	cmp	r7, #0
   19f2c:	d042      	beq.n	19fb4 <hal_spiflash_write+0xcc>
        spiflash_write_enable(dev);
   19f2e:	4628      	mov	r0, r5
   19f30:	f7ff ffbf 	bl	19eb2 <spiflash_write_enable>
        cmd[1] = (uint8_t)(addr >> 16);
   19f34:	f3c6 4307 	ubfx	r3, r6, #16, #8
   19f38:	f88d 300d 	strb.w	r3, [sp, #13]
        cmd[2] = (uint8_t)(addr >> 8);
   19f3c:	f3c6 2307 	ubfx	r3, r6, #8, #8
   19f40:	f88d 300e 	strb.w	r3, [sp, #14]
        cmd[3] = (uint8_t)(addr);
   19f44:	f88d 600f 	strb.w	r6, [sp, #15]
        page_limit = (addr & ~(dev->page_size - 1)) + dev->page_size;
   19f48:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
   19f4a:	425c      	negs	r4, r3
   19f4c:	4034      	ands	r4, r6
   19f4e:	441c      	add	r4, r3
        to_write = page_limit - addr > len ? len :  page_limit - addr;
   19f50:	1ba4      	subs	r4, r4, r6
   19f52:	42bc      	cmp	r4, r7
   19f54:	bf28      	it	cs
   19f56:	463c      	movcs	r4, r7
    hal_gpio_write(dev->ss_pin, 0);
   19f58:	2100      	movs	r1, #0
   19f5a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   19f5c:	f000 fbb1 	bl	1a6c2 <hal_gpio_write>
        hal_spi_txrx(dev->spi_num, cmd, NULL, sizeof cmd);
   19f60:	2304      	movs	r3, #4
   19f62:	2200      	movs	r2, #0
   19f64:	a903      	add	r1, sp, #12
   19f66:	6a28      	ldr	r0, [r5, #32]
   19f68:	f000 ff06 	bl	1ad78 <hal_spi_txrx>
        hal_spi_txrx(dev->spi_num, (void *)u8buf, NULL, to_write);
   19f6c:	4623      	mov	r3, r4
   19f6e:	2200      	movs	r2, #0
   19f70:	4641      	mov	r1, r8
   19f72:	6a28      	ldr	r0, [r5, #32]
   19f74:	f000 ff00 	bl	1ad78 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
   19f78:	2101      	movs	r1, #1
   19f7a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   19f7c:	f000 fba1 	bl	1a6c2 <hal_gpio_write>
        dev->ready = false;
   19f80:	2300      	movs	r3, #0
   19f82:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
        spiflash_delay_us(pp_time_typical);
   19f86:	4648      	mov	r0, r9
   19f88:	f7ff fe8e 	bl	19ca8 <spiflash_delay_us>
        rc = spiflash_wait_ready_till(dev, pp_time_maximum - pp_time_typical,
   19f8c:	ebaa 0109 	sub.w	r1, sl, r9
   19f90:	4a0c      	ldr	r2, [pc, #48]	; (19fc4 <hal_spiflash_write+0xdc>)
   19f92:	fba2 3201 	umull	r3, r2, r2, r1
   19f96:	08d2      	lsrs	r2, r2, #3
   19f98:	4628      	mov	r0, r5
   19f9a:	f7ff ff07 	bl	19dac <spiflash_wait_ready_till>
        if (rc) {
   19f9e:	9001      	str	r0, [sp, #4]
   19fa0:	b940      	cbnz	r0, 19fb4 <hal_spiflash_write+0xcc>
        addr += to_write;
   19fa2:	4426      	add	r6, r4
        u8buf += to_write;
   19fa4:	44a0      	add	r8, r4
        len -= to_write;
   19fa6:	1b3f      	subs	r7, r7, r4
   19fa8:	e7bf      	b.n	19f2a <hal_spiflash_write+0x42>
        pp_time_maximum = pp_time_typical;
   19faa:	46ca      	mov	sl, r9
   19fac:	e7bd      	b.n	19f2a <hal_spiflash_write+0x42>
        rc = -1;
   19fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19fb2:	9301      	str	r3, [sp, #4]
    os_mutex_release(&dev->lock);
   19fb4:	4658      	mov	r0, fp
   19fb6:	f7f0 fe65 	bl	ac84 <os_mutex_release>
}
   19fba:	9801      	ldr	r0, [sp, #4]
   19fbc:	b005      	add	sp, #20
   19fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fc2:	bf00      	nop
   19fc4:	cccccccd 	.word	0xcccccccd

00019fc8 <spiflash_execute_erase>:
{
   19fc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19fcc:	4604      	mov	r4, r0
   19fce:	460f      	mov	r7, r1
   19fd0:	4690      	mov	r8, r2
   19fd2:	461e      	mov	r6, r3
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   19fd4:	f100 0540 	add.w	r5, r0, #64	; 0x40
   19fd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19fdc:	4628      	mov	r0, r5
   19fde:	f7f0 feb1 	bl	ad44 <os_mutex_pend>
    if (spiflash_wait_ready(dev, 100) != 0) {
   19fe2:	2164      	movs	r1, #100	; 0x64
   19fe4:	4620      	mov	r0, r4
   19fe6:	f7ff ff19 	bl	19e1c <spiflash_wait_ready>
   19fea:	bba8      	cbnz	r0, 1a058 <spiflash_execute_erase+0x90>
    spiflash_write_enable(dev);
   19fec:	4620      	mov	r0, r4
   19fee:	f7ff ff60 	bl	19eb2 <spiflash_write_enable>
    spiflash_read_status(dev);
   19ff2:	4620      	mov	r0, r4
   19ff4:	f7ff feb0 	bl	19d58 <spiflash_read_status>
    hal_gpio_write(dev->ss_pin, 0);
   19ff8:	2100      	movs	r1, #0
   19ffa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   19ffc:	f000 fb61 	bl	1a6c2 <hal_gpio_write>
    hal_spi_txrx(dev->spi_num, (void *)buf, NULL, size);
   1a000:	4643      	mov	r3, r8
   1a002:	2200      	movs	r2, #0
   1a004:	4639      	mov	r1, r7
   1a006:	6a20      	ldr	r0, [r4, #32]
   1a008:	f000 feb6 	bl	1ad78 <hal_spi_txrx>
    hal_gpio_write(dev->ss_pin, 1);
   1a00c:	2101      	movs	r1, #1
   1a00e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1a010:	f000 fb57 	bl	1a6c2 <hal_gpio_write>
    dev->ready = false;
   1a014:	2300      	movs	r3, #0
   1a016:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    start_time = os_cputime_get32();
   1a01a:	f001 fe98 	bl	1bd4e <os_cputime_get32>
   1a01e:	4607      	mov	r7, r0
    spiflash_delay_us(delay_spec->typical);
   1a020:	6830      	ldr	r0, [r6, #0]
   1a022:	f7ff fe41 	bl	19ca8 <spiflash_delay_us>
    wait_time_us = os_cputime_ticks_to_usecs(os_cputime_get32() - start_time);
   1a026:	f001 fe92 	bl	1bd4e <os_cputime_get32>
   1a02a:	1bc0      	subs	r0, r0, r7
   1a02c:	f001 feae 	bl	1bd8c <os_cputime_ticks_to_usecs>
    if (wait_time_us > delay_spec->maximum) {
   1a030:	6871      	ldr	r1, [r6, #4]
   1a032:	4281      	cmp	r1, r0
   1a034:	d30e      	bcc.n	1a054 <spiflash_execute_erase+0x8c>
        wait_time_us = delay_spec->maximum - wait_time_us;
   1a036:	1a09      	subs	r1, r1, r0
    rc = spiflash_wait_ready_till(dev, wait_time_us, wait_time_us / 50);
   1a038:	4a09      	ldr	r2, [pc, #36]	; (1a060 <spiflash_execute_erase+0x98>)
   1a03a:	fba2 3201 	umull	r3, r2, r2, r1
   1a03e:	0912      	lsrs	r2, r2, #4
   1a040:	4620      	mov	r0, r4
   1a042:	f7ff feb3 	bl	19dac <spiflash_wait_ready_till>
   1a046:	4604      	mov	r4, r0
    os_mutex_release(&dev->lock);
   1a048:	4628      	mov	r0, r5
   1a04a:	f7f0 fe1b 	bl	ac84 <os_mutex_release>
}
   1a04e:	4620      	mov	r0, r4
   1a050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        wait_time_us = 0;
   1a054:	2100      	movs	r1, #0
   1a056:	e7ef      	b.n	1a038 <spiflash_execute_erase+0x70>
        rc = -1;
   1a058:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1a05c:	e7f4      	b.n	1a048 <spiflash_execute_erase+0x80>
   1a05e:	bf00      	nop
   1a060:	51eb851f 	.word	0x51eb851f

0001a064 <spiflash_erase_cmd>:

static int
spiflash_erase_cmd(struct spiflash_dev *dev, uint8_t cmd, uint32_t addr,
                   const struct spiflash_time_spec *time_spec)
{
   1a064:	b500      	push	{lr}
   1a066:	b083      	sub	sp, #12
    uint8_t buf[4] = { cmd, (uint8_t)(addr >> 16U), (uint8_t)(addr >> 8U),
   1a068:	f88d 1004 	strb.w	r1, [sp, #4]
   1a06c:	f3c2 4107 	ubfx	r1, r2, #16, #8
   1a070:	f88d 1005 	strb.w	r1, [sp, #5]
   1a074:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1a078:	f88d 1006 	strb.w	r1, [sp, #6]
   1a07c:	f88d 2007 	strb.w	r2, [sp, #7]
                       (uint8_t)addr };
    return spiflash_execute_erase(dev, buf, sizeof(buf), time_spec);
   1a080:	2204      	movs	r2, #4
   1a082:	eb0d 0102 	add.w	r1, sp, r2
   1a086:	f7ff ff9f 	bl	19fc8 <spiflash_execute_erase>

}
   1a08a:	b003      	add	sp, #12
   1a08c:	f85d fb04 	ldr.w	pc, [sp], #4

0001a090 <spiflash_sector_erase>:

int
spiflash_sector_erase(struct spiflash_dev *dev, uint32_t addr)
{
   1a090:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_SECTOR_ERASE, addr,
   1a092:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1a094:	460a      	mov	r2, r1
   1a096:	2120      	movs	r1, #32
   1a098:	f7ff ffe4 	bl	1a064 <spiflash_erase_cmd>
                              &dev->characteristics->tse);
}
   1a09c:	bd08      	pop	{r3, pc}

0001a09e <hal_spiflash_erase_sector>:
{
   1a09e:	b508      	push	{r3, lr}
    return spiflash_sector_erase(dev, addr);
   1a0a0:	f7ff fff6 	bl	1a090 <spiflash_sector_erase>
}
   1a0a4:	bd08      	pop	{r3, pc}

0001a0a6 <spiflash_block_32k_erase>:

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
int
spiflash_block_32k_erase(struct spiflash_dev *dev, uint32_t addr)
{
   1a0a6:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
                              &dev->characteristics->tbe1);
   1a0a8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_32KB, addr,
   1a0aa:	3308      	adds	r3, #8
   1a0ac:	460a      	mov	r2, r1
   1a0ae:	2152      	movs	r1, #82	; 0x52
   1a0b0:	f7ff ffd8 	bl	1a064 <spiflash_erase_cmd>
}
   1a0b4:	bd08      	pop	{r3, pc}

0001a0b6 <spiflash_block_64k_erase>:
#endif

#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
int
spiflash_block_64k_erase(struct spiflash_dev *dev, uint32_t addr)
{
   1a0b6:	b508      	push	{r3, lr}
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
                              &dev->characteristics->tbe2);
   1a0b8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_erase_cmd(dev, SPIFLASH_BLOCK_ERASE_64KB, addr,
   1a0ba:	3310      	adds	r3, #16
   1a0bc:	460a      	mov	r2, r1
   1a0be:	21d8      	movs	r1, #216	; 0xd8
   1a0c0:	f7ff ffd0 	bl	1a064 <spiflash_erase_cmd>
}
   1a0c4:	bd08      	pop	{r3, pc}

0001a0c6 <spiflash_chip_erase>:
#endif

int
spiflash_chip_erase(struct spiflash_dev *dev)
{
   1a0c6:	b500      	push	{lr}
   1a0c8:	b083      	sub	sp, #12
    uint8_t buf[1] = { SPIFLASH_CHIP_ERASE };
   1a0ca:	a902      	add	r1, sp, #8
   1a0cc:	2360      	movs	r3, #96	; 0x60
   1a0ce:	f801 3d04 	strb.w	r3, [r1, #-4]!

    return spiflash_execute_erase(dev, buf, sizeof(buf),
                                  &dev->characteristics->tce);
   1a0d2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return spiflash_execute_erase(dev, buf, sizeof(buf),
   1a0d4:	3318      	adds	r3, #24
   1a0d6:	2201      	movs	r2, #1
   1a0d8:	f7ff ff76 	bl	19fc8 <spiflash_execute_erase>
}
   1a0dc:	b003      	add	sp, #12
   1a0de:	f85d fb04 	ldr.w	pc, [sp], #4

0001a0e2 <spiflash_erase>:

int
spiflash_erase(struct spiflash_dev *dev, uint32_t address, uint32_t size)
{
   1a0e2:	b570      	push	{r4, r5, r6, lr}
   1a0e4:	4606      	mov	r6, r0
   1a0e6:	4615      	mov	r5, r2
    int rc = 0;

    if (address == 0 && size == dev->hal.hf_size) {
   1a0e8:	460c      	mov	r4, r1
   1a0ea:	b911      	cbnz	r1, 1a0f2 <spiflash_erase+0x10>
   1a0ec:	6883      	ldr	r3, [r0, #8]
   1a0ee:	4293      	cmp	r3, r2
   1a0f0:	d005      	beq.n	1a0fe <spiflash_erase+0x1c>
        return spiflash_chip_erase(dev);
    }
    address &= ~0xFFFU;
   1a0f2:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
   1a0f6:	f024 040f 	bic.w	r4, r4, #15
    int rc = 0;
   1a0fa:	2300      	movs	r3, #0
    while (size) {
   1a0fc:	e01c      	b.n	1a138 <spiflash_erase+0x56>
        return spiflash_chip_erase(dev);
   1a0fe:	f7ff ffe2 	bl	1a0c6 <spiflash_chip_erase>
   1a102:	4603      	mov	r3, r0
   1a104:	e010      	b.n	1a128 <spiflash_erase+0x46>
#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_64BK)
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
            /* 64 KB erase if possible */
            rc = spiflash_block_64k_erase(dev, address);
   1a106:	4621      	mov	r1, r4
   1a108:	4630      	mov	r0, r6
   1a10a:	f7ff ffd4 	bl	1a0b6 <spiflash_block_64k_erase>
            if (rc) {
   1a10e:	4603      	mov	r3, r0
   1a110:	b950      	cbnz	r0, 1a128 <spiflash_erase+0x46>
                goto err;
            }
            address += 0x10000;
   1a112:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
            size -= 0x10000;
   1a116:	f5a5 3580 	sub.w	r5, r5, #65536	; 0x10000
            continue;
   1a11a:	e00d      	b.n	1a138 <spiflash_erase+0x56>
        }
#endif
#if MYNEWT_VAL(SPIFLASH_BLOCK_ERASE_32BK)
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
            /* 32 KB erase if possible */
            rc = spiflash_block_32k_erase(dev, address);
   1a11c:	4621      	mov	r1, r4
   1a11e:	4630      	mov	r0, r6
   1a120:	f7ff ffc1 	bl	1a0a6 <spiflash_block_32k_erase>
            if (rc) {
   1a124:	4603      	mov	r3, r0
   1a126:	b108      	cbz	r0, 1a12c <spiflash_erase+0x4a>
            size = 0;
        }
    }
err:
    return rc;
}
   1a128:	4618      	mov	r0, r3
   1a12a:	bd70      	pop	{r4, r5, r6, pc}
            address += 0x8000;
   1a12c:	f504 4400 	add.w	r4, r4, #32768	; 0x8000
            size -= 0x8000;
   1a130:	f5a5 4500 	sub.w	r5, r5, #32768	; 0x8000
            continue;
   1a134:	e000      	b.n	1a138 <spiflash_erase+0x56>
            size = 0;
   1a136:	2500      	movs	r5, #0
    while (size) {
   1a138:	2d00      	cmp	r5, #0
   1a13a:	d0f5      	beq.n	1a128 <spiflash_erase+0x46>
        if ((address & 0xFFFFU) == 0 && (size >= 0x10000)) {
   1a13c:	b2a3      	uxth	r3, r4
   1a13e:	b913      	cbnz	r3, 1a146 <spiflash_erase+0x64>
   1a140:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   1a144:	d2df      	bcs.n	1a106 <spiflash_erase+0x24>
        if ((address & 0x7FFFU) == 0 && (size >= 0x8000)) {
   1a146:	f3c4 030e 	ubfx	r3, r4, #0, #15
   1a14a:	b913      	cbnz	r3, 1a152 <spiflash_erase+0x70>
   1a14c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1a150:	d2e4      	bcs.n	1a11c <spiflash_erase+0x3a>
        rc = spiflash_sector_erase(dev, address);
   1a152:	4621      	mov	r1, r4
   1a154:	4630      	mov	r0, r6
   1a156:	f7ff ff9b 	bl	1a090 <spiflash_sector_erase>
        if (rc) {
   1a15a:	4603      	mov	r3, r0
   1a15c:	2800      	cmp	r0, #0
   1a15e:	d1e3      	bne.n	1a128 <spiflash_erase+0x46>
        address += MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
   1a160:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
        if (size > MYNEWT_VAL(SPIFLASH_SECTOR_SIZE)) {
   1a164:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   1a168:	d9e5      	bls.n	1a136 <spiflash_erase+0x54>
            size -= MYNEWT_VAL(SPIFLASH_SECTOR_SIZE);
   1a16a:	f5a5 5580 	sub.w	r5, r5, #4096	; 0x1000
   1a16e:	e7e3      	b.n	1a138 <spiflash_erase+0x56>

0001a170 <hal_spiflash_erase>:
{
   1a170:	b508      	push	{r3, lr}
    return spiflash_erase(dev, address, size);
   1a172:	f7ff ffb6 	bl	1a0e2 <spiflash_erase>
}
   1a176:	bd08      	pop	{r3, pc}

0001a178 <spiflash_identify>:

void blink_backlight(int pattern_id, int repetitions);  ////  Defined in blink.c

int
spiflash_identify(struct spiflash_dev *dev)
{
   1a178:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a17a:	b083      	sub	sp, #12
   1a17c:	4604      	mov	r4, r0
    int i;
    int j;
    uint8_t manufacturer = 0;
   1a17e:	2300      	movs	r3, #0
   1a180:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t memory_type = 0;
   1a184:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t capacity = 0;
   1a188:	ad02      	add	r5, sp, #8
   1a18a:	f805 3d03 	strb.w	r3, [r5, #-3]!
    os_mutex_pend(&dev->lock, OS_TIMEOUT_NEVER);
   1a18e:	f100 0740 	add.w	r7, r0, #64	; 0x40
   1a192:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a196:	4638      	mov	r0, r7
   1a198:	f7f0 fdd4 	bl	ad44 <os_mutex_pend>

    spiflash_lock(dev);

    /* Only one chip specified, no need for search*/
    if ((sizeof(supported_chips) / sizeof(supported_chips[0])) == 2) {
        supported_chips[0].fc_release_power_down(dev);
   1a19c:	4e16      	ldr	r6, [pc, #88]	; (1a1f8 <spiflash_identify+0x80>)
   1a19e:	6873      	ldr	r3, [r6, #4]
   1a1a0:	4620      	mov	r0, r4
   1a1a2:	4798      	blx	r3
        spiflash_read_jedec_id(dev, &manufacturer, &memory_type, &capacity);
   1a1a4:	462b      	mov	r3, r5
   1a1a6:	f10d 0206 	add.w	r2, sp, #6
   1a1aa:	f10d 0107 	add.w	r1, sp, #7
   1a1ae:	4620      	mov	r0, r4
   1a1b0:	f7ff fd92 	bl	19cd8 <spiflash_read_jedec_id>

        ////Begin
        if (manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
   1a1b4:	7832      	ldrb	r2, [r6, #0]
   1a1b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
        /* If BSP defined SpiFlash manufacturer or memory type does not
         * match SpiFlash is most likely not connected, connected to
         * different pins, or of different type.
         * It is unlikely that flash depended packaged will work correctly.
         */
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
   1a1ba:	429a      	cmp	r2, r3
   1a1bc:	d111      	bne.n	1a1e2 <spiflash_identify+0x6a>
   1a1be:	7872      	ldrb	r2, [r6, #1]
   1a1c0:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1a1c4:	429a      	cmp	r2, r3
   1a1c6:	d10c      	bne.n	1a1e2 <spiflash_identify+0x6a>
   1a1c8:	78b2      	ldrb	r2, [r6, #2]
   1a1ca:	f89d 3005 	ldrb.w	r3, [sp, #5]
   1a1ce:	429a      	cmp	r2, r3
   1a1d0:	d107      	bne.n	1a1e2 <spiflash_identify+0x6a>
            memory_type != supported_chips[0].fc_jedec_id.ji_type ||
            capacity != supported_chips[0].fc_jedec_id.ji_capacity) {
            rc = -1;
            goto err;
        }
        dev->flash_chip = &supported_chips[0];
   1a1d2:	4b09      	ldr	r3, [pc, #36]	; (1a1f8 <spiflash_identify+0x80>)
   1a1d4:	63a3      	str	r3, [r4, #56]	; 0x38
    os_mutex_release(&dev->lock);
   1a1d6:	4638      	mov	r0, r7
   1a1d8:	f7f0 fd54 	bl	ac84 <os_mutex_release>
    }
err:
    spiflash_unlock(dev);

    return rc;
}
   1a1dc:	2000      	movs	r0, #0
   1a1de:	b003      	add	sp, #12
   1a1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        assert(manufacturer == supported_chips[0].fc_jedec_id.ji_manufacturer &&
   1a1e2:	f7ed ffed 	bl	81c0 <hal_debugger_connected>
   1a1e6:	b100      	cbz	r0, 1a1ea <spiflash_identify+0x72>
   1a1e8:	be01      	bkpt	0x0001
   1a1ea:	2300      	movs	r3, #0
   1a1ec:	461a      	mov	r2, r3
   1a1ee:	4619      	mov	r1, r3
   1a1f0:	4618      	mov	r0, r3
   1a1f2:	f7ef fb7b 	bl	98ec <__assert_func>
   1a1f6:	bf00      	nop
   1a1f8:	20000320 	.word	0x20000320

0001a1fc <hal_spiflash_init>:

static int
hal_spiflash_init(const struct hal_flash *hal_flash_dev)
{
   1a1fc:	b510      	push	{r4, lr}
   1a1fe:	4604      	mov	r4, r0
    os_callout_init(&dev->apd_tmo_co, os_eventq_dflt_get(),
                    spiflash_apd_tmo_func, dev);
#endif

#if !MYNEWT_VAL(BUS_DRIVER_PRESENT)
    hal_gpio_init_out(dev->ss_pin, 1);
   1a200:	2101      	movs	r1, #1
   1a202:	6a80      	ldr	r0, [r0, #40]	; 0x28
   1a204:	f000 fa41 	bl	1a68a <hal_gpio_init_out>

    (void)hal_spi_disable(dev->spi_num);
   1a208:	6a20      	ldr	r0, [r4, #32]
   1a20a:	f000 fd13 	bl	1ac34 <hal_spi_disable>

    rc = hal_spi_config(dev->spi_num, &dev->spi_settings);
   1a20e:	f104 0118 	add.w	r1, r4, #24
   1a212:	6a20      	ldr	r0, [r4, #32]
   1a214:	f000 fccc 	bl	1abb0 <hal_spi_config>
    if (rc) {
   1a218:	4603      	mov	r3, r0
   1a21a:	b108      	cbz	r0, 1a220 <hal_spiflash_init+0x24>
    hal_spi_enable(dev->spi_num);
#endif
    rc = spiflash_identify(dev);

    return rc;
}
   1a21c:	4618      	mov	r0, r3
   1a21e:	bd10      	pop	{r4, pc}
    hal_spi_set_txrx_cb(dev->spi_num, NULL, NULL);
   1a220:	2200      	movs	r2, #0
   1a222:	4611      	mov	r1, r2
   1a224:	6a20      	ldr	r0, [r4, #32]
   1a226:	f000 fd91 	bl	1ad4c <hal_spi_set_txrx_cb>
    hal_spi_enable(dev->spi_num);
   1a22a:	6a20      	ldr	r0, [r4, #32]
   1a22c:	f000 fcdc 	bl	1abe8 <hal_spi_enable>
    rc = spiflash_identify(dev);
   1a230:	4620      	mov	r0, r4
   1a232:	f7ff ffa1 	bl	1a178 <spiflash_identify>
   1a236:	4603      	mov	r3, r0
    return rc;
   1a238:	e7f0      	b.n	1a21c <hal_spiflash_init+0x20>

0001a23a <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1a23a:	6843      	ldr	r3, [r0, #4]
   1a23c:	428b      	cmp	r3, r1
   1a23e:	d808      	bhi.n	1a252 <hal_flash_check_addr+0x18>
   1a240:	6882      	ldr	r2, [r0, #8]
   1a242:	4413      	add	r3, r2
   1a244:	428b      	cmp	r3, r1
   1a246:	d301      	bcc.n	1a24c <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1a248:	2000      	movs	r0, #0
}
   1a24a:	4770      	bx	lr
        return SYS_EINVAL;
   1a24c:	f06f 0001 	mvn.w	r0, #1
   1a250:	4770      	bx	lr
   1a252:	f06f 0001 	mvn.w	r0, #1
   1a256:	4770      	bx	lr

0001a258 <hal_flash_init>:
{
   1a258:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1a25a:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1a25c:	462c      	mov	r4, r5
   1a25e:	e001      	b.n	1a264 <hal_flash_init+0xc>
   1a260:	3401      	adds	r4, #1
   1a262:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1a264:	4620      	mov	r0, r4
   1a266:	f7ff fced 	bl	19c44 <hal_bsp_flash_dev>
        if (!hf) {
   1a26a:	b138      	cbz	r0, 1a27c <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1a26c:	6802      	ldr	r2, [r0, #0]
   1a26e:	6952      	ldr	r2, [r2, #20]
   1a270:	4790      	blx	r2
   1a272:	2800      	cmp	r0, #0
   1a274:	d0f4      	beq.n	1a260 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1a276:	f06f 0504 	mvn.w	r5, #4
   1a27a:	e7f1      	b.n	1a260 <hal_flash_init+0x8>
}
   1a27c:	4628      	mov	r0, r5
   1a27e:	bd38      	pop	{r3, r4, r5, pc}

0001a280 <hal_flash_align>:
{
   1a280:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   1a282:	f7ff fcdf 	bl	19c44 <hal_bsp_flash_dev>
    if (!hf) {
   1a286:	b108      	cbz	r0, 1a28c <hal_flash_align+0xc>
    return hf->hf_align;
   1a288:	7c00      	ldrb	r0, [r0, #16]
}
   1a28a:	bd08      	pop	{r3, pc}
        return 1;
   1a28c:	2001      	movs	r0, #1
   1a28e:	e7fc      	b.n	1a28a <hal_flash_align+0xa>

0001a290 <hal_flash_erased_val>:
{
   1a290:	b508      	push	{r3, lr}
    hf = hal_bsp_flash_dev(flash_id);
   1a292:	f7ff fcd7 	bl	19c44 <hal_bsp_flash_dev>
    if (!hf) {
   1a296:	b108      	cbz	r0, 1a29c <hal_flash_erased_val+0xc>
    return hf->hf_erased_val;
   1a298:	7d00      	ldrb	r0, [r0, #20]
}
   1a29a:	bd08      	pop	{r3, pc}
        return 1;
   1a29c:	2001      	movs	r0, #1
   1a29e:	e7fc      	b.n	1a29a <hal_flash_erased_val+0xa>

0001a2a0 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1a2a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2a4:	460d      	mov	r5, r1
   1a2a6:	4690      	mov	r8, r2
   1a2a8:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1a2aa:	f7ff fccb 	bl	19c44 <hal_bsp_flash_dev>
    if (!hf) {
   1a2ae:	b1c0      	cbz	r0, 1a2e2 <hal_flash_read+0x42>
   1a2b0:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1a2b2:	4629      	mov	r1, r5
   1a2b4:	f7ff ffc1 	bl	1a23a <hal_flash_check_addr>
   1a2b8:	b9b0      	cbnz	r0, 1a2e8 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1a2ba:	19a9      	adds	r1, r5, r6
   1a2bc:	4620      	mov	r0, r4
   1a2be:	f7ff ffbc 	bl	1a23a <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1a2c2:	b9a0      	cbnz	r0, 1a2ee <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1a2c4:	6823      	ldr	r3, [r4, #0]
   1a2c6:	681f      	ldr	r7, [r3, #0]
   1a2c8:	4633      	mov	r3, r6
   1a2ca:	4642      	mov	r2, r8
   1a2cc:	4629      	mov	r1, r5
   1a2ce:	4620      	mov	r0, r4
   1a2d0:	47b8      	blx	r7
    if (rc != 0) {
   1a2d2:	4603      	mov	r3, r0
   1a2d4:	b910      	cbnz	r0, 1a2dc <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1a2d6:	4618      	mov	r0, r3
   1a2d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1a2dc:	f06f 0304 	mvn.w	r3, #4
   1a2e0:	e7f9      	b.n	1a2d6 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1a2e2:	f06f 0301 	mvn.w	r3, #1
   1a2e6:	e7f6      	b.n	1a2d6 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1a2e8:	f06f 0301 	mvn.w	r3, #1
   1a2ec:	e7f3      	b.n	1a2d6 <hal_flash_read+0x36>
   1a2ee:	f06f 0301 	mvn.w	r3, #1
   1a2f2:	e7f0      	b.n	1a2d6 <hal_flash_read+0x36>

0001a2f4 <hal_flash_write>:
#endif

int
hal_flash_write(uint8_t id, uint32_t address, const void *src,
  uint32_t num_bytes)
{
   1a2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a2f8:	4605      	mov	r5, r0
   1a2fa:	460e      	mov	r6, r1
   1a2fc:	4690      	mov	r8, r2
   1a2fe:	461f      	mov	r7, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1a300:	f7ff fca0 	bl	19c44 <hal_bsp_flash_dev>
    if (!hf) {
   1a304:	b310      	cbz	r0, 1a34c <hal_flash_write+0x58>
   1a306:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1a308:	4631      	mov	r1, r6
   1a30a:	f7ff ff96 	bl	1a23a <hal_flash_check_addr>
   1a30e:	bb00      	cbnz	r0, 1a352 <hal_flash_write+0x5e>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1a310:	19f1      	adds	r1, r6, r7
   1a312:	4620      	mov	r0, r4
   1a314:	f7ff ff91 	bl	1a23a <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1a318:	b9f0      	cbnz	r0, 1a358 <hal_flash_write+0x64>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   1a31a:	08eb      	lsrs	r3, r5, #3
   1a31c:	4a11      	ldr	r2, [pc, #68]	; (1a364 <hal_flash_write+0x70>)
   1a31e:	5cd3      	ldrb	r3, [r2, r3]
   1a320:	f005 0507 	and.w	r5, r5, #7
   1a324:	fa43 f505 	asr.w	r5, r3, r5
   1a328:	f015 0f01 	tst.w	r5, #1
   1a32c:	d117      	bne.n	1a35e <hal_flash_write+0x6a>
        return SYS_EACCES;
    }

    rc = hf->hf_itf->hff_write(hf, address, src, num_bytes);
   1a32e:	6823      	ldr	r3, [r4, #0]
   1a330:	685d      	ldr	r5, [r3, #4]
   1a332:	463b      	mov	r3, r7
   1a334:	4642      	mov	r2, r8
   1a336:	4631      	mov	r1, r6
   1a338:	4620      	mov	r0, r4
   1a33a:	47a8      	blx	r5
    if (rc != 0) {
   1a33c:	4603      	mov	r3, r0
   1a33e:	b910      	cbnz	r0, 1a346 <hal_flash_write+0x52>
#if MYNEWT_VAL(HAL_FLASH_VERIFY_WRITES)
    assert(hal_flash_cmp(hf, address, src, num_bytes) == 0);
#endif

    return 0;
}
   1a340:	4618      	mov	r0, r3
   1a342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1a346:	f06f 0304 	mvn.w	r3, #4
   1a34a:	e7f9      	b.n	1a340 <hal_flash_write+0x4c>
        return SYS_EINVAL;
   1a34c:	f06f 0301 	mvn.w	r3, #1
   1a350:	e7f6      	b.n	1a340 <hal_flash_write+0x4c>
        return SYS_EINVAL;
   1a352:	f06f 0301 	mvn.w	r3, #1
   1a356:	e7f3      	b.n	1a340 <hal_flash_write+0x4c>
   1a358:	f06f 0301 	mvn.w	r3, #1
   1a35c:	e7f0      	b.n	1a340 <hal_flash_write+0x4c>
        return SYS_EACCES;
   1a35e:	f06f 0306 	mvn.w	r3, #6
   1a362:	e7ed      	b.n	1a340 <hal_flash_write+0x4c>
   1a364:	20008064 	.word	0x20008064

0001a368 <hal_flash_erase>:
    return 0;
}

int
hal_flash_erase(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   1a368:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a36c:	b083      	sub	sp, #12
   1a36e:	4605      	mov	r5, r0
   1a370:	460e      	mov	r6, r1
   1a372:	4690      	mov	r8, r2
    uint32_t end;
    uint32_t end_area;
    int i;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1a374:	f7ff fc66 	bl	19c44 <hal_bsp_flash_dev>
    if (!hf) {
   1a378:	2800      	cmp	r0, #0
   1a37a:	d050      	beq.n	1a41e <hal_flash_erase+0xb6>
   1a37c:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1a37e:	4631      	mov	r1, r6
   1a380:	f7ff ff5b 	bl	1a23a <hal_flash_check_addr>
   1a384:	2800      	cmp	r0, #0
   1a386:	d14d      	bne.n	1a424 <hal_flash_erase+0xbc>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1a388:	eb06 0708 	add.w	r7, r6, r8
   1a38c:	4639      	mov	r1, r7
   1a38e:	4620      	mov	r0, r4
   1a390:	f7ff ff53 	bl	1a23a <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1a394:	2800      	cmp	r0, #0
   1a396:	d148      	bne.n	1a42a <hal_flash_erase+0xc2>
        return SYS_EINVAL;
    }

    if (protected_flash[id / 8] & (1 << (id & 7))) {
   1a398:	08eb      	lsrs	r3, r5, #3
   1a39a:	4a28      	ldr	r2, [pc, #160]	; (1a43c <hal_flash_erase+0xd4>)
   1a39c:	5cd3      	ldrb	r3, [r2, r3]
   1a39e:	f005 0507 	and.w	r5, r5, #7
   1a3a2:	fa43 f505 	asr.w	r5, r3, r5
   1a3a6:	f015 0501 	ands.w	r5, r5, #1
   1a3aa:	d141      	bne.n	1a430 <hal_flash_erase+0xc8>
        return SYS_EACCES;
    }

    end = address + num_bytes;
    if (end <= address) {
   1a3ac:	42b7      	cmp	r7, r6
   1a3ae:	d942      	bls.n	1a436 <hal_flash_erase+0xce>
         * Check for wrap-around.
         */
        return SYS_EINVAL;
    }

    if (hf->hf_itf->hff_erase) {
   1a3b0:	6823      	ldr	r3, [r4, #0]
   1a3b2:	699b      	ldr	r3, [r3, #24]
   1a3b4:	2b00      	cmp	r3, #0
   1a3b6:	d030      	beq.n	1a41a <hal_flash_erase+0xb2>
        hf->hf_itf->hff_erase(hf, address, num_bytes);
   1a3b8:	4642      	mov	r2, r8
   1a3ba:	4631      	mov	r1, r6
   1a3bc:	4620      	mov	r0, r4
   1a3be:	4798      	blx	r3
#endif
            }
        }
    }
    return 0;
}
   1a3c0:	4628      	mov	r0, r5
   1a3c2:	b003      	add	sp, #12
   1a3c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            assert(rc == 0);
   1a3c8:	f7ed fefa 	bl	81c0 <hal_debugger_connected>
   1a3cc:	b100      	cbz	r0, 1a3d0 <hal_flash_erase+0x68>
   1a3ce:	be01      	bkpt	0x0001
   1a3d0:	2300      	movs	r3, #0
   1a3d2:	461a      	mov	r2, r3
   1a3d4:	4619      	mov	r1, r3
   1a3d6:	4618      	mov	r0, r3
   1a3d8:	f7ef fa88 	bl	98ec <__assert_func>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   1a3dc:	f108 0801 	add.w	r8, r8, #1
   1a3e0:	68e3      	ldr	r3, [r4, #12]
   1a3e2:	4543      	cmp	r3, r8
   1a3e4:	ddec      	ble.n	1a3c0 <hal_flash_erase+0x58>
            rc = hf->hf_itf->hff_sector_info(hf, i, &start, &size);
   1a3e6:	6823      	ldr	r3, [r4, #0]
   1a3e8:	f8d3 900c 	ldr.w	r9, [r3, #12]
   1a3ec:	466b      	mov	r3, sp
   1a3ee:	aa01      	add	r2, sp, #4
   1a3f0:	4641      	mov	r1, r8
   1a3f2:	4620      	mov	r0, r4
   1a3f4:	47c8      	blx	r9
            assert(rc == 0);
   1a3f6:	2800      	cmp	r0, #0
   1a3f8:	d1e6      	bne.n	1a3c8 <hal_flash_erase+0x60>
            end_area = start + size;
   1a3fa:	9901      	ldr	r1, [sp, #4]
   1a3fc:	9b00      	ldr	r3, [sp, #0]
   1a3fe:	440b      	add	r3, r1
            if (address < end_area && end > start) {
   1a400:	429e      	cmp	r6, r3
   1a402:	d2eb      	bcs.n	1a3dc <hal_flash_erase+0x74>
   1a404:	428f      	cmp	r7, r1
   1a406:	d9e9      	bls.n	1a3dc <hal_flash_erase+0x74>
                if (hf->hf_itf->hff_erase_sector(hf, start)) {
   1a408:	6823      	ldr	r3, [r4, #0]
   1a40a:	689b      	ldr	r3, [r3, #8]
   1a40c:	4620      	mov	r0, r4
   1a40e:	4798      	blx	r3
   1a410:	2800      	cmp	r0, #0
   1a412:	d0e3      	beq.n	1a3dc <hal_flash_erase+0x74>
                    return SYS_EIO;
   1a414:	f06f 0504 	mvn.w	r5, #4
   1a418:	e7d2      	b.n	1a3c0 <hal_flash_erase+0x58>
        for (i = 0; i < hf->hf_sector_cnt; i++) {
   1a41a:	46a8      	mov	r8, r5
   1a41c:	e7e0      	b.n	1a3e0 <hal_flash_erase+0x78>
        return SYS_EINVAL;
   1a41e:	f06f 0501 	mvn.w	r5, #1
   1a422:	e7cd      	b.n	1a3c0 <hal_flash_erase+0x58>
        return SYS_EINVAL;
   1a424:	f06f 0501 	mvn.w	r5, #1
   1a428:	e7ca      	b.n	1a3c0 <hal_flash_erase+0x58>
   1a42a:	f06f 0501 	mvn.w	r5, #1
   1a42e:	e7c7      	b.n	1a3c0 <hal_flash_erase+0x58>
        return SYS_EACCES;
   1a430:	f06f 0506 	mvn.w	r5, #6
   1a434:	e7c4      	b.n	1a3c0 <hal_flash_erase+0x58>
        return SYS_EINVAL;
   1a436:	f06f 0501 	mvn.w	r5, #1
   1a43a:	e7c1      	b.n	1a3c0 <hal_flash_erase+0x58>
   1a43c:	20008064 	.word	0x20008064

0001a440 <hal_flash_is_erased>:

int
hal_flash_is_erased(const struct hal_flash *hf, uint32_t address, void *dst,
        uint32_t num_bytes)
{
   1a440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a442:	4604      	mov	r4, r0
   1a444:	4616      	mov	r6, r2
   1a446:	461d      	mov	r5, r3
    uint8_t *buf;
    int rc;

    buf = dst;

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1a448:	6807      	ldr	r7, [r0, #0]
   1a44a:	683f      	ldr	r7, [r7, #0]
   1a44c:	47b8      	blx	r7
    if (rc != 0) {
   1a44e:	b960      	cbnz	r0, 1a46a <hal_flash_is_erased+0x2a>
   1a450:	4607      	mov	r7, r0
        return SYS_EIO;
    }

    for (i = 0; i < num_bytes; i++) {
   1a452:	2300      	movs	r3, #0
   1a454:	42ab      	cmp	r3, r5
   1a456:	d205      	bcs.n	1a464 <hal_flash_is_erased+0x24>
        if (buf[i] != hf->hf_erased_val) {
   1a458:	5cf1      	ldrb	r1, [r6, r3]
   1a45a:	7d22      	ldrb	r2, [r4, #20]
   1a45c:	4291      	cmp	r1, r2
   1a45e:	d102      	bne.n	1a466 <hal_flash_is_erased+0x26>
    for (i = 0; i < num_bytes; i++) {
   1a460:	3301      	adds	r3, #1
   1a462:	e7f7      	b.n	1a454 <hal_flash_is_erased+0x14>
            return 0;
        }
    }
    return 1;
   1a464:	2701      	movs	r7, #1
}
   1a466:	4638      	mov	r0, r7
   1a468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SYS_EIO;
   1a46a:	f06f 0704 	mvn.w	r7, #4
   1a46e:	e7fa      	b.n	1a466 <hal_flash_is_erased+0x26>

0001a470 <hal_flash_isempty>:

int
hal_flash_isempty(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1a470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a474:	460d      	mov	r5, r1
   1a476:	4690      	mov	r8, r2
   1a478:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1a47a:	f7ff fbe3 	bl	19c44 <hal_bsp_flash_dev>
    if (!hf) {
   1a47e:	b1f8      	cbz	r0, 1a4c0 <hal_flash_isempty+0x50>
   1a480:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1a482:	4629      	mov	r1, r5
   1a484:	f7ff fed9 	bl	1a23a <hal_flash_check_addr>
   1a488:	b9e8      	cbnz	r0, 1a4c6 <hal_flash_isempty+0x56>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1a48a:	19a9      	adds	r1, r5, r6
   1a48c:	4620      	mov	r0, r4
   1a48e:	f7ff fed4 	bl	1a23a <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1a492:	b9d8      	cbnz	r0, 1a4cc <hal_flash_isempty+0x5c>
        return SYS_EINVAL;
    }
    if (hf->hf_itf->hff_is_empty) {
   1a494:	6823      	ldr	r3, [r4, #0]
   1a496:	691f      	ldr	r7, [r3, #16]
   1a498:	b15f      	cbz	r7, 1a4b2 <hal_flash_isempty+0x42>
        rc = hf->hf_itf->hff_is_empty(hf, address, dst, num_bytes);
   1a49a:	4633      	mov	r3, r6
   1a49c:	4642      	mov	r2, r8
   1a49e:	4629      	mov	r1, r5
   1a4a0:	4620      	mov	r0, r4
   1a4a2:	47b8      	blx	r7
        if (rc < 0) {
   1a4a4:	2800      	cmp	r0, #0
   1a4a6:	db01      	blt.n	1a4ac <hal_flash_isempty+0x3c>
            return rc;
        }
    } else {
        return hal_flash_is_erased(hf, address, dst, num_bytes);
    }
}
   1a4a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return SYS_EIO;
   1a4ac:	f06f 0004 	mvn.w	r0, #4
   1a4b0:	e7fa      	b.n	1a4a8 <hal_flash_isempty+0x38>
        return hal_flash_is_erased(hf, address, dst, num_bytes);
   1a4b2:	4633      	mov	r3, r6
   1a4b4:	4642      	mov	r2, r8
   1a4b6:	4629      	mov	r1, r5
   1a4b8:	4620      	mov	r0, r4
   1a4ba:	f7ff ffc1 	bl	1a440 <hal_flash_is_erased>
   1a4be:	e7f3      	b.n	1a4a8 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   1a4c0:	f06f 0001 	mvn.w	r0, #1
   1a4c4:	e7f0      	b.n	1a4a8 <hal_flash_isempty+0x38>
        return SYS_EINVAL;
   1a4c6:	f06f 0001 	mvn.w	r0, #1
   1a4ca:	e7ed      	b.n	1a4a8 <hal_flash_isempty+0x38>
   1a4cc:	f06f 0001 	mvn.w	r0, #1
   1a4d0:	e7ea      	b.n	1a4a8 <hal_flash_isempty+0x38>

0001a4d2 <hal_flash_isempty_no_buf>:

int
hal_flash_isempty_no_buf(uint8_t id, uint32_t address, uint32_t num_bytes)
{
   1a4d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a4d4:	b085      	sub	sp, #20
   1a4d6:	4607      	mov	r7, r0
   1a4d8:	460e      	mov	r6, r1
   1a4da:	4615      	mov	r5, r2
    uint32_t blksz;
    uint32_t rem;
    uint32_t off;
    int empty;

    for (off = 0; off < num_bytes; off += sizeof buf) {
   1a4dc:	2400      	movs	r4, #0
   1a4de:	e007      	b.n	1a4f0 <hal_flash_isempty_no_buf+0x1e>
        blksz = sizeof buf;
        if (blksz > rem) {
            blksz = rem;
        }

        empty = hal_flash_isempty(id, address + off, buf, blksz);
   1a4e0:	466a      	mov	r2, sp
   1a4e2:	19a1      	adds	r1, r4, r6
   1a4e4:	4638      	mov	r0, r7
   1a4e6:	f7ff ffc3 	bl	1a470 <hal_flash_isempty>
        if (empty != 1) {
   1a4ea:	2801      	cmp	r0, #1
   1a4ec:	d108      	bne.n	1a500 <hal_flash_isempty_no_buf+0x2e>
    for (off = 0; off < num_bytes; off += sizeof buf) {
   1a4ee:	3410      	adds	r4, #16
   1a4f0:	42ac      	cmp	r4, r5
   1a4f2:	d204      	bcs.n	1a4fe <hal_flash_isempty_no_buf+0x2c>
        rem = num_bytes - off;
   1a4f4:	1b2b      	subs	r3, r5, r4
        if (blksz > rem) {
   1a4f6:	2b0f      	cmp	r3, #15
   1a4f8:	d9f2      	bls.n	1a4e0 <hal_flash_isempty_no_buf+0xe>
        blksz = sizeof buf;
   1a4fa:	2310      	movs	r3, #16
   1a4fc:	e7f0      	b.n	1a4e0 <hal_flash_isempty_no_buf+0xe>
            return empty;
        }
    }

    return 1;
   1a4fe:	2001      	movs	r0, #1
}
   1a500:	b005      	add	sp, #20
   1a502:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a504 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1a504:	2300      	movs	r3, #0
   1a506:	4a07      	ldr	r2, [pc, #28]	; (1a524 <nrf52k_flash_wait_ready+0x20>)
   1a508:	4293      	cmp	r3, r2
   1a50a:	dc06      	bgt.n	1a51a <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1a50c:	4a06      	ldr	r2, [pc, #24]	; (1a528 <nrf52k_flash_wait_ready+0x24>)
   1a50e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1a512:	2a01      	cmp	r2, #1
   1a514:	d004      	beq.n	1a520 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1a516:	3301      	adds	r3, #1
   1a518:	e7f5      	b.n	1a506 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1a51a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a51e:	4770      	bx	lr
            return 0;
   1a520:	2000      	movs	r0, #0
}
   1a522:	4770      	bx	lr
   1a524:	0001869f 	.word	0x0001869f
   1a528:	4001e000 	.word	0x4001e000

0001a52c <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1a52c:	b538      	push	{r3, r4, r5, lr}
   1a52e:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1a530:	f7ff ffe8 	bl	1a504 <nrf52k_flash_wait_ready>
   1a534:	b9f0      	cbnz	r0, 1a574 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a536:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a53a:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1a53c:	4b0f      	ldr	r3, [pc, #60]	; (1a57c <nrf52k_flash_erase_sector+0x50>)
   1a53e:	2202      	movs	r2, #2
   1a540:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1a544:	f7ff ffde 	bl	1a504 <nrf52k_flash_wait_ready>
   1a548:	b148      	cbz	r0, 1a55e <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1a54a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1a54e:	4a0b      	ldr	r2, [pc, #44]	; (1a57c <nrf52k_flash_erase_sector+0x50>)
   1a550:	2100      	movs	r1, #0
   1a552:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1a556:	b904      	cbnz	r4, 1a55a <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1a558:	b662      	cpsie	i
    return rc;
}
   1a55a:	4618      	mov	r0, r3
   1a55c:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1a55e:	4b07      	ldr	r3, [pc, #28]	; (1a57c <nrf52k_flash_erase_sector+0x50>)
   1a560:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1a564:	f7ff ffce 	bl	1a504 <nrf52k_flash_wait_ready>
   1a568:	4603      	mov	r3, r0
   1a56a:	2800      	cmp	r0, #0
   1a56c:	d0ef      	beq.n	1a54e <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1a56e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a572:	e7ec      	b.n	1a54e <nrf52k_flash_erase_sector+0x22>
        return -1;
   1a574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a578:	e7ef      	b.n	1a55a <nrf52k_flash_erase_sector+0x2e>
   1a57a:	bf00      	nop
   1a57c:	4001e000 	.word	0x4001e000

0001a580 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1a580:	2000      	movs	r0, #0
   1a582:	4770      	bx	lr

0001a584 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1a584:	297f      	cmp	r1, #127	; 0x7f
   1a586:	dc06      	bgt.n	1a596 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1a588:	0309      	lsls	r1, r1, #12
   1a58a:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1a58c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1a590:	601a      	str	r2, [r3, #0]
}
   1a592:	2000      	movs	r0, #0
   1a594:	4770      	bx	lr
{
   1a596:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1a598:	f7ed fe12 	bl	81c0 <hal_debugger_connected>
   1a59c:	b100      	cbz	r0, 1a5a0 <nrf52k_flash_sector_info+0x1c>
   1a59e:	be01      	bkpt	0x0001
   1a5a0:	2300      	movs	r3, #0
   1a5a2:	461a      	mov	r2, r3
   1a5a4:	4619      	mov	r1, r3
   1a5a6:	4618      	mov	r0, r3
   1a5a8:	f7ef f9a0 	bl	98ec <__assert_func>

0001a5ac <nrf52k_flash_write>:
{
   1a5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a5b0:	b082      	sub	sp, #8
   1a5b2:	460d      	mov	r5, r1
   1a5b4:	4616      	mov	r6, r2
   1a5b6:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1a5b8:	f7ff ffa4 	bl	1a504 <nrf52k_flash_wait_ready>
   1a5bc:	2800      	cmp	r0, #0
   1a5be:	d158      	bne.n	1a672 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a5c0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a5c4:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1a5c6:	4b2c      	ldr	r3, [pc, #176]	; (1a678 <nrf52k_flash_write+0xcc>)
   1a5c8:	2201      	movs	r2, #1
   1a5ca:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1a5ce:	f015 0803 	ands.w	r8, r5, #3
   1a5d2:	d10b      	bne.n	1a5ec <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1a5d4:	2c03      	cmp	r4, #3
   1a5d6:	d925      	bls.n	1a624 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1a5d8:	f7ff ff94 	bl	1a504 <nrf52k_flash_wait_ready>
   1a5dc:	2800      	cmp	r0, #0
   1a5de:	d139      	bne.n	1a654 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1a5e0:	f856 3b04 	ldr.w	r3, [r6], #4
   1a5e4:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1a5e8:	3c04      	subs	r4, #4
   1a5ea:	e7f3      	b.n	1a5d4 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1a5ec:	f7ff ff8a 	bl	1a504 <nrf52k_flash_wait_ready>
   1a5f0:	bb68      	cbnz	r0, 1a64e <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1a5f2:	f025 0a03 	bic.w	sl, r5, #3
   1a5f6:	f8da 3000 	ldr.w	r3, [sl]
   1a5fa:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1a5fc:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1a600:	45a1      	cmp	r9, r4
   1a602:	d900      	bls.n	1a606 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1a604:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1a606:	464a      	mov	r2, r9
   1a608:	4631      	mov	r1, r6
   1a60a:	ab01      	add	r3, sp, #4
   1a60c:	eb03 0008 	add.w	r0, r3, r8
   1a610:	f7f1 f8cc 	bl	b7ac <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1a614:	9b01      	ldr	r3, [sp, #4]
   1a616:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1a61a:	444d      	add	r5, r9
        num_bytes -= cnt;
   1a61c:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1a620:	444e      	add	r6, r9
   1a622:	e7d7      	b.n	1a5d4 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1a624:	b164      	cbz	r4, 1a640 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1a626:	682b      	ldr	r3, [r5, #0]
   1a628:	a802      	add	r0, sp, #8
   1a62a:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1a62e:	4622      	mov	r2, r4
   1a630:	4631      	mov	r1, r6
   1a632:	f7f1 f8bb 	bl	b7ac <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1a636:	f7ff ff65 	bl	1a504 <nrf52k_flash_wait_ready>
   1a63a:	b9b8      	cbnz	r0, 1a66c <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1a63c:	9b01      	ldr	r3, [sp, #4]
   1a63e:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1a640:	f7ff ff60 	bl	1a504 <nrf52k_flash_wait_ready>
   1a644:	4603      	mov	r3, r0
   1a646:	b138      	cbz	r0, 1a658 <nrf52k_flash_write+0xac>
        rc = -1;
   1a648:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a64c:	e004      	b.n	1a658 <nrf52k_flash_write+0xac>
    int rc = -1;
   1a64e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a652:	e001      	b.n	1a658 <nrf52k_flash_write+0xac>
   1a654:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1a658:	4a07      	ldr	r2, [pc, #28]	; (1a678 <nrf52k_flash_write+0xcc>)
   1a65a:	2100      	movs	r1, #0
   1a65c:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1a660:	b907      	cbnz	r7, 1a664 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1a662:	b662      	cpsie	i
}
   1a664:	4618      	mov	r0, r3
   1a666:	b002      	add	sp, #8
   1a668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1a66c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a670:	e7f2      	b.n	1a658 <nrf52k_flash_write+0xac>
        return -1;
   1a672:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1a676:	e7f5      	b.n	1a664 <nrf52k_flash_write+0xb8>
   1a678:	4001e000 	.word	0x4001e000

0001a67c <nrf52k_flash_read>:
{
   1a67c:	b508      	push	{r3, lr}
   1a67e:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1a680:	461a      	mov	r2, r3
   1a682:	f7f1 f893 	bl	b7ac <memcpy>
}
   1a686:	2000      	movs	r0, #0
   1a688:	bd08      	pop	{r3, pc}

0001a68a <hal_gpio_init_out>:
{
    NRF_GPIO_Type *port;
    int pin_index = HAL_GPIO_INDEX(pin);

    port = HAL_GPIO_PORT(pin);
    if (val) {
   1a68a:	b999      	cbnz	r1, 1a6b4 <hal_gpio_init_out+0x2a>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
   1a68c:	2301      	movs	r3, #1
   1a68e:	4083      	lsls	r3, r0
   1a690:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a694:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    }
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   1a698:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a69c:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   1a6a0:	2103      	movs	r1, #3
   1a6a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        (GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);
    port->DIRSET = HAL_GPIO_MASK(pin);
   1a6a6:	2301      	movs	r3, #1
   1a6a8:	fa03 f000 	lsl.w	r0, r3, r0
   1a6ac:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518

    return 0;
}
   1a6b0:	2000      	movs	r0, #0
   1a6b2:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1a6b4:	2301      	movs	r3, #1
   1a6b6:	4083      	lsls	r3, r0
   1a6b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1a6bc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1a6c0:	e7ea      	b.n	1a698 <hal_gpio_init_out+0xe>

0001a6c2 <hal_gpio_write>:
hal_gpio_write(int pin, int val)
{
    NRF_GPIO_Type *port;

    port = HAL_GPIO_PORT(pin);
    if (val) {
   1a6c2:	b939      	cbnz	r1, 1a6d4 <hal_gpio_write+0x12>
        port->OUTSET = HAL_GPIO_MASK(pin);
    } else {
        port->OUTCLR = HAL_GPIO_MASK(pin);
   1a6c4:	2301      	movs	r3, #1
   1a6c6:	fa03 f000 	lsl.w	r0, r3, r0
   1a6ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a6ce:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    }
}
   1a6d2:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1a6d4:	2301      	movs	r3, #1
   1a6d6:	fa03 f000 	lsl.w	r0, r3, r0
   1a6da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1a6de:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   1a6e2:	4770      	bx	lr

0001a6e4 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1a6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1a6e6:	f7f0 fef3 	bl	b4d0 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1a6ea:	4b39      	ldr	r3, [pc, #228]	; (1a7d0 <nrf52_timer_handler+0xec>)
   1a6ec:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1a6f0:	4b38      	ldr	r3, [pc, #224]	; (1a7d4 <nrf52_timer_handler+0xf0>)
   1a6f2:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1a6f4:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1a6f8:	d229      	bcs.n	1a74e <nrf52_timer_handler+0x6a>
   1a6fa:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1a6fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a700:	d22f      	bcs.n	1a762 <nrf52_timer_handler+0x7e>
    result = x - y;
   1a702:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1a704:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1a708:	d135      	bne.n	1a776 <nrf52_timer_handler+0x92>
        return (result & 0x007fffff);
   1a70a:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1a70e:	4f31      	ldr	r7, [pc, #196]	; (1a7d4 <nrf52_timer_handler+0xf0>)
   1a710:	683c      	ldr	r4, [r7, #0]
   1a712:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1a716:	4628      	mov	r0, r5
   1a718:	f7f0 fe62 	bl	b3e0 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1a71c:	4b2c      	ldr	r3, [pc, #176]	; (1a7d0 <nrf52_timer_handler+0xec>)
   1a71e:	2200      	movs	r2, #0
   1a720:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a724:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1a726:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a728:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1a72c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1a730:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1a732:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1a734:	f7f0 fed5 	bl	b4e2 <os_arch_in_critical>
   1a738:	bba8      	cbnz	r0, 1a7a6 <nrf52_timer_handler+0xc2>
   1a73a:	f7ed fd41 	bl	81c0 <hal_debugger_connected>
   1a73e:	b100      	cbz	r0, 1a742 <nrf52_timer_handler+0x5e>
   1a740:	be01      	bkpt	0x0001
   1a742:	2300      	movs	r3, #0
   1a744:	461a      	mov	r2, r3
   1a746:	4619      	mov	r1, r3
   1a748:	4618      	mov	r0, r3
   1a74a:	f7ef f8cf 	bl	98ec <__assert_func>
    assert(x <= 0xffffff);
   1a74e:	f7ed fd37 	bl	81c0 <hal_debugger_connected>
   1a752:	b100      	cbz	r0, 1a756 <nrf52_timer_handler+0x72>
   1a754:	be01      	bkpt	0x0001
   1a756:	2300      	movs	r3, #0
   1a758:	461a      	mov	r2, r3
   1a75a:	4619      	mov	r1, r3
   1a75c:	4618      	mov	r0, r3
   1a75e:	f7ef f8c5 	bl	98ec <__assert_func>
    assert(y <= 0xffffff);
   1a762:	f7ed fd2d 	bl	81c0 <hal_debugger_connected>
   1a766:	b100      	cbz	r0, 1a76a <nrf52_timer_handler+0x86>
   1a768:	be01      	bkpt	0x0001
   1a76a:	2300      	movs	r3, #0
   1a76c:	461a      	mov	r2, r3
   1a76e:	4619      	mov	r1, r3
   1a770:	4618      	mov	r0, r3
   1a772:	f7ef f8bb 	bl	98ec <__assert_func>
        return (result | 0xff800000);
   1a776:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1a77a:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1a77e:	e7c6      	b.n	1a70e <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1a780:	f7ed fd1e 	bl	81c0 <hal_debugger_connected>
   1a784:	b100      	cbz	r0, 1a788 <nrf52_timer_handler+0xa4>
   1a786:	be01      	bkpt	0x0001
   1a788:	2300      	movs	r3, #0
   1a78a:	461a      	mov	r2, r3
   1a78c:	4619      	mov	r1, r3
   1a78e:	4618      	mov	r0, r3
   1a790:	f7ef f8ac 	bl	98ec <__assert_func>
        return (result | 0xff800000);
   1a794:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1a798:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1a79c:	2a02      	cmp	r2, #2
   1a79e:	dc13      	bgt.n	1a7c8 <nrf52_timer_handler+0xe4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1a7a0:	4a0c      	ldr	r2, [pc, #48]	; (1a7d4 <nrf52_timer_handler+0xf0>)
   1a7a2:	6814      	ldr	r4, [r2, #0]
   1a7a4:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1a7a6:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1a7aa:	4a09      	ldr	r2, [pc, #36]	; (1a7d0 <nrf52_timer_handler+0xec>)
   1a7ac:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1a7b0:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1a7b4:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1a7b8:	d2e2      	bcs.n	1a780 <nrf52_timer_handler+0x9c>
    result = x - y;
   1a7ba:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1a7bc:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1a7c0:	d1e8      	bne.n	1a794 <nrf52_timer_handler+0xb0>
        return (result & 0x007fffff);
   1a7c2:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1a7c6:	e7e9      	b.n	1a79c <nrf52_timer_handler+0xb8>

    OS_EXIT_CRITICAL(sr);
   1a7c8:	4630      	mov	r0, r6
   1a7ca:	f7f0 fe87 	bl	b4dc <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1a7ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a7d0:	40011000 	.word	0x40011000
   1a7d4:	20008068 	.word	0x20008068

0001a7d8 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1a7d8:	b538      	push	{r3, r4, r5, lr}
   1a7da:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1a7dc:	f7f0 fe81 	bl	b4e2 <os_arch_in_critical>
   1a7e0:	b1c0      	cbz	r0, 1a814 <os_tick_idle+0x3c>

    if (ticks > 0) {
   1a7e2:	2d00      	cmp	r5, #0
   1a7e4:	d044      	beq.n	1a870 <os_tick_idle+0x98>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1a7e6:	4b26      	ldr	r3, [pc, #152]	; (1a880 <os_tick_idle+0xa8>)
   1a7e8:	685b      	ldr	r3, [r3, #4]
   1a7ea:	42ab      	cmp	r3, r5
   1a7ec:	d200      	bcs.n	1a7f0 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1a7ee:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1a7f0:	4b23      	ldr	r3, [pc, #140]	; (1a880 <os_tick_idle+0xa8>)
   1a7f2:	689c      	ldr	r4, [r3, #8]
   1a7f4:	681a      	ldr	r2, [r3, #0]
   1a7f6:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1a7fa:	f7f0 fe72 	bl	b4e2 <os_arch_in_critical>
   1a7fe:	bb30      	cbnz	r0, 1a84e <os_tick_idle+0x76>
   1a800:	f7ed fcde 	bl	81c0 <hal_debugger_connected>
   1a804:	b100      	cbz	r0, 1a808 <os_tick_idle+0x30>
   1a806:	be01      	bkpt	0x0001
   1a808:	2300      	movs	r3, #0
   1a80a:	461a      	mov	r2, r3
   1a80c:	4619      	mov	r1, r3
   1a80e:	4618      	mov	r0, r3
   1a810:	f7ef f86c 	bl	98ec <__assert_func>
    OS_ASSERT_CRITICAL();
   1a814:	f7ed fcd4 	bl	81c0 <hal_debugger_connected>
   1a818:	b100      	cbz	r0, 1a81c <os_tick_idle+0x44>
   1a81a:	be01      	bkpt	0x0001
   1a81c:	2300      	movs	r3, #0
   1a81e:	461a      	mov	r2, r3
   1a820:	4619      	mov	r1, r3
   1a822:	4618      	mov	r0, r3
   1a824:	f7ef f862 	bl	98ec <__assert_func>
    assert(y <= 0xffffff);
   1a828:	f7ed fcca 	bl	81c0 <hal_debugger_connected>
   1a82c:	b100      	cbz	r0, 1a830 <os_tick_idle+0x58>
   1a82e:	be01      	bkpt	0x0001
   1a830:	2300      	movs	r3, #0
   1a832:	461a      	mov	r2, r3
   1a834:	4619      	mov	r1, r3
   1a836:	4618      	mov	r0, r3
   1a838:	f7ef f858 	bl	98ec <__assert_func>
        return (result | 0xff800000);
   1a83c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1a840:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1a844:	2b02      	cmp	r3, #2
   1a846:	dc13      	bgt.n	1a870 <os_tick_idle+0x98>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1a848:	4b0d      	ldr	r3, [pc, #52]	; (1a880 <os_tick_idle+0xa8>)
   1a84a:	681c      	ldr	r4, [r3, #0]
   1a84c:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1a84e:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1a852:	4b0c      	ldr	r3, [pc, #48]	; (1a884 <os_tick_idle+0xac>)
   1a854:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1a858:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1a85c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a860:	d2e2      	bcs.n	1a828 <os_tick_idle+0x50>
    result = x - y;
   1a862:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1a864:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1a868:	d1e8      	bne.n	1a83c <os_tick_idle+0x64>
        return (result & 0x007fffff);
   1a86a:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1a86e:	e7e9      	b.n	1a844 <os_tick_idle+0x6c>
  __ASM volatile ("dsb 0xF":::"memory");
   1a870:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1a874:	bf30      	wfi

    if (ticks > 0) {
   1a876:	b905      	cbnz	r5, 1a87a <os_tick_idle+0xa2>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1a878:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1a87a:	f7ff ff33 	bl	1a6e4 <nrf52_timer_handler>
}
   1a87e:	e7fb      	b.n	1a878 <os_tick_idle+0xa0>
   1a880:	20008068 	.word	0x20008068
   1a884:	40011000 	.word	0x40011000

0001a888 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1a888:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a88a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a88e:	fbb3 f3f0 	udiv	r3, r3, r0
   1a892:	fb00 f303 	mul.w	r3, r0, r3
   1a896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a89a:	d136      	bne.n	1a90a <os_tick_init+0x82>
   1a89c:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1a89e:	4d20      	ldr	r5, [pc, #128]	; (1a920 <os_tick_init+0x98>)
   1a8a0:	2600      	movs	r6, #0
   1a8a2:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1a8a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a8a8:	fbb3 f0f0 	udiv	r0, r3, r0
   1a8ac:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1a8ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a8b2:	fbb3 f0f0 	udiv	r0, r3, r0
   1a8b6:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1a8b8:	f7f0 fe0a 	bl	b4d0 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a8bc:	0164      	lsls	r4, r4, #5
   1a8be:	b2e4      	uxtb	r4, r4
   1a8c0:	4b18      	ldr	r3, [pc, #96]	; (1a924 <os_tick_init+0x9c>)
   1a8c2:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a8c6:	4a18      	ldr	r2, [pc, #96]	; (1a928 <os_tick_init+0xa0>)
   1a8c8:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a8ca:	4918      	ldr	r1, [pc, #96]	; (1a92c <os_tick_init+0xa4>)
   1a8cc:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a8d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a8d4:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1a8d6:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1a8da:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1a8de:	2201      	movs	r2, #1
   1a8e0:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1a8e2:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1a8e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a8e8:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1a8ec:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1a8f0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1a8f4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1a8f8:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1a8fc:	6829      	ldr	r1, [r5, #0]
   1a8fe:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1a902:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1a904:	f7f0 fdea 	bl	b4dc <os_arch_restore_sr>
}
   1a908:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a90a:	f7ed fc59 	bl	81c0 <hal_debugger_connected>
   1a90e:	b100      	cbz	r0, 1a912 <os_tick_init+0x8a>
   1a910:	be01      	bkpt	0x0001
   1a912:	2300      	movs	r3, #0
   1a914:	461a      	mov	r2, r3
   1a916:	4619      	mov	r1, r3
   1a918:	4618      	mov	r0, r3
   1a91a:	f7ee ffe7 	bl	98ec <__assert_func>
   1a91e:	bf00      	nop
   1a920:	20008068 	.word	0x20008068
   1a924:	e000e100 	.word	0xe000e100
   1a928:	e000ed00 	.word	0xe000ed00
   1a92c:	0001a6e5 	.word	0x0001a6e5

0001a930 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER) || MYNEWT_VAL(SPI_3_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   1a930:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   1a932:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   1a934:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   1a938:	b32b      	cbz	r3, 1a986 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   1a93a:	2300      	movs	r3, #0
   1a93c:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   1a940:	7843      	ldrb	r3, [r0, #1]
   1a942:	b303      	cbz	r3, 1a986 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   1a944:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   1a948:	88c3      	ldrh	r3, [r0, #6]
   1a94a:	fa13 f382 	uxtah	r3, r3, r2
   1a94e:	b29b      	uxth	r3, r3
   1a950:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   1a952:	8881      	ldrh	r1, [r0, #4]
   1a954:	428b      	cmp	r3, r1
   1a956:	d217      	bcs.n	1a988 <nrf52_irqm_handler+0x58>
   1a958:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   1a95a:	6984      	ldr	r4, [r0, #24]
   1a95c:	4414      	add	r4, r2
   1a95e:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   1a960:	1acb      	subs	r3, r1, r3
   1a962:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   1a964:	2bff      	cmp	r3, #255	; 0xff
   1a966:	bf28      	it	cs
   1a968:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1a96a:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1a96e:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   1a972:	69c1      	ldr	r1, [r0, #28]
   1a974:	b129      	cbz	r1, 1a982 <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   1a976:	440a      	add	r2, r1
   1a978:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1a97a:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1a97e:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   1a982:	2301      	movs	r3, #1
   1a984:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   1a986:	bd38      	pop	{r3, r4, r5, pc}
   1a988:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   1a98a:	6a03      	ldr	r3, [r0, #32]
   1a98c:	b10b      	cbz	r3, 1a992 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1a98e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1a990:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   1a992:	2300      	movs	r3, #0
   1a994:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1a996:	2340      	movs	r3, #64	; 0x40
   1a998:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   1a99c:	e7f3      	b.n	1a986 <nrf52_irqm_handler+0x56>
	...

0001a9a0 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   1a9a0:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   1a9a2:	4b04      	ldr	r3, [pc, #16]	; (1a9b4 <nrf52_spi0_irq_handler+0x14>)
   1a9a4:	781b      	ldrb	r3, [r3, #0]
   1a9a6:	b103      	cbz	r3, 1a9aa <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   1a9a8:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1a9aa:	4802      	ldr	r0, [pc, #8]	; (1a9b4 <nrf52_spi0_irq_handler+0x14>)
   1a9ac:	f7ff ffc0 	bl	1a930 <nrf52_irqm_handler>
}
   1a9b0:	e7fa      	b.n	1a9a8 <nrf52_spi0_irq_handler+0x8>
   1a9b2:	bf00      	nop
   1a9b4:	20008074 	.word	0x20008074

0001a9b8 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   1a9b8:	2301      	movs	r3, #1
   1a9ba:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   1a9bc:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1a9c0:	2b00      	cmp	r3, #0
   1a9c2:	d0fb      	beq.n	1a9bc <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   1a9c4:	2300      	movs	r3, #0
   1a9c6:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1a9ca:	4770      	bx	lr

0001a9cc <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   1a9cc:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   1a9ce:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   1a9d0:	780b      	ldrb	r3, [r1, #0]
   1a9d2:	2b03      	cmp	r3, #3
   1a9d4:	d80c      	bhi.n	1a9f0 <hal_spi_config_slave+0x24>
   1a9d6:	e8df f003 	tbb	[pc, r3]
   1a9da:	0e02      	.short	0x0e02
   1a9dc:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1a9de:	2300      	movs	r3, #0
    rc = 0;
   1a9e0:	4618      	mov	r0, r3
   1a9e2:	e00a      	b.n	1a9fa <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1a9e4:	2304      	movs	r3, #4
    rc = 0;
   1a9e6:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   1a9e8:	e007      	b.n	1a9fa <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1a9ea:	2306      	movs	r3, #6
    rc = 0;
   1a9ec:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   1a9ee:	e004      	b.n	1a9fa <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   1a9f0:	2300      	movs	r3, #0
            rc = EINVAL;
   1a9f2:	2016      	movs	r0, #22
            break;
   1a9f4:	e001      	b.n	1a9fa <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1a9f6:	2302      	movs	r3, #2
    rc = 0;
   1a9f8:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1a9fa:	784c      	ldrb	r4, [r1, #1]
   1a9fc:	2c01      	cmp	r4, #1
   1a9fe:	d006      	beq.n	1aa0e <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   1aa00:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   1aa04:	788b      	ldrb	r3, [r1, #2]
   1aa06:	b92b      	cbnz	r3, 1aa14 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   1aa08:	f85d 4b04 	ldr.w	r4, [sp], #4
   1aa0c:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   1aa0e:	f043 0301 	orr.w	r3, r3, #1
   1aa12:	e7f5      	b.n	1aa00 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   1aa14:	2016      	movs	r0, #22
    return rc;
   1aa16:	e7f7      	b.n	1aa08 <hal_spi_config_slave+0x3c>

0001aa18 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   1aa18:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   1aa1a:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   1aa1c:	2501      	movs	r5, #1
   1aa1e:	409d      	lsls	r5, r3
   1aa20:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1aa24:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   1aa28:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1aa2c:	2503      	movs	r5, #3
   1aa2e:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   1aa32:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   1aa34:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1aa38:	2500      	movs	r5, #0
   1aa3a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1aa3e:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   1aa40:	780c      	ldrb	r4, [r1, #0]
   1aa42:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   1aa46:	784c      	ldrb	r4, [r1, #1]
   1aa48:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   1aa4c:	7889      	ldrb	r1, [r1, #2]
   1aa4e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1aa52:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1aa56:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1aa5a:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1aa5e:	4919      	ldr	r1, [pc, #100]	; (1aac4 <hal_spi_init_master+0xac>)
   1aa60:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1aa62:	3310      	adds	r3, #16
   1aa64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   1aa68:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1aa6c:	42ab      	cmp	r3, r5
   1aa6e:	db22      	blt.n	1aab6 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1aa70:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   1aa74:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1aa78:	22e0      	movs	r2, #224	; 0xe0
   1aa7a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1aa7e:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1aa82:	2b00      	cmp	r3, #0
   1aa84:	db08      	blt.n	1aa98 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1aa86:	f003 011f 	and.w	r1, r3, #31
   1aa8a:	095b      	lsrs	r3, r3, #5
   1aa8c:	2201      	movs	r2, #1
   1aa8e:	408a      	lsls	r2, r1
   1aa90:	3360      	adds	r3, #96	; 0x60
   1aa92:	490d      	ldr	r1, [pc, #52]	; (1aac8 <hal_spi_init_master+0xb0>)
   1aa94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   1aa98:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1aa9c:	2b00      	cmp	r3, #0
   1aa9e:	db07      	blt.n	1aab0 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1aaa0:	f003 011f 	and.w	r1, r3, #31
   1aaa4:	095b      	lsrs	r3, r3, #5
   1aaa6:	2201      	movs	r2, #1
   1aaa8:	408a      	lsls	r2, r1
   1aaaa:	4907      	ldr	r1, [pc, #28]	; (1aac8 <hal_spi_init_master+0xb0>)
   1aaac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   1aab0:	2000      	movs	r0, #0
   1aab2:	bc30      	pop	{r4, r5}
   1aab4:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1aab6:	f003 030f 	and.w	r3, r3, #15
   1aaba:	4a04      	ldr	r2, [pc, #16]	; (1aacc <hal_spi_init_master+0xb4>)
   1aabc:	441a      	add	r2, r3
   1aabe:	23e0      	movs	r3, #224	; 0xe0
   1aac0:	7613      	strb	r3, [r2, #24]
   1aac2:	e7dc      	b.n	1aa7e <hal_spi_init_master+0x66>
   1aac4:	e000ed00 	.word	0xe000ed00
   1aac8:	e000e100 	.word	0xe000e100
   1aacc:	e000ecfc 	.word	0xe000ecfc

0001aad0 <hal_spi_config_master>:
{
   1aad0:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   1aad2:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   1aad4:	680c      	ldr	r4, [r1, #0]
   1aad6:	684b      	ldr	r3, [r1, #4]
   1aad8:	6084      	str	r4, [r0, #8]
   1aada:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   1aadc:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   1aae0:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   1aae4:	7808      	ldrb	r0, [r1, #0]
   1aae6:	2801      	cmp	r0, #1
   1aae8:	d916      	bls.n	1ab18 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1aaea:	2001      	movs	r0, #1
   1aaec:	4098      	lsls	r0, r3
   1aaee:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1aaf2:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   1aaf6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1aafa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   1aafe:	2403      	movs	r4, #3
   1ab00:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   1ab04:	788b      	ldrb	r3, [r1, #2]
   1ab06:	b973      	cbnz	r3, 1ab26 <hal_spi_config_master+0x56>
    rc = 0;
   1ab08:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1ab0a:	780b      	ldrb	r3, [r1, #0]
   1ab0c:	2b03      	cmp	r3, #3
   1ab0e:	d812      	bhi.n	1ab36 <hal_spi_config_master+0x66>
   1ab10:	e8df f003 	tbb	[pc, r3]
   1ab14:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   1ab18:	2001      	movs	r0, #1
   1ab1a:	4098      	lsls	r0, r3
   1ab1c:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1ab20:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   1ab24:	e7e7      	b.n	1aaf6 <hal_spi_config_master+0x26>
            rc = EINVAL;
   1ab26:	2016      	movs	r0, #22
   1ab28:	e7ef      	b.n	1ab0a <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1ab2a:	2300      	movs	r3, #0
   1ab2c:	e007      	b.n	1ab3e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1ab2e:	2304      	movs	r3, #4
            break;
   1ab30:	e005      	b.n	1ab3e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   1ab32:	2306      	movs	r3, #6
            break;
   1ab34:	e003      	b.n	1ab3e <hal_spi_config_master+0x6e>
            nrf_config = 0;
   1ab36:	2300      	movs	r3, #0
            rc = EINVAL;
   1ab38:	2016      	movs	r0, #22
            break;
   1ab3a:	e000      	b.n	1ab3e <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   1ab3c:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1ab3e:	784c      	ldrb	r4, [r1, #1]
   1ab40:	2c01      	cmp	r4, #1
   1ab42:	d010      	beq.n	1ab66 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   1ab44:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   1ab48:	684b      	ldr	r3, [r1, #4]
   1ab4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   1ab4e:	d023      	beq.n	1ab98 <hal_spi_config_master+0xc8>
   1ab50:	d80c      	bhi.n	1ab6c <hal_spi_config_master+0x9c>
   1ab52:	2bfa      	cmp	r3, #250	; 0xfa
   1ab54:	d029      	beq.n	1abaa <hal_spi_config_master+0xda>
   1ab56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1ab5a:	d01a      	beq.n	1ab92 <hal_spi_config_master+0xc2>
   1ab5c:	2b7d      	cmp	r3, #125	; 0x7d
   1ab5e:	d011      	beq.n	1ab84 <hal_spi_config_master+0xb4>
            frequency = 0;
   1ab60:	2300      	movs	r3, #0
            rc = EINVAL;
   1ab62:	2016      	movs	r0, #22
            break;
   1ab64:	e010      	b.n	1ab88 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   1ab66:	f043 0301 	orr.w	r3, r3, #1
   1ab6a:	e7eb      	b.n	1ab44 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   1ab6c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   1ab70:	d015      	beq.n	1ab9e <hal_spi_config_master+0xce>
   1ab72:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   1ab76:	d015      	beq.n	1aba4 <hal_spi_config_master+0xd4>
   1ab78:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   1ab7c:	d1f0      	bne.n	1ab60 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   1ab7e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   1ab82:	e001      	b.n	1ab88 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   1ab84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   1ab88:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   1ab8c:	f85d 4b04 	ldr.w	r4, [sp], #4
   1ab90:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   1ab92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   1ab96:	e7f7      	b.n	1ab88 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1ab98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   1ab9c:	e7f4      	b.n	1ab88 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   1ab9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   1aba2:	e7f1      	b.n	1ab88 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   1aba4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   1aba8:	e7ee      	b.n	1ab88 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   1abaa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1abae:	e7eb      	b.n	1ab88 <hal_spi_config_master+0xb8>

0001abb0 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1abb0:	2803      	cmp	r0, #3
   1abb2:	dc10      	bgt.n	1abd6 <hal_spi_config+0x26>
{
   1abb4:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1abb6:	4b0b      	ldr	r3, [pc, #44]	; (1abe4 <hal_spi_config+0x34>)
   1abb8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1abbc:	b168      	cbz	r0, 1abda <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1abbe:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   1abc0:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   1abc4:	b95b      	cbnz	r3, 1abde <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1abc6:	7803      	ldrb	r3, [r0, #0]
   1abc8:	b113      	cbz	r3, 1abd0 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   1abca:	f7ff feff 	bl	1a9cc <hal_spi_config_slave>
    }

err:
    return (rc);
}
   1abce:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   1abd0:	f7ff ff7e 	bl	1aad0 <hal_spi_config_master>
   1abd4:	e7fb      	b.n	1abce <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1abd6:	2016      	movs	r0, #22
}
   1abd8:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1abda:	2016      	movs	r0, #22
   1abdc:	e7f7      	b.n	1abce <hal_spi_config+0x1e>
        return -1;
   1abde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1abe2:	e7f4      	b.n	1abce <hal_spi_config+0x1e>
   1abe4:	000295f4 	.word	0x000295f4

0001abe8 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1abe8:	2803      	cmp	r0, #3
   1abea:	dc1b      	bgt.n	1ac24 <hal_spi_enable+0x3c>
   1abec:	4b10      	ldr	r3, [pc, #64]	; (1ac30 <hal_spi_enable+0x48>)
   1abee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1abf2:	b1cb      	cbz	r3, 1ac28 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1abf4:	781a      	ldrb	r2, [r3, #0]
   1abf6:	b17a      	cbz	r2, 1ac18 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   1abf8:	6a1a      	ldr	r2, [r3, #32]
   1abfa:	b1ba      	cbz	r2, 1ac2c <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   1abfc:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   1abfe:	2000      	movs	r0, #0
   1ac00:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1ac04:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1ac08:	f240 4202 	movw	r2, #1026	; 0x402
   1ac0c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   1ac10:	2202      	movs	r2, #2
   1ac12:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   1ac16:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   1ac18:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1ac1a:	2201      	movs	r2, #1
   1ac1c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   1ac20:	2000      	movs	r0, #0
   1ac22:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ac24:	2016      	movs	r0, #22
   1ac26:	4770      	bx	lr
   1ac28:	2016      	movs	r0, #22
   1ac2a:	4770      	bx	lr
            rc = EINVAL;
   1ac2c:	2016      	movs	r0, #22

err:
    return rc;
}
   1ac2e:	4770      	bx	lr
   1ac30:	000295f4 	.word	0x000295f4

0001ac34 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ac34:	2803      	cmp	r0, #3
   1ac36:	dc2a      	bgt.n	1ac8e <hal_spi_disable+0x5a>
{
   1ac38:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ac3a:	4b17      	ldr	r3, [pc, #92]	; (1ac98 <hal_spi_disable+0x64>)
   1ac3c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1ac40:	b33c      	cbz	r4, 1ac92 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1ac42:	7823      	ldrb	r3, [r4, #0]
   1ac44:	b9ab      	cbnz	r3, 1ac72 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   1ac46:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1ac48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ac4c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   1ac50:	7863      	ldrb	r3, [r4, #1]
   1ac52:	b943      	cbnz	r3, 1ac66 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   1ac54:	2300      	movs	r3, #0
   1ac56:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1ac5a:	2000      	movs	r0, #0
   1ac5c:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   1ac5e:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   1ac60:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   1ac62:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   1ac64:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   1ac66:	4628      	mov	r0, r5
   1ac68:	f7ff fea6 	bl	1a9b8 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   1ac6c:	2300      	movs	r3, #0
   1ac6e:	7063      	strb	r3, [r4, #1]
   1ac70:	e7f0      	b.n	1ac54 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   1ac72:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1ac74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ac78:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   1ac7c:	2300      	movs	r3, #0
   1ac7e:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   1ac82:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1ac86:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1ac8a:	70e3      	strb	r3, [r4, #3]
   1ac8c:	e7e5      	b.n	1ac5a <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ac8e:	2016      	movs	r0, #22
}
   1ac90:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ac92:	2016      	movs	r0, #22
    return rc;
   1ac94:	e7e6      	b.n	1ac64 <hal_spi_disable+0x30>
   1ac96:	bf00      	nop
   1ac98:	000295f4 	.word	0x000295f4

0001ac9c <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ac9c:	2803      	cmp	r0, #3
   1ac9e:	dc21      	bgt.n	1ace4 <hal_spi_init+0x48>
{
   1aca0:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1aca2:	4b15      	ldr	r3, [pc, #84]	; (1acf8 <hal_spi_init+0x5c>)
   1aca4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1aca8:	b1f4      	cbz	r4, 1ace8 <hal_spi_init+0x4c>
    if (cfg == NULL) {
   1acaa:	b1f9      	cbz	r1, 1acec <hal_spi_init+0x50>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   1acac:	2a01      	cmp	r2, #1
   1acae:	d81f      	bhi.n	1acf0 <hal_spi_init+0x54>
    spi->spi_type = spi_type;
   1acb0:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   1acb2:	b9f8      	cbnz	r0, 1acf4 <hal_spi_init+0x58>
   1acb4:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1acb6:	2303      	movs	r3, #3
   1acb8:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1acba:	b94a      	cbnz	r2, 1acd0 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   1acbc:	4b0f      	ldr	r3, [pc, #60]	; (1acfc <hal_spi_init+0x60>)
   1acbe:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   1acc0:	f7ff ffb8 	bl	1ac34 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   1acc4:	4a0e      	ldr	r2, [pc, #56]	; (1ad00 <hal_spi_init+0x64>)
   1acc6:	4629      	mov	r1, r5
   1acc8:	4620      	mov	r0, r4
   1acca:	f7ff fea5 	bl	1aa18 <hal_spi_init_master>
   1acce:	e010      	b.n	1acf2 <hal_spi_init+0x56>
            assert(0);
   1acd0:	f7ed fa76 	bl	81c0 <hal_debugger_connected>
   1acd4:	b100      	cbz	r0, 1acd8 <hal_spi_init+0x3c>
   1acd6:	be01      	bkpt	0x0001
   1acd8:	2300      	movs	r3, #0
   1acda:	461a      	mov	r2, r3
   1acdc:	4619      	mov	r1, r3
   1acde:	4618      	mov	r0, r3
   1ace0:	f7ee fe04 	bl	98ec <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ace4:	2016      	movs	r0, #22
}
   1ace6:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ace8:	2016      	movs	r0, #22
   1acea:	e002      	b.n	1acf2 <hal_spi_init+0x56>
    rc = EINVAL;
   1acec:	2016      	movs	r0, #22
   1acee:	e000      	b.n	1acf2 <hal_spi_init+0x56>
   1acf0:	2016      	movs	r0, #22
}
   1acf2:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   1acf4:	2016      	movs	r0, #22
    return (rc);
   1acf6:	e7fc      	b.n	1acf2 <hal_spi_init+0x56>
   1acf8:	000295f4 	.word	0x000295f4
   1acfc:	40003000 	.word	0x40003000
   1ad00:	0001a9a1 	.word	0x0001a9a1

0001ad04 <hal_spi_tx_val>:
    int rc;
    uint16_t retval;
    NRF_SPI_Type *spi;
    struct nrf52_hal_spi *hal_spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   1ad04:	2803      	cmp	r0, #3
   1ad06:	dc17      	bgt.n	1ad38 <hal_spi_tx_val+0x34>
   1ad08:	4b0f      	ldr	r3, [pc, #60]	; (1ad48 <hal_spi_tx_val+0x44>)
   1ad0a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1ad0e:	b1ab      	cbz	r3, 1ad3c <hal_spi_tx_val+0x38>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1ad10:	781a      	ldrb	r2, [r3, #0]
   1ad12:	b9aa      	cbnz	r2, 1ad40 <hal_spi_tx_val+0x3c>
        spi = (NRF_SPI_Type *)hal_spi->nhs_spi.spim;
   1ad14:	691a      	ldr	r2, [r3, #16]
        spi->EVENTS_READY = 0;
   1ad16:	2300      	movs	r3, #0
   1ad18:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        spi->TXD = (uint8_t)val;
   1ad1c:	b2c9      	uxtb	r1, r1
   1ad1e:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
        while (!spi->EVENTS_READY) {}
   1ad22:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
   1ad26:	2b00      	cmp	r3, #0
   1ad28:	d0fb      	beq.n	1ad22 <hal_spi_tx_val+0x1e>
        spi->EVENTS_READY = 0;
   1ad2a:	2300      	movs	r3, #0
   1ad2c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
        retval = (uint16_t)spi->RXD;
   1ad30:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1ad34:	b280      	uxth	r0, r0
   1ad36:	4770      	bx	lr
    }

    return retval;

err:
    return rc;
   1ad38:	2016      	movs	r0, #22
   1ad3a:	4770      	bx	lr
   1ad3c:	2016      	movs	r0, #22
   1ad3e:	4770      	bx	lr
        retval = 0xFFFF;
   1ad40:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   1ad44:	4770      	bx	lr
   1ad46:	bf00      	nop
   1ad48:	000295f4 	.word	0x000295f4

0001ad4c <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ad4c:	2803      	cmp	r0, #3
   1ad4e:	dc0a      	bgt.n	1ad66 <hal_spi_set_txrx_cb+0x1a>
   1ad50:	4b08      	ldr	r3, [pc, #32]	; (1ad74 <hal_spi_set_txrx_cb+0x28>)
   1ad52:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1ad56:	b143      	cbz	r3, 1ad6a <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1ad58:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1ad5a:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   1ad5e:	b930      	cbnz	r0, 1ad6e <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   1ad60:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   1ad62:	625a      	str	r2, [r3, #36]	; 0x24
   1ad64:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1ad66:	2016      	movs	r0, #22
   1ad68:	4770      	bx	lr
   1ad6a:	2016      	movs	r0, #22
   1ad6c:	4770      	bx	lr
        rc = -1;
   1ad6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   1ad72:	4770      	bx	lr
   1ad74:	000295f4 	.word	0x000295f4

0001ad78 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   1ad78:	2b00      	cmp	r3, #0
   1ad7a:	d046      	beq.n	1ae0a <hal_spi_txrx+0x92>
{
   1ad7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ad7e:	460d      	mov	r5, r1
   1ad80:	4617      	mov	r7, r2
   1ad82:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   1ad84:	2803      	cmp	r0, #3
   1ad86:	dc42      	bgt.n	1ae0e <hal_spi_txrx+0x96>
   1ad88:	4b25      	ldr	r3, [pc, #148]	; (1ae20 <hal_spi_txrx+0xa8>)
   1ad8a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1ad8e:	2b00      	cmp	r3, #0
   1ad90:	d03f      	beq.n	1ae12 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1ad92:	781a      	ldrb	r2, [r3, #0]
   1ad94:	2a00      	cmp	r2, #0
   1ad96:	d13e      	bne.n	1ae16 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   1ad98:	2900      	cmp	r1, #0
   1ad9a:	d03e      	beq.n	1ae1a <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   1ad9c:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   1ad9e:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   1ada2:	2b07      	cmp	r3, #7
   1ada4:	d004      	beq.n	1adb0 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   1ada6:	b95b      	cbnz	r3, 1adc0 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1ada8:	2301      	movs	r3, #1
   1adaa:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   1adae:	e007      	b.n	1adc0 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   1adb0:	f7ff ff40 	bl	1ac34 <hal_spi_disable>
   1adb4:	e7f8      	b.n	1ada8 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   1adb6:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1adba:	2300      	movs	r3, #0
   1adbc:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   1adc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1adc4:	2b00      	cmp	r3, #0
   1adc6:	d1f6      	bne.n	1adb6 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1adc8:	782b      	ldrb	r3, [r5, #0]
   1adca:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   1adce:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   1add0:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   1add2:	2200      	movs	r2, #0
   1add4:	e00d      	b.n	1adf2 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   1add6:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1adda:	2b00      	cmp	r3, #0
   1addc:	d0fb      	beq.n	1add6 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   1adde:	2300      	movs	r3, #0
   1ade0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   1ade4:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   1ade8:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1adea:	b10f      	cbz	r7, 1adf0 <hal_spi_txrx+0x78>
                *rxd = rxval;
   1adec:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   1adf0:	3201      	adds	r2, #1
   1adf2:	42b2      	cmp	r2, r6
   1adf4:	da07      	bge.n	1ae06 <hal_spi_txrx+0x8e>
            if (txcnt) {
   1adf6:	2900      	cmp	r1, #0
   1adf8:	d0ed      	beq.n	1add6 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   1adfa:	786b      	ldrb	r3, [r5, #1]
   1adfc:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   1ae00:	3901      	subs	r1, #1
                ++txd;
   1ae02:	3501      	adds	r5, #1
   1ae04:	e7e7      	b.n	1add6 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1ae06:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1ae08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1ae0a:	2016      	movs	r0, #22
}
   1ae0c:	4770      	bx	lr
    return rc;
   1ae0e:	2016      	movs	r0, #22
   1ae10:	e7fa      	b.n	1ae08 <hal_spi_txrx+0x90>
   1ae12:	2016      	movs	r0, #22
   1ae14:	e7f8      	b.n	1ae08 <hal_spi_txrx+0x90>
   1ae16:	2016      	movs	r0, #22
   1ae18:	e7f6      	b.n	1ae08 <hal_spi_txrx+0x90>
   1ae1a:	2016      	movs	r0, #22
   1ae1c:	e7f4      	b.n	1ae08 <hal_spi_txrx+0x90>
   1ae1e:	bf00      	nop
   1ae20:	000295f4 	.word	0x000295f4

0001ae24 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   1ae24:	b508      	push	{r3, lr}
    assert(0);
   1ae26:	f7ed f9cb 	bl	81c0 <hal_debugger_connected>
   1ae2a:	b100      	cbz	r0, 1ae2e <nrf52_hal_wdt_default_handler+0xa>
   1ae2c:	be01      	bkpt	0x0001
   1ae2e:	2300      	movs	r3, #0
   1ae30:	461a      	mov	r2, r3
   1ae32:	4619      	mov	r1, r3
   1ae34:	4618      	mov	r0, r3
   1ae36:	f7ee fd59 	bl	98ec <__assert_func>
	...

0001ae3c <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   1ae3c:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1ae3e:	4b06      	ldr	r3, [pc, #24]	; (1ae58 <nrf52_wdt_irq_handler+0x1c>)
   1ae40:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   1ae44:	f013 0f01 	tst.w	r3, #1
   1ae48:	d100      	bne.n	1ae4c <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   1ae4a:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   1ae4c:	4b02      	ldr	r3, [pc, #8]	; (1ae58 <nrf52_wdt_irq_handler+0x1c>)
   1ae4e:	2200      	movs	r2, #0
   1ae50:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   1ae54:	f7ff ffe6 	bl	1ae24 <nrf52_hal_wdt_default_handler>
   1ae58:	40010000 	.word	0x40010000

0001ae5c <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   1ae5c:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1ae5e:	4b19      	ldr	r3, [pc, #100]	; (1aec4 <hal_watchdog_init+0x68>)
   1ae60:	2201      	movs	r2, #1
   1ae62:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   1ae66:	4b18      	ldr	r3, [pc, #96]	; (1aec8 <hal_watchdog_init+0x6c>)
   1ae68:	4298      	cmp	r0, r3
   1ae6a:	d821      	bhi.n	1aeb0 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   1ae6c:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1ae70:	0153      	lsls	r3, r2, #5
   1ae72:	4a16      	ldr	r2, [pc, #88]	; (1aecc <hal_watchdog_init+0x70>)
   1ae74:	fba2 2303 	umull	r2, r3, r2, r3
   1ae78:	08db      	lsrs	r3, r3, #3
   1ae7a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1ae7e:	4b11      	ldr	r3, [pc, #68]	; (1aec4 <hal_watchdog_init+0x68>)
   1ae80:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1ae84:	4a12      	ldr	r2, [pc, #72]	; (1aed0 <hal_watchdog_init+0x74>)
   1ae86:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1ae88:	4912      	ldr	r1, [pc, #72]	; (1aed4 <hal_watchdog_init+0x78>)
   1ae8a:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1ae8e:	4a12      	ldr	r2, [pc, #72]	; (1aed8 <hal_watchdog_init+0x7c>)
   1ae90:	21e0      	movs	r1, #224	; 0xe0
   1ae92:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ae96:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   1ae9a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1ae9e:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   1aea0:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   1aea4:	f042 0201 	orr.w	r2, r2, #1
   1aea8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   1aeac:	2000      	movs	r0, #0
   1aeae:	bd08      	pop	{r3, pc}
        assert(0);
   1aeb0:	f7ed f986 	bl	81c0 <hal_debugger_connected>
   1aeb4:	b100      	cbz	r0, 1aeb8 <hal_watchdog_init+0x5c>
   1aeb6:	be01      	bkpt	0x0001
   1aeb8:	2300      	movs	r3, #0
   1aeba:	461a      	mov	r2, r3
   1aebc:	4619      	mov	r1, r3
   1aebe:	4618      	mov	r0, r3
   1aec0:	f7ee fd14 	bl	98ec <__assert_func>
   1aec4:	40010000 	.word	0x40010000
   1aec8:	02aaaaaa 	.word	0x02aaaaaa
   1aecc:	10624dd3 	.word	0x10624dd3
   1aed0:	e000ed00 	.word	0xe000ed00
   1aed4:	0001ae3d 	.word	0x0001ae3d
   1aed8:	e000e100 	.word	0xe000e100

0001aedc <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   1aedc:	4b02      	ldr	r3, [pc, #8]	; (1aee8 <hal_watchdog_enable+0xc>)
   1aede:	2201      	movs	r2, #1
   1aee0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   1aee4:	601a      	str	r2, [r3, #0]
}
   1aee6:	4770      	bx	lr
   1aee8:	40010000 	.word	0x40010000

0001aeec <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   1aeec:	4b02      	ldr	r3, [pc, #8]	; (1aef8 <hal_watchdog_tickle+0xc>)
   1aeee:	4a03      	ldr	r2, [pc, #12]	; (1aefc <hal_watchdog_tickle+0x10>)
   1aef0:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   1aef4:	4770      	bx	lr
   1aef6:	bf00      	nop
   1aef8:	40010000 	.word	0x40010000
   1aefc:	6e524635 	.word	0x6e524635

0001af00 <nrf52_periph_create_timers>:
static struct temperature_dev os_bsp_temp;
#endif

static void
nrf52_periph_create_timers(void)
{
   1af00:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TIMER_4)
    rc = hal_timer_init(4, NULL);
    assert(rc == 0);
#endif
#if MYNEWT_VAL(TIMER_5)
    rc = hal_timer_init(5, NULL);
   1af02:	2100      	movs	r1, #0
   1af04:	2005      	movs	r0, #5
   1af06:	f000 fa5d 	bl	1b3c4 <hal_timer_init>
    assert(rc == 0);
   1af0a:	b928      	cbnz	r0, 1af18 <nrf52_periph_create_timers+0x18>
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1af0c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1af10:	f000 fef1 	bl	1bcf6 <os_cputime_init>
    assert(rc == 0);
   1af14:	b950      	cbnz	r0, 1af2c <nrf52_periph_create_timers+0x2c>
#endif
}
   1af16:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1af18:	f7ed f952 	bl	81c0 <hal_debugger_connected>
   1af1c:	b100      	cbz	r0, 1af20 <nrf52_periph_create_timers+0x20>
   1af1e:	be01      	bkpt	0x0001
   1af20:	2300      	movs	r3, #0
   1af22:	461a      	mov	r2, r3
   1af24:	4619      	mov	r1, r3
   1af26:	4618      	mov	r0, r3
   1af28:	f7ee fce0 	bl	98ec <__assert_func>
    assert(rc == 0);
   1af2c:	f7ed f948 	bl	81c0 <hal_debugger_connected>
   1af30:	b100      	cbz	r0, 1af34 <nrf52_periph_create_timers+0x34>
   1af32:	be01      	bkpt	0x0001
   1af34:	2300      	movs	r3, #0
   1af36:	461a      	mov	r2, r3
   1af38:	4619      	mov	r1, r3
   1af3a:	4618      	mov	r0, r3
   1af3c:	f7ee fcd6 	bl	98ec <__assert_func>

0001af40 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1af40:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1af42:	4908      	ldr	r1, [pc, #32]	; (1af64 <nrf52_periph_create_i2c+0x24>)
   1af44:	2001      	movs	r0, #1
   1af46:	f000 f8d5 	bl	1b0f4 <hal_i2c_init>
    assert(rc == 0);
   1af4a:	b900      	cbnz	r0, 1af4e <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1af4c:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1af4e:	f7ed f937 	bl	81c0 <hal_debugger_connected>
   1af52:	b100      	cbz	r0, 1af56 <nrf52_periph_create_i2c+0x16>
   1af54:	be01      	bkpt	0x0001
   1af56:	2300      	movs	r3, #0
   1af58:	461a      	mov	r2, r3
   1af5a:	4619      	mov	r1, r3
   1af5c:	4618      	mov	r0, r3
   1af5e:	f7ee fcc5 	bl	98ec <__assert_func>
   1af62:	bf00      	nop
   1af64:	00029604 	.word	0x00029604

0001af68 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1af68:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1af6a:	2200      	movs	r2, #0
   1af6c:	4907      	ldr	r1, [pc, #28]	; (1af8c <nrf52_periph_create_spi+0x24>)
   1af6e:	4610      	mov	r0, r2
   1af70:	f7ff fe94 	bl	1ac9c <hal_spi_init>
    assert(rc == 0);
   1af74:	b900      	cbnz	r0, 1af78 <nrf52_periph_create_spi+0x10>
#else
    rc = hal_spi_init(3, (void *)&os_bsp_spi3m_cfg, HAL_SPI_TYPE_MASTER);
    assert(rc == 0);
#endif
#endif
}
   1af76:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1af78:	f7ed f922 	bl	81c0 <hal_debugger_connected>
   1af7c:	b100      	cbz	r0, 1af80 <nrf52_periph_create_spi+0x18>
   1af7e:	be01      	bkpt	0x0001
   1af80:	2300      	movs	r3, #0
   1af82:	461a      	mov	r2, r3
   1af84:	4619      	mov	r1, r3
   1af86:	4618      	mov	r0, r3
   1af88:	f7ee fcb0 	bl	98ec <__assert_func>
   1af8c:	00029610 	.word	0x00029610

0001af90 <nrf52_periph_create>:
#endif
}

void
nrf52_periph_create(void)
{
   1af90:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1af92:	f7ff ffb5 	bl	1af00 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1af96:	f7ff ffd3 	bl	1af40 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1af9a:	f7ff ffe5 	bl	1af68 <nrf52_periph_create_spi>
    nrf52_periph_create_temp();
}
   1af9e:	bd08      	pop	{r3, pc}

0001afa0 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   1afa0:	3801      	subs	r0, #1
   1afa2:	bf00      	nop
   1afa4:	bf00      	nop
   1afa6:	bf00      	nop
   1afa8:	bf00      	nop
   1afaa:	bf00      	nop
   1afac:	bf00      	nop
   1afae:	bf00      	nop
   1afb0:	bf00      	nop
   1afb2:	bf00      	nop
   1afb4:	bf00      	nop
   1afb6:	bf00      	nop
   1afb8:	bf00      	nop
   1afba:	bf00      	nop
   1afbc:	bf00      	nop
   1afbe:	bf00      	nop
   1afc0:	bf00      	nop
   1afc2:	bf00      	nop
   1afc4:	bf00      	nop
   1afc6:	bf00      	nop
   1afc8:	bf00      	nop
   1afca:	bf00      	nop
   1afcc:	bf00      	nop
   1afce:	bf00      	nop
   1afd0:	bf00      	nop
   1afd2:	bf00      	nop
   1afd4:	bf00      	nop
   1afd6:	bf00      	nop
   1afd8:	bf00      	nop
   1afda:	bf00      	nop
   1afdc:	bf00      	nop
   1afde:	bf00      	nop
   1afe0:	bf00      	nop
   1afe2:	bf00      	nop
   1afe4:	bf00      	nop
   1afe6:	bf00      	nop
   1afe8:	bf00      	nop
   1afea:	bf00      	nop
   1afec:	bf00      	nop
   1afee:	bf00      	nop
   1aff0:	bf00      	nop
   1aff2:	bf00      	nop
   1aff4:	bf00      	nop
   1aff6:	bf00      	nop
   1aff8:	bf00      	nop
   1affa:	bf00      	nop
   1affc:	bf00      	nop
   1affe:	bf00      	nop
   1b000:	bf00      	nop
   1b002:	bf00      	nop
   1b004:	bf00      	nop
   1b006:	bf00      	nop
   1b008:	bf00      	nop
   1b00a:	bf00      	nop
   1b00c:	bf00      	nop
   1b00e:	bf00      	nop
   1b010:	bf00      	nop
   1b012:	bf00      	nop
   1b014:	bf00      	nop
   1b016:	d1c3      	bne.n	1afa0 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   1b018:	4770      	bx	lr
	...

0001b01c <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   1b01c:	2801      	cmp	r0, #1
   1b01e:	d806      	bhi.n	1b02e <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   1b020:	4b06      	ldr	r3, [pc, #24]	; (1b03c <hal_i2c_resolve+0x20>)
   1b022:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b026:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   1b028:	b12b      	cbz	r3, 1b036 <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   1b02a:	2000      	movs	r0, #0
}
   1b02c:	4770      	bx	lr
        *out_i2c = NULL;
   1b02e:	2300      	movs	r3, #0
   1b030:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   1b032:	2002      	movs	r0, #2
   1b034:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   1b036:	2002      	movs	r0, #2
   1b038:	4770      	bx	lr
   1b03a:	bf00      	nop
   1b03c:	00029614 	.word	0x00029614

0001b040 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   1b040:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b044:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   1b048:	fa23 f000 	lsr.w	r0, r3, r0
}
   1b04c:	f000 0001 	and.w	r0, r0, #1
   1b050:	4770      	bx	lr

0001b052 <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   1b052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b056:	4605      	mov	r5, r0
   1b058:	460e      	mov	r6, r1
    sda_port = HAL_GPIO_PORT(sda_pin);
    scl_pin_ix = HAL_GPIO_INDEX(scl_pin);
    sda_pin_ix = HAL_GPIO_INDEX(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin_ix] = NRF52_SCL_PIN_CONF;
   1b05a:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1b05e:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   1b062:	f240 630c 	movw	r3, #1548	; 0x60c
   1b066:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin_ix] = NRF52_SDA_PIN_CONF;
   1b06a:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   1b06e:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   1b072:	2101      	movs	r1, #1
   1b074:	f7ff fb25 	bl	1a6c2 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   1b078:	2101      	movs	r1, #1
   1b07a:	4630      	mov	r0, r6
   1b07c:	f7ff fb21 	bl	1a6c2 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin_ix] = NRF52_SCL_PIN_CONF_CLR;
   1b080:	f240 630d 	movw	r3, #1549	; 0x60d
   1b084:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin_ix] = NRF52_SDA_PIN_CONF_CLR;
   1b088:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   1b08c:	2004      	movs	r0, #4
   1b08e:	f7ff ff87 	bl	1afa0 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   1b092:	2400      	movs	r4, #0
   1b094:	2c08      	cmp	r4, #8
   1b096:	dc14      	bgt.n	1b0c2 <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   1b098:	4630      	mov	r0, r6
   1b09a:	f7ff ffd1 	bl	1b040 <read_gpio_inbuffer>
   1b09e:	b978      	cbnz	r0, 1b0c0 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   1b0a0:	2100      	movs	r1, #0
   1b0a2:	4628      	mov	r0, r5
   1b0a4:	f7ff fb0d 	bl	1a6c2 <hal_gpio_write>
        hal_i2c_delay_us(4);
   1b0a8:	2004      	movs	r0, #4
   1b0aa:	f7ff ff79 	bl	1afa0 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   1b0ae:	2101      	movs	r1, #1
   1b0b0:	4628      	mov	r0, r5
   1b0b2:	f7ff fb06 	bl	1a6c2 <hal_gpio_write>
        hal_i2c_delay_us(4);
   1b0b6:	2004      	movs	r0, #4
   1b0b8:	f7ff ff72 	bl	1afa0 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   1b0bc:	3401      	adds	r4, #1
   1b0be:	e7e9      	b.n	1b094 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   1b0c0:	b154      	cbz	r4, 1b0d8 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   1b0c2:	2100      	movs	r1, #0
   1b0c4:	4630      	mov	r0, r6
   1b0c6:	f7ff fafc 	bl	1a6c2 <hal_gpio_write>
    hal_i2c_delay_us(4);
   1b0ca:	2004      	movs	r0, #4
   1b0cc:	f7ff ff68 	bl	1afa0 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   1b0d0:	2101      	movs	r1, #1
   1b0d2:	4630      	mov	r0, r6
   1b0d4:	f7ff faf5 	bl	1a6c2 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin_ix] = NRF52_SCL_PIN_CONF;
   1b0d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   1b0dc:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   1b0e0:	f240 620c 	movw	r2, #1548	; 0x60c
   1b0e4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin_ix] = NRF52_SDA_PIN_CONF;
   1b0e8:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   1b0ec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1b0f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b0f4 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   1b0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0f6:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   1b0f8:	b1a9      	cbz	r1, 1b126 <hal_i2c_init+0x32>
   1b0fa:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1b0fc:	a901      	add	r1, sp, #4
   1b0fe:	f7ff ff8d 	bl	1b01c <hal_i2c_resolve>
    if (rc != 0) {
   1b102:	4606      	mov	r6, r0
   1b104:	2800      	cmp	r0, #0
   1b106:	d139      	bne.n	1b17c <hal_i2c_init+0x88>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   1b108:	9b01      	ldr	r3, [sp, #4]
   1b10a:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   1b10c:	68a3      	ldr	r3, [r4, #8]
   1b10e:	2bfa      	cmp	r3, #250	; 0xfa
   1b110:	d039      	beq.n	1b186 <hal_i2c_init+0x92>
   1b112:	d912      	bls.n	1b13a <hal_i2c_init+0x46>
   1b114:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   1b118:	d033      	beq.n	1b182 <hal_i2c_init+0x8e>
   1b11a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   1b11e:	d135      	bne.n	1b18c <hal_i2c_init+0x98>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   1b120:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   1b124:	e00d      	b.n	1b142 <hal_i2c_init+0x4e>
    assert(usercfg != NULL);
   1b126:	f7ed f84b 	bl	81c0 <hal_debugger_connected>
   1b12a:	b100      	cbz	r0, 1b12e <hal_i2c_init+0x3a>
   1b12c:	be01      	bkpt	0x0001
   1b12e:	2300      	movs	r3, #0
   1b130:	461a      	mov	r2, r3
   1b132:	4619      	mov	r1, r3
   1b134:	4618      	mov	r0, r3
   1b136:	f7ee fbd9 	bl	98ec <__assert_func>
    switch (cfg->i2c_frequency) {
   1b13a:	2b64      	cmp	r3, #100	; 0x64
   1b13c:	d126      	bne.n	1b18c <hal_i2c_init+0x98>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   1b13e:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   1b142:	6861      	ldr	r1, [r4, #4]
   1b144:	6820      	ldr	r0, [r4, #0]
   1b146:	f7ff ff84 	bl	1b052 <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   1b14a:	6823      	ldr	r3, [r4, #0]
   1b14c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1b150:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b154:	f240 610c 	movw	r1, #1548	; 0x60c
   1b158:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   1b15c:	6863      	ldr	r3, [r4, #4]
   1b15e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1b162:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   1b166:	6823      	ldr	r3, [r4, #0]
   1b168:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   1b16c:	6863      	ldr	r3, [r4, #4]
   1b16e:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   1b172:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1b176:	2305      	movs	r3, #5
   1b178:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   1b17c:	4630      	mov	r0, r6
   1b17e:	b003      	add	sp, #12
   1b180:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   1b182:	4f03      	ldr	r7, [pc, #12]	; (1b190 <hal_i2c_init+0x9c>)
        break;
   1b184:	e7dd      	b.n	1b142 <hal_i2c_init+0x4e>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   1b186:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   1b18a:	e7da      	b.n	1b142 <hal_i2c_init+0x4e>
        rc = HAL_I2C_ERR_INVAL;
   1b18c:	2602      	movs	r6, #2
   1b18e:	e7f5      	b.n	1b17c <hal_i2c_init+0x88>
   1b190:	06147ae9 	.word	0x06147ae9

0001b194 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1b194:	2301      	movs	r3, #1
   1b196:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1b198:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1b19c:	4770      	bx	lr
	...

0001b1a0 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1b1a0:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1b1a2:	7883      	ldrb	r3, [r0, #2]
   1b1a4:	2b00      	cmp	r3, #0
   1b1a6:	d050      	beq.n	1b24a <nrf_timer_set_ocmp+0xaa>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1b1a8:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1b1aa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b1ae:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1b1b2:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1b1b4:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1b1b8:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1b1bc:	b11d      	cbz	r5, 1b1c6 <nrf_timer_set_ocmp+0x26>
            temp += (1UL << 24);
   1b1be:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1b1c2:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1b1c6:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1b1c8:	1acb      	subs	r3, r1, r3
         * to be handled differently. TICK event is used to have interrupt on
         * each subsequent tick so we won't miss any and in case we detected
         * mentioned extra tick during calculations, interrupt is triggered
         * immediately. Delta 0 or less means we should always fire immediately.
         */
        if (delta_t < 1) {
   1b1ca:	2b00      	cmp	r3, #0
   1b1cc:	dd17      	ble.n	1b1fe <nrf_timer_set_ocmp+0x5e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        } else if (delta_t < 3) {
   1b1ce:	2b02      	cmp	r3, #2
   1b1d0:	dc27      	bgt.n	1b222 <nrf_timer_set_ocmp+0x82>
            rtctimer->INTENSET = RTC_INTENSET_TICK_Msk;
   1b1d2:	2301      	movs	r3, #1
   1b1d4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
            if (rtctimer->COUNTER != cntr) {
   1b1d8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
   1b1dc:	42a3      	cmp	r3, r4
   1b1de:	d02e      	beq.n	1b23e <nrf_timer_set_ocmp+0x9e>
                NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1b1e0:	7842      	ldrb	r2, [r0, #1]
   1b1e2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1b1e4:	2b00      	cmp	r3, #0
   1b1e6:	db2a      	blt.n	1b23e <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b1e8:	f002 021f 	and.w	r2, r2, #31
   1b1ec:	095b      	lsrs	r3, r3, #5
   1b1ee:	2101      	movs	r1, #1
   1b1f0:	fa01 f202 	lsl.w	r2, r1, r2
   1b1f4:	3340      	adds	r3, #64	; 0x40
   1b1f6:	4926      	ldr	r1, [pc, #152]	; (1b290 <nrf_timer_set_ocmp+0xf0>)
   1b1f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1b1fc:	e01f      	b.n	1b23e <nrf_timer_set_ocmp+0x9e>
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   1b1fe:	2301      	movs	r3, #1
   1b200:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1b204:	7842      	ldrb	r2, [r0, #1]
   1b206:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1b208:	2b00      	cmp	r3, #0
   1b20a:	db18      	blt.n	1b23e <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b20c:	f002 021f 	and.w	r2, r2, #31
   1b210:	095b      	lsrs	r3, r3, #5
   1b212:	2101      	movs	r1, #1
   1b214:	fa01 f202 	lsl.w	r2, r1, r2
   1b218:	3340      	adds	r3, #64	; 0x40
   1b21a:	491d      	ldr	r1, [pc, #116]	; (1b290 <nrf_timer_set_ocmp+0xf0>)
   1b21c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1b220:	e00d      	b.n	1b23e <nrf_timer_set_ocmp+0x9e>
            }
        } else {
            rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   1b222:	2001      	movs	r0, #1
   1b224:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308

            if (delta_t < (1UL << 24)) {
   1b228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1b22c:	d208      	bcs.n	1b240 <nrf_timer_set_ocmp+0xa0>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1b22e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1b232:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1b236:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b23a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1b23e:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1b240:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1b244:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1b248:	e7f5      	b.n	1b236 <nrf_timer_set_ocmp+0x96>
   1b24a:	460d      	mov	r5, r1
   1b24c:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1b24e:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1b250:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1b254:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1b258:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1b25c:	2200      	movs	r2, #0
   1b25e:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1b262:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1b266:	f7ff ff95 	bl	1b194 <nrf_read_timer_cntr>
   1b26a:	1b40      	subs	r0, r0, r5
   1b26c:	2800      	cmp	r0, #0
   1b26e:	dbe6      	blt.n	1b23e <nrf_timer_set_ocmp+0x9e>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1b270:	7862      	ldrb	r2, [r4, #1]
   1b272:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1b274:	2b00      	cmp	r3, #0
   1b276:	dbe2      	blt.n	1b23e <nrf_timer_set_ocmp+0x9e>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b278:	f002 021f 	and.w	r2, r2, #31
   1b27c:	095b      	lsrs	r3, r3, #5
   1b27e:	2101      	movs	r1, #1
   1b280:	fa01 f202 	lsl.w	r2, r1, r2
   1b284:	3340      	adds	r3, #64	; 0x40
   1b286:	4902      	ldr	r1, [pc, #8]	; (1b290 <nrf_timer_set_ocmp+0xf0>)
   1b288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1b28c:	e7d7      	b.n	1b23e <nrf_timer_set_ocmp+0x9e>
   1b28e:	bf00      	nop
   1b290:	e000e100 	.word	0xe000e100

0001b294 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1b294:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1b298:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1b29c:	4770      	bx	lr

0001b29e <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1b29e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1b2a2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    rtctimer->INTENCLR = RTC_INTENCLR_TICK_Msk;
   1b2a6:	2301      	movs	r3, #1
   1b2a8:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1b2ac:	4770      	bx	lr
	...

0001b2b0 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1b2b0:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1b2b2:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b2b4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b2b8:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1b2ba:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1b2bc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1b2c0:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1b2c4:	b1ad      	cbz	r5, 1b2f2 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1b2c6:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1b2ca:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1b2cc:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1b2d0:	2500      	movs	r5, #0
   1b2d2:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1b2d6:	7840      	ldrb	r0, [r0, #1]
   1b2d8:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1b2da:	42aa      	cmp	r2, r5
   1b2dc:	db09      	blt.n	1b2f2 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b2de:	f000 001f 	and.w	r0, r0, #31
   1b2e2:	0952      	lsrs	r2, r2, #5
   1b2e4:	2501      	movs	r5, #1
   1b2e6:	fa05 f000 	lsl.w	r0, r5, r0
   1b2ea:	3240      	adds	r2, #64	; 0x40
   1b2ec:	4d04      	ldr	r5, [pc, #16]	; (1b300 <hal_timer_read_bsptimer+0x50>)
   1b2ee:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1b2f2:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1b2f6:	b904      	cbnz	r4, 1b2fa <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1b2f8:	b662      	cpsie	i

    return tcntr;
}
   1b2fa:	bc30      	pop	{r4, r5}
   1b2fc:	4770      	bx	lr
   1b2fe:	bf00      	nop
   1b300:	e000e100 	.word	0xe000e100

0001b304 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1b304:	b570      	push	{r4, r5, r6, lr}
   1b306:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b308:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b30c:	b672      	cpsid	i
   1b30e:	e012      	b.n	1b336 <hal_timer_chk_queue+0x32>
    __HAL_DISABLE_INTERRUPTS(ctx);
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
        if (bsptimer->tmr_rtc) {
            tcntr = hal_timer_read_bsptimer(bsptimer);
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1b310:	6928      	ldr	r0, [r5, #16]
   1b312:	f7ff ff3f 	bl	1b194 <nrf_read_timer_cntr>
        }
        if ((int32_t)(tcntr - timer->expiry) >= 0) {
   1b316:	68e3      	ldr	r3, [r4, #12]
   1b318:	1ac0      	subs	r0, r0, r3
   1b31a:	2800      	cmp	r0, #0
   1b31c:	db17      	blt.n	1b34e <hal_timer_chk_queue+0x4a>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1b31e:	6923      	ldr	r3, [r4, #16]
   1b320:	b193      	cbz	r3, 1b348 <hal_timer_chk_queue+0x44>
   1b322:	6962      	ldr	r2, [r4, #20]
   1b324:	615a      	str	r2, [r3, #20]
   1b326:	6963      	ldr	r3, [r4, #20]
   1b328:	6922      	ldr	r2, [r4, #16]
   1b32a:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1b32c:	2300      	movs	r3, #0
   1b32e:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1b330:	6863      	ldr	r3, [r4, #4]
   1b332:	68a0      	ldr	r0, [r4, #8]
   1b334:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1b336:	696c      	ldr	r4, [r5, #20]
   1b338:	b14c      	cbz	r4, 1b34e <hal_timer_chk_queue+0x4a>
        if (bsptimer->tmr_rtc) {
   1b33a:	78ab      	ldrb	r3, [r5, #2]
   1b33c:	2b00      	cmp	r3, #0
   1b33e:	d0e7      	beq.n	1b310 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1b340:	4628      	mov	r0, r5
   1b342:	f7ff ffb5 	bl	1b2b0 <hal_timer_read_bsptimer>
   1b346:	e7e6      	b.n	1b316 <hal_timer_chk_queue+0x12>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1b348:	6963      	ldr	r3, [r4, #20]
   1b34a:	61ab      	str	r3, [r5, #24]
   1b34c:	e7eb      	b.n	1b326 <hal_timer_chk_queue+0x22>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1b34e:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1b350:	b133      	cbz	r3, 1b360 <hal_timer_chk_queue+0x5c>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1b352:	68d9      	ldr	r1, [r3, #12]
   1b354:	4628      	mov	r0, r5
   1b356:	f7ff ff23 	bl	1b1a0 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1b35a:	b906      	cbnz	r6, 1b35e <hal_timer_chk_queue+0x5a>
  __ASM volatile ("cpsie i" : : : "memory");
   1b35c:	b662      	cpsie	i
}
   1b35e:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1b360:	78ab      	ldrb	r3, [r5, #2]
   1b362:	b11b      	cbz	r3, 1b36c <hal_timer_chk_queue+0x68>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1b364:	6928      	ldr	r0, [r5, #16]
   1b366:	f7ff ff9a 	bl	1b29e <nrf_rtc_disable_ocmp>
   1b36a:	e7f6      	b.n	1b35a <hal_timer_chk_queue+0x56>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1b36c:	6928      	ldr	r0, [r5, #16]
   1b36e:	f7ff ff91 	bl	1b294 <nrf_timer_disable_ocmp>
   1b372:	e7f2      	b.n	1b35a <hal_timer_chk_queue+0x56>

0001b374 <hal_rtc_timer_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_5)
static void
hal_rtc_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1b374:	b510      	push	{r4, lr}
    NRF_RTC_Type *rtctimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1b376:	6904      	ldr	r4, [r0, #16]
    compare = rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT];
   1b378:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
    if (compare) {
   1b37c:	b113      	cbz	r3, 1b384 <hal_rtc_timer_irq_handler+0x10>
       rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT] = 0;
   1b37e:	2300      	movs	r3, #0
   1b380:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    }

    tick = rtctimer->EVENTS_TICK;
   1b384:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    if (tick) {
   1b388:	b113      	cbz	r3, 1b390 <hal_rtc_timer_irq_handler+0x1c>
        rtctimer->EVENTS_TICK = 0;
   1b38a:	2300      	movs	r3, #0
   1b38c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    }

    overflow = rtctimer->EVENTS_OVRFLW;
   1b390:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    if (overflow) {
   1b394:	b133      	cbz	r3, 1b3a4 <hal_rtc_timer_irq_handler+0x30>
        rtctimer->EVENTS_OVRFLW = 0;
   1b396:	2300      	movs	r3, #0
   1b398:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        bsptimer->tmr_cntr += (1UL << 24);
   1b39c:	6843      	ldr	r3, [r0, #4]
   1b39e:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
   1b3a2:	6043      	str	r3, [r0, #4]
    }

    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1b3a4:	6883      	ldr	r3, [r0, #8]
   1b3a6:	3301      	adds	r3, #1
   1b3a8:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    hal_timer_chk_queue(bsptimer);
   1b3aa:	f7ff ffab 	bl	1b304 <hal_timer_chk_queue>

    /* Recommended by nordic to make sure interrupts are cleared */
    compare = rtctimer->EVENTS_COMPARE[NRF_RTC_TIMER_CC_INT];
   1b3ae:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148

    os_trace_isr_exit();
}
   1b3b2:	bd10      	pop	{r4, pc}

0001b3b4 <nrf52_timer5_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_5)
void
nrf52_timer5_irq_handler(void)
{
   1b3b4:	b508      	push	{r3, lr}
    hal_rtc_timer_irq_handler(&nrf52_hal_timer5);
   1b3b6:	4802      	ldr	r0, [pc, #8]	; (1b3c0 <nrf52_timer5_irq_handler+0xc>)
   1b3b8:	f7ff ffdc 	bl	1b374 <hal_rtc_timer_irq_handler>
}
   1b3bc:	bd08      	pop	{r3, pc}
   1b3be:	bf00      	nop
   1b3c0:	2000809c 	.word	0x2000809c

0001b3c4 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b3c4:	2805      	cmp	r0, #5
   1b3c6:	dc20      	bgt.n	1b40a <hal_timer_init+0x46>
   1b3c8:	4b14      	ldr	r3, [pc, #80]	; (1b41c <hal_timer_init+0x58>)
   1b3ca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1b3ce:	b1f3      	cbz	r3, 1b40e <hal_timer_init+0x4a>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1b3d0:	781a      	ldrb	r2, [r3, #0]
   1b3d2:	b9f2      	cbnz	r2, 1b412 <hal_timer_init+0x4e>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1b3d4:	2805      	cmp	r0, #5
   1b3d6:	d11e      	bne.n	1b416 <hal_timer_init+0x52>
#if MYNEWT_VAL(TIMER_5)
    case 5:
        irq_num = RTC0_IRQn;
        hwtimer = NRF_RTC0;
        irq_isr = nrf52_timer5_irq_handler;
        bsptimer->tmr_rtc = 1;
   1b3d8:	2201      	movs	r2, #1
   1b3da:	709a      	strb	r2, [r3, #2]
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1b3dc:	4a10      	ldr	r2, [pc, #64]	; (1b420 <hal_timer_init+0x5c>)
   1b3de:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1b3e0:	220b      	movs	r2, #11
   1b3e2:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b3e4:	4b0f      	ldr	r3, [pc, #60]	; (1b424 <hal_timer_init+0x60>)
   1b3e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1b3ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1b3ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1b3f2:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b3f6:	22e0      	movs	r2, #224	; 0xe0
   1b3f8:	f883 230b 	strb.w	r2, [r3, #779]	; 0x30b
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b3fc:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1b400:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b402:	4a09      	ldr	r2, [pc, #36]	; (1b428 <hal_timer_init+0x64>)
   1b404:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1b406:	2000      	movs	r0, #0
   1b408:	4770      	bx	lr

err:
    return rc;
   1b40a:	2016      	movs	r0, #22
   1b40c:	4770      	bx	lr
   1b40e:	2016      	movs	r0, #22
   1b410:	4770      	bx	lr
   1b412:	2016      	movs	r0, #22
   1b414:	4770      	bx	lr
   1b416:	2016      	movs	r0, #22
}
   1b418:	4770      	bx	lr
   1b41a:	bf00      	nop
   1b41c:	0002961c 	.word	0x0002961c
   1b420:	4000b000 	.word	0x4000b000
   1b424:	e000e100 	.word	0xe000e100
   1b428:	0001b3b5 	.word	0x0001b3b5

0001b42c <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b42c:	2805      	cmp	r0, #5
   1b42e:	f300 8097 	bgt.w	1b560 <hal_timer_config+0x134>
{
   1b432:	b430      	push	{r4, r5}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b434:	4b56      	ldr	r3, [pc, #344]	; (1b590 <hal_timer_config+0x164>)
   1b436:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1b43a:	2c00      	cmp	r4, #0
   1b43c:	f000 8092 	beq.w	1b564 <hal_timer_config+0x138>

#if MYNEWT_VAL(TIMER_5)
    if (timer_num == 5) {
   1b440:	2805      	cmp	r0, #5
   1b442:	d01d      	beq.n	1b480 <hal_timer_config+0x54>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1b444:	4b53      	ldr	r3, [pc, #332]	; (1b594 <hal_timer_config+0x168>)
   1b446:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1b44a:	7823      	ldrb	r3, [r4, #0]
   1b44c:	2b00      	cmp	r3, #0
   1b44e:	f040 8093 	bne.w	1b578 <hal_timer_config+0x14c>
   1b452:	2900      	cmp	r1, #0
   1b454:	f000 8093 	beq.w	1b57e <hal_timer_config+0x152>
   1b458:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1b45c:	f200 8091 	bhi.w	1b582 <hal_timer_config+0x156>
        (bsptimer->tmr_reg == NULL)) {
   1b460:	6922      	ldr	r2, [r4, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1b462:	2a00      	cmp	r2, #0
   1b464:	f000 808f 	beq.w	1b586 <hal_timer_config+0x15a>
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1b468:	2901      	cmp	r1, #1
   1b46a:	d03f      	beq.n	1b4ec <hal_timer_config+0xc0>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1b46c:	2301      	movs	r3, #1
   1b46e:	2b09      	cmp	r3, #9
   1b470:	d83c      	bhi.n	1b4ec <hal_timer_config+0xc0>
            if (div <= (1 << prescaler)) {
   1b472:	2201      	movs	r2, #1
   1b474:	409a      	lsls	r2, r3
   1b476:	428a      	cmp	r2, r1
   1b478:	d22e      	bcs.n	1b4d8 <hal_timer_config+0xac>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1b47a:	3301      	adds	r3, #1
   1b47c:	b2db      	uxtb	r3, r3
   1b47e:	e7f6      	b.n	1b46e <hal_timer_config+0x42>
        if (bsptimer->tmr_enabled || (freq_hz != 32768) ||
   1b480:	7823      	ldrb	r3, [r4, #0]
   1b482:	2b00      	cmp	r3, #0
   1b484:	d170      	bne.n	1b568 <hal_timer_config+0x13c>
   1b486:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   1b48a:	d16f      	bne.n	1b56c <hal_timer_config+0x140>
            (bsptimer->tmr_reg == NULL)) {
   1b48c:	6923      	ldr	r3, [r4, #16]
        if (bsptimer->tmr_enabled || (freq_hz != 32768) ||
   1b48e:	2b00      	cmp	r3, #0
   1b490:	d06e      	beq.n	1b570 <hal_timer_config+0x144>
        bsptimer->tmr_freq = freq_hz;
   1b492:	60e1      	str	r1, [r4, #12]
        bsptimer->tmr_enabled = 1;
   1b494:	2201      	movs	r2, #1
   1b496:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b498:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b49c:	b672      	cpsid	i
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1b49e:	6923      	ldr	r3, [r4, #16]
        rtctimer->TASKS_STOP = 1;
   1b4a0:	605a      	str	r2, [r3, #4]
        rtctimer->TASKS_CLEAR = 1;
   1b4a2:	609a      	str	r2, [r3, #8]
        rtctimer->PRESCALER = 0;
   1b4a4:	2100      	movs	r1, #0
   1b4a6:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
        rtctimer->EVENTS_OVRFLW = 0;
   1b4aa:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        rtctimer->INTENSET = RTC_INTENSET_OVRFLW_Msk;
   1b4ae:	2102      	movs	r1, #2
   1b4b0:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
        rtctimer->TASKS_START = 1;
   1b4b4:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1b4b6:	7862      	ldrb	r2, [r4, #1]
   1b4b8:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1b4ba:	2b00      	cmp	r3, #0
   1b4bc:	db08      	blt.n	1b4d0 <hal_timer_config+0xa4>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b4be:	f002 021f 	and.w	r2, r2, #31
   1b4c2:	095b      	lsrs	r3, r3, #5
   1b4c4:	2101      	movs	r1, #1
   1b4c6:	fa01 f202 	lsl.w	r2, r1, r2
   1b4ca:	4933      	ldr	r1, [pc, #204]	; (1b598 <hal_timer_config+0x16c>)
   1b4cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        __HAL_ENABLE_INTERRUPTS(ctx);
   1b4d0:	2800      	cmp	r0, #0
   1b4d2:	d14f      	bne.n	1b574 <hal_timer_config+0x148>
  __ASM volatile ("cpsie i" : : : "memory");
   1b4d4:	b662      	cpsie	i
   1b4d6:	e050      	b.n	1b57a <hal_timer_config+0x14e>
                min_delta = div - (1 << (prescaler - 1));
   1b4d8:	1e58      	subs	r0, r3, #1
   1b4da:	2501      	movs	r5, #1
   1b4dc:	fa05 f000 	lsl.w	r0, r5, r0
   1b4e0:	1a08      	subs	r0, r1, r0
                max_delta = (1 << prescaler) - div;
   1b4e2:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1b4e4:	4288      	cmp	r0, r1
   1b4e6:	d201      	bcs.n	1b4ec <hal_timer_config+0xc0>
                    prescaler -= 1;
   1b4e8:	3b01      	subs	r3, #1
   1b4ea:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1b4ec:	4a29      	ldr	r2, [pc, #164]	; (1b594 <hal_timer_config+0x168>)
   1b4ee:	411a      	asrs	r2, r3
   1b4f0:	60e2      	str	r2, [r4, #12]
    bsptimer->tmr_enabled = 1;
   1b4f2:	2201      	movs	r2, #1
   1b4f4:	7022      	strb	r2, [r4, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b4f6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b4fa:	b672      	cpsid	i
    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

#if MYNEWT_VAL_CHOICE(MCU_HFCLK_SOURCE, HFXO)
    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1b4fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1b500:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1b504:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1b508:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1b50c:	d00c      	beq.n	1b528 <hal_timer_config+0xfc>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1b50e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1b512:	2100      	movs	r1, #0
   1b514:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1b518:	2101      	movs	r1, #1
   1b51a:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1b51c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1b520:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1b524:	2a00      	cmp	r2, #0
   1b526:	d0f9      	beq.n	1b51c <hal_timer_config+0xf0>
                break;
            }
        }
    }
#endif
    hwtimer = bsptimer->tmr_reg;
   1b528:	6922      	ldr	r2, [r4, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1b52a:	2101      	movs	r1, #1
   1b52c:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1b52e:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1b530:	2500      	movs	r5, #0
   1b532:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1b536:	2503      	movs	r5, #3
   1b538:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1b53c:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1b540:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1b542:	7862      	ldrb	r2, [r4, #1]
   1b544:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1b546:	2b00      	cmp	r3, #0
   1b548:	db07      	blt.n	1b55a <hal_timer_config+0x12e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1b54a:	f002 021f 	and.w	r2, r2, #31
   1b54e:	095b      	lsrs	r3, r3, #5
   1b550:	fa01 f202 	lsl.w	r2, r1, r2
   1b554:	4910      	ldr	r1, [pc, #64]	; (1b598 <hal_timer_config+0x16c>)
   1b556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1b55a:	b9b0      	cbnz	r0, 1b58a <hal_timer_config+0x15e>
  __ASM volatile ("cpsie i" : : : "memory");
   1b55c:	b662      	cpsie	i
   1b55e:	e00c      	b.n	1b57a <hal_timer_config+0x14e>

    return 0;

err:
    return rc;
   1b560:	2016      	movs	r0, #22
}
   1b562:	4770      	bx	lr
    return rc;
   1b564:	2016      	movs	r0, #22
   1b566:	e008      	b.n	1b57a <hal_timer_config+0x14e>
   1b568:	2016      	movs	r0, #22
   1b56a:	e006      	b.n	1b57a <hal_timer_config+0x14e>
   1b56c:	2016      	movs	r0, #22
   1b56e:	e004      	b.n	1b57a <hal_timer_config+0x14e>
   1b570:	2016      	movs	r0, #22
   1b572:	e002      	b.n	1b57a <hal_timer_config+0x14e>
        return 0;
   1b574:	2000      	movs	r0, #0
   1b576:	e000      	b.n	1b57a <hal_timer_config+0x14e>
    return rc;
   1b578:	2016      	movs	r0, #22
}
   1b57a:	bc30      	pop	{r4, r5}
   1b57c:	4770      	bx	lr
    return rc;
   1b57e:	2016      	movs	r0, #22
   1b580:	e7fb      	b.n	1b57a <hal_timer_config+0x14e>
   1b582:	2016      	movs	r0, #22
   1b584:	e7f9      	b.n	1b57a <hal_timer_config+0x14e>
   1b586:	2016      	movs	r0, #22
   1b588:	e7f7      	b.n	1b57a <hal_timer_config+0x14e>
    return 0;
   1b58a:	2000      	movs	r0, #0
   1b58c:	e7f5      	b.n	1b57a <hal_timer_config+0x14e>
   1b58e:	bf00      	nop
   1b590:	0002961c 	.word	0x0002961c
   1b594:	00f42400 	.word	0x00f42400
   1b598:	e000e100 	.word	0xe000e100

0001b59c <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1b59c:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b59e:	2805      	cmp	r0, #5
   1b5a0:	dc0c      	bgt.n	1b5bc <hal_timer_read+0x20>
   1b5a2:	4b0b      	ldr	r3, [pc, #44]	; (1b5d0 <hal_timer_read+0x34>)
   1b5a4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1b5a8:	b140      	cbz	r0, 1b5bc <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1b5aa:	7883      	ldrb	r3, [r0, #2]
   1b5ac:	b91b      	cbnz	r3, 1b5b6 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1b5ae:	6900      	ldr	r0, [r0, #16]
   1b5b0:	f7ff fdf0 	bl	1b194 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1b5b4:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1b5b6:	f7ff fe7b 	bl	1b2b0 <hal_timer_read_bsptimer>
   1b5ba:	e7fb      	b.n	1b5b4 <hal_timer_read+0x18>
    assert(0);
   1b5bc:	f7ec fe00 	bl	81c0 <hal_debugger_connected>
   1b5c0:	b100      	cbz	r0, 1b5c4 <hal_timer_read+0x28>
   1b5c2:	be01      	bkpt	0x0001
   1b5c4:	2300      	movs	r3, #0
   1b5c6:	461a      	mov	r2, r3
   1b5c8:	4619      	mov	r1, r3
   1b5ca:	4618      	mov	r0, r3
   1b5cc:	f7ee f98e 	bl	98ec <__assert_func>
   1b5d0:	0002961c 	.word	0x0002961c

0001b5d4 <hal_timer_set_cb>:
                 void *arg)
{
    int rc;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b5d4:	2805      	cmp	r0, #5
   1b5d6:	dc0c      	bgt.n	1b5f2 <hal_timer_set_cb+0x1e>
{
   1b5d8:	b410      	push	{r4}
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b5da:	4c08      	ldr	r4, [pc, #32]	; (1b5fc <hal_timer_set_cb+0x28>)
   1b5dc:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   1b5e0:	b14c      	cbz	r4, 1b5f6 <hal_timer_set_cb+0x22>

    timer->cb_func = cb_func;
   1b5e2:	604a      	str	r2, [r1, #4]
    timer->cb_arg = arg;
   1b5e4:	608b      	str	r3, [r1, #8]
    timer->link.tqe_prev = NULL;
   1b5e6:	2000      	movs	r0, #0
   1b5e8:	6148      	str	r0, [r1, #20]
    timer->bsp_timer = bsptimer;
   1b5ea:	600c      	str	r4, [r1, #0]

    rc = 0;

err:
    return rc;
}
   1b5ec:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b5f0:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b5f2:	2016      	movs	r0, #22
}
   1b5f4:	4770      	bx	lr
    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1b5f6:	2016      	movs	r0, #22
    return rc;
   1b5f8:	e7f8      	b.n	1b5ec <hal_timer_set_cb+0x18>
   1b5fa:	bf00      	nop
   1b5fc:	0002961c 	.word	0x0002961c

0001b600 <hal_timer_start_at>:
{
    uint32_t ctx;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1b600:	2800      	cmp	r0, #0
   1b602:	d03d      	beq.n	1b680 <hal_timer_start_at+0x80>
{
   1b604:	b538      	push	{r3, r4, r5, lr}
   1b606:	4604      	mov	r4, r0
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1b608:	6943      	ldr	r3, [r0, #20]
   1b60a:	b10b      	cbz	r3, 1b610 <hal_timer_start_at+0x10>
        (timer->cb_func == NULL)) {
        return EINVAL;
   1b60c:	2016      	movs	r0, #22
    }

    __HAL_ENABLE_INTERRUPTS(ctx);

    return 0;
}
   1b60e:	bd38      	pop	{r3, r4, r5, pc}
        (timer->cb_func == NULL)) {
   1b610:	6843      	ldr	r3, [r0, #4]
    if ((timer == NULL) || (timer->link.tqe_prev != NULL) ||
   1b612:	2b00      	cmp	r3, #0
   1b614:	d036      	beq.n	1b684 <hal_timer_start_at+0x84>
    bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   1b616:	6800      	ldr	r0, [r0, #0]
    timer->expiry = tick;
   1b618:	60e1      	str	r1, [r4, #12]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b61a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b61e:	b672      	cpsid	i
    if (TAILQ_EMPTY(&bsptimer->hal_timer_q)) {
   1b620:	6943      	ldr	r3, [r0, #20]
   1b622:	b13b      	cbz	r3, 1b634 <hal_timer_start_at+0x34>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   1b624:	b1bb      	cbz	r3, 1b656 <hal_timer_start_at+0x56>
            if ((int32_t)(timer->expiry - entry->expiry) < 0) {
   1b626:	68e2      	ldr	r2, [r4, #12]
   1b628:	68d9      	ldr	r1, [r3, #12]
   1b62a:	1a52      	subs	r2, r2, r1
   1b62c:	2a00      	cmp	r2, #0
   1b62e:	db0a      	blt.n	1b646 <hal_timer_start_at+0x46>
        TAILQ_FOREACH(entry, &bsptimer->hal_timer_q, link) {
   1b630:	691b      	ldr	r3, [r3, #16]
   1b632:	e7f7      	b.n	1b624 <hal_timer_start_at+0x24>
        TAILQ_INSERT_HEAD(&bsptimer->hal_timer_q, timer, link);
   1b634:	4622      	mov	r2, r4
   1b636:	f842 3f10 	str.w	r3, [r2, #16]!
   1b63a:	6182      	str	r2, [r0, #24]
   1b63c:	4603      	mov	r3, r0
   1b63e:	f843 4f14 	str.w	r4, [r3, #20]!
   1b642:	6163      	str	r3, [r4, #20]
   1b644:	e008      	b.n	1b658 <hal_timer_start_at+0x58>
                TAILQ_INSERT_BEFORE(entry, timer, link);
   1b646:	695a      	ldr	r2, [r3, #20]
   1b648:	6162      	str	r2, [r4, #20]
   1b64a:	6123      	str	r3, [r4, #16]
   1b64c:	695a      	ldr	r2, [r3, #20]
   1b64e:	6014      	str	r4, [r2, #0]
   1b650:	f104 0210 	add.w	r2, r4, #16
   1b654:	615a      	str	r2, [r3, #20]
        if (!entry) {
   1b656:	b133      	cbz	r3, 1b666 <hal_timer_start_at+0x66>
    if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   1b658:	6943      	ldr	r3, [r0, #20]
   1b65a:	42a3      	cmp	r3, r4
   1b65c:	d00c      	beq.n	1b678 <hal_timer_start_at+0x78>
    __HAL_ENABLE_INTERRUPTS(ctx);
   1b65e:	b99d      	cbnz	r5, 1b688 <hal_timer_start_at+0x88>
  __ASM volatile ("cpsie i" : : : "memory");
   1b660:	b662      	cpsie	i
    return 0;
   1b662:	2000      	movs	r0, #0
   1b664:	e7d3      	b.n	1b60e <hal_timer_start_at+0xe>
            TAILQ_INSERT_TAIL(&bsptimer->hal_timer_q, timer, link);
   1b666:	6123      	str	r3, [r4, #16]
   1b668:	6983      	ldr	r3, [r0, #24]
   1b66a:	6163      	str	r3, [r4, #20]
   1b66c:	6983      	ldr	r3, [r0, #24]
   1b66e:	601c      	str	r4, [r3, #0]
   1b670:	f104 0310 	add.w	r3, r4, #16
   1b674:	6183      	str	r3, [r0, #24]
   1b676:	e7ef      	b.n	1b658 <hal_timer_start_at+0x58>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1b678:	68e1      	ldr	r1, [r4, #12]
   1b67a:	f7ff fd91 	bl	1b1a0 <nrf_timer_set_ocmp>
   1b67e:	e7ee      	b.n	1b65e <hal_timer_start_at+0x5e>
        return EINVAL;
   1b680:	2016      	movs	r0, #22
}
   1b682:	4770      	bx	lr
        return EINVAL;
   1b684:	2016      	movs	r0, #22
   1b686:	e7c2      	b.n	1b60e <hal_timer_start_at+0xe>
    return 0;
   1b688:	2000      	movs	r0, #0
   1b68a:	e7c0      	b.n	1b60e <hal_timer_start_at+0xe>

0001b68c <hal_timer_stop>:
    uint32_t ctx;
    int reset_ocmp;
    struct hal_timer *entry;
    struct nrf52_hal_timer *bsptimer;

    if (timer == NULL) {
   1b68c:	b360      	cbz	r0, 1b6e8 <hal_timer_stop+0x5c>
{
   1b68e:	b570      	push	{r4, r5, r6, lr}
   1b690:	4603      	mov	r3, r0
        return EINVAL;
    }

   bsptimer = (struct nrf52_hal_timer *)timer->bsp_timer;
   1b692:	6801      	ldr	r1, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b694:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b698:	b672      	cpsid	i

    __HAL_DISABLE_INTERRUPTS(ctx);

    if (timer->link.tqe_prev != NULL) {
   1b69a:	6942      	ldr	r2, [r0, #20]
   1b69c:	b18a      	cbz	r2, 1b6c2 <hal_timer_stop+0x36>
        reset_ocmp = 0;
        if (timer == TAILQ_FIRST(&bsptimer->hal_timer_q)) {
   1b69e:	6948      	ldr	r0, [r1, #20]
   1b6a0:	4298      	cmp	r0, r3
   1b6a2:	d012      	beq.n	1b6ca <hal_timer_stop+0x3e>
        reset_ocmp = 0;
   1b6a4:	2500      	movs	r5, #0
            /* If first on queue, we will need to reset OCMP */
            entry = TAILQ_NEXT(timer, link);
            reset_ocmp = 1;
        }
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1b6a6:	6918      	ldr	r0, [r3, #16]
   1b6a8:	b190      	cbz	r0, 1b6d0 <hal_timer_stop+0x44>
   1b6aa:	6142      	str	r2, [r0, #20]
   1b6ac:	695a      	ldr	r2, [r3, #20]
   1b6ae:	6918      	ldr	r0, [r3, #16]
   1b6b0:	6010      	str	r0, [r2, #0]
        timer->link.tqe_prev = NULL;
   1b6b2:	2200      	movs	r2, #0
   1b6b4:	615a      	str	r2, [r3, #20]
        if (reset_ocmp) {
   1b6b6:	b125      	cbz	r5, 1b6c2 <hal_timer_stop+0x36>
            if (entry) {
   1b6b8:	b166      	cbz	r6, 1b6d4 <hal_timer_stop+0x48>
                nrf_timer_set_ocmp((struct nrf52_hal_timer *)entry->bsp_timer,
   1b6ba:	68f1      	ldr	r1, [r6, #12]
   1b6bc:	6830      	ldr	r0, [r6, #0]
   1b6be:	f7ff fd6f 	bl	1b1a0 <nrf_timer_set_ocmp>
                }
            }
        }
    }

    __HAL_ENABLE_INTERRUPTS(ctx);
   1b6c2:	b99c      	cbnz	r4, 1b6ec <hal_timer_stop+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1b6c4:	b662      	cpsie	i

    return 0;
   1b6c6:	2000      	movs	r0, #0
}
   1b6c8:	bd70      	pop	{r4, r5, r6, pc}
            entry = TAILQ_NEXT(timer, link);
   1b6ca:	691e      	ldr	r6, [r3, #16]
            reset_ocmp = 1;
   1b6cc:	2501      	movs	r5, #1
   1b6ce:	e7ea      	b.n	1b6a6 <hal_timer_stop+0x1a>
        TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1b6d0:	618a      	str	r2, [r1, #24]
   1b6d2:	e7eb      	b.n	1b6ac <hal_timer_stop+0x20>
                if (bsptimer->tmr_rtc) {
   1b6d4:	788b      	ldrb	r3, [r1, #2]
   1b6d6:	b11b      	cbz	r3, 1b6e0 <hal_timer_stop+0x54>
                    nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1b6d8:	6908      	ldr	r0, [r1, #16]
   1b6da:	f7ff fde0 	bl	1b29e <nrf_rtc_disable_ocmp>
   1b6de:	e7f0      	b.n	1b6c2 <hal_timer_stop+0x36>
                    nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1b6e0:	6908      	ldr	r0, [r1, #16]
   1b6e2:	f7ff fdd7 	bl	1b294 <nrf_timer_disable_ocmp>
   1b6e6:	e7ec      	b.n	1b6c2 <hal_timer_stop+0x36>
        return EINVAL;
   1b6e8:	2016      	movs	r0, #22
}
   1b6ea:	4770      	bx	lr
    return 0;
   1b6ec:	2000      	movs	r0, #0
   1b6ee:	e7eb      	b.n	1b6c8 <hal_timer_stop+0x3c>

0001b6f0 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1b6f0:	4770      	bx	lr
	...

0001b6f4 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1b6f4:	4b08      	ldr	r3, [pc, #32]	; (1b718 <sensor_mgr_remove+0x24>)
   1b6f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b6f8:	4282      	cmp	r2, r0
   1b6fa:	d104      	bne.n	1b706 <sensor_mgr_remove+0x12>
   1b6fc:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1b700:	631a      	str	r2, [r3, #48]	; 0x30
   1b702:	4770      	bx	lr
   1b704:	461a      	mov	r2, r3
   1b706:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1b70a:	4283      	cmp	r3, r0
   1b70c:	d1fa      	bne.n	1b704 <sensor_mgr_remove+0x10>
   1b70e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1b712:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1b716:	4770      	bx	lr
   1b718:	200080d0 	.word	0x200080d0

0001b71c <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1b71c:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1b71e:	6a03      	ldr	r3, [r0, #32]
   1b720:	b993      	cbnz	r3, 1b748 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b722:	4b15      	ldr	r3, [pc, #84]	; (1b778 <sensor_mgr_insert+0x5c>)
   1b724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1b726:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b728:	e002      	b.n	1b730 <sensor_mgr_insert+0x14>
            prev = cursor;
   1b72a:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b72c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1b730:	2b00      	cmp	r3, #0
   1b732:	d1fa      	bne.n	1b72a <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1b734:	b1c9      	cbz	r1, 1b76a <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1b736:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1b73a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1b73e:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1b742:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b746:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b748:	4b0b      	ldr	r3, [pc, #44]	; (1b778 <sensor_mgr_insert+0x5c>)
   1b74a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1b74c:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b74e:	2b00      	cmp	r3, #0
   1b750:	d0f0      	beq.n	1b734 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1b752:	6a1a      	ldr	r2, [r3, #32]
   1b754:	2a00      	cmp	r2, #0
   1b756:	d0ed      	beq.n	1b734 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1b758:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1b75a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1b75c:	1b12      	subs	r2, r2, r4
   1b75e:	2a00      	cmp	r2, #0
   1b760:	dbe8      	blt.n	1b734 <sensor_mgr_insert+0x18>
        prev = cursor;
   1b762:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1b764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1b768:	e7f1      	b.n	1b74e <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1b76a:	4b03      	ldr	r3, [pc, #12]	; (1b778 <sensor_mgr_insert+0x5c>)
   1b76c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1b76e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1b772:	6318      	str	r0, [r3, #48]	; 0x30
   1b774:	e7e5      	b.n	1b742 <sensor_mgr_insert+0x26>
   1b776:	bf00      	nop
   1b778:	200080d0 	.word	0x200080d0

0001b77c <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1b77c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1b77e:	fab0 f080 	clz	r0, r0
   1b782:	0940      	lsrs	r0, r0, #5
   1b784:	4770      	bx	lr
	...

0001b788 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1b788:	4b01      	ldr	r3, [pc, #4]	; (1b790 <sensor_mgr_evq_set+0x8>)
   1b78a:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1b78c:	4770      	bx	lr
   1b78e:	bf00      	nop
   1b790:	200080d0 	.word	0x200080d0

0001b794 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1b794:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1b798:	e9d1 2300 	ldrd	r2, r3, [r1]
   1b79c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1b7a0:	ea02 0b04 	and.w	fp, r2, r4
   1b7a4:	ea03 0c05 	and.w	ip, r3, r5
   1b7a8:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1b7ac:	ea0b 0200 	and.w	r2, fp, r0
   1b7b0:	ea0c 0301 	and.w	r3, ip, r1
   1b7b4:	4313      	orrs	r3, r2
}
   1b7b6:	bf14      	ite	ne
   1b7b8:	2001      	movne	r0, #1
   1b7ba:	2000      	moveq	r0, #0
   1b7bc:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1b7c0:	4770      	bx	lr

0001b7c2 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1b7c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b7c6:	b083      	sub	sp, #12
   1b7c8:	4605      	mov	r5, r0
   1b7ca:	4689      	mov	r9, r1
   1b7cc:	4690      	mov	r8, r2
   1b7ce:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1b7d2:	790b      	ldrb	r3, [r1, #4]
   1b7d4:	2b01      	cmp	r3, #1
   1b7d6:	d013      	beq.n	1b800 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1b7d8:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1b7da:	e000      	b.n	1b7de <sensor_read_data_func+0x1c>
   1b7dc:	6924      	ldr	r4, [r4, #16]
   1b7de:	b17c      	cbz	r4, 1b800 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1b7e0:	e9d4 0100 	ldrd	r0, r1, [r4]
   1b7e4:	ea00 0206 	and.w	r2, r0, r6
   1b7e8:	ea01 0307 	and.w	r3, r1, r7
   1b7ec:	4313      	orrs	r3, r2
   1b7ee:	d0f5      	beq.n	1b7dc <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1b7f0:	68a3      	ldr	r3, [r4, #8]
   1b7f2:	68e1      	ldr	r1, [r4, #12]
   1b7f4:	e9cd 6700 	strd	r6, r7, [sp]
   1b7f8:	4642      	mov	r2, r8
   1b7fa:	4628      	mov	r0, r5
   1b7fc:	4798      	blx	r3
   1b7fe:	e7ed      	b.n	1b7dc <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1b800:	f8d9 3000 	ldr.w	r3, [r9]
   1b804:	b14b      	cbz	r3, 1b81a <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1b806:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1b80a:	e9cd 6700 	strd	r6, r7, [sp]
   1b80e:	4642      	mov	r2, r8
   1b810:	4628      	mov	r0, r5
   1b812:	4798      	blx	r3
    }

    return (0);
}
   1b814:	b003      	add	sp, #12
   1b816:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1b81a:	2000      	movs	r0, #0
   1b81c:	e7fa      	b.n	1b814 <sensor_read_data_func+0x52>
	...

0001b820 <sensor_base_ts_update_event>:
{
   1b820:	b530      	push	{r4, r5, lr}
   1b822:	b087      	sub	sp, #28
    ticks = os_time_get();
   1b824:	f7ef fdd6 	bl	b3d4 <os_time_get>
   1b828:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1b82a:	a901      	add	r1, sp, #4
   1b82c:	a802      	add	r0, sp, #8
   1b82e:	f7ef fe0f 	bl	b450 <os_gettimeofday>
    if (rc) {
   1b832:	b138      	cbz	r0, 1b844 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1b834:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1b838:	4621      	mov	r1, r4
   1b83a:	4809      	ldr	r0, [pc, #36]	; (1b860 <sensor_base_ts_update_event+0x40>)
   1b83c:	f7ee fa2a 	bl	9c94 <os_callout_reset>
}
   1b840:	b007      	add	sp, #28
   1b842:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1b844:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1b848:	4d06      	ldr	r5, [pc, #24]	; (1b864 <sensor_base_ts_update_event+0x44>)
   1b84a:	ab06      	add	r3, sp, #24
   1b84c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1b850:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1b854:	9b01      	ldr	r3, [sp, #4]
   1b856:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1b858:	f000 fa79 	bl	1bd4e <os_cputime_get32>
   1b85c:	6168      	str	r0, [r5, #20]
   1b85e:	e7eb      	b.n	1b838 <sensor_base_ts_update_event+0x18>
   1b860:	20008198 	.word	0x20008198
   1b864:	200080b8 	.word	0x200080b8

0001b868 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1b868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b86a:	4607      	mov	r7, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1b86c:	f000 fa6f 	bl	1bd4e <os_cputime_get32>
   1b870:	4604      	mov	r4, r0

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
             sensor_base_ts.st_cputime);
   1b872:	4e0e      	ldr	r6, [pc, #56]	; (1b8ac <sensor_up_timestamp+0x44>)
   1b874:	6970      	ldr	r0, [r6, #20]
    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1b876:	1a20      	subs	r0, r4, r0
   1b878:	f000 fa88 	bl	1bd8c <os_cputime_ticks_to_usecs>

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1b87c:	647c      	str	r4, [r7, #68]	; 0x44
   1b87e:	6174      	str	r4, [r6, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1b880:	e9d6 4500 	ldrd	r4, r5, [r6]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1b884:	68b3      	ldr	r3, [r6, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1b886:	4418      	add	r0, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1b888:	4b09      	ldr	r3, [pc, #36]	; (1b8b0 <sensor_up_timestamp+0x48>)
   1b88a:	fba3 2300 	umull	r2, r3, r3, r0
   1b88e:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1b890:	18e1      	adds	r1, r4, r3
   1b892:	f145 0200 	adc.w	r2, r5, #0
   1b896:	e9c6 1200 	strd	r1, r2, [r6]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1b89a:	e9c7 120c 	strd	r1, r2, [r7, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1b89e:	4a05      	ldr	r2, [pc, #20]	; (1b8b4 <sensor_up_timestamp+0x4c>)
   1b8a0:	fb02 0213 	mls	r2, r2, r3, r0
    sensor_base_ts.st_ostv.tv_usec  =
   1b8a4:	60b2      	str	r2, [r6, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1b8a6:	63ba      	str	r2, [r7, #56]	; 0x38

}
   1b8a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b8aa:	bf00      	nop
   1b8ac:	200080b8 	.word	0x200080b8
   1b8b0:	431bde83 	.word	0x431bde83
   1b8b4:	000f4240 	.word	0x000f4240

0001b8b8 <sensor_mgr_lock>:
{
   1b8b8:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1b8ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b8be:	4804      	ldr	r0, [pc, #16]	; (1b8d0 <sensor_mgr_lock+0x18>)
   1b8c0:	f7ef fa40 	bl	ad44 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1b8c4:	b108      	cbz	r0, 1b8ca <sensor_mgr_lock+0x12>
   1b8c6:	2809      	cmp	r0, #9
   1b8c8:	d000      	beq.n	1b8cc <sensor_mgr_lock+0x14>
}
   1b8ca:	bd08      	pop	{r3, pc}
        return (0);
   1b8cc:	2000      	movs	r0, #0
   1b8ce:	e7fc      	b.n	1b8ca <sensor_mgr_lock+0x12>
   1b8d0:	200080d0 	.word	0x200080d0

0001b8d4 <sensor_mgr_unlock>:
{
   1b8d4:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1b8d6:	4802      	ldr	r0, [pc, #8]	; (1b8e0 <sensor_mgr_unlock+0xc>)
   1b8d8:	f7ef f9d4 	bl	ac84 <os_mutex_release>
}
   1b8dc:	bd08      	pop	{r3, pc}
   1b8de:	bf00      	nop
   1b8e0:	200080d0 	.word	0x200080d0

0001b8e4 <sensor_mgr_evq_get>:
}
   1b8e4:	4b01      	ldr	r3, [pc, #4]	; (1b8ec <sensor_mgr_evq_get+0x8>)
   1b8e6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1b8e8:	4770      	bx	lr
   1b8ea:	bf00      	nop
   1b8ec:	200080d0 	.word	0x200080d0

0001b8f0 <sensor_mgr_init>:
{
   1b8f0:	b570      	push	{r4, r5, r6, lr}
   1b8f2:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1b8f4:	f7ee fbf2 	bl	a0dc <os_eventq_dflt_get>
   1b8f8:	f7ff ff46 	bl	1b788 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1b8fc:	4b1e      	ldr	r3, [pc, #120]	; (1b978 <sensor_mgr_init+0x88>)
   1b8fe:	9300      	str	r3, [sp, #0]
   1b900:	4b1e      	ldr	r3, [pc, #120]	; (1b97c <sensor_mgr_init+0x8c>)
   1b902:	2218      	movs	r2, #24
   1b904:	2105      	movs	r1, #5
   1b906:	481e      	ldr	r0, [pc, #120]	; (1b980 <sensor_mgr_init+0x90>)
   1b908:	f7ef f874 	bl	a9f4 <os_mempool_init>
    assert(rc == OS_OK);
   1b90c:	bb50      	cbnz	r0, 1b964 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1b90e:	f7ff ffe9 	bl	1b8e4 <sensor_mgr_evq_get>
   1b912:	4e1c      	ldr	r6, [pc, #112]	; (1b984 <sensor_mgr_init+0x94>)
   1b914:	2300      	movs	r3, #0
   1b916:	4a1c      	ldr	r2, [pc, #112]	; (1b988 <sensor_mgr_init+0x98>)
   1b918:	4601      	mov	r1, r0
   1b91a:	f106 000c 	add.w	r0, r6, #12
   1b91e:	f7ee f98d 	bl	9c3c <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1b922:	ad04      	add	r5, sp, #16
   1b924:	a903      	add	r1, sp, #12
   1b926:	4628      	mov	r0, r5
   1b928:	f7ef fd92 	bl	b450 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1b92c:	4c17      	ldr	r4, [pc, #92]	; (1b98c <sensor_mgr_init+0x9c>)
   1b92e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1b932:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1b936:	9b03      	ldr	r3, [sp, #12]
   1b938:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1b93a:	f000 fa08 	bl	1bd4e <os_cputime_get32>
   1b93e:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1b940:	f7ff ffd0 	bl	1b8e4 <sensor_mgr_evq_get>
   1b944:	4c12      	ldr	r4, [pc, #72]	; (1b990 <sensor_mgr_init+0xa0>)
   1b946:	2300      	movs	r3, #0
   1b948:	4a12      	ldr	r2, [pc, #72]	; (1b994 <sensor_mgr_init+0xa4>)
   1b94a:	4601      	mov	r1, r0
   1b94c:	4620      	mov	r0, r4
   1b94e:	f7ee f975 	bl	9c3c <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1b952:	2180      	movs	r1, #128	; 0x80
   1b954:	4620      	mov	r0, r4
   1b956:	f7ee f99d 	bl	9c94 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1b95a:	4630      	mov	r0, r6
   1b95c:	f7ef f988 	bl	ac70 <os_mutex_init>
}
   1b960:	b008      	add	sp, #32
   1b962:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1b964:	f7ec fc2c 	bl	81c0 <hal_debugger_connected>
   1b968:	b100      	cbz	r0, 1b96c <sensor_mgr_init+0x7c>
   1b96a:	be01      	bkpt	0x0001
   1b96c:	2300      	movs	r3, #0
   1b96e:	461a      	mov	r2, r3
   1b970:	4619      	mov	r1, r3
   1b972:	4618      	mov	r0, r3
   1b974:	f7ed ffba 	bl	98ec <__assert_func>
   1b978:	00029634 	.word	0x00029634
   1b97c:	20008104 	.word	0x20008104
   1b980:	2000817c 	.word	0x2000817c
   1b984:	200080d0 	.word	0x200080d0
   1b988:	0001bb65 	.word	0x0001bb65
   1b98c:	200080b8 	.word	0x200080b8
   1b990:	20008198 	.word	0x20008198
   1b994:	0001b821 	.word	0x0001b821

0001b998 <sensor_pkg_init>:
{
   1b998:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1b99a:	f7ff ffa9 	bl	1b8f0 <sensor_mgr_init>
}
   1b99e:	bd08      	pop	{r3, pc}

0001b9a0 <sensor_lock>:
{
   1b9a0:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1b9a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1b9a6:	3004      	adds	r0, #4
   1b9a8:	f7ef f9cc 	bl	ad44 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1b9ac:	b108      	cbz	r0, 1b9b2 <sensor_lock+0x12>
   1b9ae:	2809      	cmp	r0, #9
   1b9b0:	d000      	beq.n	1b9b4 <sensor_lock+0x14>
}
   1b9b2:	bd08      	pop	{r3, pc}
        return (0);
   1b9b4:	2000      	movs	r0, #0
   1b9b6:	e7fc      	b.n	1b9b2 <sensor_lock+0x12>

0001b9b8 <sensor_unlock>:
{
   1b9b8:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1b9ba:	3004      	adds	r0, #4
   1b9bc:	f7ef f962 	bl	ac84 <os_mutex_release>
}
   1b9c0:	bd08      	pop	{r3, pc}

0001b9c2 <sensor_update_nextrun>:
{
   1b9c2:	b530      	push	{r4, r5, lr}
   1b9c4:	b083      	sub	sp, #12
   1b9c6:	4604      	mov	r4, r0
   1b9c8:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1b9ca:	a901      	add	r1, sp, #4
   1b9cc:	6a00      	ldr	r0, [r0, #32]
   1b9ce:	f7ef fd5b 	bl	b488 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1b9d2:	4620      	mov	r0, r4
   1b9d4:	f7ff ffe4 	bl	1b9a0 <sensor_lock>
    sensor_mgr_remove(sensor);
   1b9d8:	4620      	mov	r0, r4
   1b9da:	f7ff fe8b 	bl	1b6f4 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1b9de:	9b01      	ldr	r3, [sp, #4]
   1b9e0:	441d      	add	r5, r3
   1b9e2:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1b9e4:	4620      	mov	r0, r4
   1b9e6:	f7ff fe99 	bl	1b71c <sensor_mgr_insert>
    sensor_unlock(sensor);
   1b9ea:	4620      	mov	r0, r4
   1b9ec:	f7ff ffe4 	bl	1b9b8 <sensor_unlock>
}
   1b9f0:	b003      	add	sp, #12
   1b9f2:	bd30      	pop	{r4, r5, pc}

0001b9f4 <sensor_calc_nextrun_delta>:
{
   1b9f4:	b538      	push	{r3, r4, r5, lr}
   1b9f6:	4605      	mov	r5, r0
   1b9f8:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1b9fa:	f7ff ffd1 	bl	1b9a0 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1b9fe:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1ba00:	1b0c      	subs	r4, r1, r4
   1ba02:	d404      	bmi.n	1ba0e <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1ba04:	4628      	mov	r0, r5
   1ba06:	f7ff ffd7 	bl	1b9b8 <sensor_unlock>
}
   1ba0a:	4620      	mov	r0, r4
   1ba0c:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1ba0e:	2400      	movs	r4, #0
   1ba10:	e7f8      	b.n	1ba04 <sensor_calc_nextrun_delta+0x10>
	...

0001ba14 <sensor_find_min_nextrun_sensor>:
{
   1ba14:	b570      	push	{r4, r5, r6, lr}
   1ba16:	4606      	mov	r6, r0
   1ba18:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1ba1a:	f7ff ff4d 	bl	1b8b8 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1ba1e:	4b05      	ldr	r3, [pc, #20]	; (1ba34 <sensor_find_min_nextrun_sensor+0x20>)
   1ba20:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1ba22:	4631      	mov	r1, r6
   1ba24:	4620      	mov	r0, r4
   1ba26:	f7ff ffe5 	bl	1b9f4 <sensor_calc_nextrun_delta>
   1ba2a:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1ba2c:	f7ff ff52 	bl	1b8d4 <sensor_mgr_unlock>
}
   1ba30:	4620      	mov	r0, r4
   1ba32:	bd70      	pop	{r4, r5, r6, pc}
   1ba34:	200080d0 	.word	0x200080d0

0001ba38 <sensor_mgr_register>:
{
   1ba38:	b538      	push	{r3, r4, r5, lr}
   1ba3a:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1ba3c:	f7ff ff3c 	bl	1b8b8 <sensor_mgr_lock>
    if (rc != 0) {
   1ba40:	4604      	mov	r4, r0
   1ba42:	b108      	cbz	r0, 1ba48 <sensor_mgr_register+0x10>
}
   1ba44:	4620      	mov	r0, r4
   1ba46:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1ba48:	4628      	mov	r0, r5
   1ba4a:	f7ff ffa9 	bl	1b9a0 <sensor_lock>
    if (rc != 0) {
   1ba4e:	4604      	mov	r4, r0
   1ba50:	2800      	cmp	r0, #0
   1ba52:	d1f7      	bne.n	1ba44 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1ba54:	4628      	mov	r0, r5
   1ba56:	f7ff fe61 	bl	1b71c <sensor_mgr_insert>
    sensor_unlock(sensor);
   1ba5a:	4628      	mov	r0, r5
   1ba5c:	f7ff ffac 	bl	1b9b8 <sensor_unlock>
    sensor_mgr_unlock();
   1ba60:	f7ff ff38 	bl	1b8d4 <sensor_mgr_unlock>
    return (0);
   1ba64:	e7ee      	b.n	1ba44 <sensor_mgr_register+0xc>

0001ba66 <sensor_init>:
{
   1ba66:	b538      	push	{r3, r4, r5, lr}
   1ba68:	4604      	mov	r4, r0
   1ba6a:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1ba6c:	2288      	movs	r2, #136	; 0x88
   1ba6e:	2100      	movs	r1, #0
   1ba70:	f7ef fec5 	bl	b7fe <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1ba74:	1d20      	adds	r0, r4, #4
   1ba76:	f7ef f8fb 	bl	ac70 <os_mutex_init>
    if (rc != 0) {
   1ba7a:	4603      	mov	r3, r0
   1ba7c:	b900      	cbnz	r0, 1ba80 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1ba7e:	6025      	str	r5, [r4, #0]
}
   1ba80:	4618      	mov	r0, r3
   1ba82:	bd38      	pop	{r3, r4, r5, pc}

0001ba84 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1ba84:	b530      	push	{r4, r5, lr}
   1ba86:	b089      	sub	sp, #36	; 0x24
   1ba88:	4604      	mov	r4, r0
   1ba8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1ba8e:	f7ff ff87 	bl	1b9a0 <sensor_lock>
    if (rc) {
   1ba92:	4605      	mov	r5, r0
   1ba94:	b9f8      	cbnz	r0, 1bad6 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1ba96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1ba98:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1ba9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1ba9c:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1ba9e:	a904      	add	r1, sp, #16
   1baa0:	4620      	mov	r0, r4
   1baa2:	f7ff fe77 	bl	1b794 <sensor_mgr_match_bytype>
   1baa6:	b1e0      	cbz	r0, 1bae2 <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1baa8:	4620      	mov	r0, r4
   1baaa:	f7ff fedd 	bl	1b868 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1baae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1bab0:	6819      	ldr	r1, [r3, #0]
   1bab2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1bab4:	9302      	str	r3, [sp, #8]
   1bab6:	ab06      	add	r3, sp, #24
   1bab8:	9301      	str	r3, [sp, #4]
   1baba:	4b0b      	ldr	r3, [pc, #44]	; (1bae8 <sensor_read+0x64>)
   1babc:	9300      	str	r3, [sp, #0]
   1babe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bac2:	4620      	mov	r0, r4
   1bac4:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1bac6:	4605      	mov	r5, r0
   1bac8:	b128      	cbz	r0, 1bad6 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1baca:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1bacc:	b11b      	cbz	r3, 1bad6 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1bace:	4602      	mov	r2, r0
   1bad0:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1bad2:	4620      	mov	r0, r4
   1bad4:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1bad6:	4620      	mov	r0, r4
   1bad8:	f7ff ff6e 	bl	1b9b8 <sensor_unlock>
    return (rc);
}
   1badc:	4628      	mov	r0, r5
   1bade:	b009      	add	sp, #36	; 0x24
   1bae0:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1bae2:	f06f 0503 	mvn.w	r5, #3
   1bae6:	e7f6      	b.n	1bad6 <sensor_read+0x52>
   1bae8:	0001b7c3 	.word	0x0001b7c3

0001baec <sensor_mgr_poll_bytype>:
{
   1baec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1baee:	b085      	sub	sp, #20
   1baf0:	4616      	mov	r6, r2
   1baf2:	461f      	mov	r7, r3
   1baf4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1baf6:	b10c      	cbz	r4, 1bafc <sensor_mgr_poll_bytype+0x10>
   1baf8:	8aa3      	ldrh	r3, [r4, #20]
   1bafa:	b9cb      	cbnz	r3, 1bb30 <sensor_mgr_poll_bytype+0x44>
   1bafc:	4632      	mov	r2, r6
   1bafe:	463b      	mov	r3, r7
   1bb00:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1bb02:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bb06:	9102      	str	r1, [sp, #8]
   1bb08:	2100      	movs	r1, #0
   1bb0a:	9101      	str	r1, [sp, #4]
   1bb0c:	9100      	str	r1, [sp, #0]
   1bb0e:	f7ff ffb9 	bl	1ba84 <sensor_read>
        sensor_lock(sensor);
   1bb12:	4628      	mov	r0, r5
   1bb14:	f7ff ff44 	bl	1b9a0 <sensor_lock>
        if (stt) {
   1bb18:	b12c      	cbz	r4, 1bb26 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1bb1a:	8aa3      	ldrh	r3, [r4, #20]
   1bb1c:	b91b      	cbnz	r3, 1bb26 <sensor_mgr_poll_bytype+0x3a>
   1bb1e:	8a63      	ldrh	r3, [r4, #18]
   1bb20:	b10b      	cbz	r3, 1bb26 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1bb22:	3b01      	subs	r3, #1
   1bb24:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1bb26:	4628      	mov	r0, r5
   1bb28:	f7ff ff46 	bl	1b9b8 <sensor_unlock>
}
   1bb2c:	b005      	add	sp, #20
   1bb2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1bb30:	3b01      	subs	r3, #1
   1bb32:	82a3      	strh	r3, [r4, #20]
}
   1bb34:	e7fa      	b.n	1bb2c <sensor_mgr_poll_bytype+0x40>

0001bb36 <sensor_poll_per_type_trait>:
{
   1bb36:	b570      	push	{r4, r5, r6, lr}
   1bb38:	b082      	sub	sp, #8
   1bb3a:	4605      	mov	r5, r0
   1bb3c:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1bb3e:	f7ff ff2f 	bl	1b9a0 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1bb42:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1bb44:	e007      	b.n	1bb56 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1bb46:	e9d4 2300 	ldrd	r2, r3, [r4]
   1bb4a:	9601      	str	r6, [sp, #4]
   1bb4c:	9400      	str	r4, [sp, #0]
   1bb4e:	4628      	mov	r0, r5
   1bb50:	f7ff ffcc 	bl	1baec <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1bb54:	6a24      	ldr	r4, [r4, #32]
   1bb56:	2c00      	cmp	r4, #0
   1bb58:	d1f5      	bne.n	1bb46 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1bb5a:	4628      	mov	r0, r5
   1bb5c:	f7ff ff2c 	bl	1b9b8 <sensor_unlock>
}
   1bb60:	b002      	add	sp, #8
   1bb62:	bd70      	pop	{r4, r5, r6, pc}

0001bb64 <sensor_mgr_wakeup_event>:
{
   1bb64:	b570      	push	{r4, r5, r6, lr}
   1bb66:	b084      	sub	sp, #16
    now = os_time_get();
   1bb68:	f7ef fc34 	bl	b3d4 <os_time_get>
   1bb6c:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1bb6e:	f7ff fea3 	bl	1b8b8 <sensor_mgr_lock>
   1bb72:	e012      	b.n	1bb9a <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1bb74:	4620      	mov	r0, r4
   1bb76:	f7ff ff1f 	bl	1b9b8 <sensor_unlock>
            sensor_mgr_unlock();
   1bb7a:	f7ff feab 	bl	1b8d4 <sensor_mgr_unlock>
}
   1bb7e:	b004      	add	sp, #16
   1bb80:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1bb82:	4632      	mov	r2, r6
   1bb84:	4629      	mov	r1, r5
   1bb86:	4620      	mov	r0, r4
   1bb88:	f7ff ffd5 	bl	1bb36 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1bb8c:	4629      	mov	r1, r5
   1bb8e:	4620      	mov	r0, r4
   1bb90:	f7ff ff17 	bl	1b9c2 <sensor_update_nextrun>
        sensor_unlock(cursor);
   1bb94:	4620      	mov	r0, r4
   1bb96:	f7ff ff0f 	bl	1b9b8 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1bb9a:	a903      	add	r1, sp, #12
   1bb9c:	4628      	mov	r0, r5
   1bb9e:	f7ff ff39 	bl	1ba14 <sensor_find_min_nextrun_sensor>
   1bba2:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1bba4:	f7ff fefc 	bl	1b9a0 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1bba8:	6a23      	ldr	r3, [r4, #32]
   1bbaa:	2b00      	cmp	r3, #0
   1bbac:	d0e2      	beq.n	1bb74 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1bbae:	9e03      	ldr	r6, [sp, #12]
   1bbb0:	b96e      	cbnz	r6, 1bbce <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1bbb2:	4620      	mov	r0, r4
   1bbb4:	f7ff fde2 	bl	1b77c <sensor_type_traits_empty>
   1bbb8:	2800      	cmp	r0, #0
   1bbba:	d0e2      	beq.n	1bb82 <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1bbbc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1bbc0:	9501      	str	r5, [sp, #4]
   1bbc2:	2100      	movs	r1, #0
   1bbc4:	9100      	str	r1, [sp, #0]
   1bbc6:	4620      	mov	r0, r4
   1bbc8:	f7ff ff90 	bl	1baec <sensor_mgr_poll_bytype>
   1bbcc:	e7de      	b.n	1bb8c <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1bbce:	f7ff fe81 	bl	1b8d4 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1bbd2:	9903      	ldr	r1, [sp, #12]
   1bbd4:	4801      	ldr	r0, [pc, #4]	; (1bbdc <sensor_mgr_wakeup_event+0x78>)
   1bbd6:	f7ee f85d 	bl	9c94 <os_callout_reset>
   1bbda:	e7d0      	b.n	1bb7e <sensor_mgr_wakeup_event+0x1a>
   1bbdc:	200080dc 	.word	0x200080dc

0001bbe0 <put_le16>:
put_le16(void *buf, uint16_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   1bbe0:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   1bbe2:	0a09      	lsrs	r1, r1, #8
   1bbe4:	7041      	strb	r1, [r0, #1]
}
   1bbe6:	4770      	bx	lr

0001bbe8 <put_le32>:
put_le32(void *buf, uint32_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   1bbe8:	7001      	strb	r1, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   1bbea:	f3c1 2307 	ubfx	r3, r1, #8, #8
   1bbee:	7043      	strb	r3, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   1bbf0:	f3c1 4307 	ubfx	r3, r1, #16, #8
   1bbf4:	7083      	strb	r3, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   1bbf6:	0e09      	lsrs	r1, r1, #24
   1bbf8:	70c1      	strb	r1, [r0, #3]
}
   1bbfa:	4770      	bx	lr

0001bbfc <put_le64>:
put_le64(void *buf, uint64_t x)
{
    uint8_t *u8ptr;

    u8ptr = buf;
    u8ptr[0] = (uint8_t)x;
   1bbfc:	7002      	strb	r2, [r0, #0]
    u8ptr[1] = (uint8_t)(x >> 8);
   1bbfe:	f3c2 2107 	ubfx	r1, r2, #8, #8
   1bc02:	7041      	strb	r1, [r0, #1]
    u8ptr[2] = (uint8_t)(x >> 16);
   1bc04:	f3c2 4107 	ubfx	r1, r2, #16, #8
   1bc08:	7081      	strb	r1, [r0, #2]
    u8ptr[3] = (uint8_t)(x >> 24);
   1bc0a:	0e12      	lsrs	r2, r2, #24
   1bc0c:	70c2      	strb	r2, [r0, #3]
    u8ptr[4] = (uint8_t)(x >> 32);
   1bc0e:	7103      	strb	r3, [r0, #4]
    u8ptr[5] = (uint8_t)(x >> 40);
   1bc10:	f3c3 2207 	ubfx	r2, r3, #8, #8
   1bc14:	7142      	strb	r2, [r0, #5]
    u8ptr[6] = (uint8_t)(x >> 48);
   1bc16:	f3c3 4207 	ubfx	r2, r3, #16, #8
   1bc1a:	7182      	strb	r2, [r0, #6]
    u8ptr[7] = (uint8_t)(x >> 56);
   1bc1c:	0e1b      	lsrs	r3, r3, #24
   1bc1e:	71c3      	strb	r3, [r0, #7]
}
   1bc20:	4770      	bx	lr

0001bc22 <get_le16>:
{
    const uint8_t *u8ptr;
    uint16_t x;

    u8ptr = buf;
    x = u8ptr[0];
   1bc22:	7803      	ldrb	r3, [r0, #0]
    x |= (uint16_t)u8ptr[1] << 8;
   1bc24:	7840      	ldrb	r0, [r0, #1]

    return x;
}
   1bc26:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1bc2a:	4770      	bx	lr

0001bc2c <get_le32>:
{
    const uint8_t *u8ptr;
    uint32_t x;

    u8ptr = buf;
    x = u8ptr[0];
   1bc2c:	7803      	ldrb	r3, [r0, #0]
    x |= (uint32_t)u8ptr[1] << 8;
   1bc2e:	7842      	ldrb	r2, [r0, #1]
   1bc30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    x |= (uint32_t)u8ptr[2] << 16;
   1bc34:	7882      	ldrb	r2, [r0, #2]
   1bc36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    x |= (uint32_t)u8ptr[3] << 24;
   1bc3a:	78c0      	ldrb	r0, [r0, #3]

    return x;
}
   1bc3c:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   1bc40:	4770      	bx	lr

0001bc42 <get_le64>:

uint64_t
get_le64(const void *buf)
{
   1bc42:	e92d 0bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp}
    const uint8_t *u8ptr;
    uint64_t x;

    u8ptr = buf;
    x = u8ptr[0];
   1bc46:	7804      	ldrb	r4, [r0, #0]
   1bc48:	2500      	movs	r5, #0
    x |= (uint64_t)u8ptr[1] << 8;
   1bc4a:	7846      	ldrb	r6, [r0, #1]
   1bc4c:	2300      	movs	r3, #0
   1bc4e:	0232      	lsls	r2, r6, #8
   1bc50:	ea44 0802 	orr.w	r8, r4, r2
   1bc54:	ea45 0903 	orr.w	r9, r5, r3
    x |= (uint64_t)u8ptr[2] << 16;
   1bc58:	7886      	ldrb	r6, [r0, #2]
   1bc5a:	2300      	movs	r3, #0
   1bc5c:	0432      	lsls	r2, r6, #16
   1bc5e:	ea48 0402 	orr.w	r4, r8, r2
   1bc62:	ea49 0503 	orr.w	r5, r9, r3
    x |= (uint64_t)u8ptr[3] << 24;
   1bc66:	78c6      	ldrb	r6, [r0, #3]
   1bc68:	ea4f 2916 	mov.w	r9, r6, lsr #8
   1bc6c:	ea4f 6806 	mov.w	r8, r6, lsl #24
   1bc70:	ea48 0204 	orr.w	r2, r8, r4
   1bc74:	ea49 0305 	orr.w	r3, r9, r5
    x |= (uint64_t)u8ptr[4] << 32;
   1bc78:	2400      	movs	r4, #0
   1bc7a:	7905      	ldrb	r5, [r0, #4]
   1bc7c:	ea42 0b04 	orr.w	fp, r2, r4
   1bc80:	ea43 0c05 	orr.w	ip, r3, r5
    x |= (uint64_t)u8ptr[5] << 40;
   1bc84:	f890 8005 	ldrb.w	r8, [r0, #5]
   1bc88:	ea4f 2708 	mov.w	r7, r8, lsl #8
   1bc8c:	ea4b 0204 	orr.w	r2, fp, r4
   1bc90:	ea4c 0307 	orr.w	r3, ip, r7
    x |= (uint64_t)u8ptr[6] << 48;
   1bc94:	f890 8006 	ldrb.w	r8, [r0, #6]
   1bc98:	ea4f 4c08 	mov.w	ip, r8, lsl #16
   1bc9c:	ea44 0602 	orr.w	r6, r4, r2
   1bca0:	ea4c 0703 	orr.w	r7, ip, r3
    x |= (uint64_t)u8ptr[7] << 56;
   1bca4:	79c2      	ldrb	r2, [r0, #7]
   1bca6:	ea4f 6902 	mov.w	r9, r2, lsl #24

    return x;
}
   1bcaa:	ea44 0006 	orr.w	r0, r4, r6
   1bcae:	ea49 0107 	orr.w	r1, r9, r7
   1bcb2:	e8bd 0bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp}
   1bcb6:	4770      	bx	lr

0001bcb8 <swap_in_place>:
    int i;
    int j;

    u8ptr = buf;

    for (i = 0, j = len - 1; i < j; i++, j--) {
   1bcb8:	3901      	subs	r1, #1
   1bcba:	2300      	movs	r3, #0
   1bcbc:	428b      	cmp	r3, r1
   1bcbe:	da0b      	bge.n	1bcd8 <swap_in_place+0x20>
{
   1bcc0:	b410      	push	{r4}
        tmp = u8ptr[i];
   1bcc2:	5cc2      	ldrb	r2, [r0, r3]

        u8ptr[i] = u8ptr[j];
   1bcc4:	5c44      	ldrb	r4, [r0, r1]
   1bcc6:	54c4      	strb	r4, [r0, r3]
        u8ptr[j] = tmp;
   1bcc8:	5442      	strb	r2, [r0, r1]
    for (i = 0, j = len - 1; i < j; i++, j--) {
   1bcca:	3301      	adds	r3, #1
   1bccc:	3901      	subs	r1, #1
   1bcce:	428b      	cmp	r3, r1
   1bcd0:	dbf7      	blt.n	1bcc2 <swap_in_place+0xa>
    }
}
   1bcd2:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bcd6:	4770      	bx	lr
   1bcd8:	4770      	bx	lr

0001bcda <swap_buf>:
void
swap_buf(uint8_t *dst, const uint8_t *src, int len)
{
    int i;

    for (i = 0; i < len; i++) {
   1bcda:	2300      	movs	r3, #0
   1bcdc:	4293      	cmp	r3, r2
   1bcde:	da09      	bge.n	1bcf4 <swap_buf+0x1a>
{
   1bce0:	b430      	push	{r4, r5}
        dst[len - 1 - i] = src[i];
   1bce2:	1e54      	subs	r4, r2, #1
   1bce4:	1ae4      	subs	r4, r4, r3
   1bce6:	5ccd      	ldrb	r5, [r1, r3]
   1bce8:	5505      	strb	r5, [r0, r4]
    for (i = 0; i < len; i++) {
   1bcea:	3301      	adds	r3, #1
   1bcec:	4293      	cmp	r3, r2
   1bcee:	dbf8      	blt.n	1bce2 <swap_buf+0x8>
    }
}
   1bcf0:	bc30      	pop	{r4, r5}
   1bcf2:	4770      	bx	lr
   1bcf4:	4770      	bx	lr

0001bcf6 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   1bcf6:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   1bcf8:	4601      	mov	r1, r0
   1bcfa:	2005      	movs	r0, #5
   1bcfc:	f7ff fb96 	bl	1b42c <hal_timer_config>
    return rc;
}
   1bd00:	bd08      	pop	{r3, pc}

0001bd02 <os_cputime_timer_init>:
    os_cputime_delay_ticks(ticks);
}

void
os_cputime_timer_init(struct hal_timer *timer, hal_timer_cb fp, void *arg)
{
   1bd02:	b510      	push	{r4, lr}
    assert(timer != NULL);
   1bd04:	b138      	cbz	r0, 1bd16 <os_cputime_timer_init+0x14>
    assert(fp != NULL);
   1bd06:	b181      	cbz	r1, 1bd2a <os_cputime_timer_init+0x28>

    hal_timer_set_cb(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), timer, fp, arg);
   1bd08:	4613      	mov	r3, r2
   1bd0a:	460a      	mov	r2, r1
   1bd0c:	4601      	mov	r1, r0
   1bd0e:	2005      	movs	r0, #5
   1bd10:	f7ff fc60 	bl	1b5d4 <hal_timer_set_cb>
}
   1bd14:	bd10      	pop	{r4, pc}
    assert(timer != NULL);
   1bd16:	f7ec fa53 	bl	81c0 <hal_debugger_connected>
   1bd1a:	b100      	cbz	r0, 1bd1e <os_cputime_timer_init+0x1c>
   1bd1c:	be01      	bkpt	0x0001
   1bd1e:	2300      	movs	r3, #0
   1bd20:	461a      	mov	r2, r3
   1bd22:	4619      	mov	r1, r3
   1bd24:	4618      	mov	r0, r3
   1bd26:	f7ed fde1 	bl	98ec <__assert_func>
    assert(fp != NULL);
   1bd2a:	f7ec fa49 	bl	81c0 <hal_debugger_connected>
   1bd2e:	b100      	cbz	r0, 1bd32 <os_cputime_timer_init+0x30>
   1bd30:	be01      	bkpt	0x0001
   1bd32:	2300      	movs	r3, #0
   1bd34:	461a      	mov	r2, r3
   1bd36:	4619      	mov	r1, r3
   1bd38:	4618      	mov	r0, r3
   1bd3a:	f7ed fdd7 	bl	98ec <__assert_func>

0001bd3e <os_cputime_timer_start>:

int
os_cputime_timer_start(struct hal_timer *timer, uint32_t cputime)
{
   1bd3e:	b508      	push	{r3, lr}
    int rc;

    rc = hal_timer_start_at(timer, cputime);
   1bd40:	f7ff fc5e 	bl	1b600 <hal_timer_start_at>
    return rc;
}
   1bd44:	bd08      	pop	{r3, pc}

0001bd46 <os_cputime_timer_stop>:
    return rc;
}

void
os_cputime_timer_stop(struct hal_timer *timer)
{
   1bd46:	b508      	push	{r3, lr}
    hal_timer_stop(timer);
   1bd48:	f7ff fca0 	bl	1b68c <hal_timer_stop>
}
   1bd4c:	bd08      	pop	{r3, pc}

0001bd4e <os_cputime_get32>:

uint32_t
os_cputime_get32(void)
{
   1bd4e:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   1bd50:	2005      	movs	r0, #5
   1bd52:	f7ff fc23 	bl	1b59c <hal_timer_read>
    return cpu_time;
}
   1bd56:	bd08      	pop	{r3, pc}

0001bd58 <os_cputime_delay_ticks>:
{
   1bd58:	b510      	push	{r4, lr}
   1bd5a:	4604      	mov	r4, r0
    until = os_cputime_get32() + ticks;
   1bd5c:	f7ff fff7 	bl	1bd4e <os_cputime_get32>
   1bd60:	4404      	add	r4, r0
    while ((int32_t)(os_cputime_get32() - until) < 0) {
   1bd62:	f7ff fff4 	bl	1bd4e <os_cputime_get32>
   1bd66:	1b00      	subs	r0, r0, r4
   1bd68:	2800      	cmp	r0, #0
   1bd6a:	dbfa      	blt.n	1bd62 <os_cputime_delay_ticks+0xa>
}
   1bd6c:	bd10      	pop	{r4, pc}

0001bd6e <os_cputime_delay_usecs>:
{
   1bd6e:	b508      	push	{r3, lr}
    ticks = os_cputime_usecs_to_ticks(usecs);
   1bd70:	f000 f804 	bl	1bd7c <os_cputime_usecs_to_ticks>
    os_cputime_delay_ticks(ticks);
   1bd74:	f7ff fff0 	bl	1bd58 <os_cputime_delay_ticks>
}
   1bd78:	bd08      	pop	{r3, pc}
	...

0001bd7c <os_cputime_usecs_to_ticks>:
    /*
     * Faster calculation but could be off 1 full tick since we do not
     * add residual back. Adding back the residual is commented out below, but
     * shown.
     */
    ticks = (1ULL << 32) * MYNEWT_VAL(OS_CPUTIME_FREQ) / 1000000 * usecs;
   1bd7c:	4b02      	ldr	r3, [pc, #8]	; (1bd88 <os_cputime_usecs_to_ticks+0xc>)
   1bd7e:	fba0 0103 	umull	r0, r1, r0, r3

    /* Residual for 32768 Hz. */
    //ticks += ((uint64_t)usecs * (1526122139+1)) >> 32;

    return ticks >> 32;
}
   1bd82:	4608      	mov	r0, r1
   1bd84:	4770      	bx	lr
   1bd86:	bf00      	nop
   1bd88:	08637bd0 	.word	0x08637bd0

0001bd8c <os_cputime_ticks_to_usecs>:
    uint32_t usecs;
    uint32_t shift;

    shift = __builtin_popcount(MYNEWT_VAL(OS_CPUTIME_FREQ) - 1) - 6;

    usecs = ((ticks >> shift) * 15625) +
   1bd8c:	0a41      	lsrs	r1, r0, #9
   1bd8e:	f643 5209 	movw	r2, #15625	; 0x3d09
            (((ticks & ~(~0U << shift)) * 15625) >> shift);
   1bd92:	f3c0 0308 	ubfx	r3, r0, #0, #9
   1bd96:	fb02 f303 	mul.w	r3, r2, r3
   1bd9a:	0a5b      	lsrs	r3, r3, #9
    return usecs;
}
   1bd9c:	fb02 3001 	mla	r0, r2, r1, r3
   1bda0:	4770      	bx	lr

0001bda2 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1bda2:	4603      	mov	r3, r0
   1bda4:	b118      	cbz	r0, 1bdae <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1bda6:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1bda8:	2000      	movs	r0, #0
   1bdaa:	6018      	str	r0, [r3, #0]
   1bdac:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1bdae:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1bdb0:	4770      	bx	lr
	...

0001bdb4 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1bdb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1bdb6:	4b17      	ldr	r3, [pc, #92]	; (1be14 <os_sem_release+0x60>)
   1bdb8:	681b      	ldr	r3, [r3, #0]
   1bdba:	b33b      	cbz	r3, 1be0c <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1bdbc:	b340      	cbz	r0, 1be10 <os_sem_release+0x5c>
   1bdbe:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1bdc0:	f7ef f8f4 	bl	afac <os_sched_get_current_task>
   1bdc4:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1bdc6:	f7ef fb83 	bl	b4d0 <os_arch_save_sr>
   1bdca:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1bdcc:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1bdce:	b165      	cbz	r5, 1bdea <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1bdd0:	7b6b      	ldrb	r3, [r5, #13]
   1bdd2:	f023 0302 	bic.w	r3, r3, #2
   1bdd6:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1bdd8:	4628      	mov	r0, r5
   1bdda:	f7ef f93b 	bl	b054 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1bdde:	7afa      	ldrb	r2, [r7, #11]
   1bde0:	7aeb      	ldrb	r3, [r5, #11]
   1bde2:	429a      	cmp	r2, r3
   1bde4:	d80b      	bhi.n	1bdfe <os_sem_release+0x4a>
    resched = 0;
   1bde6:	2400      	movs	r4, #0
   1bde8:	e003      	b.n	1bdf2 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1bdea:	88e3      	ldrh	r3, [r4, #6]
   1bdec:	3301      	adds	r3, #1
   1bdee:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1bdf0:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1bdf2:	4630      	mov	r0, r6
   1bdf4:	f7ef fb72 	bl	b4dc <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1bdf8:	b91c      	cbnz	r4, 1be02 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1bdfa:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1bdfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1bdfe:	2401      	movs	r4, #1
   1be00:	e7f7      	b.n	1bdf2 <os_sem_release+0x3e>
        os_sched(rdy);
   1be02:	4628      	mov	r0, r5
   1be04:	f7ef f9b2 	bl	b16c <os_sched>
    ret = OS_OK;
   1be08:	2000      	movs	r0, #0
   1be0a:	e7f7      	b.n	1bdfc <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1be0c:	2009      	movs	r0, #9
   1be0e:	e7f5      	b.n	1bdfc <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1be10:	2003      	movs	r0, #3
   1be12:	e7f3      	b.n	1bdfc <os_sem_release+0x48>
   1be14:	200026d0 	.word	0x200026d0

0001be18 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1be18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1be1a:	4b2c      	ldr	r3, [pc, #176]	; (1becc <os_sem_pend+0xb4>)
   1be1c:	681b      	ldr	r3, [r3, #0]
   1be1e:	2b00      	cmp	r3, #0
   1be20:	d04f      	beq.n	1bec2 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1be22:	2800      	cmp	r0, #0
   1be24:	d04f      	beq.n	1bec6 <os_sem_pend+0xae>
   1be26:	460d      	mov	r5, r1
   1be28:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1be2a:	f7ef f8bf 	bl	afac <os_sched_get_current_task>
   1be2e:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   1be30:	f7ef fb4e 	bl	b4d0 <os_arch_save_sr>
   1be34:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1be36:	88e3      	ldrh	r3, [r4, #6]
   1be38:	b14b      	cbz	r3, 1be4e <os_sem_pend+0x36>
        sem->sem_tokens--;
   1be3a:	3b01      	subs	r3, #1
   1be3c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1be3e:	2400      	movs	r4, #0
    sched = 0;
   1be40:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1be42:	4638      	mov	r0, r7
   1be44:	f7ef fb4a 	bl	b4dc <os_arch_restore_sr>

    if (sched) {
   1be48:	bb45      	cbnz	r5, 1be9c <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1be4a:	4620      	mov	r0, r4
   1be4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1be4e:	b315      	cbz	r5, 1be96 <os_sem_pend+0x7e>
        current->t_obj = sem;
   1be50:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1be52:	7b73      	ldrb	r3, [r6, #13]
   1be54:	f043 0302 	orr.w	r3, r3, #2
   1be58:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1be5a:	f8d4 c000 	ldr.w	ip, [r4]
   1be5e:	f1bc 0f00 	cmp.w	ip, #0
   1be62:	d00e      	beq.n	1be82 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1be64:	4663      	mov	r3, ip
        last = NULL;
   1be66:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1be68:	b133      	cbz	r3, 1be78 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1be6a:	7af1      	ldrb	r1, [r6, #11]
   1be6c:	7ada      	ldrb	r2, [r3, #11]
   1be6e:	4291      	cmp	r1, r2
   1be70:	d302      	bcc.n	1be78 <os_sem_pend+0x60>
                last = entry;
   1be72:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1be74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1be76:	e7f7      	b.n	1be68 <os_sem_pend+0x50>
        if (last) {
   1be78:	b118      	cbz	r0, 1be82 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1be7a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1be7c:	64f3      	str	r3, [r6, #76]	; 0x4c
   1be7e:	64c6      	str	r6, [r0, #76]	; 0x4c
   1be80:	e002      	b.n	1be88 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1be82:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1be86:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1be88:	4629      	mov	r1, r5
   1be8a:	4630      	mov	r0, r6
   1be8c:	f7ef f89a 	bl	afc4 <os_sched_sleep>
        ret = OS_OK;
   1be90:	2400      	movs	r4, #0
        sched = 1;
   1be92:	2501      	movs	r5, #1
   1be94:	e7d5      	b.n	1be42 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1be96:	2406      	movs	r4, #6
    sched = 0;
   1be98:	2500      	movs	r5, #0
   1be9a:	e7d2      	b.n	1be42 <os_sem_pend+0x2a>
        os_sched(NULL);
   1be9c:	2000      	movs	r0, #0
   1be9e:	f7ef f965 	bl	b16c <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1bea2:	7b73      	ldrb	r3, [r6, #13]
   1bea4:	f013 0f02 	tst.w	r3, #2
   1bea8:	d101      	bne.n	1beae <os_sem_pend+0x96>
            ret = OS_OK;
   1beaa:	2400      	movs	r4, #0
   1beac:	e7cd      	b.n	1be4a <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1beae:	f7ef fb0f 	bl	b4d0 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1beb2:	7b73      	ldrb	r3, [r6, #13]
   1beb4:	f023 0302 	bic.w	r3, r3, #2
   1beb8:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1beba:	f7ef fb0f 	bl	b4dc <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1bebe:	2406      	movs	r4, #6
   1bec0:	e7c3      	b.n	1be4a <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1bec2:	2409      	movs	r4, #9
   1bec4:	e7c1      	b.n	1be4a <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1bec6:	2403      	movs	r4, #3
   1bec8:	e7bf      	b.n	1be4a <os_sem_pend+0x32>
   1beca:	bf00      	nop
   1becc:	200026d0 	.word	0x200026d0

0001bed0 <malloc_lock_nop>:
    },
    &__malloc_head,
    &__malloc_head
};

static bool malloc_lock_nop() {return true;}
   1bed0:	2001      	movs	r0, #1
   1bed2:	4770      	bx	lr

0001bed4 <malloc_unlock_nop>:
static void malloc_unlock_nop() {}
   1bed4:	4770      	bx	lr

0001bed6 <__malloc_from_block>:
static void *__malloc_from_block(struct free_arena_header *fp, size_t size)
{
    size_t fsize;
    struct free_arena_header *nfp, *na, *fpn, *fpp;

    fsize = fp->a.size;
   1bed6:	6842      	ldr	r2, [r0, #4]

    /* We need the 2* to account for the larger requirements of a
       free block */
    if (fsize >= size + 2 * sizeof(struct arena_header)) {
   1bed8:	f101 0320 	add.w	r3, r1, #32
   1bedc:	4293      	cmp	r3, r2
   1bede:	d907      	bls.n	1bef0 <__malloc_from_block+0x1a>
        nfp->next_free = fpn = fp->next_free;
        nfp->prev_free = fpp = fp->prev_free;
        fpn->prev_free = nfp;
        fpp->next_free = nfp;
    } else {
        fp->a.type = ARENA_TYPE_USED; /* Allocate the whole block */
   1bee0:	2300      	movs	r3, #0
   1bee2:	6003      	str	r3, [r0, #0]
    ap = ah->prev_free;
   1bee4:	6942      	ldr	r2, [r0, #20]
    an = ah->next_free;
   1bee6:	6903      	ldr	r3, [r0, #16]
    ap->next_free = an;
   1bee8:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   1beea:	615a      	str	r2, [r3, #20]
        remove_from_free_chain(fp);
    }

    return (void *)(&fp->a + 1);
}
   1beec:	3010      	adds	r0, #16
   1beee:	4770      	bx	lr
{
   1bef0:	b430      	push	{r4, r5}
        nfp = (struct free_arena_header *)((char *)fp + size);
   1bef2:	1843      	adds	r3, r0, r1
        na = fp->a.next;
   1bef4:	6884      	ldr	r4, [r0, #8]
        nfp->a.type = ARENA_TYPE_FREE;
   1bef6:	2501      	movs	r5, #1
   1bef8:	5045      	str	r5, [r0, r1]
        nfp->a.size = fsize - size;
   1befa:	1a52      	subs	r2, r2, r1
   1befc:	605a      	str	r2, [r3, #4]
        fp->a.type = ARENA_TYPE_USED;
   1befe:	2200      	movs	r2, #0
   1bf00:	6002      	str	r2, [r0, #0]
        fp->a.size = size;
   1bf02:	6041      	str	r1, [r0, #4]
        nfp->a.prev = fp;
   1bf04:	60d8      	str	r0, [r3, #12]
        nfp->a.next = na;
   1bf06:	609c      	str	r4, [r3, #8]
        na->a.prev = nfp;
   1bf08:	60e3      	str	r3, [r4, #12]
        fp->a.next = nfp;
   1bf0a:	6083      	str	r3, [r0, #8]
        nfp->next_free = fpn = fp->next_free;
   1bf0c:	6901      	ldr	r1, [r0, #16]
   1bf0e:	6119      	str	r1, [r3, #16]
        nfp->prev_free = fpp = fp->prev_free;
   1bf10:	6942      	ldr	r2, [r0, #20]
   1bf12:	615a      	str	r2, [r3, #20]
        fpn->prev_free = nfp;
   1bf14:	614b      	str	r3, [r1, #20]
        fpp->next_free = nfp;
   1bf16:	6113      	str	r3, [r2, #16]
}
   1bf18:	3010      	adds	r0, #16
   1bf1a:	bc30      	pop	{r4, r5}
   1bf1c:	4770      	bx	lr
	...

0001bf20 <__free_block>:

static struct free_arena_header *__free_block(struct free_arena_header *ah)
{
   1bf20:	b410      	push	{r4}
   1bf22:	4603      	mov	r3, r0
    struct free_arena_header *pah, *nah;

    pah = ah->a.prev;
   1bf24:	68c0      	ldr	r0, [r0, #12]
    nah = ah->a.next;
   1bf26:	6899      	ldr	r1, [r3, #8]
    if (pah->a.type == ARENA_TYPE_FREE &&
   1bf28:	6802      	ldr	r2, [r0, #0]
   1bf2a:	2a01      	cmp	r2, #1
   1bf2c:	d00f      	beq.n	1bf4e <__free_block+0x2e>

        ah = pah;
        pah = ah->a.prev;
    } else {
        /* Need to add this block to the free chain */
        ah->a.type = ARENA_TYPE_FREE;
   1bf2e:	2201      	movs	r2, #1
   1bf30:	601a      	str	r2, [r3, #0]

        ah->next_free = __malloc_head.next_free;
   1bf32:	4a14      	ldr	r2, [pc, #80]	; (1bf84 <__free_block+0x64>)
   1bf34:	6910      	ldr	r0, [r2, #16]
   1bf36:	6118      	str	r0, [r3, #16]
        ah->prev_free = &__malloc_head;
   1bf38:	615a      	str	r2, [r3, #20]
        __malloc_head.next_free = ah;
   1bf3a:	6113      	str	r3, [r2, #16]
        ah->next_free->prev_free = ah;
   1bf3c:	691a      	ldr	r2, [r3, #16]
   1bf3e:	6153      	str	r3, [r2, #20]
   1bf40:	4618      	mov	r0, r3
    }

    /* In either of the previous cases, we might be able to merge
       with the subsequent block... */
    if (nah->a.type == ARENA_TYPE_FREE &&
   1bf42:	680b      	ldr	r3, [r1, #0]
   1bf44:	2b01      	cmp	r3, #1
   1bf46:	d00c      	beq.n	1bf62 <__free_block+0x42>
        remove_from_chains(nah);
    }

    /* Return the block that contains the called block */
    return ah;
}
   1bf48:	f85d 4b04 	ldr.w	r4, [sp], #4
   1bf4c:	4770      	bx	lr
        (char *)pah + pah->a.size == (char *)ah) {
   1bf4e:	6842      	ldr	r2, [r0, #4]
   1bf50:	1884      	adds	r4, r0, r2
    if (pah->a.type == ARENA_TYPE_FREE &&
   1bf52:	429c      	cmp	r4, r3
   1bf54:	d1eb      	bne.n	1bf2e <__free_block+0xe>
        pah->a.size += ah->a.size;
   1bf56:	685b      	ldr	r3, [r3, #4]
   1bf58:	441a      	add	r2, r3
   1bf5a:	6042      	str	r2, [r0, #4]
        pah->a.next = nah;
   1bf5c:	6081      	str	r1, [r0, #8]
        nah->a.prev = pah;
   1bf5e:	60c8      	str	r0, [r1, #12]
        pah = ah->a.prev;
   1bf60:	e7ef      	b.n	1bf42 <__free_block+0x22>
        (char *)ah + ah->a.size == (char *)nah) {
   1bf62:	6843      	ldr	r3, [r0, #4]
   1bf64:	18c2      	adds	r2, r0, r3
    if (nah->a.type == ARENA_TYPE_FREE &&
   1bf66:	428a      	cmp	r2, r1
   1bf68:	d1ee      	bne.n	1bf48 <__free_block+0x28>
        ah->a.size += nah->a.size;
   1bf6a:	684a      	ldr	r2, [r1, #4]
   1bf6c:	4413      	add	r3, r2
   1bf6e:	6043      	str	r3, [r0, #4]
    ap = ah->prev_free;
   1bf70:	694a      	ldr	r2, [r1, #20]
    an = ah->next_free;
   1bf72:	690b      	ldr	r3, [r1, #16]
    ap->next_free = an;
   1bf74:	6113      	str	r3, [r2, #16]
    an->prev_free = ap;
   1bf76:	615a      	str	r2, [r3, #20]
    ap = ah->a.prev;
   1bf78:	68ca      	ldr	r2, [r1, #12]
    an = ah->a.next;
   1bf7a:	688b      	ldr	r3, [r1, #8]
    ap->a.next = an;
   1bf7c:	6093      	str	r3, [r2, #8]
    an->a.prev = ap;
   1bf7e:	60da      	str	r2, [r3, #12]
    return ah;
   1bf80:	e7e2      	b.n	1bf48 <__free_block+0x28>
   1bf82:	bf00      	nop
   1bf84:	20000334 	.word	0x20000334

0001bf88 <add_malloc_block>:
void add_malloc_block(void *buf, size_t size)
{
    struct free_arena_header *fp = buf;
    struct free_arena_header *pah;

    if (size < sizeof(struct free_arena_header))
   1bf88:	2917      	cmp	r1, #23
   1bf8a:	d91e      	bls.n	1bfca <add_malloc_block+0x42>
{
   1bf8c:	b510      	push	{r4, lr}
   1bf8e:	4604      	mov	r4, r0
        return; // Too small.

    /* Insert the block into the management chains.  We need to set
       up the size and the main block list pointer, the rest of
       the work is logically identical to free(). */
    fp->a.type = ARENA_TYPE_FREE;
   1bf90:	2301      	movs	r3, #1
   1bf92:	6003      	str	r3, [r0, #0]
    fp->a.size = size;
   1bf94:	6041      	str	r1, [r0, #4]

    if (!malloc_lock())
   1bf96:	4b0d      	ldr	r3, [pc, #52]	; (1bfcc <add_malloc_block+0x44>)
   1bf98:	681b      	ldr	r3, [r3, #0]
   1bf9a:	4798      	blx	r3
   1bf9c:	b1a0      	cbz	r0, 1bfc8 <add_malloc_block+0x40>

    /* We need to insert this into the main block list in the proper
       place -- this list is required to be sorted.  Since we most likely
       get memory assignments in ascending order, search backwards for
       the proper place. */
    for (pah = __malloc_head.a.prev; pah->a.type != ARENA_TYPE_HEAD;
   1bf9e:	4b0c      	ldr	r3, [pc, #48]	; (1bfd0 <add_malloc_block+0x48>)
   1bfa0:	68db      	ldr	r3, [r3, #12]
   1bfa2:	681a      	ldr	r2, [r3, #0]
   1bfa4:	2a02      	cmp	r2, #2
   1bfa6:	d003      	beq.n	1bfb0 <add_malloc_block+0x28>
         pah = pah->a.prev) {
        if (pah < fp)
   1bfa8:	42a3      	cmp	r3, r4
   1bfaa:	d301      	bcc.n	1bfb0 <add_malloc_block+0x28>
         pah = pah->a.prev) {
   1bfac:	68db      	ldr	r3, [r3, #12]
   1bfae:	e7f8      	b.n	1bfa2 <add_malloc_block+0x1a>
            break;
    }

    /* Now pah points to the node that should be the predecessor of
       the new node */
    fp->a.next = pah->a.next;
   1bfb0:	689a      	ldr	r2, [r3, #8]
   1bfb2:	60a2      	str	r2, [r4, #8]
    fp->a.prev = pah;
   1bfb4:	60e3      	str	r3, [r4, #12]
    pah->a.next = fp;
   1bfb6:	609c      	str	r4, [r3, #8]
    fp->a.next->a.prev = fp;
   1bfb8:	68a3      	ldr	r3, [r4, #8]
   1bfba:	60dc      	str	r4, [r3, #12]

    /* Insert into the free chain and coalesce with adjacent blocks */
    fp = __free_block(fp);
   1bfbc:	4620      	mov	r0, r4
   1bfbe:	f7ff ffaf 	bl	1bf20 <__free_block>

    malloc_unlock();
   1bfc2:	4b04      	ldr	r3, [pc, #16]	; (1bfd4 <add_malloc_block+0x4c>)
   1bfc4:	681b      	ldr	r3, [r3, #0]
   1bfc6:	4798      	blx	r3
}
   1bfc8:	bd10      	pop	{r4, pc}
   1bfca:	4770      	bx	lr
   1bfcc:	2000034c 	.word	0x2000034c
   1bfd0:	20000334 	.word	0x20000334
   1bfd4:	20000350 	.word	0x20000350

0001bfd8 <malloc>:
{
   1bfd8:	b538      	push	{r3, r4, r5, lr}
    if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   1bfda:	1e43      	subs	r3, r0, #1
   1bfdc:	f113 0f12 	cmn.w	r3, #18
   1bfe0:	d826      	bhi.n	1c030 <malloc+0x58>
    size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   1bfe2:	f100 041f 	add.w	r4, r0, #31
   1bfe6:	f024 040f 	bic.w	r4, r4, #15
    if (!malloc_lock())
   1bfea:	4b13      	ldr	r3, [pc, #76]	; (1c038 <malloc+0x60>)
   1bfec:	681b      	ldr	r3, [r3, #0]
   1bfee:	4798      	blx	r3
   1bff0:	b300      	cbz	r0, 1c034 <malloc+0x5c>
    void *result = NULL;
   1bff2:	2500      	movs	r5, #0
   1bff4:	e00d      	b.n	1c012 <malloc+0x3a>
            result = __malloc_from_block(fp, size);
   1bff6:	4621      	mov	r1, r4
   1bff8:	f7ff ff6d 	bl	1bed6 <__malloc_from_block>
   1bffc:	4605      	mov	r5, r0
    if (result == NULL) {
   1bffe:	b995      	cbnz	r5, 1c026 <malloc+0x4e>
        more_mem = _sbrk(size);
   1c000:	4620      	mov	r0, r4
   1c002:	f7ec f8b9 	bl	8178 <_sbrk>
        if (more_mem != (void *)-1) {
   1c006:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1c00a:	d00c      	beq.n	1c026 <malloc+0x4e>
            add_malloc_block(more_mem, size);
   1c00c:	4621      	mov	r1, r4
   1c00e:	f7ff ffbb 	bl	1bf88 <add_malloc_block>
    for (fp = __malloc_head.next_free; fp->a.type != ARENA_TYPE_HEAD;
   1c012:	4b0a      	ldr	r3, [pc, #40]	; (1c03c <malloc+0x64>)
   1c014:	6918      	ldr	r0, [r3, #16]
   1c016:	6803      	ldr	r3, [r0, #0]
   1c018:	2b02      	cmp	r3, #2
   1c01a:	d0f0      	beq.n	1bffe <malloc+0x26>
        if (fp->a.size >= size) {
   1c01c:	6843      	ldr	r3, [r0, #4]
   1c01e:	42a3      	cmp	r3, r4
   1c020:	d2e9      	bcs.n	1bff6 <malloc+0x1e>
         fp = fp->next_free) {
   1c022:	6900      	ldr	r0, [r0, #16]
   1c024:	e7f7      	b.n	1c016 <malloc+0x3e>
    malloc_unlock();
   1c026:	4b06      	ldr	r3, [pc, #24]	; (1c040 <malloc+0x68>)
   1c028:	681b      	ldr	r3, [r3, #0]
   1c02a:	4798      	blx	r3
}
   1c02c:	4628      	mov	r0, r5
   1c02e:	bd38      	pop	{r3, r4, r5, pc}
        return NULL;
   1c030:	2500      	movs	r5, #0
   1c032:	e7fb      	b.n	1c02c <malloc+0x54>
        return NULL;
   1c034:	2500      	movs	r5, #0
   1c036:	e7f9      	b.n	1c02c <malloc+0x54>
   1c038:	2000034c 	.word	0x2000034c
   1c03c:	20000334 	.word	0x20000334
   1c040:	20000350 	.word	0x20000350

0001c044 <free>:

void free(void *ptr)
{
    struct free_arena_header *ah;

    if (!ptr)
   1c044:	b170      	cbz	r0, 1c064 <free+0x20>
{
   1c046:	b510      	push	{r4, lr}
        return;

    ah = (struct free_arena_header *)
   1c048:	f1a0 0410 	sub.w	r4, r0, #16

#ifdef DEBUG_MALLOC
    assert(ah->a.type == ARENA_TYPE_USED);
#endif

    if (!malloc_lock())
   1c04c:	4b06      	ldr	r3, [pc, #24]	; (1c068 <free+0x24>)
   1c04e:	681b      	ldr	r3, [r3, #0]
   1c050:	4798      	blx	r3
   1c052:	b900      	cbnz	r0, 1c056 <free+0x12>
        return;

    /* Merge into adjacent free blocks */
    ah = __free_block(ah);
    malloc_unlock();
}
   1c054:	bd10      	pop	{r4, pc}
    ah = __free_block(ah);
   1c056:	4620      	mov	r0, r4
   1c058:	f7ff ff62 	bl	1bf20 <__free_block>
    malloc_unlock();
   1c05c:	4b03      	ldr	r3, [pc, #12]	; (1c06c <free+0x28>)
   1c05e:	681b      	ldr	r3, [r3, #0]
   1c060:	4798      	blx	r3
   1c062:	e7f7      	b.n	1c054 <free+0x10>
   1c064:	4770      	bx	lr
   1c066:	bf00      	nop
   1c068:	2000034c 	.word	0x2000034c
   1c06c:	20000350 	.word	0x20000350

0001c070 <realloc>:
#include "malloc.h"

/* FIXME: This is cheesy, it should be fixed later */

void *realloc(void *ptr, size_t size)
{
   1c070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct free_arena_header *ah;
	void *newptr;
	size_t oldsize;

	if (!ptr)
   1c072:	b300      	cbz	r0, 1c0b6 <realloc+0x46>
   1c074:	4606      	mov	r6, r0
		return malloc(size);

	if (size == 0 || size > (SIZE_MAX - sizeof(struct arena_header))) {
   1c076:	1e4b      	subs	r3, r1, #1
   1c078:	f113 0f12 	cmn.w	r3, #18
   1c07c:	d820      	bhi.n	1c0c0 <realloc+0x50>
		free(ptr);
		return NULL;
	}

	/* Add the obligatory arena header, and round up */
	size = (size + 2 * sizeof(struct arena_header) - 1) & ARENA_SIZE_MASK;
   1c07e:	311f      	adds	r1, #31
   1c080:	f021 040f 	bic.w	r4, r1, #15

	ah = (struct free_arena_header *)
	    ((struct arena_header *)ptr - 1);

	if (ah->a.size >= size && size >= (ah->a.size >> 2)) {
   1c084:	f850 5c0c 	ldr.w	r5, [r0, #-12]
   1c088:	42a5      	cmp	r5, r4
   1c08a:	d302      	bcc.n	1c092 <realloc+0x22>
   1c08c:	ebb4 0f95 	cmp.w	r4, r5, lsr #2
   1c090:	d21a      	bcs.n	1c0c8 <realloc+0x58>
	} else {
		/* Make me a new block.  This is kind of bogus; we should
		   be checking the following block to see if we can do an
		   in-place adjustment... fix that later. */

		oldsize = ah->a.size - sizeof(struct arena_header);
   1c092:	3d10      	subs	r5, #16

		newptr = malloc(size);
   1c094:	4620      	mov	r0, r4
   1c096:	f7ff ff9f 	bl	1bfd8 <malloc>
                if (newptr) {
   1c09a:	4607      	mov	r7, r0
   1c09c:	b1b0      	cbz	r0, 1c0cc <realloc+0x5c>
                    memcpy(newptr, ptr, (size < oldsize) ? size : oldsize);
   1c09e:	4622      	mov	r2, r4
   1c0a0:	42ac      	cmp	r4, r5
   1c0a2:	bf28      	it	cs
   1c0a4:	462a      	movcs	r2, r5
   1c0a6:	4631      	mov	r1, r6
   1c0a8:	f7ef fb80 	bl	b7ac <memcpy>
                    free(ptr);
   1c0ac:	4630      	mov	r0, r6
   1c0ae:	f7ff ffc9 	bl	1c044 <free>
                } else {
                    newptr = ptr;
                }
		return newptr;
	}
}
   1c0b2:	4638      	mov	r0, r7
   1c0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return malloc(size);
   1c0b6:	4608      	mov	r0, r1
   1c0b8:	f7ff ff8e 	bl	1bfd8 <malloc>
   1c0bc:	4607      	mov	r7, r0
   1c0be:	e7f8      	b.n	1c0b2 <realloc+0x42>
		free(ptr);
   1c0c0:	f7ff ffc0 	bl	1c044 <free>
		return NULL;
   1c0c4:	2700      	movs	r7, #0
   1c0c6:	e7f4      	b.n	1c0b2 <realloc+0x42>
		return ptr;
   1c0c8:	4607      	mov	r7, r0
   1c0ca:	e7f2      	b.n	1c0b2 <realloc+0x42>
                    newptr = ptr;
   1c0cc:	4637      	mov	r7, r6
   1c0ce:	e7f0      	b.n	1c0b2 <realloc+0x42>

0001c0d0 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1c0d0:	b40e      	push	{r1, r2, r3}
   1c0d2:	b500      	push	{lr}
   1c0d4:	b082      	sub	sp, #8
   1c0d6:	ab03      	add	r3, sp, #12
   1c0d8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1c0dc:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1c0de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1c0e2:	f7ef fecf 	bl	be84 <vsnprintf>
	va_end(ap);

	return rv;
}
   1c0e6:	b002      	add	sp, #8
   1c0e8:	f85d eb04 	ldr.w	lr, [sp], #4
   1c0ec:	b003      	add	sp, #12
   1c0ee:	4770      	bx	lr

0001c0f0 <strchr>:

#include <string.h>

char *strchr(const char *s, int c)
{
	while (*s != (char)c) {
   1c0f0:	7803      	ldrb	r3, [r0, #0]
   1c0f2:	b2ca      	uxtb	r2, r1
   1c0f4:	4293      	cmp	r3, r2
   1c0f6:	d002      	beq.n	1c0fe <strchr+0xe>
		if (!*s)
   1c0f8:	b113      	cbz	r3, 1c100 <strchr+0x10>
			return NULL;
		s++;
   1c0fa:	3001      	adds	r0, #1
   1c0fc:	e7f8      	b.n	1c0f0 <strchr>
   1c0fe:	4770      	bx	lr
			return NULL;
   1c100:	2000      	movs	r0, #0
	}

	return (char *)s;
}
   1c102:	4770      	bx	lr

0001c104 <strcpy>:

#include <string.h>

char *strcpy(char *dst, const char *src)
{
	char *q = dst;
   1c104:	4603      	mov	r3, r0
	const char *p = src;
	char ch;

	do {
		*q++ = ch = *p++;
   1c106:	780a      	ldrb	r2, [r1, #0]
   1c108:	701a      	strb	r2, [r3, #0]
   1c10a:	3301      	adds	r3, #1
   1c10c:	3101      	adds	r1, #1
	} while (ch);
   1c10e:	2a00      	cmp	r2, #0
   1c110:	d1f9      	bne.n	1c106 <strcpy+0x2>

	return dst;
}
   1c112:	4770      	bx	lr

0001c114 <strncpy>:
 */

#include <string.h>

char *strncpy(char *dst, const char *src, size_t n)
{
   1c114:	b570      	push	{r4, r5, r6, lr}
   1c116:	4606      	mov	r6, r0
	char *q = dst;
	const char *p = src;
	char ch;

	while (n) {
   1c118:	b14a      	cbz	r2, 1c12e <strncpy+0x1a>
		n--;
   1c11a:	3a01      	subs	r2, #1
		*q++ = ch = *p++;
   1c11c:	1c4d      	adds	r5, r1, #1
   1c11e:	780b      	ldrb	r3, [r1, #0]
   1c120:	1c44      	adds	r4, r0, #1
   1c122:	7003      	strb	r3, [r0, #0]
		if (!ch)
   1c124:	b113      	cbz	r3, 1c12c <strncpy+0x18>
		*q++ = ch = *p++;
   1c126:	4629      	mov	r1, r5
   1c128:	4620      	mov	r0, r4
   1c12a:	e7f5      	b.n	1c118 <strncpy+0x4>
   1c12c:	4620      	mov	r0, r4
			break;
	}

	/* The specs say strncpy() fills the entire buffer with NUL.  Sigh. */
	memset(q, 0, n);
   1c12e:	2100      	movs	r1, #0
   1c130:	f7ef fb65 	bl	b7fe <memset>

	return dst;
}
   1c134:	4630      	mov	r0, r6
   1c136:	bd70      	pop	{r4, r5, r6, pc}

0001c138 <strsep>:
 */

#include <string.h>

char *strsep(char **stringp, const char *delim)
{
   1c138:	b538      	push	{r3, r4, r5, lr}
	char *s = *stringp;
   1c13a:	6805      	ldr	r5, [r0, #0]
	char *e;

	if (!s)
   1c13c:	b145      	cbz	r5, 1c150 <strsep+0x18>
   1c13e:	4604      	mov	r4, r0
		return NULL;

	e = strpbrk(s, delim);
   1c140:	4628      	mov	r0, r5
   1c142:	f000 f8b2 	bl	1c2aa <strpbrk>
	if (e)
   1c146:	b128      	cbz	r0, 1c154 <strsep+0x1c>
		*e++ = '\0';
   1c148:	1c42      	adds	r2, r0, #1
   1c14a:	2100      	movs	r1, #0
   1c14c:	7001      	strb	r1, [r0, #0]

	*stringp = e;
   1c14e:	6022      	str	r2, [r4, #0]
	return s;
}
   1c150:	4628      	mov	r0, r5
   1c152:	bd38      	pop	{r3, r4, r5, pc}
	e = strpbrk(s, delim);
   1c154:	4602      	mov	r2, r0
   1c156:	e7fa      	b.n	1c14e <strsep+0x16>

0001c158 <strtok_r>:
#include <string.h>

char *strtok_r(char *s, const char *delim, char **holder)
{
   1c158:	b538      	push	{r3, r4, r5, lr}
   1c15a:	460d      	mov	r5, r1
   1c15c:	4614      	mov	r4, r2
	if (s)
   1c15e:	b100      	cbz	r0, 1c162 <strtok_r+0xa>
		*holder = s;
   1c160:	6020      	str	r0, [r4, #0]

	do {
		s = strsep(holder, delim);
   1c162:	4629      	mov	r1, r5
   1c164:	4620      	mov	r0, r4
   1c166:	f7ff ffe7 	bl	1c138 <strsep>
	} while (s && !*s);
   1c16a:	4603      	mov	r3, r0
   1c16c:	b110      	cbz	r0, 1c174 <strtok_r+0x1c>
   1c16e:	7802      	ldrb	r2, [r0, #0]
   1c170:	2a00      	cmp	r2, #0
   1c172:	d0f6      	beq.n	1c162 <strtok_r+0xa>

	return s;
}
   1c174:	4618      	mov	r0, r3
   1c176:	bd38      	pop	{r3, r4, r5, pc}

0001c178 <strtoll>:
#include <stddef.h>
#include <stdlib.h>
#include <strntoimax.h>

TYPE NAME(const char *nptr, char **endptr, int base)
{
   1c178:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1c17a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c17e:	f000 f807 	bl	1c190 <strntoumax>
}
   1c182:	bd08      	pop	{r3, pc}

0001c184 <strtoull>:
{
   1c184:	b508      	push	{r3, lr}
	return (TYPE) strntoumax(nptr, endptr, base, ~(size_t) 0);
   1c186:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c18a:	f000 f801 	bl	1c190 <strntoumax>
}
   1c18e:	bd08      	pop	{r3, pc}

0001c190 <strntoumax>:
		return -1;
	}
}

uintmax_t strntoumax(const char *nptr, char **endptr, int base, size_t n)
{
   1c190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c194:	4605      	mov	r5, r0
   1c196:	468c      	mov	ip, r1
	int minus = 0;
	uintmax_t v = 0;
	int d;

	while (n && isspace((unsigned char)*nptr)) {
   1c198:	e001      	b.n	1c19e <strntoumax+0xe>
		nptr++;
   1c19a:	3501      	adds	r5, #1
		n--;
   1c19c:	3b01      	subs	r3, #1
	while (n && isspace((unsigned char)*nptr)) {
   1c19e:	b143      	cbz	r3, 1c1b2 <strntoumax+0x22>
   1c1a0:	7828      	ldrb	r0, [r5, #0]
	return __c < 0x20;
}

__extern_inline int isspace(int __c)
{
	return __c == ' ' || __c == '\n' || __c == '\t' || __c == '\r';
   1c1a2:	2820      	cmp	r0, #32
   1c1a4:	d0f9      	beq.n	1c19a <strntoumax+0xa>
   1c1a6:	280a      	cmp	r0, #10
   1c1a8:	d0f7      	beq.n	1c19a <strntoumax+0xa>
   1c1aa:	2809      	cmp	r0, #9
   1c1ac:	d0f5      	beq.n	1c19a <strntoumax+0xa>
   1c1ae:	280d      	cmp	r0, #13
   1c1b0:	d0f3      	beq.n	1c19a <strntoumax+0xa>
	}

	/* Single optional + or - */
	if (n) {
   1c1b2:	b1a3      	cbz	r3, 1c1de <strntoumax+0x4e>
		char c = *nptr;
   1c1b4:	f895 e000 	ldrb.w	lr, [r5]
		if (c == '-' || c == '+') {
   1c1b8:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   1c1bc:	d005      	beq.n	1c1ca <strntoumax+0x3a>
   1c1be:	f1be 0f2b 	cmp.w	lr, #43	; 0x2b
   1c1c2:	d002      	beq.n	1c1ca <strntoumax+0x3a>
	int minus = 0;
   1c1c4:	f04f 0e00 	mov.w	lr, #0
   1c1c8:	e00b      	b.n	1c1e2 <strntoumax+0x52>
			minus = (c == '-');
   1c1ca:	f1be 0f2d 	cmp.w	lr, #45	; 0x2d
   1c1ce:	bf14      	ite	ne
   1c1d0:	f04f 0e00 	movne.w	lr, #0
   1c1d4:	f04f 0e01 	moveq.w	lr, #1
			nptr++;
   1c1d8:	3501      	adds	r5, #1
			n--;
   1c1da:	3b01      	subs	r3, #1
   1c1dc:	e001      	b.n	1c1e2 <strntoumax+0x52>
	int minus = 0;
   1c1de:	f04f 0e00 	mov.w	lr, #0
		}
	}

	if (base == 0) {
   1c1e2:	b9ba      	cbnz	r2, 1c214 <strntoumax+0x84>
		if (n >= 2 && nptr[0] == '0' &&
   1c1e4:	2b01      	cmp	r3, #1
   1c1e6:	d902      	bls.n	1c1ee <strntoumax+0x5e>
   1c1e8:	782a      	ldrb	r2, [r5, #0]
   1c1ea:	2a30      	cmp	r2, #48	; 0x30
   1c1ec:	d005      	beq.n	1c1fa <strntoumax+0x6a>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
			n -= 2;
			nptr += 2;
			base = 16;
		} else if (n >= 1 && nptr[0] == '0') {
   1c1ee:	b32b      	cbz	r3, 1c23c <strntoumax+0xac>
   1c1f0:	782a      	ldrb	r2, [r5, #0]
   1c1f2:	2a30      	cmp	r2, #48	; 0x30
   1c1f4:	d00a      	beq.n	1c20c <strntoumax+0x7c>
			n--;
			nptr++;
			base = 8;
		} else {
			base = 10;
   1c1f6:	220a      	movs	r2, #10
   1c1f8:	e00e      	b.n	1c218 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c1fa:	786a      	ldrb	r2, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1c1fc:	2a78      	cmp	r2, #120	; 0x78
   1c1fe:	d001      	beq.n	1c204 <strntoumax+0x74>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c200:	2a58      	cmp	r2, #88	; 0x58
   1c202:	d1f4      	bne.n	1c1ee <strntoumax+0x5e>
			n -= 2;
   1c204:	3b02      	subs	r3, #2
			nptr += 2;
   1c206:	3502      	adds	r5, #2
			base = 16;
   1c208:	2210      	movs	r2, #16
   1c20a:	e005      	b.n	1c218 <strntoumax+0x88>
			n--;
   1c20c:	3b01      	subs	r3, #1
			nptr++;
   1c20e:	3501      	adds	r5, #1
			base = 8;
   1c210:	2208      	movs	r2, #8
   1c212:	e001      	b.n	1c218 <strntoumax+0x88>
		}
	} else if (base == 16) {
   1c214:	2a10      	cmp	r2, #16
   1c216:	d004      	beq.n	1c222 <strntoumax+0x92>
			base = 10;
   1c218:	f04f 0800 	mov.w	r8, #0
   1c21c:	f04f 0900 	mov.w	r9, #0
   1c220:	e025      	b.n	1c26e <strntoumax+0xde>
		if (n >= 2 && nptr[0] == '0' &&
   1c222:	2b01      	cmp	r3, #1
   1c224:	d9f8      	bls.n	1c218 <strntoumax+0x88>
   1c226:	7829      	ldrb	r1, [r5, #0]
   1c228:	2930      	cmp	r1, #48	; 0x30
   1c22a:	d1f5      	bne.n	1c218 <strntoumax+0x88>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c22c:	7869      	ldrb	r1, [r5, #1]
		if (n >= 2 && nptr[0] == '0' &&
   1c22e:	2978      	cmp	r1, #120	; 0x78
   1c230:	d001      	beq.n	1c236 <strntoumax+0xa6>
		    (nptr[1] == 'x' || nptr[1] == 'X')) {
   1c232:	2958      	cmp	r1, #88	; 0x58
   1c234:	d1f0      	bne.n	1c218 <strntoumax+0x88>
			n -= 2;
   1c236:	3b02      	subs	r3, #2
			nptr += 2;
   1c238:	3502      	adds	r5, #2
   1c23a:	e7ed      	b.n	1c218 <strntoumax+0x88>
			base = 10;
   1c23c:	220a      	movs	r2, #10
   1c23e:	e7eb      	b.n	1c218 <strntoumax+0x88>
	} else if (ch >= 'A' && ch <= 'Z') {
   1c240:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   1c244:	2e19      	cmp	r6, #25
   1c246:	d81a      	bhi.n	1c27e <strntoumax+0xee>
		return ch - 'A' + 10;
   1c248:	3c37      	subs	r4, #55	; 0x37
		}
	}

	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1c24a:	2c00      	cmp	r4, #0
   1c24c:	db1d      	blt.n	1c28a <strntoumax+0xfa>
   1c24e:	42a2      	cmp	r2, r4
   1c250:	dd1b      	ble.n	1c28a <strntoumax+0xfa>
		v = v * base + d;
   1c252:	fb02 f109 	mul.w	r1, r2, r9
   1c256:	17d7      	asrs	r7, r2, #31
   1c258:	fb08 1607 	mla	r6, r8, r7, r1
   1c25c:	fba2 0108 	umull	r0, r1, r2, r8
   1c260:	4431      	add	r1, r6
   1c262:	eb10 0804 	adds.w	r8, r0, r4
   1c266:	eb41 79e4 	adc.w	r9, r1, r4, asr #31
		n--;
   1c26a:	3b01      	subs	r3, #1
		nptr++;
   1c26c:	3501      	adds	r5, #1
	while (n && (d = digitval(*nptr)) >= 0 && d < base) {
   1c26e:	b163      	cbz	r3, 1c28a <strntoumax+0xfa>
   1c270:	782c      	ldrb	r4, [r5, #0]
	if (ch >= '0' && ch <= '9') {
   1c272:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   1c276:	2e09      	cmp	r6, #9
   1c278:	d8e2      	bhi.n	1c240 <strntoumax+0xb0>
		return ch - '0';
   1c27a:	4634      	mov	r4, r6
   1c27c:	e7e5      	b.n	1c24a <strntoumax+0xba>
	} else if (ch >= 'a' && ch <= 'z') {
   1c27e:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   1c282:	2e19      	cmp	r6, #25
   1c284:	d801      	bhi.n	1c28a <strntoumax+0xfa>
		return ch - 'a' + 10;
   1c286:	3c57      	subs	r4, #87	; 0x57
   1c288:	e7df      	b.n	1c24a <strntoumax+0xba>
	}

	if (endptr)
   1c28a:	f1bc 0f00 	cmp.w	ip, #0
   1c28e:	d001      	beq.n	1c294 <strntoumax+0x104>
		*endptr = (char *)nptr;
   1c290:	f8cc 5000 	str.w	r5, [ip]

	return minus ? -v : v;
   1c294:	f1be 0f00 	cmp.w	lr, #0
   1c298:	d003      	beq.n	1c2a2 <strntoumax+0x112>
   1c29a:	f1d8 0800 	rsbs	r8, r8, #0
   1c29e:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
}
   1c2a2:	4640      	mov	r0, r8
   1c2a4:	4649      	mov	r1, r9
   1c2a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001c2aa <strpbrk>:
#include <string.h>

char *strpbrk(const char *s1, const char *s2)
{
  const char *c = s2;
  if (!*s1)
   1c2aa:	7803      	ldrb	r3, [r0, #0]
   1c2ac:	b19b      	cbz	r3, 1c2d6 <strpbrk+0x2c>
{
   1c2ae:	b410      	push	{r4}
  const char *c = s2;
   1c2b0:	460a      	mov	r2, r1
   1c2b2:	e001      	b.n	1c2b8 <strpbrk+0xe>
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
	    break;
	}
      if (*c)
   1c2b4:	b953      	cbnz	r3, 1c2cc <strpbrk+0x22>
	break;
      s1++;
   1c2b6:	3001      	adds	r0, #1
  while (*s1)
   1c2b8:	7804      	ldrb	r4, [r0, #0]
   1c2ba:	b13c      	cbz	r4, 1c2cc <strpbrk+0x22>
      for (c = s2; *c; c++)
   1c2bc:	460a      	mov	r2, r1
   1c2be:	7813      	ldrb	r3, [r2, #0]
   1c2c0:	2b00      	cmp	r3, #0
   1c2c2:	d0f7      	beq.n	1c2b4 <strpbrk+0xa>
	  if (*s1 == *c)
   1c2c4:	42a3      	cmp	r3, r4
   1c2c6:	d0f5      	beq.n	1c2b4 <strpbrk+0xa>
      for (c = s2; *c; c++)
   1c2c8:	3201      	adds	r2, #1
   1c2ca:	e7f8      	b.n	1c2be <strpbrk+0x14>
    }

  if (*c == '\0')
   1c2cc:	7813      	ldrb	r3, [r2, #0]
   1c2ce:	b123      	cbz	r3, 1c2da <strpbrk+0x30>
    s1 = NULL;

  return (char *) s1;
}
   1c2d0:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c2d4:	4770      	bx	lr
    return (char *) NULL;
   1c2d6:	2000      	movs	r0, #0
}
   1c2d8:	4770      	bx	lr
    s1 = NULL;
   1c2da:	2000      	movs	r0, #0
   1c2dc:	e7f8      	b.n	1c2d0 <strpbrk+0x26>
	...

0001c2e0 <pinetime_lvgl_mynewt_init>:
#include <console/console.h>
#include "lvgl.h"
#include "lv_port_disp.h"

/// Init the LVGL library. Called by sysinit() during startup, defined in pkg.yml.
void pinetime_lvgl_mynewt_init(void) {    
   1c2e0:	b508      	push	{r3, lr}
    console_printf("Init LVGL..."); console_flush();
   1c2e2:	4803      	ldr	r0, [pc, #12]	; (1c2f0 <pinetime_lvgl_mynewt_init+0x10>)
   1c2e4:	f7ed f80c 	bl	9300 <console_printf>
   1c2e8:	f7ec ff6a 	bl	91c0 <console_flush>
    ////int rc = pinetime_lvgl_mynewt_init_display(); assert(rc == 0);

    //  Init the LVGL display
    ////lv_init();
    ////lv_port_disp_init();
}
   1c2ec:	bd08      	pop	{r3, pc}
   1c2ee:	bf00      	nop
   1c2f0:	00029648 	.word	0x00029648

0001c2f4 <__popcountsi2>:
   1c2f4:	0843      	lsrs	r3, r0, #1
   1c2f6:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
   1c2fa:	1ac3      	subs	r3, r0, r3
   1c2fc:	0898      	lsrs	r0, r3, #2
   1c2fe:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
   1c302:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
   1c306:	b480      	push	{r7}
   1c308:	4418      	add	r0, r3
   1c30a:	eb00 1010 	add.w	r0, r0, r0, lsr #4
   1c30e:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
   1c312:	eb00 4010 	add.w	r0, r0, r0, lsr #16
   1c316:	eb00 2010 	add.w	r0, r0, r0, lsr #8
   1c31a:	af00      	add	r7, sp, #0
   1c31c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   1c320:	46bd      	mov	sp, r7
   1c322:	f85d 7b04 	ldr.w	r7, [sp], #4
   1c326:	4770      	bx	lr

0001c328 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1c328:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1c32a:	2101      	movs	r1, #1
   1c32c:	4808      	ldr	r0, [pc, #32]	; (1c350 <init_sensor_coap+0x28>)
   1c32e:	f7ff fd38 	bl	1bda2 <os_sem_init>
    assert(rc == OS_OK);
   1c332:	b918      	cbnz	r0, 1c33c <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1c334:	4b07      	ldr	r3, [pc, #28]	; (1c354 <init_sensor_coap+0x2c>)
   1c336:	2201      	movs	r2, #1
   1c338:	701a      	strb	r2, [r3, #0]
}
   1c33a:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1c33c:	f7eb ff40 	bl	81c0 <hal_debugger_connected>
   1c340:	b100      	cbz	r0, 1c344 <init_sensor_coap+0x1c>
   1c342:	be01      	bkpt	0x0001
   1c344:	2300      	movs	r3, #0
   1c346:	461a      	mov	r2, r3
   1c348:	4619      	mov	r1, r3
   1c34a:	4618      	mov	r0, r3
   1c34c:	f7ed face 	bl	98ec <__assert_func>
   1c350:	200081b8 	.word	0x200081b8
   1c354:	200081c0 	.word	0x200081c0

0001c358 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1c358:	4b04      	ldr	r3, [pc, #16]	; (1c36c <is_sensor_node+0x14>)
   1c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c35e:	4313      	orrs	r3, r2
   1c360:	d101      	bne.n	1c366 <is_sensor_node+0xe>
    return false;
   1c362:	2000      	movs	r0, #0
}
   1c364:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1c366:	2001      	movs	r0, #1
   1c368:	4770      	bx	lr
   1c36a:	bf00      	nop
   1c36c:	200081d8 	.word	0x200081d8

0001c370 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1c370:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1c372:	4b1a      	ldr	r3, [pc, #104]	; (1c3dc <get_hardware_id+0x6c>)
   1c374:	681b      	ldr	r3, [r3, #0]
   1c376:	b10b      	cbz	r3, 1c37c <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1c378:	4819      	ldr	r0, [pc, #100]	; (1c3e0 <get_hardware_id+0x70>)
   1c37a:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1c37c:	f00c f930 	bl	285e0 <hal_bsp_hw_id_len>
   1c380:	4b16      	ldr	r3, [pc, #88]	; (1c3dc <get_hardware_id+0x6c>)
   1c382:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1c384:	280b      	cmp	r0, #11
   1c386:	d914      	bls.n	1c3b2 <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1c388:	210c      	movs	r1, #12
   1c38a:	4815      	ldr	r0, [pc, #84]	; (1c3e0 <get_hardware_id+0x70>)
   1c38c:	f00c f92a 	bl	285e4 <hal_bsp_hw_id>
   1c390:	4b12      	ldr	r3, [pc, #72]	; (1c3dc <get_hardware_id+0x6c>)
   1c392:	6018      	str	r0, [r3, #0]
   1c394:	2800      	cmp	r0, #0
   1c396:	dd16      	ble.n	1c3c6 <get_hardware_id+0x56>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1c398:	4912      	ldr	r1, [pc, #72]	; (1c3e4 <get_hardware_id+0x74>)
   1c39a:	4813      	ldr	r0, [pc, #76]	; (1c3e8 <get_hardware_id+0x78>)
   1c39c:	f7ec ffb0 	bl	9300 <console_printf>
   1c3a0:	4b0e      	ldr	r3, [pc, #56]	; (1c3dc <get_hardware_id+0x6c>)
   1c3a2:	6819      	ldr	r1, [r3, #0]
   1c3a4:	480e      	ldr	r0, [pc, #56]	; (1c3e0 <get_hardware_id+0x70>)
   1c3a6:	f7ec ff41 	bl	922c <console_dump>
   1c3aa:	4810      	ldr	r0, [pc, #64]	; (1c3ec <get_hardware_id+0x7c>)
   1c3ac:	f7ec ffa8 	bl	9300 <console_printf>
   1c3b0:	e7e2      	b.n	1c378 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1c3b2:	f7eb ff05 	bl	81c0 <hal_debugger_connected>
   1c3b6:	b100      	cbz	r0, 1c3ba <get_hardware_id+0x4a>
   1c3b8:	be01      	bkpt	0x0001
   1c3ba:	2300      	movs	r3, #0
   1c3bc:	461a      	mov	r2, r3
   1c3be:	4619      	mov	r1, r3
   1c3c0:	4618      	mov	r0, r3
   1c3c2:	f7ed fa93 	bl	98ec <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1c3c6:	f7eb fefb 	bl	81c0 <hal_debugger_connected>
   1c3ca:	b100      	cbz	r0, 1c3ce <get_hardware_id+0x5e>
   1c3cc:	be01      	bkpt	0x0001
   1c3ce:	2300      	movs	r3, #0
   1c3d0:	461a      	mov	r2, r3
   1c3d2:	4619      	mov	r1, r3
   1c3d4:	4618      	mov	r0, r3
   1c3d6:	f7ed fa89 	bl	98ec <__assert_func>
   1c3da:	bf00      	nop
   1c3dc:	200081d0 	.word	0x200081d0
   1c3e0:	200081c4 	.word	0x200081c4
   1c3e4:	000296e8 	.word	0x000296e8
   1c3e8:	000296a0 	.word	0x000296a0
   1c3ec:	00029a58 	.word	0x00029a58

0001c3f0 <is_collector_node>:
bool is_collector_node(void) {
   1c3f0:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1c3f2:	f7ff ffbd 	bl	1c370 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1c3f6:	220c      	movs	r2, #12
   1c3f8:	4903      	ldr	r1, [pc, #12]	; (1c408 <is_collector_node+0x18>)
   1c3fa:	f7ef f9b3 	bl	b764 <memcmp>
   1c3fe:	b108      	cbz	r0, 1c404 <is_collector_node+0x14>
    return false; 
   1c400:	2000      	movs	r0, #0
}
   1c402:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1c404:	2001      	movs	r0, #1
   1c406:	e7fc      	b.n	1c402 <is_collector_node+0x12>
   1c408:	00029658 	.word	0x00029658

0001c40c <is_standalone_node>:
bool is_standalone_node(void) {
   1c40c:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1c40e:	f7ff ffef 	bl	1c3f0 <is_collector_node>
   1c412:	b928      	cbnz	r0, 1c420 <is_standalone_node+0x14>
   1c414:	4604      	mov	r4, r0
   1c416:	f7ff ff9f 	bl	1c358 <is_sensor_node>
   1c41a:	b910      	cbnz	r0, 1c422 <is_standalone_node+0x16>
   1c41c:	2401      	movs	r4, #1
   1c41e:	e000      	b.n	1c422 <is_standalone_node+0x16>
    return false;
   1c420:	2400      	movs	r4, #0
}
   1c422:	4620      	mov	r0, r4
   1c424:	bd10      	pop	{r4, pc}
	...

0001c428 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1c428:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c42a:	2400      	movs	r4, #0
   1c42c:	2c04      	cmp	r4, #4
   1c42e:	dc19      	bgt.n	1c464 <sensor_network_init+0x3c>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1c430:	4b25      	ldr	r3, [pc, #148]	; (1c4c8 <sensor_network_init+0xa0>)
   1c432:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1c436:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c43a:	4924      	ldr	r1, [pc, #144]	; (1c4cc <sensor_network_init+0xa4>)
   1c43c:	4824      	ldr	r0, [pc, #144]	; (1c4d0 <sensor_network_init+0xa8>)
   1c43e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1c442:	f7ff fe45 	bl	1c0d0 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1c446:	3001      	adds	r0, #1
   1c448:	280b      	cmp	r0, #11
   1c44a:	dc01      	bgt.n	1c450 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c44c:	3401      	adds	r4, #1
   1c44e:	e7ed      	b.n	1c42c <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1c450:	f7eb feb6 	bl	81c0 <hal_debugger_connected>
   1c454:	b100      	cbz	r0, 1c458 <sensor_network_init+0x30>
   1c456:	be01      	bkpt	0x0001
   1c458:	2300      	movs	r3, #0
   1c45a:	461a      	mov	r2, r3
   1c45c:	4619      	mov	r1, r3
   1c45e:	4618      	mov	r0, r3
   1c460:	f7ed fa44 	bl	98ec <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1c464:	f7ff ff84 	bl	1c370 <get_hardware_id>
   1c468:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c46a:	2400      	movs	r4, #0
   1c46c:	2c04      	cmp	r4, #4
   1c46e:	dc19      	bgt.n	1c4a4 <sensor_network_init+0x7c>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1c470:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1c474:	0093      	lsls	r3, r2, #2
   1c476:	220c      	movs	r2, #12
   1c478:	4916      	ldr	r1, [pc, #88]	; (1c4d4 <sensor_network_init+0xac>)
   1c47a:	4419      	add	r1, r3
   1c47c:	4628      	mov	r0, r5
   1c47e:	f7ef f971 	bl	b764 <memcmp>
   1c482:	b108      	cbz	r0, 1c488 <sensor_network_init+0x60>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c484:	3401      	adds	r4, #1
   1c486:	e7f1      	b.n	1c46c <sensor_network_init+0x44>
            sensor_node_address = sensor_node_addresses[i];
   1c488:	4b0f      	ldr	r3, [pc, #60]	; (1c4c8 <sensor_network_init+0xa0>)
   1c48a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1c48e:	e9d3 0100 	ldrd	r0, r1, [r3]
   1c492:	4b11      	ldr	r3, [pc, #68]	; (1c4d8 <sensor_network_init+0xb0>)
   1c494:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1c498:	1c63      	adds	r3, r4, #1
   1c49a:	4a10      	ldr	r2, [pc, #64]	; (1c4dc <sensor_network_init+0xb4>)
   1c49c:	4910      	ldr	r1, [pc, #64]	; (1c4e0 <sensor_network_init+0xb8>)
   1c49e:	4811      	ldr	r0, [pc, #68]	; (1c4e4 <sensor_network_init+0xbc>)
   1c4a0:	f7ec ff2e 	bl	9300 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1c4a4:	f7ff ffa4 	bl	1c3f0 <is_collector_node>
   1c4a8:	b940      	cbnz	r0, 1c4bc <sensor_network_init+0x94>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1c4aa:	f7ff ffaf 	bl	1c40c <is_standalone_node>
   1c4ae:	b150      	cbz	r0, 1c4c6 <sensor_network_init+0x9e>
   1c4b0:	4a0a      	ldr	r2, [pc, #40]	; (1c4dc <sensor_network_init+0xb4>)
   1c4b2:	490b      	ldr	r1, [pc, #44]	; (1c4e0 <sensor_network_init+0xb8>)
   1c4b4:	480c      	ldr	r0, [pc, #48]	; (1c4e8 <sensor_network_init+0xc0>)
   1c4b6:	f7ec ff23 	bl	9300 <console_printf>
}
   1c4ba:	e004      	b.n	1c4c6 <sensor_network_init+0x9e>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1c4bc:	4a07      	ldr	r2, [pc, #28]	; (1c4dc <sensor_network_init+0xb4>)
   1c4be:	4908      	ldr	r1, [pc, #32]	; (1c4e0 <sensor_network_init+0xb8>)
   1c4c0:	480a      	ldr	r0, [pc, #40]	; (1c4ec <sensor_network_init+0xc4>)
   1c4c2:	f7ec ff1d 	bl	9300 <console_printf>
}
   1c4c6:	bd38      	pop	{r3, r4, r5, pc}
   1c4c8:	00029700 	.word	0x00029700
   1c4cc:	000296a8 	.word	0x000296a8
   1c4d0:	20000354 	.word	0x20000354
   1c4d4:	00029664 	.word	0x00029664
   1c4d8:	200081d8 	.word	0x200081d8
   1c4dc:	000296b0 	.word	0x000296b0
   1c4e0:	000296e8 	.word	0x000296e8
   1c4e4:	000296b8 	.word	0x000296b8
   1c4e8:	000296d8 	.word	0x000296d8
   1c4ec:	000296c8 	.word	0x000296c8

0001c4f0 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1c4f0:	b530      	push	{r4, r5, lr}
   1c4f2:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1c4f4:	2200      	movs	r2, #0
   1c4f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c4fa:	4814      	ldr	r0, [pc, #80]	; (1c54c <config_device+0x5c>)
   1c4fc:	f7ed fcf0 	bl	9ee0 <os_dev_open>
    assert(dev != NULL);
   1c500:	b178      	cbz	r0, 1c522 <config_device+0x32>
   1c502:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1c504:	4668      	mov	r0, sp
   1c506:	f000 f884 	bl	1c612 <temp_stub_default_cfg>
    assert(rc == 0);
   1c50a:	b9a0      	cbnz	r0, 1c536 <config_device+0x46>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1c50c:	4669      	mov	r1, sp
   1c50e:	4620      	mov	r0, r4
   1c510:	f000 f920 	bl	1c754 <temp_stub_config>
   1c514:	4605      	mov	r5, r0
    os_dev_close(dev);
   1c516:	4620      	mov	r0, r4
   1c518:	f7ed fd04 	bl	9f24 <os_dev_close>
    return rc;
}
   1c51c:	4628      	mov	r0, r5
   1c51e:	b003      	add	sp, #12
   1c520:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1c522:	f7eb fe4d 	bl	81c0 <hal_debugger_connected>
   1c526:	b100      	cbz	r0, 1c52a <config_device+0x3a>
   1c528:	be01      	bkpt	0x0001
   1c52a:	2300      	movs	r3, #0
   1c52c:	461a      	mov	r2, r3
   1c52e:	4619      	mov	r1, r3
   1c530:	4618      	mov	r0, r3
   1c532:	f7ed f9db 	bl	98ec <__assert_func>
    assert(rc == 0);
   1c536:	f7eb fe43 	bl	81c0 <hal_debugger_connected>
   1c53a:	b100      	cbz	r0, 1c53e <config_device+0x4e>
   1c53c:	be01      	bkpt	0x0001
   1c53e:	2300      	movs	r3, #0
   1c540:	461a      	mov	r2, r3
   1c542:	4619      	mov	r1, r3
   1c544:	4618      	mov	r0, r3
   1c546:	f7ed f9d1 	bl	98ec <__assert_func>
   1c54a:	bf00      	nop
   1c54c:	00029728 	.word	0x00029728

0001c550 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1c550:	b510      	push	{r4, lr}
   1c552:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1c554:	4c14      	ldr	r4, [pc, #80]	; (1c5a8 <temp_stub_create+0x58>)
   1c556:	4621      	mov	r1, r4
   1c558:	4814      	ldr	r0, [pc, #80]	; (1c5ac <temp_stub_create+0x5c>)
   1c55a:	f7ec fed1 	bl	9300 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1c55e:	4b14      	ldr	r3, [pc, #80]	; (1c5b0 <temp_stub_create+0x60>)
   1c560:	9301      	str	r3, [sp, #4]
   1c562:	4b14      	ldr	r3, [pc, #80]	; (1c5b4 <temp_stub_create+0x64>)
   1c564:	9300      	str	r3, [sp, #0]
   1c566:	2300      	movs	r3, #0
   1c568:	2201      	movs	r2, #1
   1c56a:	4621      	mov	r1, r4
   1c56c:	4812      	ldr	r0, [pc, #72]	; (1c5b8 <temp_stub_create+0x68>)
   1c56e:	f7ed fc71 	bl	9e54 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1c572:	b920      	cbnz	r0, 1c57e <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1c574:	f7ff ffbc 	bl	1c4f0 <config_device>
    assert(rc == 0);
   1c578:	b958      	cbnz	r0, 1c592 <temp_stub_create+0x42>
}
   1c57a:	b002      	add	sp, #8
   1c57c:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1c57e:	f7eb fe1f 	bl	81c0 <hal_debugger_connected>
   1c582:	b100      	cbz	r0, 1c586 <temp_stub_create+0x36>
   1c584:	be01      	bkpt	0x0001
   1c586:	2300      	movs	r3, #0
   1c588:	461a      	mov	r2, r3
   1c58a:	4619      	mov	r1, r3
   1c58c:	4618      	mov	r0, r3
   1c58e:	f7ed f9ad 	bl	98ec <__assert_func>
    assert(rc == 0);
   1c592:	f7eb fe15 	bl	81c0 <hal_debugger_connected>
   1c596:	b100      	cbz	r0, 1c59a <temp_stub_create+0x4a>
   1c598:	be01      	bkpt	0x0001
   1c59a:	2300      	movs	r3, #0
   1c59c:	461a      	mov	r2, r3
   1c59e:	4619      	mov	r1, r3
   1c5a0:	4618      	mov	r0, r3
   1c5a2:	f7ed f9a3 	bl	98ec <__assert_func>
   1c5a6:	bf00      	nop
   1c5a8:	00029728 	.word	0x00029728
   1c5ac:	00029734 	.word	0x00029734
   1c5b0:	20008218 	.word	0x20008218
   1c5b4:	0001c621 	.word	0x0001c621
   1c5b8:	20008230 	.word	0x20008230

0001c5bc <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1c5bc:	2000      	movs	r0, #0
   1c5be:	4770      	bx	lr

0001c5c0 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1c5c0:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1c5c4:	2100      	movs	r1, #0
   1c5c6:	ea50 0301 	orrs.w	r3, r0, r1
   1c5ca:	d004      	beq.n	1c5d6 <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1c5cc:	9b00      	ldr	r3, [sp, #0]
   1c5ce:	2201      	movs	r2, #1
   1c5d0:	701a      	strb	r2, [r3, #0]
    return (0);
   1c5d2:	2000      	movs	r0, #0
   1c5d4:	4770      	bx	lr
err:
    return (rc);
   1c5d6:	f06f 0001 	mvn.w	r0, #1
}
   1c5da:	4770      	bx	lr

0001c5dc <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1c5dc:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1c5de:	b120      	cbz	r0, 1c5ea <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1c5e0:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1c5e4:	d00b      	beq.n	1c5fe <temp_stub_open+0x22>
}
   1c5e6:	2000      	movs	r0, #0
   1c5e8:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1c5ea:	f7eb fde9 	bl	81c0 <hal_debugger_connected>
   1c5ee:	b100      	cbz	r0, 1c5f2 <temp_stub_open+0x16>
   1c5f0:	be01      	bkpt	0x0001
   1c5f2:	2300      	movs	r3, #0
   1c5f4:	461a      	mov	r2, r3
   1c5f6:	4619      	mov	r1, r3
   1c5f8:	4618      	mov	r0, r3
   1c5fa:	f7ed f977 	bl	98ec <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1c5fe:	f7eb fddf 	bl	81c0 <hal_debugger_connected>
   1c602:	b100      	cbz	r0, 1c606 <temp_stub_open+0x2a>
   1c604:	be01      	bkpt	0x0001
   1c606:	2300      	movs	r3, #0
   1c608:	461a      	mov	r2, r3
   1c60a:	4619      	mov	r1, r3
   1c60c:	4618      	mov	r0, r3
   1c60e:	f7ed f96d 	bl	98ec <__assert_func>

0001c612 <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1c612:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c616:	2300      	movs	r3, #0
   1c618:	e9c0 2300 	strd	r2, r3, [r0]
}
   1c61c:	2000      	movs	r0, #0
   1c61e:	4770      	bx	lr

0001c620 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1c620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1c622:	b379      	cbz	r1, 1c684 <temp_stub_init+0x64>
   1c624:	460d      	mov	r5, r1
   1c626:	b380      	cbz	r0, 1c68a <temp_stub_init+0x6a>
   1c628:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1c62a:	30b0      	adds	r0, #176	; 0xb0
   1c62c:	f7ff fff1 	bl	1c612 <temp_stub_default_cfg>
    if (rc) { goto err; }
   1c630:	4603      	mov	r3, r0
   1c632:	b108      	cbz	r0, 1c638 <temp_stub_init+0x18>
}
   1c634:	4618      	mov	r0, r3
   1c636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1c638:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1c63c:	4621      	mov	r1, r4
   1c63e:	4630      	mov	r0, r6
   1c640:	f7ff fa11 	bl	1ba66 <sensor_init>
    if (rc != 0) { goto err; }
   1c644:	4603      	mov	r3, r0
   1c646:	2800      	cmp	r0, #0
   1c648:	d1f4      	bne.n	1c634 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1c64a:	4b11      	ldr	r3, [pc, #68]	; (1c690 <temp_stub_init+0x70>)
   1c64c:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1c64e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1c652:	2300      	movs	r3, #0
   1c654:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1c658:	682a      	ldr	r2, [r5, #0]
   1c65a:	686f      	ldr	r7, [r5, #4]
   1c65c:	68a8      	ldr	r0, [r5, #8]
   1c65e:	68e9      	ldr	r1, [r5, #12]
   1c660:	6722      	str	r2, [r4, #112]	; 0x70
   1c662:	6767      	str	r7, [r4, #116]	; 0x74
   1c664:	67a0      	str	r0, [r4, #120]	; 0x78
   1c666:	67e1      	str	r1, [r4, #124]	; 0x7c
   1c668:	692a      	ldr	r2, [r5, #16]
   1c66a:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1c66e:	4630      	mov	r0, r6
   1c670:	f7ff f9e2 	bl	1ba38 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1c674:	4603      	mov	r3, r0
   1c676:	2800      	cmp	r0, #0
   1c678:	d1dc      	bne.n	1c634 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1c67a:	4a06      	ldr	r2, [pc, #24]	; (1c694 <temp_stub_init+0x74>)
   1c67c:	6022      	str	r2, [r4, #0]
   1c67e:	4a06      	ldr	r2, [pc, #24]	; (1c698 <temp_stub_init+0x78>)
   1c680:	60e2      	str	r2, [r4, #12]
    return (0);
   1c682:	e7d7      	b.n	1c634 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1c684:	f06f 0308 	mvn.w	r3, #8
   1c688:	e7d4      	b.n	1c634 <temp_stub_init+0x14>
   1c68a:	f06f 0308 	mvn.w	r3, #8
   1c68e:	e7d1      	b.n	1c634 <temp_stub_init+0x14>
   1c690:	00029744 	.word	0x00029744
   1c694:	0001c5dd 	.word	0x0001c5dd
   1c698:	0001c5bd 	.word	0x0001c5bd

0001c69c <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1c69c:	b538      	push	{r3, r4, r5, lr}
   1c69e:	460d      	mov	r5, r1
   1c6a0:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1c6a2:	480a      	ldr	r0, [pc, #40]	; (1c6cc <temp_stub_get_raw_temperature+0x30>)
   1c6a4:	f7ec fe2c 	bl	9300 <console_printf>
    assert(temp_sum);
   1c6a8:	b134      	cbz	r4, 1c6b8 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1c6aa:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1c6ae:	fb01 f105 	mul.w	r1, r1, r5
   1c6b2:	6021      	str	r1, [r4, #0]
}
   1c6b4:	2000      	movs	r0, #0
   1c6b6:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1c6b8:	f7eb fd82 	bl	81c0 <hal_debugger_connected>
   1c6bc:	b100      	cbz	r0, 1c6c0 <temp_stub_get_raw_temperature+0x24>
   1c6be:	be01      	bkpt	0x0001
   1c6c0:	2300      	movs	r3, #0
   1c6c2:	461a      	mov	r2, r3
   1c6c4:	4619      	mov	r1, r3
   1c6c6:	4618      	mov	r0, r3
   1c6c8:	f7ed f910 	bl	98ec <__assert_func>
   1c6cc:	0002976c 	.word	0x0002976c

0001c6d0 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1c6d0:	b530      	push	{r4, r5, lr}
   1c6d2:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1c6d4:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1c6d8:	2500      	movs	r5, #0
   1c6da:	ea54 0305 	orrs.w	r3, r4, r5
   1c6de:	d036      	beq.n	1c74e <temp_stub_sensor_read+0x7e>
   1c6e0:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1c6e2:	6805      	ldr	r5, [r0, #0]
   1c6e4:	b165      	cbz	r5, 1c700 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1c6e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c6ea:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1c6ec:	2200      	movs	r2, #0
   1c6ee:	4611      	mov	r1, r2
   1c6f0:	4628      	mov	r0, r5
   1c6f2:	f7ff ff73 	bl	1c5dc <temp_stub_open>
        if (rc) { goto err; }
   1c6f6:	4603      	mov	r3, r0
   1c6f8:	b160      	cbz	r0, 1c714 <temp_stub_sensor_read+0x44>
}
   1c6fa:	4618      	mov	r0, r3
   1c6fc:	b007      	add	sp, #28
   1c6fe:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1c700:	f7eb fd5e 	bl	81c0 <hal_debugger_connected>
   1c704:	b100      	cbz	r0, 1c708 <temp_stub_sensor_read+0x38>
   1c706:	be01      	bkpt	0x0001
   1c708:	2300      	movs	r3, #0
   1c70a:	461a      	mov	r2, r3
   1c70c:	4619      	mov	r1, r3
   1c70e:	4618      	mov	r0, r3
   1c710:	f7ed f8ec 	bl	98ec <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1c714:	2300      	movs	r3, #0
   1c716:	aa03      	add	r2, sp, #12
   1c718:	2101      	movs	r1, #1
   1c71a:	4628      	mov	r0, r5
   1c71c:	f7ff ffbe 	bl	1c69c <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1c720:	4603      	mov	r3, r0
   1c722:	2800      	cmp	r0, #0
   1c724:	d1e9      	bne.n	1c6fa <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1c726:	9a03      	ldr	r2, [sp, #12]
   1c728:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1c72a:	2201      	movs	r2, #1
   1c72c:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1c730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c732:	2a00      	cmp	r2, #0
   1c734:	d0e1      	beq.n	1c6fa <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1c736:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1c73a:	2300      	movs	r3, #0
   1c73c:	e9cd 2300 	strd	r2, r3, [sp]
   1c740:	aa04      	add	r2, sp, #16
   1c742:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c744:	4620      	mov	r0, r4
   1c746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c748:	4798      	blx	r3
   1c74a:	4603      	mov	r3, r0
   1c74c:	e7d5      	b.n	1c6fa <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1c74e:	f06f 0301 	mvn.w	r3, #1
   1c752:	e7d2      	b.n	1c6fa <temp_stub_sensor_read+0x2a>

0001c754 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1c754:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1c756:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1c75a:	d009      	beq.n	1c770 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1c75c:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1c760:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1c764:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c768:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1c76c:	2000      	movs	r0, #0
   1c76e:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1c770:	f7eb fd26 	bl	81c0 <hal_debugger_connected>
   1c774:	b100      	cbz	r0, 1c778 <temp_stub_config+0x24>
   1c776:	be01      	bkpt	0x0001
   1c778:	2300      	movs	r3, #0
   1c77a:	461a      	mov	r2, r3
   1c77c:	4619      	mov	r1, r3
   1c77e:	4618      	mov	r0, r3
   1c780:	f7ed f8b4 	bl	98ec <__assert_func>

0001c784 <smp_free_buf>:
}

static void
smp_free_buf(void *m, void *arg)
{
    if (!m) {
   1c784:	b118      	cbz	r0, 1c78e <smp_free_buf+0xa>
{
   1c786:	b508      	push	{r3, lr}
        return;
    }

    os_mbuf_free_chain(m);
   1c788:	f7ed fd2a 	bl	a1e0 <os_mbuf_free_chain>
}
   1c78c:	bd08      	pop	{r3, pc}
   1c78e:	4770      	bx	lr

0001c790 <smp_init_writer>:
smp_init_writer(struct cbor_encoder_writer *writer, void *m,
		void *arg)
{
    struct cbor_mbuf_writer *cmw;
     
    if (!writer) {
   1c790:	b120      	cbz	r0, 1c79c <smp_init_writer+0xc>
{
   1c792:	b508      	push	{r3, lr}
        return MGMT_ERR_EINVAL;
    }

    cmw = (struct cbor_mbuf_writer *)writer;
    cbor_mbuf_writer_init(cmw, m);
   1c794:	f00b fed8 	bl	28548 <cbor_mbuf_writer_init>

    return 0;
   1c798:	2000      	movs	r0, #0
}
   1c79a:	bd08      	pop	{r3, pc}
        return MGMT_ERR_EINVAL;
   1c79c:	2003      	movs	r0, #3
}
   1c79e:	4770      	bx	lr

0001c7a0 <smp_init_reader>:
    if (!reader) {
   1c7a0:	b128      	cbz	r0, 1c7ae <smp_init_reader+0xe>
{
   1c7a2:	b508      	push	{r3, lr}
    cbor_mbuf_reader_init(cmr, m, 0);
   1c7a4:	2200      	movs	r2, #0
   1c7a6:	f00b fe91 	bl	284cc <cbor_mbuf_reader_init>
    return 0;
   1c7aa:	2000      	movs	r0, #0
}
   1c7ac:	bd08      	pop	{r3, pc}
        return MGMT_ERR_EINVAL;
   1c7ae:	2003      	movs	r0, #3
}
   1c7b0:	4770      	bx	lr

0001c7b2 <smp_write_at>:
{
   1c7b2:	b538      	push	{r3, r4, r5, lr}
    if (!writer) {
   1c7b4:	b160      	cbz	r0, 1c7d0 <smp_write_at+0x1e>
   1c7b6:	4604      	mov	r4, r0
    m = cmw->m;
   1c7b8:	6885      	ldr	r5, [r0, #8]
    if (offset > OS_MBUF_PKTLEN(m)) {
   1c7ba:	8a28      	ldrh	r0, [r5, #16]
   1c7bc:	4288      	cmp	r0, r1
   1c7be:	d309      	bcc.n	1c7d4 <smp_write_at+0x22>
    rc = os_mbuf_copyinto(m, offset, data, len);
   1c7c0:	4628      	mov	r0, r5
   1c7c2:	f7ed ff2e 	bl	a622 <os_mbuf_copyinto>
    if (rc) {
   1c7c6:	4603      	mov	r3, r0
   1c7c8:	b938      	cbnz	r0, 1c7da <smp_write_at+0x28>
    writer->bytes_written = OS_MBUF_PKTLEN(m);
   1c7ca:	8a2a      	ldrh	r2, [r5, #16]
   1c7cc:	6062      	str	r2, [r4, #4]
    return 0;
   1c7ce:	e002      	b.n	1c7d6 <smp_write_at+0x24>
        return MGMT_ERR_EINVAL;
   1c7d0:	2303      	movs	r3, #3
   1c7d2:	e000      	b.n	1c7d6 <smp_write_at+0x24>
        return MGMT_ERR_EINVAL;
   1c7d4:	2303      	movs	r3, #3
}
   1c7d6:	4618      	mov	r0, r3
   1c7d8:	bd38      	pop	{r3, r4, r5, pc}
        return MGMT_ERR_ENOMEM;
   1c7da:	2302      	movs	r3, #2
   1c7dc:	e7fb      	b.n	1c7d6 <smp_write_at+0x24>

0001c7de <smp_reset_buf>:
    if (!m) {
   1c7de:	b128      	cbz	r0, 1c7ec <smp_reset_buf+0xe>
{
   1c7e0:	b508      	push	{r3, lr}
    os_mbuf_adj(m, -1 * OS_MBUF_PKTLEN((struct os_mbuf *)m));
   1c7e2:	8a01      	ldrh	r1, [r0, #16]
   1c7e4:	4249      	negs	r1, r1
   1c7e6:	f7ed fe2a 	bl	a43e <os_mbuf_adj>
}
   1c7ea:	bd08      	pop	{r3, pc}
   1c7ec:	4770      	bx	lr

0001c7ee <smp_trim_front>:
{
   1c7ee:	b508      	push	{r3, lr}
    os_mbuf_adj(m, len);
   1c7f0:	f7ed fe25 	bl	a43e <os_mbuf_adj>
}
   1c7f4:	bd08      	pop	{r3, pc}

0001c7f6 <smp_alloc_rsp>:
{
   1c7f6:	b538      	push	{r3, r4, r5, lr}
   if (!req) {
   1c7f8:	b188      	cbz	r0, 1c81e <smp_alloc_rsp+0x28>
   1c7fa:	4604      	mov	r4, r0
   rsp = os_msys_get_pkthdr(0, OS_MBUF_USRHDR_LEN(m));
   1c7fc:	7941      	ldrb	r1, [r0, #5]
   1c7fe:	3908      	subs	r1, #8
   1c800:	b289      	uxth	r1, r1
   1c802:	2000      	movs	r0, #0
   1c804:	f7ee fa05 	bl	ac12 <os_msys_get_pkthdr>
   if (!rsp) {
   1c808:	4605      	mov	r5, r0
   1c80a:	b150      	cbz	r0, 1c822 <smp_alloc_rsp+0x2c>
   memcpy(OS_MBUF_USRHDR(rsp), OS_MBUF_USRHDR(m), OS_MBUF_USRHDR_LEN(m));
   1c80c:	7962      	ldrb	r2, [r4, #5]
   1c80e:	3a08      	subs	r2, #8
   1c810:	f104 0118 	add.w	r1, r4, #24
   1c814:	3018      	adds	r0, #24
   1c816:	f7ee ffc9 	bl	b7ac <memcpy>
}
   1c81a:	4628      	mov	r0, r5
   1c81c:	bd38      	pop	{r3, r4, r5, pc}
       return NULL;
   1c81e:	2500      	movs	r5, #0
   1c820:	e7fb      	b.n	1c81a <smp_alloc_rsp+0x24>
       return NULL;
   1c822:	2500      	movs	r5, #0
   1c824:	e7f9      	b.n	1c81a <smp_alloc_rsp+0x24>

0001c826 <smp_rsp_frag_alloc>:
/**
 * Allocates an mbuf to costain an outgoing response fragment.
 */
static struct os_mbuf *
smp_rsp_frag_alloc(uint16_t frag_size, void *arg)
{
   1c826:	b538      	push	{r3, r4, r5, lr}
   1c828:	460c      	mov	r4, r1
    /* We need to duplicate the user header from the source response, as that
     * is where transport-specific information is stored.
     */
    src_rsp = arg;

    frag = os_msys_get_pkthdr(frag_size, OS_MBUF_USRHDR_LEN(src_rsp));
   1c82a:	7949      	ldrb	r1, [r1, #5]
   1c82c:	3908      	subs	r1, #8
   1c82e:	b289      	uxth	r1, r1
   1c830:	f7ee f9ef 	bl	ac12 <os_msys_get_pkthdr>
    if (frag != NULL) {
   1c834:	4605      	mov	r5, r0
   1c836:	b130      	cbz	r0, 1c846 <smp_rsp_frag_alloc+0x20>
        /* Copy the user header from the response into the fragmest mbuf. */
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
               OS_MBUF_USRHDR_LEN(src_rsp));
   1c838:	7962      	ldrb	r2, [r4, #5]
        memcpy(OS_MBUF_USRHDR(frag), OS_MBUF_USRHDR(src_rsp),
   1c83a:	3a08      	subs	r2, #8
   1c83c:	f104 0118 	add.w	r1, r4, #24
   1c840:	3018      	adds	r0, #24
   1c842:	f7ee ffb3 	bl	b7ac <memcpy>
    }

    return frag;
}
   1c846:	4628      	mov	r0, r5
   1c848:	bd38      	pop	{r3, r4, r5, pc}
	...

0001c84c <smp_tx_rsp>:

int
smp_tx_rsp(struct smp_streamer *ns, void *rsp, void *arg)
{
   1c84c:	b570      	push	{r4, r5, r6, lr}
   1c84e:	b082      	sub	sp, #8
   1c850:	460c      	mov	r4, r1
   1c852:	4615      	mov	r5, r2
    struct os_mbuf *m;
    uint16_t mtu;
    int rc;

    st = arg;
    m  = rsp;
   1c854:	9101      	str	r1, [sp, #4]

    mtu = st->st_get_mtu(rsp);
   1c856:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1c858:	4608      	mov	r0, r1
   1c85a:	4798      	blx	r3
    if (mtu == 0U) {
   1c85c:	4606      	mov	r6, r0
   1c85e:	b180      	cbz	r0, 1c882 <smp_tx_rsp+0x36>
        /* The transport cannot support a transmission right now. */
        return MGMT_ERR_EUNKNOWN;
    }

    while (m != NULL) {
   1c860:	9b01      	ldr	r3, [sp, #4]
   1c862:	b163      	cbz	r3, 1c87e <smp_tx_rsp+0x32>
        frag = mem_split_frag(&m, mtu, smp_rsp_frag_alloc, rsp);
   1c864:	4623      	mov	r3, r4
   1c866:	4a09      	ldr	r2, [pc, #36]	; (1c88c <smp_tx_rsp+0x40>)
   1c868:	4631      	mov	r1, r6
   1c86a:	a801      	add	r0, sp, #4
   1c86c:	f7fa fcc1 	bl	171f2 <mem_split_frag>
        if (frag == NULL) {
   1c870:	b150      	cbz	r0, 1c888 <smp_tx_rsp+0x3c>
            return MGMT_ERR_ENOMEM;
        }

        rc = st->st_output(frag);
   1c872:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   1c874:	4790      	blx	r2
        if (rc != 0) {
   1c876:	2800      	cmp	r0, #0
   1c878:	d0f2      	beq.n	1c860 <smp_tx_rsp+0x14>
            return MGMT_ERR_EUNKNOWN;
   1c87a:	2001      	movs	r0, #1
   1c87c:	e002      	b.n	1c884 <smp_tx_rsp+0x38>
        }
    }

    return 0;
   1c87e:	2000      	movs	r0, #0
   1c880:	e000      	b.n	1c884 <smp_tx_rsp+0x38>
        return MGMT_ERR_EUNKNOWN;
   1c882:	2001      	movs	r0, #1
}
   1c884:	b002      	add	sp, #8
   1c886:	bd70      	pop	{r4, r5, r6, pc}
            return MGMT_ERR_ENOMEM;
   1c888:	2002      	movs	r0, #2
   1c88a:	e7fb      	b.n	1c884 <smp_tx_rsp+0x38>
   1c88c:	0001c827 	.word	0x0001c827

0001c890 <smp_process_packet>:
    struct cbor_mbuf_reader reader;
    struct cbor_mbuf_writer writer;
    struct os_mbuf *m;
    int rc;

    if (!st) {
   1c890:	b1c0      	cbz	r0, 1c8c4 <smp_process_packet+0x34>
{
   1c892:	b510      	push	{r4, lr}
   1c894:	b08c      	sub	sp, #48	; 0x30
   1c896:	4604      	mov	r4, r0
        return MGMT_ERR_EINVAL;
    }

    st->st_streamer = (struct smp_streamer) {
   1c898:	4b0e      	ldr	r3, [pc, #56]	; (1c8d4 <smp_process_packet+0x44>)
   1c89a:	6003      	str	r3, [r0, #0]
   1c89c:	6060      	str	r0, [r4, #4]
   1c89e:	ab03      	add	r3, sp, #12
   1c8a0:	6083      	str	r3, [r0, #8]
   1c8a2:	f8c0 d00c 	str.w	sp, [r0, #12]
   1c8a6:	4b0c      	ldr	r3, [pc, #48]	; (1c8d8 <smp_process_packet+0x48>)
   1c8a8:	6103      	str	r3, [r0, #16]
        },
        .tx_rsp_cb = smp_tx_rsp,
    };

    while (1) {
        m = os_mqueue_get(&st->st_imq);
   1c8aa:	f104 0014 	add.w	r0, r4, #20
   1c8ae:	f7ed fc22 	bl	a0f6 <os_mqueue_get>
        if (!m) {
   1c8b2:	4601      	mov	r1, r0
   1c8b4:	b148      	cbz	r0, 1c8ca <smp_process_packet+0x3a>
            break;
        }

        rc = smp_process_request_packet(&st->st_streamer, m);
   1c8b6:	4620      	mov	r0, r4
   1c8b8:	f00a fdde 	bl	27478 <smp_process_request_packet>
        if (rc) {
   1c8bc:	4603      	mov	r3, r0
   1c8be:	2800      	cmp	r0, #0
   1c8c0:	d0f3      	beq.n	1c8aa <smp_process_packet+0x1a>
   1c8c2:	e003      	b.n	1c8cc <smp_process_packet+0x3c>
        return MGMT_ERR_EINVAL;
   1c8c4:	2303      	movs	r3, #3
            return rc;
        }
    }
    
    return 0;
}
   1c8c6:	4618      	mov	r0, r3
   1c8c8:	4770      	bx	lr
    return 0;
   1c8ca:	2300      	movs	r3, #0
}
   1c8cc:	4618      	mov	r0, r3
   1c8ce:	b00c      	add	sp, #48	; 0x30
   1c8d0:	bd10      	pop	{r4, pc}
   1c8d2:	bf00      	nop
   1c8d4:	00029784 	.word	0x00029784
   1c8d8:	0001c84d 	.word	0x0001c84d

0001c8dc <smp_event_data_in>:
    return rc;
}

static void
smp_event_data_in(struct os_event *ev)
{
   1c8dc:	b508      	push	{r3, lr}
    smp_process_packet(ev->ev_arg);
   1c8de:	6880      	ldr	r0, [r0, #8]
   1c8e0:	f7ff ffd6 	bl	1c890 <smp_process_packet>
}
   1c8e4:	bd08      	pop	{r3, pc}
	...

0001c8e8 <mgmt_evq_set>:
    g_smp_evq = evq;
   1c8e8:	4b01      	ldr	r3, [pc, #4]	; (1c8f0 <mgmt_evq_set+0x8>)
   1c8ea:	6018      	str	r0, [r3, #0]
}
   1c8ec:	4770      	bx	lr
   1c8ee:	bf00      	nop
   1c8f0:	200082f0 	.word	0x200082f0

0001c8f4 <smp_rx_req>:
{
   1c8f4:	b538      	push	{r3, r4, r5, lr}
   1c8f6:	460c      	mov	r4, r1
    rc = os_mqueue_put(&st->st_imq, os_eventq_dflt_get(), req);
   1c8f8:	f100 0514 	add.w	r5, r0, #20
   1c8fc:	f7ed fbee 	bl	a0dc <os_eventq_dflt_get>
   1c900:	4622      	mov	r2, r4
   1c902:	4601      	mov	r1, r0
   1c904:	4628      	mov	r0, r5
   1c906:	f7ed fc09 	bl	a11c <os_mqueue_put>
    if (rc) {
   1c90a:	4605      	mov	r5, r0
   1c90c:	b908      	cbnz	r0, 1c912 <smp_rx_req+0x1e>
}
   1c90e:	4628      	mov	r0, r5
   1c910:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(req);
   1c912:	4620      	mov	r0, r4
   1c914:	f7ed fc64 	bl	a1e0 <os_mbuf_free_chain>
    return rc;
   1c918:	e7f9      	b.n	1c90e <smp_rx_req+0x1a>
	...

0001c91c <smp_transport_init>:

int
smp_transport_init(struct smp_transport *st,
                   smp_transport_out_func_t output_func,
                   smp_transport_get_mtu_func_t get_mtu_func)
{
   1c91c:	b508      	push	{r3, lr}
    int rc;

    st->st_output = output_func;
   1c91e:	62c1      	str	r1, [r0, #44]	; 0x2c
    st->st_get_mtu = get_mtu_func;
   1c920:	6302      	str	r2, [r0, #48]	; 0x30

    rc = os_mqueue_init(&st->st_imq, smp_event_data_in, st);
   1c922:	4602      	mov	r2, r0
   1c924:	4902      	ldr	r1, [pc, #8]	; (1c930 <smp_transport_init+0x14>)
   1c926:	3014      	adds	r0, #20
   1c928:	f7ed fbdc 	bl	a0e4 <os_mqueue_init>
    }

    return 0;
err:
    return rc;
}
   1c92c:	bd08      	pop	{r3, pc}
   1c92e:	bf00      	nop
   1c930:	0001c8dd 	.word	0x0001c8dd

0001c934 <smp_pkg_init>:

void
smp_pkg_init(void)
{
   1c934:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1c936:	4b09      	ldr	r3, [pc, #36]	; (1c95c <smp_pkg_init+0x28>)
   1c938:	781b      	ldrb	r3, [r3, #0]
   1c93a:	b123      	cbz	r3, 1c946 <smp_pkg_init+0x12>

    mgmt_evq_set(os_eventq_dflt_get());
   1c93c:	f7ed fbce 	bl	a0dc <os_eventq_dflt_get>
   1c940:	f7ff ffd2 	bl	1c8e8 <mgmt_evq_set>
}
   1c944:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c946:	f7eb fc3b 	bl	81c0 <hal_debugger_connected>
   1c94a:	b100      	cbz	r0, 1c94e <smp_pkg_init+0x1a>
   1c94c:	be01      	bkpt	0x0001
   1c94e:	2300      	movs	r3, #0
   1c950:	461a      	mov	r2, r3
   1c952:	4619      	mov	r1, r3
   1c954:	4618      	mov	r0, r3
   1c956:	f7ec ffc9 	bl	98ec <__assert_func>
   1c95a:	bf00      	nop
   1c95c:	20000506 	.word	0x20000506

0001c960 <smp_ble_get_mtu>:
            return BLE_ATT_ERR_UNLIKELY;
    }
}

uint16_t
smp_ble_get_mtu(struct os_mbuf *req) {
   1c960:	b508      	push	{r3, lr}

    uint16_t conn_handle;
    uint16_t mtu;

    memcpy(&conn_handle, OS_MBUF_USRHDR(req), sizeof (conn_handle));
    mtu = ble_att_mtu(conn_handle);
   1c962:	8b00      	ldrh	r0, [r0, #24]
   1c964:	f7f7 feb1 	bl	146ca <ble_att_mtu>
    if (!mtu) {
   1c968:	4603      	mov	r3, r0
   1c96a:	b108      	cbz	r0, 1c970 <smp_ble_get_mtu+0x10>
        /* No longer connected. */
        return 0;
    }

    /* 3 is the number of bytes for ATT notification base */
    mtu = mtu - 3;
   1c96c:	1ec3      	subs	r3, r0, #3
   1c96e:	b29b      	uxth	r3, r3

    return (mtu);
}
   1c970:	4618      	mov	r0, r3
   1c972:	bd08      	pop	{r3, pc}

0001c974 <smp_ble_out>:
    }
}

static int
smp_ble_out(struct os_mbuf *om)
{
   1c974:	b538      	push	{r3, r4, r5, lr}
   1c976:	4604      	mov	r4, r0
    int rc;

    rc = os_mqueue_put(&g_smp_ble_mq, os_eventq_dflt_get(), om);
   1c978:	f7ed fbb0 	bl	a0dc <os_eventq_dflt_get>
   1c97c:	4622      	mov	r2, r4
   1c97e:	4601      	mov	r1, r0
   1c980:	4805      	ldr	r0, [pc, #20]	; (1c998 <smp_ble_out+0x24>)
   1c982:	f7ed fbcb 	bl	a11c <os_mqueue_put>
    if (rc != 0) {
   1c986:	4605      	mov	r5, r0
   1c988:	b908      	cbnz	r0, 1c98e <smp_ble_out+0x1a>

    return 0;
err:
    os_mbuf_free_chain(om);
    return rc;
}
   1c98a:	4628      	mov	r0, r5
   1c98c:	bd38      	pop	{r3, r4, r5, pc}
    os_mbuf_free_chain(om);
   1c98e:	4620      	mov	r0, r4
   1c990:	f7ed fc26 	bl	a1e0 <os_mbuf_free_chain>
    return rc;
   1c994:	e7f9      	b.n	1c98a <smp_ble_out+0x16>
   1c996:	bf00      	nop
   1c998:	200082f8 	.word	0x200082f8

0001c99c <smp_ble_event_data_in>:
{
   1c99c:	b508      	push	{r3, lr}
    while ((m_resp = os_mqueue_get(&g_smp_ble_mq)) != NULL) {
   1c99e:	480d      	ldr	r0, [pc, #52]	; (1c9d4 <smp_ble_event_data_in+0x38>)
   1c9a0:	f7ed fba9 	bl	a0f6 <os_mqueue_get>
   1c9a4:	4603      	mov	r3, r0
   1c9a6:	b1a0      	cbz	r0, 1c9d2 <smp_ble_event_data_in+0x36>
        assert(OS_MBUF_USRHDR_LEN(m_resp) >= sizeof (conn_handle));
   1c9a8:	795a      	ldrb	r2, [r3, #5]
   1c9aa:	3a08      	subs	r2, #8
   1c9ac:	2a01      	cmp	r2, #1
   1c9ae:	d906      	bls.n	1c9be <smp_ble_event_data_in+0x22>
        ble_gattc_notify_custom(conn_handle, g_ble_smp_attr_handle,
   1c9b0:	461a      	mov	r2, r3
   1c9b2:	4909      	ldr	r1, [pc, #36]	; (1c9d8 <smp_ble_event_data_in+0x3c>)
   1c9b4:	8809      	ldrh	r1, [r1, #0]
   1c9b6:	8b18      	ldrh	r0, [r3, #24]
   1c9b8:	f7f1 ff01 	bl	e7be <ble_gattc_notify_custom>
   1c9bc:	e7ef      	b.n	1c99e <smp_ble_event_data_in+0x2>
        assert(OS_MBUF_USRHDR_LEN(m_resp) >= sizeof (conn_handle));
   1c9be:	f7eb fbff 	bl	81c0 <hal_debugger_connected>
   1c9c2:	b100      	cbz	r0, 1c9c6 <smp_ble_event_data_in+0x2a>
   1c9c4:	be01      	bkpt	0x0001
   1c9c6:	2300      	movs	r3, #0
   1c9c8:	461a      	mov	r2, r3
   1c9ca:	4619      	mov	r1, r3
   1c9cc:	4618      	mov	r0, r3
   1c9ce:	f7ec ff8d 	bl	98ec <__assert_func>
}
   1c9d2:	bd08      	pop	{r3, pc}
   1c9d4:	200082f8 	.word	0x200082f8
   1c9d8:	200082f4 	.word	0x200082f4

0001c9dc <gatt_svr_chr_access_smp>:
{
   1c9dc:	b570      	push	{r4, r5, r6, lr}
    switch (ctxt->op) {
   1c9de:	7813      	ldrb	r3, [r2, #0]
   1c9e0:	2b01      	cmp	r3, #1
   1c9e2:	d136      	bne.n	1ca52 <gatt_svr_chr_access_smp+0x76>
   1c9e4:	4606      	mov	r6, r0
   1c9e6:	4615      	mov	r5, r2
            if (OS_MBUF_USRHDR_LEN(ctxt->om) >= sizeof (conn_handle)) {
   1c9e8:	6854      	ldr	r4, [r2, #4]
   1c9ea:	7963      	ldrb	r3, [r4, #5]
   1c9ec:	f1a3 0208 	sub.w	r2, r3, #8
   1c9f0:	2a01      	cmp	r2, #1
   1c9f2:	d90a      	bls.n	1ca0a <gatt_svr_chr_access_smp+0x2e>
                ctxt->om = NULL;
   1c9f4:	2300      	movs	r3, #0
   1c9f6:	606b      	str	r3, [r5, #4]
            memcpy(OS_MBUF_USRHDR(m_req), &conn_handle, sizeof(conn_handle));
   1c9f8:	8326      	strh	r6, [r4, #24]
            rc = smp_rx_req(&g_smp_ble_transport, m_req);
   1c9fa:	4621      	mov	r1, r4
   1c9fc:	481b      	ldr	r0, [pc, #108]	; (1ca6c <gatt_svr_chr_access_smp+0x90>)
   1c9fe:	f7ff ff79 	bl	1c8f4 <smp_rx_req>
            if (rc) {
   1ca02:	4603      	mov	r3, r0
   1ca04:	bb18      	cbnz	r0, 1ca4e <gatt_svr_chr_access_smp+0x72>
}
   1ca06:	4618      	mov	r0, r3
   1ca08:	bd70      	pop	{r4, r5, r6, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1ca0a:	2b07      	cmp	r3, #7
   1ca0c:	d901      	bls.n	1ca12 <gatt_svr_chr_access_smp+0x36>
        startoff = om->om_pkthdr_len;
   1ca0e:	b29b      	uxth	r3, r3
   1ca10:	e000      	b.n	1ca14 <gatt_svr_chr_access_smp+0x38>
    startoff = 0;
   1ca12:	2300      	movs	r3, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1ca14:	4621      	mov	r1, r4
   1ca16:	f851 2b10 	ldr.w	r2, [r1], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1ca1a:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1ca1c:	1ad3      	subs	r3, r2, r3
   1ca1e:	b29b      	uxth	r3, r3
            } else if (OS_MBUF_LEADINGSPACE(ctxt->om) >=
   1ca20:	2b01      	cmp	r3, #1
   1ca22:	d905      	bls.n	1ca30 <gatt_svr_chr_access_smp+0x54>
                ctxt->om = NULL;
   1ca24:	2300      	movs	r3, #0
   1ca26:	606b      	str	r3, [r5, #4]
                m_req->om_pkthdr_len += sizeof (conn_handle);
   1ca28:	7963      	ldrb	r3, [r4, #5]
   1ca2a:	3302      	adds	r3, #2
   1ca2c:	7163      	strb	r3, [r4, #5]
   1ca2e:	e7e3      	b.n	1c9f8 <gatt_svr_chr_access_smp+0x1c>
                m_req = os_msys_get_pkthdr(OS_MBUF_PKTLEN(ctxt->om),
   1ca30:	2102      	movs	r1, #2
   1ca32:	8a20      	ldrh	r0, [r4, #16]
   1ca34:	f7ee f8ed 	bl	ac12 <os_msys_get_pkthdr>
                if (!m_req) {
   1ca38:	4604      	mov	r4, r0
   1ca3a:	b1a0      	cbz	r0, 1ca66 <gatt_svr_chr_access_smp+0x8a>
                rc = os_mbuf_appendfrom(m_req, ctxt->om, 0,
   1ca3c:	6869      	ldr	r1, [r5, #4]
   1ca3e:	8a0b      	ldrh	r3, [r1, #16]
   1ca40:	2200      	movs	r2, #0
   1ca42:	f7ed fca5 	bl	a390 <os_mbuf_appendfrom>
                if (rc) {
   1ca46:	2800      	cmp	r0, #0
   1ca48:	d0d6      	beq.n	1c9f8 <gatt_svr_chr_access_smp+0x1c>
                    return BLE_ATT_ERR_INSUFFICIENT_RES;
   1ca4a:	2311      	movs	r3, #17
   1ca4c:	e7db      	b.n	1ca06 <gatt_svr_chr_access_smp+0x2a>
                return BLE_ATT_ERR_UNLIKELY;
   1ca4e:	230e      	movs	r3, #14
   1ca50:	e7d9      	b.n	1ca06 <gatt_svr_chr_access_smp+0x2a>
            assert(0);
   1ca52:	f7eb fbb5 	bl	81c0 <hal_debugger_connected>
   1ca56:	b100      	cbz	r0, 1ca5a <gatt_svr_chr_access_smp+0x7e>
   1ca58:	be01      	bkpt	0x0001
   1ca5a:	2300      	movs	r3, #0
   1ca5c:	461a      	mov	r2, r3
   1ca5e:	4619      	mov	r1, r3
   1ca60:	4618      	mov	r0, r3
   1ca62:	f7ec ff43 	bl	98ec <__assert_func>
                    return BLE_ATT_ERR_INSUFFICIENT_RES;
   1ca66:	2311      	movs	r3, #17
   1ca68:	e7cd      	b.n	1ca06 <gatt_svr_chr_access_smp+0x2a>
   1ca6a:	bf00      	nop
   1ca6c:	20008310 	.word	0x20008310

0001ca70 <smp_ble_gatt_svr_init>:
 * @param eventq
 * @return 0 on success; non-zero on failure
 */
int
smp_ble_gatt_svr_init(void)
{
   1ca70:	b508      	push	{r3, lr}
    int rc;

    rc = ble_gatts_count_cfg(gatt_svr_svcs);
   1ca72:	480c      	ldr	r0, [pc, #48]	; (1caa4 <smp_ble_gatt_svr_init+0x34>)
   1ca74:	f7f2 ff4a 	bl	f90c <ble_gatts_count_cfg>
    if (rc != 0) {
   1ca78:	4603      	mov	r3, r0
   1ca7a:	b108      	cbz	r0, 1ca80 <smp_ble_gatt_svr_init+0x10>

    rc = smp_transport_init(&g_smp_ble_transport, smp_ble_out, smp_ble_get_mtu);

err:
    return rc;
}
   1ca7c:	4618      	mov	r0, r3
   1ca7e:	bd08      	pop	{r3, pc}
    rc = ble_gatts_add_svcs(gatt_svr_svcs);
   1ca80:	4808      	ldr	r0, [pc, #32]	; (1caa4 <smp_ble_gatt_svr_init+0x34>)
   1ca82:	f7f2 ff1f 	bl	f8c4 <ble_gatts_add_svcs>
    if (rc != 0) {
   1ca86:	4603      	mov	r3, r0
   1ca88:	2800      	cmp	r0, #0
   1ca8a:	d1f7      	bne.n	1ca7c <smp_ble_gatt_svr_init+0xc>
    os_mqueue_init(&g_smp_ble_mq, &smp_ble_event_data_in, NULL);
   1ca8c:	2200      	movs	r2, #0
   1ca8e:	4906      	ldr	r1, [pc, #24]	; (1caa8 <smp_ble_gatt_svr_init+0x38>)
   1ca90:	4806      	ldr	r0, [pc, #24]	; (1caac <smp_ble_gatt_svr_init+0x3c>)
   1ca92:	f7ed fb27 	bl	a0e4 <os_mqueue_init>
    rc = smp_transport_init(&g_smp_ble_transport, smp_ble_out, smp_ble_get_mtu);
   1ca96:	4a06      	ldr	r2, [pc, #24]	; (1cab0 <smp_ble_gatt_svr_init+0x40>)
   1ca98:	4906      	ldr	r1, [pc, #24]	; (1cab4 <smp_ble_gatt_svr_init+0x44>)
   1ca9a:	4807      	ldr	r0, [pc, #28]	; (1cab8 <smp_ble_gatt_svr_init+0x48>)
   1ca9c:	f7ff ff3e 	bl	1c91c <smp_transport_init>
   1caa0:	4603      	mov	r3, r0
   1caa2:	e7eb      	b.n	1ca7c <smp_ble_gatt_svr_init+0xc>
   1caa4:	000297c8 	.word	0x000297c8
   1caa8:	0001c99d 	.word	0x0001c99d
   1caac:	200082f8 	.word	0x200082f8
   1cab0:	0001c961 	.word	0x0001c961
   1cab4:	0001c975 	.word	0x0001c975
   1cab8:	20008310 	.word	0x20008310

0001cabc <smp_ble_pkg_init>:

void
smp_ble_pkg_init(void)
{
   1cabc:	b510      	push	{r4, lr}
   1cabe:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1cac0:	4b0f      	ldr	r3, [pc, #60]	; (1cb00 <smp_ble_pkg_init+0x44>)
   1cac2:	781b      	ldrb	r3, [r3, #0]
   1cac4:	b123      	cbz	r3, 1cad0 <smp_ble_pkg_init+0x14>

    rc = smp_ble_gatt_svr_init();
   1cac6:	f7ff ffd3 	bl	1ca70 <smp_ble_gatt_svr_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1caca:	b958      	cbnz	r0, 1cae4 <smp_ble_pkg_init+0x28>
}
   1cacc:	b002      	add	sp, #8
   1cace:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cad0:	f7eb fb76 	bl	81c0 <hal_debugger_connected>
   1cad4:	b100      	cbz	r0, 1cad8 <smp_ble_pkg_init+0x1c>
   1cad6:	be01      	bkpt	0x0001
   1cad8:	2300      	movs	r3, #0
   1cada:	461a      	mov	r2, r3
   1cadc:	4619      	mov	r1, r3
   1cade:	4618      	mov	r0, r3
   1cae0:	f7ec ff04 	bl	98ec <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cae4:	f7eb fb6c 	bl	81c0 <hal_debugger_connected>
   1cae8:	b100      	cbz	r0, 1caec <smp_ble_pkg_init+0x30>
   1caea:	be01      	bkpt	0x0001
   1caec:	2000      	movs	r0, #0
   1caee:	9000      	str	r0, [sp, #0]
   1caf0:	4b04      	ldr	r3, [pc, #16]	; (1cb04 <smp_ble_pkg_init+0x48>)
   1caf2:	681c      	ldr	r4, [r3, #0]
   1caf4:	4603      	mov	r3, r0
   1caf6:	4602      	mov	r2, r0
   1caf8:	4601      	mov	r1, r0
   1cafa:	47a0      	blx	r4
}
   1cafc:	e7e6      	b.n	1cacc <smp_ble_pkg_init+0x10>
   1cafe:	bf00      	nop
   1cb00:	20000506 	.word	0x20000506
   1cb04:	200000ec 	.word	0x200000ec

0001cb08 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1cb08:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1cb0a:	e002      	b.n	1cb12 <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1cb0c:	4618      	mov	r0, r3
   1cb0e:	f000 f85b 	bl	1cbc8 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1cb12:	4808      	ldr	r0, [pc, #32]	; (1cb34 <oc_buffer_tx+0x2c>)
   1cb14:	f7ed faef 	bl	a0f6 <os_mqueue_get>
   1cb18:	4603      	mov	r3, r0
   1cb1a:	b148      	cbz	r0, 1cb30 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1cb1c:	2200      	movs	r2, #0
   1cb1e:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1cb20:	7e1a      	ldrb	r2, [r3, #24]
   1cb22:	f012 0f08 	tst.w	r2, #8
   1cb26:	d0f1      	beq.n	1cb0c <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1cb28:	4618      	mov	r0, r3
   1cb2a:	f000 f85d 	bl	1cbe8 <oc_send_multicast_message>
   1cb2e:	e7f0      	b.n	1cb12 <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1cb30:	bd08      	pop	{r3, pc}
   1cb32:	bf00      	nop
   1cb34:	2000835c 	.word	0x2000835c

0001cb38 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1cb38:	b500      	push	{lr}
   1cb3a:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1cb3c:	4808      	ldr	r0, [pc, #32]	; (1cb60 <oc_buffer_rx+0x28>)
   1cb3e:	f7ed fada 	bl	a0f6 <os_mqueue_get>
   1cb42:	9001      	str	r0, [sp, #4]
   1cb44:	b140      	cbz	r0, 1cb58 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1cb46:	a801      	add	r0, sp, #4
   1cb48:	f00b f8cc 	bl	27ce4 <__wrap_coap_receive>
#endif
        if (m) {
   1cb4c:	9801      	ldr	r0, [sp, #4]
   1cb4e:	2800      	cmp	r0, #0
   1cb50:	d0f4      	beq.n	1cb3c <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1cb52:	f7ed fb45 	bl	a1e0 <os_mbuf_free_chain>
   1cb56:	e7f1      	b.n	1cb3c <oc_buffer_rx+0x4>
        }
    }
}
   1cb58:	b003      	add	sp, #12
   1cb5a:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb5e:	bf00      	nop
   1cb60:	20008344 	.word	0x20008344

0001cb64 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1cb64:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1cb66:	2200      	movs	r2, #0
   1cb68:	4904      	ldr	r1, [pc, #16]	; (1cb7c <oc_buffer_init+0x18>)
   1cb6a:	4805      	ldr	r0, [pc, #20]	; (1cb80 <oc_buffer_init+0x1c>)
   1cb6c:	f7ed faba 	bl	a0e4 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1cb70:	2200      	movs	r2, #0
   1cb72:	4904      	ldr	r1, [pc, #16]	; (1cb84 <oc_buffer_init+0x20>)
   1cb74:	4804      	ldr	r0, [pc, #16]	; (1cb88 <oc_buffer_init+0x24>)
   1cb76:	f7ed fab5 	bl	a0e4 <os_mqueue_init>
}
   1cb7a:	bd08      	pop	{r3, pc}
   1cb7c:	0001cb39 	.word	0x0001cb39
   1cb80:	20008344 	.word	0x20008344
   1cb84:	0001cb09 	.word	0x0001cb09
   1cb88:	2000835c 	.word	0x2000835c

0001cb8c <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1cb8c:	b500      	push	{lr}
   1cb8e:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1cb90:	4b07      	ldr	r3, [pc, #28]	; (1cbb0 <oc_ri_mem_init+0x24>)
   1cb92:	9300      	str	r3, [sp, #0]
   1cb94:	4b07      	ldr	r3, [pc, #28]	; (1cbb4 <oc_ri_mem_init+0x28>)
   1cb96:	226c      	movs	r2, #108	; 0x6c
   1cb98:	2102      	movs	r1, #2
   1cb9a:	4807      	ldr	r0, [pc, #28]	; (1cbb8 <oc_ri_mem_init+0x2c>)
   1cb9c:	f7ed ff2a 	bl	a9f4 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1cba0:	f000 f866 	bl	1cc70 <oc_rep_init>
#endif
    oc_buffer_init();
   1cba4:	f7ff ffde 	bl	1cb64 <oc_buffer_init>
}
   1cba8:	b003      	add	sp, #12
   1cbaa:	f85d fb04 	ldr.w	pc, [sp], #4
   1cbae:	bf00      	nop
   1cbb0:	000297e8 	.word	0x000297e8
   1cbb4:	20008374 	.word	0x20008374
   1cbb8:	2000844c 	.word	0x2000844c

0001cbbc <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1cbbc:	4b01      	ldr	r3, [pc, #4]	; (1cbc4 <oc_evq_set+0x8>)
   1cbbe:	6018      	str	r0, [r3, #0]
}
   1cbc0:	4770      	bx	lr
   1cbc2:	bf00      	nop
   1cbc4:	20008468 	.word	0x20008468

0001cbc8 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1cbc8:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1cbca:	7e03      	ldrb	r3, [r0, #24]
   1cbcc:	f003 0307 	and.w	r3, r3, #7
   1cbd0:	4a04      	ldr	r2, [pc, #16]	; (1cbe4 <oc_send_buffer+0x1c>)
   1cbd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1cbd6:	b113      	cbz	r3, 1cbde <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1cbd8:	68db      	ldr	r3, [r3, #12]
   1cbda:	4798      	blx	r3
    } else {
        OC_LOG_ERROR("Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1cbdc:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1cbde:	f7ed faff 	bl	a1e0 <os_mbuf_free_chain>
}
   1cbe2:	e7fb      	b.n	1cbdc <oc_send_buffer+0x14>
   1cbe4:	2000846c 	.word	0x2000846c

0001cbe8 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1cbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cbec:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1cbee:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1cbf0:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1cbf2:	e002      	b.n	1cbfa <oc_send_multicast_message+0x12>
   1cbf4:	4635      	mov	r5, r6
   1cbf6:	3401      	adds	r4, #1
   1cbf8:	462e      	mov	r6, r5
   1cbfa:	2c07      	cmp	r4, #7
   1cbfc:	dc12      	bgt.n	1cc24 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1cbfe:	4b0c      	ldr	r3, [pc, #48]	; (1cc30 <oc_send_multicast_message+0x48>)
   1cc00:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1cc04:	2d00      	cmp	r5, #0
   1cc06:	d0f5      	beq.n	1cbf4 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1cc08:	2e00      	cmp	r6, #0
   1cc0a:	d0f4      	beq.n	1cbf6 <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1cc0c:	4638      	mov	r0, r7
   1cc0e:	f7ed fb4d 	bl	a2ac <os_mbuf_dup>
   1cc12:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1cc14:	6933      	ldr	r3, [r6, #16]
   1cc16:	4638      	mov	r0, r7
   1cc18:	4798      	blx	r3
            if (!n) {
   1cc1a:	f1b8 0f00 	cmp.w	r8, #0
   1cc1e:	d005      	beq.n	1cc2c <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1cc20:	4647      	mov	r7, r8
   1cc22:	e7e8      	b.n	1cbf6 <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1cc24:	b116      	cbz	r6, 1cc2c <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1cc26:	6933      	ldr	r3, [r6, #16]
   1cc28:	4638      	mov	r0, r7
   1cc2a:	4798      	blx	r3
    }
}
   1cc2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cc30:	2000846c 	.word	0x2000846c

0001cc34 <oc_init>:
    return 0;
}

void
oc_init(void)
{
   1cc34:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1cc36:	4b0a      	ldr	r3, [pc, #40]	; (1cc60 <oc_init+0x2c>)
   1cc38:	781b      	ldrb	r3, [r3, #0]
   1cc3a:	b133      	cbz	r3, 1cc4a <oc_init+0x16>
    oc_ri_mem_init();
   1cc3c:	f7ff ffa6 	bl	1cb8c <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1cc40:	f7ed fa4c 	bl	a0dc <os_eventq_dflt_get>
   1cc44:	f7ff ffba 	bl	1cbbc <oc_evq_set>
}
   1cc48:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cc4a:	f7eb fab9 	bl	81c0 <hal_debugger_connected>
   1cc4e:	b100      	cbz	r0, 1cc52 <oc_init+0x1e>
   1cc50:	be01      	bkpt	0x0001
   1cc52:	2300      	movs	r3, #0
   1cc54:	461a      	mov	r2, r3
   1cc56:	4619      	mov	r1, r3
   1cc58:	4618      	mov	r0, r3
   1cc5a:	f7ec fe47 	bl	98ec <__assert_func>
   1cc5e:	bf00      	nop
   1cc60:	20000506 	.word	0x20000506

0001cc64 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1cc64:	4770      	bx	lr

0001cc66 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1cc66:	4770      	bx	lr

0001cc68 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1cc68:	4770      	bx	lr

0001cc6a <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1cc6a:	4770      	bx	lr

0001cc6c <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1cc6c:	4770      	bx	lr

0001cc6e <oc_register_tcp4>:
                         "oc_tcp4_conn_pool");
    SYSINIT_PANIC_ASSERT(rc == 0);

    oc_tcp4_transport_id = oc_transport_register(&oc_tcp4_transport);
#endif
}
   1cc6e:	4770      	bx	lr

0001cc70 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1cc70:	b500      	push	{lr}
   1cc72:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1cc74:	4b05      	ldr	r3, [pc, #20]	; (1cc8c <oc_rep_init+0x1c>)
   1cc76:	9300      	str	r3, [sp, #0]
   1cc78:	4b05      	ldr	r3, [pc, #20]	; (1cc90 <oc_rep_init+0x20>)
   1cc7a:	2218      	movs	r2, #24
   1cc7c:	2102      	movs	r1, #2
   1cc7e:	4805      	ldr	r0, [pc, #20]	; (1cc94 <oc_rep_init+0x24>)
   1cc80:	f7ed feb8 	bl	a9f4 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1cc84:	b003      	add	sp, #12
   1cc86:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc8a:	bf00      	nop
   1cc8c:	000297f4 	.word	0x000297f4
   1cc90:	200084a8 	.word	0x200084a8
   1cc94:	2000848c 	.word	0x2000848c

0001cc98 <ble_ll_flush_pkt_queue>:
 *
 * @param pktq
 */
static void
ble_ll_flush_pkt_queue(struct ble_ll_pkt_q *pktq)
{
   1cc98:	b510      	push	{r4, lr}
   1cc9a:	4604      	mov	r4, r0
    struct os_mbuf_pkthdr *pkthdr;
    struct os_mbuf *om;

    /* FLush all packets from Link layer queues */
    while (STAILQ_FIRST(pktq)) {
   1cc9c:	e001      	b.n	1cca2 <ble_ll_flush_pkt_queue+0xa>
        pkthdr = STAILQ_FIRST(pktq);
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);

        /* Remove from queue and free the mbuf */
        STAILQ_REMOVE_HEAD(pktq, omp_next);
        os_mbuf_free_chain(om);
   1cc9e:	f7ed fa9f 	bl	a1e0 <os_mbuf_free_chain>
    while (STAILQ_FIRST(pktq)) {
   1cca2:	6823      	ldr	r3, [r4, #0]
   1cca4:	b13b      	cbz	r3, 1ccb6 <ble_ll_flush_pkt_queue+0x1e>
        om = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   1cca6:	f1a3 0010 	sub.w	r0, r3, #16
        STAILQ_REMOVE_HEAD(pktq, omp_next);
   1ccaa:	685b      	ldr	r3, [r3, #4]
   1ccac:	6023      	str	r3, [r4, #0]
   1ccae:	2b00      	cmp	r3, #0
   1ccb0:	d1f5      	bne.n	1cc9e <ble_ll_flush_pkt_queue+0x6>
   1ccb2:	6064      	str	r4, [r4, #4]
   1ccb4:	e7f3      	b.n	1cc9e <ble_ll_flush_pkt_queue+0x6>
    }
}
   1ccb6:	bd10      	pop	{r4, pc}

0001ccb8 <ble_ll_task>:
{
   1ccb8:	b508      	push	{r3, lr}
    ble_phy_init();
   1ccba:	f009 f953 	bl	25f64 <ble_phy_init>
    ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   1ccbe:	2000      	movs	r0, #0
   1ccc0:	f009 fa60 	bl	26184 <ble_phy_txpwr_set>
    ble_hci_trans_cfg_ll(ble_ll_hci_cmd_rx, NULL, ble_ll_hci_acl_rx, NULL);
   1ccc4:	2300      	movs	r3, #0
   1ccc6:	4a0d      	ldr	r2, [pc, #52]	; (1ccfc <ble_ll_task+0x44>)
   1ccc8:	4619      	mov	r1, r3
   1ccca:	480d      	ldr	r0, [pc, #52]	; (1cd00 <ble_ll_task+0x48>)
   1cccc:	f7f9 fbb2 	bl	16434 <ble_hci_trans_cfg_ll>
    ble_ll_hci_send_noop();
   1ccd0:	f005 feeb 	bl	22aaa <ble_ll_hci_send_noop>
    ble_ll_rand_start();
   1ccd4:	f006 f974 	bl	22fc0 <ble_ll_rand_start>
        ev = os_eventq_get(&evq->evq);
   1ccd8:	480a      	ldr	r0, [pc, #40]	; (1cd04 <ble_ll_task+0x4c>)
   1ccda:	f7ed f98c 	bl	9ff6 <os_eventq_get>
        assert(ev);
   1ccde:	b110      	cbz	r0, 1cce6 <ble_ll_task+0x2e>
    ev->ev.ev_cb(&ev->ev);
   1cce0:	6842      	ldr	r2, [r0, #4]
   1cce2:	4790      	blx	r2
   1cce4:	e7f8      	b.n	1ccd8 <ble_ll_task+0x20>
   1cce6:	f7eb fa6b 	bl	81c0 <hal_debugger_connected>
   1ccea:	b100      	cbz	r0, 1ccee <ble_ll_task+0x36>
   1ccec:	be01      	bkpt	0x0001
   1ccee:	2300      	movs	r3, #0
   1ccf0:	461a      	mov	r2, r3
   1ccf2:	4619      	mov	r1, r3
   1ccf4:	4618      	mov	r0, r3
   1ccf6:	f7ec fdf9 	bl	98ec <__assert_func>
   1ccfa:	bf00      	nop
   1ccfc:	00022be5 	.word	0x00022be5
   1cd00:	00022ba9 	.word	0x00022ba9
   1cd04:	200084e8 	.word	0x200084e8

0001cd08 <ble_ll_hw_err_timer_cb>:
{
   1cd08:	b508      	push	{r3, lr}
    if (ble_ll_hci_ev_hw_err(BLE_HW_ERR_HCI_SYNC_LOSS)) {
   1cd0a:	2001      	movs	r0, #1
   1cd0c:	f006 f8b0 	bl	22e70 <ble_ll_hci_ev_hw_err>
   1cd10:	b900      	cbnz	r0, 1cd14 <ble_ll_hw_err_timer_cb+0xc>
}
   1cd12:	bd08      	pop	{r3, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1cd14:	2106      	movs	r1, #6
   1cd16:	4802      	ldr	r0, [pc, #8]	; (1cd20 <ble_ll_hw_err_timer_cb+0x18>)
   1cd18:	f7ec ffbc 	bl	9c94 <os_callout_reset>
   1cd1c:	e7f9      	b.n	1cd12 <ble_ll_hw_err_timer_cb+0xa>
   1cd1e:	bf00      	nop
   1cd20:	20008560 	.word	0x20008560

0001cd24 <ble_ll_event_comp_pkts>:
{
   1cd24:	b508      	push	{r3, lr}
    ble_ll_conn_num_comp_pkts_event_send(NULL);
   1cd26:	2000      	movs	r0, #0
   1cd28:	f003 fd74 	bl	20814 <ble_ll_conn_num_comp_pkts_event_send>
}
   1cd2c:	bd08      	pop	{r3, pc}

0001cd2e <ble_ll_event_dbuf_overflow>:
{
   1cd2e:	b508      	push	{r3, lr}
    ble_ll_hci_ev_databuf_overflow();
   1cd30:	f006 f8b6 	bl	22ea0 <ble_ll_hci_ev_databuf_overflow>
}
   1cd34:	bd08      	pop	{r3, pc}
	...

0001cd38 <ble_ll_tx_pkt_in>:
{
   1cd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   1cd3a:	e006      	b.n	1cd4a <ble_ll_tx_pkt_in+0x12>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   1cd3c:	4613      	mov	r3, r2
   1cd3e:	3260      	adds	r2, #96	; 0x60
   1cd40:	665a      	str	r2, [r3, #100]	; 0x64
   1cd42:	e00c      	b.n	1cd5e <ble_ll_tx_pkt_in+0x26>
            os_mbuf_free_chain(om);
   1cd44:	4628      	mov	r0, r5
   1cd46:	f7ed fa4b 	bl	a1e0 <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_tx_pkt_q)) {
   1cd4a:	4b15      	ldr	r3, [pc, #84]	; (1cda0 <ble_ll_tx_pkt_in+0x68>)
   1cd4c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
   1cd4e:	b32c      	cbz	r4, 1cd9c <ble_ll_tx_pkt_in+0x64>
        om = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   1cd50:	f1a4 0510 	sub.w	r5, r4, #16
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_tx_pkt_q, omp_next);
   1cd54:	6863      	ldr	r3, [r4, #4]
   1cd56:	4a12      	ldr	r2, [pc, #72]	; (1cda0 <ble_ll_tx_pkt_in+0x68>)
   1cd58:	6613      	str	r3, [r2, #96]	; 0x60
   1cd5a:	2b00      	cmp	r3, #0
   1cd5c:	d0ee      	beq.n	1cd3c <ble_ll_tx_pkt_in+0x4>
        handle = get_le16(om->om_data);
   1cd5e:	f854 0c10 	ldr.w	r0, [r4, #-16]
   1cd62:	f7fe ff5e 	bl	1bc22 <get_le16>
   1cd66:	4607      	mov	r7, r0
        length = get_le16(om->om_data + 2);
   1cd68:	f854 0c10 	ldr.w	r0, [r4, #-16]
   1cd6c:	3002      	adds	r0, #2
   1cd6e:	f7fe ff58 	bl	1bc22 <get_le16>
   1cd72:	4606      	mov	r6, r0
        os_mbuf_adj(om, sizeof(struct hci_data_hdr));
   1cd74:	2104      	movs	r1, #4
   1cd76:	4628      	mov	r0, r5
   1cd78:	f7ed fb61 	bl	a43e <os_mbuf_adj>
        pb = handle & 0x3000;
   1cd7c:	f407 5240 	and.w	r2, r7, #12288	; 0x3000
        if ((pkthdr->omp_len != length) || (pb > 0x1000) || (length == 0)) {
   1cd80:	8823      	ldrh	r3, [r4, #0]
   1cd82:	42b3      	cmp	r3, r6
   1cd84:	d1de      	bne.n	1cd44 <ble_ll_tx_pkt_in+0xc>
   1cd86:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
   1cd8a:	d8db      	bhi.n	1cd44 <ble_ll_tx_pkt_in+0xc>
   1cd8c:	2e00      	cmp	r6, #0
   1cd8e:	d0d9      	beq.n	1cd44 <ble_ll_tx_pkt_in+0xc>
        ble_ll_conn_tx_pkt_in(om, handle, length);
   1cd90:	4632      	mov	r2, r6
   1cd92:	4639      	mov	r1, r7
   1cd94:	4628      	mov	r0, r5
   1cd96:	f003 fa3e 	bl	20216 <ble_ll_conn_tx_pkt_in>
   1cd9a:	e7d6      	b.n	1cd4a <ble_ll_tx_pkt_in+0x12>
}
   1cd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cd9e:	bf00      	nop
   1cda0:	200084d8 	.word	0x200084d8

0001cda4 <ble_ll_event_tx_pkt>:
{
   1cda4:	b508      	push	{r3, lr}
    ble_ll_tx_pkt_in();
   1cda6:	f7ff ffc7 	bl	1cd38 <ble_ll_tx_pkt_in>
}
   1cdaa:	bd08      	pop	{r3, pc}

0001cdac <ble_ll_rx_pkt_in>:
{
   1cdac:	b538      	push	{r3, r4, r5, lr}
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   1cdae:	e00e      	b.n	1cdce <ble_ll_rx_pkt_in+0x22>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   1cdb0:	4613      	mov	r3, r2
   1cdb2:	3248      	adds	r2, #72	; 0x48
   1cdb4:	64da      	str	r2, [r3, #76]	; 0x4c
   1cdb6:	e017      	b.n	1cde8 <ble_ll_rx_pkt_in+0x3c>
            ble_ll_conn_rx_data_pdu(m, ble_hdr);
   1cdb8:	4611      	mov	r1, r2
   1cdba:	4628      	mov	r0, r5
   1cdbc:	f003 f810 	bl	1fde0 <ble_ll_conn_rx_data_pdu>
   1cdc0:	e005      	b.n	1cdce <ble_ll_rx_pkt_in+0x22>
            ble_ll_adv_rx_pkt_in(pdu_type, rxbuf, ble_hdr);
   1cdc2:	f001 faf3 	bl	1e3ac <ble_ll_adv_rx_pkt_in>
        if (m) {
   1cdc6:	b115      	cbz	r5, 1cdce <ble_ll_rx_pkt_in+0x22>
            os_mbuf_free_chain(m);
   1cdc8:	4628      	mov	r0, r5
   1cdca:	f7ed fa09 	bl	a1e0 <os_mbuf_free_chain>
    while (STAILQ_FIRST(&g_ble_ll_data.ll_rx_pkt_q)) {
   1cdce:	4b17      	ldr	r3, [pc, #92]	; (1ce2c <ble_ll_rx_pkt_in+0x80>)
   1cdd0:	6c9c      	ldr	r4, [r3, #72]	; 0x48
   1cdd2:	b354      	cbz	r4, 1ce2a <ble_ll_rx_pkt_in+0x7e>
        m = (struct os_mbuf *)((uint8_t *)pkthdr - sizeof(struct os_mbuf));
   1cdd4:	f1a4 0510 	sub.w	r5, r4, #16
        OS_ENTER_CRITICAL(sr);
   1cdd8:	f7ee fb7a 	bl	b4d0 <os_arch_save_sr>
        STAILQ_REMOVE_HEAD(&g_ble_ll_data.ll_rx_pkt_q, omp_next);
   1cddc:	4a13      	ldr	r2, [pc, #76]	; (1ce2c <ble_ll_rx_pkt_in+0x80>)
   1cdde:	6c93      	ldr	r3, [r2, #72]	; 0x48
   1cde0:	685b      	ldr	r3, [r3, #4]
   1cde2:	6493      	str	r3, [r2, #72]	; 0x48
   1cde4:	2b00      	cmp	r3, #0
   1cde6:	d0e3      	beq.n	1cdb0 <ble_ll_rx_pkt_in+0x4>
        OS_EXIT_CRITICAL(sr);
   1cde8:	f7ee fb78 	bl	b4dc <os_arch_restore_sr>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   1cdec:	f104 0208 	add.w	r2, r4, #8
        rxbuf = m->om_data;
   1cdf0:	f854 1c10 	ldr.w	r1, [r4, #-16]
        pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1cdf4:	7808      	ldrb	r0, [r1, #0]
   1cdf6:	f000 000f 	and.w	r0, r0, #15
        switch (BLE_MBUF_HDR_RX_STATE(ble_hdr)) {
   1cdfa:	7a23      	ldrb	r3, [r4, #8]
   1cdfc:	f003 0307 	and.w	r3, r3, #7
   1ce00:	3b01      	subs	r3, #1
   1ce02:	2b03      	cmp	r3, #3
   1ce04:	d8df      	bhi.n	1cdc6 <ble_ll_rx_pkt_in+0x1a>
   1ce06:	a401      	add	r4, pc, #4	; (adr r4, 1ce0c <ble_ll_rx_pkt_in+0x60>)
   1ce08:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
   1ce0c:	0001cdc3 	.word	0x0001cdc3
   1ce10:	0001ce1d 	.word	0x0001ce1d
   1ce14:	0001ce25 	.word	0x0001ce25
   1ce18:	0001cdb9 	.word	0x0001cdb9
            ble_ll_scan_rx_pkt_in(pdu_type, m, ble_hdr);
   1ce1c:	4629      	mov	r1, r5
   1ce1e:	f007 fd97 	bl	24950 <ble_ll_scan_rx_pkt_in>
            break;
   1ce22:	e7d0      	b.n	1cdc6 <ble_ll_rx_pkt_in+0x1a>
            ble_ll_init_rx_pkt_in(pdu_type, rxbuf, ble_hdr);
   1ce24:	f002 fd7a 	bl	1f91c <ble_ll_init_rx_pkt_in>
            break;
   1ce28:	e7cd      	b.n	1cdc6 <ble_ll_rx_pkt_in+0x1a>
}
   1ce2a:	bd38      	pop	{r3, r4, r5, pc}
   1ce2c:	200084d8 	.word	0x200084d8

0001ce30 <ble_ll_event_rx_pkt>:
{
   1ce30:	b508      	push	{r3, lr}
    ble_ll_rx_pkt_in();
   1ce32:	f7ff ffbb 	bl	1cdac <ble_ll_rx_pkt_in>
}
   1ce36:	bd08      	pop	{r3, pc}

0001ce38 <ble_ll_seed_prng>:
    return rc;
}

static void
ble_ll_seed_prng(void)
{
   1ce38:	b508      	push	{r3, lr}

    /* Seed random number generator with least significant bytes of device
     * address.
     */
    seed = 0;
    for (i = 0; i < 4; ++i) {
   1ce3a:	2300      	movs	r3, #0
    seed = 0;
   1ce3c:	4618      	mov	r0, r3
    for (i = 0; i < 4; ++i) {
   1ce3e:	e004      	b.n	1ce4a <ble_ll_seed_prng+0x12>
        seed |= g_dev_addr[i];
   1ce40:	4a04      	ldr	r2, [pc, #16]	; (1ce54 <ble_ll_seed_prng+0x1c>)
   1ce42:	5cd2      	ldrb	r2, [r2, r3]
   1ce44:	4310      	orrs	r0, r2
        seed <<= 8;
   1ce46:	0200      	lsls	r0, r0, #8
    for (i = 0; i < 4; ++i) {
   1ce48:	3301      	adds	r3, #1
   1ce4a:	2b03      	cmp	r3, #3
   1ce4c:	ddf8      	ble.n	1ce40 <ble_ll_seed_prng+0x8>
}
__extern_inline void srand(unsigned int __s)
{
	srand48(__s);
   1ce4e:	f7ee fcf3 	bl	b838 <srand48>
    }
    srand(seed);
}
   1ce52:	bd08      	pop	{r3, pc}
   1ce54:	20008750 	.word	0x20008750

0001ce58 <ble_ll_rxpdu_alloc>:
{
   1ce58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce5c:	4604      	mov	r4, r0
    om_ret = os_msys_get_pkthdr(len, sizeof(struct ble_mbuf_hdr));
   1ce5e:	2110      	movs	r1, #16
   1ce60:	f7ed fed7 	bl	ac12 <os_msys_get_pkthdr>
    if (!om_ret) {
   1ce64:	4607      	mov	r7, r0
   1ce66:	b1f8      	cbz	r0, 1cea8 <ble_ll_rxpdu_alloc+0x50>
    pkthdr->omp_len = len;
   1ce68:	8204      	strh	r4, [r0, #16]
    databuf_len = om_ret->om_omp->omp_databuf_len & ~3;
   1ce6a:	6883      	ldr	r3, [r0, #8]
   1ce6c:	881b      	ldrh	r3, [r3, #0]
   1ce6e:	f023 0303 	bic.w	r3, r3, #3
   1ce72:	b29b      	uxth	r3, r3
    om_ret->om_data += 4;
   1ce74:	6802      	ldr	r2, [r0, #0]
   1ce76:	3204      	adds	r2, #4
   1ce78:	6002      	str	r2, [r0, #0]
    rem_len -= databuf_len - om_ret->om_pkthdr_len - 4;
   1ce7a:	4698      	mov	r8, r3
   1ce7c:	7942      	ldrb	r2, [r0, #5]
   1ce7e:	1a9b      	subs	r3, r3, r2
   1ce80:	3b04      	subs	r3, #4
   1ce82:	1ae4      	subs	r4, r4, r3
    om = om_ret;
   1ce84:	4606      	mov	r6, r0
    while (rem_len > 0) {
   1ce86:	2c00      	cmp	r4, #0
   1ce88:	dd0e      	ble.n	1cea8 <ble_ll_rxpdu_alloc+0x50>
        om_next = os_msys_get(rem_len, 0);
   1ce8a:	2100      	movs	r1, #0
   1ce8c:	b2a0      	uxth	r0, r4
   1ce8e:	f7ed feb1 	bl	abf4 <os_msys_get>
        if (!om_next) {
   1ce92:	4605      	mov	r5, r0
   1ce94:	b120      	cbz	r0, 1cea0 <ble_ll_rxpdu_alloc+0x48>
        SLIST_NEXT(om, om_next) = om_next;
   1ce96:	60f0      	str	r0, [r6, #12]
        rem_len -= databuf_len;
   1ce98:	eba4 0408 	sub.w	r4, r4, r8
        om = om_next;
   1ce9c:	4606      	mov	r6, r0
   1ce9e:	e7f2      	b.n	1ce86 <ble_ll_rxpdu_alloc+0x2e>
            os_mbuf_free_chain(om_ret);
   1cea0:	4638      	mov	r0, r7
   1cea2:	f7ed f99d 	bl	a1e0 <os_mbuf_free_chain>
    return NULL;
   1cea6:	462f      	mov	r7, r5
}
   1cea8:	4638      	mov	r0, r7
   1ceaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ceae <ble_ll_chk_txrx_octets>:
    if ((octets < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   1ceae:	381b      	subs	r0, #27
   1ceb0:	b280      	uxth	r0, r0
   1ceb2:	28e0      	cmp	r0, #224	; 0xe0
   1ceb4:	d801      	bhi.n	1ceba <ble_ll_chk_txrx_octets+0xc>
        rc = 1;
   1ceb6:	2001      	movs	r0, #1
}
   1ceb8:	4770      	bx	lr
        rc = 0;
   1ceba:	2000      	movs	r0, #0
   1cebc:	4770      	bx	lr

0001cebe <ble_ll_chk_txrx_time>:
    if ((time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   1cebe:	f5a0 70a4 	sub.w	r0, r0, #328	; 0x148
   1cec2:	b280      	uxth	r0, r0
   1cec4:	f244 1348 	movw	r3, #16712	; 0x4148
   1cec8:	4298      	cmp	r0, r3
   1ceca:	d801      	bhi.n	1ced0 <ble_ll_chk_txrx_time+0x12>
        rc = 1;
   1cecc:	2001      	movs	r0, #1
}
   1cece:	4770      	bx	lr
        rc = 0;
   1ced0:	2000      	movs	r0, #0
   1ced2:	4770      	bx	lr

0001ced4 <ble_ll_is_rpa>:
    if (addr_type && ((addr[5] & 0xc0) == 0x40)) {
   1ced4:	b131      	cbz	r1, 1cee4 <ble_ll_is_rpa+0x10>
   1ced6:	7943      	ldrb	r3, [r0, #5]
   1ced8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cedc:	2b40      	cmp	r3, #64	; 0x40
   1cede:	d003      	beq.n	1cee8 <ble_ll_is_rpa+0x14>
        rc = 0;
   1cee0:	2000      	movs	r0, #0
   1cee2:	4770      	bx	lr
   1cee4:	2000      	movs	r0, #0
   1cee6:	4770      	bx	lr
        rc = 1;
   1cee8:	2001      	movs	r0, #1
}
   1ceea:	4770      	bx	lr

0001ceec <ble_ll_addr_is_id>:
    return !addr_type || ((addr[5] & 0xc0) == 0xc0);
   1ceec:	b141      	cbz	r1, 1cf00 <ble_ll_addr_is_id+0x14>
   1ceee:	7943      	ldrb	r3, [r0, #5]
   1cef0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1cef4:	2bc0      	cmp	r3, #192	; 0xc0
   1cef6:	d001      	beq.n	1cefc <ble_ll_addr_is_id+0x10>
   1cef8:	2000      	movs	r0, #0
}
   1cefa:	4770      	bx	lr
    return !addr_type || ((addr[5] & 0xc0) == 0xc0);
   1cefc:	2001      	movs	r0, #1
   1cefe:	4770      	bx	lr
   1cf00:	2001      	movs	r0, #1
   1cf02:	4770      	bx	lr

0001cf04 <ble_ll_addr_subtype>:
    if (!addr_type) {
   1cf04:	b141      	cbz	r1, 1cf18 <ble_ll_addr_subtype+0x14>
    switch (addr[5] >> 6) {
   1cf06:	7943      	ldrb	r3, [r0, #5]
   1cf08:	099b      	lsrs	r3, r3, #6
   1cf0a:	d003      	beq.n	1cf14 <ble_ll_addr_subtype+0x10>
   1cf0c:	2b01      	cmp	r3, #1
   1cf0e:	d005      	beq.n	1cf1c <ble_ll_addr_subtype+0x18>
        return BLE_LL_ADDR_SUBTYPE_IDENTITY; /* static random */
   1cf10:	2000      	movs	r0, #0
   1cf12:	4770      	bx	lr
        return BLE_LL_ADDR_SUBTYPE_NRPA; /* NRPA */
   1cf14:	2002      	movs	r0, #2
   1cf16:	4770      	bx	lr
        return BLE_LL_ADDR_SUBTYPE_IDENTITY;
   1cf18:	2000      	movs	r0, #0
   1cf1a:	4770      	bx	lr
        return BLE_LL_ADDR_SUBTYPE_RPA; /* RPA */
   1cf1c:	2001      	movs	r0, #1
}
   1cf1e:	4770      	bx	lr

0001cf20 <ble_ll_is_valid_public_addr>:
    for (i = 0; i < BLE_DEV_ADDR_LEN; ++i) {
   1cf20:	2300      	movs	r3, #0
   1cf22:	2b05      	cmp	r3, #5
   1cf24:	dc03      	bgt.n	1cf2e <ble_ll_is_valid_public_addr+0xe>
        if (addr[i]) {
   1cf26:	5cc2      	ldrb	r2, [r0, r3]
   1cf28:	b91a      	cbnz	r2, 1cf32 <ble_ll_is_valid_public_addr+0x12>
    for (i = 0; i < BLE_DEV_ADDR_LEN; ++i) {
   1cf2a:	3301      	adds	r3, #1
   1cf2c:	e7f9      	b.n	1cf22 <ble_ll_is_valid_public_addr+0x2>
    return 0;
   1cf2e:	2000      	movs	r0, #0
   1cf30:	4770      	bx	lr
            return 1;
   1cf32:	2001      	movs	r0, #1
}
   1cf34:	4770      	bx	lr
	...

0001cf38 <ble_ll_is_valid_random_addr>:
{
   1cf38:	b510      	push	{r4, lr}
    sum = 0;
   1cf3a:	2300      	movs	r3, #0
    for (i = 0; i < (BLE_DEV_ADDR_LEN -1); ++i) {
   1cf3c:	461a      	mov	r2, r3
   1cf3e:	e003      	b.n	1cf48 <ble_ll_is_valid_random_addr+0x10>
        sum += addr[i];
   1cf40:	5c84      	ldrb	r4, [r0, r2]
   1cf42:	4423      	add	r3, r4
   1cf44:	b29b      	uxth	r3, r3
    for (i = 0; i < (BLE_DEV_ADDR_LEN -1); ++i) {
   1cf46:	3201      	adds	r2, #1
   1cf48:	2a04      	cmp	r2, #4
   1cf4a:	ddf9      	ble.n	1cf40 <ble_ll_is_valid_random_addr+0x8>
    sum += addr[5] & 0x3f;
   1cf4c:	7942      	ldrb	r2, [r0, #5]
   1cf4e:	f002 013f 	and.w	r1, r2, #63	; 0x3f
   1cf52:	440b      	add	r3, r1
   1cf54:	b29b      	uxth	r3, r3
    if ((sum == 0) || (sum == ((5*255) + 0x3f))) {
   1cf56:	b1f3      	cbz	r3, 1cf96 <ble_ll_is_valid_random_addr+0x5e>
   1cf58:	f240 543a 	movw	r4, #1338	; 0x53a
   1cf5c:	42a3      	cmp	r3, r4
   1cf5e:	d01d      	beq.n	1cf9c <ble_ll_is_valid_random_addr+0x64>
    addr_type = addr[5] & 0xc0;
   1cf60:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
    if (addr_type == 0xc0) {
   1cf64:	2ac0      	cmp	r2, #192	; 0xc0
   1cf66:	d01b      	beq.n	1cfa0 <ble_ll_is_valid_random_addr+0x68>
    } else if (addr_type == 0x40) {
   1cf68:	2a40      	cmp	r2, #64	; 0x40
   1cf6a:	d009      	beq.n	1cf80 <ble_ll_is_valid_random_addr+0x48>
    } else if (addr_type == 0) {
   1cf6c:	b9f2      	cbnz	r2, 1cfac <ble_ll_is_valid_random_addr+0x74>
   1cf6e:	4601      	mov	r1, r0
        if (!memcmp(g_dev_addr, addr, BLE_DEV_ADDR_LEN)) {
   1cf70:	2206      	movs	r2, #6
   1cf72:	480f      	ldr	r0, [pc, #60]	; (1cfb0 <ble_ll_is_valid_random_addr+0x78>)
   1cf74:	f7ee fbf6 	bl	b764 <memcmp>
   1cf78:	4603      	mov	r3, r0
   1cf7a:	b168      	cbz	r0, 1cf98 <ble_ll_is_valid_random_addr+0x60>
    rc = 1;
   1cf7c:	2301      	movs	r3, #1
   1cf7e:	e00b      	b.n	1cf98 <ble_ll_is_valid_random_addr+0x60>
        sum = addr[3] + addr[4] + (addr[5] & 0x3f);
   1cf80:	78c3      	ldrb	r3, [r0, #3]
   1cf82:	7902      	ldrb	r2, [r0, #4]
   1cf84:	4413      	add	r3, r2
        if ((sum == 0) || (sum == (255 + 255 + 0x3f))) {
   1cf86:	18c9      	adds	r1, r1, r3
   1cf88:	d00c      	beq.n	1cfa4 <ble_ll_is_valid_random_addr+0x6c>
   1cf8a:	f240 233d 	movw	r3, #573	; 0x23d
   1cf8e:	4299      	cmp	r1, r3
   1cf90:	d00a      	beq.n	1cfa8 <ble_ll_is_valid_random_addr+0x70>
    rc = 1;
   1cf92:	2301      	movs	r3, #1
   1cf94:	e000      	b.n	1cf98 <ble_ll_is_valid_random_addr+0x60>
        return 0;
   1cf96:	2300      	movs	r3, #0
}
   1cf98:	4618      	mov	r0, r3
   1cf9a:	bd10      	pop	{r4, pc}
        return 0;
   1cf9c:	2300      	movs	r3, #0
   1cf9e:	e7fb      	b.n	1cf98 <ble_ll_is_valid_random_addr+0x60>
    rc = 1;
   1cfa0:	2301      	movs	r3, #1
   1cfa2:	e7f9      	b.n	1cf98 <ble_ll_is_valid_random_addr+0x60>
            rc = 0;
   1cfa4:	2300      	movs	r3, #0
   1cfa6:	e7f7      	b.n	1cf98 <ble_ll_is_valid_random_addr+0x60>
   1cfa8:	2300      	movs	r3, #0
   1cfaa:	e7f5      	b.n	1cf98 <ble_ll_is_valid_random_addr+0x60>
        rc = 0;
   1cfac:	2300      	movs	r3, #0
   1cfae:	e7f3      	b.n	1cf98 <ble_ll_is_valid_random_addr+0x60>
   1cfb0:	20008750 	.word	0x20008750

0001cfb4 <ble_ll_is_valid_own_addr_type>:
{
   1cfb4:	b508      	push	{r3, lr}
    switch (own_addr_type) {
   1cfb6:	2803      	cmp	r0, #3
   1cfb8:	d80b      	bhi.n	1cfd2 <ble_ll_is_valid_own_addr_type+0x1e>
   1cfba:	e8df f000 	tbb	[pc, r0]
   1cfbe:	0602      	.short	0x0602
   1cfc0:	0602      	.short	0x0602
        rc = ble_ll_is_valid_public_addr(g_dev_addr);
   1cfc2:	4805      	ldr	r0, [pc, #20]	; (1cfd8 <ble_ll_is_valid_own_addr_type+0x24>)
   1cfc4:	f7ff ffac 	bl	1cf20 <ble_ll_is_valid_public_addr>
}
   1cfc8:	bd08      	pop	{r3, pc}
        rc = ble_ll_is_valid_random_addr(random_addr);
   1cfca:	4608      	mov	r0, r1
   1cfcc:	f7ff ffb4 	bl	1cf38 <ble_ll_is_valid_random_addr>
        break;
   1cfd0:	e7fa      	b.n	1cfc8 <ble_ll_is_valid_own_addr_type+0x14>
        rc = 0;
   1cfd2:	2000      	movs	r0, #0
    return rc;
   1cfd4:	e7f8      	b.n	1cfc8 <ble_ll_is_valid_own_addr_type+0x14>
   1cfd6:	bf00      	nop
   1cfd8:	20008750 	.word	0x20008750

0001cfdc <ble_ll_set_random_addr>:
{
   1cfdc:	b570      	push	{r4, r5, r6, lr}
    if (len < sizeof(*cmd)) {
   1cfde:	2905      	cmp	r1, #5
   1cfe0:	d91c      	bls.n	1d01c <ble_ll_set_random_addr+0x40>
    if (g_ble_ll_conn_create_sm || ble_ll_scan_enabled() ||
   1cfe2:	4b11      	ldr	r3, [pc, #68]	; (1d028 <ble_ll_set_random_addr+0x4c>)
   1cfe4:	681b      	ldr	r3, [r3, #0]
   1cfe6:	b113      	cbz	r3, 1cfee <ble_ll_set_random_addr+0x12>
        return BLE_ERR_CMD_DISALLOWED;
   1cfe8:	240c      	movs	r4, #12
}
   1cfea:	4620      	mov	r0, r4
   1cfec:	bd70      	pop	{r4, r5, r6, pc}
   1cfee:	4616      	mov	r6, r2
   1cff0:	4605      	mov	r5, r0
    if (g_ble_ll_conn_create_sm || ble_ll_scan_enabled() ||
   1cff2:	f007 fd51 	bl	24a98 <ble_ll_scan_enabled>
   1cff6:	4604      	mov	r4, r0
   1cff8:	b990      	cbnz	r0, 1d020 <ble_ll_set_random_addr+0x44>
   1cffa:	b14e      	cbz	r6, 1d010 <ble_ll_set_random_addr+0x34>
    if (!ble_ll_is_valid_random_addr(cmd->addr)) {
   1cffc:	4628      	mov	r0, r5
   1cffe:	f7ff ff9b 	bl	1cf38 <ble_ll_is_valid_random_addr>
   1d002:	b178      	cbz	r0, 1d024 <ble_ll_set_random_addr+0x48>
    memcpy(g_random_addr, cmd->addr, BLE_DEV_ADDR_LEN);
   1d004:	4b09      	ldr	r3, [pc, #36]	; (1d02c <ble_ll_set_random_addr+0x50>)
   1d006:	6828      	ldr	r0, [r5, #0]
   1d008:	6018      	str	r0, [r3, #0]
   1d00a:	88aa      	ldrh	r2, [r5, #4]
   1d00c:	809a      	strh	r2, [r3, #4]
    return BLE_ERR_SUCCESS;
   1d00e:	e7ec      	b.n	1cfea <ble_ll_set_random_addr+0xe>
                                (!hci_adv_ext && ble_ll_adv_enabled())) {
   1d010:	f001 fa74 	bl	1e4fc <ble_ll_adv_enabled>
   1d014:	2800      	cmp	r0, #0
   1d016:	d0f1      	beq.n	1cffc <ble_ll_set_random_addr+0x20>
        return BLE_ERR_CMD_DISALLOWED;
   1d018:	240c      	movs	r4, #12
   1d01a:	e7e6      	b.n	1cfea <ble_ll_set_random_addr+0xe>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d01c:	2412      	movs	r4, #18
   1d01e:	e7e4      	b.n	1cfea <ble_ll_set_random_addr+0xe>
        return BLE_ERR_CMD_DISALLOWED;
   1d020:	240c      	movs	r4, #12
   1d022:	e7e2      	b.n	1cfea <ble_ll_set_random_addr+0xe>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d024:	2412      	movs	r4, #18
   1d026:	e7e0      	b.n	1cfea <ble_ll_set_random_addr+0xe>
   1d028:	200087ec 	.word	0x200087ec
   1d02c:	20008758 	.word	0x20008758

0001d030 <ble_ll_is_our_devaddr>:
{
   1d030:	b508      	push	{r3, lr}
    if (addr_type) {
   1d032:	b141      	cbz	r1, 1d046 <ble_ll_is_our_devaddr+0x16>
        our_addr = g_random_addr;
   1d034:	4b06      	ldr	r3, [pc, #24]	; (1d050 <ble_ll_is_our_devaddr+0x20>)
    if (!memcmp(our_addr, addr, BLE_DEV_ADDR_LEN)) {
   1d036:	2206      	movs	r2, #6
   1d038:	4601      	mov	r1, r0
   1d03a:	4618      	mov	r0, r3
   1d03c:	f7ee fb92 	bl	b764 <memcmp>
   1d040:	b918      	cbnz	r0, 1d04a <ble_ll_is_our_devaddr+0x1a>
        rc = 1;
   1d042:	2001      	movs	r0, #1
}
   1d044:	bd08      	pop	{r3, pc}
        our_addr = g_dev_addr;
   1d046:	4b03      	ldr	r3, [pc, #12]	; (1d054 <ble_ll_is_our_devaddr+0x24>)
   1d048:	e7f5      	b.n	1d036 <ble_ll_is_our_devaddr+0x6>
    rc = 0;
   1d04a:	2000      	movs	r0, #0
   1d04c:	e7fa      	b.n	1d044 <ble_ll_is_our_devaddr+0x14>
   1d04e:	bf00      	nop
   1d050:	20008758 	.word	0x20008758
   1d054:	20008750 	.word	0x20008750

0001d058 <ble_ll_get_our_devaddr>:
    if (addr_type) {
   1d058:	b908      	cbnz	r0, 1d05e <ble_ll_get_our_devaddr+0x6>
    return g_dev_addr;
   1d05a:	4802      	ldr	r0, [pc, #8]	; (1d064 <ble_ll_get_our_devaddr+0xc>)
}
   1d05c:	4770      	bx	lr
        return g_random_addr;
   1d05e:	4802      	ldr	r0, [pc, #8]	; (1d068 <ble_ll_get_our_devaddr+0x10>)
   1d060:	4770      	bx	lr
   1d062:	bf00      	nop
   1d064:	20008750 	.word	0x20008750
   1d068:	20008758 	.word	0x20008758

0001d06c <ble_ll_wfr_timer_exp>:
{
   1d06c:	b538      	push	{r3, r4, r5, lr}
    rx_start = ble_phy_rx_started();
   1d06e:	f009 fb3b 	bl	266e8 <ble_phy_rx_started>
   1d072:	4605      	mov	r5, r0
    lls = g_ble_ll_data.ll_state;
   1d074:	4b0b      	ldr	r3, [pc, #44]	; (1d0a4 <ble_ll_wfr_timer_exp+0x38>)
   1d076:	7a1c      	ldrb	r4, [r3, #8]
    ble_ll_trace_u32x3(BLE_LL_TRACE_ID_WFR_EXP, lls, ble_phy_xcvr_state_get(),
   1d078:	f009 fb3c 	bl	266f4 <ble_phy_xcvr_state_get>
    if (!rx_start) {
   1d07c:	b945      	cbnz	r5, 1d090 <ble_ll_wfr_timer_exp+0x24>
        switch (lls) {
   1d07e:	1e63      	subs	r3, r4, #1
   1d080:	2b03      	cmp	r3, #3
   1d082:	d805      	bhi.n	1d090 <ble_ll_wfr_timer_exp+0x24>
   1d084:	e8df f003 	tbb	[pc, r3]
   1d088:	050b0802 	.word	0x050b0802
            ble_ll_adv_wfr_timer_exp();
   1d08c:	f001 fa14 	bl	1e4b8 <ble_ll_adv_wfr_timer_exp>
}
   1d090:	bd38      	pop	{r3, r4, r5, pc}
            ble_ll_conn_wfr_timer_exp();
   1d092:	f002 f9e1 	bl	1f458 <ble_ll_conn_wfr_timer_exp>
            break;
   1d096:	e7fb      	b.n	1d090 <ble_ll_wfr_timer_exp+0x24>
            ble_ll_scan_wfr_timer_exp();
   1d098:	f007 fc1a 	bl	248d0 <ble_ll_scan_wfr_timer_exp>
            break;
   1d09c:	e7f8      	b.n	1d090 <ble_ll_wfr_timer_exp+0x24>
            ble_ll_conn_init_wfr_timer_exp();
   1d09e:	f002 f9e4 	bl	1f46a <ble_ll_conn_init_wfr_timer_exp>
}
   1d0a2:	e7f5      	b.n	1d090 <ble_ll_wfr_timer_exp+0x24>
   1d0a4:	200084d8 	.word	0x200084d8

0001d0a8 <ble_ll_rx_pdu_in>:
{
   1d0a8:	b508      	push	{r3, lr}
    pkthdr = OS_MBUF_PKTHDR(rxpdu);
   1d0aa:	f100 0110 	add.w	r1, r0, #16
    STAILQ_INSERT_TAIL(&g_ble_ll_data.ll_rx_pkt_q, pkthdr, omp_next);
   1d0ae:	2300      	movs	r3, #0
   1d0b0:	f840 3f14 	str.w	r3, [r0, #20]!
   1d0b4:	4b05      	ldr	r3, [pc, #20]	; (1d0cc <ble_ll_rx_pdu_in+0x24>)
   1d0b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
   1d0b8:	6011      	str	r1, [r2, #0]
   1d0ba:	64d8      	str	r0, [r3, #76]	; 0x4c
    os_eventq_put(&evq->evq, &ev->ev);
   1d0bc:	f103 0138 	add.w	r1, r3, #56	; 0x38
   1d0c0:	f103 0010 	add.w	r0, r3, #16
   1d0c4:	f7ec ff5f 	bl	9f86 <os_eventq_put>
}
   1d0c8:	bd08      	pop	{r3, pc}
   1d0ca:	bf00      	nop
   1d0cc:	200084d8 	.word	0x200084d8

0001d0d0 <ble_ll_acl_data_in>:
{
   1d0d0:	b538      	push	{r3, r4, r5, lr}
   1d0d2:	4604      	mov	r4, r0
    pkthdr = OS_MBUF_PKTHDR(txpkt);
   1d0d4:	f100 0510 	add.w	r5, r0, #16
    OS_ENTER_CRITICAL(sr);
   1d0d8:	f7ee f9fa 	bl	b4d0 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&g_ble_ll_data.ll_tx_pkt_q, pkthdr, omp_next);
   1d0dc:	4623      	mov	r3, r4
   1d0de:	2200      	movs	r2, #0
   1d0e0:	f843 2f14 	str.w	r2, [r3, #20]!
   1d0e4:	4c06      	ldr	r4, [pc, #24]	; (1d100 <ble_ll_acl_data_in+0x30>)
   1d0e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1d0e8:	6015      	str	r5, [r2, #0]
   1d0ea:	6663      	str	r3, [r4, #100]	; 0x64
    OS_EXIT_CRITICAL(sr);
   1d0ec:	f7ee f9f6 	bl	b4dc <os_arch_restore_sr>
   1d0f0:	f104 0150 	add.w	r1, r4, #80	; 0x50
   1d0f4:	f104 0010 	add.w	r0, r4, #16
   1d0f8:	f7ec ff45 	bl	9f86 <os_eventq_put>
}
   1d0fc:	bd38      	pop	{r3, r4, r5, pc}
   1d0fe:	bf00      	nop
   1d100:	200084d8 	.word	0x200084d8

0001d104 <ble_ll_rx_start>:
{
   1d104:	b510      	push	{r4, lr}
   1d106:	4614      	mov	r4, r2
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1d108:	7800      	ldrb	r0, [r0, #0]
   1d10a:	f000 000f 	and.w	r0, r0, #15
    ble_ll_trace_u32x2(BLE_LL_TRACE_ID_RX_START, g_ble_ll_data.ll_state,
   1d10e:	4b0f      	ldr	r3, [pc, #60]	; (1d14c <ble_ll_rx_start+0x48>)
   1d110:	7a1b      	ldrb	r3, [r3, #8]
    switch (g_ble_ll_data.ll_state) {
   1d112:	3b01      	subs	r3, #1
   1d114:	2b03      	cmp	r3, #3
   1d116:	d815      	bhi.n	1d144 <ble_ll_rx_start+0x40>
   1d118:	e8df f003 	tbb	[pc, r3]
   1d11c:	020c1009 	.word	0x020c1009
        rc = ble_ll_conn_rx_isr_start(rxhdr, ble_phy_access_addr_get());
   1d120:	f009 fadc 	bl	266dc <ble_phy_access_addr_get>
   1d124:	4601      	mov	r1, r0
   1d126:	4620      	mov	r0, r4
   1d128:	f002 fe28 	bl	1fd7c <ble_ll_conn_rx_isr_start>
}
   1d12c:	bd10      	pop	{r4, pc}
        rc = ble_ll_adv_rx_isr_start(pdu_type);
   1d12e:	f001 f95f 	bl	1e3f0 <ble_ll_adv_rx_isr_start>
        break;
   1d132:	e7fb      	b.n	1d12c <ble_ll_rx_start+0x28>
        rc = ble_ll_init_rx_isr_start(pdu_type, rxhdr);
   1d134:	4621      	mov	r1, r4
   1d136:	f002 fc73 	bl	1fa20 <ble_ll_init_rx_isr_start>
        break;
   1d13a:	e7f7      	b.n	1d12c <ble_ll_rx_start+0x28>
        rc = ble_ll_scan_rx_isr_start(pdu_type, &rxhdr->rxinfo.flags);
   1d13c:	4621      	mov	r1, r4
   1d13e:	f007 fae3 	bl	24708 <ble_ll_scan_rx_isr_start>
        break;
   1d142:	e7f3      	b.n	1d12c <ble_ll_rx_start+0x28>
        rc = -1;
   1d144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   1d148:	e7f0      	b.n	1d12c <ble_ll_rx_start+0x28>
   1d14a:	bf00      	nop
   1d14c:	200084d8 	.word	0x200084d8

0001d150 <ble_ll_rx_end>:
{
   1d150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d152:	4605      	mov	r5, r0
    crcok = BLE_MBUF_HDR_CRC_OK(rxhdr);
   1d154:	880b      	ldrh	r3, [r1, #0]
   1d156:	f003 0280 	and.w	r2, r3, #128	; 0x80
   1d15a:	f3c3 16c0 	ubfx	r6, r3, #7, #1
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1d15e:	7804      	ldrb	r4, [r0, #0]
    len = rxbuf[1];
   1d160:	7840      	ldrb	r0, [r0, #1]
   1d162:	f003 0307 	and.w	r3, r3, #7
    if (BLE_MBUF_HDR_RX_STATE(rxhdr) == BLE_LL_STATE_CONNECTION) {
   1d166:	2b04      	cmp	r3, #4
   1d168:	d00b      	beq.n	1d182 <ble_ll_rx_end+0x32>
   1d16a:	f004 040f 	and.w	r4, r4, #15
    if (crcok) {
   1d16e:	b30a      	cbz	r2, 1d1b4 <ble_ll_rx_end+0x64>
        switch (pdu_type) {
   1d170:	2c08      	cmp	r4, #8
   1d172:	d829      	bhi.n	1d1c8 <ble_ll_rx_end+0x78>
   1d174:	e8df f004 	tbb	[pc, r4]
   1d178:	0c120c12 	.word	0x0c120c12
   1d17c:	0a121812 	.word	0x0a121812
   1d180:	0a          	.byte	0x0a
   1d181:	00          	.byte	0x00
        rc = ble_ll_conn_rx_isr_end(rxbuf, rxhdr);
   1d182:	4628      	mov	r0, r5
   1d184:	f002 fed0 	bl	1ff28 <ble_ll_conn_rx_isr_end>
   1d188:	4604      	mov	r4, r0
        return rc;
   1d18a:	e02d      	b.n	1d1e8 <ble_ll_rx_end+0x98>
    badpkt = 0;
   1d18c:	2200      	movs	r2, #0
   1d18e:	e012      	b.n	1d1b6 <ble_ll_rx_end+0x66>
            if (len != BLE_SCAN_REQ_LEN) {
   1d190:	280c      	cmp	r0, #12
   1d192:	d001      	beq.n	1d198 <ble_ll_rx_end+0x48>
                badpkt = 1;
   1d194:	2201      	movs	r2, #1
   1d196:	e00e      	b.n	1d1b6 <ble_ll_rx_end+0x66>
    badpkt = 0;
   1d198:	2200      	movs	r2, #0
   1d19a:	e00c      	b.n	1d1b6 <ble_ll_rx_end+0x66>
            if ((len < BLE_DEV_ADDR_LEN) || (len > BLE_ADV_SCAN_IND_MAX_LEN)) {
   1d19c:	1f82      	subs	r2, r0, #6
   1d19e:	b2d2      	uxtb	r2, r2
   1d1a0:	2a1f      	cmp	r2, #31
   1d1a2:	d813      	bhi.n	1d1cc <ble_ll_rx_end+0x7c>
    badpkt = 0;
   1d1a4:	2200      	movs	r2, #0
   1d1a6:	e006      	b.n	1d1b6 <ble_ll_rx_end+0x66>
            if (len != BLE_CONNECT_REQ_LEN) {
   1d1a8:	2822      	cmp	r0, #34	; 0x22
   1d1aa:	d001      	beq.n	1d1b0 <ble_ll_rx_end+0x60>
                badpkt = 1;
   1d1ac:	2201      	movs	r2, #1
   1d1ae:	e002      	b.n	1d1b6 <ble_ll_rx_end+0x66>
    badpkt = 0;
   1d1b0:	2200      	movs	r2, #0
   1d1b2:	e000      	b.n	1d1b6 <ble_ll_rx_end+0x66>
   1d1b4:	2200      	movs	r2, #0
    switch (BLE_MBUF_HDR_RX_STATE(rxhdr)) {
   1d1b6:	2b02      	cmp	r3, #2
   1d1b8:	d023      	beq.n	1d202 <ble_ll_rx_end+0xb2>
   1d1ba:	2b03      	cmp	r3, #3
   1d1bc:	d034      	beq.n	1d228 <ble_ll_rx_end+0xd8>
   1d1be:	2b01      	cmp	r3, #1
   1d1c0:	d006      	beq.n	1d1d0 <ble_ll_rx_end+0x80>
        rc = -1;
   1d1c2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1d1c6:	e00f      	b.n	1d1e8 <ble_ll_rx_end+0x98>
            badpkt = 1;
   1d1c8:	2201      	movs	r2, #1
   1d1ca:	e7f4      	b.n	1d1b6 <ble_ll_rx_end+0x66>
                badpkt = 1;
   1d1cc:	2201      	movs	r2, #1
   1d1ce:	e7f2      	b.n	1d1b6 <ble_ll_rx_end+0x66>
        if (!badpkt) {
   1d1d0:	b162      	cbz	r2, 1d1ec <ble_ll_rx_end+0x9c>
    rxpdu = NULL;
   1d1d2:	2700      	movs	r7, #0
        rc = ble_ll_adv_rx_isr_end(pdu_type, rxpdu, crcok);
   1d1d4:	4632      	mov	r2, r6
   1d1d6:	4639      	mov	r1, r7
   1d1d8:	4620      	mov	r0, r4
   1d1da:	f001 f8c1 	bl	1e360 <ble_ll_adv_rx_isr_end>
   1d1de:	4604      	mov	r4, r0
    if (rxpdu) {
   1d1e0:	b117      	cbz	r7, 1d1e8 <ble_ll_rx_end+0x98>
        ble_ll_rx_pdu_in(rxpdu);
   1d1e2:	4638      	mov	r0, r7
   1d1e4:	f7ff ff60 	bl	1d0a8 <ble_ll_rx_pdu_in>
}
   1d1e8:	4620      	mov	r0, r4
   1d1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rxpdu = ble_ll_rxpdu_alloc(len + BLE_LL_PDU_HDR_LEN);
   1d1ec:	3002      	adds	r0, #2
   1d1ee:	f7ff fe33 	bl	1ce58 <ble_ll_rxpdu_alloc>
            if (rxpdu) {
   1d1f2:	4607      	mov	r7, r0
   1d1f4:	2800      	cmp	r0, #0
   1d1f6:	d0ed      	beq.n	1d1d4 <ble_ll_rx_end+0x84>
                ble_phy_rxpdu_copy(rxbuf, rxpdu);
   1d1f8:	4601      	mov	r1, r0
   1d1fa:	4628      	mov	r0, r5
   1d1fc:	f008 fdbe 	bl	25d7c <ble_phy_rxpdu_copy>
   1d200:	e7e8      	b.n	1d1d4 <ble_ll_rx_end+0x84>
        if (!badpkt) {
   1d202:	b132      	cbz	r2, 1d212 <ble_ll_rx_end+0xc2>
    rxpdu = NULL;
   1d204:	2700      	movs	r7, #0
        rc = ble_ll_scan_rx_isr_end(rxpdu, crcok);
   1d206:	4631      	mov	r1, r6
   1d208:	4638      	mov	r0, r7
   1d20a:	f007 fb1d 	bl	24848 <ble_ll_scan_rx_isr_end>
   1d20e:	4604      	mov	r4, r0
        break;
   1d210:	e7e6      	b.n	1d1e0 <ble_ll_rx_end+0x90>
            rxpdu = ble_ll_rxpdu_alloc(len + BLE_LL_PDU_HDR_LEN);
   1d212:	3002      	adds	r0, #2
   1d214:	f7ff fe20 	bl	1ce58 <ble_ll_rxpdu_alloc>
            if (rxpdu) {
   1d218:	4607      	mov	r7, r0
   1d21a:	2800      	cmp	r0, #0
   1d21c:	d0f3      	beq.n	1d206 <ble_ll_rx_end+0xb6>
                ble_phy_rxpdu_copy(rxbuf, rxpdu);
   1d21e:	4601      	mov	r1, r0
   1d220:	4628      	mov	r0, r5
   1d222:	f008 fdab 	bl	25d7c <ble_phy_rxpdu_copy>
   1d226:	e7ee      	b.n	1d206 <ble_ll_rx_end+0xb6>
        rc = ble_ll_init_rx_isr_end(rxbuf, crcok, rxhdr);
   1d228:	460a      	mov	r2, r1
   1d22a:	4631      	mov	r1, r6
   1d22c:	4628      	mov	r0, r5
   1d22e:	f002 fc0b 	bl	1fa48 <ble_ll_init_rx_isr_end>
   1d232:	4604      	mov	r4, r0
   1d234:	e7d8      	b.n	1d1e8 <ble_ll_rx_end+0x98>

0001d236 <ble_ll_tx_mbuf_pducb>:
{
   1d236:	b538      	push	{r3, r4, r5, lr}
    BLE_LL_ASSERT(txpdu);
   1d238:	b159      	cbz	r1, 1d252 <ble_ll_tx_mbuf_pducb+0x1c>
   1d23a:	4615      	mov	r5, r2
   1d23c:	460c      	mov	r4, r1
    os_mbuf_copydata(txpdu, ble_hdr->txinfo.offset, ble_hdr->txinfo.pyld_len,
   1d23e:	4603      	mov	r3, r0
   1d240:	7e8a      	ldrb	r2, [r1, #26]
   1d242:	7e49      	ldrb	r1, [r1, #25]
   1d244:	4620      	mov	r0, r4
   1d246:	f7ed f8cd 	bl	a3e4 <os_mbuf_copydata>
    *hdr_byte = ble_hdr->txinfo.hdr_byte;
   1d24a:	7ee3      	ldrb	r3, [r4, #27]
   1d24c:	702b      	strb	r3, [r5, #0]
}
   1d24e:	7ea0      	ldrb	r0, [r4, #26]
   1d250:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(txpdu);
   1d252:	f7ea ffb5 	bl	81c0 <hal_debugger_connected>
   1d256:	b100      	cbz	r0, 1d25a <ble_ll_tx_mbuf_pducb+0x24>
   1d258:	be01      	bkpt	0x0001
   1d25a:	2300      	movs	r3, #0
   1d25c:	461a      	mov	r2, r3
   1d25e:	4619      	mov	r1, r3
   1d260:	4618      	mov	r0, r3
   1d262:	f7ec fb43 	bl	98ec <__assert_func>
	...

0001d268 <ble_ll_state_set>:
    g_ble_ll_data.ll_state = ll_state;
   1d268:	4b01      	ldr	r3, [pc, #4]	; (1d270 <ble_ll_state_set+0x8>)
   1d26a:	7218      	strb	r0, [r3, #8]
}
   1d26c:	4770      	bx	lr
   1d26e:	bf00      	nop
   1d270:	200084d8 	.word	0x200084d8

0001d274 <ble_ll_state_get>:
}
   1d274:	4b01      	ldr	r3, [pc, #4]	; (1d27c <ble_ll_state_get+0x8>)
   1d276:	7a18      	ldrb	r0, [r3, #8]
   1d278:	4770      	bx	lr
   1d27a:	bf00      	nop
   1d27c:	200084d8 	.word	0x200084d8

0001d280 <ble_ll_event_send>:
{
   1d280:	b508      	push	{r3, lr}
   1d282:	4601      	mov	r1, r0
   1d284:	4801      	ldr	r0, [pc, #4]	; (1d28c <ble_ll_event_send+0xc>)
   1d286:	f7ec fe7e 	bl	9f86 <os_eventq_put>
}
   1d28a:	bd08      	pop	{r3, pc}
   1d28c:	200084e8 	.word	0x200084e8

0001d290 <ble_ll_read_supp_states>:
}
   1d290:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1d294:	f240 31ff 	movw	r1, #1023	; 0x3ff
   1d298:	4770      	bx	lr
	...

0001d29c <ble_ll_read_supp_features>:
}
   1d29c:	4b01      	ldr	r3, [pc, #4]	; (1d2a4 <ble_ll_read_supp_features+0x8>)
   1d29e:	e9d3 0100 	ldrd	r0, r1, [r3]
   1d2a2:	4770      	bx	lr
   1d2a4:	200084d8 	.word	0x200084d8

0001d2a8 <ble_ll_reset>:
{
   1d2a8:	b538      	push	{r3, r4, r5, lr}
    OS_ENTER_CRITICAL(sr);
   1d2aa:	f7ee f911 	bl	b4d0 <os_arch_save_sr>
   1d2ae:	4604      	mov	r4, r0
    ble_phy_disable();
   1d2b0:	f008 ffa2 	bl	261f8 <ble_phy_disable>
    ble_ll_sched_stop();
   1d2b4:	f008 f8c8 	bl	25448 <ble_ll_sched_stop>
    ble_ll_scan_reset();
   1d2b8:	f007 fc12 	bl	24ae0 <ble_ll_scan_reset>
    ble_ll_rfmgmt_reset();
   1d2bc:	f006 fac8 	bl	23850 <ble_ll_rfmgmt_reset>
    OS_EXIT_CRITICAL(sr);
   1d2c0:	4620      	mov	r0, r4
   1d2c2:	f7ee f90b 	bl	b4dc <os_arch_restore_sr>
    ble_ll_adv_reset();
   1d2c6:	f001 f901 	bl	1e4cc <ble_ll_adv_reset>
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_tx_pkt_q);
   1d2ca:	4d0f      	ldr	r5, [pc, #60]	; (1d308 <ble_ll_reset+0x60>)
   1d2cc:	f105 0060 	add.w	r0, r5, #96	; 0x60
   1d2d0:	f7ff fce2 	bl	1cc98 <ble_ll_flush_pkt_queue>
    ble_ll_flush_pkt_queue(&g_ble_ll_data.ll_rx_pkt_q);
   1d2d4:	f105 0048 	add.w	r0, r5, #72	; 0x48
   1d2d8:	f7ff fcde 	bl	1cc98 <ble_ll_flush_pkt_queue>
    g_ble_ll_data.ll_pref_tx_phys = 0;
   1d2dc:	2400      	movs	r4, #0
   1d2de:	732c      	strb	r4, [r5, #12]
    g_ble_ll_data.ll_pref_rx_phys = 0;
   1d2e0:	736c      	strb	r4, [r5, #13]
    ble_ll_conn_module_reset();
   1d2e2:	f003 f8bd 	bl	20460 <ble_ll_conn_module_reset>
    ble_ll_hci_init();
   1d2e6:	f005 fc83 	bl	22bf0 <ble_ll_hci_init>
    ble_ll_sched_init();
   1d2ea:	f008 f8b5 	bl	25458 <ble_ll_sched_init>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1d2ee:	4620      	mov	r0, r4
   1d2f0:	f7ff ffba 	bl	1d268 <ble_ll_state_set>
    memset(g_random_addr, 0, BLE_DEV_ADDR_LEN);
   1d2f4:	4b05      	ldr	r3, [pc, #20]	; (1d30c <ble_ll_reset+0x64>)
   1d2f6:	601c      	str	r4, [r3, #0]
   1d2f8:	809c      	strh	r4, [r3, #4]
    ble_ll_whitelist_clear();
   1d2fa:	f008 f9ab 	bl	25654 <ble_ll_whitelist_clear>
    ble_ll_resolv_list_reset();
   1d2fe:	f006 f9d3 	bl	236a8 <ble_ll_resolv_list_reset>
    rc = ble_phy_init();
   1d302:	f008 fe2f 	bl	25f64 <ble_phy_init>
}
   1d306:	bd38      	pop	{r3, r4, r5, pc}
   1d308:	200084d8 	.word	0x200084d8
   1d30c:	20008758 	.word	0x20008758

0001d310 <ble_ll_pdu_tx_time_get>:
    }

    usecs += g_ble_ll_pdu_header_tx_time[phy_mode];
#else
    usecs = (((payload_len) + BLE_LL_PDU_HDR_LEN + BLE_LL_ACC_ADDR_LEN
            + BLE_LL_PREAMBLE_LEN + BLE_LL_CRC_LEN) << 3);
   1d310:	300a      	adds	r0, #10
#endif

    return usecs;
}
   1d312:	00c0      	lsls	r0, r0, #3
   1d314:	4770      	bx	lr
	...

0001d318 <ble_ll_pdu_max_tx_octets_get>:

uint16_t
ble_ll_pdu_max_tx_octets_get(uint32_t usecs, int phy_mode)
{
   1d318:	b508      	push	{r3, lr}
    uint32_t header_tx_time;
    uint16_t octets = 0;

    BLE_LL_ASSERT(phy_mode < BLE_PHY_NUM_MODE);
   1d31a:	2903      	cmp	r1, #3
   1d31c:	dc0f      	bgt.n	1d33e <ble_ll_pdu_max_tx_octets_get+0x26>

    header_tx_time = g_ble_ll_pdu_header_tx_time[phy_mode];
   1d31e:	4b19      	ldr	r3, [pc, #100]	; (1d384 <ble_ll_pdu_max_tx_octets_get+0x6c>)
   1d320:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
     * Reference:
     * Core v5.0, Vol 6, Part B, section 4.5.10
     * see connEffectiveMaxTxTime and connEffectiveMaxRxTime definitions
     */

    if (usecs < header_tx_time) {
   1d324:	4283      	cmp	r3, r0
   1d326:	d82a      	bhi.n	1d37e <ble_ll_pdu_max_tx_octets_get+0x66>
        return 27;
    }

    usecs -= header_tx_time;
   1d328:	1ac0      	subs	r0, r0, r3

    if (phy_mode == BLE_PHY_MODE_1M) {
   1d32a:	2901      	cmp	r1, #1
   1d32c:	d011      	beq.n	1d352 <ble_ll_pdu_max_tx_octets_get+0x3a>
        /* 8 usecs per byte */
        octets = usecs >> 3;
    } else if (phy_mode == BLE_PHY_MODE_2M) {
   1d32e:	2902      	cmp	r1, #2
   1d330:	d015      	beq.n	1d35e <ble_ll_pdu_max_tx_octets_get+0x46>
        /* 4 usecs per byte */
        octets = usecs >> 2;
    } else if (phy_mode == BLE_PHY_MODE_CODED_125KBPS) {
   1d332:	2903      	cmp	r1, #3
   1d334:	d016      	beq.n	1d364 <ble_ll_pdu_max_tx_octets_get+0x4c>
        /* S=8 => 8 * 8 = 64 usecs per byte */
        octets = usecs >> 6;
    } else if (phy_mode == BLE_PHY_MODE_CODED_500KBPS) {
   1d336:	b9c1      	cbnz	r1, 1d36a <ble_ll_pdu_max_tx_octets_get+0x52>
        /* S=2 => 2 * 8 = 16 usecs per byte */
        octets = usecs >> 4;
   1d338:	f3c0 100f 	ubfx	r0, r0, #4, #16
   1d33c:	e00b      	b.n	1d356 <ble_ll_pdu_max_tx_octets_get+0x3e>
    BLE_LL_ASSERT(phy_mode < BLE_PHY_NUM_MODE);
   1d33e:	f7ea ff3f 	bl	81c0 <hal_debugger_connected>
   1d342:	b100      	cbz	r0, 1d346 <ble_ll_pdu_max_tx_octets_get+0x2e>
   1d344:	be01      	bkpt	0x0001
   1d346:	2300      	movs	r3, #0
   1d348:	461a      	mov	r2, r3
   1d34a:	4619      	mov	r1, r3
   1d34c:	4618      	mov	r0, r3
   1d34e:	f7ec facd 	bl	98ec <__assert_func>
        octets = usecs >> 3;
   1d352:	f3c0 00cf 	ubfx	r0, r0, #3, #16
    } else {
        BLE_LL_ASSERT(0);
    }

    /* see comment at the beginning */
    return max(27, octets);
   1d356:	281b      	cmp	r0, #27
   1d358:	bf38      	it	cc
   1d35a:	201b      	movcc	r0, #27
}
   1d35c:	bd08      	pop	{r3, pc}
        octets = usecs >> 2;
   1d35e:	f3c0 008f 	ubfx	r0, r0, #2, #16
   1d362:	e7f8      	b.n	1d356 <ble_ll_pdu_max_tx_octets_get+0x3e>
        octets = usecs >> 6;
   1d364:	f3c0 108f 	ubfx	r0, r0, #6, #16
   1d368:	e7f5      	b.n	1d356 <ble_ll_pdu_max_tx_octets_get+0x3e>
        BLE_LL_ASSERT(0);
   1d36a:	f7ea ff29 	bl	81c0 <hal_debugger_connected>
   1d36e:	b100      	cbz	r0, 1d372 <ble_ll_pdu_max_tx_octets_get+0x5a>
   1d370:	be01      	bkpt	0x0001
   1d372:	2300      	movs	r3, #0
   1d374:	461a      	mov	r2, r3
   1d376:	4619      	mov	r1, r3
   1d378:	4618      	mov	r0, r3
   1d37a:	f7ec fab7 	bl	98ec <__assert_func>
        return 27;
   1d37e:	201b      	movs	r0, #27
   1d380:	e7ec      	b.n	1d35c <ble_ll_pdu_max_tx_octets_get+0x44>
   1d382:	bf00      	nop
   1d384:	00029808 	.word	0x00029808

0001d388 <ble_ll_init>:
 *
 * @return int
 */
void
ble_ll_init(void)
{
   1d388:	b570      	push	{r4, r5, r6, lr}
   1d38a:	b08c      	sub	sp, #48	; 0x30
    uint64_t features;
    ble_addr_t addr;
    struct ble_ll_obj *lldata;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1d38c:	4b46      	ldr	r3, [pc, #280]	; (1d4a8 <ble_ll_init+0x120>)
   1d38e:	781b      	ldrb	r3, [r3, #0]
   1d390:	2b00      	cmp	r3, #0
   1d392:	d071      	beq.n	1d478 <ble_ll_init+0xf0>
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   1d394:	2300      	movs	r3, #0
   1d396:	9308      	str	r3, [sp, #32]
   1d398:	f8cd 3023 	str.w	r3, [sp, #35]	; 0x23
   1d39c:	2206      	movs	r2, #6
   1d39e:	a908      	add	r1, sp, #32
   1d3a0:	4842      	ldr	r0, [pc, #264]	; (1d4ac <ble_ll_init+0x124>)
   1d3a2:	f7ee f9df 	bl	b764 <memcmp>

    ble_ll_trace_init();
    ble_phy_trace_init();

    /* Set public device address if not already set */
    if (ble_ll_is_addr_empty(g_dev_addr)) {
   1d3a6:	b988      	cbnz	r0, 1d3cc <ble_ll_init+0x44>
        /* Use sycfg address if configured, otherwise try to read from HW */
        if (!ble_ll_is_addr_empty(MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR))) {
   1d3a8:	2300      	movs	r3, #0
   1d3aa:	9306      	str	r3, [sp, #24]
   1d3ac:	f8ad 301c 	strh.w	r3, [sp, #28]
    return memcmp(addr, BLE_ADDR_ANY, BLE_DEV_ADDR_LEN) == 0;
   1d3b0:	930a      	str	r3, [sp, #40]	; 0x28
   1d3b2:	f8cd 302b 	str.w	r3, [sp, #43]	; 0x2b
   1d3b6:	2206      	movs	r2, #6
   1d3b8:	a90a      	add	r1, sp, #40	; 0x28
   1d3ba:	a806      	add	r0, sp, #24
   1d3bc:	f7ee f9d2 	bl	b764 <memcmp>
        if (!ble_ll_is_addr_empty(MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR))) {
   1d3c0:	2800      	cmp	r0, #0
   1d3c2:	d063      	beq.n	1d48c <ble_ll_init+0x104>
            memcpy(g_dev_addr, MYNEWT_VAL(BLE_PUBLIC_DEV_ADDR), BLE_DEV_ADDR_LEN);
   1d3c4:	4b39      	ldr	r3, [pc, #228]	; (1d4ac <ble_ll_init+0x124>)
   1d3c6:	2200      	movs	r2, #0
   1d3c8:	601a      	str	r2, [r3, #0]
   1d3ca:	809a      	strh	r2, [r3, #4]
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
            }
        }
    }

    ble_ll_rfmgmt_init();
   1d3cc:	f006 fa24 	bl	23818 <ble_ll_rfmgmt_init>

    /* Get pointer to global data object */
    lldata = &g_ble_ll_data;

    /* Set acl pkt size and number */
    lldata->ll_num_acl_pkts = MYNEWT_VAL(BLE_ACL_BUF_COUNT);
   1d3d0:	4c37      	ldr	r4, [pc, #220]	; (1d4b0 <ble_ll_init+0x128>)
   1d3d2:	2304      	movs	r3, #4
   1d3d4:	7263      	strb	r3, [r4, #9]
    lldata->ll_acl_pkt_size = MYNEWT_VAL(BLE_ACL_BUF_SIZE);
   1d3d6:	23ff      	movs	r3, #255	; 0xff
   1d3d8:	8163      	strh	r3, [r4, #10]
    os_eventq_init(&evq->evq);
   1d3da:	f104 0610 	add.w	r6, r4, #16
   1d3de:	4630      	mov	r0, r6
   1d3e0:	f7ec fdc4 	bl	9f6c <os_eventq_init>

    /* Initialize eventq */
    ble_npl_eventq_init(&lldata->ll_evq);

    /* Initialize the transmit (from host) and receive (from phy) queues */
    STAILQ_INIT(&lldata->ll_tx_pkt_q);
   1d3e4:	2500      	movs	r5, #0
   1d3e6:	4623      	mov	r3, r4
   1d3e8:	f843 5f60 	str.w	r5, [r3, #96]!
   1d3ec:	6663      	str	r3, [r4, #100]	; 0x64
    STAILQ_INIT(&lldata->ll_rx_pkt_q);
   1d3ee:	4623      	mov	r3, r4
   1d3f0:	f843 5f48 	str.w	r5, [r3, #72]!
   1d3f4:	64e3      	str	r3, [r4, #76]	; 0x4c
    memset(ev, 0, sizeof(*ev));
   1d3f6:	63a5      	str	r5, [r4, #56]	; 0x38
   1d3f8:	6425      	str	r5, [r4, #64]	; 0x40
   1d3fa:	6465      	str	r5, [r4, #68]	; 0x44
    ev->ev.ev_cb = (os_event_fn *)fn;
   1d3fc:	4b2d      	ldr	r3, [pc, #180]	; (1d4b4 <ble_ll_init+0x12c>)
   1d3fe:	63e3      	str	r3, [r4, #60]	; 0x3c
    memset(ev, 0, sizeof(*ev));
   1d400:	6525      	str	r5, [r4, #80]	; 0x50
   1d402:	65a5      	str	r5, [r4, #88]	; 0x58
   1d404:	65e5      	str	r5, [r4, #92]	; 0x5c
    ev->ev.ev_cb = (os_event_fn *)fn;
   1d406:	4b2c      	ldr	r3, [pc, #176]	; (1d4b8 <ble_ll_init+0x130>)
   1d408:	6563      	str	r3, [r4, #84]	; 0x54
    memset(ev, 0, sizeof(*ev));
   1d40a:	66a5      	str	r5, [r4, #104]	; 0x68
   1d40c:	6725      	str	r5, [r4, #112]	; 0x70
   1d40e:	6765      	str	r5, [r4, #116]	; 0x74
    ev->ev.ev_cb = (os_event_fn *)fn;
   1d410:	4b2a      	ldr	r3, [pc, #168]	; (1d4bc <ble_ll_init+0x134>)
   1d412:	66e3      	str	r3, [r4, #108]	; 0x6c
    memset(ev, 0, sizeof(*ev));
   1d414:	67a5      	str	r5, [r4, #120]	; 0x78
   1d416:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
   1d41a:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    ev->ev.ev_cb = (os_event_fn *)fn;
   1d41e:	4b28      	ldr	r3, [pc, #160]	; (1d4c0 <ble_ll_init+0x138>)
   1d420:	67e3      	str	r3, [r4, #124]	; 0x7c
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   1d422:	462b      	mov	r3, r5
   1d424:	4a27      	ldr	r2, [pc, #156]	; (1d4c4 <ble_ll_init+0x13c>)
   1d426:	4631      	mov	r1, r6
   1d428:	f104 0088 	add.w	r0, r4, #136	; 0x88
   1d42c:	f7ec fc06 	bl	9c3c <os_callout_init>
                         &g_ble_ll_data.ll_evq,
                         ble_ll_hw_err_timer_cb,
                         NULL);

    /* Initialize LL HCI */
    ble_ll_hci_init();
   1d430:	f005 fbde 	bl	22bf0 <ble_ll_hci_init>

    /* Init the scheduler */
    ble_ll_sched_init();
   1d434:	f008 f810 	bl	25458 <ble_ll_sched_init>

    /* Initialize advertiser */
    ble_ll_adv_init();
   1d438:	f001 f870 	bl	1e51c <ble_ll_adv_init>

    /* Initialize a scanner */
    ble_ll_scan_init();
   1d43c:	f007 fb74 	bl	24b28 <ble_ll_scan_init>

    /* Initialize the connection module */
    ble_ll_conn_module_init();
   1d440:	f003 f86a 	bl	20518 <ble_ll_conn_module_init>
    features |= BLE_LL_FEAT_LE_ENCRYPTION;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    features |= (BLE_LL_FEAT_LL_PRIVACY | BLE_LL_FEAT_EXT_SCAN_FILT);
    ble_ll_resolv_init();
   1d444:	f006 f916 	bl	23674 <ble_ll_resolv_init>
    features |= BLE_LL_FEAT_ISO_BROADCASTER;
    features |= BLE_LL_FEAT_ISO_HOST_SUPPORT;
#endif

    /* Initialize random number generation */
    ble_ll_rand_init();
   1d448:	f005 fdc8 	bl	22fdc <ble_ll_rand_init>

    /* XXX: This really doesn't belong here, as the address probably has not
     * been set yet.
     */
    ble_ll_seed_prng();
   1d44c:	f7ff fcf4 	bl	1ce38 <ble_ll_seed_prng>

    lldata->ll_supp_features = features;
   1d450:	22ff      	movs	r2, #255	; 0xff
   1d452:	2300      	movs	r3, #0
   1d454:	e9c4 2300 	strd	r2, r3, [r4]
    ble_ll_dtm_init();
#endif

#if MYNEWT
    /* Initialize the LL task */
    os_task_init(&g_ble_ll_task, "ble_ll", ble_ll_task, NULL,
   1d458:	235a      	movs	r3, #90	; 0x5a
   1d45a:	9303      	str	r3, [sp, #12]
   1d45c:	4b1a      	ldr	r3, [pc, #104]	; (1d4c8 <ble_ll_init+0x140>)
   1d45e:	9302      	str	r3, [sp, #8]
   1d460:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d464:	9301      	str	r3, [sp, #4]
   1d466:	9500      	str	r5, [sp, #0]
   1d468:	462b      	mov	r3, r5
   1d46a:	4a18      	ldr	r2, [pc, #96]	; (1d4cc <ble_ll_init+0x144>)
   1d46c:	4918      	ldr	r1, [pc, #96]	; (1d4d0 <ble_ll_init+0x148>)
   1d46e:	4819      	ldr	r0, [pc, #100]	; (1d4d4 <ble_ll_init+0x14c>)
   1d470:	f7ed feb6 	bl	b1e0 <os_task_init>
 * For non-Mynewt OS it is required that OS creates task for LL and run LL
 * routine which is wrapped by nimble_port_ll_task_func().
 */

#endif
}
   1d474:	b00c      	add	sp, #48	; 0x30
   1d476:	bd70      	pop	{r4, r5, r6, pc}
    SYSINIT_ASSERT_ACTIVE();
   1d478:	f7ea fea2 	bl	81c0 <hal_debugger_connected>
   1d47c:	b100      	cbz	r0, 1d480 <ble_ll_init+0xf8>
   1d47e:	be01      	bkpt	0x0001
   1d480:	2300      	movs	r3, #0
   1d482:	461a      	mov	r2, r3
   1d484:	4619      	mov	r1, r3
   1d486:	4618      	mov	r0, r3
   1d488:	f7ec fa30 	bl	98ec <__assert_func>
            rc = ble_hw_get_public_addr(&addr);
   1d48c:	a804      	add	r0, sp, #16
   1d48e:	f008 f97b 	bl	25788 <ble_hw_get_public_addr>
            if (!rc) {
   1d492:	2800      	cmp	r0, #0
   1d494:	d19a      	bne.n	1d3cc <ble_ll_init+0x44>
                memcpy(g_dev_addr, &addr.val[0], BLE_DEV_ADDR_LEN);
   1d496:	4a05      	ldr	r2, [pc, #20]	; (1d4ac <ble_ll_init+0x124>)
   1d498:	ab0c      	add	r3, sp, #48	; 0x30
   1d49a:	f853 0d1f 	ldr.w	r0, [r3, #-31]!
   1d49e:	6010      	str	r0, [r2, #0]
   1d4a0:	889b      	ldrh	r3, [r3, #4]
   1d4a2:	8093      	strh	r3, [r2, #4]
   1d4a4:	e792      	b.n	1d3cc <ble_ll_init+0x44>
   1d4a6:	bf00      	nop
   1d4a8:	20000506 	.word	0x20000506
   1d4ac:	20008750 	.word	0x20008750
   1d4b0:	200084d8 	.word	0x200084d8
   1d4b4:	0001ce31 	.word	0x0001ce31
   1d4b8:	0001cda5 	.word	0x0001cda5
   1d4bc:	0001cd2f 	.word	0x0001cd2f
   1d4c0:	0001cd25 	.word	0x0001cd25
   1d4c4:	0001cd09 	.word	0x0001cd09
   1d4c8:	20008580 	.word	0x20008580
   1d4cc:	0001ccb9 	.word	0x0001ccb9
   1d4d0:	00029800 	.word	0x00029800
   1d4d4:	20008700 	.word	0x20008700

0001d4d8 <ble_ll_adv_first_chan>:
ble_ll_adv_first_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    /* Set first advertising channel */
    if (advsm->adv_chanmask & 0x01) {
   1d4d8:	7883      	ldrb	r3, [r0, #2]
   1d4da:	f013 0f01 	tst.w	r3, #1
   1d4de:	d106      	bne.n	1d4ee <ble_ll_adv_first_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START;
    } else if (advsm->adv_chanmask & 0x02) {
   1d4e0:	f013 0f02 	tst.w	r3, #2
   1d4e4:	d101      	bne.n	1d4ea <ble_ll_adv_first_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   1d4e6:	2027      	movs	r0, #39	; 0x27
    }

    return adv_chan;
}
   1d4e8:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   1d4ea:	2026      	movs	r0, #38	; 0x26
   1d4ec:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START;
   1d4ee:	2025      	movs	r0, #37	; 0x25
   1d4f0:	4770      	bx	lr

0001d4f2 <ble_ll_adv_final_chan>:
static uint8_t
ble_ll_adv_final_chan(struct ble_ll_adv_sm *advsm)
{
    uint8_t adv_chan;

    if (advsm->adv_chanmask & 0x04) {
   1d4f2:	7883      	ldrb	r3, [r0, #2]
   1d4f4:	f013 0f04 	tst.w	r3, #4
   1d4f8:	d106      	bne.n	1d508 <ble_ll_adv_final_chan+0x16>
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
    } else if (advsm->adv_chanmask & 0x02) {
   1d4fa:	f013 0f02 	tst.w	r3, #2
   1d4fe:	d101      	bne.n	1d504 <ble_ll_adv_final_chan+0x12>
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
    } else {
        adv_chan = BLE_PHY_ADV_CHAN_START;
   1d500:	2025      	movs	r0, #37	; 0x25
    }

    return adv_chan;
}
   1d502:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 1;
   1d504:	2026      	movs	r0, #38	; 0x26
   1d506:	4770      	bx	lr
        adv_chan = BLE_PHY_ADV_CHAN_START + 2;
   1d508:	2027      	movs	r0, #39	; 0x27
   1d50a:	4770      	bx	lr

0001d50c <ble_ll_adv_flags_set>:
{
   1d50c:	b538      	push	{r3, r4, r5, lr}
   1d50e:	4605      	mov	r5, r0
   1d510:	460c      	mov	r4, r1
    OS_ENTER_CRITICAL(sr);
   1d512:	f7ed ffdd 	bl	b4d0 <os_arch_save_sr>
    advsm->flags |= flags;
   1d516:	896b      	ldrh	r3, [r5, #10]
   1d518:	431c      	orrs	r4, r3
   1d51a:	816c      	strh	r4, [r5, #10]
    OS_EXIT_CRITICAL(sr);
   1d51c:	f7ed ffde 	bl	b4dc <os_arch_restore_sr>
}
   1d520:	bd38      	pop	{r3, r4, r5, pc}

0001d522 <ble_ll_adv_flags_clear>:
{
   1d522:	b538      	push	{r3, r4, r5, lr}
   1d524:	4604      	mov	r4, r0
   1d526:	460d      	mov	r5, r1
    OS_ENTER_CRITICAL(sr);
   1d528:	f7ed ffd2 	bl	b4d0 <os_arch_save_sr>
    advsm->flags &= ~flags;
   1d52c:	8961      	ldrh	r1, [r4, #10]
   1d52e:	ea21 0105 	bic.w	r1, r1, r5
   1d532:	8161      	strh	r1, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1d534:	f7ed ffd2 	bl	b4dc <os_arch_restore_sr>
}
   1d538:	bd38      	pop	{r3, r4, r5, pc}

0001d53a <ble_ll_adv_rpa_update>:
{
   1d53a:	b538      	push	{r3, r4, r5, lr}
   1d53c:	4604      	mov	r4, r0
    if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   1d53e:	f100 0534 	add.w	r5, r0, #52	; 0x34
   1d542:	2301      	movs	r3, #1
   1d544:	f100 0228 	add.w	r2, r0, #40	; 0x28
   1d548:	7941      	ldrb	r1, [r0, #5]
   1d54a:	4628      	mov	r0, r5
   1d54c:	f006 f83e 	bl	235cc <ble_ll_resolv_gen_rpa>
   1d550:	b960      	cbnz	r0, 1d56c <ble_ll_adv_rpa_update+0x32>
        if (advsm->own_addr_type & 1) {
   1d552:	7923      	ldrb	r3, [r4, #4]
   1d554:	f013 0f01 	tst.w	r3, #1
   1d558:	d00d      	beq.n	1d576 <ble_ll_adv_rpa_update+0x3c>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   1d55a:	2101      	movs	r1, #1
   1d55c:	4620      	mov	r0, r4
   1d55e:	f7ff ffd5 	bl	1d50c <ble_ll_adv_flags_set>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1d562:	89a3      	ldrh	r3, [r4, #12]
   1d564:	f013 0f04 	tst.w	r3, #4
   1d568:	d10a      	bne.n	1d580 <ble_ll_adv_rpa_update+0x46>
}
   1d56a:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   1d56c:	2101      	movs	r1, #1
   1d56e:	4620      	mov	r0, r4
   1d570:	f7ff ffcc 	bl	1d50c <ble_ll_adv_flags_set>
   1d574:	e7f5      	b.n	1d562 <ble_ll_adv_rpa_update+0x28>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD);
   1d576:	2101      	movs	r1, #1
   1d578:	4620      	mov	r0, r4
   1d57a:	f7ff ffd2 	bl	1d522 <ble_ll_adv_flags_clear>
   1d57e:	e7f0      	b.n	1d562 <ble_ll_adv_rpa_update+0x28>
        if (ble_ll_resolv_gen_rpa(advsm->peer_addr, advsm->peer_addr_type,
   1d580:	2300      	movs	r3, #0
   1d582:	f104 023a 	add.w	r2, r4, #58	; 0x3a
   1d586:	7961      	ldrb	r1, [r4, #5]
   1d588:	4628      	mov	r0, r5
   1d58a:	f006 f81f 	bl	235cc <ble_ll_resolv_gen_rpa>
   1d58e:	b940      	cbnz	r0, 1d5a2 <ble_ll_adv_rpa_update+0x68>
            if (advsm->peer_addr_type & 1) {
   1d590:	7963      	ldrb	r3, [r4, #5]
   1d592:	f013 0f01 	tst.w	r3, #1
   1d596:	d109      	bne.n	1d5ac <ble_ll_adv_rpa_update+0x72>
                ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   1d598:	2102      	movs	r1, #2
   1d59a:	4620      	mov	r0, r4
   1d59c:	f7ff ffc1 	bl	1d522 <ble_ll_adv_flags_clear>
}
   1d5a0:	e7e3      	b.n	1d56a <ble_ll_adv_rpa_update+0x30>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   1d5a2:	2102      	movs	r1, #2
   1d5a4:	4620      	mov	r0, r4
   1d5a6:	f7ff ffb1 	bl	1d50c <ble_ll_adv_flags_set>
   1d5aa:	e7de      	b.n	1d56a <ble_ll_adv_rpa_update+0x30>
                ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_RX_ADD);
   1d5ac:	2102      	movs	r1, #2
   1d5ae:	4620      	mov	r0, r4
   1d5b0:	f7ff ffac 	bl	1d50c <ble_ll_adv_flags_set>
   1d5b4:	e7d9      	b.n	1d56a <ble_ll_adv_rpa_update+0x30>

0001d5b6 <ble_ll_adv_active_chanset_clear>:
{
   1d5b6:	b510      	push	{r4, lr}
   1d5b8:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1d5ba:	f7ed ff89 	bl	b4d0 <os_arch_save_sr>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   1d5be:	8963      	ldrh	r3, [r4, #10]
   1d5c0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
   1d5c4:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1d5c6:	f7ed ff89 	bl	b4dc <os_arch_restore_sr>
}
   1d5ca:	bd10      	pop	{r4, pc}

0001d5cc <ble_ll_adv_tx_done>:
 * @param advsm
 *
 */
static void
ble_ll_adv_tx_done(void *arg)
{
   1d5cc:	b510      	push	{r4, lr}
   1d5ce:	4604      	mov	r4, r0
    struct ble_ll_adv_sm *advsm;

    /* reset power to max after advertising */
    ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   1d5d0:	2000      	movs	r0, #0
   1d5d2:	f008 fdd7 	bl	26184 <ble_phy_txpwr_set>
    os_eventq_put(&evq->evq, &ev->ev);
   1d5d6:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1d5da:	4806      	ldr	r0, [pc, #24]	; (1d5f4 <ble_ll_adv_tx_done+0x28>)
   1d5dc:	f7ec fcd3 	bl	9f86 <os_eventq_put>
    }
#else
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &advsm->adv_txdone_ev);
#endif

    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1d5e0:	2000      	movs	r0, #0
   1d5e2:	f7ff fe41 	bl	1d268 <ble_ll_state_set>

    ble_ll_adv_active_chanset_clear(advsm);
   1d5e6:	4620      	mov	r0, r4
   1d5e8:	f7ff ffe5 	bl	1d5b6 <ble_ll_adv_active_chanset_clear>

    /* We no longer have a current state machine */
    g_ble_ll_cur_adv_sm = NULL;
   1d5ec:	4b02      	ldr	r3, [pc, #8]	; (1d5f8 <ble_ll_adv_tx_done+0x2c>)
   1d5ee:	2200      	movs	r2, #0
   1d5f0:	601a      	str	r2, [r3, #0]
}
   1d5f2:	bd10      	pop	{r4, pc}
   1d5f4:	200084e8 	.word	0x200084e8
   1d5f8:	200087e0 	.word	0x200087e0

0001d5fc <ble_ll_adv_sm_find_configured>:
{
   1d5fc:	b510      	push	{r4, lr}
   1d5fe:	4604      	mov	r4, r0
    if (!ble_ll_hci_adv_mode_ext()) {
   1d600:	f005 f9c3 	bl	2298a <ble_ll_hci_adv_mode_ext>
   1d604:	b9c0      	cbnz	r0, 1d638 <ble_ll_adv_sm_find_configured+0x3c>
        BLE_LL_ASSERT(instance == 0);
   1d606:	b90c      	cbnz	r4, 1d60c <ble_ll_adv_sm_find_configured+0x10>
        return &g_ble_ll_adv_sm[0];
   1d608:	480e      	ldr	r0, [pc, #56]	; (1d644 <ble_ll_adv_sm_find_configured+0x48>)
}
   1d60a:	bd10      	pop	{r4, pc}
        BLE_LL_ASSERT(instance == 0);
   1d60c:	f7ea fdd8 	bl	81c0 <hal_debugger_connected>
   1d610:	b100      	cbz	r0, 1d614 <ble_ll_adv_sm_find_configured+0x18>
   1d612:	be01      	bkpt	0x0001
   1d614:	2300      	movs	r3, #0
   1d616:	461a      	mov	r2, r3
   1d618:	4619      	mov	r1, r3
   1d61a:	4618      	mov	r0, r3
   1d61c:	f7ec f966 	bl	98ec <__assert_func>
        advsm = &g_ble_ll_adv_sm[i];
   1d620:	4808      	ldr	r0, [pc, #32]	; (1d644 <ble_ll_adv_sm_find_configured+0x48>)
   1d622:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_CONFIGURED) &&
   1d626:	8942      	ldrh	r2, [r0, #10]
   1d628:	f012 0f80 	tst.w	r2, #128	; 0x80
   1d62c:	d002      	beq.n	1d634 <ble_ll_adv_sm_find_configured+0x38>
                (advsm->adv_instance == instance)) {
   1d62e:	7842      	ldrb	r2, [r0, #1]
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_CONFIGURED) &&
   1d630:	42a2      	cmp	r2, r4
   1d632:	d0ea      	beq.n	1d60a <ble_ll_adv_sm_find_configured+0xe>
    for (i = 0; i < ARRAY_SIZE(g_ble_ll_adv_sm); i++) {
   1d634:	3301      	adds	r3, #1
   1d636:	e000      	b.n	1d63a <ble_ll_adv_sm_find_configured+0x3e>
   1d638:	2300      	movs	r3, #0
   1d63a:	2b00      	cmp	r3, #0
   1d63c:	d0f0      	beq.n	1d620 <ble_ll_adv_sm_find_configured+0x24>
    return NULL;
   1d63e:	2000      	movs	r0, #0
   1d640:	e7e3      	b.n	1d60a <ble_ll_adv_sm_find_configured+0xe>
   1d642:	bf00      	nop
   1d644:	20008760 	.word	0x20008760

0001d648 <ble_ll_adv_active_chanset_set_pri>:
{
   1d648:	b510      	push	{r4, lr}
   1d64a:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1d64c:	f7ed ff40 	bl	b4d0 <os_arch_save_sr>
    assert((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   1d650:	8963      	ldrh	r3, [r4, #10]
   1d652:	f013 0f30 	tst.w	r3, #48	; 0x30
   1d656:	d107      	bne.n	1d668 <ble_ll_adv_active_chanset_set_pri+0x20>
    advsm->flags &= ~BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK;
   1d658:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    advsm->flags |= 0x10;
   1d65c:	f043 0310 	orr.w	r3, r3, #16
   1d660:	8163      	strh	r3, [r4, #10]
    OS_EXIT_CRITICAL(sr);
   1d662:	f7ed ff3b 	bl	b4dc <os_arch_restore_sr>
}
   1d666:	bd10      	pop	{r4, pc}
    assert((advsm->flags & BLE_LL_ADV_SM_FLAG_ACTIVE_CHANSET_MASK) == 0);
   1d668:	f7ea fdaa 	bl	81c0 <hal_debugger_connected>
   1d66c:	b100      	cbz	r0, 1d670 <ble_ll_adv_active_chanset_set_pri+0x28>
   1d66e:	be01      	bkpt	0x0001
   1d670:	2300      	movs	r3, #0
   1d672:	461a      	mov	r2, r3
   1d674:	4619      	mov	r1, r3
   1d676:	4618      	mov	r0, r3
   1d678:	f7ec f938 	bl	98ec <__assert_func>

0001d67c <ble_ll_adv_scheduled>:
}
#endif

static void
ble_ll_adv_scheduled(struct ble_ll_adv_sm *advsm, uint32_t sch_start, void *arg)
{
   1d67c:	b538      	push	{r3, r4, r5, lr}
    /* The event start time is when we start transmission of the adv PDU */
    advsm->adv_event_start_time = sch_start + g_ble_ll_sched_offset_ticks;
   1d67e:	4b08      	ldr	r3, [pc, #32]	; (1d6a0 <ble_ll_adv_scheduled+0x24>)
   1d680:	781c      	ldrb	r4, [r3, #0]
   1d682:	440c      	add	r4, r1
   1d684:	6184      	str	r4, [r0, #24]
    advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1d686:	61c4      	str	r4, [r0, #28]
                             os_cputime_usecs_to_ticks(advsm->duration * 10000);
    }
#else
    /* Set the time at which we must end directed, high-duty cycle advertising.
     */
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1d688:	8983      	ldrh	r3, [r0, #12]
   1d68a:	f013 0f08 	tst.w	r3, #8
   1d68e:	d100      	bne.n	1d692 <ble_ll_adv_scheduled+0x16>
        advsm->adv_end_time = advsm->adv_event_start_time +
                     os_cputime_usecs_to_ticks(BLE_LL_ADV_STATE_HD_MAX * 1000);
    }
#endif
}
   1d690:	bd38      	pop	{r3, r4, r5, pc}
   1d692:	4605      	mov	r5, r0
                     os_cputime_usecs_to_ticks(BLE_LL_ADV_STATE_HD_MAX * 1000);
   1d694:	4803      	ldr	r0, [pc, #12]	; (1d6a4 <ble_ll_adv_scheduled+0x28>)
   1d696:	f7fe fb71 	bl	1bd7c <os_cputime_usecs_to_ticks>
        advsm->adv_end_time = advsm->adv_event_start_time +
   1d69a:	4404      	add	r4, r0
   1d69c:	622c      	str	r4, [r5, #32]
}
   1d69e:	e7f7      	b.n	1d690 <ble_ll_adv_scheduled+0x14>
   1d6a0:	20008cf0 	.word	0x20008cf0
   1d6a4:	00138800 	.word	0x00138800

0001d6a8 <ble_ll_adv_set_sched>:
{
   1d6a8:	b538      	push	{r3, r4, r5, lr}
   1d6aa:	4604      	mov	r4, r0
    sch->cb_arg = advsm;
   1d6ac:	6700      	str	r0, [r0, #112]	; 0x70
    sch->sched_cb = ble_ll_adv_tx_start_cb;
   1d6ae:	4b11      	ldr	r3, [pc, #68]	; (1d6f4 <ble_ll_adv_set_sched+0x4c>)
   1d6b0:	6743      	str	r3, [r0, #116]	; 0x74
    sch->sched_type = BLE_LL_SCHED_TYPE_ADV;
   1d6b2:	2101      	movs	r1, #1
   1d6b4:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
    max_usecs = ble_ll_pdu_tx_time_get(advsm->adv_pdu_len, BLE_PHY_MODE_1M);
   1d6b8:	79c0      	ldrb	r0, [r0, #7]
   1d6ba:	f7ff fe29 	bl	1d310 <ble_ll_pdu_tx_time_get>
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1d6be:	89a3      	ldrh	r3, [r4, #12]
   1d6c0:	f013 0f04 	tst.w	r3, #4
   1d6c4:	d105      	bne.n	1d6d2 <ble_ll_adv_set_sched+0x2a>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1d6c6:	f013 0f01 	tst.w	r3, #1
   1d6ca:	d004      	beq.n	1d6d6 <ble_ll_adv_set_sched+0x2e>
        max_usecs += BLE_LL_SCHED_ADV_MAX_USECS;
   1d6cc:	f500 7055 	add.w	r0, r0, #852	; 0x354
   1d6d0:	e001      	b.n	1d6d6 <ble_ll_adv_set_sched+0x2e>
        max_usecs += BLE_LL_SCHED_DIRECT_ADV_MAX_USECS;
   1d6d2:	f500 70fb 	add.w	r0, r0, #502	; 0x1f6
    sch->start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   1d6d6:	69e5      	ldr	r5, [r4, #28]
   1d6d8:	4b07      	ldr	r3, [pc, #28]	; (1d6f8 <ble_ll_adv_set_sched+0x50>)
   1d6da:	781b      	ldrb	r3, [r3, #0]
   1d6dc:	1aeb      	subs	r3, r5, r3
   1d6de:	66a3      	str	r3, [r4, #104]	; 0x68
    sch->remainder = 0;
   1d6e0:	2300      	movs	r3, #0
   1d6e2:	f884 3066 	strb.w	r3, [r4, #102]	; 0x66

/* Convert usecs to ticks and round up to nearest tick */
static inline uint32_t
ble_ll_usecs_to_ticks_round_up(uint32_t usecs)
{
    return os_cputime_usecs_to_ticks(usecs + 30);
   1d6e6:	301e      	adds	r0, #30
   1d6e8:	f7fe fb48 	bl	1bd7c <os_cputime_usecs_to_ticks>
    sch->end_time = advsm->adv_pdu_start_time +
   1d6ec:	4428      	add	r0, r5
   1d6ee:	66e0      	str	r0, [r4, #108]	; 0x6c
}
   1d6f0:	bd38      	pop	{r3, r4, r5, pc}
   1d6f2:	bf00      	nop
   1d6f4:	0001d815 	.word	0x0001d815
   1d6f8:	20008cf0 	.word	0x20008cf0

0001d6fc <ble_ll_adv_sm_start>:
 *
 * @return int
 */
static int
ble_ll_adv_sm_start(struct ble_ll_adv_sm *advsm)
{
   1d6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d6fe:	4604      	mov	r4, r0
    const uint8_t *random_addr;
    uint32_t earliest_start_time;
    int32_t delta;

    /* only clear flags that are not set from HCI */
    ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_TX_ADD |
   1d700:	210b      	movs	r1, #11
   1d702:	f7ff ff0e 	bl	1d522 <ble_ll_adv_flags_clear>
    random_addr = advsm->adv_random_addr;
#else
    random_addr = g_random_addr;
#endif

    if (!ble_ll_is_valid_own_addr_type(advsm->own_addr_type, random_addr)) {
   1d706:	493f      	ldr	r1, [pc, #252]	; (1d804 <ble_ll_adv_sm_start+0x108>)
   1d708:	7920      	ldrb	r0, [r4, #4]
   1d70a:	f7ff fc53 	bl	1cfb4 <ble_ll_is_valid_own_addr_type>
   1d70e:	2800      	cmp	r0, #0
   1d710:	d073      	beq.n	1d7fa <ble_ll_adv_sm_start+0xfe>

    /*
     * Get an event with which to send the connection complete event if
     * this is connectable
     */
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1d712:	89a3      	ldrh	r3, [r4, #12]
   1d714:	f013 0f01 	tst.w	r3, #1
   1d718:	d001      	beq.n	1d71e <ble_ll_adv_sm_start+0x22>
        /* We expect this to be NULL but if not we wont allocate one... */
        if (advsm->conn_comp_ev == NULL) {
   1d71a:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1d71c:	b14b      	cbz	r3, 1d732 <ble_ll_adv_sm_start+0x36>
            advsm->conn_comp_ev = evbuf;
        }
    }

    /* Set advertising address */
    if ((advsm->own_addr_type & 1) == 0) {
   1d71e:	7923      	ldrb	r3, [r4, #4]
   1d720:	f013 0f01 	tst.w	r3, #1
   1d724:	d00c      	beq.n	1d740 <ble_ll_adv_sm_start+0x44>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
        addr = advsm->adv_random_addr;
#else
        addr = g_random_addr;
#endif
        advsm->flags |= BLE_LL_ADV_SM_FLAG_TX_ADD;
   1d726:	8962      	ldrh	r2, [r4, #10]
   1d728:	f042 0201 	orr.w	r2, r2, #1
   1d72c:	8162      	strh	r2, [r4, #10]
        addr = g_random_addr;
   1d72e:	4a35      	ldr	r2, [pc, #212]	; (1d804 <ble_ll_adv_sm_start+0x108>)
   1d730:	e007      	b.n	1d742 <ble_ll_adv_sm_start+0x46>
            evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   1d732:	2002      	movs	r0, #2
   1d734:	f7f8 feea 	bl	1650c <ble_hci_trans_buf_alloc>
            if (!evbuf) {
   1d738:	2800      	cmp	r0, #0
   1d73a:	d060      	beq.n	1d7fe <ble_ll_adv_sm_start+0x102>
            advsm->conn_comp_ev = evbuf;
   1d73c:	6520      	str	r0, [r4, #80]	; 0x50
   1d73e:	e7ee      	b.n	1d71e <ble_ll_adv_sm_start+0x22>
        addr = g_dev_addr;
   1d740:	4a31      	ldr	r2, [pc, #196]	; (1d808 <ble_ll_adv_sm_start+0x10c>)
    }
    memcpy(advsm->adva, addr, BLE_DEV_ADDR_LEN);
   1d742:	6811      	ldr	r1, [r2, #0]
   1d744:	62a1      	str	r1, [r4, #40]	; 0x28
   1d746:	8892      	ldrh	r2, [r2, #4]
   1d748:	85a2      	strh	r2, [r4, #44]	; 0x2c

    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1d74a:	89a2      	ldrh	r2, [r4, #12]
   1d74c:	f012 0f04 	tst.w	r2, #4
   1d750:	d133      	bne.n	1d7ba <ble_ll_adv_sm_start+0xbe>
        }
    }

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    /* This will generate an RPA for both initiator addr and adva */
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1d752:	2b01      	cmp	r3, #1
   1d754:	d841      	bhi.n	1d7da <ble_ll_adv_sm_start+0xde>
        ble_ll_adv_rpa_update(advsm);
    }
#endif

    /* Set flag telling us that advertising is enabled */
    advsm->adv_enabled = 1;
   1d756:	2301      	movs	r3, #1
   1d758:	7023      	strb	r3, [r4, #0]
    advsm->channel_id = ((access_addr & 0xffff0000) >> 16) ^
                         (access_addr & 0x0000ffff);
#endif

    /* Determine the advertising interval we will use */
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1d75a:	89a3      	ldrh	r3, [r4, #12]
   1d75c:	f013 0f08 	tst.w	r3, #8
   1d760:	d03f      	beq.n	1d7e2 <ble_ll_adv_sm_start+0xe6>
        /* Set it to max. allowed for high duty cycle advertising */
        advsm->adv_itvl_usecs = BLE_LL_ADV_PDU_ITVL_HD_MS_MAX;
   1d762:	f640 63a6 	movw	r3, #3750	; 0xea6
   1d766:	6163      	str	r3, [r4, #20]
        advsm->adv_itvl_usecs = (uint32_t)advsm->adv_itvl_max;
        advsm->adv_itvl_usecs *= BLE_LL_ADV_ITVL;
    }

    /* Set first advertising channel */
    adv_chan = ble_ll_adv_first_chan(advsm);
   1d768:	4620      	mov	r0, r4
   1d76a:	f7ff feb5 	bl	1d4d8 <ble_ll_adv_first_chan>
    advsm->adv_chan = adv_chan;
   1d76e:	71a0      	strb	r0, [r4, #6]
     * used to setup start time for scheduler item.
     * Then we check if start time for scheduler item (which includes scheduler
     * overhead) is no earlier than calculated earliest possible start time and
     * adjust scheduler item if necessary.
     */
    earliest_start_time = ble_ll_rfmgmt_enable_now();
   1d770:	f006 f8d2 	bl	23918 <ble_ll_rfmgmt_enable_now>
   1d774:	4607      	mov	r7, r0
	return (int)lrand48();
   1d776:	f7ed ffed 	bl	b754 <lrand48>

    start_delay_us = rand() % (BLE_LL_ADV_DELAY_MS_MAX * 1000);
   1d77a:	4b24      	ldr	r3, [pc, #144]	; (1d80c <ble_ll_adv_sm_start+0x110>)
   1d77c:	fb83 2300 	smull	r2, r3, r3, r0
   1d780:	17c5      	asrs	r5, r0, #31
   1d782:	ebc5 3523 	rsb	r5, r5, r3, asr #12
   1d786:	f242 7310 	movw	r3, #10000	; 0x2710
   1d78a:	fb03 0515 	mls	r5, r3, r5, r0
    advsm->adv_pdu_start_time = os_cputime_get32() +
   1d78e:	f7fe fade 	bl	1bd4e <os_cputime_get32>
   1d792:	4606      	mov	r6, r0
                                os_cputime_usecs_to_ticks(start_delay_us);
   1d794:	4628      	mov	r0, r5
   1d796:	f7fe faf1 	bl	1bd7c <os_cputime_usecs_to_ticks>
    advsm->adv_pdu_start_time = os_cputime_get32() +
   1d79a:	4430      	add	r0, r6
   1d79c:	61e0      	str	r0, [r4, #28]

    ble_ll_adv_set_sched(advsm);
   1d79e:	4620      	mov	r0, r4
   1d7a0:	f7ff ff82 	bl	1d6a8 <ble_ll_adv_set_sched>

    delta = (int32_t)(advsm->adv_sch.start_time - earliest_start_time);
   1d7a4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    if (delta < 0) {
   1d7a6:	1bdb      	subs	r3, r3, r7
   1d7a8:	d422      	bmi.n	1d7f0 <ble_ll_adv_sm_start+0xf4>
        advsm->adv_sch.start_time -= delta;
        advsm->adv_sch.end_time -= delta;
    }

    /* This does actual scheduling */
    ble_ll_sched_adv_new(&advsm->adv_sch, ble_ll_adv_scheduled, NULL);
   1d7aa:	2200      	movs	r2, #0
   1d7ac:	4918      	ldr	r1, [pc, #96]	; (1d810 <ble_ll_adv_sm_start+0x114>)
   1d7ae:	f104 0064 	add.w	r0, r4, #100	; 0x64
   1d7b2:	f007 fca1 	bl	250f8 <ble_ll_sched_adv_new>
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
        ble_ll_adv_aux_schedule(advsm);
    }
#endif

    return BLE_ERR_SUCCESS;
   1d7b6:	2000      	movs	r0, #0
}
   1d7b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        memcpy(advsm->initiator_addr, advsm->peer_addr, BLE_DEV_ADDR_LEN);
   1d7ba:	4622      	mov	r2, r4
   1d7bc:	f852 1f34 	ldr.w	r1, [r2, #52]!
   1d7c0:	f8c4 103a 	str.w	r1, [r4, #58]	; 0x3a
   1d7c4:	8892      	ldrh	r2, [r2, #4]
   1d7c6:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if (advsm->peer_addr_type & 1) {
   1d7c8:	7962      	ldrb	r2, [r4, #5]
   1d7ca:	f012 0f01 	tst.w	r2, #1
   1d7ce:	d0c0      	beq.n	1d752 <ble_ll_adv_sm_start+0x56>
            advsm->flags |= BLE_LL_ADV_SM_FLAG_RX_ADD;
   1d7d0:	8962      	ldrh	r2, [r4, #10]
   1d7d2:	f042 0202 	orr.w	r2, r2, #2
   1d7d6:	8162      	strh	r2, [r4, #10]
   1d7d8:	e7bb      	b.n	1d752 <ble_ll_adv_sm_start+0x56>
        ble_ll_adv_rpa_update(advsm);
   1d7da:	4620      	mov	r0, r4
   1d7dc:	f7ff fead 	bl	1d53a <ble_ll_adv_rpa_update>
   1d7e0:	e7b9      	b.n	1d756 <ble_ll_adv_sm_start+0x5a>
        advsm->adv_itvl_usecs = (uint32_t)advsm->adv_itvl_max;
   1d7e2:	8a22      	ldrh	r2, [r4, #16]
        advsm->adv_itvl_usecs *= BLE_LL_ADV_ITVL;
   1d7e4:	f240 2371 	movw	r3, #625	; 0x271
   1d7e8:	fb03 f302 	mul.w	r3, r3, r2
   1d7ec:	6163      	str	r3, [r4, #20]
   1d7ee:	e7bb      	b.n	1d768 <ble_ll_adv_sm_start+0x6c>
        advsm->adv_sch.start_time -= delta;
   1d7f0:	66a7      	str	r7, [r4, #104]	; 0x68
        advsm->adv_sch.end_time -= delta;
   1d7f2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   1d7f4:	1ad3      	subs	r3, r2, r3
   1d7f6:	66e3      	str	r3, [r4, #108]	; 0x6c
   1d7f8:	e7d7      	b.n	1d7aa <ble_ll_adv_sm_start+0xae>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1d7fa:	2012      	movs	r0, #18
   1d7fc:	e7dc      	b.n	1d7b8 <ble_ll_adv_sm_start+0xbc>
                return BLE_ERR_MEM_CAPACITY;
   1d7fe:	2007      	movs	r0, #7
   1d800:	e7da      	b.n	1d7b8 <ble_ll_adv_sm_start+0xbc>
   1d802:	bf00      	nop
   1d804:	20008758 	.word	0x20008758
   1d808:	20008750 	.word	0x20008750
   1d80c:	68db8bad 	.word	0x68db8bad
   1d810:	0001d67d 	.word	0x0001d67d

0001d814 <ble_ll_adv_tx_start_cb>:
{
   1d814:	b538      	push	{r3, r4, r5, lr}
   1d816:	4605      	mov	r5, r0
    advsm = (struct ble_ll_adv_sm *)sch->cb_arg;
   1d818:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_cur_adv_sm = advsm;
   1d81a:	4b2d      	ldr	r3, [pc, #180]	; (1d8d0 <ble_ll_adv_tx_start_cb+0xbc>)
   1d81c:	601c      	str	r4, [r3, #0]
    ble_ll_adv_active_chanset_set_pri(advsm);
   1d81e:	4620      	mov	r0, r4
   1d820:	f7ff ff12 	bl	1d648 <ble_ll_adv_active_chanset_set_pri>
    if ((advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) ||
   1d824:	8963      	ldrh	r3, [r4, #10]
   1d826:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   1d82a:	d111      	bne.n	1d850 <ble_ll_adv_tx_start_cb+0x3c>
    ble_phy_txpwr_set(advsm->adv_txpwr);
   1d82c:	f994 0009 	ldrsb.w	r0, [r4, #9]
   1d830:	f008 fca8 	bl	26184 <ble_phy_txpwr_set>
    rc = ble_phy_setchan(advsm->adv_chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   1d834:	4a27      	ldr	r2, [pc, #156]	; (1d8d4 <ble_ll_adv_tx_start_cb+0xc0>)
   1d836:	4928      	ldr	r1, [pc, #160]	; (1d8d8 <ble_ll_adv_tx_start_cb+0xc4>)
   1d838:	79a0      	ldrb	r0, [r4, #6]
   1d83a:	f008 fcb7 	bl	261ac <ble_phy_setchan>
    assert(rc == 0);
   1d83e:	b968      	cbnz	r0, 1d85c <ble_ll_adv_tx_start_cb+0x48>
    txstart = sch->start_time + g_ble_ll_sched_offset_ticks;
   1d840:	6868      	ldr	r0, [r5, #4]
   1d842:	4b26      	ldr	r3, [pc, #152]	; (1d8dc <ble_ll_adv_tx_start_cb+0xc8>)
   1d844:	781b      	ldrb	r3, [r3, #0]
    rc = ble_phy_tx_set_start_time(txstart, sch->remainder);
   1d846:	78a9      	ldrb	r1, [r5, #2]
   1d848:	4418      	add	r0, r3
   1d84a:	f008 feaf 	bl	265ac <ble_phy_tx_set_start_time>
    if (rc) {
   1d84e:	b178      	cbz	r0, 1d870 <ble_ll_adv_tx_start_cb+0x5c>
    ble_ll_adv_tx_done(advsm);
   1d850:	4620      	mov	r0, r4
   1d852:	f7ff febb 	bl	1d5cc <ble_ll_adv_tx_done>
    return BLE_LL_SCHED_STATE_DONE;
   1d856:	2501      	movs	r5, #1
}
   1d858:	4628      	mov	r0, r5
   1d85a:	bd38      	pop	{r3, r4, r5, pc}
    assert(rc == 0);
   1d85c:	f7ea fcb0 	bl	81c0 <hal_debugger_connected>
   1d860:	b100      	cbz	r0, 1d864 <ble_ll_adv_tx_start_cb+0x50>
   1d862:	be01      	bkpt	0x0001
   1d864:	2300      	movs	r3, #0
   1d866:	461a      	mov	r2, r3
   1d868:	4619      	mov	r1, r3
   1d86a:	4618      	mov	r0, r3
   1d86c:	f7ec f83e 	bl	98ec <__assert_func>
    ble_phy_encrypt_disable();
   1d870:	f008 fc44 	bl	260fc <ble_phy_encrypt_disable>
    advsm->adv_rpa_index = -1;
   1d874:	23ff      	movs	r3, #255	; 0xff
   1d876:	7223      	strb	r3, [r4, #8]
    if (ble_ll_resolv_enabled()) {
   1d878:	f005 fef6 	bl	23668 <ble_ll_resolv_enabled>
   1d87c:	b1e0      	cbz	r0, 1d8b8 <ble_ll_adv_tx_start_cb+0xa4>
        ble_phy_resolv_list_enable();
   1d87e:	f008 ff43 	bl	26708 <ble_phy_resolv_list_enable>
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
   1d882:	89a3      	ldrh	r3, [r4, #12]
   1d884:	f013 0f10 	tst.w	r3, #16
   1d888:	d002      	beq.n	1d890 <ble_ll_adv_tx_start_cb+0x7c>
   1d88a:	f013 0f03 	tst.w	r3, #3
   1d88e:	d116      	bne.n	1d8be <ble_ll_adv_tx_start_cb+0xaa>
        ble_phy_set_txend_cb(ble_ll_adv_tx_done, advsm);
   1d890:	4621      	mov	r1, r4
   1d892:	4813      	ldr	r0, [pc, #76]	; (1d8e0 <ble_ll_adv_tx_start_cb+0xcc>)
   1d894:	f008 fc48 	bl	26128 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_NONE;
   1d898:	2200      	movs	r2, #0
    rc = ble_phy_tx(ble_ll_adv_legacy_pdu_make, advsm, end_trans);
   1d89a:	4621      	mov	r1, r4
   1d89c:	4811      	ldr	r0, [pc, #68]	; (1d8e4 <ble_ll_adv_tx_start_cb+0xd0>)
   1d89e:	f008 fe9d 	bl	265dc <ble_phy_tx>
    if (rc) {
   1d8a2:	4605      	mov	r5, r0
   1d8a4:	2800      	cmp	r0, #0
   1d8a6:	d1d3      	bne.n	1d850 <ble_ll_adv_tx_start_cb+0x3c>
    if (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE) {
   1d8a8:	78e3      	ldrb	r3, [r4, #3]
   1d8aa:	b173      	cbz	r3, 1d8ca <ble_ll_adv_tx_start_cb+0xb6>
        ble_ll_whitelist_enable();
   1d8ac:	f007 ff44 	bl	25738 <ble_ll_whitelist_enable>
    ble_ll_state_set(BLE_LL_STATE_ADV);
   1d8b0:	2001      	movs	r0, #1
   1d8b2:	f7ff fcd9 	bl	1d268 <ble_ll_state_set>
    return BLE_LL_SCHED_STATE_RUNNING;
   1d8b6:	e7cf      	b.n	1d858 <ble_ll_adv_tx_start_cb+0x44>
        ble_phy_resolv_list_disable();
   1d8b8:	f008 ff36 	bl	26728 <ble_phy_resolv_list_disable>
   1d8bc:	e7e1      	b.n	1d882 <ble_ll_adv_tx_start_cb+0x6e>
        ble_phy_set_txend_cb(NULL, NULL);
   1d8be:	2100      	movs	r1, #0
   1d8c0:	4608      	mov	r0, r1
   1d8c2:	f008 fc31 	bl	26128 <ble_phy_set_txend_cb>
        end_trans = BLE_PHY_TRANSITION_TX_RX;
   1d8c6:	2202      	movs	r2, #2
        ble_phy_set_txend_cb(NULL, NULL);
   1d8c8:	e7e7      	b.n	1d89a <ble_ll_adv_tx_start_cb+0x86>
        ble_ll_whitelist_disable();
   1d8ca:	f007 ff39 	bl	25740 <ble_ll_whitelist_disable>
   1d8ce:	e7ef      	b.n	1d8b0 <ble_ll_adv_tx_start_cb+0x9c>
   1d8d0:	200087e0 	.word	0x200087e0
   1d8d4:	00555555 	.word	0x00555555
   1d8d8:	8e89bed6 	.word	0x8e89bed6
   1d8dc:	20008cf0 	.word	0x20008cf0
   1d8e0:	0001d5cd 	.word	0x0001d5cd
   1d8e4:	0001d8e9 	.word	0x0001d8e9

0001d8e8 <ble_ll_adv_legacy_pdu_make>:
{
   1d8e8:	b570      	push	{r4, r5, r6, lr}
   1d8ea:	460c      	mov	r4, r1
    adv_data_len = ADV_DATA_LEN(advsm);
   1d8ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1d8ee:	b333      	cbz	r3, 1d93e <ble_ll_adv_legacy_pdu_make+0x56>
   1d8f0:	7c19      	ldrb	r1, [r3, #16]
    pdulen = BLE_DEV_ADDR_LEN + adv_data_len;
   1d8f2:	1d8d      	adds	r5, r1, #6
   1d8f4:	b2ed      	uxtb	r5, r5
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1d8f6:	89a3      	ldrh	r3, [r4, #12]
   1d8f8:	f013 0f04 	tst.w	r3, #4
   1d8fc:	d021      	beq.n	1d942 <ble_ll_adv_legacy_pdu_make+0x5a>
        if (advsm->flags & BLE_LL_ADV_SM_FLAG_RX_ADD) {
   1d8fe:	8963      	ldrh	r3, [r4, #10]
   1d900:	f013 0f02 	tst.w	r3, #2
   1d904:	d125      	bne.n	1d952 <ble_ll_adv_legacy_pdu_make+0x6a>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_DIRECT_IND;
   1d906:	2301      	movs	r3, #1
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   1d908:	250c      	movs	r5, #12
        adv_data_len = 0;
   1d90a:	2100      	movs	r1, #0
    assert(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   1d90c:	291f      	cmp	r1, #31
   1d90e:	d828      	bhi.n	1d962 <ble_ll_adv_legacy_pdu_make+0x7a>
    advsm->adv_pdu_len = pdulen + BLE_LL_PDU_HDR_LEN;
   1d910:	1cae      	adds	r6, r5, #2
   1d912:	71e6      	strb	r6, [r4, #7]
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) {
   1d914:	8966      	ldrh	r6, [r4, #10]
   1d916:	f016 0f01 	tst.w	r6, #1
   1d91a:	d001      	beq.n	1d920 <ble_ll_adv_legacy_pdu_make+0x38>
        pdu_type |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1d91c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    *hdr_byte = pdu_type;
   1d920:	7013      	strb	r3, [r2, #0]
    memcpy(dptr, advsm->adva, BLE_DEV_ADDR_LEN);
   1d922:	4623      	mov	r3, r4
   1d924:	f853 2f28 	ldr.w	r2, [r3, #40]!
   1d928:	6002      	str	r2, [r0, #0]
   1d92a:	889b      	ldrh	r3, [r3, #4]
   1d92c:	8083      	strh	r3, [r0, #4]
    dptr += BLE_DEV_ADDR_LEN;
   1d92e:	1d83      	adds	r3, r0, #6
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1d930:	89a2      	ldrh	r2, [r4, #12]
   1d932:	f012 0f04 	tst.w	r2, #4
   1d936:	d11e      	bne.n	1d976 <ble_ll_adv_legacy_pdu_make+0x8e>
    if (adv_data_len != 0) {
   1d938:	bb29      	cbnz	r1, 1d986 <ble_ll_adv_legacy_pdu_make+0x9e>
}
   1d93a:	4628      	mov	r0, r5
   1d93c:	bd70      	pop	{r4, r5, r6, pc}
    adv_data_len = ADV_DATA_LEN(advsm);
   1d93e:	2100      	movs	r1, #0
   1d940:	e7d7      	b.n	1d8f2 <ble_ll_adv_legacy_pdu_make+0xa>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1d942:	f013 0f01 	tst.w	r3, #1
   1d946:	d108      	bne.n	1d95a <ble_ll_adv_legacy_pdu_make+0x72>
    } else if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   1d948:	f013 0f02 	tst.w	r3, #2
   1d94c:	d007      	beq.n	1d95e <ble_ll_adv_legacy_pdu_make+0x76>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_SCAN_IND;
   1d94e:	2306      	movs	r3, #6
   1d950:	e7dc      	b.n	1d90c <ble_ll_adv_legacy_pdu_make+0x24>
            pdu_type |= BLE_ADV_PDU_HDR_RXADD_RAND;
   1d952:	2381      	movs	r3, #129	; 0x81
        pdulen = BLE_ADV_DIRECT_IND_LEN;
   1d954:	250c      	movs	r5, #12
        adv_data_len = 0;
   1d956:	2100      	movs	r1, #0
   1d958:	e7d8      	b.n	1d90c <ble_ll_adv_legacy_pdu_make+0x24>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_IND;
   1d95a:	2300      	movs	r3, #0
   1d95c:	e7d6      	b.n	1d90c <ble_ll_adv_legacy_pdu_make+0x24>
        pdu_type = BLE_ADV_PDU_TYPE_ADV_NONCONN_IND;
   1d95e:	2302      	movs	r3, #2
   1d960:	e7d4      	b.n	1d90c <ble_ll_adv_legacy_pdu_make+0x24>
    assert(adv_data_len <= BLE_ADV_LEGACY_DATA_MAX_LEN);
   1d962:	f7ea fc2d 	bl	81c0 <hal_debugger_connected>
   1d966:	b100      	cbz	r0, 1d96a <ble_ll_adv_legacy_pdu_make+0x82>
   1d968:	be01      	bkpt	0x0001
   1d96a:	2300      	movs	r3, #0
   1d96c:	461a      	mov	r2, r3
   1d96e:	4619      	mov	r1, r3
   1d970:	4618      	mov	r0, r3
   1d972:	f7eb ffbb 	bl	98ec <__assert_func>
        memcpy(dptr, advsm->initiator_addr, BLE_DEV_ADDR_LEN);
   1d976:	4622      	mov	r2, r4
   1d978:	f852 6f3a 	ldr.w	r6, [r2, #58]!
   1d97c:	f8c0 6006 	str.w	r6, [r0, #6]
   1d980:	8892      	ldrh	r2, [r2, #4]
   1d982:	809a      	strh	r2, [r3, #4]
   1d984:	e7d8      	b.n	1d938 <ble_ll_adv_legacy_pdu_make+0x50>
        os_mbuf_copydata(advsm->adv_data, 0, adv_data_len, dptr);
   1d986:	460a      	mov	r2, r1
   1d988:	2100      	movs	r1, #0
   1d98a:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1d98c:	f7ec fd2a 	bl	a3e4 <os_mbuf_copydata>
   1d990:	e7d3      	b.n	1d93a <ble_ll_adv_legacy_pdu_make+0x52>

0001d992 <ble_ll_adv_scan_rsp_legacy_pdu_make>:
{
   1d992:	b538      	push	{r3, r4, r5, lr}
   1d994:	460c      	mov	r4, r1
    scan_rsp_len = SCAN_RSP_DATA_LEN(advsm);
   1d996:	6c8b      	ldr	r3, [r1, #72]	; 0x48
   1d998:	b1eb      	cbz	r3, 1d9d6 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x44>
   1d99a:	7c19      	ldrb	r1, [r3, #16]
    assert(scan_rsp_len <= BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN);
   1d99c:	291f      	cmp	r1, #31
   1d99e:	d810      	bhi.n	1d9c2 <ble_ll_adv_scan_rsp_legacy_pdu_make+0x30>
    pdulen = BLE_DEV_ADDR_LEN + scan_rsp_len;
   1d9a0:	1d8d      	adds	r5, r1, #6
   1d9a2:	b2ed      	uxtb	r5, r5
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) {
   1d9a4:	8963      	ldrh	r3, [r4, #10]
   1d9a6:	f013 0f01 	tst.w	r3, #1
   1d9aa:	d116      	bne.n	1d9da <ble_ll_adv_scan_rsp_legacy_pdu_make+0x48>
    hdr = BLE_ADV_PDU_TYPE_SCAN_RSP;
   1d9ac:	2304      	movs	r3, #4
    *hdr_byte = hdr;
   1d9ae:	7013      	strb	r3, [r2, #0]
    memcpy(dptr, advsm->adva, BLE_DEV_ADDR_LEN);
   1d9b0:	4622      	mov	r2, r4
   1d9b2:	f852 3f28 	ldr.w	r3, [r2, #40]!
   1d9b6:	6003      	str	r3, [r0, #0]
   1d9b8:	8893      	ldrh	r3, [r2, #4]
   1d9ba:	8083      	strh	r3, [r0, #4]
    if (scan_rsp_len != 0) {
   1d9bc:	b979      	cbnz	r1, 1d9de <ble_ll_adv_scan_rsp_legacy_pdu_make+0x4c>
}
   1d9be:	4628      	mov	r0, r5
   1d9c0:	bd38      	pop	{r3, r4, r5, pc}
    assert(scan_rsp_len <= BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN);
   1d9c2:	f7ea fbfd 	bl	81c0 <hal_debugger_connected>
   1d9c6:	b100      	cbz	r0, 1d9ca <ble_ll_adv_scan_rsp_legacy_pdu_make+0x38>
   1d9c8:	be01      	bkpt	0x0001
   1d9ca:	2300      	movs	r3, #0
   1d9cc:	461a      	mov	r2, r3
   1d9ce:	4619      	mov	r1, r3
   1d9d0:	4618      	mov	r0, r3
   1d9d2:	f7eb ff8b 	bl	98ec <__assert_func>
    scan_rsp_len = SCAN_RSP_DATA_LEN(advsm);
   1d9d6:	2100      	movs	r1, #0
   1d9d8:	e7e2      	b.n	1d9a0 <ble_ll_adv_scan_rsp_legacy_pdu_make+0xe>
        hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1d9da:	2344      	movs	r3, #68	; 0x44
   1d9dc:	e7e7      	b.n	1d9ae <ble_ll_adv_scan_rsp_legacy_pdu_make+0x1c>
        os_mbuf_copydata(advsm->scan_rsp_data, 0, scan_rsp_len,
   1d9de:	1d83      	adds	r3, r0, #6
   1d9e0:	460a      	mov	r2, r1
   1d9e2:	2100      	movs	r1, #0
   1d9e4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1d9e6:	f7ec fcfd 	bl	a3e4 <os_mbuf_copydata>
   1d9ea:	e7e8      	b.n	1d9be <ble_ll_adv_scan_rsp_legacy_pdu_make+0x2c>

0001d9ec <ble_ll_adv_drop_event>:
    return rc;
}

static void
ble_ll_adv_drop_event(struct ble_ll_adv_sm *advsm)
{
   1d9ec:	b510      	push	{r4, lr}
   1d9ee:	4604      	mov	r4, r0
    STATS_INC(ble_ll_stats, adv_drop_event);

    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1d9f0:	3064      	adds	r0, #100	; 0x64
   1d9f2:	f007 fcdd 	bl	253b0 <ble_ll_sched_rmv_elem>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &advsm->adv_sec_txdone_ev);
    advsm->aux_active = 0;
#endif

    advsm->adv_chan = ble_ll_adv_final_chan(advsm);
   1d9f6:	4620      	mov	r0, r4
   1d9f8:	f7ff fd7b 	bl	1d4f2 <ble_ll_adv_final_chan>
   1d9fc:	71a0      	strb	r0, [r4, #6]
   1d9fe:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1da02:	4802      	ldr	r0, [pc, #8]	; (1da0c <ble_ll_adv_drop_event+0x20>)
   1da04:	f7ec fabf 	bl	9f86 <os_eventq_put>
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &advsm->adv_txdone_ev);
}
   1da08:	bd10      	pop	{r4, pc}
   1da0a:	bf00      	nop
   1da0c:	200084e8 	.word	0x200084e8

0001da10 <ble_ll_adv_update_adv_scan_rsp_data>:
    if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) &&
   1da10:	8943      	ldrh	r3, [r0, #10]
   1da12:	f413 6fc0 	tst.w	r3, #1536	; 0x600
   1da16:	d023      	beq.n	1da60 <ble_ll_adv_update_adv_scan_rsp_data+0x50>
{
   1da18:	b510      	push	{r4, lr}
   1da1a:	4604      	mov	r4, r0
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA) {
   1da1c:	f413 7f00 	tst.w	r3, #512	; 0x200
   1da20:	d00e      	beq.n	1da40 <ble_ll_adv_update_adv_scan_rsp_data+0x30>
        if (advsm->new_adv_data) {
   1da22:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1da24:	b133      	cbz	r3, 1da34 <ble_ll_adv_update_adv_scan_rsp_data+0x24>
            os_mbuf_free_chain(advsm->adv_data);
   1da26:	6c00      	ldr	r0, [r0, #64]	; 0x40
   1da28:	f7ec fbda 	bl	a1e0 <os_mbuf_free_chain>
            advsm->adv_data = advsm->new_adv_data;
   1da2c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1da2e:	6423      	str	r3, [r4, #64]	; 0x40
            advsm->new_adv_data = NULL;
   1da30:	2300      	movs	r3, #0
   1da32:	6463      	str	r3, [r4, #68]	; 0x44
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   1da34:	f44f 7100 	mov.w	r1, #512	; 0x200
   1da38:	4620      	mov	r0, r4
   1da3a:	f7ff fd72 	bl	1d522 <ble_ll_adv_flags_clear>
}
   1da3e:	bd10      	pop	{r4, pc}
    } else if (advsm->flags & BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA) {
   1da40:	f413 6f80 	tst.w	r3, #1024	; 0x400
   1da44:	d0fb      	beq.n	1da3e <ble_ll_adv_update_adv_scan_rsp_data+0x2e>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   1da46:	6c80      	ldr	r0, [r0, #72]	; 0x48
   1da48:	f7ec fbca 	bl	a1e0 <os_mbuf_free_chain>
        advsm->scan_rsp_data = advsm->new_scan_rsp_data;
   1da4c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1da4e:	64a3      	str	r3, [r4, #72]	; 0x48
        advsm->new_scan_rsp_data = NULL;
   1da50:	2300      	movs	r3, #0
   1da52:	64e3      	str	r3, [r4, #76]	; 0x4c
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1da54:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1da58:	4620      	mov	r0, r4
   1da5a:	f7ff fd62 	bl	1d522 <ble_ll_adv_flags_clear>
   1da5e:	e7ee      	b.n	1da3e <ble_ll_adv_update_adv_scan_rsp_data+0x2e>
   1da60:	4770      	bx	lr
	...

0001da64 <ble_ll_adv_sm_stop>:
{
   1da64:	b538      	push	{r3, r4, r5, lr}
    if (advsm->adv_enabled) {
   1da66:	7803      	ldrb	r3, [r0, #0]
   1da68:	b903      	cbnz	r3, 1da6c <ble_ll_adv_sm_stop+0x8>
}
   1da6a:	bd38      	pop	{r3, r4, r5, pc}
   1da6c:	4604      	mov	r4, r0
        ble_ll_rfmgmt_release();
   1da6e:	f005 ff39 	bl	238e4 <ble_ll_rfmgmt_release>
        ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1da72:	f104 0064 	add.w	r0, r4, #100	; 0x64
   1da76:	f007 fc9b 	bl	253b0 <ble_ll_sched_rmv_elem>
        OS_ENTER_CRITICAL(sr);
   1da7a:	f7ed fd29 	bl	b4d0 <os_arch_save_sr>
   1da7e:	4605      	mov	r5, r0
        if (ble_ll_state_get() == BLE_LL_STATE_ADV) {
   1da80:	f7ff fbf8 	bl	1d274 <ble_ll_state_get>
   1da84:	2801      	cmp	r0, #1
   1da86:	d016      	beq.n	1dab6 <ble_ll_adv_sm_stop+0x52>
        OS_EXIT_CRITICAL(sr);
   1da88:	4628      	mov	r0, r5
   1da8a:	f7ed fd27 	bl	b4dc <os_arch_restore_sr>
    os_eventq_remove(&evq->evq, &ev->ev);
   1da8e:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1da92:	480e      	ldr	r0, [pc, #56]	; (1dacc <ble_ll_adv_sm_stop+0x68>)
   1da94:	f7ec fb01 	bl	a09a <os_eventq_remove>
        if (advsm->conn_comp_ev) {
   1da98:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1da9a:	b118      	cbz	r0, 1daa4 <ble_ll_adv_sm_stop+0x40>
            ble_hci_trans_buf_free(advsm->conn_comp_ev);
   1da9c:	f7f8 fd64 	bl	16568 <ble_hci_trans_buf_free>
            advsm->conn_comp_ev = NULL;
   1daa0:	2300      	movs	r3, #0
   1daa2:	6523      	str	r3, [r4, #80]	; 0x50
        ble_ll_adv_active_chanset_clear(advsm);
   1daa4:	4620      	mov	r0, r4
   1daa6:	f7ff fd86 	bl	1d5b6 <ble_ll_adv_active_chanset_clear>
        advsm->adv_enabled = 0;
   1daaa:	2300      	movs	r3, #0
   1daac:	7023      	strb	r3, [r4, #0]
        ble_ll_adv_update_adv_scan_rsp_data(advsm);
   1daae:	4620      	mov	r0, r4
   1dab0:	f7ff ffae 	bl	1da10 <ble_ll_adv_update_adv_scan_rsp_data>
}
   1dab4:	e7d9      	b.n	1da6a <ble_ll_adv_sm_stop+0x6>
            ble_phy_disable();
   1dab6:	f008 fb9f 	bl	261f8 <ble_phy_disable>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1daba:	2000      	movs	r0, #0
   1dabc:	f7ff fbd4 	bl	1d268 <ble_ll_state_set>
            g_ble_ll_cur_adv_sm = NULL;
   1dac0:	4b03      	ldr	r3, [pc, #12]	; (1dad0 <ble_ll_adv_sm_stop+0x6c>)
   1dac2:	2200      	movs	r2, #0
   1dac4:	601a      	str	r2, [r3, #0]
            ble_ll_scan_chk_resume();
   1dac6:	f006 fe77 	bl	247b8 <ble_ll_scan_chk_resume>
   1daca:	e7dd      	b.n	1da88 <ble_ll_adv_sm_stop+0x24>
   1dacc:	200084e8 	.word	0x200084e8
   1dad0:	200087e0 	.word	0x200087e0

0001dad4 <ble_ll_adv_set_enable>:
{
   1dad4:	b510      	push	{r4, lr}
   1dad6:	460c      	mov	r4, r1
    advsm = ble_ll_adv_sm_find_configured(instance);
   1dad8:	f7ff fd90 	bl	1d5fc <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1dadc:	b168      	cbz	r0, 1dafa <ble_ll_adv_set_enable+0x26>
    if (enable == 1) {
   1dade:	2c01      	cmp	r4, #1
   1dae0:	d004      	beq.n	1daec <ble_ll_adv_set_enable+0x18>
    } else if (enable == 0) {
   1dae2:	b964      	cbnz	r4, 1dafe <ble_ll_adv_set_enable+0x2a>
        ble_ll_adv_sm_stop(advsm);
   1dae4:	f7ff ffbe 	bl	1da64 <ble_ll_adv_sm_stop>
    rc = BLE_ERR_SUCCESS;
   1dae8:	2000      	movs	r0, #0
}
   1daea:	bd10      	pop	{r4, pc}
        if (!advsm->adv_enabled) {
   1daec:	7802      	ldrb	r2, [r0, #0]
   1daee:	b10a      	cbz	r2, 1daf4 <ble_ll_adv_set_enable+0x20>
    rc = BLE_ERR_SUCCESS;
   1daf0:	2000      	movs	r0, #0
   1daf2:	e7fa      	b.n	1daea <ble_ll_adv_set_enable+0x16>
            rc = ble_ll_adv_sm_start(advsm);
   1daf4:	f7ff fe02 	bl	1d6fc <ble_ll_adv_sm_start>
   1daf8:	e7f7      	b.n	1daea <ble_ll_adv_set_enable+0x16>
        return BLE_ERR_UNK_ADV_INDENT;
   1dafa:	2042      	movs	r0, #66	; 0x42
   1dafc:	e7f5      	b.n	1daea <ble_ll_adv_set_enable+0x16>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   1dafe:	2012      	movs	r0, #18
   1db00:	e7f3      	b.n	1daea <ble_ll_adv_set_enable+0x16>

0001db02 <ble_ll_adv_update_data_mbuf>:
{
   1db02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1db06:	4605      	mov	r5, r0
   1db08:	4617      	mov	r7, r2
   1db0a:	4698      	mov	r8, r3
   1db0c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    om = *omp;
   1db10:	6804      	ldr	r4, [r0, #0]
    if (new_data) {
   1db12:	b149      	cbz	r1, 1db28 <ble_ll_adv_update_data_mbuf+0x26>
        if (om) {
   1db14:	b114      	cbz	r4, 1db1c <ble_ll_adv_update_data_mbuf+0x1a>
            os_mbuf_free_chain(om);
   1db16:	4620      	mov	r0, r4
   1db18:	f7ec fb62 	bl	a1e0 <os_mbuf_free_chain>
        om = os_msys_get_pkthdr(datalen, 0);
   1db1c:	2100      	movs	r1, #0
   1db1e:	4630      	mov	r0, r6
   1db20:	f7ed f877 	bl	ac12 <os_msys_get_pkthdr>
        if (!om) {
   1db24:	4604      	mov	r4, r0
   1db26:	b1e8      	cbz	r0, 1db64 <ble_ll_adv_update_data_mbuf+0x62>
    assert(om);
   1db28:	b174      	cbz	r4, 1db48 <ble_ll_adv_update_data_mbuf+0x46>
    if (OS_MBUF_PKTLEN(om) + datalen > maxlen) {
   1db2a:	8a23      	ldrh	r3, [r4, #16]
   1db2c:	4433      	add	r3, r6
   1db2e:	42bb      	cmp	r3, r7
   1db30:	dc14      	bgt.n	1db5c <ble_ll_adv_update_data_mbuf+0x5a>
    ret = os_mbuf_append(om, data, datalen);
   1db32:	4632      	mov	r2, r6
   1db34:	4641      	mov	r1, r8
   1db36:	4620      	mov	r0, r4
   1db38:	f7ec fb64 	bl	a204 <os_mbuf_append>
    if (ret) {
   1db3c:	b190      	cbz	r0, 1db64 <ble_ll_adv_update_data_mbuf+0x62>
        os_mbuf_free_chain(om);
   1db3e:	4620      	mov	r0, r4
   1db40:	f7ec fb4e 	bl	a1e0 <os_mbuf_free_chain>
        om = NULL;
   1db44:	2400      	movs	r4, #0
   1db46:	e00d      	b.n	1db64 <ble_ll_adv_update_data_mbuf+0x62>
    assert(om);
   1db48:	f7ea fb3a 	bl	81c0 <hal_debugger_connected>
   1db4c:	b100      	cbz	r0, 1db50 <ble_ll_adv_update_data_mbuf+0x4e>
   1db4e:	be01      	bkpt	0x0001
   1db50:	2300      	movs	r3, #0
   1db52:	461a      	mov	r2, r3
   1db54:	4619      	mov	r1, r3
   1db56:	4618      	mov	r0, r3
   1db58:	f7eb fec8 	bl	98ec <__assert_func>
        os_mbuf_free_chain(om);
   1db5c:	4620      	mov	r0, r4
   1db5e:	f7ec fb3f 	bl	a1e0 <os_mbuf_free_chain>
        om = NULL;
   1db62:	2400      	movs	r4, #0
    *omp = om;
   1db64:	602c      	str	r4, [r5, #0]
}
   1db66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001db6a <ble_ll_adv_set_scan_rsp_data>:
{
   1db6a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db6c:	b083      	sub	sp, #12
   1db6e:	4607      	mov	r7, r0
   1db70:	460e      	mov	r6, r1
   1db72:	461d      	mov	r5, r3
    advsm = ble_ll_adv_sm_find_configured(instance);
   1db74:	4610      	mov	r0, r2
   1db76:	f7ff fd41 	bl	1d5fc <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1db7a:	2800      	cmp	r0, #0
   1db7c:	d042      	beq.n	1dc04 <ble_ll_adv_set_scan_rsp_data+0x9a>
   1db7e:	4604      	mov	r4, r0
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE)) {
   1db80:	8983      	ldrh	r3, [r0, #12]
   1db82:	f013 0f02 	tst.w	r3, #2
   1db86:	d102      	bne.n	1db8e <ble_ll_adv_set_scan_rsp_data+0x24>
        if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   1db88:	f013 0f10 	tst.w	r3, #16
   1db8c:	d03c      	beq.n	1dc08 <ble_ll_adv_set_scan_rsp_data+0x9e>
    switch (operation) {
   1db8e:	2d03      	cmp	r5, #3
   1db90:	d13c      	bne.n	1dc0c <ble_ll_adv_set_scan_rsp_data+0xa2>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1db92:	f013 0f10 	tst.w	r3, #16
   1db96:	d001      	beq.n	1db9c <ble_ll_adv_set_scan_rsp_data+0x32>
            if (datalen > BLE_SCAN_RSP_LEGACY_DATA_MAX_LEN) {
   1db98:	2e1f      	cmp	r6, #31
   1db9a:	d83a      	bhi.n	1dc12 <ble_ll_adv_set_scan_rsp_data+0xa8>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   1db9c:	2d03      	cmp	r5, #3
   1db9e:	d021      	beq.n	1dbe4 <ble_ll_adv_set_scan_rsp_data+0x7a>
   1dba0:	2d01      	cmp	r5, #1
   1dba2:	d000      	beq.n	1dba6 <ble_ll_adv_set_scan_rsp_data+0x3c>
   1dba4:	2500      	movs	r5, #0
    if (advsm->adv_enabled) {
   1dba6:	7823      	ldrb	r3, [r4, #0]
   1dba8:	b1f3      	cbz	r3, 1dbe8 <ble_ll_adv_set_scan_rsp_data+0x7e>
        if (advsm->new_scan_rsp_data) {
   1dbaa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1dbac:	b14b      	cbz	r3, 1dbc2 <ble_ll_adv_set_scan_rsp_data+0x58>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1dbae:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1dbb2:	4620      	mov	r0, r4
   1dbb4:	f7ff fcb5 	bl	1d522 <ble_ll_adv_flags_clear>
            os_mbuf_free_chain(advsm->new_scan_rsp_data);
   1dbb8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1dbba:	f7ec fb11 	bl	a1e0 <os_mbuf_free_chain>
            advsm->new_scan_rsp_data = NULL;
   1dbbe:	2300      	movs	r3, #0
   1dbc0:	64e3      	str	r3, [r4, #76]	; 0x4c
        ble_ll_adv_update_data_mbuf(&advsm->new_scan_rsp_data, new_data,
   1dbc2:	9600      	str	r6, [sp, #0]
   1dbc4:	463b      	mov	r3, r7
   1dbc6:	221f      	movs	r2, #31
   1dbc8:	4629      	mov	r1, r5
   1dbca:	f104 004c 	add.w	r0, r4, #76	; 0x4c
   1dbce:	f7ff ff98 	bl	1db02 <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_scan_rsp_data) {
   1dbd2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   1dbd4:	b1fb      	cbz	r3, 1dc16 <ble_ll_adv_set_scan_rsp_data+0xac>
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_NEW_SCAN_RSP_DATA);
   1dbd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   1dbda:	4620      	mov	r0, r4
   1dbdc:	f7ff fc96 	bl	1d50c <ble_ll_adv_flags_set>
    return BLE_ERR_SUCCESS;
   1dbe0:	2000      	movs	r0, #0
   1dbe2:	e014      	b.n	1dc0e <ble_ll_adv_set_scan_rsp_data+0xa4>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   1dbe4:	2501      	movs	r5, #1
   1dbe6:	e7de      	b.n	1dba6 <ble_ll_adv_set_scan_rsp_data+0x3c>
        ble_ll_adv_update_data_mbuf(&advsm->scan_rsp_data, new_data,
   1dbe8:	9600      	str	r6, [sp, #0]
   1dbea:	463b      	mov	r3, r7
   1dbec:	221f      	movs	r2, #31
   1dbee:	4629      	mov	r1, r5
   1dbf0:	f104 0048 	add.w	r0, r4, #72	; 0x48
   1dbf4:	f7ff ff85 	bl	1db02 <ble_ll_adv_update_data_mbuf>
        if (!advsm->scan_rsp_data) {
   1dbf8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1dbfa:	b10b      	cbz	r3, 1dc00 <ble_ll_adv_set_scan_rsp_data+0x96>
    return BLE_ERR_SUCCESS;
   1dbfc:	2000      	movs	r0, #0
   1dbfe:	e006      	b.n	1dc0e <ble_ll_adv_set_scan_rsp_data+0xa4>
            return BLE_ERR_MEM_CAPACITY;
   1dc00:	2007      	movs	r0, #7
   1dc02:	e004      	b.n	1dc0e <ble_ll_adv_set_scan_rsp_data+0xa4>
        return BLE_ERR_UNK_ADV_INDENT;
   1dc04:	2042      	movs	r0, #66	; 0x42
   1dc06:	e002      	b.n	1dc0e <ble_ll_adv_set_scan_rsp_data+0xa4>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   1dc08:	2012      	movs	r0, #18
   1dc0a:	e000      	b.n	1dc0e <ble_ll_adv_set_scan_rsp_data+0xa4>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1dc0c:	2012      	movs	r0, #18
}
   1dc0e:	b003      	add	sp, #12
   1dc10:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1dc12:	2012      	movs	r0, #18
   1dc14:	e7fb      	b.n	1dc0e <ble_ll_adv_set_scan_rsp_data+0xa4>
            return BLE_ERR_MEM_CAPACITY;
   1dc16:	2007      	movs	r0, #7
   1dc18:	e7f9      	b.n	1dc0e <ble_ll_adv_set_scan_rsp_data+0xa4>

0001dc1a <ble_ll_adv_set_adv_data>:
{
   1dc1a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dc1c:	b083      	sub	sp, #12
   1dc1e:	4607      	mov	r7, r0
   1dc20:	460e      	mov	r6, r1
   1dc22:	461d      	mov	r5, r3
    advsm = ble_ll_adv_sm_find_configured(instance);
   1dc24:	4610      	mov	r0, r2
   1dc26:	f7ff fce9 	bl	1d5fc <ble_ll_adv_sm_find_configured>
    if (!advsm) {
   1dc2a:	2800      	cmp	r0, #0
   1dc2c:	d04f      	beq.n	1dcce <ble_ll_adv_set_adv_data+0xb4>
   1dc2e:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1dc30:	8983      	ldrh	r3, [r0, #12]
   1dc32:	f013 0f10 	tst.w	r3, #16
   1dc36:	d007      	beq.n	1dc48 <ble_ll_adv_set_adv_data+0x2e>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1dc38:	f013 0f04 	tst.w	r3, #4
   1dc3c:	d007      	beq.n	1dc4e <ble_ll_adv_set_adv_data+0x34>
            if (ble_ll_hci_adv_mode_ext()) {
   1dc3e:	f004 fea4 	bl	2298a <ble_ll_hci_adv_mode_ext>
   1dc42:	b120      	cbz	r0, 1dc4e <ble_ll_adv_set_adv_data+0x34>
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1dc44:	2012      	movs	r0, #18
   1dc46:	e047      	b.n	1dcd8 <ble_ll_adv_set_adv_data+0xbe>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   1dc48:	f013 0f02 	tst.w	r3, #2
   1dc4c:	d141      	bne.n	1dcd2 <ble_ll_adv_set_adv_data+0xb8>
    switch (operation) {
   1dc4e:	2d03      	cmp	r5, #3
   1dc50:	d141      	bne.n	1dcd6 <ble_ll_adv_set_adv_data+0xbc>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) {
   1dc52:	89a3      	ldrh	r3, [r4, #12]
   1dc54:	f013 0f10 	tst.w	r3, #16
   1dc58:	d001      	beq.n	1dc5e <ble_ll_adv_set_adv_data+0x44>
            if (datalen > BLE_ADV_LEGACY_DATA_MAX_LEN) {
   1dc5a:	2e1f      	cmp	r6, #31
   1dc5c:	d83e      	bhi.n	1dcdc <ble_ll_adv_set_adv_data+0xc2>
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_ADV_DATA_INCOMPLETE);
   1dc5e:	2140      	movs	r1, #64	; 0x40
   1dc60:	4620      	mov	r0, r4
   1dc62:	f7ff fc5e 	bl	1d522 <ble_ll_adv_flags_clear>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   1dc66:	2d03      	cmp	r5, #3
   1dc68:	d021      	beq.n	1dcae <ble_ll_adv_set_adv_data+0x94>
   1dc6a:	2d01      	cmp	r5, #1
   1dc6c:	d000      	beq.n	1dc70 <ble_ll_adv_set_adv_data+0x56>
   1dc6e:	2500      	movs	r5, #0
    if (advsm->adv_enabled) {
   1dc70:	7823      	ldrb	r3, [r4, #0]
   1dc72:	b1f3      	cbz	r3, 1dcb2 <ble_ll_adv_set_adv_data+0x98>
        if (advsm->new_adv_data) {
   1dc74:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1dc76:	b14b      	cbz	r3, 1dc8c <ble_ll_adv_set_adv_data+0x72>
            ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   1dc78:	f44f 7100 	mov.w	r1, #512	; 0x200
   1dc7c:	4620      	mov	r0, r4
   1dc7e:	f7ff fc50 	bl	1d522 <ble_ll_adv_flags_clear>
            os_mbuf_free_chain(advsm->new_adv_data);
   1dc82:	6c60      	ldr	r0, [r4, #68]	; 0x44
   1dc84:	f7ec faac 	bl	a1e0 <os_mbuf_free_chain>
            advsm->new_adv_data = NULL;
   1dc88:	2300      	movs	r3, #0
   1dc8a:	6463      	str	r3, [r4, #68]	; 0x44
        ble_ll_adv_update_data_mbuf(&advsm->new_adv_data, new_data,
   1dc8c:	9600      	str	r6, [sp, #0]
   1dc8e:	463b      	mov	r3, r7
   1dc90:	221f      	movs	r2, #31
   1dc92:	4629      	mov	r1, r5
   1dc94:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1dc98:	f7ff ff33 	bl	1db02 <ble_ll_adv_update_data_mbuf>
        if (!advsm->new_adv_data) {
   1dc9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1dc9e:	b1fb      	cbz	r3, 1dce0 <ble_ll_adv_set_adv_data+0xc6>
        ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_NEW_ADV_DATA);
   1dca0:	f44f 7100 	mov.w	r1, #512	; 0x200
   1dca4:	4620      	mov	r0, r4
   1dca6:	f7ff fc31 	bl	1d50c <ble_ll_adv_flags_set>
    return BLE_ERR_SUCCESS;
   1dcaa:	2000      	movs	r0, #0
   1dcac:	e014      	b.n	1dcd8 <ble_ll_adv_set_adv_data+0xbe>
    new_data = (operation == BLE_HCI_LE_SET_DATA_OPER_COMPLETE) ||
   1dcae:	2501      	movs	r5, #1
   1dcb0:	e7de      	b.n	1dc70 <ble_ll_adv_set_adv_data+0x56>
        ble_ll_adv_update_data_mbuf(&advsm->adv_data, new_data,
   1dcb2:	9600      	str	r6, [sp, #0]
   1dcb4:	463b      	mov	r3, r7
   1dcb6:	221f      	movs	r2, #31
   1dcb8:	4629      	mov	r1, r5
   1dcba:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1dcbe:	f7ff ff20 	bl	1db02 <ble_ll_adv_update_data_mbuf>
        if (!advsm->adv_data) {
   1dcc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
   1dcc4:	b10b      	cbz	r3, 1dcca <ble_ll_adv_set_adv_data+0xb0>
    return BLE_ERR_SUCCESS;
   1dcc6:	2000      	movs	r0, #0
   1dcc8:	e006      	b.n	1dcd8 <ble_ll_adv_set_adv_data+0xbe>
            return BLE_ERR_MEM_CAPACITY;
   1dcca:	2007      	movs	r0, #7
   1dccc:	e004      	b.n	1dcd8 <ble_ll_adv_set_adv_data+0xbe>
        return BLE_ERR_UNK_ADV_INDENT;
   1dcce:	2042      	movs	r0, #66	; 0x42
   1dcd0:	e002      	b.n	1dcd8 <ble_ll_adv_set_adv_data+0xbe>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   1dcd2:	2012      	movs	r0, #18
   1dcd4:	e000      	b.n	1dcd8 <ble_ll_adv_set_adv_data+0xbe>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1dcd6:	2012      	movs	r0, #18
}
   1dcd8:	b003      	add	sp, #12
   1dcda:	bdf0      	pop	{r4, r5, r6, r7, pc}
                return BLE_ERR_INV_HCI_CMD_PARMS;
   1dcdc:	2012      	movs	r0, #18
   1dcde:	e7fb      	b.n	1dcd8 <ble_ll_adv_set_adv_data+0xbe>
            return BLE_ERR_MEM_CAPACITY;
   1dce0:	2007      	movs	r0, #7
   1dce2:	e7f9      	b.n	1dcd8 <ble_ll_adv_set_adv_data+0xbe>

0001dce4 <ble_ll_adv_already_connected>:
{
   1dce4:	b570      	push	{r4, r5, r6, lr}
   1dce6:	4605      	mov	r5, r0
   1dce8:	460e      	mov	r6, r1
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   1dcea:	4b10      	ldr	r3, [pc, #64]	; (1dd2c <ble_ll_adv_already_connected+0x48>)
   1dcec:	681c      	ldr	r4, [r3, #0]
   1dcee:	e006      	b.n	1dcfe <ble_ll_adv_already_connected+0x1a>
                if (connsm->peer_addr_type & 1) {
   1dcf0:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
   1dcf4:	f013 0f01 	tst.w	r3, #1
   1dcf8:	d115      	bne.n	1dd26 <ble_ll_adv_already_connected+0x42>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   1dcfa:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   1dcfe:	b184      	cbz	r4, 1dd22 <ble_ll_adv_already_connected+0x3e>
        if (!memcmp(&connsm->peer_addr, addr, BLE_DEV_ADDR_LEN)) {
   1dd00:	2206      	movs	r2, #6
   1dd02:	4629      	mov	r1, r5
   1dd04:	f104 0093 	add.w	r0, r4, #147	; 0x93
   1dd08:	f7ed fd2c 	bl	b764 <memcmp>
   1dd0c:	2800      	cmp	r0, #0
   1dd0e:	d1f4      	bne.n	1dcfa <ble_ll_adv_already_connected+0x16>
            if (addr_type == BLE_ADDR_RANDOM) {
   1dd10:	2e01      	cmp	r6, #1
   1dd12:	d0ed      	beq.n	1dcf0 <ble_ll_adv_already_connected+0xc>
                if ((connsm->peer_addr_type & 1) == 0) {
   1dd14:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
   1dd18:	f013 0f01 	tst.w	r3, #1
   1dd1c:	d1ed      	bne.n	1dcfa <ble_ll_adv_already_connected+0x16>
                    return 1;
   1dd1e:	2001      	movs	r0, #1
   1dd20:	e000      	b.n	1dd24 <ble_ll_adv_already_connected+0x40>
    return 0;
   1dd22:	2000      	movs	r0, #0
}
   1dd24:	bd70      	pop	{r4, r5, r6, pc}
                    return 1;
   1dd26:	2001      	movs	r0, #1
   1dd28:	e7fc      	b.n	1dd24 <ble_ll_adv_already_connected+0x40>
   1dd2a:	bf00      	nop
   1dd2c:	200087e4 	.word	0x200087e4

0001dd30 <ble_ll_adv_rx_req>:
{
   1dd30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dd34:	4607      	mov	r7, r0
   1dd36:	460e      	mov	r6, r1
    advsm = g_ble_ll_cur_adv_sm;
   1dd38:	4b4b      	ldr	r3, [pc, #300]	; (1de68 <ble_ll_adv_rx_req+0x138>)
   1dd3a:	f8d3 8000 	ldr.w	r8, [r3]
    rxbuf = rxpdu->om_data;
   1dd3e:	680d      	ldr	r5, [r1, #0]
    if (memcmp(advsm->adva, adva, BLE_DEV_ADDR_LEN)) {
   1dd40:	2206      	movs	r2, #6
   1dd42:	f105 0108 	add.w	r1, r5, #8
   1dd46:	f108 0028 	add.w	r0, r8, #40	; 0x28
   1dd4a:	f7ed fd0b 	bl	b764 <memcmp>
   1dd4e:	2800      	cmp	r0, #0
   1dd50:	d17e      	bne.n	1de50 <ble_ll_adv_rx_req+0x120>
   1dd52:	4682      	mov	sl, r0
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   1dd54:	2f03      	cmp	r7, #3
   1dd56:	d022      	beq.n	1dd9e <ble_ll_adv_rx_req+0x6e>
        chk_wl = advsm->adv_filter_policy & 2;
   1dd58:	f898 4003 	ldrb.w	r4, [r8, #3]
   1dd5c:	f004 0402 	and.w	r4, r4, #2
    if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   1dd60:	782b      	ldrb	r3, [r5, #0]
   1dd62:	f013 0f40 	tst.w	r3, #64	; 0x40
   1dd66:	d01f      	beq.n	1dda8 <ble_ll_adv_rx_req+0x78>
        txadd = BLE_ADDR_RANDOM;
   1dd68:	f04f 0901 	mov.w	r9, #1
    peer = rxbuf + BLE_LL_PDU_HDR_LEN;
   1dd6c:	3502      	adds	r5, #2
    if (ble_ll_resolv_enabled()) {
   1dd6e:	f005 fc7b 	bl	23668 <ble_ll_resolv_enabled>
   1dd72:	b9e0      	cbnz	r0, 1ddae <ble_ll_adv_rx_req+0x7e>
    if (chk_wl && !ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   1dd74:	2c00      	cmp	r4, #0
   1dd76:	d150      	bne.n	1de1a <ble_ll_adv_rx_req+0xea>
    ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_DEVMATCH;
   1dd78:	8b33      	ldrh	r3, [r6, #24]
   1dd7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1dd7e:	8333      	strh	r3, [r6, #24]
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   1dd80:	2f03      	cmp	r7, #3
   1dd82:	d054      	beq.n	1de2e <ble_ll_adv_rx_req+0xfe>
    } else if (pdu_type == BLE_ADV_PDU_TYPE_AUX_CONNECT_REQ) {
   1dd84:	2f05      	cmp	r7, #5
   1dd86:	d169      	bne.n	1de5c <ble_ll_adv_rx_req+0x12c>
        if (ble_ll_adv_already_connected(peer, peer_addr_type)) {
   1dd88:	4649      	mov	r1, r9
   1dd8a:	4628      	mov	r0, r5
   1dd8c:	f7ff ffaa 	bl	1dce4 <ble_ll_adv_already_connected>
   1dd90:	2800      	cmp	r0, #0
   1dd92:	d166      	bne.n	1de62 <ble_ll_adv_rx_req+0x132>
    rc = -1;
   1dd94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
   1dd98:	4618      	mov	r0, r3
   1dd9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        chk_wl = advsm->adv_filter_policy & 1;
   1dd9e:	f898 4003 	ldrb.w	r4, [r8, #3]
   1dda2:	f004 0401 	and.w	r4, r4, #1
   1dda6:	e7db      	b.n	1dd60 <ble_ll_adv_rx_req+0x30>
        txadd = BLE_ADDR_PUBLIC;
   1dda8:	f04f 0900 	mov.w	r9, #0
   1ddac:	e7de      	b.n	1dd6c <ble_ll_adv_rx_req+0x3c>
        if (ble_ll_is_rpa(peer, txadd)) {
   1ddae:	4649      	mov	r1, r9
   1ddb0:	4628      	mov	r0, r5
   1ddb2:	f7ff f88f 	bl	1ced4 <ble_ll_is_rpa>
   1ddb6:	4683      	mov	fp, r0
   1ddb8:	b300      	cbz	r0, 1ddfc <ble_ll_adv_rx_req+0xcc>
            advsm->adv_rpa_index = ble_hw_resolv_list_match();
   1ddba:	f007 fe65 	bl	25a88 <ble_hw_resolv_list_match>
   1ddbe:	b240      	sxtb	r0, r0
   1ddc0:	f888 0008 	strb.w	r0, [r8, #8]
            if (advsm->adv_rpa_index >= 0) {
   1ddc4:	2800      	cmp	r0, #0
   1ddc6:	db14      	blt.n	1ddf2 <ble_ll_adv_rx_req+0xc2>
                ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_RESOLVED;
   1ddc8:	8b33      	ldrh	r3, [r6, #24]
   1ddca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1ddce:	8333      	strh	r3, [r6, #24]
                rl = &g_ble_ll_resolv_list[advsm->adv_rpa_index];
   1ddd0:	f998 2008 	ldrsb.w	r2, [r8, #8]
                if (chk_wl) {
   1ddd4:	2c00      	cmp	r4, #0
   1ddd6:	d0cd      	beq.n	1dd74 <ble_ll_adv_rx_req+0x44>
                    peer = rl->rl_identity_addr;
   1ddd8:	2336      	movs	r3, #54	; 0x36
   1ddda:	fb03 f302 	mul.w	r3, r3, r2
   1ddde:	f103 0520 	add.w	r5, r3, #32
   1dde2:	4a22      	ldr	r2, [pc, #136]	; (1de6c <ble_ll_adv_rx_req+0x13c>)
   1dde4:	4415      	add	r5, r2
   1dde6:	3504      	adds	r5, #4
                    peer_addr_type = rl->rl_addr_type;
   1dde8:	f812 9003 	ldrb.w	r9, [r2, r3]
                    resolved = 1;
   1ddec:	f04f 0a01 	mov.w	sl, #1
   1ddf0:	e7c0      	b.n	1dd74 <ble_ll_adv_rx_req+0x44>
                if (chk_wl) {
   1ddf2:	2c00      	cmp	r4, #0
   1ddf4:	d0be      	beq.n	1dd74 <ble_ll_adv_rx_req+0x44>
                    return -1;
   1ddf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ddfa:	e7cd      	b.n	1dd98 <ble_ll_adv_rx_req+0x68>
            rl = ble_ll_resolv_list_find(peer, peer_addr_type);
   1ddfc:	4649      	mov	r1, r9
   1ddfe:	4628      	mov	r0, r5
   1de00:	f005 f9dc 	bl	231bc <ble_ll_resolv_list_find>
            if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1de04:	b128      	cbz	r0, 1de12 <ble_ll_adv_rx_req+0xe2>
   1de06:	7842      	ldrb	r2, [r0, #1]
   1de08:	b92a      	cbnz	r2, 1de16 <ble_ll_adv_rx_req+0xe6>
                rl->rl_has_peer) {
   1de0a:	78c3      	ldrb	r3, [r0, #3]
            if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1de0c:	bb1b      	cbnz	r3, 1de56 <ble_ll_adv_rx_req+0x126>
    resolved = 0;
   1de0e:	46da      	mov	sl, fp
   1de10:	e7b0      	b.n	1dd74 <ble_ll_adv_rx_req+0x44>
   1de12:	46da      	mov	sl, fp
   1de14:	e7ae      	b.n	1dd74 <ble_ll_adv_rx_req+0x44>
   1de16:	46da      	mov	sl, fp
   1de18:	e7ac      	b.n	1dd74 <ble_ll_adv_rx_req+0x44>
    if (chk_wl && !ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   1de1a:	4652      	mov	r2, sl
   1de1c:	4649      	mov	r1, r9
   1de1e:	4628      	mov	r0, r5
   1de20:	f007 fc34 	bl	2568c <ble_ll_whitelist_match>
   1de24:	2800      	cmp	r0, #0
   1de26:	d1a7      	bne.n	1dd78 <ble_ll_adv_rx_req+0x48>
        return -1;
   1de28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de2c:	e7b4      	b.n	1dd98 <ble_ll_adv_rx_req+0x68>
        ble_phy_set_txend_cb(ble_ll_adv_tx_done, advsm);
   1de2e:	4641      	mov	r1, r8
   1de30:	480f      	ldr	r0, [pc, #60]	; (1de70 <ble_ll_adv_rx_req+0x140>)
   1de32:	f008 f979 	bl	26128 <ble_phy_set_txend_cb>
        rc = ble_phy_tx(ble_ll_adv_scan_rsp_legacy_pdu_make, advsm,
   1de36:	2200      	movs	r2, #0
   1de38:	4641      	mov	r1, r8
   1de3a:	480e      	ldr	r0, [pc, #56]	; (1de74 <ble_ll_adv_rx_req+0x144>)
   1de3c:	f008 fbce 	bl	265dc <ble_phy_tx>
        if (!rc) {
   1de40:	4603      	mov	r3, r0
   1de42:	2800      	cmp	r0, #0
   1de44:	d1a8      	bne.n	1dd98 <ble_ll_adv_rx_req+0x68>
            ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_SCAN_RSP_TXD;
   1de46:	8b32      	ldrh	r2, [r6, #24]
   1de48:	f042 0210 	orr.w	r2, r2, #16
   1de4c:	8332      	strh	r2, [r6, #24]
   1de4e:	e7a3      	b.n	1dd98 <ble_ll_adv_rx_req+0x68>
        return -1;
   1de50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de54:	e7a0      	b.n	1dd98 <ble_ll_adv_rx_req+0x68>
                return -1;
   1de56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de5a:	e79d      	b.n	1dd98 <ble_ll_adv_rx_req+0x68>
    rc = -1;
   1de5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de60:	e79a      	b.n	1dd98 <ble_ll_adv_rx_req+0x68>
            return -1;
   1de62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1de66:	e797      	b.n	1dd98 <ble_ll_adv_rx_req+0x68>
   1de68:	200087e0 	.word	0x200087e0
   1de6c:	20008a40 	.word	0x20008a40
   1de70:	0001d5cd 	.word	0x0001d5cd
   1de74:	0001d993 	.word	0x0001d993

0001de78 <ble_ll_adv_conn_req_rxd>:
{
   1de78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY)) {
   1de7c:	8993      	ldrh	r3, [r2, #12]
   1de7e:	f013 0f10 	tst.w	r3, #16
   1de82:	d103      	bne.n	1de8c <ble_ll_adv_conn_req_rxd+0x14>
        if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   1de84:	8954      	ldrh	r4, [r2, #10]
   1de86:	f014 0f08 	tst.w	r4, #8
   1de8a:	d069      	beq.n	1df60 <ble_ll_adv_conn_req_rxd+0xe8>
    resolved = BLE_MBUF_HDR_RESOLVED(hdr);
   1de8c:	880c      	ldrh	r4, [r1, #0]
   1de8e:	f404 6680 	and.w	r6, r4, #1024	; 0x400
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   1de92:	1c87      	adds	r7, r0, #2
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_DEVMATCH) {
   1de94:	f014 0f40 	tst.w	r4, #64	; 0x40
   1de98:	d064      	beq.n	1df64 <ble_ll_adv_conn_req_rxd+0xec>
        if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   1de9a:	7804      	ldrb	r4, [r0, #0]
   1de9c:	f014 0f40 	tst.w	r4, #64	; 0x40
   1dea0:	d019      	beq.n	1ded6 <ble_ll_adv_conn_req_rxd+0x5e>
            addr_type = BLE_ADDR_RANDOM;
   1dea2:	f04f 0801 	mov.w	r8, #1
   1dea6:	4614      	mov	r4, r2
   1dea8:	4689      	mov	r9, r1
   1deaa:	4605      	mov	r5, r0
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_DIRECTED) {
   1deac:	f013 0f04 	tst.w	r3, #4
   1deb0:	d01d      	beq.n	1deee <ble_ll_adv_conn_req_rxd+0x76>
            if (resolved) {
   1deb2:	b19e      	cbz	r6, 1dedc <ble_ll_adv_conn_req_rxd+0x64>
                ident_addr = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr;
   1deb4:	f992 2008 	ldrsb.w	r2, [r2, #8]
   1deb8:	2336      	movs	r3, #54	; 0x36
   1deba:	fb03 f302 	mul.w	r3, r3, r2
   1debe:	f103 0120 	add.w	r1, r3, #32
   1dec2:	4a2b      	ldr	r2, [pc, #172]	; (1df70 <ble_ll_adv_conn_req_rxd+0xf8>)
   1dec4:	4411      	add	r1, r2
   1dec6:	3104      	adds	r1, #4
                addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   1dec8:	f812 8003 	ldrb.w	r8, [r2, r3]
            if ((addr_type != advsm->peer_addr_type) ||
   1decc:	7963      	ldrb	r3, [r4, #5]
   1dece:	4543      	cmp	r3, r8
   1ded0:	d006      	beq.n	1dee0 <ble_ll_adv_conn_req_rxd+0x68>
   1ded2:	2500      	movs	r5, #0
   1ded4:	e047      	b.n	1df66 <ble_ll_adv_conn_req_rxd+0xee>
            addr_type = BLE_ADDR_PUBLIC;
   1ded6:	f04f 0800 	mov.w	r8, #0
   1deda:	e7e4      	b.n	1dea6 <ble_ll_adv_conn_req_rxd+0x2e>
            ident_addr = inita;
   1dedc:	4639      	mov	r1, r7
   1dede:	e7f5      	b.n	1decc <ble_ll_adv_conn_req_rxd+0x54>
                memcmp(advsm->peer_addr, ident_addr, BLE_DEV_ADDR_LEN)) {
   1dee0:	2206      	movs	r2, #6
   1dee2:	f104 0034 	add.w	r0, r4, #52	; 0x34
   1dee6:	f7ed fc3d 	bl	b764 <memcmp>
            if ((addr_type != advsm->peer_addr_type) ||
   1deea:	2800      	cmp	r0, #0
   1deec:	d13e      	bne.n	1df6c <ble_ll_adv_conn_req_rxd+0xf4>
        if (resolved) {
   1deee:	b9a6      	cbnz	r6, 1df1a <ble_ll_adv_conn_req_rxd+0xa2>
                          !(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY));
   1def0:	89a3      	ldrh	r3, [r4, #12]
        valid = ble_ll_conn_slave_start(rxbuf, addr_type, hdr,
   1def2:	091b      	lsrs	r3, r3, #4
   1def4:	f083 0301 	eor.w	r3, r3, #1
   1def8:	f003 0301 	and.w	r3, r3, #1
   1defc:	464a      	mov	r2, r9
   1defe:	4641      	mov	r1, r8
   1df00:	4628      	mov	r0, r5
   1df02:	f002 f9c5 	bl	20290 <ble_ll_conn_slave_start>
        if (valid) {
   1df06:	4605      	mov	r5, r0
   1df08:	b368      	cbz	r0, 1df66 <ble_ll_adv_conn_req_rxd+0xee>
            if (!(advsm->flags & BLE_LL_ADV_SM_FLAG_CONN_RSP_TXD)) {
   1df0a:	8963      	ldrh	r3, [r4, #10]
   1df0c:	f013 0f08 	tst.w	r3, #8
   1df10:	d129      	bne.n	1df66 <ble_ll_adv_conn_req_rxd+0xee>
                ble_ll_adv_sm_stop(advsm);
   1df12:	4620      	mov	r0, r4
   1df14:	f7ff fda6 	bl	1da64 <ble_ll_adv_sm_stop>
   1df18:	e025      	b.n	1df66 <ble_ll_adv_conn_req_rxd+0xee>
            memcpy(advsm->adv_rpa, inita, BLE_DEV_ADDR_LEN);
   1df1a:	683b      	ldr	r3, [r7, #0]
   1df1c:	f8c4 302e 	str.w	r3, [r4, #46]	; 0x2e
   1df20:	88bb      	ldrh	r3, [r7, #4]
   1df22:	8663      	strh	r3, [r4, #50]	; 0x32
            ble_ll_resolv_set_peer_rpa(advsm->adv_rpa_index, inita);
   1df24:	4639      	mov	r1, r7
   1df26:	f994 0008 	ldrsb.w	r0, [r4, #8]
   1df2a:	f005 fb25 	bl	23578 <ble_ll_resolv_set_peer_rpa>
                   g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_identity_addr,
   1df2e:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1df32:	2236      	movs	r2, #54	; 0x36
   1df34:	fb02 f303 	mul.w	r3, r2, r3
   1df38:	3320      	adds	r3, #32
   1df3a:	490d      	ldr	r1, [pc, #52]	; (1df70 <ble_ll_adv_conn_req_rxd+0xf8>)
   1df3c:	440b      	add	r3, r1
            memcpy(inita,
   1df3e:	f853 0f04 	ldr.w	r0, [r3, #4]!
   1df42:	f8c5 0002 	str.w	r0, [r5, #2]
   1df46:	889b      	ldrh	r3, [r3, #4]
   1df48:	80bb      	strh	r3, [r7, #4]
            addr_type = g_ble_ll_resolv_list[advsm->adv_rpa_index].rl_addr_type;
   1df4a:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1df4e:	fb02 f203 	mul.w	r2, r2, r3
   1df52:	f811 8002 	ldrb.w	r8, [r1, r2]
            addr_type += 2;
   1df56:	f108 0802 	add.w	r8, r8, #2
   1df5a:	fa5f f888 	uxtb.w	r8, r8
   1df5e:	e7c7      	b.n	1def0 <ble_ll_adv_conn_req_rxd+0x78>
            return 0;
   1df60:	2500      	movs	r5, #0
   1df62:	e000      	b.n	1df66 <ble_ll_adv_conn_req_rxd+0xee>
    valid = 0;
   1df64:	2500      	movs	r5, #0
}
   1df66:	4628      	mov	r0, r5
   1df68:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1df6c:	2500      	movs	r5, #0
   1df6e:	e7fa      	b.n	1df66 <ble_ll_adv_conn_req_rxd+0xee>
   1df70:	20008a40 	.word	0x20008a40

0001df74 <ble_ll_adv_sm_stop_timeout>:
{
   1df74:	b510      	push	{r4, lr}
   1df76:	4604      	mov	r4, r0
    if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1df78:	8983      	ldrh	r3, [r0, #12]
   1df7a:	f013 0f08 	tst.w	r3, #8
   1df7e:	d103      	bne.n	1df88 <ble_ll_adv_sm_stop_timeout+0x14>
    ble_ll_adv_sm_stop(advsm);
   1df80:	4620      	mov	r0, r4
   1df82:	f7ff fd6f 	bl	1da64 <ble_ll_adv_sm_stop>
}
   1df86:	bd10      	pop	{r4, pc}
        ble_ll_conn_comp_event_send(NULL, BLE_ERR_DIR_ADV_TMO,
   1df88:	4603      	mov	r3, r0
   1df8a:	6d02      	ldr	r2, [r0, #80]	; 0x50
   1df8c:	213c      	movs	r1, #60	; 0x3c
   1df8e:	2000      	movs	r0, #0
   1df90:	f002 fb76 	bl	20680 <ble_ll_conn_comp_event_send>
        advsm->conn_comp_ev = NULL;
   1df94:	2300      	movs	r3, #0
   1df96:	6523      	str	r3, [r4, #80]	; 0x50
   1df98:	e7f2      	b.n	1df80 <ble_ll_adv_sm_stop_timeout+0xc>
	...

0001df9c <ble_ll_adv_reschedule_event>:

static void
ble_ll_adv_reschedule_event(struct ble_ll_adv_sm *advsm)
{
   1df9c:	b510      	push	{r4, lr}
   1df9e:	b082      	sub	sp, #8
    int rc;
    uint32_t start_time;
    uint32_t max_delay_ticks;

    assert(advsm->adv_enabled);
   1dfa0:	7803      	ldrb	r3, [r0, #0]
   1dfa2:	b1b3      	cbz	r3, 1dfd2 <ble_ll_adv_reschedule_event+0x36>
   1dfa4:	4604      	mov	r4, r0

    if (!advsm->adv_sch.enqueued) {
   1dfa6:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
   1dfaa:	b983      	cbnz	r3, 1dfce <ble_ll_adv_reschedule_event+0x32>
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) {
   1dfac:	8983      	ldrh	r3, [r0, #12]
   1dfae:	f013 0f08 	tst.w	r3, #8
   1dfb2:	d018      	beq.n	1dfe6 <ble_ll_adv_reschedule_event+0x4a>
            max_delay_ticks = 0;
   1dfb4:	2200      	movs	r2, #0
        } else {
            max_delay_ticks =
                    os_cputime_usecs_to_ticks(BLE_LL_ADV_DELAY_MS_MAX * 1000);
        }

        rc = ble_ll_sched_adv_reschedule(&advsm->adv_sch, &start_time,
   1dfb6:	a901      	add	r1, sp, #4
   1dfb8:	f104 0064 	add.w	r0, r4, #100	; 0x64
   1dfbc:	f007 f902 	bl	251c4 <ble_ll_sched_adv_reschedule>
                                         max_delay_ticks);
        if (rc) {
   1dfc0:	b9b8      	cbnz	r0, 1dff2 <ble_ll_adv_reschedule_event+0x56>
            ble_ll_adv_drop_event(advsm);
            return;
        }

        start_time += g_ble_ll_sched_offset_ticks;
   1dfc2:	4b0e      	ldr	r3, [pc, #56]	; (1dffc <ble_ll_adv_reschedule_event+0x60>)
   1dfc4:	781b      	ldrb	r3, [r3, #0]
   1dfc6:	9a01      	ldr	r2, [sp, #4]
   1dfc8:	4413      	add	r3, r2
        advsm->adv_event_start_time = start_time;
   1dfca:	61a3      	str	r3, [r4, #24]
        advsm->adv_pdu_start_time = start_time;
   1dfcc:	61e3      	str	r3, [r4, #28]
    if (!(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY) &&
                                                        !advsm->aux_active) {
        ble_ll_adv_aux_schedule(advsm);
    }
#endif
}
   1dfce:	b002      	add	sp, #8
   1dfd0:	bd10      	pop	{r4, pc}
    assert(advsm->adv_enabled);
   1dfd2:	f7ea f8f5 	bl	81c0 <hal_debugger_connected>
   1dfd6:	b100      	cbz	r0, 1dfda <ble_ll_adv_reschedule_event+0x3e>
   1dfd8:	be01      	bkpt	0x0001
   1dfda:	2300      	movs	r3, #0
   1dfdc:	461a      	mov	r2, r3
   1dfde:	4619      	mov	r1, r3
   1dfe0:	4618      	mov	r0, r3
   1dfe2:	f7eb fc83 	bl	98ec <__assert_func>
            max_delay_ticks =
   1dfe6:	f242 7010 	movw	r0, #10000	; 0x2710
   1dfea:	f7fd fec7 	bl	1bd7c <os_cputime_usecs_to_ticks>
   1dfee:	4602      	mov	r2, r0
   1dff0:	e7e1      	b.n	1dfb6 <ble_ll_adv_reschedule_event+0x1a>
            ble_ll_adv_drop_event(advsm);
   1dff2:	4620      	mov	r0, r4
   1dff4:	f7ff fcfa 	bl	1d9ec <ble_ll_adv_drop_event>
   1dff8:	e7e9      	b.n	1dfce <ble_ll_adv_reschedule_event+0x32>
   1dffa:	bf00      	nop
   1dffc:	20008cf0 	.word	0x20008cf0

0001e000 <ble_ll_adv_sm_init>:
    return 0;
}

static void
ble_ll_adv_sm_init(struct ble_ll_adv_sm *advsm)
{
   1e000:	b510      	push	{r4, lr}
   1e002:	4604      	mov	r4, r0
    memset(advsm, 0, sizeof(struct ble_ll_adv_sm));
   1e004:	2280      	movs	r2, #128	; 0x80
   1e006:	2100      	movs	r1, #0
   1e008:	f7ed fbf9 	bl	b7fe <memset>

    advsm->adv_itvl_min = BLE_HCI_ADV_ITVL_DEF;
   1e00c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   1e010:	81e3      	strh	r3, [r4, #14]
    advsm->adv_itvl_max = BLE_HCI_ADV_ITVL_DEF;
   1e012:	8223      	strh	r3, [r4, #16]
    advsm->adv_chanmask = BLE_HCI_ADV_CHANMASK_DEF;
   1e014:	2307      	movs	r3, #7
   1e016:	70a3      	strb	r3, [r4, #2]
    memset(ev, 0, sizeof(*ev));
   1e018:	2300      	movs	r3, #0
   1e01a:	6563      	str	r3, [r4, #84]	; 0x54
   1e01c:	6623      	str	r3, [r4, #96]	; 0x60
    ev->ev.ev_queued = 0;
   1e01e:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
    ev->ev.ev_cb = (os_event_fn *)fn;
   1e022:	4b03      	ldr	r3, [pc, #12]	; (1e030 <ble_ll_adv_sm_init+0x30>)
   1e024:	65a3      	str	r3, [r4, #88]	; 0x58
    ev->ev.ev_arg = arg;
   1e026:	65e4      	str	r4, [r4, #92]	; 0x5c
#endif
#endif

    /* Configure instances to be legacy on start */
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE;
    advsm->props |= BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY;
   1e028:	2312      	movs	r3, #18
   1e02a:	81a3      	strh	r3, [r4, #12]
}
   1e02c:	bd10      	pop	{r4, pc}
   1e02e:	bf00      	nop
   1e030:	0001e16d 	.word	0x0001e16d

0001e034 <ble_ll_adv_chk_rpa_timeout>:
    if (advsm->own_addr_type < BLE_HCI_ADV_OWN_ADDR_PRIV_PUB) {
   1e034:	7903      	ldrb	r3, [r0, #4]
   1e036:	2b01      	cmp	r3, #1
   1e038:	d903      	bls.n	1e042 <ble_ll_adv_chk_rpa_timeout+0xe>
    if (advsm->flags & BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO) {
   1e03a:	8943      	ldrh	r3, [r0, #10]
   1e03c:	f413 7f80 	tst.w	r3, #256	; 0x100
   1e040:	d100      	bne.n	1e044 <ble_ll_adv_chk_rpa_timeout+0x10>
   1e042:	4770      	bx	lr
{
   1e044:	b510      	push	{r4, lr}
   1e046:	4604      	mov	r4, r0
        ble_ll_adv_rpa_update(advsm);
   1e048:	f7ff fa77 	bl	1d53a <ble_ll_adv_rpa_update>
        ble_ll_adv_flags_clear(advsm, BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO);
   1e04c:	f44f 7180 	mov.w	r1, #256	; 0x100
   1e050:	4620      	mov	r0, r4
   1e052:	f7ff fa66 	bl	1d522 <ble_ll_adv_flags_clear>
}
   1e056:	bd10      	pop	{r4, pc}

0001e058 <ble_ll_adv_done>:
{
   1e058:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert(advsm->adv_enabled);
   1e05c:	7803      	ldrb	r3, [r0, #0]
   1e05e:	2b00      	cmp	r3, #0
   1e060:	d043      	beq.n	1e0ea <ble_ll_adv_done+0x92>
   1e062:	4604      	mov	r4, r0
    ble_ll_rfmgmt_release();
   1e064:	f005 fc3e 	bl	238e4 <ble_ll_rfmgmt_release>
    ble_ll_adv_update_adv_scan_rsp_data(advsm);
   1e068:	4620      	mov	r0, r4
   1e06a:	f7ff fcd1 	bl	1da10 <ble_ll_adv_update_adv_scan_rsp_data>
    ble_ll_sched_rmv_elem(&advsm->adv_sch);
   1e06e:	f104 0564 	add.w	r5, r4, #100	; 0x64
   1e072:	4628      	mov	r0, r5
   1e074:	f007 f99c 	bl	253b0 <ble_ll_sched_rmv_elem>
    os_eventq_remove(&evq->evq, &ev->ev);
   1e078:	f104 0654 	add.w	r6, r4, #84	; 0x54
   1e07c:	4631      	mov	r1, r6
   1e07e:	4835      	ldr	r0, [pc, #212]	; (1e154 <ble_ll_adv_done+0xfc>)
   1e080:	f7ec f80b 	bl	a09a <os_eventq_remove>
    final_adv_chan = ble_ll_adv_final_chan(advsm);
   1e084:	4620      	mov	r0, r4
   1e086:	f7ff fa34 	bl	1d4f2 <ble_ll_adv_final_chan>
    if (advsm->adv_chan == final_adv_chan) {
   1e08a:	79a3      	ldrb	r3, [r4, #6]
   1e08c:	4283      	cmp	r3, r0
   1e08e:	d036      	beq.n	1e0fe <ble_ll_adv_done+0xa6>
        ++advsm->adv_chan;
   1e090:	3301      	adds	r3, #1
   1e092:	b2db      	uxtb	r3, r3
   1e094:	71a3      	strb	r3, [r4, #6]
        mask = 1 << (advsm->adv_chan - BLE_PHY_ADV_CHAN_START);
   1e096:	f1a3 0125 	sub.w	r1, r3, #37	; 0x25
   1e09a:	2201      	movs	r2, #1
   1e09c:	408a      	lsls	r2, r1
        if ((mask & advsm->adv_chanmask) == 0) {
   1e09e:	78a1      	ldrb	r1, [r4, #2]
   1e0a0:	420a      	tst	r2, r1
   1e0a2:	d101      	bne.n	1e0a8 <ble_ll_adv_done+0x50>
            ++advsm->adv_chan;
   1e0a4:	3301      	adds	r3, #1
   1e0a6:	71a3      	strb	r3, [r4, #6]
        advsm->adv_pdu_start_time = os_cputime_get32() +
   1e0a8:	f7fd fe51 	bl	1bd4e <os_cputime_get32>
   1e0ac:	4b2a      	ldr	r3, [pc, #168]	; (1e158 <ble_ll_adv_done+0x100>)
   1e0ae:	781b      	ldrb	r3, [r3, #0]
   1e0b0:	4418      	add	r0, r3
   1e0b2:	61e0      	str	r0, [r4, #28]
        resched_pdu = 1;
   1e0b4:	2701      	movs	r7, #1
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   1e0b6:	89a3      	ldrh	r3, [r4, #12]
   1e0b8:	f013 0f08 	tst.w	r3, #8
   1e0bc:	d003      	beq.n	1e0c6 <ble_ll_adv_done+0x6e>
            (advsm->adv_pdu_start_time >= advsm->adv_end_time)) {
   1e0be:	69e2      	ldr	r2, [r4, #28]
   1e0c0:	6a23      	ldr	r3, [r4, #32]
    if ((advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED) &&
   1e0c2:	429a      	cmp	r2, r3
   1e0c4:	d23c      	bcs.n	1e140 <ble_ll_adv_done+0xe8>
    ble_ll_adv_chk_rpa_timeout(advsm);
   1e0c6:	4620      	mov	r0, r4
   1e0c8:	f7ff ffb4 	bl	1e034 <ble_ll_adv_chk_rpa_timeout>
    ble_ll_adv_set_sched(advsm);
   1e0cc:	4620      	mov	r0, r4
   1e0ce:	f7ff faeb 	bl	1d6a8 <ble_ll_adv_set_sched>
    if (!resched_pdu) {
   1e0d2:	2f00      	cmp	r7, #0
   1e0d4:	d038      	beq.n	1e148 <ble_ll_adv_done+0xf0>
    rc = ble_ll_sched_adv_resched_pdu(&advsm->adv_sch);
   1e0d6:	4628      	mov	r0, r5
   1e0d8:	f007 f92e 	bl	25338 <ble_ll_sched_adv_resched_pdu>
    if (rc) {
   1e0dc:	2800      	cmp	r0, #0
   1e0de:	d036      	beq.n	1e14e <ble_ll_adv_done+0xf6>
    os_eventq_put(&evq->evq, &ev->ev);
   1e0e0:	4631      	mov	r1, r6
   1e0e2:	481c      	ldr	r0, [pc, #112]	; (1e154 <ble_ll_adv_done+0xfc>)
   1e0e4:	f7eb ff4f 	bl	9f86 <os_eventq_put>
   1e0e8:	e031      	b.n	1e14e <ble_ll_adv_done+0xf6>
    assert(advsm->adv_enabled);
   1e0ea:	f7ea f869 	bl	81c0 <hal_debugger_connected>
   1e0ee:	b100      	cbz	r0, 1e0f2 <ble_ll_adv_done+0x9a>
   1e0f0:	be01      	bkpt	0x0001
   1e0f2:	2300      	movs	r3, #0
   1e0f4:	461a      	mov	r2, r3
   1e0f6:	4619      	mov	r1, r3
   1e0f8:	4618      	mov	r0, r3
   1e0fa:	f7eb fbf7 	bl	98ec <__assert_func>
        ble_ll_scan_chk_resume();
   1e0fe:	f006 fb5b 	bl	247b8 <ble_ll_scan_chk_resume>
        advsm->adv_chan = ble_ll_adv_first_chan(advsm);
   1e102:	4620      	mov	r0, r4
   1e104:	f7ff f9e8 	bl	1d4d8 <ble_ll_adv_first_chan>
   1e108:	71a0      	strb	r0, [r4, #6]
        tick_itvl = os_cputime_usecs_to_ticks(itvl);
   1e10a:	6960      	ldr	r0, [r4, #20]
   1e10c:	f7fd fe36 	bl	1bd7c <os_cputime_usecs_to_ticks>
   1e110:	4680      	mov	r8, r0
        advsm->adv_event_start_time += tick_itvl;
   1e112:	69a0      	ldr	r0, [r4, #24]
   1e114:	4440      	add	r0, r8
   1e116:	61a0      	str	r0, [r4, #24]
        advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1e118:	61e0      	str	r0, [r4, #28]
        start_time = advsm->adv_pdu_start_time - g_ble_ll_sched_offset_ticks;
   1e11a:	4b0f      	ldr	r3, [pc, #60]	; (1e158 <ble_ll_adv_done+0x100>)
   1e11c:	781f      	ldrb	r7, [r3, #0]
   1e11e:	1bc7      	subs	r7, r0, r7
        delta_t = (int32_t)(start_time - os_cputime_get32());
   1e120:	f7fd fe15 	bl	1bd4e <os_cputime_get32>
        if (delta_t < 0) {
   1e124:	1a38      	subs	r0, r7, r0
   1e126:	d401      	bmi.n	1e12c <ble_ll_adv_done+0xd4>
        resched_pdu = 0;
   1e128:	2700      	movs	r7, #0
   1e12a:	e7c4      	b.n	1e0b6 <ble_ll_adv_done+0x5e>
            while (delta_t < 0) {
   1e12c:	2800      	cmp	r0, #0
   1e12e:	da05      	bge.n	1e13c <ble_ll_adv_done+0xe4>
                advsm->adv_event_start_time += tick_itvl;
   1e130:	69a3      	ldr	r3, [r4, #24]
   1e132:	4443      	add	r3, r8
   1e134:	61a3      	str	r3, [r4, #24]
                advsm->adv_pdu_start_time = advsm->adv_event_start_time;
   1e136:	61e3      	str	r3, [r4, #28]
                delta_t += (int32_t)tick_itvl;
   1e138:	4440      	add	r0, r8
   1e13a:	e7f7      	b.n	1e12c <ble_ll_adv_done+0xd4>
        resched_pdu = 0;
   1e13c:	2700      	movs	r7, #0
   1e13e:	e7ba      	b.n	1e0b6 <ble_ll_adv_done+0x5e>
        ble_ll_adv_sm_stop_timeout(advsm);
   1e140:	4620      	mov	r0, r4
   1e142:	f7ff ff17 	bl	1df74 <ble_ll_adv_sm_stop_timeout>
        return;
   1e146:	e002      	b.n	1e14e <ble_ll_adv_done+0xf6>
        ble_ll_adv_reschedule_event(advsm);
   1e148:	4620      	mov	r0, r4
   1e14a:	f7ff ff27 	bl	1df9c <ble_ll_adv_reschedule_event>
}
   1e14e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e152:	bf00      	nop
   1e154:	200084e8 	.word	0x200084e8
   1e158:	20008cf0 	.word	0x20008cf0

0001e15c <ble_ll_adv_make_done>:
{
   1e15c:	b510      	push	{r4, lr}
   1e15e:	4604      	mov	r4, r0
    ble_ll_adv_active_chanset_clear(advsm);
   1e160:	f7ff fa29 	bl	1d5b6 <ble_ll_adv_active_chanset_clear>
    ble_ll_adv_done(advsm);
   1e164:	4620      	mov	r0, r4
   1e166:	f7ff ff77 	bl	1e058 <ble_ll_adv_done>
}
   1e16a:	bd10      	pop	{r4, pc}

0001e16c <ble_ll_adv_event_done>:
{
   1e16c:	b508      	push	{r3, lr}
    ble_ll_adv_done(ble_npl_event_get_arg(ev));
   1e16e:	6880      	ldr	r0, [r0, #8]
   1e170:	f7ff ff72 	bl	1e058 <ble_ll_adv_done>
}
   1e174:	bd08      	pop	{r3, pc}
	...

0001e178 <ble_ll_adv_rpa_timeout>:
{
   1e178:	b510      	push	{r4, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1e17a:	2400      	movs	r4, #0
   1e17c:	2c00      	cmp	r4, #0
   1e17e:	dd00      	ble.n	1e182 <ble_ll_adv_rpa_timeout+0xa>
}
   1e180:	bd10      	pop	{r4, pc}
        advsm = &g_ble_ll_adv_sm[i];
   1e182:	4a07      	ldr	r2, [pc, #28]	; (1e1a0 <ble_ll_adv_rpa_timeout+0x28>)
   1e184:	01e3      	lsls	r3, r4, #7
   1e186:	18d0      	adds	r0, r2, r3
        if (advsm->adv_enabled &&
   1e188:	5cd3      	ldrb	r3, [r2, r3]
   1e18a:	b113      	cbz	r3, 1e192 <ble_ll_adv_rpa_timeout+0x1a>
                advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1e18c:	7903      	ldrb	r3, [r0, #4]
        if (advsm->adv_enabled &&
   1e18e:	2b01      	cmp	r3, #1
   1e190:	d801      	bhi.n	1e196 <ble_ll_adv_rpa_timeout+0x1e>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1e192:	3401      	adds	r4, #1
   1e194:	e7f2      	b.n	1e17c <ble_ll_adv_rpa_timeout+0x4>
            ble_ll_adv_flags_set(advsm, BLE_LL_ADV_SM_FLAG_ADV_RPA_TMO);
   1e196:	f44f 7180 	mov.w	r1, #256	; 0x100
   1e19a:	f7ff f9b7 	bl	1d50c <ble_ll_adv_flags_set>
   1e19e:	e7f8      	b.n	1e192 <ble_ll_adv_rpa_timeout+0x1a>
   1e1a0:	20008760 	.word	0x20008760

0001e1a4 <ble_ll_adv_event_rmvd_from_sched>:
{
   1e1a4:	b510      	push	{r4, lr}
   1e1a6:	4604      	mov	r4, r0
    advsm->adv_chan = ble_ll_adv_final_chan(advsm);
   1e1a8:	f7ff f9a3 	bl	1d4f2 <ble_ll_adv_final_chan>
   1e1ac:	71a0      	strb	r0, [r4, #6]
   1e1ae:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1e1b2:	4802      	ldr	r0, [pc, #8]	; (1e1bc <ble_ll_adv_event_rmvd_from_sched+0x18>)
   1e1b4:	f7eb fee7 	bl	9f86 <os_eventq_put>
}
   1e1b8:	bd10      	pop	{r4, pc}
   1e1ba:	bf00      	nop
   1e1bc:	200084e8 	.word	0x200084e8

0001e1c0 <ble_ll_adv_halt>:
{
   1e1c0:	b510      	push	{r4, lr}
    if (g_ble_ll_cur_adv_sm != NULL) {
   1e1c2:	4b0a      	ldr	r3, [pc, #40]	; (1e1ec <ble_ll_adv_halt+0x2c>)
   1e1c4:	681c      	ldr	r4, [r3, #0]
   1e1c6:	b184      	cbz	r4, 1e1ea <ble_ll_adv_halt+0x2a>
        ble_phy_txpwr_set(MYNEWT_VAL(BLE_LL_TX_PWR_DBM));
   1e1c8:	2000      	movs	r0, #0
   1e1ca:	f007 ffdb 	bl	26184 <ble_phy_txpwr_set>
   1e1ce:	f104 0154 	add.w	r1, r4, #84	; 0x54
   1e1d2:	4807      	ldr	r0, [pc, #28]	; (1e1f0 <ble_ll_adv_halt+0x30>)
   1e1d4:	f7eb fed7 	bl	9f86 <os_eventq_put>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1e1d8:	2000      	movs	r0, #0
   1e1da:	f7ff f845 	bl	1d268 <ble_ll_state_set>
        ble_ll_adv_active_chanset_clear(g_ble_ll_cur_adv_sm);
   1e1de:	4c03      	ldr	r4, [pc, #12]	; (1e1ec <ble_ll_adv_halt+0x2c>)
   1e1e0:	6820      	ldr	r0, [r4, #0]
   1e1e2:	f7ff f9e8 	bl	1d5b6 <ble_ll_adv_active_chanset_clear>
        g_ble_ll_cur_adv_sm = NULL;
   1e1e6:	2300      	movs	r3, #0
   1e1e8:	6023      	str	r3, [r4, #0]
}
   1e1ea:	bd10      	pop	{r4, pc}
   1e1ec:	200087e0 	.word	0x200087e0
   1e1f0:	200084e8 	.word	0x200084e8

0001e1f4 <ble_ll_adv_set_adv_params>:
    if (len != sizeof(*cmd)) {
   1e1f4:	290f      	cmp	r1, #15
   1e1f6:	d161      	bne.n	1e2bc <ble_ll_adv_set_adv_params+0xc8>
   1e1f8:	4603      	mov	r3, r0
    if (advsm->adv_enabled) {
   1e1fa:	4a3e      	ldr	r2, [pc, #248]	; (1e2f4 <ble_ll_adv_set_adv_params+0x100>)
   1e1fc:	7812      	ldrb	r2, [r2, #0]
   1e1fe:	2a00      	cmp	r2, #0
   1e200:	d15e      	bne.n	1e2c0 <ble_ll_adv_set_adv_params+0xcc>
{
   1e202:	b4f0      	push	{r4, r5, r6, r7}
    adv_itvl_min = le16toh(cmd->min_interval);
   1e204:	8804      	ldrh	r4, [r0, #0]
    adv_itvl_max = le16toh(cmd->max_interval);
   1e206:	8845      	ldrh	r5, [r0, #2]
    adv_filter_policy = cmd->filter_policy;
   1e208:	7b86      	ldrb	r6, [r0, #14]
    switch (cmd->type) {
   1e20a:	7901      	ldrb	r1, [r0, #4]
   1e20c:	2904      	cmp	r1, #4
   1e20e:	d859      	bhi.n	1e2c4 <ble_ll_adv_set_adv_params+0xd0>
   1e210:	e8df f001 	tbb	[pc, r1]
   1e214:	1d1b0503 	.word	0x1d1b0503
   1e218:	11          	.byte	0x11
   1e219:	00          	.byte	0x00
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_IND;
   1e21a:	2213      	movs	r2, #19
   1e21c:	e018      	b.n	1e250 <ble_ll_adv_set_adv_params+0x5c>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   1e21e:	4619      	mov	r1, r3
   1e220:	4c34      	ldr	r4, [pc, #208]	; (1e2f4 <ble_ll_adv_set_adv_params+0x100>)
   1e222:	f851 0f07 	ldr.w	r0, [r1, #7]!
   1e226:	6360      	str	r0, [r4, #52]	; 0x34
   1e228:	8889      	ldrh	r1, [r1, #4]
   1e22a:	8721      	strh	r1, [r4, #56]	; 0x38
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   1e22c:	4616      	mov	r6, r2
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_HD_DIR ;
   1e22e:	221d      	movs	r2, #29
        adv_itvl_max = 0;
   1e230:	2500      	movs	r5, #0
        adv_itvl_min = 0;
   1e232:	462c      	mov	r4, r5
        break;
   1e234:	e00c      	b.n	1e250 <ble_ll_adv_set_adv_params+0x5c>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   1e236:	4619      	mov	r1, r3
   1e238:	4e2e      	ldr	r6, [pc, #184]	; (1e2f4 <ble_ll_adv_set_adv_params+0x100>)
   1e23a:	f851 0f07 	ldr.w	r0, [r1, #7]!
   1e23e:	6370      	str	r0, [r6, #52]	; 0x34
   1e240:	8889      	ldrh	r1, [r1, #4]
   1e242:	8731      	strh	r1, [r6, #56]	; 0x38
        adv_filter_policy = BLE_HCI_ADV_FILT_NONE;
   1e244:	4616      	mov	r6, r2
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_LD_DIR ;
   1e246:	2215      	movs	r2, #21
        break;
   1e248:	e002      	b.n	1e250 <ble_ll_adv_set_adv_params+0x5c>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_SCAN;
   1e24a:	2212      	movs	r2, #18
        break;
   1e24c:	e000      	b.n	1e250 <ble_ll_adv_set_adv_params+0x5c>
        props = BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY_NONCONN;
   1e24e:	2210      	movs	r2, #16
    if (!(props & BLE_HCI_LE_SET_EXT_ADV_PROP_HD_DIRECTED)) {
   1e250:	f012 0f08 	tst.w	r2, #8
   1e254:	d10b      	bne.n	1e26e <ble_ll_adv_set_adv_params+0x7a>
        if ((adv_itvl_min > adv_itvl_max) ||
   1e256:	42ac      	cmp	r4, r5
   1e258:	d836      	bhi.n	1e2c8 <ble_ll_adv_set_adv_params+0xd4>
   1e25a:	2c1f      	cmp	r4, #31
   1e25c:	d936      	bls.n	1e2cc <ble_ll_adv_set_adv_params+0xd8>
                (adv_itvl_min < BLE_HCI_ADV_ITVL_MIN) ||
   1e25e:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
   1e262:	d835      	bhi.n	1e2d0 <ble_ll_adv_set_adv_params+0xdc>
                (adv_itvl_min > BLE_HCI_ADV_ITVL_MAX) ||
   1e264:	2d1f      	cmp	r5, #31
   1e266:	d935      	bls.n	1e2d4 <ble_ll_adv_set_adv_params+0xe0>
                (adv_itvl_max < BLE_HCI_ADV_ITVL_MIN) ||
   1e268:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
   1e26c:	d834      	bhi.n	1e2d8 <ble_ll_adv_set_adv_params+0xe4>
    if ((cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   1e26e:	7959      	ldrb	r1, [r3, #5]
   1e270:	2903      	cmp	r1, #3
   1e272:	d833      	bhi.n	1e2dc <ble_ll_adv_set_adv_params+0xe8>
        (cmd->peer_addr_type > BLE_HCI_ADV_PEER_ADDR_MAX)) {
   1e274:	7999      	ldrb	r1, [r3, #6]
    if ((cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) ||
   1e276:	2901      	cmp	r1, #1
   1e278:	d833      	bhi.n	1e2e2 <ble_ll_adv_set_adv_params+0xee>
    advsm->adv_txpwr = MYNEWT_VAL(BLE_LL_TX_PWR_DBM);
   1e27a:	491e      	ldr	r1, [pc, #120]	; (1e2f4 <ble_ll_adv_set_adv_params+0x100>)
   1e27c:	2000      	movs	r0, #0
   1e27e:	7248      	strb	r0, [r1, #9]
    if (cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1e280:	7959      	ldrb	r1, [r3, #5]
   1e282:	2901      	cmp	r1, #1
   1e284:	d812      	bhi.n	1e2ac <ble_ll_adv_set_adv_params+0xb8>
    if (((cmd->chan_map & 0xF8) != 0) || (cmd->chan_map == 0)) {
   1e286:	7b59      	ldrb	r1, [r3, #13]
   1e288:	f011 0ff8 	tst.w	r1, #248	; 0xf8
   1e28c:	d12b      	bne.n	1e2e6 <ble_ll_adv_set_adv_params+0xf2>
   1e28e:	b361      	cbz	r1, 1e2ea <ble_ll_adv_set_adv_params+0xf6>
    if (adv_filter_policy > BLE_HCI_ADV_FILT_MAX) {
   1e290:	2e03      	cmp	r6, #3
   1e292:	d82c      	bhi.n	1e2ee <ble_ll_adv_set_adv_params+0xfa>
    advsm->own_addr_type = cmd->own_addr_type;
   1e294:	795f      	ldrb	r7, [r3, #5]
   1e296:	4817      	ldr	r0, [pc, #92]	; (1e2f4 <ble_ll_adv_set_adv_params+0x100>)
   1e298:	7107      	strb	r7, [r0, #4]
    advsm->peer_addr_type = cmd->peer_addr_type;
   1e29a:	799b      	ldrb	r3, [r3, #6]
   1e29c:	7143      	strb	r3, [r0, #5]
    advsm->adv_filter_policy = adv_filter_policy;
   1e29e:	70c6      	strb	r6, [r0, #3]
    advsm->adv_chanmask = cmd->chan_map;
   1e2a0:	7081      	strb	r1, [r0, #2]
    advsm->adv_itvl_min = adv_itvl_min;
   1e2a2:	81c4      	strh	r4, [r0, #14]
    advsm->adv_itvl_max = adv_itvl_max;
   1e2a4:	8205      	strh	r5, [r0, #16]
    advsm->props = props;
   1e2a6:	8182      	strh	r2, [r0, #12]
    return 0;
   1e2a8:	2000      	movs	r0, #0
   1e2aa:	e018      	b.n	1e2de <ble_ll_adv_set_adv_params+0xea>
        memcpy(advsm->peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   1e2ac:	4619      	mov	r1, r3
   1e2ae:	4f11      	ldr	r7, [pc, #68]	; (1e2f4 <ble_ll_adv_set_adv_params+0x100>)
   1e2b0:	f851 0f07 	ldr.w	r0, [r1, #7]!
   1e2b4:	6378      	str	r0, [r7, #52]	; 0x34
   1e2b6:	8889      	ldrh	r1, [r1, #4]
   1e2b8:	8739      	strh	r1, [r7, #56]	; 0x38
   1e2ba:	e7e4      	b.n	1e286 <ble_ll_adv_set_adv_params+0x92>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e2bc:	2012      	movs	r0, #18
   1e2be:	4770      	bx	lr
        return BLE_ERR_CMD_DISALLOWED;
   1e2c0:	200c      	movs	r0, #12
}
   1e2c2:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e2c4:	2012      	movs	r0, #18
   1e2c6:	e00a      	b.n	1e2de <ble_ll_adv_set_adv_params+0xea>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   1e2c8:	2012      	movs	r0, #18
   1e2ca:	e008      	b.n	1e2de <ble_ll_adv_set_adv_params+0xea>
   1e2cc:	2012      	movs	r0, #18
   1e2ce:	e006      	b.n	1e2de <ble_ll_adv_set_adv_params+0xea>
   1e2d0:	2012      	movs	r0, #18
   1e2d2:	e004      	b.n	1e2de <ble_ll_adv_set_adv_params+0xea>
   1e2d4:	2012      	movs	r0, #18
   1e2d6:	e002      	b.n	1e2de <ble_ll_adv_set_adv_params+0xea>
   1e2d8:	2012      	movs	r0, #18
   1e2da:	e000      	b.n	1e2de <ble_ll_adv_set_adv_params+0xea>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e2dc:	2012      	movs	r0, #18
}
   1e2de:	bcf0      	pop	{r4, r5, r6, r7}
   1e2e0:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e2e2:	2012      	movs	r0, #18
   1e2e4:	e7fb      	b.n	1e2de <ble_ll_adv_set_adv_params+0xea>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e2e6:	2012      	movs	r0, #18
   1e2e8:	e7f9      	b.n	1e2de <ble_ll_adv_set_adv_params+0xea>
   1e2ea:	2012      	movs	r0, #18
   1e2ec:	e7f7      	b.n	1e2de <ble_ll_adv_set_adv_params+0xea>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e2ee:	2012      	movs	r0, #18
   1e2f0:	e7f5      	b.n	1e2de <ble_ll_adv_set_adv_params+0xea>
   1e2f2:	bf00      	nop
   1e2f4:	20008760 	.word	0x20008760

0001e2f8 <ble_ll_adv_read_txpwr>:
    rsp->power_level = MYNEWT_VAL(BLE_LL_TX_PWR_DBM);
   1e2f8:	2300      	movs	r3, #0
   1e2fa:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   1e2fc:	2201      	movs	r2, #1
   1e2fe:	700a      	strb	r2, [r1, #0]
}
   1e300:	4618      	mov	r0, r3
   1e302:	4770      	bx	lr

0001e304 <ble_ll_hci_adv_set_enable>:
    if (len != sizeof(*cmd)) {
   1e304:	2901      	cmp	r1, #1
   1e306:	d001      	beq.n	1e30c <ble_ll_hci_adv_set_enable+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e308:	2012      	movs	r0, #18
}
   1e30a:	4770      	bx	lr
{
   1e30c:	b508      	push	{r3, lr}
    return ble_ll_adv_set_enable(0, cmd->enable, -1, 0);
   1e30e:	2300      	movs	r3, #0
   1e310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1e314:	7801      	ldrb	r1, [r0, #0]
   1e316:	4618      	mov	r0, r3
   1e318:	f7ff fbdc 	bl	1dad4 <ble_ll_adv_set_enable>
}
   1e31c:	bd08      	pop	{r3, pc}

0001e31e <ble_ll_hci_set_scan_rsp_data>:
    if ((len != sizeof(*cmd)) || (cmd->scan_rsp_len > sizeof(cmd->scan_rsp))) {
   1e31e:	2920      	cmp	r1, #32
   1e320:	d109      	bne.n	1e336 <ble_ll_hci_set_scan_rsp_data+0x18>
   1e322:	7801      	ldrb	r1, [r0, #0]
   1e324:	291f      	cmp	r1, #31
   1e326:	d808      	bhi.n	1e33a <ble_ll_hci_set_scan_rsp_data+0x1c>
{
   1e328:	b508      	push	{r3, lr}
    return ble_ll_adv_set_scan_rsp_data(cmd->scan_rsp, cmd->scan_rsp_len, 0,
   1e32a:	2303      	movs	r3, #3
   1e32c:	2200      	movs	r2, #0
   1e32e:	3001      	adds	r0, #1
   1e330:	f7ff fc1b 	bl	1db6a <ble_ll_adv_set_scan_rsp_data>
}
   1e334:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e336:	2012      	movs	r0, #18
   1e338:	4770      	bx	lr
   1e33a:	2012      	movs	r0, #18
}
   1e33c:	4770      	bx	lr

0001e33e <ble_ll_hci_set_adv_data>:
    if ((len != sizeof(*cmd)) || (cmd->adv_data_len > sizeof(cmd->adv_data))) {
   1e33e:	2920      	cmp	r1, #32
   1e340:	d109      	bne.n	1e356 <ble_ll_hci_set_adv_data+0x18>
   1e342:	7801      	ldrb	r1, [r0, #0]
   1e344:	291f      	cmp	r1, #31
   1e346:	d808      	bhi.n	1e35a <ble_ll_hci_set_adv_data+0x1c>
{
   1e348:	b508      	push	{r3, lr}
    return ble_ll_adv_set_adv_data(cmd->adv_data, cmd->adv_data_len, 0,
   1e34a:	2303      	movs	r3, #3
   1e34c:	2200      	movs	r2, #0
   1e34e:	3001      	adds	r0, #1
   1e350:	f7ff fc63 	bl	1dc1a <ble_ll_adv_set_adv_data>
}
   1e354:	bd08      	pop	{r3, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   1e356:	2012      	movs	r0, #18
   1e358:	4770      	bx	lr
   1e35a:	2012      	movs	r0, #18
}
   1e35c:	4770      	bx	lr
	...

0001e360 <ble_ll_adv_rx_isr_end>:
{
   1e360:	b510      	push	{r4, lr}
    if (rxpdu == NULL) {
   1e362:	b141      	cbz	r1, 1e376 <ble_ll_adv_rx_isr_end+0x16>
   1e364:	460b      	mov	r3, r1
        if (crcok) {
   1e366:	b19a      	cbz	r2, 1e390 <ble_ll_adv_rx_isr_end+0x30>
            if ((pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) ||
   1e368:	2803      	cmp	r0, #3
   1e36a:	d00b      	beq.n	1e384 <ble_ll_adv_rx_isr_end+0x24>
   1e36c:	2805      	cmp	r0, #5
   1e36e:	d009      	beq.n	1e384 <ble_ll_adv_rx_isr_end+0x24>
    rc = -1;
   1e370:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1e374:	e00e      	b.n	1e394 <ble_ll_adv_rx_isr_end+0x34>
        ble_ll_adv_tx_done(g_ble_ll_cur_adv_sm);
   1e376:	4b0c      	ldr	r3, [pc, #48]	; (1e3a8 <ble_ll_adv_rx_isr_end+0x48>)
   1e378:	6818      	ldr	r0, [r3, #0]
   1e37a:	f7ff f927 	bl	1d5cc <ble_ll_adv_tx_done>
    rc = -1;
   1e37e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   1e382:	e00b      	b.n	1e39c <ble_ll_adv_rx_isr_end+0x3c>
                rc = ble_ll_adv_rx_req(pdu_type, rxpdu);
   1e384:	4619      	mov	r1, r3
   1e386:	f7ff fcd3 	bl	1dd30 <ble_ll_adv_rx_req>
        if (rc) {
   1e38a:	4604      	mov	r4, r0
   1e38c:	b128      	cbz	r0, 1e39a <ble_ll_adv_rx_isr_end+0x3a>
   1e38e:	e001      	b.n	1e394 <ble_ll_adv_rx_isr_end+0x34>
    rc = -1;
   1e390:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
            g_ble_ll_cur_adv_sm = NULL;
   1e394:	4b04      	ldr	r3, [pc, #16]	; (1e3a8 <ble_ll_adv_rx_isr_end+0x48>)
   1e396:	2200      	movs	r2, #0
   1e398:	601a      	str	r2, [r3, #0]
    if (rc) {
   1e39a:	b114      	cbz	r4, 1e3a2 <ble_ll_adv_rx_isr_end+0x42>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1e39c:	2000      	movs	r0, #0
   1e39e:	f7fe ff63 	bl	1d268 <ble_ll_state_set>
}
   1e3a2:	4620      	mov	r0, r4
   1e3a4:	bd10      	pop	{r4, pc}
   1e3a6:	bf00      	nop
   1e3a8:	200087e0 	.word	0x200087e0

0001e3ac <ble_ll_adv_rx_pkt_in>:
    if (!advsm->adv_enabled) {
   1e3ac:	4b0f      	ldr	r3, [pc, #60]	; (1e3ec <ble_ll_adv_rx_pkt_in+0x40>)
   1e3ae:	781b      	ldrb	r3, [r3, #0]
   1e3b0:	b1db      	cbz	r3, 1e3ea <ble_ll_adv_rx_pkt_in+0x3e>
{
   1e3b2:	b510      	push	{r4, lr}
   1e3b4:	4614      	mov	r4, r2
   1e3b6:	460b      	mov	r3, r1
    if (BLE_MBUF_HDR_CRC_OK(hdr)) {
   1e3b8:	8812      	ldrh	r2, [r2, #0]
   1e3ba:	f012 0f80 	tst.w	r2, #128	; 0x80
   1e3be:	d003      	beq.n	1e3c8 <ble_ll_adv_rx_pkt_in+0x1c>
        if (ptype == BLE_ADV_PDU_TYPE_CONNECT_IND) {
   1e3c0:	2805      	cmp	r0, #5
   1e3c2:	d006      	beq.n	1e3d2 <ble_ll_adv_rx_pkt_in+0x26>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   1e3c4:	2803      	cmp	r0, #3
   1e3c6:	d00c      	beq.n	1e3e2 <ble_ll_adv_rx_pkt_in+0x36>
        ble_ll_adv_make_done(advsm, hdr);
   1e3c8:	4621      	mov	r1, r4
   1e3ca:	4808      	ldr	r0, [pc, #32]	; (1e3ec <ble_ll_adv_rx_pkt_in+0x40>)
   1e3cc:	f7ff fec6 	bl	1e15c <ble_ll_adv_make_done>
}
   1e3d0:	bd10      	pop	{r4, pc}
            if (ble_ll_adv_conn_req_rxd(rxbuf, hdr, advsm)) {
   1e3d2:	4a06      	ldr	r2, [pc, #24]	; (1e3ec <ble_ll_adv_rx_pkt_in+0x40>)
   1e3d4:	4621      	mov	r1, r4
   1e3d6:	4618      	mov	r0, r3
   1e3d8:	f7ff fd4e 	bl	1de78 <ble_ll_adv_conn_req_rxd>
   1e3dc:	2800      	cmp	r0, #0
   1e3de:	d0f3      	beq.n	1e3c8 <ble_ll_adv_rx_pkt_in+0x1c>
   1e3e0:	e7f6      	b.n	1e3d0 <ble_ll_adv_rx_pkt_in+0x24>
            if ((ptype == BLE_ADV_PDU_TYPE_SCAN_REQ) &&
   1e3e2:	f012 0f10 	tst.w	r2, #16
   1e3e6:	d0ef      	beq.n	1e3c8 <ble_ll_adv_rx_pkt_in+0x1c>
   1e3e8:	e7f2      	b.n	1e3d0 <ble_ll_adv_rx_pkt_in+0x24>
   1e3ea:	4770      	bx	lr
   1e3ec:	20008760 	.word	0x20008760

0001e3f0 <ble_ll_adv_rx_isr_start>:
{
   1e3f0:	b508      	push	{r3, lr}
    advsm = g_ble_ll_cur_adv_sm;
   1e3f2:	4b0e      	ldr	r3, [pc, #56]	; (1e42c <ble_ll_adv_rx_isr_start+0x3c>)
   1e3f4:	681a      	ldr	r2, [r3, #0]
    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_REQ) {
   1e3f6:	2803      	cmp	r0, #3
   1e3f8:	d00b      	beq.n	1e412 <ble_ll_adv_rx_isr_start+0x22>
        if (pdu_type == BLE_ADV_PDU_TYPE_CONNECT_IND) {
   1e3fa:	2805      	cmp	r0, #5
   1e3fc:	d10f      	bne.n	1e41e <ble_ll_adv_rx_isr_start+0x2e>
            if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_CONNECTABLE) {
   1e3fe:	8993      	ldrh	r3, [r2, #12]
   1e400:	f013 0f01 	tst.w	r3, #1
   1e404:	d00b      	beq.n	1e41e <ble_ll_adv_rx_isr_start+0x2e>
                rc = !(advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_LEGACY);
   1e406:	0918      	lsrs	r0, r3, #4
   1e408:	f080 0001 	eor.w	r0, r0, #1
   1e40c:	f000 0001 	and.w	r0, r0, #1
}
   1e410:	bd08      	pop	{r3, pc}
        if (advsm->props & BLE_HCI_LE_SET_EXT_ADV_PROP_SCANNABLE) {
   1e412:	8993      	ldrh	r3, [r2, #12]
   1e414:	f013 0f02 	tst.w	r3, #2
   1e418:	d001      	beq.n	1e41e <ble_ll_adv_rx_isr_start+0x2e>
            rc = 1;
   1e41a:	2001      	movs	r0, #1
    return rc;
   1e41c:	e7f8      	b.n	1e410 <ble_ll_adv_rx_isr_start+0x20>
        ble_ll_adv_tx_done(advsm);
   1e41e:	4610      	mov	r0, r2
   1e420:	f7ff f8d4 	bl	1d5cc <ble_ll_adv_tx_done>
   1e424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1e428:	e7f2      	b.n	1e410 <ble_ll_adv_rx_isr_start+0x20>
   1e42a:	bf00      	nop
   1e42c:	200087e0 	.word	0x200087e0

0001e430 <ble_ll_adv_can_chg_whitelist>:
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1e430:	2300      	movs	r3, #0
   1e432:	2b00      	cmp	r3, #0
   1e434:	dd01      	ble.n	1e43a <ble_ll_adv_can_chg_whitelist+0xa>
    rc = 1;
   1e436:	2001      	movs	r0, #1
   1e438:	4770      	bx	lr
        if (advsm->adv_enabled &&
   1e43a:	01da      	lsls	r2, r3, #7
   1e43c:	4905      	ldr	r1, [pc, #20]	; (1e454 <ble_ll_adv_can_chg_whitelist+0x24>)
   1e43e:	5c8a      	ldrb	r2, [r1, r2]
   1e440:	b11a      	cbz	r2, 1e44a <ble_ll_adv_can_chg_whitelist+0x1a>
            (advsm->adv_filter_policy != BLE_HCI_ADV_FILT_NONE)) {
   1e442:	eb01 12c3 	add.w	r2, r1, r3, lsl #7
   1e446:	78d2      	ldrb	r2, [r2, #3]
        if (advsm->adv_enabled &&
   1e448:	b90a      	cbnz	r2, 1e44e <ble_ll_adv_can_chg_whitelist+0x1e>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1e44a:	3301      	adds	r3, #1
   1e44c:	e7f1      	b.n	1e432 <ble_ll_adv_can_chg_whitelist+0x2>
            rc = 0;
   1e44e:	2000      	movs	r0, #0
}
   1e450:	4770      	bx	lr
   1e452:	bf00      	nop
   1e454:	20008760 	.word	0x20008760

0001e458 <ble_ll_adv_send_conn_comp_ev>:
{
   1e458:	b508      	push	{r3, lr}
    evbuf = advsm->conn_comp_ev;
   1e45a:	4b09      	ldr	r3, [pc, #36]	; (1e480 <ble_ll_adv_send_conn_comp_ev+0x28>)
   1e45c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    assert(evbuf != NULL);
   1e45e:	b12a      	cbz	r2, 1e46c <ble_ll_adv_send_conn_comp_ev+0x14>
    advsm->conn_comp_ev = NULL;
   1e460:	4b07      	ldr	r3, [pc, #28]	; (1e480 <ble_ll_adv_send_conn_comp_ev+0x28>)
   1e462:	2100      	movs	r1, #0
   1e464:	6519      	str	r1, [r3, #80]	; 0x50
    ble_ll_conn_comp_event_send(connsm, BLE_ERR_SUCCESS, evbuf, advsm);
   1e466:	f002 f90b 	bl	20680 <ble_ll_conn_comp_event_send>
}
   1e46a:	bd08      	pop	{r3, pc}
    assert(evbuf != NULL);
   1e46c:	f7e9 fea8 	bl	81c0 <hal_debugger_connected>
   1e470:	b100      	cbz	r0, 1e474 <ble_ll_adv_send_conn_comp_ev+0x1c>
   1e472:	be01      	bkpt	0x0001
   1e474:	2300      	movs	r3, #0
   1e476:	461a      	mov	r2, r3
   1e478:	4619      	mov	r1, r3
   1e47a:	4618      	mov	r0, r3
   1e47c:	f7eb fa36 	bl	98ec <__assert_func>
   1e480:	20008760 	.word	0x20008760

0001e484 <ble_ll_adv_get_local_rpa>:
{
   1e484:	b510      	push	{r4, lr}
    if (advsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1e486:	7903      	ldrb	r3, [r0, #4]
   1e488:	2b01      	cmp	r3, #1
   1e48a:	d90e      	bls.n	1e4aa <ble_ll_adv_get_local_rpa+0x26>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   1e48c:	8943      	ldrh	r3, [r0, #10]
   1e48e:	f013 0f01 	tst.w	r3, #1
   1e492:	d00c      	beq.n	1e4ae <ble_ll_adv_get_local_rpa+0x2a>
                                    ble_ll_is_rpa(advsm->adva, 1)) {
   1e494:	f100 0428 	add.w	r4, r0, #40	; 0x28
   1e498:	2101      	movs	r1, #1
   1e49a:	4620      	mov	r0, r4
   1e49c:	f7fe fd1a 	bl	1ced4 <ble_ll_is_rpa>
        if ((advsm->flags & BLE_LL_ADV_SM_FLAG_TX_ADD) &&
   1e4a0:	b108      	cbz	r0, 1e4a6 <ble_ll_adv_get_local_rpa+0x22>
}
   1e4a2:	4620      	mov	r0, r4
   1e4a4:	bd10      	pop	{r4, pc}
    uint8_t *rpa = NULL;
   1e4a6:	2400      	movs	r4, #0
   1e4a8:	e7fb      	b.n	1e4a2 <ble_ll_adv_get_local_rpa+0x1e>
   1e4aa:	2400      	movs	r4, #0
   1e4ac:	e7f9      	b.n	1e4a2 <ble_ll_adv_get_local_rpa+0x1e>
   1e4ae:	2400      	movs	r4, #0
    return rpa;
   1e4b0:	e7f7      	b.n	1e4a2 <ble_ll_adv_get_local_rpa+0x1e>

0001e4b2 <ble_ll_adv_get_peer_rpa>:
}
   1e4b2:	302e      	adds	r0, #46	; 0x2e
   1e4b4:	4770      	bx	lr
	...

0001e4b8 <ble_ll_adv_wfr_timer_exp>:
{
   1e4b8:	b508      	push	{r3, lr}
    ble_phy_disable();
   1e4ba:	f007 fe9d 	bl	261f8 <ble_phy_disable>
    ble_ll_adv_tx_done(g_ble_ll_cur_adv_sm);
   1e4be:	4b02      	ldr	r3, [pc, #8]	; (1e4c8 <ble_ll_adv_wfr_timer_exp+0x10>)
   1e4c0:	6818      	ldr	r0, [r3, #0]
   1e4c2:	f7ff f883 	bl	1d5cc <ble_ll_adv_tx_done>
}
   1e4c6:	bd08      	pop	{r3, pc}
   1e4c8:	200087e0 	.word	0x200087e0

0001e4cc <ble_ll_adv_reset>:
{
   1e4cc:	b538      	push	{r3, r4, r5, lr}
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1e4ce:	2500      	movs	r5, #0
   1e4d0:	2d00      	cmp	r5, #0
   1e4d2:	dd00      	ble.n	1e4d6 <ble_ll_adv_reset+0xa>
}
   1e4d4:	bd38      	pop	{r3, r4, r5, pc}
        advsm = &g_ble_ll_adv_sm[i];
   1e4d6:	4c08      	ldr	r4, [pc, #32]	; (1e4f8 <ble_ll_adv_reset+0x2c>)
   1e4d8:	eb04 14c5 	add.w	r4, r4, r5, lsl #7
        ble_ll_adv_sm_stop(advsm);
   1e4dc:	4620      	mov	r0, r4
   1e4de:	f7ff fac1 	bl	1da64 <ble_ll_adv_sm_stop>
        os_mbuf_free_chain(advsm->adv_data);
   1e4e2:	6c20      	ldr	r0, [r4, #64]	; 0x40
   1e4e4:	f7eb fe7c 	bl	a1e0 <os_mbuf_free_chain>
        os_mbuf_free_chain(advsm->scan_rsp_data);
   1e4e8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   1e4ea:	f7eb fe79 	bl	a1e0 <os_mbuf_free_chain>
        ble_ll_adv_sm_init(advsm);
   1e4ee:	4620      	mov	r0, r4
   1e4f0:	f7ff fd86 	bl	1e000 <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1e4f4:	3501      	adds	r5, #1
   1e4f6:	e7eb      	b.n	1e4d0 <ble_ll_adv_reset+0x4>
   1e4f8:	20008760 	.word	0x20008760

0001e4fc <ble_ll_adv_enabled>:
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1e4fc:	2300      	movs	r3, #0
   1e4fe:	2b00      	cmp	r3, #0
   1e500:	dd01      	ble.n	1e506 <ble_ll_adv_enabled+0xa>
    return 0;
   1e502:	2000      	movs	r0, #0
   1e504:	4770      	bx	lr
        if (g_ble_ll_adv_sm[i].adv_enabled) {
   1e506:	01da      	lsls	r2, r3, #7
   1e508:	4903      	ldr	r1, [pc, #12]	; (1e518 <ble_ll_adv_enabled+0x1c>)
   1e50a:	5c8a      	ldrb	r2, [r1, r2]
   1e50c:	b90a      	cbnz	r2, 1e512 <ble_ll_adv_enabled+0x16>
    for (i = 0; i < BLE_ADV_INSTANCES; i++) {
   1e50e:	3301      	adds	r3, #1
   1e510:	e7f5      	b.n	1e4fe <ble_ll_adv_enabled+0x2>
            return 1;
   1e512:	2001      	movs	r0, #1
}
   1e514:	4770      	bx	lr
   1e516:	bf00      	nop
   1e518:	20008760 	.word	0x20008760

0001e51c <ble_ll_adv_init>:
 * Initialize the advertising functionality of a BLE device. This should
 * be called once on initialization
 */
void
ble_ll_adv_init(void)
{
   1e51c:	b510      	push	{r4, lr}
    int i;

    /* Set default advertising parameters */
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1e51e:	2400      	movs	r4, #0
   1e520:	2c00      	cmp	r4, #0
   1e522:	dd00      	ble.n	1e526 <ble_ll_adv_init+0xa>
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
    }
}
   1e524:	bd10      	pop	{r4, pc}
        ble_ll_adv_sm_init(&g_ble_ll_adv_sm[i]);
   1e526:	4803      	ldr	r0, [pc, #12]	; (1e534 <ble_ll_adv_init+0x18>)
   1e528:	eb00 10c4 	add.w	r0, r0, r4, lsl #7
   1e52c:	f7ff fd68 	bl	1e000 <ble_ll_adv_sm_init>
    for (i = 0; i < BLE_ADV_INSTANCES; ++i) {
   1e530:	3401      	adds	r4, #1
   1e532:	e7f5      	b.n	1e520 <ble_ll_adv_init+0x4>
   1e534:	20008760 	.word	0x20008760

0001e538 <ble_ll_conn_is_empty_pdu>:
ble_ll_conn_is_empty_pdu(uint8_t *rxbuf)
{
    int rc;
    uint8_t llid;

    llid = rxbuf[0] & BLE_LL_DATA_HDR_LLID_MASK;
   1e538:	7803      	ldrb	r3, [r0, #0]
   1e53a:	f003 0303 	and.w	r3, r3, #3
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (rxbuf[1] == 0)) {
   1e53e:	2b01      	cmp	r3, #1
   1e540:	d001      	beq.n	1e546 <ble_ll_conn_is_empty_pdu+0xe>
        rc = 1;
    } else {
        rc = 0;
   1e542:	2000      	movs	r0, #0
   1e544:	4770      	bx	lr
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (rxbuf[1] == 0)) {
   1e546:	7843      	ldrb	r3, [r0, #1]
   1e548:	b10b      	cbz	r3, 1e54e <ble_ll_conn_is_empty_pdu+0x16>
        rc = 0;
   1e54a:	2000      	movs	r0, #0
   1e54c:	4770      	bx	lr
        rc = 1;
   1e54e:	2001      	movs	r0, #1
    }
    return rc;
}
   1e550:	4770      	bx	lr

0001e552 <ble_ll_conn_calc_dci_csa1>:
    return connsm;
}

static uint8_t
ble_ll_conn_calc_dci_csa1(struct ble_ll_conn_sm *conn)
{
   1e552:	b508      	push	{r3, lr}
   1e554:	4601      	mov	r1, r0
    uint8_t curchan;
    uint8_t remap_index;
    uint8_t bitpos;

    /* Get next unmapped channel */
    curchan = conn->last_unmapped_chan + conn->hop_inc;
   1e556:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
   1e55a:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
   1e55e:	4403      	add	r3, r0
   1e560:	b2d8      	uxtb	r0, r3
    if (curchan > BLE_PHY_NUM_DATA_CHANS) {
   1e562:	2825      	cmp	r0, #37	; 0x25
   1e564:	d902      	bls.n	1e56c <ble_ll_conn_calc_dci_csa1+0x1a>
        curchan -= BLE_PHY_NUM_DATA_CHANS;
   1e566:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   1e56a:	b2d8      	uxtb	r0, r3
    }

    /* Save unmapped channel */
    conn->last_unmapped_chan = curchan;
   1e56c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30

    /* Is this a valid channel? */
    bitpos = 1 << (curchan & 0x07);
   1e570:	f000 0207 	and.w	r2, r0, #7
   1e574:	2301      	movs	r3, #1
   1e576:	4093      	lsls	r3, r2
    if (conn->chanmap[curchan >> 3] & bitpos) {
   1e578:	f3c0 02c7 	ubfx	r2, r0, #3, #8
   1e57c:	440a      	add	r2, r1
   1e57e:	f892 2020 	ldrb.w	r2, [r2, #32]
   1e582:	4213      	tst	r3, r2
   1e584:	d000      	beq.n	1e588 <ble_ll_conn_calc_dci_csa1+0x36>

    /* Calculate remap index */
    remap_index = curchan % conn->num_used_chans;

    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
}
   1e586:	bd08      	pop	{r3, pc}
    remap_index = curchan % conn->num_used_chans;
   1e588:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
   1e58c:	fbb0 f3f2 	udiv	r3, r0, r2
   1e590:	fb02 0013 	mls	r0, r2, r3, r0
    return ble_ll_utils_remapped_channel(remap_index, conn->chanmap);
   1e594:	3120      	adds	r1, #32
   1e596:	b2c0      	uxtb	r0, r0
   1e598:	f006 ffcc 	bl	25534 <ble_ll_utils_remapped_channel>
   1e59c:	e7f3      	b.n	1e586 <ble_ll_conn_calc_dci_csa1+0x34>
	...

0001e5a0 <ble_ll_conn_halt>:
{
   1e5a0:	b508      	push	{r3, lr}
    ble_phy_disable();
   1e5a2:	f007 fe29 	bl	261f8 <ble_phy_disable>
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1e5a6:	2000      	movs	r0, #0
   1e5a8:	f7fe fe5e 	bl	1d268 <ble_ll_state_set>
    g_ble_ll_conn_cur_sm = NULL;
   1e5ac:	4b01      	ldr	r3, [pc, #4]	; (1e5b4 <ble_ll_conn_halt+0x14>)
   1e5ae:	2200      	movs	r2, #0
   1e5b0:	601a      	str	r2, [r3, #0]
}
   1e5b2:	bd08      	pop	{r3, pc}
   1e5b4:	200087f0 	.word	0x200087f0

0001e5b8 <ble_ll_conn_current_sm_over>:
{
   1e5b8:	b510      	push	{r4, lr}
   1e5ba:	4604      	mov	r4, r0
    ble_ll_conn_halt();
   1e5bc:	f7ff fff0 	bl	1e5a0 <ble_ll_conn_halt>
    if (connsm) {
   1e5c0:	b11c      	cbz	r4, 1e5ca <ble_ll_conn_current_sm_over+0x12>
        ble_ll_event_send(&connsm->conn_ev_end);
   1e5c2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1e5c6:	f7fe fe5b 	bl	1d280 <ble_ll_event_send>
}
   1e5ca:	bd10      	pop	{r4, pc}

0001e5cc <ble_ll_conn_rxend_unencrypt>:
    ble_ll_conn_current_sm_over(connsm);
}

static void
ble_ll_conn_rxend_unencrypt(void *arg)
{
   1e5cc:	b508      	push	{r3, lr}
    struct ble_ll_conn_sm *connsm;

    connsm = (struct ble_ll_conn_sm *)arg;
    CONN_F_ENCRYPTED(connsm) = 0;
   1e5ce:	7882      	ldrb	r2, [r0, #2]
   1e5d0:	f36f 0241 	bfc	r2, #1, #1
   1e5d4:	7082      	strb	r2, [r0, #2]
    ble_ll_conn_current_sm_over(connsm);
   1e5d6:	f7ff ffef 	bl	1e5b8 <ble_ll_conn_current_sm_over>
}
   1e5da:	bd08      	pop	{r3, pc}

0001e5dc <ble_ll_conn_txend_encrypt>:
{
   1e5dc:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 1;
   1e5de:	7883      	ldrb	r3, [r0, #2]
   1e5e0:	f043 0302 	orr.w	r3, r3, #2
   1e5e4:	7083      	strb	r3, [r0, #2]
    ble_ll_conn_current_sm_over(connsm);
   1e5e6:	f7ff ffe7 	bl	1e5b8 <ble_ll_conn_current_sm_over>
}
   1e5ea:	bd08      	pop	{r3, pc}

0001e5ec <ble_ll_conn_wait_txend>:
{
   1e5ec:	b508      	push	{r3, lr}
    ble_ll_conn_current_sm_over(connsm);
   1e5ee:	f7ff ffe3 	bl	1e5b8 <ble_ll_conn_current_sm_over>
}
   1e5f2:	bd08      	pop	{r3, pc}

0001e5f4 <ble_ll_conn_connect_ind_txend_to_init>:
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
}

static void
ble_ll_conn_connect_ind_txend_to_init(void *arg)
{
   1e5f4:	b508      	push	{r3, lr}
    ble_ll_state_set(BLE_LL_STATE_INITIATING);
   1e5f6:	2003      	movs	r0, #3
   1e5f8:	f7fe fe36 	bl	1d268 <ble_ll_state_set>
}
   1e5fc:	bd08      	pop	{r3, pc}

0001e5fe <ble_ll_conn_connect_ind_txend_to_standby>:
{
   1e5fe:	b508      	push	{r3, lr}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1e600:	2000      	movs	r0, #0
   1e602:	f7fe fe31 	bl	1d268 <ble_ll_state_set>
}
   1e606:	bd08      	pop	{r3, pc}

0001e608 <ble_ll_init_get_conn_comp_ev>:
{
   1e608:	b508      	push	{r3, lr}
    evbuf = g_ble_ll_conn_comp_ev;
   1e60a:	4b08      	ldr	r3, [pc, #32]	; (1e62c <ble_ll_init_get_conn_comp_ev+0x24>)
   1e60c:	6818      	ldr	r0, [r3, #0]
    BLE_LL_ASSERT(evbuf != NULL);
   1e60e:	b118      	cbz	r0, 1e618 <ble_ll_init_get_conn_comp_ev+0x10>
    g_ble_ll_conn_comp_ev = NULL;
   1e610:	4b06      	ldr	r3, [pc, #24]	; (1e62c <ble_ll_init_get_conn_comp_ev+0x24>)
   1e612:	2200      	movs	r2, #0
   1e614:	601a      	str	r2, [r3, #0]
}
   1e616:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(evbuf != NULL);
   1e618:	f7e9 fdd2 	bl	81c0 <hal_debugger_connected>
   1e61c:	b100      	cbz	r0, 1e620 <ble_ll_init_get_conn_comp_ev+0x18>
   1e61e:	be01      	bkpt	0x0001
   1e620:	2300      	movs	r3, #0
   1e622:	461a      	mov	r2, r3
   1e624:	4619      	mov	r1, r3
   1e626:	4618      	mov	r0, r3
   1e628:	f7eb f960 	bl	98ec <__assert_func>
   1e62c:	200087e8 	.word	0x200087e8

0001e630 <ble_ll_conn_start_rx_encrypt>:
{
   1e630:	b500      	push	{lr}
   1e632:	b083      	sub	sp, #12
   1e634:	4602      	mov	r2, r0
    CONN_F_ENCRYPTED(connsm) = 1;
   1e636:	7883      	ldrb	r3, [r0, #2]
   1e638:	f043 0302 	orr.w	r3, r3, #2
   1e63c:	7083      	strb	r3, [r0, #2]
    ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   1e63e:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
                           !CONN_IS_MASTER(connsm));
   1e642:	79d3      	ldrb	r3, [r2, #7]
    ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   1e644:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   1e648:	bf18      	it	ne
   1e64a:	2301      	movne	r3, #1
   1e64c:	9300      	str	r3, [sp, #0]
   1e64e:	f502 73ac 	add.w	r3, r2, #344	; 0x158
   1e652:	f502 7298 	add.w	r2, r2, #304	; 0x130
   1e656:	2100      	movs	r1, #0
   1e658:	f007 fd1e 	bl	26098 <ble_phy_encrypt_enable>
}
   1e65c:	b003      	add	sp, #12
   1e65e:	f85d fb04 	ldr.w	pc, [sp], #4

0001e662 <ble_ll_conn_start_rx_unencrypt>:
{
   1e662:	b508      	push	{r3, lr}
    CONN_F_ENCRYPTED(connsm) = 0;
   1e664:	7883      	ldrb	r3, [r0, #2]
   1e666:	f36f 0341 	bfc	r3, #1, #1
   1e66a:	7083      	strb	r3, [r0, #2]
    ble_phy_encrypt_disable();
   1e66c:	f007 fd46 	bl	260fc <ble_phy_encrypt_disable>
}
   1e670:	bd08      	pop	{r3, pc}

0001e672 <ble_ll_conn_continue_rx_encrypt>:
{
   1e672:	b508      	push	{r3, lr}
                                 !CONN_IS_MASTER(connsm));
   1e674:	79c2      	ldrb	r2, [r0, #7]
    ble_phy_encrypt_set_pkt_cntr(connsm->enc_data.rx_pkt_cntr,
   1e676:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
   1e67a:	bf18      	it	ne
   1e67c:	2201      	movne	r2, #1
   1e67e:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
   1e682:	2100      	movs	r1, #0
   1e684:	f007 fd32 	bl	260ec <ble_phy_encrypt_set_pkt_cntr>
}
   1e688:	bd08      	pop	{r3, pc}

0001e68a <ble_ll_conn_adjust_pyld_len>:
{
   1e68a:	b538      	push	{r3, r4, r5, lr}
   1e68c:	4604      	mov	r4, r0
   1e68e:	460d      	mov	r5, r1
    phy_max_tx_octets = ble_ll_pdu_max_tx_octets_get(connsm->eff_max_tx_time,
   1e690:	2101      	movs	r1, #1
   1e692:	8b00      	ldrh	r0, [r0, #24]
   1e694:	f7fe fe40 	bl	1d318 <ble_ll_pdu_max_tx_octets_get>
    if (ret > connsm->eff_max_tx_octets) {
   1e698:	7ba3      	ldrb	r3, [r4, #14]
   1e69a:	42ab      	cmp	r3, r5
   1e69c:	d300      	bcc.n	1e6a0 <ble_ll_conn_adjust_pyld_len+0x16>
    ret = pyld_len;
   1e69e:	462b      	mov	r3, r5
    if (ret > phy_max_tx_octets) {
   1e6a0:	4283      	cmp	r3, r0
   1e6a2:	d900      	bls.n	1e6a6 <ble_ll_conn_adjust_pyld_len+0x1c>
}
   1e6a4:	bd38      	pop	{r3, r4, r5, pc}
    if (ret > phy_max_tx_octets) {
   1e6a6:	4618      	mov	r0, r3
   1e6a8:	e7fc      	b.n	1e6a4 <ble_ll_conn_adjust_pyld_len+0x1a>

0001e6aa <ble_ll_update_max_tx_octets_phy_mode>:
{
   1e6aa:	b538      	push	{r3, r4, r5, lr}
   1e6ac:	4604      	mov	r4, r0
    usecs = connsm->eff_max_tx_time;
   1e6ae:	8b05      	ldrh	r5, [r0, #24]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_1M);
   1e6b0:	2101      	movs	r1, #1
   1e6b2:	4628      	mov	r0, r5
   1e6b4:	f7fe fe30 	bl	1d318 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_1M] =
   1e6b8:	7760      	strb	r0, [r4, #29]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_2M);
   1e6ba:	2102      	movs	r1, #2
   1e6bc:	4628      	mov	r0, r5
   1e6be:	f7fe fe2b 	bl	1d318 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_2M] =
   1e6c2:	77a0      	strb	r0, [r4, #30]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_CODED_125KBPS);
   1e6c4:	2103      	movs	r1, #3
   1e6c6:	4628      	mov	r0, r5
   1e6c8:	f7fe fe26 	bl	1d318 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_CODED_125KBPS] =
   1e6cc:	77e0      	strb	r0, [r4, #31]
            ble_ll_pdu_max_tx_octets_get(usecs, BLE_PHY_MODE_CODED_500KBPS);
   1e6ce:	2100      	movs	r1, #0
   1e6d0:	4628      	mov	r0, r5
   1e6d2:	f7fe fe21 	bl	1d318 <ble_ll_pdu_max_tx_octets_get>
    connsm->max_tx_octets_phy_mode[BLE_PHY_MODE_CODED_500KBPS] =
   1e6d6:	7720      	strb	r0, [r4, #28]
}
   1e6d8:	bd38      	pop	{r3, r4, r5, pc}
	...

0001e6dc <ble_ll_conn_get_next_sched_time>:
{
   1e6dc:	b510      	push	{r4, lr}
   1e6de:	b082      	sub	sp, #8
    ce_end = connsm->anchor_point + connsm->conn_itvl_ticks -
   1e6e0:	6f44      	ldr	r4, [r0, #116]	; 0x74
   1e6e2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
   1e6e4:	441c      	add	r4, r3
   1e6e6:	4b0c      	ldr	r3, [pc, #48]	; (1e718 <ble_ll_conn_get_next_sched_time+0x3c>)
   1e6e8:	781b      	ldrb	r3, [r3, #0]
   1e6ea:	1ae4      	subs	r4, r4, r3
    if ((connsm->anchor_point_usecs + connsm->conn_itvl_usecs) >= 31) {
   1e6ec:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   1e6f0:	f890 2079 	ldrb.w	r2, [r0, #121]	; 0x79
   1e6f4:	4413      	add	r3, r2
   1e6f6:	2b1e      	cmp	r3, #30
   1e6f8:	dd00      	ble.n	1e6fc <ble_ll_conn_get_next_sched_time+0x20>
        ++ce_end;
   1e6fa:	3401      	adds	r4, #1
    if (ble_ll_sched_next_time(&next_sched_time)) {
   1e6fc:	a801      	add	r0, sp, #4
   1e6fe:	f006 fe91 	bl	25424 <ble_ll_sched_next_time>
   1e702:	b118      	cbz	r0, 1e70c <ble_ll_conn_get_next_sched_time+0x30>
        if (CPUTIME_LT(next_sched_time, ce_end)) {
   1e704:	9b01      	ldr	r3, [sp, #4]
   1e706:	1b1a      	subs	r2, r3, r4
   1e708:	2a00      	cmp	r2, #0
   1e70a:	db02      	blt.n	1e712 <ble_ll_conn_get_next_sched_time+0x36>
}
   1e70c:	4620      	mov	r0, r4
   1e70e:	b002      	add	sp, #8
   1e710:	bd10      	pop	{r4, pc}
            ce_end = next_sched_time;
   1e712:	461c      	mov	r4, r3
    return ce_end;
   1e714:	e7fa      	b.n	1e70c <ble_ll_conn_get_next_sched_time+0x30>
   1e716:	bf00      	nop
   1e718:	20008cf0 	.word	0x20008cf0

0001e71c <ble_ll_conn_tx_pdu>:
{
   1e71c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e720:	b08f      	sub	sp, #60	; 0x3c
   1e722:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.terminate_ind_rxd) {
   1e724:	7803      	ldrb	r3, [r0, #0]
   1e726:	f013 0f04 	tst.w	r3, #4
   1e72a:	d035      	beq.n	1e798 <ble_ll_conn_tx_pdu+0x7c>
        CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   1e72c:	7843      	ldrb	r3, [r0, #1]
   1e72e:	f043 0320 	orr.w	r3, r3, #32
   1e732:	7043      	strb	r3, [r0, #1]
    ble_hdr = NULL;
   1e734:	2700      	movs	r7, #0
    m = NULL;
   1e736:	463d      	mov	r5, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e738:	2601      	movs	r6, #1
    md = 0;
   1e73a:	46b9      	mov	r9, r7
    if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   1e73c:	7863      	ldrb	r3, [r4, #1]
   1e73e:	f013 0f20 	tst.w	r3, #32
   1e742:	d00a      	beq.n	1e75a <ble_ll_conn_tx_pdu+0x3e>
        m->om_data += BLE_MBUF_MEMBLOCK_OVERHEAD;
   1e744:	ab0e      	add	r3, sp, #56	; 0x38
   1e746:	9304      	str	r3, [sp, #16]
        ble_hdr->txinfo.flags = 0;
   1e748:	2300      	movs	r3, #0
   1e74a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        ble_hdr->txinfo.offset = 0;
   1e74e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
        ble_hdr->txinfo.pyld_len = 0;
   1e752:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
        ble_hdr = &empty_pdu.ble_hdr;
   1e756:	af0a      	add	r7, sp, #40	; 0x28
        m = (struct os_mbuf *)&empty_pdu;
   1e758:	ad04      	add	r5, sp, #16
    if (connsm->tx_seqnum) {
   1e75a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
   1e75e:	b10b      	cbz	r3, 1e764 <ble_ll_conn_tx_pdu+0x48>
        hdr_byte |= BLE_LL_DATA_HDR_SN_MASK;
   1e760:	f046 0608 	orr.w	r6, r6, #8
    if (md) {
   1e764:	f1b9 0f00 	cmp.w	r9, #0
   1e768:	d001      	beq.n	1e76e <ble_ll_conn_tx_pdu+0x52>
        hdr_byte |= BLE_LL_DATA_HDR_MD_MASK;
   1e76a:	f046 0610 	orr.w	r6, r6, #16
    if (connsm->next_exp_seqnum) {
   1e76e:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
   1e772:	b10b      	cbz	r3, 1e778 <ble_ll_conn_tx_pdu+0x5c>
        hdr_byte |= BLE_LL_DATA_HDR_NESN_MASK;
   1e774:	f046 0604 	orr.w	r6, r6, #4
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   1e778:	70fe      	strb	r6, [r7, #3]
    if ((connsm->csmflags.cfbit.terminate_ind_rxd) ||
   1e77a:	7823      	ldrb	r3, [r4, #0]
   1e77c:	f013 0f04 	tst.w	r3, #4
   1e780:	f040 8125 	bne.w	1e9ce <ble_ll_conn_tx_pdu+0x2b2>
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   1e784:	f894 8007 	ldrb.w	r8, [r4, #7]
    if ((connsm->csmflags.cfbit.terminate_ind_rxd) ||
   1e788:	f1b8 0f02 	cmp.w	r8, #2
   1e78c:	f000 8108 	beq.w	1e9a0 <ble_ll_conn_tx_pdu+0x284>
        txend_func = NULL;
   1e790:	2600      	movs	r6, #0
        end_transition = BLE_PHY_TRANSITION_TX_RX;
   1e792:	f04f 0802 	mov.w	r8, #2
   1e796:	e11d      	b.n	1e9d4 <ble_ll_conn_tx_pdu+0x2b8>
    pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   1e798:	f8d0 a0b0 	ldr.w	sl, [r0, #176]	; 0xb0
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm) && !pkthdr) {
   1e79c:	f8d0 50ac 	ldr.w	r5, [r0, #172]	; 0xac
   1e7a0:	b335      	cbz	r5, 1e7f0 <ble_ll_conn_tx_pdu+0xd4>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm)) {
   1e7a2:	b39d      	cbz	r5, 1e80c <ble_ll_conn_tx_pdu+0xf0>
        if (connsm->cur_tx_pdu) {
   1e7a4:	2d00      	cmp	r5, #0
   1e7a6:	f000 8091 	beq.w	1e8cc <ble_ll_conn_tx_pdu+0x1b0>
            ble_hdr = BLE_MBUF_HDR_PTR(m);
   1e7aa:	f105 0718 	add.w	r7, r5, #24
            pktlen = OS_MBUF_PKTLEN(m);
   1e7ae:	f8b5 8010 	ldrh.w	r8, [r5, #16]
            cur_txlen = ble_hdr->txinfo.pyld_len;
   1e7b2:	f895 b01a 	ldrb.w	fp, [r5, #26]
            cur_offset = ble_hdr->txinfo.offset;
   1e7b6:	f895 9019 	ldrb.w	r9, [r5, #25]
            if (cur_offset == 0) {
   1e7ba:	f1b9 0f00 	cmp.w	r9, #0
   1e7be:	d17b      	bne.n	1e8b8 <ble_ll_conn_tx_pdu+0x19c>
                hdr_byte = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   1e7c0:	7eee      	ldrb	r6, [r5, #27]
   1e7c2:	f006 0603 	and.w	r6, r6, #3
            if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   1e7c6:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1e7ca:	2b02      	cmp	r3, #2
   1e7cc:	f240 8095 	bls.w	1e8fa <ble_ll_conn_tx_pdu+0x1de>
                if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)
   1e7d0:	f1ba 0f00 	cmp.w	sl, #0
   1e7d4:	f000 8091 	beq.w	1e8fa <ble_ll_conn_tx_pdu+0x1de>
   1e7d8:	4650      	mov	r0, sl
   1e7da:	f003 f806 	bl	217ea <ble_ll_ctrl_enc_allowed_pdu_tx>
   1e7de:	2800      	cmp	r0, #0
   1e7e0:	f040 808b 	bne.w	1e8fa <ble_ll_conn_tx_pdu+0x1de>
                    && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   1e7e4:	79e3      	ldrb	r3, [r4, #7]
   1e7e6:	2b01      	cmp	r3, #1
   1e7e8:	d168      	bne.n	1e8bc <ble_ll_conn_tx_pdu+0x1a0>
                    nextpkthdr = NULL;
   1e7ea:	f04f 0a00 	mov.w	sl, #0
   1e7ee:	e084      	b.n	1e8fa <ble_ll_conn_tx_pdu+0x1de>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm) && !pkthdr) {
   1e7f0:	7843      	ldrb	r3, [r0, #1]
   1e7f2:	f013 0f20 	tst.w	r3, #32
   1e7f6:	d1d4      	bne.n	1e7a2 <ble_ll_conn_tx_pdu+0x86>
   1e7f8:	f1ba 0f00 	cmp.w	sl, #0
   1e7fc:	d1d1      	bne.n	1e7a2 <ble_ll_conn_tx_pdu+0x86>
        CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   1e7fe:	f043 0320 	orr.w	r3, r3, #32
   1e802:	7043      	strb	r3, [r0, #1]
    ble_hdr = NULL;
   1e804:	2700      	movs	r7, #0
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e806:	2601      	movs	r6, #1
    md = 0;
   1e808:	46b9      	mov	r9, r7
        goto conn_tx_pdu;
   1e80a:	e797      	b.n	1e73c <ble_ll_conn_tx_pdu+0x20>
    if (!connsm->cur_tx_pdu && !CONN_F_EMPTY_PDU_TXD(connsm)) {
   1e80c:	7863      	ldrb	r3, [r4, #1]
   1e80e:	f013 0f20 	tst.w	r3, #32
   1e812:	d1c7      	bne.n	1e7a4 <ble_ll_conn_tx_pdu+0x88>
        m = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   1e814:	f1aa 0510 	sub.w	r5, sl, #16
        nextpkthdr = STAILQ_NEXT(pkthdr, omp_next);
   1e818:	f8da 9004 	ldr.w	r9, [sl, #4]
        if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   1e81c:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1e820:	2b02      	cmp	r3, #2
   1e822:	d81b      	bhi.n	1e85c <ble_ll_conn_tx_pdu+0x140>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   1e824:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   1e828:	685b      	ldr	r3, [r3, #4]
   1e82a:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   1e82e:	b3bb      	cbz	r3, 1e8a0 <ble_ll_conn_tx_pdu+0x184>
        ble_hdr = BLE_MBUF_HDR_PTR(m);
   1e830:	f10a 0708 	add.w	r7, sl, #8
        llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   1e834:	f89a 300b 	ldrb.w	r3, [sl, #11]
   1e838:	f003 0303 	and.w	r3, r3, #3
        pktlen = pkthdr->omp_len;
   1e83c:	f8ba 8000 	ldrh.w	r8, [sl]
        if (llid == BLE_LL_LLID_CTRL) {
   1e840:	2b03      	cmp	r3, #3
   1e842:	d132      	bne.n	1e8aa <ble_ll_conn_tx_pdu+0x18e>
            cur_txlen = pktlen;
   1e844:	fa5f fb88 	uxtb.w	fp, r8
        ble_hdr->txinfo.pyld_len = cur_txlen;
   1e848:	f88a b00a 	strb.w	fp, [sl, #10]
        hdr_byte = ble_hdr->txinfo.hdr_byte;
   1e84c:	f89a 600b 	ldrb.w	r6, [sl, #11]
        connsm->cur_tx_pdu = m;
   1e850:	f8c4 50ac 	str.w	r5, [r4, #172]	; 0xac
   1e854:	46ca      	mov	sl, r9
    cur_offset = 0;
   1e856:	f04f 0900 	mov.w	r9, #0
        connsm->cur_tx_pdu = m;
   1e85a:	e04e      	b.n	1e8fa <ble_ll_conn_tx_pdu+0x1de>
            if (!ble_ll_ctrl_enc_allowed_pdu_tx(pkthdr)) {
   1e85c:	4650      	mov	r0, sl
   1e85e:	f002 ffc4 	bl	217ea <ble_ll_ctrl_enc_allowed_pdu_tx>
   1e862:	b938      	cbnz	r0, 1e874 <ble_ll_conn_tx_pdu+0x158>
                CONN_F_EMPTY_PDU_TXD(connsm) = 1;
   1e864:	7863      	ldrb	r3, [r4, #1]
   1e866:	f043 0320 	orr.w	r3, r3, #32
   1e86a:	7063      	strb	r3, [r4, #1]
    ble_hdr = NULL;
   1e86c:	2700      	movs	r7, #0
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e86e:	2601      	movs	r6, #1
    md = 0;
   1e870:	46b9      	mov	r9, r7
                goto conn_tx_pdu;
   1e872:	e763      	b.n	1e73c <ble_ll_conn_tx_pdu+0x20>
            if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)
   1e874:	f1b9 0f00 	cmp.w	r9, #0
   1e878:	d0d4      	beq.n	1e824 <ble_ll_conn_tx_pdu+0x108>
   1e87a:	4648      	mov	r0, r9
   1e87c:	f002 ffb5 	bl	217ea <ble_ll_ctrl_enc_allowed_pdu_tx>
   1e880:	2800      	cmp	r0, #0
   1e882:	d1cf      	bne.n	1e824 <ble_ll_conn_tx_pdu+0x108>
                && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   1e884:	79e3      	ldrb	r3, [r4, #7]
   1e886:	2b01      	cmp	r3, #1
   1e888:	d007      	beq.n	1e89a <ble_ll_conn_tx_pdu+0x17e>
                    !ble_ll_ctrl_is_start_enc_rsp(m))) {
   1e88a:	4628      	mov	r0, r5
   1e88c:	f002 ffbd 	bl	2180a <ble_ll_ctrl_is_start_enc_rsp>
                && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   1e890:	2800      	cmp	r0, #0
   1e892:	d1c7      	bne.n	1e824 <ble_ll_conn_tx_pdu+0x108>
                nextpkthdr = NULL;
   1e894:	f04f 0900 	mov.w	r9, #0
   1e898:	e7c4      	b.n	1e824 <ble_ll_conn_tx_pdu+0x108>
   1e89a:	f04f 0900 	mov.w	r9, #0
   1e89e:	e7c1      	b.n	1e824 <ble_ll_conn_tx_pdu+0x108>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   1e8a0:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   1e8a4:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   1e8a8:	e7c2      	b.n	1e830 <ble_ll_conn_tx_pdu+0x114>
            cur_txlen = ble_ll_conn_adjust_pyld_len(connsm, pktlen);
   1e8aa:	4641      	mov	r1, r8
   1e8ac:	4620      	mov	r0, r4
   1e8ae:	f7ff feec 	bl	1e68a <ble_ll_conn_adjust_pyld_len>
   1e8b2:	fa5f fb80 	uxtb.w	fp, r0
   1e8b6:	e7c7      	b.n	1e848 <ble_ll_conn_tx_pdu+0x12c>
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e8b8:	2601      	movs	r6, #1
   1e8ba:	e784      	b.n	1e7c6 <ble_ll_conn_tx_pdu+0xaa>
                        !ble_ll_ctrl_is_start_enc_rsp(connsm->cur_tx_pdu))) {
   1e8bc:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   1e8c0:	f002 ffa3 	bl	2180a <ble_ll_ctrl_is_start_enc_rsp>
                    && ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) ||
   1e8c4:	b9c8      	cbnz	r0, 1e8fa <ble_ll_conn_tx_pdu+0x1de>
                    nextpkthdr = NULL;
   1e8c6:	f04f 0a00 	mov.w	sl, #0
   1e8ca:	e016      	b.n	1e8fa <ble_ll_conn_tx_pdu+0x1de>
            if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   1e8cc:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1e8d0:	2b02      	cmp	r3, #2
   1e8d2:	d90d      	bls.n	1e8f0 <ble_ll_conn_tx_pdu+0x1d4>
                if (nextpkthdr && !ble_ll_ctrl_enc_allowed_pdu_tx(nextpkthdr)) {
   1e8d4:	f1ba 0f00 	cmp.w	sl, #0
   1e8d8:	d03e      	beq.n	1e958 <ble_ll_conn_tx_pdu+0x23c>
   1e8da:	4650      	mov	r0, sl
   1e8dc:	f002 ff85 	bl	217ea <ble_ll_ctrl_enc_allowed_pdu_tx>
   1e8e0:	2800      	cmp	r0, #0
   1e8e2:	d03f      	beq.n	1e964 <ble_ll_conn_tx_pdu+0x248>
    ble_hdr = NULL;
   1e8e4:	2700      	movs	r7, #0
            pktlen = 0;
   1e8e6:	46b8      	mov	r8, r7
    cur_offset = 0;
   1e8e8:	46b9      	mov	r9, r7
            cur_txlen = 0;
   1e8ea:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e8ec:	2601      	movs	r6, #1
   1e8ee:	e004      	b.n	1e8fa <ble_ll_conn_tx_pdu+0x1de>
    ble_hdr = NULL;
   1e8f0:	2700      	movs	r7, #0
            pktlen = 0;
   1e8f2:	46b8      	mov	r8, r7
    cur_offset = 0;
   1e8f4:	46b9      	mov	r9, r7
            cur_txlen = 0;
   1e8f6:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e8f8:	2601      	movs	r6, #1
    if (nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) {
   1e8fa:	f1ba 0f00 	cmp.w	sl, #0
   1e8fe:	d039      	beq.n	1e974 <ble_ll_conn_tx_pdu+0x258>
        next_event_time = ble_ll_conn_get_next_sched_time(connsm);
   1e900:	4620      	mov	r0, r4
   1e902:	f7ff feeb 	bl	1e6dc <ble_ll_conn_get_next_sched_time>
   1e906:	9003      	str	r0, [sp, #12]
        if ((cur_offset + cur_txlen) < pktlen) {
   1e908:	eb09 030b 	add.w	r3, r9, fp
   1e90c:	4543      	cmp	r3, r8
   1e90e:	da38      	bge.n	1e982 <ble_ll_conn_tx_pdu+0x266>
            next_txlen = pktlen - (cur_offset + cur_txlen);
   1e910:	fa5f f088 	uxtb.w	r0, r8
   1e914:	fa5f f883 	uxtb.w	r8, r3
   1e918:	eba0 0008 	sub.w	r0, r0, r8
   1e91c:	b2c0      	uxtb	r0, r0
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   1e91e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
            ble_ll_pdu_tx_time_get(next_txlen, tx_phy_mode) +
   1e922:	2101      	movs	r1, #1
   1e924:	f7fe fcf4 	bl	1d310 <ble_ll_pdu_tx_time_get>
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   1e928:	4480      	add	r8, r0
            ble_ll_pdu_tx_time_get(cur_txlen, tx_phy_mode);
   1e92a:	2101      	movs	r1, #1
   1e92c:	4658      	mov	r0, fp
   1e92e:	f7fe fcef 	bl	1d310 <ble_ll_pdu_tx_time_get>
            ble_ll_pdu_tx_time_get(next_txlen, tx_phy_mode) +
   1e932:	4440      	add	r0, r8
        ticks = (BLE_LL_IFS * 3) + connsm->eff_max_rx_time +
   1e934:	f500 70e1 	add.w	r0, r0, #450	; 0x1c2
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   1e938:	79e3      	ldrb	r3, [r4, #7]
   1e93a:	2b01      	cmp	r3, #1
   1e93c:	d029      	beq.n	1e992 <ble_ll_conn_tx_pdu+0x276>
        ticks = os_cputime_usecs_to_ticks(ticks);
   1e93e:	f7fd fa1d 	bl	1bd7c <os_cputime_usecs_to_ticks>
   1e942:	4680      	mov	r8, r0
        if ((int32_t)((os_cputime_get32() + ticks) - next_event_time) < 0) {
   1e944:	f7fd fa03 	bl	1bd4e <os_cputime_get32>
   1e948:	4440      	add	r0, r8
   1e94a:	9b03      	ldr	r3, [sp, #12]
   1e94c:	1ac0      	subs	r0, r0, r3
   1e94e:	2800      	cmp	r0, #0
   1e950:	db23      	blt.n	1e99a <ble_ll_conn_tx_pdu+0x27e>
    md = 0;
   1e952:	f04f 0900 	mov.w	r9, #0
   1e956:	e6f1      	b.n	1e73c <ble_ll_conn_tx_pdu+0x20>
    ble_hdr = NULL;
   1e958:	2700      	movs	r7, #0
            pktlen = 0;
   1e95a:	46b8      	mov	r8, r7
    cur_offset = 0;
   1e95c:	46b9      	mov	r9, r7
            cur_txlen = 0;
   1e95e:	46bb      	mov	fp, r7
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e960:	2601      	movs	r6, #1
   1e962:	e7ca      	b.n	1e8fa <ble_ll_conn_tx_pdu+0x1de>
                    nextpkthdr = NULL;
   1e964:	f04f 0a00 	mov.w	sl, #0
    ble_hdr = NULL;
   1e968:	4657      	mov	r7, sl
            pktlen = 0;
   1e96a:	46d0      	mov	r8, sl
    cur_offset = 0;
   1e96c:	46d1      	mov	r9, sl
            cur_txlen = 0;
   1e96e:	46d3      	mov	fp, sl
    hdr_byte = BLE_LL_LLID_DATA_FRAG;
   1e970:	2601      	movs	r6, #1
   1e972:	e7c2      	b.n	1e8fa <ble_ll_conn_tx_pdu+0x1de>
    if (nextpkthdr || ((cur_offset + cur_txlen) < pktlen)) {
   1e974:	eb09 030b 	add.w	r3, r9, fp
   1e978:	4543      	cmp	r3, r8
   1e97a:	dbc1      	blt.n	1e900 <ble_ll_conn_tx_pdu+0x1e4>
    md = 0;
   1e97c:	f04f 0900 	mov.w	r9, #0
   1e980:	e6dc      	b.n	1e73c <ble_ll_conn_tx_pdu+0x20>
            if (nextpkthdr->omp_len > connsm->eff_max_tx_octets) {
   1e982:	f8ba 3000 	ldrh.w	r3, [sl]
   1e986:	7ba0      	ldrb	r0, [r4, #14]
   1e988:	b282      	uxth	r2, r0
   1e98a:	4293      	cmp	r3, r2
   1e98c:	d8c7      	bhi.n	1e91e <ble_ll_conn_tx_pdu+0x202>
                next_txlen = nextpkthdr->omp_len;
   1e98e:	b2d8      	uxtb	r0, r3
   1e990:	e7c5      	b.n	1e91e <ble_ll_conn_tx_pdu+0x202>
            ticks += (BLE_LL_IFS + connsm->eff_max_rx_time);
   1e992:	8b63      	ldrh	r3, [r4, #26]
   1e994:	4418      	add	r0, r3
   1e996:	3096      	adds	r0, #150	; 0x96
   1e998:	e7d1      	b.n	1e93e <ble_ll_conn_tx_pdu+0x222>
            md = 1;
   1e99a:	f04f 0901 	mov.w	r9, #1
   1e99e:	e6cd      	b.n	1e73c <ble_ll_conn_tx_pdu+0x20>
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   1e9a0:	f1b9 0f00 	cmp.w	r9, #0
   1e9a4:	d144      	bne.n	1ea30 <ble_ll_conn_tx_pdu+0x314>
         (connsm->cons_rxd_bad_crc == 0) &&
   1e9a6:	f894 a034 	ldrb.w	sl, [r4, #52]	; 0x34
        ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) && (md == 0) &&
   1e9aa:	f1ba 0f00 	cmp.w	sl, #0
   1e9ae:	d141      	bne.n	1ea34 <ble_ll_conn_tx_pdu+0x318>
         ((connsm->last_rxd_hdr_byte & BLE_LL_DATA_HDR_MD_MASK) == 0) &&
   1e9b0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
         (connsm->cons_rxd_bad_crc == 0) &&
   1e9b4:	f013 0f10 	tst.w	r3, #16
   1e9b8:	d001      	beq.n	1e9be <ble_ll_conn_tx_pdu+0x2a2>
        txend_func = NULL;
   1e9ba:	2600      	movs	r6, #0
   1e9bc:	e00a      	b.n	1e9d4 <ble_ll_conn_tx_pdu+0x2b8>
         !ble_ll_ctrl_is_terminate_ind(hdr_byte, m->om_data[0]))) {
   1e9be:	682b      	ldr	r3, [r5, #0]
   1e9c0:	7819      	ldrb	r1, [r3, #0]
   1e9c2:	4630      	mov	r0, r6
   1e9c4:	f003 f82b 	bl	21a1e <ble_ll_ctrl_is_terminate_ind>
         ((connsm->last_rxd_hdr_byte & BLE_LL_DATA_HDR_MD_MASK) == 0) &&
   1e9c8:	b3b0      	cbz	r0, 1ea38 <ble_ll_conn_tx_pdu+0x31c>
        txend_func = NULL;
   1e9ca:	2600      	movs	r6, #0
   1e9cc:	e002      	b.n	1e9d4 <ble_ll_conn_tx_pdu+0x2b8>
        txend_func = ble_ll_conn_wait_txend;
   1e9ce:	4e51      	ldr	r6, [pc, #324]	; (1eb14 <ble_ll_conn_tx_pdu+0x3f8>)
        end_transition = BLE_PHY_TRANSITION_NONE;
   1e9d0:	f04f 0800 	mov.w	r8, #0
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   1e9d4:	78fb      	ldrb	r3, [r7, #3]
   1e9d6:	f003 0303 	and.w	r3, r3, #3
    if (llid == BLE_LL_LLID_CTRL) {
   1e9da:	2b03      	cmp	r3, #3
   1e9dc:	d02f      	beq.n	1ea3e <ble_ll_conn_tx_pdu+0x322>
        opcode = 0;
   1e9de:	2300      	movs	r3, #0
        is_ctrl = 0;
   1e9e0:	461a      	mov	r2, r3
    } else if (is_ctrl && (opcode == BLE_LL_CTRL_START_ENC_REQ)) {
   1e9e2:	b10a      	cbz	r2, 1e9e8 <ble_ll_conn_tx_pdu+0x2cc>
   1e9e4:	2b05      	cmp	r3, #5
   1e9e6:	d047      	beq.n	1ea78 <ble_ll_conn_tx_pdu+0x35c>
    } else if (is_ctrl && (opcode == BLE_LL_CTRL_PAUSE_ENC_RSP)) {
   1e9e8:	b10a      	cbz	r2, 1e9ee <ble_ll_conn_tx_pdu+0x2d2>
   1e9ea:	2b0b      	cmp	r3, #11
   1e9ec:	d055      	beq.n	1ea9a <ble_ll_conn_tx_pdu+0x37e>
        if (CONN_F_ENCRYPTED(connsm)) {
   1e9ee:	78a3      	ldrb	r3, [r4, #2]
   1e9f0:	f013 0f02 	tst.w	r3, #2
   1e9f4:	d17b      	bne.n	1eaee <ble_ll_conn_tx_pdu+0x3d2>
    ble_phy_set_txend_cb(txend_func, connsm);
   1e9f6:	4621      	mov	r1, r4
   1e9f8:	4630      	mov	r0, r6
   1e9fa:	f007 fb95 	bl	26128 <ble_phy_set_txend_cb>
    rc = ble_phy_tx(ble_ll_tx_mbuf_pducb, m, end_transition);
   1e9fe:	4642      	mov	r2, r8
   1ea00:	4629      	mov	r1, r5
   1ea02:	4845      	ldr	r0, [pc, #276]	; (1eb18 <ble_ll_conn_tx_pdu+0x3fc>)
   1ea04:	f007 fdea 	bl	265dc <ble_phy_tx>
    if (!rc) {
   1ea08:	4602      	mov	r2, r0
   1ea0a:	b968      	cbnz	r0, 1ea28 <ble_ll_conn_tx_pdu+0x30c>
        CONN_F_LAST_TXD_MD(connsm) = md;
   1ea0c:	7863      	ldrb	r3, [r4, #1]
   1ea0e:	f369 1386 	bfi	r3, r9, #6, #1
   1ea12:	7063      	strb	r3, [r4, #1]
        if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   1ea14:	f013 0f20 	tst.w	r3, #32
   1ea18:	d006      	beq.n	1ea28 <ble_ll_conn_tx_pdu+0x30c>
            if (connsm->csmflags.cfbit.terminate_ind_rxd) {
   1ea1a:	7823      	ldrb	r3, [r4, #0]
   1ea1c:	f013 0f04 	tst.w	r3, #4
   1ea20:	d002      	beq.n	1ea28 <ble_ll_conn_tx_pdu+0x30c>
                connsm->csmflags.cfbit.terminate_ind_rxd_acked = 1;
   1ea22:	f043 0308 	orr.w	r3, r3, #8
   1ea26:	7023      	strb	r3, [r4, #0]
}
   1ea28:	4610      	mov	r0, r2
   1ea2a:	b00f      	add	sp, #60	; 0x3c
   1ea2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        txend_func = NULL;
   1ea30:	2600      	movs	r6, #0
   1ea32:	e7cf      	b.n	1e9d4 <ble_ll_conn_tx_pdu+0x2b8>
   1ea34:	2600      	movs	r6, #0
   1ea36:	e7cd      	b.n	1e9d4 <ble_ll_conn_tx_pdu+0x2b8>
        end_transition = BLE_PHY_TRANSITION_NONE;
   1ea38:	46d0      	mov	r8, sl
        txend_func = ble_ll_conn_wait_txend;
   1ea3a:	4e36      	ldr	r6, [pc, #216]	; (1eb14 <ble_ll_conn_tx_pdu+0x3f8>)
   1ea3c:	e7ca      	b.n	1e9d4 <ble_ll_conn_tx_pdu+0x2b8>
        opcode = m->om_data[0];
   1ea3e:	682b      	ldr	r3, [r5, #0]
   1ea40:	781b      	ldrb	r3, [r3, #0]
    if (is_ctrl && (opcode == BLE_LL_CTRL_START_ENC_RSP)) {
   1ea42:	2b06      	cmp	r3, #6
   1ea44:	d001      	beq.n	1ea4a <ble_ll_conn_tx_pdu+0x32e>
        is_ctrl = 1;
   1ea46:	2201      	movs	r2, #1
   1ea48:	e7cb      	b.n	1e9e2 <ble_ll_conn_tx_pdu+0x2c6>
        CONN_F_ENCRYPTED(connsm) = 1;
   1ea4a:	78a3      	ldrb	r3, [r4, #2]
   1ea4c:	f043 0302 	orr.w	r3, r3, #2
   1ea50:	70a3      	strb	r3, [r4, #2]
        connsm->enc_data.tx_encrypted = 1;
   1ea52:	2301      	movs	r3, #1
   1ea54:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
                               CONN_IS_MASTER(connsm));
   1ea58:	79e3      	ldrb	r3, [r4, #7]
        ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   1ea5a:	2b01      	cmp	r3, #1
   1ea5c:	bf14      	ite	ne
   1ea5e:	2300      	movne	r3, #0
   1ea60:	2301      	moveq	r3, #1
   1ea62:	9300      	str	r3, [sp, #0]
   1ea64:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   1ea68:	f504 7298 	add.w	r2, r4, #304	; 0x130
   1ea6c:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   1ea70:	2100      	movs	r1, #0
   1ea72:	f007 fb11 	bl	26098 <ble_phy_encrypt_enable>
   1ea76:	e7be      	b.n	1e9f6 <ble_ll_conn_tx_pdu+0x2da>
        CONN_F_ENCRYPTED(connsm) = 0;
   1ea78:	78a3      	ldrb	r3, [r4, #2]
   1ea7a:	f36f 0341 	bfc	r3, #1, #1
   1ea7e:	70a3      	strb	r3, [r4, #2]
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
   1ea80:	2307      	movs	r3, #7
   1ea82:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        connsm->enc_data.tx_encrypted = 0;
   1ea86:	2300      	movs	r3, #0
   1ea88:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
        ble_phy_encrypt_disable();
   1ea8c:	f007 fb36 	bl	260fc <ble_phy_encrypt_disable>
        if (txend_func == NULL) {
   1ea90:	b10e      	cbz	r6, 1ea96 <ble_ll_conn_tx_pdu+0x37a>
            txend_func = ble_ll_conn_txend_encrypt;
   1ea92:	4e22      	ldr	r6, [pc, #136]	; (1eb1c <ble_ll_conn_tx_pdu+0x400>)
   1ea94:	e7af      	b.n	1e9f6 <ble_ll_conn_tx_pdu+0x2da>
            txend_func = ble_ll_conn_start_rx_encrypt;
   1ea96:	4e22      	ldr	r6, [pc, #136]	; (1eb20 <ble_ll_conn_tx_pdu+0x404>)
   1ea98:	e7ad      	b.n	1e9f6 <ble_ll_conn_tx_pdu+0x2da>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   1ea9a:	79e3      	ldrb	r3, [r4, #7]
   1ea9c:	2b02      	cmp	r3, #2
   1ea9e:	d00c      	beq.n	1eaba <ble_ll_conn_tx_pdu+0x39e>
            CONN_F_ENCRYPTED(connsm) = 0;
   1eaa0:	78a3      	ldrb	r3, [r4, #2]
   1eaa2:	f36f 0341 	bfc	r3, #1, #1
   1eaa6:	70a3      	strb	r3, [r4, #2]
            connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
   1eaa8:	2305      	movs	r3, #5
   1eaaa:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
            connsm->enc_data.tx_encrypted = 0;
   1eaae:	2300      	movs	r3, #0
   1eab0:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
            ble_phy_encrypt_disable();
   1eab4:	f007 fb22 	bl	260fc <ble_phy_encrypt_disable>
   1eab8:	e79d      	b.n	1e9f6 <ble_ll_conn_tx_pdu+0x2da>
            CONN_F_ENCRYPTED(connsm) = 1;
   1eaba:	78a2      	ldrb	r2, [r4, #2]
   1eabc:	f042 0202 	orr.w	r2, r2, #2
   1eac0:	70a2      	strb	r2, [r4, #2]
            connsm->enc_data.tx_encrypted = 1;
   1eac2:	2201      	movs	r2, #1
   1eac4:	f884 2119 	strb.w	r2, [r4, #281]	; 0x119
            ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   1eac8:	4293      	cmp	r3, r2
   1eaca:	bf14      	ite	ne
   1eacc:	2300      	movne	r3, #0
   1eace:	2301      	moveq	r3, #1
   1ead0:	9300      	str	r3, [sp, #0]
   1ead2:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   1ead6:	f504 7298 	add.w	r2, r4, #304	; 0x130
   1eada:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   1eade:	2100      	movs	r1, #0
   1eae0:	f007 fada 	bl	26098 <ble_phy_encrypt_enable>
            if (txend_func == NULL) {
   1eae4:	b10e      	cbz	r6, 1eaea <ble_ll_conn_tx_pdu+0x3ce>
                txend_func = ble_ll_conn_rxend_unencrypt;
   1eae6:	4e0f      	ldr	r6, [pc, #60]	; (1eb24 <ble_ll_conn_tx_pdu+0x408>)
   1eae8:	e785      	b.n	1e9f6 <ble_ll_conn_tx_pdu+0x2da>
                txend_func = ble_ll_conn_start_rx_unencrypt;
   1eaea:	4e0f      	ldr	r6, [pc, #60]	; (1eb28 <ble_ll_conn_tx_pdu+0x40c>)
   1eaec:	e783      	b.n	1e9f6 <ble_ll_conn_tx_pdu+0x2da>
            connsm->enc_data.tx_encrypted = 1;
   1eaee:	2301      	movs	r3, #1
   1eaf0:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
                                         CONN_IS_MASTER(connsm));
   1eaf4:	79e2      	ldrb	r2, [r4, #7]
            ble_phy_encrypt_set_pkt_cntr(connsm->enc_data.tx_pkt_cntr,
   1eaf6:	429a      	cmp	r2, r3
   1eaf8:	bf14      	ite	ne
   1eafa:	2200      	movne	r2, #0
   1eafc:	2201      	moveq	r2, #1
   1eafe:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   1eb02:	2100      	movs	r1, #0
   1eb04:	f007 faf2 	bl	260ec <ble_phy_encrypt_set_pkt_cntr>
            if (txend_func == NULL) {
   1eb08:	2e00      	cmp	r6, #0
   1eb0a:	f47f af74 	bne.w	1e9f6 <ble_ll_conn_tx_pdu+0x2da>
                txend_func = ble_ll_conn_continue_rx_encrypt;
   1eb0e:	4e07      	ldr	r6, [pc, #28]	; (1eb2c <ble_ll_conn_tx_pdu+0x410>)
   1eb10:	e771      	b.n	1e9f6 <ble_ll_conn_tx_pdu+0x2da>
   1eb12:	bf00      	nop
   1eb14:	0001e5ed 	.word	0x0001e5ed
   1eb18:	0001d237 	.word	0x0001d237
   1eb1c:	0001e5dd 	.word	0x0001e5dd
   1eb20:	0001e631 	.word	0x0001e631
   1eb24:	0001e5cd 	.word	0x0001e5cd
   1eb28:	0001e663 	.word	0x0001e663
   1eb2c:	0001e673 	.word	0x0001e673

0001eb30 <ble_ll_conn_event_start_cb>:
{
   1eb30:	b530      	push	{r4, r5, lr}
   1eb32:	b083      	sub	sp, #12
    connsm = (struct ble_ll_conn_sm *)sch->cb_arg;
   1eb34:	68c4      	ldr	r4, [r0, #12]
    g_ble_ll_conn_cur_sm = connsm;
   1eb36:	4b46      	ldr	r3, [pc, #280]	; (1ec50 <ble_ll_conn_event_start_cb+0x120>)
   1eb38:	601c      	str	r4, [r3, #0]
    BLE_LL_ASSERT(connsm);
   1eb3a:	2c00      	cmp	r4, #0
   1eb3c:	d03f      	beq.n	1ebbe <ble_ll_conn_event_start_cb+0x8e>
   1eb3e:	4605      	mov	r5, r0
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   1eb40:	79a3      	ldrb	r3, [r4, #6]
   1eb42:	2b00      	cmp	r3, #0
   1eb44:	d045      	beq.n	1ebd2 <ble_ll_conn_event_start_cb+0xa2>
    ble_ll_whitelist_disable();
   1eb46:	f006 fdfb 	bl	25740 <ble_ll_whitelist_disable>
    ble_ll_state_set(BLE_LL_STATE_CONNECTION);
   1eb4a:	2004      	movs	r0, #4
   1eb4c:	f7fe fb8c 	bl	1d268 <ble_ll_state_set>
    ble_phy_setchan(connsm->data_chan_index, connsm->access_addr,
   1eb50:	6da2      	ldr	r2, [r4, #88]	; 0x58
   1eb52:	6d61      	ldr	r1, [r4, #84]	; 0x54
   1eb54:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
   1eb58:	f007 fb28 	bl	261ac <ble_phy_setchan>
    ble_phy_resolv_list_disable();
   1eb5c:	f007 fde4 	bl	26728 <ble_phy_resolv_list_disable>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   1eb60:	79e3      	ldrb	r3, [r4, #7]
   1eb62:	2b01      	cmp	r3, #1
   1eb64:	d03f      	beq.n	1ebe6 <ble_ll_conn_event_start_cb+0xb6>
        if (CONN_F_ENCRYPTED(connsm)) {
   1eb66:	78a3      	ldrb	r3, [r4, #2]
   1eb68:	f013 0f02 	tst.w	r3, #2
   1eb6c:	d05d      	beq.n	1ec2a <ble_ll_conn_event_start_cb+0xfa>
            ble_phy_encrypt_enable(connsm->enc_data.rx_pkt_cntr,
   1eb6e:	f8d4 0120 	ldr.w	r0, [r4, #288]	; 0x120
   1eb72:	2301      	movs	r3, #1
   1eb74:	9300      	str	r3, [sp, #0]
   1eb76:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   1eb7a:	f504 7298 	add.w	r2, r4, #304	; 0x130
   1eb7e:	2100      	movs	r1, #0
   1eb80:	f007 fa8a 	bl	26098 <ble_phy_encrypt_enable>
        start = sch->start_time + g_ble_ll_sched_offset_ticks;
   1eb84:	6868      	ldr	r0, [r5, #4]
   1eb86:	4b33      	ldr	r3, [pc, #204]	; (1ec54 <ble_ll_conn_event_start_cb+0x124>)
   1eb88:	781b      	ldrb	r3, [r3, #0]
        rc = ble_phy_rx_set_start_time(start, sch->remainder);
   1eb8a:	78a9      	ldrb	r1, [r5, #2]
   1eb8c:	4418      	add	r0, r3
   1eb8e:	f007 fcdb 	bl	26548 <ble_phy_rx_set_start_time>
        if (rc) {
   1eb92:	4605      	mov	r5, r0
   1eb94:	2800      	cmp	r0, #0
   1eb96:	d04b      	beq.n	1ec30 <ble_ll_conn_event_start_cb+0x100>
        ble_ll_event_send(&connsm->conn_ev_end);
   1eb98:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1eb9c:	f7fe fb70 	bl	1d280 <ble_ll_event_send>
        ble_phy_disable();
   1eba0:	f007 fb2a 	bl	261f8 <ble_phy_disable>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1eba4:	2000      	movs	r0, #0
   1eba6:	f7fe fb5f 	bl	1d268 <ble_ll_state_set>
        g_ble_ll_conn_cur_sm = NULL;
   1ebaa:	4b29      	ldr	r3, [pc, #164]	; (1ec50 <ble_ll_conn_event_start_cb+0x120>)
   1ebac:	2200      	movs	r2, #0
   1ebae:	601a      	str	r2, [r3, #0]
   1ebb0:	2501      	movs	r5, #1
    connsm->last_scheduled = os_cputime_get32();
   1ebb2:	f7fd f8cc 	bl	1bd4e <os_cputime_get32>
   1ebb6:	6660      	str	r0, [r4, #100]	; 0x64
}
   1ebb8:	4628      	mov	r0, r5
   1ebba:	b003      	add	sp, #12
   1ebbc:	bd30      	pop	{r4, r5, pc}
    BLE_LL_ASSERT(connsm);
   1ebbe:	f7e9 faff 	bl	81c0 <hal_debugger_connected>
   1ebc2:	b100      	cbz	r0, 1ebc6 <ble_ll_conn_event_start_cb+0x96>
   1ebc4:	be01      	bkpt	0x0001
   1ebc6:	2300      	movs	r3, #0
   1ebc8:	461a      	mov	r2, r3
   1ebca:	4619      	mov	r1, r3
   1ebcc:	4618      	mov	r0, r3
   1ebce:	f7ea fe8d 	bl	98ec <__assert_func>
        BLE_LL_ASSERT(0);
   1ebd2:	f7e9 faf5 	bl	81c0 <hal_debugger_connected>
   1ebd6:	b100      	cbz	r0, 1ebda <ble_ll_conn_event_start_cb+0xaa>
   1ebd8:	be01      	bkpt	0x0001
   1ebda:	2300      	movs	r3, #0
   1ebdc:	461a      	mov	r2, r3
   1ebde:	4619      	mov	r1, r3
   1ebe0:	4618      	mov	r0, r3
   1ebe2:	f7ea fe83 	bl	98ec <__assert_func>
        start = sch->start_time + g_ble_ll_sched_offset_ticks;
   1ebe6:	6868      	ldr	r0, [r5, #4]
   1ebe8:	4b1a      	ldr	r3, [pc, #104]	; (1ec54 <ble_ll_conn_event_start_cb+0x124>)
   1ebea:	781b      	ldrb	r3, [r3, #0]
        rc = ble_phy_tx_set_start_time(start, sch->remainder);
   1ebec:	78a9      	ldrb	r1, [r5, #2]
   1ebee:	4418      	add	r0, r3
   1ebf0:	f007 fcdc 	bl	265ac <ble_phy_tx_set_start_time>
        if (!rc) {
   1ebf4:	2800      	cmp	r0, #0
   1ebf6:	d1cf      	bne.n	1eb98 <ble_ll_conn_event_start_cb+0x68>
            if (CONN_F_ENCRYPTED(connsm)) {
   1ebf8:	78a3      	ldrb	r3, [r4, #2]
   1ebfa:	f013 0f02 	tst.w	r3, #2
   1ebfe:	d011      	beq.n	1ec24 <ble_ll_conn_event_start_cb+0xf4>
                ble_phy_encrypt_enable(connsm->enc_data.tx_pkt_cntr,
   1ec00:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
   1ec04:	2301      	movs	r3, #1
   1ec06:	9300      	str	r3, [sp, #0]
   1ec08:	f504 73ac 	add.w	r3, r4, #344	; 0x158
   1ec0c:	f504 7298 	add.w	r2, r4, #304	; 0x130
   1ec10:	2100      	movs	r1, #0
   1ec12:	f007 fa41 	bl	26098 <ble_phy_encrypt_enable>
            rc = ble_ll_conn_tx_pdu(connsm);
   1ec16:	4620      	mov	r0, r4
   1ec18:	f7ff fd80 	bl	1e71c <ble_ll_conn_tx_pdu>
            if (!rc) {
   1ec1c:	4605      	mov	r5, r0
   1ec1e:	2800      	cmp	r0, #0
   1ec20:	d1ba      	bne.n	1eb98 <ble_ll_conn_event_start_cb+0x68>
   1ec22:	e7c6      	b.n	1ebb2 <ble_ll_conn_event_start_cb+0x82>
                ble_phy_encrypt_disable();
   1ec24:	f007 fa6a 	bl	260fc <ble_phy_encrypt_disable>
   1ec28:	e7f5      	b.n	1ec16 <ble_ll_conn_event_start_cb+0xe6>
            ble_phy_encrypt_disable();
   1ec2a:	f007 fa67 	bl	260fc <ble_phy_encrypt_disable>
   1ec2e:	e7a9      	b.n	1eb84 <ble_ll_conn_event_start_cb+0x54>
            connsm->csmflags.cfbit.slave_set_last_anchor = 1;
   1ec30:	7823      	ldrb	r3, [r4, #0]
   1ec32:	f043 0320 	orr.w	r3, r3, #32
   1ec36:	7023      	strb	r3, [r4, #0]
            usecs = connsm->slave_cur_tx_win_usecs + 61 +
   1ec38:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
                (2 * connsm->slave_cur_window_widening);
   1ec3c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
            usecs = connsm->slave_cur_tx_win_usecs + 61 +
   1ec40:	eb02 0243 	add.w	r2, r2, r3, lsl #1
            ble_phy_wfr_enable(BLE_PHY_WFR_ENABLE_RX, 0, usecs);
   1ec44:	323d      	adds	r2, #61	; 0x3d
   1ec46:	2100      	movs	r1, #0
   1ec48:	4608      	mov	r0, r1
   1ec4a:	f007 f8db 	bl	25e04 <ble_phy_wfr_enable>
   1ec4e:	e7b0      	b.n	1ebb2 <ble_ll_conn_event_start_cb+0x82>
   1ec50:	200087f0 	.word	0x200087f0
   1ec54:	20008cf0 	.word	0x20008cf0

0001ec58 <ble_ll_conn_master_common_init>:
{
   1ec58:	b510      	push	{r4, lr}
   1ec5a:	4604      	mov	r4, r0
    connsm->conn_role = BLE_LL_CONN_ROLE_MASTER;
   1ec5c:	2301      	movs	r3, #1
   1ec5e:	71c3      	strb	r3, [r0, #7]
    connsm->tx_win_size = BLE_LL_CONN_TX_WIN_MIN + 1;
   1ec60:	2302      	movs	r3, #2
   1ec62:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    connsm->tx_win_off = 0;
   1ec66:	2300      	movs	r3, #0
   1ec68:	f8a0 3072 	strh.w	r3, [r0, #114]	; 0x72
    connsm->master_sca = BLE_LL_SCA_ENUM;
   1ec6c:	2307      	movs	r3, #7
   1ec6e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
   1ec72:	f7ec fd6f 	bl	b754 <lrand48>
    connsm->hop_inc = (rand() % 12) + 5;
   1ec76:	4a11      	ldr	r2, [pc, #68]	; (1ecbc <ble_ll_conn_master_common_init+0x64>)
   1ec78:	fb82 3200 	smull	r3, r2, r2, r0
   1ec7c:	17c3      	asrs	r3, r0, #31
   1ec7e:	ebc3 0362 	rsb	r3, r3, r2, asr #1
   1ec82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ec86:	009a      	lsls	r2, r3, #2
   1ec88:	1a83      	subs	r3, r0, r2
   1ec8a:	3305      	adds	r3, #5
   1ec8c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    connsm->num_used_chans = g_ble_ll_conn_params.num_used_chans;
   1ec90:	4b0b      	ldr	r3, [pc, #44]	; (1ecc0 <ble_ll_conn_master_common_init+0x68>)
   1ec92:	795a      	ldrb	r2, [r3, #5]
   1ec94:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
    memcpy(connsm->chanmap, g_ble_ll_conn_params.master_chan_map,
   1ec98:	6818      	ldr	r0, [r3, #0]
   1ec9a:	6220      	str	r0, [r4, #32]
   1ec9c:	791b      	ldrb	r3, [r3, #4]
   1ec9e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    connsm->access_addr = ble_ll_utils_calc_access_addr();
   1eca2:	f006 fbed 	bl	25480 <ble_ll_utils_calc_access_addr>
   1eca6:	6560      	str	r0, [r4, #84]	; 0x54
   1eca8:	f7ec fd54 	bl	b754 <lrand48>
    connsm->crcinit = rand() & 0xffffff;
   1ecac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1ecb0:	65a0      	str	r0, [r4, #88]	; 0x58
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   1ecb2:	4b04      	ldr	r3, [pc, #16]	; (1ecc4 <ble_ll_conn_master_common_init+0x6c>)
   1ecb4:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
}
   1ecb8:	bd10      	pop	{r4, pc}
   1ecba:	bf00      	nop
   1ecbc:	2aaaaaab 	.word	0x2aaaaaab
   1ecc0:	200087fc 	.word	0x200087fc
   1ecc4:	0001eb31 	.word	0x0001eb31

0001ecc8 <ble_ll_conn_calc_itvl_ticks>:
{
   1ecc8:	b570      	push	{r4, r5, r6, lr}
   1ecca:	4605      	mov	r5, r0
    usecs = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   1eccc:	f8b0 0068 	ldrh.w	r0, [r0, #104]	; 0x68
   1ecd0:	f240 44e2 	movw	r4, #1250	; 0x4e2
   1ecd4:	fb04 f400 	mul.w	r4, r4, r0
    ticks = os_cputime_usecs_to_ticks(usecs);
   1ecd8:	4620      	mov	r0, r4
   1ecda:	f7fd f84f 	bl	1bd7c <os_cputime_usecs_to_ticks>
   1ecde:	4606      	mov	r6, r0
                                        os_cputime_ticks_to_usecs(ticks));
   1ece0:	f7fd f854 	bl	1bd8c <os_cputime_ticks_to_usecs>
    connsm->conn_itvl_usecs = (uint8_t)(usecs -
   1ece4:	1a20      	subs	r0, r4, r0
   1ece6:	b2c0      	uxtb	r0, r0
   1ece8:	f885 0079 	strb.w	r0, [r5, #121]	; 0x79
    if (connsm->conn_itvl_usecs == 31) {
   1ecec:	281f      	cmp	r0, #31
   1ecee:	d001      	beq.n	1ecf4 <ble_ll_conn_calc_itvl_ticks+0x2c>
    connsm->conn_itvl_ticks = ticks;
   1ecf0:	67ee      	str	r6, [r5, #124]	; 0x7c
}
   1ecf2:	bd70      	pop	{r4, r5, r6, pc}
        connsm->conn_itvl_usecs = 0;
   1ecf4:	2300      	movs	r3, #0
   1ecf6:	f885 3079 	strb.w	r3, [r5, #121]	; 0x79
        ++ticks;
   1ecfa:	3601      	adds	r6, #1
   1ecfc:	e7f8      	b.n	1ecf0 <ble_ll_conn_calc_itvl_ticks+0x28>

0001ecfe <ble_ll_conn_can_send_next_pdu>:
{
   1ecfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   1ed00:	79c3      	ldrb	r3, [r0, #7]
   1ed02:	2b01      	cmp	r3, #1
   1ed04:	d001      	beq.n	1ed0a <ble_ll_conn_can_send_next_pdu+0xc>
    rc = 1;
   1ed06:	2001      	movs	r0, #1
}
   1ed08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ed0a:	4616      	mov	r6, r2
   1ed0c:	460d      	mov	r5, r1
   1ed0e:	4604      	mov	r4, r0
        next_sched_time = ble_ll_conn_get_next_sched_time(connsm);
   1ed10:	f7ff fce4 	bl	1e6dc <ble_ll_conn_get_next_sched_time>
   1ed14:	4607      	mov	r7, r0
        txpdu = connsm->cur_tx_pdu;
   1ed16:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
        if (!txpdu) {
   1ed1a:	b1ca      	cbz	r2, 1ed50 <ble_ll_conn_can_send_next_pdu+0x52>
            pkthdr = OS_MBUF_PKTHDR(txpdu);
   1ed1c:	f102 0310 	add.w	r3, r2, #16
        if (txpdu) {
   1ed20:	b1ea      	cbz	r2, 1ed5e <ble_ll_conn_can_send_next_pdu+0x60>
            rem_bytes = pkthdr->omp_len - txhdr->txinfo.offset;
   1ed22:	781b      	ldrb	r3, [r3, #0]
   1ed24:	7e52      	ldrb	r2, [r2, #25]
   1ed26:	1a9b      	subs	r3, r3, r2
   1ed28:	b2db      	uxtb	r3, r3
            if (rem_bytes > connsm->eff_max_tx_octets) {
   1ed2a:	7ba0      	ldrb	r0, [r4, #14]
   1ed2c:	4298      	cmp	r0, r3
   1ed2e:	d300      	bcc.n	1ed32 <ble_ll_conn_can_send_next_pdu+0x34>
            rem_bytes = pkthdr->omp_len - txhdr->txinfo.offset;
   1ed30:	4618      	mov	r0, r3
            usecs = ble_ll_pdu_tx_time_get(rem_bytes, tx_phy_mode);
   1ed32:	2101      	movs	r1, #1
   1ed34:	f7fe faec 	bl	1d310 <ble_ll_pdu_tx_time_get>
        usecs += (BLE_LL_IFS * 2) + connsm->eff_max_rx_time;
   1ed38:	8b64      	ldrh	r4, [r4, #26]
   1ed3a:	4420      	add	r0, r4
   1ed3c:	f500 7496 	add.w	r4, r0, #300	; 0x12c
        allowed_usecs = os_cputime_ticks_to_usecs(ticks);
   1ed40:	1b78      	subs	r0, r7, r5
   1ed42:	f7fd f823 	bl	1bd8c <os_cputime_ticks_to_usecs>
        if ((usecs + add_usecs) >= allowed_usecs) {
   1ed46:	4434      	add	r4, r6
   1ed48:	4284      	cmp	r4, r0
   1ed4a:	d30d      	bcc.n	1ed68 <ble_ll_conn_can_send_next_pdu+0x6a>
            rc = 0;
   1ed4c:	2000      	movs	r0, #0
    return rc;
   1ed4e:	e7db      	b.n	1ed08 <ble_ll_conn_can_send_next_pdu+0xa>
            pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   1ed50:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
            if (pkthdr) {
   1ed54:	2b00      	cmp	r3, #0
   1ed56:	d0e3      	beq.n	1ed20 <ble_ll_conn_can_send_next_pdu+0x22>
                txpdu = OS_MBUF_PKTHDR_TO_MBUF(pkthdr);
   1ed58:	f1a3 0210 	sub.w	r2, r3, #16
   1ed5c:	e7e0      	b.n	1ed20 <ble_ll_conn_can_send_next_pdu+0x22>
            usecs = ble_ll_pdu_tx_time_get(0, tx_phy_mode);
   1ed5e:	2101      	movs	r1, #1
   1ed60:	2000      	movs	r0, #0
   1ed62:	f7fe fad5 	bl	1d310 <ble_ll_pdu_tx_time_get>
   1ed66:	e7e7      	b.n	1ed38 <ble_ll_conn_can_send_next_pdu+0x3a>
    rc = 1;
   1ed68:	2001      	movs	r0, #1
   1ed6a:	e7cd      	b.n	1ed08 <ble_ll_conn_can_send_next_pdu+0xa>

0001ed6c <ble_ll_conn_chk_csm_flags>:
{
   1ed6c:	b510      	push	{r4, lr}
   1ed6e:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.send_ltk_req) {
   1ed70:	7883      	ldrb	r3, [r0, #2]
   1ed72:	f013 0f01 	tst.w	r3, #1
   1ed76:	d114      	bne.n	1eda2 <ble_ll_conn_chk_csm_flags+0x36>
    if (connsm->csmflags.cfbit.host_expects_upd_event) {
   1ed78:	7863      	ldrb	r3, [r4, #1]
   1ed7a:	f013 0f02 	tst.w	r3, #2
   1ed7e:	d00f      	beq.n	1eda0 <ble_ll_conn_chk_csm_flags+0x34>
        if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE)) {
   1ed80:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   1ed84:	f013 0f01 	tst.w	r3, #1
   1ed88:	d119      	bne.n	1edbe <ble_ll_conn_chk_csm_flags+0x52>
            if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   1ed8a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1ed8e:	d11c      	bne.n	1edca <ble_ll_conn_chk_csm_flags+0x5e>
        update_status = BLE_ERR_SUCCESS;
   1ed90:	2100      	movs	r1, #0
        ble_ll_hci_ev_conn_update(connsm, update_status);
   1ed92:	4620      	mov	r0, r4
   1ed94:	f003 ffa1 	bl	22cda <ble_ll_hci_ev_conn_update>
        connsm->csmflags.cfbit.host_expects_upd_event = 0;
   1ed98:	7863      	ldrb	r3, [r4, #1]
   1ed9a:	f36f 0341 	bfc	r3, #1, #1
   1ed9e:	7063      	strb	r3, [r4, #1]
}
   1eda0:	bd10      	pop	{r4, pc}
        if (ble_ll_hci_ev_ltk_req(connsm)) {
   1eda2:	f003 fff5 	bl	22d90 <ble_ll_hci_ev_ltk_req>
   1eda6:	b920      	cbnz	r0, 1edb2 <ble_ll_conn_chk_csm_flags+0x46>
        connsm->csmflags.cfbit.send_ltk_req = 0;
   1eda8:	78a3      	ldrb	r3, [r4, #2]
   1edaa:	f36f 0300 	bfc	r3, #0, #1
   1edae:	70a3      	strb	r3, [r4, #2]
   1edb0:	e7e2      	b.n	1ed78 <ble_ll_conn_chk_csm_flags+0xc>
            ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   1edb2:	2206      	movs	r2, #6
   1edb4:	2103      	movs	r1, #3
   1edb6:	4620      	mov	r0, r4
   1edb8:	f003 fa02 	bl	221c0 <ble_ll_ctrl_reject_ind_send>
   1edbc:	e7f4      	b.n	1eda8 <ble_ll_conn_chk_csm_flags+0x3c>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_UPDATE);
   1edbe:	2100      	movs	r1, #0
   1edc0:	4620      	mov	r0, r4
   1edc2:	f002 fed5 	bl	21b70 <ble_ll_ctrl_proc_stop>
        update_status = BLE_ERR_SUCCESS;
   1edc6:	2100      	movs	r1, #0
   1edc8:	e7e3      	b.n	1ed92 <ble_ll_conn_chk_csm_flags+0x26>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   1edca:	2106      	movs	r1, #6
   1edcc:	4620      	mov	r0, r4
   1edce:	f002 fecf 	bl	21b70 <ble_ll_ctrl_proc_stop>
                update_status = connsm->reject_reason;
   1edd2:	f894 1037 	ldrb.w	r1, [r4, #55]	; 0x37
   1edd6:	e7dc      	b.n	1ed92 <ble_ll_conn_chk_csm_flags+0x26>

0001edd8 <ble_ll_conn_connect_ind_tx_pducb>:

static uint8_t
ble_ll_conn_connect_ind_tx_pducb(uint8_t *dptr, void *pducb_arg, uint8_t *hdr_byte)
{
   1edd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1edda:	4604      	mov	r4, r0
   1eddc:	460d      	mov	r5, r1
   1edde:	4617      	mov	r7, r2
    connsm = pducb_arg;
    /*
     * pdu_data was prepared just before starting TX and is expected to be
     * still valid here
     */
    pdu_data = ble_ll_scan_get_pdu_data();
   1ede0:	f005 fe72 	bl	24ac8 <ble_ll_scan_get_pdu_data>
   1ede4:	4606      	mov	r6, r0

    memcpy(dptr, pdu_data->inita, BLE_DEV_ADDR_LEN);
   1ede6:	4603      	mov	r3, r0
   1ede8:	f853 2f01 	ldr.w	r2, [r3, #1]!
   1edec:	6022      	str	r2, [r4, #0]
   1edee:	889b      	ldrh	r3, [r3, #4]
   1edf0:	80a3      	strh	r3, [r4, #4]
    memcpy(dptr + BLE_DEV_ADDR_LEN, pdu_data->adva, BLE_DEV_ADDR_LEN);
   1edf2:	4603      	mov	r3, r0
   1edf4:	f853 2f07 	ldr.w	r2, [r3, #7]!
   1edf8:	f8c4 2006 	str.w	r2, [r4, #6]
   1edfc:	889b      	ldrh	r3, [r3, #4]
   1edfe:	8163      	strh	r3, [r4, #10]

    dptr += 2 * BLE_DEV_ADDR_LEN;

    put_le32(dptr, connsm->access_addr);
   1ee00:	6d69      	ldr	r1, [r5, #84]	; 0x54
   1ee02:	f104 000c 	add.w	r0, r4, #12
   1ee06:	f7fc feef 	bl	1bbe8 <put_le32>
    dptr[4] = (uint8_t)connsm->crcinit;
   1ee0a:	f895 3058 	ldrb.w	r3, [r5, #88]	; 0x58
   1ee0e:	7423      	strb	r3, [r4, #16]
    dptr[5] = (uint8_t)(connsm->crcinit >> 8);
   1ee10:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
   1ee14:	7463      	strb	r3, [r4, #17]
    dptr[6] = (uint8_t)(connsm->crcinit >> 16);
   1ee16:	f895 305a 	ldrb.w	r3, [r5, #90]	; 0x5a
   1ee1a:	74a3      	strb	r3, [r4, #18]
    dptr[7] = connsm->tx_win_size;
   1ee1c:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1ee20:	74e3      	strb	r3, [r4, #19]
    put_le16(dptr + 8, connsm->tx_win_off);
   1ee22:	f8b5 1072 	ldrh.w	r1, [r5, #114]	; 0x72
   1ee26:	f104 0014 	add.w	r0, r4, #20
   1ee2a:	f7fc fed9 	bl	1bbe0 <put_le16>
    put_le16(dptr + 10, connsm->conn_itvl);
   1ee2e:	f8b5 1068 	ldrh.w	r1, [r5, #104]	; 0x68
   1ee32:	f104 0016 	add.w	r0, r4, #22
   1ee36:	f7fc fed3 	bl	1bbe0 <put_le16>
    put_le16(dptr + 12, connsm->slave_latency);
   1ee3a:	f8b5 106a 	ldrh.w	r1, [r5, #106]	; 0x6a
   1ee3e:	f104 0018 	add.w	r0, r4, #24
   1ee42:	f7fc fecd 	bl	1bbe0 <put_le16>
    put_le16(dptr + 14, connsm->supervision_tmo);
   1ee46:	f8b5 106c 	ldrh.w	r1, [r5, #108]	; 0x6c
   1ee4a:	f104 001a 	add.w	r0, r4, #26
   1ee4e:	f7fc fec7 	bl	1bbe0 <put_le16>
    memcpy(dptr + 16, &connsm->chanmap, BLE_LL_CONN_CHMAP_LEN);
   1ee52:	462b      	mov	r3, r5
   1ee54:	f853 2f20 	ldr.w	r2, [r3, #32]!
   1ee58:	61e2      	str	r2, [r4, #28]
   1ee5a:	791b      	ldrb	r3, [r3, #4]
   1ee5c:	f884 3020 	strb.w	r3, [r4, #32]
    dptr[21] = connsm->hop_inc | (connsm->master_sca << 5);
   1ee60:	f995 302e 	ldrsb.w	r3, [r5, #46]	; 0x2e
   1ee64:	f895 2039 	ldrb.w	r2, [r5, #57]	; 0x39
   1ee68:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   1ee6c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

    *hdr_byte = pdu_data->hdr_byte;
   1ee70:	7833      	ldrb	r3, [r6, #0]
   1ee72:	703b      	strb	r3, [r7, #0]

    return 34;
}
   1ee74:	2022      	movs	r0, #34	; 0x22
   1ee76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001ee78 <ble_ll_conn_is_peer_adv>:
{
   1ee78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    connsm = g_ble_ll_conn_create_sm;
   1ee7a:	4b3f      	ldr	r3, [pc, #252]	; (1ef78 <ble_ll_conn_is_peer_adv+0x100>)
   1ee7c:	681d      	ldr	r5, [r3, #0]
    if (!connsm) {
   1ee7e:	2d00      	cmp	r5, #0
   1ee80:	d06d      	beq.n	1ef5e <ble_ll_conn_is_peer_adv+0xe6>
   1ee82:	4614      	mov	r4, r2
   1ee84:	460f      	mov	r7, r1
   1ee86:	4606      	mov	r6, r0
    switch (connsm->peer_addr_type) {
   1ee88:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   1ee8c:	2b03      	cmp	r3, #3
   1ee8e:	d868      	bhi.n	1ef62 <ble_ll_conn_is_peer_adv+0xea>
   1ee90:	e8df f003 	tbb	[pc, r3]
   1ee94:	51420202 	.word	0x51420202
        if (ble_ll_addr_is_id(adva, addr_type)) {
   1ee98:	4601      	mov	r1, r0
   1ee9a:	4638      	mov	r0, r7
   1ee9c:	f7fe f826 	bl	1ceec <ble_ll_addr_is_id>
   1eea0:	b9d0      	cbnz	r0, 1eed8 <ble_ll_conn_is_peer_adv+0x60>
        if ((index >= 0) &&
   1eea2:	2c00      	cmp	r4, #0
   1eea4:	db32      	blt.n	1ef0c <ble_ll_conn_is_peer_adv+0x94>
                (g_ble_ll_resolv_list[index].rl_addr_type == connsm->peer_addr_type)) {
   1eea6:	2336      	movs	r3, #54	; 0x36
   1eea8:	fb03 f304 	mul.w	r3, r3, r4
   1eeac:	4a33      	ldr	r2, [pc, #204]	; (1ef7c <ble_ll_conn_is_peer_adv+0x104>)
   1eeae:	5cd2      	ldrb	r2, [r2, r3]
   1eeb0:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
        if ((index >= 0) &&
   1eeb4:	429a      	cmp	r2, r3
   1eeb6:	d021      	beq.n	1eefc <ble_ll_conn_is_peer_adv+0x84>
    uint8_t *peer_addr = NULL;
   1eeb8:	2000      	movs	r0, #0
        if ((connsm->peer_addr_type == addr_type) && !peer_addr) {
   1eeba:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   1eebe:	42b3      	cmp	r3, r6
   1eec0:	d026      	beq.n	1ef10 <ble_ll_conn_is_peer_adv+0x98>
    if (peer_addr) {
   1eec2:	2800      	cmp	r0, #0
   1eec4:	d055      	beq.n	1ef72 <ble_ll_conn_is_peer_adv+0xfa>
        if (!memcmp(peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN)) {
   1eec6:	2206      	movs	r2, #6
   1eec8:	f105 0193 	add.w	r1, r5, #147	; 0x93
   1eecc:	f7ec fc4a 	bl	b764 <memcmp>
   1eed0:	2800      	cmp	r0, #0
   1eed2:	d142      	bne.n	1ef5a <ble_ll_conn_is_peer_adv+0xe2>
            rc = 1;
   1eed4:	2001      	movs	r0, #1
   1eed6:	e043      	b.n	1ef60 <ble_ll_conn_is_peer_adv+0xe8>
            if (ble_ll_resolv_enabled()) {
   1eed8:	f004 fbc6 	bl	23668 <ble_ll_resolv_enabled>
   1eedc:	2800      	cmp	r0, #0
   1eede:	d0e0      	beq.n	1eea2 <ble_ll_conn_is_peer_adv+0x2a>
                rl = ble_ll_resolv_list_find(adva, addr_type);
   1eee0:	4631      	mov	r1, r6
   1eee2:	4638      	mov	r0, r7
   1eee4:	f004 f96a 	bl	231bc <ble_ll_resolv_list_find>
                if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1eee8:	2800      	cmp	r0, #0
   1eeea:	d0da      	beq.n	1eea2 <ble_ll_conn_is_peer_adv+0x2a>
   1eeec:	7842      	ldrb	r2, [r0, #1]
   1eeee:	2a00      	cmp	r2, #0
   1eef0:	d1d7      	bne.n	1eea2 <ble_ll_conn_is_peer_adv+0x2a>
                    rl->rl_has_peer) {
   1eef2:	78c3      	ldrb	r3, [r0, #3]
                if (rl && (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1eef4:	2b00      	cmp	r3, #0
   1eef6:	d0d4      	beq.n	1eea2 <ble_ll_conn_is_peer_adv+0x2a>
                    return 0;
   1eef8:	2000      	movs	r0, #0
   1eefa:	e031      	b.n	1ef60 <ble_ll_conn_is_peer_adv+0xe8>
            peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   1eefc:	2036      	movs	r0, #54	; 0x36
   1eefe:	fb00 f004 	mul.w	r0, r0, r4
   1ef02:	3020      	adds	r0, #32
   1ef04:	4b1d      	ldr	r3, [pc, #116]	; (1ef7c <ble_ll_conn_is_peer_adv+0x104>)
   1ef06:	4418      	add	r0, r3
   1ef08:	3004      	adds	r0, #4
   1ef0a:	e7d6      	b.n	1eeba <ble_ll_conn_is_peer_adv+0x42>
    uint8_t *peer_addr = NULL;
   1ef0c:	2000      	movs	r0, #0
   1ef0e:	e7d4      	b.n	1eeba <ble_ll_conn_is_peer_adv+0x42>
        if ((connsm->peer_addr_type == addr_type) && !peer_addr) {
   1ef10:	2800      	cmp	r0, #0
   1ef12:	d1d6      	bne.n	1eec2 <ble_ll_conn_is_peer_adv+0x4a>
            peer_addr = adva;
   1ef14:	4638      	mov	r0, r7
   1ef16:	e7d4      	b.n	1eec2 <ble_ll_conn_is_peer_adv+0x4a>
        if ((index < 0) ||
   1ef18:	2c00      	cmp	r4, #0
   1ef1a:	db24      	blt.n	1ef66 <ble_ll_conn_is_peer_adv+0xee>
            (g_ble_ll_resolv_list[index].rl_addr_type != 0)) {
   1ef1c:	2336      	movs	r3, #54	; 0x36
   1ef1e:	fb03 f304 	mul.w	r3, r3, r4
   1ef22:	4a16      	ldr	r2, [pc, #88]	; (1ef7c <ble_ll_conn_is_peer_adv+0x104>)
   1ef24:	5cd3      	ldrb	r3, [r2, r3]
        if ((index < 0) ||
   1ef26:	bb03      	cbnz	r3, 1ef6a <ble_ll_conn_is_peer_adv+0xf2>
        peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   1ef28:	2036      	movs	r0, #54	; 0x36
   1ef2a:	fb00 f004 	mul.w	r0, r0, r4
   1ef2e:	3020      	adds	r0, #32
   1ef30:	4410      	add	r0, r2
   1ef32:	3004      	adds	r0, #4
        break;
   1ef34:	e7c5      	b.n	1eec2 <ble_ll_conn_is_peer_adv+0x4a>
        if ((index < 0) ||
   1ef36:	2c00      	cmp	r4, #0
   1ef38:	db19      	blt.n	1ef6e <ble_ll_conn_is_peer_adv+0xf6>
            (g_ble_ll_resolv_list[index].rl_addr_type != 1)) {
   1ef3a:	2336      	movs	r3, #54	; 0x36
   1ef3c:	fb03 f304 	mul.w	r3, r3, r4
   1ef40:	4a0e      	ldr	r2, [pc, #56]	; (1ef7c <ble_ll_conn_is_peer_adv+0x104>)
   1ef42:	5cd3      	ldrb	r3, [r2, r3]
        if ((index < 0) ||
   1ef44:	2b01      	cmp	r3, #1
   1ef46:	d001      	beq.n	1ef4c <ble_ll_conn_is_peer_adv+0xd4>
            return 0;
   1ef48:	2000      	movs	r0, #0
   1ef4a:	e009      	b.n	1ef60 <ble_ll_conn_is_peer_adv+0xe8>
        peer_addr = g_ble_ll_resolv_list[index].rl_identity_addr;
   1ef4c:	2036      	movs	r0, #54	; 0x36
   1ef4e:	fb00 f004 	mul.w	r0, r0, r4
   1ef52:	3020      	adds	r0, #32
   1ef54:	4410      	add	r0, r2
   1ef56:	3004      	adds	r0, #4
        break;
   1ef58:	e7b3      	b.n	1eec2 <ble_ll_conn_is_peer_adv+0x4a>
    rc = 0;
   1ef5a:	2000      	movs	r0, #0
   1ef5c:	e000      	b.n	1ef60 <ble_ll_conn_is_peer_adv+0xe8>
        return 0;
   1ef5e:	2000      	movs	r0, #0
}
   1ef60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rc = 0;
   1ef62:	2000      	movs	r0, #0
   1ef64:	e7fc      	b.n	1ef60 <ble_ll_conn_is_peer_adv+0xe8>
            return 0;
   1ef66:	2000      	movs	r0, #0
   1ef68:	e7fa      	b.n	1ef60 <ble_ll_conn_is_peer_adv+0xe8>
   1ef6a:	2000      	movs	r0, #0
   1ef6c:	e7f8      	b.n	1ef60 <ble_ll_conn_is_peer_adv+0xe8>
            return 0;
   1ef6e:	2000      	movs	r0, #0
   1ef70:	e7f6      	b.n	1ef60 <ble_ll_conn_is_peer_adv+0xe8>
    rc = 0;
   1ef72:	2000      	movs	r0, #0
   1ef74:	e7f4      	b.n	1ef60 <ble_ll_conn_is_peer_adv+0xe8>
   1ef76:	bf00      	nop
   1ef78:	200087ec 	.word	0x200087ec
   1ef7c:	20008a40 	.word	0x20008a40

0001ef80 <ble_ll_conn_connect_ind_prepare>:
{
   1ef80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ef84:	460c      	mov	r4, r1
   1ef86:	461d      	mov	r5, r3
   1ef88:	f89d 1020 	ldrb.w	r1, [sp, #32]
   1ef8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    if (adva_type) {
   1ef8e:	4690      	mov	r8, r2
   1ef90:	b99a      	cbnz	r2, 1efba <ble_ll_conn_connect_ind_prepare+0x3a>
    hdr = BLE_ADV_PDU_TYPE_CONNECT_IND;
   1ef92:	2605      	movs	r6, #5
    if (inita) {
   1ef94:	b19b      	cbz	r3, 1efbe <ble_ll_conn_connect_ind_prepare+0x3e>
        memcpy(pdu_data->inita, inita, BLE_DEV_ADDR_LEN);
   1ef96:	681a      	ldr	r2, [r3, #0]
   1ef98:	f8c4 2001 	str.w	r2, [r4, #1]
   1ef9c:	889b      	ldrh	r3, [r3, #4]
   1ef9e:	f8a4 3005 	strh.w	r3, [r4, #5]
        if (inita_type) {
   1efa2:	b109      	cbz	r1, 1efa8 <ble_ll_conn_connect_ind_prepare+0x28>
            hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1efa4:	f046 0640 	orr.w	r6, r6, #64	; 0x40
    memcpy(pdu_data->adva, adva, BLE_DEV_ADDR_LEN);
   1efa8:	682b      	ldr	r3, [r5, #0]
   1efaa:	f8c4 3007 	str.w	r3, [r4, #7]
   1efae:	88ab      	ldrh	r3, [r5, #4]
   1efb0:	f8a4 300b 	strh.w	r3, [r4, #11]
    pdu_data->hdr_byte = hdr;
   1efb4:	7026      	strb	r6, [r4, #0]
}
   1efb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hdr |= BLE_ADV_PDU_HDR_RXADD_MASK;
   1efba:	2685      	movs	r6, #133	; 0x85
   1efbc:	e7ea      	b.n	1ef94 <ble_ll_conn_connect_ind_prepare+0x14>
        connsm = g_ble_ll_conn_create_sm;
   1efbe:	4b1c      	ldr	r3, [pc, #112]	; (1f030 <ble_ll_conn_connect_ind_prepare+0xb0>)
   1efc0:	f8d3 9000 	ldr.w	r9, [r3]
        if ((connsm->own_addr_type & 1) == 0) {
   1efc4:	f899 3091 	ldrb.w	r3, [r9, #145]	; 0x91
   1efc8:	f013 0f01 	tst.w	r3, #1
   1efcc:	d010      	beq.n	1eff0 <ble_ll_conn_connect_ind_prepare+0x70>
            hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1efce:	f046 0640 	orr.w	r6, r6, #64	; 0x40
            addr = g_random_addr;
   1efd2:	4f18      	ldr	r7, [pc, #96]	; (1f034 <ble_ll_conn_connect_ind_prepare+0xb4>)
        if (connsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   1efd4:	2b01      	cmp	r3, #1
   1efd6:	d80d      	bhi.n	1eff4 <ble_ll_conn_connect_ind_prepare+0x74>
        if (addr) {
   1efd8:	2f00      	cmp	r7, #0
   1efda:	d0e5      	beq.n	1efa8 <ble_ll_conn_connect_ind_prepare+0x28>
            memcpy(pdu_data->inita, addr, BLE_DEV_ADDR_LEN);
   1efdc:	683b      	ldr	r3, [r7, #0]
   1efde:	f8c4 3001 	str.w	r3, [r4, #1]
   1efe2:	88bb      	ldrh	r3, [r7, #4]
   1efe4:	f8a4 3005 	strh.w	r3, [r4, #5]
            connsm->inita_identity_used = 1;
   1efe8:	2301      	movs	r3, #1
   1efea:	f889 3090 	strb.w	r3, [r9, #144]	; 0x90
   1efee:	e7db      	b.n	1efa8 <ble_ll_conn_connect_ind_prepare+0x28>
            addr = g_dev_addr;
   1eff0:	4f11      	ldr	r7, [pc, #68]	; (1f038 <ble_ll_conn_connect_ind_prepare+0xb8>)
   1eff2:	e7ef      	b.n	1efd4 <ble_ll_conn_connect_ind_prepare+0x54>
            is_rpa = ble_ll_is_rpa(adva, adva_type);
   1eff4:	4641      	mov	r1, r8
   1eff6:	4628      	mov	r0, r5
   1eff8:	f7fd ff6c 	bl	1ced4 <ble_ll_is_rpa>
            if (is_rpa) {
   1effc:	b198      	cbz	r0, 1f026 <ble_ll_conn_connect_ind_prepare+0xa6>
                if (rpa_index >= 0) {
   1effe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1f000:	2b00      	cmp	r3, #0
   1f002:	dbe9      	blt.n	1efd8 <ble_ll_conn_connect_ind_prepare+0x58>
                    rl = &g_ble_ll_resolv_list[rpa_index];
   1f004:	2336      	movs	r3, #54	; 0x36
   1f006:	480d      	ldr	r0, [pc, #52]	; (1f03c <ble_ll_conn_connect_ind_prepare+0xbc>)
   1f008:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1f00a:	fb03 0002 	mla	r0, r3, r2, r0
            if (rl && rl->rl_has_local) {
   1f00e:	2800      	cmp	r0, #0
   1f010:	d0e2      	beq.n	1efd8 <ble_ll_conn_connect_ind_prepare+0x58>
   1f012:	7883      	ldrb	r3, [r0, #2]
   1f014:	2b00      	cmp	r3, #0
   1f016:	d0df      	beq.n	1efd8 <ble_ll_conn_connect_ind_prepare+0x58>
                hdr |= BLE_ADV_PDU_HDR_TXADD_RAND;
   1f018:	f046 0640 	orr.w	r6, r6, #64	; 0x40
                ble_ll_resolv_get_priv_addr(rl, 1, pdu_data->inita);
   1f01c:	1c62      	adds	r2, r4, #1
   1f01e:	2101      	movs	r1, #1
   1f020:	f004 fa66 	bl	234f0 <ble_ll_resolv_get_priv_addr>
   1f024:	e7c0      	b.n	1efa8 <ble_ll_conn_connect_ind_prepare+0x28>
                 rl = ble_ll_resolv_list_find(adva, adva_type);
   1f026:	4641      	mov	r1, r8
   1f028:	4628      	mov	r0, r5
   1f02a:	f004 f8c7 	bl	231bc <ble_ll_resolv_list_find>
   1f02e:	e7ee      	b.n	1f00e <ble_ll_conn_connect_ind_prepare+0x8e>
   1f030:	200087ec 	.word	0x200087ec
   1f034:	20008758 	.word	0x20008758
   1f038:	20008750 	.word	0x20008750
   1f03c:	20008a40 	.word	0x20008a40

0001f040 <ble_ll_conn_is_lru>:
    if ((int32_t)(s1->last_scheduled - s2->last_scheduled) < 0) {
   1f040:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1f042:	6e4a      	ldr	r2, [r1, #100]	; 0x64
   1f044:	1a9b      	subs	r3, r3, r2
   1f046:	2b00      	cmp	r3, #0
   1f048:	db01      	blt.n	1f04e <ble_ll_conn_is_lru+0xe>
        rc = 0;
   1f04a:	2000      	movs	r0, #0
}
   1f04c:	4770      	bx	lr
        rc = 1;
   1f04e:	2001      	movs	r0, #1
   1f050:	4770      	bx	lr
	...

0001f054 <ble_ll_conn_get_ce_end_time>:
{
   1f054:	b508      	push	{r3, lr}
    if (g_ble_ll_conn_cur_sm) {
   1f056:	4b04      	ldr	r3, [pc, #16]	; (1f068 <ble_ll_conn_get_ce_end_time+0x14>)
   1f058:	681b      	ldr	r3, [r3, #0]
   1f05a:	b10b      	cbz	r3, 1f060 <ble_ll_conn_get_ce_end_time+0xc>
        ce_end_time = g_ble_ll_conn_cur_sm->ce_end_time;
   1f05c:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
}
   1f05e:	bd08      	pop	{r3, pc}
        ce_end_time = os_cputime_get32();
   1f060:	f7fc fe75 	bl	1bd4e <os_cputime_get32>
    return ce_end_time;
   1f064:	e7fb      	b.n	1f05e <ble_ll_conn_get_ce_end_time+0xa>
   1f066:	bf00      	nop
   1f068:	200087f0 	.word	0x200087f0

0001f06c <ble_ll_conn_find_active_conn>:
    if ((handle != 0) && (handle <= MYNEWT_VAL(BLE_MAX_CONNECTIONS))) {
   1f06c:	2801      	cmp	r0, #1
   1f06e:	d108      	bne.n	1f082 <ble_ll_conn_find_active_conn+0x16>
        connsm = &g_ble_ll_conn_sm[handle - 1];
   1f070:	3801      	subs	r0, #1
   1f072:	4b06      	ldr	r3, [pc, #24]	; (1f08c <ble_ll_conn_find_active_conn+0x20>)
   1f074:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   1f078:	fb02 3000 	mla	r0, r2, r0, r3
        if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   1f07c:	7983      	ldrb	r3, [r0, #6]
   1f07e:	b113      	cbz	r3, 1f086 <ble_ll_conn_find_active_conn+0x1a>
}
   1f080:	4770      	bx	lr
    connsm = NULL;
   1f082:	2000      	movs	r0, #0
   1f084:	4770      	bx	lr
            connsm = NULL;
   1f086:	2000      	movs	r0, #0
    return connsm;
   1f088:	e7fa      	b.n	1f080 <ble_ll_conn_find_active_conn+0x14>
   1f08a:	bf00      	nop
   1f08c:	20008818 	.word	0x20008818

0001f090 <ble_ll_conn_sm_get>:
    connsm = STAILQ_FIRST(&g_ble_ll_conn_free_list);
   1f090:	4b05      	ldr	r3, [pc, #20]	; (1f0a8 <ble_ll_conn_sm_get+0x18>)
   1f092:	6818      	ldr	r0, [r3, #0]
    if (connsm) {
   1f094:	b120      	cbz	r0, 1f0a0 <ble_ll_conn_sm_get+0x10>
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   1f096:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1f09a:	4a03      	ldr	r2, [pc, #12]	; (1f0a8 <ble_ll_conn_sm_get+0x18>)
   1f09c:	6013      	str	r3, [r2, #0]
   1f09e:	b103      	cbz	r3, 1f0a2 <ble_ll_conn_sm_get+0x12>
}
   1f0a0:	4770      	bx	lr
        STAILQ_REMOVE_HEAD(&g_ble_ll_conn_free_list, free_stqe);
   1f0a2:	4613      	mov	r3, r2
   1f0a4:	605a      	str	r2, [r3, #4]
    return connsm;
   1f0a6:	e7fb      	b.n	1f0a0 <ble_ll_conn_sm_get+0x10>
   1f0a8:	200087f4 	.word	0x200087f4

0001f0ac <ble_ll_conn_calc_dci>:
{
   1f0ac:	b538      	push	{r3, r4, r5, lr}
   1f0ae:	4605      	mov	r5, r0
   1f0b0:	460c      	mov	r4, r1
    index = conn->data_chan_index;
   1f0b2:	f890 002f 	ldrb.w	r0, [r0, #47]	; 0x2f
    while (latency > 0) {
   1f0b6:	e004      	b.n	1f0c2 <ble_ll_conn_calc_dci+0x16>
        index = ble_ll_conn_calc_dci_csa1(conn);
   1f0b8:	4628      	mov	r0, r5
   1f0ba:	f7ff fa4a 	bl	1e552 <ble_ll_conn_calc_dci_csa1>
        latency--;
   1f0be:	3c01      	subs	r4, #1
   1f0c0:	b2a4      	uxth	r4, r4
    while (latency > 0) {
   1f0c2:	2c00      	cmp	r4, #0
   1f0c4:	d1f8      	bne.n	1f0b8 <ble_ll_conn_calc_dci+0xc>
}
   1f0c6:	bd38      	pop	{r3, r4, r5, pc}

0001f0c8 <ble_ll_conn_next_event>:
{
   1f0c8:	b570      	push	{r4, r5, r6, lr}
   1f0ca:	4604      	mov	r4, r0
    ble_ll_conn_chk_csm_flags(connsm);
   1f0cc:	f7ff fe4e 	bl	1ed6c <ble_ll_conn_chk_csm_flags>
    if (connsm->disconnect_reason && !CONN_F_TERMINATE_STARTED(connsm)) {
   1f0d0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   1f0d4:	b11b      	cbz	r3, 1f0de <ble_ll_conn_next_event+0x16>
   1f0d6:	f994 3000 	ldrsb.w	r3, [r4]
   1f0da:	2b00      	cmp	r3, #0
   1f0dc:	da59      	bge.n	1f192 <ble_ll_conn_next_event+0xca>
    if (CONN_F_TERMINATE_STARTED(connsm) && (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE)) {
   1f0de:	7822      	ldrb	r2, [r4, #0]
   1f0e0:	f012 0f80 	tst.w	r2, #128	; 0x80
   1f0e4:	d159      	bne.n	1f19a <ble_ll_conn_next_event+0xd2>
    itvl = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   1f0e6:	f8b4 0068 	ldrh.w	r0, [r4, #104]	; 0x68
   1f0ea:	f240 45e2 	movw	r5, #1250	; 0x4e2
   1f0ee:	fb05 f500 	mul.w	r5, r5, r0
        !CONN_F_PHY_UPDATE_SCHED(connsm)                &&
   1f0f2:	6821      	ldr	r1, [r4, #0]
   1f0f4:	4b8c      	ldr	r3, [pc, #560]	; (1f328 <ble_ll_conn_next_event+0x260>)
   1f0f6:	400b      	ands	r3, r1
    if (connsm->csmflags.cfbit.allow_slave_latency      &&
   1f0f8:	2b10      	cmp	r3, #16
   1f0fa:	d055      	beq.n	1f1a8 <ble_ll_conn_next_event+0xe0>
    latency = 1;
   1f0fc:	2601      	movs	r6, #1
    connsm->event_cntr += latency;
   1f0fe:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   1f102:	4433      	add	r3, r6
   1f104:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    if (latency == 1) {
   1f108:	2e01      	cmp	r6, #1
   1f10a:	d159      	bne.n	1f1c0 <ble_ll_conn_next_event+0xf8>
        connsm->anchor_point += connsm->conn_itvl_ticks;
   1f10c:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   1f10e:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f110:	4413      	add	r3, r2
   1f112:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs += connsm->conn_itvl_usecs;
   1f114:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
   1f118:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1f11c:	4413      	add	r3, r2
   1f11e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    if (connsm->anchor_point_usecs >= 31) {
   1f122:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1f126:	2b1e      	cmp	r3, #30
   1f128:	d905      	bls.n	1f136 <ble_ll_conn_next_event+0x6e>
        ++connsm->anchor_point;
   1f12a:	6f62      	ldr	r2, [r4, #116]	; 0x74
   1f12c:	3201      	adds	r2, #1
   1f12e:	6762      	str	r2, [r4, #116]	; 0x74
        connsm->anchor_point_usecs -= 31;
   1f130:	3b1f      	subs	r3, #31
   1f132:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    if (connsm->csmflags.cfbit.conn_update_sched &&
   1f136:	7863      	ldrb	r3, [r4, #1]
   1f138:	f013 0f01 	tst.w	r3, #1
   1f13c:	d005      	beq.n	1f14a <ble_ll_conn_next_event+0x82>
        (connsm->event_cntr == connsm->conn_update_req.instant)) {
   1f13e:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
   1f142:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
    if (connsm->csmflags.cfbit.conn_update_sched &&
   1f146:	429a      	cmp	r2, r3
   1f148:	d049      	beq.n	1f1de <ble_ll_conn_next_event+0x116>
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   1f14a:	7863      	ldrb	r3, [r4, #1]
   1f14c:	f013 0f10 	tst.w	r3, #16
   1f150:	d007      	beq.n	1f162 <ble_ll_conn_next_event+0x9a>
        ((int16_t)(connsm->chanmap_instant - connsm->event_cntr) <= 0)) {
   1f152:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
   1f154:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
   1f158:	1a9b      	subs	r3, r3, r2
   1f15a:	b21b      	sxth	r3, r3
    if (connsm->csmflags.cfbit.chanmap_update_scheduled &&
   1f15c:	2b00      	cmp	r3, #0
   1f15e:	f340 80a4 	ble.w	1f2aa <ble_ll_conn_next_event+0x1e2>
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, latency);
   1f162:	4631      	mov	r1, r6
   1f164:	4620      	mov	r0, r4
   1f166:	f7ff ffa1 	bl	1f0ac <ble_ll_conn_calc_dci>
   1f16a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    if (CONN_F_TERMINATE_STARTED(connsm)) {
   1f16e:	f994 3000 	ldrsb.w	r3, [r4]
   1f172:	2b00      	cmp	r3, #0
   1f174:	f2c0 80b0 	blt.w	1f2d8 <ble_ll_conn_next_event+0x210>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   1f178:	79e3      	ldrb	r3, [r4, #7]
   1f17a:	2b02      	cmp	r3, #2
   1f17c:	f000 80b5 	beq.w	1f2ea <ble_ll_conn_next_event+0x222>
    itvl = MYNEWT_VAL(BLE_LL_CONN_INIT_SLOTS) * BLE_LL_SCHED_32KHZ_TICKS_PER_SLOT;
   1f180:	23a4      	movs	r3, #164	; 0xa4
    itvl -= g_ble_ll_sched_offset_ticks;
   1f182:	4a6a      	ldr	r2, [pc, #424]	; (1f32c <ble_ll_conn_next_event+0x264>)
   1f184:	7810      	ldrb	r0, [r2, #0]
   1f186:	1a18      	subs	r0, r3, r0
    connsm->ce_end_time = connsm->anchor_point + itvl;
   1f188:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f18a:	4403      	add	r3, r0
   1f18c:	65e3      	str	r3, [r4, #92]	; 0x5c
    return 0;
   1f18e:	2000      	movs	r0, #0
}
   1f190:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_ctrl_terminate_start(connsm);
   1f192:	4620      	mov	r0, r4
   1f194:	f002 fc4f 	bl	21a36 <ble_ll_ctrl_terminate_start>
   1f198:	e7a1      	b.n	1f0de <ble_ll_conn_next_event+0x16>
    if (CONN_F_TERMINATE_STARTED(connsm) && (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE)) {
   1f19a:	79e3      	ldrb	r3, [r4, #7]
   1f19c:	2b02      	cmp	r3, #2
   1f19e:	d1a2      	bne.n	1f0e6 <ble_ll_conn_next_event+0x1e>
        connsm->slave_latency = 0;
   1f1a0:	2300      	movs	r3, #0
   1f1a2:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
   1f1a6:	e79e      	b.n	1f0e6 <ble_ll_conn_next_event+0x1e>
        if (connsm->csmflags.cfbit.pkt_rxd) {
   1f1a8:	f012 0f01 	tst.w	r2, #1
   1f1ac:	d006      	beq.n	1f1bc <ble_ll_conn_next_event+0xf4>
            latency += connsm->slave_latency;
   1f1ae:	f8b4 606a 	ldrh.w	r6, [r4, #106]	; 0x6a
   1f1b2:	3601      	adds	r6, #1
   1f1b4:	b2b6      	uxth	r6, r6
            itvl = itvl * latency;
   1f1b6:	fb06 f505 	mul.w	r5, r6, r5
   1f1ba:	e7a0      	b.n	1f0fe <ble_ll_conn_next_event+0x36>
    latency = 1;
   1f1bc:	2601      	movs	r6, #1
   1f1be:	e79e      	b.n	1f0fe <ble_ll_conn_next_event+0x36>
        ticks = os_cputime_usecs_to_ticks(itvl);
   1f1c0:	4628      	mov	r0, r5
   1f1c2:	f7fc fddb 	bl	1bd7c <os_cputime_usecs_to_ticks>
        connsm->anchor_point += ticks;
   1f1c6:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f1c8:	4403      	add	r3, r0
   1f1ca:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs += (itvl - os_cputime_ticks_to_usecs(ticks));
   1f1cc:	f7fc fdde 	bl	1bd8c <os_cputime_ticks_to_usecs>
   1f1d0:	1a28      	subs	r0, r5, r0
   1f1d2:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   1f1d6:	4428      	add	r0, r5
   1f1d8:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
   1f1dc:	e7a1      	b.n	1f122 <ble_ll_conn_next_event+0x5a>
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER)  ||
   1f1de:	79e3      	ldrb	r3, [r4, #7]
   1f1e0:	2b01      	cmp	r3, #1
   1f1e2:	d007      	beq.n	1f1f4 <ble_ll_conn_next_event+0x12c>
   1f1e4:	2b02      	cmp	r3, #2
   1f1e6:	d031      	beq.n	1f24c <ble_ll_conn_next_event+0x184>
            (connsm->conn_itvl != upd->interval)            ||
   1f1e8:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   1f1ec:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   1f1f0:	429a      	cmp	r2, r3
   1f1f2:	d031      	beq.n	1f258 <ble_ll_conn_next_event+0x190>
            connsm->csmflags.cfbit.host_expects_upd_event = 1;
   1f1f4:	7863      	ldrb	r3, [r4, #1]
   1f1f6:	f043 0302 	orr.w	r3, r3, #2
   1f1fa:	7063      	strb	r3, [r4, #1]
        connsm->supervision_tmo = upd->timeout;
   1f1fc:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
   1f200:	f8a4 306c 	strh.w	r3, [r4, #108]	; 0x6c
        connsm->slave_latency = upd->latency;
   1f204:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
   1f208:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        connsm->tx_win_size = upd->winsize;
   1f20c:	f894 2176 	ldrb.w	r2, [r4, #374]	; 0x176
   1f210:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   1f214:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1f218:	fb03 f302 	mul.w	r3, r3, r2
        connsm->slave_cur_tx_win_usecs =
   1f21c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        connsm->tx_win_off = upd->winoffset;
   1f220:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   1f224:	f8a4 3072 	strh.w	r3, [r4, #114]	; 0x72
        connsm->conn_itvl = upd->interval;
   1f228:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
   1f22c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
        ble_ll_conn_calc_itvl_ticks(connsm);
   1f230:	4620      	mov	r0, r4
   1f232:	f7ff fd49 	bl	1ecc8 <ble_ll_conn_calc_itvl_ticks>
        if (upd->winoffset != 0) {
   1f236:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
   1f23a:	b9d3      	cbnz	r3, 1f272 <ble_ll_conn_next_event+0x1aa>
        connsm->last_rxd_pdu_cputime = connsm->anchor_point;
   1f23c:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f23e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        connsm->csmflags.cfbit.conn_update_sched = 0;
   1f242:	7863      	ldrb	r3, [r4, #1]
   1f244:	f36f 0300 	bfc	r3, #0, #1
   1f248:	7063      	strb	r3, [r4, #1]
   1f24a:	e77e      	b.n	1f14a <ble_ll_conn_next_event+0x82>
             IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) ||
   1f24c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
            ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   1f250:	f013 0f40 	tst.w	r3, #64	; 0x40
   1f254:	d1ce      	bne.n	1f1f4 <ble_ll_conn_next_event+0x12c>
   1f256:	e7c7      	b.n	1f1e8 <ble_ll_conn_next_event+0x120>
            (connsm->slave_latency != upd->latency)         ||
   1f258:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   1f25c:	f8b4 317c 	ldrh.w	r3, [r4, #380]	; 0x17c
            (connsm->conn_itvl != upd->interval)            ||
   1f260:	429a      	cmp	r2, r3
   1f262:	d1c7      	bne.n	1f1f4 <ble_ll_conn_next_event+0x12c>
            (connsm->supervision_tmo != upd->timeout)) {
   1f264:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   1f268:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
            (connsm->slave_latency != upd->latency)         ||
   1f26c:	429a      	cmp	r2, r3
   1f26e:	d1c1      	bne.n	1f1f4 <ble_ll_conn_next_event+0x12c>
   1f270:	e7c4      	b.n	1f1fc <ble_ll_conn_next_event+0x134>
            usecs = upd->winoffset * BLE_LL_CONN_ITVL_USECS;
   1f272:	f240 45e2 	movw	r5, #1250	; 0x4e2
   1f276:	fb05 f503 	mul.w	r5, r5, r3
            ticks = os_cputime_usecs_to_ticks(usecs);
   1f27a:	4628      	mov	r0, r5
   1f27c:	f7fc fd7e 	bl	1bd7c <os_cputime_usecs_to_ticks>
            connsm->anchor_point += ticks;
   1f280:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f282:	4403      	add	r3, r0
   1f284:	6763      	str	r3, [r4, #116]	; 0x74
            usecs = usecs - os_cputime_ticks_to_usecs(ticks);
   1f286:	f7fc fd81 	bl	1bd8c <os_cputime_ticks_to_usecs>
   1f28a:	1a28      	subs	r0, r5, r0
            connsm->anchor_point_usecs += usecs;
   1f28c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1f290:	4403      	add	r3, r0
   1f292:	b2db      	uxtb	r3, r3
   1f294:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
            if (connsm->anchor_point_usecs >= 31) {
   1f298:	2b1e      	cmp	r3, #30
   1f29a:	d9cf      	bls.n	1f23c <ble_ll_conn_next_event+0x174>
                ++connsm->anchor_point;
   1f29c:	6f62      	ldr	r2, [r4, #116]	; 0x74
   1f29e:	3201      	adds	r2, #1
   1f2a0:	6762      	str	r2, [r4, #116]	; 0x74
                connsm->anchor_point_usecs -= 31;
   1f2a2:	3b1f      	subs	r3, #31
   1f2a4:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1f2a8:	e7c8      	b.n	1f23c <ble_ll_conn_next_event+0x174>
            ble_ll_utils_calc_num_used_chans(connsm->req_chanmap);
   1f2aa:	f104 0525 	add.w	r5, r4, #37	; 0x25
   1f2ae:	4628      	mov	r0, r5
   1f2b0:	f006 f969 	bl	25586 <ble_ll_utils_calc_num_used_chans>
        connsm->num_used_chans =
   1f2b4:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
        memcpy(connsm->chanmap, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   1f2b8:	f8d4 3025 	ldr.w	r3, [r4, #37]	; 0x25
   1f2bc:	6223      	str	r3, [r4, #32]
   1f2be:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
   1f2c2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        connsm->csmflags.cfbit.chanmap_update_scheduled = 0;
   1f2c6:	7863      	ldrb	r3, [r4, #1]
   1f2c8:	f36f 1304 	bfc	r3, #4, #1
   1f2cc:	7063      	strb	r3, [r4, #1]
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
   1f2ce:	2101      	movs	r1, #1
   1f2d0:	4620      	mov	r0, r4
   1f2d2:	f002 fc4d 	bl	21b70 <ble_ll_ctrl_proc_stop>
   1f2d6:	e744      	b.n	1f162 <ble_ll_conn_next_event+0x9a>
        if ((int32_t)(connsm->terminate_timeout - connsm->anchor_point) <= 0) {
   1f2d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1f2da:	6f62      	ldr	r2, [r4, #116]	; 0x74
   1f2dc:	1a9b      	subs	r3, r3, r2
   1f2de:	2b00      	cmp	r3, #0
   1f2e0:	f73f af4a 	bgt.w	1f178 <ble_ll_conn_next_event+0xb0>
            return -1;
   1f2e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f2e8:	e752      	b.n	1f190 <ble_ll_conn_next_event+0xc8>
        cur_ww = ble_ll_utils_calc_window_widening(connsm->anchor_point,
   1f2ea:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
   1f2ee:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   1f2f2:	6f60      	ldr	r0, [r4, #116]	; 0x74
   1f2f4:	f006 f966 	bl	255c4 <ble_ll_utils_calc_window_widening>
        max_ww = (connsm->conn_itvl * (BLE_LL_CONN_ITVL_USECS/2)) - BLE_LL_IFS;
   1f2f8:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   1f2fc:	f240 2371 	movw	r3, #625	; 0x271
   1f300:	fb03 f302 	mul.w	r3, r3, r2
   1f304:	3b96      	subs	r3, #150	; 0x96
        if (cur_ww >= max_ww) {
   1f306:	4298      	cmp	r0, r3
   1f308:	d20a      	bcs.n	1f320 <ble_ll_conn_next_event+0x258>
        cur_ww += BLE_LL_JITTER_USECS;
   1f30a:	3010      	adds	r0, #16
        connsm->slave_cur_window_widening = cur_ww;
   1f30c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
        itvl += os_cputime_usecs_to_ticks(cur_ww + connsm->slave_cur_tx_win_usecs);
   1f310:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   1f314:	4418      	add	r0, r3
   1f316:	f7fc fd31 	bl	1bd7c <os_cputime_usecs_to_ticks>
   1f31a:	f100 03a4 	add.w	r3, r0, #164	; 0xa4
   1f31e:	e730      	b.n	1f182 <ble_ll_conn_next_event+0xba>
            return -1;
   1f320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1f324:	e734      	b.n	1f190 <ble_ll_conn_next_event+0xc8>
   1f326:	bf00      	nop
   1f328:	00401110 	.word	0x00401110
   1f32c:	20008cf0 	.word	0x20008cf0

0001f330 <ble_ll_conn_created>:
{
   1f330:	b570      	push	{r4, r5, r6, lr}
   1f332:	4604      	mov	r4, r0
   1f334:	460d      	mov	r5, r1
    connsm->conn_state = BLE_LL_CONN_STATE_CREATED;
   1f336:	2301      	movs	r3, #1
   1f338:	7183      	strb	r3, [r0, #6]
    connsm->csmflags.cfbit.pkt_rxd = 0;
   1f33a:	7803      	ldrb	r3, [r0, #0]
   1f33c:	f36f 0300 	bfc	r3, #0, #1
   1f340:	7003      	strb	r3, [r0, #0]
    connsm->last_scheduled = os_cputime_get32();
   1f342:	f7fc fd04 	bl	1bd4e <os_cputime_get32>
   1f346:	6660      	str	r0, [r4, #100]	; 0x64
    connsm->last_rxd_pdu_cputime = connsm->last_scheduled;
   1f348:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   1f34c:	79e3      	ldrb	r3, [r4, #7]
   1f34e:	2b02      	cmp	r3, #2
   1f350:	d011      	beq.n	1f376 <ble_ll_conn_created+0x46>
    rc = 1;
   1f352:	2601      	movs	r6, #1
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   1f354:	79e3      	ldrb	r3, [r4, #7]
   1f356:	2b02      	cmp	r3, #2
   1f358:	d06d      	beq.n	1f436 <ble_ll_conn_created+0x106>
            evbuf = ble_ll_init_get_conn_comp_ev();
   1f35a:	f7ff f955 	bl	1e608 <ble_ll_init_get_conn_comp_ev>
            ble_ll_conn_comp_event_send(connsm, BLE_ERR_SUCCESS, evbuf, NULL);
   1f35e:	2300      	movs	r3, #0
   1f360:	4602      	mov	r2, r0
   1f362:	4619      	mov	r1, r3
   1f364:	4620      	mov	r0, r4
   1f366:	f001 f98b 	bl	20680 <ble_ll_conn_comp_event_send>
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   1f36a:	2103      	movs	r1, #3
   1f36c:	4620      	mov	r0, r4
   1f36e:	f002 fb88 	bl	21a82 <ble_ll_ctrl_proc_start>
}
   1f372:	4630      	mov	r0, r6
   1f374:	bd70      	pop	{r4, r5, r6, pc}
        connsm->last_anchor_point = rxhdr->beg_cputime;
   1f376:	68ab      	ldr	r3, [r5, #8]
   1f378:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        usecs = rxhdr->rem_usecs + 1250 +
   1f37c:	68ee      	ldr	r6, [r5, #12]
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   1f37e:	f8b4 0072 	ldrh.w	r0, [r4, #114]	; 0x72
        usecs = rxhdr->rem_usecs + 1250 +
   1f382:	f240 43e2 	movw	r3, #1250	; 0x4e2
   1f386:	fb03 6600 	mla	r6, r3, r0, r6
                ble_ll_pdu_tx_time_get(BLE_CONNECT_REQ_LEN,
   1f38a:	79a9      	ldrb	r1, [r5, #6]
   1f38c:	2022      	movs	r0, #34	; 0x22
   1f38e:	f7fd ffbf 	bl	1d310 <ble_ll_pdu_tx_time_get>
                (connsm->tx_win_off * BLE_LL_CONN_TX_WIN_USECS) +
   1f392:	4430      	add	r0, r6
        usecs = rxhdr->rem_usecs + 1250 +
   1f394:	f200 46e2 	addw	r6, r0, #1250	; 0x4e2
        if (rxhdr->rxinfo.channel < BLE_PHY_NUM_DATA_CHANS) {
   1f398:	78ab      	ldrb	r3, [r5, #2]
   1f39a:	2b24      	cmp	r3, #36	; 0x24
   1f39c:	d80c      	bhi.n	1f3b8 <ble_ll_conn_created+0x88>
            switch (rxhdr->rxinfo.phy) {
   1f39e:	f995 3005 	ldrsb.w	r3, [r5, #5]
   1f3a2:	2b01      	cmp	r3, #1
   1f3a4:	db32      	blt.n	1f40c <ble_ll_conn_created+0xdc>
   1f3a6:	2b02      	cmp	r3, #2
   1f3a8:	dd04      	ble.n	1f3b4 <ble_ll_conn_created+0x84>
   1f3aa:	2b03      	cmp	r3, #3
   1f3ac:	d12e      	bne.n	1f40c <ble_ll_conn_created+0xdc>
                usecs += 2500;
   1f3ae:	f600 66a6 	addw	r6, r0, #3750	; 0xea6
                break;
   1f3b2:	e001      	b.n	1f3b8 <ble_ll_conn_created+0x88>
                usecs += 1250;
   1f3b4:	f600 16c4 	addw	r6, r0, #2500	; 0x9c4
        endtime = os_cputime_usecs_to_ticks(usecs);
   1f3b8:	4630      	mov	r0, r6
   1f3ba:	f7fc fcdf 	bl	1bd7c <os_cputime_usecs_to_ticks>
        connsm->anchor_point = rxhdr->beg_cputime + endtime;
   1f3be:	68ab      	ldr	r3, [r5, #8]
   1f3c0:	4403      	add	r3, r0
   1f3c2:	6763      	str	r3, [r4, #116]	; 0x74
        connsm->anchor_point_usecs = usecs - os_cputime_ticks_to_usecs(endtime);
   1f3c4:	f7fc fce2 	bl	1bd8c <os_cputime_ticks_to_usecs>
   1f3c8:	1a30      	subs	r0, r6, r0
   1f3ca:	b2c0      	uxtb	r0, r0
   1f3cc:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
        if (connsm->anchor_point_usecs == 31) {
   1f3d0:	281f      	cmp	r0, #31
   1f3d2:	d025      	beq.n	1f420 <ble_ll_conn_created+0xf0>
            connsm->tx_win_size * BLE_LL_CONN_TX_WIN_USECS;
   1f3d4:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   1f3d8:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1f3dc:	fb00 f003 	mul.w	r0, r0, r3
        connsm->slave_cur_tx_win_usecs =
   1f3e0:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
        connsm->ce_end_time = connsm->anchor_point +
   1f3e4:	6f66      	ldr	r6, [r4, #116]	; 0x74
            + os_cputime_usecs_to_ticks(connsm->slave_cur_tx_win_usecs) + 1;
   1f3e6:	f7fc fcc9 	bl	1bd7c <os_cputime_usecs_to_ticks>
   1f3ea:	4430      	add	r0, r6
   1f3ec:	30a5      	adds	r0, #165	; 0xa5
        connsm->ce_end_time = connsm->anchor_point +
   1f3ee:	65e0      	str	r0, [r4, #92]	; 0x5c
        connsm->slave_cur_window_widening = BLE_LL_JITTER_USECS;
   1f3f0:	2310      	movs	r3, #16
   1f3f2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        while (ble_ll_sched_slave_new(connsm)) {
   1f3f6:	4620      	mov	r0, r4
   1f3f8:	f005 fdfe 	bl	24ff8 <ble_ll_sched_slave_new>
   1f3fc:	b1b8      	cbz	r0, 1f42e <ble_ll_conn_created+0xfe>
            if (ble_ll_conn_next_event(connsm)) {
   1f3fe:	4620      	mov	r0, r4
   1f400:	f7ff fe62 	bl	1f0c8 <ble_ll_conn_next_event>
   1f404:	2800      	cmp	r0, #0
   1f406:	d0f6      	beq.n	1f3f6 <ble_ll_conn_created+0xc6>
                rc = 0;
   1f408:	2600      	movs	r6, #0
   1f40a:	e011      	b.n	1f430 <ble_ll_conn_created+0x100>
                BLE_LL_ASSERT(0);
   1f40c:	f7e8 fed8 	bl	81c0 <hal_debugger_connected>
   1f410:	b100      	cbz	r0, 1f414 <ble_ll_conn_created+0xe4>
   1f412:	be01      	bkpt	0x0001
   1f414:	2300      	movs	r3, #0
   1f416:	461a      	mov	r2, r3
   1f418:	4619      	mov	r1, r3
   1f41a:	4618      	mov	r0, r3
   1f41c:	f7ea fa66 	bl	98ec <__assert_func>
            ++connsm->anchor_point;
   1f420:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f422:	3301      	adds	r3, #1
   1f424:	6763      	str	r3, [r4, #116]	; 0x74
            connsm->anchor_point_usecs = 0;
   1f426:	2300      	movs	r3, #0
   1f428:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1f42c:	e7d2      	b.n	1f3d4 <ble_ll_conn_created+0xa4>
    rc = 1;
   1f42e:	2601      	movs	r6, #1
    if (rc) {
   1f430:	2e00      	cmp	r6, #0
   1f432:	d18f      	bne.n	1f354 <ble_ll_conn_created+0x24>
   1f434:	e79d      	b.n	1f372 <ble_ll_conn_created+0x42>
            ble_ll_adv_send_conn_comp_ev(connsm, rxhdr);
   1f436:	4629      	mov	r1, r5
   1f438:	4620      	mov	r0, r4
   1f43a:	f7ff f80d 	bl	1e458 <ble_ll_adv_send_conn_comp_ev>
   1f43e:	e798      	b.n	1f372 <ble_ll_conn_created+0x42>

0001f440 <ble_ll_conn_set_csa>:
{
   1f440:	b510      	push	{r4, lr}
   1f442:	4604      	mov	r4, r0
    connsm->last_unmapped_chan = 0;
   1f444:	2300      	movs	r3, #0
   1f446:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
    connsm->data_chan_index = ble_ll_conn_calc_dci(connsm, 1);
   1f44a:	2101      	movs	r1, #1
   1f44c:	f7ff fe2e 	bl	1f0ac <ble_ll_conn_calc_dci>
   1f450:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
}
   1f454:	bd10      	pop	{r4, pc}
	...

0001f458 <ble_ll_conn_wfr_timer_exp>:
{
   1f458:	b508      	push	{r3, lr}
    ble_ll_conn_current_sm_over(connsm);
   1f45a:	4b02      	ldr	r3, [pc, #8]	; (1f464 <ble_ll_conn_wfr_timer_exp+0xc>)
   1f45c:	6818      	ldr	r0, [r3, #0]
   1f45e:	f7ff f8ab 	bl	1e5b8 <ble_ll_conn_current_sm_over>
}
   1f462:	bd08      	pop	{r3, pc}
   1f464:	200087f0 	.word	0x200087f0

0001f468 <ble_ll_conn_reset_pending_aux_conn_rsp>:
}
   1f468:	4770      	bx	lr

0001f46a <ble_ll_conn_init_wfr_timer_exp>:
}
   1f46a:	4770      	bx	lr

0001f46c <ble_ll_conn_auth_pyld_timer_start>:
{
   1f46c:	b510      	push	{r4, lr}
   1f46e:	4604      	mov	r4, r0
    tmo = (int32_t)BLE_LL_CONN_AUTH_PYLD_OS_TMO(connsm->auth_pyld_tmo);
   1f470:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   1f474:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1f478:	0058      	lsls	r0, r3, #1
   1f47a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1f47e:	2300      	movs	r3, #0
   1f480:	01c0      	lsls	r0, r0, #7
   1f482:	2100      	movs	r1, #0
   1f484:	f7ec fd96 	bl	bfb4 <__aeabi_uldivmod>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   1f488:	4601      	mov	r1, r0
   1f48a:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   1f48e:	f7ea fc01 	bl	9c94 <os_callout_reset>
}
   1f492:	bd10      	pop	{r4, pc}

0001f494 <ble_ll_conn_auth_pyld_timer_cb>:
{
   1f494:	b510      	push	{r4, lr}
    return ev->ev.ev_arg;
   1f496:	6884      	ldr	r4, [r0, #8]
    ble_ll_auth_pyld_tmo_event_send(connsm);
   1f498:	4620      	mov	r0, r4
   1f49a:	f001 fa31 	bl	20900 <ble_ll_auth_pyld_tmo_event_send>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_LE_PING);
   1f49e:	2107      	movs	r1, #7
   1f4a0:	4620      	mov	r0, r4
   1f4a2:	f002 faee 	bl	21a82 <ble_ll_ctrl_proc_start>
    ble_ll_conn_auth_pyld_timer_start(connsm);
   1f4a6:	4620      	mov	r0, r4
   1f4a8:	f7ff ffe0 	bl	1f46c <ble_ll_conn_auth_pyld_timer_start>
}
   1f4ac:	bd10      	pop	{r4, pc}

0001f4ae <ble_ll_conn_master_init>:
{
   1f4ae:	b538      	push	{r3, r4, r5, lr}
   1f4b0:	4605      	mov	r5, r0
   1f4b2:	460c      	mov	r4, r1
    ble_ll_conn_master_common_init(connsm);
   1f4b4:	f7ff fbd0 	bl	1ec58 <ble_ll_conn_master_common_init>
    connsm->slave_latency = hcc->conn_latency;
   1f4b8:	8a63      	ldrh	r3, [r4, #18]
   1f4ba:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
    connsm->supervision_tmo = hcc->supervision_timeout;
   1f4be:	8aa3      	ldrh	r3, [r4, #20]
   1f4c0:	f8a5 306c 	strh.w	r3, [r5, #108]	; 0x6c
    connsm->own_addr_type = hcc->own_addr_type;
   1f4c4:	7b23      	ldrb	r3, [r4, #12]
   1f4c6:	f885 3091 	strb.w	r3, [r5, #145]	; 0x91
    if (hcc->filter_policy == 0) {
   1f4ca:	7923      	ldrb	r3, [r4, #4]
   1f4cc:	b173      	cbz	r3, 1f4ec <ble_ll_conn_master_init+0x3e>
    connsm->conn_itvl = hcc->conn_itvl_max;
   1f4ce:	8a23      	ldrh	r3, [r4, #16]
   1f4d0:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    if (hcc->min_ce_len > (connsm->conn_itvl * 2)) {
   1f4d4:	8ae1      	ldrh	r1, [r4, #22]
   1f4d6:	005a      	lsls	r2, r3, #1
   1f4d8:	4291      	cmp	r1, r2
   1f4da:	dd13      	ble.n	1f504 <ble_ll_conn_master_init+0x56>
        connsm->min_ce_len = connsm->conn_itvl * 2;
   1f4dc:	f8a5 206e 	strh.w	r2, [r5, #110]	; 0x6e
    if (hcc->max_ce_len > (connsm->conn_itvl * 2)) {
   1f4e0:	8b21      	ldrh	r1, [r4, #24]
   1f4e2:	428a      	cmp	r2, r1
   1f4e4:	db11      	blt.n	1f50a <ble_ll_conn_master_init+0x5c>
        connsm->max_ce_len = hcc->max_ce_len;
   1f4e6:	f8a5 1070 	strh.w	r1, [r5, #112]	; 0x70
}
   1f4ea:	bd38      	pop	{r3, r4, r5, pc}
        memcpy(&connsm->peer_addr, &hcc->peer_addr, BLE_DEV_ADDR_LEN);
   1f4ec:	4623      	mov	r3, r4
   1f4ee:	f853 2f06 	ldr.w	r2, [r3, #6]!
   1f4f2:	f8c5 2093 	str.w	r2, [r5, #147]	; 0x93
   1f4f6:	889b      	ldrh	r3, [r3, #4]
   1f4f8:	f8a5 3097 	strh.w	r3, [r5, #151]	; 0x97
        connsm->peer_addr_type = hcc->peer_addr_type;
   1f4fc:	7963      	ldrb	r3, [r4, #5]
   1f4fe:	f885 3092 	strb.w	r3, [r5, #146]	; 0x92
   1f502:	e7e4      	b.n	1f4ce <ble_ll_conn_master_init+0x20>
        connsm->min_ce_len = hcc->min_ce_len;
   1f504:	f8a5 106e 	strh.w	r1, [r5, #110]	; 0x6e
   1f508:	e7ea      	b.n	1f4e0 <ble_ll_conn_master_init+0x32>
        connsm->max_ce_len = connsm->conn_itvl * 2;
   1f50a:	005b      	lsls	r3, r3, #1
   1f50c:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
   1f510:	e7eb      	b.n	1f4ea <ble_ll_conn_master_init+0x3c>
	...

0001f514 <ble_ll_conn_sm_new>:
{
   1f514:	b570      	push	{r4, r5, r6, lr}
   1f516:	4604      	mov	r4, r0
    connsm->csmflags.conn_flags = 0;
   1f518:	2500      	movs	r5, #0
   1f51a:	6005      	str	r5, [r0, #0]
    connsm->event_cntr = 0;
   1f51c:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   1f520:	7185      	strb	r5, [r0, #6]
    connsm->disconnect_reason = 0;
   1f522:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    connsm->rxd_disconnect_reason = 0;
   1f526:	f880 503d 	strb.w	r5, [r0, #61]	; 0x3d
    connsm->conn_features = BLE_LL_CONN_INITIAL_FEATURES;
   1f52a:	2322      	movs	r3, #34	; 0x22
   1f52c:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    memset(connsm->remote_features, 0, sizeof(connsm->remote_features));
   1f530:	6405      	str	r5, [r0, #64]	; 0x40
   1f532:	f8c0 5043 	str.w	r5, [r0, #67]	; 0x43
    connsm->vers_nr = 0;
   1f536:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
    connsm->comp_id = 0;
   1f53a:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
    connsm->sub_vers_nr = 0;
   1f53e:	f8a0 5050 	strh.w	r5, [r0, #80]	; 0x50
    connsm->reject_reason = BLE_ERR_SUCCESS;
   1f542:	f880 5037 	strb.w	r5, [r0, #55]	; 0x37
    connsm->conn_rssi = BLE_LL_CONN_UNKNOWN_RSSI;
   1f546:	237f      	movs	r3, #127	; 0x7f
   1f548:	7203      	strb	r3, [r0, #8]
    connsm->rpa_index = -1;
   1f54a:	23ff      	movs	r3, #255	; 0xff
   1f54c:	7243      	strb	r3, [r0, #9]
    connsm->inita_identity_used = 0;
   1f54e:	f880 5090 	strb.w	r5, [r0, #144]	; 0x90
    connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   1f552:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
    connsm->pending_ctrl_procs = 0;
   1f556:	f8a0 5048 	strh.w	r5, [r0, #72]	; 0x48
    connsm->conn_param_req.handle = 0;
   1f55a:	f8a0 5168 	strh.w	r5, [r0, #360]	; 0x168
    memset(ev, 0, sizeof(*ev));
   1f55e:	f8c0 509c 	str.w	r5, [r0, #156]	; 0x9c
   1f562:	f8c0 50a8 	str.w	r5, [r0, #168]	; 0xa8
    ev->ev.ev_queued = 0;
   1f566:	f880 509c 	strb.w	r5, [r0, #156]	; 0x9c
    ev->ev.ev_cb = (os_event_fn *)fn;
   1f56a:	4b26      	ldr	r3, [pc, #152]	; (1f604 <ble_ll_conn_sm_new+0xf0>)
   1f56c:	f8c0 30a0 	str.w	r3, [r0, #160]	; 0xa0
    ev->ev.ev_arg = arg;
   1f570:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    STAILQ_INIT(&connsm->conn_txq);
   1f574:	4603      	mov	r3, r0
   1f576:	f843 5fb0 	str.w	r5, [r3, #176]!
   1f57a:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
    connsm->cur_tx_pdu = NULL;
   1f57e:	f8c0 50ac 	str.w	r5, [r0, #172]	; 0xac
    connsm->tx_seqnum = 0;
   1f582:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32
    connsm->next_exp_seqnum = 0;
   1f586:	f880 5033 	strb.w	r5, [r0, #51]	; 0x33
    connsm->cons_rxd_bad_crc = 0;
   1f58a:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
    connsm->last_rxd_sn = 1;
   1f58e:	2601      	movs	r6, #1
   1f590:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
    connsm->completed_pkts = 0;
   1f594:	f8a0 504c 	strh.w	r5, [r0, #76]	; 0x4c
    connsm->max_tx_octets = conn_params->conn_init_max_tx_octets;
   1f598:	4b1b      	ldr	r3, [pc, #108]	; (1f608 <ble_ll_conn_sm_new+0xf4>)
   1f59a:	7a1a      	ldrb	r2, [r3, #8]
   1f59c:	7282      	strb	r2, [r0, #10]
    connsm->max_rx_octets = conn_params->supp_max_rx_octets;
   1f59e:	79da      	ldrb	r2, [r3, #7]
   1f5a0:	72c2      	strb	r2, [r0, #11]
    connsm->max_tx_time = conn_params->conn_init_max_tx_time;
   1f5a2:	899a      	ldrh	r2, [r3, #12]
   1f5a4:	8202      	strh	r2, [r0, #16]
    connsm->max_rx_time = conn_params->supp_max_rx_time;
   1f5a6:	8a9b      	ldrh	r3, [r3, #20]
   1f5a8:	8243      	strh	r3, [r0, #18]
    connsm->rem_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   1f5aa:	f44f 73a4 	mov.w	r3, #328	; 0x148
   1f5ae:	8283      	strh	r3, [r0, #20]
    connsm->rem_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   1f5b0:	82c3      	strh	r3, [r0, #22]
    connsm->eff_max_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   1f5b2:	8303      	strh	r3, [r0, #24]
    connsm->eff_max_rx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   1f5b4:	8343      	strh	r3, [r0, #26]
    connsm->rem_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   1f5b6:	231b      	movs	r3, #27
   1f5b8:	7303      	strb	r3, [r0, #12]
    connsm->rem_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   1f5ba:	7343      	strb	r3, [r0, #13]
    connsm->eff_max_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   1f5bc:	7383      	strb	r3, [r0, #14]
    connsm->eff_max_rx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   1f5be:	73c3      	strb	r3, [r0, #15]
    ble_ll_update_max_tx_octets_phy_mode(connsm);
   1f5c0:	f7ff f873 	bl	1e6aa <ble_ll_update_max_tx_octets_phy_mode>
    memset(&connsm->enc_data, 0, sizeof(struct ble_ll_conn_enc_data));
   1f5c4:	2250      	movs	r2, #80	; 0x50
   1f5c6:	4629      	mov	r1, r5
   1f5c8:	f504 708c 	add.w	r0, r4, #280	; 0x118
   1f5cc:	f7ec f917 	bl	b7fe <memset>
    connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   1f5d0:	f884 6118 	strb.w	r6, [r4, #280]	; 0x118
    connsm->auth_pyld_tmo = BLE_LL_CONN_DEF_AUTH_PYLD_TMO;
   1f5d4:	f640 33b8 	movw	r3, #3000	; 0xbb8
   1f5d8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    CONN_F_LE_PING_SUPP(connsm) = 1;
   1f5dc:	78a3      	ldrb	r3, [r4, #2]
   1f5de:	f043 0308 	orr.w	r3, r3, #8
   1f5e2:	70a3      	strb	r3, [r4, #2]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   1f5e4:	4623      	mov	r3, r4
   1f5e6:	4a09      	ldr	r2, [pc, #36]	; (1f60c <ble_ll_conn_sm_new+0xf8>)
   1f5e8:	4909      	ldr	r1, [pc, #36]	; (1f610 <ble_ll_conn_sm_new+0xfc>)
   1f5ea:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   1f5ee:	f7ea fb25 	bl	9c3c <os_callout_init>
    ble_ll_conn_calc_itvl_ticks(connsm);
   1f5f2:	4620      	mov	r0, r4
   1f5f4:	f7ff fb68 	bl	1ecc8 <ble_ll_conn_calc_itvl_ticks>
    SLIST_INSERT_HEAD(&g_ble_ll_conn_active_list, connsm, act_sle);
   1f5f8:	4b06      	ldr	r3, [pc, #24]	; (1f614 <ble_ll_conn_sm_new+0x100>)
   1f5fa:	681a      	ldr	r2, [r3, #0]
   1f5fc:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   1f600:	601c      	str	r4, [r3, #0]
}
   1f602:	bd70      	pop	{r4, r5, r6, pc}
   1f604:	0001f795 	.word	0x0001f795
   1f608:	200087fc 	.word	0x200087fc
   1f60c:	0001f495 	.word	0x0001f495
   1f610:	200084e8 	.word	0x200084e8
   1f614:	200087e4 	.word	0x200087e4

0001f618 <ble_ll_conn_update_eff_data_len>:
{
   1f618:	b510      	push	{r4, lr}
   1f61a:	4604      	mov	r4, r0
    eff_time = min(connsm->rem_max_tx_time, connsm->max_rx_time);
   1f61c:	8a43      	ldrh	r3, [r0, #18]
   1f61e:	8a82      	ldrh	r2, [r0, #20]
   1f620:	4293      	cmp	r3, r2
   1f622:	bf28      	it	cs
   1f624:	4613      	movcs	r3, r2
    if (eff_time != connsm->eff_max_rx_time) {
   1f626:	8b42      	ldrh	r2, [r0, #26]
   1f628:	429a      	cmp	r2, r3
   1f62a:	d020      	beq.n	1f66e <ble_ll_conn_update_eff_data_len+0x56>
        connsm->eff_max_rx_time = eff_time;
   1f62c:	8343      	strh	r3, [r0, #26]
        send_event = 1;
   1f62e:	2101      	movs	r1, #1
    eff_time = min(connsm->rem_max_rx_time, connsm->max_tx_time);
   1f630:	8a23      	ldrh	r3, [r4, #16]
   1f632:	8ae2      	ldrh	r2, [r4, #22]
   1f634:	4293      	cmp	r3, r2
   1f636:	bf28      	it	cs
   1f638:	4613      	movcs	r3, r2
    if (eff_time != connsm->eff_max_tx_time) {
   1f63a:	8b22      	ldrh	r2, [r4, #24]
   1f63c:	429a      	cmp	r2, r3
   1f63e:	d118      	bne.n	1f672 <ble_ll_conn_update_eff_data_len+0x5a>
    eff_bytes = min(connsm->rem_max_tx_octets, connsm->max_rx_octets);
   1f640:	7b22      	ldrb	r2, [r4, #12]
   1f642:	7ae3      	ldrb	r3, [r4, #11]
   1f644:	429a      	cmp	r2, r3
   1f646:	d21a      	bcs.n	1f67e <ble_ll_conn_update_eff_data_len+0x66>
   1f648:	b293      	uxth	r3, r2
    if (eff_bytes != connsm->eff_max_rx_octets) {
   1f64a:	7be2      	ldrb	r2, [r4, #15]
   1f64c:	429a      	cmp	r2, r3
   1f64e:	d001      	beq.n	1f654 <ble_ll_conn_update_eff_data_len+0x3c>
        connsm->eff_max_rx_octets = eff_bytes;
   1f650:	73e3      	strb	r3, [r4, #15]
        send_event = 1;
   1f652:	2101      	movs	r1, #1
    eff_bytes = min(connsm->rem_max_rx_octets, connsm->max_tx_octets);
   1f654:	7b62      	ldrb	r2, [r4, #13]
   1f656:	7aa3      	ldrb	r3, [r4, #10]
   1f658:	429a      	cmp	r2, r3
   1f65a:	d212      	bcs.n	1f682 <ble_ll_conn_update_eff_data_len+0x6a>
   1f65c:	b293      	uxth	r3, r2
    if (eff_bytes != connsm->eff_max_tx_octets) {
   1f65e:	7ba2      	ldrb	r2, [r4, #14]
   1f660:	429a      	cmp	r2, r3
   1f662:	d010      	beq.n	1f686 <ble_ll_conn_update_eff_data_len+0x6e>
        connsm->eff_max_tx_octets = eff_bytes;
   1f664:	73a3      	strb	r3, [r4, #14]
        ble_ll_hci_ev_datalen_chg(connsm);
   1f666:	4620      	mov	r0, r4
   1f668:	f003 faee 	bl	22c48 <ble_ll_hci_ev_datalen_chg>
}
   1f66c:	bd10      	pop	{r4, pc}
    send_event = 0;
   1f66e:	2100      	movs	r1, #0
   1f670:	e7de      	b.n	1f630 <ble_ll_conn_update_eff_data_len+0x18>
        connsm->eff_max_tx_time = eff_time;
   1f672:	8323      	strh	r3, [r4, #24]
        ble_ll_update_max_tx_octets_phy_mode(connsm);
   1f674:	4620      	mov	r0, r4
   1f676:	f7ff f818 	bl	1e6aa <ble_ll_update_max_tx_octets_phy_mode>
        send_event = 1;
   1f67a:	2101      	movs	r1, #1
   1f67c:	e7e0      	b.n	1f640 <ble_ll_conn_update_eff_data_len+0x28>
    eff_bytes = min(connsm->rem_max_tx_octets, connsm->max_rx_octets);
   1f67e:	b29b      	uxth	r3, r3
   1f680:	e7e3      	b.n	1f64a <ble_ll_conn_update_eff_data_len+0x32>
    eff_bytes = min(connsm->rem_max_rx_octets, connsm->max_tx_octets);
   1f682:	b29b      	uxth	r3, r3
   1f684:	e7eb      	b.n	1f65e <ble_ll_conn_update_eff_data_len+0x46>
    if (send_event) {
   1f686:	2900      	cmp	r1, #0
   1f688:	d1ed      	bne.n	1f666 <ble_ll_conn_update_eff_data_len+0x4e>
   1f68a:	e7ef      	b.n	1f66c <ble_ll_conn_update_eff_data_len+0x54>

0001f68c <ble_ll_conn_end>:
{
   1f68c:	b570      	push	{r4, r5, r6, lr}
   1f68e:	4604      	mov	r4, r0
   1f690:	460d      	mov	r5, r1
    ble_ll_sched_rmv_elem(&connsm->conn_sch);
   1f692:	30dc      	adds	r0, #220	; 0xdc
   1f694:	f005 fe8c 	bl	253b0 <ble_ll_sched_rmv_elem>
    OS_ENTER_CRITICAL(sr);
   1f698:	f7eb ff1a 	bl	b4d0 <os_arch_save_sr>
   1f69c:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   1f69e:	4b39      	ldr	r3, [pc, #228]	; (1f784 <ble_ll_conn_end+0xf8>)
   1f6a0:	681b      	ldr	r3, [r3, #0]
   1f6a2:	42a3      	cmp	r3, r4
   1f6a4:	d012      	beq.n	1f6cc <ble_ll_conn_end+0x40>
    OS_EXIT_CRITICAL(sr);
   1f6a6:	4630      	mov	r0, r6
   1f6a8:	f7eb ff18 	bl	b4dc <os_arch_restore_sr>
    os_callout_stop(&co->co);
   1f6ac:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
   1f6b0:	f7ea fad2 	bl	9c58 <os_callout_stop>
   1f6b4:	f104 00f8 	add.w	r0, r4, #248	; 0xf8
   1f6b8:	f7ea face 	bl	9c58 <os_callout_stop>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   1f6bc:	4b32      	ldr	r3, [pc, #200]	; (1f788 <ble_ll_conn_end+0xfc>)
   1f6be:	681a      	ldr	r2, [r3, #0]
   1f6c0:	42a2      	cmp	r2, r4
   1f6c2:	d107      	bne.n	1f6d4 <ble_ll_conn_end+0x48>
   1f6c4:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
   1f6c8:	601a      	str	r2, [r3, #0]
   1f6ca:	e00b      	b.n	1f6e4 <ble_ll_conn_end+0x58>
        ble_ll_conn_halt();
   1f6cc:	f7fe ff68 	bl	1e5a0 <ble_ll_conn_halt>
   1f6d0:	e7e9      	b.n	1f6a6 <ble_ll_conn_end+0x1a>
    SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   1f6d2:	461a      	mov	r2, r3
   1f6d4:	f8d2 30b8 	ldr.w	r3, [r2, #184]	; 0xb8
   1f6d8:	42a3      	cmp	r3, r4
   1f6da:	d1fa      	bne.n	1f6d2 <ble_ll_conn_end+0x46>
   1f6dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
   1f6e0:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
    if (connsm->cur_tx_pdu) {
   1f6e4:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   1f6e8:	b140      	cbz	r0, 1f6fc <ble_ll_conn_end+0x70>
        os_mbuf_free_chain(connsm->cur_tx_pdu);
   1f6ea:	f7ea fd79 	bl	a1e0 <os_mbuf_free_chain>
        connsm->cur_tx_pdu = NULL;
   1f6ee:	2300      	movs	r3, #0
   1f6f0:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   1f6f4:	e002      	b.n	1f6fc <ble_ll_conn_end+0x70>
        os_mbuf_free_chain(m);
   1f6f6:	3810      	subs	r0, #16
   1f6f8:	f7ea fd72 	bl	a1e0 <os_mbuf_free_chain>
        pkthdr = STAILQ_FIRST(&connsm->conn_txq);
   1f6fc:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
        if (!pkthdr) {
   1f700:	b148      	cbz	r0, 1f716 <ble_ll_conn_end+0x8a>
        STAILQ_REMOVE_HEAD(&connsm->conn_txq, omp_next);
   1f702:	6843      	ldr	r3, [r0, #4]
   1f704:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
   1f708:	2b00      	cmp	r3, #0
   1f70a:	d1f4      	bne.n	1f6f6 <ble_ll_conn_end+0x6a>
   1f70c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
   1f710:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
   1f714:	e7ef      	b.n	1f6f6 <ble_ll_conn_end+0x6a>
    os_eventq_remove(&evq->evq, &ev->ev);
   1f716:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   1f71a:	481c      	ldr	r0, [pc, #112]	; (1f78c <ble_ll_conn_end+0x100>)
   1f71c:	f7ea fcbd 	bl	a09a <os_eventq_remove>
    connsm->conn_state = BLE_LL_CONN_STATE_IDLE;
   1f720:	2300      	movs	r3, #0
   1f722:	71a3      	strb	r3, [r4, #6]
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   1f724:	78e3      	ldrb	r3, [r4, #3]
   1f726:	f003 0318 	and.w	r3, r3, #24
   1f72a:	2b18      	cmp	r3, #24
   1f72c:	d017      	beq.n	1f75e <ble_ll_conn_end+0xd2>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   1f72e:	78e3      	ldrb	r3, [r4, #3]
   1f730:	f013 0f10 	tst.w	r3, #16
   1f734:	d11c      	bne.n	1f770 <ble_ll_conn_end+0xe4>
    if (ble_err && (ble_err != BLE_ERR_UNK_CONN_ID ||
   1f736:	b14d      	cbz	r5, 1f74c <ble_ll_conn_end+0xc0>
   1f738:	2d02      	cmp	r5, #2
   1f73a:	d103      	bne.n	1f744 <ble_ll_conn_end+0xb8>
   1f73c:	7823      	ldrb	r3, [r4, #0]
   1f73e:	f013 0f04 	tst.w	r3, #4
   1f742:	d003      	beq.n	1f74c <ble_ll_conn_end+0xc0>
        ble_ll_disconn_comp_event_send(connsm, ble_err);
   1f744:	4629      	mov	r1, r5
   1f746:	4620      	mov	r0, r4
   1f748:	f001 f8ef 	bl	2092a <ble_ll_disconn_comp_event_send>
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   1f74c:	2300      	movs	r3, #0
   1f74e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
   1f752:	4b0f      	ldr	r3, [pc, #60]	; (1f790 <ble_ll_conn_end+0x104>)
   1f754:	685a      	ldr	r2, [r3, #4]
   1f756:	6014      	str	r4, [r2, #0]
   1f758:	34b8      	adds	r4, #184	; 0xb8
   1f75a:	605c      	str	r4, [r3, #4]
}
   1f75c:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   1f75e:	2100      	movs	r1, #0
   1f760:	4620      	mov	r0, r4
   1f762:	f003 fb3d 	bl	22de0 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1f766:	78e3      	ldrb	r3, [r4, #3]
   1f768:	f36f 1304 	bfc	r3, #4, #1
   1f76c:	70e3      	strb	r3, [r4, #3]
   1f76e:	e7de      	b.n	1f72e <ble_ll_conn_end+0xa2>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, ble_err);
   1f770:	4629      	mov	r1, r5
   1f772:	4620      	mov	r0, r4
   1f774:	f003 fb34 	bl	22de0 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1f778:	78e3      	ldrb	r3, [r4, #3]
   1f77a:	f36f 1304 	bfc	r3, #4, #1
   1f77e:	70e3      	strb	r3, [r4, #3]
   1f780:	e7d9      	b.n	1f736 <ble_ll_conn_end+0xaa>
   1f782:	bf00      	nop
   1f784:	200087f0 	.word	0x200087f0
   1f788:	200087e4 	.word	0x200087e4
   1f78c:	200084e8 	.word	0x200084e8
   1f790:	200087f4 	.word	0x200087f4

0001f794 <ble_ll_conn_event_end>:
{
   1f794:	b538      	push	{r3, r4, r5, lr}
   1f796:	4604      	mov	r4, r0
    ble_ll_rfmgmt_release();
   1f798:	f004 f8a4 	bl	238e4 <ble_ll_rfmgmt_release>
    return ev->ev.ev_arg;
   1f79c:	68a4      	ldr	r4, [r4, #8]
    BLE_LL_ASSERT(connsm);
   1f79e:	b18c      	cbz	r4, 1f7c4 <ble_ll_conn_event_end+0x30>
    if (connsm->conn_state == BLE_LL_CONN_STATE_IDLE) {
   1f7a0:	79a3      	ldrb	r3, [r4, #6]
   1f7a2:	b1cb      	cbz	r3, 1f7d8 <ble_ll_conn_event_end+0x44>
    ble_ll_scan_chk_resume();
   1f7a4:	f005 f808 	bl	247b8 <ble_ll_scan_chk_resume>
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   1f7a8:	7823      	ldrb	r3, [r4, #0]
   1f7aa:	f013 0202 	ands.w	r2, r3, #2
   1f7ae:	d103      	bne.n	1f7b8 <ble_ll_conn_event_end+0x24>
                    (connsm->csmflags.cfbit.terminate_ind_rxd &&
   1f7b0:	f003 030c 	and.w	r3, r3, #12
    if ((connsm->csmflags.cfbit.terminate_ind_txd) ||
   1f7b4:	2b0c      	cmp	r3, #12
   1f7b6:	d11e      	bne.n	1f7f6 <ble_ll_conn_event_end+0x62>
        if (connsm->csmflags.cfbit.terminate_ind_txd) {
   1f7b8:	b9c2      	cbnz	r2, 1f7ec <ble_ll_conn_event_end+0x58>
            ble_err = connsm->rxd_disconnect_reason;
   1f7ba:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
            if (ble_err == 0) {
   1f7be:	b9b1      	cbnz	r1, 1f7ee <ble_ll_conn_event_end+0x5a>
                ble_err = BLE_ERR_REM_USER_CONN_TERM;
   1f7c0:	2113      	movs	r1, #19
   1f7c2:	e014      	b.n	1f7ee <ble_ll_conn_event_end+0x5a>
    BLE_LL_ASSERT(connsm);
   1f7c4:	f7e8 fcfc 	bl	81c0 <hal_debugger_connected>
   1f7c8:	b100      	cbz	r0, 1f7cc <ble_ll_conn_event_end+0x38>
   1f7ca:	be01      	bkpt	0x0001
   1f7cc:	2300      	movs	r3, #0
   1f7ce:	461a      	mov	r2, r3
   1f7d0:	4619      	mov	r1, r3
   1f7d2:	4618      	mov	r0, r3
   1f7d4:	f7ea f88a 	bl	98ec <__assert_func>
        BLE_LL_ASSERT(0);
   1f7d8:	f7e8 fcf2 	bl	81c0 <hal_debugger_connected>
   1f7dc:	b100      	cbz	r0, 1f7e0 <ble_ll_conn_event_end+0x4c>
   1f7de:	be01      	bkpt	0x0001
   1f7e0:	2300      	movs	r3, #0
   1f7e2:	461a      	mov	r2, r3
   1f7e4:	4619      	mov	r1, r3
   1f7e6:	4618      	mov	r0, r3
   1f7e8:	f7ea f880 	bl	98ec <__assert_func>
            ble_err = BLE_ERR_CONN_TERM_LOCAL;
   1f7ec:	2116      	movs	r1, #22
        ble_ll_conn_end(connsm, ble_err);
   1f7ee:	4620      	mov	r0, r4
   1f7f0:	f7ff ff4c 	bl	1f68c <ble_ll_conn_end>
}
   1f7f4:	bd38      	pop	{r3, r4, r5, pc}
    os_eventq_remove(&evq->evq, &ev->ev);
   1f7f6:	f104 019c 	add.w	r1, r4, #156	; 0x9c
   1f7fa:	482f      	ldr	r0, [pc, #188]	; (1f8b8 <ble_ll_conn_event_end+0x124>)
   1f7fc:	f7ea fc4d 	bl	a09a <os_eventq_remove>
    if (connsm->csmflags.cfbit.pkt_rxd) {
   1f800:	7823      	ldrb	r3, [r4, #0]
   1f802:	f013 0f01 	tst.w	r3, #1
   1f806:	d002      	beq.n	1f80e <ble_ll_conn_event_end+0x7a>
        connsm->slave_cur_tx_win_usecs = 0;
   1f808:	2300      	movs	r3, #0
   1f80a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    if (ble_ll_conn_next_event(connsm)) {
   1f80e:	4620      	mov	r0, r4
   1f810:	f7ff fc5a 	bl	1f0c8 <ble_ll_conn_next_event>
   1f814:	b9d0      	cbnz	r0, 1f84c <ble_ll_conn_event_end+0xb8>
    connsm->cons_rxd_bad_crc = 0;
   1f816:	2200      	movs	r2, #0
   1f818:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    connsm->csmflags.cfbit.pkt_rxd = 0;
   1f81c:	7823      	ldrb	r3, [r4, #0]
   1f81e:	f362 0300 	bfi	r3, r2, #0, #1
   1f822:	7023      	strb	r3, [r4, #0]
    ble_ll_ctrl_chk_proc_start(connsm);
   1f824:	4620      	mov	r0, r4
   1f826:	f002 f96b 	bl	21b00 <ble_ll_ctrl_chk_proc_start>
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   1f82a:	4b24      	ldr	r3, [pc, #144]	; (1f8bc <ble_ll_conn_event_end+0x128>)
   1f82c:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    while (ble_ll_sched_conn_reschedule(connsm)) {
   1f830:	4620      	mov	r0, r4
   1f832:	f005 fa57 	bl	24ce4 <ble_ll_sched_conn_reschedule>
   1f836:	b170      	cbz	r0, 1f856 <ble_ll_conn_event_end+0xc2>
        if (ble_ll_conn_next_event(connsm)) {
   1f838:	4620      	mov	r0, r4
   1f83a:	f7ff fc45 	bl	1f0c8 <ble_ll_conn_next_event>
   1f83e:	2800      	cmp	r0, #0
   1f840:	d0f6      	beq.n	1f830 <ble_ll_conn_event_end+0x9c>
            ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   1f842:	2116      	movs	r1, #22
   1f844:	4620      	mov	r0, r4
   1f846:	f7ff ff21 	bl	1f68c <ble_ll_conn_end>
            return;
   1f84a:	e7d3      	b.n	1f7f4 <ble_ll_conn_event_end+0x60>
        ble_ll_conn_end(connsm, BLE_ERR_CONN_TERM_LOCAL);
   1f84c:	2116      	movs	r1, #22
   1f84e:	4620      	mov	r0, r4
   1f850:	f7ff ff1c 	bl	1f68c <ble_ll_conn_end>
        return;
   1f854:	e7ce      	b.n	1f7f4 <ble_ll_conn_event_end+0x60>
    if (connsm->conn_state == BLE_LL_CONN_STATE_CREATED) {
   1f856:	79a3      	ldrb	r3, [r4, #6]
   1f858:	2b01      	cmp	r3, #1
   1f85a:	d01f      	beq.n	1f89c <ble_ll_conn_event_end+0x108>
        tmo = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000UL;
   1f85c:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   1f860:	f242 7010 	movw	r0, #10000	; 0x2710
   1f864:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_SPVN_TMO;
   1f868:	2508      	movs	r5, #8
    tmo = os_cputime_usecs_to_ticks(tmo);
   1f86a:	f7fc fa87 	bl	1bd7c <os_cputime_usecs_to_ticks>
    if ((int32_t)(connsm->anchor_point - connsm->last_rxd_pdu_cputime) >= tmo) {
   1f86e:	6f63      	ldr	r3, [r4, #116]	; 0x74
   1f870:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
   1f874:	1a9b      	subs	r3, r3, r2
   1f876:	4283      	cmp	r3, r0
   1f878:	d218      	bcs.n	1f8ac <ble_ll_conn_event_end+0x118>
    ble_ll_conn_num_comp_pkts_event_send(connsm);
   1f87a:	4620      	mov	r0, r4
   1f87c:	f000 ffca 	bl	20814 <ble_ll_conn_num_comp_pkts_event_send>
    if (connsm->csmflags.cfbit.pending_hci_rd_features &&
   1f880:	78e3      	ldrb	r3, [r4, #3]
   1f882:	f003 0318 	and.w	r3, r3, #24
   1f886:	2b18      	cmp	r3, #24
   1f888:	d1b4      	bne.n	1f7f4 <ble_ll_conn_event_end+0x60>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   1f88a:	2100      	movs	r1, #0
   1f88c:	4620      	mov	r0, r4
   1f88e:	f003 faa7 	bl	22de0 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   1f892:	78e3      	ldrb	r3, [r4, #3]
   1f894:	f36f 1304 	bfc	r3, #4, #1
   1f898:	70e3      	strb	r3, [r4, #3]
   1f89a:	e7ab      	b.n	1f7f4 <ble_ll_conn_event_end+0x60>
        tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS * 6UL;
   1f89c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   1f8a0:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1f8a4:	fb00 f003 	mul.w	r0, r0, r3
        ble_err = BLE_ERR_CONN_ESTABLISHMENT;
   1f8a8:	253e      	movs	r5, #62	; 0x3e
   1f8aa:	e7de      	b.n	1f86a <ble_ll_conn_event_end+0xd6>
        ble_ll_conn_end(connsm, ble_err);
   1f8ac:	4629      	mov	r1, r5
   1f8ae:	4620      	mov	r0, r4
   1f8b0:	f7ff feec 	bl	1f68c <ble_ll_conn_end>
        return;
   1f8b4:	e79e      	b.n	1f7f4 <ble_ll_conn_event_end+0x60>
   1f8b6:	bf00      	nop
   1f8b8:	200084e8 	.word	0x200084e8
   1f8bc:	0001eb31 	.word	0x0001eb31

0001f8c0 <ble_ll_conn_connect_ind_send>:
 * @param addr_type Address type of advertiser
 * @param adva Address of advertiser
 */
int
ble_ll_conn_connect_ind_send(struct ble_ll_conn_sm *connsm, uint8_t end_trans)
{
   1f8c0:	b538      	push	{r3, r4, r5, lr}
   1f8c2:	4604      	mov	r4, r0
    int rc;

    if (end_trans == BLE_PHY_TRANSITION_NONE) {
   1f8c4:	460d      	mov	r5, r1
   1f8c6:	b149      	cbz	r1, 1f8dc <ble_ll_conn_connect_ind_send+0x1c>
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_standby, NULL);
    } else {
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_init, NULL);
   1f8c8:	2100      	movs	r1, #0
   1f8ca:	4806      	ldr	r0, [pc, #24]	; (1f8e4 <ble_ll_conn_connect_ind_send+0x24>)
   1f8cc:	f006 fc2c 	bl	26128 <ble_phy_set_txend_cb>
    }

    rc = ble_phy_tx(ble_ll_conn_connect_ind_tx_pducb, connsm, end_trans);
   1f8d0:	462a      	mov	r2, r5
   1f8d2:	4621      	mov	r1, r4
   1f8d4:	4804      	ldr	r0, [pc, #16]	; (1f8e8 <ble_ll_conn_connect_ind_send+0x28>)
   1f8d6:	f006 fe81 	bl	265dc <ble_phy_tx>

    return rc;
}
   1f8da:	bd38      	pop	{r3, r4, r5, pc}
        ble_phy_set_txend_cb(ble_ll_conn_connect_ind_txend_to_standby, NULL);
   1f8dc:	4803      	ldr	r0, [pc, #12]	; (1f8ec <ble_ll_conn_connect_ind_send+0x2c>)
   1f8de:	f006 fc23 	bl	26128 <ble_phy_set_txend_cb>
   1f8e2:	e7f5      	b.n	1f8d0 <ble_ll_conn_connect_ind_send+0x10>
   1f8e4:	0001e5f5 	.word	0x0001e5f5
   1f8e8:	0001edd9 	.word	0x0001edd9
   1f8ec:	0001e5ff 	.word	0x0001e5ff

0001f8f0 <ble_ll_conn_event_halt>:
 * NOTE: the phy has been disabled as well as the wfr timer before this is
 * called.
 */
void
ble_ll_conn_event_halt(void)
{
   1f8f0:	b510      	push	{r4, lr}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1f8f2:	2000      	movs	r0, #0
   1f8f4:	f7fd fcb8 	bl	1d268 <ble_ll_state_set>
    if (g_ble_ll_conn_cur_sm) {
   1f8f8:	4b07      	ldr	r3, [pc, #28]	; (1f918 <ble_ll_conn_event_halt+0x28>)
   1f8fa:	681b      	ldr	r3, [r3, #0]
   1f8fc:	b153      	cbz	r3, 1f914 <ble_ll_conn_event_halt+0x24>
        g_ble_ll_conn_cur_sm->csmflags.cfbit.pkt_rxd = 0;
   1f8fe:	781a      	ldrb	r2, [r3, #0]
   1f900:	f36f 0200 	bfc	r2, #0, #1
   1f904:	701a      	strb	r2, [r3, #0]
        ble_ll_event_send(&g_ble_ll_conn_cur_sm->conn_ev_end);
   1f906:	4c04      	ldr	r4, [pc, #16]	; (1f918 <ble_ll_conn_event_halt+0x28>)
   1f908:	6820      	ldr	r0, [r4, #0]
   1f90a:	309c      	adds	r0, #156	; 0x9c
   1f90c:	f7fd fcb8 	bl	1d280 <ble_ll_event_send>
        g_ble_ll_conn_cur_sm = NULL;
   1f910:	2300      	movs	r3, #0
   1f912:	6023      	str	r3, [r4, #0]
    }
}
   1f914:	bd10      	pop	{r4, pc}
   1f916:	bf00      	nop
   1f918:	200087f0 	.word	0x200087f0

0001f91c <ble_ll_init_rx_pkt_in>:
 * @param ble_hdr
 */
void
ble_ll_init_rx_pkt_in(uint8_t pdu_type, uint8_t *rxbuf,
                      struct ble_mbuf_hdr *ble_hdr)
{
   1f91c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f91e:	b08b      	sub	sp, #44	; 0x2c
    uint8_t *addr;
    uint8_t *adv_addr;
    uint8_t *inita;
    uint8_t inita_type;
    struct ble_ll_conn_sm *connsm;
    int ext_adv_mode = -1;
   1f920:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f924:	9305      	str	r3, [sp, #20]
         aux_data = ble_hdr->rxinfo.user_data;
     }
#endif

    /* Get the connection state machine we are trying to create */
    connsm = g_ble_ll_conn_create_sm;
   1f926:	4b3c      	ldr	r3, [pc, #240]	; (1fa18 <ble_ll_init_rx_pkt_in+0xfc>)
   1f928:	681e      	ldr	r6, [r3, #0]
    if (!connsm) {
   1f92a:	b15e      	cbz	r6, 1f944 <ble_ll_init_rx_pkt_in+0x28>
   1f92c:	4615      	mov	r5, r2
   1f92e:	460c      	mov	r4, r1
        }
#endif
        return;
    }

    if (!BLE_MBUF_HDR_CRC_OK(ble_hdr)) {
   1f930:	8813      	ldrh	r3, [r2, #0]
   1f932:	f013 0f80 	tst.w	r3, #128	; 0x80
   1f936:	d003      	beq.n	1f940 <ble_ll_init_rx_pkt_in+0x24>
        }
    }
#endif

    /* If we have sent a connect request, we need to enter CONNECTION state */
    if (connsm && CONN_F_CONN_REQ_TXD(connsm)) {
   1f938:	f996 3001 	ldrsb.w	r3, [r6, #1]
   1f93c:	2b00      	cmp	r3, #0
   1f93e:	db03      	blt.n	1f948 <ble_ll_init_rx_pkt_in+0x2c>
    if (aux_data) {
        ble_ll_scan_aux_data_unref(ble_hdr->rxinfo.user_data);
        ble_hdr->rxinfo.user_data = NULL;
    }
#endif
    ble_ll_scan_chk_resume();
   1f940:	f004 ff3a 	bl	247b8 <ble_ll_scan_chk_resume>
}
   1f944:	b00b      	add	sp, #44	; 0x2c
   1f946:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (ble_ll_scan_adv_decode_addr(pdu_type, rxbuf, ble_hdr,
   1f948:	ab05      	add	r3, sp, #20
   1f94a:	9303      	str	r3, [sp, #12]
   1f94c:	f10d 031b 	add.w	r3, sp, #27
   1f950:	9302      	str	r3, [sp, #8]
   1f952:	ab07      	add	r3, sp, #28
   1f954:	9301      	str	r3, [sp, #4]
   1f956:	f10d 0327 	add.w	r3, sp, #39	; 0x27
   1f95a:	9300      	str	r3, [sp, #0]
   1f95c:	ab08      	add	r3, sp, #32
   1f95e:	f004 feff 	bl	24760 <ble_ll_scan_adv_decode_addr>
   1f962:	2800      	cmp	r0, #0
   1f964:	d1ec      	bne.n	1f940 <ble_ll_init_rx_pkt_in+0x24>
        if (connsm->rpa_index >= 0) {
   1f966:	f996 2009 	ldrsb.w	r2, [r6, #9]
   1f96a:	2a00      	cmp	r2, #0
   1f96c:	db36      	blt.n	1f9dc <ble_ll_init_rx_pkt_in+0xc0>
            addr_type = g_ble_ll_resolv_list[connsm->rpa_index].rl_addr_type + 2;
   1f96e:	482b      	ldr	r0, [pc, #172]	; (1fa1c <ble_ll_init_rx_pkt_in+0x100>)
   1f970:	2336      	movs	r3, #54	; 0x36
   1f972:	fb03 f302 	mul.w	r3, r3, r2
   1f976:	5cc1      	ldrb	r1, [r0, r3]
   1f978:	3102      	adds	r1, #2
   1f97a:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
            addr = g_ble_ll_resolv_list[connsm->rpa_index].rl_identity_addr;
   1f97e:	f103 0720 	add.w	r7, r3, #32
   1f982:	4407      	add	r7, r0
   1f984:	3704      	adds	r7, #4
        if (connsm->rpa_index >= 0) {
   1f986:	2a00      	cmp	r2, #0
   1f988:	db30      	blt.n	1f9ec <ble_ll_init_rx_pkt_in+0xd0>
            connsm->peer_addr_type = addr_type;
   1f98a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1f98e:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
            memcpy(connsm->peer_addr, addr, BLE_DEV_ADDR_LEN);
   1f992:	683b      	ldr	r3, [r7, #0]
   1f994:	f8c6 3093 	str.w	r3, [r6, #147]	; 0x93
   1f998:	88bb      	ldrh	r3, [r7, #4]
   1f99a:	f8a6 3097 	strh.w	r3, [r6, #151]	; 0x97
            ble_ll_scan_set_peer_rpa(adv_addr);
   1f99e:	9808      	ldr	r0, [sp, #32]
   1f9a0:	f005 f888 	bl	24ab4 <ble_ll_scan_set_peer_rpa>
            ble_ll_resolv_set_peer_rpa(connsm->rpa_index, rxbuf + BLE_LL_PDU_HDR_LEN);
   1f9a4:	1ca1      	adds	r1, r4, #2
   1f9a6:	f996 0009 	ldrsb.w	r0, [r6, #9]
   1f9aa:	f003 fde5 	bl	23578 <ble_ll_resolv_set_peer_rpa>
            if (ble_ll_is_rpa(inita, inita_type)) {
   1f9ae:	f89d 101b 	ldrb.w	r1, [sp, #27]
   1f9b2:	9807      	ldr	r0, [sp, #28]
   1f9b4:	f7fd fa8e 	bl	1ced4 <ble_ll_is_rpa>
   1f9b8:	b990      	cbnz	r0, 1f9e0 <ble_ll_init_rx_pkt_in+0xc4>
        g_ble_ll_conn_create_sm = NULL;
   1f9ba:	2000      	movs	r0, #0
   1f9bc:	4b16      	ldr	r3, [pc, #88]	; (1fa18 <ble_ll_init_rx_pkt_in+0xfc>)
   1f9be:	6018      	str	r0, [r3, #0]
        ble_ll_scan_sm_stop(0);
   1f9c0:	f004 fdce 	bl	24560 <ble_ll_scan_sm_stop>
        if (ble_hdr->rxinfo.channel < BLE_PHY_NUM_DATA_CHANS) {
   1f9c4:	78ab      	ldrb	r3, [r5, #2]
   1f9c6:	2b24      	cmp	r3, #36	; 0x24
   1f9c8:	d81f      	bhi.n	1fa0a <ble_ll_init_rx_pkt_in+0xee>
            ble_ll_conn_set_csa(connsm, 1);
   1f9ca:	2101      	movs	r1, #1
   1f9cc:	4630      	mov	r0, r6
   1f9ce:	f7ff fd37 	bl	1f440 <ble_ll_conn_set_csa>
        ble_ll_conn_created(connsm, NULL);
   1f9d2:	2100      	movs	r1, #0
   1f9d4:	4630      	mov	r0, r6
   1f9d6:	f7ff fcab 	bl	1f330 <ble_ll_conn_created>
        return;
   1f9da:	e7b3      	b.n	1f944 <ble_ll_init_rx_pkt_in+0x28>
            addr = adv_addr;
   1f9dc:	9f08      	ldr	r7, [sp, #32]
   1f9de:	e7d2      	b.n	1f986 <ble_ll_init_rx_pkt_in+0x6a>
                ble_ll_resolv_set_local_rpa(connsm->rpa_index, inita);
   1f9e0:	9907      	ldr	r1, [sp, #28]
   1f9e2:	f996 0009 	ldrsb.w	r0, [r6, #9]
   1f9e6:	f003 fddb 	bl	235a0 <ble_ll_resolv_set_local_rpa>
   1f9ea:	e7e6      	b.n	1f9ba <ble_ll_init_rx_pkt_in+0x9e>
        } else if (ble_ll_scan_whitelist_enabled()) {
   1f9ec:	f005 f870 	bl	24ad0 <ble_ll_scan_whitelist_enabled>
   1f9f0:	2800      	cmp	r0, #0
   1f9f2:	d0e2      	beq.n	1f9ba <ble_ll_init_rx_pkt_in+0x9e>
            connsm->peer_addr_type = addr_type;
   1f9f4:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1f9f8:	f886 3092 	strb.w	r3, [r6, #146]	; 0x92
            memcpy(connsm->peer_addr, addr, BLE_DEV_ADDR_LEN);
   1f9fc:	683b      	ldr	r3, [r7, #0]
   1f9fe:	f8c6 3093 	str.w	r3, [r6, #147]	; 0x93
   1fa02:	88bb      	ldrh	r3, [r7, #4]
   1fa04:	f8a6 3097 	strh.w	r3, [r6, #151]	; 0x97
   1fa08:	e7d7      	b.n	1f9ba <ble_ll_init_rx_pkt_in+0x9e>
            ble_ll_conn_set_csa(connsm, rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK);
   1fa0a:	7821      	ldrb	r1, [r4, #0]
   1fa0c:	f3c1 1140 	ubfx	r1, r1, #5, #1
   1fa10:	4630      	mov	r0, r6
   1fa12:	f7ff fd15 	bl	1f440 <ble_ll_conn_set_csa>
   1fa16:	e7dc      	b.n	1f9d2 <ble_ll_init_rx_pkt_in+0xb6>
   1fa18:	200087ec 	.word	0x200087ec
   1fa1c:	20008a40 	.word	0x20008a40

0001fa20 <ble_ll_init_rx_isr_start>:
int
ble_ll_init_rx_isr_start(uint8_t pdu_type, struct ble_mbuf_hdr *ble_hdr)
{
    struct ble_ll_conn_sm *connsm;

    connsm = g_ble_ll_conn_create_sm;
   1fa20:	4b08      	ldr	r3, [pc, #32]	; (1fa44 <ble_ll_init_rx_isr_start+0x24>)
   1fa22:	681b      	ldr	r3, [r3, #0]
    if (!connsm) {
   1fa24:	b143      	cbz	r3, 1fa38 <ble_ll_init_rx_isr_start+0x18>
        return 0;
    }

    if ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
   1fa26:	b148      	cbz	r0, 1fa3c <ble_ll_init_rx_isr_start+0x1c>
   1fa28:	2801      	cmp	r0, #1
   1fa2a:	d009      	beq.n	1fa40 <ble_ll_init_rx_isr_start+0x20>
        (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND ||
   1fa2c:	2808      	cmp	r0, #8
   1fa2e:	d001      	beq.n	1fa34 <ble_ll_init_rx_isr_start+0x14>
        ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_EXT_ADV;
        return 1;
    }
#endif

    return 0;
   1fa30:	2000      	movs	r0, #0
}
   1fa32:	4770      	bx	lr
        return 1;
   1fa34:	2001      	movs	r0, #1
   1fa36:	4770      	bx	lr
        return 0;
   1fa38:	2000      	movs	r0, #0
   1fa3a:	4770      	bx	lr
        return 1;
   1fa3c:	2001      	movs	r0, #1
   1fa3e:	4770      	bx	lr
   1fa40:	2001      	movs	r0, #1
   1fa42:	4770      	bx	lr
   1fa44:	200087ec 	.word	0x200087ec

0001fa48 <ble_ll_init_rx_isr_end>:
 *       > 0: Do not disable PHY as that has already been done.
 */
int
ble_ll_init_rx_isr_end(uint8_t *rxbuf, uint8_t crcok,
                       struct ble_mbuf_hdr *ble_hdr)
{
   1fa48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa4c:	b08d      	sub	sp, #52	; 0x34
    int chk_wl;
    int index;
    uint8_t pdu_type;
    uint8_t adv_addr_type;
    uint8_t peer_addr_type;
    uint8_t *adv_addr = NULL;
   1fa4e:	2300      	movs	r3, #0
   1fa50:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t *peer;
    uint8_t *init_addr = NULL;
   1fa52:	9309      	str	r3, [sp, #36]	; 0x24
#endif
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    struct ble_ll_scan_sm *scansm;
    uint8_t phy;
#endif
    int ext_adv_mode = -1;
   1fa54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fa58:	9307      	str	r3, [sp, #28]

    /* Get connection state machine to use if connection to be established */
    connsm = g_ble_ll_conn_create_sm;
   1fa5a:	4baa      	ldr	r3, [pc, #680]	; (1fd04 <ble_ll_init_rx_isr_end+0x2bc>)
   1fa5c:	681e      	ldr	r6, [r3, #0]
    /* This could happen if connection init was cancelled while isr end was
     * already pending
     */
    if (!connsm) {
   1fa5e:	b1f6      	cbz	r6, 1fa9e <ble_ll_init_rx_isr_end+0x56>
   1fa60:	4604      	mov	r4, r0
   1fa62:	4690      	mov	r8, r2
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
        return -1;
    }

    rc = -1;
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   1fa64:	7805      	ldrb	r5, [r0, #0]
   1fa66:	f005 050f 	and.w	r5, r5, #15
    pyld_len = rxbuf[1];
   1fa6a:	7847      	ldrb	r7, [r0, #1]
        ble_hdr->rxinfo.user_data = scansm->cur_aux_data;
        scansm->cur_aux_data = NULL;
    }
#endif

    if (!crcok) {
   1fa6c:	b9e9      	cbnz	r1, 1faaa <ble_ll_init_rx_isr_end+0x62>
    rc = -1;
   1fa6e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff

    /*
     * We have to restart receive if we cant hand up pdu. We return 0 so that
     * the phy does not get disabled.
     */
    rxpdu = ble_ll_rxpdu_alloc(pyld_len + BLE_LL_PDU_HDR_LEN);
   1fa72:	1cb8      	adds	r0, r7, #2
   1fa74:	f7fd f9f0 	bl	1ce58 <ble_ll_rxpdu_alloc>
    if (rxpdu == NULL) {
   1fa78:	4605      	mov	r5, r0
   1fa7a:	2800      	cmp	r0, #0
   1fa7c:	f000 8146 	beq.w	1fd0c <ble_ll_init_rx_isr_end+0x2c4>
            ble_ll_sched_rmv_elem(&connsm->conn_sch);
        }
        ble_phy_restart_rx();
        rc = 0;
    } else {
        ble_phy_rxpdu_copy(rxbuf, rxpdu);
   1fa80:	4601      	mov	r1, r0
   1fa82:	4620      	mov	r0, r4
   1fa84:	f006 f97a 	bl	25d7c <ble_phy_rxpdu_copy>
        ble_ll_rx_pdu_in(rxpdu);
   1fa88:	4628      	mov	r0, r5
   1fa8a:	f7fd fb0d 	bl	1d0a8 <ble_ll_rx_pdu_in>
    }

    if (rc) {
   1fa8e:	f1b8 0f00 	cmp.w	r8, #0
   1fa92:	f000 8143 	beq.w	1fd1c <ble_ll_init_rx_isr_end+0x2d4>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1fa96:	2000      	movs	r0, #0
   1fa98:	f7fd fbe6 	bl	1d268 <ble_ll_state_set>
   1fa9c:	e13e      	b.n	1fd1c <ble_ll_init_rx_isr_end+0x2d4>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1fa9e:	2000      	movs	r0, #0
   1faa0:	f7fd fbe2 	bl	1d268 <ble_ll_state_set>
        return -1;
   1faa4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1faa8:	e138      	b.n	1fd1c <ble_ll_init_rx_isr_end+0x2d4>
    if (ble_ll_scan_adv_decode_addr(pdu_type, rxbuf, ble_hdr,
   1faaa:	ab07      	add	r3, sp, #28
   1faac:	9303      	str	r3, [sp, #12]
   1faae:	f10d 0323 	add.w	r3, sp, #35	; 0x23
   1fab2:	9302      	str	r3, [sp, #8]
   1fab4:	ab09      	add	r3, sp, #36	; 0x24
   1fab6:	9301      	str	r3, [sp, #4]
   1fab8:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
   1fabc:	9300      	str	r3, [sp, #0]
   1fabe:	ab0a      	add	r3, sp, #40	; 0x28
   1fac0:	4601      	mov	r1, r0
   1fac2:	4628      	mov	r0, r5
   1fac4:	f004 fe4c 	bl	24760 <ble_ll_scan_adv_decode_addr>
   1fac8:	9004      	str	r0, [sp, #16]
   1faca:	2800      	cmp	r0, #0
   1facc:	f040 80fe 	bne.w	1fccc <ble_ll_init_rx_isr_end+0x284>
    switch (pdu_type) {
   1fad0:	b155      	cbz	r5, 1fae8 <ble_ll_init_rx_isr_end+0xa0>
   1fad2:	2d01      	cmp	r5, #1
   1fad4:	f040 80fd 	bne.w	1fcd2 <ble_ll_init_rx_isr_end+0x28a>
        inita_is_rpa = (uint8_t)ble_ll_is_rpa(init_addr, init_addr_type);
   1fad8:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   1fadc:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fade:	f7fd f9f9 	bl	1ced4 <ble_ll_is_rpa>
   1fae2:	b2c5      	uxtb	r5, r0
        if (!inita_is_rpa) {
   1fae4:	2d00      	cmp	r5, #0
   1fae6:	d036      	beq.n	1fb56 <ble_ll_init_rx_isr_end+0x10e>
    peer = adv_addr;
   1fae8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    peer_addr_type = adv_addr_type;
   1faec:	f89d b02f 	ldrb.w	fp, [sp, #47]	; 0x2f
    chk_wl = ble_ll_scan_whitelist_enabled();
   1faf0:	f004 ffee 	bl	24ad0 <ble_ll_scan_whitelist_enabled>
   1faf4:	9005      	str	r0, [sp, #20]
    if (ble_ll_is_rpa(adv_addr, adv_addr_type) && ble_ll_resolv_enabled()) {
   1faf6:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   1fafa:	980a      	ldr	r0, [sp, #40]	; 0x28
   1fafc:	f7fd f9ea 	bl	1ced4 <ble_ll_is_rpa>
   1fb00:	2800      	cmp	r0, #0
   1fb02:	d132      	bne.n	1fb6a <ble_ll_init_rx_isr_end+0x122>
    } else if (init_addr) {
   1fb04:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fb06:	2b00      	cmp	r3, #0
   1fb08:	f000 808f 	beq.w	1fc2a <ble_ll_init_rx_isr_end+0x1e2>
        if (inita_is_rpa && !ble_ll_resolv_enabled()) {
   1fb0c:	b125      	cbz	r5, 1fb18 <ble_ll_init_rx_isr_end+0xd0>
   1fb0e:	f003 fdab 	bl	23668 <ble_ll_resolv_enabled>
   1fb12:	2800      	cmp	r0, #0
   1fb14:	f000 80e9 	beq.w	1fcea <ble_ll_init_rx_isr_end+0x2a2>
        rl = ble_ll_resolv_list_find(adv_addr, adv_addr_type);
   1fb18:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   1fb1c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1fb1e:	f003 fb4d 	bl	231bc <ble_ll_resolv_list_find>
        if (rl && !inita_is_rpa &&
   1fb22:	4682      	mov	sl, r0
   1fb24:	b130      	cbz	r0, 1fb34 <ble_ll_init_rx_isr_end+0xec>
   1fb26:	b92d      	cbnz	r5, 1fb34 <ble_ll_init_rx_isr_end+0xec>
           (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1fb28:	7843      	ldrb	r3, [r0, #1]
        if (rl && !inita_is_rpa &&
   1fb2a:	b91b      	cbnz	r3, 1fb34 <ble_ll_init_rx_isr_end+0xec>
           rl->rl_has_local) {
   1fb2c:	7883      	ldrb	r3, [r0, #2]
           (rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) &&
   1fb2e:	2b00      	cmp	r3, #0
   1fb30:	f040 80de 	bne.w	1fcf0 <ble_ll_init_rx_isr_end+0x2a8>
        if (inita_is_rpa) {
   1fb34:	2d00      	cmp	r5, #0
   1fb36:	f000 8092 	beq.w	1fc5e <ble_ll_init_rx_isr_end+0x216>
            if (!rl || !ble_ll_resolv_rpa(init_addr, rl->rl_local_irk)) {
   1fb3a:	f1ba 0f00 	cmp.w	sl, #0
   1fb3e:	f000 80da 	beq.w	1fcf6 <ble_ll_init_rx_isr_end+0x2ae>
   1fb42:	f10a 0104 	add.w	r1, sl, #4
   1fb46:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fb48:	f003 fd5a 	bl	23600 <ble_ll_resolv_rpa>
   1fb4c:	2800      	cmp	r0, #0
   1fb4e:	d15c      	bne.n	1fc0a <ble_ll_init_rx_isr_end+0x1c2>
    rc = -1;
   1fb50:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fb54:	e78d      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
            if (!ble_ll_is_our_devaddr(init_addr, init_addr_type)) {
   1fb56:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   1fb5a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fb5c:	f7fd fa68 	bl	1d030 <ble_ll_is_our_devaddr>
   1fb60:	2800      	cmp	r0, #0
   1fb62:	d1c1      	bne.n	1fae8 <ble_ll_init_rx_isr_end+0xa0>
    rc = -1;
   1fb64:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fb68:	e783      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
    if (ble_ll_is_rpa(adv_addr, adv_addr_type) && ble_ll_resolv_enabled()) {
   1fb6a:	f003 fd7d 	bl	23668 <ble_ll_resolv_enabled>
   1fb6e:	2800      	cmp	r0, #0
   1fb70:	d0c8      	beq.n	1fb04 <ble_ll_init_rx_isr_end+0xbc>
        index = ble_hw_resolv_list_match();
   1fb72:	f005 ff89 	bl	25a88 <ble_hw_resolv_list_match>
        if (index >= 0) {
   1fb76:	f1b0 0a00 	subs.w	sl, r0, #0
   1fb7a:	db3d      	blt.n	1fbf8 <ble_ll_init_rx_isr_end+0x1b0>
            ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_RESOLVED;
   1fb7c:	f8b8 3000 	ldrh.w	r3, [r8]
   1fb80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   1fb84:	f8a8 3000 	strh.w	r3, [r8]
            connsm->rpa_index = index;
   1fb88:	f886 a009 	strb.w	sl, [r6, #9]
            peer = rl->rl_identity_addr;
   1fb8c:	2336      	movs	r3, #54	; 0x36
   1fb8e:	fb03 f30a 	mul.w	r3, r3, sl
   1fb92:	f103 0920 	add.w	r9, r3, #32
   1fb96:	4a5c      	ldr	r2, [pc, #368]	; (1fd08 <ble_ll_init_rx_isr_end+0x2c0>)
   1fb98:	4491      	add	r9, r2
   1fb9a:	f109 0904 	add.w	r9, r9, #4
            peer_addr_type = rl->rl_addr_type;
   1fb9e:	18d1      	adds	r1, r2, r3
   1fba0:	f812 b003 	ldrb.w	fp, [r2, r3]
            if ((rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) && init_addr &&
   1fba4:	784b      	ldrb	r3, [r1, #1]
   1fba6:	b933      	cbnz	r3, 1fbb6 <ble_ll_init_rx_isr_end+0x16e>
   1fba8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fbaa:	b123      	cbz	r3, 1fbb6 <ble_ll_init_rx_isr_end+0x16e>
   1fbac:	b91d      	cbnz	r5, 1fbb6 <ble_ll_init_rx_isr_end+0x16e>
                !inita_is_rpa && rl->rl_has_local) {
   1fbae:	788b      	ldrb	r3, [r1, #2]
   1fbb0:	2b00      	cmp	r3, #0
   1fbb2:	f040 8091 	bne.w	1fcd8 <ble_ll_init_rx_isr_end+0x290>
            if (init_addr && inita_is_rpa) {
   1fbb6:	9809      	ldr	r0, [sp, #36]	; 0x24
   1fbb8:	b388      	cbz	r0, 1fc1e <ble_ll_init_rx_isr_end+0x1d6>
   1fbba:	b915      	cbnz	r5, 1fbc2 <ble_ll_init_rx_isr_end+0x17a>
            resolved = 1;
   1fbbc:	2301      	movs	r3, #1
   1fbbe:	9304      	str	r3, [sp, #16]
   1fbc0:	e035      	b.n	1fc2e <ble_ll_init_rx_isr_end+0x1e6>
                                       g_ble_ll_resolv_list[index].rl_local_irk)) {
   1fbc2:	2136      	movs	r1, #54	; 0x36
   1fbc4:	4b50      	ldr	r3, [pc, #320]	; (1fd08 <ble_ll_init_rx_isr_end+0x2c0>)
   1fbc6:	fb01 310a 	mla	r1, r1, sl, r3
                if (!ble_ll_resolv_rpa(init_addr,
   1fbca:	3104      	adds	r1, #4
   1fbcc:	f003 fd18 	bl	23600 <ble_ll_resolv_rpa>
   1fbd0:	b910      	cbnz	r0, 1fbd8 <ble_ll_init_rx_isr_end+0x190>
    rc = -1;
   1fbd2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fbd6:	e74c      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
                memcpy(init_addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   1fbd8:	2336      	movs	r3, #54	; 0x36
   1fbda:	fb03 f30a 	mul.w	r3, r3, sl
   1fbde:	f103 0228 	add.w	r2, r3, #40	; 0x28
   1fbe2:	4b49      	ldr	r3, [pc, #292]	; (1fd08 <ble_ll_init_rx_isr_end+0x2c0>)
   1fbe4:	4413      	add	r3, r2
   1fbe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fbe8:	f853 1f02 	ldr.w	r1, [r3, #2]!
   1fbec:	6011      	str	r1, [r2, #0]
   1fbee:	889b      	ldrh	r3, [r3, #4]
   1fbf0:	8093      	strh	r3, [r2, #4]
            resolved = 1;
   1fbf2:	2301      	movs	r3, #1
   1fbf4:	9304      	str	r3, [sp, #16]
   1fbf6:	e01a      	b.n	1fc2e <ble_ll_init_rx_isr_end+0x1e6>
            if (chk_wl) {
   1fbf8:	9a05      	ldr	r2, [sp, #20]
   1fbfa:	2a00      	cmp	r2, #0
   1fbfc:	d16f      	bne.n	1fcde <ble_ll_init_rx_isr_end+0x296>
            if (init_addr && inita_is_rpa) {
   1fbfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fc00:	b183      	cbz	r3, 1fc24 <ble_ll_init_rx_isr_end+0x1dc>
   1fc02:	2d00      	cmp	r5, #0
   1fc04:	d16e      	bne.n	1fce4 <ble_ll_init_rx_isr_end+0x29c>
    resolved = 0;
   1fc06:	9204      	str	r2, [sp, #16]
   1fc08:	e011      	b.n	1fc2e <ble_ll_init_rx_isr_end+0x1e6>
            memcpy(init_addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   1fc0a:	4653      	mov	r3, sl
   1fc0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1fc0e:	f853 1f2a 	ldr.w	r1, [r3, #42]!
   1fc12:	6011      	str	r1, [r2, #0]
   1fc14:	889b      	ldrh	r3, [r3, #4]
   1fc16:	8093      	strh	r3, [r2, #4]
    index = -1;
   1fc18:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1fc1c:	e007      	b.n	1fc2e <ble_ll_init_rx_isr_end+0x1e6>
            resolved = 1;
   1fc1e:	2301      	movs	r3, #1
   1fc20:	9304      	str	r3, [sp, #16]
   1fc22:	e004      	b.n	1fc2e <ble_ll_init_rx_isr_end+0x1e6>
    resolved = 0;
   1fc24:	9b05      	ldr	r3, [sp, #20]
   1fc26:	9304      	str	r3, [sp, #16]
   1fc28:	e001      	b.n	1fc2e <ble_ll_init_rx_isr_end+0x1e6>
    index = -1;
   1fc2a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
    if (chk_wl) {
   1fc2e:	9b05      	ldr	r3, [sp, #20]
   1fc30:	b1c3      	cbz	r3, 1fc64 <ble_ll_init_rx_isr_end+0x21c>
        if (!ble_ll_whitelist_match(peer, peer_addr_type, resolved)) {
   1fc32:	9a04      	ldr	r2, [sp, #16]
   1fc34:	4659      	mov	r1, fp
   1fc36:	4648      	mov	r0, r9
   1fc38:	f005 fd28 	bl	2568c <ble_ll_whitelist_match>
   1fc3c:	2800      	cmp	r0, #0
   1fc3e:	d05d      	beq.n	1fcfc <ble_ll_init_rx_isr_end+0x2b4>
    ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_DEVMATCH;
   1fc40:	f8b8 3000 	ldrh.w	r3, [r8]
   1fc44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1fc48:	f8a8 3000 	strh.w	r3, [r8]
    if (ble_ll_sched_master_new(connsm, ble_hdr, pyld_len)) {
   1fc4c:	463a      	mov	r2, r7
   1fc4e:	4641      	mov	r1, r8
   1fc50:	4630      	mov	r0, r6
   1fc52:	f005 f919 	bl	24e88 <ble_ll_sched_master_new>
   1fc56:	b180      	cbz	r0, 1fc7a <ble_ll_init_rx_isr_end+0x232>
    rc = -1;
   1fc58:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fc5c:	e709      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
    index = -1;
   1fc5e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   1fc62:	e7e4      	b.n	1fc2e <ble_ll_init_rx_isr_end+0x1e6>
        if (!ble_ll_conn_is_peer_adv(adv_addr_type, adv_addr, index)) {
   1fc64:	4652      	mov	r2, sl
   1fc66:	990a      	ldr	r1, [sp, #40]	; 0x28
   1fc68:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   1fc6c:	f7ff f904 	bl	1ee78 <ble_ll_conn_is_peer_adv>
   1fc70:	2800      	cmp	r0, #0
   1fc72:	d1e5      	bne.n	1fc40 <ble_ll_init_rx_isr_end+0x1f8>
    rc = -1;
   1fc74:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fc78:	e6fb      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
    ble_ll_conn_connect_ind_prepare(connsm,
   1fc7a:	f004 ff25 	bl	24ac8 <ble_ll_scan_get_pdu_data>
   1fc7e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   1fc82:	f898 3002 	ldrb.w	r3, [r8, #2]
   1fc86:	9303      	str	r3, [sp, #12]
   1fc88:	f8cd a008 	str.w	sl, [sp, #8]
   1fc8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fc8e:	9301      	str	r3, [sp, #4]
   1fc90:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   1fc94:	9300      	str	r3, [sp, #0]
   1fc96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1fc98:	4601      	mov	r1, r0
   1fc9a:	4630      	mov	r0, r6
   1fc9c:	f7ff f970 	bl	1ef80 <ble_ll_conn_connect_ind_prepare>
    rc = ble_ll_conn_connect_ind_send(connsm, conn_req_end_trans);
   1fca0:	2100      	movs	r1, #0
   1fca2:	4630      	mov	r0, r6
   1fca4:	f7ff fe0c 	bl	1f8c0 <ble_ll_conn_connect_ind_send>
    if (rc) {
   1fca8:	4680      	mov	r8, r0
   1fcaa:	b950      	cbnz	r0, 1fcc2 <ble_ll_init_rx_isr_end+0x27a>
    if (init_addr && !inita_is_rpa) {
   1fcac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1fcae:	b11b      	cbz	r3, 1fcb8 <ble_ll_init_rx_isr_end+0x270>
   1fcb0:	b915      	cbnz	r5, 1fcb8 <ble_ll_init_rx_isr_end+0x270>
        connsm->inita_identity_used = 1;
   1fcb2:	2301      	movs	r3, #1
   1fcb4:	f886 3090 	strb.w	r3, [r6, #144]	; 0x90
    CONN_F_CONN_REQ_TXD(connsm) = 1;
   1fcb8:	7873      	ldrb	r3, [r6, #1]
   1fcba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1fcbe:	7073      	strb	r3, [r6, #1]
   1fcc0:	e6d7      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
        ble_ll_sched_rmv_elem(&connsm->conn_sch);
   1fcc2:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
   1fcc6:	f005 fb73 	bl	253b0 <ble_ll_sched_rmv_elem>
        goto init_rx_isr_exit;
   1fcca:	e6d2      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
    rc = -1;
   1fccc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fcd0:	e6cf      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
   1fcd2:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fcd6:	e6cc      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
   1fcd8:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fcdc:	e6c9      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
   1fcde:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fce2:	e6c6      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
   1fce4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fce8:	e6c3      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
   1fcea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fcee:	e6c0      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
   1fcf0:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fcf4:	e6bd      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
   1fcf6:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fcfa:	e6ba      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
   1fcfc:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   1fd00:	e6b7      	b.n	1fa72 <ble_ll_init_rx_isr_end+0x2a>
   1fd02:	bf00      	nop
   1fd04:	200087ec 	.word	0x200087ec
   1fd08:	20008a40 	.word	0x20008a40
        if (CONN_F_CONN_REQ_TXD(connsm) == 1) {
   1fd0c:	f996 3001 	ldrsb.w	r3, [r6, #1]
   1fd10:	2b00      	cmp	r3, #0
   1fd12:	db07      	blt.n	1fd24 <ble_ll_init_rx_isr_end+0x2dc>
        ble_phy_restart_rx();
   1fd14:	f006 fc38 	bl	26588 <ble_phy_restart_rx>
        rc = 0;
   1fd18:	f04f 0800 	mov.w	r8, #0
    }

    return rc;
}
   1fd1c:	4640      	mov	r0, r8
   1fd1e:	b00d      	add	sp, #52	; 0x34
   1fd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            CONN_F_CONN_REQ_TXD(connsm) = 0;
   1fd24:	7873      	ldrb	r3, [r6, #1]
   1fd26:	f36f 13c7 	bfc	r3, #7, #1
   1fd2a:	7073      	strb	r3, [r6, #1]
            CONN_F_AUX_CONN_REQ(connsm) = 0;
   1fd2c:	78f3      	ldrb	r3, [r6, #3]
   1fd2e:	f36f 0382 	bfc	r3, #2, #1
   1fd32:	70f3      	strb	r3, [r6, #3]
            ble_ll_sched_rmv_elem(&connsm->conn_sch);
   1fd34:	f106 00dc 	add.w	r0, r6, #220	; 0xdc
   1fd38:	f005 fb3a 	bl	253b0 <ble_ll_sched_rmv_elem>
   1fd3c:	e7ea      	b.n	1fd14 <ble_ll_init_rx_isr_end+0x2cc>
   1fd3e:	bf00      	nop

0001fd40 <ble_ll_conn_timeout>:
 * @param connsm
 * @param ble_err
 */
void
ble_ll_conn_timeout(struct ble_ll_conn_sm *connsm, uint8_t ble_err)
{
   1fd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd42:	4604      	mov	r4, r0
   1fd44:	460d      	mov	r5, r1
    int was_current;
    os_sr_t sr;

    was_current = 0;
    OS_ENTER_CRITICAL(sr);
   1fd46:	f7eb fbc3 	bl	b4d0 <os_arch_save_sr>
   1fd4a:	4606      	mov	r6, r0
    if (g_ble_ll_conn_cur_sm == connsm) {
   1fd4c:	4b0a      	ldr	r3, [pc, #40]	; (1fd78 <ble_ll_conn_timeout+0x38>)
   1fd4e:	681b      	ldr	r3, [r3, #0]
   1fd50:	42a3      	cmp	r3, r4
   1fd52:	d009      	beq.n	1fd68 <ble_ll_conn_timeout+0x28>
    was_current = 0;
   1fd54:	2700      	movs	r7, #0
        ble_ll_conn_current_sm_over(NULL);
        was_current = 1;
    }
    OS_EXIT_CRITICAL(sr);
   1fd56:	4630      	mov	r0, r6
   1fd58:	f7eb fbc0 	bl	b4dc <os_arch_restore_sr>

    /* Check if we need to resume scanning */
    if (was_current) {
   1fd5c:	b94f      	cbnz	r7, 1fd72 <ble_ll_conn_timeout+0x32>
        ble_ll_scan_chk_resume();
    }

    ble_ll_conn_end(connsm, ble_err);
   1fd5e:	4629      	mov	r1, r5
   1fd60:	4620      	mov	r0, r4
   1fd62:	f7ff fc93 	bl	1f68c <ble_ll_conn_end>
}
   1fd66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ble_ll_conn_current_sm_over(NULL);
   1fd68:	2000      	movs	r0, #0
   1fd6a:	f7fe fc25 	bl	1e5b8 <ble_ll_conn_current_sm_over>
        was_current = 1;
   1fd6e:	2701      	movs	r7, #1
   1fd70:	e7f1      	b.n	1fd56 <ble_ll_conn_timeout+0x16>
        ble_ll_scan_chk_resume();
   1fd72:	f004 fd21 	bl	247b8 <ble_ll_scan_chk_resume>
   1fd76:	e7f2      	b.n	1fd5e <ble_ll_conn_timeout+0x1e>
   1fd78:	200087f0 	.word	0x200087f0

0001fd7c <ble_ll_conn_rx_isr_start>:
 *
 * @param rxhdr
 */
int
ble_ll_conn_rx_isr_start(struct ble_mbuf_hdr *rxhdr, uint32_t aa)
{
   1fd7c:	b510      	push	{r4, lr}
     * Disable wait for response timer since we receive a response. We dont
     * care if this is the response we were waiting for or not; the code
     * called at receive end will deal with ending the connection event
     * if needed
     */
    connsm = g_ble_ll_conn_cur_sm;
   1fd7e:	4b17      	ldr	r3, [pc, #92]	; (1fddc <ble_ll_conn_rx_isr_start+0x60>)
   1fd80:	681c      	ldr	r4, [r3, #0]
    if (connsm) {
   1fd82:	b33c      	cbz	r4, 1fdd4 <ble_ll_conn_rx_isr_start+0x58>
        /* Double check access address. Better match connection state machine */
        if (aa != connsm->access_addr) {
   1fd84:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1fd86:	428b      	cmp	r3, r1
   1fd88:	d117      	bne.n	1fdba <ble_ll_conn_rx_isr_start+0x3e>
            g_ble_ll_conn_cur_sm = NULL;
            return -1;
        }

        /* Set connection handle in mbuf header */
        rxhdr->rxinfo.handle = connsm->conn_handle;
   1fd8a:	88a3      	ldrh	r3, [r4, #4]
   1fd8c:	70c3      	strb	r3, [r0, #3]

        /* Set flag denoting we have received a packet in connection event */
        connsm->csmflags.cfbit.pkt_rxd = 1;
   1fd8e:	7823      	ldrb	r3, [r4, #0]
   1fd90:	f043 0301 	orr.w	r3, r3, #1
   1fd94:	7023      	strb	r3, [r4, #0]

        /* Connection is established */
        connsm->conn_state = BLE_LL_CONN_STATE_ESTABLISHED;
   1fd96:	2202      	movs	r2, #2
   1fd98:	71a2      	strb	r2, [r4, #6]

        /* Set anchor point (and last) if 1st rxd frame in connection event */
        if (connsm->csmflags.cfbit.slave_set_last_anchor) {
   1fd9a:	f013 0f20 	tst.w	r3, #32
   1fd9e:	d01b      	beq.n	1fdd8 <ble_ll_conn_rx_isr_start+0x5c>
            connsm->csmflags.cfbit.slave_set_last_anchor = 0;
   1fda0:	b2db      	uxtb	r3, r3
   1fda2:	f36f 1345 	bfc	r3, #5, #1
   1fda6:	7023      	strb	r3, [r4, #0]
            connsm->last_anchor_point = rxhdr->beg_cputime;
   1fda8:	6883      	ldr	r3, [r0, #8]
   1fdaa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
            connsm->anchor_point = connsm->last_anchor_point;
   1fdae:	6763      	str	r3, [r4, #116]	; 0x74
            connsm->anchor_point_usecs = rxhdr->rem_usecs;
   1fdb0:	68c3      	ldr	r3, [r0, #12]
   1fdb2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
        }
    }
    return 1;
   1fdb6:	2001      	movs	r0, #1
}
   1fdb8:	bd10      	pop	{r4, pc}
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   1fdba:	2000      	movs	r0, #0
   1fdbc:	f7fd fa54 	bl	1d268 <ble_ll_state_set>
            ble_ll_event_send(&connsm->conn_ev_end);
   1fdc0:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   1fdc4:	f7fd fa5c 	bl	1d280 <ble_ll_event_send>
            g_ble_ll_conn_cur_sm = NULL;
   1fdc8:	4b04      	ldr	r3, [pc, #16]	; (1fddc <ble_ll_conn_rx_isr_start+0x60>)
   1fdca:	2200      	movs	r2, #0
   1fdcc:	601a      	str	r2, [r3, #0]
            return -1;
   1fdce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1fdd2:	e7f1      	b.n	1fdb8 <ble_ll_conn_rx_isr_start+0x3c>
    return 1;
   1fdd4:	2001      	movs	r0, #1
   1fdd6:	e7ef      	b.n	1fdb8 <ble_ll_conn_rx_isr_start+0x3c>
   1fdd8:	2001      	movs	r0, #1
   1fdda:	e7ed      	b.n	1fdb8 <ble_ll_conn_rx_isr_start+0x3c>
   1fddc:	200087f0 	.word	0x200087f0

0001fde0 <ble_ll_conn_rx_data_pdu>:
 * @param rxpdu Pointer to received pdu
 * @param rxpdu Pointer to ble mbuf header of received pdu
 */
void
ble_ll_conn_rx_data_pdu(struct os_mbuf *rxpdu, struct ble_mbuf_hdr *hdr)
{
   1fde0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t acl_len;
    uint16_t acl_hdr;
    struct ble_ll_conn_sm *connsm;

    /* Packets with invalid CRC are not sent to LL */
    BLE_LL_ASSERT(BLE_MBUF_HDR_CRC_OK(hdr));
   1fde4:	880b      	ldrh	r3, [r1, #0]
   1fde6:	f013 0f80 	tst.w	r3, #128	; 0x80
   1fdea:	d01a      	beq.n	1fe22 <ble_ll_conn_rx_data_pdu+0x42>
   1fdec:	4606      	mov	r6, r0
   1fdee:	460c      	mov	r4, r1

    /* XXX: there is a chance that the connection was thrown away and
       re-used before processing packets here. Fix this. */
    /* We better have a connection state machine */
    connsm = ble_ll_conn_find_active_conn(hdr->rxinfo.handle);
   1fdf0:	78c8      	ldrb	r0, [r1, #3]
   1fdf2:	f7ff f93b 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (!connsm) {
   1fdf6:	4605      	mov	r5, r0
   1fdf8:	b170      	cbz	r0, 1fe18 <ble_ll_conn_rx_data_pdu+0x38>
       STATS_INC(ble_ll_conn_stats, no_conn_sm);
       goto conn_rx_data_pdu_end;
    }

    /* Check state machine */
    ble_ll_conn_chk_csm_flags(connsm);
   1fdfa:	f7fe ffb7 	bl	1ed6c <ble_ll_conn_chk_csm_flags>

    /* Validate rx data pdu */
    rxbuf = rxpdu->om_data;
   1fdfe:	6833      	ldr	r3, [r6, #0]
    hdr_byte = rxbuf[0];
   1fe00:	781f      	ldrb	r7, [r3, #0]
    acl_len = rxbuf[1];
   1fe02:	f893 8001 	ldrb.w	r8, [r3, #1]

    /*
     * Check that the LLID and payload length are reasonable.
     * Empty payload is only allowed for LLID == 01b.
     *  */
    if ((llid == 0) || ((acl_len == 0) && (llid != BLE_LL_LLID_DATA_FRAG))) {
   1fe06:	f017 0903 	ands.w	r9, r7, #3
   1fe0a:	d005      	beq.n	1fe18 <ble_ll_conn_rx_data_pdu+0x38>
   1fe0c:	f1b8 0f00 	cmp.w	r8, #0
   1fe10:	d111      	bne.n	1fe36 <ble_ll_conn_rx_data_pdu+0x56>
   1fe12:	f1b9 0f01 	cmp.w	r9, #1
   1fe16:	d00e      	beq.n	1fe36 <ble_ll_conn_rx_data_pdu+0x56>
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_CONN_CREDIT) {
        ble_ll_conn_cth_flow_free_credit(connsm, 1);
    }
#endif

    os_mbuf_free_chain(rxpdu);
   1fe18:	4630      	mov	r0, r6
   1fe1a:	f7ea f9e1 	bl	a1e0 <os_mbuf_free_chain>
}
   1fe1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    BLE_LL_ASSERT(BLE_MBUF_HDR_CRC_OK(hdr));
   1fe22:	f7e8 f9cd 	bl	81c0 <hal_debugger_connected>
   1fe26:	b100      	cbz	r0, 1fe2a <ble_ll_conn_rx_data_pdu+0x4a>
   1fe28:	be01      	bkpt	0x0001
   1fe2a:	2300      	movs	r3, #0
   1fe2c:	461a      	mov	r2, r3
   1fe2e:	4619      	mov	r1, r3
   1fe30:	4618      	mov	r0, r3
   1fe32:	f7e9 fd5b 	bl	98ec <__assert_func>
    if ((connsm->enc_data.enc_state > CONN_ENC_S_PAUSE_ENC_RSP_WAIT) &&
   1fe36:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   1fe3a:	2b04      	cmp	r3, #4
   1fe3c:	d83c      	bhi.n	1feb8 <ble_ll_conn_rx_data_pdu+0xd8>
    if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   1fe3e:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   1fe42:	2b02      	cmp	r3, #2
   1fe44:	d042      	beq.n	1fecc <ble_ll_conn_rx_data_pdu+0xec>
    connsm->conn_rssi = hdr->rxinfo.rssi;
   1fe46:	f994 3004 	ldrsb.w	r3, [r4, #4]
   1fe4a:	722b      	strb	r3, [r5, #8]
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   1fe4c:	79eb      	ldrb	r3, [r5, #7]
   1fe4e:	2b02      	cmp	r3, #2
   1fe50:	d047      	beq.n	1fee2 <ble_ll_conn_rx_data_pdu+0x102>
    rxd_sn = hdr_byte & BLE_LL_DATA_HDR_SN_MASK;
   1fe52:	f007 0708 	and.w	r7, r7, #8
    if (rxd_sn == connsm->last_rxd_sn) {
   1fe56:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
   1fe5a:	42bb      	cmp	r3, r7
   1fe5c:	d0dc      	beq.n	1fe18 <ble_ll_conn_rx_data_pdu+0x38>
    connsm->last_rxd_sn = rxd_sn;
   1fe5e:	f885 7035 	strb.w	r7, [r5, #53]	; 0x35
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   1fe62:	f1b9 0f01 	cmp.w	r9, #1
   1fe66:	d044      	beq.n	1fef2 <ble_ll_conn_rx_data_pdu+0x112>
    if (BLE_MBUF_HDR_MIC_FAILURE(hdr)) {
   1fe68:	8823      	ldrh	r3, [r4, #0]
   1fe6a:	f013 0f20 	tst.w	r3, #32
   1fe6e:	d144      	bne.n	1fefa <ble_ll_conn_rx_data_pdu+0x11a>
    if (llid == BLE_LL_LLID_CTRL) {
   1fe70:	f1b9 0f03 	cmp.w	r9, #3
   1fe74:	d046      	beq.n	1ff04 <ble_ll_conn_rx_data_pdu+0x124>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1fe76:	7972      	ldrb	r2, [r6, #5]
   1fe78:	2a07      	cmp	r2, #7
   1fe7a:	d948      	bls.n	1ff0e <ble_ll_conn_rx_data_pdu+0x12e>
        startoff = om->om_pkthdr_len;
   1fe7c:	b291      	uxth	r1, r2
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1fe7e:	4632      	mov	r2, r6
   1fe80:	f852 3b10 	ldr.w	r3, [r2], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1fe84:	440a      	add	r2, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1fe86:	1a9b      	subs	r3, r3, r2
   1fe88:	b29b      	uxth	r3, r3
        BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   1fe8a:	2b01      	cmp	r3, #1
   1fe8c:	d941      	bls.n	1ff12 <ble_ll_conn_rx_data_pdu+0x132>
        os_mbuf_prepend(rxpdu, 2);
   1fe8e:	2102      	movs	r1, #2
   1fe90:	4630      	mov	r0, r6
   1fe92:	f7ea fb63 	bl	a55c <os_mbuf_prepend>
        rxbuf = rxpdu->om_data;
   1fe96:	6834      	ldr	r4, [r6, #0]
        acl_hdr = (llid << 12) | connsm->conn_handle;
   1fe98:	f9b5 1004 	ldrsh.w	r1, [r5, #4]
   1fe9c:	ea41 3109 	orr.w	r1, r1, r9, lsl #12
        put_le16(rxbuf, acl_hdr);
   1fea0:	b289      	uxth	r1, r1
   1fea2:	4620      	mov	r0, r4
   1fea4:	f7fb fe9c 	bl	1bbe0 <put_le16>
        put_le16(rxbuf + 2, acl_len);
   1fea8:	4641      	mov	r1, r8
   1feaa:	1ca0      	adds	r0, r4, #2
   1feac:	f7fb fe98 	bl	1bbe0 <put_le16>
        ble_hci_trans_ll_acl_tx(rxpdu);
   1feb0:	4630      	mov	r0, r6
   1feb2:	f7f6 fb15 	bl	164e0 <ble_hci_trans_ll_acl_tx>
   1feb6:	e7b2      	b.n	1fe1e <ble_ll_conn_rx_data_pdu+0x3e>
            !ble_ll_ctrl_enc_allowed_pdu_rx(rxpdu)) {
   1feb8:	4630      	mov	r0, r6
   1feba:	f001 fc88 	bl	217ce <ble_ll_ctrl_enc_allowed_pdu_rx>
    if ((connsm->enc_data.enc_state > CONN_ENC_S_PAUSE_ENC_RSP_WAIT) &&
   1febe:	2800      	cmp	r0, #0
   1fec0:	d1bd      	bne.n	1fe3e <ble_ll_conn_rx_data_pdu+0x5e>
        ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   1fec2:	213d      	movs	r1, #61	; 0x3d
   1fec4:	4628      	mov	r0, r5
   1fec6:	f7ff ff3b 	bl	1fd40 <ble_ll_conn_timeout>
        goto conn_rx_data_pdu_end;
   1feca:	e7a5      	b.n	1fe18 <ble_ll_conn_rx_data_pdu+0x38>
    if ((connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) &&
   1fecc:	78ab      	ldrb	r3, [r5, #2]
   1fece:	f013 0f08 	tst.w	r3, #8
   1fed2:	d0b8      	beq.n	1fe46 <ble_ll_conn_rx_data_pdu+0x66>
        CONN_F_LE_PING_SUPP(connsm) && (acl_len != 0)) {
   1fed4:	f1b8 0f00 	cmp.w	r8, #0
   1fed8:	d0b5      	beq.n	1fe46 <ble_ll_conn_rx_data_pdu+0x66>
        ble_ll_conn_auth_pyld_timer_start(connsm);
   1feda:	4628      	mov	r0, r5
   1fedc:	f7ff fac6 	bl	1f46c <ble_ll_conn_auth_pyld_timer_start>
   1fee0:	e7b1      	b.n	1fe46 <ble_ll_conn_rx_data_pdu+0x66>
        if (hdr_byte & BLE_LL_DATA_HDR_NESN_MASK) {
   1fee2:	f017 0f04 	tst.w	r7, #4
   1fee6:	d0b4      	beq.n	1fe52 <ble_ll_conn_rx_data_pdu+0x72>
            connsm->csmflags.cfbit.allow_slave_latency = 1;
   1fee8:	782b      	ldrb	r3, [r5, #0]
   1feea:	f043 0310 	orr.w	r3, r3, #16
   1feee:	702b      	strb	r3, [r5, #0]
   1fef0:	e7af      	b.n	1fe52 <ble_ll_conn_rx_data_pdu+0x72>
    if ((llid == BLE_LL_LLID_DATA_FRAG) && (acl_len == 0)) {
   1fef2:	f1b8 0f00 	cmp.w	r8, #0
   1fef6:	d08f      	beq.n	1fe18 <ble_ll_conn_rx_data_pdu+0x38>
   1fef8:	e7b6      	b.n	1fe68 <ble_ll_conn_rx_data_pdu+0x88>
        ble_ll_conn_timeout(connsm, BLE_ERR_CONN_TERM_MIC);
   1fefa:	213d      	movs	r1, #61	; 0x3d
   1fefc:	4628      	mov	r0, r5
   1fefe:	f7ff ff1f 	bl	1fd40 <ble_ll_conn_timeout>
        goto conn_rx_data_pdu_end;
   1ff02:	e789      	b.n	1fe18 <ble_ll_conn_rx_data_pdu+0x38>
        if (ble_ll_ctrl_rx_pdu(connsm, rxpdu)) {
   1ff04:	4631      	mov	r1, r6
   1ff06:	4628      	mov	r0, r5
   1ff08:	f001 ff9c 	bl	21e44 <ble_ll_ctrl_rx_pdu>
   1ff0c:	e787      	b.n	1fe1e <ble_ll_conn_rx_data_pdu+0x3e>
    startoff = 0;
   1ff0e:	2100      	movs	r1, #0
   1ff10:	e7b5      	b.n	1fe7e <ble_ll_conn_rx_data_pdu+0x9e>
        BLE_LL_ASSERT(OS_MBUF_LEADINGSPACE(rxpdu) >= 2);
   1ff12:	f7e8 f955 	bl	81c0 <hal_debugger_connected>
   1ff16:	b100      	cbz	r0, 1ff1a <ble_ll_conn_rx_data_pdu+0x13a>
   1ff18:	be01      	bkpt	0x0001
   1ff1a:	2300      	movs	r3, #0
   1ff1c:	461a      	mov	r2, r3
   1ff1e:	4619      	mov	r1, r3
   1ff20:	4618      	mov	r0, r3
   1ff22:	f7e9 fce3 	bl	98ec <__assert_func>
	...

0001ff28 <ble_ll_conn_rx_isr_end>:
 *      == 0: Success. Do not disable the PHY.
 *       > 0: Do not disable PHY as that has already been done.
 */
int
ble_ll_conn_rx_isr_end(uint8_t *rxbuf, struct ble_mbuf_hdr *rxhdr)
{
   1ff28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ff2c:	b083      	sub	sp, #12
   1ff2e:	4606      	mov	r6, r0
   1ff30:	4688      	mov	r8, r1
    struct ble_mbuf_hdr *txhdr;
    int rx_phy_mode;
    bool alloc_rxpdu = true;

    rc = -1;
    connsm = g_ble_ll_conn_cur_sm;
   1ff32:	4b8d      	ldr	r3, [pc, #564]	; (20168 <ble_ll_conn_rx_isr_end+0x240>)
   1ff34:	681c      	ldr	r4, [r3, #0]

    /* Retrieve the header and payload length */
    hdr_byte = rxbuf[0];
   1ff36:	f890 9000 	ldrb.w	r9, [r0]
    rx_pyld_len = rxbuf[1];
   1ff3a:	f890 a001 	ldrb.w	sl, [r0, #1]

    /*
     * No need to alloc rxpdu for packets with invalid CRC, we would throw them
     * away instantly from LL anyway.
     */
    if (!BLE_MBUF_HDR_CRC_OK(rxhdr)) {
   1ff3e:	880b      	ldrh	r3, [r1, #0]
   1ff40:	f013 0f80 	tst.w	r3, #128	; 0x80
   1ff44:	d139      	bne.n	1ffba <ble_ll_conn_rx_isr_end+0x92>
    struct os_mbuf *rxpdu = NULL;
   1ff46:	2700      	movs	r7, #0

    /*
     * We should have a current connection state machine. If we dont, we just
     * hand the packet to the higher layer to count it.
     */
    if (!connsm) {
   1ff48:	2c00      	cmp	r4, #0
   1ff4a:	f000 80fd 	beq.w	20148 <ble_ll_conn_rx_isr_end+0x220>
    /*
     * Calculate the end time of the received PDU. NOTE: this looks strange
     * but for the 32768 crystal we add the time it takes to send the packet
     * to the 'additional usecs' field to save some calculations.
     */
    begtime = rxhdr->beg_cputime;
   1ff4e:	f8d8 b008 	ldr.w	fp, [r8, #8]
#if BLE_LL_BT5_PHY_SUPPORTED
    rx_phy_mode = connsm->phy_data.rx_phy_mode;
#else
    rx_phy_mode = BLE_PHY_MODE_1M;
#endif
    add_usecs = rxhdr->rem_usecs +
   1ff52:	f8d8 500c 	ldr.w	r5, [r8, #12]
            ble_ll_pdu_tx_time_get(rx_pyld_len, rx_phy_mode);
   1ff56:	2101      	movs	r1, #1
   1ff58:	4650      	mov	r0, sl
   1ff5a:	f7fd f9d9 	bl	1d310 <ble_ll_pdu_tx_time_get>
    add_usecs = rxhdr->rem_usecs +
   1ff5e:	4405      	add	r5, r0
    /*
     * Check the packet CRC. A connection event can continue even if the
     * received PDU does not pass the CRC check. If we receive two consecutive
     * CRC errors we end the conection event.
     */
    if (!BLE_MBUF_HDR_CRC_OK(rxhdr)) {
   1ff60:	f8b8 3000 	ldrh.w	r3, [r8]
   1ff64:	f013 0f80 	tst.w	r3, #128	; 0x80
   1ff68:	d136      	bne.n	1ffd8 <ble_ll_conn_rx_isr_end+0xb0>
        /*
         * Increment # of consecutively received CRC errors. If more than
         * one we will end the connection event.
         */
        ++connsm->cons_rxd_bad_crc;
   1ff6a:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
   1ff6e:	3301      	adds	r3, #1
   1ff70:	b2db      	uxtb	r3, r3
   1ff72:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if (connsm->cons_rxd_bad_crc >= 2) {
   1ff76:	2b01      	cmp	r3, #1
   1ff78:	d925      	bls.n	1ffc6 <ble_ll_conn_rx_isr_end+0x9e>
            reply = 0;
   1ff7a:	2300      	movs	r3, #0
    /* If reply flag set, send data pdu and continue connection event */
    rc = -1;
    if (rx_pyld_len && CONN_F_ENCRYPTED(connsm)) {
        rx_pyld_len += BLE_LL_DATA_MIC_LEN;
    }
    if (reply && ble_ll_conn_can_send_next_pdu(connsm, begtime, add_usecs)) {
   1ff7c:	2b00      	cmp	r3, #0
   1ff7e:	f000 80e9 	beq.w	20154 <ble_ll_conn_rx_isr_end+0x22c>
   1ff82:	462a      	mov	r2, r5
   1ff84:	4659      	mov	r1, fp
   1ff86:	4620      	mov	r0, r4
   1ff88:	f7fe feb9 	bl	1ecfe <ble_ll_conn_can_send_next_pdu>
   1ff8c:	2800      	cmp	r0, #0
   1ff8e:	f000 80e4 	beq.w	2015a <ble_ll_conn_rx_isr_end+0x232>
        rc = ble_ll_conn_tx_pdu(connsm);
   1ff92:	4620      	mov	r0, r4
   1ff94:	f7fe fbc2 	bl	1e71c <ble_ll_conn_tx_pdu>
   1ff98:	4680      	mov	r8, r0
    }

conn_exit:
    /* Copy the received pdu and hand it up */
    if (rxpdu) {
   1ff9a:	b137      	cbz	r7, 1ffaa <ble_ll_conn_rx_isr_end+0x82>
        ble_phy_rxpdu_copy(rxbuf, rxpdu);
   1ff9c:	4639      	mov	r1, r7
   1ff9e:	4630      	mov	r0, r6
   1ffa0:	f005 feec 	bl	25d7c <ble_phy_rxpdu_copy>
        ble_ll_rx_pdu_in(rxpdu);
   1ffa4:	4638      	mov	r0, r7
   1ffa6:	f7fd f87f 	bl	1d0a8 <ble_ll_rx_pdu_in>
    }

    /* Send link layer a connection end event if over */
    if (rc) {
   1ffaa:	f1b8 0f00 	cmp.w	r8, #0
   1ffae:	f040 80d7 	bne.w	20160 <ble_ll_conn_rx_isr_end+0x238>
        ble_ll_conn_current_sm_over(connsm);
    }

    return rc;
}
   1ffb2:	4640      	mov	r0, r8
   1ffb4:	b003      	add	sp, #12
   1ffb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rxpdu = ble_ll_rxpdu_alloc(rx_pyld_len + BLE_LL_PDU_HDR_LEN);
   1ffba:	f10a 0002 	add.w	r0, sl, #2
   1ffbe:	f7fc ff4b 	bl	1ce58 <ble_ll_rxpdu_alloc>
   1ffc2:	4607      	mov	r7, r0
   1ffc4:	e7c0      	b.n	1ff48 <ble_ll_conn_rx_isr_end+0x20>
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   1ffc6:	79e3      	ldrb	r3, [r4, #7]
   1ffc8:	2b01      	cmp	r3, #1
   1ffca:	d001      	beq.n	1ffd0 <ble_ll_conn_rx_isr_end+0xa8>
                reply = 1;
   1ffcc:	2301      	movs	r3, #1
   1ffce:	e7d5      	b.n	1ff7c <ble_ll_conn_rx_isr_end+0x54>
                reply = CONN_F_LAST_TXD_MD(connsm);
   1ffd0:	7863      	ldrb	r3, [r4, #1]
   1ffd2:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1ffd6:	e7d1      	b.n	1ff7c <ble_ll_conn_rx_isr_end+0x54>
        connsm->cons_rxd_bad_crc = 0;
   1ffd8:	2300      	movs	r3, #0
   1ffda:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
                                        os_cputime_usecs_to_ticks(add_usecs);
   1ffde:	4628      	mov	r0, r5
   1ffe0:	f7fb fecc 	bl	1bd7c <os_cputime_usecs_to_ticks>
        connsm->last_rxd_pdu_cputime = begtime +
   1ffe4:	4458      	add	r0, fp
   1ffe6:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
        if ((hdr_byte & BLE_LL_DATA_HDR_LLID_MASK) == 0) {
   1ffea:	f019 0303 	ands.w	r3, r9, #3
   1ffee:	9300      	str	r3, [sp, #0]
   1fff0:	f000 80ad 	beq.w	2014e <ble_ll_conn_rx_isr_end+0x226>
        connsm->last_rxd_hdr_byte = hdr_byte;
   1fff4:	f884 9036 	strb.w	r9, [r4, #54]	; 0x36
        if (BLE_LL_LLID_IS_CTRL(hdr_byte)) {
   1fff8:	2b03      	cmp	r3, #3
   1fffa:	d03b      	beq.n	20074 <ble_ll_conn_rx_isr_end+0x14c>
    uint8_t opcode = 0;
   1fffc:	2300      	movs	r3, #0
   1fffe:	9301      	str	r3, [sp, #4]
        hdr_sn = hdr_byte & BLE_LL_DATA_HDR_SN_MASK;
   20000:	f009 0208 	and.w	r2, r9, #8
        conn_nesn = connsm->next_exp_seqnum;
   20004:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
        if (rxpdu && ((hdr_sn && conn_nesn) || (!hdr_sn && !conn_nesn))) {
   20008:	b1a7      	cbz	r7, 20034 <ble_ll_conn_rx_isr_end+0x10c>
   2000a:	b102      	cbz	r2, 2000e <ble_ll_conn_rx_isr_end+0xe6>
   2000c:	b90b      	cbnz	r3, 20012 <ble_ll_conn_rx_isr_end+0xea>
   2000e:	b98a      	cbnz	r2, 20034 <ble_ll_conn_rx_isr_end+0x10c>
   20010:	b983      	cbnz	r3, 20034 <ble_ll_conn_rx_isr_end+0x10c>
            connsm->next_exp_seqnum ^= 1;
   20012:	f083 0301 	eor.w	r3, r3, #1
   20016:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
            if (CONN_F_ENCRYPTED(connsm) && !ble_ll_conn_is_empty_pdu(rxbuf)) {
   2001a:	78a3      	ldrb	r3, [r4, #2]
   2001c:	f013 0f02 	tst.w	r3, #2
   20020:	d008      	beq.n	20034 <ble_ll_conn_rx_isr_end+0x10c>
   20022:	4630      	mov	r0, r6
   20024:	f7fe fa88 	bl	1e538 <ble_ll_conn_is_empty_pdu>
   20028:	b920      	cbnz	r0, 20034 <ble_ll_conn_rx_isr_end+0x10c>
                ++connsm->enc_data.rx_pkt_cntr;
   2002a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
   2002e:	3301      	adds	r3, #1
   20030:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
        ble_ll_trace_u32x2(BLE_LL_TRACE_ID_CONN_RX, connsm->tx_seqnum,
   20034:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
   20038:	f009 0104 	and.w	r1, r9, #4
        if (CONN_F_EMPTY_PDU_TXD(connsm) || connsm->cur_tx_pdu) {
   2003c:	7863      	ldrb	r3, [r4, #1]
   2003e:	f013 0320 	ands.w	r3, r3, #32
   20042:	d102      	bne.n	2004a <ble_ll_conn_rx_isr_end+0x122>
   20044:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
   20048:	b160      	cbz	r0, 20064 <ble_ll_conn_rx_isr_end+0x13c>
            if ((hdr_nesn && conn_sn) || (!hdr_nesn && !conn_sn)) {
   2004a:	b101      	cbz	r1, 2004e <ble_ll_conn_rx_isr_end+0x126>
   2004c:	b952      	cbnz	r2, 20064 <ble_ll_conn_rx_isr_end+0x13c>
   2004e:	b901      	cbnz	r1, 20052 <ble_ll_conn_rx_isr_end+0x12a>
   20050:	b142      	cbz	r2, 20064 <ble_ll_conn_rx_isr_end+0x13c>
                connsm->tx_seqnum ^= 1;
   20052:	f082 0201 	eor.w	r2, r2, #1
   20056:	f884 2032 	strb.w	r2, [r4, #50]	; 0x32
                if (CONN_F_EMPTY_PDU_TXD(connsm)) {
   2005a:	b173      	cbz	r3, 2007a <ble_ll_conn_rx_isr_end+0x152>
                    CONN_F_EMPTY_PDU_TXD(connsm) = 0;
   2005c:	7863      	ldrb	r3, [r4, #1]
   2005e:	f36f 1345 	bfc	r3, #5, #1
   20062:	7063      	strb	r3, [r4, #1]
        if (BLE_LL_LLID_IS_CTRL(hdr_byte) &&
   20064:	9b00      	ldr	r3, [sp, #0]
   20066:	2b03      	cmp	r3, #3
   20068:	d052      	beq.n	20110 <ble_ll_conn_rx_isr_end+0x1e8>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   2006a:	79e3      	ldrb	r3, [r4, #7]
   2006c:	2b01      	cmp	r3, #1
   2006e:	d05d      	beq.n	2012c <ble_ll_conn_rx_isr_end+0x204>
            reply = 1;
   20070:	2301      	movs	r3, #1
   20072:	e783      	b.n	1ff7c <ble_ll_conn_rx_isr_end+0x54>
            opcode = rxbuf[2];
   20074:	78b3      	ldrb	r3, [r6, #2]
   20076:	9301      	str	r3, [sp, #4]
   20078:	e7c2      	b.n	20000 <ble_ll_conn_rx_isr_end+0xd8>
                txpdu = connsm->cur_tx_pdu;
   2007a:	f8d4 80ac 	ldr.w	r8, [r4, #172]	; 0xac
                if (txpdu) {
   2007e:	f1b8 0f00 	cmp.w	r8, #0
   20082:	d0ef      	beq.n	20064 <ble_ll_conn_rx_isr_end+0x13c>
                    if (connsm->enc_data.tx_encrypted) {
   20084:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
   20088:	b123      	cbz	r3, 20094 <ble_ll_conn_rx_isr_end+0x16c>
                        ++connsm->enc_data.tx_pkt_cntr;
   2008a:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   2008e:	3301      	adds	r3, #1
   20090:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
                    if ((txhdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK)
   20094:	f898 301b 	ldrb.w	r3, [r8, #27]
   20098:	f003 0303 	and.w	r3, r3, #3
   2009c:	2b03      	cmp	r3, #3
   2009e:	d01c      	beq.n	200da <ble_ll_conn_rx_isr_end+0x1b2>
                    txhdr->txinfo.offset += txhdr->txinfo.pyld_len;
   200a0:	f898 101a 	ldrb.w	r1, [r8, #26]
   200a4:	f898 3019 	ldrb.w	r3, [r8, #25]
   200a8:	440b      	add	r3, r1
   200aa:	b2db      	uxtb	r3, r3
   200ac:	f888 3019 	strb.w	r3, [r8, #25]
                    if (txhdr->txinfo.offset >= OS_MBUF_PKTLEN(txpdu)) {
   200b0:	b298      	uxth	r0, r3
   200b2:	f8b8 2010 	ldrh.w	r2, [r8, #16]
   200b6:	4290      	cmp	r0, r2
   200b8:	d321      	bcc.n	200fe <ble_ll_conn_rx_isr_end+0x1d6>
                        if (txhdr->txinfo.pyld_len != 0) {
   200ba:	b139      	cbz	r1, 200cc <ble_ll_conn_rx_isr_end+0x1a4>
                            ++connsm->completed_pkts;
   200bc:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   200c0:	3301      	adds	r3, #1
   200c2:	b29b      	uxth	r3, r3
   200c4:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
                            if (connsm->completed_pkts > 2) {
   200c8:	2b02      	cmp	r3, #2
   200ca:	d812      	bhi.n	200f2 <ble_ll_conn_rx_isr_end+0x1ca>
                        os_mbuf_free_chain(txpdu);
   200cc:	4640      	mov	r0, r8
   200ce:	f7ea f887 	bl	a1e0 <os_mbuf_free_chain>
                        connsm->cur_tx_pdu = NULL;
   200d2:	2300      	movs	r3, #0
   200d4:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
   200d8:	e7c4      	b.n	20064 <ble_ll_conn_rx_isr_end+0x13c>
                        connsm->cur_tx_pdu = NULL;
   200da:	2300      	movs	r3, #0
   200dc:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
                        rc = ble_ll_ctrl_tx_done(txpdu, connsm);
   200e0:	4621      	mov	r1, r4
   200e2:	4640      	mov	r0, r8
   200e4:	f002 f893 	bl	2220e <ble_ll_ctrl_tx_done>
                        if (rc) {
   200e8:	4680      	mov	r8, r0
   200ea:	2800      	cmp	r0, #0
   200ec:	f47f af55 	bne.w	1ff9a <ble_ll_conn_rx_isr_end+0x72>
   200f0:	e7b8      	b.n	20064 <ble_ll_conn_rx_isr_end+0x13c>
    os_eventq_put(&evq->evq, &ev->ev);
   200f2:	481e      	ldr	r0, [pc, #120]	; (2016c <ble_ll_conn_rx_isr_end+0x244>)
   200f4:	4601      	mov	r1, r0
   200f6:	3868      	subs	r0, #104	; 0x68
   200f8:	f7e9 ff45 	bl	9f86 <os_eventq_put>
   200fc:	e7e6      	b.n	200cc <ble_ll_conn_rx_isr_end+0x1a4>
                        rem_bytes = OS_MBUF_PKTLEN(txpdu) - txhdr->txinfo.offset;
   200fe:	b2d2      	uxtb	r2, r2
   20100:	1ad3      	subs	r3, r2, r3
                        rem_bytes = ble_ll_conn_adjust_pyld_len(connsm, rem_bytes);
   20102:	b2d9      	uxtb	r1, r3
   20104:	4620      	mov	r0, r4
   20106:	f7fe fac0 	bl	1e68a <ble_ll_conn_adjust_pyld_len>
                        txhdr->txinfo.pyld_len = rem_bytes;
   2010a:	f888 001a 	strb.w	r0, [r8, #26]
   2010e:	e7a9      	b.n	20064 <ble_ll_conn_rx_isr_end+0x13c>
        if (BLE_LL_LLID_IS_CTRL(hdr_byte) &&
   20110:	9b01      	ldr	r3, [sp, #4]
   20112:	2b02      	cmp	r3, #2
   20114:	d1a9      	bne.n	2006a <ble_ll_conn_rx_isr_end+0x142>
            (opcode == BLE_LL_CTRL_TERMINATE_IND) &&
   20116:	f1ba 0f02 	cmp.w	sl, #2
   2011a:	d1a6      	bne.n	2006a <ble_ll_conn_rx_isr_end+0x142>
            connsm->csmflags.cfbit.terminate_ind_rxd = 1;
   2011c:	7823      	ldrb	r3, [r4, #0]
   2011e:	f043 0304 	orr.w	r3, r3, #4
   20122:	7023      	strb	r3, [r4, #0]
            connsm->rxd_disconnect_reason = rxbuf[3];
   20124:	78f3      	ldrb	r3, [r6, #3]
   20126:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   2012a:	e79e      	b.n	2006a <ble_ll_conn_rx_isr_end+0x142>
            reply = CONN_F_LAST_TXD_MD(connsm) || (hdr_byte & BLE_LL_DATA_HDR_MD_MASK);
   2012c:	7863      	ldrb	r3, [r4, #1]
   2012e:	f013 0f40 	tst.w	r3, #64	; 0x40
   20132:	d104      	bne.n	2013e <ble_ll_conn_rx_isr_end+0x216>
   20134:	f019 0f10 	tst.w	r9, #16
   20138:	d004      	beq.n	20144 <ble_ll_conn_rx_isr_end+0x21c>
   2013a:	2301      	movs	r3, #1
   2013c:	e000      	b.n	20140 <ble_ll_conn_rx_isr_end+0x218>
   2013e:	2301      	movs	r3, #1
   20140:	b2db      	uxtb	r3, r3
   20142:	e71b      	b.n	1ff7c <ble_ll_conn_rx_isr_end+0x54>
   20144:	2300      	movs	r3, #0
   20146:	e7fb      	b.n	20140 <ble_ll_conn_rx_isr_end+0x218>
    rc = -1;
   20148:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2014c:	e725      	b.n	1ff9a <ble_ll_conn_rx_isr_end+0x72>
   2014e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   20152:	e722      	b.n	1ff9a <ble_ll_conn_rx_isr_end+0x72>
    rc = -1;
   20154:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   20158:	e71f      	b.n	1ff9a <ble_ll_conn_rx_isr_end+0x72>
   2015a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   2015e:	e71c      	b.n	1ff9a <ble_ll_conn_rx_isr_end+0x72>
        ble_ll_conn_current_sm_over(connsm);
   20160:	4620      	mov	r0, r4
   20162:	f7fe fa29 	bl	1e5b8 <ble_ll_conn_current_sm_over>
    return rc;
   20166:	e724      	b.n	1ffb2 <ble_ll_conn_rx_isr_end+0x8a>
   20168:	200087f0 	.word	0x200087f0
   2016c:	20008550 	.word	0x20008550

00020170 <ble_ll_conn_enqueue_pkt>:
 * @param om
 */
void
ble_ll_conn_enqueue_pkt(struct ble_ll_conn_sm *connsm, struct os_mbuf *om,
                        uint8_t hdr_byte, uint8_t length)
{
   20170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20172:	4605      	mov	r5, r0
   20174:	460c      	mov	r4, r1
    struct os_mbuf_pkthdr *pkthdr;
    struct ble_mbuf_hdr *ble_hdr;
    int lifo;

    /* Set mbuf length and packet length if a control PDU */
    if (hdr_byte == BLE_LL_LLID_CTRL) {
   20176:	2a03      	cmp	r2, #3
   20178:	d00d      	beq.n	20196 <ble_ll_conn_enqueue_pkt+0x26>
        OS_MBUF_PKTHDR(om)->omp_len = length;
    }

    /* Set BLE transmit header */
    ble_hdr = BLE_MBUF_HDR_PTR(om);
    ble_hdr->txinfo.flags = 0;
   2017a:	2300      	movs	r3, #0
   2017c:	7623      	strb	r3, [r4, #24]
    ble_hdr->txinfo.offset = 0;
   2017e:	7663      	strb	r3, [r4, #25]
    ble_hdr->txinfo.hdr_byte = hdr_byte;
   20180:	76e2      	strb	r2, [r4, #27]
     * need to do this now.
     */

    lifo = 0;
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   20182:	f895 3118 	ldrb.w	r3, [r5, #280]	; 0x118
   20186:	2b02      	cmp	r3, #2
   20188:	d923      	bls.n	201d2 <ble_ll_conn_enqueue_pkt+0x62>

        /*
         * If this is one of the following types we need to insert it at
         * head of queue.
         */
        llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   2018a:	f002 0203 	and.w	r2, r2, #3
        if (llid == BLE_LL_LLID_CTRL) {
   2018e:	2a03      	cmp	r2, #3
   20190:	d005      	beq.n	2019e <ble_ll_conn_enqueue_pkt+0x2e>
    lifo = 0;
   20192:	2600      	movs	r6, #0
   20194:	e01e      	b.n	201d4 <ble_ll_conn_enqueue_pkt+0x64>
        om->om_len = length;
   20196:	b29b      	uxth	r3, r3
   20198:	80cb      	strh	r3, [r1, #6]
        OS_MBUF_PKTHDR(om)->omp_len = length;
   2019a:	820b      	strh	r3, [r1, #16]
   2019c:	e7ed      	b.n	2017a <ble_ll_conn_enqueue_pkt+0xa>
            switch (om->om_data[0]) {
   2019e:	6822      	ldr	r2, [r4, #0]
   201a0:	7812      	ldrb	r2, [r2, #0]
   201a2:	3a02      	subs	r2, #2
   201a4:	2a0f      	cmp	r2, #15
   201a6:	d809      	bhi.n	201bc <ble_ll_conn_enqueue_pkt+0x4c>
   201a8:	e8df f002 	tbb	[pc, r2]
   201ac:	220f0f22 	.word	0x220f0f22
   201b0:	08080822 	.word	0x08080822
   201b4:	22080a08 	.word	0x22080a08
   201b8:	22080808 	.word	0x22080808
    lifo = 0;
   201bc:	2600      	movs	r6, #0
   201be:	e009      	b.n	201d4 <ble_ll_conn_enqueue_pkt+0x64>
            case BLE_LL_CTRL_START_ENC_REQ:
            case BLE_LL_CTRL_START_ENC_RSP:
                lifo = 1;
                break;
            case BLE_LL_CTRL_PAUSE_ENC_RSP:
                if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   201c0:	79eb      	ldrb	r3, [r5, #7]
   201c2:	2b01      	cmp	r3, #1
   201c4:	d016      	beq.n	201f4 <ble_ll_conn_enqueue_pkt+0x84>
    lifo = 0;
   201c6:	2600      	movs	r6, #0
   201c8:	e004      	b.n	201d4 <ble_ll_conn_enqueue_pkt+0x64>
            case BLE_LL_CTRL_ENC_REQ:
            case BLE_LL_CTRL_ENC_RSP:
                /* If encryption has been paused, we don't want to send any packets from the
                 * TX queue, as they would go unencrypted.
                 */
                if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSED) {
   201ca:	2b05      	cmp	r3, #5
   201cc:	d014      	beq.n	201f8 <ble_ll_conn_enqueue_pkt+0x88>
    lifo = 0;
   201ce:	2600      	movs	r6, #0
   201d0:	e000      	b.n	201d4 <ble_ll_conn_enqueue_pkt+0x64>
   201d2:	2600      	movs	r6, #0
        }
    }
#endif

    /* Add to transmit queue for the connection */
    pkthdr = OS_MBUF_PKTHDR(om);
   201d4:	f104 0710 	add.w	r7, r4, #16
    OS_ENTER_CRITICAL(sr);
   201d8:	f7eb f97a 	bl	b4d0 <os_arch_save_sr>
    if (lifo) {
   201dc:	b196      	cbz	r6, 20204 <ble_ll_conn_enqueue_pkt+0x94>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   201de:	f8d5 30b0 	ldr.w	r3, [r5, #176]	; 0xb0
   201e2:	6163      	str	r3, [r4, #20]
   201e4:	b153      	cbz	r3, 201fc <ble_ll_conn_enqueue_pkt+0x8c>
   201e6:	f8c5 70b0 	str.w	r7, [r5, #176]	; 0xb0
    } else {
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
    }
    OS_EXIT_CRITICAL(sr);
   201ea:	f7eb f977 	bl	b4dc <os_arch_restore_sr>
}
   201ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                lifo = 1;
   201f0:	2601      	movs	r6, #1
   201f2:	e7ef      	b.n	201d4 <ble_ll_conn_enqueue_pkt+0x64>
                    lifo = 1;
   201f4:	2601      	movs	r6, #1
   201f6:	e7ed      	b.n	201d4 <ble_ll_conn_enqueue_pkt+0x64>
                    lifo = 1;
   201f8:	2601      	movs	r6, #1
   201fa:	e7eb      	b.n	201d4 <ble_ll_conn_enqueue_pkt+0x64>
        STAILQ_INSERT_HEAD(&connsm->conn_txq, pkthdr, omp_next);
   201fc:	3414      	adds	r4, #20
   201fe:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
   20202:	e7f0      	b.n	201e6 <ble_ll_conn_enqueue_pkt+0x76>
        STAILQ_INSERT_TAIL(&connsm->conn_txq, pkthdr, omp_next);
   20204:	2300      	movs	r3, #0
   20206:	f844 3f14 	str.w	r3, [r4, #20]!
   2020a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
   2020e:	601f      	str	r7, [r3, #0]
   20210:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
   20214:	e7e9      	b.n	201ea <ble_ll_conn_enqueue_pkt+0x7a>

00020216 <ble_ll_conn_tx_pkt_in>:
 *
 * @return int
 */
void
ble_ll_conn_tx_pkt_in(struct os_mbuf *om, uint16_t handle, uint16_t length)
{
   20216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20218:	4605      	mov	r5, r0
   2021a:	460c      	mov	r4, r1
   2021c:	4617      	mov	r7, r2
    uint16_t pb;
    struct ble_ll_conn_sm *connsm;

    /* See if we have an active matching connection handle */
    conn_handle = handle & 0x0FFF;
    connsm = ble_ll_conn_find_active_conn(conn_handle);
   2021e:	f3c1 000b 	ubfx	r0, r1, #0, #12
   20222:	f7fe ff23 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (connsm) {
   20226:	b160      	cbz	r0, 20242 <ble_ll_conn_tx_pkt_in+0x2c>
   20228:	4606      	mov	r6, r0
        /* Construct LL header in buffer (NOTE: pb already checked) */
        pb = handle & 0x3000;
        if (pb == 0) {
   2022a:	f414 5f40 	tst.w	r4, #12288	; 0x3000
   2022e:	d006      	beq.n	2023e <ble_ll_conn_tx_pkt_in+0x28>
            hdr_byte = BLE_LL_LLID_DATA_START;
        } else {
            hdr_byte = BLE_LL_LLID_DATA_FRAG;
   20230:	2201      	movs	r2, #1

        /* Add to total l2cap pdus enqueue */
        STATS_INC(ble_ll_conn_stats, l2cap_enqueued);

        /* Clear flags field in BLE header */
        ble_ll_conn_enqueue_pkt(connsm, om, hdr_byte, length);
   20232:	b2fb      	uxtb	r3, r7
   20234:	4629      	mov	r1, r5
   20236:	4630      	mov	r0, r6
   20238:	f7ff ff9a 	bl	20170 <ble_ll_conn_enqueue_pkt>
    } else {
        /* No connection found! */
        STATS_INC(ble_ll_conn_stats, handle_not_found);
        os_mbuf_free_chain(om);
    }
}
   2023c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            hdr_byte = BLE_LL_LLID_DATA_START;
   2023e:	2202      	movs	r2, #2
   20240:	e7f7      	b.n	20232 <ble_ll_conn_tx_pkt_in+0x1c>
        os_mbuf_free_chain(om);
   20242:	4628      	mov	r0, r5
   20244:	f7e9 ffcc 	bl	a1e0 <os_mbuf_free_chain>
}
   20248:	e7f8      	b.n	2023c <ble_ll_conn_tx_pkt_in+0x26>
	...

0002024c <ble_ll_conn_set_global_chanmap>:
 * @param num_used_chans
 * @param chanmap
 */
void
ble_ll_conn_set_global_chanmap(uint8_t num_used_chans, const uint8_t *chanmap)
{
   2024c:	b538      	push	{r3, r4, r5, lr}
   2024e:	4605      	mov	r5, r0
   20250:	460c      	mov	r4, r1
    struct ble_ll_conn_sm *connsm;
    struct ble_ll_conn_global_params *conn_params;

    /* Do nothing if same channel map */
    conn_params = &g_ble_ll_conn_params;
    if (!memcmp(conn_params->master_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN)) {
   20252:	2205      	movs	r2, #5
   20254:	480c      	ldr	r0, [pc, #48]	; (20288 <ble_ll_conn_set_global_chanmap+0x3c>)
   20256:	f7eb fa85 	bl	b764 <memcmp>
   2025a:	b900      	cbnz	r0, 2025e <ble_ll_conn_set_global_chanmap+0x12>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
        }
    }
}
   2025c:	bd38      	pop	{r3, r4, r5, pc}
    conn_params->num_used_chans = num_used_chans;
   2025e:	4b0a      	ldr	r3, [pc, #40]	; (20288 <ble_ll_conn_set_global_chanmap+0x3c>)
   20260:	715d      	strb	r5, [r3, #5]
    memcpy(conn_params->master_chan_map, chanmap, BLE_LL_CONN_CHMAP_LEN);
   20262:	6820      	ldr	r0, [r4, #0]
   20264:	6018      	str	r0, [r3, #0]
   20266:	7922      	ldrb	r2, [r4, #4]
   20268:	711a      	strb	r2, [r3, #4]
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   2026a:	4b08      	ldr	r3, [pc, #32]	; (2028c <ble_ll_conn_set_global_chanmap+0x40>)
   2026c:	681c      	ldr	r4, [r3, #0]
   2026e:	e001      	b.n	20274 <ble_ll_conn_set_global_chanmap+0x28>
   20270:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   20274:	2c00      	cmp	r4, #0
   20276:	d0f1      	beq.n	2025c <ble_ll_conn_set_global_chanmap+0x10>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   20278:	79e3      	ldrb	r3, [r4, #7]
   2027a:	2b01      	cmp	r3, #1
   2027c:	d1f8      	bne.n	20270 <ble_ll_conn_set_global_chanmap+0x24>
            ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_CHAN_MAP_UPD);
   2027e:	2101      	movs	r1, #1
   20280:	4620      	mov	r0, r4
   20282:	f001 fbfe 	bl	21a82 <ble_ll_ctrl_proc_start>
   20286:	e7f3      	b.n	20270 <ble_ll_conn_set_global_chanmap+0x24>
   20288:	200087fc 	.word	0x200087fc
   2028c:	200087e4 	.word	0x200087e4

00020290 <ble_ll_conn_slave_start>:
 * @return 0: connection not started; 1 connecton started
 */
int
ble_ll_conn_slave_start(uint8_t *rxbuf, uint8_t pat, struct ble_mbuf_hdr *rxhdr,
                        bool force_csa2)
{
   20290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20294:	4606      	mov	r6, r0
   20296:	4689      	mov	r9, r1
   20298:	4617      	mov	r7, r2
   2029a:	4698      	mov	r8, r3
    uint8_t *inita;
    uint8_t *dptr;
    struct ble_ll_conn_sm *connsm;

    /* Ignore the connection request if we are already connected*/
    inita = rxbuf + BLE_LL_PDU_HDR_LEN;
   2029c:	1c85      	adds	r5, r0, #2
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   2029e:	4b6d      	ldr	r3, [pc, #436]	; (20454 <ble_ll_conn_slave_start+0x1c4>)
   202a0:	681c      	ldr	r4, [r3, #0]
   202a2:	e007      	b.n	202b4 <ble_ll_conn_slave_start+0x24>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
                if (connsm->peer_addr_type & 1) {
                    return 0;
                }
            } else {
                if ((connsm->peer_addr_type & 1) == 0) {
   202a4:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
   202a8:	f012 0f01 	tst.w	r2, #1
   202ac:	f000 8084 	beq.w	203b8 <ble_ll_conn_slave_start+0x128>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   202b0:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   202b4:	b194      	cbz	r4, 202dc <ble_ll_conn_slave_start+0x4c>
        if (!memcmp(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN)) {
   202b6:	2206      	movs	r2, #6
   202b8:	4629      	mov	r1, r5
   202ba:	f104 0093 	add.w	r0, r4, #147	; 0x93
   202be:	f7eb fa51 	bl	b764 <memcmp>
   202c2:	4603      	mov	r3, r0
   202c4:	2800      	cmp	r0, #0
   202c6:	d1f3      	bne.n	202b0 <ble_ll_conn_slave_start+0x20>
            if (rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK) {
   202c8:	7832      	ldrb	r2, [r6, #0]
   202ca:	f012 0f40 	tst.w	r2, #64	; 0x40
   202ce:	d0e9      	beq.n	202a4 <ble_ll_conn_slave_start+0x14>
                if (connsm->peer_addr_type & 1) {
   202d0:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
   202d4:	f012 0f01 	tst.w	r2, #1
   202d8:	d0ea      	beq.n	202b0 <ble_ll_conn_slave_start+0x20>
   202da:	e06d      	b.n	203b8 <ble_ll_conn_slave_start+0x128>
            }
        }
    }

    /* Allocate a connection. If none available, dont do anything */
    connsm = ble_ll_conn_sm_get();
   202dc:	f7fe fed8 	bl	1f090 <ble_ll_conn_sm_get>
    if (connsm == NULL) {
   202e0:	4604      	mov	r4, r0
   202e2:	2800      	cmp	r0, #0
   202e4:	f000 80b3 	beq.w	2044e <ble_ll_conn_slave_start+0x1be>

    /* Set the pointer at the start of the connection data */
    dptr = rxbuf + BLE_LL_CONN_REQ_ADVA_OFF + BLE_DEV_ADDR_LEN;

    /* Set connection state machine information */
    connsm->access_addr = get_le32(dptr);
   202e8:	f106 000e 	add.w	r0, r6, #14
   202ec:	f7fb fc9e 	bl	1bc2c <get_le32>
   202f0:	6560      	str	r0, [r4, #84]	; 0x54
    crcinit = dptr[6];
   202f2:	7d32      	ldrb	r2, [r6, #20]
    crcinit = (crcinit << 8) | dptr[5];
   202f4:	7cf3      	ldrb	r3, [r6, #19]
   202f6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    crcinit = (crcinit << 8) | dptr[4];
   202fa:	7cb3      	ldrb	r3, [r6, #18]
   202fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    connsm->crcinit = crcinit;
   20300:	65a3      	str	r3, [r4, #88]	; 0x58
    connsm->tx_win_size = dptr[7];
   20302:	7d73      	ldrb	r3, [r6, #21]
   20304:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    connsm->tx_win_off = get_le16(dptr + 8);
   20308:	f106 0016 	add.w	r0, r6, #22
   2030c:	f7fb fc89 	bl	1bc22 <get_le16>
   20310:	f8a4 0072 	strh.w	r0, [r4, #114]	; 0x72
    connsm->conn_itvl = get_le16(dptr + 10);
   20314:	f106 0018 	add.w	r0, r6, #24
   20318:	f7fb fc83 	bl	1bc22 <get_le16>
   2031c:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
    connsm->slave_latency = get_le16(dptr + 12);
   20320:	f106 001a 	add.w	r0, r6, #26
   20324:	f7fb fc7d 	bl	1bc22 <get_le16>
   20328:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
    connsm->supervision_tmo = get_le16(dptr + 14);
   2032c:	f106 001c 	add.w	r0, r6, #28
   20330:	f7fb fc77 	bl	1bc22 <get_le16>
   20334:	f8a4 006c 	strh.w	r0, [r4, #108]	; 0x6c
    memcpy(&connsm->chanmap, dptr + 16, BLE_LL_CONN_CHMAP_LEN);
   20338:	f104 0220 	add.w	r2, r4, #32
   2033c:	4633      	mov	r3, r6
   2033e:	f853 1f1e 	ldr.w	r1, [r3, #30]!
   20342:	6221      	str	r1, [r4, #32]
   20344:	791b      	ldrb	r3, [r3, #4]
   20346:	7113      	strb	r3, [r2, #4]
    connsm->hop_inc = dptr[21] & 0x1F;
   20348:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   2034c:	f003 031f 	and.w	r3, r3, #31
   20350:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    connsm->master_sca = dptr[21] >> 5;
   20354:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   20358:	095b      	lsrs	r3, r3, #5
   2035a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39

    /* Error check parameters */
    if ((connsm->tx_win_off > connsm->conn_itvl) ||
   2035e:	f8b4 1072 	ldrh.w	r1, [r4, #114]	; 0x72
   20362:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   20366:	4299      	cmp	r1, r3
   20368:	d81e      	bhi.n	203a8 <ble_ll_conn_slave_start+0x118>
   2036a:	2b05      	cmp	r3, #5
   2036c:	d91c      	bls.n	203a8 <ble_ll_conn_slave_start+0x118>
        (connsm->conn_itvl < BLE_HCI_CONN_ITVL_MIN) ||
   2036e:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   20372:	d819      	bhi.n	203a8 <ble_ll_conn_slave_start+0x118>
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   20374:	f894 103a 	ldrb.w	r1, [r4, #58]	; 0x3a
        (connsm->conn_itvl > BLE_HCI_CONN_ITVL_MAX) ||
   20378:	b1b1      	cbz	r1, 203a8 <ble_ll_conn_slave_start+0x118>
        (connsm->slave_latency > BLE_LL_CONN_SLAVE_LATENCY_MAX)) {
   2037a:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
        (connsm->tx_win_size < BLE_LL_CONN_TX_WIN_MIN) ||
   2037e:	f5be 7ffa 	cmp.w	lr, #500	; 0x1f4
   20382:	d211      	bcs.n	203a8 <ble_ll_conn_slave_start+0x118>
        goto err_slave_start;
    }

    /* Slave latency cannot cause a supervision timeout */
    temp = (connsm->slave_latency + 1) * (connsm->conn_itvl * 2) *
   20384:	f640 1cc4 	movw	ip, #2500	; 0x9c4
   20388:	fb0c fc03 	mul.w	ip, ip, r3
   2038c:	fb0e cc0c 	mla	ip, lr, ip, ip
            BLE_LL_CONN_ITVL_USECS;
    if ((connsm->supervision_tmo * 10000) <= temp ) {
   20390:	f242 7e10 	movw	lr, #10000	; 0x2710
   20394:	fb0e f000 	mul.w	r0, lr, r0
   20398:	4560      	cmp	r0, ip
   2039a:	d905      	bls.n	203a8 <ble_ll_conn_slave_start+0x118>

    /*
     * The transmit window must be less than or equal to the lesser of 10
     * msecs or the connection interval minus 1.25 msecs.
     */
    temp = connsm->conn_itvl - 1;
   2039c:	3b01      	subs	r3, #1
    if (temp > 8) {
   2039e:	2b08      	cmp	r3, #8
   203a0:	d900      	bls.n	203a4 <ble_ll_conn_slave_start+0x114>
        temp = 8;
   203a2:	2308      	movs	r3, #8
    }
    if (connsm->tx_win_size > temp) {
   203a4:	4299      	cmp	r1, r3
   203a6:	d90a      	bls.n	203be <ble_ll_conn_slave_start+0x12e>
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
    }
    return rc;

err_slave_start:
    STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   203a8:	2300      	movs	r3, #0
   203aa:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
   203ae:	4a2a      	ldr	r2, [pc, #168]	; (20458 <ble_ll_conn_slave_start+0x1c8>)
   203b0:	6851      	ldr	r1, [r2, #4]
   203b2:	600c      	str	r4, [r1, #0]
   203b4:	34b8      	adds	r4, #184	; 0xb8
   203b6:	6054      	str	r4, [r2, #4]
    STATS_INC(ble_ll_conn_stats, slave_rxd_bad_conn_req_params);
    return 0;
}
   203b8:	4618      	mov	r0, r3
   203ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    memcpy(&connsm->peer_addr, inita, BLE_DEV_ADDR_LEN);
   203be:	682b      	ldr	r3, [r5, #0]
   203c0:	f8c4 3093 	str.w	r3, [r4, #147]	; 0x93
   203c4:	88ab      	ldrh	r3, [r5, #4]
   203c6:	f8a4 3097 	strh.w	r3, [r4, #151]	; 0x97
    connsm->peer_addr_type = pat;
   203ca:	f884 9092 	strb.w	r9, [r4, #146]	; 0x92
    connsm->num_used_chans = ble_ll_utils_calc_num_used_chans(connsm->chanmap);
   203ce:	4610      	mov	r0, r2
   203d0:	f005 f8d9 	bl	25586 <ble_ll_utils_calc_num_used_chans>
   203d4:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
    if (connsm->num_used_chans < 2) {
   203d8:	2801      	cmp	r0, #1
   203da:	d9e5      	bls.n	203a8 <ble_ll_conn_slave_start+0x118>
    connsm->conn_role = BLE_LL_CONN_ROLE_SLAVE;
   203dc:	2302      	movs	r3, #2
   203de:	71e3      	strb	r3, [r4, #7]
    ble_ll_conn_sm_new(connsm);
   203e0:	4620      	mov	r0, r4
   203e2:	f7ff f897 	bl	1f514 <ble_ll_conn_sm_new>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   203e6:	f1b8 0f00 	cmp.w	r8, #0
   203ea:	d105      	bne.n	203f8 <ble_ll_conn_slave_start+0x168>
   203ec:	7833      	ldrb	r3, [r6, #0]
   203ee:	f013 0f20 	tst.w	r3, #32
   203f2:	d020      	beq.n	20436 <ble_ll_conn_slave_start+0x1a6>
   203f4:	2101      	movs	r1, #1
   203f6:	e000      	b.n	203fa <ble_ll_conn_slave_start+0x16a>
   203f8:	2101      	movs	r1, #1
    ble_ll_conn_set_csa(connsm,
   203fa:	4620      	mov	r0, r4
   203fc:	f7ff f820 	bl	1f440 <ble_ll_conn_set_csa>
    connsm->conn_sch.sched_cb = ble_ll_conn_event_start_cb;
   20400:	4b16      	ldr	r3, [pc, #88]	; (2045c <ble_ll_conn_slave_start+0x1cc>)
   20402:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    rc = ble_ll_conn_created(connsm, rxhdr);
   20406:	4639      	mov	r1, r7
   20408:	4620      	mov	r0, r4
   2040a:	f7fe ff91 	bl	1f330 <ble_ll_conn_created>
    if (!rc) {
   2040e:	4603      	mov	r3, r0
   20410:	2800      	cmp	r0, #0
   20412:	d1d1      	bne.n	203b8 <ble_ll_conn_slave_start+0x128>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   20414:	4a0f      	ldr	r2, [pc, #60]	; (20454 <ble_ll_conn_slave_start+0x1c4>)
   20416:	6812      	ldr	r2, [r2, #0]
   20418:	42a2      	cmp	r2, r4
   2041a:	d10f      	bne.n	2043c <ble_ll_conn_slave_start+0x1ac>
   2041c:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   20420:	4a0c      	ldr	r2, [pc, #48]	; (20454 <ble_ll_conn_slave_start+0x1c4>)
   20422:	6011      	str	r1, [r2, #0]
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   20424:	2200      	movs	r2, #0
   20426:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   2042a:	4a0b      	ldr	r2, [pc, #44]	; (20458 <ble_ll_conn_slave_start+0x1c8>)
   2042c:	6851      	ldr	r1, [r2, #4]
   2042e:	600c      	str	r4, [r1, #0]
   20430:	34b8      	adds	r4, #184	; 0xb8
   20432:	6054      	str	r4, [r2, #4]
   20434:	e7c0      	b.n	203b8 <ble_ll_conn_slave_start+0x128>
                        force_csa2 || (rxbuf[0] & BLE_ADV_PDU_HDR_CHSEL_MASK));
   20436:	2100      	movs	r1, #0
   20438:	e7df      	b.n	203fa <ble_ll_conn_slave_start+0x16a>
        SLIST_REMOVE(&g_ble_ll_conn_active_list, connsm, ble_ll_conn_sm, act_sle);
   2043a:	460a      	mov	r2, r1
   2043c:	f8d2 10b8 	ldr.w	r1, [r2, #184]	; 0xb8
   20440:	42a1      	cmp	r1, r4
   20442:	d1fa      	bne.n	2043a <ble_ll_conn_slave_start+0x1aa>
   20444:	f8d1 10b8 	ldr.w	r1, [r1, #184]	; 0xb8
   20448:	f8c2 10b8 	str.w	r1, [r2, #184]	; 0xb8
   2044c:	e7ea      	b.n	20424 <ble_ll_conn_slave_start+0x194>
        return 0;
   2044e:	2300      	movs	r3, #0
   20450:	e7b2      	b.n	203b8 <ble_ll_conn_slave_start+0x128>
   20452:	bf00      	nop
   20454:	200087e4 	.word	0x200087e4
   20458:	200087f4 	.word	0x200087f4
   2045c:	0001eb31 	.word	0x0001eb31

00020460 <ble_ll_conn_module_reset>:
 *
 * Context: Link Layer task
 */
void
ble_ll_conn_module_reset(void)
{
   20460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint16_t maxbytes;
    struct ble_ll_conn_sm *connsm;
    struct ble_ll_conn_global_params *conn_params;

    /* Kill the current one first (if one is running) */
    if (g_ble_ll_conn_cur_sm) {
   20462:	4b28      	ldr	r3, [pc, #160]	; (20504 <ble_ll_conn_module_reset+0xa4>)
   20464:	6818      	ldr	r0, [r3, #0]
   20466:	b118      	cbz	r0, 20470 <ble_ll_conn_module_reset+0x10>
        connsm = g_ble_ll_conn_cur_sm;
        g_ble_ll_conn_cur_sm = NULL;
   20468:	2100      	movs	r1, #0
   2046a:	6019      	str	r1, [r3, #0]
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   2046c:	f7ff f90e 	bl	1f68c <ble_ll_conn_end>
    }

    /* Free the global connection complete event if there is one */
    if (g_ble_ll_conn_comp_ev) {
   20470:	4b25      	ldr	r3, [pc, #148]	; (20508 <ble_ll_conn_module_reset+0xa8>)
   20472:	6818      	ldr	r0, [r3, #0]
   20474:	b120      	cbz	r0, 20480 <ble_ll_conn_module_reset+0x20>
        ble_hci_trans_buf_free(g_ble_ll_conn_comp_ev);
   20476:	f7f6 f877 	bl	16568 <ble_hci_trans_buf_free>
        g_ble_ll_conn_comp_ev = NULL;
   2047a:	4b23      	ldr	r3, [pc, #140]	; (20508 <ble_ll_conn_module_reset+0xa8>)
   2047c:	2200      	movs	r2, #0
   2047e:	601a      	str	r2, [r3, #0]
    }

    /* Reset connection we are attempting to create */
    g_ble_ll_conn_create_sm = NULL;
   20480:	4b22      	ldr	r3, [pc, #136]	; (2050c <ble_ll_conn_module_reset+0xac>)
   20482:	2200      	movs	r2, #0
   20484:	601a      	str	r2, [r3, #0]

    /* Now go through and end all the connections */
    while (1) {
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   20486:	4b22      	ldr	r3, [pc, #136]	; (20510 <ble_ll_conn_module_reset+0xb0>)
   20488:	6818      	ldr	r0, [r3, #0]
        if (!connsm) {
   2048a:	b118      	cbz	r0, 20494 <ble_ll_conn_module_reset+0x34>
            break;
        }
        ble_ll_conn_end(connsm, BLE_ERR_SUCCESS);
   2048c:	2100      	movs	r1, #0
   2048e:	f7ff f8fd 	bl	1f68c <ble_ll_conn_end>
        connsm = SLIST_FIRST(&g_ble_ll_conn_active_list);
   20492:	e7f8      	b.n	20486 <ble_ll_conn_module_reset+0x26>
    }

    /* Get the maximum supported PHY PDU size from the PHY */
    max_phy_pyld = ble_phy_max_data_pdu_pyld();
   20494:	f006 f936 	bl	26704 <ble_phy_max_data_pdu_pyld>
   20498:	4605      	mov	r5, r0

    /* Configure the global LL parameters */
    conn_params = &g_ble_ll_conn_params;

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_RX_BYTES), max_phy_pyld);
   2049a:	4606      	mov	r6, r0
   2049c:	28fb      	cmp	r0, #251	; 0xfb
   2049e:	bf28      	it	cs
   204a0:	26fb      	movcs	r6, #251	; 0xfb
   204a2:	b2f6      	uxtb	r6, r6
    conn_params->supp_max_rx_octets = maxbytes;
   204a4:	4c1b      	ldr	r4, [pc, #108]	; (20514 <ble_ll_conn_module_reset+0xb4>)
   204a6:	71e6      	strb	r6, [r4, #7]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_rx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_rx_time = MAX_TIME_UNCODED(maxbytes);
   204a8:	1d37      	adds	r7, r6, #4
   204aa:	2101      	movs	r1, #1
   204ac:	4638      	mov	r0, r7
   204ae:	f7fc ff2f 	bl	1d310 <ble_ll_pdu_tx_time_get>
   204b2:	82a0      	strh	r0, [r4, #20]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_SUPP_MAX_TX_BYTES), max_phy_pyld);
    conn_params->supp_max_tx_octets = maxbytes;
   204b4:	71a6      	strb	r6, [r4, #6]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_CODED_PHY)
    conn_params->supp_max_tx_time = MAX_TIME_CODED(maxbytes);
#else
    conn_params->supp_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   204b6:	2101      	movs	r1, #1
   204b8:	4638      	mov	r0, r7
   204ba:	f7fc ff29 	bl	1d310 <ble_ll_pdu_tx_time_get>
   204be:	8260      	strh	r0, [r4, #18]
#endif

    maxbytes = min(MYNEWT_VAL(BLE_LL_CONN_INIT_MAX_TX_BYTES), max_phy_pyld);
   204c0:	2d1b      	cmp	r5, #27
   204c2:	bf28      	it	cs
   204c4:	251b      	movcs	r5, #27
   204c6:	b2ed      	uxtb	r5, r5
    conn_params->conn_init_max_tx_octets = maxbytes;
   204c8:	7225      	strb	r5, [r4, #8]
    conn_params->conn_init_max_tx_time = MAX_TIME_UNCODED(maxbytes);
   204ca:	3504      	adds	r5, #4
   204cc:	2101      	movs	r1, #1
   204ce:	4628      	mov	r0, r5
   204d0:	f7fc ff1e 	bl	1d310 <ble_ll_pdu_tx_time_get>
   204d4:	81a0      	strh	r0, [r4, #12]
    conn_params->conn_init_max_tx_time_uncoded = MAX_TIME_UNCODED(maxbytes);
   204d6:	2101      	movs	r1, #1
   204d8:	4628      	mov	r0, r5
   204da:	f7fc ff19 	bl	1d310 <ble_ll_pdu_tx_time_get>
   204de:	81e0      	strh	r0, [r4, #14]
    conn_params->conn_init_max_tx_time_coded = MAX_TIME_CODED(maxbytes);
   204e0:	2103      	movs	r1, #3
   204e2:	4628      	mov	r0, r5
   204e4:	f7fc ff14 	bl	1d310 <ble_ll_pdu_tx_time_get>
   204e8:	8220      	strh	r0, [r4, #16]

    conn_params->sugg_tx_octets = BLE_LL_CONN_SUPP_BYTES_MIN;
   204ea:	231b      	movs	r3, #27
   204ec:	7263      	strb	r3, [r4, #9]
    conn_params->sugg_tx_time = BLE_LL_CONN_SUPP_TIME_MIN;
   204ee:	f44f 73a4 	mov.w	r3, #328	; 0x148
   204f2:	8163      	strh	r3, [r4, #10]

    /* Mask in all channels by default */
    conn_params->num_used_chans = BLE_PHY_NUM_DATA_CHANS;
   204f4:	2325      	movs	r3, #37	; 0x25
   204f6:	7163      	strb	r3, [r4, #5]
    memset(conn_params->master_chan_map, 0xff, BLE_LL_CONN_CHMAP_LEN - 1);
   204f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   204fc:	6023      	str	r3, [r4, #0]
    conn_params->master_chan_map[4] = 0x1f;
   204fe:	231f      	movs	r3, #31
   20500:	7123      	strb	r3, [r4, #4]
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_CTRL_TO_HOST_FLOW_CONTROL)
    g_ble_ll_conn_cth_flow.enabled = false;
    g_ble_ll_conn_cth_flow.max_buffers = 1;
    g_ble_ll_conn_cth_flow.num_buffers = 1;
#endif
}
   20502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   20504:	200087f0 	.word	0x200087f0
   20508:	200087e8 	.word	0x200087e8
   2050c:	200087ec 	.word	0x200087ec
   20510:	200087e4 	.word	0x200087e4
   20514:	200087fc 	.word	0x200087fc

00020518 <ble_ll_conn_module_init>:

/* Initialize the connection module */
void
ble_ll_conn_module_init(void)
{
   20518:	b538      	push	{r3, r4, r5, lr}
    int rc;
    uint16_t i;
    struct ble_ll_conn_sm *connsm;

    /* Initialize list of active conections */
    SLIST_INIT(&g_ble_ll_conn_active_list);
   2051a:	2400      	movs	r4, #0
   2051c:	4b10      	ldr	r3, [pc, #64]	; (20560 <ble_ll_conn_module_init+0x48>)
   2051e:	601c      	str	r4, [r3, #0]
    STAILQ_INIT(&g_ble_ll_conn_free_list);
   20520:	4b10      	ldr	r3, [pc, #64]	; (20564 <ble_ll_conn_module_init+0x4c>)
   20522:	601c      	str	r4, [r3, #0]
   20524:	605b      	str	r3, [r3, #4]
    /*
     * Take all the connections off the free memory pool and add them to
     * the free connection list, assigning handles in linear order. Note:
     * the specification allows a handle of zero; we just avoid using it.
     */
    connsm = &g_ble_ll_conn_sm[0];
   20526:	4d10      	ldr	r5, [pc, #64]	; (20568 <ble_ll_conn_module_init+0x50>)
    for (i = 0; i < MYNEWT_VAL(BLE_MAX_CONNECTIONS); ++i) {
   20528:	b114      	cbz	r4, 20530 <ble_ll_conn_module_init+0x18>
    ble_npl_event_init(&g_ble_ll_conn_cth_flow_error_ev,
                       ble_ll_conn_cth_flow_error_fn, NULL);
#endif

    /* Call reset to finish reset of initialization */
    ble_ll_conn_module_reset();
   2052a:	f7ff ff99 	bl	20460 <ble_ll_conn_module_reset>
}
   2052e:	bd38      	pop	{r3, r4, r5, pc}
        memset(connsm, 0, sizeof(struct ble_ll_conn_sm));
   20530:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   20534:	2100      	movs	r1, #0
   20536:	4628      	mov	r0, r5
   20538:	f7eb f961 	bl	b7fe <memset>
        connsm->conn_handle = i + 1;
   2053c:	3401      	adds	r4, #1
   2053e:	b2a4      	uxth	r4, r4
   20540:	80ac      	strh	r4, [r5, #4]
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   20542:	4b08      	ldr	r3, [pc, #32]	; (20564 <ble_ll_conn_module_init+0x4c>)
   20544:	685a      	ldr	r2, [r3, #4]
   20546:	6015      	str	r5, [r2, #0]
   20548:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
   2054c:	605a      	str	r2, [r3, #4]
        connsm->conn_sch.sched_type = BLE_LL_SCHED_TYPE_CONN;
   2054e:	2303      	movs	r3, #3
   20550:	f885 30dc 	strb.w	r3, [r5, #220]	; 0xdc
        connsm->conn_sch.cb_arg = connsm;
   20554:	f8c5 50e8 	str.w	r5, [r5, #232]	; 0xe8
        ++connsm;
   20558:	f505 75d0 	add.w	r5, r5, #416	; 0x1a0
   2055c:	e7e4      	b.n	20528 <ble_ll_conn_module_init+0x10>
   2055e:	bf00      	nop
   20560:	200087e4 	.word	0x200087e4
   20564:	200087f4 	.word	0x200087f4
   20568:	20008818 	.word	0x20008818

0002056c <ble_ll_conn_hci_chk_scan_params>:

static int
ble_ll_conn_hci_chk_scan_params(uint16_t itvl, uint16_t window)
{
    /* Check interval and window */
    if ((itvl < BLE_HCI_SCAN_ITVL_MIN) ||
   2056c:	1f03      	subs	r3, r0, #4
   2056e:	b29b      	uxth	r3, r3
   20570:	f643 72fc 	movw	r2, #16380	; 0x3ffc
   20574:	4293      	cmp	r3, r2
   20576:	d80a      	bhi.n	2058e <ble_ll_conn_hci_chk_scan_params+0x22>
        (itvl > BLE_HCI_SCAN_ITVL_MAX) ||
   20578:	2903      	cmp	r1, #3
   2057a:	d90a      	bls.n	20592 <ble_ll_conn_hci_chk_scan_params+0x26>
        (window < BLE_HCI_SCAN_WINDOW_MIN) ||
   2057c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
   20580:	d809      	bhi.n	20596 <ble_ll_conn_hci_chk_scan_params+0x2a>
        (window > BLE_HCI_SCAN_WINDOW_MAX) ||
   20582:	4288      	cmp	r0, r1
   20584:	d301      	bcc.n	2058a <ble_ll_conn_hci_chk_scan_params+0x1e>
        (itvl < window)) {
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    return 0;
   20586:	2000      	movs	r0, #0
}
   20588:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2058a:	2012      	movs	r0, #18
   2058c:	4770      	bx	lr
   2058e:	2012      	movs	r0, #18
   20590:	4770      	bx	lr
   20592:	2012      	movs	r0, #18
   20594:	4770      	bx	lr
   20596:	2012      	movs	r0, #18
   20598:	4770      	bx	lr
	...

0002059c <ble_ll_init_alloc_conn_comp_ev>:
{
   2059c:	b508      	push	{r3, lr}
    evbuf = g_ble_ll_conn_comp_ev;
   2059e:	4b08      	ldr	r3, [pc, #32]	; (205c0 <ble_ll_init_alloc_conn_comp_ev+0x24>)
   205a0:	681b      	ldr	r3, [r3, #0]
    if (evbuf == NULL) {
   205a2:	b10b      	cbz	r3, 205a8 <ble_ll_init_alloc_conn_comp_ev+0xc>
    rc = 0;
   205a4:	2000      	movs	r0, #0
}
   205a6:	bd08      	pop	{r3, pc}
        evbuf = ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   205a8:	2002      	movs	r0, #2
   205aa:	f7f5 ffaf 	bl	1650c <ble_hci_trans_buf_alloc>
        if (!evbuf) {
   205ae:	b118      	cbz	r0, 205b8 <ble_ll_init_alloc_conn_comp_ev+0x1c>
            g_ble_ll_conn_comp_ev = evbuf;
   205b0:	4a03      	ldr	r2, [pc, #12]	; (205c0 <ble_ll_init_alloc_conn_comp_ev+0x24>)
   205b2:	6010      	str	r0, [r2, #0]
    rc = 0;
   205b4:	2000      	movs	r0, #0
   205b6:	e7f6      	b.n	205a6 <ble_ll_init_alloc_conn_comp_ev+0xa>
            rc = -1;
   205b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   205bc:	e7f3      	b.n	205a6 <ble_ll_init_alloc_conn_comp_ev+0xa>
   205be:	bf00      	nop
   205c0:	200087e8 	.word	0x200087e8

000205c4 <ble_ll_conn_hci_chk_conn_params>:
    if ((itvl_min > itvl_max) ||
   205c4:	4288      	cmp	r0, r1
   205c6:	d81c      	bhi.n	20602 <ble_ll_conn_hci_chk_conn_params+0x3e>
   205c8:	2805      	cmp	r0, #5
   205ca:	d91c      	bls.n	20606 <ble_ll_conn_hci_chk_conn_params+0x42>
        (itvl_min < BLE_HCI_CONN_ITVL_MIN) ||
   205cc:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   205d0:	d81b      	bhi.n	2060a <ble_ll_conn_hci_chk_conn_params+0x46>
        (itvl_max > BLE_HCI_CONN_ITVL_MAX) ||
   205d2:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   205d6:	d21a      	bcs.n	2060e <ble_ll_conn_hci_chk_conn_params+0x4a>
        (latency > BLE_HCI_CONN_LATENCY_MAX) ||
   205d8:	2b09      	cmp	r3, #9
   205da:	d91a      	bls.n	20612 <ble_ll_conn_hci_chk_conn_params+0x4e>
        (spvn_tmo < BLE_HCI_CONN_SPVN_TIMEOUT_MIN) ||
   205dc:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   205e0:	d819      	bhi.n	20616 <ble_ll_conn_hci_chk_conn_params+0x52>
    spvn_tmo_usecs *= (BLE_HCI_CONN_SPVN_TMO_UNITS * 1000);
   205e2:	f242 7010 	movw	r0, #10000	; 0x2710
   205e6:	fb00 f303 	mul.w	r3, r0, r3
    min_spvn_tmo_usecs = (uint32_t)itvl_max * 2 * BLE_LL_CONN_ITVL_USECS;
   205ea:	f640 10c4 	movw	r0, #2500	; 0x9c4
   205ee:	fb00 f101 	mul.w	r1, r0, r1
    min_spvn_tmo_usecs *= (1 + latency);
   205f2:	fb02 1101 	mla	r1, r2, r1, r1
    if (spvn_tmo_usecs <= min_spvn_tmo_usecs) {
   205f6:	428b      	cmp	r3, r1
   205f8:	d901      	bls.n	205fe <ble_ll_conn_hci_chk_conn_params+0x3a>
    return BLE_ERR_SUCCESS;
   205fa:	2000      	movs	r0, #0
}
   205fc:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   205fe:	2012      	movs	r0, #18
   20600:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20602:	2012      	movs	r0, #18
   20604:	4770      	bx	lr
   20606:	2012      	movs	r0, #18
   20608:	4770      	bx	lr
   2060a:	2012      	movs	r0, #18
   2060c:	4770      	bx	lr
   2060e:	2012      	movs	r0, #18
   20610:	4770      	bx	lr
   20612:	2012      	movs	r0, #18
   20614:	4770      	bx	lr
   20616:	2012      	movs	r0, #18
   20618:	4770      	bx	lr

0002061a <ble_ll_conn_process_conn_params>:
#endif

static int
ble_ll_conn_process_conn_params(const struct ble_hci_le_rem_conn_param_rr_cp *cmd,
                                struct ble_ll_conn_sm *connsm)
{
   2061a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int rc;
    struct hci_conn_update *hcu;

    /* Retrieve command data */
    hcu = &connsm->conn_param_req;
    hcu->handle = connsm->conn_handle;
   2061c:	888b      	ldrh	r3, [r1, #4]
   2061e:	f8a1 3168 	strh.w	r3, [r1, #360]	; 0x168

    BLE_LL_ASSERT(connsm->conn_handle == le16toh(cmd->conn_handle));
   20622:	8802      	ldrh	r2, [r0, #0]
   20624:	4293      	cmp	r3, r2
   20626:	d11d      	bne.n	20664 <ble_ll_conn_process_conn_params+0x4a>

    hcu->conn_itvl_min = le16toh(cmd->conn_itvl_min);
   20628:	8844      	ldrh	r4, [r0, #2]
   2062a:	f8a1 416a 	strh.w	r4, [r1, #362]	; 0x16a
    hcu->conn_itvl_max = le16toh(cmd->conn_itvl_max);
   2062e:	8885      	ldrh	r5, [r0, #4]
   20630:	f8a1 516c 	strh.w	r5, [r1, #364]	; 0x16c
    hcu->conn_latency = le16toh(cmd->conn_latency);
   20634:	88c2      	ldrh	r2, [r0, #6]
   20636:	f8a1 216e 	strh.w	r2, [r1, #366]	; 0x16e
    hcu->supervision_timeout = le16toh(cmd->supervision_timeout);
   2063a:	8903      	ldrh	r3, [r0, #8]
   2063c:	f8a1 3170 	strh.w	r3, [r1, #368]	; 0x170
    hcu->min_ce_len = le16toh(cmd->min_ce);
   20640:	8947      	ldrh	r7, [r0, #10]
   20642:	b2be      	uxth	r6, r7
   20644:	f8a1 7172 	strh.w	r7, [r1, #370]	; 0x172
    hcu->max_ce_len = le16toh(cmd->max_ce);
   20648:	8980      	ldrh	r0, [r0, #12]
   2064a:	b287      	uxth	r7, r0
   2064c:	f8a1 0174 	strh.w	r0, [r1, #372]	; 0x174

    /* Check that parameter values are in range */
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   20650:	4629      	mov	r1, r5
   20652:	4620      	mov	r0, r4
   20654:	f7ff ffb6 	bl	205c4 <ble_ll_conn_hci_chk_conn_params>
                                         hcu->conn_itvl_max,
                                         hcu->conn_latency,
                                         hcu->supervision_timeout);

    /* Check valid min/max ce length */
    if (rc || (hcu->min_ce_len > hcu->max_ce_len)) {
   20658:	4603      	mov	r3, r0
   2065a:	b978      	cbnz	r0, 2067c <ble_ll_conn_process_conn_params+0x62>
   2065c:	42be      	cmp	r6, r7
   2065e:	d80b      	bhi.n	20678 <ble_ll_conn_process_conn_params+0x5e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }
    return rc;
}
   20660:	4618      	mov	r0, r3
   20662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    BLE_LL_ASSERT(connsm->conn_handle == le16toh(cmd->conn_handle));
   20664:	f7e7 fdac 	bl	81c0 <hal_debugger_connected>
   20668:	b100      	cbz	r0, 2066c <ble_ll_conn_process_conn_params+0x52>
   2066a:	be01      	bkpt	0x0001
   2066c:	2300      	movs	r3, #0
   2066e:	461a      	mov	r2, r3
   20670:	4619      	mov	r1, r3
   20672:	4618      	mov	r0, r3
   20674:	f7e9 f93a 	bl	98ec <__assert_func>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20678:	2312      	movs	r3, #18
   2067a:	e7f1      	b.n	20660 <ble_ll_conn_process_conn_params+0x46>
   2067c:	2312      	movs	r3, #18
   2067e:	e7ef      	b.n	20660 <ble_ll_conn_process_conn_params+0x46>

00020680 <ble_ll_conn_comp_event_send>:
{
   20680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    BLE_LL_ASSERT(evbuf);
   20682:	b382      	cbz	r2, 206e6 <ble_ll_conn_comp_event_send+0x66>
   20684:	4605      	mov	r5, r0
   20686:	460e      	mov	r6, r1
   20688:	461f      	mov	r7, r3
   2068a:	4614      	mov	r4, r2
    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE)) {
   2068c:	200a      	movs	r0, #10
   2068e:	f002 fa21 	bl	22ad4 <ble_ll_hci_is_le_event_enabled>
   20692:	2800      	cmp	r0, #0
   20694:	d067      	beq.n	20766 <ble_ll_conn_comp_event_send+0xe6>
        hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   20696:	233e      	movs	r3, #62	; 0x3e
   20698:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*enh_ev);
   2069a:	221f      	movs	r2, #31
   2069c:	7062      	strb	r2, [r4, #1]
        memset(enh_ev, 0, sizeof(*enh_ev));
   2069e:	2100      	movs	r1, #0
   206a0:	1ca0      	adds	r0, r4, #2
   206a2:	f7eb f8ac 	bl	b7fe <memset>
        enh_ev->subev_code = BLE_HCI_LE_SUBEV_ENH_CONN_COMPLETE;
   206a6:	230a      	movs	r3, #10
   206a8:	70a3      	strb	r3, [r4, #2]
        enh_ev->status = status;
   206aa:	70e6      	strb	r6, [r4, #3]
        if (connsm) {
   206ac:	2d00      	cmp	r5, #0
   206ae:	d04b      	beq.n	20748 <ble_ll_conn_comp_event_send+0xc8>
            enh_ev->conn_handle = htole16(connsm->conn_handle);
   206b0:	88ab      	ldrh	r3, [r5, #4]
   206b2:	80a3      	strh	r3, [r4, #4]
            enh_ev->role = connsm->conn_role - 1;
   206b4:	79eb      	ldrb	r3, [r5, #7]
   206b6:	3b01      	subs	r3, #1
   206b8:	71a3      	strb	r3, [r4, #6]
            enh_ev->peer_addr_type = connsm->peer_addr_type;
   206ba:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   206be:	71e3      	strb	r3, [r4, #7]
            memcpy(enh_ev->peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   206c0:	462b      	mov	r3, r5
   206c2:	f853 2f93 	ldr.w	r2, [r3, #147]!
   206c6:	60a2      	str	r2, [r4, #8]
   206c8:	889b      	ldrh	r3, [r3, #4]
   206ca:	81a3      	strh	r3, [r4, #12]
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   206cc:	79eb      	ldrb	r3, [r5, #7]
   206ce:	2b01      	cmp	r3, #1
   206d0:	d113      	bne.n	206fa <ble_ll_conn_comp_event_send+0x7a>
                if (connsm->inita_identity_used) {
   206d2:	f895 3090 	ldrb.w	r3, [r5, #144]	; 0x90
   206d6:	b9cb      	cbnz	r3, 2070c <ble_ll_conn_comp_event_send+0x8c>
                } else  if (connsm->own_addr_type > BLE_HCI_ADV_OWN_ADDR_RANDOM) {
   206d8:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
   206dc:	2b01      	cmp	r3, #1
   206de:	d915      	bls.n	2070c <ble_ll_conn_comp_event_send+0x8c>
                    rpa = ble_ll_scan_get_local_rpa();
   206e0:	f004 f9e4 	bl	24aac <ble_ll_scan_get_local_rpa>
   206e4:	e00c      	b.n	20700 <ble_ll_conn_comp_event_send+0x80>
    BLE_LL_ASSERT(evbuf);
   206e6:	f7e7 fd6b 	bl	81c0 <hal_debugger_connected>
   206ea:	b100      	cbz	r0, 206ee <ble_ll_conn_comp_event_send+0x6e>
   206ec:	be01      	bkpt	0x0001
   206ee:	2300      	movs	r3, #0
   206f0:	461a      	mov	r2, r3
   206f2:	4619      	mov	r1, r3
   206f4:	4618      	mov	r0, r3
   206f6:	f7e9 f8f9 	bl	98ec <__assert_func>
                rpa = ble_ll_adv_get_local_rpa(advsm);
   206fa:	4638      	mov	r0, r7
   206fc:	f7fd fec2 	bl	1e484 <ble_ll_adv_get_local_rpa>
            if (rpa) {
   20700:	b120      	cbz	r0, 2070c <ble_ll_conn_comp_event_send+0x8c>
                memcpy(enh_ev->local_rpa, rpa, BLE_DEV_ADDR_LEN);
   20702:	6803      	ldr	r3, [r0, #0]
   20704:	f8c4 300e 	str.w	r3, [r4, #14]
   20708:	8883      	ldrh	r3, [r0, #4]
   2070a:	8263      	strh	r3, [r4, #18]
             if (connsm->peer_addr_type < BLE_HCI_CONN_PEER_ADDR_PUBLIC_IDENT
   2070c:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   20710:	2b01      	cmp	r3, #1
   20712:	d91d      	bls.n	20750 <ble_ll_conn_comp_event_send+0xd0>
             if (enh_ev->peer_addr_type > BLE_HCI_CONN_PEER_ADDR_RANDOM) {
   20714:	79e3      	ldrb	r3, [r4, #7]
   20716:	2b01      	cmp	r3, #1
   20718:	d909      	bls.n	2072e <ble_ll_conn_comp_event_send+0xae>
                 if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   2071a:	79eb      	ldrb	r3, [r5, #7]
   2071c:	2b01      	cmp	r3, #1
   2071e:	d01f      	beq.n	20760 <ble_ll_conn_comp_event_send+0xe0>
                     rpa = ble_ll_adv_get_peer_rpa(advsm);
   20720:	4638      	mov	r0, r7
   20722:	f7fd fec6 	bl	1e4b2 <ble_ll_adv_get_peer_rpa>
                 memcpy(enh_ev->peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   20726:	6803      	ldr	r3, [r0, #0]
   20728:	6163      	str	r3, [r4, #20]
   2072a:	8883      	ldrh	r3, [r0, #4]
   2072c:	8323      	strh	r3, [r4, #24]
            enh_ev->conn_itvl = htole16(connsm->conn_itvl);
   2072e:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   20732:	8363      	strh	r3, [r4, #26]
            enh_ev->conn_latency = htole16(connsm->slave_latency);
   20734:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
   20738:	83a3      	strh	r3, [r4, #28]
            enh_ev->supervision_timeout = htole16(connsm->supervision_tmo);
   2073a:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   2073e:	83e3      	strh	r3, [r4, #30]
            enh_ev->mca = connsm->master_sca;
   20740:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   20744:	f884 3020 	strb.w	r3, [r4, #32]
        ble_ll_hci_event_send(hci_ev);
   20748:	4620      	mov	r0, r4
   2074a:	f002 f920 	bl	2298e <ble_ll_hci_event_send>
}
   2074e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                     && (connsm->rpa_index > -1)) {
   20750:	f995 3009 	ldrsb.w	r3, [r5, #9]
   20754:	2b00      	cmp	r3, #0
   20756:	dbdd      	blt.n	20714 <ble_ll_conn_comp_event_send+0x94>
                 enh_ev->peer_addr_type += 2;
   20758:	79e3      	ldrb	r3, [r4, #7]
   2075a:	3302      	adds	r3, #2
   2075c:	71e3      	strb	r3, [r4, #7]
   2075e:	e7d9      	b.n	20714 <ble_ll_conn_comp_event_send+0x94>
                     rpa = ble_ll_scan_get_peer_rpa();
   20760:	f004 f9a0 	bl	24aa4 <ble_ll_scan_get_peer_rpa>
   20764:	e7df      	b.n	20726 <ble_ll_conn_comp_event_send+0xa6>
    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_COMPLETE)) {
   20766:	2001      	movs	r0, #1
   20768:	f002 f9b4 	bl	22ad4 <ble_ll_hci_is_le_event_enabled>
   2076c:	b3a0      	cbz	r0, 207d8 <ble_ll_conn_comp_event_send+0x158>
        hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   2076e:	233e      	movs	r3, #62	; 0x3e
   20770:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*ev);
   20772:	2313      	movs	r3, #19
   20774:	7063      	strb	r3, [r4, #1]
        memset(ev, 0, sizeof(*ev));
   20776:	2200      	movs	r2, #0
   20778:	f8c4 2002 	str.w	r2, [r4, #2]
   2077c:	f8c4 2006 	str.w	r2, [r4, #6]
   20780:	f8c4 200a 	str.w	r2, [r4, #10]
   20784:	f8c4 200e 	str.w	r2, [r4, #14]
   20788:	f8c4 2011 	str.w	r2, [r4, #17]
        ev->subev_code = BLE_HCI_LE_SUBEV_CONN_COMPLETE;
   2078c:	2301      	movs	r3, #1
   2078e:	70a3      	strb	r3, [r4, #2]
        ev->status = status;
   20790:	70e6      	strb	r6, [r4, #3]
        if (connsm) {
   20792:	b1ed      	cbz	r5, 207d0 <ble_ll_conn_comp_event_send+0x150>
            ev->conn_handle = htole16(connsm->conn_handle);
   20794:	88ab      	ldrh	r3, [r5, #4]
   20796:	80a3      	strh	r3, [r4, #4]
            ev->role = connsm->conn_role - 1;
   20798:	79eb      	ldrb	r3, [r5, #7]
   2079a:	3b01      	subs	r3, #1
   2079c:	71a3      	strb	r3, [r4, #6]
            ev->peer_addr_type = connsm->peer_addr_type;
   2079e:	f895 3092 	ldrb.w	r3, [r5, #146]	; 0x92
   207a2:	71e3      	strb	r3, [r4, #7]
            if (ev->peer_addr_type > BLE_HCI_CONN_PEER_ADDR_RANDOM) {
   207a4:	2b01      	cmp	r3, #1
   207a6:	d901      	bls.n	207ac <ble_ll_conn_comp_event_send+0x12c>
                ev->peer_addr_type -= 2;
   207a8:	3b02      	subs	r3, #2
   207aa:	71e3      	strb	r3, [r4, #7]
            memcpy(ev->peer_addr, connsm->peer_addr, BLE_DEV_ADDR_LEN);
   207ac:	462b      	mov	r3, r5
   207ae:	f853 2f93 	ldr.w	r2, [r3, #147]!
   207b2:	60a2      	str	r2, [r4, #8]
   207b4:	889b      	ldrh	r3, [r3, #4]
   207b6:	81a3      	strh	r3, [r4, #12]
            ev->conn_itvl = htole16(connsm->conn_itvl);
   207b8:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
   207bc:	81e3      	strh	r3, [r4, #14]
            ev->conn_latency = htole16(connsm->slave_latency);
   207be:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
   207c2:	8223      	strh	r3, [r4, #16]
            ev->supervision_timeout = htole16(connsm->supervision_tmo);
   207c4:	f8b5 306c 	ldrh.w	r3, [r5, #108]	; 0x6c
   207c8:	8263      	strh	r3, [r4, #18]
            ev->mca = connsm->master_sca;
   207ca:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
   207ce:	7523      	strb	r3, [r4, #20]
        ble_ll_hci_event_send(hci_ev);
   207d0:	4620      	mov	r0, r4
   207d2:	f002 f8dc 	bl	2298e <ble_ll_hci_event_send>
        return;
   207d6:	e7ba      	b.n	2074e <ble_ll_conn_comp_event_send+0xce>
    ble_hci_trans_buf_free(evbuf);
   207d8:	4620      	mov	r0, r4
   207da:	f7f5 fec5 	bl	16568 <ble_hci_trans_buf_free>
   207de:	e7b6      	b.n	2074e <ble_ll_conn_comp_event_send+0xce>

000207e0 <ble_ll_conn_hci_cancel_conn_complete_event>:
/* this is called from same context after cmd complete is send so it is
 * safe to use g_ble_ll_conn_comp_ev
 */
static void
ble_ll_conn_hci_cancel_conn_complete_event(void)
{
   207e0:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(g_ble_ll_conn_comp_ev);
   207e2:	4b0b      	ldr	r3, [pc, #44]	; (20810 <ble_ll_conn_hci_cancel_conn_complete_event+0x30>)
   207e4:	681a      	ldr	r2, [r3, #0]
   207e6:	b142      	cbz	r2, 207fa <ble_ll_conn_hci_cancel_conn_complete_event+0x1a>

    ble_ll_conn_comp_event_send(NULL, BLE_ERR_UNK_CONN_ID,
   207e8:	2300      	movs	r3, #0
   207ea:	2102      	movs	r1, #2
   207ec:	4618      	mov	r0, r3
   207ee:	f7ff ff47 	bl	20680 <ble_ll_conn_comp_event_send>
                                g_ble_ll_conn_comp_ev, NULL);
    g_ble_ll_conn_comp_ev = NULL;
   207f2:	4b07      	ldr	r3, [pc, #28]	; (20810 <ble_ll_conn_hci_cancel_conn_complete_event+0x30>)
   207f4:	2200      	movs	r2, #0
   207f6:	601a      	str	r2, [r3, #0]
}
   207f8:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(g_ble_ll_conn_comp_ev);
   207fa:	f7e7 fce1 	bl	81c0 <hal_debugger_connected>
   207fe:	b100      	cbz	r0, 20802 <ble_ll_conn_hci_cancel_conn_complete_event+0x22>
   20800:	be01      	bkpt	0x0001
   20802:	2300      	movs	r3, #0
   20804:	461a      	mov	r2, r3
   20806:	4619      	mov	r1, r3
   20808:	4618      	mov	r0, r3
   2080a:	f7e9 f86f 	bl	98ec <__assert_func>
   2080e:	bf00      	nop
   20810:	200087e8 	.word	0x200087e8

00020814 <ble_ll_conn_num_comp_pkts_event_send>:
{
   20814:	b570      	push	{r4, r5, r6, lr}
    if (connsm == NULL) {
   20816:	b320      	cbz	r0, 20862 <ble_ll_conn_num_comp_pkts_event_send+0x4e>
   20818:	4604      	mov	r4, r0
    return os_time_get();
   2081a:	f7ea fddb 	bl	b3d4 <os_time_get>
    if ((ble_npl_stime_t)(ble_npl_time_get() - g_ble_ll_last_num_comp_pkt_evt) <
   2081e:	4b36      	ldr	r3, [pc, #216]	; (208f8 <ble_ll_conn_num_comp_pkts_event_send+0xe4>)
   20820:	681b      	ldr	r3, [r3, #0]
   20822:	1ac0      	subs	r0, r0, r3
   20824:	28ff      	cmp	r0, #255	; 0xff
   20826:	d81c      	bhi.n	20862 <ble_ll_conn_num_comp_pkts_event_send+0x4e>
        if (connsm->completed_pkts) {
   20828:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
   2082c:	2b00      	cmp	r3, #0
   2082e:	d05f      	beq.n	208f0 <ble_ll_conn_num_comp_pkts_event_send+0xdc>
            hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   20830:	2002      	movs	r0, #2
   20832:	f7f5 fe6b 	bl	1650c <ble_hci_trans_buf_alloc>
            if (hci_ev) {
   20836:	2800      	cmp	r0, #0
   20838:	d05a      	beq.n	208f0 <ble_ll_conn_num_comp_pkts_event_send+0xdc>
                hci_ev->opcode = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   2083a:	2213      	movs	r2, #19
   2083c:	7002      	strb	r2, [r0, #0]
                hci_ev->length = sizeof(*ev);
   2083e:	2201      	movs	r2, #1
   20840:	7042      	strb	r2, [r0, #1]
                ev->count = 1;
   20842:	7082      	strb	r2, [r0, #2]
                ev->completed[0].handle = htole16(connsm->conn_handle);
   20844:	88a2      	ldrh	r2, [r4, #4]
   20846:	f8a0 2003 	strh.w	r2, [r0, #3]
                ev->completed[0].packets = htole16(connsm->completed_pkts);
   2084a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   2084e:	f8a0 2005 	strh.w	r2, [r0, #5]
                hci_ev->length += sizeof(ev->completed[0]);
   20852:	2205      	movs	r2, #5
   20854:	7042      	strb	r2, [r0, #1]
                connsm->completed_pkts = 0;
   20856:	2200      	movs	r2, #0
   20858:	f8a4 204c 	strh.w	r2, [r4, #76]	; 0x4c
                ble_ll_hci_event_send(hci_ev);
   2085c:	f002 f897 	bl	2298e <ble_ll_hci_event_send>
   20860:	e046      	b.n	208f0 <ble_ll_conn_num_comp_pkts_event_send+0xdc>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   20862:	4b26      	ldr	r3, [pc, #152]	; (208fc <ble_ll_conn_num_comp_pkts_event_send+0xe8>)
   20864:	681c      	ldr	r4, [r3, #0]
    event_sent = 0;
   20866:	2600      	movs	r6, #0
    hci_ev = NULL;
   20868:	4632      	mov	r2, r6
    ev = NULL;
   2086a:	4635      	mov	r5, r6
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   2086c:	e018      	b.n	208a0 <ble_ll_conn_num_comp_pkts_event_send+0x8c>
            if (!hci_ev) {
   2086e:	b322      	cbz	r2, 208ba <ble_ll_conn_num_comp_pkts_event_send+0xa6>
            ev->completed[ev->count].handle = htole16(connsm->conn_handle);
   20870:	782b      	ldrb	r3, [r5, #0]
   20872:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   20876:	88a1      	ldrh	r1, [r4, #4]
   20878:	f8a3 1001 	strh.w	r1, [r3, #1]
            ev->completed[ev->count].packets = htole16(connsm->completed_pkts);
   2087c:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
   20880:	f8a3 1003 	strh.w	r1, [r3, #3]
            hci_ev->length += sizeof(ev->completed[ev->count]);
   20884:	7853      	ldrb	r3, [r2, #1]
   20886:	3304      	adds	r3, #4
   20888:	7053      	strb	r3, [r2, #1]
            ev->count++;
   2088a:	782b      	ldrb	r3, [r5, #0]
   2088c:	3301      	adds	r3, #1
   2088e:	702b      	strb	r3, [r5, #0]
            connsm->completed_pkts = 0;
   20890:	2300      	movs	r3, #0
   20892:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
            if (ev->count == max_handles) {
   20896:	782b      	ldrb	r3, [r5, #0]
   20898:	2b11      	cmp	r3, #17
   2089a:	d01b      	beq.n	208d4 <ble_ll_conn_num_comp_pkts_event_send+0xc0>
    SLIST_FOREACH(connsm, &g_ble_ll_conn_active_list, act_sle) {
   2089c:	f8d4 40b8 	ldr.w	r4, [r4, #184]	; 0xb8
   208a0:	b1f4      	cbz	r4, 208e0 <ble_ll_conn_num_comp_pkts_event_send+0xcc>
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   208a2:	79a3      	ldrb	r3, [r4, #6]
   208a4:	2b00      	cmp	r3, #0
   208a6:	d0f9      	beq.n	2089c <ble_ll_conn_num_comp_pkts_event_send+0x88>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   208a8:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
        if ((connsm->conn_state != BLE_LL_CONN_STATE_IDLE) &&
   208ac:	2b00      	cmp	r3, #0
   208ae:	d1de      	bne.n	2086e <ble_ll_conn_num_comp_pkts_event_send+0x5a>
            (connsm->completed_pkts || !STAILQ_EMPTY(&connsm->conn_txq))) {
   208b0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   208b4:	2b00      	cmp	r3, #0
   208b6:	d1da      	bne.n	2086e <ble_ll_conn_num_comp_pkts_event_send+0x5a>
   208b8:	e7f0      	b.n	2089c <ble_ll_conn_num_comp_pkts_event_send+0x88>
                hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   208ba:	2002      	movs	r0, #2
   208bc:	f7f5 fe26 	bl	1650c <ble_hci_trans_buf_alloc>
                if (!hci_ev) {
   208c0:	4602      	mov	r2, r0
   208c2:	b168      	cbz	r0, 208e0 <ble_ll_conn_num_comp_pkts_event_send+0xcc>
                hci_ev->opcode = BLE_HCI_EVCODE_NUM_COMP_PKTS;
   208c4:	2313      	movs	r3, #19
   208c6:	7003      	strb	r3, [r0, #0]
                hci_ev->length = sizeof(*ev);
   208c8:	2301      	movs	r3, #1
   208ca:	7043      	strb	r3, [r0, #1]
                ev = (void *)hci_ev->data;
   208cc:	1c85      	adds	r5, r0, #2
                ev->count = 0;
   208ce:	2300      	movs	r3, #0
   208d0:	7083      	strb	r3, [r0, #2]
   208d2:	e7cd      	b.n	20870 <ble_ll_conn_num_comp_pkts_event_send+0x5c>
                ble_ll_hci_event_send(hci_ev);
   208d4:	4610      	mov	r0, r2
   208d6:	f002 f85a 	bl	2298e <ble_ll_hci_event_send>
                event_sent = 1;
   208da:	2601      	movs	r6, #1
                hci_ev = NULL;
   208dc:	2200      	movs	r2, #0
   208de:	e7dd      	b.n	2089c <ble_ll_conn_num_comp_pkts_event_send+0x88>
    if (hci_ev) {
   208e0:	b13a      	cbz	r2, 208f2 <ble_ll_conn_num_comp_pkts_event_send+0xde>
        ble_ll_hci_event_send(hci_ev);
   208e2:	4610      	mov	r0, r2
   208e4:	f002 f853 	bl	2298e <ble_ll_hci_event_send>
   208e8:	f7ea fd74 	bl	b3d4 <os_time_get>
        g_ble_ll_last_num_comp_pkt_evt = ble_npl_time_get();
   208ec:	4b02      	ldr	r3, [pc, #8]	; (208f8 <ble_ll_conn_num_comp_pkts_event_send+0xe4>)
   208ee:	6018      	str	r0, [r3, #0]
}
   208f0:	bd70      	pop	{r4, r5, r6, pc}
    if (event_sent) {
   208f2:	2e00      	cmp	r6, #0
   208f4:	d1f8      	bne.n	208e8 <ble_ll_conn_num_comp_pkts_event_send+0xd4>
   208f6:	e7fb      	b.n	208f0 <ble_ll_conn_num_comp_pkts_event_send+0xdc>
   208f8:	200089b8 	.word	0x200089b8
   208fc:	200087e4 	.word	0x200087e4

00020900 <ble_ll_auth_pyld_tmo_event_send>:
{
   20900:	b510      	push	{r4, lr}
   20902:	4604      	mov	r4, r0
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_AUTH_PYLD_TMO)) {
   20904:	2057      	movs	r0, #87	; 0x57
   20906:	f002 f911 	bl	22b2c <ble_ll_hci_is_event_enabled>
   2090a:	b900      	cbnz	r0, 2090e <ble_ll_auth_pyld_tmo_event_send+0xe>
}
   2090c:	bd10      	pop	{r4, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   2090e:	2002      	movs	r0, #2
   20910:	f7f5 fdfc 	bl	1650c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   20914:	2800      	cmp	r0, #0
   20916:	d0f9      	beq.n	2090c <ble_ll_auth_pyld_tmo_event_send+0xc>
            hci_ev->opcode = BLE_HCI_EVCODE_AUTH_PYLD_TMO;
   20918:	2257      	movs	r2, #87	; 0x57
   2091a:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   2091c:	2202      	movs	r2, #2
   2091e:	7042      	strb	r2, [r0, #1]
            ev->conn_handle = htole16(connsm->conn_handle);
   20920:	88a2      	ldrh	r2, [r4, #4]
   20922:	8042      	strh	r2, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   20924:	f002 f833 	bl	2298e <ble_ll_hci_event_send>
}
   20928:	e7f0      	b.n	2090c <ble_ll_auth_pyld_tmo_event_send+0xc>

0002092a <ble_ll_disconn_comp_event_send>:
{
   2092a:	b538      	push	{r3, r4, r5, lr}
   2092c:	4605      	mov	r5, r0
   2092e:	460c      	mov	r4, r1
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DISCONN_CMP)) {
   20930:	2005      	movs	r0, #5
   20932:	f002 f8fb 	bl	22b2c <ble_ll_hci_is_event_enabled>
   20936:	b900      	cbnz	r0, 2093a <ble_ll_disconn_comp_event_send+0x10>
}
   20938:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   2093a:	2002      	movs	r0, #2
   2093c:	f7f5 fde6 	bl	1650c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   20940:	2800      	cmp	r0, #0
   20942:	d0f9      	beq.n	20938 <ble_ll_disconn_comp_event_send+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_DISCONN_CMP;
   20944:	2205      	movs	r2, #5
   20946:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   20948:	2204      	movs	r2, #4
   2094a:	7042      	strb	r2, [r0, #1]
            ev->status = BLE_ERR_SUCCESS;
   2094c:	2200      	movs	r2, #0
   2094e:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   20950:	88aa      	ldrh	r2, [r5, #4]
   20952:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->reason = reason;
   20956:	7144      	strb	r4, [r0, #5]
            ble_ll_hci_event_send(hci_ev);
   20958:	f002 f819 	bl	2298e <ble_ll_hci_event_send>
}
   2095c:	e7ec      	b.n	20938 <ble_ll_disconn_comp_event_send+0xe>
	...

00020960 <ble_ll_conn_create>:
{
   20960:	b510      	push	{r4, lr}
   20962:	b088      	sub	sp, #32
    struct hci_create_conn hcc = { 0 };
   20964:	2300      	movs	r3, #0
   20966:	9301      	str	r3, [sp, #4]
   20968:	9302      	str	r3, [sp, #8]
   2096a:	9303      	str	r3, [sp, #12]
   2096c:	9304      	str	r3, [sp, #16]
   2096e:	9305      	str	r3, [sp, #20]
   20970:	9306      	str	r3, [sp, #24]
   20972:	f8ad 301c 	strh.w	r3, [sp, #28]
    if (len < sizeof(*cmd)) {
   20976:	2918      	cmp	r1, #24
   20978:	f240 8082 	bls.w	20a80 <ble_ll_conn_create+0x120>
    if (g_ble_ll_conn_create_sm) {
   2097c:	4b49      	ldr	r3, [pc, #292]	; (20aa4 <ble_ll_conn_create+0x144>)
   2097e:	681b      	ldr	r3, [r3, #0]
   20980:	b11b      	cbz	r3, 2098a <ble_ll_conn_create+0x2a>
        return BLE_ERR_CMD_DISALLOWED;
   20982:	230c      	movs	r3, #12
}
   20984:	4618      	mov	r0, r3
   20986:	b008      	add	sp, #32
   20988:	bd10      	pop	{r4, pc}
   2098a:	4604      	mov	r4, r0
    if (ble_ll_scan_enabled()) {
   2098c:	f004 f884 	bl	24a98 <ble_ll_scan_enabled>
   20990:	2800      	cmp	r0, #0
   20992:	d177      	bne.n	20a84 <ble_ll_conn_create+0x124>
    hcc.scan_itvl = le16toh(cmd->scan_itvl);
   20994:	8820      	ldrh	r0, [r4, #0]
   20996:	f8ad 0004 	strh.w	r0, [sp, #4]
    hcc.scan_window = le16toh(cmd->scan_window);
   2099a:	8861      	ldrh	r1, [r4, #2]
   2099c:	f8ad 1006 	strh.w	r1, [sp, #6]
    rc = ble_ll_conn_hci_chk_scan_params(hcc.scan_itvl, hcc.scan_window);
   209a0:	f7ff fde4 	bl	2056c <ble_ll_conn_hci_chk_scan_params>
    if (rc) {
   209a4:	2800      	cmp	r0, #0
   209a6:	d16f      	bne.n	20a88 <ble_ll_conn_create+0x128>
    hcc.filter_policy = cmd->filter_policy;
   209a8:	7923      	ldrb	r3, [r4, #4]
   209aa:	f88d 3008 	strb.w	r3, [sp, #8]
    if (hcc.filter_policy > BLE_HCI_INITIATOR_FILT_POLICY_MAX) {
   209ae:	2b01      	cmp	r3, #1
   209b0:	d86c      	bhi.n	20a8c <ble_ll_conn_create+0x12c>
    if (hcc.filter_policy == 0) {
   209b2:	b963      	cbnz	r3, 209ce <ble_ll_conn_create+0x6e>
        hcc.peer_addr_type = cmd->peer_addr_type;
   209b4:	7963      	ldrb	r3, [r4, #5]
   209b6:	f88d 3009 	strb.w	r3, [sp, #9]
        if (hcc.peer_addr_type > BLE_HCI_CONN_PEER_ADDR_MAX) {
   209ba:	2b03      	cmp	r3, #3
   209bc:	d868      	bhi.n	20a90 <ble_ll_conn_create+0x130>
        memcpy(&hcc.peer_addr, cmd->peer_addr, BLE_DEV_ADDR_LEN);
   209be:	4623      	mov	r3, r4
   209c0:	f853 2f06 	ldr.w	r2, [r3, #6]!
   209c4:	f8cd 200a 	str.w	r2, [sp, #10]
   209c8:	889b      	ldrh	r3, [r3, #4]
   209ca:	f8ad 300e 	strh.w	r3, [sp, #14]
    hcc.own_addr_type = cmd->own_addr_type;
   209ce:	7b23      	ldrb	r3, [r4, #12]
   209d0:	f88d 3010 	strb.w	r3, [sp, #16]
    if (hcc.own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   209d4:	2b03      	cmp	r3, #3
   209d6:	d85d      	bhi.n	20a94 <ble_ll_conn_create+0x134>
    hcc.conn_itvl_min = le16toh(cmd->min_conn_itvl);
   209d8:	f8b4 000d 	ldrh.w	r0, [r4, #13]
   209dc:	f8ad 0012 	strh.w	r0, [sp, #18]
    hcc.conn_itvl_max = le16toh(cmd->max_conn_itvl);
   209e0:	f8b4 100f 	ldrh.w	r1, [r4, #15]
   209e4:	f8ad 1014 	strh.w	r1, [sp, #20]
    hcc.conn_latency = le16toh(cmd->conn_latency);
   209e8:	f8b4 2011 	ldrh.w	r2, [r4, #17]
   209ec:	f8ad 2016 	strh.w	r2, [sp, #22]
    hcc.supervision_timeout = le16toh(cmd->tmo);
   209f0:	f8b4 3013 	ldrh.w	r3, [r4, #19]
   209f4:	f8ad 3018 	strh.w	r3, [sp, #24]
    rc = ble_ll_conn_hci_chk_conn_params(hcc.conn_itvl_min,
   209f8:	f7ff fde4 	bl	205c4 <ble_ll_conn_hci_chk_conn_params>
    if (rc) {
   209fc:	4603      	mov	r3, r0
   209fe:	2800      	cmp	r0, #0
   20a00:	d1c0      	bne.n	20984 <ble_ll_conn_create+0x24>
    hcc.min_ce_len = le16toh(cmd->min_ce);
   20a02:	f8b4 3015 	ldrh.w	r3, [r4, #21]
   20a06:	b299      	uxth	r1, r3
   20a08:	f8ad 301a 	strh.w	r3, [sp, #26]
    hcc.max_ce_len = le16toh(cmd->max_ce);
   20a0c:	f8b4 3017 	ldrh.w	r3, [r4, #23]
   20a10:	b29a      	uxth	r2, r3
   20a12:	f8ad 301c 	strh.w	r3, [sp, #28]
    if (hcc.min_ce_len > hcc.max_ce_len) {
   20a16:	4291      	cmp	r1, r2
   20a18:	d83e      	bhi.n	20a98 <ble_ll_conn_create+0x138>
    if (ble_ll_init_alloc_conn_comp_ev()) {
   20a1a:	f7ff fdbf 	bl	2059c <ble_ll_init_alloc_conn_comp_ev>
   20a1e:	2800      	cmp	r0, #0
   20a20:	d13c      	bne.n	20a9c <ble_ll_conn_create+0x13c>
    connsm = ble_ll_conn_sm_get();
   20a22:	f7fe fb35 	bl	1f090 <ble_ll_conn_sm_get>
    if (connsm == NULL) {
   20a26:	4604      	mov	r4, r0
   20a28:	2800      	cmp	r0, #0
   20a2a:	d039      	beq.n	20aa0 <ble_ll_conn_create+0x140>
    ble_ll_conn_master_init(connsm, &hcc);
   20a2c:	a901      	add	r1, sp, #4
   20a2e:	f7fe fd3e 	bl	1f4ae <ble_ll_conn_master_init>
    ble_ll_conn_sm_new(connsm);
   20a32:	4620      	mov	r0, r4
   20a34:	f7fe fd6e 	bl	1f514 <ble_ll_conn_sm_new>
    rc = ble_ll_scan_initiator_start(&hcc, &connsm->scansm);
   20a38:	f504 71ce 	add.w	r1, r4, #412	; 0x19c
   20a3c:	a801      	add	r0, sp, #4
   20a3e:	f003 ffff 	bl	24a40 <ble_ll_scan_initiator_start>
    if (rc) {
   20a42:	4603      	mov	r3, r0
   20a44:	b1c8      	cbz	r0, 20a7a <ble_ll_conn_create+0x11a>
        SLIST_REMOVE(&g_ble_ll_conn_active_list,connsm,ble_ll_conn_sm,act_sle);
   20a46:	4a18      	ldr	r2, [pc, #96]	; (20aa8 <ble_ll_conn_create+0x148>)
   20a48:	6811      	ldr	r1, [r2, #0]
   20a4a:	42a1      	cmp	r1, r4
   20a4c:	d104      	bne.n	20a58 <ble_ll_conn_create+0xf8>
   20a4e:	f8d1 10b8 	ldr.w	r1, [r1, #184]	; 0xb8
   20a52:	6011      	str	r1, [r2, #0]
   20a54:	e008      	b.n	20a68 <ble_ll_conn_create+0x108>
   20a56:	4611      	mov	r1, r2
   20a58:	f8d1 20b8 	ldr.w	r2, [r1, #184]	; 0xb8
   20a5c:	42a2      	cmp	r2, r4
   20a5e:	d1fa      	bne.n	20a56 <ble_ll_conn_create+0xf6>
   20a60:	f8d2 20b8 	ldr.w	r2, [r2, #184]	; 0xb8
   20a64:	f8c1 20b8 	str.w	r2, [r1, #184]	; 0xb8
        STAILQ_INSERT_TAIL(&g_ble_ll_conn_free_list, connsm, free_stqe);
   20a68:	2200      	movs	r2, #0
   20a6a:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
   20a6e:	4a0f      	ldr	r2, [pc, #60]	; (20aac <ble_ll_conn_create+0x14c>)
   20a70:	6851      	ldr	r1, [r2, #4]
   20a72:	600c      	str	r4, [r1, #0]
   20a74:	34b8      	adds	r4, #184	; 0xb8
   20a76:	6054      	str	r4, [r2, #4]
   20a78:	e784      	b.n	20984 <ble_ll_conn_create+0x24>
        g_ble_ll_conn_create_sm = connsm;
   20a7a:	4a0a      	ldr	r2, [pc, #40]	; (20aa4 <ble_ll_conn_create+0x144>)
   20a7c:	6014      	str	r4, [r2, #0]
   20a7e:	e781      	b.n	20984 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20a80:	2312      	movs	r3, #18
   20a82:	e77f      	b.n	20984 <ble_ll_conn_create+0x24>
        return BLE_ERR_CMD_DISALLOWED;
   20a84:	230c      	movs	r3, #12
   20a86:	e77d      	b.n	20984 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20a88:	2312      	movs	r3, #18
   20a8a:	e77b      	b.n	20984 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20a8c:	2312      	movs	r3, #18
   20a8e:	e779      	b.n	20984 <ble_ll_conn_create+0x24>
            return BLE_ERR_INV_HCI_CMD_PARMS;
   20a90:	2312      	movs	r3, #18
   20a92:	e777      	b.n	20984 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20a94:	2312      	movs	r3, #18
   20a96:	e775      	b.n	20984 <ble_ll_conn_create+0x24>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20a98:	2312      	movs	r3, #18
   20a9a:	e773      	b.n	20984 <ble_ll_conn_create+0x24>
        return BLE_ERR_MEM_CAPACITY;
   20a9c:	2307      	movs	r3, #7
   20a9e:	e771      	b.n	20984 <ble_ll_conn_create+0x24>
        return BLE_ERR_CONN_LIMIT;
   20aa0:	2309      	movs	r3, #9
   20aa2:	e76f      	b.n	20984 <ble_ll_conn_create+0x24>
   20aa4:	200087ec 	.word	0x200087ec
   20aa8:	200087e4 	.word	0x200087e4
   20aac:	200087f4 	.word	0x200087f4

00020ab0 <ble_ll_conn_hci_read_rem_features>:
    if (len != sizeof(*cmd)) {
   20ab0:	2902      	cmp	r1, #2
   20ab2:	d001      	beq.n	20ab8 <ble_ll_conn_hci_read_rem_features+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20ab4:	2012      	movs	r0, #18
}
   20ab6:	4770      	bx	lr
{
   20ab8:	b510      	push	{r4, lr}
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   20aba:	8800      	ldrh	r0, [r0, #0]
   20abc:	f7fe fad6 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20ac0:	4604      	mov	r4, r0
   20ac2:	b308      	cbz	r0, 20b08 <ble_ll_conn_hci_read_rem_features+0x58>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   20ac4:	78c3      	ldrb	r3, [r0, #3]
   20ac6:	f013 0f10 	tst.w	r3, #16
   20aca:	d11f      	bne.n	20b0c <ble_ll_conn_hci_read_rem_features+0x5c>
    if (!connsm->csmflags.cfbit.rxd_features &&
   20acc:	f013 0f08 	tst.w	r3, #8
   20ad0:	d10b      	bne.n	20aea <ble_ll_conn_hci_read_rem_features+0x3a>
                !IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   20ad2:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    if (!connsm->csmflags.cfbit.rxd_features &&
   20ad6:	f013 0f08 	tst.w	r3, #8
   20ada:	d106      	bne.n	20aea <ble_ll_conn_hci_read_rem_features+0x3a>
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   20adc:	79c3      	ldrb	r3, [r0, #7]
   20ade:	2b02      	cmp	r3, #2
   20ae0:	d009      	beq.n	20af6 <ble_ll_conn_hci_read_rem_features+0x46>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   20ae2:	2103      	movs	r1, #3
   20ae4:	4620      	mov	r0, r4
   20ae6:	f000 ffcc 	bl	21a82 <ble_ll_ctrl_proc_start>
    connsm->csmflags.cfbit.pending_hci_rd_features = 1;
   20aea:	78e3      	ldrb	r3, [r4, #3]
   20aec:	f043 0310 	orr.w	r3, r3, #16
   20af0:	70e3      	strb	r3, [r4, #3]
    return BLE_ERR_SUCCESS;
   20af2:	2000      	movs	r0, #0
}
   20af4:	bd10      	pop	{r4, pc}
            !(ble_ll_read_supp_features() & BLE_LL_FEAT_SLAVE_INIT)) {
   20af6:	f7fc fbd1 	bl	1d29c <ble_ll_read_supp_features>
   20afa:	f000 0208 	and.w	r2, r0, #8
   20afe:	2300      	movs	r3, #0
        if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   20b00:	4313      	orrs	r3, r2
   20b02:	d1ee      	bne.n	20ae2 <ble_ll_conn_hci_read_rem_features+0x32>
                return BLE_ERR_CMD_DISALLOWED;
   20b04:	200c      	movs	r0, #12
   20b06:	e7f5      	b.n	20af4 <ble_ll_conn_hci_read_rem_features+0x44>
        return BLE_ERR_UNK_CONN_ID;
   20b08:	2002      	movs	r0, #2
   20b0a:	e7f3      	b.n	20af4 <ble_ll_conn_hci_read_rem_features+0x44>
        return BLE_ERR_CMD_DISALLOWED;
   20b0c:	200c      	movs	r0, #12
   20b0e:	e7f1      	b.n	20af4 <ble_ll_conn_hci_read_rem_features+0x44>

00020b10 <ble_ll_conn_hci_update>:
{
   20b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20b14:	4605      	mov	r5, r0
    handle = le16toh(cmd->conn_handle);
   20b16:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   20b18:	4630      	mov	r0, r6
   20b1a:	f7fe faa7 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20b1e:	2800      	cmp	r0, #0
   20b20:	d050      	beq.n	20bc4 <ble_ll_conn_hci_update+0xb4>
   20b22:	4604      	mov	r4, r0
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ) ||
   20b24:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   20b28:	f013 0f41 	tst.w	r3, #65	; 0x41
   20b2c:	d14c      	bne.n	20bc8 <ble_ll_conn_hci_update+0xb8>
    if ((connsm->conn_features & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   20b2e:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   20b32:	f013 0f02 	tst.w	r3, #2
   20b36:	d105      	bne.n	20b44 <ble_ll_conn_hci_update+0x34>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   20b38:	79c3      	ldrb	r3, [r0, #7]
   20b3a:	2b02      	cmp	r3, #2
   20b3c:	d048      	beq.n	20bd0 <ble_ll_conn_hci_update+0xc0>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_UPDATE;
   20b3e:	f04f 0800 	mov.w	r8, #0
   20b42:	e001      	b.n	20b48 <ble_ll_conn_hci_update+0x38>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   20b44:	f04f 0806 	mov.w	r8, #6
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   20b48:	7823      	ldrb	r3, [r4, #0]
   20b4a:	f013 0f40 	tst.w	r3, #64	; 0x40
   20b4e:	d00c      	beq.n	20b6a <ble_ll_conn_hci_update+0x5a>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   20b50:	79e3      	ldrb	r3, [r4, #7]
   20b52:	2b02      	cmp	r3, #2
   20b54:	d03e      	beq.n	20bd4 <ble_ll_conn_hci_update+0xc4>
            connsm->csmflags.cfbit.awaiting_host_reply = 0;
   20b56:	7823      	ldrb	r3, [r4, #0]
   20b58:	f36f 1386 	bfc	r3, #6, #1
   20b5c:	7023      	strb	r3, [r4, #0]
            ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   20b5e:	2223      	movs	r2, #35	; 0x23
   20b60:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   20b64:	4620      	mov	r0, r4
   20b66:	f001 fb2b 	bl	221c0 <ble_ll_ctrl_reject_ind_send>
    if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   20b6a:	7863      	ldrb	r3, [r4, #1]
   20b6c:	f013 0f10 	tst.w	r3, #16
   20b70:	d002      	beq.n	20b78 <ble_ll_conn_hci_update+0x68>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   20b72:	79e3      	ldrb	r3, [r4, #7]
   20b74:	2b02      	cmp	r3, #2
   20b76:	d02f      	beq.n	20bd8 <ble_ll_conn_hci_update+0xc8>
    hcu->conn_itvl_min = le16toh(cmd->conn_itvl_min);
   20b78:	886b      	ldrh	r3, [r5, #2]
   20b7a:	b298      	uxth	r0, r3
   20b7c:	f8a4 316a 	strh.w	r3, [r4, #362]	; 0x16a
    hcu->conn_itvl_max = le16toh(cmd->conn_itvl_max);
   20b80:	88ab      	ldrh	r3, [r5, #4]
   20b82:	b299      	uxth	r1, r3
   20b84:	f8a4 316c 	strh.w	r3, [r4, #364]	; 0x16c
    hcu->conn_latency = le16toh(cmd->conn_latency);
   20b88:	88eb      	ldrh	r3, [r5, #6]
   20b8a:	b29a      	uxth	r2, r3
   20b8c:	f8a4 316e 	strh.w	r3, [r4, #366]	; 0x16e
    hcu->supervision_timeout = le16toh(cmd->supervision_timeout);
   20b90:	892f      	ldrh	r7, [r5, #8]
   20b92:	b2bb      	uxth	r3, r7
   20b94:	f8a4 7170 	strh.w	r7, [r4, #368]	; 0x170
    hcu->min_ce_len = le16toh(cmd->min_ce_len);
   20b98:	896f      	ldrh	r7, [r5, #10]
   20b9a:	fa1f fc87 	uxth.w	ip, r7
   20b9e:	f8a4 7172 	strh.w	r7, [r4, #370]	; 0x172
    hcu->max_ce_len = le16toh(cmd->max_ce_len);
   20ba2:	89ad      	ldrh	r5, [r5, #12]
   20ba4:	b2af      	uxth	r7, r5
   20ba6:	f8a4 5174 	strh.w	r5, [r4, #372]	; 0x174
    if (hcu->min_ce_len > hcu->max_ce_len) {
   20baa:	45bc      	cmp	ip, r7
   20bac:	d816      	bhi.n	20bdc <ble_ll_conn_hci_update+0xcc>
    rc = ble_ll_conn_hci_chk_conn_params(hcu->conn_itvl_min,
   20bae:	f7ff fd09 	bl	205c4 <ble_ll_conn_hci_chk_conn_params>
    if (!rc) {
   20bb2:	4605      	mov	r5, r0
   20bb4:	b948      	cbnz	r0, 20bca <ble_ll_conn_hci_update+0xba>
        hcu->handle = handle;
   20bb6:	f8a4 6168 	strh.w	r6, [r4, #360]	; 0x168
        ble_ll_ctrl_proc_start(connsm, ctrl_proc);
   20bba:	4641      	mov	r1, r8
   20bbc:	4620      	mov	r0, r4
   20bbe:	f000 ff60 	bl	21a82 <ble_ll_ctrl_proc_start>
   20bc2:	e002      	b.n	20bca <ble_ll_conn_hci_update+0xba>
        return BLE_ERR_UNK_CONN_ID;
   20bc4:	2502      	movs	r5, #2
   20bc6:	e000      	b.n	20bca <ble_ll_conn_hci_update+0xba>
        return BLE_ERR_CMD_DISALLOWED;
   20bc8:	250c      	movs	r5, #12
}
   20bca:	4628      	mov	r0, r5
   20bcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return BLE_ERR_UNSUPP_REM_FEATURE;
   20bd0:	251a      	movs	r5, #26
   20bd2:	e7fa      	b.n	20bca <ble_ll_conn_hci_update+0xba>
            return BLE_ERR_LMP_COLLISION;
   20bd4:	2523      	movs	r5, #35	; 0x23
   20bd6:	e7f8      	b.n	20bca <ble_ll_conn_hci_update+0xba>
            return BLE_ERR_DIFF_TRANS_COLL;
   20bd8:	252a      	movs	r5, #42	; 0x2a
   20bda:	e7f6      	b.n	20bca <ble_ll_conn_hci_update+0xba>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20bdc:	2512      	movs	r5, #18
   20bde:	e7f4      	b.n	20bca <ble_ll_conn_hci_update+0xba>

00020be0 <ble_ll_conn_hci_param_rr>:
{
   20be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (len != sizeof(*cmd)) {
   20be4:	290e      	cmp	r1, #14
   20be6:	d003      	beq.n	20bf0 <ble_ll_conn_hci_param_rr+0x10>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20be8:	2412      	movs	r4, #18
}
   20bea:	4620      	mov	r0, r4
   20bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   20bf0:	461e      	mov	r6, r3
   20bf2:	4615      	mov	r5, r2
   20bf4:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   20bf6:	8807      	ldrh	r7, [r0, #0]
   20bf8:	fa1f f887 	uxth.w	r8, r7
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   20bfc:	f7fc fb4e 	bl	1d29c <ble_ll_read_supp_features>
   20c00:	f000 0202 	and.w	r2, r0, #2
   20c04:	2300      	movs	r3, #0
   20c06:	4313      	orrs	r3, r2
   20c08:	d104      	bne.n	20c14 <ble_ll_conn_hci_param_rr+0x34>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   20c0a:	2401      	movs	r4, #1
    rsp->conn_handle = htole16(handle);
   20c0c:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   20c0e:	2302      	movs	r3, #2
   20c10:	7033      	strb	r3, [r6, #0]
    return rc;
   20c12:	e7ea      	b.n	20bea <ble_ll_conn_hci_param_rr+0xa>
    connsm = ble_ll_conn_find_active_conn(handle);
   20c14:	4640      	mov	r0, r8
   20c16:	f7fe fa29 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20c1a:	4680      	mov	r8, r0
   20c1c:	b388      	cbz	r0, 20c82 <ble_ll_conn_hci_param_rr+0xa2>
    rc = ble_ll_conn_process_conn_params(cmd, connsm);
   20c1e:	4601      	mov	r1, r0
   20c20:	4620      	mov	r0, r4
   20c22:	f7ff fcfa 	bl	2061a <ble_ll_conn_process_conn_params>
   20c26:	4604      	mov	r4, r0
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   20c28:	f898 3000 	ldrb.w	r3, [r8]
   20c2c:	f013 0f40 	tst.w	r3, #64	; 0x40
   20c30:	d0ec      	beq.n	20c0c <ble_ll_conn_hci_param_rr+0x2c>
        if (rc == BLE_ERR_SUCCESS) {
   20c32:	b9c8      	cbnz	r0, 20c68 <ble_ll_conn_hci_param_rr+0x88>
            om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   20c34:	2110      	movs	r1, #16
   20c36:	201b      	movs	r0, #27
   20c38:	f7e9 ffeb 	bl	ac12 <os_msys_get_pkthdr>
            if (om) {
   20c3c:	4681      	mov	r9, r0
   20c3e:	b1c8      	cbz	r0, 20c74 <ble_ll_conn_hci_param_rr+0x94>
                dptr = om->om_data;
   20c40:	f8d0 a000 	ldr.w	sl, [r0]
                rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, dptr,
   20c44:	f508 72c1 	add.w	r2, r8, #386	; 0x182
   20c48:	4651      	mov	r1, sl
   20c4a:	4640      	mov	r0, r8
   20c4c:	f000 fe0d 	bl	2186a <ble_ll_ctrl_conn_param_reply>
                dptr[0] = rsp_opcode;
   20c50:	f88a 0000 	strb.w	r0, [sl]
                len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   20c54:	4b0c      	ldr	r3, [pc, #48]	; (20c88 <ble_ll_conn_hci_param_rr+0xa8>)
   20c56:	5c1b      	ldrb	r3, [r3, r0]
   20c58:	3301      	adds	r3, #1
                ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   20c5a:	b2db      	uxtb	r3, r3
   20c5c:	2203      	movs	r2, #3
   20c5e:	4649      	mov	r1, r9
   20c60:	4640      	mov	r0, r8
   20c62:	f7ff fa85 	bl	20170 <ble_ll_conn_enqueue_pkt>
   20c66:	e005      	b.n	20c74 <ble_ll_conn_hci_param_rr+0x94>
            ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   20c68:	223b      	movs	r2, #59	; 0x3b
   20c6a:	f898 1038 	ldrb.w	r1, [r8, #56]	; 0x38
   20c6e:	4640      	mov	r0, r8
   20c70:	f001 faa6 	bl	221c0 <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   20c74:	f898 3000 	ldrb.w	r3, [r8]
   20c78:	f36f 1386 	bfc	r3, #6, #1
   20c7c:	f888 3000 	strb.w	r3, [r8]
   20c80:	e7c4      	b.n	20c0c <ble_ll_conn_hci_param_rr+0x2c>
        rc = BLE_ERR_UNK_CONN_ID;
   20c82:	2402      	movs	r4, #2
   20c84:	e7c2      	b.n	20c0c <ble_ll_conn_hci_param_rr+0x2c>
   20c86:	bf00      	nop
   20c88:	00029810 	.word	0x00029810

00020c8c <ble_ll_conn_hci_param_nrr>:
    if (len != sizeof(*cmd)) {
   20c8c:	2903      	cmp	r1, #3
   20c8e:	d001      	beq.n	20c94 <ble_ll_conn_hci_param_nrr+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20c90:	2012      	movs	r0, #18
}
   20c92:	4770      	bx	lr
{
   20c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20c98:	461e      	mov	r6, r3
   20c9a:	4615      	mov	r5, r2
   20c9c:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   20c9e:	8807      	ldrh	r7, [r0, #0]
   20ca0:	fa1f f887 	uxth.w	r8, r7
    if ((ble_ll_read_supp_features() & BLE_LL_FEAT_CONN_PARM_REQ) == 0) {
   20ca4:	f7fc fafa 	bl	1d29c <ble_ll_read_supp_features>
   20ca8:	f000 0202 	and.w	r2, r0, #2
   20cac:	2300      	movs	r3, #0
   20cae:	4313      	orrs	r3, r2
   20cb0:	d105      	bne.n	20cbe <ble_ll_conn_hci_param_nrr+0x32>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   20cb2:	2001      	movs	r0, #1
    rsp->conn_handle = htole16(handle);
   20cb4:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   20cb6:	2302      	movs	r3, #2
   20cb8:	7033      	strb	r3, [r6, #0]
}
   20cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connsm = ble_ll_conn_find_active_conn(handle);
   20cbe:	4640      	mov	r0, r8
   20cc0:	f7fe f9d4 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20cc4:	4680      	mov	r8, r0
   20cc6:	b190      	cbz	r0, 20cee <ble_ll_conn_hci_param_nrr+0x62>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   20cc8:	7803      	ldrb	r3, [r0, #0]
   20cca:	f013 0f40 	tst.w	r3, #64	; 0x40
   20cce:	d101      	bne.n	20cd4 <ble_ll_conn_hci_param_nrr+0x48>
    rc = BLE_ERR_SUCCESS;
   20cd0:	2000      	movs	r0, #0
   20cd2:	e7ef      	b.n	20cb4 <ble_ll_conn_hci_param_nrr+0x28>
        ble_ll_ctrl_reject_ind_send(connsm, connsm->host_reply_opcode,
   20cd4:	78a2      	ldrb	r2, [r4, #2]
   20cd6:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   20cda:	f001 fa71 	bl	221c0 <ble_ll_ctrl_reject_ind_send>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   20cde:	f898 3000 	ldrb.w	r3, [r8]
   20ce2:	f36f 1386 	bfc	r3, #6, #1
   20ce6:	f888 3000 	strb.w	r3, [r8]
    rc = BLE_ERR_SUCCESS;
   20cea:	2000      	movs	r0, #0
   20cec:	e7e2      	b.n	20cb4 <ble_ll_conn_hci_param_nrr+0x28>
        rc = BLE_ERR_UNK_CONN_ID;
   20cee:	2002      	movs	r0, #2
   20cf0:	e7e0      	b.n	20cb4 <ble_ll_conn_hci_param_nrr+0x28>
	...

00020cf4 <ble_ll_conn_create_cancel>:
 *
 * @return int
 */
int
ble_ll_conn_create_cancel(ble_ll_hci_post_cmd_complete_cb *post_cmd_cb)
{
   20cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20cf6:	4607      	mov	r7, r0
     * If we receive this command and we have not got a connection
     * create command, we have to return disallowed. The spec does not say
     * what happens if the connection has already been established. We
     * return disallowed as well
     */
    OS_ENTER_CRITICAL(sr);
   20cf8:	f7ea fbea 	bl	b4d0 <os_arch_save_sr>
   20cfc:	4606      	mov	r6, r0
    connsm = g_ble_ll_conn_create_sm;
   20cfe:	4b0d      	ldr	r3, [pc, #52]	; (20d34 <ble_ll_conn_create_cancel+0x40>)
   20d00:	681d      	ldr	r5, [r3, #0]
    if (connsm && (connsm->conn_state == BLE_LL_CONN_STATE_IDLE)) {
   20d02:	b195      	cbz	r5, 20d2a <ble_ll_conn_create_cancel+0x36>
   20d04:	79ab      	ldrb	r3, [r5, #6]
   20d06:	b993      	cbnz	r3, 20d2e <ble_ll_conn_create_cancel+0x3a>
        /* stop scanning and end the connection event */
        g_ble_ll_conn_create_sm = NULL;
   20d08:	2400      	movs	r4, #0
   20d0a:	4b0a      	ldr	r3, [pc, #40]	; (20d34 <ble_ll_conn_create_cancel+0x40>)
   20d0c:	601c      	str	r4, [r3, #0]
        ble_ll_scan_sm_stop(1);
   20d0e:	2001      	movs	r0, #1
   20d10:	f003 fc26 	bl	24560 <ble_ll_scan_sm_stop>
        ble_ll_conn_end(connsm, BLE_ERR_UNK_CONN_ID);
   20d14:	2102      	movs	r1, #2
   20d16:	4628      	mov	r0, r5
   20d18:	f7fe fcb8 	bl	1f68c <ble_ll_conn_end>

        *post_cmd_cb = ble_ll_conn_hci_cancel_conn_complete_event;
   20d1c:	4b06      	ldr	r3, [pc, #24]	; (20d38 <ble_ll_conn_create_cancel+0x44>)
   20d1e:	603b      	str	r3, [r7, #0]
        rc = BLE_ERR_SUCCESS;
    } else {
        /* If we are not attempting to create a connection*/
        rc = BLE_ERR_CMD_DISALLOWED;
    }
    OS_EXIT_CRITICAL(sr);
   20d20:	4630      	mov	r0, r6
   20d22:	f7ea fbdb 	bl	b4dc <os_arch_restore_sr>

    return rc;
}
   20d26:	4620      	mov	r0, r4
   20d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rc = BLE_ERR_CMD_DISALLOWED;
   20d2a:	240c      	movs	r4, #12
   20d2c:	e7f8      	b.n	20d20 <ble_ll_conn_create_cancel+0x2c>
   20d2e:	240c      	movs	r4, #12
   20d30:	e7f6      	b.n	20d20 <ble_ll_conn_create_cancel+0x2c>
   20d32:	bf00      	nop
   20d34:	200087ec 	.word	0x200087ec
   20d38:	000207e1 	.word	0x000207e1

00020d3c <ble_ll_conn_hci_disconnect_cmd>:
    int rc;
    uint16_t handle;
    struct ble_ll_conn_sm *connsm;

    /* Check for valid parameters */
    handle = le16toh(cmd->conn_handle);
   20d3c:	8802      	ldrh	r2, [r0, #0]

    rc = BLE_ERR_INV_HCI_CMD_PARMS;
    if (handle <= BLE_LL_CONN_MAX_CONN_HANDLE) {
   20d3e:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
   20d42:	d23f      	bcs.n	20dc4 <ble_ll_conn_hci_disconnect_cmd+0x88>
        /* Make sure reason is valid */
        switch (cmd->reason) {
   20d44:	7883      	ldrb	r3, [r0, #2]
   20d46:	3b05      	subs	r3, #5
   20d48:	2b36      	cmp	r3, #54	; 0x36
   20d4a:	d83d      	bhi.n	20dc8 <ble_ll_conn_hci_disconnect_cmd+0x8c>
   20d4c:	e8df f003 	tbb	[pc, r3]
   20d50:	3c3c3c1c 	.word	0x3c3c3c1c
   20d54:	3c3c3c3c 	.word	0x3c3c3c3c
   20d58:	3c3c3c3c 	.word	0x3c3c3c3c
   20d5c:	1c1c3c3c 	.word	0x1c1c3c3c
   20d60:	3c3c3c1c 	.word	0x3c3c3c1c
   20d64:	3c3c1c3c 	.word	0x3c3c1c3c
   20d68:	3c3c3c3c 	.word	0x3c3c3c3c
   20d6c:	3c3c3c3c 	.word	0x3c3c3c3c
   20d70:	3c3c3c3c 	.word	0x3c3c3c3c
   20d74:	3c3c3c1c 	.word	0x3c3c3c1c
   20d78:	3c3c3c3c 	.word	0x3c3c3c3c
   20d7c:	3c3c3c3c 	.word	0x3c3c3c3c
   20d80:	3c3c3c3c 	.word	0x3c3c3c3c
   20d84:	3c3c      	.short	0x3c3c
   20d86:	1c          	.byte	0x1c
   20d87:	00          	.byte	0x00
{
   20d88:	b510      	push	{r4, lr}
   20d8a:	4604      	mov	r4, r0
        case BLE_ERR_RD_CONN_TERM_RESRCS:
        case BLE_ERR_RD_CONN_TERM_PWROFF:
        case BLE_ERR_UNSUPP_REM_FEATURE:
        case BLE_ERR_UNIT_KEY_PAIRING:
        case BLE_ERR_CONN_PARMS:
            connsm = ble_ll_conn_find_active_conn(handle);
   20d8c:	4610      	mov	r0, r2
   20d8e:	f7fe f96d 	bl	1f06c <ble_ll_conn_find_active_conn>
            if (connsm) {
   20d92:	b1d8      	cbz	r0, 20dcc <ble_ll_conn_hci_disconnect_cmd+0x90>
                /* Do not allow command if we are in process of disconnecting */
                if (connsm->disconnect_reason) {
   20d94:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
   20d98:	b9d2      	cbnz	r2, 20dd0 <ble_ll_conn_hci_disconnect_cmd+0x94>
                    rc = BLE_ERR_CMD_DISALLOWED;
                } else {
                    /* This control procedure better not be pending! */
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   20d9a:	f990 2000 	ldrsb.w	r2, [r0]
   20d9e:	2a00      	cmp	r2, #0
   20da0:	db06      	blt.n	20db0 <ble_ll_conn_hci_disconnect_cmd+0x74>

                    /* Record the disconnect reason */
                    connsm->disconnect_reason = cmd->reason;
   20da2:	78a2      	ldrb	r2, [r4, #2]
   20da4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

                    /* Start this control procedure */
                    ble_ll_ctrl_terminate_start(connsm);
   20da8:	f000 fe45 	bl	21a36 <ble_ll_ctrl_terminate_start>

                    rc = BLE_ERR_SUCCESS;
   20dac:	2000      	movs	r0, #0
            break;
        }
    }

    return rc;
}
   20dae:	bd10      	pop	{r4, pc}
                    BLE_LL_ASSERT(CONN_F_TERMINATE_STARTED(connsm) == 0);
   20db0:	f7e7 fa06 	bl	81c0 <hal_debugger_connected>
   20db4:	b100      	cbz	r0, 20db8 <ble_ll_conn_hci_disconnect_cmd+0x7c>
   20db6:	be01      	bkpt	0x0001
   20db8:	2300      	movs	r3, #0
   20dba:	461a      	mov	r2, r3
   20dbc:	4619      	mov	r1, r3
   20dbe:	4618      	mov	r0, r3
   20dc0:	f7e8 fd94 	bl	98ec <__assert_func>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20dc4:	2012      	movs	r0, #18
   20dc6:	4770      	bx	lr
   20dc8:	2012      	movs	r0, #18
}
   20dca:	4770      	bx	lr
                rc = BLE_ERR_UNK_CONN_ID;
   20dcc:	2002      	movs	r0, #2
   20dce:	e7ee      	b.n	20dae <ble_ll_conn_hci_disconnect_cmd+0x72>
                    rc = BLE_ERR_CMD_DISALLOWED;
   20dd0:	200c      	movs	r0, #12
    return rc;
   20dd2:	e7ec      	b.n	20dae <ble_ll_conn_hci_disconnect_cmd+0x72>

00020dd4 <ble_ll_conn_hci_rd_rem_ver_cmd>:
ble_ll_conn_hci_rd_rem_ver_cmd(const uint8_t *cmdbuf, uint8_t len)
{
    struct ble_ll_conn_sm *connsm;
    const struct ble_hci_rd_rem_ver_info_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   20dd4:	2902      	cmp	r1, #2
   20dd6:	d001      	beq.n	20ddc <ble_ll_conn_hci_rd_rem_ver_cmd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20dd8:	2012      	movs	r0, #18
    } else {
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
    }

    return BLE_ERR_SUCCESS;
}
   20dda:	4770      	bx	lr
{
   20ddc:	b508      	push	{r3, lr}
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   20dde:	8800      	ldrh	r0, [r0, #0]
   20de0:	f7fe f944 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20de4:	b198      	cbz	r0, 20e0e <ble_ll_conn_hci_rd_rem_ver_cmd+0x3a>
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   20de6:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
   20dea:	f012 0f10 	tst.w	r2, #16
   20dee:	d110      	bne.n	20e12 <ble_ll_conn_hci_rd_rem_ver_cmd+0x3e>
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   20df0:	7841      	ldrb	r1, [r0, #1]
   20df2:	f011 0f04 	tst.w	r1, #4
   20df6:	d005      	beq.n	20e04 <ble_ll_conn_hci_rd_rem_ver_cmd+0x30>
        connsm->pending_ctrl_procs |= (1 << BLE_LL_CTRL_PROC_VERSION_XCHG);
   20df8:	f042 0210 	orr.w	r2, r2, #16
   20dfc:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
    return BLE_ERR_SUCCESS;
   20e00:	2000      	movs	r0, #0
}
   20e02:	bd08      	pop	{r3, pc}
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   20e04:	2104      	movs	r1, #4
   20e06:	f000 fe3c 	bl	21a82 <ble_ll_ctrl_proc_start>
    return BLE_ERR_SUCCESS;
   20e0a:	2000      	movs	r0, #0
   20e0c:	e7f9      	b.n	20e02 <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>
        return BLE_ERR_UNK_CONN_ID;
   20e0e:	2002      	movs	r0, #2
   20e10:	e7f7      	b.n	20e02 <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>
        return BLE_ERR_CMD_DISALLOWED;
   20e12:	200c      	movs	r0, #12
   20e14:	e7f5      	b.n	20e02 <ble_ll_conn_hci_rd_rem_ver_cmd+0x2e>

00020e16 <ble_ll_conn_hci_rd_rssi>:
    const struct ble_hci_rd_rssi_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_rd_rssi_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    int rc;

    if (len != sizeof(*cmd)) {
   20e16:	2902      	cmp	r1, #2
   20e18:	d001      	beq.n	20e1e <ble_ll_conn_hci_rd_rssi+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20e1a:	2012      	movs	r0, #18
        rc = BLE_ERR_SUCCESS;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   20e1c:	4770      	bx	lr
{
   20e1e:	b538      	push	{r3, r4, r5, lr}
   20e20:	461d      	mov	r5, r3
   20e22:	4614      	mov	r4, r2
    rsp->handle = cmd->handle;
   20e24:	8803      	ldrh	r3, [r0, #0]
   20e26:	8013      	strh	r3, [r2, #0]
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->handle));
   20e28:	8800      	ldrh	r0, [r0, #0]
   20e2a:	f7fe f91f 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20e2e:	b130      	cbz	r0, 20e3e <ble_ll_conn_hci_rd_rssi+0x28>
        rsp->rssi = connsm->conn_rssi;
   20e30:	f990 3008 	ldrsb.w	r3, [r0, #8]
   20e34:	70a3      	strb	r3, [r4, #2]
        rc = BLE_ERR_SUCCESS;
   20e36:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   20e38:	2303      	movs	r3, #3
   20e3a:	702b      	strb	r3, [r5, #0]
}
   20e3c:	bd38      	pop	{r3, r4, r5, pc}
        rsp->rssi = 127;
   20e3e:	237f      	movs	r3, #127	; 0x7f
   20e40:	70a3      	strb	r3, [r4, #2]
        rc = BLE_ERR_UNK_CONN_ID;
   20e42:	2002      	movs	r0, #2
   20e44:	e7f8      	b.n	20e38 <ble_ll_conn_hci_rd_rssi+0x22>

00020e46 <ble_ll_conn_hci_rd_chan_map>:
    struct ble_hci_le_rd_chan_map_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   20e46:	2902      	cmp	r1, #2
   20e48:	d001      	beq.n	20e4e <ble_ll_conn_hci_rd_chan_map+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20e4a:	2012      	movs	r0, #18

    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   20e4c:	4770      	bx	lr
{
   20e4e:	b570      	push	{r4, r5, r6, lr}
   20e50:	461d      	mov	r5, r3
   20e52:	4614      	mov	r4, r2
    handle = le16toh(cmd->conn_handle);
   20e54:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   20e56:	4630      	mov	r0, r6
   20e58:	f7fe f908 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20e5c:	4602      	mov	r2, r0
   20e5e:	b170      	cbz	r0, 20e7e <ble_ll_conn_hci_rd_chan_map+0x38>
        if (connsm->csmflags.cfbit.chanmap_update_scheduled) {
   20e60:	7843      	ldrb	r3, [r0, #1]
   20e62:	f013 0f10 	tst.w	r3, #16
   20e66:	d010      	beq.n	20e8a <ble_ll_conn_hci_rd_chan_map+0x44>
            memcpy(rsp->chan_map, connsm->req_chanmap, BLE_LL_CONN_CHMAP_LEN);
   20e68:	f852 3f25 	ldr.w	r3, [r2, #37]!
   20e6c:	f8c4 3002 	str.w	r3, [r4, #2]
   20e70:	7913      	ldrb	r3, [r2, #4]
   20e72:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   20e74:	2000      	movs	r0, #0
    rsp->conn_handle = htole16(handle);
   20e76:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   20e78:	2307      	movs	r3, #7
   20e7a:	702b      	strb	r3, [r5, #0]
}
   20e7c:	bd70      	pop	{r4, r5, r6, pc}
        memset(rsp->chan_map, 0, sizeof(rsp->chan_map));
   20e7e:	2200      	movs	r2, #0
   20e80:	f8c4 2002 	str.w	r2, [r4, #2]
   20e84:	71a2      	strb	r2, [r4, #6]
        rc = BLE_ERR_UNK_CONN_ID;
   20e86:	2002      	movs	r0, #2
   20e88:	e7f5      	b.n	20e76 <ble_ll_conn_hci_rd_chan_map+0x30>
            memcpy(rsp->chan_map, connsm->chanmap, BLE_LL_CONN_CHMAP_LEN);
   20e8a:	f852 3f20 	ldr.w	r3, [r2, #32]!
   20e8e:	f8c4 3002 	str.w	r3, [r4, #2]
   20e92:	7913      	ldrb	r3, [r2, #4]
   20e94:	71a3      	strb	r3, [r4, #6]
        rc = BLE_ERR_SUCCESS;
   20e96:	2000      	movs	r0, #0
   20e98:	e7ed      	b.n	20e76 <ble_ll_conn_hci_rd_chan_map+0x30>

00020e9a <ble_ll_conn_hci_set_chan_class>:
ble_ll_conn_hci_set_chan_class(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_host_chan_class_cp *cmd = (const void *) cmdbuf;
    uint8_t num_used_chans;

    if (len != sizeof(*cmd)) {
   20e9a:	2905      	cmp	r1, #5
   20e9c:	d001      	beq.n	20ea2 <ble_ll_conn_hci_set_chan_class+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20e9e:	2012      	movs	r0, #18
    }

    /* Set the host channel mask */
    ble_ll_conn_set_global_chanmap(num_used_chans, cmd->chan_map);
    return BLE_ERR_SUCCESS;
}
   20ea0:	4770      	bx	lr
{
   20ea2:	b510      	push	{r4, lr}
   20ea4:	4604      	mov	r4, r0
    num_used_chans = ble_ll_utils_calc_num_used_chans(cmd->chan_map);
   20ea6:	f004 fb6e 	bl	25586 <ble_ll_utils_calc_num_used_chans>
    if ((num_used_chans < 2) || ((cmd->chan_map[4] & 0xe0) != 0)) {
   20eaa:	2801      	cmp	r0, #1
   20eac:	d908      	bls.n	20ec0 <ble_ll_conn_hci_set_chan_class+0x26>
   20eae:	7923      	ldrb	r3, [r4, #4]
   20eb0:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   20eb4:	d106      	bne.n	20ec4 <ble_ll_conn_hci_set_chan_class+0x2a>
    ble_ll_conn_set_global_chanmap(num_used_chans, cmd->chan_map);
   20eb6:	4621      	mov	r1, r4
   20eb8:	f7ff f9c8 	bl	2024c <ble_ll_conn_set_global_chanmap>
    return BLE_ERR_SUCCESS;
   20ebc:	2000      	movs	r0, #0
}
   20ebe:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20ec0:	2012      	movs	r0, #18
   20ec2:	e7fc      	b.n	20ebe <ble_ll_conn_hci_set_chan_class+0x24>
   20ec4:	2012      	movs	r0, #18
   20ec6:	e7fa      	b.n	20ebe <ble_ll_conn_hci_set_chan_class+0x24>

00020ec8 <ble_ll_conn_hci_set_data_len>:
    uint16_t handle;
    uint16_t txoctets;
    uint16_t txtime;
    struct ble_ll_conn_sm *connsm;

    if (len != sizeof(*cmd)) {
   20ec8:	2906      	cmp	r1, #6
   20eca:	d001      	beq.n	20ed0 <ble_ll_conn_hci_set_data_len+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20ecc:	2012      	movs	r0, #18

done:
    rsp->conn_handle = htole16(handle);
    *rsplen = sizeof(*rsp);
    return rc;
}
   20ece:	4770      	bx	lr
{
   20ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   20ed4:	461e      	mov	r6, r3
   20ed6:	4615      	mov	r5, r2
   20ed8:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   20eda:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   20edc:	4638      	mov	r0, r7
   20ede:	f7fe f8c5 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20ee2:	4680      	mov	r8, r0
   20ee4:	b1f8      	cbz	r0, 20f26 <ble_ll_conn_hci_set_data_len+0x5e>
    txoctets = le16toh(cmd->tx_octets);
   20ee6:	f8b4 9002 	ldrh.w	r9, [r4, #2]
    txtime = le16toh(cmd->tx_time);
   20eea:	88a4      	ldrh	r4, [r4, #4]
   20eec:	fa1f fa84 	uxth.w	sl, r4
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   20ef0:	4648      	mov	r0, r9
   20ef2:	f7fb ffdc 	bl	1ceae <ble_ll_chk_txrx_octets>
   20ef6:	b908      	cbnz	r0, 20efc <ble_ll_conn_hci_set_data_len+0x34>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20ef8:	2012      	movs	r0, #18
   20efa:	e015      	b.n	20f28 <ble_ll_conn_hci_set_data_len+0x60>
        !ble_ll_chk_txrx_time(txtime)) {
   20efc:	4650      	mov	r0, sl
   20efe:	f7fb ffde 	bl	1cebe <ble_ll_chk_txrx_time>
    if (!ble_ll_chk_txrx_octets(txoctets) ||
   20f02:	b1b0      	cbz	r0, 20f32 <ble_ll_conn_hci_set_data_len+0x6a>
    if (connsm->max_tx_time != txtime ||
   20f04:	f8b8 3010 	ldrh.w	r3, [r8, #16]
   20f08:	4553      	cmp	r3, sl
   20f0a:	d103      	bne.n	20f14 <ble_ll_conn_hci_set_data_len+0x4c>
        connsm->max_tx_octets != txoctets) {
   20f0c:	f898 300a 	ldrb.w	r3, [r8, #10]
    if (connsm->max_tx_time != txtime ||
   20f10:	454b      	cmp	r3, r9
   20f12:	d010      	beq.n	20f36 <ble_ll_conn_hci_set_data_len+0x6e>
        connsm->max_tx_time = txtime;
   20f14:	f8a8 4010 	strh.w	r4, [r8, #16]
        connsm->max_tx_octets = txoctets;
   20f18:	f888 900a 	strb.w	r9, [r8, #10]
        ble_ll_ctrl_initiate_dle(connsm);
   20f1c:	4640      	mov	r0, r8
   20f1e:	f000 fdd7 	bl	21ad0 <ble_ll_ctrl_initiate_dle>
    rc = BLE_ERR_SUCCESS;
   20f22:	2000      	movs	r0, #0
   20f24:	e000      	b.n	20f28 <ble_ll_conn_hci_set_data_len+0x60>
        rc = BLE_ERR_UNK_CONN_ID;
   20f26:	2002      	movs	r0, #2
    rsp->conn_handle = htole16(handle);
   20f28:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   20f2a:	2302      	movs	r3, #2
   20f2c:	7033      	strb	r3, [r6, #0]
}
   20f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   20f32:	2012      	movs	r0, #18
   20f34:	e7f8      	b.n	20f28 <ble_ll_conn_hci_set_data_len+0x60>
    rc = BLE_ERR_SUCCESS;
   20f36:	2000      	movs	r0, #0
   20f38:	e7f6      	b.n	20f28 <ble_ll_conn_hci_set_data_len+0x60>

00020f3a <ble_ll_conn_hci_le_start_encrypt>:
{
    const struct ble_hci_le_start_encrypt_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_conn_sm *connsm;
    int rc;

    if (len != sizeof(*cmd)) {
   20f3a:	291c      	cmp	r1, #28
   20f3c:	d001      	beq.n	20f42 <ble_ll_conn_hci_le_start_encrypt+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20f3e:	2012      	movs	r0, #18
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
        rc = BLE_ERR_SUCCESS;
    }

    return rc;
}
   20f40:	4770      	bx	lr
{
   20f42:	b538      	push	{r3, r4, r5, lr}
   20f44:	4604      	mov	r4, r0
    connsm = ble_ll_conn_find_active_conn(le16toh(cmd->conn_handle));
   20f46:	8800      	ldrh	r0, [r0, #0]
   20f48:	f7fe f890 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20f4c:	4605      	mov	r5, r0
   20f4e:	b1f0      	cbz	r0, 20f8e <ble_ll_conn_hci_le_start_encrypt+0x54>
    } else if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   20f50:	79c3      	ldrb	r3, [r0, #7]
   20f52:	2b02      	cmp	r3, #2
   20f54:	d01d      	beq.n	20f92 <ble_ll_conn_hci_le_start_encrypt+0x58>
    } else if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   20f56:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   20f5a:	2b02      	cmp	r3, #2
   20f5c:	d01b      	beq.n	20f96 <ble_ll_conn_hci_le_start_encrypt+0x5c>
        connsm->enc_data.host_rand_num = le64toh(cmd->rand);
   20f5e:	f8d4 2002 	ldr.w	r2, [r4, #2]
   20f62:	f8d4 3006 	ldr.w	r3, [r4, #6]
   20f66:	f8c0 2128 	str.w	r2, [r0, #296]	; 0x128
   20f6a:	f8c0 312c 	str.w	r3, [r0, #300]	; 0x12c
        connsm->enc_data.enc_div = le16toh(cmd->div);
   20f6e:	8963      	ldrh	r3, [r4, #10]
   20f70:	f8a0 311a 	strh.w	r3, [r0, #282]	; 0x11a
        swap_buf(connsm->enc_data.enc_block.key, cmd->ltk, 16);
   20f74:	2210      	movs	r2, #16
   20f76:	f104 010c 	add.w	r1, r4, #12
   20f7a:	f500 709c 	add.w	r0, r0, #312	; 0x138
   20f7e:	f7fa feac 	bl	1bcda <swap_buf>
        ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   20f82:	2102      	movs	r1, #2
   20f84:	4628      	mov	r0, r5
   20f86:	f000 fd7c 	bl	21a82 <ble_ll_ctrl_proc_start>
        rc = BLE_ERR_SUCCESS;
   20f8a:	2000      	movs	r0, #0
}
   20f8c:	bd38      	pop	{r3, r4, r5, pc}
        rc = BLE_ERR_UNK_CONN_ID;
   20f8e:	2002      	movs	r0, #2
   20f90:	e7fc      	b.n	20f8c <ble_ll_conn_hci_le_start_encrypt+0x52>
        rc = BLE_ERR_UNSPECIFIED;
   20f92:	201f      	movs	r0, #31
   20f94:	e7fa      	b.n	20f8c <ble_ll_conn_hci_le_start_encrypt+0x52>
        rc = BLE_ERR_CMD_DISALLOWED;
   20f96:	200c      	movs	r0, #12
   20f98:	e7f8      	b.n	20f8c <ble_ll_conn_hci_le_start_encrypt+0x52>

00020f9a <ble_ll_conn_hci_le_ltk_reply>:
    struct ble_hci_le_lt_key_req_reply_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   20f9a:	2912      	cmp	r1, #18
   20f9c:	d001      	beq.n	20fa2 <ble_ll_conn_hci_le_ltk_reply+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20f9e:	2012      	movs	r0, #18
ltk_key_cmd_complete:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   20fa0:	4770      	bx	lr
{
   20fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20fa6:	461e      	mov	r6, r3
   20fa8:	4615      	mov	r5, r2
   20faa:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   20fac:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   20fae:	4638      	mov	r0, r7
   20fb0:	f7fe f85c 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (!connsm) {
   20fb4:	4680      	mov	r8, r0
   20fb6:	b1d0      	cbz	r0, 20fee <ble_ll_conn_hci_le_ltk_reply+0x54>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   20fb8:	79c3      	ldrb	r3, [r0, #7]
   20fba:	2b01      	cmp	r3, #1
   20fbc:	d019      	beq.n	20ff2 <ble_ll_conn_hci_le_ltk_reply+0x58>
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   20fbe:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   20fc2:	2b08      	cmp	r3, #8
   20fc4:	d005      	beq.n	20fd2 <ble_ll_conn_hci_le_ltk_reply+0x38>
        rc = BLE_ERR_CMD_DISALLOWED;
   20fc6:	200c      	movs	r0, #12
    rsp->conn_handle = htole16(handle);
   20fc8:	802f      	strh	r7, [r5, #0]
    *rsplen = sizeof(*rsp);
   20fca:	2302      	movs	r3, #2
   20fcc:	7033      	strb	r3, [r6, #0]
}
   20fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    swap_buf(connsm->enc_data.enc_block.key, cmd->ltk, 16);
   20fd2:	2210      	movs	r2, #16
   20fd4:	1ca1      	adds	r1, r4, #2
   20fd6:	f500 709c 	add.w	r0, r0, #312	; 0x138
   20fda:	f7fa fe7e 	bl	1bcda <swap_buf>
    ble_ll_calc_session_key(connsm);
   20fde:	4640      	mov	r0, r8
   20fe0:	f000 fbce 	bl	21780 <ble_ll_calc_session_key>
    ble_ll_ctrl_start_enc_send(connsm);
   20fe4:	4640      	mov	r0, r8
   20fe6:	f000 fc1f 	bl	21828 <ble_ll_ctrl_start_enc_send>
    rc = BLE_ERR_SUCCESS;
   20fea:	2000      	movs	r0, #0
   20fec:	e7ec      	b.n	20fc8 <ble_ll_conn_hci_le_ltk_reply+0x2e>
        rc = BLE_ERR_UNK_CONN_ID;
   20fee:	2002      	movs	r0, #2
   20ff0:	e7ea      	b.n	20fc8 <ble_ll_conn_hci_le_ltk_reply+0x2e>
        rc = BLE_ERR_UNSPECIFIED;
   20ff2:	201f      	movs	r0, #31
   20ff4:	e7e8      	b.n	20fc8 <ble_ll_conn_hci_le_ltk_reply+0x2e>

00020ff6 <ble_ll_conn_hci_le_ltk_neg_reply>:
    struct ble_hci_le_lt_key_req_neg_reply_rp *rsp = (void *) rspbuf;
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;

    if (len != sizeof(*cmd)) {
   20ff6:	2902      	cmp	r1, #2
   20ff8:	d001      	beq.n	20ffe <ble_ll_conn_hci_le_ltk_neg_reply+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   20ffa:	2012      	movs	r0, #18
ltk_key_cmd_complete:
    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   20ffc:	4770      	bx	lr
{
   20ffe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21000:	461d      	mov	r5, r3
   21002:	4614      	mov	r4, r2
    handle = le16toh(cmd->conn_handle);
   21004:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   21006:	4630      	mov	r0, r6
   21008:	f7fe f830 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (!connsm) {
   2100c:	4607      	mov	r7, r0
   2100e:	b1a0      	cbz	r0, 2103a <ble_ll_conn_hci_le_ltk_neg_reply+0x44>
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   21010:	79c3      	ldrb	r3, [r0, #7]
   21012:	2b01      	cmp	r3, #1
   21014:	d013      	beq.n	2103e <ble_ll_conn_hci_le_ltk_neg_reply+0x48>
    if (connsm->enc_data.enc_state != CONN_ENC_S_LTK_REQ_WAIT) {
   21016:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   2101a:	2b08      	cmp	r3, #8
   2101c:	d004      	beq.n	21028 <ble_ll_conn_hci_le_ltk_neg_reply+0x32>
        rc = BLE_ERR_CMD_DISALLOWED;
   2101e:	200c      	movs	r0, #12
    rsp->conn_handle = htole16(handle);
   21020:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   21022:	2302      	movs	r3, #2
   21024:	702b      	strb	r3, [r5, #0]
}
   21026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ble_ll_ctrl_reject_ind_send(connsm, BLE_LL_CTRL_ENC_REQ,
   21028:	2206      	movs	r2, #6
   2102a:	2103      	movs	r1, #3
   2102c:	f001 f8c8 	bl	221c0 <ble_ll_ctrl_reject_ind_send>
    connsm->enc_data.enc_state = CONN_ENC_S_LTK_NEG_REPLY;
   21030:	2309      	movs	r3, #9
   21032:	f887 3118 	strb.w	r3, [r7, #280]	; 0x118
    rc = BLE_ERR_SUCCESS;
   21036:	2000      	movs	r0, #0
   21038:	e7f2      	b.n	21020 <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>
        rc = BLE_ERR_UNK_CONN_ID;
   2103a:	2002      	movs	r0, #2
   2103c:	e7f0      	b.n	21020 <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>
        rc = BLE_ERR_UNSPECIFIED;
   2103e:	201f      	movs	r0, #31
   21040:	e7ee      	b.n	21020 <ble_ll_conn_hci_le_ltk_neg_reply+0x2a>

00021042 <ble_ll_conn_hci_rd_auth_pyld_tmo>:
    struct ble_ll_conn_sm *connsm;
    uint16_t handle;
    int rc;


    if (len != sizeof(*cmd)) {
   21042:	2902      	cmp	r1, #2
   21044:	d001      	beq.n	2104a <ble_ll_conn_hci_rd_auth_pyld_tmo+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21046:	2012      	movs	r0, #18

    rsp->conn_handle = htole16(handle);

    *rsplen = sizeof(*rsp);
    return rc;
}
   21048:	4770      	bx	lr
{
   2104a:	b570      	push	{r4, r5, r6, lr}
   2104c:	461d      	mov	r5, r3
   2104e:	4614      	mov	r4, r2
    handle = le16toh(cmd->conn_handle);
   21050:	8806      	ldrh	r6, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   21052:	4630      	mov	r0, r6
   21054:	f7fe f80a 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (!connsm) {
   21058:	b138      	cbz	r0, 2106a <ble_ll_conn_hci_rd_auth_pyld_tmo+0x28>
        rsp->tmo = htole16(connsm->auth_pyld_tmo);
   2105a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
   2105e:	8063      	strh	r3, [r4, #2]
        rc = BLE_ERR_SUCCESS;
   21060:	2000      	movs	r0, #0
    rsp->conn_handle = htole16(handle);
   21062:	8026      	strh	r6, [r4, #0]
    *rsplen = sizeof(*rsp);
   21064:	2304      	movs	r3, #4
   21066:	702b      	strb	r3, [r5, #0]
}
   21068:	bd70      	pop	{r4, r5, r6, pc}
        rsp->tmo = 0;
   2106a:	2300      	movs	r3, #0
   2106c:	70a3      	strb	r3, [r4, #2]
   2106e:	70e3      	strb	r3, [r4, #3]
        rc = BLE_ERR_UNK_CONN_ID;
   21070:	2002      	movs	r0, #2
   21072:	e7f6      	b.n	21062 <ble_ll_conn_hci_rd_auth_pyld_tmo+0x20>

00021074 <ble_ll_conn_hci_wr_auth_pyld_tmo>:
    uint32_t min_tmo;
    uint16_t handle;
    uint16_t tmo;
    int rc;

    if (len != sizeof(*cmd)) {
   21074:	2904      	cmp	r1, #4
   21076:	d001      	beq.n	2107c <ble_ll_conn_hci_wr_auth_pyld_tmo+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   21078:	2012      	movs	r0, #18
    }

    rsp->conn_handle = htole16(handle);
    *rsplen = sizeof(*rsp);
    return rc;
}
   2107a:	4770      	bx	lr
{
   2107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2107e:	461d      	mov	r5, r3
   21080:	4616      	mov	r6, r2
   21082:	4604      	mov	r4, r0
    handle = le16toh(cmd->conn_handle);
   21084:	8807      	ldrh	r7, [r0, #0]
    connsm = ble_ll_conn_find_active_conn(handle);
   21086:	4638      	mov	r0, r7
   21088:	f7fd fff0 	bl	1f06c <ble_ll_conn_find_active_conn>
    if (!connsm) {
   2108c:	4603      	mov	r3, r0
   2108e:	b1d8      	cbz	r0, 210c8 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x54>
        tmo = le16toh(cmd->tmo);
   21090:	8862      	ldrh	r2, [r4, #2]
   21092:	b290      	uxth	r0, r2
        min_tmo = (uint32_t)connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   21094:	f8b3 4068 	ldrh.w	r4, [r3, #104]	; 0x68
   21098:	f240 41e2 	movw	r1, #1250	; 0x4e2
   2109c:	fb01 f104 	mul.w	r1, r1, r4
        min_tmo *= (connsm->slave_latency + 1);
   210a0:	f8b3 406a 	ldrh.w	r4, [r3, #106]	; 0x6a
   210a4:	fb04 1101 	mla	r1, r4, r1, r1
        min_tmo /= 10000;
   210a8:	4c0c      	ldr	r4, [pc, #48]	; (210dc <ble_ll_conn_hci_wr_auth_pyld_tmo+0x68>)
   210aa:	fba4 4101 	umull	r4, r1, r4, r1
        if (tmo < min_tmo) {
   210ae:	ebb0 3f51 	cmp.w	r0, r1, lsr #13
   210b2:	d30b      	bcc.n	210cc <ble_ll_conn_hci_wr_auth_pyld_tmo+0x58>
            connsm->auth_pyld_tmo = tmo;
   210b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
   210b8:	f8d3 2114 	ldr.w	r2, [r3, #276]	; 0x114
            if (ble_npl_callout_is_active(&connsm->auth_pyld_timer)) {
   210bc:	b15a      	cbz	r2, 210d6 <ble_ll_conn_hci_wr_auth_pyld_tmo+0x62>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   210be:	4618      	mov	r0, r3
   210c0:	f7fe f9d4 	bl	1f46c <ble_ll_conn_auth_pyld_timer_start>
    rc = BLE_ERR_SUCCESS;
   210c4:	2000      	movs	r0, #0
   210c6:	e002      	b.n	210ce <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
        rc = BLE_ERR_UNK_CONN_ID;
   210c8:	2002      	movs	r0, #2
   210ca:	e000      	b.n	210ce <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
            rc = BLE_ERR_INV_HCI_CMD_PARMS;
   210cc:	2012      	movs	r0, #18
    rsp->conn_handle = htole16(handle);
   210ce:	8037      	strh	r7, [r6, #0]
    *rsplen = sizeof(*rsp);
   210d0:	2302      	movs	r3, #2
   210d2:	702b      	strb	r3, [r5, #0]
}
   210d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rc = BLE_ERR_SUCCESS;
   210d6:	2000      	movs	r0, #0
   210d8:	e7f9      	b.n	210ce <ble_ll_conn_hci_wr_auth_pyld_tmo+0x5a>
   210da:	bf00      	nop
   210dc:	d1b71759 	.word	0xd1b71759

000210e0 <ble_ll_ctrl_enc_allowed_pdu>:
{
    int allowed;

    allowed = 0;

    switch (llid) {
   210e0:	2801      	cmp	r0, #1
   210e2:	d010      	beq.n	21106 <ble_ll_ctrl_enc_allowed_pdu+0x26>
   210e4:	2803      	cmp	r0, #3
   210e6:	d113      	bne.n	21110 <ble_ll_ctrl_enc_allowed_pdu+0x30>
    case BLE_LL_LLID_CTRL:
        switch (opcode) {
   210e8:	3a02      	subs	r2, #2
   210ea:	2a0f      	cmp	r2, #15
   210ec:	d809      	bhi.n	21102 <ble_ll_ctrl_enc_allowed_pdu+0x22>
   210ee:	e8df f002 	tbb	[pc, r2]
   210f2:	1111      	.short	0x1111
   210f4:	08111111 	.word	0x08111111
   210f8:	11110808 	.word	0x11110808
   210fc:	08081108 	.word	0x08081108
   21100:	1108      	.short	0x1108
    allowed = 0;
   21102:	2000      	movs	r0, #0
   21104:	4770      	bx	lr
            allowed = 1;
            break;
        }
        break;
    case BLE_LL_LLID_DATA_FRAG:
        if (len == 0) {
   21106:	b909      	cbnz	r1, 2110c <ble_ll_ctrl_enc_allowed_pdu+0x2c>
            /* Empty PDUs are allowed */
            allowed = 1;
   21108:	2001      	movs	r0, #1
        }
        break;
    }

    return allowed;
}
   2110a:	4770      	bx	lr
    allowed = 0;
   2110c:	2000      	movs	r0, #0
   2110e:	4770      	bx	lr
   21110:	2000      	movs	r0, #0
   21112:	4770      	bx	lr
            allowed = 1;
   21114:	2001      	movs	r0, #1
   21116:	4770      	bx	lr

00021118 <ble_ll_ctrl_rx_start_enc_req>:
{
    int rc;

    /* Only master should receive start enc request */
    rc = BLE_ERR_MAX;
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   21118:	79c3      	ldrb	r3, [r0, #7]
   2111a:	2b01      	cmp	r3, #1
   2111c:	d001      	beq.n	21122 <ble_ll_ctrl_rx_start_enc_req+0xa>
        if (connsm->enc_data.enc_state == CONN_ENC_S_START_ENC_REQ_WAIT) {
            connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
            rc = BLE_LL_CTRL_START_ENC_RSP;
        }
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   2111e:	2007      	movs	r0, #7
   21120:	4770      	bx	lr
        if (connsm->enc_data.enc_state == CONN_ENC_S_START_ENC_REQ_WAIT) {
   21122:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   21126:	2b06      	cmp	r3, #6
   21128:	d001      	beq.n	2112e <ble_ll_ctrl_rx_start_enc_req+0x16>
    rc = BLE_ERR_MAX;
   2112a:	20ff      	movs	r0, #255	; 0xff
    }
    return rc;
}
   2112c:	4770      	bx	lr
            connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_RSP_WAIT;
   2112e:	2307      	movs	r3, #7
   21130:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
            rc = BLE_LL_CTRL_START_ENC_RSP;
   21134:	2006      	movs	r0, #6
   21136:	4770      	bx	lr

00021138 <ble_ll_ctrl_rx_pause_enc_req>:
     * The spec does not say what to do here, but if we receive a pause
     * encryption request and we are not encrypted, what do we do? We
     * ignore it...
     */
    rc = BLE_ERR_MAX;
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   21138:	79c3      	ldrb	r3, [r0, #7]
   2113a:	2b02      	cmp	r3, #2
   2113c:	d001      	beq.n	21142 <ble_ll_ctrl_rx_pause_enc_req+0xa>
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   2113e:	2007      	movs	r0, #7
   21140:	4770      	bx	lr
        (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED)) {
   21142:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) &&
   21146:	2b02      	cmp	r3, #2
   21148:	d001      	beq.n	2114e <ble_ll_ctrl_rx_pause_enc_req+0x16>
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   2114a:	2007      	movs	r0, #7
   2114c:	4770      	bx	lr
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
   2114e:	200b      	movs	r0, #11
    }

    return rc;
}
   21150:	4770      	bx	lr

00021152 <ble_ll_ctrl_rx_pause_enc_rsp>:
static uint8_t
ble_ll_ctrl_rx_pause_enc_rsp(struct ble_ll_conn_sm *connsm)
{
    int rc;

    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   21152:	79c3      	ldrb	r3, [r0, #7]
   21154:	2b01      	cmp	r3, #1
   21156:	d00a      	beq.n	2116e <ble_ll_ctrl_rx_pause_enc_rsp+0x1c>
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
    } else if (connsm->enc_data.enc_state == CONN_ENC_S_PAUSE_ENC_RSP_WAIT) {
   21158:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   2115c:	2b04      	cmp	r3, #4
   2115e:	d001      	beq.n	21164 <ble_ll_ctrl_rx_pause_enc_rsp+0x12>
         * From this moment encryption is paused.
         */
        rc = BLE_ERR_MAX;
        connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
    } else {
        rc = BLE_LL_CTRL_UNKNOWN_RSP;
   21160:	2007      	movs	r0, #7
    }

    return rc;
}
   21162:	4770      	bx	lr
        connsm->enc_data.enc_state = CONN_ENC_S_PAUSED;
   21164:	2305      	movs	r3, #5
   21166:	f880 3118 	strb.w	r3, [r0, #280]	; 0x118
        rc = BLE_ERR_MAX;
   2116a:	20ff      	movs	r0, #255	; 0xff
   2116c:	4770      	bx	lr
        rc = BLE_LL_CTRL_PAUSE_ENC_RSP;
   2116e:	200b      	movs	r0, #11
   21170:	4770      	bx	lr

00021172 <ble_ll_ctrl_proc_rsp_timer_cb>:
{
   21172:	b508      	push	{r3, lr}
    ble_ll_conn_timeout((struct ble_ll_conn_sm *)ble_npl_event_get_arg(ev),
   21174:	2122      	movs	r1, #34	; 0x22
   21176:	6880      	ldr	r0, [r0, #8]
   21178:	f7fe fde2 	bl	1fd40 <ble_ll_conn_timeout>
}
   2117c:	bd08      	pop	{r3, pc}
	...

00021180 <ble_ll_ctrl_start_rsp_timer>:
{
   21180:	b510      	push	{r4, lr}
   21182:	4603      	mov	r3, r0
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   21184:	f100 04bc 	add.w	r4, r0, #188	; 0xbc
   21188:	4a05      	ldr	r2, [pc, #20]	; (211a0 <ble_ll_ctrl_start_rsp_timer+0x20>)
   2118a:	4906      	ldr	r1, [pc, #24]	; (211a4 <ble_ll_ctrl_start_rsp_timer+0x24>)
   2118c:	4620      	mov	r0, r4
   2118e:	f7e8 fd55 	bl	9c3c <os_callout_init>
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   21192:	f44f 51a0 	mov.w	r1, #5120	; 0x1400
   21196:	4620      	mov	r0, r4
   21198:	f7e8 fd7c 	bl	9c94 <os_callout_reset>
}
   2119c:	bd10      	pop	{r4, pc}
   2119e:	bf00      	nop
   211a0:	00021173 	.word	0x00021173
   211a4:	200084e8 	.word	0x200084e8

000211a8 <ble_ll_ctrl_conn_upd_make>:
{
   211a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   211aa:	4604      	mov	r4, r0
   211ac:	460e      	mov	r6, r1
    instant = connsm->event_cntr + connsm->slave_latency + 6 + 1;
   211ae:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
   211b2:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
   211b6:	441d      	add	r5, r3
   211b8:	b2ad      	uxth	r5, r5
   211ba:	3507      	adds	r5, #7
   211bc:	b2ad      	uxth	r5, r5
    if (cp) {
   211be:	2a00      	cmp	r2, #0
   211c0:	d066      	beq.n	21290 <ble_ll_ctrl_conn_upd_make+0xe8>
   211c2:	4611      	mov	r1, r2
        if (cp->offset0 != 0xFFFF) {
   211c4:	8997      	ldrh	r7, [r2, #12]
   211c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   211ca:	429f      	cmp	r7, r3
   211cc:	d05c      	beq.n	21288 <ble_ll_ctrl_conn_upd_make+0xe0>
            new_itvl_usecs = cp->interval_max * BLE_LL_CONN_ITVL_USECS;
   211ce:	8853      	ldrh	r3, [r2, #2]
   211d0:	f240 42e2 	movw	r2, #1250	; 0x4e2
   211d4:	fb02 f303 	mul.w	r3, r2, r3
            old_itvl_usecs = connsm->conn_itvl * BLE_LL_CONN_ITVL_USECS;
   211d8:	f8b0 0068 	ldrh.w	r0, [r0, #104]	; 0x68
   211dc:	fb02 f200 	mul.w	r2, r2, r0
            if ((int16_t)(cp->ref_conn_event_cnt - instant) >= 0) {
   211e0:	8948      	ldrh	r0, [r1, #10]
   211e2:	eba0 0c05 	sub.w	ip, r0, r5
   211e6:	f41c 4f00 	tst.w	ip, #32768	; 0x8000
   211ea:	d140      	bne.n	2126e <ble_ll_ctrl_conn_upd_make+0xc6>
                num_old_ce = cp->ref_conn_event_cnt - instant;
   211ec:	4660      	mov	r0, ip
                dt += (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   211ee:	f240 4ce2 	movw	ip, #1250	; 0x4e2
   211f2:	fb0c f707 	mul.w	r7, ip, r7
   211f6:	fb00 7202 	mla	r2, r0, r2, r7
                dt = dt % new_itvl_usecs;
   211fa:	fbb2 f0f3 	udiv	r0, r2, r3
   211fe:	fb03 2310 	mls	r3, r3, r0, r2
            req->winoffset = dt / BLE_LL_CONN_TX_WIN_USECS;
   21202:	4a2d      	ldr	r2, [pc, #180]	; (212b8 <ble_ll_ctrl_conn_upd_make+0x110>)
   21204:	fba2 2303 	umull	r2, r3, r2, r3
   21208:	0a9b      	lsrs	r3, r3, #10
   2120a:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
        req->interval = cp->interval_max;
   2120e:	884b      	ldrh	r3, [r1, #2]
   21210:	f8a4 317a 	strh.w	r3, [r4, #378]	; 0x17a
        req->timeout = cp->timeout;
   21214:	88cb      	ldrh	r3, [r1, #6]
   21216:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
        req->latency = cp->latency;
   2121a:	888b      	ldrh	r3, [r1, #4]
   2121c:	f8a4 317c 	strh.w	r3, [r4, #380]	; 0x17c
        req->winsize = 1;
   21220:	2301      	movs	r3, #1
   21222:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
    req->instant = instant;
   21226:	f8a4 5180 	strh.w	r5, [r4, #384]	; 0x180
    pyld[0] = req->winsize;
   2122a:	f894 3176 	ldrb.w	r3, [r4, #374]	; 0x176
   2122e:	4630      	mov	r0, r6
   21230:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, req->winoffset);
   21234:	f8b4 1178 	ldrh.w	r1, [r4, #376]	; 0x178
   21238:	f7fa fcd2 	bl	1bbe0 <put_le16>
    put_le16(pyld + 3, req->interval);
   2123c:	f8b4 117a 	ldrh.w	r1, [r4, #378]	; 0x17a
   21240:	1cf0      	adds	r0, r6, #3
   21242:	f7fa fccd 	bl	1bbe0 <put_le16>
    put_le16(pyld + 5, req->latency);
   21246:	f8b4 117c 	ldrh.w	r1, [r4, #380]	; 0x17c
   2124a:	1d70      	adds	r0, r6, #5
   2124c:	f7fa fcc8 	bl	1bbe0 <put_le16>
    put_le16(pyld + 7, req->timeout);
   21250:	f8b4 117e 	ldrh.w	r1, [r4, #382]	; 0x17e
   21254:	1df0      	adds	r0, r6, #7
   21256:	f7fa fcc3 	bl	1bbe0 <put_le16>
    put_le16(pyld + 9, instant);
   2125a:	4629      	mov	r1, r5
   2125c:	f106 0009 	add.w	r0, r6, #9
   21260:	f7fa fcbe 	bl	1bbe0 <put_le16>
    connsm->csmflags.cfbit.conn_update_sched = 1;
   21264:	7863      	ldrb	r3, [r4, #1]
   21266:	f043 0301 	orr.w	r3, r3, #1
   2126a:	7063      	strb	r3, [r4, #1]
}
   2126c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                num_old_ce = instant - cp->ref_conn_event_cnt;
   2126e:	1a28      	subs	r0, r5, r0
                dt = old_itvl_usecs * num_old_ce;
   21270:	fb00 f202 	mul.w	r2, r0, r2
                dt -= (cp->offset0 * BLE_LL_CONN_ITVL_USECS);
   21274:	f240 40e2 	movw	r0, #1250	; 0x4e2
   21278:	fb00 2217 	mls	r2, r0, r7, r2
                dt = dt % new_itvl_usecs;
   2127c:	fbb2 f7f3 	udiv	r7, r2, r3
   21280:	fb03 2217 	mls	r2, r3, r7, r2
                dt = new_itvl_usecs - dt;
   21284:	1a9b      	subs	r3, r3, r2
   21286:	e7bc      	b.n	21202 <ble_ll_ctrl_conn_upd_make+0x5a>
            req->winoffset = 0;
   21288:	2300      	movs	r3, #0
   2128a:	f8a0 3178 	strh.w	r3, [r0, #376]	; 0x178
   2128e:	e7be      	b.n	2120e <ble_ll_ctrl_conn_upd_make+0x66>
        req->interval = hcu->conn_itvl_max;
   21290:	f8b0 316c 	ldrh.w	r3, [r0, #364]	; 0x16c
   21294:	f8a0 317a 	strh.w	r3, [r0, #378]	; 0x17a
        req->timeout = hcu->supervision_timeout;
   21298:	f8b0 3170 	ldrh.w	r3, [r0, #368]	; 0x170
   2129c:	f8a0 317e 	strh.w	r3, [r0, #382]	; 0x17e
        req->latency = hcu->conn_latency;
   212a0:	f8b0 316e 	ldrh.w	r3, [r0, #366]	; 0x16e
   212a4:	f8a0 317c 	strh.w	r3, [r0, #380]	; 0x17c
        req->winoffset = 0;
   212a8:	2300      	movs	r3, #0
   212aa:	f8a0 3178 	strh.w	r3, [r0, #376]	; 0x178
        req->winsize = connsm->tx_win_size;
   212ae:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   212b2:	f880 3176 	strb.w	r3, [r0, #374]	; 0x176
   212b6:	e7b6      	b.n	21226 <ble_ll_ctrl_conn_upd_make+0x7e>
   212b8:	d1b71759 	.word	0xd1b71759

000212bc <ble_ll_ctrl_version_ind_make>:
    put_le16(dptr + 21, offset);
}

static void
ble_ll_ctrl_version_ind_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   212bc:	b510      	push	{r4, lr}
   212be:	460c      	mov	r4, r1
    /* Set flag to denote we have sent/received this */
    connsm->csmflags.cfbit.version_ind_sent = 1;
   212c0:	7843      	ldrb	r3, [r0, #1]
   212c2:	f043 0304 	orr.w	r3, r3, #4
   212c6:	7043      	strb	r3, [r0, #1]

    /* Fill out response */
    pyld[0] = BLE_HCI_VER_BCS;
   212c8:	4608      	mov	r0, r1
   212ca:	2309      	movs	r3, #9
   212cc:	f800 3b01 	strb.w	r3, [r0], #1
    put_le16(pyld + 1, MYNEWT_VAL(BLE_LL_MFRG_ID));
   212d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
   212d4:	f7fa fc84 	bl	1bbe0 <put_le16>
    put_le16(pyld + 3, BLE_LL_SUB_VERS_NR);
   212d8:	2100      	movs	r1, #0
   212da:	1ce0      	adds	r0, r4, #3
   212dc:	f7fa fc80 	bl	1bbe0 <put_le16>
}
   212e0:	bd10      	pop	{r4, pc}

000212e2 <ble_ll_ctrl_datalen_upd_make>:
{
   212e2:	b538      	push	{r3, r4, r5, lr}
   212e4:	4605      	mov	r5, r0
   212e6:	460c      	mov	r4, r1
    put_le16(dptr + 1, connsm->max_rx_octets);
   212e8:	7ac1      	ldrb	r1, [r0, #11]
   212ea:	1c60      	adds	r0, r4, #1
   212ec:	f7fa fc78 	bl	1bbe0 <put_le16>
    put_le16(dptr + 3, connsm->max_rx_time);
   212f0:	8a69      	ldrh	r1, [r5, #18]
   212f2:	1ce0      	adds	r0, r4, #3
   212f4:	f7fa fc74 	bl	1bbe0 <put_le16>
    put_le16(dptr + 5, connsm->max_tx_octets);
   212f8:	7aa9      	ldrb	r1, [r5, #10]
   212fa:	1d60      	adds	r0, r4, #5
   212fc:	f7fa fc70 	bl	1bbe0 <put_le16>
    put_le16(dptr + 7, connsm->max_tx_time);
   21300:	8a29      	ldrh	r1, [r5, #16]
   21302:	1de0      	adds	r0, r4, #7
   21304:	f7fa fc6c 	bl	1bbe0 <put_le16>
}
   21308:	bd38      	pop	{r3, r4, r5, pc}

0002130a <ble_ll_ctrl_conn_param_pdu_make>:
{
   2130a:	b570      	push	{r4, r5, r6, lr}
   2130c:	4605      	mov	r5, r0
   2130e:	460c      	mov	r4, r1
    if (req) {
   21310:	2a00      	cmp	r2, #0
   21312:	d144      	bne.n	2139e <ble_ll_ctrl_conn_param_pdu_make+0x94>
        BLE_LL_ASSERT(hcu->handle != 0);
   21314:	f8b0 3168 	ldrh.w	r3, [r0, #360]	; 0x168
   21318:	2b00      	cmp	r3, #0
   2131a:	d052      	beq.n	213c2 <ble_ll_ctrl_conn_param_pdu_make+0xb8>
        put_le16(dptr, hcu->conn_itvl_min);
   2131c:	f8b0 116a 	ldrh.w	r1, [r0, #362]	; 0x16a
   21320:	4620      	mov	r0, r4
   21322:	f7fa fc5d 	bl	1bbe0 <put_le16>
        put_le16(dptr + 2, hcu->conn_itvl_max);
   21326:	f8b5 116c 	ldrh.w	r1, [r5, #364]	; 0x16c
   2132a:	1ca0      	adds	r0, r4, #2
   2132c:	f7fa fc58 	bl	1bbe0 <put_le16>
        put_le16(dptr + 4, hcu->conn_latency);
   21330:	f8b5 116e 	ldrh.w	r1, [r5, #366]	; 0x16e
   21334:	1d20      	adds	r0, r4, #4
   21336:	f7fa fc53 	bl	1bbe0 <put_le16>
        put_le16(dptr + 6, hcu->supervision_timeout);
   2133a:	f8b5 1170 	ldrh.w	r1, [r5, #368]	; 0x170
   2133e:	1da0      	adds	r0, r4, #6
   21340:	f7fa fc4e 	bl	1bbe0 <put_le16>
    dptr[8] = 0;
   21344:	2300      	movs	r3, #0
   21346:	7223      	strb	r3, [r4, #8]
    put_le16(dptr + 9, connsm->event_cntr);
   21348:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
   2134c:	f104 0009 	add.w	r0, r4, #9
   21350:	f7fa fc46 	bl	1bbe0 <put_le16>
    put_le16(dptr + 11, offset);
   21354:	f64f 71ff 	movw	r1, #65535	; 0xffff
   21358:	f104 000b 	add.w	r0, r4, #11
   2135c:	f7fa fc40 	bl	1bbe0 <put_le16>
    put_le16(dptr + 13, offset);
   21360:	f64f 71ff 	movw	r1, #65535	; 0xffff
   21364:	f104 000d 	add.w	r0, r4, #13
   21368:	f7fa fc3a 	bl	1bbe0 <put_le16>
    put_le16(dptr + 15, offset);
   2136c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   21370:	f104 000f 	add.w	r0, r4, #15
   21374:	f7fa fc34 	bl	1bbe0 <put_le16>
    put_le16(dptr + 17, offset);
   21378:	f64f 71ff 	movw	r1, #65535	; 0xffff
   2137c:	f104 0011 	add.w	r0, r4, #17
   21380:	f7fa fc2e 	bl	1bbe0 <put_le16>
    put_le16(dptr + 19, offset);
   21384:	f64f 71ff 	movw	r1, #65535	; 0xffff
   21388:	f104 0013 	add.w	r0, r4, #19
   2138c:	f7fa fc28 	bl	1bbe0 <put_le16>
    put_le16(dptr + 21, offset);
   21390:	f64f 71ff 	movw	r1, #65535	; 0xffff
   21394:	f104 0015 	add.w	r0, r4, #21
   21398:	f7fa fc22 	bl	1bbe0 <put_le16>
}
   2139c:	bd70      	pop	{r4, r5, r6, pc}
   2139e:	4616      	mov	r6, r2
        put_le16(dptr, req->interval_min);
   213a0:	8811      	ldrh	r1, [r2, #0]
   213a2:	4620      	mov	r0, r4
   213a4:	f7fa fc1c 	bl	1bbe0 <put_le16>
        put_le16(dptr + 2, req->interval_max);
   213a8:	8871      	ldrh	r1, [r6, #2]
   213aa:	1ca0      	adds	r0, r4, #2
   213ac:	f7fa fc18 	bl	1bbe0 <put_le16>
        put_le16(dptr + 4, req->latency);
   213b0:	88b1      	ldrh	r1, [r6, #4]
   213b2:	1d20      	adds	r0, r4, #4
   213b4:	f7fa fc14 	bl	1bbe0 <put_le16>
        put_le16(dptr + 6, req->timeout);
   213b8:	88f1      	ldrh	r1, [r6, #6]
   213ba:	1da0      	adds	r0, r4, #6
   213bc:	f7fa fc10 	bl	1bbe0 <put_le16>
   213c0:	e7c0      	b.n	21344 <ble_ll_ctrl_conn_param_pdu_make+0x3a>
        BLE_LL_ASSERT(hcu->handle != 0);
   213c2:	f7e6 fefd 	bl	81c0 <hal_debugger_connected>
   213c6:	b100      	cbz	r0, 213ca <ble_ll_ctrl_conn_param_pdu_make+0xc0>
   213c8:	be01      	bkpt	0x0001
   213ca:	2300      	movs	r3, #0
   213cc:	461a      	mov	r2, r3
   213ce:	4619      	mov	r1, r3
   213d0:	4618      	mov	r0, r3
   213d2:	f7e8 fa8b 	bl	98ec <__assert_func>
	...

000213d8 <ble_ll_ctrl_chanmap_req_make>:
 * @param connsm    Pointer to connection state machine
 * @param pyld      Pointer to payload of LL control PDU
 */
static void
ble_ll_ctrl_chanmap_req_make(struct ble_ll_conn_sm *connsm, uint8_t *pyld)
{
   213d8:	b510      	push	{r4, lr}
   213da:	4604      	mov	r4, r0
   213dc:	4608      	mov	r0, r1
    /* Copy channel map that host desires into request */
    memcpy(pyld, g_ble_ll_conn_params.master_chan_map, BLE_LL_CONN_CHMAP_LEN);
   213de:	4b0e      	ldr	r3, [pc, #56]	; (21418 <ble_ll_ctrl_chanmap_req_make+0x40>)
   213e0:	681a      	ldr	r2, [r3, #0]
   213e2:	600a      	str	r2, [r1, #0]
   213e4:	791b      	ldrb	r3, [r3, #4]
   213e6:	710b      	strb	r3, [r1, #4]
    memcpy(connsm->req_chanmap, pyld, BLE_LL_CONN_CHMAP_LEN);
   213e8:	680b      	ldr	r3, [r1, #0]
   213ea:	f8c4 3025 	str.w	r3, [r4, #37]	; 0x25
   213ee:	790b      	ldrb	r3, [r1, #4]
   213f0:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29

    /* Place instant into request */
    connsm->chanmap_instant = connsm->event_cntr + connsm->slave_latency + 6 + 1;
   213f4:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
   213f8:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
   213fc:	4419      	add	r1, r3
   213fe:	b289      	uxth	r1, r1
   21400:	3107      	adds	r1, #7
   21402:	b289      	uxth	r1, r1
   21404:	8561      	strh	r1, [r4, #42]	; 0x2a
    put_le16(pyld + BLE_LL_CONN_CHMAP_LEN, connsm->chanmap_instant);
   21406:	3005      	adds	r0, #5
   21408:	f7fa fbea 	bl	1bbe0 <put_le16>

    /* Set scheduled flag */
    connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   2140c:	7863      	ldrb	r3, [r4, #1]
   2140e:	f043 0310 	orr.w	r3, r3, #16
   21412:	7063      	strb	r3, [r4, #1]
}
   21414:	bd10      	pop	{r4, pc}
   21416:	bf00      	nop
   21418:	200087fc 	.word	0x200087fc

0002141c <ble_ll_ctrl_update_features>:
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
}

static void
ble_ll_ctrl_update_features(struct ble_ll_conn_sm *connsm, uint8_t *feat)
{
   2141c:	b410      	push	{r4}
    connsm->conn_features = feat[0];
   2141e:	780b      	ldrb	r3, [r1, #0]
   21420:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
    memcpy(connsm->remote_features, feat + 1, 7);
   21424:	f851 2f01 	ldr.w	r2, [r1, #1]!
   21428:	6402      	str	r2, [r0, #64]	; 0x40
   2142a:	888c      	ldrh	r4, [r1, #4]
   2142c:	798a      	ldrb	r2, [r1, #6]
   2142e:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
   21432:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46

    /* If we received peer's features for the 1st time, we should try DLE */
    if (!connsm->csmflags.cfbit.rxd_features) {
   21436:	78c3      	ldrb	r3, [r0, #3]
   21438:	f013 0f08 	tst.w	r3, #8
   2143c:	d102      	bne.n	21444 <ble_ll_ctrl_update_features+0x28>
            connsm->max_rx_time = BLE_LL_CONN_SUPP_TIME_MAX_CODED;
        }
#endif

        connsm->csmflags.cfbit.pending_initiate_dle = 1;
        connsm->csmflags.cfbit.rxd_features = 1;
   2143e:	f043 0328 	orr.w	r3, r3, #40	; 0x28
   21442:	70c3      	strb	r3, [r0, #3]
    }
}
   21444:	f85d 4b04 	ldr.w	r4, [sp], #4
   21448:	4770      	bx	lr

0002144a <ble_ll_ctrl_rx_feature_req>:

    /*
     * Only accept slave feature requests if we are a master and feature
     * requests if we are a slave.
     */
    if (opcode ==  BLE_LL_CTRL_SLAVE_FEATURE_REQ) {
   2144a:	2b0e      	cmp	r3, #14
   2144c:	d004      	beq.n	21458 <ble_ll_ctrl_rx_feature_req+0xe>
        if (connsm->conn_role != BLE_LL_CONN_ROLE_MASTER) {
            return BLE_LL_CTRL_UNKNOWN_RSP;
        }
    } else {
        /* XXX: not sure this is correct but do it anyway */
        if (connsm->conn_role != BLE_LL_CONN_ROLE_SLAVE) {
   2144e:	79c3      	ldrb	r3, [r0, #7]
   21450:	2b02      	cmp	r3, #2
   21452:	d006      	beq.n	21462 <ble_ll_ctrl_rx_feature_req+0x18>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   21454:	2007      	movs	r0, #7

    put_le64(rspbuf + 1, our_feat);
    rspbuf[1] = connsm->conn_features;

    return rsp_opcode;
}
   21456:	4770      	bx	lr
        if (connsm->conn_role != BLE_LL_CONN_ROLE_MASTER) {
   21458:	79c3      	ldrb	r3, [r0, #7]
   2145a:	2b01      	cmp	r3, #1
   2145c:	d001      	beq.n	21462 <ble_ll_ctrl_rx_feature_req+0x18>
            return BLE_LL_CTRL_UNKNOWN_RSP;
   2145e:	2007      	movs	r0, #7
   21460:	4770      	bx	lr
{
   21462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21466:	4616      	mov	r6, r2
   21468:	460d      	mov	r5, r1
   2146a:	4604      	mov	r4, r0
    our_feat = ble_ll_read_supp_features();
   2146c:	f7fb ff16 	bl	1d29c <ble_ll_read_supp_features>
   21470:	4607      	mov	r7, r0
   21472:	4688      	mov	r8, r1
    ble_ll_ctrl_update_features(connsm, dptr);
   21474:	4629      	mov	r1, r5
   21476:	4620      	mov	r0, r4
   21478:	f7ff ffd0 	bl	2141c <ble_ll_ctrl_update_features>
    connsm->conn_features &= our_feat;
   2147c:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   21480:	403b      	ands	r3, r7
   21482:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    put_le64(rspbuf + 1, our_feat);
   21486:	463a      	mov	r2, r7
   21488:	4643      	mov	r3, r8
   2148a:	1c70      	adds	r0, r6, #1
   2148c:	f7fa fbb6 	bl	1bbfc <put_le64>
    rspbuf[1] = connsm->conn_features;
   21490:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
   21494:	7073      	strb	r3, [r6, #1]
    return rsp_opcode;
   21496:	2009      	movs	r0, #9
}
   21498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002149c <ble_ll_ctrl_enc_req_make>:
{
   2149c:	b570      	push	{r4, r5, r6, lr}
   2149e:	4604      	mov	r4, r0
   214a0:	460d      	mov	r5, r1
    put_le64(dptr, connsm->enc_data.host_rand_num);
   214a2:	f500 7394 	add.w	r3, r0, #296	; 0x128
   214a6:	e9d3 2300 	ldrd	r2, r3, [r3]
   214aa:	4608      	mov	r0, r1
   214ac:	f7fa fba6 	bl	1bbfc <put_le64>
    put_le16(dptr + 8, connsm->enc_data.enc_div);
   214b0:	f8b4 111a 	ldrh.w	r1, [r4, #282]	; 0x11a
   214b4:	f105 0008 	add.w	r0, r5, #8
   214b8:	f7fa fb92 	bl	1bbe0 <put_le16>
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text + 8, 8);
   214bc:	f504 76a8 	add.w	r6, r4, #336	; 0x150
   214c0:	2108      	movs	r1, #8
   214c2:	4630      	mov	r0, r6
   214c4:	f001 fd28 	bl	22f18 <ble_ll_rand_data_get>
    swap_buf(dptr + 10, connsm->enc_data.enc_block.plain_text + 8, 8);
   214c8:	2208      	movs	r2, #8
   214ca:	4631      	mov	r1, r6
   214cc:	f105 000a 	add.w	r0, r5, #10
   214d0:	f7fa fc03 	bl	1bcda <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv, 4);
   214d4:	2104      	movs	r1, #4
   214d6:	f504 7098 	add.w	r0, r4, #304	; 0x130
   214da:	f001 fd1d 	bl	22f18 <ble_ll_rand_data_get>
    memcpy(dptr + 18, connsm->enc_data.iv, 4);
   214de:	f8d4 3130 	ldr.w	r3, [r4, #304]	; 0x130
   214e2:	f8c5 3012 	str.w	r3, [r5, #18]
}
   214e6:	bd70      	pop	{r4, r5, r6, pc}

000214e8 <ble_ll_ctrl_proc_init>:
 * @param connsm
 * @param ctrl_proc
 */
static struct os_mbuf *
ble_ll_ctrl_proc_init(struct ble_ll_conn_sm *connsm, int ctrl_proc)
{
   214e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   214ec:	4606      	mov	r6, r0
   214ee:	460d      	mov	r5, r1
    uint8_t *dptr;
    uint8_t *ctrdata;
    struct os_mbuf *om;

    /* Get an mbuf for the control pdu */
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN, sizeof(struct ble_mbuf_hdr));
   214f0:	2110      	movs	r1, #16
   214f2:	201b      	movs	r0, #27
   214f4:	f7e9 fb8d 	bl	ac12 <os_msys_get_pkthdr>

    if (om) {
   214f8:	4604      	mov	r4, r0
   214fa:	b1d8      	cbz	r0, 21534 <ble_ll_ctrl_proc_init+0x4c>
        /* The control data starts after the opcode (1 byte) */
        dptr = om->om_data;
   214fc:	6807      	ldr	r7, [r0, #0]
        ctrdata = dptr + 1;
   214fe:	f107 0801 	add.w	r8, r7, #1

        switch (ctrl_proc) {
   21502:	2d08      	cmp	r5, #8
   21504:	d851      	bhi.n	215aa <ble_ll_ctrl_proc_init+0xc2>
   21506:	e8df f005 	tbb	[pc, r5]
   2150a:	1805      	.short	0x1805
   2150c:	322c1e44 	.word	0x322c1e44
   21510:	5a37      	.short	0x5a37
   21512:	3e          	.byte	0x3e
   21513:	00          	.byte	0x00
        case BLE_LL_CTRL_PROC_CONN_UPDATE:
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
            ble_ll_ctrl_conn_upd_make(connsm, ctrdata, NULL);
   21514:	2200      	movs	r2, #0
   21516:	4641      	mov	r1, r8
   21518:	4630      	mov	r0, r6
   2151a:	f7ff fe45 	bl	211a8 <ble_ll_ctrl_conn_upd_make>
            opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
   2151e:	2500      	movs	r5, #0
            BLE_LL_ASSERT(0);
            break;
        }

        /* Set llid, length and opcode */
        dptr[0] = opcode;
   21520:	703d      	strb	r5, [r7, #0]
        len = g_ble_ll_ctrl_pkt_lengths[opcode] + 1;
   21522:	4b28      	ldr	r3, [pc, #160]	; (215c4 <ble_ll_ctrl_proc_init+0xdc>)
   21524:	5d5b      	ldrb	r3, [r3, r5]
   21526:	3301      	adds	r3, #1

        /* Add packet to transmit queue of connection */
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   21528:	b2db      	uxtb	r3, r3
   2152a:	2203      	movs	r2, #3
   2152c:	4621      	mov	r1, r4
   2152e:	4630      	mov	r0, r6
   21530:	f7fe fe1e 	bl	20170 <ble_ll_conn_enqueue_pkt>
    }

    return om;
}
   21534:	4620      	mov	r0, r4
   21536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ble_ll_ctrl_chanmap_req_make(connsm, ctrdata);
   2153a:	4641      	mov	r1, r8
   2153c:	4630      	mov	r0, r6
   2153e:	f7ff ff4b 	bl	213d8 <ble_ll_ctrl_chanmap_req_make>
            opcode = BLE_LL_CTRL_CHANNEL_MAP_REQ;
   21542:	2501      	movs	r5, #1
            break;
   21544:	e7ec      	b.n	21520 <ble_ll_ctrl_proc_init+0x38>
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   21546:	79f3      	ldrb	r3, [r6, #7]
   21548:	2b01      	cmp	r3, #1
   2154a:	d008      	beq.n	2155e <ble_ll_ctrl_proc_init+0x76>
                opcode = BLE_LL_CTRL_SLAVE_FEATURE_REQ;
   2154c:	250e      	movs	r5, #14
            put_le64(ctrdata, ble_ll_read_supp_features());
   2154e:	f7fb fea5 	bl	1d29c <ble_ll_read_supp_features>
   21552:	4602      	mov	r2, r0
   21554:	460b      	mov	r3, r1
   21556:	4640      	mov	r0, r8
   21558:	f7fa fb50 	bl	1bbfc <put_le64>
            break;
   2155c:	e7e0      	b.n	21520 <ble_ll_ctrl_proc_init+0x38>
                opcode = BLE_LL_CTRL_FEATURE_REQ;
   2155e:	2508      	movs	r5, #8
   21560:	e7f5      	b.n	2154e <ble_ll_ctrl_proc_init+0x66>
            ble_ll_ctrl_version_ind_make(connsm, ctrdata);
   21562:	4641      	mov	r1, r8
   21564:	4630      	mov	r0, r6
   21566:	f7ff fea9 	bl	212bc <ble_ll_ctrl_version_ind_make>
            opcode = BLE_LL_CTRL_VERSION_IND;
   2156a:	250c      	movs	r5, #12
            break;
   2156c:	e7d8      	b.n	21520 <ble_ll_ctrl_proc_init+0x38>
            ctrdata[0] = connsm->disconnect_reason;
   2156e:	f896 303c 	ldrb.w	r3, [r6, #60]	; 0x3c
   21572:	707b      	strb	r3, [r7, #1]
            opcode = BLE_LL_CTRL_TERMINATE_IND;
   21574:	2502      	movs	r5, #2
            break;
   21576:	e7d3      	b.n	21520 <ble_ll_ctrl_proc_init+0x38>
            ble_ll_ctrl_conn_param_pdu_make(connsm, ctrdata, NULL);
   21578:	2200      	movs	r2, #0
   2157a:	4641      	mov	r1, r8
   2157c:	4630      	mov	r0, r6
   2157e:	f7ff fec4 	bl	2130a <ble_ll_ctrl_conn_param_pdu_make>
            opcode = BLE_LL_CTRL_CONN_PARM_REQ;
   21582:	250f      	movs	r5, #15
            break;
   21584:	e7cc      	b.n	21520 <ble_ll_ctrl_proc_init+0x38>
            ble_ll_ctrl_datalen_upd_make(connsm, dptr);
   21586:	4639      	mov	r1, r7
   21588:	4630      	mov	r0, r6
   2158a:	f7ff feaa 	bl	212e2 <ble_ll_ctrl_datalen_upd_make>
            opcode = BLE_LL_CTRL_LENGTH_REQ;
   2158e:	2514      	movs	r5, #20
            break;
   21590:	e7c6      	b.n	21520 <ble_ll_ctrl_proc_init+0x38>
            if (connsm->enc_data.enc_state == CONN_ENC_S_ENCRYPTED) {
   21592:	f896 3118 	ldrb.w	r3, [r6, #280]	; 0x118
   21596:	2b02      	cmp	r3, #2
   21598:	d101      	bne.n	2159e <ble_ll_ctrl_proc_init+0xb6>
                opcode = BLE_LL_CTRL_PAUSE_ENC_REQ;
   2159a:	250a      	movs	r5, #10
   2159c:	e7c0      	b.n	21520 <ble_ll_ctrl_proc_init+0x38>
                ble_ll_ctrl_enc_req_make(connsm, ctrdata);
   2159e:	4641      	mov	r1, r8
   215a0:	4630      	mov	r0, r6
   215a2:	f7ff ff7b 	bl	2149c <ble_ll_ctrl_enc_req_make>
                opcode = BLE_LL_CTRL_ENC_REQ;
   215a6:	2503      	movs	r5, #3
   215a8:	e7ba      	b.n	21520 <ble_ll_ctrl_proc_init+0x38>
            BLE_LL_ASSERT(0);
   215aa:	f7e6 fe09 	bl	81c0 <hal_debugger_connected>
   215ae:	b100      	cbz	r0, 215b2 <ble_ll_ctrl_proc_init+0xca>
   215b0:	be01      	bkpt	0x0001
   215b2:	2300      	movs	r3, #0
   215b4:	461a      	mov	r2, r3
   215b6:	4619      	mov	r1, r3
   215b8:	4618      	mov	r0, r3
   215ba:	f7e8 f997 	bl	98ec <__assert_func>
            opcode = BLE_LL_CTRL_PING_REQ;
   215be:	2512      	movs	r5, #18
   215c0:	e7ae      	b.n	21520 <ble_ll_ctrl_proc_init+0x38>
   215c2:	bf00      	nop
   215c4:	00029810 	.word	0x00029810

000215c8 <ble_ll_ctrl_rx_conn_update>:
{
   215c8:	b538      	push	{r3, r4, r5, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   215ca:	79c3      	ldrb	r3, [r0, #7]
   215cc:	2b01      	cmp	r3, #1
   215ce:	d03b      	beq.n	21648 <ble_ll_ctrl_rx_conn_update+0x80>
   215d0:	460d      	mov	r5, r1
   215d2:	4604      	mov	r4, r0
    reqdata->winsize = dptr[0];
   215d4:	4608      	mov	r0, r1
   215d6:	f810 3b01 	ldrb.w	r3, [r0], #1
   215da:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
    reqdata->winoffset = get_le16(dptr + 1);
   215de:	f7fa fb20 	bl	1bc22 <get_le16>
   215e2:	f8a4 0178 	strh.w	r0, [r4, #376]	; 0x178
    reqdata->interval = get_le16(dptr + 3);
   215e6:	1ce8      	adds	r0, r5, #3
   215e8:	f7fa fb1b 	bl	1bc22 <get_le16>
   215ec:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
    reqdata->latency = get_le16(dptr + 5);
   215f0:	1d68      	adds	r0, r5, #5
   215f2:	f7fa fb16 	bl	1bc22 <get_le16>
   215f6:	f8a4 017c 	strh.w	r0, [r4, #380]	; 0x17c
    reqdata->timeout = get_le16(dptr + 7);
   215fa:	1de8      	adds	r0, r5, #7
   215fc:	f7fa fb11 	bl	1bc22 <get_le16>
   21600:	f8a4 017e 	strh.w	r0, [r4, #382]	; 0x17e
    reqdata->instant = get_le16(dptr + 9);
   21604:	f105 0009 	add.w	r0, r5, #9
   21608:	f7fa fb0b 	bl	1bc22 <get_le16>
   2160c:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
    conn_events = (reqdata->instant - connsm->event_cntr) & 0xFFFF;
   21610:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   21614:	1ac3      	subs	r3, r0, r3
   21616:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   21618:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   2161c:	4293      	cmp	r3, r2
   2161e:	d80d      	bhi.n	2163c <ble_ll_ctrl_rx_conn_update+0x74>
        connsm->csmflags.cfbit.conn_update_sched = 1;
   21620:	7862      	ldrb	r2, [r4, #1]
   21622:	f042 0201 	orr.w	r2, r2, #1
   21626:	7062      	strb	r2, [r4, #1]
        if (conn_events == 0) {
   21628:	b983      	cbnz	r3, 2164c <ble_ll_ctrl_rx_conn_update+0x84>
            reqdata->winoffset = 0;
   2162a:	f8a4 3178 	strh.w	r3, [r4, #376]	; 0x178
            reqdata->winsize = 0;
   2162e:	f884 3176 	strb.w	r3, [r4, #374]	; 0x176
            reqdata->instant += 1;
   21632:	3001      	adds	r0, #1
   21634:	f8a4 0180 	strh.w	r0, [r4, #384]	; 0x180
    return rsp_opcode;
   21638:	20ff      	movs	r0, #255	; 0xff
   2163a:	e006      	b.n	2164a <ble_ll_ctrl_rx_conn_update+0x82>
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   2163c:	2128      	movs	r1, #40	; 0x28
   2163e:	4620      	mov	r0, r4
   21640:	f7fe fb7e 	bl	1fd40 <ble_ll_conn_timeout>
    return rsp_opcode;
   21644:	20ff      	movs	r0, #255	; 0xff
   21646:	e000      	b.n	2164a <ble_ll_ctrl_rx_conn_update+0x82>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   21648:	2007      	movs	r0, #7
}
   2164a:	bd38      	pop	{r3, r4, r5, pc}
    return rsp_opcode;
   2164c:	20ff      	movs	r0, #255	; 0xff
   2164e:	e7fc      	b.n	2164a <ble_ll_ctrl_rx_conn_update+0x82>

00021650 <ble_ll_ctrl_rx_chanmap_req>:
{
   21650:	b538      	push	{r3, r4, r5, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   21652:	79c3      	ldrb	r3, [r0, #7]
   21654:	2b01      	cmp	r3, #1
   21656:	d01f      	beq.n	21698 <ble_ll_ctrl_rx_chanmap_req+0x48>
   21658:	460d      	mov	r5, r1
   2165a:	4604      	mov	r4, r0
    instant = get_le16(dptr + BLE_LL_CONN_CHMAP_LEN);
   2165c:	1d48      	adds	r0, r1, #5
   2165e:	f7fa fae0 	bl	1bc22 <get_le16>
    conn_events = (instant - connsm->event_cntr) & 0xFFFF;
   21662:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
   21666:	1ac3      	subs	r3, r0, r3
   21668:	b29b      	uxth	r3, r3
    if (conn_events >= 32767) {
   2166a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
   2166e:	4293      	cmp	r3, r2
   21670:	d80c      	bhi.n	2168c <ble_ll_ctrl_rx_chanmap_req+0x3c>
        connsm->chanmap_instant = instant;
   21672:	8560      	strh	r0, [r4, #42]	; 0x2a
        memcpy(connsm->req_chanmap, dptr, BLE_LL_CONN_CHMAP_LEN);
   21674:	682b      	ldr	r3, [r5, #0]
   21676:	f8c4 3025 	str.w	r3, [r4, #37]	; 0x25
   2167a:	792b      	ldrb	r3, [r5, #4]
   2167c:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
        connsm->csmflags.cfbit.chanmap_update_scheduled = 1;
   21680:	7863      	ldrb	r3, [r4, #1]
   21682:	f043 0310 	orr.w	r3, r3, #16
   21686:	7063      	strb	r3, [r4, #1]
    return BLE_ERR_MAX;
   21688:	20ff      	movs	r0, #255	; 0xff
   2168a:	e006      	b.n	2169a <ble_ll_ctrl_rx_chanmap_req+0x4a>
        ble_ll_conn_timeout(connsm, BLE_ERR_INSTANT_PASSED);
   2168c:	2128      	movs	r1, #40	; 0x28
   2168e:	4620      	mov	r0, r4
   21690:	f7fe fb56 	bl	1fd40 <ble_ll_conn_timeout>
    return BLE_ERR_MAX;
   21694:	20ff      	movs	r0, #255	; 0xff
   21696:	e000      	b.n	2169a <ble_ll_ctrl_rx_chanmap_req+0x4a>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   21698:	2007      	movs	r0, #7
}
   2169a:	bd38      	pop	{r3, r4, r5, pc}

0002169c <ble_ll_ctrl_len_proc>:
{
   2169c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   216a0:	4680      	mov	r8, r0
   216a2:	460c      	mov	r4, r1
    ctrl_req.max_rx_bytes = get_le16(dptr);
   216a4:	4608      	mov	r0, r1
   216a6:	f7fa fabc 	bl	1bc22 <get_le16>
   216aa:	4605      	mov	r5, r0
    ctrl_req.max_rx_time = get_le16(dptr + 2);
   216ac:	1ca0      	adds	r0, r4, #2
   216ae:	f7fa fab8 	bl	1bc22 <get_le16>
   216b2:	4606      	mov	r6, r0
    ctrl_req.max_tx_bytes = get_le16(dptr + 4);
   216b4:	1d20      	adds	r0, r4, #4
   216b6:	f7fa fab4 	bl	1bc22 <get_le16>
   216ba:	4607      	mov	r7, r0
    ctrl_req.max_tx_time = get_le16(dptr + 6);
   216bc:	1da0      	adds	r0, r4, #6
   216be:	f7fa fab0 	bl	1bc22 <get_le16>
    if ((ctrl_req.max_rx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   216c2:	2d1a      	cmp	r5, #26
   216c4:	d916      	bls.n	216f4 <ble_ll_ctrl_len_proc+0x58>
   216c6:	f5b6 7fa4 	cmp.w	r6, #328	; 0x148
   216ca:	d316      	bcc.n	216fa <ble_ll_ctrl_len_proc+0x5e>
        (ctrl_req.max_rx_time < BLE_LL_CONN_SUPP_TIME_MIN) ||
   216cc:	2f1a      	cmp	r7, #26
   216ce:	d916      	bls.n	216fe <ble_ll_ctrl_len_proc+0x62>
        (ctrl_req.max_tx_bytes < BLE_LL_CONN_SUPP_BYTES_MIN) ||
   216d0:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   216d4:	d201      	bcs.n	216da <ble_ll_ctrl_len_proc+0x3e>
        rc = 1;
   216d6:	2001      	movs	r0, #1
    return rc;
   216d8:	e00d      	b.n	216f6 <ble_ll_ctrl_len_proc+0x5a>
        connsm->rem_max_rx_time = ctrl_req.max_rx_time;
   216da:	f8a8 6016 	strh.w	r6, [r8, #22]
        connsm->rem_max_tx_time = ctrl_req.max_tx_time;
   216de:	f8a8 0014 	strh.w	r0, [r8, #20]
        connsm->rem_max_rx_octets = ctrl_req.max_rx_bytes;
   216e2:	f888 500d 	strb.w	r5, [r8, #13]
        connsm->rem_max_tx_octets = ctrl_req.max_tx_bytes;
   216e6:	f888 700c 	strb.w	r7, [r8, #12]
        ble_ll_conn_update_eff_data_len(connsm);
   216ea:	4640      	mov	r0, r8
   216ec:	f7fd ff94 	bl	1f618 <ble_ll_conn_update_eff_data_len>
        rc = 0;
   216f0:	2000      	movs	r0, #0
   216f2:	e000      	b.n	216f6 <ble_ll_ctrl_len_proc+0x5a>
        rc = 1;
   216f4:	2001      	movs	r0, #1
}
   216f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        rc = 1;
   216fa:	2001      	movs	r0, #1
   216fc:	e7fb      	b.n	216f6 <ble_ll_ctrl_len_proc+0x5a>
   216fe:	2001      	movs	r0, #1
   21700:	e7f9      	b.n	216f6 <ble_ll_ctrl_len_proc+0x5a>

00021702 <ble_ll_ctrl_rx_enc_req>:
{
   21702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (connsm->conn_role != BLE_LL_CONN_ROLE_SLAVE) {
   21704:	79c3      	ldrb	r3, [r0, #7]
   21706:	2b02      	cmp	r3, #2
   21708:	d001      	beq.n	2170e <ble_ll_ctrl_rx_enc_req+0xc>
        return BLE_LL_CTRL_UNKNOWN_RSP;
   2170a:	2007      	movs	r0, #7
}
   2170c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2170e:	4616      	mov	r6, r2
   21710:	460d      	mov	r5, r1
   21712:	4604      	mov	r4, r0
    connsm->enc_data.enc_state = CONN_ENC_S_LTK_REQ_WAIT;
   21714:	2708      	movs	r7, #8
   21716:	f880 7118 	strb.w	r7, [r0, #280]	; 0x118
    connsm->enc_data.rx_pkt_cntr = 0;
   2171a:	2300      	movs	r3, #0
   2171c:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
    connsm->enc_data.tx_pkt_cntr = 0;
   21720:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    connsm->enc_data.tx_encrypted = 0;
   21724:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
    connsm->enc_data.host_rand_num = get_le64(dptr);
   21728:	4608      	mov	r0, r1
   2172a:	f7fa fa8a 	bl	1bc42 <get_le64>
   2172e:	f504 7394 	add.w	r3, r4, #296	; 0x128
   21732:	e9c3 0100 	strd	r0, r1, [r3]
    connsm->enc_data.enc_div = get_le16(dptr + 8);
   21736:	19e8      	adds	r0, r5, r7
   21738:	f7fa fa73 	bl	1bc22 <get_le16>
   2173c:	f8a4 011a 	strh.w	r0, [r4, #282]	; 0x11a
    swap_buf(connsm->enc_data.enc_block.plain_text + 8, dptr + 10, 8);
   21740:	463a      	mov	r2, r7
   21742:	f105 010a 	add.w	r1, r5, #10
   21746:	f504 70a8 	add.w	r0, r4, #336	; 0x150
   2174a:	f7fa fac6 	bl	1bcda <swap_buf>
    memcpy(connsm->enc_data.iv, dptr + 18, 4);
   2174e:	f8d5 3012 	ldr.w	r3, [r5, #18]
   21752:	f8c4 3130 	str.w	r3, [r4, #304]	; 0x130
    ble_ll_rand_data_get(connsm->enc_data.enc_block.plain_text, 8);
   21756:	f504 75a4 	add.w	r5, r4, #328	; 0x148
   2175a:	4639      	mov	r1, r7
   2175c:	4628      	mov	r0, r5
   2175e:	f001 fbdb 	bl	22f18 <ble_ll_rand_data_get>
    swap_buf(rspdata, connsm->enc_data.enc_block.plain_text, 8);
   21762:	463a      	mov	r2, r7
   21764:	4629      	mov	r1, r5
   21766:	4630      	mov	r0, r6
   21768:	f7fa fab7 	bl	1bcda <swap_buf>
    ble_ll_rand_data_get(connsm->enc_data.iv + 4, 4);
   2176c:	2104      	movs	r1, #4
   2176e:	f504 709a 	add.w	r0, r4, #308	; 0x134
   21772:	f001 fbd1 	bl	22f18 <ble_ll_rand_data_get>
    memcpy(rspdata + 8, connsm->enc_data.iv + 4, 4);
   21776:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
   2177a:	60b3      	str	r3, [r6, #8]
    return BLE_LL_CTRL_ENC_RSP;
   2177c:	2004      	movs	r0, #4
   2177e:	e7c5      	b.n	2170c <ble_ll_ctrl_rx_enc_req+0xa>

00021780 <ble_ll_calc_session_key>:
{
   21780:	b510      	push	{r4, lr}
   21782:	4604      	mov	r4, r0
        if (!ble_hw_encrypt_block(&connsm->enc_data.enc_block)) {
   21784:	f504 709c 	add.w	r0, r4, #312	; 0x138
   21788:	f004 f8d2 	bl	25930 <ble_hw_encrypt_block>
   2178c:	2800      	cmp	r0, #0
   2178e:	d1f9      	bne.n	21784 <ble_ll_calc_session_key+0x4>
}
   21790:	bd10      	pop	{r4, pc}

00021792 <ble_ll_ctrl_rx_enc_rsp>:
{
   21792:	b538      	push	{r3, r4, r5, lr}
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   21794:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   21798:	2b02      	cmp	r3, #2
   2179a:	d000      	beq.n	2179e <ble_ll_ctrl_rx_enc_rsp+0xc>
}
   2179c:	bd38      	pop	{r3, r4, r5, pc}
   2179e:	460d      	mov	r5, r1
   217a0:	4604      	mov	r4, r0
        connsm->enc_data.rx_pkt_cntr = 0;
   217a2:	2300      	movs	r3, #0
   217a4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120
        connsm->enc_data.tx_pkt_cntr = 0;
   217a8:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
        connsm->enc_data.tx_encrypted = 0;
   217ac:	f880 3119 	strb.w	r3, [r0, #281]	; 0x119
        swap_buf(connsm->enc_data.enc_block.plain_text, dptr, 8);
   217b0:	2208      	movs	r2, #8
   217b2:	f500 70a4 	add.w	r0, r0, #328	; 0x148
   217b6:	f7fa fa90 	bl	1bcda <swap_buf>
        memcpy(connsm->enc_data.iv + 4, dptr + 8, 4);
   217ba:	68ab      	ldr	r3, [r5, #8]
   217bc:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
        ble_ll_calc_session_key(connsm);
   217c0:	4620      	mov	r0, r4
   217c2:	f7ff ffdd 	bl	21780 <ble_ll_calc_session_key>
        connsm->enc_data.enc_state = CONN_ENC_S_START_ENC_REQ_WAIT;
   217c6:	2306      	movs	r3, #6
   217c8:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
}
   217cc:	e7e6      	b.n	2179c <ble_ll_ctrl_rx_enc_rsp+0xa>

000217ce <ble_ll_ctrl_enc_allowed_pdu_rx>:
{
   217ce:	b508      	push	{r3, lr}
    llid = rxpdu->om_data[0] & BLE_LL_DATA_HDR_LLID_MASK;
   217d0:	6803      	ldr	r3, [r0, #0]
   217d2:	7818      	ldrb	r0, [r3, #0]
   217d4:	f000 0003 	and.w	r0, r0, #3
    len = rxpdu->om_data[1];
   217d8:	7859      	ldrb	r1, [r3, #1]
    if (llid == BLE_LL_LLID_CTRL) {
   217da:	2803      	cmp	r0, #3
   217dc:	d003      	beq.n	217e6 <ble_ll_ctrl_enc_allowed_pdu_rx+0x18>
        opcode = 0;
   217de:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   217e0:	f7ff fc7e 	bl	210e0 <ble_ll_ctrl_enc_allowed_pdu>
}
   217e4:	bd08      	pop	{r3, pc}
        opcode = rxpdu->om_data[2];
   217e6:	789a      	ldrb	r2, [r3, #2]
   217e8:	e7fa      	b.n	217e0 <ble_ll_ctrl_enc_allowed_pdu_rx+0x12>

000217ea <ble_ll_ctrl_enc_allowed_pdu_tx>:
{
   217ea:	b508      	push	{r3, lr}
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   217ec:	7ac3      	ldrb	r3, [r0, #11]
   217ee:	f003 0303 	and.w	r3, r3, #3
    len = ble_hdr->txinfo.pyld_len;
   217f2:	7a81      	ldrb	r1, [r0, #10]
    if (llid == BLE_LL_LLID_CTRL) {
   217f4:	2b03      	cmp	r3, #3
   217f6:	d004      	beq.n	21802 <ble_ll_ctrl_enc_allowed_pdu_tx+0x18>
        opcode = 0;
   217f8:	2200      	movs	r2, #0
    return ble_ll_ctrl_enc_allowed_pdu(llid, len, opcode);
   217fa:	4618      	mov	r0, r3
   217fc:	f7ff fc70 	bl	210e0 <ble_ll_ctrl_enc_allowed_pdu>
}
   21800:	bd08      	pop	{r3, pc}
        opcode = m->om_data[0];
   21802:	f850 2c10 	ldr.w	r2, [r0, #-16]
   21806:	7812      	ldrb	r2, [r2, #0]
   21808:	e7f7      	b.n	217fa <ble_ll_ctrl_enc_allowed_pdu_tx+0x10>

0002180a <ble_ll_ctrl_is_start_enc_rsp>:
    llid = ble_hdr->txinfo.hdr_byte & BLE_LL_DATA_HDR_LLID_MASK;
   2180a:	7ec3      	ldrb	r3, [r0, #27]
   2180c:	f003 0303 	and.w	r3, r3, #3
    if (llid == BLE_LL_LLID_CTRL) {
   21810:	2b03      	cmp	r3, #3
   21812:	d001      	beq.n	21818 <ble_ll_ctrl_is_start_enc_rsp+0xe>
    is_start_enc_rsp = 0;
   21814:	2000      	movs	r0, #0
   21816:	4770      	bx	lr
        opcode = txpdu->om_data[0];
   21818:	6803      	ldr	r3, [r0, #0]
   2181a:	781b      	ldrb	r3, [r3, #0]
        if (opcode == BLE_LL_CTRL_START_ENC_RSP) {
   2181c:	2b06      	cmp	r3, #6
   2181e:	d001      	beq.n	21824 <ble_ll_ctrl_is_start_enc_rsp+0x1a>
    is_start_enc_rsp = 0;
   21820:	2000      	movs	r0, #0
   21822:	4770      	bx	lr
            is_start_enc_rsp = 1;
   21824:	2001      	movs	r0, #1
}
   21826:	4770      	bx	lr

00021828 <ble_ll_ctrl_start_enc_send>:
{
   21828:	b510      	push	{r4, lr}
   2182a:	4604      	mov	r4, r0
    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   2182c:	2110      	movs	r1, #16
   2182e:	201b      	movs	r0, #27
   21830:	f7e9 f9ef 	bl	ac12 <os_msys_get_pkthdr>
    if (om) {
   21834:	b1b0      	cbz	r0, 21864 <ble_ll_ctrl_start_enc_send+0x3c>
   21836:	4601      	mov	r1, r0
        om->om_data[0] = BLE_LL_CTRL_START_ENC_REQ;
   21838:	6803      	ldr	r3, [r0, #0]
   2183a:	2205      	movs	r2, #5
   2183c:	701a      	strb	r2, [r3, #0]
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, 1);
   2183e:	2301      	movs	r3, #1
   21840:	2203      	movs	r2, #3
   21842:	4620      	mov	r0, r4
   21844:	f7fe fc94 	bl	20170 <ble_ll_conn_enqueue_pkt>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   21848:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
   2184c:	2bff      	cmp	r3, #255	; 0xff
   2184e:	d001      	beq.n	21854 <ble_ll_ctrl_start_enc_send+0x2c>
        rc = 0;
   21850:	2000      	movs	r0, #0
}
   21852:	bd10      	pop	{r4, pc}
            connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_ENCRYPT;
   21854:	2302      	movs	r3, #2
   21856:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
            ble_ll_ctrl_start_rsp_timer(connsm);
   2185a:	4620      	mov	r0, r4
   2185c:	f7ff fc90 	bl	21180 <ble_ll_ctrl_start_rsp_timer>
        rc = 0;
   21860:	2000      	movs	r0, #0
   21862:	e7f6      	b.n	21852 <ble_ll_ctrl_start_enc_send+0x2a>
        rc = -1;
   21864:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   21868:	e7f3      	b.n	21852 <ble_ll_ctrl_start_enc_send+0x2a>

0002186a <ble_ll_ctrl_conn_param_reply>:
{
   2186a:	b508      	push	{r3, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   2186c:	79c3      	ldrb	r3, [r0, #7]
   2186e:	2b02      	cmp	r3, #2
   21870:	d004      	beq.n	2187c <ble_ll_ctrl_conn_param_reply+0x12>
        ble_ll_ctrl_conn_upd_make(connsm, rsp + 1, req);
   21872:	3101      	adds	r1, #1
   21874:	f7ff fc98 	bl	211a8 <ble_ll_ctrl_conn_upd_make>
        rsp_opcode = BLE_LL_CTRL_CONN_UPDATE_IND;
   21878:	2000      	movs	r0, #0
}
   2187a:	bd08      	pop	{r3, pc}
        ble_ll_ctrl_conn_param_pdu_make(connsm, rsp + 1, req);
   2187c:	3101      	adds	r1, #1
   2187e:	f7ff fd44 	bl	2130a <ble_ll_ctrl_conn_param_pdu_make>
        rsp_opcode = BLE_LL_CTRL_CONN_PARM_RSP;
   21882:	2010      	movs	r0, #16
   21884:	e7f9      	b.n	2187a <ble_ll_ctrl_conn_param_reply+0x10>

00021886 <ble_ll_ctrl_conn_param_pdu_proc>:
{
   21886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2188a:	4604      	mov	r4, r0
   2188c:	460d      	mov	r5, r1
   2188e:	4617      	mov	r7, r2
   21890:	461e      	mov	r6, r3
    req = &connsm->conn_cp;
   21892:	f500 78c1 	add.w	r8, r0, #386	; 0x182
    req->interval_min = get_le16(dptr);
   21896:	4608      	mov	r0, r1
   21898:	f7fa f9c3 	bl	1bc22 <get_le16>
   2189c:	f8a4 0182 	strh.w	r0, [r4, #386]	; 0x182
    req->interval_max = get_le16(dptr + 2);
   218a0:	1ca8      	adds	r0, r5, #2
   218a2:	f7fa f9be 	bl	1bc22 <get_le16>
   218a6:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
    req->latency = get_le16(dptr + 4);
   218aa:	1d28      	adds	r0, r5, #4
   218ac:	f7fa f9b9 	bl	1bc22 <get_le16>
   218b0:	f8a4 0186 	strh.w	r0, [r4, #390]	; 0x186
    req->timeout = get_le16(dptr + 6);
   218b4:	1da8      	adds	r0, r5, #6
   218b6:	f7fa f9b4 	bl	1bc22 <get_le16>
   218ba:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
    req->pref_periodicity = dptr[8];
   218be:	7a2b      	ldrb	r3, [r5, #8]
   218c0:	f884 318a 	strb.w	r3, [r4, #394]	; 0x18a
    req->ref_conn_event_cnt  = get_le16(dptr + 9);
   218c4:	f105 0009 	add.w	r0, r5, #9
   218c8:	f7fa f9ab 	bl	1bc22 <get_le16>
   218cc:	f8a4 018c 	strh.w	r0, [r4, #396]	; 0x18c
    req->offset0 = get_le16(dptr + 11);
   218d0:	f105 000b 	add.w	r0, r5, #11
   218d4:	f7fa f9a5 	bl	1bc22 <get_le16>
   218d8:	f8a4 018e 	strh.w	r0, [r4, #398]	; 0x18e
    req->offset1 = get_le16(dptr + 13);
   218dc:	f105 000d 	add.w	r0, r5, #13
   218e0:	f7fa f99f 	bl	1bc22 <get_le16>
   218e4:	f8a4 0190 	strh.w	r0, [r4, #400]	; 0x190
    req->offset2 = get_le16(dptr + 15);
   218e8:	f105 000f 	add.w	r0, r5, #15
   218ec:	f7fa f999 	bl	1bc22 <get_le16>
   218f0:	f8a4 0192 	strh.w	r0, [r4, #402]	; 0x192
    req->offset3 = get_le16(dptr + 17);
   218f4:	f105 0011 	add.w	r0, r5, #17
   218f8:	f7fa f993 	bl	1bc22 <get_le16>
   218fc:	f8a4 0194 	strh.w	r0, [r4, #404]	; 0x194
    req->offset4 = get_le16(dptr + 19);
   21900:	f105 0013 	add.w	r0, r5, #19
   21904:	f7fa f98d 	bl	1bc22 <get_le16>
   21908:	f8a4 0196 	strh.w	r0, [r4, #406]	; 0x196
    req->offset5 = get_le16(dptr + 21);
   2190c:	f105 0015 	add.w	r0, r5, #21
   21910:	f7fa f987 	bl	1bc22 <get_le16>
   21914:	f8a4 0198 	strh.w	r0, [r4, #408]	; 0x198
    rc = ble_ll_conn_hci_chk_conn_params(req->interval_min,
   21918:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
   2191c:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   21920:	f8b4 1184 	ldrh.w	r1, [r4, #388]	; 0x184
   21924:	f8b4 0182 	ldrh.w	r0, [r4, #386]	; 0x182
   21928:	f7fe fe4c 	bl	205c4 <ble_ll_conn_hci_chk_conn_params>
    if (rc) {
   2192c:	2800      	cmp	r0, #0
   2192e:	d156      	bne.n	219de <ble_ll_ctrl_conn_param_pdu_proc+0x158>
    if (opcode == BLE_LL_CTRL_CONN_PARM_REQ) {
   21930:	2e0f      	cmp	r6, #15
   21932:	d00b      	beq.n	2194c <ble_ll_ctrl_conn_param_pdu_proc+0xc6>
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) ||
   21934:	79e3      	ldrb	r3, [r4, #7]
   21936:	2b02      	cmp	r3, #2
   21938:	d024      	beq.n	21984 <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
   2193a:	2e10      	cmp	r6, #16
   2193c:	d022      	beq.n	21984 <ble_ll_ctrl_conn_param_pdu_proc+0xfe>
        if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)){
   2193e:	2006      	movs	r0, #6
   21940:	f001 f8c8 	bl	22ad4 <ble_ll_hci_is_le_event_enabled>
   21944:	2800      	cmp	r0, #0
   21946:	d13e      	bne.n	219c6 <ble_ll_ctrl_conn_param_pdu_proc+0x140>
            ble_err = BLE_ERR_UNSUPP_REM_FEATURE;
   21948:	231a      	movs	r3, #26
   2194a:	e049      	b.n	219e0 <ble_ll_ctrl_conn_param_pdu_proc+0x15a>
        if ((connsm->conn_itvl >= req->interval_min) &&
   2194c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
   21950:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
   21954:	4293      	cmp	r3, r2
   21956:	d3ed      	bcc.n	21934 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->conn_itvl <= req->interval_max) &&
   21958:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
        if ((connsm->conn_itvl >= req->interval_min) &&
   2195c:	4293      	cmp	r3, r2
   2195e:	d8e9      	bhi.n	21934 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->supervision_tmo == req->timeout) &&
   21960:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   21964:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
            (connsm->conn_itvl <= req->interval_max) &&
   21968:	429a      	cmp	r2, r3
   2196a:	d1e3      	bne.n	21934 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
            (connsm->slave_latency == req->latency)) {
   2196c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   21970:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
            (connsm->supervision_tmo == req->timeout) &&
   21974:	429a      	cmp	r2, r3
   21976:	d1dd      	bne.n	21934 <ble_ll_ctrl_conn_param_pdu_proc+0xae>
        rsp_opcode = ble_ll_ctrl_conn_param_reply(connsm, rspbuf, req);
   21978:	4642      	mov	r2, r8
   2197a:	4639      	mov	r1, r7
   2197c:	4620      	mov	r0, r4
   2197e:	f7ff ff74 	bl	2186a <ble_ll_ctrl_conn_param_reply>
   21982:	e030      	b.n	219e6 <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        if (hcu->handle != 0) {
   21984:	f8b4 3168 	ldrh.w	r3, [r4, #360]	; 0x168
   21988:	2b00      	cmp	r3, #0
   2198a:	d0d8      	beq.n	2193e <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   2198c:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   21990:	f8b4 216a 	ldrh.w	r2, [r4, #362]	; 0x16a
   21994:	4293      	cmp	r3, r2
   21996:	d3d2      	bcc.n	2193e <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_min > hcu->conn_itvl_max) ||
   21998:	f8b4 116c 	ldrh.w	r1, [r4, #364]	; 0x16c
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   2199c:	428b      	cmp	r3, r1
   2199e:	d8ce      	bhi.n	2193e <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   219a0:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
                  (req->interval_min > hcu->conn_itvl_max) ||
   219a4:	429a      	cmp	r2, r3
   219a6:	d8ca      	bhi.n	2193e <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->interval_max < hcu->conn_itvl_min) ||
   219a8:	4299      	cmp	r1, r3
   219aa:	d3c8      	bcc.n	2193e <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->latency != hcu->conn_latency) ||
   219ac:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   219b0:	f8b4 316e 	ldrh.w	r3, [r4, #366]	; 0x16e
                  (req->interval_max > hcu->conn_itvl_max) ||
   219b4:	429a      	cmp	r2, r3
   219b6:	d1c2      	bne.n	2193e <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
                  (req->timeout != hcu->supervision_timeout))) {
   219b8:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
   219bc:	f8b4 3170 	ldrh.w	r3, [r4, #368]	; 0x170
            if (!((req->interval_min < hcu->conn_itvl_min) ||
   219c0:	429a      	cmp	r2, r3
   219c2:	d1bc      	bne.n	2193e <ble_ll_ctrl_conn_param_pdu_proc+0xb8>
   219c4:	e7d8      	b.n	21978 <ble_ll_ctrl_conn_param_pdu_proc+0xf2>
        ble_ll_hci_ev_rem_conn_parm_req(connsm, req);
   219c6:	4641      	mov	r1, r8
   219c8:	4620      	mov	r0, r4
   219ca:	f001 f961 	bl	22c90 <ble_ll_hci_ev_rem_conn_parm_req>
        connsm->host_reply_opcode = opcode;
   219ce:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
        connsm->csmflags.cfbit.awaiting_host_reply = 1;
   219d2:	7823      	ldrb	r3, [r4, #0]
   219d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   219d8:	7023      	strb	r3, [r4, #0]
        rsp_opcode = 255;
   219da:	20ff      	movs	r0, #255	; 0xff
   219dc:	e003      	b.n	219e6 <ble_ll_ctrl_conn_param_pdu_proc+0x160>
        ble_err = BLE_ERR_INV_LMP_LL_PARM;
   219de:	231e      	movs	r3, #30
        rspbuf[1] = opcode;
   219e0:	707e      	strb	r6, [r7, #1]
        rspbuf[2] = ble_err;
   219e2:	70bb      	strb	r3, [r7, #2]
        rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   219e4:	2011      	movs	r0, #17
}
   219e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000219ea <ble_ll_ctrl_rx_conn_param_rsp>:
{
   219ea:	b508      	push	{r3, lr}
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   219ec:	79c3      	ldrb	r3, [r0, #7]
   219ee:	2b02      	cmp	r3, #2
   219f0:	d011      	beq.n	21a16 <ble_ll_ctrl_rx_conn_param_rsp+0x2c>
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   219f2:	7803      	ldrb	r3, [r0, #0]
   219f4:	f013 0f40 	tst.w	r3, #64	; 0x40
   219f8:	d003      	beq.n	21a02 <ble_ll_ctrl_rx_conn_param_rsp+0x18>
        connsm->csmflags.cfbit.awaiting_host_reply = 0;
   219fa:	7803      	ldrb	r3, [r0, #0]
   219fc:	f36f 1386 	bfc	r3, #6, #1
   21a00:	7003      	strb	r3, [r0, #0]
    if (!IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   21a02:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   21a06:	f013 0f40 	tst.w	r3, #64	; 0x40
   21a0a:	d006      	beq.n	21a1a <ble_ll_ctrl_rx_conn_param_rsp+0x30>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   21a0c:	2310      	movs	r3, #16
   21a0e:	f7ff ff3a 	bl	21886 <ble_ll_ctrl_conn_param_pdu_proc>
   21a12:	b2c0      	uxtb	r0, r0
}
   21a14:	bd08      	pop	{r3, pc}
        return BLE_LL_CTRL_UNKNOWN_RSP;
   21a16:	2007      	movs	r0, #7
   21a18:	e7fc      	b.n	21a14 <ble_ll_ctrl_rx_conn_param_rsp+0x2a>
        return BLE_ERR_MAX;
   21a1a:	20ff      	movs	r0, #255	; 0xff
   21a1c:	e7fa      	b.n	21a14 <ble_ll_ctrl_rx_conn_param_rsp+0x2a>

00021a1e <ble_ll_ctrl_is_terminate_ind>:
ble_ll_ctrl_is_terminate_ind(uint8_t hdr, uint8_t opcode)
{
    int rc;

    rc = 0;
    if ((hdr & BLE_LL_DATA_HDR_LLID_MASK) == BLE_LL_LLID_CTRL) {
   21a1e:	f000 0003 	and.w	r0, r0, #3
   21a22:	2803      	cmp	r0, #3
   21a24:	d001      	beq.n	21a2a <ble_ll_ctrl_is_terminate_ind+0xc>
    rc = 0;
   21a26:	2000      	movs	r0, #0
   21a28:	4770      	bx	lr
        if (opcode == BLE_LL_CTRL_TERMINATE_IND) {
   21a2a:	2902      	cmp	r1, #2
   21a2c:	d001      	beq.n	21a32 <ble_ll_ctrl_is_terminate_ind+0x14>
    rc = 0;
   21a2e:	2000      	movs	r0, #0
   21a30:	4770      	bx	lr
            rc = 1;
   21a32:	2001      	movs	r0, #1
        }
    }
    return rc;
}
   21a34:	4770      	bx	lr

00021a36 <ble_ll_ctrl_terminate_start>:
 *
 * @param connsm
 */
void
ble_ll_ctrl_terminate_start(struct ble_ll_conn_sm *connsm)
{
   21a36:	b570      	push	{r4, r5, r6, lr}
    int ctrl_proc;
    uint32_t usecs;
    struct os_mbuf *om;

    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   21a38:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   21a3c:	b1bb      	cbz	r3, 21a6e <ble_ll_ctrl_terminate_start+0x38>
   21a3e:	4604      	mov	r4, r0

    ctrl_proc = BLE_LL_CTRL_PROC_TERMINATE;
    om = ble_ll_ctrl_proc_init(connsm, ctrl_proc);
   21a40:	2105      	movs	r1, #5
   21a42:	f7ff fd51 	bl	214e8 <ble_ll_ctrl_proc_init>
    if (om) {
   21a46:	b188      	cbz	r0, 21a6c <ble_ll_ctrl_terminate_start+0x36>
        CONN_F_TERMINATE_STARTED(connsm) = 1;
   21a48:	7823      	ldrb	r3, [r4, #0]
   21a4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   21a4e:	7023      	strb	r3, [r4, #0]

        /* Set terminate "timeout" */
        usecs = connsm->supervision_tmo * BLE_HCI_CONN_SPVN_TMO_UNITS * 1000;
   21a50:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
   21a54:	f242 7610 	movw	r6, #10000	; 0x2710
   21a58:	fb06 f603 	mul.w	r6, r6, r3
        connsm->terminate_timeout = os_cputime_get32() +
   21a5c:	f7fa f977 	bl	1bd4e <os_cputime_get32>
   21a60:	4605      	mov	r5, r0
            os_cputime_usecs_to_ticks(usecs);
   21a62:	4630      	mov	r0, r6
   21a64:	f7fa f98a 	bl	1bd7c <os_cputime_usecs_to_ticks>
        connsm->terminate_timeout = os_cputime_get32() +
   21a68:	4428      	add	r0, r5
   21a6a:	6620      	str	r0, [r4, #96]	; 0x60
    }
}
   21a6c:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(connsm->disconnect_reason != 0);
   21a6e:	f7e6 fba7 	bl	81c0 <hal_debugger_connected>
   21a72:	b100      	cbz	r0, 21a76 <ble_ll_ctrl_terminate_start+0x40>
   21a74:	be01      	bkpt	0x0001
   21a76:	2300      	movs	r3, #0
   21a78:	461a      	mov	r2, r3
   21a7a:	4619      	mov	r1, r3
   21a7c:	4618      	mov	r0, r3
   21a7e:	f7e7 ff35 	bl	98ec <__assert_func>

00021a82 <ble_ll_ctrl_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_proc_start(struct ble_ll_conn_sm *connsm, int ctrl_proc)
{
   21a82:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   21a84:	2905      	cmp	r1, #5
   21a86:	d00d      	beq.n	21aa4 <ble_ll_ctrl_proc_start+0x22>
   21a88:	4604      	mov	r4, r0
   21a8a:	460d      	mov	r5, r1

    om = NULL;
    if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) {
   21a8c:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   21a90:	2bff      	cmp	r3, #255	; 0xff
   21a92:	d011      	beq.n	21ab8 <ble_ll_ctrl_proc_start+0x36>
            }
        }
    }

    /* Set bitmask denoting control procedure is pending */
    connsm->pending_ctrl_procs |= (1 << ctrl_proc);
   21a94:	2101      	movs	r1, #1
   21a96:	40a9      	lsls	r1, r5
   21a98:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   21a9c:	4319      	orrs	r1, r3
   21a9e:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
}
   21aa2:	bd38      	pop	{r3, r4, r5, pc}
    BLE_LL_ASSERT(ctrl_proc != BLE_LL_CTRL_PROC_TERMINATE);
   21aa4:	f7e6 fb8c 	bl	81c0 <hal_debugger_connected>
   21aa8:	b100      	cbz	r0, 21aac <ble_ll_ctrl_proc_start+0x2a>
   21aaa:	be01      	bkpt	0x0001
   21aac:	2300      	movs	r3, #0
   21aae:	461a      	mov	r2, r3
   21ab0:	4619      	mov	r1, r3
   21ab2:	4618      	mov	r0, r3
   21ab4:	f7e7 ff1a 	bl	98ec <__assert_func>
        om = ble_ll_ctrl_proc_init(connsm, ctrl_proc);
   21ab8:	f7ff fd16 	bl	214e8 <ble_ll_ctrl_proc_init>
        if (om) {
   21abc:	2800      	cmp	r0, #0
   21abe:	d0e9      	beq.n	21a94 <ble_ll_ctrl_proc_start+0x12>
            connsm->cur_ctrl_proc = ctrl_proc;
   21ac0:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
            if (ctrl_proc != BLE_LL_CTRL_PROC_CHAN_MAP_UPD) {
   21ac4:	2d01      	cmp	r5, #1
   21ac6:	d0e5      	beq.n	21a94 <ble_ll_ctrl_proc_start+0x12>
                ble_ll_ctrl_start_rsp_timer(connsm);
   21ac8:	4620      	mov	r0, r4
   21aca:	f7ff fb59 	bl	21180 <ble_ll_ctrl_start_rsp_timer>
   21ace:	e7e1      	b.n	21a94 <ble_ll_ctrl_proc_start+0x12>

00021ad0 <ble_ll_ctrl_initiate_dle>:
{
   21ad0:	b508      	push	{r3, lr}
    if (!(connsm->conn_features & BLE_LL_FEAT_DATA_LEN_EXT)) {
   21ad2:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   21ad6:	f013 0f20 	tst.w	r3, #32
   21ada:	d010      	beq.n	21afe <ble_ll_ctrl_initiate_dle+0x2e>
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   21adc:	7a83      	ldrb	r3, [r0, #10]
   21ade:	2b1b      	cmp	r3, #27
   21ae0:	d80a      	bhi.n	21af8 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   21ae2:	7ac3      	ldrb	r3, [r0, #11]
    if ((connsm->max_tx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   21ae4:	2b1b      	cmp	r3, #27
   21ae6:	d807      	bhi.n	21af8 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   21ae8:	8a03      	ldrh	r3, [r0, #16]
        (connsm->max_rx_octets <= BLE_LL_CONN_SUPP_BYTES_MIN) &&
   21aea:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   21aee:	d803      	bhi.n	21af8 <ble_ll_ctrl_initiate_dle+0x28>
        (connsm->max_rx_time <= BLE_LL_CONN_SUPP_TIME_MIN)) {
   21af0:	8a43      	ldrh	r3, [r0, #18]
        (connsm->max_tx_time <= BLE_LL_CONN_SUPP_TIME_MIN) &&
   21af2:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   21af6:	d902      	bls.n	21afe <ble_ll_ctrl_initiate_dle+0x2e>
    ble_ll_ctrl_proc_start(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   21af8:	2108      	movs	r1, #8
   21afa:	f7ff ffc2 	bl	21a82 <ble_ll_ctrl_proc_start>
}
   21afe:	bd08      	pop	{r3, pc}

00021b00 <ble_ll_ctrl_chk_proc_start>:
 *
 * @param connsm Pointer to connection state machine.
 */
void
ble_ll_ctrl_chk_proc_start(struct ble_ll_conn_sm *connsm)
{
   21b00:	b538      	push	{r3, r4, r5, lr}
   21b02:	4604      	mov	r4, r0

    /*
     * If we are terminating, dont start any new procedures but start
     * terminate if needed
     */
    if (connsm->disconnect_reason) {
   21b04:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   21b08:	b133      	cbz	r3, 21b18 <ble_ll_ctrl_chk_proc_start+0x18>
        if (!CONN_F_TERMINATE_STARTED(connsm)) {
   21b0a:	f990 3000 	ldrsb.w	r3, [r0]
   21b0e:	2b00      	cmp	r3, #0
   21b10:	db06      	blt.n	21b20 <ble_ll_ctrl_chk_proc_start+0x20>
            /*
             * If the terminate procedure has not started it means we were not
             * able to start it right away (no control pdu was available).
             * Start it now. No need to start any other procedures.
             */
            ble_ll_ctrl_terminate_start(connsm);
   21b12:	f7ff ff90 	bl	21a36 <ble_ll_ctrl_terminate_start>
   21b16:	e003      	b.n	21b20 <ble_ll_ctrl_chk_proc_start+0x20>
        }
        return;
    }

    /* If there is a running procedure or no pending, do nothing */
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   21b18:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   21b1c:	2bff      	cmp	r3, #255	; 0xff
   21b1e:	d000      	beq.n	21b22 <ble_ll_ctrl_chk_proc_start+0x22>
                    break;
                }
            }
        }
    }
}
   21b20:	bd38      	pop	{r3, r4, r5, pc}
        (connsm->pending_ctrl_procs != 0)) {
   21b22:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
    if ((connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_IDLE) &&
   21b26:	2b00      	cmp	r3, #0
   21b28:	d0fa      	beq.n	21b20 <ble_ll_ctrl_chk_proc_start+0x20>
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   21b2a:	2500      	movs	r5, #0
   21b2c:	2d0b      	cmp	r5, #11
   21b2e:	dcf7      	bgt.n	21b20 <ble_ll_ctrl_chk_proc_start+0x20>
            if (IS_PENDING_CTRL_PROC(connsm, i)) {
   21b30:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   21b34:	412b      	asrs	r3, r5
   21b36:	f013 0f01 	tst.w	r3, #1
   21b3a:	d017      	beq.n	21b6c <ble_ll_ctrl_chk_proc_start+0x6c>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   21b3c:	2d04      	cmp	r5, #4
   21b3e:	d004      	beq.n	21b4a <ble_ll_ctrl_chk_proc_start+0x4a>
                    ble_ll_ctrl_proc_start(connsm, i);
   21b40:	4629      	mov	r1, r5
   21b42:	4620      	mov	r0, r4
   21b44:	f7ff ff9d 	bl	21a82 <ble_ll_ctrl_proc_start>
                    break;
   21b48:	e7ea      	b.n	21b20 <ble_ll_ctrl_chk_proc_start+0x20>
                if ((i == BLE_LL_CTRL_PROC_VERSION_XCHG) &&
   21b4a:	7863      	ldrb	r3, [r4, #1]
   21b4c:	f013 0f08 	tst.w	r3, #8
   21b50:	d0f6      	beq.n	21b40 <ble_ll_ctrl_chk_proc_start+0x40>
                    ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   21b52:	2100      	movs	r1, #0
   21b54:	4620      	mov	r0, r4
   21b56:	f001 f96a 	bl	22e2e <ble_ll_hci_ev_rd_rem_ver>
                    CLR_PENDING_CTRL_PROC(connsm, i);
   21b5a:	2301      	movs	r3, #1
   21b5c:	fa03 f205 	lsl.w	r2, r3, r5
   21b60:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   21b64:	ea23 0302 	bic.w	r3, r3, r2
   21b68:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        for (i = 0; i < BLE_LL_CTRL_PROC_NUM; ++i) {
   21b6c:	3501      	adds	r5, #1
   21b6e:	e7dd      	b.n	21b2c <ble_ll_ctrl_chk_proc_start+0x2c>

00021b70 <ble_ll_ctrl_proc_stop>:
{
   21b70:	b538      	push	{r3, r4, r5, lr}
   21b72:	4604      	mov	r4, r0
   21b74:	460d      	mov	r5, r1
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   21b76:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   21b7a:	428b      	cmp	r3, r1
   21b7c:	d00c      	beq.n	21b98 <ble_ll_ctrl_proc_stop+0x28>
    CLR_PENDING_CTRL_PROC(connsm, ctrl_proc);
   21b7e:	2101      	movs	r1, #1
   21b80:	fa01 f305 	lsl.w	r3, r1, r5
   21b84:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
   21b88:	ea21 0103 	bic.w	r1, r1, r3
   21b8c:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
    ble_ll_ctrl_chk_proc_start(connsm);
   21b90:	4620      	mov	r0, r4
   21b92:	f7ff ffb5 	bl	21b00 <ble_ll_ctrl_chk_proc_start>
}
   21b96:	bd38      	pop	{r3, r4, r5, pc}
    os_callout_stop(&co->co);
   21b98:	30bc      	adds	r0, #188	; 0xbc
   21b9a:	f7e8 f85d 	bl	9c58 <os_callout_stop>
        connsm->cur_ctrl_proc = BLE_LL_CTRL_PROC_IDLE;
   21b9e:	23ff      	movs	r3, #255	; 0xff
   21ba0:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   21ba4:	e7eb      	b.n	21b7e <ble_ll_ctrl_proc_stop+0xe>

00021ba6 <ble_ll_ctrl_proc_unk_rsp>:
{
   21ba6:	b538      	push	{r3, r4, r5, lr}
   21ba8:	4605      	mov	r5, r0
   21baa:	4613      	mov	r3, r2
    opcode = dptr[0];
   21bac:	780c      	ldrb	r4, [r1, #0]
    switch (opcode) {
   21bae:	2c14      	cmp	r4, #20
   21bb0:	d837      	bhi.n	21c22 <ble_ll_ctrl_proc_unk_rsp+0x7c>
   21bb2:	e8df f004 	tbb	[pc, r4]
   21bb6:	3639      	.short	0x3639
   21bb8:	36363636 	.word	0x36363636
   21bbc:	36363636 	.word	0x36363636
   21bc0:	36363636 	.word	0x36363636
   21bc4:	36381b13 	.word	0x36381b13
   21bc8:	362e      	.short	0x362e
   21bca:	0b          	.byte	0x0b
   21bcb:	00          	.byte	0x00
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_DATA_LEN_EXT);
   21bcc:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   21bd0:	f023 0320 	bic.w	r3, r3, #32
   21bd4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_DATA_LEN_UPD;
   21bd8:	2408      	movs	r4, #8
        break;
   21bda:	e025      	b.n	21c28 <ble_ll_ctrl_proc_unk_rsp+0x82>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_SLAVE_INIT);
   21bdc:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   21be0:	f023 0308 	bic.w	r3, r3, #8
   21be4:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_FEATURE_XCHG;
   21be8:	2403      	movs	r4, #3
        break;
   21bea:	e01d      	b.n	21c28 <ble_ll_ctrl_proc_unk_rsp+0x82>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_CONN_PARM_REQ);
   21bec:	f890 203f 	ldrb.w	r2, [r0, #63]	; 0x3f
   21bf0:	f022 0202 	bic.w	r2, r2, #2
   21bf4:	f880 203f 	strb.w	r2, [r0, #63]	; 0x3f
        if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   21bf8:	79c2      	ldrb	r2, [r0, #7]
   21bfa:	2a01      	cmp	r2, #1
   21bfc:	d001      	beq.n	21c02 <ble_ll_ctrl_proc_unk_rsp+0x5c>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   21bfe:	2406      	movs	r4, #6
   21c00:	e012      	b.n	21c28 <ble_ll_ctrl_proc_unk_rsp+0x82>
            ble_ll_ctrl_conn_upd_make(connsm, rspdata, NULL);
   21c02:	2200      	movs	r2, #0
   21c04:	4619      	mov	r1, r3
   21c06:	f7ff facf 	bl	211a8 <ble_ll_ctrl_conn_upd_make>
            connsm->reject_reason = BLE_ERR_SUCCESS;
   21c0a:	2000      	movs	r0, #0
   21c0c:	f885 0037 	strb.w	r0, [r5, #55]	; 0x37
            return BLE_LL_CTRL_CONN_UPDATE_IND;
   21c10:	e00f      	b.n	21c32 <ble_ll_ctrl_proc_unk_rsp+0x8c>
        BLE_LL_CONN_CLEAR_FEATURE(connsm, BLE_LL_FEAT_LE_PING);
   21c12:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
   21c16:	f023 0310 	bic.w	r3, r3, #16
   21c1a:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
        ctrl_proc = BLE_LL_CTRL_PROC_LE_PING;
   21c1e:	2407      	movs	r4, #7
        break;
   21c20:	e002      	b.n	21c28 <ble_ll_ctrl_proc_unk_rsp+0x82>
        ctrl_proc = BLE_LL_CTRL_PROC_NUM;
   21c22:	240c      	movs	r4, #12
        break;
   21c24:	e000      	b.n	21c28 <ble_ll_ctrl_proc_unk_rsp+0x82>
        ctrl_proc = BLE_LL_CTRL_PROC_CONN_PARAM_REQ;
   21c26:	2406      	movs	r4, #6
    if (connsm->cur_ctrl_proc == ctrl_proc) {
   21c28:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   21c2c:	42a3      	cmp	r3, r4
   21c2e:	d001      	beq.n	21c34 <ble_ll_ctrl_proc_unk_rsp+0x8e>
    return BLE_ERR_MAX;
   21c30:	20ff      	movs	r0, #255	; 0xff
}
   21c32:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, ctrl_proc);
   21c34:	4621      	mov	r1, r4
   21c36:	4628      	mov	r0, r5
   21c38:	f7ff ff9a 	bl	21b70 <ble_ll_ctrl_proc_stop>
        if (ctrl_proc == BLE_LL_CTRL_PROC_CONN_PARAM_REQ) {
   21c3c:	2c06      	cmp	r4, #6
   21c3e:	d003      	beq.n	21c48 <ble_ll_ctrl_proc_unk_rsp+0xa2>
        } else if (ctrl_proc == BLE_LL_CTRL_PROC_FEATURE_XCHG) {
   21c40:	2c03      	cmp	r4, #3
   21c42:	d007      	beq.n	21c54 <ble_ll_ctrl_proc_unk_rsp+0xae>
    return BLE_ERR_MAX;
   21c44:	20ff      	movs	r0, #255	; 0xff
   21c46:	e7f4      	b.n	21c32 <ble_ll_ctrl_proc_unk_rsp+0x8c>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_UNSUPP_REM_FEATURE);
   21c48:	211a      	movs	r1, #26
   21c4a:	4628      	mov	r0, r5
   21c4c:	f001 f845 	bl	22cda <ble_ll_hci_ev_conn_update>
    return BLE_ERR_MAX;
   21c50:	20ff      	movs	r0, #255	; 0xff
   21c52:	e7ee      	b.n	21c32 <ble_ll_ctrl_proc_unk_rsp+0x8c>
            if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   21c54:	78eb      	ldrb	r3, [r5, #3]
   21c56:	f013 0f10 	tst.w	r3, #16
   21c5a:	d105      	bne.n	21c68 <ble_ll_ctrl_proc_unk_rsp+0xc2>
            connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   21c5c:	78eb      	ldrb	r3, [r5, #3]
   21c5e:	f36f 1304 	bfc	r3, #4, #1
   21c62:	70eb      	strb	r3, [r5, #3]
    return BLE_ERR_MAX;
   21c64:	20ff      	movs	r0, #255	; 0xff
   21c66:	e7e4      	b.n	21c32 <ble_ll_ctrl_proc_unk_rsp+0x8c>
                ble_ll_hci_ev_rd_rem_used_feat(connsm,
   21c68:	211a      	movs	r1, #26
   21c6a:	4628      	mov	r0, r5
   21c6c:	f001 f8b8 	bl	22de0 <ble_ll_hci_ev_rd_rem_used_feat>
   21c70:	e7f4      	b.n	21c5c <ble_ll_ctrl_proc_unk_rsp+0xb6>

00021c72 <ble_ll_ctrl_rx_feature_rsp>:
{
   21c72:	b510      	push	{r4, lr}
   21c74:	4604      	mov	r4, r0
    ble_ll_ctrl_update_features(connsm, dptr);
   21c76:	f7ff fbd1 	bl	2141c <ble_ll_ctrl_update_features>
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG)) {
   21c7a:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   21c7e:	f013 0f08 	tst.w	r3, #8
   21c82:	d104      	bne.n	21c8e <ble_ll_ctrl_rx_feature_rsp+0x1c>
    if (connsm->csmflags.cfbit.pending_hci_rd_features) {
   21c84:	78e3      	ldrb	r3, [r4, #3]
   21c86:	f013 0f10 	tst.w	r3, #16
   21c8a:	d105      	bne.n	21c98 <ble_ll_ctrl_rx_feature_rsp+0x26>
}
   21c8c:	bd10      	pop	{r4, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_FEATURE_XCHG);
   21c8e:	2103      	movs	r1, #3
   21c90:	4620      	mov	r0, r4
   21c92:	f7ff ff6d 	bl	21b70 <ble_ll_ctrl_proc_stop>
   21c96:	e7f5      	b.n	21c84 <ble_ll_ctrl_rx_feature_rsp+0x12>
        ble_ll_hci_ev_rd_rem_used_feat(connsm, BLE_ERR_SUCCESS);
   21c98:	2100      	movs	r1, #0
   21c9a:	4620      	mov	r0, r4
   21c9c:	f001 f8a0 	bl	22de0 <ble_ll_hci_ev_rd_rem_used_feat>
        connsm->csmflags.cfbit.pending_hci_rd_features = 0;
   21ca0:	78e3      	ldrb	r3, [r4, #3]
   21ca2:	f36f 1304 	bfc	r3, #4, #1
   21ca6:	70e3      	strb	r3, [r4, #3]
}
   21ca8:	e7f0      	b.n	21c8c <ble_ll_ctrl_rx_feature_rsp+0x1a>

00021caa <ble_ll_ctrl_rx_version_ind>:
{
   21caa:	b570      	push	{r4, r5, r6, lr}
   21cac:	4604      	mov	r4, r0
   21cae:	460d      	mov	r5, r1
   21cb0:	4616      	mov	r6, r2
    connsm->vers_nr = dptr[0];
   21cb2:	4608      	mov	r0, r1
   21cb4:	f810 3b01 	ldrb.w	r3, [r0], #1
   21cb8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    connsm->comp_id = get_le16(dptr + 1);
   21cbc:	f7f9 ffb1 	bl	1bc22 <get_le16>
   21cc0:	f8a4 004e 	strh.w	r0, [r4, #78]	; 0x4e
    connsm->sub_vers_nr = get_le16(dptr + 3);
   21cc4:	1ce8      	adds	r0, r5, #3
   21cc6:	f7f9 ffac 	bl	1bc22 <get_le16>
   21cca:	f8a4 0050 	strh.w	r0, [r4, #80]	; 0x50
    connsm->csmflags.cfbit.rxd_version_ind = 1;
   21cce:	7863      	ldrb	r3, [r4, #1]
   21cd0:	f043 0308 	orr.w	r3, r3, #8
   21cd4:	7063      	strb	r3, [r4, #1]
    if (!connsm->csmflags.cfbit.version_ind_sent) {
   21cd6:	f013 0f04 	tst.w	r3, #4
   21cda:	d007      	beq.n	21cec <ble_ll_ctrl_rx_version_ind+0x42>
    rsp_opcode = BLE_ERR_MAX;
   21cdc:	25ff      	movs	r5, #255	; 0xff
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG)) {
   21cde:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
   21ce2:	f013 0f10 	tst.w	r3, #16
   21ce6:	d107      	bne.n	21cf8 <ble_ll_ctrl_rx_version_ind+0x4e>
}
   21ce8:	4628      	mov	r0, r5
   21cea:	bd70      	pop	{r4, r5, r6, pc}
        ble_ll_ctrl_version_ind_make(connsm, rspbuf);
   21cec:	4631      	mov	r1, r6
   21cee:	4620      	mov	r0, r4
   21cf0:	f7ff fae4 	bl	212bc <ble_ll_ctrl_version_ind_make>
        rsp_opcode = BLE_LL_CTRL_VERSION_IND;
   21cf4:	250c      	movs	r5, #12
   21cf6:	e7f2      	b.n	21cde <ble_ll_ctrl_rx_version_ind+0x34>
        ble_ll_hci_ev_rd_rem_ver(connsm, BLE_ERR_SUCCESS);
   21cf8:	2100      	movs	r1, #0
   21cfa:	4620      	mov	r0, r4
   21cfc:	f001 f897 	bl	22e2e <ble_ll_hci_ev_rd_rem_ver>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_VERSION_XCHG);
   21d00:	2104      	movs	r1, #4
   21d02:	4620      	mov	r0, r4
   21d04:	f7ff ff34 	bl	21b70 <ble_ll_ctrl_proc_stop>
   21d08:	e7ee      	b.n	21ce8 <ble_ll_ctrl_rx_version_ind+0x3e>

00021d0a <ble_ll_ctrl_rx_start_enc_rsp>:
{
   21d0a:	b538      	push	{r3, r4, r5, lr}
    if (connsm->enc_data.enc_state != CONN_ENC_S_START_ENC_RSP_WAIT) {
   21d0c:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
   21d10:	2b07      	cmp	r3, #7
   21d12:	d11e      	bne.n	21d52 <ble_ll_ctrl_rx_start_enc_rsp+0x48>
   21d14:	4604      	mov	r4, r0
    if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   21d16:	79c3      	ldrb	r3, [r0, #7]
   21d18:	2b01      	cmp	r3, #1
   21d1a:	d00a      	beq.n	21d32 <ble_ll_ctrl_rx_start_enc_rsp+0x28>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_ENCRYPT) {
   21d1c:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
   21d20:	2b02      	cmp	r3, #2
   21d22:	d011      	beq.n	21d48 <ble_ll_ctrl_rx_start_enc_rsp+0x3e>
        rc = BLE_LL_CTRL_START_ENC_RSP;
   21d24:	2506      	movs	r5, #6
    ble_ll_hci_ev_encrypt_chg(connsm, BLE_ERR_SUCCESS);
   21d26:	2100      	movs	r1, #0
   21d28:	4620      	mov	r0, r4
   21d2a:	f000 fff8 	bl	22d1e <ble_ll_hci_ev_encrypt_chg>
    return rc;
   21d2e:	b2e8      	uxtb	r0, r5
}
   21d30:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   21d32:	2102      	movs	r1, #2
   21d34:	f7ff ff1c 	bl	21b70 <ble_ll_ctrl_proc_stop>
        connsm->enc_data.enc_state = CONN_ENC_S_ENCRYPTED;
   21d38:	2302      	movs	r3, #2
   21d3a:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
        ble_ll_conn_auth_pyld_timer_start(connsm);
   21d3e:	4620      	mov	r0, r4
   21d40:	f7fd fb94 	bl	1f46c <ble_ll_conn_auth_pyld_timer_start>
        rc = BLE_ERR_MAX;
   21d44:	25ff      	movs	r5, #255	; 0xff
   21d46:	e7ee      	b.n	21d26 <ble_ll_ctrl_rx_start_enc_rsp+0x1c>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   21d48:	2102      	movs	r1, #2
   21d4a:	f7ff ff11 	bl	21b70 <ble_ll_ctrl_proc_stop>
        rc = BLE_LL_CTRL_START_ENC_RSP;
   21d4e:	2506      	movs	r5, #6
   21d50:	e7e9      	b.n	21d26 <ble_ll_ctrl_rx_start_enc_rsp+0x1c>
        return BLE_ERR_MAX;
   21d52:	20ff      	movs	r0, #255	; 0xff
   21d54:	e7ec      	b.n	21d30 <ble_ll_ctrl_rx_start_enc_rsp+0x26>

00021d56 <ble_ll_ctrl_rx_ping_rsp>:
{
   21d56:	b508      	push	{r3, lr}
    ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_LE_PING);
   21d58:	2107      	movs	r1, #7
   21d5a:	f7ff ff09 	bl	21b70 <ble_ll_ctrl_proc_stop>
}
   21d5e:	bd08      	pop	{r3, pc}

00021d60 <ble_ll_ctrl_rx_conn_param_req>:
    if (connsm->csmflags.cfbit.awaiting_host_reply) {
   21d60:	7803      	ldrb	r3, [r0, #0]
   21d62:	f013 0f40 	tst.w	r3, #64	; 0x40
   21d66:	d12d      	bne.n	21dc4 <ble_ll_ctrl_rx_conn_param_req+0x64>
{
   21d68:	b570      	push	{r4, r5, r6, lr}
   21d6a:	4616      	mov	r6, r2
   21d6c:	460d      	mov	r5, r1
   21d6e:	4604      	mov	r4, r0
    if (IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ)) {
   21d70:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   21d74:	f013 0f40 	tst.w	r3, #64	; 0x40
   21d78:	d00f      	beq.n	21d9a <ble_ll_ctrl_rx_conn_param_req+0x3a>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   21d7a:	79c3      	ldrb	r3, [r0, #7]
   21d7c:	2b02      	cmp	r3, #2
   21d7e:	d005      	beq.n	21d8c <ble_ll_ctrl_rx_conn_param_req+0x2c>
            rspbuf[1] = BLE_LL_CTRL_CONN_PARM_REQ;
   21d80:	230f      	movs	r3, #15
   21d82:	7053      	strb	r3, [r2, #1]
            rspbuf[2] = BLE_ERR_LMP_COLLISION;
   21d84:	2323      	movs	r3, #35	; 0x23
   21d86:	7093      	strb	r3, [r2, #2]
            return rsp_opcode;
   21d88:	2011      	movs	r0, #17
   21d8a:	e014      	b.n	21db6 <ble_ll_ctrl_rx_conn_param_req+0x56>
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   21d8c:	2106      	movs	r1, #6
   21d8e:	f7ff feef 	bl	21b70 <ble_ll_ctrl_proc_stop>
            ble_ll_hci_ev_conn_update(connsm, BLE_ERR_LMP_COLLISION);
   21d92:	2123      	movs	r1, #35	; 0x23
   21d94:	4620      	mov	r0, r4
   21d96:	f000 ffa0 	bl	22cda <ble_ll_hci_ev_conn_update>
    if ((connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) &&
   21d9a:	79e3      	ldrb	r3, [r4, #7]
   21d9c:	2b01      	cmp	r3, #1
   21d9e:	d103      	bne.n	21da8 <ble_ll_ctrl_rx_conn_param_req+0x48>
   21da0:	7863      	ldrb	r3, [r4, #1]
   21da2:	f013 0f10 	tst.w	r3, #16
   21da6:	d107      	bne.n	21db8 <ble_ll_ctrl_rx_conn_param_req+0x58>
    rsp_opcode = ble_ll_ctrl_conn_param_pdu_proc(connsm, dptr, rspbuf,
   21da8:	230f      	movs	r3, #15
   21daa:	4632      	mov	r2, r6
   21dac:	4629      	mov	r1, r5
   21dae:	4620      	mov	r0, r4
   21db0:	f7ff fd69 	bl	21886 <ble_ll_ctrl_conn_param_pdu_proc>
   21db4:	b2c0      	uxtb	r0, r0
}
   21db6:	bd70      	pop	{r4, r5, r6, pc}
        rspbuf[1] = BLE_LL_CTRL_CONN_PARM_REQ;
   21db8:	230f      	movs	r3, #15
   21dba:	7073      	strb	r3, [r6, #1]
        rspbuf[2] = BLE_ERR_DIFF_TRANS_COLL;
   21dbc:	232a      	movs	r3, #42	; 0x2a
   21dbe:	70b3      	strb	r3, [r6, #2]
        return rsp_opcode;
   21dc0:	2011      	movs	r0, #17
   21dc2:	e7f8      	b.n	21db6 <ble_ll_ctrl_rx_conn_param_req+0x56>
        return BLE_ERR_MAX;
   21dc4:	20ff      	movs	r0, #255	; 0xff
}
   21dc6:	4770      	bx	lr

00021dc8 <ble_ll_ctrl_rx_reject_ind>:
{
   21dc8:	b538      	push	{r3, r4, r5, lr}
   21dca:	4604      	mov	r4, r0
    if (opcode == BLE_LL_CTRL_REJECT_IND) {
   21dcc:	2a0d      	cmp	r2, #13
   21dce:	d00a      	beq.n	21de6 <ble_ll_ctrl_rx_reject_ind+0x1e>
        ble_error = dptr[1];
   21dd0:	784d      	ldrb	r5, [r1, #1]
    switch (connsm->cur_ctrl_proc) {
   21dd2:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
   21dd6:	2806      	cmp	r0, #6
   21dd8:	d007      	beq.n	21dea <ble_ll_ctrl_rx_reject_ind+0x22>
   21dda:	2808      	cmp	r0, #8
   21ddc:	d02c      	beq.n	21e38 <ble_ll_ctrl_rx_reject_ind+0x70>
   21dde:	2802      	cmp	r0, #2
   21de0:	d01d      	beq.n	21e1e <ble_ll_ctrl_rx_reject_ind+0x56>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   21de2:	20ff      	movs	r0, #255	; 0xff
   21de4:	e027      	b.n	21e36 <ble_ll_ctrl_rx_reject_ind+0x6e>
        ble_error = dptr[0];
   21de6:	780d      	ldrb	r5, [r1, #0]
   21de8:	e7f3      	b.n	21dd2 <ble_ll_ctrl_rx_reject_ind+0xa>
        if (opcode == BLE_LL_CTRL_REJECT_IND_EXT) {
   21dea:	2a11      	cmp	r2, #17
   21dec:	d001      	beq.n	21df2 <ble_ll_ctrl_rx_reject_ind+0x2a>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   21dee:	20ff      	movs	r0, #255	; 0xff
   21df0:	e021      	b.n	21e36 <ble_ll_ctrl_rx_reject_ind+0x6e>
            if (connsm->conn_role == BLE_LL_CONN_ROLE_MASTER) {
   21df2:	79e2      	ldrb	r2, [r4, #7]
   21df4:	2a01      	cmp	r2, #1
   21df6:	d009      	beq.n	21e0c <ble_ll_ctrl_rx_reject_ind+0x44>
                ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_CONN_PARAM_REQ);
   21df8:	2106      	movs	r1, #6
   21dfa:	4620      	mov	r0, r4
   21dfc:	f7ff feb8 	bl	21b70 <ble_ll_ctrl_proc_stop>
                ble_ll_hci_ev_conn_update(connsm, ble_error);
   21e00:	4629      	mov	r1, r5
   21e02:	4620      	mov	r0, r4
   21e04:	f000 ff69 	bl	22cda <ble_ll_hci_ev_conn_update>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   21e08:	20ff      	movs	r0, #255	; 0xff
   21e0a:	e014      	b.n	21e36 <ble_ll_ctrl_rx_reject_ind+0x6e>
                ble_ll_ctrl_conn_upd_make(connsm, rspdata, NULL);
   21e0c:	2200      	movs	r2, #0
   21e0e:	4619      	mov	r1, r3
   21e10:	4620      	mov	r0, r4
   21e12:	f7ff f9c9 	bl	211a8 <ble_ll_ctrl_conn_upd_make>
                connsm->reject_reason = BLE_ERR_SUCCESS;
   21e16:	2000      	movs	r0, #0
   21e18:	f884 0037 	strb.w	r0, [r4, #55]	; 0x37
   21e1c:	e00b      	b.n	21e36 <ble_ll_ctrl_rx_reject_ind+0x6e>
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   21e1e:	2102      	movs	r1, #2
   21e20:	4620      	mov	r0, r4
   21e22:	f7ff fea5 	bl	21b70 <ble_ll_ctrl_proc_stop>
        ble_ll_hci_ev_encrypt_chg(connsm, ble_error);
   21e26:	4629      	mov	r1, r5
   21e28:	4620      	mov	r0, r4
   21e2a:	f000 ff78 	bl	22d1e <ble_ll_hci_ev_encrypt_chg>
        connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   21e2e:	2301      	movs	r3, #1
   21e30:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
    uint8_t rsp_opcode = BLE_ERR_MAX;
   21e34:	20ff      	movs	r0, #255	; 0xff
}
   21e36:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   21e38:	2108      	movs	r1, #8
   21e3a:	4620      	mov	r0, r4
   21e3c:	f7ff fe98 	bl	21b70 <ble_ll_ctrl_proc_stop>
    uint8_t rsp_opcode = BLE_ERR_MAX;
   21e40:	20ff      	movs	r0, #255	; 0xff
        break;
   21e42:	e7f8      	b.n	21e36 <ble_ll_ctrl_rx_reject_ind+0x6e>

00021e44 <ble_ll_ctrl_rx_pdu>:
 * @param om
 * @param connsm
 */
int
ble_ll_ctrl_rx_pdu(struct ble_ll_conn_sm *connsm, struct os_mbuf *om)
{
   21e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21e48:	4606      	mov	r6, r0
   21e4a:	460f      	mov	r7, r1
    /*
     * dptr points to om_data pointer. The first byte of om_data is the
     * first byte of the Data Channel PDU header. Get length from header and
     * opcode from LL control PDU.
     */
    dptr = om->om_data;
   21e4c:	680c      	ldr	r4, [r1, #0]
    len = dptr[1];
   21e4e:	7863      	ldrb	r3, [r4, #1]
    opcode = dptr[2];
   21e50:	78a5      	ldrb	r5, [r4, #2]
#endif

    /* If opcode comes from reserved value or CtrlData fields is invalid
     * we shall respond with LL_UNKNOWN_RSP
     */
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   21e52:	2d22      	cmp	r5, #34	; 0x22
   21e54:	f200 817e 	bhi.w	22154 <ble_ll_ctrl_rx_pdu+0x310>
   21e58:	f104 0901 	add.w	r9, r4, #1
   21e5c:	f104 0803 	add.w	r8, r4, #3
   21e60:	3b01      	subs	r3, #1
   21e62:	b2db      	uxtb	r3, r3
        (len != g_ble_ll_ctrl_pkt_lengths[opcode])) {
   21e64:	4abf      	ldr	r2, [pc, #764]	; (22164 <ble_ll_ctrl_rx_pdu+0x320>)
   21e66:	5d52      	ldrb	r2, [r2, r5]
    if ((opcode >= BLE_LL_CTRL_OPCODES) ||
   21e68:	429a      	cmp	r2, r3
   21e6a:	f040 817d 	bne.w	22168 <ble_ll_ctrl_rx_pdu+0x324>
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
        goto ll_ctrl_send_rsp;
    }

    /* Check if the feature is supported. */
    switch (opcode) {
   21e6e:	1eeb      	subs	r3, r5, #3
   21e70:	2b19      	cmp	r3, #25
   21e72:	d867      	bhi.n	21f44 <ble_ll_ctrl_rx_pdu+0x100>
   21e74:	e8df f003 	tbb	[pc, r3]
   21e78:	66196619 	.word	0x66196619
   21e7c:	19666666 	.word	0x19666666
   21e80:	1f666666 	.word	0x1f666666
   21e84:	16661c1c 	.word	0x16661c1c
   21e88:	13660d66 	.word	0x13660d66
   21e8c:	66106666 	.word	0x66106666
   21e90:	2266      	.short	0x2266
    case BLE_LL_CTRL_LENGTH_REQ:
        feature = BLE_LL_FEAT_DATA_LEN_EXT;
   21e92:	f04f 0a20 	mov.w	sl, #32
   21e96:	e013      	b.n	21ec0 <ble_ll_ctrl_rx_pdu+0x7c>
        break;
    case BLE_LL_CTRL_PHY_REQ:
        feature = BLE_LL_FEAT_LE_2M_PHY | BLE_LL_FEAT_LE_CODED_PHY;
        break;
    case BLE_LL_CTRL_MIN_USED_CHAN_IND:
        feature = BLE_LL_FEAT_MIN_USED_CHAN;
   21e98:	f44f 3a80 	mov.w	sl, #65536	; 0x10000
   21e9c:	e010      	b.n	21ec0 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_LE_2M_PHY | BLE_LL_FEAT_LE_CODED_PHY;
   21e9e:	f44f 6a10 	mov.w	sl, #2304	; 0x900
   21ea2:	e00d      	b.n	21ec0 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_LE_PING;
   21ea4:	f04f 0a10 	mov.w	sl, #16
   21ea8:	e00a      	b.n	21ec0 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_LE_ENCRYPTION;
   21eaa:	f04f 0a01 	mov.w	sl, #1
   21eae:	e007      	b.n	21ec0 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_CONN_PARM_REQ;
   21eb0:	f04f 0a02 	mov.w	sl, #2
   21eb4:	e004      	b.n	21ec0 <ble_ll_ctrl_rx_pdu+0x7c>
        feature = BLE_LL_FEAT_SLAVE_INIT;
   21eb6:	f04f 0a08 	mov.w	sl, #8
   21eba:	e001      	b.n	21ec0 <ble_ll_ctrl_rx_pdu+0x7c>
        break;
    case BLE_LL_CTRL_PERIODIC_SYNC_IND:
        feature = BLE_LL_FEAT_SYNC_TRANS_RECV;
   21ebc:	f04f 7a00 	mov.w	sl, #33554432	; 0x2000000
        feature = 0;
        break;
    }

    if (feature) {
        features = ble_ll_read_supp_features();
   21ec0:	f7fb f9ec 	bl	1d29c <ble_ll_read_supp_features>
        if ((features & feature) == 0) {
   21ec4:	ea1a 0f00 	tst.w	sl, r0
   21ec8:	d13c      	bne.n	21f44 <ble_ll_ctrl_rx_pdu+0x100>
            if (opcode == BLE_LL_CTRL_ENC_REQ) {
   21eca:	2d03      	cmp	r5, #3
   21ecc:	d024      	beq.n	21f18 <ble_ll_ctrl_rx_pdu+0xd4>
    int rc = 0;
   21ece:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   21ed2:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND;
                    rspbuf[1] = BLE_ERR_UNSUPP_REM_FEATURE;
                }
            } else {
                /* Construct unknown rsp pdu */
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   21ed4:	f04f 0807 	mov.w	r8, #7
        break;
    }

    /* Free mbuf or send response */
ll_ctrl_send_rsp:
    if (rsp_opcode == BLE_ERR_MAX) {
   21ed8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   21edc:	f000 815d 	beq.w	2219a <ble_ll_ctrl_rx_pdu+0x356>
    } else {
        /*
         * Write the response opcode into the buffer. If this is an unknown
         * response, put opcode of unknown pdu into buffer.
         */
        rspbuf[0] = rsp_opcode;
   21ee0:	f884 8000 	strb.w	r8, [r4]
        if (rsp_opcode == BLE_LL_CTRL_UNKNOWN_RSP) {
   21ee4:	f1b8 0f07 	cmp.w	r8, #7
   21ee8:	f000 815b 	beq.w	221a2 <ble_ll_ctrl_rx_pdu+0x35e>
            rspbuf[1] = opcode;
        }
        len = g_ble_ll_ctrl_pkt_lengths[rsp_opcode] + 1;
   21eec:	4b9d      	ldr	r3, [pc, #628]	; (22164 <ble_ll_ctrl_rx_pdu+0x320>)
   21eee:	f813 3008 	ldrb.w	r3, [r3, r8]
   21ef2:	3301      	adds	r3, #1
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   21ef4:	b2db      	uxtb	r3, r3
   21ef6:	2203      	movs	r2, #3
   21ef8:	4639      	mov	r1, r7
   21efa:	4630      	mov	r0, r6
   21efc:	f7fe f938 	bl	20170 <ble_ll_conn_enqueue_pkt>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
        if (restart_encryption) {
   21f00:	f1ba 0f00 	cmp.w	sl, #0
   21f04:	f040 814f 	bne.w	221a6 <ble_ll_ctrl_rx_pdu+0x362>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
        }
#endif
    }

    if (connsm->csmflags.cfbit.pending_initiate_dle) {
   21f08:	78f3      	ldrb	r3, [r6, #3]
   21f0a:	f013 0f20 	tst.w	r3, #32
   21f0e:	f040 814f 	bne.w	221b0 <ble_ll_ctrl_rx_pdu+0x36c>
        connsm->csmflags.cfbit.pending_initiate_dle = 0;
        ble_ll_ctrl_initiate_dle(connsm);
    }

    return rc;
}
   21f12:	4648      	mov	r0, r9
   21f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                if (connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) {
   21f18:	f896 303f 	ldrb.w	r3, [r6, #63]	; 0x3f
   21f1c:	f013 0f04 	tst.w	r3, #4
   21f20:	d008      	beq.n	21f34 <ble_ll_ctrl_rx_pdu+0xf0>
                    rspbuf[1] = opcode;
   21f22:	7065      	strb	r5, [r4, #1]
                    rspbuf[2] = BLE_ERR_UNSUPP_REM_FEATURE;
   21f24:	231a      	movs	r3, #26
   21f26:	70a3      	strb	r3, [r4, #2]
    int rc = 0;
   21f28:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   21f2c:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND_EXT;
   21f2e:	f04f 0811 	mov.w	r8, #17
   21f32:	e7d1      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
                    rspbuf[1] = BLE_ERR_UNSUPP_REM_FEATURE;
   21f34:	231a      	movs	r3, #26
   21f36:	7063      	strb	r3, [r4, #1]
    int rc = 0;
   21f38:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   21f3c:	46ca      	mov	sl, r9
                    rsp_opcode = BLE_LL_CTRL_REJECT_IND;
   21f3e:	f04f 080d 	mov.w	r8, #13
   21f42:	e7c9      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
    switch (opcode) {
   21f44:	2d15      	cmp	r5, #21
   21f46:	d817      	bhi.n	21f78 <ble_ll_ctrl_rx_pdu+0x134>
   21f48:	e8df f015 	tbh	[pc, r5, lsl #1]
   21f4c:	0026001c 	.word	0x0026001c
   21f50:	00a30016 	.word	0x00a30016
   21f54:	00b700ad 	.word	0x00b700ad
   21f58:	006b00bf 	.word	0x006b00bf
   21f5c:	00820076 	.word	0x00820076
   21f60:	00cf00c7 	.word	0x00cf00c7
   21f64:	00f8008c 	.word	0x00f8008c
   21f68:	00e20097 	.word	0x00e20097
   21f6c:	00f800ed 	.word	0x00f800ed
   21f70:	00d90115 	.word	0x00d90115
   21f74:	004d0030 	.word	0x004d0030
    int rc = 0;
   21f78:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   21f7c:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   21f7e:	f04f 08ff 	mov.w	r8, #255	; 0xff
   21f82:	e7a9      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_update(connsm, dptr);
   21f84:	4641      	mov	r1, r8
   21f86:	4630      	mov	r0, r6
   21f88:	f7ff fb1e 	bl	215c8 <ble_ll_ctrl_rx_conn_update>
   21f8c:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   21f90:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   21f94:	46ca      	mov	sl, r9
        break;
   21f96:	e79f      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_chanmap_req(connsm, dptr);
   21f98:	4641      	mov	r1, r8
   21f9a:	4630      	mov	r0, r6
   21f9c:	f7ff fb58 	bl	21650 <ble_ll_ctrl_rx_chanmap_req>
   21fa0:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   21fa4:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   21fa8:	46ca      	mov	sl, r9
        break;
   21faa:	e795      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   21fac:	4641      	mov	r1, r8
   21fae:	4630      	mov	r0, r6
   21fb0:	f7ff fb74 	bl	2169c <ble_ll_ctrl_len_proc>
   21fb4:	4682      	mov	sl, r0
   21fb6:	2800      	cmp	r0, #0
   21fb8:	f040 80e3 	bne.w	22182 <ble_ll_ctrl_rx_pdu+0x33e>
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   21fbc:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
   21fc0:	2b08      	cmp	r3, #8
   21fc2:	d008      	beq.n	21fd6 <ble_ll_ctrl_rx_pdu+0x192>
            IS_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD)) {
   21fc4:	f8b6 3048 	ldrh.w	r3, [r6, #72]	; 0x48
        if ((connsm->cur_ctrl_proc != BLE_LL_CTRL_PROC_DATA_LEN_UPD) &&
   21fc8:	f413 7f80 	tst.w	r3, #256	; 0x100
   21fcc:	d003      	beq.n	21fd6 <ble_ll_ctrl_rx_pdu+0x192>
            CLR_PENDING_CTRL_PROC(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   21fce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   21fd2:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
        ble_ll_ctrl_datalen_upd_make(connsm, rspbuf);
   21fd6:	4621      	mov	r1, r4
   21fd8:	4630      	mov	r0, r6
   21fda:	f7ff f982 	bl	212e2 <ble_ll_ctrl_datalen_upd_make>
    int rc = 0;
   21fde:	46d1      	mov	r9, sl
        rsp_opcode = BLE_LL_CTRL_LENGTH_RSP;
   21fe0:	f04f 0815 	mov.w	r8, #21
        break;
   21fe4:	e778      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_DATA_LEN_UPD) {
   21fe6:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
   21fea:	2b08      	cmp	r3, #8
   21fec:	d005      	beq.n	21ffa <ble_ll_ctrl_rx_pdu+0x1b6>
    int rc = 0;
   21fee:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   21ff2:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   21ff4:	f04f 08ff 	mov.w	r8, #255	; 0xff
   21ff8:	e76e      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
            if (ble_ll_ctrl_len_proc(connsm, dptr)) {
   21ffa:	4641      	mov	r1, r8
   21ffc:	4630      	mov	r0, r6
   21ffe:	f7ff fb4d 	bl	2169c <ble_ll_ctrl_len_proc>
   22002:	4681      	mov	r9, r0
   22004:	b940      	cbnz	r0, 22018 <ble_ll_ctrl_rx_pdu+0x1d4>
    rsp_opcode = BLE_ERR_MAX;
   22006:	f04f 08ff 	mov.w	r8, #255	; 0xff
            ble_ll_ctrl_proc_stop(connsm, BLE_LL_CTRL_PROC_DATA_LEN_UPD);
   2200a:	2108      	movs	r1, #8
   2200c:	4630      	mov	r0, r6
   2200e:	f7ff fdaf 	bl	21b70 <ble_ll_ctrl_proc_stop>
    restart_encryption = 0;
   22012:	f04f 0a00 	mov.w	sl, #0
   22016:	e75f      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
                rc = -1;
   22018:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
                rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   2201c:	f04f 0807 	mov.w	r8, #7
   22020:	e7f3      	b.n	2200a <ble_ll_ctrl_rx_pdu+0x1c6>
        rsp_opcode = ble_ll_ctrl_proc_unk_rsp(connsm, dptr, rspdata);
   22022:	464a      	mov	r2, r9
   22024:	4641      	mov	r1, r8
   22026:	4630      	mov	r0, r6
   22028:	f7ff fdbd 	bl	21ba6 <ble_ll_ctrl_proc_unk_rsp>
   2202c:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   22030:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   22034:	46ca      	mov	sl, r9
        break;
   22036:	e74f      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode);
   22038:	462b      	mov	r3, r5
   2203a:	4622      	mov	r2, r4
   2203c:	4641      	mov	r1, r8
   2203e:	4630      	mov	r0, r6
   22040:	f7ff fa03 	bl	2144a <ble_ll_ctrl_rx_feature_req>
   22044:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   22048:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2204c:	46ca      	mov	sl, r9
        break;
   2204e:	e743      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        ble_ll_ctrl_rx_feature_rsp(connsm, dptr);
   22050:	4641      	mov	r1, r8
   22052:	4630      	mov	r0, r6
   22054:	f7ff fe0d 	bl	21c72 <ble_ll_ctrl_rx_feature_rsp>
    int rc = 0;
   22058:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2205c:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   2205e:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   22062:	e739      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_version_ind(connsm, dptr, rspdata);
   22064:	464a      	mov	r2, r9
   22066:	4641      	mov	r1, r8
   22068:	4630      	mov	r0, r6
   2206a:	f7ff fe1e 	bl	21caa <ble_ll_ctrl_rx_version_ind>
   2206e:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   22072:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   22076:	46ca      	mov	sl, r9
        break;
   22078:	e72e      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_feature_req(connsm, dptr, rspbuf, opcode);
   2207a:	462b      	mov	r3, r5
   2207c:	4622      	mov	r2, r4
   2207e:	4641      	mov	r1, r8
   22080:	4630      	mov	r0, r6
   22082:	f7ff f9e2 	bl	2144a <ble_ll_ctrl_rx_feature_req>
   22086:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   2208a:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2208e:	46ca      	mov	sl, r9
        break;
   22090:	e722      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_enc_req(connsm, dptr, rspdata);
   22092:	464a      	mov	r2, r9
   22094:	4641      	mov	r1, r8
   22096:	4630      	mov	r0, r6
   22098:	f7ff fb33 	bl	21702 <ble_ll_ctrl_rx_enc_req>
   2209c:	4680      	mov	r8, r0
    int rc = 0;
   2209e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   220a2:	46ca      	mov	sl, r9
        break;
   220a4:	e718      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        ble_ll_ctrl_rx_enc_rsp(connsm, dptr);
   220a6:	4641      	mov	r1, r8
   220a8:	4630      	mov	r0, r6
   220aa:	f7ff fb72 	bl	21792 <ble_ll_ctrl_rx_enc_rsp>
    int rc = 0;
   220ae:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   220b2:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   220b4:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   220b8:	e70e      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_req(connsm);
   220ba:	4630      	mov	r0, r6
   220bc:	f7ff f82c 	bl	21118 <ble_ll_ctrl_rx_start_enc_req>
   220c0:	4680      	mov	r8, r0
    int rc = 0;
   220c2:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   220c6:	46ca      	mov	sl, r9
        break;
   220c8:	e706      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_start_enc_rsp(connsm);
   220ca:	4630      	mov	r0, r6
   220cc:	f7ff fe1d 	bl	21d0a <ble_ll_ctrl_rx_start_enc_rsp>
   220d0:	4680      	mov	r8, r0
    int rc = 0;
   220d2:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   220d6:	46ca      	mov	sl, r9
        break;
   220d8:	e6fe      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_req(connsm);
   220da:	4630      	mov	r0, r6
   220dc:	f7ff f82c 	bl	21138 <ble_ll_ctrl_rx_pause_enc_req>
   220e0:	4680      	mov	r8, r0
    int rc = 0;
   220e2:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   220e6:	46ca      	mov	sl, r9
        break;
   220e8:	e6f6      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_pause_enc_rsp(connsm);
   220ea:	4630      	mov	r0, r6
   220ec:	f7ff f831 	bl	21152 <ble_ll_ctrl_rx_pause_enc_rsp>
   220f0:	4680      	mov	r8, r0
        if (rsp_opcode == BLE_LL_CTRL_PAUSE_ENC_RSP) {
   220f2:	280b      	cmp	r0, #11
   220f4:	d04c      	beq.n	22190 <ble_ll_ctrl_rx_pdu+0x34c>
    int rc = 0;
   220f6:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   220fa:	46ca      	mov	sl, r9
   220fc:	e6ec      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        ble_ll_ctrl_rx_ping_rsp(connsm);
   220fe:	4630      	mov	r0, r6
   22100:	f7ff fe29 	bl	21d56 <ble_ll_ctrl_rx_ping_rsp>
    int rc = 0;
   22104:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   22108:	46ca      	mov	sl, r9
    rsp_opcode = BLE_ERR_MAX;
   2210a:	f04f 08ff 	mov.w	r8, #255	; 0xff
        break;
   2210e:	e6e3      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_param_req(connsm, dptr, rspbuf);
   22110:	4622      	mov	r2, r4
   22112:	4641      	mov	r1, r8
   22114:	4630      	mov	r0, r6
   22116:	f7ff fe23 	bl	21d60 <ble_ll_ctrl_rx_conn_param_req>
   2211a:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   2211e:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   22122:	46ca      	mov	sl, r9
        break;
   22124:	e6d8      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_conn_param_rsp(connsm, dptr, rspbuf);
   22126:	4622      	mov	r2, r4
   22128:	4641      	mov	r1, r8
   2212a:	4630      	mov	r0, r6
   2212c:	f7ff fc5d 	bl	219ea <ble_ll_ctrl_rx_conn_param_rsp>
   22130:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   22134:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   22138:	46ca      	mov	sl, r9
        break;
   2213a:	e6cd      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        rsp_opcode = ble_ll_ctrl_rx_reject_ind(connsm, dptr, opcode, rspdata);
   2213c:	464b      	mov	r3, r9
   2213e:	462a      	mov	r2, r5
   22140:	4641      	mov	r1, r8
   22142:	4630      	mov	r0, r6
   22144:	f7ff fe40 	bl	21dc8 <ble_ll_ctrl_rx_reject_ind>
   22148:	fa5f f880 	uxtb.w	r8, r0
    int rc = 0;
   2214c:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   22150:	46ca      	mov	sl, r9
        break;
   22152:	e6c1      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        rc = -1;
   22154:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   22158:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   2215c:	f04f 0807 	mov.w	r8, #7
   22160:	e6ba      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
   22162:	bf00      	nop
   22164:	00029810 	.word	0x00029810
        rc = -1;
   22168:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   2216c:	f04f 0a00 	mov.w	sl, #0
        rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   22170:	f04f 0807 	mov.w	r8, #7
   22174:	e6b0      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
    int rc = 0;
   22176:	f04f 0900 	mov.w	r9, #0
    restart_encryption = 0;
   2217a:	46ca      	mov	sl, r9
        rsp_opcode = BLE_LL_CTRL_PING_RSP;
   2217c:	f04f 0813 	mov.w	r8, #19
   22180:	e6aa      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
            rc  = -1;
   22182:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
    restart_encryption = 0;
   22186:	f04f 0a00 	mov.w	sl, #0
            rsp_opcode = BLE_LL_CTRL_UNKNOWN_RSP;
   2218a:	f04f 0807 	mov.w	r8, #7
   2218e:	e6a3      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
    int rc = 0;
   22190:	f04f 0900 	mov.w	r9, #0
            restart_encryption = 1;
   22194:	f04f 0a01 	mov.w	sl, #1
   22198:	e69e      	b.n	21ed8 <ble_ll_ctrl_rx_pdu+0x94>
        os_mbuf_free_chain(om);
   2219a:	4638      	mov	r0, r7
   2219c:	f7e8 f820 	bl	a1e0 <os_mbuf_free_chain>
   221a0:	e6b2      	b.n	21f08 <ble_ll_ctrl_rx_pdu+0xc4>
            rspbuf[1] = opcode;
   221a2:	7065      	strb	r5, [r4, #1]
   221a4:	e6a2      	b.n	21eec <ble_ll_ctrl_rx_pdu+0xa8>
            ble_ll_ctrl_proc_init(connsm, BLE_LL_CTRL_PROC_ENCRYPT);
   221a6:	2102      	movs	r1, #2
   221a8:	4630      	mov	r0, r6
   221aa:	f7ff f99d 	bl	214e8 <ble_ll_ctrl_proc_init>
   221ae:	e6ab      	b.n	21f08 <ble_ll_ctrl_rx_pdu+0xc4>
        connsm->csmflags.cfbit.pending_initiate_dle = 0;
   221b0:	78f3      	ldrb	r3, [r6, #3]
   221b2:	f36f 1345 	bfc	r3, #5, #1
   221b6:	70f3      	strb	r3, [r6, #3]
        ble_ll_ctrl_initiate_dle(connsm);
   221b8:	4630      	mov	r0, r6
   221ba:	f7ff fc89 	bl	21ad0 <ble_ll_ctrl_initiate_dle>
    return rc;
   221be:	e6a8      	b.n	21f12 <ble_ll_ctrl_rx_pdu+0xce>

000221c0 <ble_ll_ctrl_reject_ind_send>:
 * @return int
 */
int
ble_ll_ctrl_reject_ind_send(struct ble_ll_conn_sm *connsm, uint8_t rej_opcode,
                            uint8_t err)
{
   221c0:	b570      	push	{r4, r5, r6, lr}
   221c2:	4605      	mov	r5, r0
   221c4:	460c      	mov	r4, r1
   221c6:	4616      	mov	r6, r2
    uint8_t len;
    uint8_t opcode;
    uint8_t *rspbuf;
    struct os_mbuf *om;

    om = os_msys_get_pkthdr(BLE_LL_CTRL_MAX_PDU_LEN,
   221c8:	2110      	movs	r1, #16
   221ca:	201b      	movs	r0, #27
   221cc:	f7e8 fd21 	bl	ac12 <os_msys_get_pkthdr>
                            sizeof(struct ble_mbuf_hdr));
    if (om) {
   221d0:	b1d8      	cbz	r0, 2220a <ble_ll_ctrl_reject_ind_send+0x4a>
   221d2:	4601      	mov	r1, r0
        rspbuf = om->om_data;
   221d4:	6803      	ldr	r3, [r0, #0]
        opcode = BLE_LL_CTRL_REJECT_IND_EXT;
        if (rej_opcode == BLE_LL_CTRL_ENC_REQ) {
   221d6:	2c03      	cmp	r4, #3
   221d8:	d00a      	beq.n	221f0 <ble_ll_ctrl_reject_ind_send+0x30>
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
                opcode = BLE_LL_CTRL_REJECT_IND;
            }
        }
        rspbuf[0] = opcode;
   221da:	2211      	movs	r2, #17
   221dc:	701a      	strb	r2, [r3, #0]
        if (opcode == BLE_LL_CTRL_REJECT_IND) {
            rspbuf[1] = err;
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
        } else {
            rspbuf[1] = rej_opcode;
   221de:	705c      	strb	r4, [r3, #1]
            rspbuf[2] = err;
   221e0:	709e      	strb	r6, [r3, #2]
            len = BLE_LL_CTRL_REJECT_IND_EXT_LEN + 1;
   221e2:	2303      	movs	r3, #3
        }
        ble_ll_conn_enqueue_pkt(connsm, om, BLE_LL_LLID_CTRL, len);
   221e4:	2203      	movs	r2, #3
   221e6:	4628      	mov	r0, r5
   221e8:	f7fd ffc2 	bl	20170 <ble_ll_conn_enqueue_pkt>
        rc = 0;
   221ec:	2000      	movs	r0, #0
    } else {
        rc = 1;
    }
    return rc;
}
   221ee:	bd70      	pop	{r4, r5, r6, pc}
            if ((connsm->conn_features & BLE_LL_FEAT_EXTENDED_REJ) == 0) {
   221f0:	f895 203f 	ldrb.w	r2, [r5, #63]	; 0x3f
   221f4:	f012 0f04 	tst.w	r2, #4
   221f8:	d104      	bne.n	22204 <ble_ll_ctrl_reject_ind_send+0x44>
        rspbuf[0] = opcode;
   221fa:	220d      	movs	r2, #13
   221fc:	701a      	strb	r2, [r3, #0]
            rspbuf[1] = err;
   221fe:	705e      	strb	r6, [r3, #1]
            len = BLE_LL_CTRL_REJ_IND_LEN + 1;
   22200:	2302      	movs	r3, #2
   22202:	e7ef      	b.n	221e4 <ble_ll_ctrl_reject_ind_send+0x24>
        rspbuf[0] = opcode;
   22204:	2211      	movs	r2, #17
   22206:	701a      	strb	r2, [r3, #0]
   22208:	e7e9      	b.n	221de <ble_ll_ctrl_reject_ind_send+0x1e>
        rc = 1;
   2220a:	2001      	movs	r0, #1
    return rc;
   2220c:	e7ef      	b.n	221ee <ble_ll_ctrl_reject_ind_send+0x2e>

0002220e <ble_ll_ctrl_tx_done>:
 *
 * @return int
 */
int
ble_ll_ctrl_tx_done(struct os_mbuf *txpdu, struct ble_ll_conn_sm *connsm)
{
   2220e:	b538      	push	{r3, r4, r5, lr}
   22210:	4604      	mov	r4, r0
    int rc;
    uint8_t opcode;

    rc = 0;
    opcode = txpdu->om_data[0];
   22212:	6802      	ldr	r2, [r0, #0]
   22214:	7813      	ldrb	r3, [r2, #0]
    switch (opcode) {
   22216:	3b02      	subs	r3, #2
   22218:	2b0f      	cmp	r3, #15
   2221a:	d85a      	bhi.n	222d2 <ble_ll_ctrl_tx_done+0xc4>
   2221c:	e8df f003 	tbb	[pc, r3]
   22220:	59373208 	.word	0x59373208
   22224:	5959593d 	.word	0x5959593d
   22228:	2d594f32 	.word	0x2d594f32
   2222c:	13595959 	.word	0x13595959
    case BLE_LL_CTRL_TERMINATE_IND:
        connsm->csmflags.cfbit.terminate_ind_txd = 1;
   22230:	780b      	ldrb	r3, [r1, #0]
   22232:	f043 0302 	orr.w	r3, r3, #2
   22236:	700b      	strb	r3, [r1, #0]
        rc = -1;
   22238:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
#endif
    default:
        break;
    }

    os_mbuf_free_chain(txpdu);
   2223c:	4620      	mov	r0, r4
   2223e:	f7e7 ffcf 	bl	a1e0 <os_mbuf_free_chain>
    return rc;
}
   22242:	4628      	mov	r0, r5
   22244:	bd38      	pop	{r3, r4, r5, pc}
        if (connsm->cur_ctrl_proc == BLE_LL_CTRL_PROC_CONN_PARAM_REQ) {
   22246:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
   2224a:	2b06      	cmp	r3, #6
   2224c:	d008      	beq.n	22260 <ble_ll_ctrl_tx_done+0x52>
        if (connsm->enc_data.enc_state > CONN_ENC_S_ENCRYPTED) {
   2224e:	f891 3118 	ldrb.w	r3, [r1, #280]	; 0x118
   22252:	2b02      	cmp	r3, #2
   22254:	d93f      	bls.n	222d6 <ble_ll_ctrl_tx_done+0xc8>
            connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   22256:	2301      	movs	r3, #1
   22258:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   2225c:	2500      	movs	r5, #0
   2225e:	e7ed      	b.n	2223c <ble_ll_ctrl_tx_done+0x2e>
            if (txpdu->om_data[1] == BLE_LL_CTRL_CONN_PARM_REQ &&
   22260:	7853      	ldrb	r3, [r2, #1]
   22262:	2b0f      	cmp	r3, #15
   22264:	d1f3      	bne.n	2224e <ble_ll_ctrl_tx_done+0x40>
                            txpdu->om_data[2] != BLE_ERR_LMP_COLLISION) {
   22266:	7893      	ldrb	r3, [r2, #2]
            if (txpdu->om_data[1] == BLE_LL_CTRL_CONN_PARM_REQ &&
   22268:	2b23      	cmp	r3, #35	; 0x23
   2226a:	d0f0      	beq.n	2224e <ble_ll_ctrl_tx_done+0x40>
                connsm->reject_reason = txpdu->om_data[2];
   2226c:	f881 3037 	strb.w	r3, [r1, #55]	; 0x37
                connsm->csmflags.cfbit.host_expects_upd_event = 1;
   22270:	784b      	ldrb	r3, [r1, #1]
   22272:	f043 0302 	orr.w	r3, r3, #2
   22276:	704b      	strb	r3, [r1, #1]
   22278:	e7e9      	b.n	2224e <ble_ll_ctrl_tx_done+0x40>
        connsm->enc_data.enc_state = CONN_ENC_S_UNENCRYPTED;
   2227a:	2301      	movs	r3, #1
   2227c:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   22280:	2500      	movs	r5, #0
        break;
   22282:	e7db      	b.n	2223c <ble_ll_ctrl_tx_done+0x2e>
        connsm->enc_data.enc_state = CONN_ENC_S_ENC_RSP_WAIT;
   22284:	2303      	movs	r3, #3
   22286:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   2228a:	2500      	movs	r5, #0
        break;
   2228c:	e7d6      	b.n	2223c <ble_ll_ctrl_tx_done+0x2e>
        connsm->csmflags.cfbit.send_ltk_req = 1;
   2228e:	788b      	ldrb	r3, [r1, #2]
   22290:	f043 0301 	orr.w	r3, r3, #1
   22294:	708b      	strb	r3, [r1, #2]
    rc = 0;
   22296:	2500      	movs	r5, #0
        break;
   22298:	e7d0      	b.n	2223c <ble_ll_ctrl_tx_done+0x2e>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   2229a:	79cb      	ldrb	r3, [r1, #7]
   2229c:	2b02      	cmp	r3, #2
   2229e:	d001      	beq.n	222a4 <ble_ll_ctrl_tx_done+0x96>
    rc = 0;
   222a0:	2500      	movs	r5, #0
   222a2:	e7cb      	b.n	2223c <ble_ll_ctrl_tx_done+0x2e>
            connsm->enc_data.enc_state = CONN_ENC_S_ENCRYPTED;
   222a4:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
            if (CONN_F_LE_PING_SUPP(connsm)) {
   222a8:	788b      	ldrb	r3, [r1, #2]
   222aa:	f013 0f08 	tst.w	r3, #8
   222ae:	d101      	bne.n	222b4 <ble_ll_ctrl_tx_done+0xa6>
    rc = 0;
   222b0:	2500      	movs	r5, #0
   222b2:	e7c3      	b.n	2223c <ble_ll_ctrl_tx_done+0x2e>
                ble_ll_conn_auth_pyld_timer_start(connsm);
   222b4:	4608      	mov	r0, r1
   222b6:	f7fd f8d9 	bl	1f46c <ble_ll_conn_auth_pyld_timer_start>
    rc = 0;
   222ba:	2500      	movs	r5, #0
   222bc:	e7be      	b.n	2223c <ble_ll_ctrl_tx_done+0x2e>
        if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   222be:	79cb      	ldrb	r3, [r1, #7]
   222c0:	2b02      	cmp	r3, #2
   222c2:	d001      	beq.n	222c8 <ble_ll_ctrl_tx_done+0xba>
    rc = 0;
   222c4:	2500      	movs	r5, #0
   222c6:	e7b9      	b.n	2223c <ble_ll_ctrl_tx_done+0x2e>
            connsm->enc_data.enc_state = CONN_ENC_S_PAUSE_ENC_RSP_WAIT;
   222c8:	2304      	movs	r3, #4
   222ca:	f881 3118 	strb.w	r3, [r1, #280]	; 0x118
    rc = 0;
   222ce:	2500      	movs	r5, #0
   222d0:	e7b4      	b.n	2223c <ble_ll_ctrl_tx_done+0x2e>
   222d2:	2500      	movs	r5, #0
   222d4:	e7b2      	b.n	2223c <ble_ll_ctrl_tx_done+0x2e>
   222d6:	2500      	movs	r5, #0
   222d8:	e7b0      	b.n	2223c <ble_ll_ctrl_tx_done+0x2e>

000222da <ble_ll_hci_get_num_cmd_pkts>:
 */
static uint8_t
ble_ll_hci_get_num_cmd_pkts(void)
{
    return BLE_LL_CFG_NUM_HCI_CMD_PKTS;
}
   222da:	2001      	movs	r0, #1
   222dc:	4770      	bx	lr

000222de <ble_ll_hci_rd_local_version>:
 *
 * @return int
 */
static int
ble_ll_hci_rd_local_version(uint8_t *rspbuf, uint8_t *rsplen)
{
   222de:	4603      	mov	r3, r0
    struct ble_hci_ip_rd_local_ver_rp *rsp = (void *) rspbuf;

    rsp->hci_ver = BLE_HCI_VER_BCS;
   222e0:	2209      	movs	r2, #9
   222e2:	7002      	strb	r2, [r0, #0]
    rsp->hci_rev = 0;
   222e4:	2000      	movs	r0, #0
   222e6:	7058      	strb	r0, [r3, #1]
   222e8:	7098      	strb	r0, [r3, #2]
    rsp->lmp_ver = BLE_LMP_VER_BCS;
   222ea:	70da      	strb	r2, [r3, #3]
    rsp->manufacturer = htole16(MYNEWT_VAL(BLE_LL_MFRG_ID));
   222ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   222f0:	711a      	strb	r2, [r3, #4]
   222f2:	715a      	strb	r2, [r3, #5]
    rsp->lmp_subver = 0;
   222f4:	7198      	strb	r0, [r3, #6]
   222f6:	71d8      	strb	r0, [r3, #7]

    *rsplen = sizeof(*rsp);
   222f8:	2308      	movs	r3, #8
   222fa:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   222fc:	4770      	bx	lr

000222fe <ble_ll_hci_rd_local_supp_feat>:
    /*
     * The only two bits we set here currently are (5th byte):
     *      BR/EDR not supported        (bit 5)
     *      LE supported (controller)   (bit 6)
     */
    rsp->features = htole64(0x0000006000000000);
   222fe:	2300      	movs	r3, #0
   22300:	7003      	strb	r3, [r0, #0]
   22302:	7043      	strb	r3, [r0, #1]
   22304:	7083      	strb	r3, [r0, #2]
   22306:	70c3      	strb	r3, [r0, #3]
   22308:	2260      	movs	r2, #96	; 0x60
   2230a:	7102      	strb	r2, [r0, #4]
   2230c:	7143      	strb	r3, [r0, #5]
   2230e:	7183      	strb	r3, [r0, #6]
   22310:	71c3      	strb	r3, [r0, #7]

    *rsplen = sizeof(*rsp);
   22312:	2208      	movs	r2, #8
   22314:	700a      	strb	r2, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   22316:	4618      	mov	r0, r3
   22318:	4770      	bx	lr
	...

0002231c <ble_ll_hci_rd_bd_addr>:
static int
ble_ll_hci_rd_bd_addr(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_ip_rd_bd_addr_rp *rsp = (void *) rspbuf;

    memcpy(rsp->addr, g_dev_addr, BLE_DEV_ADDR_LEN);
   2231c:	4b04      	ldr	r3, [pc, #16]	; (22330 <ble_ll_hci_rd_bd_addr+0x14>)
   2231e:	681a      	ldr	r2, [r3, #0]
   22320:	6002      	str	r2, [r0, #0]
   22322:	889b      	ldrh	r3, [r3, #4]
   22324:	8083      	strh	r3, [r0, #4]

    *rsplen = sizeof(*rsp);
   22326:	2306      	movs	r3, #6
   22328:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   2232a:	2000      	movs	r0, #0
   2232c:	4770      	bx	lr
   2232e:	bf00      	nop
   22330:	20008750 	.word	0x20008750

00022334 <ble_ll_hci_set_le_event_mask>:
static int
ble_ll_hci_set_le_event_mask(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_event_mask_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   22334:	2908      	cmp	r1, #8
   22336:	d106      	bne.n	22346 <ble_ll_hci_set_le_event_mask+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_le_event_mask = le64toh(cmd->event_mask);
   22338:	6801      	ldr	r1, [r0, #0]
   2233a:	6842      	ldr	r2, [r0, #4]
   2233c:	4b03      	ldr	r3, [pc, #12]	; (2234c <ble_ll_hci_set_le_event_mask+0x18>)
   2233e:	6019      	str	r1, [r3, #0]
   22340:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   22342:	2000      	movs	r0, #0
   22344:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22346:	2012      	movs	r0, #18
}
   22348:	4770      	bx	lr
   2234a:	bf00      	nop
   2234c:	200089e0 	.word	0x200089e0

00022350 <ble_ll_hci_le_read_bufsize>:
static int
ble_ll_hci_le_read_bufsize(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_buf_size_rp *rp = (void *) rspbuf;

    rp->data_len = htole16(g_ble_ll_data.ll_acl_pkt_size);
   22350:	4b04      	ldr	r3, [pc, #16]	; (22364 <ble_ll_hci_le_read_bufsize+0x14>)
   22352:	895a      	ldrh	r2, [r3, #10]
   22354:	8002      	strh	r2, [r0, #0]
    rp->data_packets = g_ble_ll_data.ll_num_acl_pkts;
   22356:	7a5b      	ldrb	r3, [r3, #9]
   22358:	7083      	strb	r3, [r0, #2]

    *rsplen = sizeof(*rp);
   2235a:	2303      	movs	r3, #3
   2235c:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   2235e:	2000      	movs	r0, #0
   22360:	4770      	bx	lr
   22362:	bf00      	nop
   22364:	200084d8 	.word	0x200084d8

00022368 <ble_ll_hci_le_rd_sugg_data_len>:
ble_ll_hci_le_rd_sugg_data_len(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_sugg_def_data_len_rp *rsp = (void *) rspbuf;

    /* Place the data packet length and number of packets in the buffer */
    rsp->max_tx_octets = htole16(g_ble_ll_conn_params.sugg_tx_octets);
   22368:	4b04      	ldr	r3, [pc, #16]	; (2237c <ble_ll_hci_le_rd_sugg_data_len+0x14>)
   2236a:	7a5a      	ldrb	r2, [r3, #9]
   2236c:	8002      	strh	r2, [r0, #0]
    rsp->max_tx_time = htole16(g_ble_ll_conn_params.sugg_tx_time);
   2236e:	895b      	ldrh	r3, [r3, #10]
   22370:	8043      	strh	r3, [r0, #2]

    *rsplen = sizeof(*rsp);
   22372:	2304      	movs	r3, #4
   22374:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   22376:	2000      	movs	r0, #0
   22378:	4770      	bx	lr
   2237a:	bf00      	nop
   2237c:	200087fc 	.word	0x200087fc

00022380 <ble_ll_hci_le_rd_max_data_len>:
ble_ll_hci_le_rd_max_data_len(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_max_data_len_rp *rsp = (void *)rspbuf;

    /* Place the data packet length and number of packets in the buffer */
    rsp->max_tx_octests = htole16(g_ble_ll_conn_params.supp_max_tx_octets);
   22380:	4b06      	ldr	r3, [pc, #24]	; (2239c <ble_ll_hci_le_rd_max_data_len+0x1c>)
   22382:	799a      	ldrb	r2, [r3, #6]
   22384:	8002      	strh	r2, [r0, #0]
    rsp->max_tx_time = htole16(g_ble_ll_conn_params.supp_max_tx_time);
   22386:	8a5a      	ldrh	r2, [r3, #18]
   22388:	8042      	strh	r2, [r0, #2]
    rsp->max_rx_octests = htole16(g_ble_ll_conn_params.supp_max_rx_octets);
   2238a:	79da      	ldrb	r2, [r3, #7]
   2238c:	8082      	strh	r2, [r0, #4]
    rsp->max_rx_time = htole16(g_ble_ll_conn_params.supp_max_rx_time);
   2238e:	8a9b      	ldrh	r3, [r3, #20]
   22390:	80c3      	strh	r3, [r0, #6]

    *rsplen = sizeof(*rsp);
   22392:	2308      	movs	r3, #8
   22394:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   22396:	2000      	movs	r0, #0
   22398:	4770      	bx	lr
   2239a:	bf00      	nop
   2239c:	200087fc 	.word	0x200087fc

000223a0 <ble_ll_hci_le_cmd_send_cmd_status>:
static int
ble_ll_hci_le_cmd_send_cmd_status(uint16_t ocf)
{
    int rc;

    switch (ocf) {
   223a0:	380d      	subs	r0, #13
   223a2:	2837      	cmp	r0, #55	; 0x37
   223a4:	d81f      	bhi.n	223e6 <ble_ll_hci_le_cmd_send_cmd_status+0x46>
   223a6:	e8df f000 	tbb	[pc, r0]
   223aa:	1e1c      	.short	0x1e1c
   223ac:	1e1e1e1e 	.word	0x1e1e1e1e
   223b0:	1c1e1e1c 	.word	0x1c1e1e1c
   223b4:	1e1c1e1e 	.word	0x1e1c1e1e
   223b8:	1e1e1e1e 	.word	0x1e1e1e1e
   223bc:	1e1e1e1e 	.word	0x1e1e1e1e
   223c0:	1c1c1e1e 	.word	0x1c1c1e1e
   223c4:	1e1e1e1e 	.word	0x1e1e1e1e
   223c8:	1e1e1e1e 	.word	0x1e1e1e1e
   223cc:	1c1e1e1e 	.word	0x1c1e1e1e
   223d0:	1e1e1e1e 	.word	0x1e1e1e1e
   223d4:	1e1e1e1e 	.word	0x1e1e1e1e
   223d8:	1e1e1e1e 	.word	0x1e1e1e1e
   223dc:	1e1e1e1e 	.word	0x1e1e1e1e
   223e0:	1c1c      	.short	0x1c1c
    case BLE_HCI_OCF_LE_SET_PHY:
    case BLE_HCI_OCF_LE_PERIODIC_ADV_CREATE_SYNC:
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_SCA_UPDATE)
    case BLE_HCI_OCF_LE_REQ_PEER_SCA:
#endif
        rc = 1;
   223e2:	2001      	movs	r0, #1
   223e4:	4770      	bx	lr
        break;
    default:
        rc = 0;
   223e6:	2000      	movs	r0, #0
        break;
    }
    return rc;
}
   223e8:	4770      	bx	lr
	...

000223ec <ble_ll_read_rf_path_compensation>:
static int
ble_ll_read_rf_path_compensation(uint8_t *rspbuf, uint8_t *rsplen)
{
    struct ble_hci_le_rd_rf_path_compensation_rp *rsp = (void *) rspbuf;

    rsp->rx_path_compensation = htole16(rx_path_pwr_compensation);
   223ec:	4b04      	ldr	r3, [pc, #16]	; (22400 <ble_ll_read_rf_path_compensation+0x14>)
   223ee:	881b      	ldrh	r3, [r3, #0]
   223f0:	8043      	strh	r3, [r0, #2]
    rsp->tx_path_compensation = htole16(tx_path_pwr_compensation);
   223f2:	4b04      	ldr	r3, [pc, #16]	; (22404 <ble_ll_read_rf_path_compensation+0x18>)
   223f4:	881b      	ldrh	r3, [r3, #0]
   223f6:	8003      	strh	r3, [r0, #0]

    *rsplen = sizeof(*rsp);;
   223f8:	2304      	movs	r3, #4
   223fa:	700b      	strb	r3, [r1, #0]
    return BLE_ERR_SUCCESS;
}
   223fc:	2000      	movs	r0, #0
   223fe:	4770      	bx	lr
   22400:	200089e8 	.word	0x200089e8
   22404:	200089ea 	.word	0x200089ea

00022408 <ble_ll_hci_cb_set_event_mask>:
static int
ble_ll_hci_cb_set_event_mask(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_cb_set_event_mask_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   22408:	2908      	cmp	r1, #8
   2240a:	d106      	bne.n	2241a <ble_ll_hci_cb_set_event_mask+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_event_mask = le64toh(cmd->event_mask);
   2240c:	6801      	ldr	r1, [r0, #0]
   2240e:	6842      	ldr	r2, [r0, #4]
   22410:	4b03      	ldr	r3, [pc, #12]	; (22420 <ble_ll_hci_cb_set_event_mask+0x18>)
   22412:	6019      	str	r1, [r3, #0]
   22414:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   22416:	2000      	movs	r0, #0
   22418:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2241a:	2012      	movs	r0, #18
}
   2241c:	4770      	bx	lr
   2241e:	bf00      	nop
   22420:	200089d0 	.word	0x200089d0

00022424 <ble_ll_hci_cb_set_event_mask2>:
static int
ble_ll_hci_cb_set_event_mask2(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_cb_set_event_mask2_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof (*cmd)) {
   22424:	2908      	cmp	r1, #8
   22426:	d106      	bne.n	22436 <ble_ll_hci_cb_set_event_mask2+0x12>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_hci_event_mask2 = le64toh(cmd->event_mask2);
   22428:	6801      	ldr	r1, [r0, #0]
   2242a:	6842      	ldr	r2, [r0, #4]
   2242c:	4b03      	ldr	r3, [pc, #12]	; (2243c <ble_ll_hci_cb_set_event_mask2+0x18>)
   2242e:	6019      	str	r1, [r3, #0]
   22430:	605a      	str	r2, [r3, #4]

    return BLE_ERR_SUCCESS;
   22432:	2000      	movs	r0, #0
   22434:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22436:	2012      	movs	r0, #18
}
   22438:	4770      	bx	lr
   2243a:	bf00      	nop
   2243c:	200089d8 	.word	0x200089d8

00022440 <ble_ll_hci_disconnect>:
    if (len != sizeof (*cmd)) {
   22440:	2903      	cmp	r1, #3
   22442:	d001      	beq.n	22448 <ble_ll_hci_disconnect+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   22444:	2012      	movs	r0, #18
}
   22446:	4770      	bx	lr
{
   22448:	b508      	push	{r3, lr}
    return ble_ll_conn_hci_disconnect_cmd(cmd);
   2244a:	f7fe fc77 	bl	20d3c <ble_ll_conn_hci_disconnect_cmd>
}
   2244e:	bd08      	pop	{r3, pc}

00022450 <ble_ll_hci_link_ctrl_cmd_proc>:
{
   22450:	b508      	push	{r3, lr}
    switch (ocf) {
   22452:	2a06      	cmp	r2, #6
   22454:	d003      	beq.n	2245e <ble_ll_hci_link_ctrl_cmd_proc+0xe>
   22456:	2a1d      	cmp	r2, #29
   22458:	d006      	beq.n	22468 <ble_ll_hci_link_ctrl_cmd_proc+0x18>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   2245a:	2001      	movs	r0, #1
    return rc;
   2245c:	e003      	b.n	22466 <ble_ll_hci_link_ctrl_cmd_proc+0x16>
        rc = ble_ll_hci_disconnect(cmdbuf, len);
   2245e:	f7ff ffef 	bl	22440 <ble_ll_hci_disconnect>
        rc += (BLE_ERR_MAX + 1);
   22462:	f500 7080 	add.w	r0, r0, #256	; 0x100
}
   22466:	bd08      	pop	{r3, pc}
        rc = ble_ll_conn_hci_rd_rem_ver_cmd(cmdbuf, len);
   22468:	f7fe fcb4 	bl	20dd4 <ble_ll_conn_hci_rd_rem_ver_cmd>
        rc += (BLE_ERR_MAX + 1);
   2246c:	f500 7080 	add.w	r0, r0, #256	; 0x100
        break;
   22470:	e7f9      	b.n	22466 <ble_ll_hci_link_ctrl_cmd_proc+0x16>

00022472 <ble_ll_hci_ctlr_bb_cmd_proc>:

static int
ble_ll_hci_ctlr_bb_cmd_proc(const uint8_t *cmdbuf, uint8_t len, uint16_t ocf,
                            uint8_t *rspbuf, uint8_t *rsplen)
{
   22472:	b510      	push	{r4, lr}
    int rc;

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    switch (ocf) {
   22474:	2a63      	cmp	r2, #99	; 0x63
   22476:	d015      	beq.n	224a4 <ble_ll_hci_ctlr_bb_cmd_proc+0x32>
   22478:	461c      	mov	r4, r3
   2247a:	d807      	bhi.n	2248c <ble_ll_hci_ctlr_bb_cmd_proc+0x1a>
   2247c:	2a01      	cmp	r2, #1
   2247e:	d00e      	beq.n	2249e <ble_ll_hci_ctlr_bb_cmd_proc+0x2c>
   22480:	2a03      	cmp	r2, #3
   22482:	d117      	bne.n	224b4 <ble_ll_hci_ctlr_bb_cmd_proc+0x42>
    case BLE_HCI_OCF_CB_SET_EVENT_MASK:
        rc = ble_ll_hci_cb_set_event_mask(cmdbuf, len);
        break;
    case BLE_HCI_OCF_CB_RESET:
        if (len == 0) {
   22484:	b9c1      	cbnz	r1, 224b8 <ble_ll_hci_ctlr_bb_cmd_proc+0x46>
            rc = ble_ll_reset();
   22486:	f7fa ff0f 	bl	1d2a8 <ble_ll_reset>
   2248a:	e00a      	b.n	224a2 <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
    switch (ocf) {
   2248c:	2a7b      	cmp	r2, #123	; 0x7b
   2248e:	d00c      	beq.n	224aa <ble_ll_hci_ctlr_bb_cmd_proc+0x38>
   22490:	2a7c      	cmp	r2, #124	; 0x7c
   22492:	d10f      	bne.n	224b4 <ble_ll_hci_ctlr_bb_cmd_proc+0x42>
#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_PING)
    case BLE_HCI_OCF_CB_RD_AUTH_PYLD_TMO:
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
        break;
    case BLE_HCI_OCF_CB_WR_AUTH_PYLD_TMO:
        rc = ble_ll_conn_hci_wr_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
   22494:	9b02      	ldr	r3, [sp, #8]
   22496:	4622      	mov	r2, r4
   22498:	f7fe fdec 	bl	21074 <ble_ll_conn_hci_wr_auth_pyld_tmo>
        break;
   2249c:	e001      	b.n	224a2 <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
        rc = ble_ll_hci_cb_set_event_mask(cmdbuf, len);
   2249e:	f7ff ffb3 	bl	22408 <ble_ll_hci_cb_set_event_mask>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    return rc;
}
   224a2:	bd10      	pop	{r4, pc}
        rc = ble_ll_hci_cb_set_event_mask2(cmdbuf, len);
   224a4:	f7ff ffbe 	bl	22424 <ble_ll_hci_cb_set_event_mask2>
        break;
   224a8:	e7fb      	b.n	224a2 <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
        rc = ble_ll_conn_hci_rd_auth_pyld_tmo(cmdbuf, len, rspbuf, rsplen);
   224aa:	9b02      	ldr	r3, [sp, #8]
   224ac:	4622      	mov	r2, r4
   224ae:	f7fe fdc8 	bl	21042 <ble_ll_conn_hci_rd_auth_pyld_tmo>
        break;
   224b2:	e7f6      	b.n	224a2 <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   224b4:	2001      	movs	r0, #1
   224b6:	e7f4      	b.n	224a2 <ble_ll_hci_ctlr_bb_cmd_proc+0x30>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   224b8:	2012      	movs	r0, #18
    return rc;
   224ba:	e7f2      	b.n	224a2 <ble_ll_hci_ctlr_bb_cmd_proc+0x30>

000224bc <ble_ll_hci_rd_local_supp_cmd>:
{
   224bc:	b4f0      	push	{r4, r5, r6, r7}
    memset(rsp->commands, 0, sizeof(rsp->commands));
   224be:	2300      	movs	r3, #0
   224c0:	62c3      	str	r3, [r0, #44]	; 0x2c
   224c2:	6303      	str	r3, [r0, #48]	; 0x30
   224c4:	6343      	str	r3, [r0, #52]	; 0x34
   224c6:	6383      	str	r3, [r0, #56]	; 0x38
   224c8:	63c3      	str	r3, [r0, #60]	; 0x3c
    memcpy(rsp->commands, g_ble_ll_supp_cmds, sizeof(g_ble_ll_supp_cmds));
   224ca:	4b0e      	ldr	r3, [pc, #56]	; (22504 <ble_ll_hci_rd_local_supp_cmd+0x48>)
   224cc:	f103 0220 	add.w	r2, r3, #32
   224d0:	681f      	ldr	r7, [r3, #0]
   224d2:	685e      	ldr	r6, [r3, #4]
   224d4:	689d      	ldr	r5, [r3, #8]
   224d6:	68dc      	ldr	r4, [r3, #12]
   224d8:	6007      	str	r7, [r0, #0]
   224da:	6046      	str	r6, [r0, #4]
   224dc:	6085      	str	r5, [r0, #8]
   224de:	60c4      	str	r4, [r0, #12]
   224e0:	3310      	adds	r3, #16
   224e2:	3010      	adds	r0, #16
   224e4:	4293      	cmp	r3, r2
   224e6:	d1f3      	bne.n	224d0 <ble_ll_hci_rd_local_supp_cmd+0x14>
   224e8:	681d      	ldr	r5, [r3, #0]
   224ea:	685c      	ldr	r4, [r3, #4]
   224ec:	689a      	ldr	r2, [r3, #8]
   224ee:	6005      	str	r5, [r0, #0]
   224f0:	6044      	str	r4, [r0, #4]
   224f2:	6082      	str	r2, [r0, #8]
   224f4:	7b1b      	ldrb	r3, [r3, #12]
   224f6:	7303      	strb	r3, [r0, #12]
    *rsplen = sizeof(*rsp);
   224f8:	2340      	movs	r3, #64	; 0x40
   224fa:	700b      	strb	r3, [r1, #0]
}
   224fc:	2000      	movs	r0, #0
   224fe:	bcf0      	pop	{r4, r5, r6, r7}
   22500:	4770      	bx	lr
   22502:	bf00      	nop
   22504:	0002984c 	.word	0x0002984c

00022508 <ble_ll_hci_info_params_cmd_proc>:

static int
ble_ll_hci_info_params_cmd_proc(const uint8_t *cmdbuf, uint8_t len,
                                uint16_t ocf, uint8_t *rspbuf, uint8_t *rsplen)
{
   22508:	b508      	push	{r3, lr}
    int rc;

    /* Assume error; if all pass rc gets set to 0 */
    rc = BLE_ERR_INV_HCI_CMD_PARMS;

    switch (ocf) {
   2250a:	3a01      	subs	r2, #1
   2250c:	2a08      	cmp	r2, #8
   2250e:	d81e      	bhi.n	2254e <ble_ll_hci_info_params_cmd_proc+0x46>
   22510:	e8df f002 	tbb	[pc, r2]
   22514:	1d110b05 	.word	0x1d110b05
   22518:	1d1d1d1d 	.word	0x1d1d1d1d
   2251c:	17          	.byte	0x17
   2251d:	00          	.byte	0x00
    case BLE_HCI_OCF_IP_RD_LOCAL_VER:
        if (len == 0) {
   2251e:	b9c1      	cbnz	r1, 22552 <ble_ll_hci_info_params_cmd_proc+0x4a>
            rc = ble_ll_hci_rd_local_version(rspbuf, rsplen);
   22520:	9902      	ldr	r1, [sp, #8]
   22522:	4618      	mov	r0, r3
   22524:	f7ff fedb 	bl	222de <ble_ll_hci_rd_local_version>
   22528:	e012      	b.n	22550 <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_CMD:
        if (len == 0) {
   2252a:	b9a1      	cbnz	r1, 22556 <ble_ll_hci_info_params_cmd_proc+0x4e>
            rc = ble_ll_hci_rd_local_supp_cmd(rspbuf, rsplen);
   2252c:	9902      	ldr	r1, [sp, #8]
   2252e:	4618      	mov	r0, r3
   22530:	f7ff ffc4 	bl	224bc <ble_ll_hci_rd_local_supp_cmd>
   22534:	e00c      	b.n	22550 <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    case BLE_HCI_OCF_IP_RD_LOC_SUPP_FEAT:
        if (len == 0) {
   22536:	b981      	cbnz	r1, 2255a <ble_ll_hci_info_params_cmd_proc+0x52>
            rc = ble_ll_hci_rd_local_supp_feat(rspbuf, rsplen);
   22538:	9902      	ldr	r1, [sp, #8]
   2253a:	4618      	mov	r0, r3
   2253c:	f7ff fedf 	bl	222fe <ble_ll_hci_rd_local_supp_feat>
   22540:	e006      	b.n	22550 <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    case BLE_HCI_OCF_IP_RD_BD_ADDR:
        if (len == 0) {
   22542:	b961      	cbnz	r1, 2255e <ble_ll_hci_info_params_cmd_proc+0x56>
            rc = ble_ll_hci_rd_bd_addr(rspbuf, rsplen);
   22544:	9902      	ldr	r1, [sp, #8]
   22546:	4618      	mov	r0, r3
   22548:	f7ff fee8 	bl	2231c <ble_ll_hci_rd_bd_addr>
   2254c:	e000      	b.n	22550 <ble_ll_hci_info_params_cmd_proc+0x48>
        }
        break;
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   2254e:	2001      	movs	r0, #1
        break;
    }

    return rc;
}
   22550:	bd08      	pop	{r3, pc}
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22552:	2012      	movs	r0, #18
   22554:	e7fc      	b.n	22550 <ble_ll_hci_info_params_cmd_proc+0x48>
   22556:	2012      	movs	r0, #18
   22558:	e7fa      	b.n	22550 <ble_ll_hci_info_params_cmd_proc+0x48>
   2255a:	2012      	movs	r0, #18
   2255c:	e7f8      	b.n	22550 <ble_ll_hci_info_params_cmd_proc+0x48>
   2255e:	2012      	movs	r0, #18
    return rc;
   22560:	e7f6      	b.n	22550 <ble_ll_hci_info_params_cmd_proc+0x48>

00022562 <ble_ll_hci_status_params_cmd_proc>:
                                  uint16_t ocf, uint8_t *rspbuf,
                                  uint8_t *rsplen)
{
    int rc;

    switch (ocf) {
   22562:	2a05      	cmp	r2, #5
   22564:	d001      	beq.n	2256a <ble_ll_hci_status_params_cmd_proc+0x8>
    case BLE_HCI_OCF_RD_RSSI:
        rc = ble_ll_conn_hci_rd_rssi(cmdbuf, len, rspbuf, rsplen);
        break;
    default:
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   22566:	2001      	movs	r0, #1
        break;
    }

    return rc;
}
   22568:	4770      	bx	lr
{
   2256a:	b508      	push	{r3, lr}
   2256c:	461a      	mov	r2, r3
        rc = ble_ll_conn_hci_rd_rssi(cmdbuf, len, rspbuf, rsplen);
   2256e:	9b02      	ldr	r3, [sp, #8]
   22570:	f7fe fc51 	bl	20e16 <ble_ll_conn_hci_rd_rssi>
}
   22574:	bd08      	pop	{r3, pc}

00022576 <ble_ll_hci_le_read_local_features>:
{
   22576:	b538      	push	{r3, r4, r5, lr}
   22578:	4604      	mov	r4, r0
   2257a:	460d      	mov	r5, r1
    rsp->features = htole64(ble_ll_read_supp_features());
   2257c:	f7fa fe8e 	bl	1d29c <ble_ll_read_supp_features>
   22580:	6020      	str	r0, [r4, #0]
   22582:	6061      	str	r1, [r4, #4]
    *rsplen = sizeof(*rsp);
   22584:	2308      	movs	r3, #8
   22586:	702b      	strb	r3, [r5, #0]
}
   22588:	2000      	movs	r0, #0
   2258a:	bd38      	pop	{r3, r4, r5, pc}

0002258c <ble_ll_hci_le_encrypt>:
{
   2258c:	b570      	push	{r4, r5, r6, lr}
   2258e:	b08c      	sub	sp, #48	; 0x30
   22590:	4604      	mov	r4, r0
   22592:	4616      	mov	r6, r2
   22594:	461d      	mov	r5, r3
    swap_buf(ecb.key, cmd->key, BLE_ENC_BLOCK_SIZE);
   22596:	2210      	movs	r2, #16
   22598:	4601      	mov	r1, r0
   2259a:	4668      	mov	r0, sp
   2259c:	f7f9 fb9d 	bl	1bcda <swap_buf>
    swap_buf(ecb.plain_text, cmd->data, BLE_ENC_BLOCK_SIZE);
   225a0:	2210      	movs	r2, #16
   225a2:	18a1      	adds	r1, r4, r2
   225a4:	eb0d 0002 	add.w	r0, sp, r2
   225a8:	f7f9 fb97 	bl	1bcda <swap_buf>
    rc = ble_hw_encrypt_block(&ecb);
   225ac:	4668      	mov	r0, sp
   225ae:	f003 f9bf 	bl	25930 <ble_hw_encrypt_block>
    if (!rc) {
   225b2:	b950      	cbnz	r0, 225ca <ble_ll_hci_le_encrypt+0x3e>
   225b4:	4604      	mov	r4, r0
        swap_buf(rsp->data, ecb.cipher_text, BLE_ENC_BLOCK_SIZE);
   225b6:	2210      	movs	r2, #16
   225b8:	a908      	add	r1, sp, #32
   225ba:	4630      	mov	r0, r6
   225bc:	f7f9 fb8d 	bl	1bcda <swap_buf>
        *rsplen = sizeof(*rsp);
   225c0:	2310      	movs	r3, #16
   225c2:	702b      	strb	r3, [r5, #0]
}
   225c4:	4620      	mov	r0, r4
   225c6:	b00c      	add	sp, #48	; 0x30
   225c8:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_ERR_CTLR_BUSY;
   225ca:	243a      	movs	r4, #58	; 0x3a
    return rc;
   225cc:	e7fa      	b.n	225c4 <ble_ll_hci_le_encrypt+0x38>

000225ce <ble_ll_hci_le_rand>:
{
   225ce:	b510      	push	{r4, lr}
   225d0:	460c      	mov	r4, r1
    ble_ll_rand_data_get((uint8_t *)&rsp->random_number,
   225d2:	2108      	movs	r1, #8
   225d4:	f000 fca0 	bl	22f18 <ble_ll_rand_data_get>
    *rsplen = sizeof(*rsp);
   225d8:	2308      	movs	r3, #8
   225da:	7023      	strb	r3, [r4, #0]
}
   225dc:	2000      	movs	r0, #0
   225de:	bd10      	pop	{r4, pc}

000225e0 <ble_ll_hci_le_read_supp_states>:
{
   225e0:	b538      	push	{r3, r4, r5, lr}
   225e2:	4604      	mov	r4, r0
   225e4:	460d      	mov	r5, r1
    rsp->states = htole64(ble_ll_read_supp_states());
   225e6:	f7fa fe53 	bl	1d290 <ble_ll_read_supp_states>
   225ea:	6020      	str	r0, [r4, #0]
   225ec:	6061      	str	r1, [r4, #4]
    *rsplen = sizeof(*rsp);
   225ee:	2308      	movs	r3, #8
   225f0:	702b      	strb	r3, [r5, #0]
}
   225f2:	2000      	movs	r0, #0
   225f4:	bd38      	pop	{r3, r4, r5, pc}
	...

000225f8 <ble_ll_hci_le_wr_sugg_data_len>:
    if (len != sizeof(*cmd)) {
   225f8:	2904      	cmp	r1, #4
   225fa:	d001      	beq.n	22600 <ble_ll_hci_le_wr_sugg_data_len+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   225fc:	2012      	movs	r0, #18
}
   225fe:	4770      	bx	lr
{
   22600:	b570      	push	{r4, r5, r6, lr}
    tx_oct = le16toh(cmd->max_tx_octets);
   22602:	8804      	ldrh	r4, [r0, #0]
    tx_time = le16toh(cmd->max_tx_time);
   22604:	8845      	ldrh	r5, [r0, #2]
   22606:	b2ae      	uxth	r6, r5
    if (ble_ll_chk_txrx_octets(tx_oct) && ble_ll_chk_txrx_time(tx_time)) {
   22608:	4620      	mov	r0, r4
   2260a:	f7fa fc50 	bl	1ceae <ble_ll_chk_txrx_octets>
   2260e:	b1c8      	cbz	r0, 22644 <ble_ll_hci_le_wr_sugg_data_len+0x4c>
   22610:	4630      	mov	r0, r6
   22612:	f7fa fc54 	bl	1cebe <ble_ll_chk_txrx_time>
   22616:	b1b8      	cbz	r0, 22648 <ble_ll_hci_le_wr_sugg_data_len+0x50>
        g_ble_ll_conn_params.sugg_tx_octets = (uint8_t)tx_oct;
   22618:	4b0c      	ldr	r3, [pc, #48]	; (2264c <ble_ll_hci_le_wr_sugg_data_len+0x54>)
   2261a:	725c      	strb	r4, [r3, #9]
        g_ble_ll_conn_params.sugg_tx_time = tx_time;
   2261c:	815d      	strh	r5, [r3, #10]
                        min(tx_oct, g_ble_ll_conn_params.supp_max_tx_octets);
   2261e:	799a      	ldrb	r2, [r3, #6]
   22620:	4294      	cmp	r4, r2
   22622:	bf28      	it	cs
   22624:	4614      	movcs	r4, r2
        g_ble_ll_conn_params.conn_init_max_tx_octets =
   22626:	721c      	strb	r4, [r3, #8]
                        min(tx_time, g_ble_ll_conn_params.supp_max_tx_time);
   22628:	8a58      	ldrh	r0, [r3, #18]
        g_ble_ll_conn_params.conn_init_max_tx_time =
   2262a:	42b0      	cmp	r0, r6
   2262c:	bf28      	it	cs
   2262e:	4630      	movcs	r0, r6
   22630:	8198      	strh	r0, [r3, #12]
                                min(BLE_LL_CONN_SUPP_TIME_MAX_UNCODED,
   22632:	f640 0248 	movw	r2, #2120	; 0x848
   22636:	4282      	cmp	r2, r0
   22638:	bf28      	it	cs
   2263a:	4602      	movcs	r2, r0
        g_ble_ll_conn_params.conn_init_max_tx_time_uncoded =
   2263c:	81da      	strh	r2, [r3, #14]
        g_ble_ll_conn_params.conn_init_max_tx_time_coded =
   2263e:	8218      	strh	r0, [r3, #16]
        rc = BLE_ERR_SUCCESS;
   22640:	2000      	movs	r0, #0
   22642:	e000      	b.n	22646 <ble_ll_hci_le_wr_sugg_data_len+0x4e>
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22644:	2012      	movs	r0, #18
}
   22646:	bd70      	pop	{r4, r5, r6, pc}
        rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22648:	2012      	movs	r0, #18
   2264a:	e7fc      	b.n	22646 <ble_ll_hci_le_wr_sugg_data_len+0x4e>
   2264c:	200087fc 	.word	0x200087fc

00022650 <ble_ll_read_tx_power>:
{
   22650:	b538      	push	{r3, r4, r5, lr}
   22652:	4604      	mov	r4, r0
   22654:	460d      	mov	r5, r1
    rsp->min_tx_power = ble_phy_txpower_round(-127);
   22656:	f06f 007e 	mvn.w	r0, #126	; 0x7e
   2265a:	f003 fd6b 	bl	26134 <ble_phy_txpower_round>
   2265e:	7020      	strb	r0, [r4, #0]
    rsp->max_tx_power = ble_phy_txpower_round(126);
   22660:	207e      	movs	r0, #126	; 0x7e
   22662:	f003 fd67 	bl	26134 <ble_phy_txpower_round>
   22666:	7060      	strb	r0, [r4, #1]
    *rsplen = sizeof(*rsp);
   22668:	2302      	movs	r3, #2
   2266a:	702b      	strb	r3, [r5, #0]
}
   2266c:	2000      	movs	r0, #0
   2266e:	bd38      	pop	{r3, r4, r5, pc}

00022670 <ble_ll_write_rf_path_compensation>:
    if (len != sizeof(*cmd)) {
   22670:	2904      	cmp	r1, #4
   22672:	d121      	bne.n	226b8 <ble_ll_write_rf_path_compensation+0x48>
{
   22674:	b510      	push	{r4, lr}
    tx = le16toh(cmd->tx_path_compensation);
   22676:	f9b0 3000 	ldrsh.w	r3, [r0]
   2267a:	461c      	mov	r4, r3
    rx = le16toh(cmd->rx_path_compensation);
   2267c:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
   22680:	b20a      	sxth	r2, r1
    if ((tx < -1280) || (tx > 1280) || (rx < -1280) || (rx > 1280)) {
   22682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
   22686:	b29b      	uxth	r3, r3
   22688:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
   2268c:	d816      	bhi.n	226bc <ble_ll_write_rf_path_compensation+0x4c>
   2268e:	f512 6fa0 	cmn.w	r2, #1280	; 0x500
   22692:	db15      	blt.n	226c0 <ble_ll_write_rf_path_compensation+0x50>
   22694:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
   22698:	dc14      	bgt.n	226c4 <ble_ll_write_rf_path_compensation+0x54>
    tx_path_pwr_compensation = tx;
   2269a:	4b0b      	ldr	r3, [pc, #44]	; (226c8 <ble_ll_write_rf_path_compensation+0x58>)
   2269c:	801c      	strh	r4, [r3, #0]
    rx_path_pwr_compensation = rx;
   2269e:	4b0b      	ldr	r3, [pc, #44]	; (226cc <ble_ll_write_rf_path_compensation+0x5c>)
   226a0:	8019      	strh	r1, [r3, #0]
    ble_phy_set_rx_pwr_compensation(rx_path_pwr_compensation / 10);
   226a2:	480b      	ldr	r0, [pc, #44]	; (226d0 <ble_ll_write_rf_path_compensation+0x60>)
   226a4:	fb80 3002 	smull	r3, r0, r0, r2
   226a8:	17d2      	asrs	r2, r2, #31
   226aa:	ebc2 00a0 	rsb	r0, r2, r0, asr #2
   226ae:	b240      	sxtb	r0, r0
   226b0:	f003 fd76 	bl	261a0 <ble_phy_set_rx_pwr_compensation>
    return BLE_ERR_SUCCESS;
   226b4:	2000      	movs	r0, #0
   226b6:	e002      	b.n	226be <ble_ll_write_rf_path_compensation+0x4e>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   226b8:	2012      	movs	r0, #18
}
   226ba:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   226bc:	2012      	movs	r0, #18
}
   226be:	bd10      	pop	{r4, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   226c0:	2012      	movs	r0, #18
   226c2:	e7fc      	b.n	226be <ble_ll_write_rf_path_compensation+0x4e>
   226c4:	2012      	movs	r0, #18
   226c6:	e7fa      	b.n	226be <ble_ll_write_rf_path_compensation+0x4e>
   226c8:	200089ea 	.word	0x200089ea
   226cc:	200089e8 	.word	0x200089e8
   226d0:	66666667 	.word	0x66666667

000226d4 <ble_ll_hci_le_cmd_proc>:
{
   226d4:	b538      	push	{r3, r4, r5, lr}
   226d6:	4615      	mov	r5, r2
   226d8:	461a      	mov	r2, r3
    switch (ocf) {
   226da:	1e6b      	subs	r3, r5, #1
   226dc:	2b4d      	cmp	r3, #77	; 0x4d
   226de:	f200 8152 	bhi.w	22986 <ble_ll_hci_le_cmd_proc+0x2b2>
   226e2:	e8df f013 	tbh	[pc, r3, lsl #1]
   226e6:	004e      	.short	0x004e
   226e8:	0064005b 	.word	0x0064005b
   226ec:	006d0150 	.word	0x006d0150
   226f0:	00760072 	.word	0x00760072
   226f4:	0083007f 	.word	0x0083007f
   226f8:	008b0087 	.word	0x008b0087
   226fc:	0093008f 	.word	0x0093008f
   22700:	009f0097 	.word	0x009f0097
   22704:	00af00a8 	.word	0x00af00a8
   22708:	00b700b3 	.word	0x00b700b3
   2270c:	00bf00bb 	.word	0x00bf00bb
   22710:	00c800c4 	.word	0x00c800c4
   22714:	00d600cd 	.word	0x00d600cd
   22718:	00df00da 	.word	0x00df00da
   2271c:	015000e4 	.word	0x015000e4
   22720:	01500150 	.word	0x01500150
   22724:	00f200ed 	.word	0x00f200ed
   22728:	00fc00f7 	.word	0x00fc00f7
   2272c:	01500105 	.word	0x01500105
   22730:	01090150 	.word	0x01090150
   22734:	0111010d 	.word	0x0111010d
   22738:	01210118 	.word	0x01210118
   2273c:	012b0126 	.word	0x012b0126
   22740:	0133012f 	.word	0x0133012f
   22744:	01500150 	.word	0x01500150
   22748:	01500150 	.word	0x01500150
   2274c:	01500150 	.word	0x01500150
   22750:	01500150 	.word	0x01500150
   22754:	01500150 	.word	0x01500150
   22758:	01500150 	.word	0x01500150
   2275c:	01500150 	.word	0x01500150
   22760:	01500150 	.word	0x01500150
   22764:	01500150 	.word	0x01500150
   22768:	01500150 	.word	0x01500150
   2276c:	01500150 	.word	0x01500150
   22770:	01500150 	.word	0x01500150
   22774:	01500150 	.word	0x01500150
   22778:	013c0150 	.word	0x013c0150
   2277c:	01480142 	.word	0x01480142
   22780:	014c      	.short	0x014c
        rc = ble_ll_hci_set_le_event_mask(cmdbuf, len);
   22782:	f7ff fdd7 	bl	22334 <ble_ll_hci_set_le_event_mask>
   22786:	4604      	mov	r4, r0
    if (ble_ll_hci_le_cmd_send_cmd_status(ocf) || rc == BLE_ERR_UNKNOWN_HCI_CMD) {
   22788:	4628      	mov	r0, r5
   2278a:	f7ff fe09 	bl	223a0 <ble_ll_hci_le_cmd_send_cmd_status>
   2278e:	b908      	cbnz	r0, 22794 <ble_ll_hci_le_cmd_proc+0xc0>
   22790:	2c01      	cmp	r4, #1
   22792:	d101      	bne.n	22798 <ble_ll_hci_le_cmd_proc+0xc4>
        rc += (BLE_ERR_MAX + 1);
   22794:	f504 7480 	add.w	r4, r4, #256	; 0x100
}
   22798:	4620      	mov	r0, r4
   2279a:	bd38      	pop	{r3, r4, r5, pc}
        if (len == 0) {
   2279c:	b109      	cbz	r1, 227a2 <ble_ll_hci_le_cmd_proc+0xce>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2279e:	2412      	movs	r4, #18
   227a0:	e7f2      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_read_bufsize(rspbuf, rsplen);
   227a2:	9904      	ldr	r1, [sp, #16]
   227a4:	4610      	mov	r0, r2
   227a6:	f7ff fdd3 	bl	22350 <ble_ll_hci_le_read_bufsize>
   227aa:	4604      	mov	r4, r0
   227ac:	e7ec      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   227ae:	b109      	cbz	r1, 227b4 <ble_ll_hci_le_cmd_proc+0xe0>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   227b0:	2412      	movs	r4, #18
   227b2:	e7e9      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_read_local_features(rspbuf, rsplen);
   227b4:	9904      	ldr	r1, [sp, #16]
   227b6:	4610      	mov	r0, r2
   227b8:	f7ff fedd 	bl	22576 <ble_ll_hci_le_read_local_features>
   227bc:	4604      	mov	r4, r0
   227be:	e7e3      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_set_random_addr(cmdbuf, len, false);
   227c0:	2200      	movs	r2, #0
   227c2:	f7fa fc0b 	bl	1cfdc <ble_ll_set_random_addr>
   227c6:	4604      	mov	r4, r0
        break;
   227c8:	e7de      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_adv_set_adv_params(cmdbuf, len);
   227ca:	f7fb fd13 	bl	1e1f4 <ble_ll_adv_set_adv_params>
   227ce:	4604      	mov	r4, r0
        break;
   227d0:	e7da      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   227d2:	b109      	cbz	r1, 227d8 <ble_ll_hci_le_cmd_proc+0x104>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   227d4:	2412      	movs	r4, #18
   227d6:	e7d7      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_adv_read_txpwr(rspbuf, rsplen);
   227d8:	9904      	ldr	r1, [sp, #16]
   227da:	4610      	mov	r0, r2
   227dc:	f7fb fd8c 	bl	1e2f8 <ble_ll_adv_read_txpwr>
   227e0:	4604      	mov	r4, r0
   227e2:	e7d1      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_set_adv_data(cmdbuf, len);
   227e4:	f7fb fdab 	bl	1e33e <ble_ll_hci_set_adv_data>
   227e8:	4604      	mov	r4, r0
        break;
   227ea:	e7cd      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_set_scan_rsp_data(cmdbuf, len);
   227ec:	f7fb fd97 	bl	1e31e <ble_ll_hci_set_scan_rsp_data>
   227f0:	4604      	mov	r4, r0
        break;
   227f2:	e7c9      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_adv_set_enable(cmdbuf, len);
   227f4:	f7fb fd86 	bl	1e304 <ble_ll_hci_adv_set_enable>
   227f8:	4604      	mov	r4, r0
        break;
   227fa:	e7c5      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_scan_set_scan_params(cmdbuf, len);
   227fc:	f002 f8b2 	bl	24964 <ble_ll_scan_set_scan_params>
   22800:	4604      	mov	r4, r0
        break;
   22802:	e7c1      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_scan_set_enable(cmdbuf, len);
   22804:	f002 f8fc 	bl	24a00 <ble_ll_hci_scan_set_enable>
   22808:	4604      	mov	r4, r0
        break;
   2280a:	e7bd      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_create(cmdbuf, len);
   2280c:	f7fe f8a8 	bl	20960 <ble_ll_conn_create>
   22810:	4604      	mov	r4, r0
        break;
   22812:	e7b9      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   22814:	b109      	cbz	r1, 2281a <ble_ll_hci_le_cmd_proc+0x146>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22816:	2412      	movs	r4, #18
   22818:	e7b6      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_conn_create_cancel(cb);
   2281a:	9805      	ldr	r0, [sp, #20]
   2281c:	f7fe fa6a 	bl	20cf4 <ble_ll_conn_create_cancel>
   22820:	4604      	mov	r4, r0
   22822:	e7b1      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   22824:	b109      	cbz	r1, 2282a <ble_ll_hci_le_cmd_proc+0x156>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22826:	2412      	movs	r4, #18
   22828:	e7ae      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_whitelist_read_size(rspbuf, rsplen);
   2282a:	9904      	ldr	r1, [sp, #16]
   2282c:	4610      	mov	r0, r2
   2282e:	f002 ff27 	bl	25680 <ble_ll_whitelist_read_size>
   22832:	4604      	mov	r4, r0
   22834:	e7a8      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   22836:	b109      	cbz	r1, 2283c <ble_ll_hci_le_cmd_proc+0x168>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22838:	2412      	movs	r4, #18
   2283a:	e7a5      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_whitelist_clear();
   2283c:	f002 ff0a 	bl	25654 <ble_ll_whitelist_clear>
   22840:	4604      	mov	r4, r0
   22842:	e7a1      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_whitelist_add(cmdbuf, len);
   22844:	f002 ff2a 	bl	2569c <ble_ll_whitelist_add>
   22848:	4604      	mov	r4, r0
        break;
   2284a:	e79d      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_whitelist_rmv(cmdbuf, len);
   2284c:	f002 ff56 	bl	256fc <ble_ll_whitelist_rmv>
   22850:	4604      	mov	r4, r0
        break;
   22852:	e799      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_update(cmdbuf, len);
   22854:	f7fe f95c 	bl	20b10 <ble_ll_conn_hci_update>
   22858:	4604      	mov	r4, r0
        break;
   2285a:	e795      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_set_chan_class(cmdbuf, len);
   2285c:	f7fe fb1d 	bl	20e9a <ble_ll_conn_hci_set_chan_class>
   22860:	4604      	mov	r4, r0
        break;
   22862:	e791      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_rd_chan_map(cmdbuf, len, rspbuf, rsplen);
   22864:	9b04      	ldr	r3, [sp, #16]
   22866:	f7fe faee 	bl	20e46 <ble_ll_conn_hci_rd_chan_map>
   2286a:	4604      	mov	r4, r0
        break;
   2286c:	e78c      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_read_rem_features(cmdbuf, len);
   2286e:	f7fe f91f 	bl	20ab0 <ble_ll_conn_hci_read_rem_features>
   22872:	4604      	mov	r4, r0
        break;
   22874:	e788      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_le_encrypt(cmdbuf, len, rspbuf, rsplen);
   22876:	9b04      	ldr	r3, [sp, #16]
   22878:	f7ff fe88 	bl	2258c <ble_ll_hci_le_encrypt>
   2287c:	4604      	mov	r4, r0
        break;
   2287e:	e783      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   22880:	b109      	cbz	r1, 22886 <ble_ll_hci_le_cmd_proc+0x1b2>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22882:	2412      	movs	r4, #18
   22884:	e780      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_rand(rspbuf, rsplen);
   22886:	9904      	ldr	r1, [sp, #16]
   22888:	4610      	mov	r0, r2
   2288a:	f7ff fea0 	bl	225ce <ble_ll_hci_le_rand>
   2288e:	4604      	mov	r4, r0
   22890:	e77a      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_le_start_encrypt(cmdbuf, len);
   22892:	f7fe fb52 	bl	20f3a <ble_ll_conn_hci_le_start_encrypt>
   22896:	4604      	mov	r4, r0
        break;
   22898:	e776      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_le_ltk_reply(cmdbuf, len, rspbuf, rsplen);
   2289a:	9b04      	ldr	r3, [sp, #16]
   2289c:	f7fe fb7d 	bl	20f9a <ble_ll_conn_hci_le_ltk_reply>
   228a0:	4604      	mov	r4, r0
        break;
   228a2:	e771      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_le_ltk_neg_reply(cmdbuf, len, rspbuf, rsplen);
   228a4:	9b04      	ldr	r3, [sp, #16]
   228a6:	f7fe fba6 	bl	20ff6 <ble_ll_conn_hci_le_ltk_neg_reply>
   228aa:	4604      	mov	r4, r0
        break;
   228ac:	e76c      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   228ae:	b109      	cbz	r1, 228b4 <ble_ll_hci_le_cmd_proc+0x1e0>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   228b0:	2412      	movs	r4, #18
   228b2:	e769      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_read_supp_states(rspbuf, rsplen);
   228b4:	9904      	ldr	r1, [sp, #16]
   228b6:	4610      	mov	r0, r2
   228b8:	f7ff fe92 	bl	225e0 <ble_ll_hci_le_read_supp_states>
   228bc:	4604      	mov	r4, r0
   228be:	e763      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_param_rr(cmdbuf, len, rspbuf, rsplen);
   228c0:	9b04      	ldr	r3, [sp, #16]
   228c2:	f7fe f98d 	bl	20be0 <ble_ll_conn_hci_param_rr>
   228c6:	4604      	mov	r4, r0
        break;
   228c8:	e75e      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_param_nrr(cmdbuf, len, rspbuf, rsplen);
   228ca:	9b04      	ldr	r3, [sp, #16]
   228cc:	f7fe f9de 	bl	20c8c <ble_ll_conn_hci_param_nrr>
   228d0:	4604      	mov	r4, r0
        break;
   228d2:	e759      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_conn_hci_set_data_len(cmdbuf, len, rspbuf, rsplen);
   228d4:	9b04      	ldr	r3, [sp, #16]
   228d6:	f7fe faf7 	bl	20ec8 <ble_ll_conn_hci_set_data_len>
   228da:	4604      	mov	r4, r0
        break;
   228dc:	e754      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   228de:	b109      	cbz	r1, 228e4 <ble_ll_hci_le_cmd_proc+0x210>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   228e0:	2412      	movs	r4, #18
   228e2:	e751      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_rd_sugg_data_len(rspbuf, rsplen);
   228e4:	9904      	ldr	r1, [sp, #16]
   228e6:	4610      	mov	r0, r2
   228e8:	f7ff fd3e 	bl	22368 <ble_ll_hci_le_rd_sugg_data_len>
   228ec:	4604      	mov	r4, r0
   228ee:	e74b      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_hci_le_wr_sugg_data_len(cmdbuf, len);
   228f0:	f7ff fe82 	bl	225f8 <ble_ll_hci_le_wr_sugg_data_len>
   228f4:	4604      	mov	r4, r0
        break;
   228f6:	e747      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_list_add(cmdbuf, len);
   228f8:	f000 fc80 	bl	231fc <ble_ll_resolv_list_add>
   228fc:	4604      	mov	r4, r0
        break;
   228fe:	e743      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_list_rmv(cmdbuf, len);
   22900:	f000 fd12 	bl	23328 <ble_ll_resolv_list_rmv>
   22904:	4604      	mov	r4, r0
        break;
   22906:	e73f      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   22908:	b109      	cbz	r1, 2290e <ble_ll_hci_le_cmd_proc+0x23a>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2290a:	2412      	movs	r4, #18
   2290c:	e73c      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_resolv_list_clr();
   2290e:	f000 fc37 	bl	23180 <ble_ll_resolv_list_clr>
   22912:	4604      	mov	r4, r0
   22914:	e738      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   22916:	b109      	cbz	r1, 2291c <ble_ll_hci_le_cmd_proc+0x248>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   22918:	2412      	movs	r4, #18
   2291a:	e735      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_resolv_list_read_size(rspbuf, rsplen);
   2291c:	9904      	ldr	r1, [sp, #16]
   2291e:	4610      	mov	r0, r2
   22920:	f000 fc42 	bl	231a8 <ble_ll_resolv_list_read_size>
   22924:	4604      	mov	r4, r0
   22926:	e72f      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_peer_addr_rd(cmdbuf, len, rspbuf, rsplen);
   22928:	9b04      	ldr	r3, [sp, #16]
   2292a:	f000 fd61 	bl	233f0 <ble_ll_resolv_peer_addr_rd>
   2292e:	4604      	mov	r4, r0
        break;
   22930:	e72a      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_local_addr_rd(cmdbuf, len, rspbuf, rsplen);
   22932:	9b04      	ldr	r3, [sp, #16]
   22934:	f000 fd76 	bl	23424 <ble_ll_resolv_local_addr_rd>
   22938:	4604      	mov	r4, r0
        break;
   2293a:	e725      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_enable_cmd(cmdbuf, len);
   2293c:	f000 fd40 	bl	233c0 <ble_ll_resolv_enable_cmd>
   22940:	4604      	mov	r4, r0
        break;
   22942:	e721      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolv_set_rpa_tmo(cmdbuf, len);
   22944:	f000 fd88 	bl	23458 <ble_ll_resolv_set_rpa_tmo>
   22948:	4604      	mov	r4, r0
        break;
   2294a:	e71d      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        if (len == 0) {
   2294c:	b109      	cbz	r1, 22952 <ble_ll_hci_le_cmd_proc+0x27e>
    rc = BLE_ERR_INV_HCI_CMD_PARMS;
   2294e:	2412      	movs	r4, #18
   22950:	e71a      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
            rc = ble_ll_hci_le_rd_max_data_len(rspbuf, rsplen);
   22952:	9904      	ldr	r1, [sp, #16]
   22954:	4610      	mov	r0, r2
   22956:	f7ff fd13 	bl	22380 <ble_ll_hci_le_rd_max_data_len>
   2295a:	4604      	mov	r4, r0
   2295c:	e714      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_read_tx_power(rspbuf, rsplen);
   2295e:	9904      	ldr	r1, [sp, #16]
   22960:	4610      	mov	r0, r2
   22962:	f7ff fe75 	bl	22650 <ble_ll_read_tx_power>
   22966:	4604      	mov	r4, r0
        break;
   22968:	e70e      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_read_rf_path_compensation(rspbuf, rsplen);
   2296a:	9904      	ldr	r1, [sp, #16]
   2296c:	4610      	mov	r0, r2
   2296e:	f7ff fd3d 	bl	223ec <ble_ll_read_rf_path_compensation>
   22972:	4604      	mov	r4, r0
        break;
   22974:	e708      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_write_rf_path_compensation(cmdbuf, len);
   22976:	f7ff fe7b 	bl	22670 <ble_ll_write_rf_path_compensation>
   2297a:	4604      	mov	r4, r0
        break;
   2297c:	e704      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = ble_ll_resolve_set_priv_mode(cmdbuf, len);
   2297e:	f000 fd95 	bl	234ac <ble_ll_resolve_set_priv_mode>
   22982:	4604      	mov	r4, r0
        break;
   22984:	e700      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   22986:	2401      	movs	r4, #1
   22988:	e6fe      	b.n	22788 <ble_ll_hci_le_cmd_proc+0xb4>

0002298a <ble_ll_hci_adv_mode_ext>:
}
   2298a:	2000      	movs	r0, #0
   2298c:	4770      	bx	lr

0002298e <ble_ll_hci_event_send>:
{
   2298e:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(sizeof(*hci_ev) + hci_ev->length <= BLE_LL_MAX_EVT_LEN);
   22990:	7843      	ldrb	r3, [r0, #1]
   22992:	3302      	adds	r3, #2
   22994:	2b46      	cmp	r3, #70	; 0x46
   22996:	d802      	bhi.n	2299e <ble_ll_hci_event_send+0x10>
    rc = ble_hci_trans_ll_evt_tx((uint8_t *)hci_ev);
   22998:	f7f3 fd76 	bl	16488 <ble_hci_trans_ll_evt_tx>
}
   2299c:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(sizeof(*hci_ev) + hci_ev->length <= BLE_LL_MAX_EVT_LEN);
   2299e:	f7e5 fc0f 	bl	81c0 <hal_debugger_connected>
   229a2:	b100      	cbz	r0, 229a6 <ble_ll_hci_event_send+0x18>
   229a4:	be01      	bkpt	0x0001
   229a6:	2300      	movs	r3, #0
   229a8:	461a      	mov	r2, r3
   229aa:	4619      	mov	r1, r3
   229ac:	4618      	mov	r0, r3
   229ae:	f7e6 ff9d 	bl	98ec <__assert_func>

000229b2 <ble_ll_hci_cmd_proc>:
 *
 * @param ev Pointer to os event containing a pointer to command buffer
 */
static void
ble_ll_hci_cmd_proc(struct ble_npl_event *ev)
{
   229b2:	b570      	push	{r4, r5, r6, lr}
   229b4:	b084      	sub	sp, #16
    uint8_t ogf;
    uint8_t rsplen;
    struct ble_hci_cmd *cmd;
    uint16_t opcode;
    uint16_t ocf;
    ble_ll_hci_post_cmd_complete_cb post_cb = NULL;
   229b6:	2300      	movs	r3, #0
   229b8:	9302      	str	r3, [sp, #8]
    return ev->ev.ev_arg;
   229ba:	6884      	ldr	r4, [r0, #8]

    BLE_LL_DEBUG_GPIO(HCI_CMD, 1);

    /* The command buffer is the event argument */
    cmd = ble_npl_event_get_arg(ev);
    BLE_LL_ASSERT(cmd != NULL);
   229bc:	b194      	cbz	r4, 229e4 <ble_ll_hci_cmd_proc+0x32>

    /* Get the opcode from the command buffer */
    opcode = le16toh(cmd->opcode);
   229be:	4623      	mov	r3, r4
   229c0:	f833 6b06 	ldrh.w	r6, [r3], #6
   229c4:	b2b1      	uxth	r1, r6
    ocf = BLE_HCI_OCF(opcode);
   229c6:	f3c1 0209 	ubfx	r2, r1, #0, #10
    ogf = BLE_HCI_OGF(opcode);
   229ca:	0a89      	lsrs	r1, r1, #10
     */
    hci_ev = (struct ble_hci_ev *) cmd;
    rspbuf = hci_ev->data + sizeof(*cmd_complete);

    /* Assume response length is zero */
    rsplen = 0;
   229cc:	2000      	movs	r0, #0
   229ce:	f88d 000f 	strb.w	r0, [sp, #15]

    switch (ogf) {
   229d2:	3901      	subs	r1, #1
   229d4:	2907      	cmp	r1, #7
   229d6:	d85c      	bhi.n	22a92 <ble_ll_hci_cmd_proc+0xe0>
   229d8:	e8df f001 	tbb	[pc, r1]
   229dc:	342b5b0e 	.word	0x342b5b0e
   229e0:	465b5b3d 	.word	0x465b5b3d
    BLE_LL_ASSERT(cmd != NULL);
   229e4:	f7e5 fbec 	bl	81c0 <hal_debugger_connected>
   229e8:	b100      	cbz	r0, 229ec <ble_ll_hci_cmd_proc+0x3a>
   229ea:	be01      	bkpt	0x0001
   229ec:	2300      	movs	r3, #0
   229ee:	461a      	mov	r2, r3
   229f0:	4619      	mov	r1, r3
   229f2:	4618      	mov	r0, r3
   229f4:	f7e6 ff7a 	bl	98ec <__assert_func>
    case BLE_HCI_OGF_LINK_CTRL:
        rc = ble_ll_hci_link_ctrl_cmd_proc(cmd->data, cmd->length, ocf);
   229f8:	78a1      	ldrb	r1, [r4, #2]
   229fa:	1ce0      	adds	r0, r4, #3
   229fc:	f7ff fd28 	bl	22450 <ble_ll_hci_link_ctrl_cmd_proc>
   22a00:	4605      	mov	r5, r0
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
        break;
    }

    /* If no response is generated, we free the buffers */
    BLE_LL_ASSERT(rc >= 0);
   22a02:	2d00      	cmp	r5, #0
   22a04:	db3b      	blt.n	22a7e <ble_ll_hci_cmd_proc+0xcc>
    if (rc <= BLE_ERR_MAX) {
   22a06:	2dff      	cmp	r5, #255	; 0xff
   22a08:	dc45      	bgt.n	22a96 <ble_ll_hci_cmd_proc+0xe4>
        /* Create a command complete event with status from command */
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   22a0a:	230e      	movs	r3, #14
   22a0c:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*cmd_complete) + rsplen;
   22a0e:	f89d 300f 	ldrb.w	r3, [sp, #15]
   22a12:	3304      	adds	r3, #4
   22a14:	7063      	strb	r3, [r4, #1]

        cmd_complete = (void *) hci_ev->data;
        cmd_complete->num_packets = ble_ll_hci_get_num_cmd_pkts();
   22a16:	f7ff fc60 	bl	222da <ble_ll_hci_get_num_cmd_pkts>
   22a1a:	70a0      	strb	r0, [r4, #2]
        cmd_complete->opcode = htole16(opcode);
   22a1c:	f8a4 6003 	strh.w	r6, [r4, #3]
        cmd_complete->status = (uint8_t) rc;
   22a20:	7165      	strb	r5, [r4, #5]
    } else {
        STATS_INC(ble_ll_stats, hci_cmds);
    }

    /* Send the event (events cannot be masked) */
    ble_ll_hci_event_send(hci_ev);
   22a22:	4620      	mov	r0, r4
   22a24:	f7ff ffb3 	bl	2298e <ble_ll_hci_event_send>

    /* Call post callback if set by command handler */
    if (post_cb) {
   22a28:	9b02      	ldr	r3, [sp, #8]
   22a2a:	b103      	cbz	r3, 22a2e <ble_ll_hci_cmd_proc+0x7c>
        post_cb();
   22a2c:	4798      	blx	r3
    }

    BLE_LL_DEBUG_GPIO(HCI_CMD, 0);
}
   22a2e:	b004      	add	sp, #16
   22a30:	bd70      	pop	{r4, r5, r6, pc}
        rc = ble_ll_hci_ctlr_bb_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   22a32:	78a1      	ldrb	r1, [r4, #2]
   22a34:	f10d 000f 	add.w	r0, sp, #15
   22a38:	9000      	str	r0, [sp, #0]
   22a3a:	1ce0      	adds	r0, r4, #3
   22a3c:	f7ff fd19 	bl	22472 <ble_ll_hci_ctlr_bb_cmd_proc>
   22a40:	4605      	mov	r5, r0
        break;
   22a42:	e7de      	b.n	22a02 <ble_ll_hci_cmd_proc+0x50>
        rc = ble_ll_hci_info_params_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   22a44:	78a1      	ldrb	r1, [r4, #2]
   22a46:	f10d 000f 	add.w	r0, sp, #15
   22a4a:	9000      	str	r0, [sp, #0]
   22a4c:	1ce0      	adds	r0, r4, #3
   22a4e:	f7ff fd5b 	bl	22508 <ble_ll_hci_info_params_cmd_proc>
   22a52:	4605      	mov	r5, r0
        break;
   22a54:	e7d5      	b.n	22a02 <ble_ll_hci_cmd_proc+0x50>
        rc = ble_ll_hci_status_params_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen);
   22a56:	78a1      	ldrb	r1, [r4, #2]
   22a58:	f10d 000f 	add.w	r0, sp, #15
   22a5c:	9000      	str	r0, [sp, #0]
   22a5e:	1ce0      	adds	r0, r4, #3
   22a60:	f7ff fd7f 	bl	22562 <ble_ll_hci_status_params_cmd_proc>
   22a64:	4605      	mov	r5, r0
        break;
   22a66:	e7cc      	b.n	22a02 <ble_ll_hci_cmd_proc+0x50>
        rc = ble_ll_hci_le_cmd_proc(cmd->data, cmd->length, ocf, rspbuf, &rsplen, &post_cb);
   22a68:	78a1      	ldrb	r1, [r4, #2]
   22a6a:	a802      	add	r0, sp, #8
   22a6c:	9001      	str	r0, [sp, #4]
   22a6e:	f10d 000f 	add.w	r0, sp, #15
   22a72:	9000      	str	r0, [sp, #0]
   22a74:	1ce0      	adds	r0, r4, #3
   22a76:	f7ff fe2d 	bl	226d4 <ble_ll_hci_le_cmd_proc>
   22a7a:	4605      	mov	r5, r0
        break;
   22a7c:	e7c1      	b.n	22a02 <ble_ll_hci_cmd_proc+0x50>
    BLE_LL_ASSERT(rc >= 0);
   22a7e:	f7e5 fb9f 	bl	81c0 <hal_debugger_connected>
   22a82:	b100      	cbz	r0, 22a86 <ble_ll_hci_cmd_proc+0xd4>
   22a84:	be01      	bkpt	0x0001
   22a86:	2300      	movs	r3, #0
   22a88:	461a      	mov	r2, r3
   22a8a:	4619      	mov	r1, r3
   22a8c:	4618      	mov	r0, r3
   22a8e:	f7e6 ff2d 	bl	98ec <__assert_func>
        rc = BLE_ERR_UNKNOWN_HCI_CMD;
   22a92:	2501      	movs	r5, #1
   22a94:	e7b7      	b.n	22a06 <ble_ll_hci_cmd_proc+0x54>
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_STATUS;
   22a96:	230f      	movs	r3, #15
   22a98:	7023      	strb	r3, [r4, #0]
        hci_ev->length = sizeof(*cmd_status);
   22a9a:	2304      	movs	r3, #4
   22a9c:	7063      	strb	r3, [r4, #1]
        cmd_status->status = (uint8_t)rc;
   22a9e:	70a5      	strb	r5, [r4, #2]
        cmd_status->num_packets = ble_ll_hci_get_num_cmd_pkts();
   22aa0:	f7ff fc1b 	bl	222da <ble_ll_hci_get_num_cmd_pkts>
   22aa4:	70e0      	strb	r0, [r4, #3]
        cmd_status->opcode = htole16(opcode);
   22aa6:	80a6      	strh	r6, [r4, #4]
   22aa8:	e7bb      	b.n	22a22 <ble_ll_hci_cmd_proc+0x70>

00022aaa <ble_ll_hci_send_noop>:
{
   22aaa:	b510      	push	{r4, lr}
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22aac:	2002      	movs	r0, #2
   22aae:	f7f3 fd2d 	bl	1650c <ble_hci_trans_buf_alloc>
    if (hci_ev) {
   22ab2:	b168      	cbz	r0, 22ad0 <ble_ll_hci_send_noop+0x26>
   22ab4:	4604      	mov	r4, r0
        hci_ev->opcode = BLE_HCI_EVCODE_COMMAND_COMPLETE;
   22ab6:	230e      	movs	r3, #14
   22ab8:	7003      	strb	r3, [r0, #0]
        hci_ev->length = sizeof(*ev);
   22aba:	2303      	movs	r3, #3
   22abc:	7043      	strb	r3, [r0, #1]
        ev->num_packets = ble_ll_hci_get_num_cmd_pkts();
   22abe:	f7ff fc0c 	bl	222da <ble_ll_hci_get_num_cmd_pkts>
   22ac2:	70a0      	strb	r0, [r4, #2]
        ev->opcode = BLE_HCI_OPCODE_NOP;
   22ac4:	2300      	movs	r3, #0
   22ac6:	70e3      	strb	r3, [r4, #3]
   22ac8:	7123      	strb	r3, [r4, #4]
        ble_ll_hci_event_send(hci_ev);
   22aca:	4620      	mov	r0, r4
   22acc:	f7ff ff5f 	bl	2298e <ble_ll_hci_event_send>
}
   22ad0:	bd10      	pop	{r4, pc}
	...

00022ad4 <ble_ll_hci_is_le_event_enabled>:
{
   22ad4:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    if (g_ble_ll_hci_event_mask & (1ull << (BLE_HCI_EVCODE_LE_META - 1))) {
   22ad8:	4b12      	ldr	r3, [pc, #72]	; (22b24 <ble_ll_hci_is_le_event_enabled+0x50>)
   22ada:	e9d3 2300 	ldrd	r2, r3, [r3]
   22ade:	2400      	movs	r4, #0
   22ae0:	f003 5500 	and.w	r5, r3, #536870912	; 0x20000000
   22ae4:	ea54 0305 	orrs.w	r3, r4, r5
   22ae8:	d01a      	beq.n	22b20 <ble_ll_hci_is_le_event_enabled+0x4c>
        return g_ble_ll_hci_le_event_mask & (1ull << (subev - 1));
   22aea:	1e45      	subs	r5, r0, #1
   22aec:	2101      	movs	r1, #1
   22aee:	3821      	subs	r0, #33	; 0x21
   22af0:	f1c5 0420 	rsb	r4, r5, #32
   22af4:	fa01 fc00 	lsl.w	ip, r1, r0
   22af8:	fa21 f404 	lsr.w	r4, r1, r4
   22afc:	ea4c 0c04 	orr.w	ip, ip, r4
   22b00:	fa01 fb05 	lsl.w	fp, r1, r5
   22b04:	4908      	ldr	r1, [pc, #32]	; (22b28 <ble_ll_hci_is_le_event_enabled+0x54>)
   22b06:	e9d1 0100 	ldrd	r0, r1, [r1]
   22b0a:	ea0b 0200 	and.w	r2, fp, r0
   22b0e:	ea0c 0301 	and.w	r3, ip, r1
   22b12:	4313      	orrs	r3, r2
   22b14:	bf14      	ite	ne
   22b16:	2001      	movne	r0, #1
   22b18:	2000      	moveq	r0, #0
}
   22b1a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   22b1e:	4770      	bx	lr
    return false;
   22b20:	2000      	movs	r0, #0
   22b22:	e7fa      	b.n	22b1a <ble_ll_hci_is_le_event_enabled+0x46>
   22b24:	200089d0 	.word	0x200089d0
   22b28:	200089e0 	.word	0x200089e0

00022b2c <ble_ll_hci_is_event_enabled>:
{
   22b2c:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    if (evcode >= 64) {
   22b30:	283f      	cmp	r0, #63	; 0x3f
   22b32:	d81a      	bhi.n	22b6a <ble_ll_hci_is_event_enabled+0x3e>
    return g_ble_ll_hci_event_mask & (1ull << (evcode - 1));
   22b34:	1e45      	subs	r5, r0, #1
   22b36:	2101      	movs	r1, #1
   22b38:	3821      	subs	r0, #33	; 0x21
   22b3a:	f1c5 0420 	rsb	r4, r5, #32
   22b3e:	fa01 fc00 	lsl.w	ip, r1, r0
   22b42:	fa21 f404 	lsr.w	r4, r1, r4
   22b46:	ea4c 0c04 	orr.w	ip, ip, r4
   22b4a:	fa01 fb05 	lsl.w	fp, r1, r5
   22b4e:	4914      	ldr	r1, [pc, #80]	; (22ba0 <ble_ll_hci_is_event_enabled+0x74>)
   22b50:	e9d1 0100 	ldrd	r0, r1, [r1]
   22b54:	ea0b 0200 	and.w	r2, fp, r0
   22b58:	ea0c 0301 	and.w	r3, ip, r1
   22b5c:	4313      	orrs	r3, r2
   22b5e:	bf14      	ite	ne
   22b60:	2001      	movne	r0, #1
   22b62:	2000      	moveq	r0, #0
}
   22b64:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   22b68:	4770      	bx	lr
        return g_ble_ll_hci_event_mask2 & (1ull << (evcode - 64));
   22b6a:	f1a0 0540 	sub.w	r5, r0, #64	; 0x40
   22b6e:	2101      	movs	r1, #1
   22b70:	3860      	subs	r0, #96	; 0x60
   22b72:	f1c5 0420 	rsb	r4, r5, #32
   22b76:	fa01 fc00 	lsl.w	ip, r1, r0
   22b7a:	fa21 f404 	lsr.w	r4, r1, r4
   22b7e:	ea4c 0c04 	orr.w	ip, ip, r4
   22b82:	fa01 fb05 	lsl.w	fp, r1, r5
   22b86:	4907      	ldr	r1, [pc, #28]	; (22ba4 <ble_ll_hci_is_event_enabled+0x78>)
   22b88:	e9d1 0100 	ldrd	r0, r1, [r1]
   22b8c:	ea0b 0200 	and.w	r2, fp, r0
   22b90:	ea0c 0301 	and.w	r3, ip, r1
   22b94:	4313      	orrs	r3, r2
   22b96:	bf14      	ite	ne
   22b98:	2001      	movne	r0, #1
   22b9a:	2000      	moveq	r0, #0
   22b9c:	e7e2      	b.n	22b64 <ble_ll_hci_is_event_enabled+0x38>
   22b9e:	bf00      	nop
   22ba0:	200089d0 	.word	0x200089d0
   22ba4:	200089d8 	.word	0x200089d8

00022ba8 <ble_ll_hci_cmd_rx>:
 * @return                      0 on success;
 *                              BLE_ERR_MEM_CAPACITY on HCI buffer exhaustion.
 */
int
ble_ll_hci_cmd_rx(uint8_t *cmdbuf, void *arg)
{
   22ba8:	b508      	push	{r3, lr}
    return ev->ev.ev_queued;
   22baa:	4b0c      	ldr	r3, [pc, #48]	; (22bdc <ble_ll_hci_cmd_rx+0x34>)
   22bac:	781b      	ldrb	r3, [r3, #0]
    }
#endif

    /* Get an event structure off the queue */
    ev = &g_ble_ll_hci_cmd_ev;
    if (ble_npl_event_is_queued(ev)) {
   22bae:	b99b      	cbnz	r3, 22bd8 <ble_ll_hci_cmd_rx+0x30>
    assert(ev->ev.ev_queued == 0);
   22bb0:	4b0a      	ldr	r3, [pc, #40]	; (22bdc <ble_ll_hci_cmd_rx+0x34>)
   22bb2:	781b      	ldrb	r3, [r3, #0]
   22bb4:	b933      	cbnz	r3, 22bc4 <ble_ll_hci_cmd_rx+0x1c>
    ev->ev.ev_arg = arg;
   22bb6:	4909      	ldr	r1, [pc, #36]	; (22bdc <ble_ll_hci_cmd_rx+0x34>)
   22bb8:	6088      	str	r0, [r1, #8]
    os_eventq_put(&evq->evq, &ev->ev);
   22bba:	4809      	ldr	r0, [pc, #36]	; (22be0 <ble_ll_hci_cmd_rx+0x38>)
   22bbc:	f7e7 f9e3 	bl	9f86 <os_eventq_put>

    /* Fill out the event and post to Link Layer */
    ble_npl_event_set_arg(ev, cmdbuf);
    ble_npl_eventq_put(&g_ble_ll_data.ll_evq, ev);

    return 0;
   22bc0:	2000      	movs	r0, #0
}
   22bc2:	bd08      	pop	{r3, pc}
    assert(ev->ev.ev_queued == 0);
   22bc4:	f7e5 fafc 	bl	81c0 <hal_debugger_connected>
   22bc8:	b100      	cbz	r0, 22bcc <ble_ll_hci_cmd_rx+0x24>
   22bca:	be01      	bkpt	0x0001
   22bcc:	2300      	movs	r3, #0
   22bce:	461a      	mov	r2, r3
   22bd0:	4619      	mov	r1, r3
   22bd2:	4618      	mov	r0, r3
   22bd4:	f7e6 fe8a 	bl	98ec <__assert_func>
        return BLE_ERR_MEM_CAPACITY;
   22bd8:	2007      	movs	r0, #7
   22bda:	e7f2      	b.n	22bc2 <ble_ll_hci_cmd_rx+0x1a>
   22bdc:	200089bc 	.word	0x200089bc
   22be0:	200084e8 	.word	0x200084e8

00022be4 <ble_ll_hci_acl_rx>:

/* Send ACL data from host to contoller */
int
ble_ll_hci_acl_rx(struct os_mbuf *om, void *arg)
{
   22be4:	b508      	push	{r3, lr}
    ble_ll_acl_data_in(om);
   22be6:	f7fa fa73 	bl	1d0d0 <ble_ll_acl_data_in>
    return 0;
}
   22bea:	2000      	movs	r0, #0
   22bec:	bd08      	pop	{r3, pc}
	...

00022bf0 <ble_ll_hci_init>:
    memset(ev, 0, sizeof(*ev));
   22bf0:	4a0e      	ldr	r2, [pc, #56]	; (22c2c <ble_ll_hci_init+0x3c>)
   22bf2:	2300      	movs	r3, #0
   22bf4:	6013      	str	r3, [r2, #0]
   22bf6:	6093      	str	r3, [r2, #8]
   22bf8:	60d3      	str	r3, [r2, #12]
    ev->ev.ev_cb = (os_event_fn *)fn;
   22bfa:	490d      	ldr	r1, [pc, #52]	; (22c30 <ble_ll_hci_init+0x40>)
   22bfc:	6051      	str	r1, [r2, #4]

    /* Set event callback for command processing */
    ble_npl_event_init(&g_ble_ll_hci_cmd_ev, ble_ll_hci_cmd_proc, NULL);

    /* Set defaults for LE events: Vol 2 Part E 7.8.1 */
    g_ble_ll_hci_le_event_mask = 0x1f;
   22bfe:	4a0d      	ldr	r2, [pc, #52]	; (22c34 <ble_ll_hci_init+0x44>)
   22c00:	201f      	movs	r0, #31
   22c02:	2100      	movs	r1, #0
   22c04:	e9c2 0100 	strd	r0, r1, [r2]

    /* Set defaults for controller/baseband events: Vol 2 Part E 7.3.1 */
    g_ble_ll_hci_event_mask = 0x1fffffffffff;
   22c08:	4a0b      	ldr	r2, [pc, #44]	; (22c38 <ble_ll_hci_init+0x48>)
   22c0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22c0e:	f641 71ff 	movw	r1, #8191	; 0x1fff
   22c12:	e9c2 0100 	strd	r0, r1, [r2]


    /* Set page 2 to 0 */
    g_ble_ll_hci_event_mask2 = 0;
   22c16:	4a09      	ldr	r2, [pc, #36]	; (22c3c <ble_ll_hci_init+0x4c>)
   22c18:	2000      	movs	r0, #0
   22c1a:	2100      	movs	r1, #0
   22c1c:	e9c2 0100 	strd	r0, r1, [r2]

    /* reset RF path compensation values */
    rx_path_pwr_compensation = 0;
   22c20:	4a07      	ldr	r2, [pc, #28]	; (22c40 <ble_ll_hci_init+0x50>)
   22c22:	8013      	strh	r3, [r2, #0]
    tx_path_pwr_compensation = 0;
   22c24:	4a07      	ldr	r2, [pc, #28]	; (22c44 <ble_ll_hci_init+0x54>)
   22c26:	8013      	strh	r3, [r2, #0]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_EXT_ADV)
    /* after reset both legacy and extended advertising commands are allowed */
    hci_adv_mode = ADV_MODE_ANY;
#endif
}
   22c28:	4770      	bx	lr
   22c2a:	bf00      	nop
   22c2c:	200089bc 	.word	0x200089bc
   22c30:	000229b3 	.word	0x000229b3
   22c34:	200089e0 	.word	0x200089e0
   22c38:	200089d0 	.word	0x200089d0
   22c3c:	200089d8 	.word	0x200089d8
   22c40:	200089e8 	.word	0x200089e8
   22c44:	200089ea 	.word	0x200089ea

00022c48 <ble_ll_hci_ev_datalen_chg>:
 *
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_datalen_chg(struct ble_ll_conn_sm *connsm)
{
   22c48:	b510      	push	{r4, lr}
   22c4a:	4604      	mov	r4, r0
    struct ble_hci_ev_le_subev_data_len_chg *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_DATA_LEN_CHG)) {
   22c4c:	2007      	movs	r0, #7
   22c4e:	f7ff ff41 	bl	22ad4 <ble_ll_hci_is_le_event_enabled>
   22c52:	b900      	cbnz	r0, 22c56 <ble_ll_hci_ev_datalen_chg+0xe>
            ev->max_rx_time = htole16(connsm->eff_max_rx_time);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   22c54:	bd10      	pop	{r4, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22c56:	2002      	movs	r0, #2
   22c58:	f7f3 fc58 	bl	1650c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22c5c:	2800      	cmp	r0, #0
   22c5e:	d0f9      	beq.n	22c54 <ble_ll_hci_ev_datalen_chg+0xc>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   22c60:	223e      	movs	r2, #62	; 0x3e
   22c62:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22c64:	220b      	movs	r2, #11
   22c66:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_DATA_LEN_CHG;
   22c68:	2207      	movs	r2, #7
   22c6a:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   22c6c:	88a2      	ldrh	r2, [r4, #4]
   22c6e:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->max_tx_octets = htole16(connsm->eff_max_tx_octets);
   22c72:	7ba2      	ldrb	r2, [r4, #14]
   22c74:	f8a0 2005 	strh.w	r2, [r0, #5]
            ev->max_tx_time = htole16(connsm->eff_max_tx_time);
   22c78:	8b22      	ldrh	r2, [r4, #24]
   22c7a:	f8a0 2007 	strh.w	r2, [r0, #7]
            ev->max_rx_octets = htole16(connsm->eff_max_rx_octets);
   22c7e:	7be2      	ldrb	r2, [r4, #15]
   22c80:	f8a0 2009 	strh.w	r2, [r0, #9]
            ev->max_rx_time = htole16(connsm->eff_max_rx_time);
   22c84:	8b62      	ldrh	r2, [r4, #26]
   22c86:	f8a0 200b 	strh.w	r2, [r0, #11]
            ble_ll_hci_event_send(hci_ev);
   22c8a:	f7ff fe80 	bl	2298e <ble_ll_hci_event_send>
}
   22c8e:	e7e1      	b.n	22c54 <ble_ll_hci_ev_datalen_chg+0xc>

00022c90 <ble_ll_hci_ev_rem_conn_parm_req>:
 * @param connsm Pointer to connection state machine
 */
void
ble_ll_hci_ev_rem_conn_parm_req(struct ble_ll_conn_sm *connsm,
                                struct ble_ll_conn_params *cp)
{
   22c90:	b538      	push	{r3, r4, r5, lr}
   22c92:	4605      	mov	r5, r0
   22c94:	460c      	mov	r4, r1
    struct ble_hci_ev_le_subev_rem_conn_param_req *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ)) {
   22c96:	2006      	movs	r0, #6
   22c98:	f7ff ff1c 	bl	22ad4 <ble_ll_hci_is_le_event_enabled>
   22c9c:	b900      	cbnz	r0, 22ca0 <ble_ll_hci_ev_rem_conn_parm_req+0x10>
            ev->timeout = htole16(cp->timeout);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   22c9e:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22ca0:	2002      	movs	r0, #2
   22ca2:	f7f3 fc33 	bl	1650c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22ca6:	2800      	cmp	r0, #0
   22ca8:	d0f9      	beq.n	22c9e <ble_ll_hci_ev_rem_conn_parm_req+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   22caa:	223e      	movs	r2, #62	; 0x3e
   22cac:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22cae:	220b      	movs	r2, #11
   22cb0:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_REM_CONN_PARM_REQ;
   22cb2:	2206      	movs	r2, #6
   22cb4:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   22cb6:	88aa      	ldrh	r2, [r5, #4]
   22cb8:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->min_interval = htole16(cp->interval_min);
   22cbc:	8822      	ldrh	r2, [r4, #0]
   22cbe:	f8a0 2005 	strh.w	r2, [r0, #5]
            ev->max_interval = htole16(cp->interval_max);
   22cc2:	8862      	ldrh	r2, [r4, #2]
   22cc4:	f8a0 2007 	strh.w	r2, [r0, #7]
            ev->latency = htole16(cp->latency);
   22cc8:	88a2      	ldrh	r2, [r4, #4]
   22cca:	f8a0 2009 	strh.w	r2, [r0, #9]
            ev->timeout = htole16(cp->timeout);
   22cce:	88e2      	ldrh	r2, [r4, #6]
   22cd0:	f8a0 200b 	strh.w	r2, [r0, #11]
            ble_ll_hci_event_send(hci_ev);
   22cd4:	f7ff fe5b 	bl	2298e <ble_ll_hci_event_send>
}
   22cd8:	e7e1      	b.n	22c9e <ble_ll_hci_ev_rem_conn_parm_req+0xe>

00022cda <ble_ll_hci_ev_conn_update>:
 * @param connsm Pointer to connection state machine
 * @param status The error code.
 */
void
ble_ll_hci_ev_conn_update(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   22cda:	b538      	push	{r3, r4, r5, lr}
   22cdc:	4604      	mov	r4, r0
   22cde:	460d      	mov	r5, r1
    struct ble_hci_ev_le_subev_conn_upd_complete *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE)) {
   22ce0:	2003      	movs	r0, #3
   22ce2:	f7ff fef7 	bl	22ad4 <ble_ll_hci_is_le_event_enabled>
   22ce6:	b900      	cbnz	r0, 22cea <ble_ll_hci_ev_conn_update+0x10>
            ev->supervision_timeout = htole16(connsm->supervision_tmo);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   22ce8:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22cea:	2002      	movs	r0, #2
   22cec:	f7f3 fc0e 	bl	1650c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22cf0:	2800      	cmp	r0, #0
   22cf2:	d0f9      	beq.n	22ce8 <ble_ll_hci_ev_conn_update+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   22cf4:	223e      	movs	r2, #62	; 0x3e
   22cf6:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22cf8:	220a      	movs	r2, #10
   22cfa:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_CONN_UPD_COMPLETE;
   22cfc:	2203      	movs	r2, #3
   22cfe:	7082      	strb	r2, [r0, #2]
            ev->status = status;
   22d00:	70c5      	strb	r5, [r0, #3]
            ev->conn_handle = htole16(connsm->conn_handle);
   22d02:	88a2      	ldrh	r2, [r4, #4]
   22d04:	8082      	strh	r2, [r0, #4]
            ev->conn_itvl = htole16(connsm->conn_itvl);
   22d06:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
   22d0a:	80c2      	strh	r2, [r0, #6]
            ev->conn_latency = htole16(connsm->slave_latency);
   22d0c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
   22d10:	8102      	strh	r2, [r0, #8]
            ev->supervision_timeout = htole16(connsm->supervision_tmo);
   22d12:	f8b4 206c 	ldrh.w	r2, [r4, #108]	; 0x6c
   22d16:	8142      	strh	r2, [r0, #10]
            ble_ll_hci_event_send(hci_ev);
   22d18:	f7ff fe39 	bl	2298e <ble_ll_hci_event_send>
}
   22d1c:	e7e4      	b.n	22ce8 <ble_ll_hci_ev_conn_update+0xe>

00022d1e <ble_ll_hci_ev_encrypt_chg>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
void
ble_ll_hci_ev_encrypt_chg(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   22d1e:	b538      	push	{r3, r4, r5, lr}
   22d20:	4604      	mov	r4, r0
   22d22:	460d      	mov	r5, r1
    struct ble_hci_ev_enc_key_refresh *ev_key_refresh;
    struct ble_hci_ev_enrypt_chg *ev_enc_chf;
    struct ble_hci_ev *hci_ev;

    if (CONN_F_ENC_CHANGE_SENT(connsm) == 0) {
   22d24:	7883      	ldrb	r3, [r0, #2]
   22d26:	f013 0f04 	tst.w	r3, #4
   22d2a:	d11c      	bne.n	22d66 <ble_ll_hci_ev_encrypt_chg+0x48>
        if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_ENCRYPT_CHG)) {
   22d2c:	2008      	movs	r0, #8
   22d2e:	f7ff fefd 	bl	22b2c <ble_ll_hci_is_event_enabled>
   22d32:	b920      	cbnz	r0, 22d3e <ble_ll_hci_ev_encrypt_chg+0x20>

                ble_ll_hci_event_send(hci_ev);
            }
        }

        CONN_F_ENC_CHANGE_SENT(connsm) = 1;
   22d34:	78a3      	ldrb	r3, [r4, #2]
   22d36:	f043 0304 	orr.w	r3, r3, #4
   22d3a:	70a3      	strb	r3, [r4, #2]
            ev_key_refresh->conn_handle = htole16(connsm->conn_handle);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   22d3c:	bd38      	pop	{r3, r4, r5, pc}
            hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22d3e:	2002      	movs	r0, #2
   22d40:	f7f3 fbe4 	bl	1650c <ble_hci_trans_buf_alloc>
            if (hci_ev) {
   22d44:	2800      	cmp	r0, #0
   22d46:	d0f5      	beq.n	22d34 <ble_ll_hci_ev_encrypt_chg+0x16>
                hci_ev->opcode = BLE_HCI_EVCODE_ENCRYPT_CHG;
   22d48:	2208      	movs	r2, #8
   22d4a:	7002      	strb	r2, [r0, #0]
                hci_ev->length = sizeof(*ev_enc_chf);
   22d4c:	2204      	movs	r2, #4
   22d4e:	7042      	strb	r2, [r0, #1]
                ev_enc_chf->status = status;
   22d50:	7085      	strb	r5, [r0, #2]
                ev_enc_chf->connection_handle = htole16(connsm->conn_handle);
   22d52:	88a2      	ldrh	r2, [r4, #4]
   22d54:	f8a0 2003 	strh.w	r2, [r0, #3]
                ev_enc_chf->enabled = (status == BLE_ERR_SUCCESS) ? 0x01 : 0x00;
   22d58:	fab5 f585 	clz	r5, r5
   22d5c:	096d      	lsrs	r5, r5, #5
   22d5e:	7145      	strb	r5, [r0, #5]
                ble_ll_hci_event_send(hci_ev);
   22d60:	f7ff fe15 	bl	2298e <ble_ll_hci_event_send>
   22d64:	e7e6      	b.n	22d34 <ble_ll_hci_ev_encrypt_chg+0x16>
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_ENC_KEY_REFRESH)) {
   22d66:	2030      	movs	r0, #48	; 0x30
   22d68:	f7ff fee0 	bl	22b2c <ble_ll_hci_is_event_enabled>
   22d6c:	2800      	cmp	r0, #0
   22d6e:	d0e5      	beq.n	22d3c <ble_ll_hci_ev_encrypt_chg+0x1e>
        hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22d70:	2002      	movs	r0, #2
   22d72:	f7f3 fbcb 	bl	1650c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22d76:	2800      	cmp	r0, #0
   22d78:	d0e0      	beq.n	22d3c <ble_ll_hci_ev_encrypt_chg+0x1e>
            hci_ev->opcode = BLE_HCI_EVCODE_ENC_KEY_REFRESH;
   22d7a:	2230      	movs	r2, #48	; 0x30
   22d7c:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev_key_refresh);
   22d7e:	2203      	movs	r2, #3
   22d80:	7042      	strb	r2, [r0, #1]
            ev_key_refresh->status = status;
   22d82:	7085      	strb	r5, [r0, #2]
            ev_key_refresh->conn_handle = htole16(connsm->conn_handle);
   22d84:	88a2      	ldrh	r2, [r4, #4]
   22d86:	f8a0 2003 	strh.w	r2, [r0, #3]
            ble_ll_hci_event_send(hci_ev);
   22d8a:	f7ff fe00 	bl	2298e <ble_ll_hci_event_send>
   22d8e:	e7d5      	b.n	22d3c <ble_ll_hci_ev_encrypt_chg+0x1e>

00022d90 <ble_ll_hci_ev_ltk_req>:
 *
 * @param connsm Pointer to connection state machine
 */
int
ble_ll_hci_ev_ltk_req(struct ble_ll_conn_sm *connsm)
{
   22d90:	b510      	push	{r4, lr}
   22d92:	4604      	mov	r4, r0
    struct ble_hci_ev_le_subev_lt_key_req *ev;
    struct ble_hci_ev *hci_ev;
    int rc;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_LT_KEY_REQ)) {
   22d94:	2005      	movs	r0, #5
   22d96:	f7ff fe9d 	bl	22ad4 <ble_ll_hci_is_le_event_enabled>
   22d9a:	b1e0      	cbz	r0, 22dd6 <ble_ll_hci_ev_ltk_req+0x46>
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22d9c:	2002      	movs	r0, #2
   22d9e:	f7f3 fbb5 	bl	1650c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22da2:	b1d8      	cbz	r0, 22ddc <ble_ll_hci_ev_ltk_req+0x4c>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   22da4:	223e      	movs	r2, #62	; 0x3e
   22da6:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22da8:	220d      	movs	r2, #13
   22daa:	7042      	strb	r2, [r0, #1]
            ev = (void *) hci_ev->data;

            ev->subev_code = BLE_HCI_LE_SUBEV_LT_KEY_REQ;
   22dac:	2205      	movs	r2, #5
   22dae:	7082      	strb	r2, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   22db0:	88a2      	ldrh	r2, [r4, #4]
   22db2:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->rand = htole64(connsm->enc_data.host_rand_num);
   22db6:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
   22dba:	f8d4 212c 	ldr.w	r2, [r4, #300]	; 0x12c
   22dbe:	f8c0 1005 	str.w	r1, [r0, #5]
   22dc2:	f8c0 2009 	str.w	r2, [r0, #9]
            ev->div = htole16(connsm->enc_data.enc_div);
   22dc6:	f8b4 211a 	ldrh.w	r2, [r4, #282]	; 0x11a
   22dca:	f8a0 200d 	strh.w	r2, [r0, #13]

            ble_ll_hci_event_send(hci_ev);
   22dce:	f7ff fdde 	bl	2298e <ble_ll_hci_event_send>
        }
        rc = 0;
   22dd2:	2000      	movs	r0, #0
    if (rc == 0) {
        bletest_ltk_req_reply(connsm->conn_handle);
    }
#endif
    return rc;
}
   22dd4:	bd10      	pop	{r4, pc}
        rc = -1;
   22dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   22dda:	e7fb      	b.n	22dd4 <ble_ll_hci_ev_ltk_req+0x44>
        rc = 0;
   22ddc:	2000      	movs	r0, #0
    return rc;
   22dde:	e7f9      	b.n	22dd4 <ble_ll_hci_ev_ltk_req+0x44>

00022de0 <ble_ll_hci_ev_rd_rem_used_feat>:
#endif

void
ble_ll_hci_ev_rd_rem_used_feat(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   22de0:	b538      	push	{r3, r4, r5, lr}
   22de2:	4604      	mov	r4, r0
   22de4:	460d      	mov	r5, r1
    struct ble_hci_ev_le_subev_rd_rem_used_feat *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT)) {
   22de6:	2004      	movs	r0, #4
   22de8:	f7ff fe74 	bl	22ad4 <ble_ll_hci_is_le_event_enabled>
   22dec:	b900      	cbnz	r0, 22df0 <ble_ll_hci_ev_rd_rem_used_feat+0x10>
            memcpy(ev->features + 1, connsm->remote_features, 7);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   22dee:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22df0:	2002      	movs	r0, #2
   22df2:	f7f3 fb8b 	bl	1650c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22df6:	4603      	mov	r3, r0
   22df8:	2800      	cmp	r0, #0
   22dfa:	d0f8      	beq.n	22dee <ble_ll_hci_ev_rd_rem_used_feat+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   22dfc:	223e      	movs	r2, #62	; 0x3e
   22dfe:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22e00:	220c      	movs	r2, #12
   22e02:	7042      	strb	r2, [r0, #1]
            ev->subev_code = BLE_HCI_LE_SUBEV_RD_REM_USED_FEAT;
   22e04:	2204      	movs	r2, #4
   22e06:	7082      	strb	r2, [r0, #2]
            ev->status = status;
   22e08:	70c5      	strb	r5, [r0, #3]
            ev->conn_handle = htole16(connsm->conn_handle);
   22e0a:	88a2      	ldrh	r2, [r4, #4]
   22e0c:	8082      	strh	r2, [r0, #4]
            ev->features[0] = connsm->conn_features;
   22e0e:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
   22e12:	7182      	strb	r2, [r0, #6]
            memcpy(ev->features + 1, connsm->remote_features, 7);
   22e14:	f854 1f40 	ldr.w	r1, [r4, #64]!
   22e18:	f8c0 1007 	str.w	r1, [r0, #7]
   22e1c:	88a0      	ldrh	r0, [r4, #4]
   22e1e:	79a1      	ldrb	r1, [r4, #6]
   22e20:	f8a3 000b 	strh.w	r0, [r3, #11]
   22e24:	7359      	strb	r1, [r3, #13]
            ble_ll_hci_event_send(hci_ev);
   22e26:	4618      	mov	r0, r3
   22e28:	f7ff fdb1 	bl	2298e <ble_ll_hci_event_send>
}
   22e2c:	e7df      	b.n	22dee <ble_ll_hci_ev_rd_rem_used_feat+0xe>

00022e2e <ble_ll_hci_ev_rd_rem_ver>:

void
ble_ll_hci_ev_rd_rem_ver(struct ble_ll_conn_sm *connsm, uint8_t status)
{
   22e2e:	b538      	push	{r3, r4, r5, lr}
   22e30:	4604      	mov	r4, r0
   22e32:	460d      	mov	r5, r1
    struct ble_hci_ev_rd_rem_ver_info_cmp *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP)) {
   22e34:	200c      	movs	r0, #12
   22e36:	f7ff fe79 	bl	22b2c <ble_ll_hci_is_event_enabled>
   22e3a:	b900      	cbnz	r0, 22e3e <ble_ll_hci_ev_rd_rem_ver+0x10>
            ev->subversion = htole16(connsm->sub_vers_nr);

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   22e3c:	bd38      	pop	{r3, r4, r5, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22e3e:	2002      	movs	r0, #2
   22e40:	f7f3 fb64 	bl	1650c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22e44:	2800      	cmp	r0, #0
   22e46:	d0f9      	beq.n	22e3c <ble_ll_hci_ev_rd_rem_ver+0xe>
            hci_ev->opcode = BLE_HCI_EVCODE_RD_REM_VER_INFO_CMP;
   22e48:	220c      	movs	r2, #12
   22e4a:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22e4c:	2208      	movs	r2, #8
   22e4e:	7042      	strb	r2, [r0, #1]
            ev->status = status;
   22e50:	7085      	strb	r5, [r0, #2]
            ev->conn_handle = htole16(connsm->conn_handle);
   22e52:	88a2      	ldrh	r2, [r4, #4]
   22e54:	f8a0 2003 	strh.w	r2, [r0, #3]
            ev->version = connsm->vers_nr;
   22e58:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
   22e5c:	7142      	strb	r2, [r0, #5]
            ev->manufacturer = htole16(connsm->comp_id);
   22e5e:	f8b4 204e 	ldrh.w	r2, [r4, #78]	; 0x4e
   22e62:	80c2      	strh	r2, [r0, #6]
            ev->subversion = htole16(connsm->sub_vers_nr);
   22e64:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
   22e68:	8102      	strh	r2, [r0, #8]
            ble_ll_hci_event_send(hci_ev);
   22e6a:	f7ff fd90 	bl	2298e <ble_ll_hci_event_send>
}
   22e6e:	e7e5      	b.n	22e3c <ble_ll_hci_ev_rd_rem_ver+0xe>

00022e70 <ble_ll_hci_ev_hw_err>:
 *
 * @return int 0: event masked or event sent, -1 otherwise
 */
int
ble_ll_hci_ev_hw_err(uint8_t hw_err)
{
   22e70:	b510      	push	{r4, lr}
   22e72:	4604      	mov	r4, r0
    struct ble_hci_ev_hw_error *ev;
    struct ble_hci_ev *hci_ev;
    int rc;

    rc = 0;
    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_HW_ERROR)) {
   22e74:	2010      	movs	r0, #16
   22e76:	f7ff fe59 	bl	22b2c <ble_ll_hci_is_event_enabled>
   22e7a:	b908      	cbnz	r0, 22e80 <ble_ll_hci_ev_hw_err+0x10>
    rc = 0;
   22e7c:	2000      	movs	r0, #0
        } else {
            rc = -1;
        }
    }
    return rc;
}
   22e7e:	bd10      	pop	{r4, pc}
        hci_ev = (void *)ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22e80:	2002      	movs	r0, #2
   22e82:	f7f3 fb43 	bl	1650c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22e86:	b140      	cbz	r0, 22e9a <ble_ll_hci_ev_hw_err+0x2a>
            hci_ev->opcode = BLE_HCI_EVCODE_HW_ERROR;
   22e88:	2210      	movs	r2, #16
   22e8a:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22e8c:	2201      	movs	r2, #1
   22e8e:	7042      	strb	r2, [r0, #1]
            ev->hw_code = hw_err;
   22e90:	7084      	strb	r4, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   22e92:	f7ff fd7c 	bl	2298e <ble_ll_hci_event_send>
    rc = 0;
   22e96:	2000      	movs	r0, #0
   22e98:	e7f1      	b.n	22e7e <ble_ll_hci_ev_hw_err+0xe>
            rc = -1;
   22e9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   22e9e:	e7ee      	b.n	22e7e <ble_ll_hci_ev_hw_err+0xe>

00022ea0 <ble_ll_hci_ev_databuf_overflow>:

void
ble_ll_hci_ev_databuf_overflow(void)
{
   22ea0:	b508      	push	{r3, lr}
    struct ble_hci_ev_data_buf_overflow *ev;
    struct ble_hci_ev *hci_ev;

    if (ble_ll_hci_is_event_enabled(BLE_HCI_EVCODE_DATA_BUF_OVERFLOW)) {
   22ea2:	201a      	movs	r0, #26
   22ea4:	f7ff fe42 	bl	22b2c <ble_ll_hci_is_event_enabled>
   22ea8:	b900      	cbnz	r0, 22eac <ble_ll_hci_ev_databuf_overflow+0xc>
            ev->link_type = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;

            ble_ll_hci_event_send(hci_ev);
        }
    }
}
   22eaa:	bd08      	pop	{r3, pc}
        hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_HI);
   22eac:	2002      	movs	r0, #2
   22eae:	f7f3 fb2d 	bl	1650c <ble_hci_trans_buf_alloc>
        if (hci_ev) {
   22eb2:	2800      	cmp	r0, #0
   22eb4:	d0f9      	beq.n	22eaa <ble_ll_hci_ev_databuf_overflow+0xa>
            hci_ev->opcode = BLE_HCI_EVCODE_DATA_BUF_OVERFLOW;
   22eb6:	221a      	movs	r2, #26
   22eb8:	7002      	strb	r2, [r0, #0]
            hci_ev->length = sizeof(*ev);
   22eba:	2201      	movs	r2, #1
   22ebc:	7042      	strb	r2, [r0, #1]
            ev->link_type = BLE_HCI_EVENT_ACL_BUF_OVERFLOW;
   22ebe:	7082      	strb	r2, [r0, #2]
            ble_ll_hci_event_send(hci_ev);
   22ec0:	f7ff fd65 	bl	2298e <ble_ll_hci_event_send>
}
   22ec4:	e7f1      	b.n	22eaa <ble_ll_hci_ev_databuf_overflow+0xa>
	...

00022ec8 <ble_ll_rand_sample>:
#define IS_RNUM_BUF_END(x)  \
    (x == &g_ble_ll_rnum_buf[MYNEWT_VAL(BLE_LL_RNG_BUFSIZE) - 1])

void
ble_ll_rand_sample(uint8_t rnum)
{
   22ec8:	b538      	push	{r3, r4, r5, lr}
   22eca:	4605      	mov	r5, r0
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   22ecc:	f7e8 fb00 	bl	b4d0 <os_arch_save_sr>
   22ed0:	4604      	mov	r4, r0
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   22ed2:	4b0f      	ldr	r3, [pc, #60]	; (22f10 <ble_ll_rand_sample+0x48>)
   22ed4:	7a1b      	ldrb	r3, [r3, #8]
   22ed6:	b2db      	uxtb	r3, r3
   22ed8:	2b1f      	cmp	r3, #31
   22eda:	d815      	bhi.n	22f08 <ble_ll_rand_sample+0x40>
        ++g_ble_ll_rnum_data.rnd_size;
   22edc:	4a0c      	ldr	r2, [pc, #48]	; (22f10 <ble_ll_rand_sample+0x48>)
   22ede:	7a13      	ldrb	r3, [r2, #8]
   22ee0:	3301      	adds	r3, #1
   22ee2:	b2db      	uxtb	r3, r3
   22ee4:	7213      	strb	r3, [r2, #8]
        g_ble_ll_rnum_data.rnd_in[0] = rnum;
   22ee6:	6813      	ldr	r3, [r2, #0]
   22ee8:	701d      	strb	r5, [r3, #0]
        if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_in)) {
   22eea:	6813      	ldr	r3, [r2, #0]
   22eec:	4a09      	ldr	r2, [pc, #36]	; (22f14 <ble_ll_rand_sample+0x4c>)
   22eee:	4293      	cmp	r3, r2
   22ef0:	d006      	beq.n	22f00 <ble_ll_rand_sample+0x38>
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
        } else {
            ++g_ble_ll_rnum_data.rnd_in;
   22ef2:	3301      	adds	r3, #1
   22ef4:	4a06      	ldr	r2, [pc, #24]	; (22f10 <ble_ll_rand_sample+0x48>)
   22ef6:	6013      	str	r3, [r2, #0]
        }
    } else {
        /* Stop generating random numbers as we are full */
        ble_hw_rng_stop();
    }
    OS_EXIT_CRITICAL(sr);
   22ef8:	4620      	mov	r0, r4
   22efa:	f7e8 faef 	bl	b4dc <os_arch_restore_sr>
}
   22efe:	bd38      	pop	{r3, r4, r5, pc}
            g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   22f00:	4b03      	ldr	r3, [pc, #12]	; (22f10 <ble_ll_rand_sample+0x48>)
   22f02:	3a1f      	subs	r2, #31
   22f04:	601a      	str	r2, [r3, #0]
   22f06:	e7f7      	b.n	22ef8 <ble_ll_rand_sample+0x30>
        ble_hw_rng_stop();
   22f08:	f002 fd6c 	bl	259e4 <ble_hw_rng_stop>
   22f0c:	e7f4      	b.n	22ef8 <ble_ll_rand_sample+0x30>
   22f0e:	bf00      	nop
   22f10:	20008a0c 	.word	0x20008a0c
   22f14:	20008a0b 	.word	0x20008a0b

00022f18 <ble_ll_rand_data_get>:
#endif

/* Get 'len' bytes of random data */
int
ble_ll_rand_data_get(uint8_t *buf, uint8_t len)
{
   22f18:	b538      	push	{r3, r4, r5, lr}
   22f1a:	4604      	mov	r4, r0
   22f1c:	460d      	mov	r5, r1
    }
#else
    uint8_t rnums;
    os_sr_t sr;

    while (len != 0) {
   22f1e:	e017      	b.n	22f50 <ble_ll_rand_data_get+0x38>
        len -= rnums;
        g_ble_ll_rnum_data.rnd_size -= rnums;
        while (rnums) {
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
                g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   22f20:	4a1a      	ldr	r2, [pc, #104]	; (22f8c <ble_ll_rand_data_get+0x74>)
   22f22:	391f      	subs	r1, #31
   22f24:	6051      	str	r1, [r2, #4]
            } else {
                ++g_ble_ll_rnum_data.rnd_out;
            }
            ++buf;
   22f26:	3401      	adds	r4, #1
            --rnums;
   22f28:	3b01      	subs	r3, #1
   22f2a:	b2db      	uxtb	r3, r3
        while (rnums) {
   22f2c:	b15b      	cbz	r3, 22f46 <ble_ll_rand_data_get+0x2e>
            buf[0] = g_ble_ll_rnum_data.rnd_out[0];
   22f2e:	4a17      	ldr	r2, [pc, #92]	; (22f8c <ble_ll_rand_data_get+0x74>)
   22f30:	6851      	ldr	r1, [r2, #4]
   22f32:	7809      	ldrb	r1, [r1, #0]
   22f34:	7021      	strb	r1, [r4, #0]
            if (IS_RNUM_BUF_END(g_ble_ll_rnum_data.rnd_out)) {
   22f36:	6852      	ldr	r2, [r2, #4]
   22f38:	4915      	ldr	r1, [pc, #84]	; (22f90 <ble_ll_rand_data_get+0x78>)
   22f3a:	428a      	cmp	r2, r1
   22f3c:	d0f0      	beq.n	22f20 <ble_ll_rand_data_get+0x8>
                ++g_ble_ll_rnum_data.rnd_out;
   22f3e:	3201      	adds	r2, #1
   22f40:	4912      	ldr	r1, [pc, #72]	; (22f8c <ble_ll_rand_data_get+0x74>)
   22f42:	604a      	str	r2, [r1, #4]
   22f44:	e7ef      	b.n	22f26 <ble_ll_rand_data_get+0xe>
        }
        OS_EXIT_CRITICAL(sr);
   22f46:	f7e8 fac9 	bl	b4dc <os_arch_restore_sr>

        /* Make sure rng is started! */
        ble_hw_rng_start();
   22f4a:	f002 fd31 	bl	259b0 <ble_hw_rng_start>

        /* Wait till bytes are in buffer. */
        if (len) {
   22f4e:	b985      	cbnz	r5, 22f72 <ble_ll_rand_data_get+0x5a>
    while (len != 0) {
   22f50:	b1d5      	cbz	r5, 22f88 <ble_ll_rand_data_get+0x70>
        OS_ENTER_CRITICAL(sr);
   22f52:	f7e8 fabd 	bl	b4d0 <os_arch_save_sr>
        rnums = g_ble_ll_rnum_data.rnd_size;
   22f56:	4b0d      	ldr	r3, [pc, #52]	; (22f8c <ble_ll_rand_data_get+0x74>)
   22f58:	7a1b      	ldrb	r3, [r3, #8]
   22f5a:	b2db      	uxtb	r3, r3
        if (rnums > len) {
   22f5c:	429d      	cmp	r5, r3
   22f5e:	d200      	bcs.n	22f62 <ble_ll_rand_data_get+0x4a>
            rnums = len;
   22f60:	462b      	mov	r3, r5
        len -= rnums;
   22f62:	1aed      	subs	r5, r5, r3
   22f64:	b2ed      	uxtb	r5, r5
        g_ble_ll_rnum_data.rnd_size -= rnums;
   22f66:	4909      	ldr	r1, [pc, #36]	; (22f8c <ble_ll_rand_data_get+0x74>)
   22f68:	7a0a      	ldrb	r2, [r1, #8]
   22f6a:	1ad2      	subs	r2, r2, r3
   22f6c:	b2d2      	uxtb	r2, r2
   22f6e:	720a      	strb	r2, [r1, #8]
        while (rnums) {
   22f70:	e7dc      	b.n	22f2c <ble_ll_rand_data_get+0x14>
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   22f72:	4b06      	ldr	r3, [pc, #24]	; (22f8c <ble_ll_rand_data_get+0x74>)
   22f74:	7a1b      	ldrb	r3, [r3, #8]
   22f76:	b2db      	uxtb	r3, r3
   22f78:	42ab      	cmp	r3, r5
   22f7a:	d2e9      	bcs.n	22f50 <ble_ll_rand_data_get+0x38>
                   (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE))) {
   22f7c:	4b03      	ldr	r3, [pc, #12]	; (22f8c <ble_ll_rand_data_get+0x74>)
   22f7e:	7a1b      	ldrb	r3, [r3, #8]
   22f80:	b2db      	uxtb	r3, r3
            while ((g_ble_ll_rnum_data.rnd_size < len) &&
   22f82:	2b1f      	cmp	r3, #31
   22f84:	d9f5      	bls.n	22f72 <ble_ll_rand_data_get+0x5a>
   22f86:	e7e3      	b.n	22f50 <ble_ll_rand_data_get+0x38>
            }
        }
    }
#endif
    return BLE_ERR_SUCCESS;
}
   22f88:	2000      	movs	r0, #0
   22f8a:	bd38      	pop	{r3, r4, r5, pc}
   22f8c:	20008a0c 	.word	0x20008a0c
   22f90:	20008a0b 	.word	0x20008a0b

00022f94 <ble_ll_rand_prand_get>:
 *
 * @param prand
 */
void
ble_ll_rand_prand_get(uint8_t *prand)
{
   22f94:	b510      	push	{r4, lr}
   22f96:	4604      	mov	r4, r0
    uint16_t sum;

    while (1) {
        /* Get 24 bits of random data */
        ble_ll_rand_data_get(prand, 3);
   22f98:	2103      	movs	r1, #3
   22f9a:	4620      	mov	r0, r4
   22f9c:	f7ff ffbc 	bl	22f18 <ble_ll_rand_data_get>

        /* Prand cannot be all zeros or 1's. */
        sum = prand[0] + prand[1] + prand[2];
   22fa0:	7823      	ldrb	r3, [r4, #0]
   22fa2:	7862      	ldrb	r2, [r4, #1]
   22fa4:	4413      	add	r3, r2
   22fa6:	78a2      	ldrb	r2, [r4, #2]
        if ((sum != 0) && (sum != (3 * 0xff))) {
   22fa8:	18d3      	adds	r3, r2, r3
   22faa:	d0f5      	beq.n	22f98 <ble_ll_rand_prand_get+0x4>
   22fac:	f240 21fd 	movw	r1, #765	; 0x2fd
   22fb0:	428b      	cmp	r3, r1
   22fb2:	d0f1      	beq.n	22f98 <ble_ll_rand_prand_get+0x4>
            break;
        }
    }

    /* Upper two bits must be 01 */
    prand[2] &= ~0xc0;
   22fb4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    prand[2] |= 0x40;
   22fb8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   22fbc:	70a2      	strb	r2, [r4, #2]
}
   22fbe:	bd10      	pop	{r4, pc}

00022fc0 <ble_ll_rand_start>:
 *
 * @return int
 */
int
ble_ll_rand_start(void)
{
   22fc0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    /* Nothing to do - this is handled by driver */
#else
    /* Start the generation of numbers if we are not full */
    if (g_ble_ll_rnum_data.rnd_size < MYNEWT_VAL(BLE_LL_RNG_BUFSIZE)) {
   22fc2:	4b05      	ldr	r3, [pc, #20]	; (22fd8 <ble_ll_rand_start+0x18>)
   22fc4:	7a1b      	ldrb	r3, [r3, #8]
   22fc6:	b2db      	uxtb	r3, r3
   22fc8:	2b1f      	cmp	r3, #31
   22fca:	d901      	bls.n	22fd0 <ble_ll_rand_start+0x10>
        ble_hw_rng_start();
    }
#endif
    return 0;
}
   22fcc:	2000      	movs	r0, #0
   22fce:	bd08      	pop	{r3, pc}
        ble_hw_rng_start();
   22fd0:	f002 fcee 	bl	259b0 <ble_hw_rng_start>
   22fd4:	e7fa      	b.n	22fcc <ble_ll_rand_start+0xc>
   22fd6:	bf00      	nop
   22fd8:	20008a0c 	.word	0x20008a0c

00022fdc <ble_ll_rand_init>:
 *
 * @return int
 */
int
ble_ll_rand_init(void)
{
   22fdc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(TRNG)
    g_trng = (struct trng_dev *) os_dev_open("trng", OS_TIMEOUT_NEVER, NULL);
#else
    g_ble_ll_rnum_data.rnd_in = g_ble_ll_rnum_buf;
   22fde:	4b05      	ldr	r3, [pc, #20]	; (22ff4 <ble_ll_rand_init+0x18>)
   22fe0:	4a05      	ldr	r2, [pc, #20]	; (22ff8 <ble_ll_rand_init+0x1c>)
   22fe2:	601a      	str	r2, [r3, #0]
    g_ble_ll_rnum_data.rnd_out = g_ble_ll_rnum_buf;
   22fe4:	605a      	str	r2, [r3, #4]
    ble_hw_rng_init(ble_ll_rand_sample, 1);
   22fe6:	2101      	movs	r1, #1
   22fe8:	4804      	ldr	r0, [pc, #16]	; (22ffc <ble_ll_rand_init+0x20>)
   22fea:	f002 fcbd 	bl	25968 <ble_hw_rng_init>
#endif
    return 0;
}
   22fee:	2000      	movs	r0, #0
   22ff0:	bd08      	pop	{r3, pc}
   22ff2:	bf00      	nop
   22ff4:	20008a0c 	.word	0x20008a0c
   22ff8:	200089ec 	.word	0x200089ec
   22ffc:	00022ec9 	.word	0x00022ec9

00023000 <ble_ll_resolv_irk_nonzero>:
{
    int i;
    int rc;

    rc = 0;
    for (i = 0; i < 16; ++i) {
   23000:	2300      	movs	r3, #0
   23002:	2b0f      	cmp	r3, #15
   23004:	dc04      	bgt.n	23010 <ble_ll_resolv_irk_nonzero+0x10>
        if (*irk != 0) {
   23006:	7802      	ldrb	r2, [r0, #0]
   23008:	b922      	cbnz	r2, 23014 <ble_ll_resolv_irk_nonzero+0x14>
            rc = 1;
            break;
        }
        ++irk;
   2300a:	3001      	adds	r0, #1
    for (i = 0; i < 16; ++i) {
   2300c:	3301      	adds	r3, #1
   2300e:	e7f8      	b.n	23002 <ble_ll_resolv_irk_nonzero+0x2>
    rc = 0;
   23010:	2000      	movs	r0, #0
   23012:	4770      	bx	lr
            rc = 1;
   23014:	2001      	movs	r0, #1
    }

    return rc;
}
   23016:	4770      	bx	lr

00023018 <ble_ll_is_controller_busy>:
{
   23018:	b508      	push	{r3, lr}
    return ble_ll_adv_enabled() || ble_ll_scan_enabled() ||
   2301a:	f7fb fa6f 	bl	1e4fc <ble_ll_adv_enabled>
   2301e:	b110      	cbz	r0, 23026 <ble_ll_is_controller_busy+0xe>
   23020:	2301      	movs	r3, #1
}
   23022:	4618      	mov	r0, r3
   23024:	bd08      	pop	{r3, pc}
    return ble_ll_adv_enabled() || ble_ll_scan_enabled() ||
   23026:	f001 fd37 	bl	24a98 <ble_ll_scan_enabled>
   2302a:	4603      	mov	r3, r0
   2302c:	b928      	cbnz	r0, 2303a <ble_ll_is_controller_busy+0x22>
   2302e:	4a04      	ldr	r2, [pc, #16]	; (23040 <ble_ll_is_controller_busy+0x28>)
   23030:	6812      	ldr	r2, [r2, #0]
   23032:	2a00      	cmp	r2, #0
   23034:	d0f5      	beq.n	23022 <ble_ll_is_controller_busy+0xa>
   23036:	2301      	movs	r3, #1
   23038:	e7f3      	b.n	23022 <ble_ll_is_controller_busy+0xa>
   2303a:	2301      	movs	r3, #1
   2303c:	e7f1      	b.n	23022 <ble_ll_is_controller_busy+0xa>
   2303e:	bf00      	nop
   23040:	200087ec 	.word	0x200087ec

00023044 <ble_ll_resolv_list_chg_allowed>:
{
   23044:	b508      	push	{r3, lr}
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   23046:	4b06      	ldr	r3, [pc, #24]	; (23060 <ble_ll_resolv_list_chg_allowed+0x1c>)
   23048:	781b      	ldrb	r3, [r3, #0]
   2304a:	b90b      	cbnz	r3, 23050 <ble_ll_resolv_list_chg_allowed+0xc>
        rc = 1;
   2304c:	2001      	movs	r0, #1
}
   2304e:	bd08      	pop	{r3, pc}
       ble_ll_is_controller_busy()) {
   23050:	f7ff ffe2 	bl	23018 <ble_ll_is_controller_busy>
    if (g_ble_ll_resolv_data.addr_res_enabled &&
   23054:	b908      	cbnz	r0, 2305a <ble_ll_resolv_list_chg_allowed+0x16>
        rc = 1;
   23056:	2001      	movs	r0, #1
    return rc;
   23058:	e7f9      	b.n	2304e <ble_ll_resolv_list_chg_allowed+0xa>
        rc = 0;
   2305a:	2000      	movs	r0, #0
   2305c:	e7f7      	b.n	2304e <ble_ll_resolv_list_chg_allowed+0xa>
   2305e:	bf00      	nop
   23060:	20008a18 	.word	0x20008a18

00023064 <ble_ll_is_on_resolv_list>:
 * is the 'position' of the device in the resolving list (the index of the
 * element plus 1).
 */
static int
ble_ll_is_on_resolv_list(const uint8_t *addr, uint8_t addr_type)
{
   23064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23066:	4607      	mov	r7, r0
   23068:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   2306a:	4c0c      	ldr	r4, [pc, #48]	; (2309c <ble_ll_is_on_resolv_list+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   2306c:	2500      	movs	r5, #0
   2306e:	e001      	b.n	23074 <ble_ll_is_on_resolv_list+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return i + 1;
        }
        ++rl;
   23070:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   23072:	3501      	adds	r5, #1
   23074:	4b0a      	ldr	r3, [pc, #40]	; (230a0 <ble_ll_is_on_resolv_list+0x3c>)
   23076:	78db      	ldrb	r3, [r3, #3]
   23078:	42ab      	cmp	r3, r5
   2307a:	dd0c      	ble.n	23096 <ble_ll_is_on_resolv_list+0x32>
        if ((rl->rl_addr_type == addr_type) &&
   2307c:	7823      	ldrb	r3, [r4, #0]
   2307e:	42b3      	cmp	r3, r6
   23080:	d1f6      	bne.n	23070 <ble_ll_is_on_resolv_list+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   23082:	2206      	movs	r2, #6
   23084:	4639      	mov	r1, r7
   23086:	f104 0024 	add.w	r0, r4, #36	; 0x24
   2308a:	f7e8 fb6b 	bl	b764 <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   2308e:	2800      	cmp	r0, #0
   23090:	d1ee      	bne.n	23070 <ble_ll_is_on_resolv_list+0xc>
            return i + 1;
   23092:	1c68      	adds	r0, r5, #1
   23094:	e000      	b.n	23098 <ble_ll_is_on_resolv_list+0x34>
    }

    return 0;
   23096:	2000      	movs	r0, #0
}
   23098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2309a:	bf00      	nop
   2309c:	20008a40 	.word	0x20008a40
   230a0:	20008a18 	.word	0x20008a18

000230a4 <ble_ll_resolv_gen_priv_addr>:
{
   230a4:	b570      	push	{r4, r5, r6, lr}
   230a6:	b08c      	sub	sp, #48	; 0x30
    BLE_LL_ASSERT(rl != NULL);
   230a8:	b350      	cbz	r0, 23100 <ble_ll_resolv_gen_priv_addr+0x5c>
   230aa:	4605      	mov	r5, r0
    if (local) {
   230ac:	bb91      	cbnz	r1, 23114 <ble_ll_resolv_gen_priv_addr+0x70>
        addr = rl->rl_peer_rpa;
   230ae:	f100 0430 	add.w	r4, r0, #48	; 0x30
        irk = rl->rl_peer_irk;
   230b2:	3514      	adds	r5, #20
    ble_ll_rand_prand_get(prand);
   230b4:	1ce0      	adds	r0, r4, #3
   230b6:	f7ff ff6d 	bl	22f94 <ble_ll_rand_prand_get>
    memcpy(ecb.key, irk, 16);
   230ba:	466e      	mov	r6, sp
   230bc:	6828      	ldr	r0, [r5, #0]
   230be:	6869      	ldr	r1, [r5, #4]
   230c0:	68aa      	ldr	r2, [r5, #8]
   230c2:	68eb      	ldr	r3, [r5, #12]
   230c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    memset(ecb.plain_text, 0, 13);
   230c6:	2300      	movs	r3, #0
   230c8:	9304      	str	r3, [sp, #16]
   230ca:	9305      	str	r3, [sp, #20]
   230cc:	9306      	str	r3, [sp, #24]
   230ce:	f88d 301c 	strb.w	r3, [sp, #28]
    ecb.plain_text[13] = prand[2];
   230d2:	7963      	ldrb	r3, [r4, #5]
   230d4:	f88d 301d 	strb.w	r3, [sp, #29]
    ecb.plain_text[14] = prand[1];
   230d8:	7923      	ldrb	r3, [r4, #4]
   230da:	f88d 301e 	strb.w	r3, [sp, #30]
    ecb.plain_text[15] = prand[0];
   230de:	78e3      	ldrb	r3, [r4, #3]
   230e0:	f88d 301f 	strb.w	r3, [sp, #31]
    ble_hw_encrypt_block(&ecb);
   230e4:	4668      	mov	r0, sp
   230e6:	f002 fc23 	bl	25930 <ble_hw_encrypt_block>
    addr[0] = ecb.cipher_text[15];
   230ea:	f89d 302f 	ldrb.w	r3, [sp, #47]	; 0x2f
   230ee:	7023      	strb	r3, [r4, #0]
    addr[1] = ecb.cipher_text[14];
   230f0:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
   230f4:	7063      	strb	r3, [r4, #1]
    addr[2] = ecb.cipher_text[13];
   230f6:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   230fa:	70a3      	strb	r3, [r4, #2]
}
   230fc:	b00c      	add	sp, #48	; 0x30
   230fe:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   23100:	f7e5 f85e 	bl	81c0 <hal_debugger_connected>
   23104:	b100      	cbz	r0, 23108 <ble_ll_resolv_gen_priv_addr+0x64>
   23106:	be01      	bkpt	0x0001
   23108:	2300      	movs	r3, #0
   2310a:	461a      	mov	r2, r3
   2310c:	4619      	mov	r1, r3
   2310e:	4618      	mov	r0, r3
   23110:	f7e6 fbec 	bl	98ec <__assert_func>
        addr = rl->rl_local_rpa;
   23114:	f100 042a 	add.w	r4, r0, #42	; 0x2a
        irk = rl->rl_local_irk;
   23118:	3504      	adds	r5, #4
   2311a:	e7cb      	b.n	230b4 <ble_ll_resolv_gen_priv_addr+0x10>

0002311c <ble_ll_resolv_rpa_timer_cb>:
{
   2311c:	b570      	push	{r4, r5, r6, lr}
    rl = &g_ble_ll_resolv_list[0];
   2311e:	4c16      	ldr	r4, [pc, #88]	; (23178 <ble_ll_resolv_rpa_timer_cb+0x5c>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   23120:	2500      	movs	r5, #0
   23122:	e00c      	b.n	2313e <ble_ll_resolv_rpa_timer_cb+0x22>
            OS_ENTER_CRITICAL(sr);
   23124:	f7e8 f9d4 	bl	b4d0 <os_arch_save_sr>
   23128:	4606      	mov	r6, r0
            ble_ll_resolv_gen_priv_addr(rl, 1);
   2312a:	2101      	movs	r1, #1
   2312c:	4620      	mov	r0, r4
   2312e:	f7ff ffb9 	bl	230a4 <ble_ll_resolv_gen_priv_addr>
            OS_EXIT_CRITICAL(sr);
   23132:	4630      	mov	r0, r6
   23134:	f7e8 f9d2 	bl	b4dc <os_arch_restore_sr>
   23138:	e008      	b.n	2314c <ble_ll_resolv_rpa_timer_cb+0x30>
        ++rl;
   2313a:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   2313c:	3501      	adds	r5, #1
   2313e:	4b0f      	ldr	r3, [pc, #60]	; (2317c <ble_ll_resolv_rpa_timer_cb+0x60>)
   23140:	78db      	ldrb	r3, [r3, #3]
   23142:	42ab      	cmp	r3, r5
   23144:	dd10      	ble.n	23168 <ble_ll_resolv_rpa_timer_cb+0x4c>
        if (rl->rl_has_local) {
   23146:	78a3      	ldrb	r3, [r4, #2]
   23148:	2b00      	cmp	r3, #0
   2314a:	d1eb      	bne.n	23124 <ble_ll_resolv_rpa_timer_cb+0x8>
        if (rl->rl_has_peer) {
   2314c:	78e3      	ldrb	r3, [r4, #3]
   2314e:	2b00      	cmp	r3, #0
   23150:	d0f3      	beq.n	2313a <ble_ll_resolv_rpa_timer_cb+0x1e>
            OS_ENTER_CRITICAL(sr);
   23152:	f7e8 f9bd 	bl	b4d0 <os_arch_save_sr>
   23156:	4606      	mov	r6, r0
            ble_ll_resolv_gen_priv_addr(rl, 0);
   23158:	2100      	movs	r1, #0
   2315a:	4620      	mov	r0, r4
   2315c:	f7ff ffa2 	bl	230a4 <ble_ll_resolv_gen_priv_addr>
            OS_EXIT_CRITICAL(sr);
   23160:	4630      	mov	r0, r6
   23162:	f7e8 f9bb 	bl	b4dc <os_arch_restore_sr>
   23166:	e7e8      	b.n	2313a <ble_ll_resolv_rpa_timer_cb+0x1e>
    ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
   23168:	4804      	ldr	r0, [pc, #16]	; (2317c <ble_ll_resolv_rpa_timer_cb+0x60>)
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   2316a:	6841      	ldr	r1, [r0, #4]
   2316c:	3008      	adds	r0, #8
   2316e:	f7e6 fd91 	bl	9c94 <os_callout_reset>
    ble_ll_adv_rpa_timeout();
   23172:	f7fb f801 	bl	1e178 <ble_ll_adv_rpa_timeout>
}
   23176:	bd70      	pop	{r4, r5, r6, pc}
   23178:	20008a40 	.word	0x20008a40
   2317c:	20008a18 	.word	0x20008a18

00023180 <ble_ll_resolv_list_clr>:
{
   23180:	b538      	push	{r3, r4, r5, lr}
    if (!ble_ll_resolv_list_chg_allowed()) {
   23182:	f7ff ff5f 	bl	23044 <ble_ll_resolv_list_chg_allowed>
   23186:	b158      	cbz	r0, 231a0 <ble_ll_resolv_list_clr+0x20>
    g_ble_ll_resolv_data.rl_cnt_hw = 0;
   23188:	4d06      	ldr	r5, [pc, #24]	; (231a4 <ble_ll_resolv_list_clr+0x24>)
   2318a:	2400      	movs	r4, #0
   2318c:	70ac      	strb	r4, [r5, #2]
    g_ble_ll_resolv_data.rl_cnt = 0;
   2318e:	70ec      	strb	r4, [r5, #3]
    ble_hw_resolv_list_clear();
   23190:	f002 fc3a 	bl	25a08 <ble_hw_resolv_list_clear>
    os_callout_stop(&co->co);
   23194:	f105 0008 	add.w	r0, r5, #8
   23198:	f7e6 fd5e 	bl	9c58 <os_callout_stop>
    return BLE_ERR_SUCCESS;
   2319c:	4620      	mov	r0, r4
}
   2319e:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   231a0:	200c      	movs	r0, #12
   231a2:	e7fc      	b.n	2319e <ble_ll_resolv_list_clr+0x1e>
   231a4:	20008a18 	.word	0x20008a18

000231a8 <ble_ll_resolv_list_read_size>:
    rsp->size = g_ble_ll_resolv_data.rl_size;
   231a8:	4b03      	ldr	r3, [pc, #12]	; (231b8 <ble_ll_resolv_list_read_size+0x10>)
   231aa:	785b      	ldrb	r3, [r3, #1]
   231ac:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   231ae:	2301      	movs	r3, #1
   231b0:	700b      	strb	r3, [r1, #0]
}
   231b2:	2000      	movs	r0, #0
   231b4:	4770      	bx	lr
   231b6:	bf00      	nop
   231b8:	20008a18 	.word	0x20008a18

000231bc <ble_ll_resolv_list_find>:
 *
 * @return Pointer to resolving list entry or NULL if no entry found.
 */
struct ble_ll_resolv_entry *
ble_ll_resolv_list_find(const uint8_t *addr, uint8_t addr_type)
{
   231bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   231be:	4607      	mov	r7, r0
   231c0:	460e      	mov	r6, r1
    int i;
    struct ble_ll_resolv_entry *rl;

    rl = &g_ble_ll_resolv_list[0];
   231c2:	4c0c      	ldr	r4, [pc, #48]	; (231f4 <ble_ll_resolv_list_find+0x38>)
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   231c4:	2500      	movs	r5, #0
   231c6:	e001      	b.n	231cc <ble_ll_resolv_list_find+0x10>
        if ((rl->rl_addr_type == addr_type) &&
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return rl;
        }
        ++rl;
   231c8:	3436      	adds	r4, #54	; 0x36
    for (i = 0; i < g_ble_ll_resolv_data.rl_cnt; ++i) {
   231ca:	3501      	adds	r5, #1
   231cc:	4b0a      	ldr	r3, [pc, #40]	; (231f8 <ble_ll_resolv_list_find+0x3c>)
   231ce:	78db      	ldrb	r3, [r3, #3]
   231d0:	42ab      	cmp	r3, r5
   231d2:	dd0b      	ble.n	231ec <ble_ll_resolv_list_find+0x30>
        if ((rl->rl_addr_type == addr_type) &&
   231d4:	7823      	ldrb	r3, [r4, #0]
   231d6:	42b3      	cmp	r3, r6
   231d8:	d1f6      	bne.n	231c8 <ble_ll_resolv_list_find+0xc>
            (!memcmp(&rl->rl_identity_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   231da:	2206      	movs	r2, #6
   231dc:	4639      	mov	r1, r7
   231de:	f104 0024 	add.w	r0, r4, #36	; 0x24
   231e2:	f7e8 fabf 	bl	b764 <memcmp>
        if ((rl->rl_addr_type == addr_type) &&
   231e6:	2800      	cmp	r0, #0
   231e8:	d1ee      	bne.n	231c8 <ble_ll_resolv_list_find+0xc>
   231ea:	e000      	b.n	231ee <ble_ll_resolv_list_find+0x32>
    }

    return NULL;
   231ec:	2400      	movs	r4, #0
}
   231ee:	4620      	mov	r0, r4
   231f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   231f2:	bf00      	nop
   231f4:	20008a40 	.word	0x20008a40
   231f8:	20008a18 	.word	0x20008a18

000231fc <ble_ll_resolv_list_add>:
 *
 * @return int
 */
int
ble_ll_resolv_list_add(const uint8_t *cmdbuf, uint8_t len)
{
   231fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    const struct ble_hci_le_add_resolv_list_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_resolv_entry *rl;
    int rc = BLE_ERR_SUCCESS;

    if (len != sizeof(*cmd)) {
   23200:	2927      	cmp	r1, #39	; 0x27
   23202:	d003      	beq.n	2320c <ble_ll_resolv_list_add+0x10>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   23204:	2512      	movs	r5, #18
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
                              g_ble_ll_resolv_data.rpa_tmo);
    }

    return rc;
}
   23206:	4628      	mov	r0, r5
   23208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2320c:	4604      	mov	r4, r0
    if (!ble_ll_resolv_list_chg_allowed()) {
   2320e:	f7ff ff19 	bl	23044 <ble_ll_resolv_list_chg_allowed>
   23212:	2800      	cmp	r0, #0
   23214:	d07d      	beq.n	23312 <ble_ll_resolv_list_add+0x116>
    if (g_ble_ll_resolv_data.rl_cnt >= g_ble_ll_resolv_data.rl_size) {
   23216:	4b42      	ldr	r3, [pc, #264]	; (23320 <ble_ll_resolv_list_add+0x124>)
   23218:	78df      	ldrb	r7, [r3, #3]
   2321a:	785b      	ldrb	r3, [r3, #1]
   2321c:	429f      	cmp	r7, r3
   2321e:	d27a      	bcs.n	23316 <ble_ll_resolv_list_add+0x11a>
    if (ble_ll_is_on_resolv_list(cmd->peer_id_addr, cmd->peer_addr_type)) {
   23220:	f104 0801 	add.w	r8, r4, #1
   23224:	7821      	ldrb	r1, [r4, #0]
   23226:	4640      	mov	r0, r8
   23228:	f7ff ff1c 	bl	23064 <ble_ll_is_on_resolv_list>
   2322c:	4605      	mov	r5, r0
   2322e:	2800      	cmp	r0, #0
   23230:	d173      	bne.n	2331a <ble_ll_resolv_list_add+0x11e>
    if (ble_ll_resolv_irk_nonzero(cmd->peer_irk)) {
   23232:	f104 0907 	add.w	r9, r4, #7
   23236:	4648      	mov	r0, r9
   23238:	f7ff fee2 	bl	23000 <ble_ll_resolv_irk_nonzero>
   2323c:	bb60      	cbnz	r0, 23298 <ble_ll_resolv_list_add+0x9c>
        rl = &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt];
   2323e:	4b39      	ldr	r3, [pc, #228]	; (23324 <ble_ll_resolv_list_add+0x128>)
   23240:	2636      	movs	r6, #54	; 0x36
   23242:	fb06 3607 	mla	r6, r6, r7, r3
    memset (rl, 0, sizeof(*rl));
   23246:	2236      	movs	r2, #54	; 0x36
   23248:	2100      	movs	r1, #0
   2324a:	4630      	mov	r0, r6
   2324c:	f7e8 fad7 	bl	b7fe <memset>
    rl->rl_addr_type = cmd->peer_addr_type;
   23250:	7822      	ldrb	r2, [r4, #0]
   23252:	4633      	mov	r3, r6
   23254:	f803 2b24 	strb.w	r2, [r3], #36
    memcpy(rl->rl_identity_addr, cmd->peer_id_addr, BLE_DEV_ADDR_LEN);
   23258:	f8d8 2000 	ldr.w	r2, [r8]
   2325c:	6272      	str	r2, [r6, #36]	; 0x24
   2325e:	f8b8 2004 	ldrh.w	r2, [r8, #4]
   23262:	809a      	strh	r2, [r3, #4]
    if (ble_ll_resolv_irk_nonzero(cmd->peer_irk)) {
   23264:	4648      	mov	r0, r9
   23266:	f7ff fecb 	bl	23000 <ble_ll_resolv_irk_nonzero>
   2326a:	bb28      	cbnz	r0, 232b8 <ble_ll_resolv_list_add+0xbc>
    if (ble_ll_resolv_irk_nonzero(cmd->local_irk)) {
   2326c:	3417      	adds	r4, #23
   2326e:	4620      	mov	r0, r4
   23270:	f7ff fec6 	bl	23000 <ble_ll_resolv_irk_nonzero>
   23274:	bb68      	cbnz	r0, 232d2 <ble_ll_resolv_list_add+0xd6>
    rl->rl_priv_mode = BLE_HCI_PRIVACY_NETWORK;
   23276:	2300      	movs	r3, #0
   23278:	7073      	strb	r3, [r6, #1]
    if (rl->rl_has_peer) {
   2327a:	78f3      	ldrb	r3, [r6, #3]
   2327c:	bba3      	cbnz	r3, 232e8 <ble_ll_resolv_list_add+0xec>
    g_ble_ll_resolv_data.rl_cnt++;
   2327e:	4a28      	ldr	r2, [pc, #160]	; (23320 <ble_ll_resolv_list_add+0x124>)
   23280:	78d3      	ldrb	r3, [r2, #3]
   23282:	3301      	adds	r3, #1
   23284:	b2db      	uxtb	r3, r3
   23286:	70d3      	strb	r3, [r2, #3]
    if (g_ble_ll_resolv_data.rl_cnt == 1) {
   23288:	2b01      	cmp	r3, #1
   2328a:	d1bc      	bne.n	23206 <ble_ll_resolv_list_add+0xa>
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
   2328c:	4610      	mov	r0, r2
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   2328e:	6851      	ldr	r1, [r2, #4]
   23290:	3008      	adds	r0, #8
   23292:	f7e6 fcff 	bl	9c94 <os_callout_reset>
   23296:	e7b6      	b.n	23206 <ble_ll_resolv_list_add+0xa>
        memmove(&g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw + 1],
   23298:	4b21      	ldr	r3, [pc, #132]	; (23320 <ble_ll_resolv_list_add+0x124>)
   2329a:	789b      	ldrb	r3, [r3, #2]
   2329c:	4821      	ldr	r0, [pc, #132]	; (23324 <ble_ll_resolv_list_add+0x128>)
   2329e:	2236      	movs	r2, #54	; 0x36
   232a0:	fb03 2c02 	mla	ip, r3, r2, r2
                &g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw],
   232a4:	fb02 0603 	mla	r6, r2, r3, r0
                (g_ble_ll_resolv_data.rl_cnt - g_ble_ll_resolv_data.rl_cnt_hw) *
   232a8:	1aff      	subs	r7, r7, r3
        memmove(&g_ble_ll_resolv_list[g_ble_ll_resolv_data.rl_cnt_hw + 1],
   232aa:	fb02 f207 	mul.w	r2, r2, r7
   232ae:	4631      	mov	r1, r6
   232b0:	4460      	add	r0, ip
   232b2:	f7e8 fa88 	bl	b7c6 <memmove>
   232b6:	e7c6      	b.n	23246 <ble_ll_resolv_list_add+0x4a>
        swap_buf(rl->rl_peer_irk, cmd->peer_irk, 16);
   232b8:	2210      	movs	r2, #16
   232ba:	4649      	mov	r1, r9
   232bc:	f106 0014 	add.w	r0, r6, #20
   232c0:	f7f8 fd0b 	bl	1bcda <swap_buf>
        rl->rl_has_peer = 1;
   232c4:	2301      	movs	r3, #1
   232c6:	70f3      	strb	r3, [r6, #3]
        ble_ll_resolv_gen_priv_addr(rl, 0);
   232c8:	2100      	movs	r1, #0
   232ca:	4630      	mov	r0, r6
   232cc:	f7ff feea 	bl	230a4 <ble_ll_resolv_gen_priv_addr>
   232d0:	e7cc      	b.n	2326c <ble_ll_resolv_list_add+0x70>
        swap_buf(rl->rl_local_irk, cmd->local_irk, 16);
   232d2:	2210      	movs	r2, #16
   232d4:	4621      	mov	r1, r4
   232d6:	1d30      	adds	r0, r6, #4
   232d8:	f7f8 fcff 	bl	1bcda <swap_buf>
        rl->rl_has_local = 1;
   232dc:	2101      	movs	r1, #1
   232de:	70b1      	strb	r1, [r6, #2]
        ble_ll_resolv_gen_priv_addr(rl, 1);
   232e0:	4630      	mov	r0, r6
   232e2:	f7ff fedf 	bl	230a4 <ble_ll_resolv_gen_priv_addr>
   232e6:	e7c6      	b.n	23276 <ble_ll_resolv_list_add+0x7a>
        rc = ble_hw_resolv_list_add(rl->rl_peer_irk);
   232e8:	f106 0014 	add.w	r0, r6, #20
   232ec:	f002 fb92 	bl	25a14 <ble_hw_resolv_list_add>
        BLE_LL_ASSERT(rc == BLE_ERR_SUCCESS);
   232f0:	4605      	mov	r5, r0
   232f2:	b920      	cbnz	r0, 232fe <ble_ll_resolv_list_add+0x102>
        g_ble_ll_resolv_data.rl_cnt_hw++;
   232f4:	4a0a      	ldr	r2, [pc, #40]	; (23320 <ble_ll_resolv_list_add+0x124>)
   232f6:	7893      	ldrb	r3, [r2, #2]
   232f8:	3301      	adds	r3, #1
   232fa:	7093      	strb	r3, [r2, #2]
   232fc:	e7bf      	b.n	2327e <ble_ll_resolv_list_add+0x82>
        BLE_LL_ASSERT(rc == BLE_ERR_SUCCESS);
   232fe:	f7e4 ff5f 	bl	81c0 <hal_debugger_connected>
   23302:	b100      	cbz	r0, 23306 <ble_ll_resolv_list_add+0x10a>
   23304:	be01      	bkpt	0x0001
   23306:	2300      	movs	r3, #0
   23308:	461a      	mov	r2, r3
   2330a:	4619      	mov	r1, r3
   2330c:	4618      	mov	r0, r3
   2330e:	f7e6 faed 	bl	98ec <__assert_func>
        return BLE_ERR_CMD_DISALLOWED;
   23312:	250c      	movs	r5, #12
   23314:	e777      	b.n	23206 <ble_ll_resolv_list_add+0xa>
        return BLE_ERR_MEM_CAPACITY;
   23316:	2507      	movs	r5, #7
   23318:	e775      	b.n	23206 <ble_ll_resolv_list_add+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2331a:	2512      	movs	r5, #18
   2331c:	e773      	b.n	23206 <ble_ll_resolv_list_add+0xa>
   2331e:	bf00      	nop
   23320:	20008a18 	.word	0x20008a18
   23324:	20008a40 	.word	0x20008a40

00023328 <ble_ll_resolv_list_rmv>:
ble_ll_resolv_list_rmv(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rmv_resolve_list_cp *cmd = (const void *) cmdbuf;
    int position;

    if (len != sizeof(*cmd)) {
   23328:	2907      	cmp	r1, #7
   2332a:	d001      	beq.n	23330 <ble_ll_resolv_list_rmv+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2332c:	2012      	movs	r0, #18

        return BLE_ERR_SUCCESS;
    }

    return BLE_ERR_UNK_CONN_ID;
}
   2332e:	4770      	bx	lr
{
   23330:	b570      	push	{r4, r5, r6, lr}
   23332:	4604      	mov	r4, r0
    if (!ble_ll_resolv_list_chg_allowed()) {
   23334:	f7ff fe86 	bl	23044 <ble_ll_resolv_list_chg_allowed>
   23338:	2800      	cmp	r0, #0
   2333a:	d037      	beq.n	233ac <ble_ll_resolv_list_rmv+0x84>
    position = ble_ll_is_on_resolv_list(cmd->peer_id_addr, cmd->peer_addr_type);
   2333c:	7821      	ldrb	r1, [r4, #0]
   2333e:	1c60      	adds	r0, r4, #1
   23340:	f7ff fe90 	bl	23064 <ble_ll_is_on_resolv_list>
    if (position) {
   23344:	4604      	mov	r4, r0
   23346:	b398      	cbz	r0, 233b0 <ble_ll_resolv_list_rmv+0x88>
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   23348:	4b1a      	ldr	r3, [pc, #104]	; (233b4 <ble_ll_resolv_list_rmv+0x8c>)
   2334a:	78dd      	ldrb	r5, [r3, #3]
   2334c:	4285      	cmp	r5, r0
   2334e:	db16      	blt.n	2337e <ble_ll_resolv_list_rmv+0x56>
        memmove(&g_ble_ll_resolv_list[position - 1],
   23350:	1e46      	subs	r6, r0, #1
   23352:	4819      	ldr	r0, [pc, #100]	; (233b8 <ble_ll_resolv_list_rmv+0x90>)
   23354:	2336      	movs	r3, #54	; 0x36
                (g_ble_ll_resolv_data.rl_cnt - position) *
   23356:	1b2a      	subs	r2, r5, r4
        memmove(&g_ble_ll_resolv_list[position - 1],
   23358:	fb03 f202 	mul.w	r2, r3, r2
   2335c:	fb03 0104 	mla	r1, r3, r4, r0
   23360:	fb03 0006 	mla	r0, r3, r6, r0
   23364:	f7e8 fa2f 	bl	b7c6 <memmove>
        g_ble_ll_resolv_data.rl_cnt--;
   23368:	4b12      	ldr	r3, [pc, #72]	; (233b4 <ble_ll_resolv_list_rmv+0x8c>)
   2336a:	3d01      	subs	r5, #1
   2336c:	70dd      	strb	r5, [r3, #3]
        if (position <= g_ble_ll_resolv_data.rl_cnt_hw) {
   2336e:	789b      	ldrb	r3, [r3, #2]
   23370:	42a3      	cmp	r3, r4
   23372:	da0e      	bge.n	23392 <ble_ll_resolv_list_rmv+0x6a>
        if (g_ble_ll_resolv_data.rl_cnt == 0) {
   23374:	4b0f      	ldr	r3, [pc, #60]	; (233b4 <ble_ll_resolv_list_rmv+0x8c>)
   23376:	78db      	ldrb	r3, [r3, #3]
   23378:	b19b      	cbz	r3, 233a2 <ble_ll_resolv_list_rmv+0x7a>
        return BLE_ERR_SUCCESS;
   2337a:	2000      	movs	r0, #0
   2337c:	e017      	b.n	233ae <ble_ll_resolv_list_rmv+0x86>
        BLE_LL_ASSERT(position <= g_ble_ll_resolv_data.rl_cnt);
   2337e:	f7e4 ff1f 	bl	81c0 <hal_debugger_connected>
   23382:	b100      	cbz	r0, 23386 <ble_ll_resolv_list_rmv+0x5e>
   23384:	be01      	bkpt	0x0001
   23386:	2300      	movs	r3, #0
   23388:	461a      	mov	r2, r3
   2338a:	4619      	mov	r1, r3
   2338c:	4618      	mov	r0, r3
   2338e:	f7e6 faad 	bl	98ec <__assert_func>
            ble_hw_resolv_list_rmv(position - 1);
   23392:	4630      	mov	r0, r6
   23394:	f002 fb5a 	bl	25a4c <ble_hw_resolv_list_rmv>
            g_ble_ll_resolv_data.rl_cnt_hw--;
   23398:	4a06      	ldr	r2, [pc, #24]	; (233b4 <ble_ll_resolv_list_rmv+0x8c>)
   2339a:	7893      	ldrb	r3, [r2, #2]
   2339c:	3b01      	subs	r3, #1
   2339e:	7093      	strb	r3, [r2, #2]
   233a0:	e7e8      	b.n	23374 <ble_ll_resolv_list_rmv+0x4c>
    os_callout_stop(&co->co);
   233a2:	4806      	ldr	r0, [pc, #24]	; (233bc <ble_ll_resolv_list_rmv+0x94>)
   233a4:	f7e6 fc58 	bl	9c58 <os_callout_stop>
        return BLE_ERR_SUCCESS;
   233a8:	2000      	movs	r0, #0
   233aa:	e000      	b.n	233ae <ble_ll_resolv_list_rmv+0x86>
        return BLE_ERR_CMD_DISALLOWED;
   233ac:	200c      	movs	r0, #12
}
   233ae:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_ERR_UNK_CONN_ID;
   233b0:	2002      	movs	r0, #2
   233b2:	e7fc      	b.n	233ae <ble_ll_resolv_list_rmv+0x86>
   233b4:	20008a18 	.word	0x20008a18
   233b8:	20008a40 	.word	0x20008a40
   233bc:	20008a20 	.word	0x20008a20

000233c0 <ble_ll_resolv_enable_cmd>:
int
ble_ll_resolv_enable_cmd(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_addr_res_en_cp *cmd = (const void *) cmdbuf;

    if (len != sizeof(*cmd)) {
   233c0:	2901      	cmp	r1, #1
   233c2:	d002      	beq.n	233ca <ble_ll_resolv_enable_cmd+0xa>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   233c4:	2312      	movs	r3, #18
    }

    g_ble_ll_resolv_data.addr_res_enabled = cmd->enable;

    return BLE_ERR_SUCCESS;
}
   233c6:	4618      	mov	r0, r3
   233c8:	4770      	bx	lr
{
   233ca:	b510      	push	{r4, lr}
   233cc:	4604      	mov	r4, r0
    if (ble_ll_is_controller_busy()) {
   233ce:	f7ff fe23 	bl	23018 <ble_ll_is_controller_busy>
   233d2:	4603      	mov	r3, r0
   233d4:	b930      	cbnz	r0, 233e4 <ble_ll_resolv_enable_cmd+0x24>
    if (cmd->enable > 1) {
   233d6:	7822      	ldrb	r2, [r4, #0]
   233d8:	2a01      	cmp	r2, #1
   233da:	d805      	bhi.n	233e8 <ble_ll_resolv_enable_cmd+0x28>
    g_ble_ll_resolv_data.addr_res_enabled = cmd->enable;
   233dc:	4903      	ldr	r1, [pc, #12]	; (233ec <ble_ll_resolv_enable_cmd+0x2c>)
   233de:	700a      	strb	r2, [r1, #0]
}
   233e0:	4618      	mov	r0, r3
   233e2:	bd10      	pop	{r4, pc}
        return  BLE_ERR_CMD_DISALLOWED;
   233e4:	230c      	movs	r3, #12
   233e6:	e7fb      	b.n	233e0 <ble_ll_resolv_enable_cmd+0x20>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   233e8:	2312      	movs	r3, #18
   233ea:	e7f9      	b.n	233e0 <ble_ll_resolv_enable_cmd+0x20>
   233ec:	20008a18 	.word	0x20008a18

000233f0 <ble_ll_resolv_peer_addr_rd>:
    const struct ble_hci_le_rd_peer_recolv_addr_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_le_rd_peer_recolv_addr_rp *rsp = (void *) rspbuf;
    struct ble_ll_resolv_entry *rl;
    int rc;

    if (len != sizeof(*cmd)) {
   233f0:	2907      	cmp	r1, #7
   233f2:	d001      	beq.n	233f8 <ble_ll_resolv_peer_addr_rd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   233f4:	2012      	movs	r0, #18
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   233f6:	4770      	bx	lr
{
   233f8:	b538      	push	{r3, r4, r5, lr}
   233fa:	461d      	mov	r5, r3
   233fc:	4614      	mov	r4, r2
    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_addr_type);
   233fe:	7801      	ldrb	r1, [r0, #0]
   23400:	3001      	adds	r0, #1
   23402:	f7ff fedb 	bl	231bc <ble_ll_resolv_list_find>
    if (rl) {
   23406:	b140      	cbz	r0, 2341a <ble_ll_resolv_peer_addr_rd+0x2a>
        memcpy(rsp->rpa, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   23408:	f850 3f30 	ldr.w	r3, [r0, #48]!
   2340c:	6023      	str	r3, [r4, #0]
   2340e:	8883      	ldrh	r3, [r0, #4]
   23410:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   23412:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   23414:	2306      	movs	r3, #6
   23416:	702b      	strb	r3, [r5, #0]
}
   23418:	bd38      	pop	{r3, r4, r5, pc}
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
   2341a:	2300      	movs	r3, #0
   2341c:	6023      	str	r3, [r4, #0]
   2341e:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   23420:	2002      	movs	r0, #2
   23422:	e7f7      	b.n	23414 <ble_ll_resolv_peer_addr_rd+0x24>

00023424 <ble_ll_resolv_local_addr_rd>:
    const struct ble_hci_le_rd_local_recolv_addr_cp *cmd = (const void *) cmdbuf;
    struct ble_hci_le_rd_local_recolv_addr_rp *rsp = (void *) rspbuf;
    struct ble_ll_resolv_entry *rl;
    int rc;

    if (len != sizeof(*cmd)) {
   23424:	2907      	cmp	r1, #7
   23426:	d001      	beq.n	2342c <ble_ll_resolv_local_addr_rd+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   23428:	2012      	movs	r0, #18
        rc = BLE_ERR_UNK_CONN_ID;
    }

    *rsplen = sizeof(*rsp);
    return rc;
}
   2342a:	4770      	bx	lr
{
   2342c:	b538      	push	{r3, r4, r5, lr}
   2342e:	461d      	mov	r5, r3
   23430:	4614      	mov	r4, r2
    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_addr_type);
   23432:	7801      	ldrb	r1, [r0, #0]
   23434:	3001      	adds	r0, #1
   23436:	f7ff fec1 	bl	231bc <ble_ll_resolv_list_find>
    if (rl) {
   2343a:	b140      	cbz	r0, 2344e <ble_ll_resolv_local_addr_rd+0x2a>
        memcpy(rsp->rpa, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   2343c:	f850 3f2a 	ldr.w	r3, [r0, #42]!
   23440:	6023      	str	r3, [r4, #0]
   23442:	8883      	ldrh	r3, [r0, #4]
   23444:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_SUCCESS;
   23446:	2000      	movs	r0, #0
    *rsplen = sizeof(*rsp);
   23448:	2306      	movs	r3, #6
   2344a:	702b      	strb	r3, [r5, #0]
}
   2344c:	bd38      	pop	{r3, r4, r5, pc}
        memset(rsp->rpa, 0, BLE_DEV_ADDR_LEN);
   2344e:	2300      	movs	r3, #0
   23450:	6023      	str	r3, [r4, #0]
   23452:	80a3      	strh	r3, [r4, #4]
        rc = BLE_ERR_UNK_CONN_ID;
   23454:	2002      	movs	r0, #2
   23456:	e7f7      	b.n	23448 <ble_ll_resolv_local_addr_rd+0x24>

00023458 <ble_ll_resolv_set_rpa_tmo>:
ble_ll_resolv_set_rpa_tmo(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_set_rpa_tmo_cp *cmd = (const void *)cmdbuf;
    uint16_t tmo_secs;

    if (len != sizeof(*cmd)) {
   23458:	2902      	cmp	r1, #2
   2345a:	d11e      	bne.n	2349a <ble_ll_resolv_set_rpa_tmo+0x42>
{
   2345c:	b508      	push	{r3, lr}
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    tmo_secs = le16toh(cmd->rpa_timeout);
   2345e:	8802      	ldrh	r2, [r0, #0]
    if (!((tmo_secs > 0) && (tmo_secs <= 0xA1B8))) {
   23460:	1e53      	subs	r3, r2, #1
   23462:	b29b      	uxth	r3, r3
   23464:	f24a 11b7 	movw	r1, #41399	; 0xa1b7
   23468:	428b      	cmp	r3, r1
   2346a:	d818      	bhi.n	2349e <ble_ll_resolv_set_rpa_tmo+0x46>
        return BLE_ERR_INV_HCI_CMD_PARMS;
    }

    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(tmo_secs * 1000);
   2346c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   23470:	fb01 f102 	mul.w	r1, r1, r2
   23474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   23478:	2300      	movs	r3, #0
   2347a:	01c8      	lsls	r0, r1, #7
   2347c:	0e49      	lsrs	r1, r1, #25
   2347e:	f7e8 fd99 	bl	bfb4 <__aeabi_uldivmod>
   23482:	4b08      	ldr	r3, [pc, #32]	; (234a4 <ble_ll_resolv_set_rpa_tmo+0x4c>)
   23484:	6058      	str	r0, [r3, #4]

    /* restart timer if there is something on RL */
    if (g_ble_ll_resolv_data.rl_cnt) {
   23486:	78db      	ldrb	r3, [r3, #3]
   23488:	b90b      	cbnz	r3, 2348e <ble_ll_resolv_set_rpa_tmo+0x36>
        ble_npl_callout_reset(&g_ble_ll_resolv_data.rpa_timer,
                              g_ble_ll_resolv_data.rpa_tmo);
    }

    return BLE_ERR_SUCCESS;
   2348a:	2000      	movs	r0, #0
}
   2348c:	bd08      	pop	{r3, pc}
    return (ble_npl_error_t)os_callout_reset(&co->co, ticks);
   2348e:	4601      	mov	r1, r0
   23490:	4805      	ldr	r0, [pc, #20]	; (234a8 <ble_ll_resolv_set_rpa_tmo+0x50>)
   23492:	f7e6 fbff 	bl	9c94 <os_callout_reset>
    return BLE_ERR_SUCCESS;
   23496:	2000      	movs	r0, #0
   23498:	e7f8      	b.n	2348c <ble_ll_resolv_set_rpa_tmo+0x34>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2349a:	2012      	movs	r0, #18
}
   2349c:	4770      	bx	lr
        return BLE_ERR_INV_HCI_CMD_PARMS;
   2349e:	2012      	movs	r0, #18
   234a0:	e7f4      	b.n	2348c <ble_ll_resolv_set_rpa_tmo+0x34>
   234a2:	bf00      	nop
   234a4:	20008a18 	.word	0x20008a18
   234a8:	20008a20 	.word	0x20008a20

000234ac <ble_ll_resolve_set_priv_mode>:

int
ble_ll_resolve_set_priv_mode(const uint8_t *cmdbuf, uint8_t len)
{
   234ac:	b570      	push	{r4, r5, r6, lr}
   234ae:	4605      	mov	r5, r0
   234b0:	460e      	mov	r6, r1
    const struct ble_hci_le_set_privacy_mode_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_resolv_entry *rl;

    if (ble_ll_is_controller_busy()) {
   234b2:	f7ff fdb1 	bl	23018 <ble_ll_is_controller_busy>
   234b6:	b978      	cbnz	r0, 234d8 <ble_ll_resolve_set_priv_mode+0x2c>
   234b8:	4604      	mov	r4, r0
        return BLE_ERR_CMD_DISALLOWED;
    }

    if (len != sizeof(*cmd)) {
   234ba:	2e08      	cmp	r6, #8
   234bc:	d002      	beq.n	234c4 <ble_ll_resolve_set_priv_mode+0x18>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   234be:	2412      	movs	r4, #18
    }

    rl->rl_priv_mode = cmd->mode;

    return BLE_ERR_SUCCESS;
}
   234c0:	4620      	mov	r0, r4
   234c2:	bd70      	pop	{r4, r5, r6, pc}
    rl = ble_ll_resolv_list_find(cmd->peer_id_addr, cmd->peer_id_addr_type);
   234c4:	7829      	ldrb	r1, [r5, #0]
   234c6:	1c68      	adds	r0, r5, #1
   234c8:	f7ff fe78 	bl	231bc <ble_ll_resolv_list_find>
    if (!rl) {
   234cc:	b130      	cbz	r0, 234dc <ble_ll_resolve_set_priv_mode+0x30>
    if (cmd->mode > BLE_HCI_PRIVACY_DEVICE) {
   234ce:	79eb      	ldrb	r3, [r5, #7]
   234d0:	2b01      	cmp	r3, #1
   234d2:	d805      	bhi.n	234e0 <ble_ll_resolve_set_priv_mode+0x34>
    rl->rl_priv_mode = cmd->mode;
   234d4:	7043      	strb	r3, [r0, #1]
    return BLE_ERR_SUCCESS;
   234d6:	e7f3      	b.n	234c0 <ble_ll_resolve_set_priv_mode+0x14>
        return BLE_ERR_CMD_DISALLOWED;
   234d8:	240c      	movs	r4, #12
   234da:	e7f1      	b.n	234c0 <ble_ll_resolve_set_priv_mode+0x14>
        return BLE_ERR_UNK_CONN_ID;
   234dc:	2402      	movs	r4, #2
   234de:	e7ef      	b.n	234c0 <ble_ll_resolve_set_priv_mode+0x14>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   234e0:	2412      	movs	r4, #18
   234e2:	e7ed      	b.n	234c0 <ble_ll_resolve_set_priv_mode+0x14>

000234e4 <ble_ll_resolv_get_rpa_tmo>:
 */
uint32_t
ble_ll_resolv_get_rpa_tmo(void)
{
    return g_ble_ll_resolv_data.rpa_tmo;
}
   234e4:	4b01      	ldr	r3, [pc, #4]	; (234ec <ble_ll_resolv_get_rpa_tmo+0x8>)
   234e6:	6858      	ldr	r0, [r3, #4]
   234e8:	4770      	bx	lr
   234ea:	bf00      	nop
   234ec:	20008a18 	.word	0x20008a18

000234f0 <ble_ll_resolv_get_priv_addr>:

void
ble_ll_resolv_get_priv_addr(struct ble_ll_resolv_entry *rl, int local,
                            uint8_t *addr)
{
   234f0:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;

    BLE_LL_ASSERT(rl != NULL);
   234f2:	b180      	cbz	r0, 23516 <ble_ll_resolv_get_priv_addr+0x26>
   234f4:	460e      	mov	r6, r1
   234f6:	4615      	mov	r5, r2
   234f8:	4604      	mov	r4, r0
    BLE_LL_ASSERT(addr != NULL);
   234fa:	b1b2      	cbz	r2, 2352a <ble_ll_resolv_get_priv_addr+0x3a>

    OS_ENTER_CRITICAL(sr);
   234fc:	f7e7 ffe8 	bl	b4d0 <os_arch_save_sr>
    if (local) {
   23500:	b33e      	cbz	r6, 23552 <ble_ll_resolv_get_priv_addr+0x62>
        BLE_LL_ASSERT(rl->rl_has_local);
   23502:	78a3      	ldrb	r3, [r4, #2]
   23504:	b1db      	cbz	r3, 2353e <ble_ll_resolv_get_priv_addr+0x4e>
        memcpy(addr, rl->rl_local_rpa, BLE_DEV_ADDR_LEN);
   23506:	f854 3f2a 	ldr.w	r3, [r4, #42]!
   2350a:	602b      	str	r3, [r5, #0]
   2350c:	88a3      	ldrh	r3, [r4, #4]
   2350e:	80ab      	strh	r3, [r5, #4]
    } else {
        BLE_LL_ASSERT(rl->rl_has_peer);
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
    }

    OS_EXIT_CRITICAL(sr);
   23510:	f7e7 ffe4 	bl	b4dc <os_arch_restore_sr>
}
   23514:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(rl != NULL);
   23516:	f7e4 fe53 	bl	81c0 <hal_debugger_connected>
   2351a:	b100      	cbz	r0, 2351e <ble_ll_resolv_get_priv_addr+0x2e>
   2351c:	be01      	bkpt	0x0001
   2351e:	2300      	movs	r3, #0
   23520:	461a      	mov	r2, r3
   23522:	4619      	mov	r1, r3
   23524:	4618      	mov	r0, r3
   23526:	f7e6 f9e1 	bl	98ec <__assert_func>
    BLE_LL_ASSERT(addr != NULL);
   2352a:	f7e4 fe49 	bl	81c0 <hal_debugger_connected>
   2352e:	b100      	cbz	r0, 23532 <ble_ll_resolv_get_priv_addr+0x42>
   23530:	be01      	bkpt	0x0001
   23532:	2300      	movs	r3, #0
   23534:	461a      	mov	r2, r3
   23536:	4619      	mov	r1, r3
   23538:	4618      	mov	r0, r3
   2353a:	f7e6 f9d7 	bl	98ec <__assert_func>
        BLE_LL_ASSERT(rl->rl_has_local);
   2353e:	f7e4 fe3f 	bl	81c0 <hal_debugger_connected>
   23542:	b100      	cbz	r0, 23546 <ble_ll_resolv_get_priv_addr+0x56>
   23544:	be01      	bkpt	0x0001
   23546:	2300      	movs	r3, #0
   23548:	461a      	mov	r2, r3
   2354a:	4619      	mov	r1, r3
   2354c:	4618      	mov	r0, r3
   2354e:	f7e6 f9cd 	bl	98ec <__assert_func>
        BLE_LL_ASSERT(rl->rl_has_peer);
   23552:	78e3      	ldrb	r3, [r4, #3]
   23554:	b12b      	cbz	r3, 23562 <ble_ll_resolv_get_priv_addr+0x72>
        memcpy(addr, rl->rl_peer_rpa, BLE_DEV_ADDR_LEN);
   23556:	f854 3f30 	ldr.w	r3, [r4, #48]!
   2355a:	602b      	str	r3, [r5, #0]
   2355c:	88a3      	ldrh	r3, [r4, #4]
   2355e:	80ab      	strh	r3, [r5, #4]
   23560:	e7d6      	b.n	23510 <ble_ll_resolv_get_priv_addr+0x20>
        BLE_LL_ASSERT(rl->rl_has_peer);
   23562:	f7e4 fe2d 	bl	81c0 <hal_debugger_connected>
   23566:	b100      	cbz	r0, 2356a <ble_ll_resolv_get_priv_addr+0x7a>
   23568:	be01      	bkpt	0x0001
   2356a:	2300      	movs	r3, #0
   2356c:	461a      	mov	r2, r3
   2356e:	4619      	mov	r1, r3
   23570:	4618      	mov	r0, r3
   23572:	f7e6 f9bb 	bl	98ec <__assert_func>
	...

00023578 <ble_ll_resolv_set_peer_rpa>:

void
ble_ll_resolv_set_peer_rpa(int index, uint8_t *rpa)
{
   23578:	b538      	push	{r3, r4, r5, lr}
   2357a:	4605      	mov	r5, r0
   2357c:	460c      	mov	r4, r1
    os_sr_t sr;
    struct ble_ll_resolv_entry *rl;

    OS_ENTER_CRITICAL(sr);
   2357e:	f7e7 ffa7 	bl	b4d0 <os_arch_save_sr>
    rl = &g_ble_ll_resolv_list[index];
    memcpy(rl->rl_peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   23582:	4a06      	ldr	r2, [pc, #24]	; (2359c <ble_ll_resolv_set_peer_rpa+0x24>)
   23584:	2336      	movs	r3, #54	; 0x36
   23586:	fb03 f305 	mul.w	r3, r3, r5
   2358a:	3330      	adds	r3, #48	; 0x30
   2358c:	18d1      	adds	r1, r2, r3
   2358e:	6825      	ldr	r5, [r4, #0]
   23590:	50d5      	str	r5, [r2, r3]
   23592:	88a3      	ldrh	r3, [r4, #4]
   23594:	808b      	strh	r3, [r1, #4]
    OS_EXIT_CRITICAL(sr);
   23596:	f7e7 ffa1 	bl	b4dc <os_arch_restore_sr>
}
   2359a:	bd38      	pop	{r3, r4, r5, pc}
   2359c:	20008a40 	.word	0x20008a40

000235a0 <ble_ll_resolv_set_local_rpa>:

void
ble_ll_resolv_set_local_rpa(int index, uint8_t *rpa)
{
   235a0:	b538      	push	{r3, r4, r5, lr}
   235a2:	4605      	mov	r5, r0
   235a4:	460c      	mov	r4, r1
    os_sr_t sr;
    struct ble_ll_resolv_entry *rl;

    OS_ENTER_CRITICAL(sr);
   235a6:	f7e7 ff93 	bl	b4d0 <os_arch_save_sr>
    rl = &g_ble_ll_resolv_list[index];
    memcpy(rl->rl_local_rpa, rpa, BLE_DEV_ADDR_LEN);
   235aa:	2336      	movs	r3, #54	; 0x36
   235ac:	fb03 f305 	mul.w	r3, r3, r5
   235b0:	3328      	adds	r3, #40	; 0x28
   235b2:	4a05      	ldr	r2, [pc, #20]	; (235c8 <ble_ll_resolv_set_local_rpa+0x28>)
   235b4:	4413      	add	r3, r2
   235b6:	6822      	ldr	r2, [r4, #0]
   235b8:	f8c3 2002 	str.w	r2, [r3, #2]
   235bc:	88a2      	ldrh	r2, [r4, #4]
   235be:	80da      	strh	r2, [r3, #6]
    OS_EXIT_CRITICAL(sr);
   235c0:	f7e7 ff8c 	bl	b4dc <os_arch_restore_sr>
}
   235c4:	bd38      	pop	{r3, r4, r5, pc}
   235c6:	bf00      	nop
   235c8:	20008a40 	.word	0x20008a40

000235cc <ble_ll_resolv_gen_rpa>:
 *
 * @return int
 */
int
ble_ll_resolv_gen_rpa(uint8_t *addr, uint8_t addr_type, uint8_t *rpa, int local)
{
   235cc:	b538      	push	{r3, r4, r5, lr}
   235ce:	4615      	mov	r5, r2
   235d0:	461c      	mov	r4, r3
    struct ble_ll_resolv_entry *rl;

    rl = ble_ll_resolv_list_find(addr, addr_type);
   235d2:	f7ff fdf3 	bl	231bc <ble_ll_resolv_list_find>
    if (rl) {
   235d6:	b168      	cbz	r0, 235f4 <ble_ll_resolv_gen_rpa+0x28>
   235d8:	4603      	mov	r3, r0
        if ((local && rl->rl_has_local) || (!local && rl->rl_has_peer)) {
   235da:	b10c      	cbz	r4, 235e0 <ble_ll_resolv_gen_rpa+0x14>
   235dc:	7882      	ldrb	r2, [r0, #2]
   235de:	b912      	cbnz	r2, 235e6 <ble_ll_resolv_gen_rpa+0x1a>
   235e0:	b954      	cbnz	r4, 235f8 <ble_ll_resolv_gen_rpa+0x2c>
   235e2:	78da      	ldrb	r2, [r3, #3]
   235e4:	b152      	cbz	r2, 235fc <ble_ll_resolv_gen_rpa+0x30>
            ble_ll_resolv_get_priv_addr(rl, local, rpa);
   235e6:	462a      	mov	r2, r5
   235e8:	4621      	mov	r1, r4
   235ea:	4618      	mov	r0, r3
   235ec:	f7ff ff80 	bl	234f0 <ble_ll_resolv_get_priv_addr>
            return 1;
   235f0:	2001      	movs	r0, #1
        }
    }

    return 0;
}
   235f2:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
   235f4:	2000      	movs	r0, #0
   235f6:	e7fc      	b.n	235f2 <ble_ll_resolv_gen_rpa+0x26>
   235f8:	2000      	movs	r0, #0
   235fa:	e7fa      	b.n	235f2 <ble_ll_resolv_gen_rpa+0x26>
   235fc:	4620      	mov	r0, r4
   235fe:	e7f8      	b.n	235f2 <ble_ll_resolv_gen_rpa+0x26>

00023600 <ble_ll_resolv_rpa>:
 *
 * @return int
 */
int
ble_ll_resolv_rpa(const uint8_t *rpa, const uint8_t *irk)
{
   23600:	b510      	push	{r4, lr}
   23602:	b08c      	sub	sp, #48	; 0x30
   23604:	4604      	mov	r4, r0
    struct ble_encryption_block ecb;

    irk32 = (const uint32_t *)irk;
    key32 = (uint32_t *)&ecb.key[0];

    key32[0] = irk32[0];
   23606:	680b      	ldr	r3, [r1, #0]
   23608:	9300      	str	r3, [sp, #0]
    key32[1] = irk32[1];
   2360a:	684b      	ldr	r3, [r1, #4]
   2360c:	9301      	str	r3, [sp, #4]
    key32[2] = irk32[2];
   2360e:	688b      	ldr	r3, [r1, #8]
   23610:	9302      	str	r3, [sp, #8]
    key32[3] = irk32[3];
   23612:	68cb      	ldr	r3, [r1, #12]
   23614:	9303      	str	r3, [sp, #12]

    pt32 = (uint32_t *)&ecb.plain_text[0];
    pt32[0] = 0;
   23616:	2300      	movs	r3, #0
   23618:	9304      	str	r3, [sp, #16]
    pt32[1] = 0;
   2361a:	9305      	str	r3, [sp, #20]
    pt32[2] = 0;
   2361c:	9306      	str	r3, [sp, #24]
    pt32[3] = 0;
   2361e:	9307      	str	r3, [sp, #28]

    ecb.plain_text[15] = rpa[3];
   23620:	78c3      	ldrb	r3, [r0, #3]
   23622:	f88d 301f 	strb.w	r3, [sp, #31]
    ecb.plain_text[14] = rpa[4];
   23626:	7903      	ldrb	r3, [r0, #4]
   23628:	f88d 301e 	strb.w	r3, [sp, #30]
    ecb.plain_text[13] = rpa[5];
   2362c:	7943      	ldrb	r3, [r0, #5]
   2362e:	f88d 301d 	strb.w	r3, [sp, #29]

    ble_hw_encrypt_block(&ecb);
   23632:	4668      	mov	r0, sp
   23634:	f002 f97c 	bl	25930 <ble_hw_encrypt_block>
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   23638:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
   2363c:	7823      	ldrb	r3, [r4, #0]
   2363e:	429a      	cmp	r2, r3
   23640:	d002      	beq.n	23648 <ble_ll_resolv_rpa+0x48>
        (ecb.cipher_text[13] == rpa[2])) {
        rc = 1;
    } else {
        rc = 0;
   23642:	2000      	movs	r0, #0
    }

    return rc;
}
   23644:	b00c      	add	sp, #48	; 0x30
   23646:	bd10      	pop	{r4, pc}
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   23648:	f89d 202e 	ldrb.w	r2, [sp, #46]	; 0x2e
   2364c:	7863      	ldrb	r3, [r4, #1]
   2364e:	429a      	cmp	r2, r3
   23650:	d001      	beq.n	23656 <ble_ll_resolv_rpa+0x56>
        rc = 0;
   23652:	2000      	movs	r0, #0
   23654:	e7f6      	b.n	23644 <ble_ll_resolv_rpa+0x44>
        (ecb.cipher_text[13] == rpa[2])) {
   23656:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
   2365a:	78a3      	ldrb	r3, [r4, #2]
    if ((ecb.cipher_text[15] == rpa[0]) && (ecb.cipher_text[14] == rpa[1]) &&
   2365c:	429a      	cmp	r2, r3
   2365e:	d001      	beq.n	23664 <ble_ll_resolv_rpa+0x64>
        rc = 0;
   23660:	2000      	movs	r0, #0
   23662:	e7ef      	b.n	23644 <ble_ll_resolv_rpa+0x44>
        rc = 1;
   23664:	2001      	movs	r0, #1
    return rc;
   23666:	e7ed      	b.n	23644 <ble_ll_resolv_rpa+0x44>

00023668 <ble_ll_resolv_enabled>:
 */
uint8_t
ble_ll_resolv_enabled(void)
{
    return g_ble_ll_resolv_data.addr_res_enabled;
}
   23668:	4b01      	ldr	r3, [pc, #4]	; (23670 <ble_ll_resolv_enabled+0x8>)
   2366a:	7818      	ldrb	r0, [r3, #0]
   2366c:	4770      	bx	lr
   2366e:	bf00      	nop
   23670:	20008a18 	.word	0x20008a18

00023674 <ble_ll_resolv_init>:
    ble_ll_resolv_init();
}

void
ble_ll_resolv_init(void)
{
   23674:	b510      	push	{r4, lr}
    uint8_t hw_size;

    /* Default is 15 minutes */
    g_ble_ll_resolv_data.rpa_tmo = ble_npl_time_ms_to_ticks32(15 * 60 * 1000);
   23676:	4b09      	ldr	r3, [pc, #36]	; (2369c <ble_ll_resolv_init+0x28>)
   23678:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
   2367c:	605a      	str	r2, [r3, #4]

    hw_size = ble_hw_resolv_list_size();
   2367e:	f002 fa01 	bl	25a84 <ble_hw_resolv_list_size>
    if (hw_size > MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE)) {
   23682:	2804      	cmp	r0, #4
   23684:	d900      	bls.n	23688 <ble_ll_resolv_init+0x14>
        hw_size = MYNEWT_VAL(BLE_LL_RESOLV_LIST_SIZE);
   23686:	2004      	movs	r0, #4
    }
    g_ble_ll_resolv_data.rl_size = hw_size;
   23688:	4c04      	ldr	r4, [pc, #16]	; (2369c <ble_ll_resolv_init+0x28>)
   2368a:	7060      	strb	r0, [r4, #1]
    os_callout_init(&co->co, &evq->evq, (os_event_fn *)ev_cb, ev_arg);
   2368c:	2300      	movs	r3, #0
   2368e:	4a04      	ldr	r2, [pc, #16]	; (236a0 <ble_ll_resolv_init+0x2c>)
   23690:	4904      	ldr	r1, [pc, #16]	; (236a4 <ble_ll_resolv_init+0x30>)
   23692:	f104 0008 	add.w	r0, r4, #8
   23696:	f7e6 fad1 	bl	9c3c <os_callout_init>

    ble_npl_callout_init(&g_ble_ll_resolv_data.rpa_timer,
                         &g_ble_ll_data.ll_evq,
                         ble_ll_resolv_rpa_timer_cb,
                         NULL);
}
   2369a:	bd10      	pop	{r4, pc}
   2369c:	20008a18 	.word	0x20008a18
   236a0:	0002311d 	.word	0x0002311d
   236a4:	200084e8 	.word	0x200084e8

000236a8 <ble_ll_resolv_list_reset>:
{
   236a8:	b508      	push	{r3, lr}
    g_ble_ll_resolv_data.addr_res_enabled = 0;
   236aa:	4805      	ldr	r0, [pc, #20]	; (236c0 <ble_ll_resolv_list_reset+0x18>)
   236ac:	2300      	movs	r3, #0
   236ae:	f800 3b08 	strb.w	r3, [r0], #8
    os_callout_stop(&co->co);
   236b2:	f7e6 fad1 	bl	9c58 <os_callout_stop>
    ble_ll_resolv_list_clr();
   236b6:	f7ff fd63 	bl	23180 <ble_ll_resolv_list_clr>
    ble_ll_resolv_init();
   236ba:	f7ff ffdb 	bl	23674 <ble_ll_resolv_init>
}
   236be:	bd08      	pop	{r3, pc}
   236c0:	20008a18 	.word	0x20008a18

000236c4 <ble_ll_rfmgmt_disable>:
    }
}

static void
ble_ll_rfmgmt_disable(void)
{
   236c4:	b508      	push	{r3, lr}
    OS_ASSERT_CRITICAL();
   236c6:	f7e7 ff0c 	bl	b4e2 <os_arch_in_critical>
   236ca:	b118      	cbz	r0, 236d4 <ble_ll_rfmgmt_disable+0x10>

    if (g_ble_ll_rfmgmt_data.state != RFMGMT_STATE_OFF) {
   236cc:	4b09      	ldr	r3, [pc, #36]	; (236f4 <ble_ll_rfmgmt_disable+0x30>)
   236ce:	781b      	ldrb	r3, [r3, #0]
   236d0:	b953      	cbnz	r3, 236e8 <ble_ll_rfmgmt_disable+0x24>
        ble_phy_rfclk_disable();
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_OFF;
    }
}
   236d2:	bd08      	pop	{r3, pc}
    OS_ASSERT_CRITICAL();
   236d4:	f7e4 fd74 	bl	81c0 <hal_debugger_connected>
   236d8:	b100      	cbz	r0, 236dc <ble_ll_rfmgmt_disable+0x18>
   236da:	be01      	bkpt	0x0001
   236dc:	2300      	movs	r3, #0
   236de:	461a      	mov	r2, r3
   236e0:	4619      	mov	r1, r3
   236e2:	4618      	mov	r0, r3
   236e4:	f7e6 f902 	bl	98ec <__assert_func>
        ble_phy_rfclk_disable();
   236e8:	f003 f828 	bl	2673c <ble_phy_rfclk_disable>
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_OFF;
   236ec:	4b01      	ldr	r3, [pc, #4]	; (236f4 <ble_ll_rfmgmt_disable+0x30>)
   236ee:	2200      	movs	r2, #0
   236f0:	701a      	strb	r2, [r3, #0]
}
   236f2:	e7ee      	b.n	236d2 <ble_ll_rfmgmt_disable+0xe>
   236f4:	20008b18 	.word	0x20008b18

000236f8 <ble_ll_rfmgmt_release_ev>:
    ble_ll_rfmgmt_enable();
}

static void
ble_ll_rfmgmt_release_ev(struct ble_npl_event *ev)
{
   236f8:	b538      	push	{r3, r4, r5, lr}
    uint32_t now;
    bool can_disable;
    uint8_t lls;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   236fa:	f7e7 fee9 	bl	b4d0 <os_arch_save_sr>
   236fe:	4605      	mov	r5, r0

    now = os_cputime_get32();
   23700:	f7f8 fb25 	bl	1bd4e <os_cputime_get32>
   23704:	4604      	mov	r4, r0

    can_disable = true;
    lls = ble_ll_state_get();
   23706:	f7f9 fdb5 	bl	1d274 <ble_ll_state_get>

    if (rfmgmt->enable_scan && CPUTIME_GEQ(now, rfmgmt->enable_scan_at)) {
   2370a:	4b0d      	ldr	r3, [pc, #52]	; (23740 <ble_ll_rfmgmt_release_ev+0x48>)
   2370c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   23710:	b123      	cbz	r3, 2371c <ble_ll_rfmgmt_release_ev+0x24>
   23712:	4b0b      	ldr	r3, [pc, #44]	; (23740 <ble_ll_rfmgmt_release_ev+0x48>)
   23714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   23716:	1ae3      	subs	r3, r4, r3
   23718:	2b00      	cmp	r3, #0
   2371a:	da09      	bge.n	23730 <ble_ll_rfmgmt_release_ev+0x38>
        /* Blocked by scan */
        can_disable = false;
    } else if (rfmgmt->enable_sched && CPUTIME_GEQ(now, rfmgmt->enable_sched_at)) {
   2371c:	4b08      	ldr	r3, [pc, #32]	; (23740 <ble_ll_rfmgmt_release_ev+0x48>)
   2371e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   23722:	b123      	cbz	r3, 2372e <ble_ll_rfmgmt_release_ev+0x36>
   23724:	4b06      	ldr	r3, [pc, #24]	; (23740 <ble_ll_rfmgmt_release_ev+0x48>)
   23726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   23728:	1ae4      	subs	r4, r4, r3
   2372a:	2c00      	cmp	r4, #0
   2372c:	da00      	bge.n	23730 <ble_ll_rfmgmt_release_ev+0x38>
        /* Blocked by scheduler item */
        can_disable = false;
    } else if (lls != BLE_LL_STATE_STANDBY) {
   2372e:	b118      	cbz	r0, 23738 <ble_ll_rfmgmt_release_ev+0x40>

    if (can_disable) {
        ble_ll_rfmgmt_disable();
    }

    OS_EXIT_CRITICAL(sr);
   23730:	4628      	mov	r0, r5
   23732:	f7e7 fed3 	bl	b4dc <os_arch_restore_sr>
}
   23736:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_rfmgmt_disable();
   23738:	f7ff ffc4 	bl	236c4 <ble_ll_rfmgmt_disable>
   2373c:	e7f8      	b.n	23730 <ble_ll_rfmgmt_release_ev+0x38>
   2373e:	bf00      	nop
   23740:	20008b18 	.word	0x20008b18

00023744 <ble_ll_rfmgmt_enable>:
{
   23744:	b510      	push	{r4, lr}
    OS_ASSERT_CRITICAL();
   23746:	f7e7 fecc 	bl	b4e2 <os_arch_in_critical>
   2374a:	b118      	cbz	r0, 23754 <ble_ll_rfmgmt_enable+0x10>
    if (g_ble_ll_rfmgmt_data.state == RFMGMT_STATE_OFF) {
   2374c:	4b0b      	ldr	r3, [pc, #44]	; (2377c <ble_ll_rfmgmt_enable+0x38>)
   2374e:	781b      	ldrb	r3, [r3, #0]
   23750:	b153      	cbz	r3, 23768 <ble_ll_rfmgmt_enable+0x24>
}
   23752:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   23754:	f7e4 fd34 	bl	81c0 <hal_debugger_connected>
   23758:	b100      	cbz	r0, 2375c <ble_ll_rfmgmt_enable+0x18>
   2375a:	be01      	bkpt	0x0001
   2375c:	2300      	movs	r3, #0
   2375e:	461a      	mov	r2, r3
   23760:	4619      	mov	r1, r3
   23762:	4618      	mov	r0, r3
   23764:	f7e6 f8c2 	bl	98ec <__assert_func>
        g_ble_ll_rfmgmt_data.state = RFMGMT_STATE_ENABLING;
   23768:	4c04      	ldr	r4, [pc, #16]	; (2377c <ble_ll_rfmgmt_enable+0x38>)
   2376a:	2301      	movs	r3, #1
   2376c:	7023      	strb	r3, [r4, #0]
        g_ble_ll_rfmgmt_data.enabled_at = os_cputime_get32();
   2376e:	f7f8 faee 	bl	1bd4e <os_cputime_get32>
   23772:	6320      	str	r0, [r4, #48]	; 0x30
        ble_phy_rfclk_enable();
   23774:	f002 ffde 	bl	26734 <ble_phy_rfclk_enable>
}
   23778:	e7eb      	b.n	23752 <ble_ll_rfmgmt_enable+0xe>
   2377a:	bf00      	nop
   2377c:	20008b18 	.word	0x20008b18

00023780 <ble_ll_rfmgmt_timer_exp>:
{
   23780:	b508      	push	{r3, lr}
    g_ble_ll_rfmgmt_data.timer_scheduled = false;
   23782:	4b03      	ldr	r3, [pc, #12]	; (23790 <ble_ll_rfmgmt_timer_exp+0x10>)
   23784:	2200      	movs	r2, #0
   23786:	771a      	strb	r2, [r3, #28]
    ble_ll_rfmgmt_enable();
   23788:	f7ff ffdc 	bl	23744 <ble_ll_rfmgmt_enable>
}
   2378c:	bd08      	pop	{r3, pc}
   2378e:	bf00      	nop
   23790:	20008b18 	.word	0x20008b18

00023794 <ble_ll_rfmgmt_timer_reschedule>:
{
   23794:	b510      	push	{r4, lr}
    if (rfmgmt->enable_scan && rfmgmt->enable_sched) {
   23796:	4b1f      	ldr	r3, [pc, #124]	; (23814 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   23798:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   2379c:	b15b      	cbz	r3, 237b6 <ble_ll_rfmgmt_timer_reschedule+0x22>
   2379e:	4a1d      	ldr	r2, [pc, #116]	; (23814 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237a0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
   237a4:	b13a      	cbz	r2, 237b6 <ble_ll_rfmgmt_timer_reschedule+0x22>
        if (CPUTIME_LT(rfmgmt->enable_scan_at, rfmgmt->enable_sched_at)) {
   237a6:	4b1b      	ldr	r3, [pc, #108]	; (23814 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   237aa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   237ac:	1b13      	subs	r3, r2, r4
   237ae:	2b00      	cmp	r3, #0
   237b0:	da04      	bge.n	237bc <ble_ll_rfmgmt_timer_reschedule+0x28>
            enable_at = rfmgmt->enable_scan_at;
   237b2:	4614      	mov	r4, r2
   237b4:	e002      	b.n	237bc <ble_ll_rfmgmt_timer_reschedule+0x28>
    } else if (rfmgmt->enable_scan) {
   237b6:	b1e3      	cbz	r3, 237f2 <ble_ll_rfmgmt_timer_reschedule+0x5e>
        enable_at = rfmgmt->enable_scan_at;
   237b8:	4b16      	ldr	r3, [pc, #88]	; (23814 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237ba:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    if (rfmgmt->timer_scheduled) {
   237bc:	4b15      	ldr	r3, [pc, #84]	; (23814 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237be:	7f1b      	ldrb	r3, [r3, #28]
   237c0:	b14b      	cbz	r3, 237d6 <ble_ll_rfmgmt_timer_reschedule+0x42>
        if (rfmgmt->timer_scheduled_at == enable_at) {
   237c2:	4b14      	ldr	r3, [pc, #80]	; (23814 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237c4:	6a1b      	ldr	r3, [r3, #32]
   237c6:	42a3      	cmp	r3, r4
   237c8:	d012      	beq.n	237f0 <ble_ll_rfmgmt_timer_reschedule+0x5c>
        rfmgmt->timer_scheduled = false;
   237ca:	4812      	ldr	r0, [pc, #72]	; (23814 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237cc:	2300      	movs	r3, #0
   237ce:	7703      	strb	r3, [r0, #28]
        os_cputime_timer_stop(&rfmgmt->timer);
   237d0:	3004      	adds	r0, #4
   237d2:	f7f8 fab8 	bl	1bd46 <os_cputime_timer_stop>
    if (CPUTIME_LEQ(enable_at, os_cputime_get32())) {
   237d6:	f7f8 faba 	bl	1bd4e <os_cputime_get32>
   237da:	1a20      	subs	r0, r4, r0
   237dc:	2800      	cmp	r0, #0
   237de:	dd16      	ble.n	2380e <ble_ll_rfmgmt_timer_reschedule+0x7a>
    rfmgmt->timer_scheduled = true;
   237e0:	480c      	ldr	r0, [pc, #48]	; (23814 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237e2:	2301      	movs	r3, #1
   237e4:	7703      	strb	r3, [r0, #28]
    rfmgmt->timer_scheduled_at = enable_at;
   237e6:	6204      	str	r4, [r0, #32]
    os_cputime_timer_start(&rfmgmt->timer, enable_at);
   237e8:	4621      	mov	r1, r4
   237ea:	3004      	adds	r0, #4
   237ec:	f7f8 faa7 	bl	1bd3e <os_cputime_timer_start>
}
   237f0:	bd10      	pop	{r4, pc}
    } else if (rfmgmt->enable_sched) {
   237f2:	4b08      	ldr	r3, [pc, #32]	; (23814 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   237f8:	b113      	cbz	r3, 23800 <ble_ll_rfmgmt_timer_reschedule+0x6c>
        enable_at = rfmgmt->enable_sched_at;
   237fa:	4b06      	ldr	r3, [pc, #24]	; (23814 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   237fc:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   237fe:	e7dd      	b.n	237bc <ble_ll_rfmgmt_timer_reschedule+0x28>
        rfmgmt->timer_scheduled = false;
   23800:	4804      	ldr	r0, [pc, #16]	; (23814 <ble_ll_rfmgmt_timer_reschedule+0x80>)
   23802:	2300      	movs	r3, #0
   23804:	7703      	strb	r3, [r0, #28]
        os_cputime_timer_stop(&rfmgmt->timer);
   23806:	3004      	adds	r0, #4
   23808:	f7f8 fa9d 	bl	1bd46 <os_cputime_timer_stop>
        return;
   2380c:	e7f0      	b.n	237f0 <ble_ll_rfmgmt_timer_reschedule+0x5c>
        ble_ll_rfmgmt_enable();
   2380e:	f7ff ff99 	bl	23744 <ble_ll_rfmgmt_enable>
        return;
   23812:	e7ed      	b.n	237f0 <ble_ll_rfmgmt_timer_reschedule+0x5c>
   23814:	20008b18 	.word	0x20008b18

00023818 <ble_ll_rfmgmt_init>:
    return rem_ticks;
}

void
ble_ll_rfmgmt_init(void)
{
   23818:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;

    rfmgmt->state = RFMGMT_STATE_OFF;
   2381a:	4c0a      	ldr	r4, [pc, #40]	; (23844 <ble_ll_rfmgmt_init+0x2c>)
   2381c:	2500      	movs	r5, #0
   2381e:	7025      	strb	r5, [r4, #0]
   23820:	f240 50fa 	movw	r0, #1530	; 0x5fa
   23824:	f7f8 faaa 	bl	1bd7c <os_cputime_usecs_to_ticks>

    rfmgmt->ticks_to_enabled =
   23828:	8060      	strh	r0, [r4, #2]
            ble_ll_usecs_to_ticks_round_up(MYNEWT_VAL(BLE_LL_RFMGMT_ENABLE_TIME));

    rfmgmt->timer_scheduled = false;
   2382a:	7725      	strb	r5, [r4, #28]
    os_cputime_timer_init(&rfmgmt->timer, ble_ll_rfmgmt_timer_exp, NULL);
   2382c:	462a      	mov	r2, r5
   2382e:	4906      	ldr	r1, [pc, #24]	; (23848 <ble_ll_rfmgmt_init+0x30>)
   23830:	1d20      	adds	r0, r4, #4
   23832:	f7f8 fa66 	bl	1bd02 <os_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
   23836:	6365      	str	r5, [r4, #52]	; 0x34
   23838:	63e5      	str	r5, [r4, #60]	; 0x3c
   2383a:	6425      	str	r5, [r4, #64]	; 0x40
    ev->ev.ev_cb = (os_event_fn *)fn;
   2383c:	4b03      	ldr	r3, [pc, #12]	; (2384c <ble_ll_rfmgmt_init+0x34>)
   2383e:	63a3      	str	r3, [r4, #56]	; 0x38

    ble_npl_event_init(&rfmgmt->release_ev, ble_ll_rfmgmt_release_ev, NULL);
}
   23840:	bd38      	pop	{r3, r4, r5, pc}
   23842:	bf00      	nop
   23844:	20008b18 	.word	0x20008b18
   23848:	00023781 	.word	0x00023781
   2384c:	000236f9 	.word	0x000236f9

00023850 <ble_ll_rfmgmt_reset>:

void
ble_ll_rfmgmt_reset(void)
{
   23850:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;

    rfmgmt->timer_scheduled = false;
   23852:	4c0b      	ldr	r4, [pc, #44]	; (23880 <ble_ll_rfmgmt_reset+0x30>)
   23854:	2500      	movs	r5, #0
   23856:	7725      	strb	r5, [r4, #28]
    rfmgmt->timer_scheduled_at = 0;
   23858:	6225      	str	r5, [r4, #32]
    os_cputime_timer_stop(&rfmgmt->timer);
   2385a:	1d20      	adds	r0, r4, #4
   2385c:	f7f8 fa73 	bl	1bd46 <os_cputime_timer_stop>
    os_eventq_remove(&evq->evq, &ev->ev);
   23860:	f104 0134 	add.w	r1, r4, #52	; 0x34
   23864:	4807      	ldr	r0, [pc, #28]	; (23884 <ble_ll_rfmgmt_reset+0x34>)
   23866:	f7e6 fc18 	bl	a09a <os_eventq_remove>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);

    ble_ll_rfmgmt_disable();
   2386a:	f7ff ff2b 	bl	236c4 <ble_ll_rfmgmt_disable>

    rfmgmt->enable_scan = false;
   2386e:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    rfmgmt->enable_scan_at = 0;
   23872:	62a5      	str	r5, [r4, #40]	; 0x28
    rfmgmt->enable_sched = false;
   23874:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
    rfmgmt->enable_sched_at = 0;
   23878:	62e5      	str	r5, [r4, #44]	; 0x2c

    rfmgmt->enabled_at = 0;
   2387a:	6325      	str	r5, [r4, #48]	; 0x30
}
   2387c:	bd38      	pop	{r3, r4, r5, pc}
   2387e:	bf00      	nop
   23880:	20008b18 	.word	0x20008b18
   23884:	200084e8 	.word	0x200084e8

00023888 <ble_ll_rfmgmt_scan_changed>:

void
ble_ll_rfmgmt_scan_changed(bool enabled, uint32_t next_window)
{
   23888:	b570      	push	{r4, r5, r6, lr}
   2388a:	4606      	mov	r6, r0
   2388c:	460c      	mov	r4, r1
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   2388e:	f7e7 fe1f 	bl	b4d0 <os_arch_save_sr>
   23892:	4605      	mov	r5, r0

    rfmgmt->enable_scan = enabled;
   23894:	4b05      	ldr	r3, [pc, #20]	; (238ac <ble_ll_rfmgmt_scan_changed+0x24>)
   23896:	f883 6024 	strb.w	r6, [r3, #36]	; 0x24
    rfmgmt->enable_scan_at = next_window - rfmgmt->ticks_to_enabled;
   2389a:	885a      	ldrh	r2, [r3, #2]
   2389c:	1aa4      	subs	r4, r4, r2
   2389e:	629c      	str	r4, [r3, #40]	; 0x28

    ble_ll_rfmgmt_timer_reschedule();
   238a0:	f7ff ff78 	bl	23794 <ble_ll_rfmgmt_timer_reschedule>

    OS_EXIT_CRITICAL(sr);
   238a4:	4628      	mov	r0, r5
   238a6:	f7e7 fe19 	bl	b4dc <os_arch_restore_sr>
}
   238aa:	bd70      	pop	{r4, r5, r6, pc}
   238ac:	20008b18 	.word	0x20008b18

000238b0 <ble_ll_rfmgmt_sched_changed>:

void
ble_ll_rfmgmt_sched_changed(struct ble_ll_sched_item *first)
{
   238b0:	b538      	push	{r3, r4, r5, lr}
   238b2:	4604      	mov	r4, r0
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   238b4:	f7e7 fe0c 	bl	b4d0 <os_arch_save_sr>
   238b8:	4605      	mov	r5, r0

    rfmgmt->enable_sched = (first != NULL);
   238ba:	2c00      	cmp	r4, #0
   238bc:	bf14      	ite	ne
   238be:	2201      	movne	r2, #1
   238c0:	2200      	moveq	r2, #0
   238c2:	4b07      	ldr	r3, [pc, #28]	; (238e0 <ble_ll_rfmgmt_sched_changed+0x30>)
   238c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    if (first) {
   238c8:	d004      	beq.n	238d4 <ble_ll_rfmgmt_sched_changed+0x24>
        rfmgmt->enable_sched_at = first->start_time - rfmgmt->ticks_to_enabled;
   238ca:	6863      	ldr	r3, [r4, #4]
   238cc:	4a04      	ldr	r2, [pc, #16]	; (238e0 <ble_ll_rfmgmt_sched_changed+0x30>)
   238ce:	8851      	ldrh	r1, [r2, #2]
   238d0:	1a5b      	subs	r3, r3, r1
   238d2:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    ble_ll_rfmgmt_timer_reschedule();
   238d4:	f7ff ff5e 	bl	23794 <ble_ll_rfmgmt_timer_reschedule>

    OS_EXIT_CRITICAL(sr);
   238d8:	4628      	mov	r0, r5
   238da:	f7e7 fdff 	bl	b4dc <os_arch_restore_sr>
}
   238de:	bd38      	pop	{r3, r4, r5, pc}
   238e0:	20008b18 	.word	0x20008b18

000238e4 <ble_ll_rfmgmt_release>:

void
ble_ll_rfmgmt_release(void)
{
   238e4:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   238e6:	f7e7 fdf3 	bl	b4d0 <os_arch_save_sr>
   238ea:	4605      	mov	r5, r0
   238ec:	4c08      	ldr	r4, [pc, #32]	; (23910 <ble_ll_rfmgmt_release+0x2c>)
   238ee:	f104 0134 	add.w	r1, r4, #52	; 0x34
   238f2:	4808      	ldr	r0, [pc, #32]	; (23914 <ble_ll_rfmgmt_release+0x30>)
   238f4:	f7e6 fbd1 	bl	a09a <os_eventq_remove>

    ble_npl_eventq_remove(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);

    if (g_ble_ll_rfmgmt_data.state != RFMGMT_STATE_OFF) {
   238f8:	7823      	ldrb	r3, [r4, #0]
   238fa:	b91b      	cbnz	r3, 23904 <ble_ll_rfmgmt_release+0x20>
        ble_npl_eventq_put(&g_ble_ll_data.ll_evq, &rfmgmt->release_ev);
    }

    OS_EXIT_CRITICAL(sr);
   238fc:	4628      	mov	r0, r5
   238fe:	f7e7 fded 	bl	b4dc <os_arch_restore_sr>
}
   23902:	bd38      	pop	{r3, r4, r5, pc}
    os_eventq_put(&evq->evq, &ev->ev);
   23904:	f104 0134 	add.w	r1, r4, #52	; 0x34
   23908:	4802      	ldr	r0, [pc, #8]	; (23914 <ble_ll_rfmgmt_release+0x30>)
   2390a:	f7e6 fb3c 	bl	9f86 <os_eventq_put>
   2390e:	e7f5      	b.n	238fc <ble_ll_rfmgmt_release+0x18>
   23910:	20008b18 	.word	0x20008b18
   23914:	200084e8 	.word	0x200084e8

00023918 <ble_ll_rfmgmt_enable_now>:

uint32_t
ble_ll_rfmgmt_enable_now(void)
{
   23918:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_rfmgmt_data *rfmgmt = &g_ble_ll_rfmgmt_data;
    uint32_t enabled_at;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   2391a:	f7e7 fdd9 	bl	b4d0 <os_arch_save_sr>
   2391e:	4605      	mov	r5, r0

    ble_ll_rfmgmt_enable();
   23920:	f7ff ff10 	bl	23744 <ble_ll_rfmgmt_enable>

    if (rfmgmt->state == RFMGMT_STATE_ENABLED) {
   23924:	4b08      	ldr	r3, [pc, #32]	; (23948 <ble_ll_rfmgmt_enable_now+0x30>)
   23926:	781b      	ldrb	r3, [r3, #0]
   23928:	2b02      	cmp	r3, #2
   2392a:	d009      	beq.n	23940 <ble_ll_rfmgmt_enable_now+0x28>
        enabled_at = os_cputime_get32();
    } else {
        enabled_at = rfmgmt->enabled_at + rfmgmt->ticks_to_enabled + 1;
   2392c:	4b06      	ldr	r3, [pc, #24]	; (23948 <ble_ll_rfmgmt_enable_now+0x30>)
   2392e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
   23930:	885b      	ldrh	r3, [r3, #2]
   23932:	441c      	add	r4, r3
   23934:	3401      	adds	r4, #1
    }

    OS_EXIT_CRITICAL(sr);
   23936:	4628      	mov	r0, r5
   23938:	f7e7 fdd0 	bl	b4dc <os_arch_restore_sr>

    return enabled_at;
}
   2393c:	4620      	mov	r0, r4
   2393e:	bd38      	pop	{r3, r4, r5, pc}
        enabled_at = os_cputime_get32();
   23940:	f7f8 fa05 	bl	1bd4e <os_cputime_get32>
   23944:	4604      	mov	r4, r0
   23946:	e7f6      	b.n	23936 <ble_ll_rfmgmt_enable_now+0x1e>
   23948:	20008b18 	.word	0x20008b18

0002394c <ble_ll_get_chan_to_scan>:

static void
ble_ll_get_chan_to_scan(struct ble_ll_scan_sm *scansm, uint8_t *chan,
                        int *phy)
{
    struct ble_ll_scan_params *scanp = scansm->scanp;
   2394c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    }

    *chan = aux_data->chan;
    *phy = aux_data->aux_phy;
#else
    *chan = scanp->scan_chan;
   2394e:	7958      	ldrb	r0, [r3, #5]
   23950:	7008      	strb	r0, [r1, #0]
    *phy = scanp->phy;
   23952:	781b      	ldrb	r3, [r3, #0]
   23954:	6013      	str	r3, [r2, #0]
#endif
}
   23956:	4770      	bx	lr

00023958 <ble_ll_scan_get_next_adv_prim_chan>:
}

static uint8_t
ble_ll_scan_get_next_adv_prim_chan(uint8_t chan)
{
    ++chan;
   23958:	3001      	adds	r0, #1
   2395a:	b2c0      	uxtb	r0, r0
    if (chan == BLE_PHY_NUM_CHANS) {
   2395c:	2828      	cmp	r0, #40	; 0x28
   2395e:	d000      	beq.n	23962 <ble_ll_scan_get_next_adv_prim_chan+0xa>
        chan = BLE_PHY_ADV_CHAN_START;
    }

    return chan;
}
   23960:	4770      	bx	lr
        chan = BLE_PHY_ADV_CHAN_START;
   23962:	2025      	movs	r0, #37	; 0x25
   23964:	e7fc      	b.n	23960 <ble_ll_scan_get_next_adv_prim_chan+0x8>

00023966 <ble_ll_scan_move_window_to>:

static uint32_t
ble_ll_scan_move_window_to(struct ble_ll_scan_params *scanp, uint32_t time)
{
   23966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23968:	4605      	mov	r5, r0
   2396a:	460f      	mov	r7, r1
    /*
     * Move window until given tick is before or inside window and move to next
     * channel for each skipped interval.
     */

    end_time = scanp->timing.start_time + scanp->timing.window;
   2396c:	6904      	ldr	r4, [r0, #16]
   2396e:	68c6      	ldr	r6, [r0, #12]
   23970:	4434      	add	r4, r6
    while (CPUTIME_GEQ(time, end_time)) {
   23972:	e008      	b.n	23986 <ble_ll_scan_move_window_to+0x20>
        scanp->timing.start_time += scanp->timing.interval;
   23974:	68ac      	ldr	r4, [r5, #8]
   23976:	692b      	ldr	r3, [r5, #16]
   23978:	441c      	add	r4, r3
   2397a:	612c      	str	r4, [r5, #16]
        scanp->scan_chan = ble_ll_scan_get_next_adv_prim_chan(scanp->scan_chan);
   2397c:	7968      	ldrb	r0, [r5, #5]
   2397e:	f7ff ffeb 	bl	23958 <ble_ll_scan_get_next_adv_prim_chan>
   23982:	7168      	strb	r0, [r5, #5]
        end_time = scanp->timing.start_time + scanp->timing.window;
   23984:	4434      	add	r4, r6
    while (CPUTIME_GEQ(time, end_time)) {
   23986:	1b3c      	subs	r4, r7, r4
   23988:	2c00      	cmp	r4, #0
   2398a:	daf3      	bge.n	23974 <ble_ll_scan_move_window_to+0xe>
    }

    return scanp->timing.start_time;
}
   2398c:	6928      	ldr	r0, [r5, #16]
   2398e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023990 <ble_ll_scan_is_inside_window>:

static bool
ble_ll_scan_is_inside_window(struct ble_ll_scan_params *scanp, uint32_t time)
{
   23990:	b538      	push	{r3, r4, r5, lr}
   23992:	4605      	mov	r5, r0
   23994:	460c      	mov	r4, r1
    uint32_t start_time;

    /* Make sure we are checking against closest window */
    start_time = ble_ll_scan_move_window_to(scanp, time);
   23996:	f7ff ffe6 	bl	23966 <ble_ll_scan_move_window_to>

    if (scanp->timing.window == scanp->timing.interval) {
   2399a:	68eb      	ldr	r3, [r5, #12]
   2399c:	68aa      	ldr	r2, [r5, #8]
   2399e:	4293      	cmp	r3, r2
   239a0:	d00c      	beq.n	239bc <ble_ll_scan_is_inside_window+0x2c>
        /* always inside window in continuous scan */
        return true;
    }

    return CPUTIME_GEQ(time, start_time) &&
   239a2:	1a22      	subs	r2, r4, r0
   239a4:	2a00      	cmp	r2, #0
   239a6:	db05      	blt.n	239b4 <ble_ll_scan_is_inside_window+0x24>
           CPUTIME_LT(time, start_time + scanp->timing.window);
   239a8:	4403      	add	r3, r0
   239aa:	1ae3      	subs	r3, r4, r3
    return CPUTIME_GEQ(time, start_time) &&
   239ac:	2b00      	cmp	r3, #0
   239ae:	db03      	blt.n	239b8 <ble_ll_scan_is_inside_window+0x28>
   239b0:	2000      	movs	r0, #0
   239b2:	e004      	b.n	239be <ble_ll_scan_is_inside_window+0x2e>
   239b4:	2000      	movs	r0, #0
   239b6:	e002      	b.n	239be <ble_ll_scan_is_inside_window+0x2e>
   239b8:	2001      	movs	r0, #1
   239ba:	e000      	b.n	239be <ble_ll_scan_is_inside_window+0x2e>
        return true;
   239bc:	2001      	movs	r0, #1
}
   239be:	bd38      	pop	{r3, r4, r5, pc}

000239c0 <ble_ll_scan_get_addr_data_from_legacy>:
}

static void
ble_ll_scan_get_addr_data_from_legacy(uint8_t pdu_type, uint8_t *rxbuf,
                                     struct ble_ll_scan_addr_data *addrd)
{
   239c0:	b508      	push	{r3, lr}
    BLE_LL_ASSERT(pdu_type < BLE_ADV_PDU_TYPE_ADV_EXT_IND);
   239c2:	2806      	cmp	r0, #6
   239c4:	d80f      	bhi.n	239e6 <ble_ll_scan_get_addr_data_from_legacy+0x26>

    addrd->adva_present = true;
   239c6:	2301      	movs	r3, #1
   239c8:	7013      	strb	r3, [r2, #0]

    addrd->adva = rxbuf + BLE_LL_PDU_HDR_LEN;
   239ca:	1c8b      	adds	r3, r1, #2
   239cc:	6053      	str	r3, [r2, #4]
    addrd->adva_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK);
   239ce:	780b      	ldrb	r3, [r1, #0]
    if (txrxflag) {
   239d0:	f013 0f40 	tst.w	r3, #64	; 0x40
   239d4:	d011      	beq.n	239fa <ble_ll_scan_get_addr_data_from_legacy+0x3a>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   239d6:	2301      	movs	r3, #1
   239d8:	7053      	strb	r3, [r2, #1]

    if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   239da:	2801      	cmp	r0, #1
   239dc:	d00f      	beq.n	239fe <ble_ll_scan_get_addr_data_from_legacy+0x3e>
        addrd->targeta = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
        addrd->targeta_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
    } else {
        addrd->targeta = NULL;
   239de:	2300      	movs	r3, #0
   239e0:	60d3      	str	r3, [r2, #12]
        addrd->targeta_type = 0;
   239e2:	7213      	strb	r3, [r2, #8]
    }
}
   239e4:	bd08      	pop	{r3, pc}
    BLE_LL_ASSERT(pdu_type < BLE_ADV_PDU_TYPE_ADV_EXT_IND);
   239e6:	f7e4 fbeb 	bl	81c0 <hal_debugger_connected>
   239ea:	b100      	cbz	r0, 239ee <ble_ll_scan_get_addr_data_from_legacy+0x2e>
   239ec:	be01      	bkpt	0x0001
   239ee:	2300      	movs	r3, #0
   239f0:	461a      	mov	r2, r3
   239f2:	4619      	mov	r1, r3
   239f4:	4618      	mov	r0, r3
   239f6:	f7e5 ff79 	bl	98ec <__assert_func>
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   239fa:	2300      	movs	r3, #0
   239fc:	e7ec      	b.n	239d8 <ble_ll_scan_get_addr_data_from_legacy+0x18>
        addrd->targeta = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
   239fe:	f101 0308 	add.w	r3, r1, #8
   23a02:	60d3      	str	r3, [r2, #12]
    if (txrxflag) {
   23a04:	f991 3000 	ldrsb.w	r3, [r1]
   23a08:	2b00      	cmp	r3, #0
   23a0a:	db02      	blt.n	23a12 <ble_ll_scan_get_addr_data_from_legacy+0x52>
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   23a0c:	2300      	movs	r3, #0
        addrd->targeta_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
   23a0e:	7213      	strb	r3, [r2, #8]
   23a10:	e7e8      	b.n	239e4 <ble_ll_scan_get_addr_data_from_legacy+0x24>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   23a12:	2301      	movs	r3, #1
   23a14:	e7fb      	b.n	23a0e <ble_ll_scan_get_addr_data_from_legacy+0x4e>

00023a16 <ble_ll_scan_req_backoff>:
{
   23a16:	b510      	push	{r4, lr}
    BLE_LL_ASSERT(scansm->backoff_count == 0);
   23a18:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   23a1a:	b9cb      	cbnz	r3, 23a50 <ble_ll_scan_req_backoff+0x3a>
   23a1c:	4604      	mov	r4, r0
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   23a1e:	78c3      	ldrb	r3, [r0, #3]
   23a20:	bb03      	cbnz	r3, 23a64 <ble_ll_scan_req_backoff+0x4e>
    if (success) {
   23a22:	b389      	cbz	r1, 23a88 <ble_ll_scan_req_backoff+0x72>
        scansm->scan_rsp_cons_fails = 0;
   23a24:	2300      	movs	r3, #0
   23a26:	7103      	strb	r3, [r0, #4]
        ++scansm->scan_rsp_cons_ok;
   23a28:	7943      	ldrb	r3, [r0, #5]
   23a2a:	3301      	adds	r3, #1
   23a2c:	b2db      	uxtb	r3, r3
   23a2e:	7143      	strb	r3, [r0, #5]
        if (scansm->scan_rsp_cons_ok == 2) {
   23a30:	2b02      	cmp	r3, #2
   23a32:	d021      	beq.n	23a78 <ble_ll_scan_req_backoff+0x62>
   23a34:	f7e7 fe8e 	bl	b754 <lrand48>
    scansm->backoff_count = rand() & (scansm->upper_limit - 1);
   23a38:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   23a3a:	3b01      	subs	r3, #1
   23a3c:	b21b      	sxth	r3, r3
   23a3e:	4018      	ands	r0, r3
   23a40:	b280      	uxth	r0, r0
    ++scansm->backoff_count;
   23a42:	3001      	adds	r0, #1
   23a44:	b280      	uxth	r0, r0
   23a46:	84e0      	strh	r0, [r4, #38]	; 0x26
    BLE_LL_ASSERT(scansm->backoff_count <= 256);
   23a48:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   23a4c:	d82c      	bhi.n	23aa8 <ble_ll_scan_req_backoff+0x92>
}
   23a4e:	bd10      	pop	{r4, pc}
    BLE_LL_ASSERT(scansm->backoff_count == 0);
   23a50:	f7e4 fbb6 	bl	81c0 <hal_debugger_connected>
   23a54:	b100      	cbz	r0, 23a58 <ble_ll_scan_req_backoff+0x42>
   23a56:	be01      	bkpt	0x0001
   23a58:	2300      	movs	r3, #0
   23a5a:	461a      	mov	r2, r3
   23a5c:	4619      	mov	r1, r3
   23a5e:	4618      	mov	r0, r3
   23a60:	f7e5 ff44 	bl	98ec <__assert_func>
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   23a64:	f7e4 fbac 	bl	81c0 <hal_debugger_connected>
   23a68:	b100      	cbz	r0, 23a6c <ble_ll_scan_req_backoff+0x56>
   23a6a:	be01      	bkpt	0x0001
   23a6c:	2300      	movs	r3, #0
   23a6e:	461a      	mov	r2, r3
   23a70:	4619      	mov	r1, r3
   23a72:	4618      	mov	r0, r3
   23a74:	f7e5 ff3a 	bl	98ec <__assert_func>
            scansm->scan_rsp_cons_ok = 0;
   23a78:	2300      	movs	r3, #0
   23a7a:	7143      	strb	r3, [r0, #5]
            if (scansm->upper_limit > 1) {
   23a7c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   23a7e:	2b01      	cmp	r3, #1
   23a80:	d9d8      	bls.n	23a34 <ble_ll_scan_req_backoff+0x1e>
                scansm->upper_limit >>= 1;
   23a82:	085b      	lsrs	r3, r3, #1
   23a84:	8483      	strh	r3, [r0, #36]	; 0x24
   23a86:	e7d5      	b.n	23a34 <ble_ll_scan_req_backoff+0x1e>
        scansm->scan_rsp_cons_ok = 0;
   23a88:	2300      	movs	r3, #0
   23a8a:	7143      	strb	r3, [r0, #5]
        ++scansm->scan_rsp_cons_fails;
   23a8c:	7903      	ldrb	r3, [r0, #4]
   23a8e:	3301      	adds	r3, #1
   23a90:	b2db      	uxtb	r3, r3
   23a92:	7103      	strb	r3, [r0, #4]
        if (scansm->scan_rsp_cons_fails == 2) {
   23a94:	2b02      	cmp	r3, #2
   23a96:	d1cd      	bne.n	23a34 <ble_ll_scan_req_backoff+0x1e>
            scansm->scan_rsp_cons_fails = 0;
   23a98:	2300      	movs	r3, #0
   23a9a:	7103      	strb	r3, [r0, #4]
            if (scansm->upper_limit < 256) {
   23a9c:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   23a9e:	2bff      	cmp	r3, #255	; 0xff
   23aa0:	d8c8      	bhi.n	23a34 <ble_ll_scan_req_backoff+0x1e>
                scansm->upper_limit <<= 1;
   23aa2:	005b      	lsls	r3, r3, #1
   23aa4:	8483      	strh	r3, [r0, #36]	; 0x24
   23aa6:	e7c5      	b.n	23a34 <ble_ll_scan_req_backoff+0x1e>
    BLE_LL_ASSERT(scansm->backoff_count <= 256);
   23aa8:	f7e4 fb8a 	bl	81c0 <hal_debugger_connected>
   23aac:	b100      	cbz	r0, 23ab0 <ble_ll_scan_req_backoff+0x9a>
   23aae:	be01      	bkpt	0x0001
   23ab0:	2300      	movs	r3, #0
   23ab2:	461a      	mov	r2, r3
   23ab4:	4619      	mov	r1, r3
   23ab6:	4618      	mov	r0, r3
   23ab8:	f7e5 ff18 	bl	98ec <__assert_func>

00023abc <ble_ll_scan_have_rxd_scan_rsp>:
{
   23abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23ac0:	4606      	mov	r6, r0
   23ac2:	460f      	mov	r7, r1
   23ac4:	4690      	mov	r8, r2
   23ac6:	4699      	mov	r9, r3
    num_advs = g_ble_ll_scan_num_rsp_advs;
   23ac8:	4b17      	ldr	r3, [pc, #92]	; (23b28 <ble_ll_scan_have_rxd_scan_rsp+0x6c>)
   23aca:	781c      	ldrb	r4, [r3, #0]
    adv = &g_ble_ll_scan_rsp_advs[0];
   23acc:	4d17      	ldr	r5, [pc, #92]	; (23b2c <ble_ll_scan_have_rxd_scan_rsp+0x70>)
    while (num_advs) {
   23ace:	e00c      	b.n	23aea <ble_ll_scan_have_rxd_scan_rsp+0x2e>
                if ((adv->sc_adv_flags & BLE_LL_SC_ADV_F_RANDOM_ADDR) == 0) {
   23ad0:	882b      	ldrh	r3, [r5, #0]
   23ad2:	f013 0f01 	tst.w	r3, #1
   23ad6:	d105      	bne.n	23ae4 <ble_ll_scan_have_rxd_scan_rsp+0x28>
                    if (ext_adv) {
   23ad8:	f1b8 0f00 	cmp.w	r8, #0
   23adc:	d020      	beq.n	23b20 <ble_ll_scan_have_rxd_scan_rsp+0x64>
                        if (adi == adv->adi) {
   23ade:	886b      	ldrh	r3, [r5, #2]
   23ae0:	454b      	cmp	r3, r9
   23ae2:	d01f      	beq.n	23b24 <ble_ll_scan_have_rxd_scan_rsp+0x68>
        ++adv;
   23ae4:	350a      	adds	r5, #10
        --num_advs;
   23ae6:	3c01      	subs	r4, #1
   23ae8:	b2e4      	uxtb	r4, r4
    while (num_advs) {
   23aea:	b1a4      	cbz	r4, 23b16 <ble_ll_scan_have_rxd_scan_rsp+0x5a>
        if (!memcmp(&adv->adv_addr, addr, BLE_DEV_ADDR_LEN)) {
   23aec:	2206      	movs	r2, #6
   23aee:	4631      	mov	r1, r6
   23af0:	1d28      	adds	r0, r5, #4
   23af2:	f7e7 fe37 	bl	b764 <memcmp>
   23af6:	2800      	cmp	r0, #0
   23af8:	d1f4      	bne.n	23ae4 <ble_ll_scan_have_rxd_scan_rsp+0x28>
            if (txadd) {
   23afa:	2f00      	cmp	r7, #0
   23afc:	d0e8      	beq.n	23ad0 <ble_ll_scan_have_rxd_scan_rsp+0x14>
                if (adv->sc_adv_flags & BLE_LL_SC_ADV_F_RANDOM_ADDR) {
   23afe:	882b      	ldrh	r3, [r5, #0]
   23b00:	f013 0f01 	tst.w	r3, #1
   23b04:	d0ee      	beq.n	23ae4 <ble_ll_scan_have_rxd_scan_rsp+0x28>
                    if (ext_adv) {
   23b06:	f1b8 0f00 	cmp.w	r8, #0
   23b0a:	d007      	beq.n	23b1c <ble_ll_scan_have_rxd_scan_rsp+0x60>
                        if (adi == adv->adi) {
   23b0c:	886b      	ldrh	r3, [r5, #2]
   23b0e:	454b      	cmp	r3, r9
   23b10:	d1e8      	bne.n	23ae4 <ble_ll_scan_have_rxd_scan_rsp+0x28>
                            return 1;
   23b12:	2001      	movs	r0, #1
   23b14:	e000      	b.n	23b18 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
    return 0;
   23b16:	2000      	movs	r0, #0
}
   23b18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    return 1;
   23b1c:	2001      	movs	r0, #1
   23b1e:	e7fb      	b.n	23b18 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
                    return 1;
   23b20:	2001      	movs	r0, #1
   23b22:	e7f9      	b.n	23b18 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
                            return 1;
   23b24:	2001      	movs	r0, #1
   23b26:	e7f7      	b.n	23b18 <ble_ll_scan_have_rxd_scan_rsp+0x5c>
   23b28:	20008b5c 	.word	0x20008b5c
   23b2c:	20008b74 	.word	0x20008b74

00023b30 <ble_ll_scan_dup_update_legacy>:
{
   23b30:	b570      	push	{r4, r5, r6, lr}
   23b32:	461e      	mov	r6, r3
    e = TAILQ_FIRST(&g_scan_dup_list);
   23b34:	4b15      	ldr	r3, [pc, #84]	; (23b8c <ble_ll_scan_dup_update_legacy+0x5c>)
   23b36:	681c      	ldr	r4, [r3, #0]
    BLE_LL_ASSERT(e && e->type == type && !memcmp(e->addr, addr, 6));
   23b38:	b1a4      	cbz	r4, 23b64 <ble_ll_scan_dup_update_legacy+0x34>
   23b3a:	4615      	mov	r5, r2
   23b3c:	f000 0001 	and.w	r0, r0, #1
   23b40:	7823      	ldrb	r3, [r4, #0]
   23b42:	4283      	cmp	r3, r0
   23b44:	d10e      	bne.n	23b64 <ble_ll_scan_dup_update_legacy+0x34>
   23b46:	2206      	movs	r2, #6
   23b48:	1c60      	adds	r0, r4, #1
   23b4a:	f7e7 fe0b 	bl	b764 <memcmp>
   23b4e:	b948      	cbnz	r0, 23b64 <ble_ll_scan_dup_update_legacy+0x34>
    if (subev == BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT) {
   23b50:	2d0b      	cmp	r5, #11
   23b52:	d011      	beq.n	23b78 <ble_ll_scan_dup_update_legacy+0x48>
        if (evtype == BLE_HCI_ADV_RPT_EVTYPE_SCAN_RSP) {
   23b54:	2e04      	cmp	r6, #4
   23b56:	d014      	beq.n	23b82 <ble_ll_scan_dup_update_legacy+0x52>
            e->flags |= BLE_LL_SCAN_DUP_F_ADV_REPORT_SENT;
   23b58:	79e3      	ldrb	r3, [r4, #7]
   23b5a:	f043 0301 	orr.w	r3, r3, #1
   23b5e:	71e3      	strb	r3, [r4, #7]
}
   23b60:	2000      	movs	r0, #0
   23b62:	bd70      	pop	{r4, r5, r6, pc}
    BLE_LL_ASSERT(e && e->type == type && !memcmp(e->addr, addr, 6));
   23b64:	f7e4 fb2c 	bl	81c0 <hal_debugger_connected>
   23b68:	b100      	cbz	r0, 23b6c <ble_ll_scan_dup_update_legacy+0x3c>
   23b6a:	be01      	bkpt	0x0001
   23b6c:	2300      	movs	r3, #0
   23b6e:	461a      	mov	r2, r3
   23b70:	4619      	mov	r1, r3
   23b72:	4618      	mov	r0, r3
   23b74:	f7e5 feba 	bl	98ec <__assert_func>
        e->flags |= BLE_LL_SCAN_DUP_F_DIR_ADV_REPORT_SENT;
   23b78:	79e3      	ldrb	r3, [r4, #7]
   23b7a:	f043 0302 	orr.w	r3, r3, #2
   23b7e:	71e3      	strb	r3, [r4, #7]
   23b80:	e7ee      	b.n	23b60 <ble_ll_scan_dup_update_legacy+0x30>
            e->flags |= BLE_LL_SCAN_DUP_F_SCAN_RSP_SENT;
   23b82:	79e3      	ldrb	r3, [r4, #7]
   23b84:	f043 0304 	orr.w	r3, r3, #4
   23b88:	71e3      	strb	r3, [r4, #7]
   23b8a:	e7e9      	b.n	23b60 <ble_ll_scan_dup_update_legacy+0x30>
   23b8c:	20008c4c 	.word	0x20008c4c

00023b90 <ble_ll_scan_rx_filter>:
 *          1 = match
 *          2 = match, but do not scan
 */
static int
ble_ll_scan_rx_filter(struct ble_mbuf_hdr *hdr, struct ble_ll_scan_addr_data *addrd)
{
   23b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23b94:	4606      	mov	r6, r0
   23b96:	460c      	mov	r4, r1
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    struct ble_ll_scan_params *scanp = scansm->scanp;
   23b98:	4b46      	ldr	r3, [pc, #280]	; (23cb4 <ble_ll_scan_rx_filter+0x124>)
   23b9a:	f8d3 806c 	ldr.w	r8, [r3, #108]	; 0x6c
#endif
    bool scan_req_allowed = true;
    int resolved = 0;

    /* Use AdvA as initial advertiser address, we may try to resolve it later */
    addrd->adv_addr = addrd->adva;
   23b9e:	684b      	ldr	r3, [r1, #4]
   23ba0:	614b      	str	r3, [r1, #20]
    addrd->adv_addr_type = addrd->adva_type;
   23ba2:	784b      	ldrb	r3, [r1, #1]
   23ba4:	740b      	strb	r3, [r1, #16]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    /* By default, assume AdvA is not resolved */
    rxinfo->rpa_index = -1;
   23ba6:	23ff      	movs	r3, #255	; 0xff
   23ba8:	71c3      	strb	r3, [r0, #7]

    switch (ble_ll_addr_subtype(addrd->adva, addrd->adva_type)) {
   23baa:	7849      	ldrb	r1, [r1, #1]
   23bac:	6860      	ldr	r0, [r4, #4]
   23bae:	f7f9 f9a9 	bl	1cf04 <ble_ll_addr_subtype>
   23bb2:	4605      	mov	r5, r0
   23bb4:	b328      	cbz	r0, 23c02 <ble_ll_scan_rx_filter+0x72>
   23bb6:	2801      	cmp	r0, #1
   23bb8:	d130      	bne.n	23c1c <ble_ll_scan_rx_filter+0x8c>
         * Only resolve if packet actually contained AdvA.
         * In extended advertising PDUs we may use RL index from a PDU that
         * already had AdvA (e.g. ADV_EXT_IND in case of AUX_ADV_IND without
         * AdvA). In legacy advertising PDUs we always need to resolve AdvA.
         */
        if (addrd->adva_present) {
   23bba:	7823      	ldrb	r3, [r4, #0]
   23bbc:	b1bb      	cbz	r3, 23bee <ble_ll_scan_rx_filter+0x5e>
            rxinfo->rpa_index = ble_hw_resolv_list_match();
   23bbe:	f001 ff63 	bl	25a88 <ble_hw_resolv_list_match>
   23bc2:	b240      	sxtb	r0, r0
   23bc4:	71f0      	strb	r0, [r6, #7]
            BLE_LL_ASSERT(false);
            rxinfo->rpa_index = -1;
#endif
        }

        if (rxinfo->rpa_index < 0) {
   23bc6:	2800      	cmp	r0, #0
   23bc8:	db3f      	blt.n	23c4a <ble_ll_scan_rx_filter+0xba>
            aux_data->rpa_index = rxinfo->rpa_index;
        }
#endif

        /* Use resolved identity address as advertiser address */
        rl = &g_ble_ll_resolv_list[rxinfo->rpa_index];
   23bca:	2336      	movs	r3, #54	; 0x36
   23bcc:	fb03 f000 	mul.w	r0, r3, r0
   23bd0:	4a39      	ldr	r2, [pc, #228]	; (23cb8 <ble_ll_scan_rx_filter+0x128>)
   23bd2:	1887      	adds	r7, r0, r2
        addrd->adv_addr = rl->rl_identity_addr;
   23bd4:	f100 0320 	add.w	r3, r0, #32
   23bd8:	4413      	add	r3, r2
   23bda:	3304      	adds	r3, #4
   23bdc:	6163      	str	r3, [r4, #20]
        addrd->adv_addr_type = rl->rl_addr_type;
   23bde:	5c83      	ldrb	r3, [r0, r2]
   23be0:	7423      	strb	r3, [r4, #16]
        addrd->rl = rl;
   23be2:	61a7      	str	r7, [r4, #24]

        rxinfo->flags |= BLE_MBUF_HDR_F_RESOLVED;
   23be4:	8833      	ldrh	r3, [r6, #0]
   23be6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   23bea:	8033      	strh	r3, [r6, #0]
        resolved = 1;
        break;
   23bec:	e018      	b.n	23c20 <ble_ll_scan_rx_filter+0x90>
            BLE_LL_ASSERT(false);
   23bee:	f7e4 fae7 	bl	81c0 <hal_debugger_connected>
   23bf2:	b100      	cbz	r0, 23bf6 <ble_ll_scan_rx_filter+0x66>
   23bf4:	be01      	bkpt	0x0001
   23bf6:	2300      	movs	r3, #0
   23bf8:	461a      	mov	r2, r3
   23bfa:	4619      	mov	r1, r3
   23bfc:	4618      	mov	r0, r3
   23bfe:	f7e5 fe75 	bl	98ec <__assert_func>
    case BLE_LL_ADDR_SUBTYPE_IDENTITY:
        /*
         * If AdvA is an identity address, we need to check if that device was
         * added to RL in order to use proper privacy mode.
         */
        rl = ble_ll_resolv_list_find(addrd->adva, addrd->adva_type);
   23c02:	7861      	ldrb	r1, [r4, #1]
   23c04:	6860      	ldr	r0, [r4, #4]
   23c06:	f7ff fad9 	bl	231bc <ble_ll_resolv_list_find>
        if (!rl) {
   23c0a:	4607      	mov	r7, r0
   23c0c:	b140      	cbz	r0, 23c20 <ble_ll_scan_rx_filter+0x90>
            break;
        }

        addrd->rl = rl;
   23c0e:	61a0      	str	r0, [r4, #24]

        /* Ignore device if using network privacy mode and it has IRK */
        if ((rl->rl_priv_mode == BLE_HCI_PRIVACY_NETWORK) && rl->rl_has_peer) {
   23c10:	7843      	ldrb	r3, [r0, #1]
   23c12:	b92b      	cbnz	r3, 23c20 <ble_ll_scan_rx_filter+0x90>
   23c14:	78c3      	ldrb	r3, [r0, #3]
   23c16:	b11b      	cbz	r3, 23c20 <ble_ll_scan_rx_filter+0x90>
            return 0;
   23c18:	462b      	mov	r3, r5
   23c1a:	e038      	b.n	23c8e <ble_ll_scan_rx_filter+0xfe>
    int resolved = 0;
   23c1c:	2500      	movs	r5, #0
    struct ble_ll_resolv_entry *rl = NULL;
   23c1e:	462f      	mov	r7, r5
    default:
        /* NRPA goes through filtering policy directly */
        break;
    }

    if (addrd->targeta) {
   23c20:	68e0      	ldr	r0, [r4, #12]
   23c22:	b360      	cbz	r0, 23c7e <ble_ll_scan_rx_filter+0xee>
        switch (ble_ll_addr_subtype(addrd->targeta, addrd->targeta_type)) {
   23c24:	7a21      	ldrb	r1, [r4, #8]
   23c26:	f7f9 f96d 	bl	1cf04 <ble_ll_addr_subtype>
   23c2a:	4603      	mov	r3, r0
   23c2c:	b1b8      	cbz	r0, 23c5e <ble_ll_scan_rx_filter+0xce>
   23c2e:	2801      	cmp	r0, #1
   23c30:	d130      	bne.n	23c94 <ble_ll_scan_rx_filter+0x104>
        case BLE_LL_ADDR_SUBTYPE_RPA:
            /* Check if TargetA can be resolved using the same RL entry as AdvA */
            if (rl && ble_ll_resolv_rpa(addrd->targeta, rl->rl_local_irk)) {
   23c32:	b16f      	cbz	r7, 23c50 <ble_ll_scan_rx_filter+0xc0>
   23c34:	1d39      	adds	r1, r7, #4
   23c36:	68e0      	ldr	r0, [r4, #12]
   23c38:	f7ff fce2 	bl	23600 <ble_ll_resolv_rpa>
   23c3c:	b140      	cbz	r0, 23c50 <ble_ll_scan_rx_filter+0xc0>
                rxinfo->flags |= BLE_MBUF_HDR_F_TARGETA_RESOLVED;
   23c3e:	8833      	ldrh	r3, [r6, #0]
   23c40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   23c44:	8033      	strh	r3, [r6, #0]
    bool scan_req_allowed = true;
   23c46:	2601      	movs	r6, #1
                break;
   23c48:	e01a      	b.n	23c80 <ble_ll_scan_rx_filter+0xf0>
    int resolved = 0;
   23c4a:	2500      	movs	r5, #0
    struct ble_ll_resolv_entry *rl = NULL;
   23c4c:	462f      	mov	r7, r5
   23c4e:	e7e7      	b.n	23c20 <ble_ll_scan_rx_filter+0x90>
            }

            /* Check if scan filter policy allows unresolved RPAs to be processed */
            if (!(scanp->scan_filt_policy & 0x02)) {
   23c50:	f898 3002 	ldrb.w	r3, [r8, #2]
   23c54:	f013 0f02 	tst.w	r3, #2
   23c58:	d027      	beq.n	23caa <ble_ll_scan_rx_filter+0x11a>
            /*
             * We will notify host as requited by scan policy, but make sure we
             * do not send scan request since we do not know if this is directed
             * to us.
             */
            scan_req_allowed = false;
   23c5a:	2600      	movs	r6, #0
   23c5c:	e010      	b.n	23c80 <ble_ll_scan_rx_filter+0xf0>
            break;
        case BLE_LL_ADDR_SUBTYPE_IDENTITY:
            /* We shall ignore identity in TargetA if we are using RPA */
            if ((scanp->own_addr_type & 0x02) && rl && rl->rl_has_local) {
   23c5e:	f898 2001 	ldrb.w	r2, [r8, #1]
   23c62:	f012 0f02 	tst.w	r2, #2
   23c66:	d002      	beq.n	23c6e <ble_ll_scan_rx_filter+0xde>
   23c68:	b10f      	cbz	r7, 23c6e <ble_ll_scan_rx_filter+0xde>
   23c6a:	78ba      	ldrb	r2, [r7, #2]
   23c6c:	b97a      	cbnz	r2, 23c8e <ble_ll_scan_rx_filter+0xfe>
                return 0;
            }
            /* Ignore if not directed to us */
            if (!ble_ll_is_our_devaddr(addrd->targeta, addrd->targeta_type)) {
   23c6e:	7a21      	ldrb	r1, [r4, #8]
   23c70:	68e0      	ldr	r0, [r4, #12]
   23c72:	f7f9 f9dd 	bl	1d030 <ble_ll_is_our_devaddr>
   23c76:	4603      	mov	r3, r0
   23c78:	b148      	cbz	r0, 23c8e <ble_ll_scan_rx_filter+0xfe>
    bool scan_req_allowed = true;
   23c7a:	2601      	movs	r6, #1
   23c7c:	e000      	b.n	23c80 <ble_ll_scan_rx_filter+0xf0>
   23c7e:	2601      	movs	r6, #1
        return 0;
    }
#endif

    /* Check on WL if required by scan filter policy */
    if (scanp->scan_filt_policy & 0x01) {
   23c80:	f898 3002 	ldrb.w	r3, [r8, #2]
   23c84:	f013 0f01 	tst.w	r3, #1
   23c88:	d106      	bne.n	23c98 <ble_ll_scan_rx_filter+0x108>
        if (!ble_ll_whitelist_match(addrd->adv_addr, addrd->adv_addr_type, resolved)) {
            return 0;
        }
    }

    return scan_req_allowed ? 1 : 2;
   23c8a:	b186      	cbz	r6, 23cae <ble_ll_scan_rx_filter+0x11e>
   23c8c:	2301      	movs	r3, #1
}
   23c8e:	4618      	mov	r0, r3
   23c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool scan_req_allowed = true;
   23c94:	2601      	movs	r6, #1
   23c96:	e7f3      	b.n	23c80 <ble_ll_scan_rx_filter+0xf0>
        if (!ble_ll_whitelist_match(addrd->adv_addr, addrd->adv_addr_type, resolved)) {
   23c98:	462a      	mov	r2, r5
   23c9a:	7c21      	ldrb	r1, [r4, #16]
   23c9c:	6960      	ldr	r0, [r4, #20]
   23c9e:	f001 fcf5 	bl	2568c <ble_ll_whitelist_match>
   23ca2:	4603      	mov	r3, r0
   23ca4:	2800      	cmp	r0, #0
   23ca6:	d1f0      	bne.n	23c8a <ble_ll_scan_rx_filter+0xfa>
   23ca8:	e7f1      	b.n	23c8e <ble_ll_scan_rx_filter+0xfe>
                return 0;
   23caa:	2300      	movs	r3, #0
   23cac:	e7ef      	b.n	23c8e <ble_ll_scan_rx_filter+0xfe>
    return scan_req_allowed ? 1 : 2;
   23cae:	2302      	movs	r3, #2
   23cb0:	e7ed      	b.n	23c8e <ble_ll_scan_rx_filter+0xfe>
   23cb2:	bf00      	nop
   23cb4:	20008bc4 	.word	0x20008bc4
   23cb8:	20008a40 	.word	0x20008a40

00023cbc <ble_ll_scan_rx_isr_on_legacy>:

static int
ble_ll_scan_rx_isr_on_legacy(uint8_t pdu_type, uint8_t *rxbuf,
                             struct ble_mbuf_hdr *hdr,
                             struct ble_ll_scan_addr_data *addrd)
{
   23cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23cbe:	4606      	mov	r6, r0
   23cc0:	4614      	mov	r4, r2
   23cc2:	461d      	mov	r5, r3
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    struct ble_ll_scan_params *scanp = scansm->scanp;
   23cc4:	4b27      	ldr	r3, [pc, #156]	; (23d64 <ble_ll_scan_rx_isr_on_legacy+0xa8>)
   23cc6:	6edf      	ldr	r7, [r3, #108]	; 0x6c
    struct ble_mbuf_hdr_rxinfo *rxinfo = &hdr->rxinfo;
    uint8_t sreq_adva_type;
    uint8_t *sreq_adva;
    int rc;

    ble_ll_scan_get_addr_data_from_legacy(pdu_type, rxbuf, addrd);
   23cc8:	462a      	mov	r2, r5
   23cca:	f7ff fe79 	bl	239c0 <ble_ll_scan_get_addr_data_from_legacy>

    if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   23cce:	2e04      	cmp	r6, #4
   23cd0:	d127      	bne.n	23d22 <ble_ll_scan_rx_isr_on_legacy+0x66>
        if (!BLE_MBUF_HDR_SCAN_RSP_RXD(hdr)) {
   23cd2:	8823      	ldrh	r3, [r4, #0]
   23cd4:	f013 0f08 	tst.w	r3, #8
   23cd8:	d03a      	beq.n	23d50 <ble_ll_scan_rx_isr_on_legacy+0x94>
             * update backoff.
             */
            return -1;
        }

        sreq_adva_type = !!(scansm->pdu_data.hdr_byte & BLE_ADV_PDU_HDR_RXADD_MASK);
   23cda:	4b22      	ldr	r3, [pc, #136]	; (23d64 <ble_ll_scan_rx_isr_on_legacy+0xa8>)
   23cdc:	7d9a      	ldrb	r2, [r3, #22]

        /*
         * Ignore scan response if AdvA does not match AdvA in request and also
         * update backoff as if there was no scan response.
         */
        if ((addrd->adva_type != sreq_adva_type) ||
   23cde:	786b      	ldrb	r3, [r5, #1]
   23ce0:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   23ce4:	d116      	bne.n	23d14 <ble_ll_scan_rx_isr_on_legacy+0x58>
            memcmp(addrd->adva, sreq_adva, BLE_DEV_ADDR_LEN)) {
   23ce6:	2206      	movs	r2, #6
   23ce8:	491f      	ldr	r1, [pc, #124]	; (23d68 <ble_ll_scan_rx_isr_on_legacy+0xac>)
   23cea:	6868      	ldr	r0, [r5, #4]
   23cec:	f7e7 fd3a 	bl	b764 <memcmp>
        if ((addrd->adva_type != sreq_adva_type) ||
   23cf0:	4605      	mov	r5, r0
   23cf2:	b978      	cbnz	r0, 23d14 <ble_ll_scan_rx_isr_on_legacy+0x58>
        /*
         * We are not pushing this one through filters so need to update
         * rpa_index here as otherwise pkt_in won't be able to determine
         * advertiser address properly.
         */
        rxinfo->rpa_index = ble_hw_resolv_list_match();
   23cf4:	f001 fec8 	bl	25a88 <ble_hw_resolv_list_match>
   23cf8:	b240      	sxtb	r0, r0
   23cfa:	71e0      	strb	r0, [r4, #7]
        if (rxinfo->rpa_index >= 0) {
   23cfc:	2800      	cmp	r0, #0
   23cfe:	db03      	blt.n	23d08 <ble_ll_scan_rx_isr_on_legacy+0x4c>
            rxinfo->flags |= BLE_MBUF_HDR_F_RESOLVED;
   23d00:	8823      	ldrh	r3, [r4, #0]
   23d02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   23d06:	8023      	strh	r3, [r4, #0]
        }
#endif

        rxinfo->flags |= BLE_MBUF_HDR_F_DEVMATCH;
   23d08:	8823      	ldrh	r3, [r4, #0]
   23d0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23d0e:	8023      	strh	r3, [r4, #0]
    }

    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
           ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
            (pdu_type == BLE_ADV_PDU_TYPE_ADV_SCAN_IND));
}
   23d10:	4628      	mov	r0, r5
   23d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_ll_scan_req_backoff(scansm, 0);
   23d14:	2100      	movs	r1, #0
   23d16:	4813      	ldr	r0, [pc, #76]	; (23d64 <ble_ll_scan_rx_isr_on_legacy+0xa8>)
   23d18:	f7ff fe7d 	bl	23a16 <ble_ll_scan_req_backoff>
            return -1;
   23d1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23d20:	e7f6      	b.n	23d10 <ble_ll_scan_rx_isr_on_legacy+0x54>
    rc = ble_ll_scan_rx_filter(hdr, addrd);
   23d22:	4629      	mov	r1, r5
   23d24:	4620      	mov	r0, r4
   23d26:	f7ff ff33 	bl	23b90 <ble_ll_scan_rx_filter>
    if (!rc) {
   23d2a:	4605      	mov	r5, r0
   23d2c:	2800      	cmp	r0, #0
   23d2e:	d0ef      	beq.n	23d10 <ble_ll_scan_rx_isr_on_legacy+0x54>
    rxinfo->flags |= BLE_MBUF_HDR_F_DEVMATCH;
   23d30:	8823      	ldrh	r3, [r4, #0]
   23d32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23d36:	8023      	strh	r3, [r4, #0]
    if (rc == 2) {
   23d38:	2802      	cmp	r0, #2
   23d3a:	d00c      	beq.n	23d56 <ble_ll_scan_rx_isr_on_legacy+0x9a>
    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
   23d3c:	793b      	ldrb	r3, [r7, #4]
   23d3e:	2b01      	cmp	r3, #1
   23d40:	d001      	beq.n	23d46 <ble_ll_scan_rx_isr_on_legacy+0x8a>
   23d42:	2500      	movs	r5, #0
   23d44:	e7e4      	b.n	23d10 <ble_ll_scan_rx_isr_on_legacy+0x54>
   23d46:	b146      	cbz	r6, 23d5a <ble_ll_scan_rx_isr_on_legacy+0x9e>
           ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
   23d48:	2e06      	cmp	r6, #6
   23d4a:	d008      	beq.n	23d5e <ble_ll_scan_rx_isr_on_legacy+0xa2>
    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
   23d4c:	2500      	movs	r5, #0
   23d4e:	e7df      	b.n	23d10 <ble_ll_scan_rx_isr_on_legacy+0x54>
            return -1;
   23d50:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   23d54:	e7dc      	b.n	23d10 <ble_ll_scan_rx_isr_on_legacy+0x54>
        return 0;
   23d56:	2500      	movs	r5, #0
   23d58:	e7da      	b.n	23d10 <ble_ll_scan_rx_isr_on_legacy+0x54>
    return (scanp->scan_type == BLE_SCAN_TYPE_ACTIVE) &&
   23d5a:	2501      	movs	r5, #1
   23d5c:	e7d8      	b.n	23d10 <ble_ll_scan_rx_isr_on_legacy+0x54>
   23d5e:	2501      	movs	r5, #1
   23d60:	e7d6      	b.n	23d10 <ble_ll_scan_rx_isr_on_legacy+0x54>
   23d62:	bf00      	nop
   23d64:	20008bc4 	.word	0x20008bc4
   23d68:	20008be1 	.word	0x20008be1

00023d6c <ble_ll_scan_req_tx_pdu_cb>:
{
   23d6c:	b410      	push	{r4}
    memcpy(dptr, pdu_data->scana, BLE_DEV_ADDR_LEN);
   23d6e:	460b      	mov	r3, r1
   23d70:	f853 4f17 	ldr.w	r4, [r3, #23]!
   23d74:	6004      	str	r4, [r0, #0]
   23d76:	889b      	ldrh	r3, [r3, #4]
   23d78:	8083      	strh	r3, [r0, #4]
    memcpy(dptr + BLE_DEV_ADDR_LEN, pdu_data->adva, BLE_DEV_ADDR_LEN);
   23d7a:	460b      	mov	r3, r1
   23d7c:	f853 4f1d 	ldr.w	r4, [r3, #29]!
   23d80:	f8c0 4006 	str.w	r4, [r0, #6]
   23d84:	889b      	ldrh	r3, [r3, #4]
   23d86:	8143      	strh	r3, [r0, #10]
    *hdr_byte = pdu_data->hdr_byte;
   23d88:	7d8b      	ldrb	r3, [r1, #22]
   23d8a:	7013      	strb	r3, [r2, #0]
}
   23d8c:	200c      	movs	r0, #12
   23d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
   23d92:	4770      	bx	lr

00023d94 <ble_ll_scan_refresh_nrpa>:
{
   23d94:	b538      	push	{r3, r4, r5, lr}
   23d96:	4604      	mov	r4, r0
    return os_time_get();
   23d98:	f7e7 fb1c 	bl	b3d4 <os_time_get>
    if ((ble_npl_stime_t)(now - scansm->scan_nrpa_timer) >= 0) {
   23d9c:	68e3      	ldr	r3, [r4, #12]
   23d9e:	1ac3      	subs	r3, r0, r3
   23da0:	2b00      	cmp	r3, #0
   23da2:	db0d      	blt.n	23dc0 <ble_ll_scan_refresh_nrpa+0x2c>
   23da4:	4605      	mov	r5, r0
        ble_ll_rand_data_get(scansm->scan_nrpa, BLE_DEV_ADDR_LEN);
   23da6:	2106      	movs	r1, #6
   23da8:	f104 0010 	add.w	r0, r4, #16
   23dac:	f7ff f8b4 	bl	22f18 <ble_ll_rand_data_get>
        scansm->scan_nrpa[5] &= ~0xc0;
   23db0:	7d63      	ldrb	r3, [r4, #21]
   23db2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   23db6:	7563      	strb	r3, [r4, #21]
        scansm->scan_nrpa_timer = now + ble_ll_resolv_get_rpa_tmo();
   23db8:	f7ff fb94 	bl	234e4 <ble_ll_resolv_get_rpa_tmo>
   23dbc:	4428      	add	r0, r5
   23dbe:	60e0      	str	r0, [r4, #12]
}
   23dc0:	bd38      	pop	{r3, r4, r5, pc}
	...

00023dc4 <ble_ll_scan_req_pdu_prepare>:
{
   23dc4:	b570      	push	{r4, r5, r6, lr}
   23dc6:	b082      	sub	sp, #8
   23dc8:	4604      	mov	r4, r0
   23dca:	460e      	mov	r6, r1
    if (adv_addr_type) {
   23dcc:	bb1a      	cbnz	r2, 23e16 <ble_ll_scan_req_pdu_prepare+0x52>
    hdr_byte = BLE_ADV_PDU_TYPE_SCAN_REQ;
   23dce:	2503      	movs	r5, #3
    if (scansm->own_addr_type & 0x01) {
   23dd0:	7861      	ldrb	r1, [r4, #1]
   23dd2:	f011 0f01 	tst.w	r1, #1
   23dd6:	d020      	beq.n	23e1a <ble_ll_scan_req_pdu_prepare+0x56>
        hdr_byte |= BLE_ADV_PDU_HDR_TXADD_RAND;
   23dd8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
        scana = g_random_addr;
   23ddc:	4a13      	ldr	r2, [pc, #76]	; (23e2c <ble_ll_scan_req_pdu_prepare+0x68>)
    if (scansm->own_addr_type & 0x02) {
   23dde:	f011 0f02 	tst.w	r1, #2
   23de2:	d009      	beq.n	23df8 <ble_ll_scan_req_pdu_prepare+0x34>
        if (rl && rl->rl_has_local) {
   23de4:	b10b      	cbz	r3, 23dea <ble_ll_scan_req_pdu_prepare+0x26>
   23de6:	789a      	ldrb	r2, [r3, #2]
   23de8:	b9ca      	cbnz	r2, 23e1e <ble_ll_scan_req_pdu_prepare+0x5a>
            ble_ll_scan_refresh_nrpa(scansm);
   23dea:	4620      	mov	r0, r4
   23dec:	f7ff ffd2 	bl	23d94 <ble_ll_scan_refresh_nrpa>
            scana = scansm->scan_nrpa;
   23df0:	f104 0210 	add.w	r2, r4, #16
        hdr_byte |= BLE_ADV_PDU_HDR_TXADD_RAND;
   23df4:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    pdu_data->hdr_byte = hdr_byte;
   23df8:	75a5      	strb	r5, [r4, #22]
    memcpy(pdu_data->scana, scana, BLE_DEV_ADDR_LEN);
   23dfa:	6813      	ldr	r3, [r2, #0]
   23dfc:	f8c4 3017 	str.w	r3, [r4, #23]
   23e00:	8893      	ldrh	r3, [r2, #4]
   23e02:	f8a4 301b 	strh.w	r3, [r4, #27]
    memcpy(pdu_data->adva, adv_addr, BLE_DEV_ADDR_LEN);
   23e06:	6833      	ldr	r3, [r6, #0]
   23e08:	f8c4 301d 	str.w	r3, [r4, #29]
   23e0c:	88b3      	ldrh	r3, [r6, #4]
   23e0e:	f8a4 3021 	strh.w	r3, [r4, #33]	; 0x21
}
   23e12:	b002      	add	sp, #8
   23e14:	bd70      	pop	{r4, r5, r6, pc}
        hdr_byte |= BLE_ADV_PDU_HDR_RXADD_RAND;
   23e16:	2583      	movs	r5, #131	; 0x83
   23e18:	e7da      	b.n	23dd0 <ble_ll_scan_req_pdu_prepare+0xc>
        scana = g_dev_addr;
   23e1a:	4a05      	ldr	r2, [pc, #20]	; (23e30 <ble_ll_scan_req_pdu_prepare+0x6c>)
   23e1c:	e7df      	b.n	23dde <ble_ll_scan_req_pdu_prepare+0x1a>
            ble_ll_resolv_get_priv_addr(rl, 1, rpa);
   23e1e:	466a      	mov	r2, sp
   23e20:	2101      	movs	r1, #1
   23e22:	4618      	mov	r0, r3
   23e24:	f7ff fb64 	bl	234f0 <ble_ll_resolv_get_priv_addr>
            scana = rpa;
   23e28:	466a      	mov	r2, sp
   23e2a:	e7e3      	b.n	23df4 <ble_ll_scan_req_pdu_prepare+0x30>
   23e2c:	20008758 	.word	0x20008758
   23e30:	20008750 	.word	0x20008750

00023e34 <ble_ll_scan_send_scan_req>:

static bool
ble_ll_scan_send_scan_req(uint8_t pdu_type, uint8_t *rxbuf,
                          struct ble_mbuf_hdr *hdr,
                          struct ble_ll_scan_addr_data *addrd)
{
   23e34:	b570      	push	{r4, r5, r6, lr}
   23e36:	4615      	mov	r5, r2
   23e38:	461c      	mov	r4, r3
        is_ext_adv = true;
    }
#endif

    /* Check if we already scanned this device successfully */
    if (ble_ll_scan_have_rxd_scan_rsp(addrd->adv_addr, addrd->adv_addr_type,
   23e3a:	2300      	movs	r3, #0
   23e3c:	461a      	mov	r2, r3
   23e3e:	7c21      	ldrb	r1, [r4, #16]
   23e40:	6960      	ldr	r0, [r4, #20]
   23e42:	f7ff fe3b 	bl	23abc <ble_ll_scan_have_rxd_scan_rsp>
   23e46:	bb40      	cbnz	r0, 23e9a <ble_ll_scan_send_scan_req+0x66>
                                      is_ext_adv, adi)) {
        return false;
    }

    /* Better not be a scan response pending */
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   23e48:	4b17      	ldr	r3, [pc, #92]	; (23ea8 <ble_ll_scan_send_scan_req+0x74>)
   23e4a:	78db      	ldrb	r3, [r3, #3]
   23e4c:	b9db      	cbnz	r3, 23e86 <ble_ll_scan_send_scan_req+0x52>

    /* We want to send a request. See if backoff allows us */
    if (scansm->backoff_count > 0) {
   23e4e:	4b16      	ldr	r3, [pc, #88]	; (23ea8 <ble_ll_scan_send_scan_req+0x74>)
   23e50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
   23e52:	b123      	cbz	r3, 23e5e <ble_ll_scan_send_scan_req+0x2a>
        if (--scansm->backoff_count != 0) {
   23e54:	3b01      	subs	r3, #1
   23e56:	b29b      	uxth	r3, r3
   23e58:	4a13      	ldr	r2, [pc, #76]	; (23ea8 <ble_ll_scan_send_scan_req+0x74>)
   23e5a:	84d3      	strh	r3, [r2, #38]	; 0x26
   23e5c:	b9fb      	cbnz	r3, 23e9e <ble_ll_scan_send_scan_req+0x6a>
        return false;
    }
#endif

    /* Use original AdvA in scan request (Core 5.1, Vol 6, Part B, section 6.3) */
    ble_ll_scan_req_pdu_prepare(scansm, addrd->adva, addrd->adva_type, addrd->rl);
   23e5e:	4e12      	ldr	r6, [pc, #72]	; (23ea8 <ble_ll_scan_send_scan_req+0x74>)
   23e60:	69a3      	ldr	r3, [r4, #24]
   23e62:	7862      	ldrb	r2, [r4, #1]
   23e64:	6861      	ldr	r1, [r4, #4]
   23e66:	4630      	mov	r0, r6
   23e68:	f7ff ffac 	bl	23dc4 <ble_ll_scan_req_pdu_prepare>

    rc = ble_phy_tx(ble_ll_scan_req_tx_pdu_cb, scansm, BLE_PHY_TRANSITION_TX_RX);
   23e6c:	2202      	movs	r2, #2
   23e6e:	4631      	mov	r1, r6
   23e70:	480e      	ldr	r0, [pc, #56]	; (23eac <ble_ll_scan_send_scan_req+0x78>)
   23e72:	f002 fbb3 	bl	265dc <ble_phy_tx>
    if (rc) {
   23e76:	b9a0      	cbnz	r0, 23ea2 <ble_ll_scan_send_scan_req+0x6e>
        return false;
    }

    scansm->scan_rsp_pending = 1;
   23e78:	2001      	movs	r0, #1
   23e7a:	70f0      	strb	r0, [r6, #3]
    rxinfo->flags |= BLE_MBUF_HDR_F_SCAN_REQ_TXD;
   23e7c:	882b      	ldrh	r3, [r5, #0]
   23e7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   23e82:	802b      	strh	r3, [r5, #0]
        scansm->cur_aux_data = ble_ll_scan_aux_data_ref(aux_data);
        STATS_INC(ble_ll_stats, aux_scan_req_tx);
    }
#endif

    return true;
   23e84:	e00a      	b.n	23e9c <ble_ll_scan_send_scan_req+0x68>
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   23e86:	f7e4 f99b 	bl	81c0 <hal_debugger_connected>
   23e8a:	b100      	cbz	r0, 23e8e <ble_ll_scan_send_scan_req+0x5a>
   23e8c:	be01      	bkpt	0x0001
   23e8e:	2300      	movs	r3, #0
   23e90:	461a      	mov	r2, r3
   23e92:	4619      	mov	r1, r3
   23e94:	4618      	mov	r0, r3
   23e96:	f7e5 fd29 	bl	98ec <__assert_func>
        return false;
   23e9a:	2000      	movs	r0, #0
}
   23e9c:	bd70      	pop	{r4, r5, r6, pc}
            return false;
   23e9e:	2000      	movs	r0, #0
   23ea0:	e7fc      	b.n	23e9c <ble_ll_scan_send_scan_req+0x68>
        return false;
   23ea2:	2000      	movs	r0, #0
   23ea4:	e7fa      	b.n	23e9c <ble_ll_scan_send_scan_req+0x68>
   23ea6:	bf00      	nop
   23ea8:	20008bc4 	.word	0x20008bc4
   23eac:	00023d6d 	.word	0x00023d6d

00023eb0 <ble_ll_scan_timer_cb>:
 *
 * @param arg Pointer to scan state machine.
 */
void
ble_ll_scan_timer_cb(void *arg)
{
   23eb0:	b508      	push	{r3, lr}
    struct ble_ll_scan_sm *scansm;

    scansm = (struct ble_ll_scan_sm *)arg;
    ble_ll_event_send(&scansm->scan_sched_ev);
   23eb2:	302c      	adds	r0, #44	; 0x2c
   23eb4:	f7f9 f9e4 	bl	1d280 <ble_ll_event_send>
}
   23eb8:	bd08      	pop	{r3, pc}
	...

00023ebc <ble_ll_scan_start>:
{
   23ebc:	b570      	push	{r4, r5, r6, lr}
   23ebe:	b082      	sub	sp, #8
    struct ble_ll_scan_params *scanp = scansm->scanp;
   23ec0:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   23ec2:	78c3      	ldrb	r3, [r0, #3]
   23ec4:	2b00      	cmp	r3, #0
   23ec6:	d130      	bne.n	23f2a <ble_ll_scan_start+0x6e>
   23ec8:	460c      	mov	r4, r1
    ble_ll_get_chan_to_scan(scansm, &scan_chan, &phy);
   23eca:	466a      	mov	r2, sp
   23ecc:	f10d 0107 	add.w	r1, sp, #7
   23ed0:	f7ff fd3c 	bl	2394c <ble_ll_get_chan_to_scan>
    BLE_LL_ASSERT(!sch || scan_chan < BLE_PHY_ADV_CHAN_START);
   23ed4:	b11c      	cbz	r4, 23ede <ble_ll_scan_start+0x22>
   23ed6:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23eda:	2b24      	cmp	r3, #36	; 0x24
   23edc:	d82f      	bhi.n	23f3e <ble_ll_scan_start+0x82>
    BLE_LL_ASSERT(sch || scan_chan >= BLE_PHY_ADV_CHAN_START);
   23ede:	2c00      	cmp	r4, #0
   23ee0:	d037      	beq.n	23f52 <ble_ll_scan_start+0x96>
    rc = ble_phy_setchan(scan_chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   23ee2:	4a39      	ldr	r2, [pc, #228]	; (23fc8 <ble_ll_scan_start+0x10c>)
   23ee4:	4939      	ldr	r1, [pc, #228]	; (23fcc <ble_ll_scan_start+0x110>)
   23ee6:	f89d 0007 	ldrb.w	r0, [sp, #7]
   23eea:	f002 f95f 	bl	261ac <ble_phy_setchan>
    BLE_LL_ASSERT(rc == 0);
   23eee:	4606      	mov	r6, r0
   23ef0:	2800      	cmp	r0, #0
   23ef2:	d13c      	bne.n	23f6e <ble_ll_scan_start+0xb2>
    ble_phy_set_txend_cb(NULL, NULL);
   23ef4:	2100      	movs	r1, #0
   23ef6:	4608      	mov	r0, r1
   23ef8:	f002 f916 	bl	26128 <ble_phy_set_txend_cb>
    ble_phy_encrypt_disable();
   23efc:	f002 f8fe 	bl	260fc <ble_phy_encrypt_disable>
    if (ble_ll_resolv_enabled()) {
   23f00:	f7ff fbb2 	bl	23668 <ble_ll_resolv_enabled>
   23f04:	2800      	cmp	r0, #0
   23f06:	d03c      	beq.n	23f82 <ble_ll_scan_start+0xc6>
        ble_phy_resolv_list_enable();
   23f08:	f002 fbfe 	bl	26708 <ble_phy_resolv_list_enable>
    if (sch) {
   23f0c:	2c00      	cmp	r4, #0
   23f0e:	d03b      	beq.n	23f88 <ble_ll_scan_start+0xcc>
        rc = ble_phy_rx_set_start_time(sch->start_time +
   23f10:	6863      	ldr	r3, [r4, #4]
   23f12:	4a2f      	ldr	r2, [pc, #188]	; (23fd0 <ble_ll_scan_start+0x114>)
   23f14:	7810      	ldrb	r0, [r2, #0]
   23f16:	78a1      	ldrb	r1, [r4, #2]
   23f18:	4418      	add	r0, r3
   23f1a:	f002 fb15 	bl	26548 <ble_phy_rx_set_start_time>
    if (!rc || rc == BLE_PHY_ERR_RX_LATE) {
   23f1e:	2800      	cmp	r0, #0
   23f20:	d03b      	beq.n	23f9a <ble_ll_scan_start+0xde>
   23f22:	2806      	cmp	r0, #6
   23f24:	d039      	beq.n	23f9a <ble_ll_scan_start+0xde>
   23f26:	4606      	mov	r6, r0
    return rc;
   23f28:	e043      	b.n	23fb2 <ble_ll_scan_start+0xf6>
    BLE_LL_ASSERT(scansm->scan_rsp_pending == 0);
   23f2a:	f7e4 f949 	bl	81c0 <hal_debugger_connected>
   23f2e:	b100      	cbz	r0, 23f32 <ble_ll_scan_start+0x76>
   23f30:	be01      	bkpt	0x0001
   23f32:	2300      	movs	r3, #0
   23f34:	461a      	mov	r2, r3
   23f36:	4619      	mov	r1, r3
   23f38:	4618      	mov	r0, r3
   23f3a:	f7e5 fcd7 	bl	98ec <__assert_func>
    BLE_LL_ASSERT(!sch || scan_chan < BLE_PHY_ADV_CHAN_START);
   23f3e:	f7e4 f93f 	bl	81c0 <hal_debugger_connected>
   23f42:	b100      	cbz	r0, 23f46 <ble_ll_scan_start+0x8a>
   23f44:	be01      	bkpt	0x0001
   23f46:	2300      	movs	r3, #0
   23f48:	461a      	mov	r2, r3
   23f4a:	4619      	mov	r1, r3
   23f4c:	4618      	mov	r0, r3
   23f4e:	f7e5 fccd 	bl	98ec <__assert_func>
    BLE_LL_ASSERT(sch || scan_chan >= BLE_PHY_ADV_CHAN_START);
   23f52:	f89d 3007 	ldrb.w	r3, [sp, #7]
   23f56:	2b24      	cmp	r3, #36	; 0x24
   23f58:	d8c3      	bhi.n	23ee2 <ble_ll_scan_start+0x26>
   23f5a:	f7e4 f931 	bl	81c0 <hal_debugger_connected>
   23f5e:	b100      	cbz	r0, 23f62 <ble_ll_scan_start+0xa6>
   23f60:	be01      	bkpt	0x0001
   23f62:	2300      	movs	r3, #0
   23f64:	461a      	mov	r2, r3
   23f66:	4619      	mov	r1, r3
   23f68:	4618      	mov	r0, r3
   23f6a:	f7e5 fcbf 	bl	98ec <__assert_func>
    BLE_LL_ASSERT(rc == 0);
   23f6e:	f7e4 f927 	bl	81c0 <hal_debugger_connected>
   23f72:	b100      	cbz	r0, 23f76 <ble_ll_scan_start+0xba>
   23f74:	be01      	bkpt	0x0001
   23f76:	2300      	movs	r3, #0
   23f78:	461a      	mov	r2, r3
   23f7a:	4619      	mov	r1, r3
   23f7c:	4618      	mov	r0, r3
   23f7e:	f7e5 fcb5 	bl	98ec <__assert_func>
        ble_phy_resolv_list_disable();
   23f82:	f002 fbd1 	bl	26728 <ble_phy_resolv_list_disable>
   23f86:	e7c1      	b.n	23f0c <ble_ll_scan_start+0x50>
        rc = ble_phy_rx_set_start_time(os_cputime_get32() +
   23f88:	f7f7 fee1 	bl	1bd4e <os_cputime_get32>
   23f8c:	4b10      	ldr	r3, [pc, #64]	; (23fd0 <ble_ll_scan_start+0x114>)
   23f8e:	781b      	ldrb	r3, [r3, #0]
   23f90:	2100      	movs	r1, #0
   23f92:	4418      	add	r0, r3
   23f94:	f002 fad8 	bl	26548 <ble_phy_rx_set_start_time>
   23f98:	e7c1      	b.n	23f1e <ble_ll_scan_start+0x62>
        if (scanp->scan_filt_policy & 1) {
   23f9a:	78ab      	ldrb	r3, [r5, #2]
   23f9c:	f013 0f01 	tst.w	r3, #1
   23fa0:	d00a      	beq.n	23fb8 <ble_ll_scan_start+0xfc>
            ble_ll_whitelist_enable();
   23fa2:	f001 fbc9 	bl	25738 <ble_ll_whitelist_enable>
        if (scanp->scan_type == BLE_SCAN_TYPE_INITIATE) {
   23fa6:	792b      	ldrb	r3, [r5, #4]
   23fa8:	2b02      	cmp	r3, #2
   23faa:	d008      	beq.n	23fbe <ble_ll_scan_start+0x102>
            ble_ll_state_set(BLE_LL_STATE_SCANNING);
   23fac:	2002      	movs	r0, #2
   23fae:	f7f9 f95b 	bl	1d268 <ble_ll_state_set>
}
   23fb2:	4630      	mov	r0, r6
   23fb4:	b002      	add	sp, #8
   23fb6:	bd70      	pop	{r4, r5, r6, pc}
            ble_ll_whitelist_disable();
   23fb8:	f001 fbc2 	bl	25740 <ble_ll_whitelist_disable>
   23fbc:	e7f3      	b.n	23fa6 <ble_ll_scan_start+0xea>
            ble_ll_state_set(BLE_LL_STATE_INITIATING);
   23fbe:	2003      	movs	r0, #3
   23fc0:	f7f9 f952 	bl	1d268 <ble_ll_state_set>
   23fc4:	e7f5      	b.n	23fb2 <ble_ll_scan_start+0xf6>
   23fc6:	bf00      	nop
   23fc8:	00555555 	.word	0x00555555
   23fcc:	8e89bed6 	.word	0x8e89bed6
   23fd0:	20008cf0 	.word	0x20008cf0

00023fd4 <ble_ll_scan_rx_pkt_in_restore_addr_data>:
#endif

static void
ble_ll_scan_rx_pkt_in_restore_addr_data(struct ble_mbuf_hdr *hdr,
                                        struct ble_ll_scan_addr_data *addrd)
{
   23fd4:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    struct ble_mbuf_hdr_rxinfo *rxinfo = &hdr->rxinfo;
    struct ble_ll_resolv_entry *rl;
#endif

    addrd->adv_addr = addrd->adva;
   23fd6:	684b      	ldr	r3, [r1, #4]
   23fd8:	614b      	str	r3, [r1, #20]
    addrd->adv_addr_type = addrd->adva_type;
   23fda:	784b      	ldrb	r3, [r1, #1]
   23fdc:	740b      	strb	r3, [r1, #16]

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    if (rxinfo->rpa_index >= 0) {
   23fde:	f990 2007 	ldrsb.w	r2, [r0, #7]
   23fe2:	2a00      	cmp	r2, #0
   23fe4:	db0c      	blt.n	24000 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x2c>
        rl = &g_ble_ll_resolv_list[rxinfo->rpa_index];
   23fe6:	2336      	movs	r3, #54	; 0x36
   23fe8:	fb03 f302 	mul.w	r3, r3, r2
   23fec:	4c0d      	ldr	r4, [pc, #52]	; (24024 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x50>)
   23fee:	191d      	adds	r5, r3, r4
        addrd->adv_addr = rl->rl_identity_addr;
   23ff0:	f103 0220 	add.w	r2, r3, #32
   23ff4:	4422      	add	r2, r4
   23ff6:	3204      	adds	r2, #4
   23ff8:	614a      	str	r2, [r1, #20]
        addrd->adv_addr_type = rl->rl_addr_type;
   23ffa:	5d1b      	ldrb	r3, [r3, r4]
   23ffc:	740b      	strb	r3, [r1, #16]
        addrd->rl = rl;
   23ffe:	618d      	str	r5, [r1, #24]
    }
    if (hdr->rxinfo.flags & BLE_MBUF_HDR_F_TARGETA_RESOLVED) {
   24000:	8803      	ldrh	r3, [r0, #0]
   24002:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   24006:	d100      	bne.n	2400a <ble_ll_scan_rx_pkt_in_restore_addr_data+0x36>
        addrd->targeta = ble_ll_get_our_devaddr(scansm->own_addr_type & 1);
        addrd->targeta_type = scansm->own_addr_type & 1;
    }
#endif
}
   24008:	bd38      	pop	{r3, r4, r5, pc}
   2400a:	460c      	mov	r4, r1
        addrd->targeta = ble_ll_get_our_devaddr(scansm->own_addr_type & 1);
   2400c:	4d06      	ldr	r5, [pc, #24]	; (24028 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x54>)
   2400e:	7868      	ldrb	r0, [r5, #1]
   24010:	f000 0001 	and.w	r0, r0, #1
   24014:	f7f9 f820 	bl	1d058 <ble_ll_get_our_devaddr>
   24018:	60e0      	str	r0, [r4, #12]
        addrd->targeta_type = scansm->own_addr_type & 1;
   2401a:	786b      	ldrb	r3, [r5, #1]
   2401c:	f003 0301 	and.w	r3, r3, #1
   24020:	7223      	strb	r3, [r4, #8]
}
   24022:	e7f1      	b.n	24008 <ble_ll_scan_rx_pkt_in_restore_addr_data+0x34>
   24024:	20008a40 	.word	0x20008a40
   24028:	20008bc4 	.word	0x20008bc4

0002402c <ble_ll_scan_dup_check_legacy>:
{
   2402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2402e:	460e      	mov	r6, r1
   24030:	4617      	mov	r7, r2
    type = BLE_LL_SCAN_ENTRY_TYPE_LEGACY(addr_type);
   24032:	f000 0501 	and.w	r5, r0, #1
    TAILQ_FOREACH(e, &g_scan_dup_list, link) {
   24036:	4b39      	ldr	r3, [pc, #228]	; (2411c <ble_ll_scan_dup_check_legacy+0xf0>)
   24038:	681c      	ldr	r4, [r3, #0]
   2403a:	e000      	b.n	2403e <ble_ll_scan_dup_check_legacy+0x12>
   2403c:	68a4      	ldr	r4, [r4, #8]
   2403e:	b14c      	cbz	r4, 24054 <ble_ll_scan_dup_check_legacy+0x28>
        if ((e->type == type) && !memcmp(e->addr, addr, 6)) {
   24040:	7823      	ldrb	r3, [r4, #0]
   24042:	42ab      	cmp	r3, r5
   24044:	d1fa      	bne.n	2403c <ble_ll_scan_dup_check_legacy+0x10>
   24046:	2206      	movs	r2, #6
   24048:	4631      	mov	r1, r6
   2404a:	1c60      	adds	r0, r4, #1
   2404c:	f7e7 fb8a 	bl	b764 <memcmp>
   24050:	2800      	cmp	r0, #0
   24052:	d1f3      	bne.n	2403c <ble_ll_scan_dup_check_legacy+0x10>
    if (e) {
   24054:	2c00      	cmp	r4, #0
   24056:	d02d      	beq.n	240b4 <ble_ll_scan_dup_check_legacy+0x88>
        if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   24058:	2f01      	cmp	r7, #1
   2405a:	d01a      	beq.n	24092 <ble_ll_scan_dup_check_legacy+0x66>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   2405c:	2f04      	cmp	r7, #4
   2405e:	d01c      	beq.n	2409a <ble_ll_scan_dup_check_legacy+0x6e>
            rc = e->flags & BLE_LL_SCAN_DUP_F_ADV_REPORT_SENT;
   24060:	79e0      	ldrb	r0, [r4, #7]
   24062:	f000 0001 	and.w	r0, r0, #1
    if (e != TAILQ_FIRST(&g_scan_dup_list)) {
   24066:	4b2d      	ldr	r3, [pc, #180]	; (2411c <ble_ll_scan_dup_check_legacy+0xf0>)
   24068:	681b      	ldr	r3, [r3, #0]
   2406a:	429c      	cmp	r4, r3
   2406c:	d010      	beq.n	24090 <ble_ll_scan_dup_check_legacy+0x64>
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   2406e:	68a3      	ldr	r3, [r4, #8]
   24070:	b1bb      	cbz	r3, 240a2 <ble_ll_scan_dup_check_legacy+0x76>
   24072:	68e2      	ldr	r2, [r4, #12]
   24074:	60da      	str	r2, [r3, #12]
   24076:	68e3      	ldr	r3, [r4, #12]
   24078:	68a2      	ldr	r2, [r4, #8]
   2407a:	601a      	str	r2, [r3, #0]
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   2407c:	4b27      	ldr	r3, [pc, #156]	; (2411c <ble_ll_scan_dup_check_legacy+0xf0>)
   2407e:	681b      	ldr	r3, [r3, #0]
   24080:	60a3      	str	r3, [r4, #8]
   24082:	b193      	cbz	r3, 240aa <ble_ll_scan_dup_check_legacy+0x7e>
   24084:	f104 0208 	add.w	r2, r4, #8
   24088:	60da      	str	r2, [r3, #12]
   2408a:	4b24      	ldr	r3, [pc, #144]	; (2411c <ble_ll_scan_dup_check_legacy+0xf0>)
   2408c:	601c      	str	r4, [r3, #0]
   2408e:	60e3      	str	r3, [r4, #12]
}
   24090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            rc = e->flags & BLE_LL_SCAN_DUP_F_DIR_ADV_REPORT_SENT;
   24092:	79e0      	ldrb	r0, [r4, #7]
   24094:	f000 0002 	and.w	r0, r0, #2
   24098:	e7e5      	b.n	24066 <ble_ll_scan_dup_check_legacy+0x3a>
            rc = e->flags & BLE_LL_SCAN_DUP_F_SCAN_RSP_SENT;
   2409a:	79e0      	ldrb	r0, [r4, #7]
   2409c:	f000 0004 	and.w	r0, r0, #4
   240a0:	e7e1      	b.n	24066 <ble_ll_scan_dup_check_legacy+0x3a>
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   240a2:	68e2      	ldr	r2, [r4, #12]
   240a4:	4b1d      	ldr	r3, [pc, #116]	; (2411c <ble_ll_scan_dup_check_legacy+0xf0>)
   240a6:	605a      	str	r2, [r3, #4]
   240a8:	e7e5      	b.n	24076 <ble_ll_scan_dup_check_legacy+0x4a>
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   240aa:	f104 0308 	add.w	r3, r4, #8
   240ae:	4a1b      	ldr	r2, [pc, #108]	; (2411c <ble_ll_scan_dup_check_legacy+0xf0>)
   240b0:	6053      	str	r3, [r2, #4]
   240b2:	e7ea      	b.n	2408a <ble_ll_scan_dup_check_legacy+0x5e>
    e = os_memblock_get(&g_scan_dup_pool);
   240b4:	481a      	ldr	r0, [pc, #104]	; (24120 <ble_ll_scan_dup_check_legacy+0xf4>)
   240b6:	f7e6 fce2 	bl	aa7e <os_memblock_get>
    if (!e) {
   240ba:	4603      	mov	r3, r0
   240bc:	b1c8      	cbz	r0, 240f2 <ble_ll_scan_dup_check_legacy+0xc6>
    memset(e, 0, sizeof(*e));
   240be:	2200      	movs	r2, #0
   240c0:	601a      	str	r2, [r3, #0]
   240c2:	605a      	str	r2, [r3, #4]
   240c4:	609a      	str	r2, [r3, #8]
   240c6:	60da      	str	r2, [r3, #12]
        e->flags = 0;
   240c8:	71da      	strb	r2, [r3, #7]
        e->type = type;
   240ca:	461a      	mov	r2, r3
   240cc:	f802 5b01 	strb.w	r5, [r2], #1
        memcpy(e->addr, addr, 6);
   240d0:	6831      	ldr	r1, [r6, #0]
   240d2:	f8c3 1001 	str.w	r1, [r3, #1]
   240d6:	88b1      	ldrh	r1, [r6, #4]
   240d8:	8091      	strh	r1, [r2, #4]
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   240da:	4a10      	ldr	r2, [pc, #64]	; (2411c <ble_ll_scan_dup_check_legacy+0xf0>)
   240dc:	6812      	ldr	r2, [r2, #0]
   240de:	609a      	str	r2, [r3, #8]
   240e0:	b1ba      	cbz	r2, 24112 <ble_ll_scan_dup_check_legacy+0xe6>
   240e2:	f103 0108 	add.w	r1, r3, #8
   240e6:	60d1      	str	r1, [r2, #12]
   240e8:	4a0c      	ldr	r2, [pc, #48]	; (2411c <ble_ll_scan_dup_check_legacy+0xf0>)
   240ea:	6013      	str	r3, [r2, #0]
   240ec:	60da      	str	r2, [r3, #12]
        rc = 0;
   240ee:	2000      	movs	r0, #0
    return rc;
   240f0:	e7ce      	b.n	24090 <ble_ll_scan_dup_check_legacy+0x64>
        e = TAILQ_LAST(&g_scan_dup_list, ble_ll_scan_dup_list);
   240f2:	4b0a      	ldr	r3, [pc, #40]	; (2411c <ble_ll_scan_dup_check_legacy+0xf0>)
   240f4:	685b      	ldr	r3, [r3, #4]
   240f6:	685b      	ldr	r3, [r3, #4]
   240f8:	681b      	ldr	r3, [r3, #0]
        TAILQ_REMOVE(&g_scan_dup_list, e, link);
   240fa:	689a      	ldr	r2, [r3, #8]
   240fc:	b12a      	cbz	r2, 2410a <ble_ll_scan_dup_check_legacy+0xde>
   240fe:	68d9      	ldr	r1, [r3, #12]
   24100:	60d1      	str	r1, [r2, #12]
   24102:	68da      	ldr	r2, [r3, #12]
   24104:	6899      	ldr	r1, [r3, #8]
   24106:	6011      	str	r1, [r2, #0]
   24108:	e7d9      	b.n	240be <ble_ll_scan_dup_check_legacy+0x92>
   2410a:	68d9      	ldr	r1, [r3, #12]
   2410c:	4a03      	ldr	r2, [pc, #12]	; (2411c <ble_ll_scan_dup_check_legacy+0xf0>)
   2410e:	6051      	str	r1, [r2, #4]
   24110:	e7f7      	b.n	24102 <ble_ll_scan_dup_check_legacy+0xd6>
        TAILQ_INSERT_HEAD(&g_scan_dup_list, e, link);
   24112:	f103 0208 	add.w	r2, r3, #8
   24116:	4901      	ldr	r1, [pc, #4]	; (2411c <ble_ll_scan_dup_check_legacy+0xf0>)
   24118:	604a      	str	r2, [r1, #4]
   2411a:	e7e5      	b.n	240e8 <ble_ll_scan_dup_check_legacy+0xbc>
   2411c:	20008c4c 	.word	0x20008c4c
   24120:	20008cd4 	.word	0x20008cd4

00024124 <ble_ll_hci_send_dir_adv_report>:
{
   24124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24126:	4605      	mov	r5, r0
   24128:	460f      	mov	r7, r1
   2412a:	4614      	mov	r4, r2
   2412c:	461e      	mov	r6, r3
    if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT)) {
   2412e:	200b      	movs	r0, #11
   24130:	f7fe fcd0 	bl	22ad4 <ble_ll_hci_is_le_event_enabled>
   24134:	b1f8      	cbz	r0, 24176 <ble_ll_hci_send_dir_adv_report+0x52>
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   24136:	2001      	movs	r0, #1
   24138:	f7f2 f9e8 	bl	1650c <ble_hci_trans_buf_alloc>
    if (!hci_ev) {
   2413c:	b1f0      	cbz	r0, 2417c <ble_ll_hci_send_dir_adv_report+0x58>
    hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   2413e:	223e      	movs	r2, #62	; 0x3e
   24140:	7002      	strb	r2, [r0, #0]
    hci_ev->length = sizeof(*ev) + sizeof(*(ev->reports));
   24142:	2212      	movs	r2, #18
   24144:	7042      	strb	r2, [r0, #1]
    ev->subev_code = BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT;
   24146:	220b      	movs	r2, #11
   24148:	7082      	strb	r2, [r0, #2]
    ev->num_reports = 1;
   2414a:	2201      	movs	r2, #1
   2414c:	70c2      	strb	r2, [r0, #3]
    ev->reports[0].type = BLE_HCI_ADV_RPT_EVTYPE_DIR_IND;
   2414e:	7102      	strb	r2, [r0, #4]
    ev->reports[0].addr_type = addr_type;
   24150:	7147      	strb	r7, [r0, #5]
    memcpy(ev->reports[0].addr, addr, BLE_DEV_ADDR_LEN);
   24152:	682a      	ldr	r2, [r5, #0]
   24154:	f8c0 2006 	str.w	r2, [r0, #6]
   24158:	88aa      	ldrh	r2, [r5, #4]
   2415a:	8142      	strh	r2, [r0, #10]
    ev->reports[0].dir_addr_type = inita_type;
   2415c:	7306      	strb	r6, [r0, #12]
    memcpy(ev->reports[0].dir_addr, inita, BLE_DEV_ADDR_LEN);
   2415e:	6822      	ldr	r2, [r4, #0]
   24160:	f8c0 200d 	str.w	r2, [r0, #13]
   24164:	88a2      	ldrh	r2, [r4, #4]
   24166:	f8a0 2011 	strh.w	r2, [r0, #17]
    ev->reports[0].rssi = rssi;
   2416a:	f99d 2018 	ldrsb.w	r2, [sp, #24]
   2416e:	74c2      	strb	r2, [r0, #19]
    return ble_ll_hci_event_send(hci_ev);
   24170:	f7fe fc0d 	bl	2298e <ble_ll_hci_event_send>
}
   24174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return -1;
   24176:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2417a:	e7fb      	b.n	24174 <ble_ll_hci_send_dir_adv_report+0x50>
        return -1;
   2417c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24180:	e7f8      	b.n	24174 <ble_ll_hci_send_dir_adv_report+0x50>

00024182 <ble_ll_hci_send_adv_report>:
{
   24182:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24186:	4681      	mov	r9, r0
   24188:	460e      	mov	r6, r1
   2418a:	4690      	mov	r8, r2
   2418c:	461f      	mov	r7, r3
   2418e:	f89d 5020 	ldrb.w	r5, [sp, #32]
    if (!ble_ll_hci_is_le_event_enabled(BLE_HCI_LE_SUBEV_ADV_RPT)) {
   24192:	2002      	movs	r0, #2
   24194:	f7fe fc9e 	bl	22ad4 <ble_ll_hci_is_le_event_enabled>
   24198:	b360      	cbz	r0, 241f4 <ble_ll_hci_send_adv_report+0x72>
    if ((sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len + 1) > BLE_HCI_MAX_DATA_LEN) {
   2419a:	f105 030c 	add.w	r3, r5, #12
   2419e:	2b44      	cmp	r3, #68	; 0x44
   241a0:	d82b      	bhi.n	241fa <ble_ll_hci_send_adv_report+0x78>
    hci_ev = (void *) ble_hci_trans_buf_alloc(BLE_HCI_TRANS_BUF_EVT_LO);
   241a2:	2001      	movs	r0, #1
   241a4:	f7f2 f9b2 	bl	1650c <ble_hci_trans_buf_alloc>
    if (!hci_ev) {
   241a8:	4604      	mov	r4, r0
   241aa:	b348      	cbz	r0, 24200 <ble_ll_hci_send_adv_report+0x7e>
    hci_ev->opcode = BLE_HCI_EVCODE_LE_META;
   241ac:	233e      	movs	r3, #62	; 0x3e
   241ae:	7003      	strb	r3, [r0, #0]
    hci_ev->length = sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len + 1;
   241b0:	f105 030c 	add.w	r3, r5, #12
   241b4:	7043      	strb	r3, [r0, #1]
    ev = (void *) hci_ev->data;
   241b6:	f100 0a02 	add.w	sl, r0, #2
    ev->subev_code = BLE_HCI_LE_SUBEV_ADV_RPT;
   241ba:	2302      	movs	r3, #2
   241bc:	7083      	strb	r3, [r0, #2]
    ev->num_reports = 1;
   241be:	2301      	movs	r3, #1
   241c0:	70c3      	strb	r3, [r0, #3]
    ev->reports[0].type = evtype;
   241c2:	f880 9004 	strb.w	r9, [r0, #4]
    ev->reports[0].addr_type = addr_type;
   241c6:	f880 8005 	strb.w	r8, [r0, #5]
    memcpy(ev->reports[0].addr, addr, BLE_DEV_ADDR_LEN);
   241ca:	6833      	ldr	r3, [r6, #0]
   241cc:	f8c0 3006 	str.w	r3, [r0, #6]
   241d0:	88b3      	ldrh	r3, [r6, #4]
   241d2:	8143      	strh	r3, [r0, #10]
    ev->reports[0].data_len = adv_data_len;
   241d4:	7305      	strb	r5, [r0, #12]
    os_mbuf_copydata(adv_data, 0, adv_data_len, ev->reports[0].data);
   241d6:	f100 030d 	add.w	r3, r0, #13
   241da:	462a      	mov	r2, r5
   241dc:	2100      	movs	r1, #0
   241de:	9809      	ldr	r0, [sp, #36]	; 0x24
   241e0:	f7e6 f900 	bl	a3e4 <os_mbuf_copydata>
    ev_rssi = (int8_t *) (hci_ev->data + sizeof(*ev) + sizeof(ev->reports[0]) + adv_data_len);
   241e4:	350b      	adds	r5, #11
    *ev_rssi = rssi;
   241e6:	f80a 7005 	strb.w	r7, [sl, r5]
    return ble_ll_hci_event_send(hci_ev);
   241ea:	4620      	mov	r0, r4
   241ec:	f7fe fbcf 	bl	2298e <ble_ll_hci_event_send>
}
   241f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return -1;
   241f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   241f8:	e7fa      	b.n	241f0 <ble_ll_hci_send_adv_report+0x6e>
        return -1;
   241fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   241fe:	e7f7      	b.n	241f0 <ble_ll_hci_send_adv_report+0x6e>
        return -1;
   24200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   24204:	e7f4      	b.n	241f0 <ble_ll_hci_send_adv_report+0x6e>

00024206 <ble_ll_scan_send_adv_report>:
{
   24206:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2420a:	b085      	sub	sp, #20
   2420c:	4605      	mov	r5, r0
   2420e:	468a      	mov	sl, r1
   24210:	4616      	mov	r6, r2
   24212:	9303      	str	r3, [sp, #12]
   24214:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   24218:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   2421c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    if (pdu_type == BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   24220:	2801      	cmp	r0, #1
   24222:	d030      	beq.n	24286 <ble_ll_scan_send_adv_report+0x80>
        if (pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) {
   24224:	b120      	cbz	r0, 24230 <ble_ll_scan_send_adv_report+0x2a>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_ADV_SCAN_IND) {
   24226:	2806      	cmp	r0, #6
   24228:	d038      	beq.n	2429c <ble_ll_scan_send_adv_report+0x96>
        } else if (pdu_type == BLE_ADV_PDU_TYPE_ADV_NONCONN_IND) {
   2422a:	2802      	cmp	r0, #2
   2422c:	d034      	beq.n	24298 <ble_ll_scan_send_adv_report+0x92>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_SCAN_RSP;
   2422e:	2504      	movs	r5, #4
        adv_data_len = om->om_data[1] - BLE_DEV_ADDR_LEN;
   24230:	f8d8 3000 	ldr.w	r3, [r8]
   24234:	785c      	ldrb	r4, [r3, #1]
   24236:	3c06      	subs	r4, #6
   24238:	b2e4      	uxtb	r4, r4
        os_mbuf_adj(om, BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN);
   2423a:	2108      	movs	r1, #8
   2423c:	4640      	mov	r0, r8
   2423e:	f7e6 f8fe 	bl	a43e <os_mbuf_adj>
    uint8_t subev = BLE_HCI_LE_SUBEV_ADV_RPT;
   24242:	f04f 0b02 	mov.w	fp, #2
    if (BLE_MBUF_HDR_RESOLVED(hdr)) {
   24246:	f8b9 3000 	ldrh.w	r3, [r9]
   2424a:	f413 6f80 	tst.w	r3, #1024	; 0x400
   2424e:	d001      	beq.n	24254 <ble_ll_scan_send_adv_report+0x4e>
        adva_type += 2;
   24250:	3602      	adds	r6, #2
   24252:	b2f6      	uxtb	r6, r6
    if (BLE_MBUF_HDR_TARGETA_RESOLVED(hdr)) {
   24254:	f413 5f00 	tst.w	r3, #8192	; 0x2000
   24258:	d001      	beq.n	2425e <ble_ll_scan_send_adv_report+0x58>
        inita_type += 2;
   2425a:	3702      	adds	r7, #2
   2425c:	b2ff      	uxtb	r7, r7
    if (subev == BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT) {
   2425e:	f1bb 0f0b 	cmp.w	fp, #11
   24262:	d021      	beq.n	242a8 <ble_ll_scan_send_adv_report+0xa2>
    rc = ble_ll_hci_send_adv_report(evtype, adva, adva_type, hdr->rxinfo.rssi,
   24264:	f999 3004 	ldrsb.w	r3, [r9, #4]
   24268:	f8cd 8004 	str.w	r8, [sp, #4]
   2426c:	9400      	str	r4, [sp, #0]
   2426e:	4632      	mov	r2, r6
   24270:	4651      	mov	r1, sl
   24272:	4628      	mov	r0, r5
   24274:	f7ff ff85 	bl	24182 <ble_ll_hci_send_adv_report>
    if (!rc && scansm->scan_filt_dups) {
   24278:	b910      	cbnz	r0, 24280 <ble_ll_scan_send_adv_report+0x7a>
   2427a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2427c:	789b      	ldrb	r3, [r3, #2]
   2427e:	b9eb      	cbnz	r3, 242bc <ble_ll_scan_send_adv_report+0xb6>
}
   24280:	b005      	add	sp, #20
   24282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (ble_ll_is_rpa(inita, inita_type)) {
   24286:	4639      	mov	r1, r7
   24288:	4618      	mov	r0, r3
   2428a:	f7f8 fe23 	bl	1ced4 <ble_ll_is_rpa>
   2428e:	b938      	cbnz	r0, 242a0 <ble_ll_scan_send_adv_report+0x9a>
        adv_data_len = 0;
   24290:	2400      	movs	r4, #0
    uint8_t subev = BLE_HCI_LE_SUBEV_ADV_RPT;
   24292:	f04f 0b02 	mov.w	fp, #2
   24296:	e7d6      	b.n	24246 <ble_ll_scan_send_adv_report+0x40>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_NONCONN_IND;
   24298:	2503      	movs	r5, #3
   2429a:	e7c9      	b.n	24230 <ble_ll_scan_send_adv_report+0x2a>
            evtype = BLE_HCI_ADV_RPT_EVTYPE_SCAN_IND;
   2429c:	2502      	movs	r5, #2
   2429e:	e7c7      	b.n	24230 <ble_ll_scan_send_adv_report+0x2a>
        adv_data_len = 0;
   242a0:	2400      	movs	r4, #0
            subev = BLE_HCI_LE_SUBEV_DIRECT_ADV_RPT;
   242a2:	f04f 0b0b 	mov.w	fp, #11
   242a6:	e7ce      	b.n	24246 <ble_ll_scan_send_adv_report+0x40>
        rc = ble_ll_hci_send_dir_adv_report(adva, adva_type, inita, inita_type,
   242a8:	f999 3004 	ldrsb.w	r3, [r9, #4]
   242ac:	9300      	str	r3, [sp, #0]
   242ae:	463b      	mov	r3, r7
   242b0:	9a03      	ldr	r2, [sp, #12]
   242b2:	4631      	mov	r1, r6
   242b4:	4650      	mov	r0, sl
   242b6:	f7ff ff35 	bl	24124 <ble_ll_hci_send_dir_adv_report>
        goto done;
   242ba:	e7dd      	b.n	24278 <ble_ll_scan_send_adv_report+0x72>
        ble_ll_scan_dup_update_legacy(adva_type, adva, subev, evtype);
   242bc:	462b      	mov	r3, r5
   242be:	465a      	mov	r2, fp
   242c0:	4651      	mov	r1, sl
   242c2:	4630      	mov	r0, r6
   242c4:	f7ff fc34 	bl	23b30 <ble_ll_scan_dup_update_legacy>
}
   242c8:	e7da      	b.n	24280 <ble_ll_scan_send_adv_report+0x7a>
	...

000242cc <ble_ll_scan_rx_pkt_in_on_legacy>:

static void
ble_ll_scan_rx_pkt_in_on_legacy(uint8_t pdu_type, struct os_mbuf *om,
                                struct ble_mbuf_hdr *hdr,
                                struct ble_ll_scan_addr_data *addrd)
{
   242cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   242d0:	b084      	sub	sp, #16
    struct ble_ll_scan_sm *scansm = &g_ble_ll_scan_sm;
    uint8_t *rxbuf = om->om_data;
   242d2:	680e      	ldr	r6, [r1, #0]
    bool send_hci_report;


    if (!BLE_MBUF_HDR_DEVMATCH(hdr) ||
   242d4:	8814      	ldrh	r4, [r2, #0]
   242d6:	f004 05c0 	and.w	r5, r4, #192	; 0xc0
   242da:	2dc0      	cmp	r5, #192	; 0xc0
   242dc:	d002      	beq.n	242e4 <ble_ll_scan_rx_pkt_in_on_legacy+0x18>
    }

    if (BLE_MBUF_HDR_SCAN_RSP_RXD(hdr)) {
        ble_ll_scan_req_backoff(scansm, 1);
    }
}
   242de:	b004      	add	sp, #16
   242e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        !BLE_MBUF_HDR_CRC_OK(hdr) ||
   242e4:	f414 4f00 	tst.w	r4, #32768	; 0x8000
   242e8:	d1f9      	bne.n	242de <ble_ll_scan_rx_pkt_in_on_legacy+0x12>
        !scansm->scan_enabled) {
   242ea:	4c1a      	ldr	r4, [pc, #104]	; (24354 <ble_ll_scan_rx_pkt_in_on_legacy+0x88>)
   242ec:	7824      	ldrb	r4, [r4, #0]
        BLE_MBUF_HDR_IGNORED(hdr) ||
   242ee:	2c00      	cmp	r4, #0
   242f0:	d0f5      	beq.n	242de <ble_ll_scan_rx_pkt_in_on_legacy+0x12>
   242f2:	461f      	mov	r7, r3
   242f4:	4615      	mov	r5, r2
   242f6:	460c      	mov	r4, r1
   242f8:	4680      	mov	r8, r0
    ble_ll_scan_get_addr_data_from_legacy(pdu_type, rxbuf, addrd);
   242fa:	461a      	mov	r2, r3
   242fc:	4631      	mov	r1, r6
   242fe:	f7ff fb5f 	bl	239c0 <ble_ll_scan_get_addr_data_from_legacy>
    ble_ll_scan_rx_pkt_in_restore_addr_data(hdr, addrd);
   24302:	4639      	mov	r1, r7
   24304:	4628      	mov	r0, r5
   24306:	f7ff fe65 	bl	23fd4 <ble_ll_scan_rx_pkt_in_restore_addr_data>
    send_hci_report = !scansm->scan_filt_dups ||
   2430a:	4b12      	ldr	r3, [pc, #72]	; (24354 <ble_ll_scan_rx_pkt_in_on_legacy+0x88>)
   2430c:	789b      	ldrb	r3, [r3, #2]
   2430e:	b953      	cbnz	r3, 24326 <ble_ll_scan_rx_pkt_in_on_legacy+0x5a>
   24310:	2301      	movs	r3, #1
    if (send_hci_report) {
   24312:	b993      	cbnz	r3, 2433a <ble_ll_scan_rx_pkt_in_on_legacy+0x6e>
    if (BLE_MBUF_HDR_SCAN_RSP_RXD(hdr)) {
   24314:	882b      	ldrh	r3, [r5, #0]
   24316:	f013 0f08 	tst.w	r3, #8
   2431a:	d0e0      	beq.n	242de <ble_ll_scan_rx_pkt_in_on_legacy+0x12>
        ble_ll_scan_req_backoff(scansm, 1);
   2431c:	2101      	movs	r1, #1
   2431e:	480d      	ldr	r0, [pc, #52]	; (24354 <ble_ll_scan_rx_pkt_in_on_legacy+0x88>)
   24320:	f7ff fb79 	bl	23a16 <ble_ll_scan_req_backoff>
   24324:	e7db      	b.n	242de <ble_ll_scan_rx_pkt_in_on_legacy+0x12>
                      !ble_ll_scan_dup_check_legacy(addrd->adv_addr_type,
   24326:	4642      	mov	r2, r8
   24328:	6979      	ldr	r1, [r7, #20]
   2432a:	7c38      	ldrb	r0, [r7, #16]
   2432c:	f7ff fe7e 	bl	2402c <ble_ll_scan_dup_check_legacy>
    send_hci_report = !scansm->scan_filt_dups ||
   24330:	b108      	cbz	r0, 24336 <ble_ll_scan_rx_pkt_in_on_legacy+0x6a>
   24332:	2300      	movs	r3, #0
   24334:	e7ed      	b.n	24312 <ble_ll_scan_rx_pkt_in_on_legacy+0x46>
   24336:	2301      	movs	r3, #1
   24338:	e7eb      	b.n	24312 <ble_ll_scan_rx_pkt_in_on_legacy+0x46>
                                    addrd->adv_addr, addrd->adv_addr_type,
   2433a:	6979      	ldr	r1, [r7, #20]
                                    addrd->targeta, addrd->targeta_type,
   2433c:	68fb      	ldr	r3, [r7, #12]
        ble_ll_scan_send_adv_report(pdu_type,
   2433e:	7c3a      	ldrb	r2, [r7, #16]
   24340:	4804      	ldr	r0, [pc, #16]	; (24354 <ble_ll_scan_rx_pkt_in_on_legacy+0x88>)
   24342:	9003      	str	r0, [sp, #12]
   24344:	9502      	str	r5, [sp, #8]
   24346:	9401      	str	r4, [sp, #4]
   24348:	7a38      	ldrb	r0, [r7, #8]
   2434a:	9000      	str	r0, [sp, #0]
   2434c:	4640      	mov	r0, r8
   2434e:	f7ff ff5a 	bl	24206 <ble_ll_scan_send_adv_report>
   24352:	e7df      	b.n	24314 <ble_ll_scan_rx_pkt_in_on_legacy+0x48>
   24354:	20008bc4 	.word	0x20008bc4

00024358 <ble_ll_scan_sm_start>:
{
   24358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2435c:	4604      	mov	r4, r0
    if (!ble_ll_is_valid_own_addr_type(scansm->own_addr_type, g_random_addr)) {
   2435e:	4920      	ldr	r1, [pc, #128]	; (243e0 <ble_ll_scan_sm_start+0x88>)
   24360:	7840      	ldrb	r0, [r0, #1]
   24362:	f7f8 fe27 	bl	1cfb4 <ble_ll_is_valid_own_addr_type>
   24366:	2800      	cmp	r0, #0
   24368:	d037      	beq.n	243da <ble_ll_scan_sm_start+0x82>
    BLE_LL_ASSERT(scansm->scanp);
   2436a:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
   2436c:	b35d      	cbz	r5, 243c6 <ble_ll_scan_sm_start+0x6e>
    scanp_next = scansm->scanp_next;
   2436e:	6f26      	ldr	r6, [r4, #112]	; 0x70
    scansm->scan_enabled = 1;
   24370:	2301      	movs	r3, #1
   24372:	7023      	strb	r3, [r4, #0]
    scanp->scan_chan = BLE_PHY_ADV_CHAN_START;
   24374:	2325      	movs	r3, #37	; 0x25
   24376:	716b      	strb	r3, [r5, #5]
    if (scanp_next) {
   24378:	b106      	cbz	r6, 2437c <ble_ll_scan_sm_start+0x24>
        scanp_next->scan_chan = BLE_PHY_ADV_CHAN_START;
   2437a:	7173      	strb	r3, [r6, #5]
    scansm->upper_limit = 1;
   2437c:	2701      	movs	r7, #1
   2437e:	84a7      	strh	r7, [r4, #36]	; 0x24
    scansm->backoff_count = 1;
   24380:	84e7      	strh	r7, [r4, #38]	; 0x26
    scansm->scan_rsp_pending = 0;
   24382:	f04f 0800 	mov.w	r8, #0
   24386:	f884 8003 	strb.w	r8, [r4, #3]
    g_ble_ll_scan_num_rsp_advs = 0;
   2438a:	4b16      	ldr	r3, [pc, #88]	; (243e4 <ble_ll_scan_sm_start+0x8c>)
   2438c:	f883 8000 	strb.w	r8, [r3]
    os_mempool_clear(&g_scan_dup_pool);
   24390:	4815      	ldr	r0, [pc, #84]	; (243e8 <ble_ll_scan_sm_start+0x90>)
   24392:	f7e6 fb39 	bl	aa08 <os_mempool_clear>
    TAILQ_INIT(&g_scan_dup_list);
   24396:	4b15      	ldr	r3, [pc, #84]	; (243ec <ble_ll_scan_sm_start+0x94>)
   24398:	f8c3 8000 	str.w	r8, [r3]
   2439c:	605b      	str	r3, [r3, #4]
    scanp->timing.start_time = ble_ll_rfmgmt_enable_now();
   2439e:	f7ff fabb 	bl	23918 <ble_ll_rfmgmt_enable_now>
   243a2:	4601      	mov	r1, r0
   243a4:	6128      	str	r0, [r5, #16]
    ble_ll_rfmgmt_scan_changed(true, scanp->timing.start_time);
   243a6:	4638      	mov	r0, r7
   243a8:	f7ff fa6e 	bl	23888 <ble_ll_rfmgmt_scan_changed>
    if (scanp_next) {
   243ac:	b11e      	cbz	r6, 243b6 <ble_ll_scan_sm_start+0x5e>
        scanp_next->timing.start_time = scanp->timing.start_time +
   243ae:	692b      	ldr	r3, [r5, #16]
                                        scanp->timing.window;
   243b0:	68ea      	ldr	r2, [r5, #12]
        scanp_next->timing.start_time = scanp->timing.start_time +
   243b2:	4413      	add	r3, r2
   243b4:	6133      	str	r3, [r6, #16]
    os_cputime_timer_start(&scansm->scan_timer, scanp->timing.start_time);
   243b6:	6929      	ldr	r1, [r5, #16]
   243b8:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   243bc:	f7f7 fcbf 	bl	1bd3e <os_cputime_timer_start>
    return BLE_ERR_SUCCESS;
   243c0:	2000      	movs	r0, #0
}
   243c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    BLE_LL_ASSERT(scansm->scanp);
   243c6:	f7e3 fefb 	bl	81c0 <hal_debugger_connected>
   243ca:	b100      	cbz	r0, 243ce <ble_ll_scan_sm_start+0x76>
   243cc:	be01      	bkpt	0x0001
   243ce:	2300      	movs	r3, #0
   243d0:	461a      	mov	r2, r3
   243d2:	4619      	mov	r1, r3
   243d4:	4618      	mov	r0, r3
   243d6:	f7e5 fa89 	bl	98ec <__assert_func>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   243da:	2012      	movs	r0, #18
   243dc:	e7f1      	b.n	243c2 <ble_ll_scan_sm_start+0x6a>
   243de:	bf00      	nop
   243e0:	20008758 	.word	0x20008758
   243e4:	20008b5c 	.word	0x20008b5c
   243e8:	20008cd4 	.word	0x20008cd4
   243ec:	20008c4c 	.word	0x20008c4c

000243f0 <ble_ll_scan_common_init>:
    return g_ble_ll_scan_sm.scanp->scan_filt_policy & 1;
}

static void
ble_ll_scan_common_init(void)
{
   243f0:	b538      	push	{r3, r4, r5, lr}
    struct ble_ll_scan_params *scanp;
    int i;

    /* Clear state machine in case re-initialized */
    scansm = &g_ble_ll_scan_sm;
    memset(scansm, 0, sizeof(struct ble_ll_scan_sm));
   243f2:	4d1b      	ldr	r5, [pc, #108]	; (24460 <ble_ll_scan_common_init+0x70>)
   243f4:	2288      	movs	r2, #136	; 0x88
   243f6:	2100      	movs	r1, #0
   243f8:	4628      	mov	r0, r5
   243fa:	f7e7 fa00 	bl	b7fe <memset>

    /* Clear scan parameters in case re-initialized */
    memset(g_ble_ll_scan_params, 0, sizeof(g_ble_ll_scan_params));
   243fe:	4b19      	ldr	r3, [pc, #100]	; (24464 <ble_ll_scan_common_init+0x74>)
   24400:	2400      	movs	r4, #0
   24402:	601c      	str	r4, [r3, #0]
   24404:	605c      	str	r4, [r3, #4]
   24406:	609c      	str	r4, [r3, #8]
   24408:	60dc      	str	r4, [r3, #12]
   2440a:	611c      	str	r4, [r3, #16]
    ev->ev.ev_cb = (os_event_fn *)fn;
   2440c:	4b16      	ldr	r3, [pc, #88]	; (24468 <ble_ll_scan_common_init+0x78>)
   2440e:	632b      	str	r3, [r5, #48]	; 0x30
    ev->ev.ev_arg = arg;
   24410:	636d      	str	r5, [r5, #52]	; 0x34

    /* Initialize scanning window end event */
    ble_npl_event_init(&scansm->scan_sched_ev, ble_ll_scan_event_proc, scansm);

    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   24412:	2c00      	cmp	r4, #0
   24414:	dd13      	ble.n	2443e <ble_ll_scan_common_init+0x4e>
                        ble_ll_scan_time_hci_to_ticks(BLE_HCI_SCAN_ITVL_DEF);
        scanp->timing.window =
                        ble_ll_scan_time_hci_to_ticks(BLE_HCI_SCAN_WINDOW_DEF);
    }

    scansm->scanp_phys[PHY_UNCODED].phy = BLE_PHY_1M;
   24416:	4c12      	ldr	r4, [pc, #72]	; (24460 <ble_ll_scan_common_init+0x70>)
   24418:	2301      	movs	r3, #1
   2441a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    return os_time_get();
   2441e:	f7e6 ffd9 	bl	b3d4 <os_time_get>
    scansm->scanp_phys[PHY_CODED].phy = BLE_PHY_CODED;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    /* Make sure we'll generate new NRPA if necessary */
    scansm->scan_nrpa_timer = ble_npl_time_get();
   24422:	60e0      	str	r0, [r4, #12]
#endif

    /* Initialize scanning timer */
    os_cputime_timer_init(&scansm->scan_timer, ble_ll_scan_timer_cb, scansm);
   24424:	4622      	mov	r2, r4
   24426:	4911      	ldr	r1, [pc, #68]	; (2446c <ble_ll_scan_common_init+0x7c>)
   24428:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   2442c:	f7f7 fc69 	bl	1bd02 <os_cputime_timer_init>
    memset(ev, 0, sizeof(*ev));
   24430:	2300      	movs	r3, #0
   24432:	6563      	str	r3, [r4, #84]	; 0x54
   24434:	65e3      	str	r3, [r4, #92]	; 0x5c
   24436:	6623      	str	r3, [r4, #96]	; 0x60
    ev->ev.ev_cb = (os_event_fn *)fn;
   24438:	4b0d      	ldr	r3, [pc, #52]	; (24470 <ble_ll_scan_common_init+0x80>)
   2443a:	65a3      	str	r3, [r4, #88]	; 0x58
    os_cputime_timer_init(&scansm->period_timer, ble_ll_scan_period_timer_cb,
                                                                        scansm);
#endif

    ble_npl_event_init(&scansm->scan_interrupted_ev, ble_ll_scan_interrupted_event_cb, NULL);
}
   2443c:	bd38      	pop	{r3, r4, r5, pc}
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   2443e:	f242 7010 	movw	r0, #10000	; 0x2710
   24442:	f7f7 fc9b 	bl	1bd7c <os_cputime_usecs_to_ticks>
        scanp->timing.interval =
   24446:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2444a:	4d06      	ldr	r5, [pc, #24]	; (24464 <ble_ll_scan_common_init+0x74>)
   2444c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   24450:	60a8      	str	r0, [r5, #8]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   24452:	f242 7010 	movw	r0, #10000	; 0x2710
   24456:	f7f7 fc91 	bl	1bd7c <os_cputime_usecs_to_ticks>
        scanp->timing.window =
   2445a:	60e8      	str	r0, [r5, #12]
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   2445c:	3401      	adds	r4, #1
   2445e:	e7d8      	b.n	24412 <ble_ll_scan_common_init+0x22>
   24460:	20008bc4 	.word	0x20008bc4
   24464:	20008b60 	.word	0x20008b60
   24468:	00024475 	.word	0x00024475
   2446c:	00023eb1 	.word	0x00023eb1
   24470:	00024819 	.word	0x00024819

00024474 <ble_ll_scan_event_proc>:
{
   24474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return ev->ev.ev_arg;
   24476:	6884      	ldr	r4, [r0, #8]
    scanp = scansm->scanp;
   24478:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
    OS_ENTER_CRITICAL(sr);
   2447a:	f7e7 f829 	bl	b4d0 <os_arch_save_sr>
   2447e:	4605      	mov	r5, r0
    if (!scansm->scan_enabled) {
   24480:	7823      	ldrb	r3, [r4, #0]
   24482:	b153      	cbz	r3, 2449a <ble_ll_scan_event_proc+0x26>
    if (scansm->cur_aux_data || scansm->scan_rsp_pending) {
   24484:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   24486:	b90b      	cbnz	r3, 2448c <ble_ll_scan_event_proc+0x18>
   24488:	78e3      	ldrb	r3, [r4, #3]
   2448a:	b1a3      	cbz	r3, 244b6 <ble_ll_scan_event_proc+0x42>
        scansm->restart_timer_needed = 1;
   2448c:	2301      	movs	r3, #1
   2448e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
        OS_EXIT_CRITICAL(sr);
   24492:	4628      	mov	r0, r5
   24494:	f7e7 f822 	bl	b4dc <os_arch_restore_sr>
}
   24498:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        os_cputime_timer_stop(&scansm->scan_timer);
   2449a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   2449e:	f7f7 fc52 	bl	1bd46 <os_cputime_timer_stop>
        ble_ll_rfmgmt_scan_changed(false, 0);
   244a2:	2100      	movs	r1, #0
   244a4:	4608      	mov	r0, r1
   244a6:	f7ff f9ef 	bl	23888 <ble_ll_rfmgmt_scan_changed>
        ble_ll_rfmgmt_release();
   244aa:	f7ff fa1b 	bl	238e4 <ble_ll_rfmgmt_release>
        OS_EXIT_CRITICAL(sr);
   244ae:	4628      	mov	r0, r5
   244b0:	f7e7 f814 	bl	b4dc <os_arch_restore_sr>
        return;
   244b4:	e7f0      	b.n	24498 <ble_ll_scan_event_proc+0x24>
    now = os_cputime_get32();
   244b6:	f7f7 fc4a 	bl	1bd4e <os_cputime_get32>
    inside_window = ble_ll_scan_is_inside_window(scanp, now);
   244ba:	4601      	mov	r1, r0
   244bc:	4630      	mov	r0, r6
   244be:	f7ff fa67 	bl	23990 <ble_ll_scan_is_inside_window>
   244c2:	4607      	mov	r7, r0
    ble_ll_rfmgmt_scan_changed(true, scanp->timing.start_time);
   244c4:	6931      	ldr	r1, [r6, #16]
   244c6:	2001      	movs	r0, #1
   244c8:	f7ff f9de 	bl	23888 <ble_ll_rfmgmt_scan_changed>
    if (inside_window) {
   244cc:	b167      	cbz	r7, 244e8 <ble_ll_scan_event_proc+0x74>
        next_proc_time = scanp->timing.start_time + scanp->timing.window;
   244ce:	6933      	ldr	r3, [r6, #16]
   244d0:	68f6      	ldr	r6, [r6, #12]
   244d2:	441e      	add	r6, r3
    switch (ble_ll_state_get()) {
   244d4:	f7f8 fece 	bl	1d274 <ble_ll_state_get>
   244d8:	2806      	cmp	r0, #6
   244da:	d824      	bhi.n	24526 <ble_ll_scan_event_proc+0xb2>
   244dc:	e8df f000 	tbb	[pc, r0]
   244e0:	061b0c0b 	.word	0x061b0c0b
   244e4:	230c      	.short	0x230c
   244e6:	0c          	.byte	0x0c
   244e7:	00          	.byte	0x00
        next_proc_time = scanp->timing.start_time;
   244e8:	6936      	ldr	r6, [r6, #16]
   244ea:	e7f3      	b.n	244d4 <ble_ll_scan_event_proc+0x60>
        ble_phy_disable();
   244ec:	f001 fe84 	bl	261f8 <ble_phy_disable>
        if (!inside_window) {
   244f0:	b16f      	cbz	r7, 2450e <ble_ll_scan_event_proc+0x9a>
        ble_ll_conn_reset_pending_aux_conn_rsp();
   244f2:	f7fa ffb9 	bl	1f468 <ble_ll_conn_reset_pending_aux_conn_rsp>
    if (start_scan) {
   244f6:	bb07      	cbnz	r7, 2453a <ble_ll_scan_event_proc+0xc6>
        ble_ll_rfmgmt_release();
   244f8:	f7ff f9f4 	bl	238e4 <ble_ll_rfmgmt_release>
    OS_EXIT_CRITICAL(sr);
   244fc:	4628      	mov	r0, r5
   244fe:	f7e6 ffed 	bl	b4dc <os_arch_restore_sr>
    os_cputime_timer_start(&scansm->scan_timer, next_proc_time);
   24502:	4631      	mov	r1, r6
   24504:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   24508:	f7f7 fc19 	bl	1bd3e <os_cputime_timer_start>
   2450c:	e7c4      	b.n	24498 <ble_ll_scan_event_proc+0x24>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   2450e:	2000      	movs	r0, #0
   24510:	f7f8 feaa 	bl	1d268 <ble_ll_state_set>
   24514:	e7ed      	b.n	244f2 <ble_ll_scan_event_proc+0x7e>
        ble_phy_disable();
   24516:	f001 fe6f 	bl	261f8 <ble_phy_disable>
        if (!inside_window) {
   2451a:	2f00      	cmp	r7, #0
   2451c:	d1eb      	bne.n	244f6 <ble_ll_scan_event_proc+0x82>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   2451e:	2000      	movs	r0, #0
   24520:	f7f8 fea2 	bl	1d268 <ble_ll_state_set>
   24524:	e7e7      	b.n	244f6 <ble_ll_scan_event_proc+0x82>
        BLE_LL_ASSERT(0);
   24526:	f7e3 fe4b 	bl	81c0 <hal_debugger_connected>
   2452a:	b100      	cbz	r0, 2452e <ble_ll_scan_event_proc+0xba>
   2452c:	be01      	bkpt	0x0001
   2452e:	2300      	movs	r3, #0
   24530:	461a      	mov	r2, r3
   24532:	4619      	mov	r1, r3
   24534:	4618      	mov	r0, r3
   24536:	f7e5 f9d9 	bl	98ec <__assert_func>
        ble_ll_scan_start(scansm, NULL);
   2453a:	2100      	movs	r1, #0
   2453c:	4620      	mov	r0, r4
   2453e:	f7ff fcbd 	bl	23ebc <ble_ll_scan_start>
   24542:	e7db      	b.n	244fc <ble_ll_scan_event_proc+0x88>

00024544 <ble_ll_scan_halt>:
{
   24544:	b508      	push	{r3, lr}
    if (scansm->scan_rsp_pending) {
   24546:	4b05      	ldr	r3, [pc, #20]	; (2455c <ble_ll_scan_halt+0x18>)
   24548:	78db      	ldrb	r3, [r3, #3]
   2454a:	b903      	cbnz	r3, 2454e <ble_ll_scan_halt+0xa>
}
   2454c:	bd08      	pop	{r3, pc}
        scansm->scan_rsp_pending = 0;
   2454e:	4803      	ldr	r0, [pc, #12]	; (2455c <ble_ll_scan_halt+0x18>)
   24550:	2100      	movs	r1, #0
   24552:	70c1      	strb	r1, [r0, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   24554:	f7ff fa5f 	bl	23a16 <ble_ll_scan_req_backoff>
}
   24558:	e7f8      	b.n	2454c <ble_ll_scan_halt+0x8>
   2455a:	bf00      	nop
   2455c:	20008bc4 	.word	0x20008bc4

00024560 <ble_ll_scan_sm_stop>:
{
   24560:	b538      	push	{r3, r4, r5, lr}
   24562:	4604      	mov	r4, r0
    os_cputime_timer_stop(&scansm->scan_timer);
   24564:	481c      	ldr	r0, [pc, #112]	; (245d8 <ble_ll_scan_sm_stop+0x78>)
   24566:	f7f7 fbee 	bl	1bd46 <os_cputime_timer_stop>
    if (chk_disable) {
   2456a:	b9cc      	cbnz	r4, 245a0 <ble_ll_scan_sm_stop+0x40>
    OS_ENTER_CRITICAL(sr);
   2456c:	f7e6 ffb0 	bl	b4d0 <os_arch_save_sr>
   24570:	4604      	mov	r4, r0
    scansm->scan_enabled = 0;
   24572:	4b1a      	ldr	r3, [pc, #104]	; (245dc <ble_ll_scan_sm_stop+0x7c>)
   24574:	2200      	movs	r2, #0
   24576:	701a      	strb	r2, [r3, #0]
    scansm->restart_timer_needed = 0;
   24578:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    if (scansm->scan_rsp_pending) {
   2457c:	78db      	ldrb	r3, [r3, #3]
   2457e:	bb23      	cbnz	r3, 245ca <ble_ll_scan_sm_stop+0x6a>
    OS_EXIT_CRITICAL(sr);
   24580:	4620      	mov	r0, r4
   24582:	f7e6 ffab 	bl	b4dc <os_arch_restore_sr>
    OS_ENTER_CRITICAL(sr);
   24586:	f7e6 ffa3 	bl	b4d0 <os_arch_save_sr>
   2458a:	4604      	mov	r4, r0
    ble_ll_rfmgmt_scan_changed(false, 0);
   2458c:	2100      	movs	r1, #0
   2458e:	4608      	mov	r0, r1
   24590:	f7ff f97a 	bl	23888 <ble_ll_rfmgmt_scan_changed>
    ble_ll_rfmgmt_release();
   24594:	f7ff f9a6 	bl	238e4 <ble_ll_rfmgmt_release>
    OS_EXIT_CRITICAL(sr);
   24598:	4620      	mov	r0, r4
   2459a:	f7e6 ff9f 	bl	b4dc <os_arch_restore_sr>
}
   2459e:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   245a0:	f7e6 ff96 	bl	b4d0 <os_arch_save_sr>
   245a4:	4605      	mov	r5, r0
        lls = ble_ll_state_get();
   245a6:	f7f8 fe65 	bl	1d274 <ble_ll_state_get>
        if ((lls == BLE_LL_STATE_SCANNING) ||
   245aa:	2802      	cmp	r0, #2
   245ac:	d007      	beq.n	245be <ble_ll_scan_sm_stop+0x5e>
   245ae:	2803      	cmp	r0, #3
   245b0:	d003      	beq.n	245ba <ble_ll_scan_sm_stop+0x5a>
        OS_EXIT_CRITICAL(sr);
   245b2:	4628      	mov	r0, r5
   245b4:	f7e6 ff92 	bl	b4dc <os_arch_restore_sr>
   245b8:	e7d8      	b.n	2456c <ble_ll_scan_sm_stop+0xc>
                        (lls == BLE_LL_STATE_INITIATING && chk_disable == 1)) {
   245ba:	2c01      	cmp	r4, #1
   245bc:	d1f9      	bne.n	245b2 <ble_ll_scan_sm_stop+0x52>
            ble_phy_disable();
   245be:	f001 fe1b 	bl	261f8 <ble_phy_disable>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   245c2:	2000      	movs	r0, #0
   245c4:	f7f8 fe50 	bl	1d268 <ble_ll_state_set>
   245c8:	e7f3      	b.n	245b2 <ble_ll_scan_sm_stop+0x52>
        scansm->scan_rsp_pending = 0;
   245ca:	4804      	ldr	r0, [pc, #16]	; (245dc <ble_ll_scan_sm_stop+0x7c>)
   245cc:	4611      	mov	r1, r2
   245ce:	70c2      	strb	r2, [r0, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   245d0:	f7ff fa21 	bl	23a16 <ble_ll_scan_req_backoff>
   245d4:	e7d4      	b.n	24580 <ble_ll_scan_sm_stop+0x20>
   245d6:	bf00      	nop
   245d8:	20008c00 	.word	0x20008c00
   245dc:	20008bc4 	.word	0x20008bc4

000245e0 <ble_ll_scan_set_enable>:
    if ((filter_dups > 1) || (enable > 1)) {
   245e0:	2901      	cmp	r1, #1
   245e2:	f200 8086 	bhi.w	246f2 <ble_ll_scan_set_enable+0x112>
   245e6:	2801      	cmp	r0, #1
   245e8:	f200 8085 	bhi.w	246f6 <ble_ll_scan_set_enable+0x116>
{
   245ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!enable) {
   245ee:	b948      	cbnz	r0, 24604 <ble_ll_scan_set_enable+0x24>
        if (scansm->scan_enabled) {
   245f0:	4b43      	ldr	r3, [pc, #268]	; (24700 <ble_ll_scan_set_enable+0x120>)
   245f2:	781b      	ldrb	r3, [r3, #0]
   245f4:	b90b      	cbnz	r3, 245fa <ble_ll_scan_set_enable+0x1a>
        return BLE_ERR_SUCCESS;
   245f6:	2000      	movs	r0, #0
}
   245f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ble_ll_scan_sm_stop(1);
   245fa:	2001      	movs	r0, #1
   245fc:	f7ff ffb0 	bl	24560 <ble_ll_scan_sm_stop>
        return BLE_ERR_SUCCESS;
   24600:	2000      	movs	r0, #0
   24602:	e7f9      	b.n	245f8 <ble_ll_scan_set_enable+0x18>
    if (scansm->scan_enabled) {
   24604:	4b3e      	ldr	r3, [pc, #248]	; (24700 <ble_ll_scan_set_enable+0x120>)
   24606:	781b      	ldrb	r3, [r3, #0]
   24608:	b9f3      	cbnz	r3, 24648 <ble_ll_scan_set_enable+0x68>
    scansm->scan_filt_dups = filter_dups;
   2460a:	4a3d      	ldr	r2, [pc, #244]	; (24700 <ble_ll_scan_set_enable+0x120>)
   2460c:	7091      	strb	r1, [r2, #2]
    scansm->scanp = NULL;
   2460e:	2300      	movs	r3, #0
   24610:	66d3      	str	r3, [r2, #108]	; 0x6c
    scansm->scanp_next = NULL;
   24612:	6713      	str	r3, [r2, #112]	; 0x70
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   24614:	2b00      	cmp	r3, #0
   24616:	dd1e      	ble.n	24656 <ble_ll_scan_set_enable+0x76>
    if (!scansm->scanp) {
   24618:	4b39      	ldr	r3, [pc, #228]	; (24700 <ble_ll_scan_set_enable+0x120>)
   2461a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   2461c:	2b00      	cmp	r3, #0
   2461e:	d04d      	beq.n	246bc <ble_ll_scan_set_enable+0xdc>
    rc = ble_ll_scan_sm_start(scansm);
   24620:	4837      	ldr	r0, [pc, #220]	; (24700 <ble_ll_scan_set_enable+0x120>)
   24622:	f7ff fe99 	bl	24358 <ble_ll_scan_sm_start>
    return rc;
   24626:	e7e7      	b.n	245f8 <ble_ll_scan_set_enable+0x18>
            if (scanp_phy->configured &&
   24628:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   2462c:	0090      	lsls	r0, r2, #2
   2462e:	4a34      	ldr	r2, [pc, #208]	; (24700 <ble_ll_scan_set_enable+0x120>)
   24630:	4402      	add	r2, r0
   24632:	f892 2077 	ldrb.w	r2, [r2, #119]	; 0x77
   24636:	b12a      	cbz	r2, 24644 <ble_ll_scan_set_enable+0x64>
                                scanp_phy->scan_type == BLE_SCAN_TYPE_INITIATE) {
   24638:	4a31      	ldr	r2, [pc, #196]	; (24700 <ble_ll_scan_set_enable+0x120>)
   2463a:	4402      	add	r2, r0
   2463c:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
            if (scanp_phy->configured &&
   24640:	2a02      	cmp	r2, #2
   24642:	d05a      	beq.n	246fa <ble_ll_scan_set_enable+0x11a>
        for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   24644:	3301      	adds	r3, #1
   24646:	e000      	b.n	2464a <ble_ll_scan_set_enable+0x6a>
   24648:	2300      	movs	r3, #0
   2464a:	2b00      	cmp	r3, #0
   2464c:	ddec      	ble.n	24628 <ble_ll_scan_set_enable+0x48>
        scansm->scan_filt_dups = filter_dups;
   2464e:	4b2c      	ldr	r3, [pc, #176]	; (24700 <ble_ll_scan_set_enable+0x120>)
   24650:	7099      	strb	r1, [r3, #2]
        return BLE_ERR_SUCCESS;
   24652:	2000      	movs	r0, #0
   24654:	e7d0      	b.n	245f8 <ble_ll_scan_set_enable+0x18>
        scanp_phy = &scansm->scanp_phys[i];
   24656:	009a      	lsls	r2, r3, #2
   24658:	18d0      	adds	r0, r2, r3
   2465a:	0081      	lsls	r1, r0, #2
   2465c:	3170      	adds	r1, #112	; 0x70
   2465e:	4828      	ldr	r0, [pc, #160]	; (24700 <ble_ll_scan_set_enable+0x120>)
   24660:	4401      	add	r1, r0
   24662:	1d0e      	adds	r6, r1, #4
        if (!scanp->configured) {
   24664:	441a      	add	r2, r3
   24666:	0091      	lsls	r1, r2, #2
   24668:	4a26      	ldr	r2, [pc, #152]	; (24704 <ble_ll_scan_set_enable+0x124>)
   2466a:	440a      	add	r2, r1
   2466c:	78d1      	ldrb	r1, [r2, #3]
   2466e:	b1f1      	cbz	r1, 246ae <ble_ll_scan_set_enable+0xce>
        scanp_phy->configured = scanp->configured;
   24670:	4684      	mov	ip, r0
   24672:	009a      	lsls	r2, r3, #2
   24674:	18d0      	adds	r0, r2, r3
   24676:	0084      	lsls	r4, r0, #2
   24678:	4620      	mov	r0, r4
   2467a:	4464      	add	r4, ip
   2467c:	f884 1077 	strb.w	r1, [r4, #119]	; 0x77
        scanp_phy->scan_type = scanp->scan_type;
   24680:	4d20      	ldr	r5, [pc, #128]	; (24704 <ble_ll_scan_set_enable+0x124>)
   24682:	4405      	add	r5, r0
   24684:	792a      	ldrb	r2, [r5, #4]
   24686:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
        scanp_phy->timing = scanp->timing;
   2468a:	f105 0208 	add.w	r2, r5, #8
   2468e:	f104 077c 	add.w	r7, r4, #124	; 0x7c
   24692:	ca07      	ldmia	r2, {r0, r1, r2}
   24694:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        scanp_phy->scan_filt_policy = scanp->scan_filt_policy;
   24698:	78aa      	ldrb	r2, [r5, #2]
   2469a:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
        scanp_phy->own_addr_type = scanp->own_addr_type;
   2469e:	786a      	ldrb	r2, [r5, #1]
   246a0:	f884 2075 	strb.w	r2, [r4, #117]	; 0x75
        if (!scansm->scanp) {
   246a4:	f8dc 106c 	ldr.w	r1, [ip, #108]	; 0x6c
   246a8:	b119      	cbz	r1, 246b2 <ble_ll_scan_set_enable+0xd2>
            scansm->scanp_next = scanp_phy;
   246aa:	4a15      	ldr	r2, [pc, #84]	; (24700 <ble_ll_scan_set_enable+0x120>)
   246ac:	6716      	str	r6, [r2, #112]	; 0x70
    for (i = 0; i < BLE_LL_SCAN_PHY_NUMBER; i++) {
   246ae:	3301      	adds	r3, #1
   246b0:	e7b0      	b.n	24614 <ble_ll_scan_set_enable+0x34>
            scansm->scanp = scanp_phy;
   246b2:	f8cc 606c 	str.w	r6, [ip, #108]	; 0x6c
            scansm->own_addr_type = scanp_phy->own_addr_type;
   246b6:	f88c 2001 	strb.w	r2, [ip, #1]
   246ba:	e7f8      	b.n	246ae <ble_ll_scan_set_enable+0xce>
        scansm->scanp = &scansm->scanp_phys[PHY_UNCODED];
   246bc:	4c10      	ldr	r4, [pc, #64]	; (24700 <ble_ll_scan_set_enable+0x120>)
   246be:	f104 0374 	add.w	r3, r4, #116	; 0x74
   246c2:	66e3      	str	r3, [r4, #108]	; 0x6c
        scansm->own_addr_type = BLE_ADDR_PUBLIC;
   246c4:	2500      	movs	r5, #0
   246c6:	7065      	strb	r5, [r4, #1]
        scanp_phy->configured = 1;
   246c8:	2301      	movs	r3, #1
   246ca:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
        scanp_phy->scan_type = BLE_SCAN_TYPE_PASSIVE;
   246ce:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   246d2:	f242 7010 	movw	r0, #10000	; 0x2710
   246d6:	f7f7 fb51 	bl	1bd7c <os_cputime_usecs_to_ticks>
        scanp_phy->timing.interval =
   246da:	67e0      	str	r0, [r4, #124]	; 0x7c
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   246dc:	f242 7010 	movw	r0, #10000	; 0x2710
   246e0:	f7f7 fb4c 	bl	1bd7c <os_cputime_usecs_to_ticks>
        scanp_phy->timing.window =
   246e4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
        scanp_phy->scan_filt_policy = BLE_HCI_SCAN_FILT_NO_WL;
   246e8:	f884 5076 	strb.w	r5, [r4, #118]	; 0x76
        scanp_phy->own_addr_type = BLE_ADDR_PUBLIC;
   246ec:	f884 5075 	strb.w	r5, [r4, #117]	; 0x75
   246f0:	e796      	b.n	24620 <ble_ll_scan_set_enable+0x40>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   246f2:	2012      	movs	r0, #18
   246f4:	4770      	bx	lr
   246f6:	2012      	movs	r0, #18
}
   246f8:	4770      	bx	lr
                return BLE_ERR_CMD_DISALLOWED;
   246fa:	200c      	movs	r0, #12
   246fc:	e77c      	b.n	245f8 <ble_ll_scan_set_enable+0x18>
   246fe:	bf00      	nop
   24700:	20008bc4 	.word	0x20008bc4
   24704:	20008b60 	.word	0x20008b60

00024708 <ble_ll_scan_rx_isr_start>:
{
   24708:	b510      	push	{r4, lr}
    scanp = scansm->scanp;
   2470a:	4b14      	ldr	r3, [pc, #80]	; (2475c <ble_ll_scan_rx_isr_start+0x54>)
   2470c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
    switch (scanp->scan_type) {
   2470e:	791b      	ldrb	r3, [r3, #4]
   24710:	2b01      	cmp	r3, #1
   24712:	d120      	bne.n	24756 <ble_ll_scan_rx_isr_start+0x4e>
        if ((pdu_type == BLE_ADV_PDU_TYPE_ADV_IND) ||
   24714:	b118      	cbz	r0, 2471e <ble_ll_scan_rx_isr_start+0x16>
   24716:	2806      	cmp	r0, #6
   24718:	d011      	beq.n	2473e <ble_ll_scan_rx_isr_start+0x36>
    rc = 0;
   2471a:	2400      	movs	r4, #0
   2471c:	e000      	b.n	24720 <ble_ll_scan_rx_isr_start+0x18>
            rc = 1;
   2471e:	2401      	movs	r4, #1
        if (scansm->scan_rsp_pending) {
   24720:	4b0e      	ldr	r3, [pc, #56]	; (2475c <ble_ll_scan_rx_isr_start+0x54>)
   24722:	78db      	ldrb	r3, [r3, #3]
   24724:	b1c3      	cbz	r3, 24758 <ble_ll_scan_rx_isr_start+0x50>
            scansm->scan_rsp_pending = 0;
   24726:	4b0d      	ldr	r3, [pc, #52]	; (2475c <ble_ll_scan_rx_isr_start+0x54>)
   24728:	2200      	movs	r2, #0
   2472a:	70da      	strb	r2, [r3, #3]
            if (pdu_type == BLE_ADV_PDU_TYPE_SCAN_RSP) {
   2472c:	2804      	cmp	r0, #4
   2472e:	d008      	beq.n	24742 <ble_ll_scan_rx_isr_start+0x3a>
            } else if (pdu_type == BLE_ADV_PDU_TYPE_AUX_SCAN_RSP) {
   24730:	2807      	cmp	r0, #7
   24732:	d00b      	beq.n	2474c <ble_ll_scan_rx_isr_start+0x44>
                ble_ll_scan_req_backoff(scansm, 0);
   24734:	2100      	movs	r1, #0
   24736:	4809      	ldr	r0, [pc, #36]	; (2475c <ble_ll_scan_rx_isr_start+0x54>)
   24738:	f7ff f96d 	bl	23a16 <ble_ll_scan_req_backoff>
   2473c:	e00c      	b.n	24758 <ble_ll_scan_rx_isr_start+0x50>
            rc = 1;
   2473e:	2401      	movs	r4, #1
   24740:	e7ee      	b.n	24720 <ble_ll_scan_rx_isr_start+0x18>
                *rxflags |= BLE_MBUF_HDR_F_SCAN_RSP_RXD;
   24742:	880b      	ldrh	r3, [r1, #0]
   24744:	f043 0308 	orr.w	r3, r3, #8
   24748:	800b      	strh	r3, [r1, #0]
   2474a:	e005      	b.n	24758 <ble_ll_scan_rx_isr_start+0x50>
                *rxflags |= BLE_MBUF_HDR_F_SCAN_RSP_RXD;
   2474c:	880b      	ldrh	r3, [r1, #0]
   2474e:	f043 0308 	orr.w	r3, r3, #8
   24752:	800b      	strh	r3, [r1, #0]
   24754:	e000      	b.n	24758 <ble_ll_scan_rx_isr_start+0x50>
    rc = 0;
   24756:	2400      	movs	r4, #0
}
   24758:	4620      	mov	r0, r4
   2475a:	bd10      	pop	{r4, pc}
   2475c:	20008bc4 	.word	0x20008bc4

00024760 <ble_ll_scan_adv_decode_addr>:
    if (pdu_type != BLE_ADV_PDU_TYPE_ADV_EXT_IND &&
   24760:	1fc2      	subs	r2, r0, #7
   24762:	b2d2      	uxtb	r2, r2
   24764:	2a01      	cmp	r2, #1
   24766:	d924      	bls.n	247b2 <ble_ll_scan_adv_decode_addr+0x52>
{
   24768:	b410      	push	{r4}
        *addr_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_TXADD_MASK);
   2476a:	780a      	ldrb	r2, [r1, #0]
    if (txrxflag) {
   2476c:	f012 0f40 	tst.w	r2, #64	; 0x40
   24770:	d00e      	beq.n	24790 <ble_ll_scan_adv_decode_addr+0x30>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   24772:	2401      	movs	r4, #1
   24774:	9a01      	ldr	r2, [sp, #4]
   24776:	7014      	strb	r4, [r2, #0]
        *addr = rxbuf + BLE_LL_PDU_HDR_LEN;
   24778:	1c8a      	adds	r2, r1, #2
   2477a:	601a      	str	r2, [r3, #0]
        if (pdu_type != BLE_ADV_PDU_TYPE_ADV_DIRECT_IND) {
   2477c:	2801      	cmp	r0, #1
   2477e:	d009      	beq.n	24794 <ble_ll_scan_adv_decode_addr+0x34>
            *inita = NULL;
   24780:	2000      	movs	r0, #0
   24782:	9b02      	ldr	r3, [sp, #8]
   24784:	6018      	str	r0, [r3, #0]
            *inita_type = 0;
   24786:	9b03      	ldr	r3, [sp, #12]
   24788:	7018      	strb	r0, [r3, #0]
}
   2478a:	f85d 4b04 	ldr.w	r4, [sp], #4
   2478e:	4770      	bx	lr
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   24790:	2400      	movs	r4, #0
   24792:	e7ef      	b.n	24774 <ble_ll_scan_adv_decode_addr+0x14>
        *inita = rxbuf + BLE_LL_PDU_HDR_LEN + BLE_DEV_ADDR_LEN;
   24794:	f101 0308 	add.w	r3, r1, #8
   24798:	9a02      	ldr	r2, [sp, #8]
   2479a:	6013      	str	r3, [r2, #0]
    if (txrxflag) {
   2479c:	f991 3000 	ldrsb.w	r3, [r1]
   247a0:	2b00      	cmp	r3, #0
   247a2:	db04      	blt.n	247ae <ble_ll_scan_adv_decode_addr+0x4e>
    return BLE_HCI_ADV_OWN_ADDR_PUBLIC;
   247a4:	2300      	movs	r3, #0
        *inita_type = ble_ll_get_addr_type(rxbuf[0] & BLE_ADV_PDU_HDR_RXADD_MASK);
   247a6:	9a03      	ldr	r2, [sp, #12]
   247a8:	7013      	strb	r3, [r2, #0]
        return 0;
   247aa:	2000      	movs	r0, #0
   247ac:	e7ed      	b.n	2478a <ble_ll_scan_adv_decode_addr+0x2a>
        return BLE_HCI_ADV_OWN_ADDR_RANDOM;
   247ae:	2301      	movs	r3, #1
   247b0:	e7f9      	b.n	247a6 <ble_ll_scan_adv_decode_addr+0x46>
    return -1;
   247b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   247b6:	4770      	bx	lr

000247b8 <ble_ll_scan_chk_resume>:
{
   247b8:	b538      	push	{r3, r4, r5, lr}
    if (scansm->scan_enabled) {
   247ba:	4b16      	ldr	r3, [pc, #88]	; (24814 <ble_ll_scan_chk_resume+0x5c>)
   247bc:	781b      	ldrb	r3, [r3, #0]
   247be:	b903      	cbnz	r3, 247c2 <ble_ll_scan_chk_resume+0xa>
}
   247c0:	bd38      	pop	{r3, r4, r5, pc}
        OS_ENTER_CRITICAL(sr);
   247c2:	f7e6 fe85 	bl	b4d0 <os_arch_save_sr>
   247c6:	4604      	mov	r4, r0
        if (scansm->restart_timer_needed) {
   247c8:	4b12      	ldr	r3, [pc, #72]	; (24814 <ble_ll_scan_chk_resume+0x5c>)
   247ca:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   247ce:	b94b      	cbnz	r3, 247e4 <ble_ll_scan_chk_resume+0x2c>
        now = os_cputime_get32();
   247d0:	f7f7 fabd 	bl	1bd4e <os_cputime_get32>
   247d4:	4605      	mov	r5, r0
        if (ble_ll_state_get() == BLE_LL_STATE_STANDBY &&
   247d6:	f7f8 fd4d 	bl	1d274 <ble_ll_state_get>
   247da:	b170      	cbz	r0, 247fa <ble_ll_scan_chk_resume+0x42>
        OS_EXIT_CRITICAL(sr);
   247dc:	4620      	mov	r0, r4
   247de:	f7e6 fe7d 	bl	b4dc <os_arch_restore_sr>
   247e2:	e7ed      	b.n	247c0 <ble_ll_scan_chk_resume+0x8>
            scansm->restart_timer_needed = 0;
   247e4:	480b      	ldr	r0, [pc, #44]	; (24814 <ble_ll_scan_chk_resume+0x5c>)
   247e6:	2300      	movs	r3, #0
   247e8:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
            ble_ll_event_send(&scansm->scan_sched_ev);
   247ec:	302c      	adds	r0, #44	; 0x2c
   247ee:	f7f8 fd47 	bl	1d280 <ble_ll_event_send>
            OS_EXIT_CRITICAL(sr);
   247f2:	4620      	mov	r0, r4
   247f4:	f7e6 fe72 	bl	b4dc <os_arch_restore_sr>
            return;
   247f8:	e7e2      	b.n	247c0 <ble_ll_scan_chk_resume+0x8>
            ble_ll_scan_is_inside_window(scansm->scanp, now)) {
   247fa:	4629      	mov	r1, r5
   247fc:	4b05      	ldr	r3, [pc, #20]	; (24814 <ble_ll_scan_chk_resume+0x5c>)
   247fe:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
   24800:	f7ff f8c6 	bl	23990 <ble_ll_scan_is_inside_window>
        if (ble_ll_state_get() == BLE_LL_STATE_STANDBY &&
   24804:	2800      	cmp	r0, #0
   24806:	d0e9      	beq.n	247dc <ble_ll_scan_chk_resume+0x24>
            ble_ll_scan_start(scansm, NULL);
   24808:	2100      	movs	r1, #0
   2480a:	4802      	ldr	r0, [pc, #8]	; (24814 <ble_ll_scan_chk_resume+0x5c>)
   2480c:	f7ff fb56 	bl	23ebc <ble_ll_scan_start>
   24810:	e7e4      	b.n	247dc <ble_ll_scan_chk_resume+0x24>
   24812:	bf00      	nop
   24814:	20008bc4 	.word	0x20008bc4

00024818 <ble_ll_scan_interrupted_event_cb>:
{
   24818:	b508      	push	{r3, lr}
    if (!scansm->scan_enabled) {
   2481a:	4b07      	ldr	r3, [pc, #28]	; (24838 <ble_ll_scan_interrupted_event_cb+0x20>)
   2481c:	781b      	ldrb	r3, [r3, #0]
   2481e:	b123      	cbz	r3, 2482a <ble_ll_scan_interrupted_event_cb+0x12>
    if (scansm->scan_rsp_pending) {
   24820:	4b05      	ldr	r3, [pc, #20]	; (24838 <ble_ll_scan_interrupted_event_cb+0x20>)
   24822:	78db      	ldrb	r3, [r3, #3]
   24824:	b913      	cbnz	r3, 2482c <ble_ll_scan_interrupted_event_cb+0x14>
    ble_ll_scan_chk_resume();
   24826:	f7ff ffc7 	bl	247b8 <ble_ll_scan_chk_resume>
}
   2482a:	bd08      	pop	{r3, pc}
        scansm->scan_rsp_pending = 0;
   2482c:	4802      	ldr	r0, [pc, #8]	; (24838 <ble_ll_scan_interrupted_event_cb+0x20>)
   2482e:	2100      	movs	r1, #0
   24830:	70c1      	strb	r1, [r0, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   24832:	f7ff f8f0 	bl	23a16 <ble_ll_scan_req_backoff>
   24836:	e7f6      	b.n	24826 <ble_ll_scan_interrupted_event_cb+0xe>
   24838:	20008bc4 	.word	0x20008bc4

0002483c <ble_ll_scan_interrupted>:
{
   2483c:	b508      	push	{r3, lr}
    ble_ll_event_send(&scansm->scan_interrupted_ev);
   2483e:	3054      	adds	r0, #84	; 0x54
   24840:	f7f8 fd1e 	bl	1d280 <ble_ll_event_send>
}
   24844:	bd08      	pop	{r3, pc}
	...

00024848 <ble_ll_scan_rx_isr_end>:
{
   24848:	b5f0      	push	{r4, r5, r6, r7, lr}
   2484a:	b089      	sub	sp, #36	; 0x24
    if (rxpdu == NULL) {
   2484c:	b188      	cbz	r0, 24872 <ble_ll_scan_rx_isr_end+0x2a>
   2484e:	4605      	mov	r5, r0
   24850:	f100 0718 	add.w	r7, r0, #24
    rxbuf = rxpdu->om_data;
   24854:	6806      	ldr	r6, [r0, #0]
    pdu_type = rxbuf[0] & BLE_ADV_PDU_HDR_TYPE_MASK;
   24856:	7834      	ldrb	r4, [r6, #0]
   24858:	f004 040f 	and.w	r4, r4, #15
    if (!crcok) {
   2485c:	b349      	cbz	r1, 248b2 <ble_ll_scan_rx_isr_end+0x6a>
    addrd.rl = NULL;
   2485e:	2300      	movs	r3, #0
   24860:	9307      	str	r3, [sp, #28]
    switch (pdu_type) {
   24862:	2c06      	cmp	r4, #6
   24864:	d825      	bhi.n	248b2 <ble_ll_scan_rx_isr_end+0x6a>
   24866:	e8df f004 	tbb	[pc, r4]
   2486a:	0909      	.short	0x0909
   2486c:	24092409 	.word	0x24092409
   24870:	09          	.byte	0x09
   24871:	00          	.byte	0x00
        ble_ll_scan_interrupted(scansm);
   24872:	4816      	ldr	r0, [pc, #88]	; (248cc <ble_ll_scan_rx_isr_end+0x84>)
   24874:	f7ff ffe2 	bl	2483c <ble_ll_scan_interrupted>
        return 0;
   24878:	2000      	movs	r0, #0
   2487a:	e012      	b.n	248a2 <ble_ll_scan_rx_isr_end+0x5a>
        rc = ble_ll_scan_rx_isr_on_legacy(pdu_type, rxbuf, hdr, &addrd);
   2487c:	ab01      	add	r3, sp, #4
   2487e:	463a      	mov	r2, r7
   24880:	4631      	mov	r1, r6
   24882:	4620      	mov	r0, r4
   24884:	f7ff fa1a 	bl	23cbc <ble_ll_scan_rx_isr_on_legacy>
    if (rc == -1) {
   24888:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2488c:	d011      	beq.n	248b2 <ble_ll_scan_rx_isr_end+0x6a>
    } else if (rc == 1) {
   2488e:	2801      	cmp	r0, #1
   24890:	d109      	bne.n	248a6 <ble_ll_scan_rx_isr_end+0x5e>
        if (ble_ll_scan_send_scan_req(pdu_type, rxbuf, hdr, &addrd)) {
   24892:	ab01      	add	r3, sp, #4
   24894:	463a      	mov	r2, r7
   24896:	4631      	mov	r1, r6
   24898:	4620      	mov	r0, r4
   2489a:	f7ff facb 	bl	23e34 <ble_ll_scan_send_scan_req>
   2489e:	b110      	cbz	r0, 248a6 <ble_ll_scan_rx_isr_end+0x5e>
            return 0;
   248a0:	2000      	movs	r0, #0
}
   248a2:	b009      	add	sp, #36	; 0x24
   248a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   248a6:	2000      	movs	r0, #0
   248a8:	f7f8 fcde 	bl	1d268 <ble_ll_state_set>
    return -1;
   248ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   248b0:	e7f7      	b.n	248a2 <ble_ll_scan_rx_isr_end+0x5a>
    rxinfo->flags |= BLE_MBUF_HDR_F_IGNORED;
   248b2:	8b2b      	ldrh	r3, [r5, #24]
   248b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
   248b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
   248bc:	832b      	strh	r3, [r5, #24]
    ble_ll_state_set(BLE_LL_STATE_STANDBY);
   248be:	2000      	movs	r0, #0
   248c0:	f7f8 fcd2 	bl	1d268 <ble_ll_state_set>
    return -1;
   248c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   248c8:	e7eb      	b.n	248a2 <ble_ll_scan_rx_isr_end+0x5a>
   248ca:	bf00      	nop
   248cc:	20008bc4 	.word	0x20008bc4

000248d0 <ble_ll_scan_wfr_timer_exp>:
{
   248d0:	b510      	push	{r4, lr}
   248d2:	b082      	sub	sp, #8
    if (scansm->scan_rsp_pending) {
   248d4:	4b1b      	ldr	r3, [pc, #108]	; (24944 <ble_ll_scan_wfr_timer_exp+0x74>)
   248d6:	78db      	ldrb	r3, [r3, #3]
   248d8:	bb03      	cbnz	r3, 2491c <ble_ll_scan_wfr_timer_exp+0x4c>
    if (scansm->cur_aux_data) {
   248da:	4b1a      	ldr	r3, [pc, #104]	; (24944 <ble_ll_scan_wfr_timer_exp+0x74>)
   248dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   248de:	b1cb      	cbz	r3, 24914 <ble_ll_scan_wfr_timer_exp+0x44>
        ble_ll_scan_interrupted(scansm);
   248e0:	4c18      	ldr	r4, [pc, #96]	; (24944 <ble_ll_scan_wfr_timer_exp+0x74>)
   248e2:	4620      	mov	r0, r4
   248e4:	f7ff ffaa 	bl	2483c <ble_ll_scan_interrupted>
        ble_phy_disable();
   248e8:	f001 fc86 	bl	261f8 <ble_phy_disable>
        now = os_cputime_get32();
   248ec:	f7f7 fa2f 	bl	1bd4e <os_cputime_get32>
        if (!ble_ll_scan_is_inside_window(scansm->scanp, now)) {
   248f0:	4601      	mov	r1, r0
   248f2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   248f4:	f7ff f84c 	bl	23990 <ble_ll_scan_is_inside_window>
   248f8:	b1b0      	cbz	r0, 24928 <ble_ll_scan_wfr_timer_exp+0x58>
        ble_ll_get_chan_to_scan(scansm, &chan, &phy);
   248fa:	466a      	mov	r2, sp
   248fc:	f10d 0107 	add.w	r1, sp, #7
   24900:	4810      	ldr	r0, [pc, #64]	; (24944 <ble_ll_scan_wfr_timer_exp+0x74>)
   24902:	f7ff f823 	bl	2394c <ble_ll_get_chan_to_scan>
        rc = ble_phy_setchan(chan, BLE_ACCESS_ADDR_ADV, BLE_LL_CRCINIT_ADV);
   24906:	4a10      	ldr	r2, [pc, #64]	; (24948 <ble_ll_scan_wfr_timer_exp+0x78>)
   24908:	4910      	ldr	r1, [pc, #64]	; (2494c <ble_ll_scan_wfr_timer_exp+0x7c>)
   2490a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2490e:	f001 fc4d 	bl	261ac <ble_phy_setchan>
        BLE_LL_ASSERT(rc == 0);
   24912:	b960      	cbnz	r0, 2492e <ble_ll_scan_wfr_timer_exp+0x5e>
    ble_phy_restart_rx();
   24914:	f001 fe38 	bl	26588 <ble_phy_restart_rx>
}
   24918:	b002      	add	sp, #8
   2491a:	bd10      	pop	{r4, pc}
        scansm->scan_rsp_pending = 0;
   2491c:	4809      	ldr	r0, [pc, #36]	; (24944 <ble_ll_scan_wfr_timer_exp+0x74>)
   2491e:	2100      	movs	r1, #0
   24920:	70c1      	strb	r1, [r0, #3]
        ble_ll_scan_req_backoff(scansm, 0);
   24922:	f7ff f878 	bl	23a16 <ble_ll_scan_req_backoff>
   24926:	e7d8      	b.n	248da <ble_ll_scan_wfr_timer_exp+0xa>
            ble_ll_state_set(BLE_LL_STATE_STANDBY);
   24928:	f7f8 fc9e 	bl	1d268 <ble_ll_state_set>
   2492c:	e7f4      	b.n	24918 <ble_ll_scan_wfr_timer_exp+0x48>
        BLE_LL_ASSERT(rc == 0);
   2492e:	f7e3 fc47 	bl	81c0 <hal_debugger_connected>
   24932:	b100      	cbz	r0, 24936 <ble_ll_scan_wfr_timer_exp+0x66>
   24934:	be01      	bkpt	0x0001
   24936:	2300      	movs	r3, #0
   24938:	461a      	mov	r2, r3
   2493a:	4619      	mov	r1, r3
   2493c:	4618      	mov	r0, r3
   2493e:	f7e4 ffd5 	bl	98ec <__assert_func>
   24942:	bf00      	nop
   24944:	20008bc4 	.word	0x20008bc4
   24948:	00555555 	.word	0x00555555
   2494c:	8e89bed6 	.word	0x8e89bed6

00024950 <ble_ll_scan_rx_pkt_in>:
{
   24950:	b500      	push	{lr}
   24952:	b089      	sub	sp, #36	; 0x24
    ble_ll_scan_rx_pkt_in_on_legacy(ptype, om, hdr, &addrd);
   24954:	ab01      	add	r3, sp, #4
   24956:	f7ff fcb9 	bl	242cc <ble_ll_scan_rx_pkt_in_on_legacy>
    ble_ll_scan_chk_resume();
   2495a:	f7ff ff2d 	bl	247b8 <ble_ll_scan_chk_resume>
}
   2495e:	b009      	add	sp, #36	; 0x24
   24960:	f85d fb04 	ldr.w	pc, [sp], #4

00024964 <ble_ll_scan_set_scan_params>:
    if (len != sizeof(*cmd)) {
   24964:	2907      	cmp	r1, #7
   24966:	d135      	bne.n	249d4 <ble_ll_scan_set_scan_params+0x70>
{
   24968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (scansm->scan_enabled) {
   2496a:	4b23      	ldr	r3, [pc, #140]	; (249f8 <ble_ll_scan_set_scan_params+0x94>)
   2496c:	781b      	ldrb	r3, [r3, #0]
   2496e:	bb9b      	cbnz	r3, 249d8 <ble_ll_scan_set_scan_params+0x74>
    scan_itvl = le16toh(cmd->scan_itvl);
   24970:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    scan_window = le16toh(cmd->scan_window);
   24974:	f8b0 5003 	ldrh.w	r5, [r0, #3]
    if ((cmd->scan_type != BLE_HCI_SCAN_TYPE_PASSIVE) &&
   24978:	7803      	ldrb	r3, [r0, #0]
   2497a:	2b01      	cmp	r3, #1
   2497c:	d82e      	bhi.n	249dc <ble_ll_scan_set_scan_params+0x78>
    if ((scan_itvl < BLE_HCI_SCAN_ITVL_MIN) ||
   2497e:	1f13      	subs	r3, r2, #4
   24980:	b29b      	uxth	r3, r3
   24982:	f643 71fc 	movw	r1, #16380	; 0x3ffc
   24986:	428b      	cmp	r3, r1
   24988:	d82a      	bhi.n	249e0 <ble_ll_scan_set_scan_params+0x7c>
        (scan_itvl > BLE_HCI_SCAN_ITVL_MAX) ||
   2498a:	2d03      	cmp	r5, #3
   2498c:	d92a      	bls.n	249e4 <ble_ll_scan_set_scan_params+0x80>
        (scan_window < BLE_HCI_SCAN_WINDOW_MIN) ||
   2498e:	f5b5 4f80 	cmp.w	r5, #16384	; 0x4000
   24992:	d829      	bhi.n	249e8 <ble_ll_scan_set_scan_params+0x84>
        (scan_window > BLE_HCI_SCAN_WINDOW_MAX) ||
   24994:	42aa      	cmp	r2, r5
   24996:	d329      	bcc.n	249ec <ble_ll_scan_set_scan_params+0x88>
    if (cmd->own_addr_type > BLE_HCI_ADV_OWN_ADDR_MAX) {
   24998:	7943      	ldrb	r3, [r0, #5]
   2499a:	2b03      	cmp	r3, #3
   2499c:	d828      	bhi.n	249f0 <ble_ll_scan_set_scan_params+0x8c>
    if (cmd->filter_policy > BLE_HCI_SCAN_FILT_MAX) {
   2499e:	7983      	ldrb	r3, [r0, #6]
   249a0:	2b03      	cmp	r3, #3
   249a2:	d827      	bhi.n	249f4 <ble_ll_scan_set_scan_params+0x90>
   249a4:	4604      	mov	r4, r0
    scanp->configured = 1;
   249a6:	4e15      	ldr	r6, [pc, #84]	; (249fc <ble_ll_scan_set_scan_params+0x98>)
   249a8:	2301      	movs	r3, #1
   249aa:	70f3      	strb	r3, [r6, #3]
    scanp->scan_type = cmd->scan_type;
   249ac:	7803      	ldrb	r3, [r0, #0]
   249ae:	7133      	strb	r3, [r6, #4]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   249b0:	f240 2771 	movw	r7, #625	; 0x271
   249b4:	fb07 f002 	mul.w	r0, r7, r2
   249b8:	f7f7 f9e0 	bl	1bd7c <os_cputime_usecs_to_ticks>
    scanp->timing.interval = ble_ll_scan_time_hci_to_ticks(scan_itvl);
   249bc:	60b0      	str	r0, [r6, #8]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   249be:	fb07 f005 	mul.w	r0, r7, r5
   249c2:	f7f7 f9db 	bl	1bd7c <os_cputime_usecs_to_ticks>
    scanp->timing.window = ble_ll_scan_time_hci_to_ticks(scan_window);
   249c6:	60f0      	str	r0, [r6, #12]
    scanp->scan_filt_policy = cmd->filter_policy;
   249c8:	79a3      	ldrb	r3, [r4, #6]
   249ca:	70b3      	strb	r3, [r6, #2]
    scanp->own_addr_type = cmd->own_addr_type;
   249cc:	7963      	ldrb	r3, [r4, #5]
   249ce:	7073      	strb	r3, [r6, #1]
    return 0;
   249d0:	2000      	movs	r0, #0
   249d2:	e002      	b.n	249da <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   249d4:	2012      	movs	r0, #18
}
   249d6:	4770      	bx	lr
        return BLE_ERR_CMD_DISALLOWED;
   249d8:	200c      	movs	r0, #12
}
   249da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return BLE_ERR_INV_HCI_CMD_PARMS;
   249dc:	2012      	movs	r0, #18
   249de:	e7fc      	b.n	249da <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   249e0:	2012      	movs	r0, #18
   249e2:	e7fa      	b.n	249da <ble_ll_scan_set_scan_params+0x76>
   249e4:	2012      	movs	r0, #18
   249e6:	e7f8      	b.n	249da <ble_ll_scan_set_scan_params+0x76>
   249e8:	2012      	movs	r0, #18
   249ea:	e7f6      	b.n	249da <ble_ll_scan_set_scan_params+0x76>
   249ec:	2012      	movs	r0, #18
   249ee:	e7f4      	b.n	249da <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   249f0:	2012      	movs	r0, #18
   249f2:	e7f2      	b.n	249da <ble_ll_scan_set_scan_params+0x76>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   249f4:	2012      	movs	r0, #18
   249f6:	e7f0      	b.n	249da <ble_ll_scan_set_scan_params+0x76>
   249f8:	20008bc4 	.word	0x20008bc4
   249fc:	20008b60 	.word	0x20008b60

00024a00 <ble_ll_hci_scan_set_enable>:
    if (len != sizeof(*cmd)) {
   24a00:	2902      	cmp	r1, #2
   24a02:	d001      	beq.n	24a08 <ble_ll_hci_scan_set_enable+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   24a04:	2012      	movs	r0, #18
}
   24a06:	4770      	bx	lr
{
   24a08:	b500      	push	{lr}
   24a0a:	b083      	sub	sp, #12
    return ble_ll_scan_set_enable(cmd->enable, cmd->filter_duplicates, 0, 0,
   24a0c:	7841      	ldrb	r1, [r0, #1]
   24a0e:	7800      	ldrb	r0, [r0, #0]
   24a10:	2200      	movs	r2, #0
   24a12:	9200      	str	r2, [sp, #0]
   24a14:	4613      	mov	r3, r2
   24a16:	f7ff fde3 	bl	245e0 <ble_ll_scan_set_enable>
}
   24a1a:	b003      	add	sp, #12
   24a1c:	f85d fb04 	ldr.w	pc, [sp], #4

00024a20 <ble_ll_scan_can_chg_whitelist>:
    scanp = scansm->scanp;
   24a20:	4b06      	ldr	r3, [pc, #24]	; (24a3c <ble_ll_scan_can_chg_whitelist+0x1c>)
   24a22:	6eda      	ldr	r2, [r3, #108]	; 0x6c
    if (scansm->scan_enabled && (scanp->scan_filt_policy & 1)) {
   24a24:	781b      	ldrb	r3, [r3, #0]
   24a26:	b12b      	cbz	r3, 24a34 <ble_ll_scan_can_chg_whitelist+0x14>
   24a28:	7893      	ldrb	r3, [r2, #2]
   24a2a:	f013 0f01 	tst.w	r3, #1
   24a2e:	d103      	bne.n	24a38 <ble_ll_scan_can_chg_whitelist+0x18>
        rc = 1;
   24a30:	2001      	movs	r0, #1
   24a32:	4770      	bx	lr
   24a34:	2001      	movs	r0, #1
   24a36:	4770      	bx	lr
        rc = 0;
   24a38:	2000      	movs	r0, #0
}
   24a3a:	4770      	bx	lr
   24a3c:	20008bc4 	.word	0x20008bc4

00024a40 <ble_ll_scan_initiator_start>:
{
   24a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24a42:	4605      	mov	r5, r0
   24a44:	460f      	mov	r7, r1
    scansm->own_addr_type = hcc->own_addr_type;
   24a46:	7b03      	ldrb	r3, [r0, #12]
   24a48:	4c12      	ldr	r4, [pc, #72]	; (24a94 <ble_ll_scan_initiator_start+0x54>)
   24a4a:	7063      	strb	r3, [r4, #1]
    scansm->scanp = &scansm->scanp_phys[PHY_UNCODED];
   24a4c:	f104 0374 	add.w	r3, r4, #116	; 0x74
   24a50:	66e3      	str	r3, [r4, #108]	; 0x6c
    scansm->scanp_next = NULL;
   24a52:	2300      	movs	r3, #0
   24a54:	6723      	str	r3, [r4, #112]	; 0x70
    scanp->scan_filt_policy = hcc->filter_policy;
   24a56:	7903      	ldrb	r3, [r0, #4]
   24a58:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
    scanp->timing.interval = ble_ll_scan_time_hci_to_ticks(hcc->scan_itvl);
   24a5c:	8800      	ldrh	r0, [r0, #0]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   24a5e:	f240 2671 	movw	r6, #625	; 0x271
   24a62:	fb06 f000 	mul.w	r0, r6, r0
   24a66:	f7f7 f989 	bl	1bd7c <os_cputime_usecs_to_ticks>
    scanp->timing.interval = ble_ll_scan_time_hci_to_ticks(hcc->scan_itvl);
   24a6a:	67e0      	str	r0, [r4, #124]	; 0x7c
    scanp->timing.window = ble_ll_scan_time_hci_to_ticks(hcc->scan_window);
   24a6c:	8868      	ldrh	r0, [r5, #2]
    return os_cputime_usecs_to_ticks(value * BLE_HCI_SCAN_ITVL);
   24a6e:	fb06 f000 	mul.w	r0, r6, r0
   24a72:	f7f7 f983 	bl	1bd7c <os_cputime_usecs_to_ticks>
    scanp->timing.window = ble_ll_scan_time_hci_to_ticks(hcc->scan_window);
   24a76:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    scanp->scan_type = BLE_SCAN_TYPE_INITIATE;
   24a7a:	2302      	movs	r3, #2
   24a7c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    rc = ble_ll_scan_sm_start(scansm);
   24a80:	4620      	mov	r0, r4
   24a82:	f7ff fc69 	bl	24358 <ble_ll_scan_sm_start>
    if (sm == NULL) {
   24a86:	b117      	cbz	r7, 24a8e <ble_ll_scan_initiator_start+0x4e>
    if (rc == BLE_ERR_SUCCESS) {
   24a88:	b110      	cbz	r0, 24a90 <ble_ll_scan_initiator_start+0x50>
        *sm = NULL;
   24a8a:	2300      	movs	r3, #0
   24a8c:	603b      	str	r3, [r7, #0]
}
   24a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        *sm = scansm;
   24a90:	603c      	str	r4, [r7, #0]
   24a92:	e7fc      	b.n	24a8e <ble_ll_scan_initiator_start+0x4e>
   24a94:	20008bc4 	.word	0x20008bc4

00024a98 <ble_ll_scan_enabled>:
}
   24a98:	4b01      	ldr	r3, [pc, #4]	; (24aa0 <ble_ll_scan_enabled+0x8>)
   24a9a:	7818      	ldrb	r0, [r3, #0]
   24a9c:	4770      	bx	lr
   24a9e:	bf00      	nop
   24aa0:	20008bc4 	.word	0x20008bc4

00024aa4 <ble_ll_scan_get_peer_rpa>:
}
   24aa4:	4800      	ldr	r0, [pc, #0]	; (24aa8 <ble_ll_scan_get_peer_rpa+0x4>)
   24aa6:	4770      	bx	lr
   24aa8:	20008bca 	.word	0x20008bca

00024aac <ble_ll_scan_get_local_rpa>:
}
   24aac:	4800      	ldr	r0, [pc, #0]	; (24ab0 <ble_ll_scan_get_local_rpa+0x4>)
   24aae:	4770      	bx	lr
   24ab0:	20008bdb 	.word	0x20008bdb

00024ab4 <ble_ll_scan_set_peer_rpa>:
    memcpy(scansm->scan_peer_rpa, rpa, BLE_DEV_ADDR_LEN);
   24ab4:	4b03      	ldr	r3, [pc, #12]	; (24ac4 <ble_ll_scan_set_peer_rpa+0x10>)
   24ab6:	6802      	ldr	r2, [r0, #0]
   24ab8:	f8c3 2006 	str.w	r2, [r3, #6]
   24abc:	8882      	ldrh	r2, [r0, #4]
   24abe:	815a      	strh	r2, [r3, #10]
}
   24ac0:	4770      	bx	lr
   24ac2:	bf00      	nop
   24ac4:	20008bc4 	.word	0x20008bc4

00024ac8 <ble_ll_scan_get_pdu_data>:
}
   24ac8:	4800      	ldr	r0, [pc, #0]	; (24acc <ble_ll_scan_get_pdu_data+0x4>)
   24aca:	4770      	bx	lr
   24acc:	20008bda 	.word	0x20008bda

00024ad0 <ble_ll_scan_whitelist_enabled>:
    return g_ble_ll_scan_sm.scanp->scan_filt_policy & 1;
   24ad0:	4b02      	ldr	r3, [pc, #8]	; (24adc <ble_ll_scan_whitelist_enabled+0xc>)
   24ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   24ad4:	7898      	ldrb	r0, [r3, #2]
}
   24ad6:	f000 0001 	and.w	r0, r0, #1
   24ada:	4770      	bx	lr
   24adc:	20008bc4 	.word	0x20008bc4

00024ae0 <ble_ll_scan_reset>:
 *
 * @return int
 */
void
ble_ll_scan_reset(void)
{
   24ae0:	b510      	push	{r4, lr}
    struct ble_ll_scan_sm *scansm;

    scansm = &g_ble_ll_scan_sm;

    /* If enabled, stop it. */
    if (scansm->scan_enabled) {
   24ae2:	4b0c      	ldr	r3, [pc, #48]	; (24b14 <ble_ll_scan_reset+0x34>)
   24ae4:	781b      	ldrb	r3, [r3, #0]
   24ae6:	b983      	cbnz	r3, 24b0a <ble_ll_scan_reset+0x2a>
    os_cputime_timer_stop(&scansm->duration_timer);
    os_cputime_timer_stop(&scansm->period_timer);
#endif

    /* Reset duplicate advertisers and those from which we rxd a response */
    g_ble_ll_scan_num_rsp_advs = 0;
   24ae8:	2400      	movs	r4, #0
   24aea:	4b0b      	ldr	r3, [pc, #44]	; (24b18 <ble_ll_scan_reset+0x38>)
   24aec:	701c      	strb	r4, [r3, #0]
    memset(&g_ble_ll_scan_rsp_advs[0], 0, sizeof(g_ble_ll_scan_rsp_advs));
   24aee:	2250      	movs	r2, #80	; 0x50
   24af0:	4621      	mov	r1, r4
   24af2:	480a      	ldr	r0, [pc, #40]	; (24b1c <ble_ll_scan_reset+0x3c>)
   24af4:	f7e6 fe83 	bl	b7fe <memset>

    os_mempool_clear(&g_scan_dup_pool);
   24af8:	4809      	ldr	r0, [pc, #36]	; (24b20 <ble_ll_scan_reset+0x40>)
   24afa:	f7e5 ff85 	bl	aa08 <os_mempool_clear>
    TAILQ_INIT(&g_scan_dup_list);
   24afe:	4b09      	ldr	r3, [pc, #36]	; (24b24 <ble_ll_scan_reset+0x44>)
   24b00:	601c      	str	r4, [r3, #0]
   24b02:	605b      	str	r3, [r3, #4]
    /* clear memory pool for AUX scan results */
    os_mempool_clear(&ext_scan_aux_pool);
#endif

    /* Call the common init function again */
    ble_ll_scan_common_init();
   24b04:	f7ff fc74 	bl	243f0 <ble_ll_scan_common_init>
}
   24b08:	bd10      	pop	{r4, pc}
        ble_ll_scan_sm_stop(0);
   24b0a:	2000      	movs	r0, #0
   24b0c:	f7ff fd28 	bl	24560 <ble_ll_scan_sm_stop>
   24b10:	e7ea      	b.n	24ae8 <ble_ll_scan_reset+0x8>
   24b12:	bf00      	nop
   24b14:	20008bc4 	.word	0x20008bc4
   24b18:	20008b5c 	.word	0x20008b5c
   24b1c:	20008b74 	.word	0x20008b74
   24b20:	20008cd4 	.word	0x20008cd4
   24b24:	20008c4c 	.word	0x20008c4c

00024b28 <ble_ll_scan_init>:
 * Initialize a scanner. Must be called before scanning can be started.
 * Expected to be called with a un-initialized scanning state machine.
 */
void
ble_ll_scan_init(void)
{
   24b28:	b500      	push	{lr}
   24b2a:	b083      	sub	sp, #12
                          ext_scan_aux_mem,
                          "ble_ll_aux_scan_pool");
    BLE_LL_ASSERT(err == 0);
#endif

    err = os_mempool_init(&g_scan_dup_pool,
   24b2c:	4b0d      	ldr	r3, [pc, #52]	; (24b64 <ble_ll_scan_init+0x3c>)
   24b2e:	9300      	str	r3, [sp, #0]
   24b30:	4b0d      	ldr	r3, [pc, #52]	; (24b68 <ble_ll_scan_init+0x40>)
   24b32:	2210      	movs	r2, #16
   24b34:	2108      	movs	r1, #8
   24b36:	480d      	ldr	r0, [pc, #52]	; (24b6c <ble_ll_scan_init+0x44>)
   24b38:	f7e5 ff5c 	bl	a9f4 <os_mempool_init>
                          MYNEWT_VAL(BLE_LL_NUM_SCAN_DUP_ADVS),
                          sizeof(struct ble_ll_scan_dup_entry),
                          g_scan_dup_mem,
                          "ble_ll_scan_dup_pool");
    BLE_LL_ASSERT(err == 0);
   24b3c:	b940      	cbnz	r0, 24b50 <ble_ll_scan_init+0x28>

    TAILQ_INIT(&g_scan_dup_list);
   24b3e:	4b0c      	ldr	r3, [pc, #48]	; (24b70 <ble_ll_scan_init+0x48>)
   24b40:	2200      	movs	r2, #0
   24b42:	601a      	str	r2, [r3, #0]
   24b44:	605b      	str	r3, [r3, #4]

    ble_ll_scan_common_init();
   24b46:	f7ff fc53 	bl	243f0 <ble_ll_scan_common_init>
}
   24b4a:	b003      	add	sp, #12
   24b4c:	f85d fb04 	ldr.w	pc, [sp], #4
    BLE_LL_ASSERT(err == 0);
   24b50:	f7e3 fb36 	bl	81c0 <hal_debugger_connected>
   24b54:	b100      	cbz	r0, 24b58 <ble_ll_scan_init+0x30>
   24b56:	be01      	bkpt	0x0001
   24b58:	2300      	movs	r3, #0
   24b5a:	461a      	mov	r2, r3
   24b5c:	4619      	mov	r1, r3
   24b5e:	4618      	mov	r0, r3
   24b60:	f7e4 fec4 	bl	98ec <__assert_func>
   24b64:	00029834 	.word	0x00029834
   24b68:	20008c54 	.word	0x20008c54
   24b6c:	20008cd4 	.word	0x20008cd4
   24b70:	20008c4c 	.word	0x20008c4c

00024b74 <ble_ll_sched_is_overlap>:
 * @return int 0: dont overlap 1:overlap
 */
static int
ble_ll_sched_is_overlap(struct ble_ll_sched_item *s1,
                        struct ble_ll_sched_item *s2)
{
   24b74:	b410      	push	{r4}
    int rc;

    rc = 1;
    if ((int32_t)(s1->start_time - s2->start_time) < 0) {
   24b76:	6843      	ldr	r3, [r0, #4]
   24b78:	684a      	ldr	r2, [r1, #4]
   24b7a:	1a9c      	subs	r4, r3, r2
   24b7c:	2c00      	cmp	r4, #0
   24b7e:	db07      	blt.n	24b90 <ble_ll_sched_is_overlap+0x1c>
        if ((int32_t)(s1->end_time - s2->start_time) <= 0) {
            rc = 0;
        }
    } else {
        /* Check for overlap */
        if ((int32_t)(s1->start_time - s2->end_time) >= 0) {
   24b80:	688a      	ldr	r2, [r1, #8]
   24b82:	1a9b      	subs	r3, r3, r2
   24b84:	2b00      	cmp	r3, #0
   24b86:	db09      	blt.n	24b9c <ble_ll_sched_is_overlap+0x28>
            rc = 0;
   24b88:	2000      	movs	r0, #0
        }
    }

    return rc;
}
   24b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
   24b8e:	4770      	bx	lr
        if ((int32_t)(s1->end_time - s2->start_time) <= 0) {
   24b90:	6883      	ldr	r3, [r0, #8]
   24b92:	1a9a      	subs	r2, r3, r2
   24b94:	2a00      	cmp	r2, #0
   24b96:	dd03      	ble.n	24ba0 <ble_ll_sched_is_overlap+0x2c>
    rc = 1;
   24b98:	2001      	movs	r0, #1
   24b9a:	e7f6      	b.n	24b8a <ble_ll_sched_is_overlap+0x16>
   24b9c:	2001      	movs	r0, #1
   24b9e:	e7f4      	b.n	24b8a <ble_ll_sched_is_overlap+0x16>
            rc = 0;
   24ba0:	2000      	movs	r0, #0
   24ba2:	e7f2      	b.n	24b8a <ble_ll_sched_is_overlap+0x16>

00024ba4 <ble_ll_sched_insert_if_empty>:
static struct ble_ll_sched_item *
ble_ll_sched_insert_if_empty(struct ble_ll_sched_item *sch)
{
    struct ble_ll_sched_item *entry;

    entry = TAILQ_FIRST(&g_ble_ll_sched_q);
   24ba4:	4b07      	ldr	r3, [pc, #28]	; (24bc4 <ble_ll_sched_insert_if_empty+0x20>)
   24ba6:	681b      	ldr	r3, [r3, #0]
    if (!entry) {
   24ba8:	b10b      	cbz	r3, 24bae <ble_ll_sched_insert_if_empty+0xa>
        TAILQ_INSERT_HEAD(&g_ble_ll_sched_q, sch, link);
        sch->enqueued = 1;
    }
    return entry;
}
   24baa:	4618      	mov	r0, r3
   24bac:	4770      	bx	lr
        TAILQ_INSERT_HEAD(&g_ble_ll_sched_q, sch, link);
   24bae:	4601      	mov	r1, r0
   24bb0:	f841 3f14 	str.w	r3, [r1, #20]!
   24bb4:	4a03      	ldr	r2, [pc, #12]	; (24bc4 <ble_ll_sched_insert_if_empty+0x20>)
   24bb6:	6051      	str	r1, [r2, #4]
   24bb8:	6010      	str	r0, [r2, #0]
   24bba:	6182      	str	r2, [r0, #24]
        sch->enqueued = 1;
   24bbc:	2201      	movs	r2, #1
   24bbe:	7042      	strb	r2, [r0, #1]
    return entry;
   24bc0:	e7f3      	b.n	24baa <ble_ll_sched_insert_if_empty+0x6>
   24bc2:	bf00      	nop
   24bc4:	20008cf4 	.word	0x20008cf4

00024bc8 <ble_ll_sched_conn_overlap>:
{
   24bc8:	b508      	push	{r3, lr}
    if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN) {
   24bca:	7803      	ldrb	r3, [r0, #0]
   24bcc:	2b03      	cmp	r3, #3
   24bce:	d113      	bne.n	24bf8 <ble_ll_sched_conn_overlap+0x30>
        connsm = (struct ble_ll_conn_sm *)entry->cb_arg;
   24bd0:	68c2      	ldr	r2, [r0, #12]
        entry->enqueued = 0;
   24bd2:	2300      	movs	r3, #0
   24bd4:	7043      	strb	r3, [r0, #1]
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   24bd6:	6943      	ldr	r3, [r0, #20]
   24bd8:	b153      	cbz	r3, 24bf0 <ble_ll_sched_conn_overlap+0x28>
   24bda:	6981      	ldr	r1, [r0, #24]
   24bdc:	6199      	str	r1, [r3, #24]
   24bde:	6983      	ldr	r3, [r0, #24]
   24be0:	6941      	ldr	r1, [r0, #20]
   24be2:	6019      	str	r1, [r3, #0]
        ble_ll_event_send(&connsm->conn_ev_end);
   24be4:	f102 009c 	add.w	r0, r2, #156	; 0x9c
   24be8:	f7f8 fb4a 	bl	1d280 <ble_ll_event_send>
        rc = 0;
   24bec:	2000      	movs	r0, #0
}
   24bee:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   24bf0:	6981      	ldr	r1, [r0, #24]
   24bf2:	4b03      	ldr	r3, [pc, #12]	; (24c00 <ble_ll_sched_conn_overlap+0x38>)
   24bf4:	6059      	str	r1, [r3, #4]
   24bf6:	e7f2      	b.n	24bde <ble_ll_sched_conn_overlap+0x16>
        rc = -1;
   24bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return rc;
   24bfc:	e7f7      	b.n	24bee <ble_ll_sched_conn_overlap+0x26>
   24bfe:	bf00      	nop
   24c00:	20008cf4 	.word	0x20008cf4

00024c04 <ble_ll_sched_overlaps_current>:
{
   24c04:	b510      	push	{r4, lr}
   24c06:	4604      	mov	r4, r0
    if (ble_ll_state_get() == BLE_LL_STATE_CONNECTION) {
   24c08:	f7f8 fb34 	bl	1d274 <ble_ll_state_get>
   24c0c:	2804      	cmp	r0, #4
   24c0e:	d001      	beq.n	24c14 <ble_ll_sched_overlaps_current+0x10>
    rc = 0;
   24c10:	2000      	movs	r0, #0
}
   24c12:	bd10      	pop	{r4, pc}
        ce_end_time = ble_ll_conn_get_ce_end_time();
   24c14:	f7fa fa1e 	bl	1f054 <ble_ll_conn_get_ce_end_time>
        if ((int32_t)(ce_end_time - sch->start_time) > 0) {
   24c18:	6863      	ldr	r3, [r4, #4]
   24c1a:	1ac0      	subs	r0, r0, r3
   24c1c:	2800      	cmp	r0, #0
   24c1e:	dd01      	ble.n	24c24 <ble_ll_sched_overlaps_current+0x20>
            rc = 1;
   24c20:	2001      	movs	r0, #1
    return rc;
   24c22:	e7f6      	b.n	24c12 <ble_ll_sched_overlaps_current+0xe>
    rc = 0;
   24c24:	2000      	movs	r0, #0
   24c26:	e7f4      	b.n	24c12 <ble_ll_sched_overlaps_current+0xe>

00024c28 <ble_ll_sched_execute_item>:
 *
 * @return int 0: schedule item is not over; otherwise schedule item is done.
 */
static int
ble_ll_sched_execute_item(struct ble_ll_sched_item *sch)
{
   24c28:	b538      	push	{r3, r4, r5, lr}
   24c2a:	4604      	mov	r4, r0
    int rc;
    uint8_t lls;

    lls = ble_ll_state_get();
   24c2c:	f7f8 fb22 	bl	1d274 <ble_ll_state_get>
   24c30:	4605      	mov	r5, r0

    ble_ll_trace_u32x3(BLE_LL_TRACE_ID_SCHED, lls, os_cputime_get32(),
   24c32:	f7f7 f88c 	bl	1bd4e <os_cputime_get32>
                       sch->start_time);

    if (lls == BLE_LL_STATE_STANDBY) {
   24c36:	b185      	cbz	r5, 24c5a <ble_ll_sched_execute_item+0x32>
     * BLE_LL_STATE_INITIATING
     * BLE_LL_STATE_STANDBY
     *
     * Let scanner to decide to disable phy or not.
     */
    if (sch->sched_type == BLE_LL_SCHED_TYPE_AUX_SCAN) {
   24c38:	7823      	ldrb	r3, [r4, #0]
   24c3a:	2b04      	cmp	r3, #4
   24c3c:	d103      	bne.n	24c46 <ble_ll_sched_execute_item+0x1e>
        if (lls == BLE_LL_STATE_INITIATING || lls == BLE_LL_STATE_SCANNING) {
   24c3e:	1eab      	subs	r3, r5, #2
   24c40:	b2db      	uxtb	r3, r3
   24c42:	2b01      	cmp	r3, #1
   24c44:	d909      	bls.n	24c5a <ble_ll_sched_execute_item+0x32>
     * This is either an advertising event or connection event start. If
     * we are scanning or initiating just stop it.
     */

    /* We have to disable the PHY no matter what */
    ble_phy_disable();
   24c46:	f001 fad7 	bl	261f8 <ble_phy_disable>

    if (lls == BLE_LL_STATE_SCANNING) {
   24c4a:	2d02      	cmp	r5, #2
   24c4c:	d00a      	beq.n	24c64 <ble_ll_sched_execute_item+0x3c>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
        ble_ll_scan_halt();
    } else if (lls == BLE_LL_STATE_INITIATING) {
   24c4e:	2d03      	cmp	r5, #3
   24c50:	d00e      	beq.n	24c70 <ble_ll_sched_execute_item+0x48>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
        ble_ll_scan_halt();
        /* PHY is disabled - make sure we do not wait for AUX_CONNECT_RSP */
        ble_ll_conn_reset_pending_aux_conn_rsp();
    } else if (lls == BLE_LL_STATE_ADV) {
   24c52:	2d01      	cmp	r5, #1
   24c54:	d014      	beq.n	24c80 <ble_ll_sched_execute_item+0x58>
        STATS_INC(ble_ll_stats, sched_state_sync_errs);
        ble_ll_sync_halt();
#endif
    } else {
        STATS_INC(ble_ll_stats, sched_state_conn_errs);
        ble_ll_conn_event_halt();
   24c56:	f7fa fe4b 	bl	1f8f0 <ble_ll_conn_event_halt>
    }

sched:
    BLE_LL_DEBUG_GPIO(SCHED_ITEM_CB, 1);
    BLE_LL_ASSERT(sch->sched_cb);
   24c5a:	6923      	ldr	r3, [r4, #16]
   24c5c:	b19b      	cbz	r3, 24c86 <ble_ll_sched_execute_item+0x5e>
    rc = sch->sched_cb(sch);
   24c5e:	4620      	mov	r0, r4
   24c60:	4798      	blx	r3
    BLE_LL_DEBUG_GPIO(SCHED_ITEM_CB, 0);
    return rc;
}
   24c62:	bd38      	pop	{r3, r4, r5, pc}
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   24c64:	2000      	movs	r0, #0
   24c66:	f7f8 faff 	bl	1d268 <ble_ll_state_set>
        ble_ll_scan_halt();
   24c6a:	f7ff fc6b 	bl	24544 <ble_ll_scan_halt>
   24c6e:	e7f4      	b.n	24c5a <ble_ll_sched_execute_item+0x32>
        ble_ll_state_set(BLE_LL_STATE_STANDBY);
   24c70:	2000      	movs	r0, #0
   24c72:	f7f8 faf9 	bl	1d268 <ble_ll_state_set>
        ble_ll_scan_halt();
   24c76:	f7ff fc65 	bl	24544 <ble_ll_scan_halt>
        ble_ll_conn_reset_pending_aux_conn_rsp();
   24c7a:	f7fa fbf5 	bl	1f468 <ble_ll_conn_reset_pending_aux_conn_rsp>
   24c7e:	e7ec      	b.n	24c5a <ble_ll_sched_execute_item+0x32>
        ble_ll_adv_halt();
   24c80:	f7f9 fa9e 	bl	1e1c0 <ble_ll_adv_halt>
   24c84:	e7e9      	b.n	24c5a <ble_ll_sched_execute_item+0x32>
    BLE_LL_ASSERT(sch->sched_cb);
   24c86:	f7e3 fa9b 	bl	81c0 <hal_debugger_connected>
   24c8a:	b100      	cbz	r0, 24c8e <ble_ll_sched_execute_item+0x66>
   24c8c:	be01      	bkpt	0x0001
   24c8e:	2300      	movs	r3, #0
   24c90:	461a      	mov	r2, r3
   24c92:	4619      	mov	r1, r3
   24c94:	4618      	mov	r0, r3
   24c96:	f7e4 fe29 	bl	98ec <__assert_func>
	...

00024c9c <ble_ll_sched_run>:
    struct ble_ll_sched_item *sch;

    BLE_LL_DEBUG_GPIO(SCHED_RUN, 1);

    /* Look through schedule queue */
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   24c9c:	4b0f      	ldr	r3, [pc, #60]	; (24cdc <ble_ll_sched_run+0x40>)
   24c9e:	6818      	ldr	r0, [r3, #0]
    if (sch) {
   24ca0:	b1d0      	cbz	r0, 24cd8 <ble_ll_sched_run+0x3c>
{
   24ca2:	b510      	push	{r4, lr}
            g_ble_ll_sched_max_early = dt;
        }
#endif

        /* Remove schedule item and execute the callback */
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   24ca4:	6943      	ldr	r3, [r0, #20]
   24ca6:	b19b      	cbz	r3, 24cd0 <ble_ll_sched_run+0x34>
   24ca8:	6982      	ldr	r2, [r0, #24]
   24caa:	619a      	str	r2, [r3, #24]
   24cac:	6983      	ldr	r3, [r0, #24]
   24cae:	6942      	ldr	r2, [r0, #20]
   24cb0:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   24cb2:	2300      	movs	r3, #0
   24cb4:	7043      	strb	r3, [r0, #1]
        ble_ll_sched_execute_item(sch);
   24cb6:	f7ff ffb7 	bl	24c28 <ble_ll_sched_execute_item>

        /* Restart if there is an item on the schedule */
        sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   24cba:	4b08      	ldr	r3, [pc, #32]	; (24cdc <ble_ll_sched_run+0x40>)
   24cbc:	681c      	ldr	r4, [r3, #0]
        if (sch) {
   24cbe:	b11c      	cbz	r4, 24cc8 <ble_ll_sched_run+0x2c>
            os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   24cc0:	6861      	ldr	r1, [r4, #4]
   24cc2:	4807      	ldr	r0, [pc, #28]	; (24ce0 <ble_ll_sched_run+0x44>)
   24cc4:	f7f7 f83b 	bl	1bd3e <os_cputime_timer_start>
        }
        ble_ll_rfmgmt_sched_changed(sch);
   24cc8:	4620      	mov	r0, r4
   24cca:	f7fe fdf1 	bl	238b0 <ble_ll_rfmgmt_sched_changed>
    }

    BLE_LL_DEBUG_GPIO(SCHED_RUN, 0);
}
   24cce:	bd10      	pop	{r4, pc}
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   24cd0:	6982      	ldr	r2, [r0, #24]
   24cd2:	4b02      	ldr	r3, [pc, #8]	; (24cdc <ble_ll_sched_run+0x40>)
   24cd4:	605a      	str	r2, [r3, #4]
   24cd6:	e7e9      	b.n	24cac <ble_ll_sched_run+0x10>
   24cd8:	4770      	bx	lr
   24cda:	bf00      	nop
   24cdc:	20008cf4 	.word	0x20008cf4
   24ce0:	20008cfc 	.word	0x20008cfc

00024ce4 <ble_ll_sched_conn_reschedule>:
{
   24ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24ce8:	4682      	mov	sl, r0
    sch = &connsm->conn_sch;
   24cea:	f100 07dc 	add.w	r7, r0, #220	; 0xdc
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks;
   24cee:	6f43      	ldr	r3, [r0, #116]	; 0x74
   24cf0:	4a62      	ldr	r2, [pc, #392]	; (24e7c <ble_ll_sched_conn_reschedule+0x198>)
   24cf2:	7812      	ldrb	r2, [r2, #0]
   24cf4:	1a9b      	subs	r3, r3, r2
   24cf6:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
    if (connsm->conn_role == BLE_LL_CONN_ROLE_SLAVE) {
   24cfa:	79c3      	ldrb	r3, [r0, #7]
   24cfc:	2b02      	cmp	r3, #2
   24cfe:	d01f      	beq.n	24d40 <ble_ll_sched_conn_reschedule+0x5c>
        sch->remainder = connsm->anchor_point_usecs;
   24d00:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   24d04:	f880 30de 	strb.w	r3, [r0, #222]	; 0xde
    sch->end_time = connsm->ce_end_time;
   24d08:	f8da 305c 	ldr.w	r3, [sl, #92]	; 0x5c
   24d0c:	f8ca 30e4 	str.w	r3, [sl, #228]	; 0xe4
    if ((int32_t)(sch->start_time - os_cputime_get32()) < 0) {
   24d10:	f8da 40e0 	ldr.w	r4, [sl, #224]	; 0xe0
   24d14:	f7f7 f81b 	bl	1bd4e <os_cputime_get32>
   24d18:	1a20      	subs	r0, r4, r0
   24d1a:	2800      	cmp	r0, #0
   24d1c:	f2c0 80ab 	blt.w	24e76 <ble_ll_sched_conn_reschedule+0x192>
    OS_ENTER_CRITICAL(sr);
   24d20:	f7e6 fbd6 	bl	b4d0 <os_arch_save_sr>
   24d24:	4681      	mov	r9, r0
    if (ble_ll_sched_overlaps_current(sch)) {
   24d26:	4638      	mov	r0, r7
   24d28:	f7ff ff6c 	bl	24c04 <ble_ll_sched_overlaps_current>
   24d2c:	4680      	mov	r8, r0
   24d2e:	b9a8      	cbnz	r0, 24d5c <ble_ll_sched_conn_reschedule+0x78>
    os_cputime_timer_stop(&g_ble_ll_sched_timer);
   24d30:	4853      	ldr	r0, [pc, #332]	; (24e80 <ble_ll_sched_conn_reschedule+0x19c>)
   24d32:	f7f7 f808 	bl	1bd46 <os_cputime_timer_stop>
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   24d36:	4b53      	ldr	r3, [pc, #332]	; (24e84 <ble_ll_sched_conn_reschedule+0x1a0>)
   24d38:	681d      	ldr	r5, [r3, #0]
    end_overlap = NULL;
   24d3a:	2600      	movs	r6, #0
    start_overlap = NULL;
   24d3c:	4634      	mov	r4, r6
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   24d3e:	e02b      	b.n	24d98 <ble_ll_sched_conn_reschedule+0xb4>
        sch->start_time -= (os_cputime_usecs_to_ticks(usecs) + 1);
   24d40:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
   24d44:	f7f7 f81a 	bl	1bd7c <os_cputime_usecs_to_ticks>
   24d48:	3001      	adds	r0, #1
   24d4a:	f8da 30e0 	ldr.w	r3, [sl, #224]	; 0xe0
   24d4e:	1a1b      	subs	r3, r3, r0
   24d50:	f8ca 30e0 	str.w	r3, [sl, #224]	; 0xe0
        sch->remainder = 0;
   24d54:	2300      	movs	r3, #0
   24d56:	f88a 30de 	strb.w	r3, [sl, #222]	; 0xde
   24d5a:	e7d5      	b.n	24d08 <ble_ll_sched_conn_reschedule+0x24>
        OS_EXIT_CRITICAL(sr);
   24d5c:	4648      	mov	r0, r9
   24d5e:	f7e6 fbbd 	bl	b4dc <os_arch_restore_sr>
        return -1;
   24d62:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   24d66:	e074      	b.n	24e52 <ble_ll_sched_conn_reschedule+0x16e>
                            !ble_ll_conn_is_lru((struct ble_ll_conn_sm *)sch->cb_arg,
   24d68:	68e9      	ldr	r1, [r5, #12]
   24d6a:	f8da 00e8 	ldr.w	r0, [sl, #232]	; 0xe8
   24d6e:	f7fa f967 	bl	1f040 <ble_ll_conn_is_lru>
           if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN &&
   24d72:	b9e0      	cbnz	r0, 24dae <ble_ll_sched_conn_reschedule+0xca>
                start_overlap = NULL;
   24d74:	2400      	movs	r4, #0
                rc = -1;
   24d76:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
    if (!rc) {
   24d7a:	f1b8 0f00 	cmp.w	r8, #0
   24d7e:	d143      	bne.n	24e08 <ble_ll_sched_conn_reschedule+0x124>
        if (!entry) {
   24d80:	b335      	cbz	r5, 24dd0 <ble_ll_sched_conn_reschedule+0xec>
        sch->enqueued = 1;
   24d82:	2301      	movs	r3, #1
   24d84:	f88a 30dd 	strb.w	r3, [sl, #221]	; 0xdd
    while (entry) {
   24d88:	e03e      	b.n	24e08 <ble_ll_sched_conn_reschedule+0x124>
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   24d8a:	f8da 30e4 	ldr.w	r3, [sl, #228]	; 0xe4
   24d8e:	6869      	ldr	r1, [r5, #4]
   24d90:	1a5b      	subs	r3, r3, r1
   24d92:	2b00      	cmp	r3, #0
   24d94:	dd0e      	ble.n	24db4 <ble_ll_sched_conn_reschedule+0xd0>
    TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   24d96:	696d      	ldr	r5, [r5, #20]
   24d98:	2d00      	cmp	r5, #0
   24d9a:	d0ee      	beq.n	24d7a <ble_ll_sched_conn_reschedule+0x96>
        if (ble_ll_sched_is_overlap(sch, entry)) {
   24d9c:	4629      	mov	r1, r5
   24d9e:	4638      	mov	r0, r7
   24da0:	f7ff fee8 	bl	24b74 <ble_ll_sched_is_overlap>
   24da4:	2800      	cmp	r0, #0
   24da6:	d0f0      	beq.n	24d8a <ble_ll_sched_conn_reschedule+0xa6>
           if (entry->sched_type == BLE_LL_SCHED_TYPE_CONN &&
   24da8:	782b      	ldrb	r3, [r5, #0]
   24daa:	2b03      	cmp	r3, #3
   24dac:	d0dc      	beq.n	24d68 <ble_ll_sched_conn_reschedule+0x84>
            if (start_overlap == NULL) {
   24dae:	b164      	cbz	r4, 24dca <ble_ll_sched_conn_reschedule+0xe6>
                end_overlap = entry;
   24db0:	462e      	mov	r6, r5
   24db2:	e7f0      	b.n	24d96 <ble_ll_sched_conn_reschedule+0xb2>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   24db4:	69ab      	ldr	r3, [r5, #24]
   24db6:	f8ca 30f4 	str.w	r3, [sl, #244]	; 0xf4
   24dba:	4653      	mov	r3, sl
   24dbc:	f843 5ff0 	str.w	r5, [r3, #240]!
   24dc0:	69a9      	ldr	r1, [r5, #24]
   24dc2:	600f      	str	r7, [r1, #0]
   24dc4:	61ab      	str	r3, [r5, #24]
                rc = 0;
   24dc6:	4680      	mov	r8, r0
   24dc8:	e7da      	b.n	24d80 <ble_ll_sched_conn_reschedule+0x9c>
                end_overlap = entry;
   24dca:	462e      	mov	r6, r5
                start_overlap = entry;
   24dcc:	462c      	mov	r4, r5
   24dce:	e7e2      	b.n	24d96 <ble_ll_sched_conn_reschedule+0xb2>
            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   24dd0:	2300      	movs	r3, #0
   24dd2:	f8ca 30f0 	str.w	r3, [sl, #240]	; 0xf0
   24dd6:	4b2b      	ldr	r3, [pc, #172]	; (24e84 <ble_ll_sched_conn_reschedule+0x1a0>)
   24dd8:	685a      	ldr	r2, [r3, #4]
   24dda:	f8ca 20f4 	str.w	r2, [sl, #244]	; 0xf4
   24dde:	6017      	str	r7, [r2, #0]
   24de0:	f10a 02f0 	add.w	r2, sl, #240	; 0xf0
   24de4:	605a      	str	r2, [r3, #4]
   24de6:	e7cc      	b.n	24d82 <ble_ll_sched_conn_reschedule+0x9e>
            tmp = (struct ble_ll_conn_sm *)entry->cb_arg;
   24de8:	68e0      	ldr	r0, [r4, #12]
            ble_ll_event_send(&tmp->conn_ev_end);
   24dea:	309c      	adds	r0, #156	; 0x9c
   24dec:	f7f8 fa48 	bl	1d280 <ble_ll_event_send>
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   24df0:	6963      	ldr	r3, [r4, #20]
   24df2:	b1f3      	cbz	r3, 24e32 <ble_ll_sched_conn_reschedule+0x14e>
   24df4:	69a2      	ldr	r2, [r4, #24]
   24df6:	619a      	str	r2, [r3, #24]
   24df8:	69a3      	ldr	r3, [r4, #24]
   24dfa:	6962      	ldr	r2, [r4, #20]
   24dfc:	601a      	str	r2, [r3, #0]
        entry->enqueued = 0;
   24dfe:	2300      	movs	r3, #0
   24e00:	7063      	strb	r3, [r4, #1]
        if (entry == end_overlap) {
   24e02:	42a6      	cmp	r6, r4
   24e04:	d019      	beq.n	24e3a <ble_ll_sched_conn_reschedule+0x156>
        entry = start_overlap;
   24e06:	462c      	mov	r4, r5
    while (entry) {
   24e08:	b1bc      	cbz	r4, 24e3a <ble_ll_sched_conn_reschedule+0x156>
        start_overlap = TAILQ_NEXT(entry,link);
   24e0a:	6965      	ldr	r5, [r4, #20]
        switch (entry->sched_type) {
   24e0c:	7823      	ldrb	r3, [r4, #0]
   24e0e:	2b01      	cmp	r3, #1
   24e10:	d00b      	beq.n	24e2a <ble_ll_sched_conn_reschedule+0x146>
   24e12:	2b03      	cmp	r3, #3
   24e14:	d0e8      	beq.n	24de8 <ble_ll_sched_conn_reschedule+0x104>
            BLE_LL_ASSERT(0);
   24e16:	f7e3 f9d3 	bl	81c0 <hal_debugger_connected>
   24e1a:	b100      	cbz	r0, 24e1e <ble_ll_sched_conn_reschedule+0x13a>
   24e1c:	be01      	bkpt	0x0001
   24e1e:	2300      	movs	r3, #0
   24e20:	461a      	mov	r2, r3
   24e22:	4619      	mov	r1, r3
   24e24:	4618      	mov	r0, r3
   24e26:	f7e4 fd61 	bl	98ec <__assert_func>
            ble_ll_adv_event_rmvd_from_sched((struct ble_ll_adv_sm *)entry->cb_arg);
   24e2a:	68e0      	ldr	r0, [r4, #12]
   24e2c:	f7f9 f9ba 	bl	1e1a4 <ble_ll_adv_event_rmvd_from_sched>
            break;
   24e30:	e7de      	b.n	24df0 <ble_ll_sched_conn_reschedule+0x10c>
        TAILQ_REMOVE(&g_ble_ll_sched_q, entry, link);
   24e32:	69a2      	ldr	r2, [r4, #24]
   24e34:	4b13      	ldr	r3, [pc, #76]	; (24e84 <ble_ll_sched_conn_reschedule+0x1a0>)
   24e36:	605a      	str	r2, [r3, #4]
   24e38:	e7de      	b.n	24df8 <ble_ll_sched_conn_reschedule+0x114>
    entry = TAILQ_FIRST(&g_ble_ll_sched_q);
   24e3a:	4b12      	ldr	r3, [pc, #72]	; (24e84 <ble_ll_sched_conn_reschedule+0x1a0>)
   24e3c:	681c      	ldr	r4, [r3, #0]
    if (entry == sch) {
   24e3e:	42a7      	cmp	r7, r4
   24e40:	d00a      	beq.n	24e58 <ble_ll_sched_conn_reschedule+0x174>
    OS_EXIT_CRITICAL(sr);
   24e42:	4648      	mov	r0, r9
   24e44:	f7e6 fb4a 	bl	b4dc <os_arch_restore_sr>
    BLE_LL_ASSERT(sch != NULL);
   24e48:	b15c      	cbz	r4, 24e62 <ble_ll_sched_conn_reschedule+0x17e>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   24e4a:	6861      	ldr	r1, [r4, #4]
   24e4c:	480c      	ldr	r0, [pc, #48]	; (24e80 <ble_ll_sched_conn_reschedule+0x19c>)
   24e4e:	f7f6 ff76 	bl	1bd3e <os_cputime_timer_start>
}
   24e52:	4640      	mov	r0, r8
   24e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        ble_ll_rfmgmt_sched_changed(sch);
   24e58:	4638      	mov	r0, r7
   24e5a:	f7fe fd29 	bl	238b0 <ble_ll_rfmgmt_sched_changed>
    sch = &connsm->conn_sch;
   24e5e:	463c      	mov	r4, r7
   24e60:	e7ef      	b.n	24e42 <ble_ll_sched_conn_reschedule+0x15e>
    BLE_LL_ASSERT(sch != NULL);
   24e62:	f7e3 f9ad 	bl	81c0 <hal_debugger_connected>
   24e66:	b100      	cbz	r0, 24e6a <ble_ll_sched_conn_reschedule+0x186>
   24e68:	be01      	bkpt	0x0001
   24e6a:	2300      	movs	r3, #0
   24e6c:	461a      	mov	r2, r3
   24e6e:	4619      	mov	r1, r3
   24e70:	4618      	mov	r0, r3
   24e72:	f7e4 fd3b 	bl	98ec <__assert_func>
        return -1;
   24e76:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   24e7a:	e7ea      	b.n	24e52 <ble_ll_sched_conn_reschedule+0x16e>
   24e7c:	20008cf0 	.word	0x20008cf0
   24e80:	20008cfc 	.word	0x20008cfc
   24e84:	20008cf4 	.word	0x20008cf4

00024e88 <ble_ll_sched_master_new>:
{
   24e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24e8c:	b083      	sub	sp, #12
   24e8e:	4605      	mov	r5, r0
   24e90:	460c      	mov	r4, r1
    sch = &connsm->conn_sch;
   24e92:	f100 09dc 	add.w	r9, r0, #220	; 0xdc
    adv_rxend = os_cputime_get32();
   24e96:	f7f6 ff5a 	bl	1bd4e <os_cputime_get32>
    if (ble_hdr->rxinfo.channel >= BLE_PHY_NUM_DATA_CHANS) {
   24e9a:	78a3      	ldrb	r3, [r4, #2]
   24e9c:	2b24      	cmp	r3, #36	; 0x24
   24e9e:	d915      	bls.n	24ecc <ble_ll_sched_master_new+0x44>
        earliest_start = adv_rxend + 57;
   24ea0:	f100 0839 	add.w	r8, r0, #57	; 0x39
    earliest_end = earliest_start + dur;
   24ea4:	f108 06a4 	add.w	r6, r8, #164	; 0xa4
    itvl_t = connsm->conn_itvl_ticks;
   24ea8:	f8d5 b07c 	ldr.w	fp, [r5, #124]	; 0x7c
    OS_ENTER_CRITICAL(sr);
   24eac:	f7e6 fb10 	bl	b4d0 <os_arch_save_sr>
   24eb0:	9001      	str	r0, [sp, #4]
    sch->start_time = earliest_start;
   24eb2:	f8c5 80e0 	str.w	r8, [r5, #224]	; 0xe0
    if (!ble_ll_sched_insert_if_empty(sch)) {
   24eb6:	4648      	mov	r0, r9
   24eb8:	f7ff fe74 	bl	24ba4 <ble_ll_sched_insert_if_empty>
   24ebc:	b308      	cbz	r0, 24f02 <ble_ll_sched_master_new+0x7a>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   24ebe:	484a      	ldr	r0, [pc, #296]	; (24fe8 <ble_ll_sched_master_new+0x160>)
   24ec0:	f7f6 ff41 	bl	1bd46 <os_cputime_timer_stop>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   24ec4:	4b49      	ldr	r3, [pc, #292]	; (24fec <ble_ll_sched_master_new+0x164>)
   24ec6:	681c      	ldr	r4, [r3, #0]
    earliest_start += MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET) *
   24ec8:	4647      	mov	r7, r8
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   24eca:	e050      	b.n	24f6e <ble_ll_sched_master_new+0xe6>
        if (ble_hdr->rxinfo.phy == BLE_PHY_1M) {
   24ecc:	f994 3005 	ldrsb.w	r3, [r4, #5]
   24ed0:	2b01      	cmp	r3, #1
   24ed2:	d006      	beq.n	24ee2 <ble_ll_sched_master_new+0x5a>
        } else if (ble_hdr->rxinfo.phy == BLE_PHY_2M) {
   24ed4:	2b02      	cmp	r3, #2
   24ed6:	d007      	beq.n	24ee8 <ble_ll_sched_master_new+0x60>
        } else if (ble_hdr->rxinfo.phy == BLE_PHY_CODED) {
   24ed8:	2b03      	cmp	r3, #3
   24eda:	d108      	bne.n	24eee <ble_ll_sched_master_new+0x66>
            earliest_start = adv_rxend + 223;
   24edc:	f100 08df 	add.w	r8, r0, #223	; 0xdf
   24ee0:	e7e0      	b.n	24ea4 <ble_ll_sched_master_new+0x1c>
            earliest_start = adv_rxend + 98;
   24ee2:	f100 0862 	add.w	r8, r0, #98	; 0x62
   24ee6:	e7dd      	b.n	24ea4 <ble_ll_sched_master_new+0x1c>
            earliest_start = adv_rxend + 93;
   24ee8:	f100 085d 	add.w	r8, r0, #93	; 0x5d
   24eec:	e7da      	b.n	24ea4 <ble_ll_sched_master_new+0x1c>
            BLE_LL_ASSERT(0);
   24eee:	f7e3 f967 	bl	81c0 <hal_debugger_connected>
   24ef2:	b100      	cbz	r0, 24ef6 <ble_ll_sched_master_new+0x6e>
   24ef4:	be01      	bkpt	0x0001
   24ef6:	2300      	movs	r3, #0
   24ef8:	461a      	mov	r2, r3
   24efa:	4619      	mov	r1, r3
   24efc:	4618      	mov	r0, r3
   24efe:	f7e4 fcf5 	bl	98ec <__assert_func>
        connsm->tx_win_off = MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET);
   24f02:	f04f 0a00 	mov.w	sl, #0
   24f06:	f8a5 a072 	strh.w	sl, [r5, #114]	; 0x72
    earliest_start += MYNEWT_VAL(BLE_LL_CONN_INIT_MIN_WIN_OFFSET) *
   24f0a:	4647      	mov	r7, r8
    if (!rc) {
   24f0c:	f1ba 0f00 	cmp.w	sl, #0
   24f10:	d10b      	bne.n	24f2a <ble_ll_sched_master_new+0xa2>
        sch->start_time = earliest_start;
   24f12:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
        sch->end_time = earliest_end;
   24f16:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
        connsm->anchor_point = earliest_start + g_ble_ll_sched_offset_ticks;
   24f1a:	4b35      	ldr	r3, [pc, #212]	; (24ff0 <ble_ll_sched_master_new+0x168>)
   24f1c:	781b      	ldrb	r3, [r3, #0]
   24f1e:	441f      	add	r7, r3
   24f20:	676f      	str	r7, [r5, #116]	; 0x74
        connsm->anchor_point_usecs = 0;
   24f22:	2300      	movs	r3, #0
   24f24:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
        connsm->ce_end_time = earliest_end;
   24f28:	65ee      	str	r6, [r5, #92]	; 0x5c
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   24f2a:	4b30      	ldr	r3, [pc, #192]	; (24fec <ble_ll_sched_master_new+0x164>)
   24f2c:	681c      	ldr	r4, [r3, #0]
    ble_ll_rfmgmt_sched_changed(sch);
   24f2e:	4620      	mov	r0, r4
   24f30:	f7fe fcbe 	bl	238b0 <ble_ll_rfmgmt_sched_changed>
    OS_EXIT_CRITICAL(sr);
   24f34:	9801      	ldr	r0, [sp, #4]
   24f36:	f7e6 fad1 	bl	b4dc <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   24f3a:	6861      	ldr	r1, [r4, #4]
   24f3c:	482a      	ldr	r0, [pc, #168]	; (24fe8 <ble_ll_sched_master_new+0x160>)
   24f3e:	f7f6 fefe 	bl	1bd3e <os_cputime_timer_start>
}
   24f42:	4650      	mov	r0, sl
   24f44:	b003      	add	sp, #12
   24f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                if ((earliest_start - initial_start) <= itvl_t) {
   24f4a:	eba7 0308 	sub.w	r3, r7, r8
   24f4e:	455b      	cmp	r3, fp
   24f50:	d834      	bhi.n	24fbc <ble_ll_sched_master_new+0x134>
                    TAILQ_INSERT_BEFORE(entry, sch, link);
   24f52:	69a3      	ldr	r3, [r4, #24]
   24f54:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
   24f58:	462b      	mov	r3, r5
   24f5a:	f843 4ff0 	str.w	r4, [r3, #240]!
   24f5e:	69a2      	ldr	r2, [r4, #24]
   24f60:	f8c2 9000 	str.w	r9, [r2]
   24f64:	61a3      	str	r3, [r4, #24]
                    rc = 0;
   24f66:	f04f 0a00 	mov.w	sl, #0
   24f6a:	e015      	b.n	24f98 <ble_ll_sched_master_new+0x110>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   24f6c:	6964      	ldr	r4, [r4, #20]
   24f6e:	b18c      	cbz	r4, 24f94 <ble_ll_sched_master_new+0x10c>
            sch->start_time = earliest_start;
   24f70:	f8c5 70e0 	str.w	r7, [r5, #224]	; 0xe0
            sch->end_time = earliest_end;
   24f74:	f8c5 60e4 	str.w	r6, [r5, #228]	; 0xe4
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   24f78:	6863      	ldr	r3, [r4, #4]
   24f7a:	1af3      	subs	r3, r6, r3
   24f7c:	2b00      	cmp	r3, #0
   24f7e:	dde4      	ble.n	24f4a <ble_ll_sched_master_new+0xc2>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   24f80:	4621      	mov	r1, r4
   24f82:	4648      	mov	r0, r9
   24f84:	f7ff fdf6 	bl	24b74 <ble_ll_sched_is_overlap>
   24f88:	2800      	cmp	r0, #0
   24f8a:	d0ef      	beq.n	24f6c <ble_ll_sched_master_new+0xe4>
                earliest_start = entry->end_time;
   24f8c:	68a7      	ldr	r7, [r4, #8]
                earliest_end = earliest_start + dur;
   24f8e:	f107 06a4 	add.w	r6, r7, #164	; 0xa4
   24f92:	e7eb      	b.n	24f6c <ble_ll_sched_master_new+0xe4>
    rc = -1;
   24f94:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
        if (!entry) {
   24f98:	b19c      	cbz	r4, 24fc2 <ble_ll_sched_master_new+0x13a>
        if (!rc) {
   24f9a:	f1ba 0f00 	cmp.w	sl, #0
   24f9e:	d1b5      	bne.n	24f0c <ble_ll_sched_master_new+0x84>
            sch->enqueued = 1;
   24fa0:	2301      	movs	r3, #1
   24fa2:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
            dur = os_cputime_ticks_to_usecs(earliest_start - initial_start);
   24fa6:	eba7 0008 	sub.w	r0, r7, r8
   24faa:	f7f6 feef 	bl	1bd8c <os_cputime_ticks_to_usecs>
            connsm->tx_win_off = dur / BLE_LL_CONN_TX_OFF_USECS;
   24fae:	4b11      	ldr	r3, [pc, #68]	; (24ff4 <ble_ll_sched_master_new+0x16c>)
   24fb0:	fba3 3000 	umull	r3, r0, r3, r0
   24fb4:	0a80      	lsrs	r0, r0, #10
   24fb6:	f8a5 0072 	strh.w	r0, [r5, #114]	; 0x72
   24fba:	e7a7      	b.n	24f0c <ble_ll_sched_master_new+0x84>
    rc = -1;
   24fbc:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   24fc0:	e7ea      	b.n	24f98 <ble_ll_sched_master_new+0x110>
            if ((earliest_start - initial_start) <= itvl_t) {
   24fc2:	eba7 0308 	sub.w	r3, r7, r8
   24fc6:	455b      	cmp	r3, fp
   24fc8:	d8e7      	bhi.n	24f9a <ble_ll_sched_master_new+0x112>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   24fca:	2300      	movs	r3, #0
   24fcc:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
   24fd0:	4a06      	ldr	r2, [pc, #24]	; (24fec <ble_ll_sched_master_new+0x164>)
   24fd2:	6851      	ldr	r1, [r2, #4]
   24fd4:	f8c5 10f4 	str.w	r1, [r5, #244]	; 0xf4
   24fd8:	f8c1 9000 	str.w	r9, [r1]
   24fdc:	f105 01f0 	add.w	r1, r5, #240	; 0xf0
   24fe0:	6051      	str	r1, [r2, #4]
                rc = 0;
   24fe2:	469a      	mov	sl, r3
   24fe4:	e7dc      	b.n	24fa0 <ble_ll_sched_master_new+0x118>
   24fe6:	bf00      	nop
   24fe8:	20008cfc 	.word	0x20008cfc
   24fec:	20008cf4 	.word	0x20008cf4
   24ff0:	20008cf0 	.word	0x20008cf0
   24ff4:	d1b71759 	.word	0xd1b71759

00024ff8 <ble_ll_sched_slave_new>:
{
   24ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24ffc:	4605      	mov	r5, r0
    sch = &connsm->conn_sch;
   24ffe:	f100 07dc 	add.w	r7, r0, #220	; 0xdc
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   25002:	6f44      	ldr	r4, [r0, #116]	; 0x74
   25004:	4b39      	ldr	r3, [pc, #228]	; (250ec <ble_ll_sched_slave_new+0xf4>)
   25006:	7818      	ldrb	r0, [r3, #0]
   25008:	1a24      	subs	r4, r4, r0
        os_cputime_usecs_to_ticks(connsm->slave_cur_window_widening) - 1;
   2500a:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
   2500e:	f7f6 feb5 	bl	1bd7c <os_cputime_usecs_to_ticks>
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   25012:	1a20      	subs	r0, r4, r0
        os_cputime_usecs_to_ticks(connsm->slave_cur_window_widening) - 1;
   25014:	3801      	subs	r0, #1
    sch->start_time = connsm->anchor_point - g_ble_ll_sched_offset_ticks -
   25016:	f8c5 00e0 	str.w	r0, [r5, #224]	; 0xe0
    sch->end_time = connsm->ce_end_time;
   2501a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2501c:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
    sch->remainder = 0;
   25020:	2300      	movs	r3, #0
   25022:	f885 30de 	strb.w	r3, [r5, #222]	; 0xde
    OS_ENTER_CRITICAL(sr);
   25026:	f7e6 fa53 	bl	b4d0 <os_arch_save_sr>
   2502a:	4681      	mov	r9, r0
    if (ble_ll_sched_overlaps_current(sch)) {
   2502c:	4638      	mov	r0, r7
   2502e:	f7ff fde9 	bl	24c04 <ble_ll_sched_overlaps_current>
   25032:	b950      	cbnz	r0, 2504a <ble_ll_sched_slave_new+0x52>
   25034:	4680      	mov	r8, r0
    entry = ble_ll_sched_insert_if_empty(sch);
   25036:	4638      	mov	r0, r7
   25038:	f7ff fdb4 	bl	24ba4 <ble_ll_sched_insert_if_empty>
    if (!entry) {
   2503c:	4604      	mov	r4, r0
   2503e:	2800      	cmp	r0, #0
   25040:	d044      	beq.n	250cc <ble_ll_sched_slave_new+0xd4>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   25042:	482b      	ldr	r0, [pc, #172]	; (250f0 <ble_ll_sched_slave_new+0xf8>)
   25044:	f7f6 fe7f 	bl	1bd46 <os_cputime_timer_stop>
   25048:	e01c      	b.n	25084 <ble_ll_sched_slave_new+0x8c>
        OS_EXIT_CRITICAL(sr);
   2504a:	4648      	mov	r0, r9
   2504c:	f7e6 fa46 	bl	b4dc <os_arch_restore_sr>
        return rc;
   25050:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
   25054:	e043      	b.n	250de <ble_ll_sched_slave_new+0xe6>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   25056:	69a3      	ldr	r3, [r4, #24]
   25058:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
   2505c:	462b      	mov	r3, r5
   2505e:	f843 4ff0 	str.w	r4, [r3, #240]!
   25062:	69a2      	ldr	r2, [r4, #24]
   25064:	6017      	str	r7, [r2, #0]
   25066:	61a3      	str	r3, [r4, #24]
            sch->enqueued = 1;
   25068:	2301      	movs	r3, #1
   2506a:	f885 30dd 	strb.w	r3, [r5, #221]	; 0xdd
   2506e:	4641      	mov	r1, r8
        next_sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   25070:	4b20      	ldr	r3, [pc, #128]	; (250f4 <ble_ll_sched_slave_new+0xfc>)
   25072:	681a      	ldr	r2, [r3, #0]
        if (next_sch == sch) {
   25074:	4297      	cmp	r7, r2
   25076:	d026      	beq.n	250c6 <ble_ll_sched_slave_new+0xce>
    int first = 0;
   25078:	4643      	mov	r3, r8
            sch = next_sch;
   2507a:	4617      	mov	r7, r2
   2507c:	4688      	mov	r8, r1
   2507e:	e026      	b.n	250ce <ble_ll_sched_slave_new+0xd6>
            entry = next_sch;
   25080:	4634      	mov	r4, r6
            if (!entry) {
   25082:	b1a6      	cbz	r6, 250ae <ble_ll_sched_slave_new+0xb6>
            next_sch = entry->link.tqe_next;
   25084:	6966      	ldr	r6, [r4, #20]
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   25086:	f8d5 30e4 	ldr.w	r3, [r5, #228]	; 0xe4
   2508a:	6862      	ldr	r2, [r4, #4]
   2508c:	1a9b      	subs	r3, r3, r2
   2508e:	2b00      	cmp	r3, #0
   25090:	dde1      	ble.n	25056 <ble_ll_sched_slave_new+0x5e>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   25092:	4621      	mov	r1, r4
   25094:	4638      	mov	r0, r7
   25096:	f7ff fd6d 	bl	24b74 <ble_ll_sched_is_overlap>
   2509a:	2800      	cmp	r0, #0
   2509c:	d0f0      	beq.n	25080 <ble_ll_sched_slave_new+0x88>
                if (ble_ll_sched_conn_overlap(entry)) {
   2509e:	4620      	mov	r0, r4
   250a0:	f7ff fd92 	bl	24bc8 <ble_ll_sched_conn_overlap>
   250a4:	2800      	cmp	r0, #0
   250a6:	d0eb      	beq.n	25080 <ble_ll_sched_slave_new+0x88>
    rc = -1;
   250a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   250ac:	e7e0      	b.n	25070 <ble_ll_sched_slave_new+0x78>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   250ae:	2300      	movs	r3, #0
   250b0:	f8c5 30f0 	str.w	r3, [r5, #240]	; 0xf0
   250b4:	4b0f      	ldr	r3, [pc, #60]	; (250f4 <ble_ll_sched_slave_new+0xfc>)
   250b6:	685a      	ldr	r2, [r3, #4]
   250b8:	f8c5 20f4 	str.w	r2, [r5, #244]	; 0xf4
   250bc:	6017      	str	r7, [r2, #0]
   250be:	f105 02f0 	add.w	r2, r5, #240	; 0xf0
   250c2:	605a      	str	r2, [r3, #4]
   250c4:	e7d0      	b.n	25068 <ble_ll_sched_slave_new+0x70>
        if (next_sch == sch) {
   250c6:	4688      	mov	r8, r1
            first = 1;
   250c8:	2301      	movs	r3, #1
   250ca:	e000      	b.n	250ce <ble_ll_sched_slave_new+0xd6>
        first = 1;
   250cc:	2301      	movs	r3, #1
    if (first) {
   250ce:	b94b      	cbnz	r3, 250e4 <ble_ll_sched_slave_new+0xec>
    OS_EXIT_CRITICAL(sr);
   250d0:	4648      	mov	r0, r9
   250d2:	f7e6 fa03 	bl	b4dc <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   250d6:	6879      	ldr	r1, [r7, #4]
   250d8:	4805      	ldr	r0, [pc, #20]	; (250f0 <ble_ll_sched_slave_new+0xf8>)
   250da:	f7f6 fe30 	bl	1bd3e <os_cputime_timer_start>
}
   250de:	4640      	mov	r0, r8
   250e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ble_ll_rfmgmt_sched_changed(sch);
   250e4:	4638      	mov	r0, r7
   250e6:	f7fe fbe3 	bl	238b0 <ble_ll_rfmgmt_sched_changed>
   250ea:	e7f1      	b.n	250d0 <ble_ll_sched_slave_new+0xd8>
   250ec:	20008cf0 	.word	0x20008cf0
   250f0:	20008cfc 	.word	0x20008cfc
   250f4:	20008cf4 	.word	0x20008cf4

000250f8 <ble_ll_sched_adv_new>:
{
   250f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   250fc:	4605      	mov	r5, r0
   250fe:	460f      	mov	r7, r1
   25100:	4691      	mov	r9, r2
    duration = sch->end_time - sch->start_time;
   25102:	6886      	ldr	r6, [r0, #8]
   25104:	6843      	ldr	r3, [r0, #4]
   25106:	1af6      	subs	r6, r6, r3
    OS_ENTER_CRITICAL(sr);
   25108:	f7e6 f9e2 	bl	b4d0 <os_arch_save_sr>
   2510c:	4680      	mov	r8, r0
    entry = ble_ll_sched_insert_if_empty(sch);
   2510e:	4628      	mov	r0, r5
   25110:	f7ff fd48 	bl	24ba4 <ble_ll_sched_insert_if_empty>
    if (!entry) {
   25114:	b128      	cbz	r0, 25122 <ble_ll_sched_adv_new+0x2a>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   25116:	4829      	ldr	r0, [pc, #164]	; (251bc <ble_ll_sched_adv_new+0xc4>)
   25118:	f7f6 fe15 	bl	1bd46 <os_cputime_timer_stop>
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   2511c:	4b28      	ldr	r3, [pc, #160]	; (251c0 <ble_ll_sched_adv_new+0xc8>)
   2511e:	681c      	ldr	r4, [r3, #0]
   25120:	e022      	b.n	25168 <ble_ll_sched_adv_new+0x70>
        adv_start = sch->start_time;
   25122:	6869      	ldr	r1, [r5, #4]
   25124:	462c      	mov	r4, r5
   25126:	e00d      	b.n	25144 <ble_ll_sched_adv_new+0x4c>
                TAILQ_INSERT_BEFORE(entry, sch, link);
   25128:	69a3      	ldr	r3, [r4, #24]
   2512a:	61ab      	str	r3, [r5, #24]
   2512c:	616c      	str	r4, [r5, #20]
   2512e:	69a3      	ldr	r3, [r4, #24]
   25130:	601d      	str	r5, [r3, #0]
   25132:	f105 0314 	add.w	r3, r5, #20
   25136:	61a3      	str	r3, [r4, #24]
        if (!entry) {
   25138:	b344      	cbz	r4, 2518c <ble_ll_sched_adv_new+0x94>
        adv_start = sch->start_time;
   2513a:	6869      	ldr	r1, [r5, #4]
        sch->enqueued = 1;
   2513c:	2301      	movs	r3, #1
   2513e:	706b      	strb	r3, [r5, #1]
        sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   25140:	4b1f      	ldr	r3, [pc, #124]	; (251c0 <ble_ll_sched_adv_new+0xc8>)
   25142:	681c      	ldr	r4, [r3, #0]
    if (cb) {
   25144:	b117      	cbz	r7, 2514c <ble_ll_sched_adv_new+0x54>
        cb((struct ble_ll_adv_sm *)orig->cb_arg, adv_start, arg);
   25146:	464a      	mov	r2, r9
   25148:	68e8      	ldr	r0, [r5, #12]
   2514a:	47b8      	blx	r7
    if (orig == sch) {
   2514c:	42ac      	cmp	r4, r5
   2514e:	d027      	beq.n	251a0 <ble_ll_sched_adv_new+0xa8>
    OS_EXIT_CRITICAL(sr);
   25150:	4640      	mov	r0, r8
   25152:	f7e6 f9c3 	bl	b4dc <os_arch_restore_sr>
    BLE_LL_ASSERT(sch != NULL);
   25156:	b33c      	cbz	r4, 251a8 <ble_ll_sched_adv_new+0xb0>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   25158:	6861      	ldr	r1, [r4, #4]
   2515a:	4818      	ldr	r0, [pc, #96]	; (251bc <ble_ll_sched_adv_new+0xc4>)
   2515c:	f7f6 fdef 	bl	1bd3e <os_cputime_timer_start>
}
   25160:	2000      	movs	r0, #0
   25162:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        TAILQ_FOREACH(entry, &g_ble_ll_sched_q, link) {
   25166:	6964      	ldr	r4, [r4, #20]
   25168:	2c00      	cmp	r4, #0
   2516a:	d0e5      	beq.n	25138 <ble_ll_sched_adv_new+0x40>
            if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   2516c:	68ab      	ldr	r3, [r5, #8]
   2516e:	6862      	ldr	r2, [r4, #4]
   25170:	1a9b      	subs	r3, r3, r2
   25172:	2b00      	cmp	r3, #0
   25174:	ddd8      	ble.n	25128 <ble_ll_sched_adv_new+0x30>
            if (ble_ll_sched_is_overlap(sch, entry)) {
   25176:	4621      	mov	r1, r4
   25178:	4628      	mov	r0, r5
   2517a:	f7ff fcfb 	bl	24b74 <ble_ll_sched_is_overlap>
   2517e:	2800      	cmp	r0, #0
   25180:	d0f1      	beq.n	25166 <ble_ll_sched_adv_new+0x6e>
                sch->start_time = entry->end_time;
   25182:	68a3      	ldr	r3, [r4, #8]
   25184:	606b      	str	r3, [r5, #4]
                sch->end_time = sch->start_time + duration;
   25186:	4433      	add	r3, r6
   25188:	60ab      	str	r3, [r5, #8]
   2518a:	e7ec      	b.n	25166 <ble_ll_sched_adv_new+0x6e>
            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   2518c:	2300      	movs	r3, #0
   2518e:	616b      	str	r3, [r5, #20]
   25190:	4b0b      	ldr	r3, [pc, #44]	; (251c0 <ble_ll_sched_adv_new+0xc8>)
   25192:	685a      	ldr	r2, [r3, #4]
   25194:	61aa      	str	r2, [r5, #24]
   25196:	6015      	str	r5, [r2, #0]
   25198:	f105 0214 	add.w	r2, r5, #20
   2519c:	605a      	str	r2, [r3, #4]
   2519e:	e7cc      	b.n	2513a <ble_ll_sched_adv_new+0x42>
        ble_ll_rfmgmt_sched_changed(sch);
   251a0:	4620      	mov	r0, r4
   251a2:	f7fe fb85 	bl	238b0 <ble_ll_rfmgmt_sched_changed>
   251a6:	e7d3      	b.n	25150 <ble_ll_sched_adv_new+0x58>
    BLE_LL_ASSERT(sch != NULL);
   251a8:	f7e3 f80a 	bl	81c0 <hal_debugger_connected>
   251ac:	b100      	cbz	r0, 251b0 <ble_ll_sched_adv_new+0xb8>
   251ae:	be01      	bkpt	0x0001
   251b0:	2300      	movs	r3, #0
   251b2:	461a      	mov	r2, r3
   251b4:	4619      	mov	r1, r3
   251b6:	4618      	mov	r0, r3
   251b8:	f7e4 fb98 	bl	98ec <__assert_func>
   251bc:	20008cfc 	.word	0x20008cfc
   251c0:	20008cf4 	.word	0x20008cf4

000251c4 <ble_ll_sched_adv_reschedule>:
{
   251c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   251c8:	b083      	sub	sp, #12
   251ca:	4604      	mov	r4, r0
   251cc:	468b      	mov	fp, r1
   251ce:	4692      	mov	sl, r2
    duration = sch->end_time - sch->start_time;
   251d0:	6883      	ldr	r3, [r0, #8]
   251d2:	6842      	ldr	r2, [r0, #4]
   251d4:	eba3 0802 	sub.w	r8, r3, r2
    sch->end_time += max_delay_ticks;
   251d8:	4453      	add	r3, sl
   251da:	6083      	str	r3, [r0, #8]
    OS_ENTER_CRITICAL(sr);
   251dc:	f7e6 f978 	bl	b4d0 <os_arch_save_sr>
   251e0:	9001      	str	r0, [sp, #4]
    entry = ble_ll_sched_insert_if_empty(sch);
   251e2:	4620      	mov	r0, r4
   251e4:	f7ff fcde 	bl	24ba4 <ble_ll_sched_insert_if_empty>
    if (entry) {
   251e8:	2800      	cmp	r0, #0
   251ea:	d059      	beq.n	252a0 <ble_ll_sched_adv_reschedule+0xdc>
   251ec:	4606      	mov	r6, r0
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   251ee:	4850      	ldr	r0, [pc, #320]	; (25330 <ble_ll_sched_adv_reschedule+0x16c>)
   251f0:	f7f6 fda9 	bl	1bd46 <os_cputime_timer_stop>
    end_overlap = NULL;
   251f4:	f04f 0900 	mov.w	r9, #0
    start_overlap = NULL;
   251f8:	464d      	mov	r5, r9
   251fa:	e006      	b.n	2520a <ble_ll_sched_adv_reschedule+0x46>
                if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   251fc:	68a3      	ldr	r3, [r4, #8]
   251fe:	6872      	ldr	r2, [r6, #4]
   25200:	1a9b      	subs	r3, r3, r2
   25202:	2b00      	cmp	r3, #0
   25204:	dd0e      	ble.n	25224 <ble_ll_sched_adv_reschedule+0x60>
            entry = next_sch;
   25206:	463e      	mov	r6, r7
            if (entry == NULL) {
   25208:	b16f      	cbz	r7, 25226 <ble_ll_sched_adv_reschedule+0x62>
            next_sch = entry->link.tqe_next;
   2520a:	6977      	ldr	r7, [r6, #20]
            if (ble_ll_sched_is_overlap(sch, entry)) {
   2520c:	4631      	mov	r1, r6
   2520e:	4620      	mov	r0, r4
   25210:	f7ff fcb0 	bl	24b74 <ble_ll_sched_is_overlap>
   25214:	2800      	cmp	r0, #0
   25216:	d0f1      	beq.n	251fc <ble_ll_sched_adv_reschedule+0x38>
                if (start_overlap == NULL) {
   25218:	b10d      	cbz	r5, 2521e <ble_ll_sched_adv_reschedule+0x5a>
                    end_overlap = entry;
   2521a:	46b1      	mov	r9, r6
   2521c:	e7f3      	b.n	25206 <ble_ll_sched_adv_reschedule+0x42>
                    end_overlap = entry;
   2521e:	46b1      	mov	r9, r6
                    start_overlap = entry;
   25220:	4635      	mov	r5, r6
   25222:	e7f0      	b.n	25206 <ble_ll_sched_adv_reschedule+0x42>
                    before = entry;
   25224:	4637      	mov	r7, r6
        if (start_overlap == NULL) {
   25226:	b1ed      	cbz	r5, 25264 <ble_ll_sched_adv_reschedule+0xa0>
            orig_start = sch->start_time;
   25228:	6866      	ldr	r6, [r4, #4]
            sch->end_time = sch->start_time + duration;
   2522a:	eb08 0306 	add.w	r3, r8, r6
   2522e:	60a3      	str	r3, [r4, #8]
                next_sch = entry->link.tqe_next;
   25230:	696b      	ldr	r3, [r5, #20]
                if ((int32_t)(sch->end_time - entry->start_time) <= 0) {
   25232:	68a2      	ldr	r2, [r4, #8]
   25234:	6869      	ldr	r1, [r5, #4]
   25236:	1a50      	subs	r0, r2, r1
   25238:	2800      	cmp	r0, #0
   2523a:	dd27      	ble.n	2528c <ble_ll_sched_adv_reschedule+0xc8>
                    sch->start_time = entry->end_time;
   2523c:	68aa      	ldr	r2, [r5, #8]
   2523e:	6062      	str	r2, [r4, #4]
                    sch->end_time = sch->start_time + duration;
   25240:	eb02 0108 	add.w	r1, r2, r8
   25244:	60a1      	str	r1, [r4, #8]
                if (entry == end_overlap) {
   25246:	454d      	cmp	r5, r9
   25248:	d047      	beq.n	252da <ble_ll_sched_adv_reschedule+0x116>
                entry = next_sch;
   2524a:	461d      	mov	r5, r3
                BLE_LL_ASSERT(entry != NULL);
   2524c:	2b00      	cmp	r3, #0
   2524e:	d1ef      	bne.n	25230 <ble_ll_sched_adv_reschedule+0x6c>
   25250:	f7e2 ffb6 	bl	81c0 <hal_debugger_connected>
   25254:	b100      	cbz	r0, 25258 <ble_ll_sched_adv_reschedule+0x94>
   25256:	be01      	bkpt	0x0001
   25258:	2300      	movs	r3, #0
   2525a:	461a      	mov	r2, r3
   2525c:	4619      	mov	r1, r3
   2525e:	4618      	mov	r0, r3
   25260:	f7e4 fb44 	bl	98ec <__assert_func>
            if (before) {
   25264:	b147      	cbz	r7, 25278 <ble_ll_sched_adv_reschedule+0xb4>
                TAILQ_INSERT_BEFORE(before, sch, link);
   25266:	69bb      	ldr	r3, [r7, #24]
   25268:	61a3      	str	r3, [r4, #24]
   2526a:	6167      	str	r7, [r4, #20]
   2526c:	69bb      	ldr	r3, [r7, #24]
   2526e:	601c      	str	r4, [r3, #0]
   25270:	f104 0314 	add.w	r3, r4, #20
   25274:	61bb      	str	r3, [r7, #24]
   25276:	e013      	b.n	252a0 <ble_ll_sched_adv_reschedule+0xdc>
                TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   25278:	2300      	movs	r3, #0
   2527a:	6163      	str	r3, [r4, #20]
   2527c:	4b2d      	ldr	r3, [pc, #180]	; (25334 <ble_ll_sched_adv_reschedule+0x170>)
   2527e:	685a      	ldr	r2, [r3, #4]
   25280:	61a2      	str	r2, [r4, #24]
   25282:	6014      	str	r4, [r2, #0]
   25284:	f104 0214 	add.w	r2, r4, #20
   25288:	605a      	str	r2, [r3, #4]
   2528a:	e009      	b.n	252a0 <ble_ll_sched_adv_reschedule+0xdc>
                    rand_ticks = entry->start_time - sch->end_time;
   2528c:	eba1 0a02 	sub.w	sl, r1, r2
                    TAILQ_INSERT_BEFORE(before, sch, link);
   25290:	69ab      	ldr	r3, [r5, #24]
   25292:	61a3      	str	r3, [r4, #24]
   25294:	6165      	str	r5, [r4, #20]
   25296:	69ab      	ldr	r3, [r5, #24]
   25298:	601c      	str	r4, [r3, #0]
   2529a:	f104 0314 	add.w	r3, r4, #20
   2529e:	61ab      	str	r3, [r5, #24]
        sch->enqueued = 1;
   252a0:	2301      	movs	r3, #1
   252a2:	7063      	strb	r3, [r4, #1]
        if (rand_ticks) {
   252a4:	f1ba 0f00 	cmp.w	sl, #0
   252a8:	d130      	bne.n	2530c <ble_ll_sched_adv_reschedule+0x148>
        sch->end_time = sch->start_time + duration;
   252aa:	6862      	ldr	r2, [r4, #4]
   252ac:	eb02 0308 	add.w	r3, r2, r8
   252b0:	60a3      	str	r3, [r4, #8]
        *start = sch->start_time;
   252b2:	f8cb 2000 	str.w	r2, [fp]
        if (sch == TAILQ_FIRST(&g_ble_ll_sched_q)) {
   252b6:	4b1f      	ldr	r3, [pc, #124]	; (25334 <ble_ll_sched_adv_reschedule+0x170>)
   252b8:	681b      	ldr	r3, [r3, #0]
   252ba:	42a3      	cmp	r3, r4
   252bc:	d030      	beq.n	25320 <ble_ll_sched_adv_reschedule+0x15c>
   252be:	2400      	movs	r4, #0
    OS_EXIT_CRITICAL(sr);
   252c0:	9801      	ldr	r0, [sp, #4]
   252c2:	f7e6 f90b 	bl	b4dc <os_arch_restore_sr>
    sch = TAILQ_FIRST(&g_ble_ll_sched_q);
   252c6:	4b1b      	ldr	r3, [pc, #108]	; (25334 <ble_ll_sched_adv_reschedule+0x170>)
   252c8:	681b      	ldr	r3, [r3, #0]
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   252ca:	6859      	ldr	r1, [r3, #4]
   252cc:	4818      	ldr	r0, [pc, #96]	; (25330 <ble_ll_sched_adv_reschedule+0x16c>)
   252ce:	f7f6 fd36 	bl	1bd3e <os_cputime_timer_start>
}
   252d2:	4620      	mov	r0, r4
   252d4:	b003      	add	sp, #12
   252d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   252da:	4456      	add	r6, sl
   252dc:	1ab2      	subs	r2, r6, r2
                    if (rand_ticks > max_delay_ticks) {
   252de:	4592      	cmp	sl, r2
   252e0:	d323      	bcc.n	2532a <ble_ll_sched_adv_reschedule+0x166>
                        if (next_sch == NULL) {
   252e2:	b14b      	cbz	r3, 252f8 <ble_ll_sched_adv_reschedule+0x134>
                            TAILQ_INSERT_BEFORE(next_sch, sch, link);
   252e4:	6999      	ldr	r1, [r3, #24]
   252e6:	61a1      	str	r1, [r4, #24]
   252e8:	6163      	str	r3, [r4, #20]
   252ea:	6999      	ldr	r1, [r3, #24]
   252ec:	600c      	str	r4, [r1, #0]
   252ee:	f104 0114 	add.w	r1, r4, #20
   252f2:	6199      	str	r1, [r3, #24]
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   252f4:	4692      	mov	sl, r2
   252f6:	e7d3      	b.n	252a0 <ble_ll_sched_adv_reschedule+0xdc>
                            TAILQ_INSERT_TAIL(&g_ble_ll_sched_q, sch, link);
   252f8:	6163      	str	r3, [r4, #20]
   252fa:	4b0e      	ldr	r3, [pc, #56]	; (25334 <ble_ll_sched_adv_reschedule+0x170>)
   252fc:	6859      	ldr	r1, [r3, #4]
   252fe:	61a1      	str	r1, [r4, #24]
   25300:	600c      	str	r4, [r1, #0]
   25302:	f104 0114 	add.w	r1, r4, #20
   25306:	6059      	str	r1, [r3, #4]
                    rand_ticks = (orig_start + max_delay_ticks) - sch->start_time;
   25308:	4692      	mov	sl, r2
   2530a:	e7c9      	b.n	252a0 <ble_ll_sched_adv_reschedule+0xdc>
   2530c:	f7e6 fa22 	bl	b754 <lrand48>
            sch->start_time += rand() % rand_ticks;
   25310:	fbb0 f3fa 	udiv	r3, r0, sl
   25314:	fb0a 0a13 	mls	sl, sl, r3, r0
   25318:	6863      	ldr	r3, [r4, #4]
   2531a:	4453      	add	r3, sl
   2531c:	6063      	str	r3, [r4, #4]
   2531e:	e7c4      	b.n	252aa <ble_ll_sched_adv_reschedule+0xe6>
            ble_ll_rfmgmt_sched_changed(sch);
   25320:	4620      	mov	r0, r4
   25322:	f7fe fac5 	bl	238b0 <ble_ll_rfmgmt_sched_changed>
   25326:	2400      	movs	r4, #0
   25328:	e7ca      	b.n	252c0 <ble_ll_sched_adv_reschedule+0xfc>
                        rc = -1;
   2532a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   2532e:	e7c7      	b.n	252c0 <ble_ll_sched_adv_reschedule+0xfc>
   25330:	20008cfc 	.word	0x20008cfc
   25334:	20008cf4 	.word	0x20008cf4

00025338 <ble_ll_sched_adv_resched_pdu>:
{
   25338:	b570      	push	{r4, r5, r6, lr}
   2533a:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   2533c:	f7e6 f8c8 	bl	b4d0 <os_arch_save_sr>
   25340:	4606      	mov	r6, r0
    lls = ble_ll_state_get();
   25342:	f7f7 ff97 	bl	1d274 <ble_ll_state_get>
    if ((lls == BLE_LL_STATE_ADV) || (lls == BLE_LL_STATE_CONNECTION) ||
   25346:	2801      	cmp	r0, #1
   25348:	d027      	beq.n	2539a <ble_ll_sched_adv_resched_pdu+0x62>
   2534a:	2804      	cmp	r0, #4
   2534c:	d025      	beq.n	2539a <ble_ll_sched_adv_resched_pdu+0x62>
   2534e:	2806      	cmp	r0, #6
   25350:	d023      	beq.n	2539a <ble_ll_sched_adv_resched_pdu+0x62>
    entry = ble_ll_sched_insert_if_empty(sch);
   25352:	4620      	mov	r0, r4
   25354:	f7ff fc26 	bl	24ba4 <ble_ll_sched_insert_if_empty>
    if (entry) {
   25358:	4605      	mov	r5, r0
   2535a:	b188      	cbz	r0, 25380 <ble_ll_sched_adv_resched_pdu+0x48>
        if (ble_ll_sched_is_overlap(sch, entry)) {
   2535c:	4601      	mov	r1, r0
   2535e:	4620      	mov	r0, r4
   25360:	f7ff fc08 	bl	24b74 <ble_ll_sched_is_overlap>
   25364:	b9c8      	cbnz	r0, 2539a <ble_ll_sched_adv_resched_pdu+0x62>
        os_cputime_timer_stop(&g_ble_ll_sched_timer);
   25366:	4810      	ldr	r0, [pc, #64]	; (253a8 <ble_ll_sched_adv_resched_pdu+0x70>)
   25368:	f7f6 fced 	bl	1bd46 <os_cputime_timer_stop>
        TAILQ_INSERT_BEFORE(entry, sch, link);
   2536c:	69ab      	ldr	r3, [r5, #24]
   2536e:	61a3      	str	r3, [r4, #24]
   25370:	6165      	str	r5, [r4, #20]
   25372:	69ab      	ldr	r3, [r5, #24]
   25374:	601c      	str	r4, [r3, #0]
   25376:	f104 0314 	add.w	r3, r4, #20
   2537a:	61ab      	str	r3, [r5, #24]
        sch->enqueued = 1;
   2537c:	2301      	movs	r3, #1
   2537e:	7063      	strb	r3, [r4, #1]
    ble_ll_rfmgmt_sched_changed(TAILQ_FIRST(&g_ble_ll_sched_q));
   25380:	4b0a      	ldr	r3, [pc, #40]	; (253ac <ble_ll_sched_adv_resched_pdu+0x74>)
   25382:	6818      	ldr	r0, [r3, #0]
   25384:	f7fe fa94 	bl	238b0 <ble_ll_rfmgmt_sched_changed>
    OS_EXIT_CRITICAL(sr);
   25388:	4630      	mov	r0, r6
   2538a:	f7e6 f8a7 	bl	b4dc <os_arch_restore_sr>
    os_cputime_timer_start(&g_ble_ll_sched_timer, sch->start_time);
   2538e:	6861      	ldr	r1, [r4, #4]
   25390:	4805      	ldr	r0, [pc, #20]	; (253a8 <ble_ll_sched_adv_resched_pdu+0x70>)
   25392:	f7f6 fcd4 	bl	1bd3e <os_cputime_timer_start>
    return 0;
   25396:	2000      	movs	r0, #0
}
   25398:	bd70      	pop	{r4, r5, r6, pc}
    OS_EXIT_CRITICAL(sr);
   2539a:	4630      	mov	r0, r6
   2539c:	f7e6 f89e 	bl	b4dc <os_arch_restore_sr>
    return -1;
   253a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   253a4:	e7f8      	b.n	25398 <ble_ll_sched_adv_resched_pdu+0x60>
   253a6:	bf00      	nop
   253a8:	20008cfc 	.word	0x20008cfc
   253ac:	20008cf4 	.word	0x20008cf4

000253b0 <ble_ll_sched_rmv_elem>:
{
   253b0:	b570      	push	{r4, r5, r6, lr}
    if (!sch) {
   253b2:	2800      	cmp	r0, #0
   253b4:	d030      	beq.n	25418 <ble_ll_sched_rmv_elem+0x68>
   253b6:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   253b8:	f7e6 f88a 	bl	b4d0 <os_arch_save_sr>
   253bc:	4605      	mov	r5, r0
    if (sch->enqueued) {
   253be:	7863      	ldrb	r3, [r4, #1]
   253c0:	b323      	cbz	r3, 2540c <ble_ll_sched_rmv_elem+0x5c>
        first = TAILQ_FIRST(&g_ble_ll_sched_q);
   253c2:	4b16      	ldr	r3, [pc, #88]	; (2541c <ble_ll_sched_rmv_elem+0x6c>)
   253c4:	681e      	ldr	r6, [r3, #0]
        if (first == sch) {
   253c6:	42b4      	cmp	r4, r6
   253c8:	d00c      	beq.n	253e4 <ble_ll_sched_rmv_elem+0x34>
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   253ca:	6963      	ldr	r3, [r4, #20]
   253cc:	b173      	cbz	r3, 253ec <ble_ll_sched_rmv_elem+0x3c>
   253ce:	69a2      	ldr	r2, [r4, #24]
   253d0:	619a      	str	r2, [r3, #24]
   253d2:	69a3      	ldr	r3, [r4, #24]
   253d4:	6962      	ldr	r2, [r4, #20]
   253d6:	601a      	str	r2, [r3, #0]
        sch->enqueued = 0;
   253d8:	2300      	movs	r3, #0
   253da:	7063      	strb	r3, [r4, #1]
        if (first == sch) {
   253dc:	42b4      	cmp	r4, r6
   253de:	d009      	beq.n	253f4 <ble_ll_sched_rmv_elem+0x44>
        rc = 0;
   253e0:	2400      	movs	r4, #0
   253e2:	e014      	b.n	2540e <ble_ll_sched_rmv_elem+0x5e>
            os_cputime_timer_stop(&g_ble_ll_sched_timer);
   253e4:	480e      	ldr	r0, [pc, #56]	; (25420 <ble_ll_sched_rmv_elem+0x70>)
   253e6:	f7f6 fcae 	bl	1bd46 <os_cputime_timer_stop>
   253ea:	e7ee      	b.n	253ca <ble_ll_sched_rmv_elem+0x1a>
        TAILQ_REMOVE(&g_ble_ll_sched_q, sch, link);
   253ec:	69a2      	ldr	r2, [r4, #24]
   253ee:	4b0b      	ldr	r3, [pc, #44]	; (2541c <ble_ll_sched_rmv_elem+0x6c>)
   253f0:	605a      	str	r2, [r3, #4]
   253f2:	e7ee      	b.n	253d2 <ble_ll_sched_rmv_elem+0x22>
            first = TAILQ_FIRST(&g_ble_ll_sched_q);
   253f4:	4b09      	ldr	r3, [pc, #36]	; (2541c <ble_ll_sched_rmv_elem+0x6c>)
   253f6:	681c      	ldr	r4, [r3, #0]
            if (first) {
   253f8:	b11c      	cbz	r4, 25402 <ble_ll_sched_rmv_elem+0x52>
                os_cputime_timer_start(&g_ble_ll_sched_timer, first->start_time);
   253fa:	6861      	ldr	r1, [r4, #4]
   253fc:	4808      	ldr	r0, [pc, #32]	; (25420 <ble_ll_sched_rmv_elem+0x70>)
   253fe:	f7f6 fc9e 	bl	1bd3e <os_cputime_timer_start>
            ble_ll_rfmgmt_sched_changed(first);
   25402:	4620      	mov	r0, r4
   25404:	f7fe fa54 	bl	238b0 <ble_ll_rfmgmt_sched_changed>
        rc = 0;
   25408:	2400      	movs	r4, #0
   2540a:	e000      	b.n	2540e <ble_ll_sched_rmv_elem+0x5e>
    int rc = 1;
   2540c:	2401      	movs	r4, #1
    OS_EXIT_CRITICAL(sr);
   2540e:	4628      	mov	r0, r5
   25410:	f7e6 f864 	bl	b4dc <os_arch_restore_sr>
}
   25414:	4620      	mov	r0, r4
   25416:	bd70      	pop	{r4, r5, r6, pc}
        return rc;
   25418:	2401      	movs	r4, #1
   2541a:	e7fb      	b.n	25414 <ble_ll_sched_rmv_elem+0x64>
   2541c:	20008cf4 	.word	0x20008cf4
   25420:	20008cfc 	.word	0x20008cfc

00025424 <ble_ll_sched_next_time>:
 *
 * @return int 0: No events are scheduled 1: there is an upcoming event
 */
int
ble_ll_sched_next_time(uint32_t *next_event_time)
{
   25424:	b510      	push	{r4, lr}
   25426:	4604      	mov	r4, r0
    int rc;
    os_sr_t sr;
    struct ble_ll_sched_item *first;

    rc = 0;
    OS_ENTER_CRITICAL(sr);
   25428:	f7e6 f852 	bl	b4d0 <os_arch_save_sr>
    first = TAILQ_FIRST(&g_ble_ll_sched_q);
   2542c:	4b05      	ldr	r3, [pc, #20]	; (25444 <ble_ll_sched_next_time+0x20>)
   2542e:	681b      	ldr	r3, [r3, #0]
    if (first) {
   25430:	b133      	cbz	r3, 25440 <ble_ll_sched_next_time+0x1c>
        *next_event_time = first->start_time;
   25432:	685b      	ldr	r3, [r3, #4]
   25434:	6023      	str	r3, [r4, #0]
        rc = 1;
   25436:	2401      	movs	r4, #1
    }
    OS_EXIT_CRITICAL(sr);
   25438:	f7e6 f850 	bl	b4dc <os_arch_restore_sr>

    return rc;
}
   2543c:	4620      	mov	r0, r4
   2543e:	bd10      	pop	{r4, pc}
    rc = 0;
   25440:	2400      	movs	r4, #0
   25442:	e7f9      	b.n	25438 <ble_ll_sched_next_time+0x14>
   25444:	20008cf4 	.word	0x20008cf4

00025448 <ble_ll_sched_stop>:
 *
 * Context: Link Layer task
 */
void
ble_ll_sched_stop(void)
{
   25448:	b508      	push	{r3, lr}
    os_cputime_timer_stop(&g_ble_ll_sched_timer);
   2544a:	4802      	ldr	r0, [pc, #8]	; (25454 <ble_ll_sched_stop+0xc>)
   2544c:	f7f6 fc7b 	bl	1bd46 <os_cputime_timer_stop>
}
   25450:	bd08      	pop	{r3, pc}
   25452:	bf00      	nop
   25454:	20008cfc 	.word	0x20008cfc

00025458 <ble_ll_sched_init>:
 *
 * @return int
 */
int
ble_ll_sched_init(void)
{
   25458:	b508      	push	{r3, lr}
    /*
     * This is the offset from the start of the scheduled item until the actual
     * tx/rx should occur, in ticks. We also "round up" to the nearest tick.
     */
    g_ble_ll_sched_offset_ticks =
        (uint8_t) os_cputime_usecs_to_ticks(XCVR_TX_SCHED_DELAY_USECS + 30);
   2545a:	20df      	movs	r0, #223	; 0xdf
   2545c:	f7f6 fc8e 	bl	1bd7c <os_cputime_usecs_to_ticks>
    g_ble_ll_sched_offset_ticks =
   25460:	4b04      	ldr	r3, [pc, #16]	; (25474 <ble_ll_sched_init+0x1c>)
   25462:	7018      	strb	r0, [r3, #0]

    /* Initialize cputimer for the scheduler */
    os_cputime_timer_init(&g_ble_ll_sched_timer, ble_ll_sched_run, NULL);
   25464:	2200      	movs	r2, #0
   25466:	4904      	ldr	r1, [pc, #16]	; (25478 <ble_ll_sched_init+0x20>)
   25468:	4804      	ldr	r0, [pc, #16]	; (2547c <ble_ll_sched_init+0x24>)
   2546a:	f7f6 fc4a 	bl	1bd02 <os_cputime_timer_init>
    g_ble_ll_sched_data.sch_ticks_per_epoch = BLE_LL_SCHED_PERIODS *
        g_ble_ll_sched_data.sch_ticks_per_period;
#endif

    return 0;
}
   2546e:	2000      	movs	r0, #0
   25470:	bd08      	pop	{r3, pc}
   25472:	bf00      	nop
   25474:	20008cf0 	.word	0x20008cf0
   25478:	00024c9d 	.word	0x00024c9d
   2547c:	20008cfc 	.word	0x20008cfc

00025480 <ble_ll_utils_calc_access_addr>:
    500, 250, 150, 100, 75, 50, 30, 20
};

uint32_t
ble_ll_utils_calc_access_addr(void)
{
   25480:	b570      	push	{r4, r5, r6, lr}
   25482:	f7e6 f967 	bl	b754 <lrand48>

    /* Calculate a random access address */
    aa = 0;
    while (1) {
        /* Get two, 16-bit random numbers */
        aa_low = rand() & 0xFFFF;
   25486:	b286      	uxth	r6, r0
   25488:	f7e6 f964 	bl	b754 <lrand48>
        aa_high = rand() & 0xFFFF;
   2548c:	b283      	uxth	r3, r0

        /* All four bytes cannot be equal */
        if (aa_low == aa_high) {
   2548e:	429e      	cmp	r6, r3
   25490:	d0f7      	beq.n	25482 <ble_ll_utils_calc_access_addr+0x2>
   25492:	4605      	mov	r5, r0
            continue;
        }

        /* Upper 6 bits must have 2 transitions */
        tmp = (int16_t)aa_high >> 10;
   25494:	f340 2085 	sbfx	r0, r0, #10, #6
        if (__builtin_popcount(tmp ^ (tmp >> 1)) < 2) {
   25498:	ea80 0060 	eor.w	r0, r0, r0, asr #1
   2549c:	f7f6 ff2a 	bl	1c2f4 <__popcountsi2>
   254a0:	2801      	cmp	r0, #1
   254a2:	ddee      	ble.n	25482 <ble_ll_utils_calc_access_addr+0x2>
            continue;
        }

        /* Cannot be access address or be 1 bit different */
        aa = aa_high;
        aa = (aa << 16) | aa_low;
   254a4:	ea46 4005 	orr.w	r0, r6, r5, lsl #16
        bits_diff = 0;
        temp = aa ^ BLE_ACCESS_ADDR_ADV;
   254a8:	4921      	ldr	r1, [pc, #132]	; (25530 <ble_ll_utils_calc_access_addr+0xb0>)
   254aa:	4041      	eors	r1, r0
        bits_diff = 0;
   254ac:	2200      	movs	r2, #0
        for (mask = 0x00000001; mask != 0; mask <<= 1) {
   254ae:	2301      	movs	r3, #1
   254b0:	e000      	b.n	254b4 <ble_ll_utils_calc_access_addr+0x34>
   254b2:	005b      	lsls	r3, r3, #1
   254b4:	b12b      	cbz	r3, 254c2 <ble_ll_utils_calc_access_addr+0x42>
            if (mask & temp) {
   254b6:	420b      	tst	r3, r1
   254b8:	d0fb      	beq.n	254b2 <ble_ll_utils_calc_access_addr+0x32>
                ++bits_diff;
   254ba:	3201      	adds	r2, #1
   254bc:	b2d2      	uxtb	r2, r2
                if (bits_diff > 1) {
   254be:	2a01      	cmp	r2, #1
   254c0:	d9f7      	bls.n	254b2 <ble_ll_utils_calc_access_addr+0x32>
                    break;
                }
            }
        }
        if (bits_diff <= 1) {
   254c2:	2a01      	cmp	r2, #1
   254c4:	d9dd      	bls.n	25482 <ble_ll_utils_calc_access_addr+0x2>
        }

        /* Cannot have more than 24 transitions */
        transitions = 0;
        consecutive = 1;
        ones = 0;
   254c6:	2400      	movs	r4, #0
        transitions = 0;
   254c8:	4625      	mov	r5, r4
        consecutive = 1;
   254ca:	2201      	movs	r2, #1
        mask = 0x00000001;
   254cc:	4613      	mov	r3, r2
   254ce:	e00c      	b.n	254ea <ble_ll_utils_calc_access_addr+0x6a>
            if (mask & aa) {
                if (prev_bit == 0) {
                    ++transitions;
                    consecutive = 1;
                } else {
                    ++consecutive;
   254d0:	3201      	adds	r2, #1
   254d2:	b2d2      	uxtb	r2, r2
                    ++transitions;
                    consecutive = 1;
                }
            }

            if (prev_bit) {
   254d4:	b109      	cbz	r1, 254da <ble_ll_utils_calc_access_addr+0x5a>
                ones++;
   254d6:	3401      	adds	r4, #1
   254d8:	b2e4      	uxtb	r4, r4
            }

            /* 8 lsb should have at least three 1 */
            if (mask == 0x00000100 && ones < 3) {
   254da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
   254de:	d019      	beq.n	25514 <ble_ll_utils_calc_access_addr+0x94>
                break;
            }

            /* 16 lsb should have no more than 11 transitions */
            if (mask == 0x00010000 && transitions > 11) {
   254e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   254e4:	d019      	beq.n	2551a <ble_ll_utils_calc_access_addr+0x9a>
                break;
            }

            /* This is invalid! */
            if (consecutive > 6) {
   254e6:	2a06      	cmp	r2, #6
   254e8:	d81a      	bhi.n	25520 <ble_ll_utils_calc_access_addr+0xa0>
        while (mask < 0x80000000) {
   254ea:	2b00      	cmp	r3, #0
   254ec:	db19      	blt.n	25522 <ble_ll_utils_calc_access_addr+0xa2>
            prev_bit = aa & mask;
   254ee:	ea03 0100 	and.w	r1, r3, r0
            mask <<= 1;
   254f2:	005b      	lsls	r3, r3, #1
            if (mask & aa) {
   254f4:	4218      	tst	r0, r3
   254f6:	d005      	beq.n	25504 <ble_ll_utils_calc_access_addr+0x84>
                if (prev_bit == 0) {
   254f8:	2900      	cmp	r1, #0
   254fa:	d1e9      	bne.n	254d0 <ble_ll_utils_calc_access_addr+0x50>
                    ++transitions;
   254fc:	3501      	adds	r5, #1
   254fe:	b2ed      	uxtb	r5, r5
                    consecutive = 1;
   25500:	2201      	movs	r2, #1
   25502:	e7e7      	b.n	254d4 <ble_ll_utils_calc_access_addr+0x54>
                if (prev_bit == 0) {
   25504:	b911      	cbnz	r1, 2550c <ble_ll_utils_calc_access_addr+0x8c>
                    ++consecutive;
   25506:	3201      	adds	r2, #1
   25508:	b2d2      	uxtb	r2, r2
   2550a:	e7e3      	b.n	254d4 <ble_ll_utils_calc_access_addr+0x54>
                    ++transitions;
   2550c:	3501      	adds	r5, #1
   2550e:	b2ed      	uxtb	r5, r5
                    consecutive = 1;
   25510:	2201      	movs	r2, #1
   25512:	e7df      	b.n	254d4 <ble_ll_utils_calc_access_addr+0x54>
            if (mask == 0x00000100 && ones < 3) {
   25514:	2c02      	cmp	r4, #2
   25516:	d8e3      	bhi.n	254e0 <ble_ll_utils_calc_access_addr+0x60>
   25518:	e003      	b.n	25522 <ble_ll_utils_calc_access_addr+0xa2>
            if (mask == 0x00010000 && transitions > 11) {
   2551a:	2d0b      	cmp	r5, #11
   2551c:	d9e3      	bls.n	254e6 <ble_ll_utils_calc_access_addr+0x66>
   2551e:	e000      	b.n	25522 <ble_ll_utils_calc_access_addr+0xa2>
                /* Make sure we always detect invalid sequence below */
                mask = 0;
   25520:	2300      	movs	r3, #0
                break;
            }
        }

        /* Invalid sequence found */
        if (mask != 0x80000000) {
   25522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   25526:	d1ac      	bne.n	25482 <ble_ll_utils_calc_access_addr+0x2>
            continue;
        }

        /* Cannot be more than 24 transitions */
        if (transitions > 24) {
   25528:	2d18      	cmp	r5, #24
   2552a:	d8aa      	bhi.n	25482 <ble_ll_utils_calc_access_addr+0x2>

        /* We have a valid access address */
        break;
    }
    return aa;
}
   2552c:	bd70      	pop	{r4, r5, r6, pc}
   2552e:	bf00      	nop
   25530:	8e89bed6 	.word	0x8e89bed6

00025534 <ble_ll_utils_remapped_channel>:

uint8_t
ble_ll_utils_remapped_channel(uint8_t remap_index, const uint8_t *chanmap)
{
   25534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     * we just calculate
     * Iterate through channel map to find this channel
     */
    chan = 0;
    cntr = 0;
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   25536:	2500      	movs	r5, #0
    chan = 0;
   25538:	462e      	mov	r6, r5
    cntr = 0;
   2553a:	462c      	mov	r4, r5
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   2553c:	e00e      	b.n	2555c <ble_ll_utils_remapped_channel+0x28>
                    if (cntr == remap_index) {
                        return (chan + j);
                    }
                    ++cntr;
                }
                mask <<= 1;
   2553e:	005b      	lsls	r3, r3, #1
   25540:	b2db      	uxtb	r3, r3
            for (j = 0; j < 8; j++) {
   25542:	3201      	adds	r2, #1
   25544:	2a07      	cmp	r2, #7
   25546:	dc06      	bgt.n	25556 <ble_ll_utils_remapped_channel+0x22>
                if (usable_chans & mask) {
   25548:	423b      	tst	r3, r7
   2554a:	d0f8      	beq.n	2553e <ble_ll_utils_remapped_channel+0xa>
                    if (cntr == remap_index) {
   2554c:	4284      	cmp	r4, r0
   2554e:	d017      	beq.n	25580 <ble_ll_utils_remapped_channel+0x4c>
                    ++cntr;
   25550:	3401      	adds	r4, #1
   25552:	b2e4      	uxtb	r4, r4
   25554:	e7f3      	b.n	2553e <ble_ll_utils_remapped_channel+0xa>
            }
        }
        chan += 8;
   25556:	3608      	adds	r6, #8
   25558:	b2f6      	uxtb	r6, r6
    for (i = 0; i < BLE_LL_CHMAP_LEN; i++) {
   2555a:	3501      	adds	r5, #1
   2555c:	2d04      	cmp	r5, #4
   2555e:	dc05      	bgt.n	2556c <ble_ll_utils_remapped_channel+0x38>
        usable_chans = chanmap[i];
   25560:	5d4f      	ldrb	r7, [r1, r5]
        if (usable_chans != 0) {
   25562:	2f00      	cmp	r7, #0
   25564:	d0f7      	beq.n	25556 <ble_ll_utils_remapped_channel+0x22>
            for (j = 0; j < 8; j++) {
   25566:	2200      	movs	r2, #0
            mask = 0x01;
   25568:	2301      	movs	r3, #1
   2556a:	e7eb      	b.n	25544 <ble_ll_utils_remapped_channel+0x10>
    }

    /* we should never reach here */
    BLE_LL_ASSERT(0);
   2556c:	f7e2 fe28 	bl	81c0 <hal_debugger_connected>
   25570:	b100      	cbz	r0, 25574 <ble_ll_utils_remapped_channel+0x40>
   25572:	be01      	bkpt	0x0001
   25574:	2300      	movs	r3, #0
   25576:	461a      	mov	r2, r3
   25578:	4619      	mov	r1, r3
   2557a:	4618      	mov	r0, r3
   2557c:	f7e4 f9b6 	bl	98ec <__assert_func>
                        return (chan + j);
   25580:	4432      	add	r2, r6
   25582:	b2d0      	uxtb	r0, r2
    return 0;
}
   25584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00025586 <ble_ll_utils_calc_num_used_chans>:

uint8_t
ble_ll_utils_calc_num_used_chans(const uint8_t *chmap)
{
   25586:	b430      	push	{r4, r5}
    int j;
    uint8_t mask;
    uint8_t chanbyte;
    uint8_t used_channels;

    used_channels = 0;
   25588:	2100      	movs	r1, #0
    for (i = 0; i < BLE_LL_CHMAP_LEN; ++i) {
   2558a:	460d      	mov	r5, r1
   2558c:	e00d      	b.n	255aa <ble_ll_utils_calc_num_used_chans+0x24>
                mask = 0x01;
                for (j = 0; j < 8; ++j) {
                    if (chanbyte & mask) {
                        ++used_channels;
                    }
                    mask <<= 1;
   2558e:	005b      	lsls	r3, r3, #1
   25590:	b2db      	uxtb	r3, r3
                for (j = 0; j < 8; ++j) {
   25592:	3201      	adds	r2, #1
   25594:	2a07      	cmp	r2, #7
   25596:	dc07      	bgt.n	255a8 <ble_ll_utils_calc_num_used_chans+0x22>
                    if (chanbyte & mask) {
   25598:	4223      	tst	r3, r4
   2559a:	d0f8      	beq.n	2558e <ble_ll_utils_calc_num_used_chans+0x8>
                        ++used_channels;
   2559c:	3101      	adds	r1, #1
   2559e:	b2c9      	uxtb	r1, r1
   255a0:	e7f5      	b.n	2558e <ble_ll_utils_calc_num_used_chans+0x8>
                mask = 0x01;
   255a2:	2301      	movs	r3, #1
                for (j = 0; j < 8; ++j) {
   255a4:	2200      	movs	r2, #0
   255a6:	e7f5      	b.n	25594 <ble_ll_utils_calc_num_used_chans+0xe>
    for (i = 0; i < BLE_LL_CHMAP_LEN; ++i) {
   255a8:	3501      	adds	r5, #1
   255aa:	2d04      	cmp	r5, #4
   255ac:	dc07      	bgt.n	255be <ble_ll_utils_calc_num_used_chans+0x38>
        chanbyte = chmap[i];
   255ae:	5d44      	ldrb	r4, [r0, r5]
        if (chanbyte) {
   255b0:	2c00      	cmp	r4, #0
   255b2:	d0f9      	beq.n	255a8 <ble_ll_utils_calc_num_used_chans+0x22>
            if (chanbyte == 0xff) {
   255b4:	2cff      	cmp	r4, #255	; 0xff
   255b6:	d1f4      	bne.n	255a2 <ble_ll_utils_calc_num_used_chans+0x1c>
                used_channels += 8;
   255b8:	3108      	adds	r1, #8
   255ba:	b2c9      	uxtb	r1, r1
   255bc:	e7f4      	b.n	255a8 <ble_ll_utils_calc_num_used_chans+0x22>
                }
            }
        }
    }
    return used_channels;
}
   255be:	4608      	mov	r0, r1
   255c0:	bc30      	pop	{r4, r5}
   255c2:	4770      	bx	lr

000255c4 <ble_ll_utils_calc_window_widening>:
    int32_t time_since_last_anchor;
    uint32_t delta_msec;

    window_widening = 0;

    time_since_last_anchor = (int32_t)(anchor_point - last_anchor_point);
   255c4:	1a40      	subs	r0, r0, r1
    if (time_since_last_anchor > 0) {
   255c6:	2800      	cmp	r0, #0
   255c8:	dd11      	ble.n	255ee <ble_ll_utils_calc_window_widening+0x2a>
{
   255ca:	b510      	push	{r4, lr}
   255cc:	4614      	mov	r4, r2
        delta_msec = os_cputime_ticks_to_usecs(time_since_last_anchor) / 1000;
   255ce:	f7f6 fbdd 	bl	1bd8c <os_cputime_ticks_to_usecs>
   255d2:	4a08      	ldr	r2, [pc, #32]	; (255f4 <ble_ll_utils_calc_window_widening+0x30>)
   255d4:	fba2 3000 	umull	r3, r0, r2, r0
   255d8:	0983      	lsrs	r3, r0, #6
        total_sca_ppm = g_ble_sca_ppm_tbl[master_sca] + MYNEWT_VAL(BLE_LL_SCA);
   255da:	4907      	ldr	r1, [pc, #28]	; (255f8 <ble_ll_utils_calc_window_widening+0x34>)
   255dc:	f831 0014 	ldrh.w	r0, [r1, r4, lsl #1]
   255e0:	3005      	adds	r0, #5
        window_widening = (total_sca_ppm * delta_msec) / 1000;
   255e2:	fb00 f003 	mul.w	r0, r0, r3
   255e6:	fba2 3000 	umull	r3, r0, r2, r0
   255ea:	0980      	lsrs	r0, r0, #6
    }

    return window_widening;
}
   255ec:	bd10      	pop	{r4, pc}
    window_widening = 0;
   255ee:	2000      	movs	r0, #0
}
   255f0:	4770      	bx	lr
   255f2:	bf00      	nop
   255f4:	10624dd3 	.word	0x10624dd3
   255f8:	0002987c 	.word	0x0002987c

000255fc <ble_ll_whitelist_chg_allowed>:

struct ble_ll_whitelist_entry g_ble_ll_whitelist[BLE_LL_WHITELIST_SIZE];

static int
ble_ll_whitelist_chg_allowed(void)
{
   255fc:	b508      	push	{r3, lr}
     *  -> scanning uses the whitelist and is enabled.
     *  -> initiating uses whitelist and a LE create connection command is in
     *     progress
     */
    rc = 1;
    if (!ble_ll_adv_can_chg_whitelist() || !ble_ll_scan_can_chg_whitelist()) {
   255fe:	f7f8 ff17 	bl	1e430 <ble_ll_adv_can_chg_whitelist>
   25602:	4603      	mov	r3, r0
   25604:	b908      	cbnz	r0, 2560a <ble_ll_whitelist_chg_allowed+0xe>
        rc = 0;
    }
    return rc;
}
   25606:	4618      	mov	r0, r3
   25608:	bd08      	pop	{r3, pc}
    if (!ble_ll_adv_can_chg_whitelist() || !ble_ll_scan_can_chg_whitelist()) {
   2560a:	f7ff fa09 	bl	24a20 <ble_ll_scan_can_chg_whitelist>
   2560e:	4603      	mov	r3, r0
   25610:	2800      	cmp	r0, #0
   25612:	d0f8      	beq.n	25606 <ble_ll_whitelist_chg_allowed+0xa>
    rc = 1;
   25614:	2301      	movs	r3, #1
    return rc;
   25616:	e7f6      	b.n	25606 <ble_ll_whitelist_chg_allowed+0xa>

00025618 <ble_ll_whitelist_search>:
 * is the 'position' of the device in the whitelist (the index of the element
 * plus 1).
 */
static int
ble_ll_whitelist_search(const uint8_t *addr, uint8_t addr_type)
{
   25618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2561a:	4607      	mov	r7, r0
   2561c:	460e      	mov	r6, r1
    int i;
    struct ble_ll_whitelist_entry *wl;

    wl = &g_ble_ll_whitelist[0];
   2561e:	4c0c      	ldr	r4, [pc, #48]	; (25650 <ble_ll_whitelist_search+0x38>)
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   25620:	2500      	movs	r5, #0
   25622:	e001      	b.n	25628 <ble_ll_whitelist_search+0x10>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
            (!memcmp(&wl->wl_dev_addr[0], addr, BLE_DEV_ADDR_LEN))) {
            return i + 1;
        }
        ++wl;
   25624:	3408      	adds	r4, #8
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   25626:	3501      	adds	r5, #1
   25628:	2d07      	cmp	r5, #7
   2562a:	dc0e      	bgt.n	2564a <ble_ll_whitelist_search+0x32>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
   2562c:	7823      	ldrb	r3, [r4, #0]
   2562e:	2b00      	cmp	r3, #0
   25630:	d0f8      	beq.n	25624 <ble_ll_whitelist_search+0xc>
   25632:	7863      	ldrb	r3, [r4, #1]
   25634:	42b3      	cmp	r3, r6
   25636:	d1f5      	bne.n	25624 <ble_ll_whitelist_search+0xc>
            (!memcmp(&wl->wl_dev_addr[0], addr, BLE_DEV_ADDR_LEN))) {
   25638:	2206      	movs	r2, #6
   2563a:	4639      	mov	r1, r7
   2563c:	1ca0      	adds	r0, r4, #2
   2563e:	f7e6 f891 	bl	b764 <memcmp>
        if ((wl->wl_valid) && (wl->wl_addr_type == addr_type) &&
   25642:	2800      	cmp	r0, #0
   25644:	d1ee      	bne.n	25624 <ble_ll_whitelist_search+0xc>
            return i + 1;
   25646:	1c68      	adds	r0, r5, #1
   25648:	e000      	b.n	2564c <ble_ll_whitelist_search+0x34>
    }

    return 0;
   2564a:	2000      	movs	r0, #0
}
   2564c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2564e:	bf00      	nop
   25650:	20008d14 	.word	0x20008d14

00025654 <ble_ll_whitelist_clear>:
{
   25654:	b508      	push	{r3, lr}
    if (!ble_ll_whitelist_chg_allowed()) {
   25656:	f7ff ffd1 	bl	255fc <ble_ll_whitelist_chg_allowed>
   2565a:	b160      	cbz	r0, 25676 <ble_ll_whitelist_clear+0x22>
    wl = &g_ble_ll_whitelist[0];
   2565c:	4a07      	ldr	r2, [pc, #28]	; (2567c <ble_ll_whitelist_clear+0x28>)
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   2565e:	2300      	movs	r3, #0
   25660:	e003      	b.n	2566a <ble_ll_whitelist_clear+0x16>
        wl->wl_valid = 0;
   25662:	2100      	movs	r1, #0
   25664:	f802 1b08 	strb.w	r1, [r2], #8
    for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   25668:	3301      	adds	r3, #1
   2566a:	2b07      	cmp	r3, #7
   2566c:	ddf9      	ble.n	25662 <ble_ll_whitelist_clear+0xe>
    ble_hw_whitelist_clear();
   2566e:	f000 f8c1 	bl	257f4 <ble_hw_whitelist_clear>
    return BLE_ERR_SUCCESS;
   25672:	2000      	movs	r0, #0
}
   25674:	bd08      	pop	{r3, pc}
        return BLE_ERR_CMD_DISALLOWED;
   25676:	200c      	movs	r0, #12
   25678:	e7fc      	b.n	25674 <ble_ll_whitelist_clear+0x20>
   2567a:	bf00      	nop
   2567c:	20008d14 	.word	0x20008d14

00025680 <ble_ll_whitelist_read_size>:
    rsp->size = BLE_LL_WHITELIST_SIZE;
   25680:	2308      	movs	r3, #8
   25682:	7003      	strb	r3, [r0, #0]
    *rsplen = sizeof(*rsp);
   25684:	2301      	movs	r3, #1
   25686:	700b      	strb	r3, [r1, #0]
}
   25688:	2000      	movs	r0, #0
   2568a:	4770      	bx	lr

0002568c <ble_ll_whitelist_match>:
 *
 * @return int
 */
int
ble_ll_whitelist_match(uint8_t *addr, uint8_t addr_type, int is_ident)
{
   2568c:	b508      	push	{r3, lr}
    /*
     * XXX: This should be changed. This is HW specific: some HW may be able
     * to both resolve a private address and perform a whitelist check. The
     * current BLE hw cannot support this.
     */
    if (is_ident) {
   2568e:	b112      	cbz	r2, 25696 <ble_ll_whitelist_match+0xa>
        rc = ble_ll_whitelist_search(addr, addr_type);
   25690:	f7ff ffc2 	bl	25618 <ble_ll_whitelist_search>
    }
#else
    rc = ble_ll_whitelist_search(addr, addr_type);
#endif
    return rc;
}
   25694:	bd08      	pop	{r3, pc}
        rc = ble_hw_whitelist_match();
   25696:	f000 f945 	bl	25924 <ble_hw_whitelist_match>
    return rc;
   2569a:	e7fb      	b.n	25694 <ble_ll_whitelist_match+0x8>

0002569c <ble_ll_whitelist_add>:
    const struct ble_hci_le_add_whte_list_cp *cmd = (const void *) cmdbuf;
    struct ble_ll_whitelist_entry *wl;
    int rc;
    int i;

    if (len != sizeof(*cmd)) {
   2569c:	2907      	cmp	r1, #7
   2569e:	d001      	beq.n	256a4 <ble_ll_whitelist_add+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   256a0:	2012      	movs	r0, #18
#endif
        }
    }

    return rc;
}
   256a2:	4770      	bx	lr
{
   256a4:	b538      	push	{r3, r4, r5, lr}
   256a6:	4604      	mov	r4, r0
    if (!ble_ll_whitelist_chg_allowed()) {
   256a8:	f7ff ffa8 	bl	255fc <ble_ll_whitelist_chg_allowed>
   256ac:	b300      	cbz	r0, 256f0 <ble_ll_whitelist_add+0x54>
    if (!ble_ll_whitelist_search(cmd->addr, cmd->addr_type)) {
   256ae:	1c65      	adds	r5, r4, #1
   256b0:	7821      	ldrb	r1, [r4, #0]
   256b2:	4628      	mov	r0, r5
   256b4:	f7ff ffb0 	bl	25618 <ble_ll_whitelist_search>
   256b8:	4603      	mov	r3, r0
   256ba:	b938      	cbnz	r0, 256cc <ble_ll_whitelist_add+0x30>
        wl = &g_ble_ll_whitelist[0];
   256bc:	4a0e      	ldr	r2, [pc, #56]	; (256f8 <ble_ll_whitelist_add+0x5c>)
        for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   256be:	2b07      	cmp	r3, #7
   256c0:	dc0f      	bgt.n	256e2 <ble_ll_whitelist_add+0x46>
            if (wl->wl_valid == 0) {
   256c2:	7811      	ldrb	r1, [r2, #0]
   256c4:	b121      	cbz	r1, 256d0 <ble_ll_whitelist_add+0x34>
            ++wl;
   256c6:	3208      	adds	r2, #8
        for (i = 0; i < BLE_LL_WHITELIST_SIZE; ++i) {
   256c8:	3301      	adds	r3, #1
   256ca:	e7f8      	b.n	256be <ble_ll_whitelist_add+0x22>
    rc = BLE_ERR_SUCCESS;
   256cc:	2000      	movs	r0, #0
}
   256ce:	bd38      	pop	{r3, r4, r5, pc}
                memcpy(&wl->wl_dev_addr[0], cmd->addr, BLE_DEV_ADDR_LEN);
   256d0:	6829      	ldr	r1, [r5, #0]
   256d2:	f8c2 1002 	str.w	r1, [r2, #2]
   256d6:	88a9      	ldrh	r1, [r5, #4]
   256d8:	80d1      	strh	r1, [r2, #6]
                wl->wl_addr_type = cmd->addr_type;
   256da:	7821      	ldrb	r1, [r4, #0]
   256dc:	7051      	strb	r1, [r2, #1]
                wl->wl_valid = 1;
   256de:	2101      	movs	r1, #1
   256e0:	7011      	strb	r1, [r2, #0]
        if (i == BLE_LL_WHITELIST_SIZE) {
   256e2:	2b08      	cmp	r3, #8
   256e4:	d006      	beq.n	256f4 <ble_ll_whitelist_add+0x58>
            rc = ble_hw_whitelist_add(cmd->addr, cmd->addr_type);
   256e6:	7821      	ldrb	r1, [r4, #0]
   256e8:	4628      	mov	r0, r5
   256ea:	f000 f88f 	bl	2580c <ble_hw_whitelist_add>
   256ee:	e7ee      	b.n	256ce <ble_ll_whitelist_add+0x32>
        return BLE_ERR_CMD_DISALLOWED;
   256f0:	200c      	movs	r0, #12
   256f2:	e7ec      	b.n	256ce <ble_ll_whitelist_add+0x32>
            rc = BLE_ERR_MEM_CAPACITY;
   256f4:	2007      	movs	r0, #7
   256f6:	e7ea      	b.n	256ce <ble_ll_whitelist_add+0x32>
   256f8:	20008d14 	.word	0x20008d14

000256fc <ble_ll_whitelist_rmv>:
ble_ll_whitelist_rmv(const uint8_t *cmdbuf, uint8_t len)
{
    const struct ble_hci_le_rmv_white_list_cp *cmd = (const void *) cmdbuf;
    int position;

    if (len != sizeof(*cmd)) {
   256fc:	2907      	cmp	r1, #7
   256fe:	d001      	beq.n	25704 <ble_ll_whitelist_rmv+0x8>
        return BLE_ERR_INV_HCI_CMD_PARMS;
   25700:	2012      	movs	r0, #18
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_rmv(cmd->addr, cmd->addr_type);
#endif

    return BLE_ERR_SUCCESS;
}
   25702:	4770      	bx	lr
{
   25704:	b538      	push	{r3, r4, r5, lr}
   25706:	4604      	mov	r4, r0
    if (!ble_ll_whitelist_chg_allowed()) {
   25708:	f7ff ff78 	bl	255fc <ble_ll_whitelist_chg_allowed>
   2570c:	b180      	cbz	r0, 25730 <ble_ll_whitelist_rmv+0x34>
    position = ble_ll_whitelist_search(cmd->addr, cmd->addr_type);
   2570e:	1c65      	adds	r5, r4, #1
   25710:	7821      	ldrb	r1, [r4, #0]
   25712:	4628      	mov	r0, r5
   25714:	f7ff ff80 	bl	25618 <ble_ll_whitelist_search>
    if (position) {
   25718:	b120      	cbz	r0, 25724 <ble_ll_whitelist_rmv+0x28>
        g_ble_ll_whitelist[position - 1].wl_valid = 0;
   2571a:	1e43      	subs	r3, r0, #1
   2571c:	4a05      	ldr	r2, [pc, #20]	; (25734 <ble_ll_whitelist_rmv+0x38>)
   2571e:	2100      	movs	r1, #0
   25720:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    ble_hw_whitelist_rmv(cmd->addr, cmd->addr_type);
   25724:	7821      	ldrb	r1, [r4, #0]
   25726:	4628      	mov	r0, r5
   25728:	f000 f8a4 	bl	25874 <ble_hw_whitelist_rmv>
    return BLE_ERR_SUCCESS;
   2572c:	2000      	movs	r0, #0
}
   2572e:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_ERR_CMD_DISALLOWED;
   25730:	200c      	movs	r0, #12
   25732:	e7fc      	b.n	2572e <ble_ll_whitelist_rmv+0x32>
   25734:	20008d14 	.word	0x20008d14

00025738 <ble_ll_whitelist_enable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_enable(void)
{
   25738:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_enable();
   2573a:	f000 f8db 	bl	258f4 <ble_hw_whitelist_enable>
#endif
}
   2573e:	bd08      	pop	{r3, pc}

00025740 <ble_ll_whitelist_disable>:
 *
 * Note: This function has no effect if we are not using HW whitelisting
 */
void
ble_ll_whitelist_disable(void)
{
   25740:	b508      	push	{r3, lr}
#if (BLE_USES_HW_WHITELIST == 1)
    ble_hw_whitelist_disable();
   25742:	f000 f8e5 	bl	25910 <ble_hw_whitelist_disable>
#endif
}
   25746:	bd08      	pop	{r3, pc}

00025748 <ble_rng_isr>:
/**
 * Random number generator ISR.
 */
static void
ble_rng_isr(void)
{
   25748:	b508      	push	{r3, lr}
    uint8_t rnum;

    os_trace_isr_enter();

    /* No callback? Clear and disable interrupts */
    if (g_ble_rng_isr_cb == NULL) {
   2574a:	4b0d      	ldr	r3, [pc, #52]	; (25780 <ble_rng_isr+0x38>)
   2574c:	681b      	ldr	r3, [r3, #0]
   2574e:	b163      	cbz	r3, 2576a <ble_rng_isr+0x22>
        os_trace_isr_exit();
        return;
    }

    /* If there is a value ready grab it */
    if (NRF_RNG->EVENTS_VALRDY) {
   25750:	4a0c      	ldr	r2, [pc, #48]	; (25784 <ble_rng_isr+0x3c>)
   25752:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   25756:	b13a      	cbz	r2, 25768 <ble_rng_isr+0x20>
        NRF_RNG->EVENTS_VALRDY = 0;
   25758:	4a0a      	ldr	r2, [pc, #40]	; (25784 <ble_rng_isr+0x3c>)
   2575a:	2100      	movs	r1, #0
   2575c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        rnum = (uint8_t)NRF_RNG->VALUE;
   25760:	f8d2 0508 	ldr.w	r0, [r2, #1288]	; 0x508
        (*g_ble_rng_isr_cb)(rnum);
   25764:	b2c0      	uxtb	r0, r0
   25766:	4798      	blx	r3
    }

    os_trace_isr_exit();
}
   25768:	bd08      	pop	{r3, pc}
        NRF_RNG->INTENCLR = 1;
   2576a:	4b06      	ldr	r3, [pc, #24]	; (25784 <ble_rng_isr+0x3c>)
   2576c:	2201      	movs	r2, #1
   2576e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        NRF_RNG->EVENTS_VALRDY = 0;
   25772:	2200      	movs	r2, #0
   25774:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        (void)NRF_RNG->SHORTS;
   25778:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   2577c:	e7f4      	b.n	25768 <ble_rng_isr+0x20>
   2577e:	bf00      	nop
   25780:	20008d58 	.word	0x20008d58
   25784:	4000d000 	.word	0x4000d000

00025788 <ble_hw_get_public_addr>:
    if ((NRF_FICR->DEVICEADDRTYPE & 1) != 0) {
   25788:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2578c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   25790:	f013 0f01 	tst.w	r3, #1
   25794:	d10d      	bne.n	257b2 <ble_hw_get_public_addr+0x2a>
    addr_low = NRF_FICR->DEVICEADDR[0];
   25796:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2579a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
    addr_high = NRF_FICR->DEVICEADDR[1];
   2579e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    memcpy(addr->val, &addr_low, 4);
   257a2:	f8c0 2001 	str.w	r2, [r0, #1]
    memcpy(&addr->val[4], &addr_high, 2);
   257a6:	f8a0 3005 	strh.w	r3, [r0, #5]
    addr->type = BLE_ADDR_PUBLIC;
   257aa:	2300      	movs	r3, #0
   257ac:	7003      	strb	r3, [r0, #0]
    return 0;
   257ae:	4618      	mov	r0, r3
   257b0:	4770      	bx	lr
        return -1;
   257b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   257b6:	4770      	bx	lr

000257b8 <ble_hw_get_static_addr>:
    if ((NRF_FICR->DEVICEADDRTYPE & 1) == 1) {
   257b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   257bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   257c0:	f013 0f01 	tst.w	r3, #1
   257c4:	d00f      	beq.n	257e6 <ble_hw_get_static_addr+0x2e>
        memcpy(addr->val, (void *)&NRF_FICR->DEVICEADDR[0], 4);
   257c6:	4b09      	ldr	r3, [pc, #36]	; (257ec <ble_hw_get_static_addr+0x34>)
   257c8:	681b      	ldr	r3, [r3, #0]
   257ca:	f8c0 3001 	str.w	r3, [r0, #1]
        memcpy(&addr->val[4], (void *)&NRF_FICR->DEVICEADDR[1], 2);
   257ce:	4b08      	ldr	r3, [pc, #32]	; (257f0 <ble_hw_get_static_addr+0x38>)
   257d0:	881b      	ldrh	r3, [r3, #0]
   257d2:	f8a0 3005 	strh.w	r3, [r0, #5]
        addr->val[5] |= 0xc0;
   257d6:	7983      	ldrb	r3, [r0, #6]
   257d8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   257dc:	7183      	strb	r3, [r0, #6]
        addr->type = BLE_ADDR_RANDOM;
   257de:	2301      	movs	r3, #1
   257e0:	7003      	strb	r3, [r0, #0]
        rc = 0;
   257e2:	2000      	movs	r0, #0
   257e4:	4770      	bx	lr
        rc = -1;
   257e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   257ea:	4770      	bx	lr
   257ec:	100000a4 	.word	0x100000a4
   257f0:	100000a8 	.word	0x100000a8

000257f4 <ble_hw_whitelist_clear>:
    NRF_RADIO->DACNF = 0;
   257f4:	2300      	movs	r3, #0
   257f6:	4a03      	ldr	r2, [pc, #12]	; (25804 <ble_hw_whitelist_clear+0x10>)
   257f8:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    g_ble_hw_whitelist_mask = 0;
   257fc:	4a02      	ldr	r2, [pc, #8]	; (25808 <ble_hw_whitelist_clear+0x14>)
   257fe:	7013      	strb	r3, [r2, #0]
}
   25800:	4770      	bx	lr
   25802:	bf00      	nop
   25804:	40001000 	.word	0x40001000
   25808:	20008d54 	.word	0x20008d54

0002580c <ble_hw_whitelist_add>:
{
   2580c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    mask = 0x01;
   25810:	2501      	movs	r5, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   25812:	2400      	movs	r4, #0
   25814:	2c07      	cmp	r4, #7
   25816:	dc26      	bgt.n	25866 <ble_hw_whitelist_add+0x5a>
        if ((mask & g_ble_hw_whitelist_mask) == 0) {
   25818:	4b14      	ldr	r3, [pc, #80]	; (2586c <ble_hw_whitelist_add+0x60>)
   2581a:	781b      	ldrb	r3, [r3, #0]
   2581c:	422b      	tst	r3, r5
   2581e:	d002      	beq.n	25826 <ble_hw_whitelist_add+0x1a>
        mask <<= 1;
   25820:	006d      	lsls	r5, r5, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   25822:	3401      	adds	r4, #1
   25824:	e7f6      	b.n	25814 <ble_hw_whitelist_add+0x8>
   25826:	460f      	mov	r7, r1
   25828:	4606      	mov	r6, r0
            NRF_RADIO->DAB[i] = get_le32(addr);
   2582a:	f7f6 f9ff 	bl	1bc2c <get_le32>
   2582e:	f8df 8040 	ldr.w	r8, [pc, #64]	; 25870 <ble_hw_whitelist_add+0x64>
   25832:	f504 73c0 	add.w	r3, r4, #384	; 0x180
   25836:	f848 0023 	str.w	r0, [r8, r3, lsl #2]
            NRF_RADIO->DAP[i] = get_le16(addr + 4);
   2583a:	1d30      	adds	r0, r6, #4
   2583c:	f7f6 f9f1 	bl	1bc22 <get_le16>
   25840:	f504 74c4 	add.w	r4, r4, #392	; 0x188
   25844:	f848 0024 	str.w	r0, [r8, r4, lsl #2]
            if (addr_type == BLE_ADDR_RANDOM) {
   25848:	2f01      	cmp	r7, #1
   2584a:	d005      	beq.n	25858 <ble_hw_whitelist_add+0x4c>
            g_ble_hw_whitelist_mask |= mask;
   2584c:	4a07      	ldr	r2, [pc, #28]	; (2586c <ble_hw_whitelist_add+0x60>)
   2584e:	7813      	ldrb	r3, [r2, #0]
   25850:	431d      	orrs	r5, r3
   25852:	7015      	strb	r5, [r2, #0]
            return BLE_ERR_SUCCESS;
   25854:	2000      	movs	r0, #0
   25856:	e007      	b.n	25868 <ble_hw_whitelist_add+0x5c>
                NRF_RADIO->DACNF |= (mask << 8);
   25858:	f8d8 3640 	ldr.w	r3, [r8, #1600]	; 0x640
   2585c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   25860:	f8c8 3640 	str.w	r3, [r8, #1600]	; 0x640
   25864:	e7f2      	b.n	2584c <ble_hw_whitelist_add+0x40>
    return BLE_ERR_MEM_CAPACITY;
   25866:	2007      	movs	r0, #7
}
   25868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2586c:	20008d54 	.word	0x20008d54
   25870:	40001000 	.word	0x40001000

00025874 <ble_hw_whitelist_rmv>:
{
   25874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25876:	4606      	mov	r6, r0
   25878:	460d      	mov	r5, r1
    dab = get_le32(addr);
   2587a:	f7f6 f9d7 	bl	1bc2c <get_le32>
   2587e:	4604      	mov	r4, r0
    dap = get_le16(addr + 4);
   25880:	1d30      	adds	r0, r6, #4
   25882:	f7f6 f9ce 	bl	1bc22 <get_le16>
    txadd = NRF_RADIO->DACNF >> 8;
   25886:	4b19      	ldr	r3, [pc, #100]	; (258ec <ble_hw_whitelist_rmv+0x78>)
   25888:	f8d3 7640 	ldr.w	r7, [r3, #1600]	; 0x640
   2588c:	0a3f      	lsrs	r7, r7, #8
    mask = 0x01;
   2588e:	2201      	movs	r2, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   25890:	2300      	movs	r3, #0
   25892:	e002      	b.n	2589a <ble_hw_whitelist_rmv+0x26>
                    if (cfg_addr != 0) {
   25894:	b9d1      	cbnz	r1, 258cc <ble_hw_whitelist_rmv+0x58>
        mask <<= 1;
   25896:	0052      	lsls	r2, r2, #1
    for (i = 0; i < BLE_HW_WHITE_LIST_SIZE; ++i) {
   25898:	3301      	adds	r3, #1
   2589a:	2b07      	cmp	r3, #7
   2589c:	dc16      	bgt.n	258cc <ble_hw_whitelist_rmv+0x58>
        if (mask & g_ble_hw_whitelist_mask) {
   2589e:	4914      	ldr	r1, [pc, #80]	; (258f0 <ble_hw_whitelist_rmv+0x7c>)
   258a0:	7809      	ldrb	r1, [r1, #0]
   258a2:	4211      	tst	r1, r2
   258a4:	d0f7      	beq.n	25896 <ble_hw_whitelist_rmv+0x22>
            if ((dab == NRF_RADIO->DAB[i]) && (dap == NRF_RADIO->DAP[i])) {
   258a6:	f503 71c0 	add.w	r1, r3, #384	; 0x180
   258aa:	4e10      	ldr	r6, [pc, #64]	; (258ec <ble_hw_whitelist_rmv+0x78>)
   258ac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   258b0:	42a1      	cmp	r1, r4
   258b2:	d1f0      	bne.n	25896 <ble_hw_whitelist_rmv+0x22>
   258b4:	f503 71c4 	add.w	r1, r3, #392	; 0x188
   258b8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
   258bc:	4288      	cmp	r0, r1
   258be:	d1ea      	bne.n	25896 <ble_hw_whitelist_rmv+0x22>
                cfg_addr = txadd & mask;
   258c0:	b2d1      	uxtb	r1, r2
   258c2:	4039      	ands	r1, r7
                if (addr_type == BLE_ADDR_RANDOM) {
   258c4:	2d01      	cmp	r5, #1
   258c6:	d0e5      	beq.n	25894 <ble_hw_whitelist_rmv+0x20>
                    if (cfg_addr == 0) {
   258c8:	2900      	cmp	r1, #0
   258ca:	d1e4      	bne.n	25896 <ble_hw_whitelist_rmv+0x22>
    if (i < BLE_HW_WHITE_LIST_SIZE) {
   258cc:	2b07      	cmp	r3, #7
   258ce:	dc0b      	bgt.n	258e8 <ble_hw_whitelist_rmv+0x74>
        g_ble_hw_whitelist_mask &= ~mask;
   258d0:	4907      	ldr	r1, [pc, #28]	; (258f0 <ble_hw_whitelist_rmv+0x7c>)
   258d2:	780b      	ldrb	r3, [r1, #0]
   258d4:	ea23 0302 	bic.w	r3, r3, r2
   258d8:	700b      	strb	r3, [r1, #0]
        NRF_RADIO->DACNF &= ~mask;
   258da:	4904      	ldr	r1, [pc, #16]	; (258ec <ble_hw_whitelist_rmv+0x78>)
   258dc:	f8d1 3640 	ldr.w	r3, [r1, #1600]	; 0x640
   258e0:	ea23 0202 	bic.w	r2, r3, r2
   258e4:	f8c1 2640 	str.w	r2, [r1, #1600]	; 0x640
}
   258e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   258ea:	bf00      	nop
   258ec:	40001000 	.word	0x40001000
   258f0:	20008d54 	.word	0x20008d54

000258f4 <ble_hw_whitelist_enable>:
    NRF_RADIO->DACNF |= g_ble_hw_whitelist_mask;
   258f4:	4a04      	ldr	r2, [pc, #16]	; (25908 <ble_hw_whitelist_enable+0x14>)
   258f6:	f8d2 1640 	ldr.w	r1, [r2, #1600]	; 0x640
   258fa:	4b04      	ldr	r3, [pc, #16]	; (2590c <ble_hw_whitelist_enable+0x18>)
   258fc:	781b      	ldrb	r3, [r3, #0]
   258fe:	430b      	orrs	r3, r1
   25900:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   25904:	4770      	bx	lr
   25906:	bf00      	nop
   25908:	40001000 	.word	0x40001000
   2590c:	20008d54 	.word	0x20008d54

00025910 <ble_hw_whitelist_disable>:
    NRF_RADIO->DACNF &= 0x0000ff00;
   25910:	4a03      	ldr	r2, [pc, #12]	; (25920 <ble_hw_whitelist_disable+0x10>)
   25912:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   25916:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   2591a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   2591e:	4770      	bx	lr
   25920:	40001000 	.word	0x40001000

00025924 <ble_hw_whitelist_match>:
    return (int)NRF_RADIO->EVENTS_DEVMATCH;
   25924:	4b01      	ldr	r3, [pc, #4]	; (2592c <ble_hw_whitelist_match+0x8>)
   25926:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   2592a:	4770      	bx	lr
   2592c:	40001000 	.word	0x40001000

00025930 <ble_hw_encrypt_block>:
    NRF_ECB->TASKS_STOPECB = 1;
   25930:	4b0c      	ldr	r3, [pc, #48]	; (25964 <ble_hw_encrypt_block+0x34>)
   25932:	2201      	movs	r2, #1
   25934:	605a      	str	r2, [r3, #4]
    NRF_ECB->EVENTS_ENDECB = 0;
   25936:	2100      	movs	r1, #0
   25938:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    NRF_ECB->EVENTS_ERRORECB = 0;
   2593c:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   25940:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    NRF_ECB->TASKS_STARTECB = 1;
   25944:	601a      	str	r2, [r3, #0]
        end = NRF_ECB->EVENTS_ENDECB;
   25946:	4b07      	ldr	r3, [pc, #28]	; (25964 <ble_hw_encrypt_block+0x34>)
   25948:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
        err = NRF_ECB->EVENTS_ERRORECB;
   2594c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
        if (end || err) {
   25950:	b90a      	cbnz	r2, 25956 <ble_hw_encrypt_block+0x26>
   25952:	2b00      	cmp	r3, #0
   25954:	d0f7      	beq.n	25946 <ble_hw_encrypt_block+0x16>
            if (err) {
   25956:	b90b      	cbnz	r3, 2595c <ble_hw_encrypt_block+0x2c>
    rc = 0;
   25958:	2000      	movs	r0, #0
   2595a:	4770      	bx	lr
                rc = -1;
   2595c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   25960:	4770      	bx	lr
   25962:	bf00      	nop
   25964:	4000e000 	.word	0x4000e000

00025968 <ble_hw_rng_init>:
 */
int
ble_hw_rng_init(ble_rng_isr_cb_t cb, int bias)
{
    /* Set bias */
    if (bias) {
   25968:	b199      	cbz	r1, 25992 <ble_hw_rng_init+0x2a>
        NRF_RNG->CONFIG = 1;
   2596a:	4b0c      	ldr	r3, [pc, #48]	; (2599c <ble_hw_rng_init+0x34>)
   2596c:	2201      	movs	r2, #1
   2596e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    } else {
        NRF_RNG->CONFIG = 0;
    }

    /* If we were passed a function pointer we need to enable the interrupt */
    if (cb != NULL) {
   25972:	b160      	cbz	r0, 2598e <ble_hw_rng_init+0x26>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   25974:	4b0a      	ldr	r3, [pc, #40]	; (259a0 <ble_hw_rng_init+0x38>)
   25976:	22e0      	movs	r2, #224	; 0xe0
   25978:	f883 230d 	strb.w	r2, [r3, #781]	; 0x30d
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2597c:	4a09      	ldr	r2, [pc, #36]	; (259a4 <ble_hw_rng_init+0x3c>)
   2597e:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   25980:	4909      	ldr	r1, [pc, #36]	; (259a8 <ble_hw_rng_init+0x40>)
   25982:	6751      	str	r1, [r2, #116]	; 0x74
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25984:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   25988:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(RNG_IRQn, (uint32_t)ble_rng_isr);
#else
        ble_npl_hw_set_isr(RNG_IRQn, ble_rng_isr);
#endif
        NVIC_EnableIRQ(RNG_IRQn);
        g_ble_rng_isr_cb = cb;
   2598a:	4b08      	ldr	r3, [pc, #32]	; (259ac <ble_hw_rng_init+0x44>)
   2598c:	6018      	str	r0, [r3, #0]
    }

    return 0;
}
   2598e:	2000      	movs	r0, #0
   25990:	4770      	bx	lr
        NRF_RNG->CONFIG = 0;
   25992:	4b02      	ldr	r3, [pc, #8]	; (2599c <ble_hw_rng_init+0x34>)
   25994:	2200      	movs	r2, #0
   25996:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   2599a:	e7ea      	b.n	25972 <ble_hw_rng_init+0xa>
   2599c:	4000d000 	.word	0x4000d000
   259a0:	e000e100 	.word	0xe000e100
   259a4:	e000ed00 	.word	0xe000ed00
   259a8:	00025749 	.word	0x00025749
   259ac:	20008d58 	.word	0x20008d58

000259b0 <ble_hw_rng_start>:
 *
 * @return int
 */
int
ble_hw_rng_start(void)
{
   259b0:	b508      	push	{r3, lr}
    os_sr_t sr;

    /* No need for interrupt if there is no callback */
    OS_ENTER_CRITICAL(sr);
   259b2:	f7e5 fd8d 	bl	b4d0 <os_arch_save_sr>
    NRF_RNG->EVENTS_VALRDY = 0;
   259b6:	4b09      	ldr	r3, [pc, #36]	; (259dc <ble_hw_rng_start+0x2c>)
   259b8:	2200      	movs	r2, #0
   259ba:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    if (g_ble_rng_isr_cb) {
   259be:	4b08      	ldr	r3, [pc, #32]	; (259e0 <ble_hw_rng_start+0x30>)
   259c0:	681b      	ldr	r3, [r3, #0]
   259c2:	b11b      	cbz	r3, 259cc <ble_hw_rng_start+0x1c>
        NRF_RNG->INTENSET = 1;
   259c4:	4b05      	ldr	r3, [pc, #20]	; (259dc <ble_hw_rng_start+0x2c>)
   259c6:	2201      	movs	r2, #1
   259c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    }
    NRF_RNG->TASKS_START = 1;
   259cc:	4b03      	ldr	r3, [pc, #12]	; (259dc <ble_hw_rng_start+0x2c>)
   259ce:	2201      	movs	r2, #1
   259d0:	601a      	str	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   259d2:	f7e5 fd83 	bl	b4dc <os_arch_restore_sr>

    return 0;
}
   259d6:	2000      	movs	r0, #0
   259d8:	bd08      	pop	{r3, pc}
   259da:	bf00      	nop
   259dc:	4000d000 	.word	0x4000d000
   259e0:	20008d58 	.word	0x20008d58

000259e4 <ble_hw_rng_stop>:
 *
 * @return int
 */
int
ble_hw_rng_stop(void)
{
   259e4:	b510      	push	{r4, lr}
    os_sr_t sr;

    /* No need for interrupt if there is no callback */
    OS_ENTER_CRITICAL(sr);
   259e6:	f7e5 fd73 	bl	b4d0 <os_arch_save_sr>
    NRF_RNG->INTENCLR = 1;
   259ea:	4b06      	ldr	r3, [pc, #24]	; (25a04 <ble_hw_rng_stop+0x20>)
   259ec:	2201      	movs	r2, #1
   259ee:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RNG->TASKS_STOP = 1;
   259f2:	605a      	str	r2, [r3, #4]
    NRF_RNG->EVENTS_VALRDY = 0;
   259f4:	2400      	movs	r4, #0
   259f6:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
    OS_EXIT_CRITICAL(sr);
   259fa:	f7e5 fd6f 	bl	b4dc <os_arch_restore_sr>

    return 0;
}
   259fe:	4620      	mov	r0, r4
   25a00:	bd10      	pop	{r4, pc}
   25a02:	bf00      	nop
   25a04:	4000d000 	.word	0x4000d000

00025a08 <ble_hw_resolv_list_clear>:
 * @return int
 */
void
ble_hw_resolv_list_clear(void)
{
    g_nrf_num_irks = 0;
   25a08:	4b01      	ldr	r3, [pc, #4]	; (25a10 <ble_hw_resolv_list_clear+0x8>)
   25a0a:	2200      	movs	r2, #0
   25a0c:	701a      	strb	r2, [r3, #0]
}
   25a0e:	4770      	bx	lr
   25a10:	20008d9c 	.word	0x20008d9c

00025a14 <ble_hw_resolv_list_add>:
ble_hw_resolv_list_add(uint8_t *irk)
{
    uint32_t *nrf_entry;

    /* Find first ununsed device address match element */
    if (g_nrf_num_irks == NRF_IRK_LIST_ENTRIES) {
   25a14:	4b0b      	ldr	r3, [pc, #44]	; (25a44 <ble_hw_resolv_list_add+0x30>)
   25a16:	781b      	ldrb	r3, [r3, #0]
   25a18:	2b04      	cmp	r3, #4
   25a1a:	d011      	beq.n	25a40 <ble_hw_resolv_list_add+0x2c>
{
   25a1c:	b4f0      	push	{r4, r5, r6, r7}
        return BLE_ERR_MEM_CAPACITY;
    }

    /* Copy into irk list */
    nrf_entry = &g_nrf_irk_list[4 * g_nrf_num_irks];
   25a1e:	4c0a      	ldr	r4, [pc, #40]	; (25a48 <ble_hw_resolv_list_add+0x34>)
   25a20:	0119      	lsls	r1, r3, #4
   25a22:	1862      	adds	r2, r4, r1
    memcpy(nrf_entry, irk, 16);
   25a24:	6807      	ldr	r7, [r0, #0]
   25a26:	6846      	ldr	r6, [r0, #4]
   25a28:	6885      	ldr	r5, [r0, #8]
   25a2a:	68c0      	ldr	r0, [r0, #12]
   25a2c:	5067      	str	r7, [r4, r1]
   25a2e:	6056      	str	r6, [r2, #4]
   25a30:	6095      	str	r5, [r2, #8]
   25a32:	60d0      	str	r0, [r2, #12]

    /* Add to total */
    ++g_nrf_num_irks;
   25a34:	3301      	adds	r3, #1
   25a36:	4a03      	ldr	r2, [pc, #12]	; (25a44 <ble_hw_resolv_list_add+0x30>)
   25a38:	7013      	strb	r3, [r2, #0]
    return BLE_ERR_SUCCESS;
   25a3a:	2000      	movs	r0, #0
}
   25a3c:	bcf0      	pop	{r4, r5, r6, r7}
   25a3e:	4770      	bx	lr
        return BLE_ERR_MEM_CAPACITY;
   25a40:	2007      	movs	r0, #7
}
   25a42:	4770      	bx	lr
   25a44:	20008d9c 	.word	0x20008d9c
   25a48:	20008d5c 	.word	0x20008d5c

00025a4c <ble_hw_resolv_list_rmv>:
void
ble_hw_resolv_list_rmv(int index)
{
    uint32_t *irk_entry;

    if (index < g_nrf_num_irks) {
   25a4c:	4b0b      	ldr	r3, [pc, #44]	; (25a7c <ble_hw_resolv_list_rmv+0x30>)
   25a4e:	781b      	ldrb	r3, [r3, #0]
   25a50:	4283      	cmp	r3, r0
   25a52:	dd12      	ble.n	25a7a <ble_hw_resolv_list_rmv+0x2e>
{
   25a54:	b510      	push	{r4, lr}
        --g_nrf_num_irks;
   25a56:	3b01      	subs	r3, #1
   25a58:	b2db      	uxtb	r3, r3
   25a5a:	4a08      	ldr	r2, [pc, #32]	; (25a7c <ble_hw_resolv_list_rmv+0x30>)
   25a5c:	7013      	strb	r3, [r2, #0]
        irk_entry = &g_nrf_irk_list[index];
   25a5e:	4c08      	ldr	r4, [pc, #32]	; (25a80 <ble_hw_resolv_list_rmv+0x34>)
   25a60:	eb04 0480 	add.w	r4, r4, r0, lsl #2
        if (g_nrf_num_irks > index) {
   25a64:	4283      	cmp	r3, r0
   25a66:	dc00      	bgt.n	25a6a <ble_hw_resolv_list_rmv+0x1e>
            memmove(irk_entry, irk_entry + 4, 16 * (g_nrf_num_irks - index));
        }
    }
}
   25a68:	bd10      	pop	{r4, pc}
            memmove(irk_entry, irk_entry + 4, 16 * (g_nrf_num_irks - index));
   25a6a:	1a1a      	subs	r2, r3, r0
   25a6c:	0112      	lsls	r2, r2, #4
   25a6e:	f104 0110 	add.w	r1, r4, #16
   25a72:	4620      	mov	r0, r4
   25a74:	f7e5 fea7 	bl	b7c6 <memmove>
}
   25a78:	e7f6      	b.n	25a68 <ble_hw_resolv_list_rmv+0x1c>
   25a7a:	4770      	bx	lr
   25a7c:	20008d9c 	.word	0x20008d9c
   25a80:	20008d5c 	.word	0x20008d5c

00025a84 <ble_hw_resolv_list_size>:
 */
uint8_t
ble_hw_resolv_list_size(void)
{
    return BLE_HW_RESOLV_LIST_SIZE;
}
   25a84:	2010      	movs	r0, #16
   25a86:	4770      	bx	lr

00025a88 <ble_hw_resolv_list_match>:
int
ble_hw_resolv_list_match(void)
{
    uint32_t index;

    if (NRF_AAR->EVENTS_END) {
   25a88:	4b08      	ldr	r3, [pc, #32]	; (25aac <ble_hw_resolv_list_match+0x24>)
   25a8a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   25a8e:	b13b      	cbz	r3, 25aa0 <ble_hw_resolv_list_match+0x18>
        if (NRF_AAR->EVENTS_RESOLVED) {
   25a90:	4b06      	ldr	r3, [pc, #24]	; (25aac <ble_hw_resolv_list_match+0x24>)
   25a92:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   25a96:	b133      	cbz	r3, 25aa6 <ble_hw_resolv_list_match+0x1e>
            index = NRF_AAR->STATUS;
   25a98:	4b04      	ldr	r3, [pc, #16]	; (25aac <ble_hw_resolv_list_match+0x24>)
   25a9a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
            return (int)index;
   25a9e:	4770      	bx	lr
        }
    }

    return -1;
   25aa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25aa4:	4770      	bx	lr
   25aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   25aaa:	4770      	bx	lr
   25aac:	4000f000 	.word	0x4000f000

00025ab0 <ble_phy_apply_errata_102_106_107>:
{
    /* [102] RADIO: PAYLOAD/END events delayed or not triggered after ADDRESS
     * [106] RADIO: Higher CRC error rates for some access addresses
     * [107] RADIO: Immediate address match for access addresses containing MSBs 0x00
     */
    *(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   25ab0:	4a04      	ldr	r2, [pc, #16]	; (25ac4 <ble_phy_apply_errata_102_106_107+0x14>)
   25ab2:	6813      	ldr	r3, [r2, #0]
                         0xfffffffe) | 0x01000000;
   25ab4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   25ab8:	f023 0301 	bic.w	r3, r3, #1
   25abc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    *(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   25ac0:	6013      	str	r3, [r2, #0]
}
   25ac2:	4770      	bx	lr
   25ac4:	40001774 	.word	0x40001774

00025ac8 <nrf_wait_disabled>:
static void
nrf_wait_disabled(void)
{
    uint32_t state;

    state = NRF_RADIO->STATE;
   25ac8:	4b06      	ldr	r3, [pc, #24]	; (25ae4 <nrf_wait_disabled+0x1c>)
   25aca:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    if (state != RADIO_STATE_STATE_Disabled) {
   25ace:	b143      	cbz	r3, 25ae2 <nrf_wait_disabled+0x1a>
        if ((state == RADIO_STATE_STATE_RxDisable) ||
   25ad0:	2b04      	cmp	r3, #4
   25ad2:	d001      	beq.n	25ad8 <nrf_wait_disabled+0x10>
   25ad4:	2b0c      	cmp	r3, #12
   25ad6:	d104      	bne.n	25ae2 <nrf_wait_disabled+0x1a>
            (state == RADIO_STATE_STATE_TxDisable)) {
            /* This will end within a short time (6 usecs). Just poll */
            while (NRF_RADIO->STATE == state) {
   25ad8:	4a02      	ldr	r2, [pc, #8]	; (25ae4 <nrf_wait_disabled+0x1c>)
   25ada:	f8d2 2550 	ldr.w	r2, [r2, #1360]	; 0x550
   25ade:	429a      	cmp	r2, r3
   25ae0:	d0fa      	beq.n	25ad8 <nrf_wait_disabled+0x10>
                /* If this fails, something is really wrong. Should last
                 * no more than 6 usecs */
            }
        }
    }
}
   25ae2:	4770      	bx	lr
   25ae4:	40001000 	.word	0x40001000

00025ae8 <ble_phy_set_start_time>:
 *
 *
 */
static int
ble_phy_set_start_time(uint32_t cputime, uint8_t rem_usecs, bool tx)
{
   25ae8:	b430      	push	{r4, r5}
     * Radio ramp-up time is 40 usecs and TX delay is 3 or 5 usecs depending on
     * phy, thus we'll offset RTC by 2 full ticks (61 usecs) and then compensate
     * using TIMER0 with 1 usec precision.
     */

    cputime -= 2;
   25aea:	1e84      	subs	r4, r0, #2
    rem_usecs += 61;
    if (tx) {
   25aec:	2a00      	cmp	r2, #0
   25aee:	d03d      	beq.n	25b6c <ble_phy_set_start_time+0x84>
        rem_usecs -= BLE_PHY_T_TXENFAST;
   25af0:	3115      	adds	r1, #21
   25af2:	b2c9      	uxtb	r1, r1
        rem_usecs -= g_ble_phy_t_txdelay[g_ble_phy_data.phy_cur_phy_mode];
   25af4:	4b23      	ldr	r3, [pc, #140]	; (25b84 <ble_phy_set_start_time+0x9c>)
   25af6:	7a9b      	ldrb	r3, [r3, #10]
   25af8:	4a23      	ldr	r2, [pc, #140]	; (25b88 <ble_phy_set_start_time+0xa0>)
   25afa:	5cd3      	ldrb	r3, [r2, r3]
   25afc:	1ac9      	subs	r1, r1, r3
   25afe:	b2c9      	uxtb	r1, r1
     * tick then we should better count one more low-power tick rather than
     * 30 high-power usecs. Also make sure we don't set TIMER0 CC to 0 as the
     * compare won't occur.
     */

    if (rem_usecs > 30) {
   25b00:	291e      	cmp	r1, #30
   25b02:	d902      	bls.n	25b0a <ble_phy_set_start_time+0x22>
        cputime++;
   25b04:	1e44      	subs	r4, r0, #1
        rem_usecs -= 30;
   25b06:	391e      	subs	r1, #30
   25b08:	b2c9      	uxtb	r1, r1
     *      counter.
     *
     * NOTE: since the counter can tick 1 while we do these calculations we
     * need to account for it.
     */
    next_cc = cputime & 0xffffff;
   25b0a:	f024 457f 	bic.w	r5, r4, #4278190080	; 0xff000000
    cur_cc = NRF_RTC0->CC[0];
   25b0e:	4a1f      	ldr	r2, [pc, #124]	; (25b8c <ble_phy_set_start_time+0xa4>)
   25b10:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
    cntr = NRF_RTC0->COUNTER;
   25b14:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504

    delta = (cur_cc - cntr) & 0xffffff;
   25b18:	1a9b      	subs	r3, r3, r2
   25b1a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    if ((delta <= 3) && (delta != 0)) {
   25b1e:	3b01      	subs	r3, #1
   25b20:	2b02      	cmp	r3, #2
   25b22:	d926      	bls.n	25b72 <ble_phy_set_start_time+0x8a>
        return -1;
    }
    delta = (next_cc - cntr) & 0xffffff;
   25b24:	1aaa      	subs	r2, r5, r2
   25b26:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
    if ((delta & 0x800000) || (delta < 3)) {
   25b2a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   25b2e:	d123      	bne.n	25b78 <ble_phy_set_start_time+0x90>
   25b30:	2b02      	cmp	r3, #2
   25b32:	d924      	bls.n	25b7e <ble_phy_set_start_time+0x96>
        return -1;
    }

    /* Clear and set TIMER0 to fire off at proper time */
    NRF_TIMER0->TASKS_CLEAR = 1;
   25b34:	4b16      	ldr	r3, [pc, #88]	; (25b90 <ble_phy_set_start_time+0xa8>)
   25b36:	2201      	movs	r2, #1
   25b38:	60da      	str	r2, [r3, #12]
    NRF_TIMER0->CC[0] = rem_usecs;
   25b3a:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   25b3e:	2000      	movs	r0, #0
   25b40:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140

    /* Set RTC compare to start TIMER0 */
    NRF_RTC0->EVENTS_COMPARE[0] = 0;
   25b44:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
   25b48:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
    NRF_RTC0->CC[0] = next_cc;
   25b4c:	f8c3 5540 	str.w	r5, [r3, #1344]	; 0x540
    NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
   25b50:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   25b54:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344

    /* Enable PPI */
    NRF_PPI->CHENSET = PPI_CHEN_CH31_Msk;
   25b58:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   25b5c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   25b60:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

    /* Store the cputime at which we set the RTC */
    g_ble_phy_data.phy_start_cputime = cputime;
   25b64:	4b07      	ldr	r3, [pc, #28]	; (25b84 <ble_phy_set_start_time+0x9c>)
   25b66:	631c      	str	r4, [r3, #48]	; 0x30

    return 0;
}
   25b68:	bc30      	pop	{r4, r5}
   25b6a:	4770      	bx	lr
        rem_usecs -= BLE_PHY_T_RXENFAST;
   25b6c:	3115      	adds	r1, #21
   25b6e:	b2c9      	uxtb	r1, r1
   25b70:	e7c6      	b.n	25b00 <ble_phy_set_start_time+0x18>
        return -1;
   25b72:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25b76:	e7f7      	b.n	25b68 <ble_phy_set_start_time+0x80>
        return -1;
   25b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25b7c:	e7f4      	b.n	25b68 <ble_phy_set_start_time+0x80>
   25b7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   25b82:	e7f1      	b.n	25b68 <ble_phy_set_start_time+0x80>
   25b84:	20008da0 	.word	0x20008da0
   25b88:	000298bc 	.word	0x000298bc
   25b8c:	4000b000 	.word	0x4000b000
   25b90:	40008000 	.word	0x40008000

00025b94 <ble_phy_get_ccm_datarate>:
    assert(0);
    return 0;
#else
    return CCM_MODE_DATARATE_1Mbit << CCM_MODE_DATARATE_Pos;
#endif
}
   25b94:	2000      	movs	r0, #0
   25b96:	4770      	bx	lr

00025b98 <ble_phy_rx_xcvr_setup>:
/**
 * Setup transceiver for receive.
 */
static void
ble_phy_rx_xcvr_setup(void)
{
   25b98:	b510      	push	{r4, lr}

    dptr = (uint8_t *)&g_ble_phy_rx_buf[0];
    dptr += 3;

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LE_ENCRYPTION)
    if (g_ble_phy_data.phy_encrypted) {
   25b9a:	4b35      	ldr	r3, [pc, #212]	; (25c70 <ble_phy_rx_xcvr_setup+0xd8>)
   25b9c:	79db      	ldrb	r3, [r3, #7]
   25b9e:	b383      	cbz	r3, 25c02 <ble_phy_rx_xcvr_setup+0x6a>
        NRF_RADIO->PACKETPTR = (uint32_t)&g_ble_phy_enc_buf[0];
   25ba0:	4b34      	ldr	r3, [pc, #208]	; (25c74 <ble_phy_rx_xcvr_setup+0xdc>)
   25ba2:	4a35      	ldr	r2, [pc, #212]	; (25c78 <ble_phy_rx_xcvr_setup+0xe0>)
   25ba4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
        NRF_CCM->INPTR = (uint32_t)&g_ble_phy_enc_buf[0];
   25ba8:	4c34      	ldr	r4, [pc, #208]	; (25c7c <ble_phy_rx_xcvr_setup+0xe4>)
   25baa:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
        NRF_CCM->OUTPTR = (uint32_t)dptr;
   25bae:	4b34      	ldr	r3, [pc, #208]	; (25c80 <ble_phy_rx_xcvr_setup+0xe8>)
   25bb0:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
        NRF_CCM->SCRATCHPTR = (uint32_t)&g_nrf_encrypt_scratchpad[0];
   25bb4:	4b33      	ldr	r3, [pc, #204]	; (25c84 <ble_phy_rx_xcvr_setup+0xec>)
   25bb6:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | CCM_MODE_MODE_Decryption |
                                                    ble_phy_get_ccm_datarate();
   25bba:	f7ff ffeb 	bl	25b94 <ble_phy_get_ccm_datarate>
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | CCM_MODE_MODE_Decryption |
   25bbe:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   25bc2:	f040 0001 	orr.w	r0, r0, #1
   25bc6:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
        NRF_CCM->CNFPTR = (uint32_t)&g_nrf_ccm_data;
   25bca:	4b2f      	ldr	r3, [pc, #188]	; (25c88 <ble_phy_rx_xcvr_setup+0xf0>)
   25bcc:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
        NRF_CCM->SHORTS = 0;
   25bd0:	2300      	movs	r3, #0
   25bd2:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
        NRF_CCM->EVENTS_ERROR = 0;
   25bd6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        NRF_CCM->EVENTS_ENDCRYPT = 0;
   25bda:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        NRF_CCM->TASKS_KSGEN = 1;
   25bde:	2301      	movs	r3, #1
   25be0:	6023      	str	r3, [r4, #0]
        NRF_PPI->CHENSET = PPI_CHEN_CH25_Msk;
   25be2:	4b2a      	ldr	r3, [pc, #168]	; (25c8c <ble_phy_rx_xcvr_setup+0xf4>)
   25be4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   25be8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
#else
    NRF_RADIO->PACKETPTR = (uint32_t)dptr;
#endif

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
    if (g_ble_phy_data.phy_privacy) {
   25bec:	4b20      	ldr	r3, [pc, #128]	; (25c70 <ble_phy_rx_xcvr_setup+0xd8>)
   25bee:	7a1b      	ldrb	r3, [r3, #8]
   25bf0:	b963      	cbnz	r3, 25c0c <ble_phy_rx_xcvr_setup+0x74>
        NRF_AAR->SCRATCHPTR = (uint32_t)&g_ble_phy_data.phy_aar_scratch;
        NRF_AAR->EVENTS_END = 0;
        NRF_AAR->EVENTS_RESOLVED = 0;
        NRF_AAR->EVENTS_NOTRESOLVED = 0;
    } else {
        if (g_ble_phy_data.phy_encrypted == 0) {
   25bf2:	4b1f      	ldr	r3, [pc, #124]	; (25c70 <ble_phy_rx_xcvr_setup+0xd8>)
   25bf4:	79db      	ldrb	r3, [r3, #7]
   25bf6:	b9d3      	cbnz	r3, 25c2e <ble_phy_rx_xcvr_setup+0x96>
            NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Disabled;
   25bf8:	4b20      	ldr	r3, [pc, #128]	; (25c7c <ble_phy_rx_xcvr_setup+0xe4>)
   25bfa:	2200      	movs	r2, #0
   25bfc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   25c00:	e015      	b.n	25c2e <ble_phy_rx_xcvr_setup+0x96>
        NRF_RADIO->PACKETPTR = (uint32_t)dptr;
   25c02:	4a1f      	ldr	r2, [pc, #124]	; (25c80 <ble_phy_rx_xcvr_setup+0xe8>)
   25c04:	4b1c      	ldr	r3, [pc, #112]	; (25c78 <ble_phy_rx_xcvr_setup+0xe0>)
   25c06:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   25c0a:	e7ef      	b.n	25bec <ble_phy_rx_xcvr_setup+0x54>
        NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Enabled;
   25c0c:	4b1b      	ldr	r3, [pc, #108]	; (25c7c <ble_phy_rx_xcvr_setup+0xe4>)
   25c0e:	2203      	movs	r2, #3
   25c10:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
        NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   25c14:	4a1e      	ldr	r2, [pc, #120]	; (25c90 <ble_phy_rx_xcvr_setup+0xf8>)
   25c16:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        NRF_AAR->SCRATCHPTR = (uint32_t)&g_ble_phy_data.phy_aar_scratch;
   25c1a:	4a1e      	ldr	r2, [pc, #120]	; (25c94 <ble_phy_rx_xcvr_setup+0xfc>)
   25c1c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
        NRF_AAR->EVENTS_END = 0;
   25c20:	2200      	movs	r2, #0
   25c22:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        NRF_AAR->EVENTS_RESOLVED = 0;
   25c26:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        NRF_AAR->EVENTS_NOTRESOLVED = 0;
   25c2a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
        }
    }
#endif

    /* Turn off trigger TXEN on output compare match and AAR on bcmatch */
    NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk | PPI_CHEN_CH23_Msk;
   25c2e:	4b17      	ldr	r3, [pc, #92]	; (25c8c <ble_phy_rx_xcvr_setup+0xf4>)
   25c30:	f44f 0210 	mov.w	r2, #9437184	; 0x900000
   25c34:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    /* Reset the rx started flag. Used for the wait for response */
    g_ble_phy_data.phy_rx_started = 0;
   25c38:	4b0d      	ldr	r3, [pc, #52]	; (25c70 <ble_phy_rx_xcvr_setup+0xd8>)
   25c3a:	2200      	movs	r2, #0
   25c3c:	719a      	strb	r2, [r3, #6]
    g_ble_phy_data.phy_state = BLE_PHY_STATE_RX;
   25c3e:	2101      	movs	r1, #1
   25c40:	70d9      	strb	r1, [r3, #3]
        g_ble_phy_data.phy_bcc_offset = 5;
    } else {
        g_ble_phy_data.phy_bcc_offset = 0;
    }
#else
    g_ble_phy_data.phy_bcc_offset = 0;
   25c42:	735a      	strb	r2, [r3, #13]
#endif

    /* I want to know when 1st byte received (after address) */
    NRF_RADIO->BCC = 8 + g_ble_phy_data.phy_bcc_offset; /* in bits */
   25c44:	4b0c      	ldr	r3, [pc, #48]	; (25c78 <ble_phy_rx_xcvr_setup+0xe0>)
   25c46:	2108      	movs	r1, #8
   25c48:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
    NRF_RADIO->EVENTS_ADDRESS = 0;
   25c4c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    NRF_RADIO->EVENTS_DEVMATCH = 0;
   25c50:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    NRF_RADIO->EVENTS_BCMATCH = 0;
   25c54:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    NRF_RADIO->EVENTS_RSSIEND = 0;
   25c58:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    NRF_RADIO->EVENTS_CRCOK = 0;
   25c5c:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    NRF_RADIO->SHORTS = RADIO_SHORTS_END_DISABLE_Msk |
   25c60:	f240 1253 	movw	r2, #339	; 0x153
   25c64:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
                        RADIO_SHORTS_READY_START_Msk |
                        RADIO_SHORTS_ADDRESS_BCSTART_Msk |
                        RADIO_SHORTS_ADDRESS_RSSISTART_Msk |
                        RADIO_SHORTS_DISABLED_RSSISTOP_Msk;

    NRF_RADIO->INTENSET = RADIO_INTENSET_ADDRESS_Msk;
   25c68:	2202      	movs	r2, #2
   25c6a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   25c6e:	bd10      	pop	{r4, pc}
   25c70:	20008da0 	.word	0x20008da0
   25c74:	20008dd4 	.word	0x20008dd4
   25c78:	40001000 	.word	0x40001000
   25c7c:	4000f000 	.word	0x4000f000
   25c80:	20008edb 	.word	0x20008edb
   25c84:	20009104 	.word	0x20009104
   25c88:	200090e0 	.word	0x200090e0
   25c8c:	4001f000 	.word	0x4001f000
   25c90:	20008d5c 	.word	0x20008d5c
   25c94:	20008db0 	.word	0x20008db0

00025c98 <ble_phy_set_access_addr>:
 *
 * @return int 0: success; PHY error code otherwise
 */
static int
ble_phy_set_access_addr(uint32_t access_addr)
{
   25c98:	b508      	push	{r3, lr}
    NRF_RADIO->BASE0 = (access_addr << 8);
   25c9a:	0203      	lsls	r3, r0, #8
   25c9c:	4a08      	ldr	r2, [pc, #32]	; (25cc0 <ble_phy_set_access_addr+0x28>)
   25c9e:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    NRF_RADIO->PREFIX0 = (NRF_RADIO->PREFIX0 & 0xFFFFFF00) | (access_addr >> 24);
   25ca2:	f8d2 3524 	ldr.w	r3, [r2, #1316]	; 0x524
   25ca6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   25caa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
   25cae:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524

    g_ble_phy_data.phy_access_address = access_addr;
   25cb2:	4b04      	ldr	r3, [pc, #16]	; (25cc4 <ble_phy_set_access_addr+0x2c>)
   25cb4:	6158      	str	r0, [r3, #20]

    ble_phy_apply_errata_102_106_107();
   25cb6:	f7ff fefb 	bl	25ab0 <ble_phy_apply_errata_102_106_107>

    return 0;
}
   25cba:	2000      	movs	r0, #0
   25cbc:	bd08      	pop	{r3, pc}
   25cbe:	bf00      	nop
   25cc0:	40001000 	.word	0x40001000
   25cc4:	20008da0 	.word	0x20008da0

00025cc8 <ble_phy_stop_usec_timer>:
 * Stop the timer used to count microseconds when using RTC for cputime
 */
static void
ble_phy_stop_usec_timer(void)
{
    NRF_TIMER0->TASKS_STOP = 1;
   25cc8:	4b05      	ldr	r3, [pc, #20]	; (25ce0 <ble_phy_stop_usec_timer+0x18>)
   25cca:	2201      	movs	r2, #1
   25ccc:	605a      	str	r2, [r3, #4]
    NRF_TIMER0->TASKS_SHUTDOWN = 1;
   25cce:	611a      	str	r2, [r3, #16]
    NRF_RTC0->EVTENCLR = RTC_EVTENSET_COMPARE0_Msk;
   25cd0:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
   25cd4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   25cd8:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
}
   25cdc:	4770      	bx	lr
   25cde:	bf00      	nop
   25ce0:	40008000 	.word	0x40008000

00025ce4 <ble_phy_disable_irq_and_ppi>:
 * the phy.
 */
static void
ble_phy_disable_irq_and_ppi(void)
{
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   25ce4:	4b0a      	ldr	r3, [pc, #40]	; (25d10 <ble_phy_disable_irq_and_ppi+0x2c>)
   25ce6:	f243 42ff 	movw	r2, #13567	; 0x34ff
   25cea:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->SHORTS = 0;
   25cee:	2200      	movs	r2, #0
   25cf0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_RADIO->TASKS_DISABLE = 1;
   25cf4:	2101      	movs	r1, #1
   25cf6:	6119      	str	r1, [r3, #16]
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk | PPI_CHEN_CH20_Msk |
   25cf8:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   25cfc:	4905      	ldr	r1, [pc, #20]	; (25d14 <ble_phy_disable_irq_and_ppi+0x30>)
   25cfe:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   25d02:	4b05      	ldr	r3, [pc, #20]	; (25d18 <ble_phy_disable_irq_and_ppi+0x34>)
   25d04:	2102      	movs	r1, #2
   25d06:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
          PPI_CHEN_CH21_Msk | PPI_CHEN_CH23_Msk |
          PPI_CHEN_CH25_Msk | PPI_CHEN_CH31_Msk;
    NVIC_ClearPendingIRQ(RADIO_IRQn);
    g_ble_phy_data.phy_state = BLE_PHY_STATE_IDLE;
   25d0a:	4b04      	ldr	r3, [pc, #16]	; (25d1c <ble_phy_disable_irq_and_ppi+0x38>)
   25d0c:	70da      	strb	r2, [r3, #3]
}
   25d0e:	4770      	bx	lr
   25d10:	40001000 	.word	0x40001000
   25d14:	82b00030 	.word	0x82b00030
   25d18:	e000e100 	.word	0xe000e100
   25d1c:	20008da0 	.word	0x20008da0

00025d20 <ble_phy_set_start_now>:
{
   25d20:	b538      	push	{r3, r4, r5, lr}
    OS_ENTER_CRITICAL(sr);
   25d22:	f7e5 fbd5 	bl	b4d0 <os_arch_save_sr>
   25d26:	4605      	mov	r5, r0
    NRF_TIMER0->TASKS_CLEAR = 1;
   25d28:	4b10      	ldr	r3, [pc, #64]	; (25d6c <ble_phy_set_start_now+0x4c>)
   25d2a:	2201      	movs	r2, #1
   25d2c:	60da      	str	r2, [r3, #12]
    NRF_TIMER0->CC[0] = 1;
   25d2e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   25d32:	2400      	movs	r4, #0
   25d34:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
    now = os_cputime_get32();
   25d38:	f7f6 f809 	bl	1bd4e <os_cputime_get32>
    NRF_RTC0->EVENTS_COMPARE[0] = 0;
   25d3c:	4b0c      	ldr	r3, [pc, #48]	; (25d70 <ble_phy_set_start_now+0x50>)
   25d3e:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
    NRF_RTC0->CC[0] = now + 3;
   25d42:	3003      	adds	r0, #3
   25d44:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
   25d48:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   25d4c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    NRF_PPI->CHENSET = PPI_CHEN_CH31_Msk;
   25d50:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
   25d54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   25d58:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    g_ble_phy_data.phy_start_cputime = now + 3;
   25d5c:	4b05      	ldr	r3, [pc, #20]	; (25d74 <ble_phy_set_start_now+0x54>)
   25d5e:	6318      	str	r0, [r3, #48]	; 0x30
    OS_EXIT_CRITICAL(sr);
   25d60:	4628      	mov	r0, r5
   25d62:	f7e5 fbbb 	bl	b4dc <os_arch_restore_sr>
}
   25d66:	4620      	mov	r0, r4
   25d68:	bd38      	pop	{r3, r4, r5, pc}
   25d6a:	bf00      	nop
   25d6c:	40008000 	.word	0x40008000
   25d70:	4000b000 	.word	0x4000b000
   25d74:	20008da0 	.word	0x20008da0

00025d78 <ble_phy_get_cur_phy>:
}
   25d78:	2001      	movs	r0, #1
   25d7a:	4770      	bx	lr

00025d7c <ble_phy_rxpdu_copy>:
{
   25d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert(((uint32_t)dptr & 3) == 0);
   25d7e:	f010 0f03 	tst.w	r0, #3
   25d82:	d10a      	bne.n	25d9a <ble_phy_rxpdu_copy+0x1e>
   25d84:	460e      	mov	r6, r1
    block_len = rxpdu->om_omp->omp_databuf_len;
   25d86:	688b      	ldr	r3, [r1, #8]
   25d88:	f8b3 c000 	ldrh.w	ip, [r3]
    rem_len = OS_MBUF_PKTHDR(rxpdu)->omp_len;
   25d8c:	8a0d      	ldrh	r5, [r1, #16]
    copy_len = block_len - rxpdu->om_pkthdr_len - 4;
   25d8e:	794b      	ldrb	r3, [r1, #5]
   25d90:	ebac 0303 	sub.w	r3, ip, r3
   25d94:	3b04      	subs	r3, #4
    om = rxpdu;
   25d96:	460f      	mov	r7, r1
   25d98:	e00b      	b.n	25db2 <ble_phy_rxpdu_copy+0x36>
    assert(((uint32_t)dptr & 3) == 0);
   25d9a:	f7e2 fa11 	bl	81c0 <hal_debugger_connected>
   25d9e:	b100      	cbz	r0, 25da2 <ble_phy_rxpdu_copy+0x26>
   25da0:	be01      	bkpt	0x0001
   25da2:	2300      	movs	r3, #0
   25da4:	461a      	mov	r2, r3
   25da6:	4619      	mov	r1, r3
   25da8:	4618      	mov	r0, r3
   25daa:	f7e3 fd9f 	bl	98ec <__assert_func>
        om = SLIST_NEXT(om, om_next);
   25dae:	68ff      	ldr	r7, [r7, #12]
        copy_len = block_len;
   25db0:	4663      	mov	r3, ip
        copy_len = min(copy_len, rem_len);
   25db2:	462a      	mov	r2, r5
   25db4:	429d      	cmp	r5, r3
   25db6:	bf28      	it	cs
   25db8:	461a      	movcs	r2, r3
        copy_len &= ~3;
   25dba:	f022 0203 	bic.w	r2, r2, #3
        dst = om->om_data;
   25dbe:	6839      	ldr	r1, [r7, #0]
        om->om_len = copy_len;
   25dc0:	80fa      	strh	r2, [r7, #6]
        rem_len -= copy_len;
   25dc2:	1aad      	subs	r5, r5, r2
        block_rem_len -= copy_len;
   25dc4:	eba3 0e02 	sub.w	lr, r3, r2
        __asm__ volatile (".syntax unified              \n"
   25dc8:	4614      	mov	r4, r2
   25dca:	e001      	b.n	25dd0 <ble_phy_rxpdu_copy+0x54>
   25dcc:	5883      	ldr	r3, [r0, r2]
   25dce:	508b      	str	r3, [r1, r2]
   25dd0:	3a04      	subs	r2, #4
   25dd2:	d5fb      	bpl.n	25dcc <ble_phy_rxpdu_copy+0x50>
   25dd4:	1900      	adds	r0, r0, r4
   25dd6:	1909      	adds	r1, r1, r4
        if ((rem_len < 4) && (block_rem_len >= rem_len)) {
   25dd8:	2d03      	cmp	r5, #3
   25dda:	d8e8      	bhi.n	25dae <ble_phy_rxpdu_copy+0x32>
   25ddc:	4575      	cmp	r5, lr
   25dde:	d8e6      	bhi.n	25dae <ble_phy_rxpdu_copy+0x32>
    om->om_len += rem_len;
   25de0:	88fb      	ldrh	r3, [r7, #6]
   25de2:	442b      	add	r3, r5
   25de4:	80fb      	strh	r3, [r7, #6]
    __asm__ volatile (".syntax unified              \n"
   25de6:	e001      	b.n	25dec <ble_phy_rxpdu_copy+0x70>
   25de8:	5d43      	ldrb	r3, [r0, r5]
   25dea:	554b      	strb	r3, [r1, r5]
   25dec:	3d01      	subs	r5, #1
   25dee:	d5fb      	bpl.n	25de8 <ble_phy_rxpdu_copy+0x6c>
    memcpy(BLE_MBUF_HDR_PTR(rxpdu), &g_ble_phy_data.rxhdr,
   25df0:	4c03      	ldr	r4, [pc, #12]	; (25e00 <ble_phy_rxpdu_copy+0x84>)
   25df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   25df4:	61b0      	str	r0, [r6, #24]
   25df6:	61f1      	str	r1, [r6, #28]
   25df8:	6232      	str	r2, [r6, #32]
   25dfa:	6273      	str	r3, [r6, #36]	; 0x24
}
   25dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   25dfe:	bf00      	nop
   25e00:	20008db8 	.word	0x20008db8

00025e04 <ble_phy_wfr_enable>:
{
   25e04:	b410      	push	{r4}
    phy = g_ble_phy_data.phy_cur_phy_mode;
   25e06:	4b1c      	ldr	r3, [pc, #112]	; (25e78 <ble_phy_wfr_enable+0x74>)
   25e08:	7a9c      	ldrb	r4, [r3, #10]
    if (txrx == BLE_PHY_WFR_ENABLE_TXRX) {
   25e0a:	2801      	cmp	r0, #1
   25e0c:	d02a      	beq.n	25e64 <ble_phy_wfr_enable+0x60>
        end_time = NRF_TIMER0->CC[0] + BLE_PHY_T_RXENFAST + wfr_usecs;
   25e0e:	4b1b      	ldr	r3, [pc, #108]	; (25e7c <ble_phy_wfr_enable+0x78>)
   25e10:	f8d3 3540 	ldr.w	r3, [r3, #1344]	; 0x540
   25e14:	441a      	add	r2, r3
   25e16:	3228      	adds	r2, #40	; 0x28
    end_time += ble_phy_mode_pdu_start_off(phy);
   25e18:	3228      	adds	r2, #40	; 0x28
    end_time += g_ble_phy_t_rxaddrdelay[phy];
   25e1a:	4b19      	ldr	r3, [pc, #100]	; (25e80 <ble_phy_wfr_enable+0x7c>)
   25e1c:	5d1b      	ldrb	r3, [r3, r4]
   25e1e:	441a      	add	r2, r3
    NRF_TIMER0->CC[3] = end_time;
   25e20:	4b16      	ldr	r3, [pc, #88]	; (25e7c <ble_phy_wfr_enable+0x78>)
   25e22:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    NRF_TIMER0->EVENTS_COMPARE[3] = 0;
   25e26:	2200      	movs	r2, #0
   25e28:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    NRF_PPI->CHENSET = (PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk);
   25e2c:	4a15      	ldr	r2, [pc, #84]	; (25e84 <ble_phy_wfr_enable+0x80>)
   25e2e:	2130      	movs	r1, #48	; 0x30
   25e30:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
   25e34:	f5a2 32f0 	sub.w	r2, r2, #122880	; 0x1e000
   25e38:	2110      	movs	r1, #16
   25e3a:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    NRF_TIMER0->TASKS_CAPTURE[1] = 1;
   25e3e:	2201      	movs	r2, #1
   25e40:	645a      	str	r2, [r3, #68]	; 0x44
    if (NRF_TIMER0->CC[1] > NRF_TIMER0->CC[3]) {
   25e42:	f8d3 2544 	ldr.w	r2, [r3, #1348]	; 0x544
   25e46:	f8d3 354c 	ldr.w	r3, [r3, #1356]	; 0x54c
   25e4a:	429a      	cmp	r2, r3
   25e4c:	d907      	bls.n	25e5e <ble_phy_wfr_enable+0x5a>
        NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk;
   25e4e:	4b0d      	ldr	r3, [pc, #52]	; (25e84 <ble_phy_wfr_enable+0x80>)
   25e50:	2230      	movs	r2, #48	; 0x30
   25e52:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        NRF_RADIO->TASKS_DISABLE = 1;
   25e56:	f5a3 33f0 	sub.w	r3, r3, #122880	; 0x1e000
   25e5a:	2201      	movs	r2, #1
   25e5c:	611a      	str	r2, [r3, #16]
}
   25e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
   25e62:	4770      	bx	lr
        end_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   25e64:	4b05      	ldr	r3, [pc, #20]	; (25e7c <ble_phy_wfr_enable+0x78>)
   25e66:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
   25e6a:	3396      	adds	r3, #150	; 0x96
        end_time += g_ble_phy_t_txenddelay[tx_phy_mode];
   25e6c:	4a06      	ldr	r2, [pc, #24]	; (25e88 <ble_phy_wfr_enable+0x84>)
   25e6e:	5c52      	ldrb	r2, [r2, r1]
   25e70:	441a      	add	r2, r3
        end_time += 1;
   25e72:	3203      	adds	r2, #3
   25e74:	e7d0      	b.n	25e18 <ble_phy_wfr_enable+0x14>
   25e76:	bf00      	nop
   25e78:	20008da0 	.word	0x20008da0
   25e7c:	40008000 	.word	0x40008000
   25e80:	000298b4 	.word	0x000298b4
   25e84:	4001f000 	.word	0x4001f000
   25e88:	000298c0 	.word	0x000298c0

00025e8c <ble_phy_tx_end_isr>:
{
   25e8c:	b510      	push	{r4, lr}
    tx_phy_mode = g_ble_phy_data.phy_cur_phy_mode;
   25e8e:	4b2e      	ldr	r3, [pc, #184]	; (25f48 <ble_phy_tx_end_isr+0xbc>)
   25e90:	7a9c      	ldrb	r4, [r3, #10]
    was_encrypted = g_ble_phy_data.phy_encrypted;
   25e92:	79d9      	ldrb	r1, [r3, #7]
    assert(g_ble_phy_data.phy_state == BLE_PHY_STATE_TX);
   25e94:	78db      	ldrb	r3, [r3, #3]
   25e96:	2b02      	cmp	r3, #2
   25e98:	d127      	bne.n	25eea <ble_phy_tx_end_isr+0x5e>
    NRF_RADIO->EVENTS_DISABLED = 0;
   25e9a:	4b2c      	ldr	r3, [pc, #176]	; (25f4c <ble_phy_tx_end_isr+0xc0>)
   25e9c:	2200      	movs	r2, #0
   25e9e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_DISABLED_Msk;
   25ea2:	2010      	movs	r0, #16
   25ea4:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    NRF_RADIO->EVENTS_END = 0;
   25ea8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    wfr_time = NRF_RADIO->SHORTS;
   25eac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    if (was_encrypted) {
   25eb0:	b131      	cbz	r1, 25ec0 <ble_phy_tx_end_isr+0x34>
        if (NRF_CCM->EVENTS_ERROR) {
   25eb2:	4b27      	ldr	r3, [pc, #156]	; (25f50 <ble_phy_tx_end_isr+0xc4>)
   25eb4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   25eb8:	b113      	cbz	r3, 25ec0 <ble_phy_tx_end_isr+0x34>
            NRF_CCM->EVENTS_ERROR = 0;
   25eba:	4b25      	ldr	r3, [pc, #148]	; (25f50 <ble_phy_tx_end_isr+0xc4>)
   25ebc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    if (g_ble_phy_data.txend_cb) {
   25ec0:	4b21      	ldr	r3, [pc, #132]	; (25f48 <ble_phy_tx_end_isr+0xbc>)
   25ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   25ec4:	b113      	cbz	r3, 25ecc <ble_phy_tx_end_isr+0x40>
        g_ble_phy_data.txend_cb(g_ble_phy_data.txend_arg);
   25ec6:	4a20      	ldr	r2, [pc, #128]	; (25f48 <ble_phy_tx_end_isr+0xbc>)
   25ec8:	6a90      	ldr	r0, [r2, #40]	; 0x28
   25eca:	4798      	blx	r3
    transition = g_ble_phy_data.phy_transition;
   25ecc:	4b1e      	ldr	r3, [pc, #120]	; (25f48 <ble_phy_tx_end_isr+0xbc>)
   25ece:	791b      	ldrb	r3, [r3, #4]
    if (transition == BLE_PHY_TRANSITION_TX_RX) {
   25ed0:	2b02      	cmp	r3, #2
   25ed2:	d014      	beq.n	25efe <ble_phy_tx_end_isr+0x72>
        NRF_TIMER0->TASKS_STOP = 1;
   25ed4:	4a1f      	ldr	r2, [pc, #124]	; (25f54 <ble_phy_tx_end_isr+0xc8>)
   25ed6:	2101      	movs	r1, #1
   25ed8:	6051      	str	r1, [r2, #4]
        NRF_TIMER0->TASKS_SHUTDOWN = 1;
   25eda:	6111      	str	r1, [r2, #16]
        NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk |
   25edc:	f502 32b8 	add.w	r2, r2, #94208	; 0x17000
   25ee0:	491d      	ldr	r1, [pc, #116]	; (25f58 <ble_phy_tx_end_isr+0xcc>)
   25ee2:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
        assert(transition == BLE_PHY_TRANSITION_NONE);
   25ee6:	bb23      	cbnz	r3, 25f32 <ble_phy_tx_end_isr+0xa6>
}
   25ee8:	bd10      	pop	{r4, pc}
    assert(g_ble_phy_data.phy_state == BLE_PHY_STATE_TX);
   25eea:	f7e2 f969 	bl	81c0 <hal_debugger_connected>
   25eee:	b100      	cbz	r0, 25ef2 <ble_phy_tx_end_isr+0x66>
   25ef0:	be01      	bkpt	0x0001
   25ef2:	2300      	movs	r3, #0
   25ef4:	461a      	mov	r2, r3
   25ef6:	4619      	mov	r1, r3
   25ef8:	4618      	mov	r0, r3
   25efa:	f7e3 fcf7 	bl	98ec <__assert_func>
        ble_phy_rx_xcvr_setup();
   25efe:	f7ff fe4b 	bl	25b98 <ble_phy_rx_xcvr_setup>
        ble_phy_wfr_enable(BLE_PHY_WFR_ENABLE_TXRX, tx_phy_mode, 0);
   25f02:	2200      	movs	r2, #0
   25f04:	4621      	mov	r1, r4
   25f06:	2001      	movs	r0, #1
   25f08:	f7ff ff7c 	bl	25e04 <ble_phy_wfr_enable>
        rx_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   25f0c:	4a11      	ldr	r2, [pc, #68]	; (25f54 <ble_phy_tx_end_isr+0xc8>)
   25f0e:	f8d2 1548 	ldr.w	r1, [r2, #1352]	; 0x548
   25f12:	3196      	adds	r1, #150	; 0x96
        rx_time += g_ble_phy_t_txenddelay[tx_phy_mode];
   25f14:	4b11      	ldr	r3, [pc, #68]	; (25f5c <ble_phy_tx_end_isr+0xd0>)
   25f16:	5d1b      	ldrb	r3, [r3, r4]
   25f18:	440b      	add	r3, r1
        rx_time -= 2;
   25f1a:	3b2a      	subs	r3, #42	; 0x2a
        NRF_TIMER0->CC[0] = rx_time;
   25f1c:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
        NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   25f20:	2300      	movs	r3, #0
   25f22:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
        NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   25f26:	4b0e      	ldr	r3, [pc, #56]	; (25f60 <ble_phy_tx_end_isr+0xd4>)
   25f28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   25f2c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   25f30:	e7da      	b.n	25ee8 <ble_phy_tx_end_isr+0x5c>
        assert(transition == BLE_PHY_TRANSITION_NONE);
   25f32:	f7e2 f945 	bl	81c0 <hal_debugger_connected>
   25f36:	b100      	cbz	r0, 25f3a <ble_phy_tx_end_isr+0xae>
   25f38:	be01      	bkpt	0x0001
   25f3a:	2300      	movs	r3, #0
   25f3c:	461a      	mov	r2, r3
   25f3e:	4619      	mov	r1, r3
   25f40:	4618      	mov	r0, r3
   25f42:	f7e3 fcd3 	bl	98ec <__assert_func>
   25f46:	bf00      	nop
   25f48:	20008da0 	.word	0x20008da0
   25f4c:	40001000 	.word	0x40001000
   25f50:	4000f000 	.word	0x4000f000
   25f54:	40008000 	.word	0x40008000
   25f58:	80100030 	.word	0x80100030
   25f5c:	000298c0 	.word	0x000298c0
   25f60:	4001f000 	.word	0x4001f000

00025f64 <ble_phy_init>:
{
   25f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    g_ble_phy_data.phy_cur_phy_mode = BLE_PHY_MODE_1M;
   25f68:	4f3f      	ldr	r7, [pc, #252]	; (26068 <ble_phy_init+0x104>)
   25f6a:	2601      	movs	r6, #1
   25f6c:	72be      	strb	r6, [r7, #10]
    g_ble_phy_data.phy_tx_phy_mode = BLE_PHY_MODE_1M;
   25f6e:	72fe      	strb	r6, [r7, #11]
    g_ble_phy_data.phy_rx_phy_mode = BLE_PHY_MODE_1M;
   25f70:	733e      	strb	r6, [r7, #12]
    g_ble_phy_data.rx_pwr_compensation = 0;
   25f72:	2400      	movs	r4, #0
   25f74:	73bc      	strb	r4, [r7, #14]
    g_ble_phy_data.phy_chan = BLE_PHY_NUM_CHANS;
   25f76:	2328      	movs	r3, #40	; 0x28
   25f78:	70bb      	strb	r3, [r7, #2]
    NRF_RADIO->POWER = 0;
   25f7a:	4b3c      	ldr	r3, [pc, #240]	; (2606c <ble_phy_init+0x108>)
   25f7c:	f8c3 4ffc 	str.w	r4, [r3, #4092]	; 0xffc
    NRF_RADIO->POWER = 1;
   25f80:	f8c3 6ffc 	str.w	r6, [r3, #4092]	; 0xffc
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   25f84:	f243 42ff 	movw	r2, #13567	; 0x34ff
   25f88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->MODE = RADIO_MODE_MODE_Ble_1Mbit;
   25f8c:	f04f 0903 	mov.w	r9, #3
   25f90:	f8c3 9510 	str.w	r9, [r3, #1296]	; 0x510
    NRF_RADIO->PCNF0 = NRF_PCNF0;
   25f94:	4a36      	ldr	r2, [pc, #216]	; (26070 <ble_phy_init+0x10c>)
   25f96:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    NRF_RADIO->PCNF1 = NRF_MAXLEN |
   25f9a:	4a36      	ldr	r2, [pc, #216]	; (26074 <ble_phy_init+0x110>)
   25f9c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast << RADIO_MODECNF0_RU_Pos) &
   25fa0:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   25fa4:	4332      	orrs	r2, r6
   25fa6:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
    NRF_RADIO->TXADDRESS  = 0;
   25faa:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    NRF_RADIO->RXADDRESSES  = (1 << 0);
   25fae:	f8c3 6530 	str.w	r6, [r3, #1328]	; 0x530
    NRF_RADIO->CRCCNF = (RADIO_CRCCNF_SKIPADDR_Skip << RADIO_CRCCNF_SKIPADDR_Pos) | RADIO_CRCCNF_LEN_Three;
   25fb2:	f240 1203 	movw	r2, #259	; 0x103
   25fb6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    NRF_RADIO->CRCPOLY = 0x0000065B;
   25fba:	f240 625b 	movw	r2, #1627	; 0x65b
   25fbe:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    NRF_RADIO->TIFS = BLE_LL_IFS;
   25fc2:	2296      	movs	r2, #150	; 0x96
   25fc4:	f8c3 2544 	str.w	r2, [r3, #1348]	; 0x544
    NRF_PPI->CHENSET = PPI_CHEN_CH26_Msk | PPI_CHEN_CH27_Msk;
   25fc8:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 26094 <ble_phy_init+0x130>
   25fcc:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
   25fd0:	f8c8 3504 	str.w	r3, [r8, #1284]	; 0x504
    NRF_CCM->INTENCLR = 0xffffffff;
   25fd4:	4d28      	ldr	r5, [pc, #160]	; (26078 <ble_phy_init+0x114>)
   25fd6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   25fda:	f8c5 a308 	str.w	sl, [r5, #776]	; 0x308
    NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   25fde:	f8c5 6200 	str.w	r6, [r5, #512]	; 0x200
    NRF_CCM->EVENTS_ERROR = 0;
   25fe2:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    memset(g_nrf_encrypt_scratchpad, 0, sizeof(g_nrf_encrypt_scratchpad));
   25fe6:	f44f 7286 	mov.w	r2, #268	; 0x10c
   25fea:	4621      	mov	r1, r4
   25fec:	4823      	ldr	r0, [pc, #140]	; (2607c <ble_phy_init+0x118>)
   25fee:	f7e5 fc06 	bl	b7fe <memset>
    g_ble_phy_data.phy_aar_scratch = 0;
   25ff2:	613c      	str	r4, [r7, #16]
    NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   25ff4:	4b22      	ldr	r3, [pc, #136]	; (26080 <ble_phy_init+0x11c>)
   25ff6:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    NRF_AAR->INTENCLR = 0xffffffff;
   25ffa:	f8c5 a308 	str.w	sl, [r5, #776]	; 0x308
    NRF_AAR->EVENTS_END = 0;
   25ffe:	f8c5 4100 	str.w	r4, [r5, #256]	; 0x100
    NRF_AAR->EVENTS_RESOLVED = 0;
   26002:	f8c5 4104 	str.w	r4, [r5, #260]	; 0x104
    NRF_AAR->EVENTS_NOTRESOLVED = 0;
   26006:	f8c5 4108 	str.w	r4, [r5, #264]	; 0x108
    NRF_AAR->NIRK = 0;
   2600a:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    NRF_TIMER0->TASKS_STOP = 1;
   2600e:	4b1d      	ldr	r3, [pc, #116]	; (26084 <ble_phy_init+0x120>)
   26010:	605e      	str	r6, [r3, #4]
    NRF_TIMER0->TASKS_SHUTDOWN = 1;
   26012:	611e      	str	r6, [r3, #16]
    NRF_TIMER0->BITMODE = 3;    /* 32-bit timer */
   26014:	f8c3 9508 	str.w	r9, [r3, #1288]	; 0x508
    NRF_TIMER0->MODE = 0;       /* Timer mode */
   26018:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
    NRF_TIMER0->PRESCALER = 4;  /* gives us 1 MHz */
   2601c:	2204      	movs	r2, #4
   2601e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    NRF_PPI->CH[4].EEP = (uint32_t)&(NRF_RADIO->EVENTS_ADDRESS);
   26022:	f5a3 43dd 	sub.w	r3, r3, #28288	; 0x6e80
   26026:	3b7c      	subs	r3, #124	; 0x7c
   26028:	f8c8 3530 	str.w	r3, [r8, #1328]	; 0x530
    NRF_PPI->CH[4].TEP = (uint32_t)&(NRF_TIMER0->TASKS_CAPTURE[3]);
   2602c:	f503 43de 	add.w	r3, r3, #28416	; 0x6f00
   26030:	3348      	adds	r3, #72	; 0x48
   26032:	f8c8 3534 	str.w	r3, [r8, #1332]	; 0x534
    NRF_PPI->CH[5].EEP = (uint32_t)&(NRF_TIMER0->EVENTS_COMPARE[3]);
   26036:	f503 7380 	add.w	r3, r3, #256	; 0x100
   2603a:	f8c8 3538 	str.w	r3, [r8, #1336]	; 0x538
    NRF_PPI->CH[5].TEP = (uint32_t)&(NRF_RADIO->TASKS_DISABLE);
   2603e:	f5a3 43e2 	sub.w	r3, r3, #28928	; 0x7100
   26042:	3b3c      	subs	r3, #60	; 0x3c
   26044:	f8c8 353c 	str.w	r3, [r8, #1340]	; 0x53c
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26048:	4b0f      	ldr	r3, [pc, #60]	; (26088 <ble_phy_init+0x124>)
   2604a:	f883 4301 	strb.w	r4, [r3, #769]	; 0x301
  uint32_t vectors = (uint32_t )SCB->VTOR;
   2604e:	4a0f      	ldr	r2, [pc, #60]	; (2608c <ble_phy_init+0x128>)
   26050:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   26052:	490f      	ldr	r1, [pc, #60]	; (26090 <ble_phy_init+0x12c>)
   26054:	6451      	str	r1, [r2, #68]	; 0x44
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   26056:	2202      	movs	r2, #2
   26058:	601a      	str	r2, [r3, #0]
    if (!g_ble_phy_data.phy_stats_initialized) {
   2605a:	783b      	ldrb	r3, [r7, #0]
   2605c:	b90b      	cbnz	r3, 26062 <ble_phy_init+0xfe>
        g_ble_phy_data.phy_stats_initialized  = 1;
   2605e:	463b      	mov	r3, r7
   26060:	701e      	strb	r6, [r3, #0]
}
   26062:	2000      	movs	r0, #0
   26064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   26068:	20008da0 	.word	0x20008da0
   2606c:	40001000 	.word	0x40001000
   26070:	00100108 	.word	0x00100108
   26074:	020300ff 	.word	0x020300ff
   26078:	4000f000 	.word	0x4000f000
   2607c:	20009104 	.word	0x20009104
   26080:	20008d5c 	.word	0x20008d5c
   26084:	40008000 	.word	0x40008000
   26088:	e000e100 	.word	0xe000e100
   2608c:	e000ed00 	.word	0xe000ed00
   26090:	00026455 	.word	0x00026455
   26094:	4001f000 	.word	0x4001f000

00026098 <ble_phy_encrypt_enable>:
{
   26098:	b4f0      	push	{r4, r5, r6, r7}
   2609a:	4684      	mov	ip, r0
   2609c:	460f      	mov	r7, r1
   2609e:	4616      	mov	r6, r2
    memcpy(g_nrf_ccm_data.key, key, 16);
   260a0:	4c0f      	ldr	r4, [pc, #60]	; (260e0 <ble_phy_encrypt_enable+0x48>)
   260a2:	4625      	mov	r5, r4
   260a4:	6818      	ldr	r0, [r3, #0]
   260a6:	6859      	ldr	r1, [r3, #4]
   260a8:	689a      	ldr	r2, [r3, #8]
   260aa:	68db      	ldr	r3, [r3, #12]
   260ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    g_nrf_ccm_data.pkt_counter = pkt_counter;
   260ae:	f8c4 c010 	str.w	ip, [r4, #16]
   260b2:	6167      	str	r7, [r4, #20]
    memcpy(g_nrf_ccm_data.iv, iv, 8);
   260b4:	6832      	ldr	r2, [r6, #0]
   260b6:	6873      	ldr	r3, [r6, #4]
   260b8:	f8c4 2019 	str.w	r2, [r4, #25]
   260bc:	f8c4 301d 	str.w	r3, [r4, #29]
    g_nrf_ccm_data.dir_bit = is_master;
   260c0:	f89d 3010 	ldrb.w	r3, [sp, #16]
   260c4:	7623      	strb	r3, [r4, #24]
    g_ble_phy_data.phy_encrypted = 1;
   260c6:	4b07      	ldr	r3, [pc, #28]	; (260e4 <ble_phy_encrypt_enable+0x4c>)
   260c8:	2201      	movs	r2, #1
   260ca:	71da      	strb	r2, [r3, #7]
    NRF_AAR->ENABLE = AAR_ENABLE_ENABLE_Disabled;
   260cc:	4b06      	ldr	r3, [pc, #24]	; (260e8 <ble_phy_encrypt_enable+0x50>)
   260ce:	2200      	movs	r2, #0
   260d0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   260d4:	2202      	movs	r2, #2
   260d6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   260da:	bcf0      	pop	{r4, r5, r6, r7}
   260dc:	4770      	bx	lr
   260de:	bf00      	nop
   260e0:	200090e0 	.word	0x200090e0
   260e4:	20008da0 	.word	0x20008da0
   260e8:	4000f000 	.word	0x4000f000

000260ec <ble_phy_encrypt_set_pkt_cntr>:
    g_nrf_ccm_data.pkt_counter = pkt_counter;
   260ec:	4b02      	ldr	r3, [pc, #8]	; (260f8 <ble_phy_encrypt_set_pkt_cntr+0xc>)
   260ee:	6118      	str	r0, [r3, #16]
   260f0:	6159      	str	r1, [r3, #20]
    g_nrf_ccm_data.dir_bit = dir;
   260f2:	761a      	strb	r2, [r3, #24]
}
   260f4:	4770      	bx	lr
   260f6:	bf00      	nop
   260f8:	200090e0 	.word	0x200090e0

000260fc <ble_phy_encrypt_disable>:
    NRF_PPI->CHENCLR = PPI_CHEN_CH25_Msk;
   260fc:	4b07      	ldr	r3, [pc, #28]	; (2611c <ble_phy_encrypt_disable+0x20>)
   260fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   26102:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_CCM->TASKS_STOP = 1;
   26106:	4a06      	ldr	r2, [pc, #24]	; (26120 <ble_phy_encrypt_disable+0x24>)
   26108:	2301      	movs	r3, #1
   2610a:	6093      	str	r3, [r2, #8]
    NRF_CCM->EVENTS_ERROR = 0;
   2610c:	2300      	movs	r3, #0
   2610e:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   26112:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    g_ble_phy_data.phy_encrypted = 0;
   26116:	4a03      	ldr	r2, [pc, #12]	; (26124 <ble_phy_encrypt_disable+0x28>)
   26118:	71d3      	strb	r3, [r2, #7]
}
   2611a:	4770      	bx	lr
   2611c:	4001f000 	.word	0x4001f000
   26120:	4000f000 	.word	0x4000f000
   26124:	20008da0 	.word	0x20008da0

00026128 <ble_phy_set_txend_cb>:
    g_ble_phy_data.txend_cb = txend_cb;
   26128:	4b01      	ldr	r3, [pc, #4]	; (26130 <ble_phy_set_txend_cb+0x8>)
   2612a:	62d8      	str	r0, [r3, #44]	; 0x2c
    g_ble_phy_data.txend_arg = arg;
   2612c:	6299      	str	r1, [r3, #40]	; 0x28
}
   2612e:	4770      	bx	lr
   26130:	20008da0 	.word	0x20008da0

00026134 <ble_phy_txpower_round>:
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos4dBm) {
   26134:	2803      	cmp	r0, #3
   26136:	dc14      	bgt.n	26162 <ble_phy_txpower_round+0x2e>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos3dBm) {
   26138:	2802      	cmp	r0, #2
   2613a:	dc14      	bgt.n	26166 <ble_phy_txpower_round+0x32>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_0dBm) {
   2613c:	2800      	cmp	r0, #0
   2613e:	db01      	blt.n	26144 <ble_phy_txpower_round+0x10>
        return (int8_t)RADIO_TXPOWER_TXPOWER_0dBm;
   26140:	2000      	movs	r0, #0
   26142:	4770      	bx	lr
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg4dBm) {
   26144:	f110 0f04 	cmn.w	r0, #4
   26148:	da0f      	bge.n	2616a <ble_phy_txpower_round+0x36>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg8dBm) {
   2614a:	f110 0f08 	cmn.w	r0, #8
   2614e:	da0f      	bge.n	26170 <ble_phy_txpower_round+0x3c>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg12dBm) {
   26150:	f110 0f0c 	cmn.w	r0, #12
   26154:	da0f      	bge.n	26176 <ble_phy_txpower_round+0x42>
    if (dbm >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg20dBm) {
   26156:	f110 0f14 	cmn.w	r0, #20
   2615a:	db0f      	blt.n	2617c <ble_phy_txpower_round+0x48>
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg20dBm;
   2615c:	f06f 0013 	mvn.w	r0, #19
   26160:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Pos4dBm;
   26162:	2004      	movs	r0, #4
   26164:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Pos3dBm;
   26166:	2003      	movs	r0, #3
   26168:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg4dBm;
   2616a:	f06f 0003 	mvn.w	r0, #3
   2616e:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg8dBm;
   26170:	f06f 0007 	mvn.w	r0, #7
   26174:	4770      	bx	lr
        return (int8_t)RADIO_TXPOWER_TXPOWER_Neg12dBm;
   26176:	f06f 000b 	mvn.w	r0, #11
   2617a:	4770      	bx	lr
    return (int8_t)RADIO_TXPOWER_TXPOWER_Neg40dBm;
   2617c:	f06f 0027 	mvn.w	r0, #39	; 0x27
}
   26180:	4770      	bx	lr
	...

00026184 <ble_phy_txpwr_set>:
{
   26184:	b508      	push	{r3, lr}
    dbm = ble_phy_txpower_round(dbm);
   26186:	f7ff ffd5 	bl	26134 <ble_phy_txpower_round>
    NRF_RADIO->TXPOWER = dbm;
   2618a:	4b03      	ldr	r3, [pc, #12]	; (26198 <ble_phy_txpwr_set+0x14>)
   2618c:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    g_ble_phy_data.phy_txpwr_dbm = dbm;
   26190:	4b02      	ldr	r3, [pc, #8]	; (2619c <ble_phy_txpwr_set+0x18>)
   26192:	7058      	strb	r0, [r3, #1]
}
   26194:	2000      	movs	r0, #0
   26196:	bd08      	pop	{r3, pc}
   26198:	40001000 	.word	0x40001000
   2619c:	20008da0 	.word	0x20008da0

000261a0 <ble_phy_set_rx_pwr_compensation>:
    g_ble_phy_data.rx_pwr_compensation = compensation;
   261a0:	4b01      	ldr	r3, [pc, #4]	; (261a8 <ble_phy_set_rx_pwr_compensation+0x8>)
   261a2:	7398      	strb	r0, [r3, #14]
}
   261a4:	4770      	bx	lr
   261a6:	bf00      	nop
   261a8:	20008da0 	.word	0x20008da0

000261ac <ble_phy_setchan>:
{
   261ac:	b538      	push	{r3, r4, r5, lr}
    assert(chan < BLE_PHY_NUM_CHANS);
   261ae:	2827      	cmp	r0, #39	; 0x27
   261b0:	d811      	bhi.n	261d6 <ble_phy_setchan+0x2a>
   261b2:	4604      	mov	r4, r0
   261b4:	4615      	mov	r5, r2
    ble_phy_set_access_addr(access_addr);
   261b6:	4608      	mov	r0, r1
   261b8:	f7ff fd6e 	bl	25c98 <ble_phy_set_access_addr>
    NRF_RADIO->CRCINIT = crcinit;
   261bc:	4b0b      	ldr	r3, [pc, #44]	; (261ec <ble_phy_setchan+0x40>)
   261be:	f8c3 553c 	str.w	r5, [r3, #1340]	; 0x53c
    g_ble_phy_data.phy_chan = chan;
   261c2:	4a0b      	ldr	r2, [pc, #44]	; (261f0 <ble_phy_setchan+0x44>)
   261c4:	7094      	strb	r4, [r2, #2]
    NRF_RADIO->FREQUENCY = g_ble_phy_chan_freq[chan];
   261c6:	4a0b      	ldr	r2, [pc, #44]	; (261f4 <ble_phy_setchan+0x48>)
   261c8:	5d12      	ldrb	r2, [r2, r4]
   261ca:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    NRF_RADIO->DATAWHITEIV = chan;
   261ce:	f8c3 4554 	str.w	r4, [r3, #1364]	; 0x554
}
   261d2:	2000      	movs	r0, #0
   261d4:	bd38      	pop	{r3, r4, r5, pc}
    assert(chan < BLE_PHY_NUM_CHANS);
   261d6:	f7e1 fff3 	bl	81c0 <hal_debugger_connected>
   261da:	b100      	cbz	r0, 261de <ble_phy_setchan+0x32>
   261dc:	be01      	bkpt	0x0001
   261de:	2300      	movs	r3, #0
   261e0:	461a      	mov	r2, r3
   261e2:	4619      	mov	r1, r3
   261e4:	4618      	mov	r0, r3
   261e6:	f7e3 fb81 	bl	98ec <__assert_func>
   261ea:	bf00      	nop
   261ec:	40001000 	.word	0x40001000
   261f0:	20008da0 	.word	0x20008da0
   261f4:	0002988c 	.word	0x0002988c

000261f8 <ble_phy_disable>:
 * the usec timer (if used), disables interrupts, disables the RADIO, disables
 * PPI and sets state to idle.
 */
void
ble_phy_disable(void)
{
   261f8:	b508      	push	{r3, lr}
    ble_phy_trace_void(BLE_PHY_TRACE_ID_DISABLE);

    ble_phy_stop_usec_timer();
   261fa:	f7ff fd65 	bl	25cc8 <ble_phy_stop_usec_timer>
    ble_phy_disable_irq_and_ppi();
   261fe:	f7ff fd71 	bl	25ce4 <ble_phy_disable_irq_and_ppi>
}
   26202:	bd08      	pop	{r3, pc}

00026204 <ble_phy_rx_start_isr>:
{
   26204:	b538      	push	{r3, r4, r5, lr}
    NRF_RADIO->EVENTS_ADDRESS = 0;
   26206:	4b42      	ldr	r3, [pc, #264]	; (26310 <ble_phy_rx_start_isr+0x10c>)
   26208:	2500      	movs	r5, #0
   2620a:	f8c3 5104 	str.w	r5, [r3, #260]	; 0x104
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_DISABLED_Msk | RADIO_INTENCLR_ADDRESS_Msk;
   2620e:	2212      	movs	r2, #18
   26210:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk;
   26214:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
   26218:	2230      	movs	r2, #48	; 0x30
   2621a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    ble_hdr->rxinfo.flags = ble_ll_state_get();
   2621e:	f7f7 f829 	bl	1d274 <ble_ll_state_get>
   26222:	4c3c      	ldr	r4, [pc, #240]	; (26314 <ble_phy_rx_start_isr+0x110>)
   26224:	8320      	strh	r0, [r4, #24]
    ble_hdr->rxinfo.channel = g_ble_phy_data.phy_chan;
   26226:	78a3      	ldrb	r3, [r4, #2]
   26228:	76a3      	strb	r3, [r4, #26]
    ble_hdr->rxinfo.handle = 0;
   2622a:	76e5      	strb	r5, [r4, #27]
    ble_hdr->rxinfo.phy = ble_phy_get_cur_phy();
   2622c:	f7ff fda4 	bl	25d78 <ble_phy_get_cur_phy>
   26230:	7760      	strb	r0, [r4, #29]
    phy = g_ble_phy_data.phy_cur_phy_mode;
   26232:	7aa2      	ldrb	r2, [r4, #10]
    ble_hdr->rxinfo.phy_mode = ble_phy_get_cur_rx_phy_mode();
   26234:	77a2      	strb	r2, [r4, #30]
    ble_hdr->beg_cputime = g_ble_phy_data.phy_start_cputime;
   26236:	6b23      	ldr	r3, [r4, #48]	; 0x30
   26238:	6223      	str	r3, [r4, #32]
    usecs = NRF_TIMER0->CC[1];
   2623a:	4937      	ldr	r1, [pc, #220]	; (26318 <ble_phy_rx_start_isr+0x114>)
   2623c:	f8d1 0544 	ldr.w	r0, [r1, #1348]	; 0x544
                g_ble_phy_t_rxaddrdelay[ble_hdr->rxinfo.phy_mode];
   26240:	4936      	ldr	r1, [pc, #216]	; (2631c <ble_phy_rx_start_isr+0x118>)
   26242:	5c8c      	ldrb	r4, [r1, r2]
    pdu_usecs = ble_phy_mode_pdu_start_off(ble_hdr->rxinfo.phy_mode) +
   26244:	3428      	adds	r4, #40	; 0x28
    if (usecs < pdu_usecs) {
   26246:	42a0      	cmp	r0, r4
   26248:	d203      	bcs.n	26252 <ble_phy_rx_start_isr+0x4e>
        g_ble_phy_data.phy_start_cputime--;
   2624a:	3b01      	subs	r3, #1
   2624c:	4a31      	ldr	r2, [pc, #196]	; (26314 <ble_phy_rx_start_isr+0x110>)
   2624e:	6313      	str	r3, [r2, #48]	; 0x30
        usecs += 30;
   26250:	301e      	adds	r0, #30
    usecs -= pdu_usecs;
   26252:	1b04      	subs	r4, r0, r4
    ticks = os_cputime_usecs_to_ticks(usecs);
   26254:	4620      	mov	r0, r4
   26256:	f7f5 fd91 	bl	1bd7c <os_cputime_usecs_to_ticks>
   2625a:	4605      	mov	r5, r0
    usecs -= os_cputime_ticks_to_usecs(ticks);
   2625c:	f7f5 fd96 	bl	1bd8c <os_cputime_ticks_to_usecs>
   26260:	1a20      	subs	r0, r4, r0
    if (usecs == 31) {
   26262:	281f      	cmp	r0, #31
   26264:	d015      	beq.n	26292 <ble_phy_rx_start_isr+0x8e>
    ble_hdr->beg_cputime += ticks;
   26266:	4b2b      	ldr	r3, [pc, #172]	; (26314 <ble_phy_rx_start_isr+0x110>)
   26268:	6a1a      	ldr	r2, [r3, #32]
   2626a:	442a      	add	r2, r5
   2626c:	621a      	str	r2, [r3, #32]
    ble_hdr->rem_usecs = usecs;
   2626e:	6258      	str	r0, [r3, #36]	; 0x24
        state = NRF_RADIO->STATE;
   26270:	4b27      	ldr	r3, [pc, #156]	; (26310 <ble_phy_rx_start_isr+0x10c>)
   26272:	f8d3 2550 	ldr.w	r2, [r3, #1360]	; 0x550
        if (NRF_RADIO->EVENTS_BCMATCH != 0) {
   26276:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
   2627a:	b96b      	cbnz	r3, 26298 <ble_phy_rx_start_isr+0x94>
        if (state == RADIO_STATE_STATE_Disabled) {
   2627c:	2a00      	cmp	r2, #0
   2627e:	d1f7      	bne.n	26270 <ble_phy_rx_start_isr+0x6c>
            NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   26280:	4b23      	ldr	r3, [pc, #140]	; (26310 <ble_phy_rx_start_isr+0x10c>)
   26282:	f243 42ff 	movw	r2, #13567	; 0x34ff
   26286:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            NRF_RADIO->SHORTS = 0;
   2628a:	2000      	movs	r0, #0
   2628c:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
}
   26290:	bd38      	pop	{r3, r4, r5, pc}
        ++ticks;
   26292:	3501      	adds	r5, #1
        usecs = 0;
   26294:	2000      	movs	r0, #0
   26296:	e7e6      	b.n	26266 <ble_phy_rx_start_isr+0x62>
    if (g_ble_phy_data.phy_privacy && (dptr[3] & 0x40)) {
   26298:	4b1e      	ldr	r3, [pc, #120]	; (26314 <ble_phy_rx_start_isr+0x110>)
   2629a:	7a1b      	ldrb	r3, [r3, #8]
   2629c:	b303      	cbz	r3, 262e0 <ble_phy_rx_start_isr+0xdc>
   2629e:	4b20      	ldr	r3, [pc, #128]	; (26320 <ble_phy_rx_start_isr+0x11c>)
   262a0:	78db      	ldrb	r3, [r3, #3]
   262a2:	f013 0f40 	tst.w	r3, #64	; 0x40
   262a6:	d01b      	beq.n	262e0 <ble_phy_rx_start_isr+0xdc>
        adva_offset = (dptr[3] & 0x0f) == 0x07 ? 2 : 0;
   262a8:	f003 030f 	and.w	r3, r3, #15
   262ac:	2b07      	cmp	r3, #7
   262ae:	d028      	beq.n	26302 <ble_phy_rx_start_isr+0xfe>
   262b0:	2300      	movs	r3, #0
        NRF_AAR->ADDRPTR = (uint32_t)(dptr + 3 + adva_offset);
   262b2:	1cd9      	adds	r1, r3, #3
   262b4:	4a1a      	ldr	r2, [pc, #104]	; (26320 <ble_phy_rx_start_isr+0x11c>)
   262b6:	440a      	add	r2, r1
   262b8:	491a      	ldr	r1, [pc, #104]	; (26324 <ble_phy_rx_start_isr+0x120>)
   262ba:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
        NRF_RADIO->EVENTS_BCMATCH = 0;
   262be:	f5a1 4160 	sub.w	r1, r1, #57344	; 0xe000
   262c2:	2200      	movs	r2, #0
   262c4:	f8c1 2128 	str.w	r2, [r1, #296]	; 0x128
        NRF_PPI->CHENSET = PPI_CHEN_CH23_Msk;
   262c8:	4a17      	ldr	r2, [pc, #92]	; (26328 <ble_phy_rx_start_isr+0x124>)
   262ca:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   262ce:	f8c2 0504 	str.w	r0, [r2, #1284]	; 0x504
        NRF_RADIO->BCC = (BLE_LL_PDU_HDR_LEN + adva_offset + BLE_DEV_ADDR_LEN) * 8 +
   262d2:	3308      	adds	r3, #8
                         g_ble_phy_data.phy_bcc_offset;
   262d4:	4a0f      	ldr	r2, [pc, #60]	; (26314 <ble_phy_rx_start_isr+0x110>)
   262d6:	7b52      	ldrb	r2, [r2, #13]
        NRF_RADIO->BCC = (BLE_LL_PDU_HDR_LEN + adva_offset + BLE_DEV_ADDR_LEN) * 8 +
   262d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   262dc:	f8c1 3560 	str.w	r3, [r1, #1376]	; 0x560
    rc = ble_ll_rx_start(dptr + 3,
   262e0:	4b0c      	ldr	r3, [pc, #48]	; (26314 <ble_phy_rx_start_isr+0x110>)
   262e2:	f103 0218 	add.w	r2, r3, #24
   262e6:	7899      	ldrb	r1, [r3, #2]
   262e8:	4810      	ldr	r0, [pc, #64]	; (2632c <ble_phy_rx_start_isr+0x128>)
   262ea:	f7f6 ff0b 	bl	1d104 <ble_ll_rx_start>
    if (rc >= 0) {
   262ee:	2800      	cmp	r0, #0
   262f0:	db09      	blt.n	26306 <ble_phy_rx_start_isr+0x102>
        g_ble_phy_data.phy_rx_started = 1;
   262f2:	2001      	movs	r0, #1
   262f4:	4b07      	ldr	r3, [pc, #28]	; (26314 <ble_phy_rx_start_isr+0x110>)
   262f6:	7198      	strb	r0, [r3, #6]
        NRF_RADIO->INTENSET = RADIO_INTENSET_END_Msk;
   262f8:	4b05      	ldr	r3, [pc, #20]	; (26310 <ble_phy_rx_start_isr+0x10c>)
   262fa:	2208      	movs	r2, #8
   262fc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   26300:	e7c6      	b.n	26290 <ble_phy_rx_start_isr+0x8c>
        adva_offset = (dptr[3] & 0x0f) == 0x07 ? 2 : 0;
   26302:	2302      	movs	r3, #2
   26304:	e7d5      	b.n	262b2 <ble_phy_rx_start_isr+0xae>
        ble_phy_disable();
   26306:	f7ff ff77 	bl	261f8 <ble_phy_disable>
    return true;
   2630a:	2001      	movs	r0, #1
   2630c:	e7c0      	b.n	26290 <ble_phy_rx_start_isr+0x8c>
   2630e:	bf00      	nop
   26310:	40001000 	.word	0x40001000
   26314:	20008da0 	.word	0x20008da0
   26318:	40008000 	.word	0x40008000
   2631c:	000298b4 	.word	0x000298b4
   26320:	20008ed8 	.word	0x20008ed8
   26324:	4000f000 	.word	0x4000f000
   26328:	4001f000 	.word	0x4001f000
   2632c:	20008edb 	.word	0x20008edb

00026330 <ble_phy_rx_end_isr>:
{
   26330:	b510      	push	{r4, lr}
    NRF_RADIO->EVENTS_END = 0;
   26332:	4b3f      	ldr	r3, [pc, #252]	; (26430 <ble_phy_rx_end_isr+0x100>)
   26334:	2200      	movs	r2, #0
   26336:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->INTENCLR = RADIO_INTENCLR_END_Msk;
   2633a:	2208      	movs	r2, #8
   2633c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_PPI->CHENCLR = PPI_CHEN_CH21_Msk;
   26340:	4a3c      	ldr	r2, [pc, #240]	; (26434 <ble_phy_rx_end_isr+0x104>)
   26342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   26346:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    assert(NRF_RADIO->EVENTS_RSSIEND != 0);
   2634a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   2634e:	2b00      	cmp	r3, #0
   26350:	d061      	beq.n	26416 <ble_phy_rx_end_isr+0xe6>
                           g_ble_phy_data.rx_pwr_compensation;
   26352:	4939      	ldr	r1, [pc, #228]	; (26438 <ble_phy_rx_end_isr+0x108>)
   26354:	7b8b      	ldrb	r3, [r1, #14]
    ble_hdr->rxinfo.rssi = (-1 * NRF_RADIO->RSSISAMPLE) +
   26356:	4a36      	ldr	r2, [pc, #216]	; (26430 <ble_phy_rx_end_isr+0x100>)
   26358:	f8d2 0548 	ldr.w	r0, [r2, #1352]	; 0x548
   2635c:	1a1b      	subs	r3, r3, r0
   2635e:	770b      	strb	r3, [r1, #28]
    crcok = NRF_RADIO->EVENTS_CRCOK;
   26360:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
    if (!crcok) {
   26364:	f013 0fff 	tst.w	r3, #255	; 0xff
   26368:	d021      	beq.n	263ae <ble_phy_rx_end_isr+0x7e>
        ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_CRC_OK;
   2636a:	8b0b      	ldrh	r3, [r1, #24]
   2636c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   26370:	830b      	strh	r3, [r1, #24]
        if (g_ble_phy_data.phy_encrypted) {
   26372:	79ca      	ldrb	r2, [r1, #7]
   26374:	b1da      	cbz	r2, 263ae <ble_phy_rx_end_isr+0x7e>
            if ((dptr[1] != 0) && (NRF_CCM->MICSTATUS == 0)) {
   26376:	4a31      	ldr	r2, [pc, #196]	; (2643c <ble_phy_rx_end_isr+0x10c>)
   26378:	7912      	ldrb	r2, [r2, #4]
   2637a:	b132      	cbz	r2, 2638a <ble_phy_rx_end_isr+0x5a>
   2637c:	4a30      	ldr	r2, [pc, #192]	; (26440 <ble_phy_rx_end_isr+0x110>)
   2637e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   26382:	b912      	cbnz	r2, 2638a <ble_phy_rx_end_isr+0x5a>
                ble_hdr->rxinfo.flags |= BLE_MBUF_HDR_F_MIC_FAILURE;
   26384:	f043 0320 	orr.w	r3, r3, #32
   26388:	830b      	strh	r3, [r1, #24]
            if (NRF_CCM->EVENTS_ERROR) {
   2638a:	4b2d      	ldr	r3, [pc, #180]	; (26440 <ble_phy_rx_end_isr+0x110>)
   2638c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
   26390:	b123      	cbz	r3, 2639c <ble_phy_rx_end_isr+0x6c>
                ble_hdr->rxinfo.flags &= ~BLE_MBUF_HDR_F_CRC_OK;
   26392:	4a29      	ldr	r2, [pc, #164]	; (26438 <ble_phy_rx_end_isr+0x108>)
   26394:	8b13      	ldrh	r3, [r2, #24]
   26396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2639a:	8313      	strh	r3, [r2, #24]
            if (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   2639c:	4b28      	ldr	r3, [pc, #160]	; (26440 <ble_phy_rx_end_isr+0x110>)
   2639e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   263a2:	b923      	cbnz	r3, 263ae <ble_phy_rx_end_isr+0x7e>
                ble_hdr->rxinfo.flags &= ~BLE_MBUF_HDR_F_CRC_OK;
   263a4:	4a24      	ldr	r2, [pc, #144]	; (26438 <ble_phy_rx_end_isr+0x108>)
   263a6:	8b13      	ldrh	r3, [r2, #24]
   263a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   263ac:	8313      	strh	r3, [r2, #24]
    tx_time = NRF_TIMER0->CC[2] + BLE_LL_IFS;
   263ae:	4a25      	ldr	r2, [pc, #148]	; (26444 <ble_phy_rx_end_isr+0x114>)
   263b0:	f8d2 3548 	ldr.w	r3, [r2, #1352]	; 0x548
   263b4:	3396      	adds	r3, #150	; 0x96
    tx_time -= g_ble_phy_t_rxenddelay[ble_hdr->rxinfo.phy_mode];
   263b6:	4920      	ldr	r1, [pc, #128]	; (26438 <ble_phy_rx_end_isr+0x108>)
   263b8:	7f88      	ldrb	r0, [r1, #30]
   263ba:	4c23      	ldr	r4, [pc, #140]	; (26448 <ble_phy_rx_end_isr+0x118>)
   263bc:	5c20      	ldrb	r0, [r4, r0]
   263be:	1a1b      	subs	r3, r3, r0
    tx_time -= BLE_PHY_T_TXENFAST;
   263c0:	3b28      	subs	r3, #40	; 0x28
    tx_time -= g_ble_phy_t_txdelay[g_ble_phy_data.phy_cur_phy_mode];
   263c2:	7a89      	ldrb	r1, [r1, #10]
   263c4:	4821      	ldr	r0, [pc, #132]	; (2644c <ble_phy_rx_end_isr+0x11c>)
   263c6:	5c41      	ldrb	r1, [r0, r1]
   263c8:	1a5b      	subs	r3, r3, r1
    NRF_TIMER0->CC[0] = tx_time;
   263ca:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    NRF_TIMER0->EVENTS_COMPARE[0] = 0;
   263ce:	2300      	movs	r3, #0
   263d0:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
    NRF_PPI->CHENSET = PPI_CHEN_CH20_Msk;
   263d4:	4b17      	ldr	r3, [pc, #92]	; (26434 <ble_phy_rx_end_isr+0x104>)
   263d6:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   263da:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
    NRF_TIMER0->TASKS_CAPTURE[3] = 1;
   263de:	2301      	movs	r3, #1
   263e0:	64d3      	str	r3, [r2, #76]	; 0x4c
    if (NRF_TIMER0->CC[3] > NRF_TIMER0->CC[0]) {
   263e2:	f8d2 154c 	ldr.w	r1, [r2, #1356]	; 0x54c
   263e6:	f8d2 3540 	ldr.w	r3, [r2, #1344]	; 0x540
   263ea:	4299      	cmp	r1, r3
   263ec:	d907      	bls.n	263fe <ble_phy_rx_end_isr+0xce>
        NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk;
   263ee:	4b11      	ldr	r3, [pc, #68]	; (26434 <ble_phy_rx_end_isr+0x104>)
   263f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   263f4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        g_ble_phy_data.phy_transition_late = 1;
   263f8:	4b0f      	ldr	r3, [pc, #60]	; (26438 <ble_phy_rx_end_isr+0x108>)
   263fa:	2201      	movs	r2, #1
   263fc:	715a      	strb	r2, [r3, #5]
    dptr[2] = dptr[1];
   263fe:	480f      	ldr	r0, [pc, #60]	; (2643c <ble_phy_rx_end_isr+0x10c>)
   26400:	7903      	ldrb	r3, [r0, #4]
   26402:	7143      	strb	r3, [r0, #5]
    dptr[1] = dptr[0];
   26404:	78c3      	ldrb	r3, [r0, #3]
   26406:	f800 3f04 	strb.w	r3, [r0, #4]!
    rc = ble_ll_rx_end(dptr + 1, ble_hdr);
   2640a:	4911      	ldr	r1, [pc, #68]	; (26450 <ble_phy_rx_end_isr+0x120>)
   2640c:	f7f6 fea0 	bl	1d150 <ble_ll_rx_end>
    if (rc < 0) {
   26410:	2800      	cmp	r0, #0
   26412:	db0a      	blt.n	2642a <ble_phy_rx_end_isr+0xfa>
}
   26414:	bd10      	pop	{r4, pc}
    assert(NRF_RADIO->EVENTS_RSSIEND != 0);
   26416:	f7e1 fed3 	bl	81c0 <hal_debugger_connected>
   2641a:	b100      	cbz	r0, 2641e <ble_phy_rx_end_isr+0xee>
   2641c:	be01      	bkpt	0x0001
   2641e:	2300      	movs	r3, #0
   26420:	461a      	mov	r2, r3
   26422:	4619      	mov	r1, r3
   26424:	4618      	mov	r0, r3
   26426:	f7e3 fa61 	bl	98ec <__assert_func>
        ble_phy_disable();
   2642a:	f7ff fee5 	bl	261f8 <ble_phy_disable>
}
   2642e:	e7f1      	b.n	26414 <ble_phy_rx_end_isr+0xe4>
   26430:	40001000 	.word	0x40001000
   26434:	4001f000 	.word	0x4001f000
   26438:	20008da0 	.word	0x20008da0
   2643c:	20008ed8 	.word	0x20008ed8
   26440:	4000f000 	.word	0x4000f000
   26444:	40008000 	.word	0x40008000
   26448:	000298b8 	.word	0x000298b8
   2644c:	000298bc 	.word	0x000298bc
   26450:	20008db8 	.word	0x20008db8

00026454 <ble_phy_isr>:
{
   26454:	b510      	push	{r4, lr}
    irq_en = NRF_RADIO->INTENCLR;
   26456:	4b20      	ldr	r3, [pc, #128]	; (264d8 <ble_phy_isr+0x84>)
   26458:	f8d3 4308 	ldr.w	r4, [r3, #776]	; 0x308
    if ((irq_en & RADIO_INTENCLR_ADDRESS_Msk) && NRF_RADIO->EVENTS_ADDRESS) {
   2645c:	f014 0f02 	tst.w	r4, #2
   26460:	d002      	beq.n	26468 <ble_phy_isr+0x14>
   26462:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   26466:	b9db      	cbnz	r3, 264a0 <ble_phy_isr+0x4c>
    if ((irq_en & RADIO_INTENCLR_DISABLED_Msk) && NRF_RADIO->EVENTS_DISABLED) {
   26468:	f014 0f10 	tst.w	r4, #16
   2646c:	d00a      	beq.n	26484 <ble_phy_isr+0x30>
   2646e:	4b1a      	ldr	r3, [pc, #104]	; (264d8 <ble_phy_isr+0x84>)
   26470:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   26474:	b133      	cbz	r3, 26484 <ble_phy_isr+0x30>
        if (g_ble_phy_data.phy_state == BLE_PHY_STATE_RX) {
   26476:	4b19      	ldr	r3, [pc, #100]	; (264dc <ble_phy_isr+0x88>)
   26478:	78db      	ldrb	r3, [r3, #3]
   2647a:	2b01      	cmp	r3, #1
   2647c:	d017      	beq.n	264ae <ble_phy_isr+0x5a>
        } else if (g_ble_phy_data.phy_state == BLE_PHY_STATE_IDLE) {
   2647e:	b1eb      	cbz	r3, 264bc <ble_phy_isr+0x68>
            ble_phy_tx_end_isr();
   26480:	f7ff fd04 	bl	25e8c <ble_phy_tx_end_isr>
    if ((irq_en & RADIO_INTENCLR_END_Msk) && NRF_RADIO->EVENTS_END) {
   26484:	f014 0f08 	tst.w	r4, #8
   26488:	d003      	beq.n	26492 <ble_phy_isr+0x3e>
   2648a:	4b13      	ldr	r3, [pc, #76]	; (264d8 <ble_phy_isr+0x84>)
   2648c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   26490:	b9f3      	cbnz	r3, 264d0 <ble_phy_isr+0x7c>
    g_ble_phy_data.phy_transition_late = 0;
   26492:	4b12      	ldr	r3, [pc, #72]	; (264dc <ble_phy_isr+0x88>)
   26494:	2200      	movs	r2, #0
   26496:	715a      	strb	r2, [r3, #5]
    irq_en = NRF_RADIO->SHORTS;
   26498:	4b0f      	ldr	r3, [pc, #60]	; (264d8 <ble_phy_isr+0x84>)
   2649a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
}
   2649e:	bd10      	pop	{r4, pc}
        if (ble_phy_rx_start_isr()) {
   264a0:	f7ff feb0 	bl	26204 <ble_phy_rx_start_isr>
   264a4:	2800      	cmp	r0, #0
   264a6:	d0df      	beq.n	26468 <ble_phy_isr+0x14>
            irq_en &= ~RADIO_INTENCLR_DISABLED_Msk;
   264a8:	f024 0410 	bic.w	r4, r4, #16
   264ac:	e7dc      	b.n	26468 <ble_phy_isr+0x14>
            NRF_RADIO->EVENTS_DISABLED = 0;
   264ae:	2000      	movs	r0, #0
   264b0:	4b09      	ldr	r3, [pc, #36]	; (264d8 <ble_phy_isr+0x84>)
   264b2:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
            ble_ll_wfr_timer_exp(NULL);
   264b6:	f7f6 fdd9 	bl	1d06c <ble_ll_wfr_timer_exp>
   264ba:	e7e3      	b.n	26484 <ble_phy_isr+0x30>
            assert(0);
   264bc:	f7e1 fe80 	bl	81c0 <hal_debugger_connected>
   264c0:	b100      	cbz	r0, 264c4 <ble_phy_isr+0x70>
   264c2:	be01      	bkpt	0x0001
   264c4:	2300      	movs	r3, #0
   264c6:	461a      	mov	r2, r3
   264c8:	4619      	mov	r1, r3
   264ca:	4618      	mov	r0, r3
   264cc:	f7e3 fa0e 	bl	98ec <__assert_func>
        ble_phy_rx_end_isr();
   264d0:	f7ff ff2e 	bl	26330 <ble_phy_rx_end_isr>
   264d4:	e7dd      	b.n	26492 <ble_phy_isr+0x3e>
   264d6:	bf00      	nop
   264d8:	40001000 	.word	0x40001000
   264dc:	20008da0 	.word	0x20008da0

000264e0 <ble_phy_rx>:
{
   264e0:	b508      	push	{r3, lr}
    nrf_wait_disabled();
   264e2:	f7ff faf1 	bl	25ac8 <nrf_wait_disabled>
    if ((NRF_RADIO->STATE != RADIO_STATE_STATE_Disabled) &&
   264e6:	4b16      	ldr	r3, [pc, #88]	; (26540 <ble_phy_rx+0x60>)
   264e8:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
   264ec:	b133      	cbz	r3, 264fc <ble_phy_rx+0x1c>
            ((NRF_RADIO->STATE & 0x07) != RADIO_STATE_STATE_RxIdle)) {
   264ee:	4b14      	ldr	r3, [pc, #80]	; (26540 <ble_phy_rx+0x60>)
   264f0:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
   264f4:	f003 0307 	and.w	r3, r3, #7
    if ((NRF_RADIO->STATE != RADIO_STATE_STATE_Disabled) &&
   264f8:	2b02      	cmp	r3, #2
   264fa:	d113      	bne.n	26524 <ble_phy_rx+0x44>
    NRF_RADIO->INTENCLR = NRF_RADIO_IRQ_MASK_ALL;
   264fc:	4b10      	ldr	r3, [pc, #64]	; (26540 <ble_phy_rx+0x60>)
   264fe:	f243 42ff 	movw	r2, #13567	; 0x34ff
   26502:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    NRF_RADIO->EVENTS_END = 0;
   26506:	2200      	movs	r2, #0
   26508:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->EVENTS_DISABLED = 0;
   2650c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ble_phy_rx_xcvr_setup();
   26510:	f7ff fb42 	bl	25b98 <ble_phy_rx_xcvr_setup>
    assert(NRF_PPI->CHEN & PPI_CHEN_CH21_Msk);
   26514:	4b0b      	ldr	r3, [pc, #44]	; (26544 <ble_phy_rx+0x64>)
   26516:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   2651a:	f413 1f00 	tst.w	r3, #2097152	; 0x200000
   2651e:	d005      	beq.n	2652c <ble_phy_rx+0x4c>
    return 0;
   26520:	2000      	movs	r0, #0
}
   26522:	bd08      	pop	{r3, pc}
        ble_phy_disable();
   26524:	f7ff fe68 	bl	261f8 <ble_phy_disable>
        return BLE_PHY_ERR_RADIO_STATE;
   26528:	2001      	movs	r0, #1
   2652a:	e7fa      	b.n	26522 <ble_phy_rx+0x42>
    assert(NRF_PPI->CHEN & PPI_CHEN_CH21_Msk);
   2652c:	f7e1 fe48 	bl	81c0 <hal_debugger_connected>
   26530:	b100      	cbz	r0, 26534 <ble_phy_rx+0x54>
   26532:	be01      	bkpt	0x0001
   26534:	2300      	movs	r3, #0
   26536:	461a      	mov	r2, r3
   26538:	4619      	mov	r1, r3
   2653a:	4618      	mov	r0, r3
   2653c:	f7e3 f9d6 	bl	98ec <__assert_func>
   26540:	40001000 	.word	0x40001000
   26544:	4001f000 	.word	0x4001f000

00026548 <ble_phy_rx_set_start_time>:
{
   26548:	b510      	push	{r4, lr}
    NRF_PPI->CHENCLR = PPI_CHEN_CH20_Msk;
   2654a:	4b0e      	ldr	r3, [pc, #56]	; (26584 <ble_phy_rx_set_start_time+0x3c>)
   2654c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   26550:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (ble_phy_set_start_time(cputime, rem_usecs, false) != 0) {
   26554:	2200      	movs	r2, #0
   26556:	f7ff fac7 	bl	25ae8 <ble_phy_set_start_time>
   2655a:	b960      	cbnz	r0, 26576 <ble_phy_rx_set_start_time+0x2e>
    bool late = false;
   2655c:	2400      	movs	r4, #0
    NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   2655e:	4b09      	ldr	r3, [pc, #36]	; (26584 <ble_phy_rx_set_start_time+0x3c>)
   26560:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   26564:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    rc = ble_phy_rx();
   26568:	f7ff ffba 	bl	264e0 <ble_phy_rx>
    if (!rc && late) {
   2656c:	4603      	mov	r3, r0
   2656e:	b900      	cbnz	r0, 26572 <ble_phy_rx_set_start_time+0x2a>
   26570:	b92c      	cbnz	r4, 2657e <ble_phy_rx_set_start_time+0x36>
}
   26572:	4618      	mov	r0, r3
   26574:	bd10      	pop	{r4, pc}
        ble_phy_set_start_now();
   26576:	f7ff fbd3 	bl	25d20 <ble_phy_set_start_now>
        late = true;
   2657a:	2401      	movs	r4, #1
   2657c:	e7ef      	b.n	2655e <ble_phy_rx_set_start_time+0x16>
        rc = BLE_PHY_ERR_RX_LATE;
   2657e:	2306      	movs	r3, #6
    return rc;
   26580:	e7f7      	b.n	26572 <ble_phy_rx_set_start_time+0x2a>
   26582:	bf00      	nop
   26584:	4001f000 	.word	0x4001f000

00026588 <ble_phy_restart_rx>:
{
   26588:	b508      	push	{r3, lr}
    ble_phy_stop_usec_timer();
   2658a:	f7ff fb9d 	bl	25cc8 <ble_phy_stop_usec_timer>
    ble_phy_disable_irq_and_ppi();
   2658e:	f7ff fba9 	bl	25ce4 <ble_phy_disable_irq_and_ppi>
    ble_phy_set_start_now();
   26592:	f7ff fbc5 	bl	25d20 <ble_phy_set_start_now>
    NRF_PPI->CHENSET = PPI_CHEN_CH21_Msk;
   26596:	4b04      	ldr	r3, [pc, #16]	; (265a8 <ble_phy_restart_rx+0x20>)
   26598:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   2659c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ble_phy_rx();
   265a0:	f7ff ff9e 	bl	264e0 <ble_phy_rx>
}
   265a4:	bd08      	pop	{r3, pc}
   265a6:	bf00      	nop
   265a8:	4001f000 	.word	0x4001f000

000265ac <ble_phy_tx_set_start_time>:
{
   265ac:	b508      	push	{r3, lr}
    NRF_PPI->CHENCLR = PPI_CHEN_CH21_Msk;
   265ae:	4b0a      	ldr	r3, [pc, #40]	; (265d8 <ble_phy_tx_set_start_time+0x2c>)
   265b0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   265b4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (ble_phy_set_start_time(cputime, rem_usecs, true) != 0) {
   265b8:	2201      	movs	r2, #1
   265ba:	f7ff fa95 	bl	25ae8 <ble_phy_set_start_time>
   265be:	b938      	cbnz	r0, 265d0 <ble_phy_tx_set_start_time+0x24>
   265c0:	4603      	mov	r3, r0
        NRF_PPI->CHENSET = PPI_CHEN_CH20_Msk;
   265c2:	4a05      	ldr	r2, [pc, #20]	; (265d8 <ble_phy_tx_set_start_time+0x2c>)
   265c4:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
   265c8:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
}
   265cc:	4618      	mov	r0, r3
   265ce:	bd08      	pop	{r3, pc}
        ble_phy_disable();
   265d0:	f7ff fe12 	bl	261f8 <ble_phy_disable>
        rc = BLE_PHY_ERR_TX_LATE;
   265d4:	2305      	movs	r3, #5
   265d6:	e7f9      	b.n	265cc <ble_phy_tx_set_start_time+0x20>
   265d8:	4001f000 	.word	0x4001f000

000265dc <ble_phy_tx>:
{
   265dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   265e0:	b082      	sub	sp, #8
    if (g_ble_phy_data.phy_transition_late) {
   265e2:	4b34      	ldr	r3, [pc, #208]	; (266b4 <ble_phy_tx+0xd8>)
   265e4:	795b      	ldrb	r3, [r3, #5]
   265e6:	2b00      	cmp	r3, #0
   265e8:	d155      	bne.n	26696 <ble_phy_tx+0xba>
   265ea:	4607      	mov	r7, r0
   265ec:	4688      	mov	r8, r1
   265ee:	4616      	mov	r6, r2
    nrf_wait_disabled();
   265f0:	f7ff fa6a 	bl	25ac8 <nrf_wait_disabled>
    NRF_PPI->CHENCLR = PPI_CHEN_CH4_Msk | PPI_CHEN_CH5_Msk | PPI_CHEN_CH23_Msk |
   265f4:	4b30      	ldr	r3, [pc, #192]	; (266b8 <ble_phy_tx+0xdc>)
   265f6:	4a31      	ldr	r2, [pc, #196]	; (266bc <ble_phy_tx+0xe0>)
   265f8:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    if (g_ble_phy_data.phy_encrypted) {
   265fc:	4b2d      	ldr	r3, [pc, #180]	; (266b4 <ble_phy_tx+0xd8>)
   265fe:	79db      	ldrb	r3, [r3, #7]
   26600:	2b00      	cmp	r3, #0
   26602:	d04c      	beq.n	2669e <ble_phy_tx+0xc2>
        NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   26604:	4d2e      	ldr	r5, [pc, #184]	; (266c0 <ble_phy_tx+0xe4>)
   26606:	2301      	movs	r3, #1
   26608:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
        NRF_CCM->INPTR = (uint32_t)dptr;
   2660c:	4c2d      	ldr	r4, [pc, #180]	; (266c4 <ble_phy_tx+0xe8>)
   2660e:	f8c5 450c 	str.w	r4, [r5, #1292]	; 0x50c
        NRF_CCM->OUTPTR = (uint32_t)pktptr;
   26612:	4b2d      	ldr	r3, [pc, #180]	; (266c8 <ble_phy_tx+0xec>)
   26614:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
        NRF_CCM->SCRATCHPTR = (uint32_t)&g_nrf_encrypt_scratchpad[0];
   26618:	4b2c      	ldr	r3, [pc, #176]	; (266cc <ble_phy_tx+0xf0>)
   2661a:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
        NRF_CCM->EVENTS_ERROR = 0;
   2661e:	2300      	movs	r3, #0
   26620:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
        NRF_CCM->MODE = CCM_MODE_LENGTH_Msk | ble_phy_get_ccm_datarate();
   26624:	f7ff fab6 	bl	25b94 <ble_phy_get_ccm_datarate>
   26628:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
   2662c:	f8c5 0504 	str.w	r0, [r5, #1284]	; 0x504
        NRF_CCM->CNFPTR = (uint32_t)&g_nrf_ccm_data;
   26630:	4b27      	ldr	r3, [pc, #156]	; (266d0 <ble_phy_tx+0xf4>)
   26632:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    payload_len = pducb(&dptr[3], pducb_arg, &hdr_byte);
   26636:	f10d 0207 	add.w	r2, sp, #7
   2663a:	4641      	mov	r1, r8
   2663c:	1ce0      	adds	r0, r4, #3
   2663e:	47b8      	blx	r7
    dptr[0] = hdr_byte;
   26640:	f89d 3007 	ldrb.w	r3, [sp, #7]
   26644:	7023      	strb	r3, [r4, #0]
    dptr[1] = payload_len;
   26646:	7060      	strb	r0, [r4, #1]
    dptr[2] = 0;
   26648:	2300      	movs	r3, #0
   2664a:	70a3      	strb	r3, [r4, #2]
    if (g_ble_phy_data.phy_encrypted) {
   2664c:	4b19      	ldr	r3, [pc, #100]	; (266b4 <ble_phy_tx+0xd8>)
   2664e:	79db      	ldrb	r3, [r3, #7]
   26650:	b113      	cbz	r3, 26658 <ble_phy_tx+0x7c>
        NRF_CCM->TASKS_KSGEN = 1;
   26652:	4b1b      	ldr	r3, [pc, #108]	; (266c0 <ble_phy_tx+0xe4>)
   26654:	2201      	movs	r2, #1
   26656:	601a      	str	r2, [r3, #0]
    NRF_RADIO->PACKETPTR = (uint32_t)pktptr;
   26658:	4b1e      	ldr	r3, [pc, #120]	; (266d4 <ble_phy_tx+0xf8>)
   2665a:	4a1b      	ldr	r2, [pc, #108]	; (266c8 <ble_phy_tx+0xec>)
   2665c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    NRF_RADIO->EVENTS_READY = 0;
   26660:	2200      	movs	r2, #0
   26662:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    NRF_RADIO->EVENTS_END = 0;
   26666:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    NRF_RADIO->EVENTS_DISABLED = 0;
   2666a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    NRF_RADIO->SHORTS = shortcuts;
   2666e:	2203      	movs	r2, #3
   26670:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    NRF_RADIO->INTENSET = RADIO_INTENSET_DISABLED_Msk;
   26674:	2210      	movs	r2, #16
   26676:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    g_ble_phy_data.phy_transition = end_trans;
   2667a:	4a0e      	ldr	r2, [pc, #56]	; (266b4 <ble_phy_tx+0xd8>)
   2667c:	7116      	strb	r6, [r2, #4]
    g_ble_phy_data.phy_tx_pyld_len = payload_len;
   2667e:	7250      	strb	r0, [r2, #9]
    state = NRF_RADIO->STATE;
   26680:	f8d3 3550 	ldr.w	r3, [r3, #1360]	; 0x550
    if (state != RADIO_STATE_STATE_Tx) {
   26684:	2b0b      	cmp	r3, #11
   26686:	d010      	beq.n	266aa <ble_phy_tx+0xce>
        g_ble_phy_data.phy_state = BLE_PHY_STATE_TX;
   26688:	4613      	mov	r3, r2
   2668a:	2202      	movs	r2, #2
   2668c:	70da      	strb	r2, [r3, #3]
        rc = BLE_ERR_SUCCESS;
   2668e:	2000      	movs	r0, #0
}
   26690:	b002      	add	sp, #8
   26692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ble_phy_disable();
   26696:	f7ff fdaf 	bl	261f8 <ble_phy_disable>
        return BLE_PHY_ERR_TX_LATE;
   2669a:	2005      	movs	r0, #5
   2669c:	e7f8      	b.n	26690 <ble_phy_tx+0xb4>
        NRF_AAR->IRKPTR = (uint32_t)&g_nrf_irk_list[0];
   2669e:	4a0e      	ldr	r2, [pc, #56]	; (266d8 <ble_phy_tx+0xfc>)
   266a0:	4b07      	ldr	r3, [pc, #28]	; (266c0 <ble_phy_tx+0xe4>)
   266a2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
        dptr = (uint8_t *)&g_ble_phy_tx_buf[0];
   266a6:	4c08      	ldr	r4, [pc, #32]	; (266c8 <ble_phy_tx+0xec>)
   266a8:	e7c5      	b.n	26636 <ble_phy_tx+0x5a>
        ble_phy_disable();
   266aa:	f7ff fda5 	bl	261f8 <ble_phy_disable>
        rc = BLE_PHY_ERR_RADIO_STATE;
   266ae:	2001      	movs	r0, #1
   266b0:	e7ee      	b.n	26690 <ble_phy_tx+0xb4>
   266b2:	bf00      	nop
   266b4:	20008da0 	.word	0x20008da0
   266b8:	4001f000 	.word	0x4001f000
   266bc:	02800030 	.word	0x02800030
   266c0:	4000f000 	.word	0x4000f000
   266c4:	20008dd4 	.word	0x20008dd4
   266c8:	20008fdc 	.word	0x20008fdc
   266cc:	20009104 	.word	0x20009104
   266d0:	200090e0 	.word	0x200090e0
   266d4:	40001000 	.word	0x40001000
   266d8:	20008d5c 	.word	0x20008d5c

000266dc <ble_phy_access_addr_get>:

/* Gets the current access address */
uint32_t ble_phy_access_addr_get(void)
{
    return g_ble_phy_data.phy_access_address;
}
   266dc:	4b01      	ldr	r3, [pc, #4]	; (266e4 <ble_phy_access_addr_get+0x8>)
   266de:	6958      	ldr	r0, [r3, #20]
   266e0:	4770      	bx	lr
   266e2:	bf00      	nop
   266e4:	20008da0 	.word	0x20008da0

000266e8 <ble_phy_rx_started>:
 */
int
ble_phy_rx_started(void)
{
    return g_ble_phy_data.phy_rx_started;
}
   266e8:	4b01      	ldr	r3, [pc, #4]	; (266f0 <ble_phy_rx_started+0x8>)
   266ea:	7998      	ldrb	r0, [r3, #6]
   266ec:	4770      	bx	lr
   266ee:	bf00      	nop
   266f0:	20008da0 	.word	0x20008da0

000266f4 <ble_phy_xcvr_state_get>:
 */
uint8_t
ble_phy_xcvr_state_get(void)
{
    uint32_t state;
    state = NRF_RADIO->STATE;
   266f4:	4b02      	ldr	r3, [pc, #8]	; (26700 <ble_phy_xcvr_state_get+0xc>)
   266f6:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
    return (uint8_t)state;
}
   266fa:	b2c0      	uxtb	r0, r0
   266fc:	4770      	bx	lr
   266fe:	bf00      	nop
   26700:	40001000 	.word	0x40001000

00026704 <ble_phy_max_data_pdu_pyld>:
 */
uint8_t
ble_phy_max_data_pdu_pyld(void)
{
    return BLE_LL_DATA_PDU_MAX_PYLD;
}
   26704:	20fb      	movs	r0, #251	; 0xfb
   26706:	4770      	bx	lr

00026708 <ble_phy_resolv_list_enable>:

#if MYNEWT_VAL(BLE_LL_CFG_FEAT_LL_PRIVACY)
void
ble_phy_resolv_list_enable(void)
{
    NRF_AAR->NIRK = (uint32_t)g_nrf_num_irks;
   26708:	4b04      	ldr	r3, [pc, #16]	; (2671c <ble_phy_resolv_list_enable+0x14>)
   2670a:	781a      	ldrb	r2, [r3, #0]
   2670c:	4b04      	ldr	r3, [pc, #16]	; (26720 <ble_phy_resolv_list_enable+0x18>)
   2670e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    g_ble_phy_data.phy_privacy = 1;
   26712:	4b04      	ldr	r3, [pc, #16]	; (26724 <ble_phy_resolv_list_enable+0x1c>)
   26714:	2201      	movs	r2, #1
   26716:	721a      	strb	r2, [r3, #8]
}
   26718:	4770      	bx	lr
   2671a:	bf00      	nop
   2671c:	20008d9c 	.word	0x20008d9c
   26720:	4000f000 	.word	0x4000f000
   26724:	20008da0 	.word	0x20008da0

00026728 <ble_phy_resolv_list_disable>:

void
ble_phy_resolv_list_disable(void)
{
    g_ble_phy_data.phy_privacy = 0;
   26728:	4b01      	ldr	r3, [pc, #4]	; (26730 <ble_phy_resolv_list_disable+0x8>)
   2672a:	2200      	movs	r2, #0
   2672c:	721a      	strb	r2, [r3, #8]
}
   2672e:	4770      	bx	lr
   26730:	20008da0 	.word	0x20008da0

00026734 <ble_phy_rfclk_enable>:
}
#endif

void
ble_phy_rfclk_enable(void)
{
   26734:	b508      	push	{r3, lr}
#if MYNEWT
    nrf52_clock_hfxo_request();
   26736:	f001 ff0f 	bl	28558 <nrf52_clock_hfxo_request>
#else
    NRF_CLOCK->TASKS_HFCLKSTART = 1;
#endif
}
   2673a:	bd08      	pop	{r3, pc}

0002673c <ble_phy_rfclk_disable>:

void
ble_phy_rfclk_disable(void)
{
   2673c:	b508      	push	{r3, lr}
#if MYNEWT
    nrf52_clock_hfxo_release();
   2673e:	f001 ff2d 	bl	2859c <nrf52_clock_hfxo_release>
#else
    NRF_CLOCK->TASKS_HFCLKSTOP = 1;
#endif
}
   26742:	bd08      	pop	{r3, pc}

00026744 <ble_svc_ans_new_alert_notify>:
 *
 * @return 0 on success, non-zero error code otherwise.
 */
static int
ble_svc_ans_new_alert_notify(uint8_t cat_id, const char * info_str)
{
   26744:	b570      	push	{r4, r5, r6, lr}
    int info_str_len;

    /* Clear notification to remove old infomation that may persist */
    memset(&ble_svc_ans_new_alert_val, '\0',
   26746:	4a19      	ldr	r2, [pc, #100]	; (267ac <ble_svc_ans_new_alert_notify+0x68>)
   26748:	2300      	movs	r3, #0
   2674a:	f8c2 3002 	str.w	r3, [r2, #2]
   2674e:	f8c2 3006 	str.w	r3, [r2, #6]
   26752:	f8c2 300a 	str.w	r3, [r2, #10]
   26756:	f8c2 300e 	str.w	r3, [r2, #14]
   2675a:	8253      	strh	r3, [r2, #18]
           BLE_SVC_ANS_NEW_ALERT_MAX_LEN);

    /* Set ID and count values */
    ble_svc_ans_new_alert_val[0] = cat_id;
   2675c:	7010      	strb	r0, [r2, #0]
    ble_svc_ans_new_alert_val[1] = ble_svc_ans_new_alert_cnt[cat_id];
   2675e:	4b14      	ldr	r3, [pc, #80]	; (267b0 <ble_svc_ans_new_alert_notify+0x6c>)
   26760:	5c1b      	ldrb	r3, [r3, r0]
   26762:	7053      	strb	r3, [r2, #1]

    if (info_str) {
   26764:	b151      	cbz	r1, 2677c <ble_svc_ans_new_alert_notify+0x38>
   26766:	460c      	mov	r4, r1
        info_str_len = strlen(info_str);
   26768:	4608      	mov	r0, r1
   2676a:	f7e5 f87d 	bl	b868 <strlen>
        if (info_str_len > BLE_SVC_ANS_INFO_STR_MAX_LEN) {
   2676e:	2812      	cmp	r0, #18
   26770:	dc0b      	bgt.n	2678a <ble_svc_ans_new_alert_notify+0x46>
            /* If info_str is longer than the max string length only
             * write up to the maximum length */
            memcpy(&ble_svc_ans_new_alert_val[2], info_str,
                   BLE_SVC_ANS_INFO_STR_MAX_LEN);
        } else {
            memcpy(&ble_svc_ans_new_alert_val[2], info_str, info_str_len);
   26772:	4602      	mov	r2, r0
   26774:	4621      	mov	r1, r4
   26776:	480f      	ldr	r0, [pc, #60]	; (267b4 <ble_svc_ans_new_alert_notify+0x70>)
   26778:	f7e5 f818 	bl	b7ac <memcpy>
        }
    }
    return ble_gattc_notify(ble_svc_ans_conn_handle,
   2677c:	4b0e      	ldr	r3, [pc, #56]	; (267b8 <ble_svc_ans_new_alert_notify+0x74>)
   2677e:	8819      	ldrh	r1, [r3, #0]
   26780:	4b0e      	ldr	r3, [pc, #56]	; (267bc <ble_svc_ans_new_alert_notify+0x78>)
   26782:	8818      	ldrh	r0, [r3, #0]
   26784:	f7e8 f846 	bl	e814 <ble_gattc_notify>
                            ble_svc_ans_new_alert_val_handle);
}
   26788:	bd70      	pop	{r4, r5, r6, pc}
            memcpy(&ble_svc_ans_new_alert_val[2], info_str,
   2678a:	4a08      	ldr	r2, [pc, #32]	; (267ac <ble_svc_ans_new_alert_notify+0x68>)
   2678c:	1c93      	adds	r3, r2, #2
   2678e:	6826      	ldr	r6, [r4, #0]
   26790:	6865      	ldr	r5, [r4, #4]
   26792:	68a0      	ldr	r0, [r4, #8]
   26794:	68e1      	ldr	r1, [r4, #12]
   26796:	f8c2 6002 	str.w	r6, [r2, #2]
   2679a:	f8c2 5006 	str.w	r5, [r2, #6]
   2679e:	f8c2 000a 	str.w	r0, [r2, #10]
   267a2:	f8c2 100e 	str.w	r1, [r2, #14]
   267a6:	8a22      	ldrh	r2, [r4, #16]
   267a8:	821a      	strh	r2, [r3, #16]
   267aa:	e7e7      	b.n	2677c <ble_svc_ans_new_alert_notify+0x38>
   267ac:	20009220 	.word	0x20009220
   267b0:	20009218 	.word	0x20009218
   267b4:	20009222 	.word	0x20009222
   267b8:	20009234 	.word	0x20009234
   267bc:	20009212 	.word	0x20009212

000267c0 <ble_svc_ans_unr_alert_notify>:
 *
 * @return 0 on success, non-zer0 error code otherwise.
 */
static int
ble_svc_ans_unr_alert_notify(uint8_t cat_id)
{
   267c0:	b508      	push	{r3, lr}
    ble_svc_ans_unr_alert_stat[0] = cat_id;
   267c2:	4b06      	ldr	r3, [pc, #24]	; (267dc <ble_svc_ans_unr_alert_notify+0x1c>)
   267c4:	7018      	strb	r0, [r3, #0]
    ble_svc_ans_unr_alert_stat[1] = ble_svc_ans_unr_alert_cnt[cat_id];
   267c6:	4a06      	ldr	r2, [pc, #24]	; (267e0 <ble_svc_ans_unr_alert_notify+0x20>)
   267c8:	5c12      	ldrb	r2, [r2, r0]
   267ca:	705a      	strb	r2, [r3, #1]
    return ble_gattc_notify(ble_svc_ans_conn_handle,
   267cc:	4b05      	ldr	r3, [pc, #20]	; (267e4 <ble_svc_ans_unr_alert_notify+0x24>)
   267ce:	8819      	ldrh	r1, [r3, #0]
   267d0:	4b05      	ldr	r3, [pc, #20]	; (267e8 <ble_svc_ans_unr_alert_notify+0x28>)
   267d2:	8818      	ldrh	r0, [r3, #0]
   267d4:	f7e8 f81e 	bl	e814 <ble_gattc_notify>
                            ble_svc_ans_unr_alert_val_handle);
}
   267d8:	bd08      	pop	{r3, pc}
   267da:	bf00      	nop
   267dc:	20009244 	.word	0x20009244
   267e0:	2000923c 	.word	0x2000923c
   267e4:	20009246 	.word	0x20009246
   267e8:	20009212 	.word	0x20009212

000267ec <ble_svc_ans_chr_write>:
 */
static int
ble_svc_ans_chr_write(struct os_mbuf *om, uint16_t min_len,
                      uint16_t max_len, void *dst,
                      uint16_t *len)
{
   267ec:	b510      	push	{r4, lr}
    uint16_t om_len;
    int rc;

    om_len = OS_MBUF_PKTLEN(om);
   267ee:	8a04      	ldrh	r4, [r0, #16]
    if (om_len < min_len || om_len > max_len) {
   267f0:	428c      	cmp	r4, r1
   267f2:	d309      	bcc.n	26808 <ble_svc_ans_chr_write+0x1c>
   267f4:	4294      	cmp	r4, r2
   267f6:	d809      	bhi.n	2680c <ble_svc_ans_chr_write+0x20>
   267f8:	4619      	mov	r1, r3
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
    }

    rc = ble_hs_mbuf_to_flat(om, dst, max_len, len);
   267fa:	9b02      	ldr	r3, [sp, #8]
   267fc:	f7ea fec2 	bl	11584 <ble_hs_mbuf_to_flat>
    if (rc != 0) {
   26800:	4603      	mov	r3, r0
   26802:	b120      	cbz	r0, 2680e <ble_svc_ans_chr_write+0x22>
        return BLE_ATT_ERR_UNLIKELY;
   26804:	230e      	movs	r3, #14
   26806:	e002      	b.n	2680e <ble_svc_ans_chr_write+0x22>
        return BLE_ATT_ERR_INVALID_ATTR_VALUE_LEN;
   26808:	230d      	movs	r3, #13
   2680a:	e000      	b.n	2680e <ble_svc_ans_chr_write+0x22>
   2680c:	230d      	movs	r3, #13
    }

    return 0;
}
   2680e:	4618      	mov	r0, r3
   26810:	bd10      	pop	{r4, pc}
	...

00026814 <ble_svc_ans_access>:
{
   26814:	b530      	push	{r4, r5, lr}
   26816:	b083      	sub	sp, #12
   26818:	4614      	mov	r4, r2
    uuid16 = ble_uuid_u16(ctxt->chr->uuid);
   2681a:	6893      	ldr	r3, [r2, #8]
   2681c:	6818      	ldr	r0, [r3, #0]
   2681e:	f7ed fe41 	bl	144a4 <ble_uuid_u16>
    assert(uuid16 != 0);
   26822:	b150      	cbz	r0, 2683a <ble_svc_ans_access+0x26>
    switch (uuid16) {
   26824:	f5a0 5029 	sub.w	r0, r0, #10816	; 0x2a40
   26828:	3804      	subs	r0, #4
   2682a:	2804      	cmp	r0, #4
   2682c:	f200 80db 	bhi.w	269e6 <ble_svc_ans_access+0x1d2>
   26830:	e8df f000 	tbb	[pc, r0]
   26834:	0d255d74 	.word	0x0d255d74
   26838:	47          	.byte	0x47
   26839:	00          	.byte	0x00
    assert(uuid16 != 0);
   2683a:	f7e1 fcc1 	bl	81c0 <hal_debugger_connected>
   2683e:	b100      	cbz	r0, 26842 <ble_svc_ans_access+0x2e>
   26840:	be01      	bkpt	0x0001
   26842:	2300      	movs	r3, #0
   26844:	461a      	mov	r2, r3
   26846:	4619      	mov	r1, r3
   26848:	4618      	mov	r0, r3
   2684a:	f7e3 f84f 	bl	98ec <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   2684e:	7823      	ldrb	r3, [r4, #0]
   26850:	b94b      	cbnz	r3, 26866 <ble_svc_ans_access+0x52>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_cat,
   26852:	2201      	movs	r2, #1
   26854:	496b      	ldr	r1, [pc, #428]	; (26a04 <ble_svc_ans_access+0x1f0>)
   26856:	6860      	ldr	r0, [r4, #4]
   26858:	f7e3 fcd4 	bl	a204 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2685c:	4604      	mov	r4, r0
   2685e:	b960      	cbnz	r0, 2687a <ble_svc_ans_access+0x66>
}
   26860:	4620      	mov	r0, r4
   26862:	b003      	add	sp, #12
   26864:	bd30      	pop	{r4, r5, pc}
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   26866:	f7e1 fcab 	bl	81c0 <hal_debugger_connected>
   2686a:	b100      	cbz	r0, 2686e <ble_svc_ans_access+0x5a>
   2686c:	be01      	bkpt	0x0001
   2686e:	2300      	movs	r3, #0
   26870:	461a      	mov	r2, r3
   26872:	4619      	mov	r1, r3
   26874:	4618      	mov	r0, r3
   26876:	f7e3 f839 	bl	98ec <__assert_func>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   2687a:	2411      	movs	r4, #17
   2687c:	e7f0      	b.n	26860 <ble_svc_ans_access+0x4c>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   2687e:	7823      	ldrb	r3, [r4, #0]
   26880:	2b01      	cmp	r3, #1
   26882:	d00a      	beq.n	2689a <ble_svc_ans_access+0x86>
        } else if (ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR) {
   26884:	b99b      	cbnz	r3, 268ae <ble_svc_ans_access+0x9a>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_new_alert_val,
   26886:	2214      	movs	r2, #20
   26888:	495f      	ldr	r1, [pc, #380]	; (26a08 <ble_svc_ans_access+0x1f4>)
   2688a:	6860      	ldr	r0, [r4, #4]
   2688c:	f7e3 fcba 	bl	a204 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   26890:	4604      	mov	r4, r0
   26892:	2800      	cmp	r0, #0
   26894:	d0e4      	beq.n	26860 <ble_svc_ans_access+0x4c>
   26896:	2411      	movs	r4, #17
   26898:	e7e2      	b.n	26860 <ble_svc_ans_access+0x4c>
            rc = ble_svc_ans_chr_write(ctxt->om, 0,
   2689a:	6860      	ldr	r0, [r4, #4]
   2689c:	4b5b      	ldr	r3, [pc, #364]	; (26a0c <ble_svc_ans_access+0x1f8>)
   2689e:	9300      	str	r3, [sp, #0]
   268a0:	4b59      	ldr	r3, [pc, #356]	; (26a08 <ble_svc_ans_access+0x1f4>)
   268a2:	2214      	movs	r2, #20
   268a4:	2100      	movs	r1, #0
   268a6:	f7ff ffa1 	bl	267ec <ble_svc_ans_chr_write>
   268aa:	4604      	mov	r4, r0
            return rc;
   268ac:	e7d8      	b.n	26860 <ble_svc_ans_access+0x4c>
        assert(0);
   268ae:	f7e1 fc87 	bl	81c0 <hal_debugger_connected>
   268b2:	b100      	cbz	r0, 268b6 <ble_svc_ans_access+0xa2>
   268b4:	be01      	bkpt	0x0001
   268b6:	2300      	movs	r3, #0
   268b8:	461a      	mov	r2, r3
   268ba:	4619      	mov	r1, r3
   268bc:	4618      	mov	r0, r3
   268be:	f7e3 f815 	bl	98ec <__assert_func>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   268c2:	7823      	ldrb	r3, [r4, #0]
   268c4:	b94b      	cbnz	r3, 268da <ble_svc_ans_access+0xc6>
        rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_cat,
   268c6:	2201      	movs	r2, #1
   268c8:	4951      	ldr	r1, [pc, #324]	; (26a10 <ble_svc_ans_access+0x1fc>)
   268ca:	6860      	ldr	r0, [r4, #4]
   268cc:	f7e3 fc9a 	bl	a204 <os_mbuf_append>
        return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   268d0:	4604      	mov	r4, r0
   268d2:	2800      	cmp	r0, #0
   268d4:	d0c4      	beq.n	26860 <ble_svc_ans_access+0x4c>
   268d6:	2411      	movs	r4, #17
   268d8:	e7c2      	b.n	26860 <ble_svc_ans_access+0x4c>
        assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   268da:	f7e1 fc71 	bl	81c0 <hal_debugger_connected>
   268de:	b100      	cbz	r0, 268e2 <ble_svc_ans_access+0xce>
   268e0:	be01      	bkpt	0x0001
   268e2:	2300      	movs	r3, #0
   268e4:	461a      	mov	r2, r3
   268e6:	4619      	mov	r1, r3
   268e8:	4618      	mov	r0, r3
   268ea:	f7e2 ffff 	bl	98ec <__assert_func>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   268ee:	7823      	ldrb	r3, [r4, #0]
   268f0:	2b01      	cmp	r3, #1
   268f2:	d009      	beq.n	26908 <ble_svc_ans_access+0xf4>
            rc = os_mbuf_append(ctxt->om, &ble_svc_ans_unr_alert_stat,
   268f4:	2202      	movs	r2, #2
   268f6:	4947      	ldr	r1, [pc, #284]	; (26a14 <ble_svc_ans_access+0x200>)
   268f8:	6860      	ldr	r0, [r4, #4]
   268fa:	f7e3 fc83 	bl	a204 <os_mbuf_append>
            return rc == 0 ? 0 : BLE_ATT_ERR_INSUFFICIENT_RES;
   268fe:	4604      	mov	r4, r0
   26900:	2800      	cmp	r0, #0
   26902:	d0ad      	beq.n	26860 <ble_svc_ans_access+0x4c>
   26904:	2411      	movs	r4, #17
   26906:	e7ab      	b.n	26860 <ble_svc_ans_access+0x4c>
            rc = ble_svc_ans_chr_write(ctxt->om,
   26908:	6860      	ldr	r0, [r4, #4]
   2690a:	2300      	movs	r3, #0
   2690c:	9300      	str	r3, [sp, #0]
   2690e:	4b41      	ldr	r3, [pc, #260]	; (26a14 <ble_svc_ans_access+0x200>)
   26910:	2202      	movs	r2, #2
   26912:	4611      	mov	r1, r2
   26914:	f7ff ff6a 	bl	267ec <ble_svc_ans_chr_write>
   26918:	4604      	mov	r4, r0
            return rc;
   2691a:	e7a1      	b.n	26860 <ble_svc_ans_access+0x4c>
        if (ctxt->op == BLE_GATT_ACCESS_OP_WRITE_CHR) {
   2691c:	7823      	ldrb	r3, [r4, #0]
   2691e:	2b01      	cmp	r3, #1
   26920:	d001      	beq.n	26926 <ble_svc_ans_access+0x112>
        return rc;
   26922:	240e      	movs	r4, #14
   26924:	e79c      	b.n	26860 <ble_svc_ans_access+0x4c>
            rc = ble_svc_ans_chr_write(ctxt->om,
   26926:	6860      	ldr	r0, [r4, #4]
   26928:	2300      	movs	r3, #0
   2692a:	9300      	str	r3, [sp, #0]
   2692c:	4b3a      	ldr	r3, [pc, #232]	; (26a18 <ble_svc_ans_access+0x204>)
   2692e:	2202      	movs	r2, #2
   26930:	4611      	mov	r1, r2
   26932:	f7ff ff5b 	bl	267ec <ble_svc_ans_chr_write>
            if (rc != 0) {
   26936:	4604      	mov	r4, r0
   26938:	2800      	cmp	r0, #0
   2693a:	d191      	bne.n	26860 <ble_svc_ans_access+0x4c>
            cmd_id = ble_svc_ans_alert_not_ctrl_pt[0];
   2693c:	4b36      	ldr	r3, [pc, #216]	; (26a18 <ble_svc_ans_access+0x204>)
   2693e:	781a      	ldrb	r2, [r3, #0]
            cat_id = ble_svc_ans_alert_not_ctrl_pt[1];
   26940:	7858      	ldrb	r0, [r3, #1]
            if (cat_id < BLE_SVC_ANS_CAT_NUM) {
   26942:	2807      	cmp	r0, #7
   26944:	d809      	bhi.n	2695a <ble_svc_ans_access+0x146>
                cat_bit_mask = (1 << cat_id);
   26946:	2301      	movs	r3, #1
   26948:	4083      	lsls	r3, r0
   2694a:	b2db      	uxtb	r3, r3
            switch (cmd_id) {
   2694c:	2a05      	cmp	r2, #5
   2694e:	d856      	bhi.n	269fe <ble_svc_ans_access+0x1ea>
   26950:	e8df f002 	tbb	[pc, r2]
   26954:	17110c07 	.word	0x17110c07
   26958:	341d      	.short	0x341d
            } else if (cat_id == 0xff) {
   2695a:	28ff      	cmp	r0, #255	; 0xff
   2695c:	d14d      	bne.n	269fa <ble_svc_ans_access+0x1e6>
                cat_bit_mask = cat_id;
   2695e:	4603      	mov	r3, r0
   26960:	e7f4      	b.n	2694c <ble_svc_ans_access+0x138>
                ble_svc_ans_new_alert_cat |= cat_bit_mask;
   26962:	4a28      	ldr	r2, [pc, #160]	; (26a04 <ble_svc_ans_access+0x1f0>)
   26964:	7811      	ldrb	r1, [r2, #0]
   26966:	430b      	orrs	r3, r1
   26968:	7013      	strb	r3, [r2, #0]
                break;
   2696a:	e779      	b.n	26860 <ble_svc_ans_access+0x4c>
                ble_svc_ans_unr_alert_cat |= cat_bit_mask;
   2696c:	4a28      	ldr	r2, [pc, #160]	; (26a10 <ble_svc_ans_access+0x1fc>)
   2696e:	7811      	ldrb	r1, [r2, #0]
   26970:	430b      	orrs	r3, r1
   26972:	7013      	strb	r3, [r2, #0]
                break;
   26974:	e774      	b.n	26860 <ble_svc_ans_access+0x4c>
                ble_svc_ans_new_alert_cat &= ~cat_bit_mask;
   26976:	4923      	ldr	r1, [pc, #140]	; (26a04 <ble_svc_ans_access+0x1f0>)
   26978:	780a      	ldrb	r2, [r1, #0]
   2697a:	ea22 0303 	bic.w	r3, r2, r3
   2697e:	700b      	strb	r3, [r1, #0]
                break;
   26980:	e76e      	b.n	26860 <ble_svc_ans_access+0x4c>
                ble_svc_ans_unr_alert_cat &= ~cat_bit_mask;
   26982:	4923      	ldr	r1, [pc, #140]	; (26a10 <ble_svc_ans_access+0x1fc>)
   26984:	780a      	ldrb	r2, [r1, #0]
   26986:	ea22 0303 	bic.w	r3, r2, r3
   2698a:	700b      	strb	r3, [r1, #0]
                break;
   2698c:	e768      	b.n	26860 <ble_svc_ans_access+0x4c>
                if (cat_id == 0xff) {
   2698e:	28ff      	cmp	r0, #255	; 0xff
   26990:	d110      	bne.n	269b4 <ble_svc_ans_access+0x1a0>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   26992:	2507      	movs	r5, #7
   26994:	e000      	b.n	26998 <ble_svc_ans_access+0x184>
   26996:	3d01      	subs	r5, #1
   26998:	2d00      	cmp	r5, #0
   2699a:	f77f af61 	ble.w	26860 <ble_svc_ans_access+0x4c>
                        if ((ble_svc_ans_new_alert_cat >> i) & 0x01) {
   2699e:	4b19      	ldr	r3, [pc, #100]	; (26a04 <ble_svc_ans_access+0x1f0>)
   269a0:	781b      	ldrb	r3, [r3, #0]
   269a2:	412b      	asrs	r3, r5
   269a4:	f013 0f01 	tst.w	r3, #1
   269a8:	d0f5      	beq.n	26996 <ble_svc_ans_access+0x182>
                            ble_svc_ans_new_alert_notify(i, NULL);
   269aa:	2100      	movs	r1, #0
   269ac:	b2e8      	uxtb	r0, r5
   269ae:	f7ff fec9 	bl	26744 <ble_svc_ans_new_alert_notify>
   269b2:	e7f0      	b.n	26996 <ble_svc_ans_access+0x182>
                    ble_svc_ans_new_alert_notify(cat_id, NULL);
   269b4:	2100      	movs	r1, #0
   269b6:	f7ff fec5 	bl	26744 <ble_svc_ans_new_alert_notify>
   269ba:	e751      	b.n	26860 <ble_svc_ans_access+0x4c>
                if (cat_id == 0xff) {
   269bc:	28ff      	cmp	r0, #255	; 0xff
   269be:	d10f      	bne.n	269e0 <ble_svc_ans_access+0x1cc>
                    for (i = BLE_SVC_ANS_CAT_NUM - 1; i > 0; --i) {
   269c0:	2507      	movs	r5, #7
   269c2:	e000      	b.n	269c6 <ble_svc_ans_access+0x1b2>
   269c4:	3d01      	subs	r5, #1
   269c6:	2d00      	cmp	r5, #0
   269c8:	f77f af4a 	ble.w	26860 <ble_svc_ans_access+0x4c>
                        if ((ble_svc_ans_unr_alert_cat >> i) & 0x01) {
   269cc:	4b10      	ldr	r3, [pc, #64]	; (26a10 <ble_svc_ans_access+0x1fc>)
   269ce:	781b      	ldrb	r3, [r3, #0]
   269d0:	412b      	asrs	r3, r5
   269d2:	f013 0f01 	tst.w	r3, #1
   269d6:	d0f5      	beq.n	269c4 <ble_svc_ans_access+0x1b0>
                            ble_svc_ans_unr_alert_notify(i);
   269d8:	b2e8      	uxtb	r0, r5
   269da:	f7ff fef1 	bl	267c0 <ble_svc_ans_unr_alert_notify>
   269de:	e7f1      	b.n	269c4 <ble_svc_ans_access+0x1b0>
                    ble_svc_ans_unr_alert_notify(cat_id);
   269e0:	f7ff feee 	bl	267c0 <ble_svc_ans_unr_alert_notify>
   269e4:	e73c      	b.n	26860 <ble_svc_ans_access+0x4c>
        assert(0);
   269e6:	f7e1 fbeb 	bl	81c0 <hal_debugger_connected>
   269ea:	b100      	cbz	r0, 269ee <ble_svc_ans_access+0x1da>
   269ec:	be01      	bkpt	0x0001
   269ee:	2300      	movs	r3, #0
   269f0:	461a      	mov	r2, r3
   269f2:	4619      	mov	r1, r3
   269f4:	4618      	mov	r0, r3
   269f6:	f7e2 ff79 	bl	98ec <__assert_func>
                return BLE_ATT_ERR_UNLIKELY;
   269fa:	240e      	movs	r4, #14
   269fc:	e730      	b.n	26860 <ble_svc_ans_access+0x4c>
                return BLE_SVC_ANS_ERR_CMD_NOT_SUPPORTED;
   269fe:	24a0      	movs	r4, #160	; 0xa0
   26a00:	e72e      	b.n	26860 <ble_svc_ans_access+0x4c>
   26a02:	bf00      	nop
   26a04:	20009214 	.word	0x20009214
   26a08:	20009220 	.word	0x20009220
   26a0c:	20009236 	.word	0x20009236
   26a10:	20009238 	.word	0x20009238
   26a14:	20009244 	.word	0x20009244
   26a18:	20009210 	.word	0x20009210

00026a1c <ble_svc_ans_init>:
 * XXX: We should technically be able to change the new alert and
 *      unread alert catagories when we have no active connections.
 */
void
ble_svc_ans_init(void)
{
   26a1c:	b510      	push	{r4, lr}
   26a1e:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   26a20:	4b1a      	ldr	r3, [pc, #104]	; (26a8c <ble_svc_ans_init+0x70>)
   26a22:	781b      	ldrb	r3, [r3, #0]
   26a24:	b173      	cbz	r3, 26a44 <ble_svc_ans_init+0x28>

    rc = ble_gatts_count_cfg(ble_svc_ans_defs);
   26a26:	481a      	ldr	r0, [pc, #104]	; (26a90 <ble_svc_ans_init+0x74>)
   26a28:	f7e8 ff70 	bl	f90c <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26a2c:	b9a0      	cbnz	r0, 26a58 <ble_svc_ans_init+0x3c>

    rc = ble_gatts_add_svcs(ble_svc_ans_defs);
   26a2e:	4818      	ldr	r0, [pc, #96]	; (26a90 <ble_svc_ans_init+0x74>)
   26a30:	f7e8 ff48 	bl	f8c4 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26a34:	b9e8      	cbnz	r0, 26a72 <ble_svc_ans_init+0x56>

    ble_svc_ans_new_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_NEW_ALERT_CAT);
   26a36:	2300      	movs	r3, #0
   26a38:	4a16      	ldr	r2, [pc, #88]	; (26a94 <ble_svc_ans_init+0x78>)
   26a3a:	7013      	strb	r3, [r2, #0]
    ble_svc_ans_unr_alert_cat = MYNEWT_VAL(BLE_SVC_ANS_UNR_ALERT_CAT);
   26a3c:	4a16      	ldr	r2, [pc, #88]	; (26a98 <ble_svc_ans_init+0x7c>)
   26a3e:	7013      	strb	r3, [r2, #0]
}
   26a40:	b002      	add	sp, #8
   26a42:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   26a44:	f7e1 fbbc 	bl	81c0 <hal_debugger_connected>
   26a48:	b100      	cbz	r0, 26a4c <ble_svc_ans_init+0x30>
   26a4a:	be01      	bkpt	0x0001
   26a4c:	2300      	movs	r3, #0
   26a4e:	461a      	mov	r2, r3
   26a50:	4619      	mov	r1, r3
   26a52:	4618      	mov	r0, r3
   26a54:	f7e2 ff4a 	bl	98ec <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26a58:	f7e1 fbb2 	bl	81c0 <hal_debugger_connected>
   26a5c:	b100      	cbz	r0, 26a60 <ble_svc_ans_init+0x44>
   26a5e:	be01      	bkpt	0x0001
   26a60:	2000      	movs	r0, #0
   26a62:	9000      	str	r0, [sp, #0]
   26a64:	4b0d      	ldr	r3, [pc, #52]	; (26a9c <ble_svc_ans_init+0x80>)
   26a66:	681c      	ldr	r4, [r3, #0]
   26a68:	4603      	mov	r3, r0
   26a6a:	4602      	mov	r2, r0
   26a6c:	4601      	mov	r1, r0
   26a6e:	47a0      	blx	r4
   26a70:	e7dd      	b.n	26a2e <ble_svc_ans_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26a72:	f7e1 fba5 	bl	81c0 <hal_debugger_connected>
   26a76:	b100      	cbz	r0, 26a7a <ble_svc_ans_init+0x5e>
   26a78:	be01      	bkpt	0x0001
   26a7a:	2000      	movs	r0, #0
   26a7c:	9000      	str	r0, [sp, #0]
   26a7e:	4b07      	ldr	r3, [pc, #28]	; (26a9c <ble_svc_ans_init+0x80>)
   26a80:	681c      	ldr	r4, [r3, #0]
   26a82:	4603      	mov	r3, r0
   26a84:	4602      	mov	r2, r0
   26a86:	4601      	mov	r1, r0
   26a88:	47a0      	blx	r4
   26a8a:	e7d4      	b.n	26a36 <ble_svc_ans_init+0x1a>
   26a8c:	20000506 	.word	0x20000506
   26a90:	000298c4 	.word	0x000298c4
   26a94:	20009214 	.word	0x20009214
   26a98:	20009238 	.word	0x20009238
   26a9c:	200000ec 	.word	0x200000ec

00026aa0 <ble_svc_gatt_access>:
};

static int
ble_svc_gatt_access(uint16_t conn_handle, uint16_t attr_handle,
                    struct ble_gatt_access_ctxt *ctxt, void *arg)
{
   26aa0:	b510      	push	{r4, lr}
     * access callback gets called by the stack when it needs to read the
     * characteristic value to populate the outgoing indication command.
     * Therefore, this callback should only get called during an attempt to
     * read the characteristic.
     */
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   26aa2:	7813      	ldrb	r3, [r2, #0]
   26aa4:	b9a3      	cbnz	r3, 26ad0 <ble_svc_gatt_access+0x30>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   26aa6:	6891      	ldr	r1, [r2, #8]
   26aa8:	4b14      	ldr	r3, [pc, #80]	; (26afc <ble_svc_gatt_access+0x5c>)
   26aaa:	4299      	cmp	r1, r3
   26aac:	d11a      	bne.n	26ae4 <ble_svc_gatt_access+0x44>

    u8p = os_mbuf_extend(ctxt->om, 4);
   26aae:	2104      	movs	r1, #4
   26ab0:	6850      	ldr	r0, [r2, #4]
   26ab2:	f7e3 fe1d 	bl	a6f0 <os_mbuf_extend>
    if (u8p == NULL) {
   26ab6:	4604      	mov	r4, r0
   26ab8:	b1f0      	cbz	r0, 26af8 <ble_svc_gatt_access+0x58>
        return BLE_HS_ENOMEM;
    }

    put_le16(u8p + 0, ble_svc_gatt_start_handle);
   26aba:	4b11      	ldr	r3, [pc, #68]	; (26b00 <ble_svc_gatt_access+0x60>)
   26abc:	8819      	ldrh	r1, [r3, #0]
   26abe:	f7f5 f88f 	bl	1bbe0 <put_le16>
    put_le16(u8p + 2, ble_svc_gatt_end_handle);
   26ac2:	4b10      	ldr	r3, [pc, #64]	; (26b04 <ble_svc_gatt_access+0x64>)
   26ac4:	8819      	ldrh	r1, [r3, #0]
   26ac6:	1ca0      	adds	r0, r4, #2
   26ac8:	f7f5 f88a 	bl	1bbe0 <put_le16>

    return 0;
   26acc:	2000      	movs	r0, #0
}
   26ace:	bd10      	pop	{r4, pc}
    assert(ctxt->op == BLE_GATT_ACCESS_OP_READ_CHR);
   26ad0:	f7e1 fb76 	bl	81c0 <hal_debugger_connected>
   26ad4:	b100      	cbz	r0, 26ad8 <ble_svc_gatt_access+0x38>
   26ad6:	be01      	bkpt	0x0001
   26ad8:	2300      	movs	r3, #0
   26ada:	461a      	mov	r2, r3
   26adc:	4619      	mov	r1, r3
   26ade:	4618      	mov	r0, r3
   26ae0:	f7e2 ff04 	bl	98ec <__assert_func>
    assert(ctxt->chr == &ble_svc_gatt_defs[0].characteristics[0]);
   26ae4:	f7e1 fb6c 	bl	81c0 <hal_debugger_connected>
   26ae8:	b100      	cbz	r0, 26aec <ble_svc_gatt_access+0x4c>
   26aea:	be01      	bkpt	0x0001
   26aec:	2300      	movs	r3, #0
   26aee:	461a      	mov	r2, r3
   26af0:	4619      	mov	r1, r3
   26af2:	4618      	mov	r0, r3
   26af4:	f7e2 fefa 	bl	98ec <__assert_func>
        return BLE_HS_ENOMEM;
   26af8:	2006      	movs	r0, #6
   26afa:	e7e8      	b.n	26ace <ble_svc_gatt_access+0x2e>
   26afc:	20000448 	.word	0x20000448
   26b00:	2000924c 	.word	0x2000924c
   26b04:	2000924a 	.word	0x2000924a

00026b08 <ble_svc_gatt_init>:
    ble_gatts_chr_updated(ble_svc_gatt_changed_val_handle);
}

void
ble_svc_gatt_init(void)
{
   26b08:	b510      	push	{r4, lr}
   26b0a:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   26b0c:	4b18      	ldr	r3, [pc, #96]	; (26b70 <ble_svc_gatt_init+0x68>)
   26b0e:	781b      	ldrb	r3, [r3, #0]
   26b10:	b14b      	cbz	r3, 26b26 <ble_svc_gatt_init+0x1e>

    rc = ble_gatts_count_cfg(ble_svc_gatt_defs);
   26b12:	4818      	ldr	r0, [pc, #96]	; (26b74 <ble_svc_gatt_init+0x6c>)
   26b14:	f7e8 fefa 	bl	f90c <ble_gatts_count_cfg>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26b18:	b978      	cbnz	r0, 26b3a <ble_svc_gatt_init+0x32>

    rc = ble_gatts_add_svcs(ble_svc_gatt_defs);
   26b1a:	4816      	ldr	r0, [pc, #88]	; (26b74 <ble_svc_gatt_init+0x6c>)
   26b1c:	f7e8 fed2 	bl	f8c4 <ble_gatts_add_svcs>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26b20:	b9c0      	cbnz	r0, 26b54 <ble_svc_gatt_init+0x4c>
}
   26b22:	b002      	add	sp, #8
   26b24:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   26b26:	f7e1 fb4b 	bl	81c0 <hal_debugger_connected>
   26b2a:	b100      	cbz	r0, 26b2e <ble_svc_gatt_init+0x26>
   26b2c:	be01      	bkpt	0x0001
   26b2e:	2300      	movs	r3, #0
   26b30:	461a      	mov	r2, r3
   26b32:	4619      	mov	r1, r3
   26b34:	4618      	mov	r0, r3
   26b36:	f7e2 fed9 	bl	98ec <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26b3a:	f7e1 fb41 	bl	81c0 <hal_debugger_connected>
   26b3e:	b100      	cbz	r0, 26b42 <ble_svc_gatt_init+0x3a>
   26b40:	be01      	bkpt	0x0001
   26b42:	2000      	movs	r0, #0
   26b44:	9000      	str	r0, [sp, #0]
   26b46:	4b0c      	ldr	r3, [pc, #48]	; (26b78 <ble_svc_gatt_init+0x70>)
   26b48:	681c      	ldr	r4, [r3, #0]
   26b4a:	4603      	mov	r3, r0
   26b4c:	4602      	mov	r2, r0
   26b4e:	4601      	mov	r1, r0
   26b50:	47a0      	blx	r4
   26b52:	e7e2      	b.n	26b1a <ble_svc_gatt_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   26b54:	f7e1 fb34 	bl	81c0 <hal_debugger_connected>
   26b58:	b100      	cbz	r0, 26b5c <ble_svc_gatt_init+0x54>
   26b5a:	be01      	bkpt	0x0001
   26b5c:	2000      	movs	r0, #0
   26b5e:	9000      	str	r0, [sp, #0]
   26b60:	4b05      	ldr	r3, [pc, #20]	; (26b78 <ble_svc_gatt_init+0x70>)
   26b62:	681c      	ldr	r4, [r3, #0]
   26b64:	4603      	mov	r3, r0
   26b66:	4602      	mov	r2, r0
   26b68:	4601      	mov	r1, r0
   26b6a:	47a0      	blx	r4
}
   26b6c:	e7d9      	b.n	26b22 <ble_svc_gatt_init+0x1a>
   26b6e:	bf00      	nop
   26b70:	20000506 	.word	0x20000506
   26b74:	000298e4 	.word	0x000298e4
   26b78:	200000ec 	.word	0x200000ec

00026b7c <ble_store_config_find_sec>:

static int
ble_store_config_find_sec(const struct ble_store_key_sec *key_sec,
                          const struct ble_store_value_sec *value_secs,
                          int num_value_secs)
{
   26b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26b80:	b083      	sub	sp, #12
   26b82:	4605      	mov	r5, r0
   26b84:	4688      	mov	r8, r1
   26b86:	4692      	mov	sl, r2
    int skipped;
    int i;

    skipped = 0;

    for (i = 0; i < num_value_secs; i++) {
   26b88:	2400      	movs	r4, #0
    skipped = 0;
   26b8a:	46a3      	mov	fp, r4
    for (i = 0; i < num_value_secs; i++) {
   26b8c:	e004      	b.n	26b98 <ble_store_config_find_sec+0x1c>
        return type_diff;
   26b8e:	4638      	mov	r0, r7
   26b90:	e016      	b.n	26bc0 <ble_store_config_find_sec+0x44>
                continue;
            }
        }

        if (key_sec->idx > skipped) {
            skipped++;
   26b92:	f10b 0b01 	add.w	fp, fp, #1
    for (i = 0; i < num_value_secs; i++) {
   26b96:	3401      	adds	r4, #1
   26b98:	4554      	cmp	r4, sl
   26b9a:	da36      	bge.n	26c0a <ble_store_config_find_sec+0x8e>
        cur = value_secs + i;
   26b9c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   26ba0:	011e      	lsls	r6, r3, #4
   26ba2:	eb08 0906 	add.w	r9, r8, r6
        if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   26ba6:	2300      	movs	r3, #0
   26ba8:	9300      	str	r3, [sp, #0]
   26baa:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   26bae:	782f      	ldrb	r7, [r5, #0]
    if (type_diff != 0) {
   26bb0:	2f00      	cmp	r7, #0
   26bb2:	d1ec      	bne.n	26b8e <ble_store_config_find_sec+0x12>
    return memcmp(a->val, b->val, sizeof(a->val));
   26bb4:	2206      	movs	r2, #6
   26bb6:	f10d 0101 	add.w	r1, sp, #1
   26bba:	1c68      	adds	r0, r5, #1
   26bbc:	f7e4 fdd2 	bl	b764 <memcmp>
   26bc0:	b158      	cbz	r0, 26bda <ble_store_config_find_sec+0x5e>
    type_diff = a->type - b->type;
   26bc2:	f818 0006 	ldrb.w	r0, [r8, r6]
    if (type_diff != 0) {
   26bc6:	1bc0      	subs	r0, r0, r7
   26bc8:	d105      	bne.n	26bd6 <ble_store_config_find_sec+0x5a>
    return memcmp(a->val, b->val, sizeof(a->val));
   26bca:	2206      	movs	r2, #6
   26bcc:	1c69      	adds	r1, r5, #1
   26bce:	f109 0001 	add.w	r0, r9, #1
   26bd2:	f7e4 fdc7 	bl	b764 <memcmp>
            if (ble_addr_cmp(&cur->peer_addr, &key_sec->peer_addr)) {
   26bd6:	2800      	cmp	r0, #0
   26bd8:	d1dd      	bne.n	26b96 <ble_store_config_find_sec+0x1a>
        if (key_sec->ediv_rand_present) {
   26bda:	7e2b      	ldrb	r3, [r5, #24]
   26bdc:	f013 0f01 	tst.w	r3, #1
   26be0:	d00c      	beq.n	26bfc <ble_store_config_find_sec+0x80>
            if (cur->ediv != key_sec->ediv) {
   26be2:	f8b9 2008 	ldrh.w	r2, [r9, #8]
   26be6:	892b      	ldrh	r3, [r5, #8]
   26be8:	429a      	cmp	r2, r3
   26bea:	d1d4      	bne.n	26b96 <ble_store_config_find_sec+0x1a>
            if (cur->rand_num != key_sec->rand_num) {
   26bec:	e9d9 0104 	ldrd	r0, r1, [r9, #16]
   26bf0:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
   26bf4:	4299      	cmp	r1, r3
   26bf6:	bf08      	it	eq
   26bf8:	4290      	cmpeq	r0, r2
   26bfa:	d1cc      	bne.n	26b96 <ble_store_config_find_sec+0x1a>
        if (key_sec->idx > skipped) {
   26bfc:	7e6b      	ldrb	r3, [r5, #25]
   26bfe:	455b      	cmp	r3, fp
   26c00:	dcc7      	bgt.n	26b92 <ble_store_config_find_sec+0x16>

        return i;
    }

    return -1;
}
   26c02:	4620      	mov	r0, r4
   26c04:	b003      	add	sp, #12
   26c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
   26c0a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   26c0e:	e7f8      	b.n	26c02 <ble_store_config_find_sec+0x86>

00026c10 <ble_store_config_read_peer_sec>:
}

static int
ble_store_config_read_peer_sec(const struct ble_store_key_sec *key_sec,
                               struct ble_store_value_sec *value_sec)
{
   26c10:	b510      	push	{r4, lr}
   26c12:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_sec(key_sec, ble_store_config_peer_secs,
   26c14:	4b0a      	ldr	r3, [pc, #40]	; (26c40 <ble_store_config_read_peer_sec+0x30>)
   26c16:	681a      	ldr	r2, [r3, #0]
   26c18:	490a      	ldr	r1, [pc, #40]	; (26c44 <ble_store_config_read_peer_sec+0x34>)
   26c1a:	f7ff ffaf 	bl	26b7c <ble_store_config_find_sec>
                             ble_store_config_num_peer_secs);
    if (idx == -1) {
   26c1e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26c22:	d00a      	beq.n	26c3a <ble_store_config_read_peer_sec+0x2a>
        return BLE_HS_ENOENT;
    }

    *value_sec = ble_store_config_peer_secs[idx];
   26c24:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26c28:	0103      	lsls	r3, r0, #4
   26c2a:	2250      	movs	r2, #80	; 0x50
   26c2c:	4905      	ldr	r1, [pc, #20]	; (26c44 <ble_store_config_read_peer_sec+0x34>)
   26c2e:	4419      	add	r1, r3
   26c30:	4620      	mov	r0, r4
   26c32:	f7e4 fdbb 	bl	b7ac <memcpy>
    return 0;
   26c36:	2000      	movs	r0, #0
}
   26c38:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   26c3a:	2005      	movs	r0, #5
   26c3c:	e7fc      	b.n	26c38 <ble_store_config_read_peer_sec+0x28>
   26c3e:	bf00      	nop
   26c40:	200092d8 	.word	0x200092d8
   26c44:	200093d0 	.word	0x200093d0

00026c48 <ble_store_config_read_our_sec>:
{
   26c48:	b510      	push	{r4, lr}
   26c4a:	460c      	mov	r4, r1
    idx = ble_store_config_find_sec(key_sec, ble_store_config_our_secs,
   26c4c:	4b0a      	ldr	r3, [pc, #40]	; (26c78 <ble_store_config_read_our_sec+0x30>)
   26c4e:	681a      	ldr	r2, [r3, #0]
   26c50:	490a      	ldr	r1, [pc, #40]	; (26c7c <ble_store_config_read_our_sec+0x34>)
   26c52:	f7ff ff93 	bl	26b7c <ble_store_config_find_sec>
    if (idx == -1) {
   26c56:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26c5a:	d00a      	beq.n	26c72 <ble_store_config_read_our_sec+0x2a>
    *value_sec = ble_store_config_our_secs[idx];
   26c5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26c60:	0103      	lsls	r3, r0, #4
   26c62:	2250      	movs	r2, #80	; 0x50
   26c64:	4905      	ldr	r1, [pc, #20]	; (26c7c <ble_store_config_read_our_sec+0x34>)
   26c66:	4419      	add	r1, r3
   26c68:	4620      	mov	r0, r4
   26c6a:	f7e4 fd9f 	bl	b7ac <memcpy>
    return 0;
   26c6e:	2000      	movs	r0, #0
}
   26c70:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   26c72:	2005      	movs	r0, #5
   26c74:	e7fc      	b.n	26c70 <ble_store_config_read_our_sec+0x28>
   26c76:	bf00      	nop
   26c78:	200092d4 	.word	0x200092d4
   26c7c:	200092e0 	.word	0x200092e0

00026c80 <ble_store_config_find_cccd>:
 * $cccd                                                                     *
 *****************************************************************************/

static int
ble_store_config_find_cccd(const struct ble_store_key_cccd *key)
{
   26c80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26c84:	b082      	sub	sp, #8
   26c86:	4605      	mov	r5, r0
    struct ble_store_value_cccd *cccd;
    int skipped;
    int i;

    skipped = 0;
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   26c88:	2400      	movs	r4, #0
    skipped = 0;
   26c8a:	46a0      	mov	r8, r4
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   26c8c:	e004      	b.n	26c98 <ble_store_config_find_cccd+0x18>
        return type_diff;
   26c8e:	4630      	mov	r0, r6
   26c90:	e019      	b.n	26cc6 <ble_store_config_find_cccd+0x46>
                continue;
            }
        }

        if (key->idx > skipped) {
            skipped++;
   26c92:	f108 0801 	add.w	r8, r8, #1
    for (i = 0; i < ble_store_config_num_cccds; i++) {
   26c96:	3401      	adds	r4, #1
   26c98:	4b18      	ldr	r3, [pc, #96]	; (26cfc <ble_store_config_find_cccd+0x7c>)
   26c9a:	681b      	ldr	r3, [r3, #0]
   26c9c:	42a3      	cmp	r3, r4
   26c9e:	dd2a      	ble.n	26cf6 <ble_store_config_find_cccd+0x76>
        cccd = ble_store_config_cccds + i;
   26ca0:	ea4f 1904 	mov.w	r9, r4, lsl #4
   26ca4:	f8df a058 	ldr.w	sl, [pc, #88]	; 26d00 <ble_store_config_find_cccd+0x80>
   26ca8:	eb0a 0709 	add.w	r7, sl, r9
        if (ble_addr_cmp(&key->peer_addr, BLE_ADDR_ANY)) {
   26cac:	2300      	movs	r3, #0
   26cae:	9300      	str	r3, [sp, #0]
   26cb0:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   26cb4:	782e      	ldrb	r6, [r5, #0]
    if (type_diff != 0) {
   26cb6:	2e00      	cmp	r6, #0
   26cb8:	d1e9      	bne.n	26c8e <ble_store_config_find_cccd+0xe>
    return memcmp(a->val, b->val, sizeof(a->val));
   26cba:	2206      	movs	r2, #6
   26cbc:	f10d 0101 	add.w	r1, sp, #1
   26cc0:	1c68      	adds	r0, r5, #1
   26cc2:	f7e4 fd4f 	bl	b764 <memcmp>
   26cc6:	b150      	cbz	r0, 26cde <ble_store_config_find_cccd+0x5e>
    type_diff = a->type - b->type;
   26cc8:	f81a 0009 	ldrb.w	r0, [sl, r9]
    if (type_diff != 0) {
   26ccc:	1b80      	subs	r0, r0, r6
   26cce:	d104      	bne.n	26cda <ble_store_config_find_cccd+0x5a>
    return memcmp(a->val, b->val, sizeof(a->val));
   26cd0:	2206      	movs	r2, #6
   26cd2:	1c69      	adds	r1, r5, #1
   26cd4:	1c78      	adds	r0, r7, #1
   26cd6:	f7e4 fd45 	bl	b764 <memcmp>
            if (ble_addr_cmp(&cccd->peer_addr, &key->peer_addr)) {
   26cda:	2800      	cmp	r0, #0
   26cdc:	d1db      	bne.n	26c96 <ble_store_config_find_cccd+0x16>
        if (key->chr_val_handle != 0) {
   26cde:	892b      	ldrh	r3, [r5, #8]
   26ce0:	b113      	cbz	r3, 26ce8 <ble_store_config_find_cccd+0x68>
            if (cccd->chr_val_handle != key->chr_val_handle) {
   26ce2:	893a      	ldrh	r2, [r7, #8]
   26ce4:	4293      	cmp	r3, r2
   26ce6:	d1d6      	bne.n	26c96 <ble_store_config_find_cccd+0x16>
        if (key->idx > skipped) {
   26ce8:	7aab      	ldrb	r3, [r5, #10]
   26cea:	4543      	cmp	r3, r8
   26cec:	dcd1      	bgt.n	26c92 <ble_store_config_find_cccd+0x12>

        return i;
    }

    return -1;
}
   26cee:	4620      	mov	r0, r4
   26cf0:	b002      	add	sp, #8
   26cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return -1;
   26cf6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   26cfa:	e7f8      	b.n	26cee <ble_store_config_find_cccd+0x6e>
   26cfc:	200092d0 	.word	0x200092d0
   26d00:	20009250 	.word	0x20009250

00026d04 <ble_store_config_read_cccd>:
}

static int
ble_store_config_read_cccd(const struct ble_store_key_cccd *key_cccd,
                           struct ble_store_value_cccd *value_cccd)
{
   26d04:	b510      	push	{r4, lr}
   26d06:	460c      	mov	r4, r1
    int idx;

    idx = ble_store_config_find_cccd(key_cccd);
   26d08:	f7ff ffba 	bl	26c80 <ble_store_config_find_cccd>
    if (idx == -1) {
   26d0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26d10:	d007      	beq.n	26d22 <ble_store_config_read_cccd+0x1e>
        return BLE_HS_ENOENT;
    }

    *value_cccd = ble_store_config_cccds[idx];
   26d12:	4b05      	ldr	r3, [pc, #20]	; (26d28 <ble_store_config_read_cccd+0x24>)
   26d14:	eb03 1000 	add.w	r0, r3, r0, lsl #4
   26d18:	c80f      	ldmia	r0, {r0, r1, r2, r3}
   26d1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return 0;
   26d1e:	2000      	movs	r0, #0
}
   26d20:	bd10      	pop	{r4, pc}
        return BLE_HS_ENOENT;
   26d22:	2005      	movs	r0, #5
   26d24:	e7fc      	b.n	26d20 <ble_store_config_read_cccd+0x1c>
   26d26:	bf00      	nop
   26d28:	20009250 	.word	0x20009250

00026d2c <ble_store_config_print_key_sec>:
{
   26d2c:	b510      	push	{r4, lr}
   26d2e:	b082      	sub	sp, #8
   26d30:	4604      	mov	r4, r0
    if (ble_addr_cmp(&key_sec->peer_addr, BLE_ADDR_ANY)) {
   26d32:	2300      	movs	r3, #0
   26d34:	9300      	str	r3, [sp, #0]
   26d36:	f8cd 3003 	str.w	r3, [sp, #3]
    type_diff = a->type - b->type;
   26d3a:	7800      	ldrb	r0, [r0, #0]
    if (type_diff != 0) {
   26d3c:	b928      	cbnz	r0, 26d4a <ble_store_config_print_key_sec+0x1e>
    return memcmp(a->val, b->val, sizeof(a->val));
   26d3e:	2206      	movs	r2, #6
   26d40:	f10d 0101 	add.w	r1, sp, #1
   26d44:	1c60      	adds	r0, r4, #1
   26d46:	f7e4 fd0d 	bl	b764 <memcmp>
   26d4a:	b908      	cbnz	r0, 26d50 <ble_store_config_print_key_sec+0x24>
}
   26d4c:	b002      	add	sp, #8
   26d4e:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(key_sec->peer_addr.val, 6);
   26d50:	2106      	movs	r1, #6
   26d52:	1c60      	adds	r0, r4, #1
   26d54:	f7ea fbec 	bl	11530 <ble_hs_log_flat_buf>
}
   26d58:	e7f8      	b.n	26d4c <ble_store_config_print_key_sec+0x20>

00026d5a <ble_store_config_read>:
 * @return                      0 if a key was found; else BLE_HS_ENOENT.
 */
int
ble_store_config_read(int obj_type, const union ble_store_key *key,
                      union ble_store_value *value)
{
   26d5a:	b538      	push	{r3, r4, r5, lr}
   26d5c:	460c      	mov	r4, r1
   26d5e:	4615      	mov	r5, r2
    int rc;

    switch (obj_type) {
   26d60:	2802      	cmp	r0, #2
   26d62:	d005      	beq.n	26d70 <ble_store_config_read+0x16>
   26d64:	2803      	cmp	r0, #3
   26d66:	d013      	beq.n	26d90 <ble_store_config_read+0x36>
   26d68:	2801      	cmp	r0, #1
   26d6a:	d009      	beq.n	26d80 <ble_store_config_read+0x26>
    case BLE_STORE_OBJ_TYPE_CCCD:
        rc = ble_store_config_read_cccd(&key->cccd, &value->cccd);
        return rc;

    default:
        return BLE_HS_ENOTSUP;
   26d6c:	2008      	movs	r0, #8
   26d6e:	e006      	b.n	26d7e <ble_store_config_read+0x24>
        ble_store_config_print_key_sec(&key->sec);
   26d70:	4608      	mov	r0, r1
   26d72:	f7ff ffdb 	bl	26d2c <ble_store_config_print_key_sec>
        rc = ble_store_config_read_peer_sec(&key->sec, &value->sec);
   26d76:	4629      	mov	r1, r5
   26d78:	4620      	mov	r0, r4
   26d7a:	f7ff ff49 	bl	26c10 <ble_store_config_read_peer_sec>
    }
}
   26d7e:	bd38      	pop	{r3, r4, r5, pc}
        ble_store_config_print_key_sec(&key->sec);
   26d80:	4608      	mov	r0, r1
   26d82:	f7ff ffd3 	bl	26d2c <ble_store_config_print_key_sec>
        rc = ble_store_config_read_our_sec(&key->sec, &value->sec);
   26d86:	4629      	mov	r1, r5
   26d88:	4620      	mov	r0, r4
   26d8a:	f7ff ff5d 	bl	26c48 <ble_store_config_read_our_sec>
        return rc;
   26d8e:	e7f6      	b.n	26d7e <ble_store_config_read+0x24>
        rc = ble_store_config_read_cccd(&key->cccd, &value->cccd);
   26d90:	4611      	mov	r1, r2
   26d92:	4620      	mov	r0, r4
   26d94:	f7ff ffb6 	bl	26d04 <ble_store_config_read_cccd>
        return rc;
   26d98:	e7f1      	b.n	26d7e <ble_store_config_read+0x24>

00026d9a <ble_store_config_print_value_sec>:
{
   26d9a:	b510      	push	{r4, lr}
   26d9c:	4604      	mov	r4, r0
    if (sec->ltk_present) {
   26d9e:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
   26da2:	f013 0f01 	tst.w	r3, #1
   26da6:	d10a      	bne.n	26dbe <ble_store_config_print_value_sec+0x24>
    if (sec->irk_present) {
   26da8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   26dac:	f013 0f01 	tst.w	r3, #1
   26db0:	d10a      	bne.n	26dc8 <ble_store_config_print_value_sec+0x2e>
    if (sec->csrk_present) {
   26db2:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
   26db6:	f013 0f01 	tst.w	r3, #1
   26dba:	d10b      	bne.n	26dd4 <ble_store_config_print_value_sec+0x3a>
}
   26dbc:	bd10      	pop	{r4, pc}
        ble_hs_log_flat_buf(sec->ltk, 16);
   26dbe:	2110      	movs	r1, #16
   26dc0:	3018      	adds	r0, #24
   26dc2:	f7ea fbb5 	bl	11530 <ble_hs_log_flat_buf>
   26dc6:	e7ef      	b.n	26da8 <ble_store_config_print_value_sec+0xe>
        ble_hs_log_flat_buf(sec->irk, 16);
   26dc8:	2110      	movs	r1, #16
   26dca:	f104 0029 	add.w	r0, r4, #41	; 0x29
   26dce:	f7ea fbaf 	bl	11530 <ble_hs_log_flat_buf>
   26dd2:	e7ee      	b.n	26db2 <ble_store_config_print_value_sec+0x18>
        ble_hs_log_flat_buf(sec->csrk, 16);
   26dd4:	2110      	movs	r1, #16
   26dd6:	f104 003a 	add.w	r0, r4, #58	; 0x3a
   26dda:	f7ea fba9 	bl	11530 <ble_hs_log_flat_buf>
}
   26dde:	e7ed      	b.n	26dbc <ble_store_config_print_value_sec+0x22>

00026de0 <ble_store_config_write_peer_sec>:
{
   26de0:	b530      	push	{r4, r5, lr}
   26de2:	b089      	sub	sp, #36	; 0x24
   26de4:	4605      	mov	r5, r0
    ble_store_config_print_value_sec(value_sec);
   26de6:	f7ff ffd8 	bl	26d9a <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   26dea:	4629      	mov	r1, r5
   26dec:	4668      	mov	r0, sp
   26dee:	f7ed f9c9 	bl	14184 <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_peer_secs,
   26df2:	4b0f      	ldr	r3, [pc, #60]	; (26e30 <ble_store_config_write_peer_sec+0x50>)
   26df4:	681c      	ldr	r4, [r3, #0]
   26df6:	4622      	mov	r2, r4
   26df8:	490e      	ldr	r1, [pc, #56]	; (26e34 <ble_store_config_write_peer_sec+0x54>)
   26dfa:	4668      	mov	r0, sp
   26dfc:	f7ff febe 	bl	26b7c <ble_store_config_find_sec>
    if (idx == -1) {
   26e00:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26e04:	d105      	bne.n	26e12 <ble_store_config_write_peer_sec+0x32>
        if (ble_store_config_num_peer_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   26e06:	2c02      	cmp	r4, #2
   26e08:	dc10      	bgt.n	26e2c <ble_store_config_write_peer_sec+0x4c>
        ble_store_config_num_peer_secs++;
   26e0a:	1c62      	adds	r2, r4, #1
   26e0c:	4b08      	ldr	r3, [pc, #32]	; (26e30 <ble_store_config_write_peer_sec+0x50>)
   26e0e:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_peer_secs;
   26e10:	4620      	mov	r0, r4
    ble_store_config_peer_secs[idx] = *value_sec;
   26e12:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26e16:	0103      	lsls	r3, r0, #4
   26e18:	2250      	movs	r2, #80	; 0x50
   26e1a:	4629      	mov	r1, r5
   26e1c:	4805      	ldr	r0, [pc, #20]	; (26e34 <ble_store_config_write_peer_sec+0x54>)
   26e1e:	4418      	add	r0, r3
   26e20:	f7e4 fcc4 	bl	b7ac <memcpy>
    rc = ble_store_config_persist_peer_secs();
   26e24:	f000 f9da 	bl	271dc <ble_store_config_persist_peer_secs>
}
   26e28:	b009      	add	sp, #36	; 0x24
   26e2a:	bd30      	pop	{r4, r5, pc}
            return BLE_HS_ESTORE_CAP;
   26e2c:	201b      	movs	r0, #27
   26e2e:	e7fb      	b.n	26e28 <ble_store_config_write_peer_sec+0x48>
   26e30:	200092d8 	.word	0x200092d8
   26e34:	200093d0 	.word	0x200093d0

00026e38 <ble_store_config_write_our_sec>:
{
   26e38:	b530      	push	{r4, r5, lr}
   26e3a:	b089      	sub	sp, #36	; 0x24
   26e3c:	4605      	mov	r5, r0
    ble_store_config_print_value_sec(value_sec);
   26e3e:	f7ff ffac 	bl	26d9a <ble_store_config_print_value_sec>
    ble_store_key_from_value_sec(&key_sec, value_sec);
   26e42:	4629      	mov	r1, r5
   26e44:	4668      	mov	r0, sp
   26e46:	f7ed f99d 	bl	14184 <ble_store_key_from_value_sec>
    idx = ble_store_config_find_sec(&key_sec, ble_store_config_our_secs,
   26e4a:	4b0f      	ldr	r3, [pc, #60]	; (26e88 <ble_store_config_write_our_sec+0x50>)
   26e4c:	681c      	ldr	r4, [r3, #0]
   26e4e:	4622      	mov	r2, r4
   26e50:	490e      	ldr	r1, [pc, #56]	; (26e8c <ble_store_config_write_our_sec+0x54>)
   26e52:	4668      	mov	r0, sp
   26e54:	f7ff fe92 	bl	26b7c <ble_store_config_find_sec>
    if (idx == -1) {
   26e58:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26e5c:	d105      	bne.n	26e6a <ble_store_config_write_our_sec+0x32>
        if (ble_store_config_num_our_secs >= MYNEWT_VAL(BLE_STORE_MAX_BONDS)) {
   26e5e:	2c02      	cmp	r4, #2
   26e60:	dc10      	bgt.n	26e84 <ble_store_config_write_our_sec+0x4c>
        ble_store_config_num_our_secs++;
   26e62:	1c62      	adds	r2, r4, #1
   26e64:	4b08      	ldr	r3, [pc, #32]	; (26e88 <ble_store_config_write_our_sec+0x50>)
   26e66:	601a      	str	r2, [r3, #0]
        idx = ble_store_config_num_our_secs;
   26e68:	4620      	mov	r0, r4
    ble_store_config_our_secs[idx] = *value_sec;
   26e6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   26e6e:	0103      	lsls	r3, r0, #4
   26e70:	2250      	movs	r2, #80	; 0x50
   26e72:	4629      	mov	r1, r5
   26e74:	4805      	ldr	r0, [pc, #20]	; (26e8c <ble_store_config_write_our_sec+0x54>)
   26e76:	4418      	add	r0, r3
   26e78:	f7e4 fc98 	bl	b7ac <memcpy>
    rc = ble_store_config_persist_our_secs();
   26e7c:	f000 f9a0 	bl	271c0 <ble_store_config_persist_our_secs>
}
   26e80:	b009      	add	sp, #36	; 0x24
   26e82:	bd30      	pop	{r4, r5, pc}
            return BLE_HS_ESTORE_CAP;
   26e84:	201b      	movs	r0, #27
   26e86:	e7fb      	b.n	26e80 <ble_store_config_write_our_sec+0x48>
   26e88:	200092d4 	.word	0x200092d4
   26e8c:	200092e0 	.word	0x200092e0

00026e90 <ble_store_config_write_cccd>:
{
   26e90:	b530      	push	{r4, r5, lr}
   26e92:	b085      	sub	sp, #20
   26e94:	4605      	mov	r5, r0
    ble_store_key_from_value_cccd(&key_cccd, value_cccd);
   26e96:	4601      	mov	r1, r0
   26e98:	a801      	add	r0, sp, #4
   26e9a:	f7ed f964 	bl	14166 <ble_store_key_from_value_cccd>
    idx = ble_store_config_find_cccd(&key_cccd);
   26e9e:	a801      	add	r0, sp, #4
   26ea0:	f7ff feee 	bl	26c80 <ble_store_config_find_cccd>
    if (idx == -1) {
   26ea4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26ea8:	d106      	bne.n	26eb8 <ble_store_config_write_cccd+0x28>
        if (ble_store_config_num_cccds >= MYNEWT_VAL(BLE_STORE_MAX_CCCDS)) {
   26eaa:	4b0a      	ldr	r3, [pc, #40]	; (26ed4 <ble_store_config_write_cccd+0x44>)
   26eac:	6818      	ldr	r0, [r3, #0]
   26eae:	2807      	cmp	r0, #7
   26eb0:	dc0d      	bgt.n	26ece <ble_store_config_write_cccd+0x3e>
        ble_store_config_num_cccds++;
   26eb2:	1c43      	adds	r3, r0, #1
   26eb4:	4a07      	ldr	r2, [pc, #28]	; (26ed4 <ble_store_config_write_cccd+0x44>)
   26eb6:	6013      	str	r3, [r2, #0]
    ble_store_config_cccds[idx] = *value_cccd;
   26eb8:	4c07      	ldr	r4, [pc, #28]	; (26ed8 <ble_store_config_write_cccd+0x48>)
   26eba:	eb04 1400 	add.w	r4, r4, r0, lsl #4
   26ebe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   26ec2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    rc = ble_store_config_persist_cccds();
   26ec6:	f000 f997 	bl	271f8 <ble_store_config_persist_cccds>
}
   26eca:	b005      	add	sp, #20
   26ecc:	bd30      	pop	{r4, r5, pc}
            return BLE_HS_ESTORE_CAP;
   26ece:	201b      	movs	r0, #27
   26ed0:	e7fb      	b.n	26eca <ble_store_config_write_cccd+0x3a>
   26ed2:	bf00      	nop
   26ed4:	200092d0 	.word	0x200092d0
   26ed8:	20009250 	.word	0x20009250

00026edc <ble_store_config_write>:
 * @return                      0 on success;
 *                              BLE_HS_ESTORE_CAP if the database is full.
 */
int
ble_store_config_write(int obj_type, const union ble_store_value *val)
{
   26edc:	b508      	push	{r3, lr}
    int rc;

    switch (obj_type) {
   26ede:	2802      	cmp	r0, #2
   26ee0:	d005      	beq.n	26eee <ble_store_config_write+0x12>
   26ee2:	2803      	cmp	r0, #3
   26ee4:	d00b      	beq.n	26efe <ble_store_config_write+0x22>
   26ee6:	2801      	cmp	r0, #1
   26ee8:	d005      	beq.n	26ef6 <ble_store_config_write+0x1a>
    case BLE_STORE_OBJ_TYPE_CCCD:
        rc = ble_store_config_write_cccd(&val->cccd);
        return rc;

    default:
        return BLE_HS_ENOTSUP;
   26eea:	2008      	movs	r0, #8
   26eec:	e002      	b.n	26ef4 <ble_store_config_write+0x18>
        rc = ble_store_config_write_peer_sec(&val->sec);
   26eee:	4608      	mov	r0, r1
   26ef0:	f7ff ff76 	bl	26de0 <ble_store_config_write_peer_sec>
    }
}
   26ef4:	bd08      	pop	{r3, pc}
        rc = ble_store_config_write_our_sec(&val->sec);
   26ef6:	4608      	mov	r0, r1
   26ef8:	f7ff ff9e 	bl	26e38 <ble_store_config_write_our_sec>
        return rc;
   26efc:	e7fa      	b.n	26ef4 <ble_store_config_write+0x18>
        rc = ble_store_config_write_cccd(&val->cccd);
   26efe:	4608      	mov	r0, r1
   26f00:	f7ff ffc6 	bl	26e90 <ble_store_config_write_cccd>
        return rc;
   26f04:	e7f6      	b.n	26ef4 <ble_store_config_write+0x18>

00026f06 <ble_store_config_delete_obj>:
{
   26f06:	b510      	push	{r4, lr}
    (*num_values)--;
   26f08:	681c      	ldr	r4, [r3, #0]
   26f0a:	3c01      	subs	r4, #1
   26f0c:	601c      	str	r4, [r3, #0]
    if (idx < *num_values) {
   26f0e:	4294      	cmp	r4, r2
   26f10:	dc01      	bgt.n	26f16 <ble_store_config_delete_obj+0x10>
}
   26f12:	2000      	movs	r0, #0
   26f14:	bd10      	pop	{r4, pc}
        dst += idx * value_size;
   26f16:	fb01 0002 	mla	r0, r1, r2, r0
        move_count = *num_values - idx;
   26f1a:	1aa2      	subs	r2, r4, r2
        memmove(dst, src, move_count * value_size);
   26f1c:	fb02 f201 	mul.w	r2, r2, r1
   26f20:	4401      	add	r1, r0
   26f22:	f7e4 fc50 	bl	b7c6 <memmove>
   26f26:	e7f4      	b.n	26f12 <ble_store_config_delete_obj+0xc>

00026f28 <ble_store_config_delete_sec>:
{
   26f28:	b538      	push	{r3, r4, r5, lr}
   26f2a:	460d      	mov	r5, r1
   26f2c:	4614      	mov	r4, r2
    idx = ble_store_config_find_sec(key_sec, value_secs, *num_value_secs);
   26f2e:	6812      	ldr	r2, [r2, #0]
   26f30:	f7ff fe24 	bl	26b7c <ble_store_config_find_sec>
    if (idx == -1) {
   26f34:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26f38:	d006      	beq.n	26f48 <ble_store_config_delete_sec+0x20>
    rc = ble_store_config_delete_obj(value_secs, sizeof *value_secs, idx,
   26f3a:	4623      	mov	r3, r4
   26f3c:	4602      	mov	r2, r0
   26f3e:	2150      	movs	r1, #80	; 0x50
   26f40:	4628      	mov	r0, r5
   26f42:	f7ff ffe0 	bl	26f06 <ble_store_config_delete_obj>
}
   26f46:	bd38      	pop	{r3, r4, r5, pc}
        return BLE_HS_ENOENT;
   26f48:	2005      	movs	r0, #5
   26f4a:	e7fc      	b.n	26f46 <ble_store_config_delete_sec+0x1e>

00026f4c <ble_store_config_delete_peer_sec>:
{
   26f4c:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_peer_secs,
   26f4e:	4a06      	ldr	r2, [pc, #24]	; (26f68 <ble_store_config_delete_peer_sec+0x1c>)
   26f50:	4906      	ldr	r1, [pc, #24]	; (26f6c <ble_store_config_delete_peer_sec+0x20>)
   26f52:	f7ff ffe9 	bl	26f28 <ble_store_config_delete_sec>
    if (rc != 0) {
   26f56:	4603      	mov	r3, r0
   26f58:	b108      	cbz	r0, 26f5e <ble_store_config_delete_peer_sec+0x12>
}
   26f5a:	4618      	mov	r0, r3
   26f5c:	bd08      	pop	{r3, pc}
    rc = ble_store_config_persist_peer_secs();
   26f5e:	f000 f93d 	bl	271dc <ble_store_config_persist_peer_secs>
   26f62:	4603      	mov	r3, r0
   26f64:	e7f9      	b.n	26f5a <ble_store_config_delete_peer_sec+0xe>
   26f66:	bf00      	nop
   26f68:	200092d8 	.word	0x200092d8
   26f6c:	200093d0 	.word	0x200093d0

00026f70 <ble_store_config_delete_our_sec>:
{
   26f70:	b508      	push	{r3, lr}
    rc = ble_store_config_delete_sec(key_sec, ble_store_config_our_secs,
   26f72:	4a06      	ldr	r2, [pc, #24]	; (26f8c <ble_store_config_delete_our_sec+0x1c>)
   26f74:	4906      	ldr	r1, [pc, #24]	; (26f90 <ble_store_config_delete_our_sec+0x20>)
   26f76:	f7ff ffd7 	bl	26f28 <ble_store_config_delete_sec>
    if (rc != 0) {
   26f7a:	4603      	mov	r3, r0
   26f7c:	b108      	cbz	r0, 26f82 <ble_store_config_delete_our_sec+0x12>
}
   26f7e:	4618      	mov	r0, r3
   26f80:	bd08      	pop	{r3, pc}
    rc = ble_store_config_persist_our_secs();
   26f82:	f000 f91d 	bl	271c0 <ble_store_config_persist_our_secs>
   26f86:	4603      	mov	r3, r0
   26f88:	e7f9      	b.n	26f7e <ble_store_config_delete_our_sec+0xe>
   26f8a:	bf00      	nop
   26f8c:	200092d4 	.word	0x200092d4
   26f90:	200092e0 	.word	0x200092e0

00026f94 <ble_store_config_delete_cccd>:
{
   26f94:	b508      	push	{r3, lr}
    idx = ble_store_config_find_cccd(key_cccd);
   26f96:	f7ff fe73 	bl	26c80 <ble_store_config_find_cccd>
    if (idx == -1) {
   26f9a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26f9e:	d00d      	beq.n	26fbc <ble_store_config_delete_cccd+0x28>
    rc = ble_store_config_delete_obj(ble_store_config_cccds,
   26fa0:	4b07      	ldr	r3, [pc, #28]	; (26fc0 <ble_store_config_delete_cccd+0x2c>)
   26fa2:	4602      	mov	r2, r0
   26fa4:	2110      	movs	r1, #16
   26fa6:	4807      	ldr	r0, [pc, #28]	; (26fc4 <ble_store_config_delete_cccd+0x30>)
   26fa8:	f7ff ffad 	bl	26f06 <ble_store_config_delete_obj>
    if (rc != 0) {
   26fac:	4603      	mov	r3, r0
   26fae:	b108      	cbz	r0, 26fb4 <ble_store_config_delete_cccd+0x20>
}
   26fb0:	4618      	mov	r0, r3
   26fb2:	bd08      	pop	{r3, pc}
    rc = ble_store_config_persist_cccds();
   26fb4:	f000 f920 	bl	271f8 <ble_store_config_persist_cccds>
   26fb8:	4603      	mov	r3, r0
   26fba:	e7f9      	b.n	26fb0 <ble_store_config_delete_cccd+0x1c>
        return BLE_HS_ENOENT;
   26fbc:	2305      	movs	r3, #5
   26fbe:	e7f7      	b.n	26fb0 <ble_store_config_delete_cccd+0x1c>
   26fc0:	200092d0 	.word	0x200092d0
   26fc4:	20009250 	.word	0x20009250

00026fc8 <ble_store_config_delete>:

int
ble_store_config_delete(int obj_type, const union ble_store_key *key)
{
   26fc8:	b508      	push	{r3, lr}
    int rc;

    switch (obj_type) {
   26fca:	2802      	cmp	r0, #2
   26fcc:	d005      	beq.n	26fda <ble_store_config_delete+0x12>
   26fce:	2803      	cmp	r0, #3
   26fd0:	d00b      	beq.n	26fea <ble_store_config_delete+0x22>
   26fd2:	2801      	cmp	r0, #1
   26fd4:	d005      	beq.n	26fe2 <ble_store_config_delete+0x1a>
    case BLE_STORE_OBJ_TYPE_CCCD:
        rc = ble_store_config_delete_cccd(&key->cccd);
        return rc;

    default:
        return BLE_HS_ENOTSUP;
   26fd6:	2008      	movs	r0, #8
   26fd8:	e002      	b.n	26fe0 <ble_store_config_delete+0x18>
        rc = ble_store_config_delete_peer_sec(&key->sec);
   26fda:	4608      	mov	r0, r1
   26fdc:	f7ff ffb6 	bl	26f4c <ble_store_config_delete_peer_sec>
    }
}
   26fe0:	bd08      	pop	{r3, pc}
        rc = ble_store_config_delete_our_sec(&key->sec);
   26fe2:	4608      	mov	r0, r1
   26fe4:	f7ff ffc4 	bl	26f70 <ble_store_config_delete_our_sec>
        return rc;
   26fe8:	e7fa      	b.n	26fe0 <ble_store_config_delete+0x18>
        rc = ble_store_config_delete_cccd(&key->cccd);
   26fea:	4608      	mov	r0, r1
   26fec:	f7ff ffd2 	bl	26f94 <ble_store_config_delete_cccd>
        return rc;
   26ff0:	e7f6      	b.n	26fe0 <ble_store_config_delete+0x18>
	...

00026ff4 <ble_store_config_init>:

void
ble_store_config_init(void)
{
   26ff4:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   26ff6:	4b0f      	ldr	r3, [pc, #60]	; (27034 <ble_store_config_init+0x40>)
   26ff8:	781b      	ldrb	r3, [r3, #0]
   26ffa:	b183      	cbz	r3, 2701e <ble_store_config_init+0x2a>

    ble_hs_cfg.store_read_cb = ble_store_config_read;
   26ffc:	4b0e      	ldr	r3, [pc, #56]	; (27038 <ble_store_config_init+0x44>)
   26ffe:	4a0f      	ldr	r2, [pc, #60]	; (2703c <ble_store_config_init+0x48>)
   27000:	615a      	str	r2, [r3, #20]
    ble_hs_cfg.store_write_cb = ble_store_config_write;
   27002:	4a0f      	ldr	r2, [pc, #60]	; (27040 <ble_store_config_init+0x4c>)
   27004:	619a      	str	r2, [r3, #24]
    ble_hs_cfg.store_delete_cb = ble_store_config_delete;
   27006:	4a0f      	ldr	r2, [pc, #60]	; (27044 <ble_store_config_init+0x50>)
   27008:	61da      	str	r2, [r3, #28]

    /* Re-initialize BSS values in case of unit tests. */
    ble_store_config_num_our_secs = 0;
   2700a:	2300      	movs	r3, #0
   2700c:	4a0e      	ldr	r2, [pc, #56]	; (27048 <ble_store_config_init+0x54>)
   2700e:	6013      	str	r3, [r2, #0]
    ble_store_config_num_peer_secs = 0;
   27010:	4a0e      	ldr	r2, [pc, #56]	; (2704c <ble_store_config_init+0x58>)
   27012:	6013      	str	r3, [r2, #0]
    ble_store_config_num_cccds = 0;
   27014:	4a0e      	ldr	r2, [pc, #56]	; (27050 <ble_store_config_init+0x5c>)
   27016:	6013      	str	r3, [r2, #0]

    ble_store_config_conf_init();
   27018:	f000 f90c 	bl	27234 <ble_store_config_conf_init>
}
   2701c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   2701e:	f7e1 f8cf 	bl	81c0 <hal_debugger_connected>
   27022:	b100      	cbz	r0, 27026 <ble_store_config_init+0x32>
   27024:	be01      	bkpt	0x0001
   27026:	2300      	movs	r3, #0
   27028:	461a      	mov	r2, r3
   2702a:	4619      	mov	r1, r3
   2702c:	4618      	mov	r0, r3
   2702e:	f7e2 fc5d 	bl	98ec <__assert_func>
   27032:	bf00      	nop
   27034:	20000506 	.word	0x20000506
   27038:	2000017c 	.word	0x2000017c
   2703c:	00026d5b 	.word	0x00026d5b
   27040:	00026edd 	.word	0x00026edd
   27044:	00026fc9 	.word	0x00026fc9
   27048:	200092d4 	.word	0x200092d4
   2704c:	200092d8 	.word	0x200092d8
   27050:	200092d0 	.word	0x200092d0

00027054 <ble_store_config_serialize_arr>:
    (MYNEWT_VAL(BLE_STORE_MAX_CCCDS) * BLE_STORE_CONFIG_CCCD_ENCODE_SZ + 1)

static void
ble_store_config_serialize_arr(const void *arr, int obj_sz, int num_objs,
                               char *out_buf, int buf_sz)
{
   27054:	b510      	push	{r4, lr}
   27056:	461c      	mov	r4, r3
    int arr_size;

    arr_size = obj_sz * num_objs;
   27058:	fb02 f101 	mul.w	r1, r2, r1
    assert(arr_size <= buf_sz);
   2705c:	9b02      	ldr	r3, [sp, #8]
   2705e:	4299      	cmp	r1, r3
   27060:	dc04      	bgt.n	2706c <ble_store_config_serialize_arr+0x18>

    base64_encode(arr, arr_size, out_buf, 1);
   27062:	2301      	movs	r3, #1
   27064:	4622      	mov	r2, r4
   27066:	f7f1 ff8b 	bl	18f80 <base64_encode>
}
   2706a:	bd10      	pop	{r4, pc}
    assert(arr_size <= buf_sz);
   2706c:	f7e1 f8a8 	bl	81c0 <hal_debugger_connected>
   27070:	b100      	cbz	r0, 27074 <ble_store_config_serialize_arr+0x20>
   27072:	be01      	bkpt	0x0001
   27074:	2300      	movs	r3, #0
   27076:	461a      	mov	r2, r3
   27078:	4619      	mov	r1, r3
   2707a:	4618      	mov	r0, r3
   2707c:	f7e2 fc36 	bl	98ec <__assert_func>

00027080 <ble_store_config_persist_sec_set>:

static int
ble_store_config_persist_sec_set(const char *setting_name,
                                 const struct ble_store_value_sec *secs,
                                 int num_secs)
{
   27080:	b510      	push	{r4, lr}
   27082:	b0d4      	sub	sp, #336	; 0x150
   27084:	4604      	mov	r4, r0
   27086:	4608      	mov	r0, r1
    char buf[BLE_STORE_CONFIG_SEC_SET_ENCODE_SZ];
    int rc;

    ble_store_config_serialize_arr(secs, sizeof *secs, num_secs,
   27088:	f240 1345 	movw	r3, #325	; 0x145
   2708c:	9300      	str	r3, [sp, #0]
   2708e:	ab02      	add	r3, sp, #8
   27090:	2150      	movs	r1, #80	; 0x50
   27092:	f7ff ffdf 	bl	27054 <ble_store_config_serialize_arr>
                                   buf, sizeof buf);
    rc = conf_save_one(setting_name, buf);
   27096:	a902      	add	r1, sp, #8
   27098:	4620      	mov	r0, r4
   2709a:	f7ef fb85 	bl	167a8 <conf_save_one>
    if (rc != 0) {
   2709e:	4603      	mov	r3, r0
   270a0:	b910      	cbnz	r0, 270a8 <ble_store_config_persist_sec_set+0x28>
        return BLE_HS_ESTORE_FAIL;
    }

    return 0;
}
   270a2:	4618      	mov	r0, r3
   270a4:	b054      	add	sp, #336	; 0x150
   270a6:	bd10      	pop	{r4, pc}
        return BLE_HS_ESTORE_FAIL;
   270a8:	231c      	movs	r3, #28
   270aa:	e7fa      	b.n	270a2 <ble_store_config_persist_sec_set+0x22>

000270ac <ble_store_config_conf_export>:
{
   270ac:	b530      	push	{r4, r5, lr}
   270ae:	b0d5      	sub	sp, #340	; 0x154
   270b0:	4604      	mov	r4, r0
    ble_store_config_serialize_arr(ble_store_config_our_secs,
   270b2:	4b13      	ldr	r3, [pc, #76]	; (27100 <ble_store_config_conf_export+0x54>)
   270b4:	681a      	ldr	r2, [r3, #0]
   270b6:	f240 1545 	movw	r5, #325	; 0x145
   270ba:	9500      	str	r5, [sp, #0]
   270bc:	ab02      	add	r3, sp, #8
   270be:	2150      	movs	r1, #80	; 0x50
   270c0:	4810      	ldr	r0, [pc, #64]	; (27104 <ble_store_config_conf_export+0x58>)
   270c2:	f7ff ffc7 	bl	27054 <ble_store_config_serialize_arr>
    func("ble_hs/our_sec", buf.sec);
   270c6:	a902      	add	r1, sp, #8
   270c8:	480f      	ldr	r0, [pc, #60]	; (27108 <ble_store_config_conf_export+0x5c>)
   270ca:	47a0      	blx	r4
    ble_store_config_serialize_arr(ble_store_config_peer_secs,
   270cc:	4b0f      	ldr	r3, [pc, #60]	; (2710c <ble_store_config_conf_export+0x60>)
   270ce:	681a      	ldr	r2, [r3, #0]
   270d0:	9500      	str	r5, [sp, #0]
   270d2:	ab02      	add	r3, sp, #8
   270d4:	2150      	movs	r1, #80	; 0x50
   270d6:	480e      	ldr	r0, [pc, #56]	; (27110 <ble_store_config_conf_export+0x64>)
   270d8:	f7ff ffbc 	bl	27054 <ble_store_config_serialize_arr>
    func("ble_hs/peer_sec", buf.sec);
   270dc:	a902      	add	r1, sp, #8
   270de:	480d      	ldr	r0, [pc, #52]	; (27114 <ble_store_config_conf_export+0x68>)
   270e0:	47a0      	blx	r4
    ble_store_config_serialize_arr(ble_store_config_cccds,
   270e2:	4b0d      	ldr	r3, [pc, #52]	; (27118 <ble_store_config_conf_export+0x6c>)
   270e4:	681a      	ldr	r2, [r3, #0]
   270e6:	23c1      	movs	r3, #193	; 0xc1
   270e8:	9300      	str	r3, [sp, #0]
   270ea:	ab02      	add	r3, sp, #8
   270ec:	2110      	movs	r1, #16
   270ee:	480b      	ldr	r0, [pc, #44]	; (2711c <ble_store_config_conf_export+0x70>)
   270f0:	f7ff ffb0 	bl	27054 <ble_store_config_serialize_arr>
    func("ble_hs/cccd", buf.cccd);
   270f4:	a902      	add	r1, sp, #8
   270f6:	480a      	ldr	r0, [pc, #40]	; (27120 <ble_store_config_conf_export+0x74>)
   270f8:	47a0      	blx	r4
}
   270fa:	2000      	movs	r0, #0
   270fc:	b055      	add	sp, #340	; 0x154
   270fe:	bd30      	pop	{r4, r5, pc}
   27100:	200092d4 	.word	0x200092d4
   27104:	200092e0 	.word	0x200092e0
   27108:	00029904 	.word	0x00029904
   2710c:	200092d8 	.word	0x200092d8
   27110:	200093d0 	.word	0x200093d0
   27114:	00029914 	.word	0x00029914
   27118:	200092d0 	.word	0x200092d0
   2711c:	20009250 	.word	0x20009250
   27120:	00029924 	.word	0x00029924

00027124 <ble_store_config_deserialize_arr>:
{
   27124:	b538      	push	{r3, r4, r5, lr}
   27126:	4615      	mov	r5, r2
   27128:	461c      	mov	r4, r3
    len = base64_decode(enc, out_arr);
   2712a:	f7f1 fffd 	bl	19128 <base64_decode>
    if (len < 0) {
   2712e:	2800      	cmp	r0, #0
   27130:	db04      	blt.n	2713c <ble_store_config_deserialize_arr+0x18>
    *out_num_objs = len / obj_sz;
   27132:	fb90 f0f5 	sdiv	r0, r0, r5
   27136:	6020      	str	r0, [r4, #0]
    return 0;
   27138:	2000      	movs	r0, #0
}
   2713a:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   2713c:	2002      	movs	r0, #2
   2713e:	e7fc      	b.n	2713a <ble_store_config_deserialize_arr+0x16>

00027140 <ble_store_config_conf_set>:
    if (argc == 1) {
   27140:	2801      	cmp	r0, #1
   27142:	d126      	bne.n	27192 <ble_store_config_conf_set+0x52>
{
   27144:	b538      	push	{r3, r4, r5, lr}
   27146:	4614      	mov	r4, r2
        if (strcmp(argv[0], "our_sec") == 0) {
   27148:	680d      	ldr	r5, [r1, #0]
   2714a:	4914      	ldr	r1, [pc, #80]	; (2719c <ble_store_config_conf_set+0x5c>)
   2714c:	4628      	mov	r0, r5
   2714e:	f7e4 fb7d 	bl	b84c <strcmp>
   27152:	b180      	cbz	r0, 27176 <ble_store_config_conf_set+0x36>
        } else if (strcmp(argv[0], "peer_sec") == 0) {
   27154:	4912      	ldr	r1, [pc, #72]	; (271a0 <ble_store_config_conf_set+0x60>)
   27156:	4628      	mov	r0, r5
   27158:	f7e4 fb78 	bl	b84c <strcmp>
   2715c:	b190      	cbz	r0, 27184 <ble_store_config_conf_set+0x44>
        } else if (strcmp(argv[0], "cccd") == 0) {
   2715e:	4911      	ldr	r1, [pc, #68]	; (271a4 <ble_store_config_conf_set+0x64>)
   27160:	4628      	mov	r0, r5
   27162:	f7e4 fb73 	bl	b84c <strcmp>
   27166:	b9b0      	cbnz	r0, 27196 <ble_store_config_conf_set+0x56>
            rc = ble_store_config_deserialize_arr(
   27168:	4b0f      	ldr	r3, [pc, #60]	; (271a8 <ble_store_config_conf_set+0x68>)
   2716a:	2210      	movs	r2, #16
   2716c:	490f      	ldr	r1, [pc, #60]	; (271ac <ble_store_config_conf_set+0x6c>)
   2716e:	4620      	mov	r0, r4
   27170:	f7ff ffd8 	bl	27124 <ble_store_config_deserialize_arr>
            return rc;
   27174:	e005      	b.n	27182 <ble_store_config_conf_set+0x42>
            rc = ble_store_config_deserialize_arr(
   27176:	4b0e      	ldr	r3, [pc, #56]	; (271b0 <ble_store_config_conf_set+0x70>)
   27178:	2250      	movs	r2, #80	; 0x50
   2717a:	490e      	ldr	r1, [pc, #56]	; (271b4 <ble_store_config_conf_set+0x74>)
   2717c:	4620      	mov	r0, r4
   2717e:	f7ff ffd1 	bl	27124 <ble_store_config_deserialize_arr>
}
   27182:	bd38      	pop	{r3, r4, r5, pc}
            rc = ble_store_config_deserialize_arr(
   27184:	4b0c      	ldr	r3, [pc, #48]	; (271b8 <ble_store_config_conf_set+0x78>)
   27186:	2250      	movs	r2, #80	; 0x50
   27188:	490c      	ldr	r1, [pc, #48]	; (271bc <ble_store_config_conf_set+0x7c>)
   2718a:	4620      	mov	r0, r4
   2718c:	f7ff ffca 	bl	27124 <ble_store_config_deserialize_arr>
            return rc;
   27190:	e7f7      	b.n	27182 <ble_store_config_conf_set+0x42>
    return OS_ENOENT;
   27192:	200a      	movs	r0, #10
}
   27194:	4770      	bx	lr
    return OS_ENOENT;
   27196:	200a      	movs	r0, #10
   27198:	e7f3      	b.n	27182 <ble_store_config_conf_set+0x42>
   2719a:	bf00      	nop
   2719c:	00029930 	.word	0x00029930
   271a0:	00029938 	.word	0x00029938
   271a4:	00029944 	.word	0x00029944
   271a8:	200092d0 	.word	0x200092d0
   271ac:	20009250 	.word	0x20009250
   271b0:	200092d4 	.word	0x200092d4
   271b4:	200092e0 	.word	0x200092e0
   271b8:	200092d8 	.word	0x200092d8
   271bc:	200093d0 	.word	0x200093d0

000271c0 <ble_store_config_persist_our_secs>:

int
ble_store_config_persist_our_secs(void)
{
   271c0:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_config_persist_sec_set("ble_hs/our_sec",
   271c2:	4b03      	ldr	r3, [pc, #12]	; (271d0 <ble_store_config_persist_our_secs+0x10>)
   271c4:	681a      	ldr	r2, [r3, #0]
   271c6:	4903      	ldr	r1, [pc, #12]	; (271d4 <ble_store_config_persist_our_secs+0x14>)
   271c8:	4803      	ldr	r0, [pc, #12]	; (271d8 <ble_store_config_persist_our_secs+0x18>)
   271ca:	f7ff ff59 	bl	27080 <ble_store_config_persist_sec_set>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   271ce:	bd08      	pop	{r3, pc}
   271d0:	200092d4 	.word	0x200092d4
   271d4:	200092e0 	.word	0x200092e0
   271d8:	00029904 	.word	0x00029904

000271dc <ble_store_config_persist_peer_secs>:

int
ble_store_config_persist_peer_secs(void)
{
   271dc:	b508      	push	{r3, lr}
    int rc;

    rc = ble_store_config_persist_sec_set("ble_hs/peer_sec",
   271de:	4b03      	ldr	r3, [pc, #12]	; (271ec <ble_store_config_persist_peer_secs+0x10>)
   271e0:	681a      	ldr	r2, [r3, #0]
   271e2:	4903      	ldr	r1, [pc, #12]	; (271f0 <ble_store_config_persist_peer_secs+0x14>)
   271e4:	4803      	ldr	r0, [pc, #12]	; (271f4 <ble_store_config_persist_peer_secs+0x18>)
   271e6:	f7ff ff4b 	bl	27080 <ble_store_config_persist_sec_set>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   271ea:	bd08      	pop	{r3, pc}
   271ec:	200092d8 	.word	0x200092d8
   271f0:	200093d0 	.word	0x200093d0
   271f4:	00029914 	.word	0x00029914

000271f8 <ble_store_config_persist_cccds>:

int
ble_store_config_persist_cccds(void)
{
   271f8:	b500      	push	{lr}
   271fa:	b0b5      	sub	sp, #212	; 0xd4
    char buf[BLE_STORE_CONFIG_CCCD_SET_ENCODE_SZ];
    int rc;

    ble_store_config_serialize_arr(ble_store_config_cccds,
   271fc:	4b0a      	ldr	r3, [pc, #40]	; (27228 <ble_store_config_persist_cccds+0x30>)
   271fe:	681a      	ldr	r2, [r3, #0]
   27200:	23c1      	movs	r3, #193	; 0xc1
   27202:	9300      	str	r3, [sp, #0]
   27204:	ab03      	add	r3, sp, #12
   27206:	2110      	movs	r1, #16
   27208:	4808      	ldr	r0, [pc, #32]	; (2722c <ble_store_config_persist_cccds+0x34>)
   2720a:	f7ff ff23 	bl	27054 <ble_store_config_serialize_arr>
                                   sizeof *ble_store_config_cccds,
                                   ble_store_config_num_cccds,
                                   buf,
                                   sizeof buf);
    rc = conf_save_one("ble_hs/cccd", buf);
   2720e:	a903      	add	r1, sp, #12
   27210:	4807      	ldr	r0, [pc, #28]	; (27230 <ble_store_config_persist_cccds+0x38>)
   27212:	f7ef fac9 	bl	167a8 <conf_save_one>
    if (rc != 0) {
   27216:	4603      	mov	r3, r0
   27218:	b918      	cbnz	r0, 27222 <ble_store_config_persist_cccds+0x2a>
        return BLE_HS_ESTORE_FAIL;
    }

    return 0;
}
   2721a:	4618      	mov	r0, r3
   2721c:	b035      	add	sp, #212	; 0xd4
   2721e:	f85d fb04 	ldr.w	pc, [sp], #4
        return BLE_HS_ESTORE_FAIL;
   27222:	231c      	movs	r3, #28
   27224:	e7f9      	b.n	2721a <ble_store_config_persist_cccds+0x22>
   27226:	bf00      	nop
   27228:	200092d0 	.word	0x200092d0
   2722c:	20009250 	.word	0x20009250
   27230:	00029924 	.word	0x00029924

00027234 <ble_store_config_conf_init>:

void
ble_store_config_conf_init(void)
{
   27234:	b510      	push	{r4, lr}
   27236:	b082      	sub	sp, #8
    int rc;

    rc = conf_register(&ble_store_config_conf_handler);
   27238:	4809      	ldr	r0, [pc, #36]	; (27260 <ble_store_config_conf_init+0x2c>)
   2723a:	f7ef fb45 	bl	168c8 <conf_register>
    SYSINIT_PANIC_ASSERT_MSG(rc == 0,
   2723e:	b908      	cbnz	r0, 27244 <ble_store_config_conf_init+0x10>
                             "Failed to register ble_store_config conf");
}
   27240:	b002      	add	sp, #8
   27242:	bd10      	pop	{r4, pc}
    SYSINIT_PANIC_ASSERT_MSG(rc == 0,
   27244:	f7e0 ffbc 	bl	81c0 <hal_debugger_connected>
   27248:	b100      	cbz	r0, 2724c <ble_store_config_conf_init+0x18>
   2724a:	be01      	bkpt	0x0001
   2724c:	2000      	movs	r0, #0
   2724e:	9000      	str	r0, [sp, #0]
   27250:	4b04      	ldr	r3, [pc, #16]	; (27264 <ble_store_config_conf_init+0x30>)
   27252:	681c      	ldr	r4, [r3, #0]
   27254:	4603      	mov	r3, r0
   27256:	4602      	mov	r2, r0
   27258:	4601      	mov	r1, r0
   2725a:	47a0      	blx	r4
}
   2725c:	e7f0      	b.n	27240 <ble_store_config_conf_init+0xc>
   2725e:	bf00      	nop
   27260:	20000478 	.word	0x20000478
   27264:	200000ec 	.word	0x200000ec

00027268 <smp_align4>:
static int
smp_align4(int x)
{
    int rem;

    rem = x % 4;
   27268:	4242      	negs	r2, r0
   2726a:	f000 0303 	and.w	r3, r0, #3
   2726e:	f002 0203 	and.w	r2, r2, #3
   27272:	bf58      	it	pl
   27274:	4253      	negpl	r3, r2
    if (rem == 0) {
   27276:	b10b      	cbz	r3, 2727c <smp_align4+0x14>
        return x;
    } else {
        return x - rem + 4;
   27278:	1ac0      	subs	r0, r0, r3
   2727a:	3004      	adds	r0, #4
    }
}
   2727c:	4770      	bx	lr

0002727e <smp_rsp_op>:
 * Converts a request opcode to its corresponding response opcode.
 */
static uint8_t
smp_rsp_op(uint8_t req_op)
{
    if (req_op == MGMT_OP_READ) {
   2727e:	b908      	cbnz	r0, 27284 <smp_rsp_op+0x6>
        return MGMT_OP_READ_RSP;
   27280:	2001      	movs	r0, #1
   27282:	4770      	bx	lr
    } else {
        return MGMT_OP_WRITE_RSP;
   27284:	2003      	movs	r0, #3
    }
}
   27286:	4770      	bx	lr

00027288 <smp_init_rsp_hdr>:

static void
smp_init_rsp_hdr(const struct mgmt_hdr *req_hdr, struct mgmt_hdr *rsp_hdr)
{
   27288:	b570      	push	{r4, r5, r6, lr}
   2728a:	4605      	mov	r5, r0
   2728c:	460c      	mov	r4, r1
    *rsp_hdr = (struct mgmt_hdr) {
        .nh_len = 0,
        .nh_flags = 0,
        .nh_op = smp_rsp_op(req_hdr->nh_op),
   2728e:	7800      	ldrb	r0, [r0, #0]
   27290:	f000 0007 	and.w	r0, r0, #7
   27294:	f7ff fff3 	bl	2727e <smp_rsp_op>
        .nh_group = req_hdr->nh_group,
   27298:	88ae      	ldrh	r6, [r5, #4]
        .nh_seq = req_hdr->nh_seq,
   2729a:	79a9      	ldrb	r1, [r5, #6]
        .nh_id = req_hdr->nh_id,
   2729c:	79ea      	ldrb	r2, [r5, #7]
    *rsp_hdr = (struct mgmt_hdr) {
   2729e:	2300      	movs	r3, #0
   272a0:	6023      	str	r3, [r4, #0]
   272a2:	7823      	ldrb	r3, [r4, #0]
   272a4:	f360 0302 	bfi	r3, r0, #0, #3
   272a8:	7023      	strb	r3, [r4, #0]
   272aa:	80a6      	strh	r6, [r4, #4]
   272ac:	71a1      	strb	r1, [r4, #6]
   272ae:	71e2      	strb	r2, [r4, #7]
    };
}
   272b0:	bd70      	pop	{r4, r5, r6, pc}

000272b2 <smp_read_hdr>:
static int
smp_read_hdr(struct smp_streamer *streamer, struct mgmt_hdr *dst_hdr)
{
    struct cbor_decoder_reader *reader;

    reader = streamer->mgmt_stmr.reader;
   272b2:	6880      	ldr	r0, [r0, #8]

    if (reader->message_size < sizeof *dst_hdr) {
   272b4:	6983      	ldr	r3, [r0, #24]
   272b6:	2b07      	cmp	r3, #7
   272b8:	d906      	bls.n	272c8 <smp_read_hdr+0x16>
{
   272ba:	b510      	push	{r4, lr}
        return MGMT_ERR_EINVAL;
    }

    reader->cpy(reader, (char *)dst_hdr, 0, sizeof *dst_hdr);
   272bc:	6944      	ldr	r4, [r0, #20]
   272be:	2308      	movs	r3, #8
   272c0:	2200      	movs	r2, #0
   272c2:	47a0      	blx	r4
    return 0;
   272c4:	2000      	movs	r0, #0
}
   272c6:	bd10      	pop	{r4, pc}
        return MGMT_ERR_EINVAL;
   272c8:	2003      	movs	r0, #3
}
   272ca:	4770      	bx	lr

000272cc <smp_handle_single_payload>:
 * @return                      A MGMT_ERR_[...] error code.
 */
static int
smp_handle_single_payload(struct mgmt_ctxt *cbuf,
                          const struct mgmt_hdr *req_hdr, bool *handler_found)
{
   272cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   272ce:	b085      	sub	sp, #20
   272d0:	4605      	mov	r5, r0
   272d2:	460c      	mov	r4, r1
   272d4:	4617      	mov	r7, r2
    const struct mgmt_handler *handler;
    mgmt_handler_fn *handler_fn;
    struct CborEncoder payload_encoder;
    int rc;

    handler = mgmt_find_handler(req_hdr->nh_group, req_hdr->nh_id);
   272d6:	79c9      	ldrb	r1, [r1, #7]
   272d8:	88a0      	ldrh	r0, [r4, #4]
   272da:	f7e5 f997 	bl	c60c <mgmt_find_handler>
    if (handler == NULL) {
   272de:	b348      	cbz	r0, 27334 <smp_handle_single_payload+0x68>
   272e0:	4606      	mov	r6, r0
    }

    /* Begin response payload.  Response fields are inserted into the root
     * map as key value pairs.
     */
    rc = cbor_encoder_create_map(&cbuf->encoder, &payload_encoder,
   272e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   272e6:	4669      	mov	r1, sp
   272e8:	4628      	mov	r0, r5
   272ea:	f7f2 f87b 	bl	193e4 <cbor_encoder_create_map>
                                 CborIndefiniteLength);
    rc = mgmt_err_from_cbor(rc);
   272ee:	f7e5 f9ad 	bl	c64c <mgmt_err_from_cbor>
    if (rc != 0) {
   272f2:	4603      	mov	r3, r0
   272f4:	b9f8      	cbnz	r0, 27336 <smp_handle_single_payload+0x6a>
        return rc;
    }

    switch (req_hdr->nh_op) {
   272f6:	7823      	ldrb	r3, [r4, #0]
   272f8:	f013 0307 	ands.w	r3, r3, #7
   272fc:	d003      	beq.n	27306 <smp_handle_single_payload+0x3a>
   272fe:	2b02      	cmp	r3, #2
   27300:	d016      	beq.n	27330 <smp_handle_single_payload+0x64>
    case MGMT_OP_WRITE:
        handler_fn = handler->mh_write;
        break;

    default:
        return MGMT_ERR_EINVAL;
   27302:	2303      	movs	r3, #3
   27304:	e017      	b.n	27336 <smp_handle_single_payload+0x6a>
        handler_fn = handler->mh_read;
   27306:	6836      	ldr	r6, [r6, #0]
    }

    if (handler_fn) {
   27308:	b1c6      	cbz	r6, 2733c <smp_handle_single_payload+0x70>
        *handler_found = true;
   2730a:	2001      	movs	r0, #1
   2730c:	7038      	strb	r0, [r7, #0]
        mgmt_evt(MGMT_EVT_OP_CMD_RECV, req_hdr->nh_group, req_hdr->nh_id, NULL);
   2730e:	2300      	movs	r3, #0
   27310:	79e2      	ldrb	r2, [r4, #7]
   27312:	88a1      	ldrh	r1, [r4, #4]
   27314:	f7e5 f9d0 	bl	c6b8 <mgmt_evt>

        rc = handler_fn(cbuf);
   27318:	4628      	mov	r0, r5
   2731a:	47b0      	blx	r6
    } else {
        rc = MGMT_ERR_ENOTSUP;
    }

    if (rc != 0) {
   2731c:	4603      	mov	r3, r0
   2731e:	b950      	cbnz	r0, 27336 <smp_handle_single_payload+0x6a>
        return rc;
    }

    /* End response payload. */
    rc = cbor_encoder_close_container(&cbuf->encoder, &payload_encoder);
   27320:	4669      	mov	r1, sp
   27322:	4628      	mov	r0, r5
   27324:	f7f2 f86e 	bl	19404 <cbor_encoder_close_container>
    return mgmt_err_from_cbor(rc);
   27328:	f7e5 f990 	bl	c64c <mgmt_err_from_cbor>
   2732c:	4603      	mov	r3, r0
   2732e:	e002      	b.n	27336 <smp_handle_single_payload+0x6a>
        handler_fn = handler->mh_write;
   27330:	6876      	ldr	r6, [r6, #4]
        break;
   27332:	e7e9      	b.n	27308 <smp_handle_single_payload+0x3c>
        return MGMT_ERR_ENOTSUP;
   27334:	2308      	movs	r3, #8
}
   27336:	4618      	mov	r0, r3
   27338:	b005      	add	sp, #20
   2733a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        rc = MGMT_ERR_ENOTSUP;
   2733c:	2308      	movs	r3, #8
   2733e:	e7fa      	b.n	27336 <smp_handle_single_payload+0x6a>

00027340 <smp_write_hdr>:
{
   27340:	b508      	push	{r3, lr}
    rc = mgmt_streamer_write_at(&streamer->mgmt_stmr, 0, src_hdr,
   27342:	2308      	movs	r3, #8
   27344:	460a      	mov	r2, r1
   27346:	2100      	movs	r1, #0
   27348:	f7e5 f931 	bl	c5ae <mgmt_streamer_write_at>
    return mgmt_err_from_cbor(rc);
   2734c:	f7e5 f97e 	bl	c64c <mgmt_err_from_cbor>
}
   27350:	bd08      	pop	{r3, pc}

00027352 <smp_handle_single_req>:
 * @return                      A MGMT_ERR_[...] error code.
 */
static int
smp_handle_single_req(struct smp_streamer *streamer,
                      const struct mgmt_hdr *req_hdr, bool *handler_found)
{
   27352:	b570      	push	{r4, r5, r6, lr}
   27354:	b08e      	sub	sp, #56	; 0x38
   27356:	4604      	mov	r4, r0
   27358:	460d      	mov	r5, r1
   2735a:	4616      	mov	r6, r2
    struct mgmt_ctxt cbuf;
    struct mgmt_hdr rsp_hdr;
    int rc;

    rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   2735c:	4601      	mov	r1, r0
   2735e:	a803      	add	r0, sp, #12
   27360:	f7e5 f97c 	bl	c65c <mgmt_ctxt_init>
    if (rc != 0) {
   27364:	4603      	mov	r3, r0
   27366:	b110      	cbz	r0, 2736e <smp_handle_single_req+0x1c>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   27368:	4618      	mov	r0, r3
   2736a:	b00e      	add	sp, #56	; 0x38
   2736c:	bd70      	pop	{r4, r5, r6, pc}
    smp_init_rsp_hdr(req_hdr, &rsp_hdr);
   2736e:	a901      	add	r1, sp, #4
   27370:	4628      	mov	r0, r5
   27372:	f7ff ff89 	bl	27288 <smp_init_rsp_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   27376:	a901      	add	r1, sp, #4
   27378:	4620      	mov	r0, r4
   2737a:	f7ff ffe1 	bl	27340 <smp_write_hdr>
    if (rc != 0) {
   2737e:	4603      	mov	r3, r0
   27380:	2800      	cmp	r0, #0
   27382:	d1f1      	bne.n	27368 <smp_handle_single_req+0x16>
    rc = smp_handle_single_payload(&cbuf, req_hdr, handler_found);
   27384:	4632      	mov	r2, r6
   27386:	4629      	mov	r1, r5
   27388:	a803      	add	r0, sp, #12
   2738a:	f7ff ff9f 	bl	272cc <smp_handle_single_payload>
    if (rc != 0) {
   2738e:	4603      	mov	r3, r0
   27390:	2800      	cmp	r0, #0
   27392:	d1e9      	bne.n	27368 <smp_handle_single_req+0x16>
{   return encoder->writer->bytes_written; }
   27394:	9b03      	ldr	r3, [sp, #12]
   27396:	685b      	ldr	r3, [r3, #4]
    rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   27398:	3b08      	subs	r3, #8
   2739a:	f8ad 3006 	strh.w	r3, [sp, #6]
    mgmt_hton_hdr(&rsp_hdr);
   2739e:	a801      	add	r0, sp, #4
   273a0:	f7e5 f97f 	bl	c6a2 <mgmt_hton_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   273a4:	a901      	add	r1, sp, #4
   273a6:	4620      	mov	r0, r4
   273a8:	f7ff ffca 	bl	27340 <smp_write_hdr>
   273ac:	4603      	mov	r3, r0
   273ae:	e7db      	b.n	27368 <smp_handle_single_req+0x16>

000273b0 <smp_build_err_rsp>:
{
   273b0:	b570      	push	{r4, r5, r6, lr}
   273b2:	b092      	sub	sp, #72	; 0x48
   273b4:	4604      	mov	r4, r0
   273b6:	460d      	mov	r5, r1
   273b8:	4616      	mov	r6, r2
    rc = mgmt_ctxt_init(&cbuf, &streamer->mgmt_stmr);
   273ba:	4601      	mov	r1, r0
   273bc:	a803      	add	r0, sp, #12
   273be:	f7e5 f94d 	bl	c65c <mgmt_ctxt_init>
    if (rc != 0) {
   273c2:	4603      	mov	r3, r0
   273c4:	b110      	cbz	r0, 273cc <smp_build_err_rsp+0x1c>
}
   273c6:	4618      	mov	r0, r3
   273c8:	b012      	add	sp, #72	; 0x48
   273ca:	bd70      	pop	{r4, r5, r6, pc}
    smp_init_rsp_hdr(req_hdr, &rsp_hdr);
   273cc:	a901      	add	r1, sp, #4
   273ce:	4628      	mov	r0, r5
   273d0:	f7ff ff5a 	bl	27288 <smp_init_rsp_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   273d4:	a901      	add	r1, sp, #4
   273d6:	4620      	mov	r0, r4
   273d8:	f7ff ffb2 	bl	27340 <smp_write_hdr>
    if (rc != 0) {
   273dc:	4603      	mov	r3, r0
   273de:	2800      	cmp	r0, #0
   273e0:	d1f1      	bne.n	273c6 <smp_build_err_rsp+0x16>
    rc = cbor_encoder_create_map(&cbuf.encoder, &map, CborIndefiniteLength);
   273e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   273e6:	a90e      	add	r1, sp, #56	; 0x38
   273e8:	a803      	add	r0, sp, #12
   273ea:	f7f1 fffb 	bl	193e4 <cbor_encoder_create_map>
    if (rc != 0) {
   273ee:	4603      	mov	r3, r0
   273f0:	2800      	cmp	r0, #0
   273f2:	d1e8      	bne.n	273c6 <smp_build_err_rsp+0x16>
    rc = mgmt_write_rsp_status(&cbuf, status);
   273f4:	4631      	mov	r1, r6
   273f6:	a803      	add	r0, sp, #12
   273f8:	f7e5 f914 	bl	c624 <mgmt_write_rsp_status>
    if (rc != 0) {
   273fc:	4603      	mov	r3, r0
   273fe:	2800      	cmp	r0, #0
   27400:	d1e1      	bne.n	273c6 <smp_build_err_rsp+0x16>
    rc = cbor_encoder_close_container(&cbuf.encoder, &map);
   27402:	a90e      	add	r1, sp, #56	; 0x38
   27404:	a803      	add	r0, sp, #12
   27406:	f7f1 fffd 	bl	19404 <cbor_encoder_close_container>
    if (rc != 0) {
   2740a:	4603      	mov	r3, r0
   2740c:	2800      	cmp	r0, #0
   2740e:	d1da      	bne.n	273c6 <smp_build_err_rsp+0x16>
   27410:	9b03      	ldr	r3, [sp, #12]
   27412:	685b      	ldr	r3, [r3, #4]
    rsp_hdr.nh_len = cbor_encode_bytes_written(&cbuf.encoder) - MGMT_HDR_SIZE;
   27414:	3b08      	subs	r3, #8
   27416:	f8ad 3006 	strh.w	r3, [sp, #6]
    mgmt_hton_hdr(&rsp_hdr);
   2741a:	a801      	add	r0, sp, #4
   2741c:	f7e5 f941 	bl	c6a2 <mgmt_hton_hdr>
    rc = smp_write_hdr(streamer, &rsp_hdr);
   27420:	a901      	add	r1, sp, #4
   27422:	4620      	mov	r0, r4
   27424:	f7ff ff8c 	bl	27340 <smp_write_hdr>
   27428:	4603      	mov	r3, r0
   2742a:	e7cc      	b.n	273c6 <smp_build_err_rsp+0x16>

0002742c <smp_on_err>:
 * @param status                The status to indicate in the error response.
 */
static void
smp_on_err(struct smp_streamer *streamer, const struct mgmt_hdr *req_hdr,
           void *req, void *rsp, int status)
{
   2742c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2742e:	4604      	mov	r4, r0
   27430:	460f      	mov	r7, r1
   27432:	4616      	mov	r6, r2
    int rc;

    /* Prefer the response buffer for holding the error response.  If no
     * response buffer was allocated, use the request buffer instead.
     */
    if (rsp == NULL) {
   27434:	461d      	mov	r5, r3
   27436:	b1e3      	cbz	r3, 27472 <smp_on_err+0x46>
        rsp = req;
        req = NULL;
    }

    /* Clear the partial response from the buffer, if any. */
    mgmt_streamer_reset_buf(&streamer->mgmt_stmr, rsp);
   27438:	4629      	mov	r1, r5
   2743a:	4620      	mov	r0, r4
   2743c:	f7e5 f8af 	bl	c59e <mgmt_streamer_reset_buf>
    mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   27440:	4629      	mov	r1, r5
   27442:	4620      	mov	r0, r4
   27444:	f7e5 f8c5 	bl	c5d2 <mgmt_streamer_init_writer>

    /* Build and transmit the error response. */
    rc = smp_build_err_rsp(streamer, req_hdr, status);
   27448:	9a06      	ldr	r2, [sp, #24]
   2744a:	4639      	mov	r1, r7
   2744c:	4620      	mov	r0, r4
   2744e:	f7ff ffaf 	bl	273b0 <smp_build_err_rsp>
    if (rc == 0) {
   27452:	b928      	cbnz	r0, 27460 <smp_on_err+0x34>
        streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   27454:	6923      	ldr	r3, [r4, #16]
   27456:	6862      	ldr	r2, [r4, #4]
   27458:	4629      	mov	r1, r5
   2745a:	4620      	mov	r0, r4
   2745c:	4798      	blx	r3
        rsp = NULL;
   2745e:	2500      	movs	r5, #0
    }

    /* Free any extra buffers. */
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   27460:	4631      	mov	r1, r6
   27462:	4620      	mov	r0, r4
   27464:	f7e5 f8bc 	bl	c5e0 <mgmt_streamer_free_buf>
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   27468:	4629      	mov	r1, r5
   2746a:	4620      	mov	r0, r4
   2746c:	f7e5 f8b8 	bl	c5e0 <mgmt_streamer_free_buf>
}
   27470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        req = NULL;
   27472:	462e      	mov	r6, r5
        rsp = req;
   27474:	4615      	mov	r5, r2
   27476:	e7df      	b.n	27438 <smp_on_err+0xc>

00027478 <smp_process_request_packet>:
 *
 * @return                      0 on success, MGMT_ERR_[...] code on failure.
 */
int
smp_process_request_packet(struct smp_streamer *streamer, void *req)
{
   27478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2747c:	b086      	sub	sp, #24
   2747e:	4604      	mov	r4, r0
   27480:	460e      	mov	r6, r1

    rsp = NULL;
    valid_hdr = true;

    while (1) {
        handler_found = false;
   27482:	2300      	movs	r3, #0
   27484:	f88d 300b 	strb.w	r3, [sp, #11]

        rc = mgmt_streamer_init_reader(&streamer->mgmt_stmr, req);
   27488:	46a0      	mov	r8, r4
   2748a:	4631      	mov	r1, r6
   2748c:	4620      	mov	r0, r4
   2748e:	f7e5 f899 	bl	c5c4 <mgmt_streamer_init_reader>
        if (rc != 0) {
   27492:	4605      	mov	r5, r0
   27494:	2800      	cmp	r0, #0
   27496:	d140      	bne.n	2751a <smp_process_request_packet+0xa2>
            valid_hdr = false;
            break;
        }

        /* Read the management header and strip it from the request. */
        rc = smp_read_hdr(streamer, &req_hdr);
   27498:	a904      	add	r1, sp, #16
   2749a:	4620      	mov	r0, r4
   2749c:	f7ff ff09 	bl	272b2 <smp_read_hdr>
        if (rc != 0) {
   274a0:	4605      	mov	r5, r0
   274a2:	2800      	cmp	r0, #0
   274a4:	d14a      	bne.n	2753c <smp_process_request_packet+0xc4>
            valid_hdr = false;
            break;
        }
        mgmt_ntoh_hdr(&req_hdr);
   274a6:	a804      	add	r0, sp, #16
   274a8:	f7e5 f8f0 	bl	c68c <mgmt_ntoh_hdr>
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req, MGMT_HDR_SIZE);
   274ac:	2208      	movs	r2, #8
   274ae:	4631      	mov	r1, r6
   274b0:	4620      	mov	r0, r4
   274b2:	f7e5 f86b 	bl	c58c <mgmt_streamer_trim_front>

        rsp = mgmt_streamer_alloc_rsp(&streamer->mgmt_stmr, req);
   274b6:	4631      	mov	r1, r6
   274b8:	4620      	mov	r0, r4
   274ba:	f7e5 f85f 	bl	c57c <mgmt_streamer_alloc_rsp>
        if (rsp == NULL) {
   274be:	4607      	mov	r7, r0
   274c0:	2800      	cmp	r0, #0
   274c2:	d03e      	beq.n	27542 <smp_process_request_packet+0xca>
            rc = MGMT_ERR_ENOMEM;
            break;
        }

        rc = mgmt_streamer_init_writer(&streamer->mgmt_stmr, rsp);
   274c4:	4601      	mov	r1, r0
   274c6:	4620      	mov	r0, r4
   274c8:	f7e5 f883 	bl	c5d2 <mgmt_streamer_init_writer>
        if (rc != 0) {
   274cc:	4605      	mov	r5, r0
   274ce:	2800      	cmp	r0, #0
   274d0:	d13a      	bne.n	27548 <smp_process_request_packet+0xd0>
            break;
        }

        /* Process the request payload and build the response. */
        rc = smp_handle_single_req(streamer, &req_hdr, &handler_found);
   274d2:	f10d 020b 	add.w	r2, sp, #11
   274d6:	a904      	add	r1, sp, #16
   274d8:	4620      	mov	r0, r4
   274da:	f7ff ff3a 	bl	27352 <smp_handle_single_req>
        if (rc != 0) {
   274de:	4605      	mov	r5, r0
   274e0:	bba0      	cbnz	r0, 2754c <smp_process_request_packet+0xd4>
            break;
        }

        /* Send the response. */
        rc = streamer->tx_rsp_cb(streamer, rsp, streamer->mgmt_stmr.cb_arg);
   274e2:	6923      	ldr	r3, [r4, #16]
   274e4:	6862      	ldr	r2, [r4, #4]
   274e6:	4639      	mov	r1, r7
   274e8:	4620      	mov	r0, r4
   274ea:	4798      	blx	r3
        rsp = NULL;
        if (rc != 0) {
   274ec:	4605      	mov	r5, r0
   274ee:	bb78      	cbnz	r0, 27550 <smp_process_request_packet+0xd8>
            break;
        }

        /* Trim processed request to free up space for subsequent responses. */
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req,
                                 smp_align4(req_hdr.nh_len));
   274f0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   274f4:	f7ff feb8 	bl	27268 <smp_align4>
        mgmt_streamer_trim_front(&streamer->mgmt_stmr, req,
   274f8:	4602      	mov	r2, r0
   274fa:	4631      	mov	r1, r6
   274fc:	4620      	mov	r0, r4
   274fe:	f7e5 f845 	bl	c58c <mgmt_streamer_trim_front>

        cmd_done_arg.err = MGMT_ERR_EOK;
   27502:	ab06      	add	r3, sp, #24
   27504:	2200      	movs	r2, #0
   27506:	f843 2d0c 	str.w	r2, [r3, #-12]!
        mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   2750a:	f89d 2017 	ldrb.w	r2, [sp, #23]
   2750e:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   27512:	2003      	movs	r0, #3
   27514:	f7e5 f8d0 	bl	c6b8 <mgmt_evt>
        handler_found = false;
   27518:	e7b3      	b.n	27482 <smp_process_request_packet+0xa>
            valid_hdr = false;
   2751a:	2300      	movs	r3, #0
   2751c:	461f      	mov	r7, r3
                 &cmd_done_arg);
    }

    if (rc != 0 && valid_hdr) {
   2751e:	b105      	cbz	r5, 27522 <smp_process_request_packet+0xaa>
   27520:	b9cb      	cbnz	r3, 27556 <smp_process_request_packet+0xde>
        }

        return rc;
    }

    mgmt_streamer_free_buf(&streamer->mgmt_stmr, req);
   27522:	4631      	mov	r1, r6
   27524:	4640      	mov	r0, r8
   27526:	f7e5 f85b 	bl	c5e0 <mgmt_streamer_free_buf>
    mgmt_streamer_free_buf(&streamer->mgmt_stmr, rsp);
   2752a:	4639      	mov	r1, r7
   2752c:	4640      	mov	r0, r8
   2752e:	f7e5 f857 	bl	c5e0 <mgmt_streamer_free_buf>
    return 0;
   27532:	2500      	movs	r5, #0
}
   27534:	4628      	mov	r0, r5
   27536:	b006      	add	sp, #24
   27538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            valid_hdr = false;
   2753c:	2300      	movs	r3, #0
   2753e:	461f      	mov	r7, r3
   27540:	e7ed      	b.n	2751e <smp_process_request_packet+0xa6>
            rc = MGMT_ERR_ENOMEM;
   27542:	2502      	movs	r5, #2
    valid_hdr = true;
   27544:	2301      	movs	r3, #1
   27546:	e7ea      	b.n	2751e <smp_process_request_packet+0xa6>
   27548:	2301      	movs	r3, #1
   2754a:	e7e8      	b.n	2751e <smp_process_request_packet+0xa6>
   2754c:	2301      	movs	r3, #1
   2754e:	e7e6      	b.n	2751e <smp_process_request_packet+0xa6>
   27550:	2301      	movs	r3, #1
        rsp = NULL;
   27552:	2700      	movs	r7, #0
   27554:	e7e3      	b.n	2751e <smp_process_request_packet+0xa6>
        smp_on_err(streamer, &req_hdr, req, rsp, rc);
   27556:	9500      	str	r5, [sp, #0]
   27558:	463b      	mov	r3, r7
   2755a:	4632      	mov	r2, r6
   2755c:	a904      	add	r1, sp, #16
   2755e:	4620      	mov	r0, r4
   27560:	f7ff ff64 	bl	2742c <smp_on_err>
        if (handler_found) {
   27564:	f89d 300b 	ldrb.w	r3, [sp, #11]
   27568:	2b00      	cmp	r3, #0
   2756a:	d0e3      	beq.n	27534 <smp_process_request_packet+0xbc>
            cmd_done_arg.err = rc;
   2756c:	ab06      	add	r3, sp, #24
   2756e:	f843 5d0c 	str.w	r5, [r3, #-12]!
            mgmt_evt(MGMT_EVT_OP_CMD_DONE, req_hdr.nh_group, req_hdr.nh_id,
   27572:	f89d 2017 	ldrb.w	r2, [sp, #23]
   27576:	f8bd 1014 	ldrh.w	r1, [sp, #20]
   2757a:	2003      	movs	r0, #3
   2757c:	f7e5 f89c 	bl	c6b8 <mgmt_evt>
   27580:	e7d8      	b.n	27534 <smp_process_request_packet+0xbc>
	...

00027584 <config_pkg_init>:
#endif
#endif

void
config_pkg_init(void)
{
   27584:	b508      	push	{r3, lr}
    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   27586:	4b08      	ldr	r3, [pc, #32]	; (275a8 <config_pkg_init+0x24>)
   27588:	781b      	ldrb	r3, [r3, #0]
   2758a:	b113      	cbz	r3, 27592 <config_pkg_init+0xe>

    conf_init();
   2758c:	f7ef f974 	bl	16878 <conf_init>
    config_init_fcb();
#elif MYNEWT_VAL(CONFIG_FCB2)
    config_init_fcb2();
#endif
#endif
}
   27590:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   27592:	f7e0 fe15 	bl	81c0 <hal_debugger_connected>
   27596:	b100      	cbz	r0, 2759a <config_pkg_init+0x16>
   27598:	be01      	bkpt	0x0001
   2759a:	2300      	movs	r3, #0
   2759c:	461a      	mov	r2, r3
   2759e:	4619      	mov	r1, r3
   275a0:	4618      	mov	r0, r3
   275a2:	f7e2 f9a3 	bl	98ec <__assert_func>
   275a6:	bf00      	nop
   275a8:	20000506 	.word	0x20000506

000275ac <config_pkg_init_stage2>:
     */
#if MYNEWT_VAL(CONFIG_NFFS)
    fs_mkdir(MYNEWT_VAL(CONFIG_NFFS_DIR));
#endif
#endif
}
   275ac:	4770      	bx	lr

000275ae <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   275ae:	4770      	bx	lr

000275b0 <log_reboot_init_console>:
        return rc;
    }

    return 0;

}
   275b0:	2000      	movs	r0, #0
   275b2:	4770      	bx	lr

000275b4 <reboot_conf_export>:
reboot_conf_export(void (*func)(char *name, char *val),
                   enum conf_export_tgt tgt)
{
    char str[12];

    if (tgt == CONF_EXPORT_SHOW) {
   275b4:	2901      	cmp	r1, #1
   275b6:	d001      	beq.n	275bc <reboot_conf_export+0x8>
        func("reboot/written",
             conf_str_from_value(CONF_BOOL, &log_reboot_written, str,
                                 sizeof str));
    }
    return 0;
}
   275b8:	2000      	movs	r0, #0
   275ba:	4770      	bx	lr
{
   275bc:	b510      	push	{r4, lr}
   275be:	b084      	sub	sp, #16
   275c0:	4604      	mov	r4, r0
        func("reboot/reboot_cnt",
   275c2:	230c      	movs	r3, #12
   275c4:	aa01      	add	r2, sp, #4
   275c6:	4909      	ldr	r1, [pc, #36]	; (275ec <reboot_conf_export+0x38>)
   275c8:	2003      	movs	r0, #3
   275ca:	f7ef fa6f 	bl	16aac <conf_str_from_value>
   275ce:	4601      	mov	r1, r0
   275d0:	4807      	ldr	r0, [pc, #28]	; (275f0 <reboot_conf_export+0x3c>)
   275d2:	47a0      	blx	r4
        func("reboot/written",
   275d4:	230c      	movs	r3, #12
   275d6:	aa01      	add	r2, sp, #4
   275d8:	4906      	ldr	r1, [pc, #24]	; (275f4 <reboot_conf_export+0x40>)
   275da:	200a      	movs	r0, #10
   275dc:	f7ef fa66 	bl	16aac <conf_str_from_value>
   275e0:	4601      	mov	r1, r0
   275e2:	4805      	ldr	r0, [pc, #20]	; (275f8 <reboot_conf_export+0x44>)
   275e4:	47a0      	blx	r4
}
   275e6:	2000      	movs	r0, #0
   275e8:	b004      	add	sp, #16
   275ea:	bd10      	pop	{r4, pc}
   275ec:	200094c2 	.word	0x200094c2
   275f0:	000299f4 	.word	0x000299f4
   275f4:	200094c0 	.word	0x200094c0
   275f8:	00029a08 	.word	0x00029a08

000275fc <reboot_conf_get>:
    if (argc == 1) {
   275fc:	2801      	cmp	r0, #1
   275fe:	d11b      	bne.n	27638 <reboot_conf_get+0x3c>
{
   27600:	b570      	push	{r4, r5, r6, lr}
   27602:	461d      	mov	r5, r3
   27604:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   27606:	680e      	ldr	r6, [r1, #0]
   27608:	490d      	ldr	r1, [pc, #52]	; (27640 <reboot_conf_get+0x44>)
   2760a:	4630      	mov	r0, r6
   2760c:	f7e4 f91e 	bl	b84c <strcmp>
   27610:	b158      	cbz	r0, 2762a <reboot_conf_get+0x2e>
        } else if (!strcmp(argv[0], "written")) {
   27612:	490c      	ldr	r1, [pc, #48]	; (27644 <reboot_conf_get+0x48>)
   27614:	4630      	mov	r0, r6
   27616:	f7e4 f919 	bl	b84c <strcmp>
   2761a:	b978      	cbnz	r0, 2763c <reboot_conf_get+0x40>
            return conf_str_from_value(CONF_BOOL, &log_reboot_written,
   2761c:	462b      	mov	r3, r5
   2761e:	4622      	mov	r2, r4
   27620:	4909      	ldr	r1, [pc, #36]	; (27648 <reboot_conf_get+0x4c>)
   27622:	200a      	movs	r0, #10
   27624:	f7ef fa42 	bl	16aac <conf_str_from_value>
}
   27628:	bd70      	pop	{r4, r5, r6, pc}
            return conf_str_from_value(CONF_INT16, &reboot_cnt, buf, max_len);
   2762a:	462b      	mov	r3, r5
   2762c:	4622      	mov	r2, r4
   2762e:	4907      	ldr	r1, [pc, #28]	; (2764c <reboot_conf_get+0x50>)
   27630:	2003      	movs	r0, #3
   27632:	f7ef fa3b 	bl	16aac <conf_str_from_value>
   27636:	e7f7      	b.n	27628 <reboot_conf_get+0x2c>
    return NULL;
   27638:	2000      	movs	r0, #0
}
   2763a:	4770      	bx	lr
    return NULL;
   2763c:	2000      	movs	r0, #0
   2763e:	e7f3      	b.n	27628 <reboot_conf_get+0x2c>
   27640:	00029a18 	.word	0x00029a18
   27644:	00029a24 	.word	0x00029a24
   27648:	200094c0 	.word	0x200094c0
   2764c:	200094c2 	.word	0x200094c2

00027650 <reboot_conf_set>:
    if (argc == 1) {
   27650:	2801      	cmp	r0, #1
   27652:	d11a      	bne.n	2768a <reboot_conf_set+0x3a>
{
   27654:	b538      	push	{r3, r4, r5, lr}
   27656:	4614      	mov	r4, r2
        if (!strcmp(argv[0], "reboot_cnt")) {
   27658:	680d      	ldr	r5, [r1, #0]
   2765a:	490e      	ldr	r1, [pc, #56]	; (27694 <reboot_conf_set+0x44>)
   2765c:	4628      	mov	r0, r5
   2765e:	f7e4 f8f5 	bl	b84c <strcmp>
   27662:	b158      	cbz	r0, 2767c <reboot_conf_set+0x2c>
        } else if (!strcmp(argv[0], "written")) {
   27664:	490c      	ldr	r1, [pc, #48]	; (27698 <reboot_conf_set+0x48>)
   27666:	4628      	mov	r0, r5
   27668:	f7e4 f8f0 	bl	b84c <strcmp>
   2766c:	b978      	cbnz	r0, 2768e <reboot_conf_set+0x3e>
            return CONF_VALUE_SET(val, CONF_INT16, log_reboot_written);
   2766e:	2301      	movs	r3, #1
   27670:	4a0a      	ldr	r2, [pc, #40]	; (2769c <reboot_conf_set+0x4c>)
   27672:	2103      	movs	r1, #3
   27674:	4620      	mov	r0, r4
   27676:	f7ef f96a 	bl	1694e <conf_value_from_str>
}
   2767a:	bd38      	pop	{r3, r4, r5, pc}
            return CONF_VALUE_SET(val, CONF_INT16, reboot_cnt);
   2767c:	2302      	movs	r3, #2
   2767e:	4a08      	ldr	r2, [pc, #32]	; (276a0 <reboot_conf_set+0x50>)
   27680:	2103      	movs	r1, #3
   27682:	4620      	mov	r0, r4
   27684:	f7ef f963 	bl	1694e <conf_value_from_str>
   27688:	e7f7      	b.n	2767a <reboot_conf_set+0x2a>
    return OS_ENOENT;
   2768a:	200a      	movs	r0, #10
}
   2768c:	4770      	bx	lr
    return OS_ENOENT;
   2768e:	200a      	movs	r0, #10
   27690:	e7f3      	b.n	2767a <reboot_conf_set+0x2a>
   27692:	bf00      	nop
   27694:	00029a18 	.word	0x00029a18
   27698:	00029a24 	.word	0x00029a24
   2769c:	200094c0 	.word	0x200094c0
   276a0:	200094c2 	.word	0x200094c2

000276a4 <log_reboot_reason_str>:

const char *
log_reboot_reason_str(enum hal_reset_reason reason)
{
   276a4:	b510      	push	{r4, lr}
    static char str_reason[MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE)];

    if (reason >= HAL_RESET_OTHER) {
   276a6:	28ff      	cmp	r0, #255	; 0xff
   276a8:	d808      	bhi.n	276bc <log_reboot_reason_str+0x18>
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"OTHER: 0x%X",reason - HAL_RESET_OTHER);
        return str_reason;
    }

    switch (reason) {
   276aa:	1e43      	subs	r3, r0, #1
   276ac:	2b07      	cmp	r3, #7
   276ae:	d81d      	bhi.n	276ec <log_reboot_reason_str+0x48>
   276b0:	e8df f003 	tbb	[pc, r3]
   276b4:	1210250e 	.word	0x1210250e
   276b8:	1a181614 	.word	0x1a181614
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"OTHER: 0x%X",reason - HAL_RESET_OTHER);
   276bc:	4c11      	ldr	r4, [pc, #68]	; (27704 <log_reboot_reason_str+0x60>)
   276be:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   276c2:	4a11      	ldr	r2, [pc, #68]	; (27708 <log_reboot_reason_str+0x64>)
   276c4:	2120      	movs	r1, #32
   276c6:	4620      	mov	r0, r4
   276c8:	f7e4 fbf9 	bl	bebe <snprintf>
        return str_reason;
   276cc:	4620      	mov	r0, r4
    default:
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"UNKNOWN %d",reason);
        return str_reason;
        break;
    }
}
   276ce:	bd10      	pop	{r4, pc}
        return "HARD";
   276d0:	480e      	ldr	r0, [pc, #56]	; (2770c <log_reboot_reason_str+0x68>)
   276d2:	e7fc      	b.n	276ce <log_reboot_reason_str+0x2a>
        return "WDOG";
   276d4:	480e      	ldr	r0, [pc, #56]	; (27710 <log_reboot_reason_str+0x6c>)
   276d6:	e7fa      	b.n	276ce <log_reboot_reason_str+0x2a>
        return "SOFT";
   276d8:	480e      	ldr	r0, [pc, #56]	; (27714 <log_reboot_reason_str+0x70>)
   276da:	e7f8      	b.n	276ce <log_reboot_reason_str+0x2a>
        return "BROWNOUT";
   276dc:	480e      	ldr	r0, [pc, #56]	; (27718 <log_reboot_reason_str+0x74>)
   276de:	e7f6      	b.n	276ce <log_reboot_reason_str+0x2a>
        return "REQUESTED";
   276e0:	480e      	ldr	r0, [pc, #56]	; (2771c <log_reboot_reason_str+0x78>)
   276e2:	e7f4      	b.n	276ce <log_reboot_reason_str+0x2a>
        return "SYSTEM_OFF_INT";
   276e4:	480e      	ldr	r0, [pc, #56]	; (27720 <log_reboot_reason_str+0x7c>)
   276e6:	e7f2      	b.n	276ce <log_reboot_reason_str+0x2a>
        return "DFU";
   276e8:	480e      	ldr	r0, [pc, #56]	; (27724 <log_reboot_reason_str+0x80>)
   276ea:	e7f0      	b.n	276ce <log_reboot_reason_str+0x2a>
        snprintf(str_reason,MYNEWT_VAL(REBOOT_LOG_REBOOT_REASON_SIZE),"UNKNOWN %d",reason);
   276ec:	4c05      	ldr	r4, [pc, #20]	; (27704 <log_reboot_reason_str+0x60>)
   276ee:	4603      	mov	r3, r0
   276f0:	4a0d      	ldr	r2, [pc, #52]	; (27728 <log_reboot_reason_str+0x84>)
   276f2:	2120      	movs	r1, #32
   276f4:	4620      	mov	r0, r4
   276f6:	f7e4 fbe2 	bl	bebe <snprintf>
        return str_reason;
   276fa:	4620      	mov	r0, r4
   276fc:	e7e7      	b.n	276ce <log_reboot_reason_str+0x2a>
        return "RESET_PIN";
   276fe:	480b      	ldr	r0, [pc, #44]	; (2772c <log_reboot_reason_str+0x88>)
   27700:	e7e5      	b.n	276ce <log_reboot_reason_str+0x2a>
   27702:	bf00      	nop
   27704:	200094c4 	.word	0x200094c4
   27708:	000299a8 	.word	0x000299a8
   2770c:	00029958 	.word	0x00029958
   27710:	0002996c 	.word	0x0002996c
   27714:	00029974 	.word	0x00029974
   27718:	0002997c 	.word	0x0002997c
   2771c:	00029988 	.word	0x00029988
   27720:	00029994 	.word	0x00029994
   27724:	000299a4 	.word	0x000299a4
   27728:	000299b4 	.word	0x000299b4
   2772c:	00029960 	.word	0x00029960

00027730 <log_reboot_write>:
{
   27730:	b5f0      	push	{r4, r5, r6, r7, lr}
   27732:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
   27736:	4607      	mov	r7, r0
    rc = img_mgmt_read_info(boot_current_slot, &ver, hash, &flags);
   27738:	ab05      	add	r3, sp, #20
   2773a:	aa92      	add	r2, sp, #584	; 0x248
   2773c:	a99a      	add	r1, sp, #616	; 0x268
   2773e:	4884      	ldr	r0, [pc, #528]	; (27950 <log_reboot_write+0x220>)
   27740:	6800      	ldr	r0, [r0, #0]
   27742:	f7f0 f84d 	bl	177e0 <img_mgmt_read_info>
    if (rc != 0) {
   27746:	4606      	mov	r6, r0
   27748:	b118      	cbz	r0, 27752 <log_reboot_write+0x22>
}
   2774a:	4630      	mov	r0, r6
   2774c:	f50d 7d1d 	add.w	sp, sp, #628	; 0x274
   27750:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memset(cbor_enc_buf, 0, sizeof cbor_enc_buf);
   27752:	f44f 7480 	mov.w	r4, #256	; 0x100
   27756:	4622      	mov	r2, r4
   27758:	2100      	movs	r1, #0
   2775a:	a812      	add	r0, sp, #72	; 0x48
   2775c:	f7e4 f84f 	bl	b7fe <memset>
    cbor_buf_writer_init(&writer, cbor_enc_buf, sizeof cbor_enc_buf);
   27760:	4622      	mov	r2, r4
   27762:	a912      	add	r1, sp, #72	; 0x48
   27764:	a80e      	add	r0, sp, #56	; 0x38
   27766:	f000 fe4f 	bl	28408 <cbor_buf_writer_init>
    cbor_encoder_init(&enc, &writer.enc, 0);
   2776a:	2200      	movs	r2, #0
   2776c:	a90e      	add	r1, sp, #56	; 0x38
   2776e:	a80a      	add	r0, sp, #40	; 0x28
   27770:	f7f1 fd6f 	bl	19252 <cbor_encoder_init>
    rc = cbor_encoder_create_map(&enc, &map, CborIndefiniteLength);
   27774:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   27778:	a906      	add	r1, sp, #24
   2777a:	a80a      	add	r0, sp, #40	; 0x28
   2777c:	f7f1 fe32 	bl	193e4 <cbor_encoder_create_map>
    if (rc != 0) {
   27780:	4606      	mov	r6, r0
   27782:	2800      	cmp	r0, #0
   27784:	d1e1      	bne.n	2774a <log_reboot_write+0x1a>
{ return cbor_encode_text_string(encoder, string, strlen(string)); }
   27786:	2203      	movs	r2, #3
   27788:	4972      	ldr	r1, [pc, #456]	; (27954 <log_reboot_write+0x224>)
   2778a:	a806      	add	r0, sp, #24
   2778c:	f7f1 fe1c 	bl	193c8 <cbor_encode_text_string>
    cbor_encode_text_stringz(&map,log_reboot_reason_str(info->reason));
   27790:	8838      	ldrh	r0, [r7, #0]
   27792:	f7ff ff87 	bl	276a4 <log_reboot_reason_str>
   27796:	4604      	mov	r4, r0
   27798:	f7e4 f866 	bl	b868 <strlen>
   2779c:	4602      	mov	r2, r0
   2779e:	4621      	mov	r1, r4
   277a0:	a806      	add	r0, sp, #24
   277a2:	f7f1 fe11 	bl	193c8 <cbor_encode_text_string>
   277a6:	2203      	movs	r2, #3
   277a8:	496b      	ldr	r1, [pc, #428]	; (27958 <log_reboot_write+0x228>)
   277aa:	a806      	add	r0, sp, #24
   277ac:	f7f1 fe0c 	bl	193c8 <cbor_encode_text_string>
    cbor_encode_int(&map, reboot_cnt);
   277b0:	4b6a      	ldr	r3, [pc, #424]	; (2795c <log_reboot_write+0x22c>)
   277b2:	881a      	ldrh	r2, [r3, #0]
   277b4:	2300      	movs	r3, #0
   277b6:	a806      	add	r0, sp, #24
   277b8:	f7f1 fd85 	bl	192c6 <cbor_encode_int>
   277bc:	2203      	movs	r2, #3
   277be:	4968      	ldr	r1, [pc, #416]	; (27960 <log_reboot_write+0x230>)
   277c0:	a806      	add	r0, sp, #24
   277c2:	f7f1 fe01 	bl	193c8 <cbor_encode_text_string>
                  ver.iv_major, ver.iv_minor, ver.iv_revision,
   277c6:	f89d 3268 	ldrb.w	r3, [sp, #616]	; 0x268
   277ca:	f89d 2269 	ldrb.w	r2, [sp, #617]	; 0x269
   277ce:	f8bd 126a 	ldrh.w	r1, [sp, #618]	; 0x26a
    snprintf(buf, sizeof buf, "%u.%u.%u.%u",
   277d2:	989b      	ldr	r0, [sp, #620]	; 0x26c
   277d4:	9002      	str	r0, [sp, #8]
   277d6:	9101      	str	r1, [sp, #4]
   277d8:	9200      	str	r2, [sp, #0]
   277da:	4a62      	ldr	r2, [pc, #392]	; (27964 <log_reboot_write+0x234>)
   277dc:	f44f 7180 	mov.w	r1, #256	; 0x100
   277e0:	a852      	add	r0, sp, #328	; 0x148
   277e2:	f7e4 fb6c 	bl	bebe <snprintf>
   277e6:	a852      	add	r0, sp, #328	; 0x148
   277e8:	f7e4 f83e 	bl	b868 <strlen>
   277ec:	4602      	mov	r2, r0
   277ee:	a952      	add	r1, sp, #328	; 0x148
   277f0:	a806      	add	r0, sp, #24
   277f2:	f7f1 fde9 	bl	193c8 <cbor_encode_text_string>
   277f6:	2204      	movs	r2, #4
   277f8:	495b      	ldr	r1, [pc, #364]	; (27968 <log_reboot_write+0x238>)
   277fa:	a806      	add	r0, sp, #24
   277fc:	f7f1 fde4 	bl	193c8 <cbor_encode_text_string>
    for (i = 0; i < sizeof hash; i++) {
   27800:	4634      	mov	r4, r6
    off = 0;
   27802:	4635      	mov	r5, r6
   27804:	e00c      	b.n	27820 <log_reboot_write+0xf0>
                        (unsigned int)hash[i]);
   27806:	ab9c      	add	r3, sp, #624	; 0x270
   27808:	4423      	add	r3, r4
        off += snprintf(buf + off, sizeof buf - off, "%02x",
   2780a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
   2780e:	4a57      	ldr	r2, [pc, #348]	; (2796c <log_reboot_write+0x23c>)
   27810:	f5c5 7180 	rsb	r1, r5, #256	; 0x100
   27814:	a852      	add	r0, sp, #328	; 0x148
   27816:	4428      	add	r0, r5
   27818:	f7e4 fb51 	bl	bebe <snprintf>
   2781c:	3502      	adds	r5, #2
    for (i = 0; i < sizeof hash; i++) {
   2781e:	3401      	adds	r4, #1
   27820:	2c1f      	cmp	r4, #31
   27822:	d9f0      	bls.n	27806 <log_reboot_write+0xd6>
   27824:	a852      	add	r0, sp, #328	; 0x148
   27826:	f7e4 f81f 	bl	b868 <strlen>
   2782a:	4602      	mov	r2, r0
   2782c:	a952      	add	r1, sp, #328	; 0x148
   2782e:	a806      	add	r0, sp, #24
   27830:	f7f1 fdca 	bl	193c8 <cbor_encode_text_string>
    if (info->file != NULL) {
   27834:	687b      	ldr	r3, [r7, #4]
   27836:	b1eb      	cbz	r3, 27874 <log_reboot_write+0x144>
   27838:	2203      	movs	r2, #3
   2783a:	494d      	ldr	r1, [pc, #308]	; (27970 <log_reboot_write+0x240>)
   2783c:	a806      	add	r0, sp, #24
   2783e:	f7f1 fdc3 	bl	193c8 <cbor_encode_text_string>
        if (strlen(info->file) > ((sizeof buf) / 3)) {
   27842:	687c      	ldr	r4, [r7, #4]
   27844:	4620      	mov	r0, r4
   27846:	f7e4 f80f 	bl	b868 <strlen>
   2784a:	2855      	cmp	r0, #85	; 0x55
   2784c:	d94c      	bls.n	278e8 <log_reboot_write+0x1b8>
            off = strlen(info->file) - ((sizeof buf) / 3);
   2784e:	f1a0 0355 	sub.w	r3, r0, #85	; 0x55
        snprintf(buf, sizeof buf, "%s:%d",
   27852:	68ba      	ldr	r2, [r7, #8]
   27854:	9200      	str	r2, [sp, #0]
   27856:	4423      	add	r3, r4
   27858:	4a46      	ldr	r2, [pc, #280]	; (27974 <log_reboot_write+0x244>)
   2785a:	f44f 7180 	mov.w	r1, #256	; 0x100
   2785e:	a852      	add	r0, sp, #328	; 0x148
   27860:	f7e4 fb2d 	bl	bebe <snprintf>
   27864:	a852      	add	r0, sp, #328	; 0x148
   27866:	f7e3 ffff 	bl	b868 <strlen>
   2786a:	4602      	mov	r2, r0
   2786c:	a952      	add	r1, sp, #328	; 0x148
   2786e:	a806      	add	r0, sp, #24
   27870:	f7f1 fdaa 	bl	193c8 <cbor_encode_text_string>
    if (info->pc != 0) {
   27874:	68fb      	ldr	r3, [r7, #12]
   27876:	2b00      	cmp	r3, #0
   27878:	d138      	bne.n	278ec <log_reboot_write+0x1bc>
    state_flags = img_mgmt_state_flags(boot_current_slot);
   2787a:	4b35      	ldr	r3, [pc, #212]	; (27950 <log_reboot_write+0x220>)
   2787c:	6818      	ldr	r0, [r3, #0]
   2787e:	f7f0 f9b7 	bl	17bf0 <img_mgmt_state_flags>
   27882:	4605      	mov	r5, r0
   27884:	2205      	movs	r2, #5
   27886:	493c      	ldr	r1, [pc, #240]	; (27978 <log_reboot_write+0x248>)
   27888:	a806      	add	r0, sp, #24
   2788a:	f7f1 fd9d 	bl	193c8 <cbor_encode_text_string>
    buf[0] = '\0';
   2788e:	2300      	movs	r3, #0
   27890:	f88d 3148 	strb.w	r3, [sp, #328]	; 0x148
    if (state_flags & IMG_MGMT_STATE_F_ACTIVE) {
   27894:	f015 0f04 	tst.w	r5, #4
   27898:	d133      	bne.n	27902 <log_reboot_write+0x1d2>
    off = 0;
   2789a:	4634      	mov	r4, r6
    if (!(flags & IMAGE_F_NON_BOOTABLE)) {
   2789c:	9b05      	ldr	r3, [sp, #20]
   2789e:	f013 0f10 	tst.w	r3, #16
   278a2:	d037      	beq.n	27914 <log_reboot_write+0x1e4>
    if (state_flags & IMG_MGMT_STATE_F_CONFIRMED) {
   278a4:	f015 0f02 	tst.w	r5, #2
   278a8:	d13e      	bne.n	27928 <log_reboot_write+0x1f8>
    if (state_flags & IMG_MGMT_STATE_F_PENDING) {
   278aa:	f015 0f01 	tst.w	r5, #1
   278ae:	d145      	bne.n	2793c <log_reboot_write+0x20c>
    if (off > 1) {
   278b0:	2c01      	cmp	r4, #1
   278b2:	dd03      	ble.n	278bc <log_reboot_write+0x18c>
        buf[off - 1] = '\0';
   278b4:	3c01      	subs	r4, #1
   278b6:	ab52      	add	r3, sp, #328	; 0x148
   278b8:	2200      	movs	r2, #0
   278ba:	551a      	strb	r2, [r3, r4]
   278bc:	a852      	add	r0, sp, #328	; 0x148
   278be:	f7e3 ffd3 	bl	b868 <strlen>
   278c2:	4602      	mov	r2, r0
   278c4:	a952      	add	r1, sp, #328	; 0x148
   278c6:	a806      	add	r0, sp, #24
   278c8:	f7f1 fd7e 	bl	193c8 <cbor_encode_text_string>
    cbor_buf_len = cbor_buf_writer_buffer_size(&writer, cbor_enc_buf) + 1;
   278cc:	a912      	add	r1, sp, #72	; 0x48
   278ce:	a80e      	add	r0, sp, #56	; 0x38
   278d0:	f000 fda4 	bl	2841c <cbor_buf_writer_buffer_size>
    rc = cbor_encoder_close_container(&enc, &map);
   278d4:	a906      	add	r1, sp, #24
   278d6:	a80a      	add	r0, sp, #40	; 0x28
   278d8:	f7f1 fd94 	bl	19404 <cbor_encoder_close_container>
    if (rc != 0) {
   278dc:	2800      	cmp	r0, #0
   278de:	f43f af34 	beq.w	2774a <log_reboot_write+0x1a>
        return SYS_ENOMEM;
   278e2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   278e6:	e730      	b.n	2774a <log_reboot_write+0x1a>
        off  = 0;
   278e8:	4633      	mov	r3, r6
   278ea:	e7b2      	b.n	27852 <log_reboot_write+0x122>
   278ec:	2202      	movs	r2, #2
   278ee:	4923      	ldr	r1, [pc, #140]	; (2797c <log_reboot_write+0x24c>)
   278f0:	a806      	add	r0, sp, #24
   278f2:	f7f1 fd69 	bl	193c8 <cbor_encode_text_string>
        cbor_encode_int(&map, info->pc);
   278f6:	68fa      	ldr	r2, [r7, #12]
   278f8:	2300      	movs	r3, #0
   278fa:	a806      	add	r0, sp, #24
   278fc:	f7f1 fce3 	bl	192c6 <cbor_encode_int>
   27900:	e7bb      	b.n	2787a <log_reboot_write+0x14a>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "active");
   27902:	4b1f      	ldr	r3, [pc, #124]	; (27980 <log_reboot_write+0x250>)
   27904:	4a1f      	ldr	r2, [pc, #124]	; (27984 <log_reboot_write+0x254>)
   27906:	f44f 7180 	mov.w	r1, #256	; 0x100
   2790a:	a852      	add	r0, sp, #328	; 0x148
   2790c:	f7e4 fad7 	bl	bebe <snprintf>
   27910:	2407      	movs	r4, #7
   27912:	e7c3      	b.n	2789c <log_reboot_write+0x16c>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "bootable");
   27914:	4b1c      	ldr	r3, [pc, #112]	; (27988 <log_reboot_write+0x258>)
   27916:	4a1b      	ldr	r2, [pc, #108]	; (27984 <log_reboot_write+0x254>)
   27918:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   2791c:	a852      	add	r0, sp, #328	; 0x148
   2791e:	4420      	add	r0, r4
   27920:	f7e4 facd 	bl	bebe <snprintf>
   27924:	3409      	adds	r4, #9
   27926:	e7bd      	b.n	278a4 <log_reboot_write+0x174>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "confirmed");
   27928:	4b18      	ldr	r3, [pc, #96]	; (2798c <log_reboot_write+0x25c>)
   2792a:	4a16      	ldr	r2, [pc, #88]	; (27984 <log_reboot_write+0x254>)
   2792c:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   27930:	a852      	add	r0, sp, #328	; 0x148
   27932:	4420      	add	r0, r4
   27934:	f7e4 fac3 	bl	bebe <snprintf>
   27938:	340a      	adds	r4, #10
   2793a:	e7b6      	b.n	278aa <log_reboot_write+0x17a>
        off += snprintf(buf + off, sizeof buf - off, "%s ", "pending");
   2793c:	4b14      	ldr	r3, [pc, #80]	; (27990 <log_reboot_write+0x260>)
   2793e:	4a11      	ldr	r2, [pc, #68]	; (27984 <log_reboot_write+0x254>)
   27940:	f5c4 7180 	rsb	r1, r4, #256	; 0x100
   27944:	a852      	add	r0, sp, #328	; 0x148
   27946:	4420      	add	r0, r4
   27948:	f7e4 fab9 	bl	bebe <snprintf>
   2794c:	3408      	adds	r4, #8
   2794e:	e7af      	b.n	278b0 <log_reboot_write+0x180>
   27950:	20008000 	.word	0x20008000
   27954:	000299c0 	.word	0x000299c0
   27958:	000299c4 	.word	0x000299c4
   2795c:	200094c2 	.word	0x200094c2
   27960:	000299c8 	.word	0x000299c8
   27964:	000299cc 	.word	0x000299cc
   27968:	000292fc 	.word	0x000292fc
   2796c:	00029034 	.word	0x00029034
   27970:	000299d8 	.word	0x000299d8
   27974:	000299dc 	.word	0x000299dc
   27978:	000299e8 	.word	0x000299e8
   2797c:	000299e4 	.word	0x000299e4
   27980:	00029324 	.word	0x00029324
   27984:	000299f0 	.word	0x000299f0
   27988:	00029304 	.word	0x00029304
   2798c:	00029318 	.word	0x00029318
   27990:	00029310 	.word	0x00029310

00027994 <log_reboot>:
{
   27994:	b538      	push	{r3, r4, r5, lr}
    if (log_reboot_written) {
   27996:	4b0d      	ldr	r3, [pc, #52]	; (279cc <log_reboot+0x38>)
   27998:	f993 3000 	ldrsb.w	r3, [r3]
   2799c:	b113      	cbz	r3, 279a4 <log_reboot+0x10>
        return 0;
   2799e:	2500      	movs	r5, #0
}
   279a0:	4628      	mov	r0, r5
   279a2:	bd38      	pop	{r3, r4, r5, pc}
   279a4:	4604      	mov	r4, r0
    rc = log_reboot_write(info);
   279a6:	f7ff fec3 	bl	27730 <log_reboot_write>
    if (rc != 0) {
   279aa:	4605      	mov	r5, r0
   279ac:	2800      	cmp	r0, #0
   279ae:	d1f7      	bne.n	279a0 <log_reboot+0xc>
    if (info->reason != HAL_RESET_REQUESTED &&
   279b0:	8823      	ldrh	r3, [r4, #0]
   279b2:	2b06      	cmp	r3, #6
   279b4:	d0f4      	beq.n	279a0 <log_reboot+0xc>
   279b6:	2b08      	cmp	r3, #8
   279b8:	d0f2      	beq.n	279a0 <log_reboot+0xc>
        log_reboot_written = 1;
   279ba:	4b04      	ldr	r3, [pc, #16]	; (279cc <log_reboot+0x38>)
   279bc:	2201      	movs	r2, #1
   279be:	701a      	strb	r2, [r3, #0]
        conf_save_one("reboot/written", "1");
   279c0:	4903      	ldr	r1, [pc, #12]	; (279d0 <log_reboot+0x3c>)
   279c2:	4804      	ldr	r0, [pc, #16]	; (279d4 <log_reboot+0x40>)
   279c4:	f7ee fef0 	bl	167a8 <conf_save_one>
   279c8:	e7ea      	b.n	279a0 <log_reboot+0xc>
   279ca:	bf00      	nop
   279cc:	200094c0 	.word	0x200094c0
   279d0:	00029954 	.word	0x00029954
   279d4:	00029a08 	.word	0x00029a08

000279d8 <log_reboot_pkg_init>:

void
log_reboot_pkg_init(void)
{
   279d8:	b510      	push	{r4, lr}
   279da:	b082      	sub	sp, #8
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   279dc:	4b17      	ldr	r3, [pc, #92]	; (27a3c <log_reboot_pkg_init+0x64>)
   279de:	781b      	ldrb	r3, [r3, #0]
   279e0:	b143      	cbz	r3, 279f4 <log_reboot_pkg_init+0x1c>

    rc = conf_register(&reboot_conf_handler);
   279e2:	4817      	ldr	r0, [pc, #92]	; (27a40 <log_reboot_pkg_init+0x68>)
   279e4:	f7ee ff70 	bl	168c8 <conf_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   279e8:	b970      	cbnz	r0, 27a08 <log_reboot_pkg_init+0x30>
#if MYNEWT_VAL(REBOOT_LOG_FCB)
    rc = log_reboot_init_fcb();
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
#if MYNEWT_VAL(REBOOT_LOG_CONSOLE)
    rc = log_reboot_init_console();
   279ea:	f7ff fde1 	bl	275b0 <log_reboot_init_console>
    SYSINIT_PANIC_ASSERT(rc == 0);
   279ee:	b9c0      	cbnz	r0, 27a22 <log_reboot_pkg_init+0x4a>
#endif
}
   279f0:	b002      	add	sp, #8
   279f2:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   279f4:	f7e0 fbe4 	bl	81c0 <hal_debugger_connected>
   279f8:	b100      	cbz	r0, 279fc <log_reboot_pkg_init+0x24>
   279fa:	be01      	bkpt	0x0001
   279fc:	2300      	movs	r3, #0
   279fe:	461a      	mov	r2, r3
   27a00:	4619      	mov	r1, r3
   27a02:	4618      	mov	r0, r3
   27a04:	f7e1 ff72 	bl	98ec <__assert_func>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27a08:	f7e0 fbda 	bl	81c0 <hal_debugger_connected>
   27a0c:	b100      	cbz	r0, 27a10 <log_reboot_pkg_init+0x38>
   27a0e:	be01      	bkpt	0x0001
   27a10:	2000      	movs	r0, #0
   27a12:	9000      	str	r0, [sp, #0]
   27a14:	4b0b      	ldr	r3, [pc, #44]	; (27a44 <log_reboot_pkg_init+0x6c>)
   27a16:	681c      	ldr	r4, [r3, #0]
   27a18:	4603      	mov	r3, r0
   27a1a:	4602      	mov	r2, r0
   27a1c:	4601      	mov	r1, r0
   27a1e:	47a0      	blx	r4
   27a20:	e7e3      	b.n	279ea <log_reboot_pkg_init+0x12>
    SYSINIT_PANIC_ASSERT(rc == 0);
   27a22:	f7e0 fbcd 	bl	81c0 <hal_debugger_connected>
   27a26:	b100      	cbz	r0, 27a2a <log_reboot_pkg_init+0x52>
   27a28:	be01      	bkpt	0x0001
   27a2a:	2000      	movs	r0, #0
   27a2c:	9000      	str	r0, [sp, #0]
   27a2e:	4b05      	ldr	r3, [pc, #20]	; (27a44 <log_reboot_pkg_init+0x6c>)
   27a30:	681c      	ldr	r4, [r3, #0]
   27a32:	4603      	mov	r3, r0
   27a34:	4602      	mov	r2, r0
   27a36:	4601      	mov	r1, r0
   27a38:	47a0      	blx	r4
}
   27a3a:	e7d9      	b.n	279f0 <log_reboot_pkg_init+0x18>
   27a3c:	20000506 	.word	0x20000506
   27a40:	20000498 	.word	0x20000498
   27a44:	200000ec 	.word	0x200000ec

00027a48 <scfg_find_setting_by_val>:
static struct scfg_setting *
scfg_find_setting_by_val(const struct scfg_group *group, const void *val)
{
    const struct scfg_setting *setting;

    SCFG_FOREACH_SETTING(group, setting) {
   27a48:	6800      	ldr	r0, [r0, #0]
   27a4a:	6803      	ldr	r3, [r0, #0]
   27a4c:	b123      	cbz	r3, 27a58 <scfg_find_setting_by_val+0x10>
        if (setting->val == val) {
   27a4e:	6843      	ldr	r3, [r0, #4]
   27a50:	428b      	cmp	r3, r1
   27a52:	d002      	beq.n	27a5a <scfg_find_setting_by_val+0x12>
    SCFG_FOREACH_SETTING(group, setting) {
   27a54:	3010      	adds	r0, #16
   27a56:	e7f8      	b.n	27a4a <scfg_find_setting_by_val+0x2>
            /* Cast away const. */
            return (struct scfg_setting *)setting;
        }
    }

    return NULL;
   27a58:	2000      	movs	r0, #0
}
   27a5a:	4770      	bx	lr

00027a5c <scfg_setting_id>:
{
   27a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27a60:	4682      	mov	sl, r0
   27a62:	4688      	mov	r8, r1
   27a64:	4614      	mov	r4, r2
    group_len = strlen(group_name);
   27a66:	f7e3 feff 	bl	b868 <strlen>
   27a6a:	4605      	mov	r5, r0
    setting_len = strlen(setting_name);
   27a6c:	4640      	mov	r0, r8
   27a6e:	f7e3 fefb 	bl	b868 <strlen>
    assert(group_len + 1 + setting_len < SCFG_SETTING_ID_BUF_SIZE);
   27a72:	1c6f      	adds	r7, r5, #1
   27a74:	183e      	adds	r6, r7, r0
   27a76:	2e40      	cmp	r6, #64	; 0x40
   27a78:	dc10      	bgt.n	27a9c <scfg_setting_id+0x40>
   27a7a:	4681      	mov	r9, r0
    memcpy(&buf[off], group_name, group_len);
   27a7c:	462a      	mov	r2, r5
   27a7e:	4651      	mov	r1, sl
   27a80:	4620      	mov	r0, r4
   27a82:	f7e3 fe93 	bl	b7ac <memcpy>
    buf[off] = '/';
   27a86:	232f      	movs	r3, #47	; 0x2f
   27a88:	5563      	strb	r3, [r4, r5]
    memcpy(&buf[off], setting_name, setting_len);
   27a8a:	464a      	mov	r2, r9
   27a8c:	4641      	mov	r1, r8
   27a8e:	19e0      	adds	r0, r4, r7
   27a90:	f7e3 fe8c 	bl	b7ac <memcpy>
    buf[off] = '\0';
   27a94:	2300      	movs	r3, #0
   27a96:	55a3      	strb	r3, [r4, r6]
}
   27a98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    assert(group_len + 1 + setting_len < SCFG_SETTING_ID_BUF_SIZE);
   27a9c:	f7e0 fb90 	bl	81c0 <hal_debugger_connected>
   27aa0:	b100      	cbz	r0, 27aa4 <scfg_setting_id+0x48>
   27aa2:	be01      	bkpt	0x0001
   27aa4:	2300      	movs	r3, #0
   27aa6:	461a      	mov	r2, r3
   27aa8:	4619      	mov	r1, r3
   27aaa:	4618      	mov	r0, r3
   27aac:	f7e1 ff1e 	bl	98ec <__assert_func>

00027ab0 <scfg_handler_export>:
}

static int
scfg_handler_export(void (*func)(char *name, char *val),
                    enum conf_export_tgt tgt, void *arg)
{
   27ab0:	b570      	push	{r4, r5, r6, lr}
   27ab2:	b098      	sub	sp, #96	; 0x60
   27ab4:	4606      	mov	r6, r0
   27ab6:	4615      	mov	r5, r2
    char val_buf[SCFG_NUM_STR_BUF_SIZE];
    char *val;

    group = arg;

    SCFG_FOREACH_SETTING(group, setting) {
   27ab8:	6814      	ldr	r4, [r2, #0]
   27aba:	e009      	b.n	27ad0 <scfg_handler_export+0x20>
        scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
        if (setting->private) {
            val = "<set>";
        } else {
            val = conf_str_from_value(setting->type, setting->val,
   27abc:	2315      	movs	r3, #21
   27abe:	aa01      	add	r2, sp, #4
   27ac0:	6861      	ldr	r1, [r4, #4]
   27ac2:	7b20      	ldrb	r0, [r4, #12]
   27ac4:	f7ee fff2 	bl	16aac <conf_str_from_value>
   27ac8:	4601      	mov	r1, r0
                                      val_buf, sizeof val_buf);
        }
        func(id_buf, val);
   27aca:	a807      	add	r0, sp, #28
   27acc:	47b0      	blx	r6
    SCFG_FOREACH_SETTING(group, setting) {
   27ace:	3410      	adds	r4, #16
   27ad0:	6821      	ldr	r1, [r4, #0]
   27ad2:	b141      	cbz	r1, 27ae6 <scfg_handler_export+0x36>
        scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
   27ad4:	aa07      	add	r2, sp, #28
   27ad6:	68a8      	ldr	r0, [r5, #8]
   27ad8:	f7ff ffc0 	bl	27a5c <scfg_setting_id>
        if (setting->private) {
   27adc:	7b63      	ldrb	r3, [r4, #13]
   27ade:	2b00      	cmp	r3, #0
   27ae0:	d0ec      	beq.n	27abc <scfg_handler_export+0xc>
            val = "<set>";
   27ae2:	4902      	ldr	r1, [pc, #8]	; (27aec <scfg_handler_export+0x3c>)
   27ae4:	e7f1      	b.n	27aca <scfg_handler_export+0x1a>
    }

    return 0;
}
   27ae6:	2000      	movs	r0, #0
   27ae8:	b018      	add	sp, #96	; 0x60
   27aea:	bd70      	pop	{r4, r5, r6, pc}
   27aec:	00029a34 	.word	0x00029a34

00027af0 <scfg_find_setting_by_name>:
{
   27af0:	b538      	push	{r3, r4, r5, lr}
   27af2:	460d      	mov	r5, r1
    SCFG_FOREACH_SETTING(group, setting) {
   27af4:	6804      	ldr	r4, [r0, #0]
   27af6:	6820      	ldr	r0, [r4, #0]
   27af8:	b128      	cbz	r0, 27b06 <scfg_find_setting_by_name+0x16>
        if (strcmp(setting->name, setting_name) == 0) {
   27afa:	4629      	mov	r1, r5
   27afc:	f7e3 fea6 	bl	b84c <strcmp>
   27b00:	b110      	cbz	r0, 27b08 <scfg_find_setting_by_name+0x18>
    SCFG_FOREACH_SETTING(group, setting) {
   27b02:	3410      	adds	r4, #16
   27b04:	e7f7      	b.n	27af6 <scfg_find_setting_by_name+0x6>
    return NULL;
   27b06:	2400      	movs	r4, #0
}
   27b08:	4620      	mov	r0, r4
   27b0a:	bd38      	pop	{r3, r4, r5, pc}

00027b0c <scfg_handler_get>:
    if (argc < 1) {
   27b0c:	2800      	cmp	r0, #0
   27b0e:	dd0e      	ble.n	27b2e <scfg_handler_get+0x22>
{
   27b10:	b570      	push	{r4, r5, r6, lr}
   27b12:	461d      	mov	r5, r3
   27b14:	4614      	mov	r4, r2
    setting = scfg_find_setting_by_name(group, argv[0]);
   27b16:	6809      	ldr	r1, [r1, #0]
   27b18:	9804      	ldr	r0, [sp, #16]
   27b1a:	f7ff ffe9 	bl	27af0 <scfg_find_setting_by_name>
    if (setting == NULL) {
   27b1e:	b140      	cbz	r0, 27b32 <scfg_handler_get+0x26>
    return conf_str_from_value(setting->type, setting->val, buf, max_len);
   27b20:	462b      	mov	r3, r5
   27b22:	4622      	mov	r2, r4
   27b24:	6841      	ldr	r1, [r0, #4]
   27b26:	7b00      	ldrb	r0, [r0, #12]
   27b28:	f7ee ffc0 	bl	16aac <conf_str_from_value>
}
   27b2c:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
   27b2e:	2000      	movs	r0, #0
}
   27b30:	4770      	bx	lr
        return NULL;
   27b32:	2000      	movs	r0, #0
   27b34:	e7fa      	b.n	27b2c <scfg_handler_get+0x20>

00027b36 <scfg_handler_set>:
    if (argc < 1) {
   27b36:	2800      	cmp	r0, #0
   27b38:	dd15      	ble.n	27b66 <scfg_handler_set+0x30>
{
   27b3a:	b510      	push	{r4, lr}
   27b3c:	4618      	mov	r0, r3
   27b3e:	4614      	mov	r4, r2
    setting = scfg_find_setting_by_name(group, argv[0]);
   27b40:	6809      	ldr	r1, [r1, #0]
   27b42:	f7ff ffd5 	bl	27af0 <scfg_find_setting_by_name>
    if (setting == NULL) {
   27b46:	b190      	cbz	r0, 27b6e <scfg_handler_set+0x38>
    rc = conf_value_from_str(val, setting->type, setting->val,
   27b48:	6883      	ldr	r3, [r0, #8]
   27b4a:	6842      	ldr	r2, [r0, #4]
   27b4c:	7b01      	ldrb	r1, [r0, #12]
   27b4e:	4620      	mov	r0, r4
   27b50:	f7ee fefd 	bl	1694e <conf_value_from_str>
    if (rc != 0) {
   27b54:	4603      	mov	r3, r0
   27b56:	b908      	cbnz	r0, 27b5c <scfg_handler_set+0x26>
}
   27b58:	4618      	mov	r0, r3
   27b5a:	bd10      	pop	{r4, pc}
        return os_error_to_sys(rc);
   27b5c:	b2c0      	uxtb	r0, r0
   27b5e:	f000 fd5b 	bl	28618 <os_error_to_sys>
   27b62:	4603      	mov	r3, r0
   27b64:	e7f8      	b.n	27b58 <scfg_handler_set+0x22>
        return SYS_EINVAL;
   27b66:	f06f 0301 	mvn.w	r3, #1
}
   27b6a:	4618      	mov	r0, r3
   27b6c:	4770      	bx	lr
        return SYS_ENOENT;
   27b6e:	f06f 0303 	mvn.w	r3, #3
   27b72:	e7f1      	b.n	27b58 <scfg_handler_set+0x22>

00027b74 <scfg_save_setting>:

int
scfg_save_setting(const struct scfg_group *group,
                  const struct scfg_setting *setting)
{
   27b74:	b570      	push	{r4, r5, r6, lr}
   27b76:	b098      	sub	sp, #96	; 0x60
   27b78:	4606      	mov	r6, r0
   27b7a:	460c      	mov	r4, r1
    char id_buf[SCFG_SETTING_ID_BUF_SIZE];
    char val_buf[SCFG_NUM_STR_BUF_SIZE];
    char *val;
    int rc;

    val = conf_str_from_value(setting->type, setting->val,
   27b7c:	2315      	movs	r3, #21
   27b7e:	aa01      	add	r2, sp, #4
   27b80:	6849      	ldr	r1, [r1, #4]
   27b82:	7b20      	ldrb	r0, [r4, #12]
   27b84:	f7ee ff92 	bl	16aac <conf_str_from_value>
                              val_buf, sizeof val_buf);
    if (val == NULL) {
   27b88:	b198      	cbz	r0, 27bb2 <scfg_save_setting+0x3e>
   27b8a:	4605      	mov	r5, r0
        return SYS_EUNKNOWN;
    }

    scfg_setting_id(group->handler.ch_name, setting->name, id_buf);
   27b8c:	aa07      	add	r2, sp, #28
   27b8e:	6821      	ldr	r1, [r4, #0]
   27b90:	68b0      	ldr	r0, [r6, #8]
   27b92:	f7ff ff63 	bl	27a5c <scfg_setting_id>

    rc = conf_save_one(id_buf, val);
   27b96:	4629      	mov	r1, r5
   27b98:	a807      	add	r0, sp, #28
   27b9a:	f7ee fe05 	bl	167a8 <conf_save_one>
    if (rc != 0) {
   27b9e:	4603      	mov	r3, r0
   27ba0:	b910      	cbnz	r0, 27ba8 <scfg_save_setting+0x34>
        return os_error_to_sys(rc);
    }

    return 0;
}
   27ba2:	4618      	mov	r0, r3
   27ba4:	b018      	add	sp, #96	; 0x60
   27ba6:	bd70      	pop	{r4, r5, r6, pc}
        return os_error_to_sys(rc);
   27ba8:	b2c0      	uxtb	r0, r0
   27baa:	f000 fd35 	bl	28618 <os_error_to_sys>
   27bae:	4603      	mov	r3, r0
   27bb0:	e7f7      	b.n	27ba2 <scfg_save_setting+0x2e>
        return SYS_EUNKNOWN;
   27bb2:	f06f 030c 	mvn.w	r3, #12
   27bb6:	e7f4      	b.n	27ba2 <scfg_save_setting+0x2e>

00027bb8 <scfg_save_val>:
    return scfg_save_setting(group, setting);
}

int
scfg_save_val(const struct scfg_group *group, const void *val)
{
   27bb8:	b510      	push	{r4, lr}
   27bba:	4604      	mov	r4, r0
    const struct scfg_setting *setting;

    setting = scfg_find_setting_by_val(group, val);
   27bbc:	f7ff ff44 	bl	27a48 <scfg_find_setting_by_val>
    if (setting == NULL) {
   27bc0:	b120      	cbz	r0, 27bcc <scfg_save_val+0x14>
   27bc2:	4601      	mov	r1, r0
        return SYS_ENOENT;
    }

    return scfg_save_setting(group, setting);
   27bc4:	4620      	mov	r0, r4
   27bc6:	f7ff ffd5 	bl	27b74 <scfg_save_setting>
}
   27bca:	bd10      	pop	{r4, pc}
        return SYS_ENOENT;
   27bcc:	f06f 0003 	mvn.w	r0, #3
   27bd0:	e7fb      	b.n	27bca <scfg_save_val+0x12>
	...

00027bd4 <scfg_register>:

int
scfg_register(struct scfg_group *group, char *name)
{
   27bd4:	b570      	push	{r4, r5, r6, lr}
    const struct scfg_setting *setting;
    int rc;

    SCFG_FOREACH_SETTING(group, setting) {
   27bd6:	6802      	ldr	r2, [r0, #0]
   27bd8:	e000      	b.n	27bdc <scfg_register+0x8>
   27bda:	3210      	adds	r2, #16
   27bdc:	6813      	ldr	r3, [r2, #0]
   27bde:	b30b      	cbz	r3, 27c24 <scfg_register+0x50>
        switch (setting->type) {
   27be0:	7b13      	ldrb	r3, [r2, #12]
   27be2:	3b02      	subs	r3, #2
   27be4:	2b0c      	cmp	r3, #12
   27be6:	d83b      	bhi.n	27c60 <scfg_register+0x8c>
   27be8:	a401      	add	r4, pc, #4	; (adr r4, 27bf0 <scfg_register+0x1c>)
   27bea:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
   27bee:	bf00      	nop
   27bf0:	00027bdb 	.word	0x00027bdb
   27bf4:	00027bdb 	.word	0x00027bdb
   27bf8:	00027bdb 	.word	0x00027bdb
   27bfc:	00027bdb 	.word	0x00027bdb
   27c00:	00027bdb 	.word	0x00027bdb
   27c04:	00027c61 	.word	0x00027c61
   27c08:	00027c61 	.word	0x00027c61
   27c0c:	00027c61 	.word	0x00027c61
   27c10:	00027bdb 	.word	0x00027bdb
   27c14:	00027bdb 	.word	0x00027bdb
   27c18:	00027bdb 	.word	0x00027bdb
   27c1c:	00027bdb 	.word	0x00027bdb
   27c20:	00027bdb 	.word	0x00027bdb
   27c24:	460d      	mov	r5, r1
   27c26:	4604      	mov	r4, r0
            /* We don't know how to (de)serialize the other data types. */
            return SYS_EINVAL;
        }
    }

    group->handler = (struct conf_handler) {
   27c28:	1d06      	adds	r6, r0, #4
   27c2a:	2220      	movs	r2, #32
   27c2c:	2100      	movs	r1, #0
   27c2e:	4630      	mov	r0, r6
   27c30:	f7e3 fde5 	bl	b7fe <memset>
   27c34:	60a5      	str	r5, [r4, #8]
   27c36:	2301      	movs	r3, #1
   27c38:	7323      	strb	r3, [r4, #12]
   27c3a:	4b0b      	ldr	r3, [pc, #44]	; (27c68 <scfg_register+0x94>)
   27c3c:	6123      	str	r3, [r4, #16]
   27c3e:	4b0b      	ldr	r3, [pc, #44]	; (27c6c <scfg_register+0x98>)
   27c40:	6163      	str	r3, [r4, #20]
   27c42:	4b0b      	ldr	r3, [pc, #44]	; (27c70 <scfg_register+0x9c>)
   27c44:	61e3      	str	r3, [r4, #28]
   27c46:	6224      	str	r4, [r4, #32]
        .ch_export_ext = scfg_handler_export,
        .ch_arg = group,
        .ch_ext = true,
    };

    rc = conf_register(&group->handler);
   27c48:	4630      	mov	r0, r6
   27c4a:	f7ee fe3d 	bl	168c8 <conf_register>
    if (rc != 0) {
   27c4e:	4603      	mov	r3, r0
   27c50:	b908      	cbnz	r0, 27c56 <scfg_register+0x82>
        return os_error_to_sys(rc);
    }

    return 0;
}
   27c52:	4618      	mov	r0, r3
   27c54:	bd70      	pop	{r4, r5, r6, pc}
        return os_error_to_sys(rc);
   27c56:	b2c0      	uxtb	r0, r0
   27c58:	f000 fcde 	bl	28618 <os_error_to_sys>
   27c5c:	4603      	mov	r3, r0
   27c5e:	e7f8      	b.n	27c52 <scfg_register+0x7e>
            return SYS_EINVAL;
   27c60:	f06f 0301 	mvn.w	r3, #1
   27c64:	e7f5      	b.n	27c52 <scfg_register+0x7e>
   27c66:	bf00      	nop
   27c68:	00027b0d 	.word	0x00027b0d
   27c6c:	00027b37 	.word	0x00027b37
   27c70:	00027ab1 	.word	0x00027ab1

00027c74 <ull_to_s>:
#include <stdbool.h>
#include "util/mcumgr_util.h"

int
ull_to_s(unsigned long long val, int dst_max_len, char *dst)
{
   27c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   27c78:	4604      	mov	r4, r0
   27c7a:	460d      	mov	r5, r1
   27c7c:	4699      	mov	r9, r3
    int digit;
    int off;
    int len;

    /* First, calculate the length of the resulting string. */
    copy = val;
   27c7e:	4603      	mov	r3, r0
    for (len = 0; copy != 0; len++) {
   27c80:	2700      	movs	r7, #0
   27c82:	e004      	b.n	27c8e <ull_to_s+0x1a>
        copy /= 10;
   27c84:	4916      	ldr	r1, [pc, #88]	; (27ce0 <ull_to_s+0x6c>)
   27c86:	fba1 1303 	umull	r1, r3, r1, r3
   27c8a:	08db      	lsrs	r3, r3, #3
    for (len = 0; copy != 0; len++) {
   27c8c:	3701      	adds	r7, #1
   27c8e:	2b00      	cmp	r3, #0
   27c90:	d1f8      	bne.n	27c84 <ull_to_s+0x10>
    }

    /* A value of 0 still requires one character ("0"). */
    if (len == 0) {
   27c92:	b907      	cbnz	r7, 27c96 <ull_to_s+0x22>
        len = 1;
   27c94:	2701      	movs	r7, #1
    }

    /* Ensure the buffer can accommodate the string and terminator. */
    if (len >= dst_max_len - 1) {
   27c96:	3a01      	subs	r2, #1
   27c98:	42ba      	cmp	r2, r7
   27c9a:	dd1d      	ble.n	27cd8 <ull_to_s+0x64>
        return -1;
    }

    /* Encode the string from right to left. */
    off = len;
    dst[off--] = '\0';
   27c9c:	1e7e      	subs	r6, r7, #1
   27c9e:	2300      	movs	r3, #0
   27ca0:	f809 3007 	strb.w	r3, [r9, r7]
    do {
        digit = val % 10;
   27ca4:	220a      	movs	r2, #10
   27ca6:	2300      	movs	r3, #0
   27ca8:	4620      	mov	r0, r4
   27caa:	4629      	mov	r1, r5
   27cac:	f7e4 f982 	bl	bfb4 <__aeabi_uldivmod>
        dst[off--] = '0' + digit;
   27cb0:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   27cb4:	3230      	adds	r2, #48	; 0x30
   27cb6:	f809 2006 	strb.w	r2, [r9, r6]

        val /= 10;
   27cba:	220a      	movs	r2, #10
   27cbc:	2300      	movs	r3, #0
   27cbe:	4620      	mov	r0, r4
   27cc0:	4629      	mov	r1, r5
   27cc2:	f7e4 f977 	bl	bfb4 <__aeabi_uldivmod>
   27cc6:	4604      	mov	r4, r0
   27cc8:	460d      	mov	r5, r1
        dst[off--] = '0' + digit;
   27cca:	4646      	mov	r6, r8
    } while (val > 0);
   27ccc:	ea54 0305 	orrs.w	r3, r4, r5
   27cd0:	d1e8      	bne.n	27ca4 <ull_to_s+0x30>

    return len;
}
   27cd2:	4638      	mov	r0, r7
   27cd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return -1;
   27cd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   27cdc:	e7f9      	b.n	27cd2 <ull_to_s+0x5e>
   27cde:	bf00      	nop
   27ce0:	cccccccd 	.word	0xcccccccd

00027ce4 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   27ce4:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   27ce6:	4803      	ldr	r0, [pc, #12]	; (27cf4 <__wrap_coap_receive+0x10>)
   27ce8:	f7e1 fb0a 	bl	9300 <console_printf>
    return -1;
}
   27cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   27cf0:	bd08      	pop	{r3, pc}
   27cf2:	bf00      	nop
   27cf4:	00029a3c 	.word	0x00029a3c

00027cf8 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   27cf8:	4770      	bx	lr

00027cfa <valid_attr_type>:
 * one-to-one because of signedness of integers
 * and therefore we need a function to do this trickery */
static int
valid_attr_type(CborType ct, CborAttrType at)
{
    switch (at) {
   27cfa:	3901      	subs	r1, #1
   27cfc:	290a      	cmp	r1, #10
   27cfe:	d82a      	bhi.n	27d56 <valid_attr_type+0x5c>
   27d00:	e8df f001 	tbb	[pc, r1]
   27d04:	0d090606 	.word	0x0d090606
   27d08:	1d191511 	.word	0x1d191511
   27d0c:	2921      	.short	0x2921
   27d0e:	25          	.byte	0x25
   27d0f:	00          	.byte	0x00
    case CborAttrIntegerType:
    case CborAttrUnsignedIntegerType:
        if (ct == CborIntegerType) {
   27d10:	b318      	cbz	r0, 27d5a <valid_attr_type+0x60>
        }
        break;
    default:
        break;
    }
    return 0;
   27d12:	2000      	movs	r0, #0
   27d14:	4770      	bx	lr
        if (ct == CborByteStringType) {
   27d16:	2840      	cmp	r0, #64	; 0x40
   27d18:	d021      	beq.n	27d5e <valid_attr_type+0x64>
    return 0;
   27d1a:	2000      	movs	r0, #0
   27d1c:	4770      	bx	lr
        if (ct == CborTextStringType) {
   27d1e:	2860      	cmp	r0, #96	; 0x60
   27d20:	d01f      	beq.n	27d62 <valid_attr_type+0x68>
    return 0;
   27d22:	2000      	movs	r0, #0
   27d24:	4770      	bx	lr
        if (ct == CborBooleanType) {
   27d26:	28f5      	cmp	r0, #245	; 0xf5
   27d28:	d01d      	beq.n	27d66 <valid_attr_type+0x6c>
    return 0;
   27d2a:	2000      	movs	r0, #0
   27d2c:	4770      	bx	lr
        if (ct == CborFloatType) {
   27d2e:	28fa      	cmp	r0, #250	; 0xfa
   27d30:	d01b      	beq.n	27d6a <valid_attr_type+0x70>
    return 0;
   27d32:	2000      	movs	r0, #0
   27d34:	4770      	bx	lr
        if (ct == CborDoubleType) {
   27d36:	28fb      	cmp	r0, #251	; 0xfb
   27d38:	d019      	beq.n	27d6e <valid_attr_type+0x74>
    return 0;
   27d3a:	2000      	movs	r0, #0
   27d3c:	4770      	bx	lr
        if (ct == CborArrayType) {
   27d3e:	2880      	cmp	r0, #128	; 0x80
   27d40:	d017      	beq.n	27d72 <valid_attr_type+0x78>
    return 0;
   27d42:	2000      	movs	r0, #0
   27d44:	4770      	bx	lr
        if (ct == CborMapType) {
   27d46:	28a0      	cmp	r0, #160	; 0xa0
   27d48:	d015      	beq.n	27d76 <valid_attr_type+0x7c>
    return 0;
   27d4a:	2000      	movs	r0, #0
   27d4c:	4770      	bx	lr
        if (ct == CborNullType) {
   27d4e:	28f6      	cmp	r0, #246	; 0xf6
   27d50:	d013      	beq.n	27d7a <valid_attr_type+0x80>
    return 0;
   27d52:	2000      	movs	r0, #0
   27d54:	4770      	bx	lr
   27d56:	2000      	movs	r0, #0
   27d58:	4770      	bx	lr
            return 1;
   27d5a:	2001      	movs	r0, #1
   27d5c:	4770      	bx	lr
            return 1;
   27d5e:	2001      	movs	r0, #1
   27d60:	4770      	bx	lr
            return 1;
   27d62:	2001      	movs	r0, #1
   27d64:	4770      	bx	lr
            return 1;
   27d66:	2001      	movs	r0, #1
   27d68:	4770      	bx	lr
            return 1;
   27d6a:	2001      	movs	r0, #1
   27d6c:	4770      	bx	lr
            return 1;
   27d6e:	2001      	movs	r0, #1
   27d70:	4770      	bx	lr
            return 1;
   27d72:	2001      	movs	r0, #1
   27d74:	4770      	bx	lr
            return 1;
   27d76:	2001      	movs	r0, #1
   27d78:	4770      	bx	lr
            return 1;
   27d7a:	2001      	movs	r0, #1
}
   27d7c:	4770      	bx	lr

00027d7e <cbor_target_address>:
cbor_target_address(const struct cbor_attr_t *cursor,
                    const struct cbor_array_t *parent, int offset)
{
    char *targetaddr = NULL;

    if (parent == NULL || parent->element_type != CborAttrStructObjectType) {
   27d7e:	460b      	mov	r3, r1
   27d80:	b111      	cbz	r1, 27d88 <cbor_target_address+0xa>
   27d82:	7809      	ldrb	r1, [r1, #0]
   27d84:	290a      	cmp	r1, #10
   27d86:	d020      	beq.n	27dca <cbor_target_address+0x4c>
        /* ordinary case - use the address in the cursor structure */
        switch (cursor->type) {
   27d88:	7903      	ldrb	r3, [r0, #4]
   27d8a:	3b01      	subs	r3, #1
   27d8c:	2b06      	cmp	r3, #6
   27d8e:	d823      	bhi.n	27dd8 <cbor_target_address+0x5a>
   27d90:	e8df f003 	tbb	[pc, r3]
   27d94:	16140804 	.word	0x16140804
   27d98:	0c18      	.short	0x0c18
   27d9a:	10          	.byte	0x10
   27d9b:	00          	.byte	0x00
        case CborAttrNullType:
            targetaddr = NULL;
            break;
        case CborAttrIntegerType:
            targetaddr = (char *)&cursor->addr.integer[offset];
   27d9c:	6880      	ldr	r0, [r0, #8]
   27d9e:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   27da2:	4770      	bx	lr
        case CborAttrUnsignedIntegerType:
            targetaddr = (char *)&cursor->addr.uinteger[offset];
   27da4:	6880      	ldr	r0, [r0, #8]
   27da6:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   27daa:	4770      	bx	lr
#if FLOAT_SUPPORT
        case CborAttrFloatType:
            targetaddr = (char *)&cursor->addr.fval[offset];
   27dac:	6880      	ldr	r0, [r0, #8]
   27dae:	eb00 0082 	add.w	r0, r0, r2, lsl #2
            break;
   27db2:	4770      	bx	lr
        case CborAttrDoubleType:
            targetaddr = (char *)&cursor->addr.real[offset];
   27db4:	6880      	ldr	r0, [r0, #8]
   27db6:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
            break;
   27dba:	4770      	bx	lr
#endif
        case CborAttrByteStringType:
            targetaddr = (char *) cursor->addr.bytestring.data;
   27dbc:	6880      	ldr	r0, [r0, #8]
            break;
   27dbe:	4770      	bx	lr
        case CborAttrTextStringType:
            targetaddr = cursor->addr.string;
   27dc0:	6880      	ldr	r0, [r0, #8]
            break;
   27dc2:	4770      	bx	lr
        case CborAttrBooleanType:
            targetaddr = (char *)&cursor->addr.boolean[offset];
   27dc4:	6880      	ldr	r0, [r0, #8]
   27dc6:	4410      	add	r0, r2
            break;
   27dc8:	4770      	bx	lr
            break;
        }
    } else {
        /* tricky case - hacking a member in an array of structures */
        targetaddr =
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   27dca:	6899      	ldr	r1, [r3, #8]
   27dcc:	68db      	ldr	r3, [r3, #12]
            cursor->addr.offset;
   27dce:	6880      	ldr	r0, [r0, #8]
            parent->arr.objects.base + (offset * parent->arr.objects.stride) +
   27dd0:	fb03 0002 	mla	r0, r3, r2, r0
        targetaddr =
   27dd4:	4408      	add	r0, r1
   27dd6:	4770      	bx	lr
            targetaddr = NULL;
   27dd8:	2000      	movs	r0, #0
    }
    return targetaddr;
}
   27dda:	4770      	bx	lr

00027ddc <cbor_read_array>:
    return err;
}

int
cbor_read_array(struct CborValue *value, const struct cbor_array_t *arr)
{
   27ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27de0:	b089      	sub	sp, #36	; 0x24
   27de2:	4680      	mov	r8, r0
   27de4:	460c      	mov	r4, r1
    int off, arrcount;
    size_t len;
    void *lptr;
    char *tp;

    err = cbor_value_enter_container(value, &elem);
   27de6:	a904      	add	r1, sp, #16
   27de8:	f7f1 fdde 	bl	199a8 <cbor_value_enter_container>
    if (err) {
   27dec:	4605      	mov	r5, r0
   27dee:	2800      	cmp	r0, #0
   27df0:	f040 810b 	bne.w	2800a <cbor_read_array+0x22e>
        return err;
    }
    arrcount = 0;
    tp = arr->arr.strings.store;
   27df4:	68a7      	ldr	r7, [r4, #8]
    for (off = 0; off < arr->maxlen; off++) {
   27df6:	2600      	movs	r6, #0
   27df8:	e0ce      	b.n	27f98 <cbor_read_array+0x1bc>
        switch (arr->element_type) {
        case CborAttrBooleanType:
            lptr = &arr->arr.booleans.store[off];
   27dfa:	6862      	ldr	r2, [r4, #4]
{ return value->type == CborBooleanType; }
   27dfc:	f89d 301e 	ldrb.w	r3, [sp, #30]
    assert(cbor_value_is_boolean(value));
   27e00:	2bf5      	cmp	r3, #245	; 0xf5
   27e02:	d106      	bne.n	27e12 <cbor_read_array+0x36>
    *result = !!value->extra;
   27e04:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   27e08:	3300      	adds	r3, #0
   27e0a:	bf18      	it	ne
   27e0c:	2301      	movne	r3, #1
   27e0e:	5593      	strb	r3, [r2, r6]
            err |= cbor_value_get_boolean(&elem, lptr);
            break;
   27e10:	e0b8      	b.n	27f84 <cbor_read_array+0x1a8>
    assert(cbor_value_is_boolean(value));
   27e12:	f7e0 f9d5 	bl	81c0 <hal_debugger_connected>
   27e16:	b100      	cbz	r0, 27e1a <cbor_read_array+0x3e>
   27e18:	be01      	bkpt	0x0001
   27e1a:	2300      	movs	r3, #0
   27e1c:	461a      	mov	r2, r3
   27e1e:	4619      	mov	r1, r3
   27e20:	4618      	mov	r0, r3
   27e22:	f7e1 fd63 	bl	98ec <__assert_func>
        case CborAttrIntegerType:
            lptr = &arr->arr.integers.store[off];
   27e26:	6863      	ldr	r3, [r4, #4]
   27e28:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
{ return value->type == CborIntegerType; }
   27e2c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    assert(cbor_value_is_integer(value));
   27e30:	b9bb      	cbnz	r3, 27e62 <cbor_read_array+0x86>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   27e32:	f89d 301f 	ldrb.w	r3, [sp, #31]
                _cbor_value_decode_int64_internal(value) : value->extra;
   27e36:	f013 0f01 	tst.w	r3, #1
   27e3a:	d11c      	bne.n	27e76 <cbor_read_array+0x9a>
   27e3c:	f8bd a01c 	ldrh.w	sl, [sp, #28]
   27e40:	f04f 0b00 	mov.w	fp, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   27e44:	e9c9 ab00 	strd	sl, fp, [r9]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   27e48:	f89d 301f 	ldrb.w	r3, [sp, #31]
   27e4c:	f013 0f02 	tst.w	r3, #2
   27e50:	f000 8098 	beq.w	27f84 <cbor_read_array+0x1a8>
        *result = -*result - 1;
   27e54:	ea6f 000a 	mvn.w	r0, sl
   27e58:	ea6f 010b 	mvn.w	r1, fp
   27e5c:	e9c9 0100 	strd	r0, r1, [r9]
            err |= cbor_value_get_int64(&elem, lptr);
            break;
   27e60:	e090      	b.n	27f84 <cbor_read_array+0x1a8>
    assert(cbor_value_is_integer(value));
   27e62:	f7e0 f9ad 	bl	81c0 <hal_debugger_connected>
   27e66:	b100      	cbz	r0, 27e6a <cbor_read_array+0x8e>
   27e68:	be01      	bkpt	0x0001
   27e6a:	2300      	movs	r3, #0
   27e6c:	461a      	mov	r2, r3
   27e6e:	4619      	mov	r1, r3
   27e70:	4618      	mov	r0, r3
   27e72:	f7e1 fd3b 	bl	98ec <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   27e76:	a804      	add	r0, sp, #16
   27e78:	f7f1 fd3e 	bl	198f8 <_cbor_value_decode_int64_internal>
   27e7c:	4682      	mov	sl, r0
   27e7e:	468b      	mov	fp, r1
   27e80:	e7e0      	b.n	27e44 <cbor_read_array+0x68>
        case CborAttrUnsignedIntegerType:
            lptr = &arr->arr.uintegers.store[off];
   27e82:	6863      	ldr	r3, [r4, #4]
   27e84:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
{ return value->type == CborIntegerType; }
   27e88:	f89d 301e 	ldrb.w	r3, [sp, #30]
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   27e8c:	b933      	cbnz	r3, 27e9c <cbor_read_array+0xc0>
   27e8e:	f89d 301f 	ldrb.w	r3, [sp, #31]
   27e92:	f013 0f02 	tst.w	r3, #2
   27e96:	d00e      	beq.n	27eb6 <cbor_read_array+0xda>
   27e98:	2300      	movs	r3, #0
   27e9a:	e000      	b.n	27e9e <cbor_read_array+0xc2>
   27e9c:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   27e9e:	b163      	cbz	r3, 27eba <cbor_read_array+0xde>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   27ea0:	f89d 301f 	ldrb.w	r3, [sp, #31]
                _cbor_value_decode_int64_internal(value) : value->extra;
   27ea4:	f013 0f01 	tst.w	r3, #1
   27ea8:	d111      	bne.n	27ece <cbor_read_array+0xf2>
   27eaa:	f8bd 001c 	ldrh.w	r0, [sp, #28]
   27eae:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   27eb0:	e9c9 0100 	strd	r0, r1, [r9]
            err |= cbor_value_get_uint64(&elem, lptr);
            break;
   27eb4:	e066      	b.n	27f84 <cbor_read_array+0x1a8>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   27eb6:	2301      	movs	r3, #1
   27eb8:	e7f1      	b.n	27e9e <cbor_read_array+0xc2>
    assert(cbor_value_is_unsigned_integer(value));
   27eba:	f7e0 f981 	bl	81c0 <hal_debugger_connected>
   27ebe:	b100      	cbz	r0, 27ec2 <cbor_read_array+0xe6>
   27ec0:	be01      	bkpt	0x0001
   27ec2:	2300      	movs	r3, #0
   27ec4:	461a      	mov	r2, r3
   27ec6:	4619      	mov	r1, r3
   27ec8:	4618      	mov	r0, r3
   27eca:	f7e1 fd0f 	bl	98ec <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   27ece:	a804      	add	r0, sp, #16
   27ed0:	f7f1 fd12 	bl	198f8 <_cbor_value_decode_int64_internal>
   27ed4:	e7ec      	b.n	27eb0 <cbor_read_array+0xd4>
#if FLOAT_SUPPORT
        case CborAttrFloatType:
        case CborAttrDoubleType:
            lptr = &arr->arr.reals.store[off];
   27ed6:	f8d4 a004 	ldr.w	sl, [r4, #4]
   27eda:	ea4f 09c6 	mov.w	r9, r6, lsl #3
   27ede:	eb0a 0b09 	add.w	fp, sl, r9
    memcpy(result, &data, sizeof(*result));
    return CborNoError;
}

CBOR_INLINE_API bool cbor_value_is_double(const CborValue *value)
{ return value->type == CborDoubleType; }
   27ee2:	f89d 301e 	ldrb.w	r3, [sp, #30]
CBOR_INLINE_API CborError cbor_value_get_double(const CborValue *value, double *result)
{
    assert(cbor_value_is_double(value));
   27ee6:	2bfb      	cmp	r3, #251	; 0xfb
   27ee8:	d110      	bne.n	27f0c <cbor_read_array+0x130>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   27eea:	f89d 301f 	ldrb.w	r3, [sp, #31]
   27eee:	f013 0f01 	tst.w	r3, #1
   27ef2:	d015      	beq.n	27f20 <cbor_read_array+0x144>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   27ef4:	a804      	add	r0, sp, #16
   27ef6:	f7f1 fcff 	bl	198f8 <_cbor_value_decode_int64_internal>
   27efa:	ab08      	add	r3, sp, #32
   27efc:	e963 0108 	strd	r0, r1, [r3, #-32]!
    memcpy(result, &data, sizeof(*result));
   27f00:	cb03      	ldmia	r3!, {r0, r1}
   27f02:	f84a 0009 	str.w	r0, [sl, r9]
   27f06:	f8cb 1004 	str.w	r1, [fp, #4]
            err |= cbor_value_get_double(&elem, lptr);
            break;
   27f0a:	e03b      	b.n	27f84 <cbor_read_array+0x1a8>
    assert(cbor_value_is_double(value));
   27f0c:	f7e0 f958 	bl	81c0 <hal_debugger_connected>
   27f10:	b100      	cbz	r0, 27f14 <cbor_read_array+0x138>
   27f12:	be01      	bkpt	0x0001
   27f14:	2300      	movs	r3, #0
   27f16:	461a      	mov	r2, r3
   27f18:	4619      	mov	r1, r3
   27f1a:	4618      	mov	r0, r3
   27f1c:	f7e1 fce6 	bl	98ec <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   27f20:	f7e0 f94e 	bl	81c0 <hal_debugger_connected>
   27f24:	b100      	cbz	r0, 27f28 <cbor_read_array+0x14c>
   27f26:	be01      	bkpt	0x0001
   27f28:	2300      	movs	r3, #0
   27f2a:	461a      	mov	r2, r3
   27f2c:	4619      	mov	r1, r3
   27f2e:	4618      	mov	r0, r3
   27f30:	f7e1 fcdc 	bl	98ec <__assert_func>
#endif
        case CborAttrTextStringType:
            len = arr->arr.strings.storelen - (tp - arr->arr.strings.store);
   27f34:	68e3      	ldr	r3, [r4, #12]
   27f36:	68a2      	ldr	r2, [r4, #8]
   27f38:	1aba      	subs	r2, r7, r2
   27f3a:	1a9b      	subs	r3, r3, r2
   27f3c:	9303      	str	r3, [sp, #12]
{ return value->type == CborTextStringType; }
   27f3e:	f89d 301e 	ldrb.w	r3, [sp, #30]
    assert(cbor_value_is_text_string(value));
   27f42:	2b60      	cmp	r3, #96	; 0x60
   27f44:	d10d      	bne.n	27f62 <cbor_read_array+0x186>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   27f46:	2300      	movs	r3, #0
   27f48:	aa03      	add	r2, sp, #12
   27f4a:	4639      	mov	r1, r7
   27f4c:	a804      	add	r0, sp, #16
   27f4e:	f7f1 fdf9 	bl	19b44 <_cbor_value_copy_string>
            err |= cbor_value_copy_text_string(&elem, tp, &len, NULL);
   27f52:	4305      	orrs	r5, r0
            arr->arr.strings.ptrs[off] = tp;
   27f54:	6863      	ldr	r3, [r4, #4]
   27f56:	f843 7026 	str.w	r7, [r3, r6, lsl #2]
            tp += len + 1;
   27f5a:	9b03      	ldr	r3, [sp, #12]
   27f5c:	3301      	adds	r3, #1
   27f5e:	441f      	add	r7, r3
            break;
   27f60:	e010      	b.n	27f84 <cbor_read_array+0x1a8>
    assert(cbor_value_is_text_string(value));
   27f62:	f7e0 f92d 	bl	81c0 <hal_debugger_connected>
   27f66:	b100      	cbz	r0, 27f6a <cbor_read_array+0x18e>
   27f68:	be01      	bkpt	0x0001
   27f6a:	2300      	movs	r3, #0
   27f6c:	461a      	mov	r2, r3
   27f6e:	4619      	mov	r1, r3
   27f70:	4618      	mov	r0, r3
   27f72:	f7e1 fcbb 	bl	98ec <__assert_func>
        case CborAttrStructObjectType:
            err |= cbor_internal_read_object(&elem, arr->arr.objects.subtype,
   27f76:	4633      	mov	r3, r6
   27f78:	4622      	mov	r2, r4
   27f7a:	6861      	ldr	r1, [r4, #4]
   27f7c:	a804      	add	r0, sp, #16
   27f7e:	f000 f847 	bl	28010 <cbor_internal_read_object>
   27f82:	4305      	orrs	r5, r0
            break;
        default:
            err |= CborErrorIllegalType;
            break;
        }
        arrcount++;
   27f84:	3601      	adds	r6, #1
        if (arr->element_type != CborAttrStructObjectType) {
   27f86:	7823      	ldrb	r3, [r4, #0]
   27f88:	2b0a      	cmp	r3, #10
   27f8a:	d126      	bne.n	27fda <cbor_read_array+0x1fe>
{ return value && value->type != CborInvalidType; }
   27f8c:	f89d 301e 	ldrb.w	r3, [sp, #30]
   27f90:	2bff      	cmp	r3, #255	; 0xff
   27f92:	d027      	beq.n	27fe4 <cbor_read_array+0x208>
   27f94:	2301      	movs	r3, #1
            err |= cbor_value_advance(&elem);
        }
        if (!cbor_value_is_valid(&elem)) {
   27f96:	b33b      	cbz	r3, 27fe8 <cbor_read_array+0x20c>
    for (off = 0; off < arr->maxlen; off++) {
   27f98:	6963      	ldr	r3, [r4, #20]
   27f9a:	42b3      	cmp	r3, r6
   27f9c:	dd24      	ble.n	27fe8 <cbor_read_array+0x20c>
        switch (arr->element_type) {
   27f9e:	7823      	ldrb	r3, [r4, #0]
   27fa0:	3b01      	subs	r3, #1
   27fa2:	2b09      	cmp	r3, #9
   27fa4:	d816      	bhi.n	27fd4 <cbor_read_array+0x1f8>
   27fa6:	a201      	add	r2, pc, #4	; (adr r2, 27fac <cbor_read_array+0x1d0>)
   27fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   27fac:	00027e27 	.word	0x00027e27
   27fb0:	00027e83 	.word	0x00027e83
   27fb4:	00027fd5 	.word	0x00027fd5
   27fb8:	00027f35 	.word	0x00027f35
   27fbc:	00027dfb 	.word	0x00027dfb
   27fc0:	00027ed7 	.word	0x00027ed7
   27fc4:	00027ed7 	.word	0x00027ed7
   27fc8:	00027fd5 	.word	0x00027fd5
   27fcc:	00027fd5 	.word	0x00027fd5
   27fd0:	00027f77 	.word	0x00027f77
            err |= CborErrorIllegalType;
   27fd4:	f445 7582 	orr.w	r5, r5, #260	; 0x104
            break;
   27fd8:	e7d4      	b.n	27f84 <cbor_read_array+0x1a8>
            err |= cbor_value_advance(&elem);
   27fda:	a804      	add	r0, sp, #16
   27fdc:	f7f1 fe12 	bl	19c04 <cbor_value_advance>
   27fe0:	4305      	orrs	r5, r0
   27fe2:	e7d3      	b.n	27f8c <cbor_read_array+0x1b0>
   27fe4:	2300      	movs	r3, #0
   27fe6:	e7d6      	b.n	27f96 <cbor_read_array+0x1ba>
            break;
        }
    }
    if (arr->count) {
   27fe8:	6923      	ldr	r3, [r4, #16]
   27fea:	b133      	cbz	r3, 27ffa <cbor_read_array+0x21e>
        *arr->count = arrcount;
   27fec:	601e      	str	r6, [r3, #0]
   27fee:	e004      	b.n	27ffa <cbor_read_array+0x21e>
    }
    while (!cbor_value_at_end(&elem)) {
        err |= CborErrorDataTooLarge;
   27ff0:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
        cbor_value_advance(&elem);
   27ff4:	a804      	add	r0, sp, #16
   27ff6:	f7f1 fe05 	bl	19c04 <cbor_value_advance>
{ return it->remaining == 0; }
   27ffa:	9b06      	ldr	r3, [sp, #24]
    while (!cbor_value_at_end(&elem)) {
   27ffc:	2b00      	cmp	r3, #0
   27ffe:	d1f7      	bne.n	27ff0 <cbor_read_array+0x214>
    }
    err |= cbor_value_leave_container(value, &elem);
   28000:	a904      	add	r1, sp, #16
   28002:	4640      	mov	r0, r8
   28004:	f7f1 fd75 	bl	19af2 <cbor_value_leave_container>
   28008:	4328      	orrs	r0, r5
    return err;
}
   2800a:	b009      	add	sp, #36	; 0x24
   2800c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00028010 <cbor_internal_read_object>:
{
   28010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28014:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
   28018:	4683      	mov	fp, r0
   2801a:	9101      	str	r1, [sp, #4]
   2801c:	4690      	mov	r8, r2
   2801e:	4699      	mov	r9, r3
    size_t len = 0;
   28020:	2300      	movs	r3, #0
   28022:	9304      	str	r3, [sp, #16]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   28024:	460c      	mov	r4, r1
   28026:	e006      	b.n	28036 <cbor_internal_read_object+0x26>
                    memcpy(lptr, &cursor->dflt.integer, sizeof(long long int));
   28028:	4623      	mov	r3, r4
   2802a:	f853 1f20 	ldr.w	r1, [r3, #32]!
   2802e:	685b      	ldr	r3, [r3, #4]
   28030:	6001      	str	r1, [r0, #0]
   28032:	6043      	str	r3, [r0, #4]
    for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   28034:	3430      	adds	r4, #48	; 0x30
   28036:	6823      	ldr	r3, [r4, #0]
   28038:	b3ab      	cbz	r3, 280a6 <cbor_internal_read_object+0x96>
        if (!cursor->nodefault) {
   2803a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   2803e:	2b00      	cmp	r3, #0
   28040:	d1f8      	bne.n	28034 <cbor_internal_read_object+0x24>
            lptr = cbor_target_address(cursor, parent, offset);
   28042:	464a      	mov	r2, r9
   28044:	4641      	mov	r1, r8
   28046:	4620      	mov	r0, r4
   28048:	f7ff fe99 	bl	27d7e <cbor_target_address>
            if (lptr != NULL) {
   2804c:	2800      	cmp	r0, #0
   2804e:	d0f1      	beq.n	28034 <cbor_internal_read_object+0x24>
                switch (cursor->type) {
   28050:	7923      	ldrb	r3, [r4, #4]
   28052:	3b01      	subs	r3, #1
   28054:	2b06      	cmp	r3, #6
   28056:	d8ed      	bhi.n	28034 <cbor_internal_read_object+0x24>
   28058:	a101      	add	r1, pc, #4	; (adr r1, 28060 <cbor_internal_read_object+0x50>)
   2805a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   2805e:	bf00      	nop
   28060:	00028029 	.word	0x00028029
   28064:	0002807d 	.word	0x0002807d
   28068:	00028035 	.word	0x00028035
   2806c:	00028035 	.word	0x00028035
   28070:	0002808b 	.word	0x0002808b
   28074:	00028093 	.word	0x00028093
   28078:	00028099 	.word	0x00028099
                    memcpy(lptr, &cursor->dflt.integer,
   2807c:	4623      	mov	r3, r4
   2807e:	f853 1f20 	ldr.w	r1, [r3, #32]!
   28082:	685b      	ldr	r3, [r3, #4]
   28084:	6001      	str	r1, [r0, #0]
   28086:	6043      	str	r3, [r0, #4]
                    break;
   28088:	e7d4      	b.n	28034 <cbor_internal_read_object+0x24>
                    memcpy(lptr, &cursor->dflt.boolean, sizeof(bool));
   2808a:	f894 3020 	ldrb.w	r3, [r4, #32]
   2808e:	7003      	strb	r3, [r0, #0]
                    break;
   28090:	e7d0      	b.n	28034 <cbor_internal_read_object+0x24>
                    memcpy(lptr, &cursor->dflt.fval, sizeof(float));
   28092:	6a23      	ldr	r3, [r4, #32]
   28094:	6003      	str	r3, [r0, #0]
                    break;
   28096:	e7cd      	b.n	28034 <cbor_internal_read_object+0x24>
                    memcpy(lptr, &cursor->dflt.real, sizeof(double));
   28098:	4623      	mov	r3, r4
   2809a:	f853 1f20 	ldr.w	r1, [r3, #32]!
   2809e:	685b      	ldr	r3, [r3, #4]
   280a0:	6001      	str	r1, [r0, #0]
   280a2:	6043      	str	r3, [r0, #4]
                    break;
   280a4:	e7c6      	b.n	28034 <cbor_internal_read_object+0x24>
{ return value->type == CborMapType; }
   280a6:	f89b 300e 	ldrb.w	r3, [fp, #14]
    if (cbor_value_is_map(root_value)) {
   280aa:	2ba0      	cmp	r3, #160	; 0xa0
   280ac:	d005      	beq.n	280ba <cbor_internal_read_object+0xaa>
        return err;
   280ae:	f44f 7082 	mov.w	r0, #260	; 0x104
}
   280b2:	f50d 7d0b 	add.w	sp, sp, #556	; 0x22c
   280b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        err |= cbor_value_enter_container(root_value, &cur_value);
   280ba:	a905      	add	r1, sp, #20
   280bc:	4658      	mov	r0, fp
   280be:	f7f1 fc73 	bl	199a8 <cbor_value_enter_container>
   280c2:	4607      	mov	r7, r0
    while (cbor_value_is_valid(&cur_value) && !err) {
   280c4:	e07d      	b.n	281c2 <cbor_internal_read_object+0x1b2>
            if (cbor_value_calculate_string_length(&cur_value, &len) == 0) {
   280c6:	a904      	add	r1, sp, #16
   280c8:	a805      	add	r0, sp, #20
   280ca:	f7f1 fdb1 	bl	19c30 <cbor_value_calculate_string_length>
   280ce:	b970      	cbnz	r0, 280ee <cbor_internal_read_object+0xde>
                if (len > CBORATTR_MAX_SIZE) {
   280d0:	9b04      	ldr	r3, [sp, #16]
   280d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   280d6:	d81c      	bhi.n	28112 <cbor_internal_read_object+0x102>
{ return value->type == CborTextStringType; }
   280d8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   280dc:	2b60      	cmp	r3, #96	; 0x60
   280de:	d11b      	bne.n	28118 <cbor_internal_read_object+0x108>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   280e0:	2300      	movs	r3, #0
   280e2:	aa04      	add	r2, sp, #16
   280e4:	a909      	add	r1, sp, #36	; 0x24
   280e6:	a805      	add	r0, sp, #20
   280e8:	f7f1 fd2c 	bl	19b44 <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, attrbuf, &len,
   280ec:	4307      	orrs	r7, r0
            err |= cbor_value_advance(&cur_value);
   280ee:	a805      	add	r0, sp, #20
   280f0:	f7f1 fd88 	bl	19c04 <cbor_value_advance>
   280f4:	4307      	orrs	r7, r0
{ return value && value->type != CborInvalidType; }
   280f6:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   280fa:	2eff      	cmp	r6, #255	; 0xff
   280fc:	d016      	beq.n	2812c <cbor_internal_read_object+0x11c>
   280fe:	2301      	movs	r3, #1
            if (cbor_value_is_valid(&cur_value)) {
   28100:	2b00      	cmp	r3, #0
   28102:	d16e      	bne.n	281e2 <cbor_internal_read_object+0x1d2>
                err |= CborErrorIllegalType;
   28104:	f447 7782 	orr.w	r7, r7, #260	; 0x104
    if (!err) {
   28108:	2f00      	cmp	r7, #0
   2810a:	f000 815a 	beq.w	283c2 <cbor_internal_read_object+0x3b2>
    return err;
   2810e:	4638      	mov	r0, r7
   28110:	e7cf      	b.n	280b2 <cbor_internal_read_object+0xa2>
                    err |= CborErrorDataTooLarge;
   28112:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
                    break;
   28116:	e7f7      	b.n	28108 <cbor_internal_read_object+0xf8>
    assert(cbor_value_is_text_string(value));
   28118:	f7e0 f852 	bl	81c0 <hal_debugger_connected>
   2811c:	b100      	cbz	r0, 28120 <cbor_internal_read_object+0x110>
   2811e:	be01      	bkpt	0x0001
   28120:	2300      	movs	r3, #0
   28122:	461a      	mov	r2, r3
   28124:	4619      	mov	r1, r3
   28126:	4618      	mov	r0, r3
   28128:	f7e1 fbe0 	bl	98ec <__assert_func>
{ return value && value->type != CborInvalidType; }
   2812c:	2300      	movs	r3, #0
   2812e:	e7e7      	b.n	28100 <cbor_internal_read_object+0xf0>
                    attrbuf[0] == '\0') {
   28130:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   28134:	b963      	cbnz	r3, 28150 <cbor_internal_read_object+0x140>
                    best_match = cursor;
   28136:	46a2      	mov	sl, r4
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   28138:	3430      	adds	r4, #48	; 0x30
   2813a:	6825      	ldr	r5, [r4, #0]
   2813c:	b1a5      	cbz	r5, 28168 <cbor_internal_read_object+0x158>
            if (valid_attr_type(type, cursor->type)) {
   2813e:	7921      	ldrb	r1, [r4, #4]
   28140:	4630      	mov	r0, r6
   28142:	f7ff fdda 	bl	27cfa <valid_attr_type>
   28146:	2800      	cmp	r0, #0
   28148:	d0f6      	beq.n	28138 <cbor_internal_read_object+0x128>
                if (cursor->attribute == CBORATTR_ATTR_UNNAMED &&
   2814a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2814e:	d0ef      	beq.n	28130 <cbor_internal_read_object+0x120>
                } else if (strlen(cursor->attribute) == len &&
   28150:	4628      	mov	r0, r5
   28152:	f7e3 fb89 	bl	b868 <strlen>
   28156:	9a04      	ldr	r2, [sp, #16]
   28158:	4290      	cmp	r0, r2
   2815a:	d1ed      	bne.n	28138 <cbor_internal_read_object+0x128>
                    !memcmp(cursor->attribute, attrbuf, len)) {
   2815c:	a909      	add	r1, sp, #36	; 0x24
   2815e:	4628      	mov	r0, r5
   28160:	f7e3 fb00 	bl	b764 <memcmp>
                } else if (strlen(cursor->attribute) == len &&
   28164:	2800      	cmp	r0, #0
   28166:	d1e7      	bne.n	28138 <cbor_internal_read_object+0x128>
        if (!cursor->attribute && best_match) {
   28168:	b1cd      	cbz	r5, 2819e <cbor_internal_read_object+0x18e>
        if (cursor->attribute != NULL) {
   2816a:	6823      	ldr	r3, [r4, #0]
   2816c:	b333      	cbz	r3, 281bc <cbor_internal_read_object+0x1ac>
            lptr = cbor_target_address(cursor, parent, offset);
   2816e:	464a      	mov	r2, r9
   28170:	4641      	mov	r1, r8
   28172:	4620      	mov	r0, r4
   28174:	f7ff fe03 	bl	27d7e <cbor_target_address>
   28178:	4605      	mov	r5, r0
            switch (cursor->type) {
   2817a:	7923      	ldrb	r3, [r4, #4]
   2817c:	3b01      	subs	r3, #1
   2817e:	2b0a      	cmp	r3, #10
   28180:	f200 811a 	bhi.w	283b8 <cbor_internal_read_object+0x3a8>
   28184:	e8df f013 	tbh	[pc, r3, lsl #1]
   28188:	0066003b 	.word	0x0066003b
   2818c:	00f100d6 	.word	0x00f100d6
   28190:	008d0010 	.word	0x008d0010
   28194:	010900af 	.word	0x010900af
   28198:	01180110 	.word	0x01180110
   2819c:	001a      	.short	0x001a
        if (!cursor->attribute && best_match) {
   2819e:	f1ba 0f00 	cmp.w	sl, #0
   281a2:	d0e2      	beq.n	2816a <cbor_internal_read_object+0x15a>
            cursor = best_match;
   281a4:	4654      	mov	r4, sl
   281a6:	e7e0      	b.n	2816a <cbor_internal_read_object+0x15a>
{ return value->type == CborBooleanType; }
   281a8:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_boolean(value));
   281ac:	2bf5      	cmp	r3, #245	; 0xf5
   281ae:	d11c      	bne.n	281ea <cbor_internal_read_object+0x1da>
    *result = !!value->extra;
   281b0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   281b4:	3300      	adds	r3, #0
   281b6:	bf18      	it	ne
   281b8:	2301      	movne	r3, #1
   281ba:	7003      	strb	r3, [r0, #0]
        cbor_value_advance(&cur_value);
   281bc:	a805      	add	r0, sp, #20
   281be:	f7f1 fd21 	bl	19c04 <cbor_value_advance>
{ return value && value->type != CborInvalidType; }
   281c2:	f89d 6022 	ldrb.w	r6, [sp, #34]	; 0x22
   281c6:	2eff      	cmp	r6, #255	; 0xff
   281c8:	f000 80f9 	beq.w	283be <cbor_internal_read_object+0x3ae>
   281cc:	2301      	movs	r3, #1
    while (cbor_value_is_valid(&cur_value) && !err) {
   281ce:	2b00      	cmp	r3, #0
   281d0:	d09a      	beq.n	28108 <cbor_internal_read_object+0xf8>
   281d2:	2f00      	cmp	r7, #0
   281d4:	d198      	bne.n	28108 <cbor_internal_read_object+0xf8>
        if (cbor_value_is_text_string(&cur_value)) {
   281d6:	2e60      	cmp	r6, #96	; 0x60
   281d8:	f43f af75 	beq.w	280c6 <cbor_internal_read_object+0xb6>
            attrbuf[0] = '\0';
   281dc:	2300      	movs	r3, #0
   281de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   281e2:	9c01      	ldr	r4, [sp, #4]
        best_match = NULL;
   281e4:	f04f 0a00 	mov.w	sl, #0
        for (cursor = attrs; cursor->attribute != NULL; cursor++) {
   281e8:	e7a7      	b.n	2813a <cbor_internal_read_object+0x12a>
    assert(cbor_value_is_boolean(value));
   281ea:	f7df ffe9 	bl	81c0 <hal_debugger_connected>
   281ee:	b100      	cbz	r0, 281f2 <cbor_internal_read_object+0x1e2>
   281f0:	be01      	bkpt	0x0001
   281f2:	2300      	movs	r3, #0
   281f4:	461a      	mov	r2, r3
   281f6:	4619      	mov	r1, r3
   281f8:	4618      	mov	r0, r3
   281fa:	f7e1 fb77 	bl	98ec <__assert_func>
{ return value->type == CborIntegerType; }
   281fe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_integer(value));
   28202:	b9bb      	cbnz	r3, 28234 <cbor_internal_read_object+0x224>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   28204:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   28208:	f013 0f01 	tst.w	r3, #1
   2820c:	d11c      	bne.n	28248 <cbor_internal_read_object+0x238>
   2820e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   28212:	2400      	movs	r4, #0
    *result = (int64_t) _cbor_value_extract_int64_helper(value);
   28214:	4619      	mov	r1, r3
   28216:	4622      	mov	r2, r4
   28218:	e9c5 1200 	strd	r1, r2, [r5]
    if (value->flags & CborIteratorFlag_NegativeInteger)
   2821c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   28220:	f013 0f02 	tst.w	r3, #2
   28224:	d0ca      	beq.n	281bc <cbor_internal_read_object+0x1ac>
        *result = -*result - 1;
   28226:	43c9      	mvns	r1, r1
   28228:	43e2      	mvns	r2, r4
   2822a:	4608      	mov	r0, r1
   2822c:	4611      	mov	r1, r2
   2822e:	e9c5 0100 	strd	r0, r1, [r5]
                break;
   28232:	e7c3      	b.n	281bc <cbor_internal_read_object+0x1ac>
    assert(cbor_value_is_integer(value));
   28234:	f7df ffc4 	bl	81c0 <hal_debugger_connected>
   28238:	b100      	cbz	r0, 2823c <cbor_internal_read_object+0x22c>
   2823a:	be01      	bkpt	0x0001
   2823c:	2300      	movs	r3, #0
   2823e:	461a      	mov	r2, r3
   28240:	4619      	mov	r1, r3
   28242:	4618      	mov	r0, r3
   28244:	f7e1 fb52 	bl	98ec <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   28248:	a805      	add	r0, sp, #20
   2824a:	f7f1 fb55 	bl	198f8 <_cbor_value_decode_int64_internal>
   2824e:	4603      	mov	r3, r0
   28250:	460c      	mov	r4, r1
   28252:	e7df      	b.n	28214 <cbor_internal_read_object+0x204>
{ return value->type == CborIntegerType; }
   28254:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   28258:	b933      	cbnz	r3, 28268 <cbor_internal_read_object+0x258>
   2825a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   2825e:	f013 0f02 	tst.w	r3, #2
   28262:	d00e      	beq.n	28282 <cbor_internal_read_object+0x272>
   28264:	2300      	movs	r3, #0
   28266:	e000      	b.n	2826a <cbor_internal_read_object+0x25a>
   28268:	2300      	movs	r3, #0
    assert(cbor_value_is_unsigned_integer(value));
   2826a:	b163      	cbz	r3, 28286 <cbor_internal_read_object+0x276>
    return value->flags & CborIteratorFlag_IntegerValueTooLarge ?
   2826c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
                _cbor_value_decode_int64_internal(value) : value->extra;
   28270:	f013 0f01 	tst.w	r3, #1
   28274:	d111      	bne.n	2829a <cbor_internal_read_object+0x28a>
   28276:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   2827a:	2100      	movs	r1, #0
    *result = _cbor_value_extract_int64_helper(value);
   2827c:	e9c5 0100 	strd	r0, r1, [r5]
                break;
   28280:	e79c      	b.n	281bc <cbor_internal_read_object+0x1ac>
{ return cbor_value_is_integer(value) && (value->flags & CborIteratorFlag_NegativeInteger) == 0; }
   28282:	2301      	movs	r3, #1
   28284:	e7f1      	b.n	2826a <cbor_internal_read_object+0x25a>
    assert(cbor_value_is_unsigned_integer(value));
   28286:	f7df ff9b 	bl	81c0 <hal_debugger_connected>
   2828a:	b100      	cbz	r0, 2828e <cbor_internal_read_object+0x27e>
   2828c:	be01      	bkpt	0x0001
   2828e:	2300      	movs	r3, #0
   28290:	461a      	mov	r2, r3
   28292:	4619      	mov	r1, r3
   28294:	4618      	mov	r0, r3
   28296:	f7e1 fb29 	bl	98ec <__assert_func>
                _cbor_value_decode_int64_internal(value) : value->extra;
   2829a:	a805      	add	r0, sp, #20
   2829c:	f7f1 fb2c 	bl	198f8 <_cbor_value_decode_int64_internal>
   282a0:	e7ec      	b.n	2827c <cbor_internal_read_object+0x26c>
{ return value->type == CborFloatType; }
   282a2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_float(value));
   282a6:	2bfa      	cmp	r3, #250	; 0xfa
   282a8:	d109      	bne.n	282be <cbor_internal_read_object+0x2ae>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   282aa:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   282ae:	f013 0f01 	tst.w	r3, #1
   282b2:	d00e      	beq.n	282d2 <cbor_internal_read_object+0x2c2>
    uint32_t data = (uint32_t)_cbor_value_decode_int64_internal(value);
   282b4:	a805      	add	r0, sp, #20
   282b6:	f7f1 fb1f 	bl	198f8 <_cbor_value_decode_int64_internal>
    memcpy(result, &data, sizeof(*result));
   282ba:	6028      	str	r0, [r5, #0]
                break;
   282bc:	e77e      	b.n	281bc <cbor_internal_read_object+0x1ac>
    assert(cbor_value_is_float(value));
   282be:	f7df ff7f 	bl	81c0 <hal_debugger_connected>
   282c2:	b100      	cbz	r0, 282c6 <cbor_internal_read_object+0x2b6>
   282c4:	be01      	bkpt	0x0001
   282c6:	2300      	movs	r3, #0
   282c8:	461a      	mov	r2, r3
   282ca:	4619      	mov	r1, r3
   282cc:	4618      	mov	r0, r3
   282ce:	f7e1 fb0d 	bl	98ec <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   282d2:	f7df ff75 	bl	81c0 <hal_debugger_connected>
   282d6:	b100      	cbz	r0, 282da <cbor_internal_read_object+0x2ca>
   282d8:	be01      	bkpt	0x0001
   282da:	2300      	movs	r3, #0
   282dc:	461a      	mov	r2, r3
   282de:	4619      	mov	r1, r3
   282e0:	4618      	mov	r0, r3
   282e2:	f7e1 fb03 	bl	98ec <__assert_func>
{ return value->type == CborDoubleType; }
   282e6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_double(value));
   282ea:	2bfb      	cmp	r3, #251	; 0xfb
   282ec:	d10e      	bne.n	2830c <cbor_internal_read_object+0x2fc>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   282ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   282f2:	f013 0f01 	tst.w	r3, #1
   282f6:	d013      	beq.n	28320 <cbor_internal_read_object+0x310>
    uint64_t data = _cbor_value_decode_int64_internal(value);
   282f8:	a805      	add	r0, sp, #20
   282fa:	f7f1 fafd 	bl	198f8 <_cbor_value_decode_int64_internal>
   282fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
    memcpy(result, &data, sizeof(*result));
   28302:	ab02      	add	r3, sp, #8
   28304:	cb03      	ldmia	r3!, {r0, r1}
   28306:	6028      	str	r0, [r5, #0]
   28308:	6069      	str	r1, [r5, #4]
                break;
   2830a:	e757      	b.n	281bc <cbor_internal_read_object+0x1ac>
    assert(cbor_value_is_double(value));
   2830c:	f7df ff58 	bl	81c0 <hal_debugger_connected>
   28310:	b100      	cbz	r0, 28314 <cbor_internal_read_object+0x304>
   28312:	be01      	bkpt	0x0001
   28314:	2300      	movs	r3, #0
   28316:	461a      	mov	r2, r3
   28318:	4619      	mov	r1, r3
   2831a:	4618      	mov	r0, r3
   2831c:	f7e1 fae6 	bl	98ec <__assert_func>
    assert(value->flags & CborIteratorFlag_IntegerValueTooLarge);
   28320:	f7df ff4e 	bl	81c0 <hal_debugger_connected>
   28324:	b100      	cbz	r0, 28328 <cbor_internal_read_object+0x318>
   28326:	be01      	bkpt	0x0001
   28328:	2300      	movs	r3, #0
   2832a:	461a      	mov	r2, r3
   2832c:	4619      	mov	r1, r3
   2832e:	4618      	mov	r0, r3
   28330:	f7e1 fadc 	bl	98ec <__assert_func>
                size_t len = cursor->len;
   28334:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   28336:	9302      	str	r3, [sp, #8]
{ return value->type == CborByteStringType; }
   28338:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_byte_string(value));
   2833c:	2b40      	cmp	r3, #64	; 0x40
   2833e:	d10a      	bne.n	28356 <cbor_internal_read_object+0x346>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   28340:	2300      	movs	r3, #0
   28342:	aa02      	add	r2, sp, #8
   28344:	4601      	mov	r1, r0
   28346:	a805      	add	r0, sp, #20
   28348:	f7f1 fbfc 	bl	19b44 <_cbor_value_copy_string>
                err |= cbor_value_copy_byte_string(&cur_value, lptr,
   2834c:	4307      	orrs	r7, r0
                *cursor->addr.bytestring.len = len;
   2834e:	68e3      	ldr	r3, [r4, #12]
   28350:	9a02      	ldr	r2, [sp, #8]
   28352:	601a      	str	r2, [r3, #0]
   28354:	e732      	b.n	281bc <cbor_internal_read_object+0x1ac>
    assert(cbor_value_is_byte_string(value));
   28356:	f7df ff33 	bl	81c0 <hal_debugger_connected>
   2835a:	b100      	cbz	r0, 2835e <cbor_internal_read_object+0x34e>
   2835c:	be01      	bkpt	0x0001
   2835e:	2300      	movs	r3, #0
   28360:	461a      	mov	r2, r3
   28362:	4619      	mov	r1, r3
   28364:	4618      	mov	r0, r3
   28366:	f7e1 fac1 	bl	98ec <__assert_func>
                size_t len = cursor->len;
   2836a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2836c:	9302      	str	r3, [sp, #8]
{ return value->type == CborTextStringType; }
   2836e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    assert(cbor_value_is_text_string(value));
   28372:	2b60      	cmp	r3, #96	; 0x60
   28374:	d107      	bne.n	28386 <cbor_internal_read_object+0x376>
    return _cbor_value_copy_string(value, buffer, buflen, next);
   28376:	2300      	movs	r3, #0
   28378:	aa02      	add	r2, sp, #8
   2837a:	4601      	mov	r1, r0
   2837c:	a805      	add	r0, sp, #20
   2837e:	f7f1 fbe1 	bl	19b44 <_cbor_value_copy_string>
                err |= cbor_value_copy_text_string(&cur_value, lptr,
   28382:	4307      	orrs	r7, r0
   28384:	e71a      	b.n	281bc <cbor_internal_read_object+0x1ac>
    assert(cbor_value_is_text_string(value));
   28386:	f7df ff1b 	bl	81c0 <hal_debugger_connected>
   2838a:	b100      	cbz	r0, 2838e <cbor_internal_read_object+0x37e>
   2838c:	be01      	bkpt	0x0001
   2838e:	2300      	movs	r3, #0
   28390:	461a      	mov	r2, r3
   28392:	4619      	mov	r1, r3
   28394:	4618      	mov	r0, r3
   28396:	f7e1 faa9 	bl	98ec <__assert_func>
                err |= cbor_read_array(&cur_value, &cursor->addr.array);
   2839a:	f104 0108 	add.w	r1, r4, #8
   2839e:	a805      	add	r0, sp, #20
   283a0:	f7ff fd1c 	bl	27ddc <cbor_read_array>
   283a4:	4307      	orrs	r7, r0
                continue;
   283a6:	e70c      	b.n	281c2 <cbor_internal_read_object+0x1b2>
                err |= cbor_internal_read_object(&cur_value, cursor->addr.obj,
   283a8:	2300      	movs	r3, #0
   283aa:	461a      	mov	r2, r3
   283ac:	68a1      	ldr	r1, [r4, #8]
   283ae:	a805      	add	r0, sp, #20
   283b0:	f7ff fe2e 	bl	28010 <cbor_internal_read_object>
   283b4:	4307      	orrs	r7, r0
                continue;
   283b6:	e704      	b.n	281c2 <cbor_internal_read_object+0x1b2>
                err |= CborErrorIllegalType;
   283b8:	f447 7782 	orr.w	r7, r7, #260	; 0x104
   283bc:	e6fe      	b.n	281bc <cbor_internal_read_object+0x1ac>
{ return value && value->type != CborInvalidType; }
   283be:	2300      	movs	r3, #0
   283c0:	e705      	b.n	281ce <cbor_internal_read_object+0x1be>
        err |= cbor_value_leave_container(root_value, &cur_value);
   283c2:	a905      	add	r1, sp, #20
   283c4:	4658      	mov	r0, fp
   283c6:	f7f1 fb94 	bl	19af2 <cbor_value_leave_container>
   283ca:	4307      	orrs	r7, r0
   283cc:	e69f      	b.n	2810e <cbor_internal_read_object+0xfe>
   283ce:	bf00      	nop

000283d0 <cbor_read_object>:

int
cbor_read_object(struct CborValue *value, const struct cbor_attr_t *attrs)
{
   283d0:	b508      	push	{r3, lr}
    int st;

    st = cbor_internal_read_object(value, attrs, NULL, 0);
   283d2:	2300      	movs	r3, #0
   283d4:	461a      	mov	r2, r3
   283d6:	f7ff fe1b 	bl	28010 <cbor_internal_read_object>
    return st;
}
   283da:	bd08      	pop	{r3, pc}

000283dc <cbor_buf_writer>:
    return (remaining < 0);
}

int
cbor_buf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   283dc:	b538      	push	{r3, r4, r5, lr}
   283de:	4604      	mov	r4, r0
    ptrdiff_t remaining = (ptrdiff_t)cb->end;
   283e0:	68c3      	ldr	r3, [r0, #12]
    remaining -= (ptrdiff_t)cb->ptr;
   283e2:	6880      	ldr	r0, [r0, #8]
   283e4:	1a1b      	subs	r3, r3, r0
    remaining -= (ptrdiff_t)len;
   283e6:	1a9b      	subs	r3, r3, r2
    struct cbor_buf_writer *cb = (struct cbor_buf_writer *) arg;

    if (would_overflow(cb, len)) {
   283e8:	2b00      	cmp	r3, #0
   283ea:	db0a      	blt.n	28402 <cbor_buf_writer+0x26>
   283ec:	4615      	mov	r5, r2
        return CborErrorOutOfMemory;
    }

    memcpy(cb->ptr, data, len);
   283ee:	f7e3 f9dd 	bl	b7ac <memcpy>
    cb->ptr += len;
   283f2:	68a3      	ldr	r3, [r4, #8]
   283f4:	442b      	add	r3, r5
   283f6:	60a3      	str	r3, [r4, #8]
    cb->enc.bytes_written += len;
   283f8:	6862      	ldr	r2, [r4, #4]
   283fa:	442a      	add	r2, r5
   283fc:	6062      	str	r2, [r4, #4]
    return CborNoError;
   283fe:	2000      	movs	r0, #0
}
   28400:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   28402:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   28406:	e7fb      	b.n	28400 <cbor_buf_writer+0x24>

00028408 <cbor_buf_writer_init>:

void
cbor_buf_writer_init(struct cbor_buf_writer *cb, uint8_t *buffer, size_t size)
{
    cb->ptr = buffer;
   28408:	6081      	str	r1, [r0, #8]
    cb->end = buffer + size;
   2840a:	440a      	add	r2, r1
   2840c:	60c2      	str	r2, [r0, #12]
    cb->enc.bytes_written = 0;
   2840e:	2300      	movs	r3, #0
   28410:	6043      	str	r3, [r0, #4]
    cb->enc.write = cbor_buf_writer;
   28412:	4b01      	ldr	r3, [pc, #4]	; (28418 <cbor_buf_writer_init+0x10>)
   28414:	6003      	str	r3, [r0, #0]
}
   28416:	4770      	bx	lr
   28418:	000283dd 	.word	0x000283dd

0002841c <cbor_buf_writer_buffer_size>:

size_t
cbor_buf_writer_buffer_size(struct cbor_buf_writer *cb, const uint8_t *buffer)
{
    return (size_t)(cb->ptr - buffer);
   2841c:	6880      	ldr	r0, [r0, #8]
}
   2841e:	1a40      	subs	r0, r0, r1
   28420:	4770      	bx	lr

00028422 <cbor_mbuf_reader_cpy>:
}

static uintptr_t
cbor_mbuf_reader_cpy(struct cbor_decoder_reader *d, char *dst, int offset,
                     size_t len)
{
   28422:	b538      	push	{r3, r4, r5, lr}
   28424:	461d      	mov	r5, r3
    int rc;
    struct cbor_mbuf_reader *cb = (struct cbor_mbuf_reader *) d;

    rc = os_mbuf_copydata(cb->m, offset + cb->init_off, len, dst);
   28426:	69c3      	ldr	r3, [r0, #28]
   28428:	189c      	adds	r4, r3, r2
   2842a:	460b      	mov	r3, r1
   2842c:	462a      	mov	r2, r5
   2842e:	4621      	mov	r1, r4
   28430:	6a00      	ldr	r0, [r0, #32]
   28432:	f7e1 ffd7 	bl	a3e4 <os_mbuf_copydata>
    if (rc == 0) {
   28436:	b108      	cbz	r0, 2843c <cbor_mbuf_reader_cpy+0x1a>
        return true;
    }
    return false;
   28438:	2000      	movs	r0, #0
}
   2843a:	bd38      	pop	{r3, r4, r5, pc}
        return true;
   2843c:	2001      	movs	r0, #1
   2843e:	e7fc      	b.n	2843a <cbor_mbuf_reader_cpy+0x18>

00028440 <cbor_mbuf_reader_get8>:
{
   28440:	b510      	push	{r4, lr}
   28442:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   28444:	69c4      	ldr	r4, [r0, #28]
   28446:	f10d 0307 	add.w	r3, sp, #7
   2844a:	2201      	movs	r2, #1
   2844c:	4421      	add	r1, r4
   2844e:	6a00      	ldr	r0, [r0, #32]
   28450:	f7e1 ffc8 	bl	a3e4 <os_mbuf_copydata>
}
   28454:	f89d 0007 	ldrb.w	r0, [sp, #7]
   28458:	b002      	add	sp, #8
   2845a:	bd10      	pop	{r4, pc}

0002845c <cbor_mbuf_reader_cmp>:
{
   2845c:	b510      	push	{r4, lr}
    return os_mbuf_cmpf(cb->m, offset + cb->init_off, buf, len) == 0;
   2845e:	69c4      	ldr	r4, [r0, #28]
   28460:	4414      	add	r4, r2
   28462:	460a      	mov	r2, r1
   28464:	4621      	mov	r1, r4
   28466:	6a00      	ldr	r0, [r0, #32]
   28468:	f7e2 f83b 	bl	a4e2 <os_mbuf_cmpf>
}
   2846c:	fab0 f080 	clz	r0, r0
   28470:	0940      	lsrs	r0, r0, #5
   28472:	bd10      	pop	{r4, pc}

00028474 <cbor_mbuf_reader_get64>:
{
   28474:	b510      	push	{r4, lr}
   28476:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   28478:	69c4      	ldr	r4, [r0, #28]
   2847a:	466b      	mov	r3, sp
   2847c:	2208      	movs	r2, #8
   2847e:	4421      	add	r1, r4
   28480:	6a00      	ldr	r0, [r0, #32]
   28482:	f7e1 ffaf 	bl	a3e4 <os_mbuf_copydata>
}
   28486:	9801      	ldr	r0, [sp, #4]
   28488:	ba00      	rev	r0, r0
   2848a:	9900      	ldr	r1, [sp, #0]
   2848c:	ba09      	rev	r1, r1
   2848e:	b002      	add	sp, #8
   28490:	bd10      	pop	{r4, pc}

00028492 <cbor_mbuf_reader_get32>:
{
   28492:	b510      	push	{r4, lr}
   28494:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   28496:	69c4      	ldr	r4, [r0, #28]
   28498:	ab01      	add	r3, sp, #4
   2849a:	2204      	movs	r2, #4
   2849c:	4421      	add	r1, r4
   2849e:	6a00      	ldr	r0, [r0, #32]
   284a0:	f7e1 ffa0 	bl	a3e4 <os_mbuf_copydata>
}
   284a4:	9801      	ldr	r0, [sp, #4]
   284a6:	ba00      	rev	r0, r0
   284a8:	b002      	add	sp, #8
   284aa:	bd10      	pop	{r4, pc}

000284ac <cbor_mbuf_reader_get16>:
{
   284ac:	b510      	push	{r4, lr}
   284ae:	b082      	sub	sp, #8
    os_mbuf_copydata(cb->m, offset + cb->init_off, sizeof(val), &val);
   284b0:	69c4      	ldr	r4, [r0, #28]
   284b2:	f10d 0306 	add.w	r3, sp, #6
   284b6:	2202      	movs	r2, #2
   284b8:	4421      	add	r1, r4
   284ba:	6a00      	ldr	r0, [r0, #32]
   284bc:	f7e1 ff92 	bl	a3e4 <os_mbuf_copydata>
    return cbor_ntohs(val);
   284c0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   284c4:	ba40      	rev16	r0, r0
}
   284c6:	b280      	uxth	r0, r0
   284c8:	b002      	add	sp, #8
   284ca:	bd10      	pop	{r4, pc}

000284cc <cbor_mbuf_reader_init>:

void
cbor_mbuf_reader_init(struct cbor_mbuf_reader *cb, struct os_mbuf *m,
                      int initial_offset)
{
   284cc:	b508      	push	{r3, lr}
    struct os_mbuf_pkthdr *hdr;

    cb->r.get8 = &cbor_mbuf_reader_get8;
   284ce:	4b0f      	ldr	r3, [pc, #60]	; (2850c <cbor_mbuf_reader_init+0x40>)
   284d0:	6003      	str	r3, [r0, #0]
    cb->r.get16 = &cbor_mbuf_reader_get16;
   284d2:	4b0f      	ldr	r3, [pc, #60]	; (28510 <cbor_mbuf_reader_init+0x44>)
   284d4:	6043      	str	r3, [r0, #4]
    cb->r.get32 = &cbor_mbuf_reader_get32;
   284d6:	4b0f      	ldr	r3, [pc, #60]	; (28514 <cbor_mbuf_reader_init+0x48>)
   284d8:	6083      	str	r3, [r0, #8]
    cb->r.get64 = &cbor_mbuf_reader_get64;
   284da:	4b0f      	ldr	r3, [pc, #60]	; (28518 <cbor_mbuf_reader_init+0x4c>)
   284dc:	60c3      	str	r3, [r0, #12]
    cb->r.cmp = &cbor_mbuf_reader_cmp;
   284de:	4b0f      	ldr	r3, [pc, #60]	; (2851c <cbor_mbuf_reader_init+0x50>)
   284e0:	6103      	str	r3, [r0, #16]
    cb->r.cpy = &cbor_mbuf_reader_cpy;
   284e2:	4b0f      	ldr	r3, [pc, #60]	; (28520 <cbor_mbuf_reader_init+0x54>)
   284e4:	6143      	str	r3, [r0, #20]

    assert(OS_MBUF_IS_PKTHDR(m));
   284e6:	794b      	ldrb	r3, [r1, #5]
   284e8:	2b07      	cmp	r3, #7
   284ea:	d905      	bls.n	284f8 <cbor_mbuf_reader_init+0x2c>
    hdr = OS_MBUF_PKTHDR(m);
    cb->m = m;
   284ec:	6201      	str	r1, [r0, #32]
    cb->init_off = initial_offset;
   284ee:	61c2      	str	r2, [r0, #28]
    cb->r.message_size = hdr->omp_len - initial_offset;
   284f0:	8a0b      	ldrh	r3, [r1, #16]
   284f2:	1a9a      	subs	r2, r3, r2
   284f4:	6182      	str	r2, [r0, #24]
}
   284f6:	bd08      	pop	{r3, pc}
    assert(OS_MBUF_IS_PKTHDR(m));
   284f8:	f7df fe62 	bl	81c0 <hal_debugger_connected>
   284fc:	b100      	cbz	r0, 28500 <cbor_mbuf_reader_init+0x34>
   284fe:	be01      	bkpt	0x0001
   28500:	2300      	movs	r3, #0
   28502:	461a      	mov	r2, r3
   28504:	4619      	mov	r1, r3
   28506:	4618      	mov	r0, r3
   28508:	f7e1 f9f0 	bl	98ec <__assert_func>
   2850c:	00028441 	.word	0x00028441
   28510:	000284ad 	.word	0x000284ad
   28514:	00028493 	.word	0x00028493
   28518:	00028475 	.word	0x00028475
   2851c:	0002845d 	.word	0x0002845d
   28520:	00028423 	.word	0x00028423

00028524 <cbor_mbuf_writer>:
#include <tinycbor/cbor.h>
#include <tinycbor/cbor_mbuf_writer.h>

int
cbor_mbuf_writer(struct cbor_encoder_writer *arg, const char *data, int len)
{
   28524:	b538      	push	{r3, r4, r5, lr}
   28526:	4604      	mov	r4, r0
   28528:	4615      	mov	r5, r2
    int rc;
    struct cbor_mbuf_writer *cb = (struct cbor_mbuf_writer *) arg;

    rc = os_mbuf_append(cb->m, data, len);
   2852a:	b292      	uxth	r2, r2
   2852c:	6880      	ldr	r0, [r0, #8]
   2852e:	f7e1 fe69 	bl	a204 <os_mbuf_append>
    if (rc) {
   28532:	b928      	cbnz	r0, 28540 <cbor_mbuf_writer+0x1c>
   28534:	4603      	mov	r3, r0
        return CborErrorOutOfMemory;
    }
    cb->enc.bytes_written += len;
   28536:	6862      	ldr	r2, [r4, #4]
   28538:	442a      	add	r2, r5
   2853a:	6062      	str	r2, [r4, #4]
    return CborNoError;
}
   2853c:	4618      	mov	r0, r3
   2853e:	bd38      	pop	{r3, r4, r5, pc}
        return CborErrorOutOfMemory;
   28540:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   28544:	e7fa      	b.n	2853c <cbor_mbuf_writer+0x18>
	...

00028548 <cbor_mbuf_writer_init>:


void
cbor_mbuf_writer_init(struct cbor_mbuf_writer *cb, struct os_mbuf *m)
{
    cb->m = m;
   28548:	6081      	str	r1, [r0, #8]
    cb->enc.bytes_written = 0;
   2854a:	2300      	movs	r3, #0
   2854c:	6043      	str	r3, [r0, #4]
    cb->enc.write = &cbor_mbuf_writer;
   2854e:	4b01      	ldr	r3, [pc, #4]	; (28554 <cbor_mbuf_writer_init+0xc>)
   28550:	6003      	str	r3, [r0, #0]
}
   28552:	4770      	bx	lr
   28554:	00028525 	.word	0x00028525

00028558 <nrf52_clock_hfxo_request>:
 *
 * @return int 0: hfxo was already on. 1: hfxo was turned on.
 */
int
nrf52_clock_hfxo_request(void)
{
   28558:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2855a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   2855e:	b672      	cpsid	i
    assert(0);
#endif

    started = 0;
    __HAL_DISABLE_INTERRUPTS(ctx);
    assert(nrf52_clock_hfxo_refcnt < 0xff);
   28560:	4b0d      	ldr	r3, [pc, #52]	; (28598 <nrf52_clock_hfxo_request+0x40>)
   28562:	781b      	ldrb	r3, [r3, #0]
   28564:	2bff      	cmp	r3, #255	; 0xff
   28566:	d00b      	beq.n	28580 <nrf52_clock_hfxo_request+0x28>
    if (nrf52_clock_hfxo_refcnt == 0) {
   28568:	b9a3      	cbnz	r3, 28594 <nrf52_clock_hfxo_request+0x3c>
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   2856a:	2001      	movs	r0, #1
   2856c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   28570:	6018      	str	r0, [r3, #0]
        started = 1;
    }
    ++nrf52_clock_hfxo_refcnt;
   28572:	4a09      	ldr	r2, [pc, #36]	; (28598 <nrf52_clock_hfxo_request+0x40>)
   28574:	7813      	ldrb	r3, [r2, #0]
   28576:	3301      	adds	r3, #1
   28578:	7013      	strb	r3, [r2, #0]
    __HAL_ENABLE_INTERRUPTS(ctx);
   2857a:	b901      	cbnz	r1, 2857e <nrf52_clock_hfxo_request+0x26>
  __ASM volatile ("cpsie i" : : : "memory");
   2857c:	b662      	cpsie	i

    return started;
}
   2857e:	bd08      	pop	{r3, pc}
    assert(nrf52_clock_hfxo_refcnt < 0xff);
   28580:	f7df fe1e 	bl	81c0 <hal_debugger_connected>
   28584:	b100      	cbz	r0, 28588 <nrf52_clock_hfxo_request+0x30>
   28586:	be01      	bkpt	0x0001
   28588:	2300      	movs	r3, #0
   2858a:	461a      	mov	r2, r3
   2858c:	4619      	mov	r1, r3
   2858e:	4618      	mov	r0, r3
   28590:	f7e1 f9ac 	bl	98ec <__assert_func>
    started = 0;
   28594:	2000      	movs	r0, #0
   28596:	e7ec      	b.n	28572 <nrf52_clock_hfxo_request+0x1a>
   28598:	200094e4 	.word	0x200094e4

0002859c <nrf52_clock_hfxo_release>:
 * @return int 0: HFXO not stopped by this call (others using it) 1: HFXO
 *         stopped.
 */
int
nrf52_clock_hfxo_release(void)
{
   2859c:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   2859e:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   285a2:	b672      	cpsid	i
    assert(0);
#endif

    stopped = 0;
    __HAL_DISABLE_INTERRUPTS(ctx);
    assert(nrf52_clock_hfxo_refcnt != 0);
   285a4:	4b0d      	ldr	r3, [pc, #52]	; (285dc <nrf52_clock_hfxo_release+0x40>)
   285a6:	781b      	ldrb	r3, [r3, #0]
   285a8:	b15b      	cbz	r3, 285c2 <nrf52_clock_hfxo_release+0x26>
    --nrf52_clock_hfxo_refcnt;
   285aa:	3b01      	subs	r3, #1
   285ac:	b2db      	uxtb	r3, r3
   285ae:	490b      	ldr	r1, [pc, #44]	; (285dc <nrf52_clock_hfxo_release+0x40>)
   285b0:	700b      	strb	r3, [r1, #0]
    if (nrf52_clock_hfxo_refcnt == 0) {
   285b2:	b983      	cbnz	r3, 285d6 <nrf52_clock_hfxo_release+0x3a>
        NRF_CLOCK->TASKS_HFCLKSTOP = 1;
   285b4:	2001      	movs	r0, #1
   285b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   285ba:	6058      	str	r0, [r3, #4]
        stopped = 1;
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   285bc:	b902      	cbnz	r2, 285c0 <nrf52_clock_hfxo_release+0x24>
  __ASM volatile ("cpsie i" : : : "memory");
   285be:	b662      	cpsie	i

    return stopped;
}
   285c0:	bd08      	pop	{r3, pc}
    assert(nrf52_clock_hfxo_refcnt != 0);
   285c2:	f7df fdfd 	bl	81c0 <hal_debugger_connected>
   285c6:	b100      	cbz	r0, 285ca <nrf52_clock_hfxo_release+0x2e>
   285c8:	be01      	bkpt	0x0001
   285ca:	2300      	movs	r3, #0
   285cc:	461a      	mov	r2, r3
   285ce:	4619      	mov	r1, r3
   285d0:	4618      	mov	r0, r3
   285d2:	f7e1 f98b 	bl	98ec <__assert_func>
    stopped = 0;
   285d6:	2000      	movs	r0, #0
   285d8:	e7f0      	b.n	285bc <nrf52_clock_hfxo_release+0x20>
   285da:	bf00      	nop
   285dc:	200094e4 	.word	0x200094e4

000285e0 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   285e0:	2010      	movs	r0, #16
   285e2:	4770      	bx	lr

000285e4 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   285e4:	b570      	push	{r4, r5, r6, lr}
   285e6:	4606      	mov	r6, r0
   285e8:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   285ea:	460d      	mov	r5, r1
   285ec:	2908      	cmp	r1, #8
   285ee:	bf28      	it	cs
   285f0:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   285f2:	462a      	mov	r2, r5
   285f4:	4906      	ldr	r1, [pc, #24]	; (28610 <hal_bsp_hw_id+0x2c>)
   285f6:	f7e3 f8d9 	bl	b7ac <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   285fa:	1b64      	subs	r4, r4, r5
   285fc:	2c08      	cmp	r4, #8
   285fe:	bf28      	it	cs
   28600:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   28602:	4622      	mov	r2, r4
   28604:	4903      	ldr	r1, [pc, #12]	; (28614 <hal_bsp_hw_id+0x30>)
   28606:	1970      	adds	r0, r6, r5
   28608:	f7e3 f8d0 	bl	b7ac <memcpy>

    return len + cnt;
}
   2860c:	1928      	adds	r0, r5, r4
   2860e:	bd70      	pop	{r4, r5, r6, pc}
   28610:	10000060 	.word	0x10000060
   28614:	100000a4 	.word	0x100000a4

00028618 <os_error_to_sys>:
#include "os/os_error.h"

int
os_error_to_sys(os_error_t os_error)
{
    switch (os_error) {
   28618:	280b      	cmp	r0, #11
   2861a:	d818      	bhi.n	2864e <os_error_to_sys+0x36>
   2861c:	e8df f000 	tbb	[pc, r0]
   28620:	0b081a06 	.word	0x0b081a06
   28624:	170e1717 	.word	0x170e1717
   28628:	14111717 	.word	0x14111717
        case OS_OK:             return SYS_EOK;
   2862c:	2000      	movs	r0, #0
   2862e:	4770      	bx	lr
        case OS_ENOMEM:         return SYS_ENOMEM; 
        case OS_EINVAL:         return SYS_EINVAL; 
   28630:	f06f 0001 	mvn.w	r0, #1
   28634:	4770      	bx	lr
        case OS_INVALID_PARM:   return SYS_EINVAL; 
   28636:	f06f 0001 	mvn.w	r0, #1
   2863a:	4770      	bx	lr
        case OS_TIMEOUT:        return SYS_ETIMEOUT; 
   2863c:	f06f 0002 	mvn.w	r0, #2
   28640:	4770      	bx	lr
        case OS_ENOENT:         return SYS_ENOENT; 
   28642:	f06f 0003 	mvn.w	r0, #3
   28646:	4770      	bx	lr
        case OS_EBUSY:          return SYS_EBUSY; 
   28648:	f06f 0007 	mvn.w	r0, #7
   2864c:	4770      	bx	lr
        default:                return SYS_EUNKNOWN;
   2864e:	f06f 000c 	mvn.w	r0, #12
   28652:	4770      	bx	lr
        case OS_ENOMEM:         return SYS_ENOMEM; 
   28654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
}
   28658:	4770      	bx	lr
   2865a:	0000      	movs	r0, r0
   2865c:	00008653 	.word	0x00008653
   28660:	00000004 	.word	0x00000004
   28664:	00000004 	.word	0x00000004
   28668:	0000875b 	.word	0x0000875b
   2866c:	000087e7 	.word	0x000087e7
   28670:	00000000 	.word	0x00000000
   28674:	00000001 	.word	0x00000001
   28678:	000087e9 	.word	0x000087e9
   2867c:	0002866c 	.word	0x0002866c
   28680:	00000000 	.word	0x00000000
   28684:	0002868c 	.word	0x0002868c
   28688:	00000002 	.word	0x00000002
   2868c:	203a      	.short	0x203a
   2868e:	4c42      	.short	0x4c42
   28690:	61662045 	.word	0x61662045
   28694:	45476c69 	.word	0x45476c69
   28698:	61662054 	.word	0x61662054
   2869c:	55526c69 	.word	0x55526c69
   286a0:	6166204e 	.word	0x6166204e
   286a4:	00006c69 	.word	0x00006c69
   286a8:	000286d8 	.word	0x000286d8
   286ac:	00000013 	.word	0x00000013
   286b0:	0000007b 	.word	0x0000007b
   286b4:	00000005 	.word	0x00000005
   286b8:	000286d8 	.word	0x000286d8
   286bc:	00000013 	.word	0x00000013
   286c0:	000000a2 	.word	0x000000a2
   286c4:	00000012 	.word	0x00000012
   286c8:	000286d8 	.word	0x000286d8
   286cc:	00000013 	.word	0x00000013
   286d0:	000000a3 	.word	0x000000a3
   286d4:	0000000b 	.word	0x0000000b
   286d8:	74737572 	.word	0x74737572
   286dc:	7070612f 	.word	0x7070612f
   286e0:	6372732f 	.word	0x6372732f
   286e4:	62696c2f 	.word	0x62696c2f
   286e8:	0073722e 	.word	0x0073722e
   286ec:	00009003 	.word	0x00009003
   286f0:	00000004 	.word	0x00000004
   286f4:	00000004 	.word	0x00000004
   286f8:	0000875b 	.word	0x0000875b
   286fc:	696e6170 	.word	0x696e6170
   28700:	2063      	.short	0x2063
   28702:	6f6e      	.short	0x6f6e
   28704:	636f6c20 	.word	0x636f6c20
   28708:	0a          	.byte	0x0a
   28709:	61          	.byte	0x61
   2870a:	2074      	.short	0x2074
   2870c:	6e696c20 	.word	0x6e696c20
   28710:	2065      	.short	0x2065
   28712:	000a      	.short	0x000a
   28714:	000286d8 	.word	0x000286d8
   28718:	00000013 	.word	0x00000013
   2871c:	000000b9 	.word	0x000000b9
   28720:	0000003a 	.word	0x0000003a
   28724:	6c6c6163 	.word	0x6c6c6163
   28728:	60206465 	.word	0x60206465
   2872c:	6974704f 	.word	0x6974704f
   28730:	3a3a6e6f 	.word	0x3a3a6e6f
   28734:	72776e75 	.word	0x72776e75
   28738:	29287061 	.word	0x29287061
   2873c:	6e6f2060 	.word	0x6e6f2060
   28740:	60206120 	.word	0x60206120
   28744:	656e6f4e 	.word	0x656e6f4e
   28748:	61762060 	.word	0x61762060
   2874c:	0065756c 	.word	0x0065756c
   28750:	6c363025 	.word	0x6c363025
   28754:	00002075 	.word	0x00002075
   28758:	18110010 	.word	0x18110010
   2875c:	6f727265 	.word	0x6f727265
   28760:	65642072 	.word	0x65642072
   28764:	6d726574 	.word	0x6d726574
   28768:	6e696e69 	.word	0x6e696e69
   2876c:	64612067 	.word	0x64612067
   28770:	73657264 	.word	0x73657264
   28774:	79742073 	.word	0x79742073
   28778:	203b6570 	.word	0x203b6570
   2877c:	253d6372 	.word	0x253d6372
   28780:	00000a64 	.word	0x00000a64
   28784:	6f727265 	.word	0x6f727265
   28788:	65732072 	.word	0x65732072
   2878c:	6e697474 	.word	0x6e697474
   28790:	64612067 	.word	0x64612067
   28794:	74726576 	.word	0x74726576
   28798:	6d657369 	.word	0x6d657369
   2879c:	20746e65 	.word	0x20746e65
   287a0:	61746164 	.word	0x61746164
   287a4:	6372203b 	.word	0x6372203b
   287a8:	0a64253d 	.word	0x0a64253d
   287ac:	00000000 	.word	0x00000000
   287b0:	6f727265 	.word	0x6f727265
   287b4:	6e652072 	.word	0x6e652072
   287b8:	696c6261 	.word	0x696c6261
   287bc:	6120676e 	.word	0x6120676e
   287c0:	72657664 	.word	0x72657664
   287c4:	65736974 	.word	0x65736974
   287c8:	746e656d 	.word	0x746e656d
   287cc:	6372203b 	.word	0x6372203b
   287d0:	0a64253d 	.word	0x0a64253d
   287d4:	00000000 	.word	0x00000000
   287d8:	61747365 	.word	0x61747365
   287dc:	73696c62 	.word	0x73696c62
   287e0:	00646568 	.word	0x00646568
   287e4:	6c696166 	.word	0x6c696166
   287e8:	00006465 	.word	0x00006465
   287ec:	6e6e6f63 	.word	0x6e6e6f63
   287f0:	69746365 	.word	0x69746365
   287f4:	25206e6f 	.word	0x25206e6f
   287f8:	73203b73 	.word	0x73203b73
   287fc:	75746174 	.word	0x75746174
   28800:	64253d73 	.word	0x64253d73
   28804:	00000020 	.word	0x00000020
   28808:	63736964 	.word	0x63736964
   2880c:	656e6e6f 	.word	0x656e6e6f
   28810:	203b7463 	.word	0x203b7463
   28814:	73616572 	.word	0x73616572
   28818:	253d6e6f 	.word	0x253d6e6f
   2881c:	00002064 	.word	0x00002064
   28820:	6e6e6f63 	.word	0x6e6e6f63
   28824:	69746365 	.word	0x69746365
   28828:	75206e6f 	.word	0x75206e6f
   2882c:	74616470 	.word	0x74616470
   28830:	203b6465 	.word	0x203b6465
   28834:	74617473 	.word	0x74617473
   28838:	253d7375 	.word	0x253d7375
   2883c:	00002064 	.word	0x00002064
   28840:	65766461 	.word	0x65766461
   28844:	73697472 	.word	0x73697472
   28848:	6f632065 	.word	0x6f632065
   2884c:	656c706d 	.word	0x656c706d
   28850:	203b6574 	.word	0x203b6574
   28854:	73616572 	.word	0x73616572
   28858:	253d6e6f 	.word	0x253d6e6f
   2885c:	00000064 	.word	0x00000064
   28860:	72636e65 	.word	0x72636e65
   28864:	69747079 	.word	0x69747079
   28868:	63206e6f 	.word	0x63206e6f
   2886c:	676e6168 	.word	0x676e6168
   28870:	76652065 	.word	0x76652065
   28874:	3b746e65 	.word	0x3b746e65
   28878:	61747320 	.word	0x61747320
   2887c:	3d737574 	.word	0x3d737574
   28880:	00206425 	.word	0x00206425
   28884:	73627573 	.word	0x73627573
   28888:	62697263 	.word	0x62697263
   2888c:	76652065 	.word	0x76652065
   28890:	3b746e65 	.word	0x3b746e65
   28894:	6e6f6320 	.word	0x6e6f6320
   28898:	61685f6e 	.word	0x61685f6e
   2889c:	656c646e 	.word	0x656c646e
   288a0:	2064253d 	.word	0x2064253d
   288a4:	72747461 	.word	0x72747461
   288a8:	6e61685f 	.word	0x6e61685f
   288ac:	3d656c64 	.word	0x3d656c64
   288b0:	72206425 	.word	0x72206425
   288b4:	6f736165 	.word	0x6f736165
   288b8:	64253d6e 	.word	0x64253d6e
   288bc:	65727020 	.word	0x65727020
   288c0:	253d6e76 	.word	0x253d6e76
   288c4:	75632064 	.word	0x75632064
   288c8:	253d6e72 	.word	0x253d6e72
   288cc:	72702064 	.word	0x72702064
   288d0:	3d697665 	.word	0x3d697665
   288d4:	63206425 	.word	0x63206425
   288d8:	3d697275 	.word	0x3d697275
   288dc:	000a6425 	.word	0x000a6425
   288e0:	2075746d 	.word	0x2075746d
   288e4:	61647075 	.word	0x61647075
   288e8:	65206574 	.word	0x65206574
   288ec:	746e6576 	.word	0x746e6576
   288f0:	6f63203b 	.word	0x6f63203b
   288f4:	685f6e6e 	.word	0x685f6e6e
   288f8:	6c646e61 	.word	0x6c646e61
   288fc:	64253d65 	.word	0x64253d65
   28900:	64696320 	.word	0x64696320
   28904:	2064253d 	.word	0x2064253d
   28908:	3d75746d 	.word	0x3d75746d
   2890c:	000a6425 	.word	0x000a6425
   28910:	65736552 	.word	0x65736552
   28914:	6e697474 	.word	0x6e697474
   28918:	74732067 	.word	0x74732067
   2891c:	3b657461 	.word	0x3b657461
   28920:	61657220 	.word	0x61657220
   28924:	3d6e6f73 	.word	0x3d6e6f73
   28928:	000a6425 	.word	0x000a6425
   2892c:	646e6168 	.word	0x646e6168
   28930:	253d656c 	.word	0x253d656c
   28934:	756f2064 	.word	0x756f2064
   28938:	746f5f72 	.word	0x746f5f72
   2893c:	64615f61 	.word	0x64615f61
   28940:	745f7264 	.word	0x745f7264
   28944:	3d657079 	.word	0x3d657079
   28948:	6f206425 	.word	0x6f206425
   2894c:	6f5f7275 	.word	0x6f5f7275
   28950:	615f6174 	.word	0x615f6174
   28954:	3d726464 	.word	0x3d726464
   28958:	00000000 	.word	0x00000000
   2895c:	72756f20 	.word	0x72756f20
   28960:	5f64695f 	.word	0x5f64695f
   28964:	72646461 	.word	0x72646461
   28968:	7079745f 	.word	0x7079745f
   2896c:	64253d65 	.word	0x64253d65
   28970:	72756f20 	.word	0x72756f20
   28974:	5f64695f 	.word	0x5f64695f
   28978:	72646461 	.word	0x72646461
   2897c:	0000003d 	.word	0x0000003d
   28980:	65657020 	.word	0x65657020
   28984:	746f5f72 	.word	0x746f5f72
   28988:	64615f61 	.word	0x64615f61
   2898c:	745f7264 	.word	0x745f7264
   28990:	3d657079 	.word	0x3d657079
   28994:	70206425 	.word	0x70206425
   28998:	5f726565 	.word	0x5f726565
   2899c:	5f61746f 	.word	0x5f61746f
   289a0:	72646461 	.word	0x72646461
   289a4:	0000003d 	.word	0x0000003d
   289a8:	65657020 	.word	0x65657020
   289ac:	64695f72 	.word	0x64695f72
   289b0:	6464615f 	.word	0x6464615f
   289b4:	79745f72 	.word	0x79745f72
   289b8:	253d6570 	.word	0x253d6570
   289bc:	65702064 	.word	0x65702064
   289c0:	695f7265 	.word	0x695f7265
   289c4:	64615f64 	.word	0x64615f64
   289c8:	003d7264 	.word	0x003d7264
   289cc:	6e6f6320 	.word	0x6e6f6320
   289d0:	74695f6e 	.word	0x74695f6e
   289d4:	253d6c76 	.word	0x253d6c76
   289d8:	6f632064 	.word	0x6f632064
   289dc:	6c5f6e6e 	.word	0x6c5f6e6e
   289e0:	6e657461 	.word	0x6e657461
   289e4:	253d7963 	.word	0x253d7963
   289e8:	75732064 	.word	0x75732064
   289ec:	76726570 	.word	0x76726570
   289f0:	6f697369 	.word	0x6f697369
   289f4:	69745f6e 	.word	0x69745f6e
   289f8:	756f656d 	.word	0x756f656d
   289fc:	64253d74 	.word	0x64253d74
   28a00:	636e6520 	.word	0x636e6520
   28a04:	74707972 	.word	0x74707972
   28a08:	253d6465 	.word	0x253d6465
   28a0c:	75612064 	.word	0x75612064
   28a10:	6e656874 	.word	0x6e656874
   28a14:	61636974 	.word	0x61636974
   28a18:	3d646574 	.word	0x3d646574
   28a1c:	62206425 	.word	0x62206425
   28a20:	65646e6f 	.word	0x65646e6f
   28a24:	64253d64 	.word	0x64253d64
   28a28:	0000000a 	.word	0x0000000a
   28a2c:	72617453 	.word	0x72617453
   28a30:	676e6974 	.word	0x676e6974
   28a34:	454c4220 	.word	0x454c4220
   28a38:	0a2e2e2e 	.word	0x0a2e2e2e
   28a3c:	00000000 	.word	0x00000000
   28a40:	656e6970 	.word	0x656e6970
   28a44:	656d6974 	.word	0x656d6974
   28a48:	00000000 	.word	0x00000000
   28a4c:	20454c42 	.word	0x20454c42
   28a50:	72617473 	.word	0x72617473
   28a54:	0a646574 	.word	0x0a646574
   28a58:	00000000 	.word	0x00000000

00028a5c <gatt_svr_chr_sec_test_rand_uuid>:
   28a5c:	c96df680 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   28a6c:	0000005c                                \...

00028a70 <gatt_svr_chr_sec_test_static_uuid>:
   28a70:	c96df780 16007107 7e45e1b0 3a659e89     ..m..q....E~..e:
   28a80:	0000005c                                \...

00028a84 <gatt_svr_svc_sec_test_uuid>:
   28a84:	a2712d80 c858b459 43999912 462f1295     .-q.Y.X....C../F
   28a94:	00000059                                Y...

00028a98 <gatt_svr_svcs>:
   28a98:	00000001 00028a84 00000000 200000f0     ............... 
	...
   28ab8:	65737341 40207472 25783020 00000a78     Assert @ 0x%x...
   28ac8:	65737341 40207472 25783020 202d2078     Assert @ 0x%x - 
   28ad8:	253a7325 00000a64 61686e55 656c646e     %s:%d...Unhandle
   28ae8:	6e692064 72726574 20747075 646c2528     d interrupt (%ld
   28af8:	65202c29 70656378 6e6f6974 20707320     ), exception sp 
   28b08:	30257830 0a786c38 00000000 3a307220     0x%08lx..... r0:
   28b18:	30257830 20786c38 3a317220 30257830     0x%08lx  r1:0x%0
   28b28:	20786c38 3a327220 30257830 20786c38     8lx  r2:0x%08lx 
   28b38:	3a337220 30257830 0a786c38 00000000      r3:0x%08lx.....
   28b48:	3a347220 30257830 20786c38 3a357220      r4:0x%08lx  r5:
   28b58:	30257830 20786c38 3a367220 30257830     0x%08lx  r6:0x%0
   28b68:	20786c38 3a377220 30257830 0a786c38     8lx  r7:0x%08lx.
   28b78:	00000000 3a387220 30257830 20786c38     .... r8:0x%08lx 
   28b88:	3a397220 30257830 20786c38 3a303172      r9:0x%08lx r10:
   28b98:	30257830 20786c38 3a313172 30257830     0x%08lx r11:0x%0
   28ba8:	0a786c38 00000000 3a323172 30257830     8lx.....r12:0x%0
   28bb8:	20786c38 3a726c20 30257830 20786c38     8lx  lr:0x%08lx 
   28bc8:	3a637020 30257830 20786c38 3a727370      pc:0x%08lx psr:
   28bd8:	30257830 0a786c38 00000000 52534349     0x%08lx.....ICSR
   28be8:	2578303a 786c3830 53464820 78303a52     :0x%08lx HFSR:0x
   28bf8:	6c383025 46432078 303a5253 38302578     %08lx CFSR:0x%08
   28c08:	000a786c 52414642 2578303a 786c3830     lx..BFAR:0x%08lx
   28c18:	464d4d20 303a5241 38302578 000a786c      MMFAR:0x%08lx..
   28c28:	6e69616d 00000000 656c6469 00000000     main....idle....
   28c38:	7379736d 0000315f                       msys_1..

00028c40 <MemFile_methods>:
   28c40:	0000bf49 00000000                       I.......

00028c48 <stdout>:
   28c48:	20000150 00006372                       P.. rc..

00028c50 <imgr_mgmt_handlers>:
	...
   28c84:	0000c465 252e7525 75252e75 756c252e     e...%u.%u.%u.%lu
   28c94:	00000000 252e7525 75252e75 00000000     ....%u.%u.%u....
   28ca4:	5f656c62 5f706167 61647075 00006574     ble_gap_update..
   28cb4:	28030010 28020010 28000010              ...(...(...(

00028cc0 <ble_gattc_err_dispatch>:
   28cc0:	0000dd17 0000dd5b 0000ddab 0000ddf9     ....[...........
   28cd0:	0000de4b 0000de99 0000deef 0000df3d     K...........=...
   28ce0:	0000df81 0000dfc5 0000e01f 0000e26d     ............m...
   28cf0:	0000e317 0000e2f7 0000e71d 5f656c62     ............ble_
   28d00:	74746167 72705f63 705f636f 006c6f6f     gattc_proc_pool.

00028d10 <ble_gattc_resume_dispatch>:
   28d10:	00000000 0000e675 0000e625 0000e5c5     ....u...%.......
   28d20:	0000e56d 0000e51d 0000e4cd 00000000     m...............
   28d30:	00000000 0000e495 00000000 00000000     ................
   28d40:	0000e457 0000e3c5 00000000              W...........

00028d4c <ble_gattc_tmo_dispatch>:
   28d4c:	0000dd09 0000dd4d 0000dd9d 0000ddeb     ....M...........
   28d5c:	0000de3d 0000de8b 0000dee1 0000df2f     =.........../...
   28d6c:	0000df73 0000dfb7 0000e011 0000e261     s...........a...
   28d7c:	0000e04f 0000e08b 0000e219 28030010     O..............(
   28d8c:	5f656c62 74746167 6c635f73 66635f74     ble_gatts_clt_cf
   28d9c:	6f705f67 00006c6f 5f656c62 685f7368     g_pool..ble_hs_h
   28dac:	655f6963 6f705f76 00006c6f 5f656c62     ci_ev_pool..ble_
   28dbc:	635f7368 5f6e6e6f 6c6f6f70 00000000     hs_conn_pool....
   28dcc:	5f656c62 685f7368 665f6963 00676172     ble_hs_hci_frag.

00028ddc <ble_hs_hci_evt_dispatch>:
   28ddc:	0000003e 00010de5 00000013 00010ee7     >...............
   28dec:	00000005 00010eb5 00000008 00010ea1     ................
   28dfc:	00000030 00010e8d 00000010 00010e79     0...........y...

00028e0c <ble_hs_hci_evt_le_dispatch>:
   28e0c:	00000000 000110df 00010fdb 00011181     ................
   28e1c:	0001116d 00011159 00011145 00000000     m...Y...E.......
	...
   28e34:	00011059 00010f5d 00010f49 00010e59     Y...]...I...Y...
   28e44:	00010e5d 00010e61 00010e65 00010e6d     ]...a...e...m...
   28e54:	00010e71 00010e75 00000000 00000000     q...u...........
	...
   28e6c:	00010e69                                i...

00028e70 <priv_addr_types.12672>:
   28e70:	00000203                                ....

00028e74 <pub_addr_types.12671>:
   28e74:	00000001                                ....

00028e78 <ble_hs_pvcy_default_irk>:
   28e78:	16e28def 0d43ec4f 34dd5bbf b81e53c0     ....O.C..[.4.S..
   28e88:	5f656c62 6163326c 68635f70 705f6e61     ble_l2cap_chan_p
   28e98:	006c6f6f                                ool.

00028e9c <ble_l2cap_sig_dispatch>:
   28e9c:	00000000 00012019 00000000 00011ec7     ..... ..........
   28eac:	00000000 00011ec7 00011ec7 00011ec7     ................
   28ebc:	00000000 00011ec7 00000000 00011ec7     ................
   28ecc:	00000000 00011ec7 00000000 00011ec7     ................
   28edc:	00000000 00011ec7 000120ef 0001202d     ......... ..- ..
   28eec:	00011ec7 00011ec7 00011ec7 00011ec7     ................
   28efc:	00011ec7 00011ec7 00011ec7 5f656c62     ............ble_
   28f0c:	6163326c 69735f70 72705f67 705f636f     l2cap_sig_proc_p
   28f1c:	006c6f6f                                ool.

00028f20 <ble_sm_dispatch>:
   28f20:	00000000 000132a7 000134e3 00013435     .....2...4..54..
   28f30:	000139cb 00012e71 00013221 000131a7     .9..q...!2...1..
   28f40:	00013127 000130ad 0001302d 00013b9d     '1...0..-0...;..
   28f50:	00012459 00012459 00012459 5f656c62     Y$..Y$..Y$..ble_
   28f60:	705f6d73 5f636f72 6c6f6f70 00000000     sm_proc_pool....

00028f70 <ble_sm_state_dispatch>:
   28f70:	00013917 00012c79 00012c67 00012bc5     .9..y,..g,...+..
   28f80:	00012c19 00012b37 00012b29 00012851     .,..7+..)+..Q(..
   28f90:	0001269d 00000000 00000000              .&..........

00028f9c <ble_sm_lgcy_init_ioa>:
   28f9c:	00020000 02000002 03030200 00030002     ................
   28fac:	00000000 00020303 00000003              ............

00028fb8 <ble_sm_lgcy_resp_ioa>:
   28fb8:	00030000 03000003 02020300 00020002     ................
   28fc8:	00000000 00030202 00000002              ............

00028fd4 <ble_uuid_base>:
   28fd4:	5f9b34fb 80000080 00001000 00000000     .4._............
   28fe4:	30257830 00786834 30257830 00786c38     0x%04hx.0x%08lx.
   28ff4:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   29004:	3230252d 32302578 30252d78 30257832     -%02x%02x-%02x%0
   29014:	252d7832 25783230 2d783230 78323025     2x-%02x%02x-%02x
   29024:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
   29034:	78323025 00000000                       %02x....

0002903c <ble_att_rx_dispatch>:
   2903c:	00000001 00014731 00000002 000157d3     ....1G.......W..
   2904c:	00000003 00014759 00000004 00015867     ....YG......gX..
   2905c:	00000005 000147c1 00000006 000158d1     .....G.......X..
   2906c:	00000007 000147c9 00000008 00015949     .....G......IY..
   2907c:	00000009 000147d1 0000000a 000159f1     .....G.......Y..
   2908c:	0000000b 000147d9 0000000c 00015a6d     .....G......mZ..
   2909c:	0000000d 000147e1 0000000e 00015aed     .....G.......Z..
   290ac:	0000000f 000147e5 00000010 00015b29     .....G......)[..
   290bc:	00000011 000147ed 00000012 00015beb     .....G.......[..
   290cc:	00000013 000147f1 00000016 00015cad     .....G.......\..
   290dc:	00000017 000147f9 00000018 00015d5f     .....G......_]..
   290ec:	00000019 00014801 0000001b 00015e13     .....H.......^..
   290fc:	0000001d 00015e51 0000001e 00014885     ....Q^.......H..
   2910c:	00000052 00015c57 5f656c62 5f747461     R...W\..ble_att_
   2911c:	5f727673 70657270 746e655f 705f7972     svr_prep_entry_p
   2912c:	006c6f6f 5f656c62 5f747461 5f727673     ool.ble_att_svr_
   2913c:	72746e65 6f705f79 00006c6f              entry_pool..

00029148 <ble_svc_dis_defs>:
   29148:	00000001 200001a4 00000000 200001b0     ....... ....... 
	...
   29168:	63617041 4d206568 77656e79 694e2074     Apache Mynewt Ni
   29178:	454c426d 00000000                       mBLE....

00029180 <ble_svc_gap_defs>:
   29180:	00000001 20000214 00000000 20000220     ....... .... .. 
	...
   291a0:	5f656c62 5f696368 5f6d6172 5f646d63     ble_hci_ram_cmd_
   291b0:	6c6f6f70 00000000 5f656c62 5f696368     pool....ble_hci_
   291c0:	5f6d6172 5f747665 705f6968 006c6f6f     ram_evt_hi_pool.
   291d0:	5f656c62 5f696368 5f6d6172 5f747665     ble_hci_ram_evt_
   291e0:	705f6f6c 006c6f6f 0000002f 646c6c25     lo_pool./...%lld
   291f0:	00000000 756c6c25 00000000              ....%llu....

000291fc <sysflash_map_dflt>:
	...
   29204:	00007000 00000001 00008000 00074000     .p...........@..
   29214:	00000102 00040000 00074000 00000003     .........@......
   29224:	0007c000 00001000 00000010 00007000     .............p..
   29234:	00001000 00000111 000b4000 0034c000     .........@....4.

00029244 <boot_img_magic>:
   29244:	f395c277 7fefd260 0f505235 8079b62c     w...`...5RP.,.y.

00029254 <boot_swap_tables>:
   29254:	03040104 01040204 03040104 04030301     ................
   29264:	00000401                                ....

00029268 <__compound_literal.0>:
   29268:	00029290 20008005 00000000 00000002     ....... ........
	...
   29288:	696c7073 00000074 74617473 00007375     split...status..

00029298 <img_mgmt_handlers>:
   29298:	00017d19 00017eb1 00000000 000179a9     .}...~.......y..
	...
   292c4:	00017755 61746164 00000000 006e656c     Uw..data....len.
   292d4:	00616873 72677075 00656461 0066666f     sha.upgrade.off.
   292e4:	67616d69 00007365 746f6c73 00000000     images..slot....
   292f4:	73726576 006e6f69 68736168 00000000     version.hash....
   29304:	746f6f62 656c6261 00000000 646e6570     bootable....pend
   29314:	00676e69 666e6f63 656d7269 00000064     ing.confirmed...
   29324:	69746361 00006576 6d726570 6e656e61     active..permanen
   29334:	00000074 696c7073 61745374 00737574     t...splitStatus.
   29344:	666e6f63 006d7269 666e6f63 00000000     confirm.conf....
   29354:	646e6570 00000000 6f647075 0000656e     pend....updone..
   29364:	74737075 00747261 00000072              upstart.r...

00029370 <os_mgmt_group_handlers>:
   29370:	000185d9 000185d9 00000000 00000000     ................
   29380:	0001856d 00000000 00000000 00000000     m...............
	...
   2939c:	0001841d 6f697270 00000000 00646974     ....prio....tid.
   293ac:	74617473 00000065 756b7473 00006573     state...stkuse..
   293bc:	736b7473 00007a69 63777363 0000746e     stksiz..cswcnt..
   293cc:	746e7572 00656d69 7473616c 6568635f     runtime.last_che
   293dc:	6e696b63 00000000 7478656e 6568635f     ckin....next_che
   293ec:	6e696b63 00000000 6b736174 00000073     ckin....tasks...
   293fc:	00000000 01000000 02000000 04000000     ................
   2940c:	08000000 10000000 20000000 40000000     ........... ...@
   2941c:	80000000 1b000000 36000000              ...........6

00029428 <sbox>:
   29428:	7b777c63 c56f6bf2 2b670130 76abd7fe     c|w{.ko.0.g+...v
   29438:	7dc982ca f04759fa afa2d4ad c072a49c     ...}.YG.......r.
   29448:	2693fdb7 ccf73f36 f1e5a534 1531d871     ...&6?..4...q.1.
   29458:	c323c704 9a059618 e2801207 75b227eb     ..#..........'.u
   29468:	1a2c8309 a05a6e1b b3d63b52 842fe329     ..,..nZ.R;..)./.
   29478:	ed00d153 5bb1fc20 39becb6a cf584c4a     S... ..[j..9JLX.
   29488:	fbaaefd0 85334d43 7f02f945 a89f3c50     ....CM3.E...P<..
   29498:	8f40a351 f5389d92 21dab6bc d2f3ff10     Q.@...8....!....
   294a8:	ec130ccd 1744975f 3d7ea7c4 73195d64     ...._.D...~=d].s
   294b8:	dc4f8160 88902a22 14b8ee46 db0b5ede     `.O."*..F....^..
   294c8:	0a3a32e0 5c240649 62acd3c2 79e49591     .2:.I.$\...b...y
   294d8:	6d37c8e7 a94ed58d eaf4566c 08ae7a65     ..7m..N.lV..ez..
   294e8:	2e2578ba c6b4a61c 1f74dde8 8a8bbd4b     .x%.......t.K...
   294f8:	66b53e70 0ef60348 b9573561 9e1dc186     p>.fH...a5W.....
   29508:	1198f8e1 948ed969 e9871e9b df2855ce     ....i........U(.
   29518:	0d89a18c 6842e6bf 0f2d9941 16bb54b0     ......BhA.-..T..

00029528 <base64_chars>:
   29528:	44434241 48474645 4c4b4a49 504f4e4d     ABCDEFGHIJKLMNOP
   29538:	54535251 58575655 62615a59 66656463     QRSTUVWXYZabcdef
   29548:	6a696867 6e6d6c6b 7271706f 76757473     ghijklmnopqrstuv
   29558:	7a797877 33323130 37363534 2f2b3938     wxyz0123456789+/
   29568:	00000000                                ....

0002956c <flash_devs>:
   2956c:	000295c0 200002d4                       ....... 

00029574 <spiflash_characteristics>:
   29574:	00007530 00061a80 0001d4c0 000c3500     0u...........5..
   29584:	000249f0 000f4240 002dc6c0 00989680     .I..@B....-.....
   29594:	000002bc 00000bb8 00000014 00000032     ............2...

000295a4 <spiflash_flash_funcs>:
   295a4:	00019e33 00019ee9 0001a09f 00019c65     3...........e...
   295b4:	00000000 0001a1fd 0001a171              ........q...

000295c0 <nrf52k_flash_dev>:
   295c0:	000295d8 00000000 00080000 00000080     ................
   295d0:	00000001 000000ff                       ........

000295d8 <nrf52k_flash_funcs>:
   295d8:	0001a67d 0001a5ad 0001a52d 0001a585     }.......-.......
   295e8:	00000000 0001a581 00000000              ............

000295f4 <nrf52_hal_spis>:
   295f4:	20008074 00000000 00000000 00000000     t.. ............

00029604 <hal_i2c1_cfg>:
   29604:	00000007 00000006 00000064              ........d...

00029610 <os_bsp_spi0m_cfg>:
   29610:	00040302                                ....

00029614 <nrf52_hal_i2cs>:
   29614:	00000000 20000330                       ....0.. 

0002961c <nrf52_hal_timers>:
	...
   29630:	2000809c 736e6573 6e5f726f 6669746f     ... sensor_notif
   29640:	7476655f 00000073 74696e49 47564c20     _evts...Init LVG
   29650:	2e2e2e4c 00000000                       L.......

00029658 <COLLECTOR_NODE_HW_ID>:
   29658:	066aff57 50547878 67242949              W.j.xxTPI)$g

00029664 <SENSOR_NODE_HW_IDS>:
   29664:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   29674:	08070605 020b0a09 04030201 08070605     ................
   29684:	030b0a09 04030201 08070605 040b0a09     ................
   29694:	04030201 08070605 050b0a09 77687325     ............%shw
   296a4:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   296b4:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   296c4:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   296d4:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   296e4:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   296f4:	0a732520 00000000 00000000               %s.........

00029700 <sensor_node_addresses>:
   29700:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   29710:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   29720:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   29730:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   29740:	00000a73                                s...

00029744 <g_temp_stub_sensor_driver>:
   29744:	0001c6d1 0001c5c1 00000000 00000000     ................
	...
   2976c:	20425453 64616572 6d657420 65732070     STB read temp se
   2977c:	726f736e 0000000a                       nsor....

00029784 <g_smp_cbor_cfg>:
   29784:	0001c7f7 0001c7ef 0001c7df 0001c7b3     ................
   29794:	0001c7a1 0001c791 0001c785              ............

000297a0 <gatt_svr_chr_smp>:
   297a0:	997c4880 9e261174 ce4e01ae 2e7828fb     .H|.t.&...N..(x.
   297b0:	000000da                                ....

000297b4 <gatt_svr_svc_smp>:
   297b4:	60aa8480 8b8a5274 b74cd386 53dc1d1d     ...`tR....L....S
   297c4:	0000008d                                ....

000297c8 <gatt_svr_svcs>:
   297c8:	00000001 000297b4 00000000 20000368     ............h.. 
	...
   297e8:	635f636f 62635f6c 00000073 725f636f     oc_cl_cbs...oc_r
   297f8:	6f5f7065 00000000 5f656c62 00006c6c     ep_o....ble_ll..

00029808 <g_ble_ll_pdu_header_tx_time>:
   29808:	005001ce 02d0002c                       ..P.,...

00029810 <g_ble_ll_ctrl_pkt_lengths>:
   29810:	1601070b 0100000c 00000808 17080105     ................
   29820:	00000217 02020808 00010204 2a010122     ............"..*
   29830:	00030f08 5f656c62 735f6c6c 5f6e6163     ....ble_ll_scan_
   29840:	5f707564 6c6f6f70 00000000              dup_pool....

0002984c <g_ble_ll_supp_cmds>:
   2984c:	00000020 00004000 00000000 22280000      ....@........("
	...
   29864:	fffff700 0000000f 0ff9f000 07800000     ................
	...

0002987c <g_ble_sca_ppm_tbl>:
   2987c:	00fa01f4 00640096 0032004b 0014001e     ......d.K.2.....

0002988c <g_ble_phy_chan_freq>:
   2988c:	0a080604 12100e0c 1c181614 2422201e     ............. "$
   2989c:	2c2a2826 3432302e 3c3a3836 4442403e     &(*,.02468:<>@BD
   298ac:	4c4a4846 501a024e                       FHJLN..P

000298b4 <g_ble_phy_t_rxaddrdelay>:
   298b4:	11020611                                ....

000298b8 <g_ble_phy_t_rxenddelay>:
   298b8:	1b020616                                ....

000298bc <g_ble_phy_t_txdelay>:
   298bc:	05030405                                ....

000298c0 <g_ble_phy_t_txenddelay>:
   298c0:	09030403                                ....

000298c4 <ble_svc_ans_defs>:
   298c4:	00000001 20000398 00000000 200003b0     ....... ....... 
	...

000298e4 <ble_svc_gatt_defs>:
   298e4:	00000001 20000440 00000000 20000448     ....@.. ....H.. 
	...
   29904:	5f656c62 6f2f7368 735f7275 00006365     ble_hs/our_sec..
   29914:	5f656c62 702f7368 5f726565 00636573     ble_hs/peer_sec.
   29924:	5f656c62 632f7368 00646363 5f72756f     ble_hs/cccd.our_
   29934:	00636573 72656570 6365735f 00000000     sec.peer_sec....
   29944:	64636363 00000000 5f656c62 00007368     cccd....ble_hs..
   29954:	00000031 44524148 00000000 45534552     1...HARD....RESE
   29964:	49505f54 0000004e 474f4457 00000000     T_PIN...WDOG....
   29974:	54464f53 00000000 574f5242 54554f4e     SOFT....BROWNOUT
   29984:	00000000 55514552 45545345 00000044     ....REQUESTED...
   29994:	54535953 4f5f4d45 495f4646 0000544e     SYSTEM_OFF_INT..
   299a4:	00554644 4548544f 30203a52 00582578     DFU.OTHER: 0x%X.
   299b4:	4e4b4e55 204e574f 00006425 006e7372     UNKNOWN %d..rsn.
   299c4:	00746e63 00676d69 252e7525 75252e75     cnt.img.%u.%u.%u
   299d4:	0075252e 00656964 253a7325 00000064     .%u.die.%s:%d...
   299e4:	00006370 67616c66 00000073 00207325     pc..flags...%s .
   299f4:	6f626572 722f746f 6f6f6265 6e635f74     reboot/reboot_cn
   29a04:	00000074 6f626572 772f746f 74746972     t...reboot/writt
   29a14:	00006e65 6f626572 635f746f 0000746e     en..reboot_cnt..
   29a24:	74697277 006e6574 6f626572 0000746f     written.reboot..
   29a34:	7465733c 0000003e 70616f63 6365725f     <set>...coap_rec
   29a44:	65766965 544f4e20 504d4920 454d454c     eive NOT IMPLEME
   29a54:	4445544e 0000000a                       NTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 137812	    992	  37156	 175960	  2af58	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
